uint64_t _convertSemanticStringToSemantic(void *a1)
{
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("vertex")) & 1) != 0)
    return 1;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("normal")) & 1) != 0)
    return 2;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("color")) & 1) != 0)
    return 3;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("texcoord")) & 1) != 0)
    return 4;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("tangent")) & 1) != 0)
    return 5;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("modelViewProjectionTransform")) & 1) != 0)
    return 6;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("modelViewTransform")) & 1) != 0)
    return 7;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("modelTransform")) & 1) != 0)
    return 8;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("viewTransform")) & 1) != 0)
    return 9;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("projectionTransform")) & 1) != 0)
    return 10;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("normalTransform")) & 1) != 0)
    return 11;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("modelViewProjectionInverseTransform")) & 1) != 0)
    return 12;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("modelViewInverseTransform")) & 1) != 0)
    return 13;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("modelInverseTransform")) & 1) != 0)
    return 14;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("viewInverseTransform")) & 1) != 0)
    return 15;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("projectionInverseTransform")) & 1) != 0)
    return 16;
  if (objc_msgSend(a1, "isEqualToString:", CFSTR("normalInverseTransform")))
    return 17;
  return 0;
}

__CFString *C3DBlendFactorToString(unsigned int a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1 >= 0xF)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DBlendFactorToString_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return str_BlendModes[a1];
}

__CFString *C3DBlendOpToString(unsigned int a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1 >= 5)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DBlendOpToString_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return str_BlendOps[a1];
}

__CFString *_C3DBlendStatesCFCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;
  uint64_t v3;
  unsigned __int8 *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  const char *v8;
  __CFString *v9;
  __CFString *v10;
  unsigned int v11;
  uint64_t v12;
  __CFString *v13;
  unsigned int v14;
  unsigned int v15;
  const char *v16;
  __CFString *v17;
  __CFString *v18;
  __CFString *v19;
  __CFString *v20;
  __CFString *v21;
  unsigned int v22;
  __CFString *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __CFString *v28;
  const char *v29;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<C3DBlendStates %p targetCount:%d needsBlendColor:%d\n"), a1, *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 56));
  if (*(uint64_t *)(a1 + 48) >= 1)
  {
    v3 = 0;
    v4 = (unsigned __int8 *)(a1 + 23);
    do
    {
      v5 = *(v4 - 5);
      v6 = *(v4 - 4);
      v7 = *(v4 - 3);
      if ((*(v4 - 6) & 1) != 0)
      {
        v11 = *v4;
        v12 = a1;
        v13 = Mutable;
        v14 = *(v4 - 1);
        v15 = *(v4 - 2);
        v16 = "false";
        if ((*(v4 - 7) & 1) != 0)
          v16 = "true";
        v29 = v16;
        v17 = C3DBlendFactorToString(v5);
        v18 = C3DBlendOpToString(v7);
        v19 = C3DBlendFactorToString(v6);
        v20 = C3DBlendFactorToString(v15);
        v21 = C3DBlendOpToString(v11);
        v22 = v14;
        Mutable = v13;
        a1 = v12;
        v28 = C3DBlendFactorToString(v22);
        CFStringAppendFormat(Mutable, 0, CFSTR("  blend:%s col[(src * %@) %@ (dst * %@)] alpha[(src * %@) %@ (dst * %@)]\n"), v29, v17, v18, v19, v20, v21, v28);
      }
      else
      {
        if ((*(v4 - 7) & 1) != 0)
          v8 = "true";
        else
          v8 = "false";
        v9 = C3DBlendFactorToString(v5);
        v10 = C3DBlendOpToString(v7);
        v24 = C3DBlendFactorToString(v6);
        CFStringAppendFormat(Mutable, 0, CFSTR("  blend:%s col[(src * %@) %@ (dst * %@)]\n"), v8, v9, v10, v24, v25, v26, v27);
      }
      ++v3;
      v4 += 8;
    }
    while (v3 < *(_QWORD *)(a1 + 48));
  }
  CFStringAppend(Mutable, CFSTR(">"));
  return Mutable;
}

uint64_t C3DBlendStatesDefaultAdditive()
{
  if (C3DBlendStatesDefaultAdditive_onceToken != -1)
    dispatch_once(&C3DBlendStatesDefaultAdditive_onceToken, &__block_literal_global_7_4);
  return C3DBlendStatesDefaultAdditive_states;
}

uint64_t C3DBlendStatesDefaultMultiplicative()
{
  if (C3DBlendStatesDefaultMultiplicative_onceToken != -1)
    dispatch_once(&C3DBlendStatesDefaultMultiplicative_onceToken, &__block_literal_global_9_4);
  return C3DBlendStatesDefaultMultiplicative_states;
}

uint64_t C3DBlendStatesDefaultMultiplicativeSeparate()
{
  if (C3DBlendStatesDefaultMultiplicativeSeparate_onceToken != -1)
    dispatch_once(&C3DBlendStatesDefaultMultiplicativeSeparate_onceToken, &__block_literal_global_12);
  return C3DBlendStatesDefaultMultiplicativeSeparate_states;
}

uint64_t C3DBlendStatesDefaultOverBlack()
{
  if (C3DBlendStatesDefaultOverBlack_onceToken != -1)
    dispatch_once(&C3DBlendStatesDefaultOverBlack_onceToken, &__block_literal_global_18_0);
  return C3DBlendStatesDefaultOverBlack_states;
}

uint64_t C3DBlendStatesDefaultSubtract()
{
  if (C3DBlendStatesDefaultSubtract_onceToken != -1)
    dispatch_once(&C3DBlendStatesDefaultSubtract_onceToken, &__block_literal_global_24_0);
  return C3DBlendStatesDefaultSubtract_states;
}

uint64_t C3DBlendStatesDefaultMax()
{
  if (C3DBlendStatesDefaultMax_onceToken != -1)
    dispatch_once(&C3DBlendStatesDefaultMax_onceToken, &__block_literal_global_27_1);
  return C3DBlendStatesDefaultMax_states;
}

uint64_t C3DBlendStatesDefaultScreen()
{
  if (C3DBlendStatesDefaultScreen_onceToken != -1)
    dispatch_once(&C3DBlendStatesDefaultScreen_onceToken, &__block_literal_global_30_0);
  return C3DBlendStatesDefaultScreen_states;
}

uint64_t C3DBlendStatesDefaultConstantAlpha()
{
  if (C3DBlendStatesDefaultConstantAlpha_onceToken != -1)
    dispatch_once(&C3DBlendStatesDefaultConstantAlpha_onceToken, &__block_literal_global_33);
  return C3DBlendStatesDefaultConstantAlpha_states;
}

uint64_t C3DBlendStatesDefaultConstantColor()
{
  if (C3DBlendStatesDefaultConstantColor_onceToken != -1)
    dispatch_once(&C3DBlendStatesDefaultConstantColor_onceToken, &__block_literal_global_36);
  return C3DBlendStatesDefaultConstantColor_states;
}

uint64_t C3DTransformGetRotationType(uint64_t a1)
{
  return *(_DWORD *)(a1 + 92) & 3;
}

__n128 C3DTransformSetMatrix(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  *(_DWORD *)(a1 + 92) = 8;
  return result;
}

float32x4_t *C3DTransformGetMatrixPtr(float32x4_t *a1)
{
  if ((a1[5].i8[12] & 8) == 0)
    _updateMatrix(a1);
  return a1;
}

void C3DTransformGetQuaternion(uint64_t a1)
{
  int v2;
  int v3;
  float32x4_t v4;
  float32x4_t v5;
  float v6;
  float v7;

  v2 = *(_DWORD *)(a1 + 92);
  if ((v2 & 4) == 0)
  {
    _updateAffine(a1);
    v2 = *(_DWORD *)(a1 + 92);
  }
  v3 = v2 & 3;
  if (v3 == 2)
  {
    v4 = *(float32x4_t *)(a1 + 64);
    v5 = vmulq_f32(v4, v4);
    if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v5, 2), vaddq_f32(v5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.f32, 1))).f32[0] > 0.000000001)__sincosf_stret(vmuls_lane_f32(0.5, v4, 3));
  }
  else if (v3)
  {
    v6 = *(float *)(a1 + 68);
    v7 = *(float *)(a1 + 72);
    __sincosf_stret(*(float *)(a1 + 64) * 0.5);
    __sincosf_stret(v6 * 0.5);
    __sincosf_stret(v7 * 0.5);
  }
}

BOOL _updateAffine(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL8 result;

  if ((*(_BYTE *)(a1 + 92) & 8) == 0)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      _updateAffine_cold_2(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  if ((*(_BYTE *)(a1 + 92) & 4) != 0)
  {
    v10 = scn_default_log();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
      _updateAffine_cold_1(v10, v11, v12, v13, v14, v15, v16, v17);
  }
  result = C3DMatrix4x4GetAffineTransforms(a1, 0, (int8x16_t *)(a1 + 64), (float32x4_t *)(a1 + 80));
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a1 + 92) & 0xFFFFFFF8 | 4;
  return result;
}

__n128 C3DTransformGetEuler(float32x4_t *a1)
{
  __int32 v2;
  int v3;
  float32x4_t *v4;
  int8x16_t *v5;
  int8x16_t v6;
  int8x16_t v8;

  v2 = a1[5].i32[3];
  if ((v2 & 4) == 0)
  {
    _updateAffine((uint64_t)a1);
    v2 = a1[5].i32[3];
  }
  v8.i32[2] = 0;
  v8.i64[0] = 0;
  v3 = v2 & 3;
  if (v3 == 2)
  {
    C3DVector3MakeEulerFromAxisAngle(a1[4]);
    v8 = v6;
LABEL_8:
    v5 = &v8;
    return *(__n128 *)v5;
  }
  if (v3 == 1)
  {
    v5 = (int8x16_t *)&a1[4];
    return *(__n128 *)v5;
  }
  if (v3)
    goto LABEL_8;
  v4 = a1 + 4;
  v5 = &v8;
  C3DQuaternionGetEuler(v4, &v8);
  return *(__n128 *)v5;
}

void C3DTransformSetEuler(uint64_t a1, __n128 a2)
{
  int v3;
  __n128 v4;

  v3 = *(_DWORD *)(a1 + 92);
  if ((v3 & 4) == 0)
  {
    v4 = a2;
    _updateAffineScale((float32x4_t *)a1);
    a2 = v4;
    v3 = *(_DWORD *)(a1 + 92);
  }
  *(_DWORD *)(a1 + 92) = v3 & 0xFFFFFFF4 | 1;
  *(__n128 *)(a1 + 64) = a2;
}

void C3DTransformGetAxisAngle(float32x4_t *a1)
{
  __int32 v2;
  float32x4_t v3;
  int v4;
  float32x4_t v5;

  v2 = a1[5].i32[3];
  if ((v2 & 4) == 0)
  {
    _updateAffine((uint64_t)a1);
    v2 = a1[5].i32[3];
  }
  v3 = 0uLL;
  v5 = 0u;
  v4 = v2 & 3;
  if (v4 != 2)
  {
    if (v4 == 1)
    {
      *(double *)v3.i64 = C3DVector4MakeAxisAngleFromEuler(a1[4]);
    }
    else if (!v4)
    {
      C3DQuaternionGetAxisAngle(a1 + 4, &v5);
      v3 = v5;
    }
    a1[4] = v3;
    a1[5].i32[3] = a1[5].i32[3] & 0xFFFFFFFC | 2;
  }
}

void C3DTransformSetAxisAngle(uint64_t a1, __n128 a2)
{
  int v3;
  __n128 v4;

  v3 = *(_DWORD *)(a1 + 92);
  if ((v3 & 4) == 0)
  {
    v4 = a2;
    _updateAffineScale((float32x4_t *)a1);
    a2 = v4;
    v3 = *(_DWORD *)(a1 + 92);
  }
  *(_DWORD *)(a1 + 92) = v3 & 0xFFFFFFF4 | 2;
  *(__n128 *)(a1 + 64) = a2;
}

__n128 C3DTransformGetPosition(__n128 *a1)
{
  return a1[3];
}

__n128 C3DTransformGetScale(__n128 *a1)
{
  if ((a1[5].n128_u8[12] & 4) == 0)
    _updateAffine((uint64_t)a1);
  return a1[5];
}

void C3DTransformGetValue(uint64_t a1, void *a2, size_t a3, int a4, unsigned int a5)
{
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 Euler;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  _OWORD v29[4];

  if (a5 >= 4)
  {
    v10 = scn_default_log();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
      C3DTransformGetValue_cold_2(v10, v11, v12, v13, v14, v15, v16, v17);
  }
  switch(a4)
  {
    case 3:
      C3DTransformGetQuaternion(a1);
      goto LABEL_14;
    case 4:
      C3DTransformGetAxisAngle((float32x4_t *)a1);
      goto LABEL_14;
    case 5:
      Euler = C3DTransformGetEuler((float32x4_t *)a1);
      goto LABEL_14;
    case 6:
      Euler = *(__n128 *)(a1 + 48);
      goto LABEL_14;
    case 7:
      if ((*(_BYTE *)(a1 + 92) & 4) == 0)
        _updateAffine(a1);
      Euler = *(__n128 *)(a1 + 80);
LABEL_14:
      v29[0] = Euler;
      goto LABEL_15;
    case 8:
      if ((*(_BYTE *)(a1 + 92) & 8) == 0)
        _updateMatrix((float32x4_t *)a1);
      v27 = *(_OWORD *)(a1 + 16);
      v29[0] = *(_OWORD *)a1;
      v29[1] = v27;
      v28 = *(_OWORD *)(a1 + 48);
      v29[2] = *(_OWORD *)(a1 + 32);
      v29[3] = v28;
LABEL_15:
      memcpy(a2, (char *)v29 + 4 * a5, a3);
      break;
    default:
      v19 = scn_default_log();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        C3DTransformGetValue_cold_1(v19, v20, v21, v22, v23, v24, v25, v26);
      break;
  }
}

void __setQuaternionValue(uint64_t a1, __int128 *a2, uint64_t a3, int a4)
{
  __int128 v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  int v17;
  __int128 v18;
  __int128 v19;

  if (a3 != 4)
  {
    if (a3 == 16)
    {
      v7 = *a2;
      goto LABEL_14;
    }
    v8 = scn_default_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      __setQuaternionValue_cold_2(v8, v9, v10, v11, v12, v13, v14, v15);
  }
  C3DTransformGetQuaternion(a1);
  switch(a4)
  {
    case 0:
      LODWORD(v7) = *(_DWORD *)a2;
      break;
    case 1:
      DWORD1(v7) = *(_DWORD *)a2;
      break;
    case 2:
      DWORD2(v7) = *(_DWORD *)a2;
      break;
    case 3:
      HIDWORD(v7) = *(_DWORD *)a2;
      break;
    default:
      v18 = v7;
      v16 = scn_default_log();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        __setQuaternionValue_cold_1();
      v7 = v18;
      break;
  }
LABEL_14:
  v17 = *(_DWORD *)(a1 + 92);
  if ((v17 & 4) == 0)
  {
    v19 = v7;
    _updateAffineScale((float32x4_t *)a1);
    v17 = *(_DWORD *)(a1 + 92);
    v7 = v19;
  }
  *(_DWORD *)(a1 + 92) = v17 & 0xFFFFFFF4;
  *(_OWORD *)(a1 + 64) = v7;
}

void __setAxisAngleValue(uint64_t a1, __int128 *a2, uint64_t a3, int a4)
{
  __int128 v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  int v17;
  __int128 v18;
  __int128 v19;

  if (a3 != 4)
  {
    if (a3 == 16)
    {
      v7 = *a2;
      goto LABEL_14;
    }
    v8 = scn_default_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      __setQuaternionValue_cold_2(v8, v9, v10, v11, v12, v13, v14, v15);
  }
  C3DTransformGetAxisAngle((float32x4_t *)a1);
  switch(a4)
  {
    case 0:
      LODWORD(v7) = *(_DWORD *)a2;
      break;
    case 1:
      DWORD1(v7) = *(_DWORD *)a2;
      break;
    case 2:
      DWORD2(v7) = *(_DWORD *)a2;
      break;
    case 3:
      HIDWORD(v7) = *(_DWORD *)a2;
      break;
    default:
      v18 = v7;
      v16 = scn_default_log();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        __setQuaternionValue_cold_1();
      v7 = v18;
      break;
  }
LABEL_14:
  v17 = *(_DWORD *)(a1 + 92);
  if ((v17 & 4) == 0)
  {
    v19 = v7;
    _updateAffineScale((float32x4_t *)a1);
    v17 = *(_DWORD *)(a1 + 92);
    v7 = v19;
  }
  *(_DWORD *)(a1 + 92) = v17 & 0xFFFFFFF4 | 2;
  *(_OWORD *)(a1 + 64) = v7;
}

void __setEulerAngleValue(uint64_t a1, uint64_t a2, unint64_t a3, int a4, __n128 a5)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 Euler;
  __n128 v17;
  NSObject *v18;
  int v19;
  __n128 v20;
  __n128 v21;

  if (a3 >= 0xC)
  {
    a5.n128_u64[0] = *(_QWORD *)a2;
    a5.n128_u32[2] = *(_DWORD *)(a2 + 8);
    goto LABEL_17;
  }
  if (a3 != 4)
  {
    v8 = scn_default_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      __setQuaternionValue_cold_2(v8, v9, v10, v11, v12, v13, v14, v15);
  }
  Euler = C3DTransformGetEuler((float32x4_t *)a1);
  switch(a4)
  {
    case 2:
      v17.n128_u64[0] = Euler.n128_u64[0];
      v17.n128_u32[2] = *(_DWORD *)a2;
LABEL_13:
      v17.n128_u32[3] = Euler.n128_u32[3];
      a5 = v17;
      goto LABEL_17;
    case 1:
      v17.n128_u32[0] = Euler.n128_u32[0];
      v17.n128_u32[1] = *(_DWORD *)a2;
      goto LABEL_12;
    case 0:
      v17.n128_u32[0] = *(_DWORD *)a2;
      v17.n128_u32[1] = Euler.n128_u32[1];
LABEL_12:
      v17.n128_u32[2] = Euler.n128_u32[2];
      goto LABEL_13;
  }
  v20 = Euler;
  v18 = scn_default_log();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    __setQuaternionValue_cold_1();
  a5 = v20;
LABEL_17:
  v19 = *(_DWORD *)(a1 + 92);
  if ((v19 & 4) == 0)
  {
    v21 = a5;
    _updateAffineScale((float32x4_t *)a1);
    a5 = v21;
    v19 = *(_DWORD *)(a1 + 92);
  }
  *(_DWORD *)(a1 + 92) = v19 & 0xFFFFFFF4 | 1;
  *(__n128 *)(a1 + 64) = a5;
}

float __setPositionValue(__n128 *a1, unsigned __int32 *a2, unint64_t a3, int a4, __n128 a5)
{
  __n128 v7;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  NSObject *v18;
  __n128 v20;

  if (a3 < 0xC)
  {
    if (a3 != 4)
    {
      v9 = scn_default_log();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
        __setQuaternionValue_cold_2(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    v17 = a1[3];
    if (a4 == 2)
    {
      v17.n128_u32[2] = *a2;
    }
    else
    {
      if (a4 == 1)
      {
        a5 = a1[3];
        a5.n128_u32[1] = *a2;
      }
      else
      {
        if (a4)
        {
          v20 = a1[3];
          v18 = scn_default_log();
          if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
            __setQuaternionValue_cold_1();
          v17 = v20;
          goto LABEL_16;
        }
        a5.n128_u32[0] = *a2;
        a5.n128_u32[1] = HIDWORD(a1[3].n128_u64[0]);
      }
      a5.n128_u32[2] = a1[3].n128_u64[1];
      v17 = a5;
    }
LABEL_16:
    v7.n128_u32[0] = 1.0;
    v17.n128_u32[3] = 1.0;
    a1[3] = v17;
    return v7.n128_f32[0];
  }
  v7.n128_u64[0] = *(_QWORD *)a2;
  v7.n128_u32[2] = a2[2];
  v7.n128_u32[3] = 1.0;
  a1[3] = v7;
  return v7.n128_f32[0];
}

void __setScaleValue(uint64_t a1, _DWORD *a2, unint64_t a3, int a4, __n128 a5)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;

  if (a3 < 0xC)
  {
    if (a3 != 4)
    {
      v8 = scn_default_log();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
        __setQuaternionValue_cold_2(v8, v9, v10, v11, v12, v13, v14, v15);
    }
    if ((*(_BYTE *)(a1 + 92) & 4) == 0)
      _updateAffine(a1);
    if (a4 == 2)
    {
      *(_DWORD *)(a1 + 88) = *a2;
    }
    else if (a4 == 1)
    {
      *(_DWORD *)(a1 + 84) = *a2;
    }
    else if (a4)
    {
      v16 = scn_default_log();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        __setQuaternionValue_cold_1();
    }
    else
    {
      *(_DWORD *)(a1 + 80) = *a2;
    }
    *(_DWORD *)(a1 + 92) &= ~8u;
  }
  else
  {
    a5.n128_u64[0] = *(_QWORD *)a2;
    a5.n128_u32[2] = a2[2];
    C3DTransformSetScale(a1, a5);
  }
}

_OWORD *__setTransformValue(_OWORD *result, _OWORD *a2, size_t a3, unsigned int a4)
{
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  v4 = result;
  if (a3 == 96)
  {
    v8 = a2[1];
    *result = *a2;
    result[1] = v8;
    v9 = a2[2];
    v10 = a2[3];
    v11 = a2[5];
    result[4] = a2[4];
    result[5] = v11;
    result[2] = v9;
    result[3] = v10;
  }
  else
  {
    if (a3 == 64)
    {
      v5 = a2[1];
      v6 = a2[2];
      v7 = a2[3];
      *result = *a2;
      result[1] = v5;
      result[2] = v6;
      result[3] = v7;
    }
    else
    {
      result = memcpy((char *)result + 4 * a4, a2, a3);
    }
    *((_DWORD *)v4 + 23) = 8;
  }
  return result;
}

void __setValueError()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = scn_default_log();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
    __setValueError_cold_1(v0, v1, v2, v3, v4, v5, v6, v7);
}

void C3DTransformSetValue(__n128 *a1, __int128 *a2, unint64_t a3, int a4, unsigned int a5, __n128 a6)
{
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (a5 >= 4)
  {
    v11 = scn_default_log();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
      C3DTransformSetValue_cold_1(v11, v12, v13, v14, v15, v16, v17, v18);
  }
  switch(a4)
  {
    case 3:
      __setQuaternionValue((uint64_t)a1, a2, a3, a5);
      break;
    case 4:
      __setAxisAngleValue((uint64_t)a1, a2, a3, a5);
      break;
    case 5:
      __setEulerAngleValue((uint64_t)a1, (uint64_t)a2, a3, a5, a6);
      break;
    case 6:
      __setPositionValue(a1, (unsigned __int32 *)a2, a3, a5, a6);
      break;
    case 7:
      __setScaleValue((uint64_t)a1, a2, a3, a5, a6);
      break;
    case 8:
      __setTransformValue(a1, a2, a3, a5);
      break;
    default:
      __setValueError();
      break;
  }
}

CFStringRef _SCNShadableConvertShaderToMetalIfNeeded(NSString *a1)
{
  if (C3DGetShadingLanguageFromSource(a1) == 1)
    return (id)C3DConvertGLSLShaderToMetal(a1, 0);
  else
    return (CFStringRef)a1;
}

uint64_t _fxSemanticFromSemanticString(void *a1)
{
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("kGeometrySourceSemanticVertex")) & 1) != 0)
    return 1;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("kGeometrySourceSemanticNormal")) & 1) != 0)
    return 2;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("kGeometrySourceSemanticColor")) & 1) != 0)
    return 3;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("kGeometrySourceSemanticTexcoord")) & 1) != 0)
    return 4;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("kGeometrySourceSemanticTangent")) & 1) != 0)
    return 5;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("kModelViewProjectionTransform")) & 1) != 0)
    return 6;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("kModelViewTransform")) & 1) != 0)
    return 7;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("kModelTransform")) & 1) != 0)
    return 8;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("kViewTransform")) & 1) != 0)
    return 9;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("kProjectionTransform")) & 1) != 0)
    return 10;
  if (objc_msgSend(a1, "isEqualToString:", CFSTR("kNormalTransform")))
    return 11;
  return 0;
}

uint64_t _programBindValueForSymbolCallback(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v12;
  uint64_t PassAtIndex;

  v12 = objc_msgSend(a6, "_technique");
  if (v12 && (PassAtIndex = C3DFXTechniqueGetPassAtIndex(v12, 0), C3DFXPassGetInputWithName(PassAtIndex, a2)))
    return 1;
  else
    return objc_msgSend(a6, "_bindValueForSymbol:atLocation:programID:node:renderer:", a2, a4, a3, +[SCNNode nodeWithNodeRef:](SCNNode, "nodeWithNodeRef:", a5), C3DEngineContextGetUserInfo(a1));
}

const void *_programDelegateUnbindValueForSymbolCallback(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v12;
  uint64_t PassAtIndex;
  const void *result;

  v12 = objc_msgSend(a6, "_technique");
  if (!v12)
    return (const void *)objc_msgSend(a6, "_unbindValueForSymbol:atLocation:programID:node:renderer:", a2, a4, a3, +[SCNNode nodeWithNodeRef:](SCNNode, "nodeWithNodeRef:", a5), C3DEngineContextGetUserInfo(a1));
  PassAtIndex = C3DFXTechniqueGetPassAtIndex(v12, 0);
  result = C3DFXPassGetInputWithName(PassAtIndex, a2);
  if (!result)
    return (const void *)objc_msgSend(a6, "_unbindValueForSymbol:atLocation:programID:node:renderer:", a2, a4, a3, +[SCNNode nodeWithNodeRef:](SCNNode, "nodeWithNodeRef:", a5), C3DEngineContextGetUserInfo(a1));
  return result;
}

void _programDelegateHandleErrorCallback(uint64_t a1, __CFError *a2, void *a3)
{
  void *v4;
  void *v5;
  CFDictionaryRef v6;

  v4 = (void *)objc_msgSend(a3, "program");
  v5 = (void *)objc_msgSend(v4, "delegate");
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v6 = CFErrorCopyUserInfo(a2);
    objc_msgSend(v5, "program:handleError:", v4, objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("SCNErrorDomain"), 1, v6));
    CFRelease(v6);
  }
}

void __setupDefaultArguments(void *a1, __int16 *a2, uint64_t a3)
{
  if (!C3DEntityGetValueForKey(a3, a1))
    C3DEntitySetValueForKey(a3, a1, a2);
}

const char *C3D::OverlayPass::name(C3D::OverlayPass *this)
{
  return "OverlayPass";
}

float32x2_t C3D::OverlayPass::setup(C3D::OverlayPass *this)
{
  uint64_t v2;
  uint64_t v3;
  uint32x2_t v4;
  float32x2_t result;
  __int128 v6;
  __int128 v7;
  int v8;

  C3D::Pass::setInputCount(this, 1u);
  C3D::Pass::setOutputCount(this, 1u);
  v2 = C3D::PassDescriptor::inputAtIndex((C3D::OverlayPass *)((char *)this + 32), 0);
  *(_QWORD *)(v2 + 8) = "COLOR";
  *(_WORD *)(v2 + 66) = *(_WORD *)(v2 + 66) & 0xFFFC | 1;
  C3D::Pass::parentColorDesc(this, (uint64_t)&v7);
  *(_OWORD *)(v2 + 16) = v7;
  *(_DWORD *)(v2 + 32) = v8;
  *(_WORD *)(v2 + 66) |= 0x80u;
  v3 = C3D::PassDescriptor::outputAtIndex((C3D::OverlayPass *)((char *)this + 32), 0);
  *(_QWORD *)(v3 + 8) = "COLOR";
  *(_BYTE *)(v3 + 65) = 0;
  *(_WORD *)(v3 + 66) = *(_WORD *)(v3 + 66) & 0xFFFC | 1;
  C3D::Pass::parentColorDesc(this, (uint64_t)&v7);
  *(_OWORD *)(v3 + 16) = v7;
  *(_DWORD *)(v3 + 32) = v8;
  *((_WORD *)this + 19) = 1;
  *((_BYTE *)this + 121) = 1;
  v4.i32[0] = *(unsigned __int16 *)(v2 + 16);
  v4.i32[1] = *(unsigned __int16 *)(v2 + 18);
  result = vcvt_f32_u32(v4);
  *(_QWORD *)&v6 = 0;
  *((float32x2_t *)&v6 + 1) = result;
  *((_OWORD *)this + 8) = v6;
  return result;
}

void C3D::OverlayPass::execute(__n128 *a1)
{
  void (*v2)(unint64_t);
  void *UserInfo;
  id AuthoringEnvironment;
  uint64_t v5;
  __n128 Viewport;

  v2 = *(void (**)(unint64_t))(C3DEngineContextGetRenderCallbacks(a1[1].n128_i64[0]) + 16);
  if (v2)
    v2(a1[1].n128_u64[0]);
  Viewport = 0u;
  if (C3DEngineContextGetEyeCount(a1[1].n128_i64[0]) >= 2)
  {
    Viewport = C3DEngineContextGetViewport((__n128 *)a1[1].n128_u64[0]);
    C3DEngineContextSetViewport(a1[8], (__n128 *)a1[1].n128_u64[0]);
  }
  UserInfo = (void *)C3DEngineContextGetUserInfo(a1[1].n128_i64[0]);
  if (UserInfo)
  {
    if (objc_msgSend(UserInfo, "showsStatistics", *(_OWORD *)&Viewport))
    {
      AuthoringEnvironment = C3DEngineContextGetAuthoringEnvironment(a1[1].n128_i64[0], 0);
      if (AuthoringEnvironment)
      {
        v5 = (uint64_t)AuthoringEnvironment;
        C3DAuthoringEnvironmentDrawStats((uint64_t)AuthoringEnvironment);
        C3DAuthoringEnvironmentEndFrame(v5);
      }
    }
  }
  if (C3DEngineContextGetEyeCount(a1[1].n128_i64[0]) >= 2)
    C3DEngineContextSetViewport(Viewport, (__n128 *)a1[1].n128_u64[0]);
}

CFStringRef _C3DArrayCFCopyFormatDescription(unsigned int *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DArray %p:, %d objects>"), a1, a1[6]);
}

CFStringRef _C3DArrayCFCopyDebugDescription(unsigned int *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DArray %p:, %d objects>"), a1, a1[6]);
}

void *C3DArrayAppendValue(uint64_t a1, void *__src)
{
  int v4;
  int v5;
  size_t v6;
  void *v7;

  v4 = *(_DWORD *)(a1 + 24);
  if (v4 == *(_DWORD *)(a1 + 28))
  {
    v5 = v4 ? 2 * v4 : 4;
    if (v4 != v5)
    {
      __allocate(a1, *(_DWORD *)(a1 + 32) * v4, (*(_DWORD *)(a1 + 32) * v5));
      *(_DWORD *)(a1 + 28) = v5;
      v4 = *(_DWORD *)(a1 + 24);
    }
  }
  v6 = *(unsigned int *)(a1 + 32);
  v7 = (void *)(*(_QWORD *)(a1 + 16) + (v6 * v4));
  if (__src)
    memcpy(v7, __src, v6);
  else
    bzero(v7, *(unsigned int *)(a1 + 32));
  ++*(_DWORD *)(a1 + 24);
  return v7;
}

uint64_t CATextTruncationModeFromC3DTextTruncationMode(int a1)
{
  uint64_t *v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  switch(a1)
  {
    case 0:
      v1 = (uint64_t *)MEMORY[0x1E0CD31A0];
      goto LABEL_9;
    case 1:
      v1 = (uint64_t *)MEMORY[0x1E0CD31A8];
      goto LABEL_9;
    case 2:
      v1 = (uint64_t *)MEMORY[0x1E0CD3190];
      goto LABEL_9;
    case 3:
      v1 = (uint64_t *)MEMORY[0x1E0CD3198];
LABEL_9:
      result = *v1;
      break;
    default:
      v2 = scn_default_log();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
        CATextTruncationModeFromC3DTextTruncationMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
      result = 0;
      break;
  }
  return result;
}

uint64_t CATextAlignmentModeFromC3DTextAlignmentMode(int a1)
{
  uint64_t *v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  switch(a1)
  {
    case 0:
      v1 = (uint64_t *)MEMORY[0x1E0CD2908];
      goto LABEL_10;
    case 1:
      v1 = (uint64_t *)MEMORY[0x1E0CD2900];
      goto LABEL_10;
    case 2:
      v1 = (uint64_t *)MEMORY[0x1E0CD2910];
      goto LABEL_10;
    case 3:
      v1 = (uint64_t *)MEMORY[0x1E0CD28F0];
      goto LABEL_10;
    case 4:
      v1 = (uint64_t *)MEMORY[0x1E0CD28F8];
LABEL_10:
      result = *v1;
      break;
    default:
      v2 = scn_default_log();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
        CATextTruncationModeFromC3DTextTruncationMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
      result = 0;
      break;
  }
  return result;
}

CFStringRef _C3DSpanAllocatorCFCopyFormatDescription(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DSpanAllocator %p>"), a1);
}

CFStringRef _C3DSpanAllocatorCFCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DSpanAllocator %p>"), a1);
}

void __DestructPage(uint64_t a1)
{
  void *v2;
  void *v3;
  _QWORD *v4;
  void *v5;

  v2 = *(void **)a1;
  if (v2)
  {
    free(v2);
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
  }
  v5 = *(void **)(a1 + 16);
  v4 = (_QWORD *)(a1 + 16);
  v3 = v5;
  if (v5)
  {
    free(v3);
    *v4 = 0;
    v4[1] = 0;
  }
}

_DWORD *__RemoveFromFreeList(_DWORD *result, uint64_t a2)
{
  uint64_t v2;

  v2 = (result[6] - 1);
  result[6] = v2;
  if ((_DWORD)v2 != (_DWORD)a2)
    return memmove((void *)(*((_QWORD *)result + 2) + 8 * a2), (const void *)(*((_QWORD *)result + 2) + 8 * a2 + 8), 8 * (v2 - a2));
  return result;
}

void __DeallocateSpan(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = (unsigned __int16)a2;
  v6 = v4 + 40 * (unsigned __int16)a2;
  if (*(_DWORD *)(v6 + 12) != (unsigned __int16)a2)
  {
    v7 = scn_default_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
      __DeallocateSpan_cold_1(v7, v8, v9, v10, v11, v12, v13, v14);
  }
  __AddToFreeList(v6, a2);
  if (*(_DWORD *)(v4 + 40 * v5 + 32) == *(_DWORD *)(v4 + 40 * v5 + 8) && *(_DWORD *)(a1 + 28) >= 2u)
  {
    __DestructPage(v6);
    --*(_DWORD *)(a1 + 28);
  }
}

uint64_t C3DSpanAllocatorEnumerate(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  _QWORD *v13;
  uint64_t v14;

  v14 = *(unsigned int *)(result + 24);
  if ((_DWORD)v14)
  {
    v3 = result;
    for (i = 0; i != v14; ++i)
    {
      v5 = *(_QWORD *)(v3 + 16);
      v6 = v5 + 40 * i;
      if (*(_DWORD *)(v6 + 24))
      {
        v7 = v5 + 40 * i;
        v8 = *(unsigned __int16 *)(*(_QWORD *)(v7 + 16) + 2);
        v9 = *(_DWORD *)(v7 + 8);
        if (v9)
          goto LABEL_7;
      }
      else
      {
        v9 = *(_DWORD *)(v5 + 40 * i + 8);
        v8 = v9;
        if (v9)
        {
LABEL_7:
          v10 = 0;
          v11 = 0;
          v12 = (unsigned int *)(v5 + 40 * i + 8);
          v13 = (_QWORD *)(v5 + 40 * i + 16);
          do
          {
            if (v11 == v8)
            {
              v11 = v8 + *(_DWORD *)(*v13 + 8 * v10++ + 4) - 1;
              if (v10 >= *(_DWORD *)(v6 + 24))
                v8 = v9;
              else
                v8 = *(unsigned __int16 *)(*v13 + 8 * v10 + 2);
            }
            else
            {
              result = (*(uint64_t (**)(uint64_t, _QWORD))(a2 + 16))(a2, *(_QWORD *)v6 + *(_QWORD *)(v3 + 40) * v11);
            }
            ++v11;
            v9 = *v12;
          }
          while (v11 < *v12);
        }
      }
    }
  }
  return result;
}

void fillPositions(std::vector<unsigned int> *a1, uint64_t a2, _QWORD *a3, int __e, int a5)
{
  double v9;
  float *Content;
  __int16 v11;
  __int16 v12;
  uint64_t Count;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  float32x4_t v17;
  float v18;
  int32x2_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int32x2_t *v26;
  float32x4_t v27;
  float v28;
  float32x2_t v29;
  float v30;

  v9 = ldexp(1.0, __e);
  Content = (float *)C3DMeshSourceGetContent(a2);
  v12 = v11;
  Count = C3DMeshSourceGetCount(a2);
  if (Count != 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 2))
  {
    v14 = scn_default_log();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
      fillPositions(v14);
  }
  v15 = 3 * Count;
  v16 = (char *)a1->__end_ - (char *)a1->__begin_;
  std::vector<int>::resize(a1, 3 * Count + (v16 >> 2));
  if (Count >= 1)
  {
    v20 = 0;
    v21 = 0;
    v22 = v16 >> 2;
    v23 = v12;
    v17.f32[0] = v9;
    v28 = v17.f32[0];
    v24 = HIBYTE(v12);
    v25 = v22;
    do
    {
      *(double *)v17.i64 = C3DConvertFloatingTypeToFloat4(v23, Content, v17, v18, *(float *)v19.i32);
      if (a5)
      {
        v26 = (int32x2_t *)&a1->__begin_[v25];
        v18 = v28;
        v19 = vcvt_s32_f32(vrnda_f32(vmul_n_f32(*(float32x2_t *)v17.f32, v28)));
        *v26 = v19;
        v17.f32[0] = vmuls_lane_f32(v28, v17, 2);
      }
      else
      {
        v27 = v17;
        AnimCodec::Mesh<float>::point(a3, v20, (uint64_t)&v29);
        v26 = (int32x2_t *)&a1->__begin_[v25];
        *(float *)v19.i32 = v28;
        *(int32x2_t *)v17.f32 = vcvt_s32_f32(vrnda_f32(vmul_n_f32(vsub_f32(*(float32x2_t *)v27.f32, v29), v28)));
        *v26 = *(int32x2_t *)v17.f32;
        v18 = v30;
        v17.f32[0] = (float)(v27.f32[2] - v30) * v28;
      }
      v26[1].i32[0] = llroundf(v17.f32[0]);
      Content = (float *)((char *)Content + v24);
      ++v20;
      v21 += 3;
      v25 += 3;
    }
    while (v21 < v15);
  }
}

float AnimCodec::Mesh<float>::point@<S0>(_QWORD *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  float result;

  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 2) <= a2)
    AnimCodec::Mesh<float>::point();
  v3 = *a1 + 12 * a2;
  *(_QWORD *)a3 = *(_QWORD *)v3;
  result = *(float *)(v3 + 8);
  *(float *)(a3 + 8) = result;
  return result;
}

uint64_t fillMesh(uint64_t a1, uint64_t a2)
{
  const void *PositionSource;
  int64_t Count;
  uint64_t Content;
  unsigned __int8 v7;
  unsigned __int8 v8;
  float32x4_t v9;
  float v10;
  float v11;
  float *v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t ChannelForSourceWithSemanticAtIndex;
  const __CFArray *ElementsCount;
  uint64_t (*__ptr32 *v20)();
  CFIndex i;
  const void *ElementAtIndex;
  std::vector<unsigned int>::size_type v23;
  CFIndex v24;
  uint64_t v25;
  const void *v26;
  _QWORD v28[7];
  _OWORD v29[3];
  uint64_t v30;
  _QWORD v31[6];
  _OWORD v32[3];
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;

  PositionSource = C3DMeshGetPositionSource(a2, 0);
  Count = C3DMeshSourceGetCount((uint64_t)PositionSource);
  std::vector<AnimCodec::Vector3<float>>::resize((uint64_t *)a1, Count);
  Content = C3DMeshSourceGetContent((uint64_t)PositionSource);
  if (Count >= 1)
  {
    v12 = (float *)Content;
    v13 = 0;
    v14 = 0;
    v15 = v7;
    v16 = v8;
    do
    {
      *(double *)v9.i64 = C3DConvertFloatingTypeToFloat4(v15, v12, v9, v10, v11);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2) <= v14)
        fillMesh();
      v17 = *(_QWORD *)a1 + v13;
      *(_QWORD *)v17 = v9.i64[0];
      *(_DWORD *)(v17 + 8) = v9.i32[2];
      ++v14;
      v12 = (float *)((char *)v12 + v16);
      v13 += 12;
    }
    while (Count != v14);
  }
  ChannelForSourceWithSemanticAtIndex = C3DMeshGetChannelForSourceWithSemanticAtIndex(a2, 0, 0);
  ElementsCount = C3DMeshGetElementsCount(a2);
  v42 = 0;
  v43 = &v42;
  v44 = 0x2020000000;
  v45 = 0;
  v38 = 0;
  v39 = &v38;
  v40 = 0x2020000000;
  v41 = 0;
  v20 = &off_1DD007000;
  if ((uint64_t)ElementsCount < 1)
  {
    v23 = 0;
  }
  else
  {
    for (i = 0; (const __CFArray *)i != ElementsCount; ++i)
    {
      ElementAtIndex = C3DMeshGetElementAtIndex(a2, i, 0);
      v37 = 0;
      v35 = 0u;
      v36 = 0u;
      v34 = 0u;
      C3DMeshElementGetContent((uint64_t)ElementAtIndex, ChannelForSourceWithSemanticAtIndex, (uint64_t)&v34);
      v32[0] = v34;
      v32[1] = v35;
      v32[2] = v36;
      v33 = v37;
      v31[0] = MEMORY[0x1E0C809B0];
      v31[1] = 3221225472;
      v31[2] = ___Z8fillMeshRN9AnimCodec4MeshIfEEP9__C3DMesh_block_invoke;
      v31[3] = &unk_1EA5A5748;
      v31[4] = &v42;
      v31[5] = &v38;
      C3DIndicesContentEnumeratePrimitives((uint64_t *)v32, (uint64_t)v31, v36);
    }
    v23 = v43[3];
    v20 = &off_1DD007000;
  }
  std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 24), v23);
  std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 48), v39[3]);
  v43[3] = 0;
  v39[3] = 0;
  if ((uint64_t)ElementsCount >= 1)
  {
    v24 = 0;
    v25 = *((_QWORD *)v20 + 189);
    do
    {
      v26 = C3DMeshGetElementAtIndex(a2, v24, 0);
      v37 = 0;
      v35 = 0u;
      v36 = 0u;
      v34 = 0u;
      C3DMeshElementGetContent((uint64_t)v26, ChannelForSourceWithSemanticAtIndex, (uint64_t)&v34);
      v29[0] = v34;
      v29[1] = v35;
      v29[2] = v36;
      v30 = v37;
      v28[0] = MEMORY[0x1E0C809B0];
      v28[1] = v25;
      v28[2] = ___Z8fillMeshRN9AnimCodec4MeshIfEEP9__C3DMesh_block_invoke_2;
      v28[3] = &unk_1EA5A5770;
      v28[5] = &v38;
      v28[6] = a1;
      v28[4] = &v42;
      C3DIndicesContentEnumeratePrimitives((uint64_t *)v29, (uint64_t)v28, v36);
      ++v24;
    }
    while (ElementsCount != (const __CFArray *)v24);
  }
  _Block_object_dispose(&v38, 8);
  _Block_object_dispose(&v42, 8);
  return 1;
}

void sub_1DCF569F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

uint64_t ___Z8fillMeshRN9AnimCodec4MeshIfEEP9__C3DMesh_block_invoke(uint64_t result, uint64_t a2, uint64_t a3, unsigned int a4)
{
  if (a4 >= 2)
  {
    ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) += a4;
  }
  return result;
}

BOOL SCNEncodeMorpherUsingAnimCodec(void *a1, void *a2)
{
  uint64_t Morpher;
  uint64_t BaseGeometry;
  _BOOL8 v6;
  uint64_t Mesh;
  const void *PositionSource;
  uint64_t Count;
  uint64_t OverrideMaterial;
  const __CFArray *v11;
  CFIndex v12;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  int64_t v18;
  int *v19;
  NSObject *v20;
  const void *ElementAtIndex;
  const void *UnpackedCopy;
  uint64_t v23;
  AnimCodec *v24;
  uint64_t v25;
  int *v26;
  _BYTE *v27;
  void *v28;
  uint64_t v29;
  int v30;
  NSObject *v31;
  void *v32;
  CFIndex j;
  const void *v34;
  const __CFString *Name;
  int64_t v37;
  void *v38;
  uint64_t ChannelForSourceWithSemanticAtIndex;
  uint64_t v40;
  uint64_t v41;
  char v42;
  std::vector<int> v43;
  BOOL v44;
  char v45;
  void *v46[2];
  void *v47[2];
  __int128 v48;
  void *__p[2];
  uint64_t v50;
  uint8_t buf[4];
  const char *v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  void *v56;
  __int16 v57;
  uint64_t v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  Morpher = C3DNodeGetMorpher(objc_msgSend(a2, "nodeRef"));
  BaseGeometry = C3DMorpherGetBaseGeometry(Morpher);
  if (C3DGeometryUsesDeformerBasedDynamicMesh(BaseGeometry))
    return 0;
  v38 = a1;
  Mesh = C3DGeometryGetMesh(BaseGeometry);
  ChannelForSourceWithSemanticAtIndex = C3DMeshGetChannelForSourceWithSemanticAtIndex(Mesh, 0, 0);
  PositionSource = C3DMeshGetPositionSource(Mesh, 0);
  Count = C3DMeshSourceGetCount((uint64_t)PositionSource);
  v50 = 0;
  v48 = 0u;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v46 = 0u;
  *(_OWORD *)v47 = 0u;
  fillMesh((uint64_t)v46, Mesh);
  OverrideMaterial = C3DGeometryGetOverrideMaterial(Morpher);
  v11 = (const __CFArray *)C3DGeometryGetOverrideMaterial(OverrideMaterial);
  v12 = CFArrayGetCount(v11);
  v45 = 5;
  v37 = (char *)v46[1] - (char *)v46[0];
  v44 = C3DMorphGetCalculationMode(OverrideMaterial) == 1;
  memset(&v43, 0, sizeof(v43));
  std::vector<unsigned int>::reserve(&v43, 3 * v12 * 0xAAAAAAAAAAAAAAABLL * (v37 >> 2));
  if (v12 >= 1)
  {
    for (i = 0; i != v12; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v11, i);
      v15 = C3DGeometryGetMesh((uint64_t)ValueAtIndex);
      v16 = C3DMeshGetPositionSource(v15, 0);
      v17 = (uint64_t)v16;
      if (v16)
      {
        if (C3DMeshSourceGetCount((uint64_t)v16) == Count)
        {
          fillPositions((std::vector<unsigned int> *)&v43, v17, v46, 5, v44);
        }
        else
        {
          if ((C3DMorphIsUsingSparseTargets(OverrideMaterial) & 1) == 0)
          {
            v20 = scn_default_log();
            if (os_log_type_enabled(v20, OS_LOG_TYPE_FAULT))
            {
              v23 = objc_msgSend(a2, "name");
              *(_DWORD *)buf = 136315906;
              v52 = "C3DMorphIsUsingSparseTargets(morph) == true";
              v53 = 2112;
              v54 = v23;
              v55 = 2048;
              v56 = a2;
              v57 = 2048;
              v58 = OverrideMaterial;
              _os_log_fault_impl(&dword_1DCCB8000, v20, OS_LOG_TYPE_FAULT, "Assertion '%s' failed. Internal consistency error, %@'s (%p) morph %p is not sparse", buf, 0x2Au);
            }
          }
          ElementAtIndex = C3DMeshGetElementAtIndex(v15, 0, 0);
          UnpackedCopy = (const void *)C3DMeshSourceCreateUnpackedCopy(v17, (uint64_t)ElementAtIndex, Count, ChannelForSourceWithSemanticAtIndex);
          fillPositions((std::vector<unsigned int> *)&v43, (uint64_t)UnpackedCopy, v46, 5, v44);
          if (UnpackedCopy)
            CFRelease(UnpackedCopy);
        }
      }
      else
      {
        v18 = (char *)v43.__end_ - (char *)v43.__begin_;
        std::vector<int>::resize((std::vector<unsigned int> *)&v43, (v37 >> 2) + v43.__end_ - v43.__begin_);
        v19 = &v43.__begin_[v18 >> 2];
        if ((char *)v43.__end_ - (char *)v19 >= 1)
          bzero(v19, 4* (((unint64_t)((char *)v43.__end_ - (char *)v19) >> 2)- ((std::vector<int>::pointer)((char *)v43.__end_ - (char *)v19) > (std::vector<int>::pointer)3))+ 4);
      }
    }
  }
  v24 = (AnimCodec *)v47[1];
  v25 = v48;
  v26 = (int *)__p[0];
  v27 = __p[1];
  v28 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DF0]), "initWithLength:", v37 * v12 + 1024);
  v29 = objc_msgSend(v28, "mutableBytes");
  v40 = 0;
  v41 = 0;
  v30 = AnimCodec::AnimEncoder::compress((uint64_t)&v42, v24, v26, (uint64_t)v43.__begin_, 3, (int *)(0xAAAAAAAAAAAAAAABLL * (v37 >> 2)), (AnimCodec::StaticAdjacencyInformation *)((v25 - (uint64_t)v24) >> 2), (v27 - (_BYTE *)v26) >> 2, v12, v29, v37 * v12 + 1024, &v41, &v40);
  v6 = v30 == 0;
  if (v30)
  {
    v31 = scn_default_log();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      SCNEncodeMorpherUsingAnimCodec_cold_1();

  }
  else
  {
    objc_msgSend(v28, "setLength:", v41);
    objc_msgSend(v38, "encodeObject:forKey:", v28, CFSTR("morpherCompressedData"));

    v32 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DF0]), "initWithCapacity:", 32 * v12);
    objc_msgSend(v32, "appendBytes:length:", &v45, 1);
    objc_msgSend(v32, "appendBytes:length:", &v44, 1);
    if (v12 >= 1)
    {
      for (j = 0; j != v12; ++j)
      {
        v34 = CFArrayGetValueAtIndex(v11, j);
        Name = (const __CFString *)C3DEntityGetName((uint64_t)v34);
        CFStringGetCString(Name, (char *)buf, 512, 0x600u);
        objc_msgSend(v32, "appendBytes:length:", buf, strlen((const char *)buf) + 1);
      }
    }
    objc_msgSend(v38, "encodeObject:forKey:", v32, CFSTR("morpherMetaData"));

  }
  if (v43.__begin_)
  {
    v43.__end_ = v43.__begin_;
    operator delete(v43.__begin_);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v47[1])
  {
    *(void **)&v48 = v47[1];
    operator delete(v47[1]);
  }
  if (v46[0])
  {
    v46[1] = v46[0];
    operator delete(v46[0]);
  }
  return v6;
}

void sub_1DCF56FA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Unwind_Resume(exception_object);
}

SCNGeometry *targetGeometryFromAnimation(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  float v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float32x2_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  float *v26;
  uint64_t v27;
  float v30;
  float v31[3];
  _QWORD v32[2];

  v32[1] = *MEMORY[0x1E0C80C00];
  v11 = *a2;
  v10 = a2[1];
  v12 = (v10 - *a2) / 12;
  v13 = v12 * a4;
  v14 = ldexp(1.0, -a5);
  v30 = v14;
  v15 = (char *)malloc_type_malloc(4 * v13, 0x20301681uLL);
  v16 = v15;
  if (a6)
  {
    if (v10 != v11)
    {
      v17 = 0;
      if (v12 <= 1)
        v18 = 1;
      else
        v18 = v12;
      v19 = *a1 + 4 * v13 * a3;
      do
      {
        v20 = (float32x2_t *)&v15[v17];
        *v20 = vmul_n_f32(vcvt_f32_s32(*(int32x2_t *)(v19 + v17)), v30);
        v20[1].f32[0] = v30 * (float)*(int *)(v19 + v17 + 8);
        v17 += 4 * a4;
        --v18;
      }
      while (v18);
    }
  }
  else if (v10 != v11)
  {
    v21 = 0;
    v22 = 0;
    if (v12 <= 1)
      v23 = 1;
    else
      v23 = v12;
    v24 = 4 * v13 * a3;
    do
    {
      AnimCodec::Mesh<float>::point(a2, v22, (uint64_t)v31);
      v25 = (int *)(*a1 + v24 + v21);
      v26 = (float *)&v16[v21];
      *v26 = v31[0] + (float)((float)*v25 * v30);
      v26[1] = v31[1] + (float)((float)v25[1] * v30);
      v26[2] = v31[2] + (float)((float)v25[2] * v30);
      ++v22;
      v21 += 4 * a4;
    }
    while (v23 != v22);
  }
  v32[0] = +[SCNGeometrySource geometrySourceWithData:semantic:vectorCount:floatComponents:componentsPerVector:bytesPerComponent:dataOffset:dataStride:](SCNGeometrySource, "geometrySourceWithData:semantic:vectorCount:floatComponents:componentsPerVector:bytesPerComponent:dataOffset:dataStride:", objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytesNoCopy:length:freeWhenDone:", v16, 4 * v13, 1), CFSTR("kGeometrySourceSemanticVertex"), v12, 1, a4, 4, 0, 0);
  v27 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v32, 1);
  return +[SCNGeometry geometryWithSources:elements:](SCNGeometry, "geometryWithSources:elements:", v27, MEMORY[0x1E0C9AA60]);
}

void *SCNDecodeMorpherUsingAnimCodec(void *a1, void *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t Mesh;
  NSObject *v7;
  void *v8;
  const int *v9;
  AnimCodec *v10;
  uint64_t v11;
  int *v12;
  _BYTE *v13;
  uint64_t v14;
  const unsigned __int8 *v15;
  unint64_t v16;
  NSObject *v17;
  void *v19;
  void *v20;
  _BYTE *v21;
  char v22;
  char v23;
  uint64_t v24;
  const char *v25;
  const __CFAllocator *v26;
  SCNGeometry *v27;
  CFStringRef v28;
  NSObject *v29;
  std::vector<unsigned int> v30;
  _BYTE v31[4];
  unsigned int v32;
  char v33;
  void *v34[2];
  void *v35[2];
  __int128 v36;
  void *__p[2];
  uint64_t v38;

  v4 = objc_msgSend(a1, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("morpherCompressedData"));
  if (!v4)
    return 0;
  v5 = (void *)v4;
  v38 = 0;
  v36 = 0u;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v34 = 0u;
  *(_OWORD *)v35 = 0u;
  Mesh = C3DGeometryGetMesh(objc_msgSend((id)objc_msgSend(a2, "geometry"), "geometryRef"));
  fillMesh((uint64_t)v34, Mesh);
  if (!AnimCodec::AnimDecoder::getInfo(objc_msgSend(v5, "bytes"), objc_msgSend(v5, "length"), (uint64_t)v31))
  {
    v9 = (const int *)(0xAAAAAAAAAAAAAAABLL * (((char *)v34[1] - (char *)v34[0]) >> 2));
    v10 = (AnimCodec *)v35[1];
    v11 = v36;
    v12 = (int *)__p[0];
    v13 = __p[1];
    v14 = v32;
    memset(&v30, 0, sizeof(v30));
    std::vector<int>::resize(&v30, 3 * (_QWORD)v9 * v32);
    v15 = (const unsigned __int8 *)objc_msgSend(v5, "bytes");
    v16 = objc_msgSend(v5, "length");
    if (AnimCodec::AnimDecoder::decompress((AnimCodec::AnimDecoder *)&v33, v15, v16, v10, v12, 3, v9, (v11 - (uint64_t)v10) >> 2, (v13 - (_BYTE *)v12) >> 2, (int *)v30.__begin_))
    {
      v17 = scn_default_log();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        SCNDecodeMorpherUsingAnimCodec_cold_2();
    }
    else
    {
      v19 = (void *)objc_msgSend(a1, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("morpherMetaData"));
      v20 = v19;
      if (v19)
      {
        if (objc_msgSend(v19, "length") < (unint64_t)(v14 + 2))
          __assert_rtn("SCNDecodeMorpherUsingAnimCodec", "SCNMorpherAnimCodecSupport.mm", 351, "morpherMetaData.length >= (2+targetCount)");
        v21 = (_BYTE *)objc_msgSend(v20, "bytes");
        v22 = *v21;
        v23 = v21[1];
        v8 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", v14);
        if ((_DWORD)v14)
        {
          v24 = 0;
          v25 = v21 + 2;
          v26 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          do
          {
            v27 = targetGeometryFromAnimation(&v30, (uint64_t *)v34, v24, 3, v22, v23);
            objc_msgSend(v8, "addObject:", v27);
            v28 = CFStringCreateWithCString(v26, v25, 0x8000100u);
            -[SCNGeometry setName:](v27, "setName:", v28);
            if (v28)
              CFRelease(v28);
            v25 += strlen(v25) + 1;
            ++v24;
          }
          while (v14 != v24);
        }
        goto LABEL_11;
      }
      v29 = scn_default_log();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
        SCNDecodeMorpherUsingAnimCodec_cold_1();
    }
    v8 = 0;
LABEL_11:
    if (v30.__begin_)
    {
      v30.__end_ = v30.__begin_;
      operator delete(v30.__begin_);
    }
    goto LABEL_13;
  }
  v7 = scn_default_log();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    SCNDecodeMorpherUsingAnimCodec_cold_3();
  v8 = 0;
LABEL_13:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v35[1])
  {
    *(void **)&v36 = v35[1];
    operator delete(v35[1]);
  }
  if (v34[0])
  {
    v34[1] = v34[0];
    operator delete(v34[0]);
  }
  return v8;
}

void sub_1DCF57598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (__p)
    operator delete(__p);
  vmesh::StaticAdjacencyInformation<Pair>::~StaticAdjacencyInformation((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::vector<AnimCodec::Vector3<float>>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 2);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<AnimCodec::Vector3<float>>::__append(a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + 12 * a2;
  }
}

void std::vector<AnimCodec::Vector3<float>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  void *__p;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 2) >= a2)
  {
    if (a2)
    {
      v13 = 12 * ((12 * a2 - 12) / 0xC) + 12;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 2);
    v9 = v8 + a2;
    if (v8 + a2 > 0x1555555555555555)
      abort();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 2);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0xAAAAAAAAAAAAAAALL)
      v11 = 0x1555555555555555;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<vmesh::Triangle>>(v4, v11);
    else
      v12 = 0;
    __p = v12;
    v16 = &v12[12 * v8];
    v18 = &v12[12 * v11];
    v14 = 12 * ((12 * a2 - 12) / 0xC) + 12;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<AnimCodec::Vector3<float>>::__swap_out_circular_buffer(a1, &__p);
    if (v17 != v16)
      v17 = &v16[(v17 - v16 - 12) % 0xCuLL];
    if (__p)
      operator delete(__p);
  }
}

void sub_1DCF577AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<AnimCodec::Vector3<float>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    v5 = *(_DWORD *)(v2 - 12);
    v2 -= 12;
    *(_DWORD *)(v4 - 12) = v5;
    v4 -= 12;
    *(_DWORD *)(v4 + 4) = *(_DWORD *)(v2 + 4);
    *(_DWORD *)(v4 + 8) = *(_DWORD *)(v2 + 8);
  }
  a2[1] = v4;
  v6 = *result;
  *result = v4;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t C3DGLSLGetUniformType(int a1, GLuint program, int a3)
{
  GLuint v5;
  uint64_t result;
  GLint params[2];
  GLint size[2];
  GLchar name[256];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)params = 0;
  *(_QWORD *)size = 0;
  glGetProgramiv(program, 0x8B86u, params);
  if (params[0] < 1)
    return 0;
  v5 = 0;
  while (1)
  {
    glGetActiveUniform(program, v5, 256, &size[1], size, (GLenum *)&params[1], name);
    if (glGetUniformLocation(program, name) == a3)
      break;
    if ((int)++v5 >= params[0])
      return 0;
  }
  result = 5;
  switch(params[1])
  {
    case 0x8B50:
      return 8;
    case 0x8B51:
      return 9;
    case 0x8B52:
      return 10;
    case 0x8B53:
      return 18;
    case 0x8B54:
      return 19;
    case 0x8B55:
      return 20;
    case 0x8B56:
    case 0x8B57:
    case 0x8B58:
    case 0x8B59:
    case 0x8B5A:
    case 0x8B5D:
    case 0x8B5F:
    case 0x8B61:
      return 0;
    case 0x8B5B:
      return 12;
    case 0x8B5C:
      return 11;
    case 0x8B5E:
    case 0x8B60:
    case 0x8B62:
      return result;
    default:
      if (params[1] == 5126)
      {
        result = 1;
      }
      else
      {
        if (params[1] != 5124)
          return 0;
        result = 2;
      }
      break;
  }
  return result;
}

void C3DGeometryFinalizeSubdivision(__C3DGeometry *a1)
{
  __C3DMesh *var5;
  __C3DMeshSource *var4;
  __C3DMeshElement *var3;

  C3DSubdivisionOsdGPUContextDestroy(a1);
  C3DGeometryDestroySubdivTopologyInfo(a1);
  var5 = a1->var10.var5;
  if (var5)
  {
    CFRelease(var5);
    a1->var10.var5 = 0;
  }
  var4 = a1->var10.var4;
  if (var4)
  {
    CFRelease(var4);
    a1->var10.var4 = 0;
  }
  var3 = a1->var10.var3;
  if (var3)
  {
    CFRelease(var3);
    a1->var10.var3 = 0;
  }
}

BOOL C3DGeometryMeshElementsSupportsSubdivision(__C3DGeometry *a1)
{
  unsigned __int8 var12;
  int v2;
  uint64_t Mesh;
  const __CFArray *MeshElements;
  CFIndex Count;
  CFIndex v7;
  CFIndex v8;
  const void *ValueAtIndex;
  char Type;

  var12 = a1->var12;
  v2 = var12 & 0xC;
  if ((var12 & 0xC) == 0)
  {
    Mesh = C3DGeometryGetMesh((uint64_t)a1);
    MeshElements = (const __CFArray *)C3DMeshGetMeshElements(Mesh, 0);
    Count = CFArrayGetCount(MeshElements);
    if (Count < 1)
    {
LABEL_6:
      v2 = 4;
    }
    else
    {
      v7 = Count;
      v8 = 0;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(MeshElements, v8);
        Type = C3DMeshElementGetType((uint64_t)ValueAtIndex);
        if (!C3DMeshElementTypeDefinesSurface(Type))
          break;
        if (v7 == ++v8)
          goto LABEL_6;
      }
      v2 = 8;
    }
    a1->var12 = v2 | var12 & 0xF3;
  }
  return v2 == 4;
}

void C3DGeometryOsdSetSubdivisionLevel(__C3DGeometry *a1, int a2)
{
  int var0;
  __C3DMesh *var5;

  var0 = a1->var10.var0;
  if (var0 != a2)
  {
    a1->var10.var0 = a2;
    var5 = a1->var10.var5;
    if (var5)
    {
      CFRelease(var5);
      a1->var10.var5 = 0;
    }
    C3DNotifyGeometryDidChange((uint64_t)a1);
  }
  C3DGeometryOpenSubdivGPUParameterDidChange(a1, a1->var11.var0, a1->var11.var0, var0, a2);
}

void C3DGeometryOsdSetWantsAdaptiveSubdivision(__C3DGeometry *a1, _BOOL4 a2)
{
  __C3DMesh *var5;

  if (a1->var10.var1 != a2)
  {
    a1->var10.var1 = a2;
    var5 = a1->var10.var5;
    if (var5)
    {
      CFRelease(var5);
      a1->var10.var5 = 0;
    }
    C3DNotifyGeometryDidChange((uint64_t)a1);
  }
  C3DGeometryOpenSubdivGPUParameterDidChange(a1, a1->var11.var0, a1->var11.var0, a1->var10.var0, a1->var10.var0);
}

void C3DGeometryOsdSetSubdivisionSettings(uint64_t a1, int a2)
{
  const void *v3;

  if (a2 != *(_DWORD *)(a1 + 138))
  {
    *(_DWORD *)(a1 + 138) = a2;
    v3 = *(const void **)(a1 + 160);
    if (v3)
    {
      CFRelease(v3);
      *(_QWORD *)(a1 + 160) = 0;
    }
    C3DNotifyGeometryDidChange(a1);
    C3DGeometryOpenSubdivGPUParameterDidChange((__C3DGeometry *)a1, *(unsigned __int8 *)(a1 + 184), *(unsigned __int8 *)(a1 + 184), *(unsigned __int8 *)(a1 + 136), *(unsigned __int8 *)(a1 + 136));
  }
}

void C3DGeometryOsdSetEdgeCreasesSource(__C3DGeometry *a1, __C3DMeshSource *cf)
{
  __C3DMeshSource *var4;
  __C3DMeshSource *v5;
  __C3DMesh *var5;

  var4 = a1->var10.var4;
  if (var4 != cf)
  {
    if (var4)
    {
      CFRelease(var4);
      a1->var10.var4 = 0;
    }
    if (cf)
      v5 = (__C3DMeshSource *)CFRetain(cf);
    else
      v5 = 0;
    a1->var10.var4 = v5;
    var5 = a1->var10.var5;
    if (var5)
    {
      CFRelease(var5);
      a1->var10.var5 = 0;
    }
    C3DNotifyGeometryDidChange((uint64_t)a1);
  }
  C3DGeometryInvalidateSubdivCreaseAndCornerTopologyInfo(a1);
  C3DGeometryOpenSubdivGPUParameterDidChange(a1, a1->var11.var0, a1->var11.var0, a1->var10.var0, a1->var10.var0);
}

void C3DGeometryOsdSetEdgeCreasesElement(__C3DGeometry *a1, __C3DMeshElement *cf)
{
  __C3DMeshElement *var3;
  __C3DMeshElement *v5;
  __C3DMesh *var5;

  var3 = a1->var10.var3;
  if (var3 != cf)
  {
    if (var3)
    {
      CFRelease(var3);
      a1->var10.var3 = 0;
    }
    if (cf)
      v5 = (__C3DMeshElement *)CFRetain(cf);
    else
      v5 = 0;
    a1->var10.var3 = v5;
    var5 = a1->var10.var5;
    if (var5)
    {
      CFRelease(var5);
      a1->var10.var5 = 0;
    }
    C3DNotifyGeometryDidChange((uint64_t)a1);
  }
  C3DGeometryInvalidateSubdivCreaseAndCornerTopologyInfo(a1);
  C3DGeometryOpenSubdivGPUParameterDidChange(a1, a1->var11.var0, a1->var11.var0, a1->var10.var0, a1->var10.var0);
}

CFStringRef _C3DShapeCFCopyFormatDescription(_QWORD *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DShape '%@'>"), a1[2]);
}

CFStringRef _C3DShapeCFCopyDebugDescription(_QWORD *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DShape '%@'>"), a1[2]);
}

uint64_t C3DShapeCreate(uint64_t a1)
{
  uint64_t Instance;
  __int128 v3;
  _OWORD v5[3];
  uint64_t v6;

  if (C3DShapeGetTypeID_onceToken != -1)
    dispatch_once(&C3DShapeGetTypeID_onceToken, &__block_literal_global_144);
  Instance = C3DTypeCreateInstance_(C3DShapeGetTypeID_typeID, 0x28uLL);
  v3 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v3;
  v5[2] = *(_OWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 48);
  C3DShapeInit(Instance, (uint64_t)v5);
  return Instance;
}

void C3DShapeInit(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  _OWORD v5[3];
  uint64_t v6;

  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = CGPathRetain(*(CGPathRef *)(a2 + 24));
  v4 = *(_OWORD *)(a2 + 16);
  v5[0] = *(_OWORD *)a2;
  v5[1] = v4;
  v5[2] = *(_OWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 48);
  C3DShapeBuildConnectedComponents(a1, (uint64_t)v5);
  C3DShapeBuildDelaunayTriangulation(a1);
}

void C3DShapeFinalize(uint64_t a1)
{
  void *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  if (a1)
  {
    v2 = *(void **)(a1 + 32);
    if (v2)
      free(v2);
    if (*(_DWORD *)(a1 + 48))
    {
      v3 = 0;
      do
      {
        v4 = *(_QWORD *)(a1 + 40) + 32 * v3;
        if (*(_DWORD *)(v4 + 8))
        {
          v5 = 0;
          v6 = 0;
          do
          {
            free(*(void **)(*(_QWORD *)v4 + v5));
            ++v6;
            v4 = *(_QWORD *)(a1 + 40) + 32 * v3;
            v5 += 56;
          }
          while (v6 < *(unsigned int *)(v4 + 8));
        }
        free(*(void **)v4);
        free(*(void **)(*(_QWORD *)(a1 + 40) + 32 * v3++ + 16));
      }
      while (v3 < *(unsigned int *)(a1 + 48));
    }
    free(*(void **)(a1 + 40));
    CGPathRelease(*(CGPathRef *)(a1 + 16));
  }
}

const void *C3DShapeGeometryGetMeshForC3DKitNeeds(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  const void *result;
  BOOL v8;

  result = *(const void **)(a1 + 64);
  if (!result || (*(_QWORD *)a2 == *a3 ? (v8 = *(_QWORD *)(a2 + 8) == a3[1]) : (v8 = 0), !v8))
  {
    result = *(const void **)(a1 + 272);
    if (*(_QWORD *)a2 != *(_QWORD *)(a1 + 280) || *(_QWORD *)(a2 + 8) != *(_QWORD *)(a1 + 288))
    {
      if (result)
        CFRelease(result);
      *(_OWORD *)(a1 + 280) = *(_OWORD *)a2;
      result = (const void *)(*(uint64_t (**)(uint64_t))(a4 + 16))(a4);
      *(_QWORD *)(a1 + 272) = result;
    }
  }
  return result;
}

void C3DShapeGeometryResolveMeshForC3DKitNeeds(_QWORD *a1, _QWORD *a2)
{
  const void *v3;

  if (!a1[8])
  {
    v3 = (const void *)a1[34];
    if (v3)
    {
      if (*a2 == a1[35] && a2[1] == a1[36])
      {
        a1[8] = CFRetain(v3);
        v3 = (const void *)a1[34];
      }
      CFRelease(v3);
      a1[34] = 0;
      a1[35] = 0;
      a1[36] = 0;
    }
  }
}

void C3DShapeGeometryValidate(uint64_t a1)
{
  CFTypeID v2;
  uint64_t v3;
  float v4;
  float v5;
  __int128 v6;
  double v7;
  float v8;
  __int128 v9;
  const void *v10;
  uint64_t *v11;
  uint64_t *v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  unsigned __int8 data[56];
  unsigned __int8 md[8];
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v2 = CFGetTypeID((CFTypeRef)a1);
  if (C3DShapeGeometryGetTypeID_onceToken != -1)
    dispatch_once(&C3DShapeGeometryGetTypeID_onceToken, &__block_literal_global_145);
  if (v2 != C3DShapeGeometryGetTypeID_typeID)
    C3DShapeGeometryValidate_cold_2();
  *(_QWORD *)md = 0;
  v30 = 0;
  C3DShapeGeometryGetC3DKitParameters(a1, (uint64_t)data);
  CC_MD5(data, 0x38u, md);
  C3DShapeGeometryResolveMeshForC3DKitNeeds((_QWORD *)a1, md);
  if (!*(_QWORD *)(a1 + 64))
  {
    v3 = *(_QWORD *)(a1 + 216);
    v5 = *(float *)(a1 + 224);
    v4 = *(float *)(a1 + 228);
    v6 = *(_OWORD *)(a1 + 248);
    v25 = *(_OWORD *)(a1 + 232);
    v26 = v6;
    v27 = *(_QWORD *)(a1 + 264);
    v7 = v5 * 0.5;
    if (v7 <= v4)
      v8 = v7;
    else
      v8 = v4;
    *(_QWORD *)&v21 = v3;
    *((_QWORD *)&v21 + 1) = __PAIR64__(LODWORD(v8), LODWORD(v5));
    v9 = *(_OWORD *)(a1 + 248);
    v22 = *(_OWORD *)(a1 + 232);
    v23 = v9;
    v24 = *(_QWORD *)(a1 + 264);
    v10 = (const void *)C3DShapeCreate((uint64_t)&v21);
    *(_QWORD *)&v21 = v3;
    *((_QWORD *)&v21 + 1) = __PAIR64__(LODWORD(v8), LODWORD(v5));
    v22 = v25;
    v23 = v26;
    v24 = v27;
    v11 = (uint64_t *)C3DMeshCreateShape((uint64_t)v10, &v21);
    if (v11)
    {
      v12 = v11;
      C3DGeometrySetMesh(a1, v11);
      CFRelease(v12);
      if (!v10)
        return;
      goto LABEL_10;
    }
    v13 = scn_default_log();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
      C3DShapeGeometryValidate_cold_1(v13, v14, v15, v16, v17, v18, v19, v20);
    C3DGeometrySetMesh(a1, 0);
    if (v10)
LABEL_10:
      CFRelease(v10);
  }
}

void C3DShapeGeometryGetC3DKitParameters(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  *(_QWORD *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_BYTE *)a2 = C3DShapeGeometryGetPrimitiveType(a1);
  *(double *)(a2 + 8) = C3DShapeGeometryGetExtrusionDepth(a1);
  *(double *)(a2 + 16) = C3DShapeGeometryGetChamferRadius(a1);
  *(double *)(a2 + 32) = C3DShapeGeometryGetDiscretizedStraightLineMaxLength(a1);
  v4 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 248);
  *(_QWORD *)(a2 + 48) = v4;
}

void C3DTextGeometryValidate(uint64_t a1)
{
  double *v2;
  double *v3;
  float64_t v4;
  float64_t v5;
  uint64_t v6;
  float v7;
  float v8;
  __int128 v9;
  double v10;
  float v11;
  const void *v12;
  __int128 v13;
  const void *v14;
  __int128 v15;
  __int128 v16;
  uint64_t *Text;
  uint64_t *v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32[3];
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  unsigned __int8 data[128];
  unsigned __int8 md[8];
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)md = 0;
  v39 = 0;
  C3DTextGeometryGetC3DKitParameters(a1, (uint64_t)data);
  CC_MD5(data, 0x80u, md);
  C3DShapeGeometryResolveMeshForC3DKitNeeds((_QWORD *)a1, md);
  if (!*(_QWORD *)(a1 + 64))
  {
    C3DTextGeometryComputeCTFrameIfNeeded(a1);
    v2 = (double *)(a1 + 336);
    v3 = (double *)(a1 + 344);
    if (!*(_BYTE *)(a1 + 329))
    {
      v3 = (double *)(MEMORY[0x1E0C9D538] + 8);
      v2 = (double *)MEMORY[0x1E0C9D538];
    }
    v4 = *v3;
    v5 = *v2;
    v6 = *(_QWORD *)(a1 + 216);
    v8 = *(float *)(a1 + 224);
    v7 = *(float *)(a1 + 228);
    v9 = *(_OWORD *)(a1 + 248);
    v34 = *(_OWORD *)(a1 + 232);
    v35 = v9;
    v36 = *(_QWORD *)(a1 + 264);
    v10 = v8 * 0.5;
    if (v10 <= v7)
      v11 = v10;
    else
      v11 = v7;
    v12 = *(const void **)(a1 + 296);
    *(_QWORD *)&v27 = v6;
    *((_QWORD *)&v27 + 1) = __PAIR64__(LODWORD(v11), LODWORD(v8));
    v13 = *(_OWORD *)(a1 + 248);
    v28 = *(_OWORD *)(a1 + 232);
    v29 = v13;
    *(_QWORD *)&v30 = *(_QWORD *)(a1 + 264);
    v14 = (const void *)C3DTextFrameCreate(v12, (uint64_t)&v27);
    *((_QWORD *)&v32[0] + 1) = __PAIR64__(LODWORD(v11), LODWORD(v8));
    v32[1] = v34;
    v32[2] = v35;
    v33 = v36;
    v15 = *(_OWORD *)(a1 + 344);
    v29 = *(_OWORD *)(a1 + 328);
    v30 = v15;
    v31 = *(_QWORD *)(a1 + 360);
    *(_QWORD *)&v32[0] = v6;
    v16 = *(_OWORD *)(a1 + 312);
    v27 = *(_OWORD *)(a1 + 296);
    v28 = v16;
    Text = (uint64_t *)C3DMeshCreateText((uint64_t)v14, v32, (uint64_t)&v27, v5, v4);
    if (Text)
    {
      v18 = Text;
      C3DGeometrySetMesh(a1, Text);
      CFRelease(v18);
      if (!v14)
        return;
      goto LABEL_9;
    }
    v19 = scn_default_log();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_FAULT))
      C3DShapeGeometryValidate_cold_1(v19, v20, v21, v22, v23, v24, v25, v26);
    C3DGeometrySetMesh(a1, 0);
    if (v14)
LABEL_9:
      CFRelease(v14);
  }
}

double C3DTextGeometryGetC3DKitParameters@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v4;
  __int128 v5;
  double result;
  _OWORD v7[3];
  uint64_t v8;

  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  C3DShapeGeometryGetC3DKitParameters(a1, (uint64_t)v7);
  v4 = v7[1];
  *(_OWORD *)a2 = v7[0];
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v7[2];
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 304);
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 320);
  v5 = *(_OWORD *)(a1 + 352);
  *(_OWORD *)(a2 + 88) = *(_OWORD *)(a1 + 336);
  *(_QWORD *)(a2 + 48) = v8;
  *(_WORD *)(a2 + 80) = *(_WORD *)(a1 + 328);
  *(_OWORD *)(a2 + 104) = v5;
  result = *(float *)(a1 + 220);
  *(double *)(a2 + 120) = result;
  return result;
}

void C3DTextGeometryComputeCTFrameIfNeeded(uint64_t a1)
{
  const __CFAttributedString *v2;
  id v3;
  id v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char isKindOfClass;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  const __CFString *v15;
  const __CTFramesetter *v16;
  CGSize v17;
  CGFloat width;
  CGFloat height;
  CGPath *Mutable;
  const CGPath *v21;
  uint64_t v22;
  uint64_t v23;
  CGFloat v24;
  CGFloat v25;
  CTFrameRef Frame;
  CFRange v27;
  CFRange v28;
  CGSize v29;

  if (*(_QWORD *)(a1 + 296))
    return;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v3 = objc_alloc_init(MEMORY[0x1E0CEA230]);
    v4 = v3;
    if (*(_BYTE *)(a1 + 328))
    {
      if (*(_BYTE *)(a1 + 329))
      {
        v5 = *(_DWORD *)(a1 + 320) - 1;
        if (v5 > 3)
          v6 = 4;
        else
          v6 = qword_1DD02C7E0[v5];
      }
      else
      {
        v6 = 4;
      }
      objc_msgSend(v3, "setAlignment:", v6);
    }
    else
    {
      if (*(_BYTE *)(a1 + 329))
      {
        v7 = (*(_DWORD *)(a1 + 324) - 1);
        if (v7 >= 3)
          v8 = 2;
        else
          v8 = v7 + 3;
      }
      else
      {
        v8 = 2;
      }
      objc_msgSend(v3, "setLineBreakMode:", v8);
    }
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();
    v10 = (_QWORD *)MEMORY[0x1E0CEA098];
    if ((isKindOfClass & 1) != 0)
    {
      v11 = objc_msgSend(*(id *)(a1 + 304), "attribute:atIndex:effectiveRange:", *MEMORY[0x1E0CEA098], 0, 0);
    }
    else
    {
      v12 = *(_QWORD *)(a1 + 312);
      if (v12)
      {
LABEL_22:
        v13 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjectsAndKeys:", v12, *v10, v4, *MEMORY[0x1E0CEA0D0], 0);
        v14 = objc_alloc(MEMORY[0x1E0CB3498]);
        if (*(_QWORD *)(a1 + 304))
          v15 = *(const __CFString **)(a1 + 304);
        else
          v15 = &stru_1EA5A6480;
        v2 = (const __CFAttributedString *)(id)objc_msgSend(v14, "initWithString:attributes:", v15, v13);
        goto LABEL_26;
      }
      v11 = objc_msgSend(MEMORY[0x1E0CEA5E8], "fontWithName:size:", CFSTR("Helvetica"), 12.0);
    }
    v12 = v11;
    goto LABEL_22;
  }
  v2 = *(const __CFAttributedString **)(a1 + 304);
LABEL_26:
  v16 = CTFramesetterCreateWithAttributedString(v2);
  v29.width = 1.79769313e308;
  v27.location = 0;
  v27.length = 0;
  v29.height = 1.79769313e308;
  v17 = CTFramesetterSuggestFrameSizeWithConstraints(v16, v27, 0, v29, 0);
  width = v17.width;
  height = v17.height;
  Mutable = CGPathCreateMutable();
  v21 = Mutable;
  if (*(_BYTE *)(a1 + 329))
  {
    v22 = *(_QWORD *)(a1 + 336);
    v23 = *(_QWORD *)(a1 + 344);
    width = *(double *)(a1 + 352);
    height = *(double *)(a1 + 360);
  }
  else
  {
    v22 = 0;
    v23 = 0;
  }
  v24 = width;
  v25 = height;
  CGPathAddRect(Mutable, 0, *(CGRect *)&v22);
  v28.location = 0;
  v28.length = 0;
  Frame = CTFramesetterCreateFrame(v16, v28, v21, 0);
  C3DTextGeometrySetCTFrame(a1, Frame);
  CFRelease(v16);
  CFRelease(Frame);
  CFRelease(v21);
}

uint64_t C3DTextGeometryGetUseCustomContainerFrame(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 329);
}

double C3DTextGeometryGetCustomContainerFrame(uint64_t a1)
{
  return *(double *)(a1 + 336);
}

uint64_t C3DShapeGeometryGetChamferMode(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DShapeGeometryGetChamferMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(unsigned int *)(a1 + 232);
}

void C3DShapeGeometrySetChamferMode(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DShapeGeometryGetChamferMode_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(_DWORD *)(a1 + 232) != a2)
  {
    *(_DWORD *)(a1 + 232) = a2;
    C3DGeometrySetMesh(a1, 0);
  }
}

double C3DShapeGeometryGetChamferRadius(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DShapeGeometryGetChamferMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 228);
}

void C3DShapeGeometrySetChamferRadius(uint64_t a1, double a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DShapeGeometryGetChamferMode_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(float *)(a1 + 228) != a2)
  {
    v12 = a2;
    *(float *)(a1 + 228) = v12;
    C3DGeometrySetMesh(a1, 0);
  }
}

double C3DShapeGeometryGetDiscretizedStraightLineMaxLength(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DShapeGeometryGetChamferMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 236);
}

void C3DShapeGeometrySetDiscretizedStraightLineMaxLength(uint64_t a1, double a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DShapeGeometryGetChamferMode_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(float *)(a1 + 236) != a2)
  {
    v12 = a2;
    *(float *)(a1 + 236) = v12;
    C3DGeometrySetMesh(a1, 0);
  }
}

double C3DShapeGeometryGetExtrusionDepth(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DShapeGeometryGetChamferMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 224);
}

void C3DShapeGeometrySetExtrusionDepth(uint64_t a1, double a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DShapeGeometryGetChamferMode_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(float *)(a1 + 224) != a2)
  {
    v12 = a2;
    *(float *)(a1 + 224) = v12;
    C3DGeometrySetMesh(a1, 0);
  }
}

uint64_t C3DShapeGeometryGetPrimitiveType(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DShapeGeometryGetChamferMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(char *)(a1 + 216);
}

void C3DShapeGeometrySetPrimitiveType(uint64_t a1, unsigned __int8 a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DShapeGeometryGetChamferMode_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(unsigned __int8 *)(a1 + 216) != a2)
  {
    *(_BYTE *)(a1 + 216) = a2;
    C3DGeometrySetMesh(a1, 0);
  }
}

uint64_t C3DShapeGeometryGetObjCChamferProfile(uint64_t a1)
{
  return *(_QWORD *)(a1 + 264);
}

void C3DShapeGeometrySetC3DKitParameters(uint64_t a1, uint64_t a2)
{
  C3DShapeGeometrySetPrimitiveType(a1, *(_BYTE *)a2);
  C3DShapeGeometrySetExtrusionDepth(a1, *(double *)(a2 + 8));
  C3DShapeGeometrySetChamferRadius(a1, *(double *)(a2 + 16));
  C3DShapeGeometrySetDiscretizedStraightLineMaxLength(a1, *(double *)(a2 + 32));
  C3DShapeGeometrySetObjCPath(a1, *(void **)(a2 + 40));
  C3DShapeGeometrySetObjCChamferProfile(a1, *(void **)(a2 + 48));
}

void C3DShapeGeometrySetObjCPath(uint64_t a1, void *a2)
{
  void *v2;
  double v5;
  uint64_t v6;
  const void *v7;
  CFTypeRef v8;

  v2 = *(void **)(a1 + 248);
  if (v2 != a2)
  {

    *(_QWORD *)(a1 + 248) = a2;
    objc_msgSend(a2, "flatness");
    *(float *)&v5 = v5;
    *(_DWORD *)(a1 + 220) = LODWORD(v5);
    v6 = *(_QWORD *)(a1 + 240);
    if (v6 != objc_msgSend(a2, "CGPath"))
    {
      v7 = *(const void **)(a1 + 240);
      if (v7)
      {
        CFRelease(v7);
        *(_QWORD *)(a1 + 240) = 0;
      }
      v8 = (CFTypeRef)objc_msgSend(a2, "CGPath");
      if (v8)
        v8 = CFRetain(v8);
      *(_QWORD *)(a1 + 240) = v8;
    }
    C3DGeometrySetMesh(a1, 0);
  }
}

void C3DShapeGeometrySetObjCChamferProfile(uint64_t a1, void *a2)
{
  void *v2;
  uint64_t v5;
  const void *v6;
  CFTypeRef v7;

  v2 = *(void **)(a1 + 264);
  if (v2 != a2)
  {

    *(_QWORD *)(a1 + 264) = a2;
    v5 = *(_QWORD *)(a1 + 256);
    if (v5 != objc_msgSend(a2, "CGPath"))
    {
      v6 = *(const void **)(a1 + 256);
      if (v6)
      {
        CFRelease(v6);
        *(_QWORD *)(a1 + 256) = 0;
      }
      v7 = (CFTypeRef)objc_msgSend(a2, "CGPath");
      if (v7)
        v7 = CFRetain(v7);
      *(_QWORD *)(a1 + 256) = v7;
    }
    C3DGeometrySetMesh(a1, 0);
  }
}

double C3DShapeGeometryGetFlatness(uint64_t a1)
{
  return *(float *)(a1 + 220);
}

float C3DShapeGeometrySetFlatness(uint64_t a1, double a2)
{
  float v2;

  if (a2 <= 0.0)
    a2 = 0.001;
  if (a2 != *(float *)(a1 + 220))
  {
    v2 = a2;
    *(float *)(a1 + 220) = v2;
    C3DGeometrySetMesh(a1, 0);
  }
  return *(float *)&a2;
}

uint64_t C3DTextGeometryGetString(uint64_t a1)
{
  return *(_QWORD *)(a1 + 304);
}

uint64_t C3DTextGeometryGetFont(uint64_t a1)
{
  return *(_QWORD *)(a1 + 312);
}

uint64_t C3DTextGeometryGetAlignmentMode(uint64_t a1)
{
  return *(unsigned int *)(a1 + 320);
}

uint64_t C3DTextGeometryGetTruncationMode(uint64_t a1)
{
  return *(unsigned int *)(a1 + 324);
}

uint64_t C3DTextGeometryGetWrapped(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 328);
}

float C3DTextGeometrySetC3DKitParameters(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  int v5;
  double v6;
  float v7;
  _OWORD v9[3];
  uint64_t v10;

  v4 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v4;
  v9[2] = *(_OWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 48);
  C3DShapeGeometrySetC3DKitParameters(a1, (uint64_t)v9);
  C3DTextGeometrySetString(a1, *(void **)(a2 + 56));
  C3DTextGeometrySetFont(a1, *(void **)(a2 + 64));
  C3DTextGeometrySetAlignmentMode(a1, *(_DWORD *)(a2 + 72));
  C3DTextGeometrySetTruncationMode(a1, *(_DWORD *)(a2 + 76));
  C3DTextGeometrySetWrapped(a1, *(unsigned __int8 *)(a2 + 80));
  v5 = *(unsigned __int8 *)(a2 + 81);
  if (*(unsigned __int8 *)(a1 + 329) != v5)
  {
    *(_BYTE *)(a1 + 329) = v5;
    C3DGeometrySetMesh(a1, 0);
  }
  C3DTextGeometrySetCustomContainerFrame(a1, *(CGFloat *)(a2 + 88), *(CGFloat *)(a2 + 96), *(CGFloat *)(a2 + 104), *(CGFloat *)(a2 + 112));
  v6 = *(double *)(a2 + 120);
  if (v6 <= 0.0)
    v6 = 0.001;
  if (v6 != *(float *)(a1 + 220))
  {
    v7 = v6;
    *(float *)(a1 + 220) = v7;
    C3DGeometrySetMesh(a1, 0);
  }
  return *(float *)&v6;
}

void C3DTextGeometrySetString(uint64_t a1, void *a2)
{
  void *v2;

  v2 = *(void **)(a1 + 304);
  if (v2 != a2)
  {

    *(_QWORD *)(a1 + 304) = a2;
    C3DTextGeometrySetCTFrame(a1, 0);
    C3DGeometrySetMesh(a1, 0);
  }
}

void C3DTextGeometrySetFont(uint64_t a1, void *a2)
{
  void *v2;

  v2 = *(void **)(a1 + 312);
  if (v2 != a2)
  {

    *(_QWORD *)(a1 + 312) = a2;
    C3DTextGeometrySetCTFrame(a1, 0);
    C3DGeometrySetMesh(a1, 0);
  }
}

void C3DTextGeometrySetAlignmentMode(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 320) != a2)
  {
    *(_DWORD *)(a1 + 320) = a2;
    C3DTextGeometrySetCTFrame(a1, 0);
    C3DGeometrySetMesh(a1, 0);
  }
}

void C3DTextGeometrySetTruncationMode(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 324) != a2)
  {
    *(_DWORD *)(a1 + 324) = a2;
    C3DTextGeometrySetCTFrame(a1, 0);
    C3DGeometrySetMesh(a1, 0);
  }
}

void C3DTextGeometrySetWrapped(uint64_t a1, int a2)
{
  if (*(unsigned __int8 *)(a1 + 328) != a2)
  {
    *(_BYTE *)(a1 + 328) = a2;
    C3DTextGeometrySetCTFrame(a1, 0);
    C3DGeometrySetMesh(a1, 0);
  }
}

void C3DTextGeometrySetUseCustomContainerFrame(uint64_t a1, int a2)
{
  if (*(unsigned __int8 *)(a1 + 329) != a2)
  {
    *(_BYTE *)(a1 + 329) = a2;
    C3DGeometrySetMesh(a1, 0);
  }
}

void C3DTextGeometrySetCustomContainerFrame(uint64_t a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  CGRect v10;

  v10.origin.x = a2;
  v10.origin.y = a3;
  v10.size.width = a4;
  v10.size.height = a5;
  if (!CGRectEqualToRect(*(CGRect *)(a1 + 336), v10))
  {
    *(CGFloat *)(a1 + 336) = a2;
    *(CGFloat *)(a1 + 344) = a3;
    *(CGFloat *)(a1 + 352) = a4;
    *(CGFloat *)(a1 + 360) = a5;
    C3DTextGeometrySetCTFrame(a1, 0);
    C3DGeometrySetMesh(a1, 0);
  }
}

void C3DTextGeometrySetCTFrame(uint64_t a1, CFTypeRef cf)
{
  CFTypeRef v3;
  CFTypeRef v5;

  v3 = *(CFTypeRef *)(a1 + 296);
  if (v3 != cf)
  {
    if (v3)
    {
      CFRelease(v3);
      *(_QWORD *)(a1 + 296) = 0;
    }
    if (cf)
      v5 = CFRetain(cf);
    else
      v5 = 0;
    *(_QWORD *)(a1 + 296) = v5;
    C3DGeometrySetMesh(a1, 0);
  }
}

uint64_t C3DTextGeometryGetDefaultFont()
{
  return objc_msgSend(MEMORY[0x1E0CEA5E8], "fontWithName:size:", CFSTR("Helvetica"), 12.0);
}

uint64_t C3DTextGeometryGetUseSeparateGeometryElements(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 330);
}

void C3DTextGeometrySetUseSeparateGeometryElements(uint64_t a1, int a2)
{
  if (*(unsigned __int8 *)(a1 + 330) != a2)
  {
    *(_BYTE *)(a1 + 330) = a2;
    C3DGeometrySetMesh(a1, 0);
  }
}

double C3DShapeGeometryInit(uint64_t a1)
{
  double v2;
  void *Default;
  double result;

  v2 = C3DGeometryInit(a1);
  Default = (void *)C3DMaterialCreateDefault(v2);
  C3DGeometryAppendMaterial(a1, Default);
  CFRelease(Default);
  *(_BYTE *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 220) = 1065353216;
  *(_DWORD *)(a1 + 228) = 0;
  *(_DWORD *)(a1 + 236) = 2139095039;
  result = 0.0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_QWORD *)(a1 + 120) = kC3DShapeGeometryValidationCallBacks;
  return result;
}

uint64_t C3DShapeGeometryCreate()
{
  uint64_t Instance;

  if (C3DShapeGeometryGetTypeID_onceToken != -1)
    dispatch_once(&C3DShapeGeometryGetTypeID_onceToken, &__block_literal_global_145);
  Instance = C3DTypeCreateInstance_(C3DShapeGeometryGetTypeID_typeID, 0x118uLL);
  C3DShapeGeometryInit(Instance);
  return Instance;
}

void C3DShapeGeometryCopy(uint64_t a1, uint64_t a2)
{
  unsigned __int8 PrimitiveType;
  float v5;
  double v6;
  BOOL v7;
  double v8;
  float v9;
  double ExtrusionDepth;
  double ChamferRadius;
  double DiscretizedStraightLineMaxLength;

  C3DGeometryCopy(a1, a2);
  PrimitiveType = C3DShapeGeometryGetPrimitiveType(a1);
  C3DShapeGeometrySetPrimitiveType(a2, PrimitiveType);
  v5 = *(float *)(a1 + 220);
  v6 = v5;
  v7 = v5 > 0.0;
  v8 = 0.001;
  if (v7)
    v8 = v6;
  if (v8 != *(float *)(a2 + 220))
  {
    v9 = v8;
    *(float *)(a2 + 220) = v9;
    C3DGeometrySetMesh(a2, 0);
  }
  ExtrusionDepth = C3DShapeGeometryGetExtrusionDepth(a1);
  C3DShapeGeometrySetExtrusionDepth(a2, ExtrusionDepth);
  ChamferRadius = C3DShapeGeometryGetChamferRadius(a1);
  C3DShapeGeometrySetChamferRadius(a2, ChamferRadius);
  DiscretizedStraightLineMaxLength = C3DShapeGeometryGetDiscretizedStraightLineMaxLength(a1);
  C3DShapeGeometrySetDiscretizedStraightLineMaxLength(a2, DiscretizedStraightLineMaxLength);
  C3DShapeGeometrySetObjCPath(a2, *(void **)(a1 + 248));
  C3DShapeGeometrySetObjCChamferProfile(a2, *(void **)(a1 + 264));
}

void C3DShapeGeometryFinalize(uint64_t a1)
{
  const void *v2;

  C3DShapeGeometrySetObjCPath(a1, 0);
  C3DShapeGeometrySetObjCChamferProfile(a1, 0);
  v2 = *(const void **)(a1 + 272);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 272) = 0;
  }
}

uint64_t C3DTextGeometryCreate()
{
  uint64_t Instance;
  __int128 v1;

  if (C3DTextGeometryGetTypeID_onceToken != -1)
    dispatch_once(&C3DTextGeometryGetTypeID_onceToken, &__block_literal_global_11_1);
  Instance = C3DTypeCreateInstance_(C3DTextGeometryGetTypeID_typeID, 0x160uLL);
  C3DShapeGeometryInit(Instance);
  *(_WORD *)(Instance + 328) = 0;
  *(_OWORD *)(Instance + 296) = 0u;
  *(_OWORD *)(Instance + 312) = 0u;
  v1 = *(_OWORD *)(MEMORY[0x1E0C9D648] + 16);
  *(_OWORD *)(Instance + 336) = *MEMORY[0x1E0C9D648];
  *(_OWORD *)(Instance + 352) = v1;
  *(_BYTE *)(Instance + 330) = 0;
  *(_QWORD *)(Instance + 120) = &kC3DTextGeometryValidationCallBacks;
  return Instance;
}

void C3DTextGeometryCopy(uint64_t a1, uint64_t a2)
{
  int v4;

  C3DShapeGeometryCopy(a1, a2);
  C3DTextGeometrySetCTFrame(a2, *(CFTypeRef *)(a1 + 296));
  C3DTextGeometrySetString(a2, *(void **)(a1 + 304));
  C3DTextGeometrySetFont(a2, *(void **)(a1 + 312));
  C3DTextGeometrySetAlignmentMode(a2, *(_DWORD *)(a1 + 320));
  C3DTextGeometrySetTruncationMode(a2, *(_DWORD *)(a1 + 324));
  C3DTextGeometrySetWrapped(a2, *(unsigned __int8 *)(a1 + 328));
  v4 = *(unsigned __int8 *)(a1 + 329);
  if (*(unsigned __int8 *)(a2 + 329) != v4)
  {
    *(_BYTE *)(a2 + 329) = v4;
    C3DGeometrySetMesh(a2, 0);
  }
  C3DTextGeometrySetCustomContainerFrame(a2, *(CGFloat *)(a1 + 336), *(CGFloat *)(a1 + 344), *(CGFloat *)(a1 + 352), *(CGFloat *)(a1 + 360));
}

void C3DTextGeometryFinalize(uint64_t a1)
{
  C3DTextGeometrySetCTFrame(a1, 0);
  C3DTextGeometrySetString(a1, 0);
  C3DTextGeometrySetFont(a1, 0);
  C3DShapeGeometryFinalize(a1);
}

const void *C3DShapeGeometryMeshForBoundingBox(const void *a1, __int128 *a2)
{
  CFTypeID v4;
  __int128 v5;
  __int128 v6;
  _QWORD v8[4];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  _OWORD v13[3];
  uint64_t v14;
  unsigned __int8 data[56];
  unsigned __int8 v16[8];
  uint64_t v17;
  unsigned __int8 md[8];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = CFGetTypeID(a1);
  if (C3DShapeGeometryGetTypeID_onceToken != -1)
    dispatch_once(&C3DShapeGeometryGetTypeID_onceToken, &__block_literal_global_145);
  if (v4 != C3DShapeGeometryGetTypeID_typeID)
    C3DShapeGeometryMeshForBoundingBox_cold_1();
  *(_QWORD *)md = 0;
  v19 = 0;
  *(_QWORD *)v16 = 0;
  v17 = 0;
  C3DShapeGeometryGetC3DKitParameters((uint64_t)a1, (uint64_t)data);
  CC_MD5(data, 0x38u, md);
  v5 = a2[1];
  v13[0] = *a2;
  v13[1] = v5;
  v13[2] = a2[2];
  v14 = *((_QWORD *)a2 + 6);
  CC_MD5(v13, 0x38u, v16);
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __C3DShapeGeometryMeshForBoundingBox_block_invoke;
  v8[3] = &__block_descriptor_88_e17_____C3DMesh__8__0l;
  v6 = a2[1];
  v9 = *a2;
  v10 = v6;
  v11 = a2[2];
  v12 = *((_QWORD *)a2 + 6);
  return C3DShapeGeometryGetMeshForC3DKitNeeds((uint64_t)a1, (uint64_t)v16, md, (uint64_t)v8);
}

uint64_t C3DShapeGeometryGetBoundingBox(const void *a1, _OWORD *a2, _OWORD *a3, uint64_t a4)
{
  CFTypeID v8;
  __int128 v9;
  const void *v10;
  __int128 v12[3];
  uint64_t v13;

  v8 = CFGetTypeID(a1);
  if (C3DShapeGeometryGetTypeID_onceToken != -1)
    dispatch_once(&C3DShapeGeometryGetTypeID_onceToken, &__block_literal_global_145);
  if (v8 != C3DShapeGeometryGetTypeID_typeID)
    C3DShapeGeometryGetBoundingBox_cold_1();
  v9 = *(_OWORD *)(a4 + 16);
  v12[0] = *(_OWORD *)a4;
  v12[1] = v9;
  v12[2] = *(_OWORD *)(a4 + 32);
  v13 = *(_QWORD *)(a4 + 48);
  v10 = C3DShapeGeometryMeshForBoundingBox(a1, v12);
  return C3DMeshGetBoundingBox((uint64_t)v10, a2, a3);
}

uint64_t C3DShapeGeometryGetBoundingSphere(const void *a1, _OWORD *a2, uint64_t a3)
{
  CFTypeID v6;
  __int128 v7;
  const void *v8;
  __int128 v10[3];
  uint64_t v11;

  v6 = CFGetTypeID(a1);
  if (C3DShapeGeometryGetTypeID_onceToken != -1)
    dispatch_once(&C3DShapeGeometryGetTypeID_onceToken, &__block_literal_global_145);
  if (v6 != C3DShapeGeometryGetTypeID_typeID)
    C3DShapeGeometryGetBoundingSphere_cold_1();
  v7 = *(_OWORD *)(a3 + 16);
  v10[0] = *(_OWORD *)a3;
  v10[1] = v7;
  v10[2] = *(_OWORD *)(a3 + 32);
  v11 = *(_QWORD *)(a3 + 48);
  v8 = C3DShapeGeometryMeshForBoundingBox(a1, v10);
  return C3DMeshGetBoundingSphere((uint64_t)v8, a2);
}

const void *C3DTextGeometryMeshForBoundingBox(uint64_t a1, _OWORD *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _QWORD v13[4];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD v22[8];
  unsigned __int8 data[128];
  unsigned __int8 v24[8];
  uint64_t v25;
  unsigned __int8 md[8];
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)md = 0;
  v27 = 0;
  *(_QWORD *)v24 = 0;
  v25 = 0;
  C3DTextGeometryGetC3DKitParameters(a1, (uint64_t)data);
  CC_MD5(data, 0x80u, md);
  v4 = a2[5];
  v22[4] = a2[4];
  v22[5] = v4;
  v5 = a2[7];
  v22[6] = a2[6];
  v22[7] = v5;
  v6 = a2[1];
  v22[0] = *a2;
  v22[1] = v6;
  v7 = a2[3];
  v22[2] = a2[2];
  v22[3] = v7;
  CC_MD5(v22, 0x80u, v24);
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = __C3DTextGeometryMeshForBoundingBox_block_invoke;
  v13[3] = &__block_descriptor_160_e17_____C3DMesh__8__0l;
  v8 = a2[5];
  v18 = a2[4];
  v19 = v8;
  v9 = a2[7];
  v20 = a2[6];
  v21 = v9;
  v10 = a2[1];
  v14 = *a2;
  v15 = v10;
  v11 = a2[3];
  v16 = a2[2];
  v17 = v11;
  return C3DShapeGeometryGetMeshForC3DKitNeeds(a1, (uint64_t)v24, md, (uint64_t)v13);
}

uint64_t C3DTextGeometryGetBoundingBox(uint64_t a1, _OWORD *a2, _OWORD *a3, _OWORD *a4)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  const void *v10;
  _OWORD v12[8];

  v6 = a4[5];
  v12[4] = a4[4];
  v12[5] = v6;
  v7 = a4[7];
  v12[6] = a4[6];
  v12[7] = v7;
  v8 = a4[1];
  v12[0] = *a4;
  v12[1] = v8;
  v9 = a4[3];
  v12[2] = a4[2];
  v12[3] = v9;
  v10 = C3DTextGeometryMeshForBoundingBox(a1, v12);
  return C3DMeshGetBoundingBox((uint64_t)v10, a2, a3);
}

uint64_t C3DTextGeometryGetBoundingSphere(uint64_t a1, _OWORD *a2, _OWORD *a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  const void *v8;
  _OWORD v10[8];

  v4 = a3[5];
  v10[4] = a3[4];
  v10[5] = v4;
  v5 = a3[7];
  v10[6] = a3[6];
  v10[7] = v5;
  v6 = a3[1];
  v10[0] = *a3;
  v10[1] = v6;
  v7 = a3[3];
  v10[2] = a3[2];
  v10[3] = v7;
  v8 = C3DTextGeometryMeshForBoundingBox(a1, v10);
  return C3DMeshGetBoundingSphere((uint64_t)v8, a2);
}

id _C3DShapeGeometryCFFinalize(__C3DGeometry *a1)
{
  C3DShapeGeometryFinalize((uint64_t)a1);
  return _C3DGeometryCFFinalize(a1);
}

id _C3DTextGeometryCFFinalize(__C3DGeometry *a1)
{
  C3DTextGeometryFinalize((uint64_t)a1);
  return _C3DGeometryCFFinalize(a1);
}

uint64_t _C3DShapeGeometryGetBoundingBox(uint64_t a1, uint64_t a2, _OWORD *a3, _OWORD *a4)
{
  uint64_t result;

  result = C3DGeometryGetMesh(a1);
  if (result)
    return C3DMeshGetBoundingBox(result, a3, a4);
  return result;
}

uint64_t _C3DShapeGeometryGetBoundingSphere(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t result;

  result = C3DGeometryGetMesh(a1);
  if (result)
    return C3DMeshGetBoundingSphere(result, a3);
  return result;
}

void _C3DShapeGeometrySetValue(uint64_t a1, void *__dst, void *__src, size_t __n)
{
  memcpy(__dst, __src, __n);
  C3DGeometrySetMesh(a1, 0);
}

uint64_t _C3DShapeGeometryCreateCopy(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DGeometryCopy_cold_4(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  v10 = C3DShapeGeometryCreate();
  C3DShapeGeometryCopy(a1, v10);
  return v10;
}

uint64_t _C3DTextGeometryGetBoundingBox(uint64_t a1, uint64_t a2, _OWORD *a3, _OWORD *a4)
{
  uint64_t result;

  result = C3DGeometryGetMesh(a1);
  if (result)
    return C3DMeshGetBoundingBox(result, a3, a4);
  return result;
}

uint64_t _C3DTextGeometryGetBoundingSphere(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t result;

  result = C3DGeometryGetMesh(a1);
  if (result)
    return C3DMeshGetBoundingSphere(result, a3);
  return result;
}

void _C3DTextGeometrySetValue(uint64_t a1, void *__dst, void *__src, size_t __n)
{
  memcpy(__dst, __src, __n);
  C3DGeometrySetMesh(a1, 0);
}

uint64_t _C3DTextGeometryCreateCopy(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DGeometryCopy_cold_4(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  v10 = C3DTextGeometryCreate();
  C3DTextGeometryCopy(a1, v10);
  return v10;
}

BOOL C3D::ShouldShowOutline(C3D *this, const void *a2)
{
  _BOOL8 v3;
  void *SelectedNodes;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[5];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char v13;

  if ((C3DAuthoringEnvironmentGetDisplayMask(this) & 0x20000) == 0)
    return 0;
  SelectedNodes = (void *)C3DAuthoringEnvironmentGetSelectedNodes(this);
  v5 = 0;
  v10 = 0;
  v11 = &v10;
  v12 = 0x2020000000;
  v13 = 0;
  v6 = MEMORY[0x1E0C809B0];
  while (v5 < objc_msgSend(SelectedNodes, "count"))
  {
    v7 = objc_msgSend(SelectedNodes, "objectAtIndexedSubscript:", v5);
    v9[0] = v6;
    v9[1] = 3221225472;
    v9[2] = ___ZN3C3D17ShouldShowOutlineEPKv_block_invoke;
    v9[3] = &unk_1EA59F880;
    v9[4] = &v10;
    C3DNodeApplyHierarchy(v7, (uint64_t)v9);
    ++v5;
    if (*((_BYTE *)v11 + 24))
    {
      v3 = 1;
      goto LABEL_8;
    }
  }
  v3 = *((_BYTE *)v11 + 24) != 0;
LABEL_8:
  _Block_object_dispose(&v10, 8);
  return v3;
}

void sub_1DCF5A164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3C3D17ShouldShowOutlineEPKv_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (!a2)
    return 0;
  if (C3DNodeIsHiddenOrTransparent(a2))
    return 1;
  result = C3DNodeGetGeometry(a2);
  if (result)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    return 2;
  }
  return result;
}

double C3D::AdaptCullingContextForAuthoring(C3D *this, __n128 **a2, const Parameters *a3, __C3DCullingContext *a4)
{
  int v4;
  uint64_t Scene;
  uint64_t StackAllocator;
  uint64_t LayerRootNode;
  char v11;
  CFTypeRef *v12;
  uint64_t v13;
  float32x4_t v14;
  float32x4_t *v15;
  float32x4_t *WorldMatrix;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  double result;
  float32x4_t v26;
  float32x4_t v27;
  uint64_t v28;
  unsigned int v29;
  CFTypeRef *v30;
  float32x4_t v31;
  uint64_t (*v32)(uint64_t, uint64_t);
  void *v33;
  uint64_t *v34;

  v4 = (int)a4;
  Scene = C3DEngineContextGetScene((uint64_t)this);
  StackAllocator = C3DEngineContextGetStackAllocator((uint64_t)this);
  C3D::Array<C3D::Pass *,0u,C3D::StackAllocator>::Array(&v28, StackAllocator);
  LayerRootNode = C3DSceneGetLayerRootNode(Scene, v4);
  v31.i64[0] = MEMORY[0x1E0C809B0];
  v31.i64[1] = 3321888768;
  v32 = ___ZZN3C3D31AdaptCullingContextForAuthoringEP18__C3DEngineContextRKNS_13DrawNodesPass10ParametersER19__C3DCullingContexthENK3__0cvU13block_pointerF18C3DNodeApplyStatusP9__C3DNodeEEv_block_invoke;
  v33 = &__block_descriptor_40_e8_32c127_ZTSKZN3C3D31AdaptCullingContextForAuthoringEP18__C3DEngineContextRKNS_13DrawNodesPass10ParametersER19__C3DCullingContexthE3__0_e20_q16__0____C3DNode__8l;
  v34 = &v28;
  C3DNodeApplyHierarchySkippingHiddenNodes(LayerRootNode, objc_msgSend((id)objc_msgSend(&v31, "copy"), "autorelease"));
  if (v29)
  {
    v11 = 0;
    v12 = v30;
    v13 = 8 * v29;
    v14 = 0uLL;
    do
    {
      v26 = v14;
      v15 = (float32x4_t *)*v12;
      if (C3DGetBoundingSphere(*v12, 0, (uint64_t)&v31))
      {
        WorldMatrix = C3DNodeGetWorldMatrix(v15);
        C3DSphereXFormMatrix4x4(&v31, WorldMatrix, (uint64_t)&v31);
        v17 = v31;
        if ((v11 & 1) != 0
          && (v18 = v26,
              v19 = vsubq_f32(v26, v31),
              v20 = vmulq_f32(v19, v19),
              v21 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 2), vaddq_f32(v20, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.f32, 1))).f32[0]), (float)(v26.f32[3] + v21) >= v31.f32[3]))
        {
          if ((float)(v31.f32[3] + v21) > v26.f32[3])
          {
            v18 = vmlaq_n_f32(v26, v19, (float)(v26.f32[3] - (float)((float)((float)(v26.f32[3] + v31.f32[3]) + v21) * 0.5)) / v21);
            v18.f32[3] = (float)((float)(v26.f32[3] + v31.f32[3]) + v21) * 0.5;
          }
          v11 = 1;
          v17 = v18;
        }
        else
        {
          v11 = 1;
        }
      }
      else
      {
        v17 = v26;
      }
      ++v12;
      v14 = v17;
      v13 -= 8;
    }
    while (v13);
  }
  else
  {
    v17 = 0uLL;
  }
  v27 = v17;
  *(double *)v22.i64 = C3DNodeGetPosition(a2[1]);
  a3[469].var4 = 1;
  *(_QWORD *)&a3[474].var4 = 0x3F847AE147AE147BLL;
  v23 = vsubq_f32(v22, v27);
  v24 = vmulq_f32(v23, v23);
  result = (float)(v27.f32[3]
                 + sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 2), vaddq_f32(v24, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.f32, 1))).f32[0]));
  *(double *)&a3[475].var2 = result;
  return result;
}

double C3D::AuthoringPass::AuthoringPass(C3D::AuthoringPass *this, C3D::RenderGraph *a2, C3D::Pass *a3)
{
  C3D::DrawNodesPass *v3;
  double result;
  _OWORD v5[2];
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  v6 = 0;
  v8 = 0u;
  v9 = 0x20000;
  memset(v5, 0, sizeof(v5));
  v7 = -1;
  BYTE8(v8) = 1;
  v3 = C3D::DrawNodesPass::DrawNodesPass(this, a2, a3, (const Parameters *)v5);
  *(_QWORD *)v3 = off_1EA598D38;
  *((_WORD *)v3 + 2692) = 0;
  result = 0.0;
  *((_OWORD *)v3 + 335) = 0u;
  return result;
}

const char *C3D::AuthoringPass::name(C3D::AuthoringPass *this)
{
  return "AuthoringPass";
}

const char *C3D::AuthoringPass::programHashCodeStoreName(C3D::AuthoringPass *this)
{
  return "AuthoringPass";
}

void C3D::AuthoringPass::setup(C3D::AuthoringPass *this)
{
  C3D *AuthoringEnvironment;
  const void *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  C3D::OutlinePass *v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  int v18;

  AuthoringEnvironment = (C3D *)C3DEngineContextGetAuthoringEnvironment(*((_QWORD *)this + 2), 0);
  v4 = (char *)this + 5384;
  *((_BYTE *)this + 5384) = C3D::ShouldShowOutline(AuthoringEnvironment, v3);
  C3D::Pass::setInputCount(this, 2u);
  C3D::Pass::setOutputCount(this, 2u);
  v5 = C3D::PassDescriptor::inputAtIndex((C3D::AuthoringPass *)((char *)this + 32), 0);
  v6 = v5;
  if (!*((_BYTE *)this + 5384))
  {
    *(_QWORD *)(v5 + 8) = "COLOR";
    C3D::Pass::parentColorDesc(this, (uint64_t)&v17);
    *(_OWORD *)(v6 + 16) = v17;
    *(_DWORD *)(v6 + 32) = v18;
    *(_WORD *)(v6 + 66) = *(_WORD *)(v6 + 66) & 0xFF78 | 0x85;
  }
  v7 = C3D::PassDescriptor::inputAtIndex((C3D::AuthoringPass *)((char *)this + 32), 1u);
  *(_QWORD *)(v7 + 8) = "DEPTH";
  *(_BYTE *)(v7 + 64) = 2;
  C3D::Pass::parentDepthDesc(this, (uint64_t)&v17);
  *(_OWORD *)(v7 + 16) = v17;
  *(_DWORD *)(v7 + 32) = v18;
  *(_WORD *)(v7 + 66) = *(_WORD *)(v7 + 66) & 0xFF78 | 0x85;
  v8 = C3D::PassDescriptor::outputAtIndex((C3D::AuthoringPass *)((char *)this + 32), 0);
  *(_QWORD *)(v8 + 8) = "COLOR";
  *(_BYTE *)(v8 + 65) = 0;
  C3D::Pass::parentColorDesc(this, (uint64_t)&v17);
  *(_OWORD *)(v8 + 16) = v17;
  *(_DWORD *)(v8 + 32) = v18;
  *(_WORD *)(v8 + 66) = *(_WORD *)(v8 + 66) & 0xFFFC | (*v4 == 0);
  v9 = C3D::PassDescriptor::outputAtIndex((C3D::AuthoringPass *)((char *)this + 32), 1u);
  *(_QWORD *)(v9 + 8) = "DEPTH";
  v10 = *(_WORD *)(v9 + 66) & 0xFFFD;
  *(_BYTE *)(v9 + 64) = 2;
  *(_WORD *)(v9 + 66) = v10 | 9;
  *((_BYTE *)this + 296) = 0;
  *((_QWORD *)this + 31) = C3DEngineContextGetPointOfView(*((_QWORD *)this + 2));
  *(_WORD *)((char *)this + 303) = 256;
  *((_BYTE *)this + 119) = 1;
  *((_DWORD *)this + 11) = 2;
  if (*v4)
  {
    v11 = *((_QWORD *)this + 3);
    *(_QWORD *)&v17 = this;
    v12 = C3D::RenderGraph::createPass<C3D::OutlinePass,C3D::AuthoringPass *>(v11, (C3D::Pass **)&v17);
    *((_QWORD *)this + 671) = v12;
    v13 = (_OWORD *)C3D::PassDescriptor::outputAtIndex((C3D::OutlinePass *)((char *)v12 + 32), 0);
    *(_OWORD *)v6 = *v13;
    v14 = v13[4];
    v16 = v13[1];
    v15 = v13[2];
    *(_OWORD *)(v6 + 48) = v13[3];
    *(_OWORD *)(v6 + 64) = v14;
    *(_OWORD *)(v6 + 16) = v16;
    *(_OWORD *)(v6 + 32) = v15;
    C3D::Pass::addDependency(this, *((C3D::Pass **)this + 671));
  }
  C3D::DrawNodesPass::setup(this);
}

C3D::OutlinePass *C3D::RenderGraph::createPass<C3D::OutlinePass,C3D::AuthoringPass *>(uint64_t a1, C3D::Pass **a2)
{
  C3D::OutlinePass *Aligned;

  Aligned = (C3D::OutlinePass *)C3DScratchAllocatorAllocateAligned(*(_QWORD *)(a1 + 16), 256, 16, 0);
  C3D::OutlinePass::OutlinePass(Aligned, (C3D::RenderGraph *)a1, *a2);
  C3D::RenderGraph::addPass((C3D::RenderGraph *)a1, Aligned);
  if (*(_BYTE *)(a1 + 209))
    (*(void (**)(C3D::OutlinePass *))(*(_QWORD *)Aligned + 8))(Aligned);
  return Aligned;
}

void C3D::AuthoringPass::compile(C3D::AuthoringPass *this)
{
  uint64_t RenderContext;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  C3D::PassResource *v6;
  unsigned __int16 v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  C3D::RenderGraphResourceManager *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const __CFString *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t Sphere;
  uint64_t v31;
  const void *v32;
  SCNMTLMesh *v33;
  _BOOL4 HasFeatures;
  uint64_t v35;
  const __CFString *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  const __CFArray *MeshElements;
  const void *ValueAtIndex;
  SCNMTLMeshElement *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  const __CFString *v53;
  __int128 v54;
  _OWORD v55[6];
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  _OWORD v73[6];
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;

  RenderContext = C3DEngineContextGetRenderContext(*((_QWORD *)this + 2));
  v3 = (void *)-[SCNMTLRenderContext resourceManager](RenderContext);
  v4 = C3D::PassDescriptor::outputAtIndex((C3D::AuthoringPass *)((char *)this + 32), 0);
  v5 = *(unsigned __int16 *)(v4 + 28);
  v6 = (C3D::PassResource *)C3D::Pass::resource(this);
  v7 = objc_msgSend(*(id *)C3D::PassResource::outputAtIndex(v6, 1u), "pixelFormat");
  v8 = -[SCNMTLRenderContext reverseZ](RenderContext);
  v9 = v8 | (2 * *(unsigned __int8 *)(v4 + 31));
  v10 = 0x9DDFEA08EB382D69 * (v9 ^ *((unsigned __int8 *)this + 5384));
  v11 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v9 ^ (v10 >> 47) ^ v10)) ^ ((0x9DDFEA08EB382D69 * (v9 ^ (v10 >> 47) ^ v10)) >> 47));
  v12 = 0x9DDFEA08EB382D69 * (v11 ^ ((0x9DDFEA08EB382D69 * (v11 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (v11 ^ v5)));
  v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
  v14 = v7;
  v15 = (0x9DDFEA08EB382D69 * (v13 ^ ((0x9DDFEA08EB382D69 * (v13 ^ v7)) >> 47) ^ (0x9DDFEA08EB382D69 * (v13 ^ v7)))) ^ ((0x9DDFEA08EB382D69 * (v13 ^ ((0x9DDFEA08EB382D69 * (v13 ^ v7)) >> 47) ^ (0x9DDFEA08EB382D69 * (v13 ^ v7)))) >> 47);
  v16 = 0xC6A4A7935BD1E995
      * ((*(uint64_t (**)(C3D::AuthoringPass *))(*(_QWORD *)this + 64))(this) ^ 0x35253C9ADE8F4CA8 ^ (0xC6A4A7935BD1E995 * ((0xF05FE8936EBFFF1DLL * v15) ^ ((0xF05FE8936EBFFF1DLL * v15) >> 47))));
  v17 = (0xC6A4A7935BD1E995 * (v16 ^ (v16 >> 47))) ^ ((0xC6A4A7935BD1E995 * (v16 ^ (v16 >> 47))) >> 47);
  v18 = *(C3D::RenderGraphResourceManager **)(*((_QWORD *)this + 3) + 128);
  v19 = C3D::RenderGraphResourceManager::get(v18, v17);
  *((_QWORD *)this + 672) = v19;
  if (!v19)
  {
    v20 = operator new();
    *(_QWORD *)v20 = &off_1EA599E78;
    *(_QWORD *)(v20 + 8) = 0;
    *(_OWORD *)(v20 + 16) = 0u;
    *(_OWORD *)(v20 + 32) = 0u;
    *(_OWORD *)(v20 + 48) = 0u;
    *(_QWORD *)(v20 + 64) = 0;
    *((_QWORD *)this + 672) = v20;
    C3D::RenderGraphResourceManager::set((uint64_t)v18, v17, v20);
    v21 = *((_QWORD *)this + 672);
    memset(v73, 0, sizeof(v73));
    v74 = 0;
    v76 = 0u;
    v77 = 0u;
    v78 = 0u;
    v79 = 0u;
    v80 = 0u;
    v81 = 0u;
    v82 = 0u;
    v83 = 0u;
    v84 = 0u;
    v85 = 0u;
    v86 = 0u;
    v87 = 0u;
    v88 = 0u;
    v89 = 0u;
    v90 = 0;
    v75 = objc_msgSend((id)-[SCNMTLResourceManager libraryManager]((uint64_t)v3), "frameworkLibrary");
    *(_QWORD *)&v76 = v5;
    *(_QWORD *)&v80 = v14;
    LOBYTE(v81) = *(_BYTE *)(v4 + 31);
    v22 = CFSTR("scn_clear_z_reversed");
    if (!v8)
      v22 = CFSTR("scn_clear_z");
    *((_QWORD *)&v87 + 1) = v22;
    v23 = objc_msgSend(v3, "newRenderPipelineStateWithDesc:", v73);
    v24 = *(void **)(v21 + 16);
    if (v24 != (void *)v23)
    {
      v25 = v23;
      if (v24)

      *(_QWORD *)(v21 + 16) = v25;
    }
    v26 = *((_QWORD *)this + 672);
    memset(v55, 0, sizeof(v55));
    v56 = 0;
    v58 = 0u;
    v59 = 0u;
    v60 = 0u;
    v61 = 0u;
    v62 = 0u;
    v63 = 0u;
    v64 = 0u;
    v65 = 0u;
    v66 = 0u;
    v67 = 0u;
    v68 = 0u;
    v69 = 0u;
    v70 = 0u;
    v71 = 0u;
    v72 = 0;
    v57 = objc_msgSend((id)-[SCNMTLResourceManager libraryManager]((uint64_t)v3), "frameworkLibrary");
    *(_QWORD *)&v58 = v5;
    *(_QWORD *)&v62 = v14;
    LOBYTE(v63) = *(_BYTE *)(v4 + 31);
    *((_QWORD *)&v69 + 1) = CFSTR("scn_draw_fullscreen_triangle_vertex");
    *(_QWORD *)&v70 = CFSTR("scn_draw_fullscreen_fragment");
    v27 = objc_msgSend(v3, "newRenderPipelineStateWithDesc:", v55);
    v28 = *(void **)(v26 + 24);
    if (v28 != (void *)v27)
    {
      v29 = v27;
      if (v28)

      *(_QWORD *)(v26 + 24) = v29;
    }
    Sphere = C3DMeshCreateSphere(0, 12, 0, 1.0, 1.0);
    v31 = *((_QWORD *)this + 672);
    v32 = *(const void **)(v31 + 56);
    if (v32 != (const void *)Sphere)
    {
      if (v32)
        CFRelease(v32);
      *(_QWORD *)(v31 + 56) = Sphere;
    }
    v33 = -[SCNMTLResourceManager renderResourceForMesh:dataKind:]((uint64_t)v3, Sphere, 1);
    HasFeatures = C3DEngineContextHasFeatures(*((_QWORD *)this + 2), 256);
    v35 = *((_QWORD *)this + 672);
    *((_QWORD *)&v48 + 1) = objc_msgSend((id)-[SCNMTLResourceManager libraryManager]((uint64_t)v3), "frameworkLibrary", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0);
    *(_QWORD *)&v49 = v5;
    *(_QWORD *)&v50 = v14;
    LOBYTE(v51) = *(_BYTE *)(v4 + 31);
    v52 = -[SCNMTLResourceManager commandQueue]((uint64_t)v33);
    v53 = CFSTR("debug_probe_vert");
    v36 = CFSTR("debug_probe_frag_cube_array");
    if (!HasFeatures)
      v36 = CFSTR("debug_probe_frag_2d_array");
    *(_QWORD *)&v54 = v36;
    v37 = objc_msgSend(v3, "newRenderPipelineStateWithDesc:", &v47);
    v38 = *(void **)(v35 + 32);
    if (v38 != (void *)v37)
    {
      v39 = v37;
      if (v38)

      *(_QWORD *)(v35 + 32) = v39;
    }
    C3D::SmartPtr<CIContext *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator=((void **)(*((_QWORD *)this + 672) + 40), v33);
    MeshElements = (const __CFArray *)C3DMeshGetMeshElements(Sphere, 1);
    if (MeshElements)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(MeshElements, 0);
      if (ValueAtIndex)
      {
        v42 = -[SCNMTLResourceManager renderResourceForMeshElement:]((uint64_t)v3, (uint64_t)ValueAtIndex);
        C3D::SmartPtr<CIContext *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator=((void **)(*((_QWORD *)this + 672) + 48), v42);
      }
    }
    v43 = (void *)objc_opt_new();
    objc_msgSend(v43, "setDepthCompareFunction:", 7);
    objc_msgSend(v43, "setDepthWriteEnabled:", 0);
    v44 = objc_msgSend((id)-[SCNMTLRenderContext device](RenderContext), "newDepthStencilStateWithDescriptor:", v43);

    v45 = *((_QWORD *)this + 672);
    v46 = *(void **)(v45 + 64);
    *(_QWORD *)(v45 + 64) = v44;
    if (v46)

  }
  C3D::DrawNodesPass::compile(this);
}

uint64_t C3D::AuthoringPass::execute(uint64_t a1, SCNMTLRenderCommandEncoder **a2)
{
  unint64_t v2;
  _BYTE *v5;
  uint64_t Scene;
  uint64_t EnginePipeline;
  uint64_t RendererElementStore;
  SCNMTLRenderCommandEncoder *v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  id AuthoringEnvironment;
  uint64_t ControllerManager;
  uint64_t CullingContext;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t Element;
  float32x4_t *Node;
  uint64_t RootNode;
  __n128 v22;
  uint64_t RenderContext;
  uint64_t v24;
  uint64_t v25;
  int v26;
  SCNMTLRenderCommandEncoder *v27;
  _QWORD v29[5];

  v5 = (_BYTE *)(a1 + 5384);
  Scene = C3DEngineContextGetScene(*(_QWORD *)(a1 + 16));
  EnginePipeline = C3DSceneGetEnginePipeline(Scene);
  RendererElementStore = C3DEnginePipelineGetRendererElementStore(EnginePipeline);
  objc_msgSend((id)(*a2)->var24[1], "pushDebugGroup:", CFSTR("Authoring"));
  if (*v5 || v5[1])
  {
    objc_msgSend((id)(*a2)->var24[1], "setDepthStencilState:", C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*(_QWORD *)(a1 + 5376) + 64));
    v9 = *a2;
    v10 = objc_msgSend((id)C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*(_QWORD *)(a1 + 5376) + 24), "state");
    if (v9->var23 != (SCNMTLBufferPool *)v10)
    {
      v9->var23 = (SCNMTLBufferPool *)v10;
      objc_msgSend((id)v9->var24[1], "setRenderPipelineState:", v10);
    }
    v11 = (uint64_t)*a2;
    v12 = C3D::Pass::inputTextureAtIndex((C3D::Pass *)a1, 0);
    SCNMTLRenderCommandEncoder::setFragmentTexture(v11, v12, 0);
    SCNMTLRenderCommandEncoder::drawFullScreenTriangle(*a2);
  }
  AuthoringEnvironment = C3DEngineContextGetAuthoringEnvironment(*(_QWORD *)(a1 + 16), 1);
  if (C3DAuthoringEnvironmentShouldDisplayConstraints((uint64_t)AuthoringEnvironment))
  {
    ControllerManager = C3DSceneGetControllerManager(Scene);
    C3DConstraintManagerAppendAuthoringInfo(ControllerManager, (uint64_t)AuthoringEnvironment);
  }
  CullingContext = C3D::DrawNodesPass::getCullingContext(*(C3D::DrawNodesPass **)(a1 + 5360));
  v16 = *(unsigned int *)(CullingContext + 4920);
  if ((_DWORD)v16)
  {
    v17 = *(unsigned int **)(CullingContext + 4912);
    do
    {
      v18 = *v17++;
      v2 = v2 & 0xFFFFFFFF00000000 | v18;
      Element = C3DRendererElementStoreGetElement(RendererElementStore, v2);
      Node = (float32x4_t *)C3DRendererElementGetNode(Element);
      if (Node)
        C3DAuthoringEnvironmentAppendDebugNode((uint64_t)AuthoringEnvironment, Node, Element);
      --v16;
    }
    while (v16);
  }
  RootNode = C3DSceneGetRootNode(Scene);
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 3221225472;
  v29[2] = ___ZN3C3D13AuthoringPass7executeERKNS_10RenderArgsE_block_invoke;
  v29[3] = &__block_descriptor_40_e20_q16__0____C3DNode__8l;
  v29[4] = AuthoringEnvironment;
  C3DNodeApplyHierarchy(RootNode, (uint64_t)v29);
  C3DAuthoringEnvironmentDrawZbufferDependant((uint64_t)AuthoringEnvironment);
  C3DAuthoringEnvironmentDrawPending((uint64_t)AuthoringEnvironment);
  objc_msgSend((id)(*a2)->var24[1], "setDepthStencilState:", C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*(_QWORD *)(a1 + 5376) + 64));
  C3DAuthoringEnvironmentDrawZbufferIndependant((uint64_t)AuthoringEnvironment, v22);
  C3DAuthoringEnvironmentDrawPending((uint64_t)AuthoringEnvironment);
  RenderContext = C3DEngineContextGetRenderContext(*(_QWORD *)(a1 + 16));
  v24 = C3DRasterizerStatesDefault();
  v25 = -[SCNMTLRenderContext resourceManager](RenderContext);
  v26 = -[SCNMTLRenderContext reverseZ](RenderContext);
  objc_msgSend((id)(*a2)->var24[1], "setDepthStencilState:", -[SCNMTLResourceManager renderResourceForRasterizerState:reverseZ:](v25, v24, v26));
  -[SCNMTLRenderContext setRasterizerStates:](RenderContext, v24);
  if (AuthoringEnvironment && (objc_msgSend(AuthoringEnvironment, "authoringDisplayMask") & 0x200) != 0)
    C3D::AuthoringPass::drawReflectionProbes(a1, (uint64_t *)a2);
  if ((-[SCNMTLRenderContext features](RenderContext) & 0x1000) != 0)
  {
    v27 = *a2;
    if ((*a2)->var4 != 1)
    {
      v27->var4 = 1;
      v27->var8 = 1;
    }
  }
  C3D::DrawNodesPass::execute((uint64_t *)a1, (uint64_t)a2);
  C3DAuthoringEnvironmentEndFrame((uint64_t)AuthoringEnvironment);
  return objc_msgSend((id)(*a2)->var24[1], "popDebugGroup");
}

uint64_t ___ZN3C3D13AuthoringPass7executeERKNS_10RenderArgsE_block_invoke(uint64_t a1, float32x4_t *a2)
{
  if (C3DNodeIsHiddenOrTransparent((uint64_t)a2))
    return 1;
  C3DAuthoringEnvironmentAppendDebugNodeAttributes(*(_QWORD *)(a1 + 32), a2);
  return 0;
}

uint64_t C3D::AuthoringPass::drawReflectionProbes(uint64_t a1, uint64_t *a2)
{
  uint64_t *RenderContext;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  __int16 v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;

  RenderContext = (uint64_t *)C3DEngineContextGetRenderContext(*(_QWORD *)(a1 + 16));
  result = -[SCNMTLRenderContext _clusterInfo]((uint64_t)RenderContext);
  v6 = *(_QWORD *)(result + 104);
  v7 = HIDWORD(v6);
  if (HIDWORD(v6))
  {
    v8 = result;
    v17 = *(_QWORD *)(result + 104);
    result = -[SCNMTLRenderContext _reflectionProbeArrayTexture]((uint64_t)RenderContext);
    if (result)
    {
      v9 = (void *)result;
      v10 = -[SCNMTLRenderContext features]((uint64_t)RenderContext);
      v11 = v10;
      v12 = *a2;
      if (!*(_BYTE *)(*a2 + 73) && *(_QWORD *)(v12 + 16) != 2)
      {
        *(_QWORD *)(v12 + 16) = 2;
        *(_BYTE *)(v12 + 41) = 1;
      }
      if ((v10 & 0x1000) != 0 && *(_QWORD *)(v12 + 32) != 1)
      {
        *(_QWORD *)(v12 + 32) = 1;
        *(_BYTE *)(v12 + 43) = 1;
      }
      v13 = objc_msgSend((id)C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*(_QWORD *)(a1 + 5376) + 32), "state");
      if (*(_QWORD *)(v12 + 3376) != v13)
      {
        *(_QWORD *)(v12 + 3376) = v13;
        objc_msgSend(*(id *)(v12 + 3392), "setRenderPipelineState:", v13);
      }
      SCNMTLRenderCommandEncoder::setFragmentTexture(*a2, v9, 0);
      -[SCNMTLRenderContext _setSceneBufferAtVertexIndex:fragmentIndex:](RenderContext, 0, -1);
      SCNMTLRenderCommandEncoder::setVertexBuffer(*a2, *(_QWORD *)(v8 + 120), *(_QWORD *)(v8 + 128) + ((unint64_t)v17 << 8), 1);
      v14 = C3D::SmartPtr<SCNMTLMesh *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLMesh *(*(_QWORD *)(a1 + 5376) + 40);
      -[SCNMTLRenderContext _setMeshBuffers:]((uint64_t)RenderContext, v14);
      v15 = C3D::SmartPtr<SCNMTLMesh *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLMesh *(*(_QWORD *)(a1 + 5376) + 48);
      result = -[SCNMTLRenderContext _drawMeshElement:instanceCount:]((uint64_t)RenderContext, v15, v7);
      if ((v11 & 0x1000) != 0)
      {
        v16 = *a2;
        if (*(_QWORD *)(*a2 + 32))
        {
          *(_QWORD *)(v16 + 32) = 0;
          *(_BYTE *)(v16 + 43) = 1;
        }
      }
    }
  }
  return result;
}

uint64_t C3D::SmartPtr<SCNMTLMesh *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLMesh *(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!*(_QWORD *)a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3D::SmartPtr<SCNMTLMesh *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLMesh *(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)a1;
}

uint64_t C3D::AuthoringPass::setColorInput(C3D::AuthoringPass *this, const C3D::PassIODescriptor *a2)
{
  C3D::PassDescriptor *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t RenderContext;
  uint64_t result;
  char *v11;
  unsigned int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v4 = (C3D::AuthoringPass *)((char *)this + 32);
  v5 = C3D::PassDescriptor::inputAtIndex((C3D::AuthoringPass *)((char *)this + 32), 0);
  v6 = C3D::PassDescriptor::inputAtIndex(v4, 1u);
  v7 = C3D::PassDescriptor::outputAtIndex(v4, 0);
  v8 = C3D::PassDescriptor::outputAtIndex(v4, 1u);
  RenderContext = C3DEngineContextGetRenderContext(*((_QWORD *)this + 2));
  result = -[SCNMTLRenderContext sampleCount](RenderContext);
  if (result < 2)
  {
    *(_BYTE *)(v7 + 31) = 0;
    *(_BYTE *)(v7 + 24) = 2;
    *(_BYTE *)(v6 + 31) = 0;
    *(_BYTE *)(v6 + 24) = 2;
  }
  else
  {
    v11 = (char *)this + 5384;
    v12 = *((unsigned __int8 *)a2 + 31);
    *(_BYTE *)(v7 + 31) = -[SCNMTLRenderContext sampleCount](RenderContext);
    *(_BYTE *)(v7 + 24) = 4;
    result = -[SCNMTLRenderContext sampleCount](RenderContext);
    *(_BYTE *)(v6 + 31) = result;
    *(_BYTE *)(v6 + 24) = 4;
    if (!*v11 && v12 <= 1)
    {
      v13 = *((_OWORD *)a2 + 1);
      v14 = *((_OWORD *)a2 + 2);
      v15 = *((_OWORD *)a2 + 3);
      *(_OWORD *)(v5 + 64) = *((_OWORD *)a2 + 4);
      v16 = *(_OWORD *)a2;
      *(_OWORD *)(v5 + 32) = v14;
      *(_OWORD *)(v5 + 48) = v15;
      *(_OWORD *)v5 = v16;
      *(_OWORD *)(v5 + 16) = v13;
      *(_WORD *)(v5 + 66) &= ~0x80u;
      *(_WORD *)(v7 + 66) &= 0xFFFCu;
      v11[1] = 1;
    }
  }
  if ((*(_WORD *)(v5 + 66) & 0x80) != 0)
  {
    *(_BYTE *)(v5 + 31) = *(_BYTE *)(v7 + 31);
    *(_BYTE *)(v5 + 24) = *(_BYTE *)(v7 + 24);
  }
  *(_BYTE *)(v8 + 31) = *(_BYTE *)(v6 + 31);
  *(_BYTE *)(v8 + 24) = *(_BYTE *)(v6 + 24);
  return result;
}

uint64_t C3D::AuthoringPass::setMainScenePass(uint64_t this, C3D::ScenePass *a2)
{
  *(_QWORD *)(this + 5360) = a2;
  return this;
}

uint64_t ___ZZN3C3D31AdaptCullingContextForAuthoringEP18__C3DEngineContextRKNS_13DrawNodesPass10ParametersER19__C3DCullingContexthENK3__0cvU13block_pointerF18C3DNodeApplyStatusP9__C3DNodeEEv_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = a2;
  if (C3DNodeGetGeometry(a2))
    C3D::Array<char const*,0u,C3D::StackAllocator>::push_back<char const*&>(*(_DWORD **)(a1 + 32), &v4);
  return 0;
}

uint64_t __copy_helper_block_e8_32c127_ZTSKZN3C3D31AdaptCullingContextForAuthoringEP18__C3DEngineContextRKNS_13DrawNodesPass10ParametersER19__C3DCullingContexthE3__0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  return result;
}

void C3D::AuthoringPassResource::~AuthoringPassResource(C3D::AuthoringPassResource *this)
{
  void *v2;
  const void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  *(_QWORD *)this = &off_1EA599E78;
  v2 = (void *)*((_QWORD *)this + 8);
  if (v2)

  v3 = (const void *)*((_QWORD *)this + 7);
  if (v3)
    CFRelease(v3);
  v4 = (void *)*((_QWORD *)this + 6);
  if (v4)

  v5 = (void *)*((_QWORD *)this + 5);
  if (v5)

  v6 = (void *)*((_QWORD *)this + 4);
  if (v6)

  v7 = (void *)*((_QWORD *)this + 3);
  if (v7)

  v8 = (void *)*((_QWORD *)this + 2);
  if (v8)

}

{
  void *v2;
  const void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  *(_QWORD *)this = &off_1EA599E78;
  v2 = (void *)*((_QWORD *)this + 8);
  if (v2)

  v3 = (const void *)*((_QWORD *)this + 7);
  if (v3)
    CFRelease(v3);
  v4 = (void *)*((_QWORD *)this + 6);
  if (v4)

  v5 = (void *)*((_QWORD *)this + 5);
  if (v5)

  v6 = (void *)*((_QWORD *)this + 4);
  if (v6)

  v7 = (void *)*((_QWORD *)this + 3);
  if (v7)

  v8 = (void *)*((_QWORD *)this + 2);
  if (v8)

  JUMPOUT(0x1DF0D41C0);
}

void __DeclareSymbolToIndexMapping(void *key, uint64_t a2, CFMutableDictionaryRef theDict)
{
  CFDictionarySetValue(theDict, key, *(const void **)(a2 + 8));
}

void C3DShaderFeedStandardUniformsToIndex(void *context)
{
  if (C3DShaderGetStandardUniforms_onceToken != -1)
    dispatch_once(&C3DShaderGetStandardUniforms_onceToken, &__block_literal_global_146);
  CFDictionaryApplyFunction((CFDictionaryRef)C3DShaderGetStandardUniforms_s_standardUniforms, (CFDictionaryApplierFunction)__DeclareSymbolToIndexMapping, context);
}

uint64_t OUTLINED_FUNCTION_0_9(uint64_t a1, uint64_t a2)
{
  return -[SCNMTLMesh elements](a2);
}

void OUTLINED_FUNCTION_1_5(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;

  _os_log_error_impl(a1, v4, OS_LOG_TYPE_ERROR, a4, v5, 8u);
}

_QWORD *btCollisionAlgorithm::btCollisionAlgorithm(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *result = off_1EA596E80;
  result[1] = v2;
  return result;
}

void btDbvt::btDbvt(btDbvt *this)
{
  *((_BYTE *)this + 56) = 1;
  *((_QWORD *)this + 6) = 0;
  *(_QWORD *)((char *)this + 36) = 0;
  *((_BYTE *)this + 88) = 1;
  *((_QWORD *)this + 10) = 0;
  *(_QWORD *)((char *)this + 68) = 0;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0xFFFFFFFFLL;
  *((_DWORD *)this + 6) = 0;
}

void btDbvt::clear(btDbvt *this)
{
  void **v2;

  if (*(_QWORD *)this)
    recursedeletenode((uint64_t)this, *(_QWORD *)this);
  btAlignedFreeInternal(*((void ***)this + 1));
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = -1;
  v2 = (void **)*((_QWORD *)this + 6);
  if (v2 && *((_BYTE *)this + 56))
    btAlignedFreeInternal(v2);
  *((_BYTE *)this + 56) = 1;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 9) = 0;
  *((_DWORD *)this + 10) = 0;
  *((_DWORD *)this + 6) = 0;
}

void btDbvt::~btDbvt(btDbvt *this)
{
  btDbvt::clear(this);
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)this + 64);
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)this + 32);
}

void recursedeletenode(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 48))
  {
    recursedeletenode(a1, *(_QWORD *)(a2 + 40));
    recursedeletenode(a1, *(_QWORD *)(a2 + 48));
  }
  if (*(_QWORD *)a1 == a2)
    *(_QWORD *)a1 = 0;
  btAlignedFreeInternal(*(void ***)(a1 + 8));
  *(_QWORD *)(a1 + 8) = a2;
}

uint64_t btDbvt::optimizeIncremental(uint64_t this, int a2)
{
  int v2;
  uint64_t v3;
  BOOL v4;
  void **v5;
  uint64_t v6;
  char v7;
  void **v8;
  void **v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  __int128 v13;
  __int128 v14;
  void **v15;

  v2 = a2;
  v3 = this;
  if (a2 < 0)
    v2 = *(_DWORD *)(this + 20);
  if (*(_QWORD *)this)
    v4 = v2 < 1;
  else
    v4 = 1;
  if (!v4)
  {
    do
    {
      v5 = *(void ***)v3;
      v6 = *(_QWORD *)v3 + 48;
      if (*(_QWORD *)v6)
      {
        v7 = 0;
        do
        {
          v8 = (void **)v5[4];
          if (v8 <= v5)
          {
            v8 = v5;
          }
          else
          {
            v9 = (void **)v8[6];
            v10 = v8[4];
            v11 = (_QWORD *)v3;
            if (v10)
              v11 = &v10[(v10[6] == (_QWORD)v8) + 5];
            v12 = v8[(v9 != v5) + 5];
            *v11 = v5;
            v12[4] = v5;
            v8[4] = v5;
            v5[4] = v10;
            v8[5] = v5[5];
            v8[6] = *(void **)v6;
            *((_QWORD *)v5[5] + 4) = v8;
            *(_QWORD *)(*(_QWORD *)v6 + 32) = v8;
            v5[(v9 == v5) + 5] = v8;
            v5[(v9 != v5) + 5] = v12;
            v13 = *(_OWORD *)v8;
            v14 = *((_OWORD *)v8 + 1);
            *(_OWORD *)v8 = *(_OWORD *)v5;
            *((_OWORD *)v8 + 1) = *((_OWORD *)v5 + 1);
            *(_OWORD *)v5 = v13;
            *((_OWORD *)v5 + 1) = v14;
          }
          v15 = &v8[(*(_DWORD *)(v3 + 24) >> v7) & 1];
          v7 = (v7 + 1) & 0x1F;
          v5 = (void **)v15[5];
          v6 = (uint64_t)(v5 + 6);
        }
        while (v5[6]);
      }
      this = btDbvt::update((void ***)v3, (float32x4_t *)v5, -1);
      ++*(_DWORD *)(v3 + 24);
      --v2;
    }
    while (v2);
  }
  return this;
}

uint64_t btDbvt::update(void ***a1, float32x4_t *a2, int a3)
{
  void **v6;

  v6 = removeleaf(a1, (uint64_t)a2);
  if (v6)
  {
    if (a3 < 0)
    {
      v6 = *a1;
    }
    else
    {
      for (; a3; --a3)
      {
        if (!v6[4])
          break;
        v6 = (void **)v6[4];
      }
    }
  }
  return insertleaf((uint64_t)a1, (uint64_t)v6, a2);
}

uint64_t btDbvt::insert(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    *(_QWORD *)(a1 + 8) = 0;
  }
  else
  {
    v6 = btAlignedAllocInternal(64, 16);
    *(_OWORD *)v6 = 0u;
    *(_OWORD *)(v6 + 16) = 0u;
    *(_OWORD *)(v6 + 32) = 0u;
    *(_OWORD *)(v6 + 48) = 0u;
  }
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 40) = a3;
  *(_QWORD *)(v6 + 48) = 0;
  *(_OWORD *)v6 = *a2;
  *(_OWORD *)(v6 + 16) = a2[1];
  insertleaf(a1, *(_QWORD *)a1, (float32x4_t *)v6);
  ++*(_DWORD *)(a1 + 20);
  return v6;
}

uint64_t insertleaf(uint64_t result, uint64_t a2, float32x4_t *a3)
{
  _QWORD *v4;
  uint64_t v5;
  float32x4_t *v6;
  float32x4_t v7;
  int8x16_t v8;
  int32x2_t v9;
  int8x16_t v10;
  int32x2_t v11;
  uint64_t v12;
  unint64_t v13;
  float v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float *v21;
  float v22;
  float *v23;
  float v24;

  v4 = (_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v5 = a2;
    v6 = *(float32x4_t **)(a2 + 48);
    if (v6)
    {
      v7 = vaddq_f32(*a3, a3[1]);
      do
      {
        v8 = (int8x16_t)vsubq_f32(v7, vaddq_f32(*(float32x4_t *)*(_QWORD *)(v5 + 40), *(float32x4_t *)(*(_QWORD *)(v5 + 40) + 16)));
        v9 = (int32x2_t)vabs_f32(*(float32x2_t *)v8.i8);
        v10 = (int8x16_t)vsubq_f32(v7, vaddq_f32(*v6, v6[1]));
        v11 = (int32x2_t)vabs_f32(*(float32x2_t *)v10.i8);
        *(float32x2_t *)v8.i8 = vadd_f32(vabs_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL))), vadd_f32((float32x2_t)vzip1_s32(v9, v11), (float32x2_t)vzip2_s32(v9, v11)));
        v5 = *(_QWORD *)(v5
                       + 40
                       + 8
                       * (*(_QWORD *)&vmvn_s8((int8x8_t)vcgt_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v8.i8, 1), *(float32x2_t *)v8.i8)) & 1));
        v6 = *(float32x4_t **)(v5 + 48);
      }
      while (v6);
    }
    v12 = *(_QWORD *)(v5 + 32);
    result = *(_QWORD *)(result + 8);
    if (result)
    {
      v4[1] = 0;
    }
    else
    {
      result = btAlignedAllocInternal(64, 16);
      *(_OWORD *)result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_OWORD *)(result + 32) = 0u;
      *(_OWORD *)(result + 48) = 0u;
    }
    v13 = 0;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = 0;
    *(_QWORD *)(result + 32) = v12;
    do
    {
      v14 = a3->f32[v13 / 4];
      v15 = v5 + v13;
      if (v14 >= *(float *)(v5 + v13))
        v14 = *(float *)(v5 + v13);
      *(float *)(result + v13) = v14;
      v16 = a3[1].f32[v13 / 4];
      if (v16 <= *(float *)(v15 + 16))
        v16 = *(float *)(v15 + 16);
      *(float *)(result + v13 + 16) = v16;
      v13 += 4;
    }
    while (v13 != 12);
    if (v12)
    {
      *(_QWORD *)(v12 + 8 * (*(_QWORD *)(*(_QWORD *)(v5 + 32) + 48) == v5) + 40) = result;
      *(_QWORD *)(result + 40) = v5;
      *(_QWORD *)(v5 + 32) = result;
      *(_QWORD *)(result + 48) = a3;
      a3[2].i64[0] = result;
      do
      {
        v17 = v12;
        if (*(float *)v12 <= *(float *)result
          && *(float *)(v12 + 4) <= *(float *)(result + 4)
          && *(float *)(v12 + 8) <= *(float *)(result + 8)
          && *(float *)(v12 + 16) >= *(float *)(result + 16)
          && *(float *)(v12 + 20) >= *(float *)(result + 20)
          && *(float *)(v12 + 24) >= *(float *)(result + 24))
        {
          break;
        }
        v18 = 0;
        v19 = *(_QWORD *)(v12 + 40) + 16;
        v20 = *(_QWORD *)(v12 + 48) + 16;
        do
        {
          v21 = (float *)(v19 + v18);
          v22 = *(float *)(v19 + v18 - 16);
          v23 = (float *)(v20 + v18);
          if (v22 >= *(float *)(v20 + v18 - 16))
            v22 = *(float *)(v20 + v18 - 16);
          *(float *)(v12 + v18) = v22;
          v24 = *v21;
          if (*v21 <= *v23)
            v24 = *v23;
          *(float *)(v12 + v18 + 16) = v24;
          v18 += 4;
        }
        while (v18 != 12);
        v12 = *(_QWORD *)(v12 + 32);
        result = v17;
      }
      while (v12);
    }
    else
    {
      *(_QWORD *)(result + 40) = v5;
      *(_QWORD *)(v5 + 32) = result;
      *(_QWORD *)(result + 48) = a3;
      a3[2].i64[0] = result;
      *v4 = result;
    }
  }
  else
  {
    *(_QWORD *)result = a3;
    a3[2].i64[0] = 0;
  }
  return result;
}

void **removeleaf(void ***a1, uint64_t a2)
{
  uint64_t v3;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  float *v11;
  float v12;
  float *v13;
  float v14;

  if (*a1 == (void **)a2)
  {
    v4 = 0;
    *a1 = 0;
  }
  else
  {
    v3 = *(_QWORD *)(a2 + 32);
    v4 = *(__int128 **)(v3 + 32);
    v5 = *(_QWORD *)(v3 + 8 * (*(_QWORD *)(v3 + 48) != a2) + 40);
    if (v4)
    {
      *((_QWORD *)v4 + (*((_QWORD *)v4 + 6) == v3) + 5) = v5;
      *(_QWORD *)(v5 + 32) = v4;
      btAlignedFreeInternal(a1[1]);
      a1[1] = (void **)v3;
      while (1)
      {
        v6 = 0;
        v8 = *v4;
        v7 = v4[1];
        v9 = *((_QWORD *)v4 + 5) + 16;
        v10 = *((_QWORD *)v4 + 6) + 16;
        do
        {
          v11 = (float *)(v9 + v6);
          v12 = *(float *)(v9 + v6 - 16);
          v13 = (float *)(v10 + v6);
          if (v12 >= *(float *)(v10 + v6 - 16))
            v12 = *(float *)(v10 + v6 - 16);
          *(float *)((char *)v4 + v6) = v12;
          v14 = *v11;
          if (*v11 <= *v13)
            v14 = *v13;
          *(float *)((char *)v4 + v6 + 16) = v14;
          v6 += 4;
        }
        while (v6 != 12);
        if (*(float *)&v8 == *(float *)v4
          && *((float *)&v8 + 1) == *((float *)v4 + 1)
          && *((float *)&v8 + 2) == *((float *)v4 + 2)
          && *(float *)&v7 == *((float *)v4 + 4)
          && *((float *)&v7 + 1) == *((float *)v4 + 5)
          && *((float *)&v7 + 2) == *((float *)v4 + 6))
        {
          break;
        }
        v4 = (__int128 *)*((_QWORD *)v4 + 4);
        if (!v4)
          return *a1;
      }
    }
    else
    {
      *a1 = (void **)v5;
      *(_QWORD *)(v5 + 32) = 0;
      btAlignedFreeInternal(a1[1]);
      a1[1] = (void **)v3;
      return *a1;
    }
  }
  return (void **)v4;
}

uint64_t btDbvt::update(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  void **v6;
  int v7;

  v6 = removeleaf((void ***)a1, a2);
  if (v6)
  {
    v7 = *(_DWORD *)(a1 + 16);
    if (v7 < 0)
    {
      v6 = *(void ***)a1;
    }
    else
    {
      for (; v7; --v7)
      {
        if (!v6[4])
          break;
        v6 = (void **)v6[4];
      }
    }
  }
  *(_OWORD *)a2 = *a3;
  *(_OWORD *)(a2 + 16) = a3[1];
  return insertleaf(a1, (uint64_t)v6, (float32x4_t *)a2);
}

uint64_t btDbvt::update(uint64_t a1, float *a2, float32x4_t *a3, uint64_t a4, int32x2_t a5, double a6, double a7, float32x4_t a8)
{
  float32x4_t v8;
  float32x4_t v9;
  int8x16_t v10;
  float v11;
  int8x16_t v12;
  float v13;
  float v14;
  uint64_t v15;
  float v16;
  uint64_t v17;

  if (*a2 <= a3->f32[0]
    && a2[1] <= a3->f32[1]
    && a2[2] <= a3->f32[2]
    && a2[4] >= a3[1].f32[0]
    && a2[5] >= a3[1].f32[1]
    && a2[6] >= a3[1].f32[2])
  {
    return 0;
  }
  v8 = (float32x4_t)vdupq_lane_s32(a5, 0);
  v8.i32[3] = 0;
  v9 = a3[1];
  v10 = (int8x16_t)vsubq_f32(*a3, v8);
  v12 = (int8x16_t)vaddq_f32(v8, v9);
  *a3 = (float32x4_t)v10;
  a3[1] = (float32x4_t)v12;
  v9.i32[0] = *(_DWORD *)a4;
  a8.i32[0] = 0;
  v11 = *(float *)vbslq_s8((int8x16_t)vcgtq_f32(v9, a8), v12, v10).i32;
  v12.i32[0] = v12.i32[2];
  a3[*(float *)a4 > 0.0].f32[0] = *(float *)a4 + v11;
  v13 = *(float *)(a4 + 4);
  if (v13 <= 0.0)
    v14 = *(float *)&v10.i32[1];
  else
    v14 = *(float *)&v12.i32[1];
  v15 = 1;
  if (v13 > 0.0)
    v15 = 5;
  a3->f32[v15] = v14 + v13;
  v16 = *(float *)(a4 + 8);
  if (v16 <= 0.0)
    v12.i32[0] = v10.i32[2];
  v17 = 2;
  if (v16 > 0.0)
    v17 = 6;
  a3->f32[v17] = *(float *)v12.i32 + v16;
  btDbvt::update(a1, (uint64_t)a2, a3);
  return 1;
}

void btDbvt::remove(uint64_t a1, uint64_t a2)
{
  removeleaf((void ***)a1, a2);
  btAlignedFreeInternal(*(void ***)(a1 + 8));
  *(_QWORD *)(a1 + 8) = a2;
  --*(_DWORD *)(a1 + 20);
}

uint64_t btDbvt::ICollide::Process(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
}

uint64_t btDbvt::ICollide::Descent()
{
  return 1;
}

uint64_t btDbvt::ICollide::AllLeaves()
{
  return 1;
}

uint64_t btDbvtBroadphase::btDbvtBroadphase(uint64_t a1, btHashedOverlappingPairCache *a2)
{
  _QWORD *v4;
  uint64_t i;

  *(_QWORD *)a1 = &off_1EA5964F8;
  v4 = (_QWORD *)(a1 + 200);
  for (i = 8; i != 200; i += 96)
    btDbvt::btDbvt((btDbvt *)(a1 + i));
  *(_WORD *)(a1 + 285) = 256;
  *(_BYTE *)(a1 + 284) = a2 == 0;
  *(_DWORD *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 236) = xmmword_1DD02C810;
  *(_OWORD *)(a1 + 252) = xmmword_1DD009B50;
  *(_DWORD *)(a1 + 268) = 0;
  if (!a2)
  {
    a2 = (btHashedOverlappingPairCache *)btAlignedAllocInternal(128, 16);
    btHashedOverlappingPairCache::btHashedOverlappingPairCache(a2);
  }
  *(_QWORD *)(a1 + 224) = a2;
  *(_DWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  v4[1] = 0;
  v4[2] = 0;
  *v4 = 0;
  return a1;
}

void btDbvtBroadphase::~btDbvtBroadphase(btDbvtBroadphase *this)
{
  uint64_t i;

  *(_QWORD *)this = &off_1EA5964F8;
  if (*((_BYTE *)this + 284))
  {
    (***((void (****)(_QWORD))this + 28))(*((_QWORD *)this + 28));
    btAlignedFreeInternal(*((void ***)this + 28));
  }
  for (i = 104; i != -88; i -= 96)
    btDbvt::~btDbvt((btDbvtBroadphase *)((char *)this + i));
}

{
  btDbvtBroadphase::~btDbvtBroadphase(this);
  JUMPOUT(0x1DF0D41C0);
}

uint64_t btDbvtBroadphase::createProxy(uint64_t a1, _OWORD *a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15;
  __int128 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[3];
  __int128 v23[2];

  v15 = btAlignedAllocInternal(112, 16);
  *(_QWORD *)v15 = a5;
  *(_QWORD *)(v15 + 8) = a6;
  *(_QWORD *)(v15 + 16) = a7;
  *(_QWORD *)(v15 + 24) = a8;
  *(_OWORD *)(v15 + 48) = *a2;
  *(_OWORD *)(v15 + 64) = *a3;
  *(_QWORD *)(v15 + 32) = 0;
  *(_QWORD *)(v15 + 88) = 0;
  *(_QWORD *)(v15 + 96) = 0;
  v16 = *a3;
  v23[0] = *a2;
  v23[1] = v16;
  *(_DWORD *)(v15 + 104) = *(_DWORD *)(a1 + 236);
  v17 = *(_DWORD *)(a1 + 280) + 1;
  *(_DWORD *)(a1 + 280) = v17;
  *(_DWORD *)(v15 + 40) = v17;
  *(_QWORD *)(v15 + 80) = btDbvt::insert(a1 + 8, v23, v15);
  v18 = a1 + 8 * *(int *)(a1 + 236);
  *(_QWORD *)(v15 + 88) = 0;
  v20 = *(_QWORD *)(v18 + 200);
  v19 = v18 + 200;
  *(_QWORD *)(v15 + 96) = v20;
  if (*(_QWORD *)v19)
    *(_QWORD *)(*(_QWORD *)v19 + 88) = v15;
  *(_QWORD *)v19 = v15;
  if (!*(_BYTE *)(a1 + 285))
  {
    v22[0] = &off_1EA596A00;
    v22[1] = a1;
    v22[2] = v15;
    btDbvt::collideTV(a1 + 8, *(void **)(a1 + 8), v23, (uint64_t)v22);
    btDbvt::collideTV(a1 + 104, *(void **)(a1 + 104), v23, (uint64_t)v22);
  }
  return v15;
}

void btDbvt::collideTV(uint64_t a1, void *a2, __int128 *a3, uint64_t a4)
{
  void **v6;
  float v7;
  float v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float *v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  void **v17;
  void **v18;
  void *v19;
  uint64_t v20;
  void **v21;
  void **v22;
  void *v23;
  __int128 v24;
  __int128 v25;

  if (a2)
  {
    v24 = a3[1];
    v25 = *a3;
    v6 = (void **)btAlignedAllocInternal(512, 16);
    v8 = *(float *)&v24;
    v7 = *(float *)&v25;
    v9 = v6;
    *v6 = a2;
    v10 = 1;
    v11 = 64;
    while (1)
    {
      v12 = (v10 - 1);
      v13 = (float *)v9[v12];
      if (*v13 > v8
        || v13[4] < v7
        || v13[1] > *((float *)&v24 + 1)
        || v13[5] < *((float *)&v25 + 1)
        || v13[2] > *((float *)&v24 + 2)
        || v13[6] < *((float *)&v25 + 2))
      {
        goto LABEL_40;
      }
      if (*((_QWORD *)v13 + 6))
        break;
      (*(void (**)(uint64_t, void *))(*(_QWORD *)a4 + 24))(a4, v9[v12]);
      v8 = *(float *)&v24;
      v7 = *(float *)&v25;
LABEL_40:
      v10 = v12;
      if ((int)v12 <= 0)
      {
        btAlignedFreeInternal(v9);
        return;
      }
    }
    if ((_DWORD)v12 == (_DWORD)v11
      && (!(_DWORD)v11 ? (v14 = 1) : (v14 = (2 * v11)), (int)v11 < (int)v14))
    {
      if ((_DWORD)v14)
        v15 = (void **)btAlignedAllocInternal(8 * v14, 16);
      else
        v15 = 0;
      if (v10 >= 2)
      {
        v16 = v11;
        v17 = v15;
        v18 = v9;
        do
        {
          v19 = *v18++;
          *v17++ = v19;
          --v16;
        }
        while (v16);
      }
      btAlignedFreeInternal(v9);
      v8 = *(float *)&v24;
      v7 = *(float *)&v25;
    }
    else
    {
      v14 = v11;
      v15 = v9;
    }
    v15[v12] = (void *)*((_QWORD *)v13 + 5);
    if ((_DWORD)v10 == (_DWORD)v14)
    {
      if ((_DWORD)v10)
        v11 = (2 * v10);
      else
        v11 = 1;
      if ((int)v10 < (int)v11)
      {
        if ((_DWORD)v11)
          v9 = (void **)btAlignedAllocInternal(8 * (int)v11, 16);
        else
          v9 = 0;
        if ((int)v10 >= 1)
        {
          v20 = v10;
          v21 = v9;
          v22 = v15;
          do
          {
            v23 = *v22++;
            *v21++ = v23;
            --v20;
          }
          while (v20);
        }
        btAlignedFreeInternal(v15);
        v8 = *(float *)&v24;
        v7 = *(float *)&v25;
        goto LABEL_39;
      }
      v11 = v10;
    }
    else
    {
      v11 = v14;
    }
    v9 = v15;
LABEL_39:
    v9[(int)v10] = (void *)*((_QWORD *)v13 + 6);
    v12 = (v10 + 1);
    goto LABEL_40;
  }
}

void btDbvtBroadphase::destroyProxy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *(_DWORD *)(a2 + 104);
  v7 = *(_QWORD *)(a2 + 80);
  if (v6 == 2)
    v8 = a1 + 104;
  else
    v8 = a1 + 8;
  btDbvt::remove(v8, v7);
  v9 = (_QWORD *)(a1 + 8 * *(int *)(a2 + 104) + 200);
  v10 = *(_QWORD *)(a2 + 88);
  if (v10)
    v9 = (_QWORD *)(v10 + 96);
  *v9 = *(_QWORD *)(a2 + 96);
  v11 = *(_QWORD *)(a2 + 96);
  if (v11)
    *(_QWORD *)(v11 + 88) = *(_QWORD *)(a2 + 88);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 224) + 32))(*(_QWORD *)(a1 + 224), a2, a3);
  btAlignedFreeInternal((void **)a2);
  *(_BYTE *)(a1 + 286) = 1;
}

__n128 btDbvtBroadphase::getAabb(uint64_t a1, uint64_t a2, _OWORD *a3, __n128 *a4)
{
  __n128 result;

  *a3 = *(_OWORD *)(a2 + 48);
  result = *(__n128 *)(a2 + 64);
  *a4 = result;
  return result;
}

void btDbvtBroadphase::rayTest(uint64_t a1, float *a2, uint64_t a3, uint64_t a4, float32x4_t *a5, float32x4_t *a6)
{
  float *v12;
  unsigned int *v13;
  _QWORD v14[2];

  v14[0] = &off_1EA596C10;
  v14[1] = a4;
  v12 = (float *)(a4 + 16);
  v13 = (unsigned int *)(a4 + 32);
  btDbvt::rayTestInternal(a1 + 8, *(_QWORD *)(a1 + 8), a2, *(float *)(a4 + 44), a3, (float *)(a4 + 16), (unsigned int *)(a4 + 32), a5, a6, (uint64_t)v14);
  btDbvt::rayTestInternal(a1 + 104, *(_QWORD *)(a1 + 104), a2, *(float *)(a4 + 44), a3, v12, v13, a5, a6, (uint64_t)v14);
}

void btDbvt::rayTestInternal(uint64_t a1, uint64_t a2, float *a3, float a4, uint64_t a5, float *a6, unsigned int *a7, float32x4_t *a8, float32x4_t *a9, uint64_t a10)
{
  uint64_t v17;
  float32x4_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float32x4_t *v29;
  float32x4_t v30;
  float32x4_t v31;
  uint64_t v32;
  uint64_t v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  uint64_t v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  float32x4_t *v55;
  float32x4_t *v56;
  uint64_t v57;
  void **v58;
  uint64_t v59;
  float32x4_t *v60;
  float32x4_t *v61;
  _OWORD v62[2];
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v17 = *(int *)(a1 + 68);
    if ((int)v17 <= 127)
    {
      if (*(int *)(a1 + 72) <= 127)
      {
        v18 = a8;
        v19 = btAlignedAllocInternal(1024, 16);
        v20 = v19;
        v21 = *(unsigned int *)(a1 + 68);
        if ((int)v21 >= 1)
        {
          v22 = 0;
          v23 = 8 * v21;
          do
          {
            *(_QWORD *)(v19 + v22) = *(_QWORD *)(*(_QWORD *)(a1 + 80) + v22);
            v22 += 8;
          }
          while (v23 != v22);
        }
        v24 = *(void ***)(a1 + 80);
        a8 = v18;
        if (v24 && *(_BYTE *)(a1 + 88))
        {
          btAlignedFreeInternal(v24);
          a8 = v18;
        }
        *(_BYTE *)(a1 + 88) = 1;
        *(_QWORD *)(a1 + 80) = v20;
        *(_DWORD *)(a1 + 72) = 128;
      }
      do
        *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v17++) = 0;
      while ((_DWORD)v17 != 128);
    }
    *(_DWORD *)(a1 + 68) = 128;
    **(_QWORD **)(a1 + 80) = a2;
    v25 = 126;
    LODWORD(v26) = 1;
    v61 = a9;
    while (1)
    {
      v27 = (int)v26;
      v26 = (int)v26 - 1;
      v28 = *(_QWORD *)(a1 + 80);
      v29 = *(float32x4_t **)(v28 + 8 * v26);
      v30 = vsubq_f32(*v29, *a9);
      v30.i32[3] = 0;
      v31 = vsubq_f32(v29[1], *a8);
      v31.i32[3] = 0;
      v62[0] = v30;
      v62[1] = v31;
      v32 = *a7;
      v33 = a7[1];
      v34 = a3[1];
      v35 = a6[1];
      v36 = (float)(*(float *)&v62[v32] - *a3) * *a6;
      v37 = *a6 * (float)(*(float *)&v62[(1 - v32)] - *a3);
      v38 = (float)(*((float *)&v62[v33] + 1) - v34) * v35;
      v39 = v35 * (float)(*((float *)&v62[(1 - v33)] + 1) - v34);
      if (v36 > v39 || v38 > v37)
        goto LABEL_44;
      if (v38 > v36)
        v36 = v38;
      if (v39 < v37)
        v37 = v39;
      v41 = a7[2];
      v42 = a3[2];
      v43 = a6[2];
      v44 = (float)(*((float *)&v62[v41] + 2) - v42) * v43;
      v45 = v43 * (float)(*((float *)&v62[(1 - v41)] + 2) - v42);
      if (v36 > v45 || v44 > v37)
        goto LABEL_44;
      if (v44 <= v36)
        v44 = v36;
      v47 = v45 >= v37 ? v37 : v45;
      if (v44 >= a4 || v47 <= 0.0)
        goto LABEL_44;
      if (v29[3].i64[0])
      {
        if ((int)v26 > (int)v25)
        {
          v48 = *(int *)(a1 + 68);
          v49 = 2 * v48;
          if ((int)v48 < 2 * (int)v48)
          {
            if (*(_DWORD *)(a1 + 72) < v49)
            {
              v60 = a8;
              if ((_DWORD)v48)
              {
                v50 = btAlignedAllocInternal(16 * v48, 16);
                v51 = v50;
                v52 = *(unsigned int *)(a1 + 68);
                if ((int)v52 >= 1)
                {
                  v53 = 0;
                  v54 = 8 * v52;
                  do
                  {
                    *(_QWORD *)(v50 + v53) = *(_QWORD *)(*(_QWORD *)(a1 + 80) + v53);
                    v53 += 8;
                  }
                  while (v54 != v53);
                }
                a8 = v60;
              }
              else
              {
                v51 = 0;
              }
              v58 = *(void ***)(a1 + 80);
              if (v58 && *(_BYTE *)(a1 + 88))
              {
                v59 = v51;
                btAlignedFreeInternal(v58);
                v51 = v59;
                a8 = v60;
              }
              *(_BYTE *)(a1 + 88) = 1;
              *(_QWORD *)(a1 + 80) = v51;
              v49 = 2 * v48;
              *(_DWORD *)(a1 + 72) = 2 * v48;
            }
            do
              *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v48++) = 0;
            while (v49 != v48);
            v28 = *(_QWORD *)(a1 + 80);
          }
          *(_DWORD *)(a1 + 68) = v49;
          v25 = (v49 - 2);
          a9 = v61;
        }
        *(_QWORD *)(v28 + 8 * v26) = v29[2].i64[1];
        LODWORD(v26) = v27 + 1;
        *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v27) = v29[3].i64[0];
        if ((_DWORD)v27 == -1)
          return;
      }
      else
      {
        v55 = v29;
        v56 = a8;
        v57 = v25;
        (*(void (**)(uint64_t, float32x4_t *))(*(_QWORD *)a10 + 24))(a10, v55);
        v25 = v57;
        a8 = v56;
LABEL_44:
        if (!(_DWORD)v26)
          return;
      }
    }
  }
}

void btDbvtBroadphase::aabbTest(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  __int128 v5;
  __int128 v6[2];
  _QWORD v7[2];

  v7[0] = &off_1EA596DA0;
  v7[1] = a4;
  v5 = *a3;
  v6[0] = *a2;
  v6[1] = v5;
  btDbvt::collideTV(a1 + 8, *(void **)(a1 + 8), v6, (uint64_t)v7);
  btDbvt::collideTV(a1 + 104, *(void **)(a1 + 104), v6, (uint64_t)v7);
}

void btDbvtBroadphase::setAabb(uint64_t a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4, double a5, double a6, double a7, float32x4_t a8)
{
  float32x4_t v12;
  float32x4_t v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29[2];

  v12 = *a3;
  v13 = *a4;
  v29[0] = *a3;
  v29[1] = v13;
  if (*(_DWORD *)(a2 + 104) == 2)
  {
    btDbvt::remove(a1 + 104, *(_QWORD *)(a2 + 80));
    *(_QWORD *)(a2 + 80) = btDbvt::insert(a1 + 8, v29, a2);
LABEL_10:
    v15 = 1;
    goto LABEL_11;
  }
  ++*(_DWORD *)(a1 + 260);
  v14 = *(_QWORD *)(a2 + 80);
  if (*(float *)v14 > v13.f32[0]
    || *(float *)(v14 + 16) < v12.f32[0]
    || *(float *)(v14 + 4) > v13.f32[1]
    || (a8.i32[0] = *(_DWORD *)(v14 + 20), a8.f32[0] < v12.f32[1])
    || *(float *)(v14 + 8) > v13.f32[2]
    || *(float *)(v14 + 24) < v12.f32[2])
  {
    btDbvt::update(a1 + 8, v14, v29);
    ++*(_DWORD *)(a1 + 264);
    goto LABEL_10;
  }
  v23 = *(float32x4_t *)(a2 + 48);
  v24 = vsubq_f32(*a3, v23);
  v25 = vsubq_f32(*(float32x4_t *)(a2 + 64), v23);
  v25.i32[3] = 0;
  v26.i64[0] = 0x3F0000003F000000;
  v26.i64[1] = 0x3F0000003F000000;
  v27 = vmulq_n_f32(vmulq_f32(v25, v26), *(float *)(a1 + 232));
  v27.i32[3] = 0;
  v28 = v27;
  if (v24.f32[0] < 0.0)
    v28.f32[0] = -v27.f32[0];
  v26.i32[0] = v24.i32[1];
  if (v24.f32[1] < 0.0)
  {
    v26.f32[0] = -v27.f32[1];
    v28.f32[1] = -v27.f32[1];
  }
  if (v24.f32[2] < 0.0)
    v28.f32[2] = -v27.f32[2];
  v24.i32[0] = 1028443341;
  v15 = btDbvt::update(a1 + 8, (float *)v14, v29, (uint64_t)&v28, *(int32x2_t *)v24.f32, *(double *)v27.i64, *(double *)v26.i64, a8);
  if (v15)
    ++*(_DWORD *)(a1 + 264);
LABEL_11:
  v16 = (_QWORD *)(a1 + 8 * *(int *)(a2 + 104) + 200);
  v17 = *(_QWORD *)(a2 + 88);
  if (v17)
    v16 = (_QWORD *)(v17 + 96);
  *v16 = *(_QWORD *)(a2 + 96);
  v18 = *(_QWORD *)(a2 + 96);
  if (v18)
    *(_QWORD *)(v18 + 88) = *(_QWORD *)(a2 + 88);
  *(float32x4_t *)(a2 + 48) = *a3;
  *(float32x4_t *)(a2 + 64) = *a4;
  v19 = *(int *)(a1 + 236);
  *(_DWORD *)(a2 + 104) = v19;
  v20 = a1 + 8 * v19;
  *(_QWORD *)(a2 + 88) = 0;
  v22 = *(_QWORD *)(v20 + 200);
  v21 = v20 + 200;
  *(_QWORD *)(a2 + 96) = v22;
  if (*(_QWORD *)v21)
    *(_QWORD *)(*(_QWORD *)v21 + 88) = a2;
  *(_QWORD *)v21 = a2;
  if (v15)
  {
    *(_BYTE *)(a1 + 286) = 1;
    if (!*(_BYTE *)(a1 + 285))
    {
      v28.i64[0] = (uint64_t)&off_1EA596A00;
      v28.i64[1] = a1;
      btDbvt::collideTTpersistentStack(a1 + 104, *(_QWORD *)(a1 + 104), *(_QWORD *)(a2 + 80), (uint64_t)&v28);
      btDbvt::collideTTpersistentStack(a1 + 8, *(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 80), (uint64_t)&v28);
    }
  }
}

void btDbvt::collideTTpersistentStack(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void **v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const double *v42;
  float64x2_t v43;
  const double *v44;
  float64x2_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;

  if (a2 && a3)
  {
    v8 = *(int *)(a1 + 36);
    if ((int)v8 <= 127)
    {
      if (*(int *)(a1 + 40) <= 127)
      {
        v9 = btAlignedAllocInternal(2048, 16);
        v10 = v9;
        v11 = *(unsigned int *)(a1 + 36);
        if ((int)v11 >= 1)
        {
          v12 = 0;
          v13 = 16 * v11;
          do
          {
            *(_OWORD *)(v9 + v12) = *(_OWORD *)(*(_QWORD *)(a1 + 48) + v12);
            v12 += 16;
          }
          while (v13 != v12);
        }
        v14 = *(void ***)(a1 + 48);
        if (v14 && *(_BYTE *)(a1 + 56))
          btAlignedFreeInternal(v14);
        *(_BYTE *)(a1 + 56) = 1;
        *(_QWORD *)(a1 + 48) = v10;
        *(_DWORD *)(a1 + 40) = 128;
      }
      v15 = v8 + 1;
      while ((_DWORD)v15++ != 128)
        ;
    }
    *(_DWORD *)(a1 + 36) = 128;
    v17 = *(_QWORD **)(a1 + 48);
    *v17 = a2;
    v17[1] = a3;
    v18 = 124;
    LODWORD(v19) = 1;
    do
    {
      v20 = (int)v19;
      v19 = (int)v19 - 1;
      v21 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v19);
      v22 = *v21;
      v23 = v21[1];
      if ((int)v19 > v18)
      {
        v24 = *(int *)(a1 + 36);
        v25 = 2 * v24;
        if ((int)v24 < 2 * (int)v24 && *(_DWORD *)(a1 + 40) < v25)
        {
          if ((_DWORD)v24)
          {
            v26 = btAlignedAllocInternal(32 * v24, 16);
            v27 = v26;
            v28 = *(unsigned int *)(a1 + 36);
            if ((int)v28 >= 1)
            {
              v29 = 0;
              v30 = 16 * v28;
              do
              {
                *(_OWORD *)(v26 + v29) = *(_OWORD *)(*(_QWORD *)(a1 + 48) + v29);
                v29 += 16;
              }
              while (v30 != v29);
            }
          }
          else
          {
            v27 = 0;
          }
          v31 = *(void ***)(a1 + 48);
          if (v31 && *(_BYTE *)(a1 + 56))
            btAlignedFreeInternal(v31);
          *(_BYTE *)(a1 + 56) = 1;
          *(_QWORD *)(a1 + 48) = v27;
          *(_DWORD *)(a1 + 40) = v25;
        }
        *(_DWORD *)(a1 + 36) = v25;
        v18 = v25 - 4;
      }
      if (v22 == v23)
      {
        if (*(_QWORD *)(v22 + 48))
        {
          v42 = (const double *)(v22 + 40);
          v43 = vld1q_dup_f64(v42);
          *(float64x2_t *)(*(_QWORD *)(a1 + 48) + 16 * v19) = v43;
          v44 = (const double *)(v22 + 48);
          v45 = vld1q_dup_f64(v44);
          *(float64x2_t *)(*(_QWORD *)(a1 + 48) + 16 * v20) = v45;
          LODWORD(v19) = v20 + 2;
          *(_OWORD *)(*(_QWORD *)(a1 + 48) + 16 * v20 + 16) = *(_OWORD *)(v22 + 40);
        }
      }
      else if (*(float *)v22 <= *(float *)(v23 + 16)
             && *(float *)(v22 + 16) >= *(float *)v23
             && *(float *)(v22 + 4) <= *(float *)(v23 + 20)
             && *(float *)(v22 + 20) >= *(float *)(v23 + 4)
             && *(float *)(v22 + 8) <= *(float *)(v23 + 24)
             && *(float *)(v22 + 24) >= *(float *)(v23 + 8))
      {
        v32 = *(_QWORD *)(v23 + 48);
        if (*(_QWORD *)(v22 + 48))
        {
          v33 = *(_QWORD *)(v22 + 40);
          if (v32)
          {
            v34 = *(_QWORD *)(v23 + 40);
            v35 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v19);
            *v35 = v33;
            v35[1] = v34;
            v36 = *(_QWORD *)(v23 + 40);
            v37 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v20);
            *v37 = *(_QWORD *)(v22 + 48);
            v37[1] = v36;
            v38 = *(_QWORD *)(v23 + 48);
            v39 = *(_QWORD *)(a1 + 48) + 16 * v20;
            *(_QWORD *)(v39 + 16) = *(_QWORD *)(v22 + 40);
            *(_QWORD *)(v39 + 24) = v38;
            v40 = *(_QWORD *)(v23 + 48);
            LODWORD(v19) = v20 + 3;
            v41 = *(_QWORD *)(a1 + 48) + 16 * v20;
            *(_QWORD *)(v41 + 32) = *(_QWORD *)(v22 + 48);
            *(_QWORD *)(v41 + 40) = v40;
          }
          else
          {
            v50 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v19);
            *v50 = v33;
            v50[1] = v23;
            LODWORD(v19) = v20 + 1;
            v51 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v20);
            *v51 = *(_QWORD *)(v22 + 48);
            v51[1] = v23;
          }
        }
        else if (v32)
        {
          v46 = *(_QWORD *)(v23 + 40);
          v47 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v19);
          *v47 = v22;
          v47[1] = v46;
          v48 = *(_QWORD *)(v23 + 48);
          LODWORD(v19) = v20 + 1;
          v49 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v20);
          *v49 = v22;
          v49[1] = v48;
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a4 + 16))(a4, v22, v23);
        }
      }
    }
    while ((_DWORD)v19);
  }
}

void btDbvtBroadphase::calculateOverlappingPairs(uint64_t a1, uint64_t a2)
{
  btDbvtBroadphase::collide(a1);
  btDbvtBroadphase::performDeferredRemoval(a1, a2);
}

void btDbvtBroadphase::collide(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  BOOL v7;
  char v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __n128 v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  int i;
  _QWORD *v25;
  uint64_t v26;
  unsigned __int32 *v27;
  float *v28;
  unsigned int v29;
  unsigned int v30;
  float v31;
  _OWORD v32[2];

  v2 = (uint64_t *)(a1 + 8);
  v3 = 1374389535 * *(_DWORD *)(a1 + 244) * *(_DWORD *)(a1 + 28);
  btDbvt::optimizeIncremental(a1 + 8, (v3 >> 37) + ((unint64_t)v3 >> 63) + 1);
  if (*(_DWORD *)(a1 + 256))
  {
    v4 = 1374389535 * *(_DWORD *)(a1 + 240) * *(_DWORD *)(a1 + 124);
    v5 = (v4 >> 37) + ((unint64_t)v4 >> 63) + 1;
    btDbvt::optimizeIncremental(a1 + 104, v5);
    *(_DWORD *)(a1 + 256) = (*(_DWORD *)(a1 + 256) - v5) & ~((*(_DWORD *)(a1 + 256) - v5) >> 31);
  }
  v6 = *(_DWORD *)(a1 + 236);
  v7 = __OFADD__(v6++, 1);
  v8 = (v6 < 0) ^ v7;
  v9 = v6 & 1;
  if (v8)
    v9 = -v9;
  *(_DWORD *)(a1 + 236) = v9;
  v10 = *(_QWORD *)(a1 + 8 * v9 + 200);
  if (v10)
  {
    do
    {
      v11 = (uint64_t *)(a1 + 8 * *(int *)(v10 + 104) + 200);
      v12 = *(_QWORD *)(v10 + 88);
      v13 = *(_QWORD *)(v10 + 96);
      if (v12)
        v11 = (uint64_t *)(v12 + 96);
      *v11 = v13;
      v14 = *(_QWORD *)(v10 + 96);
      if (v14)
        *(_QWORD *)(v14 + 88) = *(_QWORD *)(v10 + 88);
      *(_QWORD *)(v10 + 88) = 0;
      *(_QWORD *)(v10 + 96) = *(_QWORD *)(a1 + 216);
      v15 = *(_QWORD *)(a1 + 216);
      if (v15)
        *(_QWORD *)(v15 + 88) = v10;
      *(_QWORD *)(a1 + 216) = v10;
      btDbvt::remove((uint64_t)v2, *(_QWORD *)(v10 + 80));
      v16 = *(_OWORD *)(v10 + 64);
      v32[0] = *(_OWORD *)(v10 + 48);
      v32[1] = v16;
      *(_QWORD *)(v10 + 80) = btDbvt::insert(a1 + 104, v32, v10);
      *(_DWORD *)(v10 + 104) = 2;
      v10 = v13;
    }
    while (v13);
    *(_DWORD *)(a1 + 256) = *(_DWORD *)(a1 + 124);
    *(_BYTE *)(a1 + 286) = 1;
  }
  *(_QWORD *)&v32[0] = &off_1EA596A00;
  *((_QWORD *)&v32[0] + 1) = a1;
  if (*(_BYTE *)(a1 + 285))
  {
    btDbvt::collideTTpersistentStack((uint64_t)v2, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 104), (uint64_t)v32);
    if (*(_BYTE *)(a1 + 285))
      btDbvt::collideTTpersistentStack((uint64_t)v2, *v2, *v2, (uint64_t)v32);
  }
  if (*(_BYTE *)(a1 + 286))
  {
    v17 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 224) + 56))(*(_QWORD *)(a1 + 224));
    v19 = *(_DWORD *)(v17 + 4);
    if (v19 >= 1)
    {
      v20 = 1374389535 * *(_DWORD *)(a1 + 248) * v19;
      v21 = (v20 >> 37) + ((unint64_t)v20 >> 63);
      if (*(_DWORD *)(a1 + 252) > v21)
        v21 = *(_DWORD *)(a1 + 252);
      if (v19 >= v21)
        v22 = v21;
      else
        v22 = *(_DWORD *)(v17 + 4);
      if (v22 < 1)
        goto LABEL_35;
      v23 = v17;
      for (i = 0; i < v22; ++i)
      {
        v25 = (_QWORD *)(*(_QWORD *)(v23 + 16) + 32 * ((*(_DWORD *)(a1 + 276) + i) % *(_DWORD *)(v23 + 4)));
        v26 = v25[1];
        v27 = *(unsigned __int32 **)(*v25 + 80);
        v28 = *(float **)(v26 + 80);
        v18.n128_u32[0] = *v27;
        if (*(float *)v27 <= v28[4])
        {
          v18.n128_u32[0] = v27[4];
          if (v18.n128_f32[0] >= *v28)
          {
            v18.n128_u32[0] = v27[1];
            if (v18.n128_f32[0] <= v28[5])
            {
              v18.n128_u32[0] = v27[5];
              if (v18.n128_f32[0] >= v28[1])
              {
                v18.n128_u32[0] = v27[2];
                if (v18.n128_f32[0] <= v28[6])
                {
                  v18.n128_u32[0] = v27[6];
                  if (v18.n128_f32[0] >= v28[2])
                    continue;
                }
              }
            }
          }
        }
        (*(void (**)(_QWORD, __n128))(**(_QWORD **)(a1 + 224) + 24))(*(_QWORD *)(a1 + 224), v18);
        --v22;
        --i;
      }
      v19 = *(_DWORD *)(v23 + 4);
      if (v19 <= 0)
        *(_DWORD *)(a1 + 276) = 0;
      else
LABEL_35:
        *(_DWORD *)(a1 + 276) = (*(_DWORD *)(a1 + 276) + v22) % v19;
    }
  }
  ++*(_DWORD *)(a1 + 272);
  *(_DWORD *)(a1 + 252) = 1;
  *(_BYTE *)(a1 + 286) = 0;
  v29 = *(_DWORD *)(a1 + 260);
  v30 = *(_DWORD *)(a1 + 264);
  if (v29)
    v31 = (float)v30 / (float)v29;
  else
    v31 = 0.0;
  *(float *)(a1 + 268) = v31;
  *(_DWORD *)(a1 + 264) = v30 >> 1;
  *(_DWORD *)(a1 + 260) = v29 >> 1;
}

void btDbvtBroadphase::performDeferredRemoval(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unsigned __int32 *v19;
  float *v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void **v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  char v32;
  char v33;

  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 224) + 112))(*(_QWORD *)(a1 + 224)))
  {
    v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 224) + 56))(*(_QWORD *)(a1 + 224));
    v6 = v4;
    v7 = *(_DWORD *)(v4 + 4);
    v8 = (v7 - 1);
    if (v7 > 1)
    {
      btAlignedObjectArray<btBroadphasePair>::quickSortInternal<btBroadphasePairSortPredicate>(v4, (uint64_t)&v33, 0, v8);
      v7 = *(_DWORD *)(v6 + 4);
    }
    if (v7 >= 1)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      do
      {
        v14 = v13;
        v15 = v12;
        v16 = *(_QWORD *)(v6 + 16);
        v17 = (_QWORD *)(v16 + v9);
        v12 = *(_QWORD *)(v16 + v9);
        v13 = *(_QWORD *)(v16 + v9 + 8);
        if (v12 == v15 && v13 == v14)
          goto LABEL_16;
        v19 = *(unsigned __int32 **)(v12 + 80);
        v20 = *(float **)(v13 + 80);
        v5.n128_u32[0] = *v19;
        if (*(float *)v19 > v20[4]
          || (v5.n128_u32[0] = v19[4], v5.n128_f32[0] < *v20)
          || (v5.n128_u32[0] = v19[1], v5.n128_f32[0] > v20[5])
          || (v5.n128_u32[0] = v19[5], v5.n128_f32[0] < v20[1])
          || (v5.n128_u32[0] = v19[2], v5.n128_f32[0] > v20[6])
          || (v5.n128_u32[0] = v19[6], v5.n128_f32[0] < v20[2]))
        {
LABEL_16:
          (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, __n128))(**(_QWORD **)(a1 + 224) + 64))(*(_QWORD *)(a1 + 224), v16 + v9, a2, v8, v5);
          ++v11;
          *v17 = 0;
          v17[1] = 0;
          v7 = *(_DWORD *)(v6 + 4);
        }
        ++v10;
        v9 += 32;
      }
      while (v10 < v7);
      if (v7 >= 2)
      {
        btAlignedObjectArray<btBroadphasePair>::quickSortInternal<btBroadphasePairSortPredicate>(v6, (uint64_t)&v32, 0, (v7 - 1));
        v7 = *(_DWORD *)(v6 + 4);
      }
      v21 = v7 - v11;
      if (v11 < 0)
      {
        if (*(_DWORD *)(v6 + 8) < v21)
        {
          if (v7 == v11)
          {
            v22 = 0;
            v23 = v7;
          }
          else
          {
            v22 = btAlignedAllocInternal(32 * v21, 16);
            v23 = *(_DWORD *)(v6 + 4);
          }
          if (v23 >= 1)
          {
            v24 = 0;
            v25 = 32 * v23;
            do
            {
              v26 = v22 + v24;
              v27 = *(_QWORD *)(v6 + 16) + v24;
              *(_OWORD *)v26 = *(_OWORD *)v27;
              *(_QWORD *)(v26 + 16) = *(_QWORD *)(v27 + 16);
              *(_QWORD *)(v26 + 24) = *(_QWORD *)(v27 + 24);
              v24 += 32;
            }
            while (v25 != v24);
          }
          v28 = *(void ***)(v6 + 16);
          if (v28 && *(_BYTE *)(v6 + 24))
            btAlignedFreeInternal(v28);
          *(_BYTE *)(v6 + 24) = 1;
          *(_QWORD *)(v6 + 16) = v22;
          *(_DWORD *)(v6 + 8) = v21;
        }
        v29 = v7;
        v30 = 32 * v7;
        do
        {
          v31 = (_OWORD *)(*(_QWORD *)(v6 + 16) + v30);
          ++v29;
          *v31 = 0uLL;
          v31[1] = 0uLL;
          v30 += 32;
        }
        while (v29 < v21);
      }
      v7 -= v11;
    }
    *(_DWORD *)(v6 + 4) = v7;
  }
}

uint64_t btDbvtBroadphase::getOverlappingPairCache(btDbvtBroadphase *this)
{
  return *((_QWORD *)this + 28);
}

{
  return *((_QWORD *)this + 28);
}

uint64_t btDbvtBroadphase::getBroadphaseAabb(uint64_t this, btVector3 *a2, btVector3 *a3)
{
  btVector3 *v3;
  btVector3 *v4;
  uint64_t v5;
  _OWORD *var0;
  _OWORD *v7;
  float *v8;
  float v9;
  float *v10;
  float v11;
  btVector3 v12;
  btVector3 v13;
  _OWORD v14[2];

  v3 = *(btVector3 **)(this + 8);
  v4 = *(btVector3 **)(this + 104);
  if (v3)
  {
    if (v4)
    {
      v5 = 0;
      var0 = (_OWORD *)v3[1].var0.var0;
      v7 = (_OWORD *)v4[1].var0.var0;
      do
      {
        v8 = (float *)((char *)var0 + v5);
        v9 = *(float *)((char *)var0 + v5 - 16);
        v10 = (float *)((char *)v7 + v5);
        if (v9 >= *(float *)((char *)v7 + v5 - 16))
          v9 = *(float *)((char *)v7 + v5 - 16);
        *(float *)((char *)v14 + v5) = v9;
        v11 = *v8;
        if (*v8 <= *v10)
          v11 = *v10;
        *(float *)((char *)&v14[1] + v5) = v11;
        v5 += 4;
      }
      while (v5 != 12);
      v13 = (btVector3)v14[0];
      v12 = (btVector3)v14[1];
    }
    else
    {
      v13 = *v3;
      v12 = v3[1];
    }
  }
  else if (v4)
  {
    v13 = *v4;
    v12 = v4[1];
  }
  else
  {
    v12 = (btVector3)0;
    v13 = (btVector3)0;
  }
  *a2 = v13;
  *a3 = v12;
  return this;
}

double btDbvtBroadphase::resetPool(uint64_t a1)
{
  btDbvt *v2;
  double result;

  if (!(*(_DWORD *)(a1 + 28) + *(_DWORD *)(a1 + 124)))
  {
    v2 = (btDbvt *)(a1 + 104);
    btDbvt::clear((btDbvt *)(a1 + 8));
    btDbvt::clear(v2);
    *(_WORD *)(a1 + 285) = 256;
    *(_OWORD *)(a1 + 236) = xmmword_1DD02C810;
    *(_QWORD *)&result = 1;
    *(_QWORD *)(a1 + 252) = 1;
    *(_QWORD *)(a1 + 208) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    *(_QWORD *)(a1 + 200) = 0;
    *(_QWORD *)(a1 + 268) = 0;
    *(_QWORD *)(a1 + 276) = 0;
    *(_QWORD *)(a1 + 260) = 0;
  }
  return result;
}

void btDbvtTreeCollider::~btDbvtTreeCollider(btDbvtTreeCollider *this)
{
  JUMPOUT(0x1DF0D41C0);
}

uint64_t btDbvtTreeCollider::Process(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (a2 != a3)
  {
    v3 = result;
    result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(result + 8) + 224) + 16))(*(_QWORD *)(*(_QWORD *)(result + 8) + 224), *(_QWORD *)(a2 + 40), *(_QWORD *)(a3 + 40));
    ++*(_DWORD *)(*(_QWORD *)(v3 + 8) + 252);
  }
  return result;
}

uint64_t btDbvtTreeCollider::Process(_QWORD *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a1 + 16))(a1, a2, *(_QWORD *)(a1[2] + 80));
}

void BroadphaseRayTester::~BroadphaseRayTester(BroadphaseRayTester *this)
{
  JUMPOUT(0x1DF0D41C0);
}

uint64_t BroadphaseRayTester::Process(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 40));
}

void BroadphaseAabbTester::~BroadphaseAabbTester(BroadphaseAabbTester *this)
{
  JUMPOUT(0x1DF0D41C0);
}

uint64_t BroadphaseAabbTester::Process(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 40));
}

uint64_t btAlignedObjectArray<btBroadphasePair>::quickSortInternal<btBroadphasePairSortPredicate>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;

  v8 = a4 + a3;
  if ((int)a4 + (int)a3 < 0 != __OFADD__((_DWORD)a4, (_DWORD)a3))
    ++v8;
  v9 = *(_QWORD *)(a1 + 16) + 32 * ((uint64_t)v8 >> 1);
  v23 = *(_OWORD *)v9;
  v24 = *(_QWORD *)(v9 + 16);
  v25 = *(_QWORD *)(v9 + 24);
  LODWORD(v10) = a3;
  LODWORD(v11) = a4;
  do
  {
    v12 = 32 * (int)v10;
    do
    {
      v13 = btBroadphasePairSortPredicate::operator()(a2, (uint64_t *)(*(_QWORD *)(a1 + 16) + v12), (uint64_t *)&v23);
      v10 = (v10 + 1);
      v12 += 32;
    }
    while (v13);
    v14 = 32 * (int)v11;
    do
    {
      result = btBroadphasePairSortPredicate::operator()(a2, (uint64_t *)&v23, (uint64_t *)(*(_QWORD *)(a1 + 16) + v14));
      v11 = (v11 - 1);
      v14 -= 32;
    }
    while ((result & 1) != 0);
    if ((int)v10 - 1 <= (int)v11 + 1)
    {
      v16 = *(_QWORD *)(a1 + 16);
      v17 = v16 + v12;
      v18 = v16 + v14;
      v19 = *(_OWORD *)(v17 - 32);
      v20 = *(_OWORD *)(v17 - 16);
      v21 = *(_OWORD *)(v18 + 48);
      *(_OWORD *)(v17 - 32) = *(_OWORD *)(v18 + 32);
      *(_OWORD *)(v17 - 16) = v21;
      v22 = *(_QWORD *)(a1 + 16) + v14;
      *(_OWORD *)(v22 + 32) = v19;
      *(_OWORD *)(v22 + 48) = v20;
    }
    else
    {
      v10 = (v10 - 1);
      v11 = (v11 + 1);
    }
  }
  while ((int)v10 <= (int)v11);
  if ((int)v11 > (int)a3)
    result = btAlignedObjectArray<btBroadphasePair>::quickSortInternal<btBroadphasePairSortPredicate>(a1, a2, a3, v11);
  if ((int)v10 < (int)a4)
    return btAlignedObjectArray<btBroadphasePair>::quickSortInternal<btBroadphasePairSortPredicate>(a1, a2, v10, a4);
  return result;
}

BOOL btBroadphasePairSortPredicate::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  _BOOL8 result;
  BOOL v12;

  v3 = *a2;
  if (*a2)
    v4 = *(_DWORD *)(v3 + 40);
  else
    v4 = -1;
  v5 = *a3;
  if (*a3)
    v6 = *(_DWORD *)(v5 + 40);
  else
    v6 = -1;
  v7 = a2[1];
  if (v7)
    v8 = *(_DWORD *)(v7 + 40);
  else
    v8 = -1;
  v9 = a3[1];
  if (v9)
    v10 = *(_DWORD *)(v9 + 40);
  else
    v10 = -1;
  if (v4 > v6)
    return 1;
  v12 = v3 != v5 || v8 <= v10;
  result = !v12;
  if (v12 && v3 == v5)
    return v7 == v9 && a2[2] > (unint64_t)a3[2];
  return result;
}

void btHashedOverlappingPairCache::btHashedOverlappingPairCache(btHashedOverlappingPairCache *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)this = &off_1EA597DA0;
  *((_BYTE *)this + 32) = 1;
  *((_QWORD *)this + 3) = 0;
  *(_QWORD *)((char *)this + 12) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_BYTE *)this + 48) = 0;
  *((_BYTE *)this + 80) = 1;
  *((_QWORD *)this + 9) = 0;
  *(_QWORD *)((char *)this + 60) = 0;
  *((_BYTE *)this + 112) = 1;
  *((_QWORD *)this + 13) = 0;
  *(_QWORD *)((char *)this + 92) = 0;
  *((_QWORD *)this + 15) = 0;
  v2 = btAlignedAllocInternal(64, 16);
  v3 = v2;
  v4 = *((unsigned int *)this + 3);
  if ((int)v4 >= 1)
  {
    v5 = 0;
    v6 = 32 * v4;
    do
    {
      v7 = v2 + v5;
      v8 = *((_QWORD *)this + 3) + v5;
      *(_OWORD *)v7 = *(_OWORD *)v8;
      *(_QWORD *)(v7 + 16) = *(_QWORD *)(v8 + 16);
      *(_QWORD *)(v7 + 24) = *(_QWORD *)(v8 + 24);
      v5 += 32;
    }
    while (v6 != v5);
  }
  v9 = (void **)*((_QWORD *)this + 3);
  if (v9 && *((_BYTE *)this + 32))
    btAlignedFreeInternal(v9);
  *((_BYTE *)this + 32) = 1;
  *((_QWORD *)this + 3) = v3;
  *((_DWORD *)this + 4) = 2;
  btHashedOverlappingPairCache::growTables(this);
}

void btHashedOverlappingPairCache::growTables(btHashedOverlappingPairCache *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  _DWORD *v7;
  int *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  _DWORD *v14;
  int *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;

  v1 = *((unsigned int *)this + 4);
  v2 = *((unsigned int *)this + 15);
  if ((int)v2 >= (int)v1)
    return;
  if (*((_DWORD *)this + 16) < (int)v1)
  {
    if ((_DWORD)v1)
    {
      v4 = btAlignedAllocInternal(4 * (int)v1, 16);
      LODWORD(v5) = *((_DWORD *)this + 15);
    }
    else
    {
      v4 = 0;
      LODWORD(v5) = *((_DWORD *)this + 15);
    }
    v6 = (void **)*((_QWORD *)this + 9);
    if ((int)v5 < 1)
    {
      if (!v6)
      {
LABEL_14:
        *((_BYTE *)this + 80) = 1;
        *((_QWORD *)this + 9) = v4;
        *((_DWORD *)this + 16) = v1;
        goto LABEL_15;
      }
    }
    else
    {
      v5 = v5;
      v7 = (_DWORD *)v4;
      v8 = (int *)*((_QWORD *)this + 9);
      do
      {
        v9 = *v8++;
        *v7++ = v9;
        --v5;
      }
      while (v5);
    }
    if (*((_BYTE *)this + 80))
      btAlignedFreeInternal(v6);
    *((_QWORD *)this + 9) = 0;
    goto LABEL_14;
  }
LABEL_15:
  bzero((void *)(*((_QWORD *)this + 9) + 4 * (int)v2), 4 * (v1 + ~(_DWORD)v2) + 4);
  *((_DWORD *)this + 15) = v1;
  v10 = *((_DWORD *)this + 23);
  if (v10 < (int)v1)
  {
    if (*((_DWORD *)this + 24) >= (int)v1)
    {
LABEL_28:
      bzero((void *)(*((_QWORD *)this + 13) + 4 * v10), 4 * (v1 + ~v10) + 4);
      goto LABEL_29;
    }
    if ((_DWORD)v1)
      v11 = btAlignedAllocInternal(4 * (int)v1, 16);
    else
      v11 = 0;
    LODWORD(v12) = *((_DWORD *)this + 23);
    v13 = (void **)*((_QWORD *)this + 13);
    if ((int)v12 < 1)
    {
      if (!v13)
      {
LABEL_27:
        *((_BYTE *)this + 112) = 1;
        *((_QWORD *)this + 13) = v11;
        *((_DWORD *)this + 24) = v1;
        goto LABEL_28;
      }
    }
    else
    {
      v12 = v12;
      v14 = (_DWORD *)v11;
      v15 = (int *)*((_QWORD *)this + 13);
      do
      {
        v16 = *v15++;
        *v14++ = v16;
        --v12;
      }
      while (v12);
    }
    if (*((_BYTE *)this + 112))
      btAlignedFreeInternal(v13);
    goto LABEL_27;
  }
LABEL_29:
  *((_DWORD *)this + 23) = v1;
  if ((int)v1 >= 1)
  {
    memset(*((void **)this + 9), 255, 4 * v1);
    memset(*((void **)this + 13), 255, 4 * v1);
  }
  if ((int)v2 >= 1)
  {
    v17 = 0;
    v18 = *((_QWORD *)this + 9);
    v19 = *((_QWORD *)this + 13);
    v20 = *((_QWORD *)this + 3) + 8;
    do
    {
      v21 = *(_DWORD *)(*(_QWORD *)(v20 - 8) + 40) | (*(_DWORD *)(*(_QWORD *)v20 + 40) << 16);
      v22 = ~((uint64_t)v21 << 15) + v21;
      v23 = (9 * (v22 ^ (v22 >> 10))) ^ ((9 * (v22 ^ (v22 >> 10))) >> 6);
      LODWORD(v23) = (*((_DWORD *)this + 4) - 1) & (((unint64_t)(v23 + ~(v23 << 11)) >> 16) ^ (v23 + ~((_DWORD)v23 << 11)));
      *(_DWORD *)(v19 + 4 * v17) = *(_DWORD *)(v18 + 4 * (int)v23);
      *(_DWORD *)(v18 + 4 * (int)v23) = v17++;
      v20 += 32;
    }
    while (v2 != v17);
  }
}

void btHashedOverlappingPairCache::~btHashedOverlappingPairCache(btHashedOverlappingPairCache *this)
{
  char *v2;

  *(_QWORD *)this = &off_1EA597DA0;
  v2 = (char *)this + 8;
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)this + 88);
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)this + 56);
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)v2);
}

{
  btHashedOverlappingPairCache::~btHashedOverlappingPairCache(this);
  JUMPOUT(0x1DF0D41C0);
}

void (***btHashedOverlappingPairCache::cleanOverlappingPair(uint64_t a1, uint64_t a2, uint64_t a3))(_QWORD)
{
  void (***result)(_QWORD);

  result = *(void (****)(_QWORD))(a2 + 16);
  if (result)
  {
    (**result)(result);
    result = (void (***)(_QWORD))(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 120))(a3, *(_QWORD *)(a2 + 16));
    *(_QWORD *)(a2 + 16) = 0;
  }
  return result;
}

uint64_t btHashedOverlappingPairCache::cleanProxyFromPairs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[4];

  v4[0] = &off_1EA59AB90;
  v4[1] = a2;
  v4[2] = a1;
  v4[3] = a3;
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 96))(a1, v4);
}

uint64_t btHashedOverlappingPairCache::removeOverlappingPairsContainingProxy(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = &off_1EA59ABB8;
  v3[1] = a2;
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 96))(a1, v3);
}

uint64_t btHashedOverlappingPairCache::findPair(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *(_DWORD *)(a2 + 40);
  v4 = *(_DWORD *)(a3 + 40);
  v5 = v3 <= v4;
  if (v3 <= v4)
    v6 = a2;
  else
    v6 = a3;
  if (v5)
    v7 = a3;
  else
    v7 = a2;
  v8 = *(_DWORD *)(v6 + 40);
  v9 = *(_DWORD *)(v7 + 40);
  v10 = ~((uint64_t)(v8 | (v9 << 16)) << 15) + (v8 | (v9 << 16));
  v11 = (9 * (v10 ^ (v10 >> 10))) ^ ((9 * (v10 ^ (v10 >> 10))) >> 6);
  v12 = (*(_DWORD *)(a1 + 16) - 1) & (((unint64_t)(v11 + ~(v11 << 11)) >> 16) ^ (v11 + ~((_DWORD)v11 << 11)));
  if (v12 >= *(_DWORD *)(a1 + 60))
    return 0;
  v13 = *(_DWORD *)(*(_QWORD *)(a1 + 72) + 4 * v12);
  if (v13 == -1)
    return 0;
  v14 = *(_QWORD *)(a1 + 24);
  while (1)
  {
    v15 = v13;
    if (*(_DWORD *)(*(_QWORD *)(v14 + 32 * v13) + 40) == v8)
    {
      v16 = v14 + 32 * v13;
      if (*(_DWORD *)(*(_QWORD *)(v16 + 8) + 40) == v9)
        break;
    }
    v13 = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 4 * v15);
    if (v13 == -1)
      return 0;
  }
  return v16;
}

_QWORD *btHashedOverlappingPairCache::internalAddPair(btHashedOverlappingPairCache *this, uint64_t a2, uint64_t a3)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v38;

  v4 = *(_DWORD *)(a2 + 40);
  v5 = *(_DWORD *)(a3 + 40);
  if (v4 <= v5)
    v6 = a2;
  else
    v6 = a3;
  if (v4 <= v5)
    v7 = a3;
  else
    v7 = a2;
  v8 = *(_DWORD *)(v6 + 40);
  v9 = *(_DWORD *)(v7 + 40);
  v10 = ~((uint64_t)(v8 | (v9 << 16)) << 15) + (v8 | (v9 << 16));
  v11 = (9 * (v10 ^ (v10 >> 10))) ^ ((9 * (v10 ^ (v10 >> 10))) >> 6);
  v12 = ((unint64_t)(v11 + ~(v11 << 11)) >> 16) ^ (v11 + ~((_DWORD)v11 << 11));
  v13 = *((_DWORD *)this + 4);
  LODWORD(v14) = (v13 - 1) & v12;
  v15 = *(_DWORD *)(*((_QWORD *)this + 9) + 4 * (int)v14);
  if (v15 == -1)
  {
LABEL_12:
    v18 = *((_DWORD *)this + 3);
    v38 = v12;
    if (v18 == v13)
    {
      if (v13)
        v19 = 2 * v13;
      else
        v19 = 1;
      if (v13 >= v19)
      {
        v19 = *((_DWORD *)this + 4);
        v22 = v19;
      }
      else
      {
        if (v19)
        {
          v20 = btAlignedAllocInternal(32 * v19, 16);
          v21 = *((_DWORD *)this + 3);
        }
        else
        {
          v20 = 0;
          v21 = *((_DWORD *)this + 4);
        }
        if (v21 >= 1)
        {
          v23 = 0;
          v24 = 32 * v21;
          do
          {
            v25 = v20 + v23;
            v26 = *((_QWORD *)this + 3) + v23;
            *(_OWORD *)v25 = *(_OWORD *)v26;
            *(_QWORD *)(v25 + 16) = *(_QWORD *)(v26 + 16);
            *(_QWORD *)(v25 + 24) = *(_QWORD *)(v26 + 24);
            v23 += 32;
          }
          while (v24 != v23);
        }
        v27 = (void **)*((_QWORD *)this + 3);
        if (v27 && *((_BYTE *)this + 32))
          btAlignedFreeInternal(v27);
        *((_BYTE *)this + 32) = 1;
        *((_QWORD *)this + 3) = v20;
        *((_DWORD *)this + 4) = v19;
        v22 = *((_DWORD *)this + 3);
      }
    }
    else
    {
      v19 = *((_DWORD *)this + 4);
      v22 = *((_DWORD *)this + 3);
    }
    v14 = (int)v14;
    *((_DWORD *)this + 3) = v22 + 1;
    v28 = *((_QWORD *)this + 3);
    v17 = (_QWORD *)(v28 + 32 * v18);
    v29 = *((_QWORD *)this + 15);
    if (v29)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v29 + 16))(v29, v6, v7);
      v19 = *((_DWORD *)this + 4);
    }
    if (v13 < v19)
    {
      btHashedOverlappingPairCache::growTables(this);
      v14 = (*((int *)this + 4) - 1) & v38;
    }
    v30 = *(_DWORD *)(v6 + 40);
    v31 = *(_DWORD *)(v7 + 40);
    v32 = v30 < v31;
    if (v30 >= v31)
      v33 = v7;
    else
      v33 = v6;
    if (v32)
      v34 = v7;
    else
      v34 = v6;
    *v17 = v33;
    v35 = (_QWORD *)(v28 + 32 * v18);
    v35[2] = 0;
    v35[3] = 0;
    v35[1] = v34;
    v36 = *((_QWORD *)this + 9);
    *(_DWORD *)(*((_QWORD *)this + 13) + 4 * v18) = *(_DWORD *)(v36 + 4 * v14);
    *(_DWORD *)(v36 + 4 * v14) = v18;
  }
  else
  {
    v16 = *((_QWORD *)this + 3);
    while (1)
    {
      if (*(_DWORD *)(*(_QWORD *)(v16 + 32 * v15) + 40) == v8)
      {
        v17 = (_QWORD *)(v16 + 32 * v15);
        if (*(_DWORD *)(v17[1] + 40) == v9)
          break;
      }
      v15 = *(_DWORD *)(*((_QWORD *)this + 13) + 4 * v15);
      if (v15 == -1)
        goto LABEL_12;
    }
  }
  return v17;
}

uint64_t btHashedOverlappingPairCache::removeOverlappingPair(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  _OWORD *v35;
  __int128 v36;
  uint64_t v37;

  v4 = *(_DWORD *)(a2 + 40);
  v5 = *(_DWORD *)(a3 + 40);
  if (v4 <= v5)
    v6 = a2;
  else
    v6 = a3;
  if (v4 <= v5)
    v7 = a3;
  else
    v7 = a2;
  v8 = *(_DWORD *)(v6 + 40);
  v9 = *(_DWORD *)(v7 + 40);
  v10 = ~((uint64_t)(v8 | (v9 << 16)) << 15) + (v8 | (v9 << 16));
  v11 = (9 * (v10 ^ (v10 >> 10))) ^ ((9 * (v10 ^ (v10 >> 10))) >> 6);
  v12 = (*(int *)(a1 + 16) - 1) & (int)(((unint64_t)(v11 + ~(v11 << 11)) >> 16) ^ (v11 + ~((_DWORD)v11 << 11)));
  v13 = *(_DWORD *)(*(_QWORD *)(a1 + 72) + 4 * v12);
  if (v13 == -1)
    return 0;
  v16 = *(_QWORD *)(a1 + 24);
  while (1)
  {
    if (*(_DWORD *)(*(_QWORD *)(v16 + 32 * v13) + 40) == v8)
    {
      v17 = v16 + 32 * v13;
      if (*(_DWORD *)(*(_QWORD *)(v17 + 8) + 40) == v9)
        break;
    }
    v13 = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 4 * v13);
    if (v13 == -1)
      return 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, v16 + 32 * v13, a4);
  v18 = *(_QWORD *)(v17 + 24);
  v19 = v17 - *(_QWORD *)(a1 + 24);
  v20 = (unint64_t)v19 >> 5;
  v21 = *(_QWORD *)(a1 + 72);
  v22 = *(_DWORD *)(v21 + 4 * v12);
  if (v22 == ((unint64_t)v19 >> 5))
    goto LABEL_17;
  do
  {
    v23 = v22;
    v22 = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 4 * v22);
  }
  while (v22 != (_DWORD)v20);
  if (v23 == -1)
LABEL_17:
    *(_DWORD *)(v21 + 4 * v12) = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 4 * (int)v20);
  else
    *(_DWORD *)(*(_QWORD *)(a1 + 104) + 4 * v23) = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 4 * (int)v20);
  v24 = *(int *)(a1 + 12) - 1;
  v25 = *(_QWORD *)(a1 + 120);
  if (v25)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v25 + 24))(v25, v6, v7, a4);
  if ((_DWORD)v24 != (_DWORD)v20)
  {
    v26 = *(_QWORD *)(a1 + 24);
    v27 = v26 + 32 * v24;
    v28 = *(_DWORD *)(*(_QWORD *)v27 + 40) | (*(_DWORD *)(*(_QWORD *)(v27 + 8) + 40) << 16);
    v29 = ~((uint64_t)v28 << 15) + v28;
    v30 = (9 * (v29 ^ (v29 >> 10))) ^ ((9 * (v29 ^ (v29 >> 10))) >> 6);
    v31 = (*(int *)(a1 + 16) - 1) & (int)(((unint64_t)(v30 + ~(v30 << 11)) >> 16) ^ (v30 + ~((_DWORD)v30 << 11)));
    v32 = *(_QWORD *)(a1 + 72);
    v33 = *(_DWORD *)(v32 + 4 * v31);
    if (v33 == (_DWORD)v24)
      goto LABEL_25;
    do
    {
      v34 = v33;
      v33 = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 4 * v33);
    }
    while (v33 != (_DWORD)v24);
    if (v34 == -1)
LABEL_25:
      *(_DWORD *)(v32 + 4 * v31) = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 4 * v24);
    else
      *(_DWORD *)(*(_QWORD *)(a1 + 104) + 4 * v34) = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 4 * v24);
    v35 = (_OWORD *)(v26 + 32 * (int)(v19 >> 5));
    v36 = *(_OWORD *)(v27 + 16);
    *v35 = *(_OWORD *)v27;
    v35[1] = v36;
    v37 = *(_QWORD *)(a1 + 72);
    *(_DWORD *)(*(_QWORD *)(a1 + 104) + 4 * (int)v20) = *(_DWORD *)(v37 + 4 * v31);
    *(_DWORD *)(v37 + 4 * v31) = v20;
  }
  --*(_DWORD *)(a1 + 12);
  return v18;
}

uint64_t btHashedOverlappingPairCache::processAllOverlappingPairs(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  _QWORD *v7;

  if (*(int *)(result + 12) >= 1)
  {
    v5 = result;
    v6 = 0;
    do
    {
      v7 = (_QWORD *)(*(_QWORD *)(v5 + 24) + 32 * v6);
      result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 16))(a2, v7);
      if ((_DWORD)result)
        result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v5 + 24))(v5, *v7, v7[1], a3);
      else
        ++v6;
    }
    while (v6 < *(_DWORD *)(v5 + 12));
  }
  return result;
}

void btHashedOverlappingPairCache::sortOverlappingPairs(uint64_t a1, uint64_t a2)
{
  void **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  char v26;
  _BYTE v27[4];
  int v28;
  int v29;
  void *v30;
  char v31;

  v31 = 1;
  v30 = 0;
  v28 = 0;
  v29 = 0;
  if (*(int *)(a1 + 12) < 1)
  {
    LODWORD(v6) = 0;
    goto LABEL_25;
  }
  v4 = 0;
  v5 = 0;
  LODWORD(v6) = 0;
  v7 = 0;
  do
  {
    v8 = *(_QWORD *)(a1 + 24);
    if ((_DWORD)v6 != (_DWORD)v5 || (!(_DWORD)v5 ? (v9 = 1) : (v9 = (2 * v5)), (int)v5 >= (int)v9))
    {
      v9 = v5;
      goto LABEL_19;
    }
    if ((_DWORD)v9)
      v10 = (_QWORD *)btAlignedAllocInternal(32 * (int)v9, 16);
    else
      v10 = 0;
    if ((int)v5 >= 1)
    {
      v11 = v5;
      v12 = (uint64_t *)(v4 + 3);
      v13 = v10 + 3;
      do
      {
        *(_OWORD *)(v13 - 3) = *(_OWORD *)(v12 - 3);
        *(v13 - 1) = *(v12 - 1);
        v14 = *v12;
        v12 += 4;
        *v13 = v14;
        v13 += 4;
        --v11;
      }
      while (v11);
LABEL_17:
      btAlignedFreeInternal(v4);
      goto LABEL_18;
    }
    if (v4)
      goto LABEL_17;
LABEL_18:
    v31 = 1;
    v30 = v10;
    v4 = (void **)v10;
    v29 = v9;
LABEL_19:
    v15 = v8 + 32 * v7;
    v16 = &v4[4 * (int)v6];
    *(_OWORD *)v16 = *(_OWORD *)v15;
    v16[2] = *(void **)(v15 + 16);
    v16[3] = *(void **)(v15 + 24);
    v17 = v28;
    v6 = ++v28;
    ++v7;
    v5 = v9;
  }
  while (v7 < *(int *)(a1 + 12));
  if ((v17 & 0x80000000) == 0)
  {
    v18 = v4 + 1;
    v19 = v6;
    do
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a1 + 24))(a1, *(v18 - 1), *v18, a2);
      v18 += 4;
      --v19;
    }
    while (v19);
  }
LABEL_25:
  if (*(int *)(a1 + 92) >= 1)
  {
    v20 = 0;
    v21 = *(_QWORD *)(a1 + 104);
    do
      *(_DWORD *)(v21 + 4 * v20++) = -1;
    while (v20 < *(int *)(a1 + 92));
  }
  v22 = (v6 - 1);
  if ((int)v6 > 1)
  {
    btAlignedObjectArray<btBroadphasePair>::quickSortInternal<btBroadphasePairSortPredicate>((uint64_t)v27, (uint64_t)&v26, 0, v22);
    LODWORD(v6) = v28;
  }
  if ((int)v6 >= 1)
  {
    v23 = 0;
    v24 = 0;
    do
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a1 + 16))(a1, *(_QWORD *)((char *)v30 + v23), *(_QWORD *)((char *)v30 + v23 + 8), v22);
      ++v24;
      v23 += 32;
    }
    while (v24 < v28);
  }
  if (v30)
    v25 = v31 == 0;
  else
    v25 = 1;
  if (!v25)
    btAlignedFreeInternal((void **)v30);
}

_QWORD *btHashedOverlappingPairCache::addOverlappingPair(btHashedOverlappingPairCache *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;
  int v10;

  v6 = *((_QWORD *)a1 + 5);
  if (!v6)
  {
    v7 = a2[1];
    v8 = a3[1];
    v9 = (a3[2] & v7) != 0 && (a2[2] & v8) != 0;
    if ((v8 & a2[3]) == 0)
    {
      v10 = (a3[3] & v7) != 0 || v9;
      if (v10 != 1)
        return 0;
    }
    return btHashedOverlappingPairCache::internalAddPair(a1, (uint64_t)a2, (uint64_t)a3);
  }
  if (((*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *))(*(_QWORD *)v6 + 16))(v6, a2, a3) & 1) != 0)
    return btHashedOverlappingPairCache::internalAddPair(a1, (uint64_t)a2, (uint64_t)a3);
  return 0;
}

uint64_t btHashedOverlappingPairCache::getOverlappingPairArrayPtr(btHashedOverlappingPairCache *this)
{
  return *((_QWORD *)this + 3);
}

{
  return *((_QWORD *)this + 3);
}

uint64_t btHashedOverlappingPairCache::getOverlappingPairArray(btHashedOverlappingPairCache *this)
{
  return (uint64_t)this + 8;
}

uint64_t btHashedOverlappingPairCache::getNumOverlappingPairs(btHashedOverlappingPairCache *this)
{
  return *((unsigned int *)this + 3);
}

uint64_t btHashedOverlappingPairCache::setOverlapFilterCallback(uint64_t this, btOverlapFilterCallback *a2)
{
  *(_QWORD *)(this + 40) = a2;
  return this;
}

uint64_t btHashedOverlappingPairCache::hasDeferredRemoval(btHashedOverlappingPairCache *this)
{
  return 0;
}

uint64_t btHashedOverlappingPairCache::setInternalGhostPairCallback(uint64_t this, btOverlappingPairCallback *a2)
{
  *(_QWORD *)(this + 120) = a2;
  return this;
}

void btHashedOverlappingPairCache::cleanProxyFromPairs(btBroadphaseProxy *,btDispatcher *)::CleanPairCallback::~CleanPairCallback()
{
  JUMPOUT(0x1DF0D41C0);
}

uint64_t btHashedOverlappingPairCache::cleanProxyFromPairs(btBroadphaseProxy *,btDispatcher *)::CleanPairCallback::processOverlap(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (*a2 == v2 || a2[1] == v2)
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 64))(*(_QWORD *)(a1 + 16));
  return 0;
}

void btHashedOverlappingPairCache::removeOverlappingPairsContainingProxy(btBroadphaseProxy *,btDispatcher *)::RemovePairCallback::~RemovePairCallback()
{
  JUMPOUT(0x1DF0D41C0);
}

BOOL btHashedOverlappingPairCache::removeOverlappingPairsContainingProxy(btBroadphaseProxy *,btDispatcher *)::RemovePairCallback::processOverlap(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  return *a2 == v2 || a2[1] == v2;
}

void btQuantizedBvh::btQuantizedBvh(btQuantizedBvh *this)
{
  *(_QWORD *)this = off_1EA595CB0;
  *((_DWORD *)this + 16) = 281;
  *((_BYTE *)this + 72) = 0;
  *((_BYTE *)this + 104) = 1;
  *((_QWORD *)this + 12) = 0;
  *(_QWORD *)((char *)this + 84) = 0;
  *((_BYTE *)this + 136) = 1;
  *((_QWORD *)this + 16) = 0;
  *(_QWORD *)((char *)this + 116) = 0;
  *((_BYTE *)this + 168) = 1;
  *((_QWORD *)this + 20) = 0;
  *(_QWORD *)((char *)this + 148) = 0;
  *((_BYTE *)this + 200) = 1;
  *((_QWORD *)this + 24) = 0;
  *(_QWORD *)((char *)this + 180) = 0;
  *((_DWORD *)this + 52) = 0;
  *((_BYTE *)this + 240) = 1;
  *((_QWORD *)this + 29) = 0;
  *(_QWORD *)((char *)this + 220) = 0;
  *((_DWORD *)this + 62) = 0;
  *((_OWORD *)this + 1) = xmmword_1DD02AD40;
  *((_OWORD *)this + 2) = xmmword_1DD02AD30;
}

void btQuantizedBvh::buildTree(btQuantizedBvh *this, int a2, int a3, double a4, double a5, float32x4_t a6, double a7, float32x4_t a8, float32x4_t a9, float a10, float32x4_t a11)
{
  int v13;
  int v14;
  int v16;
  double v17;
  double v18;
  float32x4_t v19;
  double v20;
  float v21;
  float32x4_t v22;
  float v23;
  int v24;
  int v25;
  float32x4_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  __int16 *v31;
  float v32;
  float v33;
  float v34;
  float32x4_t v35;
  float32x4_t v36;
  unsigned int v37;
  float32x4_t v38;
  float32x4_t *v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  float32x4_t v45;
  btVector3 v46;

  v13 = a3 - a2;
  v14 = *((_DWORD *)this + 17);
  if (a3 - a2 == 1)
  {
    btQuantizedBvh::assignInternalNodeFromLeafNode(this, *((_DWORD *)this + 17), a2);
    ++*((_DWORD *)this + 17);
  }
  else
  {
    v16 = btQuantizedBvh::calcSplittingAxis((__n128 *)this, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
    v24 = btQuantizedBvh::sortAndCalcSplittingIndex((__n128 *)this, a2, a3, v16, v17, v18, v19, v20, v21, v22, v23);
    v25 = *((_DWORD *)this + 17);
    btQuantizedBvh::setInternalNodeAabbMin((float32x4_t *)this, v25, (float32x4_t *)this + 2);
    v26 = btQuantizedBvh::setInternalNodeAabbMax((float32x4_t *)this, *((_DWORD *)this + 17), (float32x4_t *)this + 1);
    if (a3 > a2)
    {
      v29 = 16 * a2;
      v30 = ((uint64_t)a2 << 6) | 0x10;
      do
      {
        if (*((_BYTE *)this + 72))
        {
          v31 = (__int16 *)(*((_QWORD *)this + 20) + v29);
          v26.i16[0] = *v31;
          v32 = *((float *)this + 12);
          v33 = *((float *)this + 13);
          LOWORD(v27) = v31[1];
          LOWORD(v28) = v31[2];
          v34 = *((float *)this + 14);
          v46.var0.var0[0] = (float)v26.u32[0] / v32;
          v46.var0.var0[1] = (float)v27 / v33;
          *(_QWORD *)&v46.var0.var0[2] = COERCE_UNSIGNED_INT((float)v28 / v34);
          v35 = *((float32x4_t *)this + 1);
          v36 = vaddq_f32((float32x4_t)v46, v35);
          v46 = (btVector3)v36;
          v36.i16[0] = v31[3];
          v36.f32[0] = (float)v36.u32[0] / v32;
          LOWORD(v32) = v31[4];
          *(float *)&v37 = (float)LODWORD(v32) / v33;
          LOWORD(v33) = v31[5];
          v45.i64[0] = __PAIR64__(v37, v36.u32[0]);
          v45.i64[1] = COERCE_UNSIGNED_INT((float)LODWORD(v33) / v34);
          v38 = vaddq_f32(v45, v35);
        }
        else
        {
          v39 = (float32x4_t *)(*((_QWORD *)this + 12) + v30);
          v46 = (btVector3)v39[-1];
          v38 = *v39;
        }
        v40 = *((_DWORD *)this + 17);
        v45 = v38;
        v26 = btQuantizedBvh::mergeInternalNodeAabb((float32x4_t *)this, v40, (float32x4_t *)&v46, &v45);
        v29 += 16;
        v30 += 64;
        --v13;
      }
      while (v13);
    }
    v41 = *((_DWORD *)this + 17) + 1;
    *((_DWORD *)this + 17) = v41;
    btQuantizedBvh::buildTree(this, a2, v24);
    v42 = *((_DWORD *)this + 17);
    btQuantizedBvh::buildTree(this, v24, a3);
    v43 = *((_DWORD *)this + 17) - v14;
    v44 = *((unsigned __int8 *)this + 72);
    if (*((_BYTE *)this + 72) && v43 >= 129)
    {
      btQuantizedBvh::updateSubtreeHeaders(this, v41, v42);
      v44 = *((unsigned __int8 *)this + 72);
    }
    if (v44)
      *(_DWORD *)(*((_QWORD *)this + 24) + 16 * v25 + 12) = -v43;
    else
      *(_DWORD *)(*((_QWORD *)this + 16) + ((uint64_t)v25 << 6) + 32) = v43;
  }
}

float32x4_t btQuantizedBvh::setQuantizationValues(float32x4_t *this, float32x4_t *a2, float32x4_t *a3, int32x2_t a4)
{
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t result;

  v4 = (float32x4_t)vdupq_lane_s32(a4, 0);
  v4.i32[3] = 0;
  v5 = vsubq_f32(*a2, v4);
  v6 = v5;
  v6.i32[3] = 0;
  this[1] = v6;
  v7 = vaddq_f32(v4, *a3);
  v8 = vsubq_f32(v7, v5);
  v8.i32[3] = 0;
  v9 = vrecpeq_f32(v8);
  v10 = vmulq_f32(v9, vrecpsq_f32(v8, v9));
  v11 = vmulq_f32(vrecpsq_f32(v8, v10), vmulq_f32(v10, (float32x4_t)xmmword_1DD02C820));
  _Q5 = vmulq_f32(vsubq_f32(v6, v6), v11);
  *(float32x2_t *)_Q5.f32 = vdiv_f32(vcvt_f32_u32((uint32x2_t)(*(_QWORD *)&vcvt_s32_f32(*(float32x2_t *)_Q5.f32) & 0xFFFFFFFEFFFFFFFELL)), *(float32x2_t *)v11.f32);
  _Q5.f32[2] = (float)((int)_Q5.f32[2] & 0xFFFE) / v11.f32[2];
  v13 = vsubq_f32(vaddq_f32(_Q5, v5), v4);
  v13.i32[3] = 0;
  v14 = vminq_f32(v6, v13);
  v15 = vmulq_f32(vsubq_f32(v7, v14), v11);
  __asm { FMOV            V5.2S, #1.0 }
  *(float32x2_t *)v15.f32 = vdiv_f32(vcvt_f32_u32((uint32x2_t)(*(_QWORD *)&vcvt_s32_f32(vadd_f32(*(float32x2_t *)v15.f32, *(float32x2_t *)_Q5.f32)) | 0x100000001)), *(float32x2_t *)v11.f32);
  v15.f32[2] = (float)((int)(float)(v15.f32[2] + 1.0) | 1u) / v11.f32[2];
  this[4].i8[8] = 1;
  v15.i32[3] = 0;
  v20 = vmaxq_f32(v7, vaddq_f32(v4, vaddq_f32(v14, v15)));
  this[1] = v14;
  this[2] = v20;
  v21 = vsubq_f32(v20, v14);
  v21.i32[3] = 0;
  v22 = vrecpeq_f32(v21);
  v23 = vmulq_f32(v22, vrecpsq_f32(v21, v22));
  result = vmulq_f32(vrecpsq_f32(v21, v23), vmulq_f32(v23, (float32x4_t)xmmword_1DD02C820));
  this[3] = result;
  return result;
}

void btQuantizedBvh::~btQuantizedBvh(btQuantizedBvh *this)
{
  char *v2;

  *(_QWORD *)this = off_1EA595CB0;
  v2 = (char *)this + 80;
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)this + 216);
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)this + 176);
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)this + 144);
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)this + 112);
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)v2);
}

{
  void **v1;

  btQuantizedBvh::~btQuantizedBvh(this);
  btAlignedFreeInternal(v1);
}

__n128 btQuantizedBvh::assignInternalNodeFromLeafNode(btQuantizedBvh *this, int a2, int a3)
{
  __n128 result;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  if (*((_BYTE *)this + 72))
  {
    result = *(__n128 *)(*((_QWORD *)this + 20) + 16 * a3);
    *(__n128 *)(*((_QWORD *)this + 24) + 16 * a2) = result;
  }
  else
  {
    v4 = *((_QWORD *)this + 12) + ((uint64_t)a3 << 6);
    v5 = *((_QWORD *)this + 16) + ((uint64_t)a2 << 6);
    *(_OWORD *)v5 = *(_OWORD *)v4;
    *(_OWORD *)(v5 + 16) = *(_OWORD *)(v4 + 16);
    result = *(__n128 *)(v4 + 32);
    v6 = *(_OWORD *)(v4 + 48);
    *(__n128 *)(v5 + 32) = result;
    *(_OWORD *)(v5 + 48) = v6;
  }
  return result;
}

uint64_t btQuantizedBvh::calcSplittingAxis(__n128 *this, int a2, int a3, double a4, double a5, float32x4_t a6, double a7, float32x4_t a8, float32x4_t a9, float a10, float32x4_t a11)
{
  float32x4_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  float32x4_t v15;
  float32x4_t v16;
  uint64_t v17;
  _WORD *v18;
  float v19;
  float v20;
  unsigned int v21;
  float32x4_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  float32x4_t v26;
  float32x4_t *v27;
  float v28;
  float32x4_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float32x4_t v33;
  float32x4_t v34;
  _WORD *v35;
  float v36;
  float v37;
  unsigned int v38;
  float v39;
  float32x4_t v40;
  float32x4_t v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  float32x4_t v46;
  float32x4_t *v47;
  float32x4_t v48;
  float32x4_t v49;
  _BOOL4 v50;

  v12 = a3 - a2;
  if (a3 <= a2)
  {
    v28 = (float)v12;
    v33 = 0uLL;
  }
  else
  {
    v13 = 16 * a2;
    v14 = ((uint64_t)a2 << 6) | 0x10;
    v15 = 0uLL;
    v16.i64[0] = 0x3F0000003F000000;
    v16.i64[1] = 0x3F0000003F000000;
    v17 = a3 - (uint64_t)a2;
    do
    {
      if (this[4].n128_u8[8])
      {
        v18 = (_WORD *)(this[10].n128_u64[0] + v13);
        a6.i16[0] = v18[3];
        v19 = this[3].n128_f32[0];
        v20 = this[3].n128_f32[1];
        a9.i16[0] = v18[4];
        LOWORD(a10) = v18[5];
        *(float *)&v21 = (float)LODWORD(a10);
        a11.i32[0] = this[3].n128_i32[2];
        v11.i32[3] = 0;
        v11.f32[0] = (float)a6.u32[0] / v19;
        v11.f32[1] = (float)a9.u32[0] / v20;
        v11.f32[2] = *(float *)&v21 / a11.f32[0];
        a9 = (float32x4_t)this[1];
        v22 = vaddq_f32(a9, v11);
        LOWORD(v21) = *v18;
        *(float *)&v23 = (float)v21;
        *(float *)&v24 = *(float *)&v23 / v19;
        LOWORD(v23) = v18[1];
        *(float *)&v25 = (float)v23;
        a8.f32[0] = *(float *)&v25 / v20;
        LOWORD(v25) = v18[2];
        a10 = (float)v25;
        v11.i64[0] = __PAIR64__(a8.u32[0], v24);
        v11.f32[2] = a10 / a11.f32[0];
        v26 = vaddq_f32(a9, v11);
      }
      else
      {
        v27 = (float32x4_t *)(this[6].n128_u64[0] + v14);
        v26 = v27[-1];
        v22 = *v27;
      }
      a6 = vmulq_f32(vaddq_f32(v22, v26), v16);
      a6.i32[3] = 0;
      v15 = vaddq_f32(v15, a6);
      v13 += 16;
      v14 += 64;
      --v17;
    }
    while (v17);
    v28 = (float)v12;
    v29 = vmulq_n_f32(v15, 1.0 / (float)v12);
    v30 = 16 * a2;
    v31 = ((uint64_t)a2 << 6) | 0x10;
    v32 = a3 - (uint64_t)a2;
    v33 = 0uLL;
    v34.i64[0] = 0x3F0000003F000000;
    v34.i64[1] = 0x3F0000003F000000;
    do
    {
      if (this[4].n128_u8[8])
      {
        v35 = (_WORD *)(this[10].n128_u64[0] + v30);
        a8.i16[0] = v35[3];
        v36 = this[3].n128_f32[0];
        v37 = this[3].n128_f32[1];
        a11.i16[0] = v35[4];
        v11.i16[0] = v35[5];
        *(float *)&v38 = (float)v11.u32[0];
        v39 = this[3].n128_f32[2];
        v40.i32[3] = 0;
        v40.f32[0] = (float)a8.u32[0] / v36;
        v40.f32[1] = (float)a11.u32[0] / v37;
        v40.f32[2] = *(float *)&v38 / v39;
        a11 = (float32x4_t)this[1];
        v41 = vaddq_f32(a11, v40);
        LOWORD(v38) = *v35;
        *(float *)&v42 = (float)v38;
        *(float *)&v43 = *(float *)&v42 / v36;
        LOWORD(v42) = v35[1];
        *(float *)&v44 = (float)v42;
        *(float *)&v45 = *(float *)&v44 / v37;
        LOWORD(v44) = v35[2];
        v11.f32[0] = (float)v44;
        v40.i32[3] = 0;
        v40.i64[0] = __PAIR64__(v45, v43);
        v40.f32[2] = v11.f32[0] / v39;
        v46 = vaddq_f32(a11, v40);
      }
      else
      {
        v47 = (float32x4_t *)(this[6].n128_u64[0] + v31);
        v46 = v47[-1];
        v41 = *v47;
      }
      v48 = vsubq_f32(vmulq_f32(vaddq_f32(v41, v46), v34), v29);
      v48.i32[3] = 0;
      a8 = vmulq_f32(v48, v48);
      v33 = vaddq_f32(v33, a8);
      v30 += 16;
      v31 += 64;
      --v32;
    }
    while (v32);
  }
  v49 = vmulq_n_f32(v33, 1.0 / (float)(v28 + -1.0));
  v50 = v49.f32[0] < v49.f32[1];
  if (v49.f32[0] < v49.f32[1])
    v49.f32[0] = v49.f32[1];
  if (v49.f32[0] >= v49.f32[2])
    return v50;
  else
    return 2;
}

uint64_t btQuantizedBvh::sortAndCalcSplittingIndex(__n128 *this, int a2, int a3, int a4, double a5, double a6, float32x4_t a7, double a8, float a9, float32x4_t a10, float a11)
{
  int v12;
  int v13;
  float32x4_t v15;
  uint64_t v16;
  uint64_t v17;
  float32x4_t v18;
  uint64_t v19;
  _WORD *v20;
  float v21;
  float v22;
  unsigned int v23;
  float v24;
  float32x4_t v25;
  float32x4_t v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  float32x4_t v30;
  float32x4_t *v31;
  float32x4_t v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float32x4_t v38;
  int v39;
  _WORD *v40;
  float v41;
  float v42;
  unsigned int v43;
  float v44;
  float32x4_t v45;
  float32x4_t v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  float32x4_t v51;
  float32x4_t *v52;
  float32x4_t v56;
  float32x4_t v57;

  v57 = 0uLL;
  v12 = a2;
  v13 = a3 - a2;
  if (a3 > a2)
  {
    v15 = v57;
    v16 = 16 * a2;
    v17 = ((uint64_t)a2 << 6) | 0x10;
    v18.i64[0] = 0x3F0000003F000000;
    v18.i64[1] = 0x3F0000003F000000;
    v19 = a3 - (uint64_t)a2;
    do
    {
      if (this[4].n128_u8[8])
      {
        v20 = (_WORD *)(this[10].n128_u64[0] + v16);
        a7.i16[0] = v20[3];
        v21 = this[3].n128_f32[0];
        v22 = this[3].n128_f32[1];
        a10.i16[0] = v20[4];
        LOWORD(a11) = v20[5];
        *(float *)&v23 = (float)LODWORD(a11);
        v24 = this[3].n128_f32[2];
        v25.i32[3] = 0;
        v25.f32[0] = (float)a7.u32[0] / v21;
        v25.f32[1] = (float)a10.u32[0] / v22;
        v25.f32[2] = *(float *)&v23 / v24;
        a10 = (float32x4_t)this[1];
        v26 = vaddq_f32(a10, v25);
        LOWORD(v23) = *v20;
        *(float *)&v27 = (float)v23;
        *(float *)&v28 = *(float *)&v27 / v21;
        LOWORD(v27) = v20[1];
        *(float *)&v29 = (float)v27;
        a9 = *(float *)&v29 / v22;
        LOWORD(v29) = v20[2];
        a11 = (float)v29;
        v25.i32[3] = 0;
        v25.i64[0] = __PAIR64__(LODWORD(a9), v28);
        v25.f32[2] = a11 / v24;
        v30 = vaddq_f32(a10, v25);
      }
      else
      {
        v31 = (float32x4_t *)(this[6].n128_u64[0] + v17);
        v30 = v31[-1];
        v26 = *v31;
      }
      a7 = vmulq_f32(vaddq_f32(v26, v30), v18);
      a7.i32[3] = 0;
      v15 = vaddq_f32(v15, a7);
      v16 += 16;
      v17 += 64;
      --v19;
    }
    while (v19);
    v32 = vmulq_n_f32(v15, 1.0 / (float)v13);
    v57 = v32;
    v33 = a4;
    v34 = v57.f32[a4];
    v35 = 16 * a2;
    v36 = ((uint64_t)a2 << 6) | 0x10;
    v37 = a3 - (uint64_t)a2;
    v38.i64[0] = 0x3F0000003F000000;
    v38.i64[1] = 0x3F0000003F000000;
    v39 = a2;
    v12 = a2;
    do
    {
      if (this[4].n128_u8[8])
      {
        v40 = (_WORD *)(this[10].n128_u64[0] + v35);
        v32.i16[0] = v40[3];
        v41 = this[3].n128_f32[0];
        v42 = this[3].n128_f32[1];
        v30.i16[0] = v40[4];
        LOWORD(a9) = v40[5];
        *(float *)&v43 = (float)LODWORD(a9);
        v44 = this[3].n128_f32[2];
        v45.i32[3] = 0;
        v45.f32[0] = (float)v32.u32[0] / v41;
        v45.f32[1] = (float)v30.u32[0] / v42;
        v45.f32[2] = *(float *)&v43 / v44;
        v30 = (float32x4_t)this[1];
        v46 = vaddq_f32(v30, v45);
        LOWORD(v43) = *v40;
        *(float *)&v47 = (float)v43;
        *(float *)&v48 = *(float *)&v47 / v41;
        LOWORD(v47) = v40[1];
        *(float *)&v49 = (float)v47;
        *(float *)&v50 = *(float *)&v49 / v42;
        LOWORD(v49) = v40[2];
        a9 = (float)v49;
        v45.i32[3] = 0;
        v45.i64[0] = __PAIR64__(v50, v48);
        v45.f32[2] = a9 / v44;
        v51 = vaddq_f32(v30, v45);
      }
      else
      {
        v52 = (float32x4_t *)(this[6].n128_u64[0] + v36);
        v51 = v52[-1];
        v46 = *v52;
      }
      v32 = vmulq_f32(vaddq_f32(v46, v51), v38);
      v32.i32[3] = 0;
      v56 = v32;
      v32.i32[0] = v56.i32[v33];
      if (v32.f32[0] > v34)
      {
        v32.i64[0] = btQuantizedBvh::swapLeafNodes((btQuantizedBvh *)this, v39, v12).n128_u64[0];
        v38.i64[0] = 0x3F0000003F000000;
        v38.i64[1] = 0x3F0000003F000000;
        ++v12;
      }
      ++v39;
      v35 += 16;
      v36 += 64;
      --v37;
    }
    while (v37);
  }
  if (v12 >= ~(v13 / 3) + a3 || v12 <= v13 / 3 + a2)
    return (a2 + (v13 >> 1));
  else
    return v12;
}

float32x4_t btQuantizedBvh::setInternalNodeAabbMin(float32x4_t *this, int a2, float32x4_t *a3)
{
  _WORD *v3;
  float32x4_t result;

  if (this[4].i8[8])
  {
    v3 = (_WORD *)(this[12].i64[0] + 16 * a2);
    result = vmulq_f32(this[3], vsubq_f32(*a3, this[1]));
    *v3 = (int)result.f32[0] & 0xFFFE;
    v3[1] = (int)result.f32[1] & 0xFFFE;
    result.i32[0] = result.i32[2];
    v3[2] = (int)result.f32[2] & 0xFFFE;
  }
  else
  {
    result = *a3;
    *(float32x4_t *)(this[8].i64[0] + ((uint64_t)a2 << 6)) = *a3;
  }
  return result;
}

float32x4_t btQuantizedBvh::setInternalNodeAabbMax(float32x4_t *this, int a2, float32x4_t *a3)
{
  _WORD *v3;
  float32x4_t result;

  if (this[4].i8[8])
  {
    v3 = (_WORD *)(this[12].i64[0] + 16 * a2);
    result = vmulq_f32(this[3], vsubq_f32(*a3, this[1]));
    v3[3] = (int)(float)(result.f32[0] + 1.0) | 1;
    v3[4] = (int)(float)(result.f32[1] + 1.0) | 1;
    result.f32[0] = result.f32[2] + 1.0;
    v3[5] = (int)(float)(result.f32[2] + 1.0) | 1;
  }
  else
  {
    result = *a3;
    *(float32x4_t *)(this[8].i64[0] + ((uint64_t)a2 << 6) + 16) = *a3;
  }
  return result;
}

float32x4_t btQuantizedBvh::mergeInternalNodeAabb(float32x4_t *this, int a2, float32x4_t *a3, float32x4_t *a4)
{
  uint64_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t result;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  float32x4_t *v12;
  _WORD v13[3];
  _WORD v14[3];

  if (this[4].i8[8])
  {
    v4 = 0;
    v5 = this[1];
    v6 = this[3];
    v7 = vmulq_f32(v6, vsubq_f32(*a3, v5));
    v14[0] = (int)v7.f32[0] & 0xFFFE;
    v14[1] = (int)v7.f32[1] & 0xFFFE;
    v14[2] = (int)v7.f32[2] & 0xFFFE;
    result = vmulq_f32(v6, vsubq_f32(*a4, v5));
    v13[0] = (int)(float)(result.f32[0] + 1.0) | 1;
    v13[1] = (int)(float)(result.f32[1] + 1.0) | 1;
    result.f32[0] = result.f32[2] + 1.0;
    v13[2] = (int)(float)(result.f32[2] + 1.0) | 1;
    v9 = this[12].i64[0] + 16 * a2;
    do
    {
      v10 = (unsigned __int16)v14[v4];
      if (*(unsigned __int16 *)(v9 + v4 * 2) > v10)
        *(_WORD *)(v9 + v4 * 2) = v10;
      v11 = (unsigned __int16)v13[v4];
      if (*(unsigned __int16 *)(v9 + v4 * 2 + 6) < v11)
        *(_WORD *)(v9 + v4 * 2 + 6) = v11;
      ++v4;
    }
    while (v4 != 3);
  }
  else
  {
    *(float32x4_t *)(this[8].i64[0] + ((uint64_t)a2 << 6)) = vminq_f32(*(float32x4_t *)(this[8].i64[0] + ((uint64_t)a2 << 6)), *a3);
    v12 = (float32x4_t *)(this[8].i64[0] + ((uint64_t)a2 << 6));
    result = vmaxq_f32(v12[1], *a4);
    v12[1] = result;
  }
  return result;
}

void btQuantizedBvh::updateSubtreeHeaders(btQuantizedBvh *this, int a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  _OWORD *v21;
  __int128 v22;
  void **v23;
  uint64_t v24;
  _WORD *v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  _OWORD *v33;
  __int128 v34;
  void **v35;
  uint64_t v36;
  _WORD *v37;
  int v38;
  uint64_t v39;

  v5 = *((_QWORD *)this + 24);
  v6 = v5 + 16 * a2;
  v7 = *(_DWORD *)(v6 + 12);
  if (v7 < 0)
    v8 = -v7;
  else
    v8 = 1;
  v9 = v5 + 16 * a3;
  v10 = *(_DWORD *)(v9 + 12);
  if (v10 < 0)
    v11 = -v10;
  else
    v11 = 1;
  if (v8 <= 0x80)
  {
    v13 = a2;
    v14 = *((_DWORD *)this + 55);
    v15 = v14;
    if (v14 == *((_DWORD *)this + 56))
    {
      v16 = 2 * v14;
      if (!v14)
        v16 = 1;
      if (v14 < v16)
      {
        v38 = v16;
        v39 = a2;
        if (v16)
        {
          v17 = btAlignedAllocInternal(32 * v16, 16);
          v14 = *((_DWORD *)this + 55);
        }
        else
        {
          v17 = 0;
        }
        if (v14 >= 1)
        {
          v18 = 0;
          v19 = 32 * v14;
          do
          {
            v20 = (_OWORD *)(v17 + v18);
            v21 = (_OWORD *)(*((_QWORD *)this + 29) + v18);
            v22 = v21[1];
            *v20 = *v21;
            v20[1] = v22;
            v18 += 32;
          }
          while (v19 != v18);
        }
        v23 = (void **)*((_QWORD *)this + 29);
        if (v23 && *((_BYTE *)this + 240))
          btAlignedFreeInternal(v23);
        *((_BYTE *)this + 240) = 1;
        *((_QWORD *)this + 29) = v17;
        v13 = v39;
        *((_DWORD *)this + 56) = v38;
        v14 = *((_DWORD *)this + 55);
      }
    }
    *((_DWORD *)this + 55) = v14 + 1;
    v24 = *((_QWORD *)this + 29) + 32 * v15;
    *(_WORD *)v24 = *(_WORD *)v6;
    *(_WORD *)(v24 + 2) = *(_WORD *)(v6 + 2);
    *(_WORD *)(v24 + 4) = *(_WORD *)(v6 + 4);
    v25 = (_WORD *)(v5 + 16 * v13);
    *(_WORD *)(v24 + 6) = v25[3];
    *(_WORD *)(v24 + 8) = v25[4];
    *(_WORD *)(v24 + 10) = v25[5];
    *(_DWORD *)(v24 + 12) = a2;
    *(_DWORD *)(v24 + 16) = v8;
  }
  if (v11 <= 128)
  {
    v26 = *((_DWORD *)this + 55);
    v27 = v26;
    if (v26 == *((_DWORD *)this + 56))
    {
      v28 = v26 ? 2 * v26 : 1;
      if (v26 < v28)
      {
        if (v28)
        {
          v29 = btAlignedAllocInternal(32 * v28, 16);
          v26 = *((_DWORD *)this + 55);
        }
        else
        {
          v29 = 0;
        }
        if (v26 >= 1)
        {
          v30 = 0;
          v31 = 32 * v26;
          do
          {
            v32 = (_OWORD *)(v29 + v30);
            v33 = (_OWORD *)(*((_QWORD *)this + 29) + v30);
            v34 = v33[1];
            *v32 = *v33;
            v32[1] = v34;
            v30 += 32;
          }
          while (v31 != v30);
        }
        v35 = (void **)*((_QWORD *)this + 29);
        if (v35 && *((_BYTE *)this + 240))
          btAlignedFreeInternal(v35);
        *((_BYTE *)this + 240) = 1;
        *((_QWORD *)this + 29) = v29;
        *((_DWORD *)this + 56) = v28;
        v26 = *((_DWORD *)this + 55);
      }
    }
    *((_DWORD *)this + 55) = v26 + 1;
    v36 = *((_QWORD *)this + 29) + 32 * v27;
    *(_WORD *)v36 = *(_WORD *)v9;
    *(_WORD *)(v36 + 2) = *(_WORD *)(v9 + 2);
    *(_WORD *)(v36 + 4) = *(_WORD *)(v9 + 4);
    v37 = (_WORD *)(v5 + 16 * a3);
    *(_WORD *)(v36 + 6) = v37[3];
    *(_WORD *)(v36 + 8) = v37[4];
    *(_WORD *)(v36 + 10) = v37[5];
    *(_DWORD *)(v36 + 12) = a3;
    *(_DWORD *)(v36 + 16) = v11;
  }
  *((_DWORD *)this + 62) = *((_DWORD *)this + 55);
}

__n128 btQuantizedBvh::swapLeafNodes(btQuantizedBvh *this, int a2, int a3)
{
  uint64_t v3;
  __n128 result;
  uint64_t v5;
  __n128 *v6;
  __n128 v7;
  __n128 v8;
  __n128 *v9;
  __n128 v10;
  __n128 v11;
  __n128 *v12;
  __n128 v13;
  __n128 v14;

  if (*((_BYTE *)this + 72))
  {
    v3 = *((_QWORD *)this + 20);
    result = *(__n128 *)(v3 + 16 * a2);
    *(_OWORD *)(v3 + 16 * a2) = *(_OWORD *)(v3 + 16 * a3);
    *(__n128 *)(*((_QWORD *)this + 20) + 16 * a3) = result;
  }
  else
  {
    v5 = *((_QWORD *)this + 12);
    v6 = (__n128 *)(v5 + ((uint64_t)a2 << 6));
    v7 = *v6;
    v8 = v6[1];
    v13 = v6[2];
    v14 = v6[3];
    v9 = (__n128 *)(v5 + ((uint64_t)a3 << 6));
    v10 = v9[1];
    *v6 = *v9;
    v6[1] = v10;
    v11 = v9[3];
    v6[2] = v9[2];
    v6[3] = v11;
    v12 = (__n128 *)(*((_QWORD *)this + 12) + ((uint64_t)a3 << 6));
    *v12 = v7;
    v12[1] = v8;
    result = v13;
    v12[2] = v13;
    v12[3] = v14;
  }
  return result;
}

uint64_t btQuantizedBvh::reportAabbOverlappingNodex(uint64_t result, uint64_t a2, float32x4_t *a3, float32x4_t *a4)
{
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  int v9;
  unsigned __int16 v10[3];
  unsigned __int16 v11[3];

  if (!*(_BYTE *)(result + 72))
    return btQuantizedBvh::walkStacklessTree(result, a2, a3->f32, a4->f32);
  v4 = *(float32x4_t *)(result + 16);
  v5 = *(float32x4_t *)(result + 32);
  v6 = *(float32x4_t *)(result + 48);
  v7 = vmulq_f32(v6, vsubq_f32(vminq_f32(vmaxq_f32(*a3, v4), v5), v4));
  v11[0] = (int)v7.f32[0] & 0xFFFE;
  v11[1] = (int)v7.f32[1] & 0xFFFE;
  v11[2] = (int)v7.f32[2] & 0xFFFE;
  v8 = vmulq_f32(v6, vsubq_f32(vminq_f32(vmaxq_f32(*a4, v4), v5), v4));
  v10[0] = (int)(float)(v8.f32[0] + 1.0) | 1;
  v10[1] = (int)(float)(v8.f32[1] + 1.0) | 1;
  v10[2] = (int)(float)(v8.f32[2] + 1.0) | 1;
  v9 = *(_DWORD *)(result + 208);
  switch(v9)
  {
    case 2:
      return btQuantizedBvh::walkRecursiveQuantizedTreeAgainstQueryAabb(result, *(unsigned __int16 **)(result + 192), a2, v11, v10);
    case 1:
      return btQuantizedBvh::walkStacklessQuantizedTreeCacheFriendly(result, a2, v11, v10);
    case 0:
      return btQuantizedBvh::walkStacklessQuantizedTree(result, a2, v11, v10, 0, *(_DWORD *)(result + 68));
  }
  return result;
}

uint64_t btQuantizedBvh::walkStacklessQuantizedTree(uint64_t result, uint64_t a2, unsigned __int16 *a3, unsigned __int16 *a4, int a5, int a6)
{
  int v7;
  int v11;
  unsigned __int16 *v12;
  int v18;
  int v19;

  if (a5 < a6)
  {
    v7 = a5;
    v11 = 0;
    v12 = (unsigned __int16 *)(*(_QWORD *)(result + 192) + 16 * a5);
    while (1)
    {
      v18 = *a3 <= v12[3]
         && *a4 >= *v12
         && a3[2] <= v12[5]
         && a4[2] >= v12[2]
         && a3[1] <= v12[4]
         && a4[1] >= v12[1];
      v19 = *((_DWORD *)v12 + 3);
      if (v19 < 0 || !v18)
      {
        if (((v19 < 0) & ~v18) != 0)
        {
          v12 += 8 * -v19;
          v7 -= v19;
          goto LABEL_27;
        }
      }
      else
      {
        result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 16))(a2, v19 >> 21, v19 & 0x1FFFFF);
      }
      v12 += 8;
      ++v7;
LABEL_27:
      ++v11;
      if (v7 >= a6)
        goto LABEL_30;
    }
  }
  v11 = 0;
LABEL_30:
  if (maxIterations < v11)
    maxIterations = v11;
  return result;
}

uint64_t btQuantizedBvh::walkStacklessQuantizedTreeCacheFriendly(uint64_t result, uint64_t a2, unsigned __int16 *a3, unsigned __int16 *a4)
{
  int v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int16 *v11;

  v4 = *(_DWORD *)(result + 220);
  if (v4 >= 1)
  {
    v8 = result;
    v9 = 0;
    for (i = 0; i < v4; ++i)
    {
      v11 = (unsigned __int16 *)(*(_QWORD *)(v8 + 232) + v9);
      result = a3[1];
      if (*a3 <= v11[3]
        && *a4 >= *v11
        && a3[2] <= v11[5]
        && a4[2] >= v11[2]
        && result <= v11[4]
        && a4[1] >= v11[1])
      {
        result = btQuantizedBvh::walkStacklessQuantizedTree(v8, a2, a3, a4, *((_DWORD *)v11 + 3), *((_DWORD *)v11 + 4) + *((_DWORD *)v11 + 3));
        v4 = *(_DWORD *)(v8 + 220);
      }
      v9 += 32;
    }
  }
  return result;
}

uint64_t btQuantizedBvh::walkRecursiveQuantizedTreeAgainstQueryAabb(uint64_t result, unsigned __int16 *a2, uint64_t a3, unsigned __int16 *a4, unsigned __int16 *a5)
{
  uint64_t v9;
  unsigned int v10;
  int v11;

  v9 = result;
  while (*a4 <= a2[3]
       && *a5 >= *a2
       && a4[2] <= a2[5]
       && a5[2] >= a2[2]
       && a4[1] <= a2[4]
       && a5[1] >= a2[1])
  {
    v10 = *((_DWORD *)a2 + 3);
    if ((v10 & 0x80000000) == 0)
      return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a3 + 16))(a3, v10 >> 21, v10 & 0x1FFFFF);
    result = btQuantizedBvh::walkRecursiveQuantizedTreeAgainstQueryAabb(v9, a2 + 8, a3, a4, a5);
    v11 = *((_DWORD *)a2 + 7);
    if (v11 >= 0)
      a2 += 16;
    else
      a2 += 8 * -v11 + 8;
  }
  return result;
}

uint64_t btQuantizedBvh::walkStacklessTree(uint64_t result, uint64_t a2, float *a3, float *a4)
{
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  _BOOL4 v11;
  BOOL v12;
  uint64_t v13;
  int v14;
  BOOL v15;

  if (*(int *)(result + 68) >= 1)
  {
    v7 = result;
    v8 = 0;
    v9 = 0;
    v10 = *(_QWORD *)(result + 128);
    while (1)
    {
      v11 = *a3 <= *(float *)(v10 + 16) && *a4 >= *(float *)v10;
      if (a3[2] <= *(float *)(v10 + 24))
      {
        if (a4[2] < *(float *)(v10 + 8))
          v11 = 0;
      }
      else
      {
        v11 = 0;
      }
      if (a3[1] <= *(float *)(v10 + 20) && a4[1] >= *(float *)(v10 + 4))
      {
        v14 = *(_DWORD *)(v10 + 32);
        v15 = v14 == -1;
        v12 = v14 == -1;
        if (v15 && v11)
        {
          result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(unsigned int *)(v10 + 36), *(unsigned int *)(v10 + 40));
LABEL_21:
          v10 += 64;
          ++v9;
          goto LABEL_22;
        }
      }
      else
      {
        v11 = 0;
        v12 = *(_DWORD *)(v10 + 32) == -1;
      }
      if (v12 || v11)
        goto LABEL_21;
      v13 = *(int *)(v10 + 32);
      v10 += v13 << 6;
      v9 += v13;
LABEL_22:
      ++v8;
      if (v9 >= *(_DWORD *)(v7 + 68))
        goto LABEL_25;
    }
  }
  v8 = 0;
LABEL_25:
  if (maxIterations < v8)
    maxIterations = v8;
  return result;
}

uint64_t btQuantizedBvh::walkStacklessTreeAgainstRay(uint64_t result, uint64_t a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5, float32x4_t *a6, double a7, double a8, double a9, double a10, double a11, double a12, __n128 a13)
{
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  int8x16_t v16;
  float32x4_t v17;
  float v18;
  float v19;
  float v20;
  uint64_t v25;
  int v26;
  int v27;
  float *v28;
  float32x4_t *v29;
  int8x16_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float *v37;
  float *v38;
  float32x4_t v39;
  BOOL v40;
  char v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v48;
  float v49;
  float v50;
  _BOOL4 v52;
  BOOL v53;
  uint64_t v54;
  __int32 v55;
  BOOL v56;
  float *v57;
  float *v58;
  uint64_t v59;
  float32x4_t v60;
  float *v61;
  float32x4_t v62;
  __n128 v63;
  _OWORD v64[2];
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v13 = *a3;
  v14 = *a4;
  v15 = vsubq_f32(*a4, *a3);
  v15.i32[3] = 0;
  v16 = (int8x16_t)vmulq_f32(v15, v15);
  v17 = vmulq_n_f32(v15, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v16.i8, *(float32x2_t *)v16.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL)).f32[0]));
  if (v17.f32[1] == 0.0)
    v18 = 1.0e18;
  else
    v18 = 1.0 / v17.f32[1];
  if (v17.f32[2] == 0.0)
    v19 = 1.0e18;
  else
    v19 = 1.0 / v17.f32[2];
  if (v17.f32[0] == 0.0)
    v20 = 1.0e18;
  else
    v20 = 1.0 / v17.f32[0];
  if (*(int *)(result + 68) >= 1)
  {
    v25 = result;
    v26 = 0;
    v27 = 0;
    v28 = (float *)&v64[v18 >= 0.0] + 1;
    v29 = *(float32x4_t **)(result + 128);
    v30 = (int8x16_t)vmulq_f32(v17, v15);
    a13.n128_u64[0] = (unint64_t)vadd_f32(vpadd_f32(*(float32x2_t *)v30.i8, *(float32x2_t *)v30.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL));
    v31 = vaddq_f32(vmaxq_f32(v13, v14), *a6);
    v32 = vaddq_f32(vminq_f32(v13, v14), *a5);
    v33 = v32.f32[2];
    v34 = v31.f32[2];
    v35 = v32.f32[1];
    v36 = v31.f32[1];
    v37 = (float *)&v64[v19 < 0.0] + 2;
    v38 = (float *)&v64[v19 >= 0.0] + 2;
    while (1)
    {
      v39 = vsubq_f32(v29[1], *a5);
      v64[0] = vsubq_f32(*v29, *a6);
      v64[1] = v39;
      v40 = v32.f32[0] <= v29[1].f32[0] && v31.f32[0] >= v29->f32[0];
      if (v33 <= v29[1].f32[2])
      {
        if (v34 < v29->f32[2])
          v40 = 0;
      }
      else
      {
        v40 = 0;
      }
      if (v35 > v29[1].f32[1])
        goto LABEL_36;
      v41 = !v40;
      if (v36 < v29->f32[1])
        v41 = 1;
      if ((v41 & 1) != 0)
        goto LABEL_36;
      v42 = a3->f32[1];
      v43 = v20 * (float)(*(float *)&v64[v20 < 0.0] - a3->f32[0]);
      v44 = v20 * (float)(*(float *)&v64[v20 >= 0.0] - a3->f32[0]);
      v45 = v18 * (float)(*((float *)&v64[v18 < 0.0] + 1) - v42);
      v46 = v18 * (float)(*v28 - v42);
      if (v43 > v46 || v45 > v44)
        goto LABEL_36;
      if (v45 > v43)
        v43 = v45;
      if (v46 < v44)
        v44 = v46;
      v48 = a3->f32[2];
      v49 = v19 * (float)(*v37 - v48);
      v50 = v19 * (float)(*v38 - v48);
      if (v43 <= v50 && v49 <= v44)
      {
        if (v49 > v43)
          v43 = v49;
        if (v50 < v44)
          v44 = v50;
        v52 = v43 < a13.n128_f32[0];
        if (v44 <= 0.0)
          v52 = 0;
        v55 = v29[2].i32[0];
        v56 = v55 == -1;
        v53 = v55 == -1;
        if (v56 && v52)
        {
          v58 = v37;
          v59 = a2;
          v61 = v28;
          v62 = v31;
          v63 = a13;
          v60 = v32;
          v57 = v38;
          result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 16))(a2, v29[2].u32[1], v29[2].u32[2]);
          v38 = v57;
          v37 = v58;
          v32 = v60;
          v31 = v62;
          a13 = v63;
          v28 = v61;
          a2 = v59;
LABEL_50:
          v29 += 4;
          ++v27;
          goto LABEL_51;
        }
      }
      else
      {
LABEL_36:
        v52 = 0;
        v53 = v29[2].i32[0] == -1;
      }
      if (v53 || v52)
        goto LABEL_50;
      v54 = v29[2].i32[0];
      v29 += 4 * v54;
      v27 += v54;
LABEL_51:
      ++v26;
      if (v27 >= *(_DWORD *)(v25 + 68))
        goto LABEL_54;
    }
  }
  v26 = 0;
LABEL_54:
  if (maxIterations < v26)
    maxIterations = v26;
  return result;
}

float32x4_t *btQuantizedBvh::walkStacklessQuantizedTreeAgainstRay(float32x4_t *result, uint64_t a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5, float32x4_t *a6, int a7, uint64_t a8)
{
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  int8x16_t v11;
  float32x4_t v12;
  float v13;
  int v14;
  float32x4_t *v16;
  int v17;
  int8x16_t v18;
  float v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  float32x2_t v35;
  int32x2_t v36;
  unsigned __int16 *v37;
  float32x4_t *v38;
  float32x4_t *v39;
  float *v40;
  float *v41;
  float *v42;
  float *v43;
  float v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  BOOL v54;
  int v55;
  float v56;
  float v57;
  float v58;
  unsigned int v59;
  float32x4_t v60;
  float32x4_t v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  float32x4_t v67;
  float32x4_t v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  uint64_t v77;
  float32x4_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  float *v83;
  float *v84;
  float32x4_t *v85;
  float32x4_t *v86;
  __int32 v87;
  unsigned int v88;
  float32x4_t *v89;
  unsigned int v90;
  unsigned int v91;
  float32x4_t *v92;
  float v93;
  float32x4_t v94[2];
  uint64_t v95;

  v95 = *MEMORY[0x1E0C80C00];
  v8 = *a4;
  v9 = *a3;
  v10 = vsubq_f32(*a4, *a3);
  v10.i32[3] = 0;
  v11 = (int8x16_t)vmulq_f32(v10, v10);
  v12 = vmulq_n_f32(v10, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v11.i8, *(float32x2_t *)v11.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL)).f32[0]));
  if (v12.f32[2] == 0.0)
    v13 = 1.0e18;
  else
    v13 = 1.0 / v12.f32[2];
  if (a7 < (int)a8)
  {
    v14 = a7;
    v16 = result;
    v17 = 0;
    v18 = (int8x16_t)vmulq_f32(v12, v10);
    LODWORD(v19) = vadd_f32(vpadd_f32(*(float32x2_t *)v18.i8, *(float32x2_t *)v18.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL)).u32[0];
    v20 = vminq_f32(v9, v8);
    v21 = vmaxq_f32(v9, v8);
    v22 = result[1];
    v23 = result[2];
    v24 = result[3];
    v25 = vmulq_f32(v24, vsubq_f32(vminq_f32(vmaxq_f32(vaddq_f32(v20, *a5), v22), v23), v22));
    v26 = (int)v25.f32[0] & 0xFFFE;
    v27 = (int)v25.f32[1] & 0xFFFE;
    result = (float32x4_t *)((int)v25.f32[2] & 0xFFFE);
    _Q2 = vmulq_f32(v24, vsubq_f32(vminq_f32(vmaxq_f32(vaddq_f32(v21, *a6), v22), v23), v22));
    v29 = (int)(float)(_Q2.f32[0] + 1.0) | 1;
    v30 = (int)(float)(_Q2.f32[1] + 1.0) | 1u;
    v31 = (int)(float)(_Q2.f32[2] + 1.0) | 1;
    __asm { FMOV            V2.2S, #1.0 }
    v35 = (float32x2_t)vbsl_s8((int8x8_t)vceqz_f32(*(float32x2_t *)v12.f32), (int8x8_t)vdup_n_s32(0x5D5E0B6Bu), (int8x8_t)vdiv_f32(*(float32x2_t *)_Q2.f32, *(float32x2_t *)v12.f32));
    v36 = vcltz_f32(v35);
    v37 = (unsigned __int16 *)(v16[12].i64[0] + 16 * v14);
    v38 = &v94[v36.i8[0] & 1];
    v39 = &v94[(v36.i8[0] & 1) == 0];
    v40 = &v94[v36.i8[4] & 1].f32[1];
    v41 = &v94[(v36.i8[4] & 1) == 0].f32[1];
    v42 = &v94[v13 < 0.0].f32[2];
    v43 = &v94[v13 >= 0.0].f32[2];
    v44 = v35.f32[1];
    v93 = v19;
    v92 = a3;
    v90 = v29;
    v91 = (int)v25.f32[2] & 0xFFFE;
    v89 = a5;
    v88 = v31;
    v87 = v35.i32[0];
    v85 = v39;
    v86 = v38;
    v83 = v41;
    v84 = v40;
    while (1)
    {
      v45 = *v37;
      v46 = v37[2];
      v47 = v37[1];
      v48 = *((_DWORD *)v37 + 3);
      if (v26 > v37[3]
        || v29 < v45
        || result > v37[5]
        || v31 < v46
        || v27 > v37[4]
        || v30 < v47)
      {
        goto LABEL_22;
      }
      v56 = v16[3].f32[0];
      v57 = v16[3].f32[1];
      v58 = v16[3].f32[2];
      *(float *)&v59 = (float)v46 / v58;
      v60.i32[3] = 0;
      v60.f32[0] = (float)v45 / v56;
      v60.f32[1] = (float)v47 / v57;
      v60.f32[2] = *(float *)&v59;
      v61 = v16[1];
      v94[0] = vaddq_f32(v61, v60);
      LOWORD(v59) = v37[3];
      *(float *)&v62 = (float)v59;
      *(float *)&v63 = *(float *)&v62 / v56;
      LOWORD(v62) = v37[4];
      *(float *)&v64 = (float)v62;
      *(float *)&v65 = *(float *)&v64 / v57;
      LOWORD(v64) = v37[5];
      *(float *)&v66 = (float)v64 / v58;
      v67.i64[0] = __PAIR64__(v65, v63);
      v67.i64[1] = v66;
      v68 = vsubq_f32(vaddq_f32(v61, v67), *a5);
      v94[0] = vsubq_f32(v94[0], *a6);
      v94[1] = v68;
      v69 = a3->f32[1];
      v70 = v35.f32[0] * (float)(v38->f32[0] - a3->f32[0]);
      v71 = v44 * (float)(*v41 - v69);
      if (v70 > v71)
        goto LABEL_22;
      v72 = v35.f32[0] * (float)(v39->f32[0] - a3->f32[0]);
      v73 = v44 * (float)(*v40 - v69);
      if (v73 > v72)
        goto LABEL_22;
      if (v73 > v70)
        v70 = v73;
      if (v71 >= v72)
        v71 = v35.f32[0] * (float)(v39->f32[0] - a3->f32[0]);
      v74 = a3->f32[2];
      v75 = v13 * (float)(*v43 - v74);
      if (v70 <= v75 && (v76 = v13 * (float)(*v42 - v74), v76 <= v71))
      {
        if (v76 > v70)
          v70 = v76;
        if (v75 < v71)
          v71 = v75;
        v54 = v70 < v19;
        if (v71 <= 0.0)
          v54 = 0;
        if ((v48 & 0x80000000) == 0 && v54)
        {
          v77 = a8;
          v78 = a6;
          v79 = a2;
          v80 = v26;
          v81 = v27;
          v82 = v30;
          (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 16))(a2, (*((int *)v37 + 3) >> 21), *((_DWORD *)v37 + 3) & 0x1FFFFF);
          v35.i32[0] = v87;
          v31 = v88;
          v30 = v82;
          v29 = v90;
          result = (float32x4_t *)v91;
          a3 = v92;
          v27 = v81;
          v26 = v80;
          v39 = v85;
          v38 = v86;
          v19 = v93;
          a2 = v79;
          v41 = v83;
          v40 = v84;
          a5 = v89;
          a6 = v78;
          a8 = v77;
          v43 = &v94[v13 >= 0.0].f32[2];
          v42 = &v94[v13 < 0.0].f32[2];
LABEL_43:
          v37 += 8;
          ++v14;
          goto LABEL_44;
        }
      }
      else
      {
LABEL_22:
        v54 = 0;
      }
      if (v54 || (v48 & 0x80000000) == 0)
        goto LABEL_43;
      v55 = *((_DWORD *)v37 + 3);
      v37 -= 8 * v55;
      v14 -= v55;
LABEL_44:
      ++v17;
      if (v14 >= (int)a8)
        goto LABEL_47;
    }
  }
  v17 = 0;
LABEL_47:
  if (maxIterations < v17)
    maxIterations = v17;
  return result;
}

float32x4_t *btQuantizedBvh::reportRayOverlappingNodex(float32x4_t *a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4, double a5, double a6, double a7, double a8, double a9, double a10, __n128 a11)
{
  float32x4_t v12;
  float32x4_t v13;

  v13 = 0uLL;
  v12 = 0uLL;
  return btQuantizedBvh::reportBoxCastOverlappingNodex(a1, a2, a3, a4, &v13, &v12, a5, a6, a7, a8, a9, a10, a11);
}

float32x4_t *btQuantizedBvh::reportBoxCastOverlappingNodex(float32x4_t *a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5, float32x4_t *a6, double a7, double a8, double a9, double a10, double a11, double a12, __n128 a13)
{
  if (a1[4].i8[8])
    return btQuantizedBvh::walkStacklessQuantizedTreeAgainstRay(a1, a2, a3, a4, a5, a6, 0, a1[4].u32[1]);
  else
    return (float32x4_t *)btQuantizedBvh::walkStacklessTreeAgainstRay((uint64_t)a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t btQuantizedBvh::serialize(btQuantizedBvh *this, btQuantizedBvh *a2, unsigned int a3, int a4)
{
  unsigned int v7;
  uint64_t v8;
  char *v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  _BYTE *v13;
  uint64_t v14;
  char *v15;
  _BYTE *v16;
  unsigned int v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  char *v22;
  char *v23;
  _BYTE *v24;
  char *v25;
  _DWORD *v26;
  unsigned __int16 *v27;
  void **v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void **v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  int8x8_t *v41;
  int8x8_t *v42;
  _DWORD *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  void **v50;
  uint64_t v51;
  int8x8_t *v52;
  unsigned __int16 *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;

  *((_DWORD *)this + 62) = *((_DWORD *)this + 55);
  btQuantizedBvh::btQuantizedBvh(a2);
  v7 = *((_DWORD *)this + 17);
  if (a4)
  {
    v8 = 0;
    *((_DWORD *)a2 + 17) = bswap32(v7);
    v9 = (char *)this + 19;
    do
    {
      v10 = (char *)a2 + v8 + 19;
      *(v10 - 3) = v9[v8];
      *(v10 - 2) = v9[v8 - 1];
      *(v10 - 1) = v9[v8 - 2];
      *v10 = v9[v8 - 3];
      v8 += 4;
    }
    while (v8 != 16);
    v11 = 0;
    v12 = (char *)this + 35;
    do
    {
      v13 = (char *)a2 + v11 + 35;
      *(v13 - 3) = v12[v11];
      *(v13 - 2) = v12[v11 - 1];
      *(v13 - 1) = v12[v11 - 2];
      *v13 = v12[v11 - 3];
      v11 += 4;
    }
    while (v11 != 16);
    v14 = 0;
    v15 = (char *)this + 51;
    do
    {
      v16 = (char *)a2 + v14 + 51;
      *(v16 - 3) = v15[v14];
      *(v16 - 2) = v15[v14 - 1];
      *(v16 - 1) = v15[v14 - 2];
      *v16 = v15[v14 - 3];
      v14 += 4;
    }
    while (v14 != 16);
    *((_DWORD *)a2 + 52) = bswap32(*((_DWORD *)this + 52));
    v17 = bswap32(*((_DWORD *)this + 62));
  }
  else
  {
    *((_DWORD *)a2 + 17) = v7;
    *((_OWORD *)a2 + 1) = *((_OWORD *)this + 1);
    *((_OWORD *)a2 + 2) = *((_OWORD *)this + 2);
    *((_OWORD *)a2 + 3) = *((_OWORD *)this + 3);
    *((_DWORD *)a2 + 52) = *((_DWORD *)this + 52);
    v17 = *((_DWORD *)this + 62);
  }
  *((_DWORD *)a2 + 62) = v17;
  *((_BYTE *)a2 + 72) = *((_BYTE *)this + 72);
  v18 = (char *)a2 + 256;
  v19 = *((unsigned int *)this + 17);
  v20 = (int)v19;
  if (*((_BYTE *)this + 72))
  {
    v22 = (char *)a2 + 192;
    v21 = (void **)*((_QWORD *)a2 + 24);
    if (v21 && *((_BYTE *)a2 + 200))
      btAlignedFreeInternal(v21);
    v23 = (char *)a2 + 180;
    v24 = (char *)a2 + 200;
    v25 = (char *)a2 + 184;
    *((_QWORD *)a2 + 24) = v18;
    if ((a4 & 1) != 0)
    {
      if ((int)v19 >= 1)
      {
        v26 = (_DWORD *)((char *)a2 + 268);
        v27 = (unsigned __int16 *)(*((_QWORD *)this + 24) + 6);
        do
        {
          *((_WORD *)v26 - 6) = bswap32(*(v27 - 3)) >> 16;
          *((_WORD *)v26 - 5) = bswap32(*(v27 - 2)) >> 16;
          *((_WORD *)v26 - 4) = bswap32(*(v27 - 1)) >> 16;
          *((_WORD *)v26 - 3) = bswap32(*v27) >> 16;
          *((_WORD *)v26 - 2) = bswap32(v27[1]) >> 16;
          *((_WORD *)v26 - 1) = bswap32(v27[2]) >> 16;
          *v26 = bswap32(*(_DWORD *)(v27 + 3));
          v26 += 4;
          v27 += 8;
          --v19;
        }
        while (v19);
      }
    }
    else if ((int)v19 >= 1)
    {
      v43 = (_DWORD *)((char *)a2 + 268);
      v44 = *((_QWORD *)this + 24) + 6;
      do
      {
        *((_WORD *)v43 - 6) = *(_WORD *)(v44 - 6);
        *((_WORD *)v43 - 5) = *(_WORD *)(v44 - 4);
        *((_WORD *)v43 - 4) = *(_WORD *)(v44 - 2);
        *((_WORD *)v43 - 3) = *(_WORD *)v44;
        *((_WORD *)v43 - 2) = *(_WORD *)(v44 + 2);
        *((_WORD *)v43 - 1) = *(_WORD *)(v44 + 4);
        *v43 = *(_DWORD *)(v44 + 6);
        v43 += 4;
        v44 += 16;
        --v19;
      }
      while (v19);
    }
    v45 = 16 * v20;
    goto LABEL_42;
  }
  v22 = (char *)a2 + 128;
  v28 = (void **)*((_QWORD *)a2 + 16);
  if (v28 && *((_BYTE *)a2 + 136))
    btAlignedFreeInternal(v28);
  *((_DWORD *)a2 + 30) = v19;
  v25 = (char *)a2 + 120;
  *((_DWORD *)a2 + 29) = v19;
  v23 = (char *)a2 + 116;
  *((_BYTE *)a2 + 136) = 0;
  v24 = (char *)a2 + 136;
  *((_QWORD *)a2 + 16) = v18;
  if ((a4 & 1) == 0)
  {
    if ((int)v19 >= 1)
    {
      v46 = 0;
      v47 = *((_QWORD *)this + 16);
      v33 = (void **)((char *)a2 + 256);
      do
      {
        *(_OWORD *)&v33[v46 / 8] = *(_OWORD *)(v47 + v46);
        *(_OWORD *)(*(_QWORD *)v22 + v46 + 16) = *(_OWORD *)(*((_QWORD *)this + 16) + v46 + 16);
        v47 = *((_QWORD *)this + 16);
        v33 = *(void ***)v22;
        v48 = *(_QWORD *)v22 + v46;
        *(_QWORD *)(v48 + 32) = *(_QWORD *)(v47 + v46 + 32);
        *(_DWORD *)(v48 + 40) = *(_DWORD *)(v47 + v46 + 40);
        v46 += 64;
      }
      while (v19 << 6 != v46);
      goto LABEL_40;
    }
LABEL_39:
    v33 = (void **)((char *)a2 + 256);
    goto LABEL_40;
  }
  if ((int)v19 < 1)
    goto LABEL_39;
  v29 = 0;
  v30 = *((_QWORD *)this + 16);
  v31 = 3;
  v32 = 19;
  v33 = (void **)((char *)a2 + 256);
  do
  {
    v34 = 0;
    v35 = v30 + v31;
    do
    {
      v36 = (char *)v33 + v31 + v34;
      *(v36 - 3) = *(_BYTE *)(v35 + v34);
      *(v36 - 2) = *(_BYTE *)(v35 + v34 - 1);
      *(v36 - 1) = *(_BYTE *)(v35 + v34 - 2);
      *v36 = *(_BYTE *)(v35 + v34 - 3);
      v34 += 4;
    }
    while (v34 != 16);
    v37 = 0;
    v38 = *(_QWORD *)v22 + v32;
    v39 = *((_QWORD *)this + 16) + v32;
    do
    {
      v40 = (_BYTE *)(v38 + v37);
      *(v40 - 3) = *(_BYTE *)(v39 + v37);
      *(v40 - 2) = *(_BYTE *)(v39 + v37 - 1);
      *(v40 - 1) = *(_BYTE *)(v39 + v37 - 2);
      *v40 = *(_BYTE *)(v39 + v37 - 3);
      v37 += 4;
    }
    while (v37 != 16);
    v30 = *((_QWORD *)this + 16);
    v41 = (int8x8_t *)(v30 + (v29 << 6));
    v33 = *(void ***)v22;
    v42 = (int8x8_t *)(*(_QWORD *)v22 + (v29 << 6));
    v42[4] = vrev32_s8(v41[4]);
    v42[5].i32[0] = bswap32(v41[5].u32[0]);
    ++v29;
    v31 += 64;
    v32 += 64;
  }
  while (v29 != v19);
LABEL_40:
  v45 = (uint64_t)(int)v19 << 6;
  if (*v24)
    btAlignedFreeInternal(v33);
LABEL_42:
  *v24 = 0;
  *(_QWORD *)v22 = 0;
  *(_DWORD *)v23 = 0;
  *(_DWORD *)v25 = 0;
  v49 = &v18[v45];
  v50 = (void **)*((_QWORD *)a2 + 29);
  if (v50 && *((_BYTE *)a2 + 240))
    btAlignedFreeInternal(v50);
  *((_QWORD *)a2 + 29) = v49;
  v51 = *((unsigned int *)this + 62);
  if ((a4 & 1) != 0)
  {
    if ((int)v51 >= 1)
    {
      v52 = (int8x8_t *)((char *)a2 + v45 + 268);
      v53 = (unsigned __int16 *)(*((_QWORD *)this + 29) + 6);
      do
      {
        v52[-2].i16[2] = bswap32(*(v53 - 3)) >> 16;
        v52[-2].i16[3] = bswap32(*(v53 - 2)) >> 16;
        v52[-1].i16[0] = bswap32(*(v53 - 1)) >> 16;
        v52[-1].i16[1] = bswap32(*v53) >> 16;
        v52[-1].i16[2] = bswap32(v53[1]) >> 16;
        v52[-1].i16[3] = bswap32(v53[2]) >> 16;
        *v52 = vrev32_s8(*(int8x8_t *)(v53 + 3));
        v52 += 4;
        v53 += 16;
        --v51;
      }
      while (v51);
    }
  }
  else if ((int)v51 >= 1)
  {
    v54 = 0;
    v55 = 0;
    v56 = *((_QWORD *)this + 29);
    v57 = (char *)a2 + v45;
    do
    {
      v58 = &v57[v54];
      *((_WORD *)v58 + 128) = *(_WORD *)(v56 + v54);
      *((_WORD *)v58 + 129) = *(_WORD *)(v56 + v54 + 2);
      *((_WORD *)v58 + 130) = *(_WORD *)(v56 + v54 + 4);
      *((_WORD *)v58 + 131) = *(_WORD *)(v56 + v54 + 6);
      *((_WORD *)v58 + 132) = *(_WORD *)(v56 + v54 + 8);
      *((_WORD *)v58 + 133) = *(_WORD *)(v56 + v54 + 10);
      *(_QWORD *)&v57[v54 + 268] = *(_QWORD *)(v56 + v54 + 12);
      *((_DWORD *)v58 + 69) = 0;
      *((_QWORD *)v58 + 35) = 0;
      ++v55;
      v54 += 32;
    }
    while (v55 < *((int *)this + 62));
  }
  *((_BYTE *)a2 + 240) = 0;
  *((_QWORD *)a2 + 29) = 0;
  *((_DWORD *)a2 + 55) = 0;
  *((_DWORD *)a2 + 56) = 0;
  *(_QWORD *)a2 = 0;
  return 1;
}

double btQuantizedBvh::deSerializeFloat(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  uint64_t j;
  uint64_t k;
  __int128 v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  __int128 v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t m;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void **v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 *v48;
  __int128 *v49;
  __int128 v50;
  void **v51;
  _WORD *v52;
  uint64_t v53;

  for (i = 0; i != 16; i += 4)
    *(_DWORD *)(a1 + 32 + i) = *(_DWORD *)(a2 + 16 + i);
  for (j = 0; j != 16; j += 4)
    *(_DWORD *)(a1 + 16 + j) = *(_DWORD *)(a2 + j);
  for (k = 0; k != 16; k += 4)
  {
    LODWORD(v7) = *(_DWORD *)(a2 + 32 + k);
    *(_DWORD *)(a1 + 48 + k) = v7;
  }
  v8 = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 72) = v8 != 0;
  v9 = *(unsigned int *)(a2 + 56);
  v10 = *(_DWORD *)(a1 + 116);
  if (v10 < (int)v9)
  {
    v11 = v10;
    if (*(_DWORD *)(a1 + 120) < (int)v9)
    {
      if ((_DWORD)v9)
      {
        v12 = btAlignedAllocInternal((uint64_t)(int)v9 << 6, 16);
        v10 = *(_DWORD *)(a1 + 116);
      }
      else
      {
        v12 = 0;
      }
      if (v10 >= 1)
      {
        v13 = 0;
        v14 = (unint64_t)v10 << 6;
        do
        {
          v15 = (_OWORD *)(v12 + v13);
          v16 = (_OWORD *)(*(_QWORD *)(a1 + 128) + v13);
          *v15 = *v16;
          v15[1] = v16[1];
          v17 = v16[3];
          v15[2] = v16[2];
          v15[3] = v17;
          v13 += 64;
        }
        while (v14 != v13);
      }
      v18 = *(void ***)(a1 + 128);
      if (v18 && *(_BYTE *)(a1 + 136))
        btAlignedFreeInternal(v18);
      *(_BYTE *)(a1 + 136) = 1;
      *(_QWORD *)(a1 + 128) = v12;
      *(_DWORD *)(a1 + 120) = v9;
    }
    v19 = v11 << 6;
    v20 = (int)v9 - v11;
    v7 = 0uLL;
    do
    {
      v21 = (_OWORD *)(*(_QWORD *)(a1 + 128) + v19);
      v21[2] = 0uLL;
      v21[3] = 0uLL;
      *v21 = 0uLL;
      v21[1] = 0uLL;
      v19 += 64;
      --v20;
    }
    while (v20);
  }
  *(_DWORD *)(a1 + 116) = v9;
  if ((int)v9 >= 1)
  {
    v22 = 0;
    v23 = 0;
    v24 = *(_QWORD *)(a2 + 64);
    v25 = *(_QWORD *)(a1 + 128);
    do
    {
      v26 = v25 + v22;
      for (m = 16; m != 32; m += 4)
        *(_DWORD *)(v26 + m) = *(_DWORD *)(v24 + m);
      v28 = 0;
      v29 = *(_QWORD *)(a1 + 128) + v22;
      do
      {
        *(_DWORD *)(v29 + v28) = *(_DWORD *)(v24 + v28);
        v28 += 4;
      }
      while (v28 != 16);
      v25 = *(_QWORD *)(a1 + 128);
      v30 = v25 + (v23 << 6);
      *(_QWORD *)&v7 = *(_QWORD *)(v24 + 32);
      *(_QWORD *)(v30 + 32) = v7;
      *(_DWORD *)(v30 + 40) = *(_DWORD *)(v24 + 40);
      ++v23;
      v24 += 48;
      v22 += 64;
    }
    while (v23 != v9);
  }
  v31 = *(unsigned int *)(a2 + 60);
  v32 = *(_DWORD *)(a1 + 180);
  if (v32 < (int)v31)
  {
    v33 = v32;
    if (*(_DWORD *)(a1 + 184) < (int)v31)
    {
      if ((_DWORD)v31)
      {
        v34 = btAlignedAllocInternal(16 * (int)v31, 16);
        v32 = *(_DWORD *)(a1 + 180);
      }
      else
      {
        v34 = 0;
      }
      if (v32 >= 1)
      {
        v35 = 0;
        v36 = 16 * v32;
        do
        {
          v7 = *(_OWORD *)(*(_QWORD *)(a1 + 192) + v35);
          *(_OWORD *)(v34 + v35) = v7;
          v35 += 16;
        }
        while (v36 != v35);
      }
      v37 = *(void ***)(a1 + 192);
      if (v37 && *(_BYTE *)(a1 + 200))
        btAlignedFreeInternal(v37);
      *(_BYTE *)(a1 + 200) = 1;
      *(_QWORD *)(a1 + 192) = v34;
      *(_DWORD *)(a1 + 184) = v31;
    }
    v38 = 16 * v33;
    v39 = (int)v31 - v33;
    do
    {
      v40 = (_QWORD *)(*(_QWORD *)(a1 + 192) + v38);
      *v40 = 0;
      v40[1] = 0;
      v38 += 16;
      --v39;
    }
    while (v39);
  }
  *(_DWORD *)(a1 + 180) = v31;
  if ((int)v31 >= 1)
  {
    v41 = *(_QWORD *)(a2 + 72) + 6;
    v42 = *(_QWORD *)(a1 + 192) + 6;
    do
    {
      *(_DWORD *)(v42 + 6) = *(_DWORD *)(v41 + 6);
      *(_WORD *)v42 = *(_WORD *)v41;
      *(_WORD *)(v42 + 2) = *(_WORD *)(v41 + 2);
      *(_WORD *)(v42 + 4) = *(_WORD *)(v41 + 4);
      *(_WORD *)(v42 - 6) = *(_WORD *)(v41 - 6);
      *(_WORD *)(v42 - 4) = *(_WORD *)(v41 - 4);
      *(_WORD *)(v42 - 2) = *(_WORD *)(v41 - 2);
      v41 += 16;
      v42 += 16;
      --v31;
    }
    while (v31);
  }
  v43 = *(unsigned int *)(a2 + 92);
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 88);
  v44 = *(_DWORD *)(a1 + 220);
  if (v44 < (int)v43 && *(_DWORD *)(a1 + 224) < (int)v43)
  {
    if ((_DWORD)v43)
    {
      v45 = btAlignedAllocInternal(32 * (int)v43, 16);
      v44 = *(_DWORD *)(a1 + 220);
    }
    else
    {
      v45 = 0;
    }
    if (v44 >= 1)
    {
      v46 = 0;
      v47 = 32 * v44;
      do
      {
        v48 = (__int128 *)(v45 + v46);
        v49 = (__int128 *)(*(_QWORD *)(a1 + 232) + v46);
        v7 = *v49;
        v50 = v49[1];
        *v48 = *v49;
        v48[1] = v50;
        v46 += 32;
      }
      while (v47 != v46);
    }
    v51 = *(void ***)(a1 + 232);
    if (v51 && *(_BYTE *)(a1 + 240))
      btAlignedFreeInternal(v51);
    *(_BYTE *)(a1 + 240) = 1;
    *(_QWORD *)(a1 + 232) = v45;
    *(_DWORD *)(a1 + 224) = v43;
  }
  *(_DWORD *)(a1 + 220) = v43;
  if ((int)v43 >= 1)
  {
    v52 = (_WORD *)(*(_QWORD *)(a2 + 80) + 10);
    v53 = *(_QWORD *)(a1 + 232) + 6;
    do
    {
      *(_WORD *)v53 = v52[2];
      *(_WORD *)(v53 + 2) = v52[3];
      *(_WORD *)(v53 + 4) = v52[4];
      *(_WORD *)(v53 - 6) = *(v52 - 1);
      *(_WORD *)(v53 - 4) = *v52;
      *(_WORD *)(v53 - 2) = v52[1];
      *(_QWORD *)&v7 = *(_QWORD *)(v52 - 5);
      *(_QWORD *)(v53 + 6) = v7;
      v52 += 10;
      v53 += 32;
      --v43;
    }
    while (v43);
  }
  return *(double *)&v7;
}

double btQuantizedBvh::deSerializeDouble(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  float v5;
  uint64_t j;
  float v7;
  uint64_t k;
  __int128 v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  __int128 v19;
  void **v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t m;
  float v30;
  uint64_t v31;
  uint64_t v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void **v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 *v52;
  __int128 *v53;
  __int128 v54;
  void **v55;
  _WORD *v56;
  uint64_t v57;

  for (i = 0; i != 4; ++i)
  {
    v5 = *(double *)(a2 + 32 + 8 * i);
    *(float *)(a1 + 32 + 4 * i) = v5;
  }
  for (j = 0; j != 4; ++j)
  {
    v7 = *(double *)(a2 + 8 * j);
    *(float *)(a1 + 16 + 4 * j) = v7;
  }
  for (k = 0; k != 4; ++k)
  {
    *(_QWORD *)&v9 = *(_QWORD *)(a2 + 64 + 8 * k);
    *(float *)&v9 = *(double *)&v9;
    *(_DWORD *)(a1 + 48 + 4 * k) = v9;
  }
  v10 = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 72) = v10 != 0;
  v11 = *(unsigned int *)(a2 + 104);
  v12 = *(_DWORD *)(a1 + 116);
  if (v12 < (int)v11)
  {
    v13 = v12;
    if (*(_DWORD *)(a1 + 120) < (int)v11)
    {
      if ((_DWORD)v11)
      {
        v14 = btAlignedAllocInternal((uint64_t)(int)v11 << 6, 16);
        v12 = *(_DWORD *)(a1 + 116);
      }
      else
      {
        v14 = 0;
      }
      if (v12 >= 1)
      {
        v15 = 0;
        v16 = (unint64_t)v12 << 6;
        do
        {
          v17 = (_OWORD *)(v14 + v15);
          v18 = (_OWORD *)(*(_QWORD *)(a1 + 128) + v15);
          *v17 = *v18;
          v17[1] = v18[1];
          v19 = v18[3];
          v17[2] = v18[2];
          v17[3] = v19;
          v15 += 64;
        }
        while (v16 != v15);
      }
      v20 = *(void ***)(a1 + 128);
      if (v20 && *(_BYTE *)(a1 + 136))
        btAlignedFreeInternal(v20);
      *(_BYTE *)(a1 + 136) = 1;
      *(_QWORD *)(a1 + 128) = v14;
      *(_DWORD *)(a1 + 120) = v11;
    }
    v21 = v13 << 6;
    v22 = (int)v11 - v13;
    v9 = 0uLL;
    do
    {
      v23 = (_OWORD *)(*(_QWORD *)(a1 + 128) + v21);
      v23[2] = 0uLL;
      v23[3] = 0uLL;
      *v23 = 0uLL;
      v23[1] = 0uLL;
      v21 += 64;
      --v22;
    }
    while (v22);
  }
  *(_DWORD *)(a1 + 116) = v11;
  if ((int)v11 >= 1)
  {
    v24 = 0;
    v25 = 0;
    v26 = *(_QWORD *)(a2 + 112);
    v27 = *(_QWORD *)(a1 + 128);
    do
    {
      v28 = v27 + v24;
      for (m = 4; m != 8; ++m)
      {
        v30 = *(double *)(v26 + 8 * m);
        *(float *)(v28 + 4 * m) = v30;
      }
      v31 = 0;
      v32 = *(_QWORD *)(a1 + 128) + v24;
      do
      {
        v33 = *(double *)(v26 + 8 * v31);
        *(float *)(v32 + 4 * v31++) = v33;
      }
      while (v31 != 4);
      v27 = *(_QWORD *)(a1 + 128);
      v34 = v27 + (v25 << 6);
      *(_QWORD *)&v9 = *(_QWORD *)(v26 + 64);
      *(_QWORD *)(v34 + 32) = v9;
      *(_DWORD *)(v34 + 40) = *(_DWORD *)(v26 + 72);
      ++v25;
      v26 += 80;
      v24 += 64;
    }
    while (v25 != v11);
  }
  v35 = *(unsigned int *)(a2 + 108);
  v36 = *(_DWORD *)(a1 + 180);
  if (v36 < (int)v35)
  {
    v37 = v36;
    if (*(_DWORD *)(a1 + 184) < (int)v35)
    {
      if ((_DWORD)v35)
      {
        v38 = btAlignedAllocInternal(16 * (int)v35, 16);
        v36 = *(_DWORD *)(a1 + 180);
      }
      else
      {
        v38 = 0;
      }
      if (v36 >= 1)
      {
        v39 = 0;
        v40 = 16 * v36;
        do
        {
          v9 = *(_OWORD *)(*(_QWORD *)(a1 + 192) + v39);
          *(_OWORD *)(v38 + v39) = v9;
          v39 += 16;
        }
        while (v40 != v39);
      }
      v41 = *(void ***)(a1 + 192);
      if (v41 && *(_BYTE *)(a1 + 200))
        btAlignedFreeInternal(v41);
      *(_BYTE *)(a1 + 200) = 1;
      *(_QWORD *)(a1 + 192) = v38;
      *(_DWORD *)(a1 + 184) = v35;
    }
    v42 = 16 * v37;
    v43 = (int)v35 - v37;
    do
    {
      v44 = (_QWORD *)(*(_QWORD *)(a1 + 192) + v42);
      *v44 = 0;
      v44[1] = 0;
      v42 += 16;
      --v43;
    }
    while (v43);
  }
  *(_DWORD *)(a1 + 180) = v35;
  if ((int)v35 >= 1)
  {
    v45 = *(_QWORD *)(a2 + 120) + 6;
    v46 = *(_QWORD *)(a1 + 192) + 6;
    do
    {
      *(_DWORD *)(v46 + 6) = *(_DWORD *)(v45 + 6);
      *(_WORD *)v46 = *(_WORD *)v45;
      *(_WORD *)(v46 + 2) = *(_WORD *)(v45 + 2);
      *(_WORD *)(v46 + 4) = *(_WORD *)(v45 + 4);
      *(_WORD *)(v46 - 6) = *(_WORD *)(v45 - 6);
      *(_WORD *)(v46 - 4) = *(_WORD *)(v45 - 4);
      *(_WORD *)(v46 - 2) = *(_WORD *)(v45 - 2);
      v45 += 16;
      v46 += 16;
      --v35;
    }
    while (v35);
  }
  v47 = *(unsigned int *)(a2 + 132);
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 128);
  v48 = *(_DWORD *)(a1 + 220);
  if (v48 < (int)v47 && *(_DWORD *)(a1 + 224) < (int)v47)
  {
    if ((_DWORD)v47)
    {
      v49 = btAlignedAllocInternal(32 * (int)v47, 16);
      v48 = *(_DWORD *)(a1 + 220);
    }
    else
    {
      v49 = 0;
    }
    if (v48 >= 1)
    {
      v50 = 0;
      v51 = 32 * v48;
      do
      {
        v52 = (__int128 *)(v49 + v50);
        v53 = (__int128 *)(*(_QWORD *)(a1 + 232) + v50);
        v9 = *v53;
        v54 = v53[1];
        *v52 = *v53;
        v52[1] = v54;
        v50 += 32;
      }
      while (v51 != v50);
    }
    v55 = *(void ***)(a1 + 232);
    if (v55 && *(_BYTE *)(a1 + 240))
      btAlignedFreeInternal(v55);
    *(_BYTE *)(a1 + 240) = 1;
    *(_QWORD *)(a1 + 232) = v49;
    *(_DWORD *)(a1 + 224) = v47;
  }
  *(_DWORD *)(a1 + 220) = v47;
  if ((int)v47 >= 1)
  {
    v56 = (_WORD *)(*(_QWORD *)(a2 + 136) + 10);
    v57 = *(_QWORD *)(a1 + 232) + 6;
    do
    {
      *(_WORD *)v57 = v56[2];
      *(_WORD *)(v57 + 2) = v56[3];
      *(_WORD *)(v57 + 4) = v56[4];
      *(_WORD *)(v57 - 6) = *(v56 - 1);
      *(_WORD *)(v57 - 4) = *v56;
      *(_WORD *)(v57 - 2) = v56[1];
      *(_QWORD *)&v9 = *(_QWORD *)(v56 - 5);
      *(_QWORD *)(v57 + 6) = v9;
      v56 += 10;
      v57 += 32;
      --v47;
    }
    while (v47);
  }
  return *(double *)&v9;
}

const char *btQuantizedBvh::serialize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  uint64_t j;
  uint64_t k;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t m;
  uint64_t n;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _WORD *v33;
  uint64_t v34;

  for (i = 0; i != 16; i += 4)
    *(_DWORD *)(a2 + 16 + i) = *(_DWORD *)(a1 + 32 + i);
  for (j = 0; j != 16; j += 4)
    *(_DWORD *)(a2 + j) = *(_DWORD *)(a1 + 16 + j);
  for (k = 0; k != 16; k += 4)
    *(_DWORD *)(a2 + 32 + k) = *(_DWORD *)(a1 + 48 + k);
  v9 = *(unsigned __int8 *)(a1 + 72);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 68);
  *(_DWORD *)(a2 + 52) = v9;
  v10 = *(_DWORD *)(a1 + 116);
  *(_DWORD *)(a2 + 56) = v10;
  if (v10)
  {
    v11 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 56))(a3, *(_QWORD *)(a1 + 128));
    *(_QWORD *)(a2 + 64) = v11;
    if (v11)
    {
      v12 = *(unsigned int *)(a1 + 116);
      v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 48, v12);
      v14 = *(_QWORD *)(a1 + 128);
      if ((int)v12 >= 1)
      {
        v15 = 0;
        v16 = *(_QWORD *)(v13 + 8);
        v17 = *(_QWORD *)(a1 + 128);
        do
        {
          for (m = 16; m != 32; m += 4)
            *(_DWORD *)(v16 + m) = *(_DWORD *)(v17 + m);
          for (n = 0; n != 16; n += 4)
            *(_DWORD *)(v16 + n) = *(_DWORD *)(v17 + n);
          v20 = v14 + (v15 << 6);
          *(_QWORD *)(v16 + 32) = *(_QWORD *)(v20 + 32);
          *(_DWORD *)(v16 + 40) = *(_DWORD *)(v20 + 40);
          ++v15;
          v16 += 48;
          v17 += 64;
        }
        while (v15 != v12);
      }
      (*(void (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(_QWORD *)a3 + 40))(a3, v13, "btOptimizedBvhNodeData", 1497453121, v14);
    }
  }
  else
  {
    *(_QWORD *)(a2 + 64) = 0;
  }
  v21 = *(_DWORD *)(a1 + 180);
  *(_DWORD *)(a2 + 60) = v21;
  if (v21)
  {
    v22 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 56))(a3, *(_QWORD *)(a1 + 192));
    *(_QWORD *)(a2 + 72) = v22;
    if (v22)
    {
      v23 = *(unsigned int *)(a1 + 180);
      v24 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 16, v23);
      v25 = *(_QWORD *)(a1 + 192);
      if ((int)v23 >= 1)
      {
        v26 = *(_QWORD *)(v24 + 8) + 6;
        v27 = v25 + 6;
        do
        {
          *(_DWORD *)(v26 + 6) = *(_DWORD *)(v27 + 6);
          *(_WORD *)v26 = *(_WORD *)v27;
          *(_WORD *)(v26 + 2) = *(_WORD *)(v27 + 2);
          *(_WORD *)(v26 + 4) = *(_WORD *)(v27 + 4);
          *(_WORD *)(v26 - 6) = *(_WORD *)(v27 - 6);
          *(_WORD *)(v26 - 4) = *(_WORD *)(v27 - 4);
          *(_WORD *)(v26 - 2) = *(_WORD *)(v27 - 2);
          v26 += 16;
          v27 += 16;
          --v23;
        }
        while (v23);
      }
      (*(void (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(_QWORD *)a3 + 40))(a3, v24, "btQuantizedBvhNodeData", 1497453121, v25);
    }
  }
  else
  {
    *(_QWORD *)(a2 + 72) = 0;
  }
  v28 = *(_DWORD *)(a1 + 220);
  *(_DWORD *)(a2 + 88) = *(_DWORD *)(a1 + 208);
  *(_DWORD *)(a2 + 92) = v28;
  if (v28)
  {
    v29 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 56))(a3, *(_QWORD *)(a1 + 232));
    *(_QWORD *)(a2 + 80) = v29;
    if (v29)
    {
      v30 = *(unsigned int *)(a1 + 220);
      v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 20, v30);
      v32 = *(_QWORD *)(a1 + 232);
      if ((int)v30 >= 1)
      {
        v33 = (_WORD *)(*(_QWORD *)(v31 + 8) + 10);
        v34 = v32 + 6;
        do
        {
          v33[2] = *(_WORD *)v34;
          v33[3] = *(_WORD *)(v34 + 2);
          v33[4] = *(_WORD *)(v34 + 4);
          *(v33 - 1) = *(_WORD *)(v34 - 6);
          *v33 = *(_WORD *)(v34 - 4);
          v33[1] = *(_WORD *)(v34 - 2);
          *(_QWORD *)(v33 - 5) = *(_QWORD *)(v34 + 6);
          v33 += 10;
          v34 += 32;
          --v30;
        }
        while (v30);
      }
      (*(void (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(_QWORD *)a3 + 40))(a3, v31, "btBvhSubtreeInfoData", 1497453121, v32);
    }
  }
  else
  {
    *(_QWORD *)(a2 + 80) = 0;
  }
  return "btQuantizedBvhFloatData";
}

uint64_t btQuantizedBvh::calculateSerializeBufferSizeNew(btQuantizedBvh *this)
{
  return 96;
}

uint64_t SphereTriangleDetector::SphereTriangleDetector(uint64_t result, uint64_t a2, uint64_t a3, float a4)
{
  *(_QWORD *)result = &off_1EA597200;
  *(_QWORD *)(result + 8) = a2;
  *(_QWORD *)(result + 16) = a3;
  *(float *)(result + 24) = a4;
  return result;
}

uint64_t SphereTriangleDetector::getClosestPoints(float *a1, float32x4_t *a2, uint64_t a3, uint64_t a4, int a5, float *a6)
{
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  uint64_t result;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  int8x16_t v22;
  float32x4_t v23;
  float32x4_t v24;
  int8x16_t v25;
  float32x4_t v26;
  int8x16_t v27;
  int8x16_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  int8x16_t v32;
  int8x16_t v33;
  float32x4_t v34;
  int8x16_t v35;
  float32x4_t v36;
  int8x16_t v37;
  int8x16_t v38;
  float32x4_t v39;
  _OWORD v40[4];
  float32x4_t v41;
  float v42;
  btVector3 v43;
  btVector3 v44;

  v42 = 0.0;
  v9 = a2[2];
  v10 = a2[6];
  v11 = vsubq_f32(a2[3], a2[7]);
  v12 = *a2;
  v13 = a2[1];
  v12.i32[3] = 0;
  v13.i32[3] = 0;
  v9.i32[3] = 0;
  v14 = a2[4];
  v15 = a2[5];
  v11.i32[3] = 0;
  v16 = vmlaq_laneq_f32(vmulq_laneq_f32(v12, v14, 2), v13, v15, 2);
  v14.i32[3] = 0;
  v15.i32[3] = 0;
  v17 = vmlaq_laneq_f32(v16, v9, v10, 2);
  v10.i32[3] = 0;
  v40[1] = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v12, v14.f32[0]), v13, v15.f32[0]), v9, v10.f32[0]);
  v40[2] = vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v12, *(float32x2_t *)v14.f32, 1), v13, *(float32x2_t *)v15.f32, 1), v9, *(float32x2_t *)v10.f32, 1);
  v40[3] = v17;
  v41 = vaddq_f32(vaddq_f32(vmulq_n_f32(v14, v11.f32[0]), vmulq_lane_f32(v15, *(float32x2_t *)v11.f32, 1)), vmulq_laneq_f32(v10, v11, 2));
  result = SphereTriangleDetector::collide((SphereTriangleDetector *)a1, &v41, &v44, &v43, &v42, a6, a1[6]);
  if ((_DWORD)result)
  {
    if (a5)
    {
      v19 = a2[4];
      v20 = a2[5];
      v21 = vmulq_f32(v19, (float32x4_t)v43);
      v22 = (int8x16_t)vmulq_f32((float32x4_t)v43, v20);
      v23 = a2[6];
      v24 = a2[7];
      v25 = (int8x16_t)vmulq_f32((float32x4_t)v43, v23);
      v25.i32[3] = 0;
      *(float32x2_t *)v21.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v21.f32, *(float32x2_t *)v22.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL)));
      *(float32x2_t *)&v21.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v25.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL)), 0);
      v25.i64[0] = 0x8000000080000000;
      v25.i64[1] = 0x8000000080000000;
      v40[0] = veorq_s8((int8x16_t)v21, v25);
      v26 = vmulq_f32(v19, (float32x4_t)v44);
      v27 = (int8x16_t)vmulq_f32(v20, (float32x4_t)v44);
      v28 = (int8x16_t)vmulq_f32(v23, (float32x4_t)v44);
      v28.i32[3] = 0;
      *(float32x2_t *)v26.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v26.f32, *(float32x2_t *)v27.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL)));
      *(float32x2_t *)&v26.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v28.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL)), 0);
      v29 = vmulq_n_f32(v21, v42);
      v29.i32[3] = 0;
      v39 = vaddq_f32(vaddq_f32(v24, v26), v29);
    }
    else
    {
      v30 = a2[4];
      v31 = a2[5];
      v32 = (int8x16_t)vmulq_f32(v30, (float32x4_t)v43);
      v33 = (int8x16_t)vmulq_f32((float32x4_t)v43, v31);
      v34 = a2[6];
      v35 = (int8x16_t)vmulq_f32((float32x4_t)v43, v34);
      v35.i32[3] = 0;
      *(float32x2_t *)v32.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v32.i8, *(float32x2_t *)v33.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v33, v33, 8uLL)));
      v32.u64[1] = (unint64_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v35.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL)), 0);
      v36 = vmulq_f32(v30, (float32x4_t)v44);
      v37 = (int8x16_t)vmulq_f32(v31, (float32x4_t)v44);
      v38 = (int8x16_t)vmulq_f32(v34, (float32x4_t)v44);
      v38.i32[3] = 0;
      *(float32x2_t *)v36.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v36.f32, *(float32x2_t *)v37.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v36, (int8x16_t)v36, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v37, v37, 8uLL)));
      *(float32x2_t *)&v36.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v38.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v38, v38, 8uLL)), 0);
      v39 = vaddq_f32(a2[7], v36);
      v40[0] = v32;
    }
    return (*(uint64_t (**)(uint64_t, _OWORD *, float32x4_t *))(*(_QWORD *)a3 + 32))(a3, v40, &v39);
  }
  return result;
}

uint64_t SphereTriangleDetector::collide(SphereTriangleDetector *this, float32x4_t *a2, btVector3 *a3, btVector3 *a4, float *a5, float *a6, float a7)
{
  float32x4_t *v12;
  float v13;
  float v14;
  float v15;
  float32x4_t v16;
  float32x4_t v17;
  int8x8_t v18;
  float32x4_t v19;
  int8x8_t v20;
  float32x4_t v21;
  float32x4_t v22;
  int8x16_t v23;
  float32x4_t v24;
  int8x16_t v25;
  float32x4_t v26;
  float32x4_t v27;
  btVector3 v28;
  float32x4_t v29;
  int8x16_t v30;
  float32x4_t v31;
  btVector3 v32;
  float32x4_t v33;
  float32x4_t v34;
  float v35;
  float32x4_t v36;
  uint64_t v37;
  char v38;
  float32x4_t v39;
  float32x4_t v40;
  int8x16_t v41;
  float32x2_t v42;
  float v43;
  int8x16_t v44;
  float32x2_t v45;
  float32x4_t v46;
  float32x4_t v47;
  int8x16_t v48;
  int8x16_t v49;
  float32x4_t v50;
  float32x4_t v51;
  int8x16_t v52;
  float v53;
  float v55;
  btVector3 v56;
  float v57;
  float32x4_t v58;
  float32x4_t v59;
  btVector3 v60;
  btVector3 v61;

  v12 = (float32x4_t *)*((_QWORD *)this + 2);
  v13 = v12[7].f32[3];
  if (v12[6].f32[3] == v13
    && v12[6].f32[2] == v12[7].f32[2]
    && v12[6].f32[1] == v12[7].f32[1]
    && v12[6].f32[0] == v12[7].f32[0]
    || v12[5].f32[3] == v13
    && v12[5].f32[2] == v12[7].f32[2]
    && v12[5].f32[1] == v12[7].f32[1]
    && v12[5].f32[0] == v12[7].f32[0])
  {
    return 0;
  }
  v14 = *(float *)(*((_QWORD *)this + 1) + 48) * *(float *)(*((_QWORD *)this + 1) + 32);
  v15 = v14 + a7;
  v16 = v12[5];
  v17 = vsubq_f32(v12[6], v16);
  v18 = (int8x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).u64[0];
  v17.i32[3] = 0;
  v19 = vsubq_f32(v12[7], v16);
  v20 = (int8x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL).u64[0];
  v19.i32[3] = 0;
  *(int8x8_t *)v21.f32 = vext_s8(*(int8x8_t *)v17.f32, v18, 4uLL);
  v21.i64[1] = v17.i64[0];
  *(int8x8_t *)v22.f32 = vext_s8(*(int8x8_t *)v19.f32, v20, 4uLL);
  v22.i64[1] = v19.i64[0];
  v23 = (int8x16_t)vsubq_f32(vmulq_f32(v22, v17), vmulq_f32(v21, v19));
  v24.i64[0] = vextq_s8(v23, v23, 4uLL).u64[0];
  v24.i64[1] = v23.u32[0];
  v25 = (int8x16_t)vmulq_f32(v24, v24);
  *(float32x2_t *)v19.f32 = vpadd_f32(*(float32x2_t *)v25.i8, *(float32x2_t *)v25.i8);
  v26 = (float32x4_t)vextq_s8(v25, v25, 8uLL);
  v26.f32[0] = vadd_f32(*(float32x2_t *)v19.f32, *(float32x2_t *)v26.f32).f32[0];
  if (v26.f32[0] >= 1.4211e-14)
    v27 = vmulq_n_f32(v24, 1.0 / sqrtf(v26.f32[0]));
  else
    v27 = (float32x4_t)xmmword_1DD007970;
  v28 = (btVector3)*a2;
  v29 = vsubq_f32(*a2, v16);
  v29.i32[3] = 0;
  v30 = (int8x16_t)vmulq_f32(v27, v29);
  *(float32x2_t *)v26.f32 = vpadd_f32(*(float32x2_t *)v30.i8, *(float32x2_t *)v30.i8);
  v31 = (float32x4_t)vextq_s8(v30, v30, 8uLL);
  *(float32x2_t *)v31.f32 = vadd_f32(*(float32x2_t *)v26.f32, *(float32x2_t *)v31.f32);
  v26.f32[0] = -v31.f32[0];
  if (v31.f32[0] >= 0.0)
    v26.f32[0] = v31.f32[0];
  if (v26.f32[0] >= v15)
    return 0;
  v57 = v26.f32[0];
  v59 = *a2;
  v26.i32[0] = 0;
  v60 = (btVector3)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v26, v31), 0), (int8x16_t)vnegq_f32(v27), (int8x16_t)v27);
  v61 = v28;
  v56 = v60;
  if (SphereTriangleDetector::pointInTriangle(this, v12 + 5, (int8x16_t *)&v60, (float32x4_t *)&v61))
  {
    v32 = v56;
    v33 = v59;
    v34 = vsubq_f32(v59, vmulq_n_f32((float32x4_t)v56, v57));
    v34.i32[3] = 0;
    v35 = v15 * v15;
  }
  else
  {
    if ((*(int (**)(float32x4_t *))(v12->i64[0] + 200))(v12) < 1)
      return 0;
    v37 = 0;
    v38 = 0;
    v36.f32[0] = v15 * v15;
    v58 = v36;
    do
    {
      (*(void (**)(_QWORD, uint64_t, btVector3 *, btVector3 *))(**((_QWORD **)this + 2) + 208))(*((_QWORD *)this + 2), v37, &v61, &v60);
      v39 = vsubq_f32(*a2, (float32x4_t)v61);
      v39.i32[3] = 0;
      v40 = vsubq_f32((float32x4_t)v60, (float32x4_t)v61);
      v40.i32[3] = 0;
      v41 = (int8x16_t)vmulq_f32(v39, v40);
      v42 = vadd_f32(vpadd_f32(*(float32x2_t *)v41.i8, *(float32x2_t *)v41.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v41, v41, 8uLL));
      v43 = 0.0;
      if (v42.f32[0] > 0.0)
      {
        v44 = (int8x16_t)vmulq_f32(v40, v40);
        v45 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v44, v44, 8uLL), vpadd_f32(*(float32x2_t *)v44.i8, *(float32x2_t *)v44.i8));
        if ((vcgt_f32(v45, v42).u8[0] & 1) != 0)
        {
          LODWORD(v43) = vdiv_f32(v42, v45).u32[0];
          v46 = vmulq_n_f32(v40, v43);
          v46.i32[3] = 0;
          v39 = vsubq_f32(v39, v46);
        }
        else
        {
          v39 = vsubq_f32(v39, v40);
          v43 = 1.0;
        }
      }
      v47 = vmulq_n_f32(v40, v43);
      v47.i32[3] = 0;
      v48 = (int8x16_t)vaddq_f32((float32x4_t)v61, v47);
      v49 = (int8x16_t)vmulq_f32(v39, v39);
      *(float32x2_t *)v47.f32 = vpadd_f32(*(float32x2_t *)v49.i8, *(float32x2_t *)v49.i8);
      v50 = (float32x4_t)vextq_s8(v49, v49, 8uLL);
      *(float32x2_t *)v50.f32 = vadd_f32(*(float32x2_t *)v47.f32, *(float32x2_t *)v50.f32);
      v59 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v58, v50), 0), v48, (int8x16_t)v59);
      if (v50.f32[0] < v58.f32[0])
        v38 = 1;
      v37 = (v37 + 1);
    }
    while ((int)v37 < (*(int (**)(_QWORD))(**((_QWORD **)this + 2) + 200))(*((_QWORD *)this + 2)));
    if ((v38 & 1) == 0)
      return 0;
    v33 = *a2;
    v32 = v56;
    v35 = v58.f32[0];
    v34 = v59;
  }
  v51 = vsubq_f32(v33, v34);
  v51.i32[3] = 0;
  v52 = (int8x16_t)vmulq_f32(v51, v51);
  v53 = vadd_f32(vpadd_f32(*(float32x2_t *)v52.i8, *(float32x2_t *)v52.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v52, v52, 8uLL)).f32[0];
  if (v53 >= v35)
    return 0;
  if (v53 > 0.00000011921)
  {
    v55 = sqrtf(v53);
    v32 = (btVector3)vmulq_n_f32(v51, 1.0 / v55);
    v14 = v14 - v55;
  }
  *a4 = v32;
  *a3 = (btVector3)v34;
  *a5 = -v14;
  return 1;
}

BOOL SphereTriangleDetector::pointInTriangle(SphereTriangleDetector *this, float32x4_t *a2, int8x16_t *a3, float32x4_t *a4)
{
  float32x4_t v4;
  float32x4_t v5;
  int8x8_t v6;
  float32x4_t v7;
  float32x4_t v8;
  int8x8_t v9;
  int8x16_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  float v22;
  int8x16_t v23;
  float v24;
  int8x16_t v25;
  float v26;
  _BOOL4 v28;

  v4 = a2[1];
  v5 = vsubq_f32(v4, *a2);
  v6 = (int8x8_t)vextq_s8((int8x16_t)v5, (int8x16_t)v5, 8uLL).u64[0];
  v5.i32[3] = 0;
  v7 = a2[2];
  v8 = vsubq_f32(v7, v4);
  v9 = (int8x8_t)vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL).u64[0];
  v8.i32[3] = 0;
  v10 = (int8x16_t)vsubq_f32(*a2, v7);
  v11 = (float32x4_t)v10;
  v11.i32[3] = 0;
  v12 = vsubq_f32(*a4, *a2);
  v12.i32[3] = 0;
  v13 = vsubq_f32(*a4, v4);
  v13.i32[3] = 0;
  v14 = vsubq_f32(*a4, v7);
  v14.i32[3] = 0;
  *(int8x8_t *)v15.f32 = vext_s8(*(int8x8_t *)v5.f32, v6, 4uLL);
  v15.i64[1] = v5.i64[0];
  *(int8x8_t *)v16.f32 = vext_s8(*(int8x8_t *)a3->i8, (int8x8_t)*(_OWORD *)&vextq_s8(*a3, *a3, 8uLL), 4uLL);
  v16.i64[1] = a3->i64[0];
  v17 = vsubq_f32(vmulq_f32(v16, v5), vmulq_f32(*(float32x4_t *)a3, v15));
  v15.i64[0] = vextq_s8((int8x16_t)v17, (int8x16_t)v17, 4uLL).u64[0];
  v15.i64[1] = v17.u32[0];
  *(int8x8_t *)v18.f32 = vext_s8(*(int8x8_t *)v8.f32, v9, 4uLL);
  v18.i64[1] = v8.i64[0];
  v19 = (int8x16_t)vsubq_f32(vmulq_f32(v16, v8), vmulq_f32(*(float32x4_t *)a3, v18));
  v18.i64[0] = vextq_s8(v19, v19, 4uLL).u64[0];
  v18.i64[1] = v19.u32[0];
  *(int8x8_t *)v17.f32 = vext_s8(*(int8x8_t *)v10.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL), 4uLL);
  v17.i64[1] = v10.i64[0];
  v20 = (int8x16_t)vsubq_f32(vmulq_f32(v16, v11), vmulq_f32(*(float32x4_t *)a3, v17));
  v17.i64[0] = vextq_s8(v20, v20, 4uLL).u64[0];
  v17.i64[1] = v20.u32[0];
  v21 = (int8x16_t)vmulq_f32(v12, v15);
  v22 = vadd_f32(vpadd_f32(*(float32x2_t *)v21.i8, *(float32x2_t *)v21.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL)).f32[0];
  v23 = (int8x16_t)vmulq_f32(v13, v18);
  LODWORD(v24) = vadd_f32(vpadd_f32(*(float32x2_t *)v23.i8, *(float32x2_t *)v23.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL)).u32[0];
  v25 = (int8x16_t)vmulq_f32(v14, v17);
  LODWORD(v26) = vadd_f32(vpadd_f32(*(float32x2_t *)v25.i8, *(float32x2_t *)v25.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL)).u32[0];
  if (v22 > 0.0 && v24 > 0.0 && v26 > 0.0)
    return 1;
  v28 = v22 <= 0.0;
  if (v24 > 0.0)
    v28 = 0;
  return v26 <= 0.0 && v28;
}

void SphereTriangleDetector::~SphereTriangleDetector(SphereTriangleDetector *this)
{
  JUMPOUT(0x1DF0D41C0);
}

_QWORD *btActivatingCollisionAlgorithm::btActivatingCollisionAlgorithm(_QWORD *a1, uint64_t *a2)
{
  _QWORD *result;

  result = btCollisionAlgorithm::btCollisionAlgorithm(a1, a2);
  *result = off_1EA597F10;
  return result;
}

uint64_t btBoxBoxCollisionAlgorithm::btBoxBoxCollisionAlgorithm(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v9;

  v9 = btActivatingCollisionAlgorithm::btActivatingCollisionAlgorithm((_QWORD *)a1, a3);
  *v9 = &off_1EA597C28;
  *((_BYTE *)v9 + 16) = 0;
  v9[3] = a2;
  if (!a2
    && (*(unsigned int (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a4 + 16), *(_QWORD *)(a5 + 16)))
  {
    *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a4 + 16), *(_QWORD *)(a5 + 16));
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

void btBoxBoxCollisionAlgorithm::~btBoxBoxCollisionAlgorithm(btBoxBoxCollisionAlgorithm *this)
{
  *(_QWORD *)this = &off_1EA597C28;
  if (*((_BYTE *)this + 16) && *((_QWORD *)this + 3))
    (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
  C3DSceneSourcePerformConsistencyCheck(this);
}

{
  btBoxBoxCollisionAlgorithm::~btBoxBoxCollisionAlgorithm(this);
  JUMPOUT(0x1DF0D41C0);
}

btPersistentManifold *btBoxBoxCollisionAlgorithm::processCollision(btPersistentManifold *result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  btPersistentManifold *v7;
  uint64_t v8;
  uint64_t v9;
  float32x4_t *v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t *v13;
  btCollisionObject *var3;
  uint64_t v15;
  _QWORD v16[3];
  float32x4_t v17[8];
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)result->var1[0].var1.var0.var0;
  if (v5)
  {
    v7 = result;
    v8 = *(_QWORD *)(a2 + 8);
    v9 = *(_QWORD *)(a3 + 8);
    a5[1] = v5;
    v18 = 1566444395;
    v10 = *(float32x4_t **)(a2 + 24);
    v11 = v10[1];
    v17[0] = *v10;
    v17[1] = v11;
    v12 = v10[3];
    v17[2] = v10[2];
    v17[3] = v12;
    v13 = *(float32x4_t **)(a3 + 24);
    v17[4] = *v13;
    v17[5] = v13[1];
    v17[6] = v13[2];
    v17[7] = v13[3];
    btBoxBoxDetector::btBoxBoxDetector(v16, v8, v9);
    result = (btPersistentManifold *)btBoxBoxDetector::getClosestPoints((uint64_t)v16, v17, (uint64_t)a5);
    if (LOBYTE(v7->var1[0].var0.var0.var0[2]))
    {
      result = (btPersistentManifold *)a5[1];
      if (LODWORD(result->var6))
      {
        var3 = result->var3;
        v15 = *(_QWORD *)(a5[2] + 16);
        if (var3 == (btCollisionObject *)v15)
          v15 = *(_QWORD *)(a5[3] + 16);
        else
          var3 = *(btCollisionObject **)(a5[3] + 16);
        return btPersistentManifold::refreshContactPoints(result, (const btTransform *)((char *)var3 + 16), (const btTransform *)(v15 + 16));
      }
    }
  }
  return result;
}

float btBoxBoxCollisionAlgorithm::calculateTimeOfImpact()
{
  return 1.0;
}

void btBoxBoxCollisionAlgorithm::getAllContactManifolds(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  BOOL v10;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2 && *(_BYTE *)(a1 + 16))
  {
    v5 = *(_DWORD *)(a2 + 4);
    if (v5 == *(_DWORD *)(a2 + 8))
    {
      v6 = v5 ? 2 * v5 : 1;
      if (v5 < v6)
      {
        if (v6)
        {
          v7 = btAlignedAllocInternal(8 * v6, 16);
          v5 = *(_DWORD *)(a2 + 4);
        }
        else
        {
          v7 = 0;
        }
        if (v5 >= 1)
        {
          v8 = 0;
          do
          {
            *(_QWORD *)(v7 + v8) = *(_QWORD *)(*(_QWORD *)(a2 + 16) + v8);
            v8 += 8;
          }
          while (8 * v5 != v8);
        }
        v9 = *(void ***)(a2 + 16);
        if (v9)
          v10 = *(_BYTE *)(a2 + 24) == 0;
        else
          v10 = 1;
        if (!v10)
        {
          btAlignedFreeInternal(v9);
          v5 = *(_DWORD *)(a2 + 4);
        }
        *(_BYTE *)(a2 + 24) = 1;
        *(_QWORD *)(a2 + 16) = v7;
        *(_DWORD *)(a2 + 8) = v6;
        v2 = *(_QWORD *)(a1 + 24);
      }
    }
    *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v5) = v2;
    *(_DWORD *)(a2 + 4) = v5 + 1;
  }
}

_QWORD *btBoxBoxDetector::btBoxBoxDetector(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = &off_1EA596428;
  result[1] = a2;
  result[2] = a3;
  return result;
}

float *dLineClosestApproach(float *result, const btVector3 *a2, const btVector3 *a3, const btVector3 *a4, float *a5, float *a6)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;

  v6 = a2->var0.var0[1];
  v7 = a4->var0.var0[1];
  v8 = a2->var0.var0[2];
  v9 = a4->var0.var0[2];
  v10 = (float)((float)(v6 * v7) + (float)(a2->var0.var0[0] * a4->var0.var0[0])) + (float)(v8 * v9);
  v11 = 1.0 - (float)(v10 * v10);
  v12 = 0.0;
  v13 = 0.0;
  if (v11 > 0.0001)
  {
    v14 = a3->var0.var0[2] - result[2];
    v15 = a3->var0.var0[0] - *result;
    v16 = a3->var0.var0[1] - result[1];
    v17 = (float)((float)(v7 * v16) + (float)(a4->var0.var0[0] * v15)) + (float)(v9 * v14);
    v18 = (float)((float)(v6 * v16) + (float)(a2->var0.var0[0] * v15)) + (float)(v8 * v14);
    v12 = (float)(1.0 / v11) * (float)(v18 - (float)(v10 * v17));
    v13 = (float)(1.0 / v11) * (float)-(float)(v17 - (float)(v10 * v18));
  }
  *a5 = v12;
  *a6 = v13;
  return result;
}

void cullPoints2(int a1, float32x2_t *a2, int a3, int a4, int *a5)
{
  uint64_t v9;
  float32x2_t v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float *v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float *v26;
  float *v27;
  uint64_t v28;
  float v29;
  int v30;
  float v31;
  int v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  float v37;
  float v38;
  __int32 v39;
  _DWORD __b[8];
  float v41[8];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v9 = (a1 - 1);
  if (a1 == 1)
  {
    v10 = *a2;
    goto LABEL_5;
  }
  if (a1 == 2)
  {
    v10 = vmul_f32(vadd_f32(*a2, a2[1]), (float32x2_t)0x3F0000003F000000);
LABEL_5:
    v11 = v10.f32[1];
    goto LABEL_14;
  }
  v12 = 0.0;
  v13 = 0.0;
  v14 = 0.0;
  if (a1 >= 2)
  {
    v15 = (float *)&a2[1];
    do
    {
      v16 = v15[1];
      v17 = *(v15 - 2);
      v18 = *(v15 - 1);
      v19 = (float)(v17 * v16) - (float)(*v15 * v18);
      v12 = v12 + v19;
      v13 = v13 + (float)(v19 * (float)(v17 + *v15));
      v14 = v14 + (float)(v19 * (float)(v16 + v18));
      v15 += 2;
      --v9;
    }
    while (v9);
  }
  v20 = a2[a1 - 1].f32[0];
  v21 = a2->f32[1];
  v22 = a2[a1 - 1].f32[1];
  v23 = (float)(v20 * v21) - (float)(a2->f32[0] * v22);
  v24 = v12 + v23;
  if (fabsf(v24) <= 0.00000011921)
    v25 = 1.0e18;
  else
    v25 = 1.0 / (float)(v24 * 3.0);
  if (a1 <= 0)
  {
    v30 = 0;
    goto LABEL_17;
  }
  v10.f32[0] = (float)(v13 + (float)(v23 * (float)(v20 + a2->f32[0]))) * v25;
  v11 = (float)(v14 + (float)(v23 * (float)(v21 + v22))) * v25;
LABEL_14:
  v26 = (float *)a2 + 1;
  v27 = v41;
  v28 = a1;
  v39 = v10.i32[0];
  do
  {
    v29 = atan2f(*v26 - v11, *(v26 - 1) - v10.f32[0]);
    v10.i32[0] = v39;
    *v27++ = v29;
    v26 += 2;
    --v28;
  }
  while (v28);
  memset_pattern16(__b, &unk_1DD02C840, 4 * a1);
  v30 = 1;
LABEL_17:
  __b[a4] = 0;
  *a5 = a4;
  if (a3 >= 2)
  {
    v31 = v41[a4];
    v32 = 1;
    do
    {
      a5[1] = a4;
      ++a5;
      v33 = v31 + (float)((float)v32 * (float)(6.2832 / (float)a3));
      if (v33 > 3.1416)
        v33 = v33 + -6.2832;
      v34 = a4;
      if (v30)
      {
        v35 = 0;
        v36 = a4;
        v37 = 1000000000.0;
        do
        {
          if (__b[v35])
          {
            v38 = vabds_f32(v41[v35], v33);
            if (v38 > 3.1416)
              v38 = 6.2832 - v38;
            if (v38 < v37)
            {
              *a5 = v35;
              v36 = v35;
              v37 = v38;
            }
          }
          ++v35;
        }
        while (a1 != v35);
        v34 = v36;
      }
      __b[v34] = 0;
      ++v32;
    }
    while (v32 != a3);
  }
}

uint64_t dBoxBox2(float32x4_t *a1, float *a2, float32x2_t *a3, float32x4_t *a4, float *a5, float32x2_t *a6, float32x4_t *a7, float *a8, unsigned int *a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  float v14;
  float v15;
  float v16;
  float v24;
  float *v25;
  float v26;
  float v27;
  float32x2_t v29;
  float v30;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float *v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v48;
  float v50;
  float v52;
  float v53;
  float v54;
  _BOOL4 v55;
  BOOL v56;
  int v57;
  float *v58;
  float v59;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  _BOOL4 v69;
  BOOL v70;
  int v71;
  float v72;
  float v73;
  BOOL v74;
  float v75;
  float v76;
  _BOOL4 v77;
  float v78;
  float v79;
  float v80;
  _BOOL4 v81;
  float v82;
  unsigned int v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float32x4_t *v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  unsigned int v146;
  uint64_t v147;
  float v148;
  float v149;
  float v150;
  float *v151;
  uint64_t v152;
  float v153;
  uint64_t v154;
  float v155;
  float *v156;
  uint64_t v157;
  float v158;
  uint64_t v159;
  uint64_t v160;
  unsigned int v161;
  uint64_t v162;
  float v163;
  uint64_t v164;
  float v165;
  int8x16_t v166;
  uint64_t v167;
  float *v168;
  float *v169;
  float32x4_t *v170;
  float32x2_t *v171;
  float32x2_t v172;
  float v173;
  float32x2_t v174;
  float v175;
  _BOOL4 v176;
  uint64_t v177;
  _BOOL8 v178;
  float v179;
  uint64_t v180;
  char *v181;
  float v182;
  char *v183;
  int v184;
  unsigned int v185;
  uint64_t v186;
  uint64_t v187;
  float *v188;
  float v189;
  float v190;
  float v191;
  float v192;
  float *v193;
  float v194;
  float v195;
  float v196;
  float v197;
  float *v198;
  float v199;
  float *v200;
  float v201;
  float v202;
  uint64_t v203;
  float *v204;
  float v205;
  float v206;
  float *v207;
  float v208;
  float v209;
  float v210;
  float v211;
  float v212;
  float v213;
  float v214;
  float v215;
  float v216;
  float v217;
  float v218;
  float v219;
  float v220;
  int v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  float v225;
  float v226;
  float v227;
  float v228;
  float v229;
  float v230;
  uint64_t v231;
  float *v232;
  float v233;
  float v234;
  float v235;
  float v236;
  float v237;
  float v238;
  int v239;
  float v240;
  uint64_t v241;
  uint64_t v243;
  btVector3 *v244;
  uint64_t i;
  int8x16_t v246;
  uint64_t j;
  uint64_t v248;
  uint64_t v249;
  int8x16_t v250;
  __n128 v251;
  int8x16_t v252;
  float v253;
  __n128 v254;
  uint64_t v255;
  btVector3 *v256;
  uint64_t v257;
  float v258;
  int8x16_t v259;
  float v260;
  float v261;
  float v262;
  float v263;
  float v264;
  float v265;
  float v266;
  float v267;
  float v268;
  float v269;
  float v270;
  float v271;
  float v272;
  float v273;
  float v274;
  float v275;
  float v276;
  float v277;
  float v278;
  float v279;
  float v280;
  uint64_t v281;
  __n128 v282;
  int8x16_t v283;
  float32x4_t v284;
  float v285;
  float v286;
  float v287;
  float32x2_t v288;
  float v289;
  int8x16_t v290;
  btVector3 v291;
  btVector3 v292;
  btVector3 v293;
  float v294[2];
  btVector3 v295;
  float v296;
  float v297;
  float v298;
  float v299;
  float32x2_t v300;
  float v301;
  float32x2_t v302;
  float v303;
  uint64_t v304;

  v304 = *MEMORY[0x1E0C80C00];
  _Q23 = vsubq_f32(*a4, *a1);
  v14 = *a2;
  v15 = a2[4];
  v16 = a2[5];
  _S4 = a2[8];
  _S9 = a2[9];
  __asm { FMLA            S21, S4, V23.S[2] }
  v24 = a2[1];
  v25 = a2 + 2;
  v26 = a2[2];
  v27 = a2[6];
  _S19 = a2[10];
  v29 = vmul_f32(*a3, (float32x2_t)0x3F0000003F000000);
  v302 = v29;
  v30 = a3[1].f32[0] * 0.5;
  v303 = v30;
  _D5 = vmul_f32(*a6, (float32x2_t)0x3F0000003F000000);
  v300 = _D5;
  v32 = a6[1].f32[0] * 0.5;
  v301 = v32;
  v33 = *a5;
  v35 = a5[4];
  v34 = a5[5];
  v37 = a5[8];
  v36 = a5[9];
  v38 = (float)((float)(v15 * v35) + (float)(v14 * *a5)) + (float)(_S4 * v37);
  v39 = a5[1];
  v40 = (float)((float)(v15 * v34) + (float)(v14 * v39)) + (float)(_S4 * v36);
  v41 = a5 + 2;
  v42 = a5[2];
  v43 = a5[6];
  v44 = a5[10];
  v45 = (float)((float)(v15 * v43) + (float)(v14 * v42)) + (float)(_S4 * v44);
  v46 = fabsf(v38);
  _S26 = fabsf(v40);
  v48 = fabsf(v45);
  __asm { FMLA            S4, S26, V5.S[1] }
  v50 = fabsf(_S21) - (float)(_S4 + (float)(v32 * v48));
  if (v50 > 0.0)
    return 0;
  v273 = v40;
  __asm { FMLA            S7, S9, V23.S[2] }
  v277 = (float)((float)(v16 * v35) + (float)(v24 * v33)) + (float)(_S9 * v37);
  v52 = fabsf(v277);
  v276 = (float)((float)(v16 * v34) + (float)(v24 * v39)) + (float)(_S9 * v36);
  v53 = fabsf(v276);
  v274 = (float)((float)(v16 * v43) + (float)(v24 * v42)) + (float)(_S9 * v44);
  v54 = fabsf(v274);
  v55 = _S21 < 0.0;
  v56 = v50 <= -3.4028e38;
  if (v50 > -3.4028e38)
  {
    v57 = 1;
  }
  else
  {
    v50 = -3.4028e38;
    v55 = 0;
    v57 = 0;
  }
  v58 = v56 ? 0 : a2;
  v59 = fabsf(_S7)
      - (float)((float)((float)(v29.f32[1] + (float)(_D5.f32[0] * v52)) + (float)(_D5.f32[1] * v53)) + (float)(v32 * v54));
  if (v59 > 0.0)
    return 0;
  v271 = v54;
  v264 = v24;
  v265 = v26;
  v266 = v45;
  __asm { FMLA            S14, S19, V23.S[2] }
  v61 = (float)((float)(v27 * v35) + (float)(v26 * v33)) + (float)(_S19 * v37);
  v62 = (float)((float)(v27 * v34) + (float)(v26 * v39)) + (float)(_S19 * v36);
  v63 = (float)((float)(v27 * v43) + (float)(v26 * v42)) + (float)(_S19 * v44);
  v268 = v62;
  v269 = v61;
  v64 = fabsf(v61);
  v65 = fabsf(v62);
  v267 = v63;
  v66 = fabsf(v63);
  if (v59 > v50)
    v67 = v59;
  else
    v67 = v50;
  if (v59 > v50)
  {
    v55 = _S7 < 0.0;
    v57 = 2;
    v58 = a2 + 1;
  }
  v68 = fabsf(_S14)
      - (float)((float)((float)(v30 + (float)(_D5.f32[0] * v64)) + (float)(_D5.f32[1] * v65)) + (float)(v32 * v66));
  if (v68 > 0.0)
    return 0;
  v69 = _S14 < 0.0;
  v70 = v68 <= v67;
  if (v68 <= v67)
    v69 = v55;
  else
    v67 = v68;
  if (v70)
    v71 = v57;
  else
    v71 = 3;
  if (v70)
    v25 = v58;
  v72 = (float)((float)(_Q23.f32[1] * v35) + (float)(v33 * _Q23.f32[0])) + (float)(v37 * _Q23.f32[2]);
  v73 = fabsf(v72)
      - (float)(_D5.f32[0] + (float)((float)((float)(v29.f32[1] * v52) + (float)(v29.f32[0] * v46)) + (float)(v30 * v64)));
  if (v73 > 0.0)
    return 0;
  v74 = v73 <= v67;
  if (v73 > v67)
    v69 = v72 < 0.0;
  else
    v73 = v67;
  if (!v74)
  {
    v71 = 4;
    v25 = a5;
  }
  v75 = (float)((float)(_Q23.f32[1] * v34) + (float)(v39 * _Q23.f32[0])) + (float)(v36 * _Q23.f32[2]);
  v76 = fabsf(v75)
      - (float)(_D5.f32[1]
              + (float)((float)((float)(v29.f32[1] * v53) + (float)(v29.f32[0] * _S26)) + (float)(v30 * v65)));
  if (v76 > 0.0)
    return 0;
  v77 = v75 < 0.0;
  if (v76 > v73)
    v78 = v76;
  else
    v78 = v73;
  if (v76 > v73)
  {
    v69 = v77;
    v71 = 5;
    v25 = a5 + 1;
  }
  v79 = (float)((float)(_Q23.f32[1] * v43) + (float)(v42 * _Q23.f32[0])) + (float)(v44 * _Q23.f32[2]);
  v80 = fabsf(v79)
      - (float)(v32 + (float)((float)((float)(v29.f32[1] * v271) + (float)(v29.f32[0] * v48)) + (float)(v30 * v66)));
  if (v80 > 0.0)
    return 0;
  v81 = v79 < 0.0;
  if (v80 > v78)
    v82 = v80;
  else
    v82 = v78;
  if (v80 > v78)
  {
    v83 = 6;
  }
  else
  {
    v81 = v69;
    v83 = v71;
  }
  if (v80 <= v78)
    v41 = v25;
  v84 = _S26 + 0.00001;
  v85 = v48 + 0.00001;
  v86 = v52 + 0.00001;
  v87 = v64 + 0.00001;
  v88 = (float)(_S14 * v277) - (float)(_S7 * v61);
  v89 = fabsf(v88)
      - (float)((float)((float)((float)(v30 * (float)(v52 + 0.00001)) + (float)(v29.f32[1] * (float)(v64 + 0.00001)))
                      + (float)(_D5.f32[1] * v85))
              + (float)(v32 * v84));
  if (v89 > 0.00000011921)
    return 0;
  v91 = a1;
  v92 = v66;
  v93 = v46 + 0.00001;
  v263 = v53 + 0.00001;
  v94 = v65 + 0.00001;
  v95 = -_S7;
  v96 = 0.0;
  v97 = (float)(v61 * v61) + 0.0;
  v98 = sqrtf(v97 + (float)(v277 * v277));
  if (v98 <= 0.00000011921)
  {
    v100 = 0.0;
    v101 = 0.0;
    v102 = v276;
    v103 = v268;
  }
  else
  {
    v99 = v89 / v98;
    v100 = 0.0;
    v101 = 0.0;
    v102 = v276;
    v103 = v268;
    if ((float)(v99 * 1.05) > v82)
    {
      v41 = 0;
      v96 = 0.0 / v98;
      v100 = (float)-v61 / v98;
      v81 = v88 < 0.0;
      v83 = 7;
      v82 = v99;
      v101 = v277 / v98;
    }
  }
  v104 = (float)(v103 * v95) + (float)(_S14 * v102);
  v105 = fabsf(v104)
       - (float)((float)((float)((float)(v30 * v263) + (float)(v29.f32[1] * v94)) + (float)(_D5.f32[0] * v85))
               + (float)(v32 * v93));
  if (v105 > 0.00000011921)
    return 0;
  v262 = v96;
  v106 = (float)(v103 * v103) + 0.0;
  v107 = sqrtf(v106 + (float)(v102 * v102));
  if (v107 > 0.00000011921 && (float)((float)(v105 / v107) * 1.05) > v82)
  {
    v41 = 0;
    v262 = 0.0 / v107;
    v100 = (float)-v268 / v107;
    v81 = v104 < 0.0;
    v83 = 8;
    v82 = v105 / v107;
    v101 = v102 / v107;
  }
  v261 = v101;
  v108 = (float)(v267 * v95) + (float)(_S14 * v274);
  v109 = fabsf(v108)
       - (float)((float)((float)((float)(v30 * (float)(v271 + 0.00001)) + (float)(v29.f32[1] * (float)(v92 + 0.00001)))
                       + (float)(_D5.f32[0] * v84))
               + (float)(_D5.f32[1] * v93));
  if (v109 > 0.00000011921)
    return 0;
  v110 = v92 + 0.00001;
  v260 = (float)(v267 * v267) + 0.0;
  v111 = sqrtf(v260 + (float)(v274 * v274));
  v272 = v271 + 0.00001;
  if (v111 <= 0.00000011921)
  {
    v113 = v269;
  }
  else
  {
    v112 = v109 / v111;
    v113 = v269;
    if ((float)(v112 * 1.05) > v82)
    {
      v41 = 0;
      v100 = (float)-v267 / v111;
      v81 = v108 < 0.0;
      v83 = 9;
      v82 = v112;
      v261 = v274 / v111;
      v262 = 0.0 / v111;
    }
  }
  v114 = (float)(_S21 * v113) - (float)(_S14 * v38);
  v115 = fabsf(v114)
       - (float)((float)((float)((float)(v30 * v93) + (float)(v29.f32[0] * v87)) + (float)(_D5.f32[1] * v272))
               + (float)(v32 * v263));
  if (v115 > 0.00000011921)
    return 0;
  v270 = v94;
  v116 = -_S14;
  v117 = sqrtf(v97 + (float)(v38 * v38));
  if (v117 <= 0.00000011921)
  {
    v119 = v266;
    v120 = v273;
  }
  else
  {
    v118 = v115 / v117;
    v119 = v266;
    v120 = v273;
    if ((float)(v118 * 1.05) > v82)
    {
      v41 = 0;
      v100 = 0.0 / v117;
      v81 = v114 < 0.0;
      v83 = 10;
      v82 = v118;
      v261 = (float)-v38 / v117;
      v262 = v113 / v117;
    }
  }
  v121 = (float)(v120 * v116) + (float)(_S21 * v268);
  v122 = fabsf(v121)
       - (float)((float)((float)((float)(v30 * v84) + (float)(v29.f32[0] * v270)) + (float)(_D5.f32[0] * v272))
               + (float)(v32 * v86));
  if (v122 > 0.00000011921)
    return 0;
  v123 = sqrtf(v106 + (float)(v120 * v120));
  if (v123 > 0.00000011921)
  {
    v124 = v122 / v123;
    if ((float)(v124 * 1.05) > v82)
    {
      v41 = 0;
      v100 = 0.0 / v123;
      v81 = v121 < 0.0;
      v83 = 11;
      v82 = v124;
      v261 = (float)-v120 / v123;
      v262 = v268 / v123;
    }
  }
  v125 = (float)(v119 * v116) + (float)(_S21 * v267);
  v126 = fabsf(v125)
       - (float)((float)((float)((float)(v30 * v85) + (float)(v29.f32[0] * v110)) + (float)(_D5.f32[0] * v263))
               + (float)(_D5.f32[1] * v86));
  if (v126 > 0.00000011921)
    return 0;
  v127 = sqrtf(v260 + (float)(v119 * v119));
  if (v127 > 0.00000011921)
  {
    v128 = v126 / v127;
    if ((float)(v128 * 1.05) > v82)
    {
      v41 = 0;
      v100 = 0.0 / v127;
      v81 = v125 < 0.0;
      v83 = 12;
      v82 = v128;
      v261 = (float)-v119 / v127;
      v262 = v267 / v127;
    }
  }
  v129 = (float)(_S7 * v38) - (float)(_S21 * v277);
  v130 = fabsf(v129)
       - (float)((float)((float)((float)(v29.f32[1] * v93) + (float)(v29.f32[0] * v86)) + (float)(_D5.f32[1] * v110))
               + (float)(v32 * v270));
  if (v130 > 0.00000011921)
    return 0;
  v131 = -_S21;
  v132 = sqrtf((float)(v38 * v38) + (float)(v277 * v277));
  if (v132 > 0.00000011921)
  {
    v133 = v130 / v132;
    if ((float)(v133 * 1.05) > v82)
    {
      v41 = 0;
      v100 = v38 / v132;
      v81 = v129 < 0.0;
      v83 = 13;
      v82 = v133;
      v261 = 0.0 / v132;
      v262 = (float)-v277 / v132;
    }
  }
  v134 = (float)(v102 * v131) + (float)(_S7 * v120);
  v135 = fabsf(v134)
       - (float)((float)((float)((float)(v29.f32[1] * v84) + (float)(v29.f32[0] * v263)) + (float)(_D5.f32[0] * v110))
               + (float)(v32 * v87));
  if (v135 > 0.00000011921)
    return 0;
  v136 = v100;
  v278 = v82;
  v137 = sqrtf((float)(v120 * v120) + (float)(v102 * v102));
  if (v137 > 0.00000011921)
  {
    v138 = v135 / v137;
    if ((float)(v138 * 1.05) > v82)
    {
      v41 = 0;
      v136 = v273 / v137;
      v81 = v134 < 0.0;
      v83 = 14;
      v278 = v138;
      v261 = 0.0 / v137;
      v262 = (float)-v276 / v137;
    }
  }
  v139 = (float)(v274 * v131) + (float)(_S7 * v266);
  v140 = fabsf(v139)
       - (float)((float)((float)((float)(v29.f32[1] * v85) + (float)(v29.f32[0] * v272)) + (float)(_D5.f32[0] * v270))
               + (float)(_D5.f32[1] * v87));
  if (v140 > 0.00000011921)
    return 0;
  v141 = sqrtf((float)(v266 * v266) + (float)(v274 * v274));
  if (v141 <= 0.00000011921 || (v142 = v140 / v141, (float)(v142 * 1.05) <= v278))
  {
    if (!v83)
      return 0;
    if (v41)
    {
      v143 = *v41;
      a7->f32[0] = *v41;
      v144 = v41[4];
      a7->f32[1] = v144;
      v145 = v41[8];
      goto LABEL_87;
    }
  }
  else
  {
    v136 = v266 / v141;
    v81 = v139 < 0.0;
    v83 = 15;
    v278 = v142;
    v261 = 0.0 / v141;
    v262 = (float)-v274 / v141;
  }
  v143 = (float)((float)(v264 * v136) + (float)(v14 * v262)) + (float)(v265 * v261);
  a7->f32[0] = v143;
  v144 = (float)((float)(v136 * a2[5]) + (float)(a2[4] * v262)) + (float)(a2[6] * v261);
  a7->f32[1] = v144;
  v145 = (float)((float)(v136 * a2[9]) + (float)(a2[8] * v262)) + (float)(a2[10] * v261);
LABEL_87:
  a7->f32[2] = v145;
  if (v81)
  {
    a7->f32[0] = -v143;
    a7->f32[1] = -v144;
    a7->f32[2] = -v145;
  }
  *a8 = -v278;
  v146 = v83 - 7;
  if (v83 >= 7)
  {
    v147 = 0;
    *(_QWORD *)v292.var0.var0 = a1->i64[0];
    LODWORD(v292.var0.var0[2]) = a1->i32[2];
    v149 = a7->f32[0];
    v148 = a7->f32[1];
    v150 = a7->f32[2];
    v151 = a2;
    do
    {
      v152 = 0;
      if ((float)((float)((float)(v148 * a2[v147 + 4]) + (float)(v149 * a2[v147])) + (float)(v150 * a2[v147 + 8])) <= 0.0)
        v153 = -v302.f32[v147];
      else
        v153 = v302.f32[v147];
      do
      {
        v292.var0.var0[v152] = v292.var0.var0[v152] + (float)(v153 * v151[v152 * 4]);
        ++v152;
      }
      while (v152 != 3);
      ++v147;
      ++v151;
    }
    while (v147 != 3);
    v154 = 0;
    *(_QWORD *)v293.var0.var0 = a4->i64[0];
    LODWORD(v293.var0.var0[2]) = a4->i32[2];
    v155 = a7->f32[0];
    v156 = a5;
    do
    {
      v157 = 0;
      if ((float)((float)((float)(v148 * a5[v154 + 4]) + (float)(v155 * a5[v154])) + (float)(v150 * a5[v154 + 8])) <= 0.0)
        v158 = v300.f32[v154];
      else
        v158 = -v300.f32[v154];
      do
      {
        v293.var0.var0[v157] = v293.var0.var0[v157] + (float)(v158 * v156[v157 * 4]);
        ++v157;
      }
      while (v157 != 3);
      ++v154;
      ++v156;
    }
    while (v154 != 3);
    v159 = 0;
    v288.i32[0] = 0;
    v285 = 0.0;
    do
    {
      v295.var0.var0[v159] = a2[v146 / 3uLL + v159 * 4];
      ++v159;
    }
    while (v159 != 3);
    v160 = 0;
    v161 = v146 % 3;
    do
    {
      v291.var0.var0[v160] = a5[(v160 * 4) | v161];
      ++v160;
    }
    while (v160 != 3);
    dLineClosestApproach(v292.var0.var0, &v295, &v293, &v291, (float *)&v288, &v285);
    v162 = 0;
    v163 = v288.f32[0];
    do
    {
      v292.var0.var0[v162] = v292.var0.var0[v162] + (float)(v295.var0.var0[v162] * v163);
      ++v162;
    }
    while (v162 != 3);
    v164 = 0;
    v165 = v285;
    do
    {
      v293.var0.var0[v164] = v293.var0.var0[v164] + (float)(v291.var0.var0[v164] * v165);
      ++v164;
    }
    while (v164 != 3);
    v166.i64[0] = 0x8000000080000000;
    v166.i64[1] = 0x8000000080000000;
    v290 = veorq_s8(*(int8x16_t *)a7, v166);
    (*(void (**)(uint64_t, int8x16_t *, btVector3 *, float))(*(_QWORD *)a13 + 32))(a13, &v290, &v293, v278);
    *a9 = v83;
    return 1;
  }
  v280 = a7->f32[0];
  if (v83 > 3)
  {
    v280 = -a7->f32[0];
    v279 = -a7->f32[1];
    v168 = (float *)&v300;
    v169 = (float *)&v302;
    v275 = -a7->f32[2];
    v170 = a1;
    v91 = a4;
    v171 = (float32x2_t *)a2;
    a2 = a5;
  }
  else
  {
    v279 = a7->f32[1];
    v275 = a7->f32[2];
    v168 = (float *)&v302;
    v169 = (float *)&v300;
    v170 = a4;
    v171 = (float32x2_t *)a5;
  }
  v172 = vmla_n_f32(vmla_n_f32(vmul_n_f32(v171[2], v279), *v171, v280), v171[4], v275);
  v173 = (float)((float)(v279 * v171[3].f32[0]) + (float)(v171[1].f32[0] * v280)) + (float)(v171[5].f32[0] * v275);
  v174 = vabs_f32(v172);
  v175 = fabsf(v173);
  v176 = v174.f32[0] > v175;
  v177 = 2;
  if (v174.f32[1] > v175)
    v177 = 1;
  if (v174.f32[1] <= v174.f32[0])
    v177 = 2 * (v174.f32[0] <= v175);
  else
    v176 = v174.f32[1] > v175;
  v288 = v172;
  v289 = v173;
  v178 = v174.f32[0] > v175 && v174.f32[1] <= v174.f32[0];
  v179 = v169[v177];
  v180 = 0;
  if (*(float *)((unint64_t)&v288 | (4 * v177)) >= 0.0)
  {
    v182 = -v179;
    v183 = (char *)v171 + 4 * v177;
    do
    {
      *(float *)((char *)&v285 + v180 * 4) = (float)(v170->f32[v180] - v91->f32[v180])
                                           + (float)(v182 * *(float *)&v183[1 * v180]);
      ++v180;
    }
    while (v180 != 3);
  }
  else
  {
    v181 = (char *)v171 + 4 * v177;
    do
    {
      *(float *)((char *)&v285 + v180 * 4) = (float)(v170->f32[v180] - v91->f32[v180])
                                           + (float)(v179 * *(float *)&v181[1 * v180]);
      ++v180;
    }
    while (v180 != 3);
  }
  if (v83 < 4)
    v184 = -1;
  else
    v184 = -4;
  v185 = v184 + v83;
  if (v184 + v83)
  {
    v186 = 1;
    v187 = 0;
    if (v185 == 1)
      v186 = 2;
  }
  else
  {
    v186 = 2;
    v187 = 1;
  }
  v188 = &a2[v187];
  v189 = *v188;
  v190 = v188[4];
  v191 = v188[8];
  v192 = (float)((float)(v286 * v190) + (float)(v285 * *v188)) + (float)(v287 * v191);
  v193 = &a2[v186];
  v194 = *v193;
  v195 = v193[4];
  v196 = v193[8];
  v197 = (float)((float)(v286 * v195) + (float)(v285 * *v193)) + (float)(v287 * v196);
  v198 = (float *)v171 + v178;
  v199 = v198[4];
  v200 = v198;
  v201 = v198[8];
  v202 = (float)((float)(v190 * v199) + (float)(v189 * *v198)) + (float)(v191 * v201);
  _ZF = !v176;
  v203 = 1;
  if (!_ZF)
    v203 = 2;
  v204 = (float *)v171 + v203;
  v205 = v204[4];
  v206 = (float)(v190 * v205) + (float)(v189 * *v204);
  v207 = v204;
  v208 = v204[8];
  v209 = v206 + (float)(v191 * v208);
  v210 = (float)((float)(v195 * v199) + (float)(v194 * *v198)) + (float)(v196 * v201);
  v211 = (float)((float)(v195 * v205) + (float)(v194 * *v204)) + (float)(v196 * v208);
  v212 = v169[v178];
  v213 = v202 * v212;
  v214 = v210 * v212;
  v215 = v169[v203];
  v216 = v209 * v215;
  v217 = v211 * v215;
  v295.var0.var0[0] = (float)(v192 - v213) - v216;
  v295.var0.var0[1] = (float)(v197 - v214) - v217;
  v295.var0.var0[2] = (float)(v192 - v213) + v216;
  v295.var0.var0[3] = (float)(v197 - v214) + v217;
  v218 = v192 + v213;
  v219 = v197 + v214;
  v296 = v218 + v216;
  v297 = v219 + v217;
  v298 = v218 - v216;
  v299 = v219 - v217;
  v220 = v168[v186];
  v294[0] = v168[v187];
  v294[1] = v220;
  v221 = intersectRectQuad2(v294, v295.var0.var0, v293.var0.var0);
  if (v221 < 1)
    return 0;
  v222 = 0;
  v223 = 0;
  LODWORD(v224) = a10;
  v225 = 1.0 / (float)((float)(v202 * v211) - (float)(v209 * v210));
  v226 = v202 * v225;
  v227 = v211 * v225;
  v228 = -(float)(v209 * v225);
  v229 = -(float)(v210 * v225);
  v230 = v168[v185];
  do
  {
    v231 = 0;
    v232 = &v293.var0.var0[2 * v222];
    v233 = *v232;
    v234 = v232[1];
    v235 = *v232 - v192;
    v236 = (float)(v228 * (float)(v234 - v197)) + (float)(v227 * v235);
    v237 = (float)(v226 * (float)(v234 - v197)) + (float)(v229 * v235);
    do
    {
      v292.var0.var0[3 * (int)v223 + v231] = (float)(*(float *)((char *)&v285 + v231 * 4)
                                                   + (float)(v236 * v200[v231 * 4]))
                                           + (float)(v237 * v207[v231 * 4]);
      ++v231;
    }
    while (v231 != 3);
    v238 = v230
         - (float)((float)((float)(v279 * v292.var0.var0[3 * (int)v223 + 1])
                         + (float)(v280 * v292.var0.var0[3 * (int)v223]))
                 + (float)(v275 * v292.var0.var0[3 * (int)v223 + 2]));
    v291.var0.var0[(int)v223] = v238;
    if (v238 >= 0.0)
    {
      v293.var0.var0[2 * (int)v223] = v233;
      v293.var0.var0[2 * (_DWORD)v223 + 1] = v234;
      v223 = (v223 + 1);
    }
    ++v222;
  }
  while (v222 != v221);
  v281 = v223;
  if ((int)v223 < 1)
    return 0;
  if ((int)v223 < a10)
    LODWORD(v224) = v223;
  if ((int)v224 <= 1)
    v224 = 1;
  else
    v224 = v224;
  if (v223 <= v224)
  {
    if (v83 >= 4)
    {
      v255 = 0;
      v256 = &v292;
      do
      {
        v257 = 0;
        v258 = v291.var0.var0[v255];
        do
        {
          *(float *)&v290.i32[v257] = (float)(v256->var0.var0[v257] + v91->f32[v257]) - (float)(a7->f32[v257] * v258);
          ++v257;
        }
        while (v257 != 3);
        v259.i64[0] = 0x8000000080000000;
        v259.i64[1] = 0x8000000080000000;
        v284 = (float32x4_t)veorq_s8(*(int8x16_t *)a7, v259);
        (*(void (**)(uint64_t, float32x4_t *, int8x16_t *, float))(*(_QWORD *)a13 + 32))(a13, &v284, &v290, -v258);
        ++v255;
        v256 = (btVector3 *)((char *)v256 + 12);
      }
      while (v255 != v281);
    }
    else
    {
      v243 = 0;
      v244 = &v292;
      do
      {
        for (i = 0; i != 3; ++i)
          *(float *)&v290.i32[i] = v244->var0.var0[i] + v91->f32[i];
        v246.i64[0] = 0x8000000080000000;
        v246.i64[1] = 0x8000000080000000;
        v284 = (float32x4_t)veorq_s8(*(int8x16_t *)a7, v246);
        (*(void (**)(uint64_t, float32x4_t *, int8x16_t *, float))(*(_QWORD *)a13 + 32))(a13, &v284, &v290, -v291.var0.var0[v243++]);
        v244 = (btVector3 *)((char *)v244 + 12);
      }
      while (v243 != v281);
    }
    v167 = v281;
  }
  else
  {
    v167 = v224;
    if (v223 < 2)
    {
      v239 = 0;
    }
    else
    {
      v239 = 0;
      v240 = v291.var0.var0[0];
      v241 = 1;
      do
      {
        if (v291.var0.var0[v241] > v240)
        {
          v239 = v241;
          v240 = v291.var0.var0[v241];
        }
        ++v241;
      }
      while (v223 != v241);
    }
    cullPoints2(v223, (float32x2_t *)&v293, v167, v239, v290.i32);
    for (j = 0; j != v167; ++j)
    {
      v248 = 0;
      v249 = v290.i32[j];
      do
      {
        v284.f32[v248] = v292.var0.var0[3 * (int)v249 + v248] + v91->f32[v248];
        ++v248;
      }
      while (v248 != 3);
      v250.i64[0] = 0x8000000080000000;
      v250.i64[1] = 0x8000000080000000;
      if (v83 > 3)
      {
        v252 = veorq_s8(*(int8x16_t *)a7, v250);
        v253 = v291.var0.var0[v249];
        v254 = (__n128)vsubq_f32(v284, vmulq_n_f32(*a7, v253));
        v254.n128_u32[3] = 0;
        v282 = v254;
        v283 = v252;
        v254.n128_f32[0] = -v253;
        (*(void (**)(uint64_t, int8x16_t *, __n128 *, __n128))(*(_QWORD *)a13 + 32))(a13, &v283, &v282, v254);
      }
      else
      {
        v251 = (__n128)veorq_s8(*(int8x16_t *)a7, v250);
        v283 = (int8x16_t)v251;
        v251.n128_f32[0] = -v291.var0.var0[v249];
        (*(void (**)(uint64_t, int8x16_t *, float32x4_t *, __n128))(*(_QWORD *)a13 + 32))(a13, &v283, &v284, v251);
      }
    }
  }
  *a9 = v83;
  return v167;
}

uint64_t intersectRectQuad2(float *a1, float *a2, float *__src)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  float *v6;
  char v7;
  int v8;
  float *v9;
  int v10;
  float v11;
  int v12;
  float *v13;
  float *v14;
  float v15;
  float v16;
  float v17;
  float *v18;
  _BOOL4 v19;
  float v20;
  BOOL v21;
  char v23;
  uint64_t v24;

  v3 = 0;
  v24 = *MEMORY[0x1E0C80C00];
  LODWORD(v4) = 4;
  v5 = 1;
  v6 = __src;
  do
  {
    v7 = v5;
    v8 = -1;
    v9 = a2;
    do
    {
      a2 = v6;
      v10 = v8;
      if ((int)v4 >= 1)
      {
        v11 = (float)v8;
        v12 = v4;
        v13 = a2;
        v14 = v9;
        v4 = 0;
        do
        {
          v15 = v14[v3];
          v16 = v15 * v11;
          v17 = a1[v3];
          if ((float)(v15 * v11) < v17)
          {
            *v13 = *v14;
            v13[1] = v14[1];
            v4 = (v4 + 1);
            if ((v4 & 8) != 0)
              goto LABEL_24;
            v13 += 2;
            v15 = v14[v3];
            v17 = a1[v3];
            v16 = v15 * v11;
          }
          if (v12 <= 1)
            v18 = v9;
          else
            v18 = v14 + 2;
          v19 = v16 < v17;
          v20 = v18[v3];
          if (v19 != (float)(v20 * v11) < v17)
          {
            v13[v3 ^ 1] = v14[v3 ^ 1]
                        + (float)((float)((float)(v18[v3 ^ 1] - v14[v3 ^ 1]) / (float)(v20 - v15))
                                * (float)-(float)(v15 - (float)(v11 * v17)));
            v13[v3] = a1[v3] * v11;
            v4 = (v4 + 1);
            if ((v4 & 8) != 0)
              goto LABEL_24;
            v13 += 2;
          }
          v14 += 2;
          v21 = __OFSUB__(v12--, 1);
        }
        while (!((v12 < 0) ^ v21 | (v12 == 0)));
      }
      else
      {
        v4 = 0;
      }
      if (a2 == __src)
        v6 = (float *)&v23;
      else
        v6 = __src;
      v8 = v10 + 2;
      v9 = a2;
    }
    while (v10 < 0);
    v5 = 0;
    v3 = 1;
  }
  while ((v7 & 1) != 0);
LABEL_24:
  if (a2 != __src)
    memcpy(__src, a2, 8 * (_DWORD)v4);
  return v4;
}

uint64_t btBoxBoxDetector::getClosestPoints(uint64_t a1, float32x4_t *a2, uint64_t a3)
{
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  float32x4_t *v9;
  double v10;
  double v11;
  unsigned int v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t *v16;
  unsigned int v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  unsigned int v32;
  float v33;
  float32x4_t v34;
  _OWORD v35[3];
  _OWORD v36[3];
  uint64_t v37;

  v6 = 0;
  v37 = *MEMORY[0x1E0C80C00];
  memset(v36, 0, sizeof(v36));
  memset(v35, 0, sizeof(v35));
  do
  {
    v7 = &v36[v6];
    v8 = &v35[v6];
    *(_QWORD *)v7 = a2[v6].i64[0];
    *(_QWORD *)v8 = a2[v6 + 4].i64[0];
    *((_DWORD *)v7 + 2) = a2[v6].i32[2];
    *((_DWORD *)v8 + 2) = a2[v6 + 4].i32[2];
    ++v6;
  }
  while (v6 != 3);
  v9 = *(float32x4_t **)(a1 + 8);
  v28 = v9[3];
  v10 = (*(double (**)(float32x4_t *))(v9->i64[0] + 96))(v9);
  v26 = LODWORD(v10);
  v11 = (*(double (**)(float32x4_t *))(v9->i64[0] + 96))(v9);
  v24 = LODWORD(v11);
  *(float *)&v12 = (*(float (**)(float32x4_t *))(v9->i64[0] + 96))(v9);
  v13.i64[0] = __PAIR64__(v24, v26);
  v13.i64[1] = v12;
  v14 = vaddq_f32(v28, v13);
  v15 = vaddq_f32(v14, v14);
  v15.i32[3] = 0;
  v31 = v15;
  v16 = *(float32x4_t **)(a1 + 16);
  v29 = v16[3];
  v27 = COERCE_UNSIGNED_INT64((*(double (**)(float32x4_t *))(v16->i64[0] + 96))(v16));
  v25 = COERCE_UNSIGNED_INT64((*(double (**)(float32x4_t *))(v16->i64[0] + 96))(v16));
  *(float *)&v17 = (*(float (**)(float32x4_t *))(v16->i64[0] + 96))(v16);
  v18.i64[0] = __PAIR64__(v25, v27);
  v18.i64[1] = v17;
  v19 = vaddq_f32(v29, v18);
  v20 = vaddq_f32(v19, v19);
  v20.i32[3] = 0;
  v30 = v20;
  return dBoxBox2(a2 + 3, (float *)v36, (float32x2_t *)&v31, a2 + 7, (float *)v35, (float32x2_t *)&v30, &v34, &v33, &v32, 4, v22, v23, a3);
}

void btBoxBoxDetector::~btBoxBoxDetector(btBoxBoxDetector *this)
{
  JUMPOUT(0x1DF0D41C0);
}

uint64_t btCollisionDispatcher::btCollisionDispatcher(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;

  *(_QWORD *)a1 = &off_1EA596F50;
  *(_DWORD *)(a1 + 8) = 2;
  *(_BYTE *)(a1 + 40) = 1;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 48) = &off_1EA5965B0;
  *(_QWORD *)(a1 + 10488) = a2;
  *(_QWORD *)(a1 + 96) = btCollisionDispatcher::defaultNearCallback;
  *(_QWORD *)(a1 + 104) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  v5 = 0;
  *(_QWORD *)(a1 + 112) = v4;
  v6 = a1 + 120;
  do
  {
    for (i = 0; i != 36; ++i)
      *(_QWORD *)(v6 + 8 * i) = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 10488) + 32))(*(_QWORD *)(a1 + 10488), v5, i);
    ++v5;
    v6 += 288;
  }
  while (v5 != 36);
  return a1;
}

void btCollisionDispatcher::defaultNearCallback(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  _QWORD v13[6];
  _QWORD v14[5];
  _QWORD v15[5];

  v6 = **a1;
  v7 = *a1[1];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, v6, v7))
  {
    v8 = *(_QWORD *)(v6 + 208);
    v15[0] = 0;
    v15[1] = v8;
    v15[2] = v6;
    v15[3] = v6 + 16;
    v15[4] = -1;
    v9 = *(_QWORD *)(v7 + 208);
    v14[0] = 0;
    v14[1] = v9;
    v14[2] = v7;
    v14[3] = v7 + 16;
    v14[4] = -1;
    if (a1[2]
      || (v10 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, _QWORD))(*(_QWORD *)a2 + 16))(a2, v15, v14, 0), (a1[2] = (uint64_t *)v10) != 0))
    {
      btManifoldResult::btManifoldResult(v13, (uint64_t)v15, (uint64_t)v14);
      v11 = *a1[2];
      if (*(_DWORD *)(a3 + 8) == 1)
      {
        (*(void (**)(void))(v11 + 16))();
      }
      else
      {
        v12 = (*(float (**)(void))(v11 + 24))();
        if (*(float *)(a3 + 12) > v12)
          *(float *)(a3 + 12) = v12;
      }
    }
  }
}

void btCollisionDispatcher::~btCollisionDispatcher(btCollisionDispatcher *this)
{
  *(_QWORD *)this = &off_1EA596F50;
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)this + 16);
  C3DSceneSourcePerformConsistencyCheck(this);
}

{
  *(_QWORD *)this = &off_1EA596F50;
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)this + 16);
  C3DSceneSourcePerformConsistencyCheck(this);
}

{
  *(_QWORD *)this = &off_1EA596F50;
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)this + 16);
  C3DSceneSourcePerformConsistencyCheck(this);
  JUMPOUT(0x1DF0D41C0);
}

uint64_t btCollisionDispatcher::getNewManifold(btCollisionDispatcher *this, const btCollisionObject *a2, const btCollisionObject *a3)
{
  float *v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  float v21;
  float v22;

  v6 = (float *)&gContactBreakingThreshold;
  if ((*((_DWORD *)this + 2) & 2) != 0)
  {
    v22 = (*(float (**)(_QWORD, float))(**((_QWORD **)a2 + 26) + 40))(*((_QWORD *)a2 + 26), *(float *)&gContactBreakingThreshold);
    v21 = (*(float (**)(_QWORD, float))(**((_QWORD **)a3 + 26) + 40))(*((_QWORD *)a3 + 26), *(float *)&gContactBreakingThreshold);
    if (v22 >= v21)
      v6 = &v21;
    else
      v6 = &v22;
  }
  v7 = *(_DWORD *)v6;
  if (*((float *)a2 + 49) >= *((float *)a3 + 49))
    v8 = *((_DWORD *)a3 + 49);
  else
    v8 = *((_DWORD *)a2 + 49);
  v9 = *((_QWORD *)this + 14);
  v10 = *(_DWORD *)(v9 + 8);
  if (v10)
  {
    v11 = *(_QWORD *)(v9 + 16);
    *(_QWORD *)(v9 + 16) = *(_QWORD *)v11;
    *(_DWORD *)(v9 + 8) = v10 - 1;
  }
  else
  {
    if ((*((_BYTE *)this + 8) & 4) != 0)
      return 0;
    v11 = btAlignedAllocInternal(832, 16);
  }
  v12 = 0;
  *(_DWORD *)v11 = 1025;
  do
  {
    v13 = v11 + v12;
    *(_QWORD *)(v13 + 128) = 0;
    *(_BYTE *)(v13 + 136) = 0;
    *(_OWORD *)(v13 + 140) = 0uLL;
    *(_OWORD *)(v13 + 156) = 0uLL;
    v12 += 192;
  }
  while (v12 != 768);
  *(_QWORD *)(v11 + 784) = a2;
  *(_QWORD *)(v11 + 792) = a3;
  *(_DWORD *)(v11 + 800) = 0;
  *(_DWORD *)(v11 + 804) = v7;
  *(_DWORD *)(v11 + 808) = v8;
  *(_QWORD *)(v11 + 824) = 0;
  v14 = *((_DWORD *)this + 5);
  v15 = *((_DWORD *)this + 6);
  *(_DWORD *)(v11 + 820) = v14;
  if (v14 == v15)
  {
    v16 = v14 ? 2 * v14 : 1;
    if (v14 < v16)
    {
      if (v16)
      {
        v17 = btAlignedAllocInternal(8 * v16, 16);
        v14 = *((_DWORD *)this + 5);
      }
      else
      {
        v17 = 0;
      }
      if (v14 >= 1)
      {
        v18 = 0;
        do
        {
          *(_QWORD *)(v17 + v18) = *(_QWORD *)(*((_QWORD *)this + 4) + v18);
          v18 += 8;
        }
        while (8 * v14 != v18);
      }
      v19 = (void **)*((_QWORD *)this + 4);
      if (v19 && *((_BYTE *)this + 40))
      {
        btAlignedFreeInternal(v19);
        v14 = *((_DWORD *)this + 5);
      }
      *((_BYTE *)this + 40) = 1;
      *((_QWORD *)this + 4) = v17;
      *((_DWORD *)this + 6) = v16;
    }
  }
  *(_QWORD *)(*((_QWORD *)this + 4) + 8 * v14) = v11;
  *((_DWORD *)this + 5) = v14 + 1;
  return v11;
}

btPersistentManifold *btCollisionDispatcher::clearManifold(btCollisionDispatcher *this, btPersistentManifold *a2)
{
  uint64_t v3;
  btManifoldPoint *v4;
  btPersistentManifold *result;

  if (SLODWORD(a2->var6) >= 1)
  {
    v3 = 0;
    v4 = (btManifoldPoint *)&a2->var1[0].var0.var0.var0[2];
    do
    {
      result = btPersistentManifold::clearUserCache(a2, v4);
      ++v3;
      ++v4;
    }
    while (v3 < SLODWORD(a2->var6));
  }
  a2->var6 = 0.0;
  return result;
}

void btCollisionDispatcher::releaseManifold(btCollisionDispatcher *this, btPersistentManifold *a2)
{
  uint64_t var10_high;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  unint64_t v9;

  (*(void (**)(btCollisionDispatcher *))(*(_QWORD *)this + 40))(this);
  var10_high = SHIDWORD(a2->var10);
  v5 = *((int *)this + 5) - 1;
  v6 = *((_QWORD *)this + 4);
  v7 = *(_QWORD *)(v6 + 8 * var10_high);
  *(_QWORD *)(v6 + 8 * var10_high) = *(_QWORD *)(v6 + 8 * v5);
  *(_QWORD *)(*((_QWORD *)this + 4) + 8 * v5) = v7;
  *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 8 * var10_high) + 820) = var10_high;
  *((_DWORD *)this + 5) = v5;
  v8 = (int *)*((_QWORD *)this + 14);
  v9 = *((_QWORD *)v8 + 3);
  if (v9 > (unint64_t)a2 || v9 + *v8 * (uint64_t)v8[1] <= (unint64_t)a2)
  {
    btAlignedFreeInternal((void **)a2);
  }
  else
  {
    *(_QWORD *)&a2->var0 = *((_QWORD *)v8 + 2);
    *((_QWORD *)v8 + 2) = a2;
    ++v8[2];
  }
}

uint64_t btCollisionDispatcher::findAlgorithm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD v6[2];

  v6[0] = a1;
  v6[1] = a4;
  v4 = *(_QWORD *)(a1 + 288 * *(int *)(*(_QWORD *)(a2 + 8) + 8) + 8 * *(int *)(*(_QWORD *)(a3 + 8) + 8) + 120);
  return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, v6, a2, a3);
}

BOOL btCollisionDispatcher::needsResponse(btCollisionDispatcher *this, const btCollisionObject *a2, const btCollisionObject *a3)
{
  int v3;
  _BOOL4 v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  _BOOL4 v9;

  v3 = *((_DWORD *)a2 + 58);
  if ((v3 & 4) != 0)
  {
    result = 0;
  }
  else
  {
    v4 = (v3 & 3) == 0 || (*((_DWORD *)a3 + 58) & 3) == 0;
    result = (*((_DWORD *)a3 + 58) & 4) == 0 && v4;
  }
  v6 = *((_QWORD *)a2 + 25);
  v7 = *((_QWORD *)a3 + 25);
  if (v6)
    v8 = v7 == 0;
  else
    v8 = 1;
  if (!v8)
  {
    v9 = (*(_QWORD *)(v7 + 16) & *(_QWORD *)(v6 + 8)) != 0 && (*(_QWORD *)(v6 + 16) & *(_QWORD *)(v7 + 8)) != 0;
    return result && v9;
  }
  return result;
}

uint64_t btCollisionDispatcher::needsCollision(btCollisionDispatcher *this, const btCollisionObject *a2, const btCollisionObject *a3)
{
  int v3;
  int v5;

  v3 = *((_DWORD *)a2 + 61);
  if (v3 == 5 || v3 == 2)
  {
    v5 = *((_DWORD *)a3 + 61);
    if (v5 == 2 || v5 == 5)
      return 0;
  }
  if (*((_DWORD *)a2 + 73))
    return (**(uint64_t (***)(const btCollisionObject *, const btCollisionObject *))a2)(a2, a3);
  return 1;
}

uint64_t btCollisionDispatcher::dispatchAllCollisionPairs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v5[3];

  v5[0] = &off_1EA597440;
  v5[1] = a3;
  v5[2] = a1;
  return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a2 + 96))(a2, v5, a4);
}

_QWORD *btCollisionDispatcher::allocateCollisionAlgorithm(btCollisionDispatcher *this, int a2)
{
  uint64_t v2;
  int v3;
  _QWORD *result;

  v2 = *((_QWORD *)this + 13);
  v3 = *(_DWORD *)(v2 + 8);
  if (!v3)
    return (_QWORD *)btAlignedAllocInternal(a2, 16);
  result = *(_QWORD **)(v2 + 16);
  *(_QWORD *)(v2 + 16) = *result;
  *(_DWORD *)(v2 + 8) = v3 - 1;
  return result;
}

void btCollisionDispatcher::freeCollisionAlgorithm(btCollisionDispatcher *this, void **a2)
{
  int *v2;
  unint64_t v3;

  if (a2
    && (v2 = (int *)*((_QWORD *)this + 13), v3 = *((_QWORD *)v2 + 3), v3 <= (unint64_t)a2)
    && v3 + *v2 * (uint64_t)v2[1] > (unint64_t)a2)
  {
    *a2 = (void *)*((_QWORD *)v2 + 2);
    *((_QWORD *)v2 + 2) = a2;
    ++v2[2];
  }
  else
  {
    btAlignedFreeInternal(a2);
  }
}

void btCollisionPairCallback::~btCollisionPairCallback(btCollisionPairCallback *this)
{
  JUMPOUT(0x1DF0D41C0);
}

uint64_t btCollisionPairCallback::processOverlap(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 96))(a2);
  return 0;
}

void btCollisionObject::btCollisionObject(btCollisionObject *this)
{
  *(_QWORD *)this = &off_1EA5966C0;
  *((_OWORD *)this + 11) = xmmword_1DD008470;
  *((_QWORD *)this + 24) = 0x5D5E0B6B00000000;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = xmmword_1DD02C850;
  *(_OWORD *)((char *)this + 248) = xmmword_1DD02C860;
  *((_DWORD *)this + 66) = 1;
  *((_QWORD *)this + 34) = 0;
  *((_QWORD *)this + 35) = 1065353216;
  *((_QWORD *)this + 36) = 0;
  *((_OWORD *)this + 1) = xmmword_1DD007970;
  *((_OWORD *)this + 2) = xmmword_1DD007920;
  *((_OWORD *)this + 3) = xmmword_1DD007600;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
}

btCollisionObject *btCollisionObject::setActivationState(btCollisionObject *this, int a2)
{
  if ((*((_DWORD *)this + 61) & 0xFFFFFFFE) != 4)
    *((_DWORD *)this + 61) = a2;
  return this;
}

btCollisionObject *btCollisionObject::forceActivationState(btCollisionObject *this, int a2)
{
  *((_DWORD *)this + 61) = a2;
  return this;
}

btCollisionObject *btCollisionObject::activate(btCollisionObject *this, char a2)
{
  if ((a2 & 1) != 0 || (*((_BYTE *)this + 232) & 3) == 0)
  {
    if ((*((_DWORD *)this + 61) & 0xFFFFFFFE) != 4)
      *((_DWORD *)this + 61) = 1;
    *((_DWORD *)this + 62) = 0;
  }
  return this;
}

const char *btCollisionObject::serialize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t v10;
  uint64_t m;
  uint64_t n;
  uint64_t ii;
  uint64_t jj;
  uint64_t kk;
  uint64_t mm;
  int32x4_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = 0;
  for (i = 0; i != 3; ++i)
  {
    for (j = 0; j != 16; j += 4)
      *(_DWORD *)(a2 + v6 + j + 32) = *(_DWORD *)(a1 + v6 + j + 16);
    v6 += 16;
  }
  for (k = 0; k != 16; k += 4)
    *(_DWORD *)(a2 + k + 80) = *(_DWORD *)(a1 + k + 64);
  v10 = 0;
  for (m = 0; m != 3; ++m)
  {
    for (n = 0; n != 16; n += 4)
      *(_DWORD *)(a2 + v10 + n + 96) = *(_DWORD *)(a1 + v10 + n + 80);
    v10 += 16;
  }
  for (ii = 0; ii != 16; ii += 4)
    *(_DWORD *)(a2 + ii + 144) = *(_DWORD *)(a1 + ii + 128);
  for (jj = 0; jj != 16; jj += 4)
    *(_DWORD *)(a2 + jj + 160) = *(_DWORD *)(a1 + jj + 144);
  for (kk = 0; kk != 16; kk += 4)
    *(_DWORD *)(a2 + kk + 176) = *(_DWORD *)(a1 + kk + 160);
  for (mm = 0; mm != 16; mm += 4)
    *(_DWORD *)(a2 + mm + 192) = *(_DWORD *)(a1 + mm + 176);
  *(_DWORD *)(a2 + 240) = *(_DWORD *)(a1 + 192);
  *(_DWORD *)(a2 + 208) = *(_DWORD *)(a1 + 196);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 56))(a3, *(_QWORD *)(a1 + 208));
  *(_QWORD *)(a2 + 16) = 0;
  v17 = vrev64q_s32(*(int32x4_t *)(a1 + 248));
  v17.i64[0] = *(_QWORD *)(a1 + 248);
  *(_OWORD *)(a2 + 244) = *(_OWORD *)(a1 + 232);
  *(int32x4_t *)(a2 + 212) = v17;
  *(_DWORD *)(a2 + 260) = *(_DWORD *)(a1 + 264);
  v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 80))(a3, a1);
  v19 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 56))(a3, v18);
  *(_QWORD *)(a2 + 24) = v19;
  if (v19)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 96))(a3, v18);
  *(_QWORD *)(a2 + 228) = *(_QWORD *)(a1 + 280);
  *(_DWORD *)(a2 + 236) = *(_DWORD *)(a1 + 288);
  *(_DWORD *)(a2 + 264) = *(_DWORD *)(a1 + 292);
  return "btCollisionObjectFloatData";
}

uint64_t btCollisionObject::serializeSingleObject(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v5 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 32))(a2, v4, 1);
  v6 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 40))(a1, *(_QWORD *)(v5 + 8), a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, v5, v6, 1245859651, a1);
}

uint64_t btCollisionObject::checkCollideWithOverride(btCollisionObject *this, const btCollisionObject *a2)
{
  return 1;
}

btCollisionObject *btCollisionObject::setCollisionShape(btCollisionObject *this, btCollisionShape *a2)
{
  *((_QWORD *)this + 26) = a2;
  *((_QWORD *)this + 28) = a2;
  return this;
}

uint64_t btCollisionObject::calculateSerializeBufferSize(btCollisionObject *this)
{
  return 272;
}

double btCollisionWorld::btCollisionWorld(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)a1 = &off_1EA596480;
  *(_BYTE *)(a1 + 32) = 1;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 40) = a2;
  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)&result = 0x100000000;
  *(_QWORD *)(a1 + 52) = 0x100000000;
  *(_DWORD *)(a1 + 60) = 1065353216;
  *(_BYTE *)(a1 + 64) = 1;
  *(_QWORD *)(a1 + 72) = 0;
  *(_WORD *)(a1 + 80) = 256;
  *(_BYTE *)(a1 + 82) = 1;
  *(_DWORD *)(a1 + 84) = 1025758986;
  *(_BYTE *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 92) = 0;
  *(_QWORD *)(a1 + 96) = a3;
  *(_QWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 112) = 1;
  return result;
}

void btCollisionWorld::~btCollisionWorld(btCollisionWorld *this)
{
  int v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1EA596480;
  v2 = *((_DWORD *)this + 3);
  if (v2 >= 1)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(_QWORD *)(*((_QWORD *)this + 3) + 8 * i);
      v5 = *(_QWORD *)(v4 + 200);
      if (v5)
      {
        v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 12) + 72))(*((_QWORD *)this + 12));
        (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v6 + 80))(v6, v5, *((_QWORD *)this + 5));
        (*(void (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 12) + 24))(*((_QWORD *)this + 12), v5, *((_QWORD *)this + 5));
        *(_QWORD *)(v4 + 200) = 0;
        v2 = *((_DWORD *)this + 3);
      }
    }
  }
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)this + 8);
}

{
  btCollisionWorld::~btCollisionWorld(this);
  JUMPOUT(0x1DF0D41C0);
}

uint64_t btCollisionWorld::addCollisionObject(btCollisionWorld *this, btCollisionObject *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  __int128 v15;
  __int128 v16;
  uint64_t result;
  _BYTE v18[16];
  _BYTE v19[16];
  _OWORD v20[4];

  v10 = *((_DWORD *)this + 3);
  if (v10 == *((_DWORD *)this + 4))
  {
    v11 = v10 ? 2 * v10 : 1;
    if (v10 < v11)
    {
      if (v11)
      {
        v12 = btAlignedAllocInternal(8 * v11, 16);
        v10 = *((_DWORD *)this + 3);
      }
      else
      {
        v12 = 0;
      }
      if (v10 >= 1)
      {
        v13 = 0;
        do
        {
          *(_QWORD *)(v12 + v13) = *(_QWORD *)(*((_QWORD *)this + 3) + v13);
          v13 += 8;
        }
        while (8 * v10 != v13);
      }
      v14 = (void **)*((_QWORD *)this + 3);
      if (v14 && *((_BYTE *)this + 32))
      {
        btAlignedFreeInternal(v14);
        v10 = *((_DWORD *)this + 3);
      }
      *((_BYTE *)this + 32) = 1;
      *((_QWORD *)this + 3) = v12;
      *((_DWORD *)this + 4) = v11;
    }
  }
  *(_QWORD *)(*((_QWORD *)this + 3) + 8 * v10) = a2;
  *((_DWORD *)this + 3) = v10 + 1;
  v15 = *((_OWORD *)a2 + 2);
  v20[0] = *((_OWORD *)a2 + 1);
  v20[1] = v15;
  v16 = *((_OWORD *)a2 + 4);
  v20[2] = *((_OWORD *)a2 + 3);
  v20[3] = v16;
  (*(void (**)(_QWORD, _OWORD *, _BYTE *, _BYTE *))(**((_QWORD **)a2 + 26) + 16))(*((_QWORD *)a2 + 26), v20, v19, v18);
  result = (*(uint64_t (**)(_QWORD, _BYTE *, _BYTE *, _QWORD, btCollisionObject *, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(**((_QWORD **)this + 12) + 16))(*((_QWORD *)this + 12), v19, v18, *(unsigned int *)(*((_QWORD *)a2 + 26) + 8), a2, a3, a4, a5, *((_QWORD *)this + 5), 0);
  *((_QWORD *)a2 + 25) = result;
  return result;
}

btCollisionObject *btCollisionWorld::updateSingleAabb(btCollisionWorld *this, btCollisionObject *a2)
{
  const float *v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  int8x16_t v9;
  btCollisionObject *result;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;

  (*(void (**)(_QWORD, char *, float32x4_t *, float32x4_t *))(**((_QWORD **)a2 + 26) + 16))(*((_QWORD *)a2 + 26), (char *)a2 + 16, &v15, &v14);
  v4 = (const float *)&gContactBreakingThreshold;
  v5 = vld1q_dup_f32(v4);
  v5.i32[3] = 0;
  v6 = vsubq_f32(v15, v5);
  v15 = v6;
  v7 = vaddq_f32(v14, v5);
  v14 = v7;
  if (*((_BYTE *)this + 64) && *((_DWORD *)a2 + 66) == 2 && (*((_BYTE *)a2 + 232) & 3) == 0)
  {
    v11 = v5;
    (*(void (**)(_QWORD, char *, float32x4_t *, float32x4_t *))(**((_QWORD **)a2 + 26) + 16))(*((_QWORD *)a2 + 26), (char *)a2 + 80, &v13, &v12);
    v6 = vminq_f32(v15, vsubq_f32(v13, v11));
    v15 = v6;
    v7 = vmaxq_f32(v14, vaddq_f32(v11, v12));
    v14 = v7;
  }
  if ((*((_BYTE *)a2 + 232) & 1) != 0)
    return (btCollisionObject *)(*(uint64_t (**)(_QWORD, _QWORD, float32x4_t *, float32x4_t *, _QWORD))(**((_QWORD **)this + 12) + 32))(*((_QWORD *)this + 12), *((_QWORD *)a2 + 25), &v15, &v14, *((_QWORD *)this + 5));
  v8 = vsubq_f32(v7, v6);
  v8.i32[3] = 0;
  v9 = (int8x16_t)vmulq_f32(v8, v8);
  if (vadd_f32(vpadd_f32(*(float32x2_t *)v9.i8, *(float32x2_t *)v9.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL)).f32[0] < 1.0e12)return (btCollisionObject *)(*(uint64_t (**)(_QWORD, _QWORD, float32x4_t *, float32x4_t *, _QWORD))(**((_QWORD **)this + 12) + 32))(*((_QWORD *)this + 12), *((_QWORD *)a2 + 25), &v15, &v14, *((_QWORD *)this + 5));
  result = btCollisionObject::setActivationState(a2, 5);
  if ((btCollisionWorld::updateSingleAabb(btCollisionObject *)::reportMe & 1) == 0)
  {
    result = (btCollisionObject *)*((_QWORD *)this + 13);
    if (result)
    {
      btCollisionWorld::updateSingleAabb(btCollisionObject *)::reportMe = 1;
      (*(void (**)(btCollisionObject *, const char *))(*(_QWORD *)result + 72))(result, "Overflow in AABB, object removed from simulation");
      (*(void (**)(_QWORD, const char *))(**((_QWORD **)this + 13) + 72))(*((_QWORD *)this + 13), "If you can reproduce this, please email bugs@continuousphysics.com\n");
      (*(void (**)(_QWORD, const char *))(**((_QWORD **)this + 13) + 72))(*((_QWORD *)this + 13), "Please include above information, your Platform, version of OS.\n");
      return (btCollisionObject *)(*(uint64_t (**)(_QWORD, const char *))(**((_QWORD **)this + 13) + 72))(*((_QWORD *)this + 13), "Thanks.\n");
    }
  }
  return result;
}

btCollisionObject *btCollisionWorld::updateAabbs(btCollisionObject *this)
{
  int v1;
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  int v5;

  v1 = *((_DWORD *)this + 3);
  if (v1 >= 1)
  {
    v2 = (uint64_t)this;
    for (i = 0; i < v1; ++i)
    {
      v4 = *(_QWORD *)(*(_QWORD *)(v2 + 24) + 8 * i);
      if (!*(_BYTE *)(v2 + 112))
      {
        v5 = *(_DWORD *)(v4 + 244);
        if (v5 == 2 || v5 == 5)
          continue;
      }
      this = btCollisionWorld::updateSingleAabb((btCollisionWorld *)v2, (btCollisionObject *)v4);
      v1 = *(_DWORD *)(v2 + 12);
    }
  }
  return this;
}

uint64_t btCollisionWorld::computeOverlappingPairs(btCollisionWorld *this)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 12) + 64))(*((_QWORD *)this + 12), *((_QWORD *)this + 5));
}

uint64_t btCollisionWorld::performDiscreteCollisionDetection(btCollisionWorld *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  (*(void (**)(btCollisionWorld *))(*(_QWORD *)this + 16))(this);
  result = (*(uint64_t (**)(btCollisionWorld *))(*(_QWORD *)this + 24))(this);
  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 12) + 72))(*((_QWORD *)this + 12));
    return (*(uint64_t (**)(uint64_t, uint64_t, char *, _QWORD))(*(_QWORD *)v3 + 64))(v3, v4, (char *)this + 48, *((_QWORD *)this + 5));
  }
  return result;
}

uint64_t btCollisionWorld::removeCollisionObject(btCollisionWorld *this, btCollisionObject *a2)
{
  uint64_t v3;
  uint64_t v5;
  btCollisionObject *v7;

  v7 = a2;
  v3 = *((_QWORD *)a2 + 25);
  if (v3)
  {
    v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 12) + 72))(*((_QWORD *)this + 12));
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v5 + 80))(v5, v3, *((_QWORD *)this + 5));
    (*(void (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 12) + 24))(*((_QWORD *)this + 12), v3, *((_QWORD *)this + 5));
    *((_QWORD *)a2 + 25) = 0;
  }
  return btAlignedObjectArray<btCollisionObject *>::remove((uint64_t)this + 8, &v7);
}

uint64_t btAlignedObjectArray<btCollisionObject *>::remove(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  v2 = *(unsigned int *)(result + 4);
  if ((int)v2 >= 1)
  {
    v3 = 0;
    v4 = *(_QWORD *)(result + 16);
    while (*(_QWORD *)(v4 + 8 * v3) != *a2)
    {
      if (v2 == ++v3)
        return result;
    }
    if ((int)v2 > (int)v3)
    {
      v5 = v2 - 1;
      v6 = *(_QWORD *)(v4 + 8 * v3);
      *(_QWORD *)(v4 + 8 * v3) = *(_QWORD *)(v4 + 8 * v5);
      *(_QWORD *)(*(_QWORD *)(result + 16) + 8 * v5) = v6;
      *(_DWORD *)(result + 4) = v5;
    }
  }
  return result;
}

uint64_t btCollisionWorld::rayTestSingleInternal(float32x4_t *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  int32x4_t v11;
  int8x16_t v12;
  float32x4_t v13;
  int32x2_t v14;
  unsigned __int32 v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  int8x16_t v20;
  int8x16_t v21;
  float32x4_t v22;
  float32x4_t v23;
  int8x16_t v24;
  int8x16_t v25;
  float32x4_t v26;
  int8x16_t v27;
  float32x4_t v28;
  int8x16_t v29;
  float32x4_t v30;
  float32x4_t v31;
  int8x16_t v32;
  float v33;
  float32x4_t v34;
  int8x16_t v35;
  float v36;
  int8x16_t v37;
  float v38;
  float v40;
  int8x16_t v41;
  float32x4_t v42;
  int8x16_t v43;
  int8x16_t v44;
  float32x4_t v45;
  float32x4_t v46;
  int32x2_t v47;
  unsigned __int32 v48;
  float32x4_t v49;
  int8x16_t v50;
  float32x4_t v51;
  int8x16_t v52;
  float32x4_t v53;
  int8x16_t v54;
  float32x4_t v55;
  float32x4_t v56;
  int8x16_t v57;
  int8x16_t v58;
  float32x4_t v59;
  float32x4_t v60;
  int8x16_t v61;
  int8x16_t v62;
  uint64_t v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  __n128 v69;
  void **v70;
  uint64_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  int v79;
  uint64_t v80;
  float32x4_t v81;
  _OWORD v82[2];
  btVector3 v83;
  float32x4_t v84;
  float v85;
  uint64_t (**v86)();
  uint64_t v87;
  float32x4_t v88;
  float32x4_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int32x4_t v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  int v99;
  char v100;
  btVector3 v101;
  float32x4_t v102;
  float v103;
  uint64_t v104;
  int v105;
  void *v106;
  int v107;
  int v108;
  int v109;
  uint64_t v110;

  v110 = *MEMORY[0x1E0C80C00];
  btConvexInternalShape::btConvexInternalShape((btConvexInternalShape *)&v106);
  v106 = &unk_1EA5956E8;
  v107 = 8;
  v108 = 0;
  v109 = 0;
  v8 = a3[1];
  v9 = a3[3];
  v10 = *(_DWORD *)(v8 + 8);
  if (v10 == 28)
  {
    v11 = *(int32x4_t *)(v9 + 16);
    v12 = *(int8x16_t *)(v9 + 32);
    v13 = (float32x4_t)vtrn1q_s32(*(int32x4_t *)v9, v11);
    v14 = vzip2_s32(*(int32x2_t *)v12.i8, 0);
    v15 = vextq_s8(v12, v12, 8uLL).u32[0];
    v16.i64[0] = vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL).u64[0];
    v13.i64[1] = v12.u32[0];
    v12.i64[0] = 0x8000000080000000;
    v12.i64[1] = 0x8000000080000000;
    v17 = (float32x4_t)veorq_s8(*(int8x16_t *)(v9 + 48), v12);
    v18 = vmulq_f32(v13, v17);
    *(int32x2_t *)v19.f32 = vzip2_s32(*(int32x2_t *)v9, *(int32x2_t *)v11.i8);
    *(int32x2_t *)&v19.u32[2] = v14;
    v20 = (int8x16_t)vmulq_f32(v19, v17);
    v16.i64[1] = v15;
    v21 = (int8x16_t)vmulq_f32(v16, v17);
    v21.i32[3] = 0;
    *(float32x2_t *)v18.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v18.f32, *(float32x2_t *)v20.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL)));
    v22 = a1[3];
    v23 = vmulq_f32(v13, v22);
    v24 = (int8x16_t)vmulq_f32(v19, v22);
    v25 = (int8x16_t)vmulq_f32(v16, v22);
    v25.i32[3] = 0;
    *(float32x2_t *)v23.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v24.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL)));
    *(float32x2_t *)&v23.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v25.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL)), 0);
    *(float32x2_t *)&v18.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v21.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL)), 0);
    v26 = *(float32x4_t *)(a2 + 48);
    v27 = (int8x16_t)vmulq_f32(v13, v26);
    v28 = vmulq_f32(v19, v26);
    v29 = (int8x16_t)vmulq_f32(v16, v26);
    v29.i32[3] = 0;
    *(float32x2_t *)v28.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v27.i8, *(float32x2_t *)v28.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v28, (int8x16_t)v28, 8uLL)));
    *(float32x2_t *)&v28.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v29.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL)), 0);
    v30 = vaddq_f32(v18, v23);
    v31 = vsubq_f32(vaddq_f32(v18, v28), v30);
    v31.i32[3] = 0;
    v32 = (int8x16_t)vmulq_f32(v31, v31);
    v33 = sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL), vpadd_f32(*(float32x2_t *)v32.i8, *(float32x2_t *)v32.i8)).f32[0]);
    v34 = *(float32x4_t *)(v8 + 64);
    v34.i32[3] = *(_DWORD *)(v8 + 80);
    v35 = (int8x16_t)vmulq_f32(v34, vmulq_n_f32(v31, 1.0 / v33));
    v36 = vadd_f32(vpadd_f32(*(float32x2_t *)v35.i8, *(float32x2_t *)v35.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL)).f32[0];
    if (v36 != 0.0)
    {
      v37 = (int8x16_t)vmulq_f32(v30, v34);
      v38 = (float)-(float)(*(float *)(v8 + 80)
                          + vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v37, v37, 8uLL), vpadd_f32(*(float32x2_t *)v37.i8, *(float32x2_t *)v37.i8)).f32[0])/ v36;
      if (v38 >= -0.00000011921 && v38 <= v33)
      {
        v40 = v38 / v33;
        if (v40 < *(float *)(a4 + 8))
        {
          v86 = (uint64_t (**)())a3[2];
          v87 = 0;
          v88 = v34;
          *(float *)&v89 = v40;
          (*(void (**)(uint64_t, uint64_t (***)(), _QWORD))(*(_QWORD *)a4 + 24))(a4, &v86, 0);
        }
      }
    }
  }
  else if (v10 > 19)
  {
    if ((v10 - 21) > 8)
    {
      if (v10 == 31)
      {
        v70 = *(void ***)(v8 + 96);
        v71 = a3[2];
        v86 = &off_1EA59A9F8;
        v87 = v71;
        v88.i64[0] = v8;
        v88.i64[1] = v9;
        v89 = a1;
        v90 = a2;
        v91 = a4;
        if (v70)
        {
          v73 = *(float32x4_t *)(v9 + 32);
          v72 = *(float32x4_t *)(v9 + 48);
          v74 = vsubq_f32(a1[3], v72);
          v74.i32[3] = 0;
          v75 = *(float32x4_t *)v9;
          v76 = *(float32x4_t *)(v9 + 16);
          v75.i32[3] = 0;
          v76.i32[3] = 0;
          v73.i32[3] = 0;
          v101 = (btVector3)vaddq_f32(vaddq_f32(vmulq_n_f32(v75, v74.f32[0]), vmulq_lane_f32(v76, *(float32x2_t *)v74.f32, 1)), vmulq_laneq_f32(v73, v74, 2));
          v77 = vsubq_f32(*(float32x4_t *)(a2 + 48), v72);
          v77.i32[3] = 0;
          v83 = (btVector3)vaddq_f32(vaddq_f32(vmulq_n_f32(v75, v77.f32[0]), vmulq_lane_f32(v76, *(float32x2_t *)v77.f32, 1)), vmulq_laneq_f32(v73, v77, 2));
          btDbvt::rayTest(*v70, (float32x4_t *)&v101, (float32x4_t *)&v83, (uint64_t)&v86);
        }
        else
        {
          v79 = *(_DWORD *)(v8 + 28);
          if (v79 >= 1)
          {
            v80 = 0;
            do
            {
              btCollisionWorld::rayTestSingleInternal(btTransform const&,btTransform const&,btCollisionObjectWrapper const*,btCollisionWorld::RayResultCallback &)::RayTester::ProcessLeaf(&v86, v80);
              v80 = (v80 + 1);
            }
            while (v79 != (_DWORD)v80);
          }
        }
      }
    }
    else
    {
      v45 = *(float32x4_t *)(v9 + 16);
      v46 = *(float32x4_t *)(v9 + 32);
      v47 = vzip2_s32(*(int32x2_t *)v46.f32, 0);
      v48 = vextq_s8((int8x16_t)v46, (int8x16_t)v46, 8uLL).u32[0];
      v49 = (float32x4_t)vtrn1q_s32(*(int32x4_t *)v9, (int32x4_t)v45);
      v46.i64[0] = vextq_s8((int8x16_t)v49, (int8x16_t)v49, 8uLL).u64[0];
      v49.i64[1] = *(_OWORD *)(v9 + 32);
      v50.i64[0] = 0x8000000080000000;
      v50.i64[1] = 0x8000000080000000;
      v51 = (float32x4_t)veorq_s8(*(int8x16_t *)(v9 + 48), v50);
      v52 = (int8x16_t)vmulq_f32(v49, v51);
      *(int32x2_t *)v45.f32 = vzip2_s32(*(int32x2_t *)v9, *(int32x2_t *)v45.f32);
      *(int32x2_t *)&v45.u32[2] = v47;
      v53 = vmulq_f32(v45, v51);
      *(float32x2_t *)v53.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v52.i8, *(float32x2_t *)v53.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v52, v52, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v53, (int8x16_t)v53, 8uLL)));
      v46.i64[1] = v48;
      v54 = (int8x16_t)vmulq_f32(v46, v51);
      v54.i32[3] = 0;
      *(float32x2_t *)&v53.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v54.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v54, v54, 8uLL)), 0);
      v55 = a1[3];
      v56 = vmulq_f32(v49, v55);
      v57 = (int8x16_t)vmulq_f32(v45, v55);
      v58 = (int8x16_t)vmulq_f32(v46, v55);
      v58.i32[3] = 0;
      *(float32x2_t *)v56.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v56.f32, *(float32x2_t *)v57.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v56, (int8x16_t)v56, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v57, v57, 8uLL)));
      *(float32x2_t *)&v56.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v58.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v58, v58, 8uLL)), 0);
      v101 = (btVector3)vaddq_f32(v53, v56);
      v59 = *(float32x4_t *)(a2 + 48);
      v60 = vmulq_f32(v49, v59);
      v61 = (int8x16_t)vmulq_f32(v45, v59);
      v62 = (int8x16_t)vmulq_f32(v46, v59);
      v62.i32[3] = 0;
      *(float32x2_t *)v60.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v60.f32, *(float32x2_t *)v61.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v60, (int8x16_t)v60, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v61, v61, 8uLL)));
      *(float32x2_t *)&v60.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v62.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v62, v62, 8uLL)), 0);
      v83 = (btVector3)vaddq_f32(v53, v60);
      v63 = a3[2];
      if (v10 == 21)
      {
        btTriangleRaycastCallback::btTriangleRaycastCallback((btTriangleRaycastCallback *)&v86, &v101, &v83, *(_DWORD *)(a4 + 48));
        v86 = &off_1EA59A998;
        v92 = a4;
        v93 = v63;
        v94 = v8;
        v95 = *(int32x4_t *)v9;
        v96 = *(_OWORD *)(v9 + 16);
        v97 = *(_OWORD *)(v9 + 32);
        v98 = *(_OWORD *)(v9 + 48);
        HIDWORD(v91) = *(_DWORD *)(a4 + 8);
        btBvhTriangleMeshShape::performRaycast(v8, (uint64_t)&v86, (float32x4_t *)&v101, (float32x4_t *)&v83, COERCE_DOUBLE(__PAIR64__(DWORD1(v98), HIDWORD(v91))), v64, v65, v66, v67, v68, v69);
      }
      else
      {
        btTriangleRaycastCallback::btTriangleRaycastCallback((btTriangleRaycastCallback *)&v86, &v101, &v83, *(_DWORD *)(a4 + 48));
        v86 = &off_1EA59A9C8;
        v92 = a4;
        v93 = v63;
        v94 = v8;
        v95 = *(int32x4_t *)v9;
        v96 = *(_OWORD *)(v9 + 16);
        v97 = *(_OWORD *)(v9 + 32);
        v98 = *(_OWORD *)(v9 + 48);
        HIDWORD(v91) = *(_DWORD *)(a4 + 8);
        v81 = vmaxq_f32((float32x4_t)v101, (float32x4_t)v83);
        v82[0] = vminq_f32((float32x4_t)v101, (float32x4_t)v83);
        (*(void (**)(uint64_t, uint64_t (***)(), _OWORD *, float32x4_t *))(*(_QWORD *)v8 + 128))(v8, &v86, v82, &v81);
      }
      C3DSceneSourcePerformConsistencyCheck(&v86);
    }
  }
  else
  {
    *(_QWORD *)v101.var0.var0 = &off_1EA598630;
    v104 = 0;
    v105 = 0;
    v103 = *(float *)(a4 + 8);
    v99 = 953267991;
    v100 = 0;
    btSubsimplexConvexCast::btSubsimplexConvexCast(v82, (uint64_t)&v106, v8, (uint64_t)&v86);
    if (btSubsimplexConvexCast::calcTimeOfImpact((btVoronoiSimplexSolver **)v82, (const btTransform *)a1, (const btTransform *)a2, (const btTransform *)v9, (const btTransform *)v9, (float32x4_t *)&v101))
    {
      v41 = (int8x16_t)vmulq_f32(v102, v102);
      if (vadd_f32(vpadd_f32(*(float32x2_t *)v41.i8, *(float32x2_t *)v41.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v41, v41, 8uLL)).f32[0] > 0.0001&& v103 < *(float *)(a4 + 8))
      {
        v42 = vmulq_f32(v102, *a1);
        v43 = (int8x16_t)vmulq_f32(v102, a1[1]);
        v44 = (int8x16_t)vmulq_f32(v102, a1[2]);
        v44.i32[3] = 0;
        *(float32x2_t *)v42.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v42.f32, *(float32x2_t *)v43.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v43, v43, 8uLL)));
        *(float32x2_t *)v43.i8 = vmul_f32(*(float32x2_t *)v42.f32, *(float32x2_t *)v42.f32);
        *(float32x2_t *)&v42.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v44.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v44, v44, 8uLL)), 0);
        v102 = vmulq_n_f32(v42, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v43.i8, *(float32x2_t *)v43.i8), vmul_f32(*(float32x2_t *)&v42.u32[2], *(float32x2_t *)&v42.u32[2])).f32[0]));
        v83 = (btVector3)(unint64_t)a3[2];
        v84 = v102;
        v85 = v103;
        (*(void (**)(uint64_t, btVector3 *, uint64_t))(*(_QWORD *)a4 + 24))(a4, &v83, 1);
      }
    }
    C3DSceneSourcePerformConsistencyCheck(v82);
  }
  return C3DSceneSourcePerformConsistencyCheck(&v106);
}

void btDbvt::rayTest(void *a1, float32x4_t *a2, float32x4_t *a3, uint64_t a4)
{
  float32x4_t v6;
  int8x16_t v7;
  float v8;
  int8x16_t v9;
  void **v10;
  float32x2_t v11;
  float v12;
  int8x8_t v13;
  float32x2_t v14;
  float32x2_t v20;
  int32x2_t v21;
  float *v22;
  float *v23;
  float *v24;
  float *v25;
  float *v26;
  float *v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD *v33;
  __int128 v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v41;
  float v42;
  float v43;
  float v45;
  uint64_t v46;
  uint64_t v47;
  void **v48;
  uint64_t i;
  _OWORD *v50;
  float *v51;
  float *v52;
  uint64_t v53;
  float *v54;
  float *v55;
  uint64_t v56;
  float *v57;
  int v58;
  uint64_t v59;
  float *v60;
  int v61;
  float *v62;
  float32x4_t v64;
  __int32 v65;
  unsigned __int32 v66;
  _OWORD v67[2];
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v6 = vsubq_f32(*a3, *a2);
    v6.i32[3] = 0;
    v7 = (int8x16_t)vmulq_f32(v6, v6);
    v64 = vmulq_n_f32(v6, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v7.i8, *(float32x2_t *)v7.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)).f32[0]));
    v8 = 1.0 / v64.f32[0];
    v9 = (int8x16_t)vmulq_f32(v64, v6);
    v66 = vadd_f32(vpadd_f32(*(float32x2_t *)v9.i8, *(float32x2_t *)v9.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL)).u32[0];
    v10 = (void **)btAlignedAllocInternal(1024, 16);
    bzero(v10 + 1, 0x3F8uLL);
    v11.i32[1] = v64.i32[1];
    v12 = *(float *)&v66;
    if (v64.f32[0] == 0.0)
      v8 = 1.0e18;
    v11.i32[0] = vextq_s8((int8x16_t)v64, (int8x16_t)v64, 8uLL).u32[0];
    v13 = (int8x8_t)vceqz_f32(v11);
    v14 = v11;
    __asm { FMOV            V1.2S, #1.0 }
    v20 = (float32x2_t)vbsl_s8(v13, (int8x8_t)vdup_n_s32(0x5D5E0B6Bu), (int8x8_t)vdiv_f32(_D1, v14));
    v21 = vcltz_f32(v20);
    v22 = (float *)&v67[v8 < 0.0];
    v23 = (float *)&v67[v8 >= 0.0];
    *v10 = a1;
    v24 = (float *)&v67[v21.i8[4] & 1];
    v25 = (float *)&v67[(v21.i8[4] & 1) == 0];
    v26 = (float *)&v67[v21.i8[0] & 1] + 2;
    v27 = (float *)&v67[(v21.i8[0] & 1) == 0] + 2;
    v28 = v20.f32[1];
    LODWORD(v29) = 1;
    v30 = 126;
    v61 = 128;
    v31 = 128;
    v65 = v20.i32[0];
    v62 = v24;
    while (1)
    {
      v32 = (int)v29;
      v29 = (int)v29 - 1;
      v33 = v10[v29];
      v34 = v33[1];
      v67[0] = *v33;
      v67[1] = v34;
      v35 = a2->f32[1];
      v36 = v8 * (float)(*v22 - a2->f32[0]);
      v37 = v8 * (float)(*v23 - a2->f32[0]);
      v38 = v28 * (float)(v24[1] - v35);
      v39 = v28 * (float)(v25[1] - v35);
      if (v36 > v39 || v38 > v37)
        goto LABEL_37;
      if (v38 > v36)
        v36 = v38;
      if (v39 < v37)
        v37 = v39;
      v41 = a2->f32[2];
      v42 = v20.f32[0] * (float)(*v26 - v41);
      v43 = v20.f32[0] * (float)(*v27 - v41);
      if (v36 > v43 || v42 > v37)
        goto LABEL_37;
      if (v42 <= v36)
        v42 = v36;
      v45 = v43 >= v37 ? v37 : v43;
      if (v42 >= v12 || v45 <= 0.0)
        goto LABEL_37;
      if (*((_QWORD *)v33 + 6))
      {
        if ((int)v29 <= (int)v30)
        {
          v46 = v31;
        }
        else
        {
          v46 = (2 * v31);
          if ((int)v31 <= 2 * (int)v31)
          {
            v59 = (2 * v31);
            v60 = v26;
            if ((int)v31 < (int)v46 && v61 < (int)v46)
            {
              v57 = v27;
              v58 = v31;
              if ((_DWORD)v31)
              {
                v47 = btAlignedAllocInternal(8 * (int)v46, 16);
                v48 = (void **)v47;
                if (v58 >= 1)
                {
                  for (i = 0; i != v58; ++i)
                    *(_QWORD *)(v47 + i * 8) = v10[i];
                }
              }
              else
              {
                v48 = 0;
              }
              btAlignedFreeInternal(v10);
              v46 = v59;
              v26 = v60;
              v61 = v59;
              v10 = v48;
              v20.i32[0] = v65;
              v12 = *(float *)&v66;
              v27 = v57;
              LODWORD(v31) = v58;
            }
            if ((int)v31 < (int)v46)
            {
              bzero(&v10[(int)v31], 8 * (v31 - 1) + 8);
              v46 = v59;
              v26 = v60;
              v20.i32[0] = v65;
              v12 = *(float *)&v66;
            }
          }
          v30 = (v46 - 2);
        }
        v10[v29] = (void *)*((_QWORD *)v33 + 5);
        LODWORD(v29) = v32 + 1;
        v10[v32] = (void *)*((_QWORD *)v33 + 6);
        v31 = v46;
        if ((_DWORD)v32 == -1)
        {
LABEL_46:
          btAlignedFreeInternal(v10);
          return;
        }
      }
      else
      {
        v50 = v33;
        v51 = v26;
        v52 = v27;
        v53 = v31;
        v54 = v23;
        v55 = v22;
        v56 = v30;
        (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)a4 + 24))(a4, v50);
        v30 = v56;
        v22 = v55;
        v23 = v54;
        v24 = v62;
        v31 = v53;
        v27 = v52;
        v26 = v51;
        v20.i32[0] = v65;
        v12 = *(float *)&v66;
LABEL_37:
        if (!(_DWORD)v29)
          goto LABEL_46;
      }
    }
  }
}

uint64_t btCollisionWorld::rayTestSingleInternal(btTransform const&,btTransform const&,btCollisionObjectWrapper const*,btCollisionWorld::RayResultCallback &)::RayTester::ProcessLeaf(_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  float32x4_t *v4;
  float32x4_t *v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  uint64_t v12;
  float32x4_t v13;
  int8x16_t v14;
  int8x16_t v15;
  float32x4_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (**v20)();
  int v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  _QWORD v28[4];
  int v29;
  int v30;
  _OWORD v31[4];

  v2 = a1[1];
  v3 = *(_QWORD *)(a1[2] + 40) + 96 * a2;
  v5 = (float32x4_t *)a1[3];
  v4 = (float32x4_t *)a1[4];
  v6 = v5[1];
  v7 = v5[2];
  v8 = *(float32x4_t *)v3;
  v9 = *(float32x4_t *)(v3 + 16);
  v10 = *(float32x4_t *)(v3 + 32);
  v11 = *(float32x4_t *)(v3 + 48);
  v12 = *(_QWORD *)(v3 + 64);
  v13 = vmulq_f32(*v5, v11);
  v14 = (int8x16_t)vmulq_f32(v6, v11);
  *(float32x2_t *)v13.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)), vpadd_f32(*(float32x2_t *)v13.f32, *(float32x2_t *)v14.i8));
  v15 = (int8x16_t)vmulq_f32(v7, v11);
  v15.i32[3] = 0;
  *(float32x2_t *)&v13.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v15.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL)), 0);
  v10.i32[3] = 0;
  v16 = vaddq_f32(v5[3], v13);
  v9.i32[3] = 0;
  v8.i32[3] = 0;
  v31[0] = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v8, COERCE_FLOAT(*v5)), v9, *(float32x2_t *)v5->f32, 1), v10, *v5, 2);
  v31[1] = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v8, v6.f32[0]), v9, *(float32x2_t *)v6.f32, 1), v10, v6, 2);
  v31[2] = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v8, v7.f32[0]), v9, *(float32x2_t *)v7.f32, 1), v10, v7, 2);
  v31[3] = v16;
  v28[0] = 0;
  v28[1] = v12;
  v28[2] = v2;
  v28[3] = v31;
  v29 = -1;
  v30 = a2;
  v22 = 0;
  v23 = xmmword_1DD009420;
  v20 = &off_1EA59A968;
  v17 = a1[5];
  v18 = a1[6];
  v24 = 0;
  v26 = v18;
  v27 = a2;
  v21 = *(_DWORD *)(v18 + 8);
  v25 = *(_DWORD *)(v18 + 48);
  return btCollisionWorld::rayTestSingleInternal(v4, v17, v28, (uint64_t)&v20);
}

const btConvexShape *btCollisionWorld::objectQuerySingle(const btConvexShape *a1, uint64_t a2, float32x4_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, float *a7, float a8)
{
  _QWORD v9[5];

  v9[0] = 0;
  v9[1] = a5;
  v9[2] = a4;
  v9[3] = a6;
  v9[4] = -1;
  return btCollisionWorld::objectQuerySingleInternal(a1, a2, a3, v9, a7, a8);
}

const btConvexShape *btCollisionWorld::objectQuerySingleInternal(const btConvexShape *result, uint64_t a2, float32x4_t *a3, _QWORD *a4, float *a5, float a6)
{
  const btConvexShape *v11;
  uint64_t v12;
  float32x4_t *v13;
  int v14;
  int8x16_t v15;
  float v16;
  float32x4_t *v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  int8x16_t v28;
  float32x4_t v29;
  int8x16_t v30;
  float32x4_t v31;
  float32x4_t v32;
  int8x16_t v33;
  float32x4_t v34;
  int8x16_t v35;
  float32x4_t v36;
  int8x16_t v37;
  float32x4_t v38;
  int8x16_t v39;
  float32x4_t v40;
  float32x4_t v41;
  int8x16_t v42;
  int8x16_t v43;
  uint64_t v44;
  float v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  __n128 v52;
  uint64_t v53;
  uint64_t v54;
  float32x4_t *v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  uint64_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  int8x16_t v65;
  float32x4_t v66;
  int8x16_t v67;
  uint64_t v68;
  int8x16_t v69;
  float v70;
  float32x4_t v71;
  float32x4_t v72;
  int32x2_t v73;
  unsigned __int32 v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  int8x16_t v85;
  float32x4_t v86;
  float32x4_t v87;
  int8x16_t v88;
  float32x4_t v89;
  float32x4_t v90;
  int8x16_t v91;
  int8x16_t v92;
  int8x16_t v93;
  float32x4_t v94;
  int8x16_t v95;
  uint64_t v96;
  float v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102[3];
  float32x4_t v103;
  float32x4_t v104;
  __int128 v105;
  float v106;
  _OWORD v107[9];
  float32x4_t v108;
  float32x4_t v109;
  float v110;
  uint64_t v111;
  float v112;
  int v113;
  float v114;
  float *v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  char v119;
  float32x4_t v120;
  __int128 v121;
  float32x4_t v122;
  uint64_t v123;
  uint64_t v124;
  float32x4_t v125;
  __int128 v126;
  float v127;
  uint64_t v128;
  float v129;
  uint64_t v130;

  v11 = result;
  v130 = *MEMORY[0x1E0C80C00];
  v12 = a4[1];
  v13 = (float32x4_t *)a4[3];
  v14 = *(_DWORD *)(v12 + 8);
  if (v14 <= 19)
  {
    v120.i64[0] = (uint64_t)&off_1EA598630;
    v128 = 0;
    v129 = a6;
    v127 = a5[2];
    v118 = 953267991;
    v119 = 0;
    v101.i64[0] = (uint64_t)&unk_1EA597F48;
    btContinuousConvexCollision::btContinuousConvexCollision(v102, (uint64_t)result, v12, (uint64_t)v107, (uint64_t)&v101);
    if ((*(unsigned int (**)(float32x4_t *, uint64_t, float32x4_t *, float32x4_t *, float32x4_t *, float32x4_t *))(v102[0].i64[0] + 16))(v102, a2, a3, v13, v13, &v120))
    {
      v15 = (int8x16_t)vmulq_f32(v125, v125);
      v16 = vadd_f32(vpadd_f32(*(float32x2_t *)v15.i8, *(float32x2_t *)v15.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL)).f32[0];
      if (v16 > 0.0001 && v127 < a5[2])
      {
        v125 = vmulq_n_f32(v125, 1.0 / sqrtf(v16));
        v103 = (float32x4_t)(unint64_t)a4[2];
        v104 = v125;
        v105 = v126;
        v106 = v127;
        (*(void (**)(float *, float32x4_t *, uint64_t))(*(_QWORD *)a5 + 24))(a5, &v103, 1);
      }
    }
    v17 = v102;
    return (const btConvexShape *)C3DSceneSourcePerformConsistencyCheck(v17);
  }
  if ((v14 - 21) > 8)
  {
    if (v14 == 31 && *(int *)(v12 + 28) >= 1)
    {
      v53 = 0;
      v54 = 0;
      do
      {
        v55 = (float32x4_t *)(*(_QWORD *)(v12 + 40) + v53);
        v56 = *v55;
        v57 = v55[1];
        v58 = v55[2];
        v59 = v55[3];
        v60 = v55[4].i64[0];
        v56.i32[3] = 0;
        v57.i32[3] = 0;
        v61 = v13[1];
        v58.i32[3] = 0;
        v62 = v13[2];
        v63 = v13[3];
        v64 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v56, v61.f32[0]), v57, *(float32x2_t *)v61.f32, 1), v58, v61, 2);
        v65 = (int8x16_t)vmulq_f32(v59, *v13);
        v66 = vmulq_f32(v59, v61);
        v67 = (int8x16_t)vmulq_f32(v59, v62);
        v67.i32[3] = 0;
        *(float32x2_t *)v66.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v65, v65, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v66, (int8x16_t)v66, 8uLL)), vpadd_f32(*(float32x2_t *)v65.i8, *(float32x2_t *)v66.f32));
        *(float32x2_t *)&v66.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v67.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v67, v67, 8uLL)), 0);
        v107[0] = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v56, COERCE_FLOAT(*v13)), v57, *(float32x2_t *)v13->f32, 1), v58, *v13, 2);
        v107[1] = v64;
        v107[2] = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v56, v62.f32[0]), v57, *(float32x2_t *)v62.f32, 1), v58, v62, 2);
        v107[3] = vaddq_f32(v66, v63);
        v121 = xmmword_1DD009420;
        v120.i64[0] = (uint64_t)&off_1EA59AA40;
        v122.i64[0] = 0;
        v122.i64[1] = (uint64_t)a5;
        LODWORD(v123) = v54;
        v120.f32[2] = a5[2];
        v68 = a4[2];
        v103.i64[0] = (uint64_t)a4;
        v103.i64[1] = v60;
        v104.i64[0] = v68;
        v104.i64[1] = (uint64_t)v107;
        LODWORD(v105) = -1;
        DWORD1(v105) = v54;
        result = (const btConvexShape *)btCollisionWorld::objectQuerySingleInternal(v11, a2, a3, &v103, &v120, a6);
        ++v54;
        v53 += 96;
      }
      while (v54 < *(int *)(v12 + 28));
    }
  }
  else
  {
    if (v14 == 28)
    {
      *(_QWORD *)&v107[0] = &off_1EA598630;
      v111 = 0;
      v112 = a6;
      v110 = a5[2];
      btContinuousConvexCollision::btContinuousConvexCollision((btContinuousConvexCollision *)&v103, result, (const btStaticPlaneShape *)v12);
      if ((*(unsigned int (**)(float32x4_t *, uint64_t, float32x4_t *, float32x4_t *, float32x4_t *, _OWORD *))(v103.i64[0] + 16))(&v103, a2, a3, v13, v13, v107))
      {
        v69 = (int8x16_t)vmulq_f32(v108, v108);
        v70 = vadd_f32(vpadd_f32(*(float32x2_t *)v69.i8, *(float32x2_t *)v69.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v69, v69, 8uLL)).f32[0];
        if (v70 > 0.0001 && v110 < a5[2])
        {
          v108 = vmulq_n_f32(v108, 1.0 / sqrtf(v70));
          v120 = (float32x4_t)(unint64_t)a4[2];
          v121 = (__int128)v108;
          v122 = v109;
          *(float *)&v123 = v110;
          (*(void (**)(float *, float32x4_t *, uint64_t))(*(_QWORD *)a5 + 24))(a5, &v120, 1);
        }
      }
      v17 = &v103;
      return (const btConvexShape *)C3DSceneSourcePerformConsistencyCheck(v17);
    }
    if (v14 == 21)
    {
      v18 = v13[1];
      v19 = v13[2];
      v20 = (float32x4_t)vtrn1q_s32(*(int32x4_t *)v13, (int32x4_t)v18);
      v21 = *a3;
      v22 = a3[1];
      v21.i32[3] = 0;
      v22.i32[3] = 0;
      v24 = a3[2];
      v23 = a3[3];
      v24.i32[3] = 0;
      v25 = vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v21, *(float32x2_t *)v13->f32, 1), v22, *(float32x2_t *)v18.f32, 1), v24, *(float32x2_t *)v19.f32, 1);
      v26 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v21, COERCE_FLOAT(*v13)), v22, v18.f32[0]), v24, v19.f32[0]);
      v27.i64[0] = vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL).u64[0];
      v20.i64[1] = v19.u32[0];
      v28.i64[0] = 0x8000000080000000;
      v28.i64[1] = 0x8000000080000000;
      v29 = (float32x4_t)veorq_s8((int8x16_t)v13[3], v28);
      v30 = (int8x16_t)vmulq_f32(v20, v29);
      *(int32x2_t *)v31.f32 = vzip2_s32(*(int32x2_t *)v13->f32, *(int32x2_t *)v18.f32);
      *(int32x2_t *)&v31.u32[2] = vzip2_s32(*(int32x2_t *)v19.f32, 0);
      v32 = vmulq_f32(v31, v29);
      v27.i64[1] = vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL).u32[0];
      v33 = (int8x16_t)vmulq_f32(v27, v29);
      v33.i32[3] = 0;
      *(float32x2_t *)v32.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v30.i8, *(float32x2_t *)v32.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL)));
      *(float32x2_t *)&v32.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v33.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v33, v33, 8uLL)), 0);
      v34 = *(float32x4_t *)(a2 + 48);
      v35 = (int8x16_t)vmulq_f32(v20, v34);
      v36 = vmulq_laneq_f32(v21, *v13, 2);
      v37 = (int8x16_t)vmulq_f32(v31, v34);
      v38 = vmlaq_laneq_f32(v36, v22, v18, 2);
      v39 = (int8x16_t)vmulq_f32(v27, v34);
      v39.i32[3] = 0;
      *(float32x2_t *)v18.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v35.i8, *(float32x2_t *)v37.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v37, v37, 8uLL)));
      *(float32x2_t *)&v18.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v39.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v39, v39, 8uLL)), 0);
      v40 = vmlaq_laneq_f32(v38, v24, v19, 2);
      v103 = vaddq_f32(v32, v18);
      v41 = vmulq_f32(v20, v23);
      v42 = (int8x16_t)vmulq_f32(v31, v23);
      v43 = (int8x16_t)vmulq_f32(v27, v23);
      v43.i32[3] = 0;
      *(float32x2_t *)v41.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v41.f32, *(float32x2_t *)v42.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v42, v42, 8uLL)));
      *(float32x2_t *)&v41.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v43.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v43, v43, 8uLL)), 0);
      v102[0] = vaddq_f32(v32, v41);
      v120 = v26;
      v121 = (__int128)v25;
      v122 = v40;
      v124 = 0;
      v123 = 0;
      v44 = a4[2];
      v45 = (*(float (**)(uint64_t))(*(_QWORD *)v12 + 96))(v12);
      btTriangleConvexcastCallback::btTriangleConvexcastCallback((btTriangleConvexcastCallback *)v107, v11, (const btTransform *)a2, (const btTransform *)a3, (const btTransform *)v13, v45);
      *(_QWORD *)&v107[0] = &off_1EA59AA70;
      v115 = a5;
      v116 = v44;
      v117 = v12;
      v113 = *((_DWORD *)a5 + 2);
      v114 = a6;
      v46 = (*(double (**)(const btConvexShape *, float32x4_t *, float32x4_t *, float32x4_t *))(*(_QWORD *)v11 + 16))(v11, &v120, &v101, &v100);
      btBvhTriangleMeshShape::performConvexcast(v12, (uint64_t)v107, &v103, v102, &v101, &v100, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      v71 = v13[1];
      v72 = v13[2];
      v73 = vzip2_s32(*(int32x2_t *)v72.f32, 0);
      v74 = vextq_s8((int8x16_t)v72, (int8x16_t)v72, 8uLL).u32[0];
      v75 = *a3;
      v76 = a3[1];
      v75.i32[3] = 0;
      v76.i32[3] = 0;
      v78 = a3[2];
      v77 = a3[3];
      v78.i32[3] = 0;
      v79 = vmlaq_laneq_f32(vmulq_laneq_f32(v75, *v13, 2), v76, v71, 2);
      v80 = vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v75, *(float32x2_t *)v13->f32, 1), v76, *(float32x2_t *)v71.f32, 1), v78, *(float32x2_t *)v72.f32, 1);
      v81 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v75, COERCE_FLOAT(*v13)), v76, v71.f32[0]), v78, v72.f32[0]);
      v82 = vmlaq_laneq_f32(v79, v78, v72, 2);
      v83 = (float32x4_t)vtrn1q_s32(*(int32x4_t *)v13, (int32x4_t)v71);
      v78.i64[0] = vextq_s8((int8x16_t)v83, (int8x16_t)v83, 8uLL).u64[0];
      v83.i64[1] = v72.u32[0];
      v72.i64[0] = 0x8000000080000000;
      v72.i64[1] = 0x8000000080000000;
      v84 = (float32x4_t)veorq_s8((int8x16_t)v13[3], (int8x16_t)v72);
      v85 = (int8x16_t)vmulq_f32(v83, v84);
      *(int32x2_t *)v86.f32 = vzip2_s32(*(int32x2_t *)v13->f32, *(int32x2_t *)v71.f32);
      *(int32x2_t *)&v86.u32[2] = v73;
      v87 = vmulq_f32(v86, v84);
      v78.i64[1] = v74;
      v88 = (int8x16_t)vmulq_f32(v78, v84);
      v88.i32[3] = 0;
      v89 = *(float32x4_t *)(a2 + 48);
      v90 = vmulq_f32(v83, v89);
      v91 = (int8x16_t)vmulq_f32(v86, v89);
      v92 = (int8x16_t)vmulq_f32(v78, v89);
      v92.i32[3] = 0;
      *(float32x2_t *)v90.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v90.f32, *(float32x2_t *)v91.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v90, (int8x16_t)v90, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v91, v91, 8uLL)));
      *(float32x2_t *)&v90.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v92.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v92, v92, 8uLL)), 0);
      v93 = (int8x16_t)vmulq_f32(v83, v77);
      v94 = vmulq_f32(v86, v77);
      v95 = (int8x16_t)vmulq_f32(v78, v77);
      v95.i32[3] = 0;
      *(float32x2_t *)v94.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v93.i8, *(float32x2_t *)v94.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v93, v93, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v94, (int8x16_t)v94, 8uLL)));
      *(float32x2_t *)&v94.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v95.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v95, v95, 8uLL)), 0);
      *(float32x2_t *)v87.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v85.i8, *(float32x2_t *)v87.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v85, v85, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v87, (int8x16_t)v87, 8uLL)));
      *(float32x2_t *)&v87.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v88.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v88, v88, 8uLL)), 0);
      v98 = vaddq_f32(v87, v94);
      v99 = vaddq_f32(v87, v90);
      v120 = v81;
      v121 = (__int128)v80;
      v122 = v82;
      v124 = 0;
      v123 = 0;
      v96 = a4[2];
      v97 = (*(float (**)(uint64_t))(*(_QWORD *)v12 + 96))(v12);
      btTriangleConvexcastCallback::btTriangleConvexcastCallback((btTriangleConvexcastCallback *)v107, v11, (const btTransform *)a2, (const btTransform *)a3, (const btTransform *)v13, v97);
      *(_QWORD *)&v107[0] = &off_1EA59AAA0;
      v115 = a5;
      v116 = v96;
      v117 = v12;
      v113 = *((_DWORD *)a5 + 2);
      v114 = a6;
      (*(void (**)(const btConvexShape *, float32x4_t *, float32x4_t *, float32x4_t *))(*(_QWORD *)v11 + 16))(v11, &v120, &v103, v102);
      v100 = vaddq_f32(vmaxq_f32(v99, v98), v102[0]);
      v101 = vaddq_f32(vminq_f32(v99, v98), v103);
      (*(void (**)(uint64_t, _OWORD *, float32x4_t *, float32x4_t *))(*(_QWORD *)v12 + 128))(v12, v107, &v101, &v100);
    }
    return (const btConvexShape *)C3DSceneSourcePerformConsistencyCheck(v107);
  }
  return result;
}

uint64_t btCollisionWorld::rayTest(uint64_t a1, float32x4_t *a2, float32x4_t *a3, uint64_t a4)
{
  double v7;
  uint64_t v8;
  _QWORD v10[2];
  _QWORD v11[2];
  _BYTE v12[240];

  *(float32x2_t *)&v7 = btSingleRayCallback::btSingleRayCallback((uint64_t)v12, a2, a3, a1, a4);
  v8 = *(_QWORD *)(a1 + 96);
  v11[0] = 0;
  v11[1] = 0;
  v10[0] = 0;
  v10[1] = 0;
  return (*(uint64_t (**)(uint64_t, float32x4_t *, float32x4_t *, _BYTE *, _QWORD *, _QWORD *, double))(*(_QWORD *)v8 + 48))(v8, a2, a3, v12, v11, v10, v7);
}

uint64_t btCollisionWorld::convexSweepTest(uint64_t a1, btCollisionShape *a2, uint64_t a3, uint64_t a4, float *a5, float a6)
{
  btVector3 v12;
  __int128 v13;
  btVector3 v14;
  btVector3 v15;
  btVector3 v16;
  double v17;
  btTransform v19[3];
  btVector3 v20;
  btVector3 v21;
  btVector3 v22;
  btQuaternion v23;
  btTransform v24;
  btMatrix3x3 v25;
  __int128 v26;

  v12 = *(btVector3 *)(a3 + 16);
  v25.var0[0] = *(btVector3 *)a3;
  v25.var0[1] = v12;
  v13 = *(_OWORD *)(a3 + 48);
  v25.var0[2] = *(btVector3 *)(a3 + 32);
  v26 = v13;
  v14 = *(btVector3 *)(a4 + 16);
  v24.var0.var0[0] = *(btVector3 *)a4;
  v24.var0.var0[1] = v14;
  v15 = *(btVector3 *)(a4 + 48);
  v24.var0.var0[2] = *(btVector3 *)(a4 + 32);
  v24.var1 = v15;
  v23.var0.var0[0] = 0.0;
  btTransformUtil::calculateDiffAxisAngle((btTransformUtil *)&v25, &v24, v19, (btVector3 *)&v23, a5);
  v16 = (btVector3)vmulq_n_f32((float32x4_t)v19[0].var0.var0[0], v23.var0.var0[0]);
  v16.var0.var0[3] = 0.0;
  v21 = v16;
  v20 = (btVector3)0;
  v19[0].var0.var0[0] = (btVector3)xmmword_1DD007970;
  v19[0].var0.var0[1] = (btVector3)xmmword_1DD007920;
  v19[0].var0.var0[2] = (btVector3)xmmword_1DD007600;
  v19[0].var1 = 0uLL;
  btMatrix3x3::getRotation(&v25, &v23);
  btMatrix3x3::setRotation(&v19[0].var0, (float32x4_t *)&v23);
  btCollisionShape::calculateTemporalAabb(a2, v19, (float32x4_t *)&v20, (float32x4_t *)&v21, 1.0, (float32x4_t *)&v23, (float32x4_t *)&v22);
  *(float32x2_t *)&v17 = btSingleSweepCallback::btSingleSweepCallback((uint64_t)v19, (uint64_t)a2, (float32x4_t *)a3, (float32x4_t *)a4, a1, (uint64_t)a5, a6);
  return (*(uint64_t (**)(_QWORD, __int128 *, btVector3 *, btTransform *, btQuaternion *, btVector3 *, double))(**(_QWORD **)(a1 + 96) + 48))(*(_QWORD *)(a1 + 96), &v26, &v24.var1, v19, &v23, &v22, v17);
}

uint64_t btCollisionWorld::contactTest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v7[4];
  _BYTE v8[16];
  _BYTE v9[16];

  (*(void (**)(_QWORD, uint64_t, _BYTE *, _BYTE *))(**(_QWORD **)(a2 + 208) + 16))(*(_QWORD *)(a2 + 208), a2 + 16, v9, v8);
  v7[0] = &off_1EA5977B8;
  v7[1] = a2;
  v7[2] = a1;
  v7[3] = a3;
  return (*(uint64_t (**)(_QWORD, _BYTE *, _BYTE *, _QWORD *))(**(_QWORD **)(a1 + 96) + 56))(*(_QWORD *)(a1 + 96), v9, v8, v7);
}

uint64_t btCollisionWorld::contactPairTest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  _QWORD v10[7];
  _QWORD v11[5];
  _QWORD v12[5];

  v6 = *(_QWORD *)(a2 + 208);
  v12[0] = 0;
  v12[1] = v6;
  v12[2] = a2;
  v12[3] = a2 + 16;
  v12[4] = -1;
  v7 = *(_QWORD *)(a3 + 208);
  v11[0] = 0;
  v11[1] = v7;
  v11[2] = a3;
  v11[3] = a3 + 16;
  v11[4] = -1;
  result = (*(uint64_t (**)(_QWORD, _QWORD *, _QWORD *, _QWORD))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), v12, v11, 0);
  if (result)
  {
    v9 = result;
    btManifoldResult::btManifoldResult(v10, (uint64_t)v12, (uint64_t)v11);
    v10[0] = &off_1EA597380;
    v10[6] = a4;
    (*(void (**)(uint64_t, _QWORD *, _QWORD *, uint64_t, _QWORD *))(*(_QWORD *)v9 + 16))(v9, v12, v11, a1 + 48, v10);
    (**(void (***)(uint64_t))v9)(v9);
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 120))(*(_QWORD *)(a1 + 40), v9);
  }
  return result;
}

uint64_t btCollisionWorld::debugDrawObject(btCollisionWorld *this, const btTransform *a2, const btCollisionShape *a3, const btVector3 *a4)
{
  uint64_t v8;
  uint64_t result;
  int var1;
  unsigned int v11;
  float32x4_t v12;
  uint64_t v13;
  int8x16_t v14;
  uint64_t v15;
  unint64_t v16;
  float32x4_t *v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  uint64_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  float32x4_t v30;
  float32x4_t v31;
  void **var0;
  uint64_t v33;
  _QWORD *v34;
  char *v35;
  int v36;
  uint64_t v37;
  int v38;
  float32x4_t v39;
  uint64_t v40;
  uint64_t v41;
  float32x4_t *v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  int8x16_t v47;
  float32x4_t v48;
  btVector3 v49;
  int8x16_t v50;
  float32x4_t v51;
  float32x4_t v52;
  int8x16_t v53;
  int8x16_t v54;
  uint64_t v55;
  uint64_t v56;
  float32x4_t v57;
  uint64_t v58;
  float32x4_t v59;
  float32x4_t v60;
  int8x16_t v61;
  float32x4_t v62;
  btVector3 v63;
  int8x16_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int v70;
  uint64_t v71;
  float32x4_t v72;
  float32x4_t v73;
  int8x16_t v74;
  float32x4_t v75;
  btVector3 v76;
  int8x16_t v77;
  float32x4_t v78;
  int8x16_t v79;
  int8x16_t v80;
  uint64_t v81;
  float v82;
  uint64_t v83;
  uint64_t var0_high;
  unint64_t v85;
  uint64_t v86;
  float v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  int8x16_t v91;
  int8x16_t v92;
  int8x16_t v93;
  float32x4_t v94;
  float32x4_t v95;
  uint64_t var0_low;
  float v97;
  __int32 v98;
  uint64_t (*v99)(__n128, __n128);
  __n128 v100;
  __n128 v101;
  unsigned __int32 v102;
  int v103;
  uint64_t v104;
  unsigned int v105;
  float32x4_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  void **v110;
  float32x4_t *var2;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  int8x16_t v119;
  float32x4_t v120;
  btVector3 v121;
  int8x16_t v122;
  float32x4_t v123;
  int8x16_t v124;
  int8x16_t v125;
  float32x4_t v126;
  float32x4_t v127;
  int8x16_t v128;
  int8x16_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  float32x4_t v134;
  float32x4_t v135;
  int8x16_t v136;
  float32x4_t v137;
  btVector3 v138;
  int8x16_t v139;
  float32x4_t v140;
  int8x16_t v141;
  int8x16_t v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  btVector3 v146;
  btVector3 v147;
  btVector3 v148;
  btVector3 v149;
  uint64_t v150;
  btVector3 v151;
  btVector3 v152;
  btVector3 v153;
  btVector3 v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int v157;
  int v158;
  float32x4_t v159;
  unsigned int v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  btVector3 v171;
  btVector3 v172;
  btVector3 v173;
  float32x4_t v174;
  float32x4_t v175;
  float32x4_t v176[2];

  v8 = (*(uint64_t (**)(btCollisionWorld *))(*(_QWORD *)this + 40))(this);
  result = (*(uint64_t (**)(uint64_t, const btTransform *, float))(*(_QWORD *)v8 + 112))(v8, a2, 1.0);
  var1 = a3->var1;
  switch(var1)
  {
    case 0:
    case 17:
      v161 = *(float32x4_t *)&a3[2].var0;
      v157 = COERCE_UNSIGNED_INT64((*((double (**)(const btCollisionShape *))a3->var0 + 12))(a3));
      v155 = COERCE_UNSIGNED_INT64((*((double (**)(const btCollisionShape *))a3->var0 + 12))(a3));
      *(float *)&v11 = (*((float (**)(const btCollisionShape *))a3->var0 + 12))(a3);
      v12.i64[0] = __PAIR64__(v155, v157);
      v12.i64[1] = v11;
      v167 = vaddq_f32(v161, v12);
      v13 = (*(uint64_t (**)(btCollisionWorld *))(*(_QWORD *)this + 40))(this);
      v14.i64[0] = 0x8000000080000000;
      v14.i64[1] = 0x8000000080000000;
      v176[0] = (float32x4_t)veorq_s8((int8x16_t)v167, v14);
      return (*(uint64_t (**)(uint64_t, float32x4_t *, float32x4_t *, const btTransform *, const btVector3 *))(*(_QWORD *)v13 + 144))(v13, v176, &v167, a2, a4);
    case 1:
    case 2:
    case 3:
    case 5:
    case 6:
    case 7:
    case 12:
    case 14:
    case 15:
    case 16:
      goto LABEL_9;
    case 4:
      v70 = *(&a3[6].var1 + 1);
      if ((v70 + 2) > 4)
      {
        if (v70 >= 3)
        {
          v109 = (v70 / 3);
          v110 = a3[7].var0 + 1;
          do
          {
            var2 = (float32x4_t *)a3[5].var2;
            v112 = *(float32x4_t *)&a3[1].var1;
            v113 = vmulq_f32(var2[*((int *)v110 - 2)], v112);
            v114 = vmulq_f32(v112, var2[*((int *)v110 - 1)]);
            v115 = vmulq_f32(v112, var2[*(int *)v110]);
            v116 = (float32x4_t)a2->var0.var0[0];
            v117 = (float32x4_t)a2->var0.var0[1];
            v118 = vmulq_f32(v113, (float32x4_t)a2->var0.var0[0]);
            v119 = (int8x16_t)vmulq_f32(v113, v117);
            v120 = (float32x4_t)a2->var0.var0[2];
            v121 = a2->var1;
            v122 = (int8x16_t)vmulq_f32(v113, v120);
            v122.i32[3] = 0;
            *(float32x2_t *)v118.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v118.f32, *(float32x2_t *)v119.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v118, (int8x16_t)v118, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v119, v119, 8uLL)));
            *(float32x2_t *)&v118.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v122.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v122, v122, 8uLL)), 0);
            v167 = vaddq_f32(v118, (float32x4_t)v121);
            v123 = vmulq_f32(v114, v116);
            v124 = (int8x16_t)vmulq_f32(v114, v117);
            v125 = (int8x16_t)vmulq_f32(v114, v120);
            v125.i32[3] = 0;
            *(float32x2_t *)v123.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v123, (int8x16_t)v123, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v124, v124, 8uLL)), vpadd_f32(*(float32x2_t *)v123.f32, *(float32x2_t *)v124.i8));
            *(float32x2_t *)&v123.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v125.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v125, v125, 8uLL)), 0);
            v126 = vaddq_f32((float32x4_t)v121, v123);
            v127 = vmulq_f32(v115, v116);
            v128 = (int8x16_t)vmulq_f32(v115, v117);
            v129 = (int8x16_t)vmulq_f32(v115, v120);
            v129.i32[3] = 0;
            *(float32x2_t *)v127.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v127, (int8x16_t)v127, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v128, v128, 8uLL)), vpadd_f32(*(float32x2_t *)v127.f32, *(float32x2_t *)v128.i8));
            *(float32x2_t *)&v127.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v129.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v129, v129, 8uLL)), 0);
            v175 = vaddq_f32((float32x4_t)v121, v127);
            v176[0] = v126;
            v130 = (*(uint64_t (**)(btCollisionWorld *))(*(_QWORD *)this + 40))(this);
            (*(void (**)(uint64_t, float32x4_t *, float32x4_t *, const btVector3 *))(*(_QWORD *)v130 + 16))(v130, &v167, v176, a4);
            v131 = (*(uint64_t (**)(btCollisionWorld *))(*(_QWORD *)this + 40))(this);
            (*(void (**)(uint64_t, float32x4_t *, float32x4_t *, const btVector3 *))(*(_QWORD *)v131 + 16))(v131, &v167, &v175, a4);
            v132 = (*(uint64_t (**)(btCollisionWorld *))(*(_QWORD *)this + 40))(this);
            result = (*(uint64_t (**)(uint64_t, float32x4_t *, float32x4_t *, const btVector3 *))(*(_QWORD *)v132 + 16))(v132, v176, &v175, a4);
            v110 = (void **)((char *)v110 + 12);
            --v109;
          }
          while (v109);
        }
      }
      else
      {
        result = (*((uint64_t (**)(const btCollisionShape *))a3->var0 + 25))(a3);
        if ((int)result >= 1)
        {
          v71 = 0;
          do
          {
            (*((void (**)(const btCollisionShape *, uint64_t, float32x4_t *, float32x4_t *))a3->var0 + 26))(a3, v71, &v167, v176);
            v72 = (float32x4_t)a2->var0.var0[1];
            v73 = vmulq_f32((float32x4_t)a2->var0.var0[0], v167);
            v74 = (int8x16_t)vmulq_f32(v167, v72);
            v75 = (float32x4_t)a2->var0.var0[2];
            v76 = a2->var1;
            v77 = (int8x16_t)vmulq_f32(v167, v75);
            v77.i32[3] = 0;
            *(float32x2_t *)v73.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v73.f32, *(float32x2_t *)v74.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v73, (int8x16_t)v73, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v74, v74, 8uLL)));
            *(float32x2_t *)&v73.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v77.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v77, v77, 8uLL)), 0);
            v78 = vmulq_f32((float32x4_t)a2->var0.var0[0], v176[0]);
            v79 = (int8x16_t)vmulq_f32(v72, v176[0]);
            v80 = (int8x16_t)vmulq_f32(v75, v176[0]);
            v80.i32[3] = 0;
            *(float32x2_t *)v78.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v78.f32, *(float32x2_t *)v79.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v78, (int8x16_t)v78, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v79, v79, 8uLL)));
            *(float32x2_t *)&v78.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v80.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v80, v80, 8uLL)), 0);
            v174 = vaddq_f32((float32x4_t)v76, v78);
            v175 = vaddq_f32(v73, (float32x4_t)v76);
            v81 = (*(uint64_t (**)(btCollisionWorld *))(*(_QWORD *)this + 40))(this);
            (*(void (**)(uint64_t, float32x4_t *, float32x4_t *, const btVector3 *))(*(_QWORD *)v81 + 16))(v81, &v175, &v174, a4);
            v71 = (v71 + 1);
            result = (*((uint64_t (**)(const btCollisionShape *))a3->var0 + 25))(a3);
          }
          while ((int)v71 < (int)result);
        }
      }
      return result;
    case 8:
      v82 = (*((float (**)(const btCollisionShape *))a3->var0 + 12))(a3);
      v83 = (*(uint64_t (**)(btCollisionWorld *))(*(_QWORD *)this + 40))(this);
      return (*(uint64_t (**)(uint64_t, const btTransform *, const btVector3 *, float))(*(_QWORD *)v83 + 32))(v83, a2, a4, v82);
    case 9:
      var0_high = HIDWORD(a3[5].var0);
      if ((int)var0_high >= 1)
      {
        v85 = var0_high + 1;
        do
        {
          v165 = *((float32x4_t *)a3[5].var2 + (v85 - 2));
          v86 = (*(uint64_t (**)(btCollisionWorld *))(*(_QWORD *)this + 40))(this);
          v87 = *((float *)a3[7].var0 + (v85 - 2));
          v88 = (float32x4_t)a2->var0.var0[1];
          v89 = (float32x4_t)a2->var0.var0[2];
          v90 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_1DD007970, v88.f32[0]), (float32x4_t)xmmword_1DD007920, *(float32x2_t *)v88.f32, 1), (float32x4_t)xmmword_1DD007600, v88, 2);
          v91 = (int8x16_t)vmulq_f32(v165, (float32x4_t)a2->var0.var0[0]);
          v92 = (int8x16_t)vmulq_f32(v165, v88);
          v93 = (int8x16_t)vmulq_f32(v165, v89);
          v93.i32[3] = 0;
          *(float32x2_t *)v94.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v91, v91, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v92, v92, 8uLL)), vpadd_f32(*(float32x2_t *)v91.i8, *(float32x2_t *)v92.i8));
          *(float32x2_t *)&v94.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v93.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v93, v93, 8uLL)), 0);
          v95 = vaddq_f32(v94, (float32x4_t)a2->var1);
          v167 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_1DD007970, COERCE_FLOAT(*(_OWORD *)a2->var0.var0)), (float32x4_t)xmmword_1DD007920, *(float32x2_t *)a2->var0.var0[0].var0.var0, 1), (float32x4_t)xmmword_1DD007600, (float32x4_t)a2->var0.var0[0], 2);
          v168 = v90;
          v169 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_1DD007970, v89.f32[0]), (float32x4_t)xmmword_1DD007920, *(float32x2_t *)v89.f32, 1), (float32x4_t)xmmword_1DD007600, v89, 2);
          v170 = v95;
          result = (*(uint64_t (**)(uint64_t, float32x4_t *, const btVector3 *, float))(*(_QWORD *)v86 + 32))(v86, &v167, a4, v87);
          --v85;
        }
        while (v85 > 1);
      }
      return result;
    case 10:
      var0_low = SLODWORD(a3[3].var0);
      v97 = *((float *)&a3[2].var0 + ((int)var0_low + 2) % 3);
      v98 = *((_DWORD *)&a3[2].var0 + var0_low);
      v99 = *(uint64_t (**)(__n128, __n128))(*(_QWORD *)(*(uint64_t (**)(btCollisionWorld *))(*(_QWORD *)this + 40))(this)
                                                     + 152);
      goto LABEL_35;
    case 11:
      v102 = HIDWORD(a3[3].var0);
      v103 = a3[3].var1;
      v99 = *(uint64_t (**)(__n128, __n128))(*(_QWORD *)(*(uint64_t (**)(btCollisionWorld *))(*(_QWORD *)this + 40))(this)
                                                     + 168);
      v100.n128_u32[0] = v102;
      v101.n128_u32[0] = v103;
      goto LABEL_36;
    case 13:
      v104 = SLODWORD(a3[3].var0);
      v97 = (*((float (**)(const btCollisionShape *))a3->var0 + 23))(a3);
      v166 = *(float32x4_t *)&a3[2].var0;
      v160 = COERCE_UNSIGNED_INT64((*((double (**)(const btCollisionShape *))a3->var0 + 12))(a3));
      v156 = COERCE_UNSIGNED_INT64((*((double (**)(const btCollisionShape *))a3->var0 + 12))(a3));
      *(float *)&v105 = (*((float (**)(const btCollisionShape *))a3->var0 + 12))(a3);
      v106.i64[0] = __PAIR64__(v156, v160);
      v106.i64[1] = v105;
      v167 = vaddq_f32(v166, v106);
      v98 = v167.i32[v104];
      v99 = *(uint64_t (**)(__n128, __n128))(*(_QWORD *)(*(uint64_t (**)(btCollisionWorld *))(*(_QWORD *)this + 40))(this)
                                                     + 160);
LABEL_35:
      v100.n128_f32[0] = v97;
      v101.n128_u32[0] = v98;
LABEL_36:
      result = v99(v100, v101);
      break;
    default:
      if (var1 == 28)
      {
        v107 = a3[3].var1;
        v108 = (*(uint64_t (**)(btCollisionWorld *))(*(_QWORD *)this + 40))(this);
        result = (*(uint64_t (**)(uint64_t, void **, const btTransform *, const btVector3 *, float))(*(_QWORD *)v108 + 176))(v108, &a3[2].var2, a2, a4, *(float *)&v107);
      }
      else if (var1 == 31)
      {
        v15 = HIDWORD(a3[1].var0);
        if ((int)v15 >= 1)
        {
          v16 = v15 + 1;
          do
          {
            v17 = (float32x4_t *)((char *)a3[1].var2 + 96 * (v16 - 2));
            v18 = *v17;
            v19 = v17[1];
            v20 = v17[2];
            v21 = v17[3];
            v22 = v17[4].i64[0];
            v18.i32[3] = 0;
            v19.i32[3] = 0;
            v23 = (float32x4_t)a2->var0.var0[1];
            v20.i32[3] = 0;
            v24 = (float32x4_t)a2->var0.var0[2];
            v25 = vmlaq_lane_f32(vmulq_n_f32(v18, v24.f32[0]), v19, *(float32x2_t *)v24.f32, 1);
            v26 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v18, v23.f32[0]), v19, *(float32x2_t *)v23.f32, 1), v20, v23, 2);
            v27 = (int8x16_t)vmulq_f32(v21, (float32x4_t)a2->var0.var0[0]);
            v28 = (int8x16_t)vmulq_f32(v21, v23);
            v29 = (int8x16_t)vmulq_f32(v21, v24);
            v29.i32[3] = 0;
            v30 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v18, COERCE_FLOAT(*(_OWORD *)a2->var0.var0)), v19, *(float32x2_t *)a2->var0.var0[0].var0.var0, 1), v20, (float32x4_t)a2->var0.var0[0], 2);
            *(float32x2_t *)v19.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL)), vpadd_f32(*(float32x2_t *)v27.i8, *(float32x2_t *)v28.i8));
            *(float32x2_t *)&v19.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v29.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL)), 0);
            v31 = vaddq_f32(v19, (float32x4_t)a2->var1);
            v167 = v30;
            v168 = v26;
            v169 = vmlaq_laneq_f32(v25, v20, v24, 2);
            v170 = v31;
            result = (*(uint64_t (**)(btCollisionWorld *, float32x4_t *, uint64_t, const btVector3 *))(*(_QWORD *)this + 56))(this, &v167, v22, a4);
            --v16;
          }
          while (v16 > 1);
        }
      }
      else
      {
LABEL_9:
        if (var1 <= 6)
        {
          var0 = a3[3].var0;
          if (var0)
          {
            if (*((int *)var0 + 11) >= 1)
            {
              v33 = 0;
              do
              {
                v34 = var0[7];
                v35 = (char *)&v34[6 * v33];
                v36 = *((_DWORD *)v35 + 1);
                v158 = v36;
                if (v36 < 1)
                {
                  v39 = 0uLL;
                }
                else
                {
                  v37 = 0;
                  v38 = *(_DWORD *)(*((_QWORD *)v35 + 2) + 4 * (v36 - 1));
                  v39 = 0uLL;
                  do
                  {
                    v40 = *(int *)(v34[6 * v33 + 2] + 4 * v37);
                    v162 = vaddq_f32(v39, *((float32x4_t *)var0[3] + v40));
                    v41 = (*(uint64_t (**)(btCollisionWorld *))(*(_QWORD *)this + 40))(this);
                    v42 = (float32x4_t *)var0[3];
                    v43 = v42[v38];
                    v44 = (float32x4_t)a2->var0.var0[0];
                    v45 = (float32x4_t)a2->var0.var0[1];
                    v46 = vmulq_f32((float32x4_t)a2->var0.var0[0], v43);
                    v47 = (int8x16_t)vmulq_f32(v43, v45);
                    v48 = (float32x4_t)a2->var0.var0[2];
                    v49 = a2->var1;
                    v50 = (int8x16_t)vmulq_f32(v43, v48);
                    v50.i32[3] = 0;
                    *(float32x2_t *)v46.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v46.f32, *(float32x2_t *)v47.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v46, (int8x16_t)v46, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v47, v47, 8uLL)));
                    *(float32x2_t *)&v46.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v50.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v50, v50, 8uLL)), 0);
                    v167 = vaddq_f32(v46, (float32x4_t)v49);
                    v51 = v42[v40];
                    v52 = vmulq_f32(v44, v51);
                    v53 = (int8x16_t)vmulq_f32(v45, v51);
                    v54 = (int8x16_t)vmulq_f32(v48, v51);
                    v54.i32[3] = 0;
                    *(float32x2_t *)v52.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v52.f32, *(float32x2_t *)v53.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v52, (int8x16_t)v52, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v53, v53, 8uLL)));
                    *(float32x2_t *)&v52.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v54.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v54, v54, 8uLL)), 0);
                    v176[0] = vaddq_f32((float32x4_t)v49, v52);
                    (*(void (**)(uint64_t, float32x4_t *, float32x4_t *, const btVector3 *))(*(_QWORD *)v41 + 16))(v41, &v167, v176, a4);
                    v39 = v162;
                    ++v37;
                    v34 = var0[7];
                    v38 = v40;
                  }
                  while (v37 < SHIDWORD(v34[6 * v33]));
                }
                v163 = v39;
                v55 = (*(uint64_t (**)(btCollisionWorld *))(*(_QWORD *)this + 40))(this);
                result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v55 + 96))(v55);
                if ((result & 0x4000) != 0)
                {
                  v167 = (float32x4_t)xmmword_1DD009440;
                  v56 = (uint64_t)var0[7] + 48 * v33;
                  v57.i64[0] = *(_QWORD *)(v56 + 32);
                  v57.i64[1] = *(unsigned int *)(v56 + 40);
                  v159 = vmulq_n_f32(v163, 1.0 / (float)v158);
                  v164 = v57;
                  v58 = (*(uint64_t (**)(btCollisionWorld *))(*(_QWORD *)this + 40))(this);
                  v59 = (float32x4_t)a2->var0.var0[1];
                  v60 = vmulq_f32(v159, (float32x4_t)a2->var0.var0[0]);
                  v61 = (int8x16_t)vmulq_f32(v159, v59);
                  v62 = (float32x4_t)a2->var0.var0[2];
                  v63 = a2->var1;
                  v64 = (int8x16_t)vmulq_f32(v159, v62);
                  v64.i32[3] = 0;
                  *(float32x2_t *)v60.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v60.f32, *(float32x2_t *)v61.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v60, (int8x16_t)v60, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v61, v61, 8uLL)));
                  *(float32x2_t *)&v60.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v64.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v64, v64, 8uLL)), 0);
                  v65 = vaddq_f32(v60, (float32x4_t)v63);
                  v66 = vaddq_f32(v159, v164);
                  v67 = vmulq_f32(v66, (float32x4_t)a2->var0.var0[0]);
                  v68 = (int8x16_t)vmulq_f32(v66, v59);
                  v69 = (int8x16_t)vmulq_f32(v66, v62);
                  v69.i32[3] = 0;
                  *(float32x2_t *)v67.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v67, (int8x16_t)v67, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v68, v68, 8uLL)), vpadd_f32(*(float32x2_t *)v67.f32, *(float32x2_t *)v68.i8));
                  *(float32x2_t *)&v67.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v69.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v69, v69, 8uLL)), 0);
                  v175 = vaddq_f32((float32x4_t)v63, v67);
                  v176[0] = v65;
                  result = (*(uint64_t (**)(uint64_t, float32x4_t *, float32x4_t *, float32x4_t *))(*(_QWORD *)v58 + 16))(v58, v176, &v175, &v167);
                }
                ++v33;
              }
              while (v33 < *((int *)var0 + 11));
            }
          }
          else
          {
            result = (*((uint64_t (**)(const btCollisionShape *))a3->var0 + 25))(a3);
            if ((int)result >= 1)
            {
              v133 = 0;
              do
              {
                (*((void (**)(const btCollisionShape *, uint64_t, float32x4_t *, float32x4_t *))a3->var0 + 26))(a3, v133, &v167, v176);
                v134 = (float32x4_t)a2->var0.var0[1];
                v135 = vmulq_f32((float32x4_t)a2->var0.var0[0], v167);
                v136 = (int8x16_t)vmulq_f32(v167, v134);
                v137 = (float32x4_t)a2->var0.var0[2];
                v138 = a2->var1;
                v139 = (int8x16_t)vmulq_f32(v167, v137);
                v139.i32[3] = 0;
                *(float32x2_t *)v135.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v135.f32, *(float32x2_t *)v136.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v135, (int8x16_t)v135, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v136, v136, 8uLL)));
                *(float32x2_t *)&v135.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v139.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v139, v139, 8uLL)), 0);
                v140 = vmulq_f32((float32x4_t)a2->var0.var0[0], v176[0]);
                v141 = (int8x16_t)vmulq_f32(v134, v176[0]);
                v142 = (int8x16_t)vmulq_f32(v137, v176[0]);
                v142.i32[3] = 0;
                *(float32x2_t *)v140.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v140.f32, *(float32x2_t *)v141.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v140, (int8x16_t)v140, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v141, v141, 8uLL)));
                *(float32x2_t *)&v140.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v142.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v142, v142, 8uLL)), 0);
                v174 = vaddq_f32((float32x4_t)v138, v140);
                v175 = vaddq_f32(v135, (float32x4_t)v138);
                v143 = (*(uint64_t (**)(btCollisionWorld *))(*(_QWORD *)this + 40))(this);
                (*(void (**)(uint64_t, float32x4_t *, float32x4_t *, const btVector3 *))(*(_QWORD *)v143 + 16))(v143, &v175, &v174, a4);
                v133 = (v133 + 1);
                result = (*((uint64_t (**)(const btCollisionShape *))a3->var0 + 25))(a3);
              }
              while ((int)v133 < (int)result);
            }
          }
        }
        v144 = a3->var1;
        if ((v144 - 21) <= 8)
        {
          v175 = (float32x4_t)xmmword_1DD02C890;
          v176[0] = (float32x4_t)xmmword_1DD02C880;
          v145 = (*(uint64_t (**)(btCollisionWorld *))(*(_QWORD *)this + 40))(this);
          v146 = a2->var0.var0[0];
          v147 = a2->var0.var0[1];
          v169 = *(float32x4_t *)a4;
          v170 = (float32x4_t)v146;
          v148 = a2->var0.var0[2];
          v149 = a2->var1;
          v171 = v147;
          v172 = v148;
          v167.i64[0] = (uint64_t)&off_1EA596668;
          v167.i64[1] = (uint64_t)&unk_1EA596698;
          v168.i64[0] = v145;
          v173 = v149;
          (*((void (**)(const btCollisionShape *, float32x4_t *, float32x4_t *, float32x4_t *))a3->var0 + 16))(a3, &v167, &v175, v176);
          C3DSceneSourcePerformConsistencyCheck(&v167.u32[2]);
          result = C3DSceneSourcePerformConsistencyCheck(&v167);
          v144 = a3->var1;
        }
        if (v144 == 3)
        {
          v175 = (float32x4_t)xmmword_1DD02C890;
          v176[0] = (float32x4_t)xmmword_1DD02C880;
          v150 = (*(uint64_t (**)(btCollisionWorld *))(*(_QWORD *)this + 40))(this);
          v151 = a2->var0.var0[0];
          v152 = a2->var0.var0[1];
          v169 = *(float32x4_t *)a4;
          v170 = (float32x4_t)v151;
          v153 = a2->var0.var0[2];
          v154 = a2->var1;
          v171 = v152;
          v172 = v153;
          v167.i64[0] = (uint64_t)&off_1EA596668;
          v167.i64[1] = (uint64_t)&unk_1EA596698;
          v168.i64[0] = v150;
          v173 = v154;
          (*((void (**)(void **, unsigned __int32 *, float32x4_t *, float32x4_t *))*a3[5].var0 + 2))(a3[5].var0, &v167.u32[2], &v175, v176);
          C3DSceneSourcePerformConsistencyCheck(&v167.u32[2]);
          result = C3DSceneSourcePerformConsistencyCheck(&v167);
        }
      }
      break;
  }
  return result;
}

void DebugDrawcallback::~DebugDrawcallback(DebugDrawcallback *this)
{
  C3DSceneSourcePerformConsistencyCheck((char *)this + 8);
  C3DSceneSourcePerformConsistencyCheck(this);
}

{
  C3DSceneSourcePerformConsistencyCheck((char *)this + 8);
  C3DSceneSourcePerformConsistencyCheck(this);
  JUMPOUT(0x1DF0D41C0);
}

uint64_t btCollisionWorld::debugDrawWorld(btCollisionWorld *this)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float *v10;
  float *v11;
  float v12;
  float v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  __int128 v24;
  float32x4_t v25;
  __int128 v26;

  if ((*(uint64_t (**)(btCollisionWorld *))(*(_QWORD *)this + 40))(this))
  {
    v2 = (*(uint64_t (**)(btCollisionWorld *))(*(_QWORD *)this + 40))(this);
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 96))(v2) & 8) != 0)
    {
      v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 72))(*((_QWORD *)this + 5));
      v26 = xmmword_1DD009440;
      if (v3 >= 1)
      {
        v4 = v3;
        v5 = 0;
        do
        {
          v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 5) + 80))(*((_QWORD *)this + 5), v5);
          v7 = *(unsigned int *)(v6 + 800);
          if ((int)v7 >= 1)
          {
            v8 = (float *)(v6 + 168);
            do
            {
              v9 = (*(uint64_t (**)(btCollisionWorld *))(*(_QWORD *)this + 40))(this);
              v10 = v8 - 30;
              v11 = v8 - 22;
              v12 = *(v8 - 18);
              v13 = *v8;
              v8 += 48;
              (*(void (**)(uint64_t, float *, float *, _QWORD, __int128 *, float))(*(_QWORD *)v9 + 64))(v9, v10, v11, LODWORD(v13), &v26, v12);
              --v7;
            }
            while (v7);
          }
          v5 = (v5 + 1);
        }
        while ((_DWORD)v5 != v4);
      }
    }
  }
  result = (*(uint64_t (**)(btCollisionWorld *))(*(_QWORD *)this + 40))(this);
  if (result)
  {
    v15 = (*(uint64_t (**)(btCollisionWorld *))(*(_QWORD *)this + 40))(this);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 96))(v15);
    if ((result & 3) != 0 && *((int *)this + 3) >= 1)
    {
      v16 = 0;
      do
      {
        v17 = *(_QWORD *)(*((_QWORD *)this + 3) + 8 * v16);
        if ((*(_BYTE *)(v17 + 232) & 0x20) == 0)
        {
          if ((*(uint64_t (**)(btCollisionWorld *))(*(_QWORD *)this + 40))(this))
          {
            v18 = (*(uint64_t (**)(btCollisionWorld *))(*(_QWORD *)this + 40))(this);
            if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 96))(v18) & 1) != 0)
            {
              switch(*(_DWORD *)(v17 + 244))
              {
                case 1:
                  v19 = xmmword_1DD007920;
                  break;
                case 2:
                  v19 = xmmword_1DD02C8B0;
                  break;
                case 3:
                  v19 = xmmword_1DD02C8A0;
                  break;
                case 5:
                  v19 = xmmword_1DD009440;
                  break;
                default:
                  v19 = xmmword_1DD007970;
                  break;
              }
              v26 = v19;
              (*(void (**)(btCollisionWorld *, uint64_t, _QWORD, __int128 *))(*(_QWORD *)this + 56))(this, v17 + 16, *(_QWORD *)(v17 + 208), &v26);
            }
          }
          result = *((_QWORD *)this + 13);
          if (result)
          {
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 96))(result);
            if ((result & 2) != 0)
            {
              v24 = xmmword_1DD007970;
              (*(void (**)(_QWORD, uint64_t, __int128 *, float32x4_t *))(**(_QWORD **)(v17 + 208) + 16))(*(_QWORD *)(v17 + 208), v17 + 16, &v26, &v25);
              v20 = vld1q_dup_f32((const float *)&gContactBreakingThreshold);
              v20.i32[3] = 0;
              v25 = vaddq_f32(v25, v20);
              v26 = (__int128)vsubq_f32((float32x4_t)v26, v20);
              if (*((_BYTE *)this + 64) && *(_DWORD *)(v17 + 264) == 2 && (*(_BYTE *)(v17 + 232) & 3) == 0)
              {
                v21 = v20;
                (*(void (**)(_QWORD, uint64_t, float32x4_t *, float32x4_t *))(**(_QWORD **)(v17 + 208) + 16))(*(_QWORD *)(v17 + 208), v17 + 80, &v23, &v22);
                v22 = vaddq_f32(v21, v22);
                v23 = vsubq_f32(v23, v21);
                v25 = vmaxq_f32(v25, v22);
                v26 = (__int128)vminq_f32((float32x4_t)v26, v23);
              }
              result = (*(uint64_t (**)(_QWORD, __int128 *, float32x4_t *, __int128 *))(**((_QWORD **)this + 13)
                                                                                                + 104))(*((_QWORD *)this + 13), &v26, &v25, &v24);
            }
          }
        }
        ++v16;
      }
      while (v16 < *((int *)this + 3));
    }
  }
  return result;
}

void btCollisionWorld::serializeCollisionObjects(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t i;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[4];
  uint64_t v11;
  void *v12;
  char v13;
  uint64_t v14;
  void *v15;
  char v16;
  uint64_t v17;
  void *v18;
  char v19;
  uint64_t v20;
  void *v21;
  char v22;

  v4 = *(_DWORD *)(a1 + 12);
  if (v4 >= 1)
  {
    for (i = 0; i < v4; ++i)
    {
      v6 = *(_DWORD **)(*(_QWORD *)(a1 + 24) + 8 * i);
      if (v6[66] == 1)
      {
        (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)v6 + 48))(v6, a2);
        v4 = *(_DWORD *)(a1 + 12);
      }
    }
  }
  v13 = 1;
  v12 = 0;
  v11 = 0;
  v16 = 1;
  v15 = 0;
  v14 = 0;
  v19 = 1;
  v18 = 0;
  v17 = 0;
  v22 = 1;
  v21 = 0;
  v20 = 0;
  if (v4 >= 1)
  {
    v7 = 0;
    do
    {
      v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v7) + 208);
      v9 = v8;
      if (btHashMap<btHashPtr,btCollisionShape *>::findIndex((uint64_t)v10, &v8) == -1 || !v18)
      {
        v8 = v9;
        btHashMap<btHashPtr,btCollisionShape *>::insert((uint64_t)v10, (int *)&v8, &v9);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 120))(v9, a2);
      }
      ++v7;
    }
    while (v7 < *(int *)(a1 + 12));
    if (v21 && v22)
      btAlignedFreeInternal((void **)v21);
  }
  v22 = 1;
  v21 = 0;
  v20 = 0;
  if (v18 && v19)
    btAlignedFreeInternal((void **)v18);
  v19 = 1;
  v18 = 0;
  v17 = 0;
  if (v15 && v16)
    btAlignedFreeInternal((void **)v15);
  v16 = 1;
  v15 = 0;
  v14 = 0;
  if (v12)
  {
    if (v13)
      btAlignedFreeInternal((void **)v12);
  }
}

void btHashMap<btHashPtr,btCollisionShape *>::insert(uint64_t a1, int *a2, _QWORD *a3)
{
  int v6;
  int v7;
  int v8;
  int Index;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void **v26;
  int v27;
  int v28;
  uint64_t v29;

  v6 = *a2;
  v7 = a2[1];
  v8 = *(_DWORD *)(a1 + 72);
  Index = btHashMap<btHashPtr,btCollisionShape *>::findIndex(a1, a2);
  if (Index == -1)
  {
    v10 = 9 * ((v7 + v6 + ~((v7 + v6) << 15)) ^ ((v7 + v6 + ~((v7 + v6) << 15)) >> 10));
    v11 = ((v10 ^ (v10 >> 6)) + ~((v10 ^ (v10 >> 6)) << 11)) ^ (((v10 ^ (v10 >> 6)) + ~((v10 ^ (v10 >> 6)) << 11)) >> 16);
    v12 = v8 - 1;
    v13 = *(_DWORD *)(a1 + 68);
    v14 = *(_DWORD *)(a1 + 72);
    v15 = v13;
    if (v13 == v14)
    {
      v16 = v13 ? 2 * v13 : 1;
      v15 = *(_DWORD *)(a1 + 68);
      if (v13 < v16)
      {
        if (v16)
          v17 = btAlignedAllocInternal(8 * v16, 16);
        else
          v17 = 0;
        v15 = *(_DWORD *)(a1 + 68);
        if (v15 >= 1)
        {
          v18 = 0;
          do
          {
            *(_QWORD *)(v17 + v18) = *(_QWORD *)(*(_QWORD *)(a1 + 80) + v18);
            v18 += 8;
          }
          while (8 * v15 != v18);
        }
        v19 = *(void ***)(a1 + 80);
        if (v19 && *(_BYTE *)(a1 + 88))
        {
          btAlignedFreeInternal(v19);
          v15 = *(_DWORD *)(a1 + 68);
        }
        *(_BYTE *)(a1 + 88) = 1;
        *(_QWORD *)(a1 + 80) = v17;
        *(_DWORD *)(a1 + 72) = v16;
      }
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v15) = *a3;
    v20 = v11 & v12;
    *(_DWORD *)(a1 + 68) = v15 + 1;
    v21 = *(_DWORD *)(a1 + 100);
    if (v21 == *(_DWORD *)(a1 + 104))
    {
      v22 = v21 ? 2 * v21 : 1;
      if (v21 < v22)
      {
        if (v22)
        {
          v23 = btAlignedAllocInternal(8 * v22, 16);
          v21 = *(_DWORD *)(a1 + 100);
        }
        else
        {
          v23 = 0;
        }
        if (v21 >= 1)
        {
          v24 = 0;
          v25 = 8 * v21;
          do
          {
            *(_QWORD *)(v23 + v24) = *(_QWORD *)(*(_QWORD *)(a1 + 112) + v24);
            v24 += 8;
          }
          while (v25 != v24);
        }
        v26 = *(void ***)(a1 + 112);
        if (v26 && *(_BYTE *)(a1 + 120))
          btAlignedFreeInternal(v26);
        *(_BYTE *)(a1 + 120) = 1;
        *(_QWORD *)(a1 + 112) = v23;
        *(_DWORD *)(a1 + 104) = v22;
        v21 = *(_DWORD *)(a1 + 100);
      }
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * v21) = *(_QWORD *)a2;
    ++*(_DWORD *)(a1 + 100);
    if (v14 < *(_DWORD *)(a1 + 72))
    {
      btHashMap<btHashPtr,btCollisionShape *>::growTables(a1);
      v27 = 9 * ((a2[1] + *a2 + ~((a2[1] + *a2) << 15)) ^ ((a2[1] + *a2 + ~((a2[1] + *a2) << 15)) >> 10));
      v28 = (v27 ^ (v27 >> 6)) + ~((v27 ^ (v27 >> 6)) << 11);
      v20 = (v28 ^ (v28 >> 16)) & (*(_DWORD *)(a1 + 72) - 1);
    }
    v29 = *(_QWORD *)(a1 + 16);
    *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4 * v13) = *(_DWORD *)(v29 + 4 * v20);
    *(_DWORD *)(v29 + 4 * v20) = v13;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * Index) = *a3;
  }
}

uint64_t btCollisionWorld::serialize(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
  btCollisionWorld::serializeCollisionObjects(a1, a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 72))(a2);
}

uint64_t btCollisionWorld::setDebugDrawer(uint64_t this, btIDebugDraw *a2)
{
  *(_QWORD *)(this + 104) = a2;
  return this;
}

uint64_t btCollisionWorld::getDebugDrawer(btCollisionWorld *this)
{
  return *((_QWORD *)this + 13);
}

void btConvexCast::CastResult::~CastResult(btConvexCast::CastResult *this)
{
  JUMPOUT(0x1DF0D41C0);
}

void btCollisionWorld::rayTestSingleInternal(btTransform const&,btTransform const&,btCollisionObjectWrapper const*,btCollisionWorld::RayResultCallback &)::BridgeTriangleRaycastCallback::~BridgeTriangleRaycastCallback(uint64_t a1)
{
  C3DSceneSourcePerformConsistencyCheck(a1);
  JUMPOUT(0x1DF0D41C0);
}

{
  C3DSceneSourcePerformConsistencyCheck(a1);
  JUMPOUT(0x1DF0D41C0);
}

uint64_t btCollisionWorld::rayTestSingleInternal(btTransform const&,btTransform const&,btCollisionObjectWrapper const*,btCollisionWorld::RayResultCallback &)::BridgeTriangleRaycastCallback::reportHit(float32x4_t *a1, float32x4_t *a2, int a3, int a4, float a5)
{
  int8x16_t v5;
  int8x16_t v6;
  int8x16_t v7;
  uint64_t v8;
  __int8 *v9;
  _DWORD v11[2];
  _QWORD v12[2];
  int8x16_t v13;
  float v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v11[0] = a3;
  v11[1] = a4;
  v5 = (int8x16_t)vmulq_f32(a1[5], *a2);
  v6 = (int8x16_t)vmulq_f32(*a2, a1[6]);
  v7 = (int8x16_t)vmulq_f32(*a2, a1[7]);
  v7.i32[3] = 0;
  *(float32x2_t *)v5.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v5.i8, *(float32x2_t *)v6.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)));
  v5.u64[1] = (unint64_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)), 0);
  v9 = &a1[3].i8[8];
  v8 = a1[3].i64[1];
  v12[0] = *((_QWORD *)v9 + 1);
  v12[1] = v11;
  v13 = v5;
  v14 = a5;
  return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v8 + 24))(v8, v12, 1);
}

{
  int8x16_t v5;
  int8x16_t v6;
  int8x16_t v7;
  uint64_t v8;
  __int8 *v9;
  _DWORD v11[2];
  _QWORD v12[2];
  int8x16_t v13;
  float v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v11[0] = a3;
  v11[1] = a4;
  v5 = (int8x16_t)vmulq_f32(a1[5], *a2);
  v6 = (int8x16_t)vmulq_f32(*a2, a1[6]);
  v7 = (int8x16_t)vmulq_f32(*a2, a1[7]);
  v7.i32[3] = 0;
  *(float32x2_t *)v5.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v5.i8, *(float32x2_t *)v6.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)));
  v5.u64[1] = (unint64_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)), 0);
  v9 = &a1[3].i8[8];
  v8 = a1[3].i64[1];
  v12[0] = *((_QWORD *)v9 + 1);
  v12[1] = v11;
  v13 = v5;
  v14 = a5;
  return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v8 + 24))(v8, v12, 1);
}

void btCollisionWorld::rayTestSingleInternal(btTransform const&,btTransform const&,btCollisionObjectWrapper const*,btCollisionWorld::RayResultCallback &)::RayTester::~RayTester()
{
  JUMPOUT(0x1DF0D41C0);
}

uint64_t btCollisionWorld::rayTestSingleInternal(btTransform const&,btTransform const&,btCollisionObjectWrapper const*,btCollisionWorld::RayResultCallback &)::RayTester::Process(_QWORD *a1, uint64_t a2)
{
  return btCollisionWorld::rayTestSingleInternal(btTransform const&,btTransform const&,btCollisionObjectWrapper const*,btCollisionWorld::RayResultCallback &)::RayTester::ProcessLeaf(a1, *(_DWORD *)(a2 + 40));
}

void btCollisionWorld::rayTestSingleInternal(btTransform const&,btTransform const&,btCollisionObjectWrapper const*,btCollisionWorld::RayResultCallback &)::LocalInfoAdder2::~LocalInfoAdder2()
{
  JUMPOUT(0x1DF0D41C0);
}

uint64_t btCollisionWorld::rayTestSingleInternal(btTransform const&,btTransform const&,btCollisionObjectWrapper const*,btCollisionWorld::RayResultCallback &)::LocalInfoAdder2::needsCollision(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 16))(*(_QWORD *)(a1 + 56));
}

uint64_t btCollisionWorld::rayTestSingleInternal(btTransform const&,btTransform const&,btCollisionObjectWrapper const*,btCollisionWorld::RayResultCallback &)::LocalInfoAdder2::addSingleResult(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t result;
  _DWORD v5[2];

  v3 = *(_DWORD *)(a1 + 64);
  v5[0] = -1;
  v5[1] = v3;
  if (!*(_QWORD *)(a2 + 8))
    *(_QWORD *)(a2 + 8) = v5;
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 24))(*(_QWORD *)(a1 + 56));
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 56) + 8);
  return result;
}

void btCollisionWorld::objectQuerySingleInternal(btConvexShape const*,btTransform const&,btTransform const&,btCollisionObjectWrapper const*,btCollisionWorld::ConvexResultCallback &,float)::BridgeTriangleConvexcastCallback::~BridgeTriangleConvexcastCallback(uint64_t a1)
{
  C3DSceneSourcePerformConsistencyCheck(a1);
  JUMPOUT(0x1DF0D41C0);
}

{
  C3DSceneSourcePerformConsistencyCheck(a1);
  JUMPOUT(0x1DF0D41C0);
}

float *btCollisionWorld::objectQuerySingleInternal(btConvexShape const*,btTransform const&,btTransform const&,btCollisionObjectWrapper const*,btCollisionWorld::ConvexResultCallback &,float)::BridgeTriangleConvexcastCallback::reportHit(uint64_t a1, __int128 *a2, __int128 *a3, int a4, int a5, float a6)
{
  float *result;
  __int128 v8;
  _DWORD v9[2];
  _QWORD v10[2];
  __int128 v11;
  __int128 v12;
  float v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v9[0] = a4;
  v9[1] = a5;
  result = *(float **)(a1 + 224);
  if (result[2] >= a6)
  {
    v10[0] = *(_QWORD *)(a1 + 232);
    v10[1] = v9;
    v8 = *a3;
    v11 = *a2;
    v12 = v8;
    v13 = a6;
    return (float *)(*(uint64_t (**)(float *, _QWORD *, uint64_t))(*(_QWORD *)result + 24))(result, v10, 1);
  }
  return result;
}

{
  float *result;
  __int128 v8;
  _DWORD v9[2];
  _QWORD v10[2];
  __int128 v11;
  __int128 v12;
  float v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v9[0] = a4;
  v9[1] = a5;
  result = *(float **)(a1 + 224);
  if (result[2] >= a6)
  {
    v10[0] = *(_QWORD *)(a1 + 232);
    v10[1] = v9;
    v8 = *a3;
    v11 = *a2;
    v12 = v8;
    v13 = a6;
    return (float *)(*(uint64_t (**)(float *, _QWORD *, _QWORD))(*(_QWORD *)result + 24))(result, v10, 0);
  }
  return result;
}

void btCollisionWorld::objectQuerySingleInternal(btConvexShape const*,btTransform const&,btTransform const&,btCollisionObjectWrapper const*,btCollisionWorld::ConvexResultCallback &,float)::LocalInfoAdder::~LocalInfoAdder()
{
  JUMPOUT(0x1DF0D41C0);
}

uint64_t btCollisionWorld::objectQuerySingleInternal(btConvexShape const*,btTransform const&,btTransform const&,btCollisionObjectWrapper const*,btCollisionWorld::ConvexResultCallback &,float)::LocalInfoAdder::needsCollision(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40));
}

uint64_t btCollisionWorld::objectQuerySingleInternal(btConvexShape const*,btTransform const&,btTransform const&,btCollisionObjectWrapper const*,btCollisionWorld::ConvexResultCallback &,float)::LocalInfoAdder::addSingleResult(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t result;
  _DWORD v5[2];

  v3 = *(_DWORD *)(a1 + 48);
  v5[0] = -1;
  v5[1] = v3;
  if (!*(_QWORD *)(a2 + 8))
    *(_QWORD *)(a2 + 8) = v5;
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40));
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 40) + 8);
  return result;
}

float32x2_t btSingleRayCallback::btSingleRayCallback(uint64_t a1, float32x4_t *a2, float32x4_t *a3, uint64_t a4, uint64_t a5)
{
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  int8x16_t v8;
  float32x4_t v9;
  float v10;
  float32x2_t v16;
  float32x4_t v17;
  int8x16_t v18;
  float32x2_t result;

  v5 = *a2;
  *(_QWORD *)a1 = &off_1EA596C90;
  *(float32x4_t *)(a1 + 48) = v5;
  v6 = *a3;
  *(_QWORD *)(a1 + 224) = a4;
  *(_QWORD *)(a1 + 232) = a5;
  *(float32x4_t *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 80) = xmmword_1DD007970;
  *(_OWORD *)(a1 + 96) = xmmword_1DD007920;
  *(_OWORD *)(a1 + 112) = xmmword_1DD007600;
  *(float32x4_t *)(a1 + 128) = v5;
  *(_OWORD *)(a1 + 144) = xmmword_1DD007970;
  *(_OWORD *)(a1 + 160) = xmmword_1DD007920;
  *(_OWORD *)(a1 + 176) = xmmword_1DD007600;
  *(float32x4_t *)(a1 + 192) = v6;
  v7 = vsubq_f32(*a3, *a2);
  v7.i32[3] = 0;
  v8 = (int8x16_t)vmulq_f32(v7, v7);
  v9 = vmulq_n_f32(v7, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v8.i8, *(float32x2_t *)v8.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL)).f32[0]));
  v10 = 1.0e18;
  if (v9.f32[2] != 0.0)
    v10 = 1.0 / v9.f32[2];
  *(float *)(a1 + 24) = v10;
  __asm { FMOV            V5.2S, #1.0 }
  v16 = (float32x2_t)vbsl_s8((int8x8_t)vceqz_f32(*(float32x2_t *)v9.f32), (int8x8_t)vdup_n_s32(0x5D5E0B6Bu), (int8x8_t)vdiv_f32(_D5, *(float32x2_t *)v9.f32));
  *(float32x2_t *)(a1 + 16) = v16;
  *(int8x8_t *)(a1 + 32) = vand_s8((int8x8_t)vcltz_f32(v16), (int8x8_t)0x100000001);
  *(_DWORD *)(a1 + 40) = v10 < 0.0;
  v17 = vsubq_f32(v6, v5);
  v17.i32[3] = 0;
  v18 = (int8x16_t)vmulq_f32(v9, v17);
  result = vadd_f32(vpadd_f32(*(float32x2_t *)v18.i8, *(float32x2_t *)v18.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL));
  *(_DWORD *)(a1 + 44) = result.i32[0];
  return result;
}

void btSingleRayCallback::~btSingleRayCallback(btSingleRayCallback *this)
{
  JUMPOUT(0x1DF0D41C0);
}

BOOL btSingleRayCallback::process(float32x4_t *a1, uint64_t *a2)
{
  float *v3;
  float v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[5];

  v3 = (float *)a1[14].i64[1];
  v4 = v3[2];
  if (v4 != 0.0)
  {
    v5 = *a2;
    if ((*(unsigned int (**)(float *, _QWORD))(*(_QWORD *)v3 + 16))(v3, *(_QWORD *)(*a2 + 200)))
    {
      v6 = *(_QWORD *)(v5 + 208);
      v7 = a1[14].i64[1];
      v9[0] = 0;
      v9[1] = v6;
      v9[2] = v5;
      v9[3] = v5 + 16;
      v9[4] = -1;
      btCollisionWorld::rayTestSingleInternal(a1 + 5, (uint64_t)&a1[9], v9, v7);
    }
  }
  return v4 != 0.0;
}

void btTransformUtil::calculateDiffAxisAngle(btTransformUtil *this, const btTransform *a2, const btTransform *a3, btVector3 *a4, float *a5)
{
  int32x2_t v10;
  float32x2_t v11;
  float32x2_t v12;
  float32x2_t v13;
  __int128 v14;
  float32x2_t v15;
  float32x2_t v16;
  __int128 v17;
  float32x2_t v18;
  float32x4_t v19;
  int8x16_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float v34;
  float v35;
  btVector3 v36;
  float32x4_t v37;
  int8x16_t v38;
  float v39;
  float32x4_t v40;
  btVector3 v41;
  btQuaternion v42;
  btMatrix3x3 v43;

  _S3 = *((_DWORD *)this + 6);
  _S2 = *((float *)this + 4);
  _Q1 = *(_OWORD *)this;
  v10 = *(int32x2_t *)((char *)this + 32);
  v11 = (float32x2_t)vrev64_s32(v10);
  v12 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)this, 0);
  v13.i32[1] = v12.i32[1];
  v13.i32[0] = *((_DWORD *)this + 5);
  v14 = *(_OWORD *)this;
  *(float *)&v14 = _S2;
  v15 = vmla_f32(vmul_f32((float32x2_t)v10, vneg_f32(v13)), v11, *(float32x2_t *)&v14);
  *(int32x2_t *)&v14 = vdup_laneq_s32(*(int32x4_t *)this, 2);
  v11.i32[0] = *((_DWORD *)this + 10);
  v12.i32[0] = _S3;
  v16 = vmla_f32(vmul_f32(v11, vneg_f32((float32x2_t)__PAIR64__(DWORD1(v14), LODWORD(_S2)))), (float32x2_t)__PAIR64__(v11.u32[0], v10.u32[0]), v12);
  v17 = *(_OWORD *)this;
  LODWORD(v17) = _S3;
  *(float32x2_t *)&v17 = vneg_f32(*(float32x2_t *)&v17);
  LODWORD(v14) = *((_DWORD *)this + 5);
  v10.i32[0] = *((_DWORD *)this + 10);
  v18 = vmla_f32(vmul_f32(*(float32x2_t *)((char *)this + 36), *(float32x2_t *)&v17), (float32x2_t)v10, *(float32x2_t *)&v14);
  v19.i64[0] = __PAIR64__(v16.u32[0], v18.u32[0]);
  __asm { FMLA            S19, S3, V1.S[1] }
  v19.i64[1] = v15.u32[0];
  v25 = (int8x16_t)vmulq_f32(*(float32x4_t *)this, v19);
  *(float *)v25.i32 = 1.0
                    / vadd_f32(vpadd_f32(*(float32x2_t *)v25.i8, *(float32x2_t *)v25.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL)).f32[0];
  *(float32x2_t *)v26.f32 = vmul_n_f32(v18, *(float *)v25.i32);
  *(float32x2_t *)v27.f32 = vmul_n_f32(v16, *(float *)v25.i32);
  __asm { FMLA            S3, S2, V1.S[2] }
  *(float32x2_t *)v29.f32 = vmul_n_f32(v15, *(float *)v25.i32);
  v26.f32[2] = _S19 * *(float *)v25.i32;
  v27.f32[2] = _S3 * *(float *)v25.i32;
  v29.f32[2] = vmlas_n_f32(vmuls_lane_f32(_S2, *(float32x2_t *)&v17, 1), *(float *)&v14, COERCE_FLOAT(*(_OWORD *)this))
             * *(float *)v25.i32;
  v26.i32[3] = 0;
  v27.i32[3] = 0;
  v29.i32[3] = 0;
  v30 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v26, COERCE_FLOAT(*(_OWORD *)&a2->var0.var0[1])), v27, *(float32x2_t *)a2->var0.var0[1].var0.var0, 1), v29, (float32x4_t)a2->var0.var0[1], 2);
  v31 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v26, COERCE_FLOAT(*(_OWORD *)&a2->var0.var0[2])), v27, *(float32x2_t *)a2->var0.var0[2].var0.var0, 1), v29, (float32x4_t)a2->var0.var0[2], 2);
  v43.var0[0] = (btVector3)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v26, COERCE_FLOAT(*(_OWORD *)a2->var0.var0)), v27, *(float32x2_t *)a2->var0.var0[0].var0.var0, 1), v29, (float32x4_t)a2->var0.var0[0], 2);
  v43.var0[1] = (btVector3)v30;
  v43.var0[2] = (btVector3)v31;
  btMatrix3x3::getRotation(&v43, &v42);
  v32 = vmulq_f32((float32x4_t)v42, (float32x4_t)v42);
  v32.i64[0] = vpaddq_f32(v32, v32).u64[0];
  v33 = vmulq_n_f32((float32x4_t)v42, 1.0 / sqrtf(vpadd_f32(*(float32x2_t *)v32.f32, *(float32x2_t *)v32.f32).f32[0]));
  v41 = (btVector3)v33;
  v34 = v33.f32[3];
  if (v33.f32[3] < -1.0)
    v34 = -1.0;
  if (v34 > 1.0)
    v34 = 1.0;
  v35 = acosf(v34);
  a4->var0.var0[0] = v35 + v35;
  v36 = v41;
  v36.var0.var0[3] = 0.0;
  a3->var0.var0[0] = v36;
  a3->var0.var0[0].var0.var0[3] = 0.0;
  v37 = (float32x4_t)a3->var0.var0[0];
  v38 = (int8x16_t)vmulq_f32(v37, v37);
  v39 = vadd_f32(vpadd_f32(*(float32x2_t *)v38.i8, *(float32x2_t *)v38.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v38, v38, 8uLL)).f32[0];
  if (v39 >= 1.4211e-14)
    v40 = vmulq_n_f32(v37, 1.0 / sqrtf(v39));
  else
    v40 = (float32x4_t)xmmword_1DD007970;
  a3->var0.var0[0] = (btVector3)v40;
}

float32x4_t btMatrix3x3::getRotation(btMatrix3x3 *this, btQuaternion *a2)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float32_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  btVector3 *v12;
  btVector3 *v13;
  btVector3 *v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float32x4_t result;
  float32x4_t v21;

  v2 = this->var0[0].var0.var0[0];
  v3 = this->var0[1].var0.var0[1];
  v4 = this->var0[2].var0.var0[2];
  v5 = (float)(this->var0[0].var0.var0[0] + v3) + v4;
  if (v5 <= 0.0)
  {
    v9 = v2 >= v4;
    v8 = 2 * (v2 < v4);
    v10 = 2;
    if (v2 < v4)
      v10 = 1;
    v11 = 2;
    if (v3 >= v4)
      v11 = 1;
    if (v2 < v3)
    {
      v8 = v11;
      v9 = 2 * (v3 >= v4);
    }
    v12 = &this->var0[v8];
    if (v2 < v3)
      v10 = v3 < v4;
    v13 = &this->var0[v9];
    v14 = &this->var0[v10];
    v5 = (float)(v12->var0.var0[v8] - v13->var0.var0[v9]) - v14->var0.var0[v10];
    v15 = v13->var0.var0[v8];
    v16 = v12->var0.var0[v9];
    v21.f32[3] = v14->var0.var0[v9] - v13->var0.var0[v10];
    v17 = v15 + v16;
    v18 = v14->var0.var0[v8];
    *(float *)((unint64_t)&v21 | (4 * v9)) = v17;
    *(float *)((unint64_t)&v21 | (4 * v10)) = v18 + v12->var0.var0[v10];
  }
  else
  {
    v6 = this->var0[0].var0.var0[1];
    v7 = this->var0[0].var0.var0[2] - this->var0[2].var0.var0[0];
    v21.f32[0] = this->var0[2].var0.var0[1] - this->var0[1].var0.var0[2];
    v21.f32[1] = v7;
    v21.f32[2] = this->var0[1].var0.var0[0] - v6;
    v8 = 3;
  }
  v19 = v5 + 1.0;
  *(float *)((unint64_t)&v21 | (4 * v8)) = v19;
  result = vmulq_n_f32(v21, 0.5 / sqrtf(v19));
  *a2 = (btQuaternion)result;
  return result;
}

float32x2_t btSingleSweepCallback::btSingleSweepCallback(uint64_t a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4, uint64_t a5, uint64_t a6, float a7)
{
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  int8x16_t v10;
  float32x4_t v11;
  float v12;
  float32x2_t v18;
  int8x16_t v19;
  float32x2_t result;

  *(_QWORD *)a1 = &off_1EA597118;
  *(float32x4_t *)(a1 + 48) = *a3;
  *(float32x4_t *)(a1 + 64) = a3[1];
  *(float32x4_t *)(a1 + 80) = a3[2];
  v7 = a3[3];
  *(float32x4_t *)(a1 + 96) = v7;
  *(float32x4_t *)(a1 + 112) = *a4;
  *(float32x4_t *)(a1 + 128) = a4[1];
  *(float32x4_t *)(a1 + 144) = a4[2];
  v8 = a4[3];
  *(float32x4_t *)(a1 + 160) = v8;
  *(_QWORD *)(a1 + 192) = a5;
  *(_QWORD *)(a1 + 200) = a6;
  *(float *)(a1 + 208) = a7;
  *(_QWORD *)(a1 + 216) = a2;
  v9 = vsubq_f32(v8, v7);
  v9.i32[3] = 0;
  v10 = (int8x16_t)vmulq_f32(v9, v9);
  v11 = vmulq_n_f32(v9, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v10.i8, *(float32x2_t *)v10.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL)).f32[0]));
  v12 = 1.0 / v11.f32[2];
  if (v11.f32[2] == 0.0)
    v12 = 1.0e18;
  *(float *)(a1 + 24) = v12;
  __asm { FMOV            V4.2S, #1.0 }
  v18 = (float32x2_t)vbsl_s8((int8x8_t)vceqz_f32(*(float32x2_t *)v11.f32), (int8x8_t)vdup_n_s32(0x5D5E0B6Bu), (int8x8_t)vdiv_f32(_D4, *(float32x2_t *)v11.f32));
  *(float32x2_t *)(a1 + 16) = v18;
  *(int8x8_t *)(a1 + 32) = vand_s8((int8x8_t)vcltz_f32(v18), (int8x8_t)0x100000001);
  *(_DWORD *)(a1 + 40) = v12 < 0.0;
  v19 = (int8x16_t)vmulq_f32(v11, v9);
  result = vadd_f32(vpadd_f32(*(float32x2_t *)v19.i8, *(float32x2_t *)v19.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL));
  *(_DWORD *)(a1 + 44) = result.i32[0];
  return result;
}

void btSingleSweepCallback::~btSingleSweepCallback(btSingleSweepCallback *this)
{
  JUMPOUT(0x1DF0D41C0);
}

BOOL btSingleSweepCallback::process(float32x4_t *a1, uint64_t *a2)
{
  float *v3;
  float v4;
  uint64_t v5;
  const btConvexShape *v6;
  uint64_t v7;
  float *v8;
  float v9;
  _QWORD v11[5];

  v3 = (float *)a1[12].i64[1];
  v4 = v3[2];
  if (v4 != 0.0)
  {
    v5 = *a2;
    if ((*(unsigned int (**)(float *, _QWORD))(*(_QWORD *)v3 + 16))(v3, *(_QWORD *)(*a2 + 200)))
    {
      v6 = (const btConvexShape *)a1[13].i64[1];
      v7 = *(_QWORD *)(v5 + 208);
      v8 = (float *)a1[12].i64[1];
      v9 = a1[13].f32[0];
      v11[0] = 0;
      v11[1] = v7;
      v11[2] = v5;
      v11[3] = v5 + 16;
      v11[4] = -1;
      btCollisionWorld::objectQuerySingleInternal(v6, (uint64_t)&a1[3], a1 + 7, v11, v8, v9);
    }
  }
  return v4 != 0.0;
}

void btSingleContactCallback::~btSingleContactCallback(btSingleContactCallback *this)
{
  JUMPOUT(0x1DF0D41C0);
}

uint64_t btSingleContactCallback::process(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[7];
  _QWORD v13[5];
  _QWORD v14[5];

  v2 = *a2;
  if (*a2 != a1[1])
  {
    if ((*(unsigned int (**)(_QWORD, _QWORD))(*(_QWORD *)a1[3] + 16))(a1[3], *(_QWORD *)(v2 + 200)))
    {
      v4 = a1[1];
      v5 = a1[2];
      v6 = *(_QWORD *)(v4 + 208);
      v14[0] = 0;
      v14[1] = v6;
      v14[2] = v4;
      v14[3] = v4 + 16;
      v14[4] = -1;
      v7 = *(_QWORD *)(v2 + 208);
      v13[0] = 0;
      v13[1] = v7;
      v13[2] = v2;
      v13[3] = v2 + 16;
      v13[4] = -1;
      v8 = (*(uint64_t (**)(_QWORD, _QWORD *, _QWORD *, _QWORD))(**(_QWORD **)(v5 + 40) + 16))(*(_QWORD *)(v5 + 40), v14, v13, 0);
      if (v8)
      {
        v9 = v8;
        v10 = a1[3];
        btManifoldResult::btManifoldResult(v12, (uint64_t)v14, (uint64_t)v13);
        v12[0] = &off_1EA597380;
        v12[6] = v10;
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, uint64_t, _QWORD *))(*(_QWORD *)v9 + 16))(v9, v14, v13, a1[2] + 48, v12);
        (**(void (***)(uint64_t))v9)(v9);
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1[2] + 40) + 120))(*(_QWORD *)(a1[2] + 40), v9);
      }
    }
  }
  return 1;
}

void btBridgedManifoldResult::~btBridgedManifoldResult(btBridgedManifoldResult *this)
{
  JUMPOUT(0x1DF0D41C0);
}

uint64_t btManifoldResult::setShapeIdentifiersA(uint64_t this, int a2, int a3)
{
  *(_DWORD *)(this + 32) = a2;
  *(_DWORD *)(this + 40) = a3;
  return this;
}

uint64_t btManifoldResult::setShapeIdentifiersB(uint64_t this, int a2, int a3)
{
  *(_DWORD *)(this + 36) = a2;
  *(_DWORD *)(this + 44) = a3;
  return this;
}

uint64_t btBridgedManifoldResult::addContactPoint(btBridgedManifoldResult *this, float32x4_t *a2, float32x4_t *a3, float a4)
{
  uint64_t v4;
  uint64_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  uint64_t v10;
  int8x16_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  float32x4_t v21;
  int32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  __int128 v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  float32x4_t v31;
  float32x4_t v32;
  int32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  uint64_t v39;
  int8x16_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  __int128 v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  _OWORD v55[5];
  float v56;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  char v64;
  __int128 v65;
  __int128 v66;

  v4 = *(_QWORD *)(*((_QWORD *)this + 1) + 784);
  v5 = *(_QWORD *)(*((_QWORD *)this + 2) + 16);
  v6 = *a2;
  v7 = vmulq_n_f32(*a2, a4);
  v7.i32[3] = 0;
  v8 = *a3;
  v9 = vaddq_f32(*a3, v7);
  if (v4 == v5)
  {
    v30 = *(int8x16_t *)(v4 + 48);
    v31 = vsubq_f32(v9, *(float32x4_t *)(v4 + 64));
    v32 = *(float32x4_t *)(v4 + 16);
    v33 = *(int32x4_t *)(v4 + 32);
    v34 = (float32x4_t)vtrn1q_s32((int32x4_t)v32, v33);
    v35.i64[0] = vextq_s8((int8x16_t)v34, (int8x16_t)v34, 8uLL).u64[0];
    v35.i64[1] = vextq_s8(v30, v30, 8uLL).u64[0];
    v36 = (int8x16_t)vmulq_f32(v35, v31);
    v31.i32[3] = 0;
    *(int32x2_t *)v32.f32 = vzip2_s32(*(int32x2_t *)v32.f32, *(int32x2_t *)v33.i8);
    v34.i64[1] = v30.u32[0];
    *(int32x2_t *)&v32.u32[2] = vzip2_s32(*(int32x2_t *)v30.i8, 0);
    v37 = (int8x16_t)vmulq_f32(v34, v31);
    v38 = (int8x16_t)vmulq_f32(v32, v31);
    v36.i32[3] = 0;
    *(float32x2_t *)v33.i8 = vpadd_f32(vpadd_f32(*(float32x2_t *)v36.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v36, v36, 8uLL)), 0);
    v39 = *(_QWORD *)(*((_QWORD *)this + 3) + 16);
    v40 = *(int8x16_t *)(v39 + 48);
    v41 = vsubq_f32(v8, *(float32x4_t *)(v39 + 64));
    v42 = *(float32x4_t *)(v39 + 16);
    v43 = *(float32x4_t *)(v39 + 32);
    v44 = (float32x4_t)vtrn1q_s32((int32x4_t)v42, (int32x4_t)v43);
    *(int32x2_t *)v42.f32 = vzip2_s32(*(int32x2_t *)v42.f32, *(int32x2_t *)v43.f32);
    v43.i64[0] = vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL).u64[0];
    *(float32x2_t *)&v26 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v37, v37, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v38, v38, 8uLL)), vpadd_f32(*(float32x2_t *)v37.i8, *(float32x2_t *)v38.i8));
    *((_QWORD *)&v26 + 1) = v33.i64[0];
    v41.i32[3] = 0;
    v44.i64[1] = v40.u32[0];
    *(int32x2_t *)&v42.u32[2] = vzip2_s32(*(int32x2_t *)v40.i8, 0);
    v43.i64[1] = vextq_s8(v40, v40, 8uLL).u32[0];
    v27 = (int8x16_t)vmulq_f32(v44, v41);
    v28 = (int8x16_t)vmulq_f32(v42, v41);
    v29 = (int8x16_t)vmulq_f32(v43, v41);
  }
  else
  {
    v10 = *(_QWORD *)(*((_QWORD *)this + 3) + 16);
    v11 = *(int8x16_t *)(v10 + 48);
    v12 = vsubq_f32(v9, *(float32x4_t *)(v10 + 64));
    v13 = *(float32x4_t *)(v10 + 16);
    v14 = *(float32x4_t *)(v10 + 32);
    v15 = (float32x4_t)vtrn1q_s32((int32x4_t)v13, (int32x4_t)v14);
    *(int32x2_t *)v13.f32 = vzip2_s32(*(int32x2_t *)v13.f32, *(int32x2_t *)v14.f32);
    v14.i64[0] = vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL).u64[0];
    v16 = v12;
    v16.i32[3] = 0;
    v15.i64[1] = v11.u32[0];
    *(int32x2_t *)&v13.u32[2] = vzip2_s32(*(int32x2_t *)v11.i8, 0);
    v14.i64[1] = vextq_s8(v11, v11, 8uLL).u64[0];
    v17 = (int8x16_t)vmulq_f32(v14, v12);
    v18 = (int8x16_t)vmulq_f32(v15, v16);
    v19 = (int8x16_t)vmulq_f32(v13, v16);
    v17.i32[3] = 0;
    *(float32x2_t *)v15.f32 = vpadd_f32(vpadd_f32(*(float32x2_t *)v17.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL)), 0);
    v20 = *(int8x16_t *)(v5 + 48);
    v21 = vsubq_f32(v8, *(float32x4_t *)(v5 + 64));
    v22 = *(int32x4_t *)(v5 + 16);
    v23 = *(float32x4_t *)(v5 + 32);
    v24 = (float32x4_t)vtrn1q_s32(v22, (int32x4_t)v23);
    *(int32x2_t *)v23.f32 = vzip2_s32(*(int32x2_t *)v22.i8, *(int32x2_t *)v23.f32);
    v25.i64[0] = vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL).u64[0];
    *(float32x2_t *)&v26 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL)), vpadd_f32(*(float32x2_t *)v18.i8, *(float32x2_t *)v19.i8));
    *((_QWORD *)&v26 + 1) = v15.i64[0];
    v21.i32[3] = 0;
    v24.i64[1] = v20.u32[0];
    *(int32x2_t *)&v23.u32[2] = vzip2_s32(*(int32x2_t *)v20.i8, 0);
    v25.i64[1] = vextq_s8(v20, v20, 8uLL).u32[0];
    v27 = (int8x16_t)vmulq_f32(v24, v21);
    v28 = (int8x16_t)vmulq_f32(v23, v21);
    v29 = (int8x16_t)vmulq_f32(v25, v21);
  }
  v29.i32[3] = 0;
  *(float32x2_t *)&v45 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL)), vpadd_f32(*(float32x2_t *)v27.i8, *(float32x2_t *)v28.i8));
  *((float32x2_t *)&v45 + 1) = vpadd_f32(vpadd_f32(*(float32x2_t *)v29.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL)), 0);
  v55[0] = v26;
  v55[1] = v45;
  v55[3] = v9;
  v55[4] = v6;
  v56 = a4;
  v57 = 0;
  v58 = 0;
  v63 = 0;
  v64 = 0;
  v65 = 0u;
  v66 = 0u;
  v55[2] = v8;
  if (v4 == v5)
  {
    v46 = (char *)this + 32;
    v47 = (char *)this + 36;
    v48 = (char *)this + 40;
    v49 = (char *)this + 44;
  }
  else
  {
    v46 = (char *)this + 36;
    v47 = (char *)this + 32;
    v48 = (char *)this + 44;
    v49 = (char *)this + 40;
  }
  v50 = *(_DWORD *)v49;
  v51 = *(_DWORD *)v48;
  v52 = *(_DWORD *)v47;
  v59 = *(_DWORD *)v46;
  v60 = v52;
  v61 = v51;
  v62 = v50;
  if (v4 == v5)
    v53 = 16;
  else
    v53 = 24;
  return (*(uint64_t (**)(_QWORD, _OWORD *, _QWORD))(**((_QWORD **)this + 6) + 24))(*((_QWORD *)this + 6), v55, *(_QWORD *)((char *)this + v53));
}

uint64_t DebugDrawcallback::processTriangle(float32x4_t *this, float32x4_t *a2)
{
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  int8x16_t v7;
  float32x4_t v8;
  float32x4_t v9;
  int8x16_t v10;
  float32x4_t v11;
  float32x4_t v12;
  int8x16_t v13;
  int8x16_t v14;
  float32x4_t v15;
  float32x4_t v16;
  int8x16_t v17;
  int8x16_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int8x8_t v21;
  float32x4_t v22;
  int8x8_t v23;
  float32x4_t v24;
  float32x4_t v25;
  int8x16_t v26;
  int8x16_t v27;
  uint64_t v28;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  __int128 v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;

  v3 = this[3];
  v4 = this[4];
  v5 = a2[1];
  v6 = vmulq_f32(v3, *a2);
  v7 = (int8x16_t)vmulq_f32(*a2, v4);
  v8 = this[5];
  v9 = this[6];
  v10 = (int8x16_t)vmulq_f32(*a2, v8);
  v10.i32[3] = 0;
  *(float32x2_t *)v6.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v6.f32, *(float32x2_t *)v7.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v6, (int8x16_t)v6, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)));
  *(float32x2_t *)&v6.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v10.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL)), 0);
  v11 = vaddq_f32(v6, v9);
  v12 = vmulq_f32(v3, v5);
  v13 = (int8x16_t)vmulq_f32(v4, v5);
  v14 = (int8x16_t)vmulq_f32(v8, v5);
  v14.i32[3] = 0;
  *(float32x2_t *)v12.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v12.f32, *(float32x2_t *)v13.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL)));
  *(float32x2_t *)&v12.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v14.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)), 0);
  v36 = vaddq_f32(v9, v12);
  v37 = v11;
  v15 = a2[2];
  v16 = vmulq_f32(v3, v15);
  v17 = (int8x16_t)vmulq_f32(v4, v15);
  v18 = (int8x16_t)vmulq_f32(v8, v15);
  v18.i32[3] = 0;
  *(float32x2_t *)v16.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v16.f32, *(float32x2_t *)v17.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL)));
  *(float32x2_t *)&v16.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v18.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL)), 0);
  v35 = vaddq_f32(v9, v16);
  v19 = vmulq_f32(vaddq_f32(vaddq_f32(v11, v36), v35), (float32x4_t)vdupq_n_s32(0x3EAAAAABu));
  v19.i32[3] = 0;
  v30 = v19;
  v31 = v11;
  v34 = v19;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)this[1].i64[0] + 96))(this[1].i64[0]) & 0x4000) != 0)
  {
    v20 = vsubq_f32(v36, v31);
    v21 = (int8x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL).u64[0];
    v20.i32[3] = 0;
    v22 = vsubq_f32(v35, v31);
    v23 = (int8x8_t)vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL).u64[0];
    v22.i32[3] = 0;
    *(int8x8_t *)v24.f32 = vext_s8(*(int8x8_t *)v20.f32, v21, 4uLL);
    v24.i64[1] = v20.i64[0];
    *(int8x8_t *)v25.f32 = vext_s8(*(int8x8_t *)v22.f32, v23, 4uLL);
    v25.i64[1] = v22.i64[0];
    v26 = (int8x16_t)vsubq_f32(vmulq_f32(v25, v20), vmulq_f32(v24, v22));
    v24.i64[0] = vextq_s8(v26, v26, 4uLL).u64[0];
    v24.i64[1] = v26.u32[0];
    v27 = (int8x16_t)vmulq_f32(v24, v24);
    v28 = this[1].i64[0];
    v32 = vaddq_f32(vmulq_n_f32(v24, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v27.i8, *(float32x2_t *)v27.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL)).f32[0])), v30);
    v33 = xmmword_1DD009440;
    (*(void (**)(uint64_t, float32x4_t *, float32x4_t *, __int128 *))(*(_QWORD *)v28 + 16))(v28, &v34, &v32, &v33);
  }
  (*(void (**)(uint64_t, float32x4_t *, float32x4_t *, float32x4_t *))(*(_QWORD *)this[1].i64[0] + 16))(this[1].i64[0], &v37, &v36, this + 2);
  (*(void (**)(uint64_t, float32x4_t *, float32x4_t *, float32x4_t *))(*(_QWORD *)this[1].i64[0] + 16))(this[1].i64[0], &v36, &v35, this + 2);
  return (*(uint64_t (**)(uint64_t, float32x4_t *, float32x4_t *, float32x4_t *))(*(_QWORD *)this[1].i64[0]
                                                                                         + 16))(this[1].i64[0], &v35, &v37, this + 2);
}

uint64_t DebugDrawcallback::internalProcessTriangleIndex(DebugDrawcallback *this, btVector3 *a2)
{
  return (*(uint64_t (**)(DebugDrawcallback *, btVector3 *))(*(_QWORD *)this + 16))(this, a2);
}

void `non-virtual thunk to'DebugDrawcallback::~DebugDrawcallback(DebugDrawcallback *this)
{
  char *v1;

  v1 = (char *)this - 8;
  C3DSceneSourcePerformConsistencyCheck(this);
  C3DSceneSourcePerformConsistencyCheck(v1);
}

{
  char *v1;

  v1 = (char *)this - 8;
  C3DSceneSourcePerformConsistencyCheck(this);
  C3DSceneSourcePerformConsistencyCheck(v1);
  JUMPOUT(0x1DF0D41C0);
}

uint64_t `non-virtual thunk to'DebugDrawcallback::internalProcessTriangleIndex(DebugDrawcallback *this, btVector3 *a2)
{
  return (*(uint64_t (**)(char *, btVector3 *))(*((_QWORD *)this - 1) + 16))((char *)this - 8, a2);
}

uint64_t btHashMap<btHashPtr,btCollisionShape *>::findIndex(uint64_t a1, _DWORD *a2)
{
  uint64_t result;
  int v4;
  int v5;
  int v6;

  result = 0xFFFFFFFFLL;
  v4 = a2[1] + *a2 + ~((a2[1] + *a2) << 15);
  v5 = (9 * (v4 ^ (v4 >> 10))) ^ ((9 * (v4 ^ (v4 >> 10))) >> 6);
  v6 = ((v5 + ~(v5 << 11)) ^ ((v5 + ~(v5 << 11)) >> 16)) & (*(_DWORD *)(a1 + 72) - 1);
  if (v6 < *(_DWORD *)(a1 + 4))
  {
    result = *(unsigned int *)(*(_QWORD *)(a1 + 16) + 4 * v6);
    if ((_DWORD)result == -1)
    {
      return 0xFFFFFFFFLL;
    }
    else
    {
      while (*(_QWORD *)a2 != *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * (int)result))
      {
        result = *(unsigned int *)(*(_QWORD *)(a1 + 48) + 4 * (int)result);
        if ((_DWORD)result == -1)
          return 0xFFFFFFFFLL;
      }
    }
  }
  return result;
}

void btHashMap<btHashPtr,btCollisionShape *>::growTables(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  _DWORD *v7;
  int *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  _DWORD *v14;
  int *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  int v21;
  int v22;
  int v23;

  v1 = *(unsigned int *)(a1 + 72);
  v2 = *(unsigned int *)(a1 + 4);
  if ((int)v2 >= (int)v1)
    return;
  if (*(_DWORD *)(a1 + 8) < (int)v1)
  {
    if ((_DWORD)v1)
    {
      v4 = btAlignedAllocInternal(4 * (int)v1, 16);
      LODWORD(v5) = *(_DWORD *)(a1 + 4);
    }
    else
    {
      v4 = 0;
      LODWORD(v5) = *(_DWORD *)(a1 + 4);
    }
    v6 = *(void ***)(a1 + 16);
    if ((int)v5 < 1)
    {
      if (!v6)
      {
LABEL_14:
        *(_BYTE *)(a1 + 24) = 1;
        *(_QWORD *)(a1 + 16) = v4;
        *(_DWORD *)(a1 + 8) = v1;
        goto LABEL_15;
      }
    }
    else
    {
      v5 = v5;
      v7 = (_DWORD *)v4;
      v8 = *(int **)(a1 + 16);
      do
      {
        v9 = *v8++;
        *v7++ = v9;
        --v5;
      }
      while (v5);
    }
    if (*(_BYTE *)(a1 + 24))
      btAlignedFreeInternal(v6);
    *(_QWORD *)(a1 + 16) = 0;
    goto LABEL_14;
  }
LABEL_15:
  bzero((void *)(*(_QWORD *)(a1 + 16) + 4 * (int)v2), 4 * (v1 + ~(_DWORD)v2) + 4);
  *(_DWORD *)(a1 + 4) = v1;
  v10 = *(_DWORD *)(a1 + 36);
  if (v10 < (int)v1)
  {
    if (*(_DWORD *)(a1 + 40) >= (int)v1)
    {
LABEL_28:
      bzero((void *)(*(_QWORD *)(a1 + 48) + 4 * v10), 4 * (v1 + ~v10) + 4);
      goto LABEL_29;
    }
    if ((_DWORD)v1)
      v11 = btAlignedAllocInternal(4 * (int)v1, 16);
    else
      v11 = 0;
    LODWORD(v12) = *(_DWORD *)(a1 + 36);
    v13 = *(void ***)(a1 + 48);
    if ((int)v12 < 1)
    {
      if (!v13)
      {
LABEL_27:
        *(_BYTE *)(a1 + 56) = 1;
        *(_QWORD *)(a1 + 48) = v11;
        *(_DWORD *)(a1 + 40) = v1;
        goto LABEL_28;
      }
    }
    else
    {
      v12 = v12;
      v14 = (_DWORD *)v11;
      v15 = *(int **)(a1 + 48);
      do
      {
        v16 = *v15++;
        *v14++ = v16;
        --v12;
      }
      while (v12);
    }
    if (*(_BYTE *)(a1 + 56))
      btAlignedFreeInternal(v13);
    goto LABEL_27;
  }
LABEL_29:
  *(_DWORD *)(a1 + 36) = v1;
  if ((int)v1 >= 1)
  {
    memset(*(void **)(a1 + 16), 255, 4 * v1);
    memset(*(void **)(a1 + 48), 255, 4 * v1);
  }
  if ((int)v2 >= 1)
  {
    v17 = 0;
    v18 = *(_QWORD *)(a1 + 16);
    v19 = *(_QWORD *)(a1 + 48);
    v20 = (_DWORD *)(*(_QWORD *)(a1 + 112) + 4);
    do
    {
      v21 = *v20 + *(v20 - 1) + ~((*v20 + *(v20 - 1)) << 15);
      v22 = (9 * (v21 ^ (v21 >> 10))) ^ ((9 * (v21 ^ (v21 >> 10))) >> 6);
      v23 = ((v22 + ~(v22 << 11)) ^ ((v22 + ~(v22 << 11)) >> 16)) & (*(_DWORD *)(a1 + 72) - 1);
      *(_DWORD *)(v19 + 4 * v17) = *(_DWORD *)(v18 + 4 * v23);
      *(_DWORD *)(v18 + 4 * v23) = v17++;
      v20 += 2;
    }
    while (v2 != v17);
  }
}

_QWORD *btCompoundCollisionAlgorithm::btCompoundCollisionAlgorithm(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD *v10;
  uint64_t v11;

  v10 = btActivatingCollisionAlgorithm::btActivatingCollisionAlgorithm(a1, a2);
  *v10 = &off_1EA597D68;
  *((_BYTE *)v10 + 40) = 1;
  v10[4] = 0;
  *((_DWORD *)v10 + 5) = 0;
  *((_DWORD *)v10 + 6) = 0;
  *((_BYTE *)v10 + 48) = a5;
  v10[7] = a2[1];
  *((_BYTE *)v10 + 64) = 0;
  if (a5)
    v11 = a4;
  else
    v11 = a3;
  *((_DWORD *)v10 + 17) = *(_DWORD *)(*(_QWORD *)(v11 + 8) + 104);
  btCompoundCollisionAlgorithm::preallocateChildAlgorithms((uint64_t)v10, a3, a4);
  return a1;
}

void btCompoundCollisionAlgorithm::preallocateChildAlgorithms(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];
  __int128 v18;
  int v19;
  int v20;

  if (*(_BYTE *)(a1 + 48))
    v4 = a3;
  else
    v4 = a2;
  if (*(_BYTE *)(a1 + 48))
    v5 = a2;
  else
    v5 = a3;
  v6 = *(_QWORD *)(v4 + 8);
  v7 = *(unsigned int *)(v6 + 28);
  v8 = *(_DWORD *)(a1 + 20);
  if (v8 < (int)v7)
  {
    v9 = v8;
    if (*(_DWORD *)(a1 + 24) < (int)v7)
    {
      if ((_DWORD)v7)
      {
        v10 = btAlignedAllocInternal(8 * (int)v7, 16);
        v8 = *(_DWORD *)(a1 + 20);
      }
      else
      {
        v10 = 0;
      }
      if (v8 >= 1)
      {
        v11 = 0;
        v12 = 8 * v8;
        do
        {
          *(_QWORD *)(v10 + v11) = *(_QWORD *)(*(_QWORD *)(a1 + 32) + v11);
          v11 += 8;
        }
        while (v12 != v11);
      }
      v13 = *(void ***)(a1 + 32);
      if (v13 && *(_BYTE *)(a1 + 40))
        btAlignedFreeInternal(v13);
      *(_BYTE *)(a1 + 40) = 1;
      *(_QWORD *)(a1 + 32) = v10;
      *(_DWORD *)(a1 + 24) = v7;
    }
    do
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v9++) = 0;
    while ((int)v7 != v9);
  }
  *(_DWORD *)(a1 + 20) = v7;
  if ((int)v7 >= 1)
  {
    v14 = 0;
    v15 = 64;
    do
    {
      if (*(_QWORD *)(v6 + 96))
      {
        *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v14) = 0;
      }
      else
      {
        v16 = *(_QWORD *)(*(_QWORD *)(v6 + 40) + v15);
        v17[0] = v4;
        v17[1] = v16;
        v18 = *(_OWORD *)(v4 + 16);
        v19 = -1;
        v20 = v14;
        *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v14) = (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), v17, v5, *(_QWORD *)(a1 + 56));
      }
      ++v14;
      v15 += 96;
    }
    while (v7 != v14);
  }
}

uint64_t btCompoundCollisionAlgorithm::removeChildAlgorithms(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(unsigned int *)(this + 20);
  if ((int)v1 >= 1)
  {
    v2 = this;
    v3 = 0;
    v4 = 8 * v1;
    do
    {
      this = *(_QWORD *)(*(_QWORD *)(v2 + 32) + v3);
      if (this)
      {
        (**(void (***)(uint64_t))this)(this);
        this = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v2 + 8) + 120))(*(_QWORD *)(v2 + 8), *(_QWORD *)(*(_QWORD *)(v2 + 32) + v3));
      }
      v3 += 8;
    }
    while (v4 != v3);
  }
  return this;
}

void btCompoundCollisionAlgorithm::~btCompoundCollisionAlgorithm(btCompoundCollisionAlgorithm *this)
{
  char *v2;

  *(_QWORD *)this = &off_1EA597D68;
  v2 = (char *)this + 16;
  btCompoundCollisionAlgorithm::removeChildAlgorithms((uint64_t)this);
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)v2);
  C3DSceneSourcePerformConsistencyCheck(this);
}

{
  btCompoundCollisionAlgorithm::~btCompoundCollisionAlgorithm(this);
  JUMPOUT(0x1DF0D41C0);
}

void btCompoundCollisionAlgorithm::processCollision(btCompoundCollisionAlgorithm *this, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  float32x4_t v28;
  float32x4_t v29;
  int8x16_t v30;
  float32x4_t v31;
  float32x4_t v32;
  int32x2_t v33;
  unsigned __int32 v34;
  float32x4_t *v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  float32x2_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  float32x4_t *v59;
  uint64_t v60;
  float32x4_t *v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  int8x16_t v69;
  int8x16_t v70;
  float32x4_t v71;
  __n128 v72;
  BOOL v73;
  float v74[4];
  __int128 v75[2];
  float32x4_t v76;
  void *v77[2];
  float32x4_t v78;
  int8x16_t v79;
  __int128 v80;
  __int128 v81;
  _QWORD v82[9];

  if (*((_BYTE *)this + 48))
    v8 = a3;
  else
    v8 = a2;
  if (*((_BYTE *)this + 48))
    v9 = a2;
  else
    v9 = a3;
  v10 = *(_QWORD *)(v8 + 8);
  if (*(_DWORD *)(v10 + 104) != *((_DWORD *)this + 17))
  {
    btCompoundCollisionAlgorithm::removeChildAlgorithms((uint64_t)this);
    btCompoundCollisionAlgorithm::preallocateChildAlgorithms((uint64_t)this, a2, a3);
  }
  v13 = *(void ***)(v10 + 96);
  v14 = *((_QWORD *)this + 1);
  v15 = *((_QWORD *)this + 4);
  v16 = *((_QWORD *)this + 7);
  v82[0] = &off_1EA597310;
  v82[1] = v8;
  v82[2] = v9;
  v82[3] = v14;
  v82[4] = a4;
  v82[5] = a5;
  v82[6] = v15;
  v82[7] = v16;
  LOBYTE(v77[1]) = 1;
  v77[0] = 0;
  *(uint64_t *)((char *)v76.i64 + 4) = 0;
  v17 = *((_DWORD *)this + 5);
  if (v17 >= 1)
  {
    v18 = 0;
    while (1)
    {
      v19 = *(_QWORD *)(*((_QWORD *)this + 4) + 8 * v18);
      if (v19)
        break;
LABEL_31:
      if (++v18 >= v17)
      {
        if (v77[0])
          v26 = LOBYTE(v77[1]) == 0;
        else
          v26 = 1;
        if (!v26)
          btAlignedFreeInternal((void **)v77[0]);
        goto LABEL_37;
      }
    }
    (*(void (**)(uint64_t, float32x4_t *))(*(_QWORD *)v19 + 32))(v19, &v76);
    v20 = v76.i32[1];
    if (v76.i32[1] < 1)
      goto LABEL_22;
    v21 = 0;
    do
    {
      v22 = *((_QWORD *)v77[0] + v21);
      if (*(_DWORD *)(v22 + 800))
      {
        a5[1] = v22;
        v23 = *(_QWORD *)(v22 + 784);
        v24 = *(_QWORD *)(a5[2] + 16);
        if (v23 == v24)
          v24 = *(_QWORD *)(a5[3] + 16);
        else
          v23 = *(_QWORD *)(a5[3] + 16);
        btPersistentManifold::refreshContactPoints((btPersistentManifold *)v22, (const btTransform *)(v23 + 16), (const btTransform *)(v24 + 16));
        a5[1] = 0;
        v20 = v76.i32[1];
      }
      ++v21;
    }
    while (v21 < v20);
    if (v20 <= 0)
    {
LABEL_22:
      if (v20 && v76.i32[2] < 0)
      {
        if (v77[0] && LOBYTE(v77[1]))
          btAlignedFreeInternal((void **)v77[0]);
        LOBYTE(v77[1]) = 1;
        v77[0] = 0;
        v76.i32[2] = 0;
        goto LABEL_28;
      }
      if (v20 < 0)
      {
LABEL_28:
        v25 = v20;
        do
          *((_QWORD *)v77[0] + v25++) = 0;
        while ((_DWORD)v25);
      }
    }
    v76.i32[1] = 0;
    v17 = *((_DWORD *)this + 5);
    goto LABEL_31;
  }
LABEL_37:
  if (v13)
  {
    v27 = *(_QWORD *)(v8 + 24);
    v28 = *(float32x4_t *)v27;
    v29 = *(float32x4_t *)(v27 + 16);
    v31 = *(float32x4_t *)(v27 + 32);
    v30 = *(int8x16_t *)(v27 + 48);
    v32 = (float32x4_t)vtrn1q_s32(*(int32x4_t *)v27, (int32x4_t)v29);
    v33 = vzip2_s32(*(int32x2_t *)v31.f32, 0);
    v34 = vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL).u32[0];
    v35 = *(float32x4_t **)(v9 + 24);
    v36 = *v35;
    v37 = v35[1];
    v36.i32[3] = 0;
    v37.i32[3] = 0;
    v38 = v35[2];
    v39 = v35[3];
    v38.i32[3] = 0;
    v40 = vmlaq_laneq_f32(vmulq_laneq_f32(v36, v28, 2), v37, v29, 2);
    v41 = vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v36, *(float32x2_t *)v28.f32, 1), v37, *(float32x2_t *)v29.f32, 1), v38, *(float32x2_t *)v31.f32, 1);
    v42 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v36, v28.f32[0]), v37, v29.f32[0]), v38, v31.f32[0]);
    v43 = vmlaq_laneq_f32(v40, v38, v31, 2);
    v37.i64[0] = vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL).u64[0];
    v32.i64[1] = v31.u32[0];
    v31.i64[0] = 0x8000000080000000;
    v31.i64[1] = 0x8000000080000000;
    v44 = (float32x4_t)veorq_s8(v30, (int8x16_t)v31);
    v45 = (int8x16_t)vmulq_f32(v32, v44);
    *(int32x2_t *)v28.f32 = vzip2_s32(*(int32x2_t *)v28.f32, *(int32x2_t *)v29.f32);
    *(int32x2_t *)&v28.u32[2] = v33;
    v46 = (int8x16_t)vmulq_f32(v28, v44);
    v37.i64[1] = v34;
    v47 = (int8x16_t)vmulq_f32(v37, v44);
    v47.i32[3] = 0;
    v48 = (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v45, v45, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v46, v46, 8uLL));
    *(float32x2_t *)v46.i8 = vpadd_f32(*(float32x2_t *)v45.i8, *(float32x2_t *)v46.i8);
    v49 = (int8x16_t)vmulq_f32(v32, v39);
    v50 = (int8x16_t)vmulq_f32(v28, v39);
    v51 = (int8x16_t)vmulq_f32(v37, v39);
    v51.i32[3] = 0;
    *(float32x2_t *)v50.i8 = vadd_f32(vadd_f32(*(float32x2_t *)v46.i8, v48), vadd_f32(vpadd_f32(*(float32x2_t *)v49.i8, *(float32x2_t *)v50.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v49, v49, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v50, v50, 8uLL))));
    v50.u64[1] = (unint64_t)vadd_f32(vpadd_f32(vpadd_f32(*(float32x2_t *)v47.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v47, v47, 8uLL)), 0), vpadd_f32(vpadd_f32(*(float32x2_t *)v51.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v51, v51, 8uLL)), 0));
    v76 = v42;
    *(float32x4_t *)v77 = v41;
    v78 = v43;
    v79 = v50;
    (*(void (**)(_QWORD, float32x4_t *, __int128 *, __int128 *))(**(_QWORD **)(v9 + 8) + 16))(*(_QWORD *)(v9 + 8), &v76, &v81, &v80);
    v75[0] = v81;
    v75[1] = v80;
    btDbvt::collideTV((uint64_t)v13, *v13, v75, (uint64_t)v82);
  }
  else
  {
    v52 = *((unsigned int *)this + 5);
    if ((int)v52 <= 0)
      return;
    v53 = 0;
    v54 = 64;
    do
    {
      btCompoundLeafCallback::ProcessChildShape((btCompoundLeafCallback *)v82, *(const btCollisionShape **)(*(_QWORD *)(v10 + 40) + v54), v53++);
      v54 += 96;
    }
    while (v52 != v53);
  }
  v55 = *((unsigned int *)this + 5);
  if ((int)v55 >= 1)
  {
    v56 = 0;
    v57 = 8 * v55;
    v58 = 32;
    do
    {
      if (*(_QWORD *)(*((_QWORD *)this + 4) + v56))
      {
        v59 = (float32x4_t *)(*(_QWORD *)(v10 + 40) + v58);
        v60 = v59[2].i64[0];
        v61 = *(float32x4_t **)(v8 + 24);
        v62 = v61[1];
        v63 = v59[-2];
        v64 = v59[-1];
        v63.i32[3] = 0;
        v64.i32[3] = 0;
        v65 = v61[2];
        v66 = *v59;
        v67 = v59[1];
        v66.i32[3] = 0;
        v68 = vmulq_f32(*v61, v67);
        v69 = (int8x16_t)vmulq_f32(v62, v67);
        v70 = (int8x16_t)vmulq_f32(v65, v67);
        v70.i32[3] = 0;
        *(float32x2_t *)v68.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v68.f32, *(float32x2_t *)v69.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v68, (int8x16_t)v68, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v69, v69, 8uLL)));
        *(float32x2_t *)&v68.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v70.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v70, v70, 8uLL)), 0);
        v71 = vaddq_f32(v61[3], v68);
        v76 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v63, COERCE_FLOAT(*v61)), v64, *(float32x2_t *)v61->f32, 1), v66, *v61, 2);
        *(float32x4_t *)v77 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v63, v62.f32[0]), v64, *(float32x2_t *)v62.f32, 1), v66, v62, 2);
        v78 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v63, v65.f32[0]), v64, *(float32x2_t *)v65.f32, 1), v66, v65, 2);
        v79 = (int8x16_t)v71;
        (*(void (**)(uint64_t, float32x4_t *, __int128 *, __int128 *))(*(_QWORD *)v60 + 16))(v60, &v76, v75, &v81);
        (*(void (**)(_QWORD, _QWORD, __int128 *, float *))(**(_QWORD **)(v9 + 8) + 16))(*(_QWORD *)(v9 + 8), *(_QWORD *)(v9 + 24), &v80, v74);
        v73 = 0;
        if (*(float *)v75 <= v74[0])
          v73 = *(float *)&v81 >= *(float *)&v80;
        if (*((float *)v75 + 2) > v74[2] || *((float *)&v81 + 2) < *((float *)&v80 + 2))
          v73 = 0;
        v72.n128_u32[0] = DWORD1(v75[0]);
        if (*((float *)v75 + 1) > v74[1])
          goto LABEL_54;
        v72.n128_u32[0] = DWORD1(v81);
        if (*((float *)&v81 + 1) < *((float *)&v80 + 1))
          v73 = 0;
        if (!v73)
        {
LABEL_54:
          (***(void (****)(_QWORD, __n128))(*((_QWORD *)this + 4) + v56))(*(_QWORD *)(*((_QWORD *)this + 4) + v56), v72);
          (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 1) + 120))(*((_QWORD *)this + 1), *(_QWORD *)(*((_QWORD *)this + 4) + v56));
          *(_QWORD *)(*((_QWORD *)this + 4) + v56) = 0;
        }
      }
      v56 += 8;
      v58 += 96;
    }
    while (v57 != v56);
  }
}

uint64_t btCompoundLeafCallback::ProcessChildShape(btCompoundLeafCallback *this, const btCollisionShape *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  float32x4_t *v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t *v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  int8x16_t v19;
  int8x16_t v20;
  uint64_t result;
  __n128 v22;
  BOOL v23;
  char v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[4];
  int v34;
  int v35;
  float v36[4];
  float v37[4];
  float v38;
  float v39;
  float v40;
  float v41[4];
  _OWORD v42[4];

  v6 = *((_QWORD *)this + 1);
  v7 = *(_QWORD *)(v6 + 8);
  v8 = *(float32x4_t **)(v6 + 24);
  v9 = *v8;
  v10 = v8[1];
  v11 = v8[2];
  v12 = v8[3];
  v13 = (float32x4_t *)(*(_QWORD *)(v7 + 40) + 96 * a3);
  v14 = *v13;
  v15 = v13[1];
  v14.i32[3] = 0;
  v15.i32[3] = 0;
  v16 = v13[2];
  v17 = v13[3];
  v16.i32[3] = 0;
  v18 = vmulq_f32(v9, v17);
  v19 = (int8x16_t)vmulq_f32(v10, v17);
  v20 = (int8x16_t)vmulq_f32(v11, v17);
  v20.i32[3] = 0;
  *(float32x2_t *)v18.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v18.f32, *(float32x2_t *)v19.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL)));
  *(float32x2_t *)&v18.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v20.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL)), 0);
  v42[0] = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v14, v9.f32[0]), v15, *(float32x2_t *)v9.f32, 1), v16, v9, 2);
  v42[1] = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v14, v10.f32[0]), v15, *(float32x2_t *)v10.f32, 1), v16, v10, 2);
  v42[2] = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v14, v11.f32[0]), v15, *(float32x2_t *)v11.f32, 1), v16, v11, 2);
  v42[3] = vaddq_f32(v12, v18);
  (*((void (**)(const btCollisionShape *, _OWORD *, float *, float *))a2->var0 + 2))(a2, v42, v41, &v38);
  result = (*(uint64_t (**)(_QWORD, _QWORD, float *, float *))(**(_QWORD **)(*((_QWORD *)this + 2) + 8)
                                                                       + 16))(*(_QWORD *)(*((_QWORD *)this + 2) + 8), *(_QWORD *)(*((_QWORD *)this + 2) + 24), v37, v36);
  if (!gCompoundChildShapePairCallback
    || (result = gCompoundChildShapePairCallback(*(_QWORD *)(*((_QWORD *)this + 2) + 8), a2), (_DWORD)result))
  {
    v23 = v41[0] <= v36[0] && v38 >= v37[0];
    if (v41[2] > v36[2] || v40 < v37[2])
      v23 = 0;
    if (v41[1] <= v36[1])
    {
      v22.n128_f32[0] = v39;
      v24 = !v23;
      if (v39 < v37[1])
        v24 = 1;
      if ((v24 & 1) == 0)
      {
        v25 = *(_QWORD *)(*((_QWORD *)this + 1) + 16);
        v33[0] = *((_QWORD *)this + 1);
        v33[1] = a2;
        v33[2] = v25;
        v33[3] = v42;
        v34 = -1;
        v35 = a3;
        if (!*(_QWORD *)(*((_QWORD *)this + 6) + 8 * a3))
        {
          *(_QWORD *)(*((_QWORD *)this + 6) + 8 * a3) = (*(uint64_t (**)(_QWORD, _QWORD *, _QWORD, _QWORD, __n128))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3), v33, *((_QWORD *)this + 2), *((_QWORD *)this + 7), v22);
          v25 = *(_QWORD *)(*((_QWORD *)this + 1) + 16);
        }
        v26 = (_QWORD *)*((_QWORD *)this + 5);
        v27 = v26 + 2;
        v28 = v26[2];
        if (*(_QWORD *)(v28 + 16) == v25)
        {
          v29 = 2;
        }
        else
        {
          v27 = v26 + 3;
          v28 = v26[3];
          v29 = 3;
        }
        *v27 = v33;
        (*(void (**)(__n128))(*v26 + 8 * v29))(v22);
        v30 = *(_QWORD *)(*((_QWORD *)this + 6) + 8 * a3);
        result = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v30 + 16))(v30, v33, *((_QWORD *)this + 2), *((_QWORD *)this + 4), *((_QWORD *)this + 5));
        v31 = *((_QWORD *)this + 5);
        v32 = 24;
        if (*(_QWORD *)(*(_QWORD *)(v31 + 16) + 16) == *(_QWORD *)(*((_QWORD *)this + 1) + 16))
          v32 = 16;
        *(_QWORD *)(v31 + v32) = v28;
      }
    }
  }
  return result;
}

float btCompoundCollisionAlgorithm::calculateTimeOfImpact(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float32x4_t *v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  int8x16_t v25;
  int8x16_t v26;
  float v27;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;

  if (*(_BYTE *)(a1 + 48))
    v5 = a3;
  else
    v5 = a2;
  if (*(_BYTE *)(a1 + 48))
    v6 = a2;
  else
    v6 = a3;
  v7 = *(unsigned int *)(a1 + 20);
  if ((int)v7 < 1)
    return 1.0;
  v11 = 0;
  v12 = *(_QWORD *)(v5 + 208);
  v13 = *(int32x4_t *)(v5 + 16);
  v14 = *(int32x4_t *)(v5 + 32);
  v15 = *(int32x4_t *)(v5 + 48);
  v34 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.i8, 1);
  v35 = *(float32x4_t *)(v5 + 64);
  v32 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.i8, 1);
  v33 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.i8, 1);
  v38 = (float32x4_t)v13;
  v36 = (float32x4_t)v15;
  v37 = (float32x4_t)v14;
  v30 = (float32x4_t)vdupq_laneq_s32(v14, 2);
  v31 = (float32x4_t)vdupq_laneq_s32(v13, 2);
  v16 = 8 * v7;
  v17 = 1.0;
  v18 = 32;
  v29 = (float32x4_t)vdupq_laneq_s32(v15, 2);
  do
  {
    v19 = (float32x4_t *)(*(_QWORD *)(v12 + 40) + v18);
    v20 = v19[-2];
    v21 = v19[-1];
    v20.i32[3] = 0;
    v21.i32[3] = 0;
    v22 = *v19;
    v23 = v19[1];
    v22.i32[3] = 0;
    v24 = vmulq_f32(v38, v23);
    v25 = (int8x16_t)vmulq_f32(v37, v23);
    v26 = (int8x16_t)vmulq_f32(v36, v23);
    v26.i32[3] = 0;
    *(float32x2_t *)v24.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v24.f32, *(float32x2_t *)v25.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL)));
    *(float32x2_t *)&v24.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v26.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL)), 0);
    *(float32x4_t *)(v5 + 16) = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v20, v38.f32[0]), v34, v21), v31, v22);
    *(float32x4_t *)(v5 + 32) = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v20, v37.f32[0]), v33, v21), v30, v22);
    *(float32x4_t *)(v5 + 48) = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v20, v36.f32[0]), v32, v21), v29, v22);
    *(float32x4_t *)(v5 + 64) = vaddq_f32(v35, v24);
    v27 = (*(float (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + v11)
                                                                              + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + v11), v5, v6, a4, a5);
    if (v27 < v17)
      v17 = v27;
    *(float32x4_t *)(v5 + 16) = v38;
    *(float32x4_t *)(v5 + 32) = v37;
    *(float32x4_t *)(v5 + 48) = v36;
    *(float32x4_t *)(v5 + 64) = v35;
    v11 += 8;
    v18 += 96;
  }
  while (v16 != v11);
  return v17;
}

_DWORD *btCompoundCollisionAlgorithm::getAllContactManifolds(_DWORD *result, uint64_t a2)
{
  int v2;
  _DWORD *v4;
  uint64_t i;

  v2 = result[5];
  if (v2 >= 1)
  {
    v4 = result;
    for (i = 0; i < v2; ++i)
    {
      result = *(_DWORD **)(*((_QWORD *)v4 + 4) + 8 * i);
      if (result)
      {
        result = (_DWORD *)(*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)result + 32))(result, a2);
        v2 = v4[5];
      }
    }
  }
  return result;
}

void btCompoundLeafCallback::~btCompoundLeafCallback(btCompoundLeafCallback *this)
{
  JUMPOUT(0x1DF0D41C0);
}

uint64_t btCompoundLeafCallback::Process(btCompoundLeafCallback *a1, uint64_t a2)
{
  return btCompoundLeafCallback::ProcessChildShape(a1, *(const btCollisionShape **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 8) + 40)+ 96 * *(int *)(a2 + 40)+ 64), *(_DWORD *)(a2 + 40));
}

_QWORD *btConvexConcaveCollisionAlgorithm::btConvexConcaveCollisionAlgorithm(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v10 = btActivatingCollisionAlgorithm::btActivatingCollisionAlgorithm(a1, a2);
  *v10 = &off_1EA5981E0;
  *((_BYTE *)v10 + 16) = a5;
  v11 = *a2;
  a1[13] = *a2;
  a1[14] = 0;
  if (a5)
    v12 = a4;
  else
    v12 = a3;
  a1[4] = &off_1EA597940;
  a1[5] = v12;
  if (a5)
    v13 = a3;
  else
    v13 = a4;
  a1[6] = v13;
  v14 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v11 + 24))(v11, *(_QWORD *)(v12 + 16), *(_QWORD *)(v13 + 16));
  a1[16] = v14;
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)a1[13] + 40))(a1[13], v14);
  return a1;
}

void btConvexConcaveCollisionAlgorithm::~btConvexConcaveCollisionAlgorithm(btConvexConcaveCollisionAlgorithm *this)
{
  *(_QWORD *)this = &off_1EA5981E0;
  btConvexTriangleCallback::~btConvexTriangleCallback((btConvexConcaveCollisionAlgorithm *)((char *)this + 32));
  C3DSceneSourcePerformConsistencyCheck(this);
}

{
  *(_QWORD *)this = &off_1EA5981E0;
  btConvexTriangleCallback::~btConvexTriangleCallback((btConvexConcaveCollisionAlgorithm *)((char *)this + 32));
  C3DSceneSourcePerformConsistencyCheck(this);
  JUMPOUT(0x1DF0D41C0);
}

void btConvexConcaveCollisionAlgorithm::getAllContactManifolds(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  BOOL v10;

  v2 = *(_QWORD *)(a1 + 128);
  if (v2)
  {
    v4 = *(_DWORD *)(a2 + 4);
    if (v4 == *(_DWORD *)(a2 + 8))
    {
      v5 = v4 ? 2 * v4 : 1;
      if (v4 < v5)
      {
        if (v5)
        {
          v7 = btAlignedAllocInternal(8 * v5, 16);
          v4 = *(_DWORD *)(a2 + 4);
        }
        else
        {
          v7 = 0;
        }
        if (v4 >= 1)
        {
          v8 = 0;
          do
          {
            *(_QWORD *)(v7 + v8) = *(_QWORD *)(*(_QWORD *)(a2 + 16) + v8);
            v8 += 8;
          }
          while (8 * v4 != v8);
        }
        v9 = *(void ***)(a2 + 16);
        if (v9)
          v10 = *(_BYTE *)(a2 + 24) == 0;
        else
          v10 = 1;
        if (!v10)
        {
          btAlignedFreeInternal(v9);
          v4 = *(_DWORD *)(a2 + 4);
        }
        *(_BYTE *)(a2 + 24) = 1;
        *(_QWORD *)(a2 + 16) = v7;
        *(_DWORD *)(a2 + 8) = v5;
        v2 = *(_QWORD *)(a1 + 128);
      }
    }
    *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v4) = v2;
    *(_DWORD *)(a2 + 4) = v4 + 1;
  }
}

void btConvexTriangleCallback::~btConvexTriangleCallback(btConvexTriangleCallback *this)
{
  *(_QWORD *)this = &off_1EA597940;
  (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 9) + 40))(*((_QWORD *)this + 9), *((_QWORD *)this + 12));
  (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 9) + 32))(*((_QWORD *)this + 9), *((_QWORD *)this + 12));
  C3DSceneSourcePerformConsistencyCheck(this);
}

{
  btConvexTriangleCallback::~btConvexTriangleCallback(this);
  JUMPOUT(0x1DF0D41C0);
}

void btConvexTriangleCallback::processTriangle(btConvexTriangleCallback *this, btVector3 *a2, int a3, int a4)
{
  uint64_t v8;
  btVector3 v9;
  btVector3 v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[2];
  __int128 v20;
  int v21;
  int v22;
  void (**v23)(btTriangleShape *__hidden);
  int v24;
  int v25;
  __int128 v26;
  btVector3 v27;
  btVector3 v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (*(int *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 8) <= 19)
  {
    v8 = *((_QWORD *)this + 9);
    btPolyhedralConvexShape::btPolyhedralConvexShape((btPolyhedralConvexShape *)&v23);
    v23 = off_1EA596108;
    v24 = 1;
    v9 = a2[1];
    v26 = (__int128)*a2;
    v10 = a2[2];
    v27 = v9;
    v28 = v10;
    v25 = *((_DWORD *)this + 22);
    v11 = *((_QWORD *)this + 1);
    v19[0] = *((_QWORD *)this + 2);
    v19[1] = &v23;
    v20 = *(_OWORD *)(v19[0] + 16);
    v21 = a3;
    v22 = a4;
    v12 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v8 + 16))(v8, v11, v19, *((_QWORD *)this + 12));
    v13 = (_QWORD *)*((_QWORD *)this + 8);
    v14 = v13 + 2;
    v15 = v13[2];
    if (*(_QWORD *)(v15 + 16) == *(_QWORD *)(*((_QWORD *)this + 2) + 16))
    {
      v16 = 2;
    }
    else
    {
      v14 = v13 + 3;
      v15 = v13[3];
      v16 = 3;
    }
    *v14 = v19;
    (*(void (**)(void))(*v13 + 8 * v16))();
    (*(void (**)(uint64_t, _QWORD, _QWORD *, _QWORD, _QWORD))(*(_QWORD *)v12 + 16))(v12, *((_QWORD *)this + 1), v19, *((_QWORD *)this + 10), *((_QWORD *)this + 8));
    v17 = *((_QWORD *)this + 8);
    v18 = 24;
    if (*(_QWORD *)(*(_QWORD *)(v17 + 16) + 16) == *(_QWORD *)(*((_QWORD *)this + 2) + 16))
      v18 = 16;
    *(_QWORD *)(v17 + v18) = v15;
    (**(void (***)(uint64_t))v12)(v12);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 120))(v8, v12);
    btPolyhedralConvexShape::~btPolyhedralConvexShape((btPolyhedralConvexShape *)&v23);
  }
}

uint64_t btConvexInternalShape::setMargin(uint64_t this, float a2)
{
  *(float *)(this + 64) = a2;
  return this;
}

float32x4_t btConvexTriangleCallback::setTimeStepAndCounters(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int32x2_t a6)
{
  _OWORD *v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  int8x16_t v11;
  float32x4_t *v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  int8x16_t v19;
  float32x4_t v20;
  int8x16_t v21;
  int32x2_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t result;
  _OWORD v35[4];

  a1->i64[1] = a3;
  a1[1].i64[0] = a4;
  a1[5].i64[0] = a2;
  a1[5].i32[2] = a6.i32[0];
  a1[4].i64[0] = a5;
  v7 = *(_OWORD **)(a4 + 24);
  v8 = *(float32x4_t *)v7;
  v9 = *((float32x4_t *)v7 + 1);
  v10 = *((float32x4_t *)v7 + 2);
  v11 = *((int8x16_t *)v7 + 3);
  v12 = *(float32x4_t **)(a3 + 24);
  v14 = *v12;
  v13 = v12[1];
  v16 = v12[2];
  v15 = v12[3];
  v17 = (float32x4_t)vtrn1q_s32((int32x4_t)v8, (int32x4_t)v9);
  v18.i64[0] = vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).u64[0];
  v18.i64[1] = vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL).u32[0];
  v19.i64[0] = 0x8000000080000000;
  v19.i64[1] = 0x8000000080000000;
  v20 = (float32x4_t)veorq_s8(v11, v19);
  v21 = (int8x16_t)vmulq_f32(v18, v20);
  v21.i32[3] = 0;
  v22 = vzip2_s32(*(int32x2_t *)v10.f32, 0);
  v16.i32[3] = 0;
  v13.i32[3] = 0;
  v14.i32[3] = 0;
  v23 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v14, v8, 2), v13, v9, 2), v16, v10, 2);
  v24 = vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v14, *(float32x2_t *)v8.f32, 1), v13, *(float32x2_t *)v9.f32, 1), v16, *(float32x2_t *)v10.f32, 1);
  v25 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v14, v8.f32[0]), v13, v9.f32[0]), v16, v10.f32[0]);
  v17.i64[1] = v10.u32[0];
  v26 = (int8x16_t)vmulq_f32(v17, v20);
  *(int32x2_t *)v8.f32 = vzip2_s32(*(int32x2_t *)v8.f32, *(int32x2_t *)v9.f32);
  *(int32x2_t *)&v8.u32[2] = v22;
  v27 = (int8x16_t)vmulq_f32(v8, v20);
  *(int32x2_t *)v16.f32 = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL));
  *(float32x2_t *)v27.i8 = vpadd_f32(*(float32x2_t *)v26.i8, *(float32x2_t *)v27.i8);
  v28 = (int8x16_t)vmulq_f32(v18, v15);
  v28.i32[3] = 0;
  v29 = (int8x16_t)vmulq_f32(v17, v15);
  v30 = (int8x16_t)vmulq_f32(v8, v15);
  *(float32x2_t *)v30.i8 = vadd_f32(vadd_f32(*(float32x2_t *)v16.f32, *(float32x2_t *)v27.i8), vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL)), vpadd_f32(*(float32x2_t *)v29.i8, *(float32x2_t *)v30.i8)));
  v30.u64[1] = (unint64_t)vadd_f32(vpadd_f32(vpadd_f32(*(float32x2_t *)v21.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL)), 0), vpadd_f32(vpadd_f32(*(float32x2_t *)v28.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL)), 0));
  v35[0] = v25;
  v35[1] = v24;
  v35[2] = v23;
  v35[3] = v30;
  (*(void (**)(_QWORD, _OWORD *, float32x4_t *, float32x4_t *))(**(_QWORD **)(a3 + 8) + 16))(*(_QWORD *)(a3 + 8), v35, a1 + 2, a1 + 3);
  v31 = (float32x4_t)vdupq_lane_s32(a6, 0);
  v31.i32[3] = 0;
  v32 = vaddq_f32(v31, a1[3]);
  result = vsubq_f32(a1[2], v31);
  a1[2] = result;
  a1[3] = v32;
  return result;
}

btPersistentManifold *btConvexConcaveCollisionAlgorithm::processCollision(btPersistentManifold *result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  float32x4_t *v10;
  int32x2_t v11;
  float32x4_t v12;
  uint64_t v13;
  uint64_t v14;
  btCollisionObject *var3;
  uint64_t v16;

  if (LOBYTE(result->var1[0].var0.var0.var0[2]))
    v5 = a3;
  else
    v5 = a2;
  if (LOBYTE(result->var1[0].var0.var0.var0[2]))
    v6 = a2;
  else
    v6 = a3;
  v7 = *(_DWORD **)(v6 + 8);
  if ((v7[2] - 21) <= 8 && *(int *)(*(_QWORD *)(v5 + 8) + 8) <= 19)
  {
    v10 = (float32x4_t *)result;
    *(double *)&v11 = (*(double (**)(_QWORD))(*(_QWORD *)v7 + 96))(*(_QWORD *)(v6 + 8));
    a5[1] = v10[8].i64[0];
    v12 = btConvexTriangleCallback::setTimeStepAndCounters(v10 + 2, a4, v5, v6, (uint64_t)a5, v11);
    v13 = v10[8].i64[0];
    v14 = *(_QWORD *)(v6 + 16);
    *(_QWORD *)(v13 + 784) = *(_QWORD *)(v5 + 16);
    *(_QWORD *)(v13 + 792) = v14;
    (*(void (**)(_DWORD *, float32x4_t *, float32x4_t *, float32x4_t *, float32x4_t))(*(_QWORD *)v7 + 128))(v7, v10 + 2, v10 + 4, v10 + 5, v12);
    result = (btPersistentManifold *)a5[1];
    if (LODWORD(result->var6))
    {
      var3 = result->var3;
      v16 = *(_QWORD *)(a5[2] + 16);
      if (var3 == (btCollisionObject *)v16)
        v16 = *(_QWORD *)(a5[3] + 16);
      else
        var3 = *(btCollisionObject **)(a5[3] + 16);
      result = btPersistentManifold::refreshContactPoints(result, (const btTransform *)((char *)var3 + 16), (const btTransform *)(v16 + 16));
    }
    v10[2].i64[1] = 0;
    v10[3].i64[0] = 0;
  }
  return result;
}

float btConvexConcaveCollisionAlgorithm::calculateTimeOfImpact(uint64_t a1, float32x4_t *a2, float32x4_t *a3)
{
  float32x4_t *v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  int8x16_t v7;
  float v8;
  float32x4_t *v9;
  _DWORD *v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  int32x2_t v15;
  unsigned __int32 v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  int8x16_t v34;
  float32x4_t v35;
  int8x16_t v36;
  float32x4_t v37;
  int8x16_t v38;
  int8x16_t v39;
  float32x4_t v40;
  int8x16_t v41;
  float32x4_t v42;
  int8x16_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float v48;
  float32x4_t v50;
  float32x4_t v51;
  _QWORD v52[2];
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  int32x2_t v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 16))
    v3 = a3;
  else
    v3 = a2;
  v4 = v3[8];
  v5 = v3[4];
  v6 = vsubq_f32(v4, v5);
  v6.i32[3] = 0;
  v7 = (int8x16_t)vmulq_f32(v6, v6);
  v8 = 1.0;
  if (vadd_f32(vpadd_f32(*(float32x2_t *)v7.i8, *(float32x2_t *)v7.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)).f32[0] >= (float)(v3[18].f32[0] * v3[18].f32[0]))
  {
    if (*(_BYTE *)(a1 + 16))
      v9 = a2;
    else
      v9 = a3;
    v10 = (_DWORD *)v9[13].i64[0];
    if ((v10[2] - 21) <= 8)
    {
      v11 = v9[1];
      v12 = v9[2];
      v13 = (float32x4_t)vtrn1q_s32((int32x4_t)v11, (int32x4_t)v12);
      v14 = v9[3];
      v15 = vzip2_s32(*(int32x2_t *)v14.f32, 0);
      v16 = vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL).u32[0];
      v18 = v3[6];
      v17 = v3[7];
      v17.i32[3] = 0;
      v19 = v3[5];
      v18.i32[3] = 0;
      v19.i32[3] = 0;
      v20 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v19, v11, 2), v18, v12, 2), v17, v14, 2);
      v21 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v19, v11.f32[0]), v18, v12.f32[0]), v17, v14.f32[0]);
      v23 = v3[1];
      v22 = v3[2];
      v22.i32[3] = 0;
      v23.i32[3] = 0;
      v24 = vmlaq_lane_f32(vmulq_lane_f32(v19, *(float32x2_t *)v11.f32, 1), v18, *(float32x2_t *)v12.f32, 1);
      v25 = vmlaq_n_f32(vmulq_n_f32(v23, v11.f32[0]), v22, v12.f32[0]);
      v26 = vmlaq_lane_f32(v24, v17, *(float32x2_t *)v14.f32, 1);
      v27 = vmlaq_laneq_f32(vmulq_laneq_f32(v23, v11, 2), v22, v12, 2);
      v28 = vmlaq_lane_f32(vmulq_lane_f32(v23, *(float32x2_t *)v11.f32, 1), v22, *(float32x2_t *)v12.f32, 1);
      v29 = v3[3];
      v29.i32[3] = 0;
      v30 = vmlaq_n_f32(v25, v29, v14.f32[0]);
      v31 = vmlaq_laneq_f32(v27, v29, v14, 2);
      v32 = vmlaq_lane_f32(v28, v29, *(float32x2_t *)v14.f32, 1);
      v29.i64[0] = vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL).u64[0];
      v13.i64[1] = v14.u32[0];
      v14.i64[0] = 0x8000000080000000;
      v14.i64[1] = 0x8000000080000000;
      v33 = (float32x4_t)veorq_s8((int8x16_t)v9[4], (int8x16_t)v14);
      v34 = (int8x16_t)vmulq_f32(v13, v33);
      *(int32x2_t *)v11.f32 = vzip2_s32(*(int32x2_t *)v11.f32, *(int32x2_t *)v12.f32);
      *(int32x2_t *)&v11.u32[2] = v15;
      v35 = vmulq_f32(v11, v33);
      *(float32x2_t *)v35.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v34.i8, *(float32x2_t *)v35.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL)));
      v29.i64[1] = v16;
      v36 = (int8x16_t)vmulq_f32(v29, v33);
      v36.i32[3] = 0;
      *(float32x2_t *)&v35.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v36.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v36, v36, 8uLL)), 0);
      v37 = vmulq_f32(v4, v13);
      v38 = (int8x16_t)vmulq_f32(v4, v11);
      *(float32x2_t *)v37.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v37, (int8x16_t)v37, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v38, v38, 8uLL)), vpadd_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v38.i8));
      v39 = (int8x16_t)vmulq_f32(v4, v29);
      v39.i32[3] = 0;
      *(float32x2_t *)&v37.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v39.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v39, v39, 8uLL)), 0);
      v40 = vaddq_f32(v35, v37);
      v41 = (int8x16_t)vmulq_f32(v5, v13);
      v42 = vmulq_f32(v5, v11);
      *(float32x2_t *)v42.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v41, v41, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL)), vpadd_f32(*(float32x2_t *)v41.i8, *(float32x2_t *)v42.f32));
      v43 = (int8x16_t)vmulq_f32(v5, v29);
      v43.i32[3] = 0;
      *(float32x2_t *)&v42.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v43.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v43, v43, 8uLL)), 0);
      v44 = vaddq_f32(v35, v42);
      v45 = vminq_f32(v44, v40);
      v46 = vmaxq_f32(v44, v40);
      v52[0] = &off_1EA59AC10;
      v53 = v30;
      v54 = v32;
      v55 = v31;
      v56 = v44;
      v57 = v21;
      v58 = v26;
      v59 = v20;
      v60 = v40;
      v44.i64[0] = v3[17].i64[1];
      v47 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v44.f32, 1);
      v47.i32[3] = 0;
      v50 = vaddq_f32(v46, v47);
      v51 = vsubq_f32(v45, v47);
      v61 = vrev64_s32(*(int32x2_t *)v44.f32);
      (*(void (**)(_DWORD *, _QWORD *, float32x4_t *, float32x4_t *))(*(_QWORD *)v10 + 128))(v10, v52, &v51, &v50);
      v48 = *(float *)&v61.i32[1];
      if (*(float *)&v61.i32[1] < v3[17].f32[2])
      {
        v3[17].i32[2] = v61.i32[1];
        C3DSceneSourcePerformConsistencyCheck(v52);
        return v48;
      }
      else
      {
        C3DSceneSourcePerformConsistencyCheck(v52);
      }
    }
  }
  return v8;
}

void btTriangleShape::~btTriangleShape(btTriangleShape *this)
{
  void **v1;

  btPolyhedralConvexShape::~btPolyhedralConvexShape(this);
  btAlignedFreeInternal(v1);
}

uint64_t btTriangleShape::getAabb(btTriangleShape *this, const btTransform *a2, btVector3 *a3, btVector3 *a4)
{
  return (*(uint64_t (**)(btTriangleShape *, const btTransform *, btVector3 *, btVector3 *))(*(_QWORD *)this + 160))(this, a2, a3, a4);
}

uint64_t btConvexInternalShape::getLocalScaling(btConvexInternalShape *this)
{
  return (uint64_t)this + 32;
}

void btTriangleShape::calculateLocalInertia(btTriangleShape *this, float a2, btVector3 *a3)
{
  *a3 = 0uLL;
}

const char *btTriangleShape::getName(btTriangleShape *this)
{
  return "Triangle";
}

double btCollisionShape::getAnisotropicRollingFrictionDirection@<D0>(btCollisionShape *this@<X0>, _OWORD *a2@<X8>)
{
  double result;

  result = 0.00781250185;
  *a2 = xmmword_1DD008470;
  return result;
}

float btConvexInternalShape::getMargin(btConvexInternalShape *this)
{
  return *((float *)this + 16);
}

uint64_t btConvexInternalShape::calculateSerializeBufferSize(btConvexInternalShape *this)
{
  return 56;
}

const char *btConvexInternalShape::serialize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  uint64_t j;

  btCollisionShape::serialize(a1, a2, a3);
  for (i = 0; i != 16; i += 4)
    *(_DWORD *)(a2 + 32 + i) = *(_DWORD *)(a1 + 48 + i);
  for (j = 0; j != 16; j += 4)
    *(_DWORD *)(a2 + 16 + j) = *(_DWORD *)(a1 + 32 + j);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 64);
  return "btConvexInternalShapeData";
}

__n128 btTriangleShape::localGetSupportingVertexWithoutMargin@<Q0>(float32x4_t *this@<X0>, float32x4_t *a2@<X1>, __n128 *a3@<X8>)
{
  float32x4_t *v3;
  float32x4_t v4;
  float32x4_t v5;
  int8x16_t v6;
  int8x16_t v7;
  int8x16_t v8;
  float32x2_t v9;
  float32x2_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 result;

  v4 = this[5];
  v5 = this[6];
  v3 = this + 5;
  v6 = (int8x16_t)vmulq_f32(v4, *a2);
  v7 = (int8x16_t)vmulq_f32(*a2, v5);
  v8 = (int8x16_t)vmulq_f32(*a2, v3[2]);
  v8.i32[3] = 0;
  v9 = vadd_f32(vpadd_f32(*(float32x2_t *)v6.i8, *(float32x2_t *)v7.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)));
  v10 = vpadd_f32(vpadd_f32(*(float32x2_t *)v8.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL)), 0);
  v11 = 2;
  if (v9.f32[1] >= v10.f32[0])
    v12 = 1;
  else
    v12 = 2;
  if ((vcgt_f32(v10, v9).u8[0] & 1) == 0)
    v11 = 0;
  if (v9.f32[0] < v9.f32[1])
    v11 = v12;
  result = (__n128)v3[v11];
  *a3 = result;
  return result;
}

float32x4_t *btTriangleShape::batchedUnitVectorGetSupportingVertexWithoutMargin(float32x4_t *this, float32x4_t *a2, btVector3 *a3, int a4)
{
  uint64_t v4;
  float32x4_t v5;
  int8x16_t v6;
  int8x16_t v7;
  int8x16_t v8;
  float32x2_t v9;
  float32x2_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a4 >= 1)
  {
    v4 = a4;
    do
    {
      v5 = *a2++;
      v6 = (int8x16_t)vmulq_f32(this[5], v5);
      v7 = (int8x16_t)vmulq_f32(v5, this[7]);
      v8 = (int8x16_t)vmulq_f32(v5, this[6]);
      v7.i32[3] = 0;
      v9 = vadd_f32(vpadd_f32(*(float32x2_t *)v6.i8, *(float32x2_t *)v8.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL)));
      v10 = vpadd_f32(vpadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)), 0);
      if (v9.f32[1] >= v10.f32[0])
        v11 = 1;
      else
        v11 = 2;
      if ((vcgt_f32(v10, v9).u8[0] & 1) != 0)
        v12 = 2;
      else
        v12 = 0;
      if (v9.f32[0] >= v9.f32[1])
        v11 = v12;
      *a3++ = (btVector3)this[v11 + 5];
      --v4;
    }
    while (v4);
  }
  return this;
}

uint64_t btTriangleShape::getNumPreferredPenetrationDirections(btTriangleShape *this)
{
  return 2;
}

int8x16_t btTriangleShape::getPreferredPenetrationDirection(float32x4_t *this, __int32 a2, btVector3 *a3, int32x4_t a4)
{
  float32x4_t v4;
  float32x4_t v5;
  int8x8_t v6;
  float32x4_t v7;
  int8x8_t v8;
  float32x4_t v9;
  float32x4_t v10;
  int8x16_t v11;
  int8x16_t v12;
  float32x4_t v13;
  int8x16_t result;

  a4.i32[0] = 0;
  v4 = this[5];
  v5 = vsubq_f32(this[6], v4);
  v6 = (int8x8_t)vextq_s8((int8x16_t)v5, (int8x16_t)v5, 8uLL).u64[0];
  v5.i32[3] = 0;
  v7 = vsubq_f32(this[7], v4);
  v8 = (int8x8_t)vextq_s8((int8x16_t)v7, (int8x16_t)v7, 8uLL).u64[0];
  v7.i32[3] = 0;
  *(int8x8_t *)v9.f32 = vext_s8(*(int8x8_t *)v5.f32, v6, 4uLL);
  v9.i64[1] = v5.i64[0];
  *(int8x8_t *)v10.f32 = vext_s8(*(int8x8_t *)v7.f32, v8, 4uLL);
  v10.i64[1] = v7.i64[0];
  v11 = (int8x16_t)vsubq_f32(vmulq_f32(v10, v5), vmulq_f32(v9, v7));
  v7.i64[0] = vextq_s8(v11, v11, 4uLL).u64[0];
  v7.i64[1] = v11.u32[0];
  v12 = (int8x16_t)vmulq_f32(v7, v7);
  v13 = vmulq_n_f32(v7, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v12.i8, *(float32x2_t *)v12.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL)).f32[0]));
  v7.i32[0] = a2;
  result = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v7, a4), 0), (int8x16_t)v13, (int8x16_t)vnegq_f32(v13));
  *a3 = (btVector3)result;
  return result;
}

uint64_t btTriangleShape::getNumVertices(btTriangleShape *this)
{
  return 3;
}

uint64_t btTriangleShape::getNumEdges(btTriangleShape *this)
{
  return 3;
}

uint64_t btTriangleShape::getEdge(btTriangleShape *this, uint64_t a2, btVector3 *a3, btVector3 *a4)
{
  int v5;

  v5 = a2;
  (*(void (**)(btTriangleShape *, uint64_t, btVector3 *))(*(_QWORD *)this + 216))(this, a2, a3);
  return (*(uint64_t (**)(btTriangleShape *, _QWORD, btVector3 *))(*(_QWORD *)this + 216))(this, ((v5 + 1) % 3), a4);
}

__n128 btTriangleShape::getVertex(__n128 *this, int a2, btVector3 *a3)
{
  __n128 result;

  result = this[a2 + 5];
  *a3 = (btVector3)result;
  return result;
}

uint64_t btPolyhedralConvexShape::getNumPlanes(btPolyhedralConvexShape *this)
{
  return 0;
}

uint64_t btTriangleShape::getPlane(btTriangleShape *this, btVector3 *a2, btVector3 *a3, uint64_t a4)
{
  return (*(uint64_t (**)(btTriangleShape *, uint64_t, btVector3 *, btVector3 *))(*(_QWORD *)this + 256))(this, a4, a2, a3);
}

BOOL btTriangleShape::isInside(float32x4_t *this, float32x4_t *a2, float a3)
{
  _BOOL8 result;
  float32x4_t v5;
  float32x4_t v6;
  int8x8_t v7;
  float32x4_t v8;
  int8x8_t v9;
  float32x4_t v10;
  float32x4_t v11;
  int8x16_t v12;
  int8x16_t v13;
  float32x4_t v14;
  int8x16_t v15;
  int8x16_t v16;
  float v17;
  float v18;
  uint64_t v21;
  float32x4_t v22;
  float32x4_t v23;
  int8x8_t v24;
  float32x4_t v25;
  int8x16_t v26;
  int8x16_t v27;
  float32x4_t v28;
  int8x16_t v29;
  int8x16_t v30;
  BOOL v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;

  result = 0;
  v5 = this[5];
  v6 = vsubq_f32(this[6], v5);
  v7 = (int8x8_t)vextq_s8((int8x16_t)v6, (int8x16_t)v6, 8uLL).u64[0];
  v6.i32[3] = 0;
  v8 = vsubq_f32(this[7], v5);
  v9 = (int8x8_t)vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL).u64[0];
  v8.i32[3] = 0;
  *(int8x8_t *)v10.f32 = vext_s8(*(int8x8_t *)v6.f32, v7, 4uLL);
  v10.i64[1] = v6.i64[0];
  *(int8x8_t *)v11.f32 = vext_s8(*(int8x8_t *)v8.f32, v9, 4uLL);
  v11.i64[1] = v8.i64[0];
  v12 = (int8x16_t)vsubq_f32(vmulq_f32(v11, v6), vmulq_f32(v10, v8));
  v10.i64[0] = vextq_s8(v12, v12, 4uLL).u64[0];
  v10.i64[1] = v12.u32[0];
  v13 = (int8x16_t)vmulq_f32(v10, v10);
  v14 = vmulq_n_f32(v10, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v13.i8, *(float32x2_t *)v13.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL)).f32[0]));
  v15 = (int8x16_t)vmulq_f32(*a2, v14);
  v33 = v14;
  v16 = (int8x16_t)vmulq_f32(v5, v14);
  v17 = vsub_f32(vadd_f32(vpadd_f32(*(float32x2_t *)v15.i8, *(float32x2_t *)v15.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL)), vadd_f32(vpadd_f32(*(float32x2_t *)v16.i8, *(float32x2_t *)v16.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL))).f32[0];
  v18 = -a3;
  if (v17 >= (float)-a3 && v17 <= a3)
  {
    v21 = 0;
    v22.i64[0] = vextq_s8((int8x16_t)v14, (int8x16_t)v14, 4uLL).u64[0];
    v22.i64[1] = v14.i64[0];
    v32 = v22;
    do
    {
      (*(void (**)(float32x4_t *, uint64_t, float32x4_t *, float32x4_t *))(this->i64[0] + 208))(this, v21, &v35, &v34);
      v23 = vsubq_f32(v34, v35);
      v24 = (int8x8_t)vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL).u64[0];
      v23.i32[3] = 0;
      *(int8x8_t *)v25.f32 = vext_s8(*(int8x8_t *)v23.f32, v24, 4uLL);
      v25.i64[1] = v23.i64[0];
      v26 = (int8x16_t)vsubq_f32(vmulq_f32(v32, v23), vmulq_f32(v33, v25));
      v25.i64[0] = vextq_s8(v26, v26, 4uLL).u64[0];
      v25.i64[1] = v26.u32[0];
      v27 = (int8x16_t)vmulq_f32(v25, v25);
      v28 = vmulq_n_f32(v25, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v27.i8, *(float32x2_t *)v27.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL)).f32[0]));
      v29 = (int8x16_t)vmulq_f32(*a2, v28);
      v30 = (int8x16_t)vmulq_f32(v35, v28);
      *(float *)v30.i32 = vsub_f32(vadd_f32(vpadd_f32(*(float32x2_t *)v29.i8, *(float32x2_t *)v29.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL)), vadd_f32(vpadd_f32(*(float32x2_t *)v30.i8, *(float32x2_t *)v30.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL))).f32[0];
      result = *(float *)v30.i32 >= v18;
      v31 = *(float *)v30.i32 < v18 || (_DWORD)v21 == 2;
      v21 = (v21 + 1);
    }
    while (!v31);
  }
  return result;
}

uint64_t btTriangleShape::getNumPlanes(btTriangleShape *this)
{
  return 1;
}

__n128 btTriangleShape::getPlaneEquation(float32x4_t *this, int a2, float32x4_t *a3, btVector3 *a4)
{
  float32x4_t v4;
  float32x4_t v5;
  int8x8_t v6;
  float32x4_t v7;
  int8x8_t v8;
  float32x4_t v9;
  float32x4_t v10;
  int8x16_t v11;
  int8x16_t v12;
  __n128 result;

  v4 = this[5];
  v5 = vsubq_f32(this[6], v4);
  v6 = (int8x8_t)vextq_s8((int8x16_t)v5, (int8x16_t)v5, 8uLL).u64[0];
  v5.i32[3] = 0;
  v7 = vsubq_f32(this[7], v4);
  v8 = (int8x8_t)vextq_s8((int8x16_t)v7, (int8x16_t)v7, 8uLL).u64[0];
  v7.i32[3] = 0;
  *(int8x8_t *)v9.f32 = vext_s8(*(int8x8_t *)v5.f32, v6, 4uLL);
  v9.i64[1] = v5.i64[0];
  *(int8x8_t *)v10.f32 = vext_s8(*(int8x8_t *)v7.f32, v8, 4uLL);
  v10.i64[1] = v7.i64[0];
  v11 = (int8x16_t)vsubq_f32(vmulq_f32(v10, v5), vmulq_f32(v9, v7));
  v7.i64[0] = vextq_s8(v11, v11, 4uLL).u64[0];
  v7.i64[1] = v11.u32[0];
  v12 = (int8x16_t)vmulq_f32(v7, v7);
  *a3 = vmulq_n_f32(v7, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v12.i8, *(float32x2_t *)v12.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL)).f32[0]));
  result = (__n128)this[5];
  *a4 = (btVector3)result;
  return result;
}

void btConvexConcaveCollisionAlgorithm::calculateTimeOfImpact(btCollisionObject *,btCollisionObject *,btDispatcherInfo const&,btManifoldResult *)::LocalTriangleSphereCastCallback::~LocalTriangleSphereCastCallback(uint64_t a1)
{
  C3DSceneSourcePerformConsistencyCheck(a1);
  JUMPOUT(0x1DF0D41C0);
}

uint64_t btConvexConcaveCollisionAlgorithm::calculateTimeOfImpact(btCollisionObject *,btCollisionObject *,btDispatcherInfo const&,btManifoldResult *)::LocalTriangleSphereCastCallback::processTriangle(uint64_t a1, __int128 *a2)
{
  int v4;
  __int128 v5;
  btVoronoiSimplexSolver *v7[4];
  btTransform v8;
  _BYTE v9[320];
  int v10;
  char v11;
  void (**v12)(btTriangleShape *__hidden);
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  void *v17;
  int v18;
  int v19;
  int v20;
  float32x4_t v21[11];
  float v22;
  uint64_t v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v8.var0.var0[0] = (btVector3)xmmword_1DD007970;
  v8.var0.var0[1] = (btVector3)xmmword_1DD007920;
  v8.var0.var0[2] = (btVector3)xmmword_1DD007600;
  v4 = *(_DWORD *)(a1 + 208);
  v22 = *(float *)(a1 + 212);
  v8.var1 = 0uLL;
  v21[0].i64[0] = (uint64_t)&off_1EA598630;
  v23 = 0;
  v24 = 0;
  btConvexInternalShape::btConvexInternalShape((btConvexInternalShape *)&v17);
  v17 = &unk_1EA5956E8;
  v18 = 8;
  v19 = v4;
  v20 = v4;
  btPolyhedralConvexShape::btPolyhedralConvexShape((btPolyhedralConvexShape *)&v12);
  v12 = off_1EA596108;
  v13 = 1;
  v5 = a2[1];
  v14 = *a2;
  v15 = v5;
  v16 = a2[2];
  v10 = 953267991;
  v11 = 0;
  btSubsimplexConvexCast::btSubsimplexConvexCast(v7, (uint64_t)&v17, (uint64_t)&v12, (uint64_t)v9);
  if (btSubsimplexConvexCast::calcTimeOfImpact(v7, (const btTransform *)(a1 + 16), (const btTransform *)(a1 + 80), &v8, &v8, v21)&& *(float *)(a1 + 212) > v22)
  {
    *(float *)(a1 + 212) = v22;
  }
  C3DSceneSourcePerformConsistencyCheck(v7);
  btPolyhedralConvexShape::~btPolyhedralConvexShape((btPolyhedralConvexShape *)&v12);
  return C3DSceneSourcePerformConsistencyCheck(&v17);
}

double btConvexConvexAlgorithm::CreateFunc::CreateFunc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &off_1EA5986C0;
  *(_QWORD *)&result = 0x300000000;
  *(_QWORD *)(a1 + 32) = 0x300000000;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = a2;
  return result;
}

void btConvexConvexAlgorithm::CreateFunc::~CreateFunc(btConvexConvexAlgorithm::CreateFunc *this)
{
  JUMPOUT(0x1DF0D41C0);
}

void btConvexConvexAlgorithm::~btConvexConvexAlgorithm(btConvexConvexAlgorithm *this)
{
  *(_QWORD *)this = &off_1EA597490;
  if (*((_BYTE *)this + 32) && *((_QWORD *)this + 5))
    (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
  C3DSceneSourcePerformConsistencyCheck(this);
}

{
  btConvexConvexAlgorithm::~btConvexConvexAlgorithm(this);
  JUMPOUT(0x1DF0D41C0);
}

void btConvexConvexAlgorithm::processCollision(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  btPersistentManifold *v10;
  uint64_t v11;
  float32x4_t *v12;
  float ContactBreakingThreshold;
  uint64_t v14;
  float v15;
  int v16;
  uint64_t v17;
  float v18;
  float32x4_t *v19;
  float32x4_t *v20;
  float *v21;
  float v22;
  float v23;
  float v24;
  float32x4_t v25;
  __int32 *v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  int8x16_t v30;
  int8x16_t v32;
  float v33;
  int8x16_t v34;
  float v35;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float32x4_t *v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t *v53;
  int v54;
  int v55;
  float v56;
  float v57;
  float v58;
  double v59;
  float32x4_t v60;
  double v61;
  float32x4_t v62;
  float32x4_t v63;
  float v64;
  float v65;
  float32x4_t *v66;
  float32x4_t v67;
  float32x4_t v68;
  int8x16_t v69;
  int8x16_t v70;
  void **v71;
  float32x4_t *v72;
  float32x4_t v73;
  float32x4_t v74;
  int8x16_t v75;
  int8x16_t v76;
  _OWORD *v77;
  float32x4_t *v78;
  float32x4_t v79;
  float32x4_t v80;
  int8x16_t v81;
  int8x16_t v82;
  _OWORD *v83;
  void **v84;
  float v85;
  int8x16_t v86;
  float v87;
  float32x4_t v88;
  float v89;
  float v90;
  float v91;
  double v92;
  double v93;
  double v94;
  double v95;
  float32x4_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int8x16_t v100;
  float32x2_t v101;
  int8x16_t v102;
  float v103;
  float v107;
  float32x4_t v108;
  float32x2_t v109;
  float v110;
  float v111;
  float32x4_t *v112;
  float32x4_t *v113;
  float32x4_t *v114;
  float v115;
  float32x4_t v116;
  int v117;
  int8x16_t v118;
  __float2 v119;
  int v120;
  float v121;
  int8x16_t v122;
  int8x16_t v123;
  int8x16_t v124;
  int32x2_t v125;
  int32x2_t v126;
  float32x2_t v127;
  float32x2_t v128;
  float v129;
  __float2 v130;
  int8x16_t v131;
  float32x4_t v132;
  float32x4_t v133;
  int32x2_t v134;
  float32x2_t v135;
  float32x2_t v136;
  float32x2_t v137;
  float32x4_t v138;
  int8x16_t v139;
  float32x4_t v140;
  int32x2_t v141;
  float32x2_t v142;
  float32x2_t v143;
  float32x2_t v144;
  float32x2_t v145;
  float32x4_t v146;
  float32x4_t *v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t *v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t *v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x2_t v163;
  float32x2_t v164;
  float32x4_t v165;
  float32x4_t v166;
  int32x2_t v167;
  float32x2_t v168;
  float32x2_t v169;
  float32x2_t v170;
  float32x2_t v171;
  float32x4_t v172;
  float32x4_t *v173;
  float32x4_t v174;
  float32x4_t v175;
  float32x4_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  const btTransform *v181;
  const btTransform *v182;
  float32x4_t v183;
  float32x4_t v184;
  float32x4_t v185;
  float32x4_t v186;
  int8x16_t v187;
  float v188;
  float v189;
  float v190;
  float32x4_t v191;
  float v192;
  float v193;
  float32x4_t v194;
  float32x4_t v195;
  uint64_t v196;
  uint64_t v197;
  float32x2_t v198;
  float32x4_t v199;
  float32x4_t v200;
  float32x2_t v201;
  float32x4_t v202;
  float32x4_t v203;
  float32x4_t v204;
  float32x4_t v205;
  float v206;
  float32x4_t v207;
  float32x4_t v208;
  float32x4_t v209;
  float32x4_t v210;
  float v211;
  btMatrix3x3 v212;
  _QWORD *v213;
  float32x4_t v214;
  float32x4_t v215;
  float32x4_t v216;
  float32x4_t v217;
  float32x4_t v218;
  float32x4_t v219;
  float32x4_t v220;
  float32x4_t v221;
  float32x4_t v222;
  float32x4_t v223;
  float32x4_t v224;
  float32x4_t v225;
  BOOL v226;
  uint64_t v227;
  float32x4_t v228;
  btQuaternion v229;
  void *v230;
  char v231;
  uint64_t (**v232)();
  _BYTE v233[16];
  float32x4_t v234;
  uint64_t v235;
  float32x4_t *v236;
  float v237;
  float32x4_t v238;
  float32x4_t v239;
  float32x4_t v240;
  float32x4_t v241;
  float32x4_t v242;
  float32x4_t v243;
  float32x4_t v244;
  float32x4_t v245;
  float v246;
  uint64_t v247;

  v247 = *MEMORY[0x1E0C80C00];
  v10 = *(btPersistentManifold **)(a1 + 40);
  if (!v10)
  {
    v10 = (btPersistentManifold *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 + 16));
    *(_QWORD *)(a1 + 40) = v10;
    *(_BYTE *)(a1 + 32) = 1;
  }
  a5[1] = v10;
  v11 = *(_QWORD *)(a2 + 8);
  v12 = *(float32x4_t **)(a3 + 8);
  if (*(_DWORD *)(v11 + 8) == 10 && v12->i32[2] == 10)
  {
    ContactBreakingThreshold = btPersistentManifold::getContactBreakingThreshold(v10);
    v14 = *(int *)(v11 + 72);
    v15 = *(float *)(v11 + 48 + 4 * v14);
    v16 = ((int)v14 + 2) % 3;
    v17 = v12[4].i32[2];
    v18 = v12[3].f32[v17];
    v19 = *(float32x4_t **)(a2 + 24);
    v20 = *(float32x4_t **)(a3 + 24);
    v21 = &v19->f32[v14];
    v22 = *v21;
    v23 = v21[4];
    v25.f32[0] = *v21;
    v24 = v21[8];
    v25.f32[1] = v23;
    v25.i64[1] = LODWORD(v24);
    v26 = &v20->i32[v17];
    v27.i32[0] = *v26;
    v27.i32[1] = v26[4];
    v27.i32[2] = v26[8];
    v28 = v20[3];
    v29 = vsubq_f32(v28, v19[3]);
    v29.i32[3] = 0;
    v30 = (int8x16_t)vmulq_f32(v25, v27);
    LODWORD(_S20) = vadd_f32(vpadd_f32(*(float32x2_t *)v30.i8, *(float32x2_t *)v30.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL)).u32[0];
    v32 = (int8x16_t)vmulq_f32(v25, v29);
    LODWORD(v33) = vadd_f32(vpadd_f32(*(float32x2_t *)v32.i8, *(float32x2_t *)v32.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL)).u32[0];
    v34 = (int8x16_t)vmulq_f32(v27, v29);
    v35 = vadd_f32(vpadd_f32(*(float32x2_t *)v34.i8, *(float32x2_t *)v34.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL)).f32[0];
    __asm { FMLS            S6, S20, V20.S[0] }
    v41 = 0.0;
    if (_S6 != 0.0)
    {
      v42 = (float)(v33 + (float)((float)-v35 * _S20)) / _S6;
      v41 = -v15;
      if (v42 >= (float)-v15)
      {
        v41 = v42;
        if (v42 > v15)
          v41 = v15;
      }
    }
    v43 = v12[3].f32[((int)v17 + 2) % 3];
    v44 = (float)(v41 * _S20) - v35;
    v45 = -v18;
    if (v44 >= (float)-v18)
    {
      if (v44 <= v18)
        goto LABEL_76;
      v65 = v33 + (float)(v18 * _S20);
      v41 = -v15;
      v44 = v12[3].f32[v17];
      if (v65 < (float)-v15)
        goto LABEL_76;
      if (v65 <= v15)
      {
        v41 = v65;
        goto LABEL_76;
      }
    }
    else
    {
      v46 = v33 + (float)(v45 * _S20);
      v41 = -v15;
      v44 = v45;
      if (v46 < (float)-v15)
      {
LABEL_76:
        v183 = vmulq_n_f32(v25, v41);
        v184 = vmulq_n_f32(v27, v44);
        v184.i32[3] = 0;
        v185 = vsubq_f32(v29, v183);
        v185.i32[3] = 0;
        v186 = vaddq_f32(v184, v185);
        v187 = (int8x16_t)vmulq_f32(v186, v186);
        LODWORD(v188) = vadd_f32(vpadd_f32(*(float32x2_t *)v187.i8, *(float32x2_t *)v187.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v187, v187, 8uLL)).u32[0];
        v189 = sqrtf(v188);
        v190 = (float)(v189 - *(float *)(v11 + 48 + 4 * v16)) - v43;
        if (v190 <= ContactBreakingThreshold)
        {
          if (v188 <= 1.4211e-14)
          {
            if (fabsf(v24) <= 0.70711)
            {
              v193 = 1.0 / sqrtf((float)(v23 * v23) + (float)(v22 * v22));
              v212.var0[0].var0.var0[0] = -(float)(v23 * v193);
              *(_QWORD *)&v212.var0[0].var0.var0[1] = COERCE_UNSIGNED_INT(v22 * v193);
            }
            else
            {
              v192 = 1.0 / sqrtf((float)(v24 * v24) + (float)(v23 * v23));
              v212.var0[0].var0.var0[0] = 0.0;
              v212.var0[0].var0.var0[1] = -(float)(v24 * v192);
              v212.var0[0].var0.var0[2] = v23 * v192;
            }
          }
          else
          {
            v191 = vmulq_n_f32(v186, -1.0 / v189);
            v191.i32[3] = 0;
            v212.var0[0] = (btVector3)v191;
          }
          v194 = vaddq_f32(v28, v184);
          v195 = vmulq_n_f32((float32x4_t)v212.var0[0], v43);
          v195.i32[3] = 0;
          v238 = vaddq_f32(v194, v195);
        }
        if (v190 < ContactBreakingThreshold)
          (*(void (**)(_QWORD *, btMatrix3x3 *, float32x4_t *, float))(*a5 + 32))(a5, &v212, &v238, v190);
LABEL_85:
        v178 = a5[1];
        if (!*(_DWORD *)(v178 + 800))
          return;
        v196 = *(_QWORD *)(v178 + 784);
        v197 = *(_QWORD *)(a5[2] + 16);
        if (v196 == v197)
        {
          v181 = (const btTransform *)(v196 + 16);
          v197 = *(_QWORD *)(a5[3] + 16);
        }
        else
        {
          v181 = (const btTransform *)(*(_QWORD *)(a5[3] + 16) + 16);
        }
        v182 = (const btTransform *)(v197 + 16);
        goto LABEL_90;
      }
      if (v46 <= v15)
      {
        v41 = v33 + (float)(v45 * _S20);
        goto LABEL_76;
      }
    }
    v41 = v15;
    goto LABEL_76;
  }
  v246 = 1.0e18;
  btGjkPairDetector::btGjkPairDetector(v233, v11, v12, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  v235 = v11;
  v236 = v12;
  v47 = (*(float (**)(uint64_t))(*(_QWORD *)v11 + 96))(v11);
  v48 = v47 + (*(float (**)(float32x4_t *))(v12->i64[0] + 96))(v12);
  v49 = btPersistentManifold::getContactBreakingThreshold(*(btPersistentManifold **)(a1 + 40));
  v246 = (float)(v48 + v49) * (float)(v48 + v49);
  v50 = *(float32x4_t **)(a2 + 24);
  v51 = v50[1];
  v238 = *v50;
  v239 = v51;
  v52 = v50[3];
  v240 = v50[2];
  v241 = v52;
  v53 = *(float32x4_t **)(a3 + 24);
  v242 = *v53;
  v243 = v53[1];
  v244 = v53[2];
  v245 = v53[3];
  v54 = *(_DWORD *)(v11 + 8);
  if (v54 > 6)
    goto LABEL_43;
  v55 = v12->i32[2];
  if (v55 > 6)
    goto LABEL_43;
  v232 = &off_1EA59AB20;
  v56 = 0.0;
  if (v54)
  {
    v57 = (*(float (**)(uint64_t))(*(_QWORD *)v11 + 96))(v11);
    if (!v12->i32[2])
      goto LABEL_18;
    goto LABEL_17;
  }
  v57 = 0.0;
  if (v55)
LABEL_17:
    v56 = (*(float (**)(float32x4_t *))(v12->i64[0] + 96))(v12);
LABEL_18:
  *(_QWORD *)v212.var0[0].var0.var0 = &off_1EA59AB58;
  *(_QWORD *)&v212.var0[0].var0.var0[2] = a5;
  *(_QWORD *)v212.var0[2].var0.var0 = __PAIR64__(LODWORD(v56), LODWORD(v57));
  LOBYTE(v212.var0[2].var0.var0[3]) = 0;
  if (*(_QWORD *)(v11 + 72))
  {
    if (v12[4].i64[1])
    {
      v58 = btPersistentManifold::getContactBreakingThreshold(*(btPersistentManifold **)(a1 + 40));
      if (*(_BYTE *)(a4 + 32))
      {
        if ((btPolyhedralContactClipping::findSeparatingAxis(*(float32x4_t **)(v11 + 72), (float32x4_t *)v12[4].i64[1], *(btTransform **)(a2 + 24), *(btTransform **)(a3 + 24), (float32x4_t *)&v229, (uint64_t)a5) & 1) != 0)
        {
          v64 = -1.0e30;
LABEL_68:
          btPolyhedralContactClipping::clipHullAgainstHull((float32x4_t *)&v229, *(_QWORD *)(v11 + 72), v12[4].i64[1], *(float32x4_t **)(a2 + 24), *(float32x4_t **)(a3 + 24), (uint64_t)a5, v64 - v58, v58, v59, v60, v61, v62, v63);
        }
      }
      else
      {
        btGjkPairDetector::getClosestPoints(v233, &v238, &v212, *(_QWORD *)(a4 + 24), 0);
        v229 = (btQuaternion)v212.var0[1];
        if (LOBYTE(v212.var0[2].var0.var0[3]))
        {
          v64 = v212.var0[2].var0.var0[2];
          if (v212.var0[2].var0.var0[2] < 0.0)
            goto LABEL_68;
        }
      }
      if (*(_BYTE *)(a1 + 32))
      {
        v178 = a5[1];
        if (*(_DWORD *)(v178 + 800))
        {
          v179 = *(_QWORD *)(v178 + 784);
          v180 = *(_QWORD *)(a5[2] + 16);
          if (v179 == v180)
            v180 = *(_QWORD *)(a5[3] + 16);
          else
            v179 = *(_QWORD *)(a5[3] + 16);
          v181 = (const btTransform *)(v179 + 16);
          v182 = (const btTransform *)(v180 + 16);
LABEL_90:
          btPersistentManifold::refreshContactPoints((btPersistentManifold *)v178, v181, v182);
          return;
        }
      }
      return;
    }
    if (v12->i32[2] == 1)
    {
      *(_QWORD *)&v229.var0.var0[1] = 0x100000000;
      v66 = *(float32x4_t **)(a3 + 24);
      v67 = v12[5];
      v68 = vmulq_f32(*v66, v67);
      v69 = (int8x16_t)vmulq_f32(v67, v66[1]);
      v70 = (int8x16_t)vmulq_f32(v67, v66[2]);
      v70.i32[3] = 0;
      *(float32x2_t *)v68.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v68.f32, *(float32x2_t *)v69.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v68, (int8x16_t)v68, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v69, v69, 8uLL)));
      *(float32x2_t *)&v68.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v70.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v70, v70, 8uLL)), 0);
      v208 = vaddq_f32(v68, v66[3]);
      v71 = (void **)btAlignedAllocInternal(16, 16);
      *(float32x4_t *)v71 = v208;
      v72 = *(float32x4_t **)(a3 + 24);
      v73 = v12[6];
      v74 = vmulq_f32(*v72, v73);
      v75 = (int8x16_t)vmulq_f32(v73, v72[1]);
      v76 = (int8x16_t)vmulq_f32(v73, v72[2]);
      v76.i32[3] = 0;
      *(float32x2_t *)v74.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v74.f32, *(float32x2_t *)v75.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v74, (int8x16_t)v74, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v75, v75, 8uLL)));
      *(float32x2_t *)&v74.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v76.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v76, v76, 8uLL)), 0);
      v209 = vaddq_f32(v74, v72[3]);
      v77 = (_OWORD *)btAlignedAllocInternal(32, 16);
      *v77 = *(_OWORD *)v71;
      btAlignedFreeInternal(v71);
      v231 = 1;
      v230 = v77;
      v77[1] = v209;
      v78 = *(float32x4_t **)(a3 + 24);
      v79 = v12[7];
      v80 = vmulq_f32(*v78, v79);
      v81 = (int8x16_t)vmulq_f32(v79, v78[1]);
      v82 = (int8x16_t)vmulq_f32(v79, v78[2]);
      v82.i32[3] = 0;
      *(float32x2_t *)v80.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v80.f32, *(float32x2_t *)v81.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v80, (int8x16_t)v80, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v81, v81, 8uLL)));
      *(float32x2_t *)&v80.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v82.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v82, v82, 8uLL)), 0);
      v210 = vaddq_f32(v80, v78[3]);
      v83 = (_OWORD *)btAlignedAllocInternal(64, 16);
      v84 = (void **)v230;
      *v83 = *(_OWORD *)v230;
      v83[1] = *((_OWORD *)v84 + 1);
      if (v231)
        btAlignedFreeInternal(v84);
      v231 = 1;
      v230 = v83;
      v83[2] = v210;
      *(_QWORD *)&v229.var0.var0[1] = 0x400000003;
      v85 = btPersistentManifold::getContactBreakingThreshold(*(btPersistentManifold **)(a1 + 40));
      btGjkPairDetector::getClosestPoints(v233, &v238, &v232, *(_QWORD *)(a4 + 24), 0);
      v86 = (int8x16_t)vmulq_f32(v234, v234);
      v87 = vadd_f32(vpadd_f32(*(float32x2_t *)v86.i8, *(float32x2_t *)v86.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v86, v86, 8uLL)).f32[0];
      if (v87 > 0.00000011921)
      {
        v88 = vmulq_n_f32(v234, 1.0 / v87);
        v88.i32[3] = 0;
        v228 = v88;
        v89 = v237;
        v90 = v89 - (*(float (**)(uint64_t))(*(_QWORD *)v11 + 96))(v11);
        v91 = (*(float (**)(float32x4_t *))(v12->i64[0] + 96))(v12);
        btPolyhedralContactClipping::clipFaceAgainstHull(&v228, *(_QWORD *)(v11 + 72), *(float32x4_t **)(a2 + 24), (uint64_t)&v229, (uint64_t)a5, (float)(v90 - v91) - v85, v85, v92, v93, v94, v95, v96);
      }
      if (*(_BYTE *)(a1 + 32))
      {
        v97 = a5[1];
        if (*(_DWORD *)(v97 + 800))
        {
          v98 = *(_QWORD *)(v97 + 784);
          v99 = *(_QWORD *)(a5[2] + 16);
          if (v98 == v99)
            v99 = *(_QWORD *)(a5[3] + 16);
          else
            v98 = *(_QWORD *)(a5[3] + 16);
          btPersistentManifold::refreshContactPoints((btPersistentManifold *)v97, (const btTransform *)(v98 + 16), (const btTransform *)(v99 + 16));
        }
      }
      if (v230 && v231)
        btAlignedFreeInternal((void **)v230);
      return;
    }
  }
LABEL_43:
  btGjkPairDetector::getClosestPoints(v233, &v238, a5, *(_QWORD *)(a4 + 24), 0);
  if (*(_DWORD *)(a1 + 52))
  {
    if (*(_DWORD *)(a5[1] + 800) < *(_DWORD *)(a1 + 56))
    {
      v100 = (int8x16_t)vmulq_f32(v234, v234);
      v101 = vpadd_f32(*(float32x2_t *)v100.i8, *(float32x2_t *)v100.i8);
      v102 = vextq_s8(v100, v100, 8uLL);
      v103 = vadd_f32(v101, *(float32x2_t *)v102.i8).f32[0];
      if (v103 > 0.00000011921)
      {
        _Q3 = vmulq_n_f32(v234, 1.0 / v103);
        _Q3.i32[3] = 0;
        v207 = _Q3;
        v206 = _Q3.f32[2];
        _S1 = _Q3.i32[1];
        if (fabsf(_Q3.f32[2]) <= 0.70711)
        {
          v109 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)_Q3.f32, 0);
          v109.f32[0] = -_Q3.f32[1];
          *(float32x2_t *)v102.i8 = vmul_n_f32(v109, 1.0/ sqrtf(vmlas_n_f32(vmuls_lane_f32(_Q3.f32[1], *(float32x2_t *)_Q3.f32, 1), _Q3.f32[0], _Q3.f32[0])));
          v102.i32[2] = 0;
          v200 = (float32x4_t)v102;
        }
        else
        {
          __asm { FMLA            S2, S1, V3.S[1] }
          v107 = 1.0 / sqrtf(_S2);
          v108.i32[0] = 0;
          v108.f32[1] = -(float)(_Q3.f32[2] * v107);
          v108.i64[1] = COERCE_UNSIGNED_INT(vmuls_lane_f32(v107, *(float32x2_t *)_Q3.f32, 1));
          v200 = v108;
        }
        v110 = (*(float (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
        v111 = (*(float (**)(float32x4_t *))(v12->i64[0] + 32))(v12);
        if (v110 >= v111)
        {
          v112 = &v243;
          v113 = &v244;
          v114 = &v245;
          v115 = *(float *)&gContactBreakingThreshold / v111;
          if ((float)(*(float *)&gContactBreakingThreshold / v111) > 0.3927)
            v115 = 0.3927;
          v116 = v242;
        }
        else
        {
          v112 = &v239;
          v113 = &v240;
          v114 = &v241;
          v115 = *(float *)&gContactBreakingThreshold / v110;
          if ((float)(*(float *)&gContactBreakingThreshold / v110) > 0.3927)
            v115 = 0.3927;
          v116 = v238;
        }
        v205 = v116;
        v117 = *(_DWORD *)(a1 + 52);
        if (v117 >= 1)
        {
          v203 = *v113;
          v204 = *v112;
          v202 = *v114;
          v118 = (int8x16_t)vmulq_f32(v200, v200);
          LODWORD(v211) = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v118, v118, 8uLL), vpadd_f32(*(float32x2_t *)v118.i8, *(float32x2_t *)v118.i8)).u32[0];
          v119 = __sincosf_stret(v115 * 0.5);
          v120 = 0;
          v121 = v119.__sinval / sqrtf(v211);
          *(float32x2_t *)v122.i8 = vmul_n_f32(*(float32x2_t *)v200.f32, v121);
          v123.i64[0] = v122.i64[0];
          v123.i64[1] = __PAIR64__(LODWORD(v119.__cosval), COERCE_UNSIGNED_INT(vmuls_lane_f32(v121, v200, 2)));
          v124 = (int8x16_t)vmulq_f32(v207, v207);
          v125 = (int32x2_t)vextq_s8(v123, v123, 8uLL).u64[0];
          v126 = vzip1_s32(v125, *(int32x2_t *)v122.i8);
          v199 = (float32x4_t)v123;
          v201 = *(float32x2_t *)v122.i8;
          v198 = (float32x2_t)vextq_s8(v123, v122, 0xCuLL).u64[0];
          v127 = (float32x2_t)vext_s8(*(int8x8_t *)v122.i8, (int8x8_t)v125, 4uLL);
          v128 = (float32x2_t)vrev64_s32(v126);
          v129 = sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v124, v124, 8uLL), vpadd_f32(*(float32x2_t *)v124.i8, *(float32x2_t *)v124.i8)).f32[0]);
          do
          {
            if (v211 > 0.00000011921)
            {
              v130 = __sincosf_stret((float)((float)(6.2832 / (float)v117) * (float)v120) * 0.5);
              v131.i64[1] = v207.i64[1];
              *(float32x2_t *)v131.i8 = vmul_n_f32(*(float32x2_t *)v207.f32, v130.__sinval / v129);
              v132.i64[0] = v131.i64[0];
              v132.i64[1] = __PAIR64__(LODWORD(v130.__cosval), v206 * (float)(v130.__sinval / v129));
              if (v110 >= v111)
              {
                v159 = *(float32x4_t **)(a2 + 24);
                v160 = v159[1];
                v238 = *v159;
                v239 = v160;
                v161 = v159[3];
                v240 = v159[2];
                v241 = v161;
                v162 = (float32x4_t)veorq_s8((int8x16_t)v132, (int8x16_t)xmmword_1DD007D60);
                v161.i64[0] = vextq_s8((int8x16_t)v162, (int8x16_t)v162, 8uLL).u64[0];
                v163 = (float32x2_t)vzip1_s32(*(int32x2_t *)v161.f32, *(int32x2_t *)v162.f32);
                *(int8x8_t *)v161.f32 = vext_s8(*(int8x8_t *)v162.f32, *(int8x8_t *)v161.f32, 4uLL);
                v164 = vmul_f32(v198, v163);
                *(float32x2_t *)v165.f32 = vmul_f32(v127, v163);
                *(float32x2_t *)&v165.u32[2] = vmul_f32(v128, *(float32x2_t *)v161.f32);
                *(float32x2_t *)v161.f32 = vadd_f32(vmul_laneq_f32(*(float32x2_t *)v162.f32, v199, 3), vmul_f32((float32x2_t)v126, *(float32x2_t *)v161.f32));
                *(float32x2_t *)&v161.u32[2] = vadd_f32(vmul_lane_f32(*(float32x2_t *)v162.f32, v201, 1), v164);
                v166 = vaddq_f32(vsubq_f32(vmulq_laneq_f32(v199, v162, 3), v165), (float32x4_t)veorq_s8((int8x16_t)v161, (int8x16_t)xmmword_1DD007D50));
                *(int32x2_t *)v161.f32 = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v166, (int8x16_t)v166, 8uLL), *(int32x2_t *)v166.f32);
                v165.i64[0] = vextq_s8((int8x16_t)v132, (int8x16_t)v132, 8uLL).u64[0];
                v167 = vzip1_s32(*(int32x2_t *)v165.f32, *(int32x2_t *)v131.i8);
                v168 = (float32x2_t)vextq_s8((int8x16_t)v166, (int8x16_t)v166, 4uLL).u64[0];
                *(int8x8_t *)v165.f32 = vext_s8(*(int8x8_t *)v131.i8, *(int8x8_t *)v165.f32, 4uLL);
                v169 = vmul_laneq_f32(*(float32x2_t *)v166.f32, v132, 3);
                v170 = vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v132, v131, 0xCuLL), *(float32x2_t *)v161.f32);
                v171 = vmul_lane_f32(*(float32x2_t *)v166.f32, *(float32x2_t *)v131.i8, 1);
                *(float32x2_t *)v161.f32 = vmul_f32(*(float32x2_t *)v165.f32, *(float32x2_t *)v161.f32);
                *(float32x2_t *)&v161.u32[2] = vmul_f32((float32x2_t)vrev64_s32(v167), v168);
                v172 = vmulq_laneq_f32(v132, v166, 3);
                *(float32x2_t *)v166.f32 = vadd_f32(v169, vmul_f32((float32x2_t)v167, v168));
                *(float32x2_t *)&v166.u32[2] = vadd_f32(v171, v170);
                v229 = (btQuaternion)vaddq_f32(vsubq_f32(v172, v161), (float32x4_t)veorq_s8((int8x16_t)v166, (int8x16_t)xmmword_1DD007D50));
                btMatrix3x3::setRotation(&v212, (float32x4_t *)&v229);
                v173 = *(float32x4_t **)(a3 + 24);
                v174 = *v173;
                v175 = v173[1];
                v174.i32[3] = 0;
                v175.i32[3] = 0;
                v176 = v173[2];
                v176.i32[3] = 0;
                v155 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v174, v212.var0[0].var0.var0[0]), v175, *(float32x2_t *)v212.var0[0].var0.var0, 1), v176, (float32x4_t)v212.var0[0], 2);
                v156 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v174, v212.var0[1].var0.var0[0]), v175, *(float32x2_t *)v212.var0[1].var0.var0, 1), v176, (float32x4_t)v212.var0[1], 2);
                v157 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v174, v212.var0[2].var0.var0[0]), v175, *(float32x2_t *)v212.var0[2].var0.var0, 1), v176, (float32x4_t)v212.var0[2], 2);
                v242 = v155;
                v243 = v156;
                v244 = v157;
                v151 = v238;
                v152 = v239;
                v153 = v240;
                v158 = v245;
              }
              else
              {
                v133 = (float32x4_t)veorq_s8((int8x16_t)v132, (int8x16_t)xmmword_1DD007D60);
                v134 = (int32x2_t)vextq_s8((int8x16_t)v133, (int8x16_t)v133, 8uLL).u64[0];
                v135 = (float32x2_t)vzip1_s32(v134, *(int32x2_t *)v133.f32);
                v136 = (float32x2_t)vext_s8(*(int8x8_t *)v133.f32, (int8x8_t)v134, 4uLL);
                v137 = vmul_f32(v198, v135);
                *(float32x2_t *)v138.f32 = vmul_f32(v127, v135);
                *(float32x2_t *)&v138.u32[2] = vmul_f32(v128, v136);
                *(float32x2_t *)v139.i8 = vadd_f32(vmul_laneq_f32(*(float32x2_t *)v133.f32, v199, 3), vmul_f32((float32x2_t)v126, v136));
                v139.u64[1] = (unint64_t)vadd_f32(vmul_lane_f32(*(float32x2_t *)v133.f32, v201, 1), v137);
                v140 = vaddq_f32(vsubq_f32(vmulq_laneq_f32(v199, v133, 3), v138), (float32x4_t)veorq_s8(v139, (int8x16_t)xmmword_1DD007D50));
                *(int32x2_t *)v139.i8 = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v140, (int8x16_t)v140, 8uLL), *(int32x2_t *)v140.f32);
                v138.i64[0] = vextq_s8((int8x16_t)v132, (int8x16_t)v132, 8uLL).u64[0];
                v141 = vzip1_s32(*(int32x2_t *)v138.f32, *(int32x2_t *)v131.i8);
                v142 = (float32x2_t)vextq_s8((int8x16_t)v140, (int8x16_t)v140, 4uLL).u64[0];
                *(int8x8_t *)v138.f32 = vext_s8(*(int8x8_t *)v131.i8, *(int8x8_t *)v138.f32, 4uLL);
                v143 = vmul_laneq_f32(*(float32x2_t *)v140.f32, v132, 3);
                v144 = vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v132, v131, 0xCuLL), *(float32x2_t *)v139.i8);
                v145 = vmul_lane_f32(*(float32x2_t *)v140.f32, *(float32x2_t *)v131.i8, 1);
                *(float32x2_t *)v139.i8 = vmul_f32(*(float32x2_t *)v138.f32, *(float32x2_t *)v139.i8);
                v139.u64[1] = (unint64_t)vmul_f32((float32x2_t)vrev64_s32(v141), v142);
                v146 = vmulq_laneq_f32(v132, v140, 3);
                *(float32x2_t *)v140.f32 = vadd_f32(v143, vmul_f32((float32x2_t)v141, v142));
                *(float32x2_t *)&v140.u32[2] = vadd_f32(v145, v144);
                v229 = (btQuaternion)vaddq_f32(vsubq_f32(v146, (float32x4_t)v139), (float32x4_t)veorq_s8((int8x16_t)v140, (int8x16_t)xmmword_1DD007D50));
                btMatrix3x3::setRotation(&v212, (float32x4_t *)&v229);
                v147 = *(float32x4_t **)(a2 + 24);
                v148 = *v147;
                v149 = v147[1];
                v148.i32[3] = 0;
                v149.i32[3] = 0;
                v150 = v147[2];
                v150.i32[3] = 0;
                v151 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v148, v212.var0[0].var0.var0[0]), v149, *(float32x2_t *)v212.var0[0].var0.var0, 1), v150, (float32x4_t)v212.var0[0], 2);
                v152 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v148, v212.var0[1].var0.var0[0]), v149, *(float32x2_t *)v212.var0[1].var0.var0, 1), v150, (float32x4_t)v212.var0[1], 2);
                v153 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v148, v212.var0[2].var0.var0[0]), v149, *(float32x2_t *)v212.var0[2].var0.var0, 1), v150, (float32x4_t)v212.var0[2], 2);
                v238 = v151;
                v239 = v152;
                v240 = v153;
                v154 = *(float32x4_t **)(a3 + 24);
                v155 = *v154;
                v242 = *v154;
                v156 = v154[1];
                v243 = v156;
                v157 = v154[2];
                v244 = v157;
                v158 = v154[3];
                v245 = v158;
              }
              v177 = *(_QWORD *)(a4 + 24);
              *(_QWORD *)v212.var0[0].var0.var0 = &off_1EA5979C0;
              v213 = a5;
              v214 = v151;
              v215 = v152;
              v216 = v153;
              v217 = v241;
              v218 = v155;
              v219 = v156;
              v220 = v157;
              v221 = v158;
              v222 = v205;
              v223 = v204;
              v224 = v203;
              v225 = v202;
              v226 = v110 < v111;
              v227 = v177;
              btGjkPairDetector::getClosestPoints(v233, &v238, &v212, v177, 0);
              v117 = *(_DWORD *)(a1 + 52);
            }
            ++v120;
          }
          while (v120 < v117);
        }
      }
    }
  }
  if (*(_BYTE *)(a1 + 32))
    goto LABEL_85;
}

float btConvexConvexAlgorithm::calculateTimeOfImpact(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float32x4_t v5;
  int8x16_t v6;
  float32x4_t v7;
  int8x16_t v8;
  float v9;
  uint64_t v11;
  int v12;
  float v13;
  btConvexInternalShape *v14;
  uint64_t v15;
  int v16;
  float v17;
  btVoronoiSimplexSolver *v19[4];
  _BYTE v20[320];
  int v21;
  char v22;
  float32x4_t v23[11];
  float v24;
  uint64_t v25;
  int v26;
  void *v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v5 = vsubq_f32(*(float32x4_t *)(a2 + 128), *(float32x4_t *)(a2 + 64));
  v5.i32[3] = 0;
  v6 = (int8x16_t)vmulq_f32(v5, v5);
  if (vadd_f32(vpadd_f32(*(float32x2_t *)v6.i8, *(float32x2_t *)v6.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)).f32[0] >= (float)(*(float *)(a2 + 288) * *(float *)(a2 + 288)))
  {
    v9 = 1.0;
    if (disableCcd)
      return v9;
  }
  else
  {
    v7 = vsubq_f32(*(float32x4_t *)(a3 + 128), *(float32x4_t *)(a3 + 64));
    v7.i32[3] = 0;
    v8 = (int8x16_t)vmulq_f32(v7, v7);
    v9 = 1.0;
    if (vadd_f32(vpadd_f32(*(float32x2_t *)v8.i8, *(float32x2_t *)v8.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL)).f32[0] < (float)(*(float *)(a3 + 288) * *(float *)(a3 + 288))|| disableCcd != 0)
    {
      return v9;
    }
  }
  v11 = *(_QWORD *)(a2 + 208);
  v12 = *(_DWORD *)(a3 + 284);
  btConvexInternalShape::btConvexInternalShape((btConvexInternalShape *)&v27);
  v27 = &unk_1EA5956E8;
  v28 = 8;
  v29 = v12;
  v30 = v12;
  v23[0].i64[0] = (uint64_t)&off_1EA598630;
  v24 = 1.0e18;
  v25 = 0;
  v26 = 0;
  v21 = 953267991;
  v22 = 0;
  btGjkConvexCast::btGjkConvexCast(v19, v11, (uint64_t)&v27, (uint64_t)v20);
  v9 = 1.0;
  if (btGjkConvexCast::calcTimeOfImpact(v19, (const btTransform *)(a2 + 16), (const btTransform *)(a2 + 80), (const btTransform *)(a3 + 16), (const btTransform *)(a3 + 80), v23))
  {
    v13 = v24;
    if (*(float *)(a2 + 280) > v24)
      *(float *)(a2 + 280) = v24;
    if (*(float *)(a3 + 280) > v13)
      *(float *)(a3 + 280) = v13;
    if (v13 < 1.0)
      v9 = v13;
    else
      v9 = 1.0;
  }
  C3DSceneSourcePerformConsistencyCheck(v19);
  v14 = (btConvexInternalShape *)C3DSceneSourcePerformConsistencyCheck(&v27);
  v15 = *(_QWORD *)(a3 + 208);
  v16 = *(_DWORD *)(a2 + 284);
  btConvexInternalShape::btConvexInternalShape(v14);
  v27 = &unk_1EA5956E8;
  v28 = 8;
  v29 = v16;
  v30 = v16;
  v23[0].i64[0] = (uint64_t)&off_1EA598630;
  v24 = 1.0e18;
  v25 = 0;
  v26 = 0;
  v21 = 953267991;
  v22 = 0;
  btGjkConvexCast::btGjkConvexCast(v19, (uint64_t)&v27, v15, (uint64_t)v20);
  if (btGjkConvexCast::calcTimeOfImpact(v19, (const btTransform *)(a2 + 16), (const btTransform *)(a2 + 80), (const btTransform *)(a3 + 16), (const btTransform *)(a3 + 80), v23))
  {
    v17 = v24;
    if (*(float *)(a2 + 280) > v24)
      *(float *)(a2 + 280) = v24;
    if (*(float *)(a3 + 280) > v17)
      *(float *)(a3 + 280) = v17;
    if (v9 > v17)
      v9 = v17;
  }
  C3DSceneSourcePerformConsistencyCheck(v19);
  C3DSceneSourcePerformConsistencyCheck(&v27);
  return v9;
}

int8x16_t btConvexConvexAlgorithm::CreateFunc::CreateCollisionAlgorithm(int8x16_t *a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int8x16_t result;
  int8x16_t v9;

  v4 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)*a2 + 112))(*a2, 64);
  v5 = a2[1];
  v6 = a1[2].i64[0];
  v9 = a1[1];
  v7 = btActivatingCollisionAlgorithm::btActivatingCollisionAlgorithm(v4, a2);
  *v7 = &off_1EA597490;
  result = vextq_s8(v9, v9, 8uLL);
  *((int8x16_t *)v7 + 1) = result;
  *((_BYTE *)v7 + 32) = 0;
  v7[5] = v5;
  *((_BYTE *)v7 + 48) = 0;
  *(_QWORD *)((char *)v7 + 52) = v6;
  return result;
}

void btConvexConvexAlgorithm::getAllContactManifolds(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  BOOL v10;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 && *(_BYTE *)(a1 + 32))
  {
    v5 = *(_DWORD *)(a2 + 4);
    if (v5 == *(_DWORD *)(a2 + 8))
    {
      v6 = v5 ? 2 * v5 : 1;
      if (v5 < v6)
      {
        if (v6)
        {
          v7 = btAlignedAllocInternal(8 * v6, 16);
          v5 = *(_DWORD *)(a2 + 4);
        }
        else
        {
          v7 = 0;
        }
        if (v5 >= 1)
        {
          v8 = 0;
          do
          {
            *(_QWORD *)(v7 + v8) = *(_QWORD *)(*(_QWORD *)(a2 + 16) + v8);
            v8 += 8;
          }
          while (8 * v5 != v8);
        }
        v9 = *(void ***)(a2 + 16);
        if (v9)
          v10 = *(_BYTE *)(a2 + 24) == 0;
        else
          v10 = 1;
        if (!v10)
        {
          btAlignedFreeInternal(v9);
          v5 = *(_DWORD *)(a2 + 4);
        }
        *(_BYTE *)(a2 + 24) = 1;
        *(_QWORD *)(a2 + 16) = v7;
        *(_DWORD *)(a2 + 8) = v6;
        v2 = *(_QWORD *)(a1 + 40);
      }
    }
    *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v5) = v2;
    *(_DWORD *)(a2 + 4) = v5 + 1;
  }
}

void btConvexConvexAlgorithm::processCollision(btCollisionObjectWrapper const*,btCollisionObjectWrapper const*,btDispatcherInfo const&,btManifoldResult *)::btDummyResult::~btDummyResult()
{
  JUMPOUT(0x1DF0D41C0);
}

void btConvexConvexAlgorithm::processCollision(btCollisionObjectWrapper const*,btCollisionObjectWrapper const*,btDispatcherInfo const&,btManifoldResult *)::btWithoutMarginResult::~btWithoutMarginResult()
{
  JUMPOUT(0x1DF0D41C0);
}

uint64_t btConvexConvexAlgorithm::processCollision(btCollisionObjectWrapper const*,btCollisionObjectWrapper const*,btDispatcherInfo const&,btManifoldResult *)::btWithoutMarginResult::addContactPoint(uint64_t a1, _OWORD *a2, float a3)
{
  float v3;

  *(float *)(a1 + 40) = a3;
  *(_OWORD *)(a1 + 16) = *a2;
  v3 = (float)(*(float *)(a1 + 36) + *(float *)(a1 + 32)) + a3;
  *(float *)(a1 + 40) = v3;
  if (v3 < 0.0)
    *(_BYTE *)(a1 + 44) = 1;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
}

void btPerturbedContactResult::~btPerturbedContactResult(btPerturbedContactResult *this)
{
  JUMPOUT(0x1DF0D41C0);
}

uint64_t btPerturbedContactResult::addContactPoint(btPerturbedContactResult *this, float32x4_t *a2, float32x4_t *a3, float a4)
{
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  int32x4_t v8;
  int8x16_t v9;
  float32x4_t v10;
  float32x4_t v11;
  int8x16_t v12;
  float32x4_t v13;
  float32x4_t v14;
  int8x16_t v15;
  int8x16_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  int8x16_t v30;
  int8x16_t v31;
  float32x4_t v32;
  int8x16_t v33;
  float32x2_t v34;
  __n128 v35;
  float32x4_t v36;
  int32x4_t v37;
  float32x4_t v38;
  int32x2_t v39;
  unsigned __int32 v40;
  float32x4_t v41;
  int8x16_t v42;
  float32x4_t v43;
  int8x16_t v44;
  float32x4_t v45;
  int8x16_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  int8x16_t v59;
  int8x16_t v60;
  float32x4_t v61;
  int8x16_t v62;
  float32x2_t v63;

  v4 = *a2;
  v5 = vmulq_n_f32(*a2, a4);
  v5.i32[3] = 0;
  v6 = *a3;
  if (*((_BYTE *)this + 256))
  {
    v7 = *((float32x4_t *)this + 4);
    v8 = *((int32x4_t *)this + 5);
    v9 = *((int8x16_t *)this + 6);
    v10 = (float32x4_t)vtrn1q_s32((int32x4_t)v7, v8);
    v11.i64[0] = vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL).u64[0];
    v10.i64[1] = v9.u32[0];
    v12.i64[0] = 0x8000000080000000;
    v12.i64[1] = 0x8000000080000000;
    v13 = (float32x4_t)veorq_s8(*((int8x16_t *)this + 7), v12);
    *(int32x2_t *)v7.f32 = vzip2_s32(*(int32x2_t *)v7.f32, *(int32x2_t *)v8.i8);
    *(int32x2_t *)&v7.u32[2] = vzip2_s32(*(int32x2_t *)v9.i8, 0);
    v14 = vmulq_f32(v10, v13);
    v15 = (int8x16_t)vmulq_f32(v7, v13);
    v11.i64[1] = vextq_s8(v9, v9, 8uLL).u32[0];
    v16 = (int8x16_t)vmulq_f32(v11, v13);
    v16.i32[3] = 0;
    v17 = *((float32x4_t *)this + 12);
    v18 = *((float32x4_t *)this + 13);
    *(float32x2_t *)v14.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v14.f32, *(float32x2_t *)v15.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL)));
    *(float32x2_t *)&v14.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v16.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL)), 0);
    v10.i32[3] = 0;
    v7.i32[3] = 0;
    v11.i32[3] = 0;
    v19 = *((float32x4_t *)this + 14);
    v20 = vmlaq_lane_f32(vmulq_n_f32(v10, v19.f32[0]), v7, *(float32x2_t *)v19.f32, 1);
    v21 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v10, v18.f32[0]), v7, *(float32x2_t *)v18.f32, 1), v11, v18, 2);
    v22 = (int8x16_t)vmulq_f32(v17, v14);
    v23 = (int8x16_t)vmulq_f32(v18, v14);
    v24 = (int8x16_t)vmulq_f32(v19, v14);
    v24.i32[3] = 0;
    v25 = vaddq_f32(v6, v5);
    v26 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v10, v17.f32[0]), v7, *(float32x2_t *)v17.f32, 1), v11, v17, 2);
    *(float32x2_t *)v7.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL)), vpadd_f32(*(float32x2_t *)v22.i8, *(float32x2_t *)v23.i8));
    *(float32x2_t *)&v7.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v24.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL)), 0);
    v27 = vmlaq_laneq_f32(v20, v11, v19, 2);
    v28 = vaddq_f32(v7, *((float32x4_t *)this + 15));
    v29 = vmulq_f32(v25, v26);
    v30 = (int8x16_t)vmulq_f32(v25, v21);
    v31 = (int8x16_t)vmulq_f32(v25, v27);
    v31.i32[3] = 0;
    *(float32x2_t *)v29.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL)), vpadd_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)v30.i8));
    *(float32x2_t *)&v29.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v31.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL)), 0);
    v32 = vsubq_f32(vaddq_f32(v28, v29), v6);
    v32.i32[3] = 0;
    v33 = (int8x16_t)vmulq_f32(v4, v32);
    v34 = vpadd_f32(*(float32x2_t *)v33.i8, *(float32x2_t *)v33.i8);
    v35 = (__n128)vextq_s8(v33, v33, 8uLL);
    v35.n128_u64[0] = (unint64_t)vadd_f32(v34, (float32x2_t)v35.n128_u64[0]);
  }
  else
  {
    v36 = *((float32x4_t *)this + 8);
    v37 = *((int32x4_t *)this + 9);
    v38 = *((float32x4_t *)this + 10);
    v39 = vzip2_s32(*(int32x2_t *)v38.f32, 0);
    v40 = vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL).u32[0];
    v41 = (float32x4_t)vtrn1q_s32((int32x4_t)v36, v37);
    v38.i64[0] = vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL).u64[0];
    v41.i64[1] = *((_OWORD *)this + 10);
    v42.i64[0] = 0x8000000080000000;
    v42.i64[1] = 0x8000000080000000;
    v43 = (float32x4_t)veorq_s8(*((int8x16_t *)this + 11), v42);
    v44 = (int8x16_t)vmulq_f32(v41, v43);
    *(int32x2_t *)v36.f32 = vzip2_s32(*(int32x2_t *)v36.f32, *(int32x2_t *)v37.i8);
    *(int32x2_t *)&v36.u32[2] = v39;
    v45 = vmulq_f32(v36, v43);
    v38.i64[1] = v40;
    v46 = (int8x16_t)vmulq_f32(v38, v43);
    v46.i32[3] = 0;
    *(float32x2_t *)v45.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v44.i8, *(float32x2_t *)v45.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v44, v44, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL)));
    *(float32x2_t *)&v45.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v46.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v46, v46, 8uLL)), 0);
    v47 = *((float32x4_t *)this + 12);
    v48 = *((float32x4_t *)this + 13);
    v41.i32[3] = 0;
    v36.i32[3] = 0;
    v38.i32[3] = 0;
    v49 = *((float32x4_t *)this + 14);
    v50 = vmlaq_lane_f32(vmulq_n_f32(v41, v49.f32[0]), v36, *(float32x2_t *)v49.f32, 1);
    v51 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v41, v48.f32[0]), v36, *(float32x2_t *)v48.f32, 1), v38, v48, 2);
    v52 = (int8x16_t)vmulq_f32(v47, v45);
    v53 = (int8x16_t)vmulq_f32(v48, v45);
    v54 = (int8x16_t)vmulq_f32(v49, v45);
    v54.i32[3] = 0;
    v55 = vaddq_f32(v6, v5);
    v56 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v41, v47.f32[0]), v36, *(float32x2_t *)v47.f32, 1), v38, v47, 2);
    v57 = vmlaq_laneq_f32(v50, v38, v49, 2);
    *(float32x2_t *)v38.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v52, v52, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v53, v53, 8uLL)), vpadd_f32(*(float32x2_t *)v52.i8, *(float32x2_t *)v53.i8));
    *(float32x2_t *)&v38.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v54.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v54, v54, 8uLL)), 0);
    v58 = vmulq_f32(v6, v56);
    v59 = (int8x16_t)vmulq_f32(v6, v51);
    v60 = (int8x16_t)vmulq_f32(v6, v57);
    v60.i32[3] = 0;
    *(float32x2_t *)v58.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v58, (int8x16_t)v58, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v59, v59, 8uLL)), vpadd_f32(*(float32x2_t *)v58.f32, *(float32x2_t *)v59.i8));
    *(float32x2_t *)&v58.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v60.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v60, v60, 8uLL)), 0);
    v61 = vsubq_f32(v55, vaddq_f32(vaddq_f32(v38, *((float32x4_t *)this + 15)), v58));
    v61.i32[3] = 0;
    v62 = (int8x16_t)vmulq_f32(v4, v61);
    v63 = vpadd_f32(*(float32x2_t *)v62.i8, *(float32x2_t *)v62.i8);
    v35 = (__n128)vextq_s8(v62, v62, 8uLL);
    v35.n128_u64[0] = (unint64_t)vadd_f32(v63, (float32x2_t)v35.n128_u64[0]);
  }
  return (*(uint64_t (**)(_QWORD, __n128))(**((_QWORD **)this + 6) + 32))(*((_QWORD *)this + 6), v35);
}

uint64_t btConvexPlaneCollisionAlgorithm::btConvexPlaneCollisionAlgorithm(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8)
{
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;

  v15 = btCollisionAlgorithm::btCollisionAlgorithm((_QWORD *)a1, a3);
  *v15 = &off_1EA598068;
  *((_BYTE *)v15 + 16) = 0;
  v15[3] = a2;
  *((_BYTE *)v15 + 32) = a6;
  *((_DWORD *)v15 + 9) = a7;
  *((_DWORD *)v15 + 10) = a8;
  if (!a2)
  {
    v16 = a6 == 0;
    if (a6)
      v17 = a4;
    else
      v17 = a5;
    if (v16)
      a5 = a4;
    if ((*(unsigned int (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a5 + 16), *(_QWORD *)(v17 + 16)))
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a5 + 16), *(_QWORD *)(v17 + 16));
      *(_BYTE *)(a1 + 16) = 1;
    }
  }
  return a1;
}

void btConvexPlaneCollisionAlgorithm::~btConvexPlaneCollisionAlgorithm(btConvexPlaneCollisionAlgorithm *this)
{
  *(_QWORD *)this = &off_1EA598068;
  if (*((_BYTE *)this + 16))
  {
    if (*((_QWORD *)this + 3))
      (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
  }
}

{
  *(_QWORD *)this = &off_1EA598068;
  if (*((_BYTE *)this + 16))
  {
    if (*((_QWORD *)this + 3))
      (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
  }
  JUMPOUT(0x1DF0D41C0);
}

void btConvexPlaneCollisionAlgorithm::collideSingleContact(uint64_t a1, float32x4_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float32x4_t *v12;
  float32x4_t v13;
  _OWORD *v14;
  float32x4_t v15;
  float32x4_t v16;
  int8x16_t v17;
  float32x4_t v18;
  int8x16_t v19;
  float32x4_t v20;
  int8x16_t v21;
  float32x4_t v22;
  int8x16_t v23;
  int8x16_t v24;
  float32x2_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  float32x2_t v32;
  float32x2_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t *v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  float32x4_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  float32x4_t *v59;
  float ContactBreakingThreshold;
  float32x4_t v61;
  float32x4_t v62;
  int8x16_t v63;
  int8x16_t v64;
  float32x4_t v65;
  float32x4_t *v66;
  float32x4_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float v85;
  float32x4_t v86;
  int8x16_t v87;
  btMatrix3x3 v88;

  if (*(_BYTE *)(a1 + 32))
    v8 = a4;
  else
    v8 = a3;
  if (*(_BYTE *)(a1 + 32))
    v9 = a3;
  else
    v9 = a4;
  v10 = *(_QWORD *)(v8 + 8);
  v11 = *(_QWORD *)(v9 + 8);
  v12 = *(float32x4_t **)(v8 + 24);
  v76 = v12[1];
  v78 = *v12;
  v13 = v12[3];
  v74 = v12[2];
  v14 = *(_OWORD **)(v9 + 24);
  v15 = *((float32x4_t *)v14 + 1);
  v16 = (float32x4_t)vtrn1q_s32(*(int32x4_t *)v14, (int32x4_t)v15);
  v17 = *((int8x16_t *)v14 + 2);
  v18.i64[0] = vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL).u64[0];
  v16.i64[1] = v17.u32[0];
  v19.i64[0] = 0x8000000080000000;
  v19.i64[1] = 0x8000000080000000;
  v20 = (float32x4_t)veorq_s8(*((int8x16_t *)v14 + 3), v19);
  v21 = (int8x16_t)vmulq_f32(v16, v20);
  *(int32x2_t *)v22.f32 = vzip2_s32(*(int32x2_t *)v14, *(int32x2_t *)v15.f32);
  *(int32x2_t *)&v22.u32[2] = vzip2_s32(*(int32x2_t *)v17.i8, 0);
  v23 = (int8x16_t)vmulq_f32(v22, v20);
  v18.i64[1] = vextq_s8(v17, v17, 8uLL).u32[0];
  v24 = (int8x16_t)vmulq_f32(v18, v20);
  v24.i32[3] = 0;
  v25 = vpadd_f32(*(float32x2_t *)v24.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL));
  *(float32x2_t *)v24.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v21.i8, *(float32x2_t *)v23.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL)));
  v26 = v78;
  v26.i32[3] = 0;
  v27 = v76;
  v27.i32[3] = 0;
  v28 = v74;
  v28.i32[3] = 0;
  v71 = (float32x4_t)v17;
  v72 = v28;
  v82 = vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v26, *(float32x2_t *)v14, 1), v27, *(float32x2_t *)v15.f32, 1), v28, *(float32x2_t *)v17.i8, 1);
  v84 = vmlaq_laneq_f32(vmulq_laneq_f32(v26, *(float32x4_t *)v14, 2), v27, v15, 2);
  v29 = (int8x16_t)vmulq_f32(v13, v16);
  v30 = (int8x16_t)vmulq_f32(v13, v22);
  v31 = (int8x16_t)vmulq_f32(v13, v18);
  v31.i32[3] = 0;
  v32 = vadd_f32(*(float32x2_t *)v24.i8, vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL)), vpadd_f32(*(float32x2_t *)v29.i8, *(float32x2_t *)v30.i8)));
  v80 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v26, COERCE_FLOAT(*v14)), v27, v15.f32[0]), v28, *(float *)v17.i32);
  v33 = vpadd_f32(vpadd_f32(*(float32x2_t *)v31.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL)), 0);
  btMatrix3x3::setRotation(&v88, a2);
  v34 = (float32x4_t)v88.var0[0];
  v35 = (float32x4_t)v88.var0[1];
  v34.i32[3] = 0;
  v35.i32[3] = 0;
  v36 = (float32x4_t)v88.var0[2];
  v36.i32[3] = 0;
  v37 = vmulq_n_f32(v34, v78.f32[0]);
  v38 = vmulq_n_f32(v34, v76.f32[0]);
  v39 = vmlaq_lane_f32(vmulq_n_f32(v34, v74.f32[0]), v35, *(float32x2_t *)v74.f32, 1);
  v40 = vmlaq_laneq_f32(vmlaq_lane_f32(v37, v35, *(float32x2_t *)v78.f32, 1), v36, v78, 2);
  v41 = vmlaq_laneq_f32(vmlaq_lane_f32(v38, v35, *(float32x2_t *)v76.f32, 1), v36, v76, 2);
  v42 = *(float32x4_t **)(v9 + 24);
  v43 = *v42;
  v44 = v42[1];
  v43.i32[3] = 0;
  v44.i32[3] = 0;
  v45 = vmlaq_laneq_f32(v39, v36, v74, 2);
  v46 = v42[2];
  v46.i32[3] = 0;
  v47 = vmlaq_laneq_f32(vmulq_laneq_f32(v43, v40, 2), v44, v41, 2);
  v48 = vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v43, *(float32x2_t *)v40.f32, 1), v44, *(float32x2_t *)v41.f32, 1), v46, *(float32x2_t *)v45.f32, 1);
  v49 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v43, v40.f32[0]), v44, v41.f32[0]), v46, v45.f32[0]);
  v50 = vmlaq_laneq_f32(v47, v46, v45, 2);
  v46.i64[0] = 0x8000000080000000;
  v46.i64[1] = 0x8000000080000000;
  v51 = (float32x4_t)veorq_s8(*(int8x16_t *)(v11 + 64), (int8x16_t)v46);
  v52 = (int8x16_t)vmulq_f32(v49, v51);
  v53 = (int8x16_t)vmulq_f32(v48, v51);
  v54 = (int8x16_t)vmulq_f32(v50, v51);
  v54.i32[3] = 0;
  *(float32x2_t *)v52.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v52.i8, *(float32x2_t *)v53.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v52, v52, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v53, v53, 8uLL)));
  v52.u64[1] = (unint64_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v54.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v54, v54, 8uLL)), 0);
  v87 = v52;
  (*(void (**)(btMatrix3x3 *__return_ptr, uint64_t, int8x16_t *))(*(_QWORD *)v10 + 128))(&v88, v10, &v87);
  v55 = vmulq_f32(v80, (float32x4_t)v88.var0[0]);
  v56 = (int8x16_t)vmulq_f32(v82, (float32x4_t)v88.var0[0]);
  v57 = (int8x16_t)vmulq_f32(vmlaq_laneq_f32(v84, v72, v71, 2), (float32x4_t)v88.var0[0]);
  v57.i32[3] = 0;
  *(float32x2_t *)v55.f32 = vadd_f32(v32, vadd_f32(vpadd_f32(*(float32x2_t *)v55.f32, *(float32x2_t *)v56.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v55, (int8x16_t)v55, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v56, v56, 8uLL))));
  *(float32x2_t *)&v55.u32[2] = vadd_f32(vadd_f32(vpadd_f32(v25, 0), v33), vpadd_f32(vpadd_f32(*(float32x2_t *)v57.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v57, v57, 8uLL)), 0));
  v81 = v55;
  v73 = *(float32x4_t *)(v11 + 64);
  v58 = (int8x16_t)vmulq_f32(v73, v55);
  v85 = vadd_f32(vpadd_f32(*(float32x2_t *)v58.i8, *(float32x2_t *)v58.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v58, v58, 8uLL)).f32[0]- *(float *)(v11 + 80);
  v59 = *(float32x4_t **)(v9 + 24);
  v77 = v59[1];
  v79 = *v59;
  v75 = v59[2];
  v83 = v59[3];
  ContactBreakingThreshold = btPersistentManifold::getContactBreakingThreshold(*(btPersistentManifold **)(a1 + 24));
  a6[1] = *(_QWORD *)(a1 + 24);
  if (v85 < ContactBreakingThreshold)
  {
    v61 = vmulq_n_f32(v73, v85);
    v61.i32[3] = 0;
    v62 = vsubq_f32(v81, v61);
    v63 = (int8x16_t)vmulq_f32(v75, v62);
    v62.i32[3] = 0;
    v64 = (int8x16_t)vmulq_f32(v79, v62);
    v65 = vmulq_f32(v77, v62);
    *(float32x2_t *)v65.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v64, v64, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v65, (int8x16_t)v65, 8uLL)), vpadd_f32(*(float32x2_t *)v64.i8, *(float32x2_t *)v65.f32));
    v63.i32[3] = 0;
    *(float32x2_t *)&v65.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v63.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v63, v63, 8uLL)), 0);
    v66 = *(float32x4_t **)(v9 + 24);
    v67 = *(float32x4_t *)(v11 + 64);
    v68 = (int8x16_t)vmulq_f32(*v66, v67);
    v69 = (int8x16_t)vmulq_f32(v67, v66[1]);
    v70 = (int8x16_t)vmulq_f32(v67, v66[2]);
    v70.i32[3] = 0;
    *(float32x2_t *)v68.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v68.i8, *(float32x2_t *)v69.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v68, v68, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v69, v69, 8uLL)));
    v68.u64[1] = (unint64_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v70.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v70, v70, 8uLL)), 0);
    v86 = vaddq_f32(v83, v65);
    v87 = v68;
    (*(void (**)(_QWORD *, int8x16_t *, float32x4_t *, float))(*a6 + 32))(a6, &v87, &v86, v85);
  }
}

void btConvexPlaneCollisionAlgorithm::processCollision(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  float32x4_t *v13;
  _OWORD *v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  unsigned __int32 v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  int8x16_t v29;
  float32x4_t v30;
  int8x16_t v31;
  float32x4_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  float32x2_t v38;
  float32x2_t v39;
  float32x4_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  float32x4_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  float32x4_t *v48;
  float ContactBreakingThreshold;
  float32x4_t v50;
  float32x4_t v51;
  int8x16_t v52;
  int8x16_t v53;
  float32x4_t v54;
  float32x4_t *v55;
  float32x4_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  float v60;
  float v61;
  float v62;
  float32_t v63;
  unsigned int v64;
  float32x4_t v65;
  float v66;
  float v67;
  float v68;
  float32_t v69;
  float v70;
  float v71;
  BOOL v72;
  float v73;
  __float2 v74;
  int v75;
  int v76;
  int8x16_t v77;
  float32x2_t v78;
  int8x16_t v79;
  float v80;
  int8x16_t v81;
  int32x2_t v82;
  int32x2_t v83;
  float32x2_t v84;
  float32x2_t v85;
  int8x16_t v86;
  float v87;
  __float2 v88;
  int8x16_t v89;
  int8x16_t v90;
  float32x4_t v91;
  int32x2_t v92;
  float32x2_t v93;
  float32x2_t v94;
  float32x2_t v95;
  float32x4_t v96;
  int8x16_t v97;
  float32x4_t v98;
  int32x2_t v99;
  float32x2_t v100;
  float32x2_t v101;
  float32x2_t v102;
  float32x4_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x2_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x2_t v118;
  float32x4_t v119;
  float v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;

  if (*(_QWORD *)(a1 + 24))
  {
    if (*(_BYTE *)(a1 + 32))
      v9 = a3;
    else
      v9 = a2;
    if (*(_BYTE *)(a1 + 32))
      v10 = a2;
    else
      v10 = a3;
    v11 = *(int **)(v9 + 8);
    v12 = *(_QWORD *)(v10 + 8);
    v13 = *(float32x4_t **)(v9 + 24);
    v14 = *(_OWORD **)(v10 + 24);
    v15 = *((float32x4_t *)v14 + 1);
    v16 = *(float32x4_t *)v14;
    v16.i32[3] = 0;
    v17 = v15;
    v17.i32[3] = 0;
    v19 = *v13;
    v18 = v13[1];
    v20 = vmlaq_n_f32(vmulq_n_f32(v16, COERCE_FLOAT(*v13)), v17, v18.f32[0]);
    v21 = vmlaq_laneq_f32(vmulq_laneq_f32(v16, *v13, 2), v17, v18, 2);
    v22 = vmlaq_lane_f32(vmulq_lane_f32(v16, *(float32x2_t *)v13->f32, 1), v17, *(float32x2_t *)v18.f32, 1);
    v23 = *((float32x4_t *)v14 + 2);
    v24 = vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL).u32[0];
    v19.i32[3] = 0;
    v18.i32[3] = 0;
    v25 = v13[2];
    v26 = v13[3];
    v27 = v25;
    v27.i32[3] = 0;
    v116 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v19, COERCE_FLOAT(*v14)), v18, v15.f32[0]), v27, v23.f32[0]);
    v119 = vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v19, *(float32x2_t *)v14, 1), v18, *(float32x2_t *)v15.f32, 1), v27, *(float32x2_t *)v23.f32, 1);
    v113 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v19, *(float32x4_t *)v14, 2), v18, v15, 2), v27, v23, 2);
    v23.i32[3] = 0;
    v28 = (float32x4_t)vtrn1q_s32(*(int32x4_t *)v14, (int32x4_t)v15);
    v19.i64[0] = vextq_s8((int8x16_t)v28, (int8x16_t)v28, 8uLL).u64[0];
    v28.i64[1] = v14[2];
    v29.i64[0] = 0x8000000080000000;
    v29.i64[1] = 0x8000000080000000;
    v30 = (float32x4_t)veorq_s8(*((int8x16_t *)v14 + 3), v29);
    v31 = (int8x16_t)vmulq_f32(v28, v30);
    *(int32x2_t *)v32.f32 = vzip2_s32(*(int32x2_t *)v14, *(int32x2_t *)v15.f32);
    *(int32x2_t *)&v32.u32[2] = vzip2_s32(*(int32x2_t *)v23.f32, 0);
    v33 = (int8x16_t)vmulq_f32(v32, v30);
    v19.i64[1] = v24;
    v34 = (int8x16_t)vmulq_f32(v19, v30);
    v34.i32[3] = 0;
    v35 = (int8x16_t)vmulq_f32(v28, v26);
    v36 = (int8x16_t)vmulq_f32(v32, v26);
    v37 = (int8x16_t)vmulq_f32(v19, v26);
    v37.i32[3] = 0;
    v38 = vadd_f32(vadd_f32(vpadd_f32(*(float32x2_t *)v31.i8, *(float32x2_t *)v33.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v33, v33, 8uLL))), vadd_f32(vpadd_f32(*(float32x2_t *)v35.i8, *(float32x2_t *)v36.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v36, v36, 8uLL))));
    v39 = vadd_f32(vpadd_f32(vpadd_f32(*(float32x2_t *)v34.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL)), 0), vpadd_f32(vpadd_f32(*(float32x2_t *)v37.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v37, v37, 8uLL)), 0));
    v40 = (float32x4_t)veorq_s8(*(int8x16_t *)(v12 + 64), v29);
    v41 = (int8x16_t)vmulq_f32(vmlaq_n_f32(v20, v23, v25.f32[0]), v40);
    v42 = (int8x16_t)vmulq_f32(vmlaq_lane_f32(v22, v23, *(float32x2_t *)v25.f32, 1), v40);
    v43 = (int8x16_t)vmulq_f32(vmlaq_laneq_f32(v21, v23, v25, 2), v40);
    v43.i32[3] = 0;
    *(float32x2_t *)v41.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v41.i8, *(float32x2_t *)v42.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v41, v41, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v42, v42, 8uLL)));
    v41.u64[1] = (unint64_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v43.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v43, v43, 8uLL)), 0);
    v124 = (float32x4_t)v41;
    (*(void (**)(float32x4_t *__return_ptr, int *, float32x4_t *))(*(_QWORD *)v11 + 128))(&v125, v11, &v124);
    v44 = vmulq_f32(v116, v125);
    v45 = (int8x16_t)vmulq_f32(v119, v125);
    v46 = (int8x16_t)vmulq_f32(v113, v125);
    v46.i32[3] = 0;
    *(float32x2_t *)v44.f32 = vadd_f32(v38, vadd_f32(vpadd_f32(*(float32x2_t *)v44.f32, *(float32x2_t *)v45.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v45, v45, 8uLL))));
    *(float32x2_t *)&v44.u32[2] = vadd_f32(v39, vpadd_f32(vpadd_f32(*(float32x2_t *)v46.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v46, v46, 8uLL)), 0));
    v114 = v44;
    v108 = *(float32x4_t *)(v12 + 64);
    v47 = (int8x16_t)vmulq_f32(v108, v44);
    v120 = vadd_f32(vpadd_f32(*(float32x2_t *)v47.i8, *(float32x2_t *)v47.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v47, v47, 8uLL)).f32[0]- *(float *)(v12 + 80);
    v48 = *(float32x4_t **)(v10 + 24);
    v111 = v48[1];
    v112 = *v48;
    v109 = v48[2];
    v117 = v48[3];
    ContactBreakingThreshold = btPersistentManifold::getContactBreakingThreshold(*(btPersistentManifold **)(a1 + 24));
    a5[1] = *(_QWORD *)(a1 + 24);
    if (v120 < ContactBreakingThreshold)
    {
      v50 = vmulq_n_f32(v108, v120);
      v50.i32[3] = 0;
      v51 = vsubq_f32(v114, v50);
      v52 = (int8x16_t)vmulq_f32(v109, v51);
      v51.i32[3] = 0;
      v53 = (int8x16_t)vmulq_f32(v112, v51);
      v54 = vmulq_f32(v111, v51);
      *(float32x2_t *)v54.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v53, v53, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v54, (int8x16_t)v54, 8uLL)), vpadd_f32(*(float32x2_t *)v53.i8, *(float32x2_t *)v54.f32));
      v52.i32[3] = 0;
      *(float32x2_t *)&v54.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v52.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v52, v52, 8uLL)), 0);
      v55 = *(float32x4_t **)(v10 + 24);
      v56 = *(float32x4_t *)(v12 + 64);
      v57 = (int8x16_t)vmulq_f32(*v55, v56);
      v58 = (int8x16_t)vmulq_f32(v56, v55[1]);
      v59 = (int8x16_t)vmulq_f32(v56, v55[2]);
      v59.i32[3] = 0;
      *(float32x2_t *)v57.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v57.i8, *(float32x2_t *)v58.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v57, v57, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v58, v58, 8uLL)));
      v57.u64[1] = (unint64_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v59.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v59, v59, 8uLL)), 0);
      v123 = vaddq_f32(v117, v54);
      v124 = (float32x4_t)v57;
      (*(void (**)(_QWORD *, float32x4_t *, float32x4_t *, float))(*a5 + 32))(a5, &v124, &v123, v120);
    }
    if (v11[2] <= 6 && *(_DWORD *)(a5[1] + 800) < *(_DWORD *)(a1 + 40))
    {
      v60 = *(float *)(v12 + 72);
      if (fabsf(v60) <= 0.70711)
      {
        v66 = *(float *)(v12 + 64);
        v67 = *(float *)(v12 + 68);
        v68 = 1.0 / sqrtf((float)(v67 * v67) + (float)(v66 * v66));
        v69 = v66 * v68;
        v65.i64[1] = 0;
        v65.f32[0] = -(float)(v67 * v68);
        v65.f32[1] = v69;
      }
      else
      {
        v61 = *(float *)(v12 + 68);
        v62 = 1.0 / sqrtf((float)(v60 * v60) + (float)(v61 * v61));
        v63 = -(float)(v60 * v62);
        *(float *)&v64 = v61 * v62;
        v65.i32[0] = 0;
        v65.f32[1] = v63;
        v65.i64[1] = v64;
      }
      v121 = v65;
      v70 = *(float *)&gContactBreakingThreshold / (*(float (**)(int *))(*(_QWORD *)v11 + 32))(v11);
      v71 = v70 * 0.5;
      v72 = v70 <= 0.3927;
      v73 = 0.19635;
      if (v72)
        v73 = v71;
      v74 = __sincosf_stret(v73);
      v75 = *(_DWORD *)(a1 + 36);
      if (v75 >= 1)
      {
        v76 = 0;
        v77 = (int8x16_t)vmulq_f32(v121, v121);
        v78 = vpadd_f32(*(float32x2_t *)v77.i8, *(float32x2_t *)v77.i8);
        v79 = vextq_s8(v77, v77, 8uLL);
        v80 = v74.__sinval / sqrtf(vadd_f32(*(float32x2_t *)v79.i8, v78).f32[0]);
        *(float32x2_t *)v79.i8 = vmul_n_f32(*(float32x2_t *)v121.f32, v80);
        v81.i64[0] = v79.i64[0];
        v81.i64[1] = __PAIR64__(LODWORD(v74.__cosval), COERCE_UNSIGNED_INT(vmuls_lane_f32(v80, v121, 2)));
        v82 = (int32x2_t)vextq_s8(v81, v81, 8uLL).u64[0];
        v83 = vzip1_s32(v82, *(int32x2_t *)v79.i8);
        v115 = (float32x4_t)v81;
        v118 = *(float32x2_t *)v79.i8;
        v110 = (float32x2_t)vextq_s8(v81, v79, 0xCuLL).u64[0];
        v84 = (float32x2_t)vext_s8(*(int8x8_t *)v79.i8, (int8x8_t)v82, 4uLL);
        v85 = (float32x2_t)vrev64_s32(v83);
        do
        {
          v122 = *(float32x4_t *)(v12 + 64);
          v86 = (int8x16_t)vmulq_f32(v122, v122);
          v87 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v86.i8, *(float32x2_t *)v86.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v86, v86, 8uLL)).f32[0]);
          v88 = __sincosf_stret((float)((float)(6.2832 / (float)v75) * (float)v76) * 0.5);
          *(float32x2_t *)v89.i8 = vmul_n_f32(*(float32x2_t *)v122.f32, v88.__sinval / v87);
          v90.i64[0] = v89.i64[0];
          v90.i64[1] = __PAIR64__(LODWORD(v88.__cosval), COERCE_UNSIGNED_INT(vmuls_lane_f32(v88.__sinval / v87, v122, 2)));
          v91 = (float32x4_t)veorq_s8(v90, (int8x16_t)xmmword_1DD007D60);
          v92 = (int32x2_t)vextq_s8((int8x16_t)v91, (int8x16_t)v91, 8uLL).u64[0];
          v93 = (float32x2_t)vzip1_s32(v92, *(int32x2_t *)v91.f32);
          v94 = (float32x2_t)vext_s8(*(int8x8_t *)v91.f32, (int8x8_t)v92, 4uLL);
          v95 = vmul_f32(v110, v93);
          *(float32x2_t *)v96.f32 = vmul_f32(v84, v93);
          *(float32x2_t *)&v96.u32[2] = vmul_f32(v85, v94);
          *(float32x2_t *)v97.i8 = vadd_f32(vmul_laneq_f32(*(float32x2_t *)v91.f32, v115, 3), vmul_f32((float32x2_t)v83, v94));
          v97.u64[1] = (unint64_t)vadd_f32(vmul_lane_f32(*(float32x2_t *)v91.f32, v118, 1), v95);
          v98 = vaddq_f32(vsubq_f32(vmulq_laneq_f32(v115, v91, 3), v96), (float32x4_t)veorq_s8(v97, (int8x16_t)xmmword_1DD007D50));
          *(int32x2_t *)v97.i8 = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v98, (int8x16_t)v98, 8uLL), *(int32x2_t *)v98.f32);
          v96.i64[0] = vextq_s8(v90, v90, 8uLL).u64[0];
          v99 = vzip1_s32(*(int32x2_t *)v96.f32, *(int32x2_t *)v89.i8);
          v100 = (float32x2_t)vextq_s8((int8x16_t)v98, (int8x16_t)v98, 4uLL).u64[0];
          *(int8x8_t *)v96.f32 = vext_s8(*(int8x8_t *)v89.i8, *(int8x8_t *)v96.f32, 4uLL);
          v101 = vmul_laneq_f32(*(float32x2_t *)v98.f32, (float32x4_t)v90, 3);
          v102 = vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v90, v89, 0xCuLL), *(float32x2_t *)v97.i8);
          *(float32x2_t *)v89.i8 = vmul_lane_f32(*(float32x2_t *)v98.f32, *(float32x2_t *)v89.i8, 1);
          *(float32x2_t *)v97.i8 = vmul_f32(*(float32x2_t *)v96.f32, *(float32x2_t *)v97.i8);
          v97.u64[1] = (unint64_t)vmul_f32((float32x2_t)vrev64_s32(v99), v100);
          v103 = vmulq_laneq_f32((float32x4_t)v90, v98, 3);
          *(float32x2_t *)v90.i8 = vadd_f32(v101, vmul_f32((float32x2_t)v99, v100));
          v90.u64[1] = (unint64_t)vadd_f32(*(float32x2_t *)v89.i8, v102);
          v124 = vaddq_f32(vsubq_f32(v103, (float32x4_t)v97), (float32x4_t)veorq_s8(v90, (int8x16_t)xmmword_1DD007D50));
          btConvexPlaneCollisionAlgorithm::collideSingleContact(a1, &v124, a2, a3, v104, a5);
          ++v76;
          v75 = *(_DWORD *)(a1 + 36);
        }
        while (v76 < v75);
      }
    }
    if (*(_BYTE *)(a1 + 16))
    {
      if (*(_DWORD *)(*(_QWORD *)(a1 + 24) + 800))
      {
        v105 = a5[1];
        if (*(_DWORD *)(v105 + 800))
        {
          v106 = *(_QWORD *)(v105 + 784);
          v107 = *(_QWORD *)(a5[2] + 16);
          if (v106 == v107)
            v107 = *(_QWORD *)(a5[3] + 16);
          else
            v106 = *(_QWORD *)(a5[3] + 16);
          btPersistentManifold::refreshContactPoints((btPersistentManifold *)v105, (const btTransform *)(v106 + 16), (const btTransform *)(v107 + 16));
        }
      }
    }
  }
}

float btConvexPlaneCollisionAlgorithm::calculateTimeOfImpact()
{
  return 1.0;
}

void btConvexPlaneCollisionAlgorithm::getAllContactManifolds(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  BOOL v10;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2 && *(_BYTE *)(a1 + 16))
  {
    v5 = *(_DWORD *)(a2 + 4);
    if (v5 == *(_DWORD *)(a2 + 8))
    {
      v6 = v5 ? 2 * v5 : 1;
      if (v5 < v6)
      {
        if (v6)
        {
          v7 = btAlignedAllocInternal(8 * v6, 16);
          v5 = *(_DWORD *)(a2 + 4);
        }
        else
        {
          v7 = 0;
        }
        if (v5 >= 1)
        {
          v8 = 0;
          do
          {
            *(_QWORD *)(v7 + v8) = *(_QWORD *)(*(_QWORD *)(a2 + 16) + v8);
            v8 += 8;
          }
          while (8 * v5 != v8);
        }
        v9 = *(void ***)(a2 + 16);
        if (v9)
          v10 = *(_BYTE *)(a2 + 24) == 0;
        else
          v10 = 1;
        if (!v10)
        {
          btAlignedFreeInternal(v9);
          v5 = *(_DWORD *)(a2 + 4);
        }
        *(_BYTE *)(a2 + 24) = 1;
        *(_QWORD *)(a2 + 16) = v7;
        *(_DWORD *)(a2 + 8) = v6;
        v2 = *(_QWORD *)(a1 + 24);
      }
    }
    *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v5) = v2;
    *(_DWORD *)(a2 + 4) = v5 + 1;
  }
}

uint64_t btDefaultCollisionConfiguration::btDefaultCollisionConfiguration(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  btPoolAllocator *v24;
  uint64_t v25;
  btPoolAllocator *v26;

  *(_QWORD *)a1 = &off_1EA5980A0;
  v4 = btAlignedAllocInternal(400, 16);
  *(_DWORD *)(v4 + 320) = 953267991;
  *(_BYTE *)(v4 + 352) &= 0xF0u;
  *(_QWORD *)(a1 + 48) = v4;
  v5 = *((_DWORD *)a2 + 7);
  v6 = (_QWORD *)btAlignedAllocInternal(8, 16);
  v7 = &unk_1EA597F48;
  if (!v5)
    v7 = &unk_1EA598218;
  *v6 = v7;
  *(_QWORD *)(a1 + 56) = v6;
  v8 = btAlignedAllocInternal(40, 16);
  btConvexConvexAlgorithm::CreateFunc::CreateFunc(v8, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  *(_QWORD *)(a1 + 64) = v9;
  v10 = btAlignedAllocInternal(16, 16);
  *(_BYTE *)(v10 + 8) = 0;
  *(_QWORD *)v10 = &off_1EA5987B0;
  *(_QWORD *)(a1 + 72) = v10;
  v11 = btAlignedAllocInternal(16, 16);
  *(_BYTE *)(v11 + 8) = 0;
  *(_QWORD *)v11 = &off_1EA5987D8;
  *(_QWORD *)(a1 + 80) = v11;
  v12 = btAlignedAllocInternal(16, 16);
  *(_BYTE *)(v12 + 8) = 0;
  *(_QWORD *)v12 = &off_1EA598710;
  *(_QWORD *)(a1 + 88) = v12;
  v13 = btAlignedAllocInternal(16, 16);
  *(_BYTE *)(v13 + 8) = 0;
  *(_QWORD *)v13 = &off_1EA598738;
  *(_QWORD *)(a1 + 96) = v13;
  v14 = btAlignedAllocInternal(16, 16);
  *(_BYTE *)(v14 + 8) = 0;
  *(_QWORD *)v14 = &off_1EA598698;
  *(_QWORD *)(a1 + 104) = v14;
  v15 = btAlignedAllocInternal(16, 16);
  *(_BYTE *)(v15 + 8) = 0;
  *(_QWORD *)v15 = &off_1EA598788;
  *(_QWORD *)(a1 + 112) = v15;
  v16 = btAlignedAllocInternal(16, 16);
  *(_BYTE *)(v16 + 8) = 0;
  *(_QWORD *)v16 = &off_1EA598800;
  *(_QWORD *)(a1 + 144) = v16;
  v17 = btAlignedAllocInternal(16, 16);
  *(_QWORD *)v17 = &off_1EA598800;
  *(_QWORD *)(a1 + 152) = v17;
  *(_BYTE *)(v17 + 8) = 1;
  v18 = btAlignedAllocInternal(16, 16);
  *(_BYTE *)(v18 + 8) = 0;
  *(_QWORD *)v18 = &off_1EA5986E8;
  *(_QWORD *)(a1 + 136) = v18;
  v19 = btAlignedAllocInternal(24, 16);
  *(_BYTE *)(v19 + 8) = 0;
  *(_QWORD *)v19 = &off_1EA598760;
  *(_QWORD *)(v19 + 12) = 1;
  *(_QWORD *)(a1 + 168) = v19;
  v20 = btAlignedAllocInternal(24, 16);
  *(_QWORD *)v20 = &off_1EA598760;
  *(_QWORD *)(v20 + 12) = 1;
  *(_QWORD *)(a1 + 160) = v20;
  *(_BYTE *)(v20 + 8) = 1;
  v21 = *((_DWORD *)a2 + 6);
  if (v21 <= 64)
    v21 = 64;
  if (v21 <= 0x90)
    v22 = 144;
  else
    v22 = v21;
  v23 = *a2;
  if (*a2)
  {
    *(_BYTE *)(a1 + 24) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 24) = 1;
    v24 = (btPoolAllocator *)btAlignedAllocInternal(32, 16);
    btPoolAllocator::btPoolAllocator(v24, 832, *((_DWORD *)a2 + 4));
  }
  *(_QWORD *)(a1 + 16) = v23;
  v25 = a2[1];
  if (v25)
  {
    *(_BYTE *)(a1 + 40) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 40) = 1;
    v26 = (btPoolAllocator *)btAlignedAllocInternal(32, 16);
    btPoolAllocator::btPoolAllocator(v26, v22, *((_DWORD *)a2 + 5));
  }
  *(_QWORD *)(a1 + 32) = v25;
  return a1;
}

void btDefaultCollisionConfiguration::~btDefaultCollisionConfiguration(btDefaultCollisionConfiguration *this)
{
  *(_QWORD *)this = &off_1EA5980A0;
  if (*((_BYTE *)this + 40))
  {
    btAlignedFreeInternal(*(void ***)(*((_QWORD *)this + 4) + 24));
    btAlignedFreeInternal(*((void ***)this + 4));
  }
  if (*((_BYTE *)this + 24))
  {
    btAlignedFreeInternal(*(void ***)(*((_QWORD *)this + 2) + 24));
    btAlignedFreeInternal(*((void ***)this + 2));
  }
  (***((void (****)(_QWORD))this + 8))(*((_QWORD *)this + 8));
  btAlignedFreeInternal(*((void ***)this + 8));
  (***((void (****)(_QWORD))this + 9))(*((_QWORD *)this + 9));
  btAlignedFreeInternal(*((void ***)this + 9));
  (***((void (****)(_QWORD))this + 10))(*((_QWORD *)this + 10));
  btAlignedFreeInternal(*((void ***)this + 10));
  (***((void (****)(_QWORD))this + 11))(*((_QWORD *)this + 11));
  btAlignedFreeInternal(*((void ***)this + 11));
  (***((void (****)(_QWORD))this + 12))(*((_QWORD *)this + 12));
  btAlignedFreeInternal(*((void ***)this + 12));
  (***((void (****)(_QWORD))this + 13))(*((_QWORD *)this + 13));
  btAlignedFreeInternal(*((void ***)this + 13));
  (***((void (****)(_QWORD))this + 14))(*((_QWORD *)this + 14));
  btAlignedFreeInternal(*((void ***)this + 14));
  (***((void (****)(_QWORD))this + 18))(*((_QWORD *)this + 18));
  btAlignedFreeInternal(*((void ***)this + 18));
  (***((void (****)(_QWORD))this + 19))(*((_QWORD *)this + 19));
  btAlignedFreeInternal(*((void ***)this + 19));
  (***((void (****)(_QWORD))this + 17))(*((_QWORD *)this + 17));
  btAlignedFreeInternal(*((void ***)this + 17));
  (***((void (****)(_QWORD))this + 21))(*((_QWORD *)this + 21));
  btAlignedFreeInternal(*((void ***)this + 21));
  (***((void (****)(_QWORD))this + 20))(*((_QWORD *)this + 20));
  btAlignedFreeInternal(*((void ***)this + 20));
  btAlignedFreeInternal(*((void ***)this + 6));
  (***((void (****)(_QWORD))this + 7))(*((_QWORD *)this + 7));
  btAlignedFreeInternal(*((void ***)this + 7));
}

{
  btDefaultCollisionConfiguration::~btDefaultCollisionConfiguration(this);
  JUMPOUT(0x1DF0D41C0);
}

uint64_t btDefaultCollisionConfiguration::getCollisionAlgorithmCreateFunc(btDefaultCollisionConfiguration *this, int a2, int a3)
{
  char *v3;

  if (a2 == 8 && a3 == 8)
  {
    v3 = (char *)this + 112;
  }
  else if (a2 == 8 && a3 == 1)
  {
    v3 = (char *)this + 144;
  }
  else if (a2 == 1 && a3 == 8)
  {
    v3 = (char *)this + 152;
  }
  else if (a3 | a2)
  {
    if (a2 <= 19 && a3 == 28)
    {
      v3 = (char *)this + 168;
    }
    else if (a2 == 28 && a3 <= 19)
    {
      v3 = (char *)this + 160;
    }
    else
    {
      if (a2 > 19)
      {
        if (a3 <= 19 && (a2 - 21) <= 8)
        {
          v3 = (char *)this + 80;
          return *(_QWORD *)v3;
        }
        if (a2 == 31)
        {
          v3 = (char *)this + 88;
          return *(_QWORD *)v3;
        }
      }
      else
      {
        if (a3 <= 19)
        {
          v3 = (char *)this + 64;
          return *(_QWORD *)v3;
        }
        if ((a3 - 21) <= 8)
        {
          v3 = (char *)this + 72;
          return *(_QWORD *)v3;
        }
      }
      v3 = (char *)this + 104;
      if (a3 == 31)
        v3 = (char *)this + 96;
    }
  }
  else
  {
    v3 = (char *)this + 136;
  }
  return *(_QWORD *)v3;
}

uint64_t btDefaultCollisionConfiguration::getPersistentManifoldPool(btDefaultCollisionConfiguration *this)
{
  return *((_QWORD *)this + 2);
}

uint64_t btDefaultCollisionConfiguration::getCollisionAlgorithmPool(btDefaultCollisionConfiguration *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t btDefaultCollisionConfiguration::getSimplexSolver(btDefaultCollisionConfiguration *this)
{
  return *((_QWORD *)this + 6);
}

void btConvexConcaveCollisionAlgorithm::CreateFunc::~CreateFunc(btConvexConcaveCollisionAlgorithm::CreateFunc *this)
{
  JUMPOUT(0x1DF0D41C0);
}

uint64_t btConvexConcaveCollisionAlgorithm::CreateFunc::CreateCollisionAlgorithm(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 112))(*a2, 144);
  return btConvexConcaveCollisionAlgorithm::btConvexConcaveCollisionAlgorithm(v7, a2, a3, a4, 0);
}

void btConvexConcaveCollisionAlgorithm::SwappedCreateFunc::~SwappedCreateFunc(btConvexConcaveCollisionAlgorithm::SwappedCreateFunc *this)
{
  JUMPOUT(0x1DF0D41C0);
}

uint64_t btConvexConcaveCollisionAlgorithm::SwappedCreateFunc::CreateCollisionAlgorithm(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 112))(*a2, 144);
  return btConvexConcaveCollisionAlgorithm::btConvexConcaveCollisionAlgorithm(v7, a2, a3, a4, 1);
}

void btCompoundCollisionAlgorithm::CreateFunc::~CreateFunc(btCompoundCollisionAlgorithm::CreateFunc *this)
{
  JUMPOUT(0x1DF0D41C0);
}

uint64_t btCompoundCollisionAlgorithm::CreateFunc::CreateCollisionAlgorithm(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 112))(*a2, 72);
  return btCompoundCollisionAlgorithm::btCompoundCollisionAlgorithm(v7, a2, a3, a4, 0);
}

void btCompoundCollisionAlgorithm::SwappedCreateFunc::~SwappedCreateFunc(btCompoundCollisionAlgorithm::SwappedCreateFunc *this)
{
  JUMPOUT(0x1DF0D41C0);
}

uint64_t btCompoundCollisionAlgorithm::SwappedCreateFunc::CreateCollisionAlgorithm(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 112))(*a2, 72);
  return btCompoundCollisionAlgorithm::btCompoundCollisionAlgorithm(v7, a2, a3, a4, 1);
}

void btEmptyAlgorithm::CreateFunc::~CreateFunc(btEmptyAlgorithm::CreateFunc *this)
{
  JUMPOUT(0x1DF0D41C0);
}

_QWORD *btEmptyAlgorithm::CreateFunc::CreateCollisionAlgorithm(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)*a2 + 112))(*a2, 16);
  return btEmptyAlgorithm::btEmptyAlgorithm(v3, a2);
}

void btSphereSphereCollisionAlgorithm::CreateFunc::~CreateFunc(btSphereSphereCollisionAlgorithm::CreateFunc *this)
{
  JUMPOUT(0x1DF0D41C0);
}

uint64_t btSphereSphereCollisionAlgorithm::CreateFunc::CreateCollisionAlgorithm(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 112))(*a2, 32);
  return btSphereSphereCollisionAlgorithm::btSphereSphereCollisionAlgorithm(v7, 0, a2, a3, a4);
}

void btSphereTriangleCollisionAlgorithm::CreateFunc::~CreateFunc(btSphereTriangleCollisionAlgorithm::CreateFunc *this)
{
  JUMPOUT(0x1DF0D41C0);
}

uint64_t btSphereTriangleCollisionAlgorithm::CreateFunc::CreateCollisionAlgorithm(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  v8 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 112))(*a2, 40);
  return btSphereTriangleCollisionAlgorithm::btSphereTriangleCollisionAlgorithm(v8, a2[1], a2, a3, a4, *(unsigned __int8 *)(a1 + 8));
}

void btBoxBoxCollisionAlgorithm::CreateFunc::~CreateFunc(btBoxBoxCollisionAlgorithm::CreateFunc *this)
{
  JUMPOUT(0x1DF0D41C0);
}

uint64_t btBoxBoxCollisionAlgorithm::CreateFunc::CreateCollisionAlgorithm(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 112))(*a2, 32);
  return btBoxBoxCollisionAlgorithm::btBoxBoxCollisionAlgorithm(v7, 0, a2, a3, a4);
}

void btConvexPlaneCollisionAlgorithm::CreateFunc::~CreateFunc(btConvexPlaneCollisionAlgorithm::CreateFunc *this)
{
  JUMPOUT(0x1DF0D41C0);
}

uint64_t btConvexPlaneCollisionAlgorithm::CreateFunc::CreateCollisionAlgorithm(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  v8 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 112))(*a2, 48);
  return btConvexPlaneCollisionAlgorithm::btConvexPlaneCollisionAlgorithm(v8, 0, a2, a3, a4, *(unsigned __int8 *)(a1 + 8), *(unsigned int *)(a1 + 12), *(unsigned int *)(a1 + 16));
}

void btPoolAllocator::btPoolAllocator(btPoolAllocator *this, int a2, int a3)
{
  _QWORD *v4;
  int v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;

  *(_DWORD *)this = a2;
  *((_DWORD *)this + 1) = a3;
  v4 = (_QWORD *)btAlignedAllocInternal((a3 * a2), 16);
  *((_QWORD *)this + 2) = v4;
  *((_QWORD *)this + 3) = v4;
  v5 = *((_DWORD *)this + 1);
  *((_DWORD *)this + 2) = v5;
  v6 = v5 - 1;
  if (v6)
  {
    v7 = *(int *)this;
    do
    {
      v8 = (_QWORD *)((char *)v4 + v7);
      *v4 = (char *)v4 + v7;
      v4 = (_QWORD *)((char *)v4 + v7);
      --v6;
    }
    while (v6);
  }
  else
  {
    v8 = v4;
  }
  *v8 = 0;
}

_QWORD *btEmptyAlgorithm::btEmptyAlgorithm(_QWORD *a1, uint64_t *a2)
{
  _QWORD *result;

  result = btCollisionAlgorithm::btCollisionAlgorithm(a1, a2);
  *result = &off_1EA596578;
  return result;
}

float btEmptyAlgorithm::calculateTimeOfImpact()
{
  return 1.0;
}

void btEmptyAlgorithm::~btEmptyAlgorithm(btEmptyAlgorithm *this)
{
  JUMPOUT(0x1DF0D41C0);
}

void btGhostObject::~btGhostObject(btGhostObject *this)
{
  *(_QWORD *)this = &off_1EA595690;
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)this + 296);
  C3DSceneSourcePerformConsistencyCheck(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_1EA595690;
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)this + 296);
  v2 = (void **)C3DSceneSourcePerformConsistencyCheck(this);
  btAlignedFreeInternal(v2);
}

void btGhostObject::addOverlappingObjectInternal(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;

  v3 = *a2;
  v4 = *(_DWORD *)(a1 + 300);
  if (v4 < 1)
    goto LABEL_7;
  v5 = *(_QWORD **)(a1 + 312);
  v6 = *(unsigned int *)(a1 + 300);
  while (*v5 != v3)
  {
    ++v5;
    if (!--v6)
      goto LABEL_7;
  }
  if (!(_DWORD)v6)
  {
LABEL_7:
    if (v4 == *(_DWORD *)(a1 + 304))
    {
      v7 = v4 ? 2 * v4 : 1;
      if (v4 < v7)
      {
        if (v7)
        {
          v8 = btAlignedAllocInternal(8 * v7, 16);
          v4 = *(_DWORD *)(a1 + 300);
        }
        else
        {
          v8 = 0;
        }
        if (v4 >= 1)
        {
          v9 = 0;
          do
          {
            *(_QWORD *)(v8 + v9) = *(_QWORD *)(*(_QWORD *)(a1 + 312) + v9);
            v9 += 8;
          }
          while (8 * v4 != v9);
        }
        v10 = *(void ***)(a1 + 312);
        if (v10)
        {
          if (*(_BYTE *)(a1 + 320))
          {
            btAlignedFreeInternal(v10);
            v4 = *(_DWORD *)(a1 + 300);
          }
        }
        *(_BYTE *)(a1 + 320) = 1;
        *(_QWORD *)(a1 + 312) = v8;
        *(_DWORD *)(a1 + 304) = v7;
      }
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 312) + 8 * v4) = v3;
    *(_DWORD *)(a1 + 300) = v4 + 1;
  }
}

uint64_t btGhostObject::removeOverlappingObjectInternal(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;

  v2 = *(unsigned int *)(result + 300);
  if ((int)v2 >= 1)
  {
    v3 = 0;
    v4 = *(_QWORD *)(result + 312);
    while (*(_QWORD *)(v4 + 8 * v3) != *a2)
    {
      if (v2 == ++v3)
        return result;
    }
    if ((int)v2 > (int)v3)
    {
      v5 = v2 - 1;
      *(_QWORD *)(v4 + 8 * v3) = *(_QWORD *)(v4 + 8 * v5);
      *(_DWORD *)(result + 300) = v5;
    }
  }
  return result;
}

void btPairCachingGhostObject::btPairCachingGhostObject(btPairCachingGhostObject *this)
{
  uint64_t v2;
  btHashedOverlappingPairCache *v3;

  btCollisionObject::btCollisionObject((btCollisionObject *)this);
  *(_BYTE *)(v2 + 320) = 1;
  *(_QWORD *)(v2 + 312) = 0;
  *(_QWORD *)(v2 + 300) = 0;
  *(_DWORD *)(v2 + 264) = 4;
  *(_QWORD *)v2 = &off_1EA597968;
  v3 = (btHashedOverlappingPairCache *)btAlignedAllocInternal(128, 16);
  *((_QWORD *)this + 41) = btHashedOverlappingPairCache::btHashedOverlappingPairCache(v3);
}

void btPairCachingGhostObject::~btPairCachingGhostObject(btPairCachingGhostObject *this)
{
  *(_QWORD *)this = &off_1EA597968;
  (***((void (****)(_QWORD))this + 41))(*((_QWORD *)this + 41));
  btAlignedFreeInternal(*((void ***)this + 41));
  *(_QWORD *)this = &off_1EA595690;
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)this + 296);
  C3DSceneSourcePerformConsistencyCheck(this);
}

{
  void **v1;

  btPairCachingGhostObject::~btPairCachingGhostObject(this);
  btAlignedFreeInternal(v1);
}

uint64_t btPairCachingGhostObject::addOverlappingObjectInternal(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;

  v3 = a3;
  v5 = result;
  if (!a3)
    v3 = *(_QWORD *)(result + 200);
  v6 = *a2;
  v7 = *(_DWORD *)(result + 300);
  if (v7 < 1)
    goto LABEL_9;
  v8 = *(_QWORD **)(result + 312);
  v9 = *(unsigned int *)(result + 300);
  while (*v8 != v6)
  {
    ++v8;
    if (!--v9)
      goto LABEL_9;
  }
  if (!(_DWORD)v9)
  {
LABEL_9:
    if (v7 == *(_DWORD *)(result + 304))
    {
      v10 = v7 ? 2 * v7 : 1;
      if (v7 < v10)
      {
        if (v10)
        {
          v11 = btAlignedAllocInternal(8 * v10, 16);
          v7 = *(_DWORD *)(v5 + 300);
        }
        else
        {
          v11 = 0;
        }
        if (v7 >= 1)
        {
          v12 = 0;
          do
          {
            *(_QWORD *)(v11 + v12) = *(_QWORD *)(*(_QWORD *)(v5 + 312) + v12);
            v12 += 8;
          }
          while (8 * v7 != v12);
        }
        v13 = *(void ***)(v5 + 312);
        if (v13)
        {
          if (*(_BYTE *)(v5 + 320))
          {
            btAlignedFreeInternal(v13);
            v7 = *(_DWORD *)(v5 + 300);
          }
        }
        *(_BYTE *)(v5 + 320) = 1;
        *(_QWORD *)(v5 + 312) = v11;
        *(_DWORD *)(v5 + 304) = v10;
      }
    }
    *(_QWORD *)(*(_QWORD *)(v5 + 312) + 8 * v7) = v6;
    *(_DWORD *)(v5 + 300) = v7 + 1;
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t *))(**(_QWORD **)(v5 + 328) + 16))(*(_QWORD *)(v5 + 328), v3, a2);
  }
  return result;
}

uint64_t btPairCachingGhostObject::removeOverlappingObjectInternal(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  if (!a4)
    a4 = *(_QWORD *)(result + 200);
  v4 = *(unsigned int *)(result + 300);
  if ((int)v4 >= 1)
  {
    v5 = 0;
    v6 = *(_QWORD *)(result + 312);
    while (*(_QWORD *)(v6 + 8 * v5) != *a2)
    {
      if (v4 == ++v5)
        return result;
    }
    if ((int)v4 > (int)v5)
    {
      v7 = v4 - 1;
      *(_QWORD *)(v6 + 8 * v5) = *(_QWORD *)(v6 + 8 * v7);
      *(_DWORD *)(result + 300) = v7;
      return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD *, uint64_t))(**(_QWORD **)(result + 328) + 24))(*(_QWORD *)(result + 328), a4, a2, a3);
    }
  }
  return result;
}

void btGhostObject::convexSweepTest(uint64_t a1, btCollisionShape *a2, uint64_t a3, uint64_t a4, float *a5, float a6)
{
  btVector3 v12;
  float32x4_t v13;
  btVector3 v14;
  btVector3 v15;
  btVector3 v16;
  btVector3 v17;
  uint64_t v18;
  uint64_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  btVector3 v23;
  float32x4_t v24;
  int v25;
  int32x4_t v26;
  float32x4_t v27;
  int32x4_t v28;
  int8x16_t v29;
  int8x8_t v30;
  __int32 v31;
  _BOOL4 v32;
  int v33;
  int32x4_t v34;
  int8x16_t v35;
  __int32 v36;
  btVector3 v37;
  float v38;
  float v39;
  char v40;
  int v41;
  float v42;
  uint64_t v43;
  char v44;
  float v45;
  float v46;
  const btConvexShape *v47;
  float32x4_t v48;
  float32x4_t v49;
  btTransform v50;
  btVector3 v51;
  btQuaternion v52;
  btTransform v53;
  btMatrix3x3 v54;
  float32x4_t v55;
  btVector3 v56;
  btVector3 v57;

  v12 = *(btVector3 *)(a3 + 16);
  v54.var0[0] = *(btVector3 *)a3;
  v54.var0[1] = v12;
  v13 = *(float32x4_t *)(a3 + 48);
  v54.var0[2] = *(btVector3 *)(a3 + 32);
  v55 = v13;
  v14 = *(btVector3 *)(a4 + 16);
  v53.var0.var0[0] = *(btVector3 *)a4;
  v53.var0.var0[1] = v14;
  v15 = *(btVector3 *)(a4 + 48);
  v53.var0.var0[2] = *(btVector3 *)(a4 + 32);
  v53.var1 = v15;
  v16 = (btVector3)vsubq_f32((float32x4_t)v15, v13);
  v16.var0.var0[3] = 0.0;
  v57 = v16;
  v52.var0.var0[0] = 0.0;
  btTransformUtil::calculateDiffAxisAngle((btTransformUtil *)&v54, &v53, &v50, (btVector3 *)&v52, a5);
  v17 = (btVector3)vmulq_n_f32((float32x4_t)v50.var0.var0[0], v52.var0.var0[0]);
  v17.var0.var0[3] = 0.0;
  v56 = v17;
  v50.var0.var0[0] = (btVector3)xmmword_1DD007970;
  v50.var0.var0[1] = (btVector3)xmmword_1DD007920;
  v50.var0.var0[2] = (btVector3)xmmword_1DD007600;
  v50.var1 = 0uLL;
  btMatrix3x3::getRotation(&v54, &v52);
  btMatrix3x3::setRotation(&v50.var0, (float32x4_t *)&v52);
  v47 = (const btConvexShape *)a2;
  btCollisionShape::calculateTemporalAabb(a2, &v50, (float32x4_t *)&v57, (float32x4_t *)&v56, 1.0, (float32x4_t *)&v52, (float32x4_t *)&v51);
  if (*(int *)(a1 + 300) >= 1)
  {
    v18 = 0;
    do
    {
      v19 = *(_QWORD *)(*(_QWORD *)(a1 + 312) + 8 * v18);
      if ((*(unsigned int (**)(float *, _QWORD))(*(_QWORD *)a5 + 16))(a5, *(_QWORD *)(v19 + 200)))
      {
        (*(void (**)(_QWORD, uint64_t, float32x4_t *, float32x4_t *))(**(_QWORD **)(v19 + 208) + 16))(*(_QWORD *)(v19 + 208), v19 + 16, &v49, &v48);
        v48 = vaddq_f32(v48, (float32x4_t)v51);
        v49 = vaddq_f32(v49, (float32x4_t)v52);
        v20.i64[0] = 0x3F0000003F000000;
        v20.i64[1] = 0x3F0000003F000000;
        v21 = vmulq_f32(vsubq_f32(v48, v49), v20);
        v21.i32[3] = 0;
        v50.var0.var0[0] = (btVector3)v21;
        v22 = vmulq_f32(vaddq_f32(v49, v48), v20);
        v23 = (btVector3)vsubq_f32(*(float32x4_t *)(a3 + 48), v22);
        v23.var0.var0[3] = 0.0;
        v57 = v23;
        v24 = vsubq_f32(*(float32x4_t *)(a4 + 48), v22);
        v25 = (vmovn_s32(vcgtq_f32((float32x4_t)v23, v21)).u8[0] & 1) != 0 ? 8 : 0;
        v24.i32[3] = 0;
        v26 = (int32x4_t)v23;
        v26.i32[3] = LODWORD(v23.var0.var0[2]);
        v27 = (float32x4_t)vextq_s8((int8x16_t)v21, (int8x16_t)v23, 4uLL);
        v27.i32[2] = v27.i32[1];
        v28 = (int32x4_t)vnegq_f32(v27);
        v29 = vandq_s8((int8x16_t)vcgtq_f32((float32x4_t)vtrn2q_s32(vtrn1q_s32(v26, v28), v26), (float32x4_t)vextq_s8((int8x16_t)vzip1q_s32((int32x4_t)v23, (int32x4_t)v21), (int8x16_t)vzip2q_s32((int32x4_t)v23, (int32x4_t)v21), 8uLL)), (int8x16_t)xmmword_1DD02C910);
        v30 = vorr_s8(*(int8x8_t *)v29.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL));
        v31 = v30.i32[0] | v25 | v30.i32[1] | (v23.var0.var0[0] < (float)-v21.f32[0]);
        v32 = v24.f32[0] < (float)-v21.f32[0];
        v33 = (vmovn_s32(vcgtq_f32(v24, v21)).u8[0] & 1) != 0 ? 8 : 0;
        v34 = (int32x4_t)v24;
        v34.i32[3] = v24.i32[2];
        v35 = vandq_s8((int8x16_t)vcgtq_f32((float32x4_t)vtrn2q_s32(vzip1q_s32(v34, v28), v34), (float32x4_t)vextq_s8((int8x16_t)vzip1q_s32((int32x4_t)v24, (int32x4_t)v21), (int8x16_t)vzip2q_s32((int32x4_t)v24, (int32x4_t)v21), 8uLL)), (int8x16_t)xmmword_1DD02C910);
        *(int8x8_t *)v35.i8 = vorr_s8(*(int8x8_t *)v35.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL));
        v36 = v35.i32[0] | v33 | v35.i32[1] | v32;
        if ((v36 & v31) == 0)
        {
          v37 = (btVector3)vsubq_f32(v24, (float32x4_t)v23);
          v37.var0.var0[3] = 0.0;
          v56 = v37;
          v38 = 0.0;
          v39 = 1.0;
          v40 = 1;
          v41 = 1;
          v42 = 1.0;
          do
          {
            v43 = 0;
            v44 = v40;
            do
            {
              if ((v41 & v31) != 0)
              {
                v45 = v56.var0.var0[v43];
                if (v38 <= (float)((float)-(float)(v57.var0.var0[v43] + (float)(v50.var0.var0[0].var0.var0[v43] * v39))
                                  / v45))
                  v38 = (float)-(float)(v57.var0.var0[v43] + (float)(v50.var0.var0[0].var0.var0[v43] * v39)) / v45;
              }
              else if ((v41 & v36) != 0)
              {
                v46 = v56.var0.var0[v43];
                if ((float)((float)-(float)(v57.var0.var0[v43] + (float)(v50.var0.var0[0].var0.var0[v43] * v39)) / v46) < v42)
                  v42 = (float)-(float)(v57.var0.var0[v43] + (float)(v50.var0.var0[0].var0.var0[v43] * v39)) / v46;
              }
              v41 *= 2;
              ++v43;
            }
            while (v43 != 3);
            v40 = 0;
            v39 = -1.0;
          }
          while ((v44 & 1) != 0);
          if (v38 <= v42)
            btCollisionWorld::objectQuerySingle(v47, (uint64_t)&v54, (float32x4_t *)&v53, v19, *(_QWORD *)(v19 + 208), v19 + 16, a5, a6);
        }
      }
      ++v18;
    }
    while (v18 < *(int *)(a1 + 300));
  }
}

uint64_t btGenerateInternalEdgeInfo(uint64_t result, btTriangleInfoMap *a2)
{
  uint64_t v3;
  float32x2_t *v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  float32x2_t v15;
  __int128 v16;
  float v17;
  void (**v18)(btConnectivityProcessor *__hidden);
  int v19;
  int v20;
  float32x4_t *v21;
  btTriangleInfoMap *v22;
  float32x4_t v23;
  float32x4_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(result + 80))
  {
    v3 = result;
    *(_QWORD *)(result + 80) = a2;
    v4 = *(float32x2_t **)(result + 64);
    result = (*(uint64_t (**)(float32x2_t *))(*(_QWORD *)v4 + 56))(v4);
    if ((int)result >= 1)
    {
      v5 = 0;
      do
      {
        v31 = 0;
        v29 = 2;
        v30 = 0;
        v28 = 0;
        v26 = 0;
        v27 = 0;
        v25 = 2;
        (*(void (**)(float32x2_t *, uint64_t *, int *, int *, int *, uint64_t *, char *, uint64_t *, int *, int))(*(_QWORD *)v4 + 32))(v4, &v31, &v30, &v29, &v28, &v27, (char *)&v26 + 4, &v26, &v25, v5);
        if ((int)v26 >= 1)
        {
          v6 = 0;
          do
          {
            v7 = 0;
            v8 = v25;
            v9 = v29;
            v10 = v28;
            v11 = v31;
            v12 = v27 + HIDWORD(v26) * v6;
            do
            {
              if (v8 == 3)
              {
                v13 = *(unsigned __int16 *)(v12 + 2 * v7 + 4);
              }
              else if (v8 == 5)
              {
                v13 = *(unsigned __int8 *)(v12 + v7 + 2);
              }
              else
              {
                v13 = *(_DWORD *)(v12 + 4 * v7 + 8);
              }
              v14 = v11 + v10 * (uint64_t)v13;
              v15 = v4[2];
              if (v9)
              {
                *(float32x2_t *)&v16 = vcvt_f32_f64(vmulq_f64(*(float64x2_t *)v14, vcvtq_f64_f32(v15)));
                v17 = *(double *)(v14 + 16) * v4[3].f32[0];
              }
              else
              {
                *(float32x2_t *)&v16 = vmul_f32(*(float32x2_t *)v14, v15);
                v17 = *(float *)(v14 + 8) * v4[3].f32[0];
              }
              *((_QWORD *)&v16 + 1) = LODWORD(v17);
              *((_OWORD *)&v34 + v7--) = v16;
            }
            while (v7 != -3);
            v23 = vmaxq_f32(vmaxq_f32(vmaxq_f32(v32, (float32x4_t)xmmword_1DD02C890), v33), v34);
            v24 = vminq_f32(vminq_f32(vminq_f32(v32, (float32x4_t)xmmword_1DD02C880), v33), v34);
            v18 = &off_1EA597468;
            v19 = v5;
            v20 = v6;
            v21 = &v32;
            v22 = a2;
            (*(void (**)(uint64_t, void (***)(btConnectivityProcessor *__hidden), float32x4_t *, float32x4_t *))(*(_QWORD *)v3 + 128))(v3, &v18, &v24, &v23);
            C3DSceneSourcePerformConsistencyCheck(&v18);
            ++v6;
          }
          while (v6 < (int)v26);
        }
        ++v5;
        result = (*(uint64_t (**)(float32x2_t *))(*(_QWORD *)v4 + 56))(v4);
      }
      while (v5 < (int)result);
    }
  }
  return result;
}

uint64_t btClampNormal(int8x16_t *a1, int8x16_t *a2, float32x4_t *a3, float a4, btVector3 *a5)
{
  float32x4_t v8;
  float32x4_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  float v14;
  uint64_t result;
  float v16;
  int8x16_t v17;
  float v18;
  __float2 v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  float32x4_t v23;
  btMatrix3x3 v24;
  btQuaternion v25;

  *(int8x8_t *)v8.f32 = vext_s8(*(int8x8_t *)a1->i8, (int8x8_t)*(_OWORD *)&vextq_s8(*a1, *a1, 8uLL), 4uLL);
  *(int8x8_t *)v9.f32 = vext_s8(*(int8x8_t *)a2->i8, (int8x8_t)*(_OWORD *)&vextq_s8(*a2, *a2, 8uLL), 4uLL);
  v9.i64[1] = a2->i64[0];
  v23 = *(float32x4_t *)a1;
  v8.i64[1] = a1->i64[0];
  v10 = (int8x16_t)vsubq_f32(vmulq_f32(*(float32x4_t *)a1, v9), vmulq_f32(*(float32x4_t *)a2, v8));
  v9.i64[0] = vextq_s8(v10, v10, 4uLL).u64[0];
  v9.i64[1] = v10.u32[0];
  v11 = (int8x16_t)vmulq_f32(v9, v9);
  v12 = (int8x16_t)vmulq_f32(*a3, vmulq_n_f32(v9, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v11.i8, *(float32x2_t *)v11.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL)).f32[0])));
  v13 = (int8x16_t)vmulq_f32(*(float32x4_t *)a2, *a3);
  v14 = atan2f(vadd_f32(vpadd_f32(*(float32x2_t *)v12.i8, *(float32x2_t *)v12.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL)).f32[0], vadd_f32(vpadd_f32(*(float32x2_t *)v13.i8, *(float32x2_t *)v13.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL)).f32[0]);
  if (a4 < 0.0 && v14 < a4 || (result = 0, a4 >= 0.0) && v14 > a4)
  {
    v16 = a4 - v14;
    v17 = (int8x16_t)vmulq_f32(v23, v23);
    v18 = sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL), vpadd_f32(*(float32x2_t *)v17.i8, *(float32x2_t *)v17.i8)).f32[0]);
    v19 = __sincosf_stret(v16 * 0.5);
    *(float32x2_t *)v25.var0.var0 = vmul_n_f32(*(float32x2_t *)v23.f32, v19.__sinval / v18);
    *(_QWORD *)&v25.var0.var0[2] = __PAIR64__(LODWORD(v19.__cosval), COERCE_UNSIGNED_INT(vmuls_lane_f32(v19.__sinval / v18, v23, 2)));
    btMatrix3x3::setRotation(&v24, (float32x4_t *)&v25);
    v20 = (int8x16_t)vmulq_f32((float32x4_t)v24.var0[0], *a3);
    v21 = (int8x16_t)vmulq_f32(*a3, (float32x4_t)v24.var0[1]);
    v22 = (int8x16_t)vmulq_f32(*a3, (float32x4_t)v24.var0[2]);
    v22.i32[3] = 0;
    *(float32x2_t *)v20.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v20.i8, *(float32x2_t *)v21.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL)));
    v20.u64[1] = (unint64_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v22.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL)), 0);
    *a5 = (btVector3)v20;
    return 1;
  }
  return result;
}

void btAdjustInternalEdgeContacts(uint64_t a1, _QWORD *a2, uint64_t a3, int a4, int a5, char a6)
{
  uint64_t v9;
  uint64_t v10;
  int Index;
  uint64_t v12;
  int v13;
  uint64_t v14;
  float v15;
  float32x4_t *v16;
  float32x4_t v17;
  float32x4_t v18;
  int8x8_t v19;
  float32x4_t v20;
  int8x8_t v21;
  float32x4_t v22;
  float32x4_t v23;
  int8x16_t v24;
  float32x4_t v25;
  int8x16_t v26;
  float v27;
  float32x4_t v28;
  float32x4_t v29;
  int8x16_t v30;
  float32x2_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  int8x16_t v35;
  float v36;
  float v37;
  float32x4_t v38;
  uint64_t v39;
  float32x4_t v40;
  float32x4_t v41;
  int8x16_t v42;
  unint64_t v43;
  float32x4_t v44;
  float v45;
  float32x4_t v46;
  int8x16_t v47;
  float32x4_t v48;
  int8x16_t v49;
  btVector3 v50;
  uint64_t v51;
  float *v52;
  float v53;
  float v54;
  float v55;
  float32x4_t v56;
  float32x4_t v57;
  int8x16_t v58;
  float v59;
  float v60;
  float32x4_t v61;
  float32x4_t v62;
  int8x16_t v63;
  float v64;
  int v65;
  float *v66;
  float v67;
  float v68;
  float32x4_t v69;
  int8x16_t v70;
  float32x2_t v71;
  float32x4_t v72;
  float32x4_t v73;
  int8x16_t v74;
  float v75;
  float v76;
  float32x4_t v77;
  float32x4_t v78;
  int8x16_t v79;
  float v80;
  uint64_t v81;
  float *v82;
  float v83;
  float32x4_t v84;
  float32x4_t v85;
  int8x16_t v86;
  float32x2_t v87;
  float32x4_t v88;
  int8x16_t v89;
  float v90;
  float v91;
  float32x4_t v92;
  float32x4_t v93;
  int8x16_t v94;
  _DWORD *v95;
  float32x4_t v96;
  int v97;
  float32x4_t v98;
  int8x16_t v99;
  btVector3 v100;
  int v101;
  float v102;
  float32x4_t v103;
  int8x16_t v104;
  float v105;
  __float2 v106;
  int8x16_t v107;
  int8x16_t v108;
  int32x2_t v109;
  int8x16_t v110;
  int32x2_t v111;
  float32x2_t v112;
  float32x2_t v113;
  float32x4_t v114;
  int8x16_t v115;
  int8x16_t v116;
  btVector3 v117;
  int32x4_t v118;
  float32x4_t v119;
  int8x16_t v120;
  int8x16_t v121;
  float v122;
  float v123;
  int v125;
  float32x4_t v126;
  int8x16_t v127;
  float32x4_t *v128;
  float32x4_t v129;
  int8x16_t v130;
  int8x16_t v131;
  float32x4_t v132;
  uint64_t v133;
  int8x16_t v134;
  float32x4_t v135;
  int32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  int8x16_t v139;
  int8x16_t v140;
  int8x16_t v141;
  float32x4_t v142;
  float32x4_t v143;
  int8x16_t v144;
  float32x2_t v145;
  float32x4_t v146;
  float32x4_t v147;
  int8x16_t v148;
  float v149;
  float v150;
  float32x4_t v151;
  float v152;
  float32x4_t v153;
  int8x16_t v154;
  btVector3 v155;
  float v156;
  float32x4_t v157;
  int8x16_t v158;
  float v159;
  __float2 v160;
  int8x16_t v161;
  int8x16_t v162;
  int32x2_t v163;
  int8x16_t v164;
  int32x2_t v165;
  float32x2_t v166;
  float32x2_t v167;
  float32x4_t v168;
  int8x16_t v169;
  int8x16_t v170;
  btVector3 v171;
  int32x4_t v172;
  float32x4_t v173;
  int8x16_t v174;
  int8x16_t v175;
  float v176;
  float v177;
  uint64_t v179;
  int32x4_t v180;
  float32x4_t v181;
  int8x16_t v182;
  float32x4_t v183;
  float32x4_t v184;
  float32x4_t v185;
  btVector3 v186;
  int8x16_t v187;
  int8x16_t v188;
  int v189;
  float32x4_t v190;
  int8x16_t v191;
  float32x4_t *v192;
  float32x4_t v193;
  int8x16_t v194;
  int8x16_t v195;
  float32x4_t v196;
  uint64_t v197;
  int8x16_t v198;
  float32x4_t v199;
  int32x4_t v200;
  float32x4_t v201;
  float32x4_t v202;
  int8x16_t v203;
  int8x16_t v204;
  int8x16_t v205;
  float32x4_t v206;
  int8x16_t v207;
  float32x2_t v208;
  float32x4_t v209;
  float32x4_t v210;
  int8x16_t v211;
  float v212;
  float v213;
  float32x4_t v214;
  float v215;
  float32x4_t v216;
  int8x16_t v217;
  btVector3 v218;
  float v219;
  float32x4_t v220;
  int8x16_t v221;
  float v222;
  __float2 v223;
  int8x16_t v224;
  int8x16_t v225;
  int32x2_t v226;
  int8x16_t v227;
  int32x2_t v228;
  float32x2_t v229;
  float32x2_t v230;
  float32x4_t v231;
  int8x16_t v232;
  int8x16_t v233;
  btVector3 v234;
  int32x4_t v235;
  float32x4_t v236;
  int8x16_t v237;
  int8x16_t v238;
  float v239;
  float v240;
  uint64_t v242;
  int32x4_t v243;
  float32x4_t v244;
  int8x16_t v245;
  float32x4_t v246;
  float32x4_t v247;
  float32x4_t v248;
  btVector3 v249;
  int8x16_t v250;
  int8x16_t v251;
  int v252;
  float32x4_t v253;
  int8x16_t v254;
  float32x2_t v255;
  float32x4_t *v256;
  float32x4_t v257;
  int8x16_t v258;
  int8x16_t v259;
  float32x4_t v260;
  uint64_t v261;
  int8x16_t v262;
  float32x4_t v263;
  int32x4_t v264;
  float32x4_t v265;
  float32x4_t v266;
  int8x16_t v267;
  int8x16_t v268;
  int8x16_t v269;
  float32x4_t v270;
  int8x16_t v271;
  int8x16_t v272;
  float32x4_t v273;
  float32x4_t *v274;
  float32x4_t v275;
  int8x16_t v276;
  int8x16_t v277;
  float32x4_t v278;
  uint64_t v279;
  int8x16_t v280;
  float32x4_t v281;
  int32x4_t v282;
  float32x4_t v283;
  float32x4_t v284;
  int8x16_t v285;
  int8x16_t v286;
  int8x16_t v287;
  float32x4_t v288;
  float32x4_t v289;
  btVector3 v290;
  btVector3 v291;
  float32x4_t v292;
  float v293;
  float v294;
  btVector3 v295;
  float32x4_t v296;
  float32x4_t v297;
  float v298;
  float32x4_t v299;
  float32x4_t v300;
  btVector3 v301;
  float32x4_t v302;
  btVector3 v303;
  float32x4_t v304;
  float32x4_t v305;
  float32x4_t v306;
  float v307;
  btVector3 v308;
  btVector3 v309;
  float32x4_t v310;
  float32x4_t v311;
  float32x4_t v312;
  btVector3 v313;
  btVector3 v314;

  if (*(_DWORD *)(a2[1] + 8) == 1)
  {
    v9 = *(_QWORD *)(a2[2] + 208);
    if (*(_DWORD *)(v9 + 8) == 22)
      v9 = *(_QWORD *)(v9 + 48);
    v10 = *(_QWORD *)(v9 + 80);
    if (v10)
    {
      LODWORD(v314.var0.var0[0]) = a5 | (a4 << 21);
      Index = btHashMap<btHashInt,btTriangleInfo>::findIndex(v10 + 8, (int *)&v314);
      if (Index != -1)
      {
        v12 = *(_QWORD *)(v10 + 88);
        if (v12)
        {
          v13 = Index;
          v14 = Index;
          v15 = -1.0;
          if ((a6 & 1) == 0)
            v15 = 1.0;
          v307 = v15;
          v16 = (float32x4_t *)a2[1];
          (*(void (**)(float32x4_t *, _QWORD, float32x4_t *))(v16->i64[0] + 216))(v16, 0, &v312);
          (*(void (**)(float32x4_t *, uint64_t, float32x4_t *))(v16->i64[0] + 216))(v16, 1, &v311);
          (*(void (**)(float32x4_t *, uint64_t, float32x4_t *))(v16->i64[0] + 216))(v16, 2, &v310);
          v17 = v16[5];
          v18 = vsubq_f32(v16[6], v17);
          v19 = (int8x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL).u64[0];
          v18.i32[3] = 0;
          v20 = vsubq_f32(v16[7], v17);
          v21 = (int8x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL).u64[0];
          v20.i32[3] = 0;
          *(int8x8_t *)v22.f32 = vext_s8(*(int8x8_t *)v18.f32, v19, 4uLL);
          v22.i64[1] = v18.i64[0];
          *(int8x8_t *)v23.f32 = vext_s8(*(int8x8_t *)v20.f32, v21, 4uLL);
          v23.i64[1] = v20.i64[0];
          v24 = (int8x16_t)vsubq_f32(vmulq_f32(v23, v18), vmulq_f32(v22, v20));
          v25.i64[0] = vextq_s8(v24, v24, 4uLL).u64[0];
          v25.i64[1] = v24.u32[0];
          v26 = (int8x16_t)vmulq_f32(v25, v25);
          LODWORD(v27) = vadd_f32(vpadd_f32(*(float32x2_t *)v26.i8, *(float32x2_t *)v26.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL)).u32[0];
          v28 = v311;
          v29 = vsubq_f32(v311, v312);
          v29.i32[3] = 0;
          v30 = (int8x16_t)vmulq_f32(v29, v29);
          v31 = vadd_f32(vpadd_f32(*(float32x2_t *)v30.i8, *(float32x2_t *)v30.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL));
          v32 = *(float32x4_t *)(a1 + 16);
          v33 = v312;
          if (v31.f32[0] >= 1.4211e-14)
          {
            v34 = vsubq_f32(v32, v312);
            v34.i32[3] = 0;
            v35 = (int8x16_t)vmulq_f32(v29, v34);
            v36 = vdiv_f32(vadd_f32(vpadd_f32(*(float32x2_t *)v35.i8, *(float32x2_t *)v35.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL)), v31).f32[0];
            v37 = 0.0;
            if (v36 >= 0.0)
            {
              v37 = v36;
              if (v36 > 1.0)
                v37 = 1.0;
            }
            v38 = vmulq_n_f32(v29, v37);
            v38.i32[3] = 0;
            v33 = vaddq_f32(v312, v38);
          }
          v39 = a2[3];
          v40 = *(float32x4_t *)(v39 + 16);
          v41 = (float32x4_t)vtrn1q_s32(*(int32x4_t *)v39, (int32x4_t)v40);
          v42 = *(int8x16_t *)(v39 + 32);
          v43 = vextq_s8(v42, v42, 8uLL).u64[0];
          *(int32x2_t *)v44.f32 = vzip2_s32(*(int32x2_t *)v39, *(int32x2_t *)v40.f32);
          v40.i64[0] = vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL).u64[0];
          v41.i64[1] = v42.u32[0];
          *(int32x2_t *)&v44.u32[2] = vzip2_s32(*(int32x2_t *)v42.i8, 0);
          v45 = sqrtf(v27);
          v40.i64[1] = v43;
          v46 = *(float32x4_t *)(a1 + 64);
          v47 = (int8x16_t)vmulq_f32(v41, v46);
          v48 = vmulq_f32(v44, v46);
          v49 = (int8x16_t)vmulq_f32(v40, v46);
          v49.i32[3] = 0;
          *(float32x2_t *)v48.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v47.i8, *(float32x2_t *)v48.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v47, v47, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v48, (int8x16_t)v48, 8uLL)));
          *(float32x2_t *)v40.f32 = vmul_f32(*(float32x2_t *)v48.f32, *(float32x2_t *)v48.f32);
          *(float32x2_t *)&v48.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v49.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v49, v49, 8uLL)), 0);
          v50 = (btVector3)vmulq_n_f32(v48, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v40.f32), vmul_f32(*(float32x2_t *)&v48.u32[2], *(float32x2_t *)&v48.u32[2])).f32[0]));
          v309 = v50;
          v51 = v12 + 16 * v14;
          v52 = (float *)(v51 + 4);
          v53 = *(float *)(v51 + 4);
          v54 = fabsf(v53);
          v55 = *(float *)(v10 + 152);
          if (v54 >= v55)
          {
            v65 = -1;
            v64 = 1.0e18;
          }
          else
          {
            v56 = v312;
            if (v31.f32[0] >= 1.4211e-14)
            {
              v57 = vsubq_f32(v32, v312);
              v57.i32[3] = 0;
              v58 = (int8x16_t)vmulq_f32(v29, v57);
              v59 = vdiv_f32(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v58, v58, 8uLL), vpadd_f32(*(float32x2_t *)v58.i8, *(float32x2_t *)v58.i8)), v31).f32[0];
              v60 = 0.0;
              if (v59 >= 0.0)
              {
                v60 = v59;
                if (v59 > 1.0)
                  v60 = 1.0;
              }
              v61 = vmulq_n_f32(v29, v60);
              v61.i32[3] = 0;
              v56 = vaddq_f32(v312, v61);
            }
            v62 = vsubq_f32(v32, v56);
            v62.i32[3] = 0;
            v63 = (int8x16_t)vmulq_f32(v62, v62);
            v64 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v63.i8, *(float32x2_t *)v63.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v63, v63, 8uLL)).f32[0]);
            if (v64 < 1.0e18)
            {
              v65 = 0;
            }
            else
            {
              v64 = 1.0e18;
              v65 = -1;
            }
          }
          v67 = *(float *)(v51 + 8);
          v66 = (float *)(v51 + 8);
          v68 = 1.0 / v45;
          if (fabsf(v67) < v55)
          {
            v69 = vsubq_f32(v310, v311);
            v69.i32[3] = 0;
            v70 = (int8x16_t)vmulq_f32(v69, v69);
            v71 = vadd_f32(vpadd_f32(*(float32x2_t *)v70.i8, *(float32x2_t *)v70.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v70, v70, 8uLL));
            v72 = v311;
            if (v71.f32[0] >= 1.4211e-14)
            {
              v73 = vsubq_f32(v32, v311);
              v73.i32[3] = 0;
              v74 = (int8x16_t)vmulq_f32(v73, v69);
              v75 = vdiv_f32(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v74, v74, 8uLL), vpadd_f32(*(float32x2_t *)v74.i8, *(float32x2_t *)v74.i8)), v71).f32[0];
              v76 = 0.0;
              if (v75 >= 0.0)
              {
                v76 = v75;
                if (v75 > 1.0)
                  v76 = 1.0;
              }
              v77 = vmulq_n_f32(v69, v76);
              v77.i32[3] = 0;
              v72 = vaddq_f32(v311, v77);
            }
            v78 = vsubq_f32(v32, v72);
            v78.i32[3] = 0;
            v79 = (int8x16_t)vmulq_f32(v78, v78);
            v80 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v79.i8, *(float32x2_t *)v79.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v79, v79, 8uLL)).f32[0]);
            if (v80 < v64)
            {
              v64 = v80;
              v65 = 1;
            }
          }
          v81 = v12 + 16 * v14;
          v83 = *(float *)(v81 + 12);
          v82 = (float *)(v81 + 12);
          if (fabsf(v83) < v55)
          {
            v84 = v310;
            v85 = vsubq_f32(v312, v310);
            v85.i32[3] = 0;
            v86 = (int8x16_t)vmulq_f32(v85, v85);
            v87 = vadd_f32(vpadd_f32(*(float32x2_t *)v86.i8, *(float32x2_t *)v86.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v86, v86, 8uLL));
            if (v87.f32[0] >= 1.4211e-14)
            {
              v88 = vsubq_f32(v32, v310);
              v88.i32[3] = 0;
              v89 = (int8x16_t)vmulq_f32(v85, v88);
              v90 = vdiv_f32(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v89, v89, 8uLL), vpadd_f32(*(float32x2_t *)v89.i8, *(float32x2_t *)v89.i8)), v87).f32[0];
              v91 = 0.0;
              if (v90 >= 0.0)
              {
                v91 = v90;
                if (v90 > 1.0)
                  v91 = 1.0;
              }
              v92 = vmulq_n_f32(v85, v91);
              v92.i32[3] = 0;
              v84 = vaddq_f32(v310, v92);
            }
            v93 = vsubq_f32(v32, v84);
            v93.i32[3] = 0;
            v94 = (int8x16_t)vmulq_f32(v93, v93);
            if (sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v94.i8, *(float32x2_t *)v94.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v94, v94, 8uLL)).f32[0]) < v64)v65 = 2;
          }
          v95 = (_DWORD *)(v12 + 16 * v13);
          v96 = vmulq_n_f32(v25, v68);
          v97 = 0;
          if (v54 >= v55)
          {
            v101 = 0;
          }
          else if (v65
                 || (v98 = vsubq_f32(v32, v33),
                     v98.i32[3] = 0,
                     v99 = (int8x16_t)vmulq_f32(v98, v98),
                     sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v99, v99, 8uLL), vpadd_f32(*(float32x2_t *)v99.i8, *(float32x2_t *)v99.i8)).f32[0]) >= *(float *)(v10 + 148)))
          {
            v101 = 0;
          }
          else
          {
            v100 = (btVector3)vsubq_f32(v312, v311);
            v100.var0.var0[3] = 0.0;
            v308 = v100;
            if (v53 == 0.0)
            {
              v97 = 1;
            }
            else
            {
              v102 = 1.0;
              if ((*v95 & 1) == 0)
                v102 = -1.0;
              v293 = v102;
              v296 = v32;
              v103 = vmulq_n_f32(v96, v102);
              v103.i32[3] = 0;
              v288 = (float32x4_t)v100;
              v290 = (btVector3)v103;
              v104 = (int8x16_t)vmulq_f32((float32x4_t)v100, (float32x4_t)v100);
              v105 = sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v104, v104, 8uLL), vpadd_f32(*(float32x2_t *)v104.i8, *(float32x2_t *)v104.i8)).f32[0]);
              v299 = (float32x4_t)v50;
              v304 = v96;
              v106 = __sincosf_stret(v53 * 0.5);
              *(float32x2_t *)v107.i8 = vmul_n_f32(*(float32x2_t *)v288.f32, v106.__sinval / v105);
              v108.i64[0] = v107.i64[0];
              v108.i64[1] = __PAIR64__(LODWORD(v106.__cosval), COERCE_UNSIGNED_INT(vmuls_lane_f32(v106.__sinval / v105, v288, 2)));
              v109 = (int32x2_t)vextq_s8(v108, v108, 8uLL).u64[0];
              v110 = (int8x16_t)v304;
              v111 = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v110, v110, 8uLL), *(int32x2_t *)v304.f32);
              v112 = (float32x2_t)vzip1_s32(v109, *(int32x2_t *)v107.i8);
              v113 = (float32x2_t)vext_s8(*(int8x8_t *)v107.i8, (int8x8_t)v109, 4uLL);
              *(float32x2_t *)v114.f32 = vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v110, v110, 4uLL), v112);
              *(float32x2_t *)&v114.u32[2] = vmul_f32((float32x2_t)vrev64_s32(v111), v113);
              *(float32x2_t *)v115.i8 = vadd_f32(vmul_laneq_f32(*(float32x2_t *)v304.f32, (float32x4_t)v108, 3), vmul_f32((float32x2_t)v111, v113));
              v115.u64[1] = (unint64_t)vadd_f32(vmul_lane_f32(*(float32x2_t *)v107.i8, *(float32x2_t *)v304.f32, 1), vmul_f32((float32x2_t)v111, (float32x2_t)*(_OWORD *)&vextq_s8(v108, v107, 0xCuLL)));
              v313 = (btVector3)veorq_s8(v108, (int8x16_t)xmmword_1DD007D60);
              v314 = (btVector3)vsubq_f32((float32x4_t)veorq_s8(v115, (int8x16_t)xmmword_1DD007D50), v114);
              v116 = btQuaternion::operator*=((int8x16_t *)&v314, (int8x16_t *)&v313);
              v50 = (btVector3)v299;
              v116.i32[0] = 0;
              v117 = v314;
              v117.var0.var0[3] = 0.0;
              v118.i32[0] = *v95 & 8;
              v119 = vmulq_n_f32((float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v118, (int32x4_t)v116), 0), (int8x16_t)v314, (int8x16_t)vnegq_f32((float32x4_t)v117)), v293);
              v119.i32[3] = 0;
              v120 = (int8x16_t)vmulq_f32(v299, (float32x4_t)v290);
              v121 = (int8x16_t)vmulq_f32(v299, v119);
              LODWORD(v122) = vadd_f32(vpadd_f32(*(float32x2_t *)v121.i8, *(float32x2_t *)v121.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v121, v121, 8uLL)).u32[0];
              v123 = *(float *)(v10 + 136);
              if (vadd_f32(vpadd_f32(*(float32x2_t *)v120.i8, *(float32x2_t *)v120.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v120, v120, 8uLL)).f32[0] < v123&& v122 < v123)
              {
                v97 = 1;
                v96 = v304;
              }
              else
              {
                v313 = v290;
                v125 = btClampNormal((int8x16_t *)&v308, (int8x16_t *)&v313, (float32x4_t *)&v309, *v52, &v314);
                v96 = v304;
                if (v125)
                {
                  if ((a6 & 4) != 0
                    || (v126 = vmulq_n_f32(v304, v307),
                        v126.i32[3] = 0,
                        v127 = (int8x16_t)vmulq_f32((float32x4_t)v314, v126),
                        vadd_f32(vpadd_f32(*(float32x2_t *)v127.i8, *(float32x2_t *)v127.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v127, v127, 8uLL)).f32[0] > 0.0))
                  {
                    v128 = (float32x4_t *)a2[3];
                    v129 = vmulq_f32(*v128, (float32x4_t)v314);
                    v130 = (int8x16_t)vmulq_f32((float32x4_t)v314, v128[1]);
                    v131 = (int8x16_t)vmulq_f32((float32x4_t)v314, v128[2]);
                    v131.i32[3] = 0;
                    *(float32x2_t *)v129.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v129.f32, *(float32x2_t *)v130.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v129, (int8x16_t)v129, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v130, v130, 8uLL)));
                    *(float32x2_t *)&v129.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v131.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v131, v131, 8uLL)), 0);
                    v132 = vsubq_f32(*(float32x4_t *)(a1 + 48), vmulq_n_f32(v129, COERCE_FLOAT(*(_OWORD *)(a1 + 80))));
                    v132.i32[3] = 0;
                    *(float32x4_t *)(a1 + 64) = v129;
                    *(float32x4_t *)(a1 + 32) = v132;
                    v133 = a2[3];
                    v134 = *(int8x16_t *)(v133 + 32);
                    v135 = vsubq_f32(v132, *(float32x4_t *)(v133 + 48));
                    v136 = *(int32x4_t *)(v133 + 16);
                    v137 = (float32x4_t)vtrn1q_s32(*(int32x4_t *)v133, v136);
                    v138.i64[0] = vextq_s8((int8x16_t)v137, (int8x16_t)v137, 8uLL).u64[0];
                    v138.i64[1] = vextq_s8(v134, v134, 8uLL).u64[0];
                    v139 = (int8x16_t)vmulq_f32(v138, v135);
                    v135.i32[3] = 0;
                    v137.i64[1] = v134.u32[0];
                    *(int32x2_t *)v132.f32 = vzip2_s32(*(int32x2_t *)v133, *(int32x2_t *)v136.i8);
                    *(int32x2_t *)&v132.u32[2] = vzip2_s32(*(int32x2_t *)v134.i8, 0);
                    v140 = (int8x16_t)vmulq_f32(v137, v135);
                    v141 = (int8x16_t)vmulq_f32(v132, v135);
                    v139.i32[3] = 0;
                    *(float32x2_t *)v141.i8 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v140, v140, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v141, v141, 8uLL)), vpadd_f32(*(float32x2_t *)v140.i8, *(float32x2_t *)v141.i8));
                    v141.u64[1] = (unint64_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v139.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v139, v139, 8uLL)), 0);
                    *(int8x16_t *)(a1 + 16) = v141;
                  }
                }
                v97 = 0;
                v50 = (btVector3)v299;
              }
              v32 = v296;
            }
            v101 = 1;
            v28 = v311;
          }
          v142 = v310;
          v143 = vsubq_f32(v310, v28);
          v143.i32[3] = 0;
          v144 = (int8x16_t)vmulq_f32(v143, v143);
          v145 = vadd_f32(vpadd_f32(*(float32x2_t *)v144.i8, *(float32x2_t *)v144.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v144, v144, 8uLL));
          v146 = v28;
          if (v145.f32[0] >= 1.4211e-14)
          {
            v147 = vsubq_f32(v32, v28);
            v147.i32[3] = 0;
            v148 = (int8x16_t)vmulq_f32(v143, v147);
            v149 = vdiv_f32(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v148, v148, 8uLL), vpadd_f32(*(float32x2_t *)v148.i8, *(float32x2_t *)v148.i8)), v145).f32[0];
            v150 = 0.0;
            if (v149 >= 0.0)
            {
              v150 = v149;
              if (v149 > 1.0)
                v150 = 1.0;
            }
            v151 = vmulq_n_f32(v143, v150);
            v151.i32[3] = 0;
            v146 = vaddq_f32(v28, v151);
          }
          v152 = *v66;
          if (fabsf(*v66) < *(float *)(v10 + 152) && v65 == 1)
          {
            v153 = vsubq_f32(v32, v146);
            v153.i32[3] = 0;
            v154 = (int8x16_t)vmulq_f32(v153, v153);
            if (sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v154, v154, 8uLL), vpadd_f32(*(float32x2_t *)v154.i8, *(float32x2_t *)v154.i8)).f32[0]) < *(float *)(v10 + 148))
            {
              v155 = (btVector3)vsubq_f32(v28, v310);
              v155.var0.var0[3] = 0.0;
              v308 = v155;
              if (v152 == 0.0)
              {
                ++v97;
              }
              else
              {
                v156 = 1.0;
                if ((*v95 & 2) == 0)
                  v156 = -1.0;
                v294 = v156;
                v297 = v32;
                v157 = vmulq_n_f32(v96, v156);
                v157.i32[3] = 0;
                v289 = (float32x4_t)v155;
                v291 = (btVector3)v157;
                v158 = (int8x16_t)vmulq_f32((float32x4_t)v155, (float32x4_t)v155);
                v159 = sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v158, v158, 8uLL), vpadd_f32(*(float32x2_t *)v158.i8, *(float32x2_t *)v158.i8)).f32[0]);
                v300 = (float32x4_t)v50;
                v305 = v96;
                v160 = __sincosf_stret(v152 * 0.5);
                *(float32x2_t *)v161.i8 = vmul_n_f32(*(float32x2_t *)v289.f32, v160.__sinval / v159);
                v162.i64[0] = v161.i64[0];
                v162.i64[1] = __PAIR64__(LODWORD(v160.__cosval), COERCE_UNSIGNED_INT(vmuls_lane_f32(v160.__sinval / v159, v289, 2)));
                v163 = (int32x2_t)vextq_s8(v162, v162, 8uLL).u64[0];
                v164 = (int8x16_t)v305;
                v165 = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v164, v164, 8uLL), *(int32x2_t *)v305.f32);
                v166 = (float32x2_t)vzip1_s32(v163, *(int32x2_t *)v161.i8);
                v167 = (float32x2_t)vext_s8(*(int8x8_t *)v161.i8, (int8x8_t)v163, 4uLL);
                *(float32x2_t *)v168.f32 = vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v164, v164, 4uLL), v166);
                *(float32x2_t *)&v168.u32[2] = vmul_f32((float32x2_t)vrev64_s32(v165), v167);
                *(float32x2_t *)v169.i8 = vadd_f32(vmul_laneq_f32(*(float32x2_t *)v305.f32, (float32x4_t)v162, 3), vmul_f32((float32x2_t)v165, v167));
                v169.u64[1] = (unint64_t)vadd_f32(vmul_lane_f32(*(float32x2_t *)v161.i8, *(float32x2_t *)v305.f32, 1), vmul_f32((float32x2_t)v165, (float32x2_t)*(_OWORD *)&vextq_s8(v162, v161, 0xCuLL)));
                v313 = (btVector3)veorq_s8(v162, (int8x16_t)xmmword_1DD007D60);
                v314 = (btVector3)vsubq_f32((float32x4_t)veorq_s8(v169, (int8x16_t)xmmword_1DD007D50), v168);
                v170 = btQuaternion::operator*=((int8x16_t *)&v314, (int8x16_t *)&v313);
                v50 = (btVector3)v300;
                v170.i32[0] = 0;
                v171 = v314;
                v171.var0.var0[3] = 0.0;
                v172.i32[0] = *v95 & 0x10;
                v173 = vmulq_n_f32((float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v172, (int32x4_t)v170), 0), (int8x16_t)v314, (int8x16_t)vnegq_f32((float32x4_t)v171)), v294);
                v173.i32[3] = 0;
                v174 = (int8x16_t)vmulq_f32(v300, (float32x4_t)v291);
                v175 = (int8x16_t)vmulq_f32(v300, v173);
                LODWORD(v176) = vadd_f32(vpadd_f32(*(float32x2_t *)v175.i8, *(float32x2_t *)v175.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v175, v175, 8uLL)).u32[0];
                v177 = *(float *)(v10 + 136);
                if (vadd_f32(vpadd_f32(*(float32x2_t *)v174.i8, *(float32x2_t *)v174.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v174, v174, 8uLL)).f32[0] < v177&& v176 < v177)
                {
                  ++v97;
                  v96 = v305;
                }
                else
                {
                  v179 = a2[3];
                  v180 = *(int32x4_t *)(v179 + 16);
                  v181 = (float32x4_t)vtrn1q_s32(*(int32x4_t *)v179, v180);
                  v182 = *(int8x16_t *)(v179 + 32);
                  v183.i64[0] = vextq_s8((int8x16_t)v181, (int8x16_t)v181, 8uLL).u64[0];
                  v181.i64[1] = v182.u32[0];
                  *(int32x2_t *)v184.f32 = vzip2_s32(*(int32x2_t *)v179, *(int32x2_t *)v180.i8);
                  *(int32x2_t *)&v184.u32[2] = vzip2_s32(*(int32x2_t *)v182.i8, 0);
                  v183.i64[1] = vextq_s8(v182, v182, 8uLL).u64[0];
                  v185 = *(float32x4_t *)(a1 + 64);
                  v186 = (btVector3)vmulq_f32(v181, v185);
                  v187 = (int8x16_t)vmulq_f32(v184, v185);
                  v188 = (int8x16_t)vmulq_f32(v183, v185);
                  v188.i32[3] = 0;
                  *(float32x2_t *)v186.var0.var0 = vadd_f32(vpadd_f32(*(float32x2_t *)v186.var0.var0, *(float32x2_t *)v187.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v186, (int8x16_t)v186, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v187, v187, 8uLL)));
                  *(float32x2_t *)&v186.var0.var0[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v188.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v188, v188, 8uLL)), 0);
                  v301 = v186;
                  v309 = v186;
                  v313 = v291;
                  v189 = btClampNormal((int8x16_t *)&v308, (int8x16_t *)&v313, (float32x4_t *)&v309, *v66, &v314);
                  v96 = v305;
                  if (v189)
                  {
                    if ((a6 & 4) != 0
                      || (v190 = vmulq_n_f32(v305, v307),
                          v190.i32[3] = 0,
                          v191 = (int8x16_t)vmulq_f32((float32x4_t)v314, v190),
                          vadd_f32(vpadd_f32(*(float32x2_t *)v191.i8, *(float32x2_t *)v191.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v191, v191, 8uLL)).f32[0] > 0.0))
                    {
                      v192 = (float32x4_t *)a2[3];
                      v193 = vmulq_f32(*v192, (float32x4_t)v314);
                      v194 = (int8x16_t)vmulq_f32((float32x4_t)v314, v192[1]);
                      v195 = (int8x16_t)vmulq_f32((float32x4_t)v314, v192[2]);
                      v195.i32[3] = 0;
                      *(float32x2_t *)v193.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v193.f32, *(float32x2_t *)v194.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v193, (int8x16_t)v193, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v194, v194, 8uLL)));
                      *(float32x2_t *)&v193.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v195.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v195, v195, 8uLL)), 0);
                      v196 = vsubq_f32(*(float32x4_t *)(a1 + 48), vmulq_n_f32(v193, COERCE_FLOAT(*(_OWORD *)(a1 + 80))));
                      v196.i32[3] = 0;
                      *(float32x4_t *)(a1 + 64) = v193;
                      *(float32x4_t *)(a1 + 32) = v196;
                      v197 = a2[3];
                      v198 = *(int8x16_t *)(v197 + 32);
                      v199 = vsubq_f32(v196, *(float32x4_t *)(v197 + 48));
                      v200 = *(int32x4_t *)(v197 + 16);
                      v201 = (float32x4_t)vtrn1q_s32(*(int32x4_t *)v197, v200);
                      v202.i64[0] = vextq_s8((int8x16_t)v201, (int8x16_t)v201, 8uLL).u64[0];
                      v202.i64[1] = vextq_s8(v198, v198, 8uLL).u64[0];
                      v203 = (int8x16_t)vmulq_f32(v202, v199);
                      v199.i32[3] = 0;
                      v201.i64[1] = v198.u32[0];
                      *(int32x2_t *)v196.f32 = vzip2_s32(*(int32x2_t *)v197, *(int32x2_t *)v200.i8);
                      *(int32x2_t *)&v196.u32[2] = vzip2_s32(*(int32x2_t *)v198.i8, 0);
                      v204 = (int8x16_t)vmulq_f32(v201, v199);
                      v205 = (int8x16_t)vmulq_f32(v196, v199);
                      v203.i32[3] = 0;
                      *(float32x2_t *)v205.i8 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v204, v204, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v205, v205, 8uLL)), vpadd_f32(*(float32x2_t *)v204.i8, *(float32x2_t *)v205.i8));
                      v205.u64[1] = (unint64_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v203.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v203, v203, 8uLL)), 0);
                      *(int8x16_t *)(a1 + 16) = v205;
                    }
                  }
                  v50 = v301;
                }
                v32 = v297;
              }
              v101 = 1;
              v142 = v310;
            }
          }
          v206 = vsubq_f32(v312, v142);
          v206.i32[3] = 0;
          v207 = (int8x16_t)vmulq_f32(v206, v206);
          v208 = vadd_f32(vpadd_f32(*(float32x2_t *)v207.i8, *(float32x2_t *)v207.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v207, v207, 8uLL));
          v209 = v142;
          if (v208.f32[0] >= 1.4211e-14)
          {
            v210 = vsubq_f32(v32, v142);
            v210.i32[3] = 0;
            v211 = (int8x16_t)vmulq_f32(v206, v210);
            v212 = vdiv_f32(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v211, v211, 8uLL), vpadd_f32(*(float32x2_t *)v211.i8, *(float32x2_t *)v211.i8)), v208).f32[0];
            v213 = 0.0;
            if (v212 >= 0.0)
            {
              v213 = v212;
              if (v212 > 1.0)
                v213 = 1.0;
            }
            v214 = vmulq_n_f32(v206, v213);
            v214.i32[3] = 0;
            v209 = vaddq_f32(v142, v214);
          }
          v215 = *v82;
          if (fabsf(*v82) < *(float *)(v10 + 152) && v65 == 2)
          {
            v216 = vsubq_f32(v32, v209);
            v216.i32[3] = 0;
            v217 = (int8x16_t)vmulq_f32(v216, v216);
            if (sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v217, v217, 8uLL), vpadd_f32(*(float32x2_t *)v217.i8, *(float32x2_t *)v217.i8)).f32[0]) < *(float *)(v10 + 148))
            {
              v218 = (btVector3)vsubq_f32(v142, v312);
              v218.var0.var0[3] = 0.0;
              v308 = v218;
              if (v215 == 0.0)
              {
                ++v97;
              }
              else
              {
                v219 = 1.0;
                if ((*v95 & 4) == 0)
                  v219 = -1.0;
                v298 = v219;
                v302 = (float32x4_t)v50;
                v220 = vmulq_n_f32(v96, v219);
                v220.i32[3] = 0;
                v292 = (float32x4_t)v218;
                v295 = (btVector3)v220;
                v221 = (int8x16_t)vmulq_f32((float32x4_t)v218, (float32x4_t)v218);
                v222 = sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v221, v221, 8uLL), vpadd_f32(*(float32x2_t *)v221.i8, *(float32x2_t *)v221.i8)).f32[0]);
                v306 = v96;
                v223 = __sincosf_stret(v215 * 0.5);
                *(float32x2_t *)v224.i8 = vmul_n_f32(*(float32x2_t *)v292.f32, v223.__sinval / v222);
                v225.i64[0] = v224.i64[0];
                v225.i64[1] = __PAIR64__(LODWORD(v223.__cosval), COERCE_UNSIGNED_INT(vmuls_lane_f32(v223.__sinval / v222, v292, 2)));
                v226 = (int32x2_t)vextq_s8(v225, v225, 8uLL).u64[0];
                v227 = (int8x16_t)v306;
                v228 = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v227, v227, 8uLL), *(int32x2_t *)v306.f32);
                v229 = (float32x2_t)vzip1_s32(v226, *(int32x2_t *)v224.i8);
                v230 = (float32x2_t)vext_s8(*(int8x8_t *)v224.i8, (int8x8_t)v226, 4uLL);
                *(float32x2_t *)v231.f32 = vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v227, v227, 4uLL), v229);
                *(float32x2_t *)&v231.u32[2] = vmul_f32((float32x2_t)vrev64_s32(v228), v230);
                *(float32x2_t *)v232.i8 = vadd_f32(vmul_laneq_f32(*(float32x2_t *)v306.f32, (float32x4_t)v225, 3), vmul_f32((float32x2_t)v228, v230));
                v232.u64[1] = (unint64_t)vadd_f32(vmul_lane_f32(*(float32x2_t *)v224.i8, *(float32x2_t *)v306.f32, 1), vmul_f32((float32x2_t)v228, (float32x2_t)*(_OWORD *)&vextq_s8(v225, v224, 0xCuLL)));
                v313 = (btVector3)veorq_s8(v225, (int8x16_t)xmmword_1DD007D60);
                v314 = (btVector3)vsubq_f32((float32x4_t)veorq_s8(v232, (int8x16_t)xmmword_1DD007D50), v231);
                v233 = btQuaternion::operator*=((int8x16_t *)&v314, (int8x16_t *)&v313);
                v50 = (btVector3)v302;
                v233.i32[0] = 0;
                v234 = v314;
                v234.var0.var0[3] = 0.0;
                v235.i32[0] = *v95 & 0x20;
                v236 = vmulq_n_f32((float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v235, (int32x4_t)v233), 0), (int8x16_t)v314, (int8x16_t)vnegq_f32((float32x4_t)v234)), v298);
                v236.i32[3] = 0;
                v237 = (int8x16_t)vmulq_f32(v302, (float32x4_t)v295);
                *(float32x2_t *)v234.var0.var0 = vpadd_f32(*(float32x2_t *)v237.i8, *(float32x2_t *)v237.i8);
                v142 = (float32x4_t)vextq_s8(v237, v237, 8uLL);
                v142.f32[0] = vadd_f32(*(float32x2_t *)v234.var0.var0, *(float32x2_t *)v142.f32).f32[0];
                v238 = (int8x16_t)vmulq_f32(v302, v236);
                LODWORD(v239) = vadd_f32(vpadd_f32(*(float32x2_t *)v238.i8, *(float32x2_t *)v238.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v238, v238, 8uLL)).u32[0];
                v240 = *(float *)(v10 + 136);
                if (v142.f32[0] < v240 && v239 < v240)
                {
                  ++v97;
                  v96 = v306;
                }
                else
                {
                  v242 = a2[3];
                  v243 = *(int32x4_t *)(v242 + 16);
                  v244 = (float32x4_t)vtrn1q_s32(*(int32x4_t *)v242, v243);
                  v245 = *(int8x16_t *)(v242 + 32);
                  v246.i64[0] = vextq_s8((int8x16_t)v244, (int8x16_t)v244, 8uLL).u64[0];
                  v244.i64[1] = v245.u32[0];
                  *(int32x2_t *)v247.f32 = vzip2_s32(*(int32x2_t *)v242, *(int32x2_t *)v243.i8);
                  *(int32x2_t *)&v247.u32[2] = vzip2_s32(*(int32x2_t *)v245.i8, 0);
                  v246.i64[1] = vextq_s8(v245, v245, 8uLL).u64[0];
                  v248 = *(float32x4_t *)(a1 + 64);
                  v249 = (btVector3)vmulq_f32(v244, v248);
                  v250 = (int8x16_t)vmulq_f32(v247, v248);
                  v251 = (int8x16_t)vmulq_f32(v246, v248);
                  v251.i32[3] = 0;
                  *(float32x2_t *)v249.var0.var0 = vadd_f32(vpadd_f32(*(float32x2_t *)v249.var0.var0, *(float32x2_t *)v250.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v249, (int8x16_t)v249, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v250, v250, 8uLL)));
                  *(float32x2_t *)&v249.var0.var0[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v251.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v251, v251, 8uLL)), 0);
                  v303 = v249;
                  v309 = v249;
                  v313 = v295;
                  v252 = btClampNormal((int8x16_t *)&v308, (int8x16_t *)&v313, (float32x4_t *)&v309, *v82, &v314);
                  v96 = v306;
                  if (v252)
                  {
                    if ((a6 & 4) != 0
                      || (v253 = vmulq_n_f32(v306, v307),
                          v253.i32[3] = 0,
                          v254 = (int8x16_t)vmulq_f32((float32x4_t)v314, v253),
                          v255 = vpadd_f32(*(float32x2_t *)v254.i8, *(float32x2_t *)v254.i8),
                          v142 = (float32x4_t)vextq_s8(v254, v254, 8uLL),
                          vadd_f32(v255, *(float32x2_t *)v142.f32).f32[0] > 0.0))
                    {
                      v256 = (float32x4_t *)a2[3];
                      v257 = vmulq_f32(*v256, (float32x4_t)v314);
                      v258 = (int8x16_t)vmulq_f32((float32x4_t)v314, v256[1]);
                      v259 = (int8x16_t)vmulq_f32((float32x4_t)v314, v256[2]);
                      v259.i32[3] = 0;
                      *(float32x2_t *)v257.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v257.f32, *(float32x2_t *)v258.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v257, (int8x16_t)v257, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v258, v258, 8uLL)));
                      *(float32x2_t *)&v257.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v259.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v259, v259, 8uLL)), 0);
                      v260 = vsubq_f32(*(float32x4_t *)(a1 + 48), vmulq_n_f32(v257, COERCE_FLOAT(*(_OWORD *)(a1 + 80))));
                      v260.i32[3] = 0;
                      *(float32x4_t *)(a1 + 64) = v257;
                      *(float32x4_t *)(a1 + 32) = v260;
                      v261 = a2[3];
                      v262 = *(int8x16_t *)(v261 + 32);
                      v263 = vsubq_f32(v260, *(float32x4_t *)(v261 + 48));
                      v264 = *(int32x4_t *)(v261 + 16);
                      v265 = (float32x4_t)vtrn1q_s32(*(int32x4_t *)v261, v264);
                      v266.i64[0] = vextq_s8((int8x16_t)v265, (int8x16_t)v265, 8uLL).u64[0];
                      v266.i64[1] = vextq_s8(v262, v262, 8uLL).u64[0];
                      v267 = (int8x16_t)vmulq_f32(v266, v263);
                      v263.i32[3] = 0;
                      v265.i64[1] = v262.u32[0];
                      *(int32x2_t *)v260.f32 = vzip2_s32(*(int32x2_t *)v261, *(int32x2_t *)v264.i8);
                      *(int32x2_t *)&v260.u32[2] = vzip2_s32(*(int32x2_t *)v262.i8, 0);
                      v268 = (int8x16_t)vmulq_f32(v265, v263);
                      v269 = (int8x16_t)vmulq_f32(v260, v263);
                      v267.i32[3] = 0;
                      *(float32x2_t *)v142.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v268, v268, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v269, v269, 8uLL)), vpadd_f32(*(float32x2_t *)v268.i8, *(float32x2_t *)v269.i8));
                      *(float32x2_t *)&v142.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v267.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v267, v267, 8uLL)), 0);
                      *(float32x4_t *)(a1 + 16) = v142;
                    }
                  }
                  v50 = v303;
                }
              }
              v101 = 1;
            }
          }
          if (v101 && v97)
          {
            if ((a6 & 2) != 0)
            {
              v272 = (int8x16_t)vmulq_f32(v96, (float32x4_t)v50);
              *(float32x2_t *)v142.f32 = vpadd_f32(*(float32x2_t *)v272.i8, *(float32x2_t *)v272.i8);
              v273 = (float32x4_t)vextq_s8(v272, v272, 8uLL);
              *(float32x2_t *)v273.f32 = vadd_f32(*(float32x2_t *)v142.f32, *(float32x2_t *)v273.f32);
              v142.i32[0] = 0;
              v270 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v142, v273), 0), (int8x16_t)vnegq_f32(v96), (int8x16_t)v96);
            }
            else
            {
              v270 = vmulq_n_f32(v96, v307);
              v270.i32[3] = 0;
              v271 = (int8x16_t)vmulq_f32((float32x4_t)v50, v270);
              if (vadd_f32(vpadd_f32(*(float32x2_t *)v271.i8, *(float32x2_t *)v271.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v271, v271, 8uLL)).f32[0] < 0.0)return;
            }
            v274 = (float32x4_t *)a2[3];
            v275 = vmulq_f32(*v274, v270);
            v276 = (int8x16_t)vmulq_f32(v274[1], v270);
            v277 = (int8x16_t)vmulq_f32(v274[2], v270);
            v277.i32[3] = 0;
            *(float32x2_t *)v275.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v275.f32, *(float32x2_t *)v276.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v275, (int8x16_t)v275, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v276, v276, 8uLL)));
            *(float32x2_t *)&v275.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v277.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v277, v277, 8uLL)), 0);
            v278 = vsubq_f32(*(float32x4_t *)(a1 + 48), vmulq_n_f32(v275, COERCE_FLOAT(*(_OWORD *)(a1 + 80))));
            v278.i32[3] = 0;
            *(float32x4_t *)(a1 + 64) = v275;
            *(float32x4_t *)(a1 + 32) = v278;
            v279 = a2[3];
            v280 = *(int8x16_t *)(v279 + 32);
            v281 = vsubq_f32(v278, *(float32x4_t *)(v279 + 48));
            v282 = *(int32x4_t *)(v279 + 16);
            v283 = (float32x4_t)vtrn1q_s32(*(int32x4_t *)v279, v282);
            v284.i64[0] = vextq_s8((int8x16_t)v283, (int8x16_t)v283, 8uLL).u64[0];
            v284.i64[1] = vextq_s8(v280, v280, 8uLL).u64[0];
            v285 = (int8x16_t)vmulq_f32(v284, v281);
            v281.i32[3] = 0;
            v283.i64[1] = v280.u32[0];
            *(int32x2_t *)v278.f32 = vzip2_s32(*(int32x2_t *)v279, *(int32x2_t *)v282.i8);
            *(int32x2_t *)&v278.u32[2] = vzip2_s32(*(int32x2_t *)v280.i8, 0);
            v286 = (int8x16_t)vmulq_f32(v283, v281);
            v287 = (int8x16_t)vmulq_f32(v278, v281);
            v285.i32[3] = 0;
            *(float32x2_t *)v287.i8 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v286, v286, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v287, v287, 8uLL)), vpadd_f32(*(float32x2_t *)v286.i8, *(float32x2_t *)v287.i8));
            v287.u64[1] = (unint64_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v285.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v285, v285, 8uLL)), 0);
            *(int8x16_t *)(a1 + 16) = v287;
          }
        }
      }
    }
  }
}

void btConnectivityProcessor::~btConnectivityProcessor(btConnectivityProcessor *this)
{
  C3DSceneSourcePerformConsistencyCheck(this);
  JUMPOUT(0x1DF0D41C0);
}

void btConnectivityProcessor::processTriangle(btConnectivityProcessor *this, float32x4_t *a2, unsigned int a3, unsigned int a4)
{
  int v6;
  float32x4_t v7;
  int8x8_t v8;
  float32x4_t v9;
  int8x8_t v10;
  float32x4_t v11;
  float32x4_t v12;
  int8x16_t v13;
  int8x16_t v14;
  uint64_t v15;
  float v16;
  float32x4_t *v17;
  float32x4_t v18;
  int8x8_t v19;
  float32x4_t v20;
  int8x8_t v21;
  float32x4_t v22;
  float32x4_t v23;
  int8x16_t v24;
  int8x16_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  float32x4_t v30;
  float32x4_t v31;
  int8x16_t v32;
  int v33;
  int v34;
  int v35;
  int Index;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  __int32 v44;
  __int32 v45;
  float32x4_t *v46;
  float32x4_t v47;
  _BOOL4 v48;
  float32x4_t v49;
  float32x4_t v50;
  int8x8_t v51;
  float32x4_t v52;
  int8x8_t v53;
  float32x4_t v54;
  float32x4_t v55;
  int8x16_t v56;
  int8x16_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  float32x4_t v64;
  float32x4_t v65;
  int8x16_t v66;
  int8x16_t v67;
  float32x4_t v68;
  float32x4_t v69;
  int8x16_t v70;
  float32x4_t v71;
  float32x4_t v72;
  int8x16_t v73;
  float32x4_t v74;
  int8x16_t v75;
  float32x4_t v76;
  float32x4_t v77;
  int8x16_t v78;
  float32x4_t v79;
  int8x16_t v80;
  float32x4_t v81;
  float32x4_t v82;
  int8x16_t v83;
  float32x4_t v84;
  int8x16_t v85;
  float v86;
  float32x4_t v87;
  int8x16_t v88;
  int8x16_t v89;
  int8x16_t v90;
  int8x16_t v91;
  float v92;
  int8x16_t v93;
  float v94;
  int8x16_t v95;
  float v96;
  __float2 v97;
  float32x4_t v98;
  float v99;
  int8x16_t v100;
  float v101;
  __float2 v102;
  int8x16_t v103;
  int8x16_t v104;
  int32x2_t v105;
  int32x2_t v106;
  float32x2_t v107;
  float32x2_t v108;
  float32x4_t v109;
  int8x16_t v110;
  float32x4_t v111;
  int8x16_t v112;
  int v113;
  float32x4_t v114;
  float v115;
  int8x16_t v116;
  float v117;
  __float2 v118;
  int8x16_t v119;
  int8x16_t v120;
  int32x2_t v121;
  int32x2_t v122;
  float32x2_t v123;
  float32x2_t v124;
  float32x4_t v125;
  int8x16_t v126;
  float32x4_t v127;
  int8x16_t v128;
  float32x4_t v129;
  float v130;
  int8x16_t v131;
  float v132;
  __float2 v133;
  int8x16_t v134;
  int8x16_t v135;
  int32x2_t v136;
  int32x2_t v137;
  float32x2_t v138;
  float32x2_t v139;
  float32x4_t v140;
  int8x16_t v141;
  float32x4_t v142;
  int8x16_t v143;
  float32x4_t v144;
  float v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  int32x2_t v150;
  float32x2_t v151;
  float32x4_t v152;
  uint64_t v153;
  float32x4_t v154;
  float32x4_t v155;
  btMatrix3x3 v156;
  btQuaternion v157;
  void (**v158)(btTriangleShape *__hidden);
  int v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  _OWORD v163[5];
  float32x4_t v164;
  float32x4_t v165;
  float32x4_t v166;
  int32x2_t v167;
  int v168;
  uint64_t v169;
  int v170;
  uint64_t v171;

  v171 = *MEMORY[0x1E0C80C00];
  v6 = *((_DWORD *)this + 2);
  if (*((_QWORD *)this + 1) != __PAIR64__(a4, a3))
  {
    v169 = -1;
    v170 = -1;
    v168 = -1;
    v167 = (int32x2_t)-1;
    v7 = vsubq_f32(a2[1], *a2);
    v8 = (int8x8_t)vextq_s8((int8x16_t)v7, (int8x16_t)v7, 8uLL).u64[0];
    v7.i32[3] = 0;
    v9 = vsubq_f32(a2[2], *a2);
    v10 = (int8x8_t)vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL).u64[0];
    v9.i32[3] = 0;
    *(int8x8_t *)v11.f32 = vext_s8(*(int8x8_t *)v7.f32, v8, 4uLL);
    v11.i64[1] = v7.i64[0];
    *(int8x8_t *)v12.f32 = vext_s8(*(int8x8_t *)v9.f32, v10, 4uLL);
    v12.i64[1] = v9.i64[0];
    v13 = (int8x16_t)vsubq_f32(vmulq_f32(v12, v7), vmulq_f32(v11, v9));
    v9.i64[0] = vextq_s8(v13, v13, 4uLL).u64[0];
    v9.i64[1] = v13.u32[0];
    v14 = (int8x16_t)vmulq_f32(v9, v9);
    v9.f32[0] = vadd_f32(vpadd_f32(*(float32x2_t *)v14.i8, *(float32x2_t *)v14.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)).f32[0];
    v15 = *((_QWORD *)this + 3);
    v16 = *(float *)(v15 + 144);
    if (v9.f32[0] >= v16)
    {
      v17 = (float32x4_t *)*((_QWORD *)this + 2);
      v18 = vsubq_f32(v17[1], *v17);
      v19 = (int8x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL).u64[0];
      v18.i32[3] = 0;
      v20 = vsubq_f32(v17[2], *v17);
      v21 = (int8x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL).u64[0];
      v20.i32[3] = 0;
      *(int8x8_t *)v22.f32 = vext_s8(*(int8x8_t *)v18.f32, v19, 4uLL);
      v22.i64[1] = v18.i64[0];
      *(int8x8_t *)v23.f32 = vext_s8(*(int8x8_t *)v20.f32, v21, 4uLL);
      v23.i64[1] = v20.i64[0];
      v24 = (int8x16_t)vsubq_f32(vmulq_f32(v23, v18), vmulq_f32(v22, v20));
      v20.i64[0] = vextq_s8(v24, v24, 4uLL).u64[0];
      v20.i64[1] = v24.u32[0];
      v25 = (int8x16_t)vmulq_f32(v20, v20);
      if (vadd_f32(vpadd_f32(*(float32x2_t *)v25.i8, *(float32x2_t *)v25.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL)).f32[0] >= v16)
      {
        v26 = 0;
        v27 = 0;
        do
        {
          v28 = 0;
          v29 = v26;
          v30 = v17[v26];
          do
          {
            v31 = vsubq_f32(v30, a2[v28]);
            v31.i32[3] = 0;
            v32 = (int8x16_t)vmulq_f32(v31, v31);
            if (vadd_f32(vpadd_f32(*(float32x2_t *)v32.i8, *(float32x2_t *)v32.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL)).f32[0] < v16)
            {
              *((_DWORD *)&v169 + v27) = v26;
              v167.i32[v27] = v28;
              if (v27 > 1)
                return;
              ++v27;
            }
            ++v28;
          }
          while (v28 != 3);
          if (v27 > 2)
            return;
          ++v26;
        }
        while (v29 != 2);
        if (v27 != 2)
          return;
        v34 = v169;
        v33 = HIDWORD(v169);
        if (v169 == 0x200000000)
        {
          v33 = 0;
          v169 = 2;
          v167 = vrev64_s32(v167);
          v34 = 2;
        }
        v35 = *((_DWORD *)this + 3) | (v6 << 21);
        LODWORD(v163[0]) = v35;
        Index = btHashMap<btHashInt,btTriangleInfo>::findIndex(v15 + 8, (int *)v163);
        if (Index == -1 || (v37 = *(_QWORD *)(v15 + 88)) == 0)
        {
          *(int32x2_t *)((char *)v163 + 4) = vdup_n_s32(0x40C90FDBu);
          HIDWORD(v163[0]) = 1086918619;
          LODWORD(v163[0]) = 0;
          v38 = *((_QWORD *)this + 3) + 8;
          LODWORD(v158) = v35;
          btHashMap<btHashInt,btTriangleInfo>::insert(v38, (int *)&v158, v163);
          v39 = *((_QWORD *)this + 3);
          LODWORD(v158) = v35;
          Index = btHashMap<btHashInt,btTriangleInfo>::findIndex(v39 + 8, (int *)&v158);
          if (Index == -1)
          {
            v40 = 0;
            goto LABEL_22;
          }
          v37 = *(_QWORD *)(v39 + 88);
        }
        v40 = v37 + 16 * Index;
LABEL_22:
        v41 = v33 + v34;
        if ((v33 + v34 - 4) < 0xFFFFFFFD)
          return;
        v42 = v167.i32[0];
        v43 = v167.i32[1];
        v44 = v167.i32[1] + v167.i32[0];
        if (v167.i32[1] + v167.i32[0] > 3 || v44 < 1)
          return;
        v153 = v40;
        v45 = 3 - v44;
        v46 = (float32x4_t *)*((_QWORD *)this + 2);
        v47 = vsubq_f32(v46[v33], v46[v34]);
        v47.i32[3] = 0;
        v154 = v47;
        btPolyhedralConvexShape::btPolyhedralConvexShape((btPolyhedralConvexShape *)v163);
        *(_QWORD *)&v163[0] = off_1EA596108;
        DWORD2(v163[0]) = 1;
        v164 = *v46;
        v165 = v46[1];
        v166 = v46[2];
        btPolyhedralConvexShape::btPolyhedralConvexShape((btPolyhedralConvexShape *)&v158);
        v48 = 0;
        v158 = off_1EA596108;
        v159 = 1;
        v49 = a2[v42];
        v160 = a2[v43];
        v161 = v49;
        v50 = vsubq_f32(v165, v164);
        v51 = (int8x8_t)vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u64[0];
        v50.i32[3] = 0;
        v162 = a2[v45];
        v52 = vsubq_f32(v166, v164);
        v53 = (int8x8_t)vextq_s8((int8x16_t)v52, (int8x16_t)v52, 8uLL).u64[0];
        v52.i32[3] = 0;
        *(int8x8_t *)v54.f32 = vext_s8(*(int8x8_t *)v50.f32, v51, 4uLL);
        v54.i64[1] = v50.i64[0];
        *(int8x8_t *)v55.f32 = vext_s8(*(int8x8_t *)v52.f32, v53, 4uLL);
        v55.i64[1] = v52.i64[0];
        v56 = (int8x16_t)vsubq_f32(vmulq_f32(v55, v50), vmulq_f32(v54, v52));
        v52.i64[0] = vextq_s8(v56, v56, 4uLL).u64[0];
        v52.i64[1] = v56.u32[0];
        v57 = (int8x16_t)vmulq_f32(v52, v52);
        v58 = vmulq_n_f32(v52, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v57.i8, *(float32x2_t *)v57.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v57, v57, 8uLL)).f32[0]));
        v59 = vsubq_f32(v49, v160);
        v54.i64[0] = vextq_s8((int8x16_t)v59, (int8x16_t)v59, 8uLL).u64[0];
        v59.i32[3] = 0;
        v60 = vsubq_f32(v162, v160);
        v55.i64[0] = vextq_s8((int8x16_t)v60, (int8x16_t)v60, 8uLL).u64[0];
        v60.i32[3] = 0;
        *(int8x8_t *)v54.f32 = vext_s8(*(int8x8_t *)v59.f32, *(int8x8_t *)v54.f32, 4uLL);
        v54.i64[1] = v59.i64[0];
        *(int8x8_t *)v55.f32 = vext_s8(*(int8x8_t *)v60.f32, *(int8x8_t *)v55.f32, 4uLL);
        v55.i64[1] = v60.i64[0];
        v61 = (int8x16_t)vsubq_f32(vmulq_f32(v55, v59), vmulq_f32(v54, v60));
        v54.i64[0] = vextq_s8(v61, v61, 4uLL).u64[0];
        v54.i64[1] = v61.u32[0];
        v62 = (int8x16_t)vmulq_f32(v54, v54);
        v55.f32[0] = 1.0
                   / sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v62.i8, *(float32x2_t *)v62.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v62, v62, 8uLL)).f32[0]);
        v63 = (int8x16_t)vmulq_f32(v154, v154);
        v64 = vmulq_n_f32(v154, 1.0/ sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v63, v63, 8uLL), vpadd_f32(*(float32x2_t *)v63.i8, *(float32x2_t *)v63.i8)).f32[0]));
        v59.i64[0] = vextq_s8((int8x16_t)v64, (int8x16_t)v64, 4uLL).u64[0];
        v59.i64[1] = v64.i64[0];
        v65 = vmulq_n_f32(v54, v55.f32[0]);
        v54.i64[0] = vextq_s8((int8x16_t)v58, (int8x16_t)v58, 4uLL).u64[0];
        v150 = (int32x2_t)vextq_s8((int8x16_t)v58, (int8x16_t)v58, 8uLL).u64[0];
        v151 = *(float32x2_t *)v54.f32;
        v54.i64[1] = v58.i64[0];
        v155 = v58;
        v66 = (int8x16_t)vsubq_f32(vmulq_f32(v64, v54), vmulq_f32(v59, v58));
        v54.i64[0] = vextq_s8(v66, v66, 4uLL).u64[0];
        v54.i64[1] = v66.u32[0];
        v67 = (int8x16_t)vmulq_f32(v54, v54);
        v68 = vmulq_n_f32(v54, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v67.i8, *(float32x2_t *)v67.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v67, v67, 8uLL)).f32[0]));
        v69 = vsubq_f32(*(float32x4_t *)(*((_QWORD *)this + 2) + 16 * (3 - v41)), *(float32x4_t *)(*((_QWORD *)this + 2) + 16 * v34));
        v69.i32[3] = 0;
        v70 = (int8x16_t)vmulq_f32(v68, v69);
        *(float32x2_t *)v58.f32 = vpadd_f32(*(float32x2_t *)v70.i8, *(float32x2_t *)v70.i8);
        v71 = (float32x4_t)vextq_s8(v70, v70, 8uLL);
        *(float32x2_t *)v71.f32 = vadd_f32(*(float32x2_t *)v58.f32, *(float32x2_t *)v71.f32);
        v72.i32[0] = 0;
        v58.i64[0] = vextq_s8((int8x16_t)v65, (int8x16_t)v65, 4uLL).u64[0];
        v58.i64[1] = v65.i64[0];
        v152 = v65;
        v73 = (int8x16_t)vsubq_f32(vmulq_f32(v64, v58), vmulq_f32(v59, v65));
        v59.i64[0] = vextq_s8(v73, v73, 4uLL).u64[0];
        v59.i64[1] = v73.u32[0];
        v74 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v72, v71), 0), (int8x16_t)vnegq_f32(v68), (int8x16_t)v68);
        v75 = (int8x16_t)vmulq_f32(v59, v59);
        v76 = vsubq_f32(v162, v49);
        v76.i32[3] = 0;
        v77 = vmulq_n_f32(v59, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v75.i8, *(float32x2_t *)v75.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v75, v75, 8uLL)).f32[0]));
        v78 = (int8x16_t)vmulq_f32(v77, v76);
        *(float32x2_t *)v59.f32 = vpadd_f32(*(float32x2_t *)v78.i8, *(float32x2_t *)v78.i8);
        v79 = (float32x4_t)vextq_s8(v78, v78, 8uLL);
        *(float32x2_t *)v79.f32 = vadd_f32(*(float32x2_t *)v59.f32, *(float32x2_t *)v79.f32);
        v80 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v72, v79), 0);
        v81.i64[0] = vextq_s8((int8x16_t)v74, (int8x16_t)v74, 4uLL).u64[0];
        v81.i64[1] = v74.i64[0];
        v82 = (float32x4_t)vbslq_s8(v80, (int8x16_t)vnegq_f32(v77), (int8x16_t)v77);
        v77.i64[0] = vextq_s8((int8x16_t)v82, (int8x16_t)v82, 4uLL).u64[0];
        v77.i64[1] = v82.i64[0];
        v83 = (int8x16_t)vsubq_f32(vmulq_f32(v77, v74), vmulq_f32(v82, v81));
        v84.i64[0] = vextq_s8(v83, v83, 4uLL).u64[0];
        v84.i64[1] = v83.u32[0];
        v85 = (int8x16_t)vmulq_f32(v84, v84);
        v86 = vadd_f32(vpadd_f32(*(float32x2_t *)v85.i8, *(float32x2_t *)v85.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v85, v85, 8uLL)).f32[0];
        if (v86 >= *(float *)(*((_QWORD *)this + 3) + 140))
        {
          v146 = vmulq_n_f32(v84, 1.0 / sqrtf(v86));
          v87.i64[0] = vextq_s8((int8x16_t)v146, (int8x16_t)v146, 4uLL).u64[0];
          v87.i64[1] = v146.i64[0];
          v88 = (int8x16_t)vsubq_f32(vmulq_f32(v81, v146), vmulq_f32(v74, v87));
          v87.i64[0] = vextq_s8(v88, v88, 4uLL).u64[0];
          v87.i64[1] = v88.u32[0];
          v89 = (int8x16_t)vmulq_f32(v87, v87);
          v90 = (int8x16_t)vmulq_f32(v82, vmulq_n_f32(v87, 1.0/ sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v89, v89, 8uLL), vpadd_f32(*(float32x2_t *)v89.i8, *(float32x2_t *)v89.i8)).f32[0])));
          v91 = (int8x16_t)vmulq_f32(v82, v74);
          v144 = v82;
          v92 = 3.1416
              - atan2f(vadd_f32(vpadd_f32(*(float32x2_t *)v90.i8, *(float32x2_t *)v90.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v90, v90, 8uLL)).f32[0], vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v91, v91, 8uLL), vpadd_f32(*(float32x2_t *)v91.i8, *(float32x2_t *)v91.i8)).f32[0]);
          v93 = (int8x16_t)vmulq_f32(v155, v144);
          *(float *)v93.i32 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v93, v93, 8uLL), vpadd_f32(*(float32x2_t *)v93.i8, *(float32x2_t *)v93.i8)).f32[0];
          v48 = *(float *)v93.i32 < 0.0;
          if (*(float *)v93.i32 >= 0.0)
            v94 = -v92;
          else
            v94 = v92;
          v145 = v94;
          v95 = (int8x16_t)vmulq_f32(v146, v146);
          v96 = sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v95, v95, 8uLL), vpadd_f32(*(float32x2_t *)v95.i8, *(float32x2_t *)v95.i8)).f32[0]);
          v97 = __sincosf_stret(v94 * -0.5);
          *(float32x2_t *)v157.var0.var0 = vmul_n_f32(*(float32x2_t *)v146.f32, v97.__sinval / v96);
          *(_QWORD *)&v157.var0.var0[2] = __PAIR64__(LODWORD(v97.__cosval), COERCE_UNSIGNED_INT(vmuls_lane_f32(v97.__sinval / v96, v146, 2)));
          btMatrix3x3::setRotation(&v156, (float32x4_t *)&v157);
          v72.f32[0] = v145;
        }
        switch(v41)
        {
          case 3:
            v114 = vsubq_f32(*(float32x4_t *)(*((_QWORD *)this + 2) + 16), *(float32x4_t *)(*((_QWORD *)this + 2) + 32));
            v114.i32[3] = 0;
            v148 = v114;
            v115 = -v72.f32[0];
            v116 = (int8x16_t)vmulq_f32(v114, v114);
            v117 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v116.i8, *(float32x2_t *)v116.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v116, v116, 8uLL)).f32[0]);
            v118 = __sincosf_stret(v72.f32[0] * -0.5);
            *(float32x2_t *)v119.i8 = vmul_n_f32(*(float32x2_t *)v148.f32, v118.__sinval / v117);
            v120.i64[0] = v119.i64[0];
            v120.i64[1] = __PAIR64__(LODWORD(v118.__cosval), COERCE_UNSIGNED_INT(vmuls_lane_f32(v118.__sinval / v117, v148, 2)));
            v121 = (int32x2_t)vextq_s8(v120, v120, 8uLL).u64[0];
            v122 = vzip1_s32(v150, *(int32x2_t *)v155.f32);
            v123 = (float32x2_t)vzip1_s32(v121, *(int32x2_t *)v119.i8);
            v124 = (float32x2_t)vext_s8(*(int8x8_t *)v119.i8, (int8x8_t)v121, 4uLL);
            *(float32x2_t *)v125.f32 = vmul_f32(v151, v123);
            *(float32x2_t *)&v125.u32[2] = vmul_f32((float32x2_t)vrev64_s32(v122), v124);
            *(float32x2_t *)v126.i8 = vadd_f32(vmul_laneq_f32(*(float32x2_t *)v155.f32, (float32x4_t)v120, 3), vmul_f32((float32x2_t)v122, v124));
            v126.u64[1] = (unint64_t)vadd_f32(vmul_lane_f32(*(float32x2_t *)v119.i8, *(float32x2_t *)v155.f32, 1), vmul_f32((float32x2_t)v122, (float32x2_t)*(_OWORD *)&vextq_s8(v120, v119, 0xCuLL)));
            v156.var0[0] = (btVector3)vsubq_f32((float32x4_t)veorq_s8(v126, (int8x16_t)xmmword_1DD007D50), v125);
            v157 = (btQuaternion)veorq_s8(v120, (int8x16_t)xmmword_1DD007D60);
            btQuaternion::operator*=((int8x16_t *)&v156, (int8x16_t *)&v157);
            v127 = (float32x4_t)v156.var0[0];
            v127.i32[3] = 0;
            v128 = (int8x16_t)vmulq_f32(v152, v127);
            if (vadd_f32(vpadd_f32(*(float32x2_t *)v128.i8, *(float32x2_t *)v128.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v128, v128, 8uLL)).f32[0] < 0.0)*(_DWORD *)v153 |= 0x10u;
            *(float *)(v153 + 8) = v115;
            if (!v48)
              goto LABEL_46;
            v113 = 2;
            break;
          case 2:
            v129 = vsubq_f32(*(float32x4_t *)(*((_QWORD *)this + 2) + 32), *(float32x4_t *)*((_QWORD *)this + 2));
            v129.i32[3] = 0;
            v149 = v129;
            v130 = -v72.f32[0];
            v131 = (int8x16_t)vmulq_f32(v129, v129);
            v132 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v131.i8, *(float32x2_t *)v131.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v131, v131, 8uLL)).f32[0]);
            v133 = __sincosf_stret(v72.f32[0] * -0.5);
            *(float32x2_t *)v134.i8 = vmul_n_f32(*(float32x2_t *)v149.f32, v133.__sinval / v132);
            v135.i64[0] = v134.i64[0];
            v135.i64[1] = __PAIR64__(LODWORD(v133.__cosval), COERCE_UNSIGNED_INT(vmuls_lane_f32(v133.__sinval / v132, v149, 2)));
            v136 = (int32x2_t)vextq_s8(v135, v135, 8uLL).u64[0];
            v137 = vzip1_s32(v150, *(int32x2_t *)v155.f32);
            v138 = (float32x2_t)vzip1_s32(v136, *(int32x2_t *)v134.i8);
            v139 = (float32x2_t)vext_s8(*(int8x8_t *)v134.i8, (int8x8_t)v136, 4uLL);
            *(float32x2_t *)v140.f32 = vmul_f32(v151, v138);
            *(float32x2_t *)&v140.u32[2] = vmul_f32((float32x2_t)vrev64_s32(v137), v139);
            *(float32x2_t *)v141.i8 = vadd_f32(vmul_laneq_f32(*(float32x2_t *)v155.f32, (float32x4_t)v135, 3), vmul_f32((float32x2_t)v137, v139));
            v141.u64[1] = (unint64_t)vadd_f32(vmul_lane_f32(*(float32x2_t *)v134.i8, *(float32x2_t *)v155.f32, 1), vmul_f32((float32x2_t)v137, (float32x2_t)*(_OWORD *)&vextq_s8(v135, v134, 0xCuLL)));
            v156.var0[0] = (btVector3)vsubq_f32((float32x4_t)veorq_s8(v141, (int8x16_t)xmmword_1DD007D50), v140);
            v157 = (btQuaternion)veorq_s8(v135, (int8x16_t)xmmword_1DD007D60);
            btQuaternion::operator*=((int8x16_t *)&v156, (int8x16_t *)&v157);
            v142 = (float32x4_t)v156.var0[0];
            v142.i32[3] = 0;
            v143 = (int8x16_t)vmulq_f32(v152, v142);
            if (vadd_f32(vpadd_f32(*(float32x2_t *)v143.i8, *(float32x2_t *)v143.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v143, v143, 8uLL)).f32[0] < 0.0)*(_DWORD *)v153 |= 0x20u;
            *(float *)(v153 + 12) = v130;
            if (!v48)
              goto LABEL_46;
            v113 = 4;
            break;
          case 1:
            v98 = vsubq_f32(*(float32x4_t *)*((_QWORD *)this + 2), *(float32x4_t *)(*((_QWORD *)this + 2) + 16));
            v98.i32[3] = 0;
            v147 = v98;
            v99 = -v72.f32[0];
            v100 = (int8x16_t)vmulq_f32(v98, v98);
            v101 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v100.i8, *(float32x2_t *)v100.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v100, v100, 8uLL)).f32[0]);
            v102 = __sincosf_stret(v72.f32[0] * -0.5);
            *(float32x2_t *)v103.i8 = vmul_n_f32(*(float32x2_t *)v147.f32, v102.__sinval / v101);
            v104.i64[0] = v103.i64[0];
            v104.i64[1] = __PAIR64__(LODWORD(v102.__cosval), COERCE_UNSIGNED_INT(vmuls_lane_f32(v102.__sinval / v101, v147, 2)));
            v105 = (int32x2_t)vextq_s8(v104, v104, 8uLL).u64[0];
            v106 = vzip1_s32(v150, *(int32x2_t *)v155.f32);
            v107 = (float32x2_t)vzip1_s32(v105, *(int32x2_t *)v103.i8);
            v108 = (float32x2_t)vext_s8(*(int8x8_t *)v103.i8, (int8x8_t)v105, 4uLL);
            *(float32x2_t *)v109.f32 = vmul_f32(v151, v107);
            *(float32x2_t *)&v109.u32[2] = vmul_f32((float32x2_t)vrev64_s32(v106), v108);
            *(float32x2_t *)v110.i8 = vadd_f32(vmul_laneq_f32(*(float32x2_t *)v155.f32, (float32x4_t)v104, 3), vmul_f32((float32x2_t)v106, v108));
            v110.u64[1] = (unint64_t)vadd_f32(vmul_lane_f32(*(float32x2_t *)v103.i8, *(float32x2_t *)v155.f32, 1), vmul_f32((float32x2_t)v106, (float32x2_t)*(_OWORD *)&vextq_s8(v104, v103, 0xCuLL)));
            v156.var0[0] = (btVector3)vsubq_f32((float32x4_t)veorq_s8(v110, (int8x16_t)xmmword_1DD007D50), v109);
            v157 = (btQuaternion)veorq_s8(v104, (int8x16_t)xmmword_1DD007D60);
            btQuaternion::operator*=((int8x16_t *)&v156, (int8x16_t *)&v157);
            v111 = (float32x4_t)v156.var0[0];
            v111.i32[3] = 0;
            v112 = (int8x16_t)vmulq_f32(v152, v111);
            if (vadd_f32(vpadd_f32(*(float32x2_t *)v112.i8, *(float32x2_t *)v112.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v112, v112, 8uLL)).f32[0] < 0.0)*(_DWORD *)v153 |= 8u;
            *(float *)(v153 + 4) = v99;
            if (!v48)
              goto LABEL_46;
            v113 = 1;
            break;
          default:
            goto LABEL_46;
        }
        *(_DWORD *)v153 |= v113;
LABEL_46:
        btPolyhedralConvexShape::~btPolyhedralConvexShape((btPolyhedralConvexShape *)&v158);
        btPolyhedralConvexShape::~btPolyhedralConvexShape((btPolyhedralConvexShape *)v163);
      }
    }
  }
}

void btHashMap<btHashInt,btTriangleInfo>::insert(uint64_t a1, int *a2, _OWORD *a3)
{
  int v6;
  int v7;
  int Index;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  void **v24;
  _DWORD *v25;
  int *v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;

  v6 = *a2;
  v7 = *(_DWORD *)(a1 + 72);
  Index = btHashMap<btHashInt,btTriangleInfo>::findIndex(a1, a2);
  if (Index != -1)
  {
    *(_OWORD *)(*(_QWORD *)(a1 + 80) + 16 * Index) = *a3;
    return;
  }
  v9 = 9 * ((v6 + ~(v6 << 15)) ^ ((v6 + ~(v6 << 15)) >> 10));
  v10 = ((v9 ^ (v9 >> 6)) + ~((v9 ^ (v9 >> 6)) << 11)) ^ (((v9 ^ (v9 >> 6)) + ~((v9 ^ (v9 >> 6)) << 11)) >> 16);
  v11 = v7 - 1;
  v12 = *(_DWORD *)(a1 + 68);
  v13 = *(_DWORD *)(a1 + 72);
  v14 = v12;
  if (v12 == v13)
  {
    v15 = v12 ? 2 * v12 : 1;
    v14 = *(_DWORD *)(a1 + 68);
    if (v12 < v15)
    {
      if (v15)
        v16 = btAlignedAllocInternal(16 * v15, 16);
      else
        v16 = 0;
      if (*(int *)(a1 + 68) >= 1)
      {
        v17 = 0;
        v18 = 16 * *(unsigned int *)(a1 + 68);
        do
        {
          *(_OWORD *)(v16 + v17) = *(_OWORD *)(*(_QWORD *)(a1 + 80) + v17);
          v17 += 16;
        }
        while (v18 != v17);
      }
      v19 = *(void ***)(a1 + 80);
      if (v19 && *(_BYTE *)(a1 + 88))
        btAlignedFreeInternal(v19);
      *(_BYTE *)(a1 + 88) = 1;
      *(_QWORD *)(a1 + 80) = v16;
      *(_DWORD *)(a1 + 72) = v15;
      v14 = *(_DWORD *)(a1 + 68);
    }
  }
  v20 = v10 & v11;
  *(_OWORD *)(*(_QWORD *)(a1 + 80) + 16 * v14) = *a3;
  ++*(_DWORD *)(a1 + 68);
  LODWORD(v21) = *(_DWORD *)(a1 + 100);
  if ((_DWORD)v21 == *(_DWORD *)(a1 + 104))
  {
    v22 = (_DWORD)v21 ? 2 * v21 : 1;
    if ((int)v21 < v22)
    {
      if (v22)
      {
        v23 = btAlignedAllocInternal(4 * v22, 16);
        LODWORD(v21) = *(_DWORD *)(a1 + 100);
      }
      else
      {
        v23 = 0;
      }
      v24 = *(void ***)(a1 + 112);
      if ((int)v21 < 1)
      {
        if (!v24)
        {
LABEL_34:
          *(_BYTE *)(a1 + 120) = 1;
          *(_QWORD *)(a1 + 112) = v23;
          *(_DWORD *)(a1 + 104) = v22;
          LODWORD(v21) = *(_DWORD *)(a1 + 100);
          goto LABEL_35;
        }
      }
      else
      {
        v21 = v21;
        v25 = (_DWORD *)v23;
        v26 = *(int **)(a1 + 112);
        do
        {
          v27 = *v26++;
          *v25++ = v27;
          --v21;
        }
        while (v21);
      }
      if (*(_BYTE *)(a1 + 120))
        btAlignedFreeInternal(v24);
      *(_QWORD *)(a1 + 112) = 0;
      goto LABEL_34;
    }
  }
LABEL_35:
  *(_DWORD *)(*(_QWORD *)(a1 + 112) + 4 * (int)v21) = *a2;
  ++*(_DWORD *)(a1 + 100);
  if (v13 < *(_DWORD *)(a1 + 72))
  {
    btHashMap<btHashInt,btTriangleInfo>::growTables(a1);
    v28 = 9 * ((*a2 + ~(*a2 << 15)) ^ ((*a2 + ~(*a2 << 15)) >> 10));
    v29 = (v28 ^ (v28 >> 6)) + ~((v28 ^ (v28 >> 6)) << 11);
    v20 = (v29 ^ (v29 >> 16)) & (*(_DWORD *)(a1 + 72) - 1);
  }
  v30 = *(_QWORD *)(a1 + 16);
  *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4 * v12) = *(_DWORD *)(v30 + 4 * v20);
  *(_DWORD *)(v30 + 4 * v20) = v12;
}

uint64_t btHashMap<btHashInt,btTriangleInfo>::findIndex(uint64_t a1, int *a2)
{
  int v3;
  uint64_t result;
  int v5;
  int v6;
  int v7;

  v3 = *a2;
  result = 0xFFFFFFFFLL;
  v5 = 9 * ((v3 + ~(v3 << 15)) ^ ((v3 + ~(v3 << 15)) >> 10));
  v6 = (v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11);
  v7 = (v6 ^ (v6 >> 16)) & (*(_DWORD *)(a1 + 72) - 1);
  if (v7 < *(_DWORD *)(a1 + 4))
  {
    result = *(unsigned int *)(*(_QWORD *)(a1 + 16) + 4 * v7);
    if ((_DWORD)result == -1)
    {
      return 0xFFFFFFFFLL;
    }
    else
    {
      while (v3 != *(_DWORD *)(*(_QWORD *)(a1 + 112) + 4 * (int)result))
      {
        result = *(unsigned int *)(*(_QWORD *)(a1 + 48) + 4 * (int)result);
        if ((_DWORD)result == -1)
          return 0xFFFFFFFFLL;
      }
    }
  }
  return result;
}

void btHashMap<btHashInt,btTriangleInfo>::growTables(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  _DWORD *v7;
  int *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  _DWORD *v14;
  int *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;

  v1 = *(unsigned int *)(a1 + 72);
  v2 = *(unsigned int *)(a1 + 4);
  if ((int)v2 >= (int)v1)
    return;
  if (*(_DWORD *)(a1 + 8) < (int)v1)
  {
    if ((_DWORD)v1)
    {
      v4 = btAlignedAllocInternal(4 * (int)v1, 16);
      LODWORD(v5) = *(_DWORD *)(a1 + 4);
    }
    else
    {
      v4 = 0;
      LODWORD(v5) = *(_DWORD *)(a1 + 4);
    }
    v6 = *(void ***)(a1 + 16);
    if ((int)v5 < 1)
    {
      if (!v6)
      {
LABEL_14:
        *(_BYTE *)(a1 + 24) = 1;
        *(_QWORD *)(a1 + 16) = v4;
        *(_DWORD *)(a1 + 8) = v1;
        goto LABEL_15;
      }
    }
    else
    {
      v5 = v5;
      v7 = (_DWORD *)v4;
      v8 = *(int **)(a1 + 16);
      do
      {
        v9 = *v8++;
        *v7++ = v9;
        --v5;
      }
      while (v5);
    }
    if (*(_BYTE *)(a1 + 24))
      btAlignedFreeInternal(v6);
    *(_QWORD *)(a1 + 16) = 0;
    goto LABEL_14;
  }
LABEL_15:
  bzero((void *)(*(_QWORD *)(a1 + 16) + 4 * (int)v2), 4 * (v1 + ~(_DWORD)v2) + 4);
  *(_DWORD *)(a1 + 4) = v1;
  v10 = *(_DWORD *)(a1 + 36);
  if (v10 < (int)v1)
  {
    if (*(_DWORD *)(a1 + 40) >= (int)v1)
    {
LABEL_28:
      bzero((void *)(*(_QWORD *)(a1 + 48) + 4 * v10), 4 * (v1 + ~v10) + 4);
      goto LABEL_29;
    }
    if ((_DWORD)v1)
      v11 = btAlignedAllocInternal(4 * (int)v1, 16);
    else
      v11 = 0;
    LODWORD(v12) = *(_DWORD *)(a1 + 36);
    v13 = *(void ***)(a1 + 48);
    if ((int)v12 < 1)
    {
      if (!v13)
      {
LABEL_27:
        *(_BYTE *)(a1 + 56) = 1;
        *(_QWORD *)(a1 + 48) = v11;
        *(_DWORD *)(a1 + 40) = v1;
        goto LABEL_28;
      }
    }
    else
    {
      v12 = v12;
      v14 = (_DWORD *)v11;
      v15 = *(int **)(a1 + 48);
      do
      {
        v16 = *v15++;
        *v14++ = v16;
        --v12;
      }
      while (v12);
    }
    if (*(_BYTE *)(a1 + 56))
      btAlignedFreeInternal(v13);
    goto LABEL_27;
  }
LABEL_29:
  *(_DWORD *)(a1 + 36) = v1;
  if ((int)v1 >= 1)
  {
    memset(*(void **)(a1 + 16), 255, 4 * v1);
    memset(*(void **)(a1 + 48), 255, 4 * v1);
  }
  if ((int)v2 >= 1)
  {
    v17 = 0;
    v18 = *(_QWORD *)(a1 + 112);
    v19 = *(_QWORD *)(a1 + 16);
    v20 = *(_QWORD *)(a1 + 48);
    do
    {
      v21 = *(_DWORD *)(v18 + 4 * v17) + ~(*(_DWORD *)(v18 + 4 * v17) << 15);
      v22 = (9 * (v21 ^ (v21 >> 10))) ^ ((9 * (v21 ^ (v21 >> 10))) >> 6);
      v23 = ((v22 + ~(v22 << 11)) ^ ((v22 + ~(v22 << 11)) >> 16)) & (*(_DWORD *)(a1 + 72) - 1);
      *(_DWORD *)(v20 + 4 * v17) = *(_DWORD *)(v19 + 4 * v23);
      *(_DWORD *)(v19 + 4 * v23) = v17++;
    }
    while (v2 != v17);
  }
}

int8x16_t btQuaternion::operator*=(int8x16_t *a1, int8x16_t *a2)
{
  int32x2_t v2;
  float32x2_t v3;
  int32x2_t v4;
  float32x2_t v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x4_t v8;
  int8x16_t v9;
  int8x16_t result;

  v2 = (int32x2_t)vextq_s8(*a1, *a1, 8uLL).u64[0];
  v3 = (float32x2_t)vzip1_s32(v2, *(int32x2_t *)a1->i8);
  v4 = (int32x2_t)vextq_s8(*a2, *a2, 8uLL).u64[0];
  v5 = (float32x2_t)vzip1_s32(v4, *(int32x2_t *)a2->i8);
  v6 = (float32x2_t)vext_s8(*(int8x8_t *)a1->i8, (int8x8_t)v2, 4uLL);
  v7 = vmul_f32(v3, (float32x2_t)vext_s8((int8x8_t)v4, *(int8x8_t *)a2->i8, 4uLL));
  *(float32x2_t *)v8.f32 = vmul_f32(v3, (float32x2_t)vext_s8(*(int8x8_t *)a2->i8, (int8x8_t)v4, 4uLL));
  *(float32x2_t *)&v8.u32[2] = vmul_f32(v6, (float32x2_t)vrev64_s32((int32x2_t)v5));
  *(float32x2_t *)v9.i8 = vadd_f32(vmul_laneq_f32(*(float32x2_t *)a1->i8, *(float32x4_t *)a2, 3), vmul_f32(v6, v5));
  v9.u64[1] = (unint64_t)vadd_f32(vmul_lane_f32(*(float32x2_t *)a1->i8, *(float32x2_t *)a2->i8, 1), v7);
  result = (int8x16_t)vaddq_f32(vsubq_f32(vmulq_laneq_f32(*(float32x4_t *)a2, *(float32x4_t *)a1, 3), v8), (float32x4_t)veorq_s8(v9, (int8x16_t)xmmword_1DD007D50));
  *a1 = result;
  return result;
}

float btManifoldResult::calculateCombinedFriction(btManifoldResult *this, const btCollisionObject *a2, const btCollisionObject *a3)
{
  float result;

  result = *((float *)this + 63) * *((float *)a2 + 63);
  if (result < -10.0)
    result = -10.0;
  if (result > 10.0)
    return 10.0;
  return result;
}

float btManifoldResult::calculateCombinedRestitution(btManifoldResult *this, const btCollisionObject *a2, const btCollisionObject *a3)
{
  return *((float *)this + 64) * *((float *)a2 + 64);
}

_QWORD *btManifoldResult::btManifoldResult(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = &off_1EA5965B0;
  result[1] = 0;
  result[2] = a2;
  result[3] = a3;
  return result;
}

void btManifoldResult::addContactPoint(btManifoldResult *this, float32x4_t *a2, float32x4_t *a3, float a4)
{
  btPersistentManifold *v7;
  btCollisionObject *var3;
  uint64_t v9;
  btVector3 v10;
  float32x4_t v11;
  btVector3 v12;
  btVector3 v13;
  uint64_t v14;
  int8x16_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  float32x4_t v25;
  int32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  btVector3 v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  float32x4_t v35;
  float32x4_t v36;
  int32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  uint64_t v43;
  int8x16_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  btVector3 v49;
  int CacheEntry;
  uint64_t v51;
  uint64_t v52;
  float32x2_t v53;
  float32x2_t v54;
  float32x2_t v55;
  float32x2_t v61;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  int *v73;
  int *v74;
  int *v75;
  int *v76;
  int v77;
  int v78;
  int v79;
  btPersistentManifold *v80;
  uint64_t v81;
  uint64_t v82;
  btManifoldPoint v84;

  if (btPersistentManifold::getContactBreakingThreshold(*((btPersistentManifold **)this + 1)) >= a4)
  {
    v7 = (btPersistentManifold *)*((_QWORD *)this + 1);
    var3 = v7->var3;
    v9 = *(_QWORD *)(*((_QWORD *)this + 2) + 16);
    v10 = (btVector3)*a2;
    v11 = vmulq_n_f32(*a2, a4);
    v11.i32[3] = 0;
    v12 = (btVector3)*a3;
    v13 = (btVector3)vaddq_f32(*a3, v11);
    if (var3 == (btCollisionObject *)v9)
    {
      v34 = *((int8x16_t *)var3 + 3);
      v35 = vsubq_f32((float32x4_t)v13, *((float32x4_t *)var3 + 4));
      v36 = *((float32x4_t *)var3 + 1);
      v37 = *((int32x4_t *)var3 + 2);
      v38 = (float32x4_t)vtrn1q_s32((int32x4_t)v36, v37);
      v39.i64[0] = vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL).u64[0];
      v39.i64[1] = vextq_s8(v34, v34, 8uLL).u64[0];
      v40 = (int8x16_t)vmulq_f32(v39, v35);
      v35.i32[3] = 0;
      *(int32x2_t *)v36.f32 = vzip2_s32(*(int32x2_t *)v36.f32, *(int32x2_t *)v37.i8);
      v38.i64[1] = v34.u32[0];
      *(int32x2_t *)&v36.u32[2] = vzip2_s32(*(int32x2_t *)v34.i8, 0);
      v41 = (int8x16_t)vmulq_f32(v38, v35);
      v42 = (int8x16_t)vmulq_f32(v36, v35);
      v40.i32[3] = 0;
      *(float32x2_t *)v37.i8 = vpadd_f32(vpadd_f32(*(float32x2_t *)v40.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v40, v40, 8uLL)), 0);
      v43 = *(_QWORD *)(*((_QWORD *)this + 3) + 16);
      v44 = *(int8x16_t *)(v43 + 48);
      v45 = vsubq_f32((float32x4_t)v12, *(float32x4_t *)(v43 + 64));
      v46 = *(float32x4_t *)(v43 + 16);
      v47 = *(float32x4_t *)(v43 + 32);
      v48 = (float32x4_t)vtrn1q_s32((int32x4_t)v46, (int32x4_t)v47);
      *(int32x2_t *)v46.f32 = vzip2_s32(*(int32x2_t *)v46.f32, *(int32x2_t *)v47.f32);
      v47.i64[0] = vextq_s8((int8x16_t)v48, (int8x16_t)v48, 8uLL).u64[0];
      *(float32x2_t *)v30.var0.var0 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v41, v41, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v42, v42, 8uLL)), vpadd_f32(*(float32x2_t *)v41.i8, *(float32x2_t *)v42.i8));
      *(_QWORD *)&v30.var0.var0[2] = v37.i64[0];
      v45.i32[3] = 0;
      v48.i64[1] = v44.u32[0];
      *(int32x2_t *)&v46.u32[2] = vzip2_s32(*(int32x2_t *)v44.i8, 0);
      v47.i64[1] = vextq_s8(v44, v44, 8uLL).u32[0];
      v31 = (int8x16_t)vmulq_f32(v48, v45);
      v32 = (int8x16_t)vmulq_f32(v46, v45);
      v33 = (int8x16_t)vmulq_f32(v47, v45);
    }
    else
    {
      v14 = *(_QWORD *)(*((_QWORD *)this + 3) + 16);
      v15 = *(int8x16_t *)(v14 + 48);
      v16 = vsubq_f32((float32x4_t)v13, *(float32x4_t *)(v14 + 64));
      v17 = *(float32x4_t *)(v14 + 16);
      v18 = *(float32x4_t *)(v14 + 32);
      v19 = (float32x4_t)vtrn1q_s32((int32x4_t)v17, (int32x4_t)v18);
      *(int32x2_t *)v17.f32 = vzip2_s32(*(int32x2_t *)v17.f32, *(int32x2_t *)v18.f32);
      v18.i64[0] = vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL).u64[0];
      v20 = v16;
      v20.i32[3] = 0;
      v19.i64[1] = v15.u32[0];
      *(int32x2_t *)&v17.u32[2] = vzip2_s32(*(int32x2_t *)v15.i8, 0);
      v18.i64[1] = vextq_s8(v15, v15, 8uLL).u64[0];
      v21 = (int8x16_t)vmulq_f32(v18, v16);
      v22 = (int8x16_t)vmulq_f32(v19, v20);
      v23 = (int8x16_t)vmulq_f32(v17, v20);
      v21.i32[3] = 0;
      *(float32x2_t *)v19.f32 = vpadd_f32(vpadd_f32(*(float32x2_t *)v21.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL)), 0);
      v24 = *(int8x16_t *)(v9 + 48);
      v25 = vsubq_f32((float32x4_t)v12, *(float32x4_t *)(v9 + 64));
      v26 = *(int32x4_t *)(v9 + 16);
      v27 = *(float32x4_t *)(v9 + 32);
      v28 = (float32x4_t)vtrn1q_s32(v26, (int32x4_t)v27);
      *(int32x2_t *)v27.f32 = vzip2_s32(*(int32x2_t *)v26.i8, *(int32x2_t *)v27.f32);
      v29.i64[0] = vextq_s8((int8x16_t)v28, (int8x16_t)v28, 8uLL).u64[0];
      *(float32x2_t *)v30.var0.var0 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL)), vpadd_f32(*(float32x2_t *)v22.i8, *(float32x2_t *)v23.i8));
      *(_QWORD *)&v30.var0.var0[2] = v19.i64[0];
      v25.i32[3] = 0;
      v28.i64[1] = v24.u32[0];
      *(int32x2_t *)&v27.u32[2] = vzip2_s32(*(int32x2_t *)v24.i8, 0);
      v29.i64[1] = vextq_s8(v24, v24, 8uLL).u32[0];
      v31 = (int8x16_t)vmulq_f32(v28, v25);
      v32 = (int8x16_t)vmulq_f32(v27, v25);
      v33 = (int8x16_t)vmulq_f32(v29, v25);
    }
    v33.i32[3] = 0;
    *(float32x2_t *)v49.var0.var0 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL)), vpadd_f32(*(float32x2_t *)v31.i8, *(float32x2_t *)v32.i8));
    *(float32x2_t *)&v49.var0.var0[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v33.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v33, v33, 8uLL)), 0);
    v84.var0 = v30;
    v84.var1 = v49;
    v84.var3 = v13;
    v84.var4 = v10;
    v84.var5 = a4;
    *(_QWORD *)&v84.var6 = 0;
    v84.var8 = 0.0;
    v84.var13 = 0;
    v84.var14 = 0;
    memset(&v84.var15, 0, 32);
    v84.var2 = v12;
    CacheEntry = btPersistentManifold::getCacheEntry(v7, &v84);
    v51 = *(_QWORD *)(*((_QWORD *)this + 2) + 16);
    v52 = *(_QWORD *)(*((_QWORD *)this + 3) + 16);
    v53.i32[0] = *(_DWORD *)(v51 + 252);
    v54.i32[0] = *(_DWORD *)(v52 + 252);
    v84.var8 = *(float *)(v51 + 256) * *(float *)(v52 + 256);
    v53.i32[1] = *(_DWORD *)(v51 + 260);
    v54.i32[1] = *(_DWORD *)(v52 + 260);
    v55 = vmul_f32(v53, v54);
    __asm { FMOV            V1.2S, #-10.0 }
    v61 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(_D1, v55), (int8x8_t)_D1, (int8x8_t)v55);
    __asm { FMOV            V1.2S, #10.0 }
    *(int8x8_t *)&v84.var6 = vbsl_s8((int8x8_t)vcgt_f32(v61, _D1), (int8x8_t)_D1, (int8x8_t)v61);
    if (fabsf(v84.var4.var0.var0[2]) <= 0.70711)
    {
      v71 = (float)(v84.var4.var0.var0[1] * v84.var4.var0.var0[1])
          + (float)(v84.var4.var0.var0[0] * v84.var4.var0.var0[0]);
      v72 = 1.0 / sqrtf(v71);
      v70 = -(float)(v84.var4.var0.var0[1] * v72);
      v65 = v84.var4.var0.var0[0] * v72;
      v67 = -(float)(v84.var4.var0.var0[2] * (float)(v84.var4.var0.var0[0] * v72));
      v68 = v84.var4.var0.var0[2] * v70;
      v69 = v71 * v72;
      v66 = 0.0;
    }
    else
    {
      v63 = (float)(v84.var4.var0.var0[2] * v84.var4.var0.var0[2])
          + (float)(v84.var4.var0.var0[1] * v84.var4.var0.var0[1]);
      v64 = 1.0 / sqrtf(v63);
      v65 = -(float)(v84.var4.var0.var0[2] * v64);
      v66 = v84.var4.var0.var0[1] * v64;
      v67 = v63 * v64;
      v68 = -(float)(v84.var4.var0.var0[0] * (float)(v84.var4.var0.var0[1] * v64));
      v69 = v65 * v84.var4.var0.var0[0];
      v70 = 0.0;
    }
    *(_QWORD *)&v84.var23.var0.var0[1] = __PAIR64__(LODWORD(v65), LODWORD(v70));
    v84.var23.var0.var0[3] = v66;
    *(_QWORD *)&v84.var24.var0.var0[1] = __PAIR64__(LODWORD(v68), LODWORD(v67));
    v84.var24.var0.var0[3] = v69;
    if (var3 == (btCollisionObject *)v9)
    {
      v73 = (int *)((char *)this + 32);
      v74 = (int *)((char *)this + 36);
      v75 = (int *)((char *)this + 40);
      v76 = (int *)((char *)this + 44);
    }
    else
    {
      v73 = (int *)((char *)this + 36);
      v74 = (int *)((char *)this + 32);
      v75 = (int *)((char *)this + 44);
      v76 = (int *)((char *)this + 40);
    }
    v77 = *v76;
    v78 = *v75;
    v79 = *v74;
    v84.var9 = *v73;
    v84.var10 = v79;
    v84.var11 = v78;
    v84.var12 = v77;
    v80 = (btPersistentManifold *)*((_QWORD *)this + 1);
    if (CacheEntry < 0)
      CacheEntry = btPersistentManifold::addManifoldPoint(v80, &v84);
    else
      btPersistentManifold::replaceContactPoint(v80, &v84, CacheEntry);
    if (gContactAddedCallback
      && ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 2) + 16) + 232) & 8) != 0
       || (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 3) + 16) + 232) & 8) != 0))
    {
      v81 = 24;
      if (var3 == (btCollisionObject *)v9)
        v82 = 16;
      else
        v82 = 24;
      if (var3 != (btCollisionObject *)v9)
        v81 = 16;
      gContactAddedCallback(*((_QWORD *)this + 1) + 192 * CacheEntry + 16, *(_QWORD *)((char *)this + v82), v84.var9, v84.var11, *(_QWORD *)((char *)this + v81), v84.var10, v84.var12);
    }
  }
}

_BYTE *btPersistentManifold::replaceContactPoint(btPersistentManifold *this, const btManifoldPoint *a2, int a3)
{
  char *v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE *result;

  v4 = (char *)this + 192 * a3;
  v5 = *((_DWORD *)v4 + 42);
  v6 = *((_DWORD *)v4 + 37);
  v7 = *((_QWORD *)v4 + 16);
  *((_OWORD *)v4 + 1) = a2->var0;
  *((_OWORD *)v4 + 2) = a2->var1;
  *((_OWORD *)v4 + 3) = a2->var2;
  *((_OWORD *)v4 + 4) = a2->var3;
  *((_OWORD *)v4 + 5) = a2->var4;
  v8 = *(_QWORD *)(v4 + 140);
  *((_OWORD *)v4 + 6) = *(_OWORD *)&a2->var5;
  v9 = *(_OWORD *)&a2->var9;
  v10 = *(_OWORD *)&a2->var13;
  v11 = *(_OWORD *)&a2->var16;
  *(_OWORD *)(v4 + 156) = *(_OWORD *)&a2->var19;
  *((_OWORD *)v4 + 8) = v10;
  *((_OWORD *)v4 + 9) = v11;
  *((_OWORD *)v4 + 7) = v9;
  *((_OWORD *)v4 + 11) = *(btVector3 *)((char *)&a2->var23 + 4);
  *((_OWORD *)v4 + 12) = *(btVector3 *)((char *)&a2->var24 + 4);
  *((_QWORD *)v4 + 16) = v7;
  *(_QWORD *)(v4 + 140) = v8;
  *((_DWORD *)v4 + 37) = v6;
  *((_DWORD *)v4 + 42) = v5;
  result = *(_BYTE **)&this[1].var0;
  if (result)
  {
    if ((result[8] & 2) != 0)
      return (_BYTE *)(*(uint64_t (**)(_BYTE *, btPersistentManifold *))(*(_QWORD *)result + 8))(result, this);
  }
  return result;
}

void btManifoldResult::~btManifoldResult(btManifoldResult *this)
{
  JUMPOUT(0x1DF0D41C0);
}

void btSimulationIslandManager::btSimulationIslandManager(btSimulationIslandManager *this)
{
  *(_QWORD *)this = &off_1EA597B60;
  btUnionFind::btUnionFind((btSimulationIslandManager *)((char *)this + 8));
  *((_BYTE *)this + 64) = 1;
  *((_QWORD *)this + 7) = 0;
  *(_QWORD *)((char *)this + 44) = 0;
  *((_BYTE *)this + 96) = 1;
  *((_QWORD *)this + 11) = 0;
  *(_QWORD *)((char *)this + 76) = 0;
  *((_BYTE *)this + 104) = 1;
}

void btSimulationIslandManager::~btSimulationIslandManager(btSimulationIslandManager *this)
{
  btUnionFind *v2;

  *(_QWORD *)this = &off_1EA597B60;
  v2 = (btSimulationIslandManager *)((char *)this + 8);
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)this + 72);
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)this + 40);
  btUnionFind::~btUnionFind(v2);
}

{
  btSimulationIslandManager::~btSimulationIslandManager(this);
  JUMPOUT(0x1DF0D41C0);
}

uint64_t btSimulationIslandManager::findUnions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;

  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a3 + 96) + 72))(*(_QWORD *)(a3 + 96));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4);
  if ((_DWORD)result)
  {
    LODWORD(v6) = result;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    if ((int)v6 >= 1)
    {
      v7 = a1 + 8;
      v6 = v6;
      v8 = (uint64_t **)(result + 8);
      do
      {
        v9 = **(v8 - 1);
        if (v9)
        {
          v10 = **v8;
          v11 = (*(_BYTE *)(v9 + 232) & 7) != 0 || v10 == 0;
          if (!v11 && (*(_BYTE *)(v10 + 232) & 7) == 0)
            result = btUnionFind::unite(v7, *(unsigned int *)(v9 + 236), *(unsigned int *)(v10 + 236));
        }
        v8 += 4;
        --v6;
      }
      while (v6);
    }
  }
  return result;
}

uint64_t btUnionFind::unite(uint64_t this, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int *v4;
  int i;
  uint64_t v6;
  int *v7;
  int j;
  uint64_t v9;
  _DWORD *v10;

  v3 = *(_QWORD *)(this + 16);
  v4 = (int *)(v3 + 8 * (int)a2);
  for (i = *v4; (_DWORD)a2 != *v4; i = *v4)
  {
    v6 = 8 * i;
    *v4 = *(_DWORD *)(v3 + v6);
    a2 = *(int *)(v3 + v6);
    v4 = (int *)(v3 + 8 * a2);
  }
  v7 = (int *)(v3 + 8 * (int)a3);
  for (j = *v7; (_DWORD)a3 != *v7; j = *v7)
  {
    v9 = 8 * j;
    *v7 = *(_DWORD *)(v3 + v9);
    a3 = *(int *)(v3 + v9);
    v7 = (int *)(v3 + 8 * a3);
  }
  if ((_DWORD)a2 != (_DWORD)a3)
  {
    v10 = (_DWORD *)(v3 + 8 * (int)a2);
    *v10 = a3;
    *(_DWORD *)(v3 + 8 * (int)a3 + 4) += v10[1];
  }
  return this;
}

uint64_t btSimulationIslandManager::updateActivationState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;

  v4 = *(unsigned int *)(a2 + 12);
  if ((int)v4 < 1)
  {
    v5 = 0;
  }
  else
  {
    v5 = 0;
    v6 = *(_QWORD *)(a2 + 24);
    do
    {
      v7 = *(_DWORD **)v6;
      if ((*(_BYTE *)(*(_QWORD *)v6 + 232) & 3) == 0)
        v7[59] = v5++;
      v7[60] = -1;
      v7[70] = 1065353216;
      v6 += 8;
      --v4;
    }
    while (v4);
  }
  btUnionFind::reset((btUnionFind *)(a1 + 8), v5);
  return btSimulationIslandManager::findUnions(a1, v8, a2);
}

uint64_t btSimulationIslandManager::storeIslandActivationState(uint64_t this, btCollisionWorld *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *((unsigned int *)a2 + 3);
  if ((int)v2 >= 1)
  {
    v3 = 0;
    v4 = 0;
    v5 = *((_QWORD *)a2 + 3);
    do
    {
      v6 = *(_QWORD *)(v5 + 8 * v3);
      if ((*(_BYTE *)(v6 + 232) & 3) != 0)
      {
        *(_QWORD *)(v6 + 236) = 0xFFFFFFFEFFFFFFFFLL;
      }
      else
      {
        v7 = *(_QWORD *)(this + 24);
        v8 = (int *)(v7 + 8 * v4);
        v9 = *v8;
        LODWORD(v10) = v4;
        if (*v8 != v4)
        {
          do
          {
            v11 = 8 * v9;
            *v8 = *(_DWORD *)(v7 + v11);
            v10 = *(int *)(v7 + v11);
            v8 = (int *)(v7 + 8 * v10);
            v9 = *v8;
          }
          while ((_DWORD)v10 != *v8);
        }
        *(_DWORD *)(v7 + 8 * v4 + 4) = v3;
        *(_DWORD *)(v6 + 236) = v10;
        *(_DWORD *)(v6 + 240) = -1;
        ++v4;
      }
      ++v3;
    }
    while (v3 != v2);
  }
  return this;
}

void btSimulationIslandManager::buildIslands(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void **v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int *v19;
  int v20;
  char v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  void **v45;

  v6 = *(int *)(a1 + 44);
  if ((v6 & 0x80000000) != 0)
  {
    if ((*(_DWORD *)(a1 + 48) & 0x80000000) != 0)
    {
      v7 = *(void ***)(a1 + 56);
      if (v7 && *(_BYTE *)(a1 + 64))
        btAlignedFreeInternal(v7);
      *(_BYTE *)(a1 + 64) = 1;
      *(_QWORD *)(a1 + 56) = 0;
      *(_DWORD *)(a1 + 48) = 0;
    }
    do
      *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v6++) = 0;
    while ((_DWORD)v6);
  }
  *(_DWORD *)(a1 + 44) = 0;
  btUnionFind::sortIslands(a1 + 8);
  v8 = *(unsigned int *)(a1 + 12);
  if ((int)v8 >= 1)
  {
    v9 = 0;
    do
    {
      v10 = v9;
      v11 = *(_QWORD *)(a1 + 24);
      v12 = 8 * v9;
      v13 = (int *)(v11 + v12 + 8);
      v14 = *(_DWORD *)(v11 + v12);
      if ((int)v8 <= v9 + 1)
        v15 = v9 + 1;
      else
        v15 = v8;
      v16 = v15 - 1;
      v17 = v9 + 1;
      while (v17 < v8)
      {
        v18 = *v13;
        v13 += 2;
        ++v9;
        ++v17;
        if (v18 != v14)
        {
          v16 = v9 - 1;
          goto LABEL_18;
        }
      }
      v9 = v15;
LABEL_18:
      if (v10 <= v16)
      {
        v19 = (int *)(v11 + v12 + 4);
        v20 = v16 - v10 + 1;
        v21 = 1;
        v22 = v20;
        do
        {
          v23 = *v19;
          v19 += 2;
          v24 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 8 * v23);
          if (*(_DWORD *)(v24 + 236) == v14)
          {
            v25 = *(_DWORD *)(v24 + 244);
            v27 = v25 != 4 && v25 != 1;
            v21 &= v27;
          }
          --v22;
        }
        while (v22);
        if ((v21 & 1) != 0)
        {
          v28 = v12 + 4;
          do
          {
            v29 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 8 * *(int *)(*(_QWORD *)(a1 + 24) + v28));
            if (*(_DWORD *)(v29 + 236) == v14)
              btCollisionObject::setActivationState((btCollisionObject *)v29, 2);
            v28 += 8;
            --v20;
          }
          while (v20);
        }
        else
        {
          v30 = v12 + 4;
          do
          {
            v31 = *(_DWORD **)(*(_QWORD *)(a3 + 24) + 8 * *(int *)(*(_QWORD *)(a1 + 24) + v30));
            if (v31[59] == v14 && v31[61] == 2)
            {
              btCollisionObject::setActivationState(*(btCollisionObject **)(*(_QWORD *)(a3 + 24) + 8 * *(int *)(*(_QWORD *)(a1 + 24) + v30)), 3);
              v31[62] = 0;
            }
            v30 += 8;
            --v20;
          }
          while (v20);
        }
      }
    }
    while (v9 < (int)v8);
  }
  v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 72))(a2);
  if (v32 >= 1)
  {
    v33 = v32;
    v34 = 0;
    do
    {
      v35 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 80))(a2, v34);
      v36 = v35;
      v37 = *(_QWORD *)(v35 + 784);
      v38 = *(_QWORD *)(v35 + 792);
      if (v37 && *(_DWORD *)(v37 + 244) != 2 || v38 && *(_DWORD *)(v38 + 244) != 2)
      {
        v39 = *(_DWORD *)(v37 + 232);
        if ((v39 & 2) != 0 && (v39 & 4) == 0 && *(_DWORD *)(v37 + 244) != 2)
          btCollisionObject::activate(*(btCollisionObject **)(v35 + 792), 0);
        v40 = *(_DWORD *)(v38 + 232);
        if ((v40 & 2) != 0 && (v40 & 4) == 0 && *(_DWORD *)(v38 + 244) != 2)
          btCollisionObject::activate((btCollisionObject *)v37, 0);
        if (*(_BYTE *)(a1 + 104)
          && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 56))(a2, v37, v38))
        {
          v41 = *(_DWORD *)(a1 + 44);
          if (v41 == *(_DWORD *)(a1 + 48))
          {
            v42 = v41 ? 2 * v41 : 1;
            if (v41 < v42)
            {
              if (v42)
              {
                v43 = btAlignedAllocInternal(8 * v42, 16);
                v41 = *(_DWORD *)(a1 + 44);
              }
              else
              {
                v43 = 0;
              }
              if (v41 >= 1)
              {
                v44 = 0;
                do
                {
                  *(_QWORD *)(v43 + v44) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + v44);
                  v44 += 8;
                }
                while (8 * v41 != v44);
              }
              v45 = *(void ***)(a1 + 56);
              if (v45)
              {
                if (*(_BYTE *)(a1 + 64))
                {
                  btAlignedFreeInternal(v45);
                  v41 = *(_DWORD *)(a1 + 44);
                }
              }
              *(_BYTE *)(a1 + 64) = 1;
              *(_QWORD *)(a1 + 56) = v43;
              *(_DWORD *)(a1 + 48) = v42;
            }
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v41) = v36;
          *(_DWORD *)(a1 + 44) = v41 + 1;
        }
      }
      v34 = (v34 + 1);
    }
    while ((_DWORD)v34 != v33);
  }
}

void btSimulationIslandManager::buildAndProcessIslands(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  void **v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  void **v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  char v42;

  btSimulationIslandManager::buildIslands(a1, a2, a3);
  if (*(_BYTE *)(a1 + 104))
  {
    v38 = a4;
    v8 = *(unsigned int *)(a1 + 12);
    v9 = *(int *)(a1 + 44);
    if ((int)v9 > 1)
      btAlignedObjectArray<btPersistentManifold *>::quickSortInternal<btPersistentManifoldSortPredicate>(a1 + 40, (uint64_t)&v42, 0, v9 - 1);
    if ((int)v8 >= 1)
    {
      v10 = 0;
      v11 = 0;
      v12 = 1;
      v39 = v9;
      do
      {
        v41 = v11;
        v13 = v10;
        v14 = *(unsigned int *)(*(_QWORD *)(a1 + 24) + 8 * v10);
        if ((int)v8 <= v10 + 1)
          v15 = v10 + 1;
        else
          v15 = v8;
        v40 = v15;
        v16 = 1;
        while (1)
        {
          v17 = *(_QWORD *)(a1 + 24);
          if (*(_DWORD *)(v17 + 8 * v13) != (_DWORD)v14)
            break;
          v18 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 8 * *(int *)(v17 + 8 * v13 + 4));
          v19 = *(_DWORD *)(a1 + 76);
          if (v19 == *(_DWORD *)(a1 + 80))
          {
            v20 = v19 ? 2 * v19 : 1;
            if (v19 < v20)
            {
              if (v20)
              {
                v21 = btAlignedAllocInternal(8 * v20, 16);
                v19 = *(_DWORD *)(a1 + 76);
              }
              else
              {
                v21 = 0;
              }
              if (v19 >= 1)
              {
                v22 = 0;
                do
                {
                  *(_QWORD *)(v21 + v22) = *(_QWORD *)(*(_QWORD *)(a1 + 88) + v22);
                  v22 += 8;
                }
                while (8 * v19 != v22);
              }
              v23 = *(void ***)(a1 + 88);
              if (v23 && *(_BYTE *)(a1 + 96))
              {
                btAlignedFreeInternal(v23);
                v19 = *(_DWORD *)(a1 + 76);
              }
              *(_BYTE *)(a1 + 96) = 1;
              *(_QWORD *)(a1 + 88) = v21;
              *(_DWORD *)(a1 + 80) = v20;
            }
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v19) = v18;
          *(_DWORD *)(a1 + 76) = v19 + 1;
          v24 = *(_DWORD *)(v18 + 244);
          if (v24 != 2)
            v16 &= v24 == 5;
          if (++v13 >= v8)
            goto LABEL_31;
        }
        v40 = v13;
        if (v41 >= (int)v39)
          goto LABEL_44;
LABEL_31:
        v25 = *(_QWORD *)(a1 + 56);
        v26 = v25 + 8 * v41;
        v27 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v26 + 784) + 236);
        if (v27 < 0)
          v27 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v26 + 792) + 236);
        if (v27 == (_DWORD)v14)
        {
          if ((int)v39 <= v41 + 1)
            v28 = v41 + 1;
          else
            v28 = v39;
          v29 = v41 + 1;
          v12 = v41;
          while (v29 < v39)
          {
            v30 = *(_QWORD *)(v25 + 8 * v29);
            v31 = *(_DWORD *)(*(_QWORD *)(v30 + 784) + 236);
            if (v31 < 0)
              v31 = *(_DWORD *)(*(_QWORD *)(v30 + 792) + 236);
            ++v12;
            ++v29;
            if ((_DWORD)v14 != v31)
              goto LABEL_46;
          }
          v12 = v28;
LABEL_46:
          v32 = (v12 - v41);
        }
        else
        {
LABEL_44:
          v32 = 0;
          v26 = 0;
        }
        v33 = *(_DWORD *)(a1 + 76);
        if ((v16 & 1) == 0)
        {
          (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v38 + 16))(v38, *(_QWORD *)(a1 + 88), *(unsigned int *)(a1 + 76), v26, v32, v14);
          v33 = *(_DWORD *)(a1 + 76);
        }
        v10 = v40;
        if ((_DWORD)v32)
          v11 = v12;
        else
          v11 = v41;
        if (v33 < 0)
        {
          if ((*(_DWORD *)(a1 + 80) & 0x80000000) != 0)
          {
            v34 = *(void ***)(a1 + 88);
            if (v34 && *(_BYTE *)(a1 + 96))
              btAlignedFreeInternal(v34);
            *(_BYTE *)(a1 + 96) = 1;
            *(_QWORD *)(a1 + 88) = 0;
            *(_DWORD *)(a1 + 80) = 0;
          }
          v35 = v33;
          do
            *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v35++) = 0;
          while ((_DWORD)v35);
        }
        *(_DWORD *)(a1 + 76) = 0;
      }
      while (v40 < (int)v8);
    }
  }
  else
  {
    v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 88))(a2);
    v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 72))(a2);
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a4 + 16))(a4, *(_QWORD *)(a3 + 24), *(unsigned int *)(a3 + 12), v36, v37, 0xFFFFFFFFLL);
  }
}

uint64_t btAlignedObjectArray<btPersistentManifold *>::quickSortInternal<btPersistentManifoldSortPredicate>(uint64_t a1, uint64_t a2, int a3, int a4)
{
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t *v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t result;

  do
  {
    v8 = a3;
    v9 = a3 + a4;
    if (a3 + a4 < 0 != __OFADD__(a3, a4))
      ++v9;
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * (v9 >> 1));
    v11 = a4;
    do
    {
      v12 = *(_QWORD *)(a1 + 16);
      v13 = *(_DWORD *)(*(_QWORD *)(v10 + 784) + 236);
      v14 = (uint64_t *)(v12 + 8 * a3);
      v15 = a3;
      do
      {
        v16 = *v14;
        v17 = *(_DWORD *)(*(_QWORD *)(*v14 + 784) + 236);
        if (v17 < 0)
          v17 = *(_DWORD *)(*(_QWORD *)(v16 + 792) + 236);
        v18 = *(_DWORD *)(*(_QWORD *)(v10 + 784) + 236);
        if (v13 < 0)
          v18 = *(_DWORD *)(*(_QWORD *)(v10 + 792) + 236);
        ++v15;
        ++v14;
      }
      while (v17 < v18);
      a3 = v15 - 1;
      v19 = 8 * v11;
      v20 = v11;
      do
      {
        v21 = *(_DWORD *)(*(_QWORD *)(v10 + 784) + 236);
        if (v13 < 0)
          v21 = *(_DWORD *)(*(_QWORD *)(v10 + 792) + 236);
        v22 = *(_QWORD *)(v12 + v19);
        result = *(unsigned int *)(*(_QWORD *)(v22 + 784) + 236);
        if ((result & 0x80000000) != 0)
          result = *(unsigned int *)(*(_QWORD *)(v22 + 792) + 236);
        --v20;
        v19 -= 8;
      }
      while (v21 < (int)result);
      v11 = v20 + 1;
      if (a3 <= v20 + 1)
      {
        *(v14 - 1) = v22;
        *(_QWORD *)(*(_QWORD *)(a1 + 16) + v19 + 8) = v16;
        a3 = v15;
        v11 = v20;
      }
    }
    while (a3 <= v11);
    if (v11 > v8)
      result = btAlignedObjectArray<btPersistentManifold *>::quickSortInternal<btPersistentManifoldSortPredicate>(a1, a2);
  }
  while (a3 < a4);
  return result;
}

uint64_t btSphereSphereCollisionAlgorithm::btSphereSphereCollisionAlgorithm(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v9;

  v9 = btActivatingCollisionAlgorithm::btActivatingCollisionAlgorithm((_QWORD *)a1, a3);
  *v9 = &off_1EA5981A8;
  *((_BYTE *)v9 + 16) = 0;
  v9[3] = a2;
  if (!a2)
  {
    *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a4 + 16), *(_QWORD *)(a5 + 16));
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

void btSphereSphereCollisionAlgorithm::~btSphereSphereCollisionAlgorithm(btSphereSphereCollisionAlgorithm *this)
{
  *(_QWORD *)this = &off_1EA5981A8;
  if (*((_BYTE *)this + 16) && *((_QWORD *)this + 3))
    (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
  C3DSceneSourcePerformConsistencyCheck(this);
}

{
  btSphereSphereCollisionAlgorithm::~btSphereSphereCollisionAlgorithm(this);
  JUMPOUT(0x1DF0D41C0);
}

btPersistentManifold *btSphereSphereCollisionAlgorithm::processCollision(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  btPersistentManifold *result;
  float32x4_t v7;
  float32x4_t v8;
  int8x16_t v9;
  float32x2_t v10;
  float v11;
  float v12;
  __n128 v13;
  btCollisionObject *v14;
  uint64_t v15;
  const btTransform *v16;
  float32x4_t v17;
  float32x4_t v18;
  btCollisionObject *var3;
  uint64_t v20;
  float32x4_t v21;
  __int128 v22;

  result = *(btPersistentManifold **)(a1 + 24);
  if (result)
  {
    a5[1] = result;
    v7 = *(float32x4_t *)(*(_QWORD *)(a3 + 24) + 48);
    v8 = vsubq_f32(*(float32x4_t *)(*(_QWORD *)(a2 + 24) + 48), v7);
    v8.i32[3] = 0;
    v9 = (int8x16_t)vmulq_f32(v8, v8);
    v10 = vpadd_f32(*(float32x2_t *)v9.i8, *(float32x2_t *)v9.i8);
    v13 = (__n128)vextq_s8(v9, v9, 8uLL);
    v13.n128_u64[0] = (unint64_t)vadd_f32(v10, (float32x2_t)v13.n128_u64[0]);
    v11 = sqrtf(v13.n128_f32[0]);
    v12 = *(float *)(*(_QWORD *)(a3 + 8) + 48) * *(float *)(*(_QWORD *)(a3 + 8) + 32);
    v13.n128_f32[0] = (float)(*(float *)(*(_QWORD *)(a2 + 8) + 48) * *(float *)(*(_QWORD *)(a2 + 8) + 32)) + v12;
    if (v11 <= v13.n128_f32[0])
    {
      v13.n128_f32[0] = v11 - v13.n128_f32[0];
      v22 = xmmword_1DD007970;
      if (v11 <= 0.00000011921)
      {
        v17 = (float32x4_t)v22;
      }
      else
      {
        v17 = vmulq_n_f32(v8, 1.0 / v11);
        v17.i32[3] = 0;
        v22 = (__int128)v17;
      }
      v18 = vmulq_n_f32(v17, v12);
      v18.i32[3] = 0;
      v21 = vaddq_f32(v7, v18);
      (*(void (**)(_QWORD *, __int128 *, float32x4_t *, __n128))(*a5 + 32))(a5, &v22, &v21, v13);
      result = (btPersistentManifold *)a5[1];
      if (LODWORD(result->var6))
      {
        var3 = result->var3;
        v20 = *(_QWORD *)(a5[2] + 16);
        if (var3 == (btCollisionObject *)v20)
          v20 = *(_QWORD *)(a5[3] + 16);
        else
          var3 = *(btCollisionObject **)(a5[3] + 16);
        return btPersistentManifold::refreshContactPoints(result, (const btTransform *)((char *)var3 + 16), (const btTransform *)(v20 + 16));
      }
    }
    else if (LODWORD(result->var6))
    {
      v14 = result->var3;
      v15 = *(_QWORD *)(a5[2] + 16);
      if (v14 == (btCollisionObject *)v15)
      {
        v16 = (const btTransform *)((char *)v14 + 16);
        v15 = *(_QWORD *)(a5[3] + 16);
      }
      else
      {
        v16 = (const btTransform *)(*(_QWORD *)(a5[3] + 16) + 16);
      }
      return btPersistentManifold::refreshContactPoints(result, v16, (const btTransform *)(v15 + 16));
    }
  }
  return result;
}

float btSphereSphereCollisionAlgorithm::calculateTimeOfImpact()
{
  return 1.0;
}

void btSphereSphereCollisionAlgorithm::getAllContactManifolds(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  BOOL v10;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2 && *(_BYTE *)(a1 + 16))
  {
    v5 = *(_DWORD *)(a2 + 4);
    if (v5 == *(_DWORD *)(a2 + 8))
    {
      v6 = v5 ? 2 * v5 : 1;
      if (v5 < v6)
      {
        if (v6)
        {
          v7 = btAlignedAllocInternal(8 * v6, 16);
          v5 = *(_DWORD *)(a2 + 4);
        }
        else
        {
          v7 = 0;
        }
        if (v5 >= 1)
        {
          v8 = 0;
          do
          {
            *(_QWORD *)(v7 + v8) = *(_QWORD *)(*(_QWORD *)(a2 + 16) + v8);
            v8 += 8;
          }
          while (8 * v5 != v8);
        }
        v9 = *(void ***)(a2 + 16);
        if (v9)
          v10 = *(_BYTE *)(a2 + 24) == 0;
        else
          v10 = 1;
        if (!v10)
        {
          btAlignedFreeInternal(v9);
          v5 = *(_DWORD *)(a2 + 4);
        }
        *(_BYTE *)(a2 + 24) = 1;
        *(_QWORD *)(a2 + 16) = v7;
        *(_DWORD *)(a2 + 8) = v6;
        v2 = *(_QWORD *)(a1 + 24);
      }
    }
    *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v5) = v2;
    *(_DWORD *)(a2 + 4) = v5 + 1;
  }
}

uint64_t btSphereTriangleCollisionAlgorithm::btSphereTriangleCollisionAlgorithm(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, char a6)
{
  _QWORD *v11;

  v11 = btActivatingCollisionAlgorithm::btActivatingCollisionAlgorithm((_QWORD *)a1, a3);
  *v11 = &off_1EA598378;
  *((_BYTE *)v11 + 16) = 0;
  v11[3] = a2;
  *((_BYTE *)v11 + 32) = a6;
  if (!a2)
  {
    *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a4 + 16), *(_QWORD *)(a5 + 16));
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

void btSphereTriangleCollisionAlgorithm::~btSphereTriangleCollisionAlgorithm(btSphereTriangleCollisionAlgorithm *this)
{
  *(_QWORD *)this = &off_1EA598378;
  if (*((_BYTE *)this + 16) && *((_QWORD *)this + 3))
    (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
  C3DSceneSourcePerformConsistencyCheck(this);
}

{
  btSphereTriangleCollisionAlgorithm::~btSphereTriangleCollisionAlgorithm(this);
  JUMPOUT(0x1DF0D41C0);
}

btPersistentManifold *btSphereTriangleCollisionAlgorithm::processCollision(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  btPersistentManifold *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float ContactBreakingThreshold;
  float32x4_t *v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t *v17;
  float *v18;
  btCollisionObject *var3;
  uint64_t v20;
  float v21[8];
  float32x4_t v22[8];
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  result = *(btPersistentManifold **)(a1 + 24);
  if (result)
  {
    v9 = *(_BYTE *)(a1 + 32) ? a3 : a2;
    v10 = *(_BYTE *)(a1 + 32) ? a2 : a3;
    v11 = *(_QWORD *)(v9 + 8);
    v12 = *(_QWORD *)(v10 + 8);
    a5[1] = result;
    ContactBreakingThreshold = btPersistentManifold::getContactBreakingThreshold(result);
    SphereTriangleDetector::SphereTriangleDetector((uint64_t)v21, v11, v12, ContactBreakingThreshold);
    v23 = 1566444395;
    v14 = *(float32x4_t **)(v9 + 24);
    v15 = v14[1];
    v22[0] = *v14;
    v22[1] = v15;
    v16 = v14[3];
    v22[2] = v14[2];
    v22[3] = v16;
    v17 = *(float32x4_t **)(v10 + 24);
    v22[4] = *v17;
    v22[5] = v17[1];
    v22[6] = v17[2];
    v22[7] = v17[3];
    result = (btPersistentManifold *)SphereTriangleDetector::getClosestPoints(v21, v22, (uint64_t)a5, *(_QWORD *)(a4 + 24), *(unsigned __int8 *)(a1 + 32), v18);
    if (*(_BYTE *)(a1 + 16))
    {
      result = (btPersistentManifold *)a5[1];
      if (LODWORD(result->var6))
      {
        var3 = result->var3;
        v20 = *(_QWORD *)(a5[2] + 16);
        if (var3 == (btCollisionObject *)v20)
          v20 = *(_QWORD *)(a5[3] + 16);
        else
          var3 = *(btCollisionObject **)(a5[3] + 16);
        return btPersistentManifold::refreshContactPoints(result, (const btTransform *)((char *)var3 + 16), (const btTransform *)(v20 + 16));
      }
    }
  }
  return result;
}

float btSphereTriangleCollisionAlgorithm::calculateTimeOfImpact()
{
  return 1.0;
}

void btSphereTriangleCollisionAlgorithm::getAllContactManifolds(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  BOOL v10;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2 && *(_BYTE *)(a1 + 16))
  {
    v5 = *(_DWORD *)(a2 + 4);
    if (v5 == *(_DWORD *)(a2 + 8))
    {
      v6 = v5 ? 2 * v5 : 1;
      if (v5 < v6)
      {
        if (v6)
        {
          v7 = btAlignedAllocInternal(8 * v6, 16);
          v5 = *(_DWORD *)(a2 + 4);
        }
        else
        {
          v7 = 0;
        }
        if (v5 >= 1)
        {
          v8 = 0;
          do
          {
            *(_QWORD *)(v7 + v8) = *(_QWORD *)(*(_QWORD *)(a2 + 16) + v8);
            v8 += 8;
          }
          while (8 * v5 != v8);
        }
        v9 = *(void ***)(a2 + 16);
        if (v9)
          v10 = *(_BYTE *)(a2 + 24) == 0;
        else
          v10 = 1;
        if (!v10)
        {
          btAlignedFreeInternal(v9);
          v5 = *(_DWORD *)(a2 + 4);
        }
        *(_BYTE *)(a2 + 24) = 1;
        *(_QWORD *)(a2 + 16) = v7;
        *(_DWORD *)(a2 + 8) = v6;
        v2 = *(_QWORD *)(a1 + 24);
      }
    }
    *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v5) = v2;
    *(_DWORD *)(a2 + 4) = v5 + 1;
  }
}

void btUnionFind::Free(btUnionFind *this)
{
  void **v2;

  v2 = (void **)*((_QWORD *)this + 2);
  if (v2 && *((_BYTE *)this + 24))
    btAlignedFreeInternal(v2);
  *((_BYTE *)this + 24) = 1;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 1) = 0;
  *((_DWORD *)this + 2) = 0;
}

void btUnionFind::~btUnionFind(btUnionFind *this)
{
  btUnionFind::Free(this);
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)this);
}

void btUnionFind::btUnionFind(btUnionFind *this)
{
  *((_BYTE *)this + 24) = 1;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 1) = 0;
  *((_DWORD *)this + 2) = 0;
}

void btUnionFind::allocate(btUnionFind *this, int a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  v4 = *((_DWORD *)this + 1);
  if (v4 < a2)
  {
    v5 = v4;
    if (*((_DWORD *)this + 2) < a2)
    {
      if (a2)
      {
        v6 = btAlignedAllocInternal(8 * a2, 16);
        v4 = *((_DWORD *)this + 1);
      }
      else
      {
        v6 = 0;
      }
      if (v4 >= 1)
      {
        v7 = 0;
        v8 = 8 * v4;
        do
        {
          *(_QWORD *)(v6 + v7) = *(_QWORD *)(*((_QWORD *)this + 2) + v7);
          v7 += 8;
        }
        while (v8 != v7);
      }
      v9 = (void **)*((_QWORD *)this + 2);
      if (v9 && *((_BYTE *)this + 24))
        btAlignedFreeInternal(v9);
      *((_BYTE *)this + 24) = 1;
      *((_QWORD *)this + 2) = v6;
      *((_DWORD *)this + 2) = a2;
    }
    do
      *(_QWORD *)(*((_QWORD *)this + 2) + 8 * v5++) = 0;
    while (a2 != v5);
  }
  *((_DWORD *)this + 1) = a2;
}

void btUnionFind::reset(btUnionFind *this, int a2)
{
  uint64_t v4;
  _DWORD *v5;

  btUnionFind::allocate(this, a2);
  if (a2 >= 1)
  {
    v4 = 0;
    v5 = (_DWORD *)(*((_QWORD *)this + 2) + 4);
    do
    {
      *(v5 - 1) = v4;
      *v5 = 1;
      ++v4;
      v5 += 2;
    }
    while (a2 != v4);
  }
}

uint64_t btUnionFind::sortIslands(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  char v9;

  v1 = *(unsigned int *)(this + 4);
  if ((int)v1 > 0)
  {
    v2 = 0;
    v3 = *(_QWORD *)(this + 16);
    do
    {
      v4 = (_DWORD *)(v3 + 8 * v2);
      v5 = *v4;
      LODWORD(v6) = v2;
      if (v2 != v5)
      {
        v7 = (_DWORD *)(v3 + 8 * v2);
        do
        {
          v8 = 8 * (int)v5;
          *v7 = *(_DWORD *)(v3 + v8);
          v6 = *(int *)(v3 + v8);
          v7 = (_DWORD *)(v3 + 8 * v6);
          LODWORD(v5) = *v7;
        }
        while ((_DWORD)v6 != *v7);
      }
      *v4 = v6;
      ++v2;
    }
    while (v2 != v1);
    if ((int)v1 >= 2)
      return btAlignedObjectArray<btElement>::quickSortInternal<btUnionFindElementSortPredicate>(this, (uint64_t)&v9, 0, (int)v1 - 1);
  }
  return this;
}

uint64_t btAlignedObjectArray<btElement>::quickSortInternal<btUnionFindElementSortPredicate>(uint64_t result, uint64_t a2, int a3, int a4)
{
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;

  v7 = result;
  do
  {
    v8 = a3;
    v9 = a3 + a4;
    if (a3 + a4 < 0 != __OFADD__(a3, a4))
      ++v9;
    v10 = *(_QWORD *)(*(_QWORD *)(v7 + 16) + 8 * (v9 >> 1));
    v11 = a4;
    do
    {
      v12 = *(_QWORD *)(v7 + 16);
      v13 = v12 + 8 * a3 - 8;
      v14 = a3;
      do
      {
        v15 = *(_DWORD *)(v13 + 8);
        v13 += 8;
        ++v14;
      }
      while (v15 < (int)v10);
      a3 = v14 - 1;
      v16 = 8 * v11;
      v17 = v11;
      do
      {
        v18 = *(_DWORD *)(v12 + v16);
        v16 -= 8;
        --v17;
      }
      while (v18 > (int)v10);
      v11 = v17 + 1;
      if (a3 <= v17 + 1)
      {
        v19 = *(_QWORD *)v13;
        *(_QWORD *)v13 = *(_QWORD *)(v12 + v16 + 8);
        *(_QWORD *)(*(_QWORD *)(v7 + 16) + v16 + 8) = v19;
        a3 = v14;
        v11 = v17;
      }
    }
    while (a3 <= v11);
    if (v11 > v8)
      result = btAlignedObjectArray<btElement>::quickSortInternal<btUnionFindElementSortPredicate>(v7, a2);
  }
  while (a3 < a4);
  return result;
}

float32x4_t btBox2dShape::getAabb(float32x4_t *this, const btTransform *a2, btVector3 *a3, btVector3 *a4)
{
  int32x2_t v8;
  btVector3 var1;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  int8x16_t v13;
  int8x16_t v14;
  btVector3 v15;
  float32x4_t result;

  *(double *)&v8 = (*(double (**)(float32x4_t *))(this->i64[0] + 96))(this);
  var1 = a2->var1;
  v10 = (float32x4_t)vdupq_lane_s32(v8, 0);
  v10.i32[3] = 0;
  v11 = vaddq_f32(this[3], v10);
  v12 = vmulq_f32(v11, (float32x4_t)vandq_s8((int8x16_t)a2->var0.var0[0], (int8x16_t)xmmword_1DD02C930));
  v13 = (int8x16_t)vmulq_f32(v11, (float32x4_t)vandq_s8((int8x16_t)a2->var0.var0[1], (int8x16_t)xmmword_1DD02C930));
  v14 = (int8x16_t)vmulq_f32(v11, (float32x4_t)vandq_s8((int8x16_t)a2->var0.var0[2], (int8x16_t)xmmword_1DD02C930));
  v14.i32[3] = 0;
  *(float32x2_t *)v12.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL)), vpadd_f32(*(float32x2_t *)v12.f32, *(float32x2_t *)v13.i8));
  *(float32x2_t *)&v12.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v14.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)), 0);
  v15 = (btVector3)vsubq_f32((float32x4_t)var1, v12);
  v15.var0.var0[3] = 0.0;
  *a3 = v15;
  result = vaddq_f32((float32x4_t)var1, v12);
  *a4 = (btVector3)result;
  return result;
}

float btBox2dShape::calculateLocalInertia(btBox2dShape *this, float a2, btVector3 *a3)
{
  float v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x2_t v9;
  float result;
  __int32 v11;
  float32x4_t v12;
  float32x4_t v13;

  v13 = *((float32x4_t *)this + 3);
  v12.i64[0] = (*(double (**)(btBox2dShape *))(*(_QWORD *)this + 96))(this);
  v11 = COERCE_UNSIGNED_INT64((*(double (**)(btBox2dShape *))(*(_QWORD *)this + 96))(this));
  v6 = (*(float (**)(btBox2dShape *))(*(_QWORD *)this + 96))(this);
  v7 = v12;
  v7.i32[1] = v11;
  v7.f32[2] = v6;
  v8 = vaddq_f32(v13, v7);
  v7.f32[0] = (float)(v8.f32[2] + v8.f32[2]) * (float)(v8.f32[2] + v8.f32[2]);
  *(float32x2_t *)v8.f32 = vadd_f32(*(float32x2_t *)v8.f32, *(float32x2_t *)v8.f32);
  v9 = (float32x2_t)vrev64_s32(*(int32x2_t *)v8.f32);
  *(float32x2_t *)a3->var0.var0 = vmul_n_f32(vmla_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v7.f32, 0), v9, v9), a2 / 12.0);
  result = (float)(a2 / 12.0)
         * vmlas_n_f32(COERCE_FLOAT(vmul_f32(*(float32x2_t *)&v8, *(float32x2_t *)&v8).i32[1]), v8.f32[0], v8.f32[0]);
  a3->var0.var0[2] = result;
  a3->var0.var0[3] = 0.0;
  return result;
}

void btBox2dShape::~btBox2dShape(btBox2dShape *this)
{
  void **v1;

  btPolyhedralConvexShape::~btPolyhedralConvexShape(this);
  btAlignedFreeInternal(v1);
}

float32x4_t btBox2dShape::setLocalScaling(float32x4_t *this, float32x4_t *a2)
{
  double v4;
  double v5;
  unsigned int v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t result;
  unsigned int v13;
  float32x4_t v14;
  unsigned int v15;
  float32x4_t v16;

  v4 = (*(double (**)(float32x4_t *))(this->i64[0] + 96))(this);
  v15 = LODWORD(v4);
  v5 = (*(double (**)(float32x4_t *))(this->i64[0] + 96))(this);
  v13 = LODWORD(v5);
  *(float *)&v6 = (*(float (**)(float32x4_t *))(this->i64[0] + 96))(this);
  v7.i64[0] = __PAIR64__(v13, v15);
  v7.i64[1] = v6;
  v16 = v7;
  v8 = this[2];
  v9 = vaddq_f32(this[3], v7);
  v10 = vrecpeq_f32(v8);
  v11 = vmulq_f32(v10, vrecpsq_f32(v8, v10));
  v14 = vmulq_f32(vrecpsq_f32(v8, v11), vmulq_f32(v9, v11));
  btConvexInternalShape::setLocalScaling(this, a2);
  result = vsubq_f32(vmulq_f32(v14, this[2]), v16);
  result.i32[3] = 0;
  this[3] = result;
  return result;
}

const char *btBox2dShape::getName(btBox2dShape *this)
{
  return "Box2d";
}

float32x4_t btBox2dShape::setMargin(float32x4_t *this, float32_t a2)
{
  double v4;
  double v5;
  unsigned int v6;
  float32x4_t v7;
  unsigned int v8;
  float32x4_t v9;
  float32x4_t result;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  float32x4_t v15;

  v4 = (*(double (**)(float32x4_t *))(this->i64[0] + 96))(this);
  v14 = LODWORD(v4);
  v5 = (*(double (**)(float32x4_t *))(this->i64[0] + 96))(this);
  v12 = LODWORD(v5);
  *(float *)&v6 = (*(float (**)(float32x4_t *))(this->i64[0] + 96))(this);
  v7.i64[0] = __PAIR64__(v12, v14);
  v7.i64[1] = v6;
  v15 = vaddq_f32(this[3], v7);
  this[4].f32[0] = a2;
  v13 = COERCE_UNSIGNED_INT64((*(double (**)(float32x4_t *))(this->i64[0] + 96))(this));
  v11 = COERCE_UNSIGNED_INT64((*(double (**)(float32x4_t *))(this->i64[0] + 96))(this));
  *(float *)&v8 = (*(float (**)(float32x4_t *))(this->i64[0] + 96))(this);
  v9.i64[0] = __PAIR64__(v11, v13);
  v9.i64[1] = v8;
  result = vsubq_f32(v15, v9);
  result.i32[3] = 0;
  this[3] = result;
  return result;
}

void btBox2dShape::localGetSupportingVertex(btBox2dShape *this@<X0>, const btVector3 *a2@<X1>, int8x8_t *a3@<X8>)
{
  float v6;
  float32x4_t v7;
  int8x8_t v8;
  float32x4_t v9;
  __int32 v10;
  float32x4_t v11;
  float32x4_t v12;

  v12 = *((float32x4_t *)this + 3);
  v11.i64[0] = (*(double (**)(btBox2dShape *))(*(_QWORD *)this + 96))(this);
  v10 = COERCE_UNSIGNED_INT64((*(double (**)(btBox2dShape *))(*(_QWORD *)this + 96))(this));
  v6 = (*(float (**)(btBox2dShape *))(*(_QWORD *)this + 96))(this);
  v7 = v11;
  v7.i32[1] = v10;
  v7.f32[2] = v6;
  v9 = vaddq_f32(v12, v7);
  v7.i32[0] = LODWORD(a2->var0.var0[2]);
  v8 = vbsl_s8((int8x8_t)vcgez_f32(*(float32x2_t *)a2->var0.var0), *(int8x8_t *)v9.f32, (int8x8_t)vneg_f32(*(float32x2_t *)v9.f32));
  v9.i32[0] = v9.i32[2];
  *a3 = v8;
  if (v7.f32[0] < 0.0)
    v9.f32[0] = -v9.f32[2];
  a3[1].i32[0] = v9.i32[0];
  a3[1].i32[1] = 0;
}

uint64_t btBox2dShape::localGetSupportingVertexWithoutMargin@<X0>(uint64_t this@<X0>, const btVector3 *a2@<X1>, uint64_t a3@<X8>)
{
  float v3;

  if (a2->var0.var0[2] < 0.0)
    v3 = -*(float *)(this + 56);
  else
    v3 = *(float *)(this + 56);
  *(int8x8_t *)a3 = vbsl_s8((int8x8_t)vcgez_f32(*(float32x2_t *)a2->var0.var0), *(int8x8_t *)(this + 48), (int8x8_t)vneg_f32(*(float32x2_t *)(this + 48)));
  *(float *)(a3 + 8) = v3;
  *(_DWORD *)(a3 + 12) = 0;
  return this;
}

uint64_t btBox2dShape::batchedUnitVectorGetSupportingVertexWithoutMargin(uint64_t this, const btVector3 *a2, btVector3 *a3, int a4)
{
  uint64_t v4;
  float *v5;
  float *v6;
  float v7;

  if (a4 >= 1)
  {
    v4 = a4;
    v5 = &a3->var0.var0[3];
    v6 = &a2->var0.var0[2];
    do
    {
      if (*v6 < 0.0)
        v7 = -*(float *)(this + 56);
      else
        v7 = *(float *)(this + 56);
      *(int8x8_t *)(v5 - 3) = vbsl_s8((int8x8_t)vcgez_f32(*(float32x2_t *)(v6 - 2)), *(int8x8_t *)(this + 48), (int8x8_t)vneg_f32(*(float32x2_t *)(this + 48)));
      *(v5 - 1) = v7;
      *v5 = 0.0;
      v5 += 4;
      v6 += 4;
      --v4;
    }
    while (v4);
  }
  return this;
}

uint64_t btBox2dShape::getNumPreferredPenetrationDirections(btBox2dShape *this)
{
  return 6;
}

float btBox2dShape::getPreferredPenetrationDirection(btBox2dShape *this, signed int a2, btVector3 *a3)
{
  float result;
  float v4;
  unsigned int v5;

  if (a2 <= 5)
  {
    result = flt_1DD02C9D0[a2];
    v4 = flt_1DD02C9E8[a2];
    v5 = dword_1DD02CA00[a2];
    a3->var0.var0[0] = result;
    a3->var0.var0[1] = v4;
    *(_QWORD *)&a3->var0.var0[2] = v5;
  }
  return result;
}

uint64_t btBox2dShape::getNumVertices(btBox2dShape *this)
{
  return 4;
}

uint64_t btBox2dShape::getNumEdges(btBox2dShape *this)
{
  return 12;
}

uint64_t btBox2dShape::getEdge(btBox2dShape *this, signed int a2, btVector3 *a3, btVector3 *a4)
{
  uint64_t v7;
  uint64_t v8;

  if (a2 > 0xB)
  {
    v7 = 0;
    v8 = 0;
  }
  else
  {
    v7 = dword_1DD02C940[a2];
    v8 = dword_1DD02C970[a2];
  }
  (*(void (**)(btBox2dShape *, uint64_t, btVector3 *))(*(_QWORD *)this + 216))(this, v7, a3);
  return (*(uint64_t (**)(btBox2dShape *, uint64_t, btVector3 *))(*(_QWORD *)this + 216))(this, v8, a4);
}

__n128 btBox2dShape::getVertex(__n128 *this, unsigned __int32 a2, btVector3 *a3)
{
  __n128 result;
  int8x8_t v4;
  int32x2_t v5;
  btVector3 v6;

  result = this[3];
  v4.i32[0] = a2;
  v4.i32[1] = a2 >> 1;
  v5 = (int32x2_t)vand_s8(v4, (int8x8_t)0x100000001);
  *(float32x2_t *)v6.var0.var0 = vmla_f32(vmul_f32(vcvt_f32_s32(v5), vneg_f32((float32x2_t)result.n128_u64[0])), vcvt_f32_s32((int32x2_t)veor_s8((int8x8_t)v5, (int8x8_t)0x100000001)), (float32x2_t)result.n128_u64[0]);
  _S3 = (float)((a2 & 4) == 0);
  __asm { FMLA            S2, S3, V0.S[2] }
  *(_QWORD *)&v6.var0.var0[2] = _S2;
  *a3 = v6;
  return result;
}

double btBox2dShape::getPlane(btBox2dShape *this, btVector3 *a2, btVector3 *a3, uint64_t a4)
{
  int8x16_t v7;
  int8x16_t v8;
  double result;
  int8x16_t v10;
  btVector3 v11;
  uint64_t v12;
  unsigned int v13;

  (*(void (**)(btBox2dShape *, uint64_t *, uint64_t))(*(_QWORD *)this + 256))(this, &v12, a4);
  v7.i64[0] = v12;
  v7.i64[1] = v13;
  *a2 = (btVector3)v7;
  v8.i64[0] = 0x8000000080000000;
  v8.i64[1] = 0x8000000080000000;
  v10 = veorq_s8(v7, v8);
  (*(void (**)(btVector3 *__return_ptr, btBox2dShape *, int8x16_t *))(*(_QWORD *)this + 128))(&v11, this, &v10);
  result = *(double *)v11.var0.var0;
  *a3 = v11;
  return result;
}

BOOL btBox2dShape::isInside(btBox2dShape *this, const btVector3 *a2, float a3)
{
  __int128 v3;
  float v4;
  float v5;

  v3 = *((_OWORD *)this + 3);
  if (a2->var0.var0[0] <= (float)(*(float *)&v3 + a3)
    && a2->var0.var0[0] >= (float)((float)-*(float *)&v3 - a3)
    && (v4 = a2->var0.var0[1], v4 <= (float)(*((float *)&v3 + 1) + a3))
    && v4 >= (float)((float)-*((float *)&v3 + 1) - a3)
    && (v5 = a2->var0.var0[2], v5 <= (float)(*((float *)&v3 + 2) + a3)))
  {
    return v5 >= (float)((float)-*((float *)&v3 + 2) - a3);
  }
  else
  {
    return 0;
  }
}

uint64_t btBox2dShape::getNumPlanes(btBox2dShape *this)
{
  return 6;
}

float btBox2dShape::getPlaneEquation(uint64_t a1, uint64_t a2, unsigned int a3)
{
  float v3;
  int v4;
  float v5;
  float result;

  if (a3 <= 5)
  {
    v3 = flt_1DD02C9E8[a3];
    v4 = dword_1DD02CA00[a3];
    v5 = *(float *)(a1 + 4 * (qword_1DD02C9A0[a3] & 3) + 48);
    *(float *)a2 = flt_1DD02C9D0[a3];
    *(float *)(a2 + 4) = v3;
    result = -v5;
    *(_DWORD *)(a2 + 8) = v4;
    *(float *)(a2 + 12) = -v5;
  }
  return result;
}

void btBoxShape::btBoxShape(btBoxShape *this, const btVector3 *a2)
{
  btConvexInternalShape *v4;
  float v5;
  float32x4_t v6;
  float32x4_t v7;
  __int32 v8;
  float32x4_t v9;

  btPolyhedralConvexShape::btPolyhedralConvexShape(this);
  *(_QWORD *)v4 = off_1EA5951A0;
  *((_DWORD *)v4 + 2) = 0;
  btConvexInternalShape::setSafeMargin(v4, a2, 0.1);
  v9.i64[0] = (*(double (**)(btBoxShape *))(*(_QWORD *)this + 96))(this);
  v8 = COERCE_UNSIGNED_INT64((*(double (**)(btBoxShape *))(*(_QWORD *)this + 96))(this));
  v5 = (*(float (**)(btBoxShape *))(*(_QWORD *)this + 96))(this);
  v6 = v9;
  v6.i32[1] = v8;
  v6.f32[2] = v5;
  v7 = vsubq_f32(vmulq_f32(*(float32x4_t *)a2, *((float32x4_t *)this + 2)), v6);
  v7.i32[3] = 0;
  *((float32x4_t *)this + 3) = v7;
}

void btConvexInternalShape::setSafeMargin(btConvexInternalShape *this, const btVector3 *a2, float a3)
{
  float v4;
  float v5;
  uint64_t v6;
  float v7;

  v4 = a2->var0.var0[0];
  v5 = a2->var0.var0[1];
  v6 = a2->var0.var0[0] >= v5;
  if (a2->var0.var0[0] >= v5)
    v4 = a2->var0.var0[1];
  if (v4 >= a2->var0.var0[2])
    v6 = 2;
  v7 = a2->var0.var0[v6] * a3;
  if (v7 < (*(float (**)(btConvexInternalShape *))(*(_QWORD *)this + 96))(this))
    (*(void (**)(btConvexInternalShape *, float))(*(_QWORD *)this + 88))(this, v7);
}

float32x4_t btBoxShape::getAabb(float32x4_t *this, const btTransform *a2, btVector3 *a3, btVector3 *a4)
{
  int32x2_t v8;
  btVector3 var1;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  int8x16_t v13;
  int8x16_t v14;
  btVector3 v15;
  float32x4_t result;

  *(double *)&v8 = (*(double (**)(float32x4_t *))(this->i64[0] + 96))(this);
  var1 = a2->var1;
  v10 = (float32x4_t)vdupq_lane_s32(v8, 0);
  v10.i32[3] = 0;
  v11 = vaddq_f32(this[3], v10);
  v12 = vmulq_f32(v11, (float32x4_t)vandq_s8((int8x16_t)a2->var0.var0[0], (int8x16_t)xmmword_1DD02C930));
  v13 = (int8x16_t)vmulq_f32(v11, (float32x4_t)vandq_s8((int8x16_t)a2->var0.var0[1], (int8x16_t)xmmword_1DD02C930));
  v14 = (int8x16_t)vmulq_f32(v11, (float32x4_t)vandq_s8((int8x16_t)a2->var0.var0[2], (int8x16_t)xmmword_1DD02C930));
  v14.i32[3] = 0;
  *(float32x2_t *)v12.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL)), vpadd_f32(*(float32x2_t *)v12.f32, *(float32x2_t *)v13.i8));
  *(float32x2_t *)&v12.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v14.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)), 0);
  v15 = (btVector3)vsubq_f32((float32x4_t)var1, v12);
  v15.var0.var0[3] = 0.0;
  *a3 = v15;
  result = vaddq_f32((float32x4_t)var1, v12);
  *a4 = (btVector3)result;
  return result;
}

float btBoxShape::calculateLocalInertia(btBoxShape *this, float a2, btVector3 *a3)
{
  float v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x2_t v9;
  float result;
  __int32 v11;
  float32x4_t v12;
  float32x4_t v13;

  v13 = *((float32x4_t *)this + 3);
  v12.i64[0] = (*(double (**)(btBoxShape *))(*(_QWORD *)this + 96))(this);
  v11 = COERCE_UNSIGNED_INT64((*(double (**)(btBoxShape *))(*(_QWORD *)this + 96))(this));
  v6 = (*(float (**)(btBoxShape *))(*(_QWORD *)this + 96))(this);
  v7 = v12;
  v7.i32[1] = v11;
  v7.f32[2] = v6;
  v8 = vaddq_f32(v13, v7);
  v7.f32[0] = (float)(v8.f32[2] + v8.f32[2]) * (float)(v8.f32[2] + v8.f32[2]);
  *(float32x2_t *)v8.f32 = vadd_f32(*(float32x2_t *)v8.f32, *(float32x2_t *)v8.f32);
  v9 = (float32x2_t)vrev64_s32(*(int32x2_t *)v8.f32);
  *(float32x2_t *)a3->var0.var0 = vmul_n_f32(vmla_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v7.f32, 0), v9, v9), a2 / 12.0);
  result = (float)(a2 / 12.0)
         * vmlas_n_f32(COERCE_FLOAT(vmul_f32(*(float32x2_t *)&v8, *(float32x2_t *)&v8).i32[1]), v8.f32[0], v8.f32[0]);
  a3->var0.var0[2] = result;
  a3->var0.var0[3] = 0.0;
  return result;
}

void btBoxShape::~btBoxShape(btBoxShape *this)
{
  void **v1;

  btPolyhedralConvexShape::~btPolyhedralConvexShape(this);
  btAlignedFreeInternal(v1);
}

float32x4_t btBoxShape::setLocalScaling(float32x4_t *this, float32x4_t *a2)
{
  double v4;
  double v5;
  unsigned int v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t result;
  unsigned int v13;
  float32x4_t v14;
  unsigned int v15;
  float32x4_t v16;

  v4 = (*(double (**)(float32x4_t *))(this->i64[0] + 96))(this);
  v15 = LODWORD(v4);
  v5 = (*(double (**)(float32x4_t *))(this->i64[0] + 96))(this);
  v13 = LODWORD(v5);
  *(float *)&v6 = (*(float (**)(float32x4_t *))(this->i64[0] + 96))(this);
  v7.i64[0] = __PAIR64__(v13, v15);
  v7.i64[1] = v6;
  v16 = v7;
  v8 = this[2];
  v9 = vaddq_f32(this[3], v7);
  v10 = vrecpeq_f32(v8);
  v11 = vmulq_f32(v10, vrecpsq_f32(v8, v10));
  v14 = vmulq_f32(vrecpsq_f32(v8, v11), vmulq_f32(v9, v11));
  btConvexInternalShape::setLocalScaling(this, a2);
  result = vsubq_f32(vmulq_f32(v14, this[2]), v16);
  result.i32[3] = 0;
  this[3] = result;
  return result;
}

const char *btBoxShape::getName(btBoxShape *this)
{
  return "Box";
}

float32x4_t btBoxShape::setMargin(float32x4_t *this, float32_t a2)
{
  double v4;
  double v5;
  unsigned int v6;
  float32x4_t v7;
  unsigned int v8;
  float32x4_t v9;
  float32x4_t result;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  float32x4_t v15;

  v4 = (*(double (**)(float32x4_t *))(this->i64[0] + 96))(this);
  v14 = LODWORD(v4);
  v5 = (*(double (**)(float32x4_t *))(this->i64[0] + 96))(this);
  v12 = LODWORD(v5);
  *(float *)&v6 = (*(float (**)(float32x4_t *))(this->i64[0] + 96))(this);
  v7.i64[0] = __PAIR64__(v12, v14);
  v7.i64[1] = v6;
  v15 = vaddq_f32(this[3], v7);
  this[4].f32[0] = a2;
  v13 = COERCE_UNSIGNED_INT64((*(double (**)(float32x4_t *))(this->i64[0] + 96))(this));
  v11 = COERCE_UNSIGNED_INT64((*(double (**)(float32x4_t *))(this->i64[0] + 96))(this));
  *(float *)&v8 = (*(float (**)(float32x4_t *))(this->i64[0] + 96))(this);
  v9.i64[0] = __PAIR64__(v11, v13);
  v9.i64[1] = v8;
  result = vsubq_f32(v15, v9);
  result.i32[3] = 0;
  this[3] = result;
  return result;
}

void btBoxShape::localGetSupportingVertex(btBoxShape *this@<X0>, const btVector3 *a2@<X1>, int8x8_t *a3@<X8>)
{
  float v6;
  float32x4_t v7;
  int8x8_t v8;
  float32x4_t v9;
  __int32 v10;
  float32x4_t v11;
  float32x4_t v12;

  v12 = *((float32x4_t *)this + 3);
  v11.i64[0] = (*(double (**)(btBoxShape *))(*(_QWORD *)this + 96))(this);
  v10 = COERCE_UNSIGNED_INT64((*(double (**)(btBoxShape *))(*(_QWORD *)this + 96))(this));
  v6 = (*(float (**)(btBoxShape *))(*(_QWORD *)this + 96))(this);
  v7 = v11;
  v7.i32[1] = v10;
  v7.f32[2] = v6;
  v9 = vaddq_f32(v12, v7);
  v7.i32[0] = LODWORD(a2->var0.var0[2]);
  v8 = vbsl_s8((int8x8_t)vcgez_f32(*(float32x2_t *)a2->var0.var0), *(int8x8_t *)v9.f32, (int8x8_t)vneg_f32(*(float32x2_t *)v9.f32));
  v9.i32[0] = v9.i32[2];
  *a3 = v8;
  if (v7.f32[0] < 0.0)
    v9.f32[0] = -v9.f32[2];
  a3[1].i32[0] = v9.i32[0];
  a3[1].i32[1] = 0;
}

uint64_t btBoxShape::localGetSupportingVertexWithoutMargin@<X0>(uint64_t this@<X0>, const btVector3 *a2@<X1>, uint64_t a3@<X8>)
{
  float v3;

  if (a2->var0.var0[2] < 0.0)
    v3 = -*(float *)(this + 56);
  else
    v3 = *(float *)(this + 56);
  *(int8x8_t *)a3 = vbsl_s8((int8x8_t)vcgez_f32(*(float32x2_t *)a2->var0.var0), *(int8x8_t *)(this + 48), (int8x8_t)vneg_f32(*(float32x2_t *)(this + 48)));
  *(float *)(a3 + 8) = v3;
  *(_DWORD *)(a3 + 12) = 0;
  return this;
}

uint64_t btBoxShape::batchedUnitVectorGetSupportingVertexWithoutMargin(uint64_t this, const btVector3 *a2, btVector3 *a3, int a4)
{
  uint64_t v4;
  float *v5;
  float *v6;
  float v7;

  if (a4 >= 1)
  {
    v4 = a4;
    v5 = &a3->var0.var0[3];
    v6 = &a2->var0.var0[2];
    do
    {
      if (*v6 < 0.0)
        v7 = -*(float *)(this + 56);
      else
        v7 = *(float *)(this + 56);
      *(int8x8_t *)(v5 - 3) = vbsl_s8((int8x8_t)vcgez_f32(*(float32x2_t *)(v6 - 2)), *(int8x8_t *)(this + 48), (int8x8_t)vneg_f32(*(float32x2_t *)(this + 48)));
      *(v5 - 1) = v7;
      *v5 = 0.0;
      v5 += 4;
      v6 += 4;
      --v4;
    }
    while (v4);
  }
  return this;
}

uint64_t btBoxShape::getNumPreferredPenetrationDirections(btBoxShape *this)
{
  return 6;
}

float btBoxShape::getPreferredPenetrationDirection(btBoxShape *this, signed int a2, btVector3 *a3)
{
  float result;
  float v4;
  unsigned int v5;

  if (a2 <= 5)
  {
    result = flt_1DD02CAA8[a2];
    v4 = flt_1DD02CAC0[a2];
    v5 = dword_1DD02CAD8[a2];
    a3->var0.var0[0] = result;
    a3->var0.var0[1] = v4;
    *(_QWORD *)&a3->var0.var0[2] = v5;
  }
  return result;
}

uint64_t btBoxShape::getNumVertices(btBoxShape *this)
{
  return 8;
}

uint64_t btBoxShape::getNumEdges(btBoxShape *this)
{
  return 12;
}

uint64_t btBoxShape::getEdge(btBoxShape *this, signed int a2, btVector3 *a3, btVector3 *a4)
{
  uint64_t v7;
  uint64_t v8;

  if (a2 > 0xB)
  {
    v7 = 0;
    v8 = 0;
  }
  else
  {
    v7 = dword_1DD02CA18[a2];
    v8 = dword_1DD02CA48[a2];
  }
  (*(void (**)(btBoxShape *, uint64_t, btVector3 *))(*(_QWORD *)this + 216))(this, v7, a3);
  return (*(uint64_t (**)(btBoxShape *, uint64_t, btVector3 *))(*(_QWORD *)this + 216))(this, v8, a4);
}

float32x4_t btBoxShape::getVertex(btBoxShape *this, unsigned __int32 a2, btVector3 *a3)
{
  float v6;
  float32x4_t v7;
  float32x4_t result;
  __int32 v15;
  float32x4_t v16;
  float32x4_t v17;

  v17 = *((float32x4_t *)this + 3);
  v16.i64[0] = (*(double (**)(btBoxShape *))(*(_QWORD *)this + 96))(this);
  v15 = COERCE_UNSIGNED_INT64((*(double (**)(btBoxShape *))(*(_QWORD *)this + 96))(this));
  v6 = (*(float (**)(btBoxShape *))(*(_QWORD *)this + 96))(this);
  v7 = v16;
  v7.i32[1] = v15;
  v7.f32[2] = v6;
  result = vaddq_f32(v17, v7);
  v7.i32[0] = a2;
  v7.i32[1] = a2 >> 1;
  *(int8x8_t *)v7.f32 = vand_s8(*(int8x8_t *)v7.f32, (int8x8_t)0x100000001);
  *(float32x2_t *)v7.f32 = vmla_f32(vmul_f32(vcvt_f32_s32(*(int32x2_t *)v7.f32), vneg_f32(*(float32x2_t *)result.f32)), vcvt_f32_s32((int32x2_t)veor_s8(*(int8x8_t *)v7.f32, (int8x8_t)0x100000001)), *(float32x2_t *)result.f32);
  _S3 = (float)((a2 & 4) == 0);
  __asm { FMLA            S2, S3, V0.S[2] }
  v7.i64[1] = _S2;
  *a3 = (btVector3)v7;
  return result;
}

double btBoxShape::getPlane(btBoxShape *this, btVector3 *a2, btVector3 *a3, uint64_t a4)
{
  int8x16_t v7;
  int8x16_t v8;
  double result;
  int8x16_t v10;
  btVector3 v11;
  uint64_t v12;
  unsigned int v13;

  (*(void (**)(btBoxShape *, uint64_t *, uint64_t))(*(_QWORD *)this + 256))(this, &v12, a4);
  v7.i64[0] = v12;
  v7.i64[1] = v13;
  *a2 = (btVector3)v7;
  v8.i64[0] = 0x8000000080000000;
  v8.i64[1] = 0x8000000080000000;
  v10 = veorq_s8(v7, v8);
  (*(void (**)(btVector3 *__return_ptr, btBoxShape *, int8x16_t *))(*(_QWORD *)this + 128))(&v11, this, &v10);
  result = *(double *)v11.var0.var0;
  *a3 = v11;
  return result;
}

BOOL btBoxShape::isInside(btBoxShape *this, const btVector3 *a2, float a3)
{
  __int128 v3;
  float v4;
  float v5;

  v3 = *((_OWORD *)this + 3);
  if (a2->var0.var0[0] <= (float)(*(float *)&v3 + a3)
    && a2->var0.var0[0] >= (float)((float)-*(float *)&v3 - a3)
    && (v4 = a2->var0.var0[1], v4 <= (float)(*((float *)&v3 + 1) + a3))
    && v4 >= (float)((float)-*((float *)&v3 + 1) - a3)
    && (v5 = a2->var0.var0[2], v5 <= (float)(*((float *)&v3 + 2) + a3)))
  {
    return v5 >= (float)((float)-*((float *)&v3 + 2) - a3);
  }
  else
  {
    return 0;
  }
}

uint64_t btBoxShape::getNumPlanes(btBoxShape *this)
{
  return 6;
}

float btBoxShape::getPlaneEquation(uint64_t a1, uint64_t a2, unsigned int a3)
{
  float v3;
  int v4;
  float v5;
  float result;

  if (a3 <= 5)
  {
    v3 = flt_1DD02CAC0[a3];
    v4 = dword_1DD02CAD8[a3];
    v5 = *(float *)(a1 + 4 * (qword_1DD02CA78[a3] & 3) + 48);
    *(float *)a2 = flt_1DD02CAA8[a3];
    *(float *)(a2 + 4) = v3;
    result = -v5;
    *(_DWORD *)(a2 + 8) = v4;
    *(float *)(a2 + 12) = -v5;
  }
  return result;
}

void btBvhTriangleMeshShape::btBvhTriangleMeshShape(btBvhTriangleMeshShape *this, btStridingMeshInterface *a2, char a3, int a4)
{
  uint64_t v7;

  btTriangleMeshShape::btTriangleMeshShape(this, a2);
  *(_QWORD *)v7 = off_1EA597228;
  *(_QWORD *)(v7 + 72) = 0;
  *(_QWORD *)(v7 + 80) = 0;
  *(_BYTE *)(v7 + 88) = a3;
  *(_BYTE *)(v7 + 89) = 0;
  *(_DWORD *)(v7 + 8) = 21;
  if (a4)
    btBvhTriangleMeshShape::buildOptimizedBvh(this);
}

void btBvhTriangleMeshShape::buildOptimizedBvh(btBvhTriangleMeshShape *this)
{
  btOptimizedBvh *v2;
  float32x4_t *v3;
  int32x2_t v4;

  if (*((_BYTE *)this + 89))
  {
    (***((void (****)(_QWORD))this + 9))(*((_QWORD *)this + 9));
    btAlignedFreeInternal(*((void ***)this + 9));
  }
  v2 = (btOptimizedBvh *)btAlignedAllocInternal(256, 16);
  btOptimizedBvh::btOptimizedBvh(v2);
  *((_QWORD *)this + 9) = v3;
  btOptimizedBvh::build(v3, *((btStridingMeshInterface **)this + 8), *((unsigned __int8 *)this + 88), (float32x4_t *)this + 2, (float32x4_t *)this + 3, v4);
  *((_BYTE *)this + 89) = 1;
}

void btBvhTriangleMeshShape::~btBvhTriangleMeshShape(btBvhTriangleMeshShape *this)
{
  *(_QWORD *)this = off_1EA597228;
  if (*((_BYTE *)this + 89))
  {
    (***((void (****)(_QWORD))this + 9))(*((_QWORD *)this + 9));
    btAlignedFreeInternal(*((void ***)this + 9));
  }
  btTriangleMeshShape::~btTriangleMeshShape(this);
}

{
  void **v1;

  btBvhTriangleMeshShape::~btBvhTriangleMeshShape(this);
  btAlignedFreeInternal(v1);
}

float32x4_t *btBvhTriangleMeshShape::performRaycast(uint64_t a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4, double a5, double a6, double a7, double a8, double a9, double a10, __n128 a11)
{
  float32x4_t *v11;
  uint64_t v12;
  _QWORD v14[3];

  v12 = *(_QWORD *)(a1 + 64);
  v11 = *(float32x4_t **)(a1 + 72);
  v14[0] = &off_1EA59AAD0;
  v14[1] = v12;
  v14[2] = a2;
  return btQuantizedBvh::reportRayOverlappingNodex(v11, (uint64_t)v14, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

float32x4_t *btBvhTriangleMeshShape::performConvexcast(uint64_t a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5, float32x4_t *a6, double a7, double a8, double a9, double a10, double a11, double a12, __n128 a13)
{
  float32x4_t *v13;
  uint64_t v14;
  _QWORD v16[3];

  v14 = *(_QWORD *)(a1 + 64);
  v13 = *(float32x4_t **)(a1 + 72);
  v16[0] = &off_1EA59AAF8;
  v16[1] = v14;
  v16[2] = a2;
  return btQuantizedBvh::reportBoxCastOverlappingNodex(v13, (uint64_t)v16, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t btBvhTriangleMeshShape::processAllTriangles(uint64_t a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[10];

  v5 = *(_QWORD *)(a1 + 64);
  v4 = *(_QWORD *)(a1 + 72);
  v7[0] = &off_1EA59AC98;
  v7[1] = v5;
  v7[2] = a2;
  return btQuantizedBvh::reportAabbOverlappingNodex(v4, (uint64_t)v7, a3, a4);
}

void btBvhTriangleMeshShape::setLocalScaling(btBvhTriangleMeshShape *this, float32x4_t *a2)
{
  float32x4_t v4;
  int8x16_t v5;

  v4 = vsubq_f32(*(float32x4_t *)(*(uint64_t (**)(btBvhTriangleMeshShape *))(*(_QWORD *)this + 56))(this), *a2);
  v4.i32[3] = 0;
  v5 = (int8x16_t)vmulq_f32(v4, v4);
  if (vadd_f32(vpadd_f32(*(float32x2_t *)v5.i8, *(float32x2_t *)v5.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL)).f32[0] > 0.00000011921)
  {
    btTriangleMeshShape::setLocalScaling(this, (const btVector3 *)a2);
    btBvhTriangleMeshShape::buildOptimizedBvh(this);
  }
}

const char *btBvhTriangleMeshShape::serialize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  btCollisionShape::serialize(a1, a2, a3);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 64) + 112))(*(_QWORD *)(a1 + 64), a2 + 16, a3);
  *(_DWORD *)(a2 + 72) = *(_DWORD *)(a1 + 24);
  if (!*(_QWORD *)(a1 + 72) || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 104))(a3) & 1) != 0)
  {
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 56) = 0;
  }
  else
  {
    v6 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 48))(a3, *(_QWORD *)(a1 + 72));
    if (v6)
    {
      *(_QWORD *)(a2 + 48) = v6;
      *(_QWORD *)(a2 + 56) = 0;
    }
    else
    {
      *(_QWORD *)(a2 + 48) = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 56))(a3, *(_QWORD *)(a1 + 72));
      *(_QWORD *)(a2 + 56) = 0;
      v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 24))(*(_QWORD *)(a1 + 72));
      v10 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a3 + 32))(a3, v9, 1);
      v11 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 32))(*(_QWORD *)(a1 + 72), *(_QWORD *)(v10 + 8), a3);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a3 + 40))(a3, v10, v11, 1213612625, *(_QWORD *)(a1 + 72));
    }
  }
  if (!*(_QWORD *)(a1 + 80) || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 104))(a3) & 2) != 0)
  {
    *(_QWORD *)(a2 + 64) = 0;
  }
  else
  {
    v7 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 48))(a3, *(_QWORD *)(a1 + 80));
    if (v7)
    {
      *(_QWORD *)(a2 + 64) = v7;
    }
    else
    {
      *(_QWORD *)(a2 + 64) = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 56))(a3, *(_QWORD *)(a1 + 80));
      v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80));
      v13 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a3 + 32))(a3, v12, 1);
      v14 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 80) + 24))(*(_QWORD *)(a1 + 80), *(_QWORD *)(v13 + 8), a3);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a3 + 40))(a3, v13, v14, 1346456916, *(_QWORD *)(a1 + 80));
    }
  }
  return "btTriangleMeshShapeData";
}

uint64_t btBvhTriangleMeshShape::serializeSingleBvh(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;

  result = *(_QWORD *)(a1 + 72);
  if (result)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
    v6 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 32))(a2, v5, 1);
    v7 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 32))(*(_QWORD *)(a1 + 72), *(_QWORD *)(v6 + 8), a2);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 40))(a2, v6, v7, 1213612625, *(_QWORD *)(a1 + 72));
  }
  return result;
}

uint64_t btBvhTriangleMeshShape::serializeSingleTriangleInfoMap(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;

  result = *(_QWORD *)(a1 + 80);
  if (result)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
    v6 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 32))(a2, v5, 1);
    v7 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 80) + 24))(*(_QWORD *)(a1 + 80), *(_QWORD *)(v6 + 8), a2);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 40))(a2, v6, v7, 1346456916, *(_QWORD *)(a1 + 80));
  }
  return result;
}

const char *btBvhTriangleMeshShape::getName(btBvhTriangleMeshShape *this)
{
  return "BVHTRIANGLEMESH";
}

uint64_t btConcaveShape::setMargin(uint64_t this, float a2)
{
  *(float *)(this + 24) = a2;
  return this;
}

float btConcaveShape::getMargin(btConcaveShape *this)
{
  return *((float *)this + 6);
}

uint64_t btBvhTriangleMeshShape::calculateSerializeBufferSize(btBvhTriangleMeshShape *this)
{
  return 80;
}

uint64_t btTriangleMeshShape::localGetSupportingVertexWithoutMargin(btTriangleMeshShape *this, const btVector3 *a2)
{
  return (*(uint64_t (**)(btTriangleMeshShape *, const btVector3 *))(*(_QWORD *)this + 136))(this, a2);
}

void btBvhTriangleMeshShape::performRaycast(btTriangleCallback *,btVector3 const&,btVector3 const&)::MyNodeOverlapCallback::~MyNodeOverlapCallback()
{
  JUMPOUT(0x1DF0D41C0);
}

uint64_t btBvhTriangleMeshShape::performRaycast(btTriangleCallback *,btVector3 const&,btVector3 const&)::MyNodeOverlapCallback::processNode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  float32x2_t *v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  float64x2_t *v14;
  __int128 v15;
  float v16;
  float *v17;
  float32x2_t v18;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[56];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v24 = 0;
  v25 = 0;
  v23 = 0;
  v21 = 0;
  v22 = 0;
  v20 = 0;
  (*(void (**)(_QWORD, uint64_t *, char *, uint64_t *, int *, uint64_t *, char *, uint64_t *, int *, _DWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), &v25, (char *)&v24 + 4, &v24, &v23, &v22, (char *)&v21 + 4, &v21, &v20, a2);
  v6 = 0;
  v7 = v22 + SHIDWORD(v21) * (uint64_t)(int)a3;
  v8 = *(float32x2_t **)(a1 + 8);
  v9 = v20;
  v10 = v24;
  v11 = v23;
  v12 = v25;
  do
  {
    if (v9 == 5)
    {
      v13 = *(unsigned __int8 *)(v7 + v6 + 2);
    }
    else if (v9 == 3)
    {
      v13 = *(unsigned __int16 *)(v7 + 2 * v6 + 4);
    }
    else
    {
      v13 = *(_DWORD *)(v7 + 4 * v6 + 8);
    }
    v14 = (float64x2_t *)(v12 + v11 * (uint64_t)v13);
    if (v10)
    {
      *(float32x2_t *)&v15 = vmul_f32(v8[2], vcvt_f32_f64(*v14));
      v16 = v14[1].f64[0];
      v17 = (float *)&v8[3];
    }
    else
    {
      v18 = *(float32x2_t *)&v14->f64[0];
      v17 = (float *)&v14->f64[1];
      *(float32x2_t *)&v15 = vmul_f32(v18, v8[2]);
      v16 = v8[3].f32[0];
    }
    *((_QWORD *)&v15 + 1) = COERCE_UNSIGNED_INT(*v17 * v16);
    *(_OWORD *)&v26[16 * v6-- + 32] = v15;
  }
  while (v6 != -3);
  (*(void (**)(_QWORD, _BYTE *, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), v26, a2, a3);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), a2);
}

void btBvhTriangleMeshShape::performConvexcast(btTriangleCallback *,btVector3 const&,btVector3 const&,btVector3 const&,btVector3 const&)::MyNodeOverlapCallback::~MyNodeOverlapCallback()
{
  JUMPOUT(0x1DF0D41C0);
}

uint64_t btBvhTriangleMeshShape::performConvexcast(btTriangleCallback *,btVector3 const&,btVector3 const&,btVector3 const&,btVector3 const&)::MyNodeOverlapCallback::processNode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  float32x2_t *v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  float64x2_t *v14;
  __int128 v15;
  float v16;
  float *v17;
  float32x2_t v18;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[56];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v24 = 0;
  v25 = 0;
  v23 = 0;
  v21 = 0;
  v22 = 0;
  v20 = 0;
  (*(void (**)(_QWORD, uint64_t *, char *, uint64_t *, int *, uint64_t *, char *, uint64_t *, int *, _DWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), &v25, (char *)&v24 + 4, &v24, &v23, &v22, (char *)&v21 + 4, &v21, &v20, a2);
  v6 = 0;
  v7 = v22 + SHIDWORD(v21) * (uint64_t)(int)a3;
  v8 = *(float32x2_t **)(a1 + 8);
  v9 = v20;
  v10 = v24;
  v11 = v23;
  v12 = v25;
  do
  {
    if (v9 == 3)
    {
      v13 = *(unsigned __int16 *)(v7 + 2 * v6 + 4);
    }
    else if (v9 == 5)
    {
      v13 = *(unsigned __int8 *)(v7 + v6 + 2);
    }
    else
    {
      v13 = *(_DWORD *)(v7 + 4 * v6 + 8);
    }
    v14 = (float64x2_t *)(v12 + v11 * (uint64_t)v13);
    if (v10)
    {
      *(float32x2_t *)&v15 = vmul_f32(v8[2], vcvt_f32_f64(*v14));
      v16 = v14[1].f64[0];
      v17 = (float *)&v8[3];
    }
    else
    {
      v18 = *(float32x2_t *)&v14->f64[0];
      v17 = (float *)&v14->f64[1];
      *(float32x2_t *)&v15 = vmul_f32(v18, v8[2]);
      v16 = v8[3].f32[0];
    }
    *((_QWORD *)&v15 + 1) = COERCE_UNSIGNED_INT(*v17 * v16);
    *(_OWORD *)&v26[16 * v6-- + 32] = v15;
  }
  while (v6 != -3);
  (*(void (**)(_QWORD, _BYTE *, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), v26, a2, a3);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), a2);
}

void btBvhTriangleMeshShape::processAllTriangles(btTriangleCallback *,btVector3 const&,btVector3 const&)const::MyNodeOverlapCallback::~MyNodeOverlapCallback()
{
  JUMPOUT(0x1DF0D41C0);
}

uint64_t btBvhTriangleMeshShape::processAllTriangles(btTriangleCallback *,btVector3 const&,btVector3 const&)const::MyNodeOverlapCallback::processNode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  float32x2_t *v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  float64x2_t *v14;
  __int128 v15;
  float v16;
  float *v17;
  float32x2_t v18;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;

  v26 = 0;
  v25 = 0;
  v23 = 0;
  v24 = 0;
  v21 = 0;
  v22 = 0;
  v20 = 0;
  (*(void (**)(_QWORD, uint64_t *, int *, int *, int *, uint64_t *, char *, uint64_t *, int *, _DWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), &v26, &v25, &v24, &v23, &v22, (char *)&v21 + 4, &v21, &v20, a2);
  v6 = 0;
  v7 = v22 + SHIDWORD(v21) * (uint64_t)(int)a3;
  v8 = *(float32x2_t **)(a1 + 8);
  v9 = v20;
  v10 = v24;
  v11 = v23;
  v12 = v26;
  do
  {
    if (v9 == 2)
    {
      v13 = *(_DWORD *)(v7 + 4 * v6 + 8);
    }
    else if (v9 == 3)
    {
      v13 = *(unsigned __int16 *)(v7 + 2 * v6 + 4);
    }
    else
    {
      v13 = *(unsigned __int8 *)(v7 + v6 + 2);
    }
    v14 = (float64x2_t *)(v12 + v11 * (uint64_t)v13);
    if (v10)
    {
      *(float32x2_t *)&v15 = vmul_f32(v8[2], vcvt_f32_f64(*v14));
      v16 = v14[1].f64[0];
      v17 = (float *)&v8[3];
    }
    else
    {
      v18 = *(float32x2_t *)&v14->f64[0];
      v17 = (float *)&v14->f64[1];
      *(float32x2_t *)&v15 = vmul_f32(v18, v8[2]);
      v16 = v8[3].f32[0];
    }
    *((_QWORD *)&v15 + 1) = COERCE_UNSIGNED_INT(*v17 * v16);
    *(_OWORD *)(a1 + 64 + 16 * v6--) = v15;
  }
  while (v6 != -3);
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), a1 + 32, a2, a3);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), a2);
}

void btCapsuleShape::btCapsuleShape(btCapsuleShape *this, float a2, float a3)
{
  uint64_t v5;

  btConvexInternalShape::btConvexInternalShape((btConvexInternalShape *)this);
  *(_QWORD *)v5 = off_1EA595B00;
  *(_DWORD *)(v5 + 8) = 10;
  *(_DWORD *)(v5 + 72) = 1;
  *(float *)(v5 + 48) = a2;
  *(float *)(v5 + 52) = a3 * 0.5;
  *(float *)(v5 + 56) = a2;
  *(_DWORD *)(v5 + 60) = 0;
}

void btCapsuleShape::localGetSupportingVertexWithoutMargin(btCapsuleShape *this@<X0>, float32x4_t *a2@<X1>, float32x4_t *a3@<X8>)
{
  float32x4_t v5;
  int8x16_t v6;
  float v7;
  float32x4_t v8;
  uint64_t var0_low;
  float v10;
  __int32 v11;
  float32x4_t v12;
  float32x4_t v13;
  int8x16_t v14;
  float v15;
  float v16;
  float32x4_t v17;
  int8x16_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;

  a3->i64[0] = 0;
  a3->i64[1] = 0;
  v5 = *a2;
  v6 = (int8x16_t)vmulq_f32(v5, v5);
  v7 = vadd_f32(vpadd_f32(*(float32x2_t *)v6.i8, *(float32x2_t *)v6.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)).f32[0];
  if (v7 >= 0.0001)
    v8 = vmulq_n_f32(v5, 1.0 / sqrtf(v7));
  else
    v8 = (float32x4_t)xmmword_1DD007970;
  v20 = v8;
  var0_low = SLODWORD(this[1].var0);
  v10 = this->var4.var0.var0[((int)var0_low + 2) % 3 + 2];
  v11 = LODWORD(this->var4.var0.var0[var0_low + 2]);
  v21 = 0uLL;
  v21.i32[var0_low] = v11;
  v12 = vmulq_n_f32(v8, v10);
  v12.i32[3] = 0;
  v19 = v12;
  v13 = vsubq_f32(vaddq_f32(v21, v12), vmulq_n_f32(v8, (*((float (**)(btCapsuleShape *))this->var0 + 12))(this)));
  v13.i32[3] = 0;
  v14 = (int8x16_t)vmulq_f32(v20, v13);
  v15 = vadd_f32(vpadd_f32(*(float32x2_t *)v14.i8, *(float32x2_t *)v14.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)).f32[0];
  v16 = -1.0e18;
  if (v15 > -1.0e18)
  {
    *a3 = v13;
    v16 = v15;
  }
  v21 = 0uLL;
  v21.f32[SLODWORD(this[1].var0)] = -this->var4.var0.var0[SLODWORD(this[1].var0) + 2];
  v17 = vsubq_f32(vaddq_f32(v21, v19), vmulq_n_f32(v20, (*((float (**)(btCapsuleShape *))this->var0 + 12))(this)));
  v17.i32[3] = 0;
  v18 = (int8x16_t)vmulq_f32(v20, v17);
  if (vadd_f32(vpadd_f32(*(float32x2_t *)v18.i8, *(float32x2_t *)v18.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL)).f32[0] > v16)*a3 = v17;
}

void btCapsuleShape::batchedUnitVectorGetSupportingVertexWithoutMargin(btCapsuleShape *this, float32x4_t *a2, btVector3 *a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float *v11;
  const float *v12;
  float32x4_t v13;
  uint64_t v14;
  float32x4_t v15;
  float v16;
  float32x4_t v17;
  float32x4_t v18;
  int8x16_t v19;
  float v20;
  float v21;
  float32x4_t v22;
  float32x4_t v23;
  int8x16_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  if (a4 >= 1)
  {
    v28 = v7;
    v29 = v6;
    v30 = v4;
    v31 = v5;
    v11 = &this->var4.var0.var0[2];
    v12 = &this->var4.var0.var0[(LODWORD(this[1].var0) + 2) % 3 + 2];
    v13 = vld1q_dup_f32(v12);
    v14 = a4;
    v26 = v13;
    do
    {
      v27 = 0uLL;
      v27.f32[SLODWORD(this[1].var0)] = v11[SLODWORD(this[1].var0)];
      v15 = vmulq_f32(v13, *a2);
      v15.i32[3] = 0;
      v25 = vaddq_f32(v27, v15);
      v16 = (*((float (**)(btCapsuleShape *))this->var0 + 12))(this);
      v17 = *a2;
      v18 = vsubq_f32(v25, vmulq_n_f32(*a2, v16));
      v18.i32[3] = 0;
      v19 = (int8x16_t)vmulq_f32(*a2, v18);
      v20 = vadd_f32(vpadd_f32(*(float32x2_t *)v19.i8, *(float32x2_t *)v19.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL)).f32[0];
      v21 = -1.0e18;
      if (v20 > -1.0e18)
      {
        *a3 = (btVector3)v18;
        v17 = *a2;
        v21 = v20;
      }
      v27 = 0uLL;
      v27.f32[SLODWORD(this[1].var0)] = -v11[SLODWORD(this[1].var0)];
      v22 = vmulq_f32(v26, v17);
      v22.i32[3] = 0;
      v23 = vsubq_f32(vaddq_f32(v27, v22), vmulq_n_f32(*a2, (*((float (**)(btCapsuleShape *))this->var0 + 12))(this)));
      v23.i32[3] = 0;
      v24 = (int8x16_t)vmulq_f32(*a2, v23);
      if (vadd_f32(vpadd_f32(*(float32x2_t *)v24.i8, *(float32x2_t *)v24.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL)).f32[0] > v21)*a3 = (btVector3)v23;
      ++a3;
      ++a2;
      --v14;
      v13 = v26;
    }
    while (v14);
  }
}

float btCapsuleShape::calculateLocalInertia(btCapsuleShape *this, float a2, btVector3 *a3)
{
  float32_t v3;
  float v4;
  float32x2_t v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float result;
  unsigned int v10;
  float v11;
  unsigned int v12;

  *((float *)&v10 + SLODWORD(this[1].var0)) = this->var4.var0.var0[SLODWORD(this[1].var0) + 2]
                                            + *((float *)&v10 + SLODWORD(this[1].var0));
  v3 = (float)((float)(v11 + 0.04) + (float)(v11 + 0.04)) * (float)((float)(v11 + 0.04) + (float)(v11 + 0.04));
  v4 = a2 * 0.083333;
  v5 = vadd_f32((float32x2_t)__PAIR64__(v10, v12), (float32x2_t)vdup_n_s32(0x3D23D70Au));
  v6 = vadd_f32(v5, v5);
  v7 = vmul_f32(v6, v6);
  v8 = (float32x2_t)vdup_lane_s32((int32x2_t)v7, 0);
  v8.f32[0] = v3;
  *(float32x2_t *)a3->var0.var0 = vmul_n_f32(vadd_f32(v7, v8), v4);
  result = v4 * (float)(v7.f32[1] + v3);
  a3->var0.var0[2] = result;
  return result;
}

void btCapsuleShape::~btCapsuleShape(btCapsuleShape *this)
{
  void **v1;

  v1 = (void **)C3DSceneSourcePerformConsistencyCheck(this);
  btAlignedFreeInternal(v1);
}

float32x4_t btCapsuleShape::getAabb(btCapsuleShape *this, const btTransform *a2, btVector3 *a3, btVector3 *a4)
{
  uint64_t var0_low;
  float v9;
  int32x4_t v10;
  unsigned int v11;
  float32x4_t v12;
  float32x4_t v13;
  btVector3 var1;
  float32x4_t v15;
  int8x16_t v16;
  int8x16_t v17;
  btVector3 v18;
  float32x4_t result;
  unsigned int v20;
  unsigned int v21;
  float32x4_t v22;

  var0_low = SLODWORD(this[1].var0);
  v9 = this->var4.var0.var0[((int)var0_low + 2) % 3 + 2];
  v10 = vzip1q_s32((int32x4_t)LODWORD(v9), (int32x4_t)LODWORD(v9));
  v10.i32[2] = LODWORD(this->var4.var0.var0[((int)var0_low + 2) % 3 + 2]);
  v22 = (float32x4_t)v10;
  v22.f32[var0_low] = *(float *)&v10.i32[2] + this->var4.var0.var0[var0_low + 2];
  v21 = COERCE_UNSIGNED_INT64((*((double (**)(btCapsuleShape *))this->var0 + 12))(this));
  v20 = COERCE_UNSIGNED_INT64((*((double (**)(btCapsuleShape *))this->var0 + 12))(this));
  *(float *)&v11 = (*((float (**)(btCapsuleShape *))this->var0 + 12))(this);
  v12.i64[0] = __PAIR64__(v20, v21);
  v12.i64[1] = v11;
  v13 = vaddq_f32(v22, v12);
  var1 = a2->var1;
  v15 = vmulq_f32(v13, (float32x4_t)vandq_s8((int8x16_t)a2->var0.var0[0], (int8x16_t)xmmword_1DD02C930));
  v16 = (int8x16_t)vmulq_f32(v13, (float32x4_t)vandq_s8((int8x16_t)a2->var0.var0[1], (int8x16_t)xmmword_1DD02C930));
  v17 = (int8x16_t)vmulq_f32(v13, (float32x4_t)vandq_s8((int8x16_t)a2->var0.var0[2], (int8x16_t)xmmword_1DD02C930));
  v17.i32[3] = 0;
  *(float32x2_t *)v15.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL)), vpadd_f32(*(float32x2_t *)v15.f32, *(float32x2_t *)v16.i8));
  *(float32x2_t *)&v15.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v17.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL)), 0);
  v18 = (btVector3)vsubq_f32((float32x4_t)var1, v15);
  v18.var0.var0[3] = 0.0;
  *a3 = v18;
  result = vaddq_f32((float32x4_t)var1, v15);
  *a4 = (btVector3)result;
  return result;
}

__n128 btCapsuleShape::setLocalScaling(btCapsuleShape *this, float32x4_t *a2)
{
  double v4;
  double v5;
  unsigned int v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  __n128 result;
  unsigned int v13;
  float32x4_t v14;
  unsigned int v15;
  float32x4_t v16;

  v4 = (*((double (**)(btCapsuleShape *))this->var0 + 12))(this);
  v15 = LODWORD(v4);
  v5 = (*((double (**)(btCapsuleShape *))this->var0 + 12))(this);
  v13 = LODWORD(v5);
  *(float *)&v6 = (*((float (**)(btCapsuleShape *))this->var0 + 12))(this);
  v7.i64[0] = __PAIR64__(v13, v15);
  v7.i64[1] = v6;
  v16 = v7;
  v8 = *(float32x4_t *)((char *)&this->var3 + 8);
  v9 = vaddq_f32(*(float32x4_t *)((char *)&this->var4 + 8), v7);
  v10 = vrecpeq_f32(v8);
  v11 = vmulq_f32(v10, vrecpsq_f32(v8, v10));
  v14 = vmulq_f32(vrecpsq_f32(v8, v11), vmulq_f32(v9, v11));
  btConvexInternalShape::setLocalScaling((float32x4_t *)this, a2);
  result = (__n128)vsubq_f32(vmulq_f32(v14, *(float32x4_t *)((char *)&this->var3 + 8)), v16);
  result.n128_u32[3] = 0;
  *(__n128 *)((char *)&this->var4 + 8) = result;
  return result;
}

const char *btCapsuleShape::getName(btCapsuleShape *this)
{
  return "CapsuleShape";
}

btCapsuleShape *btCapsuleShape::getAnisotropicRollingFrictionDirection@<X0>(btCapsuleShape *this@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  *((_DWORD *)a2 + SLODWORD(this[1].var0)) = 1065353216;
  return this;
}

__n128 btCapsuleShape::setMargin(btCapsuleShape *this, float a2)
{
  double v4;
  double v5;
  unsigned int v6;
  float32x4_t v7;
  unsigned int v8;
  float32x4_t v9;
  __n128 result;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  float32x4_t v15;

  v4 = (*((double (**)(btCapsuleShape *))this->var0 + 12))(this);
  v14 = LODWORD(v4);
  v5 = (*((double (**)(btCapsuleShape *))this->var0 + 12))(this);
  v12 = LODWORD(v5);
  *(float *)&v6 = (*((float (**)(btCapsuleShape *))this->var0 + 12))(this);
  v7.i64[0] = __PAIR64__(v12, v14);
  v7.i64[1] = v6;
  v15 = vaddq_f32(*(float32x4_t *)((char *)&this->var4 + 8), v7);
  *(float *)&this->var7 = a2;
  v13 = COERCE_UNSIGNED_INT64((*((double (**)(btCapsuleShape *))this->var0 + 12))(this));
  v11 = COERCE_UNSIGNED_INT64((*((double (**)(btCapsuleShape *))this->var0 + 12))(this));
  *(float *)&v8 = (*((float (**)(btCapsuleShape *))this->var0 + 12))(this);
  v9.i64[0] = __PAIR64__(v11, v13);
  v9.i64[1] = v8;
  result = (__n128)vsubq_f32(v15, v9);
  result.n128_u32[3] = 0;
  *(__n128 *)((char *)&this->var4 + 8) = result;
  return result;
}

uint64_t btCapsuleShape::calculateSerializeBufferSize(btCapsuleShape *this)
{
  return 64;
}

const char *btCapsuleShape::serialize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  uint64_t j;

  btCollisionShape::serialize(a1, a2, a3);
  for (i = 0; i != 16; i += 4)
    *(_DWORD *)(a2 + 32 + i) = *(_DWORD *)(a1 + 48 + i);
  for (j = 0; j != 16; j += 4)
    *(_DWORD *)(a2 + 16 + j) = *(_DWORD *)(a1 + 32 + j);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 64);
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 72);
  return "btCapsuleShapeData";
}

uint64_t btConvexInternalShape::getNumPreferredPenetrationDirections(btConvexInternalShape *this)
{
  return 0;
}

float32x4_t btCollisionShape::getBoundingSphere(btCollisionShape *this, btVector3 *a2, float *a3)
{
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  int8x16_t v8;
  float32x4_t v9;
  float32x4_t result;
  float32x4_t v11;
  float32x4_t v12;
  _OWORD v13[3];
  uint64_t v14;
  uint64_t v15;

  v13[0] = xmmword_1DD007970;
  v13[1] = xmmword_1DD007920;
  v13[2] = xmmword_1DD007600;
  v14 = 0;
  v15 = 0;
  (*((void (**)(btCollisionShape *, _OWORD *, float32x4_t *, float32x4_t *))this->var0 + 2))(this, v13, &v12, &v11);
  v5 = v11;
  v6 = v12;
  v7 = vsubq_f32(v11, v12);
  v7.i32[3] = 0;
  v8 = (int8x16_t)vmulq_f32(v7, v7);
  *a3 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v8.i8, *(float32x2_t *)v8.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL)).f32[0])* 0.5;
  v9 = vaddq_f32(v5, v6);
  v6.i64[0] = 0x3F0000003F000000;
  v6.i64[1] = 0x3F0000003F000000;
  result = vmulq_f32(v9, v6);
  result.i32[3] = 0;
  *a2 = (btVector3)result;
  return result;
}

float btCollisionShape::getContactBreakingThreshold(btCollisionShape *this, float a2)
{
  return (*((float (**)(btCollisionShape *))this->var0 + 4))(this) * a2;
}

float btCollisionShape::getAngularMotionDisc(btCollisionShape *this)
{
  int8x16_t v1;
  float v3;
  float32x4_t v4;

  v3 = 0.0;
  (*((void (**)(btCollisionShape *, float32x4_t *, float *))this->var0 + 3))(this, &v4, &v3);
  v1 = (int8x16_t)vmulq_f32(v4, v4);
  return v3
       + sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v1.i8, *(float32x2_t *)v1.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v1, v1, 8uLL)).f32[0]);
}

float32x4_t btCollisionShape::calculateTemporalAabb(btCollisionShape *this, const btTransform *a2, float32x4_t *a3, float32x4_t *a4, float a5, float32x4_t *a6, float32x4_t *a7)
{
  float32x4_t v12;
  int8x8_t v13;
  float v14;
  float v15;
  int8x16_t v16;
  float v17;
  double v18;
  float32x4_t v19;
  btVector3 v20;
  float32x4_t result;
  unsigned int v22;
  float v23;
  float32x2_t v24;
  float32x2_t v25;

  (*((void (**)(btCollisionShape *, const btTransform *, float32x4_t *, float32x4_t *))this->var0 + 2))(this, a2, a6, a7);
  v12 = vmulq_n_f32(*a3, a5);
  v13 = (int8x8_t)vcgtz_f32(*(float32x2_t *)v12.f32);
  v24 = vadd_f32(*(float32x2_t *)a6->f32, (float32x2_t)vbsl_s8(v13, (int8x8_t)0x8000000080000000, *(int8x8_t *)v12.f32));
  v25 = vadd_f32(*(float32x2_t *)a7->f32, (float32x2_t)vbsl_s8(v13, *(int8x8_t *)v12.f32, (int8x8_t)0x8000000080000000));
  if (v12.f32[2] <= 0.0)
    v14 = -0.0;
  else
    v14 = v12.f32[2];
  v23 = a7->f32[2] + v14;
  if (v12.f32[2] <= 0.0)
    v15 = v12.f32[2];
  else
    v15 = -0.0;
  *(float *)&v22 = a6->f32[2] + v15;
  v16 = (int8x16_t)vmulq_f32(*a4, *a4);
  v17 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v16.i8, *(float32x2_t *)v16.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL)).f32[0]);
  v18 = (*((double (**)(btCollisionShape *))this->var0 + 4))(this);
  *(float *)&v18 = (float)(*(float *)&v18 * v17) * a5;
  v19 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v18, 0);
  v19.i32[3] = 0;
  *(float32x2_t *)v20.var0.var0 = v24;
  *(_QWORD *)&v20.var0.var0[2] = v22;
  *(btVector3 *)a6 = v20;
  *(float32x2_t *)v20.var0.var0 = v25;
  *(_QWORD *)&v20.var0.var0[2] = LODWORD(v23);
  *(btVector3 *)a7 = v20;
  *a6 = vsubq_f32(*a6, v19);
  result = vaddq_f32(*a7, v19);
  *a7 = result;
  return result;
}

const char *btCollisionShape::serialize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 80))(a3, a1);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 56))(a3, v6);
  *(_QWORD *)a2 = v7;
  if (v7)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 96))(a3, v6);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 8);
  return "btCollisionShapeData";
}

uint64_t btCollisionShape::serializeSingleShape(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
  v5 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 32))(a2, v4, 1);
  v6 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 112))(a1, *(_QWORD *)(v5 + 8), a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, v5, v6, 1346455635, a1);
}

uint64_t btCollisionShape::calculateSerializeBufferSize(btCollisionShape *this)
{
  return 16;
}

void btCompoundShape::btCompoundShape(btCompoundShape *this, int a2)
{
  btDbvt *v3;
  uint64_t v4;

  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = off_1EA595E48;
  *((_BYTE *)this + 48) = 1;
  *((_QWORD *)this + 5) = 0;
  *((_DWORD *)this + 7) = 0;
  *((_DWORD *)this + 8) = 0;
  *((_OWORD *)this + 4) = xmmword_1DD02C880;
  *((_OWORD *)this + 5) = xmmword_1DD02C890;
  *((_QWORD *)this + 12) = 0;
  *((_DWORD *)this + 26) = 1;
  *(_OWORD *)((char *)this + 108) = xmmword_1DD02CB00;
  *((_DWORD *)this + 31) = 0;
  *((_DWORD *)this + 2) = 31;
  if (a2)
  {
    v3 = (btDbvt *)btAlignedAllocInternal(96, 16);
    btDbvt::btDbvt(v3);
    *((_QWORD *)this + 12) = v4;
  }
}

void btCompoundShape::~btCompoundShape(btCompoundShape *this)
{
  btDbvt *v2;

  *(_QWORD *)this = off_1EA595E48;
  v2 = (btDbvt *)*((_QWORD *)this + 12);
  if (v2)
  {
    btDbvt::~btDbvt(v2);
    btAlignedFreeInternal(*((void ***)this + 12));
  }
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)this + 24);
}

{
  void **v1;

  btCompoundShape::~btCompoundShape(this);
  btAlignedFreeInternal(v1);
}

__n128 btCompoundShape::addChildShape(btCompoundShape *this, const btTransform *a2, btCollisionShape *a3, char a4)
{
  int v8;
  float v9;
  uint64_t i;
  float *v11;
  float v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  _OWORD *v22;
  __int128 v23;
  void **v24;
  uint64_t v25;
  __n128 result;
  btVector3 var1;
  btVector3 v28;
  btVector3 v29;
  btVector3 v30;
  _OWORD v31[2];
  __int128 v32;
  __int128 v33;

  ++*((_DWORD *)this + 26);
  v29 = a2->var0.var0[1];
  v30 = a2->var0.var0[0];
  var1 = a2->var1;
  v28 = a2->var0.var0[2];
  v8 = a3->var1;
  v9 = (*((float (**)(btCollisionShape *))a3->var0 + 12))(a3);
  (*((void (**)(btCollisionShape *, const btTransform *, __int128 *, __int128 *))a3->var0 + 2))(a3, a2, &v33, &v32);
  for (i = 0; i != 12; i += 4)
  {
    v11 = (float *)((char *)this + i);
    v12 = *(float *)((char *)&v33 + i);
    if (*(float *)((char *)this + i + 64) > v12)
      v11[16] = v12;
    v13 = *(float *)((char *)&v32 + i);
    if (v11[20] < v13)
      v11[20] = v13;
  }
  v14 = *((_QWORD *)this + 12);
  if (v14)
  {
    v31[0] = v33;
    v31[1] = v32;
    v15 = btDbvt::insert(v14, v31, *((int *)this + 7));
  }
  else
  {
    v15 = 0;
  }
  v16 = *((_DWORD *)this + 7);
  if (v16 == *((_DWORD *)this + 8))
  {
    v17 = v16 ? 2 * v16 : 1;
    if (v16 < v17)
    {
      if (v17)
      {
        v18 = btAlignedAllocInternal(96 * v17, 16);
        v16 = *((_DWORD *)this + 7);
      }
      else
      {
        v18 = 0;
      }
      if (v16 >= 1)
      {
        v19 = 0;
        v20 = 96 * v16;
        do
        {
          v21 = (_OWORD *)(v18 + v19);
          v22 = (_OWORD *)(*((_QWORD *)this + 5) + v19);
          *v21 = *v22;
          v21[1] = v22[1];
          v21[2] = v22[2];
          v21[3] = v22[3];
          v23 = v22[4];
          *(_OWORD *)((char *)v21 + 73) = *(_OWORD *)((char *)v22 + 73);
          v21[4] = v23;
          v19 += 96;
        }
        while (v20 != v19);
      }
      v24 = (void **)*((_QWORD *)this + 5);
      if (v24 && *((_BYTE *)this + 48))
        btAlignedFreeInternal(v24);
      *((_BYTE *)this + 48) = 1;
      *((_QWORD *)this + 5) = v18;
      *((_DWORD *)this + 8) = v17;
      v16 = *((_DWORD *)this + 7);
    }
  }
  v25 = *((_QWORD *)this + 5) + 96 * v16;
  *(btVector3 *)v25 = v30;
  *(btVector3 *)(v25 + 16) = v29;
  result = (__n128)var1;
  *(btVector3 *)(v25 + 32) = v28;
  *(btVector3 *)(v25 + 48) = var1;
  *(_QWORD *)(v25 + 64) = a3;
  *(_DWORD *)(v25 + 72) = v8;
  *(float *)(v25 + 76) = v9;
  *(_QWORD *)(v25 + 80) = v15;
  *(_BYTE *)(v25 + 88) = a4;
  ++*((_DWORD *)this + 7);
  return result;
}

_QWORD *btCompoundShape::updateChildTransform(_QWORD *this, int a2, const btTransform *a3, int a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD v8[2];
  __int128 v9;
  __int128 v10;

  v5 = this;
  *(btTransform *)(this[5] + 96 * a2) = *a3;
  if (this[12])
  {
    v6 = 3 * a2;
    v7 = *(_QWORD *)(this[5] + 96 * a2 + 64);
    (*(void (**)(uint64_t, const btTransform *, __int128 *, __int128 *))(*(_QWORD *)v7 + 16))(v7, a3, &v10, &v9);
    v8[0] = v10;
    v8[1] = v9;
    this = (_QWORD *)btDbvt::update(v5[12], *(_QWORD *)(v5[5] + 32 * v6 + 80), v8);
  }
  if (a4)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 136))(v5);
  return this;
}

void btCompoundShape::removeChildShapeByIndex(btCompoundShape *this, int a2)
{
  uint64_t v4;
  uint64_t v6;
  __int128 *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _OWORD *v17;
  _BYTE v18[25];

  ++*((_DWORD *)this + 26);
  v4 = *((_QWORD *)this + 12);
  if (v4)
    btDbvt::remove(v4, *(_QWORD *)(*((_QWORD *)this + 5) + 96 * a2 + 80));
  v6 = *((_QWORD *)this + 5);
  v7 = (__int128 *)(v6 + 96 * a2);
  v8 = *v7;
  v9 = v7[1];
  v10 = v7[2];
  v11 = v7[3];
  *(_OWORD *)v18 = v7[4];
  *(_OWORD *)&v18[9] = *(__int128 *)((char *)v7 + 73);
  v12 = 96 * *((int *)this + 7) - 96;
  v13 = (__int128 *)(v6 + v12);
  v14 = v13[1];
  *v7 = *v13;
  v7[1] = v14;
  v15 = v13[3];
  v7[2] = v13[2];
  v7[3] = v15;
  v16 = *(__int128 *)((char *)v13 + 73);
  v7[4] = v13[4];
  *(__int128 *)((char *)v7 + 73) = v16;
  v17 = (_OWORD *)(*((_QWORD *)this + 5) + v12);
  *v17 = v8;
  v17[1] = v9;
  v17[2] = v10;
  v17[3] = v11;
  v17[4] = *(_OWORD *)v18;
  *(_OWORD *)((char *)v17 + 73) = *(_OWORD *)&v18[9];
  if (*((_QWORD *)this + 12))
    *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 96 * a2 + 80) + 40) = a2;
  --*((_DWORD *)this + 7);
}

uint64_t btCompoundShape::removeChildShape(btCompoundShape *this, btCollisionShape *a2)
{
  uint64_t v3;
  uint64_t v5;

  ++*((_DWORD *)this + 26);
  v3 = *((unsigned int *)this + 7);
  if ((int)v3 >= 1)
  {
    do
    {
      v5 = v3 - 1;
      if (*(btCollisionShape **)(*((_QWORD *)this + 5) + 96 * (v3 - 1) + 64) == a2)
        btCompoundShape::removeChildShapeByIndex(this, v3 - 1);
      v3 = v5;
    }
    while ((unint64_t)(v5 + 1) > 1);
  }
  return (*(uint64_t (**)(btCompoundShape *))(*(_QWORD *)this + 136))(this);
}

uint64_t btCompoundShape::recalculateLocalAabb(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  float v5;
  float v6;
  _BYTE v7[16];
  _BYTE v8[16];

  *(_OWORD *)(this + 64) = xmmword_1DD02C880;
  *(_OWORD *)(this + 80) = xmmword_1DD02C890;
  if (*(int *)(this + 28) >= 1)
  {
    v1 = this;
    v2 = 0;
    do
    {
      this = (*(uint64_t (**)(_QWORD, uint64_t, _BYTE *, _BYTE *))(**(_QWORD **)(*(_QWORD *)(v1 + 40)
                                                                                        + 96 * v2
                                                                                        + 64)
                                                                          + 16))(*(_QWORD *)(*(_QWORD *)(v1 + 40) + 96 * v2 + 64), *(_QWORD *)(v1 + 40) + 96 * v2, v8, v7);
      for (i = 0; i != 12; i += 4)
      {
        v4 = v1 + i;
        v5 = *(float *)&v8[i];
        if (*(float *)(v1 + i + 64) > v5)
          *(float *)(v4 + 64) = v5;
        v6 = *(float *)&v7[i];
        if (*(float *)(v4 + 80) < v6)
          *(float *)(v4 + 80) = v6;
      }
      ++v2;
    }
    while (v2 < *(int *)(v1 + 28));
  }
  return this;
}

float32x4_t btCompoundShape::getAabb(float32x4_t *this, const btTransform *a2, btVector3 *a3, btVector3 *a4)
{
  float32x4_t v8;
  unsigned int v9;
  int32x4_t v10;
  int8x16_t v11;
  float32x4_t v12;
  int8x16_t v13;
  float32x4_t v14;
  float32x4_t v15;
  int8x16_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int8x16_t v21;
  int8x16_t v22;
  float32x4_t v23;
  float32x4_t v24;
  int8x16_t v25;
  int8x16_t v26;
  btVector3 v27;
  float32x4_t result;
  int32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  unsigned int v32;
  unsigned int v33;

  v30 = this[4];
  v8 = v30;
  v31 = this[5];
  v8.i32[0] = this[1].i32[3];
  v29 = (int32x4_t)v8;
  v33 = COERCE_UNSIGNED_INT64((*(double (**)(void))(this->i64[0] + 96))());
  v32 = COERCE_UNSIGNED_INT64((*(double (**)(float32x4_t *))(this->i64[0] + 96))(this));
  *(float *)&v9 = (*(float (**)(float32x4_t *))(this->i64[0] + 96))(this);
  v10.i32[0] = 0;
  v11 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v29, v10), 0);
  v12.i64[0] = 0x3F0000003F000000;
  v12.i64[1] = 0x3F0000003F000000;
  v13 = (int8x16_t)vmulq_f32(vaddq_f32(v31, v30), v12);
  v13.i32[3] = 0;
  v14 = (float32x4_t)a2->var0.var0[1];
  v15 = (float32x4_t)vbicq_s8(v13, v11);
  v16 = (int8x16_t)vmulq_f32(vsubq_f32(v31, v30), v12);
  v16.i32[3] = 0;
  v17 = (float32x4_t)a2->var0.var0[2];
  v18.i64[0] = __PAIR64__(v32, v33);
  v18.i64[1] = v9;
  v19 = vaddq_f32((float32x4_t)vbicq_s8(v16, v11), v18);
  v20 = vmulq_f32(v15, (float32x4_t)a2->var0.var0[0]);
  v21 = (int8x16_t)vmulq_f32(v15, v14);
  v22 = (int8x16_t)vmulq_f32(v15, v17);
  v22.i32[3] = 0;
  *(float32x2_t *)v20.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v21.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL)));
  *(float32x2_t *)&v20.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v22.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL)), 0);
  v23 = vaddq_f32(v20, (float32x4_t)a2->var1);
  v24 = vmulq_f32(v19, (float32x4_t)vandq_s8((int8x16_t)a2->var0.var0[0], (int8x16_t)xmmword_1DD02C930));
  v25 = (int8x16_t)vmulq_f32(v19, (float32x4_t)vandq_s8((int8x16_t)v14, (int8x16_t)xmmword_1DD02C930));
  v26 = (int8x16_t)vmulq_f32(v19, (float32x4_t)vandq_s8((int8x16_t)v17, (int8x16_t)xmmword_1DD02C930));
  v26.i32[3] = 0;
  *(float32x2_t *)v24.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL)), vpadd_f32(*(float32x2_t *)v24.f32, *(float32x2_t *)v25.i8));
  *(float32x2_t *)&v24.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v26.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL)), 0);
  v27 = (btVector3)vsubq_f32(v23, v24);
  v27.var0.var0[3] = 0.0;
  *a3 = v27;
  result = vaddq_f32(v23, v24);
  *a4 = (btVector3)result;
  return result;
}

float btCompoundShape::calculateLocalInertia(btCompoundShape *this, float a2, btVector3 *a3)
{
  float32x4_t v5;
  float32x4_t v6;
  float32x2_t v7;
  float result;
  float32x4_t v9;
  float32x4_t v10;
  _OWORD v11[3];
  uint64_t v12;
  uint64_t v13;

  v11[0] = xmmword_1DD007970;
  v11[1] = xmmword_1DD007920;
  v11[2] = xmmword_1DD007600;
  v12 = 0;
  v13 = 0;
  (*(void (**)(btCompoundShape *, _OWORD *, float32x4_t *, float32x4_t *))(*(_QWORD *)this + 16))(this, v11, &v10, &v9);
  v5.i64[0] = 0x3F0000003F000000;
  v5.i64[1] = 0x3F0000003F000000;
  v6 = vmulq_f32(vsubq_f32(v9, v10), v5);
  v5.f32[0] = (float)(v6.f32[2] + v6.f32[2]) * (float)(v6.f32[2] + v6.f32[2]);
  *(float32x2_t *)v6.f32 = vadd_f32(*(float32x2_t *)v6.f32, *(float32x2_t *)v6.f32);
  v7 = (float32x2_t)vrev64_s32(*(int32x2_t *)v6.f32);
  *(float32x2_t *)a3->var0.var0 = vmul_n_f32(vmla_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v5.f32, 0), v7, v7), a2 / 12.0);
  result = (float)(a2 / 12.0)
         * vmlas_n_f32(COERCE_FLOAT(vmul_f32(*(float32x2_t *)&v6, *(float32x2_t *)&v6).i32[1]), v6.f32[0], v6.f32[0]);
  a3->var0.var0[2] = result;
  return result;
}

uint64_t btCompoundShape::setLocalScaling(float32x4_t *this, float32x4_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float32x4_t *v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  uint64_t v11;
  float32x4_t v13;
  btTransform v14;

  if (this[1].i32[3] >= 1)
  {
    v4 = 0;
    v5 = 0;
    do
    {
      v6 = this[2].i64[1] + v4;
      v14 = *(btTransform *)v6;
      v7 = (float32x4_t *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 64) + 56))(*(_QWORD *)(v6 + 64));
      v8 = this[7];
      v9 = vrecpeq_f32(v8);
      v10 = vmulq_f32(v9, vrecpsq_f32(v8, v9));
      v13 = vmulq_f32(vrecpsq_f32(v8, v10), vmulq_f32(vmulq_f32(*v7, *a2), v10));
      v11 = *(_QWORD *)(this[2].i64[1] + v4 + 64);
      (*(void (**)(uint64_t, float32x4_t *))(*(_QWORD *)v11 + 48))(v11, &v13);
      v14.var1 = (btVector3)vmulq_f32((float32x4_t)v14.var1, *a2);
      btCompoundShape::updateChildTransform(this, v5++, &v14, 0);
      v4 += 96;
    }
    while (v5 < this[1].i32[3]);
  }
  this[7] = *a2;
  return (*(uint64_t (**)(float32x4_t *))(this->i64[0] + 136))(this);
}

void btCompoundShape::createAabbTreeFromChildren(btCompoundShape *this)
{
  btDbvt *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD v7[2];
  __int128 v8;
  __int128 v9;

  if (!*((_QWORD *)this + 12))
  {
    v2 = (btDbvt *)btAlignedAllocInternal(96, 16);
    btDbvt::btDbvt(v2);
    *((_QWORD *)this + 12) = v3;
    if (*((int *)this + 7) >= 1)
    {
      v4 = 0;
      v5 = 0;
      do
      {
        v6 = *((_QWORD *)this + 5) + v4;
        (*(void (**)(_QWORD, uint64_t, __int128 *, __int128 *))(**(_QWORD **)(v6 + 64) + 16))(*(_QWORD *)(v6 + 64), v6, &v9, &v8);
        v7[0] = v9;
        v7[1] = v8;
        *(_QWORD *)(v6 + 80) = btDbvt::insert(*((_QWORD *)this + 12), v7, v5++);
        v4 += 96;
      }
      while (v5 < *((int *)this + 7));
    }
  }
}

const char *btCompoundShape::serialize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  uint64_t j;

  btCollisionShape::serialize(a1, a2, a3);
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a1 + 108);
  v6 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a2 + 24) = v6;
  *(_QWORD *)(a2 + 16) = 0;
  if (v6)
  {
    v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 80);
    v8 = *(_QWORD *)(v7 + 8);
    *(_QWORD *)(a2 + 16) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 56))(a3, v8);
    if (*(int *)(a2 + 24) >= 1)
    {
      v9 = 0;
      v10 = 0;
      v11 = *(_QWORD *)(a1 + 40);
      do
      {
        v12 = v11 + 96 * v10;
        *(_DWORD *)(v8 + 76) = *(_DWORD *)(v12 + 76);
        *(_QWORD *)(v8 + 64) = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 56))(a3, *(_QWORD *)(v12 + 64));
        if (!(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 48))(a3, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 96 * v10 + 64)))
        {
          v13 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 96 * v10 + 64);
          v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 104))(v13);
          v15 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a3 + 32))(a3, v14, 1);
          v16 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 96 * v10 + 64);
          v17 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v16 + 112))(v16, *(_QWORD *)(v15 + 8), a3);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a3 + 40))(a3, v15, v17, 1346455635, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 96 * v10 + 64));
        }
        v18 = 0;
        v11 = *(_QWORD *)(a1 + 40);
        *(_DWORD *)(v8 + 72) = *(_DWORD *)(v11 + 96 * v10 + 72);
        v19 = v11 + v9;
        v20 = v8;
        do
        {
          for (i = 0; i != 16; i += 4)
            *(_DWORD *)(v20 + i) = *(_DWORD *)(v19 + i);
          ++v18;
          v19 += 16;
          v20 += 16;
        }
        while (v18 != 3);
        for (j = 48; j != 64; j += 4)
          *(_DWORD *)(v8 + j) = *(_DWORD *)(v11 + v9 + j);
        ++v10;
        v8 += 80;
        v9 += 96;
      }
      while (v10 < *(int *)(a2 + 24));
    }
    (*(void (**)(uint64_t, uint64_t, const char *, uint64_t, _QWORD))(*(_QWORD *)a3 + 40))(a3, v7, "btCompoundShapeChildData", 1497453121, *(_QWORD *)(v7 + 8));
  }
  return "btCompoundShapeData";
}

uint64_t btCompoundShape::getLocalScaling(btCompoundShape *this)
{
  return (uint64_t)this + 112;
}

const char *btCompoundShape::getName(btCompoundShape *this)
{
  return "Compound";
}

uint64_t btCompoundShape::setMargin(uint64_t this, float a2)
{
  *(float *)(this + 108) = a2;
  return this;
}

float btCompoundShape::getMargin(btCompoundShape *this)
{
  return *((float *)this + 27);
}

uint64_t btCompoundShape::calculateSerializeBufferSize(btCompoundShape *this)
{
  return 32;
}

void btConcaveShape::btConcaveShape(btConcaveShape *this)
{
  *((_DWORD *)this + 2) = 35;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = off_1EA595BC8;
  *((_DWORD *)this + 6) = 0;
}

void btConeShape::btConeShape(btConeShape *this, float a2, float a3)
{
  uint64_t v5;

  btConvexInternalShape::btConvexInternalShape(this);
  *(_QWORD *)v5 = off_1EA5952B8;
  *(float *)(v5 + 76) = a2;
  *(float *)(v5 + 80) = a3;
  *(_DWORD *)(v5 + 8) = 11;
  *(_QWORD *)(v5 + 84) = 0x100000000;
  *(_DWORD *)(v5 + 92) = 2;
  *(float *)(v5 + 72) = a2 / sqrtf((float)(a3 * a3) + (float)(a2 * a2));
}

uint64_t btConeShape::coneLocalSupport@<X0>(uint64_t this@<X0>, float32x4_t *a2@<X1>, uint64_t a3@<X8>)
{
  float v3;
  uint64_t v4;
  uint64_t v5;
  int8x16_t v6;
  float v7;
  uint64_t v8;
  float v9;
  float v10;
  float v11;
  float v12;

  v3 = *(float *)(this + 80) * 0.5;
  v5 = *(int *)(this + 84);
  v4 = *(int *)(this + 88);
  v6 = (int8x16_t)vmulq_f32(*a2, *a2);
  if (a2->f32[v4] <= (float)(*(float *)(this + 72)
                            * sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v6.i8, *(float32x2_t *)v6.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)).f32[0])))
  {
    v9 = a2->f32[v5];
    v8 = *(int *)(this + 92);
    v10 = a2->f32[v8];
    v11 = sqrtf((float)(v10 * v10) + (float)(v9 * v9));
    if (v11 <= 0.00000011921)
    {
      *(_DWORD *)(a3 + 4 * v5) = 0;
      *(float *)(a3 + 4 * v4) = -v3;
      v7 = 0.0;
    }
    else
    {
      v12 = *(float *)(this + 76) / v11;
      *(float *)(a3 + 4 * v5) = v9 * v12;
      *(float *)(a3 + 4 * v4) = -v3;
      v7 = v10 * v12;
    }
  }
  else
  {
    *(_DWORD *)(a3 + 4 * v5) = 0;
    *(float *)(a3 + 4 * v4) = v3;
    v7 = 0.0;
    v8 = *(int *)(this + 92);
  }
  *(float *)(a3 + 4 * v8) = v7;
  return this;
}

double btConeShape::batchedUnitVectorGetSupportingVertexWithoutMargin(btConeShape *this, float32x4_t *a2, btVector3 *a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  double result;
  btVector3 v11;
  uint64_t v12;
  uint64_t v13;

  if (a4 >= 1)
  {
    v12 = v4;
    v13 = v5;
    v9 = a4;
    do
    {
      btConeShape::coneLocalSupport((uint64_t)this, a2, (uint64_t)&v11);
      result = *(double *)v11.var0.var0;
      *a3++ = v11;
      ++a2;
      --v9;
    }
    while (v9);
  }
  return result;
}

float32x4_t btConeShape::localGetSupportingVertex@<Q0>(btConeShape *this@<X0>, float32x4_t *a2@<X1>, float32x4_t *a3@<X8>)
{
  float32x4_t result;
  float32x4_t v7;
  int8x16_t v8;
  float32x4_t v9;
  float32x4_t v10;
  int8x16_t v11;
  float32x4_t v12;

  btConeShape::coneLocalSupport((uint64_t)this, a2, (uint64_t)a3);
  result.f32[0] = (*(float (**)(btConeShape *))(*(_QWORD *)this + 96))(this);
  if (result.f32[0] != 0.0)
  {
    v8 = (int8x16_t)vmulq_f32(*a2, *a2);
    *(float32x2_t *)v7.f32 = vpadd_f32(*(float32x2_t *)v8.i8, *(float32x2_t *)v8.i8);
    v9 = (float32x4_t)vextq_s8(v8, v8, 8uLL);
    *(float32x2_t *)v9.f32 = vadd_f32(*(float32x2_t *)v7.f32, *(float32x2_t *)v9.f32);
    v7.i32[0] = 679477248;
    v10 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v7, v9), 0), (int8x16_t)xmmword_1DD02A730, *(int8x16_t *)a2);
    v11 = (int8x16_t)vmulq_f32(v10, v10);
    v12 = vmulq_n_f32(vmulq_n_f32(v10, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v11.i8, *(float32x2_t *)v11.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL)).f32[0])), (*(float (**)(btConeShape *))(*(_QWORD *)this + 96))(this));
    v12.i32[3] = 0;
    result = vaddq_f32(*a3, v12);
    *a3 = result;
  }
  return result;
}

double btConeShape::setLocalScaling(float32x4_t *this, float32x4_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  float v4;
  float32_t v5;
  float32_t v6;
  double result;

  v2 = this[5].i32[1];
  v3 = this[5].i32[3];
  v4 = this[4].f32[3];
  v5 = this[5].f32[0] * (float)(a2->f32[this[5].i32[2]] / this[2].f32[this[5].i32[2]]);
  this[5].f32[0] = v5;
  v6 = v4 * (float)((float)((float)(a2->f32[v2] / this[2].f32[v2]) + (float)(a2->f32[v3] / this[2].f32[v3])) * 0.5);
  this[4].f32[2] = v6 / sqrtf((float)(v5 * v5) + (float)(v6 * v6));
  this[4].f32[3] = v6;
  *(_QWORD *)&result = btConvexInternalShape::setLocalScaling(this, a2).u64[0];
  return result;
}

void btConeShape::~btConeShape(btConeShape *this)
{
  void **v1;

  v1 = (void **)C3DSceneSourcePerformConsistencyCheck(this);
  btAlignedFreeInternal(v1);
}

uint64_t btConvexInternalShape::getAabb(btConvexInternalShape *this, const btTransform *a2, btVector3 *a3, btVector3 *a4)
{
  return (*(uint64_t (**)(btConvexInternalShape *, const btTransform *, btVector3 *, btVector3 *))(*(_QWORD *)this + 160))(this, a2, a3, a4);
}

float32x4_t btConeShape::calculateLocalInertia(btConeShape *this, float a2, btVector3 *a3)
{
  float32x4_t v6;
  double v7;
  float32_t v8;
  float32x4_t v9;
  float32x2_t v10;
  float32x2_t v11;
  float32x2_t v12;
  float32x4_t result;
  int8x16_t v14;
  float32x4_t v15;
  float32x4_t v16;
  _OWORD v17[3];
  uint64_t v18;
  uint64_t v19;

  v17[0] = xmmword_1DD007970;
  v17[1] = xmmword_1DD007920;
  v17[2] = xmmword_1DD007600;
  v18 = 0;
  v19 = 0;
  (*(void (**)(btConeShape *, _OWORD *, float32x4_t *, float32x4_t *))(*(_QWORD *)this + 16))(this, v17, &v16, &v15);
  v6.i64[0] = 0x3F0000003F000000;
  v6.i64[1] = 0x3F0000003F000000;
  v14 = (int8x16_t)vmulq_f32(vsubq_f32(v15, v16), v6);
  v7 = (*(double (**)(btConeShape *))(*(_QWORD *)this + 96))(this);
  v8 = (float)((float)(*(float *)&v14.i32[1] + *(float *)&v7) + (float)(*(float *)&v14.i32[1] + *(float *)&v7))
     * (float)((float)(*(float *)&v14.i32[1] + *(float *)&v7) + (float)(*(float *)&v14.i32[1] + *(float *)&v7));
  v9 = (float32x4_t)vextq_s8(v14, v14, 8uLL);
  v9.i32[1] = v14.i32[0];
  v10 = vadd_f32(*(float32x2_t *)v9.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v7, 0));
  v11 = vadd_f32(v10, v10);
  v12 = vmul_f32(v11, v11);
  *(int32x2_t *)v9.f32 = vdup_lane_s32((int32x2_t)v12, 0);
  v9.f32[0] = v8;
  *(float32x2_t *)v9.f32 = vadd_f32(v12, *(float32x2_t *)v9.f32);
  v9.f32[2] = v12.f32[1] + v8;
  result = vmulq_n_f32(v9, a2 * 0.083333);
  result.i32[3] = 0;
  *a3 = (btVector3)result;
  return result;
}

const char *btConeShape::getName(btConeShape *this)
{
  return "Cone";
}

double btConeShape::getAnisotropicRollingFrictionDirection@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0078125;
  *a1 = xmmword_1DD007920;
  return result;
}

void btConvexHullShape::btConvexHullShape(btConvexHullShape *this, const float *a2, int a3, int a4, const unsigned int *a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  uint64_t v19;
  const float *v20;
  __int128 v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  void **v26;
  _DWORD *v27;
  int *v28;
  int v29;
  uint64_t v30;
  unsigned int *v31;
  const unsigned int *v32;
  unsigned int v33;

  btPolyhedralConvexAabbCachingShape::btPolyhedralConvexAabbCachingShape(this);
  *(_QWORD *)v12 = off_1EA596708;
  *(_BYTE *)(v12 + 144) = 1;
  *(_QWORD *)(v12 + 136) = 0;
  *(_QWORD *)(v12 + 124) = 0;
  *(_BYTE *)(v12 + 176) = 1;
  *(_QWORD *)(v12 + 168) = 0;
  *(_QWORD *)(v12 + 156) = 0;
  *(_DWORD *)(v12 + 8) = 4;
  if (a3 < 1)
  {
    *((_DWORD *)this + 31) = a3;
  }
  else
  {
    v13 = btAlignedAllocInternal(16 * a3, 16);
    v14 = v13;
    v15 = *((unsigned int *)this + 31);
    if ((int)v15 >= 1)
    {
      v16 = 0;
      v17 = 16 * v15;
      do
      {
        *(_OWORD *)(v13 + v16) = *(_OWORD *)(*((_QWORD *)this + 17) + v16);
        v16 += 16;
      }
      while (v17 != v16);
    }
    v18 = (void **)*((_QWORD *)this + 17);
    if (v18 && *((_BYTE *)this + 144))
      btAlignedFreeInternal(v18);
    *((_BYTE *)this + 144) = 1;
    *((_QWORD *)this + 17) = v14;
    *((_DWORD *)this + 31) = a3;
    *((_DWORD *)this + 32) = a3;
    v19 = 0;
    v20 = a2 + 2;
    do
    {
      *(_QWORD *)&v21 = *((_QWORD *)v20 - 1);
      *((float *)&v21 + 2) = *v20;
      v20 = (const float *)((char *)v20 + a4);
      *((_QWORD *)&v21 + 1) = DWORD2(v21);
      *(_OWORD *)(*((_QWORD *)this + 17) + v19) = v21;
      v19 += 16;
    }
    while (16 * a3 != v19);
  }
  v22 = 3 * a6;
  v23 = *((_DWORD *)this + 39);
  if (v23 < 3 * a6)
  {
    if (*((_DWORD *)this + 40) >= v22)
    {
LABEL_25:
      bzero((void *)(*((_QWORD *)this + 21) + 4 * v23), 4 * (v22 + ~v23) + 4);
      goto LABEL_26;
    }
    if (a6)
      v24 = btAlignedAllocInternal(4 * v22, 16);
    else
      v24 = 0;
    LODWORD(v25) = *((_DWORD *)this + 39);
    v26 = (void **)*((_QWORD *)this + 21);
    if ((int)v25 < 1)
    {
      if (!v26)
      {
LABEL_24:
        *((_BYTE *)this + 176) = 1;
        *((_QWORD *)this + 21) = v24;
        *((_DWORD *)this + 40) = v22;
        goto LABEL_25;
      }
    }
    else
    {
      v25 = v25;
      v27 = (_DWORD *)v24;
      v28 = (int *)*((_QWORD *)this + 21);
      do
      {
        v29 = *v28++;
        *v27++ = v29;
        --v25;
      }
      while (v25);
    }
    if (*((_BYTE *)this + 176))
      btAlignedFreeInternal(v26);
    goto LABEL_24;
  }
LABEL_26:
  *((_DWORD *)this + 39) = v22;
  if (a6 >= 1)
  {
    v30 = a6;
    v31 = (unsigned int *)(*((_QWORD *)this + 21) + 8);
    v32 = a5 + 2;
    do
    {
      *(v31 - 2) = *(v32 - 2);
      *(v31 - 1) = *(v32 - 1);
      v33 = *v32;
      v32 += 3;
      *v31 = v33;
      v31 += 3;
      --v30;
    }
    while (v30);
  }
  btPolyhedralConvexAabbCachingShape::recalcLocalAabb(this);
}

uint64_t btConvexHullShape::setLocalScaling(btVector3 *this, const btVector3 *a2)
{
  this[2] = *a2;
  return btPolyhedralConvexAabbCachingShape::recalcLocalAabb((btPolyhedralConvexAabbCachingShape *)this);
}

float32x4_t btConvexHullShape::localGetSupportingVertexWithoutMargin@<Q0>(btConvexHullShape *this@<X0>, float32x4_t *a2@<X1>, float32x4_t *a3@<X8>, float32x4_t result@<Q0>)
{
  unint64_t v5;
  float32x4_t v7;
  float32x4_t v8;
  const float *v9;
  uint64_t v10;
  int v11;
  float v12;
  int8x16_t v13;
  float v14;
  float32x4_t v15;
  float v16;

  v16 = -1.0e18;
  v5 = *((unsigned int *)this + 31);
  if ((int)v5 < 1)
  {
    a3->i64[0] = 0;
    a3->i64[1] = 0;
  }
  else
  {
    v7 = *((float32x4_t *)this + 2);
    v8 = vmulq_f32(*a2, v7);
    v15 = v8;
    v9 = (const float *)*((_QWORD *)this + 17);
    if (v5 > 3)
    {
      v11 = _maxdot_large(v9, v15.f32, v5, &v16);
      v9 = (const float *)*((_QWORD *)this + 17);
      v7 = *((float32x4_t *)this + 2);
    }
    else
    {
      v10 = 0;
      v11 = -1;
      v12 = -3.4028e38;
      do
      {
        v13 = (int8x16_t)vmulq_f32(v8, *(float32x4_t *)&v9[4 * v10]);
        v14 = vadd_f32(vpadd_f32(*(float32x2_t *)v13.i8, *(float32x2_t *)v13.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL)).f32[0];
        if (v14 > v12)
        {
          v12 = v14;
          v11 = v10;
        }
        ++v10;
      }
      while (v5 != v10);
    }
    result = vmulq_f32(*(float32x4_t *)&v9[4 * v11], v7);
    *a3 = result;
  }
  return result;
}

const float *btConvexHullShape::batchedUnitVectorGetSupportingVertexWithoutMargin(const float *this, const btVector3 *a2, btVector3 *a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  const float *v8;
  float *v9;
  uint64_t v10;
  uint64_t v11;
  float *v12;
  uint64_t v13;
  float32x4_t v14;
  float32x4_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  float v19;
  int8x16_t v20;
  float v21;
  float32x4_t v22;
  btVector3 *v23;
  float32x4_t v24;
  float v25;
  uint64_t v26;
  uint64_t v27;

  if (a4 >= 1)
  {
    v26 = v4;
    v27 = v5;
    v8 = this;
    v9 = &a3->var0.var0[3];
    v10 = a4;
    v11 = a4;
    v12 = &a3->var0.var0[3];
    do
    {
      *v12 = -1.0e18;
      v12 += 4;
      --v11;
    }
    while (v11);
    v13 = 0;
    v25 = 0.0;
    do
    {
      v14 = *(float32x4_t *)(v8 + 8);
      v15 = vmulq_f32((float32x4_t)a2[v13], v14);
      v24 = v15;
      v16 = *((unsigned int *)v8 + 31);
      if ((int)v16 < 1)
      {
        v9[4 * v13] = -1.0e18;
      }
      else
      {
        this = (const float *)*((_QWORD *)v8 + 17);
        if (v16 > 3)
        {
          v18 = _maxdot_large(this, v24.f32, v16, &v25);
          this = (const float *)*((_QWORD *)v8 + 17);
          v14 = *(float32x4_t *)(v8 + 8);
          v19 = v25;
        }
        else
        {
          v17 = 0;
          v18 = -1;
          v19 = -3.4028e38;
          do
          {
            v20 = (int8x16_t)vmulq_f32(v15, *(float32x4_t *)&this[4 * v17]);
            v21 = vadd_f32(vpadd_f32(*(float32x2_t *)v20.i8, *(float32x2_t *)v20.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL)).f32[0];
            if (v21 > v19)
            {
              v19 = v21;
              v18 = v17;
            }
            ++v17;
          }
          while (v16 != v17);
          v25 = v19;
        }
        v22 = vmulq_f32(*(float32x4_t *)&this[4 * v18], v14);
        v23 = &a3[v13];
        *v23 = (btVector3)v22;
        v23->var0.var0[3] = v19;
      }
      ++v13;
    }
    while (v13 != v10);
  }
  return this;
}

float32x4_t btConvexHullShape::localGetSupportingVertex@<Q0>(btConvexHullShape *this@<X0>, float32x4_t *a2@<X1>, float32x4_t *a3@<X8>)
{
  float32x4_t result;
  float32x4_t v7;
  int8x16_t v8;
  float32x4_t v9;
  float32x4_t v10;
  int8x16_t v11;
  float32x4_t v12;

  (*(void (**)(float32x4_t *__return_ptr))(*(_QWORD *)this + 136))(a3);
  result.f32[0] = (*(float (**)(btConvexHullShape *))(*(_QWORD *)this + 96))(this);
  if (result.f32[0] != 0.0)
  {
    v8 = (int8x16_t)vmulq_f32(*a2, *a2);
    *(float32x2_t *)v7.f32 = vpadd_f32(*(float32x2_t *)v8.i8, *(float32x2_t *)v8.i8);
    v9 = (float32x4_t)vextq_s8(v8, v8, 8uLL);
    *(float32x2_t *)v9.f32 = vadd_f32(*(float32x2_t *)v7.f32, *(float32x2_t *)v9.f32);
    v7.i32[0] = 679477248;
    v10 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v7, v9), 0), (int8x16_t)xmmword_1DD02A730, *(int8x16_t *)a2);
    v11 = (int8x16_t)vmulq_f32(v10, v10);
    v12 = vmulq_n_f32(vmulq_n_f32(v10, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v11.i8, *(float32x2_t *)v11.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL)).f32[0])), (*(float (**)(btConvexHullShape *))(*(_QWORD *)this + 96))(this));
    v12.i32[3] = 0;
    result = vaddq_f32(*a3, v12);
    *a3 = result;
  }
  return result;
}

uint64_t btConvexHullShape::getNumVertices(btConvexHullShape *this)
{
  return *((unsigned int *)this + 31);
}

uint64_t btConvexHullShape::getNumEdges(btConvexHullShape *this)
{
  return *((unsigned int *)this + 31);
}

float32x4_t btConvexHullShape::getEdge(float32x4_t *this, int a2, float32x4_t *a3, btVector3 *a4)
{
  __int32 v4;
  float32x4_t result;

  v4 = this[7].i32[3];
  *a3 = vmulq_f32(*(float32x4_t *)(this[8].i64[1] + 16 * (a2 % v4)), this[2]);
  result = vmulq_f32(*(float32x4_t *)(this[8].i64[1] + 16 * ((a2 + 1) % v4)), this[2]);
  *a4 = (btVector3)result;
  return result;
}

float32x4_t btConvexHullShape::getVertex(float32x4_t *this, int a2, btVector3 *a3)
{
  float32x4_t result;

  result = vmulq_f32(*(float32x4_t *)(this[8].i64[1] + 16 * a2), this[2]);
  *a3 = (btVector3)result;
  return result;
}

uint64_t btConvexHullShape::getNumPlanes(btConvexHullShape *this)
{
  return 0;
}

uint64_t btConvexHullShape::isInside(btConvexHullShape *this, const btVector3 *a2, float a3)
{
  return 0;
}

const char *btConvexHullShape::serialize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  uint64_t j;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t k;

  btCollisionShape::serialize(a1, a2, a3);
  for (i = 0; i != 16; i += 4)
    *(_DWORD *)(a2 + 32 + i) = *(_DWORD *)(a1 + 48 + i);
  for (j = 0; j != 16; j += 4)
    *(_DWORD *)(a2 + 16 + j) = *(_DWORD *)(a1 + 32 + j);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 64);
  v8 = *(unsigned int *)(a1 + 124);
  *(_DWORD *)(a2 + 72) = v8;
  if ((_DWORD)v8)
  {
    *(_QWORD *)(a2 + 56) = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 56))(a3, *(_QWORD *)(a1 + 136));
    *(_QWORD *)(a2 + 64) = 0;
    v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 16, v8);
    v10 = *(_QWORD *)(a1 + 136);
    if ((int)v8 >= 1)
    {
      v11 = 0;
      v12 = *(_QWORD *)(v9 + 8);
      v13 = *(_QWORD *)(a1 + 136);
      do
      {
        for (k = 0; k != 16; k += 4)
          *(_DWORD *)(v12 + k) = *(_DWORD *)(v13 + k);
        ++v11;
        v12 += 16;
        v13 += 16;
      }
      while (v11 != v8);
    }
    (*(void (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(_QWORD *)a3 + 40))(a3, v9, "btVector3FloatData", 1497453121, v10);
  }
  else
  {
    *(_QWORD *)(a2 + 56) = 0;
    *(_QWORD *)(a2 + 64) = 0;
  }
  return "btConvexHullShapeData";
}

__n128 btConvexHullShape::project(float32x4_t *this, const btTransform *a2, float32x4_t *a3, float *a4, float *a5, __n128 *a6, __n128 *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 result;
  float32x4_t v11;
  float32x4_t v12;
  int8x16_t v13;
  int8x16_t v14;
  float32x4_t v15;
  int8x16_t v16;
  float v17;
  int v18;

  *a4 = 3.4028e38;
  *a5 = -3.4028e38;
  v7 = this[7].u32[3];
  if ((int)v7 < 1)
  {
    result.n128_u32[0] = -8388609;
  }
  else
  {
    v8 = 0;
    v9 = 16 * v7;
    result.n128_u32[1] = 0;
    do
    {
      v11 = vmulq_f32(*(float32x4_t *)(this[8].i64[1] + v8), this[2]);
      v12 = vmulq_f32((float32x4_t)a2->var0.var0[0], v11);
      v13 = (int8x16_t)vmulq_f32(v11, (float32x4_t)a2->var0.var0[1]);
      v14 = (int8x16_t)vmulq_f32(v11, (float32x4_t)a2->var0.var0[2]);
      v14.i32[3] = 0;
      *(float32x2_t *)v12.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v12.f32, *(float32x2_t *)v13.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL)));
      *(float32x2_t *)&v12.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v14.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)), 0);
      v15 = vaddq_f32(v12, (float32x4_t)a2->var1);
      v16 = (int8x16_t)vmulq_f32(v15, *a3);
      v17 = vadd_f32(vpadd_f32(*(float32x2_t *)v16.i8, *(float32x2_t *)v16.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL)).f32[0];
      if (v17 < *a4)
      {
        *a4 = v17;
        *a6 = (__n128)v15;
      }
      if (v17 > *a5)
      {
        *a5 = v17;
        *a7 = (__n128)v15;
      }
      v8 += 16;
    }
    while (v9 != v8);
    result.n128_f32[0] = *a5;
  }
  v18 = *(_DWORD *)a4;
  if (*a4 > result.n128_f32[0])
  {
    *a4 = result.n128_f32[0];
    *(_DWORD *)a5 = v18;
    result = *a6;
    *a6 = *a7;
    *a7 = result;
  }
  return result;
}

void btConvexHullShape::~btConvexHullShape(btConvexHullShape *this)
{
  char *v2;

  *(_QWORD *)this = off_1EA596708;
  v2 = (char *)this + 120;
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)this + 152);
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)v2);
  btPolyhedralConvexShape::~btPolyhedralConvexShape(this);
}

{
  char *v2;
  void **v3;

  *(_QWORD *)this = off_1EA596708;
  v2 = (char *)this + 120;
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)this + 152);
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)v2);
  btPolyhedralConvexShape::~btPolyhedralConvexShape(this);
  btAlignedFreeInternal(v3);
}

const char *btConvexHullShape::getName(btConvexHullShape *this)
{
  return "Convex";
}

uint64_t btConvexHullShape::calculateSerializeBufferSize(btConvexHullShape *this)
{
  return 80;
}

void btConvexInternalShape::btConvexInternalShape(btConvexInternalShape *this)
{
  uint64_t v1;

  btConvexShape::btConvexShape(this);
  *(_QWORD *)v1 = off_1EA597050;
  *(_OWORD *)(v1 + 32) = xmmword_1DD008470;
  *(_DWORD *)(v1 + 64) = 1025758986;
}

float32x4_t btConvexInternalShape::setLocalScaling(float32x4_t *this, float32x4_t *a2)
{
  float32x4_t result;

  result = vabsq_f32(*a2);
  this[2] = result;
  return result;
}

_QWORD *btConvexInternalShape::getAabbSlow(btConvexInternalShape *this, const btTransform *a2, btVector3 *a3, btVector3 *a4)
{
  float v8;
  uint64_t i;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  int8x16_t v14;
  int8x16_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  _QWORD *result;
  float32x4_t v20;
  int8x16_t v21;
  int8x16_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;

  v8 = (*(float (**)(btConvexInternalShape *))(*(_QWORD *)this + 96))(this);
  for (i = 0; i != 3; ++i)
  {
    v27 = 0uLL;
    v27.i32[i] = 1065353216;
    v10 = (float32x4_t)a2->var0.var0[0];
    v11 = (float32x4_t)a2->var0.var0[1];
    v10.i32[3] = 0;
    v11.i32[3] = 0;
    v12 = (float32x4_t)a2->var0.var0[2];
    v12.i32[3] = 0;
    v25 = vaddq_f32(vaddq_f32(vmulq_n_f32(v10, v27.f32[0]), vmulq_lane_f32(v11, *(float32x2_t *)v27.f32, 1)), vmulq_laneq_f32(v12, v27, 2));
    (*(void (**)(float32x4_t *__return_ptr, btConvexInternalShape *, float32x4_t *))(*(_QWORD *)this + 128))(&v26, this, &v25);
    v13 = vmulq_f32((float32x4_t)a2->var0.var0[0], v26);
    v14 = (int8x16_t)vmulq_f32(v26, (float32x4_t)a2->var0.var0[1]);
    v15 = (int8x16_t)vmulq_f32(v26, (float32x4_t)a2->var0.var0[2]);
    v15.i32[3] = 0;
    *(float32x2_t *)v13.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v13.f32, *(float32x2_t *)v14.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)));
    *(float32x2_t *)&v13.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v15.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL)), 0);
    v25 = vaddq_f32(v13, (float32x4_t)a2->var1);
    a4->var0.var0[i] = v8 + v25.f32[i];
    v27.i32[i] = -1082130432;
    v16 = (float32x4_t)a2->var0.var0[0];
    v17 = (float32x4_t)a2->var0.var0[1];
    v16.i32[3] = 0;
    v17.i32[3] = 0;
    v18 = (float32x4_t)a2->var0.var0[2];
    v18.i32[3] = 0;
    v23 = vaddq_f32(vaddq_f32(vmulq_n_f32(v16, v27.f32[0]), vmulq_lane_f32(v17, *(float32x2_t *)v27.f32, 1)), vmulq_laneq_f32(v18, v27, 2));
    result = (*(_QWORD *(**)(float32x4_t *__return_ptr, btConvexInternalShape *, float32x4_t *))(*(_QWORD *)this + 128))(&v24, this, &v23);
    v20 = vmulq_f32((float32x4_t)a2->var0.var0[0], v24);
    v21 = (int8x16_t)vmulq_f32(v24, (float32x4_t)a2->var0.var0[1]);
    v22 = (int8x16_t)vmulq_f32(v24, (float32x4_t)a2->var0.var0[2]);
    v22.i32[3] = 0;
    *(float32x2_t *)v20.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v21.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL)));
    *(float32x2_t *)&v20.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v22.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL)), 0);
    v25 = vaddq_f32(v20, (float32x4_t)a2->var1);
    a3->var0.var0[i] = v25.f32[i] - v8;
  }
  return result;
}

float32x4_t btConvexInternalShape::localGetSupportingVertex@<Q0>(btConvexInternalShape *this@<X0>, float32x4_t *a2@<X1>, float32x4_t *a3@<X8>)
{
  float32x4_t result;
  float32x4_t v7;
  int8x16_t v8;
  float32x4_t v9;
  float32x4_t v10;
  int8x16_t v11;
  float32x4_t v12;

  (*(void (**)(float32x4_t *__return_ptr))(*(_QWORD *)this + 136))(a3);
  result.f32[0] = (*(float (**)(btConvexInternalShape *))(*(_QWORD *)this + 96))(this);
  if (result.f32[0] != 0.0)
  {
    v8 = (int8x16_t)vmulq_f32(*a2, *a2);
    *(float32x2_t *)v7.f32 = vpadd_f32(*(float32x2_t *)v8.i8, *(float32x2_t *)v8.i8);
    v9 = (float32x4_t)vextq_s8(v8, v8, 8uLL);
    *(float32x2_t *)v9.f32 = vadd_f32(*(float32x2_t *)v7.f32, *(float32x2_t *)v9.f32);
    v7.i32[0] = 679477248;
    v10 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v7, v9), 0), (int8x16_t)xmmword_1DD02A730, *(int8x16_t *)a2);
    v11 = (int8x16_t)vmulq_f32(v10, v10);
    v12 = vmulq_n_f32(vmulq_n_f32(v10, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v11.i8, *(float32x2_t *)v11.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL)).f32[0])), (*(float (**)(btConvexInternalShape *))(*(_QWORD *)this + 96))(this));
    v12.i32[3] = 0;
    result = vaddq_f32(*a3, v12);
    *a3 = result;
  }
  return result;
}

void btConvexInternalAabbCachingShape::btConvexInternalAabbCachingShape(btConvexInternalAabbCachingShape *this)
{
  uint64_t v1;

  btConvexShape::btConvexShape(this);
  *(_OWORD *)(v1 + 32) = xmmword_1DD008470;
  *(_DWORD *)(v1 + 64) = 1025758986;
  *(_QWORD *)v1 = off_1EA5980E0;
  *(_OWORD *)(v1 + 80) = xmmword_1DD008470;
  *(_OWORD *)(v1 + 96) = xmmword_1DD02A730;
  *(_BYTE *)(v1 + 112) = 0;
}

float32x4_t btConvexInternalAabbCachingShape::getAabb(float32x4_t *this, const btTransform *a2, btVector3 *a3, btVector3 *a4)
{
  int32x2_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  int8x16_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int8x16_t v21;
  float32x4_t v22;
  float32x4_t v23;
  int8x16_t v24;
  int8x16_t v25;
  btVector3 v26;
  float32x4_t result;

  *(double *)&v8 = (*(double (**)(float32x4_t *))(this->i64[0] + 96))(this);
  v10 = this[5];
  v9 = this[6];
  v11 = (float32x4_t)a2->var0.var0[1];
  v12 = (float32x4_t)a2->var0.var0[2];
  v13 = (float32x4_t)vandq_s8((int8x16_t)v12, (int8x16_t)xmmword_1DD02C930);
  v14.i64[0] = 0x3F0000003F000000;
  v14.i64[1] = 0x3F0000003F000000;
  v15 = vmulq_f32(vaddq_f32(v9, v10), v14);
  v16 = (int8x16_t)vmulq_f32(v12, v15);
  v15.i32[3] = 0;
  v17 = vmulq_f32(vsubq_f32(v9, v10), v14);
  v17.i32[3] = 0;
  v18 = (float32x4_t)vdupq_lane_s32(v8, 0);
  v18.i32[3] = 0;
  v19 = vaddq_f32(v18, v17);
  v20 = vmulq_f32((float32x4_t)a2->var0.var0[0], v15);
  v21 = (int8x16_t)vmulq_f32(v11, v15);
  v16.i32[3] = 0;
  *(float32x2_t *)v20.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v21.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL)));
  *(float32x2_t *)&v20.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v16.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL)), 0);
  v22 = vaddq_f32((float32x4_t)a2->var1, v20);
  v23 = vmulq_f32(v19, (float32x4_t)vandq_s8((int8x16_t)a2->var0.var0[0], (int8x16_t)xmmword_1DD02C930));
  v24 = (int8x16_t)vmulq_f32(v19, (float32x4_t)vandq_s8((int8x16_t)v11, (int8x16_t)xmmword_1DD02C930));
  v25 = (int8x16_t)vmulq_f32(v19, v13);
  v25.i32[3] = 0;
  *(float32x2_t *)v23.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v24.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL)));
  *(float32x2_t *)&v23.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v25.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL)), 0);
  v26 = (btVector3)vsubq_f32(v22, v23);
  v26.var0.var0[3] = 0.0;
  *a3 = v26;
  result = vaddq_f32(v22, v23);
  *a4 = (btVector3)result;
  return result;
}

uint64_t btConvexInternalAabbCachingShape::setLocalScaling(float32x4_t *this, float32x4_t *a2)
{
  this[2] = vabsq_f32(*a2);
  return btConvexInternalAabbCachingShape::recalcLocalAabb((btConvexInternalAabbCachingShape *)this);
}

uint64_t btConvexInternalAabbCachingShape::recalcLocalAabb(btConvexInternalAabbCachingShape *this)
{
  unsigned __int8 v2;
  float *v3;
  uint64_t result;
  float v5;
  float *v6;
  uint64_t v7;
  _OWORD v8[6];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *((_BYTE *)this + 112) = 1;
  if ((v2 & 1) == 0
  {
    btConvexInternalAabbCachingShape::recalcLocalAabb(void)::_directions = 1065353216;
    unk_1F03C65FC = 0;
    unk_1F03C65F4 = 0;
    dword_1F03C6604 = 1065353216;
    qword_1F03C6608 = 0;
    unk_1F03C6610 = 0;
    qword_1F03C6618 = 1065353216;
    dword_1F03C6620 = -1082130432;
    unk_1F03C662C = 0;
    unk_1F03C6624 = 0;
    dword_1F03C6634 = -1082130432;
    qword_1F03C6638 = 0;
    unk_1F03C6640 = 0;
    qword_1F03C6648 = 3212836864;
  }
  memset(v8, 0, sizeof(v8));
  v3 = (float *)v8;
  result = (*(uint64_t (**)(btConvexInternalAabbCachingShape *, int *, _OWORD *, uint64_t))(*(_QWORD *)this + 152))(this, &btConvexInternalAabbCachingShape::recalcLocalAabb(void)::_directions, v8, 6);
  v5 = *((float *)this + 16);
  v6 = (float *)((char *)this + 96);
  v7 = -48;
  do
  {
    *v6 = *v3 + v5;
    *(v6 - 4) = v3[12] - v5;
    ++v6;
    v3 += 5;
    v7 += 16;
  }
  while (v7);
  return result;
}

void btConvexPolyhedron::btConvexPolyhedron(btConvexPolyhedron *this)
{
  *(_QWORD *)this = off_1EA5969E0;
  *((_BYTE *)this + 32) = 1;
  *((_QWORD *)this + 3) = 0;
  *(_QWORD *)((char *)this + 12) = 0;
  *((_BYTE *)this + 64) = 1;
  *((_QWORD *)this + 7) = 0;
  *(_QWORD *)((char *)this + 44) = 0;
  *((_BYTE *)this + 96) = 1;
  *((_QWORD *)this + 11) = 0;
  *(_QWORD *)((char *)this + 76) = 0;
}

void btConvexPolyhedron::~btConvexPolyhedron(btConvexPolyhedron *this)
{
  char *v2;

  *(_QWORD *)this = off_1EA5969E0;
  v2 = (char *)this + 8;
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)this + 72);
  btAlignedObjectArray<btFace>::~btAlignedObjectArray((uint64_t)this + 40);
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)v2);
}

{
  void **v1;

  btConvexPolyhedron::~btConvexPolyhedron(this);
  btAlignedFreeInternal(v1);
}

BOOL btConvexPolyhedron::testContainment(float32x4_t *this, float32x4_t a2)
{
  BOOL v2;
  unsigned int v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float32x4_t v9;
  float *v10;
  uint64_t v11;
  float32x4_t v12;
  int8x16_t v13;

  v2 = 0;
  v3 = 0;
  while (1)
  {
    switch(v3)
    {
      case 0u:
        v4 = this[8].f32[0];
        v5 = this[8].f32[1];
        goto LABEL_11;
      case 1u:
        v5 = this[8].f32[1];
        v6 = -this[8].f32[2];
        v4 = this[8].f32[0];
        goto LABEL_15;
      case 2u:
        v4 = this[8].f32[0];
        v7 = this[8].f32[1];
        goto LABEL_10;
      case 3u:
        v4 = this[8].f32[0];
        v8 = this[8].f32[1];
        goto LABEL_13;
      case 4u:
        v5 = this[8].f32[1];
        v4 = -this[8].f32[0];
        goto LABEL_11;
      case 5u:
        v5 = this[8].f32[1];
        v4 = -this[8].f32[0];
        goto LABEL_14;
      case 6u:
        v7 = this[8].f32[1];
        v4 = -this[8].f32[0];
LABEL_10:
        v5 = -v7;
LABEL_11:
        v6 = this[8].f32[2];
        goto LABEL_15;
      case 7u:
        v8 = this[8].f32[1];
        v4 = -this[8].f32[0];
LABEL_13:
        v5 = -v8;
LABEL_14:
        v6 = -this[8].f32[2];
LABEL_15:
        v9.i64[0] = __PAIR64__(LODWORD(v5), LODWORD(v4));
        v9.i64[1] = LODWORD(v6);
        a2 = vaddq_f32(this[7], v9);
        break;
      default:
        break;
    }
    if (this[2].i32[3] >= 1)
      break;
LABEL_20:
    v2 = v3++ > 6;
    if (v3 == 8)
      return 1;
  }
  v10 = (float *)(this[3].i64[1] + 44);
  v11 = this[2].u32[3];
  while (1)
  {
    v12.i64[0] = *(_QWORD *)(v10 - 3);
    v12.i64[1] = *((unsigned int *)v10 - 1);
    v13 = (int8x16_t)vmulq_f32(a2, v12);
    if ((float)(*v10
               + vadd_f32(vpadd_f32(*(float32x2_t *)v13.i8, *(float32x2_t *)v13.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL)).f32[0]) > 0.0)return v2;
    v10 += 12;
    if (!--v11)
      goto LABEL_20;
  }
}

void btConvexPolyhedron::initialize(float32x4_t *this)
{
  float32x4_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int Index;
  char *v13;
  float32x4_t v14;
  int8x16_t v15;
  float32x4_t v16;
  int v17;
  float32x4_t *v18;
  uint64_t v19;
  float32x4_t v20;
  float32x4_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  float32x4_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  _QWORD *v36;
  float32x4_t v37;
  uint64_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  int8x8_t v42;
  float32x4_t v43;
  float32x4_t v44;
  int8x8_t v45;
  float32x4_t v46;
  float32x4_t v47;
  int8x16_t v48;
  int8x16_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float *v52;
  float v53;
  float32x4_t v54;
  int8x16_t v55;
  float v56;
  uint64_t v57;
  float32x2_t v58;
  float32x2_t v59;
  float *v60;
  float v61;
  float v62;
  int8x8_t v63;
  float v64;
  float v65;
  float32x2_t v66;
  float32x2_t v67;
  __int32 v68;
  float v69;
  float v70;
  unsigned int v71;
  uint64_t v72;
  float v73;
  float32x4_t *v74;
  float v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float32x4_t v84;
  int v85;
  BOOL v86;
  BOOL v87;
  float32x4_t v88;
  int v89;
  __int16 v90;
  __int16 v91;
  _BYTE v92[4];
  uint64_t v93;
  void *v94;
  char v95;
  uint64_t v96;
  void *v97;
  char v98;
  uint64_t v99;
  void *v100;
  char v101;
  uint64_t v102;
  void *v103;
  char v104;

  v95 = 1;
  v94 = 0;
  v93 = 0;
  v98 = 1;
  v97 = 0;
  v96 = 0;
  v101 = 1;
  v100 = 0;
  v99 = 0;
  v104 = 1;
  v103 = 0;
  v102 = 0;
  this[7].i64[0] = 0;
  this[7].i64[1] = 0;
  v2 = this + 7;
  LODWORD(v3) = this[2].i32[3];
  if ((int)v3 < 1)
    goto LABEL_54;
  v4 = 0;
  do
  {
    v5 = *(unsigned int *)(this[3].i64[1] + 48 * v4 + 4);
    if ((int)v5 >= 1)
    {
      v6 = 0;
      do
      {
        v7 = v6 + 1;
        v8 = (v6 + 1);
        v9 = *(_QWORD *)(this[3].i64[1] + 48 * v4 + 16);
        v10 = *(_DWORD *)(v9 + 4 * v6);
        if (v7 == v5)
          v8 = 0;
        v11 = *(_DWORD *)(v9 + 4 * v8);
        v90 = v10;
        v91 = v11;
        if ((__int16)v11 > (__int16)v10)
        {
          v90 = v11;
          v91 = v10;
        }
        Index = btHashMap<btInternalVertexPair,btInternalEdge>::findIndex((uint64_t)v92, &v90);
        if (Index == -1)
          v13 = 0;
        else
          v13 = (char *)v100 + 4 * Index;
        v14 = vsubq_f32(*(float32x4_t *)(this[1].i64[1] + 16 * v91), *(float32x4_t *)(this[1].i64[1] + 16 * v90));
        v14.i32[3] = 0;
        v15 = (int8x16_t)vmulq_f32(v14, v14);
        v16 = vmulq_n_f32(v14, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v15.i8, *(float32x2_t *)v15.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL)).f32[0]));
        v17 = this[4].i32[3];
        if (v17 < 1)
        {
LABEL_21:
          if (v17 == this[5].i32[0])
          {
            v22 = v17 ? 2 * v17 : 1;
            if (v17 < v22)
            {
              v88 = v16;
              if (v22)
              {
                v23 = btAlignedAllocInternal(16 * v22, 16);
                v16 = v88;
                v24 = v23;
                v17 = this[4].i32[3];
              }
              else
              {
                v24 = 0;
              }
              if (v17 >= 1)
              {
                v25 = 0;
                v26 = 16 * v17;
                do
                {
                  *(_OWORD *)(v24 + v25) = *(_OWORD *)(this[5].i64[1] + v25);
                  v25 += 16;
                }
                while (v26 != v25);
              }
              v27 = (void **)this[5].i64[1];
              if (v27 && this[6].i8[0])
              {
                btAlignedFreeInternal(v27);
                v16 = v88;
              }
              this[6].i8[0] = 1;
              this[5].i64[1] = v24;
              this[5].i32[0] = v22;
              v17 = this[4].i32[3];
            }
          }
          *(float32x4_t *)(this[5].i64[1] + 16 * v17) = v16;
          ++this[4].i32[3];
        }
        else
        {
          v18 = (float32x4_t *)this[5].i64[1];
          v19 = this[4].u32[3];
          while (1)
          {
            v20 = vsubq_f32(*v18, v16);
            if (fabsf(v20.f32[0]) <= 0.000001 && fabsf(v20.f32[1]) <= 0.000001 && fabsf(v20.f32[2]) <= 0.000001)
              break;
            v21 = vaddq_f32(v16, *v18);
            if (fabsf(v21.f32[0]) <= 0.000001 && fabsf(v21.f32[1]) <= 0.000001 && fabsf(v21.f32[2]) <= 0.000001)
              break;
            ++v18;
            if (!--v19)
              goto LABEL_21;
          }
        }
        if (v13)
        {
          *((_WORD *)v13 + 1) = v4;
        }
        else
        {
          HIWORD(v89) = -1;
          LOWORD(v89) = v4;
          btHashMap<btInternalVertexPair,btInternalEdge>::insert((uint64_t)v92, &v90, &v89);
        }
        v6 = v7;
      }
      while (v7 != v5);
      LODWORD(v3) = this[2].i32[3];
    }
    ++v4;
  }
  while (v4 < (int)v3);
  if ((int)v3 < 1)
  {
LABEL_54:
    v51 = vmulq_f32(this[7], (float32x4_t)vdupq_n_s32(0x7F800000u));
    this[7] = v51;
    this[9].i32[0] = 2139095039;
    v53 = 3.4028e38;
  }
  else
  {
    v28 = 0;
    v29 = this[3].i64[1];
    v30 = this[1].i64[1];
    v3 = v3;
    v31 = 0.0;
    v32 = (float32x4_t)vdupq_n_s32(0x3EAAAAABu);
    do
    {
      v33 = v29 + 48 * v28;
      v34 = *(_DWORD *)(v33 + 4);
      if (v34 >= 3)
      {
        v35 = **(int **)(v33 + 16);
        v36 = (_QWORD *)(v29 + 48 * v28 + 16);
        v37 = *v2;
        v38 = 1;
        do
        {
          v39 = *(float32x4_t *)(v30 + 16 * v35);
          v40 = *(float32x4_t *)(v30 + 16 * *(int *)(*v36 + 4 * v38));
          v41 = vsubq_f32(v39, v40);
          v42 = (int8x8_t)vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL).u64[0];
          v41.i32[3] = 0;
          v43 = *(float32x4_t *)(v30 + 16 * *(int *)(*v36 + 4 * (((int)v38 + 1) % v34)));
          v44 = vsubq_f32(v39, v43);
          v45 = (int8x8_t)vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL).u64[0];
          v44.i32[3] = 0;
          *(int8x8_t *)v46.f32 = vext_s8(*(int8x8_t *)v41.f32, v42, 4uLL);
          v46.i64[1] = v41.i64[0];
          *(int8x8_t *)v47.f32 = vext_s8(*(int8x8_t *)v44.f32, v45, 4uLL);
          v47.i64[1] = v44.i64[0];
          v48 = (int8x16_t)vsubq_f32(vmulq_f32(v47, v41), vmulq_f32(v46, v44));
          v46.i64[0] = vextq_s8(v48, v48, 4uLL).u64[0];
          v46.i64[1] = v48.u32[0];
          v49 = (int8x16_t)vmulq_f32(v46, v46);
          *(float *)v49.i32 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v49.i8, *(float32x2_t *)v49.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v49, v49, 8uLL)).f32[0])* 0.5;
          v50 = vmulq_n_f32(vmulq_f32(vaddq_f32(vaddq_f32(v39, v40), v43), v32), *(float *)v49.i32);
          v50.i32[3] = 0;
          v37 = vaddq_f32(v37, v50);
          *v2 = v37;
          v31 = v31 + *(float *)v49.i32;
          ++v38;
        }
        while (v34 - 1 != v38);
      }
      ++v28;
    }
    while (v28 != v3);
    v51 = vmulq_n_f32(this[7], 1.0 / v31);
    this[7] = v51;
    this[9].i32[0] = 2139095039;
    v52 = (float *)(this[3].i64[1] + 44);
    v53 = 3.4028e38;
    do
    {
      v54.i64[0] = *(_QWORD *)(v52 - 3);
      v54.i64[1] = *((unsigned int *)v52 - 1);
      v55 = (int8x16_t)vmulq_f32(v51, v54);
      v56 = fabsf(*v52+ vadd_f32(vpadd_f32(*(float32x2_t *)v55.i8, *(float32x2_t *)v55.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v55, v55, 8uLL)).f32[0]);
      if (v56 < v53)
      {
        this[9].f32[0] = v56;
        v53 = v56;
      }
      v52 += 12;
      --v3;
    }
    while (v3);
  }
  v57 = this->u32[3];
  if ((int)v57 < 1)
  {
    v58 = (float32x2_t)0xFF7FFFFF7F7FFFFFLL;
    v59 = (float32x2_t)0x7F7FFFFFFF7FFFFFLL;
    v62 = -3.4028e38;
    v61 = 3.4028e38;
  }
  else
  {
    v58 = (float32x2_t)0xFF7FFFFF7F7FFFFFLL;
    v59 = (float32x2_t)0x7F7FFFFFFF7FFFFFLL;
    v60 = (float *)(this[1].i64[1] + 8);
    v61 = 3.4028e38;
    v62 = -3.4028e38;
    do
    {
      v63 = *(int8x8_t *)(v60 - 2);
      v59 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)__PAIR64__(v59.u32[1], v63.u32[0]), (float32x2_t)__PAIR64__(v63.u32[1], v59.u32[0])), v63, (int8x8_t)v59);
      v58 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)__PAIR64__(v63.u32[1], v58.u32[0]), (float32x2_t)__PAIR64__(v58.u32[1], v63.u32[0])), v63, (int8x8_t)v58);
      v64 = *v60;
      v60 += 4;
      v65 = v64;
      if (v64 < v61)
        v61 = v65;
      if (v65 > v62)
        v62 = v65;
      --v57;
    }
    while (v57);
  }
  v66 = vadd_f32(v59, v58);
  v67 = (float32x2_t)__PAIR64__(v58.u32[1], v59.u32[0]);
  v68 = v59.i32[1];
  *(float32x2_t *)v51.f32 = vsub_f32(v67, v58);
  this[11].i64[0] = v51.i64[0];
  *(float32x2_t *)this[10].f32 = v66;
  this[10].f32[2] = v61 + v62;
  this[10].i32[3] = 0;
  v69 = v62 - v61;
  this[11].f32[2] = v69;
  this[11].i32[3] = 0;
  v70 = v53 / 1.7321;
  if (v51.f32[1] >= v69)
    v71 = 1;
  else
    v71 = 2;
  if (v51.f32[0] >= v51.f32[1])
    v72 = 2 * (v51.f32[0] < v69);
  else
    v72 = v71;
  v51.i32[0] = this[11].i32[v72];
  v73 = (float)-(float)(v70 - (float)(v51.f32[0] * 0.5)) * 0.00097656;
  this[8].f32[1] = v70;
  this[8].f32[2] = v70;
  this[8].f32[0] = v70;
  v74 = this + 8;
  v75 = v51.f32[0] * 0.5;
  this[8].f32[v72] = v51.f32[0] * 0.5;
  v76 = 1024;
  while (!btConvexPolyhedron::testContainment(this, v51))
  {
    v75 = v75 - v73;
    v74->f32[v72] = v75;
    if (!--v76)
    {
      this[8].f32[1] = v70;
      this[8].f32[2] = v70;
      this[8].f32[0] = v70;
      goto LABEL_79;
    }
  }
  v51.f32[0] = v53 - v70;
  v77 = 1 << v72;
  v78 = (1 << v72) & 3;
  v79 = (1 << (v77 & 3)) & 3;
  v80 = v74->f32[v79];
  v81 = v51.f32[0] * 0.00097656;
  v82 = v74->f32[v78];
  v74->f32[v78] = (float)(v51.f32[0] * 0.00097656) + v82;
  v51.i32[0] = v74->i32[v79];
  v83 = v81 + v51.f32[0];
  v74->f32[v79] = v81 + v51.f32[0];
  if (btConvexPolyhedron::testContainment(this, v51))
  {
    v85 = 1024;
    while (--v85)
    {
      v80 = v83;
      v82 = v74->f32[v78];
      v74->f32[v78] = v81 + v82;
      v84.i32[0] = v74->i32[v79];
      v83 = v81 + v84.f32[0];
      v74->f32[v79] = v81 + v84.f32[0];
      if (!btConvexPolyhedron::testContainment(this, v84))
        goto LABEL_78;
    }
  }
  else
  {
LABEL_78:
    v74->f32[v78] = v82;
    v74->f32[v79] = v80;
  }
LABEL_79:
  if (v103)
    v86 = v104 == 0;
  else
    v86 = 1;
  if (!v86)
    btAlignedFreeInternal((void **)v103);
  v104 = 1;
  v103 = 0;
  v102 = 0;
  if (v100)
    v87 = v101 == 0;
  else
    v87 = 1;
  if (!v87)
    btAlignedFreeInternal((void **)v100);
  v101 = 1;
  v100 = 0;
  v99 = 0;
  if (v97 && v98)
    btAlignedFreeInternal((void **)v97);
  v98 = 1;
  v97 = 0;
  v96 = 0;
  if (v94)
  {
    if (v95)
      btAlignedFreeInternal((void **)v94);
  }
}

void btHashMap<btInternalVertexPair,btInternalEdge>::insert(uint64_t a1, __int16 *a2, _DWORD *a3)
{
  int v6;
  int v7;
  int v8;
  int Index;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void **v26;
  uint64_t v27;

  v6 = *a2;
  v7 = a2[1];
  v8 = *(_DWORD *)(a1 + 72);
  Index = btHashMap<btInternalVertexPair,btInternalEdge>::findIndex(a1, a2);
  if (Index == -1)
  {
    v10 = v6 + (v7 << 16);
    v11 = v8 - 1;
    v12 = *(_DWORD *)(a1 + 68);
    v13 = *(_DWORD *)(a1 + 72);
    v14 = v12;
    if (v12 == v13)
    {
      v15 = v12 ? 2 * v12 : 1;
      v14 = *(_DWORD *)(a1 + 68);
      if (v12 < v15)
      {
        if (v15)
          v16 = btAlignedAllocInternal(4 * v15, 16);
        else
          v16 = 0;
        if (*(int *)(a1 + 68) >= 1)
        {
          v17 = 0;
          v18 = 4 * *(unsigned int *)(a1 + 68);
          do
          {
            *(_DWORD *)(v16 + v17) = *(_DWORD *)(*(_QWORD *)(a1 + 80) + v17);
            v17 += 4;
          }
          while (v18 != v17);
        }
        v19 = *(void ***)(a1 + 80);
        if (v19 && *(_BYTE *)(a1 + 88))
          btAlignedFreeInternal(v19);
        *(_BYTE *)(a1 + 88) = 1;
        *(_QWORD *)(a1 + 80) = v16;
        *(_DWORD *)(a1 + 72) = v15;
        v14 = *(_DWORD *)(a1 + 68);
      }
    }
    v20 = v10 & v11;
    *(_DWORD *)(*(_QWORD *)(a1 + 80) + 4 * v14) = *a3;
    ++*(_DWORD *)(a1 + 68);
    v21 = *(_DWORD *)(a1 + 100);
    if (v21 == *(_DWORD *)(a1 + 104))
    {
      v22 = v21 ? 2 * v21 : 1;
      if (v21 < v22)
      {
        if (v22)
        {
          v23 = btAlignedAllocInternal(4 * v22, 16);
          v21 = *(_DWORD *)(a1 + 100);
        }
        else
        {
          v23 = 0;
        }
        if (v21 >= 1)
        {
          v24 = 0;
          v25 = 4 * v21;
          do
          {
            *(_DWORD *)(v23 + v24) = *(_DWORD *)(*(_QWORD *)(a1 + 112) + v24);
            v24 += 4;
          }
          while (v25 != v24);
        }
        v26 = *(void ***)(a1 + 112);
        if (v26 && *(_BYTE *)(a1 + 120))
          btAlignedFreeInternal(v26);
        *(_BYTE *)(a1 + 120) = 1;
        *(_QWORD *)(a1 + 112) = v23;
        *(_DWORD *)(a1 + 104) = v22;
        v21 = *(_DWORD *)(a1 + 100);
      }
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 112) + 4 * v21) = *(_DWORD *)a2;
    ++*(_DWORD *)(a1 + 100);
    if (v13 < *(_DWORD *)(a1 + 72))
    {
      btHashMap<btInternalVertexPair,btInternalEdge>::growTables(a1);
      v20 = (*a2 + ((unsigned __int16)a2[1] << 16)) & (*(_DWORD *)(a1 + 72) - 1);
    }
    v27 = *(_QWORD *)(a1 + 16);
    *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4 * v12) = *(_DWORD *)(v27 + 4 * v20);
    *(_DWORD *)(v27 + 4 * v20) = v12;
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(a1 + 80) + 4 * Index) = *a3;
  }
}

__n128 btConvexPolyhedron::project(btConvexPolyhedron *this, const btTransform *a2, float32x4_t *a3, float *a4, float *a5, __n128 *a6, __n128 *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 result;
  float32x4_t v11;
  float32x4_t v12;
  int8x16_t v13;
  int8x16_t v14;
  float32x4_t v15;
  int8x16_t v16;
  float v17;
  int v18;

  *a4 = 3.4028e38;
  *a5 = -3.4028e38;
  v7 = *((unsigned int *)this + 3);
  if ((int)v7 < 1)
  {
    result.n128_u32[0] = -8388609;
  }
  else
  {
    v8 = 0;
    v9 = 16 * v7;
    result.n128_u32[1] = 0;
    do
    {
      v11 = *(float32x4_t *)(*((_QWORD *)this + 3) + v8);
      v12 = vmulq_f32((float32x4_t)a2->var0.var0[0], v11);
      v13 = (int8x16_t)vmulq_f32(v11, (float32x4_t)a2->var0.var0[1]);
      v14 = (int8x16_t)vmulq_f32(v11, (float32x4_t)a2->var0.var0[2]);
      v14.i32[3] = 0;
      *(float32x2_t *)v12.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v12.f32, *(float32x2_t *)v13.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL)));
      *(float32x2_t *)&v12.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v14.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)), 0);
      v15 = vaddq_f32(v12, (float32x4_t)a2->var1);
      v16 = (int8x16_t)vmulq_f32(v15, *a3);
      v17 = vadd_f32(vpadd_f32(*(float32x2_t *)v16.i8, *(float32x2_t *)v16.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL)).f32[0];
      if (v17 < *a4)
      {
        *a4 = v17;
        *a6 = (__n128)v15;
      }
      if (v17 > *a5)
      {
        *a5 = v17;
        *a7 = (__n128)v15;
      }
      v8 += 16;
    }
    while (v9 != v8);
    result.n128_f32[0] = *a5;
  }
  v18 = *(_DWORD *)a4;
  if (*a4 > result.n128_f32[0])
  {
    *a4 = result.n128_f32[0];
    *(_DWORD *)a5 = v18;
    result = *a6;
    *a6 = *a7;
    *a7 = result;
  }
  return result;
}

uint64_t btAlignedObjectArray<btFace>::~btAlignedObjectArray(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;

  v2 = *(unsigned int *)(a1 + 4);
  if ((int)v2 >= 1)
  {
    v3 = 0;
    v4 = 48 * v2;
    do
    {
      btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray(*(_QWORD *)(a1 + 16) + v3);
      v3 += 48;
    }
    while (v4 != v3);
  }
  v5 = *(void ***)(a1 + 16);
  if (v5 && *(_BYTE *)(a1 + 24))
    btAlignedFreeInternal(v5);
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  return a1;
}

uint64_t btHashMap<btInternalVertexPair,btInternalEdge>::findIndex(uint64_t a1, __int16 *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (unsigned __int16)a2[1];
  v3 = (*a2 + (v2 << 16)) & (*(_DWORD *)(a1 + 72) - 1);
  if (v3 >= *(_DWORD *)(a1 + 4))
    return 0xFFFFFFFFLL;
  v4 = *(unsigned int *)(*(_QWORD *)(a1 + 16) + 4 * v3);
  if ((_DWORD)v4 == -1)
    return 0xFFFFFFFFLL;
  v5 = *(_QWORD *)(a1 + 112);
  while (*a2 != *(_WORD *)(v5 + 4 * (int)v4) || v2 != *(unsigned __int16 *)(v5 + 4 * (int)v4 + 2))
  {
    v4 = *(unsigned int *)(*(_QWORD *)(a1 + 48) + 4 * (int)v4);
    if ((_DWORD)v4 == -1)
      return 0xFFFFFFFFLL;
  }
  return v4;
}

void btHashMap<btInternalVertexPair,btInternalEdge>::growTables(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  _DWORD *v7;
  int *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  _DWORD *v14;
  int *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int16 *v20;
  int v21;
  int v22;
  int v23;

  v1 = *(unsigned int *)(a1 + 72);
  v2 = *(unsigned int *)(a1 + 4);
  if ((int)v2 >= (int)v1)
    return;
  if (*(_DWORD *)(a1 + 8) < (int)v1)
  {
    if ((_DWORD)v1)
    {
      v4 = btAlignedAllocInternal(4 * (int)v1, 16);
      LODWORD(v5) = *(_DWORD *)(a1 + 4);
    }
    else
    {
      v4 = 0;
      LODWORD(v5) = *(_DWORD *)(a1 + 4);
    }
    v6 = *(void ***)(a1 + 16);
    if ((int)v5 < 1)
    {
      if (!v6)
      {
LABEL_14:
        *(_BYTE *)(a1 + 24) = 1;
        *(_QWORD *)(a1 + 16) = v4;
        *(_DWORD *)(a1 + 8) = v1;
        goto LABEL_15;
      }
    }
    else
    {
      v5 = v5;
      v7 = (_DWORD *)v4;
      v8 = *(int **)(a1 + 16);
      do
      {
        v9 = *v8++;
        *v7++ = v9;
        --v5;
      }
      while (v5);
    }
    if (*(_BYTE *)(a1 + 24))
      btAlignedFreeInternal(v6);
    *(_QWORD *)(a1 + 16) = 0;
    goto LABEL_14;
  }
LABEL_15:
  bzero((void *)(*(_QWORD *)(a1 + 16) + 4 * (int)v2), 4 * (v1 + ~(_DWORD)v2) + 4);
  *(_DWORD *)(a1 + 4) = v1;
  v10 = *(_DWORD *)(a1 + 36);
  if (v10 < (int)v1)
  {
    if (*(_DWORD *)(a1 + 40) >= (int)v1)
    {
LABEL_28:
      bzero((void *)(*(_QWORD *)(a1 + 48) + 4 * v10), 4 * (v1 + ~v10) + 4);
      goto LABEL_29;
    }
    if ((_DWORD)v1)
      v11 = btAlignedAllocInternal(4 * (int)v1, 16);
    else
      v11 = 0;
    LODWORD(v12) = *(_DWORD *)(a1 + 36);
    v13 = *(void ***)(a1 + 48);
    if ((int)v12 < 1)
    {
      if (!v13)
      {
LABEL_27:
        *(_BYTE *)(a1 + 56) = 1;
        *(_QWORD *)(a1 + 48) = v11;
        *(_DWORD *)(a1 + 40) = v1;
        goto LABEL_28;
      }
    }
    else
    {
      v12 = v12;
      v14 = (_DWORD *)v11;
      v15 = *(int **)(a1 + 48);
      do
      {
        v16 = *v15++;
        *v14++ = v16;
        --v12;
      }
      while (v12);
    }
    if (*(_BYTE *)(a1 + 56))
      btAlignedFreeInternal(v13);
    goto LABEL_27;
  }
LABEL_29:
  *(_DWORD *)(a1 + 36) = v1;
  if ((int)v1 >= 1)
  {
    memset(*(void **)(a1 + 16), 255, 4 * v1);
    memset(*(void **)(a1 + 48), 255, 4 * v1);
  }
  if ((int)v2 >= 1)
  {
    v17 = 0;
    v18 = *(_QWORD *)(a1 + 16);
    v19 = *(_QWORD *)(a1 + 48);
    v20 = (unsigned __int16 *)(*(_QWORD *)(a1 + 112) + 2);
    do
    {
      v21 = (__int16)*(v20 - 1);
      v22 = *v20;
      v20 += 2;
      v23 = (v21 + (v22 << 16)) & (*(_DWORD *)(a1 + 72) - 1);
      *(_DWORD *)(v19 + 4 * v17) = *(_DWORD *)(v18 + 4 * v23);
      *(_DWORD *)(v18 + 4 * v23) = v17++;
    }
    while (v2 != v17);
  }
}

void btConvexShape::btConvexShape(btConvexShape *this)
{
  *((_DWORD *)this + 2) = 35;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = off_1EA5955C8;
}

_QWORD *btConvexShape::project(btConvexShape *this, const btTransform *a2, float32x4_t *a3, float *a4, float *a5)
{
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  int8x16_t v14;
  int8x16_t v15;
  float32x4_t v16;
  _QWORD *result;
  float32x4_t v18;
  int8x16_t v19;
  int8x16_t v20;
  float32x4_t v21;
  int8x16_t v22;
  int8x16_t v23;
  float v24;
  int v25;
  float32x4_t v26;
  int8x16_t v27;
  float32x4_t v28;
  int8x16_t v29;

  v10 = (float32x4_t)a2->var0.var0[0];
  v11 = (float32x4_t)a2->var0.var0[1];
  v10.i32[3] = 0;
  v11.i32[3] = 0;
  v12 = (float32x4_t)a2->var0.var0[2];
  v12.i32[3] = 0;
  v29 = (int8x16_t)vaddq_f32(vaddq_f32(vmulq_n_f32(v10, COERCE_FLOAT(*a3)), vmulq_lane_f32(v11, *(float32x2_t *)a3->f32, 1)), vmulq_laneq_f32(v12, *a3, 2));
  (*(void (**)(float32x4_t *__return_ptr, btConvexShape *, int8x16_t *))(*(_QWORD *)this + 128))(&v28, this, &v29);
  v13 = vmulq_f32((float32x4_t)a2->var0.var0[0], v28);
  v14 = (int8x16_t)vmulq_f32(v28, (float32x4_t)a2->var0.var0[1]);
  v15 = (int8x16_t)vmulq_f32(v28, (float32x4_t)a2->var0.var0[2]);
  v15.i32[3] = 0;
  *(float32x2_t *)v13.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v13.f32, *(float32x2_t *)v14.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)));
  *(float32x2_t *)&v13.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v15.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL)), 0);
  v16 = vaddq_f32(v13, (float32x4_t)a2->var1);
  v13.i64[0] = 0x8000000080000000;
  v13.i64[1] = 0x8000000080000000;
  v26 = v16;
  v27 = veorq_s8(v29, (int8x16_t)v13);
  result = (*(_QWORD *(**)(float32x4_t *__return_ptr, btConvexShape *, int8x16_t *))(*(_QWORD *)this + 128))(&v28, this, &v27);
  v18 = vmulq_f32((float32x4_t)a2->var0.var0[0], v28);
  v19 = (int8x16_t)vmulq_f32(v28, (float32x4_t)a2->var0.var0[1]);
  v20 = (int8x16_t)vmulq_f32(v28, (float32x4_t)a2->var0.var0[2]);
  v20.i32[3] = 0;
  *(float32x2_t *)v18.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v18.f32, *(float32x2_t *)v19.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL)));
  *(float32x2_t *)&v18.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v20.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL)), 0);
  v21 = vaddq_f32(v18, (float32x4_t)a2->var1);
  v22 = (int8x16_t)vmulq_f32(v26, *a3);
  *(_DWORD *)a4 = vadd_f32(vpadd_f32(*(float32x2_t *)v22.i8, *(float32x2_t *)v22.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL)).u32[0];
  v23 = (int8x16_t)vmulq_f32(v21, *a3);
  v24 = vadd_f32(vpadd_f32(*(float32x2_t *)v23.i8, *(float32x2_t *)v23.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL)).f32[0];
  *a5 = v24;
  v25 = *(_DWORD *)a4;
  if (*a4 > v24)
  {
    *a4 = v24;
    *(_DWORD *)a5 = v25;
  }
  return result;
}

uint64_t btConvexShape::localGetSupportVertexWithoutMarginNonVirtual@<X0>(uint64_t this@<X0>, int8x16_t *a2@<X1>, float32x4_t *a3@<X8>, float32x4_t a4@<Q6>)
{
  int8x16_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  float32x2_t v11;
  float32x2_t v12;
  uint64_t v13;
  uint64_t v14;
  int8x16_t v15;
  float32x4_t *v16;
  int v17;
  float32x4_t v18;
  uint64_t v19;
  float v20;
  float v21;
  int8x16_t v22;
  float v23;
  float32x4_t v24;
  int v25;
  uint64_t v26;
  _BOOL8 v27;
  _BOOL8 v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  _BOOL8 v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  int8x16_t v43;
  float32x4_t v44;
  int8x16_t v45;
  float32x4_t v46;
  int8x16_t v47;
  float32x4_t v48;
  __int32 v49;
  uint64_t v50;
  __int32 v51;
  uint64_t v52;
  float v53;
  int v54;
  float32x4_t v55;

  switch(*(_DWORD *)(this + 8))
  {
    case 0:
      v4.i64[0] = 0x8000000080000000;
      v4.i64[1] = 0x8000000080000000;
      *(int8x16_t *)a3 = veorq_s8(vandq_s8(*a2, v4), *(int8x16_t *)(this + 48));
      return this;
    case 1:
      v5 = *(float32x4_t *)a2;
      v5.i32[2] = a2->i32[2];
      v6 = *(float32x4_t *)(this + 80);
      v7 = *(float32x4_t *)(this + 96);
      this += 80;
      v8 = (int8x16_t)vmulq_f32(v5, *(float32x4_t *)(this + 32));
      v5.i32[3] = 0;
      v9 = (int8x16_t)vmulq_f32(v6, v5);
      v10 = (int8x16_t)vmulq_f32(v5, v7);
      v8.i32[3] = 0;
      v11 = vadd_f32(vpadd_f32(*(float32x2_t *)v9.i8, *(float32x2_t *)v10.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL)));
      v12 = vpadd_f32(vpadd_f32(*(float32x2_t *)v8.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL)), 0);
      v13 = 2;
      if (v11.f32[1] >= v12.f32[0])
        v14 = 1;
      else
        v14 = 2;
      if ((vcgt_f32(v12, v11).u8[0] & 1) == 0)
        v13 = 0;
      if (v11.f32[0] < v11.f32[1])
        v13 = v14;
      v15 = *(int8x16_t *)(this + 16 * v13);
      goto LABEL_33;
    case 4:
      v16 = *(float32x4_t **)(this + 136);
      v17 = *(_DWORD *)(this + 124);
      return convexHullSupport((float32x4_t *)a2, v16, (float32x4_t *)(this + 32), v17, a3);
    case 5:
      v16 = *(float32x4_t **)(this + 120);
      v17 = *(_DWORD *)(this + 128);
      return convexHullSupport((float32x4_t *)a2, v16, (float32x4_t *)(this + 32), v17, a3);
    case 8:
      a3->i64[0] = 0;
      a3->i64[1] = 0;
      return this;
    case 0xA:
      v18 = *(float32x4_t *)a2;
      v18.i64[1] = a2->u32[2];
      v19 = *(int *)(this + 72);
      v20 = *(float *)(this + 48 + 4 * v19);
      v21 = *(float *)(this + 48 + 4 * (((int)v19 + 2) % 3));
      v22 = (int8x16_t)vmulq_f32(v18, v18);
      v23 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL), vpadd_f32(*(float32x2_t *)v22.i8, *(float32x2_t *)v22.i8)).f32[0];
      if (v23 >= 0.0001)
        v24 = vmulq_n_f32(v18, 1.0 / sqrtf(v23));
      else
        v24 = (float32x4_t)xmmword_1DD007970;
      v55 = 0uLL;
      v55.f32[v19] = v20;
      v40 = vmulq_n_f32(v24, v21);
      v41 = vmulq_n_f32(v24, *(float *)(this + 64));
      v42 = vsubq_f32(vaddq_f32(v55, v40), v41);
      v42.i32[3] = 0;
      v43 = (int8x16_t)vmulq_f32(v24, v42);
      *(float32x2_t *)a4.f32 = vpadd_f32(*(float32x2_t *)v43.i8, *(float32x2_t *)v43.i8);
      v44 = (float32x4_t)vextq_s8(v43, v43, 8uLL);
      *(float32x2_t *)v44.f32 = vadd_f32(*(float32x2_t *)a4.f32, *(float32x2_t *)v44.f32);
      a4.i32[0] = -581039253;
      v45 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v44, a4), 0), (int8x16_t)v42, (int8x16_t)0);
      v44.f32[0] = fmaxf(v44.f32[0], -1.0e18);
      v55 = 0uLL;
      v55.f32[v19] = -v20;
      v46 = vsubq_f32(vaddq_f32(v55, v40), v41);
      v46.i32[3] = 0;
      v47 = (int8x16_t)vmulq_f32(v24, v46);
      *(float32x2_t *)v40.f32 = vpadd_f32(*(float32x2_t *)v47.i8, *(float32x2_t *)v47.i8);
      v48 = (float32x4_t)vextq_s8(v47, v47, 8uLL);
      *(float32x2_t *)v48.f32 = vadd_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v48.f32);
      v15 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v48, v44), 0), (int8x16_t)v46, v45);
LABEL_33:
      a3->i64[0] = v15.i64[0];
      a3->i32[2] = v15.i32[2];
      goto LABEL_38;
    case 0xD:
      v55 = *(float32x4_t *)(this + 48);
      v52 = a2->i64[0];
      v53 = *(float *)&a2->i32[2];
      v54 = 0;
      v25 = *(_DWORD *)(this + 72);
      v26 = v25;
      v27 = v25 == 1;
      v28 = v25 != 1;
      v29 = v25 == 2;
      if (v25 == 2)
        v30 = 1;
      else
        v30 = 2;
      if (v29)
        v31 = 2;
      else
        v31 = v27;
      v32 = !v29 && v28;
      v33 = *(float *)((unint64_t)&v55 | (4 * v32));
      v34 = v55.f32[v26];
      v35 = *(float *)((unint64_t)&v52 & 0xFFFFFFFFFFFFFFFBLL | (4 * v32));
      v36 = *(float *)((unint64_t)&v52 | (4 * v30));
      v37 = sqrtf((float)(v36 * v36) + (float)(v35 * v35));
      if (v37 == 0.0)
      {
        *(float *)((unint64_t)&v50 | (4 * v32)) = v33;
        if (*(float *)((unint64_t)&v52 | (4 * v31)) < 0.0)
          v34 = -v34;
        *(float *)((unint64_t)&v50 & 0xFFFFFFFFFFFFFFF3 | (4 * (v31 & 3))) = v34;
        v39 = 0.0;
      }
      else
      {
        v38 = v33 / v37;
        *(float *)((unint64_t)&v50 | (4 * v32)) = v35 * v38;
        if (*(float *)((unint64_t)&v52 | (4 * v31)) < 0.0)
          v34 = -v34;
        *(float *)((unint64_t)&v50 & 0xFFFFFFFFFFFFFFF3 | (4 * (v31 & 3))) = v34;
        v39 = v36 * v38;
      }
      *(float *)((unint64_t)&v50 | (4 * v30)) = v39;
      v49 = v51;
      a3->i64[0] = v50;
      a3->i32[2] = v49;
LABEL_38:
      a3->i32[3] = 0;
      break;
    default:
      this = (*(uint64_t (**)(uint64_t, int8x16_t *))(*(_QWORD *)this + 136))(this, a2);
      break;
  }
  return this;
}

uint64_t convexHullSupport@<X0>(float32x4_t *a1@<X0>, float32x4_t *a2@<X1>, float32x4_t *a3@<X3>, int a4@<W2>, float32x4_t *a5@<X8>)
{
  float32x4_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  float v13;
  int8x16_t v14;
  float v15;
  uint64_t result;
  float32x4_t v17;
  float v18;
  float32x4_t v19;

  v9 = vmulq_f32(*a1, *a3);
  v19 = v9;
  v10 = a4;
  if (a4 > 3)
  {
    v18 = 0.0;
    result = _maxdot_large(a2->f32, v19.f32, a4, &v18);
    if (result < 0)
      goto LABEL_14;
    goto LABEL_12;
  }
  if (a4 < 1)
  {
    result = -1;
    goto LABEL_14;
  }
  v11 = 0;
  v12 = -1;
  v13 = -3.4028e38;
  do
  {
    v14 = (int8x16_t)vmulq_f32(v9, a2[v11]);
    v15 = vadd_f32(vpadd_f32(*(float32x2_t *)v14.i8, *(float32x2_t *)v14.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)).f32[0];
    if (v15 > v13)
    {
      v13 = v15;
      v12 = v11;
    }
    ++v11;
  }
  while (a4 != v11);
  result = v12;
  if ((v12 & 0x8000000000000000) == 0)
  {
LABEL_12:
    if (result < v10)
    {
      v17 = a2[result];
LABEL_16:
      *a5 = vmulq_f32(v17, *a3);
      return result;
    }
  }
LABEL_14:
  if (a4 >= 1)
  {
    v17 = *a2;
    goto LABEL_16;
  }
  a5->i64[0] = 0;
  a5->i64[1] = 0;
  return result;
}

float32x4_t btConvexShape::localGetSupportVertexNonVirtual@<Q0>(btConvexShape *this@<X0>, float32x4_t *a2@<X1>, float32x4_t *a3@<X8>, float32x4_t a4@<Q6>)
{
  float32x4_t v6;
  int8x16_t v7;
  float v8;
  float MarginNonVirtual;
  float32x4_t v15;
  float32x4_t result;
  float32x4_t v17;
  btVector3 v18;

  v6 = *a2;
  v7 = (int8x16_t)vmulq_f32(v6, v6);
  v8 = vadd_f32(vpadd_f32(*(float32x2_t *)v7.i8, *(float32x2_t *)v7.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)).f32[0];
  if (v8 < 1.4211e-14)
  {
    v6 = (float32x4_t)xmmword_1DD02A730;
    v18 = (btVector3)xmmword_1DD02A730;
    __asm { FMOV            V1.2S, #1.0 }
    v8 = vpadd_f32(_D1, _D1).f32[0] + 1.0;
  }
  v18 = (btVector3)vmulq_n_f32(v6, 1.0 / sqrtf(v8));
  btConvexShape::localGetSupportVertexWithoutMarginNonVirtual((uint64_t)this, (int8x16_t *)&v18, &v17, a4);
  MarginNonVirtual = btConvexShape::getMarginNonVirtual(this);
  v15 = vmulq_n_f32((float32x4_t)v18, MarginNonVirtual);
  v15.i32[3] = 0;
  result = vaddq_f32(v17, v15);
  *a3 = result;
  return result;
}

float btConvexShape::getMarginNonVirtual(btConvexShape *this)
{
  float result;

  switch(*((_DWORD *)this + 2))
  {
    case 0:
    case 1:
    case 4:
    case 5:
    case 0xA:
    case 0xD:
      result = *((float *)this + 16);
      break;
    case 8:
      result = *((float *)this + 12) * *((float *)this + 8);
      break;
    default:
      (*(void (**)(btConvexShape *))(*(_QWORD *)this + 96))(this);
      break;
  }
  return result;
}

void btConvexTriangleMeshShape::btConvexTriangleMeshShape(btConvexTriangleMeshShape *this, btStridingMeshInterface *a2, int a3)
{
  uint64_t v6;

  btPolyhedralConvexAabbCachingShape::btPolyhedralConvexAabbCachingShape(this);
  *(_QWORD *)v6 = off_1EA597A28;
  *(_QWORD *)(v6 + 120) = a2;
  *(_DWORD *)(v6 + 8) = 3;
  if (a3)
    btPolyhedralConvexAabbCachingShape::recalcLocalAabb(this);
}

uint64_t btConvexTriangleMeshShape::localGetSupportingVertexWithoutMargin@<X0>(btConvexTriangleMeshShape *this@<X0>, float32x4_t *a2@<X1>, _OWORD *a3@<X8>)
{
  float32x4_t v4;
  int8x16_t v5;
  float v6;
  float32x4_t v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  _QWORD v12[2];
  __int128 v13;
  int v14;
  float32x4_t v15;

  v4 = *a2;
  v5 = (int8x16_t)vmulq_f32(v4, v4);
  v6 = vadd_f32(vpadd_f32(*(float32x2_t *)v5.i8, *(float32x2_t *)v5.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL)).f32[0];
  if (v6 >= 0.0001)
    v7 = vmulq_n_f32(v4, 1.0 / sqrtf(v6));
  else
    v7 = (float32x4_t)xmmword_1DD007970;
  v13 = 0uLL;
  v12[0] = &off_1EA597C00;
  v14 = -581039253;
  v15 = v7;
  v8 = *((_QWORD *)this + 15);
  v10 = xmmword_1DD02CB50;
  v11 = xmmword_1DD02C880;
  (*(void (**)(uint64_t, _QWORD *, __int128 *, __int128 *))(*(_QWORD *)v8 + 16))(v8, v12, &v10, &v11);
  *a3 = v13;
  return C3DSceneSourcePerformConsistencyCheck(v12);
}

uint64_t btConvexTriangleMeshShape::batchedUnitVectorGetSupportingVertexWithoutMargin(uint64_t this, const btVector3 *a2, btVector3 *a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  btVector3 *v6;
  uint64_t v8;
  float *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  _QWORD v16[2];
  btVector3 v17;
  int v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;

  if (a4 >= 1)
  {
    v20 = v4;
    v21 = v5;
    v6 = a3;
    v8 = this;
    v9 = &a3->var0.var0[3];
    v10 = a4;
    v11 = a4;
    do
    {
      *v9 = -1.0e18;
      v9 += 4;
      --v11;
    }
    while (v11);
    do
    {
      v16[0] = &off_1EA597C00;
      v17 = (btVector3)0;
      v18 = -581039253;
      v12 = (__int128)*a2++;
      v19 = v12;
      v13 = *(_QWORD *)(v8 + 120);
      v14 = xmmword_1DD02CB50;
      v15 = xmmword_1DD02C880;
      (*(void (**)(uint64_t, _QWORD *, __int128 *, __int128 *))(*(_QWORD *)v13 + 16))(v13, v16, &v14, &v15);
      *v6++ = v17;
      this = C3DSceneSourcePerformConsistencyCheck(v16);
      --v10;
    }
    while (v10);
  }
  return this;
}

float32x4_t btConvexTriangleMeshShape::localGetSupportingVertex@<Q0>(btConvexTriangleMeshShape *this@<X0>, float32x4_t *a2@<X1>, float32x4_t *a3@<X8>)
{
  float32x4_t result;
  float32x4_t v7;
  int8x16_t v8;
  float32x4_t v9;
  float32x4_t v10;
  int8x16_t v11;
  float32x4_t v12;

  (*(void (**)(float32x4_t *__return_ptr))(*(_QWORD *)this + 136))(a3);
  result.f32[0] = (*(float (**)(btConvexTriangleMeshShape *))(*(_QWORD *)this + 96))(this);
  if (result.f32[0] != 0.0)
  {
    v8 = (int8x16_t)vmulq_f32(*a2, *a2);
    *(float32x2_t *)v7.f32 = vpadd_f32(*(float32x2_t *)v8.i8, *(float32x2_t *)v8.i8);
    v9 = (float32x4_t)vextq_s8(v8, v8, 8uLL);
    *(float32x2_t *)v9.f32 = vadd_f32(*(float32x2_t *)v7.f32, *(float32x2_t *)v9.f32);
    v7.i32[0] = 679477248;
    v10 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v7, v9), 0), (int8x16_t)xmmword_1DD02A730, *(int8x16_t *)a2);
    v11 = (int8x16_t)vmulq_f32(v10, v10);
    v12 = vmulq_n_f32(vmulq_n_f32(v10, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v11.i8, *(float32x2_t *)v11.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL)).f32[0])), (*(float (**)(btConvexTriangleMeshShape *))(*(_QWORD *)this + 96))(this));
    v12.i32[3] = 0;
    result = vaddq_f32(*a3, v12);
    *a3 = result;
  }
  return result;
}

uint64_t btConvexTriangleMeshShape::getNumVertices(btConvexTriangleMeshShape *this)
{
  return 0;
}

uint64_t btConvexTriangleMeshShape::getNumEdges(btConvexTriangleMeshShape *this)
{
  return 0;
}

uint64_t btConvexTriangleMeshShape::getNumPlanes(btConvexTriangleMeshShape *this)
{
  return 0;
}

uint64_t btConvexTriangleMeshShape::isInside(btConvexTriangleMeshShape *this, const btVector3 *a2, float a3)
{
  return 0;
}

uint64_t btConvexTriangleMeshShape::setLocalScaling(btConvexTriangleMeshShape *this, const btVector3 *a2)
{
  *(btVector3 *)(*((_QWORD *)this + 15) + 16) = *a2;
  return btPolyhedralConvexAabbCachingShape::recalcLocalAabb(this);
}

uint64_t btConvexTriangleMeshShape::getLocalScaling(btConvexTriangleMeshShape *this)
{
  return *((_QWORD *)this + 15) + 16;
}

void btConvexTriangleMeshShape::~btConvexTriangleMeshShape(btConvexTriangleMeshShape *this)
{
  void **v1;

  btPolyhedralConvexShape::~btPolyhedralConvexShape(this);
  btAlignedFreeInternal(v1);
}

const char *btConvexTriangleMeshShape::getName(btConvexTriangleMeshShape *this)
{
  return "ConvexTrimesh";
}

void LocalSupportVertexCallback::~LocalSupportVertexCallback(LocalSupportVertexCallback *this)
{
  C3DSceneSourcePerformConsistencyCheck(this);
  JUMPOUT(0x1DF0D41C0);
}

uint64_t LocalSupportVertexCallback::internalProcessTriangleIndex(uint64_t this, btVector3 *a2)
{
  uint64_t v2;
  float32x4_t v3;
  float v4;
  int8x16_t v5;
  float v6;

  v2 = 0;
  v3 = *(float32x4_t *)(this + 48);
  v4 = *(float *)(this + 32);
  do
  {
    v5 = (int8x16_t)vmulq_f32(v3, (float32x4_t)a2[v2]);
    v6 = vadd_f32(vpadd_f32(*(float32x2_t *)v5.i8, *(float32x2_t *)v5.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL)).f32[0];
    if (v6 > v4)
    {
      *(float *)(this + 32) = v6;
      *(btVector3 *)(this + 16) = a2[v2];
      v4 = v6;
    }
    ++v2;
  }
  while (v2 != 3);
  return this;
}

void btCylinderShape::btCylinderShape(btCylinderShape *this, const btVector3 *a2)
{
  btConvexInternalShape *v4;
  float v5;
  float32x4_t v6;
  float32x4_t v7;
  __int32 v8;
  float32x4_t v9;

  btConvexInternalShape::btConvexInternalShape(this);
  *(_QWORD *)v4 = off_1EA595EE8;
  *((_DWORD *)v4 + 18) = 1;
  btConvexInternalShape::setSafeMargin(v4, a2, 0.1);
  v9.i64[0] = (*(double (**)(btCylinderShape *))(*(_QWORD *)this + 96))(this);
  v8 = COERCE_UNSIGNED_INT64((*(double (**)(btCylinderShape *))(*(_QWORD *)this + 96))(this));
  v5 = (*(float (**)(btCylinderShape *))(*(_QWORD *)this + 96))(this);
  v6 = v9;
  v6.i32[1] = v8;
  v6.f32[2] = v5;
  v7 = vsubq_f32(vmulq_f32(*(float32x4_t *)a2, *((float32x4_t *)this + 2)), v6);
  v7.i32[3] = 0;
  *((float32x4_t *)this + 3) = v7;
  *((_DWORD *)this + 2) = 13;
}

float32x4_t btCylinderShape::getAabb(float32x4_t *this, const btTransform *a2, btVector3 *a3, btVector3 *a4)
{
  int32x2_t v8;
  btVector3 var1;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  int8x16_t v13;
  int8x16_t v14;
  btVector3 v15;
  float32x4_t result;

  *(double *)&v8 = (*(double (**)(float32x4_t *))(this->i64[0] + 96))(this);
  var1 = a2->var1;
  v10 = (float32x4_t)vdupq_lane_s32(v8, 0);
  v10.i32[3] = 0;
  v11 = vaddq_f32(this[3], v10);
  v12 = vmulq_f32(v11, (float32x4_t)vandq_s8((int8x16_t)a2->var0.var0[0], (int8x16_t)xmmword_1DD02C930));
  v13 = (int8x16_t)vmulq_f32(v11, (float32x4_t)vandq_s8((int8x16_t)a2->var0.var0[1], (int8x16_t)xmmword_1DD02C930));
  v14 = (int8x16_t)vmulq_f32(v11, (float32x4_t)vandq_s8((int8x16_t)a2->var0.var0[2], (int8x16_t)xmmword_1DD02C930));
  v14.i32[3] = 0;
  *(float32x2_t *)v12.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL)), vpadd_f32(*(float32x2_t *)v12.f32, *(float32x2_t *)v13.i8));
  *(float32x2_t *)&v12.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v14.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)), 0);
  v15 = (btVector3)vsubq_f32((float32x4_t)var1, v12);
  v15.var0.var0[3] = 0.0;
  *a3 = v15;
  result = vaddq_f32((float32x4_t)var1, v12);
  *a4 = (btVector3)result;
  return result;
}

void btCylinderShape::calculateLocalInertia(btCylinderShape *this, float a2, btVector3 *a3)
{
  float v6;
  float32x4_t v7;
  float32x4_t v8;
  int v9;
  float32x2_t v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  __int32 v16;
  float32x4_t v17;
  float32x4_t v18;

  v18 = *((float32x4_t *)this + 3);
  v17.i64[0] = (*(double (**)(btCylinderShape *))(*(_QWORD *)this + 96))(this);
  v16 = COERCE_UNSIGNED_INT64((*(double (**)(btCylinderShape *))(*(_QWORD *)this + 96))(this));
  v6 = (*(float (**)(btCylinderShape *))(*(_QWORD *)this + 96))(this);
  v7 = v17;
  v7.i32[1] = v16;
  v7.f32[2] = v6;
  v8 = vaddq_f32(v18, v7);
  v9 = *((_DWORD *)this + 18);
  v10 = (float32x2_t)vmulq_f32(v8, v8).u64[0];
  v11 = (float)((float)(a2 * 0.25) * v10.f32[0])
      + (float)((float)(a2 / 12.0) * vmuls_lane_f32(vmuls_lane_f32(4.0, v8, 2), v8, 2));
  v12 = (float)((float)(a2 * 0.25) * v10.f32[0])
      + (float)((float)(a2 / 12.0)
              * vmuls_lane_f32(vmuls_lane_f32(4.0, *(float32x2_t *)v8.f32, 1), *(float32x2_t *)v8.f32, 1));
  v13 = vmuls_lane_f32(a2 * 0.25, v10, 1) + (float)((float)(a2 / 12.0) * (float)((float)(4.0 * v8.f32[0]) * v8.f32[0]));
  v14 = vmuls_lane_f32(a2 * 0.5, v10, 1);
  if (v9)
  {
    v14 = v12;
    v15 = (float)(a2 * 0.5) * v10.f32[0];
  }
  else
  {
    v15 = v13;
  }
  if (v9)
    v13 = v12;
  if (v9 == 2)
  {
    v14 = v11;
    v15 = v11;
  }
  a3->var0.var0[0] = v14;
  a3->var0.var0[1] = v15;
  if (v9 == 2)
    v13 = (float)(a2 * 0.5) * v10.f32[0];
  a3->var0.var0[2] = v13;
  a3->var0.var0[3] = 0.0;
}

uint64_t btCylinderShape::localGetSupportingVertexWithoutMargin@<X0>(uint64_t this@<X0>, const btVector3 *a2@<X1>, float *a3@<X8>)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;

  v3 = *(float *)(this + 48);
  v4 = *(float *)(this + 52);
  v5 = a2->var0.var0[0];
  v6 = a2->var0.var0[2];
  v7 = sqrtf((float)(v6 * v6) + (float)(v5 * v5));
  if (v7 == 0.0)
  {
    if (a2->var0.var0[1] < 0.0)
      v4 = -v4;
    v9 = 0.0;
  }
  else
  {
    v8 = v3 / v7;
    v3 = v5 * v8;
    if (a2->var0.var0[1] < 0.0)
      v4 = -v4;
    v9 = v6 * v8;
  }
  *a3 = v3;
  a3[1] = v4;
  a3[2] = v9;
  return this;
}

__n128 btCylinderShape::batchedUnitVectorGetSupportingVertexWithoutMargin(btCylinderShape *this, const btVector3 *a2, btVector3 *a3, int a4, __n128 a5)
{
  uint64_t v5;
  float *v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  __n128 result;

  if (a4 >= 1)
  {
    v5 = a4;
    v6 = &a2->var0.var0[1];
    do
    {
      v7 = *((float *)this + 12);
      v8 = *((float *)this + 13);
      v9 = *(v6 - 1);
      v10 = v6[1];
      v11 = sqrtf((float)(v10 * v10) + (float)(v9 * v9));
      if (v11 == 0.0)
      {
        if (*v6 >= 0.0)
          v13 = *((float *)this + 13);
        else
          v13 = -v8;
        v14 = 0.0;
      }
      else
      {
        v12 = v7 / v11;
        v7 = v9 * v12;
        if (*v6 >= 0.0)
          v13 = *((float *)this + 13);
        else
          v13 = -v8;
        v14 = v10 * v12;
      }
      a5.n128_u64[0] = __PAIR64__(LODWORD(v13), LODWORD(v7));
      a5.n128_f32[2] = v14;
      *a3++ = (btVector3)a5;
      v6 += 4;
      --v5;
    }
    while (v5);
  }
  result.n128_u64[0] = a5.n128_u64[0];
  result.n128_u32[2] = a5.n128_u32[2];
  return result;
}

void btCylinderShape::~btCylinderShape(btCylinderShape *this)
{
  void **v1;

  v1 = (void **)C3DSceneSourcePerformConsistencyCheck(this);
  btAlignedFreeInternal(v1);
}

float32x4_t btCylinderShape::setLocalScaling(float32x4_t *this, float32x4_t *a2)
{
  double v4;
  double v5;
  unsigned int v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t result;
  unsigned int v13;
  float32x4_t v14;
  unsigned int v15;
  float32x4_t v16;

  v4 = (*(double (**)(float32x4_t *))(this->i64[0] + 96))(this);
  v15 = LODWORD(v4);
  v5 = (*(double (**)(float32x4_t *))(this->i64[0] + 96))(this);
  v13 = LODWORD(v5);
  *(float *)&v6 = (*(float (**)(float32x4_t *))(this->i64[0] + 96))(this);
  v7.i64[0] = __PAIR64__(v13, v15);
  v7.i64[1] = v6;
  v16 = v7;
  v8 = this[2];
  v9 = vaddq_f32(this[3], v7);
  v10 = vrecpeq_f32(v8);
  v11 = vmulq_f32(v10, vrecpsq_f32(v8, v10));
  v14 = vmulq_f32(vrecpsq_f32(v8, v11), vmulq_f32(v9, v11));
  btConvexInternalShape::setLocalScaling(this, a2);
  result = vsubq_f32(vmulq_f32(v14, this[2]), v16);
  result.i32[3] = 0;
  this[3] = result;
  return result;
}

const char *btCylinderShape::getName(btCylinderShape *this)
{
  return "CylinderY";
}

uint64_t btCylinderShape::getAnisotropicRollingFrictionDirection@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  *((_DWORD *)a2 + *(int *)(this + 72)) = 1065353216;
  return this;
}

float32x4_t btCylinderShape::setMargin(float32x4_t *this, float32_t a2)
{
  double v4;
  double v5;
  unsigned int v6;
  float32x4_t v7;
  unsigned int v8;
  float32x4_t v9;
  float32x4_t result;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  float32x4_t v15;

  v4 = (*(double (**)(float32x4_t *))(this->i64[0] + 96))(this);
  v14 = LODWORD(v4);
  v5 = (*(double (**)(float32x4_t *))(this->i64[0] + 96))(this);
  v12 = LODWORD(v5);
  *(float *)&v6 = (*(float (**)(float32x4_t *))(this->i64[0] + 96))(this);
  v7.i64[0] = __PAIR64__(v12, v14);
  v7.i64[1] = v6;
  v15 = vaddq_f32(this[3], v7);
  this[4].f32[0] = a2;
  v13 = COERCE_UNSIGNED_INT64((*(double (**)(float32x4_t *))(this->i64[0] + 96))(this));
  v11 = COERCE_UNSIGNED_INT64((*(double (**)(float32x4_t *))(this->i64[0] + 96))(this));
  *(float *)&v8 = (*(float (**)(float32x4_t *))(this->i64[0] + 96))(this);
  v9.i64[0] = __PAIR64__(v11, v13);
  v9.i64[1] = v8;
  result = vsubq_f32(v15, v9);
  result.i32[3] = 0;
  this[3] = result;
  return result;
}

uint64_t btCylinderShape::calculateSerializeBufferSize(btCylinderShape *this)
{
  return 64;
}

const char *btCylinderShape::serialize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  uint64_t j;

  btCollisionShape::serialize(a1, a2, a3);
  for (i = 0; i != 16; i += 4)
    *(_DWORD *)(a2 + 32 + i) = *(_DWORD *)(a1 + 48 + i);
  for (j = 0; j != 16; j += 4)
    *(_DWORD *)(a2 + 16 + j) = *(_DWORD *)(a1 + 32 + j);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 64);
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 72);
  return "btCylinderShapeData";
}

float32x4_t btCylinderShape::localGetSupportingVertex@<Q0>(btCylinderShape *this@<X0>, float32x4_t *a2@<X1>, float32x4_t *a3@<X8>)
{
  float32x4_t result;
  float32x4_t v7;
  int8x16_t v8;
  float32x4_t v9;
  float32x4_t v10;
  int8x16_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;

  (*(void (**)(float32x4_t *__return_ptr))(*(_QWORD *)this + 136))(&v14);
  v13 = v14;
  *a3 = v14;
  result.f32[0] = (*(float (**)(btCylinderShape *))(*(_QWORD *)this + 96))(this);
  if (result.f32[0] != 0.0)
  {
    v8 = (int8x16_t)vmulq_f32(*a2, *a2);
    *(float32x2_t *)v7.f32 = vpadd_f32(*(float32x2_t *)v8.i8, *(float32x2_t *)v8.i8);
    v9 = (float32x4_t)vextq_s8(v8, v8, 8uLL);
    *(float32x2_t *)v9.f32 = vadd_f32(*(float32x2_t *)v7.f32, *(float32x2_t *)v9.f32);
    v7.i32[0] = 679477248;
    v10 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v7, v9), 0), (int8x16_t)xmmword_1DD02A730, *(int8x16_t *)a2);
    v11 = (int8x16_t)vmulq_f32(v10, v10);
    v12 = vmulq_n_f32(vmulq_n_f32(v10, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v11.i8, *(float32x2_t *)v11.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL)).f32[0])), (*(float (**)(btCylinderShape *))(*(_QWORD *)this + 96))(this));
    v12.i32[3] = 0;
    result = vaddq_f32(v13, v12);
    *a3 = result;
  }
  return result;
}

float btCylinderShape::getRadius(btCylinderShape *this)
{
  float v2;
  float v3;

  v2 = *((float *)this + 12);
  v3 = (*(float (**)(void))(*(_QWORD *)this + 96))();
  (*(void (**)(btCylinderShape *))(*(_QWORD *)this + 96))(this);
  (*(void (**)(btCylinderShape *))(*(_QWORD *)this + 96))(this);
  return v2 + v3;
}

void btMultiSphereShape::btMultiSphereShape(btMultiSphereShape *this, const btVector3 *a2, const float *a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  _DWORD *v19;
  int *v20;
  int v21;
  uint64_t v22;

  btConvexInternalAabbCachingShape::btConvexInternalAabbCachingShape(this);
  *(_QWORD *)v8 = off_1EA596A48;
  *(_BYTE *)(v8 + 144) = 1;
  *(_QWORD *)(v8 + 136) = 0;
  *(_QWORD *)(v8 + 124) = 0;
  *(_BYTE *)(v8 + 176) = 1;
  *(_QWORD *)(v8 + 168) = 0;
  *(_QWORD *)(v8 + 156) = 0;
  *(_DWORD *)(v8 + 8) = 9;
  if (a4 < 0)
  {
    v15 = 0;
  }
  else
  {
    if (!a4)
    {
      *((_DWORD *)this + 31) = 0;
      *((_DWORD *)this + 39) = 0;
      goto LABEL_29;
    }
    v9 = btAlignedAllocInternal(16 * a4, 16);
    v10 = v9;
    v11 = *((unsigned int *)this + 31);
    if ((int)v11 >= 1)
    {
      v12 = 0;
      v13 = 16 * v11;
      do
      {
        *(_OWORD *)(v9 + v12) = *(_OWORD *)(*((_QWORD *)this + 17) + v12);
        v12 += 16;
      }
      while (v13 != v12);
    }
    v14 = (void **)*((_QWORD *)this + 17);
    if (v14 && *((_BYTE *)this + 144))
      btAlignedFreeInternal(v14);
    *((_BYTE *)this + 144) = 1;
    *((_QWORD *)this + 17) = v10;
    *((_DWORD *)this + 32) = a4;
    v15 = *((_DWORD *)this + 39);
  }
  *((_DWORD *)this + 31) = a4;
  if (v15 < a4)
  {
    if (*((_DWORD *)this + 40) >= a4)
    {
LABEL_25:
      bzero((void *)(*((_QWORD *)this + 21) + 4 * v15), 4 * (~v15 + a4) + 4);
      goto LABEL_26;
    }
    if (a4)
    {
      v16 = btAlignedAllocInternal(4 * a4, 16);
      LODWORD(v17) = *((_DWORD *)this + 39);
    }
    else
    {
      v16 = 0;
      LODWORD(v17) = v15;
    }
    v18 = (void **)*((_QWORD *)this + 21);
    if ((int)v17 < 1)
    {
      if (!v18)
      {
LABEL_24:
        *((_BYTE *)this + 176) = 1;
        *((_QWORD *)this + 21) = v16;
        *((_DWORD *)this + 40) = a4;
        goto LABEL_25;
      }
    }
    else
    {
      v17 = v17;
      v19 = (_DWORD *)v16;
      v20 = (int *)*((_QWORD *)this + 21);
      do
      {
        v21 = *v20++;
        *v19++ = v21;
        --v17;
      }
      while (v17);
    }
    if (*((_BYTE *)this + 176))
      btAlignedFreeInternal(v18);
    goto LABEL_24;
  }
LABEL_26:
  *((_DWORD *)this + 39) = a4;
  if (a4 >= 1)
  {
    v22 = 0;
    do
    {
      *(btVector3 *)(*((_QWORD *)this + 17) + 16 * v22) = a2[v22];
      *(float *)(*((_QWORD *)this + 21) + 4 * v22) = a3[v22];
      ++v22;
    }
    while (a4 != v22);
  }
LABEL_29:
  btConvexInternalAabbCachingShape::recalcLocalAabb(this);
}

float32x4_t *btMultiSphereShape::localGetSupportingVertexWithoutMargin@<X0>(float32x4_t *this@<X0>, float32x4_t *a2@<X1>, float32x4_t *a3@<X8>)
{
  float32x4_t *v3;
  float32x4_t v4;
  int8x16_t v5;
  float v6;
  float32x4_t v7;
  int v8;
  int v9;
  float *v10;
  float32x4_t *v11;
  float v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int64_t v17;
  float32x4_t *v18;
  float32x4_t v19;
  float v20;
  float32x4_t v21;
  float32x4_t v22;
  float v23;
  float32x4_t v24;
  int64_t v25;
  int v26;
  float v27;
  int8x16_t v28;
  float v29;
  float32x4_t v31;
  float v32;
  float32x4_t v33;
  float32x4_t v34[128];
  uint64_t v35;

  v3 = this;
  v35 = *MEMORY[0x1E0C80C00];
  a3->i64[0] = 0;
  a3->i64[1] = 0;
  v4 = *a2;
  v5 = (int8x16_t)vmulq_f32(v4, v4);
  v6 = vadd_f32(vpadd_f32(*(float32x2_t *)v5.i8, *(float32x2_t *)v5.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL)).f32[0];
  if (v6 >= 1.4211e-14)
    v7 = vmulq_n_f32(v4, 1.0 / sqrtf(v6));
  else
    v7 = (float32x4_t)xmmword_1DD007970;
  v33 = v7;
  v32 = 0.0;
  v8 = this[7].i32[3];
  if (v8 >= 1)
  {
    v9 = 0;
    v10 = (float *)this[10].i64[1];
    v11 = (float32x4_t *)this[8].i64[1];
    v12 = -1.0e18;
    v13 = this[7].i32[3];
    do
    {
      v14 = v13 - 128;
      if (v13 >= 128)
        v13 = 128;
      if (v13 <= 1)
        v15 = 1;
      else
        v15 = v13;
      if (v8 - v9 >= 128)
        v16 = 128;
      else
        v16 = v8 - v9;
      v17 = v16;
      if (v8 - v9 < 1)
      {
        if (v16 >= 4)
          goto LABEL_26;
        v26 = -1;
        v27 = -3.4028e38;
      }
      else
      {
        v18 = v34;
        v19 = v33;
        do
        {
          v20 = *v10++;
          v21 = vmulq_n_f32(vmulq_f32(v19, v3[2]), v20);
          v21.i32[3] = 0;
          v22 = *v11++;
          v31 = vaddq_f32(v22, v21);
          v23 = (*(float (**)(float32x4_t *))(v3->i64[0] + 96))(v3);
          v19 = v33;
          v24 = vsubq_f32(v31, vmulq_n_f32(v33, v23));
          v24.i32[3] = 0;
          *v18++ = v24;
          --v15;
        }
        while (v15);
        if ((int)v17 >= 4)
        {
LABEL_26:
          this = (float32x4_t *)_maxdot_large(v34[0].f32, v33.f32, v17, &v32);
          v27 = v32;
          goto LABEL_27;
        }
        v25 = 0;
        v26 = -1;
        v27 = -3.4028e38;
        do
        {
          v28 = (int8x16_t)vmulq_f32(v34[v25], v33);
          v29 = vadd_f32(vpadd_f32(*(float32x2_t *)v28.i8, *(float32x2_t *)v28.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL)).f32[0];
          if (v29 > v27)
          {
            v27 = v29;
            v26 = v25;
          }
          ++v25;
        }
        while (v25 < v17);
      }
      v32 = v27;
      this = (float32x4_t *)v26;
LABEL_27:
      if (v27 > v12)
      {
        *a3 = v34[(_QWORD)this];
        v12 = v27;
      }
      v9 += 128;
      v13 = v14;
    }
    while (v9 < v8);
  }
  return this;
}

uint64_t btMultiSphereShape::batchedUnitVectorGetSupportingVertexWithoutMargin(uint64_t this, const btVector3 *a2, btVector3 *a3, int a4)
{
  float32x4_t *v4;
  uint64_t v5;
  int v6;
  float *v7;
  float32x4_t *v8;
  int v9;
  float v10;
  float32x4_t *v11;
  int v12;
  uint64_t v13;
  int v14;
  int64_t v15;
  uint64_t v16;
  float32x4_t v17;
  float32x4_t *v18;
  float v19;
  float32x4_t v20;
  float32x4_t v21;
  float v22;
  float32x4_t v23;
  int64_t v24;
  int v25;
  float v26;
  int8x16_t v27;
  float v28;
  uint64_t v30;
  uint64_t v32;
  int v33;
  float32x4_t v34;
  float v35;
  float32x4_t v36[128];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (a4 >= 1)
  {
    v4 = (float32x4_t *)this;
    v32 = 0;
    v30 = a4;
    while (1)
    {
      v35 = 0.0;
      v5 = v4[7].u32[3];
      if ((int)v5 >= 1)
        break;
LABEL_30:
      if (++v32 == v30)
        return this;
    }
    v6 = 0;
    v7 = (float *)v4[10].i64[1];
    v8 = (float32x4_t *)v4[8].i64[1];
    v9 = v4[7].i32[3];
    v10 = -1.0e18;
    v11 = (float32x4_t *)&a2[v32];
    while (1)
    {
      v12 = v9 - 128;
      if (v9 >= 128)
        v9 = 128;
      if (v9 <= 1)
        v13 = 1;
      else
        v13 = v9;
      if ((int)v5 - v6 >= 128)
        v14 = 128;
      else
        v14 = v5 - v6;
      v15 = v14;
      if ((int)v5 - v6 < 1)
      {
        if (v14 >= 4)
          goto LABEL_26;
        v25 = -1;
        v26 = -3.4028e38;
      }
      else
      {
        v33 = v12;
        v16 = v5;
        v17 = *v11;
        v18 = v36;
        do
        {
          v19 = *v7++;
          v20 = vmulq_n_f32(vmulq_f32(v17, v4[2]), v19);
          v20.i32[3] = 0;
          v21 = *v8++;
          v34 = vaddq_f32(v21, v20);
          v22 = (*(float (**)(float32x4_t *))(v4->i64[0] + 96))(v4);
          v17 = *v11;
          v23 = vsubq_f32(v34, vmulq_n_f32(*v11, v22));
          v23.i32[3] = 0;
          *v18++ = v23;
          --v13;
        }
        while (v13);
        if ((int)v15 >= 4)
        {
          v5 = v16;
          v12 = v33;
LABEL_26:
          this = _maxdot_large(v36[0].f32, v11->f32, v15, &v35);
          v26 = v35;
          goto LABEL_27;
        }
        v24 = 0;
        v25 = -1;
        v26 = -3.4028e38;
        v5 = v16;
        do
        {
          v27 = (int8x16_t)vmulq_f32(v36[v24], *v11);
          v28 = vadd_f32(vpadd_f32(*(float32x2_t *)v27.i8, *(float32x2_t *)v27.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL)).f32[0];
          if (v28 > v26)
          {
            v26 = v28;
            v25 = v24;
          }
          ++v24;
        }
        while (v24 < v15);
        v12 = v33;
      }
      v35 = v26;
      this = v25;
LABEL_27:
      if (v26 > v10)
      {
        a3[v32] = (btVector3)v36[this];
        v10 = v26;
      }
      v6 += 128;
      v9 = v12;
      if (v6 >= (int)v5)
        goto LABEL_30;
    }
  }
  return this;
}

float btMultiSphereShape::calculateLocalInertia(float32x4_t *this, float a2, btVector3 *a3)
{
  float32x4_t v3;
  float32x4_t v4;
  float v5;
  float32x2_t v6;
  float result;

  v3.i64[0] = 0x3F0000003F000000;
  v3.i64[1] = 0x3F0000003F000000;
  v4 = vmulq_f32(vsubq_f32(this[6], this[5]), v3);
  v5 = a2 / 12.0;
  v3.f32[0] = (float)(v4.f32[2] + v4.f32[2]) * (float)(v4.f32[2] + v4.f32[2]);
  *(float32x2_t *)v4.f32 = vadd_f32(*(float32x2_t *)v4.f32, *(float32x2_t *)v4.f32);
  v6 = (float32x2_t)vrev64_s32(*(int32x2_t *)v4.f32);
  *(float32x2_t *)a3->var0.var0 = vmul_n_f32(vmla_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v3.f32, 0), v6, v6), v5);
  result = v5
         * vmlas_n_f32(COERCE_FLOAT(vmul_f32(*(float32x2_t *)&v4, *(float32x2_t *)&v4).i32[1]), v4.f32[0], v4.f32[0]);
  *(_QWORD *)&a3->var0.var0[2] = LODWORD(result);
  return result;
}

const char *btMultiSphereShape::serialize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  uint64_t j;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t k;

  btCollisionShape::serialize(a1, a2, a3);
  for (i = 0; i != 16; i += 4)
    *(_DWORD *)(a2 + 32 + i) = *(_DWORD *)(a1 + 48 + i);
  for (j = 0; j != 16; j += 4)
    *(_DWORD *)(a2 + 16 + j) = *(_DWORD *)(a1 + 32 + j);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 64);
  v8 = *(unsigned int *)(a1 + 124);
  if ((_DWORD)v8)
  {
    *(_QWORD *)(a2 + 56) = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 56))(a3, *(_QWORD *)(a1 + 136));
    *(_DWORD *)(a2 + 64) = v8;
    v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 20, v8);
    v10 = *(_QWORD *)(a1 + 136);
    if ((int)v8 >= 1)
    {
      v11 = 0;
      v12 = *(_QWORD *)(v9 + 8);
      v13 = *(_QWORD *)(a1 + 168);
      v14 = *(_QWORD *)(a1 + 136);
      do
      {
        for (k = 0; k != 16; k += 4)
          *(_DWORD *)(v12 + k) = *(_DWORD *)(v14 + k);
        *(_DWORD *)(v12 + 16) = *(_DWORD *)(v13 + 4 * v11++);
        v12 += 20;
        v14 += 16;
      }
      while (v11 != v8);
    }
    (*(void (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(_QWORD *)a3 + 40))(a3, v9, "btPositionAndRadius", 1497453121, v10);
  }
  else
  {
    *(_QWORD *)(a2 + 56) = 0;
    *(_DWORD *)(a2 + 64) = 0;
  }
  return "btMultiSphereShapeData";
}

void btMultiSphereShape::~btMultiSphereShape(btMultiSphereShape *this)
{
  char *v2;

  *(_QWORD *)this = off_1EA596A48;
  v2 = (char *)this + 120;
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)this + 152);
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)v2);
  C3DSceneSourcePerformConsistencyCheck(this);
}

{
  char *v2;
  void **v3;

  *(_QWORD *)this = off_1EA596A48;
  v2 = (char *)this + 120;
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)this + 152);
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)v2);
  v3 = (void **)C3DSceneSourcePerformConsistencyCheck(this);
  btAlignedFreeInternal(v3);
}

const char *btMultiSphereShape::getName(btMultiSphereShape *this)
{
  return "MultiSphere";
}

uint64_t btMultiSphereShape::calculateSerializeBufferSize(btMultiSphereShape *this)
{
  return 72;
}

void btOptimizedBvh::btOptimizedBvh(btOptimizedBvh *this)
{
  _QWORD *v1;

  btQuantizedBvh::btQuantizedBvh(this);
  *v1 = off_1EA595C60;
}

void btOptimizedBvh::~btOptimizedBvh(btOptimizedBvh *this)
{
  void **v1;

  btQuantizedBvh::~btQuantizedBvh(this);
  btAlignedFreeInternal(v1);
}

void btOptimizedBvh::build(float32x4_t *this, btStridingMeshInterface *a2, int a3, float32x4_t *a4, float32x4_t *a5, int32x2_t a6)
{
  float32x4_t v8;
  uint64_t v9;
  __int32 v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  __int32 v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  _OWORD *v26;
  _OWORD *v27;
  __int128 v28;
  void **v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  double v33;
  double v34;
  float32x4_t v35;
  double v36;
  float32x4_t v37;
  float32x4_t v38;
  float v39;
  float32x4_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  _OWORD *v48;
  __int128 v49;
  void **v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  void **v55;
  void **v56;
  __int128 v57;
  __int128 v58;
  uint64_t (**v59)();
  float32x4_t *v60;
  float32x4_t *v61;

  this[4].i8[8] = a3;
  if (a3)
  {
    a6.i32[0] = 1.0;
    v8 = btQuantizedBvh::setQuantizationValues(this, a4, a5, a6);
    v59 = &off_1EA59A940;
    v60 = this + 9;
    v61 = this;
    (*(void (**)(btStridingMeshInterface *, uint64_t (***)(), float32x4_t *, float32x4_t *, float32x4_t))(*(_QWORD *)a2 + 16))(a2, &v59, this + 1, this + 2, v8);
    v9 = this[9].i32[1];
    v10 = 2 * v9;
    v11 = this[11].i32[1];
    if (v11 < 2 * (int)v9)
    {
      v12 = v11;
      if (this[11].i32[2] < v10)
      {
        if ((_DWORD)v9)
        {
          v13 = btAlignedAllocInternal(32 * v9, 16);
          v11 = this[11].i32[1];
        }
        else
        {
          v13 = 0;
        }
        if (v11 >= 1)
        {
          v18 = 0;
          v19 = 16 * v11;
          do
          {
            *(_OWORD *)(v13 + v18) = *(_OWORD *)(this[12].i64[0] + v18);
            v18 += 16;
          }
          while (v19 != v18);
        }
        v20 = (void **)this[12].i64[0];
        if (v20 && this[12].i8[8])
          btAlignedFreeInternal(v20);
        this[12].i8[8] = 1;
        this[12].i64[0] = v13;
        this[11].i32[2] = v10;
      }
      v21 = 16 * v12;
      v22 = v10 - v12;
      do
      {
        v23 = (_QWORD *)(this[12].i64[0] + v21);
        *v23 = 0;
        v23[1] = 0;
        v21 += 16;
        --v22;
      }
      while (v22);
    }
    this[11].i32[1] = v10;
  }
  else
  {
    v59 = &off_1EA59A918;
    v60 = this + 5;
    v57 = xmmword_1DD02C880;
    v58 = xmmword_1DD02C890;
    (*(void (**)(btStridingMeshInterface *, uint64_t (***)(), __int128 *, __int128 *, float32x4_t *))(*(_QWORD *)a2 + 16))(a2, &v59, &v58, &v57, a5);
    v9 = this[5].i32[1];
    v14 = 2 * v9;
    v15 = this[7].i32[1];
    if (v15 < 2 * (int)v9)
    {
      v16 = v15;
      if (this[7].i32[2] < v14)
      {
        if ((_DWORD)v9)
        {
          v17 = btAlignedAllocInternal(v9 << 7, 16);
          v15 = this[7].i32[1];
        }
        else
        {
          v17 = 0;
        }
        if (v15 >= 1)
        {
          v24 = 0;
          v25 = (unint64_t)v15 << 6;
          do
          {
            v26 = (_OWORD *)(v17 + v24);
            v27 = (_OWORD *)(this[8].i64[0] + v24);
            *v26 = *v27;
            v26[1] = v27[1];
            v28 = v27[3];
            v26[2] = v27[2];
            v26[3] = v28;
            v24 += 64;
          }
          while (v25 != v24);
        }
        v29 = (void **)this[8].i64[0];
        if (v29 && this[8].i8[8])
          btAlignedFreeInternal(v29);
        this[8].i8[8] = 1;
        this[8].i64[0] = v17;
        this[7].i32[2] = v14;
      }
      v30 = v16 << 6;
      v31 = v14 - v16;
      do
      {
        v32 = (_OWORD *)(this[8].i64[0] + v30);
        v32[2] = 0uLL;
        v32[3] = 0uLL;
        *v32 = 0uLL;
        v32[1] = 0uLL;
        v30 += 64;
        --v31;
      }
      while (v31);
    }
    this[7].i32[1] = v14;
  }
  C3DSceneSourcePerformConsistencyCheck(&v59);
  this[4].i32[1] = 0;
  if ((_DWORD)v9)
  {
    btQuantizedBvh::buildTree((btQuantizedBvh *)this, 0, v9, v33, v34, v35, v36, v37, v38, v39, v40);
    if (this[4].i8[8] && !this[13].i32[3])
    {
      v41 = 1;
      if (!this[14].i32[0])
      {
        v42 = btAlignedAllocInternal(32, 16);
        v43 = v42;
        v44 = this[13].u32[3];
        if ((int)v44 >= 1)
        {
          v45 = 0;
          v46 = 32 * v44;
          do
          {
            v47 = (_OWORD *)(v42 + v45);
            v48 = (_OWORD *)(this[14].i64[1] + v45);
            v49 = v48[1];
            *v47 = *v48;
            v47[1] = v49;
            v45 += 32;
          }
          while (v46 != v45);
        }
        v50 = (void **)this[14].i64[1];
        if (v50 && this[15].i8[0])
          btAlignedFreeInternal(v50);
        this[15].i8[0] = 1;
        this[14].i64[1] = v43;
        this[14].i32[0] = 1;
        v41 = this[13].i32[3] + 1;
      }
      this[13].i32[3] = v41;
      v51 = this[14].i64[1];
      v52 = this[12].i64[0];
      *(_WORD *)v51 = *(_WORD *)v52;
      *(_WORD *)(v51 + 2) = *(_WORD *)(v52 + 2);
      *(_WORD *)(v51 + 4) = *(_WORD *)(v52 + 4);
      *(_WORD *)(v51 + 6) = *(_WORD *)(v52 + 6);
      *(_WORD *)(v51 + 8) = *(_WORD *)(v52 + 8);
      *(_WORD *)(v51 + 10) = *(_WORD *)(v52 + 10);
      *(_DWORD *)(v51 + 12) = 0;
      v53 = *(_DWORD *)(v52 + 12);
      if (v53 < 0)
        v54 = -v53;
      else
        v54 = 1;
      *(_DWORD *)(v51 + 16) = v54;
    }
    this[15].i32[2] = this[13].i32[3];
    v55 = (void **)this[10].i64[0];
    if (v55 && this[10].i8[8])
      btAlignedFreeInternal(v55);
    this[10].i8[8] = 1;
    this[10].i64[0] = 0;
    this[9].i32[1] = 0;
    this[9].i32[2] = 0;
    v56 = (void **)this[6].i64[0];
    if (v56)
    {
      if (this[6].i8[8])
        btAlignedFreeInternal(v56);
    }
    this[6].i8[8] = 1;
    this[6].i64[0] = 0;
    this[5].i32[1] = 0;
    this[5].i32[2] = 0;
  }
}

void btOptimizedBvh::build(btStridingMeshInterface *,BOOL,btVector3 const&,btVector3 const&)::QuantizedNodeTriangleCallback::~QuantizedNodeTriangleCallback(uint64_t a1)
{
  C3DSceneSourcePerformConsistencyCheck(a1);
  JUMPOUT(0x1DF0D41C0);
}

float32x4_t btOptimizedBvh::build(btStridingMeshInterface *,BOOL,btVector3 const&,btVector3 const&)::QuantizedNodeTriangleCallback::internalProcessTriangleIndex(uint64_t a1, float32x4_t *a2, int a3, int a4)
{
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t *v17;
  uint64_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  float32x4_t v28;
  int v29;
  int v30;
  int v31;
  float32x4_t result;
  uint64_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;

  v6 = a2[1];
  v7 = vminq_f32(vminq_f32(*a2, (float32x4_t)xmmword_1DD02C880), v6);
  v8 = vmaxq_f32(vmaxq_f32(*a2, (float32x4_t)xmmword_1DD02C890), v6);
  v9 = a2[2];
  v10 = vminq_f32(v7, v9);
  v11 = vmaxq_f32(v8, v9);
  v12 = (int8x16_t)v10;
  *(float *)v12.i32 = v10.f32[0] + -0.001;
  v13 = (int8x16_t)v11;
  *(float *)v13.i32 = v11.f32[0] + 0.001;
  v9.i32[0] = 990057071;
  v14 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v9, vsubq_f32(v11, v10)), 0);
  v15 = (float32x4_t)vbslq_s8(v14, v12, (int8x16_t)v10);
  v16 = (float32x4_t)vbslq_s8(v14, v13, (int8x16_t)v11);
  if ((float)(v16.f32[1] - v15.f32[1]) < 0.002)
  {
    v16.f32[1] = v16.f32[1] + 0.001;
    v15.f32[1] = v15.f32[1] + -0.001;
  }
  if ((float)(v16.f32[2] - v15.f32[2]) < 0.002)
  {
    v16.f32[2] = v16.f32[2] + 0.001;
    v15.f32[2] = v15.f32[2] + -0.001;
  }
  v18 = *(_QWORD *)(a1 + 8);
  v17 = *(float32x4_t **)(a1 + 16);
  v19 = v17[1];
  v20 = v17[3];
  v21 = *(_DWORD *)(v18 + 4);
  if (v21 == *(_DWORD *)(v18 + 8))
  {
    v22 = v21 ? 2 * v21 : 1;
    if (v21 < v22)
    {
      v36 = v16;
      v37 = v15;
      v34 = v19;
      v35 = v20;
      if (v22)
      {
        v23 = btAlignedAllocInternal(16 * v22, 16);
        v19 = v34;
        v20 = v35;
        v16 = v36;
        v15 = v37;
        v24 = v23;
        v21 = *(_DWORD *)(v18 + 4);
      }
      else
      {
        v24 = 0;
      }
      if (v21 >= 1)
      {
        v25 = 0;
        v26 = 16 * v21;
        do
        {
          *(_OWORD *)(v24 + v25) = *(_OWORD *)(*(_QWORD *)(v18 + 16) + v25);
          v25 += 16;
        }
        while (v26 != v25);
      }
      v27 = *(void ***)(v18 + 16);
      if (v27 && *(_BYTE *)(v18 + 24))
      {
        btAlignedFreeInternal(v27);
        v19 = v34;
        v20 = v35;
        v16 = v36;
        v15 = v37;
      }
      *(_BYTE *)(v18 + 24) = 1;
      *(_QWORD *)(v18 + 16) = v24;
      *(_DWORD *)(v18 + 8) = v22;
      v21 = *(_DWORD *)(v18 + 4);
    }
  }
  v28 = vmulq_f32(v20, vsubq_f32(v16, v19));
  v29 = (int)(float)(v28.f32[2] + 1.0) | 1;
  v30 = (int)(float)(v28.f32[1] + 1.0) | 1;
  v31 = (int)(float)(v28.f32[0] + 1.0) | 1;
  result = vmulq_f32(v20, vsubq_f32(v15, v19));
  v33 = *(_QWORD *)(v18 + 16) + 16 * v21;
  *(_WORD *)v33 = (int)result.f32[0] & 0xFFFE;
  *(_WORD *)(v33 + 2) = (int)result.f32[1] & 0xFFFE;
  *(_WORD *)(v33 + 4) = (int)result.f32[2] & 0xFFFE;
  *(_WORD *)(v33 + 6) = v31;
  *(_WORD *)(v33 + 8) = v30;
  *(_WORD *)(v33 + 10) = v29;
  *(_DWORD *)(v33 + 12) = a4 | (a3 << 21);
  ++*(_DWORD *)(v18 + 4);
  return result;
}

void btOptimizedBvh::build(btStridingMeshInterface *,BOOL,btVector3 const&,btVector3 const&)::NodeTriangleCallback::~NodeTriangleCallback(uint64_t a1)
{
  C3DSceneSourcePerformConsistencyCheck(a1);
  JUMPOUT(0x1DF0D41C0);
}

float32x4_t btOptimizedBvh::build(btStridingMeshInterface *,BOOL,btVector3 const&,btVector3 const&)::NodeTriangleCallback::internalProcessTriangleIndex(uint64_t a1, float32x4_t *a2, __int32 a3, __int32 a4)
{
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  __int128 v18;
  void **v19;
  float32x4_t result;
  float32x4_t *v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;

  v6 = *a2;
  v7 = a2[1];
  v8 = a2[2];
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_DWORD *)(v9 + 4);
  if (v10 == *(_DWORD *)(v9 + 8))
  {
    v11 = v10 ? 2 * v10 : 1;
    if (v10 < v11)
    {
      v23 = a2[1];
      v24 = *a2;
      v22 = a2[2];
      if (v11)
      {
        v12 = btAlignedAllocInternal((uint64_t)v11 << 6, 16);
        v8 = v22;
        v7 = v23;
        v6 = v24;
        v13 = v12;
        v10 = *(_DWORD *)(v9 + 4);
      }
      else
      {
        v13 = 0;
      }
      if (v10 >= 1)
      {
        v14 = 0;
        v15 = (unint64_t)v10 << 6;
        do
        {
          v16 = (_OWORD *)(v13 + v14);
          v17 = (_OWORD *)(*(_QWORD *)(v9 + 16) + v14);
          *v16 = *v17;
          v16[1] = v17[1];
          v18 = v17[3];
          v16[2] = v17[2];
          v16[3] = v18;
          v14 += 64;
        }
        while (v15 != v14);
      }
      v19 = *(void ***)(v9 + 16);
      if (v19 && *(_BYTE *)(v9 + 24))
      {
        btAlignedFreeInternal(v19);
        v8 = v22;
        v7 = v23;
        v6 = v24;
      }
      *(_BYTE *)(v9 + 24) = 1;
      *(_QWORD *)(v9 + 16) = v13;
      *(_DWORD *)(v9 + 8) = v11;
      v10 = *(_DWORD *)(v9 + 4);
    }
  }
  result = vmaxq_f32(vmaxq_f32(vmaxq_f32(v6, (float32x4_t)xmmword_1DD02C890), v7), v8);
  v21 = (float32x4_t *)(*(_QWORD *)(v9 + 16) + ((uint64_t)v10 << 6));
  *v21 = vminq_f32(vminq_f32(vminq_f32(v6, (float32x4_t)xmmword_1DD02C880), v7), v8);
  v21[1] = result;
  v21[2].i32[0] = -1;
  v21[2].i32[1] = a3;
  v21[2].i32[2] = a4;
  ++*(_DWORD *)(v9 + 4);
  return result;
}

void btPolyhedralConvexShape::btPolyhedralConvexShape(btPolyhedralConvexShape *this)
{
  _QWORD *v1;

  btConvexInternalShape::btConvexInternalShape(this);
  *v1 = off_1EA5976B0;
  v1[9] = 0;
}

void btPolyhedralConvexShape::~btPolyhedralConvexShape(btPolyhedralConvexShape *this)
{
  void (***v2)(_QWORD);

  *(_QWORD *)this = off_1EA5976B0;
  v2 = (void (***)(_QWORD))*((_QWORD *)this + 9);
  if (v2)
  {
    (**v2)(v2);
    btAlignedFreeInternal(*((void ***)this + 9));
  }
  C3DSceneSourcePerformConsistencyCheck(this);
}

uint64_t btPolyhedralConvexShape::initializePolyhedralFeatures(float32x4_t **this, int a2)
{
  float32x4_t **v2;
  float32x4_t *v3;
  btConvexPolyhedron *v4;
  float32x4_t *v5;
  double v6;
  double v7;
  int32x4_t v8;
  int32x4_t v9;
  void **v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  int v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  float v21;
  int v22;
  int v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  __int128 v28;
  double v29;
  double v30;
  double v31;
  int32x4_t v32;
  int32x4_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v41;
  uint64_t v42;
  float32x4_t *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void **v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  unint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  void **v59;
  _DWORD *v60;
  int *v61;
  int v62;
  float32x4_t v63;
  int8x16_t v64;
  uint64_t v65;
  int *v66;
  int *v67;
  float32x4_t v68;
  float32x4_t v69;
  int8x16_t v70;
  float32x4_t v71;
  void **v72;
  float32x4_t *v73;
  int8x16_t v74;
  float32x4_t v75;
  _DWORD *v76;
  void **v77;
  char *v78;
  uint64_t v79;
  float v80;
  int *v81;
  uint64_t v82;
  int8x16_t v83;
  float v84;
  void **v85;
  uint64_t v86;
  int v87;
  int v88;
  _DWORD *v89;
  _DWORD *v90;
  void **v91;
  int v92;
  int v93;
  void **v94;
  int v95;
  uint64_t v96;
  char *v97;
  float32x4_t v98;
  uint64_t v99;
  int v100;
  char *v101;
  float32x4_t v102;
  int8x16_t v103;
  uint64_t v104;
  uint64_t v105;
  _DWORD *v106;
  void **v107;
  int v108;
  int v109;
  uint64_t v110;
  char *v111;
  float32x4_t v112;
  int v113;
  uint64_t i;
  unsigned int v115;
  __int128 v116;
  uint64_t v117;
  int *v118;
  int v119;
  int v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  BOOL v126;
  char *v127;
  char *v128;
  uint64_t j;
  int8x16_t v130;
  uint64_t v131;
  int v132;
  _DWORD *v133;
  int v134;
  uint64_t v135;
  void **v136;
  uint64_t v137;
  _DWORD *v138;
  int *v139;
  int v140;
  uint64_t v141;
  _DWORD *v142;
  uint64_t v143;
  uint64_t k;
  int v145;
  BOOL v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  void **v150;
  int v151;
  uint64_t v152;
  int *v153;
  int v154;
  char v155;
  float32x4_t *v156;
  int v157;
  int v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  void **v166;
  BOOL v167;
  BOOL v168;
  uint64_t v169;
  char *v170;
  float32x4_t *v171;
  int v172;
  float32x4_t **v173;
  void **v174;
  int v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  void **v183;
  void **v185;
  char *v186;
  int *v187;
  __int128 v189;
  uint64_t v190;
  float32x4_t v191;
  __int128 v192;
  uint64_t v193;
  char v194[4];
  int v195;
  int v196;
  void *v197;
  char v198;
  float32x4_t v199;
  char v200[4];
  unsigned int v201;
  int v202;
  void *v203;
  char v204;
  _BYTE v205[4];
  int v206;
  int v207;
  void *v208;
  char v209;
  _BYTE v210[4];
  uint64_t v211;
  void *v212;
  char v213;
  _BYTE v214[4];
  uint64_t v215;
  void *v216;
  char v217;
  uint64_t v218;
  void *v219;
  char v220;
  uint64_t v221;
  void *v222;
  char v223;
  char v224[4];
  uint64_t v225;
  void **v226;
  char v227;
  int8x16_t v228;
  int8x16_t v229;
  __int128 v230;
  uint64_t v231;

  v2 = this;
  v231 = *MEMORY[0x1E0C80C00];
  v3 = this[9];
  if (v3)
  {
    (*(void (**)(float32x4_t *))v3->i64[0])(v3);
    btAlignedFreeInternal((void **)v2[9]);
  }
  v4 = (btConvexPolyhedron *)btAlignedAllocInternal(192, 16);
  btConvexPolyhedron::btConvexPolyhedron(v4);
  v2[9] = v5;
  v227 = 1;
  v226 = 0;
  v225 = 0;
  if (((int (*)(float32x4_t **))(*v2)[12].i64[0])(v2) >= 1)
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    while (1)
    {
      if (v12 == (_DWORD)v11)
      {
        if ((_DWORD)v11)
          v14 = (2 * v11);
        else
          v14 = 1;
        if ((int)v11 < (int)v14)
        {
          if ((_DWORD)v14)
            v15 = (void **)btAlignedAllocInternal(16 * (int)v14, 16);
          else
            v15 = 0;
          if ((int)v11 >= 1)
          {
            v17 = 0;
            do
            {
              *(_OWORD *)&v15[v17] = *(_OWORD *)&v226[v17];
              v17 += 2;
            }
            while (2 * v11 != v17);
            v10 = v226;
          }
          if (v10)
            v18 = v227 == 0;
          else
            v18 = 1;
          if (!v18)
            btAlignedFreeInternal(v10);
          v227 = 1;
          v226 = v15;
          HIDWORD(v225) = v14;
          v16 = v225;
          goto LABEL_26;
        }
        v15 = v10;
        v16 = v11;
      }
      else
      {
        v15 = v10;
        v16 = v12;
      }
      v14 = v11;
LABEL_26:
      v19 = v16 + 1;
      LODWORD(v225) = v16 + 1;
      ((void (*)(float32x4_t **, uint64_t, void **))(*v2)[13].i64[1])(v2, v13, &v15[2 * v12]);
      v13 = (v13 + 1);
      v10 = v15;
      v11 = v14;
      v12 = v19;
      if ((int)v13 >= ((int (*)(float32x4_t **))(*v2)[12].i64[0])(v2))
        goto LABEL_29;
    }
  }
  v19 = 0;
  v15 = 0;
LABEL_29:
  v217 = 1;
  v216 = 0;
  v215 = 0;
  v220 = 1;
  v219 = 0;
  v218 = 0;
  v223 = 1;
  v222 = 0;
  v221 = 0;
  if (a2)
  {
    v229.i8[8] = 1;
    v229.i64[0] = 0;
    *(uint64_t *)((char *)v228.i64 + 4) = 0;
    btGeometryUtil::getPlaneEquationsFromVertices((uint64_t)v224, (uint64_t)&v228);
    v213 = 1;
    v212 = 0;
    v211 = 0;
    if (v228.i32[1] >= 1)
    {
      v20 = 0;
      do
      {
        v189 = *(_OWORD *)(v229.i64[0] + 16 * v20);
        v21 = ((float (*)(float32x4_t **))(*v2)[6].i64[0])(v2);
        v22 = v211;
        if ((_DWORD)v211 == HIDWORD(v211))
        {
          v23 = (_DWORD)v211 ? 2 * v211 : 1;
          if ((int)v211 < v23)
          {
            if (v23)
            {
              v24 = (char *)btAlignedAllocInternal(16 * v23, 16);
              v22 = v211;
            }
            else
            {
              v24 = 0;
            }
            if (v22 >= 1)
            {
              v25 = 0;
              v26 = 16 * v22;
              do
              {
                *(_OWORD *)&v24[v25] = *(_OWORD *)((char *)v212 + v25);
                v25 += 16;
              }
              while (v26 != v25);
            }
            if (v212)
              v27 = v213 == 0;
            else
              v27 = 1;
            if (!v27)
              btAlignedFreeInternal((void **)v212);
            v213 = 1;
            v212 = v24;
            HIDWORD(v211) = v23;
            v22 = v211;
          }
        }
        v28 = v189;
        *((float *)&v28 + 3) = *((float *)&v189 + 3) - v21;
        *((_OWORD *)v212 + v22) = v28;
        LODWORD(v211) = v211 + 1;
        ++v20;
      }
      while (v20 < v228.i32[1]);
    }
    v209 = 1;
    v208 = 0;
    v206 = 0;
    v207 = 0;
    btGeometryUtil::getVerticesFromPlaneEquations((uint64_t)v210, (uint64_t)v205);
    LODWORD(v29) = 0;
    LODWORD(v30) = 0;
    btConvexHullComputer::compute((btConvexHullComputer *)v214, (char *)v208, 0, 16, v206, v29, v30, v31, v32, v33);
    if (v208 && v209)
      btAlignedFreeInternal((void **)v208);
    if (v212 && v213)
      btAlignedFreeInternal((void **)v212);
    if (v229.i64[0] && v229.i8[8])
      btAlignedFreeInternal((void **)v229.i64[0]);
  }
  else
  {
    LODWORD(v6) = 0;
    btConvexHullComputer::compute((btConvexHullComputer *)v214, (char *)v15, 0, 16, v19, 0.0, v6, v7, v8, v9);
  }
  v34 = v221;
  if ((int)v221 < 1)
    v35 = 0;
  else
    v35 = btAlignedAllocInternal(16 * v221, 16);
  v185 = (void **)v35;
  v213 = 1;
  v212 = 0;
  HIDWORD(v211) = 0;
  v228 = 0u;
  v229 = 0u;
  v230 = 0u;
  v229.i8[8] = 1;
  v228.i32[1] = 0;
  if ((v34 & 0x80000000) != 0)
  {
    v38 = 48 * (int)v34;
    v39 = (int)v34 + 1;
    do
      v38 = btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray(v38) + 48;
    while ((_DWORD)v39++);
    goto LABEL_70;
  }
  if (!(_DWORD)v34)
  {
LABEL_70:
    v36 = 0;
    goto LABEL_71;
  }
  v36 = (char *)btAlignedAllocInternal(48 * v34, 16);
  v37 = 0;
  v213 = 1;
  v212 = v36;
  HIDWORD(v211) = v34;
  do
  {
    *(_OWORD *)(btAlignedObjectArray<int>::btAlignedObjectArray((uint64_t)&v36[v37], (uint64_t)&v228) + 32) = v230;
    v37 += 48;
  }
  while (48 * v34 != v37);
LABEL_71:
  LODWORD(v211) = v34;
  if (v229.i64[0])
    v41 = v229.u8[8] == 0;
  else
    v41 = 1;
  if (!v41)
    btAlignedFreeInternal((void **)v229.i64[0]);
  v42 = v215;
  v43 = v2[9];
  v44 = v43->i32[3];
  if (v44 < (int)v215 && v43[1].i32[0] < (int)v215)
  {
    if ((_DWORD)v215)
    {
      v45 = btAlignedAllocInternal(16 * (int)v215, 16);
      v44 = v43->i32[3];
    }
    else
    {
      v45 = 0;
    }
    if (v44 >= 1)
    {
      v46 = 0;
      v47 = 16 * v44;
      do
      {
        *(_OWORD *)(v45 + v46) = *(_OWORD *)(v43[1].i64[1] + v46);
        v46 += 16;
      }
      while (v47 != v46);
    }
    v48 = (void **)v43[1].i64[1];
    if (v48 && v43[2].i8[0])
      btAlignedFreeInternal(v48);
    v43[2].i8[0] = 1;
    v43[1].i64[1] = v45;
    v43[1].i32[0] = v42;
  }
  v43->i32[3] = v42;
  if ((int)v42 >= 1)
  {
    v49 = 0;
    do
    {
      *(_OWORD *)(v2[9][1].i64[1] + v49) = *(_OWORD *)((char *)v216 + v49);
      v49 += 16;
    }
    while (16 * v42 != v49);
  }
  if ((int)v34 <= 0)
  {
    v209 = 1;
    v208 = 0;
    v206 = 0;
    v207 = 0;
    goto LABEL_310;
  }
  v50 = 0;
  v190 = v34;
  do
  {
    v51 = 0;
    v52 = (char *)v219 + 12 * *((int *)v222 + v50);
    v53 = &v36[48 * v50];
    v54 = (unint64_t)v52;
    do
    {
      while (1)
      {
        v55 = *(_DWORD *)(v54 + 12 * *(int *)(v54 + 4) + 8);
        LODWORD(v56) = *((_DWORD *)v53 + 1);
        if ((_DWORD)v56 == *((_DWORD *)v53 + 2))
        {
          v57 = (_DWORD)v56 ? 2 * v56 : 1;
          if ((int)v56 < v57)
          {
            if (v57)
            {
              v58 = btAlignedAllocInternal(4 * v57, 16);
              LODWORD(v56) = *((_DWORD *)v53 + 1);
            }
            else
            {
              v58 = 0;
            }
            v59 = (void **)*((_QWORD *)v53 + 2);
            if ((int)v56 < 1)
            {
              if (!v59)
              {
LABEL_110:
                v53[24] = 1;
                *((_QWORD *)v53 + 2) = v58;
                *((_DWORD *)v53 + 2) = v57;
                LODWORD(v56) = *((_DWORD *)v53 + 1);
                goto LABEL_111;
              }
            }
            else
            {
              v56 = v56;
              v60 = (_DWORD *)v58;
              v61 = (int *)*((_QWORD *)v53 + 2);
              do
              {
                v62 = *v61++;
                *v60++ = v62;
                --v56;
              }
              while (v56);
            }
            if (v53[24])
              btAlignedFreeInternal(v59);
            *((_QWORD *)v53 + 2) = 0;
            goto LABEL_110;
          }
        }
LABEL_111:
        *(_DWORD *)(*((_QWORD *)v53 + 2) + 4 * (int)v56) = v55;
        ++*((_DWORD *)v53 + 1);
        if ((int)v51 <= 1)
          break;
        v67 = (int *)(v54 + 12 * *(int *)(v54 + 4));
        v54 = (unint64_t)&v67[3 * *v67];
        v51 = 2;
        if ((char *)v54 == v52)
          goto LABEL_117;
      }
      v63 = vsubq_f32(*((float32x4_t *)v216 + *(int *)(v54 + 8)), *((float32x4_t *)v216 + v55));
      v63.i32[3] = 0;
      v64 = (int8x16_t)vmulq_f32(v63, v63);
      v65 = v51 + 1;
      *((float32x4_t *)&v228 + v51) = vmulq_n_f32(v63, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v64.i8, *(float32x2_t *)v64.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v64, v64, 8uLL)).f32[0]));
      v66 = (int *)(v54 + 12 * *(int *)(v54 + 4));
      v54 = (unint64_t)&v66[3 * *v66];
      ++v51;
    }
    while ((char *)v54 != v52);
    if (v65 == 2)
    {
LABEL_117:
      *(int8x8_t *)v68.f32 = vext_s8(*(int8x8_t *)v228.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v228, v228, 8uLL), 4uLL);
      v68.i64[1] = v228.i64[0];
      *(int8x8_t *)v69.f32 = vext_s8(*(int8x8_t *)v229.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v229, v229, 8uLL), 4uLL);
      v69.i64[1] = v229.i64[0];
      v70 = (int8x16_t)vsubq_f32(vmulq_f32((float32x4_t)v228, v69), vmulq_f32((float32x4_t)v229, v68));
      v71.i64[0] = vextq_s8(v70, v70, 4uLL).u64[0];
      v71.i64[1] = v70.u32[0];
      v72 = v185;
      v73 = (float32x4_t *)&v185[2 * v50];
      v74 = (int8x16_t)vmulq_f32(v71, v71);
      v75 = vmulq_n_f32(v71, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v74.i8, *(float32x2_t *)v74.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v74, v74, 8uLL)).f32[0]));
      *v73 = v75;
      v36 = (char *)v212;
      v76 = (char *)v212 + 48 * v50;
      v76[8] = v75.i32[0];
      v76[9] = v73->i32[1];
      v76[10] = v73->i32[2];
      v76[11] = 1900671690;
      goto LABEL_119;
    }
    v72 = v185;
    v77 = &v185[2 * v50];
    *v77 = 0;
    v77[1] = 0;
    v36 = (char *)v212;
LABEL_119:
    v78 = &v36[48 * v50];
    v79 = *((unsigned int *)v78 + 1);
    v80 = 1.0e30;
    if ((int)v79 >= 1)
    {
      v81 = (int *)*((_QWORD *)v78 + 2);
      v80 = 1.0e30;
      do
      {
        v82 = *v81++;
        v83 = (int8x16_t)vmulq_f32(*(float32x4_t *)(v2[9][1].i64[1] + 16 * v82), *(float32x4_t *)&v72[2 * v50]);
        v84 = vadd_f32(vpadd_f32(*(float32x2_t *)v83.i8, *(float32x2_t *)v83.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v83, v83, 8uLL)).f32[0];
        if (v80 > v84)
          v80 = v84;
        --v79;
      }
      while (v79);
    }
    *(float *)&v36[48 * v50++ + 44] = -v80;
  }
  while (v50 != v190);
  v209 = 1;
  v208 = 0;
  v206 = 0;
  v207 = 0;
  if ((int)v211 >= 1)
  {
    v85 = 0;
    LODWORD(v86) = 0;
    v87 = 0;
    while (2)
    {
      if ((_DWORD)v86 == v207 && (!(_DWORD)v86 ? (v88 = 1) : (v88 = 2 * v86), (int)v86 < v88))
      {
        if (v88)
        {
          v89 = (_DWORD *)btAlignedAllocInternal(4 * v88, 16);
          LODWORD(v86) = v206;
          v85 = (void **)v208;
        }
        else
        {
          v89 = 0;
        }
        if ((int)v86 >= 1)
        {
          v86 = v86;
          v90 = v89;
          v91 = v85;
          do
          {
            v92 = *(_DWORD *)v91;
            v91 = (void **)((char *)v91 + 4);
            *v90++ = v92;
            --v86;
          }
          while (v86);
          goto LABEL_141;
        }
        if (v85)
        {
LABEL_141:
          if (v209)
            btAlignedFreeInternal(v85);
        }
        v209 = 1;
        v208 = v89;
        v207 = v88;
        LODWORD(v86) = v206;
      }
      else
      {
        v89 = v85;
      }
      v89[(int)v86] = v87;
      LODWORD(v86) = ++v206;
      ++v87;
      v85 = (void **)v89;
      if (v87 < (int)v211)
        continue;
      break;
    }
    if ((_DWORD)v86)
    {
      while (2)
      {
        v93 = *((_DWORD *)v208 + (int)v86 - 1);
        v94 = (void **)btAlignedAllocInternal(4, 16);
        *(_DWORD *)v94 = v93;
        v95 = v206--;
        v96 = (v95 - 2);
        if (v95 < 2)
        {
          LODWORD(v99) = 1;
          goto LABEL_281;
        }
        v97 = (char *)v212 + 48 * v93;
        v98.i64[0] = *((_QWORD *)v97 + 4);
        v98.i64[1] = *((unsigned int *)v97 + 10);
        LODWORD(v99) = 1;
        v100 = 1;
        v191 = v98;
LABEL_148:
        v228.i32[0] = 0;
        v228.i32[0] = *((_DWORD *)v208 + v96);
        v101 = (char *)v212 + 48 * v228.i32[0];
        v102.i64[0] = *((_QWORD *)v101 + 4);
        v102.i64[1] = *((unsigned int *)v101 + 10);
        v103 = (int8x16_t)vmulq_f32(v98, v102);
        if (vadd_f32(vpadd_f32(*(float32x2_t *)v103.i8, *(float32x2_t *)v103.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v103, v103, 8uLL)).f32[0] > 0.999)
        {
          if ((_DWORD)v99 == v100)
          {
            if ((_DWORD)v99)
              v100 = 2 * v99;
            else
              v100 = 1;
            if ((int)v99 >= v100)
            {
              v104 = (uint64_t)v94;
              v100 = v99;
            }
            else
            {
              if (v100)
                v104 = btAlignedAllocInternal(4 * v100, 16);
              else
                v104 = 0;
              if ((int)v99 < 1)
              {
                if (v94)
                  goto LABEL_164;
              }
              else
              {
                v105 = v99;
                v106 = (_DWORD *)v104;
                v107 = v94;
                do
                {
                  v108 = *(_DWORD *)v107;
                  v107 = (void **)((char *)v107 + 4);
                  *v106++ = v108;
                  --v105;
                }
                while (v105);
LABEL_164:
                btAlignedFreeInternal(v94);
              }
            }
          }
          else
          {
            v104 = (uint64_t)v94;
          }
          *(_DWORD *)(v104 + 4 * (int)v99) = v228.i32[0];
          LODWORD(v99) = v99 + 1;
          btAlignedObjectArray<int>::remove((uint64_t)v205, &v228);
          v94 = (void **)v104;
          v98 = v191;
        }
        v146 = v96-- <= 0;
        if (v146)
        {
          if ((int)v99 <= 1)
            goto LABEL_280;
          v109 = 0;
          v110 = 0;
          v204 = 1;
          v203 = 0;
          v201 = 0;
          v202 = 0;
          v199 = 0uLL;
          v186 = (char *)v212;
          v187 = (int *)v94;
          do
          {
            v111 = &v186[48 * *((int *)v94 + v110)];
            v112.i64[0] = *((_QWORD *)v111 + 4);
            v112.i64[1] = *((unsigned int *)v111 + 10);
            v199 = vaddq_f32(v199, v112);
            v113 = *((_DWORD *)v111 + 1);
            if (v113 >= 1)
            {
              for (i = 0; i < v113; ++i)
              {
                v115 = *(_DWORD *)(*((_QWORD *)v111 + 2) + 4 * i);
                v116 = *(_OWORD *)(v2[9][1].i64[1] + 16 * (int)v115);
                if (v109 < 1)
                {
LABEL_176:
                  if (v109 == v202)
                  {
                    v120 = v109 ? 2 * v109 : 1;
                    if (v109 < v120)
                    {
                      v192 = *(_OWORD *)(v2[9][1].i64[1] + 16 * *(int *)(*((_QWORD *)v111 + 2) + 4 * i));
                      if (v120)
                      {
                        v121 = (char *)btAlignedAllocInternal(32 * v120, 16);
                        v109 = v201;
                      }
                      else
                      {
                        v121 = 0;
                      }
                      if (v109 >= 1)
                      {
                        v122 = 0;
                        v123 = 32 * v109;
                        do
                        {
                          v124 = &v121[v122];
                          v125 = (char *)v203 + v122;
                          *(_OWORD *)v124 = *(_OWORD *)((char *)v203 + v122);
                          *((_QWORD *)v124 + 2) = *((_QWORD *)v125 + 2);
                          v122 += 32;
                        }
                        while (v123 != v122);
                      }
                      if (v203)
                        v126 = v204 == 0;
                      else
                        v126 = 1;
                      if (!v126)
                        btAlignedFreeInternal((void **)v203);
                      v204 = 1;
                      v203 = v121;
                      v202 = v120;
                      v109 = v201;
                      v116 = v192;
                    }
                  }
                  v54 = v54 | ((unint64_t)v115 << 32);
                  v127 = (char *)v203 + 32 * v109;
                  *(_OWORD *)v127 = v116;
                  *((_QWORD *)v127 + 2) = v54;
                  v109 = ++v201;
                  v113 = *((_DWORD *)v111 + 1);
                }
                else
                {
                  v117 = v109;
                  v118 = (int *)((char *)v203 + 20);
                  while (1)
                  {
                    v119 = *v118;
                    v118 += 8;
                    if (v119 == v115)
                      break;
                    if (!--v117)
                      goto LABEL_176;
                  }
                }
              }
            }
            ++v110;
            v94 = (void **)v187;
          }
          while (v110 != v99);
          v229.i8[8] = 1;
          v229.i64[0] = 0;
          *(uint64_t *)((char *)v228.i64 + 4) = 0;
          v128 = &v186[48 * *v187];
          for (j = 8; j != 12; ++j)
            v228.i32[j] = *(_DWORD *)&v128[j * 4];
          v198 = 1;
          v197 = 0;
          v195 = 0;
          v196 = 0;
          v130 = (int8x16_t)vmulq_f32(v199, v199);
          v199 = vmulq_n_f32(v199, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v130.i8, *(float32x2_t *)v130.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v130, v130, 8uLL)).f32[0]));
          GrahamScanConvexHull2D((uint64_t)v200, (uint64_t)v194, &v199);
          if (v195 > 0)
          {
            v131 = 0;
            v132 = v228.i32[1];
            while (1)
            {
              v133 = v197;
              if (v132 == v228.i32[2])
                break;
LABEL_217:
              *(_DWORD *)(v229.i64[0] + 4 * v132) = v133[8 * v131 + 5];
              v132 = ++v228.i32[1];
              v141 = v201;
              if ((int)v201 >= 1)
              {
                v142 = (char *)v203 + 20;
                v143 = v201;
                while (*v142 != *((_DWORD *)v197 + 8 * v131 + 5))
                {
                  v142 += 8;
                  if (!--v143)
                    goto LABEL_223;
                }
                *v142 = -1;
              }
LABEL_223:
              if (++v131 >= v195)
                goto LABEL_227;
            }
            if (v132)
              v134 = 2 * v132;
            else
              v134 = 1;
            if (v132 < v134)
            {
              if (v134)
              {
                v135 = btAlignedAllocInternal(4 * v134, 16);
                v132 = v228.i32[1];
              }
              else
              {
                v135 = 0;
              }
              v136 = (void **)v229.i64[0];
              if (v132 >= 1)
              {
                v137 = v132;
                v138 = (_DWORD *)v135;
                v139 = (int *)v229.i64[0];
                do
                {
                  v140 = *v139++;
                  *v138++ = v140;
                  --v137;
                }
                while (v137);
                goto LABEL_213;
              }
              if (v229.i64[0])
              {
LABEL_213:
                if (v229.i8[8])
                  btAlignedFreeInternal(v136);
              }
              v229.i8[8] = 1;
              v229.i64[0] = v135;
              v228.i32[2] = v134;
              v132 = v228.i32[1];
            }
            v94 = (void **)v187;
            goto LABEL_217;
          }
          v141 = v201;
LABEL_227:
          if ((int)v141 >= 1)
          {
            for (k = 0; k != v141; ++k)
            {
              v145 = *((_DWORD *)v203 + 8 * k + 5);
              v146 = v145 == -1 || (int)v211 < 1;
              if (!v146)
              {
                v147 = 0;
                while (2)
                {
                  v148 = v99;
                  v149 = &v186[48 * v147];
                  v150 = v94;
                  while (1)
                  {
                    v151 = *(_DWORD *)v150;
                    v150 = (void **)((char *)v150 + 4);
                    if (v147 == v151)
                      break;
                    if (!--v148)
                    {
                      v152 = *((unsigned int *)v149 + 1);
                      if ((int)v152 >= 1)
                      {
                        v153 = (int *)*((_QWORD *)v149 + 2);
                        while (1)
                        {
                          v154 = *v153++;
                          if (v154 == v145)
                            break;
                          if (!--v152)
                            goto LABEL_243;
                        }
                        v155 = 0;
                        goto LABEL_266;
                      }
                      break;
                    }
                  }
LABEL_243:
                  if (++v147 != v211)
                    continue;
                  break;
                }
              }
            }
          }
          v156 = v2[9];
          v157 = v156[2].i32[3];
          if (v157 == v156[3].i32[0])
          {
            if (v157)
              v158 = 2 * v157;
            else
              v158 = 1;
            if (v157 < v158)
            {
              if (v158)
              {
                v159 = btAlignedAllocInternal(48 * v158, 16);
                v157 = v156[2].i32[3];
              }
              else
              {
                v159 = 0;
              }
              if (v157 >= 1)
              {
                v160 = 0;
                v161 = 48 * v157;
                do
                {
                  v162 = v156[3].i64[1] + v160;
                  *(_OWORD *)(btAlignedObjectArray<int>::btAlignedObjectArray(v159 + v160, v162) + 32) = *(_OWORD *)(v162 + 32);
                  v160 += 48;
                }
                while (v161 != v160);
                v163 = v156[2].u32[3];
                if ((int)v163 >= 1)
                {
                  v164 = 0;
                  v165 = 48 * v163;
                  do
                  {
                    btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray(v156[3].i64[1] + v164);
                    v164 += 48;
                  }
                  while (v165 != v164);
                }
              }
              v166 = (void **)v156[3].i64[1];
              if (v166 && v156[4].i8[0])
                btAlignedFreeInternal(v166);
              v156[4].i8[0] = 1;
              v156[3].i64[1] = v159;
              v156[3].i32[0] = v158;
              v157 = v156[2].i32[3];
            }
            v94 = (void **)v187;
          }
          *(_OWORD *)(btAlignedObjectArray<int>::btAlignedObjectArray(v156[3].i64[1] + 48 * v157, (uint64_t)&v228) + 32) = v230;
          ++v156[2].i32[3];
          v155 = 1;
LABEL_266:
          if (v197)
            v167 = v198 == 0;
          else
            v167 = 1;
          if (!v167)
            btAlignedFreeInternal((void **)v197);
          if (v229.i64[0])
            v168 = v229.u8[8] == 0;
          else
            v168 = 1;
          if (!v168)
            btAlignedFreeInternal((void **)v229.i64[0]);
          if (v203 && v204)
            btAlignedFreeInternal((void **)v203);
          if ((v155 & 1) == 0)
          {
LABEL_280:
            if ((int)v99 >= 1)
            {
LABEL_281:
              v169 = 0;
              v99 = v99;
              v193 = v99;
              do
              {
                v170 = (char *)v212 + 48 * *((int *)v94 + v169);
                btAlignedObjectArray<int>::btAlignedObjectArray((uint64_t)&v228, (uint64_t)v170);
                v230 = *((_OWORD *)v170 + 2);
                v171 = v2[9];
                v172 = v171[2].i32[3];
                if (v172 == v171[3].i32[0])
                {
                  v173 = v2;
                  v174 = v94;
                  if (v172)
                    v175 = 2 * v172;
                  else
                    v175 = 1;
                  if (v172 < v175)
                  {
                    if (v175)
                    {
                      v176 = btAlignedAllocInternal(48 * v175, 16);
                      v172 = v171[2].i32[3];
                    }
                    else
                    {
                      v176 = 0;
                    }
                    if (v172 >= 1)
                    {
                      v177 = 0;
                      v178 = 48 * v172;
                      do
                      {
                        v179 = v171[3].i64[1] + v177;
                        *(_OWORD *)(btAlignedObjectArray<int>::btAlignedObjectArray(v176 + v177, v179) + 32) = *(_OWORD *)(v179 + 32);
                        v177 += 48;
                      }
                      while (v178 != v177);
                      v180 = v171[2].u32[3];
                      if ((int)v180 >= 1)
                      {
                        v181 = 0;
                        v182 = 48 * v180;
                        do
                        {
                          btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray(v171[3].i64[1] + v181);
                          v181 += 48;
                        }
                        while (v182 != v181);
                      }
                    }
                    v183 = (void **)v171[3].i64[1];
                    if (v183 && v171[4].i8[0])
                      btAlignedFreeInternal(v183);
                    v171[4].i8[0] = 1;
                    v171[3].i64[1] = v176;
                    v171[3].i32[0] = v175;
                    v172 = v171[2].i32[3];
                  }
                  v94 = v174;
                  v2 = v173;
                  v99 = v193;
                }
                *(_OWORD *)(btAlignedObjectArray<int>::btAlignedObjectArray(v171[3].i64[1] + 48 * v172, (uint64_t)&v228)+ 32) = v230;
                ++v171[2].i32[3];
                if (v229.i64[0] && v229.i8[8])
                  btAlignedFreeInternal((void **)v229.i64[0]);
                ++v169;
              }
              while (v169 != v99);
            }
          }
          if (v94)
            btAlignedFreeInternal(v94);
          LODWORD(v86) = v206;
          if (!v206)
            break;
          continue;
        }
        goto LABEL_148;
      }
    }
  }
LABEL_310:
  btConvexPolyhedron::initialize(v2[9]);
  if (v208 && v209)
    btAlignedFreeInternal((void **)v208);
  btAlignedObjectArray<btFace>::~btAlignedObjectArray((uint64_t)v210);
  if (v185)
    btAlignedFreeInternal(v185);
  if (v222 && v223)
    btAlignedFreeInternal((void **)v222);
  v223 = 1;
  v222 = 0;
  v221 = 0;
  if (v219 && v220)
    btAlignedFreeInternal((void **)v219);
  v220 = 1;
  v219 = 0;
  v218 = 0;
  if (v216 && v217)
    btAlignedFreeInternal((void **)v216);
  if (v226 && v227)
    btAlignedFreeInternal(v226);
  return 1;
}

uint64_t btAlignedObjectArray<int>::remove(uint64_t result, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;

  v2 = *(unsigned int *)(result + 4);
  if ((int)v2 >= 1)
  {
    v3 = 0;
    v4 = *(_QWORD *)(result + 16);
    while (*(_DWORD *)(v4 + 4 * v3) != *a2)
    {
      if (v2 == ++v3)
        return result;
    }
    if ((int)v2 > (int)v3)
    {
      v5 = v2 - 1;
      v6 = *(_DWORD *)(v4 + 4 * v3);
      *(_DWORD *)(v4 + 4 * v3) = *(_DWORD *)(v4 + 4 * v5);
      *(_DWORD *)(v4 + 4 * v5) = v6;
      --*(_DWORD *)(result + 4);
    }
  }
  return result;
}

void GrahamScanConvexHull2D(uint64_t a1, uint64_t a2, float32x4_t *a3)
{
  float v6;
  float v7;
  float v8;
  float32_t v9;
  float32x4_t v10;
  float v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  float32x4_t *v27;
  float32x4_t v28;
  int8x16_t v29;
  float32x2_t v30;
  float32x4_t v31;
  int8x16_t v32;
  uint64_t v33;
  float32x4_t *v34;
  float32x4_t *v35;
  float32x4_t v36;
  float32x4_t v37;
  float *f32;
  uint64_t v39;
  float32x4_t v40;
  int8x8_t v41;
  float32x4_t v42;
  int8x16_t v43;
  float32x4_t v44;
  int8x16_t v45;
  int8x16_t v46;
  uint64_t v47;
  int v48;
  char v49;
  char v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void **v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t j;
  uint64_t v64;
  uint64_t v65;
  float32x4_t *v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  float32x4_t v70;
  float32x4_t v71;
  int8x8_t v72;
  float32x4_t v73;
  float32x4_t v74;
  int8x8_t v75;
  float32x4_t v76;
  float32x4_t v77;
  int8x16_t v78;
  int8x16_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void **v86;
  BOOL v87;
  float32x4_t *v88;
  float32x4_t v89;

  v6 = a3->f32[2];
  v7 = a3->f32[1];
  if (fabsf(v6) <= 0.70711)
  {
    v11 = 1.0 / sqrtf((float)(v7 * v7) + (float)(a3->f32[0] * a3->f32[0]));
    v10.i64[1] = 0;
    v10.f32[0] = -(float)(v7 * v11);
    v10.f32[1] = a3->f32[0] * v11;
  }
  else
  {
    v8 = 1.0 / sqrtf((float)(v6 * v6) + (float)(v7 * v7));
    v9 = -(float)(v6 * v8);
    v10.i32[0] = 0;
    v10.i32[3] = 0;
    v10.f32[1] = v9;
    v10.f32[2] = v7 * v8;
  }
  v12 = *(_DWORD *)(a1 + 4);
  if (v12 >= 2)
  {
    v25 = 0;
    for (i = 0; i < v12; ++i)
    {
      v27 = *(float32x4_t **)(a1 + 16);
      v28 = v27[v25];
      v29 = (int8x16_t)vmulq_f32(v10, v28);
      v30 = vadd_f32(vpadd_f32(*(float32x2_t *)v29.i8, *(float32x2_t *)v29.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL));
      v31 = *v27;
      v32 = (int8x16_t)vmulq_f32(v10, *v27);
      if ((vcgt_f32(vadd_f32(vpadd_f32(*(float32x2_t *)v32.i8, *(float32x2_t *)v32.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL)), v30).u8[0] & 1) != 0)
      {
        v33 = v27[1].i64[0];
        *v27 = v28;
        v27[1].i64[0] = v27[v25 + 1].i64[0];
        v34 = (float32x4_t *)(*(_QWORD *)(a1 + 16) + v25 * 16);
        *v34 = v31;
        v34[1].i64[0] = v33;
        v12 = *(_DWORD *)(a1 + 4);
      }
      v25 += 2;
    }
    v35 = *(float32x4_t **)(a1 + 16);
    v35[1].i32[0] = -246811958;
    v36 = *v35;
    if (v12 >= 2)
    {
      v37.i64[0] = vextq_s8((int8x16_t)v10, (int8x16_t)v10, 4uLL).u64[0];
      v37.i64[1] = v10.i64[0];
      f32 = v35[3].f32;
      v39 = v12 - 1;
      do
      {
        v40 = vsubq_f32(*(float32x4_t *)(f32 - 4), v36);
        v41 = (int8x8_t)vextq_s8((int8x16_t)v40, (int8x16_t)v40, 8uLL).u64[0];
        v40.i32[3] = 0;
        *(int8x8_t *)v42.f32 = vext_s8(*(int8x8_t *)v40.f32, v41, 4uLL);
        v42.i64[1] = v40.i64[0];
        v43 = (int8x16_t)vsubq_f32(vmulq_f32(v10, v42), vmulq_f32(v37, v40));
        v44.i64[0] = vextq_s8(v43, v43, 4uLL).u64[0];
        v44.i64[1] = v43.u32[0];
        v45 = (int8x16_t)vmulq_f32(*a3, v44);
        v46 = (int8x16_t)vmulq_f32(v40, v40);
        *f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v45.i8, *(float32x2_t *)v45.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v45, v45, 8uLL)).f32[0]/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v46.i8, *(float32x2_t *)v46.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v46, v46, 8uLL)).f32[0]);
        f32 += 8;
        --v39;
      }
      while (v39);
    }
    v89 = v36;
    btAlignedObjectArray<GrahamVector3>::quickSortInternal<btAngleCompareFunc>(a1, &v89, 1, v12 - 1);
    v47 = 0;
    v48 = *(_DWORD *)(a2 + 4);
    v49 = 1;
    do
    {
      v50 = v49;
      v51 = *(_QWORD *)(a1 + 16);
      if (v48 == *(_DWORD *)(a2 + 8))
      {
        v52 = v48 ? 2 * v48 : 1;
        if (v48 < v52)
        {
          if (v52)
          {
            v53 = btAlignedAllocInternal(32 * v52, 16);
            v48 = *(_DWORD *)(a2 + 4);
          }
          else
          {
            v53 = 0;
          }
          if (v48 >= 1)
          {
            v54 = 0;
            v55 = 32 * v48;
            do
            {
              v56 = v53 + v54;
              v57 = *(_QWORD *)(a2 + 16) + v54;
              *(_OWORD *)v56 = *(_OWORD *)v57;
              *(_QWORD *)(v56 + 16) = *(_QWORD *)(v57 + 16);
              v54 += 32;
            }
            while (v55 != v54);
          }
          v58 = *(void ***)(a2 + 16);
          if (v58)
            v59 = *(_BYTE *)(a2 + 24) == 0;
          else
            v59 = 1;
          if (!v59)
            btAlignedFreeInternal(v58);
          *(_BYTE *)(a2 + 24) = 1;
          *(_QWORD *)(a2 + 16) = v53;
          *(_DWORD *)(a2 + 8) = v52;
          v48 = *(_DWORD *)(a2 + 4);
        }
      }
      v49 = 0;
      v60 = v51 + 32 * v47;
      v61 = *(_QWORD *)(a2 + 16) + 32 * v48;
      *(_OWORD *)v61 = *(_OWORD *)v60;
      *(_QWORD *)(v61 + 16) = *(_QWORD *)(v60 + 16);
      v48 = *(_DWORD *)(a2 + 4) + 1;
      *(_DWORD *)(a2 + 4) = v48;
      v47 = 1;
    }
    while ((v50 & 1) != 0);
    v62 = *(unsigned int *)(a1 + 4);
    if ((_DWORD)v62 != 2)
    {
      for (j = 2; j != v62; ++j)
      {
        if (v48 >= 2)
        {
          v64 = *(_QWORD *)(a2 + 16);
          v65 = *(_QWORD *)(a1 + 16);
          v66 = (float32x4_t *)(v65 + 32 * j);
          v67 = 2 * v48;
          v68 = 32 * (v48 - 2);
          v69 = 32 * (v48 - 1);
          while (1)
          {
            v70 = *(float32x4_t *)(v64 + v68);
            v71 = vsubq_f32(v70, *(float32x4_t *)(v64 + v69));
            v72 = (int8x8_t)vextq_s8((int8x16_t)v71, (int8x16_t)v71, 8uLL).u64[0];
            v71.i32[3] = 0;
            v73 = *v66;
            v74 = vsubq_f32(v70, *v66);
            v75 = (int8x8_t)vextq_s8((int8x16_t)v74, (int8x16_t)v74, 8uLL).u64[0];
            v74.i32[3] = 0;
            *(int8x8_t *)v76.f32 = vext_s8(*(int8x8_t *)v71.f32, v72, 4uLL);
            v76.i64[1] = v71.i64[0];
            *(int8x8_t *)v77.f32 = vext_s8(*(int8x8_t *)v74.f32, v75, 4uLL);
            v77.i64[1] = v74.i64[0];
            v78 = (int8x16_t)vsubq_f32(vmulq_f32(v77, v71), vmulq_f32(v76, v74));
            v71.i64[0] = vextq_s8(v78, v78, 4uLL).u64[0];
            v71.i64[1] = v78.u32[0];
            v79 = (int8x16_t)vmulq_f32(*a3, v71);
            if (vadd_f32(vpadd_f32(*(float32x2_t *)v79.i8, *(float32x2_t *)v79.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v79, v79, 8uLL)).f32[0] > 0.0)break;
            *(_DWORD *)(a2 + 4) = --v48;
            v67 -= 2;
            v68 -= 32;
            v69 -= 32;
            if ((v48 + 1) < 3)
              goto LABEL_71;
          }
          if (*(_DWORD *)(a2 + 8) == v48 && v48 < v67)
          {
            v80 = btAlignedAllocInternal(32 * v67, 16);
            v64 = v80;
            v81 = *(unsigned int *)(a2 + 4);
            if ((int)v81 >= 1)
            {
              v82 = 0;
              v83 = 32 * v81;
              do
              {
                v84 = v80 + v82;
                v85 = *(_QWORD *)(a2 + 16) + v82;
                *(_OWORD *)v84 = *(_OWORD *)v85;
                *(_QWORD *)(v84 + 16) = *(_QWORD *)(v85 + 16);
                v82 += 32;
              }
              while (v83 != v82);
            }
            v86 = *(void ***)(a2 + 16);
            if (v86)
              v87 = *(_BYTE *)(a2 + 24) == 0;
            else
              v87 = 1;
            if (!v87)
              btAlignedFreeInternal(v86);
            *(_BYTE *)(a2 + 24) = 1;
            *(_QWORD *)(a2 + 16) = v64;
            *(_DWORD *)(a2 + 8) = v67;
            v48 = *(_DWORD *)(a2 + 4);
            v73 = *v66;
          }
          v88 = (float32x4_t *)(v64 + 32 * v48);
          *v88 = v73;
          v88[1].i64[0] = *(_QWORD *)(v65 + 32 * j + 16);
          v48 = *(_DWORD *)(a2 + 4) + 1;
          *(_DWORD *)(a2 + 4) = v48;
LABEL_71:
          v62 = *(unsigned int *)(a1 + 4);
        }
      }
    }
  }
  else if (v12 == 1)
  {
    v13 = 0;
    v14 = *(_DWORD *)(a2 + 4);
    do
    {
      v15 = *(_QWORD *)(a1 + 16);
      if (v14 == *(_DWORD *)(a2 + 8))
      {
        v16 = v14 ? 2 * v14 : 1;
        if (v14 < v16)
        {
          if (v16)
          {
            v17 = btAlignedAllocInternal(32 * v16, 16);
            v14 = *(_DWORD *)(a2 + 4);
          }
          else
          {
            v17 = 0;
          }
          if (v14 >= 1)
          {
            v18 = 0;
            v19 = 32 * v14;
            do
            {
              v20 = v17 + v18;
              v21 = *(_QWORD *)(a2 + 16) + v18;
              *(_OWORD *)v20 = *(_OWORD *)v21;
              *(_QWORD *)(v20 + 16) = *(_QWORD *)(v21 + 16);
              v18 += 32;
            }
            while (v19 != v18);
          }
          v22 = *(void ***)(a2 + 16);
          if (v22)
            v23 = *(_BYTE *)(a2 + 24) == 0;
          else
            v23 = 1;
          if (!v23)
            btAlignedFreeInternal(v22);
          *(_BYTE *)(a2 + 24) = 1;
          *(_QWORD *)(a2 + 16) = v17;
          *(_DWORD *)(a2 + 8) = v16;
          v14 = *(_DWORD *)(a2 + 4);
        }
      }
      v24 = *(_QWORD *)(a2 + 16) + 32 * v14;
      *(_OWORD *)v24 = *(_OWORD *)v15;
      *(_QWORD *)(v24 + 16) = *(_QWORD *)(v15 + 16);
      v14 = *(_DWORD *)(a2 + 4) + 1;
      *(_DWORD *)(a2 + 4) = v14;
      ++v13;
    }
    while (v13 < *(_DWORD *)(a1 + 4));
  }
}

uint64_t btPolyhedralConvexShape::localGetSupportingVertexWithoutMargin@<X0>(btPolyhedralConvexShape *this@<X0>, float32x4_t *a2@<X1>, float32x4_t *a3@<X8>)
{
  float32x4_t v5;
  int8x16_t v6;
  float v7;
  float32x4_t v8;
  uint64_t result;
  int v10;
  float v11;
  int v12;
  int v13;
  float v14;
  uint64_t v15;
  unint64_t v16;
  _OWORD *v17;
  uint64_t v18;
  int8x16_t v19;
  float v20;
  int v21;
  float v22;
  float32x4_t v23;
  float32x4_t v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  a3->i64[0] = 0;
  a3->i64[1] = 0;
  v5 = *a2;
  v6 = (int8x16_t)vmulq_f32(v5, v5);
  v7 = vadd_f32(vpadd_f32(*(float32x2_t *)v6.i8, *(float32x2_t *)v6.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)).f32[0];
  if (v7 >= 0.0001)
    v8 = vmulq_n_f32(v5, 1.0 / sqrtf(v7));
  else
    v8 = (float32x4_t)xmmword_1DD007970;
  v23 = v8;
  v22 = 0.0;
  result = (*(uint64_t (**)(btPolyhedralConvexShape *))(*(_QWORD *)this + 192))(this);
  if ((int)result >= 1)
  {
    v10 = 0;
    v11 = -1.0e18;
    do
    {
      if ((int)((*(uint64_t (**)(btPolyhedralConvexShape *))(*(_QWORD *)this + 192))(this) - v10) > 127)
      {
        v12 = 128;
      }
      else
      {
        v12 = (*(uint64_t (**)(btPolyhedralConvexShape *))(*(_QWORD *)this + 192))(this) - v10;
        if (v12 < 1)
        {
          v13 = -1;
          v14 = -3.4028e38;
          goto LABEL_17;
        }
      }
      v15 = 0;
      v16 = v12;
      v17 = (_OWORD *)v24;
      do
        (*(void (**)(btPolyhedralConvexShape *, uint64_t, _OWORD *))(*(_QWORD *)this + 216))(this, v15++, v17++);
      while (v16 != v15);
      if ((int)v16 > 3)
      {
        v21 = _maxdot_large(v24[0].f32, v23.f32, v16, &v22);
        v14 = v22;
        goto LABEL_19;
      }
      v18 = 0;
      v13 = -1;
      v14 = -3.4028e38;
      do
      {
        v19 = (int8x16_t)vmulq_f32(v24[v18], v23);
        v20 = vadd_f32(vpadd_f32(*(float32x2_t *)v19.i8, *(float32x2_t *)v19.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL)).f32[0];
        if (v20 > v14)
        {
          v14 = v20;
          v13 = v18;
        }
        ++v18;
      }
      while (v16 != v18);
LABEL_17:
      v22 = v14;
      v21 = v13;
LABEL_19:
      if (v14 > v11)
      {
        *a3 = v24[v21];
        v11 = v14;
      }
      v10 += 128;
      result = (*(uint64_t (**)(btPolyhedralConvexShape *))(*(_QWORD *)this + 192))(this);
    }
    while (v10 < (int)result);
  }
  return result;
}

uint64_t btPolyhedralConvexShape::batchedUnitVectorGetSupportingVertexWithoutMargin(uint64_t this, const btVector3 *a2, btVector3 *a3, int a4)
{
  uint64_t v4;
  float *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  float32x4_t *v9;
  btVector3 *v10;
  int v11;
  int v12;
  float v13;
  uint64_t v14;
  unint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  int8x16_t v18;
  float v19;
  int v20;
  uint64_t v23;
  float v24;
  float32x4_t v25[128];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (a4 >= 1)
  {
    v4 = this;
    v5 = &a3->var0.var0[3];
    v6 = a4;
    v23 = a4;
    do
    {
      *v5 = -1.0e18;
      v5 += 4;
      --v6;
    }
    while (v6);
    v7 = 0;
    v24 = 0.0;
    while (1)
    {
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 192))(v4);
      if ((int)this >= 1)
        break;
LABEL_23:
      if (++v7 == v23)
        return this;
    }
    v8 = 0;
    v9 = (float32x4_t *)&a2[v7];
    v10 = &a3[v7];
    while (1)
    {
      if ((int)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 192))(v4) - v8) > 127)
      {
        v11 = 128;
      }
      else
      {
        v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 192))(v4) - v8;
        if (v11 < 1)
        {
          v12 = -1;
          v13 = -3.4028e38;
          goto LABEL_18;
        }
      }
      v14 = 0;
      v15 = v11;
      v16 = (_OWORD *)v25;
      do
        (*(void (**)(uint64_t, uint64_t, _OWORD *))(*(_QWORD *)v4 + 216))(v4, v14++, v16++);
      while (v15 != v14);
      if ((int)v15 > 3)
      {
        v20 = _maxdot_large(v25[0].f32, v9->f32, v15, &v24);
        v13 = v24;
        goto LABEL_20;
      }
      v17 = 0;
      v12 = -1;
      v13 = -3.4028e38;
      do
      {
        v18 = (int8x16_t)vmulq_f32(v25[v17], *v9);
        v19 = vadd_f32(vpadd_f32(*(float32x2_t *)v18.i8, *(float32x2_t *)v18.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL)).f32[0];
        if (v19 > v13)
        {
          v13 = v19;
          v12 = v17;
        }
        ++v17;
      }
      while (v15 != v17);
LABEL_18:
      v24 = v13;
      v20 = v12;
LABEL_20:
      if (v13 > v10->var0.var0[3])
      {
        *v10 = (btVector3)v25[v20];
        v10->var0.var0[3] = v13;
      }
      v8 += 128;
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 192))(v4);
      if (v8 >= (int)this)
        goto LABEL_23;
    }
  }
  return this;
}

float32x4_t btPolyhedralConvexShape::calculateLocalInertia(btPolyhedralConvexShape *this, float a2, btVector3 *a3)
{
  float32x4_t v6;
  int8x16_t v7;
  float32x4_t v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v11;
  float32x4_t result;
  int32x2_t v13;
  float32x4_t v14;
  float32x4_t v15;
  _OWORD v16[3];
  uint64_t v17;
  uint64_t v18;

  v13 = COERCE_INT32X2_T((*(double (**)(btPolyhedralConvexShape *))(*(_QWORD *)this + 96))(this));
  v16[0] = xmmword_1DD007970;
  v16[1] = xmmword_1DD007920;
  v16[2] = xmmword_1DD007600;
  v17 = 0;
  v18 = 0;
  (*(void (**)(btPolyhedralConvexShape *, _OWORD *, float32x4_t *, float32x4_t *))(*(_QWORD *)this + 16))(this, v16, &v15, &v14);
  v6.i64[0] = 0x3F0000003F000000;
  v6.i64[1] = 0x3F0000003F000000;
  v7 = (int8x16_t)vmulq_f32(vsubq_f32(v14, v15), v6);
  v8 = (float32x4_t)vextq_s8(v7, v7, 8uLL);
  v8.i32[1] = v7.i32[0];
  v9 = vadd_f32((float32x2_t)vdup_lane_s32(v13, 0), *(float32x2_t *)v8.f32);
  v10 = vadd_f32(v9, v9);
  v11 = vmul_f32(v10, v10);
  *(int32x2_t *)v8.f32 = vdup_lane_s32((int32x2_t)v11, 0);
  v8.f32[0] = (float)((float)(*(float *)v13.i32 + *(float *)&v7.i32[1])
                    + (float)(*(float *)v13.i32 + *(float *)&v7.i32[1]))
            * (float)((float)(*(float *)v13.i32 + *(float *)&v7.i32[1])
                    + (float)(*(float *)v13.i32 + *(float *)&v7.i32[1]));
  *(float32x2_t *)v8.f32 = vadd_f32(v11, *(float32x2_t *)v8.f32);
  v8.f32[2] = v11.f32[1]
            + (float)((float)((float)(*(float *)v13.i32 + *(float *)&v7.i32[1])
                            + (float)(*(float *)v13.i32 + *(float *)&v7.i32[1]))
                    * (float)((float)(*(float *)v13.i32 + *(float *)&v7.i32[1])
                            + (float)(*(float *)v13.i32 + *(float *)&v7.i32[1])));
  result = vmulq_n_f32(v8, a2 * 0.083333);
  result.i32[3] = 0;
  *a3 = (btVector3)result;
  return result;
}

uint64_t btPolyhedralConvexAabbCachingShape::setLocalScaling(float32x4_t *this, float32x4_t *a2)
{
  btConvexInternalShape::setLocalScaling(this, a2);
  return btPolyhedralConvexAabbCachingShape::recalcLocalAabb((btPolyhedralConvexAabbCachingShape *)this);
}

uint64_t btPolyhedralConvexAabbCachingShape::recalcLocalAabb(btPolyhedralConvexAabbCachingShape *this)
{
  unsigned __int8 v2;
  float *v3;
  uint64_t result;
  float v5;
  float *v6;
  uint64_t v7;
  _OWORD v8[6];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *((_BYTE *)this + 112) = 1;
  if ((v2 & 1) == 0
  {
    btPolyhedralConvexAabbCachingShape::recalcLocalAabb(void)::_directions = 1065353216;
    unk_1F03C666C = 0;
    unk_1F03C6664 = 0;
    dword_1F03C6674 = 1065353216;
    qword_1F03C6678 = 0;
    unk_1F03C6680 = 0;
    qword_1F03C6688 = 1065353216;
    dword_1F03C6690 = -1082130432;
    unk_1F03C669C = 0;
    unk_1F03C6694 = 0;
    dword_1F03C66A4 = -1082130432;
    qword_1F03C66A8 = 0;
    unk_1F03C66B0 = 0;
    qword_1F03C66B8 = 3212836864;
  }
  memset(v8, 0, sizeof(v8));
  v3 = (float *)v8;
  result = (*(uint64_t (**)(btPolyhedralConvexAabbCachingShape *, int *, _OWORD *, uint64_t))(*(_QWORD *)this + 152))(this, &btPolyhedralConvexAabbCachingShape::recalcLocalAabb(void)::_directions, v8, 6);
  v5 = *((float *)this + 16);
  v6 = (float *)((char *)this + 96);
  v7 = -48;
  do
  {
    *v6 = *v3 + v5;
    *(v6 - 4) = v3[12] - v5;
    ++v6;
    v3 += 5;
    v7 += 16;
  }
  while (v7);
  return result;
}

void btPolyhedralConvexAabbCachingShape::btPolyhedralConvexAabbCachingShape(btPolyhedralConvexAabbCachingShape *this)
{
  uint64_t v1;

  btConvexInternalShape::btConvexInternalShape(this);
  *(_QWORD *)(v1 + 72) = 0;
  *(_QWORD *)v1 = off_1EA598270;
  *(_OWORD *)(v1 + 80) = xmmword_1DD008470;
  *(_OWORD *)(v1 + 96) = xmmword_1DD02A730;
  *(_BYTE *)(v1 + 112) = 0;
}

float32x4_t btPolyhedralConvexAabbCachingShape::getAabb(float32x4_t *this, const btTransform *a2, btVector3 *a3, btVector3 *a4)
{
  int32x2_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  int8x16_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int8x16_t v21;
  float32x4_t v22;
  float32x4_t v23;
  int8x16_t v24;
  int8x16_t v25;
  btVector3 v26;
  float32x4_t result;

  *(double *)&v8 = (*(double (**)(float32x4_t *))(this->i64[0] + 96))(this);
  v10 = this[5];
  v9 = this[6];
  v11 = (float32x4_t)a2->var0.var0[1];
  v12 = (float32x4_t)a2->var0.var0[2];
  v13 = (float32x4_t)vandq_s8((int8x16_t)v12, (int8x16_t)xmmword_1DD02C930);
  v14.i64[0] = 0x3F0000003F000000;
  v14.i64[1] = 0x3F0000003F000000;
  v15 = vmulq_f32(vaddq_f32(v9, v10), v14);
  v16 = (int8x16_t)vmulq_f32(v12, v15);
  v15.i32[3] = 0;
  v17 = vmulq_f32(vsubq_f32(v9, v10), v14);
  v17.i32[3] = 0;
  v18 = (float32x4_t)vdupq_lane_s32(v8, 0);
  v18.i32[3] = 0;
  v19 = vaddq_f32(v18, v17);
  v20 = vmulq_f32((float32x4_t)a2->var0.var0[0], v15);
  v21 = (int8x16_t)vmulq_f32(v11, v15);
  v16.i32[3] = 0;
  *(float32x2_t *)v20.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v21.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL)));
  *(float32x2_t *)&v20.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v16.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL)), 0);
  v22 = vaddq_f32((float32x4_t)a2->var1, v20);
  v23 = vmulq_f32(v19, (float32x4_t)vandq_s8((int8x16_t)a2->var0.var0[0], (int8x16_t)xmmword_1DD02C930));
  v24 = (int8x16_t)vmulq_f32(v19, (float32x4_t)vandq_s8((int8x16_t)v11, (int8x16_t)xmmword_1DD02C930));
  v25 = (int8x16_t)vmulq_f32(v19, v13);
  v25.i32[3] = 0;
  *(float32x2_t *)v23.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v24.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL)));
  *(float32x2_t *)&v23.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v25.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL)), 0);
  v26 = (btVector3)vsubq_f32(v22, v23);
  v26.var0.var0[3] = 0.0;
  *a3 = v26;
  result = vaddq_f32(v22, v23);
  *a4 = (btVector3)result;
  return result;
}

uint64_t btPolyhedralConvexShape::getNumVertices(btPolyhedralConvexShape *this)
{
  return 0;
}

uint64_t btPolyhedralConvexShape::getNumEdges(btPolyhedralConvexShape *this)
{
  return 0;
}

uint64_t btAlignedObjectArray<GrahamVector3>::quickSortInternal<btAngleCompareFunc>(uint64_t result, float32x4_t *a2, int a3, int a4)
{
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  float32x4_t v11;
  float v12;
  int v13;
  int v14;
  float32x4_t v15;
  float32x4_t v16;
  uint64_t v17;
  int8x16_t v18;
  float32x2_t v19;
  uint64_t i;
  float32x4_t v21;
  int8x16_t v22;
  float32x2_t v23;
  unsigned __int8 v24;
  BOOL v25;
  uint64_t j;
  uint64_t v27;
  float v28;
  float32x2_t v29;
  float32x4_t v30;
  int8x16_t v31;
  unsigned __int8 v32;
  BOOL v33;
  _QWORD *v34;
  __int128 v35;
  uint64_t v36;
  _QWORD *v37;

  v7 = result;
  do
  {
    v8 = a3;
    v9 = a3 + a4;
    if (a3 + a4 < 0 != __OFADD__(a3, a4))
      ++v9;
    v10 = *(_QWORD *)(v7 + 16) + 32 * ((uint64_t)v9 >> 1);
    v11 = *(float32x4_t *)v10;
    v12 = *(float *)(v10 + 16);
    v13 = *(_DWORD *)(v10 + 20);
    v14 = a4;
    do
    {
      v15 = *a2;
      v16 = vsubq_f32(v11, *a2);
      v16.i32[3] = 0;
      v17 = *(_QWORD *)(v7 + 16);
      v18 = (int8x16_t)vmulq_f32(v16, v16);
      v19 = (float32x2_t)vextq_s8(v18, v18, 8uLL).u64[0];
      for (i = v17 + 32 * a3 + 16; *(float *)i != v12; i += 32)
      {
        if (*(float *)i >= v12)
          goto LABEL_14;
LABEL_13:
        ++a3;
      }
      v21 = vsubq_f32(*(float32x4_t *)(i - 16), v15);
      v21.i32[3] = 0;
      v22 = (int8x16_t)vmulq_f32(v21, v21);
      *(float32x2_t *)v22.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v22.i8, *(float32x2_t *)v22.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL));
      v23 = vadd_f32(vpadd_f32(*(float32x2_t *)v18.i8, *(float32x2_t *)v18.i8), v19);
      v24 = vcgt_f32(v23, *(float32x2_t *)v22.i8).u8[0];
      if ((vmvn_s8((int8x8_t)vceq_f32(*(float32x2_t *)v22.i8, v23)).u8[0] & 1) != 0)
        v25 = v24;
      else
        v25 = *(_DWORD *)(i + 4) < v13;
      if (v25)
        goto LABEL_13;
LABEL_14:
      for (j = (32 * v14) | 0x10; ; j -= 32)
      {
        v27 = v17 + j;
        v28 = *(float *)(v17 + j);
        if (v12 == v28)
          break;
        if (v12 >= v28)
          goto LABEL_22;
LABEL_21:
        --v14;
      }
      v29 = vadd_f32(vpadd_f32(*(float32x2_t *)v18.i8, *(float32x2_t *)v18.i8), v19);
      v30 = vsubq_f32(*(float32x4_t *)(v27 - 16), v15);
      v30.i32[3] = 0;
      v31 = (int8x16_t)vmulq_f32(v30, v30);
      *(float32x2_t *)v31.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v31.i8, *(float32x2_t *)v31.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL));
      v32 = vcgt_f32(*(float32x2_t *)v31.i8, v29).u8[0];
      v33 = v13 < *(_DWORD *)(v27 + 4);
      if ((vmvn_s8((int8x8_t)vceq_f32(v29, *(float32x2_t *)v31.i8)).u8[0] & 1) != 0)
        v33 = v32;
      if (v33)
        goto LABEL_21;
LABEL_22:
      if (a3 <= v14)
      {
        v34 = (_QWORD *)(v17 + j);
        v35 = *(_OWORD *)(i - 16);
        v36 = *(_QWORD *)i;
        *(_OWORD *)(i - 16) = *((_OWORD *)v34 - 1);
        *(_QWORD *)i = *v34;
        v37 = (_QWORD *)(*(_QWORD *)(v7 + 16) + j);
        *((_OWORD *)v37 - 1) = v35;
        *v37 = v36;
        ++a3;
        --v14;
      }
    }
    while (a3 <= v14);
    if (v14 > v8)
      result = btAlignedObjectArray<GrahamVector3>::quickSortInternal<btAngleCompareFunc>(v7, a2);
  }
  while (a3 < a4);
  return result;
}

uint64_t btAlignedObjectArray<int>::btAlignedObjectArray(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _DWORD *v5;
  uint64_t v6;
  void **v7;
  _DWORD *v8;
  int *v9;
  int v10;
  int *v11;
  int v12;

  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  v3 = *(unsigned int *)(a2 + 4);
  if ((int)v3 < 1)
  {
    *(_DWORD *)(a1 + 4) = v3;
    return a1;
  }
  v5 = (_DWORD *)btAlignedAllocInternal(4 * v3, 16);
  v6 = *(unsigned int *)(a1 + 4);
  v7 = *(void ***)(a1 + 16);
  if ((int)v6 >= 1)
  {
    v8 = v5;
    v9 = *(int **)(a1 + 16);
    do
    {
      v10 = *v9++;
      *v8++ = v10;
      --v6;
    }
    while (v6);
    goto LABEL_7;
  }
  if (v7)
  {
LABEL_7:
    if (*(_BYTE *)(a1 + 24))
      btAlignedFreeInternal(v7);
    *(_BYTE *)(a1 + 24) = 1;
    *(_QWORD *)(a1 + 16) = v5;
    *(_DWORD *)(a1 + 8) = v3;
    goto LABEL_10;
  }
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 8) = v3;
LABEL_10:
  bzero(v5, 4 * v3);
  *(_DWORD *)(a1 + 4) = v3;
  v11 = *(int **)(a2 + 16);
  do
  {
    v12 = *v11++;
    *v5++ = v12;
    --v3;
  }
  while (v3);
  return a1;
}

void btShapeHull::btShapeHull(btShapeHull *this, const btConvexShape *a2)
{
  *((_QWORD *)this + 9) = a2;
  *((_BYTE *)this + 24) = 1;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)((char *)this + 4) = 0;
  *((_BYTE *)this + 56) = 1;
  *((_QWORD *)this + 6) = 0;
  *(_QWORD *)((char *)this + 36) = 0;
  *((_DWORD *)this + 16) = 0;
}

void btShapeHull::~btShapeHull(btShapeHull *this)
{
  void **v2;
  void **v3;

  v2 = (void **)*((_QWORD *)this + 6);
  if (v2 && *((_BYTE *)this + 56))
    btAlignedFreeInternal(v2);
  *((_BYTE *)this + 56) = 1;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 9) = 0;
  *((_DWORD *)this + 10) = 0;
  v3 = (void **)*((_QWORD *)this + 2);
  if (v3 && *((_BYTE *)this + 24))
    btAlignedFreeInternal(v3);
  *((_BYTE *)this + 24) = 1;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 1) = 0;
  *((_DWORD *)this + 2) = 0;
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)this + 32);
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)this);
}

BOOL btShapeHull::buildHull(btShapeHull *this, float a2)
{
  __int128 *UnitSpherePoints;
  uint64_t v4;
  int v5;
  btShapeHull *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  int ConvexHull;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  void **v26;
  _DWORD *v27;
  int *v28;
  int v29;
  uint64_t v30;
  _DWORD *v31;
  uint64_t v32;
  BOOL v33;
  _BYTE v35[20];
  void *v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  char v41;
  _BYTE v42[4];
  uint64_t v43;
  void *v44;
  char v45;
  uint64_t v46;
  void *v47;
  char v48;
  _DWORD v49[2];
  _OWORD *v50;
  uint64_t v51;
  uint64_t v52;
  _OWORD v53[62];
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  UnitSpherePoints = (__int128 *)(*(uint64_t (**)(_QWORD, float))(**((_QWORD **)this + 9) + 168))(*((_QWORD *)this + 9), a2);
  if ((int)UnitSpherePoints < 1)
  {
    v7 = 42;
  }
  else
  {
    v4 = 0;
    v5 = (int)UnitSpherePoints;
    do
    {
      v6 = (btShapeHull *)(*(uint64_t (**)(_QWORD, uint64_t, _OWORD *))(**((_QWORD **)this + 9) + 176))(*((_QWORD *)this + 9), v4, v53);
      UnitSpherePoints = btShapeHull::getUnitSpherePoints(v6);
      btShapeHull::getUnitSpherePoints(void)::sUnitSpherePoints[v4++ + 42] = v53[0];
    }
    while (v5 != (_DWORD)v4);
    v7 = v4 + 42;
  }
  v8 = 0;
  do
  {
    v9 = *((_QWORD *)this + 9);
    btShapeHull::getUnitSpherePoints((btShapeHull *)UnitSpherePoints);
    UnitSpherePoints = (__int128 *)(*(_QWORD *(**)(_BYTE *__return_ptr, uint64_t, __int128 *))(*(_QWORD *)v9 + 128))(v35, v9, &btShapeHull::getUnitSpherePoints(void)::sUnitSpherePoints[v8]);
    v53[v8++] = *(_OWORD *)v35;
  }
  while (v7 != v8);
  v52 = 0x100000001000;
  v49[0] = 1;
  v49[1] = v7;
  v50 = v53;
  v51 = 0x3A83126F00000010;
  v45 = 1;
  v44 = 0;
  v43 = 0;
  v48 = 1;
  v47 = 0;
  v46 = 0;
  v37 = 1;
  v36 = 0;
  *(_QWORD *)&v35[12] = 0;
  v41 = 1;
  v40 = 0;
  v39 = 0;
  v35[0] = 1;
  *(_DWORD *)&v35[4] = 0;
  v38 = 0;
  ConvexHull = HullLibrary::CreateConvexHull((HullLibrary *)v42, (uint64_t)v49, (uint64_t)v35, 0.0, v10, v11);
  if (ConvexHull == 1)
    goto LABEL_44;
  v13 = *(_DWORD *)&v35[4];
  v14 = *((_DWORD *)this + 1);
  v15 = *(_DWORD *)&v35[4];
  if (v14 < *(int *)&v35[4])
  {
    v15 = *(_DWORD *)&v35[4];
    if (*((_DWORD *)this + 2) < *(int *)&v35[4])
    {
      if (*(_DWORD *)&v35[4])
      {
        v16 = btAlignedAllocInternal(16 * *(int *)&v35[4], 16);
        v14 = *((_DWORD *)this + 1);
      }
      else
      {
        v16 = 0;
      }
      if (v14 >= 1)
      {
        v17 = 0;
        v18 = 16 * v14;
        do
        {
          *(_OWORD *)(v16 + v17) = *(_OWORD *)(*((_QWORD *)this + 2) + v17);
          v17 += 16;
        }
        while (v18 != v17);
      }
      v19 = (void **)*((_QWORD *)this + 2);
      if (v19 && *((_BYTE *)this + 24))
        btAlignedFreeInternal(v19);
      *((_BYTE *)this + 24) = 1;
      *((_QWORD *)this + 2) = v16;
      *((_DWORD *)this + 2) = v13;
      v15 = *(_DWORD *)&v35[4];
    }
  }
  *((_DWORD *)this + 1) = v13;
  if (v15 >= 1)
  {
    v20 = 0;
    do
    {
      *(_OWORD *)(*((_QWORD *)this + 2) + 16 * v20) = *((_OWORD *)v36 + v20);
      ++v20;
    }
    while (v20 < *(int *)&v35[4]);
  }
  v21 = HIDWORD(v38);
  *((_DWORD *)this + 16) = HIDWORD(v38);
  v22 = *((_DWORD *)this + 9);
  v23 = v21;
  if (v22 <= v21)
  {
    if (v22 >= v21)
    {
LABEL_39:
      v23 = *((_DWORD *)this + 16);
      goto LABEL_40;
    }
    if (*((_DWORD *)this + 10) >= v21)
    {
LABEL_38:
      bzero((void *)(*((_QWORD *)this + 6) + 4 * v22), 4 * (v21 + ~v22) + 4);
      goto LABEL_39;
    }
    if (v21)
      v24 = btAlignedAllocInternal(4 * v21, 16);
    else
      v24 = 0;
    LODWORD(v25) = *((_DWORD *)this + 9);
    v26 = (void **)*((_QWORD *)this + 6);
    if ((int)v25 < 1)
    {
      if (!v26)
      {
LABEL_37:
        *((_BYTE *)this + 56) = 1;
        *((_QWORD *)this + 6) = v24;
        *((_DWORD *)this + 10) = v21;
        goto LABEL_38;
      }
    }
    else
    {
      v25 = v25;
      v27 = (_DWORD *)v24;
      v28 = (int *)*((_QWORD *)this + 6);
      do
      {
        v29 = *v28++;
        *v27++ = v29;
        --v25;
      }
      while (v25);
    }
    if (*((_BYTE *)this + 56))
      btAlignedFreeInternal(v26);
    goto LABEL_37;
  }
LABEL_40:
  *((_DWORD *)this + 9) = v21;
  if (v23 >= 1)
  {
    v30 = 0;
    v31 = v40;
    v32 = *((_QWORD *)this + 6);
    do
    {
      *(_DWORD *)(v32 + 4 * v30) = v31[v30];
      ++v30;
    }
    while (v30 < *((int *)this + 16));
  }
  HullLibrary::ReleaseResult((uint64_t)v42, (uint64_t)v35);
LABEL_44:
  if (v40)
    v33 = v41 == 0;
  else
    v33 = 1;
  if (!v33)
    btAlignedFreeInternal((void **)v40);
  v41 = 1;
  v40 = 0;
  v39 = 0;
  if (v36 && v37)
    btAlignedFreeInternal((void **)v36);
  if (v47 && v48)
    btAlignedFreeInternal((void **)v47);
  v48 = 1;
  v47 = 0;
  v46 = 0;
  if (v44 && v45)
    btAlignedFreeInternal((void **)v44);
  return ConvexHull != 1;
}

__int128 *btShapeHull::getUnitSpherePoints(btShapeHull *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0
  {
    btShapeHull::getUnitSpherePoints(void)::sUnitSpherePoints = xmmword_1DD02CB70;
    unk_1F03C66E0 = xmmword_1DD02CB80;
    xmmword_1F03C66F0 = xmmword_1DD02CB90;
    unk_1F03C6700 = xmmword_1DD02CBA0;
    xmmword_1F03C6710 = xmmword_1DD02CBB0;
    unk_1F03C6720 = xmmword_1DD02CBC0;
    xmmword_1F03C6730 = xmmword_1DD02CBD0;
    unk_1F03C6740 = xmmword_1DD02CBE0;
    xmmword_1F03C6750 = xmmword_1DD02CBF0;
    unk_1F03C6760 = xmmword_1DD02CC00;
    xmmword_1F03C6770 = xmmword_1DD02CC10;
    unk_1F03C6780 = xmmword_1DD02CC20;
    xmmword_1F03C6790 = xmmword_1DD02CC30;
    unk_1F03C67A0 = xmmword_1DD02CC40;
    xmmword_1F03C67B0 = xmmword_1DD02CC50;
    unk_1F03C67C0 = xmmword_1DD02CC60;
    xmmword_1F03C67D0 = xmmword_1DD02CC70;
    unk_1F03C67E0 = xmmword_1DD02CC80;
    xmmword_1F03C67F0 = xmmword_1DD02CC90;
    unk_1F03C6800 = xmmword_1DD02CCA0;
    xmmword_1F03C6810 = xmmword_1DD02CCB0;
    unk_1F03C6820 = xmmword_1DD02CCC0;
    xmmword_1F03C6830 = xmmword_1DD02CCD0;
    unk_1F03C6840 = xmmword_1DD02CCE0;
    xmmword_1F03C6850 = xmmword_1DD02CCF0;
    unk_1F03C6860 = xmmword_1DD007A00;
    xmmword_1F03C6870 = xmmword_1DD02CD00;
    unk_1F03C6880 = xmmword_1DD02CD10;
    xmmword_1F03C6890 = xmmword_1DD02CD20;
    unk_1F03C68A0 = xmmword_1DD02CD30;
    xmmword_1F03C68B0 = xmmword_1DD02CD40;
    unk_1F03C68C0 = xmmword_1DD02CD50;
    xmmword_1F03C68D0 = xmmword_1DD02CD60;
    unk_1F03C68E0 = xmmword_1DD02CD70;
    xmmword_1F03C68F0 = xmmword_1DD02CD80;
    unk_1F03C6900 = xmmword_1DD02CD90;
    xmmword_1F03C6910 = xmmword_1DD02CDA0;
    unk_1F03C6920 = xmmword_1DD02CDB0;
    xmmword_1F03C6930 = xmmword_1DD02CDC0;
    unk_1F03C6940 = xmmword_1DD02CDD0;
    xmmword_1F03C6950 = xmmword_1DD02CDE0;
    unk_1F03C6960 = xmmword_1DD02CDF0;
  }
  return &btShapeHull::getUnitSpherePoints(void)::sUnitSpherePoints;
}

unint64_t btShapeHull::numTriangles(btShapeHull *this)
{
  return *((unsigned int *)this + 16) / 3uLL;
}

uint64_t btShapeHull::numVertices(btShapeHull *this)
{
  return *((unsigned int *)this + 1);
}

void btSphereShape::localGetSupportingVertexWithoutMargin(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void btSphereShape::batchedUnitVectorGetSupportingVertexWithoutMargin(btSphereShape *this, const btVector3 *a2, btVector3 *a3, int a4)
{
  if (a4 >= 1)
    bzero(a3, 16 * a4);
}

float32x4_t btSphereShape::localGetSupportingVertex@<Q0>(btSphereShape *this@<X0>, float32x4_t *a2@<X1>, float32x4_t *a3@<X8>)
{
  int8x16_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  int8x16_t v10;
  float32x4_t v11;
  float32x4_t result;
  float32x4_t v13;
  float32x4_t v14;

  (*(void (**)(float32x4_t *__return_ptr))(*(_QWORD *)this + 136))(&v14);
  v13 = v14;
  v6 = (int8x16_t)vmulq_f32(*a2, *a2);
  *(float32x2_t *)v7.f32 = vpadd_f32(*(float32x2_t *)v6.i8, *(float32x2_t *)v6.i8);
  v8 = (float32x4_t)vextq_s8(v6, v6, 8uLL);
  *(float32x2_t *)v8.f32 = vadd_f32(*(float32x2_t *)v7.f32, *(float32x2_t *)v8.f32);
  v7.i32[0] = 679477248;
  v9 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v7, v8), 0), (int8x16_t)xmmword_1DD02A730, *(int8x16_t *)a2);
  v10 = (int8x16_t)vmulq_f32(v9, v9);
  v11 = vmulq_n_f32(vmulq_n_f32(v9, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v10.i8, *(float32x2_t *)v10.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL)).f32[0])), (*(float (**)(btSphereShape *))(*(_QWORD *)this + 96))(this));
  v11.i32[3] = 0;
  result = vaddq_f32(v13, v11);
  *a3 = result;
  return result;
}

float32x4_t btSphereShape::getAabb(btSphereShape *this, const btTransform *a2, btVector3 *a3, btVector3 *a4)
{
  unsigned int v8;
  float32x4_t v9;
  btVector3 v10;
  float32x4_t result;
  unsigned int v12;
  unsigned int v13;

  v13 = COERCE_UNSIGNED_INT64((*(double (**)(btSphereShape *))(*(_QWORD *)this + 96))(this));
  v12 = COERCE_UNSIGNED_INT64((*(double (**)(btSphereShape *))(*(_QWORD *)this + 96))(this));
  *(float *)&v8 = (*(float (**)(btSphereShape *))(*(_QWORD *)this + 96))(this);
  v9.i64[0] = __PAIR64__(v12, v13);
  v9.i64[1] = v8;
  v10 = (btVector3)vsubq_f32((float32x4_t)a2->var1, v9);
  v10.var0.var0[3] = 0.0;
  *a3 = v10;
  result = vaddq_f32(v9, (float32x4_t)a2->var1);
  *a4 = (btVector3)result;
  return result;
}

float btSphereShape::calculateLocalInertia(btSphereShape *this, float a2, btVector3 *a3)
{
  float v5;
  float result;
  btVector3 v7;

  v5 = (float)(a2 * 0.4) * (*(float (**)(btSphereShape *))(*(_QWORD *)this + 96))(this);
  result = v5 * (*(float (**)(btSphereShape *))(*(_QWORD *)this + 96))(this);
  v7 = (btVector3)vzip1q_s32((int32x4_t)LODWORD(result), (int32x4_t)LODWORD(result));
  v7.var0.var0[2] = result;
  *a3 = v7;
  return result;
}

void btSphereShape::~btSphereShape(btSphereShape *this)
{
  void **v1;

  v1 = (void **)C3DSceneSourcePerformConsistencyCheck(this);
  btAlignedFreeInternal(v1);
}

const char *btSphereShape::getName(btSphereShape *this)
{
  return "SPHERE";
}

uint64_t btSphereShape::setMargin(uint64_t this, float a2)
{
  *(float *)(this + 64) = a2;
  return this;
}

float btSphereShape::getMargin(btSphereShape *this)
{
  return *((float *)this + 12) * *((float *)this + 8);
}

void btStaticPlaneShape::btStaticPlaneShape(btStaticPlaneShape *this, float32x4_t *a2, float32_t a3)
{
  float32x4_t *v5;
  int8x16_t v6;

  btConcaveShape::btConcaveShape(this);
  v5->i64[0] = (uint64_t)off_1EA596B78;
  v6 = (int8x16_t)vmulq_f32(*a2, *a2);
  v5[4] = vmulq_n_f32(*a2, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v6.i8, *(float32x2_t *)v6.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)).f32[0]));
  v5[5].f32[0] = a3;
  v5[6].i64[0] = 0;
  v5[6].i64[1] = 0;
  v5->i32[2] = 28;
}

void btStaticPlaneShape::~btStaticPlaneShape(btStaticPlaneShape *this)
{
  void **v1;

  v1 = (void **)C3DSceneSourcePerformConsistencyCheck(this);
  btAlignedFreeInternal(v1);
}

double btStaticPlaneShape::getAabb(btStaticPlaneShape *this, const btTransform *a2, btVector3 *a3, btVector3 *a4)
{
  double result;

  *a3 = (btVector3)xmmword_1DD02C890;
  result = 5.72459157e141;
  *a4 = (btVector3)xmmword_1DD02C880;
  return result;
}

uint64_t btStaticPlaneShape::processAllTriangles(float32x4_t *a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4, double a5, double a6, double a7, float32x4_t a8, double a9, double a10, double a11, int32x4_t a12)
{
  float32x4_t v13;
  float32x4_t v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float32_t v20;
  float32x4_t v21;
  float32x2_t v22;
  float v23;
  float v24;
  float v25;
  float32x2_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int8x16_t v31;
  float32x4_t v32;
  float32x4_t v33;
  int8x16_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v13 = *a4;
  v14 = *a3;
  v15 = a1[4].f32[2];
  if (fabsf(v15) <= 0.70711)
  {
    v22.i32[0] = a1[4].i32[0];
    v23 = a1[4].f32[1];
    v24 = (float)(v23 * v23) + (float)(v22.f32[0] * v22.f32[0]);
    v25 = 1.0 / sqrtf(v24);
    v22.f32[1] = -v23;
    v26.f32[0] = -v15;
    *(float32x2_t *)a12.i8 = vmul_n_f32(v22, v25);
    v21 = (float32x4_t)vrev64q_s32(a12).u64[0];
    v26.i32[1] = a1[4].i32[2];
    *(float32x2_t *)a8.f32 = vmul_f32(*(float32x2_t *)a12.i8, v26);
    a8.f32[2] = v24 * v25;
  }
  else
  {
    v17 = a1[4].f32[0];
    v16 = a1[4].f32[1];
    v18 = (float)(v15 * v15) + (float)(v16 * v16);
    v19 = 1.0 / sqrtf(v18);
    v20 = -(float)(v15 * v19);
    a8.f32[0] = v18 * v19;
    v21.i32[0] = 0;
    v21.i32[3] = 0;
    v21.f32[1] = v20;
    v21.f32[2] = v16 * v19;
    a8.f32[1] = -(float)(v17 * (float)(v16 * v19));
    a8.f32[2] = v17 * v20;
  }
  v27 = a1[4];
  v28.i64[0] = 0x3F0000003F000000;
  v28.i64[1] = 0x3F0000003F000000;
  v29 = vmulq_f32(vaddq_f32(v13, v14), v28);
  v30 = v29;
  v30.i32[3] = 0;
  v31 = (int8x16_t)vmulq_f32(v27, v30);
  v32 = vsubq_f32(v29, vmulq_n_f32(v27, vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL), vpadd_f32(*(float32x2_t *)v31.i8, *(float32x2_t *)v31.i8)).f32[0]- a1[5].f32[0]));
  v32.i32[3] = 0;
  v33 = vmulq_f32(vsubq_f32(v13, v14), v28);
  v33.i32[3] = 0;
  v34 = (int8x16_t)vmulq_f32(v33, v33);
  *(float *)v34.i32 = sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL), vpadd_f32(*(float32x2_t *)v34.i8, *(float32x2_t *)v34.i8)).f32[0]);
  v35 = vmulq_n_f32(v21, *(float *)v34.i32);
  v35.i32[3] = 0;
  v36 = vaddq_f32(v35, v32);
  v37 = vmulq_n_f32(a8, *(float *)v34.i32);
  v38 = vsubq_f32(v36, v37);
  v39 = vsubq_f32(v32, v35);
  v40 = vsubq_f32(v39, v37);
  v37.i32[3] = 0;
  v44 = v37;
  v45 = vaddq_f32(v36, v37);
  v46 = v45;
  v38.i32[3] = 0;
  v39.i32[3] = 0;
  v40.i32[3] = 0;
  v42 = v40;
  v43 = v39;
  v47 = v38;
  v48 = v40;
  (*(void (**)(uint64_t, float32x4_t *, _QWORD, _QWORD))(*(_QWORD *)a2 + 16))(a2, &v46, 0, 0);
  v46 = v42;
  v47 = vaddq_f32(v44, v43);
  v48 = v45;
  return (*(uint64_t (**)(uint64_t, float32x4_t *, _QWORD, uint64_t))(*(_QWORD *)a2 + 16))(a2, &v46, 0, 1);
}

void btStaticPlaneShape::calculateLocalInertia(btStaticPlaneShape *this, float a2, btVector3 *a3)
{
  *a3 = 0uLL;
}

__n128 btStaticPlaneShape::setLocalScaling(btVector3 *this, __n128 *a2)
{
  __n128 result;

  result = *a2;
  this[6] = *(btVector3 *)a2;
  return result;
}

uint64_t btStaticPlaneShape::getLocalScaling(btStaticPlaneShape *this)
{
  return (uint64_t)this + 96;
}

const char *btStaticPlaneShape::getName(btStaticPlaneShape *this)
{
  return "STATICPLANE";
}

uint64_t btStaticPlaneShape::calculateSerializeBufferSize(btStaticPlaneShape *this)
{
  return 56;
}

const char *btStaticPlaneShape::serialize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  uint64_t j;

  btCollisionShape::serialize(a1, a2, a3);
  for (i = 0; i != 16; i += 4)
    *(_DWORD *)(a2 + 16 + i) = *(_DWORD *)(a1 + 96 + i);
  for (j = 0; j != 16; j += 4)
    *(_DWORD *)(a2 + 32 + j) = *(_DWORD *)(a1 + 64 + j);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 80);
  return "btStaticPlaneShapeData";
}

uint64_t btStridingMeshInterface::InternalProcessAllTriangles(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v5;
  uint64_t v6;
  float v7;
  float32x2_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  float32x2_t *v11;
  float v12;
  float32x2_t *v13;
  float v14;
  float32x2_t *v15;
  float v16;
  float32x2_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  float64x2_t *v20;
  float v21;
  float64x2_t *v22;
  float v23;
  float64x2_t *v24;
  float v25;
  float32x2_t v26;
  uint64_t v27;
  _DWORD *v28;
  float32x2_t *v29;
  float v30;
  float32x2_t *v31;
  float v32;
  float32x2_t *v33;
  float v34;
  float32x2_t v35;
  uint64_t v36;
  unsigned __int16 *v37;
  float32x2_t *v38;
  float v39;
  float32x2_t *v40;
  float v41;
  float32x2_t *v42;
  float v43;
  float32x2_t v44;
  uint64_t v45;
  _DWORD *v46;
  float64x2_t *v47;
  float v48;
  float64x2_t *v49;
  float v50;
  float64x2_t *v51;
  float v52;
  float32x2_t v53;
  uint64_t v54;
  unsigned __int16 *v55;
  float64x2_t *v56;
  float v57;
  float64x2_t *v58;
  float v59;
  float64x2_t *v60;
  float v61;
  __int128 v62;
  int v63;
  int v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  float32x2_t v70;
  float v71;
  int v72;
  float32x2_t v73;
  float v74;
  int v75;
  float32x2_t v76;
  float v77;
  int v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  if ((int)result >= 1)
  {
    v5 = result;
    v6 = 0;
    v68 = 0;
    v69 = 0;
    v67 = 0;
    v64 = 0;
    v65 = 0;
    v62 = *(_OWORD *)(a1 + 16);
    LODWORD(v7) = *(_QWORD *)(a1 + 24);
    do
    {
      v63 = 0;
      v66 = 2;
      (*(void (**)(uint64_t, uint64_t *, int *, uint64_t *, int *, uint64_t *, char *, int *, int *, _DWORD))(*(_QWORD *)a1 + 32))(a1, &v69, &v64, &v67, &v65, &v68, (char *)&v67 + 4, &v63, &v66, v6);
      if ((_DWORD)v67 == 1)
      {
        if (v66 == 2)
        {
          v44 = (float32x2_t)v62;
          if (v63 >= 1)
          {
            v45 = 0;
            do
            {
              v46 = (_DWORD *)(v68 + SHIDWORD(v67) * (uint64_t)(int)v45);
              v47 = (float64x2_t *)(v69 + (v65 * *v46));
              v48 = v47[1].f64[0];
              v70 = vmul_f32(v44, vcvt_f32_f64(*v47));
              v71 = v7 * v48;
              v72 = 0;
              v49 = (float64x2_t *)(v69 + (v46[1] * v65));
              v50 = v49[1].f64[0];
              v73 = vmul_f32(v44, vcvt_f32_f64(*v49));
              v74 = v7 * v50;
              v75 = 0;
              v51 = (float64x2_t *)(v69 + (v46[2] * v65));
              v52 = v51[1].f64[0];
              v76 = vmul_f32(v44, vcvt_f32_f64(*v51));
              v77 = v7 * v52;
              v78 = 0;
              (*(void (**)(uint64_t, float32x2_t *, uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, &v70, v6, v45);
              v44 = (float32x2_t)v62;
              v45 = (v45 + 1);
            }
            while ((int)v45 < v63);
          }
        }
        else if (v66 == 3)
        {
          v53 = (float32x2_t)v62;
          if (v63 >= 1)
          {
            v54 = 0;
            do
            {
              v55 = (unsigned __int16 *)(v68 + SHIDWORD(v67) * (uint64_t)(int)v54);
              v56 = (float64x2_t *)(v69 + v65 * (unint64_t)*v55);
              v57 = v56[1].f64[0];
              v70 = vmul_f32(v53, vcvt_f32_f64(*v56));
              v71 = v7 * v57;
              v72 = 0;
              v58 = (float64x2_t *)(v69 + v65 * (unint64_t)v55[1]);
              v59 = v58[1].f64[0];
              v73 = vmul_f32(v53, vcvt_f32_f64(*v58));
              v74 = v7 * v59;
              v75 = 0;
              v60 = (float64x2_t *)(v69 + v65 * (unint64_t)v55[2]);
              v61 = v60[1].f64[0];
              v76 = vmul_f32(v53, vcvt_f32_f64(*v60));
              v77 = v7 * v61;
              v78 = 0;
              (*(void (**)(uint64_t, float32x2_t *, uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, &v70, v6, v54);
              v53 = (float32x2_t)v62;
              v54 = (v54 + 1);
            }
            while ((int)v54 < v63);
          }
        }
        else
        {
          v17 = (float32x2_t)v62;
          if (v66 == 5 && v63 >= 1)
          {
            v18 = 0;
            do
            {
              v19 = (unsigned __int8 *)(v68 + SHIDWORD(v67) * (uint64_t)(int)v18);
              v20 = (float64x2_t *)(v69 + v65 * (unint64_t)*v19);
              v21 = v20[1].f64[0];
              v70 = vmul_f32(v17, vcvt_f32_f64(*v20));
              v71 = v7 * v21;
              v72 = 0;
              v22 = (float64x2_t *)(v69 + v65 * (unint64_t)v19[1]);
              v23 = v22[1].f64[0];
              v73 = vmul_f32(v17, vcvt_f32_f64(*v22));
              v74 = v7 * v23;
              v75 = 0;
              v24 = (float64x2_t *)(v69 + v65 * (unint64_t)v19[2]);
              v25 = v24[1].f64[0];
              v76 = vmul_f32(v17, vcvt_f32_f64(*v24));
              v77 = v7 * v25;
              v78 = 0;
              (*(void (**)(uint64_t, float32x2_t *, uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, &v70, v6, v18);
              v17 = (float32x2_t)v62;
              v18 = (v18 + 1);
            }
            while ((int)v18 < v63);
          }
        }
      }
      else if (!(_DWORD)v67)
      {
        if (v66 == 2)
        {
          v26 = (float32x2_t)v62;
          if (v63 >= 1)
          {
            v27 = 0;
            do
            {
              v28 = (_DWORD *)(v68 + SHIDWORD(v67) * (uint64_t)(int)v27);
              v29 = (float32x2_t *)(v69 + (v65 * *v28));
              v30 = v7 * v29[1].f32[0];
              v70 = vmul_f32(v26, *v29);
              v71 = v30;
              v72 = 0;
              v31 = (float32x2_t *)(v69 + (v28[1] * v65));
              v32 = v7 * v31[1].f32[0];
              v73 = vmul_f32(v26, *v31);
              v74 = v32;
              v75 = 0;
              v33 = (float32x2_t *)(v69 + (v28[2] * v65));
              v34 = v7 * v33[1].f32[0];
              v76 = vmul_f32(v26, *v33);
              v77 = v34;
              v78 = 0;
              (*(void (**)(uint64_t, float32x2_t *, uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, &v70, v6, v27);
              v26 = (float32x2_t)v62;
              v27 = (v27 + 1);
            }
            while ((int)v27 < v63);
          }
        }
        else if (v66 == 3)
        {
          v35 = (float32x2_t)v62;
          if (v63 >= 1)
          {
            v36 = 0;
            do
            {
              v37 = (unsigned __int16 *)(v68 + SHIDWORD(v67) * (uint64_t)(int)v36);
              v38 = (float32x2_t *)(v69 + v65 * (unint64_t)*v37);
              v39 = v7 * v38[1].f32[0];
              v70 = vmul_f32(v35, *v38);
              v71 = v39;
              v72 = 0;
              v40 = (float32x2_t *)(v69 + v65 * (unint64_t)v37[1]);
              v41 = v7 * v40[1].f32[0];
              v73 = vmul_f32(v35, *v40);
              v74 = v41;
              v75 = 0;
              v42 = (float32x2_t *)(v69 + v65 * (unint64_t)v37[2]);
              v43 = v7 * v42[1].f32[0];
              v76 = vmul_f32(v35, *v42);
              v77 = v43;
              v78 = 0;
              (*(void (**)(uint64_t, float32x2_t *, uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, &v70, v6, v36);
              v35 = (float32x2_t)v62;
              v36 = (v36 + 1);
            }
            while ((int)v36 < v63);
          }
        }
        else
        {
          v8 = (float32x2_t)v62;
          if (v66 == 5 && v63 >= 1)
          {
            v9 = 0;
            do
            {
              v10 = (unsigned __int8 *)(v68 + SHIDWORD(v67) * (uint64_t)(int)v9);
              v11 = (float32x2_t *)(v69 + v65 * (unint64_t)*v10);
              v12 = v7 * v11[1].f32[0];
              v70 = vmul_f32(v8, *v11);
              v71 = v12;
              v72 = 0;
              v13 = (float32x2_t *)(v69 + v65 * (unint64_t)v10[1]);
              v14 = v7 * v13[1].f32[0];
              v73 = vmul_f32(v8, *v13);
              v74 = v14;
              v75 = 0;
              v15 = (float32x2_t *)(v69 + v65 * (unint64_t)v10[2]);
              v16 = v7 * v15[1].f32[0];
              v76 = vmul_f32(v8, *v15);
              v77 = v16;
              v78 = 0;
              (*(void (**)(uint64_t, float32x2_t *, uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, &v70, v6, v9);
              v8 = (float32x2_t)v62;
              v9 = (v9 + 1);
            }
            while ((int)v9 < v63);
          }
        }
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, v6);
      v6 = (v6 + 1);
    }
    while ((_DWORD)v6 != v5);
  }
  return result;
}

const char *btStridingMeshInterface::serialize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _WORD *v24;
  _WORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  _DWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t i;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  *(_DWORD *)(a2 + 24) = v6;
  *(_QWORD *)a2 = 0;
  if ((_DWORD)v6)
  {
    v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 56, v6);
    v8 = *(_QWORD *)(v7 + 8);
    *(_QWORD *)a2 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 56))(a3, v8);
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
    v48 = 0;
    v49 = 0;
    v46 = 0;
    v47 = 0;
    v45 = 0;
    if (v9 >= 1)
    {
      v10 = v9;
      v11 = 0;
      do
      {
        (*(void (**)(uint64_t, uint64_t *, char *, uint64_t *, uint64_t *, uint64_t *, char *, uint64_t *, char *, _DWORD))(*(_QWORD *)a1 + 32))(a1, &v49, (char *)&v45 + 4, &v47, &v46, &v48, (char *)&v47 + 4, &v45, (char *)&v46 + 4, v11);
        v12 = v45;
        v13 = HIDWORD(v45);
        *(_DWORD *)(v8 + 48) = v45;
        *(_DWORD *)(v8 + 52) = v13;
        *(_OWORD *)v8 = 0u;
        *(_OWORD *)(v8 + 16) = 0u;
        *(_OWORD *)(v8 + 32) = 0u;
        if (HIDWORD(v46) == 5)
        {
          if (v12)
          {
            v26 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 4);
            v27 = *(_QWORD *)(v26 + 8);
            *(_QWORD *)(v8 + 32) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 56))(a3, v27);
            if ((int)v45 >= 1)
            {
              v28 = 0;
              v29 = (_BYTE *)(v27 + 2);
              do
              {
                v30 = (_BYTE *)(v48 + SHIDWORD(v47) * (uint64_t)(int)v28);
                *(v29 - 2) = *v30;
                *(v29 - 1) = v30[1];
                *v29 = v30[2];
                v29 += 4;
                ++v28;
              }
              while (v28 < (int)v45);
            }
            (*(void (**)(uint64_t, uint64_t, const char *, uint64_t, _QWORD))(*(_QWORD *)a3 + 40))(a3, v26, "btCharIndexTripletData", 1497453121, *(_QWORD *)(v26 + 8));
          }
        }
        else if (HIDWORD(v46) == 3)
        {
          if (v12)
          {
            v20 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 8);
            v21 = *(_QWORD *)(v20 + 8);
            *(_QWORD *)(v8 + 24) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 56))(a3, v21);
            v22 = v45;
            if ((int)v45 >= 1)
            {
              v23 = SHIDWORD(v47);
              v24 = (_WORD *)(v48 + 4);
              v25 = (_WORD *)(v21 + 4);
              do
              {
                *(v25 - 2) = *(v24 - 2);
                *(v25 - 1) = *(v24 - 1);
                *v25 = *v24;
                v25 += 4;
                v24 = (_WORD *)((char *)v24 + v23);
                --v22;
              }
              while (v22);
            }
            (*(void (**)(uint64_t, uint64_t, const char *, uint64_t, _QWORD))(*(_QWORD *)a3 + 40))(a3, v20, "btShortIntIndexTripletData", 1497453121, *(_QWORD *)(v20 + 8));
          }
        }
        else if (HIDWORD(v46) == 2 && v12)
        {
          v14 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a3 + 32))(a3, 4, (3 * v12));
          v15 = *(_QWORD *)(v14 + 8);
          *(_QWORD *)(v8 + 16) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 56))(a3, v15);
          if ((int)v45 >= 1)
          {
            v16 = 0;
            v17 = v48;
            v18 = (_DWORD *)(v15 + 8);
            do
            {
              v19 = (_DWORD *)(v17 + SHIDWORD(v47) * (uint64_t)(int)v16);
              *(v18 - 2) = *v19;
              *(v18 - 1) = v19[1];
              *v18 = v19[2];
              v18 += 3;
              ++v16;
            }
            while (v16 < (int)v45);
          }
          (*(void (**)(uint64_t, uint64_t, const char *, uint64_t, _QWORD))(*(_QWORD *)a3 + 40))(a3, v14, "btIntIndexData", 1497453121, *(_QWORD *)(v14 + 8));
        }
        if ((_DWORD)v47 == 1)
        {
          if (HIDWORD(v45))
          {
            v37 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 32);
            v38 = *(_QWORD *)(v37 + 8);
            *(_QWORD *)(v8 + 8) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 56))(a3, v38);
            v39 = HIDWORD(v45);
            if (SHIDWORD(v45) >= 1)
            {
              v40 = (int)v46;
              v41 = (_QWORD *)(v49 + 16);
              v42 = (_QWORD *)(v38 + 16);
              do
              {
                *(v42 - 2) = *(v41 - 2);
                *(v42 - 1) = *(v41 - 1);
                *v42 = *v41;
                v42 += 4;
                v41 = (_QWORD *)((char *)v41 + v40);
                --v39;
              }
              while (v39);
            }
            (*(void (**)(uint64_t, uint64_t, const char *, uint64_t, _QWORD))(*(_QWORD *)a3 + 40))(a3, v37, "btVector3DoubleData", 1497453121, *(_QWORD *)(v37 + 8));
          }
        }
        else if (!(_DWORD)v47 && HIDWORD(v45))
        {
          v31 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 16);
          v32 = *(_QWORD *)(v31 + 8);
          *(_QWORD *)v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 56))(a3, v32);
          v33 = HIDWORD(v45);
          if (SHIDWORD(v45) >= 1)
          {
            v34 = (int)v46;
            v35 = (_DWORD *)(v49 + 8);
            v36 = (_DWORD *)(v32 + 8);
            do
            {
              *(v36 - 2) = *(v35 - 2);
              *(v36 - 1) = *(v35 - 1);
              *v36 = *v35;
              v36 += 4;
              v35 = (_DWORD *)((char *)v35 + v34);
              --v33;
            }
            while (v33);
          }
          (*(void (**)(uint64_t, uint64_t, const char *, uint64_t, _QWORD))(*(_QWORD *)a3 + 40))(a3, v31, "btVector3FloatData", 1497453121, *(_QWORD *)(v31 + 8));
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, v11);
        v11 = (v11 + 1);
        v8 += 56;
      }
      while ((_DWORD)v11 != v10);
    }
    (*(void (**)(uint64_t, uint64_t, const char *, uint64_t, _QWORD))(*(_QWORD *)a3 + 40))(a3, v7, "btMeshPartData", 1497453121, *(_QWORD *)(v7 + 8));
  }
  for (i = 0; i != 16; i += 4)
    *(_DWORD *)(a2 + 8 + i) = *(_DWORD *)(a1 + 16 + i);
  return "btStridingMeshInterfaceData";
}

void btTriangleIndexVertexArray::~btTriangleIndexVertexArray(btTriangleIndexVertexArray *this)
{
  *(_QWORD *)this = off_1EA597C90;
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)this + 32);
  C3DSceneSourcePerformConsistencyCheck(this);
}

{
  void **v2;

  *(_QWORD *)this = off_1EA597C90;
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)this + 32);
  v2 = (void **)C3DSceneSourcePerformConsistencyCheck(this);
  btAlignedFreeInternal(v2);
}

uint64_t btTriangleIndexVertexArray::getLockedVertexIndexBase(uint64_t result, _QWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, _QWORD *a6, _DWORD *a7, _DWORD *a8, _DWORD *a9, int a10)
{
  uint64_t v10;
  int v11;

  v10 = *(_QWORD *)(result + 48) + 48 * a10;
  *a3 = *(_DWORD *)(v10 + 20);
  *a2 = *(_QWORD *)(v10 + 24);
  *a4 = *(_DWORD *)(v10 + 40);
  v11 = *(_DWORD *)(v10 + 36);
  *a5 = *(_DWORD *)(v10 + 32);
  *a8 = *(_DWORD *)v10;
  *a6 = *(_QWORD *)(v10 + 8);
  *a7 = *(_DWORD *)(v10 + 16);
  *a9 = v11;
  return result;
}

uint64_t btTriangleIndexVertexArray::getLockedReadOnlyVertexIndexBase(uint64_t result, _QWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, _QWORD *a6, _DWORD *a7, _DWORD *a8, _DWORD *a9, int a10)
{
  uint64_t v10;
  int v11;

  v10 = *(_QWORD *)(result + 48) + 48 * a10;
  *a3 = *(_DWORD *)(v10 + 20);
  *a2 = *(_QWORD *)(v10 + 24);
  *a4 = *(_DWORD *)(v10 + 40);
  v11 = *(_DWORD *)(v10 + 36);
  *a5 = *(_DWORD *)(v10 + 32);
  *a8 = *(_DWORD *)v10;
  *a6 = *(_QWORD *)(v10 + 8);
  *a7 = *(_DWORD *)(v10 + 16);
  *a9 = v11;
  return result;
}

BOOL btTriangleIndexVertexArray::hasPremadeAabb(btTriangleIndexVertexArray *this)
{
  return *((_DWORD *)this + 18) == 1;
}

__n128 btTriangleIndexVertexArray::setPremadeAabb(btVector3 *this, const btVector3 *a2, __n128 *a3)
{
  __n128 result;

  this[5] = *a2;
  result = *a3;
  this[6] = *(btVector3 *)a3;
  LODWORD(this[4].var0.var0[2]) = 1;
  return result;
}

__n128 btTriangleIndexVertexArray::getPremadeAabb(btVector3 *this, btVector3 *a2, btVector3 *a3)
{
  __n128 result;

  *a2 = this[5];
  result = (__n128)this[6];
  *a3 = (btVector3)result;
  return result;
}

uint64_t btTriangleIndexVertexArray::getNumSubParts(btTriangleIndexVertexArray *this)
{
  return *((unsigned int *)this + 9);
}

void btTriangleMeshShape::btTriangleMeshShape(btTriangleMeshShape *this, btStridingMeshInterface *a2)
{
  uint64_t v4;

  btConcaveShape::btConcaveShape(this);
  *(_QWORD *)v4 = off_1EA596CB8;
  *(_QWORD *)(v4 + 64) = a2;
  *(_DWORD *)(v4 + 8) = 21;
  if ((*(unsigned int (**)(btStridingMeshInterface *))(*(_QWORD *)a2 + 80))(a2))
    (*(void (**)(btStridingMeshInterface *, char *, char *))(*(_QWORD *)a2 + 96))(a2, (char *)this + 32, (char *)this + 48);
  else
    btTriangleMeshShape::recalcLocalAabb(this);
}

float btTriangleMeshShape::recalcLocalAabb(btTriangleMeshShape *this)
{
  uint64_t i;
  float result;
  __int128 v4;
  __int128 v5;
  _QWORD v6[2];

  for (i = 0; i != 12; i += 4)
  {
    v6[0] = 0;
    v6[1] = 0;
    *(_DWORD *)((char *)v6 + i) = 1065353216;
    (*(void (**)(__int128 *__return_ptr, btTriangleMeshShape *, _QWORD *))(*(_QWORD *)this + 136))(&v5, this, v6);
    *(float *)((char *)this + i + 48) = *(float *)((char *)&v6[-2] + i) + *((float *)this + 6);
    *(_DWORD *)((char *)v6 + i) = -1082130432;
    (*(void (**)(__int128 *__return_ptr, btTriangleMeshShape *, _QWORD *))(*(_QWORD *)this + 136))(&v4, this, v6);
    v5 = v4;
    result = *(float *)((char *)&v6[-2] + i) - *((float *)this + 6);
    *(float *)((char *)this + i + 32) = result;
  }
  return result;
}

void btTriangleMeshShape::~btTriangleMeshShape(btTriangleMeshShape *this)
{
  void **v1;

  v1 = (void **)C3DSceneSourcePerformConsistencyCheck(this);
  btAlignedFreeInternal(v1);
}

float32x4_t btTriangleMeshShape::getAabb(btTriangleMeshShape *this, const btTransform *a2, btVector3 *a3, btVector3 *a4)
{
  unsigned int v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  int8x16_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  int8x16_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  int8x16_t v22;
  int8x16_t v23;
  btVector3 v24;
  float32x4_t result;
  unsigned int v26;
  unsigned int v27;
  float32x4_t v28;
  float32x4_t v29;

  v28 = *((float32x4_t *)this + 2);
  v29 = *((float32x4_t *)this + 3);
  v27 = COERCE_UNSIGNED_INT64((*(double (**)(btTriangleMeshShape *))(*(_QWORD *)this + 96))(this));
  v26 = COERCE_UNSIGNED_INT64((*(double (**)(btTriangleMeshShape *))(*(_QWORD *)this + 96))(this));
  *(float *)&v8 = (*(float (**)(btTriangleMeshShape *))(*(_QWORD *)this + 96))(this);
  v9 = (float32x4_t)a2->var0.var0[1];
  v10 = (float32x4_t)a2->var0.var0[2];
  v11 = (float32x4_t)vandq_s8((int8x16_t)v10, (int8x16_t)xmmword_1DD02C930);
  v12.i64[0] = 0x3F0000003F000000;
  v12.i64[1] = 0x3F0000003F000000;
  v13 = vmulq_f32(vaddq_f32(*((float32x4_t *)this + 3), *((float32x4_t *)this + 2)), v12);
  v14 = (int8x16_t)vmulq_f32(v10, v13);
  v13.i32[3] = 0;
  v15 = vmulq_f32(vsubq_f32(v29, v28), v12);
  v15.i32[3] = 0;
  v16.i64[0] = __PAIR64__(v26, v27);
  v16.i64[1] = v8;
  v17 = vaddq_f32(v16, v15);
  v18 = (int8x16_t)vmulq_f32((float32x4_t)a2->var0.var0[0], v13);
  v19 = vmulq_f32(v9, v13);
  v14.i32[3] = 0;
  *(float32x2_t *)v19.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v18.i8, *(float32x2_t *)v19.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL)));
  *(float32x2_t *)&v19.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v14.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)), 0);
  v20 = vaddq_f32(v19, (float32x4_t)a2->var1);
  v21 = vmulq_f32(v17, (float32x4_t)vandq_s8((int8x16_t)a2->var0.var0[0], (int8x16_t)xmmword_1DD02C930));
  v22 = (int8x16_t)vmulq_f32(v17, (float32x4_t)vandq_s8((int8x16_t)v9, (int8x16_t)xmmword_1DD02C930));
  v23 = (int8x16_t)vmulq_f32(v17, v11);
  v23.i32[3] = 0;
  *(float32x2_t *)v21.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL)), vpadd_f32(*(float32x2_t *)v21.f32, *(float32x2_t *)v22.i8));
  *(float32x2_t *)&v21.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v23.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL)), 0);
  v24 = (btVector3)vsubq_f32(v20, v21);
  v24.var0.var0[3] = 0.0;
  *a3 = v24;
  result = vaddq_f32(v20, v21);
  *a4 = (btVector3)result;
  return result;
}

float btTriangleMeshShape::setLocalScaling(btTriangleMeshShape *this, const btVector3 *a2)
{
  *(btVector3 *)(*((_QWORD *)this + 8) + 16) = *a2;
  return btTriangleMeshShape::recalcLocalAabb(this);
}

uint64_t btTriangleMeshShape::getLocalScaling(btTriangleMeshShape *this)
{
  return *((_QWORD *)this + 8) + 16;
}

uint64_t btTriangleMeshShape::processAllTriangles(uint64_t a1, uint64_t a2, __int128 *a3, __int128 *a4)
{
  __int128 v4;
  _QWORD v6[2];
  __int128 v7;
  __int128 v8;

  v6[0] = &off_1EA59AC70;
  v6[1] = a2;
  v4 = *a4;
  v7 = *a3;
  v8 = v4;
  (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(a1 + 64) + 16))(*(_QWORD *)(a1 + 64), v6);
  return C3DSceneSourcePerformConsistencyCheck(v6);
}

void btTriangleMeshShape::calculateLocalInertia(btTriangleMeshShape *this, float a2, btVector3 *a3)
{
  *a3 = 0uLL;
}

uint64_t btTriangleMeshShape::localGetSupportingVertex@<X0>(btTriangleMeshShape *this@<X0>, float32x4_t *a2@<X1>, _OWORD *a3@<X8>)
{
  __int128 v5;
  __int128 v6;
  _QWORD v7[2];
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  float32x4_t v15;

  v8 = 0uLL;
  v7[0] = &off_1EA596F28;
  v9 = xmmword_1DD007970;
  v10 = xmmword_1DD007920;
  v11 = xmmword_1DD007600;
  v12 = 0;
  v13 = 0;
  v14 = -581039253;
  v15 = vaddq_f32(vmulq_laneq_f32((float32x4_t)xmmword_1DD007600, *a2, 2), vaddq_f32(vmulq_n_f32((float32x4_t)xmmword_1DD007970, COERCE_FLOAT(*a2)), vmulq_lane_f32((float32x4_t)xmmword_1DD007920, *(float32x2_t *)a2->f32, 1)));
  v5 = xmmword_1DD02CB50;
  v6 = xmmword_1DD02C880;
  (*(void (**)(btTriangleMeshShape *, _QWORD *, __int128 *, __int128 *))(*(_QWORD *)this + 128))(this, v7, &v5, &v6);
  *a3 = v8;
  return C3DSceneSourcePerformConsistencyCheck(v7);
}

const char *btTriangleMeshShape::getName(btTriangleMeshShape *this)
{
  return "TRIANGLEMESH";
}

void btTriangleMeshShape::processAllTriangles(btTriangleCallback *,btVector3 const&,btVector3 const&)const::FilteredCallback::~FilteredCallback(uint64_t a1)
{
  C3DSceneSourcePerformConsistencyCheck(a1);
  JUMPOUT(0x1DF0D41C0);
}

uint64_t btTriangleMeshShape::processAllTriangles(btTriangleCallback *,btVector3 const&,btVector3 const&)const::FilteredCallback::internalProcessTriangleIndex(uint64_t result, float *a2)
{
  float v2;
  float v3;
  float v4;
  float v5;
  _BOOL4 v6;
  uint64_t v7;
  float *v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float *v13;
  float v14;
  float v15;
  float v16;
  float v17;

  v2 = *a2;
  v3 = a2[4];
  if (*a2 >= v3)
    v4 = a2[4];
  else
    v4 = *a2;
  v5 = a2[8];
  if (v4 >= v5)
    v4 = a2[8];
  if (v4 <= *(float *)(result + 32))
  {
    v6 = v2 <= v3;
    if (v2 <= v3)
      v2 = a2[4];
    v7 = 4 * v6;
    if (v2 <= v5)
      v7 = 8;
    if (a2[v7] >= *(float *)(result + 16))
    {
      v8 = a2 + 2;
      v9 = a2[2];
      v10 = a2[6];
      v11 = a2[10];
      if (v9 >= v10)
        v12 = a2[6];
      else
        v12 = a2[2];
      if (v12 >= v11)
        v12 = a2[10];
      if (v12 <= *(float *)(result + 40))
      {
        if (v9 <= v10)
        {
          v9 = a2[6];
          v8 = a2 + 6;
        }
        if (v9 <= v11)
          v8 = a2 + 10;
        if (*v8 >= *(float *)(result + 24))
        {
          v13 = a2 + 1;
          v14 = a2[1];
          v15 = a2[5];
          v16 = a2[9];
          if (v14 >= v15)
            v17 = a2[5];
          else
            v17 = a2[1];
          if (v17 >= v16)
            v17 = a2[9];
          if (v17 <= *(float *)(result + 36))
          {
            if (v14 <= v15)
            {
              v14 = a2[5];
              v13 = a2 + 5;
            }
            if (v14 <= v16)
              v13 = a2 + 9;
            if (*v13 >= *(float *)(result + 20))
              return (*(uint64_t (**)(_QWORD, float))(**(_QWORD **)(result + 8) + 16))(*(_QWORD *)(result + 8), *v13);
          }
        }
      }
    }
  }
  return result;
}

void SupportVertexCallback::~SupportVertexCallback(SupportVertexCallback *this)
{
  C3DSceneSourcePerformConsistencyCheck(this);
  JUMPOUT(0x1DF0D41C0);
}

uint64_t SupportVertexCallback::processTriangle(uint64_t this, btVector3 *a2)
{
  uint64_t v2;
  float32x4_t v3;
  float v4;
  int8x16_t v5;
  float v6;

  v2 = 0;
  v3 = *(float32x4_t *)(this + 112);
  v4 = *(float *)(this + 96);
  do
  {
    v5 = (int8x16_t)vmulq_f32(v3, (float32x4_t)a2[v2]);
    v6 = vadd_f32(vpadd_f32(*(float32x2_t *)v5.i8, *(float32x2_t *)v5.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL)).f32[0];
    if (v6 > v4)
    {
      *(float *)(this + 96) = v6;
      *(btVector3 *)(this + 16) = a2[v2];
      v4 = v6;
    }
    ++v2;
  }
  while (v2 != 3);
  return this;
}

_QWORD *btContinuousConvexCollision::btContinuousConvexCollision(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *result = &off_1EA597D40;
  result[1] = a4;
  result[2] = a5;
  result[3] = a2;
  result[4] = a3;
  result[5] = 0;
  return result;
}

void btContinuousConvexCollision::btContinuousConvexCollision(btContinuousConvexCollision *this, const btConvexShape *a2, const btStaticPlaneShape *a3)
{
  *(_QWORD *)this = &off_1EA597D40;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = a2;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = a3;
}

uint64_t btContinuousConvexCollision::computeClosestPoints(btContinuousConvexCollision *this, const btTransform *a2, const btTransform *a3, btPointCollector *a4)
{
  double v8;
  _DWORD *v9;
  uint64_t v10;
  int v11;
  int v12;
  float v13;
  float v14;
  btVector3 v15;
  btVector3 var1;
  btVector3 v17;
  btVector3 v18;
  uint64_t v20;
  uint64_t v21;
  float32x4_t v22;
  float32x4_t v23;
  btVector3 v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  int8x16_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  int8x16_t v32;
  float32x4_t v33;
  int8x16_t v34;
  int8x16_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  float32x2_t v42;
  float32x4_t v43;
  float32x2_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  float32x4_t v51;
  int8x16_t v52;
  int8x16_t v53;
  float32x4_t v54;
  int8x16_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  int8x16_t v59;
  float32x4_t v60;
  float32x4_t v61;
  int8x16_t v62;
  float32x4_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  int8x16_t v70;
  float32x4_t v71[8];
  int v72;
  _OWORD v73[7];
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)this + 4))
  {
    v8 = btVoronoiSimplexSolver::reset(*((btVoronoiSimplexSolver **)this + 1));
    v9 = (_DWORD *)*((_QWORD *)this + 3);
    v10 = *((_QWORD *)this + 4);
    v11 = v9[2];
    v12 = *(_DWORD *)(v10 + 8);
    v13 = (*(float (**)(_DWORD *, double))(*(_QWORD *)v9 + 96))(v9, v8);
    v14 = (*(float (**)(_QWORD))(**((_QWORD **)this + 4) + 96))(*((_QWORD *)this + 4));
    btGjkPairDetector::btGjkPairDetector((uint64_t)v73, (uint64_t)v9, v10, v11, v12, *((_QWORD *)this + 1), *((_QWORD *)this + 2), v13, v14);
    v72 = 1566444395;
    v15 = a2->var0.var0[1];
    v71[0] = (float32x4_t)a2->var0.var0[0];
    v71[1] = (float32x4_t)v15;
    var1 = a2->var1;
    v71[2] = (float32x4_t)a2->var0.var0[2];
    v71[3] = (float32x4_t)var1;
    v17 = a3->var0.var0[1];
    v71[4] = (float32x4_t)a3->var0.var0[0];
    v71[5] = (float32x4_t)v17;
    v18 = a3->var1;
    v71[6] = (float32x4_t)a3->var0.var0[2];
    v71[7] = (float32x4_t)v18;
    return btGjkPairDetector::getClosestPoints(v73, v71, a4, 0, 0);
  }
  else
  {
    v20 = *((_QWORD *)this + 3);
    v21 = *((_QWORD *)this + 5);
    v22 = (float32x4_t)a2->var0.var0[1];
    v23 = (float32x4_t)a2->var0.var0[2];
    v24 = a2->var1;
    v26 = (float32x4_t)a3->var0.var0[0];
    v25 = (float32x4_t)a3->var0.var0[1];
    v27 = (float32x4_t)a3->var0.var0[2];
    v28 = (int8x16_t)vtrn1q_s32((int32x4_t)a3->var0.var0[0], (int32x4_t)v25);
    v29.i64[0] = vextq_s8(v28, v28, 8uLL).u64[0];
    v30.i64[0] = v28.i64[0];
    v30.i64[1] = v27.u32[0];
    v28.i64[0] = 0x8000000080000000;
    v28.i64[1] = 0x8000000080000000;
    v31 = (float32x4_t)veorq_s8((int8x16_t)a3->var1, v28);
    v32 = (int8x16_t)vmulq_f32(v30, v31);
    *(int32x2_t *)v33.f32 = vzip2_s32(*(int32x2_t *)a3->var0.var0[0].var0.var0, *(int32x2_t *)v25.f32);
    *(int32x2_t *)&v33.u32[2] = vzip2_s32(*(int32x2_t *)v27.f32, 0);
    v34 = (int8x16_t)vmulq_f32(v33, v31);
    v29.i64[1] = vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL).u32[0];
    v35 = (int8x16_t)vmulq_f32(v29, v31);
    v35.i32[3] = 0;
    *(float32x2_t *)v32.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v32.i8, *(float32x2_t *)v34.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL)));
    v36 = (float32x4_t)a2->var0.var0[0];
    v36.i32[3] = 0;
    v37 = v22;
    v37.i32[3] = 0;
    v38 = v23;
    v38.i32[3] = 0;
    v69 = vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v36, *(float32x2_t *)a3->var0.var0[0].var0.var0, 1), v37, *(float32x2_t *)v25.f32, 1), v38, *(float32x2_t *)v27.f32, 1);
    v39 = (int8x16_t)vmulq_f32((float32x4_t)v24, v30);
    v40 = (int8x16_t)vmulq_f32((float32x4_t)v24, v33);
    v41 = (int8x16_t)vmulq_f32((float32x4_t)v24, v29);
    v41.i32[3] = 0;
    v42 = vadd_f32(*(float32x2_t *)v32.i8, vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v39, v39, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v40, v40, 8uLL)), vpadd_f32(*(float32x2_t *)v39.i8, *(float32x2_t *)v40.i8)));
    v68 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v36, COERCE_FLOAT(*(_OWORD *)a3->var0.var0)), v37, v25.f32[0]), v38, v27.f32[0]);
    v26.i32[3] = 0;
    v67 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v36, (float32x4_t)a3->var0.var0[0], 2), v37, v25, 2), v38, v27, 2);
    v25.i32[3] = 0;
    v27.i32[3] = 0;
    v43 = vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v26, *(float32x2_t *)a2->var0.var0[0].var0.var0, 1), v25, *(float32x2_t *)v22.f32, 1), v27, *(float32x2_t *)v23.f32, 1);
    v44 = vadd_f32(vpadd_f32(vpadd_f32(*(float32x2_t *)v35.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL)), 0), vpadd_f32(vpadd_f32(*(float32x2_t *)v41.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v41, v41, 8uLL)), 0));
    v45 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v26, COERCE_FLOAT(*(_OWORD *)a2->var0.var0)), v25, v22.f32[0]), v27, v23.f32[0]);
    v46 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v26, (float32x4_t)a2->var0.var0[0], 2), v25, v22, 2), v27, v23, 2);
    v47 = (float32x4_t)veorq_s8(*(int8x16_t *)(v21 + 64), v28);
    v48 = (int8x16_t)vmulq_f32(v45, v47);
    v49 = (int8x16_t)vmulq_f32(v43, v47);
    v50 = (int8x16_t)vmulq_f32(v46, v47);
    v50.i32[3] = 0;
    *(float32x2_t *)v48.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v48.i8, *(float32x2_t *)v49.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v48, v48, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v49, v49, 8uLL)));
    v48.u64[1] = (unint64_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v50.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v50, v50, 8uLL)), 0);
    v73[0] = v48;
    (*(void (**)(float32x4_t *__return_ptr, uint64_t, _OWORD *))(*(_QWORD *)v20 + 128))(v71, v20, v73);
    v51 = vmulq_f32(v68, v71[0]);
    v52 = (int8x16_t)vmulq_f32(v69, v71[0]);
    v53 = (int8x16_t)vmulq_f32(v67, v71[0]);
    v53.i32[3] = 0;
    *(float32x2_t *)v51.f32 = vadd_f32(v42, vadd_f32(vpadd_f32(*(float32x2_t *)v51.f32, *(float32x2_t *)v52.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v52, v52, 8uLL))));
    *(float32x2_t *)&v51.u32[2] = vadd_f32(v44, vpadd_f32(vpadd_f32(*(float32x2_t *)v53.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v53, v53, 8uLL)), 0));
    v54 = *(float32x4_t *)(v21 + 64);
    v55 = (int8x16_t)vmulq_f32(v54, v51);
    v56 = vmulq_n_f32(v54, vadd_f32(vpadd_f32(*(float32x2_t *)v55.i8, *(float32x2_t *)v55.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v55, v55, 8uLL)).f32[0]- *(float *)(v21 + 80));
    v56.i32[3] = 0;
    v57 = vsubq_f32(v51, v56);
    v58 = (float32x4_t)a3->var0.var0[2];
    v59 = (int8x16_t)vmulq_f32(v58, v57);
    v57.i32[3] = 0;
    v60 = (float32x4_t)a3->var0.var0[0];
    v61 = (float32x4_t)a3->var0.var0[1];
    v62 = (int8x16_t)vmulq_f32((float32x4_t)a3->var0.var0[0], v57);
    v63 = vmulq_f32(v61, v57);
    v59.i32[3] = 0;
    *(float32x2_t *)v63.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v62.i8, *(float32x2_t *)v63.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v62, v62, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v63, (int8x16_t)v63, 8uLL)));
    *(float32x2_t *)&v63.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v59.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v59, v59, 8uLL)), 0);
    v73[0] = vaddq_f32((float32x4_t)a3->var1, v63);
    v64 = (int8x16_t)vmulq_f32(v54, v60);
    v65 = (int8x16_t)vmulq_f32(v54, v61);
    v66 = (int8x16_t)vmulq_f32(v54, v58);
    v66.i32[3] = 0;
    *(float32x2_t *)v64.i8 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v64, v64, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v65, v65, 8uLL)), vpadd_f32(*(float32x2_t *)v64.i8, *(float32x2_t *)v65.i8));
    v64.u64[1] = (unint64_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v66.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v66, v66, 8uLL)), 0);
    v70 = v64;
    return (*(uint64_t (**)(btPointCollector *, int8x16_t *, _OWORD *))(*(_QWORD *)a4 + 32))(a4, &v70, v73);
  }
}

uint64_t btContinuousConvexCollision::calcTimeOfImpact(btContinuousConvexCollision *this, btTransform *a2, const btTransform *a3, btTransform *a4, btTransform *a5, float32x4_t *a6)
{
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float *v14;
  btVector3 v15;
  float v16;
  uint64_t v17;
  float v18;
  int8x16_t v19;
  int8x16_t v20;
  float v21;
  float32x4_t v22;
  int8x16_t v23;
  uint64_t result;
  btTransform *v25;
  btVector3 v26;
  float32x4_t v27;
  int8x16_t v28;
  float v29;
  float v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  int8x16_t v34;
  float v35;
  float v36;
  BOOL v37;
  btTransform *v38;
  uint64_t v39;
  float v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  btTransform v47;
  btTransform v48;
  btVector3 v49;
  btVector3 v50;
  btTransform v51;
  float32x4_t v52;
  btVector3 v53;
  float v54[2];
  btTransform v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v11 = vsubq_f32((float32x4_t)a3->var1, (float32x4_t)a2->var1);
  v11.i32[3] = 0;
  v45 = v11;
  v51.var0.var0[2] = (btVector3)v11;
  v48.var0.var0[0].var0.var0[0] = 0.0;
  btTransformUtil::calculateDiffAxisAngle((btTransformUtil *)a2, a3, &v55, v48.var0.var0, (float *)a5);
  v12 = vmulq_n_f32((float32x4_t)v55.var0.var0[0], v48.var0.var0[0].var0.var0[0]);
  v12.i32[3] = 0;
  v42 = v12;
  v51.var0.var0[1] = (btVector3)v12;
  v13 = vsubq_f32((float32x4_t)a5->var1, (float32x4_t)a4->var1);
  v13.i32[3] = 0;
  v43 = v13;
  v51.var0.var0[0] = (btVector3)v13;
  v48.var0.var0[0].var0.var0[0] = 0.0;
  btTransformUtil::calculateDiffAxisAngle((btTransformUtil *)a4, a5, &v55, v48.var0.var0, v14);
  v15 = (btVector3)vmulq_n_f32((float32x4_t)v55.var0.var0[0], v48.var0.var0[0].var0.var0[0]);
  v15.var0.var0[3] = 0.0;
  v41 = (float32x4_t)v15;
  v50 = v15;
  v16 = (*(float (**)(_QWORD))(**((_QWORD **)this + 3) + 32))(*((_QWORD *)this + 3));
  v17 = *((_QWORD *)this + 4);
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 32))(v17);
  else
    v18 = 0.0;
  v19 = (int8x16_t)vmulq_f32(v42, v42);
  v20 = (int8x16_t)vmulq_f32(v41, v41);
  v21 = (float)(v18
              * sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v20.i8, *(float32x2_t *)v20.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL)).f32[0]))+ (float)(sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v19.i8, *(float32x2_t *)v19.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL)).f32[0])* v16);
  v22 = vsubq_f32(v43, v45);
  v22.i32[3] = 0;
  v23 = (int8x16_t)vmulq_f32(v22, v22);
  if ((float)(v21
             + sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v23.i8, *(float32x2_t *)v23.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL)).f32[0])) != 0.0)
  {
    v46 = v22;
    *(_QWORD *)v55.var0.var0[0].var0.var0 = &off_1EA5965E8;
    strcpy((char *)&v55.var1, "k\v^]");
    btContinuousConvexCollision::computeClosestPoints(this, a2, a4, (btPointCollector *)&v55);
    v26 = v55.var0.var0[2];
    v49 = v55.var0.var0[2];
    if (LOBYTE(v55.var1.var0.var0[1]))
    {
      v27 = (float32x4_t)v55.var0.var0[1];
      v28 = (int8x16_t)vmulq_f32((float32x4_t)v55.var0.var0[1], v46);
      if ((float)(v21
                 + vadd_f32(vpadd_f32(*(float32x2_t *)v28.i8, *(float32x2_t *)v28.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL)).f32[0]) > 0.00000011921)
      {
        v29 = v55.var1.var0.var0[0] + a6[12].f32[0];
        v30 = 0.0;
        if (v29 <= 0.001)
        {
LABEL_25:
          a6[11].f32[0] = v30;
          result = 1;
          a6[9] = v27;
          a6[10] = (float32x4_t)v26;
          return result;
        }
        v31 = 0;
        v32 = 0.0;
        while (1)
        {
          v33 = a6[11].i64[1];
          if (v33)
          {
            v48.var0.var0[0] = (btVector3)xmmword_1DD008470;
            v44 = v27;
            (*(void (**)(uint64_t, btVector3 *, btTransform *, float))(*(_QWORD *)v33 + 40))(v33, &v49, &v48, 0.2);
            v27 = v44;
          }
          v34 = (int8x16_t)vmulq_f32(v27, v46);
          v35 = v21
              + vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL), vpadd_f32(*(float32x2_t *)v34.i8, *(float32x2_t *)v34.i8)).f32[0];
          if (v35 <= 0.00000011921)
            break;
          result = 0;
          v36 = v29 / v35;
          v30 = v32 + v36;
          v37 = (float)(v32 + v36) > v32 && v30 <= 1.0;
          if (!v37 || v30 < 0.0)
            return result;
          btTransformUtil::integrateTransform((float32x4_t *)a2, (const btTransform *)&v51.var0.var0[2], (float32x4_t *)&v51.var0.var0[1], &v48.var0, v32 + v36, v25);
          btTransformUtil::integrateTransform((float32x4_t *)a4, &v51, (float32x4_t *)&v50, &v47.var0, v30, v38);
          v39 = a6[11].i64[1];
          if (v39)
          {
            v51.var1 = (btVector3)xmmword_1DD007970;
            (*(void (**)(uint64_t, btVector3 *, btVector3 *, float))(*(_QWORD *)v39 + 40))(v39, &v48.var1, &v51.var1, 0.2);
          }
          (*(void (**)(float32x4_t *, float))a6->i64[0])(a6, v30);
          *(_QWORD *)v51.var1.var0.var0 = &off_1EA5965E8;
          strcpy((char *)v54, "k\v^]");
          btContinuousConvexCollision::computeClosestPoints(this, &v48, &v47, (btPointCollector *)&v51.var1);
          if (!LOBYTE(v54[1]))
          {
            (*(void (**)(float32x4_t *, uint64_t, uint64_t))(a6->i64[0] + 16))(a6, 0xFFFFFFFFLL, v31);
            return 0;
          }
          v40 = a6[12].f32[0];
          v26 = v53;
          v49 = v53;
          if ((_DWORD)v31 == 64)
          {
            (*(void (**)(float32x4_t *, uint64_t, uint64_t))(a6->i64[0] + 16))(a6, 4294967294, 65);
            return 0;
          }
          v31 = (v31 + 1);
          v27 = v52;
          v29 = v54[0] + v40;
          v32 = v30;
          if ((float)(v54[0] + v40) <= 0.001)
            goto LABEL_25;
        }
      }
    }
  }
  return 0;
}

void btTransformUtil::integrateTransform(float32x4_t *this, const btTransform *a2, float32x4_t *a3, btMatrix3x3 *a4, float a5, btTransform *a6)
{
  float v7;
  float32x4_t v9;
  float32x4_t v10;
  int8x16_t v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float32x4_t v17;
  int32x2_t v18;
  float32x2_t v19;
  int32x2_t v20;
  int32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x4_t v24;
  int8x16_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float v30;
  float32x4_t v31;
  btQuaternion v32;
  btQuaternion v33;

  v7 = a5;
  v9 = vmulq_n_f32((float32x4_t)a2->var0.var0[0], a5);
  v9.i32[3] = 0;
  a4[1].var0[0] = (btVector3)vaddq_f32(this[3], v9);
  v10 = *a3;
  v11 = (int8x16_t)vmulq_f32(v10, v10);
  v12 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v11.i8, *(float32x2_t *)v11.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL)).f32[0]);
  if ((float)(v12 * v7) <= 0.7854)
    v13 = v12;
  else
    v13 = 0.7854 / v7;
  if (v13 >= 0.001)
  {
    v28 = *a3;
    v30 = v7;
    v15 = sinf((float)(v13 * 0.5) * v7);
    v10 = v28;
    v7 = v30;
    v14 = v15 / v13;
  }
  else
  {
    v14 = (float)(v13 * (float)((float)((float)((float)(v7 * v7) * v7) * -0.020833) * v13)) + (float)(v7 * 0.5);
  }
  v31 = vmulq_n_f32(v10, v14);
  v16 = cosf((float)(v13 * v7) * 0.5);
  v17 = v31;
  v17.f32[3] = v16;
  v29 = v17;
  btMatrix3x3::getRotation((btMatrix3x3 *)this, &v33);
  v18 = (int32x2_t)vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL).u64[0];
  v19 = (float32x2_t)vzip1_s32(v18, *(int32x2_t *)v31.f32);
  v20 = (int32x2_t)vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL).u64[0];
  v21 = vzip1_s32(v20, *(int32x2_t *)v33.var0.var0);
  v22 = (float32x2_t)vext_s8(*(int8x8_t *)v31.f32, (int8x8_t)v18, 4uLL);
  v23 = vmul_f32(v19, (float32x2_t)vext_s8((int8x8_t)v20, *(int8x8_t *)v33.var0.var0, 4uLL));
  *(float32x2_t *)v24.f32 = vmul_f32(v19, (float32x2_t)vext_s8(*(int8x8_t *)v33.var0.var0, (int8x8_t)v20, 4uLL));
  *(float32x2_t *)&v24.u32[2] = vmul_f32(v22, (float32x2_t)vrev64_s32(v21));
  *(float32x2_t *)v25.i8 = vadd_f32(vmul_laneq_f32(*(float32x2_t *)v31.f32, (float32x4_t)v33, 3), vmul_f32(v22, (float32x2_t)v21));
  v25.u64[1] = (unint64_t)vadd_f32(vmul_lane_f32(*(float32x2_t *)v31.f32, *(float32x2_t *)v33.var0.var0, 1), v23);
  v26 = vaddq_f32(vsubq_f32(vmulq_laneq_f32((float32x4_t)v33, v29, 3), v24), (float32x4_t)veorq_s8(v25, (int8x16_t)xmmword_1DD007D50));
  v27 = vmulq_f32(v26, v26);
  v27.i64[0] = vpaddq_f32(v27, v27).u64[0];
  v32 = (btQuaternion)vmulq_n_f32(v26, 1.0 / sqrtf(vpadd_f32(*(float32x2_t *)v27.f32, *(float32x2_t *)v27.f32).f32[0]));
  btMatrix3x3::setRotation(a4, (float32x4_t *)&v32);
}

void btContinuousConvexCollision::~btContinuousConvexCollision(btContinuousConvexCollision *this)
{
  C3DSceneSourcePerformConsistencyCheck(this);
  JUMPOUT(0x1DF0D41C0);
}

void btPointCollector::~btPointCollector(btPointCollector *this)
{
  JUMPOUT(0x1DF0D41C0);
}

uint64_t btPointCollector::addContactPoint(uint64_t this, const btVector3 *a2, const btVector3 *a3, float a4)
{
  if (*(float *)(this + 48) > a4)
  {
    *(_BYTE *)(this + 52) = 1;
    *(btVector3 *)(this + 16) = *a2;
    *(btVector3 *)(this + 32) = *a3;
    *(float *)(this + 48) = a4;
  }
  return this;
}

_QWORD *btGjkConvexCast::btGjkConvexCast(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *result = &off_1EA5960E0;
  result[1] = a4;
  result[2] = a2;
  result[3] = a3;
  return result;
}

uint64_t btGjkConvexCast::calcTimeOfImpact(btVoronoiSimplexSolver **this, const btTransform *a2, const btTransform *a3, const btTransform *a4, const btTransform *a5, float32x4_t *a6)
{
  btVector3 v12;
  btVector3 v13;
  btVector3 v14;
  btVector3 v15;
  float32x4_t v16;
  float v17;
  float32x4_t v18;
  float v19;
  int v20;
  uint64_t result;
  int8x16_t v22;
  float v23;
  BOOL v24;
  float32x4_t v25;
  float v26;
  float32x4_t v27;
  int8x16_t v28;
  float32x4_t v29;
  btVector3 v30;
  btVector3 v31;
  btVector3 var1;
  float32x4_t v33;
  btVector3 v34;
  float v35;
  _OWORD v36[3];
  float32x4_t v37;
  btVector3 v38;
  btVector3 v39;
  btVector3 v40;
  float32x4_t v41;
  int v42;
  _BYTE v43[112];
  _QWORD v44[2];
  float32x4_t v45;
  float32x4_t v46;
  float v47[2];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  btVoronoiSimplexSolver::reset(this[1]);
  var1 = a2->var1;
  v34 = a3->var1;
  v30 = a4->var1;
  v31 = a5->var1;
  v44[0] = &off_1EA5965E8;
  strcpy((char *)v47, "k\v^]");
  btGjkPairDetector::btGjkPairDetector(v43, this[2], this[3], this[1], 0);
  v42 = 1566444395;
  v12 = a2->var0.var0[1];
  v36[0] = a2->var0.var0[0];
  v36[1] = v12;
  v13 = a2->var1;
  v36[2] = a2->var0.var0[2];
  v37 = (float32x4_t)v13;
  v14 = a4->var0.var0[1];
  v38 = a4->var0.var0[0];
  v39 = v14;
  v15 = a4->var1;
  v40 = a4->var0.var0[2];
  v41 = (float32x4_t)v15;
  btGjkPairDetector::getClosestPoints(v43, v36, v44, 0, 0);
  if (LOBYTE(v47[1]))
  {
    v16 = vsubq_f32(vsubq_f32((float32x4_t)v34, (float32x4_t)var1), vsubq_f32((float32x4_t)v31, (float32x4_t)v30));
    v16.i32[3] = 0;
    v33 = v16;
    v17 = v47[0];
    v18 = v45;
    if (v47[0] <= 0.001)
    {
      v27 = v46;
      v26 = 0.0;
LABEL_16:
      v28 = (int8x16_t)vmulq_f32(v18, v33);
      if (vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL), vpadd_f32(*(float32x2_t *)v28.i8, *(float32x2_t *)v28.i8)).f32[0] < (float)-a6[12].f32[0])
      {
        a6[11].f32[0] = v26;
        result = 1;
        a6[9] = v18;
        a6[10] = v27;
        return result;
      }
    }
    else
    {
      v19 = 0.0;
      v20 = 33;
      while (--v20)
      {
        result = 0;
        v22 = (int8x16_t)vmulq_f32(v18, v33);
        v23 = v19
            - (float)(v17
                    / vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL), vpadd_f32(*(float32x2_t *)v22.i8, *(float32x2_t *)v22.i8)).f32[0]);
        v24 = v23 > v19 && v23 <= 1.0;
        if (!v24 || v23 < 0.0)
          return result;
        v35 = v23;
        (*(void (**)(float32x4_t *))a6->i64[0])(a6);
        v25 = vaddq_f32((float32x4_t)a4->var1, vmulq_n_f32(vsubq_f32((float32x4_t)a5->var1, (float32x4_t)a4->var1), v35));
        v37 = vaddq_f32((float32x4_t)a2->var1, vmulq_n_f32(vsubq_f32((float32x4_t)a3->var1, (float32x4_t)a2->var1), v35));
        v41 = v25;
        btGjkPairDetector::getClosestPoints(v43, v36, v44, 0, 0);
        if (!LOBYTE(v47[1]))
          return 0;
        v17 = v47[0];
        if (v47[0] < 0.0)
        {
          a6[11].f32[0] = v35;
          v29 = v46;
          a6[9] = v45;
          a6[10] = v29;
          return 1;
        }
        v18 = v45;
        v26 = v35;
        v19 = v35;
        if (v47[0] <= 0.001)
        {
          v27 = v46;
          goto LABEL_16;
        }
      }
    }
  }
  return 0;
}

void btGjkConvexCast::~btGjkConvexCast(btGjkConvexCast *this)
{
  C3DSceneSourcePerformConsistencyCheck(this);
  JUMPOUT(0x1DF0D41C0);
}

BOOL btGjkEpaSolver2::Distance(uint64_t a1, float32x4_t *a2, uint64_t a3, float32x4_t *a4, float32x4_t *a5, uint64_t a6)
{
  double v9;
  double v10;
  float32x4_t v11;
  float32x4_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  float32x4_t v18;
  void (*v19)(float32x4_t *__return_ptr, _QWORD *, _QWORD);
  _QWORD *v20;
  float32x4_t v21;
  int8x16_t v22;
  float32x4_t v23;
  float32x4_t v24;
  int8x16_t v25;
  int8x16_t v26;
  float32x4_t v27;
  int8x16_t v28;
  int8x16_t v29;
  float32x4_t v30;
  float32x4_t v31;
  int8x16_t v32;
  float v33;
  float v34;
  float32x4_t v36;
  float32x4_t v37;
  float v38;
  btVector3 v39;
  float32x4_t v40;
  float32x4_t v41[8];
  void (*v42)(float32x4_t *__return_ptr, _QWORD *, _QWORD);
  uint64_t v43;
  float32x4_t v44[9];
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  gjkepa2_impl::Initialize(a1, a2, a3, a4, a6, v41, 0);
  v45 = 0;
  v46 = 0;
  v50 = 2;
  v48 = 0;
  v47 = 0;
  v13 = gjkepa2_impl::GJK::Evaluate(v44, v41, a5, v9, v10, v11, v12);
  v14 = v13;
  if (v13)
  {
    if (v13 == 1)
      v15 = 1;
    else
      v15 = 2;
    *(_DWORD *)a6 = v15;
  }
  else
  {
    v16 = v49;
    if (*(_DWORD *)(v49 + 48))
    {
      v17 = 0;
      v37 = 0u;
      v18 = 0uLL;
      do
      {
        v19 = v42;
        v20 = (_QWORD *)(v41[0].i64[0] + (v43 >> 1));
        v36 = v18;
        if ((v43 & 1) != 0)
          v19 = *(void (**)(float32x4_t *__return_ptr, _QWORD *, _QWORD))(*v20 + v42);
        v38 = *(float *)(v16 + 4 * v17 + 32);
        v19(&v40, v20, *(_QWORD *)(v16 + 8 * v17));
        v21 = vmulq_n_f32(v40, v38);
        v21.i32[3] = 0;
        v37 = vaddq_f32(v37, v21);
        v22.i64[0] = 0x8000000080000000;
        v22.i64[1] = 0x8000000080000000;
        v39 = (btVector3)veorq_s8(*(int8x16_t *)*(_QWORD *)(v49 + 8 * v17), v22);
        gjkepa2_impl::MinkowskiDiff::Support(v41, (float32x4_t *)&v39, 1, &v40);
        v23 = vmulq_n_f32(v40, v38);
        v23.i32[3] = 0;
        v18 = vaddq_f32(v36, v23);
        ++v17;
        v16 = v49;
      }
      while (v17 < *(unsigned int *)(v49 + 48));
    }
    else
    {
      v18 = 0uLL;
      v37 = 0u;
    }
    v24 = vmulq_f32(v37, *a2);
    v25 = (int8x16_t)vmulq_f32(v37, a2[1]);
    v26 = (int8x16_t)vmulq_f32(v37, a2[2]);
    v26.i32[3] = 0;
    *(float32x2_t *)v24.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v24.f32, *(float32x2_t *)v25.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL)));
    *(float32x2_t *)&v24.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v26.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL)), 0);
    *(float32x4_t *)(a6 + 16) = vaddq_f32(v24, a2[3]);
    v27 = vmulq_f32(v18, *a2);
    v28 = (int8x16_t)vmulq_f32(v18, a2[1]);
    v29 = (int8x16_t)vmulq_f32(v18, a2[2]);
    v29.i32[3] = 0;
    *(float32x2_t *)v27.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v27.f32, *(float32x2_t *)v28.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL)));
    *(float32x2_t *)&v27.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v29.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL)), 0);
    v30 = vaddq_f32(v27, a2[3]);
    v31 = vsubq_f32(v37, v18);
    v31.i32[3] = 0;
    v32 = (int8x16_t)vmulq_f32(v31, v31);
    v33 = sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL), vpadd_f32(*(float32x2_t *)v32.i8, *(float32x2_t *)v32.i8)).f32[0]);
    *(float *)(a6 + 64) = v33;
    if (v33 <= 0.0001)
      v34 = 1.0;
    else
      v34 = 1.0 / v33;
    *(float32x4_t *)(a6 + 32) = v30;
    *(float32x4_t *)(a6 + 48) = vmulq_n_f32(v31, v34);
  }
  return v14 == 0;
}

uint64_t gjkepa2_impl::Initialize(uint64_t result, float32x4_t *a2, uint64_t a3, float32x4_t *a4, uint64_t a5, float32x4_t *a6, int a7)
{
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  void *v25;

  *(_DWORD *)a5 = 0;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  a6->i64[0] = result;
  a6->i64[1] = a3;
  v7 = *a2;
  v8 = a2[1];
  v7.i32[3] = 0;
  v8.i32[3] = 0;
  v9 = a2[2];
  v9.i32[3] = 0;
  v10 = a4[1];
  v11 = a4[2];
  v12 = vmulq_n_f32(v7, COERCE_FLOAT(*a4));
  v13 = vmulq_lane_f32(v7, *(float32x2_t *)a4->f32, 1);
  v14 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v7, *a4, 2), v8, v10, 2), v9, v11, 2);
  a6[1] = vmlaq_n_f32(vmlaq_n_f32(v12, v8, v10.f32[0]), v9, v11.f32[0]);
  a6[2] = vmlaq_lane_f32(vmlaq_lane_f32(v13, v8, *(float32x2_t *)v10.f32, 1), v9, *(float32x2_t *)v11.f32, 1);
  a6[3] = v14;
  v15 = *a4;
  v16 = a4[1];
  v17 = a4[2];
  v18 = a2[2];
  v19 = vsubq_f32(a4[3], a2[3]);
  v19.i32[3] = 0;
  v20 = *a2;
  v21 = a2[1];
  v15.i32[3] = 0;
  v22 = vmulq_lane_f32(v15, *(float32x2_t *)a2->f32, 1);
  v20.i32[3] = 0;
  v16.i32[3] = 0;
  v23 = vmlaq_laneq_f32(vmulq_laneq_f32(v15, *a2, 2), v16, v21, 2);
  v21.i32[3] = 0;
  v17.i32[3] = 0;
  v24 = vmlaq_laneq_f32(v23, v17, v18, 2);
  v18.i32[3] = 0;
  a6[4] = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v15, COERCE_FLOAT(*a2)), v16, v21.f32[0]), v17, v18.f32[0]);
  a6[5] = vmlaq_lane_f32(vmlaq_lane_f32(v22, v16, *(float32x2_t *)v21.f32, 1), v17, *(float32x2_t *)v18.f32, 1);
  a6[6] = v24;
  a6[7] = vaddq_f32(vaddq_f32(vmulq_n_f32(v20, v19.f32[0]), vmulq_lane_f32(v21, *(float32x2_t *)v19.f32, 1)), vmulq_laneq_f32(v18, v19, 2));
  v25 = btConvexShape::localGetSupportVertexWithoutMarginNonVirtual;
  if (a7)
    v25 = btConvexShape::localGetSupportVertexNonVirtual;
  a6[8].i64[0] = (uint64_t)v25;
  a6[8].i64[1] = 0;
  return result;
}

uint64_t gjkepa2_impl::GJK::Evaluate(float32x4_t *this, float32x4_t *a2, float32x4_t *a3, double a4, double a5, float32x4_t a6, float32x4_t a7)
{
  float32x4_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int v11;
  int v12;
  int8x16_t v13;
  unsigned __int32 v14;
  int8x16_t v15;
  float32x4_t v16;
  unsigned __int32 v17;
  int8x16_t v18;
  float v19;
  unsigned __int32 v20;
  __int8 *v21;
  __int8 *v22;
  char *v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int *v29;
  uint64_t v30;
  int v31;
  float32x4_t v32;
  float32x4_t v33;
  int8x16_t v34;
  int8x16_t v35;
  float v36;
  int8x16_t v37;
  float32x4_t v38;
  char *v39;
  _DWORD *v40;
  uint64_t v41;
  float v42;
  int v43;
  uint64_t i;
  uint64_t v45;
  float v46;
  float *v47;
  float32x4_t v48;
  uint64_t v49;
  uint64_t result;
  char *v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  int8x16_t v55;
  float32x4_t v56;
  int8x16_t v57;
  float v58;
  btVector3 v59;
  float32x4_t v60[4];
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  this[26].i64[0] = (uint64_t)&this[18];
  this[26].i64[1] = (uint64_t)&this[20];
  this[27].i64[0] = (uint64_t)&this[22];
  this[27].i64[1] = (uint64_t)&this[24];
  this[28].i64[0] = 4;
  this[29].i32[0] = 0;
  *this = *a2;
  this[1] = a2[1];
  this[2] = a2[2];
  this[3] = a2[3];
  this[4] = a2[4];
  this[5] = a2[5];
  this[6] = a2[6];
  this[7] = a2[7];
  this[8] = a2[8];
  this[10].i32[0] = 0;
  this[13].i32[2] = 0;
  v8 = *a3;
  v9 = (int8x16_t)vmulq_f32(v8, v8);
  *(float32x2_t *)a6.f32 = vpadd_f32(*(float32x2_t *)v9.i8, *(float32x2_t *)v9.i8);
  v10 = vextq_s8(v9, v9, 8uLL);
  *(float32x2_t *)a7.f32 = vadd_f32(*(float32x2_t *)a6.f32, *(float32x2_t *)v10.i8);
  a6.i32[0] = 0;
  v10.i32[0] = 0;
  v56 = a7;
  v57 = v10;
  this[9] = *a3;
  v60[0] = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(a7, a6), 0), (int8x16_t)vnegq_f32(v8), (int8x16_t)xmmword_1DD007970);
  this[12].i32[2] = 0;
  this[28].i32[0] = 3;
  this[10].i64[1] = (uint64_t)&this[24];
  this[13].i32[2] = 1;
  gjkepa2_impl::GJK::getsupport(this, v60, (uint64_t)&this[24]);
  v11 = 0;
  v12 = 0;
  this[12].i32[2] = 1065353216;
  v13 = *(int8x16_t *)(this[10].i64[1] + 16);
  this[9] = (float32x4_t)v13;
  v60[2] = (float32x4_t)v13;
  v60[3] = (float32x4_t)v13;
  v60[0] = (float32x4_t)v13;
  v60[1] = (float32x4_t)v13;
  v14 = this[28].u32[1];
  v15.i64[0] = 0x8000000080000000;
  v15.i64[1] = 0x8000000080000000;
  v16 = (float32x4_t)v13;
  while (2)
  {
    v17 = v14;
    v18 = (int8x16_t)vmulq_f32(v16, v16);
    v19 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v18.i8, *(float32x2_t *)v18.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL)).f32[0]);
    if (v19 < 0.0001)
    {
      this[29].i32[0] = 1;
LABEL_28:
      result = this[29].u32[0];
      v20 = v17;
    }
    else
    {
      v20 = 1 - v14;
      v21 = &this[10].i8[56 * v14 + 8];
      v22 = &this[10].i8[56 * (1 - v14) + 8];
      v23 = (char *)this + 56 * v14;
      v25 = (int *)(v23 + 216);
      v24 = *((unsigned int *)v23 + 54);
      v59 = (btVector3)veorq_s8(v13, v15);
      *(_DWORD *)&v23[4 * v24 + 200] = 0;
      LODWORD(v23) = this[28].i32[0] - 1;
      this[28].i32[0] = (int)v23;
      v26 = this[26].i64[v23];
      *(_QWORD *)&v21[8 * v24] = v26;
      *v25 = v24 + 1;
      gjkepa2_impl::GJK::getsupport(this, (float32x4_t *)&v59, v26);
      v30 = 0;
      v31 = *v25;
      v32 = *(float32x4_t *)(*(_QWORD *)&v21[8 * (*v25 - 1)] + 16);
      do
      {
        v33 = vsubq_f32(v32, v60[v30]);
        v33.i32[3] = 0;
        v34 = (int8x16_t)vmulq_f32(v33, v33);
        if (vadd_f32(vpadd_f32(*(float32x2_t *)v34.i8, *(float32x2_t *)v34.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL)).f32[0] < 0.0001)goto LABEL_27;
        ++v30;
      }
      while (v30 != 4);
      v11 = (v11 + 1) & 3;
      v60[v11] = v32;
      v35 = (int8x16_t)vmulq_f32(v32, this[9]);
      v36 = vadd_f32(vpadd_f32(*(float32x2_t *)v35.i8, *(float32x2_t *)v35.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL)).f32[0]/ v19;
      v37 = v57;
      if (v36 > *(float *)v57.i32)
        *(float *)v37.i32 = v36;
      if ((float)((float)(v19 - *(float *)v37.i32) + (float)(v19 * -0.0001)) <= 0.0)
        goto LABEL_27;
      v58 = 0.0;
      v57 = v37;
      if (v31 == 4)
      {
        v38.f32[0] = gjkepa2_impl::GJK::projectorigin((float32x4_t *)(*(_QWORD *)v21 + 16), (float32x4_t *)(*((_QWORD *)v21 + 1) + 16), (float32x4_t *)(*((_QWORD *)v21 + 2) + 16), (float32x4_t *)(*((_QWORD *)v21 + 3) + 16), &v59, &v58, v29);
      }
      else if (v31 == 3)
      {
        v38.f32[0] = gjkepa2_impl::GJK::projectorigin((float32x4_t *)(*(_QWORD *)v21 + 16), (float32x4_t *)(*((_QWORD *)v21 + 1) + 16), (float32x4_t *)(*((_QWORD *)v21 + 2) + 16), &v59, &v58, v28);
      }
      else
      {
        v38 = v56;
        if (v31 == 2)
          *(float32x2_t *)v38.f32 = gjkepa2_impl::GJK::projectorigin((float32x4_t *)(*(_QWORD *)v21 + 16), (float32x4_t *)(*((_QWORD *)v21 + 1) + 16), &v59, &v58, v27);
      }
      if (v38.f32[0] < 0.0)
      {
LABEL_27:
        v17 = this[28].u32[1];
        v51 = (char *)this + 56 * v17;
        v52 = *((_DWORD *)v51 + 54) - 1;
        *((_DWORD *)v51 + 54) = v52;
        v53 = *(_QWORD *)&v51[8 * v52 + 168];
        v54 = this[28].u32[0];
        this[28].i32[0] = v54 + 1;
        this[26].i64[v54] = v53;
        goto LABEL_28;
      }
      v39 = (char *)this + 56 * v20;
      *((_DWORD *)v39 + 54) = 0;
      v40 = v39 + 216;
      v13 = 0uLL;
      this[9] = 0u;
      this[28].i32[1] = v20;
      v41 = *v25;
      v42 = v58;
      v16 = 0uLL;
      v15.i64[0] = 0x8000000080000000;
      v15.i64[1] = 0x8000000080000000;
      if ((_DWORD)v41)
      {
        v43 = 0;
        for (i = 0; i != v41; ++i)
        {
          v45 = *(_QWORD *)&v21[8 * i];
          if (((LODWORD(v42) >> i) & 1) != 0)
          {
            *(_QWORD *)&v22[8 * v43] = v45;
            v46 = v59.var0.var0[i];
            v47 = &this->f32[14 * v20 + v43++];
            *v40 = v43;
            v47[50] = v46;
            v48 = vmulq_n_f32(*(float32x4_t *)(*(_QWORD *)&v21[8 * i] + 16), v46);
            v48.i32[3] = 0;
            v13 = (int8x16_t)vaddq_f32(v16, v48);
            this[9] = (float32x4_t)v13;
            v16 = (float32x4_t)v13;
          }
          else
          {
            v49 = this[28].u32[0];
            this[28].i32[0] = v49 + 1;
            this[26].i64[v49] = v45;
          }
        }
      }
      if (LODWORD(v42) == 15)
        this[29].i32[0] = 1;
      if (v12 == 127)
      {
        result = 2;
        this[29].i32[0] = 2;
        this[28].i64[1] = (uint64_t)v22;
        return result;
      }
      v56 = v38;
      ++v12;
      result = this[29].u32[0];
      v14 = v20;
      if (!(_DWORD)result)
        continue;
    }
    break;
  }
  this[28].i64[1] = (uint64_t)&this[10].i64[7 * v20 + 1];
  if ((_DWORD)result == 1)
  {
    this[10].i32[0] = 0;
  }
  else if (!(_DWORD)result)
  {
    v55 = (int8x16_t)vmulq_f32(this[9], this[9]);
    this[10].f32[0] = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v55.i8, *(float32x2_t *)v55.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v55, v55, 8uLL)).f32[0]);
  }
  return result;
}

_QWORD *gjkepa2_impl::MinkowskiDiff::Support@<X0>(float32x4_t *this@<X0>, float32x4_t *a2@<X1>, int a3@<W2>, float32x4_t *a4@<X8>)
{
  _QWORD *(*v6)(float32x4_t *__return_ptr, _QWORD *, int8x16_t *);
  uint64_t v7;
  _QWORD *v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  _QWORD *result;
  float32x4_t v13;
  int8x16_t v14;
  int8x16_t v15;
  uint64_t (*v16)(_QWORD *, float32x4_t *);
  uint64_t v17;
  _QWORD *v18;
  int8x16_t v19;
  float32x4_t v20;

  if (a3)
  {
    v6 = (_QWORD *(*)(float32x4_t *__return_ptr, _QWORD *, int8x16_t *))this[8].i64[0];
    v7 = this[8].i64[1];
    v8 = (_QWORD *)(this->i64[1] + (v7 >> 1));
    if ((v7 & 1) != 0)
      v6 = *(_QWORD *(**)(float32x4_t *__return_ptr, _QWORD *, int8x16_t *))(*v8 + v6);
    v9 = (int8x16_t)vmulq_f32(this[1], *a2);
    v10 = (int8x16_t)vmulq_f32(*a2, this[2]);
    v11 = (int8x16_t)vmulq_f32(*a2, this[3]);
    v11.i32[3] = 0;
    *(float32x2_t *)v9.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v9.i8, *(float32x2_t *)v10.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL)));
    v9.u64[1] = (unint64_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v11.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL)), 0);
    v19 = v9;
    result = v6(&v20, v8, &v19);
    v13 = vmulq_f32(this[4], v20);
    v14 = (int8x16_t)vmulq_f32(v20, this[5]);
    v15 = (int8x16_t)vmulq_f32(v20, this[6]);
    v15.i32[3] = 0;
    *(float32x2_t *)v13.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v13.f32, *(float32x2_t *)v14.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)));
    *(float32x2_t *)&v13.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v15.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL)), 0);
    *a4 = vaddq_f32(v13, this[7]);
  }
  else
  {
    v16 = (uint64_t (*)(_QWORD *, float32x4_t *))this[8].i64[0];
    v17 = this[8].i64[1];
    v18 = (_QWORD *)(this->i64[0] + (v17 >> 1));
    if ((v17 & 1) != 0)
      v16 = *(uint64_t (**)(_QWORD *, float32x4_t *))(*v18 + v16);
    return (_QWORD *)v16(v18, a2);
  }
  return result;
}

float btGjkEpaSolver2::Penetration(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int8x16_t *v3;
  int8x16_t *v4;
  float32x4_t *v5;
  float32x4_t *v6;
  uint64_t v7;
  uint64_t v8;
  float32x4_t *v9;
  int v10;
  int8x16_t v11;
  float32x4_t v12;
  float32x4_t v13;
  int v14;
  float result;
  int8x16_t v16;
  float32x4_t v17;
  unint64_t i;
  void (*v19)(btVector3 *__return_ptr, _QWORD *, _QWORD);
  _QWORD *v20;
  float32x4_t v21;
  float32x4_t v22;
  int8x16_t v23;
  int8x16_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  int8x16_t v28;
  int8x16_t v29;
  float32x4_t v30;
  int8x16_t v31;
  float32x4_t v32;
  btVector3 v33;
  float32x4_t v34[8];
  void (*v35)(btVector3 *__return_ptr, _QWORD *, _QWORD);
  uint64_t v36;
  btVector3 v37;
  _DWORD v38[4];
  unsigned int v39;
  float32x4_t v40;
  float v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  float32x4_t v46[9];
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;

  MEMORY[0x1E0C80A78](a1);
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v52 = *MEMORY[0x1E0C80C00];
  gjkepa2_impl::Initialize(v7, v5, v8, v9, v1, v34, v10);
  v48 = 0;
  v47 = 0;
  v51 = 2;
  v50 = 0;
  v49 = 0;
  v11.i64[0] = 0x8000000080000000;
  v11.i64[1] = 0x8000000080000000;
  v37 = (btVector3)veorq_s8(*v4, v11);
  v14 = gjkepa2_impl::GJK::Evaluate(v46, v34, (float32x4_t *)&v37, *(double *)v37.var0.var0, COERCE_DOUBLE(0x8000000080000000), v12, v13);
  if (v14 == 2)
  {
    *(_DWORD *)v2 = 2;
  }
  else if (v14 == 1)
  {
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v45 = 0;
    gjkepa2_impl::EPA::Initialize((uint64_t)&v37);
    v16.i64[0] = 0x8000000080000000;
    v16.i64[1] = 0x8000000080000000;
    v33 = (btVector3)veorq_s8(*v4, v16);
    if (gjkepa2_impl::EPA::Evaluate((gjkepa2_impl::EPA *)&v37, v46, (int8x16_t *)&v33) == 9)
    {
      *(_DWORD *)v2 = 3;
    }
    else
    {
      v17 = 0uLL;
      if (v39)
      {
        for (i = 0; i < v39; ++i)
        {
          v19 = v35;
          v20 = (_QWORD *)(v34[0].i64[0] + (v36 >> 1));
          v32 = v17;
          if ((v36 & 1) != 0)
            v19 = *(void (**)(btVector3 *__return_ptr, _QWORD *, _QWORD))(*v20 + v35);
          v19(&v33, v20, *(_QWORD *)&v37.var0.var0[2 * i + 2]);
          v21 = vmulq_n_f32((float32x4_t)v33, *(float *)&v38[i]);
          v21.i32[3] = 0;
          v17 = vaddq_f32(v32, v21);
        }
      }
      *(_DWORD *)v2 = 1;
      v22 = vmulq_f32(v17, *v6);
      v23 = (int8x16_t)vmulq_f32(v17, v6[1]);
      v24 = (int8x16_t)vmulq_f32(v17, v6[2]);
      v24.i32[3] = 0;
      *(float32x2_t *)v22.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v22.f32, *(float32x2_t *)v23.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL)));
      *(float32x2_t *)&v22.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v24.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL)), 0);
      *(float32x4_t *)(v2 + 16) = vaddq_f32(v22, v6[3]);
      *(float *)v23.i32 = v41;
      v25 = vmulq_n_f32(v40, v41);
      v25.i32[3] = 0;
      v26 = vsubq_f32(v17, v25);
      v27 = v26;
      v27.i32[3] = 0;
      v28 = (int8x16_t)vmulq_f32(v6[2], v26);
      v29 = (int8x16_t)vmulq_f32(*v6, v27);
      v30 = vmulq_f32(v6[1], v27);
      v28.i32[3] = 0;
      *(float32x2_t *)v30.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v29.i8, *(float32x2_t *)v30.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v30, (int8x16_t)v30, 8uLL)));
      *(float32x2_t *)&v30.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v28.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL)), 0);
      v28.i64[0] = 0x8000000080000000;
      v28.i64[1] = 0x8000000080000000;
      v31 = veorq_s8((int8x16_t)v40, v28);
      *(float32x4_t *)(v2 + 32) = vaddq_f32(v6[3], v30);
      *(int8x16_t *)(v2 + 48) = v31;
      result = -*(float *)v23.i32;
      *(float *)(v2 + 64) = -*(float *)v23.i32;
    }
  }
  return result;
}

uint64_t gjkepa2_impl::EPA::Evaluate(gjkepa2_impl::EPA *this, float32x4_t *a2, int8x16_t *a3)
{
  float32x4_t **v5;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float32x4_t *v13;
  float32x4_t v14;
  float32x4_t *v15;
  float32x4_t *v16;
  float32x4_t v18;
  float32x4_t *v29;
  float32x4_t *v30;
  float32x4_t *v31;
  float32x4_t *v32;
  float32x4_t *v33;
  float32x4_t *v34;
  float32x4_t *v35;
  float v36;
  int v37;
  float32x4_t v38;
  float v39;
  float32x4_t *v40;
  float32x4_t *v41;
  float32x4_t *v42;
  uint64_t v43;
  float32x4_t *v44;
  float32x4_t *v45;
  int8x16_t v46;
  unint64_t v47;
  char v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  float32x4_t *v55;
  float v56;
  int8x16_t v57;
  float32x4_t v58;
  int8x16_t v59;
  float v60;
  float32x4_t v61;
  int v63;
  float32x4_t v64;
  float32x4_t v65;
  int8x8_t v66;
  float32x4_t v67;
  int8x8_t v68;
  float32x4_t v69;
  float32x4_t v70;
  int8x16_t v71;
  int8x16_t v72;
  float32x4_t v73;
  float32x4_t v74;
  int8x8_t v75;
  float32x4_t v76;
  int8x16_t v77;
  int8x16_t v78;
  float32x4_t v79;
  float32x4_t v80;
  int8x16_t v81;
  int8x16_t v82;
  float v83;
  float32x4_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;

  v5 = (float32x4_t **)a2[28].i64[1];
  if (*((_DWORD *)v5 + 12) < 2u || !gjkepa2_impl::GJK::EncloseOrigin(a2))
    goto LABEL_49;
  v7 = *((_QWORD *)this + 1805);
  if (v7)
  {
    v8 = *((_DWORD *)this + 3612);
    v9 = *((_DWORD *)this + 3616);
    do
    {
      v10 = *(_QWORD *)(v7 + 80);
      if (v10)
        *(_QWORD *)(v10 + 72) = *(_QWORD *)(v7 + 72);
      v11 = *(_QWORD *)(v7 + 72);
      if (v11)
        *(_QWORD *)(v11 + 80) = *(_QWORD *)(v7 + 80);
      if (*((_QWORD *)this + 1805) == v7)
        *((_QWORD *)this + 1805) = *(_QWORD *)(v7 + 80);
      *(_QWORD *)(v7 + 72) = 0;
      *(_QWORD *)(v7 + 80) = *((_QWORD *)this + 1807);
      v12 = *((_QWORD *)this + 1807);
      if (v12)
        *(_QWORD *)(v12 + 72) = v7;
      *((_QWORD *)this + 1807) = v7;
      ++v9;
      v7 = *((_QWORD *)this + 1805);
      --v8;
    }
    while (v7);
    *((_DWORD *)this + 3612) = v8;
    *((_DWORD *)this + 3616) = v9;
  }
  *(_DWORD *)this = 0;
  *((_DWORD *)this + 3608) = 0;
  v13 = v5[2];
  v14 = v5[3][1];
  v16 = *v5;
  v15 = v5[1];
  _Q1 = vsubq_f32((*v5)[1], v14);
  v18 = vsubq_f32(v15[1], v14);
  _Q0 = vsubq_f32(v13[1], v14);
  _S4 = vmuls_lane_f32(-_Q1.f32[0], v18, 2);
  __asm { FMLA            S6, S4, V0.S[1] }
  _S3 = (float)-_Q1.f32[1] * v18.f32[0];
  __asm { FMLA            S6, S3, V0.S[2] }
  _Q1.f32[0] = vmuls_lane_f32(_Q1.f32[0], *(float32x2_t *)v18.f32, 1);
  __asm { FMLA            S6, S1, V0.S[2] }
  if (vmlas_n_f32(_S6, vmuls_lane_f32(-_Q1.f32[2], *(float32x2_t *)v18.f32, 1), _Q0.f32[0]) >= 0.0)
  {
    v29 = v5[1];
    v15 = *v5;
  }
  else
  {
    *v5 = v15;
    v5[1] = v16;
    v5[4] = (float32x4_t *)vrev64_s32((int32x2_t)v5[4]);
    v29 = v16;
  }
  v30 = gjkepa2_impl::EPA::newface((uint64_t)this, v15, v29, v13, 1);
  v31 = gjkepa2_impl::EPA::newface((uint64_t)this, v5[1], *v5, v5[3], 1);
  v32 = gjkepa2_impl::EPA::newface((uint64_t)this, v5[2], v5[1], v5[3], 1);
  v33 = gjkepa2_impl::EPA::newface((uint64_t)this, *v5, v5[2], v5[3], 1);
  if (*((_DWORD *)this + 3612) == 4)
  {
    v34 = (float32x4_t *)*((_QWORD *)this + 1805);
    v35 = (float32x4_t *)v34[5].i64[0];
    if (v35)
    {
      v36 = v34[1].f32[0] * v34[1].f32[0];
      do
      {
        if ((float)(v35[1].f32[0] * v35[1].f32[0]) < v36)
        {
          v34 = v35;
          v36 = v35[1].f32[0] * v35[1].f32[0];
        }
        v35 = (float32x4_t *)v35[5].i64[0];
      }
      while (v35);
    }
    v37 = 0;
    v38 = *v34;
    v39 = v34[1].f32[0];
    v41 = (float32x4_t *)v34[1].i64[1];
    v40 = (float32x4_t *)v34[2].i64[0];
    v42 = (float32x4_t *)v34[2].i64[1];
    v30[5].i8[8] = 0;
    v30[3].i64[0] = (uint64_t)v31;
    v31[5].i8[8] = 0;
    v31[3].i64[0] = (uint64_t)v30;
    v30[5].i8[9] = 0;
    v30[3].i64[1] = (uint64_t)v32;
    v32[5].i8[8] = 1;
    v32[3].i64[0] = (uint64_t)v30;
    v30[5].i8[10] = 0;
    v30[4].i64[0] = (uint64_t)v33;
    v33[5].i8[8] = 2;
    v33[3].i64[0] = (uint64_t)v30;
    v31[5].i8[9] = 2;
    v31[3].i64[1] = (uint64_t)v33;
    v33[5].i8[10] = 1;
    v33[4].i64[0] = (uint64_t)v31;
    v31[5].i8[10] = 1;
    v31[4].i64[0] = (uint64_t)v32;
    *(__int16 *)((char *)&v32[5].i16[4] + 1) = 258;
    v32[3].i64[1] = (uint64_t)v31;
    v32[4].i64[0] = (uint64_t)v33;
    v33[5].i8[9] = 2;
    v33[3].i64[1] = (uint64_t)v32;
    *(_DWORD *)this = 0;
    while (1)
    {
      v43 = *((unsigned int *)this + 3608);
      if (v43 > 0x3F)
      {
        *(_DWORD *)this = 6;
        goto LABEL_57;
      }
      v83 = v39;
      v84 = v38;
      v85 = 0;
      v86 = 0;
      v87 = 0;
      *((_DWORD *)this + 3608) = v43 + 1;
      v44 = (float32x4_t *)((char *)this + 32 * v43);
      v45 = v44 + 6;
      v34[5].i8[11] = ++v37;
      gjkepa2_impl::GJK::getsupport(a2, v34, (uint64_t)&v44[6]);
      v46 = (int8x16_t)vmulq_f32(*v34, v44[7]);
      if ((float)(vadd_f32(vpadd_f32(*(float32x2_t *)v46.i8, *(float32x2_t *)v46.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v46, v46, 8uLL)).f32[0]- v34[1].f32[0]) <= 0.0001)
      {
        v63 = 7;
        goto LABEL_56;
      }
      v47 = 0;
      do
      {
        v48 = gjkepa2_impl::EPA::expand((uint64_t)this, v37, v45, (float32x4_t *)v34[3].i64[v47], v34[5].u8[v47 + 8], &v85);
        if (v47 > 1)
          break;
        ++v47;
      }
      while ((v48 & 1) != 0);
      v49 = v87 > 2 ? v48 : 0;
      if ((v49 & 1) == 0)
        break;
      v50 = v85;
      v51 = v86;
      *(_BYTE *)(v85 + 89) = 2;
      *(_QWORD *)(v50 + 56) = v51;
      *(_BYTE *)(v51 + 90) = 1;
      *(_QWORD *)(v51 + 64) = v50;
      v52 = v34[5].i64[0];
      if (v52)
        *(_QWORD *)(v52 + 72) = v34[4].i64[1];
      v53 = v34[4].i64[1];
      if (v53)
        *(_QWORD *)(v53 + 80) = v34[5].i64[0];
      if (*((float32x4_t **)this + 1805) == v34)
        *((_QWORD *)this + 1805) = v34[5].i64[0];
      --*((_DWORD *)this + 3612);
      v34[4].i64[1] = 0;
      v34[5].i64[0] = *((_QWORD *)this + 1807);
      v54 = *((_QWORD *)this + 1807);
      if (v54)
        *(_QWORD *)(v54 + 72) = v34;
      *((_QWORD *)this + 1807) = v34;
      ++*((_DWORD *)this + 3616);
      v34 = (float32x4_t *)*((_QWORD *)this + 1805);
      v55 = (float32x4_t *)v34[5].i64[0];
      if (v55)
      {
        v56 = v34[1].f32[0] * v34[1].f32[0];
        do
        {
          if ((float)(v55[1].f32[0] * v55[1].f32[0]) < v56)
          {
            v34 = v55;
            v56 = v55[1].f32[0] * v55[1].f32[0];
          }
          v55 = (float32x4_t *)v55[5].i64[0];
        }
        while (v55);
      }
      v38 = *v34;
      v39 = v34[1].f32[0];
      v41 = (float32x4_t *)v34[1].i64[1];
      v40 = (float32x4_t *)v34[2].i64[0];
      v42 = (float32x4_t *)v34[2].i64[1];
      if (v37 == 255)
        goto LABEL_57;
    }
    v63 = 4;
LABEL_56:
    *(_DWORD *)this = v63;
    v39 = v83;
    v38 = v84;
LABEL_57:
    v64 = vmulq_n_f32(v38, v39);
    v64.i32[3] = 0;
    *((float32x4_t *)this + 4) = v38;
    *((float *)this + 20) = v39;
    *((_DWORD *)this + 14) = 3;
    *((_QWORD *)this + 1) = v41;
    *((_QWORD *)this + 2) = v40;
    *((_QWORD *)this + 3) = v42;
    v65 = vsubq_f32(v40[1], v64);
    v66 = (int8x8_t)vextq_s8((int8x16_t)v65, (int8x16_t)v65, 8uLL).u64[0];
    v65.i32[3] = 0;
    v67 = vsubq_f32(v42[1], v64);
    v68 = (int8x8_t)vextq_s8((int8x16_t)v67, (int8x16_t)v67, 8uLL).u64[0];
    v67.i32[3] = 0;
    *(int8x8_t *)v69.f32 = vext_s8(*(int8x8_t *)v65.f32, v66, 4uLL);
    v69.i64[1] = v65.i64[0];
    *(int8x8_t *)v70.f32 = vext_s8(*(int8x8_t *)v67.f32, v68, 4uLL);
    v70.i64[1] = v67.i64[0];
    v71 = (int8x16_t)vsubq_f32(vmulq_f32(v70, v65), vmulq_f32(v69, v67));
    v69.i64[0] = vextq_s8(v71, v71, 4uLL).u64[0];
    v69.i64[1] = v71.u32[0];
    v72 = (int8x16_t)vmulq_f32(v69, v69);
    *(float *)v72.i32 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v72.i8, *(float32x2_t *)v72.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v72, v72, 8uLL)).f32[0]);
    *((_DWORD *)this + 10) = v72.i32[0];
    v73 = vsubq_f32(v42[1], v64);
    v67.i64[0] = vextq_s8((int8x16_t)v73, (int8x16_t)v73, 8uLL).u64[0];
    v73.i32[3] = 0;
    v74 = vsubq_f32(v41[1], v64);
    v75 = (int8x8_t)vextq_s8((int8x16_t)v74, (int8x16_t)v74, 8uLL).u64[0];
    v74.i32[3] = 0;
    *(int8x8_t *)v67.f32 = vext_s8(*(int8x8_t *)v73.f32, *(int8x8_t *)v67.f32, 4uLL);
    v67.i64[1] = v73.i64[0];
    *(int8x8_t *)v76.f32 = vext_s8(*(int8x8_t *)v74.f32, v75, 4uLL);
    v76.i64[1] = v74.i64[0];
    v77 = (int8x16_t)vsubq_f32(vmulq_f32(v76, v73), vmulq_f32(v67, v74));
    v67.i64[0] = vextq_s8(v77, v77, 4uLL).u64[0];
    v67.i64[1] = v77.u32[0];
    v78 = (int8x16_t)vmulq_f32(v67, v67);
    *(float *)v78.i32 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v78.i8, *(float32x2_t *)v78.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v78, v78, 8uLL)).f32[0]);
    *((_DWORD *)this + 11) = v78.i32[0];
    v79 = vsubq_f32(v41[1], v64);
    v67.i64[0] = vextq_s8((int8x16_t)v79, (int8x16_t)v79, 8uLL).u64[0];
    v79.i32[3] = 0;
    v80 = vsubq_f32(v40[1], v64);
    v74.i64[0] = vextq_s8((int8x16_t)v80, (int8x16_t)v80, 8uLL).u64[0];
    v80.i32[3] = 0;
    *(int8x8_t *)v67.f32 = vext_s8(*(int8x8_t *)v79.f32, *(int8x8_t *)v67.f32, 4uLL);
    v67.i64[1] = v79.i64[0];
    *(int8x8_t *)v74.f32 = vext_s8(*(int8x8_t *)v80.f32, *(int8x8_t *)v74.f32, 4uLL);
    v74.i64[1] = v80.i64[0];
    v81 = (int8x16_t)vsubq_f32(vmulq_f32(v74, v79), vmulq_f32(v67, v80));
    v79.i64[0] = vextq_s8(v81, v81, 4uLL).u64[0];
    v79.i64[1] = v81.u32[0];
    v82 = (int8x16_t)vmulq_f32(v79, v79);
    *(float *)v82.i32 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v82.i8, *(float32x2_t *)v82.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v82, v82, 8uLL)).f32[0]);
    v79.f32[0] = (float)(*(float *)v72.i32 + *(float *)v78.i32) + *(float *)v82.i32;
    *((float *)this + 10) = *(float *)v72.i32 / v79.f32[0];
    *((float *)this + 11) = *(float *)v78.i32 / v79.f32[0];
    *((float *)this + 12) = *(float *)v82.i32 / v79.f32[0];
    return *(unsigned int *)this;
  }
  else
  {
LABEL_49:
    *(_DWORD *)this = 8;
    v57.i64[0] = 0x8000000080000000;
    v57.i64[1] = 0x8000000080000000;
    v58 = (float32x4_t)veorq_s8(*a3, v57);
    v59 = (int8x16_t)vmulq_f32(v58, v58);
    v60 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v59.i8, *(float32x2_t *)v59.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v59, v59, 8uLL)).f32[0]);
    if (v60 <= 0.0)
    {
      v61 = (float32x4_t)xmmword_1DD007970;
    }
    else
    {
      v61 = vmulq_n_f32(v58, 1.0 / v60);
      v61.i32[3] = 0;
    }
    *((float32x4_t *)this + 4) = v61;
    *((_DWORD *)this + 20) = 0;
    *((_DWORD *)this + 14) = 1;
    *((_QWORD *)this + 1) = *v5;
    *((_DWORD *)this + 10) = 1065353216;
    return 8;
  }
}

float32x2_t gjkepa2_impl::GJK::projectorigin(float32x4_t *this, float32x4_t *a2, const btVector3 *a3, float *a4, unsigned int *a5)
{
  float32x4_t v5;
  int8x16_t v6;
  float32x2_t v7;
  float v8;
  float32x2_t result;
  int8x16_t v10;
  float v11;
  float32x4_t v12;
  float32x4_t v13;
  int8x16_t v14;

  v5 = vsubq_f32(*a2, *this);
  v5.i32[3] = 0;
  v6 = (int8x16_t)vmulq_f32(v5, v5);
  v7 = vpadd_f32(*(float32x2_t *)v6.i8, *(float32x2_t *)v6.i8);
  result = (float32x2_t)vextq_s8(v6, v6, 8uLL).u64[0];
  v8 = vadd_f32(v7, result).f32[0];
  result.i32[0] = -1.0;
  if (v8 > 0.0)
  {
    v10 = (int8x16_t)vmulq_f32(*this, v5);
    v11 = (float)-vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL), vpadd_f32(*(float32x2_t *)v10.i8, *(float32x2_t *)v10.i8)).f32[0]/ v8;
    if (v11 >= 1.0)
    {
      *(_QWORD *)a3->var0.var0 = 0x3F80000000000000;
      *(_DWORD *)a4 = 2;
      v13 = *a2;
    }
    else if (v11 <= 0.0)
    {
      *(_QWORD *)a3->var0.var0 = 1065353216;
      *(_DWORD *)a4 = 1;
      v13 = *this;
    }
    else
    {
      a3->var0.var0[0] = 1.0 - v11;
      a3->var0.var0[1] = v11;
      *(_DWORD *)a4 = 3;
      v12 = vmulq_n_f32(v5, v11);
      v12.i32[3] = 0;
      v13 = vaddq_f32(*this, v12);
    }
    v14 = (int8x16_t)vmulq_f32(v13, v13);
    return vadd_f32(vpadd_f32(*(float32x2_t *)v14.i8, *(float32x2_t *)v14.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL));
  }
  return result;
}

float32_t gjkepa2_impl::GJK::projectorigin(float32x4_t *this, float32x4_t *a2, float32x4_t *a3, const btVector3 *a4, float *a5, unsigned int *a6)
{
  float32x4_t v6;
  float32x4_t v7;
  int8x8_t v8;
  int8x16_t v9;
  int8x8_t v10;
  float32x4_t v11;
  float32x4_t v12;
  int8x16_t v13;
  float32x4_t v14;
  int8x16_t v15;
  float32x2_t v16;
  float32x4_t v17;
  uint64_t v22;
  float32x4_t v23;
  float32x4_t *v24;
  float32x4_t v25;
  float32x4_t v26;
  int8x16_t v27;
  int8x16_t v28;
  uint64_t v29;
  float v30;
  float v31;
  int8x16_t v32;
  float32x4_t v33;
  int8x16_t v34;
  float32x4_t v35;
  int8x8_t v36;
  float32x4_t v37;
  int8x16_t v38;
  float32x4_t v39;
  float32x4_t v40;
  int8x16_t v41;
  int8x16_t v42;
  float32x2_t v44;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float v52;
  uint64_t v53;
  _OWORD v54[3];
  _QWORD v55[5];

  v55[3] = *MEMORY[0x1E0C80C00];
  v55[0] = this;
  v55[1] = a2;
  v55[2] = a3;
  v6 = *this;
  v7 = vsubq_f32(*this, *a2);
  v8 = (int8x8_t)vextq_s8((int8x16_t)v7, (int8x16_t)v7, 8uLL).u64[0];
  v7.i32[3] = 0;
  v17 = *a3;
  v9 = (int8x16_t)vsubq_f32(*a2, *a3);
  v10 = (int8x8_t)vextq_s8(v9, v9, 8uLL).u64[0];
  v11 = (float32x4_t)v9;
  v11.i32[3] = 0;
  v54[0] = v7;
  v54[1] = v11;
  v12 = vsubq_f32(v17, v6);
  v12.i32[3] = 0;
  *(int8x8_t *)v6.f32 = vext_s8(*(int8x8_t *)v7.f32, v8, 4uLL);
  v6.i64[1] = v7.i64[0];
  v47 = v11;
  v48 = v12;
  v54[2] = v12;
  *(int8x8_t *)v12.f32 = vext_s8(*(int8x8_t *)v11.f32, v10, 4uLL);
  v12.i64[1] = v11.i64[0];
  v46 = v12;
  v13 = (int8x16_t)vsubq_f32(vmulq_f32(v12, v7), vmulq_f32(v6, v11));
  v14.i64[0] = vextq_s8(v13, v13, 4uLL).u64[0];
  v14.i64[1] = v13.u32[0];
  v15 = (int8x16_t)vmulq_f32(v14, v14);
  v16 = vadd_f32(vpadd_f32(*(float32x2_t *)v15.i8, *(float32x2_t *)v15.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL));
  v17.i32[0] = -1.0;
  if (v16.f32[0] > 0.0)
  {
    v44 = v16;
    v22 = 0;
    v53 = 0;
    v52 = 0.0;
    v23.i64[0] = vextq_s8((int8x16_t)v14, (int8x16_t)v14, 4uLL).u64[0];
    v23.i64[1] = v14.i64[0];
    v17.i32[0] = -1.0;
    v49 = v23;
    v50 = v14;
    do
    {
      v24 = (float32x4_t *)v55[v22];
      v25 = (float32x4_t)v54[v22];
      *(int8x8_t *)v26.f32 = vext_s8(*(int8x8_t *)v25.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL), 4uLL);
      v26.i64[1] = *(_QWORD *)&v54[v22];
      v27 = (int8x16_t)vsubq_f32(vmulq_f32(v23, v25), vmulq_f32(v26, v14));
      v26.i64[0] = vextq_s8(v27, v27, 4uLL).u64[0];
      v26.i64[1] = v27.u32[0];
      v28 = (int8x16_t)vmulq_f32(*v24, v26);
      if (vadd_f32(vpadd_f32(*(float32x2_t *)v28.i8, *(float32x2_t *)v28.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL)).f32[0] > 0.0)
      {
        v29 = gjkepa2_impl::GJK::projectorigin(btVector3 const&,btVector3 const&,btVector3 const&,float *,unsigned int &)::imd3[v22];
        v51 = v17;
        LODWORD(v30) = gjkepa2_impl::GJK::projectorigin(v24, (float32x4_t *)v55[v29], (const btVector3 *)&v53, &v52, (unsigned int *)a5).u32[0];
        v23 = v49;
        v14 = v50;
        v17 = v51;
        if (v51.f32[0] < 0.0 || v30 < v51.f32[0])
        {
          *(_DWORD *)a5 = (((int)(LODWORD(v52) << 31) >> 31) & (1 << v22))
                        + ((1 << v29) & ((int)(LODWORD(v52) << 30) >> 31));
          v31 = *((float *)&v53 + 1);
          LODWORD(a4->var0.var0[v22]) = v53;
          a4->var0.var0[v29] = v31;
          a4->var0.var0[gjkepa2_impl::GJK::projectorigin(btVector3 const&,btVector3 const&,btVector3 const&,float *,unsigned int &)::imd3[v29]] = 0.0;
          v17.f32[0] = v30;
        }
      }
      ++v22;
    }
    while (v22 != 3);
    if (v17.f32[0] < 0.0)
    {
      v32 = (int8x16_t)vmulq_f32(*this, v14);
      v33 = vmulq_n_f32(v14, vdiv_f32(vadd_f32(vpadd_f32(*(float32x2_t *)v32.i8, *(float32x2_t *)v32.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL)), v44).f32[0]);
      v33.i32[3] = 0;
      *(float *)v32.i32 = sqrtf(v44.f32[0]);
      v34 = (int8x16_t)vmulq_f32(v33, v33);
      *(_DWORD *)a5 = 7;
      v35 = vsubq_f32(*a2, v33);
      v36 = (int8x8_t)vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL).u64[0];
      v35.i32[3] = 0;
      *(int8x8_t *)v37.f32 = vext_s8(*(int8x8_t *)v35.f32, v36, 4uLL);
      v37.i64[1] = v35.i64[0];
      v17 = vsubq_f32(vmulq_f32(v37, v47), vmulq_f32(v46, v35));
      v37.i64[0] = vextq_s8((int8x16_t)v17, (int8x16_t)v17, 4uLL).u64[0];
      v37.i64[1] = v17.u32[0];
      v38 = (int8x16_t)vmulq_f32(v37, v37);
      *(float *)v38.i32 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v38.i8, *(float32x2_t *)v38.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v38, v38, 8uLL)).f32[0])/ *(float *)v32.i32;
      LODWORD(a4->var0.var0[0]) = v38.i32[0];
      v39 = vsubq_f32(*a3, v33);
      v37.i64[0] = vextq_s8((int8x16_t)v39, (int8x16_t)v39, 8uLL).u64[0];
      v39.i32[3] = 0;
      v40.i64[0] = vextq_s8((int8x16_t)v48, (int8x16_t)v48, 4uLL).u64[0];
      v40.i64[1] = v48.i64[0];
      *(int8x8_t *)v37.f32 = vext_s8(*(int8x8_t *)v39.f32, *(int8x8_t *)v37.f32, 4uLL);
      v37.i64[1] = v39.i64[0];
      v41 = (int8x16_t)vsubq_f32(vmulq_f32(v37, v48), vmulq_f32(v40, v39));
      v37.i64[0] = vextq_s8(v41, v41, 4uLL).u64[0];
      v37.i64[1] = v41.u32[0];
      v17.i32[0] = vadd_f32(vpadd_f32(*(float32x2_t *)v34.i8, *(float32x2_t *)v34.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL)).u32[0];
      v42 = (int8x16_t)vmulq_f32(v37, v37);
      *(float *)v32.i32 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v42.i8, *(float32x2_t *)v42.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v42, v42, 8uLL)).f32[0])/ *(float *)v32.i32;
      LODWORD(a4->var0.var0[1]) = v32.i32[0];
      a4->var0.var0[2] = 1.0 - (float)(*(float *)v38.i32 + *(float *)v32.i32);
    }
  }
  return v17.f32[0];
}

float gjkepa2_impl::GJK::projectorigin(float32x4_t *this, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, const btVector3 *a5, float *a6, unsigned int *a7)
{
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float v23;
  float v24;
  float32x4_t v25;
  int8x8_t v26;
  float32x4_t v27;
  int8x8_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int8x16_t v31;
  int8x16_t v32;
  uint64_t v37;
  uint64_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  int8x16_t v43;
  int8x16_t v44;
  float v45;
  float v46;
  const btVector3 *v47;
  const btVector3 *v48;
  float v49;
  float v50;
  float v54;
  btVector3 v55;
  _OWORD v56[3];
  _QWORD v57[6];

  v57[4] = *MEMORY[0x1E0C80C00];
  v57[0] = this;
  v57[1] = a2;
  v57[2] = a3;
  v57[3] = a4;
  v7 = *this;
  v8 = *a4;
  _Q4 = vsubq_f32(*this, *a4);
  _Q4.i32[3] = 0;
  v10 = *a2;
  v11 = vsubq_f32(*a2, *a4);
  v11.i32[3] = 0;
  v56[0] = _Q4;
  v56[1] = v11;
  v12 = *a3;
  _Q3 = vsubq_f32(*a3, v8);
  _Q3.i32[3] = 0;
  v56[2] = _Q3;
  _S7 = vmuls_lane_f32(-_Q4.f32[0], v11, 2);
  __asm { FMLA            S9, S7, V3.S[1] }
  _S6 = (float)-_Q4.f32[1] * v11.f32[0];
  __asm { FMLA            S9, S6, V3.S[2] }
  _Q4.f32[0] = vmuls_lane_f32(_Q4.f32[0], *(float32x2_t *)v11.f32, 1);
  __asm { FMLA            S9, S4, V3.S[2] }
  v23 = vmlas_n_f32(_S9, vmuls_lane_f32(-_Q4.f32[2], *(float32x2_t *)v11.f32, 1), _Q3.f32[0]);
  v24 = -1.0;
  if (v23 != 0.0)
  {
    v25 = vsubq_f32(v10, v12);
    v26 = (int8x8_t)vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL).u64[0];
    v25.i32[3] = 0;
    v27 = vsubq_f32(v7, v10);
    v28 = (int8x8_t)vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL).u64[0];
    v27.i32[3] = 0;
    *(int8x8_t *)v29.f32 = vext_s8(*(int8x8_t *)v25.f32, v26, 4uLL);
    v29.i64[1] = v25.i64[0];
    *(int8x8_t *)v30.f32 = vext_s8(*(int8x8_t *)v27.f32, v28, 4uLL);
    v30.i64[1] = v27.i64[0];
    v31 = (int8x16_t)vsubq_f32(vmulq_f32(v30, v25), vmulq_f32(v29, v27));
    v25.i64[0] = vextq_s8(v31, v31, 4uLL).u64[0];
    v25.i64[1] = v31.u32[0];
    v32 = (int8x16_t)vmulq_f32(v7, v25);
    if ((float)(v23
               * vadd_f32(vpadd_f32(*(float32x2_t *)v32.i8, *(float32x2_t *)v32.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL)).f32[0]) <= 0.0)
    {
      v37 = 0;
      v55.var0.var0[2] = 0.0;
      *(_QWORD *)v55.var0.var0 = 0;
      v54 = 0.0;
      do
      {
        v38 = gjkepa2_impl::GJK::projectorigin(btVector3 const&,btVector3 const&,btVector3 const&,btVector3 const&,float *,unsigned int &)::imd3[v37];
        v39 = (float32x4_t)v56[v37];
        v40 = (float32x4_t)v56[v38];
        *(int8x8_t *)v41.f32 = vext_s8(*(int8x8_t *)v39.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v39, (int8x16_t)v39, 8uLL), 4uLL);
        v41.i64[1] = *(_QWORD *)&v56[v37];
        *(int8x8_t *)v42.f32 = vext_s8(*(int8x8_t *)v40.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v40, (int8x16_t)v40, 8uLL), 4uLL);
        v42.i64[1] = *(_QWORD *)&v56[v38];
        v43 = (int8x16_t)vsubq_f32(vmulq_f32(v39, v42), vmulq_f32(v40, v41));
        v40.i64[0] = vextq_s8(v43, v43, 4uLL).u64[0];
        v40.i64[1] = v43.u32[0];
        v44 = (int8x16_t)vmulq_f32(*a4, v40);
        if ((float)(v23
                   * vadd_f32(vpadd_f32(*(float32x2_t *)v44.i8, *(float32x2_t *)v44.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v44, v44, 8uLL)).f32[0]) > 0.0)
        {
          v45 = gjkepa2_impl::GJK::projectorigin((float32x4_t *)v57[v37], (float32x4_t *)v57[v38], a4, &v55, &v54, (unsigned int *)a6);
          if (v24 < 0.0 || v45 < v24)
          {
            *(_DWORD *)a6 = ((1 << v38) & ((int)(LODWORD(v54) << 30) >> 31))
                          + ((2 * LODWORD(v54)) & 8)
                          + (((int)(LODWORD(v54) << 31) >> 31) & (1 << v37));
            v46 = v55.var0.var0[1];
            a5->var0.var0[v37] = v55.var0.var0[0];
            a5->var0.var0[v38] = v46;
            a5->var0.var0[gjkepa2_impl::GJK::projectorigin(btVector3 const&,btVector3 const&,btVector3 const&,btVector3 const&,float *,unsigned int &)::imd3[v38]] = 0.0;
            a5->var0.var0[3] = v55.var0.var0[2];
            v24 = v45;
          }
        }
        ++v37;
      }
      while (v37 != 3);
      if (v24 < 0.0)
      {
        *(_DWORD *)a6 = 15;
        a5->var0.var0[0] = gjkepa2_impl::GJK::det((gjkepa2_impl::GJK *)a3, (const btVector3 *)a2, (const btVector3 *)a4, (const btVector3 *)a4)/ v23;
        a5->var0.var0[1] = gjkepa2_impl::GJK::det((gjkepa2_impl::GJK *)this, (const btVector3 *)a3, (const btVector3 *)a4, v47)/ v23;
        v49 = gjkepa2_impl::GJK::det((gjkepa2_impl::GJK *)a2, (const btVector3 *)this, (const btVector3 *)a4, v48) / v23;
        v50 = 1.0 - (float)(v49 + (float)(a5->var0.var0[0] + a5->var0.var0[1]));
        a5->var0.var0[2] = v49;
        a5->var0.var0[3] = v50;
        return 0.0;
      }
    }
  }
  return v24;
}

__n128 gjkepa2_impl::GJK::getsupport(float32x4_t *a1, float32x4_t *a2, uint64_t a3)
{
  int8x16_t v5;
  float32x4_t v6;
  void (*v7)(float32x4_t *__return_ptr, _QWORD *, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  void (*v10)(float32x4_t *__return_ptr, _QWORD *, int8x16_t *);
  uint64_t v11;
  _QWORD *v12;
  int8x16_t v13;
  float32x4_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  float32x4_t v18;
  int8x16_t v19;
  int8x16_t v20;
  __n128 result;
  float32x4_t v22;
  int8x16_t v23;
  float32x4_t v24;

  v5 = (int8x16_t)vmulq_f32(*a2, *a2);
  v6 = vmulq_n_f32(*a2, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v5.i8, *(float32x2_t *)v5.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL)).f32[0]));
  v6.i32[3] = 0;
  *(float32x4_t *)a3 = v6;
  v7 = (void (*)(float32x4_t *__return_ptr, _QWORD *, uint64_t))a1[8].i64[0];
  v8 = a1[8].i64[1];
  v9 = (_QWORD *)(a1->i64[0] + (v8 >> 1));
  if ((v8 & 1) != 0)
    v7 = *(void (**)(float32x4_t *__return_ptr, _QWORD *, uint64_t))(*v9 + v7);
  v7(&v22, v9, a3);
  v10 = (void (*)(float32x4_t *__return_ptr, _QWORD *, int8x16_t *))a1[8].i64[0];
  v11 = a1[8].i64[1];
  v12 = (_QWORD *)(a1->i64[1] + (v11 >> 1));
  if ((v11 & 1) != 0)
    v10 = *(void (**)(float32x4_t *__return_ptr, _QWORD *, int8x16_t *))(*v12 + v10);
  v13.i64[0] = 0x8000000080000000;
  v13.i64[1] = 0x8000000080000000;
  v14 = (float32x4_t)veorq_s8(*(int8x16_t *)a3, v13);
  v15 = (int8x16_t)vmulq_f32(a1[1], v14);
  v16 = (int8x16_t)vmulq_f32(a1[2], v14);
  v17 = (int8x16_t)vmulq_f32(a1[3], v14);
  v17.i32[3] = 0;
  *(float32x2_t *)v15.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v15.i8, *(float32x2_t *)v16.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL)));
  v15.u64[1] = (unint64_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v17.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL)), 0);
  v23 = v15;
  v10(&v24, v12, &v23);
  v18 = vmulq_f32(a1[4], v24);
  v19 = (int8x16_t)vmulq_f32(v24, a1[5]);
  v20 = (int8x16_t)vmulq_f32(v24, a1[6]);
  v20.i32[3] = 0;
  *(float32x2_t *)v18.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v18.f32, *(float32x2_t *)v19.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL)));
  *(float32x2_t *)&v18.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v20.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL)), 0);
  result = (__n128)vsubq_f32(v22, vaddq_f32(v18, a1[7]));
  result.n128_u32[3] = 0;
  *(__n128 *)(a3 + 16) = result;
  return result;
}

float gjkepa2_impl::GJK::det(gjkepa2_impl::GJK *this, const btVector3 *a2, const btVector3 *a3, const btVector3 *a4)
{
  return (float)((float)((float)((float)((float)((float)(*((float *)this + 2) * a2->var0.var0[0]) * a3->var0.var0[1])
                                       + (float)((float)(*((float *)this + 1) * a2->var0.var0[2]) * a3->var0.var0[0]))
                               + (float)((float)-(float)(*(float *)this * a2->var0.var0[2]) * a3->var0.var0[1]))
                       + (float)((float)-(float)(*((float *)this + 1) * a2->var0.var0[0]) * a3->var0.var0[2]))
               + (float)((float)(*(float *)this * a2->var0.var0[1]) * a3->var0.var0[2]))
       + (float)((float)-(float)(*((float *)this + 2) * a2->var0.var0[1]) * a3->var0.var0[0]);
}

uint64_t gjkepa2_impl::EPA::Initialize(uint64_t this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = 0;
  *(_DWORD *)this = 9;
  *(_DWORD *)(this + 14432) = 0;
  *(_QWORD *)(this + 64) = 0;
  *(_QWORD *)(this + 72) = 0;
  *(_DWORD *)(this + 80) = 0;
  v2 = *(_DWORD *)(this + 14464);
  v3 = 12288;
  v4 = *(_QWORD *)(this + 14456);
  do
  {
    v5 = this + v3;
    v6 = this + v3 + 2048;
    *(_QWORD *)(v5 + 2120) = 0;
    *(_QWORD *)(v5 + 2128) = v4;
    if (v4)
      *(_QWORD *)(v4 + 72) = v6;
    v4 = this + 96 * (127 - v1) + 2144;
    *(_QWORD *)(this + 14456) = v6;
    ++v1;
    v3 -= 96;
  }
  while (v3);
  *(_DWORD *)(this + 14464) = v2 + 128;
  return this;
}

uint64_t gjkepa2_impl::GJK::EncloseOrigin(float32x4_t *this)
{
  float32x4_t **v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int8x16_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int8x8_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  int8x16_t v23;
  int8x16_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int8x16_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  float32x4_t v40;
  float32x4_t v41;
  int8x8_t v42;
  float32x4_t v43;
  int8x8_t v44;
  float32x4_t v45;
  float32x4_t v46;
  int8x16_t v47;
  int8x16_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int8x16_t v56;
  uint64_t v57;
  uint64_t result;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  float32x4_t v63;
  float32x4_t v65;
  float v76;
  float32x4_t v77;
  float32x4_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;

  v1 = (float32x4_t **)this[28].i64[1];
  switch(*((_DWORD *)v1 + 12))
  {
    case 1:
      v3 = 0;
      LODWORD(v4) = this[28].i32[0] - 1;
      while (1)
      {
        v81 = 0uLL;
        v81.i32[v3] = 1065353216;
        v5 = this[28].i64[1];
        v6 = *(unsigned int *)(v5 + 48);
        *(_DWORD *)(v5 + 4 * v6 + 32) = 0;
        this[28].i32[0] = v4;
        v7 = this[26].i64[v4];
        *(_QWORD *)(v5 + 8 * v6) = v7;
        *(_DWORD *)(v5 + 48) = v6 + 1;
        gjkepa2_impl::GJK::getsupport(this, (float32x4_t *)&v81, v7);
        if ((gjkepa2_impl::GJK::EncloseOrigin((gjkepa2_impl::GJK *)this) & 1) != 0)
          break;
        v8 = this[28].i64[1];
        v9 = *(_DWORD *)(v8 + 48) - 1;
        *(_DWORD *)(v8 + 48) = v9;
        v10 = *(_QWORD *)(v8 + 8 * v9);
        v11 = this[28].u32[0];
        this[26].i64[v11] = v10;
        v12 = this[28].i64[1];
        v13.i64[0] = 0x8000000080000000;
        v13.i64[1] = 0x8000000080000000;
        v80 = veorq_s8(v81, v13);
        v14 = *(unsigned int *)(v12 + 48);
        *(_DWORD *)(v12 + 4 * v14 + 32) = 0;
        this[28].i32[0] = v11;
        *(_QWORD *)(v12 + 8 * v14) = v10;
        *(_DWORD *)(v12 + 48) = v14 + 1;
        gjkepa2_impl::GJK::getsupport(this, (float32x4_t *)&v80, v10);
        if ((gjkepa2_impl::GJK::EncloseOrigin((gjkepa2_impl::GJK *)this) & 1) != 0)
          break;
        v15 = this[28].i64[1];
        v16 = *(_DWORD *)(v15 + 48) - 1;
        *(_DWORD *)(v15 + 48) = v16;
        v17 = *(_QWORD *)(v15 + 8 * v16);
        v4 = this[28].u32[0];
        this[28].i32[0] = v4 + 1;
        this[26].i64[v4] = v17;
        if (++v3 == 3)
          return 0;
      }
      return 1;
    case 2:
      v18 = 0;
      v20 = vsubq_f32(v1[1][1], (*v1)[1]);
      v19 = (int8x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL).u64[0];
      v20.i32[3] = 0;
      *(int8x8_t *)v21.f32 = vext_s8(*(int8x8_t *)v20.f32, v19, 4uLL);
      v21.i64[1] = v20.i64[0];
      v77 = v21;
      v78 = v20;
      break;
    case 3:
      v40 = (*v1)[1];
      v41 = vsubq_f32(v1[1][1], v40);
      v42 = (int8x8_t)vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL).u64[0];
      v41.i32[3] = 0;
      v43 = vsubq_f32(v1[2][1], v40);
      v44 = (int8x8_t)vextq_s8((int8x16_t)v43, (int8x16_t)v43, 8uLL).u64[0];
      v43.i32[3] = 0;
      *(int8x8_t *)v45.f32 = vext_s8(*(int8x8_t *)v41.f32, v42, 4uLL);
      v45.i64[1] = v41.i64[0];
      *(int8x8_t *)v46.f32 = vext_s8(*(int8x8_t *)v43.f32, v44, 4uLL);
      v46.i64[1] = v43.i64[0];
      v47 = (int8x16_t)vsubq_f32(vmulq_f32(v46, v41), vmulq_f32(v45, v43));
      v43.i64[0] = vextq_s8(v47, v47, 4uLL).u64[0];
      v43.i64[1] = v47.u32[0];
      v81 = (int8x16_t)v43;
      v48 = (int8x16_t)vmulq_f32(v43, v43);
      if (vadd_f32(vpadd_f32(*(float32x2_t *)v48.i8, *(float32x2_t *)v48.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v48, v48, 8uLL)).f32[0] <= 0.0)return 0;
      *(float32x4_t **)((char *)v1 + 44) = (float32x4_t *)0x400000000;
      v49 = this[28].i32[0] - 1;
      this[28].i32[0] = v49;
      v50 = this[26].i64[v49];
      v1[3] = (float32x4_t *)v50;
      gjkepa2_impl::GJK::getsupport(this, (float32x4_t *)&v81, v50);
      if ((gjkepa2_impl::GJK::EncloseOrigin((gjkepa2_impl::GJK *)this) & 1) != 0)
        return 1;
      v51 = this[28].i64[1];
      v52 = *(_DWORD *)(v51 + 48) - 1;
      *(_DWORD *)(v51 + 48) = v52;
      v53 = *(_QWORD *)(v51 + 8 * v52);
      v54 = this[28].u32[0];
      this[26].i64[v54] = v53;
      v55 = this[28].i64[1];
      v56.i64[0] = 0x8000000080000000;
      v56.i64[1] = 0x8000000080000000;
      v80 = veorq_s8(v81, v56);
      v57 = *(unsigned int *)(v55 + 48);
      *(_DWORD *)(v55 + 4 * v57 + 32) = 0;
      this[28].i32[0] = v54;
      *(_QWORD *)(v55 + 8 * v57) = v53;
      *(_DWORD *)(v55 + 48) = v57 + 1;
      gjkepa2_impl::GJK::getsupport(this, (float32x4_t *)&v80, v53);
      if ((gjkepa2_impl::GJK::EncloseOrigin((gjkepa2_impl::GJK *)this) & 1) != 0)
        return 1;
      v59 = this[28].i64[1];
      v60 = *(_DWORD *)(v59 + 48) - 1;
      *(_DWORD *)(v59 + 48) = v60;
      v61 = *(_QWORD *)(v59 + 8 * v60);
      v62 = this[28].u32[0];
      this[28].i32[0] = v62 + 1;
      this[26].i64[v62] = v61;
      return 0;
    case 4:
      v63 = v1[3][1];
      _Q0 = vsubq_f32((*v1)[1], v63);
      v65 = vsubq_f32(v1[1][1], v63);
      _Q1 = vsubq_f32(v1[2][1], v63);
      _S4 = vmuls_lane_f32(-_Q0.f32[0], v65, 2);
      __asm { FMLA            S6, S4, V1.S[1] }
      _S3 = (float)-_Q0.f32[1] * v65.f32[0];
      __asm { FMLA            S6, S3, V1.S[2] }
      _Q0.f32[0] = vmuls_lane_f32(_Q0.f32[0], *(float32x2_t *)v65.f32, 1);
      __asm { FMLA            S6, S0, V1.S[2] }
      v76 = vmlas_n_f32(_S6, vmuls_lane_f32(-_Q0.f32[2], *(float32x2_t *)v65.f32, 1), _Q1.f32[0]);
      result = 1;
      if (v76 >= 0.0 && v76 <= 0.0)
        return 0;
      return result;
    default:
      return 0;
  }
  do
  {
    v81 = 0uLL;
    v81.i32[v18] = 1065353216;
    *(int8x8_t *)v22.f32 = vext_s8(*(int8x8_t *)v81.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v81, v81, 8uLL), 4uLL);
    v22.i64[1] = v81.i64[0];
    v23 = (int8x16_t)vsubq_f32(vmulq_f32(v22, v20), vmulq_f32(v21, (float32x4_t)v81));
    v22.i64[0] = vextq_s8(v23, v23, 4uLL).u64[0];
    v22.i64[1] = v23.u32[0];
    v80 = (int8x16_t)v22;
    v24 = (int8x16_t)vmulq_f32(v22, v22);
    if (vadd_f32(vpadd_f32(*(float32x2_t *)v24.i8, *(float32x2_t *)v24.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL)).f32[0] > 0.0)
    {
      v25 = this[28].i64[1];
      v26 = *(unsigned int *)(v25 + 48);
      *(_DWORD *)(v25 + 4 * v26 + 32) = 0;
      v27 = this[28].i32[0] - 1;
      this[28].i32[0] = v27;
      v28 = this[26].i64[v27];
      *(_QWORD *)(v25 + 8 * v26) = v28;
      *(_DWORD *)(v25 + 48) = v26 + 1;
      gjkepa2_impl::GJK::getsupport(this, (float32x4_t *)&v80, v28);
      if ((gjkepa2_impl::GJK::EncloseOrigin((gjkepa2_impl::GJK *)this) & 1) != 0)
        return 1;
      v29 = this[28].i64[1];
      v30 = *(_DWORD *)(v29 + 48) - 1;
      *(_DWORD *)(v29 + 48) = v30;
      v31 = *(_QWORD *)(v29 + 8 * v30);
      v32 = this[28].u32[0];
      this[26].i64[v32] = v31;
      v33 = this[28].i64[1];
      v34.i64[0] = 0x8000000080000000;
      v34.i64[1] = 0x8000000080000000;
      v79 = veorq_s8(v80, v34);
      v35 = *(unsigned int *)(v33 + 48);
      *(_DWORD *)(v33 + 4 * v35 + 32) = 0;
      this[28].i32[0] = v32;
      *(_QWORD *)(v33 + 8 * v35) = v31;
      *(_DWORD *)(v33 + 48) = v35 + 1;
      gjkepa2_impl::GJK::getsupport(this, (float32x4_t *)&v79, v31);
      if ((gjkepa2_impl::GJK::EncloseOrigin((gjkepa2_impl::GJK *)this) & 1) != 0)
        return 1;
      v36 = this[28].i64[1];
      v37 = *(_DWORD *)(v36 + 48) - 1;
      *(_DWORD *)(v36 + 48) = v37;
      v38 = *(_QWORD *)(v36 + 8 * v37);
      v39 = this[28].u32[0];
      this[28].i32[0] = v39 + 1;
      this[26].i64[v39] = v38;
      v21 = v77;
      v20 = v78;
    }
    ++v18;
  }
  while (v18 != 3);
  return 0;
}

float32x4_t *gjkepa2_impl::EPA::newface(uint64_t a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, char a5)
{
  float32x4_t *v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float32x4_t v14;
  float32x4_t v15;
  int8x8_t v16;
  float32x4_t v17;
  int8x8_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int8x16_t v21;
  int8x16_t v22;
  float v23;
  int8x16_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v6 = *(float32x4_t **)(a1 + 14456);
  if (!v6)
  {
    *(_DWORD *)a1 = 5;
    return v6;
  }
  v11 = v6[5].i64[0];
  if (v11)
    *(_QWORD *)(v11 + 72) = v6[4].i64[1];
  v12 = v6[4].i64[1];
  if (v12)
    *(_QWORD *)(v12 + 80) = v6[5].i64[0];
  if (*(float32x4_t **)(a1 + 14456) == v6)
    *(_QWORD *)(a1 + 14456) = v6[5].i64[0];
  --*(_DWORD *)(a1 + 14464);
  v6[4].i64[1] = 0;
  v6[5].i64[0] = *(_QWORD *)(a1 + 14440);
  v13 = *(_QWORD *)(a1 + 14440);
  if (v13)
    *(_QWORD *)(v13 + 72) = v6;
  *(_QWORD *)(a1 + 14440) = v6;
  ++*(_DWORD *)(a1 + 14448);
  v6[5].i8[11] = 0;
  v6[1].i64[1] = (uint64_t)a2;
  v6[2].i64[0] = (uint64_t)a3;
  v6[2].i64[1] = (uint64_t)a4;
  v14 = a2[1];
  v15 = vsubq_f32(a3[1], v14);
  v16 = (int8x8_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL).u64[0];
  v15.i32[3] = 0;
  v17 = vsubq_f32(a4[1], v14);
  v18 = (int8x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).u64[0];
  v17.i32[3] = 0;
  *(int8x8_t *)v19.f32 = vext_s8(*(int8x8_t *)v15.f32, v16, 4uLL);
  v19.i64[1] = v15.i64[0];
  *(int8x8_t *)v20.f32 = vext_s8(*(int8x8_t *)v17.f32, v18, 4uLL);
  v20.i64[1] = v17.i64[0];
  v21 = (int8x16_t)vsubq_f32(vmulq_f32(v20, v15), vmulq_f32(v19, v17));
  v17.i64[0] = vextq_s8(v21, v21, 4uLL).u64[0];
  v17.i64[1] = v21.u32[0];
  *v6 = v17;
  v22 = (int8x16_t)vmulq_f32(v17, v17);
  v23 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v22.i8, *(float32x2_t *)v22.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL)).f32[0]);
  if (v23 <= 0.0001)
  {
    v25 = 2;
    goto LABEL_20;
  }
  if (!gjkepa2_impl::EPA::getedgedist(a1, (int8x8_t *)v6, a2, a3, v6[1].f32)
    && !gjkepa2_impl::EPA::getedgedist(a1, (int8x8_t *)v6, a3, a4, v6[1].f32)
    && !gjkepa2_impl::EPA::getedgedist(a1, (int8x8_t *)v6, a4, a2, v6[1].f32))
  {
    v24 = (int8x16_t)vmulq_f32(a2[1], *v6);
    v6[1].f32[0] = vadd_f32(vpadd_f32(*(float32x2_t *)v24.i8, *(float32x2_t *)v24.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL)).f32[0]/ v23;
  }
  *v6 = vmulq_n_f32(*v6, 1.0 / v23);
  if ((a5 & 1) == 0 && v6[1].f32[0] < -0.00001)
  {
    v25 = 3;
LABEL_20:
    *(_DWORD *)a1 = v25;
    v26 = v6[5].i64[0];
    if (v26)
      *(_QWORD *)(v26 + 72) = v6[4].i64[1];
    v27 = v6[4].i64[1];
    if (v27)
      *(_QWORD *)(v27 + 80) = v6[5].i64[0];
    if (*(float32x4_t **)(a1 + 14440) == v6)
      *(_QWORD *)(a1 + 14440) = v6[5].i64[0];
    --*(_DWORD *)(a1 + 14448);
    v6[4].i64[1] = 0;
    v6[5].i64[0] = *(_QWORD *)(a1 + 14456);
    v28 = *(_QWORD *)(a1 + 14456);
    if (v28)
      *(_QWORD *)(v28 + 72) = v6;
    *(_QWORD *)(a1 + 14456) = v6;
    ++*(_DWORD *)(a1 + 14464);
    return 0;
  }
  return v6;
}

uint64_t gjkepa2_impl::EPA::expand(uint64_t a1, int a2, float32x4_t *a3, float32x4_t *a4, unsigned int a5, uint64_t *a6)
{
  uint64_t result;
  char v8;
  uint64_t v11;
  int8x16_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;

  if (a4[5].u8[11] == a2)
    return 0;
  v8 = a5;
  v11 = a5;
  v12 = (int8x16_t)vmulq_f32(*a4, a3[1]);
  if ((float)(vadd_f32(vpadd_f32(*(float32x2_t *)v12.i8, *(float32x2_t *)v12.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL)).f32[0]- a4[1].f32[0]) < -0.00001)
  {
    result = (uint64_t)gjkepa2_impl::EPA::newface(a1, (float32x4_t *)a4[1].i64[gjkepa2_impl::EPA::expand(unsigned int,gjkepa2_impl::GJK::sSV *,gjkepa2_impl::EPA::sFace *,unsigned int,gjkepa2_impl::EPA::sHorizon &)::i1m3[a5]+ 1], (float32x4_t *)a4[1].i64[a5 + 1], a3, 0);
    if (!result)
      return result;
    *(_BYTE *)(result + 88) = v8;
    *(_QWORD *)(result + 48) = a4;
    a4[5].i8[v11 + 8] = 0;
    a4[3].i64[v11] = result;
    v13 = *a6;
    if (*a6)
    {
      *(_BYTE *)(v13 + 89) = 2;
      *(_QWORD *)(v13 + 56) = result;
      *(_BYTE *)(result + 90) = 1;
      *(_QWORD *)(result + 64) = v13;
    }
    else
    {
      a6[1] = result;
    }
    *a6 = result;
    v17 = a6 + 2;
    goto LABEL_20;
  }
  a4[5].i8[11] = a2;
  result = gjkepa2_impl::EPA::expand(a1);
  if ((_DWORD)result)
  {
    result = gjkepa2_impl::EPA::expand(a1);
    if ((_DWORD)result)
    {
      v14 = a4[5].i64[0];
      if (v14)
        *(_QWORD *)(v14 + 72) = a4[4].i64[1];
      v15 = a4[4].i64[1];
      if (v15)
        *(_QWORD *)(v15 + 80) = a4[5].i64[0];
      if (*(float32x4_t **)(a1 + 14440) == a4)
        *(_QWORD *)(a1 + 14440) = a4[5].i64[0];
      --*(_DWORD *)(a1 + 14448);
      a4[4].i64[1] = 0;
      a4[5].i64[0] = *(_QWORD *)(a1 + 14456);
      v16 = *(_QWORD *)(a1 + 14456);
      if (v16)
        *(_QWORD *)(v16 + 72) = a4;
      *(_QWORD *)(a1 + 14456) = a4;
      v17 = (_DWORD *)(a1 + 14464);
LABEL_20:
      ++*v17;
      return 1;
    }
  }
  return result;
}

BOOL gjkepa2_impl::EPA::getedgedist(uint64_t a1, int8x8_t *a2, float32x4_t *a3, float32x4_t *a4, float *a5)
{
  float32x4_t v5;
  float32x4_t v6;
  int8x8_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  int8x16_t v11;
  int8x16_t v12;
  float v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  float v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;

  v5 = a4[1];
  v6 = a3[1];
  v8 = vsubq_f32(v5, v6);
  v7 = (int8x8_t)vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL).u64[0];
  v8.i32[3] = 0;
  *(int8x8_t *)v9.f32 = vext_s8(*(int8x8_t *)v8.f32, v7, 4uLL);
  v9.i64[1] = v8.i64[0];
  *(int8x8_t *)v10.f32 = vext_s8(*a2, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a2->i8, *(int8x16_t *)a2->i8, 8uLL), 4uLL);
  *(int8x8_t *)&v10.u32[2] = *a2;
  v11 = (int8x16_t)vsubq_f32(vmulq_f32(v10, v8), vmulq_f32(*(float32x4_t *)a2->i8, v9));
  v9.i64[0] = vextq_s8(v11, v11, 4uLL).u64[0];
  v9.i64[1] = v11.u32[0];
  v12 = (int8x16_t)vmulq_f32(v6, v9);
  v13 = vadd_f32(vpadd_f32(*(float32x2_t *)v12.i8, *(float32x2_t *)v12.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL)).f32[0];
  if (v13 < 0.0)
  {
    v14 = (int8x16_t)vmulq_f32(v6, v8);
    if (vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL), vpadd_f32(*(float32x2_t *)v14.i8, *(float32x2_t *)v14.i8)).f32[0] <= 0.0)
    {
      v16 = (int8x16_t)vmulq_f32(v5, v8);
      if (vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL), vpadd_f32(*(float32x2_t *)v16.i8, *(float32x2_t *)v16.i8)).f32[0] >= 0.0)
      {
        v18 = (int8x16_t)vmulq_f32(v8, v8);
        v19 = (int8x16_t)vmulq_f32(v5, v6);
        *(float *)v19.i32 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL), vpadd_f32(*(float32x2_t *)v19.i8, *(float32x2_t *)v19.i8)).f32[0];
        v20 = (int8x16_t)vmulq_f32(v6, v6);
        v21 = (int8x16_t)vmulq_f32(v5, v5);
        v17 = fmaxf(vmlas_n_f32((float)-*(float *)v19.i32 * *(float *)v19.i32, vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL), vpadd_f32(*(float32x2_t *)v21.i8, *(float32x2_t *)v21.i8)).f32[0], vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL), vpadd_f32(*(float32x2_t *)v20.i8, *(float32x2_t *)v20.i8)).f32[0])/ vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL), vpadd_f32(*(float32x2_t *)v18.i8, *(float32x2_t *)v18.i8)).f32[0], 0.0);
        goto LABEL_8;
      }
      v15 = (int8x16_t)vmulq_f32(v5, v5);
    }
    else
    {
      v15 = (int8x16_t)vmulq_f32(v6, v6);
    }
    LODWORD(v17) = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL), vpadd_f32(*(float32x2_t *)v15.i8, *(float32x2_t *)v15.i8)).u32[0];
LABEL_8:
    *a5 = sqrtf(v17);
  }
  return v13 < 0.0;
}

uint64_t btGjkEpaPenetrationDepthSolver::calcPenDepth(btGjkEpaPenetrationDepthSolver *this, btVoronoiSimplexSolver *a2, const btConvexShape *a3, const btConvexShape *a4, float32x4_t *a5, float32x4_t *a6, btVector3 *a7, btVector3 *a8, btVector3 *a9, btIDebugDraw *a10)
{
  float32x4_t v16;
  uint64_t v17;
  uint64_t v18;
  btVector3 v19;
  float32x4_t v21;
  _BYTE v22[16];
  btVector3 v23;
  btVector3 v24;
  btVector3 v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v16 = vsubq_f32(a6[3], a5[3]);
  v16.i32[3] = 0;
  v21 = v16;
  btGjkEpaSolver2::Penetration((uint64_t)a3);
  v18 = v17;
  if ((v17 & 1) != 0 || btGjkEpaSolver2::Distance((uint64_t)a3, a5, (uint64_t)a4, a6, &v21, (uint64_t)v22))
  {
    v19 = v24;
    *a8 = v23;
    *a9 = v19;
    *a7 = v25;
  }
  return v18;
}

void btGjkEpaPenetrationDepthSolver::~btGjkEpaPenetrationDepthSolver(btGjkEpaPenetrationDepthSolver *this)
{
  JUMPOUT(0x1DF0D41C0);
}

uint64_t btGjkPairDetector::btGjkPairDetector(uint64_t a1, _DWORD *a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  int v7;

  *(_QWORD *)a1 = &off_1EA596820;
  *(_OWORD *)(a1 + 16) = xmmword_1DD007920;
  *(_QWORD *)(a1 + 32) = a5;
  *(_QWORD *)(a1 + 40) = a4;
  *(_QWORD *)(a1 + 48) = a2;
  *(_QWORD *)(a1 + 56) = a3;
  v7 = a3[2];
  *(_DWORD *)(a1 + 64) = a2[2];
  *(_DWORD *)(a1 + 68) = v7;
  *(float *)(a1 + 72) = (*(float (**)(_DWORD *))(*(_QWORD *)a2 + 96))(a2);
  *(float *)(a1 + 76) = (*(float (**)(_DWORD *))(*(_QWORD *)a3 + 96))(a3);
  *(_BYTE *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(_QWORD *)(a1 + 100) = 0x100000001;
  return a1;
}

double btGjkPairDetector::btGjkPairDetector(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7, float a8, float a9)
{
  double result;

  *(_QWORD *)a1 = &off_1EA596820;
  *(_OWORD *)(a1 + 16) = xmmword_1DD007920;
  *(_QWORD *)(a1 + 32) = a7;
  *(_QWORD *)(a1 + 40) = a6;
  *(_QWORD *)(a1 + 48) = a2;
  *(_QWORD *)(a1 + 56) = a3;
  *(_DWORD *)(a1 + 64) = a4;
  *(_DWORD *)(a1 + 68) = a5;
  *(float *)(a1 + 72) = a8;
  *(float *)(a1 + 76) = a9;
  *(_BYTE *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(_QWORD *)&result = 0x100000001;
  *(_QWORD *)(a1 + 100) = 0x100000001;
  return result;
}

void btGjkPairDetector::getClosestPointsNonVirtual(uint64_t a1, float32x4_t *a2, uint64_t a3, uint64_t a4)
{
  _BOOL4 v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t *v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float32x4_t v20;
  float32x4_t v21;
  float i;
  int8x16_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  btVector3 v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  int8x16_t v34;
  int8x16_t v35;
  float32x4_t v36;
  float32x4_t v37;
  int8x16_t v38;
  int8x16_t v39;
  float32x4_t v40;
  btVector3 v41;
  int8x16_t v42;
  float32x2_t v43;
  int v44;
  int8x16_t v45;
  float v46;
  int v47;
  int v48;
  int v49;
  float32x4_t v50;
  int8x16_t v51;
  float v52;
  float v53;
  float v54;
  float32x4_t v55;
  float32x4_t v56;
  float v57;
  uint64_t v58;
  uint64_t v59;
  float32x4_t v60;
  int8x16_t v61;
  float v62;
  int8x16_t v63;
  float32x4_t v64;
  int8x16_t v65;
  float v66;
  char v67;
  int v68;
  float32x4_t v69;
  int8x16_t v70;
  float v71;
  float32x4_t v72;
  int8x16_t v73;
  float v74;
  char v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  int8x16_t v82;
  float v83;
  float v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float v94;
  float32x4_t v95;
  btVector3 v96;
  btVector3 v97;
  btVector3 v98;
  btVector3 v99;
  float32x4_t v100;
  float32x4_t v101;
  _OWORD v102[3];
  float32x4_t v103;
  _OWORD v104[3];
  float32x4_t v105;
  btVector3 v106;
  btVector3 v107;
  float32x4_t v108;

  v8 = 0;
  *(_DWORD *)(a1 + 84) = 0;
  v108 = 0uLL;
  v92 = a2[1];
  v93 = *a2;
  v104[0] = *a2;
  v104[1] = v92;
  v10 = a2[2];
  v9 = a2[3];
  v89 = a2[5];
  v90 = a2[4];
  v102[0] = v90;
  v102[1] = v89;
  v12 = a2[6];
  v11 = a2[7];
  v13.i64[0] = 0x3F0000003F000000;
  v13.i64[1] = 0x3F0000003F000000;
  v14 = vmulq_f32(vaddq_f32(v9, v11), v13);
  v14.i32[3] = 0;
  v91 = v10;
  v104[2] = v10;
  v105 = vsubq_f32(v9, v14);
  v87 = v105;
  v88 = v12;
  v102[2] = v12;
  v103 = vsubq_f32(v11, v14);
  v85 = v14;
  v86 = v103;
  if ((*(_DWORD *)(*(_QWORD *)(a1 + 48) + 8) - 17) <= 1)
    v8 = (*(_DWORD *)(*(_QWORD *)(a1 + 56) + 8) - 17) < 2;
  *(_OWORD *)(a1 + 16) = xmmword_1DD007920;
  v15 = (float32x4_t *)(a1 + 16);
  v16 = *(float *)(a1 + 72);
  v17 = *(float *)(a1 + 76);
  ++gNumGjkChecks;
  v18 = 0.0;
  if (*(_BYTE *)(a1 + 80))
    v17 = 0.0;
  else
    v18 = v16;
  *(_DWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 88) = 0xFFFFFFFFLL;
  v83 = v18;
  v84 = v17;
  v19 = v18 + v17;
  btVoronoiSimplexSolver::reset(*(btVoronoiSimplexSolver **)(a1 + 40));
  v21 = *v15;
  for (i = 1.0e18; ; i = v46)
  {
    v23.i64[0] = 0x8000000080000000;
    v23.i64[1] = 0x8000000080000000;
    v24 = (float32x4_t)veorq_s8((int8x16_t)v21, v23);
    v25 = *a2;
    v26 = a2[1];
    v25.i32[3] = 0;
    v26.i32[3] = 0;
    v27 = a2[2];
    v27.i32[3] = 0;
    v28 = (btVector3)vaddq_f32(vaddq_f32(vmulq_n_f32(v25, v24.f32[0]), vmulq_lane_f32(v26, *(float32x2_t *)v24.f32, 1)), vmulq_laneq_f32(v27, v24, 2));
    v29 = a2[4];
    v30 = a2[5];
    v29.i32[3] = 0;
    v30.i32[3] = 0;
    v31 = a2[6];
    v31.i32[3] = 0;
    v106 = (btVector3)vaddq_f32(vaddq_f32(vmulq_n_f32(v29, v21.f32[0]), vmulq_lane_f32(v30, *(float32x2_t *)v21.f32, 1)), vmulq_laneq_f32(v31, v21, 2));
    v107 = v28;
    btConvexShape::localGetSupportVertexWithoutMarginNonVirtual(*(_QWORD *)(a1 + 48), (int8x16_t *)&v107, &v101, v20);
    btConvexShape::localGetSupportVertexWithoutMarginNonVirtual(*(_QWORD *)(a1 + 56), (int8x16_t *)&v106, &v100, v32);
    v33 = vmulq_f32(v93, v101);
    v34 = (int8x16_t)vmulq_f32(v101, v92);
    v35 = (int8x16_t)vmulq_f32(v101, v91);
    v35.i32[3] = 0;
    *(float32x2_t *)v33.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v33.f32, *(float32x2_t *)v34.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL)));
    *(float32x2_t *)&v33.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v35.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL)), 0);
    v36 = vaddq_f32(v33, v87);
    v37 = vmulq_f32(v90, v100);
    v38 = (int8x16_t)vmulq_f32(v100, v89);
    v39 = (int8x16_t)vmulq_f32(v100, v88);
    v39.i32[3] = 0;
    *(float32x2_t *)v37.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v38.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v37, (int8x16_t)v37, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v38, v38, 8uLL)));
    *(float32x2_t *)&v37.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v39.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v39, v39, 8uLL)), 0);
    v40 = vaddq_f32(v37, v86);
    v98 = (btVector3)v40;
    v99 = (btVector3)v36;
    if (v8)
    {
      v99.var0.var0[2] = 0.0;
      v98.var0.var0[2] = 0.0;
      v40 = (float32x4_t)v98;
      v36 = (float32x4_t)v99;
    }
    v41 = (btVector3)vsubq_f32(v36, v40);
    v41.var0.var0[3] = 0.0;
    v97 = v41;
    v42 = (int8x16_t)vmulq_f32(*v15, (float32x4_t)v41);
    v43 = vadd_f32(vpadd_f32(*(float32x2_t *)v42.i8, *(float32x2_t *)v42.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v42, v42, 8uLL));
    if (v43.f32[0] > 0.0 && vmul_f32(v43, v43).f32[0] > (float)(i * a2[8].f32[0]))
    {
      v48 = 10;
      goto LABEL_29;
    }
    v94 = v43.f32[0];
    if ((btVoronoiSimplexSolver::inSimplex(*(btVoronoiSimplexSolver **)(a1 + 40), (float32x4_t *)&v97) & 1) != 0)
    {
      v48 = 1;
      goto LABEL_29;
    }
    if ((float)(i - v94) <= (float)(i * 0.000001))
      break;
    btVoronoiSimplexSolver::addVertex(*(btVector3 **)(a1 + 40), &v97, &v99, (__n128 *)&v98);
    btVoronoiSimplexSolver::closest(*(float32x4_t **)(a1 + 40), &v96);
    if (!v44)
    {
      v48 = 3;
      goto LABEL_29;
    }
    v21 = (float32x4_t)v96;
    v45 = (int8x16_t)vmulq_f32(v21, v21);
    v46 = vadd_f32(vpadd_f32(*(float32x2_t *)v45.i8, *(float32x2_t *)v45.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v45, v45, 8uLL)).f32[0];
    if (v46 < 0.000001)
    {
      *(btVector3 *)v15 = v96;
      v48 = 6;
      goto LABEL_29;
    }
    if ((float)(i - v46) <= (float)(i * 0.00000011921))
    {
      v48 = 12;
      i = v46;
      goto LABEL_29;
    }
    *(btVector3 *)(a1 + 16) = v96;
    v47 = *(_DWORD *)(a1 + 92);
    *(_DWORD *)(a1 + 92) = v47 + 1;
    if (v47 > 1000)
    {
      v49 = 0;
      goto LABEL_34;
    }
    if (**(_DWORD **)(a1 + 40) == 4)
    {
      v49 = 0;
      *(_DWORD *)(a1 + 96) = 13;
      goto LABEL_34;
    }
  }
  if ((float)(i - v94) <= 0.0)
    v48 = 2;
  else
    v48 = 11;
LABEL_29:
  *(_DWORD *)(a1 + 96) = v48;
  btVoronoiSimplexSolver::compute_points(*(float32x4_t **)(a1 + 40), &v107, &v106);
  v50 = *(float32x4_t *)(a1 + 16);
  v108 = v50;
  v51 = (int8x16_t)vmulq_f32(v50, v50);
  v52 = vadd_f32(vpadd_f32(*(float32x2_t *)v51.i8, *(float32x2_t *)v51.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v51, v51, 8uLL)).f32[0];
  if (v52 < 0.0001)
    *(_DWORD *)(a1 + 96) = 5;
  if (v52 > 1.4211e-14)
  {
    v53 = 1.0 / sqrtf(v52);
    v54 = sqrtf(i);
    v55 = vmulq_n_f32(v50, v83 / v54);
    v55.i32[3] = 0;
    v107 = (btVector3)vsubq_f32((float32x4_t)v107, v55);
    v108 = vmulq_n_f32(v50, v53);
    v56 = vmulq_n_f32(v50, v84 / v54);
    v56.i32[3] = 0;
    v106 = (btVector3)vaddq_f32((float32x4_t)v106, v56);
    v57 = (float)(1.0 / v53) - v19;
    v49 = 1;
    *(_DWORD *)(a1 + 88) = 1;
    goto LABEL_35;
  }
  v49 = 0;
  *(_DWORD *)(a1 + 88) = 2;
LABEL_34:
  v57 = 0.0;
LABEL_35:
  LODWORD(v58) = *(_DWORD *)(a1 + 100);
  if ((_DWORD)v58)
  {
    v58 = *(_QWORD *)(a1 + 32);
    if (v58)
    {
      LODWORD(v58) = *(_DWORD *)(a1 + 96);
      if ((_DWORD)v58)
        LODWORD(v58) = (float)(v19 + v57) < 0.01;
    }
  }
  if ((!v49 || (_DWORD)v58) && (v59 = *(_QWORD *)(a1 + 32)) != 0)
  {
    ++gNumDeepPenetrationChecks;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    if ((*(unsigned int (**)(uint64_t, _QWORD, _QWORD, _QWORD, _OWORD *, _OWORD *, uint64_t, float32x4_t *, float32x4_t *, uint64_t))(*(_QWORD *)v59 + 16))(v59, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), v104, v102, a1 + 16, &v101, &v100, a4))
    {
      v60 = vsubq_f32(v100, v101);
      v60.i32[3] = 0;
      v61 = (int8x16_t)vmulq_f32(v60, v60);
      v62 = vadd_f32(vpadd_f32(*(float32x2_t *)v61.i8, *(float32x2_t *)v61.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v61, v61, 8uLL)).f32[0];
      if (v62 <= 1.4211e-14)
      {
        v60 = *v15;
        v63 = (int8x16_t)vmulq_f32(v60, v60);
        LODWORD(v62) = vadd_f32(vpadd_f32(*(float32x2_t *)v63.i8, *(float32x2_t *)v63.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v63, v63, 8uLL)).u32[0];
      }
      if (v62 <= 1.4211e-14)
      {
        v68 = 9;
        goto LABEL_60;
      }
      v64 = vsubq_f32(v101, v100);
      v64.i32[3] = 0;
      v65 = (int8x16_t)vmulq_f32(v64, v64);
      v66 = -sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v65, v65, 8uLL), vpadd_f32(*(float32x2_t *)v65.i8, *(float32x2_t *)v65.i8)).f32[0]);
      if (v57 <= v66)
        v67 = v49;
      else
        v67 = 0;
      if ((v67 & 1) != 0)
      {
        v68 = 8;
LABEL_60:
        *(_DWORD *)(a1 + 88) = v68;
LABEL_61:
        if ((v49 & 1) == 0)
          return;
        goto LABEL_65;
      }
      v106 = (btVector3)v100;
      v107 = (btVector3)v101;
      v108 = vmulq_n_f32(v60, 1.0 / sqrtf(v62));
      *(_DWORD *)(a1 + 88) = 3;
      v57 = v66;
    }
    else
    {
      v69 = *v15;
      v70 = (int8x16_t)vmulq_f32(v69, v69);
      v71 = vadd_f32(vpadd_f32(*(float32x2_t *)v70.i8, *(float32x2_t *)v70.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v70, v70, 8uLL)).f32[0];
      if (v71 <= 0.0)
        goto LABEL_61;
      v72 = vsubq_f32(v101, v100);
      v72.i32[3] = 0;
      v73 = (int8x16_t)vmulq_f32(v72, v72);
      v74 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v73.i8, *(float32x2_t *)v73.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v73, v73, 8uLL)).f32[0])- v19;
      if (v74 >= v57)
        v75 = v49;
      else
        v75 = 0;
      if ((v75 & 1) != 0)
      {
        *(_DWORD *)(a1 + 88) = 5;
      }
      else
      {
        v76 = vmulq_n_f32(v69, v83);
        v76.i32[3] = 0;
        v77 = vmulq_n_f32(v69, v84);
        v77.i32[3] = 0;
        v106 = (btVector3)vaddq_f32(v100, v77);
        v107 = (btVector3)vsubq_f32(v101, v76);
        v108 = vmulq_n_f32(v69, 1.0 / sqrtf(v71));
        *(_DWORD *)(a1 + 88) = 6;
        v57 = v74;
      }
    }
  }
  else if (!v49)
  {
    return;
  }
LABEL_65:
  if (v57 < 0.0 || (float)(v57 * v57) < a2[8].f32[0])
  {
    if (*(_DWORD *)(a1 + 104))
    {
      (*(void (**)(_QWORD, _OWORD *, float32x4_t *, float32x4_t *))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), v104, &v101, &v100);
      v78.i64[0] = 0x3F0000003F000000;
      v78.i64[1] = 0x3F0000003F000000;
      v95 = vmulq_f32(vaddq_f32(v100, v101), v78);
      (*(void (**)(_QWORD, _OWORD *, float32x4_t *, float32x4_t *))(**(_QWORD **)(a1 + 56) + 16))(*(_QWORD *)(a1 + 56), v102, &v101, &v100);
      v79.i64[0] = 0x3F0000003F000000;
      v79.i64[1] = 0x3F0000003F000000;
      v80 = vsubq_f32(v95, vmulq_f32(vaddq_f32(v101, v100), v79));
      v80.i32[3] = 0;
      v81 = v108;
      v82 = (int8x16_t)vmulq_f32(v108, v80);
      if (vadd_f32(vpadd_f32(*(float32x2_t *)v82.i8, *(float32x2_t *)v82.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v82, v82, 8uLL)).f32[0] < 0.0)
      {
        v81 = vnegq_f32(v108);
        v108 = v81;
      }
    }
    else
    {
      v81 = v108;
    }
    *(float32x4_t *)(a1 + 16) = v81;
    *(float *)(a1 + 84) = v57;
    v101 = vaddq_f32((float32x4_t)v106, v85);
    (*(void (**)(uint64_t, float32x4_t *, float32x4_t *, float))(*(_QWORD *)a3 + 32))(a3, &v108, &v101, v57);
  }
}

void btGjkPairDetector::~btGjkPairDetector(btGjkPairDetector *this)
{
  JUMPOUT(0x1DF0D41C0);
}

BOOL btMinkowskiPenetrationDepthSolver::calcPenDepth(btMinkowskiPenetrationDepthSolver *this, btVoronoiSimplexSolver *a2, const btConvexShape *a3, const btConvexShape *a4, const btTransform *a5, const btTransform *a6, btVector3 *a7, btVector3 *a8, btVector3 *a9, btIDebugDraw *a10)
{
  __int128 *PenetrationDirections;
  btConvexShape *v11;
  float32x4_t *v12;
  float32x4_t *v13;
  float32x4_t *v14;
  float32x4_t *v15;
  float32x4_t *v16;
  float32x4_t *v17;
  btConvexShape *v18;
  btConvexShape *v19;
  btConvexShape *v20;
  uint64_t v21;
  _BOOL4 v22;
  uint64_t i;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  int v32;
  uint64_t v33;
  int v34;
  btMinkowskiPenetrationDepthSolver *v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  _BYTE *v50;
  _BYTE *v51;
  __int128 *v52;
  int v53;
  btMinkowskiPenetrationDepthSolver *v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  __int128 *v66;
  uint64_t v67;
  float32x4_t *v68;
  float32x4_t *v69;
  int8x16_t *v70;
  float v71;
  int8x16_t v72;
  unsigned int v73;
  float32x4_t v74;
  int8x16_t v75;
  float32x4_t v76;
  int8x16_t v77;
  int8x16_t v78;
  float32x4_t v79;
  float32x4_t v80;
  int8x16_t v81;
  int8x16_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  int8x16_t v86;
  float v87;
  float MarginNonVirtual;
  float32x4_t v90;
  float32x4_t v91;
  int8x16_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  int v96;
  btVector3 v97;
  float32x4_t v98;
  float v99;
  float32x4_t *v100;
  float32x4_t *v101;
  uint64_t v102;
  int v103;
  float32x4_t v104;
  uint64_t (**v105)();
  float32x4_t v106;
  float v107;
  unsigned __int8 v108;
  _OWORD v109[8];
  int v110;
  _BYTE v111[16];
  int8x16_t v112;
  _BYTE v113[992];
  _BYTE v114[992];
  _BYTE v115[992];
  float32x4_t v116[62];
  uint64_t v117;

  MEMORY[0x1E0C80A78](this);
  v100 = v13;
  v101 = v12;
  v15 = v14;
  v17 = v16;
  v18 = v11;
  v20 = v19;
  v102 = v21;
  v117 = *MEMORY[0x1E0C80C00];
  v22 = (*((_DWORD *)v19 + 2) - 17) <= 1 && (*((_DWORD *)v11 + 2) - 17) < 2;
  for (i = 0; i != 42; ++i)
  {
    PenetrationDirections = btMinkowskiPenetrationDepthSolver::getPenetrationDirections((btMinkowskiPenetrationDepthSolver *)PenetrationDirections);
    v24 = (float32x4_t)btMinkowskiPenetrationDepthSolver::getPenetrationDirections(void)::sPenetrationDirections[i];
    v25 = vnegq_f32(v24);
    v26 = *v17;
    v27 = v17[1];
    v26.i32[3] = 0;
    v27.i32[3] = 0;
    v28 = v17[2];
    v28.i32[3] = 0;
    *(float32x4_t *)&v114[i * 16] = vaddq_f32(vaddq_f32(vmulq_n_f32(v26, v25.f32[0]), vmulq_lane_f32(v27, *(float32x2_t *)v25.f32, 1)), vmulq_laneq_f32(v28, v25, 2));
    v29 = *v15;
    v30 = v15[1];
    v29.i32[3] = 0;
    v30.i32[3] = 0;
    v31 = v15[2];
    v31.i32[3] = 0;
    *(float32x4_t *)&v113[i * 16] = vaddq_f32(vaddq_f32(vmulq_n_f32(v29, v24.f32[0]), vmulq_lane_f32(v30, *(float32x2_t *)v24.f32, 1)), vmulq_laneq_f32(v31, v24, 2));
  }
  v32 = (*(uint64_t (**)(btConvexShape *))(*(_QWORD *)v20 + 168))(v20);
  if (v32 < 1)
  {
    v47 = 42;
  }
  else
  {
    v33 = 0;
    v34 = v32;
    do
    {
      v35 = (btMinkowskiPenetrationDepthSolver *)(*(uint64_t (**)(btConvexShape *, uint64_t, float32x4_t *))(*(_QWORD *)v20 + 176))(v20, v33, v116);
      v36 = (int8x16_t)vmulq_f32(*v17, v116[0]);
      v37 = (int8x16_t)vmulq_f32(v116[0], v17[1]);
      v38 = (int8x16_t)vmulq_f32(v116[0], v17[2]);
      v38.i32[3] = 0;
      *(float32x2_t *)v36.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v36.i8, *(float32x2_t *)v37.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v36, v36, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v37, v37, 8uLL)));
      v36.u64[1] = (unint64_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v38.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v38, v38, 8uLL)), 0);
      v116[0] = (float32x4_t)v36;
      btMinkowskiPenetrationDepthSolver::getPenetrationDirections(v35);
      v39 = v116[0];
      btMinkowskiPenetrationDepthSolver::getPenetrationDirections(void)::sPenetrationDirections[v33 + 42] = (__int128)v116[0];
      v40 = vnegq_f32(v39);
      v41 = *v17;
      v42 = v17[1];
      v41.i32[3] = 0;
      v42.i32[3] = 0;
      v43 = v17[2];
      v43.i32[3] = 0;
      *(float32x4_t *)&v114[16 * v33 + 672] = vaddq_f32(vaddq_f32(vmulq_n_f32(v41, v40.f32[0]), vmulq_lane_f32(v42, *(float32x2_t *)v40.f32, 1)), vmulq_laneq_f32(v43, v40, 2));
      v44 = *v15;
      v45 = v15[1];
      v44.i32[3] = 0;
      v45.i32[3] = 0;
      v46 = v15[2];
      v46.i32[3] = 0;
      *(float32x4_t *)&v113[16 * v33++ + 672] = vaddq_f32(vaddq_f32(vmulq_n_f32(v44, v39.f32[0]), vmulq_lane_f32(v45, *(float32x2_t *)v39.f32, 1)), vmulq_laneq_f32(v46, v39, 2));
    }
    while (v34 != (_DWORD)v33);
    v47 = (v33 + 42);
  }
  v48 = (*(uint64_t (**)(btConvexShape *))(*(_QWORD *)v18 + 168))(v18);
  if (v48 >= 1)
  {
    v49 = 0;
    v103 = v47;
    v50 = &v113[16 * v47];
    v51 = &v114[16 * v47];
    v52 = &btMinkowskiPenetrationDepthSolver::getPenetrationDirections(void)::sPenetrationDirections[v47];
    v53 = v48;
    do
    {
      v54 = (btMinkowskiPenetrationDepthSolver *)(*(uint64_t (**)(btConvexShape *, uint64_t, float32x4_t *))(*(_QWORD *)v18 + 176))(v18, v49, v116);
      v55 = (int8x16_t)vmulq_f32(*v15, v116[0]);
      v56 = (int8x16_t)vmulq_f32(v116[0], v15[1]);
      v57 = (int8x16_t)vmulq_f32(v116[0], v15[2]);
      v57.i32[3] = 0;
      *(float32x2_t *)v55.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v55.i8, *(float32x2_t *)v56.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v55, v55, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v56, v56, 8uLL)));
      v55.u64[1] = (unint64_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v57.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v57, v57, 8uLL)), 0);
      v116[0] = (float32x4_t)v55;
      btMinkowskiPenetrationDepthSolver::getPenetrationDirections(v54);
      v58 = v116[0];
      v52[v49] = (__int128)v116[0];
      v59 = vnegq_f32(v58);
      v60 = *v17;
      v61 = v17[1];
      v60.i32[3] = 0;
      v61.i32[3] = 0;
      v62 = v17[2];
      v62.i32[3] = 0;
      *(float32x4_t *)&v51[16 * v49] = vaddq_f32(vaddq_f32(vmulq_n_f32(v60, v59.f32[0]), vmulq_lane_f32(v61, *(float32x2_t *)v59.f32, 1)), vmulq_laneq_f32(v62, v59, 2));
      v63 = *v15;
      v64 = v15[1];
      v63.i32[3] = 0;
      v64.i32[3] = 0;
      v65 = v15[2];
      v65.i32[3] = 0;
      *(float32x4_t *)&v50[16 * v49++] = vaddq_f32(vaddq_f32(vmulq_n_f32(v63, v58.f32[0]), vmulq_lane_f32(v64, *(float32x2_t *)v58.f32, 1)), vmulq_laneq_f32(v65, v58, 2));
    }
    while (v53 != (_DWORD)v49);
    v47 = (v103 + v49);
  }
  (*(void (**)(btConvexShape *, _BYTE *, float32x4_t *, uint64_t))(*(_QWORD *)v20 + 152))(v20, v114, v116, v47);
  v66 = (__int128 *)(*(uint64_t (**)(btConvexShape *, _BYTE *, _BYTE *, uint64_t))(*(_QWORD *)v18 + 152))(v18, v113, v115, v47);
  if ((int)v47 < 1)
  {
    v104 = 0u;
    v71 = 1.0e18;
  }
  else
  {
    v67 = v47;
    v104 = 0u;
    v68 = (float32x4_t *)v115;
    v69 = v116;
    v70 = (int8x16_t *)btMinkowskiPenetrationDepthSolver::getPenetrationDirections(void)::sPenetrationDirections;
    v71 = 1.0e18;
    do
    {
      v66 = btMinkowskiPenetrationDepthSolver::getPenetrationDirections((btMinkowskiPenetrationDepthSolver *)v66);
      v72 = *v70;
      v72.i32[2] = 0;
      if (v22)
        v73 = -1;
      else
        v73 = 0;
      v74 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v73), v72, *v70);
      v75 = (int8x16_t)vmulq_f32(v74, v74);
      if (vadd_f32(vpadd_f32(*(float32x2_t *)v75.i8, *(float32x2_t *)v75.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v75, v75, 8uLL)).f32[0] <= 0.01)
      {
        v84 = v104;
      }
      else
      {
        v76 = vmulq_f32(*v69, *v17);
        v77 = (int8x16_t)vmulq_f32(*v69, v17[1]);
        v78 = (int8x16_t)vmulq_f32(*v69, v17[2]);
        v78.i32[3] = 0;
        *(float32x2_t *)v76.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v76.f32, *(float32x2_t *)v77.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v76, (int8x16_t)v76, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v77, v77, 8uLL)));
        *(float32x2_t *)&v76.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v78.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v78, v78, 8uLL)), 0);
        v79 = vaddq_f32(v76, v17[3]);
        v80 = vmulq_f32(*v68, *v15);
        v81 = (int8x16_t)vmulq_f32(*v68, v15[1]);
        v82 = (int8x16_t)vmulq_f32(*v68, v15[2]);
        v82.i32[3] = 0;
        *(float32x2_t *)v80.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v80.f32, *(float32x2_t *)v81.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v80, (int8x16_t)v80, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v81, v81, 8uLL)));
        *(float32x2_t *)&v80.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v82.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v82, v82, 8uLL)), 0);
        v83 = vaddq_f32(v80, v15[3]);
        if (v22)
        {
          v79.i32[2] = 0;
          v83.i32[2] = 0;
        }
        v84 = v104;
        v85 = vsubq_f32(v83, v79);
        v85.i32[3] = 0;
        v86 = (int8x16_t)vmulq_f32(v74, v85);
        v87 = vadd_f32(vpadd_f32(*(float32x2_t *)v86.i8, *(float32x2_t *)v86.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v86, v86, 8uLL)).f32[0];
        if (v87 < v71)
        {
          v84 = v74;
          v71 = v87;
        }
      }
      v104 = v84;
      ++v68;
      ++v69;
      ++v70;
      --v67;
    }
    while (v67);
  }
  btConvexShape::getMarginNonVirtual(v20);
  btConvexShape::getMarginNonVirtual(v18);
  if (v71 < 0.0)
    return 0;
  MarginNonVirtual = btConvexShape::getMarginNonVirtual(v20);
  v99 = v71 + (float)((float)(MarginNonVirtual + btConvexShape::getMarginNonVirtual(v18)) + 0.5);
  btGjkPairDetector::btGjkPairDetector(v111, v20, v18, v102, 0);
  v90 = vmulq_n_f32(v104, v99);
  v90.i32[3] = 0;
  v91 = v17[2];
  v92 = (int8x16_t)vaddq_f32(v17[3], v90);
  v93 = v17[1];
  v109[0] = *v17;
  v109[1] = v93;
  v109[2] = v91;
  v109[3] = v92;
  v94 = v15[1];
  v109[4] = *v15;
  v109[5] = v94;
  v95 = v15[3];
  v109[6] = v15[2];
  v109[7] = v95;
  v110 = 1566444395;
  v105 = &off_1EA59AC38;
  v108 = 0;
  v92.i64[0] = 0x8000000080000000;
  v92.i64[1] = 0x8000000080000000;
  v112 = veorq_s8((int8x16_t)v104, v92);
  btGjkPairDetector::getClosestPoints(v111, v109, &v105, a10, 0);
  v96 = v108;
  if (v108)
  {
    v97 = (btVector3)v106;
    v98 = vsubq_f32(v106, vmulq_n_f32(v104, v99 - v107));
    v98.i32[3] = 0;
    *v100 = v98;
    *a9 = v97;
    *v101 = v104;
  }
  return v96 != 0;
}

__int128 *btMinkowskiPenetrationDepthSolver::getPenetrationDirections(btMinkowskiPenetrationDepthSolver *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0
  {
    btMinkowskiPenetrationDepthSolver::getPenetrationDirections(void)::sPenetrationDirections = xmmword_1DD02CB70;
    *(_OWORD *)algn_1F03C6AD0 = xmmword_1DD02CB80;
    xmmword_1F03C6AE0 = xmmword_1DD02CB90;
    unk_1F03C6AF0 = xmmword_1DD02CBA0;
    xmmword_1F03C6B00 = xmmword_1DD02CBB0;
    unk_1F03C6B10 = xmmword_1DD02CBC0;
    xmmword_1F03C6B20 = xmmword_1DD02CBD0;
    unk_1F03C6B30 = xmmword_1DD02CBE0;
    xmmword_1F03C6B40 = xmmword_1DD02CBF0;
    unk_1F03C6B50 = xmmword_1DD02CC00;
    xmmword_1F03C6B60 = xmmword_1DD02CC10;
    unk_1F03C6B70 = xmmword_1DD02CC20;
    xmmword_1F03C6B80 = xmmword_1DD02CC30;
    unk_1F03C6B90 = xmmword_1DD02CC40;
    xmmword_1F03C6BA0 = xmmword_1DD02CC50;
    unk_1F03C6BB0 = xmmword_1DD02CC60;
    xmmword_1F03C6BC0 = xmmword_1DD02CC70;
    unk_1F03C6BD0 = xmmword_1DD02CC80;
    xmmword_1F03C6BE0 = xmmword_1DD02CC90;
    unk_1F03C6BF0 = xmmword_1DD02CCA0;
    xmmword_1F03C6C00 = xmmword_1DD02CCB0;
    unk_1F03C6C10 = xmmword_1DD02CCC0;
    xmmword_1F03C6C20 = xmmword_1DD02CCD0;
    unk_1F03C6C30 = xmmword_1DD02CCE0;
    xmmword_1F03C6C40 = xmmword_1DD02CCF0;
    unk_1F03C6C50 = xmmword_1DD007A00;
    xmmword_1F03C6C60 = xmmword_1DD02CD00;
    unk_1F03C6C70 = xmmword_1DD02CD10;
    xmmword_1F03C6C80 = xmmword_1DD02CD20;
    unk_1F03C6C90 = xmmword_1DD02CD30;
    xmmword_1F03C6CA0 = xmmword_1DD02CD40;
    unk_1F03C6CB0 = xmmword_1DD02CD50;
    xmmword_1F03C6CC0 = xmmword_1DD02CD60;
    unk_1F03C6CD0 = xmmword_1DD02CD70;
    xmmword_1F03C6CE0 = xmmword_1DD02CD80;
    unk_1F03C6CF0 = xmmword_1DD02CD90;
    xmmword_1F03C6D00 = xmmword_1DD02CDA0;
    unk_1F03C6D10 = xmmword_1DD02CDB0;
    xmmword_1F03C6D20 = xmmword_1DD02CDC0;
    unk_1F03C6D30 = xmmword_1DD02CDD0;
    xmmword_1F03C6D40 = xmmword_1DD02CDE0;
    unk_1F03C6D50 = xmmword_1DD02CDF0;
  }
  return &btMinkowskiPenetrationDepthSolver::getPenetrationDirections(void)::sPenetrationDirections;
}

void btMinkowskiPenetrationDepthSolver::~btMinkowskiPenetrationDepthSolver(btMinkowskiPenetrationDepthSolver *this)
{
  JUMPOUT(0x1DF0D41C0);
}

void btMinkowskiPenetrationDepthSolver::calcPenDepth(btVoronoiSimplexSolver &,btConvexShape const*,btConvexShape const*,btTransform const&,btTransform const&,btVector3 &,btVector3 &,btVector3 &,btIDebugDraw *)::btIntermediateResult::~btIntermediateResult()
{
  JUMPOUT(0x1DF0D41C0);
}

uint64_t btMinkowskiPenetrationDepthSolver::calcPenDepth(btVoronoiSimplexSolver &,btConvexShape const*,btConvexShape const*,btTransform const&,btTransform const&,btVector3 &,btVector3 &,btVector3 &,btIDebugDraw *)::btIntermediateResult::addContactPoint(uint64_t result, _OWORD *a2, _OWORD *a3, float a4)
{
  *(_OWORD *)(result + 16) = *a2;
  *(_OWORD *)(result + 32) = *a3;
  *(float *)(result + 48) = a4;
  *(_BYTE *)(result + 52) = 1;
  return result;
}

btPersistentManifold *btPersistentManifold::clearUserCache(btPersistentManifold *this, btManifoldPoint *a2)
{
  void *var13;

  var13 = a2->var13;
  if (var13)
  {
    this = *(btPersistentManifold **)&this[1].var0;
    if (this)
    {
      this = (btPersistentManifold *)(*(uint64_t (**)(btPersistentManifold *))(*(_QWORD *)&this->var0 + 24))(this);
    }
    else
    {
      if (!gContactDestroyedCallback)
        return this;
      this = (btPersistentManifold *)gContactDestroyedCallback(var13);
    }
    a2->var13 = 0;
  }
  return this;
}

uint64_t btPersistentManifold::sortCachedPoints(btPersistentManifold *this, const btManifoldPoint *a2)
{
  uint64_t v2;
  float var5;
  float *p_var7;
  int v5;
  float v6;
  float v7;
  btVector3 var0;
  float32x4_t v9;
  float32x4_t v10;
  int8x8_t v11;
  float32x4_t v12;
  float32x4_t v13;
  int8x8_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int32x4_t v20;
  int8x8_t v21;
  float32x4_t v22;
  float32x4_t v23;
  unsigned __int32 v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  int8x16_t v29;
  float32x4_t v30;
  int8x16_t v31;
  float32x4_t v32;
  int8x8_t v33;
  float32x4_t v34;
  int8x8_t v35;
  float32x4_t v36;
  int8x16_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  int8x16_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  float32x2_t v51;
  int8x16_t v52;
  float v53;
  float32x4_t v54;
  int8x8_t v55;
  int8x16_t v56;
  float32x4_t v57;
  int8x16_t v58;
  float32x4_t v59;
  int8x8_t v60;
  float32x4_t v61;
  int8x16_t v62;
  float32x4_t v63;
  int8x8_t v64;
  float32x4_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x8_t v68;
  int8x8_t v69;
  float32x4_t v70;
  int8x8_t v71;
  float32x4_t v72;
  int8x8_t v73;
  int8x16_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  int8x16_t v80;
  float32x4_t v81;
  int8x16_t v82;
  float32x2_t v83;
  int8x16_t v84;
  int8x16_t v85;
  float v86;
  int8x8_t v87;
  int8x8_t v88;
  int8x8_t v89;
  float32x4_t v90;
  int8x8_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  int8x16_t v98;
  int8x16_t v99;
  float32x4_t v100;
  int8x16_t v101;
  float32x2_t v102;
  int8x16_t v103;
  float v104;
  int8x16_t v105;
  float32x4_t v106;
  int8x8_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  int8x16_t v112;
  float32x4_t v113;
  float32x4_t v114;
  int8x8_t v115;
  float32x4_t v116;
  int8x8_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  int8x16_t v124;
  int8x16_t v125;
  float32x2_t v126;
  int8x16_t v127;
  float32x2_t v128;
  int8x16_t v129;
  float v130;
  float32x4_t v131;
  float32x4_t v132;
  float v133;
  unsigned int v134;

  v2 = 0;
  var5 = a2->var5;
  p_var7 = &this->var1[0].var7;
  v5 = -1;
  do
  {
    v6 = *p_var7;
    p_var7 += 48;
    v7 = v6;
    if (v6 < var5)
    {
      var5 = v7;
      v5 = v2;
    }
    ++v2;
  }
  while (v2 != 4);
  var0 = a2->var0;
  if (gContactCalcArea3Points)
  {
    if (v5)
    {
      v9 = *(float32x4_t *)((char *)&this->var1[1].var0 + 8);
      v10 = vsubq_f32((float32x4_t)var0, v9);
      v11 = (int8x8_t)vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL).u64[0];
      v10.i32[3] = 0;
      v12 = *(float32x4_t *)((char *)&this->var1[3].var0 + 8);
      v13 = *(float32x4_t *)((char *)&this->var1[2].var0 + 8);
      v15 = vsubq_f32(v12, v13);
      v14 = (int8x8_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL).u64[0];
      v15.i32[3] = 0;
      *(int8x8_t *)v16.f32 = vext_s8(*(int8x8_t *)v10.f32, v11, 4uLL);
      v16.i64[1] = v10.i64[0];
      *(int8x8_t *)v17.f32 = vext_s8(*(int8x8_t *)v15.f32, v14, 4uLL);
      v17.i64[1] = v15.i64[0];
      v18 = (int8x16_t)vsubq_f32(vmulq_f32(v17, v10), vmulq_f32(v16, v15));
      v16.i64[0] = vextq_s8(v18, v18, 4uLL).u64[0];
      v16.i64[1] = v18.u32[0];
      v19 = (int8x16_t)vmulq_f32(v16, v16);
      *(float32x2_t *)v16.f32 = vpadd_f32(*(float32x2_t *)v19.i8, *(float32x2_t *)v19.i8);
      v20 = (int32x4_t)vextq_s8(v19, v19, 8uLL);
      *(float32x2_t *)v20.i8 = vadd_f32(*(float32x2_t *)v16.f32, *(float32x2_t *)v20.i8);
      if (v5 == 1)
      {
        v22 = vsubq_f32((float32x4_t)var0, *(float32x4_t *)((char *)&this->var1[0].var0 + 8));
        v21 = (int8x8_t)vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL).u64[0];
        v22.i32[3] = 0;
        *(int8x8_t *)v23.f32 = vext_s8(*(int8x8_t *)v22.f32, v21, 4uLL);
        v23.i64[1] = v22.i64[0];
        v24 = 0;
LABEL_18:
        v59 = vsubq_f32(v12, v9);
        v60 = (int8x8_t)vextq_s8((int8x16_t)v59, (int8x16_t)v59, 8uLL).u64[0];
        v59.i32[3] = 0;
        *(int8x8_t *)v61.f32 = vext_s8(*(int8x8_t *)v59.f32, v60, 4uLL);
        v61.i64[1] = v59.i64[0];
        v62 = (int8x16_t)vsubq_f32(vmulq_f32(v61, v22), vmulq_f32(v23, v59));
        v61.i64[0] = vextq_s8(v62, v62, 4uLL).u64[0];
        v61.i64[1] = v62.u32[0];
        v58 = (int8x16_t)vmulq_f32(v61, v61);
        v58.i32[0] = vadd_f32(vpadd_f32(*(float32x2_t *)v58.i8, *(float32x2_t *)v58.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v58, v58, 8uLL)).u32[0];
        if (v5 == 3)
        {
          v13.i32[1] = 0;
LABEL_21:
          v13.i32[0] = v24;
          goto LABEL_42;
        }
LABEL_20:
        v63 = vsubq_f32(v13, v9);
        v64 = (int8x8_t)vextq_s8((int8x16_t)v63, (int8x16_t)v63, 8uLL).u64[0];
        v63.i32[3] = 0;
        *(int8x8_t *)v65.f32 = vext_s8(*(int8x8_t *)v63.f32, v64, 4uLL);
        v65.i64[1] = v63.i64[0];
        v66 = (int8x16_t)vsubq_f32(vmulq_f32(v65, v22), vmulq_f32(v23, v63));
        v65.i64[0] = vextq_s8(v66, v66, 4uLL).u64[0];
        v65.i64[1] = v66.u32[0];
        v67 = (int8x16_t)vmulq_f32(v65, v65);
        *(float32x2_t *)v65.f32 = vpadd_f32(*(float32x2_t *)v67.i8, *(float32x2_t *)v67.i8);
        v13 = (float32x4_t)vextq_s8(v67, v67, 8uLL);
        *(int32x2_t *)v13.f32 = vdup_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v65.f32, *(float32x2_t *)v13.f32), 0);
        goto LABEL_21;
      }
    }
    else
    {
      v12 = *(float32x4_t *)((char *)&this->var1[3].var0 + 8);
      v13 = *(float32x4_t *)((char *)&this->var1[2].var0 + 8);
      v15 = vsubq_f32(v12, v13);
      v20 = (int32x4_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL);
      v15.i32[3] = 0;
      *(int8x8_t *)v17.f32 = vext_s8(*(int8x8_t *)v15.f32, *(int8x8_t *)v20.i8, 4uLL);
      v17.i64[1] = v15.i64[0];
      v20.i32[0] = 0;
    }
    v22 = vsubq_f32((float32x4_t)var0, *(float32x4_t *)((char *)&this->var1[0].var0 + 8));
    v55 = (int8x8_t)vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL).u64[0];
    v22.i32[3] = 0;
    *(int8x8_t *)v23.f32 = vext_s8(*(int8x8_t *)v22.f32, v55, 4uLL);
    v23.i64[1] = v22.i64[0];
    v56 = (int8x16_t)vsubq_f32(vmulq_f32(v17, v22), vmulq_f32(v23, v15));
    v57.i64[0] = vextq_s8(v56, v56, 4uLL).u64[0];
    v57.i64[1] = v56.u32[0];
    v58 = (int8x16_t)vmulq_f32(v57, v57);
    v24 = vadd_f32(vpadd_f32(*(float32x2_t *)v58.i8, *(float32x2_t *)v58.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v58, v58, 8uLL)).u32[0];
    v9 = *(float32x4_t *)((char *)&this->var1[1].var0 + 8);
    v58.i32[0] = 0;
    if (v5 == 2)
      goto LABEL_20;
    goto LABEL_18;
  }
  if (v5)
  {
    v25 = *(float32x4_t *)((char *)&this->var1[1].var0 + 8);
    v26 = vsubq_f32((float32x4_t)var0, v25);
    v27 = v26;
    v27.i32[3] = 0;
    v28 = *(float32x4_t *)((char *)&this->var1[2].var0 + 8);
    v29 = (int8x16_t)vsubq_f32((float32x4_t)var0, v28);
    v13 = (float32x4_t)v29;
    v13.i32[3] = 0;
    v30 = *(float32x4_t *)((char *)&this->var1[3].var0 + 8);
    v31 = (int8x16_t)vsubq_f32((float32x4_t)var0, v30);
    v32 = (float32x4_t)v31;
    v32.i32[3] = 0;
    v34 = vsubq_f32(v28, v30);
    v33 = (int8x8_t)vextq_s8((int8x16_t)v34, (int8x16_t)v34, 8uLL).u64[0];
    v34.i32[3] = 0;
    v36 = vsubq_f32(v25, v30);
    v35 = (int8x8_t)vextq_s8((int8x16_t)v36, (int8x16_t)v36, 8uLL).u64[0];
    v36.i32[3] = 0;
    v37 = (int8x16_t)vsubq_f32(v25, v28);
    v38 = (float32x4_t)v37;
    v38.i32[3] = 0;
    *(int8x8_t *)v39.f32 = vext_s8(*(int8x8_t *)v26.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL), 4uLL);
    v39.i64[1] = v26.i64[0];
    v26.i64[0] = vextq_s8(v31, v31, 8uLL).u64[0];
    *(int8x8_t *)v40.f32 = vext_s8(*(int8x8_t *)v34.f32, v33, 4uLL);
    v40.i64[1] = v34.i64[0];
    v41 = (int8x16_t)vsubq_f32(vmulq_f32(v40, v27), vmulq_f32(v39, v34));
    v42.i64[0] = vextq_s8(v41, v41, 4uLL).u64[0];
    v42.i64[1] = v41.u32[0];
    *(int8x8_t *)v43.f32 = vext_s8(*(int8x8_t *)v29.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL), 4uLL);
    v43.i64[1] = v29.i64[0];
    *(int8x8_t *)v44.f32 = vext_s8(*(int8x8_t *)v36.f32, v35, 4uLL);
    v44.i64[1] = v36.i64[0];
    v45 = vsubq_f32(vmulq_f32(v44, v13), vmulq_f32(v43, v36));
    v46.i64[0] = vextq_s8((int8x16_t)v45, (int8x16_t)v45, 4uLL).u64[0];
    v46.i64[1] = v45.u32[0];
    *(int8x8_t *)v47.f32 = vext_s8(*(int8x8_t *)v32.f32, *(int8x8_t *)v26.f32, 4uLL);
    v47.i64[1] = v32.i64[0];
    *(int8x8_t *)v26.f32 = vext_s8(*(int8x8_t *)v37.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v37, v37, 8uLL), 4uLL);
    v26.i64[1] = v37.i64[0];
    v48 = (int8x16_t)vsubq_f32(vmulq_f32(v26, v32), vmulq_f32(v47, v38));
    v45.i64[0] = vextq_s8(v48, v48, 4uLL).u64[0];
    v45.i64[1] = v48.u32[0];
    v49 = (int8x16_t)vmulq_f32(v42, v42);
    *(float32x2_t *)v37.i8 = vpadd_f32(*(float32x2_t *)v49.i8, *(float32x2_t *)v49.i8);
    v20 = (int32x4_t)vextq_s8(v49, v49, 8uLL);
    *(float32x2_t *)v20.i8 = vadd_f32(*(float32x2_t *)v37.i8, *(float32x2_t *)v20.i8);
    v50 = (int8x16_t)vmulq_f32(v46, v46);
    v51 = vadd_f32(vpadd_f32(*(float32x2_t *)v50.i8, *(float32x2_t *)v50.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v50, v50, 8uLL));
    v52 = (int8x16_t)vmulq_f32(v45, v45);
    LODWORD(v53) = vadd_f32(vpadd_f32(*(float32x2_t *)v52.i8, *(float32x2_t *)v52.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v52, v52, 8uLL)).u32[0];
    if ((vcgt_f32(*(float32x2_t *)v20.i8, v51).u8[0] & 1) == 0)
      *(float *)v20.i32 = v51.f32[0];
    if (*(float *)v20.i32 <= v53)
      *(float *)v20.i32 = v53;
    if (v5 == 1)
    {
      v54 = *(float32x4_t *)((char *)&this->var1[0].var0 + 8);
      v13.i32[0] = 0;
      goto LABEL_30;
    }
  }
  else
  {
    v28 = *(float32x4_t *)((char *)&this->var1[2].var0 + 8);
    v30 = *(float32x4_t *)((char *)&this->var1[3].var0 + 8);
    v13 = vsubq_f32((float32x4_t)var0, v28);
    v20 = (int32x4_t)vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL);
    v13.i32[3] = 0;
    v32 = vsubq_f32((float32x4_t)var0, v30);
    v68 = (int8x8_t)vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL).u64[0];
    v32.i32[3] = 0;
    v34 = vsubq_f32(v28, v30);
    v69 = (int8x8_t)vextq_s8((int8x16_t)v34, (int8x16_t)v34, 8uLL).u64[0];
    v34.i32[3] = 0;
    *(int8x8_t *)v40.f32 = vext_s8(*(int8x8_t *)v34.f32, v69, 4uLL);
    v40.i64[1] = v34.i64[0];
    *(int8x8_t *)v43.f32 = vext_s8(*(int8x8_t *)v13.f32, *(int8x8_t *)v20.i8, 4uLL);
    v43.i64[1] = v13.i64[0];
    *(int8x8_t *)v47.f32 = vext_s8(*(int8x8_t *)v32.f32, v68, 4uLL);
    v47.i64[1] = v32.i64[0];
    v20.i32[0] = 0;
  }
  v54 = *(float32x4_t *)((char *)&this->var1[0].var0 + 8);
  v70 = vsubq_f32((float32x4_t)var0, v54);
  v71 = (int8x8_t)vextq_s8((int8x16_t)v70, (int8x16_t)v70, 8uLL).u64[0];
  v70.i32[3] = 0;
  v72 = vsubq_f32(v54, v30);
  v73 = (int8x8_t)vextq_s8((int8x16_t)v72, (int8x16_t)v72, 8uLL).u64[0];
  v72.i32[3] = 0;
  v74 = (int8x16_t)vsubq_f32(v54, v28);
  v75 = (float32x4_t)v74;
  v75.i32[3] = 0;
  *(int8x8_t *)v76.f32 = vext_s8(*(int8x8_t *)v70.f32, v71, 4uLL);
  v76.i64[1] = v70.i64[0];
  v77 = vsubq_f32(vmulq_f32(v40, v70), vmulq_f32(v76, v34));
  v76.i64[0] = vextq_s8((int8x16_t)v77, (int8x16_t)v77, 4uLL).u64[0];
  v76.i64[1] = v77.u32[0];
  *(int8x8_t *)v77.f32 = vext_s8(*(int8x8_t *)v72.f32, v73, 4uLL);
  v77.i64[1] = v72.i64[0];
  v78 = vsubq_f32(vmulq_f32(v77, v13), vmulq_f32(v43, v72));
  v79.i64[0] = vextq_s8((int8x16_t)v78, (int8x16_t)v78, 4uLL).u64[0];
  v79.i64[1] = v78.u32[0];
  *(int8x8_t *)v78.f32 = vext_s8(*(int8x8_t *)v74.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v74, v74, 8uLL), 4uLL);
  v78.i64[1] = v74.i64[0];
  v80 = (int8x16_t)vsubq_f32(vmulq_f32(v78, v32), vmulq_f32(v47, v75));
  v81.i64[0] = vextq_s8(v80, v80, 4uLL).u64[0];
  v81.i64[1] = v80.u32[0];
  v82 = (int8x16_t)vmulq_f32(v76, v76);
  v83 = vadd_f32(vpadd_f32(*(float32x2_t *)v82.i8, *(float32x2_t *)v82.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v82, v82, 8uLL));
  v84 = (int8x16_t)vmulq_f32(v79, v79);
  *(float32x2_t *)v72.f32 = vpadd_f32(*(float32x2_t *)v84.i8, *(float32x2_t *)v84.i8);
  v13 = (float32x4_t)vextq_s8(v84, v84, 8uLL);
  *(float32x2_t *)v13.f32 = vadd_f32(*(float32x2_t *)v72.f32, *(float32x2_t *)v13.f32);
  v85 = (int8x16_t)vmulq_f32(v81, v81);
  LODWORD(v86) = vadd_f32(vpadd_f32(*(float32x2_t *)v85.i8, *(float32x2_t *)v85.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v85, v85, 8uLL)).u32[0];
  if ((vcgt_f32(v83, *(float32x2_t *)v13.f32).u8[0] & 1) == 0)
    v83.f32[0] = v13.f32[0];
  if (v83.f32[0] <= v86)
    v13.f32[0] = v86;
  else
    v13.f32[0] = v83.f32[0];
  v58.i32[0] = 0;
  if (v5 == 2)
    goto LABEL_37;
  var0 = a2->var0;
  v25 = *(float32x4_t *)((char *)&this->var1[1].var0 + 8);
  v30 = *(float32x4_t *)((char *)&this->var1[3].var0 + 8);
  v27 = vsubq_f32((float32x4_t)a2->var0, v25);
  v87 = (int8x8_t)vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL).u64[0];
  v27.i32[3] = 0;
  v32 = vsubq_f32((float32x4_t)a2->var0, v30);
  v88 = (int8x8_t)vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL).u64[0];
  v32.i32[3] = 0;
  v36 = vsubq_f32(v25, v30);
  v89 = (int8x8_t)vextq_s8((int8x16_t)v36, (int8x16_t)v36, 8uLL).u64[0];
  v36.i32[3] = 0;
  *(int8x8_t *)v44.f32 = vext_s8(*(int8x8_t *)v36.f32, v89, 4uLL);
  v44.i64[1] = v36.i64[0];
  *(int8x8_t *)v39.f32 = vext_s8(*(int8x8_t *)v27.f32, v87, 4uLL);
  v39.i64[1] = v27.i64[0];
  *(int8x8_t *)v47.f32 = vext_s8(*(int8x8_t *)v32.f32, v88, 4uLL);
  v47.i64[1] = v32.i64[0];
LABEL_30:
  v90 = vsubq_f32((float32x4_t)var0, v54);
  v91 = (int8x8_t)vextq_s8((int8x16_t)v90, (int8x16_t)v90, 8uLL).u64[0];
  v90.i32[3] = 0;
  v92 = vsubq_f32(v54, v30);
  v93 = v92;
  v93.i32[3] = 0;
  v94 = vsubq_f32(v54, v25);
  v95 = v94;
  v95.i32[3] = 0;
  *(int8x8_t *)v96.f32 = vext_s8(*(int8x8_t *)v90.f32, v91, 4uLL);
  v96.i64[1] = v90.i64[0];
  v97 = vsubq_f32(vmulq_f32(v44, v90), vmulq_f32(v96, v36));
  v96.i64[0] = vextq_s8((int8x16_t)v97, (int8x16_t)v97, 4uLL).u64[0];
  v96.i64[1] = v97.u32[0];
  v97.i64[0] = vextq_s8((int8x16_t)v94, (int8x16_t)v94, 8uLL).u64[0];
  *(int8x8_t *)v94.f32 = vext_s8(*(int8x8_t *)v92.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v92, (int8x16_t)v92, 8uLL), 4uLL);
  v94.i64[1] = v92.i64[0];
  v98 = (int8x16_t)vsubq_f32(vmulq_f32(v94, v27), vmulq_f32(v39, v93));
  v92.i64[0] = vextq_s8(v98, v98, 4uLL).u64[0];
  v92.i64[1] = v98.u32[0];
  *(int8x8_t *)v97.f32 = vext_s8(*(int8x8_t *)v95.f32, *(int8x8_t *)v97.f32, 4uLL);
  v97.i64[1] = v95.i64[0];
  v99 = (int8x16_t)vsubq_f32(vmulq_f32(v97, v32), vmulq_f32(v47, v95));
  v100.i64[0] = vextq_s8(v99, v99, 4uLL).u64[0];
  v100.i64[1] = v99.u32[0];
  v58 = (int8x16_t)vmulq_f32(v96, v96);
  *(float32x2_t *)v58.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v58.i8, *(float32x2_t *)v58.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v58, v58, 8uLL));
  v101 = (int8x16_t)vmulq_f32(v92, v92);
  v102 = vadd_f32(vpadd_f32(*(float32x2_t *)v101.i8, *(float32x2_t *)v101.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v101, v101, 8uLL));
  v103 = (int8x16_t)vmulq_f32(v100, v100);
  LODWORD(v104) = vadd_f32(vpadd_f32(*(float32x2_t *)v103.i8, *(float32x2_t *)v103.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v103, v103, 8uLL)).u32[0];
  if ((vcgt_f32(*(float32x2_t *)v58.i8, v102).u8[0] & 1) == 0)
    *(float *)v58.i32 = v102.f32[0];
  if (*(float *)v58.i32 <= v104)
    *(float *)v58.i32 = v104;
  if (v5 == 3)
  {
    v13.i64[0] = v13.u32[0];
    goto LABEL_42;
  }
  v54 = *(float32x4_t *)((char *)&this->var1[0].var0 + 8);
LABEL_37:
  v105 = (int8x16_t)vsubq_f32((float32x4_t)a2->var0, v54);
  v106 = (float32x4_t)v105;
  v106.i32[3] = 0;
  v107 = (int8x8_t)vextq_s8(v105, v105, 8uLL).u64[0];
  v108 = *(float32x4_t *)((char *)&this->var1[1].var0 + 8);
  v109 = vsubq_f32((float32x4_t)a2->var0, v108);
  v110 = v109;
  v110.i32[3] = 0;
  v111 = *(float32x4_t *)((char *)&this->var1[2].var0 + 8);
  v112 = (int8x16_t)vsubq_f32((float32x4_t)a2->var0, v111);
  v113 = (float32x4_t)v112;
  v113.i32[3] = 0;
  v114 = vsubq_f32(v108, v111);
  v115 = (int8x8_t)vextq_s8((int8x16_t)v114, (int8x16_t)v114, 8uLL).u64[0];
  v114.i32[3] = 0;
  v116 = vsubq_f32(v54, v111);
  v117 = (int8x8_t)vextq_s8((int8x16_t)v116, (int8x16_t)v116, 8uLL).u64[0];
  v116.i32[3] = 0;
  v118 = vsubq_f32(v54, v108);
  v119 = v118;
  v119.i32[3] = 0;
  *(int8x8_t *)v120.f32 = vext_s8(*(int8x8_t *)v106.f32, v107, 4uLL);
  v120.i64[1] = v106.i64[0];
  *(int8x8_t *)v121.f32 = vext_s8(*(int8x8_t *)v114.f32, v115, 4uLL);
  v121.i64[1] = v114.i64[0];
  v122 = vsubq_f32(vmulq_f32(v121, v106), vmulq_f32(v120, v114));
  v120.i64[0] = vextq_s8((int8x16_t)v122, (int8x16_t)v122, 4uLL).u64[0];
  v120.i64[1] = v122.u32[0];
  *(int8x8_t *)v122.f32 = vext_s8(*(int8x8_t *)v109.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v109, (int8x16_t)v109, 8uLL), 4uLL);
  v122.i64[1] = v109.i64[0];
  *(int8x8_t *)v109.f32 = vext_s8(*(int8x8_t *)v116.f32, v117, 4uLL);
  v109.i64[1] = v116.i64[0];
  v123 = vsubq_f32(vmulq_f32(v109, v110), vmulq_f32(v122, v116));
  v110.i64[0] = vextq_s8((int8x16_t)v123, (int8x16_t)v123, 4uLL).u64[0];
  v110.i64[1] = v123.u32[0];
  *(int8x8_t *)v123.f32 = vext_s8(*(int8x8_t *)v112.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v112, v112, 8uLL), 4uLL);
  v123.i64[1] = v112.i64[0];
  *(int8x8_t *)v118.f32 = vext_s8(*(int8x8_t *)v118.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v118, (int8x16_t)v118, 8uLL), 4uLL);
  v118.i64[1] = v119.i64[0];
  v124 = (int8x16_t)vsubq_f32(vmulq_f32(v118, v113), vmulq_f32(v123, v119));
  v118.i64[0] = vextq_s8(v124, v124, 4uLL).u64[0];
  v118.i64[1] = v124.u32[0];
  v125 = (int8x16_t)vmulq_f32(v120, v120);
  v126 = vadd_f32(vpadd_f32(*(float32x2_t *)v125.i8, *(float32x2_t *)v125.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v125, v125, 8uLL));
  v127 = (int8x16_t)vmulq_f32(v110, v110);
  v128 = vadd_f32(vpadd_f32(*(float32x2_t *)v127.i8, *(float32x2_t *)v127.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v127, v127, 8uLL));
  v129 = (int8x16_t)vmulq_f32(v118, v118);
  LODWORD(v130) = vadd_f32(vpadd_f32(*(float32x2_t *)v129.i8, *(float32x2_t *)v129.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v129, v129, 8uLL)).u32[0];
  if ((vcgt_f32(v126, v128).u8[0] & 1) == 0)
    v126.f32[0] = v128.f32[0];
  if (v126.f32[0] <= v130)
    v126.f32[0] = v130;
  v13.i32[1] = v126.i32[0];
LABEL_42:
  v131 = (float32x4_t)vzip1q_s32(v20, (int32x4_t)v13);
  v131.i32[2] = v58.i32[0];
  v132 = vabsq_f32(v131);
  v133 = -1.0e18;
  if (v132.f32[0] > -1.0e18)
    v134 = 0;
  else
    v134 = -1;
  if (v132.f32[0] > -1.0e18)
    v133 = v132.f32[0];
  if (v132.f32[1] > v133)
  {
    v134 = 1;
    v133 = v132.f32[1];
  }
  if (v132.f32[2] > v133)
  {
    v134 = 2;
    v133 = v132.f32[2];
  }
  if (v132.f32[3] <= v133)
    return v134;
  else
    return 3;
}

btPersistentManifold *btPersistentManifold::getCacheEntry(btPersistentManifold *this, const btManifoldPoint *a2)
{
  uint64_t var6_low;
  uint64_t v3;
  float v4;
  float *v5;
  float32x4_t v6;
  float32x4_t v7;
  int8x16_t v8;
  float v9;

  var6_low = LODWORD(this->var6);
  if ((int)var6_low < 1)
    return (btPersistentManifold *)0xFFFFFFFFLL;
  v3 = 0;
  v4 = *(float *)&this->var7 * *(float *)&this->var7;
  v5 = &this->var1[0].var0.var0.var0[2];
  LODWORD(this) = -1;
  do
  {
    v6 = *(float32x4_t *)v5;
    v5 += 48;
    v7 = vsubq_f32(v6, (float32x4_t)a2->var0);
    v7.i32[3] = 0;
    v8 = (int8x16_t)vmulq_f32(v7, v7);
    v9 = vadd_f32(vpadd_f32(*(float32x2_t *)v8.i8, *(float32x2_t *)v8.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL)).f32[0];
    if (v9 >= v4)
      this = (btPersistentManifold *)this;
    else
      this = (btPersistentManifold *)v3;
    if (v9 < v4)
      v4 = v9;
    ++v3;
  }
  while (var6_low != v3);
  return this;
}

float btPersistentManifold::getContactBreakingThreshold(btPersistentManifold *this)
{
  return *(float *)&this->var7;
}

uint64_t btPersistentManifold::addManifoldPoint(btPersistentManifold *this, const btManifoldPoint *a2)
{
  float var6;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  var6 = this->var6;
  if (LODWORD(var6) == 4)
  {
    LODWORD(var6) = btPersistentManifold::sortCachedPoints(this, a2);
    v5 = (char *)this + 192 * SLODWORD(var6);
    v8 = *((_QWORD *)v5 + 16);
    v7 = v5 + 128;
    v6 = v8;
    if (v8)
    {
      v9 = *(_QWORD *)&this[1].var0;
      if (v9)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
LABEL_8:
        *v7 = 0;
        goto LABEL_9;
      }
      if (gContactDestroyedCallback)
      {
        gContactDestroyedCallback(v6);
        goto LABEL_8;
      }
    }
  }
  else
  {
    LODWORD(this->var6) = LODWORD(var6) + 1;
  }
LABEL_9:
  v10 = LODWORD(var6) & ~(SLODWORD(var6) >> 31);
  v11 = (char *)this + 192 * v10;
  *((_OWORD *)v11 + 1) = a2->var0;
  *((_OWORD *)v11 + 2) = a2->var1;
  *((_OWORD *)v11 + 3) = a2->var2;
  *((_OWORD *)v11 + 4) = a2->var3;
  *((_OWORD *)v11 + 5) = a2->var4;
  *((_OWORD *)v11 + 6) = *(_OWORD *)&a2->var5;
  v12 = *(_OWORD *)&a2->var9;
  v13 = *(_OWORD *)&a2->var13;
  v14 = *(_OWORD *)&a2->var16;
  *(_OWORD *)(v11 + 156) = *(_OWORD *)&a2->var19;
  *((_OWORD *)v11 + 8) = v13;
  *((_OWORD *)v11 + 9) = v14;
  *((_OWORD *)v11 + 7) = v12;
  *((_OWORD *)v11 + 11) = *(btVector3 *)((char *)&a2->var23 + 4);
  *((_OWORD *)v11 + 12) = *(btVector3 *)((char *)&a2->var24 + 4);
  v15 = *(_QWORD *)&this[1].var0;
  if (v15 && (*(_BYTE *)(v15 + 8) & 1) != 0)
    (**(void (***)(uint64_t, btPersistentManifold *, uint64_t))v15)(v15, this, v10);
  return v10;
}

btPersistentManifold *btPersistentManifold::refreshContactPoints(btPersistentManifold *this, const btTransform *a2, const btTransform *a3)
{
  uint64_t var6_low;
  btPersistentManifold *v4;
  unint64_t v5;
  float32x4_t *v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  int8x16_t v10;
  int8x16_t v11;
  float32x4_t v12;
  float32x4_t v13;
  int8x16_t v14;
  int8x16_t v15;
  float32x4_t v16;
  float32x4_t v17;
  int8x16_t v18;
  float *v19;
  float v20;
  float v21;
  float32x4_t v22;
  int8x16_t v23;

  var6_low = LODWORD(this->var6);
  if ((int)var6_low >= 1)
  {
    v4 = this;
    v5 = var6_low + 1;
    do
    {
      v6 = (float32x4_t *)((char *)this + 192 * (v5 - 2));
      v7 = v6[1];
      v8 = v6[2];
      v9 = vmulq_f32((float32x4_t)a2->var0.var0[0], v7);
      v10 = (int8x16_t)vmulq_f32(v7, (float32x4_t)a2->var0.var0[1]);
      v11 = (int8x16_t)vmulq_f32(v7, (float32x4_t)a2->var0.var0[2]);
      v11.i32[3] = 0;
      *(float32x2_t *)v9.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v9.f32, *(float32x2_t *)v10.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL)));
      *(float32x2_t *)&v9.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v11.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL)), 0);
      v12 = vaddq_f32(v9, (float32x4_t)a2->var1);
      v6[4] = v12;
      v13 = vmulq_f32((float32x4_t)a3->var0.var0[0], v8);
      v14 = (int8x16_t)vmulq_f32(v8, (float32x4_t)a3->var0.var0[1]);
      v15 = (int8x16_t)vmulq_f32(v8, (float32x4_t)a3->var0.var0[2]);
      v15.i32[3] = 0;
      *(float32x2_t *)v13.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v13.f32, *(float32x2_t *)v14.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)));
      *(float32x2_t *)&v13.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v15.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL)), 0);
      v16 = vaddq_f32(v13, (float32x4_t)a3->var1);
      v17 = vsubq_f32(v12, v16);
      v17.i32[3] = 0;
      v6[3] = v16;
      v18 = (int8x16_t)vmulq_f32(v6[5], v17);
      v6[6].i32[0] = vadd_f32(vpadd_f32(*(float32x2_t *)v18.i8, *(float32x2_t *)v18.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL)).u32[0];
      ++v6[10].i32[2];
      --v5;
    }
    while (v5 > 1);
    do
    {
      v19 = (float *)(&v4->var0 + 48 * --var6_low);
      v20 = v19[24];
      v21 = *(float *)&v4->var7;
      if (v20 <= v21
        && (v22 = vsubq_f32(*(float32x4_t *)((char *)&v4->var1[var6_low].var2 + 8), vsubq_f32(*(float32x4_t *)((char *)&v4->var1[var6_low].var3 + 8), vmulq_n_f32(*(float32x4_t *)((char *)&v4->var1[var6_low].var4 + 8), v20))), v22.i32[3] = 0, v23 = (int8x16_t)vmulq_f32(v22, v22), vadd_f32(vpadd_f32(*(float32x2_t *)v23.i8, *(float32x2_t *)v23.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL)).f32[0] <= (float)(v21 * v21)))
      {
        if (gContactProcessedCallback)
          this = (btPersistentManifold *)((uint64_t (*)(float *, btCollisionObject *, _QWORD))gContactProcessedCallback)(v19 + 4, v4->var3, *(_QWORD *)&v4->var4);
      }
      else
      {
        this = (btPersistentManifold *)btPersistentManifold::removeContactPoint(v4, var6_low);
      }
    }
    while ((unint64_t)(var6_low + 1) > 1);
  }
  return this;
}

_BYTE *btPersistentManifold::removeContactPoint(btPersistentManifold *this, uint64_t a2)
{
  int v2;
  _BYTE *result;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  float *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v2 = a2;
  result = *(_BYTE **)&this[1].var0;
  if (result && (result[8] & 4) != 0)
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, btPersistentManifold *, uint64_t))(*(_QWORD *)result + 16))(result, this, a2);
  v5 = (char *)this + 192 * v2;
  v8 = *((_QWORD *)v5 + 16);
  v7 = v5 + 128;
  v6 = v8;
  if (v8)
  {
    result = *(_BYTE **)&this[1].var0;
    if (result)
    {
      result = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)result + 24))(result);
    }
    else
    {
      if (!gContactDestroyedCallback)
        goto LABEL_10;
      result = (_BYTE *)gContactDestroyedCallback(v6);
    }
    *v7 = 0;
  }
LABEL_10:
  v9 = SLODWORD(this->var6) - 1;
  if ((_DWORD)v9 != v2)
  {
    v9 = (uint64_t)&this->var1[v9].var0.var0.var0[2];
    v10 = *(_OWORD *)(v9 + 16);
    *((_OWORD *)v7 - 7) = *(_OWORD *)v9;
    v11 = &this->var1[v2].var0.var0.var0[2];
    v12 = *(_OWORD *)(v9 + 32);
    v13 = *(_OWORD *)(v9 + 48);
    *((_OWORD *)v11 + 1) = v10;
    *((_OWORD *)v11 + 2) = v12;
    v14 = *(_OWORD *)(v9 + 64);
    *((_OWORD *)v11 + 3) = v13;
    *((_OWORD *)v11 + 4) = v14;
    v15 = *(_OWORD *)(v9 + 96);
    v16 = *(_OWORD *)(v9 + 112);
    v17 = *(_OWORD *)(v9 + 128);
    *(_OWORD *)(v11 + 35) = *(_OWORD *)(v9 + 140);
    *((_OWORD *)v11 + 7) = v16;
    *((_OWORD *)v11 + 8) = v17;
    *((_OWORD *)v11 + 6) = v15;
    *((_OWORD *)v11 + 5) = *(_OWORD *)(v9 + 80);
    v18 = *(_OWORD *)(v9 + 176);
    *((_OWORD *)v11 + 10) = *(_OWORD *)(v9 + 160);
    *((_OWORD *)v11 + 11) = v18;
    *(_QWORD *)(v9 + 112) = 0;
    *(_BYTE *)(v9 + 120) = 0;
    *(_QWORD *)(v9 + 128) = 0;
    *(_DWORD *)(v9 + 124) = 0;
    *(_DWORD *)(v9 + 152) = 0;
    LODWORD(v9) = LODWORD(this->var6) - 1;
  }
  LODWORD(this->var6) = v9;
  return result;
}

void btPolyhedralContactClipping::clipFace(uint64_t a1, uint64_t a2, float32x4_t *a3, float a4)
{
  uint64_t v4;
  uint64_t v9;
  float32x4_t v10;
  int8x16_t v11;
  float v12;
  float32x4_t v13;
  int8x16_t v14;
  float v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  float32x4_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void **v30;
  BOOL v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void **v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;

  v4 = *(unsigned int *)(a1 + 4);
  if ((int)v4 >= 2)
  {
    v9 = 0;
    v10 = *(float32x4_t *)(*(_QWORD *)(a1 + 16) + 16 * (v4 - 1));
    v11 = (int8x16_t)vmulq_f32(v10, *a3);
    v12 = vadd_f32(vpadd_f32(*(float32x2_t *)v11.i8, *(float32x2_t *)v11.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL)).f32[0]+ a4;
    while (1)
    {
      v13 = *(float32x4_t *)(*(_QWORD *)(a1 + 16) + 16 * v9);
      v14 = (int8x16_t)vmulq_f32(v13, *a3);
      v15 = vadd_f32(vpadd_f32(*(float32x2_t *)v14.i8, *(float32x2_t *)v14.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)).f32[0]+ a4;
      if (v12 < 0.0)
        break;
      if (v15 < 0.0)
      {
        v20 = *(_DWORD *)(a2 + 4);
        if (v20 == *(_DWORD *)(a2 + 8))
        {
          v21 = v20 ? 2 * v20 : 1;
          if (v20 < v21)
          {
            v41 = v10;
            v45 = *(float32x4_t *)(*(_QWORD *)(a1 + 16) + 16 * v9);
            if (v21)
            {
              v22 = btAlignedAllocInternal(16 * v21, 16);
              v10 = v41;
              v13 = v45;
              v23 = v22;
              v20 = *(_DWORD *)(a2 + 4);
            }
            else
            {
              v23 = 0;
            }
            if (v20 >= 1)
            {
              v28 = 0;
              v29 = 16 * v20;
              do
              {
                *(_OWORD *)(v23 + v28) = *(_OWORD *)(*(_QWORD *)(a2 + 16) + v28);
                v28 += 16;
              }
              while (v29 != v28);
            }
            v30 = *(void ***)(a2 + 16);
            if (v30)
              v31 = *(_BYTE *)(a2 + 24) == 0;
            else
              v31 = 1;
            if (!v31)
            {
              btAlignedFreeInternal(v30);
              v10 = v41;
              v13 = v45;
            }
            *(_BYTE *)(a2 + 24) = 1;
            *(_QWORD *)(a2 + 16) = v23;
            *(_DWORD *)(a2 + 8) = v21;
            v20 = *(_DWORD *)(a2 + 4);
          }
        }
        *(float32x4_t *)(*(_QWORD *)(a2 + 16) + 16 * v20) = vaddq_f32(v10, vmulq_n_f32(vsubq_f32(v13, v10), v12 / (float)(v12 - v15)));
        v32 = *(_DWORD *)(a2 + 8);
        v16 = *(_DWORD *)(a2 + 4) + 1;
        *(_DWORD *)(a2 + 4) = v16;
        if (v16 == v32)
        {
          v17 = v16 ? 2 * v16 : 1;
          if (v16 < v17)
          {
            if (v17)
            {
              v47 = v13;
              v33 = btAlignedAllocInternal(16 * v17, 16);
              v13 = v47;
              v19 = v33;
              v16 = *(_DWORD *)(a2 + 4);
            }
            else
            {
              v19 = 0;
            }
            if (v16 >= 1)
            {
              v38 = 0;
              v39 = 16 * v16;
              do
              {
                *(_OWORD *)(v19 + v38) = *(_OWORD *)(*(_QWORD *)(a2 + 16) + v38);
                v38 += 16;
              }
              while (v39 != v38);
            }
LABEL_64:
            v36 = *(void ***)(a2 + 16);
            if (v36)
              v40 = *(_BYTE *)(a2 + 24) == 0;
            else
              v40 = 1;
            v24 = v13;
            if (!v40)
            {
LABEL_68:
              v43 = v24;
              v48 = v13;
              btAlignedFreeInternal(v36);
              v24 = v43;
              v13 = v48;
            }
LABEL_69:
            *(_BYTE *)(a2 + 24) = 1;
            *(_QWORD *)(a2 + 16) = v19;
            *(_DWORD *)(a2 + 8) = v17;
            v16 = *(_DWORD *)(a2 + 4);
LABEL_70:
            *(float32x4_t *)(*(_QWORD *)(a2 + 16) + 16 * v16) = v24;
            ++*(_DWORD *)(a2 + 4);
            goto LABEL_71;
          }
        }
LABEL_49:
        v24 = v13;
        goto LABEL_70;
      }
LABEL_71:
      ++v9;
      v12 = v15;
      v10 = v13;
      if (v9 == v4)
        return;
    }
    if (v15 >= 0.0)
    {
      v24 = vaddq_f32(v10, vmulq_n_f32(vsubq_f32(v13, v10), v12 / (float)(v12 - v15)));
      v16 = *(_DWORD *)(a2 + 4);
      if (v16 == *(_DWORD *)(a2 + 8))
      {
        v17 = v16 ? 2 * v16 : 1;
        if (v16 < v17)
        {
          if (v17)
          {
            v42 = v24;
            v46 = *(float32x4_t *)(*(_QWORD *)(a1 + 16) + 16 * v9);
            v25 = btAlignedAllocInternal(16 * v17, 16);
            v24 = v42;
            v13 = v46;
            v19 = v25;
            v16 = *(_DWORD *)(a2 + 4);
          }
          else
          {
            v19 = 0;
          }
          if (v16 >= 1)
          {
            v34 = 0;
            v35 = 16 * v16;
            do
            {
              *(_OWORD *)(v19 + v34) = *(_OWORD *)(*(_QWORD *)(a2 + 16) + v34);
              v34 += 16;
            }
            while (v35 != v34);
          }
          v36 = *(void ***)(a2 + 16);
          if (v36)
            v37 = *(_BYTE *)(a2 + 24) == 0;
          else
            v37 = 1;
          if (!v37)
            goto LABEL_68;
          goto LABEL_69;
        }
      }
      goto LABEL_70;
    }
    v16 = *(_DWORD *)(a2 + 4);
    if (v16 == *(_DWORD *)(a2 + 8))
    {
      v17 = v16 ? 2 * v16 : 1;
      if (v16 < v17)
      {
        if (v17)
        {
          v44 = *(float32x4_t *)(*(_QWORD *)(a1 + 16) + 16 * v9);
          v18 = btAlignedAllocInternal(16 * v17, 16);
          v13 = v44;
          v19 = v18;
          v16 = *(_DWORD *)(a2 + 4);
        }
        else
        {
          v19 = 0;
        }
        if (v16 >= 1)
        {
          v26 = 0;
          v27 = 16 * v16;
          do
          {
            *(_OWORD *)(v19 + v26) = *(_OWORD *)(*(_QWORD *)(a2 + 16) + v26);
            v26 += 16;
          }
          while (v27 != v26);
        }
        goto LABEL_64;
      }
    }
    goto LABEL_49;
  }
}

BOOL TestInternalObjects(const btTransform *a1, const btTransform *a2, float32x4_t *a3, float32x4_t *a4, const btConvexPolyhedron *a5, const btConvexPolyhedron *a6, float a7)
{
  int8x16_t v8;
  float v9;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;

  _Q2 = *a4;
  v8 = (int8x16_t)vmulq_f32(*a3, *a4);
  LODWORD(v9) = vadd_f32(vpadd_f32(*(float32x2_t *)v8.i8, *(float32x2_t *)v8.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL)).u32[0];
  _S5 = a1->var0.var0[2].var0.var0[0];
  _S7 = a1->var0.var0[2].var0.var0[1];
  __asm
  {
    FMLA            S3, S5, V2.S[2]
    FMLA            S4, S7, V2.S[2]
  }
  _S5 = a1->var0.var0[2].var0.var0[2];
  __asm { FMLA            S6, S5, V2.S[2] }
  _S16 = a2->var0.var0[2].var0.var0[0];
  _S18 = a2->var0.var0[2].var0.var0[1];
  __asm
  {
    FMLA            S5, S16, V2.S[2]
    FMLA            S7, S18, V2.S[2]
  }
  _S16 = a2->var0.var0[2].var0.var0[2];
  __asm { FMLA            S17, S16, V2.S[2] }
  v26 = *((float *)a5 + 32);
  v27 = *((float *)a5 + 33);
  if (_S3 < 0.0)
    v26 = -v26;
  if (_S4 < 0.0)
    v27 = -v27;
  v28 = *((float *)a5 + 34);
  if (_S6 < 0.0)
    v28 = -v28;
  v29 = *((float *)a6 + 32);
  v30 = *((float *)a6 + 33);
  if (_S5 < 0.0)
    v29 = -v29;
  if (_S7 < 0.0)
    v30 = -v30;
  v31 = *((float *)a6 + 34);
  if (_S17 < 0.0)
    v31 = -v31;
  v32 = (float)((float)(_S4 * v27) + (float)(v26 * _S3)) + (float)(v28 * _S6);
  v33 = (float)((float)(_S7 * v30) + (float)(v29 * _S5)) + (float)(v31 * _S17);
  if (v32 <= *((float *)a5 + 36))
    v32 = *((float *)a5 + 36);
  if (v33 <= *((float *)a6 + 36))
    v33 = *((float *)a6 + 36);
  v34 = v32 + v33;
  v35 = v9 + v34;
  v36 = v34 - v9;
  if (v35 < v36)
    v36 = v35;
  return v36 <= a7;
}

uint64_t btPolyhedralContactClipping::findSeparatingAxis(float32x4_t *a1, float32x4_t *a2, btTransform *a3, btTransform *a4, float32x4_t *a5, uint64_t a6)
{
  float32x4_t v10;
  float32x4_t v11;
  int8x16_t v12;
  int8x16_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  int8x16_t v17;
  btVector3 var1;
  int8x16_t v19;
  float32x4_t v20;
  btVector3 v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  float v27;
  uint64_t v28;
  float32x4_t v29;
  int8x16_t v30;
  int8x16_t v31;
  float32x4_t v32;
  float32x4_t v33;
  int8x16_t v34;
  float32x4_t v35;
  uint64_t result;
  float v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  float32x4_t v44;
  int8x16_t v45;
  int8x16_t v46;
  float32x4_t v47;
  float32x4_t v48;
  int8x16_t v49;
  float32x4_t v50;
  float v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  float32x4_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  int8x16_t v63;
  float32x4_t v64;
  int8x16_t v65;
  float32x4_t v66;
  int8x16_t v67;
  float32x4_t v68;
  int8x16_t v69;
  float32x4_t v70;
  float v71;
  float32x4_t v72;
  int8x16_t v73;
  int8x16_t v75;
  float v76;
  int8x16_t v77;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  int8x16_t v92;
  float v93;
  float v94;
  float32x4_t v95;
  int8x16_t v96;
  float32x4_t v97;
  int8x16_t v98;
  int8x16_t v99;
  btVector3 v101;
  float32x4_t v102;
  float32x4_t v103;
  btVector3 v104;
  int v105;
  int v106;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  btVector3 v112;
  btVector3 v113;
  float v114;
  btVector3 v115;
  btVector3 v116;

  v10 = a1[7];
  v11 = vmulq_f32((float32x4_t)a3->var0.var0[0], v10);
  v12 = (int8x16_t)vmulq_f32(v10, (float32x4_t)a3->var0.var0[1]);
  v13 = (int8x16_t)vmulq_f32(v10, (float32x4_t)a3->var0.var0[2]);
  v13.i32[3] = 0;
  *(float32x2_t *)v11.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v11.f32, *(float32x2_t *)v12.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL)));
  *(float32x2_t *)&v11.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v13.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL)), 0);
  v14 = vaddq_f32(v11, (float32x4_t)a3->var1);
  v15 = a2[7];
  v16 = vmulq_f32((float32x4_t)a4->var0.var0[0], v15);
  v17 = (int8x16_t)vmulq_f32(v15, (float32x4_t)a4->var0.var0[1]);
  var1 = a4->var1;
  v19 = (int8x16_t)vmulq_f32(v15, (float32x4_t)a4->var0.var0[2]);
  v20 = (float32x4_t)vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL);
  v19.i32[3] = 0;
  ++gActualSATPairTests;
  *(float32x2_t *)v16.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v16.f32, *(float32x2_t *)v17.i8), (float32x2_t)vzip1_s32(*(int32x2_t *)v20.f32, (int32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL)));
  *(float32x2_t *)&v16.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v19.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL)), 0);
  v21 = (btVector3)vsubq_f32(v14, vaddq_f32(v16, (float32x4_t)var1));
  v21.var0.var0[3] = 0.0;
  v111 = (float32x4_t)v21;
  v116 = v21;
  v22 = a1[2].u32[3];
  if ((int)v22 < 1)
  {
    v27 = 3.4028e38;
  }
  else
  {
    v23 = 0;
    v24 = gExpectedNbTests;
    v25 = gUseInternalObject;
    v26 = 48 * v22;
    v27 = 3.4028e38;
    do
    {
      v28 = a1[3].i64[1] + v23;
      *(_QWORD *)v21.var0.var0 = *(_QWORD *)(v28 + 32);
      v21.var0.var0[2] = *(float *)(v28 + 40);
      v29 = (float32x4_t)v21;
      v29.i32[3] = 0;
      v30 = (int8x16_t)vmulq_f32((float32x4_t)v21, (float32x4_t)a3->var0.var0[2]);
      v31 = (int8x16_t)vmulq_f32(v29, (float32x4_t)a3->var0.var0[0]);
      v32 = vmulq_f32(v29, (float32x4_t)a3->var0.var0[1]);
      v30.i32[3] = 0;
      *(float32x2_t *)v32.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v31.i8, *(float32x2_t *)v32.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL)));
      v33 = (float32x4_t)vextq_s8(v30, v30, 8uLL);
      *(float32x2_t *)&v32.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v30.i8, *(float32x2_t *)v33.f32), 0);
      v34 = (int8x16_t)vmulq_f32(v32, v111);
      *(float32x2_t *)v33.f32 = vpadd_f32(*(float32x2_t *)v34.i8, *(float32x2_t *)v34.i8);
      v35 = (float32x4_t)vextq_s8(v34, v34, 8uLL);
      *(float32x2_t *)v35.f32 = vadd_f32(*(float32x2_t *)v33.f32, *(float32x2_t *)v35.f32);
      v33.i32[0] = 0;
      v115 = (btVector3)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v33, v35), 0), (int8x16_t)vnegq_f32(v32), (int8x16_t)v32);
      gExpectedNbTests = ++v24;
      if (!v25
        || TestInternalObjects(a3, a4, (float32x4_t *)&v116, (float32x4_t *)&v115, (const btConvexPolyhedron *)a1, (const btConvexPolyhedron *)a2, v27))
      {
        ++gActualNbTests;
        v114 = 0.0;
        result = TestSepAxis((const btConvexPolyhedron *)a1, (const btConvexPolyhedron *)a2, a3, a4, (float32x4_t *)&v115, &v114, &v113, &v112);
        if (!(_DWORD)result)
          return result;
        v37 = v114;
        if (v114 < v27)
        {
          *(btVector3 *)a5 = v115;
          v27 = v37;
        }
        v24 = gExpectedNbTests;
        v25 = gUseInternalObject;
      }
      v23 += 48;
    }
    while (v26 != v23);
  }
  v38 = a2[2].u32[3];
  if ((int)v38 >= 1)
  {
    v39 = 0;
    v40 = gExpectedNbTests;
    v41 = gUseInternalObject;
    v42 = 48 * v38;
    do
    {
      v43 = a2[3].i64[1] + v39;
      *(_QWORD *)v21.var0.var0 = *(_QWORD *)(v43 + 32);
      v21.var0.var0[2] = *(float *)(v43 + 40);
      v44 = (float32x4_t)v21;
      v44.i32[3] = 0;
      v45 = (int8x16_t)vmulq_f32((float32x4_t)v21, (float32x4_t)a4->var0.var0[2]);
      v46 = (int8x16_t)vmulq_f32(v44, (float32x4_t)a4->var0.var0[0]);
      v47 = vmulq_f32(v44, (float32x4_t)a4->var0.var0[1]);
      v45.i32[3] = 0;
      *(float32x2_t *)v47.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v46.i8, *(float32x2_t *)v47.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v46, v46, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v47, (int8x16_t)v47, 8uLL)));
      v48 = (float32x4_t)vextq_s8(v45, v45, 8uLL);
      *(float32x2_t *)&v47.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v45.i8, *(float32x2_t *)v48.f32), 0);
      v49 = (int8x16_t)vmulq_f32(v47, v111);
      *(float32x2_t *)v48.f32 = vpadd_f32(*(float32x2_t *)v49.i8, *(float32x2_t *)v49.i8);
      v50 = (float32x4_t)vextq_s8(v49, v49, 8uLL);
      *(float32x2_t *)v50.f32 = vadd_f32(*(float32x2_t *)v48.f32, *(float32x2_t *)v50.f32);
      v48.i32[0] = 0;
      v115 = (btVector3)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v48, v50), 0), (int8x16_t)vnegq_f32(v47), (int8x16_t)v47);
      gExpectedNbTests = ++v40;
      if (!v41
        || TestInternalObjects(a3, a4, (float32x4_t *)&v116, (float32x4_t *)&v115, (const btConvexPolyhedron *)a1, (const btConvexPolyhedron *)a2, v27))
      {
        ++gActualNbTests;
        v114 = 0.0;
        result = TestSepAxis((const btConvexPolyhedron *)a1, (const btConvexPolyhedron *)a2, a3, a4, (float32x4_t *)&v115, &v114, &v113, &v112);
        if (!(_DWORD)result)
          return result;
        v51 = v114;
        if (v114 < v27)
        {
          *(btVector3 *)a5 = v115;
          v27 = v51;
        }
        v40 = gExpectedNbTests;
        v41 = gUseInternalObject;
      }
      v39 += 48;
    }
    while (v42 != v39);
  }
  v52 = a1[4].i32[3];
  if (v52 >= 1)
  {
    v53 = 0;
    v54 = a2[4].i32[3];
    v105 = -1;
    v106 = -1;
    do
    {
      if (v54 >= 1)
      {
        v55 = 0;
        v56 = *(float32x4_t *)(a1[5].i64[1] + 16 * v53);
        v57 = (int8x16_t)vmulq_f32(v56, (float32x4_t)a3->var0.var0[0]);
        v58 = (int8x16_t)vmulq_f32(v56, (float32x4_t)a3->var0.var0[1]);
        v59 = (int8x16_t)vmulq_f32(v56, (float32x4_t)a3->var0.var0[2]);
        v59.i32[3] = 0;
        *(float32x2_t *)v57.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v57.i8, *(float32x2_t *)v58.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v57, v57, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v58, v58, 8uLL)));
        *(float32x2_t *)v59.i8 = vpadd_f32(vpadd_f32(*(float32x2_t *)v59.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v59, v59, 8uLL)), 0);
        *(int8x8_t *)v58.i8 = vext_s8(*(int8x8_t *)v57.i8, *(int8x8_t *)v59.i8, 4uLL);
        v58.i64[1] = v57.i64[0];
        v108 = (float32x4_t)v58;
        v57.i64[1] = v59.i64[0];
        v110 = (float32x4_t)v57;
        do
        {
          v60 = *(float32x4_t *)(a2[5].i64[1] + 16 * v55);
          v61 = vmulq_f32(v60, (float32x4_t)a4->var0.var0[0]);
          v62 = vmulq_f32(v60, (float32x4_t)a4->var0.var0[1]);
          v63 = (int8x16_t)vmulq_f32(v60, (float32x4_t)a4->var0.var0[2]);
          v20 = (float32x4_t)vextq_s8((int8x16_t)v62, (int8x16_t)v62, 8uLL);
          v63.i32[3] = 0;
          *(float32x2_t *)v64.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v61.f32, *(float32x2_t *)v62.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v61, (int8x16_t)v61, 8uLL), *(int32x2_t *)v20.f32));
          *(float32x2_t *)v63.i8 = vpadd_f32(vpadd_f32(*(float32x2_t *)v63.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v63, v63, 8uLL)), 0);
          *(int8x8_t *)v61.f32 = vext_s8(*(int8x8_t *)v64.f32, *(int8x8_t *)v63.i8, 4uLL);
          v61.i64[1] = v64.i64[0];
          v64.i64[1] = v63.i64[0];
          v65 = (int8x16_t)vsubq_f32(vmulq_f32(v110, v61), vmulq_f32(v108, v64));
          v66.i64[0] = vextq_s8(v65, v65, 4uLL).u64[0];
          v66.i64[1] = v65.u32[0];
          if (fabsf(*(float *)&v65.i32[1]) > 0.000001
            || fabsf(v66.f32[1]) > 0.000001
            || fabsf(*(float *)v65.i32) > 0.000001)
          {
            v109 = v64;
            v67 = (int8x16_t)vmulq_f32(v66, v66);
            v68 = vmulq_n_f32(v66, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v67.i8, *(float32x2_t *)v67.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v67, v67, 8uLL)).f32[0]));
            v69 = (int8x16_t)vmulq_f32(v68, v111);
            *(float32x2_t *)v62.f32 = vpadd_f32(*(float32x2_t *)v69.i8, *(float32x2_t *)v69.i8);
            v70 = (float32x4_t)vextq_s8(v69, v69, 8uLL);
            *(float32x2_t *)v70.f32 = vadd_f32(*(float32x2_t *)v62.f32, *(float32x2_t *)v70.f32);
            v62.i32[0] = 0;
            v115 = (btVector3)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v62, v70), 0), (int8x16_t)vnegq_f32(v68), (int8x16_t)v68);
            ++gExpectedNbTests;
            if (!gUseInternalObject
              || TestInternalObjects(a3, a4, (float32x4_t *)&v116, (float32x4_t *)&v115, (const btConvexPolyhedron *)a1, (const btConvexPolyhedron *)a2, v27))
            {
              ++gActualNbTests;
              v114 = 0.0;
              result = TestSepAxis((const btConvexPolyhedron *)a1, (const btConvexPolyhedron *)a2, a3, a4, (float32x4_t *)&v115, &v114, &v113, &v112);
              if (!(_DWORD)result)
                return result;
              v71 = v114;
              if (v114 < v27)
              {
                *(btVector3 *)a5 = v115;
                v103 = v109;
                v104 = v112;
                v101 = v113;
                v102 = v110;
                v105 = v55;
                v106 = v53;
                v27 = v71;
              }
              v54 = a2[4].i32[3];
            }
          }
          ++v55;
        }
        while (v55 < v54);
        v52 = a1[4].i32[3];
      }
      ++v53;
    }
    while (v53 < v52);
    if ((v106 & 0x80000000) == 0 && (v105 & 0x80000000) == 0)
    {
      v72 = vsubq_f32((float32x4_t)v104, (float32x4_t)v101);
      v72.i32[3] = 0;
      v73 = (int8x16_t)vmulq_f32(v103, v102);
      LODWORD(_S1) = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v73, v73, 8uLL), vpadd_f32(*(float32x2_t *)v73.i8, *(float32x2_t *)v73.i8)).u32[0];
      v75 = (int8x16_t)vmulq_f32(v102, v72);
      LODWORD(v76) = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v75, v75, 8uLL), vpadd_f32(*(float32x2_t *)v75.i8, *(float32x2_t *)v75.i8)).u32[0];
      v77 = (int8x16_t)vmulq_f32(v103, v72);
      __asm { FMLS            S5, S1, V1.S[0] }
      v83 = -vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v77, v77, 8uLL), vpadd_f32(*(float32x2_t *)v77.i8, *(float32x2_t *)v77.i8)).f32[0];
      v84 = 0.0;
      if (_S5 != 0.0)
      {
        v85 = (float)(v76 + (float)(v83 * _S1)) / _S5;
        v84 = -1.0e30;
        if (v85 >= -1.0e30)
        {
          v84 = v85;
          if (v85 > 1.0e30)
            v84 = 1.0e30;
        }
      }
      v86 = v83 + (float)(v84 * _S1);
      if (v86 >= -1.0e30)
      {
        if (v86 > 1.0e30)
        {
          v88 = v76 + (float)(_S1 * 1.0e30);
          v84 = -1.0e30;
          v86 = 1.0e30;
          if (v88 >= -1.0e30)
          {
            v86 = 1.0e30;
            v84 = v88;
            if (v88 > 1.0e30)
            {
              v84 = 1.0e30;
              v86 = 1.0e30;
            }
          }
        }
      }
      else
      {
        v86 = -1.0e30;
        v87 = v76 + (float)(_S1 * -1.0e30);
        if (v87 >= -1.0e30)
        {
          v84 = 1.0e30;
          if (v87 <= 1.0e30)
            v84 = v87;
        }
        else
        {
          v84 = -1.0e30;
        }
      }
      v89 = vmulq_n_f32(v103, v86);
      v89.i32[3] = 0;
      v90 = vsubq_f32(v72, vmulq_n_f32(v102, v84));
      v90.i32[3] = 0;
      v91 = vaddq_f32(v89, v90);
      v92 = (int8x16_t)vmulq_f32(v91, v91);
      v93 = vadd_f32(vpadd_f32(*(float32x2_t *)v92.i8, *(float32x2_t *)v92.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v92, v92, 8uLL)).f32[0];
      if (v93 > 0.00000011921)
      {
        v94 = sqrtf(v93);
        v95 = vmulq_n_f32(v91, 1.0 / v94);
        v96 = (int8x16_t)vmulq_f32(v95, v111);
        *(float32x2_t *)v20.f32 = vpadd_f32(*(float32x2_t *)v96.i8, *(float32x2_t *)v96.i8);
        v97 = (float32x4_t)vextq_s8(v96, v96, 8uLL);
        *(float32x2_t *)v97.f32 = vadd_f32(*(float32x2_t *)v97.f32, *(float32x2_t *)v20.f32);
        v20.i32[0] = 0;
        v115 = (btVector3)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v20, v97), 0), (int8x16_t)vnegq_f32(v95), (int8x16_t)v95);
        v113 = (btVector3)vaddq_f32((float32x4_t)v104, v89);
        (*(void (**)(uint64_t, btVector3 *, btVector3 *, float))(*(_QWORD *)a6 + 32))(a6, &v115, &v113, -v94);
      }
    }
  }
  v98 = (int8x16_t)vmulq_f32(*a5, v111);
  if (vadd_f32(vpadd_f32(*(float32x2_t *)v98.i8, *(float32x2_t *)v98.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v98, v98, 8uLL)).f32[0] < 0.0)
  {
    v99.i64[0] = 0x8000000080000000;
    v99.i64[1] = 0x8000000080000000;
    *(int8x16_t *)a5 = veorq_s8(*(int8x16_t *)a5, v99);
  }
  return 1;
}

uint64_t TestSepAxis(const btConvexPolyhedron *a1, const btConvexPolyhedron *a2, const btTransform *a3, const btTransform *a4, float32x4_t *a5, float *a6, btVector3 *a7, btVector3 *a8)
{
  uint64_t result;
  float v15;
  BOOL v16;
  btVector3 *v17;
  btVector3 *v18;
  __n128 v19;
  btVector3 v20;
  btVector3 v21;
  btVector3 v22;
  float v23;
  float v24;
  uint64_t v25;

  v25 = 0;
  v24 = 0.0;
  v23 = 0.0;
  btConvexPolyhedron::project(a1, a3, a5, (float *)&v25 + 1, (float *)&v25, (__n128 *)&v22, (__n128 *)&v21);
  btConvexPolyhedron::project(a2, a4, a5, &v24, &v23, (__n128 *)&v20, &v19);
  result = 0;
  if (*(float *)&v25 >= v24)
  {
    if (v23 >= *((float *)&v25 + 1))
    {
      v15 = *(float *)&v25 - v24;
      v16 = (float)(*(float *)&v25 - v24) < (float)(v23 - *((float *)&v25 + 1));
      if ((float)(*(float *)&v25 - v24) >= (float)(v23 - *((float *)&v25 + 1)))
        v15 = v23 - *((float *)&v25 + 1);
      *a6 = v15;
      v17 = &v22;
      if (v16)
        v17 = &v21;
      *a7 = *v17;
      v18 = (btVector3 *)&v19;
      if (v16)
        v18 = &v20;
      *a8 = *v18;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void btPolyhedralContactClipping::clipFaceAgainstHull(float32x4_t *a1, uint64_t a2, float32x4_t *a3, uint64_t a4, uint64_t a5, float a6, float a7, double a8, double a9, double a10, double a11, float32x4_t a12)
{
  uint64_t v15;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float32x4_t v22;
  unsigned __int32 *v23;
  unsigned int v24;
  float v25;
  int8x16_t v26;
  int8x16_t v27;
  float32x4_t v28;
  int8x16_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int32 *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  int8x16_t v44;
  float32x4_t v45;
  int8x16_t v46;
  int8x16_t v47;
  float32x4_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  uint64_t v52;
  float32x4_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  void **v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  float32x4_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  float32x4_t v66;
  int8x16_t v67;
  float v68;
  uint64_t v69;
  int8x16_t v70;
  float v71;
  BOOL v72;
  uint64_t v73;
  float32x4_t *v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  float32x4_t v78;
  float32x4_t v79;
  char v80;
  int v81;
  int v82;
  void *v83;
  char v84;

  v15 = a4;
  v84 = 1;
  v83 = 0;
  v81 = 0;
  v82 = 0;
  v19 = *(unsigned int *)(a4 + 4);
  if ((int)v19 >= 1)
  {
    v84 = 1;
    v83 = (void *)btAlignedAllocInternal(16 * v19, 16);
    v82 = v19;
  }
  v20 = *(unsigned int *)(a2 + 44);
  if ((int)v20 >= 1)
  {
    v21 = 0;
    v22 = *a3;
    v23 = (unsigned __int32 *)(*(_QWORD *)(a2 + 56) + 40);
    v24 = -1;
    v25 = 3.4028e38;
    do
    {
      a12.i64[0] = *((_QWORD *)v23 - 1);
      a12.i32[2] = *v23;
      v26 = (int8x16_t)vmulq_f32(a12, a3[2]);
      a12.i32[3] = 0;
      v27 = (int8x16_t)vmulq_f32(v22, a12);
      v28 = vmulq_f32(a12, a3[1]);
      v26.i32[3] = 0;
      *(float32x2_t *)v28.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v27.i8, *(float32x2_t *)v28.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v28, (int8x16_t)v28, 8uLL)));
      *(float32x2_t *)&v28.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v26.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL)), 0);
      v29 = (int8x16_t)vmulq_f32(v28, *a1);
      *(float32x2_t *)v26.i8 = vpadd_f32(*(float32x2_t *)v29.i8, *(float32x2_t *)v29.i8);
      a12 = (float32x4_t)vextq_s8(v29, v29, 8uLL);
      a12.f32[0] = vadd_f32(*(float32x2_t *)v26.i8, *(float32x2_t *)a12.f32).f32[0];
      if (a12.f32[0] < v25)
      {
        v25 = a12.f32[0];
        v24 = v21;
      }
      ++v21;
      v23 += 12;
    }
    while (v20 != v21);
    if ((v24 & 0x80000000) == 0)
    {
      v74 = a1;
      v75 = a5;
      v30 = *(_QWORD *)(a2 + 56);
      v31 = v30 + 48 * v24;
      v32 = *(unsigned int *)(v31 + 4);
      v73 = v30;
      if ((int)v32 < 1)
      {
        v52 = v15;
      }
      else
      {
        v33 = 0;
        v34 = v30 + 48 * v24;
        v76 = (uint64_t *)(v34 + 32);
        v77 = a2;
        v35 = (__int32 *)(v34 + 40);
        v36 = &v80;
        do
        {
          v37 = *(_QWORD *)(v31 + 16);
          v38 = *(_QWORD *)(v77 + 24);
          if (v32 - 1 == v33)
            v39 = 0;
          else
            v39 = v33 + 1;
          v40 = *(float32x4_t *)(v38 + 16 * *(int *)(v37 + 4 * v33));
          v41 = vsubq_f32(v40, *(float32x4_t *)(v38 + 16 * *(int *)(v37 + 4 * v39)));
          v42 = v41;
          v42.i32[3] = 0;
          v43 = a3[2];
          v44 = (int8x16_t)vmulq_f32(v43, v41);
          v45 = a3[1];
          v46 = (int8x16_t)vmulq_f32(*a3, v42);
          v47 = (int8x16_t)vmulq_f32(v45, v42);
          v44.i32[3] = 0;
          *(float32x2_t *)v47.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v46.i8, *(float32x2_t *)v47.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v46, v46, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v47, v47, 8uLL)));
          v48 = (float32x4_t)vextq_s8(v44, v44, 8uLL);
          *(float32x2_t *)v44.i8 = vpadd_f32(*(float32x2_t *)v44.i8, *(float32x2_t *)v48.f32);
          v48.i64[0] = *v76;
          v48.i32[2] = *v35;
          v49 = (int8x16_t)vmulq_f32(v43, v48);
          v48.i32[3] = 0;
          v50 = (int8x16_t)vmulq_f32(*a3, v48);
          v51 = (int8x16_t)vmulq_f32(v45, v48);
          v52 = (uint64_t)v36;
          *(float32x2_t *)v44.i8 = vpadd_f32(*(float32x2_t *)v44.i8, 0);
          v49.i32[3] = 0;
          *(float32x2_t *)v51.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v50.i8, *(float32x2_t *)v51.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v50, v50, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v51, v51, 8uLL)));
          *(float32x2_t *)v49.i8 = vpadd_f32(vpadd_f32(*(float32x2_t *)v49.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v49, v49, 8uLL)), 0);
          *(int8x8_t *)v50.i8 = vext_s8(*(int8x8_t *)v47.i8, *(int8x8_t *)v44.i8, 4uLL);
          *(float32x2_t *)v44.i8 = vmul_f32(*(float32x2_t *)v44.i8, *(float32x2_t *)v51.i8);
          *(float32x2_t *)v51.i8 = vsub_f32(vmul_f32(*(float32x2_t *)v47.i8, (float32x2_t)vext_s8(*(int8x8_t *)v51.i8, *(int8x8_t *)v49.i8, 4uLL)), vmul_f32(*(float32x2_t *)v50.i8, *(float32x2_t *)v51.i8));
          *(int8x8_t *)v47.i8 = vext_s8(*(int8x8_t *)v51.i8, (int8x8_t)vsub_f32(*(float32x2_t *)v44.i8, vmul_f32(*(float32x2_t *)v47.i8, *(float32x2_t *)v49.i8)), 4uLL);
          v47.i64[1] = v51.u32[0];
          v36 = (char *)v15;
          v44.i64[0] = 0x8000000080000000;
          v44.i64[1] = 0x8000000080000000;
          v53 = (float32x4_t)veorq_s8(v47, v44);
          v54 = (int8x16_t)vmulq_f32(v40, *a3);
          v55 = (int8x16_t)vmulq_f32(v40, v45);
          v56 = (int8x16_t)vmulq_f32(v40, v43);
          v56.i32[3] = 0;
          *(float32x2_t *)v43.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v54, v54, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v55, v55, 8uLL)), vpadd_f32(*(float32x2_t *)v54.i8, *(float32x2_t *)v55.i8));
          *(float32x2_t *)&v43.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v56.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v56, v56, 8uLL)), 0);
          v57 = (int8x16_t)vmulq_f32(vaddq_f32(v43, a3[3]), v53);
          v79 = v53;
          btPolyhedralContactClipping::clipFace(v15, v52, &v79, -vadd_f32(vpadd_f32(*(float32x2_t *)v57.i8, *(float32x2_t *)v57.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v57, v57, 8uLL)).f32[0]);
          if ((*(_DWORD *)(v15 + 4) & 0x80000000) != 0 && (*(_DWORD *)(v15 + 8) & 0x80000000) != 0)
          {
            v58 = *(void ***)(v15 + 16);
            if (v58 && *(_BYTE *)(v15 + 24))
              btAlignedFreeInternal(v58);
            *(_BYTE *)(v15 + 24) = 1;
            *(_QWORD *)(v15 + 16) = 0;
            *(_DWORD *)(v15 + 8) = 0;
          }
          ++v33;
          *(_DWORD *)(v15 + 4) = 0;
          v15 = v52;
        }
        while (v32 != v33);
      }
      v59 = *(_DWORD *)(v52 + 4);
      if (v59 >= 1)
      {
        v60 = 0;
        v61 = v73 + 48 * v24;
        v22.i64[0] = *(_QWORD *)(v61 + 32);
        v22.i32[2] = *(_DWORD *)(v61 + 40);
        v62 = v22;
        v62.i32[3] = 0;
        v63 = (int8x16_t)vmulq_f32(v22, a3[2]);
        v64 = (int8x16_t)vmulq_f32(v62, *a3);
        v65 = (int8x16_t)vmulq_f32(v62, a3[1]);
        v63.i32[3] = 0;
        *(float32x2_t *)v66.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v64.i8, *(float32x2_t *)v65.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v64, v64, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v65, v65, 8uLL)));
        *(float32x2_t *)&v66.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v63.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v63, v63, 8uLL)), 0);
        v67 = (int8x16_t)vmulq_f32(v66, a3[3]);
        v68 = *(float *)(v61 + 44)
            - vadd_f32(vpadd_f32(*(float32x2_t *)v67.i8, *(float32x2_t *)v67.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v67, v67, 8uLL)).f32[0];
        v78 = v66;
        do
        {
          v69 = *(_QWORD *)(v52 + 16);
          v70 = (int8x16_t)vmulq_f32(v66, *(float32x4_t *)(v69 + 16 * v60));
          v71 = v68
              + vadd_f32(vpadd_f32(*(float32x2_t *)v70.i8, *(float32x2_t *)v70.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v70, v70, 8uLL)).f32[0];
          if (v71 <= a6)
            v71 = a6;
          if (v71 <= a7)
          {
            v79 = *(float32x4_t *)(v69 + 16 * v60);
            (*(void (**)(uint64_t, float32x4_t *, float32x4_t *))(*(_QWORD *)v75 + 32))(v75, v74, &v79);
            v66 = v78;
            v59 = *(_DWORD *)(v52 + 4);
          }
          ++v60;
        }
        while (v60 < v59);
      }
    }
  }
  if (v83)
    v72 = v84 == 0;
  else
    v72 = 1;
  if (!v72)
    btAlignedFreeInternal((void **)v83);
}

void btPolyhedralContactClipping::clipHullAgainstHull(float32x4_t *a1, uint64_t a2, uint64_t a3, float32x4_t *a4, float32x4_t *a5, uint64_t a6, float a7, float a8, double a9, float32x4_t a10, double a11, float32x4_t a12, float32x4_t a13)
{
  int8x16_t v17;
  float32x4_t v18;
  float32x4_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int32 *v23;
  int v24;
  int8x16_t v25;
  int8x16_t v26;
  float32x4_t v27;
  int8x16_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  void **v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  _OWORD *v40;
  void **v41;
  __int128 v42;
  float32x4_t v43;
  int8x16_t v44;
  BOOL v45;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  char v54[4];
  int v55;
  int v56;
  void *v57;
  char v58;
  float32x4_t v59[2];

  v17 = (int8x16_t)vmulq_f32(*a1, *a1);
  *(float32x2_t *)v18.f32 = vpadd_f32(*(float32x2_t *)v17.i8, *(float32x2_t *)v17.i8);
  *(float *)v17.i32 = sqrtf(vadd_f32(*(float32x2_t *)v18.f32, (float32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL)).f32[0]);
  v18.i32[0] = 1.0;
  v19 = vmulq_n_f32(*a1, 1.0 / *(float *)v17.i32);
  v59[0] = v19;
  v20 = *(unsigned int *)(a3 + 44);
  v21 = *(_QWORD *)(a3 + 56);
  if ((int)v20 < 1)
  {
    v24 = -1;
  }
  else
  {
    v22 = 0;
    v18 = a5[1];
    a10 = a5[2];
    v23 = (unsigned __int32 *)(v21 + 40);
    v24 = -1;
    LODWORD(a11) = -8388609;
    a12.i64[0] = 0;
    do
    {
      a13.i64[0] = *((_QWORD *)v23 - 1);
      a13.i32[2] = *v23;
      v25 = (int8x16_t)vmulq_f32(a13, a10);
      a13.i32[3] = 0;
      v26 = (int8x16_t)vmulq_f32(*a5, a13);
      v27 = vmulq_f32(a13, v18);
      v25.i32[3] = 0;
      *(float32x2_t *)v27.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v26.i8, *(float32x2_t *)v27.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL)));
      *(float32x2_t *)&v27.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v25.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL)), 0);
      v28 = (int8x16_t)vmulq_f32(v19, v27);
      *(float32x2_t *)v25.i8 = vpadd_f32(*(float32x2_t *)v28.i8, *(float32x2_t *)v28.i8);
      a13 = (float32x4_t)vextq_s8(v28, v28, 8uLL);
      *(float32x2_t *)a13.f32 = vadd_f32(*(float32x2_t *)v25.i8, *(float32x2_t *)a13.f32);
      if (a13.f32[0] > *(float *)&a11)
      {
        *(float *)&a11 = a13.f32[0];
        v24 = v22;
      }
      ++v22;
      v23 += 12;
    }
    while (v20 != v22);
  }
  v58 = 1;
  v57 = 0;
  v55 = 0;
  v56 = 0;
  v29 = v21 + 48 * v24;
  v30 = *(unsigned int *)(v29 + 4);
  if ((int)v30 >= 1)
  {
    v31 = 0;
    v32 = 0;
    v33 = 0;
    while (1)
    {
      v34 = *(float32x4_t *)(*(_QWORD *)(a3 + 24) + 16 * *(int *)(*(_QWORD *)(v29 + 16) + 4 * v31));
      v35 = *a5;
      v36 = a5[1];
      a10 = a5[2];
      a12 = a5[3];
      if (v32 != (_DWORD)v31)
        goto LABEL_24;
      v37 = v31 ? 2 * v32 : 1;
      if (v32 >= v37)
        goto LABEL_24;
      v52 = *(float32x4_t *)(*(_QWORD *)(a3 + 24) + 16 * *(int *)(*(_QWORD *)(v29 + 16) + 4 * v31));
      v53 = a5[3];
      v50 = a5[2];
      v51 = a5[1];
      v49 = *a5;
      if (v37)
      {
        v38 = btAlignedAllocInternal(16 * v37, 16);
        if (v31)
          goto LABEL_17;
      }
      else
      {
        v38 = 0;
        if (v31)
        {
LABEL_17:
          v39 = v32;
          v40 = (_OWORD *)v38;
          v41 = v33;
          do
          {
            v42 = *(_OWORD *)v41;
            v41 += 2;
            *v40++ = v42;
            --v39;
          }
          while (v39);
LABEL_22:
          btAlignedFreeInternal(v33);
          goto LABEL_23;
        }
      }
      if (v33)
        goto LABEL_22;
LABEL_23:
      v33 = (void **)v38;
      v32 = v37;
      v34 = v52;
      a12 = v53;
      a10 = v50;
      v36 = v51;
      v35 = v49;
LABEL_24:
      v43 = vmulq_f32(v35, v34);
      v44 = (int8x16_t)vmulq_f32(v34, v36);
      v18 = vmulq_f32(v34, a10);
      *(_QWORD *)&a11 = vextq_s8(v44, v44, 8uLL).u64[0];
      *(int32x2_t *)a10.f32 = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v43, (int8x16_t)v43, 8uLL), *(int32x2_t *)&a11);
      v18.i32[3] = 0;
      *(float32x2_t *)v43.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v43.f32, *(float32x2_t *)v44.i8), *(float32x2_t *)a10.f32);
      *(float32x2_t *)&v43.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v18.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL)), 0);
      *(float32x4_t *)&v33[2 * v31++] = vaddq_f32(v43, a12);
      if (v31 == v30)
        goto LABEL_27;
    }
  }
  v33 = 0;
  v32 = 0;
  LODWORD(v31) = 0;
LABEL_27:
  v55 = v31;
  v56 = v32;
  v57 = v33;
  v58 = 1;
  if (v24 < 0)
  {
    v45 = 0;
    if (!v33)
      return;
  }
  else
  {
    btPolyhedralContactClipping::clipFaceAgainstHull(v59, a2, a4, (uint64_t)v54, a6, a7, a8, *(double *)v18.i64, *(double *)a10.i64, a11, *(double *)a12.i64, a13);
    v33 = (void **)v57;
    v45 = v58 == 0;
    if (!v57)
      return;
  }
  if (!v45)
    btAlignedFreeInternal(v33);
}

void btTriangleRaycastCallback::btTriangleRaycastCallback(btTriangleRaycastCallback *this, const btVector3 *a2, const btVector3 *a3, int a4)
{
  *(_QWORD *)this = off_1EA597B90;
  *((btVector3 *)this + 1) = *a2;
  *((btVector3 *)this + 2) = *a3;
  *((_DWORD *)this + 12) = a4;
  *((_DWORD *)this + 13) = 1065353216;
}

void btTriangleRaycastCallback::processTriangle(float32x4_t *this, float32x4_t *a2)
{
  float32x4_t v2;
  float32x4_t v3;
  int8x8_t v4;
  float32x4_t v5;
  float32x4_t v6;
  int8x8_t v7;
  float32x4_t v8;
  float32x4_t v9;
  int8x16_t v10;
  float32x4_t v11;
  int8x16_t v12;
  float32x4_t v13;
  float32x4_t v14;
  int8x16_t v15;
  float32x2_t v16;
  int8x16_t v17;
  float32x2_t v18;
  __int32 v20;
  float v22;
  int8x16_t v23;
  float v24;
  float32x4_t v25;
  int8x8_t v26;
  float32x4_t v27;
  int8x8_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  int8x16_t v32;
  float32x4_t v33;
  float v34;
  int8x16_t v35;
  float32x4_t v36;
  int8x8_t v37;
  float32x4_t v38;
  int8x16_t v39;
  float32x4_t v40;
  int8x16_t v41;
  int8x16_t v42;
  float32x4_t v43;
  int8x16_t v44;
  float v45;
  int8x16_t v47;
  int v48;
  float v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;

  v2 = a2[1];
  v3 = vsubq_f32(v2, *a2);
  v4 = (int8x8_t)vextq_s8((int8x16_t)v3, (int8x16_t)v3, 8uLL).u64[0];
  v3.i32[3] = 0;
  v5 = a2[2];
  v6 = vsubq_f32(v5, *a2);
  v7 = (int8x8_t)vextq_s8((int8x16_t)v6, (int8x16_t)v6, 8uLL).u64[0];
  v6.i32[3] = 0;
  *(int8x8_t *)v8.f32 = vext_s8(*(int8x8_t *)v3.f32, v4, 4uLL);
  v8.i64[1] = v3.i64[0];
  *(int8x8_t *)v9.f32 = vext_s8(*(int8x8_t *)v6.f32, v7, 4uLL);
  v9.i64[1] = v6.i64[0];
  v10 = (int8x16_t)vsubq_f32(vmulq_f32(v9, v3), vmulq_f32(v8, v6));
  v11.i64[0] = vextq_s8(v10, v10, 4uLL).u64[0];
  v11.i64[1] = v10.u32[0];
  v12 = (int8x16_t)vmulq_f32(*a2, v11);
  *(float32x2_t *)v12.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v12.i8, *(float32x2_t *)v12.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL));
  v13 = this[1];
  v14 = this[2];
  v15 = (int8x16_t)vmulq_f32(v13, v11);
  v16 = vsub_f32(vadd_f32(vpadd_f32(*(float32x2_t *)v15.i8, *(float32x2_t *)v15.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL)), *(float32x2_t *)v12.i8);
  v17 = (int8x16_t)vmulq_f32(v14, v11);
  v18 = vsub_f32(vadd_f32(vpadd_f32(*(float32x2_t *)v17.i8, *(float32x2_t *)v17.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL)), *(float32x2_t *)v12.i8);
  if (vmul_f32(v16, v18).f32[0] < 0.0)
  {
    v20 = this[3].i32[0];
    if (v16.f32[0] > 0.0 || (this[3].i32[0] & 1) == 0)
    {
      v22 = vdiv_f32(v16, vsub_f32(v16, v18)).f32[0];
      if (v22 < this[3].f32[1])
      {
        v23 = (int8x16_t)vmulq_f32(v11, v11);
        v24 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL), vpadd_f32(*(float32x2_t *)v23.i8, *(float32x2_t *)v23.i8)).f32[0];
        v25 = vaddq_f32(v13, vmulq_n_f32(vsubq_f32(v14, v13), v22));
        v27 = vsubq_f32(*a2, v25);
        v26 = (int8x8_t)vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL).u64[0];
        v27.i32[3] = 0;
        v29 = vsubq_f32(v2, v25);
        v28 = (int8x8_t)vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL).u64[0];
        v29.i32[3] = 0;
        *(int8x8_t *)v30.f32 = vext_s8(*(int8x8_t *)v27.f32, v26, 4uLL);
        v30.i64[1] = v27.i64[0];
        *(int8x8_t *)v31.f32 = vext_s8(*(int8x8_t *)v29.f32, v28, 4uLL);
        v31.i64[1] = v29.i64[0];
        v32 = (int8x16_t)vsubq_f32(vmulq_f32(v31, v27), vmulq_f32(v30, v29));
        v33.i64[0] = vextq_s8(v32, v32, 4uLL).u64[0];
        v33.i64[1] = v32.u32[0];
        v34 = -0.0001 * v24;
        v35 = (int8x16_t)vmulq_f32(v11, v33);
        if (vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL), vpadd_f32(*(float32x2_t *)v35.i8, *(float32x2_t *)v35.i8)).f32[0] >= (float)(-0.0001 * v24))
        {
          v36 = vsubq_f32(v5, v25);
          v37 = (int8x8_t)vextq_s8((int8x16_t)v36, (int8x16_t)v36, 8uLL).u64[0];
          v36.i32[3] = 0;
          *(int8x8_t *)v38.f32 = vext_s8(*(int8x8_t *)v36.f32, v37, 4uLL);
          v38.i64[1] = v36.i64[0];
          v39 = (int8x16_t)vsubq_f32(vmulq_f32(v38, v29), vmulq_f32(v31, v36));
          v40.i64[0] = vextq_s8(v39, v39, 4uLL).u64[0];
          v40.i64[1] = v39.u32[0];
          v41 = (int8x16_t)vmulq_f32(v11, v40);
          v42 = (int8x16_t)vsubq_f32(vmulq_f32(v30, v36), vmulq_f32(v38, v27));
          v43.i64[0] = vextq_s8(v42, v42, 4uLL).u64[0];
          v43.i64[1] = v42.u32[0];
          v44 = (int8x16_t)vmulq_f32(v11, v43);
          LODWORD(v45) = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v44, v44, 8uLL), vpadd_f32(*(float32x2_t *)v44.i8, *(float32x2_t *)v44.i8)).u32[0];
          if (vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v41, v41, 8uLL), vpadd_f32(*(float32x2_t *)v41.i8, *(float32x2_t *)v41.i8)).f32[0] >= v34&& v45 >= v34)
          {
            v47 = (int8x16_t)vmulq_n_f32(v11, 1.0 / sqrtf(v24));
            v53 = v47;
            v48 = v20 & 2;
            if (v16.f32[0] <= 0.0 && v48 == 0)
            {
              v51.i64[0] = 0x8000000080000000;
              v51.i64[1] = 0x8000000080000000;
              v52 = veorq_s8(v47, v51);
              v50 = (*(float (**)(float32x4_t *, int8x16_t *))(this->i64[0] + 24))(this, &v52);
            }
            else
            {
              v50 = (*(float (**)(float32x4_t *, int8x16_t *))(this->i64[0] + 24))(this, &v53);
            }
            this[3].f32[1] = v50;
          }
        }
      }
    }
  }
}

void btTriangleConvexcastCallback::btTriangleConvexcastCallback(btTriangleConvexcastCallback *this, const btConvexShape *a2, const btTransform *a3, const btTransform *a4, const btTransform *a5, float a6)
{
  *(_QWORD *)this = off_1EA597E38;
  *((_QWORD *)this + 1) = a2;
  *(btTransform *)((char *)this + 16) = *a3;
  *(btTransform *)((char *)this + 80) = *a4;
  *(btTransform *)((char *)this + 144) = *a5;
  *((_DWORD *)this + 52) = 1065353216;
  *((float *)this + 53) = a6;
  *((_DWORD *)this + 54) = 0;
}

void btTriangleConvexcastCallback::processTriangle(btTriangleConvexcastCallback *this, btVector3 *a2, uint64_t a3, uint64_t a4)
{
  btVector3 v8;
  int8x16_t v9;
  float v10;
  _QWORD v11[6];
  void *v12;
  float32x4_t v13[9];
  float32x4_t v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  int v18;
  _BYTE v19[320];
  int v20;
  char v21;
  void (**v22)(btTriangleShape *__hidden);
  int v23;
  int v24;
  __int128 v25;
  btVector3 v26;
  btVector3 v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  btPolyhedralConvexShape::btPolyhedralConvexShape((btPolyhedralConvexShape *)&v22);
  v22 = off_1EA596108;
  v23 = 1;
  v8 = a2[1];
  v25 = (__int128)*a2;
  v26 = v8;
  v27 = a2[2];
  v24 = *((_DWORD *)this + 53);
  v20 = 953267991;
  v21 = 0;
  v12 = &unk_1EA597F48;
  btContinuousConvexCollision::btContinuousConvexCollision(v11, *((_QWORD *)this + 1), (uint64_t)&v22, (uint64_t)v19, (uint64_t)&v12);
  v13[0].i64[0] = (uint64_t)&off_1EA598630;
  v17 = 0;
  v16 = 1.0;
  v18 = *((_DWORD *)this + 54);
  if (btContinuousConvexCollision::calcTimeOfImpact((btContinuousConvexCollision *)v11, (btTransform *)((char *)this + 16), (const btTransform *)((char *)this + 80), (btTransform *)((char *)this + 144), (btTransform *)((char *)this + 144), v13))
  {
    v9 = (int8x16_t)vmulq_f32(v14, v14);
    v10 = vadd_f32(vpadd_f32(*(float32x2_t *)v9.i8, *(float32x2_t *)v9.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL)).f32[0];
    if (v10 > 0.0001 && v16 < *((float *)this + 52))
    {
      v14 = vmulq_n_f32(v14, 1.0 / sqrtf(v10));
      (*(void (**)(btTriangleConvexcastCallback *, float32x4_t *, uint64_t *, uint64_t, uint64_t, float))(*(_QWORD *)this + 24))(this, &v14, &v15, a3, a4, v16);
    }
  }
  C3DSceneSourcePerformConsistencyCheck(v11);
  btPolyhedralConvexShape::~btPolyhedralConvexShape((btPolyhedralConvexShape *)&v22);
}

_QWORD *btSubsimplexConvexCast::btSubsimplexConvexCast(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *result = &off_1EA597358;
  result[1] = a4;
  result[2] = a2;
  result[3] = a3;
  return result;
}

uint64_t btSubsimplexConvexCast::calcTimeOfImpact(btVoronoiSimplexSolver **this, const btTransform *a2, const btTransform *a3, const btTransform *a4, const btTransform *a5, float32x4_t *a6)
{
  float32x4_t v12;
  float32x4_t v13;
  int8x16_t v14;
  btVoronoiSimplexSolver *v15;
  int8x16_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  int8x16_t v20;
  int8x16_t v21;
  float32x4_t v22;
  float32x4_t v23;
  btVoronoiSimplexSolver *v24;
  float32x4_t v25;
  float32x4_t v26;
  int8x16_t v27;
  int8x16_t v28;
  btVector3 v29;
  int8x16_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  int v34;
  btVoronoiSimplexSolver *v36;
  int8x16_t v37;
  float32x4_t v38;
  float32x4_t v39;
  int8x16_t v40;
  int8x16_t v41;
  btVoronoiSimplexSolver *v42;
  float32x4_t v43;
  int8x16_t v44;
  int8x16_t v45;
  btVector3 v46;
  btVector3 v47;
  int8x16_t v48;
  float32x2_t v49;
  int8x16_t v50;
  float32x2_t v51;
  btVector3 v52;
  int v53;
  int8x16_t v54;
  int8x16_t v55;
  float v56;
  float32x4_t v57;
  int8x16_t v58;
  btVector3 v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  btVector3 v74;
  btVector3 var1;
  btVector3 v76;
  btVector3 v77;
  btVector3 v78;
  btVector3 v79;
  btVector3 v80;
  btVector3 v81;
  btVector3 v82;

  btVoronoiSimplexSolver::reset(this[1]);
  var1 = a2->var1;
  v73 = (float32x4_t)a4->var0.var0[2];
  v74 = a4->var1;
  v12 = (float32x4_t)a2->var0.var0[0];
  v13 = (float32x4_t)a2->var0.var0[1];
  v71 = (float32x4_t)a4->var0.var0[1];
  v72 = (float32x4_t)a4->var0.var0[0];
  v14 = (int8x16_t)vsubq_f32(vsubq_f32((float32x4_t)a3->var1, (float32x4_t)var1), vsubq_f32((float32x4_t)a5->var1, (float32x4_t)v74));
  v14.i32[3] = 0;
  v64 = (float32x4_t)v14;
  v15 = this[2];
  v16.i64[0] = 0x8000000080000000;
  v16.i64[1] = 0x8000000080000000;
  v68 = v13;
  v69 = (float32x4_t)a2->var0.var0[0];
  v12.i32[3] = 0;
  v13.i32[3] = 0;
  v17 = (float32x4_t)veorq_s8(v14, v16);
  v70 = (float32x4_t)a2->var0.var0[2];
  v18 = v70;
  v18.i32[3] = 0;
  v66 = v13;
  v67 = v12;
  v65 = v18;
  v80 = (btVector3)vaddq_f32(vaddq_f32(vmulq_n_f32(v12, v17.f32[0]), vmulq_lane_f32(v13, *(float32x2_t *)v17.f32, 1)), vmulq_laneq_f32(v18, v17, 2));
  (*(void (**)(btVector3 *__return_ptr, btVoronoiSimplexSolver *, btVector3 *))(*(_QWORD *)v15 + 128))(&v82, v15, &v80);
  v19 = vmulq_f32((float32x4_t)a2->var0.var0[0], (float32x4_t)v82);
  v20 = (int8x16_t)vmulq_f32((float32x4_t)v82, (float32x4_t)a2->var0.var0[1]);
  v21 = (int8x16_t)vmulq_f32((float32x4_t)v82, (float32x4_t)a2->var0.var0[2]);
  v21.i32[3] = 0;
  *(float32x2_t *)v19.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v19.f32, *(float32x2_t *)v20.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL)));
  *(float32x2_t *)&v19.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v21.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL)), 0);
  v76 = (btVector3)vaddq_f32(v19, (float32x4_t)a2->var1);
  v81 = v76;
  v22 = (float32x4_t)a4->var0.var0[0];
  v23 = (float32x4_t)a4->var0.var0[1];
  v22.i32[3] = 0;
  v23.i32[3] = 0;
  v24 = this[3];
  v25 = (float32x4_t)a4->var0.var0[2];
  v25.i32[3] = 0;
  v79 = (btVector3)vaddq_f32(vaddq_f32(vmulq_n_f32(v22, v64.f32[0]), vmulq_lane_f32(v23, *(float32x2_t *)v64.f32, 1)), vmulq_laneq_f32(v25, v64, 2));
  (*(void (**)(btVector3 *__return_ptr, btVoronoiSimplexSolver *, btVector3 *))(*(_QWORD *)v24 + 128))(&v82, v24, &v79);
  v26 = vmulq_f32((float32x4_t)a4->var0.var0[0], (float32x4_t)v82);
  v27 = (int8x16_t)vmulq_f32((float32x4_t)v82, (float32x4_t)a4->var0.var0[1]);
  v28 = (int8x16_t)vmulq_f32((float32x4_t)v82, (float32x4_t)a4->var0.var0[2]);
  v28.i32[3] = 0;
  *(float32x2_t *)v26.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v26.f32, *(float32x2_t *)v27.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL)));
  *(float32x2_t *)&v26.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v28.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL)), 0);
  v80 = (btVector3)vaddq_f32(v26, (float32x4_t)a4->var1);
  v29 = (btVector3)vsubq_f32((float32x4_t)v76, (float32x4_t)v80);
  v29.var0.var0[3] = 0.0;
  v82 = v29;
  v30 = (int8x16_t)vmulq_f32((float32x4_t)v29, (float32x4_t)v29);
  v76.var0.var0[0] = 0.0;
  v60 = (btVector3)0;
  if (vadd_f32(vpadd_f32(*(float32x2_t *)v30.i8, *(float32x2_t *)v30.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL)).f32[0] > 0.0001)
  {
    v31 = v72;
    v31.i32[3] = 0;
    v63 = v31;
    v32 = v71;
    v32.i32[3] = 0;
    v62 = v32;
    v33 = v73;
    v33.i32[3] = 0;
    v61 = v33;
    v60 = (btVector3)0;
    v76 = (btVector3)0;
    v34 = -33;
    do
    {
      if (__CFADD__(v34++, 1))
        break;
      v36 = this[2];
      v37.i64[0] = 0x8000000080000000;
      v37.i64[1] = 0x8000000080000000;
      v38 = (float32x4_t)veorq_s8((int8x16_t)v82, v37);
      v77 = (btVector3)vaddq_f32(vmulq_laneq_f32(v65, v38, 2), vaddq_f32(vmulq_n_f32(v67, v38.f32[0]), vmulq_lane_f32(v66, *(float32x2_t *)v38.f32, 1)));
      (*(void (**)(btVector3 *__return_ptr, btVoronoiSimplexSolver *, btVector3 *))(*(_QWORD *)v36 + 128))(&v78, v36, &v77);
      v39 = vmulq_f32(v69, (float32x4_t)v78);
      v40 = (int8x16_t)vmulq_f32(v68, (float32x4_t)v78);
      v41 = (int8x16_t)vmulq_f32(v70, (float32x4_t)v78);
      v41.i32[3] = 0;
      *(float32x2_t *)v39.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v39.f32, *(float32x2_t *)v40.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v39, (int8x16_t)v39, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v40, v40, 8uLL)));
      *(float32x2_t *)&v39.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v41.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v41, v41, 8uLL)), 0);
      v81 = (btVector3)vaddq_f32((float32x4_t)var1, v39);
      v42 = this[3];
      v77 = (btVector3)vaddq_f32(vmulq_laneq_f32(v61, (float32x4_t)v82, 2), vaddq_f32(vmulq_n_f32(v63, v82.var0.var0[0]), vmulq_lane_f32(v62, *(float32x2_t *)v82.var0.var0, 1)));
      (*(void (**)(btVector3 *__return_ptr, btVoronoiSimplexSolver *, btVector3 *))(*(_QWORD *)v42 + 128))(&v78, v42, &v77);
      v43 = vmulq_f32(v72, (float32x4_t)v78);
      v44 = (int8x16_t)vmulq_f32(v71, (float32x4_t)v78);
      v45 = (int8x16_t)vmulq_f32(v73, (float32x4_t)v78);
      v45.i32[3] = 0;
      *(float32x2_t *)v43.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v43.f32, *(float32x2_t *)v44.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v43, (int8x16_t)v43, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v44, v44, 8uLL)));
      *(float32x2_t *)&v43.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v45.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v45, v45, 8uLL)), 0);
      v46 = (btVector3)vaddq_f32((float32x4_t)v74, v43);
      v47 = (btVector3)vsubq_f32((float32x4_t)v81, (float32x4_t)v46);
      v47.var0.var0[3] = 0.0;
      v79 = v47;
      v80 = v46;
      if (v76.var0.var0[0] > 1.0)
        return 0;
      v48 = (int8x16_t)vmulq_f32((float32x4_t)v82, (float32x4_t)v47);
      v49 = vadd_f32(vpadd_f32(*(float32x2_t *)v48.i8, *(float32x2_t *)v48.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v48, v48, 8uLL));
      if (v49.f32[0] > 0.0)
      {
        v50 = (int8x16_t)vmulq_f32((float32x4_t)v82, v64);
        v51 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v50, v50, 8uLL), vpadd_f32(*(float32x2_t *)v50.i8, *(float32x2_t *)v50.i8));
        if (v51.f32[0] >= -1.4211e-14)
          return 0;
        v52 = v76;
        v52.var0.var0[0] = v76.var0.var0[0] - vdiv_f32(v49, v51).f32[0];
        var1 = (btVector3)vaddq_f32((float32x4_t)a2->var1, vmulq_n_f32(vsubq_f32((float32x4_t)a3->var1, (float32x4_t)a2->var1), v52.var0.var0[0]));
        v76 = v52;
        v74 = (btVector3)vaddq_f32((float32x4_t)a4->var1, vmulq_n_f32(vsubq_f32((float32x4_t)a5->var1, (float32x4_t)a4->var1), v52.var0.var0[0]));
        v60 = v82;
      }
      if ((btVoronoiSimplexSolver::inSimplex(this[1], (float32x4_t *)&v79) & 1) == 0)
        btVoronoiSimplexSolver::addVertex((btVector3 *)this[1], &v79, &v81, (__n128 *)&v80);
      btVoronoiSimplexSolver::closest((float32x4_t *)this[1], &v82);
      if (!v53)
        break;
      v54 = (int8x16_t)vmulq_f32((float32x4_t)v82, (float32x4_t)v82);
    }
    while (vadd_f32(vpadd_f32(*(float32x2_t *)v54.i8, *(float32x2_t *)v54.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v54, v54, 8uLL)).f32[0] > 0.0001);
  }
  a6[11].i32[0] = LODWORD(v76.var0.var0[0]);
  v55 = (int8x16_t)vmulq_f32((float32x4_t)v60, (float32x4_t)v60);
  v56 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v55, v55, 8uLL), vpadd_f32(*(float32x2_t *)v55.i8, *(float32x2_t *)v55.i8)).f32[0];
  v57 = 0uLL;
  if (v56 >= 1.4211e-14)
    v57 = vmulq_n_f32((float32x4_t)v60, 1.0 / sqrtf(v56));
  a6[9] = v57;
  v58 = (int8x16_t)vmulq_f32(v57, v64);
  if (vadd_f32(vpadd_f32(*(float32x2_t *)v58.i8, *(float32x2_t *)v58.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v58, v58, 8uLL)).f32[0] >= (float)-a6[12].f32[0])return 0;
  btVoronoiSimplexSolver::compute_points((float32x4_t *)this[1], &v78, &v77);
  a6[10] = (float32x4_t)v77;
  return 1;
}

void btSubsimplexConvexCast::~btSubsimplexConvexCast(btSubsimplexConvexCast *this)
{
  C3DSceneSourcePerformConsistencyCheck(this);
  JUMPOUT(0x1DF0D41C0);
}

__n128 btVoronoiSimplexSolver::reduceVertices(uint64_t a1, _BYTE *a2)
{
  unsigned int v2;
  uint64_t v3;
  __n128 result;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;

  v2 = *(_DWORD *)a1;
  if (*(int *)a1 >= 4)
  {
    if ((*a2 & 8) == 0)
    {
      *(_DWORD *)a1 = --v2;
      v3 = a1 + 16 * v2;
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(v3 + 16);
      *(_OWORD *)(a1 + 144) = *(_OWORD *)(v3 + 96);
      result = *(__n128 *)(v3 + 176);
      *(__n128 *)(a1 + 224) = result;
    }
    goto LABEL_5;
  }
  if (v2 == 3)
  {
LABEL_5:
    if ((*a2 & 4) == 0)
    {
      *(_DWORD *)a1 = --v2;
      v5 = a1 + 16 * v2;
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(v5 + 16);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(v5 + 96);
      result = *(__n128 *)(v5 + 176);
      *(__n128 *)(a1 + 208) = result;
    }
    goto LABEL_9;
  }
  if ((int)v2 < 2)
  {
    if (v2 != 1)
      return result;
    goto LABEL_11;
  }
  v2 = 2;
LABEL_9:
  if ((*a2 & 2) == 0)
  {
    *(_DWORD *)a1 = --v2;
    v6 = a1 + 16 * v2;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(v6 + 16);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(v6 + 96);
    result = *(__n128 *)(v6 + 176);
    *(__n128 *)(a1 + 192) = result;
  }
LABEL_11:
  if ((*a2 & 1) == 0)
  {
    v7 = v2 - 1;
    *(_DWORD *)a1 = v7;
    v8 = *(_OWORD *)(a1 + 96 + 16 * v7);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a1 + 16 + 16 * v7);
    *(_OWORD *)(a1 + 96) = v8;
    result = *(__n128 *)(a1 + 176 + 16 * v7);
    *(__n128 *)(a1 + 176) = result;
  }
  return result;
}

double btVoronoiSimplexSolver::reset(btVoronoiSimplexSolver *this)
{
  double result;

  *((_BYTE *)this + 324) = 0;
  *(_DWORD *)this = 0;
  *((_BYTE *)this + 384) = 1;
  result = 5.72459157e141;
  *((_OWORD *)this + 19) = xmmword_1DD02C880;
  *((_BYTE *)this + 372) = 0;
  *(_QWORD *)((char *)this + 364) = 0;
  *(_QWORD *)((char *)this + 356) = 0;
  *((_BYTE *)this + 352) &= 0xF0u;
  return result;
}

__n128 btVoronoiSimplexSolver::addVertex(btVector3 *this, const btVector3 *a2, const btVector3 *a3, __n128 *a4)
{
  __n128 result;

  this[19] = *a2;
  LOBYTE(this[24].var0.var0[0]) = 1;
  this[SLODWORD(this->var0.var0[0]) + 1] = *a2;
  this[SLODWORD(this->var0.var0[0]) + 6] = *a3;
  result = *a4;
  this[LODWORD(this->var0.var0[0])++ + 11] = *(btVector3 *)a4;
  return result;
}

BOOL btVoronoiSimplexSolver::updateClosestVectorAndPoints(float32x4_t *this)
{
  __int8 v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  int v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  int8x16_t v10;
  float32x2_t v11;
  int8x16_t v12;
  float32x2_t v13;
  float v14;
  char v15;
  float v16;
  float32x4_t v17;
  float v18;
  float32x4_t v19;
  float32x4_t v20;
  float v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float v28;
  float32x4_t v29;
  float v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v50;

  if (this[24].i8[0])
  {
    *(uint64_t *)((char *)this[22].i64 + 4) = 0;
    *(uint64_t *)((char *)&this[22].i64[1] + 4) = 0;
    this[23].i8[4] = 0;
    v2 = this[22].i8[0] & 0xF0;
    this[22].i8[0] = v2;
    this[24].i8[0] = 0;
    switch(this->i32[0])
    {
      case 1:
        v3 = this[6];
        v4 = this[11];
        this[16] = v3;
        this[17] = v4;
        v5 = vsubq_f32(v3, v4);
        v5.i32[3] = 0;
        this[18] = v5;
        this[23].i8[4] = 0;
        *(float32x4_t *)((char *)&this[22] + 4) = (float32x4_t)xmmword_1DD007970;
        v6 = 1;
        goto LABEL_24;
      case 2:
        v7 = this[1];
        v8 = vsubq_f32((float32x4_t)0, v7);
        v8.i32[3] = 0;
        v9 = vsubq_f32(this[2], v7);
        v9.i32[3] = 0;
        v10 = (int8x16_t)vmulq_f32(v8, v9);
        v11 = vadd_f32(vpadd_f32(*(float32x2_t *)v10.i8, *(float32x2_t *)v10.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL));
        if (v11.f32[0] <= 0.0)
        {
          v14 = 0.0;
          v15 = 1;
        }
        else
        {
          v12 = (int8x16_t)vmulq_f32(v9, v9);
          v13 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL), vpadd_f32(*(float32x2_t *)v12.i8, *(float32x2_t *)v12.i8));
          if ((vcgt_f32(v13, v11).u8[0] & 1) != 0)
          {
            LODWORD(v14) = vdiv_f32(v11, v13).u32[0];
            v15 = 3;
          }
          else
          {
            v14 = 1.0;
            v15 = 2;
          }
        }
        this[22].i8[0] = v2 | v15;
        this[22].f32[1] = 1.0 - v14;
        this[22].f32[2] = v14;
        *(uint64_t *)((char *)&this[22].i64[1] + 4) = 0;
        v42 = this[6];
        v43 = vmulq_n_f32(vsubq_f32(this[7], v42), v14);
        v43.i32[3] = 0;
        v44 = vaddq_f32(v42, v43);
        v45 = this[11];
        v46 = vmulq_n_f32(vsubq_f32(this[12], v45), v14);
        v46.i32[3] = 0;
        v47 = vaddq_f32(v45, v46);
        this[16] = v44;
        this[17] = v47;
        v48 = vsubq_f32(v44, v47);
        v48.i32[3] = 0;
        this[18] = v48;
        btVoronoiSimplexSolver::reduceVertices((uint64_t)this, &this[22]);
        v6 = 0;
        if (this[22].f32[1] < 0.0)
          goto LABEL_24;
        if (this[22].f32[2] < 0.0)
          goto LABEL_22;
        v41 = this[22].f32[3];
        goto LABEL_21;
      case 3:
        v50 = 0uLL;
        btVoronoiSimplexSolver::closestPtPointTriangle((uint64_t)this, &v50, this + 1, this + 2, this + 3, this + 21);
        v16 = this[22].f32[1];
        v17 = vmulq_n_f32(this[6], v16);
        v17.i32[3] = 0;
        v18 = this[22].f32[2];
        v19 = vmulq_n_f32(this[7], v18);
        v19.i32[3] = 0;
        v20 = vaddq_f32(v17, v19);
        v21 = this[22].f32[3];
        v22 = vmulq_n_f32(this[8], v21);
        v22.i32[3] = 0;
        v23 = vaddq_f32(v20, v22);
        v24 = vmulq_n_f32(this[11], v16);
        v24.i32[3] = 0;
        v25 = vmulq_n_f32(this[12], v18);
        v25.i32[3] = 0;
        v26 = vaddq_f32(v24, v25);
        v27 = vmulq_n_f32(this[13], v21);
        goto LABEL_11;
      case 4:
        v50 = 0uLL;
        if (btVoronoiSimplexSolver::closestPtPointTetrahedron((uint64_t)this, &v50, this + 1, this + 2, this + 3, this + 4, (uint64_t)&this[21]))
        {
          v28 = this[22].f32[1];
          v29 = vmulq_n_f32(this[6], v28);
          v29.i32[3] = 0;
          v30 = this[22].f32[2];
          v31 = vmulq_n_f32(this[7], v30);
          v31.i32[3] = 0;
          v32 = vaddq_f32(v29, v31);
          v31.i32[0] = this[22].i32[3];
          v33 = vmulq_n_f32(this[8], v31.f32[0]);
          v33.i32[3] = 0;
          v34 = vaddq_f32(v32, v33);
          v33.i32[0] = this[23].i32[0];
          v35 = vmulq_n_f32(this[9], v33.f32[0]);
          v35.i32[3] = 0;
          v23 = vaddq_f32(v34, v35);
          v36 = vmulq_n_f32(this[11], v28);
          v37 = vmulq_n_f32(this[12], v30);
          v38 = vmulq_n_f32(this[13], v31.f32[0]);
          v36.i32[3] = 0;
          v37.i32[3] = 0;
          v38.i32[3] = 0;
          v26 = vaddq_f32(vaddq_f32(v36, v37), v38);
          v27 = vmulq_n_f32(this[14], v33.f32[0]);
LABEL_11:
          v27.i32[3] = 0;
          v39 = vaddq_f32(v26, v27);
          this[16] = v23;
          this[17] = v39;
          v40 = vsubq_f32(v23, v39);
          v40.i32[3] = 0;
          this[18] = v40;
          btVoronoiSimplexSolver::reduceVertices((uint64_t)this, &this[22]);
          v6 = 0;
          if (this[22].f32[1] >= 0.0)
          {
            if (this[22].f32[2] < 0.0)
              goto LABEL_22;
            v41 = this[22].f32[3];
LABEL_21:
            if (v41 >= 0.0)
              v6 = this[23].f32[0] >= 0.0;
            else
LABEL_22:
              v6 = 0;
          }
LABEL_24:
          this[20].i8[4] = v6;
        }
        else if (this[23].i8[4])
        {
LABEL_16:
          v6 = 0;
          this[20].i8[4] = 0;
        }
        else
        {
          v6 = 1;
          this[20].i8[4] = 1;
          this[18].i64[0] = 0;
          this[18].i64[1] = 0;
        }
        break;
      default:
        goto LABEL_16;
    }
  }
  else
  {
    v6 = this[20].u8[4];
  }
  return v6 != 0;
}

uint64_t btVoronoiSimplexSolver::closestPtPointTriangle(uint64_t a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5, float32x4_t *a6)
{
  __int8 v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  int8x16_t v14;
  float32x2_t v15;
  int8x16_t v16;
  float32x2_t v17;
  float v18;
  float v19;
  float32x4_t v20;
  int8x16_t v21;
  float32x2_t v22;
  int8x16_t v23;
  float32x2_t v24;
  float v25;
  float32x4_t v26;
  float v27;
  float32x4_t v29;
  int8x16_t v30;
  float32x2_t v31;
  int8x16_t v32;
  float32x2_t v33;
  float v34;
  float32x4_t v35;
  float v36;
  float32x2_t v37;
  float32x2_t v38;
  float v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;

  v6 = a6[1].i8[0] & 0xF0;
  a6[1].i8[0] = v6;
  v7 = *a4;
  v8 = *a3;
  v9 = vsubq_f32(*a4, *a3);
  v9.i32[3] = 0;
  v10 = *a5;
  v11 = vsubq_f32(*a5, *a3);
  v11.i32[3] = 0;
  v12 = *a2;
  v13 = vsubq_f32(*a2, *a3);
  v13.i32[3] = 0;
  v14 = (int8x16_t)vmulq_f32(v9, v13);
  v15 = vadd_f32(vpadd_f32(*(float32x2_t *)v14.i8, *(float32x2_t *)v14.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL));
  v16 = (int8x16_t)vmulq_f32(v11, v13);
  v17 = vadd_f32(vpadd_f32(*(float32x2_t *)v16.i8, *(float32x2_t *)v16.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL));
  if (v15.f32[0] <= 0.0 && v17.f32[0] <= 0.0)
  {
    *a6 = v8;
    a6[1].i8[0] = v6 | 1;
    v18 = 0.0;
    v19 = 1.0;
LABEL_11:
    v27 = 0.0;
    goto LABEL_12;
  }
  v20 = vsubq_f32(v12, v7);
  v20.i32[3] = 0;
  v21 = (int8x16_t)vmulq_f32(v9, v20);
  v22 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL), vpadd_f32(*(float32x2_t *)v21.i8, *(float32x2_t *)v21.i8));
  v23 = (int8x16_t)vmulq_f32(v11, v20);
  v24 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL), vpadd_f32(*(float32x2_t *)v23.i8, *(float32x2_t *)v23.i8));
  if (v22.f32[0] >= 0.0 && (vmvn_s8((int8x8_t)vcge_f32(v22, v24)).u8[0] & 1) == 0)
  {
    *a6 = v7;
    a6[1].i8[0] = v6 | 2;
    v18 = 1.0;
    v19 = 0.0;
    goto LABEL_11;
  }
  v25 = (float)(v15.f32[0] * v24.f32[0]) - (float)(v22.f32[0] * v17.f32[0]);
  if (v22.f32[0] <= 0.0 && v15.f32[0] >= 0.0 && v25 <= 0.0)
  {
    v18 = vdiv_f32(v15, vsub_f32(v15, v22)).f32[0];
    v26 = vmulq_n_f32(v9, v18);
    v26.i32[3] = 0;
    *a6 = vaddq_f32(v8, v26);
    a6[1].i8[0] = v6 | 3;
    v19 = 1.0 - v18;
    goto LABEL_11;
  }
  v29 = vsubq_f32(v12, v10);
  v29.i32[3] = 0;
  v30 = (int8x16_t)vmulq_f32(v9, v29);
  v31 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL), vpadd_f32(*(float32x2_t *)v30.i8, *(float32x2_t *)v30.i8));
  v32 = (int8x16_t)vmulq_f32(v11, v29);
  v33 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL), vpadd_f32(*(float32x2_t *)v32.i8, *(float32x2_t *)v32.i8));
  if (v33.f32[0] >= 0.0 && (vmvn_s8((int8x8_t)vcge_f32(v33, v31)).u8[0] & 1) == 0)
  {
    *a6 = v10;
    a6[1].i8[0] = v6 | 4;
    v27 = 1.0;
    v19 = 0.0;
LABEL_20:
    v18 = 0.0;
    goto LABEL_12;
  }
  v34 = (float)(v31.f32[0] * v17.f32[0]) - (float)(v15.f32[0] * v33.f32[0]);
  if (v33.f32[0] <= 0.0 && v34 <= 0.0 && v17.f32[0] >= 0.0)
  {
    v27 = vdiv_f32(v17, vsub_f32(v17, v33)).f32[0];
    v35 = vmulq_n_f32(v11, v27);
    v35.i32[3] = 0;
    *a6 = vaddq_f32(v8, v35);
    a6[1].i8[0] = v6 | 5;
    v19 = 1.0 - v27;
    goto LABEL_20;
  }
  v36 = (float)(v22.f32[0] * v33.f32[0]) - (float)(v31.f32[0] * v24.f32[0]);
  if (v36 <= 0.0 && (v37 = vsub_f32(v24, v22), v37.f32[0] >= 0.0) && (v38 = vsub_f32(v31, v33), v38.f32[0] >= 0.0))
  {
    v27 = vdiv_f32(v37, vadd_f32(v37, v38)).f32[0];
    v42 = vmulq_n_f32(vsubq_f32(v10, v7), v27);
    v42.i32[3] = 0;
    *a6 = vaddq_f32(v7, v42);
    a6[1].i8[0] = v6 | 6;
    v18 = 1.0 - v27;
    v19 = 0.0;
  }
  else
  {
    v39 = 1.0 / (float)(v25 + (float)(v36 + v34));
    v18 = v34 * v39;
    v27 = v25 * v39;
    v40 = vmulq_n_f32(v9, v18);
    v40.i32[3] = 0;
    v41 = vmulq_n_f32(v11, v27);
    v41.i32[3] = 0;
    *a6 = vaddq_f32(vaddq_f32(v8, v40), v41);
    a6[1].i8[0] = v6 | 7;
    v19 = (float)(1.0 - v18) - v27;
  }
LABEL_12:
  a6[1].f32[1] = v19;
  a6[1].f32[2] = v18;
  a6[1].f32[3] = v27;
  a6[2].i32[0] = 0;
  return 1;
}

uint64_t btVoronoiSimplexSolver::closestPtPointTetrahedron(uint64_t a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5, float32x4_t *a6, uint64_t a7)
{
  char v8;
  float32x4_t v9;
  int8x8_t v10;
  float32x4_t v11;
  int8x8_t v12;
  float32x4_t v13;
  float32x4_t v14;
  int8x16_t v15;
  float32x4_t v16;
  float32x4_t v17;
  int8x8_t v18;
  int8x16_t v19;
  int32x2_t v20;
  float32x4_t v21;
  int8x16_t v22;
  float32x4_t v23;
  int8x16_t v24;
  int32x2_t v25;
  int8x16_t v26;
  float32x4_t v27;
  int8x16_t v28;
  float32x2_t v29;
  float32x4_t v30;
  int8x8_t v31;
  float32x4_t v32;
  float32x4_t v33;
  int8x16_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x2_t v37;
  int8x16_t v38;
  float32x2_t v39;
  float32x4_t v40;
  uint64_t result;
  float32x4_t v47;
  int8x16_t v48;
  float v49;
  float32x4_t v50;
  int8x16_t v51;
  float v52;
  int8x16_t v53;
  float v54;
  int8x16_t v55;
  float v56;
  float32x4_t v57;
  int8x16_t v58;
  float v59;
  float v60;
  int v61;
  float32x4_t v62;
  int8x16_t v63;
  float v64;
  float v65;
  float v66;
  float32x4_t v67;
  int8x16_t v68;
  float v69;
  int v70;
  int v71;
  float32x4_t v72;
  int8x16_t v73;
  int v74;
  float32x4_t v75;
  float v76;
  float v77;
  float v78;
  float32x4_t v79;
  char v80;
  _BYTE v81[12];
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  v80 = 0;
  *(float32x4_t *)a7 = *a2;
  v8 = *(_BYTE *)(a7 + 16);
  *(_BYTE *)(a7 + 16) = v8 | 0xF;
  v9 = vsubq_f32(*a4, *a3);
  v10 = (int8x8_t)vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL).u64[0];
  v9.i32[3] = 0;
  v11 = vsubq_f32(*a5, *a3);
  v12 = (int8x8_t)vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL).u64[0];
  v11.i32[3] = 0;
  *(int8x8_t *)v13.f32 = vext_s8(*(int8x8_t *)v9.f32, v10, 4uLL);
  v13.i64[1] = v9.i64[0];
  *(int8x8_t *)v14.f32 = vext_s8(*(int8x8_t *)v11.f32, v12, 4uLL);
  v14.i64[1] = v11.i64[0];
  v15 = (int8x16_t)vsubq_f32(vmulq_f32(v14, v9), vmulq_f32(v13, v11));
  v16.i64[0] = vextq_s8(v15, v15, 4uLL).u64[0];
  v16.i64[1] = v15.u32[0];
  v17 = vsubq_f32(*a6, *a3);
  v18 = (int8x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).u64[0];
  v17.i32[3] = 0;
  v19 = (int8x16_t)vmulq_f32(v17, v16);
  v20 = (int32x2_t)vadd_f32(vpadd_f32(*(float32x2_t *)v19.i8, *(float32x2_t *)v19.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL));
  *(int8x8_t *)v21.f32 = vext_s8(*(int8x8_t *)v17.f32, v18, 4uLL);
  v21.i64[1] = v17.i64[0];
  v22 = (int8x16_t)vsubq_f32(vmulq_f32(v21, v11), vmulq_f32(v14, v17));
  v23.i64[0] = vextq_s8(v22, v22, 4uLL).u64[0];
  v23.i64[1] = v22.u32[0];
  v24 = (int8x16_t)vmulq_f32(v9, v23);
  v25 = (int32x2_t)vadd_f32(vpadd_f32(*(float32x2_t *)v24.i8, *(float32x2_t *)v24.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL));
  v26 = (int8x16_t)vsubq_f32(vmulq_f32(v13, v17), vmulq_f32(v21, v9));
  v27.i64[0] = vextq_s8(v26, v26, 4uLL).u64[0];
  v27.i64[1] = v26.u32[0];
  v28 = (int8x16_t)vmulq_f32(v11, v27);
  v29 = vpadd_f32(*(float32x2_t *)v28.i8, *(float32x2_t *)v28.i8);
  v30 = vsubq_f32(*a6, *a4);
  v31 = (int8x8_t)vextq_s8((int8x16_t)v30, (int8x16_t)v30, 8uLL).u64[0];
  v30.i32[3] = 0;
  v32 = vsubq_f32(*a5, *a4);
  v17.i64[0] = vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL).u64[0];
  v32.i32[3] = 0;
  *(int8x8_t *)v33.f32 = vext_s8(*(int8x8_t *)v30.f32, v31, 4uLL);
  v33.i64[1] = v30.i64[0];
  *(int8x8_t *)v17.f32 = vext_s8(*(int8x8_t *)v32.f32, *(int8x8_t *)v17.f32, 4uLL);
  v17.i64[1] = v32.i64[0];
  v34 = (int8x16_t)vsubq_f32(vmulq_f32(v17, v30), vmulq_f32(v33, v32));
  v35.i64[0] = vextq_s8(v34, v34, 4uLL).u64[0];
  v35.i64[1] = v34.u32[0];
  v34.i64[0] = vextq_s8(v28, v28, 8uLL).u64[0];
  v36 = vsubq_f32(*a3, *a4);
  v36.i32[3] = 0;
  v37 = vadd_f32(v29, *(float32x2_t *)v34.i8);
  v38 = (int8x16_t)vmulq_f32(v36, v35);
  v39 = vadd_f32(vpadd_f32(*(float32x2_t *)v38.i8, *(float32x2_t *)v38.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v38, v38, 8uLL));
  *(int32x2_t *)v40.f32 = vzip1_s32(v25, v20);
  v40.i64[1] = __PAIR64__(v39.u32[0], v37.u32[0]);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vcgtq_f32((float32x4_t)vdupq_n_s32(0x322BCC76u), vmulq_f32(v40, v40)))) & 1) != 0)
  {
    result = 0;
    *(_BYTE *)(a7 + 36) = 1;
  }
  else
  {
    v47 = vsubq_f32(*a2, *a4);
    v47.i32[3] = 0;
    v48 = (int8x16_t)vmulq_f32(v47, v35);
    LODWORD(v49) = vmul_f32(v39, vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v48, v48, 8uLL), vpadd_f32(*(float32x2_t *)v48.i8, *(float32x2_t *)v48.i8))).u32[0];
    v50 = vsubq_f32(*a2, *a3);
    v50.i32[3] = 0;
    v51 = (int8x16_t)vmulq_f32(v50, v27);
    LODWORD(v52) = vmul_f32(v37, vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v51, v51, 8uLL), vpadd_f32(*(float32x2_t *)v51.i8, *(float32x2_t *)v51.i8))).u32[0];
    v53 = (int8x16_t)vmulq_f32(v50, v23);
    LODWORD(v54) = vmul_f32((float32x2_t)v25, vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v53, v53, 8uLL), vpadd_f32(*(float32x2_t *)v53.i8, *(float32x2_t *)v53.i8))).u32[0];
    v55 = (int8x16_t)vmulq_f32(v50, v16);
    v56 = vmul_f32((float32x2_t)v20, vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v55, v55, 8uLL), vpadd_f32(*(float32x2_t *)v55.i8, *(float32x2_t *)v55.i8))).f32[0];
    if (v56 < 0.0 || v54 < 0.0 || v52 < 0.0 || v49 < 0.0)
    {
      v77 = v52;
      v78 = v49;
      if (v56 >= 0.0)
      {
        v60 = 3.4028e38;
      }
      else
      {
        v75 = *a2;
        v76 = v54;
        a1 = btVoronoiSimplexSolver::closestPtPointTriangle(a1, a2, a3, a4, a5, &v79);
        v54 = v76;
        v57 = vsubq_f32(v79, v75);
        v57.i32[3] = 0;
        v58 = (int8x16_t)vmulq_f32(v57, v57);
        v59 = vadd_f32(vpadd_f32(*(float32x2_t *)v58.i8, *(float32x2_t *)v58.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v58, v58, 8uLL)).f32[0];
        v60 = 3.4028e38;
        if (v59 < 3.4028e38)
        {
          *(float32x4_t *)a7 = v79;
          *(_BYTE *)(a7 + 16) = v80 & 7 | v8 & 0xF0;
          v61 = *(_DWORD *)&v81[8];
          *(_QWORD *)(a7 + 20) = *(_QWORD *)v81;
          *(_DWORD *)(a7 + 28) = v61;
          *(_DWORD *)(a7 + 32) = 0;
          v60 = v59;
        }
      }
      if (v54 >= 0.0)
      {
        v65 = v77;
      }
      else
      {
        a1 = btVoronoiSimplexSolver::closestPtPointTriangle(a1, a2, a3, a5, a6, &v79);
        v62 = vsubq_f32(v79, *a2);
        v62.i32[3] = 0;
        v63 = (int8x16_t)vmulq_f32(v62, v62);
        v64 = vadd_f32(vpadd_f32(*(float32x2_t *)v63.i8, *(float32x2_t *)v63.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v63, v63, 8uLL)).f32[0];
        v65 = v77;
        if (v64 < v60)
        {
          *(float32x4_t *)a7 = v79;
          *(_BYTE *)(a7 + 16) = (2 * v80) & 0xC | v80 & 1 | *(_BYTE *)(a7 + 16) & 0xF0;
          *(_DWORD *)(a7 + 20) = *(_DWORD *)v81;
          *(_DWORD *)(a7 + 24) = 0;
          *(_QWORD *)(a7 + 28) = *(_QWORD *)&v81[4];
          v60 = v64;
        }
      }
      if (v65 >= 0.0)
      {
        v66 = v78;
      }
      else
      {
        a1 = btVoronoiSimplexSolver::closestPtPointTriangle(a1, a2, a3, a6, a4, &v79);
        v66 = v78;
        v67 = vsubq_f32(v79, *a2);
        v67.i32[3] = 0;
        v68 = (int8x16_t)vmulq_f32(v67, v67);
        v69 = vadd_f32(vpadd_f32(*(float32x2_t *)v68.i8, *(float32x2_t *)v68.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v68, v68, 8uLL)).f32[0];
        if (v69 < v60)
        {
          *(float32x4_t *)a7 = v79;
          *(_BYTE *)(a7 + 16) = v80 & 1 | (2 * ((v80 & 4) != 0)) & 0xF7 | (8 * ((v80 & 2) != 0)) | *(_BYTE *)(a7 + 16) & 0xF0;
          v71 = *(_DWORD *)&v81[4];
          v70 = *(_DWORD *)&v81[8];
          *(_DWORD *)(a7 + 20) = *(_DWORD *)v81;
          *(_DWORD *)(a7 + 24) = v70;
          *(_DWORD *)(a7 + 28) = 0;
          *(_DWORD *)(a7 + 32) = v71;
          v60 = v69;
        }
      }
      if (v66 < 0.0)
      {
        btVoronoiSimplexSolver::closestPtPointTriangle(a1, a2, a4, a6, a5, &v79);
        v72 = vsubq_f32(v79, *a2);
        v72.i32[3] = 0;
        v73 = (int8x16_t)vmulq_f32(v72, v72);
        if (vadd_f32(vpadd_f32(*(float32x2_t *)v73.i8, *(float32x2_t *)v73.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v73, v73, 8uLL)).f32[0] < v60)
        {
          *(float32x4_t *)a7 = v79;
          *(_BYTE *)(a7 + 16) = v80 & 4 | (2 * (v80 & 1)) & 0xF7 | (8 * ((v80 & 2) != 0)) | *(_BYTE *)(a7 + 16) & 0xF0;
          v74 = *(_DWORD *)v81;
          *(_DWORD *)(a7 + 20) = 0;
          *(_DWORD *)(a7 + 24) = v74;
          *(int32x2_t *)(a7 + 28) = vrev64_s32(*(int32x2_t *)&v81[4]);
        }
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

__n128 btVoronoiSimplexSolver::closest(float32x4_t *this, btVector3 *a2)
{
  __n128 result;

  btVoronoiSimplexSolver::updateClosestVectorAndPoints(this);
  result = (__n128)this[18];
  *a2 = (btVector3)result;
  return result;
}

uint64_t btVoronoiSimplexSolver::inSimplex(btVoronoiSimplexSolver *this, float32x4_t *a2)
{
  uint64_t v2;
  char v3;
  float v4;
  float32x4_t *v5;
  float32x4_t v6;
  float32x4_t v7;
  int8x16_t v8;

  v2 = *(unsigned int *)this;
  if ((int)v2 <= 0)
  {
    v3 = 0;
    v4 = a2->f32[3];
  }
  else
  {
    v3 = 0;
    LODWORD(v4) = HIDWORD(*(unsigned __int128 *)a2);
    v5 = (float32x4_t *)((char *)this + 16);
    do
    {
      v6 = *v5++;
      v7 = vsubq_f32(*a2, v6);
      v7.i32[3] = 0;
      v8 = (int8x16_t)vmulq_f32(v7, v7);
      v3 |= vadd_f32(vpadd_f32(*(float32x2_t *)v8.i8, *(float32x2_t *)v8.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL)).f32[0] <= *((float *)this + 80);
      --v2;
    }
    while (v2);
  }
  if (v4 == *((float *)this + 79) && a2->f32[2] == *((float *)this + 78) && a2->f32[1] == *((float *)this + 77))
    v3 |= a2->f32[0] == *((float *)this + 76);
  return v3 & 1;
}

__n128 btVoronoiSimplexSolver::compute_points(float32x4_t *this, btVector3 *a2, btVector3 *a3)
{
  __n128 result;

  btVoronoiSimplexSolver::updateClosestVectorAndPoints(this);
  *a2 = (btVector3)this[16];
  result = (__n128)this[17];
  *a3 = (btVector3)result;
  return result;
}

double btKinematicCharacterController::btKinematicCharacterController(uint64_t a1, uint64_t a2, uint64_t a3, int a4, float a5)
{
  double result;

  *(_QWORD *)a1 = off_1EA597F70;
  *(_BYTE *)(a1 + 184) = 1;
  *(_QWORD *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 164) = 0;
  *(_DWORD *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 72) = 1017370378;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(float *)(a1 + 68) = a5;
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = a3;
  *(_DWORD *)(a1 + 228) = 0;
  *(_DWORD *)(a1 + 232) = a4;
  *(_OWORD *)(a1 + 32) = xmmword_1DD02CE50;
  *(_DWORD *)(a1 + 224) = 16842752;
  result = 0.000320729624;
  *(_OWORD *)(a1 + 52) = xmmword_1DD02CE60;
  return result;
}

void btKinematicCharacterController::~btKinematicCharacterController(btKinematicCharacterController *this)
{
  *(_QWORD *)this = off_1EA597F70;
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)this + 160);
}

void btKinematicCharacterController::~btKinematicCharacterController(void **this)
{
  *this = off_1EA597F70;
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)(this + 20));
  btAlignedFreeInternal(this);
}

uint64_t btKinematicCharacterController::recoverFromPenetration(btKinematicCharacterController *this, btCollisionWorld *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  float v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float32x4_t *v15;
  int v16;
  uint64_t v17;
  float v18;
  float32x4_t *v19;
  float v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v24;
  _BYTE v25[16];
  _BYTE v26[16];

  (*(void (**)(_QWORD, uint64_t, _BYTE *, _BYTE *))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3), *((_QWORD *)this + 2) + 16, v26, v25);
  (*(void (**)(_QWORD, _QWORD, _BYTE *, _BYTE *, _QWORD))(**((_QWORD **)a2 + 12) + 32))(*((_QWORD *)a2 + 12), *(_QWORD *)(*((_QWORD *)this + 2) + 200), v26, v25, *((_QWORD *)a2 + 5));
  (*(void (**)(_QWORD, _QWORD, char *, _QWORD))(**((_QWORD **)a2 + 5) + 64))(*((_QWORD *)a2 + 5), *(_QWORD *)(*((_QWORD *)this + 2) + 328), (char *)a2 + 48, *((_QWORD *)a2 + 5));
  v4 = *((_QWORD *)this + 2);
  *((_OWORD *)this + 7) = *(_OWORD *)(v4 + 64);
  if ((*(int (**)(_QWORD))(**(_QWORD **)(v4 + 328) + 72))(*(_QWORD *)(v4 + 328)) < 1)
  {
    v6 = 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    v7 = 0.0;
    v24 = (float32x4_t)vdupq_n_s32(0x3E4CCCCDu);
    do
    {
      v8 = *((int *)this + 41);
      if ((v8 & 0x80000000) != 0)
      {
        if ((*((_DWORD *)this + 42) & 0x80000000) != 0)
        {
          v9 = (void **)*((_QWORD *)this + 22);
          if (v9 && *((_BYTE *)this + 184))
            btAlignedFreeInternal(v9);
          *((_BYTE *)this + 184) = 1;
          *((_QWORD *)this + 22) = 0;
          *((_DWORD *)this + 42) = 0;
        }
        do
          *(_QWORD *)(*((_QWORD *)this + 22) + 8 * v8++) = 0;
        while ((_DWORD)v8);
      }
      *((_DWORD *)this + 41) = 0;
      v10 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 2) + 328)
                                                                      + 56))(*(_QWORD *)(*((_QWORD *)this + 2) + 328))
                                  + 16)
                      + 32 * v5
                      + 16);
      if (v10)
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v10 + 32))(v10, (char *)this + 160);
      v11 = *((unsigned int *)this + 41);
      v12 = *((_QWORD *)this + 2);
      if ((int)v11 >= 1)
      {
        v13 = 0;
        v14 = *((_QWORD *)this + 22);
        do
        {
          v15 = *(float32x4_t **)(v14 + 8 * v13);
          v16 = v15[50].i32[0];
          if (v16 >= 1)
          {
            v17 = 0;
            if (v15[49].i64[0] == v12)
              v18 = -1.0;
            else
              v18 = 1.0;
            v19 = v15 + 5;
            do
            {
              v20 = v19[1].f32[0];
              if (v20 < 0.0)
              {
                if (v20 < v7)
                {
                  v21 = vmulq_n_f32(*v19, v18);
                  v21.i32[3] = 0;
                  *((float32x4_t *)this + 13) = v21;
                  v7 = v20;
                }
                v22 = vmulq_f32(vmulq_n_f32(vmulq_n_f32(*v19, v18), v20), v24);
                v22.i32[3] = 0;
                *((float32x4_t *)this + 7) = vaddq_f32(*((float32x4_t *)this + 7), v22);
                v16 = v15[50].i32[0];
                v6 = 1;
              }
              ++v17;
              v19 += 12;
            }
            while (v17 < v16);
          }
          ++v13;
        }
        while (v13 != v11);
      }
      ++v5;
    }
    while (v5 < (*(int (**)(_QWORD))(**(_QWORD **)(v12 + 328) + 72))(*(_QWORD *)(v12 + 328)));
  }
  *(_OWORD *)(*((_QWORD *)this + 2) + 64) = *((_OWORD *)this + 7);
  return v6 & 1;
}

int8x16_t btKinematicCharacterController::stepUp(float32x4_t *this, btCollisionWorld *a2)
{
  int *UpAxisDirections;
  float32x4_t v5;
  uint64_t v6;
  btKinematicCharacterController *v7;
  float v8;
  float32x4_t v9;
  uint64_t v10;
  int8x16_t v11;
  int8x16_t v12;
  uint64_t v13;
  btCollisionShape *v14;
  uint64_t v15;
  btKinematicCharacterController *v16;
  int8x16_t result;
  float v18;
  _OWORD v19[4];
  _OWORD v20[4];
  void (**v21)(btKinematicClosestNotMeConvexResultCallback *__hidden);
  float v22;
  __int128 v23;
  uint64_t v24;
  int8x16_t v25;
  int8x16_t v26;
  float32x4_t v27;
  uint64_t v28;
  uint64_t v29;
  int8x16_t v30;
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  UpAxisDirections = btKinematicCharacterController::getUpAxisDirections((btKinematicCharacterController *)this);
  v5 = vmulq_n_f32(*(float32x4_t *)&btKinematicCharacterController::getUpAxisDirections(void)::sUpAxisDirection[4 * this[14].i32[2]], this[4].f32[1] + fmaxf(this[2].f32[1], 0.0));
  v5.i32[3] = 0;
  this[9] = vaddq_f32(this[7], v5);
  v20[0] = xmmword_1DD007970;
  v20[1] = xmmword_1DD007920;
  v20[2] = xmmword_1DD007600;
  v19[0] = xmmword_1DD007970;
  v19[1] = xmmword_1DD007920;
  v19[2] = xmmword_1DD007600;
  btKinematicCharacterController::getUpAxisDirections((btKinematicCharacterController *)UpAxisDirections);
  v6 = this[14].i32[2];
  v7 = (btKinematicCharacterController *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)this[1].i64[1] + 96))(this[1].i64[1]);
  v9 = vmulq_n_f32(*(float32x4_t *)&btKinematicCharacterController::getUpAxisDirections(void)::sUpAxisDirection[4 * v6], v8 + this[4].f32[2]);
  v9.i32[3] = 0;
  v20[3] = vaddq_f32(this[7], v9);
  v19[3] = this[9];
  v10 = this[1].i64[0];
  btKinematicCharacterController::getUpAxisDirections(v7);
  v11.i64[0] = 0x8000000080000000;
  v11.i64[1] = 0x8000000080000000;
  v12 = veorq_s8(*(int8x16_t *)&btKinematicCharacterController::getUpAxisDirections(void)::sUpAxisDirection[4 * this[14].i32[2]], v11);
  v22 = 1.0;
  v11.i8[3] = 0;
  v11.i8[7] = 0;
  v11.i8[11] = 0;
  v11.i8[15] = 0;
  v25 = v11;
  v26 = v11;
  v21 = &off_1EA598410;
  v28 = 0;
  v29 = v10;
  v30 = v12;
  v31 = 1060439169;
  v13 = this[1].i64[0];
  v14 = (btCollisionShape *)this[1].i64[1];
  v15 = *(_QWORD *)(v13 + 200);
  v23 = *(_OWORD *)(v15 + 8);
  v24 = *(_QWORD *)(v15 + 24);
  if (this[14].i8[2])
    btGhostObject::convexSweepTest(v13, v14, (uint64_t)v20, (uint64_t)v19, (float *)&v21, *((float *)a2 + 21));
  else
    v16 = (btKinematicCharacterController *)btCollisionWorld::convexSweepTest((uint64_t)a2, v14, (uint64_t)v20, (uint64_t)v19, (float *)&v21, 0.0);
  if (v22 >= 1.0)
  {
    this[8].i32[0] = this[4].i32[1];
    result = (int8x16_t)this[9];
    this[7] = (float32x4_t)result;
  }
  else
  {
    btKinematicCharacterController::getUpAxisDirections(v16);
    result = (int8x16_t)vmulq_f32(v27, *(float32x4_t *)&btKinematicCharacterController::getUpAxisDirections(void)::sUpAxisDirection[4 * this[14].i32[2]]);
    *(float32x2_t *)result.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)result.i8, *(float32x2_t *)result.i8), (float32x2_t)*(_OWORD *)&vextq_s8(result, result, 8uLL));
    if (*(float *)result.i32 > 0.0)
    {
      v18 = v22;
      this[8].f32[0] = this[4].f32[1] * v22;
      result = (int8x16_t)vaddq_f32(this[7], vmulq_n_f32(vsubq_f32(this[9], this[7]), v18));
      this[7] = (float32x4_t)result;
    }
    this[2].i64[0] = 0;
  }
  return result;
}

int *btKinematicCharacterController::getUpAxisDirections(btKinematicCharacterController *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0
  {
    btKinematicCharacterController::getUpAxisDirections(void)::sUpAxisDirection = 1065353216;
    unk_1F03C6EBC = 0;
    unk_1F03C6EB4 = 0;
    dword_1F03C6EC4 = 1065353216;
    qword_1F03C6EC8 = 0;
    unk_1F03C6ED0 = 0;
    qword_1F03C6ED8 = 1065353216;
  }
  return &btKinematicCharacterController::getUpAxisDirections(void)::sUpAxisDirection;
}

float32x4_t btKinematicCharacterController::updateTargetPositionBasedOnCollision(float32x4_t *this, float32x4_t *a2, float a3, float a4)
{
  float32x4_t result;
  float32x4_t v5;
  int8x16_t v6;
  float v7;
  float32x4_t v8;
  float32x4_t v9;
  int8x16_t v10;
  float32x4_t v11;
  int8x16_t v12;
  float32x4_t v13;
  int8x16_t v14;
  float32x4_t v15;

  result = this[7];
  v5 = vsubq_f32(this[9], result);
  v5.i32[3] = 0;
  v6 = (int8x16_t)vmulq_f32(v5, v5);
  v7 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v6.i8, *(float32x2_t *)v6.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)).f32[0]);
  if (v7 > 0.00000011921)
  {
    v8 = *a2;
    this[9] = result;
    if (a4 != 0.0)
    {
      v9 = vmulq_n_f32(v5, 1.0 / v7);
      v10 = (int8x16_t)vmulq_f32(v9, v8);
      *(float *)v10.i32 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL), vpadd_f32(*(float32x2_t *)v10.i8, *(float32x2_t *)v10.i8)).f32[0];
      v11 = vsubq_f32(v9, vmulq_n_f32(v8, *(float *)v10.i32 + *(float *)v10.i32));
      v11.i32[3] = 0;
      v12 = (int8x16_t)vmulq_f32(v11, v11);
      v13 = vmulq_n_f32(v11, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v12.i8, *(float32x2_t *)v12.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL)).f32[0]));
      v14 = (int8x16_t)vmulq_f32(v8, v13);
      v15 = vmulq_n_f32(vsubq_f32(v13, vmulq_n_f32(v8, vadd_f32(vpadd_f32(*(float32x2_t *)v14.i8, *(float32x2_t *)v14.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)).f32[0])), v7 * a4);
      v15.i32[3] = 0;
      result = vaddq_f32(result, v15);
      this[9] = result;
    }
  }
  return result;
}

void btKinematicCharacterController::stepForwardAndStrafe(btKinematicCharacterController *this, btCollisionWorld *a2, float32x4_t *a3)
{
  int8x16_t v5;
  float v6;
  int v7;
  float v8;
  float32x4_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  float32x4_t v17;
  int8x16_t v18;
  float v19;
  int8x16_t v20;
  _OWORD v21[4];
  _OWORD v22[3];
  float32x4_t v23;
  void (**v24)(btKinematicClosestNotMeConvexResultCallback *__hidden);
  float v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  float32x4_t v30[2];
  uint64_t v31;
  uint64_t v32;
  float32x4_t v33;
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  *((float32x4_t *)this + 9) = vaddq_f32(*((float32x4_t *)this + 7), *a3);
  v22[0] = xmmword_1DD007970;
  v22[1] = xmmword_1DD007920;
  v22[2] = xmmword_1DD007600;
  v21[0] = xmmword_1DD007970;
  v21[1] = xmmword_1DD007920;
  v21[2] = xmmword_1DD007600;
  if (*((_BYTE *)this + 192))
  {
    v5 = (int8x16_t)vmulq_f32(*((float32x4_t *)this + 6), *((float32x4_t *)this + 13));
    v6 = vadd_f32(vpadd_f32(*(float32x2_t *)v5.i8, *(float32x2_t *)v5.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL)).f32[0];
    if (v6 > 0.0)
      btKinematicCharacterController::updateTargetPositionBasedOnCollision((float32x4_t *)this, (float32x4_t *)this + 13, v6, 1.0);
  }
  v7 = -11;
  v8 = 1.0;
  do
  {
    if (__CFADD__(v7++, 1))
      break;
    v23 = *((float32x4_t *)this + 7);
    v10 = vsubq_f32(v23, *((float32x4_t *)this + 9));
    v10.i32[3] = 0;
    v21[3] = *((_OWORD *)this + 9);
    v25 = 1.0;
    v28 = 0u;
    v29 = 0u;
    v24 = &off_1EA598410;
    v12 = *((_QWORD *)this + 2);
    v11 = *((_QWORD *)this + 3);
    v31 = 0;
    v32 = v12;
    v33 = v10;
    v34 = 0;
    v13 = *(_QWORD *)(v12 + 200);
    v26 = *(_OWORD *)(v13 + 8);
    v27 = *(_QWORD *)(v13 + 24);
    v14 = (*(float (**)(uint64_t))(*(_QWORD *)v11 + 96))(v11);
    (*(void (**)(_QWORD, float))(**((_QWORD **)this + 3) + 88))(*((_QWORD *)this + 3), v14 + *((float *)this + 18));
    if (*((_BYTE *)this + 226))
      btGhostObject::convexSweepTest(*((_QWORD *)this + 2), *((btCollisionShape **)this + 3), (uint64_t)v22, (uint64_t)v21, (float *)&v24, *((float *)a2 + 21));
    else
      btCollisionWorld::convexSweepTest((uint64_t)a2, *((btCollisionShape **)this + 3), (uint64_t)v22, (uint64_t)v21, (float *)&v24, *((float *)a2 + 21));
    (*(void (**)(_QWORD, float))(**((_QWORD **)this + 3) + 88))(*((_QWORD *)this + 3), v14);
    v16 = v25;
    if (v25 >= 1.0)
    {
      *((_OWORD *)this + 7) = *((_OWORD *)this + 9);
    }
    else
    {
      btKinematicCharacterController::updateTargetPositionBasedOnCollision((float32x4_t *)this, v30, v15, 1.0);
      v17 = vsubq_f32(*((float32x4_t *)this + 9), *((float32x4_t *)this + 7));
      v17.i32[3] = 0;
      v18 = (int8x16_t)vmulq_f32(v17, v17);
      v19 = vadd_f32(vpadd_f32(*(float32x2_t *)v18.i8, *(float32x2_t *)v18.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL)).f32[0];
      if (v19 <= 0.00000011921)
        return;
      v20 = (int8x16_t)vmulq_f32(vmulq_n_f32(v17, 1.0 / sqrtf(v19)), *((float32x4_t *)this + 6));
      if (vadd_f32(vpadd_f32(*(float32x2_t *)v20.i8, *(float32x2_t *)v20.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL)).f32[0] <= 0.0)return;
    }
    v8 = v8 - v16;
  }
  while (v8 > 0.01);
}

void btKinematicCharacterController::stepDown(float32x4_t *this, btCollisionWorld *a2, float a3)
{
  float v5;
  float v6;
  BOOL v7;
  float v8;
  float v9;
  int *UpAxisDirections;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  uint64_t v14;
  uint64_t v15;
  __int32 v16;
  __int128 v17;
  uint64_t v18;
  btCollisionShape *v19;
  uint64_t v20;
  float v21;
  float32x4_t v22;
  _OWORD v23[4];
  _OWORD v24[4];
  void (**v25)(btKinematicClosestNotMeConvexResultCallback *__hidden);
  float v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int32 v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v5 = this[2].f32[0];
  v6 = -v5;
  v7 = v5 < 0.0;
  v8 = 0.0;
  if (v7)
    v8 = v6;
  v9 = v8 * a3;
  if ((float)(v8 * a3) > 0.0 && v9 < this[4].f32[1] && (this[14].i8[0] || !this[14].i8[1]))
    v9 = this[4].f32[1];
  UpAxisDirections = btKinematicCharacterController::getUpAxisDirections((btKinematicCharacterController *)this);
  v11 = vmulq_n_f32(*(float32x4_t *)&btKinematicCharacterController::getUpAxisDirections(void)::sUpAxisDirection[4 * this[14].i32[2]], v9 + this[8].f32[0]);
  v11.i32[3] = 0;
  v12 = vsubq_f32(this[9], v11);
  this[9] = v12;
  v24[0] = xmmword_1DD007970;
  v24[1] = xmmword_1DD007920;
  v23[0] = xmmword_1DD007970;
  v23[1] = xmmword_1DD007920;
  v13 = this[7];
  v24[2] = xmmword_1DD007600;
  v24[3] = v13;
  v23[2] = xmmword_1DD007600;
  v23[3] = v12;
  v14 = this[1].i64[0];
  btKinematicCharacterController::getUpAxisDirections((btKinematicCharacterController *)UpAxisDirections);
  v15 = this[14].i32[2];
  v16 = this[3].i32[2];
  v26 = 1.0;
  v29 = 0u;
  v30 = 0u;
  v25 = &off_1EA598410;
  v17 = *(_OWORD *)&btKinematicCharacterController::getUpAxisDirections(void)::sUpAxisDirection[4 * v15];
  v31 = 0;
  v32 = v14;
  v33 = v17;
  v34 = v16;
  v18 = this[1].i64[0];
  v19 = (btCollisionShape *)this[1].i64[1];
  v20 = *(_QWORD *)(v18 + 200);
  v27 = *(_OWORD *)(v20 + 8);
  v28 = *(_QWORD *)(v20 + 24);
  v21 = *((float *)a2 + 21);
  if (this[14].i8[2])
    btGhostObject::convexSweepTest(v18, v19, (uint64_t)v24, (uint64_t)v23, (float *)&v25, v21);
  else
    btCollisionWorld::convexSweepTest((uint64_t)a2, v19, (uint64_t)v24, (uint64_t)v23, (float *)&v25, v21);
  v22 = this[9];
  if (v26 < 1.0)
  {
    v22 = vaddq_f32(this[7], vmulq_n_f32(vsubq_f32(v22, this[7]), v26));
    this[2].i64[0] = 0;
    this[14].i8[1] = 0;
  }
  this[7] = v22;
}

float32x4_t btKinematicCharacterController::setWalkDirection(int8x16_t *this, float32x4_t *a2, double a3, double a4, double a5, float32x4_t a6)
{
  float32x4_t result;
  int8x16_t v7;
  float32x4_t v8;
  int8x16_t v9;
  float32x4_t v10;

  this[14].i8[3] = 1;
  result = *a2;
  v7 = (int8x16_t)vmulq_f32(result, result);
  v8 = vmulq_n_f32(*a2, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v7.i8, *(float32x2_t *)v7.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)).f32[0]));
  v9 = (int8x16_t)vmulq_f32(v8, v8);
  *(float32x2_t *)a6.f32 = vpadd_f32(*(float32x2_t *)v9.i8, *(float32x2_t *)v9.i8);
  v10 = (float32x4_t)vextq_s8(v9, v9, 8uLL);
  *(float32x2_t *)v10.f32 = vadd_f32(*(float32x2_t *)a6.f32, *(float32x2_t *)v10.f32);
  v10.f32[0] = sqrtf(v10.f32[0]);
  a6.i64[0] = 0x3400000034000000;
  this[5] = *(int8x16_t *)a2;
  this[6] = vandq_s8((int8x16_t)v8, (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgtq_f32(a6, v10)), 0));
  return result;
}

uint64_t btKinematicCharacterController::setVelocityForTimeInterval(uint64_t this, float32x4_t *a2, float a3, double a4, double a5, double a6, float32x4_t a7)
{
  int8x16_t v7;
  float32x4_t v8;
  int8x16_t v9;
  float32x4_t v10;

  *(_BYTE *)(this + 227) = 0;
  v7 = (int8x16_t)vmulq_f32(*a2, *a2);
  v8 = vmulq_n_f32(*a2, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v7.i8, *(float32x2_t *)v7.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)).f32[0]));
  v9 = (int8x16_t)vmulq_f32(v8, v8);
  *(float32x2_t *)a7.f32 = vpadd_f32(*(float32x2_t *)v9.i8, *(float32x2_t *)v9.i8);
  v10 = (float32x4_t)vextq_s8(v9, v9, 8uLL);
  *(float32x2_t *)v10.f32 = vadd_f32(*(float32x2_t *)a7.f32, *(float32x2_t *)v10.f32);
  v10.f32[0] = sqrtf(v10.f32[0]);
  a7.i64[0] = 0x3400000034000000;
  *(float32x4_t *)(this + 80) = *a2;
  *(int8x16_t *)(this + 96) = vandq_s8((int8x16_t)v8, (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgtq_f32(a7, v10)), 0));
  *(float *)(this + 228) = a3;
  return this;
}

__n128 btKinematicCharacterController::warp(btKinematicCharacterController *this, __n128 *a2)
{
  __n128 result;
  uint64_t v3;

  result = *a2;
  v3 = *((_QWORD *)this + 2);
  *(_OWORD *)(v3 + 16) = xmmword_1DD007970;
  *(_OWORD *)(v3 + 32) = xmmword_1DD007920;
  *(_OWORD *)(v3 + 48) = xmmword_1DD007600;
  *(__n128 *)(v3 + 64) = result;
  return result;
}

__n128 btKinematicCharacterController::preStep(__n128 *this, btCollisionWorld *a2)
{
  int v4;
  __n128 result;

  this[12].n128_u8[0] = 0;
  v4 = 5;
  do
  {
    if (!btKinematicCharacterController::recoverFromPenetration((btKinematicCharacterController *)this, a2))break;
    this[12].n128_u8[0] = 1;
    --v4;
  }
  while (v4);
  result = *(__n128 *)(this[1].n128_u64[0] + 64);
  this[7] = result;
  this[9] = result;
  return result;
}

void btKinematicCharacterController::playerStep(float32x4_t *this, btCollisionWorld *a2, float a3)
{
  float v6;
  float v7;
  float v8;
  _OWORD *v9;
  btVector3 *v10;
  float v11;
  float v12;
  btVector3 v13;
  float32x4_t v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  btVector3 v19;

  if (this[14].i8[3] || this[14].f32[1] > 0.0)
  {
    this[14].i8[0] = (*(uint64_t (**)(float32x4_t *))(this->i64[0] + 96))(this);
    v6 = this[2].f32[0] - (float)(this[3].f32[3] * a3);
    this[2].f32[0] = v6;
    if (v6 > 0.0)
    {
      v7 = this[2].f32[3];
      if (v6 > v7)
      {
        this[2].f32[0] = v7;
        v6 = v7;
      }
    }
    if (v6 < 0.0)
    {
      v8 = fabsf(this[2].f32[2]);
      if (fabsf(v6) > v8)
      {
        v6 = -v8;
        this[2].f32[0] = -v8;
      }
    }
    this[2].f32[1] = v6 * a3;
    v9 = (_OWORD *)this[1].i64[0];
    v17 = v9[2];
    v18 = v9[1];
    v16 = v9[3];
    btKinematicCharacterController::stepUp(this, a2);
    if (this[14].i8[3])
    {
      v10 = (btVector3 *)&this[5];
    }
    else
    {
      v11 = this[14].f32[1];
      if (v11 <= a3)
        v12 = this[14].f32[1];
      else
        v12 = a3;
      this[14].f32[1] = v11 - a3;
      v13 = (btVector3)vmulq_n_f32(this[5], v12);
      v13.var0.var0[3] = 0.0;
      v19 = v13;
      v10 = &v19;
    }
    btKinematicCharacterController::stepForwardAndStrafe((btKinematicCharacterController *)this, a2, (float32x4_t *)v10);
    btKinematicCharacterController::stepDown(this, a2, a3);
    v14 = this[7];
    v15 = (_OWORD *)this[1].i64[0];
    v15[1] = v18;
    v15[2] = v17;
    v15[3] = v16;
    v15[4] = v14;
  }
}

uint64_t btKinematicCharacterController::canJump(btKinematicCharacterController *this)
{
  return (*(uint64_t (**)(btKinematicCharacterController *))(*(_QWORD *)this + 96))(this);
}

float btKinematicCharacterController::jump(btKinematicCharacterController *this)
{
  float result;

  if ((*(unsigned int (**)(btKinematicCharacterController *))(*(_QWORD *)this + 80))(this))
  {
    result = *((float *)this + 11);
    *((float *)this + 8) = result;
    *((_BYTE *)this + 225) = 1;
  }
  return result;
}

uint64_t btKinematicCharacterController::setGravity(uint64_t this, float a2)
{
  *(float *)(this + 60) = a2;
  return this;
}

BOOL btKinematicCharacterController::onGround(btKinematicCharacterController *this)
{
  return *((float *)this + 8) == 0.0 && *((float *)this + 9) == 0.0;
}

uint64_t btKinematicCharacterController::updateAction(btKinematicCharacterController *this, btCollisionWorld *a2, float a3)
{
  (*(void (**)(btKinematicCharacterController *))(*(_QWORD *)this + 64))(this);
  return (*(uint64_t (**)(btKinematicCharacterController *, btCollisionWorld *, float))(*(_QWORD *)this + 72))(this, a2, a3);
}

void btKinematicClosestNotMeConvexResultCallback::~btKinematicClosestNotMeConvexResultCallback(btKinematicClosestNotMeConvexResultCallback *this)
{
  JUMPOUT(0x1DF0D41C0);
}

float btKinematicClosestNotMeConvexResultCallback::addSingleResult(uint64_t a1, uint64_t a2, int a3)
{
  float32x4_t *v3;
  float result;
  float32x4_t v5;
  int8x16_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  float32x4_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;

  v3 = *(float32x4_t **)a2;
  result = 1.0;
  if (*(_QWORD *)a2 != *(_QWORD *)(a1 + 120))
  {
    v5 = *(float32x4_t *)(a2 + 16);
    if (!a3)
    {
      v6 = (int8x16_t)vmulq_f32(v3[1], v5);
      v7 = (int8x16_t)vmulq_f32(v5, v3[2]);
      v8 = (int8x16_t)vmulq_f32(v5, v3[3]);
      v8.i32[3] = 0;
      *(float32x2_t *)v5.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v6.i8, *(float32x2_t *)v7.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)));
      *(float32x2_t *)&v5.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v8.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL)), 0);
    }
    v9 = (int8x16_t)vmulq_f32(v5, *(float32x4_t *)(a1 + 128));
    if (vadd_f32(vpadd_f32(*(float32x2_t *)v9.i8, *(float32x2_t *)v9.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL)).f32[0] >= *(float *)(a1 + 144))
    {
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 112) = v3;
      v10 = *(float32x4_t *)(a2 + 16);
      if (!a3)
      {
        v11 = (int8x16_t)vmulq_f32(v3[1], v10);
        v12 = (int8x16_t)vmulq_f32(v10, v3[2]);
        v13 = (int8x16_t)vmulq_f32(v10, v3[3]);
        v13.i32[3] = 0;
        *(float32x2_t *)v10.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v11.i8, *(float32x2_t *)v12.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL)));
        *(float32x2_t *)&v10.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v13.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL)), 0);
      }
      *(float32x4_t *)(a1 + 80) = v10;
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 32);
      return *(float *)(a2 + 48);
    }
  }
  return result;
}

void btConeTwistConstraint::btConeTwistConstraint(btConeTwistConstraint *this, btRigidBody *a2, btRigidBody *a3, const btTransform *a4, const btTransform *a5)
{
  uint64_t v7;
  btVector3 var1;

  btTypedConstraint::btTypedConstraint((uint64_t)this, 5, (uint64_t)a2, (uint64_t)a3);
  *(_QWORD *)v7 = off_1EA596FE0;
  *(btTransform *)(v7 + 368) = *a4;
  *(btVector3 *)(v7 + 432) = a5->var0.var0[0];
  *(btVector3 *)(v7 + 448) = a5->var0.var0[1];
  *(btVector3 *)(v7 + 464) = a5->var0.var0[2];
  var1 = a5->var1;
  *(_BYTE *)(v7 + 624) = 0;
  *(_DWORD *)(v7 + 592) = 0;
  *(_DWORD *)(v7 + 656) = -1082130432;
  *(btVector3 *)(v7 + 480) = var1;
  *(_OWORD *)(v7 + 496) = xmmword_1DD02CE80;
  *(_OWORD *)(v7 + 512) = xmmword_1DD02CE90;
  *(_QWORD *)(v7 + 688) = 0;
  *(_QWORD *)(v7 + 696) = 1060320051;
}

void btConeTwistConstraint::btConeTwistConstraint(btConeTwistConstraint *this, btRigidBody *a2, const btTransform *a3)
{
  uint64_t v4;
  btVector3 v5;
  btVector3 v6;
  btVector3 v7;

  v4 = btTypedConstraint::btTypedConstraint((uint64_t)this, 5, (uint64_t)a2);
  *(_QWORD *)v4 = off_1EA596FE0;
  v5 = a3->var0.var0[0];
  *(btVector3 *)(v4 + 368) = a3->var0.var0[0];
  v6 = a3->var0.var0[1];
  *(btVector3 *)(v4 + 384) = v6;
  v7 = a3->var0.var0[2];
  *(btVector3 *)(v4 + 400) = v7;
  *(btVector3 *)(v4 + 416) = a3->var1;
  *(btVector3 *)(v4 + 432) = v5;
  *(btVector3 *)(v4 + 448) = v6;
  *(btVector3 *)(v4 + 464) = v7;
  *(_QWORD *)(v4 + 480) = 0;
  *(_QWORD *)(v4 + 488) = 0;
  *(_DWORD *)(v4 + 592) = 0;
  *(_BYTE *)(v4 + 624) = 0;
  *(_DWORD *)(v4 + 656) = -1082130432;
  *(_OWORD *)(v4 + 496) = xmmword_1DD02CE80;
  *(_OWORD *)(v4 + 512) = xmmword_1DD02CE90;
  *(_QWORD *)(v4 + 688) = 0;
  *(_QWORD *)(v4 + 696) = 1060320051;
}

void btConeTwistConstraint::getInfo1(uint64_t a1, _DWORD *a2)
{
  int v3;
  int v5;
  int v6;
  float v7;
  int v8;

  if (*(_BYTE *)(a1 + 595))
  {
    v3 = 0;
    *a2 = 0;
LABEL_9:
    a2[1] = v3;
    return;
  }
  *(_QWORD *)a2 = 0x300000003;
  btConeTwistConstraint::calcAngleInfo2((btConeTwistConstraint *)a1, (const btTransform *)(*(_QWORD *)(a1 + 40) + 16), (const btTransform *)(*(_QWORD *)(a1 + 48) + 16), (const btMatrix3x3 *)(*(_QWORD *)(a1 + 40) + 304), (const btMatrix3x3 *)(*(_QWORD *)(a1 + 48) + 304));
  if (*(_BYTE *)(a1 + 594))
  {
    v5 = *a2;
    v6 = a2[1];
    ++*a2;
    a2[1] = v6 - 1;
    v7 = *(float *)(a1 + 524);
    if (*(float *)(a1 + 512) < v7 && *(float *)(a1 + 516) < v7)
    {
      *a2 = v5 + 2;
      a2[1] = v6 - 2;
    }
  }
  if (*(_BYTE *)(a1 + 593))
  {
    v8 = a2[1];
    ++*a2;
    v3 = v8 - 1;
    goto LABEL_9;
  }
}

void btConeTwistConstraint::calcAngleInfo2(btConeTwistConstraint *this, const btTransform *a2, const btTransform *a3, const btMatrix3x3 *a4, const btMatrix3x3 *a5)
{
  int32x2_t v10;
  float32x2_t v11;
  int32x2_t v12;
  int32x2_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x4_t v16;
  int8x16_t v17;
  btConeTwistConstraint *v18;
  int32x2_t v19;
  float32x2_t v20;
  int32x2_t v21;
  int32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x4_t v25;
  int8x16_t v26;
  float32x4_t v27;
  float32x4_t v28;
  int32x2_t v29;
  unint64_t v30;
  float32x2_t v31;
  float32x2_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  int32x2_t v36;
  float32x2_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x2_t v42;
  int32x2_t v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x2_t v46;
  float32x2_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  int8x16_t v51;
  float32x4_t v52;
  int8x16_t v53;
  float v54;
  float32x4_t v55;
  float32x4_t v56;
  int8x16_t v57;
  float32x4_t v58;
  int32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x2_t v63;
  float32x2_t v64;
  float32x2_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float v72;
  float var28;
  float var26;
  float32x4_t v75;
  int8x16_t v76;
  int8x16_t v77;
  float32x4_t v78;
  int8x16_t v79;
  float32x2_t v80;
  float32x4_t v81;
  float32x2_t v82;
  int8x16_t v83;
  int8x16_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x2_t v87;
  float32x2_t v88;
  int8x16_t v89;
  int8x16_t v90;
  int8x16_t v91;
  float32x2_t v92;
  float32x4_t v93;
  float32x2_t v94;
  int8x16_t v95;
  int8x16_t v96;
  int8x16_t v97;
  float32x2_t v98;
  float32x2_t v99;
  float32x4_t v100;
  float cosval;
  float sinval;
  float v103;
  float v104;
  float v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  int8x16_t v109;
  float32x4_t v110;
  float v111;
  __float2 v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  int8x16_t v121;
  int8x16_t v122;
  int8x16_t v123;
  float32x4_t v124;
  int32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  int8x16_t v134;
  int8x16_t v135;
  int8x16_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  int8x16_t v145;
  int8x16_t v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  int8x16_t v151;
  float32x4_t v152;
  int8x16_t v153;
  float32x4_t v154;
  float32x4_t v155;
  int8x16_t v156;
  float32x4_t v157;
  int8x16_t v158;
  float32x4_t v159;
  int8x16_t v160;
  float v161;
  float v162;
  float v163;
  float v164;
  uint64_t v165;
  float v166;
  float v167;
  float v168;
  float v169;
  int8x16_t v170;
  btQuaternion v171;
  float v172;
  __float2 v173;
  int8x16_t v174;
  int8x16_t v175;
  int8x16_t v176;
  int32x2_t v177;
  int32x2_t v178;
  float32x2_t v179;
  int8x16_t v180;
  float32x4_t v181;
  float32x2_t v182;
  float32x4_t v183;
  float32x4_t v184;
  float32x4_t v185;
  float32x4_t v186;
  int8x16_t v187;
  float32x4_t v188;
  float32x4_t v189;
  float32x4_t v190;
  int8x16_t v191;
  float v192;
  __float2 v193;
  __float2 v194;
  int8x16_t v195;
  float32x4_t v196;
  float32x4_t v197;
  float32x4_t v198;
  int8x16_t v199;
  float32x4_t v200;
  int8x16_t v201;
  float v202;
  float v203;
  float var27;
  float v205;
  float v206;
  BOOL v207;
  float v208;
  int8x16_t v209;
  int8x16_t v210;
  int8x16_t v211;
  int32x2_t v212;
  int32x2_t v213;
  float32x2_t v214;
  int8x16_t v215;
  float32x4_t v216;
  float32x2_t v217;
  float32x4_t v218;
  float32x4_t v219;
  float32x4_t v220;
  float32x4_t v221;
  int8x16_t v222;
  float32x4_t v223;
  float32x4_t v224;
  float32x4_t v225;
  int8x16_t v226;
  int8x16_t v227;
  float32x4_t v228;
  int32x2_t v229;
  float32x2_t v230;
  float32x4_t v231;
  float32x4_t v232;
  float32x4_t v233;
  int32x2_t v234;
  int32x2_t v235;
  float32x2_t v236;
  float32x2_t v237;
  float32x4_t v238;
  btVector3 v239;
  float v240;
  float v241;
  float v242;
  float v243;
  __int32 v244;
  float32x2_t v245;
  float32x2_t v246;
  __int32 v247;
  float32x4_t v248;
  float32x2_t v249;
  __int32 v250;
  float32x4_t v251;
  float32x2_t v252;
  float32x4_t v253;
  int32x2_t v254;
  int32x2_t v255;
  float32x4_t v256;
  float32x4_t v257;
  uint64_t v258;
  btQuaternion v259;
  btMatrix3x3 v260;
  float32x4_t v261;
  btMatrix3x3 v262;
  __int128 v263;

  *(_QWORD *)&this->var40.var0.var0[2] = 0;
  *(_WORD *)((char *)&this->var43.var0.var0[3] + 1) = 0;
  if (!LOBYTE(this->var48) || HIBYTE(this->var43.var0.var0[3]))
  {
    btMatrix3x3::getRotation(&a2->var0, (btQuaternion *)&v262);
    btMatrix3x3::getRotation((btMatrix3x3 *)&this->var14.var0.var0[2].var0.var0[3], (btQuaternion *)&v260);
    v10 = (int32x2_t)vextq_s8((int8x16_t)v262.var0[0], (int8x16_t)v262.var0[0], 8uLL).u64[0];
    v11 = (float32x2_t)vzip1_s32(v10, *(int32x2_t *)v262.var0[0].var0.var0);
    v12 = (int32x2_t)vextq_s8((int8x16_t)v260.var0[0], (int8x16_t)v260.var0[0], 8uLL).u64[0];
    v13 = vzip1_s32(v12, *(int32x2_t *)v260.var0[0].var0.var0);
    v14 = (float32x2_t)vext_s8(*(int8x8_t *)v262.var0[0].var0.var0, (int8x8_t)v10, 4uLL);
    v15 = vmul_f32(v11, (float32x2_t)vext_s8((int8x8_t)v12, *(int8x8_t *)v260.var0[0].var0.var0, 4uLL));
    *(float32x2_t *)v16.f32 = vmul_f32(v11, (float32x2_t)vext_s8(*(int8x8_t *)v260.var0[0].var0.var0, (int8x8_t)v12, 4uLL));
    *(float32x2_t *)&v16.u32[2] = vmul_f32(v14, (float32x2_t)vrev64_s32(v13));
    *(float32x2_t *)v17.i8 = vadd_f32(vmul_laneq_f32(*(float32x2_t *)v262.var0[0].var0.var0, (float32x4_t)v260.var0[0], 3), vmul_f32(v14, (float32x2_t)v13));
    v17.u64[1] = (unint64_t)vadd_f32(vmul_lane_f32(*(float32x2_t *)v262.var0[0].var0.var0, *(float32x2_t *)v260.var0[0].var0.var0, 1), v15);
    v257 = vaddq_f32(vsubq_f32(vmulq_laneq_f32((float32x4_t)v260.var0[0], (float32x4_t)v262.var0[0], 3), v16), (float32x4_t)veorq_s8(v17, (int8x16_t)xmmword_1DD007D50));
    btMatrix3x3::getRotation(&a3->var0, (btQuaternion *)&v262);
    btMatrix3x3::getRotation((btMatrix3x3 *)&this->var15.var0.var0[2].var0.var0[3], (btQuaternion *)&v260);
    v19 = (int32x2_t)vextq_s8((int8x16_t)v262.var0[0], (int8x16_t)v262.var0[0], 8uLL).u64[0];
    v20 = (float32x2_t)vzip1_s32(v19, *(int32x2_t *)v262.var0[0].var0.var0);
    v21 = (int32x2_t)vextq_s8((int8x16_t)v260.var0[0], (int8x16_t)v260.var0[0], 8uLL).u64[0];
    v22 = vzip1_s32(v21, *(int32x2_t *)v260.var0[0].var0.var0);
    v23 = (float32x2_t)vext_s8(*(int8x8_t *)v262.var0[0].var0.var0, (int8x8_t)v19, 4uLL);
    v24 = vmul_f32(v20, (float32x2_t)vext_s8((int8x8_t)v21, *(int8x8_t *)v260.var0[0].var0.var0, 4uLL));
    *(float32x2_t *)v25.f32 = vmul_f32(v20, (float32x2_t)vext_s8(*(int8x8_t *)v260.var0[0].var0.var0, (int8x8_t)v21, 4uLL));
    *(float32x2_t *)&v25.u32[2] = vmul_f32(v23, (float32x2_t)vrev64_s32(v22));
    *(float32x2_t *)v26.i8 = vadd_f32(vmul_laneq_f32(*(float32x2_t *)v262.var0[0].var0.var0, (float32x4_t)v260.var0[0], 3), vmul_f32(v23, (float32x2_t)v22));
    v26.u64[1] = (unint64_t)vadd_f32(vmul_lane_f32(*(float32x2_t *)v262.var0[0].var0.var0, *(float32x2_t *)v260.var0[0].var0.var0, 1), v24);
    v27 = v257;
    v253 = vaddq_f32(vsubq_f32(vmulq_laneq_f32((float32x4_t)v260.var0[0], (float32x4_t)v262.var0[0], 3), v25), (float32x4_t)veorq_s8(v26, (int8x16_t)xmmword_1DD007D50));
    v28 = (float32x4_t)veorq_s8((int8x16_t)v253, (int8x16_t)xmmword_1DD007D60);
    v29 = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL), *(int32x2_t *)v257.f32);
    v30 = vextq_s8((int8x16_t)v27, (int8x16_t)v27, 0xCuLL).u64[0];
    v254 = (int32x2_t)vextq_s8((int8x16_t)v28, (int8x16_t)v28, 8uLL).u64[0];
    v255 = vzip1_s32(v254, *(int32x2_t *)v28.f32);
    v31 = (float32x2_t)vext_s8(*(int8x8_t *)v28.f32, (int8x8_t)v254, 4uLL);
    v32 = (float32x2_t)vextq_s8((int8x16_t)v27, (int8x16_t)v27, 4uLL).u64[0];
    v27.i64[0] = v28.i64[0];
    *(int32x2_t *)&v27.u32[2] = v255;
    *(int32x2_t *)v33.f32 = vdup_laneq_s32((int32x4_t)v257, 3);
    v33.i64[1] = v30;
    *(float32x2_t *)v34.f32 = vmul_f32((float32x2_t)v29, v31);
    *(float32x2_t *)&v34.u32[2] = vmul_lane_f32(*(float32x2_t *)v28.f32, *(float32x2_t *)v257.f32, 1);
    v251 = v33;
    v252 = v32;
    *(float32x2_t *)v25.f32 = vmul_f32(v32, (float32x2_t)v255);
    *(float32x2_t *)&v25.u32[2] = vmul_f32((float32x2_t)vrev64_s32(v29), v31);
    v256 = v28;
    v35 = vaddq_f32(vsubq_f32(vmulq_laneq_f32(v257, v28, 3), v25), (float32x4_t)veorq_s8((int8x16_t)vaddq_f32(v34, vmulq_f32(v33, v27)), (int8x16_t)xmmword_1DD007D50));
    v36 = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL), *(int32x2_t *)v35.f32);
    v37 = (float32x2_t)vextq_s8((int8x16_t)v35, (int8x16_t)v35, 4uLL).u64[0];
    *(int32x2_t *)v38.f32 = vdup_laneq_s32((int32x4_t)v35, 3);
    v38.i64[1] = vextq_s8((int8x16_t)v35, (int8x16_t)v35, 0xCuLL).u64[0];
    *(int32x2_t *)v39.f32 = v36;
    *(float32x2_t *)&v39.u32[2] = v37;
    *(float32x2_t *)v33.f32 = v37;
    v33.i64[1] = v35.i64[0];
    v40 = vaddq_f32((float32x4_t)veorq_s8((int8x16_t)vaddq_f32(vmulq_f32(v33, (float32x4_t)xmmword_1DD007920), vmulq_f32(v38, (float32x4_t)xmmword_1DD007880)), (int8x16_t)xmmword_1DD007D50), vmulq_f32(v39, (float32x4_t)xmmword_1DD02A890));
    v41 = (float32x4_t)veorq_s8((int8x16_t)v35, (int8x16_t)xmmword_1DD007D60);
    v28.i64[0] = vextq_s8((int8x16_t)v40, (int8x16_t)v40, 8uLL).u64[0];
    v42 = (float32x2_t)vzip1_s32(*(int32x2_t *)v28.f32, *(int32x2_t *)v40.f32);
    v43 = (int32x2_t)vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL).u64[0];
    v44 = (float32x2_t)vzip1_s32(v43, *(int32x2_t *)v41.f32);
    v45 = (float32x2_t)vextq_s8((int8x16_t)v40, (int8x16_t)v40, 4uLL).u64[0];
    v46 = vmul_laneq_f32(*(float32x2_t *)v40.f32, v41, 3);
    *(float32x2_t *)v28.f32 = vmul_laneq_f32(*(float32x2_t *)v28.f32, v41, 3);
    v47 = vmul_lane_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v41.f32, 1);
    *(float32x2_t *)v48.f32 = vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v41.f32, (int8x8_t)v43, 4uLL), v42);
    *(float32x2_t *)&v48.u32[2] = vmul_lane_f32(v45, v44, 1);
    v49 = vmulq_laneq_f32(v41, v40, 3);
    *(float32x2_t *)v41.f32 = vadd_f32(v46, vmul_f32(v44, v45));
    *(float32x2_t *)&v41.u32[2] = vadd_f32(v47, *(float32x2_t *)v28.f32);
    v50 = vaddq_f32(vsubq_f32(v49, v48), v41);
    v50.i32[3] = 0;
    v51 = (int8x16_t)vmulq_f32(v50, v50);
    v52 = vmulq_n_f32(v50, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v51.i8, *(float32x2_t *)v51.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v51, v51, 8uLL)).f32[0]));
    v53 = (int8x16_t)vmulq_f32(v52, (float32x4_t)xmmword_1DD007970);
    v54 = vadd_f32(vpadd_f32(*(float32x2_t *)v53.i8, *(float32x2_t *)v53.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v53, v53, 8uLL)).f32[0];
    if (v54 >= -1.0)
    {
      v56.i64[0] = vextq_s8((int8x16_t)v52, (int8x16_t)v52, 4uLL).u64[0];
      v56.i64[1] = v52.i64[0];
      v57 = (int8x16_t)vaddq_f32(vmulq_f32(v56, (float32x4_t)xmmword_1DD007970), vmulq_f32(v52, (float32x4_t)xmmword_1DD02C5E0));
      v58 = (float32x4_t)vextq_s8(vextq_s8(v57, v57, 0xCuLL), v57, 8uLL);
      v58.i32[3] = sqrtf((float)(v54 + 1.0) + (float)(v54 + 1.0));
      v59.i32[1] = 1056964608;
      v59.i64[1] = 0x3F0000003F000000;
      *(float *)v59.i32 = 1.0 / v58.f32[3];
      v60 = (float32x4_t)vzip1q_s32(v59, v59);
      v60.f32[2] = 1.0 / v58.f32[3];
      v55 = vmulq_f32(v58, v60);
    }
    else
    {
      v55 = (float32x4_t)xmmword_1DD02CEA0;
    }
    v61 = vmulq_f32(v55, v55);
    v61.i64[0] = vpaddq_f32(v61, v61).u64[0];
    v262.var0[0] = (btVector3)vmulq_n_f32(v55, 1.0 / sqrtf(vpadd_f32(*(float32x2_t *)v61.f32, *(float32x2_t *)v61.f32).f32[0]));
    v62 = (float32x4_t)veorq_s8((int8x16_t)v262.var0[0], (int8x16_t)xmmword_1DD007D60);
    v61.i64[0] = vextq_s8((int8x16_t)v62, (int8x16_t)v62, 8uLL).u64[0];
    v63 = (float32x2_t)vzip1_s32(*(int32x2_t *)v61.f32, *(int32x2_t *)v62.f32);
    *(int8x8_t *)v61.f32 = vext_s8(*(int8x8_t *)v62.f32, *(int8x8_t *)v61.f32, 4uLL);
    v64 = (float32x2_t)vrev64_s32(v36);
    v65 = vmul_lane_f32(*(float32x2_t *)v62.f32, *(float32x2_t *)v35.f32, 1);
    v66 = vmulq_laneq_f32(v35, v62, 3);
    *(float32x2_t *)&v62.u32[2] = v63;
    *(float32x2_t *)v67.f32 = vmul_f32((float32x2_t)v36, *(float32x2_t *)v61.f32);
    *(float32x2_t *)&v67.u32[2] = v65;
    *(float32x2_t *)v68.f32 = vmul_f32(v37, v63);
    *(float32x2_t *)&v68.u32[2] = vmul_f32(v64, *(float32x2_t *)v61.f32);
    v69 = vaddq_f32(vsubq_f32(v66, v68), (float32x4_t)veorq_s8((int8x16_t)vaddq_f32(v67, vmulq_f32(v38, v62)), (int8x16_t)xmmword_1DD007D50));
    v70 = vmulq_f32(v69, v69);
    v71 = vpaddq_f32(v70, v70);
    v260.var0[0] = (btVector3)vmulq_n_f32(v69, 1.0 / sqrtf(vpadd_f32(*(float32x2_t *)v71.f32, *(float32x2_t *)v71.f32).f32[0]));
    v72 = this->var25.var0.var0[3];
    var28 = this->var28;
    if (v72 >= var28)
    {
      var26 = this->var26;
      if (var26 >= var28)
      {
        v258 = 0;
        btConeTwistConstraint::computeConeLimitInfo(this, (float32x4_t *)&v262, (float *)&v258 + 1, (btVector3 *)&v259, (float *)&v258);
        v165 = v258;
        v166 = this->var24.var0.var0[3];
        if (*((float *)&v258 + 1) > (float)(*(float *)&v258 * v166))
        {
          BYTE2(this->var43.var0.var0[3]) = 1;
          v167 = *((float *)&v165 + 1) - (float)(*(float *)&v165 * v166);
          v168 = 1.0;
          if (*((float *)&v165 + 1) < *(float *)&v165 && v166 < 1.0)
            v168 = v167 / (float)(*(float *)&v165 + (float)((float)-*(float *)&v165 * v166));
          this->var44 = v168;
          this->var40.var0.var0[3] = v167;
          if (fabsf(v259.var0.var0[1]) <= 0.00000011921)
          {
            v171 = v259;
          }
          else
          {
            v169 = fabsf(v259.var0.var0[1]* (float)((float)(var26 / v72) * (float)((float)-v259.var0.var0[2] / v259.var0.var0[1])));
            if (v259.var0.var0[2] < 0.0)
              v169 = -v169;
            v259.var0.var0[2] = v169;
            v170 = (int8x16_t)vmulq_f32((float32x4_t)v259, (float32x4_t)v259);
            v171 = (btQuaternion)vmulq_n_f32((float32x4_t)v259, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v170.i8, *(float32x2_t *)v170.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v170, v170, 8uLL)).f32[0]));
          }
          v174.i64[0] = 0x8000000080000000;
          v174.i64[1] = 0x8000000080000000;
          v175 = veorq_s8((int8x16_t)v171, v174);
          v176 = (int8x16_t)v253;
          v177 = (int32x2_t)vextq_s8(v175, v175, 8uLL).u64[0];
          v178 = vzip1_s32(v177, *(int32x2_t *)v175.i8);
          v179 = (float32x2_t)vextq_s8(v176, v176, 4uLL).u64[0];
          *(float32x2_t *)v174.i8 = vmul_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v176, v176, 8uLL), *(int32x2_t *)v253.f32), (float32x2_t)vext_s8(*(int8x8_t *)v175.i8, (int8x8_t)v177, 4uLL));
          v174.u64[1] = (unint64_t)vmul_f32(v179, (float32x2_t)vrev64_s32(v178));
          *(float32x2_t *)v180.i8 = vadd_f32(vmul_laneq_f32(*(float32x2_t *)v175.i8, v253, 3), vmul_f32(v179, (float32x2_t)v178));
          v180.u64[1] = (unint64_t)vadd_f32(vmul_lane_f32(*(float32x2_t *)v253.f32, *(float32x2_t *)v175.i8, 1), vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v176, v176, 0xCuLL), (float32x2_t)v178));
          v181 = vsubq_f32((float32x4_t)veorq_s8(v180, (int8x16_t)xmmword_1DD007D50), (float32x4_t)v174);
          *(int32x2_t *)v174.i8 = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v181, (int8x16_t)v181, 8uLL), *(int32x2_t *)v181.f32);
          v180.i64[0] = vextq_s8((int8x16_t)v181, (int8x16_t)v181, 4uLL).u64[0];
          v182 = vmul_f32((float32x2_t)vext_s8((int8x8_t)v254, *(int8x8_t *)v256.f32, 4uLL), *(float32x2_t *)v174.i8);
          *(float32x2_t *)v174.i8 = vmul_f32(v31, *(float32x2_t *)v174.i8);
          v174.u64[1] = (unint64_t)vmul_f32((float32x2_t)vrev64_s32(v255), *(float32x2_t *)v180.i8);
          *(float32x2_t *)v180.i8 = vadd_f32(vmul_laneq_f32(*(float32x2_t *)v181.f32, v256, 3), vmul_f32((float32x2_t)v255, *(float32x2_t *)v180.i8));
          v180.u64[1] = (unint64_t)vadd_f32(vmul_lane_f32(*(float32x2_t *)v181.f32, *(float32x2_t *)v256.f32, 1), v182);
          v183 = vaddq_f32(vsubq_f32(vmulq_laneq_f32(v256, v181, 3), (float32x4_t)v174), (float32x4_t)v180);
          v183.i32[3] = 0;
          *(float32x4_t *)&this->var29 = v183;
          *(btVector3 *)((char *)&this->var45 + 8) = 0u;
          v184 = (float32x4_t)a4->var0[0];
          v185 = (float32x4_t)a4->var0[1];
          v184.i32[3] = 0;
          v185.i32[3] = 0;
          v186 = (float32x4_t)a4->var0[2];
          v186.i32[3] = 0;
          v187 = (int8x16_t)vmulq_f32(vaddq_f32(vmulq_laneq_f32(v186, v183, 2), vaddq_f32(vmulq_n_f32(v184, v183.f32[0]), vmulq_lane_f32(v185, *(float32x2_t *)v183.f32, 1))), v183);
          v188 = (float32x4_t)a5->var0[0];
          v189 = (float32x4_t)a5->var0[1];
          v188.i32[3] = 0;
          v189.i32[3] = 0;
          v190 = (float32x4_t)a5->var0[2];
          v190.i32[3] = 0;
          v191 = (int8x16_t)vmulq_f32(vaddq_f32(vmulq_laneq_f32(v190, v183, 2), vaddq_f32(vmulq_n_f32(v188, v183.f32[0]), vmulq_lane_f32(v189, *(float32x2_t *)v183.f32, 1))), v183);
          this->var40.var0.var0[0] = 1.0
                                   / vadd_f32(vadd_f32(vpadd_f32(*(float32x2_t *)v187.i8, *(float32x2_t *)v187.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v187, v187, 8uLL)), vadd_f32(vpadd_f32(*(float32x2_t *)v191.i8, *(float32x2_t *)v191.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v191, v191, 8uLL))).f32[0];
        }
        goto LABEL_49;
      }
    }
    v71.i32[0] = LODWORD(this->var14.var0.var0[2].var0.var0[3]);
    v71.i32[1] = LODWORD(this->var14.var1.var0.var0[3]);
    v71.i32[2] = LODWORD(this->var15.var0.var0[0].var0.var0[3]);
    v75 = (float32x4_t)a2->var0.var0[1];
    v76 = (int8x16_t)vmulq_f32((float32x4_t)a2->var0.var0[0], v71);
    v77 = (int8x16_t)vmulq_f32(v71, v75);
    v78 = (float32x4_t)a2->var0.var0[2];
    v79 = (int8x16_t)vmulq_f32(v71, v78);
    v79.i32[3] = 0;
    v80 = vadd_f32(vpadd_f32(*(float32x2_t *)v76.i8, *(float32x2_t *)v77.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v76, v76, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v77, v77, 8uLL)));
    v81 = (float32x4_t)vextq_s8(v79, v79, 8uLL);
    v82 = vpadd_f32(vpadd_f32(*(float32x2_t *)v79.i8, *(float32x2_t *)v81.f32), 0);
    v81.i32[0] = LODWORD(this->var14.var1.var0.var0[0]);
    v81.i32[1] = LODWORD(this->var15.var0.var0[0].var0.var0[0]);
    v81.i32[2] = LODWORD(this->var15.var0.var0[1].var0.var0[0]);
    v83 = (int8x16_t)vmulq_f32((float32x4_t)a2->var0.var0[0], v81);
    v84 = (int8x16_t)vmulq_f32(v75, v81);
    v85 = vmulq_f32(v78, v81);
    v86 = (float32x4_t)vextq_s8(v84, v84, 8uLL);
    v85.i32[3] = 0;
    v87 = vadd_f32(vpadd_f32(*(float32x2_t *)v83.i8, *(float32x2_t *)v84.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v83, v83, 8uLL), *(int32x2_t *)v86.f32));
    v88 = vpadd_f32(vpadd_f32(*(float32x2_t *)v85.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v85, (int8x16_t)v85, 8uLL)), 0);
    v85.i32[0] = LODWORD(this->var14.var1.var0.var0[1]);
    v85.i32[1] = LODWORD(this->var15.var0.var0[0].var0.var0[1]);
    v85.i32[2] = LODWORD(this->var15.var0.var0[1].var0.var0[1]);
    v89 = (int8x16_t)vmulq_f32((float32x4_t)a2->var0.var0[0], v85);
    v90 = (int8x16_t)vmulq_f32(v75, v85);
    v91 = (int8x16_t)vmulq_f32(v78, v85);
    v91.i32[3] = 0;
    v92 = vadd_f32(vpadd_f32(*(float32x2_t *)v89.i8, *(float32x2_t *)v90.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v89, v89, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v90, v90, 8uLL)));
    v93 = (float32x4_t)vextq_s8(v91, v91, 8uLL);
    v94 = vpadd_f32(vpadd_f32(*(float32x2_t *)v91.i8, *(float32x2_t *)v93.f32), 0);
    v93.i32[0] = LODWORD(this->var15.var0.var0[2].var0.var0[3]);
    v93.i32[1] = LODWORD(this->var15.var1.var0.var0[3]);
    v93.i32[2] = LODWORD(this->var19);
    v95 = (int8x16_t)vmulq_f32((float32x4_t)a3->var0.var0[0], v93);
    v96 = (int8x16_t)vmulq_f32(v93, (float32x4_t)a3->var0.var0[1]);
    v97 = (int8x16_t)vmulq_f32(v93, (float32x4_t)a3->var0.var0[2]);
    v97.i32[3] = 0;
    v98 = vadd_f32(vpadd_f32(*(float32x2_t *)v95.i8, *(float32x2_t *)v96.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v95, v95, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v96, v96, 8uLL)));
    v99 = vpadd_f32(vpadd_f32(*(float32x2_t *)v97.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v97, v97, 8uLL)), 0);
    *(float32x2_t *)v100.f32 = v98;
    *(float32x2_t *)&v100.u32[2] = v99;
    *(float32x2_t *)v79.i8 = vmul_f32(v80, v98);
    LODWORD(cosval) = vadd_f32(vpadd_f32(*(float32x2_t *)v79.i8, *(float32x2_t *)v79.i8), vmul_f32(v82, v99)).u32[0];
    *(float32x2_t *)v97.i8 = vmul_f32(v87, v98);
    LODWORD(sinval) = vadd_f32(vpadd_f32(*(float32x2_t *)v97.i8, *(float32x2_t *)v97.i8), vmul_f32(v88, v99)).u32[0];
    *(float32x2_t *)v97.i8 = vmul_f32(v92, v98);
    LODWORD(v103) = vadd_f32(vpadd_f32(*(float32x2_t *)v97.i8, *(float32x2_t *)v97.i8), vmul_f32(v94, v99)).u32[0];
    if (v72 >= var28)
    {
      if (fabsf(cosval) < 0.00000011921 && fabsf(sinval) < 0.00000011921)
        goto LABEL_46;
      BYTE2(this->var43.var0.var0[3]) = 1;
      if (v72 < var28)
        goto LABEL_46;
      v244 = v94.i32[0];
      v245 = v99;
      v246 = v98;
      v247 = v88.i32[0];
      v248 = v100;
      v249 = v80;
      v250 = v82.i32[0];
      v240 = sinval;
      v242 = cosval;
      v111 = atan2f(sinval, cosval);
      if (v111 > v72)
      {
        v112 = __sincosf_stret(v72);
        cosval = v112.__cosval;
        sinval = v112.__sinval;
        v103 = 0.0;
LABEL_44:
        v80 = v249;
        v82.i32[0] = v250;
        v88.i32[0] = v247;
        v100 = v248;
        v99 = v245;
        v98 = v246;
        v94.i32[0] = v244;
        goto LABEL_46;
      }
      sinval = v240;
      v192 = v242;
      v103 = 0.0;
      if (v111 < (float)-v72)
      {
        v193 = __sincosf_stret(v72);
        cosval = v193.__cosval;
        v103 = 0.0;
        sinval = -v193.__sinval;
        goto LABEL_44;
      }
    }
    else
    {
      v104 = this->var26;
      v105 = fabsf(v103);
      if (v104 < var28)
      {
        if (fabsf(sinval) < 0.00000011921 && v105 < 0.00000011921)
        {
LABEL_49:
          if (this->var27 >= 0.0)
          {
            btConeTwistConstraint::computeTwistLimitInfo(v18, (int8x16_t *)&v260, this->var43.var0.var0, (float32x4_t *)&v259);
            v203 = this->var43.var0.var0[0];
            var27 = this->var27;
            v205 = this->var24.var0.var0[3];
            if (v203 > (float)(var27 * v205))
            {
              BYTE1(this->var43.var0.var0[3]) = 1;
              v206 = v203 - (float)(var27 * v205);
              v207 = v203 < var27;
              v208 = 1.0;
              if (v207)
              {
                v208 = 1.0;
                if (v205 < 1.0)
                  v208 = v206 / (float)(var27 + (float)((float)-var27 * v205));
              }
              this->var45.var0.var0[0] = v208;
              v209.i64[0] = 0x8000000080000000;
              v209.i64[1] = 0x8000000080000000;
              v210 = veorq_s8((int8x16_t)v259, v209);
              v211 = (int8x16_t)v253;
              v212 = (int32x2_t)vextq_s8(v210, v210, 8uLL).u64[0];
              v213 = vzip1_s32(v212, *(int32x2_t *)v210.i8);
              v214 = (float32x2_t)vextq_s8(v211, v211, 4uLL).u64[0];
              *(float32x2_t *)v209.i8 = vmul_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v211, v211, 8uLL), *(int32x2_t *)v253.f32), (float32x2_t)vext_s8(*(int8x8_t *)v210.i8, (int8x8_t)v212, 4uLL));
              v209.u64[1] = (unint64_t)vmul_f32(v214, (float32x2_t)vrev64_s32(v213));
              *(float32x2_t *)v215.i8 = vadd_f32(vmul_laneq_f32(*(float32x2_t *)v210.i8, v253, 3), vmul_f32(v214, (float32x2_t)v213));
              v215.u64[1] = (unint64_t)vadd_f32(vmul_lane_f32(*(float32x2_t *)v253.f32, *(float32x2_t *)v210.i8, 1), vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v211, v211, 0xCuLL), (float32x2_t)v213));
              v216 = vsubq_f32((float32x4_t)veorq_s8(v215, (int8x16_t)xmmword_1DD007D50), (float32x4_t)v209);
              *(int32x2_t *)v209.i8 = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v216, (int8x16_t)v216, 8uLL), *(int32x2_t *)v216.f32);
              v215.i64[0] = vextq_s8((int8x16_t)v216, (int8x16_t)v216, 4uLL).u64[0];
              v217 = vmul_f32((float32x2_t)vext_s8((int8x8_t)v254, *(int8x8_t *)v256.f32, 4uLL), *(float32x2_t *)v209.i8);
              *(float32x2_t *)v209.i8 = vmul_f32(v31, *(float32x2_t *)v209.i8);
              v209.u64[1] = (unint64_t)vmul_f32((float32x2_t)vrev64_s32(v255), *(float32x2_t *)v215.i8);
              *(float32x2_t *)v215.i8 = vadd_f32(vmul_laneq_f32(*(float32x2_t *)v216.f32, v256, 3), vmul_f32((float32x2_t)v255, *(float32x2_t *)v215.i8));
              v215.u64[1] = (unint64_t)vadd_f32(vmul_lane_f32(*(float32x2_t *)v216.f32, *(float32x2_t *)v256.f32, 1), v217);
              v218 = vaddq_f32(vsubq_f32(vmulq_laneq_f32(v256, v216, 3), (float32x4_t)v209), (float32x4_t)v215);
              v218.i32[3] = 0;
              *(float *)&this->var41 = v206;
              *(float32x4_t *)&this->var33 = v218;
              v219 = (float32x4_t)a4->var0[0];
              v220 = (float32x4_t)a4->var0[1];
              v219.i32[3] = 0;
              v220.i32[3] = 0;
              v221 = (float32x4_t)a4->var0[2];
              v221.i32[3] = 0;
              v222 = (int8x16_t)vmulq_f32(vaddq_f32(vmulq_laneq_f32(v221, v218, 2), vaddq_f32(vmulq_n_f32(v219, v218.f32[0]), vmulq_lane_f32(v220, *(float32x2_t *)v218.f32, 1))), v218);
              v223 = (float32x4_t)a5->var0[0];
              v224 = (float32x4_t)a5->var0[1];
              v223.i32[3] = 0;
              v224.i32[3] = 0;
              v225 = (float32x4_t)a5->var0[2];
              v225.i32[3] = 0;
              v226 = (int8x16_t)vmulq_f32(vaddq_f32(vmulq_laneq_f32(v225, v218, 2), vaddq_f32(vmulq_n_f32(v223, v218.f32[0]), vmulq_lane_f32(v224, *(float32x2_t *)v218.f32, 1))), v218);
              this->var40.var0.var0[1] = 1.0
                                       / vadd_f32(vadd_f32(vpadd_f32(*(float32x2_t *)v222.i8, *(float32x2_t *)v222.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v222, v222, 8uLL)), vadd_f32(vpadd_f32(*(float32x2_t *)v226.i8, *(float32x2_t *)v226.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v226, v226, 8uLL))).f32[0];
            }
            if (BYTE2(this->var43.var0.var0[3]))
            {
              v227.i64[0] = 0x8000000080000000;
              v227.i64[1] = 0x8000000080000000;
              v228 = (float32x4_t)veorq_s8((int8x16_t)v259, v227);
              v227.i64[0] = vextq_s8((int8x16_t)v228, (int8x16_t)v228, 8uLL).u64[0];
              v229 = vzip1_s32(*(int32x2_t *)v227.i8, *(int32x2_t *)v228.f32);
              v230 = (float32x2_t)vrev64_s32(v229);
              *(int32x2_t *)&v228.u32[2] = v229;
              *(float32x2_t *)v231.f32 = vmul_f32(v252, (float32x2_t)v229);
              *(float32x2_t *)&v231.u32[2] = vmul_lane_f32(*(float32x2_t *)v257.f32, *(float32x2_t *)v228.f32, 1);
              *(float32x2_t *)v227.i8 = vmul_f32((float32x2_t)v29, (float32x2_t)vext_s8(*(int8x8_t *)v228.f32, *(int8x8_t *)v227.i8, 4uLL));
              v227.u64[1] = (unint64_t)vmul_f32(v252, v230);
              v232 = vsubq_f32((float32x4_t)veorq_s8((int8x16_t)vaddq_f32(vmulq_f32(v251, v228), v231), (int8x16_t)xmmword_1DD007D50), (float32x4_t)v227);
              v233 = (float32x4_t)veorq_s8((int8x16_t)v257, (int8x16_t)xmmword_1DD007D60);
              *(int32x2_t *)v231.f32 = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v232, (int8x16_t)v232, 8uLL), *(int32x2_t *)v232.f32);
              v234 = (int32x2_t)vextq_s8((int8x16_t)v233, (int8x16_t)v233, 8uLL).u64[0];
              v235 = vzip1_s32(v234, *(int32x2_t *)v233.f32);
              v236 = (float32x2_t)vextq_s8((int8x16_t)v232, (int8x16_t)v232, 4uLL).u64[0];
              v237 = vmul_f32((float32x2_t)vext_s8((int8x8_t)v234, *(int8x8_t *)v233.f32, 4uLL), *(float32x2_t *)v231.f32);
              *(float32x2_t *)v231.f32 = vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v233.f32, (int8x8_t)v234, 4uLL), *(float32x2_t *)v231.f32);
              *(float32x2_t *)&v231.u32[2] = vmul_f32((float32x2_t)vrev64_s32(v235), v236);
              *(float32x2_t *)v238.f32 = vadd_f32(vmul_laneq_f32(*(float32x2_t *)v232.f32, v233, 3), vmul_f32((float32x2_t)v235, v236));
              *(float32x2_t *)&v238.u32[2] = vadd_f32(vmul_lane_f32(*(float32x2_t *)v232.f32, *(float32x2_t *)v233.f32, 1), v237);
              v239 = (btVector3)vaddq_f32(vsubq_f32(vmulq_laneq_f32(v233, v232, 3), v231), v238);
              v239.var0.var0[3] = 0.0;
              *(btVector3 *)((char *)&this->var45 + 8) = v239;
            }
          }
          else
          {
            this->var43.var0.var0[0] = 0.0;
          }
          return;
        }
        *(float32x2_t *)v106.f32 = v80;
        *(float32x2_t *)&v106.u32[2] = v82;
        *(int8x8_t *)v107.f32 = vext_s8((int8x8_t)v98, (int8x8_t)v99, 4uLL);
        *(float32x2_t *)&v107.u32[2] = v98;
        *(int8x8_t *)v108.f32 = vext_s8((int8x8_t)v80, (int8x8_t)v82, 4uLL);
        *(float32x2_t *)&v108.u32[2] = v80;
        v109 = (int8x16_t)vsubq_f32(vmulq_f32(v108, v100), vmulq_f32(v106, v107));
        v107.i64[0] = vextq_s8(v109, v109, 4uLL).u64[0];
        v107.i64[1] = v109.u32[0];
        BYTE2(this->var43.var0.var0[3]) = 1;
        v109.i64[0] = 0x8000000080000000;
        v109.i64[1] = 0x8000000080000000;
        v110 = (float32x4_t)veorq_s8((int8x16_t)v107, v109);
LABEL_48:
        *(float32x4_t *)&this->var29 = v110;
        goto LABEL_49;
      }
      if (fabsf(cosval) < 0.00000011921 && v105 < 0.00000011921 || (BYTE2(this->var43.var0.var0[3]) = 1, v104 < var28))
      {
LABEL_46:
        *(float32x2_t *)v86.f32 = vmla_n_f32(vmla_n_f32(vmul_n_f32(v87, sinval), v80, cosval), v92, v103);
        v86.i32[2] = vmlas_n_f32(vmlas_n_f32(sinval * v88.f32[0], cosval, v82.f32[0]), v103, v94.f32[0]);
        v195 = (int8x16_t)vmulq_f32(v86, v86);
        *(int8x8_t *)v196.f32 = vext_s8((int8x8_t)v98, (int8x8_t)v99, 4uLL);
        *(float32x2_t *)&v196.u32[2] = v98;
        v197 = vmulq_n_f32(v86, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v195.i8, *(float32x2_t *)v195.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v195, v195, 8uLL)).f32[0]));
        v198.i64[0] = vextq_s8((int8x16_t)v197, (int8x16_t)v197, 4uLL).u64[0];
        v198.i64[1] = v197.i64[0];
        v199 = (int8x16_t)vsubq_f32(vmulq_f32(v100, v198), vmulq_f32(v196, v197));
        v198.i64[0] = vextq_s8(v199, v199, 4uLL).u64[0];
        v198.i64[1] = v199.u32[0];
        v199.i64[0] = 0x8000000080000000;
        v199.i64[1] = 0x8000000080000000;
        v200 = (float32x4_t)veorq_s8((int8x16_t)v198, v199);
        *(float32x4_t *)&this->var29 = v200;
        v201 = (int8x16_t)vmulq_f32(v200, v200);
        v202 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v201.i8, *(float32x2_t *)v201.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v201, v201, 8uLL)).f32[0]);
        this->var40.var0.var0[3] = v202;
        if (fabsf(v202) < 0.00000011921)
          goto LABEL_49;
        v110 = vmulq_n_f32(v200, 1.0 / v202);
        goto LABEL_48;
      }
      v244 = v94.i32[0];
      v245 = v99;
      v246 = v98;
      v247 = v88.i32[0];
      v248 = v100;
      v249 = v80;
      v250 = v82.i32[0];
      v241 = v103;
      v243 = cosval;
      v172 = atan2f(v103, cosval);
      if (v172 > v104)
      {
        v173 = __sincosf_stret(v104);
        cosval = v173.__cosval;
        v103 = v173.__sinval;
        sinval = 0.0;
        goto LABEL_44;
      }
      v103 = v241;
      v192 = v243;
      sinval = 0.0;
      if (v172 < (float)-v104)
      {
        v194 = __sincosf_stret(v104);
        cosval = v194.__cosval;
        sinval = 0.0;
        v103 = -v194.__sinval;
        goto LABEL_44;
      }
    }
    v80 = v249;
    v82.i32[0] = v250;
    v88.i32[0] = v247;
    v100 = v248;
    v99 = v245;
    v98 = v246;
    v94.i32[0] = v244;
    cosval = v192;
    goto LABEL_46;
  }
  btMatrix3x3::setRotation(&v262, (float32x4_t *)&this[1].var1);
  v263 = 0u;
  v113 = *(float32x4_t *)((char *)&this->var14.var0.var0[2] + 12);
  v114 = *(float32x4_t *)((char *)&this->var14.var1 + 12);
  v113.i32[3] = 0;
  v114.i32[3] = 0;
  v115 = (float32x4_t)a2->var0.var0[1];
  v116 = *(float32x4_t *)((char *)this->var15.var0.var0 + 12);
  v117 = *(float32x4_t *)((char *)&this->var15.var0.var0[1] + 12);
  v116.i32[3] = 0;
  v118 = (float32x4_t)a2->var0.var0[2];
  v119 = vmlaq_lane_f32(vmulq_n_f32(v113, v118.f32[0]), v114, *(float32x2_t *)v118.f32, 1);
  v120 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v113, v115.f32[0]), v114, *(float32x2_t *)v115.f32, 1), v116, v115, 2);
  v121 = (int8x16_t)vmulq_f32((float32x4_t)a2->var0.var0[0], v117);
  v122 = (int8x16_t)vmulq_f32(v115, v117);
  v123 = (int8x16_t)vmulq_f32(v118, v117);
  v123.i32[3] = 0;
  v124 = vmlaq_lane_f32(vmulq_n_f32(v113, COERCE_FLOAT(*(_OWORD *)a2->var0.var0)), v114, *(float32x2_t *)a2->var0.var0[0].var0.var0, 1);
  *(float32x2_t *)v114.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v121.i8, *(float32x2_t *)v122.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v121, v121, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v122, v122, 8uLL)));
  *(float32x2_t *)&v114.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v123.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v123, v123, 8uLL)), 0);
  v125 = (int32x4_t)vmlaq_laneq_f32(v124, v116, (float32x4_t)a2->var0.var0[0], 2);
  v126 = (float32x4_t)a3->var0.var0[1];
  v127 = *(float32x4_t *)((char *)&this->var15.var0.var0[2] + 12);
  v128 = *(float32x4_t *)((char *)&this->var15.var1 + 12);
  v127.i32[3] = 0;
  v128.i32[3] = 0;
  v129 = *(float32x4_t *)&this->var19;
  v130 = *(float32x4_t *)&this->var23;
  v129.i32[3] = 0;
  v131 = vmlaq_laneq_f32(v119, v116, v118, 2);
  v132 = (float32x4_t)a3->var0.var0[2];
  v133 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v127, v126.f32[0]), v128, *(float32x2_t *)v126.f32, 1), v129, v126, 2);
  v134 = (int8x16_t)vmulq_f32((float32x4_t)a3->var0.var0[0], v130);
  v135 = (int8x16_t)vmulq_f32(v126, v130);
  v136 = (int8x16_t)vmulq_f32(v132, v130);
  v136.i32[3] = 0;
  v137 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v127, COERCE_FLOAT(*(_OWORD *)a3->var0.var0)), v128, *(float32x2_t *)a3->var0.var0[0].var0.var0, 1), v129, (float32x4_t)a3->var0.var0[0], 2);
  v138 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v127, v132.f32[0]), v128, *(float32x2_t *)v132.f32, 1), v129, v132, 2);
  *(float32x2_t *)v127.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v134.i8, *(float32x2_t *)v135.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v134, v134, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v135, v135, 8uLL)));
  *(float32x2_t *)&v127.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v136.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v136, v136, 8uLL)), 0);
  v139 = (float32x4_t)v262.var0[0];
  v140 = (float32x4_t)v262.var0[1];
  v139.i32[3] = 0;
  v140.i32[3] = 0;
  v141 = (float32x4_t)v262.var0[2];
  v141.i32[3] = 0;
  v142 = vmlaq_lane_f32(vmulq_n_f32(v139, v138.f32[0]), v140, *(float32x2_t *)v138.f32, 1);
  v143 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v139, v133.f32[0]), v140, *(float32x2_t *)v133.f32, 1), v141, v133, 2);
  v144 = vmulq_f32(v137, (float32x4_t)0);
  v145 = (int8x16_t)vmulq_f32(v133, (float32x4_t)0);
  v146 = (int8x16_t)vmulq_f32(v138, (float32x4_t)0);
  v146.i32[3] = 0;
  *(float32x2_t *)v144.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v144, (int8x16_t)v144, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v145, v145, 8uLL)), vpadd_f32(*(float32x2_t *)v144.f32, *(float32x2_t *)v145.i8));
  *(float32x2_t *)&v144.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v146.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v146, v146, 8uLL)), 0);
  v147 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v139, v137.f32[0]), v140, *(float32x2_t *)v137.f32, 1), v141, v137, 2);
  v148 = vmlaq_laneq_f32(v142, v141, v138, 2);
  v149 = (float32x4_t)vtrn1q_s32(v125, (int32x4_t)v120);
  *(int32x2_t *)v141.f32 = vzip2_s32(*(int32x2_t *)v131.f32, 0);
  v145.i32[0] = vextq_s8((int8x16_t)v131, (int8x16_t)v131, 8uLL).u32[0];
  v146.i64[0] = v131.u32[0];
  v131.i64[0] = vextq_s8((int8x16_t)v149, (int8x16_t)v149, 8uLL).u64[0];
  v149.i64[1] = v146.i64[0];
  v150 = vnegq_f32(vaddq_f32((float32x4_t)a2->var1, v114));
  v151 = (int8x16_t)vmulq_f32(v149, v150);
  *(int32x2_t *)v120.f32 = vzip2_s32(*(int32x2_t *)v125.i8, *(int32x2_t *)v120.f32);
  v120.i64[1] = v141.i64[0];
  v152 = vmulq_f32(v120, v150);
  v131.i64[1] = v145.u32[0];
  v153 = (int8x16_t)vmulq_f32(v131, v150);
  v153.i32[3] = 0;
  v154 = vaddq_f32((float32x4_t)a3->var1, v127);
  *(float32x2_t *)v152.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v151, v151, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v152, (int8x16_t)v152, 8uLL)), vpadd_f32(*(float32x2_t *)v151.i8, *(float32x2_t *)v152.f32));
  *(float32x2_t *)&v152.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v153.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v153, v153, 8uLL)), 0);
  v149.i32[3] = 0;
  v120.i32[3] = 0;
  v131.i32[3] = 0;
  v155 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v149, v143.f32[0]), v120, *(float32x2_t *)v143.f32, 1), v131, v143, 2);
  v156 = (int8x16_t)vmulq_f32(v147, v152);
  v157 = vmulq_f32(v143, v152);
  v158 = (int8x16_t)vmulq_f32(v148, v152);
  v158.i32[3] = 0;
  *(float32x2_t *)v157.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v156, v156, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v157, (int8x16_t)v157, 8uLL)), vpadd_f32(*(float32x2_t *)v156.i8, *(float32x2_t *)v157.f32));
  *(float32x2_t *)&v157.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v158.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v158, v158, 8uLL)), 0);
  v260.var0[0] = (btVector3)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v149, v147.f32[0]), v120, *(float32x2_t *)v147.f32, 1), v131, v147, 2);
  v260.var0[1] = (btVector3)v155;
  v260.var0[2] = (btVector3)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v149, v148.f32[0]), v120, *(float32x2_t *)v148.f32, 1), v131, v148, 2);
  v261 = vaddq_f32(vaddq_f32(v154, v144), v157);
  btMatrix3x3::getRotation(&v260, &v259);
  v159.i64[0] = *(_QWORD *)v259.var0.var0;
  v159.i64[1] = LODWORD(v259.var0.var0[2]);
  v160 = (int8x16_t)vmulq_f32(v159, v159);
  LODWORD(v161) = vadd_f32(vpadd_f32(*(float32x2_t *)v160.i8, *(float32x2_t *)v160.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v160, v160, 8uLL)).u32[0];
  if (fabsf(v161) >= 0.00000011921)
  {
    *(float32x4_t *)&this->var29 = vmulq_n_f32(v159, 1.0 / sqrtf(v161));
    v162 = v259.var0.var0[3];
    if (v259.var0.var0[3] < -1.0)
      v162 = -1.0;
    if (v162 > 1.0)
      v162 = 1.0;
    v163 = acosf(v162);
    v164 = v163 + v163;
    this->var40.var0.var0[3] = v164;
    if (fabsf(v164) >= 0.00000011921)
      BYTE2(this->var43.var0.var0[3]) = 1;
  }
}

unint64_t btConeTwistConstraint::getInfo2(uint64_t a1, uint64_t a2)
{
  return btConeTwistConstraint::getInfo2NonVirtual(a1, a2, (btTransform *)(*(_QWORD *)(a1 + 40) + 16), (btTransform *)(*(_QWORD *)(a1 + 48) + 16), (btMatrix3x3 *)(*(_QWORD *)(a1 + 40) + 304), (btMatrix3x3 *)(*(_QWORD *)(a1 + 48) + 304));
}

unint64_t btConeTwistConstraint::getInfo2NonVirtual(uint64_t a1, uint64_t a2, btTransform *a3, btTransform *a4, btMatrix3x3 *a5, btMatrix3x3 *a6)
{
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  int8x16_t v15;
  int8x16_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float32x4_t v20;
  _DWORD *v21;
  uint64_t v22;
  float32x4_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  float *v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t result;
  int v39;
  uint64_t v40;
  uint64_t v41;
  float v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  float *v54;
  int8x16_t v55;
  int8x16_t v56;
  float32x4_t v57;
  uint64_t v58;
  float v59;
  float32x4_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  float *v64;
  int8x16_t v65;
  float32x4_t v66;

  btConeTwistConstraint::calcAngleInfo2((btConeTwistConstraint *)a1, a3, a4, a5, a6);
  v10 = 0;
  v11 = *(_DWORD **)(a2 + 8);
  *v11 = 1065353216;
  v12 = *(int *)(a2 + 40);
  v11[v12 + 1] = 1065353216;
  v11[2 * (int)v12 + 2] = 1065353216;
  v13 = *(float32x4_t *)(a1 + 416);
  v14 = vmulq_f32((float32x4_t)a3->var0.var0[0], v13);
  v15 = (int8x16_t)vmulq_f32(v13, (float32x4_t)a3->var0.var0[1]);
  v16 = (int8x16_t)vmulq_f32(v13, (float32x4_t)a3->var0.var0[2]);
  v16.i32[3] = 0;
  *(float32x2_t *)v14.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v14.f32, *(float32x2_t *)v15.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL)));
  *(float32x2_t *)&v14.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v16.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL)), 0);
  v17 = *(_QWORD *)(a2 + 16);
  v18 = v17 + 4 * v12;
  v19 = v17 + 8 * v12;
  v20 = vnegq_f32(v14);
  *(_DWORD *)v17 = 0;
  *(float *)(v17 + 4) = -v20.f32[2];
  *(_DWORD *)(v17 + 8) = v20.i32[1];
  *(_DWORD *)(v17 + 12) = 0;
  *(_DWORD *)v18 = v20.i32[2];
  *(_DWORD *)(v18 + 4) = 0;
  *(float *)(v18 + 8) = -v20.f32[0];
  *(_DWORD *)(v18 + 12) = 0;
  *(float *)v19 = -v20.f32[1];
  *(_DWORD *)(v19 + 4) = v20.i32[0];
  *(_QWORD *)(v19 + 8) = 0;
  v21 = *(_DWORD **)(a2 + 24);
  *v21 = -1082130432;
  v22 = *(int *)(a2 + 40);
  v21[v22 + 1] = -1082130432;
  v21[2 * (int)v22 + 2] = -1082130432;
  v66 = v14;
  v23 = *(float32x4_t *)(a1 + 480);
  v24 = (int8x16_t)vmulq_f32((float32x4_t)a4->var0.var0[0], v23);
  v25 = (int8x16_t)vmulq_f32(v23, (float32x4_t)a4->var0.var0[1]);
  v26 = (int8x16_t)vmulq_f32(v23, (float32x4_t)a4->var0.var0[2]);
  v26.i32[3] = 0;
  *(float32x2_t *)v24.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v24.i8, *(float32x2_t *)v25.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL)));
  *(float32x2_t *)v26.i8 = vpadd_f32(vpadd_f32(*(float32x2_t *)v26.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL)), 0);
  v27 = *(_QWORD *)(a2 + 32);
  v28 = v27 + 4 * v22;
  v29 = v27 + 8 * v22;
  *(_DWORD *)v27 = 0;
  *(float *)(v27 + 4) = -*(float *)v26.i32;
  *(_DWORD *)(v27 + 8) = v24.i32[1];
  *(_DWORD *)(v27 + 12) = 0;
  *(_QWORD *)v28 = v26.u32[0];
  *(float *)(v28 + 8) = -*(float *)v24.i32;
  *(_DWORD *)(v28 + 12) = 0;
  *(float *)v29 = -*(float *)&v24.i32[1];
  *(_DWORD *)(v29 + 4) = v24.i32[0];
  v24.i64[1] = v26.i64[0];
  v65 = v24;
  *(_QWORD *)(v29 + 8) = 0;
  v30 = *(_DWORD *)(a1 + 688);
  v31 = (float *)(a1 + 696);
  if ((v30 & 2) == 0)
    v31 = (float *)(a2 + 4);
  v32 = *v31 * *(float *)a2;
  v33 = *(_QWORD *)(a2 + 48);
  v34 = *(int *)(a2 + 40);
  v35 = 12;
  v37 = *(_QWORD *)(a2 + 64);
  v36 = *(_QWORD *)(a2 + 72);
  result = 4286578687;
  do
  {
    *(float *)(v33 + v10) = v32
                          * (float)((float)((float)(*(float *)&v65.i32[v35 - 12] + a4->var0.var0[0].var0.var0[v35])
                                          - v66.f32[v35 - 12])
                                  - a3->var0.var0[0].var0.var0[v35]);
    *(_DWORD *)(v37 + v10) = -8388609;
    *(_DWORD *)(v36 + v10) = 2139095039;
    if ((v30 & 1) != 0)
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v10) = *(_DWORD *)(a1 + 692);
    v10 += 4 * v34;
    ++v35;
  }
  while (v35 != 15);
  v39 = 3 * v34;
  if (*(_BYTE *)(a1 + 594))
  {
    v40 = *(_QWORD *)(a2 + 16);
    v41 = *(_QWORD *)(a2 + 32);
    v42 = *(float *)(a1 + 524);
    if (*(float *)(a1 + 512) >= v42 || *(float *)(a1 + 516) >= v42)
    {
      v57 = vmulq_n_f32(vmulq_n_f32(*(float32x4_t *)(a1 + 528), *(float *)(a1 + 504)), *(float *)(a1 + 504));
      *(_DWORD *)(v40 + 4 * v39) = v57.i32[0];
      result = 12 * v34 + 4;
      *(_DWORD *)(v40 + result) = v57.i32[1];
      v58 = 4 * v39 + 8;
      *(_DWORD *)(v40 + v58) = v57.i32[2];
      *(float *)(v41 + 4 * v39) = -v57.f32[0];
      *(float *)(v41 + result) = -v57.f32[1];
      *(float *)(v41 + v58) = -v57.f32[2];
      *(float *)(v33 + 4 * v39) = (float)(*(float *)a2 * *(float *)(a1 + 500)) * *(float *)(a1 + 572);
      if ((v30 & 4) != 0)
        *(_DWORD *)(*(_QWORD *)(a2 + 56) + 4 * v39) = *(_DWORD *)(a1 + 700);
      *(_DWORD *)(v37 + 4 * v39) = 0;
      if (!*(_BYTE *)(a1 + 624) || (v59 = *(float *)(a1 + 656), v59 < 0.0))
        v59 = 3.4028e38;
      *(float *)(v36 + 4 * v39) = v59;
      v39 = 4 * v34;
    }
    else
    {
      v43 = *(float32x4_t *)(a1 + 368);
      v44 = *(float32x4_t *)(a1 + 384);
      v43.i32[3] = 0;
      v44.i32[3] = 0;
      v45 = *(float32x4_t *)(a1 + 400);
      v45.i32[3] = 0;
      v46 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v43, COERCE_FLOAT(*(_OWORD *)&a3->var0.var0[1])), v44, *(float32x2_t *)a3->var0.var0[1].var0.var0, 1), v45, (float32x4_t)a3->var0.var0[1], 2);
      v47 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v43, COERCE_FLOAT(*(_OWORD *)a3->var0.var0)), v44, *(float32x2_t *)a3->var0.var0[0].var0.var0, 1), v45, (float32x4_t)a3->var0.var0[0], 2);
      v48 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v43, COERCE_FLOAT(*(_OWORD *)&a3->var0.var0[2])), v44, *(float32x2_t *)a3->var0.var0[2].var0.var0, 1), v45, (float32x4_t)a3->var0.var0[2], 2);
      v45.i64[0] = __PAIR64__(v46.u32[1], v47.u32[1]);
      v45.i32[2] = v48.i32[1];
      v49.i64[0] = __PAIR64__(v46.u32[2], v47.u32[2]);
      v49.i64[1] = v48.u32[2];
      v50 = 4 * v39;
      *(int32x2_t *)(v40 + v50) = vzip2_s32(*(int32x2_t *)v47.f32, *(int32x2_t *)v46.f32);
      v50 += 8;
      *(_DWORD *)(v40 + v50) = v48.i32[1];
      v51 = 16 * v34;
      *(_DWORD *)(v40 + 16 * v34) = v47.i32[2];
      v52 = (unint64_t)(4 * (int)v34) >> 2;
      v53 = (16 * v52) | 4;
      *(_DWORD *)(v40 + v53) = v46.i32[2];
      result = (16 * v52) | 8;
      *(_DWORD *)(v40 + result) = v48.i32[2];
      v54 = (float *)(v41 + 4 * v39);
      *v54 = -v47.f32[1];
      v54[1] = -v46.f32[1];
      *(float *)(v41 + v50) = -v48.f32[1];
      *(float *)(v41 + v51) = -v47.f32[2];
      *(float *)(v41 + v53) = -v46.f32[2];
      *(float *)(v41 + result) = -v48.f32[2];
      v47.f32[0] = *(float *)a2 * *(float *)(a1 + 504);
      v55 = (int8x16_t)vmulq_f32(v45, *(float32x4_t *)(a1 + 528));
      *(float *)(v33 + 4 * v39) = v47.f32[0]
                                  * vadd_f32(vpadd_f32(*(float32x2_t *)v55.i8, *(float32x2_t *)v55.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v55, v55, 8uLL)).f32[0];
      v56 = (int8x16_t)vmulq_f32(v49, *(float32x4_t *)(a1 + 528));
      *(float *)(v33 + v51) = v47.f32[0]
                            * vadd_f32(vpadd_f32(*(float32x2_t *)v56.i8, *(float32x2_t *)v56.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v56, v56, 8uLL)).f32[0];
      v37 = *(_QWORD *)(a2 + 64);
      *(_DWORD *)(v37 + 4 * v39) = -8388609;
      v36 = *(_QWORD *)(a2 + 72);
      *(_DWORD *)(v36 + 4 * v39) = 2139095039;
      *(_DWORD *)(v37 + v51) = -8388609;
      *(_DWORD *)(v36 + v51) = 2139095039;
      v39 = 5 * v34;
    }
  }
  if (*(_BYTE *)(a1 + 593))
  {
    v60 = vmulq_n_f32(vmulq_n_f32(*(float32x4_t *)(a1 + 544), *(float *)(a1 + 504)), *(float *)(a1 + 504));
    v61 = *(_QWORD *)(a2 + 16);
    v62 = *(_QWORD *)(a2 + 32);
    v63 = 4 * v39;
    *(_QWORD *)(v61 + v63) = v60.i64[0];
    v63 += 8;
    *(_DWORD *)(v61 + v63) = v60.i32[2];
    v64 = (float *)(v62 + 4 * v39);
    *v64 = -v60.f32[0];
    v64[1] = -v60.f32[1];
    *(float *)(v62 + v63) = -v60.f32[2];
    *(float *)(*(_QWORD *)(a2 + 48) + 4 * v39) = (float)(*(float *)a2 * *(float *)(a1 + 500)) * *(float *)(a1 + 576);
    if ((v30 & 4) != 0)
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + 4 * v39) = *(_DWORD *)(a1 + 700);
    if (*(float *)(a1 + 520) <= 0.0)
    {
      *(_DWORD *)(v37 + 4 * v39) = -8388609;
      goto LABEL_24;
    }
    if (*(float *)(a1 + 576) > 0.0)
    {
      *(_DWORD *)(v37 + 4 * v39) = 0;
LABEL_24:
      *(_DWORD *)(v36 + 4 * v39) = 2139095039;
      return result;
    }
    *(_DWORD *)(v37 + 4 * v39) = -8388609;
    *(_DWORD *)(v36 + 4 * v39) = 0;
  }
  return result;
}

void btConeTwistConstraint::buildJacobian(btConeTwistConstraint *this)
{
  btRigidBody *var8;
  btRigidBody *var9;
  float32x4_t v4;
  float32x4_t v5;
  int8x16_t v6;
  int8x16_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  int8x16_t v11;
  int8x16_t v12;
  float32x4_t v13;
  float32x4_t v14;
  int8x16_t v15;
  float v16;
  int8x16_t v17;
  float32x2_t v18;
  uint64_t v19;
  BOOL v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  btJacobianEntry *v37;
  btRigidBody *v38;
  btRigidBody *v39;
  int32x4_t v40;
  int32x4_t v41;
  int8x16_t v42;
  int8x16_t v43;
  float32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int8x16_t v47;
  int8x16_t v48;
  float32x4_t v49;
  btVector3 v50;
  btVector3 v51;
  uint64_t v52;
  float32x4_t v53;
  float32x4_t v54;
  btVector3 v55;
  btVector3 v56;
  btMatrix3x3 v57;
  btMatrix3x3 v58;
  __int128 v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  if (HIBYTE(this->var43.var0.var0[3]))
  {
    this->var10 = 0.0;
    *(_QWORD *)&this->var43.var0.var0[1] = 0;
    *(_OWORD *)&this[1].var8 = 0u;
    if (!LOBYTE(this->var43.var0.var0[3]))
    {
      var8 = this->var8;
      var9 = this->var9;
      v4 = *(float32x4_t *)((char *)&this->var15.var0.var0[1] + 12);
      v5 = vmulq_f32(*((float32x4_t *)var8 + 1), v4);
      v6 = (int8x16_t)vmulq_f32(v4, *((float32x4_t *)var8 + 2));
      v7 = (int8x16_t)vmulq_f32(v4, *((float32x4_t *)var8 + 3));
      v7.i32[3] = 0;
      *(float32x2_t *)v5.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v5.f32, *(float32x2_t *)v6.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v5, (int8x16_t)v5, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)));
      *(float32x2_t *)&v5.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)), 0);
      v8 = vaddq_f32(v5, *((float32x4_t *)var8 + 4));
      v9 = *(float32x4_t *)&this->var23;
      v10 = vmulq_f32(*((float32x4_t *)var9 + 1), v9);
      v11 = (int8x16_t)vmulq_f32(v9, *((float32x4_t *)var9 + 2));
      v12 = (int8x16_t)vmulq_f32(v9, *((float32x4_t *)var9 + 3));
      v12.i32[3] = 0;
      *(float32x2_t *)v10.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v10.f32, *(float32x2_t *)v11.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL)));
      *(float32x2_t *)&v10.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v12.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL)), 0);
      v13 = vaddq_f32(v10, *((float32x4_t *)var9 + 4));
      v14 = vsubq_f32(v13, v8);
      v14.i32[3] = 0;
      v15 = (int8x16_t)vmulq_f32(v14, v14);
      v16 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL), vpadd_f32(*(float32x2_t *)v15.i8, *(float32x2_t *)v15.i8)).f32[0];
      if (v16 <= 0.00000011921)
      {
        v59 = xmmword_1DD007970;
        v18 = 0;
        v17.i32[0] = 1.0;
      }
      else
      {
        v17 = (int8x16_t)vmulq_n_f32(v14, 1.0 / sqrtf(v16));
        v59 = (__int128)v17;
        v18 = (float32x2_t)vextq_s8(v17, v17, 4uLL).u64[0];
      }
      v19 = 0;
      v20 = fabsf(v18.f32[1]) <= 0.70711;
      v21 = vmul_f32(v18, v18).f32[0] + (float)(*(float *)v17.i32 * *(float *)v17.i32);
      v22 = 1.0 / sqrtf(v21);
      v23 = -(float)(v18.f32[0] * v22);
      v24 = *(float *)v17.i32 * v22;
      v25 = -(float)(v18.f32[1] * (float)(*(float *)v17.i32 * v22));
      v26 = v18.f32[1] * v23;
      v27 = v21 * v22;
      v28 = vmlas_n_f32(v18.f32[1] * v18.f32[1], v18.f32[0], v18.f32[0]);
      v29 = sqrtf(v28);
      v30 = -(float)(v18.f32[1] * (float)(1.0 / v29));
      v31 = (float)(1.0 / v29) * v18.f32[0];
      v32 = v28 * (float)(1.0 / v29);
      v33 = -(float)(*(float *)v17.i32 * v31);
      v34 = v30 * *(float *)v17.i32;
      if (v20)
      {
        v30 = v24;
        v31 = 0.0;
      }
      else
      {
        v23 = 0.0;
      }
      if (v20)
        v35 = v25;
      else
        v35 = v32;
      if (v20)
        v36 = v26;
      else
        v36 = v33;
      v60 = v23;
      v61 = v30;
      if (v20)
        v34 = v27;
      v62 = v31;
      v63 = v35;
      v64 = v36;
      v65 = v34;
      v37 = (btJacobianEntry *)&this->var13[0].var0.var0.var0[2];
      v53 = v13;
      v54 = v8;
      do
      {
        v38 = this->var8;
        v39 = this->var9;
        v40 = *((int32x4_t *)v38 + 1);
        v41 = *((int32x4_t *)v38 + 2);
        v42 = (int8x16_t)vtrn1q_s32(v40, v41);
        v43 = *((int8x16_t *)v38 + 3);
        v44 = *((float32x4_t *)v38 + 4);
        *(int32x2_t *)v40.i8 = vzip2_s32(*(int32x2_t *)v40.i8, *(int32x2_t *)v41.i8);
        v41.i64[0] = vextq_s8(v42, v42, 8uLL).u64[0];
        v42.i64[1] = v43.u32[0];
        v40.u64[1] = (unint64_t)vzip2_s32(*(int32x2_t *)v43.i8, 0);
        v41.i64[1] = vextq_s8(v43, v43, 8uLL).u32[0];
        v58.var0[0] = (btVector3)v42;
        v58.var0[1] = (btVector3)v40;
        v58.var0[2] = (btVector3)v41;
        v45 = *((int32x4_t *)v39 + 1);
        v46 = *((int32x4_t *)v39 + 2);
        v47 = (int8x16_t)vtrn1q_s32(v45, v46);
        v48 = *((int8x16_t *)v39 + 3);
        v49 = *((float32x4_t *)v39 + 4);
        *(int32x2_t *)v45.i8 = vzip2_s32(*(int32x2_t *)v45.i8, *(int32x2_t *)v46.i8);
        v46.i64[0] = vextq_s8(v47, v47, 8uLL).u64[0];
        v47.i64[1] = v48.u32[0];
        v45.u64[1] = (unint64_t)vzip2_s32(*(int32x2_t *)v48.i8, 0);
        v46.i64[1] = vextq_s8(v48, v48, 8uLL).u32[0];
        v57.var0[0] = (btVector3)v47;
        v57.var0[1] = (btVector3)v45;
        v57.var0[2] = (btVector3)v46;
        v50 = (btVector3)vsubq_f32(v8, v44);
        v50.var0.var0[3] = 0.0;
        v56 = v50;
        v51 = (btVector3)vsubq_f32(v13, v49);
        v51.var0.var0[3] = 0.0;
        v55 = v51;
        btJacobianEntry::btJacobianEntry(v37, &v58, &v57, (int8x16_t *)&v56, (int8x16_t *)&v55, (float32x4_t *)((char *)&v59 + v19), (float32x4_t *)v38 + 28, *((float *)v38 + 96), (float32x4_t *)v39 + 28, *((float *)v39 + 96));
        v13 = v53;
        v8 = v54;
        v19 += 16;
        v37 = (btJacobianEntry *)(v52 + 96);
      }
      while (v19 != 48);
    }
    btConeTwistConstraint::calcAngleInfo2(this, (const btTransform *)((char *)this->var8 + 16), (const btTransform *)((char *)this->var9 + 16), (const btMatrix3x3 *)((char *)this->var8 + 304), (const btMatrix3x3 *)((char *)this->var9 + 304));
  }
}

void btConeTwistConstraint::solveConstraintObsolete(btConeTwistConstraint *this, float32x4_t *a2, float32x4_t *a3, float a4, uint64_t a5, btTransform *a6)
{
  uint64_t v10;
  btRigidBody *var9;
  btRigidBody *var8;
  float32x4_t v13;
  float32x4_t v14;
  int8x16_t v15;
  int8x16_t v16;
  float32x4_t v17;
  int8x16_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int8x16_t v21;
  float32x4_t v22;
  int8x16_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int8x16_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  int8x16_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  int8x16_t v39;
  int8x16_t v40;
  float v41;
  float32x4_t v42;
  btRigidBody *v43;
  int8x16_t v44;
  float32x4_t v45;
  int8x16_t v46;
  int8x16_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  int8x16_t v52;
  float32x4_t v53;
  btRigidBody *v54;
  float32x4_t v55;
  int8x16_t v56;
  int8x16_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  btRigidBody *v61;
  btRigidBody *v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  btVector3 v68;
  btTransform *v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  float32x4_t v81;
  int32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  int32x2_t v86;
  unsigned __int32 v87;
  int8x16_t v88;
  float32x4_t v89;
  int8x16_t v90;
  float32x4_t v91;
  int8x16_t v92;
  float32x4_t v93;
  float32x4_t v94;
  int8x16_t v95;
  float32x4_t v96;
  int8x16_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  int8x16_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  int8x16_t v107;
  int8x16_t v108;
  float32x4_t v109;
  float32x4_t v110;
  int8x16_t v111;
  int8x16_t v112;
  float32x4_t v113;
  int8x16_t v114;
  int8x16_t v115;
  int8x16_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float *v120;
  float32x4_t v121;
  float *v122;
  float32x4_t v123;
  float32x4_t v124;
  int8x16_t v125;
  float32x2_t v126;
  float v127;
  float v128;
  float32x4_t v129;
  float v130;
  btRigidBody *v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  int8x16_t v135;
  int8x16_t v136;
  float32x2_t v137;
  float v138;
  float32x4_t v139;
  btRigidBody *v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  int8x16_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  int8x16_t v148;
  float v149;
  btRigidBody *v150;
  btRigidBody *v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  int8x16_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x2_t v159;
  float32x4_t v160;
  int8x16_t v161;
  float32x4_t v162;
  float var4;
  float v164;
  float32x4_t v165;
  float32x4_t v166;
  int8x16_t v167;
  float v168;
  int8x16_t v169;
  float v170;
  float32x4_t v171;
  float32x4_t v172;
  int8x16_t v173;
  int8x16_t v174;
  float32x4_t v175;
  float32x4_t v176;
  float32x4_t v177;
  btRigidBody *v178;
  float32x4_t v179;
  int8x16_t v180;
  int8x16_t v181;
  float v182;
  float32x4_t v183;
  float32x4_t v184;
  float32x4_t v185;
  float v186;
  float32x4_t v187;
  float32x4_t v188;
  int8x16_t v189;
  float v190;
  btRigidBody *v191;
  btRigidBody *v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t v195;
  float32x4_t v196;
  int8x16_t v197;
  float32x4_t v198;
  float32x4_t v199;
  float32x4_t v200;
  int8x16_t v201;
  float32x4_t v202;
  float32x4_t v203;
  int8x16_t v204;
  float v205;
  float32x4_t v206;
  int8x16_t v207;
  float32x4_t v208;
  int8x16_t v209;
  float32x4_t v210;
  float32x4_t v211;
  btRigidBody *v212;
  float32x4_t v213;
  int8x16_t v214;
  int8x16_t v215;
  float v216;
  float32x4_t v217;
  float32x4_t v218;
  float32x4_t v219;
  float32x4_t v220;
  float v221;
  float v222;
  float32x4_t v223;
  float32x4_t v224;
  int8x16_t v225;
  float v226;
  float v227;
  float v228;
  float32x4_t v229;
  float32x4_t v230;
  int8x16_t v231;
  float32x4_t v232;
  float32x4_t v233;
  float32x4_t v234;
  int8x16_t v235;
  float v236;
  float32x4_t v237;
  btRigidBody *v238;
  float32x4_t v239;
  int8x16_t v240;
  int8x16_t v241;
  float32x4_t v242;
  float32x4_t v243;
  float32x4_t v244;
  btRigidBody *v245;
  float32x4_t v246;
  int8x16_t v247;
  int8x16_t v248;
  float v249;
  float32x4_t v250;
  float32x4_t v251;
  float32x4_t v252;
  float v253;
  float v254;
  float32x4_t v255;
  float32x4_t v256;
  int8x16_t v257;
  float v258;
  float v259;
  float v260;
  float v261;
  float v262;
  btRigidBody *v263;
  float32x4_t v264;
  int8x16_t v265;
  int8x16_t v266;
  float32x4_t v267;
  float32x4_t v268;
  float32x4_t v269;
  btRigidBody *v270;
  float32x4_t v271;
  float32x4_t v272;
  int8x16_t v273;
  int8x16_t v274;
  float v275;
  float32x4_t v276;
  float32x4_t v277;
  float32x4_t v278;
  float32x4_t v279;
  btTransform v280;
  btTransform v281;
  btMatrix3x3 v282;
  __int128 v283;
  btMatrix3x3 v284;
  float32x4_t v285;
  btTransform v286;
  float32x4_t v287;
  btVector3 v288;
  btVector3 v289;
  float32x4_t v290[3];
  float32x4_t v291;
  float32x4_t v292[3];
  float32x4_t v293;
  float v294;
  btTransform v295;

  if (!HIBYTE(this->var43.var0.var0[3]))
    return;
  if (!LOBYTE(this->var43.var0.var0[3]))
  {
    v10 = 0;
    var8 = this->var8;
    var9 = this->var9;
    v13 = *((float32x4_t *)var9 + 4);
    v14 = *(float32x4_t *)&this->var23;
    v15 = (int8x16_t)vmulq_f32(*((float32x4_t *)var9 + 1), v14);
    v16 = (int8x16_t)vmulq_f32(v14, *((float32x4_t *)var9 + 2));
    *(float32x2_t *)v17.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v15.i8, *(float32x2_t *)v16.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL)));
    v18 = (int8x16_t)vmulq_f32(v14, *((float32x4_t *)var9 + 3));
    v18.i32[3] = 0;
    *(float32x2_t *)&v17.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v18.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL)), 0);
    v19 = *(float32x4_t *)((char *)&this->var15.var0.var0[1] + 12);
    v20 = vmulq_f32(*((float32x4_t *)var8 + 1), v19);
    v21 = (int8x16_t)vmulq_f32(v19, *((float32x4_t *)var8 + 2));
    v22 = *((float32x4_t *)var8 + 4);
    v23 = (int8x16_t)vmulq_f32(v19, *((float32x4_t *)var8 + 3));
    v23.i32[3] = 0;
    *(float32x2_t *)v20.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v21.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL)));
    *(float32x2_t *)&v20.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v23.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL)), 0);
    v24 = vaddq_f32(v20, v22);
    v25 = vsubq_f32(v24, v22);
    v21.i64[0] = vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL).u64[0];
    v25.i32[3] = 0;
    v26 = vaddq_f32(v17, v13);
    v27 = vsubq_f32(v26, v13);
    v17.i64[0] = vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL).u64[0];
    v27.i32[3] = 0;
    v28 = vaddq_f32(a2[12], a2[5]);
    v29.i64[0] = vextq_s8((int8x16_t)v28, (int8x16_t)v28, 4uLL).u64[0];
    v29.i64[1] = v28.i64[0];
    *(int8x8_t *)v30.f32 = vext_s8(*(int8x8_t *)v25.f32, *(int8x8_t *)v21.i8, 4uLL);
    v30.i64[1] = v25.i64[0];
    v31 = (int8x16_t)vsubq_f32(vmulq_f32(v30, v28), vmulq_f32(v29, v25));
    v28.i64[0] = vextq_s8(v31, v31, 4uLL).u64[0];
    v28.i64[1] = v31.i64[0];
    v32 = vaddq_f32(a3[12], a3[5]);
    v33.i64[0] = vextq_s8((int8x16_t)v32, (int8x16_t)v32, 4uLL).u64[0];
    v33.i64[1] = v32.i64[0];
    *(int8x8_t *)v34.f32 = vext_s8(*(int8x8_t *)v27.f32, *(int8x8_t *)v17.f32, 4uLL);
    v34.i64[1] = v27.i64[0];
    v35 = (int8x16_t)vsubq_f32(vmulq_f32(v34, v32), vmulq_f32(v33, v27));
    v32.i64[0] = vextq_s8(v35, v35, 4uLL).u64[0];
    v32.i64[1] = v35.i64[0];
    v36 = vsubq_f32(vaddq_f32(vaddq_f32(a2[11], a2[4]), v28), vaddq_f32(vaddq_f32(a3[11], a3[4]), v32));
    v36.i32[3] = 0;
    v37 = vsubq_f32(v24, v26);
    v37.i32[3] = 0;
    do
    {
      v38 = *(float32x4_t *)((char *)&this->var13[0].var0 + v10 * 4 + 8);
      v39 = (int8x16_t)vmulq_f32(v38, v36);
      v40 = (int8x16_t)vmulq_f32(v38, v37);
      v41 = (float)((float)((float)(-0.3
                                  * vadd_f32(vpadd_f32(*(float32x2_t *)v40.i8, *(float32x2_t *)v40.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v40, v40, 8uLL)).f32[0])/ a4)* (float)(1.0 / this->var13[1].var0.var0.var0[v10 + 1]))- (float)(vadd_f32(vpadd_f32(*(float32x2_t *)v39.i8, *(float32x2_t *)v39.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v39, v39, 8uLL)).f32[0]* (float)(1.0 / this->var13[1].var0.var0.var0[v10 + 1]));
      this->var10 = this->var10 + v41;
      *(int8x8_t *)v42.f32 = vext_s8(*(int8x8_t *)v38.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL), 4uLL);
      v42.i64[1] = v38.i64[0];
      if (a2[13].i64[0])
      {
        v43 = this->var8;
        v44 = (int8x16_t)vsubq_f32(vmulq_f32(v42, v25), vmulq_f32(v30, v38));
        v45.i64[0] = vextq_s8(v44, v44, 4uLL).u64[0];
        v45.i64[1] = v44.i64[0];
        v46 = (int8x16_t)vmulq_f32(*((float32x4_t *)v43 + 21), v45);
        v45.i32[3] = 0;
        v47 = (int8x16_t)vmulq_f32(*((float32x4_t *)v43 + 19), v45);
        v48 = vmulq_f32(*((float32x4_t *)v43 + 20), v45);
        v46.i32[3] = 0;
        *(float32x2_t *)v48.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v47.i8, *(float32x2_t *)v48.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v47, v47, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v48, (int8x16_t)v48, 8uLL)));
        *(float32x2_t *)&v48.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v46.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v46, v46, 8uLL)), 0);
        v49 = vmulq_n_f32(vmulq_n_f32(v38, *((float *)v43 + 96)), v41);
        v49.i32[3] = 0;
        v50 = vmulq_n_f32(a2[6], v41);
        v50.i32[3] = 0;
        v51 = vaddq_f32(a2[5], vmulq_f32(v48, v50));
        a2[4] = vaddq_f32(a2[4], vmulq_f32(a2[7], v49));
        a2[5] = v51;
      }
      if (a3[13].i64[0])
      {
        v52 = (int8x16_t)vsubq_f32(vmulq_f32(v42, v27), vmulq_f32(v34, v38));
        v53.i64[0] = vextq_s8(v52, v52, 4uLL).u64[0];
        v53.i64[1] = v52.u32[0];
        *(float *)v52.i32 = -v41;
        v54 = this->var9;
        v55 = vmulq_f32(*((float32x4_t *)v54 + 19), v53);
        v56 = (int8x16_t)vmulq_f32(*((float32x4_t *)v54 + 20), v53);
        *(float32x2_t *)v55.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v55.f32, *(float32x2_t *)v56.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v55, (int8x16_t)v55, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v56, v56, 8uLL)));
        v57 = (int8x16_t)vmulq_f32(*((float32x4_t *)v54 + 21), v53);
        v57.i32[3] = 0;
        *(float32x2_t *)&v55.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v57.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v57, v57, 8uLL)), 0);
        v58 = vmulq_n_f32(vmulq_n_f32(*(float32x4_t *)((char *)&this->var13[0].var0 + v10 * 4 + 8), *((float *)v54 + 96)), *(float *)v52.i32);
        v58.i32[3] = 0;
        v59 = vmulq_n_f32(a3[6], *(float *)v52.i32);
        v59.i32[3] = 0;
        v60 = vaddq_f32(a3[5], vmulq_f32(v55, v59));
        a3[4] = vaddq_f32(a3[4], vmulq_f32(a3[7], v58));
        a3[5] = v60;
      }
      v10 += 24;
    }
    while (v10 != 72);
  }
  if (LOBYTE(this->var48))
  {
    v61 = this->var8;
    v62 = this->var9;
    v63 = *((float32x4_t *)v61 + 2);
    v64 = *((float32x4_t *)v61 + 3);
    v65 = *((float32x4_t *)v61 + 4);
    v292[0] = *((float32x4_t *)v61 + 1);
    v292[1] = v63;
    v292[2] = v64;
    v293 = v65;
    v66 = *((float32x4_t *)v62 + 2);
    v290[0] = *((float32x4_t *)v62 + 1);
    v290[1] = v66;
    v67 = *((float32x4_t *)v62 + 4);
    v290[2] = *((float32x4_t *)v62 + 3);
    v291 = v67;
    v68 = (btVector3)vaddq_f32(a2[12], a2[5]);
    v288 = (btVector3)vaddq_f32(a3[12], a3[5]);
    v289 = v68;
    v286.var0.var0[1] = (btVector3)xmmword_1DD007970;
    v286.var0.var0[2] = (btVector3)xmmword_1DD007920;
    v286.var1 = (btVector3)xmmword_1DD007600;
    v287 = 0uLL;
    v286.var0.var0[0] = 0uLL;
    btTransformUtil::integrateTransform(v292, &v286, (float32x4_t *)&v289, (btMatrix3x3 *)&v286.var0.var0[1], a4, a6);
    v284.var0[0] = (btVector3)xmmword_1DD007970;
    v284.var0[1] = (btVector3)xmmword_1DD007920;
    v284.var0[2] = (btVector3)xmmword_1DD007600;
    v285 = 0uLL;
    btTransformUtil::integrateTransform(v290, &v286, (float32x4_t *)&v288, &v284, a4, v69);
    btMatrix3x3::setRotation(&v282, (float32x4_t *)&this[1].var1);
    v283 = 0u;
    v71 = *(float32x4_t *)((char *)&this->var15.var0.var0[2] + 12);
    v70 = *(float32x4_t *)((char *)&this->var15.var1 + 12);
    v72 = (float32x4_t)v282.var0[0];
    v73 = (float32x4_t)v282.var0[1];
    v72.i32[3] = 0;
    v73.i32[3] = 0;
    v74 = (float32x4_t)v282.var0[2];
    v74.i32[3] = 0;
    v75 = *(float32x4_t *)&this->var19;
    v76 = vmlaq_lane_f32(vmulq_n_f32(v72, v75.f32[0]), v73, *(float32x2_t *)v75.f32, 1);
    v77 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v72, v70.f32[0]), v73, *(float32x2_t *)v70.f32, 1), v74, v70, 2);
    v78 = (int8x16_t)vmulq_f32(v71, (float32x4_t)0);
    v79 = (int8x16_t)vmulq_f32(v70, (float32x4_t)0);
    v80 = (int8x16_t)vmulq_f32(v75, (float32x4_t)0);
    v80.i32[3] = 0;
    v81 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v72, v71.f32[0]), v73, *(float32x2_t *)v71.f32, 1), v74, v71, 2);
    *(float32x2_t *)v71.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v78, v78, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v79, v79, 8uLL)), vpadd_f32(*(float32x2_t *)v78.i8, *(float32x2_t *)v79.i8));
    *(float32x2_t *)&v71.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v80.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v80, v80, 8uLL)), 0);
    v82 = *(int32x4_t *)((char *)&this->var14.var0.var0[2] + 12);
    v83 = *(float32x4_t *)((char *)&this->var14.var1 + 12);
    v84 = *(float32x4_t *)((char *)this->var15.var0.var0 + 12);
    v85 = (float32x4_t)vtrn1q_s32(v82, (int32x4_t)v83);
    v86 = vzip2_s32(*(int32x2_t *)v84.f32, 0);
    v87 = vextq_s8((int8x16_t)v84, (int8x16_t)v84, 8uLL).u32[0];
    v84.i64[0] = vextq_s8((int8x16_t)v85, (int8x16_t)v85, 8uLL).u64[0];
    v85.i64[1] = *(_OWORD *)((char *)this->var15.var0.var0 + 12);
    v88.i64[0] = 0x8000000080000000;
    v88.i64[1] = 0x8000000080000000;
    v89 = (float32x4_t)veorq_s8(*(int8x16_t *)((char *)&this->var15.var0.var0[1] + 12), v88);
    v90 = (int8x16_t)vmulq_f32(v85, v89);
    *(int32x2_t *)v83.f32 = vzip2_s32(*(int32x2_t *)v82.i8, *(int32x2_t *)v83.f32);
    *(int32x2_t *)&v83.u32[2] = v86;
    v91 = vmulq_f32(v83, v89);
    v84.i64[1] = v87;
    v92 = (int8x16_t)vmulq_f32(v84, v89);
    v92.i32[3] = 0;
    *(float32x2_t *)v91.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v90.i8, *(float32x2_t *)v91.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v90, v90, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v91, (int8x16_t)v91, 8uLL)));
    *(float32x2_t *)&v91.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v92.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v92, v92, 8uLL)), 0);
    v85.i32[3] = 0;
    v83.i32[3] = 0;
    v84.i32[3] = 0;
    v93 = vmlaq_laneq_f32(v76, v74, v75, 2);
    v94 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v85, v77.f32[0]), v83, *(float32x2_t *)v77.f32, 1), v84, v77, 2);
    v95 = (int8x16_t)vmulq_f32(v81, v91);
    v96 = vmulq_f32(v77, v91);
    v97 = (int8x16_t)vmulq_f32(v93, v91);
    v97.i32[3] = 0;
    *(float32x2_t *)v96.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v95, v95, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v96, (int8x16_t)v96, 8uLL)), vpadd_f32(*(float32x2_t *)v95.i8, *(float32x2_t *)v96.f32));
    *(float32x2_t *)&v96.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v97.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v97, v97, 8uLL)), 0);
    v98 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v85, v81.f32[0]), v83, *(float32x2_t *)v81.f32, 1), v84, v81, 2);
    v99 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v85, v93.f32[0]), v83, *(float32x2_t *)v93.f32, 1), v84, v93, 2);
    v100 = vaddq_f32(v71, *(float32x4_t *)&this->var23);
    v101 = (float32x4_t)vtrn1q_s32((int32x4_t)v98, (int32x4_t)v94);
    *(int32x2_t *)v71.f32 = vzip2_s32(*(int32x2_t *)v98.f32, *(int32x2_t *)v94.f32);
    v98.i32[3] = 0;
    v94.i32[3] = 0;
    v83.i64[0] = v99.u32[0];
    *(int32x2_t *)v95.i8 = vzip2_s32(*(int32x2_t *)v99.f32, 0);
    v85.i32[0] = vextq_s8((int8x16_t)v99, (int8x16_t)v99, 8uLL).u32[0];
    v99.i32[3] = 0;
    v102 = vaddq_f32(v100, v96);
    v103 = (int8x16_t)vmulq_f32(v102, (float32x4_t)v284.var0[2]);
    v103.i32[3] = 0;
    v104 = vmlaq_lane_f32(vmulq_n_f32(v98, v284.var0[2].var0.var0[0]), v94, *(float32x2_t *)v284.var0[2].var0.var0, 1);
    v105 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v98, v284.var0[1].var0.var0[0]), v94, *(float32x2_t *)v284.var0[1].var0.var0, 1), v99, (float32x4_t)v284.var0[1], 2);
    v106 = vmlaq_lane_f32(vmulq_n_f32(v98, v284.var0[0].var0.var0[0]), v94, *(float32x2_t *)v284.var0[0].var0.var0, 1);
    v107 = (int8x16_t)vmulq_f32(v102, (float32x4_t)v284.var0[0]);
    v108 = (int8x16_t)vmulq_f32(v102, (float32x4_t)v284.var0[1]);
    *(float32x2_t *)v100.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v107, v107, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v108, v108, 8uLL)), vpadd_f32(*(float32x2_t *)v107.i8, *(float32x2_t *)v108.i8));
    *(float32x2_t *)&v100.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v103.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v103, v103, 8uLL)), 0);
    v281.var0.var0[0] = (btVector3)vmlaq_laneq_f32(v106, v99, (float32x4_t)v284.var0[0], 2);
    v281.var0.var0[1] = (btVector3)v105;
    v281.var0.var0[2] = (btVector3)vmlaq_laneq_f32(v104, v99, (float32x4_t)v284.var0[2], 2);
    v281.var1 = (btVector3)vaddq_f32(v100, v285);
    v99.i64[0] = vextq_s8((int8x16_t)v101, (int8x16_t)v101, 8uLL).u64[0];
    v101.i64[1] = v83.i64[0];
    v109 = vnegq_f32(v102);
    v110 = vmulq_f32(v101, v109);
    v71.i64[1] = v95.i64[0];
    v111 = (int8x16_t)vmulq_f32(v71, v109);
    v99.i64[1] = v85.u32[0];
    v112 = (int8x16_t)vmulq_f32(v99, v109);
    v112.i32[3] = 0;
    *(float32x2_t *)v110.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v110, (int8x16_t)v110, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v111, v111, 8uLL)), vpadd_f32(*(float32x2_t *)v110.f32, *(float32x2_t *)v111.i8));
    *(float32x2_t *)&v110.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v112.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v112, v112, 8uLL)), 0);
    v101.i32[3] = 0;
    v71.i32[3] = 0;
    v99.i32[3] = 0;
    v113 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v101, v286.var0.var0[2].var0.var0[0]), v71, *(float32x2_t *)v286.var0.var0[2].var0.var0, 1), v99, (float32x4_t)v286.var0.var0[2], 2);
    v114 = (int8x16_t)vmulq_f32((float32x4_t)v286.var0.var0[1], v110);
    v115 = (int8x16_t)vmulq_f32(v110, (float32x4_t)v286.var0.var0[2]);
    v116 = (int8x16_t)vmulq_f32(v110, (float32x4_t)v286.var1);
    v116.i32[3] = 0;
    *(float32x2_t *)v79.i8 = vpadd_f32(vpadd_f32(*(float32x2_t *)v116.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v116, v116, 8uLL)), 0);
    v117 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v101, v286.var0.var0[1].var0.var0[0]), v71, *(float32x2_t *)v286.var0.var0[1].var0.var0, 1), v99, (float32x4_t)v286.var0.var0[1], 2);
    v118 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v101, v286.var1.var0.var0[0]), v71, *(float32x2_t *)v286.var1.var0.var0, 1), v99, (float32x4_t)v286.var1, 2);
    *(float32x2_t *)v99.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v114, v114, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v115, v115, 8uLL)), vpadd_f32(*(float32x2_t *)v114.i8, *(float32x2_t *)v115.i8));
    v99.i64[1] = v79.i64[0];
    v280.var0.var0[0] = (btVector3)v117;
    v280.var0.var0[1] = (btVector3)v113;
    v280.var0.var0[2] = (btVector3)v118;
    v280.var1 = (btVector3)vaddq_f32(v99, v287);
    v119 = vmulq_n_f32(vsubq_f32((float32x4_t)v281.var1, v293), 1.0 / a4);
    v119.i32[3] = 0;
    v286.var0.var0[0] = (btVector3)v119;
    v294 = 0.0;
    btTransformUtil::calculateDiffAxisAngle((btTransformUtil *)v292, &v281, &v295, (btVector3 *)&v294, v120);
    v279 = vmulq_n_f32(vmulq_n_f32((float32x4_t)v295.var0.var0[0], v294), 1.0 / a4);
    v121 = vmulq_n_f32(vsubq_f32((float32x4_t)v280.var1, v291), 1.0 / a4);
    v121.i32[3] = 0;
    v286.var0.var0[0] = (btVector3)v121;
    v294 = 0.0;
    btTransformUtil::calculateDiffAxisAngle((btTransformUtil *)v290, &v280, &v295, (btVector3 *)&v294, v122);
    v123 = vsubq_f32(v279, (float32x4_t)v289);
    v123.i32[3] = 0;
    v124 = vsubq_f32(vmulq_n_f32(vmulq_n_f32((float32x4_t)v295.var0.var0[0], v294), 1.0 / a4), (float32x4_t)v288);
    v124.i32[3] = 0;
    v125 = (int8x16_t)vmulq_f32(v123, v123);
    v126 = vpadd_f32(*(float32x2_t *)v125.i8, *(float32x2_t *)v125.i8);
    v129 = (float32x4_t)vextq_s8(v125, v125, 8uLL);
    v127 = vadd_f32(v126, *(float32x2_t *)v129.f32).f32[0];
    v128 = 0.0;
    v129.i64[0] = 0x3400000034000000;
    v130 = 0.0;
    if (v127 > 0.00000011921)
    {
      v129 = vmulq_n_f32(v123, 1.0 / sqrtf(v127));
      v131 = this->var8;
      v132 = *((float32x4_t *)v131 + 19);
      v133 = *((float32x4_t *)v131 + 20);
      v132.i32[3] = 0;
      v133.i32[3] = 0;
      v134 = *((float32x4_t *)v131 + 21);
      v134.i32[3] = 0;
      v135 = (int8x16_t)vmulq_f32(v129, vaddq_f32(vaddq_f32(vmulq_n_f32(v132, v129.f32[0]), vmulq_lane_f32(v133, *(float32x2_t *)v129.f32, 1)), vmulq_laneq_f32(v134, v129, 2)));
      LODWORD(v130) = vadd_f32(vpadd_f32(*(float32x2_t *)v135.i8, *(float32x2_t *)v135.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v135, v135, 8uLL)).u32[0];
    }
    v136 = (int8x16_t)vmulq_f32(v124, v124);
    v137 = vpadd_f32(*(float32x2_t *)v136.i8, *(float32x2_t *)v136.i8);
    v139 = (float32x4_t)vextq_s8(v136, v136, 8uLL);
    v138 = vadd_f32(*(float32x2_t *)v139.f32, v137).f32[0];
    v139.i64[0] = 0x3400000034000000;
    if (v138 > 0.00000011921)
    {
      v139 = vmulq_n_f32(v124, 1.0 / sqrtf(v138));
      v140 = this->var9;
      v141 = *((float32x4_t *)v140 + 19);
      v142 = *((float32x4_t *)v140 + 20);
      v141.i32[3] = 0;
      v142.i32[3] = 0;
      v143 = *((float32x4_t *)v140 + 21);
      v143.i32[3] = 0;
      v144 = (int8x16_t)vmulq_f32(v139, vaddq_f32(vaddq_f32(vmulq_n_f32(v141, v139.f32[0]), vmulq_lane_f32(v142, *(float32x2_t *)v139.f32, 1)), vmulq_laneq_f32(v143, v139, 2)));
      LODWORD(v128) = vadd_f32(vpadd_f32(*(float32x2_t *)v144.i8, *(float32x2_t *)v144.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v144, v144, 8uLL)).u32[0];
    }
    v145 = vmulq_n_f32(v129, v130);
    v145.i32[3] = 0;
    v146 = vmulq_n_f32(v139, v128);
    v146.i32[3] = 0;
    v147 = vaddq_f32(v145, v146);
    v148 = (int8x16_t)vmulq_f32(v147, v147);
    v149 = vadd_f32(vpadd_f32(*(float32x2_t *)v148.i8, *(float32x2_t *)v148.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v148, v148, 8uLL)).f32[0];
    if (v149 <= 0.00000011921)
      goto LABEL_32;
    v150 = this->var8;
    v151 = this->var9;
    v152 = *((float32x4_t *)v150 + 19);
    v153 = *((float32x4_t *)v150 + 20);
    v152.i32[3] = 0;
    v153.i32[3] = 0;
    v154 = vmulq_n_f32(v147, 1.0 / sqrtf(v149));
    v155 = *((float32x4_t *)v150 + 21);
    v155.i32[3] = 0;
    v156 = (int8x16_t)vmulq_f32(v154, vaddq_f32(vaddq_f32(vmulq_n_f32(v152, v154.f32[0]), vmulq_lane_f32(v153, *(float32x2_t *)v154.f32, 1)), vmulq_laneq_f32(v155, v154, 2)));
    v157 = *((float32x4_t *)v151 + 19);
    v158 = *((float32x4_t *)v151 + 20);
    v157.i32[3] = 0;
    v158.i32[3] = 0;
    v159 = vadd_f32(vpadd_f32(*(float32x2_t *)v156.i8, *(float32x2_t *)v156.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v156, v156, 8uLL));
    v160 = *((float32x4_t *)v151 + 21);
    v160.i32[3] = 0;
    v161 = (int8x16_t)vmulq_f32(v154, vaddq_f32(vaddq_f32(vmulq_n_f32(v157, v154.f32[0]), vmulq_lane_f32(v158, *(float32x2_t *)v154.f32, 1)), vmulq_laneq_f32(v160, v154, 2)));
    *(float32x2_t *)v161.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v161.i8, *(float32x2_t *)v161.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v161, v161, 8uLL));
    *(float32x2_t *)v160.f32 = vadd_f32(v159, *(float32x2_t *)v161.i8);
    v162 = vmulq_n_f32(vsubq_f32(vmulq_n_f32(v123, v159.f32[0]), vmulq_n_f32(v124, *(float *)v161.i32)), 1.0 / vmul_f32(*(float32x2_t *)v160.f32, *(float32x2_t *)v160.f32).f32[0]);
    v162.i32[3] = 0;
    var4 = this[1].var4;
    if (var4 >= 0.0)
    {
      if (!BYTE1(this->var48))
        v159.f32[0] = 1.0;
      v164 = var4 / v159.f32[0];
      v165 = *(float32x4_t *)&this[1].var8;
      v166 = vaddq_f32(v165, v162);
      v167 = (int8x16_t)vmulq_f32(v166, v166);
      v168 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v167.i8, *(float32x2_t *)v167.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v167, v167, 8uLL)).f32[0]);
      if (v168 > v164)
      {
        v162 = vsubq_f32(vmulq_n_f32(vmulq_n_f32(v166, 1.0 / v168), v164), v165);
        v162.i32[3] = 0;
        v166 = vaddq_f32(v165, v162);
      }
      *(float32x4_t *)&this[1].var8 = v166;
    }
    v169 = (int8x16_t)vmulq_f32(v162, v162);
    v170 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v169.i8, *(float32x2_t *)v169.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v169, v169, 8uLL)).f32[0]);
    v171 = vmulq_n_f32(v162, 1.0 / v170);
    v171.i32[3] = 0;
    if (a2[13].i64[0])
    {
      v172 = vmulq_f32(*((float32x4_t *)v150 + 19), v171);
      v173 = (int8x16_t)vmulq_f32(*((float32x4_t *)v150 + 20), v171);
      *(float32x2_t *)v172.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v172.f32, *(float32x2_t *)v173.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v172, (int8x16_t)v172, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v173, v173, 8uLL)));
      v174 = (int8x16_t)vmulq_f32(*((float32x4_t *)v150 + 21), v171);
      v174.i32[3] = 0;
      *(float32x2_t *)&v172.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v174.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v174, v174, 8uLL)), 0);
      v175 = vmulq_n_f32((float32x4_t)0, v170);
      v175.i32[3] = 0;
      v176 = vmulq_n_f32(a2[6], v170);
      v176.i32[3] = 0;
      v177 = vaddq_f32(a2[5], vmulq_f32(v172, v176));
      a2[4] = vaddq_f32(a2[4], vmulq_f32(a2[7], v175));
      a2[5] = v177;
    }
    if (!a3[13].i64[0])
      goto LABEL_32;
    v178 = this->var9;
    v179 = vmulq_f32(*((float32x4_t *)v178 + 19), v171);
    v180 = (int8x16_t)vmulq_f32(*((float32x4_t *)v178 + 20), v171);
    *(float32x2_t *)v179.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v179.f32, *(float32x2_t *)v180.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v179, (int8x16_t)v179, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v180, v180, 8uLL)));
    v181 = (int8x16_t)vmulq_f32(*((float32x4_t *)v178 + 21), v171);
    v181.i32[3] = 0;
    *(float32x2_t *)&v179.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v181.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v181, v181, 8uLL)), 0);
    v182 = -v170;
    v183 = vmulq_n_f32((float32x4_t)0, v182);
    v183.i32[3] = 0;
    v184 = vmulq_n_f32(a3[6], v182);
    v184.i32[3] = 0;
    v185 = vaddq_f32(a3[5], vmulq_f32(v179, v184));
    a3[4] = vaddq_f32(a3[4], vmulq_f32(a3[7], v183));
  }
  else
  {
    v186 = this->var25.var0.var0[2];
    if (v186 <= 0.00000011921)
      goto LABEL_32;
    v187 = a2[5];
    v188 = vsubq_f32(vaddq_f32(a3[12], a3[5]), vaddq_f32(a2[12], v187));
    v188.i32[3] = 0;
    v189 = (int8x16_t)vmulq_f32(v188, v188);
    v190 = vadd_f32(vpadd_f32(*(float32x2_t *)v189.i8, *(float32x2_t *)v189.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v189, v189, 8uLL)).f32[0];
    if (v190 <= 0.00000011921)
      goto LABEL_32;
    v191 = this->var8;
    v192 = this->var9;
    v193 = *((float32x4_t *)v191 + 19);
    v193.i32[3] = 0;
    v194 = *((float32x4_t *)v191 + 20);
    v194.i32[3] = 0;
    v195 = vmulq_n_f32(v188, 1.0 / sqrtf(v190));
    v196 = *((float32x4_t *)v191 + 21);
    v196.i32[3] = 0;
    v197 = (int8x16_t)vmulq_f32(v195, vaddq_f32(vaddq_f32(vmulq_n_f32(v193, v195.f32[0]), vmulq_lane_f32(v194, *(float32x2_t *)v195.f32, 1)), vmulq_laneq_f32(v196, v195, 2)));
    v198 = *((float32x4_t *)v192 + 19);
    v199 = *((float32x4_t *)v192 + 20);
    v198.i32[3] = 0;
    v199.i32[3] = 0;
    v200 = *((float32x4_t *)v192 + 21);
    v200.i32[3] = 0;
    v201 = (int8x16_t)vmulq_f32(v195, vaddq_f32(vaddq_f32(vmulq_n_f32(v198, v195.f32[0]), vmulq_lane_f32(v199, *(float32x2_t *)v195.f32, 1)), vmulq_laneq_f32(v200, v195, 2)));
    v202 = vmulq_n_f32(v188, v186* (float)(1.0/ vadd_f32(vadd_f32(vpadd_f32(*(float32x2_t *)v197.i8, *(float32x2_t *)v197.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v197, v197, 8uLL)), vadd_f32(vpadd_f32(*(float32x2_t *)v201.i8, *(float32x2_t *)v201.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v201, v201, 8uLL))).f32[0]));
    v203 = v202;
    v203.i32[3] = 0;
    v204 = (int8x16_t)vmulq_f32(v203, v203);
    v205 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v204.i8, *(float32x2_t *)v204.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v204, v204, 8uLL)).f32[0]);
    v206 = vmulq_n_f32(v202, 1.0 / v205);
    v206.i32[3] = 0;
    if (a2[13].i64[0])
    {
      v207 = (int8x16_t)vmulq_f32(*((float32x4_t *)v191 + 19), v206);
      v208 = vmulq_f32(*((float32x4_t *)v191 + 20), v206);
      *(float32x2_t *)v208.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v207.i8, *(float32x2_t *)v208.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v207, v207, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v208, (int8x16_t)v208, 8uLL)));
      v209 = (int8x16_t)vmulq_f32(*((float32x4_t *)v191 + 21), v206);
      v209.i32[3] = 0;
      *(float32x2_t *)&v208.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v209.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v209, v209, 8uLL)), 0);
      v210 = vmulq_n_f32((float32x4_t)0, v205);
      v210.i32[3] = 0;
      v211 = vmulq_n_f32(a2[6], v205);
      v211.i32[3] = 0;
      a2[4] = vaddq_f32(a2[4], vmulq_f32(a2[7], v210));
      a2[5] = vaddq_f32(v187, vmulq_f32(v208, v211));
    }
    if (!a3[13].i64[0])
      goto LABEL_32;
    v212 = this->var9;
    v213 = vmulq_f32(*((float32x4_t *)v212 + 19), v206);
    v214 = (int8x16_t)vmulq_f32(*((float32x4_t *)v212 + 20), v206);
    *(float32x2_t *)v213.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v213.f32, *(float32x2_t *)v214.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v213, (int8x16_t)v213, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v214, v214, 8uLL)));
    v215 = (int8x16_t)vmulq_f32(*((float32x4_t *)v212 + 21), v206);
    v215.i32[3] = 0;
    *(float32x2_t *)&v213.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v215.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v215, v215, 8uLL)), 0);
    v216 = -v205;
    v217 = vmulq_n_f32((float32x4_t)0, v216);
    v217.i32[3] = 0;
    v218 = vmulq_n_f32(a3[6], v216);
    v218.i32[3] = 0;
    v185 = vaddq_f32(a3[5], vmulq_f32(v213, v218));
    a3[4] = vaddq_f32(a3[4], vmulq_f32(a3[7], v217));
  }
  a3[5] = v185;
LABEL_32:
  v219 = vaddq_f32(a2[12], a2[5]);
  v220 = vaddq_f32(a3[12], a3[5]);
  if (BYTE2(this->var43.var0.var0[3]))
  {
    v221 = this->var44;
    v222 = (float)((float)(v221 * this->var40.var0.var0[3]) * this->var25.var0.var0[0]) / a4;
    v223 = vsubq_f32(v220, v219);
    v223.i32[3] = 0;
    v224 = *(float32x4_t *)&this->var29;
    v225 = (int8x16_t)vmulq_f32(v224, v223);
    v226 = vadd_f32(vpadd_f32(*(float32x2_t *)v225.i8, *(float32x2_t *)v225.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v225, v225, 8uLL)).f32[0];
    if (v226 > 0.0)
      v222 = v222 + (float)((float)(v221 * v226) * this->var25.var0.var0[1]);
    v227 = this->var43.var0.var0[1];
    v228 = fmaxf(v227 + (float)(v222 * this->var40.var0.var0[0]), 0.0);
    v229 = vmulq_n_f32(v224, v228 - v227);
    v229.i32[3] = 0;
    v230 = *(float32x4_t *)((char *)&this->var45 + 8);
    v231 = (int8x16_t)vmulq_f32(v230, v229);
    v232 = vmulq_n_f32(v230, vadd_f32(vpadd_f32(*(float32x2_t *)v231.i8, *(float32x2_t *)v231.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v231, v231, 8uLL)).f32[0]);
    v232.i32[3] = 0;
    v233 = vsubq_f32(v229, v232);
    v234 = v233;
    v234.i32[3] = 0;
    this->var43.var0.var0[1] = v228;
    v235 = (int8x16_t)vmulq_f32(v234, v234);
    v236 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v235.i8, *(float32x2_t *)v235.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v235, v235, 8uLL)).f32[0]);
    v237 = vmulq_n_f32(v233, 1.0 / v236);
    v237.i32[3] = 0;
    if (a2[13].i64[0])
    {
      v238 = this->var8;
      v239 = vmulq_f32(*((float32x4_t *)v238 + 19), v237);
      v240 = (int8x16_t)vmulq_f32(*((float32x4_t *)v238 + 20), v237);
      *(float32x2_t *)v239.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v239.f32, *(float32x2_t *)v240.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v239, (int8x16_t)v239, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v240, v240, 8uLL)));
      v241 = (int8x16_t)vmulq_f32(*((float32x4_t *)v238 + 21), v237);
      v241.i32[3] = 0;
      *(float32x2_t *)&v239.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v241.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v241, v241, 8uLL)), 0);
      v242 = vmulq_n_f32((float32x4_t)0, v236);
      v242.i32[3] = 0;
      v243 = vmulq_n_f32(a2[6], v236);
      v243.i32[3] = 0;
      v244 = vaddq_f32(a2[5], vmulq_f32(v239, v243));
      a2[4] = vaddq_f32(a2[4], vmulq_f32(a2[7], v242));
      a2[5] = v244;
    }
    if (a3[13].i64[0])
    {
      v245 = this->var9;
      v246 = vmulq_f32(*((float32x4_t *)v245 + 19), v237);
      v247 = (int8x16_t)vmulq_f32(*((float32x4_t *)v245 + 20), v237);
      *(float32x2_t *)v246.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v246.f32, *(float32x2_t *)v247.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v246, (int8x16_t)v246, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v247, v247, 8uLL)));
      v248 = (int8x16_t)vmulq_f32(*((float32x4_t *)v245 + 21), v237);
      v248.i32[3] = 0;
      *(float32x2_t *)&v246.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v248.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v248, v248, 8uLL)), 0);
      v249 = -v236;
      v250 = vmulq_n_f32((float32x4_t)0, v249);
      v250.i32[3] = 0;
      v251 = vmulq_n_f32(a3[6], v249);
      v251.i32[3] = 0;
      v252 = vaddq_f32(a3[5], vmulq_f32(v246, v251));
      a3[4] = vaddq_f32(a3[4], vmulq_f32(a3[7], v250));
      a3[5] = v252;
    }
  }
  if (BYTE1(this->var43.var0.var0[3]))
  {
    v253 = this->var45.var0.var0[0];
    v254 = (float)((float)(v253 * *(float *)&this->var41) * this->var25.var0.var0[0]) / a4;
    v255 = vsubq_f32(v220, v219);
    v255.i32[3] = 0;
    v256 = *(float32x4_t *)&this->var33;
    v257 = (int8x16_t)vmulq_f32(v256, v255);
    v258 = vadd_f32(vpadd_f32(*(float32x2_t *)v257.i8, *(float32x2_t *)v257.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v257, v257, 8uLL)).f32[0];
    if (v258 > 0.0)
      v254 = v254 + (float)((float)(v253 * v258) * this->var25.var0.var0[1]);
    v259 = v254 * this->var40.var0.var0[1];
    v260 = this->var43.var0.var0[2];
    v261 = fmaxf(v260 + v259, 0.0);
    this->var43.var0.var0[2] = v261;
    v262 = v261 - v260;
    if (a2[13].i64[0])
    {
      v263 = this->var8;
      v264 = vmulq_f32(v256, *((float32x4_t *)v263 + 19));
      v265 = (int8x16_t)vmulq_f32(v256, *((float32x4_t *)v263 + 20));
      *(float32x2_t *)v264.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v264.f32, *(float32x2_t *)v265.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v264, (int8x16_t)v264, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v265, v265, 8uLL)));
      v266 = (int8x16_t)vmulq_f32(v256, *((float32x4_t *)v263 + 21));
      v266.i32[3] = 0;
      *(float32x2_t *)&v264.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v266.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v266, v266, 8uLL)), 0);
      v267 = vmulq_n_f32((float32x4_t)0, v262);
      v267.i32[3] = 0;
      v268 = vmulq_n_f32(a2[6], v262);
      v268.i32[3] = 0;
      v269 = vaddq_f32(a2[5], vmulq_f32(v264, v268));
      a2[4] = vaddq_f32(a2[4], vmulq_f32(a2[7], v267));
      a2[5] = v269;
    }
    if (a3[13].i64[0])
    {
      v270 = this->var9;
      v271 = *(float32x4_t *)&this->var33;
      v272 = vmulq_f32(*((float32x4_t *)v270 + 19), v271);
      v273 = (int8x16_t)vmulq_f32(v271, *((float32x4_t *)v270 + 20));
      *(float32x2_t *)v272.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v272.f32, *(float32x2_t *)v273.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v272, (int8x16_t)v272, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v273, v273, 8uLL)));
      v274 = (int8x16_t)vmulq_f32(v271, *((float32x4_t *)v270 + 21));
      v274.i32[3] = 0;
      *(float32x2_t *)&v272.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v274.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v274, v274, 8uLL)), 0);
      v275 = -v262;
      v276 = vmulq_n_f32((float32x4_t)0, v275);
      v276.i32[3] = 0;
      v277 = vmulq_n_f32(a3[6], v275);
      v277.i32[3] = 0;
      v278 = vaddq_f32(a3[5], vmulq_f32(v272, v277));
      a3[4] = vaddq_f32(a3[4], vmulq_f32(a3[7], v276));
      a3[5] = v278;
    }
  }
}

void btConeTwistConstraint::computeConeLimitInfo(btConeTwistConstraint *this, float32x4_t *a2, float *a3, btVector3 *a4, float *a5)
{
  float v10;
  float v11;
  float v12;
  float32x4_t v13;
  int8x16_t v14;
  float32x4_t v15;

  v10 = a2->f32[3];
  if (v10 < -1.0)
    v10 = -1.0;
  if (v10 > 1.0)
    v10 = 1.0;
  v11 = acosf(v10);
  v12 = v11 + v11;
  *a3 = v12;
  if (v12 > 0.00000011921)
  {
    v13 = *a2;
    v13.i64[1] = a2->u32[2];
    v14 = (int8x16_t)vmulq_f32(v13, v13);
    v15 = vmulq_n_f32(v13, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v14.i8, *(float32x2_t *)v14.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)).f32[0]));
    *a4 = (btVector3)v15;
    *a5 = this->var25.var0.var0[3];
    if (fabsf(v15.f32[1]) > 0.00000011921)
    {
      __asm { FMOV            V2.2S, #1.0 }
      _D2.f32[0] = COERCE_FLOAT(vmulq_f32(v15, v15).i32[2]) / (float)(v15.f32[1] * v15.f32[1]);
      *a5 = sqrtf((float)(_D2.f32[0] + 1.0)/ vaddv_f32(vdiv_f32(_D2, vmul_f32(*(float32x2_t *)&this->var25.var0.var0[3], *(float32x2_t *)&this->var25.var0.var0[3]))));
    }
  }
}

void btConeTwistConstraint::computeTwistLimitInfo(btConeTwistConstraint *this, int8x16_t *a2, float *a3, float32x4_t *a4)
{
  float v7;
  float v8;
  float v9;
  int8x16_t v10;
  int8x16_t v11;
  float v12;
  float v13;
  float32x4_t v14;
  int8x16_t v15;
  unsigned __int128 v16;

  v16 = (unsigned __int128)*a2;
  LODWORD(v7) = HIDWORD(*(unsigned __int128 *)a2);
  if (v7 < -1.0)
    v7 = -1.0;
  if (v7 > 1.0)
    v7 = 1.0;
  v8 = acosf(v7);
  v9 = v8 + v8;
  *a3 = v9;
  if (v9 > 3.1416)
  {
    v10.i64[0] = 0x8000000080000000;
    v10.i64[1] = 0x8000000080000000;
    v11 = veorq_s8(*a2, v10);
    v16 = (unsigned __int128)v11;
    v12 = *(float *)&v11.i32[3];
    if (*(float *)&v11.i32[3] < -1.0)
      v12 = -1.0;
    if (v12 > 1.0)
      v12 = 1.0;
    v13 = acosf(v12);
    *a3 = v13 + v13;
  }
  v14 = (float32x4_t)v16;
  v14.i32[3] = 0;
  *a4 = v14;
  if (*a3 > 0.00000011921)
  {
    v15 = (int8x16_t)vmulq_f32(v14, v14);
    *a4 = vmulq_n_f32(v14, 1.0/ sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL), vpadd_f32(*(float32x2_t *)v15.i8, *(float32x2_t *)v15.i8)).f32[0]));
  }
}

__n128 btConeTwistConstraint::GetPointForAngle@<Q0>(btConeTwistConstraint *this@<X0>, float a2@<S0>, unsigned int a3@<S1>, __n128 *a4@<X8>)
{
  __float2 v6;
  float v7;
  float32x4_t v8;
  int8x16_t v9;
  float v10;
  __float2 v11;
  float32x2_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int32x2_t v15;
  int32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x4_t v19;
  int8x16_t v20;
  float32x4_t v21;
  float32x4_t v22;
  int32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  __n128 result;

  v6 = __sincosf_stret(a2);
  v7 = this->var25.var0.var0[3];
  if (fabsf(v6.__cosval) > 0.00000011921)
    v7 = sqrtf((float)((float)((float)(v6.__sinval * v6.__sinval) / (float)(v6.__cosval * v6.__cosval)) + 1.0)/ (float)((float)((float)((float)(v6.__sinval * v6.__sinval) / (float)(v6.__cosval * v6.__cosval))/ (float)(v7 * v7))+ (float)(1.0 / (float)(this->var26 * this->var26))));
  v8.i32[0] = 0;
  v8.i32[3] = 0;
  v8.i32[1] = LODWORD(v6.__cosval);
  v8.f32[2] = -v6.__sinval;
  v9 = (int8x16_t)vmulq_f32(v8, v8);
  v10 = sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL), vpadd_f32(*(float32x2_t *)v9.i8, *(float32x2_t *)v9.i8)).f32[0]);
  v11 = __sincosf_stret(v7 * 0.5);
  v12.i32[0] = 0;
  v12.i32[1] = LODWORD(v6.__cosval);
  *(float32x2_t *)v13.i8 = vmul_n_f32(v12, v11.__sinval / v10);
  v14.i64[0] = v13.i64[0];
  *(float *)&v14.i32[2] = -(float)(v6.__sinval * (float)(v11.__sinval / v10));
  v14.i32[3] = LODWORD(v11.__cosval);
  v15 = (int32x2_t)vextq_s8(v14, v14, 8uLL).u64[0];
  v16.i32[0] = 0;
  v16.i32[1] = a3;
  v17 = (float32x2_t)vzip1_s32(v15, *(int32x2_t *)v13.i8);
  v18 = (float32x2_t)vext_s8(*(int8x8_t *)v13.i8, (int8x8_t)v15, 4uLL);
  *(float32x2_t *)v19.f32 = vmul_f32(v17, 0);
  *(float32x2_t *)&v19.u32[2] = vmul_f32((float32x2_t)vrev64_s32(v16), v18);
  *(float32x2_t *)v20.i8 = vadd_f32(vmul_laneq_f32((float32x2_t)a3, (float32x4_t)v14, 3), vmul_f32((float32x2_t)v16, v18));
  v20.u64[1] = (unint64_t)vadd_f32(vmul_f32(*(float32x2_t *)v13.i8, 0), vmul_f32((float32x2_t)v16, (float32x2_t)*(_OWORD *)&vextq_s8(v14, v13, 0xCuLL)));
  v21 = vsubq_f32((float32x4_t)veorq_s8(v20, (int8x16_t)xmmword_1DD007D50), v19);
  v22 = (float32x4_t)veorq_s8(v14, (int8x16_t)xmmword_1DD007D60);
  *(int32x2_t *)v13.i8 = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL), *(int32x2_t *)v21.f32);
  v14.i64[0] = vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL).u64[0];
  v23 = vzip1_s32(*(int32x2_t *)v14.i8, *(int32x2_t *)v22.f32);
  v24 = (float32x2_t)vextq_s8((int8x16_t)v21, (int8x16_t)v21, 4uLL).u64[0];
  v25 = vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v14.i8, *(int8x8_t *)v22.f32, 4uLL), *(float32x2_t *)v13.i8);
  *(float32x2_t *)v13.i8 = vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v22.f32, *(int8x8_t *)v14.i8, 4uLL), *(float32x2_t *)v13.i8);
  v13.u64[1] = (unint64_t)vmul_f32((float32x2_t)vrev64_s32(v23), v24);
  *(float32x2_t *)v14.i8 = vadd_f32(vmul_laneq_f32(*(float32x2_t *)v21.f32, v22, 3), vmul_f32((float32x2_t)v23, v24));
  v14.u64[1] = (unint64_t)vadd_f32(vmul_lane_f32(*(float32x2_t *)v21.f32, *(float32x2_t *)v22.f32, 1), v25);
  result = (__n128)vaddq_f32(vsubq_f32(vmulq_laneq_f32(v22, v21, 3), (float32x4_t)v13), (float32x4_t)v14);
  result.n128_u32[3] = 0;
  *a4 = result;
  return result;
}

btConeTwistConstraint *btConeTwistConstraint::setParam(btConeTwistConstraint *this, int a2, float a3, unsigned int a4)
{
  int v4;

  if ((a2 - 3) < 2)
  {
    if (a4 > 2)
    {
      *((float *)&this[1].var12 + 1) = a3;
      v4 = LODWORD(this[1].var10) | 4;
    }
    else
    {
      this[1].var11 = a3;
      v4 = LODWORD(this[1].var10) | 1;
    }
  }
  else
  {
    if ((a2 - 1) > 1)
      return this;
    if (a4 > 2)
    {
      this->var25.var0.var0[0] = a3;
      return this;
    }
    *(float *)&this[1].var12 = a3;
    v4 = LODWORD(this[1].var10) | 2;
  }
  LODWORD(this[1].var10) = v4;
  return this;
}

float btConeTwistConstraint::getParam(btConeTwistConstraint *this, int a2, unsigned int a3)
{
  float result;

  result = 0.0;
  if ((a2 - 3) < 2)
  {
    if (a3 > 2)
    {
      if (a3 - 3 <= 2)
        return *((float *)&this[1].var12 + 1);
    }
    else
    {
      return this[1].var11;
    }
  }
  else if ((a2 - 1) <= 1)
  {
    if (a3 > 2)
    {
      if (a3 - 3 <= 2)
        return this->var25.var0.var0[0];
    }
    else
    {
      return *(float *)&this[1].var12;
    }
  }
  return result;
}

uint64_t btConeTwistConstraint::setFrames(btConeTwistConstraint *this, const btTransform *a2, const btTransform *a3)
{
  *(btTransform *)((char *)&this->var14 + 44) = *a2;
  *(btTransform *)((char *)&this->var15 + 44) = *a3;
  return (*((uint64_t (**)(btConeTwistConstraint *))this->var0 + 2))(this);
}

void btConeTwistConstraint::~btConeTwistConstraint(btConeTwistConstraint *this)
{
  this->var0 = (void **)off_1EA5968E0;
}

{
  this->var0 = (void **)off_1EA5968E0;
  btAlignedFreeInternal((void **)&this->var0);
}

uint64_t btConeTwistConstraint::calculateSerializeBufferSize(btConeTwistConstraint *this)
{
  return 224;
}

const char *btConeTwistConstraint::serialize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t j;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t k;
  uint64_t m;
  __int128 v15;

  btTypedConstraint::serialize(a1, a2, a3);
  v5 = 0;
  v6 = a1 + 368;
  v7 = a2 + 64;
  do
  {
    for (i = 0; i != 16; i += 4)
      *(_DWORD *)(v7 + i) = *(_DWORD *)(v6 + i);
    ++v5;
    v6 += 16;
    v7 += 16;
  }
  while (v5 != 3);
  for (j = 0; j != 16; j += 4)
    *(_DWORD *)(a2 + 112 + j) = *(_DWORD *)(a1 + 416 + j);
  v10 = 0;
  v11 = a1 + 432;
  v12 = a2 + 128;
  do
  {
    for (k = 0; k != 16; k += 4)
      *(_DWORD *)(v12 + k) = *(_DWORD *)(v11 + k);
    ++v10;
    v11 += 16;
    v12 += 16;
  }
  while (v10 != 3);
  for (m = 0; m != 16; m += 4)
    *(_DWORD *)(a2 + 176 + m) = *(_DWORD *)(a1 + 480 + m);
  *(_DWORD *)(a2 + 192) = *(_DWORD *)(a1 + 512);
  *(_QWORD *)&v15 = *(_QWORD *)(a1 + 516);
  *((_QWORD *)&v15 + 1) = *(_QWORD *)(a1 + 496);
  *(_OWORD *)(a2 + 196) = v15;
  *(_QWORD *)(a2 + 212) = *(_QWORD *)(a1 + 504);
  return "btConeTwistConstraintData";
}

void btJacobianEntry::btJacobianEntry(btJacobianEntry *this, const btMatrix3x3 *a2, const btMatrix3x3 *a3, int8x16_t *a4, int8x16_t *a5, float32x4_t *a6, float32x4_t *a7, float a8, float32x4_t *a9, float a10)
{
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  int8x16_t v13;
  float32x4_t v14;
  int8x16_t v15;
  int8x16_t v16;
  btVector3 v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int8x16_t v21;
  int8x16_t v22;
  btVector3 v23;
  int8x16_t v24;
  btVector3 v25;
  btVector3 v26;
  int8x16_t v27;
  float v28;
  int8x16_t v29;

  v10 = *a6;
  this->var0 = (btVector3)*a6;
  *(int8x8_t *)v11.f32 = vext_s8(*(int8x8_t *)a4->i8, (int8x8_t)*(_OWORD *)&vextq_s8(*a4, *a4, 8uLL), 4uLL);
  v11.i64[1] = a4->i64[0];
  *(int8x8_t *)v12.f32 = vext_s8(*(int8x8_t *)v10.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL), 4uLL);
  v12.i64[1] = v10.i64[0];
  v13 = (int8x16_t)vsubq_f32(vmulq_f32(v12, *(float32x4_t *)a4), vmulq_f32(v10, v11));
  v12.i64[0] = vextq_s8(v13, v13, 4uLL).u64[0];
  v12.i64[1] = v13.i64[0];
  v14 = v12;
  v14.i32[3] = 0;
  v15 = (int8x16_t)vmulq_f32((float32x4_t)a2->var0[2], v12);
  v16 = (int8x16_t)vmulq_f32((float32x4_t)a2->var0[0], v14);
  v17 = (btVector3)vmulq_f32((float32x4_t)a2->var0[1], v14);
  v15.i32[3] = 0;
  *(float32x2_t *)v17.var0.var0 = vadd_f32(vpadd_f32(*(float32x2_t *)v16.i8, *(float32x2_t *)v17.var0.var0), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL)));
  *(float32x2_t *)&v17.var0.var0[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v15.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL)), 0);
  this->var1 = v17;
  v15.i64[0] = 0x8000000080000000;
  v15.i64[1] = 0x8000000080000000;
  v18 = (float32x4_t)veorq_s8((int8x16_t)v10, v15);
  *(int8x8_t *)v19.f32 = vext_s8(*(int8x8_t *)a5->i8, (int8x8_t)*(_OWORD *)&vextq_s8(*a5, *a5, 8uLL), 4uLL);
  v19.i64[1] = a5->i64[0];
  *(int8x8_t *)v20.f32 = vext_s8(*(int8x8_t *)v18.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL), 4uLL);
  v20.i64[1] = v18.i64[0];
  v21 = (int8x16_t)vaddq_f32(vmulq_f32(*(float32x4_t *)a5, v20), vmulq_f32(v19, v10));
  v18.i64[0] = vextq_s8(v21, v21, 4uLL).u64[0];
  v18.i64[1] = v21.i64[0];
  v22 = (int8x16_t)vmulq_f32((float32x4_t)a3->var0[2], v18);
  v18.i32[3] = 0;
  v23 = (btVector3)vmulq_f32((float32x4_t)a3->var0[0], v18);
  v24 = (int8x16_t)vmulq_f32((float32x4_t)a3->var0[1], v18);
  v22.i32[3] = 0;
  *(float32x2_t *)v23.var0.var0 = vadd_f32(vpadd_f32(*(float32x2_t *)v23.var0.var0, *(float32x2_t *)v24.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL)));
  *(float32x2_t *)&v23.var0.var0[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v22.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL)), 0);
  this->var2 = v23;
  v25 = (btVector3)vmulq_f32((float32x4_t)v17, *a7);
  this->var3 = v25;
  v26 = (btVector3)vmulq_f32(*a9, (float32x4_t)v23);
  this->var4 = v26;
  v27 = (int8x16_t)vmulq_f32((float32x4_t)v17, (float32x4_t)v25);
  v28 = (float)(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL), vpadd_f32(*(float32x2_t *)v27.i8, *(float32x2_t *)v27.i8)).f32[0]+ a8)+ a10;
  v29 = (int8x16_t)vmulq_f32((float32x4_t)v23, (float32x4_t)v26);
  this->var5 = v28
             + vadd_f32(vpadd_f32(*(float32x2_t *)v29.i8, *(float32x2_t *)v29.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL)).f32[0];
}

float resolveSingleBilateral(btRigidBody *a1, float32x4_t *a2, btRigidBody *a3, float32x4_t *a4, float a5, float32x4_t *a6, float *a7, float a8)
{
  int8x16_t v9;
  float result;
  int8x16_t v12;
  btVector3 v13;
  int8x8_t v14;
  int8x16_t v15;
  btVector3 v16;
  int8x8_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int8x16_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  int8x16_t v26;
  float32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int8x16_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int8x16_t v33;
  int8x16_t v34;
  float32x4_t v35;
  btMatrix3x3 v36;
  btMatrix3x3 v37;
  btVector3 v38;
  btVector3 v39;
  btJacobianEntry v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v9 = (int8x16_t)vmulq_f32(*a6, *a6);
  result = vadd_f32(vpadd_f32(*(float32x2_t *)v9.i8, *(float32x2_t *)v9.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL)).f32[0];
  if (result <= 1.1)
  {
    v12 = *((int8x16_t *)a1 + 3);
    v13 = (btVector3)vsubq_f32(*a2, *((float32x4_t *)a1 + 4));
    v14 = (int8x8_t)vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL).u64[0];
    v13.var0.var0[3] = 0.0;
    v15 = *((int8x16_t *)a3 + 3);
    v16 = (btVector3)vsubq_f32(*a4, *((float32x4_t *)a3 + 4));
    v17 = (int8x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL).u64[0];
    v16.var0.var0[3] = 0.0;
    v38 = v16;
    v39 = v13;
    v18 = *((float32x4_t *)a1 + 23);
    *(int8x8_t *)v19.f32 = vext_s8(*(int8x8_t *)v18.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL), 4uLL);
    v19.i64[1] = *((_QWORD *)a1 + 46);
    *(int8x8_t *)v20.f32 = vext_s8(*(int8x8_t *)v13.var0.var0, v14, 4uLL);
    v20.i64[1] = *(_QWORD *)v13.var0.var0;
    v21 = (int8x16_t)vsubq_f32(vmulq_f32(v18, v20), vmulq_f32(v19, (float32x4_t)v13));
    v20.i64[0] = vextq_s8(v21, v21, 4uLL).u64[0];
    v20.i64[1] = v21.i64[0];
    v22 = vaddq_f32(*((float32x4_t *)a1 + 22), v20);
    v23 = *((float32x4_t *)a3 + 23);
    *(int8x8_t *)v24.f32 = vext_s8(*(int8x8_t *)v23.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL), 4uLL);
    v24.i64[1] = *((_QWORD *)a3 + 46);
    *(int8x8_t *)v25.f32 = vext_s8(*(int8x8_t *)v16.var0.var0, v17, 4uLL);
    v25.i64[1] = *(_QWORD *)v16.var0.var0;
    v26 = (int8x16_t)vsubq_f32(vmulq_f32(v23, v25), vmulq_f32(v24, (float32x4_t)v16));
    *(_QWORD *)v16.var0.var0 = vextq_s8(v26, v26, 4uLL).u64[0];
    *(_QWORD *)&v16.var0.var0[2] = v26.i64[0];
    v27 = vsubq_f32(v22, vaddq_f32(*((float32x4_t *)a3 + 22), (float32x4_t)v16));
    v28 = *((int32x4_t *)a1 + 1);
    v29 = *((int32x4_t *)a1 + 2);
    v30 = (int8x16_t)vtrn1q_s32(v28, v29);
    *(int32x2_t *)v28.i8 = vzip2_s32(*(int32x2_t *)v28.i8, *(int32x2_t *)v29.i8);
    v29.i64[0] = vextq_s8(v30, v30, 8uLL).u64[0];
    v30.i64[1] = v12.u32[0];
    v28.u64[1] = (unint64_t)vzip2_s32(*(int32x2_t *)v12.i8, 0);
    v29.i64[1] = vextq_s8(v12, v12, 8uLL).u32[0];
    v37.var0[0] = (btVector3)v30;
    v37.var0[1] = (btVector3)v28;
    v31 = *((int32x4_t *)a3 + 1);
    v32 = *((int32x4_t *)a3 + 2);
    v33 = (int8x16_t)vtrn1q_s32(v31, v32);
    *(int32x2_t *)v31.i8 = vzip2_s32(*(int32x2_t *)v31.i8, *(int32x2_t *)v32.i8);
    v32.i64[0] = vextq_s8(v33, v33, 8uLL).u64[0];
    v27.i32[3] = 0;
    v33.i64[1] = v15.u32[0];
    v31.u64[1] = (unint64_t)vzip2_s32(*(int32x2_t *)v15.i8, 0);
    v37.var0[2] = (btVector3)v29;
    v32.i64[1] = vextq_s8(v15, v15, 8uLL).u32[0];
    v35 = v27;
    v36.var0[0] = (btVector3)v33;
    v36.var0[1] = (btVector3)v31;
    v36.var0[2] = (btVector3)v32;
    btJacobianEntry::btJacobianEntry(&v40, &v37, &v36, (int8x16_t *)&v39, (int8x16_t *)&v38, a6, (float32x4_t *)a1 + 28, *((float *)a1 + 96), (float32x4_t *)a3 + 28, *((float *)a3 + 96));
    v34 = (int8x16_t)vmulq_f32(*a6, v35);
    result = (float)(1.0 / v40.var5)
           * (float)(-0.2
                   * vadd_f32(vpadd_f32(*(float32x2_t *)v34.i8, *(float32x2_t *)v34.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL)).f32[0]);
    *a7 = result;
  }
  else
  {
    *a7 = 0.0;
  }
  return result;
}

uint64_t btTypedConstraint::calculateSerializeBufferSize(btTypedConstraint *this)
{
  return 64;
}

float btGeneric6DofConstraint::getAngle(btGeneric6DofConstraint *this, int a2)
{
  return *((float *)this + a2 + 332);
}

void btJacobianEntry::btJacobianEntry(btJacobianEntry *this, float32x4_t *a2, const btMatrix3x3 *a3, const btMatrix3x3 *a4, float32x4_t *a5, float32x4_t *a6)
{
  btVector3 v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  float32x4_t v10;
  btVector3 v11;
  int8x16_t v12;
  int8x16_t v13;
  btVector3 v14;
  btVector3 v15;
  int8x16_t v16;
  int8x16_t v17;

  this->var0 = 0uLL;
  v6 = (btVector3)vmulq_f32((float32x4_t)a3->var0[0], *a2);
  v7 = (int8x16_t)vmulq_f32(*a2, (float32x4_t)a3->var0[1]);
  v8 = (int8x16_t)vmulq_f32(*a2, (float32x4_t)a3->var0[2]);
  v8.i32[3] = 0;
  *(float32x2_t *)v6.var0.var0 = vadd_f32(vpadd_f32(*(float32x2_t *)v6.var0.var0, *(float32x2_t *)v7.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v6, (int8x16_t)v6, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)));
  *(float32x2_t *)&v6.var0.var0[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v8.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL)), 0);
  this->var1 = v6;
  v9.i64[0] = 0x8000000080000000;
  v9.i64[1] = 0x8000000080000000;
  v10 = (float32x4_t)veorq_s8(*(int8x16_t *)a2, v9);
  v11 = (btVector3)vmulq_f32((float32x4_t)a4->var0[0], v10);
  v12 = (int8x16_t)vmulq_f32((float32x4_t)a4->var0[1], v10);
  v13 = (int8x16_t)vmulq_f32((float32x4_t)a4->var0[2], v10);
  v13.i32[3] = 0;
  *(float32x2_t *)v11.var0.var0 = vadd_f32(vpadd_f32(*(float32x2_t *)v11.var0.var0, *(float32x2_t *)v12.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL)));
  *(float32x2_t *)&v11.var0.var0[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v13.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL)), 0);
  this->var2 = v11;
  v14 = (btVector3)vmulq_f32((float32x4_t)v6, *a5);
  this->var3 = v14;
  v15 = (btVector3)vmulq_f32((float32x4_t)v11, *a6);
  this->var4 = v15;
  v16 = (int8x16_t)vmulq_f32((float32x4_t)v6, (float32x4_t)v14);
  v17 = (int8x16_t)vmulq_f32((float32x4_t)v11, (float32x4_t)v15);
  LODWORD(this->var5) = vadd_f32(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL), vpadd_f32(*(float32x2_t *)v16.i8, *(float32x2_t *)v16.i8)), vadd_f32(vpadd_f32(*(float32x2_t *)v17.i8, *(float32x2_t *)v17.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL))).u32[0];
}

void btHingeConstraint::btHingeConstraint(btHingeConstraint *this, btRigidBody *a2, btRigidBody *a3, const btVector3 *a4, const btVector3 *a5, float32x4_t *a6, float32x4_t *a7, int a8)
{
  uint64_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  int8x16_t v18;
  float v19;
  float32x4_t v20;
  float32x4_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int32x2_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  int8x16_t v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float32x4_t v37;
  float32x4_t v38;
  int8x16_t v39;
  float32x4_t v40;
  int32x4_t v41;
  float32x4_t v42;
  int32x2_t v43;
  float32x2_t v44;
  int32x2_t v45;
  float32x2_t v46;
  float32x2_t v47;
  float32x2_t v48;
  float32x4_t v49;
  int8x16_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x2_t v53;
  int32x2_t v54;
  float32x2_t v55;
  float32x2_t v56;
  float32x2_t v57;
  float32x2_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  int8x16_t v62;
  int8x8_t v63;
  float v64;

  btTypedConstraint::btTypedConstraint((uint64_t)this, 4, (uint64_t)a2, (uint64_t)a3);
  *(_QWORD *)v14 = off_1EA596848;
  *(_OWORD *)(v14 + 792) = xmmword_1DD02CED0;
  *(_DWORD *)(v14 + 808) = 1065353216;
  *(_QWORD *)(v14 + 812) = 0;
  *(_BYTE *)(v14 + 820) = 0;
  *(_DWORD *)(v14 + 840) = 0x1000000;
  *(_BYTE *)(v14 + 844) = a8;
  *(_DWORD *)(v14 + 852) = 0;
  *(btVector3 *)(v14 + 704) = *a4;
  v15.i32[0] = *((_DWORD *)a2 + 4);
  v15.i32[1] = *((_DWORD *)a2 + 8);
  v16 = v15;
  v16.i32[2] = *((_DWORD *)a2 + 12);
  v17 = *a6;
  v18 = (int8x16_t)vmulq_f32(*a6, v16);
  v19 = vadd_f32(vpadd_f32(*(float32x2_t *)v18.i8, *(float32x2_t *)v18.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL)).f32[0];
  if (v19 >= 1.0)
  {
    v15.i32[0] = *((_DWORD *)a2 + 5);
    v17.i32[0] = *((_DWORD *)a2 + 6);
    v17.i32[1] = *((_DWORD *)a2 + 10);
    v17.i32[2] = *((_DWORD *)a2 + 14);
    v24.i64[0] = 0x8000000080000000;
    v24.i64[1] = 0x8000000080000000;
    v17 = (float32x4_t)veorq_s8((int8x16_t)v17, v24);
  }
  else
  {
    if (v19 > -1.0)
    {
      v20.i64[0] = vextq_s8((int8x16_t)v17, (int8x16_t)v17, 4uLL).u64[0];
      v20.i64[1] = a6->i64[0];
      *(int8x8_t *)v21.f32 = vext_s8(*(int8x8_t *)v15.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL), 4uLL);
      v21.i64[1] = v15.i64[0];
      v22 = (int8x16_t)vsubq_f32(vmulq_f32(v17, v21), vmulq_f32(v16, v20));
      v15.i64[0] = vextq_s8(v22, v22, 4uLL).u64[0];
      *(int8x8_t *)v21.f32 = vext_s8(*(int8x8_t *)v15.f32, *(int8x8_t *)v22.i8, 4uLL);
      v21.i64[1] = v15.i64[0];
      v15.i64[1] = v22.u32[0];
      v23 = (int8x16_t)vsubq_f32(vmulq_f32(v20, v15), vmulq_f32(v17, v21));
      v17.i64[0] = vextq_s8(v23, v23, 4uLL).u64[0];
      v17.i64[1] = v23.u32[0];
      goto LABEL_7;
    }
    v15.i32[0] = *((_DWORD *)a2 + 5);
    v17.i32[0] = *((_DWORD *)a2 + 6);
    v17.i32[1] = *((_DWORD *)a2 + 10);
    v17.i32[2] = *((_DWORD *)a2 + 14);
  }
  v15.i32[1] = *((_DWORD *)a2 + 9);
  v15.i32[2] = *((_DWORD *)a2 + 13);
LABEL_7:
  *(int32x2_t *)(v14 + 656) = vzip1_s32(*(int32x2_t *)v17.f32, *(int32x2_t *)v15.f32);
  *(_DWORD *)(v14 + 664) = a6->i32[0];
  *(_DWORD *)(v14 + 668) = 0;
  *(int32x2_t *)(v14 + 672) = vzip2_s32(*(int32x2_t *)v17.f32, *(int32x2_t *)v15.f32);
  *(_DWORD *)(v14 + 680) = a6->i32[1];
  *(_DWORD *)(v14 + 684) = 0;
  v25 = (int32x2_t)vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).u64[0];
  *(int32x2_t *)(v14 + 688) = vzip1_s32(v25, (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL));
  *(_DWORD *)(v14 + 696) = a6->i32[2];
  *(_DWORD *)(v14 + 700) = 0;
  v26 = *a6;
  v27 = *a7;
  *(int8x8_t *)v28.f32 = vext_s8(*(int8x8_t *)a7->f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL), 4uLL);
  v28.i64[1] = a7->i64[0];
  v29 = (int8x16_t)vmulq_f32(*a6, *a7);
  v30 = vadd_f32(vpadd_f32(*(float32x2_t *)v29.i8, *(float32x2_t *)v29.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL)).f32[0];
  if (v30 >= -1.0)
  {
    v38.i64[0] = vextq_s8((int8x16_t)v26, (int8x16_t)v26, 4uLL).u64[0];
    v38.i64[1] = a6->i64[0];
    v39 = (int8x16_t)vsubq_f32(vmulq_f32(v26, v28), vmulq_f32(v27, v38));
    v40 = (float32x4_t)vextq_s8(vextq_s8(v39, v39, 0xCuLL), v39, 8uLL);
    v40.i32[3] = sqrtf((float)(v30 + 1.0) + (float)(v30 + 1.0));
    v41.i32[1] = 1056964608;
    v41.i64[1] = 0x3F0000003F000000;
    *(float *)v41.i32 = 1.0 / v40.f32[3];
    v42 = (float32x4_t)vzip1q_s32(v41, v41);
    v42.f32[2] = 1.0 / v40.f32[3];
    v37 = vmulq_f32(v40, v42);
  }
  else
  {
    LODWORD(v31) = HIDWORD(a6->i64[0]);
    v32 = 1.0 / sqrtf((float)(v31 * v31) + (float)(v26.f32[0] * v26.f32[0]));
    v26.f32[0] = v26.f32[0] * v32;
    v33 = -(float)(v26.f32[1] * v32);
    v34 = 1.0 / sqrtf((float)(v26.f32[2] * v26.f32[2]) + (float)(v31 * v31));
    v35 = -(float)(v26.f32[2] * v34);
    v36 = v26.f32[1] * v34;
    if (fabsf(v26.f32[2]) <= 0.70711)
    {
      v35 = v26.f32[0];
      v36 = 0.0;
    }
    else
    {
      v33 = 0.0;
    }
    v37.i64[0] = __PAIR64__(LODWORD(v35), LODWORD(v33));
    v37.i64[1] = LODWORD(v36);
  }
  v43 = (int32x2_t)vextq_s8((int8x16_t)v37, (int8x16_t)v37, 8uLL).u64[0];
  v44 = (float32x2_t)vext_s8((int8x8_t)v43, *(int8x8_t *)v37.f32, 4uLL);
  v45 = vzip1_s32(v25, *(int32x2_t *)v17.f32);
  v46 = (float32x2_t)vzip1_s32(v43, *(int32x2_t *)v37.f32);
  v47 = (float32x2_t)vext_s8(*(int8x8_t *)v37.f32, (int8x8_t)v43, 4uLL);
  v48 = vmul_f32((float32x2_t)v45, v44);
  *(float32x2_t *)v49.f32 = vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v17, (int8x16_t)v17, 4uLL), v46);
  *(float32x2_t *)&v49.u32[2] = vmul_f32((float32x2_t)vrev64_s32(v45), v47);
  *(float32x2_t *)v50.i8 = vadd_f32(vmul_laneq_f32(*(float32x2_t *)v17.f32, v37, 3), vmul_f32((float32x2_t)v45, v47));
  v50.u64[1] = (unint64_t)vadd_f32(vmul_lane_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v17.f32, 1), v48);
  v51 = vsubq_f32((float32x4_t)veorq_s8(v50, (int8x16_t)xmmword_1DD007D50), v49);
  v52 = (float32x4_t)veorq_s8((int8x16_t)v37, (int8x16_t)xmmword_1DD007D60);
  v53 = (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL), *(int32x2_t *)v51.f32);
  v54 = (int32x2_t)vextq_s8((int8x16_t)v52, (int8x16_t)v52, 8uLL).u64[0];
  *(int32x2_t *)v49.f32 = vzip1_s32(v54, *(int32x2_t *)v52.f32);
  v55 = (float32x2_t)vextq_s8((int8x16_t)v51, (int8x16_t)v51, 4uLL).u64[0];
  v56 = vmul_laneq_f32(*(float32x2_t *)v51.f32, v52, 3);
  v57 = vmul_f32((float32x2_t)vext_s8((int8x8_t)v54, *(int8x8_t *)v52.f32, 4uLL), v53);
  v58 = vmul_lane_f32(*(float32x2_t *)v51.f32, *(float32x2_t *)v52.f32, 1);
  *(float32x2_t *)v59.f32 = vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v52.f32, (int8x8_t)v54, 4uLL), v53);
  *(float32x2_t *)&v59.u32[2] = vmul_f32((float32x2_t)vrev64_s32(*(int32x2_t *)v49.f32), v55);
  v60 = vmulq_laneq_f32(v52, v51, 3);
  *(float32x2_t *)v52.f32 = vadd_f32(v56, vmul_f32(*(float32x2_t *)v49.f32, v55));
  *(float32x2_t *)&v52.u32[2] = vadd_f32(v58, v57);
  v61 = vaddq_f32(vsubq_f32(v60, v59), (float32x4_t)veorq_s8((int8x16_t)v52, (int8x16_t)xmmword_1DD007D50));
  v60.i64[0] = vextq_s8((int8x16_t)v61, (int8x16_t)v61, 8uLL).u64[0];
  v61.i32[3] = 0;
  *(int8x8_t *)v60.f32 = vext_s8(*(int8x8_t *)v61.f32, *(int8x8_t *)v60.f32, 4uLL);
  v60.i64[1] = v61.i64[0];
  v62 = (int8x16_t)vsubq_f32(vmulq_f32(v27, v60), vmulq_f32(v28, v61));
  *(btVector3 *)(v14 + 768) = *a5;
  v63 = vext_s8(*(int8x8_t *)v61.f32, (int8x8_t)*(_OWORD *)&vextq_s8(v62, v62, 8uLL), 4uLL);
  v60.i64[0] = vzip2q_s32((int32x4_t)v61, vuzp1q_s32((int32x4_t)v61, (int32x4_t)v62)).u64[0];
  v61.i32[1] = v62.i32[1];
  *(_QWORD *)(v14 + 720) = v61.i64[0];
  *(_DWORD *)(v14 + 728) = a7->i32[0];
  *(_DWORD *)(v14 + 732) = 0;
  *(int8x8_t *)(v14 + 736) = v63;
  *(_DWORD *)(v14 + 744) = a7->i32[1];
  *(_DWORD *)(v14 + 748) = 0;
  *(_QWORD *)(v14 + 752) = v60.i64[0];
  *(_DWORD *)(v14 + 760) = a7->i32[2];
  *(_DWORD *)(v14 + 764) = 0;
  v64 = 1.0;
  if (a8)
    v64 = -1.0;
  *(float *)(v14 + 836) = v64;
}

void btHingeConstraint::btHingeConstraint(btHingeConstraint *this, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, int a5)
{
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  float v13;
  unsigned int v14;
  float v15;
  int8x16_t v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  int8x16_t v24;
  int8x16_t v25;
  float32x4_t v26;
  int8x16_t v27;
  int8x8_t v28;
  int8x8_t v29;
  float32x4_t v30;
  float32x4_t v31;
  int8x16_t v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float32x4_t v42;
  float32x4_t v43;
  int8x16_t v44;
  float32x4_t v45;
  int32x4_t v46;
  float32x4_t v47;
  int32x2_t v48;
  float32x2_t v49;
  int32x2_t v50;
  float32x2_t v51;
  float32x2_t v52;
  float32x4_t v53;
  int8x16_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x2_t v57;
  int32x2_t v58;
  float32x2_t v59;
  float32x2_t v60;
  float32x2_t v61;
  float32x2_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  int8x16_t v66;
  float32x4_t v67;
  int8x16_t v68;
  int8x16_t v69;
  unint64_t v70;
  float v71;

  v9 = btTypedConstraint::btTypedConstraint((uint64_t)this, 4, (uint64_t)a2);
  *(_QWORD *)v9 = off_1EA596848;
  *(_OWORD *)(v9 + 792) = xmmword_1DD02CED0;
  *(_DWORD *)(v9 + 808) = 1065353216;
  *(_QWORD *)(v9 + 812) = 0;
  *(_BYTE *)(v9 + 820) = 0;
  *(_DWORD *)(v9 + 840) = 0x1000000;
  *(_BYTE *)(v9 + 844) = a5;
  *(_DWORD *)(v9 + 852) = 0;
  v10 = a4->f32[2];
  v11 = a4->f32[1];
  if (fabsf(v10) <= 0.70711)
  {
    v19 = (float)(v11 * v11) + (float)(a4->f32[0] * a4->f32[0]);
    v20 = 1.0 / sqrtf(v19);
    v16.i64[1] = 0;
    *(float *)v16.i32 = -(float)(v11 * v20);
    *(float *)&v16.i32[1] = a4->f32[0] * v20;
    v15 = -(float)(v10 * *(float *)&v16.i32[1]);
    v17 = v10 * *(float *)v16.i32;
    v18 = v19 * v20;
  }
  else
  {
    v12 = (float)(v10 * v10) + (float)(v11 * v11);
    v13 = 1.0 / sqrtf(v12);
    *(float *)&v14 = v11 * v13;
    v15 = v12 * v13;
    v16.i32[0] = 0;
    *(float *)&v16.i32[1] = -(float)(v10 * v13);
    v16.i64[1] = v14;
    v17 = -(float)(a4->f32[0] * *(float *)&v14);
    v18 = a4->f32[0] * *(float *)&v16.i32[1];
  }
  *(float32x4_t *)(v9 + 704) = *a3;
  *(_DWORD *)(v9 + 656) = v16.i32[0];
  *(float *)(v9 + 660) = v15;
  *(_DWORD *)(v9 + 664) = a4->i32[0];
  *(_DWORD *)(v9 + 668) = 0;
  *(_DWORD *)(v9 + 672) = v16.i32[1];
  *(float *)(v9 + 676) = v17;
  *(_DWORD *)(v9 + 680) = a4->i32[1];
  *(_DWORD *)(v9 + 688) = v16.i32[2];
  *(_DWORD *)(v9 + 684) = 0;
  *(float *)(v9 + 692) = v18;
  *(_DWORD *)(v9 + 696) = a4->i32[2];
  *(_DWORD *)(v9 + 700) = 0;
  v21 = *a4;
  v22 = a2[1];
  v23 = a2[2];
  v24 = (int8x16_t)vmulq_f32(v22, *a4);
  v25 = (int8x16_t)vmulq_f32(*a4, v23);
  v26 = a2[3];
  v27 = (int8x16_t)vmulq_f32(*a4, v26);
  v27.i32[3] = 0;
  v28 = (int8x8_t)vadd_f32(vpadd_f32(*(float32x2_t *)v24.i8, *(float32x2_t *)v25.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL)));
  v29 = (int8x8_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v27.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL)), 0);
  *(int8x8_t *)v30.f32 = vext_s8(v28, v29, 4uLL);
  *(int8x8_t *)&v30.u32[2] = v28;
  *(int8x8_t *)v31.f32 = v28;
  *(int8x8_t *)&v31.u32[2] = v29;
  v32 = (int8x16_t)vmulq_f32(*a4, v31);
  v33 = vadd_f32(vpadd_f32(*(float32x2_t *)v32.i8, *(float32x2_t *)v32.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL)).f32[0];
  if (v33 >= -1.0)
  {
    v43.i64[0] = vextq_s8((int8x16_t)v21, (int8x16_t)v21, 4uLL).u64[0];
    v43.i64[1] = a4->i64[0];
    v44 = (int8x16_t)vsubq_f32(vmulq_f32(v21, v30), vmulq_f32(v43, v31));
    v45 = (float32x4_t)vextq_s8(vextq_s8(v44, v44, 0xCuLL), v44, 8uLL);
    v45.i32[3] = sqrtf((float)(v33 + 1.0) + (float)(v33 + 1.0));
    v46.i32[1] = 1056964608;
    v46.i64[1] = 0x3F0000003F000000;
    *(float *)v46.i32 = 1.0 / v45.f32[3];
    v47 = (float32x4_t)vzip1q_s32(v46, v46);
    v47.f32[2] = 1.0 / v45.f32[3];
    v42 = vmulq_f32(v45, v47);
  }
  else
  {
    LODWORD(v34) = HIDWORD(a4->i64[0]);
    v35 = fabsf(v21.f32[2]);
    v36 = 1.0 / sqrtf((float)(v34 * v34) + (float)(v21.f32[0] * v21.f32[0]));
    v37 = -(float)(v21.f32[1] * v36);
    v38 = v21.f32[0] * v36;
    v39 = v37;
    v21.f32[0] = 1.0 / sqrtf((float)(v21.f32[2] * v21.f32[2]) + (float)(v34 * v34));
    v40 = v21.f32[1] * v21.f32[0];
    if (v35 <= 0.70711)
    {
      v41 = v38;
    }
    else
    {
      v39 = 0.0;
      v41 = -(float)(v21.f32[2] * v21.f32[0]);
    }
    if (v35 <= 0.70711)
      v40 = 0.0;
    v42.i64[0] = __PAIR64__(LODWORD(v41), LODWORD(v39));
    v42.i64[1] = LODWORD(v40);
  }
  v48 = (int32x2_t)vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL).u64[0];
  v49 = (float32x2_t)vext_s8((int8x8_t)v48, *(int8x8_t *)v42.f32, 4uLL);
  v50 = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL), *(int32x2_t *)v16.i8);
  v51 = (float32x2_t)vzip1_s32(v48, *(int32x2_t *)v42.f32);
  v52 = (float32x2_t)vext_s8(*(int8x8_t *)v42.f32, (int8x8_t)v48, 4uLL);
  *(float32x2_t *)v53.f32 = vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 4uLL), v51);
  *(float32x2_t *)&v53.u32[2] = vmul_f32((float32x2_t)vrev64_s32(v50), v52);
  *(float32x2_t *)v54.i8 = vadd_f32(vmul_laneq_f32(*(float32x2_t *)v16.i8, v42, 3), vmul_f32((float32x2_t)v50, v52));
  v54.u64[1] = (unint64_t)vadd_f32(vmul_lane_f32(*(float32x2_t *)v42.f32, *(float32x2_t *)v16.i8, 1), vmul_f32((float32x2_t)v50, v49));
  v55 = vsubq_f32((float32x4_t)veorq_s8(v54, (int8x16_t)xmmword_1DD007D50), v53);
  v56 = (float32x4_t)veorq_s8((int8x16_t)v42, (int8x16_t)xmmword_1DD007D60);
  v57 = (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v55, (int8x16_t)v55, 8uLL), *(int32x2_t *)v55.f32);
  v58 = (int32x2_t)vextq_s8((int8x16_t)v56, (int8x16_t)v56, 8uLL).u64[0];
  *(int32x2_t *)v53.f32 = vzip1_s32(v58, *(int32x2_t *)v56.f32);
  v59 = (float32x2_t)vextq_s8((int8x16_t)v55, (int8x16_t)v55, 4uLL).u64[0];
  v60 = vmul_laneq_f32(*(float32x2_t *)v55.f32, v56, 3);
  v61 = vmul_f32((float32x2_t)vext_s8((int8x8_t)v58, *(int8x8_t *)v56.f32, 4uLL), v57);
  v62 = vmul_lane_f32(*(float32x2_t *)v55.f32, *(float32x2_t *)v56.f32, 1);
  *(float32x2_t *)v63.f32 = vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v56.f32, (int8x8_t)v58, 4uLL), v57);
  *(float32x2_t *)&v63.u32[2] = vmul_f32((float32x2_t)vrev64_s32(*(int32x2_t *)v53.f32), v59);
  v64 = vmulq_laneq_f32(v56, v55, 3);
  *(float32x2_t *)v55.f32 = vadd_f32(v60, vmul_f32(*(float32x2_t *)v53.f32, v59));
  *(float32x2_t *)&v55.u32[2] = vadd_f32(v62, v61);
  v65 = vaddq_f32(vsubq_f32(v64, v63), (float32x4_t)veorq_s8((int8x16_t)v55, (int8x16_t)xmmword_1DD007D50));
  v64.i64[0] = vextq_s8((int8x16_t)v65, (int8x16_t)v65, 8uLL).u64[0];
  v65.i32[3] = 0;
  *(int8x8_t *)v64.f32 = vext_s8(*(int8x8_t *)v65.f32, *(int8x8_t *)v64.f32, 4uLL);
  v64.i64[1] = v65.i64[0];
  v66 = (int8x16_t)vsubq_f32(vmulq_f32(v31, v64), vmulq_f32(v30, v65));
  v67 = vmulq_f32(v22, *a3);
  v68 = (int8x16_t)vmulq_f32(v23, *a3);
  v69 = (int8x16_t)vmulq_f32(v26, *a3);
  v69.i32[3] = 0;
  *(float32x2_t *)v67.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v67.f32, *(float32x2_t *)v68.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v67, (int8x16_t)v67, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v68, v68, 8uLL)));
  *(float32x2_t *)&v67.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v69.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v69, v69, 8uLL)), 0);
  *(int8x8_t *)v69.i8 = vext_s8(*(int8x8_t *)v65.f32, (int8x8_t)*(_OWORD *)&vextq_s8(v66, v66, 8uLL), 4uLL);
  v70 = vzip2q_s32((int32x4_t)v65, vuzp1q_s32((int32x4_t)v65, (int32x4_t)v66)).u64[0];
  v65.i32[1] = v66.i32[1];
  *(float32x4_t *)(v9 + 768) = vaddq_f32(a2[4], v67);
  *(_QWORD *)(v9 + 720) = v65.i64[0];
  *(_DWORD *)(v9 + 728) = v28.i32[0];
  *(_DWORD *)(v9 + 732) = 0;
  *(_QWORD *)(v9 + 736) = v69.i64[0];
  *(_DWORD *)(v9 + 744) = v28.i32[1];
  *(_DWORD *)(v9 + 748) = 0;
  *(_QWORD *)(v9 + 752) = v70;
  *(_DWORD *)(v9 + 760) = v29.i32[0];
  *(_DWORD *)(v9 + 764) = 0;
  v71 = 1.0;
  if (a5)
    v71 = -1.0;
  *(float *)(v9 + 836) = v71;
}

void btHingeConstraint::buildJacobian(btHingeConstraint *this, __n128 a2, double a3, double a4, double a5, __n128 a6)
{
  btRigidBody *var8;
  btRigidBody *var9;
  float32x4_t v9;
  int8x16_t v10;
  float32x4_t v11;
  int8x16_t v12;
  float32x2_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  int8x16_t v17;
  int8x16_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int8x16_t v21;
  float v22;
  int8x16_t v23;
  uint64_t v24;
  BOOL v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  btJacobianEntry *v42;
  btRigidBody *v43;
  btRigidBody *v44;
  int32x4_t v45;
  int32x4_t v46;
  int8x16_t v47;
  int8x16_t v48;
  float32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int8x16_t v52;
  int8x16_t v53;
  float32x4_t v54;
  btVector3 v55;
  btVector3 v56;
  uint64_t v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float32x4_t v62;
  float v63;
  float v64;
  float32x2_t v65;
  btRigidBody *v66;
  btRigidBody *v67;
  float32x4_t v68;
  float32x4_t v69;
  int8x16_t v70;
  int8x16_t v71;
  float32x4_t v72;
  int8x16_t v73;
  btVector3 v74;
  int8x16_t v75;
  int8x16_t v76;
  btVector3 v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int32x4_t v81;
  int32x4_t v82;
  int8x16_t v83;
  int8x16_t v84;
  btRigidBody *v85;
  btRigidBody *v86;
  int32x4_t v87;
  int32x4_t v88;
  int8x16_t v89;
  int8x16_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int8x16_t v93;
  int8x16_t v94;
  btRigidBody *v95;
  btRigidBody *v96;
  int32x4_t v97;
  int32x4_t v98;
  int8x16_t v99;
  int8x16_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int8x16_t v103;
  int8x16_t v104;
  float32x4_t v105;
  float HingeAngle;
  float32x4_t v107;
  btRigidBody *v108;
  btRigidBody *v109;
  float32x4_t v110;
  int8x16_t v111;
  int8x16_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  int8x16_t v118;
  float32x4_t v119;
  int8x16_t v120;
  float32x4_t v121;
  float32x4_t v122;
  btVector3 v123;
  btVector3 v124;
  btMatrix3x3 v125;
  btMatrix3x3 v126;
  btMatrix3x3 v127;
  uint64_t v128;

  v128 = *MEMORY[0x1E0C80C00];
  if (BYTE2(this[1].var9))
  {
    this->var10 = 0.0;
    this[1].var10 = 0.0;
    if (!LOBYTE(this[1].var9))
    {
      var8 = this->var8;
      var9 = this->var9;
      v9 = *(float32x4_t *)&this->var17;
      v10 = (int8x16_t)vmulq_f32(*((float32x4_t *)var8 + 1), v9);
      v11 = vmulq_f32(v9, *((float32x4_t *)var8 + 2));
      v12 = (int8x16_t)vmulq_f32(v9, *((float32x4_t *)var8 + 3));
      v12.i32[3] = 0;
      *(float32x2_t *)v11.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v10.i8, *(float32x2_t *)v11.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL)));
      v13 = 0;
      *(float32x2_t *)&v11.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v12.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL)), 0);
      v14 = vaddq_f32(v11, *((float32x4_t *)var8 + 4));
      v15 = *(float32x4_t *)&this->var29;
      v16 = vmulq_f32(*((float32x4_t *)var9 + 1), v15);
      v17 = (int8x16_t)vmulq_f32(v15, *((float32x4_t *)var9 + 2));
      v18 = (int8x16_t)vmulq_f32(v15, *((float32x4_t *)var9 + 3));
      v18.i32[3] = 0;
      *(float32x2_t *)v16.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v16.f32, *(float32x2_t *)v17.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL)));
      *(float32x2_t *)&v16.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v18.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL)), 0);
      v19 = vaddq_f32(v16, *((float32x4_t *)var9 + 4));
      v20 = vsubq_f32(v19, v14);
      v20.i32[3] = 0;
      v21 = (int8x16_t)vmulq_f32(v20, v20);
      v22 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL), vpadd_f32(*(float32x2_t *)v21.i8, *(float32x2_t *)v21.i8)).f32[0];
      if (v22 <= 0.00000011921)
      {
        v127.var0[0] = (btVector3)xmmword_1DD007970;
        v23.i32[0] = 1.0;
      }
      else
      {
        v23 = (int8x16_t)vmulq_n_f32(v20, 1.0 / sqrtf(v22));
        v127.var0[0] = (btVector3)v23;
        v13 = (float32x2_t)vextq_s8(v23, v23, 4uLL).u64[0];
      }
      v24 = 0;
      v25 = fabsf(v13.f32[1]) <= 0.70711;
      v26 = vmul_f32(v13, v13).f32[0] + (float)(*(float *)v23.i32 * *(float *)v23.i32);
      v27 = 1.0 / sqrtf(v26);
      v28 = -(float)(v13.f32[0] * v27);
      v29 = *(float *)v23.i32 * v27;
      v30 = -(float)(v13.f32[1] * (float)(*(float *)v23.i32 * v27));
      v31 = v13.f32[1] * v28;
      v32 = v26 * v27;
      v33 = vmlas_n_f32(v13.f32[1] * v13.f32[1], v13.f32[0], v13.f32[0]);
      v34 = sqrtf(v33);
      v35 = -(float)(v13.f32[1] * (float)(1.0 / v34));
      v36 = (float)(1.0 / v34) * v13.f32[0];
      v37 = v33 * (float)(1.0 / v34);
      v38 = -(float)(*(float *)v23.i32 * v36);
      v39 = v35 * *(float *)v23.i32;
      if (v25)
      {
        v35 = v29;
        v36 = 0.0;
      }
      else
      {
        v28 = 0.0;
      }
      if (v25)
        v40 = v30;
      else
        v40 = v37;
      if (v25)
        v41 = v31;
      else
        v41 = v38;
      *(_QWORD *)v127.var0[1].var0.var0 = __PAIR64__(LODWORD(v35), LODWORD(v28));
      if (v25)
        v39 = v32;
      v127.var0[1].var0.var0[2] = v36;
      *(_QWORD *)v127.var0[2].var0.var0 = __PAIR64__(LODWORD(v41), LODWORD(v40));
      v127.var0[2].var0.var0[2] = v39;
      v42 = (btJacobianEntry *)&this->var13[0].var0.var0.var0[2];
      v121 = v19;
      v122 = v14;
      do
      {
        v43 = this->var8;
        v44 = this->var9;
        v45 = *((int32x4_t *)v43 + 1);
        v46 = *((int32x4_t *)v43 + 2);
        v47 = (int8x16_t)vtrn1q_s32(v45, v46);
        v48 = *((int8x16_t *)v43 + 3);
        v49 = *((float32x4_t *)v43 + 4);
        *(int32x2_t *)v45.i8 = vzip2_s32(*(int32x2_t *)v45.i8, *(int32x2_t *)v46.i8);
        v46.i64[0] = vextq_s8(v47, v47, 8uLL).u64[0];
        v47.i64[1] = v48.u32[0];
        v45.u64[1] = (unint64_t)vzip2_s32(*(int32x2_t *)v48.i8, 0);
        v46.i64[1] = vextq_s8(v48, v48, 8uLL).u32[0];
        v126.var0[0] = (btVector3)v47;
        v126.var0[1] = (btVector3)v45;
        v126.var0[2] = (btVector3)v46;
        v50 = *((int32x4_t *)v44 + 1);
        v51 = *((int32x4_t *)v44 + 2);
        v52 = (int8x16_t)vtrn1q_s32(v50, v51);
        v53 = *((int8x16_t *)v44 + 3);
        v54 = *((float32x4_t *)v44 + 4);
        *(int32x2_t *)v50.i8 = vzip2_s32(*(int32x2_t *)v50.i8, *(int32x2_t *)v51.i8);
        v51.i64[0] = vextq_s8(v52, v52, 8uLL).u64[0];
        v52.i64[1] = v53.u32[0];
        v50.u64[1] = (unint64_t)vzip2_s32(*(int32x2_t *)v53.i8, 0);
        v51.i64[1] = vextq_s8(v53, v53, 8uLL).u32[0];
        v125.var0[0] = (btVector3)v52;
        v125.var0[1] = (btVector3)v50;
        v125.var0[2] = (btVector3)v51;
        v55 = (btVector3)vsubq_f32(v14, v49);
        v55.var0.var0[3] = 0.0;
        v124 = v55;
        v56 = (btVector3)vsubq_f32(v19, v54);
        v56.var0.var0[3] = 0.0;
        v123 = v56;
        btJacobianEntry::btJacobianEntry(v42, &v126, &v125, (int8x16_t *)&v124, (int8x16_t *)&v123, (float32x4_t *)((char *)&v127 + v24), (float32x4_t *)v43 + 28, *((float *)v43 + 96), (float32x4_t *)v44 + 28, *((float *)v44 + 96));
        v19 = v121;
        v14 = v122;
        v24 += 16;
        v42 = (btJacobianEntry *)(v57 + 96);
      }
      while (v24 != 48);
    }
    a2.n128_u32[0] = LODWORD(this->var16.var0.var0[1].var0.var0[2]);
    v58 = this->var16.var0.var0[2].var0.var0[2];
    v59 = this->var16.var1.var0.var0[2];
    if (fabsf(v59) <= 0.70711)
    {
      v63 = (float)(v58 * v58) + (float)(a2.n128_f32[0] * a2.n128_f32[0]);
      v64 = 1.0 / sqrtf(v63);
      a6 = a2;
      a6.n128_f32[1] = -v58;
      v65.f32[0] = -v59;
      a6.n128_u64[0] = (unint64_t)vmul_n_f32((float32x2_t)a6.n128_u64[0], v64);
      v62 = (float32x4_t)vrev64q_s32((int32x4_t)a6).u64[0];
      v65.i32[1] = LODWORD(this->var16.var1.var0.var0[2]);
      a6.n128_u64[0] = (unint64_t)vmul_f32((float32x2_t)a6.n128_u64[0], v65);
      a6.n128_f32[2] = v63 * v64;
    }
    else
    {
      v60 = (float)(v59 * v59) + (float)(v58 * v58);
      v61 = 1.0 / sqrtf(v60);
      v62.i32[0] = 0;
      v62.i32[3] = 0;
      v62.f32[1] = -(float)(v59 * v61);
      v62.f32[2] = v58 * v61;
      a6.n128_f32[0] = v60 * v61;
      a6.n128_f32[1] = -(float)(a2.n128_f32[0] * (float)(v58 * v61));
      a6.n128_f32[2] = a2.n128_f32[0] * v62.f32[1];
    }
    v66 = this->var8;
    v67 = this->var9;
    v68 = *((float32x4_t *)v66 + 1);
    v69 = *((float32x4_t *)v66 + 2);
    v70 = (int8x16_t)vmulq_f32(v62, v68);
    v71 = (int8x16_t)vmulq_f32(v62, v69);
    v72 = *((float32x4_t *)v66 + 3);
    v73 = (int8x16_t)vmulq_f32(v62, v72);
    v73.i32[3] = 0;
    *(float32x2_t *)v70.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v70.i8, *(float32x2_t *)v71.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v70, v70, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v71, v71, 8uLL)));
    v70.u64[1] = (unint64_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v73.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v73, v73, 8uLL)), 0);
    v125.var0[0] = (btVector3)v70;
    v74 = (btVector3)vmulq_f32((float32x4_t)a6, v68);
    v75 = (int8x16_t)vmulq_f32((float32x4_t)a6, v69);
    v76 = (int8x16_t)vmulq_f32((float32x4_t)a6, v72);
    v76.i32[3] = 0;
    *(float32x2_t *)v74.var0.var0 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v74, (int8x16_t)v74, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v75, v75, 8uLL)), vpadd_f32(*(float32x2_t *)v74.var0.var0, *(float32x2_t *)v75.i8));
    *(float32x2_t *)&v74.var0.var0[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v76.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v76, v76, 8uLL)), 0);
    v124 = v74;
    *(_QWORD *)v74.var0.var0 = __PAIR64__(LODWORD(v58), a2.n128_u32[0]);
    *(_QWORD *)&v74.var0.var0[2] = LODWORD(v59);
    v77 = (btVector3)vmulq_f32((float32x4_t)v74, v68);
    v78 = (int8x16_t)vmulq_f32((float32x4_t)v74, v69);
    v79 = (int8x16_t)vmulq_f32((float32x4_t)v74, v72);
    v79.i32[3] = 0;
    *(float32x2_t *)v77.var0.var0 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v77, (int8x16_t)v77, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v78, v78, 8uLL)), vpadd_f32(*(float32x2_t *)v77.var0.var0, *(float32x2_t *)v78.i8));
    *(float32x2_t *)&v77.var0.var0[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v79.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v79, v79, 8uLL)), 0);
    v123 = v77;
    v80 = (int8x16_t)vtrn1q_s32((int32x4_t)v68, (int32x4_t)v69);
    *(int32x2_t *)v74.var0.var0 = vzip2_s32(*(int32x2_t *)v68.f32, *(int32x2_t *)v69.f32);
    v76.i64[0] = vextq_s8(v80, v80, 8uLL).u64[0];
    v80.i64[1] = v72.u32[0];
    *(int32x2_t *)&v74.var0.var0[2] = vzip2_s32(*(int32x2_t *)v72.f32, 0);
    v76.i64[1] = vextq_s8((int8x16_t)v72, (int8x16_t)v72, 8uLL).u32[0];
    v127.var0[0] = (btVector3)v80;
    v127.var0[1] = v74;
    v127.var0[2] = (btVector3)v76;
    v81 = *((int32x4_t *)v67 + 1);
    v82 = *((int32x4_t *)v67 + 2);
    v83 = (int8x16_t)vtrn1q_s32(v81, v82);
    v84 = *((int8x16_t *)v67 + 3);
    *(int32x2_t *)v81.i8 = vzip2_s32(*(int32x2_t *)v81.i8, *(int32x2_t *)v82.i8);
    v82.i64[0] = vextq_s8(v83, v83, 8uLL).u64[0];
    v83.i64[1] = v84.u32[0];
    v81.u64[1] = (unint64_t)vzip2_s32(*(int32x2_t *)v84.i8, 0);
    v82.i64[1] = vextq_s8(v84, v84, 8uLL).u32[0];
    v126.var0[0] = (btVector3)v83;
    v126.var0[1] = (btVector3)v81;
    v126.var0[2] = (btVector3)v82;
    btJacobianEntry::btJacobianEntry((btJacobianEntry *)&this->var14[0].var2.var0.var0[3], (float32x4_t *)&v125, &v127, &v126, (float32x4_t *)v66 + 28, (float32x4_t *)v67 + 28);
    v85 = this->var8;
    v86 = this->var9;
    v87 = *((int32x4_t *)v85 + 1);
    v88 = *((int32x4_t *)v85 + 2);
    v89 = (int8x16_t)vtrn1q_s32(v87, v88);
    v90 = *((int8x16_t *)v85 + 3);
    *(int32x2_t *)v87.i8 = vzip2_s32(*(int32x2_t *)v87.i8, *(int32x2_t *)v88.i8);
    v88.i64[0] = vextq_s8(v89, v89, 8uLL).u64[0];
    v89.i64[1] = v90.u32[0];
    v87.u64[1] = (unint64_t)vzip2_s32(*(int32x2_t *)v90.i8, 0);
    v88.i64[1] = vextq_s8(v90, v90, 8uLL).u32[0];
    v127.var0[0] = (btVector3)v89;
    v127.var0[1] = (btVector3)v87;
    v127.var0[2] = (btVector3)v88;
    v91 = *((int32x4_t *)v86 + 1);
    v92 = *((int32x4_t *)v86 + 2);
    v93 = (int8x16_t)vtrn1q_s32(v91, v92);
    v94 = *((int8x16_t *)v86 + 3);
    *(int32x2_t *)v91.i8 = vzip2_s32(*(int32x2_t *)v91.i8, *(int32x2_t *)v92.i8);
    v92.i64[0] = vextq_s8(v93, v93, 8uLL).u64[0];
    v93.i64[1] = v94.u32[0];
    v91.u64[1] = (unint64_t)vzip2_s32(*(int32x2_t *)v94.i8, 0);
    v92.i64[1] = vextq_s8(v94, v94, 8uLL).u32[0];
    v126.var0[0] = (btVector3)v93;
    v126.var0[1] = (btVector3)v91;
    v126.var0[2] = (btVector3)v92;
    btJacobianEntry::btJacobianEntry((btJacobianEntry *)&this->var14[1].var3.var0.var0[2], (float32x4_t *)&v124, &v127, &v126, (float32x4_t *)v85 + 28, (float32x4_t *)v86 + 28);
    v95 = this->var8;
    v96 = this->var9;
    v97 = *((int32x4_t *)v95 + 1);
    v98 = *((int32x4_t *)v95 + 2);
    v99 = (int8x16_t)vtrn1q_s32(v97, v98);
    v100 = *((int8x16_t *)v95 + 3);
    *(int32x2_t *)v97.i8 = vzip2_s32(*(int32x2_t *)v97.i8, *(int32x2_t *)v98.i8);
    v98.i64[0] = vextq_s8(v99, v99, 8uLL).u64[0];
    v99.i64[1] = v100.u32[0];
    v97.u64[1] = (unint64_t)vzip2_s32(*(int32x2_t *)v100.i8, 0);
    v98.i64[1] = vextq_s8(v100, v100, 8uLL).u32[0];
    v127.var0[0] = (btVector3)v99;
    v127.var0[1] = (btVector3)v97;
    v127.var0[2] = (btVector3)v98;
    v101 = *((int32x4_t *)v96 + 1);
    v102 = *((int32x4_t *)v96 + 2);
    v103 = (int8x16_t)vtrn1q_s32(v101, v102);
    v104 = *((int8x16_t *)v96 + 3);
    *(int32x2_t *)v101.i8 = vzip2_s32(*(int32x2_t *)v101.i8, *(int32x2_t *)v102.i8);
    v102.i64[0] = vextq_s8(v103, v103, 8uLL).u64[0];
    v103.i64[1] = v104.u32[0];
    v101.u64[1] = (unint64_t)vzip2_s32(*(int32x2_t *)v104.i8, 0);
    v102.i64[1] = vextq_s8(v104, v104, 8uLL).u32[0];
    v126.var0[0] = (btVector3)v103;
    v126.var0[1] = (btVector3)v101;
    v126.var0[2] = (btVector3)v102;
    btJacobianEntry::btJacobianEntry((btJacobianEntry *)&this->var14[2].var4.var0.var0[1], (float32x4_t *)&v123, &v127, &v126, (float32x4_t *)v95 + 28, (float32x4_t *)v96 + 28);
    *(&this[1].var7 + 1) = 0;
    HingeAngle = btHingeConstraint::getHingeAngle(this, (const btTransform *)((char *)this->var8 + 16), (const btTransform *)((char *)this->var9 + 16), v105);
    *(float *)&this[1].var8 = HingeAngle;
    btAngularLimit::test((btAngularLimit *)&this[1], HingeAngle);
    v107.i32[0] = LODWORD(this->var16.var0.var0[1].var0.var0[2]);
    v107.i32[1] = LODWORD(this->var16.var0.var0[2].var0.var0[2]);
    v107.i32[2] = LODWORD(this->var16.var1.var0.var0[2]);
    v108 = this->var8;
    v109 = this->var9;
    v110 = vmulq_f32(*((float32x4_t *)v108 + 1), v107);
    v111 = (int8x16_t)vmulq_f32(v107, *((float32x4_t *)v108 + 2));
    v112 = (int8x16_t)vmulq_f32(v107, *((float32x4_t *)v108 + 3));
    v112.i32[3] = 0;
    *(float32x2_t *)v110.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v110.f32, *(float32x2_t *)v111.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v110, (int8x16_t)v110, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v111, v111, 8uLL)));
    v113 = *((float32x4_t *)v108 + 19);
    v114 = *((float32x4_t *)v108 + 20);
    v113.i32[3] = 0;
    v114.i32[3] = 0;
    v115 = *((float32x4_t *)v109 + 19);
    v116 = *((float32x4_t *)v109 + 20);
    v115.i32[3] = 0;
    v116.i32[3] = 0;
    *(float32x2_t *)&v110.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v112.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v112, v112, 8uLL)), 0);
    v117 = *((float32x4_t *)v108 + 21);
    v117.i32[3] = 0;
    v118 = (int8x16_t)vmulq_f32(v110, vaddq_f32(vaddq_f32(vmulq_n_f32(v113, v110.f32[0]), vmulq_lane_f32(v114, *(float32x2_t *)v110.f32, 1)), vmulq_n_f32(v117, v110.f32[2])));
    v119 = *((float32x4_t *)v109 + 21);
    v119.i32[3] = 0;
    v120 = (int8x16_t)vmulq_f32(v110, vaddq_f32(vaddq_f32(vmulq_n_f32(v115, v110.f32[0]), vmulq_lane_f32(v116, *(float32x2_t *)v110.f32, 1)), vmulq_n_f32(v119, v110.f32[2])));
    *(float *)&this[1].var7 = 1.0
                            / vadd_f32(vadd_f32(vpadd_f32(*(float32x2_t *)v118.i8, *(float32x2_t *)v118.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v118, v118, 8uLL)), vadd_f32(vpadd_f32(*(float32x2_t *)v120.i8, *(float32x2_t *)v120.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v120, v120, 8uLL))).f32[0];
  }
}

void btHingeConstraint::getInfo1(uint64_t a1, _DWORD *a2, float32x4_t a3)
{
  int v4;
  float HingeAngle;
  int v7;

  if (*(_BYTE *)(a1 + 842))
  {
    v4 = 0;
    *a2 = 0;
LABEL_6:
    a2[1] = v4;
    return;
  }
  a3.i64[0] = 0x100000005;
  *(_QWORD *)a2 = 0x100000005;
  HingeAngle = btHingeConstraint::getHingeAngle((btHingeConstraint *)a1, (const btTransform *)(*(_QWORD *)(a1 + 40) + 16), (const btTransform *)(*(_QWORD *)(a1 + 48) + 16), a3);
  *(float *)(a1 + 832) = HingeAngle;
  btAngularLimit::test((btAngularLimit *)(a1 + 792), HingeAngle);
  if (*(_BYTE *)(a1 + 820) || *(_BYTE *)(a1 + 841))
  {
    v7 = a2[1];
    ++*a2;
    v4 = v7 - 1;
    goto LABEL_6;
  }
}

void btHingeConstraint::getInfo2(uint64_t a1, uint64_t a2)
{
  float32x4_t *v2;
  float32x4_t *v3;
  float32x4_t *v4;
  float32x4_t *v5;
  float32x4_t *v6;
  float32x4_t *v7;

  v2 = *(float32x4_t **)(a1 + 40);
  v3 = *(float32x4_t **)(a1 + 48);
  v4 = v2 + 1;
  v5 = v3 + 1;
  v6 = v2 + 23;
  v7 = v3 + 23;
  if (*(_BYTE *)(a1 + 843))
    btHingeConstraint::getInfo2InternalUsingFrameOffset(a1, a2, v4, v5, v6, v7);
  else
    btHingeConstraint::getInfo2Internal(a1, a2, v4, v5, v6, v7);
}

void btHingeConstraint::getInfo2InternalUsingFrameOffset(uint64_t a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5, float32x4_t *a6)
{
  float32x4_t v8;
  float32x4_t v9;
  uint64_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  int8x16_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  float32x4_t v35;
  float32x4_t v36;
  int8x16_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float v40;
  float v41;
  float v42;
  BOOL v43;
  float v44;
  float32x4_t v45;
  float32x4_t v46;
  int8x8_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  int8x16_t v52;
  float32x4_t v53;
  float32x4_t v54;
  int8x16_t v55;
  float32x4_t v56;
  _BOOL4 v57;
  float32x4_t v58;
  float32x4_t v59;
  int8x16_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  int8x16_t v70;
  float v71;
  uint64_t v72;
  int v73;
  float32x4_t v74;
  float32x4_t v75;
  int8x16_t v76;
  float32x4_t v77;
  float32x4_t v78;
  int8x16_t v79;
  float32x4_t v80;
  int8x16_t v81;
  float32x4_t v82;
  uint64_t v83;
  uint64_t v84;
  float32x4_t v85;
  int8x16_t v86;
  float32x4_t v87;
  int8x16_t v88;
  float32x4_t v89;
  uint64_t v90;
  uint64_t v91;
  int8x16_t v92;
  float32x4_t v93;
  int8x16_t v94;
  float32x4_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  float v100;
  float *v101;
  uint64_t v102;
  float v103;
  uint64_t v104;
  uint64_t v105;
  float v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t i;
  uint64_t v110;
  uint64_t v111;
  int8x16_t v112;
  int8x16_t v113;
  int8x16_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  float32x4_t v119;
  float32x4_t v120;
  int8x16_t v121;
  int8x16_t v122;
  int8x16_t v123;
  int v124;
  float32x4_t *v125;
  float v126;
  int v127;
  BOOL v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  float v133;
  float v134;
  float v135;
  float v136;
  BOOL v137;
  uint64_t v138;
  char v139;
  int v140;
  float *v141;
  float v142;
  float MotorFactor;
  uint64_t v144;
  int v145;
  float v146;
  int8x16_t v147;
  int8x16_t v148;
  float v149;
  float v150;
  float v151;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;

  v8 = *(float32x4_t *)(a1 + 656);
  v9 = *(float32x4_t *)(a1 + 672);
  v8.i32[3] = 0;
  v9.i32[3] = 0;
  v10 = *(int *)(a2 + 40);
  v11 = *(float32x4_t *)(a1 + 688);
  v12 = *(float32x4_t *)(a1 + 704);
  v11.i32[3] = 0;
  v13 = a3[1];
  v14 = a3[2];
  v15 = a3[3];
  v16 = vmlaq_lane_f32(vmulq_n_f32(v8, v14.f32[0]), v9, *(float32x2_t *)v14.f32, 1);
  v17 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v8, v13.f32[0]), v9, *(float32x2_t *)v13.f32, 1), v11, v13, 2);
  v18 = (int8x16_t)vmulq_f32(*a3, v12);
  v19 = (int8x16_t)vmulq_f32(v13, v12);
  v20 = (int8x16_t)vmulq_f32(v14, v12);
  v20.i32[3] = 0;
  v21 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v8, COERCE_FLOAT(*a3)), v9, *(float32x2_t *)a3->f32, 1), v11, *a3, 2);
  *(float32x2_t *)v9.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v18.i8, *(float32x2_t *)v19.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL)));
  *(float32x2_t *)&v9.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v20.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL)), 0);
  v22 = a4[1];
  v23 = *(float32x4_t *)(a1 + 720);
  v24 = *(float32x4_t *)(a1 + 736);
  v23.i32[3] = 0;
  v24.i32[3] = 0;
  v25 = *(float32x4_t *)(a1 + 752);
  v26 = *(float32x4_t *)(a1 + 768);
  v25.i32[3] = 0;
  v27 = (int8x16_t)vmlaq_laneq_f32(v16, v11, v14, 2);
  v28 = a4[2];
  v29 = a4[3];
  v30 = vmlaq_lane_f32(vmulq_n_f32(v23, v28.f32[0]), v24, *(float32x2_t *)v28.f32, 1);
  v31 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v23, v22.f32[0]), v24, *(float32x2_t *)v22.f32, 1), v25, v22, 2);
  v32 = (int8x16_t)vmulq_f32(*a4, v26);
  v33 = (int8x16_t)vmulq_f32(v22, v26);
  v34 = (int8x16_t)vmulq_f32(v28, v26);
  v34.i32[3] = 0;
  v35 = vaddq_f32(v15, v9);
  v36 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v23, COERCE_FLOAT(*a4)), v24, *(float32x2_t *)a4->f32, 1), v25, *a4, 2);
  *(float32x2_t *)v9.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v32.i8, *(float32x2_t *)v33.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v33, v33, 8uLL)));
  *(float32x2_t *)&v9.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v34.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL)), 0);
  v37 = (int8x16_t)vmlaq_laneq_f32(v30, v25, v28, 2);
  v38 = vaddq_f32(v29, v9);
  v39 = vsubq_f32(v38, v35);
  v40 = *(float *)(*(_QWORD *)(a1 + 40) + 384);
  v41 = *(float *)(*(_QWORD *)(a1 + 48) + 384);
  if ((float)(v40 + v41) <= 0.0)
    v42 = 0.5;
  else
    v42 = v41 / (float)(v40 + v41);
  v43 = v41 < 0.00000011921;
  v44 = 1.0 - v42;
  v45.i32[3] = 0;
  v46 = (float32x4_t)__PAIR64__(v17.u32[2], v21.u32[2]);
  v46.i32[2] = v27.i32[2];
  v47 = (int8x8_t)__PAIR64__(v31.u32[2], v36.u32[2]);
  v48 = (float32x4_t)__PAIR64__(v31.u32[2], v36.u32[2]);
  v48.i32[2] = v37.i32[2];
  v49 = vmulq_n_f32(v46, v42);
  v49.i32[3] = 0;
  v50 = vmulq_n_f32(v48, 1.0 - v42);
  v50.i32[3] = 0;
  v51 = vaddq_f32(v49, v50);
  v52 = (int8x16_t)vmulq_f32(v51, v51);
  v53 = vmulq_n_f32(v51, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v52.i8, *(float32x2_t *)v52.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v52, v52, 8uLL)).f32[0]));
  v157 = v53;
  v54 = vsubq_f32(v38, v29);
  v54.i32[3] = 0;
  v55 = (int8x16_t)vmulq_f32(v53, v54);
  v56 = vmulq_n_f32(v53, vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v55, v55, 8uLL), vpadd_f32(*(float32x2_t *)v55.i8, *(float32x2_t *)v55.i8)).f32[0]);
  v56.i32[3] = 0;
  v57 = v43 || v40 < 0.00000011921;
  v58 = vsubq_f32(v54, v56);
  v59 = vsubq_f32(v35, v15);
  v59.i32[3] = 0;
  v60 = (int8x16_t)vmulq_f32(v53, v59);
  v61 = vmulq_n_f32(v53, vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v60, v60, 8uLL), vpadd_f32(*(float32x2_t *)v60.i8, *(float32x2_t *)v60.i8)).f32[0]);
  v61.i32[3] = 0;
  v62 = vsubq_f32(v59, v61);
  v63 = vmulq_n_f32(v62, v44);
  v62.i32[3] = 0;
  v64 = vsubq_f32(v61, v56);
  v65 = vmulq_n_f32(v64, v42);
  v65.i32[3] = 0;
  v66 = vsubq_f32(v58, vmulq_n_f32(v64, v44));
  v66.i32[3] = 0;
  v67 = vaddq_f32(v62, v65);
  v68 = vmulq_n_f32(v58, v42);
  v68.i32[3] = 0;
  v63.i32[3] = 0;
  v69 = vaddq_f32(v68, v63);
  v70 = (int8x16_t)vmulq_f32(v69, v69);
  v71 = vadd_f32(vpadd_f32(*(float32x2_t *)v70.i8, *(float32x2_t *)v70.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v70, v70, 8uLL)).f32[0];
  if (v71 <= 0.00000011921)
  {
    v45.i64[0] = __PAIR64__(v17.u32[1], v21.u32[1]);
    v45.i32[2] = v27.i32[1];
  }
  else
  {
    v45 = vmulq_n_f32(v69, 1.0 / sqrtf(v71));
  }
  v72 = 0;
  v39.i32[3] = 0;
  v73 = 2 * v10;
  v74.i64[0] = vextq_s8((int8x16_t)v53, (int8x16_t)v53, 4uLL).u64[0];
  v74.i64[1] = v53.i64[0];
  v75.i64[0] = vextq_s8((int8x16_t)v45, (int8x16_t)v45, 4uLL).u64[0];
  v75.i64[1] = v45.i64[0];
  v76 = (int8x16_t)vsubq_f32(vmulq_f32(v53, v75), vmulq_f32(v74, v45));
  v77.i64[0] = vextq_s8(v76, v76, 4uLL).u64[0];
  v77.i64[1] = v76.u32[0];
  v154 = v77;
  v155 = v45;
  v78.i64[0] = vextq_s8((int8x16_t)v67, (int8x16_t)v67, 4uLL).u64[0];
  v78.i64[1] = v67.i64[0];
  v79 = (int8x16_t)vsubq_f32(vmulq_f32(v67, v75), vmulq_f32(v78, v45));
  v80.i64[0] = vextq_s8((int8x16_t)v66, (int8x16_t)v66, 4uLL).u64[0];
  v80.i64[1] = v66.i64[0];
  v81 = (int8x16_t)vsubq_f32(vmulq_f32(v75, v66), vmulq_f32(v80, v45));
  v82.i64[0] = vextq_s8(v81, v81, 4uLL).u64[0];
  v82.i64[1] = v81.u32[0];
  v156 = v82;
  v83 = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(v83 + 8) = v79.i32[0];
  *(_QWORD *)v83 = vextq_s8(v79, v79, 4uLL).u64[0];
  v84 = *(_QWORD *)(a2 + 32);
  do
  {
    *(float *)(v84 + v72 * 4) = -v156.f32[v72];
    ++v72;
  }
  while (v72 != 3);
  v85.i64[0] = vextq_s8((int8x16_t)v77, (int8x16_t)v77, 4uLL).u64[0];
  v85.i64[1] = v77.i64[0];
  v86 = (int8x16_t)vsubq_f32(vmulq_f32(v67, v85), vmulq_f32(v78, v77));
  v87.i64[0] = vextq_s8(v86, v86, 4uLL).u64[0];
  v87.i64[1] = v86.u32[0];
  v88 = (int8x16_t)vsubq_f32(vmulq_f32(v85, v66), vmulq_f32(v80, v77));
  v89.i64[0] = vextq_s8(v88, v88, 4uLL).u64[0];
  v89.i64[1] = v88.u32[0];
  v156 = v89;
  if (v57 && *(_BYTE *)(a1 + 820))
  {
    v156 = vmulq_n_f32(v89, v44);
    v87 = vmulq_n_f32(v87, v42);
  }
  v90 = 0;
  v91 = v83 + 4 * v10;
  *(_QWORD *)v91 = v87.i64[0];
  *(_DWORD *)(v91 + 8) = v87.i32[2];
  do
  {
    *(float *)(v84 + 4 * v10 + v90 * 4) = -v156.f32[v90];
    ++v90;
  }
  while (v90 != 3);
  v92 = (int8x16_t)vsubq_f32(vmulq_f32(v74, v67), vmulq_f32(v53, v78));
  v93.i64[0] = vextq_s8(v92, v92, 4uLL).u64[0];
  v93.i64[1] = v92.u32[0];
  v94 = (int8x16_t)vsubq_f32(vmulq_f32(v74, v66), vmulq_f32(v53, v80));
  v95.i64[0] = vextq_s8(v94, v94, 4uLL).u64[0];
  v95.i64[1] = v94.u32[0];
  v156 = v95;
  if (v57)
  {
    v156 = vmulq_n_f32(v95, v44);
    v93 = vmulq_n_f32(v93, v42);
  }
  v96 = 0;
  v97 = v73;
  v98 = 4 * v73;
  v99 = v83 + v98;
  *(_QWORD *)v99 = v93.i64[0];
  *(_DWORD *)(v99 + 8) = v93.i32[2];
  do
  {
    *(float *)(v84 + v98 + v96 * 4) = -v156.f32[v96];
    ++v96;
  }
  while (v96 != 3);
  v100 = *(float *)(a2 + 4);
  if (*(_BYTE *)(a1 + 840))
  {
    v101 = *(float **)(a2 + 48);
  }
  else
  {
    v102 = 0;
    v103 = *(float *)a2;
    v104 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)v104 = v155.i64[0];
    *(_DWORD *)(v104 + 8) = v155.i32[2];
    v105 = v104 + 4 * v10;
    *(_QWORD *)v105 = v154.i64[0];
    *(_DWORD *)(v105 + 8) = v154.i32[2];
    v106 = v103 * v100;
    v107 = v104 + v98;
    *(_QWORD *)v107 = v157.i64[0];
    *(_DWORD *)(v107 + 8) = v157.i32[2];
    v108 = *(_QWORD *)(a2 + 24);
    do
    {
      *(float *)(v108 + v102 * 4) = -v155.f32[v102];
      ++v102;
    }
    while (v102 != 3);
    for (i = 0; i != 3; ++i)
      *(float *)(v108 + 4 * v10 + i * 4) = -v154.f32[i];
    v110 = 0;
    v111 = v108 + 4 * v97;
    do
    {
      *(float *)(v111 + v110 * 4) = -v157.f32[v110];
      ++v110;
    }
    while (v110 != 3);
    v112 = (int8x16_t)vmulq_f32(v45, v39);
    v101 = *(float **)(a2 + 48);
    *v101 = v106
          * vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v112, v112, 8uLL), vpadd_f32(*(float32x2_t *)v112.i8, *(float32x2_t *)v112.i8)).f32[0];
    v113 = (int8x16_t)vmulq_f32(v39, v77);
    v101[v10] = v106
              * vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v113, v113, 8uLL), vpadd_f32(*(float32x2_t *)v113.i8, *(float32x2_t *)v113.i8)).f32[0];
    v114 = (int8x16_t)vmulq_f32(v53, v39);
    v101[v97] = v106
              * vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v114, v114, 8uLL), vpadd_f32(*(float32x2_t *)v114.i8, *(float32x2_t *)v114.i8)).f32[0];
  }
  *(_DWORD *)(v83 + 12 * (_DWORD)v10) = v45.i32[0];
  v115 = 12 * v10 + 4;
  *(_DWORD *)(v83 + v115) = v45.i32[1];
  v116 = 12 * (_DWORD)v10 + 8;
  *(_DWORD *)(v83 + v116) = v45.i32[2];
  v117 = 16 * v10;
  *(_QWORD *)(v83 + v117) = v77.i64[0];
  v118 = (4 * v10) | 2;
  *(_DWORD *)(v83 + 4 * v118) = v77.i32[2];
  *(float *)(v84 + 12 * (_DWORD)v10) = -v45.f32[0];
  *(float *)(v84 + v115) = -v45.f32[1];
  *(float *)(v84 + v116) = -v45.f32[2];
  *(float32x2_t *)(v84 + v117) = vneg_f32(*(float32x2_t *)v77.f32);
  *(float *)(v84 + 4 * v118) = -v77.f32[2];
  *(int8x8_t *)v119.f32 = vext_s8((int8x8_t)__PAIR64__(v17.u32[2], v21.u32[2]), (int8x8_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL), 4uLL);
  v119.i64[1] = __PAIR64__(v17.u32[2], v21.u32[2]);
  *(int8x8_t *)v120.f32 = vext_s8(v47, (int8x8_t)*(_OWORD *)&vextq_s8(v37, v37, 8uLL), 4uLL);
  *(int8x8_t *)&v120.u32[2] = v47;
  v121 = (int8x16_t)vsubq_f32(vmulq_f32(v46, v120), vmulq_f32(v119, v48));
  v120.i64[0] = vextq_s8(v121, v121, 4uLL).u64[0];
  v120.i64[1] = v121.u32[0];
  *(float *)v121.i32 = *(float *)a2 * *(float *)(a2 + 4);
  v122 = (int8x16_t)vmulq_f32(v45, v120);
  v101[3 * (_DWORD)v10] = *(float *)v121.i32
                        * vadd_f32(vpadd_f32(*(float32x2_t *)v122.i8, *(float32x2_t *)v122.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v122, v122, 8uLL)).f32[0];
  v123 = (int8x16_t)vmulq_f32(v77, v120);
  v101[(unint64_t)v117 / 4] = *(float *)v121.i32
                                   * vadd_f32(vpadd_f32(*(float32x2_t *)v123.i8, *(float32x2_t *)v123.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v123, v123, 8uLL)).f32[0];
  v124 = *(unsigned __int8 *)(a1 + 820);
  if (*(_BYTE *)(a1 + 820))
  {
    v125 = a5;
    v126 = *(float *)(a1 + 812) * *(float *)(a1 + 836);
    if (v126 > 0.0)
      v127 = 1;
    else
      v127 = 2;
    v128 = *(_BYTE *)(a1 + 841) == 0;
  }
  else
  {
    if (!*(_BYTE *)(a1 + 841))
      return;
    v125 = a5;
    v128 = 0;
    v127 = 0;
    v126 = 0.0;
  }
  v129 = 5 * v10;
  v130 = 5 * (int)v10;
  *(_DWORD *)(v83 + 4 * v130) = v53.i32[0];
  v131 = 20 * v10 + 4;
  *(_DWORD *)(v83 + v131) = v53.i32[1];
  v132 = 4 * v130 + 8;
  *(_DWORD *)(v83 + v132) = v53.i32[2];
  v153 = v53;
  *(float *)(v84 + 4 * v129) = -v53.f32[0];
  *(float *)(v84 + v131) = -v53.f32[1];
  *(float *)(v84 + v132) = -v53.f32[2];
  btAngularLimit::getLow((btAngularLimit *)(a1 + 792));
  v134 = v133;
  btAngularLimit::getHigh((btAngularLimit *)(a1 + 792));
  v136 = v135;
  v137 = v134 != v135 || v124 == 0;
  v138 = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(v138 + 4 * v129) = 0;
  v139 = !v137;
  v140 = *(_DWORD *)(a1 + 852);
  v141 = (float *)(a1 + 864);
  if ((v140 & 2) == 0)
    v141 = (float *)(a2 + 4);
  v142 = *v141;
  if (!v128 && (v139 & 1) == 0)
  {
    if ((v140 & 4) != 0)
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + 4 * v130) = *(_DWORD *)(a1 + 856);
    MotorFactor = btTypedConstraint::getMotorFactor((btTypedConstraint *)a1, *(float *)(a1 + 832), v134, v135, *(float *)(a1 + 784), v142 * *(float *)a2);
    v138 = *(_QWORD *)(a2 + 48);
    *(float *)(v138 + 4 * v130) = *(float *)(v138 + 4 * v130)
                                + (float)((float)(MotorFactor * *(float *)(a1 + 784)) * *(float *)(a1 + 836));
    *(float *)(*(_QWORD *)(a2 + 64) + 4 * v130) = -*(float *)(a1 + 788);
    *(_DWORD *)(*(_QWORD *)(a2 + 72) + 4 * v130) = *(_DWORD *)(a1 + 788);
  }
  if (v124)
  {
    *(float *)(v138 + 4 * v130) = *(float *)(v138 + 4 * v130) + (float)((float)(v142 * *(float *)a2) * v126);
    if ((*(_BYTE *)(a1 + 852) & 1) != 0)
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + 4 * v130) = *(_DWORD *)(a1 + 860);
    if (v134 == v136)
    {
      *(_DWORD *)(*(_QWORD *)(a2 + 64) + 4 * v130) = -8388609;
    }
    else
    {
      v144 = *(_QWORD *)(a2 + 64);
      if (v127 != 1)
      {
        *(_DWORD *)(v144 + 4 * v130) = -8388609;
        v145 = 0;
LABEL_58:
        *(_DWORD *)(*(_QWORD *)(a2 + 72) + 4 * v130) = v145;
        v146 = *(float *)(a1 + 808);
        if (v146 <= 0.0)
        {
          v150 = *(float *)(v138 + 4 * v130);
        }
        else
        {
          v147 = (int8x16_t)vmulq_f32(*v125, v153);
          v148 = (int8x16_t)vmulq_f32(v153, *a6);
          LODWORD(v149) = vsub_f32(vadd_f32(vpadd_f32(*(float32x2_t *)v147.i8, *(float32x2_t *)v147.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v147, v147, 8uLL)), vadd_f32(vpadd_f32(*(float32x2_t *)v148.i8, *(float32x2_t *)v148.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v148, v148, 8uLL))).u32[0];
          v150 = *(float *)(v138 + 4 * v130);
          if (v127 == 1)
          {
            if (v149 >= 0.0)
              goto LABEL_67;
            v151 = -(float)(v146 * v149);
            if (v151 <= v150)
              goto LABEL_67;
          }
          else
          {
            if (v149 <= 0.0)
              goto LABEL_67;
            v151 = -(float)(v146 * v149);
            if (v151 >= v150)
              goto LABEL_67;
          }
          *(float *)(v138 + 4 * v130) = v151;
          v150 = v151;
        }
LABEL_67:
        *(float *)(v138 + 4 * v130) = *(float *)(a1 + 804) * v150;
        return;
      }
      *(_DWORD *)(v144 + 4 * v130) = 0;
    }
    v145 = 2139095039;
    goto LABEL_58;
  }
}

void btHingeConstraint::getInfo2Internal(uint64_t a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5, float32x4_t *a6)
{
  uint64_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  int8x16_t v22;
  int8x16_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int32x2_t v37;
  float32x2_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  int v42;
  _DWORD *v43;
  int v44;
  int v45;
  _DWORD *v46;
  float32x4_t v47;
  float32x4_t v48;
  int8x16_t v49;
  float32x4_t v50;
  float32x4_t v51;
  int8x16_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  float32x4_t v56;
  float32x4_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  float v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  float *v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  float32x4_t v78;
  int8x16_t v79;
  float32x4_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int v83;
  float v84;
  int v85;
  BOOL v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  float v90;
  float v91;
  float v92;
  float v93;
  BOOL v94;
  uint64_t v95;
  char v96;
  int v97;
  float *v98;
  float v99;
  float MotorFactor;
  uint64_t v101;
  int v102;
  float v103;
  int8x16_t v104;
  int8x16_t v105;
  float v106;
  float v107;
  float v108;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;

  v10 = *(int *)(a2 + 40);
  v11 = *a3;
  v12 = a3[1];
  v13 = *(float32x4_t *)(a1 + 656);
  v14 = *(float32x4_t *)(a1 + 672);
  v13.i32[3] = 0;
  v14.i32[3] = 0;
  v16 = *(float32x4_t *)(a1 + 688);
  v15 = *(float32x4_t *)(a1 + 704);
  v16.i32[3] = 0;
  v17 = a3[2];
  v18 = a3[3];
  v19 = vmlaq_lane_f32(vmulq_n_f32(v13, v12.f32[0]), v14, *(float32x2_t *)v12.f32, 1);
  v20 = vmlaq_lane_f32(vmulq_n_f32(v13, v17.f32[0]), v14, *(float32x2_t *)v17.f32, 1);
  v21 = vmulq_f32(*a3, v15);
  v22 = (int8x16_t)vmulq_f32(v12, v15);
  v23 = (int8x16_t)vmulq_f32(v17, v15);
  v23.i32[3] = 0;
  v24 = vmlaq_lane_f32(vmulq_n_f32(v13, COERCE_FLOAT(*a3)), v14, *(float32x2_t *)a3->f32, 1);
  *(float32x2_t *)v21.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v21.f32, *(float32x2_t *)v22.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL)));
  *(float32x2_t *)&v21.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v23.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL)), 0);
  v25 = *a4;
  v26 = a4[1];
  v27 = *(float32x4_t *)(a1 + 720);
  v28 = *(float32x4_t *)(a1 + 736);
  v27.i32[3] = 0;
  v28.i32[3] = 0;
  v30 = *(float32x4_t *)(a1 + 752);
  v29 = *(float32x4_t *)(a1 + 768);
  v30.i32[3] = 0;
  v31 = a4[2];
  v32 = vmlaq_lane_f32(vmulq_n_f32(v27, v26.f32[0]), v28, *(float32x2_t *)v26.f32, 1);
  v33 = vmlaq_lane_f32(vmulq_n_f32(v27, v31.f32[0]), v28, *(float32x2_t *)v31.f32, 1);
  v34 = (int8x16_t)vmulq_f32(*a4, v29);
  v35 = (int8x16_t)vmulq_f32(v31, v29);
  v35.i32[3] = 0;
  v36 = (int8x16_t)vmulq_f32(v26, v29);
  v37 = (int32x2_t)vextq_s8(v36, v36, 8uLL).u64[0];
  v38 = vpadd_f32(*(float32x2_t *)v34.i8, *(float32x2_t *)v36.i8);
  v39 = vaddq_f32(v18, v21);
  v40 = vmlaq_lane_f32(vmulq_n_f32(v27, COERCE_FLOAT(*a4)), v28, *(float32x2_t *)a4->f32, 1);
  *(float32x2_t *)v27.f32 = vadd_f32(v38, (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL), v37));
  *(float32x2_t *)&v27.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v35.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL)), 0);
  v41 = vaddq_f32(a4[3], v27);
  v112 = v41;
  v113 = v39;
  if (*(_BYTE *)(a1 + 840))
  {
    v42 = 2 * v10;
  }
  else
  {
    v43 = *(_DWORD **)(a2 + 8);
    *v43 = 1065353216;
    v44 = v10 + 1;
    v43[v44] = 1065353216;
    v42 = 2 * v10;
    v45 = 2 * v10 + 2;
    v43[v45] = 1065353216;
    v46 = *(_DWORD **)(a2 + 24);
    *v46 = -1082130432;
    v46[v44] = -1082130432;
    v46[v45] = -1082130432;
    v18 = a3[3];
  }
  v47 = vmlaq_laneq_f32(v19, v16, v12, 2);
  v48 = vmlaq_laneq_f32(v24, v16, v11, 2);
  v49 = (int8x16_t)vmlaq_laneq_f32(v20, v16, v17, 2);
  v50 = vmlaq_laneq_f32(v32, v30, v26, 2);
  v51 = vmlaq_laneq_f32(v40, v30, v25, 2);
  v52 = (int8x16_t)vmlaq_laneq_f32(v33, v30, v31, 2);
  v53 = *(_QWORD *)(a2 + 16);
  v54 = v53 + 4 * v10;
  v55 = v53 + 4 * v42;
  v56 = vnegq_f32(vsubq_f32(v39, v18));
  *(_DWORD *)v53 = 0;
  *(float *)(v53 + 4) = -v56.f32[2];
  *(_DWORD *)(v53 + 8) = v56.i32[1];
  *(_DWORD *)(v53 + 12) = 0;
  *(_DWORD *)v54 = v56.i32[2];
  *(_DWORD *)(v54 + 4) = 0;
  *(float *)(v54 + 8) = -v56.f32[0];
  *(_DWORD *)(v54 + 12) = 0;
  *(float *)v55 = -v56.f32[1];
  *(_DWORD *)(v55 + 4) = v56.i32[0];
  *(_QWORD *)(v55 + 8) = 0;
  v57 = vsubq_f32(v41, a4[3]);
  v58 = *(_QWORD *)(a2 + 32);
  v59 = v58 + 4 * v10;
  v60 = v58 + 4 * v42;
  *(_DWORD *)v58 = 0;
  *(float *)(v58 + 4) = -v57.f32[2];
  *(_DWORD *)(v58 + 8) = v57.i32[1];
  *(_DWORD *)(v58 + 12) = 0;
  *(_DWORD *)v59 = v57.i32[2];
  *(_DWORD *)(v59 + 4) = 0;
  *(float *)(v59 + 8) = -v57.f32[0];
  *(_DWORD *)(v59 + 12) = 0;
  *(float *)v60 = -v57.f32[1];
  *(_DWORD *)(v60 + 4) = v57.i32[0];
  *(_QWORD *)(v60 + 8) = 0;
  v61 = *(float *)a2 * *(float *)(a2 + 4);
  v62 = *(_QWORD *)(a2 + 48);
  if (!*(_BYTE *)(a1 + 840))
  {
    v63 = 0;
    v64 = 4 * v10;
    v65 = *(float **)(a2 + 48);
    do
    {
      *v65 = v61 * (float)(v112.f32[v63] - v113.f32[v63]);
      v65 = (float *)((char *)v65 + v64);
      ++v63;
    }
    while (v63 != 3);
  }
  *(int8x8_t *)v66.f32 = vext_s8((int8x8_t)__PAIR64__(v47.u32[2], v48.u32[2]), (int8x8_t)*(_OWORD *)&vextq_s8(v49, v49, 8uLL), 4uLL);
  v66.i64[1] = __PAIR64__(v47.u32[2], v48.u32[2]);
  v67 = (float32x4_t)__PAIR64__(v47.u32[2], v48.u32[2]);
  v67.i32[2] = v49.i32[2];
  v68.i64[0] = __PAIR64__(v47.u32[0], v48.u32[0]);
  v68.i64[1] = v49.u32[0];
  v69.i64[0] = __PAIR64__(v47.u32[1], v48.u32[1]);
  v69.i64[1] = v49.u32[1];
  v70 = *(int *)(a2 + 40);
  v71 = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(v71 + 12 * v70) = v48.i32[0];
  v72 = 12 * (_DWORD)v70 + 4;
  *(int32x2_t *)(v71 + v72) = vzip1_s32(*(int32x2_t *)v47.f32, *(int32x2_t *)v49.i8);
  v73 = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(v71 + 16 * v70) = v48.i32[1];
  v74 = (unint64_t)(4 * (int)v70) >> 2;
  v75 = (16 * v74) | 4;
  *(_DWORD *)(v71 + v75) = v47.i32[1];
  v76 = (16 * v74) | 8;
  *(_DWORD *)(v71 + v76) = v49.i32[1];
  *(float *)(v73 + 12 * v70) = -v48.f32[0];
  *(float *)(v73 + v72) = -v47.f32[0];
  v77 = 16 * v70;
  *(float *)(v73 + 12 * (_DWORD)v70 + 8) = -*(float *)v49.i32;
  *(float *)(v73 + v77) = -v48.f32[1];
  *(float *)(v73 + v75) = -v47.f32[1];
  *(float *)(v73 + v76) = -*(float *)&v49.i32[1];
  *(int8x8_t *)v50.f32 = vext_s8((int8x8_t)__PAIR64__(v50.u32[2], v51.u32[2]), (int8x8_t)*(_OWORD *)&vextq_s8(v52, v52, 8uLL), 4uLL);
  v50.i64[1] = __PAIR64__(v50.u32[2], v51.u32[2]);
  v78.i64[0] = v50.i64[1];
  v78.i64[1] = v52.u32[2];
  v111 = v67;
  v79 = (int8x16_t)vsubq_f32(vmulq_f32(v67, v50), vmulq_f32(v66, v78));
  v80.i64[0] = vextq_s8(v79, v79, 4uLL).u64[0];
  v80.i64[1] = v79.u32[0];
  v81 = (int8x16_t)vmulq_f32(v68, v80);
  *(float *)(v62 + 12 * v70) = v61
                             * vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v81, v81, 8uLL), vpadd_f32(*(float32x2_t *)v81.i8, *(float32x2_t *)v81.i8)).f32[0];
  v82 = (int8x16_t)vmulq_f32(v69, v80);
  *(float *)(v62 + v77) = v61
                        * vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v82, v82, 8uLL), vpadd_f32(*(float32x2_t *)v82.i8, *(float32x2_t *)v82.i8)).f32[0];
  v83 = *(unsigned __int8 *)(a1 + 820);
  if (*(_BYTE *)(a1 + 820))
  {
    v84 = *(float *)(a1 + 812) * *(float *)(a1 + 836);
    if (v84 > 0.0)
      v85 = 1;
    else
      v85 = 2;
    v86 = *(_BYTE *)(a1 + 841) == 0;
  }
  else
  {
    if (!*(_BYTE *)(a1 + 841))
      return;
    v86 = 0;
    v85 = 0;
    v84 = 0.0;
  }
  v87 = 5 * v70;
  *(_DWORD *)(v71 + 20 * v70) = v48.i32[2];
  v88 = 20 * (_DWORD)v70;
  v89 = v88 + 4;
  *(_DWORD *)(v71 + v89) = v47.i32[2];
  v88 += 8;
  *(_DWORD *)(v71 + v88) = v49.i32[2];
  *(float *)(v73 + 4 * v87) = -v48.f32[2];
  *(float *)(v73 + v89) = -v47.f32[2];
  *(float *)(v73 + v88) = -*(float *)&v49.i32[2];
  btAngularLimit::getLow((btAngularLimit *)(a1 + 792));
  v91 = v90;
  btAngularLimit::getHigh((btAngularLimit *)(a1 + 792));
  v93 = v92;
  v94 = v91 != v92 || v83 == 0;
  v95 = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(v95 + 4 * v87) = 0;
  v96 = !v94;
  v97 = *(_DWORD *)(a1 + 852);
  v98 = (float *)(a1 + 864);
  if ((v97 & 2) == 0)
    v98 = (float *)(a2 + 4);
  v99 = *v98;
  if (!v86 && (v96 & 1) == 0)
  {
    if ((v97 & 4) != 0)
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + 4 * v87) = *(_DWORD *)(a1 + 856);
    MotorFactor = btTypedConstraint::getMotorFactor((btTypedConstraint *)a1, *(float *)(a1 + 832), v91, v92, *(float *)(a1 + 784), v99 * *(float *)a2);
    v95 = *(_QWORD *)(a2 + 48);
    *(float *)(v95 + 4 * v87) = *(float *)(v95 + 4 * v87)
                              + (float)((float)(MotorFactor * *(float *)(a1 + 784)) * *(float *)(a1 + 836));
    *(float *)(*(_QWORD *)(a2 + 64) + 4 * v87) = -*(float *)(a1 + 788);
    *(_DWORD *)(*(_QWORD *)(a2 + 72) + 4 * v87) = *(_DWORD *)(a1 + 788);
  }
  if (v83)
  {
    *(float *)(v95 + 4 * v87) = *(float *)(v95 + 4 * v87) + (float)((float)(v99 * *(float *)a2) * v84);
    if ((*(_BYTE *)(a1 + 852) & 1) != 0)
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + 4 * v87) = *(_DWORD *)(a1 + 860);
    if (v91 == v93)
    {
      *(_DWORD *)(*(_QWORD *)(a2 + 64) + 4 * v87) = -8388609;
    }
    else
    {
      v101 = *(_QWORD *)(a2 + 64);
      if (v85 != 1)
      {
        *(_DWORD *)(v101 + 4 * v87) = -8388609;
        v102 = 0;
LABEL_35:
        *(_DWORD *)(*(_QWORD *)(a2 + 72) + 4 * v87) = v102;
        v103 = *(float *)(a1 + 808);
        if (v103 <= 0.0)
        {
          v107 = *(float *)(v95 + 4 * v87);
        }
        else
        {
          v104 = (int8x16_t)vmulq_f32(v111, *a5);
          v105 = (int8x16_t)vmulq_f32(v111, *a6);
          LODWORD(v106) = vsub_f32(vadd_f32(vpadd_f32(*(float32x2_t *)v104.i8, *(float32x2_t *)v104.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v104, v104, 8uLL)), vadd_f32(vpadd_f32(*(float32x2_t *)v105.i8, *(float32x2_t *)v105.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v105, v105, 8uLL))).u32[0];
          v107 = *(float *)(v95 + 4 * v87);
          if (v85 == 1)
          {
            v108 = -(float)(v103 * v106);
            if (v106 >= 0.0 || v108 <= v107)
              goto LABEL_49;
          }
          else
          {
            v108 = -(float)(v103 * v106);
            if (v106 <= 0.0 || v108 >= v107)
              goto LABEL_49;
          }
          *(float *)(v95 + 4 * v87) = v108;
          v107 = v108;
        }
LABEL_49:
        *(float *)(v95 + 4 * v87) = *(float *)(a1 + 804) * v107;
        return;
      }
      *(_DWORD *)(v101 + 4 * v87) = 0;
    }
    v102 = 2139095039;
    goto LABEL_35;
  }
}

uint64_t btHingeConstraint::setFrames(btHingeConstraint *this, const btTransform *a2, const btTransform *a3)
{
  this->var16.var0.var0[1] = a2->var0.var0[0];
  this->var16.var0.var0[2] = a2->var0.var0[1];
  this->var16.var1 = a2->var0.var0[2];
  *(btVector3 *)&this->var17 = a2->var1;
  *(btTransform *)&this->var19.var2 = *a3;
  return (*((uint64_t (**)(btHingeConstraint *))this->var0 + 2))(this);
}

float btHingeConstraint::getHingeAngle(btHingeConstraint *this, const btTransform *a2, const btTransform *a3, float32x4_t a4)
{
  float32x4_t v4;
  int8x16_t v5;
  int8x16_t v6;
  float32x4_t v7;
  int8x16_t v8;
  float32x4_t v9;
  int8x16_t v10;
  int8x16_t v11;
  float32x4_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;

  a4.i32[0] = LODWORD(this->var16.var0.var0[1].var0.var0[0]);
  a4.i32[1] = LODWORD(this->var16.var0.var0[2].var0.var0[0]);
  a4.i32[2] = LODWORD(this->var16.var1.var0.var0[0]);
  v4 = (float32x4_t)a2->var0.var0[1];
  v5 = (int8x16_t)vmulq_f32((float32x4_t)a2->var0.var0[0], a4);
  v6 = (int8x16_t)vmulq_f32(a4, v4);
  v7 = (float32x4_t)a2->var0.var0[2];
  v8 = (int8x16_t)vmulq_f32(a4, v7);
  v9 = (float32x4_t)vextq_s8(v5, v5, 8uLL);
  v8.i32[3] = 0;
  *(float32x2_t *)v5.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v5.i8, *(float32x2_t *)v6.i8), (float32x2_t)vzip1_s32(*(int32x2_t *)v9.f32, (int32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)));
  v9.i32[0] = LODWORD(this->var16.var0.var0[1].var0.var0[1]);
  v9.i32[1] = LODWORD(this->var16.var0.var0[2].var0.var0[1]);
  v9.i32[2] = LODWORD(this->var16.var1.var0.var0[1]);
  v10 = (int8x16_t)vmulq_f32((float32x4_t)a2->var0.var0[0], v9);
  v11 = (int8x16_t)vmulq_f32(v4, v9);
  v12 = vmulq_f32(v7, v9);
  v12.i32[3] = 0;
  *(float32x2_t *)v10.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v10.i8, *(float32x2_t *)v11.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL)));
  *(float32x2_t *)v11.i8 = vpadd_f32(vpadd_f32(*(float32x2_t *)v12.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL)), 0);
  v12.i32[0] = LODWORD(this->var19.var3);
  v12.i32[1] = *(_DWORD *)&this->var19.var7;
  v12.i32[2] = LODWORD(this->var23);
  v13 = (int8x16_t)vmulq_f32((float32x4_t)a3->var0.var0[0], v12);
  v14 = (int8x16_t)vmulq_f32(v12, (float32x4_t)a3->var0.var0[1]);
  v15 = (int8x16_t)vmulq_f32(v12, (float32x4_t)a3->var0.var0[2]);
  v15.i32[3] = 0;
  *(float32x2_t *)v13.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v13.i8, *(float32x2_t *)v14.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)));
  *(float32x2_t *)v6.i8 = vpadd_f32(vpadd_f32(*(float32x2_t *)v15.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL)), 0);
  *(float32x2_t *)v5.i8 = vmul_f32(*(float32x2_t *)v5.i8, *(float32x2_t *)v13.i8);
  *(float32x2_t *)v10.i8 = vmul_f32(*(float32x2_t *)v10.i8, *(float32x2_t *)v13.i8);
  return atan2f(vadd_f32(vpadd_f32(*(float32x2_t *)v5.i8, *(float32x2_t *)v5.i8), vmul_f32(vpadd_f32(vpadd_f32(*(float32x2_t *)v8.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL)), 0), *(float32x2_t *)v6.i8)).f32[0], vadd_f32(vpadd_f32(*(float32x2_t *)v10.i8, *(float32x2_t *)v10.i8), vmul_f32(*(float32x2_t *)v11.i8, *(float32x2_t *)v6.i8)).f32[0])* *((float *)&this[1].var8 + 1);
}

btHingeConstraint *btHingeConstraint::setParam(btHingeConstraint *this, int a2, float a3, int a4)
{
  int v4;

  if (a4 == 5 || a4 == -1)
  {
    switch(a2)
    {
      case 4:
        *((float *)&this[1].var12 + 1) = a3;
        v4 = 1;
        break;
      case 3:
        *(float *)&this[1].var12 = a3;
        v4 = 4;
        break;
      case 2:
        this[1].var13[0].var0.var0.var0[0] = a3;
        v4 = 2;
        break;
      default:
        return this;
    }
    LODWORD(this[1].var11) |= v4;
  }
  return this;
}

float btHingeConstraint::getParam(btHingeConstraint *this, int a2, int a3)
{
  float result;

  result = 0.0;
  if (a3 == 5 || a3 == -1)
  {
    switch(a2)
    {
      case 4:
        return *((float *)&this[1].var12 + 1);
      case 3:
        return *(float *)&this[1].var12;
      case 2:
        return this[1].var13[0].var0.var0.var0[0];
    }
  }
  return result;
}

void btHingeConstraint::~btHingeConstraint(btHingeConstraint *this)
{
  this->var0 = (void **)off_1EA5968E0;
}

{
  this->var0 = (void **)off_1EA5968E0;
  btAlignedFreeInternal((void **)&this->var0);
}

uint64_t btHingeConstraint::calculateSerializeBufferSize(btHingeConstraint *this)
{
  return 232;
}

const char *btHingeConstraint::serialize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t j;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t k;
  uint64_t m;
  int v15;
  int v16;
  int v17;

  btTypedConstraint::serialize(a1, a2, a3);
  v5 = 0;
  v6 = a1 + 656;
  v7 = a2 + 64;
  do
  {
    for (i = 0; i != 16; i += 4)
      *(_DWORD *)(v7 + i) = *(_DWORD *)(v6 + i);
    ++v5;
    v6 += 16;
    v7 += 16;
  }
  while (v5 != 3);
  for (j = 0; j != 16; j += 4)
    *(_DWORD *)(a2 + 112 + j) = *(_DWORD *)(a1 + 704 + j);
  v10 = 0;
  v11 = a1 + 720;
  v12 = a2 + 128;
  do
  {
    for (k = 0; k != 16; k += 4)
      *(_DWORD *)(v12 + k) = *(_DWORD *)(v11 + k);
    ++v10;
    v11 += 16;
    v12 += 16;
  }
  while (v10 != 3);
  for (m = 0; m != 16; m += 4)
    *(_DWORD *)(a2 + 176 + m) = *(_DWORD *)(a1 + 768 + m);
  v15 = *(unsigned __int8 *)(a1 + 840);
  *(_DWORD *)(a2 + 200) = *(unsigned __int8 *)(a1 + 841);
  *(_QWORD *)(a2 + 204) = *(_QWORD *)(a1 + 784);
  *(_DWORD *)(a2 + 192) = *(unsigned __int8 *)(a1 + 844);
  *(_DWORD *)(a2 + 196) = v15;
  btAngularLimit::getLow((btAngularLimit *)(a1 + 792));
  *(_DWORD *)(a2 + 212) = v16;
  btAngularLimit::getHigh((btAngularLimit *)(a1 + 792));
  *(_DWORD *)(a2 + 216) = v17;
  *(_QWORD *)(a2 + 220) = *(_QWORD *)(a1 + 800);
  *(_DWORD *)(a2 + 228) = *(_DWORD *)(a1 + 808);
  return "btHingeConstraintFloatData";
}

void btPoint2PointConstraint::btPoint2PointConstraint(btPoint2PointConstraint *this, btRigidBody *a2, btRigidBody *a3, const btVector3 *a4, const btVector3 *a5)
{
  uint64_t v7;

  btTypedConstraint::btTypedConstraint((uint64_t)this, 3, (uint64_t)a2, (uint64_t)a3);
  *(_QWORD *)v7 = off_1EA597648;
  *(btVector3 *)(v7 + 368) = *a4;
  *(btVector3 *)(v7 + 384) = *a5;
  *(_DWORD *)(v7 + 400) = 0;
  *(_BYTE *)(v7 + 412) = 0;
  *(_QWORD *)(v7 + 416) = 0x3F8000003E99999ALL;
  *(_DWORD *)(v7 + 424) = 0;
}

void btPoint2PointConstraint::btPoint2PointConstraint(btPoint2PointConstraint *this, float32x4_t *a2, float32x4_t *a3)
{
  uint64_t v5;
  float32x4_t v6;
  int8x16_t v7;
  float32x4_t v8;
  int8x16_t v9;

  v5 = btTypedConstraint::btTypedConstraint((uint64_t)this, 3, (uint64_t)a2);
  *(float32x4_t *)(v5 + 368) = *a3;
  v6 = vmulq_f32(a2[1], *a3);
  v7 = (int8x16_t)vmulq_f32(*a3, a2[2]);
  v8 = a2[4];
  v9 = (int8x16_t)vmulq_f32(*a3, a2[3]);
  v9.i32[3] = 0;
  *(_QWORD *)v5 = off_1EA597648;
  *(float32x2_t *)v6.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v6.f32, *(float32x2_t *)v7.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v6, (int8x16_t)v6, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)));
  *(float32x2_t *)&v6.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v9.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL)), 0);
  *(float32x4_t *)(v5 + 384) = vaddq_f32(v6, v8);
  *(_DWORD *)(v5 + 400) = 0;
  *(_BYTE *)(v5 + 412) = 0;
  *(_QWORD *)(v5 + 416) = 0x3F8000003E99999ALL;
  *(_DWORD *)(v5 + 424) = 0;
}

btJacobianEntry *btPoint2PointConstraint::buildJacobian(btPoint2PointConstraint *this)
{
  uint64_t v2;
  btJacobianEntry *result;
  btRigidBody *var8;
  btRigidBody *var9;
  int32x4_t v6;
  int32x4_t v7;
  int8x16_t v8;
  float32x4_t v9;
  float32x4_t v10;
  unsigned __int32 v11;
  float32x4_t v12;
  float32x4_t v13;
  int8x16_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int8x16_t v17;
  float32x4_t v18;
  float32x4_t v19;
  unsigned __int32 v20;
  int8x16_t v21;
  float32x4_t v22;
  int8x16_t v23;
  btVector3 v24;
  float32x4_t v25;
  int8x16_t v26;
  float32x4_t v27;
  uint64_t v28;
  int8x16_t v29;
  btVector3 v30;
  btMatrix3x3 v31;
  btMatrix3x3 v32;
  btVector3 v33;

  v2 = 0;
  this->var10 = 0.0;
  v33 = (btVector3)0;
  result = (btJacobianEntry *)&this->var13[0].var0.var0.var0[2];
  do
  {
    v33.var0.var0[v2] = 1.0;
    var8 = this->var8;
    var9 = this->var9;
    v6 = *((int32x4_t *)var8 + 1);
    v7 = *((int32x4_t *)var8 + 2);
    v8 = (int8x16_t)vtrn1q_s32(v6, v7);
    v9 = *((float32x4_t *)var8 + 3);
    v10 = *((float32x4_t *)var8 + 4);
    v11 = vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL).u32[0];
    *(int32x2_t *)v6.i8 = vzip2_s32(*(int32x2_t *)v6.i8, *(int32x2_t *)v7.i8);
    v7.i64[0] = vextq_s8(v8, v8, 8uLL).u64[0];
    v8.i64[1] = v9.u32[0];
    v6.u64[1] = (unint64_t)vzip2_s32(*(int32x2_t *)v9.f32, 0);
    v12 = *(float32x4_t *)&this->var19;
    v13 = *(float32x4_t *)&this[1].var0;
    v14 = (int8x16_t)vmulq_f32(v9, v12);
    v7.i64[1] = v11;
    v32.var0[0] = (btVector3)v8;
    v32.var0[1] = (btVector3)v6;
    v32.var0[2] = (btVector3)v7;
    v15 = *((int32x4_t *)var9 + 1);
    v16 = *((int32x4_t *)var9 + 2);
    v17 = (int8x16_t)vtrn1q_s32(v15, v16);
    v18 = *((float32x4_t *)var9 + 3);
    v19 = *((float32x4_t *)var9 + 4);
    v20 = vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL).u32[0];
    *(int32x2_t *)v15.i8 = vzip2_s32(*(int32x2_t *)v15.i8, *(int32x2_t *)v16.i8);
    v16.i64[0] = vextq_s8(v17, v17, 8uLL).u64[0];
    v17.i64[1] = v18.u32[0];
    v15.u64[1] = (unint64_t)vzip2_s32(*(int32x2_t *)v18.f32, 0);
    v21 = (int8x16_t)vmulq_f32(v18, v13);
    v16.i64[1] = v20;
    v31.var0[0] = (btVector3)v17;
    v31.var0[1] = (btVector3)v15;
    v31.var0[2] = (btVector3)v16;
    v22 = vmulq_f32(*((float32x4_t *)var8 + 1), v12);
    v23 = (int8x16_t)vmulq_f32(v12, *((float32x4_t *)var8 + 2));
    v14.i32[3] = 0;
    *(float32x2_t *)v22.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v22.f32, *(float32x2_t *)v23.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL)));
    *(float32x2_t *)&v22.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v14.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)), 0);
    v24 = (btVector3)vsubq_f32(vaddq_f32(v10, v22), v10);
    v24.var0.var0[3] = 0.0;
    v25 = vmulq_f32(*((float32x4_t *)var9 + 1), v13);
    v26 = (int8x16_t)vmulq_f32(v13, *((float32x4_t *)var9 + 2));
    v21.i32[3] = 0;
    *(float32x2_t *)v25.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v25.f32, *(float32x2_t *)v26.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL)));
    *(float32x2_t *)&v25.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v21.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL)), 0);
    v27 = vsubq_f32(vaddq_f32(v19, v25), v19);
    v27.i32[3] = 0;
    v29 = (int8x16_t)v27;
    v30 = v24;
    btJacobianEntry::btJacobianEntry(result, &v32, &v31, (int8x16_t *)&v30, &v29, (float32x4_t *)&v33, (float32x4_t *)var8 + 28, *((float *)var8 + 96), (float32x4_t *)var9 + 28, *((float *)var9 + 96));
    v33.var0.var0[v2++] = 0.0;
    result = (btJacobianEntry *)(v28 + 96);
  }
  while (v2 != 3);
  return result;
}

uint64_t btPoint2PointConstraint::getInfo1(uint64_t result, int *a2)
{
  int v2;

  if (*(_BYTE *)(result + 412))
    v2 = 0;
  else
    v2 = 3;
  *a2 = v2;
  a2[1] = v2;
  return result;
}

float btPoint2PointConstraint::getInfo2(float32x4_t *a1, uint64_t a2)
{
  return btPoint2PointConstraint::getInfo2NonVirtual(a1, a2, (float32x4_t *)(a1[2].i64[1] + 16), (float32x4_t *)(a1[3].i64[0] + 16));
}

float btPoint2PointConstraint::getInfo2NonVirtual(float32x4_t *a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4)
{
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  float32x4_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float32x4_t v14;
  _DWORD *v15;
  uint64_t v16;
  float32x4_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int32 v24;
  float *v25;
  float v26;
  float *v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  uint64_t v31;
  int v32;
  float v33;
  int v34;
  float v35;
  float result;
  _OWORD v37[2];

  v4 = 0;
  v5 = *(_DWORD **)(a2 + 8);
  *v5 = 1065353216;
  v6 = *(int *)(a2 + 40);
  v5[v6 + 1] = 1065353216;
  v5[2 * (int)v6 + 2] = 1065353216;
  v7 = a1[23];
  v8 = (int8x16_t)vmulq_f32(*a3, v7);
  v9 = (int8x16_t)vmulq_f32(v7, a3[1]);
  v10 = (int8x16_t)vmulq_f32(v7, a3[2]);
  v10.i32[3] = 0;
  *(float32x2_t *)v7.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v8.i8, *(float32x2_t *)v9.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL)));
  *(float32x2_t *)&v7.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v10.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL)), 0);
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v11 + 4 * v6;
  v13 = v11 + 8 * v6;
  v14 = vnegq_f32(v7);
  *(_DWORD *)v11 = 0;
  *(float *)(v11 + 4) = -v14.f32[2];
  *(_DWORD *)(v11 + 8) = v14.i32[1];
  *(_DWORD *)(v11 + 12) = 0;
  *(_DWORD *)v12 = v14.i32[2];
  *(_DWORD *)(v12 + 4) = 0;
  *(float *)(v12 + 8) = -v14.f32[0];
  *(_DWORD *)(v12 + 12) = 0;
  *(float *)v13 = -v14.f32[1];
  *(_DWORD *)(v13 + 4) = v14.i32[0];
  *(_QWORD *)(v13 + 8) = 0;
  v15 = *(_DWORD **)(a2 + 24);
  *v15 = -1082130432;
  v16 = *(int *)(a2 + 40);
  v15[v16 + 1] = -1082130432;
  v15[2 * (int)v16 + 2] = -1082130432;
  v17 = a1[24];
  v18 = (int8x16_t)vmulq_f32(*a4, v17);
  v19 = (int8x16_t)vmulq_f32(v17, a4[1]);
  v20 = (int8x16_t)vmulq_f32(v17, a4[2]);
  v20.i32[3] = 0;
  *(float32x2_t *)v18.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v18.i8, *(float32x2_t *)v19.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL)));
  *(float *)v20.i32 = vpadd_f32(vpadd_f32(*(float32x2_t *)v20.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL)), 0).f32[0];
  v21 = *(_QWORD *)(a2 + 32);
  v22 = v21 + 4 * v16;
  v23 = v21 + 8 * v16;
  *(_DWORD *)v21 = 0;
  *(float *)(v21 + 4) = -*(float *)v20.i32;
  *(_DWORD *)(v21 + 8) = v18.i32[1];
  *(_DWORD *)(v21 + 12) = 0;
  *(_QWORD *)v22 = v20.u32[0];
  *(float *)(v22 + 8) = -*(float *)v18.i32;
  *(_DWORD *)(v22 + 12) = 0;
  *(float *)v23 = -*(float *)&v18.i32[1];
  *(_DWORD *)(v23 + 4) = v18.i32[0];
  *(_QWORD *)(v23 + 8) = 0;
  v24 = a1[25].i32[0];
  v25 = &a1[25].f32[1];
  if ((v24 & 1) == 0)
    v25 = (float *)(a2 + 4);
  v26 = *v25 * *(float *)a2;
  v27 = *(float **)(a2 + 48);
  v28 = *(int *)(a2 + 40);
  v29 = 4 * v28;
  do
  {
    *v27 = v26
         * (float)((float)((float)(*(float *)((char *)v37 + v4 * 4) + a4[3].f32[v4])
                         - *(float *)((char *)&v37[1] + v4 * 4))
                 - a3[3].f32[v4]);
    v27 = (float *)((char *)v27 + v29);
    ++v4;
  }
  while (v4 != 3);
  if ((v24 & 2) != 0)
  {
    v30 = *(_DWORD **)(a2 + 56);
    v31 = 3;
    do
    {
      *v30 = a1[25].i32[2];
      v30 = (_DWORD *)((char *)v30 + v29);
      --v31;
    }
    while (v31);
  }
  v32 = 0;
  v33 = a1[26].f32[2];
  v34 = 2;
  v35 = v33;
  while (1)
  {
    if (v35 > 0.0)
    {
      *(float *)(*(_QWORD *)(a2 + 64) + 4 * v32) = -v33;
      *(float *)(*(_QWORD *)(a2 + 72) + 4 * v32) = v33;
    }
    if (!v34)
      break;
    v35 = a1[26].f32[2];
    --v34;
    v32 += v28;
  }
  result = a1[26].f32[1];
  *(float *)(a2 + 92) = result;
  return result;
}

btPoint2PointConstraint *btPoint2PointConstraint::setParam(btPoint2PointConstraint *this, int a2, float a3, int a4)
{
  int v4;

  if (a4 == -1)
  {
    if ((a2 - 3) < 2)
    {
      this[1].var4 = a3;
      v4 = 2;
    }
    else
    {
      if ((a2 - 1) > 1)
        return this;
      *((float *)&this[1].var3.var1 + 1) = a3;
      v4 = 1;
    }
    this[1].var3.var0 |= v4;
  }
  return this;
}

float btPoint2PointConstraint::getParam(btPoint2PointConstraint *this, int a2, int a3)
{
  if (a3 != -1)
    return 3.4028e38;
  if ((a2 - 3) < 2)
    return this[1].var4;
  if ((a2 - 1) > 1)
    return 3.4028e38;
  return *((float *)&this[1].var3.var1 + 1);
}

void btPoint2PointConstraint::~btPoint2PointConstraint(btPoint2PointConstraint *this)
{
  this->var0 = (void **)off_1EA5968E0;
}

{
  this->var0 = (void **)off_1EA5968E0;
  btAlignedFreeInternal((void **)&this->var0);
}

uint64_t btPoint2PointConstraint::calculateSerializeBufferSize(btPoint2PointConstraint *this)
{
  return 96;
}

const char *btPoint2PointConstraint::serialize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  uint64_t j;

  btTypedConstraint::serialize(a1, a2, a3);
  for (i = 0; i != 16; i += 4)
    *(_DWORD *)(a2 + 64 + i) = *(_DWORD *)(a1 + 368 + i);
  for (j = 0; j != 16; j += 4)
    *(_DWORD *)(a2 + 80 + j) = *(_DWORD *)(a1 + 384 + j);
  return "btPoint2PointConstraintFloatData";
}

void btSequentialImpulseConstraintSolver::btSequentialImpulseConstraintSolver(btSequentialImpulseConstraintSolver *this)
{
  *(_QWORD *)this = off_1EA5983B0;
  *((_BYTE *)this + 32) = 1;
  *((_QWORD *)this + 3) = 0;
  *(_QWORD *)((char *)this + 12) = 0;
  *((_BYTE *)this + 64) = 1;
  *((_QWORD *)this + 7) = 0;
  *(_QWORD *)((char *)this + 44) = 0;
  *((_BYTE *)this + 96) = 1;
  *((_QWORD *)this + 11) = 0;
  *(_QWORD *)((char *)this + 76) = 0;
  *((_BYTE *)this + 128) = 1;
  *((_QWORD *)this + 15) = 0;
  *(_QWORD *)((char *)this + 108) = 0;
  *((_BYTE *)this + 160) = 1;
  *((_QWORD *)this + 19) = 0;
  *(_QWORD *)((char *)this + 140) = 0;
  *((_BYTE *)this + 192) = 1;
  *((_QWORD *)this + 23) = 0;
  *(_QWORD *)((char *)this + 172) = 0;
  *((_BYTE *)this + 224) = 1;
  *((_QWORD *)this + 27) = 0;
  *(_QWORD *)((char *)this + 204) = 0;
  *((_BYTE *)this + 256) = 1;
  *((_QWORD *)this + 31) = 0;
  *(_QWORD *)((char *)this + 236) = 0;
  *((_BYTE *)this + 288) = 1;
  *((_QWORD *)this + 35) = 0;
  *(_QWORD *)((char *)this + 268) = 0;
  *((_QWORD *)this + 38) = 0;
}

void btSequentialImpulseConstraintSolver::~btSequentialImpulseConstraintSolver(btSequentialImpulseConstraintSolver *this)
{
  char *v2;

  *(_QWORD *)this = off_1EA5983B0;
  v2 = (char *)this + 8;
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)this + 264);
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)this + 232);
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)this + 200);
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)this + 168);
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)this + 136);
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)this + 104);
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)this + 72);
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)this + 40);
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)v2);
}

{
  void **v1;

  btSequentialImpulseConstraintSolver::~btSequentialImpulseConstraintSolver(this);
  btAlignedFreeInternal(v1);
}

float32x4_t btSequentialImpulseConstraintSolver::resolveSingleConstraintRowGeneric(uint64_t a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4)
{
  float v4;
  float v6;
  float32x4_t v7;
  int8x16_t v8;
  int8x16_t v11;
  float32x4_t result;
  float v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;

  v4 = a4[6].f32[1];
  _S4 = a4[6].i32[3];
  v6 = a4[7].f32[2];
  v7 = a4[1];
  v8 = (int8x16_t)vmulq_f32(v7, a2[4]);
  _Q5 = (int8x16_t)vmulq_f32(*a4, a2[5]);
  _Q5.i32[0] = vadd_f32(vadd_f32(vpadd_f32(*(float32x2_t *)v8.i8, *(float32x2_t *)v8.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL)), vadd_f32(vpadd_f32(*(float32x2_t *)_Q5.i8, *(float32x2_t *)_Q5.i8), (float32x2_t)*(_OWORD *)&vextq_s8(_Q5, _Q5, 8uLL))).u32[0];
  _Q6 = (int8x16_t)vmulq_f32(a4[3], a3[4]);
  v11 = (int8x16_t)vmulq_f32(a4[2], a3[5]);
  _Q6.i32[0] = vadd_f32(vadd_f32(vpadd_f32(*(float32x2_t *)_Q6.i8, *(float32x2_t *)_Q6.i8), (float32x2_t)*(_OWORD *)&vextq_s8(_Q6, _Q6, 8uLL)), vadd_f32(vpadd_f32(*(float32x2_t *)v11.i8, *(float32x2_t *)v11.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL))).u32[0];
  __asm
  {
    FMLS            S0, S4, V5.S[0]
    FMLS            S0, S4, V6.S[0]
  }
  v18 = v4 + result.f32[0];
  if ((float)(v4 + result.f32[0]) < v6 || (v6 = a4[7].f32[3], v18 > v6))
  {
    result.f32[0] = v6 - v4;
    v18 = v6;
  }
  a4[6].f32[1] = v18;
  if (a2[13].i64[0])
  {
    v19 = vmulq_n_f32(vmulq_f32(v7, a2[8]), result.f32[0]);
    v19.i32[3] = 0;
    v20 = a2[6];
    v21 = a2[5];
    a2[4] = vaddq_f32(a2[4], vmulq_f32(a2[7], v19));
    v22 = vmulq_n_f32(v20, result.f32[0]);
    v22.i32[3] = 0;
    a2[5] = vaddq_f32(v21, vmulq_f32(a4[4], v22));
  }
  if (a3[13].i64[0])
  {
    v23 = vmulq_n_f32(vmulq_f32(a4[3], a3[8]), result.f32[0]);
    v23.i32[3] = 0;
    v24 = a3[6];
    v25 = a3[5];
    a3[4] = vaddq_f32(a3[4], vmulq_f32(a3[7], v23));
    v26 = vmulq_n_f32(v24, result.f32[0]);
    v26.i32[3] = 0;
    result = vaddq_f32(v25, vmulq_f32(a4[5], v26));
    a3[5] = result;
  }
  return result;
}

float32x4_t btSequentialImpulseConstraintSolver::resolveSingleConstraintRowLowerLimit(uint64_t a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4)
{
  float v4;
  float v6;
  float32x4_t v7;
  int8x16_t v8;
  int8x16_t v11;
  float v18;
  float32x4_t result;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;

  v4 = a4[6].f32[1];
  _S2 = a4[6].i32[3];
  v6 = a4[7].f32[2];
  v7 = a4[1];
  v8 = (int8x16_t)vmulq_f32(v7, a2[4]);
  _Q5 = (int8x16_t)vmulq_f32(*a4, a2[5]);
  _Q5.i32[0] = vadd_f32(vadd_f32(vpadd_f32(*(float32x2_t *)v8.i8, *(float32x2_t *)v8.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL)), vadd_f32(vpadd_f32(*(float32x2_t *)_Q5.i8, *(float32x2_t *)_Q5.i8), (float32x2_t)*(_OWORD *)&vextq_s8(_Q5, _Q5, 8uLL))).u32[0];
  _Q6 = (int8x16_t)vmulq_f32(a4[3], a3[4]);
  v11 = (int8x16_t)vmulq_f32(a4[2], a3[5]);
  _Q6.i32[0] = vadd_f32(vadd_f32(vpadd_f32(*(float32x2_t *)_Q6.i8, *(float32x2_t *)_Q6.i8), (float32x2_t)*(_OWORD *)&vextq_s8(_Q6, _Q6, 8uLL)), vadd_f32(vpadd_f32(*(float32x2_t *)v11.i8, *(float32x2_t *)v11.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL))).u32[0];
  __asm
  {
    FMLS            S3, S2, V5.S[0]
    FMLS            S3, S2, V6.S[0]
  }
  v18 = v4 + _S3;
  result.f32[0] = v6 - v4;
  if (v18 >= v6)
    result.f32[0] = _S3;
  else
    v18 = a4[7].f32[2];
  a4[6].f32[1] = v18;
  if (a2[13].i64[0])
  {
    v20 = vmulq_n_f32(vmulq_f32(v7, a2[8]), result.f32[0]);
    v20.i32[3] = 0;
    v21 = a2[6];
    v22 = a2[5];
    a2[4] = vaddq_f32(a2[4], vmulq_f32(a2[7], v20));
    v23 = vmulq_n_f32(v21, result.f32[0]);
    v23.i32[3] = 0;
    a2[5] = vaddq_f32(v22, vmulq_f32(a4[4], v23));
  }
  if (a3[13].i64[0])
  {
    v24 = vmulq_n_f32(vmulq_f32(a4[3], a3[8]), result.f32[0]);
    v24.i32[3] = 0;
    v25 = a3[6];
    v26 = a3[5];
    a3[4] = vaddq_f32(a3[4], vmulq_f32(a3[7], v24));
    v27 = vmulq_n_f32(v25, result.f32[0]);
    v27.i32[3] = 0;
    result = vaddq_f32(v26, vmulq_f32(a4[5], v27));
    a3[5] = result;
  }
  return result;
}

float32x4_t btSequentialImpulseConstraintSolver::resolveSplitPenetrationImpulseCacheFriendly(uint64_t a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4)
{
  float32x4_t result;
  float v5;
  float v6;
  float32x4_t v7;
  int8x16_t v8;
  float v17;
  float v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;

  result.i32[0] = a4[8].i32[0];
  if (result.f32[0] != 0.0)
  {
    v5 = a4[6].f32[0];
    v6 = a4[7].f32[2];
    v7 = a4[1];
    v8 = (int8x16_t)vmulq_f32(v7, a2[9]);
    _Q4 = (int8x16_t)vmulq_f32(*a4, a2[10]);
    _Q4.i32[0] = vadd_f32(vadd_f32(vpadd_f32(*(float32x2_t *)v8.i8, *(float32x2_t *)v8.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL)), vadd_f32(vpadd_f32(*(float32x2_t *)_Q4.i8, *(float32x2_t *)_Q4.i8), (float32x2_t)*(_OWORD *)&vextq_s8(_Q4, _Q4, 8uLL))).u32[0];
    _Q5 = (int8x16_t)vmulq_f32(a4[3], a3[9]);
    _Q6 = (int8x16_t)vmulq_f32(a4[2], a3[10]);
    ++gNumSplitImpulseRecoveries;
    _Q5.i32[0] = vadd_f32(vadd_f32(vpadd_f32(*(float32x2_t *)_Q5.i8, *(float32x2_t *)_Q5.i8), (float32x2_t)*(_OWORD *)&vextq_s8(_Q5, _Q5, 8uLL)), vadd_f32(vpadd_f32(*(float32x2_t *)_Q6.i8, *(float32x2_t *)_Q6.i8), (float32x2_t)*(_OWORD *)&vextq_s8(_Q6, _Q6, 8uLL))).u32[0];
    _Q6.i32[0] = a4[6].i32[3];
    __asm
    {
      FMLS            S0, S6, V4.S[0]
      FMLS            S0, S6, V5.S[0]
    }
    v17 = v5 + result.f32[0];
    v18 = v6 - v5;
    if (v17 < v6)
      result.f32[0] = v18;
    else
      v6 = v17;
    a4[6].f32[0] = v6;
    if (a2[13].i64[0])
    {
      v19 = vmulq_n_f32(vmulq_f32(v7, a2[8]), result.f32[0]);
      v19.i32[3] = 0;
      v20 = vmulq_n_f32(a2[6], result.f32[0]);
      v20.i32[3] = 0;
      a2[9] = vaddq_f32(a2[9], vmulq_f32(a2[7], v19));
      a2[10] = vaddq_f32(a2[10], vmulq_f32(a4[4], v20));
    }
    if (a3[13].i64[0])
    {
      v21 = vmulq_n_f32(vmulq_f32(a4[3], a3[8]), result.f32[0]);
      v21.i32[3] = 0;
      v22 = vmulq_n_f32(a3[6], result.f32[0]);
      v22.i32[3] = 0;
      a3[9] = vaddq_f32(a3[9], vmulq_f32(a3[7], v21));
      result = vaddq_f32(a3[10], vmulq_f32(a4[5], v22));
      a3[10] = result;
    }
  }
  return result;
}

uint64_t btSequentialImpulseConstraintSolver::btRandInt2(btSequentialImpulseConstraintSolver *this, unsigned int a2)
{
  unint64_t v2;

  v2 = (1664525 * *((_DWORD *)this + 76) + 1013904223);
  *((_QWORD *)this + 38) = v2;
  if (a2 <= 0x10000)
  {
    v2 ^= v2 >> 16;
    if (a2 <= 0x100)
    {
      v2 ^= v2 >> 8;
      if (a2 <= 0x10)
      {
        v2 ^= v2 >> 4;
        if (a2 <= 4)
        {
          v2 ^= v2 >> 2;
          if (a2 <= 2)
            v2 ^= v2 >> 1;
        }
      }
    }
  }
  return (v2 % (int)a2);
}

void btSequentialImpulseConstraintSolver::initSolverBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __int128 v4;
  const float *v5;
  float32x4_t v6;

  if (a3)
  {
    if ((*(_BYTE *)(a3 + 264) & 2) != 0)
      v3 = a3;
    else
      v3 = 0;
  }
  else
  {
    v3 = 0;
  }
  v4 = 0uLL;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  if (v3)
  {
    *(_OWORD *)a2 = *(_OWORD *)(v3 + 16);
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(v3 + 32);
    *(_OWORD *)(a2 + 32) = *(_OWORD *)(v3 + 48);
    *(_OWORD *)(a2 + 48) = *(_OWORD *)(v3 + 64);
    v5 = (const float *)(v3 + 384);
    v6 = vld1q_dup_f32(v5);
    v6.i32[3] = 0;
    *(float32x4_t *)(a2 + 128) = vmulq_f32(*(float32x4_t *)(v3 + 400), v6);
    *(_QWORD *)(a2 + 208) = v3;
    *(_OWORD *)(a2 + 96) = *(_OWORD *)(v3 + 624);
    *(_OWORD *)(a2 + 112) = *(_OWORD *)(v3 + 400);
    *(_OWORD *)(a2 + 176) = *(_OWORD *)(v3 + 352);
    v4 = *(_OWORD *)(v3 + 368);
  }
  else
  {
    *(_OWORD *)a2 = xmmword_1DD007970;
    *(_OWORD *)(a2 + 16) = xmmword_1DD007920;
    *(_OWORD *)(a2 + 32) = xmmword_1DD007600;
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 56) = 0;
    *(_QWORD *)(a2 + 128) = 0;
    *(_QWORD *)(a2 + 136) = 0;
    *(_QWORD *)(a2 + 208) = 0;
    *(_OWORD *)(a2 + 96) = xmmword_1DD008470;
    *(_OWORD *)(a2 + 112) = xmmword_1DD008470;
    *(_OWORD *)(a2 + 176) = 0uLL;
  }
  *(_OWORD *)(a2 + 192) = v4;
}

double btSequentialImpulseConstraintSolver::setupFrictionConstraint(uint64_t a1, uint64_t a2, int8x16_t *a3, int a4, int a5, uint64_t a6, int8x8_t *a7, int8x8_t *a8, float a9, float a10, float a11)
{
  float32x4_t v11;
  int8x16_t v12;
  float32x4_t v13;
  uint64_t v14;
  float32x4_t *v15;
  float32x4_t *v16;
  float32x4_t v17;
  float32x4_t v18;
  int8x16_t v19;
  float32x4_t v20;
  int8x16_t v21;
  float32x4_t v22;
  float32x4_t v23;
  int8x16_t v24;
  int8x16_t v25;
  float32x4_t v26;
  float32x4_t v27;
  int8x16_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int8x16_t v31;
  int8x16_t v32;
  float v33;
  float v34;
  float32x4_t v35;
  float32x4_t v36;
  int8x16_t v37;
  float32x4_t v38;
  int8x16_t v39;
  int8x16_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  int8x16_t v44;
  int8x16_t v45;
  float v46;
  float32x4_t *v47;
  float32x4_t v48;
  int8x16_t v49;
  unsigned __int32 v50;
  float32x4_t *v51;
  float32x4_t v52;
  int8x16_t v53;
  unsigned __int32 v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  double result;

  v11 = *(float32x4_t *)a3;
  *(int8x16_t *)(a2 + 16) = *a3;
  v12.i64[0] = 0x8000000080000000;
  v12.i64[1] = 0x8000000080000000;
  v13 = (float32x4_t)veorq_s8(*a3, v12);
  *(float32x4_t *)(a2 + 48) = v13;
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(float32x4_t **)(v14 + 224 * a4 + 208);
  v16 = *(float32x4_t **)(v14 + 224 * a5 + 208);
  *(_DWORD *)(a2 + 152) = a4;
  *(_DWORD *)(a2 + 156) = a5;
  *(_DWORD *)(a2 + 104) = *(_DWORD *)(a6 + 84);
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(int8x8_t *)v17.f32 = vext_s8(*a7, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a7->i8, *(int8x16_t *)a7->i8, 8uLL), 4uLL);
  *(int8x8_t *)&v17.u32[2] = *a7;
  *(int8x8_t *)v18.f32 = vext_s8(*(int8x8_t *)v11.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL), 4uLL);
  v18.i64[1] = v11.i64[0];
  v19 = (int8x16_t)vsubq_f32(vmulq_f32(v18, *(float32x4_t *)a7->i8), vmulq_f32(v11, v17));
  v20.i64[0] = vextq_s8(v19, v19, 4uLL).u64[0];
  v20.i64[1] = v19.u32[0];
  *(float32x4_t *)a2 = v20;
  v21 = 0uLL;
  v22 = 0uLL;
  if (v15)
  {
    v23 = vmulq_f32(v15[19], v20);
    v24 = (int8x16_t)vmulq_f32(v15[20], v20);
    v25 = (int8x16_t)vmulq_f32(v15[21], v20);
    v25.i32[3] = 0;
    *(float32x2_t *)v23.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v24.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL)));
    *(float32x2_t *)&v23.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v25.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL)), 0);
    v22 = vmulq_f32(v23, v15[39]);
  }
  *(float32x4_t *)(a2 + 64) = v22;
  *(int8x8_t *)v26.f32 = vext_s8(*a8, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a8->i8, *(int8x16_t *)a8->i8, 8uLL), 4uLL);
  *(int8x8_t *)&v26.u32[2] = *a8;
  v27.i64[0] = vextq_s8((int8x16_t)v13, (int8x16_t)v13, 4uLL).u64[0];
  v27.i64[1] = v13.i64[0];
  v28 = (int8x16_t)vsubq_f32(vmulq_f32(v27, *(float32x4_t *)a8->i8), vmulq_f32(v26, v13));
  v29.i64[0] = vextq_s8(v28, v28, 4uLL).u64[0];
  v29.i64[1] = v28.u32[0];
  *(float32x4_t *)(a2 + 32) = v29;
  if (v16)
  {
    v30 = vmulq_f32(v16[19], v29);
    v31 = (int8x16_t)vmulq_f32(v16[20], v29);
    v32 = (int8x16_t)vmulq_f32(v16[21], v29);
    v32.i32[3] = 0;
    *(float32x2_t *)v30.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v30.f32, *(float32x2_t *)v31.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v30, (int8x16_t)v30, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL)));
    *(float32x2_t *)&v30.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v32.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL)), 0);
    v21 = (int8x16_t)vmulq_f32(v30, v16[39]);
  }
  *(int8x16_t *)(a2 + 80) = v21;
  v33 = 0.0;
  v34 = 0.0;
  if (v15)
  {
    v35.i64[0] = vextq_s8((int8x16_t)v22, (int8x16_t)v22, 4uLL).u64[0];
    v35.i64[1] = v22.i64[0];
    *(int8x8_t *)v36.f32 = vext_s8(*a7, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a7->i8, *(int8x16_t *)a7->i8, 8uLL), 4uLL);
    *(int8x8_t *)&v36.u32[2] = *a7;
    v37 = (int8x16_t)vsubq_f32(vmulq_f32(v22, v36), vmulq_f32(v35, *(float32x4_t *)a7->i8));
    v38.i64[0] = vextq_s8(v37, v37, 4uLL).u64[0];
    v38.i64[1] = v37.u32[0];
    v39 = (int8x16_t)vmulq_f32(*(float32x4_t *)a3, v38);
    v34 = v15[24].f32[0]
        + vadd_f32(vpadd_f32(*(float32x2_t *)v39.i8, *(float32x2_t *)v39.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v39, v39, 8uLL)).f32[0];
  }
  if (v16)
  {
    v40.i64[0] = 0x8000000080000000;
    v40.i64[1] = 0x8000000080000000;
    v41 = (float32x4_t)veorq_s8(v21, v40);
    *(int8x8_t *)v42.f32 = vext_s8(*(int8x8_t *)v41.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL), 4uLL);
    v42.i64[1] = v41.i64[0];
    *(int8x8_t *)v43.f32 = vext_s8(*a8, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a8->i8, *(int8x16_t *)a8->i8, 8uLL), 4uLL);
    *(int8x8_t *)&v43.u32[2] = *a8;
    v44 = (int8x16_t)vsubq_f32(vmulq_f32(v43, v41), vmulq_f32(*(float32x4_t *)a8->i8, v42));
    v40.i64[0] = vextq_s8(v44, v44, 4uLL).u64[0];
    v40.i64[1] = v44.u32[0];
    v45 = (int8x16_t)vmulq_f32(*(float32x4_t *)a3, (float32x4_t)v40);
    v33 = v16[24].f32[0]
        + vadd_f32(vpadd_f32(*(float32x2_t *)v45.i8, *(float32x2_t *)v45.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v45, v45, 8uLL)).f32[0];
  }
  v46 = a9 / (float)(v34 + v33);
  *(float *)(a2 + 108) = v46;
  if (!v15)
  {
    v48 = 0uLL;
    v55 = (int8x16_t)vmulq_f32(v11, (float32x4_t)0);
    v50 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v55, v55, 8uLL), vpadd_f32(*(float32x2_t *)v55.i8, *(float32x2_t *)v55.i8)).u32[0];
    if (v16)
      goto LABEL_11;
LABEL_13:
    v52 = 0uLL;
    v56 = (int8x16_t)vmulq_f32(v13, (float32x4_t)0);
    v54 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v56, v56, 8uLL), vpadd_f32(*(float32x2_t *)v56.i8, *(float32x2_t *)v56.i8)).u32[0];
    goto LABEL_14;
  }
  v47 = (float32x4_t *)(v14 + 224 * a4);
  v48 = v47[12];
  v49 = (int8x16_t)vmulq_f32(v11, v47[11]);
  v50 = vadd_f32(vpadd_f32(*(float32x2_t *)v49.i8, *(float32x2_t *)v49.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v49, v49, 8uLL)).u32[0];
  if (!v16)
    goto LABEL_13;
LABEL_11:
  v51 = (float32x4_t *)(v14 + 224 * a5);
  v52 = v51[12];
  v53 = (int8x16_t)vmulq_f32(v51[11], v13);
  v54 = vadd_f32(vpadd_f32(*(float32x2_t *)v53.i8, *(float32x2_t *)v53.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v53, v53, 8uLL)).u32[0];
LABEL_14:
  v57 = (int8x16_t)vmulq_f32(v48, v20);
  *(float *)v57.i32 = *(float *)&v50
                    + vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v57, v57, 8uLL), vpadd_f32(*(float32x2_t *)v57.i8, *(float32x2_t *)v57.i8)).f32[0];
  v58 = (int8x16_t)vmulq_f32(v52, v29);
  *(float *)(a2 + 112) = v46
                       * (float)(a10
                               - (float)(*(float *)v57.i32
                                       + (float)(*(float *)&v54
                                               + vadd_f32(vpadd_f32(*(float32x2_t *)v58.i8, *(float32x2_t *)v58.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v58, v58, 8uLL)).f32[0])));
  *(float *)(a2 + 116) = a11;
  result = 6.08244611e77;
  *(_QWORD *)(a2 + 120) = 0x501502F900000000;
  return result;
}

uint64_t btSequentialImpulseConstraintSolver::addFrictionConstraint(btSequentialImpulseConstraintSolver *this, int8x16_t *a2, int a3, int a4, int a5, btManifoldPoint *a6, int8x8_t *a7, int8x8_t *a8, float a9, float a10, float a11, btCollisionObject *a12, btCollisionObject *a13)
{
  int v23;
  int v24;
  int v25;
  const btVector3 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  _OWORD *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  void **v36;
  uint64_t v37;
  const btVector3 *v39;

  v23 = *((_DWORD *)this + 27);
  v24 = v23;
  if (v23 == *((_DWORD *)this + 28))
  {
    v25 = v23 ? 2 * v23 : 1;
    if (v23 < v25)
    {
      if (v25)
      {
        v26 = (const btVector3 *)a8;
        v27 = btAlignedAllocInternal(160 * v25, 16);
        a8 = (int8x8_t *)v26;
        v28 = v27;
        v23 = *((_DWORD *)this + 27);
      }
      else
      {
        v28 = 0;
      }
      if (v23 >= 1)
      {
        v29 = 0;
        v30 = 160 * v23;
        do
        {
          v31 = (_OWORD *)(v28 + v29);
          v32 = (_OWORD *)(*((_QWORD *)this + 15) + v29);
          *v31 = *v32;
          v31[1] = v32[1];
          v31[2] = v32[2];
          v31[3] = v32[3];
          v31[4] = v32[4];
          v31[5] = v32[5];
          v33 = v32[6];
          v34 = v32[7];
          v35 = v32[9];
          v31[8] = v32[8];
          v31[9] = v35;
          v31[6] = v33;
          v31[7] = v34;
          v29 += 160;
        }
        while (v30 != v29);
      }
      v36 = (void **)*((_QWORD *)this + 15);
      if (v36 && *((_BYTE *)this + 128))
      {
        v39 = (const btVector3 *)a8;
        btAlignedFreeInternal(v36);
        a8 = (int8x8_t *)v39;
      }
      *((_BYTE *)this + 128) = 1;
      *((_QWORD *)this + 15) = v28;
      *((_DWORD *)this + 28) = v25;
      v23 = *((_DWORD *)this + 27);
    }
  }
  *((_DWORD *)this + 27) = v23 + 1;
  v37 = *((_QWORD *)this + 15) + 160 * v24;
  *(_DWORD *)(v37 + 148) = a5;
  btSequentialImpulseConstraintSolver::setupFrictionConstraint((uint64_t)this, v37, a2, a3, a4, (uint64_t)a6, a7, a8, a9, a10, a11);
  return v37;
}

double btSequentialImpulseConstraintSolver::setupRollingFrictionConstraint(uint64_t a1, uint64_t a2, int8x16_t *a3, int a4, int a5, uint64_t a6, double a7, float a8, float a9)
{
  float32x4_t v9;
  int8x16_t v10;
  uint64_t v11;
  float32x4_t *v12;
  float32x4_t *v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  int8x16_t v17;
  int8x16_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int8x16_t v21;
  int8x16_t v22;
  float32x4_t v23;
  float32x4_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  float v33;
  float32x4_t *v34;
  float32x4_t v35;
  int8x16_t v36;
  float v37;
  float32x4_t *v38;
  float32x4_t v39;
  float32x4_t v40;
  int8x16_t v41;
  unsigned __int32 v42;
  int8x16_t v43;
  int8x16_t v44;
  double result;

  v9 = 0uLL;
  *(_OWORD *)(a2 + 16) = 0u;
  v10.i64[0] = 0x8000000080000000;
  v10.i64[1] = 0x8000000080000000;
  *(int8x16_t *)(a2 + 48) = v10;
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(float32x4_t **)(v11 + 224 * a4 + 208);
  v13 = *(float32x4_t **)(v11 + 224 * a5 + 208);
  *(_DWORD *)(a2 + 152) = a4;
  *(_DWORD *)(a2 + 156) = a5;
  *(_DWORD *)(a2 + 104) = *(_DWORD *)(a6 + 88);
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  v14 = (float32x4_t)veorq_s8(*a3, v10);
  *(float32x4_t *)a2 = v14;
  v15 = 0uLL;
  if (v12)
  {
    v16 = vmulq_f32(v12[19], v14);
    v17 = (int8x16_t)vmulq_f32(v12[20], v14);
    v18 = (int8x16_t)vmulq_f32(v12[21], v14);
    v18.i32[3] = 0;
    *(float32x2_t *)v16.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v16.f32, *(float32x2_t *)v17.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL)));
    *(float32x2_t *)&v16.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v18.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL)), 0);
    v15 = vmulq_f32(v16, v12[39]);
  }
  *(float32x4_t *)(a2 + 64) = v15;
  v19 = *(float32x4_t *)a3;
  *(int8x16_t *)(a2 + 32) = *a3;
  if (v13)
  {
    v20 = vmulq_f32(v19, v13[19]);
    v21 = (int8x16_t)vmulq_f32(v19, v13[20]);
    v22 = (int8x16_t)vmulq_f32(v19, v13[21]);
    v22.i32[3] = 0;
    *(float32x2_t *)v20.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v21.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL)));
    *(float32x2_t *)&v20.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v22.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL)), 0);
    v9 = vmulq_f32(v20, v13[39]);
  }
  *(float32x4_t *)(a2 + 80) = v9;
  v23 = 0uLL;
  v24 = 0uLL;
  if (v12)
  {
    v25 = (int8x16_t)vmulq_f32(v12[19], v14);
    v26 = (int8x16_t)vmulq_f32(v12[20], v14);
    v27 = (int8x16_t)vmulq_f32(v12[21], v14);
    v27.i32[3] = 0;
    *(float32x2_t *)v24.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v25.i8, *(float32x2_t *)v26.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL)));
    *(float32x2_t *)&v24.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v27.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL)), 0);
  }
  if (v13)
  {
    v28 = (int8x16_t)vmulq_f32(v19, v13[19]);
    v29 = (int8x16_t)vmulq_f32(v19, v13[20]);
    v30 = (int8x16_t)vmulq_f32(v19, v13[21]);
    v30.i32[3] = 0;
    *(float32x2_t *)v23.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v28.i8, *(float32x2_t *)v29.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL)));
    *(float32x2_t *)&v23.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v30.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL)), 0);
  }
  v31 = (int8x16_t)vmulq_f32(v24, v14);
  v32 = (int8x16_t)vmulq_f32(v19, v23);
  v33 = 1.0
      / (float)((float)(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL), vpadd_f32(*(float32x2_t *)v31.i8, *(float32x2_t *)v31.i8)).f32[0]+ 0.0)+ vadd_f32(vpadd_f32(*(float32x2_t *)v32.i8, *(float32x2_t *)v32.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL)).f32[0]);
  *(float *)(a2 + 108) = v33;
  if (!v12)
  {
    v37 = vpadd_f32(0, 0).f32[0] + 0.0;
    v35 = 0uLL;
    if (v13)
      goto LABEL_11;
LABEL_13:
    v42 = vpadd_f32((float32x2_t)0x8000000080000000, (float32x2_t)0x8000000080000000).u32[0];
    v40 = 0uLL;
    goto LABEL_14;
  }
  v34 = (float32x4_t *)(v11 + 224 * a4);
  v35 = v34[12];
  v36 = (int8x16_t)vmulq_f32(v34[11], (float32x4_t)0);
  LODWORD(v37) = vadd_f32(vpadd_f32(*(float32x2_t *)v36.i8, *(float32x2_t *)v36.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v36, v36, 8uLL)).u32[0];
  if (!v13)
    goto LABEL_13;
LABEL_11:
  v38 = (float32x4_t *)(v11 + 224 * a5);
  v39.i64[0] = 0x8000000080000000;
  v39.i64[1] = 0x8000000080000000;
  v40 = v38[12];
  v41 = (int8x16_t)vmulq_f32(v38[11], v39);
  v42 = vadd_f32(vpadd_f32(*(float32x2_t *)v41.i8, *(float32x2_t *)v41.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v41, v41, 8uLL)).u32[0];
LABEL_14:
  v43 = (int8x16_t)vmulq_f32(v35, v14);
  v44 = (int8x16_t)vmulq_f32(v19, v40);
  *(float *)(a2 + 112) = v33
                       * (float)(a8
                               - (float)((float)(v37
                                               + vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v43, v43, 8uLL), vpadd_f32(*(float32x2_t *)v43.i8, *(float32x2_t *)v43.i8)).f32[0])+ (float)(*(float *)&v42+ vadd_f32(vpadd_f32(*(float32x2_t *)v44.i8, *(float32x2_t *)v44.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v44, v44, 8uLL)).f32[0])));
  *(float *)(a2 + 116) = a9;
  result = 6.08244611e77;
  *(_QWORD *)(a2 + 120) = 0x501502F900000000;
  return result;
}

uint64_t btSequentialImpulseConstraintSolver::addRollingFrictionConstraint(btSequentialImpulseConstraintSolver *this, int8x16_t *a2, int a3, int a4, int a5, btManifoldPoint *a6, const btVector3 *a7, const btVector3 *a8, __n128 a9, float a10, float a11, btCollisionObject *a12, btCollisionObject *a13)
{
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  void **v31;
  uint64_t v32;

  v21 = *((_DWORD *)this + 35);
  v22 = v21;
  if (v21 == *((_DWORD *)this + 36))
  {
    v23 = v21 ? 2 * v21 : 1;
    if (v21 < v23)
    {
      if (v23)
      {
        v24 = btAlignedAllocInternal(160 * v23, 16);
        v21 = *((_DWORD *)this + 35);
      }
      else
      {
        v24 = 0;
      }
      if (v21 >= 1)
      {
        v25 = 0;
        v26 = 160 * v21;
        do
        {
          v27 = v24 + v25;
          v28 = *((_QWORD *)this + 19) + v25;
          *(_OWORD *)v27 = *(_OWORD *)v28;
          *(_OWORD *)(v27 + 16) = *(_OWORD *)(v28 + 16);
          *(_OWORD *)(v27 + 32) = *(_OWORD *)(v28 + 32);
          *(_OWORD *)(v27 + 48) = *(_OWORD *)(v28 + 48);
          *(_OWORD *)(v27 + 64) = *(_OWORD *)(v28 + 64);
          *(_OWORD *)(v27 + 80) = *(_OWORD *)(v28 + 80);
          a9 = *(__n128 *)(v28 + 96);
          v29 = *(_OWORD *)(v28 + 112);
          v30 = *(_OWORD *)(v28 + 144);
          *(_OWORD *)(v27 + 128) = *(_OWORD *)(v28 + 128);
          *(_OWORD *)(v27 + 144) = v30;
          *(__n128 *)(v27 + 96) = a9;
          *(_OWORD *)(v27 + 112) = v29;
          v25 += 160;
        }
        while (v26 != v25);
      }
      v31 = (void **)*((_QWORD *)this + 19);
      if (v31 && *((_BYTE *)this + 160))
        btAlignedFreeInternal(v31);
      *((_BYTE *)this + 160) = 1;
      *((_QWORD *)this + 19) = v24;
      *((_DWORD *)this + 36) = v23;
      v21 = *((_DWORD *)this + 35);
    }
  }
  *((_DWORD *)this + 35) = v21 + 1;
  v32 = *((_QWORD *)this + 19) + 160 * v22;
  *(_DWORD *)(v32 + 148) = a5;
  btSequentialImpulseConstraintSolver::setupRollingFrictionConstraint((uint64_t)this, v32, a2, a3, a4, (uint64_t)a6, a9.n128_f64[0], a10, a11);
  return v32;
}

uint64_t btSequentialImpulseConstraintSolver::getOrInitSolverBody(btSequentialImpulseConstraintSolver *this, btCollisionObject *a2)
{
  uint64_t v2;
  btSequentialImpulseConstraintSolver *v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *((unsigned int *)a2 + 60);
  if ((v2 & 0x80000000) != 0)
  {
    if ((*((_BYTE *)a2 + 264) & 2) != 0 && ((v4 = this, *((float *)a2 + 96) != 0.0) || (*((_BYTE *)a2 + 232) & 2) != 0))
    {
      v2 = *((unsigned int *)this + 3);
      v5 = *((_DWORD *)this + 3);
      if ((_DWORD)v2 == *((_DWORD *)this + 4))
      {
        v6 = (_DWORD)v2 ? 2 * v2 : 1;
        v5 = *((_DWORD *)this + 3);
        if ((int)v2 < v6)
        {
          if (v6)
            v7 = btAlignedAllocInternal(224 * v6, 16);
          else
            v7 = 0;
          v8 = *((_DWORD *)v4 + 3);
          if (v8 >= 1)
          {
            v9 = 0;
            v10 = 224 * v8;
            do
            {
              v11 = *((_QWORD *)v4 + 3) + v9;
              v12 = v7 + v9;
              *(_OWORD *)v12 = *(_OWORD *)v11;
              *(_OWORD *)(v12 + 16) = *(_OWORD *)(v11 + 16);
              *(_OWORD *)(v12 + 32) = *(_OWORD *)(v11 + 32);
              *(_OWORD *)(v12 + 48) = *(_OWORD *)(v11 + 48);
              *(_OWORD *)(v12 + 64) = *(_OWORD *)(v11 + 64);
              *(_OWORD *)(v12 + 80) = *(_OWORD *)(v11 + 80);
              *(_OWORD *)(v12 + 96) = *(_OWORD *)(v11 + 96);
              *(_OWORD *)(v12 + 112) = *(_OWORD *)(v11 + 112);
              *(_OWORD *)(v12 + 128) = *(_OWORD *)(v11 + 128);
              *(_OWORD *)(v12 + 144) = *(_OWORD *)(v11 + 144);
              *(_OWORD *)(v12 + 160) = *(_OWORD *)(v11 + 160);
              *(_OWORD *)(v12 + 176) = *(_OWORD *)(v11 + 176);
              *(_OWORD *)(v12 + 192) = *(_OWORD *)(v11 + 192);
              *(_QWORD *)(v12 + 208) = *(_QWORD *)(v11 + 208);
              v9 += 224;
            }
            while (v10 != v9);
          }
          this = (btSequentialImpulseConstraintSolver *)*((_QWORD *)v4 + 3);
          if (this && *((_BYTE *)v4 + 32))
            btAlignedFreeInternal((void **)this);
          *((_BYTE *)v4 + 32) = 1;
          *((_QWORD *)v4 + 3) = v7;
          *((_DWORD *)v4 + 4) = v6;
          v5 = *((_DWORD *)v4 + 3);
        }
      }
      *((_DWORD *)v4 + 3) = v5 + 1;
      v13 = *((_QWORD *)v4 + 3) + 224 * (int)v2;
      *(_QWORD *)(v13 + 208) = 0;
      *(_OWORD *)(v13 + 176) = 0u;
      *(_OWORD *)(v13 + 192) = 0u;
      *(_OWORD *)(v13 + 144) = 0u;
      *(_OWORD *)(v13 + 160) = 0u;
      *(_OWORD *)(v13 + 112) = 0u;
      *(_OWORD *)(v13 + 128) = 0u;
      *(_OWORD *)(v13 + 80) = 0u;
      *(_OWORD *)(v13 + 96) = 0u;
      *(_OWORD *)(v13 + 48) = 0u;
      *(_OWORD *)(v13 + 64) = 0u;
      *(_OWORD *)(v13 + 16) = 0u;
      *(_OWORD *)(v13 + 32) = 0u;
      *(_OWORD *)v13 = 0u;
      btSequentialImpulseConstraintSolver::initSolverBody((uint64_t)this, *((_QWORD *)v4 + 3) + 224 * (int)v2, (uint64_t)a2);
      *((_DWORD *)a2 + 60) = v2;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t btSequentialImpulseConstraintSolver::setupContactConstraint(uint64_t result, uint64_t a2, int a3, int a4, float32x4_t *a5, uint64_t a6, float32x4_t *a7, float *a8, float *a9, int8x8_t *a10, int8x8_t *a11)
{
  uint64_t v11;
  float32x4_t *v12;
  float32x4_t *v13;
  float32x4_t *v14;
  float32x4_t *v15;
  float32x4_t *v16;
  float32x4_t *v17;
  float32x4_t *v18;
  float32x4_t *v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  int8x16_t v25;
  float32x4_t v26;
  int8x16_t v27;
  float32x4_t v28;
  float32x4_t v29;
  int8x16_t v30;
  int8x16_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  float32x4_t v38;
  float32x4_t v39;
  int8x16_t v40;
  int8x16_t v41;
  float v42;
  float v43;
  float32x4_t v44;
  float32x4_t v45;
  int8x16_t v46;
  float32x4_t v47;
  int8x16_t v48;
  int8x16_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  int8x16_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  int8x16_t v65;
  float v66;
  float v67;
  float32x4_t v68;
  int8x16_t v69;
  float v70;
  float v71;
  float32x4_t *v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float v77;
  int8x16_t v78;
  float32x4_t v79;
  float32x4_t *v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t *v84;
  float32x4_t v85;
  int8x16_t v86;
  float v87;
  int8x16_t v88;
  float v89;
  float32x4_t *v90;
  float32x4_t v91;
  int8x16_t v92;
  int8x16_t v93;
  float v94;
  _BOOL4 v96;
  float v97;
  uint64_t v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;

  v11 = *(_QWORD *)(result + 24);
  v12 = (float32x4_t *)(v11 + 224 * a3);
  v15 = (float32x4_t *)v12[13].i64[0];
  v14 = v12 + 13;
  v13 = v15;
  v16 = (float32x4_t *)(v11 + 224 * a4);
  v19 = (float32x4_t *)v16[13].i64[0];
  v18 = v16 + 13;
  v17 = v19;
  v20 = vsubq_f32(a5[3], v14[-10]);
  v20.i32[3] = 0;
  *(float32x4_t *)a10->i8 = v20;
  v21 = vsubq_f32(a5[2], v18[-10]);
  v21.i32[3] = 0;
  *(float32x4_t *)a11->i8 = v21;
  *a9 = 1.0;
  v22 = a5[4];
  *(int8x8_t *)v23.f32 = vext_s8(*a10, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a10->i8, *(int8x16_t *)a10->i8, 8uLL), 4uLL);
  *(int8x8_t *)&v23.u32[2] = *a10;
  *(int8x8_t *)v24.f32 = vext_s8(*(int8x8_t *)v22.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL), 4uLL);
  v24.i64[1] = a5[4].i64[0];
  v25 = (int8x16_t)vsubq_f32(vmulq_f32(*(float32x4_t *)a10->i8, v24), vmulq_f32(v22, v23));
  v26.i64[0] = vextq_s8(v25, v25, 4uLL).u64[0];
  v26.i64[1] = v25.u32[0];
  v27 = 0uLL;
  v28 = 0uLL;
  if (v13)
  {
    v29 = vmulq_f32(v13[19], v26);
    v30 = (int8x16_t)vmulq_f32(v13[20], v26);
    v31 = (int8x16_t)vmulq_f32(v13[21], v26);
    v31.i32[3] = 0;
    *(float32x2_t *)v29.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)v30.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL)));
    *(float32x2_t *)&v29.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v31.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL)), 0);
    v28 = vmulq_f32(v29, v13[39]);
  }
  *(float32x4_t *)(a2 + 64) = v28;
  v32 = a5[4];
  *(int8x8_t *)v33.f32 = vext_s8(*a11, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a11->i8, *(int8x16_t *)a11->i8, 8uLL), 4uLL);
  *(int8x8_t *)&v33.u32[2] = *a11;
  *(int8x8_t *)v34.f32 = vext_s8(*(int8x8_t *)v32.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL), 4uLL);
  v34.i64[1] = a5[4].i64[0];
  v35 = (int8x16_t)vsubq_f32(vmulq_f32(*(float32x4_t *)a11->i8, v34), vmulq_f32(v32, v33));
  v36.i64[0] = vextq_s8(v35, v35, 4uLL).u64[0];
  v36.i64[1] = v35.u32[0];
  if (v17)
  {
    v37.i64[0] = 0x8000000080000000;
    v37.i64[1] = 0x8000000080000000;
    v38 = (float32x4_t)veorq_s8(v36, v37);
    v39 = vmulq_f32(v17[19], v38);
    v40 = (int8x16_t)vmulq_f32(v17[20], v38);
    v41 = (int8x16_t)vmulq_f32(v17[21], v38);
    v41.i32[3] = 0;
    *(float32x2_t *)v39.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v39.f32, *(float32x2_t *)v40.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v39, (int8x16_t)v39, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v40, v40, 8uLL)));
    *(float32x2_t *)&v39.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v41.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v41, v41, 8uLL)), 0);
    v27 = (int8x16_t)vmulq_f32(v39, v17[39]);
  }
  *(int8x16_t *)(a2 + 80) = v27;
  v42 = 0.0;
  v43 = 0.0;
  if (v13)
  {
    v44.i64[0] = vextq_s8((int8x16_t)v28, (int8x16_t)v28, 4uLL).u64[0];
    v44.i64[1] = v28.i64[0];
    *(int8x8_t *)v45.f32 = vext_s8(*a10, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a10->i8, *(int8x16_t *)a10->i8, 8uLL), 4uLL);
    *(int8x8_t *)&v45.u32[2] = *a10;
    v46 = (int8x16_t)vsubq_f32(vmulq_f32(v28, v45), vmulq_f32(v44, *(float32x4_t *)a10->i8));
    v47.i64[0] = vextq_s8(v46, v46, 4uLL).u64[0];
    v47.i64[1] = v46.u32[0];
    v48 = (int8x16_t)vmulq_f32(a5[4], v47);
    v43 = v13[24].f32[0]
        + vadd_f32(vpadd_f32(*(float32x2_t *)v48.i8, *(float32x2_t *)v48.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v48, v48, 8uLL)).f32[0];
  }
  if (v17)
  {
    v49.i64[0] = 0x8000000080000000;
    v49.i64[1] = 0x8000000080000000;
    v50 = (float32x4_t)veorq_s8(v27, v49);
    *(int8x8_t *)v51.f32 = vext_s8(*(int8x8_t *)v50.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL), 4uLL);
    v51.i64[1] = v50.i64[0];
    *(int8x8_t *)v52.f32 = vext_s8(*a11, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a11->i8, *(int8x16_t *)a11->i8, 8uLL), 4uLL);
    *(int8x8_t *)&v52.u32[2] = *a11;
    v53 = (int8x16_t)vsubq_f32(vmulq_f32(v52, v50), vmulq_f32(*(float32x4_t *)a11->i8, v51));
    v49.i64[0] = vextq_s8(v53, v53, 4uLL).u64[0];
    v49.i64[1] = v53.u32[0];
    v54 = (int8x16_t)vmulq_f32(a5[4], (float32x4_t)v49);
    v42 = v17[24].f32[0]
        + vadd_f32(vpadd_f32(*(float32x2_t *)v54.i8, *(float32x2_t *)v54.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v54, v54, 8uLL)).f32[0];
  }
  *(float *)(a2 + 108) = *a9 / (float)(v43 + v42);
  *(float32x4_t *)(a2 + 16) = a5[4];
  v57.i64[0] = 0x8000000080000000;
  v57.i64[1] = 0x8000000080000000;
  v55 = veorq_s8((int8x16_t)a5[4], (int8x16_t)v57);
  *(float32x4_t *)a2 = v26;
  *(int8x16_t *)(a2 + 32) = veorq_s8(v36, (int8x16_t)v57);
  *(int8x16_t *)(a2 + 48) = v55;
  v56 = 0uLL;
  v57.i8[3] = 0;
  v57.i8[7] = 0;
  v57.i8[11] = 0;
  v57.i8[15] = 0;
  if (v13)
  {
    v58 = v13[23];
    *(int8x8_t *)v59.f32 = vext_s8(*(int8x8_t *)v58.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v58, (int8x16_t)v58, 8uLL), 4uLL);
    v59.i64[1] = v13[23].i64[0];
    *(int8x8_t *)v60.f32 = vext_s8(*a10, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a10->i8, *(int8x16_t *)a10->i8, 8uLL), 4uLL);
    *(int8x8_t *)&v60.u32[2] = *a10;
    v61 = (int8x16_t)vsubq_f32(vmulq_f32(v58, v60), vmulq_f32(*(float32x4_t *)a10->i8, v59));
    v58.i64[0] = vextq_s8(v61, v61, 4uLL).u64[0];
    v58.i64[1] = v61.u32[0];
    v57 = vaddq_f32(v13[22], v58);
  }
  if (v17)
  {
    v62 = v17[23];
    *(int8x8_t *)v63.f32 = vext_s8(*(int8x8_t *)v62.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v62, (int8x16_t)v62, 8uLL), 4uLL);
    v63.i64[1] = v17[23].i64[0];
    *(int8x8_t *)v64.f32 = vext_s8(*a11, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a11->i8, *(int8x16_t *)a11->i8, 8uLL), 4uLL);
    *(int8x8_t *)&v64.u32[2] = *a11;
    v65 = (int8x16_t)vsubq_f32(vmulq_f32(v62, v64), vmulq_f32(*(float32x4_t *)a11->i8, v63));
    v62.i64[0] = vextq_s8(v65, v65, 4uLL).u64[0];
    v62.i64[1] = v65.u32[0];
    v56 = vaddq_f32(v17[22], v62);
  }
  v66 = a5[5].f32[0];
  v67 = *(float *)(a6 + 56);
  v68 = vsubq_f32(v57, v56);
  v68.i32[3] = 0;
  *a7 = v68;
  v69 = (int8x16_t)vmulq_f32(a5[4], v68);
  *(_DWORD *)a8 = vadd_f32(vpadd_f32(*(float32x2_t *)v69.i8, *(float32x2_t *)v69.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v69, v69, 8uLL)).u32[0];
  *(_DWORD *)(a2 + 104) = a5[5].i32[1];
  v70 = -(float)(*a8 * a5[5].f32[3]);
  if (v70 <= 0.0)
    v70 = 0.0;
  if ((*(_BYTE *)(a6 + 64) & 4) != 0)
  {
    v71 = a5[7].f32[3] * *(float *)(a6 + 60);
    *(float *)(a2 + 100) = v71;
    if (v13 && v14->i64[0])
    {
      v72 = (float32x4_t *)(v11 + 224 * a3);
      v73 = vmulq_n_f32(vmulq_f32(vmulq_f32(*(float32x4_t *)(a2 + 16), v72[8]), v13[25]), v71);
      v73.i32[3] = 0;
      v74 = v72[6];
      v75 = v72[5];
      v72[4] = vaddq_f32(v72[4], vmulq_f32(v72[7], v73));
      v76 = vmulq_n_f32(v74, v71);
      v76.i32[3] = 0;
      v72[5] = vaddq_f32(v75, vmulq_f32(*(float32x4_t *)(a2 + 64), v76));
    }
    if (v17 && v18->i64[0])
    {
      v77 = -*(float *)(a2 + 100);
      v78.i64[0] = 0x8000000080000000;
      v78.i64[1] = 0x8000000080000000;
      v79 = (float32x4_t)veorq_s8(*(int8x16_t *)(a2 + 80), v78);
      v80 = (float32x4_t *)(v11 + 224 * a4);
      v81 = vmulq_n_f32(vmulq_f32(v17[25], vmulq_f32(v80[8], (float32x4_t)veorq_s8(*(int8x16_t *)(a2 + 48), v78))), v77);
      v81.i32[3] = 0;
      v82 = vmulq_n_f32(v80[6], v77);
      v82.i32[3] = 0;
      v83 = vaddq_f32(v80[5], vmulq_f32(v79, v82));
      v80[4] = vaddq_f32(v80[4], vmulq_f32(v80[7], v81));
      v80[5] = v83;
    }
  }
  else
  {
    *(_DWORD *)(a2 + 100) = 0;
  }
  *(_DWORD *)(a2 + 96) = 0;
  if (v13)
  {
    v84 = (float32x4_t *)(v11 + 224 * a3);
    v85 = v84[12];
    v86 = (int8x16_t)vmulq_f32(v84[11], *(float32x4_t *)(a2 + 16));
  }
  else
  {
    v85 = 0uLL;
    v86 = (int8x16_t)vmulq_f32(*(float32x4_t *)(a2 + 16), (float32x4_t)0);
  }
  v87 = v66 + v67;
  v88 = (int8x16_t)vmulq_f32(v85, *(float32x4_t *)a2);
  v89 = vadd_f32(vpadd_f32(*(float32x2_t *)v86.i8, *(float32x2_t *)v86.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v86, v86, 8uLL)).f32[0]+ vadd_f32(vpadd_f32(*(float32x2_t *)v88.i8, *(float32x2_t *)v88.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v88, v88, 8uLL)).f32[0];
  if (v17)
  {
    v90 = (float32x4_t *)(v11 + 224 * a4);
    v91 = v90[12];
    v92 = (int8x16_t)vmulq_f32(v90[11], *(float32x4_t *)(a2 + 48));
  }
  else
  {
    v91 = 0uLL;
    v92 = (int8x16_t)vmulq_f32(*(float32x4_t *)(a2 + 48), (float32x4_t)0);
  }
  v93 = (int8x16_t)vmulq_f32(v91, *(float32x4_t *)(a2 + 32));
  v94 = v70
      - (float)(v89
              + (float)(vadd_f32(vpadd_f32(*(float32x2_t *)v92.i8, *(float32x2_t *)v92.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v92, v92, 8uLL)).f32[0]+ vadd_f32(vpadd_f32(*(float32x2_t *)v93.i8, *(float32x2_t *)v93.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v93, v93, 8uLL)).f32[0]));
  v96 = v87 > *(float *)(a6 + 48) || *(_DWORD *)(a6 + 44) == 0;
  if (v87 <= 0.0)
  {
    v98 = 36;
    if (v96)
      v98 = 32;
    v97 = (float)-(float)(v87 * *(float *)(a6 + v98)) / *(float *)(a6 + 12);
  }
  else
  {
    v94 = v94 - (float)(v87 / *(float *)(a6 + 12));
    v97 = 0.0;
  }
  v99 = *(float *)(a2 + 108);
  v100 = v97 * v99;
  v101 = v94 * v99;
  v102 = -0.0;
  if (v96)
    v102 = v100;
  *(float *)(a2 + 112) = v101 + v102;
  if (v96)
    v103 = 0.0;
  else
    v103 = v100;
  *(float *)(a2 + 128) = v103;
  *(_DWORD *)(a2 + 116) = 0;
  *(_DWORD *)(a2 + 120) = 0;
  *(_DWORD *)(a2 + 124) = 1343554297;
  return result;
}

float32x4_t btSequentialImpulseConstraintSolver::setFrictionConstraintImpulse(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, float32x4_t result)
{
  uint64_t v7;
  float32x4_t *v8;
  float32x4_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  float *v13;
  float32x4_t *v14;
  float32x4_t v15;
  float32x4_t *v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  int8x16_t *v20;
  int8x16_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float v24;
  float32x4_t v25;
  float32x4_t *v26;
  float32x4_t v27;
  float32x4_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float *v33;
  float32x4_t *v34;
  float32x4_t v35;
  float32x4_t *v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  int8x16_t *v40;
  int8x16_t v41;
  float v42;
  float32x4_t v43;
  float32x4_t *v44;
  float32x4_t v45;
  float32x4_t v46;

  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(float32x4_t **)(v7 + 224 * a3 + 208);
  v9 = *(float32x4_t **)(v7 + 224 * a4 + 208);
  v10 = *(_DWORD *)(a2 + 148);
  v11 = *(_QWORD *)(a1 + 120);
  if ((*(_BYTE *)(a6 + 64) & 4) != 0)
  {
    result.f32[0] = *(float *)(a5 + 128) * *(float *)(a6 + 60);
    v12 = v11 + 160 * v10;
    *(_DWORD *)(v12 + 100) = result.i32[0];
    v13 = (float *)(v12 + 100);
    if (v8)
    {
      v14 = (float32x4_t *)(v11 + 160 * v10);
      v15 = vmulq_n_f32(vmulq_f32(v8[25], vmulq_n_f32(v14[1], v8[24].f32[0])), result.f32[0]);
      v15.i32[3] = 0;
      v16 = (float32x4_t *)(v7 + 224 * a3);
      v17 = v16[6];
      v18 = v16[5];
      v16[4] = vaddq_f32(v16[4], vmulq_f32(v16[7], v15));
      v19 = vmulq_n_f32(v17, result.f32[0]);
      v19.i32[3] = 0;
      result = vaddq_f32(v18, vmulq_f32(v14[4], v19));
      v16[5] = result;
    }
    if (v9)
    {
      v20 = (int8x16_t *)(v11 + 160 * v10);
      v21.i64[0] = 0x8000000080000000;
      v21.i64[1] = 0x8000000080000000;
      v22 = vmulq_f32(v9[25], vmulq_n_f32((float32x4_t)veorq_s8(v20[3], v21), v9[24].f32[0]));
      v23 = (float32x4_t)veorq_s8(v20[5], v21);
      v24 = -*v13;
      v25 = vmulq_n_f32(v22, v24);
      v25.i32[3] = 0;
      v26 = (float32x4_t *)(v7 + 224 * a4);
      result = vaddq_f32(v26[4], vmulq_f32(v26[7], v25));
      v27 = vmulq_n_f32(v26[6], v24);
      v27.i32[3] = 0;
      v28 = vaddq_f32(v26[5], vmulq_f32(v23, v27));
      v26[4] = result;
      v26[5] = v28;
    }
  }
  else
  {
    *(_DWORD *)(v11 + 160 * v10 + 100) = 0;
  }
  v29 = *(_DWORD *)(a6 + 64);
  if ((v29 & 0x10) != 0)
  {
    v30 = *(int *)(a2 + 148) + 1;
    v31 = *(_QWORD *)(a1 + 120);
    if ((v29 & 4) != 0)
    {
      result.f32[0] = *(float *)(a5 + 132) * *(float *)(a6 + 60);
      v32 = v31 + 160 * v30;
      *(_DWORD *)(v32 + 100) = result.i32[0];
      v33 = (float *)(v32 + 100);
      if (v8)
      {
        v34 = (float32x4_t *)(v31 + 160 * v30);
        v35 = vmulq_n_f32(vmulq_n_f32(v34[1], v8[24].f32[0]), result.f32[0]);
        v35.i32[3] = 0;
        v36 = (float32x4_t *)(v7 + 224 * a3);
        v37 = v36[6];
        v38 = v36[5];
        v36[4] = vaddq_f32(v36[4], vmulq_f32(v36[7], v35));
        v39 = vmulq_n_f32(v37, result.f32[0]);
        v39.i32[3] = 0;
        result = vaddq_f32(v38, vmulq_f32(v34[4], v39));
        v36[5] = result;
      }
      if (v9)
      {
        v40 = (int8x16_t *)(v31 + 160 * v30);
        v41.i64[0] = 0x8000000080000000;
        v41.i64[1] = 0x8000000080000000;
        v42 = -*v33;
        v43 = vmulq_n_f32(vmulq_n_f32((float32x4_t)veorq_s8(v40[3], v41), v9[24].f32[0]), v42);
        v43.i32[3] = 0;
        v44 = (float32x4_t *)(v7 + 224 * a4);
        result = vaddq_f32(v44[4], vmulq_f32(v44[7], v43));
        v45 = vmulq_n_f32(v44[6], v42);
        v45.i32[3] = 0;
        v46 = vaddq_f32(v44[5], vmulq_f32((float32x4_t)veorq_s8(v40[5], v41), v45));
        v44[4] = result;
        v44[5] = v46;
      }
    }
    else
    {
      *(_DWORD *)(v31 + 160 * v30 + 100) = 0;
    }
  }
  return result;
}

void btSequentialImpulseConstraintSolver::convertContact(uint64_t a1, uint64_t a2, uint64_t a3)
{
  btCollisionObject *v6;
  int inited;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  int v17;
  uint64_t v18;
  float32x4_t *v19;
  float32x4_t *v20;
  float32x4_t *v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  _OWORD *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  void **v34;
  btManifoldPoint *v35;
  uint64_t v36;
  uint64_t v37;
  const btVector3 *v38;
  const btVector3 *v39;
  float32x4_t v40;
  float32x4_t v41;
  __n128 v43;
  int8x16_t v44;
  float v45;
  const btVector3 *v46;
  const btVector3 *v47;
  int8x16_t v48;
  float32x2_t v49;
  __n128 v50;
  btVector3 *v51;
  float *v52;
  float *v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  unsigned int v63;
  int8x16_t v64;
  float32x2_t v65;
  __n128 v66;
  int8x16_t v67;
  float32x2_t v68;
  uint64_t v69;
  int v70;
  _BYTE *v71;
  int v72;
  float v73;
  float32x4_t v74;
  float32x4_t *v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t *v78;
  int v79;
  int8x16_t v80;
  float v81;
  float32x4_t v82;
  float v83;
  float32x4_t v84;
  float32x4_t v85;
  int8x16_t v86;
  float32x4_t v87;
  float32x4_t *v88;
  int8x16_t v89;
  float v90;
  float32x4_t *v91;
  BOOL v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  btCollisionObject *v109;
  btCollisionObject *v110;
  btCollisionObject *v111;
  btCollisionObject *v112;
  int v113;
  float32x4_t *v114;
  float32x4_t *v115;
  float32x4_t *v116;
  float32x4_t *v117;
  float32x4_t *v118;
  float32x4_t *v119;
  btCollisionObject *v120;
  btCollisionObject *v121;
  int v122;
  uint64_t v123;
  btVector3 v124;
  btVector3 v125;
  float32x4_t v126;
  uint64_t v127;
  btVector3 v128;
  btVector3 v129;

  v6 = *(btCollisionObject **)(a2 + 792);
  v121 = *(btCollisionObject **)(a2 + 784);
  inited = btSequentialImpulseConstraintSolver::getOrInitSolverBody((btSequentialImpulseConstraintSolver *)a1, v121);
  v120 = v6;
  v8 = btSequentialImpulseConstraintSolver::getOrInitSolverBody((btSequentialImpulseConstraintSolver *)a1, v6);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 24);
  v11 = v10 + 224 * inited;
  v13 = *(float *)(v11 + 128);
  v12 = v11 + 128;
  if (v13 != 0.0
    || *(float *)(v12 + 4) != 0.0
    || *(float *)(v12 + 8) != 0.0
    || (v14 = v10 + 224 * v8, v16 = *(float *)(v14 + 128), v15 = v14 + 128, v16 != 0.0)
    || *(float *)(v15 + 4) != 0.0
    || *(float *)(v15 + 8) != 0.0)
  {
    v17 = *(_DWORD *)(a2 + 800);
    if (v17 >= 1)
    {
      v18 = 0;
      v19 = (float32x4_t *)(v10 + 224 * inited);
      v116 = v19 + 5;
      v117 = v19 + 12;
      v20 = (float32x4_t *)(v10 + 224 * v8);
      v118 = v20 + 13;
      v119 = v19 + 13;
      v114 = v20 + 5;
      v115 = v20 + 12;
      v122 = 1;
      v113 = v8;
      v123 = a3;
      while (1)
      {
        v21 = (float32x4_t *)(a2 + 192 * v18);
        if (v21[6].f32[0] <= *(float *)(a2 + 808))
          break;
LABEL_68:
        if (++v18 >= v17)
          return;
      }
      v127 = 0;
      v22 = *(_DWORD *)(a1 + 44);
      v23 = v22;
      if (v22 == *(_DWORD *)(a1 + 48))
      {
        v24 = v22 ? 2 * v22 : 1;
        v23 = *(_DWORD *)(a1 + 44);
        if (v22 < v24)
        {
          if (v24)
            v25 = btAlignedAllocInternal(160 * v24, 16);
          else
            v25 = 0;
          v26 = *(_DWORD *)(a1 + 44);
          if (v26 >= 1)
          {
            v27 = 0;
            v28 = 160 * v26;
            do
            {
              v29 = (_OWORD *)(v25 + v27);
              v30 = (_OWORD *)(*(_QWORD *)(a1 + 56) + v27);
              *v29 = *v30;
              v29[1] = v30[1];
              v29[2] = v30[2];
              v29[3] = v30[3];
              v29[4] = v30[4];
              v29[5] = v30[5];
              v31 = v30[6];
              v32 = v30[7];
              v33 = v30[9];
              v29[8] = v30[8];
              v29[9] = v33;
              v29[6] = v31;
              v29[7] = v32;
              v27 += 160;
            }
            while (v28 != v27);
          }
          v34 = *(void ***)(a1 + 56);
          if (v34 && *(_BYTE *)(a1 + 64))
            btAlignedFreeInternal(v34);
          *(_BYTE *)(a1 + 64) = 1;
          *(_QWORD *)(a1 + 56) = v25;
          *(_DWORD *)(a1 + 48) = v24;
          v23 = *(_DWORD *)(a1 + 44);
        }
      }
      v35 = (btManifoldPoint *)&v21[1];
      *(_DWORD *)(a1 + 44) = v23 + 1;
      v36 = *(_QWORD *)(a1 + 56) + 160 * v22;
      *(_DWORD *)(v36 + 152) = inited;
      *(_DWORD *)(v36 + 156) = v9;
      *(_QWORD *)(v36 + 136) = v21 + 1;
      v37 = v123;
      btSequentialImpulseConstraintSolver::setupContactConstraint(a1, v36, inited, v9, v21 + 1, v123, &v126, (float *)&v127, (float *)&v127 + 1, (int8x8_t *)&v129, (int8x8_t *)&v128);
      *(_DWORD *)(v36 + 148) = *(_DWORD *)(a1 + 108);
      v40 = 0uLL;
      v41 = 0uLL;
      if (v119->i64[0])
        v41 = vaddq_f32(*v117, *v116);
      if (v118->i64[0])
        v40 = vaddq_f32(*v115, *v114);
      if (*(float *)(a2 + 192 * v18 + 104) <= 0.0 || v122 < 1)
      {
LABEL_45:
        v69 = a2 + 192 * v18;
        v72 = *(unsigned __int8 *)(v69 + 136);
        v71 = (_BYTE *)(v69 + 136);
        v70 = v72;
        if ((*(_BYTE *)(v37 + 64) & 0x20) != 0 && v70)
        {
          v73 = *((float *)&v127 + 1);
          btSequentialImpulseConstraintSolver::addFrictionConstraint((btSequentialImpulseConstraintSolver *)a1, (int8x16_t *)(a2 + 192 * v18 + 176), inited, v9, v22, v35, (int8x8_t *)&v129, (int8x8_t *)&v128, *((float *)&v127 + 1), *(float *)(a2 + 192 * v18 + 152), *(float *)(a2 + 192 * v18 + 160), v109, v111);
          if ((*(_BYTE *)(v37 + 64) & 0x10) != 0)
            btSequentialImpulseConstraintSolver::addFrictionConstraint((btSequentialImpulseConstraintSolver *)a1, (int8x16_t *)(a2 + 192 * v18 + 192), inited, v9, v22, v35, (int8x8_t *)&v129, (int8x8_t *)&v128, v73, *(float *)(a2 + 192 * v18 + 156), *(float *)(a2 + 192 * v18 + 164), v110, v112);
          btSequentialImpulseConstraintSolver::setFrictionConstraintImpulse(a1, v36, inited, v9, (uint64_t)v35, v37, v74);
        }
        else
        {
          v75 = (float32x4_t *)(a2 + 192 * v18);
          v76 = v75[5];
          v77 = vsubq_f32(v126, vmulq_n_f32(v76, *(float *)&v127));
          v77.i32[3] = 0;
          v75[11] = v77;
          v78 = v75 + 11;
          v79 = *(_DWORD *)(v37 + 64);
          if ((v79 & 0x40) != 0
            || (v80 = (int8x16_t)vmulq_f32(v77, v77),
                v81 = vadd_f32(vpadd_f32(*(float32x2_t *)v80.i8, *(float32x2_t *)v80.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v80, v80, 8uLL)).f32[0], v81 <= 0.00000011921))
          {
            v90 = v76.f32[1];
            v91 = (float32x4_t *)(a2 + 192 * v18 + 192);
            v92 = fabsf(v76.f32[2]) <= 0.70711;
            v93 = (float)(v90 * v90) + (float)(v76.f32[0] * v76.f32[0]);
            v94 = 1.0 / sqrtf(v93);
            v95 = -(float)(v76.f32[1] * v94);
            v96 = v76.f32[0] * v94;
            v97 = -(float)(v76.f32[2] * (float)(v76.f32[0] * v94));
            v98 = v76.f32[2] * v95;
            v99 = v93 * v94;
            v100 = (float)(v76.f32[2] * v76.f32[2]) + (float)(v90 * v90);
            v101 = 1.0 / sqrtf(v100);
            v102 = -(float)(v76.f32[2] * v101);
            v103 = v76.f32[1] * v101;
            v104 = v100 * v101;
            v105 = -(float)(v76.f32[0] * (float)(v76.f32[1] * v101));
            v106 = v102 * v76.f32[0];
            if (v92)
            {
              v102 = v96;
              v103 = 0.0;
            }
            else
            {
              v95 = 0.0;
            }
            if (v92)
            {
              v104 = v97;
              v107 = v98;
            }
            else
            {
              v107 = v105;
            }
            if (v92)
              v106 = v99;
            v78->f32[0] = v95;
            v78->f32[1] = v102;
            v78->f32[2] = v103;
            v91->f32[0] = v104;
            *(float *)(a2 + 192 * v18 + 196) = v107;
            *(float *)(a2 + 192 * v18 + 200) = v106;
            v108 = *((float *)&v127 + 1);
            if ((v79 & 0x10) != 0)
            {
              applyAnisotropicFriction((float32x4_t *)v121, (float32x4_t *)(a2 + 192 * v18 + 192), 1);
              applyAnisotropicFriction((float32x4_t *)v120, v91, 1);
              btSequentialImpulseConstraintSolver::addFrictionConstraint((btSequentialImpulseConstraintSolver *)a1, (int8x16_t *)v91, inited, v9, v22, v35, (int8x8_t *)&v129, (int8x8_t *)&v128, v108, 0.0, 0.0, v109, v111);
            }
            applyAnisotropicFriction((float32x4_t *)v121, v78, 1);
            applyAnisotropicFriction((float32x4_t *)v120, v78, 1);
            btSequentialImpulseConstraintSolver::addFrictionConstraint((btSequentialImpulseConstraintSolver *)a1, (int8x16_t *)v78, inited, v9, v22, v35, (int8x8_t *)&v129, (int8x8_t *)&v128, v108, 0.0, 0.0, v109, v111);
            if ((~*(_DWORD *)(v123 + 64) & 0x50) == 0)
              *v71 = 1;
          }
          else
          {
            v82 = vmulq_n_f32(v77, 1.0 / sqrtf(v81));
            *v78 = v82;
            v83 = *((float *)&v127 + 1);
            if ((*(_BYTE *)(v37 + 64) & 0x10) != 0)
            {
              v84.i64[0] = vextq_s8((int8x16_t)v82, (int8x16_t)v82, 4uLL).u64[0];
              v84.i64[1] = v82.i64[0];
              v85.i64[0] = vextq_s8((int8x16_t)v76, (int8x16_t)v76, 4uLL).u64[0];
              v85.i64[1] = v76.i64[0];
              v86 = (int8x16_t)vsubq_f32(vmulq_f32(v85, v82), vmulq_f32(v76, v84));
              v87.i64[0] = vextq_s8(v86, v86, 4uLL).u64[0];
              v87.i64[1] = v86.u32[0];
              v88 = (float32x4_t *)(a2 + 192 * v18);
              v89 = (int8x16_t)vmulq_f32(v87, v87);
              v88[12] = vmulq_n_f32(v87, 1.0/ sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v89, v89, 8uLL), vpadd_f32(*(float32x2_t *)v89.i8, *(float32x2_t *)v89.i8)).f32[0]));
              v88 += 12;
              applyAnisotropicFriction((float32x4_t *)v121, v88, 1);
              applyAnisotropicFriction((float32x4_t *)v120, v88, 1);
              btSequentialImpulseConstraintSolver::addFrictionConstraint((btSequentialImpulseConstraintSolver *)a1, (int8x16_t *)v88, inited, v9, v22, v35, (int8x8_t *)&v129, (int8x8_t *)&v128, v83, 0.0, 0.0, v109, v111);
            }
            applyAnisotropicFriction((float32x4_t *)v121, v78, 1);
            applyAnisotropicFriction((float32x4_t *)v120, v78, 1);
            btSequentialImpulseConstraintSolver::addFrictionConstraint((btSequentialImpulseConstraintSolver *)a1, (int8x16_t *)v78, inited, v9, v22, v35, (int8x8_t *)&v129, (int8x8_t *)&v128, v83, 0.0, 0.0, v109, v111);
          }
        }
        v17 = *(_DWORD *)(a2 + 800);
        goto LABEL_68;
      }
      v43 = (__n128)vsubq_f32(v40, v41);
      v43.n128_u32[3] = 0;
      v44 = (int8x16_t)vmulq_f32((float32x4_t)v43, (float32x4_t)v43);
      v45 = sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v44, v44, 8uLL), vpadd_f32(*(float32x2_t *)v44.i8, *(float32x2_t *)v44.i8)).f32[0]);
      if (v45 <= *(float *)(v123 + 80))
      {
        v52 = (float *)(a2 + 192 * v18);
        v53 = v52 + 20;
        btSequentialImpulseConstraintSolver::addRollingFrictionConstraint((btSequentialImpulseConstraintSolver *)a1, (int8x16_t *)v52 + 5, inited, v9, v22, v35, v38, v39, v43, 0.0, 0.0, v109, v111);
        v54 = v52[22];
        if (fabsf(v54) <= 0.70711)
        {
          v60 = v52[21];
          v61 = (float)(v60 * v60) + (float)(*v53 * *v53);
          v62 = 1.0 / sqrtf(v61);
          *(float *)&v63 = *v53 * v62;
          v125.var0.var0[0] = -(float)(v60 * v62);
          *(_QWORD *)&v125.var0.var0[1] = v63;
          v124.var0.var0[0] = -(float)(v54 * *(float *)&v63);
          v124.var0.var0[1] = v54 * v125.var0.var0[0];
          v59 = v61 * v62;
        }
        else
        {
          v56 = *v53;
          v55 = v52[21];
          v57 = (float)(v54 * v54) + (float)(v55 * v55);
          v58 = 1.0 / sqrtf(v57);
          v125.var0.var0[0] = 0.0;
          v125.var0.var0[1] = -(float)(v54 * v58);
          v125.var0.var0[2] = v55 * v58;
          v124.var0.var0[0] = v57 * v58;
          v124.var0.var0[1] = -(float)(v56 * (float)(v55 * v58));
          v59 = v125.var0.var0[1] * v56;
        }
        v37 = v123;
        v124.var0.var0[2] = v59;
        applyAnisotropicFriction((float32x4_t *)v121, (float32x4_t *)&v125, 2);
        applyAnisotropicFriction((float32x4_t *)v120, (float32x4_t *)&v125, 2);
        applyAnisotropicFriction((float32x4_t *)v121, (float32x4_t *)&v124, 2);
        applyAnisotropicFriction((float32x4_t *)v120, (float32x4_t *)&v124, 2);
        v64 = (int8x16_t)vmulq_f32((float32x4_t)v125, (float32x4_t)v125);
        v65 = vpadd_f32(*(float32x2_t *)v64.i8, *(float32x2_t *)v64.i8);
        v66 = (__n128)vextq_s8(v64, v64, 8uLL);
        v66.n128_f64[0] = sqrtf(vadd_f32(v65, (float32x2_t)v66.n128_u64[0]).f32[0]);
        v9 = v113;
        if (v66.n128_f64[0] > 0.001)
          btSequentialImpulseConstraintSolver::addRollingFrictionConstraint((btSequentialImpulseConstraintSolver *)a1, (int8x16_t *)&v125, inited, v113, v22, v35, v46, v47, v66, 0.0, 0.0, v109, v111);
        v67 = (int8x16_t)vmulq_f32((float32x4_t)v124, (float32x4_t)v124);
        v68 = vpadd_f32(*(float32x2_t *)v67.i8, *(float32x2_t *)v67.i8);
        v50 = (__n128)vextq_s8(v67, v67, 8uLL);
        v50.n128_f64[0] = sqrtf(vadd_f32(v68, (float32x2_t)v50.n128_u64[0]).f32[0]);
        if (v50.n128_f64[0] <= 0.001)
          goto LABEL_44;
        v51 = &v124;
      }
      else
      {
        v125 = (btVector3)vmulq_n_f32((float32x4_t)v43, 1.0 / v45);
        applyAnisotropicFriction((float32x4_t *)v121, (float32x4_t *)&v125, 2);
        applyAnisotropicFriction((float32x4_t *)v120, (float32x4_t *)&v125, 2);
        v48 = (int8x16_t)vmulq_f32((float32x4_t)v125, (float32x4_t)v125);
        v49 = vpadd_f32(*(float32x2_t *)v48.i8, *(float32x2_t *)v48.i8);
        v50 = (__n128)vextq_s8(v48, v48, 8uLL);
        v50.n128_f64[0] = sqrtf(vadd_f32(v49, (float32x2_t)v50.n128_u64[0]).f32[0]);
        if (v50.n128_f64[0] <= 0.001)
        {
LABEL_44:
          v122 = 0;
          goto LABEL_45;
        }
        v51 = &v125;
      }
      btSequentialImpulseConstraintSolver::addRollingFrictionConstraint((btSequentialImpulseConstraintSolver *)a1, (int8x16_t *)v51, inited, v9, v22, v35, v46, v47, v50, 0.0, 0.0, v109, v111);
      goto LABEL_44;
    }
  }
}

float32x2_t applyAnisotropicFriction(float32x4_t *a1, float32x4_t *a2, int a3)
{
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  float32x2_t result;

  if (a1)
  {
    if ((a1[12].i32[0] & a3) != 0)
    {
      v3 = a1[1];
      v3.i32[3] = 0;
      v4 = a1[2];
      v4.i32[3] = 0;
      v5 = a1[3];
      v5.i32[3] = 0;
      v6 = vmulq_f32(a1[11], vaddq_f32(vaddq_f32(vmulq_n_f32(v3, COERCE_FLOAT(*a2)), vmulq_lane_f32(v4, *(float32x2_t *)a2->f32, 1)), vmulq_laneq_f32(v5, *a2, 2)));
      v7 = (int8x16_t)vmulq_f32(v6, a1[1]);
      v8 = (int8x16_t)vmulq_f32(v6, a1[2]);
      v9 = (int8x16_t)vmulq_f32(v6, a1[3]);
      v9.i32[3] = 0;
      *(float32x2_t *)v7.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v7.i8, *(float32x2_t *)v8.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL)));
      result = vpadd_f32(vpadd_f32(*(float32x2_t *)v9.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL)), 0);
      v7.u64[1] = (unint64_t)result;
      *a2 = (float32x4_t)v7;
    }
  }
  return result;
}

float btSequentialImpulseConstraintSolver::solveGroupCacheFriendlySetup(btSequentialImpulseConstraintSolver *this, btCollisionObject **a2, int a3, uint64_t *a4, int a5, _DWORD **a6, int a7, uint64_t a8)
{
  btCollisionObject **v12;
  uint64_t v14;
  uint64_t v15;
  btCollisionObject **v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void **v25;
  uint64_t v26;
  void **v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void **v39;
  uint64_t v40;
  int inited;
  float32x4_t v42;
  btCollisionObject *v43;
  float v45;
  int v46;
  uint64_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t *v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  uint64_t v57;
  _DWORD **v58;
  _DWORD *v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void **v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  _DWORD *v68;
  _OWORD *v69;
  int *v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _OWORD *v76;
  _OWORD *v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  void **v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  int *v85;
  int v86;
  uint64_t v87;
  _DWORD *v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  int v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  _DWORD *v96;
  _OWORD *v97;
  _OWORD *v98;
  __int32 v99;
  uint64_t v100;
  float32x4_t *v101;
  uint64_t v102;
  float v103;
  float v104;
  float32x4_t *v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  int8x16_t v109;
  int8x16_t v110;
  float32x4_t *v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  int8x16_t v115;
  int8x16_t v116;
  float32x4_t v117;
  float32x4_t v118;
  int8x16_t v119;
  int8x16_t v120;
  float32x4_t v121;
  float32x4_t v122;
  int8x16_t v123;
  int8x16_t v124;
  int8x16_t v125;
  int8x16_t v126;
  int8x16_t v127;
  int8x16_t v128;
  float v129;
  int8x16_t v130;
  int8x16_t v133;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  void **v146;
  _DWORD *v147;
  int *v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  void **v155;
  _DWORD *v156;
  int *v157;
  int v158;
  void **v159;
  _DWORD *v160;
  int *v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  void **v165;
  _DWORD *v166;
  int *v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v178;
  uint64_t v179;
  float32x4_t v180;
  float32x4_t *v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  int v189;
  __int32 v190;

  v12 = a2;
  *((_DWORD *)this + 74) = 0;
  v14 = a3;
  if (a3 >= 1)
  {
    v15 = a3;
    v16 = a2;
    do
    {
      v17 = (uint64_t)*v16++;
      *(_DWORD *)(v17 + 240) = -1;
      --v15;
    }
    while (v15);
  }
  v18 = *((_DWORD *)this + 4);
  if (v18 <= a3)
  {
    v18 = a3 + 1;
    if (a3 == -1)
      v19 = 0;
    else
      v19 = btAlignedAllocInternal(224 * v18, 16);
    v20 = *((unsigned int *)this + 3);
    if ((int)v20 >= 1)
    {
      v21 = 0;
      v22 = 224 * v20;
      do
      {
        v23 = *((_QWORD *)this + 3) + v21;
        v24 = v19 + v21;
        *(_OWORD *)v24 = *(_OWORD *)v23;
        *(_OWORD *)(v24 + 16) = *(_OWORD *)(v23 + 16);
        *(_OWORD *)(v24 + 32) = *(_OWORD *)(v23 + 32);
        *(_OWORD *)(v24 + 48) = *(_OWORD *)(v23 + 48);
        *(_OWORD *)(v24 + 64) = *(_OWORD *)(v23 + 64);
        *(_OWORD *)(v24 + 80) = *(_OWORD *)(v23 + 80);
        *(_OWORD *)(v24 + 96) = *(_OWORD *)(v23 + 96);
        *(_OWORD *)(v24 + 112) = *(_OWORD *)(v23 + 112);
        *(_OWORD *)(v24 + 128) = *(_OWORD *)(v23 + 128);
        *(_OWORD *)(v24 + 144) = *(_OWORD *)(v23 + 144);
        *(_OWORD *)(v24 + 160) = *(_OWORD *)(v23 + 160);
        *(_OWORD *)(v24 + 176) = *(_OWORD *)(v23 + 176);
        *(_OWORD *)(v24 + 192) = *(_OWORD *)(v23 + 192);
        *(_QWORD *)(v24 + 208) = *(_QWORD *)(v23 + 208);
        v21 += 224;
      }
      while (v22 != v21);
    }
    v25 = (void **)*((_QWORD *)this + 3);
    if (v25 && *((_BYTE *)this + 32))
      btAlignedFreeInternal(v25);
    *((_BYTE *)this + 32) = 1;
    *((_QWORD *)this + 3) = v19;
    *((_DWORD *)this + 4) = v18;
  }
  v26 = *((int *)this + 3);
  if ((v26 & 0x80000000) != 0)
  {
    if (v18 < 0)
    {
      v27 = (void **)*((_QWORD *)this + 3);
      if (v27 && *((_BYTE *)this + 32))
        btAlignedFreeInternal(v27);
      *((_BYTE *)this + 32) = 1;
      *((_QWORD *)this + 3) = 0;
      *((_DWORD *)this + 4) = 0;
    }
    v28 = 224 * v26;
    v29 = v26 + 1;
    do
    {
      v30 = *((_QWORD *)this + 3) + v28;
      *(_QWORD *)(v30 + 208) = 0;
      *(_OWORD *)(v30 + 176) = 0uLL;
      *(_OWORD *)(v30 + 192) = 0uLL;
      *(_OWORD *)(v30 + 144) = 0uLL;
      *(_OWORD *)(v30 + 160) = 0uLL;
      *(_OWORD *)(v30 + 112) = 0uLL;
      *(_OWORD *)(v30 + 128) = 0uLL;
      *(_OWORD *)(v30 + 80) = 0uLL;
      *(_OWORD *)(v30 + 96) = 0uLL;
      *(_OWORD *)(v30 + 48) = 0uLL;
      *(_OWORD *)(v30 + 64) = 0uLL;
      *(_OWORD *)(v30 + 16) = 0uLL;
      *(_OWORD *)(v30 + 32) = 0uLL;
      v28 += 224;
      *(_OWORD *)v30 = 0uLL;
      LODWORD(v30) = v29++;
    }
    while ((_DWORD)v30);
    v18 = *((_DWORD *)this + 4);
  }
  *((_DWORD *)this + 3) = 0;
  if (v18)
  {
    v31 = 0;
    v32 = *((_QWORD *)this + 3);
  }
  else
  {
    v33 = btAlignedAllocInternal(224, 16);
    v32 = v33;
    v34 = *((unsigned int *)this + 3);
    if ((int)v34 >= 1)
    {
      v35 = 0;
      v36 = 224 * v34;
      do
      {
        v37 = *((_QWORD *)this + 3) + v35;
        v38 = v33 + v35;
        *(_OWORD *)v38 = *(_OWORD *)v37;
        *(_OWORD *)(v38 + 16) = *(_OWORD *)(v37 + 16);
        *(_OWORD *)(v38 + 32) = *(_OWORD *)(v37 + 32);
        *(_OWORD *)(v38 + 48) = *(_OWORD *)(v37 + 48);
        *(_OWORD *)(v38 + 64) = *(_OWORD *)(v37 + 64);
        *(_OWORD *)(v38 + 80) = *(_OWORD *)(v37 + 80);
        *(_OWORD *)(v38 + 96) = *(_OWORD *)(v37 + 96);
        *(_OWORD *)(v38 + 112) = *(_OWORD *)(v37 + 112);
        *(_OWORD *)(v38 + 128) = *(_OWORD *)(v37 + 128);
        *(_OWORD *)(v38 + 144) = *(_OWORD *)(v37 + 144);
        *(_OWORD *)(v38 + 160) = *(_OWORD *)(v37 + 160);
        *(_OWORD *)(v38 + 176) = *(_OWORD *)(v37 + 176);
        *(_OWORD *)(v38 + 192) = *(_OWORD *)(v37 + 192);
        *(_QWORD *)(v38 + 208) = *(_QWORD *)(v37 + 208);
        v35 += 224;
      }
      while (v36 != v35);
    }
    v39 = (void **)*((_QWORD *)this + 3);
    if (v39 && *((_BYTE *)this + 32))
      btAlignedFreeInternal(v39);
    *((_BYTE *)this + 32) = 1;
    *((_QWORD *)this + 3) = v32;
    *((_DWORD *)this + 4) = 1;
    v31 = *((_DWORD *)this + 3);
  }
  *((_DWORD *)this + 3) = v31 + 1;
  *(_QWORD *)(v32 + 208) = 0;
  *(_OWORD *)(v32 + 176) = 0u;
  *(_OWORD *)(v32 + 192) = 0u;
  *(_OWORD *)(v32 + 144) = 0u;
  *(_OWORD *)(v32 + 160) = 0u;
  *(_OWORD *)(v32 + 112) = 0u;
  *(_OWORD *)(v32 + 128) = 0u;
  *(_OWORD *)(v32 + 80) = 0u;
  *(_OWORD *)(v32 + 96) = 0u;
  *(_OWORD *)(v32 + 48) = 0u;
  *(_OWORD *)(v32 + 64) = 0u;
  *(_OWORD *)(v32 + 16) = 0u;
  *(_OWORD *)(v32 + 32) = 0u;
  *(_OWORD *)v32 = 0u;
  v40 = *((_QWORD *)this + 3);
  *(_OWORD *)(v40 + 64) = 0u;
  *(_OWORD *)(v40 + 80) = 0u;
  *(_OWORD *)(v40 + 144) = 0u;
  *(_OWORD *)(v40 + 160) = 0u;
  *(_OWORD *)v40 = xmmword_1DD007970;
  *(_OWORD *)(v40 + 16) = xmmword_1DD007920;
  *(_OWORD *)(v40 + 32) = xmmword_1DD007600;
  *(_QWORD *)(v40 + 48) = 0;
  *(_QWORD *)(v40 + 56) = 0;
  *(_QWORD *)(v40 + 128) = 0;
  *(_QWORD *)(v40 + 136) = 0;
  *(_QWORD *)(v40 + 208) = 0;
  *(_OWORD *)(v40 + 96) = xmmword_1DD008470;
  *(_OWORD *)(v40 + 112) = xmmword_1DD008470;
  *(_OWORD *)(v40 + 176) = 0u;
  *(_OWORD *)(v40 + 192) = 0u;
  if (a3 >= 1)
  {
    do
    {
      inited = btSequentialImpulseConstraintSolver::getOrInitSolverBody(this, *v12);
      v43 = *v12;
      if (*v12)
        _ZF = (*((_DWORD *)*v12 + 66) & 2) == 0;
      else
        _ZF = 1;
      if (!_ZF)
      {
        v45 = *((float *)v43 + 96);
        if (v45 != 0.0)
        {
          v46 = inited;
          v47 = *((_QWORD *)this + 3);
          v48 = 0uLL;
          if ((*((_BYTE *)v43 + 576) & 2) != 0)
          {
            btRigidBody::computeGyroscopicForce((btRigidBody *)*v12, *(float *)(a8 + 76), &v180, v42);
            v48 = v180;
            v45 = *((float *)v43 + 96);
          }
          v49 = vmulq_n_f32(vmulq_n_f32(*((float32x4_t *)v43 + 29), v45), COERCE_FLOAT(*(_OWORD *)(a8 + 12)));
          v49.i32[3] = 0;
          v50 = (float32x4_t *)(v47 + 224 * v46);
          v51 = v50[12];
          v50[11] = vaddq_f32(v50[11], v49);
          v52 = vsubq_f32(*((float32x4_t *)v43 + 30), v48);
          v52.i32[3] = 0;
          v53 = *((float32x4_t *)v43 + 19);
          v54 = *((float32x4_t *)v43 + 20);
          v53.i32[3] = 0;
          v54.i32[3] = 0;
          v55 = *((float32x4_t *)v43 + 21);
          v55.i32[3] = 0;
          v56 = vmulq_n_f32(vaddq_f32(vmulq_laneq_f32(v55, v52, 2), vaddq_f32(vmulq_n_f32(v53, v52.f32[0]), vmulq_lane_f32(v54, *(float32x2_t *)v52.f32, 1))), COERCE_FLOAT(*(_OWORD *)(a8 + 12)));
          v56.i32[3] = 0;
          v50[12] = vaddq_f32(v51, v56);
        }
      }
      ++v12;
      --v14;
    }
    while (v14);
  }
  v178 = a7;
  if (a7 >= 1)
  {
    v57 = a7;
    v58 = a6;
    do
    {
      v59 = *v58++;
      (*(void (**)(_DWORD *))(*(_QWORD *)v59 + 16))(v59);
      v59[14] = 0;
      --v57;
    }
    while (v57);
  }
  v60 = *((_DWORD *)this + 67);
  if (v60 < a7 && *((_DWORD *)this + 68) < a7)
  {
    if (a7)
    {
      v61 = btAlignedAllocInternal(8 * a7, 16);
      v60 = *((_DWORD *)this + 67);
    }
    else
    {
      v61 = 0;
    }
    if (v60 >= 1)
    {
      v62 = 0;
      v63 = 8 * v60;
      do
      {
        *(_QWORD *)(v61 + v62) = *(_QWORD *)(*((_QWORD *)this + 35) + v62);
        v62 += 8;
      }
      while (v63 != v62);
    }
    v64 = (void **)*((_QWORD *)this + 35);
    if (v64 && *((_BYTE *)this + 288))
      btAlignedFreeInternal(v64);
    *((_BYTE *)this + 288) = 1;
    *((_QWORD *)this + 35) = v61;
    *((_DWORD *)this + 68) = a7;
  }
  v179 = a8;
  *((_DWORD *)this + 67) = a7;
  if (a7 < 1)
  {
    v66 = 0;
  }
  else
  {
    v65 = 0;
    v66 = 0;
    do
    {
      v67 = *((_QWORD *)this + 35);
      v68 = a6[v65];
      v69 = (_OWORD *)*((_QWORD *)v68 + 8);
      if (v69)
      {
        v69[2] = 0u;
        v69[3] = 0u;
        *v69 = 0u;
        v69[1] = 0u;
        v68 = a6[v65];
      }
      v70 = (int *)(v67 + v65 * 8);
      v71 = *((unsigned __int8 *)v68 + 28);
      if (*((_BYTE *)v68 + 28))
      {
        (*(void (**)(_DWORD *, int *))(*(_QWORD *)v68 + 32))(v68, v70);
        v71 = *v70;
      }
      else
      {
        *(_QWORD *)v70 = 0;
      }
      v66 += v71;
      ++v65;
    }
    while (a7 != v65);
  }
  v72 = *((_DWORD *)this + 19);
  if (v72 < v66 && *((_DWORD *)this + 20) < v66)
  {
    if (v66)
    {
      v73 = btAlignedAllocInternal(160 * v66, 16);
      v72 = *((_DWORD *)this + 19);
    }
    else
    {
      v73 = 0;
    }
    if (v72 >= 1)
    {
      v74 = 0;
      v75 = 160 * v72;
      do
      {
        v76 = (_OWORD *)(v73 + v74);
        v77 = (_OWORD *)(*((_QWORD *)this + 11) + v74);
        *v76 = *v77;
        v76[1] = v77[1];
        v76[2] = v77[2];
        v76[3] = v77[3];
        v76[4] = v77[4];
        v76[5] = v77[5];
        v78 = v77[6];
        v79 = v77[7];
        v80 = v77[9];
        v76[8] = v77[8];
        v76[9] = v80;
        v76[6] = v78;
        v76[7] = v79;
        v74 += 160;
      }
      while (v75 != v74);
    }
    v81 = (void **)*((_QWORD *)this + 11);
    if (v81 && *((_BYTE *)this + 96))
      btAlignedFreeInternal(v81);
    *((_BYTE *)this + 96) = 1;
    *((_QWORD *)this + 11) = v73;
    *((_DWORD *)this + 20) = v66;
  }
  *((_DWORD *)this + 19) = v66;
  if (a7 >= 1)
  {
    v82 = 0;
    v83 = 0;
    v84 = *((_QWORD *)this + 35);
    do
    {
      v85 = (int *)(v84 + 8 * v82);
      v86 = *v85;
      if (*v85)
      {
        v87 = *((_QWORD *)this + 11);
        v88 = a6[v82];
        v89 = *((_QWORD *)v88 + 5);
        v90 = *((_QWORD *)v88 + 6);
        v91 = btSequentialImpulseConstraintSolver::getOrInitSolverBody(this, (btCollisionObject *)v89);
        v92 = btSequentialImpulseConstraintSolver::getOrInitSolverBody(this, (btCollisionObject *)v90);
        v93 = *(_DWORD *)(v179 + 20);
        if ((int)v88[8] > 0)
          v93 = v88[8];
        if (v93 > *((_DWORD *)this + 74))
          *((_DWORD *)this + 74) = v93;
        v94 = *((_QWORD *)this + 3);
        if (*v85 >= 1)
        {
          v95 = 0;
          v96 = (_DWORD *)(v87 + 160 * v83 + 156);
          do
          {
            *(_OWORD *)(v96 - 11) = 0uLL;
            *(_OWORD *)(v96 - 15) = 0uLL;
            *(_OWORD *)(v96 - 3) = 0uLL;
            *(_OWORD *)(v96 - 7) = 0uLL;
            *(_OWORD *)(v96 - 19) = 0uLL;
            *(_OWORD *)(v96 - 23) = 0uLL;
            *(_OWORD *)(v96 - 27) = 0uLL;
            *(_OWORD *)(v96 - 31) = 0uLL;
            *(_OWORD *)(v96 - 35) = 0uLL;
            *(_OWORD *)(v96 - 39) = 0uLL;
            *(_QWORD *)(v96 - 9) = 0x7F7FFFFFFF7FFFFFLL;
            *(_QWORD *)(v96 - 15) = 0;
            *(v96 - 1) = v91;
            *v96 = v92;
            *(v96 - 3) = v93;
            ++v95;
            v96 += 40;
          }
          while (v95 < *v85);
        }
        v97 = (_OWORD *)(v94 + 224 * v91);
        v98 = (_OWORD *)(v94 + 224 * v92);
        v97[4] = 0uLL;
        v97[5] = 0uLL;
        v97[9] = 0uLL;
        v97[10] = 0uLL;
        v98[4] = 0uLL;
        v98[5] = 0uLL;
        v98[9] = 0uLL;
        v98[10] = 0uLL;
        v99 = *(_DWORD *)(v179 + 32);
        v180.f32[0] = 1.0 / *(float *)(v179 + 12);
        v180.i32[1] = v99;
        v100 = v87 + 160 * v83;
        *(_DWORD *)(v100 + 116) = *(_DWORD *)(v179 + 40);
        v100 += 116;
        v101 = (float32x4_t *)(v87 + 160 * v83);
        v180.i64[1] = v100 - 100;
        v181 = v101;
        v182 = v100 - 68;
        v183 = v100 - 84;
        v184 = 40;
        v190 = *(_DWORD *)(v179 + 4);
        v185 = v100 - 4;
        v186 = v100;
        v187 = v100 + 4;
        v188 = v100 + 8;
        v189 = *(_DWORD *)(v179 + 20);
        (*(void (**)(_DWORD *, float32x4_t *))(*(_QWORD *)a6[v82] + 40))(a6[v82], &v180);
        if (*v85 >= 1)
        {
          v102 = 0;
          do
          {
            v103 = *((float *)a6[v82] + 6);
            if (v101[7].f32[3] >= v103)
              v101[7].f32[3] = v103;
            v104 = -v103;
            if (v101[7].f32[2] <= v104)
              v101[7].f32[2] = v104;
            v101[8].i64[1] = (uint64_t)v88;
            v105 = (float32x4_t *)*((_QWORD *)v88 + 5);
            v106 = *v101;
            v107 = v101[1];
            v108 = vmulq_f32(v105[19], *v101);
            v109 = (int8x16_t)vmulq_f32(*v101, v105[20]);
            v110 = (int8x16_t)vmulq_f32(*v101, v105[21]);
            v110.i32[3] = 0;
            *(float32x2_t *)v108.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v108.f32, *(float32x2_t *)v109.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v108, (int8x16_t)v108, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v109, v109, 8uLL)));
            *(float32x2_t *)&v108.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v110.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v110, v110, 8uLL)), 0);
            v101[4] = vmulq_f32(v108, v105[39]);
            v111 = (float32x4_t *)*((_QWORD *)v88 + 6);
            v112 = v101[2];
            v113 = v101[3];
            v114 = vmulq_f32(v111[19], v112);
            v115 = (int8x16_t)vmulq_f32(v112, v111[20]);
            v116 = (int8x16_t)vmulq_f32(v112, v111[21]);
            v116.i32[3] = 0;
            *(float32x2_t *)v114.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v114.f32, *(float32x2_t *)v115.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v114, (int8x16_t)v114, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v115, v115, 8uLL)));
            *(float32x2_t *)&v114.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v116.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v116, v116, 8uLL)), 0);
            v101[5] = vmulq_f32(v114, v111[39]);
            v117 = vmulq_n_f32(v107, *(float *)(v89 + 384));
            v117.i32[3] = 0;
            v118 = vmulq_f32(v106, *(float32x4_t *)(v89 + 304));
            v119 = (int8x16_t)vmulq_f32(v106, *(float32x4_t *)(v89 + 320));
            v120 = (int8x16_t)vmulq_f32(v106, *(float32x4_t *)(v89 + 336));
            v120.i32[3] = 0;
            *(float32x2_t *)v118.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v118.f32, *(float32x2_t *)v119.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v118, (int8x16_t)v118, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v119, v119, 8uLL)));
            *(float32x2_t *)&v118.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v120.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v120, v120, 8uLL)), 0);
            v121 = vmulq_n_f32(v113, *(float *)(v90 + 384));
            v121.i32[3] = 0;
            v122 = vmulq_f32(v112, *(float32x4_t *)(v90 + 304));
            v123 = (int8x16_t)vmulq_f32(v112, *(float32x4_t *)(v90 + 320));
            v124 = (int8x16_t)vmulq_f32(v112, *(float32x4_t *)(v90 + 336));
            v124.i32[3] = 0;
            *(float32x2_t *)v122.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v122.f32, *(float32x2_t *)v123.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v122, (int8x16_t)v122, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v123, v123, 8uLL)));
            *(float32x2_t *)&v122.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v124.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v124, v124, 8uLL)), 0);
            v125 = (int8x16_t)vmulq_f32(v107, v117);
            v126 = (int8x16_t)vmulq_f32(v106, v118);
            *(float32x2_t *)v125.i8 = vadd_f32(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v125, v125, 8uLL), vpadd_f32(*(float32x2_t *)v125.i8, *(float32x2_t *)v125.i8)), vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v126, v126, 8uLL), vpadd_f32(*(float32x2_t *)v126.i8, *(float32x2_t *)v126.i8)));
            v127 = (int8x16_t)vmulq_f32(v113, v121);
            *(float32x2_t *)v125.i8 = vadd_f32(*(float32x2_t *)v125.i8, vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v127, v127, 8uLL), vpadd_f32(*(float32x2_t *)v127.i8, *(float32x2_t *)v127.i8)));
            v128 = (int8x16_t)vmulq_f32(v112, v122);
            *(float *)v125.i32 = vadd_f32(*(float32x2_t *)v125.i8, vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v128, v128, 8uLL), vpadd_f32(*(float32x2_t *)v128.i8, *(float32x2_t *)v128.i8))).f32[0];
            *(float *)v128.i32 = fabsf(*(float *)v125.i32);
            v129 = 1.0 / *(float *)v125.i32;
            if (*(float *)v128.i32 <= 0.00000011921)
              v129 = 0.0;
            v101[6].f32[3] = v129;
            v130 = (int8x16_t)vmulq_f32(v107, *(float32x4_t *)(v89 + 352));
            _Q0 = (int8x16_t)vmulq_f32(v106, *(float32x4_t *)(v89 + 368));
            *(float32x2_t *)_Q0.i8 = vadd_f32(vadd_f32(vpadd_f32(*(float32x2_t *)v130.i8, *(float32x2_t *)v130.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v130, v130, 8uLL)), vadd_f32(vpadd_f32(*(float32x2_t *)_Q0.i8, *(float32x2_t *)_Q0.i8), (float32x2_t)*(_OWORD *)&vextq_s8(_Q0, _Q0, 8uLL)));
            _Q2 = (int8x16_t)vmulq_f32(v113, *(float32x4_t *)(v90 + 352));
            v133 = (int8x16_t)vmulq_f32(v112, *(float32x4_t *)(v90 + 368));
            _Q0.i32[0] = vadd_f32(*(float32x2_t *)_Q0.i8, vadd_f32(vadd_f32(vpadd_f32(*(float32x2_t *)_Q2.i8, *(float32x2_t *)_Q2.i8), (float32x2_t)*(_OWORD *)&vextq_s8(_Q2, _Q2, 8uLL)), vadd_f32(vpadd_f32(*(float32x2_t *)v133.i8, *(float32x2_t *)v133.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v133, v133, 8uLL)))).u32[0];
            _Q2.i32[0] = v190;
            __asm { FMLS            S3, S2, V0.S[0] }
            v101[7].f32[0] = (float)(v129 * v101[7].f32[0]) + (float)(v129 * _S3);
            v101[6].i32[1] = 0;
            ++v102;
            v101 += 10;
          }
          while (v102 < *v85);
        }
        v84 = *((_QWORD *)this + 35);
        v86 = *(_DWORD *)(v84 + 8 * v82);
      }
      v83 += v86;
      ++v82;
    }
    while (v82 != v178);
  }
  v138 = a4;
  if (a5 >= 1)
  {
    v139 = a5;
    do
    {
      v140 = *v138++;
      btSequentialImpulseConstraintSolver::convertContact((uint64_t)this, v140, v179);
      --v139;
    }
    while (v139);
  }
  v141 = *((unsigned int *)this + 19);
  v142 = *((unsigned int *)this + 11);
  v143 = *((unsigned int *)this + 27);
  LODWORD(v144) = *((_DWORD *)this + 51);
  if ((int)v144 < (int)v141 && *((_DWORD *)this + 52) < (int)v141)
  {
    if ((_DWORD)v141)
    {
      v145 = btAlignedAllocInternal(4 * (int)v141, 16);
      LODWORD(v144) = *((_DWORD *)this + 51);
    }
    else
    {
      v145 = 0;
    }
    v146 = (void **)*((_QWORD *)this + 27);
    if ((int)v144 < 1)
    {
      if (!v146)
      {
LABEL_117:
        *((_BYTE *)this + 224) = 1;
        *((_QWORD *)this + 27) = v145;
        *((_DWORD *)this + 52) = v141;
        goto LABEL_118;
      }
    }
    else
    {
      v144 = v144;
      v147 = (_DWORD *)v145;
      v148 = (int *)*((_QWORD *)this + 27);
      do
      {
        v149 = *v148++;
        *v147++ = v149;
        --v144;
      }
      while (v144);
    }
    if (*((_BYTE *)this + 224))
      btAlignedFreeInternal(v146);
    *((_QWORD *)this + 27) = 0;
    goto LABEL_117;
  }
LABEL_118:
  *((_DWORD *)this + 51) = v141;
  if ((*(_BYTE *)(v179 + 64) & 0x10) != 0)
  {
    v152 = 2 * v142;
    LODWORD(v153) = *((_DWORD *)this + 43);
    if ((int)v153 >= 2 * (int)v142 || *((_DWORD *)this + 44) >= v152)
      goto LABEL_148;
    if ((_DWORD)v142)
    {
      v154 = btAlignedAllocInternal(8 * (int)v142, 16);
      LODWORD(v153) = *((_DWORD *)this + 43);
    }
    else
    {
      v154 = 0;
    }
    v159 = (void **)*((_QWORD *)this + 23);
    if ((int)v153 < 1)
    {
      if (!v159)
      {
LABEL_147:
        *((_BYTE *)this + 192) = 1;
        *((_QWORD *)this + 23) = v154;
        *((_DWORD *)this + 44) = v152;
LABEL_148:
        *((_DWORD *)this + 43) = v152;
        goto LABEL_149;
      }
    }
    else
    {
      v153 = v153;
      v160 = (_DWORD *)v154;
      v161 = (int *)*((_QWORD *)this + 23);
      do
      {
        v162 = *v161++;
        *v160++ = v162;
        --v153;
      }
      while (v153);
    }
    if (*((_BYTE *)this + 192))
      btAlignedFreeInternal(v159);
    *((_QWORD *)this + 23) = 0;
    goto LABEL_147;
  }
  LODWORD(v150) = *((_DWORD *)this + 43);
  if ((int)v150 >= (int)v142 || *((_DWORD *)this + 44) >= (int)v142)
    goto LABEL_142;
  if ((_DWORD)v142)
  {
    v151 = btAlignedAllocInternal(4 * (int)v142, 16);
    LODWORD(v150) = *((_DWORD *)this + 43);
  }
  else
  {
    v151 = 0;
  }
  v155 = (void **)*((_QWORD *)this + 23);
  if ((int)v150 >= 1)
  {
    v150 = v150;
    v156 = (_DWORD *)v151;
    v157 = (int *)*((_QWORD *)this + 23);
    do
    {
      v158 = *v157++;
      *v156++ = v158;
      --v150;
    }
    while (v150);
    goto LABEL_138;
  }
  if (v155)
  {
LABEL_138:
    if (*((_BYTE *)this + 192))
      btAlignedFreeInternal(v155);
    *((_QWORD *)this + 23) = 0;
  }
  *((_BYTE *)this + 192) = 1;
  *((_QWORD *)this + 23) = v151;
  *((_DWORD *)this + 44) = v142;
LABEL_142:
  *((_DWORD *)this + 43) = v142;
LABEL_149:
  LODWORD(v163) = *((_DWORD *)this + 59);
  if ((int)v163 < (int)v143 && *((_DWORD *)this + 60) < (int)v143)
  {
    if ((_DWORD)v143)
    {
      v164 = btAlignedAllocInternal(4 * (int)v143, 16);
      LODWORD(v163) = *((_DWORD *)this + 59);
    }
    else
    {
      v164 = 0;
    }
    v165 = (void **)*((_QWORD *)this + 31);
    if ((int)v163 < 1)
    {
      if (!v165)
      {
LABEL_162:
        *((_BYTE *)this + 256) = 1;
        *((_QWORD *)this + 31) = v164;
        *((_DWORD *)this + 60) = v143;
        goto LABEL_163;
      }
    }
    else
    {
      v163 = v163;
      v166 = (_DWORD *)v164;
      v167 = (int *)*((_QWORD *)this + 31);
      do
      {
        v168 = *v167++;
        *v166++ = v168;
        --v163;
      }
      while (v163);
    }
    if (*((_BYTE *)this + 256))
      btAlignedFreeInternal(v165);
    *((_QWORD *)this + 31) = 0;
    goto LABEL_162;
  }
LABEL_163:
  *((_DWORD *)this + 59) = v143;
  if ((int)v141 >= 1)
  {
    v169 = 0;
    v170 = *((_QWORD *)this + 27);
    do
    {
      *(_DWORD *)(v170 + 4 * v169) = v169;
      ++v169;
    }
    while (v141 != v169);
  }
  if ((int)v142 >= 1)
  {
    v171 = 0;
    v172 = *((_QWORD *)this + 23);
    do
    {
      *(_DWORD *)(v172 + 4 * v171) = v171;
      ++v171;
    }
    while (v142 != v171);
  }
  if ((int)v143 >= 1)
  {
    v173 = 0;
    v174 = *((_QWORD *)this + 31);
    do
    {
      *(_DWORD *)(v174 + 4 * v173) = v173;
      ++v173;
    }
    while (v143 != v173);
  }
  return 0.0;
}

float btSequentialImpulseConstraintSolver::solveSingleIteration(btSequentialImpulseConstraintSolver *this, int a2, int a3, int a4, int a5, int a6, _QWORD *a7, int a8, uint64_t a9)
{
  int v9;
  btSequentialImpulseConstraintSolver *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t j;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float32x4_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  float v41;
  float32x4_t *v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  float32x4_t *v47;
  float v48;
  float v49;
  float v50;
  uint64_t i;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int inited;
  int v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  float32x4_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  float v67;
  float32x4_t *v68;
  float v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  float32x4_t *v73;
  float v74;
  float v75;
  float v76;
  uint64_t v77;
  int v78;
  float32x4_t *v79;
  float v80;
  float32x4_t *v81;
  float v82;
  float32x4_t *v83;
  float v84;

  v9 = a8;
  v12 = this;
  if ((*(_BYTE *)(a9 + 64) & 1) != 0)
  {
    v13 = *((unsigned int *)this + 19);
    v14 = *((unsigned int *)this + 11);
    v15 = *((unsigned int *)this + 27);
    if ((int)v13 >= 1)
    {
      v16 = 0;
      v17 = *((_QWORD *)this + 27);
      do
      {
        v18 = *(_DWORD *)(v17 + 4 * v16);
        this = (btSequentialImpulseConstraintSolver *)btSequentialImpulseConstraintSolver::btRandInt2(v12, (int)v16 + 1);
        v17 = *((_QWORD *)v12 + 27);
        *(_DWORD *)(v17 + 4 * v16) = *(_DWORD *)(v17 + 4 * (int)this);
        *(_DWORD *)(v17 + 4 * (int)this) = v18;
        ++v16;
      }
      while (v13 != v16);
    }
    v9 = a8;
    if (*(_DWORD *)(a9 + 20) > a2)
    {
      if ((int)v14 >= 1)
      {
        v19 = 0;
        v20 = *((_QWORD *)v12 + 23);
        do
        {
          v21 = *(_DWORD *)(v20 + 4 * v19);
          this = (btSequentialImpulseConstraintSolver *)btSequentialImpulseConstraintSolver::btRandInt2(v12, (int)v19 + 1);
          v20 = *((_QWORD *)v12 + 23);
          *(_DWORD *)(v20 + 4 * v19) = *(_DWORD *)(v20 + 4 * (int)this);
          *(_DWORD *)(v20 + 4 * (int)this) = v21;
          ++v19;
        }
        while (v14 != v19);
      }
      if ((int)v15 >= 1)
      {
        v22 = 0;
        v23 = *((_QWORD *)v12 + 31);
        do
        {
          v24 = *(_DWORD *)(v23 + 4 * v22);
          this = (btSequentialImpulseConstraintSolver *)btSequentialImpulseConstraintSolver::btRandInt2(v12, (int)v22 + 1);
          v23 = *((_QWORD *)v12 + 31);
          *(_DWORD *)(v23 + 4 * v22) = *(_DWORD *)(v23 + 4 * (int)this);
          *(_DWORD *)(v23 + 4 * (int)this) = v24;
          ++v22;
        }
        while (v15 != v22);
      }
    }
  }
  v25 = *((_DWORD *)v12 + 19);
  if ((*(_BYTE *)(a9 + 65) & 1) != 0)
  {
    if (v25 >= 1)
    {
      for (i = 0; i < v25; ++i)
      {
        v52 = *(_DWORD *)(*((_QWORD *)v12 + 27) + 4 * i);
        v53 = *((_QWORD *)v12 + 11);
        if (*(_DWORD *)(v53 + 160 * v52 + 144) > a2)
        {
          btSequentialImpulseConstraintSolver::resolveSingleConstraintRowGeneric((uint64_t)this, (float32x4_t *)(*((_QWORD *)v12 + 3) + 224 * *(int *)(v53 + 160 * v52 + 152)), (float32x4_t *)(*((_QWORD *)v12 + 3) + 224 * *(int *)(v53 + 160 * v52 + 156)), (float32x4_t *)(v53 + 160 * v52));
          v25 = *((_DWORD *)v12 + 19);
        }
      }
    }
    if (*(_DWORD *)(a9 + 20) > a2)
    {
      if (v9 >= 1)
      {
        v54 = v9;
        do
        {
          if (*(_BYTE *)(*a7 + 28))
          {
            inited = btSequentialImpulseConstraintSolver::getOrInitSolverBody(v12, *(btCollisionObject **)(*a7 + 40));
            v56 = btSequentialImpulseConstraintSolver::getOrInitSolverBody(v12, *(btCollisionObject **)(*a7 + 48));
            this = (btSequentialImpulseConstraintSolver *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t, float))(*(_QWORD *)*a7 + 48))(*a7, *((_QWORD *)v12 + 3) + 224 * inited, *((_QWORD *)v12 + 3) + 224 * v56, *(float *)(a9 + 12));
          }
          ++a7;
          --v54;
        }
        while (v54);
      }
      v57 = *(_DWORD *)(a9 + 64);
      v58 = *((unsigned int *)v12 + 11);
      if ((v57 & 0x200) != 0)
      {
        if ((int)v58 >= 1)
        {
          v77 = 0;
          v78 = (v57 >> 4) & 1;
          do
          {
            v79 = (float32x4_t *)(*((_QWORD *)v12 + 7) + 160 * *(int *)(*((_QWORD *)v12 + 23) + 4 * v77));
            btSequentialImpulseConstraintSolver::resolveSingleConstraintRowLowerLimit((uint64_t)this, (float32x4_t *)(*((_QWORD *)v12 + 3) + 224 * v79[9].i32[2]), (float32x4_t *)(*((_QWORD *)v12 + 3) + 224 * v79[9].i32[3]), v79);
            v80 = v79[6].f32[1];
            if (v80 > 0.0)
            {
              v81 = (float32x4_t *)(*((_QWORD *)v12 + 15)
                                  + 160 * *(int *)(*((_QWORD *)v12 + 31) + 4 * (int)((_DWORD)v77 << v78)));
              v82 = v81[6].f32[2];
              v81[7].f32[2] = -(float)(v82 * v80);
              v81[7].f32[3] = v80 * v82;
              btSequentialImpulseConstraintSolver::resolveSingleConstraintRowGeneric((uint64_t)this, (float32x4_t *)(*((_QWORD *)v12 + 3) + 224 * v81[9].i32[2]), (float32x4_t *)(*((_QWORD *)v12 + 3) + 224 * v81[9].i32[3]), v81);
              if ((*(_BYTE *)(a9 + 64) & 0x10) != 0)
              {
                v83 = (float32x4_t *)(*((_QWORD *)v12 + 15)
                                    + 160 * *(int *)(*((_QWORD *)v12 + 31) + 4 * (int)((_DWORD)v77 << v78) + 4));
                v84 = v83[6].f32[2];
                v83[7].f32[2] = -(float)(v84 * v80);
                v83[7].f32[3] = v80 * v84;
                btSequentialImpulseConstraintSolver::resolveSingleConstraintRowGeneric((uint64_t)this, (float32x4_t *)(*((_QWORD *)v12 + 3) + 224 * v83[9].i32[2]), (float32x4_t *)(*((_QWORD *)v12 + 3) + 224 * v83[9].i32[3]), v83);
              }
            }
            ++v77;
          }
          while (v58 != v77);
        }
      }
      else
      {
        if ((int)v58 >= 1)
        {
          v59 = 0;
          v60 = 4 * v58;
          do
          {
            v61 = (float32x4_t *)(*((_QWORD *)v12 + 7) + 160 * *(int *)(*((_QWORD *)v12 + 23) + v59));
            btSequentialImpulseConstraintSolver::resolveSingleConstraintRowLowerLimit((uint64_t)this, (float32x4_t *)(*((_QWORD *)v12 + 3) + 224 * v61[9].i32[2]), (float32x4_t *)(*((_QWORD *)v12 + 3) + 224 * v61[9].i32[3]), v61);
            v59 += 4;
          }
          while (v60 != v59);
        }
        v62 = *((unsigned int *)v12 + 27);
        if ((int)v62 >= 1)
        {
          v63 = 0;
          v64 = 4 * v62;
          do
          {
            v65 = *(_DWORD *)(*((_QWORD *)v12 + 31) + v63);
            v66 = *((_QWORD *)v12 + 15);
            v67 = *(float *)(*((_QWORD *)v12 + 7) + 160 * *(int *)(v66 + 160 * v65 + 148) + 100);
            if (v67 > 0.0)
            {
              v68 = (float32x4_t *)(v66 + 160 * v65);
              v69 = v68[6].f32[2];
              v68[7].f32[2] = -(float)(v69 * v67);
              v68[7].f32[3] = v67 * v69;
              btSequentialImpulseConstraintSolver::resolveSingleConstraintRowGeneric((uint64_t)this, (float32x4_t *)(*((_QWORD *)v12 + 3) + 224 * v68[9].i32[2]), (float32x4_t *)(*((_QWORD *)v12 + 3) + 224 * v68[9].i32[3]), v68);
            }
            v63 += 4;
          }
          while (v64 != v63);
        }
        v70 = *((unsigned int *)v12 + 35);
        if ((int)v70 >= 1)
        {
          v71 = 0;
          v72 = 160 * v70;
          do
          {
            v73 = (float32x4_t *)(*((_QWORD *)v12 + 19) + v71);
            v74 = *(float *)(*((_QWORD *)v12 + 7) + 160 * v73[9].i32[1] + 100);
            if (v74 > 0.0)
            {
              v75 = v73[6].f32[2];
              v76 = v74 * v75;
              if (v76 > v75)
                v76 = v73[6].f32[2];
              v73[7].f32[2] = -v76;
              v73[7].f32[3] = v76;
              btSequentialImpulseConstraintSolver::resolveSingleConstraintRowGeneric((uint64_t)this, (float32x4_t *)(*((_QWORD *)v12 + 3) + 224 * v73[9].i32[2]), (float32x4_t *)(*((_QWORD *)v12 + 3) + 224 * v73[9].i32[3]), v73);
            }
            v71 += 160;
          }
          while (v72 != v71);
        }
      }
    }
  }
  else
  {
    if (v25 >= 1)
    {
      for (j = 0; j < v25; ++j)
      {
        v27 = *(_DWORD *)(*((_QWORD *)v12 + 27) + 4 * j);
        v28 = *((_QWORD *)v12 + 11);
        if (*(_DWORD *)(v28 + 160 * v27 + 144) > a2)
        {
          btSequentialImpulseConstraintSolver::resolveSingleConstraintRowGeneric((uint64_t)this, (float32x4_t *)(*((_QWORD *)v12 + 3) + 224 * *(int *)(v28 + 160 * v27 + 152)), (float32x4_t *)(*((_QWORD *)v12 + 3) + 224 * *(int *)(v28 + 160 * v27 + 156)), (float32x4_t *)(v28 + 160 * v27));
          v25 = *((_DWORD *)v12 + 19);
        }
      }
    }
    if (*(_DWORD *)(a9 + 20) > a2)
    {
      if (v9 >= 1)
      {
        v29 = v9;
        do
        {
          if (*(_BYTE *)(*a7 + 28))
          {
            v30 = btSequentialImpulseConstraintSolver::getOrInitSolverBody(v12, *(btCollisionObject **)(*a7 + 40));
            v31 = btSequentialImpulseConstraintSolver::getOrInitSolverBody(v12, *(btCollisionObject **)(*a7 + 48));
            this = (btSequentialImpulseConstraintSolver *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t, float))(*(_QWORD *)*a7 + 48))(*a7, *((_QWORD *)v12 + 3) + 224 * v30, *((_QWORD *)v12 + 3) + 224 * v31, *(float *)(a9 + 12));
          }
          ++a7;
          --v29;
        }
        while (v29);
      }
      v32 = *((unsigned int *)v12 + 11);
      if ((int)v32 >= 1)
      {
        v33 = 0;
        v34 = 4 * v32;
        do
        {
          v35 = (float32x4_t *)(*((_QWORD *)v12 + 7) + 160 * *(int *)(*((_QWORD *)v12 + 23) + v33));
          btSequentialImpulseConstraintSolver::resolveSingleConstraintRowLowerLimit((uint64_t)this, (float32x4_t *)(*((_QWORD *)v12 + 3) + 224 * v35[9].i32[2]), (float32x4_t *)(*((_QWORD *)v12 + 3) + 224 * v35[9].i32[3]), v35);
          v33 += 4;
        }
        while (v34 != v33);
      }
      v36 = *((unsigned int *)v12 + 27);
      if ((int)v36 >= 1)
      {
        v37 = 0;
        v38 = 4 * v36;
        do
        {
          v39 = *(_DWORD *)(*((_QWORD *)v12 + 31) + v37);
          v40 = *((_QWORD *)v12 + 15);
          v41 = *(float *)(*((_QWORD *)v12 + 7) + 160 * *(int *)(v40 + 160 * v39 + 148) + 100);
          if (v41 > 0.0)
          {
            v42 = (float32x4_t *)(v40 + 160 * v39);
            v43 = v42[6].f32[2];
            v42[7].f32[2] = -(float)(v43 * v41);
            v42[7].f32[3] = v41 * v43;
            btSequentialImpulseConstraintSolver::resolveSingleConstraintRowGeneric((uint64_t)this, (float32x4_t *)(*((_QWORD *)v12 + 3) + 224 * v42[9].i32[2]), (float32x4_t *)(*((_QWORD *)v12 + 3) + 224 * v42[9].i32[3]), v42);
          }
          v37 += 4;
        }
        while (v38 != v37);
      }
      v44 = *((unsigned int *)v12 + 35);
      if ((int)v44 >= 1)
      {
        v45 = 0;
        v46 = 160 * v44;
        do
        {
          v47 = (float32x4_t *)(*((_QWORD *)v12 + 19) + v45);
          v48 = *(float *)(*((_QWORD *)v12 + 7) + 160 * v47[9].i32[1] + 100);
          if (v48 > 0.0)
          {
            v49 = v47[6].f32[2];
            v50 = v48 * v49;
            if (v50 > v49)
              v50 = v47[6].f32[2];
            v47[7].f32[2] = -v50;
            v47[7].f32[3] = v50;
            btSequentialImpulseConstraintSolver::resolveSingleConstraintRowGeneric((uint64_t)this, (float32x4_t *)(*((_QWORD *)v12 + 3) + 224 * v47[9].i32[2]), (float32x4_t *)(*((_QWORD *)v12 + 3) + 224 * v47[9].i32[3]), v47);
          }
          v45 += 160;
        }
        while (v46 != v45);
      }
    }
  }
  return 0.0;
}

void btSequentialImpulseConstraintSolver::solveGroupCacheFriendlySplitImpulseIterations(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  int j;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float32x4_t *v15;
  int i;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float32x4_t *v20;

  if (*(_DWORD *)(a8 + 44))
  {
    v10 = *(_DWORD *)(a8 + 20);
    if ((*(_BYTE *)(a8 + 65) & 1) != 0)
    {
      if (v10 >= 1)
      {
        for (i = 0; i < v10; ++i)
        {
          v17 = *(unsigned int *)(a1 + 44);
          if ((int)v17 >= 1)
          {
            v18 = 0;
            v19 = 4 * v17;
            do
            {
              v20 = (float32x4_t *)(*(_QWORD *)(a1 + 56) + 160 * *(int *)(*(_QWORD *)(a1 + 184) + v18));
              btSequentialImpulseConstraintSolver::resolveSplitPenetrationImpulseCacheFriendly(a1, (float32x4_t *)(*(_QWORD *)(a1 + 24) + 224 * v20[9].i32[2]), (float32x4_t *)(*(_QWORD *)(a1 + 24) + 224 * v20[9].i32[3]), v20);
              v18 += 4;
            }
            while (v19 != v18);
            v10 = *(_DWORD *)(a8 + 20);
          }
        }
      }
    }
    else if (v10 >= 1)
    {
      for (j = 0; j < v10; ++j)
      {
        v12 = *(unsigned int *)(a1 + 44);
        if ((int)v12 >= 1)
        {
          v13 = 0;
          v14 = 4 * v12;
          do
          {
            v15 = (float32x4_t *)(*(_QWORD *)(a1 + 56) + 160 * *(int *)(*(_QWORD *)(a1 + 184) + v13));
            btSequentialImpulseConstraintSolver::resolveSplitPenetrationImpulseCacheFriendly(a1, (float32x4_t *)(*(_QWORD *)(a1 + 24) + 224 * v15[9].i32[2]), (float32x4_t *)(*(_QWORD *)(a1 + 24) + 224 * v15[9].i32[3]), v15);
            v13 += 4;
          }
          while (v14 != v13);
          v10 = *(_DWORD *)(a8 + 20);
        }
      }
    }
  }
}

float btSequentialImpulseConstraintSolver::solveGroupCacheFriendlyIterations(btSequentialImpulseConstraintSolver *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, int a7, uint64_t a8)
{
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int i;

  (*(void (**)(btSequentialImpulseConstraintSolver *))(*(_QWORD *)a1 + 48))(a1);
  if (*((_DWORD *)a1 + 74) <= *(_DWORD *)(a8 + 20))
    v16 = *(_DWORD *)(a8 + 20);
  else
    v16 = *((_DWORD *)a1 + 74);
  if (v16 >= 1)
  {
    for (i = 0; i != v16; ++i)
      btSequentialImpulseConstraintSolver::solveSingleIteration(a1, i, v12, v13, v14, v15, a6, a7, a8);
  }
  return 0.0;
}

float btSequentialImpulseConstraintSolver::solveGroupCacheFriendlyFinish(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, btTransform *a5, __n128 a6)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  _DWORD *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float32x4_t *v18;
  uint64_t v19;
  float32x4_t *v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float32x4_t *v32;
  float32x4_t v33;
  __n128 *v34;
  uint64_t v35;
  uint64_t v36;
  void **v37;
  void **v38;
  void **v39;
  void **v40;
  void **v41;

  v8 = *(_DWORD *)(a4 + 64);
  if ((v8 & 4) != 0)
  {
    v9 = *(unsigned int *)(a1 + 44);
    if ((int)v9 >= 1)
    {
      v10 = *(_QWORD *)(a1 + 120);
      v11 = (int *)(*(_QWORD *)(a1 + 56) + 148);
      do
      {
        v12 = *(_DWORD **)(v11 - 3);
        v13 = *v11;
        v14 = *(_DWORD *)(v10 + 160 * *v11 + 100);
        v12[31] = *(v11 - 12);
        v12[32] = v14;
        if ((v8 & 0x10) != 0)
          v12[33] = *(_DWORD *)(v10 + 160 * v13 + 260);
        v11 += 40;
        --v9;
      }
      while (v9);
    }
  }
  v15 = *(unsigned int *)(a1 + 76);
  if ((int)v15 >= 1)
  {
    v16 = 0;
    v17 = 160 * v15;
    do
    {
      v18 = (float32x4_t *)(*(_QWORD *)(a1 + 88) + v16);
      v19 = v18[8].i64[1];
      v20 = *(float32x4_t **)(v19 + 64);
      if (v20)
      {
        v21 = vmulq_n_f32(vmulq_f32(*(float32x4_t *)(*(_QWORD *)(v19 + 40) + 400), vmulq_n_f32(v18[1], v18[6].f32[1])), 1.0 / *(float *)(a4 + 12));
        v21.i32[3] = 0;
        v22 = v20[1];
        *v20 = vaddq_f32(*v20, v21);
        v23 = vmulq_n_f32(vmulq_f32(*(float32x4_t *)(*(_QWORD *)(v19 + 48) + 400), vmulq_n_f32(v18[3], v18[6].f32[1])), 1.0 / *(float *)(a4 + 12));
        v23.i32[3] = 0;
        v24 = v20[3];
        v20[2] = vaddq_f32(v20[2], v23);
        v25 = vmulq_n_f32(vmulq_n_f32(vmulq_f32(*v18, *(float32x4_t *)(*(_QWORD *)(v19 + 40) + 624)), v18[6].f32[1]), 1.0 / *(float *)(a4 + 12));
        v25.i32[3] = 0;
        v20[1] = vaddq_f32(v22, v25);
        v26 = vmulq_n_f32(vmulq_n_f32(vmulq_f32(v18[2], *(float32x4_t *)(*(_QWORD *)(v19 + 48) + 624)), v18[6].f32[1]), 1.0 / *(float *)(a4 + 12));
        v26.i32[3] = 0;
        v20[3] = vaddq_f32(v24, v26);
      }
      v27 = v18[6].f32[1];
      *(float *)(v19 + 56) = v27;
      if (fabsf(v27) >= *(float *)(v19 + 24))
        *(_BYTE *)(v19 + 28) = 0;
      v16 += 160;
    }
    while (v17 != v16);
  }
  v28 = *(_DWORD *)(a1 + 12);
  if (v28 >= 1)
  {
    v29 = 0;
    v30 = 0;
    v31 = *(_QWORD *)(a1 + 24);
    do
    {
      if (*(_QWORD *)(v31 + v29 + 208))
      {
        if (*(_DWORD *)(a4 + 44))
        {
          a6.n128_u32[0] = *(_DWORD *)(a4 + 12);
          btSolverBody::writebackVelocityAndTransform((btSolverBody *)(v31 + v29), a6.n128_f64[0], *(float *)(a4 + 52), a2, a3, a4, a5);
        }
        else
        {
          v32 = (float32x4_t *)(v31 + v29);
          v33 = vaddq_f32(v32[12], v32[5]);
          v32[11] = vaddq_f32(v32[11], v32[4]);
          v32[12] = v33;
        }
        *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + v29 + 208) + 352) = *(_OWORD *)(*(_QWORD *)(a1 + 24) + v29 + 176);
        v34 = (__n128 *)(*(_QWORD *)(a1 + 24) + v29);
        a6 = v34[12];
        *(__n128 *)(v34[13].n128_u64[0] + 368) = a6;
        if (*(_DWORD *)(a4 + 44))
        {
          v35 = *(_QWORD *)(a1 + 24) + v29;
          v36 = *(_QWORD *)(v35 + 208);
          *(_OWORD *)(v36 + 16) = *(_OWORD *)v35;
          *(_OWORD *)(v36 + 32) = *(_OWORD *)(v35 + 16);
          *(_OWORD *)(v36 + 48) = *(_OWORD *)(v35 + 32);
          a6 = *(__n128 *)(v35 + 48);
          *(__n128 *)(v36 + 64) = a6;
        }
        v31 = *(_QWORD *)(a1 + 24);
        *(_DWORD *)(*(_QWORD *)(v31 + v29 + 208) + 240) = -1;
        v28 = *(_DWORD *)(a1 + 12);
      }
      ++v30;
      v29 += 224;
    }
    while (v30 < v28);
  }
  if ((*(_DWORD *)(a1 + 44) & 0x80000000) != 0 && (*(_DWORD *)(a1 + 48) & 0x80000000) != 0)
  {
    v37 = *(void ***)(a1 + 56);
    if (v37 && *(_BYTE *)(a1 + 64))
      btAlignedFreeInternal(v37);
    *(_BYTE *)(a1 + 64) = 1;
    *(_QWORD *)(a1 + 56) = 0;
    *(_DWORD *)(a1 + 48) = 0;
  }
  *(_DWORD *)(a1 + 44) = 0;
  if ((*(_DWORD *)(a1 + 76) & 0x80000000) != 0 && (*(_DWORD *)(a1 + 80) & 0x80000000) != 0)
  {
    v38 = *(void ***)(a1 + 88);
    if (v38 && *(_BYTE *)(a1 + 96))
      btAlignedFreeInternal(v38);
    *(_BYTE *)(a1 + 96) = 1;
    *(_QWORD *)(a1 + 88) = 0;
    *(_DWORD *)(a1 + 80) = 0;
  }
  *(_DWORD *)(a1 + 76) = 0;
  if ((*(_DWORD *)(a1 + 108) & 0x80000000) != 0 && (*(_DWORD *)(a1 + 112) & 0x80000000) != 0)
  {
    v39 = *(void ***)(a1 + 120);
    if (v39 && *(_BYTE *)(a1 + 128))
      btAlignedFreeInternal(v39);
    *(_BYTE *)(a1 + 128) = 1;
    *(_QWORD *)(a1 + 120) = 0;
    *(_DWORD *)(a1 + 112) = 0;
  }
  *(_DWORD *)(a1 + 108) = 0;
  if ((*(_DWORD *)(a1 + 140) & 0x80000000) != 0 && (*(_DWORD *)(a1 + 144) & 0x80000000) != 0)
  {
    v40 = *(void ***)(a1 + 152);
    if (v40 && *(_BYTE *)(a1 + 160))
      btAlignedFreeInternal(v40);
    *(_BYTE *)(a1 + 160) = 1;
    *(_QWORD *)(a1 + 152) = 0;
    *(_DWORD *)(a1 + 144) = 0;
  }
  *(_DWORD *)(a1 + 140) = 0;
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) != 0 && (*(_DWORD *)(a1 + 16) & 0x80000000) != 0)
  {
    v41 = *(void ***)(a1 + 24);
    if (v41 && *(_BYTE *)(a1 + 32))
      btAlignedFreeInternal(v41);
    *(_BYTE *)(a1 + 32) = 1;
    *(_QWORD *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 16) = 0;
  }
  *(_DWORD *)(a1 + 12) = 0;
  return 0.0;
}

double btSolverBody::writebackVelocityAndTransform(btSolverBody *this, double result, float a3, uint64_t a4, uint64_t a5, uint64_t a6, btTransform *a7)
{
  float32x4_t v8;
  float32x4_t v9;
  btVector3 v10;
  __int128 v11;
  float32x4_t v12;
  btMatrix3x3 v13;
  __int128 v14;

  if (*((_QWORD *)this + 26))
  {
    v8 = vaddq_f32(*((float32x4_t *)this + 12), *((float32x4_t *)this + 5));
    *((float32x4_t *)this + 11) = vaddq_f32(*((float32x4_t *)this + 11), *((float32x4_t *)this + 4));
    *((float32x4_t *)this + 12) = v8;
    if (*((float *)this + 36) != 0.0
      || *((float *)this + 37) != 0.0
      || *((float *)this + 38) != 0.0
      || *((float *)this + 40) != 0.0
      || *((float *)this + 41) != 0.0
      || *((float *)this + 42) != 0.0)
    {
      v9 = vmulq_n_f32(*((float32x4_t *)this + 10), a3);
      v9.i32[3] = 0;
      v12 = v9;
      btTransformUtil::integrateTransform((float32x4_t *)this, (const btTransform *)((char *)this + 144), &v12, &v13, *(float *)&result, a7);
      v10 = v13.var0[1];
      *(btVector3 *)this = v13.var0[0];
      *((btVector3 *)this + 1) = v10;
      result = *(double *)v13.var0[2].var0.var0;
      v11 = v14;
      *((_OWORD *)this + 2) = v13.var0[2];
      *((_OWORD *)this + 3) = v11;
    }
  }
  return result;
}

float btSequentialImpulseConstraintSolver::solveGroup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, a2, a3, a8);
  return 0.0;
}

uint64_t btSequentialImpulseConstraintSolver::reset(uint64_t this)
{
  *(_QWORD *)(this + 304) = 0;
  return this;
}

double btSliderConstraint::initParams(btSliderConstraint *this)
{
  const btTransform *v1;
  const btTransform *v2;

  *(_OWORD *)&this->var19 = xmmword_1DD02CF00;
  *(_OWORD *)&this->var23 = xmmword_1DD02CF10;
  *(_OWORD *)&this->var27 = xmmword_1DD02CF10;
  *(_OWORD *)&this->var39 = xmmword_1DD02CF20;
  *(_OWORD *)&this->var43 = xmmword_1DD02CF20;
  *(_OWORD *)&this->var31 = xmmword_1DD02CF20;
  *(_OWORD *)&this->var35 = xmmword_1DD02CF20;
  LOBYTE(this[1].var12) = 0;
  this[1].var15.var0.var0[0].var0.var0[2] = 0.0;
  *(btJointFeedback **)((char *)&this[1].var12 + 4) = 0;
  *(_QWORD *)&this[1].var14 = 0;
  this->var14 = 1;
  v1 = (const btTransform *)((char *)this->var8 + 16);
  v2 = (const btTransform *)((char *)this->var9 + 16);
  *(_QWORD *)&this[1].var15.var0.var0[0].var0.var0[3] = 0;
  this->var49[0].var0.var0.var0[0] = 0.0;
  return btSliderConstraint::calculateTransforms(this, v1, v2);
}

double btSliderConstraint::calculateTransforms(btSliderConstraint *this, const btTransform *a2, const btTransform *a3)
{
  int var18_low;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  btVector3 v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int32x2_t v14;
  float32x2_t v15;
  btVector3 v16;
  float32x4_t v17;
  btVector3 v18;
  btVector3 *v19;
  btVector3 *p_var1;
  btVector3 *p_var55;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  btVector3 v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  btVector3 v32;
  btVector3 v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  btVector3 v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int32x2_t v44;
  float32x2_t v45;
  btVector3 v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  btVector3 v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  float32x4_t v58;
  uint64_t v59;
  int8x16_t v60;
  float32x4_t v61;
  float32x4_t v62;
  int8x16_t v63;
  float32x2_t v64;

  var18_low = LOBYTE(this->var18);
  if (LOBYTE(this->var18) || !this->var13)
  {
    v4 = (float32x4_t)a2->var0.var0[1];
    v5 = *(float32x4_t *)((char *)this->var15.var0.var0 + 4);
    v6 = *(float32x4_t *)((char *)&this->var15.var0.var0[1] + 4);
    v5.i32[3] = 0;
    v6.i32[3] = 0;
    v7 = *(float32x4_t *)((char *)&this->var15.var0.var0[2] + 4);
    v8 = *(float32x4_t *)((char *)&this->var15.var1 + 4);
    v7.i32[3] = 0;
    v9 = (float32x4_t)a2->var0.var0[2];
    v10 = (btVector3)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v5, v4.f32[0]), v6, *(float32x2_t *)v4.f32, 1), v7, v4, 2);
    v11 = (int8x16_t)vmulq_f32((float32x4_t)a2->var0.var0[0], v8);
    v12 = (int8x16_t)vmulq_f32(v4, v8);
    v13 = (int8x16_t)vmulq_f32(v9, v8);
    v14 = (int32x2_t)vextq_s8(v12, v12, 8uLL).u64[0];
    v13.i32[3] = 0;
    v15 = vpadd_f32(*(float32x2_t *)v11.i8, *(float32x2_t *)v12.i8);
    v33 = (btVector3)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v5, COERCE_FLOAT(*(_OWORD *)a2->var0.var0)), v6, *(float32x2_t *)a2->var0.var0[0].var0.var0, 1), v7, (float32x4_t)a2->var0.var0[0], 2);
    v16 = (btVector3)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v5, v9.f32[0]), v6, *(float32x2_t *)v9.f32, 1), v7, v9, 2);
    *(float32x2_t *)v17.f32 = vadd_f32(v15, (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL), v14));
    *(float32x2_t *)&v17.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v13.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL)), 0);
    v18 = (btVector3)vaddq_f32((float32x4_t)a2->var1, v17);
    v19 = &this->var54.var0.var0[2];
    p_var1 = &this->var54.var1;
    this->var54.var0.var0[2] = v33;
    this->var54.var1 = v10;
    p_var55 = &this->var55;
    this->var55 = v16;
    this->var56 = v18;
    v22 = (float32x4_t)a3->var0.var0[1];
    v23 = *(float32x4_t *)((char *)this->var16.var0.var0 + 4);
    v24 = *(float32x4_t *)((char *)&this->var16.var0.var0[1] + 4);
    v23.i32[3] = 0;
    v24.i32[3] = 0;
    v25 = *(float32x4_t *)((char *)&this->var16.var0.var0[2] + 4);
    v26 = *(float32x4_t *)((char *)&this->var16.var1 + 4);
    v25.i32[3] = 0;
    v27 = (float32x4_t)a3->var0.var0[2];
    v28 = (btVector3)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v23, v22.f32[0]), v24, *(float32x2_t *)v22.f32, 1), v25, v22, 2);
    v29 = (int8x16_t)vmulq_f32((float32x4_t)a3->var0.var0[0], v26);
    v30 = (int8x16_t)vmulq_f32(v22, v26);
    v31 = (int8x16_t)vmulq_f32(v27, v26);
    v31.i32[3] = 0;
    *(float32x2_t *)v5.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v29.i8, *(float32x2_t *)v30.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL)));
    *(float32x2_t *)&v5.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v31.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL)), 0);
    v32 = (btVector3)vaddq_f32((float32x4_t)a3->var1, v5);
    this->var57 = (btVector3)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v23, COERCE_FLOAT(*(_OWORD *)a3->var0.var0)), v24, *(float32x2_t *)a3->var0.var0[0].var0.var0, 1), v25, (float32x4_t)a3->var0.var0[0], 2);
    this->var58 = v28;
    this->var59 = (btVector3)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v23, v27.f32[0]), v24, *(float32x2_t *)v27.f32, 1), v25, v27, 2);
    this->var60 = v32;
    this->var62 = v18;
    v33.var0.var0[1] = v10.var0.var0[0];
    *(btVector3 *)&this->var63 = v32;
    *(_QWORD *)&v33.var0.var0[2] = LODWORD(v16.var0.var0[0]);
    this->var61 = v33;
    if (var18_low)
      goto LABEL_7;
  }
  else
  {
    v34 = (float32x4_t)a3->var0.var0[1];
    v35 = *(float32x4_t *)((char *)this->var16.var0.var0 + 4);
    v36 = *(float32x4_t *)((char *)&this->var16.var0.var0[1] + 4);
    v35.i32[3] = 0;
    v36.i32[3] = 0;
    v37 = *(float32x4_t *)((char *)&this->var16.var0.var0[2] + 4);
    v38 = *(float32x4_t *)((char *)&this->var16.var1 + 4);
    v37.i32[3] = 0;
    v39 = (float32x4_t)a3->var0.var0[2];
    v40 = (btVector3)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v35, v34.f32[0]), v36, *(float32x2_t *)v34.f32, 1), v37, v34, 2);
    v41 = (int8x16_t)vmulq_f32((float32x4_t)a3->var0.var0[0], v38);
    v42 = (int8x16_t)vmulq_f32(v34, v38);
    v43 = (int8x16_t)vmulq_f32(v39, v38);
    v44 = (int32x2_t)vextq_s8(v42, v42, 8uLL).u64[0];
    v43.i32[3] = 0;
    v45 = vpadd_f32(*(float32x2_t *)v41.i8, *(float32x2_t *)v42.i8);
    v33 = (btVector3)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v35, COERCE_FLOAT(*(_OWORD *)a3->var0.var0)), v36, *(float32x2_t *)a3->var0.var0[0].var0.var0, 1), v37, (float32x4_t)a3->var0.var0[0], 2);
    v46 = (btVector3)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v35, v39.f32[0]), v36, *(float32x2_t *)v39.f32, 1), v37, v39, 2);
    *(float32x2_t *)v47.f32 = vadd_f32(v45, (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v41, v41, 8uLL), v44));
    *(float32x2_t *)&v47.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v43.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v43, v43, 8uLL)), 0);
    v18 = (btVector3)vaddq_f32((float32x4_t)a3->var1, v47);
    v19 = &this->var54.var0.var0[2];
    p_var1 = &this->var54.var1;
    this->var54.var0.var0[2] = v33;
    this->var54.var1 = v40;
    p_var55 = &this->var55;
    this->var55 = v46;
    this->var56 = v18;
    v48 = (float32x4_t)a2->var0.var0[1];
    v49 = *(float32x4_t *)((char *)this->var15.var0.var0 + 4);
    v50 = *(float32x4_t *)((char *)&this->var15.var0.var0[1] + 4);
    v49.i32[3] = 0;
    v50.i32[3] = 0;
    v51 = *(float32x4_t *)((char *)&this->var15.var0.var0[2] + 4);
    v52 = *(float32x4_t *)((char *)&this->var15.var1 + 4);
    v51.i32[3] = 0;
    v53 = (float32x4_t)a2->var0.var0[2];
    v54 = (btVector3)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v49, v48.f32[0]), v50, *(float32x2_t *)v48.f32, 1), v51, v48, 2);
    v55 = (int8x16_t)vmulq_f32((float32x4_t)a2->var0.var0[0], v52);
    v56 = (int8x16_t)vmulq_f32(v48, v52);
    v57 = (int8x16_t)vmulq_f32(v53, v52);
    v57.i32[3] = 0;
    *(float32x2_t *)v35.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v55.i8, *(float32x2_t *)v56.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v55, v55, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v56, v56, 8uLL)));
    *(float32x2_t *)&v35.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v57.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v57, v57, 8uLL)), 0);
    v32 = (btVector3)vaddq_f32((float32x4_t)a2->var1, v35);
    this->var57 = (btVector3)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v49, COERCE_FLOAT(*(_OWORD *)a2->var0.var0)), v50, *(float32x2_t *)a2->var0.var0[0].var0.var0, 1), v51, (float32x4_t)a2->var0.var0[0], 2);
    this->var58 = v54;
    this->var59 = (btVector3)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v49, v53.f32[0]), v50, *(float32x2_t *)v53.f32, 1), v51, v53, 2);
    this->var60 = v32;
    this->var62 = v18;
    v33.var0.var0[1] = v40.var0.var0[0];
    *(btVector3 *)&this->var63 = v32;
    *(_QWORD *)&v33.var0.var0[2] = LODWORD(v46.var0.var0[0]);
    this->var61 = v33;
  }
  if (!this->var13)
  {
    v58 = vsubq_f32((float32x4_t)v18, (float32x4_t)v32);
    goto LABEL_9;
  }
LABEL_7:
  v58 = vsubq_f32((float32x4_t)v32, (float32x4_t)v18);
LABEL_9:
  v59 = 0;
  v58.i32[3] = 0;
  *(float32x4_t *)&this->var71 = v58;
  v60 = (int8x16_t)vmulq_f32((float32x4_t)v33, v58);
  v61 = vmulq_n_f32((float32x4_t)v33, vadd_f32(vpadd_f32(*(float32x2_t *)v60.i8, *(float32x2_t *)v60.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v60, v60, 8uLL)).f32[0]);
  v61.i32[3] = 0;
  v62 = vaddq_f32((float32x4_t)v18, v61);
  *(float32x4_t *)&this->var67 = v62;
  do
  {
    v62.i32[0] = LODWORD(v19->var0.var0[v59]);
    v62.i32[1] = LODWORD(p_var1->var0.var0[v59]);
    v62.i32[2] = LODWORD(p_var55->var0.var0[v59]);
    v63 = (int8x16_t)vmulq_f32(v62, v58);
    v64 = vpadd_f32(*(float32x2_t *)v63.i8, *(float32x2_t *)v63.i8);
    v62 = (float32x4_t)vextq_s8(v63, v63, 8uLL);
    *(float32x2_t *)v62.f32 = vadd_f32(v64, *(float32x2_t *)v62.f32);
    *(_DWORD *)((char *)&this[1].var0 + v59 * 4) = v62.i32[0];
    ++v59;
  }
  while (v59 != 3);
  return *(double *)v62.i64;
}

void btSliderConstraint::btSliderConstraint(btSliderConstraint *this, btRigidBody *a2, btRigidBody *a3, const btTransform *a4, const btTransform *a5, char a6)
{
  uint64_t v9;

  btTypedConstraint::btTypedConstraint((uint64_t)this, 7, (uint64_t)a2, (uint64_t)a3);
  *(_QWORD *)v9 = off_1EA596B10;
  *(_BYTE *)(v9 + 72) = 0;
  *(btTransform *)(v9 + 80) = *a4;
  *(btTransform *)(v9 + 144) = *a5;
  *(_BYTE *)(v9 + 208) = a6;
  btSliderConstraint::initParams((btSliderConstraint *)v9);
}

void btSliderConstraint::btSliderConstraint(btSliderConstraint *this, float32x4_t *a2, const btTransform *a3, char a4)
{
  void *FixedBody;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  btVector3 var1;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  int8x16_t v17;
  int8x16_t v18;
  btVector3 v19;
  btSliderConstraint *v20;

  FixedBody = btTypedConstraint::getFixedBody((btTypedConstraint *)this);
  btTypedConstraint::btTypedConstraint((uint64_t)this, 7, (uint64_t)FixedBody, (uint64_t)a2);
  this->var0 = (void **)off_1EA596B10;
  this->var13 = 0;
  v9 = (float32x4_t)a3->var0.var0[0];
  *(btVector3 *)((char *)this->var16.var0.var0 + 4) = a3->var0.var0[0];
  v10 = (float32x4_t)a3->var0.var0[1];
  *(float32x4_t *)((char *)&this->var16.var0.var0[1] + 4) = v10;
  v11 = (float32x4_t)a3->var0.var0[2];
  *(float32x4_t *)((char *)&this->var16.var0.var0[2] + 4) = v11;
  var1 = a3->var1;
  *(btVector3 *)((char *)&this->var16.var1 + 4) = var1;
  LOBYTE(this->var18) = a4;
  v13 = a2[1];
  v14 = a2[2];
  v15 = a2[3];
  v16 = vmulq_f32((float32x4_t)var1, v13);
  v17 = (int8x16_t)vmulq_f32((float32x4_t)var1, v14);
  *(float32x2_t *)v16.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL)), vpadd_f32(*(float32x2_t *)v16.f32, *(float32x2_t *)v17.i8));
  v18 = (int8x16_t)vmulq_f32((float32x4_t)var1, v15);
  v18.i32[3] = 0;
  *(float32x2_t *)&v16.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v18.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL)), 0);
  v11.i32[3] = 0;
  v19 = (btVector3)vaddq_f32(a2[4], v16);
  v10.i32[3] = 0;
  v9.i32[3] = 0;
  *(float32x4_t *)((char *)this->var15.var0.var0 + 4) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v9, v13.f32[0]), v10, *(float32x2_t *)v13.f32, 1), v11, v13, 2);
  *(float32x4_t *)((char *)&this->var15.var0.var0[1] + 4) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v9, v14.f32[0]), v10, *(float32x2_t *)v14.f32, 1), v11, v14, 2);
  *(float32x4_t *)((char *)&this->var15.var0.var0[2] + 4) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v9, v15.f32[0]), v10, *(float32x2_t *)v15.f32, 1), v11, v15, 2);
  *(btVector3 *)((char *)&this->var15.var1 + 4) = v19;
  btSliderConstraint::initParams(v20);
}

btSliderConstraint *btSliderConstraint::getInfo1(btSliderConstraint *result, int32x2_t *a2)
{
  __int32 v3;
  btSliderConstraint *v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  __int32 v8;

  if (result->var13)
  {
    v3 = 0;
    a2->i32[0] = 0;
LABEL_9:
    a2->i32[1] = v3;
    return result;
  }
  v4 = result;
  *a2 = (int32x2_t)0x200000004;
  *(double *)v5.i64 = btSliderConstraint::calculateTransforms(result, (const btTransform *)((char *)result->var8 + 16), (const btTransform *)((char *)result->var9 + 16));
  btSliderConstraint::testAngLimits(v4, v5, v6, v7);
  result = btSliderConstraint::testLinLimits(v4);
  if (LOBYTE(v4->var48) || LOBYTE(v4[1].var12))
    *a2 = vadd_s32(*a2, (int32x2_t)0xFFFFFFFF00000001);
  if (BYTE1(v4->var48) || LOBYTE(v4[1].var15.var0.var0[0].var0.var0[1]))
  {
    v8 = a2->i32[1];
    ++a2->i32[0];
    v3 = v8 - 1;
    goto LABEL_9;
  }
  return result;
}

void btSliderConstraint::testAngLimits(btSliderConstraint *this, float32x4_t a2, float32x4_t a3, float32x4_t a4)
{
  float var21;
  float var22;
  int8x16_t v7;
  int8x16_t v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;

  this[1].var10 = 0.0;
  BYTE1(this->var48) = 0;
  var21 = this->var21;
  var22 = this->var22;
  if (var21 <= var22)
  {
    a3.i32[0] = LODWORD(this->var54.var0.var0[2].var0.var0[1]);
    a3.i32[1] = LODWORD(this->var54.var1.var0.var0[1]);
    a3.i32[2] = LODWORD(this->var55.var0.var0[1]);
    a2.i32[0] = LODWORD(this->var54.var0.var0[2].var0.var0[2]);
    a2.i32[1] = LODWORD(this->var54.var1.var0.var0[2]);
    a2.i32[2] = LODWORD(this->var55.var0.var0[2]);
    a4.i32[0] = LODWORD(this->var57.var0.var0[1]);
    a4.i32[1] = LODWORD(this->var58.var0.var0[1]);
    a4.i32[2] = LODWORD(this->var59.var0.var0[1]);
    v7 = (int8x16_t)vmulq_f32(a2, a4);
    v8 = (int8x16_t)vmulq_f32(a3, a4);
    v9 = atan2f(vadd_f32(vpadd_f32(*(float32x2_t *)v7.i8, *(float32x2_t *)v7.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)).f32[0], vadd_f32(vpadd_f32(*(float32x2_t *)v8.i8, *(float32x2_t *)v8.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL)).f32[0]);
    v10 = v9;
    if (var21 < var22)
    {
      if (v9 >= var21)
      {
        if (v9 > var22)
        {
          v12 = fmodf(v9 - var22, 6.2832);
          if (v12 >= -3.1416)
          {
            if (v12 > 3.1416)
              v12 = v12 + -6.2832;
          }
          else
          {
            v12 = v12 + 6.2832;
          }
          v15 = fabsf(v12);
          v16 = fmodf(v10 - var21, 6.2832);
          if (v16 >= -3.1416)
          {
            if (v16 > 3.1416)
              v16 = v16 + -6.2832;
          }
          else
          {
            v16 = v16 + 6.2832;
          }
          if (fabsf(v16) < v15)
            v10 = v10 + -6.2832;
        }
      }
      else
      {
        v11 = fmodf(var21 - v9, 6.2832);
        if (v11 >= -3.1416)
        {
          if (v11 > 3.1416)
            v11 = v11 + -6.2832;
        }
        else
        {
          v11 = v11 + 6.2832;
        }
        v13 = fabsf(v11);
        v14 = fmodf(var22 - v10, 6.2832);
        if (v14 >= -3.1416)
        {
          if (v14 > 3.1416)
            v14 = v14 + -6.2832;
        }
        else
        {
          v14 = v14 + 6.2832;
        }
        if (v13 >= fabsf(v14))
          v10 = v10 + 6.2832;
      }
    }
    *((float *)&this[1].var9 + 1) = v10;
    if (v10 < var21 || (var21 = var22, v10 > var22))
    {
      this[1].var10 = v10 - var21;
      BYTE1(this->var48) = 1;
    }
  }
}

btSliderConstraint *btSliderConstraint::testLinLimits(btSliderConstraint *this)
{
  float v1;
  float var19;
  float var20;
  float v4;

  LOBYTE(this->var48) = 0;
  v1 = *(float *)&this[1].var0;
  *(float *)&this[1].var9 = v1;
  var19 = this->var19;
  var20 = this->var20;
  if (var19 <= var20)
  {
    if (v1 > var20)
    {
      v4 = v1 - var20;
LABEL_6:
      *(float *)&this[1].var0 = v4;
      LOBYTE(this->var48) = 1;
      return this;
    }
    if (v1 < var19)
    {
      v4 = v1 - var19;
      goto LABEL_6;
    }
  }
  LODWORD(this[1].var0) = 0;
  return this;
}

void btSliderConstraint::getInfo2(float32x4_t *a1, uint64_t a2, double a3, double a4, double a5, float32x4_t a6, float32x4_t a7)
{
  btSliderConstraint::getInfo2NonVirtual(a1, a2, (float32x4_t *)(a1[2].i64[1] + 16), (float32x4_t *)(a1[3].i64[0] + 16), (float32x4_t *)(a1[2].i64[1] + 352), (float32x4_t *)(a1[3].i64[0] + 352), *(float *)(a1[2].i64[1] + 384), *(float *)(a1[3].i64[0] + 384), a5, a6, a7);
}

void btSliderConstraint::getInfo2NonVirtual(float32x4_t *this, uint64_t a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5, float32x4_t *a6, float a7, float a8, double a9, float32x4_t a10, float32x4_t a11)
{
  uint64_t v15;
  float v16;
  _BOOL4 v17;
  float v18;
  float v19;
  float v20;
  float32x4_t v21;
  float32x4_t v22;
  int v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  int8x16_t v27;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float32x4_t v40;
  float32x4_t v41;
  float v42;
  float v43;
  float32x4_t v44;
  float32x4_t v45;
  _DWORD *v46;
  int v47;
  float *v48;
  __int32 v49;
  float v50;
  float v51;
  float32x4_t v52;
  float32x4_t v53;
  int8x16_t v54;
  float32x4_t v55;
  float32x4_t v56;
  int8x16_t v57;
  float *v58;
  float32x4_t v59;
  int8x16_t v60;
  _DWORD *v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  int v65;
  int v66;
  _DWORD *v67;
  _DWORD *v68;
  float32x4_t v69;
  int8x16_t v70;
  float32x4_t v71;
  float32x4_t v72;
  int8x16_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  int8x16_t v85;
  float v86;
  uint64_t v87;
  int8x8_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  int8x16_t v92;
  float32x4_t v93;
  uint64_t j;
  uint64_t v95;
  float32x4_t v96;
  int8x16_t v97;
  uint64_t k;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t m;
  uint64_t v105;
  float32x4_t v106;
  float32x4_t v107;
  int8x16_t v108;
  float32x4_t v109;
  int8x16_t v110;
  float32x4_t v111;
  int8x16_t v112;
  float32x4_t v113;
  float32x4_t v114;
  int8x16_t v115;
  float32x4_t v116;
  int8x16_t v117;
  float32x4_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t i;
  float v124;
  float v125;
  int8x16_t v126;
  int8x16_t v127;
  uint64_t v128;
  int v129;
  float v130;
  float v131;
  int v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  float32x4_t v137;
  float32x4_t v138;
  int8x16_t v139;
  float32x4_t v140;
  int8x16_t v141;
  float v142;
  float32x4_t v143;
  float32x4_t v144;
  int8x16_t v145;
  float v146;
  float v147;
  uint64_t v149;
  uint64_t v150;
  char v151;
  float *v152;
  float v153;
  float MotorFactor;
  int v155;
  int v156;
  float v157;
  float v158;
  float v159;
  int8x16_t v160;
  int8x16_t v161;
  float v162;
  float v163;
  int v166;
  float v167;
  int v168;
  BOOL v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  float v175;
  float v176;
  BOOL v178;
  __int32 v179;
  float *v180;
  float v181;
  float v182;
  float v183;
  float v184;
  uint64_t v185;
  int v186;
  float v187;
  float v188;
  float v189;
  int8x16_t v190;
  int8x16_t v191;
  float v192;
  float v193;
  float32x4_t v196;
  float32x4_t v197;
  float32x4_t v198;
  float32x4_t v199;
  float32x4_t v200;
  float32x4_t v201;

  v15 = *(int *)(a2 + 40);
  if (this[13].i8[0])
    v16 = 1.0;
  else
    v16 = -1.0;
  v17 = a8 < 0.00000011921 || a7 < 0.00000011921;
  v18 = a7 + a8;
  v19 = a8 / v18;
  if (v18 <= 0.0)
    v19 = 0.5;
  v20 = 1.0 - v19;
  a10.i32[0] = this[59].i32[0];
  a10.i32[1] = this[60].i32[0];
  v21 = a10;
  v21.i32[2] = this[61].i32[0];
  a11.i32[0] = this[63].i32[0];
  a11.i32[1] = this[64].i32[0];
  v22 = a11;
  v22.i32[2] = this[65].i32[0];
  v23 = this[4].u8[9];
  if (this[4].i8[9])
  {
    v24 = vmulq_n_f32(v21, v19);
    v24.i32[3] = 0;
    v25 = vmulq_n_f32(v22, v20);
    v25.i32[3] = 0;
    v26 = vaddq_f32(v24, v25);
    v27 = (int8x16_t)vmulq_f32(v26, v26);
    _Q22 = vmulq_n_f32(v26, 1.0/ sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL), vpadd_f32(*(float32x2_t *)v27.i8, *(float32x2_t *)v27.i8)).f32[0]));
    if (fabsf(_Q22.f32[2]) <= 0.70711)
    {
      v42 = vmlas_n_f32(vmuls_lane_f32(_Q22.f32[1], *(float32x2_t *)_Q22.f32, 1), _Q22.f32[0], _Q22.f32[0]);
      v43 = 1.0 / sqrtf(v42);
      v39 = -(float)(_Q22.f32[1] * v43);
      v34 = v43 * _Q22.f32[0];
      v201.f32[0] = v39;
      *(uint64_t *)((char *)v201.i64 + 4) = COERCE_UNSIGNED_INT(v43 * _Q22.f32[0]);
      v36 = -(float)(_Q22.f32[2] * (float)(v43 * _Q22.f32[0]));
      v37 = _Q22.f32[2] * v39;
      v200.f32[0] = v36;
      v200.f32[1] = _Q22.f32[2] * v39;
      v38 = v42 * v43;
      v200.f32[2] = v38;
      v35 = 0.0;
    }
    else
    {
      _S7 = _Q22.i32[1];
      __asm { FMLA            S17, S7, V22.S[1] }
      v33 = 1.0 / sqrtf(_S17);
      v201.i32[0] = 0;
      v34 = -(float)(_Q22.f32[2] * v33);
      v35 = vmuls_lane_f32(v33, *(float32x2_t *)_Q22.f32, 1);
      *(uint64_t *)((char *)v201.i64 + 4) = __PAIR64__(LODWORD(v35), LODWORD(v34));
      v36 = _S17 * v33;
      v37 = -(float)(_Q22.f32[0] * v35);
      v200.f32[0] = _S17 * v33;
      v200.f32[1] = v37;
      v38 = v34 * _Q22.f32[0];
      v200.f32[2] = v34 * _Q22.f32[0];
      v39 = 0.0;
    }
  }
  else
  {
    v39 = this[59].f32[1];
    v34 = this[60].f32[1];
    v35 = this[61].f32[1];
    v40.i64[0] = __PAIR64__(LODWORD(v34), LODWORD(v39));
    v40.i64[1] = LODWORD(v35);
    v36 = this[59].f32[2];
    v37 = this[60].f32[2];
    v38 = this[61].f32[2];
    v41.i64[0] = __PAIR64__(LODWORD(v37), LODWORD(v36));
    v41.i64[1] = LODWORD(v38);
    v200 = v41;
    v201 = v40;
    _Q22 = v21;
  }
  v44 = this[66];
  v45 = this[62];
  v46 = *(_DWORD **)(a2 + 16);
  *v46 = LODWORD(v39);
  v46[1] = LODWORD(v34);
  v46[2] = LODWORD(v35);
  v46[v15] = LODWORD(v36);
  v47 = v15 + 1;
  v46[v47] = LODWORD(v37);
  *(float *)&v46[(int)v15 + 2] = v38;
  v48 = *(float **)(a2 + 32);
  *v48 = -v39;
  v48[1] = -v34;
  v48[2] = -v35;
  v48[v15] = -v36;
  v48[v47] = -v37;
  v48[(int)v15 + 2] = -v38;
  v49 = this[20].i32[2];
  v50 = this[19].f32[1];
  if ((v49 & 0x80) == 0)
    v50 = v50 * *(float *)(a2 + 4);
  v51 = v50 * *(float *)a2;
  *(int8x8_t *)v52.f32 = vext_s8(*(int8x8_t *)a10.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL), 4uLL);
  v52.i64[1] = a10.i64[0];
  *(int8x8_t *)v53.f32 = vext_s8(*(int8x8_t *)a11.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL), 4uLL);
  v53.i64[1] = a11.i64[0];
  v54 = (int8x16_t)vsubq_f32(vmulq_f32(v21, v53), vmulq_f32(v52, v22));
  v55.i64[0] = vextq_s8(v54, v54, 4uLL).u64[0];
  v55.i64[1] = v54.u32[0];
  v56 = v201;
  v57 = (int8x16_t)vmulq_f32(v201, v55);
  v58 = *(float **)(a2 + 48);
  *v58 = v51
       * vadd_f32(vpadd_f32(*(float32x2_t *)v57.i8, *(float32x2_t *)v57.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v57, v57, 8uLL)).f32[0];
  v59 = v200;
  v60 = (int8x16_t)vmulq_f32(v200, v55);
  v58[v15] = v51
           * vadd_f32(vpadd_f32(*(float32x2_t *)v60.i8, *(float32x2_t *)v60.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v60, v60, 8uLL)).f32[0];
  if ((v49 & 0x40) != 0)
  {
    v61 = *(_DWORD **)(a2 + 56);
    *v61 = this[20].i32[0];
    v61[v15] = this[20].i32[0];
  }
  v62 = vsubq_f32(v44, v45);
  v63 = a3[3];
  v64 = a4[3];
  v65 = 2 * v15;
  v66 = 3 * v15;
  v199 = 0uLL;
  v67 = &v46[2 * (_DWORD)v15];
  v68 = &v46[3 * (_DWORD)v15];
  if (v23)
  {
    v69 = vsubq_f32(this[66], v64);
    v69.i32[3] = 0;
    v70 = (int8x16_t)vmulq_f32(_Q22, v69);
    v71 = vmulq_n_f32(_Q22, vadd_f32(vpadd_f32(*(float32x2_t *)v70.i8, *(float32x2_t *)v70.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v70, v70, 8uLL)).f32[0]);
    v71.i32[3] = 0;
    v72 = vsubq_f32(this[62], v63);
    v72.i32[3] = 0;
    v73 = (int8x16_t)vmulq_f32(_Q22, v72);
    v74 = vmulq_n_f32(_Q22, vadd_f32(vpadd_f32(*(float32x2_t *)v73.i8, *(float32x2_t *)v73.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v73, v73, 8uLL)).f32[0]);
    v74.i32[3] = 0;
    v75 = vsubq_f32(v72, v74);
    v76 = v75;
    v76.i32[3] = 0;
    v77 = vmulq_n_f32(_Q22, this[75].f32[0] - this[72].f32[0]);
    v77.i32[3] = 0;
    v78 = vmulq_n_f32(v75, v20);
    v79 = vsubq_f32(vaddq_f32(v77, v74), v71);
    v80 = vmulq_n_f32(v79, v19);
    v80.i32[3] = 0;
    v81 = vsubq_f32(v69, v71);
    v82 = vaddq_f32(v76, v80);
    v83 = vsubq_f32(v81, vmulq_n_f32(v79, v20));
    v83.i32[3] = 0;
    v84 = vmulq_n_f32(v81, v19);
    v84.i32[3] = 0;
    v78.i32[3] = 0;
    v56 = vaddq_f32(v84, v78);
    v85 = (int8x16_t)vmulq_f32(v56, v56);
    v86 = vadd_f32(vpadd_f32(*(float32x2_t *)v85.i8, *(float32x2_t *)v85.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v85, v85, 8uLL)).f32[0];
    if (v86 <= 0.00000011921)
    {
      v56.i32[0] = this[59].i32[1];
      v56.i32[1] = this[60].i32[1];
      v56.i32[2] = this[61].i32[1];
    }
    else
    {
      v56 = vmulq_n_f32(v56, 1.0 / sqrtf(v86));
    }
    v105 = 0;
    v106.i64[0] = vextq_s8((int8x16_t)_Q22, (int8x16_t)_Q22, 4uLL).u64[0];
    v106.i64[1] = _Q22.i64[0];
    v107.i64[0] = vextq_s8((int8x16_t)v56, (int8x16_t)v56, 4uLL).u64[0];
    v107.i64[1] = v56.i64[0];
    v108 = (int8x16_t)vsubq_f32(vmulq_f32(_Q22, v107), vmulq_f32(v106, v56));
    v59.i64[0] = vextq_s8(v108, v108, 4uLL).u64[0];
    v59.i64[1] = v108.u32[0];
    v200 = v59;
    v201 = v56;
    v109.i64[0] = vextq_s8((int8x16_t)v82, (int8x16_t)v82, 4uLL).u64[0];
    v109.i64[1] = v82.i64[0];
    v110 = (int8x16_t)vsubq_f32(vmulq_f32(v82, v107), vmulq_f32(v109, v56));
    v111.i64[0] = vextq_s8((int8x16_t)v83, (int8x16_t)v83, 4uLL).u64[0];
    v111.i64[1] = v83.i64[0];
    v112 = (int8x16_t)vsubq_f32(vmulq_f32(v107, v83), vmulq_f32(v111, v56));
    v113.i64[0] = vextq_s8(v112, v112, 4uLL).u64[0];
    v113.i64[1] = v112.u32[0];
    v199 = v113;
    v67[2] = v110.i32[0];
    *(_QWORD *)v67 = vextq_s8(v110, v110, 4uLL).u64[0];
    do
    {
      v48[v65 + v105] = -v199.f32[v105];
      ++v105;
    }
    while (v105 != 3);
    v114.i64[0] = vextq_s8((int8x16_t)v59, (int8x16_t)v59, 4uLL).u64[0];
    v114.i64[1] = v59.i64[0];
    v115 = (int8x16_t)vsubq_f32(vmulq_f32(v82, v114), vmulq_f32(v109, v59));
    v116.i64[0] = vextq_s8(v115, v115, 4uLL).u64[0];
    v116.i64[1] = v115.u32[0];
    v117 = (int8x16_t)vsubq_f32(vmulq_f32(v114, v83), vmulq_f32(v111, v59));
    v118.i64[0] = vextq_s8(v117, v117, 4uLL).u64[0];
    v118.i64[1] = v117.u32[0];
    v199 = v118;
    if (v17 && this[20].i8[5])
    {
      v199 = vmulq_n_f32(v118, v20);
      v116 = vmulq_n_f32(v116, v19);
    }
    v119 = 0;
    *(_QWORD *)v68 = v116.i64[0];
    v68[2] = v116.i32[2];
    do
    {
      v48[v66 + v119] = -v199.f32[v119];
      ++v119;
    }
    while (v119 != 3);
    v120 = 0;
    v100 = *(_QWORD *)(a2 + 8);
    v121 = v100 + 4 * v65;
    *(_QWORD *)v121 = v201.i64[0];
    *(_DWORD *)(v121 + 8) = v201.i32[2];
    v122 = v100 + 4 * v66;
    *(_QWORD *)v122 = v200.i64[0];
    *(_DWORD *)(v122 + 8) = v200.i32[2];
    v103 = *(_QWORD *)(a2 + 24);
    do
    {
      *(float *)(v103 + 4 * v65 + v120 * 4) = -v201.f32[v120];
      ++v120;
    }
    while (v120 != 3);
    for (i = 0; i != 3; ++i)
      *(float *)(v103 + 4 * v66 + i * 4) = -v200.f32[i];
    v89 = 0uLL;
  }
  else
  {
    v87 = 0;
    v89 = vsubq_f32(v64, v63);
    v88 = (int8x8_t)vextq_s8((int8x16_t)v89, (int8x16_t)v89, 8uLL).u64[0];
    v89.i32[3] = 0;
    *(int8x8_t *)v90.f32 = vext_s8(*(int8x8_t *)v89.f32, v88, 4uLL);
    v90.i64[1] = v89.i64[0];
    v91.i64[0] = vextq_s8((int8x16_t)v56, (int8x16_t)v56, 4uLL).u64[0];
    v91.i64[1] = v56.i64[0];
    v92 = (int8x16_t)vsubq_f32(vmulq_f32(v91, v89), vmulq_f32(v56, v90));
    v93.i64[0] = vextq_s8(v92, v92, 4uLL).u64[0];
    v93.i64[1] = v92.u32[0];
    v198 = v93;
    do
    {
      *(float *)&v67[v87] = v19 * v198.f32[v87];
      ++v87;
    }
    while (v87 != 3);
    for (j = 0; j != 3; ++j)
      v48[v65 + j] = v20 * v198.f32[j];
    v95 = 0;
    v96.i64[0] = vextq_s8((int8x16_t)v59, (int8x16_t)v59, 4uLL).u64[0];
    v96.i64[1] = v59.i64[0];
    v97 = (int8x16_t)vsubq_f32(vmulq_f32(v96, v89), vmulq_f32(v59, v90));
    v96.i64[0] = vextq_s8(v97, v97, 4uLL).u64[0];
    v96.i64[1] = v97.u32[0];
    v198 = v96;
    do
    {
      *(float *)&v68[v95] = v19 * v198.f32[v95];
      ++v95;
    }
    while (v95 != 3);
    for (k = 0; k != 3; ++k)
      v48[v66 + k] = v20 * v198.f32[k];
    v99 = 0;
    v100 = *(_QWORD *)(a2 + 8);
    v101 = v100 + 4 * v65;
    *(_QWORD *)v101 = v201.i64[0];
    *(_DWORD *)(v101 + 8) = v201.i32[2];
    v102 = v100 + 4 * v66;
    *(_QWORD *)v102 = v200.i64[0];
    *(_DWORD *)(v102 + 8) = v200.i32[2];
    v103 = *(_QWORD *)(a2 + 24);
    do
    {
      *(float *)(v103 + 4 * v65 + v99 * 4) = -v201.f32[v99];
      ++v99;
    }
    while (v99 != 3);
    for (m = 0; m != 3; ++m)
      *(float *)(v103 + 4 * v66 + m * 4) = -v200.f32[m];
    v83 = 0uLL;
    v82 = 0uLL;
  }
  v62.i32[3] = 0;
  v124 = this[18].f32[1];
  if ((v49 & 0x20) == 0)
    v124 = v124 * *(float *)(a2 + 4);
  v125 = v124 * *(float *)a2;
  v126 = (int8x16_t)vmulq_f32(v56, v62);
  v58[v65] = v125
           * vadd_f32(vpadd_f32(*(float32x2_t *)v126.i8, *(float32x2_t *)v126.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v126, v126, 8uLL)).f32[0];
  v127 = (int8x16_t)vmulq_f32(v59, v62);
  v58[v66] = v125
           * vadd_f32(vpadd_f32(*(float32x2_t *)v127.i8, *(float32x2_t *)v127.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v127, v127, 8uLL)).f32[0];
  if ((v49 & 0x10) != 0)
  {
    v128 = *(_QWORD *)(a2 + 56);
    *(_DWORD *)(v128 + 4 * v65) = this[19].i32[0];
    *(_DWORD *)(v128 + 4 * v66) = this[19].i32[0];
  }
  v129 = this[20].u8[4];
  v130 = _Q22.f32[2];
  if (this[20].i8[4])
  {
    v131 = v16 * this[72].f32[0];
    if (v131 <= 0.0)
      v132 = 1;
    else
      v132 = 2;
    v133 = this[76].u8[0];
  }
  else
  {
    if (!this[76].i8[0])
    {
      v156 = 4;
      goto LABEL_101;
    }
    v132 = 0;
    v131 = 0.0;
    v133 = 1;
  }
  v134 = 4 * (int)v15;
  v135 = 4 * v134;
  *(_QWORD *)(v100 + v135) = _Q22.i64[0];
  v136 = (4 * v15) | 2;
  *(_DWORD *)(v100 + 4 * v136) = _Q22.i32[2];
  *(float32x2_t *)(v103 + v135) = vneg_f32(*(float32x2_t *)_Q22.f32);
  *(float *)(v103 + 4 * v136) = -_Q22.f32[2];
  if (v23)
  {
    if (v17)
      goto LABEL_63;
    v137.i64[0] = vextq_s8((int8x16_t)v82, (int8x16_t)v82, 4uLL).u64[0];
    v137.i64[1] = v82.i64[0];
    v138.i64[0] = vextq_s8((int8x16_t)_Q22, (int8x16_t)_Q22, 4uLL).u64[0];
    v138.i64[1] = _Q22.i64[0];
    v139 = (int8x16_t)vsubq_f32(vmulq_f32(v138, v82), vmulq_f32(_Q22, v137));
    v140.i64[0] = vextq_s8((int8x16_t)v83, (int8x16_t)v83, 4uLL).u64[0];
    v140.i64[1] = v83.i64[0];
    v141 = (int8x16_t)vsubq_f32(vmulq_f32(v138, v83), vmulq_f32(_Q22, v140));
    v140.i64[0] = vextq_s8(v141, v141, 4uLL).u64[0];
    v140.i64[1] = v141.u32[0];
    v199 = v140;
    *(_QWORD *)&v46[v134] = vextq_s8(v139, v139, 4uLL).u64[0];
    v46[v136] = v139.i32[0];
    *(float32x2_t *)&v48[v134] = vneg_f32(*(float32x2_t *)v140.f32);
    v142 = -*(float *)v141.i32;
  }
  else
  {
    v143.i64[0] = vextq_s8((int8x16_t)v89, (int8x16_t)v89, 4uLL).u64[0];
    v143.i64[1] = v89.i64[0];
    v144.i64[0] = vextq_s8((int8x16_t)_Q22, (int8x16_t)_Q22, 4uLL).u64[0];
    v144.i64[1] = _Q22.i64[0];
    v145 = (int8x16_t)vsubq_f32(vmulq_f32(v144, v89), vmulq_f32(_Q22, v143));
    v144.i64[0] = vextq_s8(v145, v145, 4uLL).u64[0];
    *(float32x2_t *)&v46[v134] = vmul_n_f32(*(float32x2_t *)v144.f32, v19);
    *(float *)&v46[v136] = v19 * *(float *)v145.i32;
    *(float32x2_t *)&v48[v134] = vmul_n_f32(*(float32x2_t *)v144.f32, v20);
    v142 = v20 * *(float *)v145.i32;
  }
  v48[v136] = v142;
LABEL_63:
  v146 = this[13].f32[1];
  v147 = this[13].f32[2];
  _ZF = v146 != v147 || v129 == 0;
  v58[v134] = 0.0;
  v149 = *(_QWORD *)(a2 + 64);
  *(_DWORD *)(v149 + 4 * v134) = 0;
  v150 = *(_QWORD *)(a2 + 72);
  *(_DWORD *)(v150 + 4 * v134) = 0;
  v151 = !_ZF;
  v152 = (float *)(a2 + 4);
  if ((v49 & 0x200) != 0)
    v152 = &this[16].f32[1];
  v153 = *v152;
  if (v133 && (v151 & 1) == 0)
  {
    v196 = _Q22;
    if ((v49 & 1) != 0)
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + 4 * v134) = this[15].i32[0];
    MotorFactor = btTypedConstraint::getMotorFactor((btTypedConstraint *)this, this[75].f32[0], this[13].f32[1], this[13].f32[2], this[76].f32[1], v153 * *(float *)a2);
    v58 = *(float **)(a2 + 48);
    v58[v134] = v58[v134] + (float)((float)-(float)(v16 * MotorFactor) * this[76].f32[1]);
    v149 = *(_QWORD *)(a2 + 64);
    *(float *)(v149 + 4 * v134) = *(float *)(v149 + 4 * v134) - (float)(this[76].f32[2] * *(float *)a2);
    v150 = *(_QWORD *)(a2 + 72);
    *(float *)(v150 + 4 * v134) = *(float *)(v150 + 4 * v134) + (float)(this[76].f32[2] * *(float *)a2);
    _Q22 = v196;
  }
  if (!v129)
    goto LABEL_100;
  v58[v134] = v58[v134] + (float)((float)(v153 * *(float *)a2) * v131);
  if ((this[20].i8[9] & 1) != 0)
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + 4 * v134) = this[17].i32[0];
  if (v146 == v147)
  {
    *(_DWORD *)(v149 + 4 * v134) = -8388609;
LABEL_85:
    v155 = 2139095039;
    goto LABEL_86;
  }
  if (v132 != 1)
  {
    *(_DWORD *)(v149 + 4 * v134) = 0;
    goto LABEL_85;
  }
  *(_DWORD *)(v149 + 4 * v134) = -8388609;
  v155 = 0;
LABEL_86:
  *(_DWORD *)(v150 + 4 * v134) = v155;
  v157 = this[16].f32[3];
  if ((float)(1.0 - v157) < 0.0 || (float)(1.0 - v157) > 0.0)
  {
    v159 = vabds_f32(1.0, v157);
    v160 = (int8x16_t)vmulq_f32(_Q22, *a5);
    v161 = (int8x16_t)vmulq_f32(_Q22, *a6);
    v162 = v16
         * vsub_f32(vadd_f32(vpadd_f32(*(float32x2_t *)v160.i8, *(float32x2_t *)v160.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v160, v160, 8uLL)), vadd_f32(vpadd_f32(*(float32x2_t *)v161.i8, *(float32x2_t *)v161.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v161, v161, 8uLL))).f32[0];
    v158 = v58[v134];
    if (v132 == 1)
    {
      v163 = -(float)(v159 * v162);
      if (v162 >= 0.0 || v163 <= v158)
        goto LABEL_99;
    }
    else
    {
      v163 = -(float)(v159 * v162);
      if (v162 <= 0.0 || v163 >= v158)
        goto LABEL_99;
    }
    v58[v134] = v163;
    v158 = v163;
  }
  else
  {
    v158 = v58[v134];
  }
LABEL_99:
  v58[v134] = this[16].f32[1] * v158;
LABEL_100:
  v156 = 5;
LABEL_101:
  v166 = this[20].u8[5];
  if (this[20].i8[5])
  {
    v167 = this[75].f32[2];
    if (v167 > 0.0)
      v168 = 1;
    else
      v168 = 2;
    v169 = this[77].i8[0] == 0;
  }
  else
  {
    if (!this[77].i8[0])
      return;
    v169 = 0;
    v168 = 0;
    v167 = 0.0;
  }
  v170 = *(int *)(a2 + 40) * (uint64_t)v156;
  v171 = *(_QWORD *)(a2 + 16);
  v172 = 4 * v170;
  *(_QWORD *)(v171 + v172) = _Q22.i64[0];
  v173 = 4 * v170 + 8;
  *(_DWORD *)(v171 + v173) = _Q22.i32[2];
  v174 = *(_QWORD *)(a2 + 32);
  *(float32x2_t *)(v174 + v172) = vneg_f32(*(float32x2_t *)_Q22.f32);
  *(float *)(v174 + v173) = -v130;
  v175 = this[13].f32[3];
  v176 = this[14].f32[0];
  v178 = v175 == v176 && v166 != 0;
  v179 = this[20].i32[2];
  v180 = (float *)(a2 + 4);
  if ((v179 & 0x800) != 0)
    v180 = &this[17].f32[1];
  v181 = *v180;
  if (!v169 && !v178)
  {
    v197 = _Q22;
    v182 = this[14].f32[0];
    v183 = this[13].f32[3];
    if ((v179 & 4) != 0)
    {
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + 4 * v170) = this[16].i32[0];
      v183 = this[13].f32[3];
      v182 = this[14].f32[0];
    }
    v184 = btTypedConstraint::getMotorFactor((btTypedConstraint *)this, this[75].f32[1], v183, v182, this[77].f32[1], v181 * *(float *)a2);
    v58 = *(float **)(a2 + 48);
    v58[v170] = v184 * this[77].f32[1];
    *(float *)(*(_QWORD *)(a2 + 64) + 4 * v170) = -(float)(this[77].f32[2] * *(float *)a2);
    *(float *)(*(_QWORD *)(a2 + 72) + 4 * v170) = this[77].f32[2] * *(float *)a2;
    _Q22 = v197;
  }
  if (v166)
  {
    v58[v170] = v58[v170] + (float)((float)(v181 * *(float *)a2) * v167);
    if ((this[20].i8[9] & 4) != 0)
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + 4 * v170) = this[18].i32[0];
    if (v175 == v176)
    {
      *(_DWORD *)(*(_QWORD *)(a2 + 64) + 4 * v170) = -8388609;
    }
    else
    {
      v185 = *(_QWORD *)(a2 + 64);
      if (v168 != 1)
      {
        *(_DWORD *)(v185 + 4 * v170) = -8388609;
        v186 = 0;
        goto LABEL_129;
      }
      *(_DWORD *)(v185 + 4 * v170) = 0;
    }
    v186 = 2139095039;
LABEL_129:
    *(_DWORD *)(*(_QWORD *)(a2 + 72) + 4 * v170) = v186;
    v187 = this[17].f32[3];
    if ((float)(1.0 - v187) < 0.0 || (float)(1.0 - v187) > 0.0)
    {
      v189 = vabds_f32(1.0, v187);
      v190 = (int8x16_t)vmulq_f32(_Q22, *(float32x4_t *)(this[2].i64[1] + 368));
      v191 = (int8x16_t)vmulq_f32(_Q22, *(float32x4_t *)(this[3].i64[0] + 368));
      LODWORD(v192) = vsub_f32(vadd_f32(vpadd_f32(*(float32x2_t *)v190.i8, *(float32x2_t *)v190.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v190, v190, 8uLL)), vadd_f32(vpadd_f32(*(float32x2_t *)v191.i8, *(float32x2_t *)v191.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v191, v191, 8uLL))).u32[0];
      v188 = v58[v170];
      if (v168 == 1)
      {
        v193 = -(float)(v189 * v192);
        if (v192 >= 0.0 || v193 <= v188)
          goto LABEL_142;
      }
      else
      {
        v193 = -(float)(v189 * v192);
        if (v192 <= 0.0 || v193 >= v188)
          goto LABEL_142;
      }
      v58[v170] = v193;
      v188 = v193;
    }
    else
    {
      v188 = v58[v170];
    }
LABEL_142:
    v58[v170] = this[17].f32[1] * v188;
  }
}

btSliderConstraint *btSliderConstraint::setParam(btSliderConstraint *this, int a2, float a3, int a4)
{
  int v4;

  switch(a2)
  {
    case 4:
      if (a4 <= 0)
      {
        this->var34 = a3;
        v4 = 256;
      }
      else if (a4 > 2)
      {
        if (a4 == 3)
        {
          this->var38 = a3;
          v4 = 1024;
        }
        else
        {
          if (a4 > 5)
            return this;
          *(float *)&this->var46 = a3;
          v4 = 64;
        }
      }
      else
      {
        this->var42 = a3;
        v4 = 16;
      }
      break;
    case 3:
      if (a4 <= 0)
      {
        this->var26 = a3;
        v4 = 1;
      }
      else
      {
        if (a4 != 3)
          return this;
        this->var30 = a3;
        v4 = 4;
      }
      break;
    case 2:
      if (a4 <= 0)
      {
        this->var31 = a3;
        v4 = 512;
      }
      else if (a4 > 2)
      {
        if (a4 == 3)
        {
          this->var35 = a3;
          v4 = 2048;
        }
        else
        {
          if (a4 > 5)
            return this;
          this->var43 = a3;
          v4 = 128;
        }
      }
      else
      {
        this->var39 = a3;
        v4 = 32;
      }
      break;
    default:
      return this;
  }
  LODWORD(this->var49[0].var0.var0.var0[0]) |= v4;
  return this;
}

float btSliderConstraint::getParam(btSliderConstraint *this, int a2, int a3)
{
  switch(a2)
  {
    case 4:
      if (a3 <= 0)
        return this->var34;
      if (a3 <= 2)
        return this->var42;
      if (a3 == 3)
        return this->var38;
      if (a3 <= 5)
        return *(float *)&this->var46;
      break;
    case 3:
      if (a3 <= 0)
        return this->var26;
      if (a3 == 3)
        return this->var30;
      break;
    case 2:
      if (a3 <= 0)
        return this->var31;
      if (a3 <= 2)
        return this->var39;
      if (a3 == 3)
        return this->var35;
      if (a3 <= 5)
        return this->var43;
      break;
  }
  return 3.4028e38;
}

void btSliderConstraint::~btSliderConstraint(btSliderConstraint *this)
{
  this->var0 = (void **)off_1EA5968E0;
}

{
  this->var0 = (void **)off_1EA5968E0;
  btAlignedFreeInternal((void **)&this->var0);
}

uint64_t btSliderConstraint::calculateSerializeBufferSize(btSliderConstraint *this)
{
  return 216;
}

const char *btSliderConstraint::serialize(uint64_t a1, int32x4_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int32x4_t *v7;
  uint64_t i;
  uint64_t j;
  uint64_t v10;
  uint64_t v11;
  int32x4_t *v12;
  uint64_t k;
  uint64_t m;
  __int32 v15;

  btTypedConstraint::serialize(a1, (uint64_t)a2, a3);
  v5 = 0;
  v6 = a1 + 80;
  v7 = a2 + 4;
  do
  {
    for (i = 0; i != 4; ++i)
      v7->i32[i] = *(_DWORD *)(v6 + i * 4);
    ++v5;
    v6 += 16;
    ++v7;
  }
  while (v5 != 3);
  for (j = 0; j != 4; ++j)
    a2[7].i32[j] = *(_DWORD *)(a1 + 128 + j * 4);
  v10 = 0;
  v11 = a1 + 144;
  v12 = a2 + 8;
  do
  {
    for (k = 0; k != 4; ++k)
      v12->i32[k] = *(_DWORD *)(v11 + k * 4);
    ++v10;
    v11 += 16;
    ++v12;
  }
  while (v10 != 3);
  for (m = 0; m != 4; ++m)
    a2[11].i32[m] = *(_DWORD *)(a1 + 192 + m * 4);
  a2[12] = vrev64q_s32(*(int32x4_t *)(a1 + 212));
  v15 = *(unsigned __int8 *)(a1 + 73);
  a2[13].i32[0] = *(unsigned __int8 *)(a1 + 208);
  a2[13].i32[1] = v15;
  return "btSliderConstraintData";
}

uint64_t btTypedConstraint::btTypedConstraint(uint64_t a1, int a2, uint64_t a3)
{
  *(_DWORD *)(a1 + 8) = a2;
  *(_QWORD *)a1 = off_1EA5968E0;
  *(_QWORD *)(a1 + 12) = -1;
  *(_DWORD *)(a1 + 24) = 2139095039;
  *(_WORD *)(a1 + 28) = 1;
  *(_DWORD *)(a1 + 32) = -1;
  *(_QWORD *)(a1 + 40) = a3;
  btTypedConstraint::getFixedBody((btTypedConstraint *)a1);
  *(_QWORD *)(a1 + 48) = &btTypedConstraint::getFixedBody(void)::s_fixed;
  *(_QWORD *)(a1 + 56) = 0x3E99999A00000000;
  *(_QWORD *)(a1 + 64) = 0;
  return a1;
}

void *btTypedConstraint::getFixedBody(btTypedConstraint *this)
{
  unsigned __int8 v1;
  unsigned __int128 v3;

  {
    v3 = 0uLL;
    btRigidBody::btRigidBody(&btTypedConstraint::getFixedBody(void)::s_fixed, 0, 0, &v3, 0.0);
    __cxa_atexit((void (*)(void *))btRigidBody::~btRigidBody, &btTypedConstraint::getFixedBody(void)::s_fixed, &dword_1DCCB8000);
  }
  v3 = 0uLL;
  btRigidBody::setMassProps((btRigidBody *)&btTypedConstraint::getFixedBody(void)::s_fixed, 0.0, (const btVector3 *)&v3);
  return &btTypedConstraint::getFixedBody(void)::s_fixed;
}

double btTypedConstraint::btTypedConstraint(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  double result;

  *(_DWORD *)(a1 + 8) = a2;
  *(_QWORD *)a1 = off_1EA5968E0;
  *(_QWORD *)(a1 + 12) = -1;
  *(_DWORD *)(a1 + 24) = 2139095039;
  *(_WORD *)(a1 + 28) = 1;
  *(_DWORD *)(a1 + 32) = -1;
  *(_QWORD *)(a1 + 40) = a3;
  *(_QWORD *)(a1 + 48) = a4;
  result = 0.000000381469818;
  *(_QWORD *)(a1 + 56) = 0x3E99999A00000000;
  *(_QWORD *)(a1 + 64) = 0;
  return result;
}

float btTypedConstraint::getMotorFactor(btTypedConstraint *this, float a2, float a3, float a4, float a5, float a6)
{
  float v6;
  float v8;
  float v9;

  v6 = 1.0;
  if (a3 <= a4)
  {
    v6 = 0.0;
    if (a3 != a4)
    {
      v8 = a5 / a6;
      if (v8 >= 0.0)
      {
        if (v8 <= 0.0)
          return v6;
        if (a2 > a4 || (float)(a4 - v8) >= a2)
        {
          if (a2 <= a4)
            return 1.0;
          else
            return 0.0;
        }
        v9 = a4 - a2;
      }
      else
      {
        if (a2 < a3 || (float)(a3 - v8) <= a2)
        {
          if (a2 >= a3)
            return 1.0;
          else
            return 0.0;
        }
        v9 = a3 - a2;
      }
      return v9 / v8;
    }
  }
  return v6;
}

const char *btTypedConstraint::serialize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  *(_QWORD *)a2 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 56))(a3, *(_QWORD *)(a1 + 40));
  *(_QWORD *)(a2 + 8) = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 56))(a3, *(_QWORD *)(a1 + 48));
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 80))(a3, a1);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 56))(a3, v6);
  *(_QWORD *)(a2 + 16) = v7;
  if (v7)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 96))(a3, v6);
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a2 + 36) = *(unsigned __int8 *)(a1 + 29);
  *(_DWORD *)(a2 + 52) = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a2 + 60) = *(unsigned __int8 *)(a1 + 28);
  *(_QWORD *)(a2 + 28) = *(_QWORD *)(a1 + 12);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 56);
  *(_DWORD *)(a2 + 48) = 0;
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(unsigned int *)(v8 + 548);
  if ((int)v9 >= 1)
  {
    v10 = *(_QWORD **)(v8 + 560);
    do
    {
      if (*v10 == a1)
        *(_DWORD *)(a2 + 48) = 1;
      ++v10;
      --v9;
    }
    while (v9);
  }
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(unsigned int *)(v11 + 548);
  if ((int)v12 >= 1)
  {
    v13 = *(_QWORD **)(v11 + 560);
    do
    {
      if (*v13 == a1)
        *(_DWORD *)(a2 + 48) = 1;
      ++v13;
      --v12;
    }
    while (v12);
  }
  return "btTypedConstraintData";
}

void btRigidBody::~btRigidBody(btRigidBody *this)
{
  *(_QWORD *)this = &off_1EA595380;
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)this + 544);
  C3DSceneSourcePerformConsistencyCheck(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_1EA595380;
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)this + 544);
  v2 = (void **)C3DSceneSourcePerformConsistencyCheck(this);
  btAlignedFreeInternal(v2);
}

void btAngularLimit::test(btAngularLimit *this, float a2)
{
  float *p_var5;
  float var1;
  float v5;
  float v6;

  *(_QWORD *)&this->var5 = 0;
  p_var5 = &this->var5;
  this->var7 = 0;
  var1 = this->var1;
  if (var1 >= 0.0)
  {
    v5 = fmodf(a2 - this->var0, 6.2832);
    if (v5 >= -3.1416)
    {
      if (v5 > 3.1416)
        v5 = v5 + -6.2832;
    }
    else
    {
      v5 = v5 + 6.2832;
    }
    if (v5 >= (float)-var1)
    {
      if (v5 <= var1)
        return;
      this->var7 = 1;
      v6 = var1 - v5;
      __asm { FMOV            V0.2S, #-1.0 }
    }
    else
    {
      this->var7 = 1;
      v6 = -(float)(var1 + v5);
      __asm { FMOV            V0.2S, #1.0 }
    }
    *(float *)&_D0 = v6;
    *(_QWORD *)p_var5 = _D0;
  }
}

void btAngularLimit::getHigh(btAngularLimit *this)
{
  fmodf(this->var0 + this->var1, 6.2832);
}

void btAngularLimit::getLow(btAngularLimit *this)
{
  fmodf(this->var0 - this->var1, 6.2832);
}

uint64_t btDiscreteDynamicsWorld::btDiscreteDynamicsWorld(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v7;
  uint64_t v8;
  btSequentialImpulseConstraintSolver *v9;
  btSimulationIslandManager *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  btDynamicsWorld::btDynamicsWorld(a1, a2, a3);
  v7 = 0;
  *(_QWORD *)v8 = off_1EA5974C8;
  *(_QWORD *)(v8 + 292) = 0;
  *(_QWORD *)(v8 + 324) = 0;
  *(_QWORD *)(v8 + 380) = 0;
  *(_QWORD *)(v8 + 420) = 0;
  *(_BYTE *)(v8 + 256) = 1;
  *(_QWORD *)(v8 + 248) = 0;
  *(_DWORD *)(v8 + 236) = 0;
  *(_DWORD *)(v8 + 240) = 0;
  *(_QWORD *)(v8 + 264) = 0;
  *(_QWORD *)(v8 + 272) = a4;
  *(_BYTE *)(v8 + 312) = 1;
  *(_QWORD *)(v8 + 304) = 0;
  *(_BYTE *)(v8 + 344) = 1;
  *(_QWORD *)(v8 + 336) = 0;
  *(_OWORD *)(v8 + 352) = xmmword_1DD02CF40;
  *(_DWORD *)(v8 + 368) = 0;
  *(_WORD *)(v8 + 374) = 0;
  *(_BYTE *)(v8 + 400) = 1;
  *(_QWORD *)(v8 + 392) = 0;
  *(_DWORD *)(v8 + 408) = 0;
  *(_BYTE *)(v8 + 440) = 1;
  *(_QWORD *)(v8 + 432) = 0;
  if (!a4)
  {
    v9 = (btSequentialImpulseConstraintSolver *)btAlignedAllocInternal(320, 16);
    *(_QWORD *)(a1 + 272) = btSequentialImpulseConstraintSolver::btSequentialImpulseConstraintSolver(v9);
    v7 = 1;
  }
  *(_BYTE *)(a1 + 373) = v7;
  v10 = (btSimulationIslandManager *)btAlignedAllocInternal(112, 16);
  btSimulationIslandManager::btSimulationIslandManager(v10);
  *(_QWORD *)(a1 + 280) = v11;
  *(_BYTE *)(a1 + 372) = 1;
  v12 = btAlignedAllocInternal(152, 16);
  v13 = *(_QWORD *)(a1 + 272);
  *(_QWORD *)v12 = &off_1EA597D18;
  *(_QWORD *)(v12 + 8) = 0;
  *(_QWORD *)(v12 + 16) = v13;
  *(_QWORD *)(v12 + 24) = 0;
  *(_DWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = 0;
  *(_QWORD *)(v12 + 48) = a2;
  *(_BYTE *)(v12 + 80) = 1;
  *(_QWORD *)(v12 + 72) = 0;
  *(_QWORD *)(v12 + 60) = 0;
  *(_BYTE *)(v12 + 112) = 1;
  *(_QWORD *)(v12 + 104) = 0;
  *(_QWORD *)(v12 + 92) = 0;
  *(_BYTE *)(v12 + 144) = 1;
  *(_QWORD *)(v12 + 136) = 0;
  *(_QWORD *)(v12 + 124) = 0;
  *(_QWORD *)(a1 + 264) = v12;
  return a1;
}

double btDynamicsWorld::btDynamicsWorld(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  double result;

  btCollisionWorld::btCollisionWorld(a1, a2, a3);
  *(_QWORD *)v3 = off_1EA595FB8;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  *(_OWORD *)(v3 + 144) = xmmword_1DD02CF50;
  *(_QWORD *)(v3 + 160) = 0xA00000000;
  *(_QWORD *)(v3 + 184) = 0x100000000;
  *(_OWORD *)(v3 + 168) = xmmword_1DD02CF60;
  *(_OWORD *)(v3 + 192) = xmmword_1DD02CF70;
  *(_QWORD *)(v3 + 208) = 0x200000104;
  *(_DWORD *)(v3 + 216) = 128;
  result = 5.28028251e237;
  *(_QWORD *)(v3 + 220) = 0x7149F2CA42C80000;
  *(_DWORD *)(v3 + 228) = 1065353216;
  return result;
}

void btDiscreteDynamicsWorld::~btDiscreteDynamicsWorld(btDiscreteDynamicsWorld *this)
{
  void (***v2)(_QWORD);

  *(_QWORD *)this = off_1EA5974C8;
  if (*((_BYTE *)this + 372))
  {
    (***((void (****)(_QWORD))this + 35))(*((_QWORD *)this + 35));
    btAlignedFreeInternal(*((void ***)this + 35));
  }
  v2 = (void (***)(_QWORD))*((_QWORD *)this + 33);
  if (v2)
  {
    (**v2)(v2);
    btAlignedFreeInternal(*((void ***)this + 33));
  }
  if (*((_BYTE *)this + 373))
  {
    (***((void (****)(_QWORD))this + 34))(*((_QWORD *)this + 34));
    btAlignedFreeInternal(*((void ***)this + 34));
  }
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)this + 416);
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)this + 376);
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)this + 320);
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)this + 288);
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)this + 232);
  btCollisionWorld::~btCollisionWorld(this);
}

{
  void **v1;

  btDiscreteDynamicsWorld::~btDiscreteDynamicsWorld(this);
  btAlignedFreeInternal(v1);
}

void btDiscreteDynamicsWorld::saveKinematicState(btDiscreteDynamicsWorld *this, __n128 a2, uint64_t a3, uint64_t a4, uint64_t a5, float *a6)
{
  int v6;
  unsigned __int32 v7;
  uint64_t i;
  uint64_t v10;
  BOOL v11;

  v6 = *((_DWORD *)this + 3);
  if (v6 >= 1)
  {
    v7 = a2.n128_u32[0];
    for (i = 0; i < v6; ++i)
    {
      v10 = *(_QWORD *)(*((_QWORD *)this + 3) + 8 * i);
      if (v10)
        v11 = (*(_DWORD *)(v10 + 264) & 2) == 0;
      else
        v11 = 1;
      if (!v11 && *(_DWORD *)(v10 + 244) != 2 && (*(_BYTE *)(v10 + 232) & 2) != 0)
      {
        a2.n128_u32[0] = v7;
        a2 = btRigidBody::saveKinematicState((btRigidBody *)v10, a2, a3, a4, a5, a6);
        v6 = *((_DWORD *)this + 3);
      }
    }
  }
}

uint64_t btDiscreteDynamicsWorld::debugDrawWorld(btDiscreteDynamicsWorld *this)
{
  uint64_t v2;
  int v3;
  unsigned int v4;
  float32x4_t *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  btCollisionWorld::debugDrawWorld(this);
  if ((*(uint64_t (**)(btDiscreteDynamicsWorld *))(*(_QWORD *)this + 40))(this))
  {
    v2 = (*(uint64_t (**)(btDiscreteDynamicsWorld *))(*(_QWORD *)this + 40))(this);
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 96))(v2) & 0x1800) != 0)
    {
      v3 = (*(uint64_t (**)(btDiscreteDynamicsWorld *))(*(_QWORD *)this + 208))(this);
      if (v3 >= 1)
      {
        v4 = v3 + 1;
        do
        {
          v5 = (float32x4_t *)(*(uint64_t (**)(btDiscreteDynamicsWorld *, _QWORD))(*(_QWORD *)this + 216))(this, v4 - 2);
          btDiscreteDynamicsWorld::debugDrawConstraint(this, v5);
          --v4;
        }
        while (v4 > 1);
      }
    }
  }
  result = (*(uint64_t (**)(btDiscreteDynamicsWorld *))(*(_QWORD *)this + 40))(this);
  if (result)
  {
    v7 = (*(uint64_t (**)(btDiscreteDynamicsWorld *))(*(_QWORD *)this + 40))(this);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 96))(v7);
    if ((result & 0x4003) != 0)
    {
      result = (*(uint64_t (**)(btDiscreteDynamicsWorld *))(*(_QWORD *)this + 40))(this);
      if (result)
      {
        v8 = (*(uint64_t (**)(btDiscreteDynamicsWorld *))(*(_QWORD *)this + 40))(this);
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 96))(v8);
        if ((_DWORD)result)
        {
          if (*((int *)this + 95) >= 1)
          {
            v9 = 0;
            do
            {
              v10 = *(_QWORD *)(*((_QWORD *)this + 49) + 8 * v9);
              result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 24))(v10, *((_QWORD *)this + 13));
              ++v9;
            }
            while (v9 < *((int *)this + 95));
          }
        }
      }
    }
  }
  return result;
}

void btDiscreteDynamicsWorld::debugDrawConstraint(btDiscreteDynamicsWorld *this, float32x4_t *a2)
{
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  __int16 v7;
  float32x4_t v8;
  float32x4_t v9;
  unsigned int v10;
  __int16 v11;
  float32x4_t v12;
  float32x4_t v13;
  uint64_t v14;
  float32x4_t v15;
  float32x4_t v16;
  uint64_t v17;
  int8x16_t v18;
  float32x4_t v19;
  float v20;
  float v21;
  float v22;
  float v23;
  uint64_t v24;
  float32x4_t v25;
  float Angle;
  float v27;
  __float2 v28;
  __float2 v29;
  int8x16_t v30;
  int8x16_t v31;
  float32x4_t v32;
  float v33;
  float v34;
  uint64_t v35;
  __n128 v36;
  __n128 v37;
  __n128 v38;
  __n128 v39;
  __n128 v40;
  float32x4_t *v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  float32x4_t v55;
  float32x4_t *v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  uint64_t v73;
  float32x4_t v74;
  float32x4_t v75;
  uint64_t v76;
  float32x4_t *v77;
  uint64_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  int8x16_t v82;
  float32x4_t v83;
  int8x16_t v84;
  float32x4_t v85;
  int8x16_t v86;
  int8x16_t v87;
  uint64_t v88;
  unsigned __int32 v89;
  unsigned __int32 v90;
  uint64_t v91;
  __n128 v92;
  __n128 v93;
  __n128 v94;
  __n128 v95;
  __n128 v96;
  float32x4_t v97;
  float32x4_t *v98;
  float32x4_t v99;
  int8x16_t v100;
  int8x16_t v101;
  uint64_t v102;
  float32x4_t v103;
  float32x4_t *v104;
  float32x4_t v105;
  int8x16_t v106;
  int8x16_t v107;
  uint64_t v108;
  float32x4_t *v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  int8x16_t v120;
  int8x16_t v121;
  int8x16_t v122;
  float32x4_t v123;
  float32x4_t *v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  int8x16_t v135;
  int8x16_t v136;
  int8x16_t v137;
  float32x4_t v138;
  uint64_t v139;
  float32x4_t *v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  int8x16_t v150;
  int8x16_t v151;
  int8x16_t v152;
  float32x4_t v153;
  float32x4_t v154;
  uint64_t v155;
  int v156;
  float32x4_t v157;
  int8x16_t v158;
  int8x16_t v159;
  float32x4_t v160;
  int8x16_t v161;
  int8x16_t v162;
  uint64_t v163;
  uint64_t v164;
  float v165;
  float v166;
  float32x4_t *v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  uint64_t v175;
  __n128 v176;
  __n128 v177;
  __n128 v178;
  __n128 v179;
  __n128 v180;
  float32x4_t v181;
  float32x4_t v182;
  float32x4_t v183;
  uint64_t v184;
  uint64_t v185;
  float32x4_t *v186;
  float32x4_t v187;
  float32x4_t v188;
  float32x4_t v189;
  float32x4_t v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t v195;
  int8x16_t v196;
  int8x16_t v197;
  int8x16_t v198;
  float32x4_t v199;
  float32x4_t v200;
  uint64_t v201;
  btAngularLimit *v202;
  float v203;
  float v204;
  float v205;
  float v206;
  uint64_t v207;
  __n128 v208;
  __n128 v209;
  __n128 v210;
  __n128 v211;
  __n128 v212;
  float32x4_t v213;
  int8x16_t v214;
  int8x16_t v215;
  float32x4_t v216;
  uint64_t v217;
  __n128 v218;
  __n128 v219;
  __n128 v220;
  __n128 v221;
  __n128 v222;
  _QWORD v223[2];
  float32x4_t v224;
  float32x4_t v225;
  int8x16_t v226;
  float32x4_t v227;
  float32x4_t v228;
  float32x4_t v229;
  float32x4_t v230;
  float32x4_t v231;
  float32x4_t v232;
  float32x4_t v233;

  v4 = (*(uint64_t (**)(btDiscreteDynamicsWorld *))(*(_QWORD *)this + 40))(this);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 96))(v4);
  v6 = (*(uint64_t (**)(btDiscreteDynamicsWorld *))(*(_QWORD *)this + 40))(this);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 96))(v6);
  v10 = a2[3].u32[3];
  if (*(float *)&v10 > 0.0)
  {
    v11 = v7;
    switch(a2->i32[2])
    {
      case 3:
        v230 = (float32x4_t)xmmword_1DD007970;
        v231 = (float32x4_t)xmmword_1DD007920;
        v232 = (float32x4_t)xmmword_1DD007600;
        v97 = a2[23];
        v98 = (float32x4_t *)a2[2].i64[1];
        v99 = vmulq_f32(v97, v98[1]);
        v100 = (int8x16_t)vmulq_f32(v97, v98[2]);
        v101 = (int8x16_t)vmulq_f32(v97, v98[3]);
        v101.i32[3] = 0;
        *(float32x2_t *)v99.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v99.f32, *(float32x2_t *)v100.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v99, (int8x16_t)v99, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v100, v100, 8uLL)));
        *(float32x2_t *)&v99.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v101.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v101, v101, 8uLL)), 0);
        v233 = vaddq_f32(v99, v98[4]);
        v102 = (*(uint64_t (**)(btDiscreteDynamicsWorld *))(*(_QWORD *)this + 40))(this);
        (*(void (**)(uint64_t, float32x4_t *, float))(*(_QWORD *)v102 + 112))(v102, &v230, *(float *)&v10);
        v103 = a2[24];
        v104 = (float32x4_t *)a2[3].i64[0];
        v105 = vmulq_f32(v103, v104[1]);
        v106 = (int8x16_t)vmulq_f32(v103, v104[2]);
        v107 = (int8x16_t)vmulq_f32(v103, v104[3]);
        v107.i32[3] = 0;
        *(float32x2_t *)v105.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v105.f32, *(float32x2_t *)v106.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v105, (int8x16_t)v105, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v106, v106, 8uLL)));
        *(float32x2_t *)&v105.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v107.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v107, v107, 8uLL)), 0);
        v233 = vaddq_f32(v105, v104[4]);
        if ((v5 & 0x800) != 0)
        {
          v108 = (*(uint64_t (**)(btDiscreteDynamicsWorld *))(*(_QWORD *)this + 40))(this);
          (*(void (**)(uint64_t, float32x4_t *, float))(*(_QWORD *)v108 + 112))(v108, &v230, *(float *)&v10);
        }
        break;
      case 4:
        v109 = (float32x4_t *)a2[2].i64[1];
        v110 = v109[1];
        v111 = v109[2];
        v112 = a2[41];
        v113 = a2[42];
        v112.i32[3] = 0;
        v113.i32[3] = 0;
        v114 = a2[43];
        v115 = a2[44];
        v114.i32[3] = 0;
        v116 = v109[3];
        v117 = v109[4];
        v118 = vmlaq_lane_f32(vmulq_n_f32(v112, v116.f32[0]), v113, *(float32x2_t *)v116.f32, 1);
        v119 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v112, v111.f32[0]), v113, *(float32x2_t *)v111.f32, 1), v114, v111, 2);
        v120 = (int8x16_t)vmulq_f32(v110, v115);
        v121 = (int8x16_t)vmulq_f32(v111, v115);
        v122 = (int8x16_t)vmulq_f32(v116, v115);
        v122.i32[3] = 0;
        v123 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v112, v110.f32[0]), v113, *(float32x2_t *)v110.f32, 1), v114, v110, 2);
        *(float32x2_t *)v110.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v120.i8, *(float32x2_t *)v121.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v120, v120, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v121, v121, 8uLL)));
        *(float32x2_t *)&v110.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v122.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v122, v122, 8uLL)), 0);
        v230 = v123;
        v231 = v119;
        v232 = vmlaq_laneq_f32(v118, v114, v116, 2);
        v233 = vaddq_f32(v117, v110);
        if ((v5 & 0x800) != 0)
        {
          v185 = (*(uint64_t (**)(btDiscreteDynamicsWorld *))(*(_QWORD *)this + 40))(this);
          (*(void (**)(uint64_t, float32x4_t *, float))(*(_QWORD *)v185 + 112))(v185, &v230, *(float *)&v10);
          v186 = (float32x4_t *)a2[3].i64[0];
          v187 = v186[1];
          v188 = v186[2];
          v189 = a2[45];
          v190 = a2[46];
          v189.i32[3] = 0;
          v190.i32[3] = 0;
          v191 = a2[47];
          v192 = a2[48];
          v191.i32[3] = 0;
          v193 = v186[3];
          v194 = vmlaq_lane_f32(vmulq_n_f32(v189, v193.f32[0]), v190, *(float32x2_t *)v193.f32, 1);
          v195 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v189, v188.f32[0]), v190, *(float32x2_t *)v188.f32, 1), v191, v188, 2);
          v196 = (int8x16_t)vmulq_f32(v187, v192);
          v197 = (int8x16_t)vmulq_f32(v188, v192);
          v198 = (int8x16_t)vmulq_f32(v193, v192);
          v198.i32[3] = 0;
          v199 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v189, v187.f32[0]), v190, *(float32x2_t *)v187.f32, 1), v191, v187, 2);
          *(float32x2_t *)v187.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v196.i8, *(float32x2_t *)v197.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v196, v196, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v197, v197, 8uLL)));
          *(float32x2_t *)&v187.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v198.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v198, v198, 8uLL)), 0);
          v200 = vaddq_f32(v186[4], v187);
          v230 = v199;
          v231 = v195;
          v232 = vmlaq_laneq_f32(v194, v191, v193, 2);
          v233 = v200;
          v201 = (*(uint64_t (**)(btDiscreteDynamicsWorld *))(*(_QWORD *)this + 40))(this);
          (*(void (**)(uint64_t, float32x4_t *, float))(*(_QWORD *)v201 + 112))(v201, &v230, *(float *)&v10);
        }
        else
        {
          v124 = (float32x4_t *)a2[3].i64[0];
          v125 = a2[45];
          v126 = a2[46];
          v125.i32[3] = 0;
          v126.i32[3] = 0;
          v127 = v124[1];
          v128 = v124[2];
          v129 = a2[47];
          v130 = a2[48];
          v129.i32[3] = 0;
          v131 = v124[3];
          v132 = v124[4];
          v133 = vmlaq_lane_f32(vmulq_n_f32(v125, v131.f32[0]), v126, *(float32x2_t *)v131.f32, 1);
          v134 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v125, v128.f32[0]), v126, *(float32x2_t *)v128.f32, 1), v129, v128, 2);
          v135 = (int8x16_t)vmulq_f32(v127, v130);
          v136 = (int8x16_t)vmulq_f32(v128, v130);
          v137 = (int8x16_t)vmulq_f32(v131, v130);
          v137.i32[3] = 0;
          v138 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v125, v127.f32[0]), v126, *(float32x2_t *)v127.f32, 1), v129, v127, 2);
          *(float32x2_t *)v126.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v135.i8, *(float32x2_t *)v136.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v135, v135, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v136, v136, 8uLL)));
          *(float32x2_t *)&v126.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v137.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v137, v137, 8uLL)), 0);
          v230 = v138;
          v231 = v134;
          v232 = vmlaq_laneq_f32(v133, v129, v131, 2);
          v233 = vaddq_f32(v132, v126);
        }
        v202 = (btAngularLimit *)&a2[49].u32[2];
        btAngularLimit::getLow(v202);
        v204 = v203;
        btAngularLimit::getHigh(v202);
        if (v204 != v205 && (v11 & 0x1000) != 0)
        {
          if (v204 <= v205)
          {
            v206 = v205;
          }
          else
          {
            v204 = 0.0;
            v206 = 6.2832;
          }
          v229.i64[0] = __PAIR64__(v231.u32[2], v230.u32[2]);
          v229.i64[1] = v232.u32[2];
          v228.i64[0] = __PAIR64__(v231.u32[0], v230.u32[0]);
          v228.i64[1] = v232.u32[0];
          v207 = (*(uint64_t (**)(btDiscreteDynamicsWorld *))(*(_QWORD *)this + 40))(this);
          v227 = 0uLL;
          v208.n128_u32[0] = 10.0;
          v209.n128_u32[0] = v10;
          v210.n128_u32[0] = v10;
          v211.n128_f32[0] = v204;
          v212.n128_f32[0] = v206;
          (*(void (**)(__n128, __n128, __n128, __n128, __n128))(*(_QWORD *)v207 + 120))(v209, v210, v211, v212, v208);
        }
        break;
      case 5:
        v41 = (float32x4_t *)a2[2].i64[1];
        v42 = v41[1];
        v43 = v41[2];
        v44 = a2[23];
        v45 = a2[24];
        v44.i32[3] = 0;
        v45.i32[3] = 0;
        v46 = a2[25];
        v47 = a2[26];
        v46.i32[3] = 0;
        v48 = v41[3];
        v49 = v41[4];
        v50 = vmlaq_lane_f32(vmulq_n_f32(v44, v48.f32[0]), v45, *(float32x2_t *)v48.f32, 1);
        v51 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v44, v43.f32[0]), v45, *(float32x2_t *)v43.f32, 1), v46, v43, 2);
        v52 = (int8x16_t)vmulq_f32(v42, v47);
        v53 = (int8x16_t)vmulq_f32(v43, v47);
        v54 = (int8x16_t)vmulq_f32(v48, v47);
        v54.i32[3] = 0;
        v55 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v44, v42.f32[0]), v45, *(float32x2_t *)v42.f32, 1), v46, v42, 2);
        *(float32x2_t *)v42.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v52.i8, *(float32x2_t *)v53.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v52, v52, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v53, v53, 8uLL)));
        *(float32x2_t *)&v42.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v54.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v54, v54, 8uLL)), 0);
        v230 = v55;
        v231 = v51;
        v232 = vmlaq_laneq_f32(v50, v46, v48, 2);
        v233 = vaddq_f32(v49, v42);
        if ((v5 & 0x800) != 0)
        {
          v139 = (*(uint64_t (**)(btDiscreteDynamicsWorld *))(*(_QWORD *)this + 40))(this);
          (*(void (**)(uint64_t, float32x4_t *, float))(*(_QWORD *)v139 + 112))(v139, &v230, *(float *)&v10);
          v140 = (float32x4_t *)a2[3].i64[0];
          v141 = v140[1];
          v142 = v140[2];
          v143 = a2[27];
          v144 = a2[28];
          v143.i32[3] = 0;
          v144.i32[3] = 0;
          v145 = a2[29];
          v146 = a2[30];
          v145.i32[3] = 0;
          v147 = v140[3];
          v148 = vmlaq_lane_f32(vmulq_n_f32(v143, v147.f32[0]), v144, *(float32x2_t *)v147.f32, 1);
          v149 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v143, v142.f32[0]), v144, *(float32x2_t *)v142.f32, 1), v145, v142, 2);
          v150 = (int8x16_t)vmulq_f32(v141, v146);
          v151 = (int8x16_t)vmulq_f32(v142, v146);
          v152 = (int8x16_t)vmulq_f32(v147, v146);
          v152.i32[3] = 0;
          v153 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v143, v141.f32[0]), v144, *(float32x2_t *)v141.f32, 1), v145, v141, 2);
          *(float32x2_t *)v141.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v150.i8, *(float32x2_t *)v151.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v150, v150, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v151, v151, 8uLL)));
          *(float32x2_t *)&v141.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v152.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v152, v152, 8uLL)), 0);
          v154 = vaddq_f32(v140[4], v141);
          v230 = v153;
          v231 = v149;
          v232 = vmlaq_laneq_f32(v148, v145, v147, 2);
          v233 = v154;
          v155 = (*(uint64_t (**)(btDiscreteDynamicsWorld *))(*(_QWORD *)this + 40))(this);
          (*(void (**)(uint64_t, float32x4_t *, float))(*(_QWORD *)v155 + 112))(v155, &v230, *(float *)&v10);
        }
        else
        {
          v56 = (float32x4_t *)a2[3].i64[0];
          v57 = a2[27];
          v58 = a2[28];
          v57.i32[3] = 0;
          v58.i32[3] = 0;
          v59 = v56[1];
          v60 = v56[2];
          v61 = a2[29];
          v62 = a2[30];
          v61.i32[3] = 0;
          v63 = v56[3];
          v64 = v56[4];
          v65 = vmlaq_lane_f32(vmulq_n_f32(v57, v63.f32[0]), v58, *(float32x2_t *)v63.f32, 1);
          v66 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v57, v60.f32[0]), v58, *(float32x2_t *)v60.f32, 1), v61, v60, 2);
          v67 = (int8x16_t)vmulq_f32(v59, v62);
          v68 = (int8x16_t)vmulq_f32(v60, v62);
          v69 = (int8x16_t)vmulq_f32(v63, v62);
          v69.i32[3] = 0;
          v70 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v57, v59.f32[0]), v58, *(float32x2_t *)v59.f32, 1), v61, v59, 2);
          *(float32x2_t *)v58.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v67.i8, *(float32x2_t *)v68.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v67, v67, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v68, v68, 8uLL)));
          *(float32x2_t *)&v58.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v69.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v69, v69, 8uLL)), 0);
          v230 = v70;
          v231 = v66;
          v232 = vmlaq_laneq_f32(v65, v61, v63, 2);
          v233 = vaddq_f32(v64, v58);
        }
        if ((v11 & 0x1000) != 0)
        {
          v229 = (float32x4_t)xmmword_1DD02C8A0;
          btConeTwistConstraint::GetPointForAngle((btConeTwistConstraint *)a2, 6.0868, v10, (__n128 *)&v228);
          v156 = 0;
          v157 = vmulq_f32(v230, v228);
          v158 = (int8x16_t)vmulq_f32(v228, v231);
          v159 = (int8x16_t)vmulq_f32(v228, v232);
          v159.i32[3] = 0;
          *(float32x2_t *)v157.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v157.f32, *(float32x2_t *)v158.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v157, (int8x16_t)v157, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v158, v158, 8uLL)));
          *(float32x2_t *)&v157.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v159.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v159, v159, 8uLL)), 0);
          v228 = vaddq_f32(v157, v233);
          do
          {
            btConeTwistConstraint::GetPointForAngle((btConeTwistConstraint *)a2, (float)((float)v156 * 6.2832) * 0.03125, v10, (__n128 *)&v227);
            v160 = vmulq_f32(v230, v227);
            v161 = (int8x16_t)vmulq_f32(v227, v231);
            v162 = (int8x16_t)vmulq_f32(v227, v232);
            v162.i32[3] = 0;
            *(float32x2_t *)v160.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v160.f32, *(float32x2_t *)v161.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v160, (int8x16_t)v160, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v161, v161, 8uLL)));
            *(float32x2_t *)&v160.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v162.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v162, v162, 8uLL)), 0);
            v227 = vaddq_f32(v160, v233);
            v163 = (*(uint64_t (**)(btDiscreteDynamicsWorld *))(*(_QWORD *)this + 40))(this);
            (*(void (**)(uint64_t, float32x4_t *, float32x4_t *, float32x4_t *))(*(_QWORD *)v163 + 16))(v163, &v228, &v227, &v229);
            if ((v156 & 3) == 0)
            {
              v164 = (*(uint64_t (**)(btDiscreteDynamicsWorld *))(*(_QWORD *)this + 40))(this);
              (*(void (**)(uint64_t, float32x4_t *, float32x4_t *, float32x4_t *))(*(_QWORD *)v164 + 16))(v164, &v233, &v227, &v229);
            }
            v228 = v227;
            ++v156;
          }
          while (v156 != 32);
          v165 = a2[32].f32[2];
          v166 = a2[36].f32[1];
          v167 = (float32x4_t *)a2[3].i64[0];
          if (v167[24].f32[0] <= 0.0)
          {
            v167 = (float32x4_t *)a2[2].i64[1];
            v169 = v167[1];
            v168 = v167[2];
            v170 = v167[3];
            v171 = a2[23];
            v172 = a2[24];
            v171.i32[3] = 0;
            v172.i32[3] = 0;
            v174 = a2[25];
            v173 = a2[26];
          }
          else
          {
            v169 = v167[1];
            v168 = v167[2];
            v170 = v167[3];
            v171 = a2[27];
            v172 = a2[28];
            v171.i32[3] = 0;
            v172.i32[3] = 0;
            v174 = a2[29];
            v173 = a2[30];
          }
          v174.i32[3] = 0;
          v213 = vmulq_f32(v169, v173);
          v214 = (int8x16_t)vmulq_f32(v168, v173);
          v215 = (int8x16_t)vmulq_f32(v170, v173);
          v215.i32[3] = 0;
          *(float32x2_t *)v213.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v213.f32, *(float32x2_t *)v214.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v213, (int8x16_t)v213, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v214, v214, 8uLL)));
          *(float32x2_t *)&v213.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v215.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v215, v215, 8uLL)), 0);
          v216 = vaddq_f32(v167[4], v213);
          v230 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v171, v169.f32[0]), v172, *(float32x2_t *)v169.f32, 1), v174, v169, 2);
          v231 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v171, v168.f32[0]), v172, *(float32x2_t *)v168.f32, 1), v174, v168, 2);
          v232 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v171, v170.f32[0]), v172, *(float32x2_t *)v170.f32, 1), v174, v170, 2);
          v233 = v216;
          v227 = v216;
          *(int32x2_t *)v226.i8 = vzip1_s32(*(int32x2_t *)v230.f32, *(int32x2_t *)v231.f32);
          v226.i64[1] = v232.u32[0];
          *(int32x2_t *)v225.f32 = vzip2_s32(*(int32x2_t *)v230.f32, *(int32x2_t *)v231.f32);
          v225.i64[1] = v232.u32[1];
          v217 = (*(uint64_t (**)(btDiscreteDynamicsWorld *))(*(_QWORD *)this + 40))(this);
          v220.n128_u32[0] = 10.0;
          v221.n128_u32[0] = v10;
          v222.n128_u32[0] = v10;
          v218.n128_f32[0] = (float)-v166 - v165;
          v219.n128_f32[0] = v165 - v166;
          (*(void (**)(__n128, __n128, __n128, __n128, __n128))(*(_QWORD *)v217 + 120))(v221, v222, v218, v219, v220);
        }
        break;
      case 6:
      case 9:
        v12 = a2[76];
        v230 = a2[75];
        v231 = v12;
        v13 = a2[78];
        v232 = a2[77];
        v233 = v13;
        if ((v5 & 0x800) != 0)
        {
          v14 = (*(uint64_t (**)(btDiscreteDynamicsWorld *))(*(_QWORD *)this + 40))(this);
          (*(void (**)(uint64_t, float32x4_t *, float))(*(_QWORD *)v14 + 112))(v14, &v230, *(float *)&v10);
          v15 = a2[80];
          v230 = a2[79];
          v231 = v15;
          v16 = a2[82];
          v232 = a2[81];
          v233 = v16;
          v17 = (*(uint64_t (**)(btDiscreteDynamicsWorld *))(*(_QWORD *)this + 40))(this);
          (*(void (**)(uint64_t, float32x4_t *, float))(*(_QWORD *)v17 + 112))(v17, &v230, *(float *)&v10);
        }
        if ((v11 & 0x1000) != 0)
        {
          v18 = (int8x16_t)a2[76];
          v230 = a2[75];
          v231 = (float32x4_t)v18;
          v19 = a2[78];
          v232 = a2[77];
          v233 = v19;
          v229.i64[1] = v232.u32[2];
          *(int32x2_t *)v229.f32 = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v230, (int8x16_t)v230, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL));
          *(int32x2_t *)v228.f32 = vzip1_s32(*(int32x2_t *)v230.f32, *(int32x2_t *)v18.i8);
          v228.i64[1] = v232.u32[0];
          v20 = a2[66].f32[0];
          v21 = a2[66].f32[1];
          v22 = a2[70].f32[0];
          v23 = a2[70].f32[1];
          v24 = (*(uint64_t (**)(btDiscreteDynamicsWorld *))(*(_QWORD *)this + 40))(this);
          v227 = 0uLL;
          v25 = (float32x4_t)((__n128 (*)(uint64_t, float32x4_t *, float32x4_t *, float32x4_t *, float32x4_t *, float, float, float, float, float, float))*(_QWORD *)(*(_QWORD *)v24 + 128))(v24, &a2[82], &v229, &v228, &v227, *(float *)&v10 * 0.9, v20, v21, v22, v23, 10.0);
          v25.i64[0] = __PAIR64__(v231.u32[1], v230.u32[1]);
          v25.i32[2] = v232.i32[1];
          v228 = v25;
          Angle = btGeneric6DofConstraint::getAngle((btGeneric6DofConstraint *)a2, 1);
          v27 = btGeneric6DofConstraint::getAngle((btGeneric6DofConstraint *)a2, 2);
          v28 = __sincosf_stret(Angle);
          v29 = __sincosf_stret(v27);
          v227.f32[0] = (float)((float)((float)(v28.__cosval * v29.__sinval) * v228.f32[1])
                              + (float)((float)(v28.__cosval * v29.__cosval) * v228.f32[0]))
                      - (float)(v28.__sinval * v228.f32[2]);
          v227.f32[1] = (float)(v29.__cosval * v228.f32[1]) - (float)(v29.__sinval * v228.f32[0]);
          v227.f32[2] = (float)((float)((float)(v28.__sinval * v29.__sinval) * v228.f32[1])
                              + (float)((float)(v28.__sinval * v29.__cosval) * v228.f32[0]))
                      + (float)(v28.__cosval * v228.f32[2]);
          v31 = (int8x16_t)a2[80];
          v230 = a2[79];
          v30.i64[0] = __PAIR64__(v31.u32[0], v230.u32[0]);
          v231 = (float32x4_t)v31;
          v32 = a2[82];
          v232 = a2[81];
          v233 = v32;
          v30.i64[1] = v232.u32[0];
          v31.i64[0] = 0x8000000080000000;
          v31.i64[1] = 0x8000000080000000;
          v226 = veorq_s8(v30, v31);
          v33 = a2[62].f32[0];
          v34 = a2[62].f32[1];
          if (v33 <= v34)
          {
            if (v33 < v34)
            {
              v175 = (*(uint64_t (**)(btDiscreteDynamicsWorld *))(*(_QWORD *)this + 40))(this);
              v225 = 0uLL;
              v176.n128_u32[0] = 10.0;
              v177.n128_u32[0] = v10;
              v178.n128_u32[0] = v10;
              v179.n128_f32[0] = v33;
              v180.n128_f32[0] = v34;
              (*(void (**)(__n128, __n128, __n128, __n128, __n128))(*(_QWORD *)v175 + 120))(v177, v178, v179, v180, v176);
            }
          }
          else
          {
            v35 = (*(uint64_t (**)(btDiscreteDynamicsWorld *))(*(_QWORD *)this + 40))(this);
            v225 = 0uLL;
            v36.n128_u32[0] = -1068953637;
            v37.n128_u32[0] = 1078530011;
            v38.n128_u32[0] = 10.0;
            v39.n128_u32[0] = v10;
            v40.n128_u32[0] = v10;
            (*(void (**)(__n128, __n128, __n128, __n128, __n128))(*(_QWORD *)v35 + 120))(v39, v40, v36, v37, v38);
          }
          v181 = a2[76];
          v230 = a2[75];
          v231 = v181;
          v182 = a2[78];
          v232 = a2[77];
          v233 = v182;
          v183 = a2[49];
          v224 = a2[50];
          v225 = v183;
          v184 = (*(uint64_t (**)(btDiscreteDynamicsWorld *))(*(_QWORD *)this + 40))(this);
          v223[0] = 0;
          v223[1] = 0;
          (*(void (**)(uint64_t, float32x4_t *, float32x4_t *, float32x4_t *, _QWORD *))(*(_QWORD *)v184
                                                                                                 + 144))(v184, &v225, &v224, &v230, v223);
        }
        break;
      case 7:
        v71 = a2[60];
        v230 = a2[59];
        v231 = v71;
        v72 = a2[62];
        v232 = a2[61];
        v233 = v72;
        if ((v5 & 0x800) != 0)
        {
          v73 = (*(uint64_t (**)(btDiscreteDynamicsWorld *))(*(_QWORD *)this + 40))(this);
          (*(void (**)(uint64_t, float32x4_t *, float))(*(_QWORD *)v73 + 112))(v73, &v230, *(float *)&v10);
          v74 = a2[64];
          v230 = a2[63];
          v231 = v74;
          v75 = a2[66];
          v232 = a2[65];
          v233 = v75;
          v76 = (*(uint64_t (**)(btDiscreteDynamicsWorld *))(*(_QWORD *)this + 40))(this);
          (*(void (**)(uint64_t, float32x4_t *, float))(*(_QWORD *)v76 + 112))(v76, &v230, *(float *)&v10);
        }
        if ((v11 & 0x1000) != 0)
        {
          v77 = a2 + 59;
          v78 = 59;
          if (!a2[13].i8[0])
          {
            v78 = 63;
            v77 = a2 + 63;
          }
          v79 = v77[1];
          v80 = v77[2];
          v230 = a2[v78];
          v231 = v79;
          v8.i32[0] = a2[13].i32[1];
          v9.i32[0] = a2[13].i32[2];
          v81 = vmulq_f32(v230, v8);
          v82 = (int8x16_t)vmulq_f32(v79, v8);
          v83 = v77[3];
          v84 = (int8x16_t)vmulq_f32(v80, v8);
          v84.i32[3] = 0;
          v232 = v80;
          v233 = v83;
          *(float32x2_t *)v81.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v81.f32, *(float32x2_t *)v82.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v81, (int8x16_t)v81, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v82, v82, 8uLL)));
          *(float32x2_t *)&v81.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v84.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v84, v84, 8uLL)), 0);
          v85 = vmulq_f32(v230, v9);
          v86 = (int8x16_t)vmulq_f32(v79, v9);
          v87 = (int8x16_t)vmulq_f32(v80, v9);
          v87.i32[3] = 0;
          *(float32x2_t *)v85.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v85.f32, *(float32x2_t *)v86.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v85, (int8x16_t)v85, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v86, v86, 8uLL)));
          *(float32x2_t *)&v85.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v87.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v87, v87, 8uLL)), 0);
          v228 = vaddq_f32(v83, v85);
          v229 = vaddq_f32(v83, v81);
          v88 = (*(uint64_t (**)(btDiscreteDynamicsWorld *))(*(_QWORD *)this + 40))(this);
          v227 = 0uLL;
          (*(void (**)(uint64_t, float32x4_t *, float32x4_t *, float32x4_t *))(*(_QWORD *)v88 + 16))(v88, &v229, &v228, &v227);
          v227.i64[0] = __PAIR64__(v231.u32[0], v230.u32[0]);
          v227.i64[1] = v232.u32[0];
          v226.i64[0] = __PAIR64__(v231.u32[1], v230.u32[1]);
          v226.i64[1] = v232.u32[1];
          v89 = a2[13].u32[3];
          v90 = a2[14].u32[0];
          v91 = (*(uint64_t (**)(btDiscreteDynamicsWorld *))(*(_QWORD *)this + 40))(this);
          v225 = 0uLL;
          v92.n128_u32[0] = 10.0;
          v93.n128_u32[0] = v10;
          v94.n128_u32[0] = v10;
          v95.n128_u32[0] = v89;
          v96.n128_u32[0] = v90;
          (*(void (**)(__n128, __n128, __n128, __n128, __n128))(*(_QWORD *)v91 + 120))(v93, v94, v95, v96, v92);
        }
        break;
      default:
        return;
    }
  }
}

uint64_t btDiscreteDynamicsWorld::clearForces(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;

  if (*(int *)(this + 324) >= 1)
  {
    v1 = 0;
    do
    {
      v2 = *(_QWORD *)(*(_QWORD *)(this + 336) + 8 * v1);
      *(_OWORD *)(v2 + 464) = 0uLL;
      *(_OWORD *)(v2 + 480) = 0uLL;
      ++v1;
    }
    while (v1 < *(int *)(this + 324));
  }
  return this;
}

void btDiscreteDynamicsWorld::applyGravity(btDiscreteDynamicsWorld *this)
{
  int v1;
  uint64_t i;
  uint64_t v4;
  int v5;

  v1 = *((_DWORD *)this + 81);
  if (v1 >= 1)
  {
    for (i = 0; i < v1; ++i)
    {
      v4 = *(_QWORD *)(*((_QWORD *)this + 42) + 8 * i);
      v5 = *(_DWORD *)(v4 + 244);
      if (v5 != 2 && v5 != 5)
      {
        btRigidBody::applyGravity((btRigidBody *)v4);
        v1 = *((_DWORD *)this + 81);
      }
    }
  }
}

uint64_t btDiscreteDynamicsWorld::synchronizeSingleMotionState(uint64_t this, btRigidBody *a2, uint64_t a3, uint64_t a4, btTransform *a5)
{
  btMatrix3x3 v6;

  if (*((_QWORD *)a2 + 67))
  {
    if ((*((_BYTE *)a2 + 232) & 3) == 0)
    {
      btTransformUtil::integrateTransform((float32x4_t *)a2 + 5, (const btTransform *)((char *)a2 + 144), (float32x4_t *)a2 + 10, &v6, *(float *)(this + 368) * *((float *)a2 + 70), a5);
      return (*(uint64_t (**)(_QWORD, btMatrix3x3 *))(**((_QWORD **)a2 + 67) + 24))(*((_QWORD *)a2 + 67), &v6);
    }
  }
  return this;
}

uint64_t btDiscreteDynamicsWorld::synchronizeMotionStates(uint64_t this, uint64_t a2, uint64_t a3, uint64_t a4, btTransform *a5)
{
  uint64_t v5;
  int v6;
  uint64_t i;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t j;
  uint64_t v12;
  int v13;

  v5 = this;
  if (*(_BYTE *)(this + 374))
  {
    v6 = *(_DWORD *)(this + 12);
    if (v6 >= 1)
    {
      for (i = 0; i < v6; ++i)
      {
        v8 = *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * i);
        if (v8)
          v9 = (*(_DWORD *)(v8 + 264) & 2) == 0;
        else
          v9 = 1;
        if (!v9)
        {
          this = btDiscreteDynamicsWorld::synchronizeSingleMotionState(v5, (btRigidBody *)v8, a3, a4, a5);
          v6 = *(_DWORD *)(v5 + 12);
        }
      }
    }
  }
  else
  {
    v10 = *(_DWORD *)(this + 324);
    if (v10 >= 1)
    {
      for (j = 0; j < v10; ++j)
      {
        v12 = *(_QWORD *)(*(_QWORD *)(v5 + 336) + 8 * j);
        v13 = *(_DWORD *)(v12 + 244);
        if (v13 != 2 && v13 != 5)
        {
          *(_BYTE *)(v5 + 448) = 1;
          this = btDiscreteDynamicsWorld::synchronizeSingleMotionState(v5, (btRigidBody *)v12, a3, a4, a5);
          v10 = *(_DWORD *)(v5 + 324);
        }
      }
    }
  }
  return this;
}

uint64_t btDiscreteDynamicsWorld::stepSimulation(btDiscreteDynamicsWorld *this, float a2, int a3, float a4)
{
  float v5;
  int v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;

  *((_BYTE *)this + 448) = 0;
  if (a3)
  {
    v5 = a4;
    v6 = a3;
    v7 = *((float *)this + 92) + a2;
    *((float *)this + 92) = v7;
    if (v7 >= a4)
    {
      v8 = (int)(float)(v7 / a4);
      *((float *)this + 92) = v7 - (float)((float)(int)(float)(v7 / a4) * a4);
    }
    else
    {
      v8 = 0;
    }
  }
  else
  {
    *((float *)this + 92) = a2;
    v9 = fabsf(a2);
    v8 = v9 >= 0.00000011921;
    v5 = a2;
    v6 = v9 >= 0.00000011921;
  }
  if ((*(uint64_t (**)(btDiscreteDynamicsWorld *))(*(_QWORD *)this + 40))(this))
  {
    v10 = (*(uint64_t (**)(btDiscreteDynamicsWorld *))(*(_QWORD *)this + 40))(this);
    gDisableDeactivation = ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 96))(v10) & 0x10) != 0;
  }
  if ((_DWORD)v8)
  {
    if ((int)v8 < v6)
      v6 = v8;
    (*(void (**)(btDiscreteDynamicsWorld *, float))(*(_QWORD *)this + 320))(this, v5 * (float)v6);
    (*(void (**)(btDiscreteDynamicsWorld *))(*(_QWORD *)this + 344))(this);
    if (v6 >= 1)
    {
      do
      {
        (*(void (**)(btDiscreteDynamicsWorld *, float))(*(_QWORD *)this + 312))(this, v5);
        (*(void (**)(btDiscreteDynamicsWorld *))(*(_QWORD *)this + 160))(this);
        --v6;
      }
      while (v6);
    }
  }
  else
  {
    (*(void (**)(btDiscreteDynamicsWorld *))(*(_QWORD *)this + 160))(this);
  }
  (*(void (**)(btDiscreteDynamicsWorld *))(*(_QWORD *)this + 240))(this);
  return v8;
}

btCollisionObject *btDiscreteDynamicsWorld::internalSingleStepSimulation(btDiscreteDynamicsWorld *this, float a2)
{
  void (*v4)(btDiscreteDynamicsWorld *, float);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  btTransform *v8;
  uint64_t v9;
  uint64_t v10;
  btCollisionObject *result;
  uint64_t (*v12)(btDiscreteDynamicsWorld *, float);

  v4 = (void (*)(btDiscreteDynamicsWorld *, float))*((_QWORD *)this + 16);
  if (v4)
    v4(this, a2);
  (*(void (**)(btDiscreteDynamicsWorld *, float))(*(_QWORD *)this + 280))(this, a2);
  *((float *)this + 12) = a2;
  *((_DWORD *)this + 13) = 0;
  *((_QWORD *)this + 9) = (*(uint64_t (**)(btDiscreteDynamicsWorld *))(*(_QWORD *)this + 40))(this);
  btDiscreteDynamicsWorld::createPredictiveContacts(this, a2, v5, v6, v7, v8);
  (*(void (**)(btDiscreteDynamicsWorld *))(*(_QWORD *)this + 88))(this);
  (*(void (**)(btDiscreteDynamicsWorld *))(*(_QWORD *)this + 296))(this);
  *((float *)this + 39) = a2;
  (*(void (**)(btDiscreteDynamicsWorld *, char *))(*(_QWORD *)this + 304))(this, (char *)this + 144);
  (*(void (**)(btDiscreteDynamicsWorld *, float))(*(_QWORD *)this + 288))(this, a2);
  if (*((int *)this + 95) >= 1)
  {
    v9 = 0;
    do
    {
      v10 = *(_QWORD *)(*((_QWORD *)this + 49) + 8 * v9);
      (*(void (**)(uint64_t, btDiscreteDynamicsWorld *, float))(*(_QWORD *)v10 + 16))(v10, this, a2);
      ++v9;
    }
    while (v9 < *((int *)this + 95));
  }
  result = btDiscreteDynamicsWorld::updateActivationState((btCollisionObject *)this, a2);
  v12 = (uint64_t (*)(btDiscreteDynamicsWorld *, float))*((_QWORD *)this + 15);
  if (v12)
    return (btCollisionObject *)v12(this, a2);
  return result;
}

void btDiscreteDynamicsWorld::createPredictiveContacts(btDiscreteDynamicsWorld *this, float a2, uint64_t a3, uint64_t a4, uint64_t a5, btTransform *a6)
{
  uint64_t v8;
  _QWORD *v9;
  void **v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  int v14;
  float v16;
  float32x4_t v17;
  int8x16_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  btVector3 v23;
  btPersistentManifold *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  void **v29;
  float32x4_t v30;
  int8x16_t v31;
  float32x4_t v32;
  int32x4_t v33;
  int8x16_t v34;
  float32x4_t v35;
  int32x2_t v36;
  unsigned __int32 v37;
  float32x4_t v38;
  float32x4_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  btVector3 v44;
  int8x16_t v45;
  int8x16_t v46;
  float32x4_t *v47;
  const btCollisionObject *v48;
  float32x4_t v49;
  float32x4_t v50;
  btVector3 v51;
  int8x16_t v52;
  float v53;
  float32x4_t v54;
  btManifoldPoint v55;
  __int128 v56;
  btVector3 v57;
  btVector3 v58;
  btVector3 v59;
  btTransform v60;
  btCollisionShape v61[2];
  int v62;
  int v63;
  void (**v64)(btClosestNotMeConvexResultCallback *__hidden);
  float v65;
  __int128 v66;
  uint64_t v67;
  __int128 v68;
  btVector3 var1;
  btVector3 v70;
  btCollisionObject *v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  if (*((int *)this + 105) >= 1)
  {
    v8 = 0;
    do
      (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5), *(_QWORD *)(*((_QWORD *)this + 54) + 8 * v8++));
    while (v8 < *((int *)this + 105));
  }
  v9 = (_QWORD *)((char *)this + 420);
  v10 = (void **)*((_QWORD *)this + 54);
  if (v10 && *((_BYTE *)this + 440))
    btAlignedFreeInternal(v10);
  *((_BYTE *)this + 440) = 1;
  *((_QWORD *)this + 54) = 0;
  *v9 = 0;
  if (*((int *)this + 81) >= 1)
  {
    v11 = 0;
    v12 = &unk_1F03C7000;
    do
    {
      v13 = *(_QWORD *)(*((_QWORD *)this + 42) + 8 * v11);
      *(_DWORD *)(v13 + 280) = 1065353216;
      v14 = *(_DWORD *)(v13 + 244);
      if (v14 != 2 && v14 != 5 && (*(_BYTE *)(v13 + 232) & 3) == 0)
      {
        btRigidBody::predictIntegratedTransform((btRigidBody *)v13, a2, &v60, a4, a5, a6);
        if (*((_BYTE *)this + 64))
        {
          v16 = *(float *)(v13 + 288) * *(float *)(v13 + 288);
          if (v16 != 0.0)
          {
            v17 = vsubq_f32((float32x4_t)v60.var1, *(float32x4_t *)(v13 + 64));
            v17.i32[3] = 0;
            v18 = (int8x16_t)vmulq_f32(v17, v17);
            if (v16 < vadd_f32(vpadd_f32(*(float32x2_t *)v18.i8, *(float32x2_t *)v18.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL)).f32[0]&& *(int *)(*(_QWORD *)(v13 + 208) + 8) <= 19)
            {
              ++v12[407];
              v19 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 12) + 72))(*((_QWORD *)this + 12));
              v20 = *((_QWORD *)this + 5);
              v65 = 1.0;
              v66 = xmmword_1DD009420;
              v67 = 0;
              v68 = *(_OWORD *)(v13 + 64);
              var1 = v60.var1;
              v64 = &off_1EA598240;
              v71 = 0;
              v72 = v13;
              v73 = 0;
              v74 = v19;
              v75 = v20;
              v21 = *(_DWORD *)(v13 + 284);
              btConvexInternalShape::btConvexInternalShape((btConvexInternalShape *)v61);
              v61[0].var0 = (void **)&unk_1EA5956E8;
              v61[0].var1 = 8;
              v62 = v21;
              v63 = v21;
              v73 = *((_DWORD *)this + 21);
              v22 = *(_QWORD *)(v13 + 200);
              v66 = *(_OWORD *)(v22 + 8);
              v67 = *(_QWORD *)(v22 + 24);
              v57 = v60.var0.var0[1];
              v58 = v60.var0.var0[2];
              v59 = v60.var1;
              v23 = *(btVector3 *)(v13 + 32);
              v56 = *(_OWORD *)(v13 + 16);
              v57 = v23;
              v58 = *(btVector3 *)(v13 + 48);
              btCollisionWorld::convexSweepTest((uint64_t)this, v61, v13 + 16, (uint64_t)&v56, (float *)&v64, 0.0);
              if (v65 < 1.0)
              {
                v53 = v65;
                v50 = *(float32x4_t *)(v13 + 64);
                v51 = v60.var1;
                v52 = (int8x16_t)v70;
                v24 = (btPersistentManifold *)(*(uint64_t (**)(_QWORD, uint64_t, btCollisionObject *))(**((_QWORD **)this + 5) + 24))(*((_QWORD *)this + 5), v13, v71);
                v25 = *((_DWORD *)this + 105);
                if (v25 == *((_DWORD *)this + 106))
                {
                  v26 = v25 ? 2 * v25 : 1;
                  if (v25 < v26)
                  {
                    if (v26)
                    {
                      v27 = btAlignedAllocInternal(8 * v26, 16);
                      v25 = *(_DWORD *)v9;
                    }
                    else
                    {
                      v27 = 0;
                    }
                    if (v25 >= 1)
                    {
                      v28 = 0;
                      do
                      {
                        *(_QWORD *)(v27 + v28) = *(_QWORD *)(*((_QWORD *)this + 54) + v28);
                        v28 += 8;
                      }
                      while (8 * v25 != v28);
                    }
                    v29 = (void **)*((_QWORD *)this + 54);
                    if (v29)
                    {
                      if (*((_BYTE *)this + 440))
                      {
                        btAlignedFreeInternal(v29);
                        v25 = *(_DWORD *)v9;
                      }
                    }
                    *((_BYTE *)this + 440) = 1;
                    *((_QWORD *)this + 54) = v27;
                    *((_DWORD *)this + 106) = v26;
                    v12 = (_DWORD *)&unk_1F03C7000;
                  }
                }
                v30 = vmulq_n_f32(vsubq_f32((float32x4_t)v51, v50), v53);
                v30.i32[3] = 0;
                v31.i64[0] = 0x8000000080000000;
                v31.i64[1] = 0x8000000080000000;
                *(_QWORD *)(*((_QWORD *)this + 54) + 8 * v25) = v24;
                *((_DWORD *)this + 105) = v25 + 1;
                v32 = *((float32x4_t *)v71 + 1);
                v33 = *((int32x4_t *)v71 + 2);
                v34 = *((int8x16_t *)v71 + 3);
                v35 = (float32x4_t)vtrn1q_s32((int32x4_t)v32, v33);
                v36 = vzip2_s32(*(int32x2_t *)v34.i8, 0);
                v37 = vextq_s8(v34, v34, 8uLL).u32[0];
                v38.i64[0] = vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL).u64[0];
                v35.i64[1] = v34.u32[0];
                v39 = (float32x4_t)veorq_s8(*((int8x16_t *)v71 + 4), v31);
                *(int32x2_t *)v32.f32 = vzip2_s32(*(int32x2_t *)v32.f32, *(int32x2_t *)v33.i8);
                *(int32x2_t *)&v32.u32[2] = v36;
                v40 = (int8x16_t)vmulq_f32(v35, v39);
                v41 = (int8x16_t)vmulq_f32(v32, v39);
                v38.i64[1] = v37;
                *(float32x2_t *)v40.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v40.i8, *(float32x2_t *)v41.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v40, v40, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v41, v41, 8uLL)));
                v42 = (int8x16_t)vmulq_f32(v38, v39);
                v42.i32[3] = 0;
                v54 = vaddq_f32(*(float32x4_t *)(v13 + 64), v30);
                v43 = (int8x16_t)vmulq_f32(v54, v35);
                v44 = (btVector3)vmulq_f32(v54, v32);
                v45 = (int8x16_t)vmulq_f32(v54, v38);
                v45.i32[3] = 0;
                *(float32x2_t *)v44.var0.var0 = vadd_f32(vadd_f32(vpadd_f32(*(float32x2_t *)v43.i8, *(float32x2_t *)v44.var0.var0), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v43, v43, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL))), *(float32x2_t *)v40.i8);
                *(float32x2_t *)&v44.var0.var0[2] = vadd_f32(vpadd_f32(vpadd_f32(*(float32x2_t *)v42.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v42, v42, 8uLL)), 0), vpadd_f32(vpadd_f32(*(float32x2_t *)v45.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v45, v45, 8uLL)), 0));
                v46 = (int8x16_t)vmulq_f32((float32x4_t)veorq_s8(v52, v31), v30);
                v55.var0 = 0uLL;
                v55.var1 = v44;
                v55.var4 = v70;
                LODWORD(v55.var5) = vadd_f32(vpadd_f32(*(float32x2_t *)v46.i8, *(float32x2_t *)v46.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v46, v46, 8uLL)).u32[0];
                *(_QWORD *)&v55.var6 = 0;
                v55.var8 = 0.0;
                v55.var13 = 0;
                v55.var14 = 0;
                memset(&v55.var15, 0, 32);
                v47 = (float32x4_t *)((char *)v24 + 192 * (int)btPersistentManifold::addManifoldPoint(v24, &v55));
                v47[6].i32[3] = 0;
                v47[6].f32[1] = btManifoldResult::calculateCombinedFriction((btManifoldResult *)v13, v71, v48);
                v49 = *(float32x4_t *)(v13 + 64);
                v47[3] = v54;
                v47[4] = v49;
              }
              C3DSceneSourcePerformConsistencyCheck(v61);
            }
          }
        }
      }
      ++v11;
    }
    while (v11 < *((int *)this + 81));
  }
}

btCollisionObject *btDiscreteDynamicsWorld::updateActivationState(btCollisionObject *this, float a2)
{
  btCollisionObject *v3;
  uint64_t i;
  uint64_t v5;
  int v6;
  int8x16_t v7;
  int8x16_t v8;
  btCollisionObject *v9;
  int v10;

  if (*((int *)this + 81) >= 1)
  {
    v3 = this;
    for (i = 0; i < *((int *)v3 + 81); ++i)
    {
      v5 = *(_QWORD *)(*((_QWORD *)v3 + 42) + 8 * i);
      if (v5)
      {
        v6 = *(_DWORD *)(v5 + 244);
        if (v6 != 2)
        {
          if (v6 == 4)
            continue;
          v7 = (int8x16_t)vmulq_f32(*(float32x4_t *)(v5 + 352), *(float32x4_t *)(v5 + 352));
          if (vadd_f32(vpadd_f32(*(float32x2_t *)v7.i8, *(float32x2_t *)v7.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)).f32[0] >= (float)(*(float *)(v5 + 524)* *(float *)(v5 + 524))|| (v8 = (int8x16_t)vmulq_f32(*(float32x4_t *)(v5 + 368), *(float32x4_t *)(v5 + 368)), vadd_f32(vpadd_f32(*(float32x2_t *)v8.i8, *(float32x2_t *)v8.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL)).f32[0] >= (float)(*(float *)(v5 + 528)* *(float *)(v5 + 528))))
          {
            *(_DWORD *)(v5 + 248) = 0;
            this = btCollisionObject::setActivationState((btCollisionObject *)v5, 0);
            v6 = *(_DWORD *)(v5 + 244);
            if (v6 == 4)
              continue;
          }
          else
          {
            *(float *)(v5 + 248) = *(float *)(v5 + 248) + a2;
          }
        }
        if (gDisableDeactivation
          || *(float *)&gDeactivationTime == 0.0
          || (v6 & 0xFFFFFFFE) != 2 && *(float *)(v5 + 248) <= *(float *)&gDeactivationTime)
        {
          v9 = (btCollisionObject *)v5;
          v10 = 1;
        }
        else
        {
          if ((*(_BYTE *)(v5 + 232) & 3) == 0)
          {
            if (v6 == 1)
            {
              this = btCollisionObject::setActivationState((btCollisionObject *)v5, 3);
              v6 = *(_DWORD *)(v5 + 244);
            }
            if (v6 == 2)
            {
              *(_OWORD *)(v5 + 352) = 0u;
              *(_OWORD *)(v5 + 368) = 0u;
            }
            continue;
          }
          v9 = (btCollisionObject *)v5;
          v10 = 2;
        }
        this = btCollisionObject::setActivationState(v9, v10);
      }
    }
  }
  return this;
}

void btDiscreteDynamicsWorld::setGravity(btVector3 *this, float32x4_t *a2)
{
  int v2;
  uint64_t i;
  uint64_t v6;
  int v7;
  BOOL v8;

  this[22] = *(btVector3 *)a2;
  v2 = LODWORD(this[20].var0.var0[1]);
  if (v2 >= 1)
  {
    for (i = 0; i < v2; ++i)
    {
      v6 = *(_QWORD *)(*(_QWORD *)this[21].var0.var0 + 8 * i);
      v7 = *(_DWORD *)(v6 + 244);
      v8 = v7 == 2 || v7 == 5;
      if (!v8 && (*(_BYTE *)(v6 + 576) & 1) == 0)
      {
        btRigidBody::setGravity((btRigidBody *)v6, a2);
        v2 = LODWORD(this[20].var0.var0[1]);
      }
    }
  }
}

__n128 btDiscreteDynamicsWorld::getGravity@<Q0>(__n128 *this@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = this[22];
  *a2 = result;
  return result;
}

uint64_t btDiscreteDynamicsWorld::removeCollisionObject(btDiscreteDynamicsWorld *this, btCollisionObject *a2)
{
  if (a2 && (*((_DWORD *)a2 + 66) & 2) != 0)
    return (*(uint64_t (**)(btDiscreteDynamicsWorld *))(*(_QWORD *)this + 184))(this);
  else
    return btCollisionWorld::removeCollisionObject(this, a2);
}

uint64_t btDiscreteDynamicsWorld::removeRigidBody(btDiscreteDynamicsWorld *this, btCollisionObject *a2)
{
  btCollisionObject *v4;

  v4 = a2;
  btAlignedObjectArray<btCollisionObject *>::remove((uint64_t)this + 320, &v4);
  return btCollisionWorld::removeCollisionObject(this, v4);
}

void btDiscreteDynamicsWorld::addRigidBody(float32x4_t *this, btRigidBody *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;

  if ((*((_BYTE *)a2 + 232) & 3) == 0 && (*((_BYTE *)a2 + 576) & 1) == 0)
    btRigidBody::setGravity(a2, this + 22);
  if (*((_QWORD *)a2 + 26))
  {
    if ((*((_BYTE *)a2 + 232) & 1) != 0)
    {
      btCollisionObject::setActivationState((btCollisionObject *)a2, 2);
    }
    else
    {
      v4 = this[20].i32[1];
      if (v4 == this[20].i32[2])
      {
        v5 = v4 ? 2 * v4 : 1;
        if (v4 < v5)
        {
          if (v5)
          {
            v6 = btAlignedAllocInternal(8 * v5, 16);
            v4 = this[20].i32[1];
          }
          else
          {
            v6 = 0;
          }
          if (v4 >= 1)
          {
            v7 = 0;
            do
            {
              *(_QWORD *)(v6 + v7) = *(_QWORD *)(this[21].i64[0] + v7);
              v7 += 8;
            }
            while (8 * v4 != v7);
          }
          v8 = (void **)this[21].i64[0];
          if (v8 && this[21].i8[8])
          {
            btAlignedFreeInternal(v8);
            v4 = this[20].i32[1];
          }
          this[21].i8[8] = 1;
          this[21].i64[0] = v6;
          this[20].i32[2] = v5;
        }
      }
      *(_QWORD *)(this[21].i64[0] + 8 * v4) = a2;
      this[20].i32[1] = v4 + 1;
    }
    if ((*((_DWORD *)a2 + 58) & 3) != 0)
      v9 = 2;
    else
      v9 = 1;
    if ((*((_DWORD *)a2 + 58) & 3) != 0)
      v10 = -3;
    else
      v10 = -1;
    (*(void (**)(float32x4_t *, btRigidBody *, uint64_t, uint64_t, _QWORD))(this->i64[0] + 72))(this, a2, v9, v10, 0);
  }
}

void btDiscreteDynamicsWorld::addRigidBody(float32x4_t *this, btRigidBody *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;

  if ((*((_BYTE *)a2 + 232) & 3) == 0 && (*((_BYTE *)a2 + 576) & 1) == 0)
    btRigidBody::setGravity(a2, this + 22);
  if (*((_QWORD *)a2 + 26))
  {
    if ((*((_BYTE *)a2 + 232) & 1) != 0)
    {
      btCollisionObject::setActivationState((btCollisionObject *)a2, 2);
    }
    else
    {
      v10 = this[20].i32[1];
      if (v10 == this[20].i32[2])
      {
        v11 = v10 ? 2 * v10 : 1;
        if (v10 < v11)
        {
          if (v11)
          {
            v12 = btAlignedAllocInternal(8 * v11, 16);
            v10 = this[20].i32[1];
          }
          else
          {
            v12 = 0;
          }
          if (v10 >= 1)
          {
            v13 = 0;
            do
            {
              *(_QWORD *)(v12 + v13) = *(_QWORD *)(this[21].i64[0] + v13);
              v13 += 8;
            }
            while (8 * v10 != v13);
          }
          v14 = (void **)this[21].i64[0];
          if (v14)
          {
            if (this[21].i8[8])
            {
              btAlignedFreeInternal(v14);
              v10 = this[20].i32[1];
            }
          }
          this[21].i8[8] = 1;
          this[21].i64[0] = v12;
          this[20].i32[2] = v11;
        }
      }
      *(_QWORD *)(this[21].i64[0] + 8 * v10) = a2;
      this[20].i32[1] = v10 + 1;
    }
    (*(void (**)(float32x4_t *, btRigidBody *, uint64_t, uint64_t, uint64_t))(this->i64[0] + 72))(this, a2, a3, a4, a5);
  }
}

btCollisionObject *btDiscreteDynamicsWorld::activateAllBodies(btCollisionObject *this)
{
  int v1;
  btCollisionObject *v2;
  uint64_t i;

  v1 = *((_DWORD *)this + 81);
  if (v1 >= 1)
  {
    v2 = this;
    for (i = 0; i < v1; ++i)
    {
      this = *(btCollisionObject **)(*((_QWORD *)v2 + 42) + 8 * i);
      if (this)
      {
        this = btCollisionObject::activate(this, 0);
        v1 = *((_DWORD *)v2 + 81);
      }
    }
  }
  return this;
}

void btDiscreteDynamicsWorld::addConstraint(btDiscreteDynamicsWorld *this, btRigidBody **a2, int a3)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;

  v6 = *((_DWORD *)this + 73);
  if (v6 == *((_DWORD *)this + 74))
  {
    v7 = v6 ? 2 * v6 : 1;
    if (v6 < v7)
    {
      if (v7)
      {
        v8 = btAlignedAllocInternal(8 * v7, 16);
        v6 = *((_DWORD *)this + 73);
      }
      else
      {
        v8 = 0;
      }
      if (v6 >= 1)
      {
        v9 = 0;
        do
        {
          *(_QWORD *)(v8 + v9) = *(_QWORD *)(*((_QWORD *)this + 38) + v9);
          v9 += 8;
        }
        while (8 * v6 != v9);
      }
      v10 = (void **)*((_QWORD *)this + 38);
      if (v10 && *((_BYTE *)this + 312))
      {
        btAlignedFreeInternal(v10);
        v6 = *((_DWORD *)this + 73);
      }
      *((_BYTE *)this + 312) = 1;
      *((_QWORD *)this + 38) = v8;
      *((_DWORD *)this + 74) = v7;
    }
  }
  *(_QWORD *)(*((_QWORD *)this + 38) + 8 * v6) = a2;
  *((_DWORD *)this + 73) = v6 + 1;
  if (a3)
  {
    btRigidBody::addConstraintRef(a2[5], (btTypedConstraint *)a2);
    btRigidBody::addConstraintRef(a2[6], (btTypedConstraint *)a2);
  }
}

uint64_t btDiscreteDynamicsWorld::removeConstraint(btDiscreteDynamicsWorld *this, btTypedConstraint *a2)
{
  btTypedConstraint *v3;

  v3 = a2;
  btAlignedObjectArray<btCollisionObject *>::remove((uint64_t)this + 288, &v3);
  btRigidBody::removeConstraintRef(*((btRigidBody **)v3 + 5), v3);
  return btRigidBody::removeConstraintRef(*((btRigidBody **)v3 + 6), v3);
}

void btDiscreteDynamicsWorld::addAction(btDiscreteDynamicsWorld *this, btActionInterface *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;

  v4 = *((_DWORD *)this + 95);
  if (v4 == *((_DWORD *)this + 96))
  {
    v5 = v4 ? 2 * v4 : 1;
    if (v4 < v5)
    {
      if (v5)
      {
        v6 = btAlignedAllocInternal(8 * v5, 16);
        v4 = *((_DWORD *)this + 95);
      }
      else
      {
        v6 = 0;
      }
      if (v4 >= 1)
      {
        v7 = 0;
        do
        {
          *(_QWORD *)(v6 + v7) = *(_QWORD *)(*((_QWORD *)this + 49) + v7);
          v7 += 8;
        }
        while (8 * v4 != v7);
      }
      v8 = (void **)*((_QWORD *)this + 49);
      if (v8 && *((_BYTE *)this + 400))
      {
        btAlignedFreeInternal(v8);
        v4 = *((_DWORD *)this + 95);
      }
      *((_BYTE *)this + 400) = 1;
      *((_QWORD *)this + 49) = v6;
      *((_DWORD *)this + 96) = v5;
    }
  }
  *(_QWORD *)(*((_QWORD *)this + 49) + 8 * v4) = a2;
  *((_DWORD *)this + 95) = v4 + 1;
}

uint64_t btDiscreteDynamicsWorld::removeAction(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return btAlignedObjectArray<btCollisionObject *>::remove(a1 + 376, &v3);
}

uint64_t btDiscreteDynamicsWorld::numActions(btDiscreteDynamicsWorld *this)
{
  return *((unsigned int *)this + 95);
}

uint64_t btDiscreteDynamicsWorld::getAction(btDiscreteDynamicsWorld *this, int a2)
{
  return *(_QWORD *)(*((_QWORD *)this + 49) + 8 * a2);
}

uint64_t btDiscreteDynamicsWorld::addVehicle(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
}

uint64_t btDiscreteDynamicsWorld::removeVehicle(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
}

uint64_t btDiscreteDynamicsWorld::addCharacter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
}

uint64_t btDiscreteDynamicsWorld::removeCharacter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
}

uint64_t btDiscreteDynamicsWorld::solveConstraints(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  uint64_t v19;
  void **v20;
  uint64_t v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v27;

  v4 = *(_DWORD *)(a1 + 292);
  v5 = *(_DWORD *)(a1 + 236);
  if (v5 < v4)
  {
    v6 = v5;
    if (*(_DWORD *)(a1 + 240) < v4)
    {
      if (v4)
      {
        v7 = btAlignedAllocInternal(8 * v4, 16);
        v5 = *(_DWORD *)(a1 + 236);
      }
      else
      {
        v7 = 0;
      }
      if (v5 >= 1)
      {
        v8 = 0;
        v9 = 8 * v5;
        do
        {
          *(_QWORD *)(v7 + v8) = *(_QWORD *)(*(_QWORD *)(a1 + 248) + v8);
          v8 += 8;
        }
        while (v9 != v8);
      }
      v10 = *(void ***)(a1 + 248);
      if (v10 && *(_BYTE *)(a1 + 256))
        btAlignedFreeInternal(v10);
      *(_BYTE *)(a1 + 256) = 1;
      *(_QWORD *)(a1 + 248) = v7;
      *(_DWORD *)(a1 + 240) = v4;
    }
    do
      *(_QWORD *)(*(_QWORD *)(a1 + 248) + 8 * v6++) = 0;
    while (v4 != v6);
  }
  *(_DWORD *)(a1 + 236) = v4;
  if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 208))(a1) >= 1)
  {
    v11 = 0;
    do
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 248) + 8 * v11) = *(_QWORD *)(*(_QWORD *)(a1 + 304) + 8 * v11);
      ++v11;
    }
    while (v11 < (*(int (**)(uint64_t))(*(_QWORD *)a1 + 208))(a1));
  }
  v12 = *(_DWORD *)(a1 + 236);
  if (v12 > 1)
    btAlignedObjectArray<btTypedConstraint *>::quickSortInternal<btSortConstraintOnIslandPredicate>(a1 + 232, (uint64_t)&v27, 0, v12 - 1);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 208))(a1))
    v13 = *(_QWORD *)(a1 + 248);
  else
    v13 = 0;
  v14 = *(_QWORD *)(a1 + 264);
  v15 = *(_DWORD *)(a1 + 236);
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  *(_QWORD *)(v14 + 8) = a2;
  *(_QWORD *)(v14 + 24) = v13;
  *(_DWORD *)(v14 + 32) = v15;
  *(_QWORD *)(v14 + 40) = v16;
  v17 = *(int *)(v14 + 60);
  if ((v17 & 0x80000000) != 0)
  {
    if ((*(_DWORD *)(v14 + 64) & 0x80000000) != 0)
    {
      v18 = *(void ***)(v14 + 72);
      if (v18 && *(_BYTE *)(v14 + 80))
        btAlignedFreeInternal(v18);
      *(_BYTE *)(v14 + 80) = 1;
      *(_QWORD *)(v14 + 72) = 0;
      *(_DWORD *)(v14 + 64) = 0;
    }
    do
      *(_QWORD *)(*(_QWORD *)(v14 + 72) + 8 * v17++) = 0;
    while ((_DWORD)v17);
  }
  *(_DWORD *)(v14 + 60) = 0;
  v19 = *(int *)(v14 + 92);
  if ((v19 & 0x80000000) != 0)
  {
    if ((*(_DWORD *)(v14 + 96) & 0x80000000) != 0)
    {
      v20 = *(void ***)(v14 + 104);
      if (v20 && *(_BYTE *)(v14 + 112))
        btAlignedFreeInternal(v20);
      *(_BYTE *)(v14 + 112) = 1;
      *(_QWORD *)(v14 + 104) = 0;
      *(_DWORD *)(v14 + 96) = 0;
    }
    do
      *(_QWORD *)(*(_QWORD *)(v14 + 104) + 8 * v19++) = 0;
    while ((_DWORD)v19);
  }
  *(_DWORD *)(v14 + 92) = 0;
  v21 = *(int *)(v14 + 124);
  if ((v21 & 0x80000000) != 0)
  {
    if ((*(_DWORD *)(v14 + 128) & 0x80000000) != 0)
    {
      v22 = *(void ***)(v14 + 136);
      if (v22 && *(_BYTE *)(v14 + 144))
        btAlignedFreeInternal(v22);
      *(_BYTE *)(v14 + 144) = 1;
      *(_QWORD *)(v14 + 136) = 0;
      *(_DWORD *)(v14 + 128) = 0;
    }
    do
      *(_QWORD *)(*(_QWORD *)(v14 + 136) + 8 * v21++) = 0;
    while ((_DWORD)v21);
  }
  *(_DWORD *)(v14 + 124) = 0;
  v23 = *(_QWORD *)(a1 + 272);
  v24 = *(unsigned int *)(a1 + 12);
  v25 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 72))(*(_QWORD *)(a1 + 40));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v23 + 16))(v23, v24, v25);
  btSimulationIslandManager::buildAndProcessIslands(*(_QWORD *)(a1 + 280), *(_QWORD *)(a1 + 40), a1, *(_QWORD *)(a1 + 264));
  InplaceSolverIslandCallback::processConstraints(*(InplaceSolverIslandCallback **)(a1 + 264));
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 272) + 32))(*(_QWORD *)(a1 + 272), a2, *(_QWORD *)(a1 + 104));
}

void InplaceSolverIslandCallback::processConstraints(InplaceSolverIslandCallback *this)
{
  uint64_t v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  void **v8;

  if (*((_DWORD *)this + 15))
    v2 = *((_QWORD *)this + 9);
  else
    v2 = 0;
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 2) + 24))(*((_QWORD *)this + 2), v2);
  v3 = *((int *)this + 15);
  if ((v3 & 0x80000000) != 0)
  {
    if ((*((_DWORD *)this + 16) & 0x80000000) != 0)
    {
      v4 = (void **)*((_QWORD *)this + 9);
      if (v4 && *((_BYTE *)this + 80))
        btAlignedFreeInternal(v4);
      *((_BYTE *)this + 80) = 1;
      *((_QWORD *)this + 9) = 0;
      *((_DWORD *)this + 16) = 0;
    }
    do
      *(_QWORD *)(*((_QWORD *)this + 9) + 8 * v3++) = 0;
    while ((_DWORD)v3);
  }
  *((_DWORD *)this + 15) = 0;
  v5 = *((int *)this + 23);
  if ((v5 & 0x80000000) != 0)
  {
    if ((*((_DWORD *)this + 24) & 0x80000000) != 0)
    {
      v6 = (void **)*((_QWORD *)this + 13);
      if (v6 && *((_BYTE *)this + 112))
        btAlignedFreeInternal(v6);
      *((_BYTE *)this + 112) = 1;
      *((_QWORD *)this + 13) = 0;
      *((_DWORD *)this + 24) = 0;
    }
    do
      *(_QWORD *)(*((_QWORD *)this + 13) + 8 * v5++) = 0;
    while ((_DWORD)v5);
  }
  *((_DWORD *)this + 23) = 0;
  v7 = *((int *)this + 31);
  if ((v7 & 0x80000000) != 0)
  {
    if ((*((_DWORD *)this + 32) & 0x80000000) != 0)
    {
      v8 = (void **)*((_QWORD *)this + 17);
      if (v8 && *((_BYTE *)this + 144))
        btAlignedFreeInternal(v8);
      *((_BYTE *)this + 144) = 1;
      *((_QWORD *)this + 17) = 0;
      *((_DWORD *)this + 32) = 0;
    }
    do
      *(_QWORD *)(*((_QWORD *)this + 17) + 8 * v7++) = 0;
    while ((_DWORD)v7);
  }
  *((_DWORD *)this + 31) = 0;
}

uint64_t btDiscreteDynamicsWorld::calculateSimulationIslands(btDiscreteDynamicsWorld *this)
{
  int v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  int v8;
  BOOL v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  int v20;
  BOOL v21;

  (*(void (**)(_QWORD, btDiscreteDynamicsWorld *, _QWORD))(**((_QWORD **)this + 35) + 16))(*((_QWORD *)this + 35), this, *((_QWORD *)this + 5));
  v2 = *((_DWORD *)this + 105);
  if (v2 >= 1)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(_QWORD *)(*((_QWORD *)this + 54) + 8 * i);
      v5 = *(_QWORD *)(v4 + 784);
      if (v5)
      {
        v6 = *(_QWORD *)(v4 + 792);
        v7 = (*(_BYTE *)(v5 + 232) & 3) != 0 || v6 == 0;
        if (!v7 && (*(_BYTE *)(v6 + 232) & 3) == 0)
        {
          v8 = *(_DWORD *)(v5 + 244);
          v9 = v8 == 5 || v8 == 2;
          if (!v9 || ((v10 = *(_DWORD *)(v6 + 244), v10 != 2) ? (v11 = v10 == 5) : (v11 = 1), !v11))
          {
            btUnionFind::unite(*((_QWORD *)this + 35) + 8, *(unsigned int *)(v5 + 236), *(unsigned int *)(v6 + 236));
            v2 = *((_DWORD *)this + 105);
          }
        }
      }
    }
  }
  v12 = *((unsigned int *)this + 73);
  if ((int)v12 >= 1)
  {
    v13 = 0;
    v14 = 8 * v12;
    do
    {
      v15 = *(_QWORD *)(*((_QWORD *)this + 38) + v13);
      if (*(_BYTE *)(v15 + 28))
      {
        v16 = *(_QWORD *)(v15 + 40);
        if ((*(_BYTE *)(v16 + 232) & 3) == 0)
        {
          v17 = *(_QWORD *)(v15 + 48);
          if ((*(_BYTE *)(v17 + 232) & 3) == 0)
          {
            v18 = *(_DWORD *)(v16 + 244);
            v19 = v18 == 5 || v18 == 2;
            if (!v19 || ((v20 = *(_DWORD *)(v17 + 244), v20 != 2) ? (v21 = v20 == 5) : (v21 = 1), !v21))
              btUnionFind::unite(*((_QWORD *)this + 35) + 8, *(unsigned int *)(v16 + 236), *(unsigned int *)(v17 + 236));
          }
        }
      }
      v13 += 8;
    }
    while (v14 != v13);
  }
  return (*(uint64_t (**)(_QWORD, btDiscreteDynamicsWorld *))(**((_QWORD **)this + 35) + 24))(*((_QWORD *)this + 35), this);
}

void btDiscreteDynamicsWorld::integrateTransforms(btDiscreteDynamicsWorld *this, float a2, uint64_t a3, const btCollisionObject *a4, uint64_t a5, btTransform *a6)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  float v12;
  float32x4_t v13;
  int8x16_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  btVector3 v19;
  uint64_t v20;
  uint64_t v21;
  btTransform *v22;
  float v23;
  int v24;
  uint64_t i;
  uint64_t v26;
  float32x4_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  float v32;
  int8x16_t v33;
  btVector3 v34;
  float32x4_t v35;
  btVector3 v36;
  int8x16_t v37;
  btVector3 v38;
  btVector3 v39;
  btVector3 v40;
  btVector3 v41;
  btVector3 v42;
  btTransform v43;
  btCollisionShape v44[2];
  int v45;
  int v46;
  btVector3 v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  btVector3 var1;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  if (*((int *)this + 81) >= 1)
  {
    v8 = 0;
    while (1)
    {
      v9 = *(_QWORD *)(*((_QWORD *)this + 42) + 8 * v8);
      *(_DWORD *)(v9 + 280) = 1065353216;
      v10 = *(_DWORD *)(v9 + 244);
      v11 = v10 == 2 || v10 == 5;
      if (v11 || (*(_BYTE *)(v9 + 232) & 3) != 0)
        goto LABEL_16;
      btRigidBody::predictIntegratedTransform((btRigidBody *)v9, a2, &v43, (uint64_t)a4, a5, a6);
      if (!*((_BYTE *)this + 64))
        goto LABEL_15;
      v12 = *(float *)(v9 + 288) * *(float *)(v9 + 288);
      if (v12 == 0.0)
        goto LABEL_15;
      v13 = vsubq_f32((float32x4_t)v43.var1, *(float32x4_t *)(v9 + 64));
      v13.i32[3] = 0;
      v14 = (int8x16_t)vmulq_f32(v13, v13);
      if (v12 >= vadd_f32(vpadd_f32(*(float32x2_t *)v14.i8, *(float32x2_t *)v14.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)).f32[0]|| *(int *)(*(_QWORD *)(v9 + 208) + 8) > 19)
      {
        goto LABEL_15;
      }
      ++gNumClampedCcdMotions;
      v15 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 12) + 72))(*((_QWORD *)this + 12));
      v16 = *((_QWORD *)this + 5);
      v47.var0.var0[2] = 1.0;
      v48 = xmmword_1DD009420;
      v49 = 0;
      v50 = *(_OWORD *)(v9 + 64);
      var1 = v43.var1;
      *(_QWORD *)v47.var0.var0 = &off_1EA598240;
      v52 = 0;
      v53 = v9;
      v54 = 0;
      v55 = v15;
      v56 = v16;
      v17 = *(_DWORD *)(v9 + 284);
      btConvexInternalShape::btConvexInternalShape((btConvexInternalShape *)v44);
      v44[0].var0 = (void **)&unk_1EA5956E8;
      v44[0].var1 = 8;
      v45 = v17;
      v46 = v17;
      v54 = *((_DWORD *)this + 21);
      v18 = *(_QWORD *)(v9 + 200);
      v48 = *(_OWORD *)(v18 + 8);
      v49 = *(_QWORD *)(v18 + 24);
      v40 = v43.var0.var0[1];
      v41 = v43.var0.var0[2];
      v42 = v43.var1;
      v19 = *(btVector3 *)(v9 + 32);
      v39 = *(btVector3 *)(v9 + 16);
      v40 = v19;
      v41 = *(btVector3 *)(v9 + 48);
      btCollisionWorld::convexSweepTest((uint64_t)this, v44, v9 + 16, (uint64_t)&v39, v47.var0.var0, 0.0);
      v23 = v47.var0.var0[2];
      if (v47.var0.var0[2] >= 1.0)
        break;
      *(float *)(v9 + 280) = v47.var0.var0[2];
      btRigidBody::predictIntegratedTransform((btRigidBody *)v9, v23 * a2, &v43, v20, v21, v22);
      *(_DWORD *)(v9 + 280) = 0;
      btRigidBody::proceedToTransform((btRigidBody *)v9, &v43);
      C3DSceneSourcePerformConsistencyCheck(v44);
LABEL_16:
      if (++v8 >= *((int *)this + 81))
        goto LABEL_17;
    }
    C3DSceneSourcePerformConsistencyCheck(v44);
LABEL_15:
    btRigidBody::proceedToTransform((btRigidBody *)v9, &v43);
    goto LABEL_16;
  }
LABEL_17:
  if (*((_BYTE *)this + 375))
  {
    v24 = *((_DWORD *)this + 105);
    if (v24 >= 1)
    {
      for (i = 0; i < v24; ++i)
      {
        v26 = *(_QWORD *)(*((_QWORD *)this + 54) + 8 * i);
        if ((*(_BYTE *)(*(_QWORD *)(v26 + 784) + 264) & 2) != 0)
          v27 = *(float32x4_t **)(v26 + 784);
        else
          v27 = 0;
        if ((*(_BYTE *)(*(_QWORD *)(v26 + 792) + 264) & 2) != 0)
          v28 = *(_QWORD *)(v26 + 792);
        else
          v28 = 0;
        if (*(int *)(v26 + 800) >= 1)
        {
          v29 = 0;
          v30 = v26 + 80;
          do
          {
            v31 = btManifoldResult::calculateCombinedRestitution((btManifoldResult *)v27, (const btCollisionObject *)v28, a4);
            if (v31 > 0.0)
            {
              v32 = *(float *)(v30 + 60);
              if (v32 != 0.0)
              {
                v33.i64[0] = 0x8000000080000000;
                v33.i64[1] = 0x8000000080000000;
                v34 = (btVector3)vmulq_n_f32(vmulq_n_f32((float32x4_t)veorq_s8(*(int8x16_t *)v30, v33), v32), v31);
                v34.var0.var0[3] = 0.0;
                v47 = v34;
                v35 = vsubq_f32(*(float32x4_t *)(v30 - 16), v27[4]);
                v35.i32[3] = 0;
                *(float32x4_t *)&v44[0].var0 = v35;
                v36 = (btVector3)vsubq_f32(*(float32x4_t *)(v30 - 32), *(float32x4_t *)(v28 + 64));
                v36.var0.var0[3] = 0.0;
                v39 = v36;
                btRigidBody::applyImpulse((btRigidBody *)v27, (float32x4_t *)&v47, (int8x16_t *)v44);
                v37.i64[0] = 0x8000000080000000;
                v37.i64[1] = 0x8000000080000000;
                v38 = (btVector3)veorq_s8((int8x16_t)v47, v37);
                btRigidBody::applyImpulse((btRigidBody *)v28, (float32x4_t *)&v38, (int8x16_t *)&v39);
              }
            }
            ++v29;
            v30 += 192;
          }
          while (v29 < *(int *)(v26 + 800));
          v24 = *((_DWORD *)this + 105);
        }
      }
    }
  }
}

void btDiscreteDynamicsWorld::predictUnconstraintMotion(btDiscreteDynamicsWorld *this, float a2)
{
  int v2;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  btTransform *v9;

  v2 = *((_DWORD *)this + 81);
  if (v2 >= 1)
  {
    for (i = 0; i < v2; ++i)
    {
      v6 = *(_QWORD *)(*((_QWORD *)this + 42) + 8 * i);
      if ((*(_BYTE *)(v6 + 232) & 3) == 0)
      {
        btRigidBody::applyDamping(*(btRigidBody **)(*((_QWORD *)this + 42) + 8 * i), a2);
        btRigidBody::predictIntegratedTransform((btRigidBody *)v6, a2, (btTransform *)(v6 + 80), v7, v8, v9);
        v2 = *((_DWORD *)this + 81);
      }
    }
  }
}

void btDiscreteDynamicsWorld::setConstraintSolver(void ***this, void **a2)
{
  if (*((_BYTE *)this + 373))
    btAlignedFreeInternal(this[34]);
  *((_BYTE *)this + 373) = 0;
  this[34] = a2;
  this[33][2] = a2;
}

uint64_t btDiscreteDynamicsWorld::getConstraintSolver(btDiscreteDynamicsWorld *this)
{
  return *((_QWORD *)this + 34);
}

uint64_t btDiscreteDynamicsWorld::getNumConstraints(btDiscreteDynamicsWorld *this)
{
  return *((unsigned int *)this + 73);
}

uint64_t btDiscreteDynamicsWorld::getConstraint(btDiscreteDynamicsWorld *this, int a2)
{
  return *(_QWORD *)(*((_QWORD *)this + 38) + 8 * a2);
}

{
  return *(_QWORD *)(*((_QWORD *)this + 38) + 8 * a2);
}

uint64_t btDiscreteDynamicsWorld::serializeRigidBodies(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t i;
  _BYTE *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if (v4 >= 1)
  {
    for (i = 0; i < v4; ++i)
    {
      v6 = *(_BYTE **)(*(_QWORD *)(v3 + 24) + 8 * i);
      if ((v6[264] & 2) != 0)
      {
        v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v6 + 32))(*(_QWORD *)(*(_QWORD *)(v3 + 24) + 8 * i));
        v8 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 32))(a2, v7, 1);
        v9 = (*(uint64_t (**)(_BYTE *, _QWORD, uint64_t))(*(_QWORD *)v6 + 40))(v6, *(_QWORD *)(v8 + 8), a2);
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a2 + 40))(a2, v8, v9, 1497645650, v6);
        v4 = *(_DWORD *)(v3 + 12);
      }
    }
  }
  if (*(int *)(v3 + 292) >= 1)
  {
    v10 = 0;
    do
    {
      v11 = *(_QWORD *)(*(_QWORD *)(v3 + 304) + 8 * v10);
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 72))(v11);
      v13 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 32))(a2, v12, 1);
      v14 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v11 + 80))(v11, *(_QWORD *)(v13 + 8), a2);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, v13, v14, 1397641027, v11);
      ++v10;
    }
    while (v10 < *(int *)(v3 + 292));
  }
  return result;
}

uint64_t btDiscreteDynamicsWorld::serializeDynamicsWorldInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 104, 1);
  v5 = 0;
  v6 = *(_QWORD *)(v4 + 8);
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_QWORD *)(v6 + 96) = 0;
  do
  {
    *(_DWORD *)(v6 + v5 + 88) = *(_DWORD *)(a1 + 352 + v5);
    v5 += 4;
  }
  while (v5 != 16);
  *(_OWORD *)v6 = *(_OWORD *)(a1 + 144);
  *(_DWORD *)(v6 + 16) = *(_DWORD *)(a1 + 160);
  *(_OWORD *)(v6 + 20) = *(_OWORD *)(a1 + 168);
  *(_DWORD *)(v6 + 36) = *(_DWORD *)(a1 + 184);
  *(_OWORD *)(v6 + 40) = *(_OWORD *)(a1 + 192);
  *(_QWORD *)(v6 + 56) = *(_QWORD *)(a1 + 220);
  *(_DWORD *)(v6 + 64) = *(_DWORD *)(a1 + 164);
  *(_QWORD *)(v6 + 68) = *(_QWORD *)(a1 + 208);
  v7 = *(_DWORD *)(a1 + 188);
  *(_DWORD *)(v6 + 76) = *(_DWORD *)(a1 + 216);
  *(_DWORD *)(v6 + 80) = v7;
  return (*(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t))(*(_QWORD *)a2 + 40))(a2, v4, "btDynamicsWorldFloatData", 1145853764);
}

uint64_t btDiscreteDynamicsWorld::serialize(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
  btDiscreteDynamicsWorld::serializeDynamicsWorldInfo(a1, a2);
  btDiscreteDynamicsWorld::serializeRigidBodies(a1, a2);
  btCollisionWorld::serializeCollisionObjects(a1, a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 72))(a2);
}

uint64_t btDiscreteDynamicsWorld::getWorldType(btDiscreteDynamicsWorld *this)
{
  return 2;
}

uint64_t btDiscreteDynamicsWorld::updateVehicles(uint64_t this, float a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(int *)(this + 380) >= 1)
  {
    v3 = this;
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(v3 + 392) + 8 * v4);
      this = (*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)v5 + 16))(v5, v3, a2);
      ++v4;
    }
    while (v4 < *(int *)(v3 + 380));
  }
  return this;
}

uint64_t btDynamicsWorld::getNumConstraints(btDynamicsWorld *this)
{
  return 0;
}

uint64_t btDynamicsWorld::getConstraint(btDynamicsWorld *this)
{
  return 0;
}

{
  return 0;
}

void InplaceSolverIslandCallback::~InplaceSolverIslandCallback(InplaceSolverIslandCallback *this)
{
  char *v2;

  *(_QWORD *)this = &off_1EA597D18;
  v2 = (char *)this + 56;
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)this + 120);
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)this + 88);
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)v2);
}

{
  char *v2;

  *(_QWORD *)this = &off_1EA597D18;
  v2 = (char *)this + 56;
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)this + 120);
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)this + 88);
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)v2);
  JUMPOUT(0x1DF0D41C0);
}

void InplaceSolverIslandCallback::processIsland(InplaceSolverIslandCallback *this, btCollisionObject **a2, int a3, btPersistentManifold **a4, int a5, int a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void **v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void **v39;

  if (a6 < 0)
    goto LABEL_21;
  v10 = *((unsigned int *)this + 8);
  if ((int)v10 < 1)
  {
    LODWORD(v11) = 0;
    v12 = 0;
  }
  else
  {
    v11 = 0;
    v12 = *((_QWORD *)this + 3);
    while (1)
    {
      v13 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v12 + 40) + 236);
      if (v13 < 0)
        v13 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v12 + 48) + 236);
      if (v13 == a6)
        break;
      ++v11;
      v12 += 8;
      if (v10 == v11)
      {
        v12 = 0;
        goto LABEL_19;
      }
    }
  }
  if ((int)v11 >= (int)v10)
  {
LABEL_19:
    v14 = 0;
  }
  else
  {
    v14 = 0;
    v11 = v11;
    do
    {
      v15 = *(_QWORD *)(*((_QWORD *)this + 3) + 8 * v11);
      v16 = *(_DWORD *)(*(_QWORD *)(v15 + 40) + 236);
      if (v16 < 0)
        v16 = *(_DWORD *)(*(_QWORD *)(v15 + 48) + 236);
      if (v16 == a6)
        ++v14;
      ++v11;
    }
    while ((int)v10 > (int)v11);
  }
  if (*(int *)(*((_QWORD *)this + 1) + 72) < 2)
  {
LABEL_21:
    (*(void (**)(_QWORD, btCollisionObject **))(**((_QWORD **)this + 2) + 24))(*((_QWORD *)this + 2), a2);
    return;
  }
  if (a3 >= 1)
  {
    v17 = 0;
    v18 = a3;
    v20 = *((_DWORD *)this + 15);
    v19 = *((unsigned int *)this + 16);
    do
    {
      if (v20 == (_DWORD)v19)
      {
        if ((_DWORD)v19)
          v21 = (2 * v19);
        else
          v21 = 1;
        if ((int)v19 < (int)v21)
        {
          if ((_DWORD)v21)
          {
            v22 = btAlignedAllocInternal(8 * (int)v21, 16);
            LODWORD(v19) = *((_DWORD *)this + 15);
          }
          else
          {
            v22 = 0;
          }
          if ((int)v19 >= 1)
          {
            v23 = 0;
            do
            {
              *(_QWORD *)(v22 + v23) = *(_QWORD *)(*((_QWORD *)this + 9) + v23);
              v23 += 8;
            }
            while (8 * v19 != v23);
          }
          v24 = (void **)*((_QWORD *)this + 9);
          if (v24 && *((_BYTE *)this + 80))
          {
            btAlignedFreeInternal(v24);
            LODWORD(v19) = *((_DWORD *)this + 15);
          }
          *((_BYTE *)this + 80) = 1;
          *((_QWORD *)this + 9) = v22;
          v20 = v19;
          *((_DWORD *)this + 16) = v21;
          goto LABEL_42;
        }
        v20 = v19;
      }
      v21 = v19;
LABEL_42:
      *(_QWORD *)(*((_QWORD *)this + 9) + 8 * v20++) = a2[v17];
      *((_DWORD *)this + 15) = v20;
      ++v17;
      v19 = v21;
    }
    while (v17 != v18);
  }
  if (a5 >= 1)
  {
    v25 = 0;
    v26 = a5;
    v28 = *((_DWORD *)this + 23);
    v27 = *((unsigned int *)this + 24);
    do
    {
      if (v28 == (_DWORD)v27)
      {
        if ((_DWORD)v27)
          v29 = (2 * v27);
        else
          v29 = 1;
        if ((int)v27 < (int)v29)
        {
          if ((_DWORD)v29)
          {
            v30 = btAlignedAllocInternal(8 * (int)v29, 16);
            LODWORD(v27) = *((_DWORD *)this + 23);
          }
          else
          {
            v30 = 0;
          }
          if ((int)v27 >= 1)
          {
            v31 = 0;
            do
            {
              *(_QWORD *)(v30 + v31) = *(_QWORD *)(*((_QWORD *)this + 13) + v31);
              v31 += 8;
            }
            while (8 * v27 != v31);
          }
          v32 = (void **)*((_QWORD *)this + 13);
          if (v32 && *((_BYTE *)this + 112))
          {
            btAlignedFreeInternal(v32);
            LODWORD(v27) = *((_DWORD *)this + 23);
          }
          *((_BYTE *)this + 112) = 1;
          *((_QWORD *)this + 13) = v30;
          v28 = v27;
          *((_DWORD *)this + 24) = v29;
          goto LABEL_62;
        }
        v28 = v27;
      }
      v29 = v27;
LABEL_62:
      *(_QWORD *)(*((_QWORD *)this + 13) + 8 * v28++) = a4[v25];
      *((_DWORD *)this + 23) = v28;
      ++v25;
      v27 = v29;
    }
    while (v25 != v26);
  }
  if (v14)
  {
    v33 = 0;
    v35 = *((_DWORD *)this + 31);
    v34 = *((unsigned int *)this + 32);
    while (1)
    {
      if (v35 == (_DWORD)v34)
      {
        if ((_DWORD)v34)
          v36 = (2 * v34);
        else
          v36 = 1;
        if ((int)v34 < (int)v36)
        {
          if ((_DWORD)v36)
          {
            v37 = btAlignedAllocInternal(8 * (int)v36, 16);
            LODWORD(v34) = *((_DWORD *)this + 31);
          }
          else
          {
            v37 = 0;
          }
          if ((int)v34 >= 1)
          {
            v38 = 0;
            do
            {
              *(_QWORD *)(v37 + v38) = *(_QWORD *)(*((_QWORD *)this + 17) + v38);
              v38 += 8;
            }
            while (8 * v34 != v38);
          }
          v39 = (void **)*((_QWORD *)this + 17);
          if (v39 && *((_BYTE *)this + 144))
          {
            btAlignedFreeInternal(v39);
            LODWORD(v34) = *((_DWORD *)this + 31);
          }
          *((_BYTE *)this + 144) = 1;
          *((_QWORD *)this + 17) = v37;
          v35 = v34;
          *((_DWORD *)this + 32) = v36;
          goto LABEL_82;
        }
        v35 = v34;
      }
      v36 = v34;
LABEL_82:
      *(_QWORD *)(*((_QWORD *)this + 17) + 8 * v35++) = *(_QWORD *)(v12 + 8 * v33);
      *((_DWORD *)this + 31) = v35;
      ++v33;
      v34 = v36;
      if (v33 == v14)
        goto LABEL_85;
    }
  }
  v35 = *((_DWORD *)this + 31);
LABEL_85:
  if (*((_DWORD *)this + 23) + v35 > *(_DWORD *)(*((_QWORD *)this + 1) + 72))
    InplaceSolverIslandCallback::processConstraints(this);
}

void btClosestNotMeConvexResultCallback::~btClosestNotMeConvexResultCallback(btClosestNotMeConvexResultCallback *this)
{
  JUMPOUT(0x1DF0D41C0);
}

uint64_t btClosestNotMeConvexResultCallback::needsCollision(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  if (*a2 != *(_QWORD *)(a1 + 120)
    && ((v2 = a2[1], (*(_QWORD *)(a1 + 24) & v2) != 0) && (a2[2] & *(_QWORD *)(a1 + 16)) != 0
     || (*(_QWORD *)(a1 + 32) & v2) != 0))
  {
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 144) + 56))(*(_QWORD *)(a1 + 144));
  }
  else
  {
    return 0;
  }
}

float btClosestNotMeConvexResultCallback::addSingleResult(uint64_t a1, uint64_t a2, int a3)
{
  float32x4_t *v3;
  float result;
  float32x4_t v5;
  int8x16_t v6;
  float32x4_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;

  v3 = *(float32x4_t **)a2;
  result = 1.0;
  if (*(_QWORD *)a2 != *(_QWORD *)(a1 + 120) && (v3[14].i8[8] & 4) == 0)
  {
    v5 = vsubq_f32(*(float32x4_t *)(a1 + 64), *(float32x4_t *)(a1 + 48));
    v5.i32[3] = 0;
    v6 = (int8x16_t)vmulq_f32(*(float32x4_t *)(a2 + 16), v5);
    if (vadd_f32(vpadd_f32(*(float32x2_t *)v6.i8, *(float32x2_t *)v6.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)).f32[0] < (float)-*(float *)(a1 + 128))
    {
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 112) = v3;
      v7 = *(float32x4_t *)(a2 + 16);
      if (!a3)
      {
        v8 = (int8x16_t)vmulq_f32(v3[1], v7);
        v9 = (int8x16_t)vmulq_f32(v7, v3[2]);
        v10 = (int8x16_t)vmulq_f32(v7, v3[3]);
        v10.i32[3] = 0;
        *(float32x2_t *)v7.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v8.i8, *(float32x2_t *)v9.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL)));
        *(float32x2_t *)&v7.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v10.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL)), 0);
      }
      *(float32x4_t *)(a1 + 80) = v7;
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 32);
      return *(float *)(a2 + 48);
    }
  }
  return result;
}

uint64_t btAlignedObjectArray<btTypedConstraint *>::quickSortInternal<btSortConstraintOnIslandPredicate>(uint64_t a1, uint64_t a2, int a3, int a4)
{
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t *v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t result;

  do
  {
    v8 = a3;
    v9 = a3 + a4;
    if (a3 + a4 < 0 != __OFADD__(a3, a4))
      ++v9;
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * (v9 >> 1));
    v11 = a4;
    do
    {
      v12 = *(_QWORD *)(a1 + 16);
      v13 = *(_DWORD *)(*(_QWORD *)(v10 + 40) + 236);
      v14 = (uint64_t *)(v12 + 8 * a3);
      v15 = a3;
      do
      {
        v16 = *(_DWORD *)(*(_QWORD *)(v10 + 40) + 236);
        if (v13 < 0)
          v16 = *(_DWORD *)(*(_QWORD *)(v10 + 48) + 236);
        v17 = *v14;
        v18 = *(_DWORD *)(*(_QWORD *)(*v14 + 40) + 236);
        if (v18 < 0)
          v18 = *(_DWORD *)(*(_QWORD *)(v17 + 48) + 236);
        ++v15;
        ++v14;
      }
      while (v18 < v16);
      a3 = v15 - 1;
      v19 = 8 * v11;
      v20 = v11;
      do
      {
        v21 = *(_QWORD *)(v12 + v19);
        v22 = *(_DWORD *)(*(_QWORD *)(v21 + 40) + 236);
        if (v22 < 0)
          v22 = *(_DWORD *)(*(_QWORD *)(v21 + 48) + 236);
        result = *(unsigned int *)(*(_QWORD *)(v10 + 40) + 236);
        if (v13 < 0)
          result = *(unsigned int *)(*(_QWORD *)(v10 + 48) + 236);
        --v20;
        v19 -= 8;
      }
      while ((int)result < v22);
      v11 = v20 + 1;
      if (a3 <= v20 + 1)
      {
        *(v14 - 1) = v21;
        *(_QWORD *)(*(_QWORD *)(a1 + 16) + v19 + 8) = v17;
        a3 = v15;
        v11 = v20;
      }
    }
    while (a3 <= v11);
    if (v11 > v8)
      result = btAlignedObjectArray<btTypedConstraint *>::quickSortInternal<btSortConstraintOnIslandPredicate>(a1, a2);
  }
  while (a3 < a4);
  return result;
}

__n128 btRigidBody::setupRigidBody(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  int v15;
  int v16;
  int v17;
  __n128 result;

  v4 = (_OWORD *)(a1 + 508);
  *(_DWORD *)(a1 + 264) = 2;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 624) = xmmword_1DD008470;
  __asm { FMOV            V1.2S, #1.0 }
  *(float32x2_t *)(a1 + 400) = _D1;
  *(_DWORD *)(a1 + 408) = 1065353216;
  *(_DWORD *)(a1 + 444) = 0;
  *(_OWORD *)(a1 + 412) = 0u;
  *(_OWORD *)(a1 + 428) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(int8x8_t *)(a1 + 496) = vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)(a2 + 112), _D1), (int8x8_t)_D1, *(int8x8_t *)(a2 + 112)), (int8x8_t)vcltz_f32(*(float32x2_t *)(a2 + 112)));
  *(_QWORD *)(a1 + 524) = *(_QWORD *)(a2 + 132);
  v10 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 536) = v10;
  *(_QWORD *)(a1 + 688) = 0;
  *(_BYTE *)(a1 + 504) = *(_BYTE *)(a2 + 140);
  *v4 = *(_OWORD *)(a2 + 144);
  if (v10)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, a1 + 16);
    v11 = *(_OWORD *)(a1 + 16);
    v12 = *(_OWORD *)(a1 + 32);
    v13 = *(_OWORD *)(a1 + 48);
    v14 = *(_OWORD *)(a1 + 64);
  }
  else
  {
    v11 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 16) = v11;
    v12 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 32) = v12;
    v13 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 48) = v13;
    v14 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 64) = v14;
  }
  *(_OWORD *)(a1 + 80) = v11;
  *(_OWORD *)(a1 + 96) = v12;
  *(_OWORD *)(a1 + 112) = v13;
  *(_OWORD *)(a1 + 128) = v14;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  v15 = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 260) = *(_DWORD *)(a2 + 124);
  v16 = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 252) = v15;
  *(_DWORD *)(a1 + 256) = v16;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 24))(a1, *(_QWORD *)(a2 + 80));
  v17 = uniqueId++;
  *(_DWORD *)(a1 + 580) = v17;
  btRigidBody::setMassProps((btRigidBody *)a1, *(float *)a2, (const btVector3 *)(a2 + 96));
  btRigidBody::updateInertiaTensor((btRigidBody *)a1);
  *(_DWORD *)(a1 + 576) = 0;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  result = (__n128)vmulq_n_f32(*(float32x4_t *)(a1 + 400), *(float *)(a1 + 384));
  result.n128_u32[3] = 0;
  *(_DWORD *)(a1 + 532) = 0;
  *(__n128 *)(a1 + 640) = result;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  return result;
}

btCollisionObject *btRigidBody::btRigidBody(btCollisionObject *a1, uint64_t a2)
{
  uint64_t v4;

  btCollisionObject::btCollisionObject(a1);
  *(_QWORD *)v4 = &off_1EA595380;
  *(_BYTE *)(v4 + 568) = 1;
  *(_QWORD *)(v4 + 560) = 0;
  *(_QWORD *)(v4 + 548) = 0;
  btRigidBody::setupRigidBody(v4, a2);
  return a1;
}

btCollisionObject *btRigidBody::btRigidBody(btCollisionObject *a1, uint64_t a2, uint64_t a3, __int128 *a4, float a5)
{
  uint64_t v10;
  float v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  int v23;
  char v24;
  __int128 v25;

  btCollisionObject::btCollisionObject(a1);
  *(_QWORD *)v10 = &off_1EA595380;
  *(_BYTE *)(v10 + 568) = 1;
  *(_QWORD *)(v10 + 560) = 0;
  *(_QWORD *)(v10 + 548) = 0;
  v12 = a5;
  v13 = a2;
  v19 = a3;
  v20 = *a4;
  v21 = xmmword_1DD02A9A0;
  v22 = 0x3F4CCCCD00000000;
  v23 = 1065353216;
  v24 = 0;
  v25 = xmmword_1DD009410;
  v14 = xmmword_1DD007970;
  v15 = xmmword_1DD007920;
  v16 = xmmword_1DD007600;
  v17 = 0;
  v18 = 0;
  btRigidBody::setupRigidBody(v10, (uint64_t)&v12);
  return a1;
}

int8x8_t btRigidBody::setDamping(btRigidBody *this, float32x2_t a2, float32_t a3)
{
  int8x8_t result;

  a2.f32[1] = a3;
  __asm { FMOV            V2.2S, #1.0 }
  result = vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(a2, _D2), (int8x8_t)_D2, (int8x8_t)a2), (int8x8_t)vcltz_f32(a2));
  *((int8x8_t *)this + 62) = result;
  return result;
}

__n128 btRigidBody::setMassProps(btRigidBody *this, float a2, const btVector3 *a3)
{
  int v3;
  float v4;
  float32x4_t v5;
  float v6;
  float v8;
  __n128 result;

  v3 = *((_DWORD *)this + 58);
  if (a2 == 0.0)
  {
    *((_DWORD *)this + 58) = v3 | 1;
    v4 = 0.0;
  }
  else
  {
    *((_DWORD *)this + 58) = v3 & 0xFFFFFFFE;
    v4 = 1.0 / a2;
  }
  *((float *)this + 96) = v4;
  v5 = vmulq_n_f32(*((float32x4_t *)this + 27), a2);
  v5.i32[3] = 0;
  *((float32x4_t *)this + 26) = v5;
  v5.i32[0] = LODWORD(a3->var0.var0[2]);
  v6 = 1.0 / v5.f32[0];
  _ZF = v5.f32[0] == 0.0;
  v8 = 0.0;
  if (!_ZF)
    v8 = v6;
  __asm { FMOV            V4.2S, #1.0 }
  *((int8x8_t *)this + 56) = vbic_s8((int8x8_t)vdiv_f32(_D4, *(float32x2_t *)a3->var0.var0), (int8x8_t)vceqz_f32(*(float32x2_t *)a3->var0.var0));
  *((float *)this + 114) = v8;
  *((_DWORD *)this + 115) = 0;
  result = (__n128)vmulq_n_f32(*((float32x4_t *)this + 25), v4);
  result.n128_u32[3] = 0;
  *((__n128 *)this + 40) = result;
  return result;
}

float32x4_t btRigidBody::updateInertiaTensor(btRigidBody *this)
{
  float32x4_t v1;
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t result;

  v1 = *((float32x4_t *)this + 28);
  v2 = *((float32x4_t *)this + 1);
  v3 = *((float32x4_t *)this + 2);
  v4 = *((float32x4_t *)this + 3);
  v5 = (float32x4_t)vtrn1q_s32((int32x4_t)v2, (int32x4_t)v3);
  v6 = (float32x4_t)vzip2q_s64((int64x2_t)v5, (int64x2_t)v4);
  v6.i32[3] = 0;
  v7 = vmulq_f32(v1, v4);
  *(int32x2_t *)v8.f32 = vzip2_s32(*(int32x2_t *)v2.f32, *(int32x2_t *)v3.f32);
  v8.i64[1] = vdup_lane_s32(*(int32x2_t *)v4.f32, 1).u32[0];
  v5.i64[1] = v4.u32[0];
  v9 = vmulq_f32(v1, v3);
  result = vmulq_f32(v2, v1);
  *((float32x4_t *)this + 19) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v5, result.f32[0]), v8, *(float32x2_t *)result.f32, 1), v6, result, 2);
  *((float32x4_t *)this + 20) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v5, v9.f32[0]), v8, *(float32x2_t *)v9.f32, 1), v6, v9, 2);
  *((float32x4_t *)this + 21) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v5, v7.f32[0]), v8, *(float32x2_t *)v7.f32, 1), v6, v7, 2);
  return result;
}

void btRigidBody::predictIntegratedTransform(btRigidBody *this, float a2, btTransform *a3, uint64_t a4, uint64_t a5, btTransform *a6)
{
  btTransformUtil::integrateTransform((float32x4_t *)this + 1, (const btTransform *)((char *)this + 352), (float32x4_t *)this + 23, &a3->var0, a2, a6);
}

__n128 btRigidBody::saveKinematicState(btRigidBody *this, __n128 result, uint64_t a3, uint64_t a4, uint64_t a5, float *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  __int128 v15;
  __int128 v16;
  float v17;
  btTransform v18;

  if (result.n128_f32[0] != 0.0)
  {
    *(_QWORD *)v18.var0.var0[1].var0.var0 = v9;
    *(_QWORD *)&v18.var0.var0[1].var0.var0[2] = v8;
    *(_QWORD *)v18.var1.var0.var0 = v6;
    *(_QWORD *)&v18.var1.var0.var0[2] = v7;
    v10 = result.n128_f32[0];
    v12 = *((_QWORD *)this + 67);
    if (v12)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v12 + 16))(v12, (char *)this + 16);
    v13 = vmulq_n_f32(vsubq_f32(*((float32x4_t *)this + 4), *((float32x4_t *)this + 8)), 1.0 / v10);
    v13.i32[3] = 0;
    *((float32x4_t *)this + 22) = v13;
    v17 = 0.0;
    btTransformUtil::calculateDiffAxisAngle((btTransformUtil *)((char *)this + 80), (const btTransform *)((char *)this + 16), &v18, (btVector3 *)&v17, a6);
    v14 = vmulq_n_f32(vmulq_n_f32((float32x4_t)v18.var0.var0[0], v17), 1.0 / v10);
    v14.i32[3] = 0;
    *((float32x4_t *)this + 23) = v14;
    *((_OWORD *)this + 9) = *((_OWORD *)this + 22);
    *((float32x4_t *)this + 10) = v14;
    v15 = *((_OWORD *)this + 2);
    *((_OWORD *)this + 5) = *((_OWORD *)this + 1);
    *((_OWORD *)this + 6) = v15;
    result = *((__n128 *)this + 3);
    v16 = *((_OWORD *)this + 4);
    *((__n128 *)this + 7) = result;
    *((_OWORD *)this + 8) = v16;
  }
  return result;
}

__n128 btRigidBody::setGravity(btRigidBody *this, float32x4_t *a2)
{
  float v2;
  float32x4_t v3;
  __n128 result;

  v2 = *((float *)this + 96);
  if (v2 != 0.0)
  {
    v3 = vmulq_n_f32(*a2, 1.0 / v2);
    v3.i32[3] = 0;
    *((float32x4_t *)this + 26) = v3;
  }
  result = *(__n128 *)a2;
  *((float32x4_t *)this + 27) = *a2;
  return result;
}

void btRigidBody::applyDamping(btRigidBody *this, float a2)
{
  float v4;
  float v5;
  float32x4_t v6;
  int8x16_t v7;
  float32x4_t v8;
  int8x16_t v9;
  float v10;
  int8x16_t v11;
  float v12;
  float32x4_t *v13;
  float32x4_t v14;
  int8x16_t v15;
  float v16;
  float32x4_t *v17;
  float32x4_t v18;
  float32x4_t v19;

  v4 = *((float *)this + 124);
  v19 = vmulq_n_f32(*((float32x4_t *)this + 22), powf(1.0 - v4, a2));
  *((float32x4_t *)this + 22) = v19;
  v5 = *((float *)this + 125);
  v6 = vmulq_n_f32(*((float32x4_t *)this + 23), powf(1.0 - v5, a2));
  *((float32x4_t *)this + 23) = v6;
  if (*((_BYTE *)this + 504))
  {
    v7 = (int8x16_t)vmulq_f32(v6, v6);
    if (vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL), vpadd_f32(*(float32x2_t *)v7.i8, *(float32x2_t *)v7.i8)).f32[0] >= *((float *)this + 129))
    {
      v8 = v19;
    }
    else
    {
      v8 = v19;
      v9 = (int8x16_t)vmulq_f32(v8, v8);
      if (vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL), vpadd_f32(*(float32x2_t *)v9.i8, *(float32x2_t *)v9.i8)).f32[0] < *((float *)this + 128))
      {
        v10 = *((float *)this + 127);
        v6 = vmulq_n_f32(v6, v10);
        v8 = vmulq_n_f32(v19, v10);
        *((float32x4_t *)this + 22) = v8;
        *((float32x4_t *)this + 23) = v6;
      }
    }
    v11 = (int8x16_t)vmulq_f32(v8, v8);
    v12 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v11.i8, *(float32x2_t *)v11.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL)).f32[0]);
    if (v12 < v4)
    {
      v13 = (float32x4_t *)((char *)this + 352);
      if (v12 <= 0.005)
      {
        v13->i64[0] = 0;
        *((_QWORD *)this + 45) = 0;
      }
      else
      {
        v14 = vmulq_f32(vmulq_n_f32(v8, 1.0 / v12), (float32x4_t)vdupq_n_s32(0x3BA3D70Au));
        v14.i32[3] = 0;
        *v13 = vsubq_f32(v8, v14);
      }
    }
    v15 = (int8x16_t)vmulq_f32(v6, v6);
    v16 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v15.i8, *(float32x2_t *)v15.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL)).f32[0]);
    if (v16 < v5)
    {
      v17 = (float32x4_t *)((char *)this + 368);
      if (v16 <= 0.005)
      {
        v17->i64[0] = 0;
        *((_QWORD *)this + 47) = 0;
      }
      else
      {
        v18 = vmulq_f32(vmulq_n_f32(v6, 1.0 / v16), (float32x4_t)vdupq_n_s32(0x3BA3D70Au));
        v18.i32[3] = 0;
        *v17 = vsubq_f32(v6, v18);
      }
    }
  }
}

float32x4_t btRigidBody::applyGravity(btRigidBody *this)
{
  float32x4_t result;

  if ((*((_BYTE *)this + 232) & 3) == 0)
  {
    result = vaddq_f32(*((float32x4_t *)this + 29), vmulq_f32(*((float32x4_t *)this + 26), *((float32x4_t *)this + 25)));
    *((float32x4_t *)this + 29) = result;
  }
  return result;
}

double btRigidBody::setCenterOfMassTransform(btRigidBody *this, const btTransform *a2)
{
  btVector3 *p_var1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  double result;

  if ((*((_BYTE *)this + 232) & 2) != 0)
  {
    v3 = *((_OWORD *)this + 2);
    *((_OWORD *)this + 5) = *((_OWORD *)this + 1);
    *((_OWORD *)this + 6) = v3;
    *((_OWORD *)this + 7) = *((_OWORD *)this + 3);
    p_var1 = (btVector3 *)((char *)this + 64);
  }
  else
  {
    *((_OWORD *)this + 5) = a2->var0.var0[0];
    *((_OWORD *)this + 6) = a2->var0.var0[1];
    *((_OWORD *)this + 7) = a2->var0.var0[2];
    p_var1 = &a2->var1;
  }
  v4 = *((_OWORD *)this + 22);
  v5 = *((_OWORD *)this + 23);
  *((btVector3 *)this + 8) = *p_var1;
  *((_OWORD *)this + 9) = v4;
  *((_OWORD *)this + 10) = v5;
  *((_OWORD *)this + 1) = a2->var0.var0[0];
  *((_OWORD *)this + 2) = a2->var0.var0[1];
  *((_OWORD *)this + 3) = a2->var0.var0[2];
  *((_OWORD *)this + 4) = a2->var1;
  *(_QWORD *)&result = btRigidBody::updateInertiaTensor(this).u64[0];
  return result;
}

btRigidBody *btRigidBody::computeGyroscopicForce@<X0>(btRigidBody *this@<X0>, float a2@<S0>, float32x4_t *a3@<X8>, float32x4_t _Q2@<Q2>)
{
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  float32x4_t v24;
  int8x16_t v25;
  float v26;

  __asm { FMOV            V2.2S, #1.0 }
  *(float32x2_t *)_Q2.f32 = vdiv_f32(*(float32x2_t *)_Q2.f32, *(float32x2_t *)((char *)this + 448));
  _Q2.f32[2] = 1.0 / *((float *)this + 114);
  v8 = *((float32x4_t *)this + 1);
  v9 = *((float32x4_t *)this + 2);
  v10 = *((float32x4_t *)this + 3);
  v11 = vmulq_f32(_Q2, v9);
  v12 = (float32x4_t)vtrn1q_s32((int32x4_t)v8, (int32x4_t)v9);
  *(int32x2_t *)v9.f32 = vzip2_s32(*(int32x2_t *)v8.f32, *(int32x2_t *)v9.f32);
  v13 = vmulq_f32(_Q2, v10);
  v14 = (float32x4_t)vzip2q_s64((int64x2_t)v12, (int64x2_t)v10);
  v9.i64[1] = vdup_lane_s32(*(int32x2_t *)v10.f32, 1).u32[0];
  v15 = vmulq_f32(v8, _Q2);
  v12.i64[1] = v10.u32[0];
  v14.i32[3] = 0;
  v16 = vmulq_n_f32(v12, v11.f32[0]);
  v17 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v12, v15.f32[0]), v9, *(float32x2_t *)v15.f32, 1), v14, v15, 2);
  v18 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v12, v13.f32[0]), v9, *(float32x2_t *)v13.f32, 1), v14, v13, 2);
  v19 = *((float32x4_t *)this + 23);
  v20 = vmulq_f32(v17, v19);
  v21 = (int8x16_t)vmulq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(v16, v9, *(float32x2_t *)v11.f32, 1), v14, v11, 2), v19);
  v22 = (int8x16_t)vmulq_f32(v18, v19);
  v22.i32[3] = 0;
  *(float32x2_t *)v20.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v21.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL)));
  *(float32x2_t *)v21.i8 = vpadd_f32(vpadd_f32(*(float32x2_t *)v22.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL)), 0);
  *(int8x8_t *)v11.f32 = vext_s8(*(int8x8_t *)v20.f32, *(int8x8_t *)v21.i8, 4uLL);
  v11.i64[1] = v20.i64[0];
  *(float32x2_t *)v20.f32 = vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v19.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL), 4uLL), *(float32x2_t *)v20.f32);
  *(float32x2_t *)&v20.u32[2] = vmul_f32(*(float32x2_t *)v19.f32, *(float32x2_t *)v21.i8);
  v23 = (int8x16_t)vsubq_f32(vmulq_f32(v19, v11), v20);
  v24.i64[0] = vextq_s8(v23, v23, 4uLL).u64[0];
  v24.i64[1] = v23.u32[0];
  v25 = (int8x16_t)vmulq_f32(v24, v24);
  v26 = vadd_f32(vpadd_f32(*(float32x2_t *)v25.i8, *(float32x2_t *)v25.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL)).f32[0];
  if (v26 > (float)(a2 * a2))
    v24 = vmulq_n_f32(v24, (float)(1.0 / sqrtf(v26)) * a2);
  *a3 = v24;
  return this;
}

BOOL btRigidBody::checkCollideWithOverride(btRigidBody *this, const btCollisionObject *a2)
{
  BOOL v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = 1;
  if ((*((_BYTE *)a2 + 264) & 2) != 0)
  {
    if (a2)
    {
      v3 = *((unsigned int *)this + 137);
      if ((int)v3 >= 1)
      {
        v4 = 0;
        v2 = 0;
        do
        {
          v5 = *(_QWORD *)(*((_QWORD *)this + 70) + 8 * v4);
          if (*(_BYTE *)(v5 + 28)
            && (*(const btCollisionObject **)(v5 + 40) == a2 || *(const btCollisionObject **)(v5 + 48) == a2))
          {
            break;
          }
          v2 = ++v4 >= v3;
        }
        while (v3 != v4);
      }
    }
  }
  return v2;
}

void btRigidBody::addConstraintRef(btRigidBody *this, btTypedConstraint *a2)
{
  int v4;
  btTypedConstraint **v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;

  v4 = *((_DWORD *)this + 137);
  if (v4 < 1)
    goto LABEL_7;
  v5 = (btTypedConstraint **)*((_QWORD *)this + 70);
  v6 = *((unsigned int *)this + 137);
  while (*v5 != a2)
  {
    ++v5;
    if (!--v6)
      goto LABEL_7;
  }
  if (!(_DWORD)v6)
  {
LABEL_7:
    if (v4 == *((_DWORD *)this + 138))
    {
      v7 = v4 ? 2 * v4 : 1;
      if (v4 < v7)
      {
        if (v7)
        {
          v8 = btAlignedAllocInternal(8 * v7, 16);
          v4 = *((_DWORD *)this + 137);
        }
        else
        {
          v8 = 0;
        }
        if (v4 >= 1)
        {
          v9 = 0;
          do
          {
            *(_QWORD *)(v8 + v9) = *(_QWORD *)(*((_QWORD *)this + 70) + v9);
            v9 += 8;
          }
          while (8 * v4 != v9);
        }
        v10 = (void **)*((_QWORD *)this + 70);
        if (v10 && *((_BYTE *)this + 568))
        {
          btAlignedFreeInternal(v10);
          v4 = *((_DWORD *)this + 137);
        }
        *((_BYTE *)this + 568) = 1;
        *((_QWORD *)this + 70) = v8;
        *((_DWORD *)this + 138) = v7;
      }
    }
    *(_QWORD *)(*((_QWORD *)this + 70) + 8 * v4) = a2;
    *((_DWORD *)this + 137) = v4 + 1;
  }
  *((_DWORD *)this + 73) = 1;
}

uint64_t btRigidBody::removeConstraintRef(btRigidBody *this, btTypedConstraint *a2)
{
  uint64_t result;
  btTypedConstraint *v4;

  v4 = a2;
  result = btAlignedObjectArray<btCollisionObject *>::remove((uint64_t)this + 544, &v4);
  *((_DWORD *)this + 73) = *((_DWORD *)this + 137) > 0;
  return result;
}

uint64_t btRigidBody::calculateSerializeBufferSize(btRigidBody *this)
{
  return 504;
}

const char *btRigidBody::serialize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t v13;
  uint64_t m;
  uint64_t n;
  uint64_t ii;
  uint64_t jj;
  uint64_t kk;
  uint64_t mm;
  __int128 v20;

  v5 = (_OWORD *)(a2 + 468);
  v6 = a1 + 508;
  btCollisionObject::serialize(a1, a2, a3);
  v7 = 0;
  v8 = a1 + 304;
  v9 = a2 + 272;
  do
  {
    for (i = 0; i != 16; i += 4)
      *(_DWORD *)(v9 + i) = *(_DWORD *)(v8 + i);
    ++v7;
    v8 += 16;
    v9 += 16;
  }
  while (v7 != 3);
  for (j = 0; j != 16; j += 4)
    *(_DWORD *)(a2 + 320 + j) = *(_DWORD *)(a1 + 352 + j);
  for (k = 0; k != 16; k += 4)
    *(_DWORD *)(a2 + 336 + k) = *(_DWORD *)(a1 + 368 + k);
  v13 = 0;
  *(_DWORD *)(a2 + 464) = *(_DWORD *)(a1 + 384);
  do
  {
    *(_DWORD *)(a2 + 352 + v13) = *(_DWORD *)(a1 + 624 + v13);
    v13 += 4;
  }
  while (v13 != 16);
  for (m = 0; m != 16; m += 4)
    *(_DWORD *)(a2 + 368 + m) = *(_DWORD *)(a1 + 400 + m);
  for (n = 0; n != 16; n += 4)
    *(_DWORD *)(a2 + 384 + n) = *(_DWORD *)(a1 + 416 + n);
  for (ii = 0; ii != 16; ii += 4)
    *(_DWORD *)(a2 + 400 + ii) = *(_DWORD *)(a1 + 432 + ii);
  for (jj = 0; jj != 16; jj += 4)
    *(_DWORD *)(a2 + 416 + jj) = *(_DWORD *)(a1 + 448 + jj);
  for (kk = 0; kk != 16; kk += 4)
    *(_DWORD *)(a2 + 432 + kk) = *(_DWORD *)(a1 + 464 + kk);
  for (mm = 0; mm != 16; mm += 4)
    *(_DWORD *)(a2 + 448 + mm) = *(_DWORD *)(a1 + 480 + mm);
  *(_QWORD *)&v20 = *(_QWORD *)(a1 + 496);
  *(_DWORD *)(a2 + 500) = *(unsigned __int8 *)(a1 + 504);
  *((_QWORD *)&v20 + 1) = *(_QWORD *)v6;
  *v5 = v20;
  v5[1] = *(_OWORD *)(v6 + 8);
  return "btRigidBodyFloatData";
}

uint64_t btRigidBody::serializeSingleObject(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v5 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 32))(a2, v4, 1);
  v6 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 40))(a1, *(_QWORD *)(v5 + 8), a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, v5, v6, 1497645650, a1);
}

void *btActionInterface::getFixedBody(btActionInterface *this)
{
  unsigned __int8 v1;
  unsigned __int128 v3;

  {
    v3 = 0uLL;
    btRigidBody::btRigidBody(&btActionInterface::getFixedBody(void)::s_fixed, 0, 0, &v3, 0.0);
    __cxa_atexit((void (*)(void *))btRigidBody::~btRigidBody, &btActionInterface::getFixedBody(void)::s_fixed, &dword_1DCCB8000);
  }
  v3 = 0uLL;
  btRigidBody::setMassProps((btRigidBody *)&btActionInterface::getFixedBody(void)::s_fixed, 0.0, (const btVector3 *)&v3);
  return &btActionInterface::getFixedBody(void)::s_fixed;
}

double btRaycastVehicle::btRaycastVehicle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double result;

  *(_QWORD *)a1 = &off_1EA596620;
  *(_BYTE *)(a1 + 32) = 1;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 12) = 0;
  *(_BYTE *)(a1 + 64) = 1;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 44) = 0;
  *(_BYTE *)(a1 + 96) = 1;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 76) = 0;
  *(_BYTE *)(a1 + 128) = 1;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 108) = 0;
  *(_QWORD *)(a1 + 152) = a4;
  *(_QWORD *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 224) = 1;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 204) = 0;
  *(_QWORD *)(a1 + 176) = a3;
  *(_QWORD *)&result = 0x200000000;
  *(_QWORD *)(a1 + 184) = 0x200000000;
  *(_DWORD *)(a1 + 192) = 1;
  *(_DWORD *)(a1 + 168) = 0;
  return result;
}

void btRaycastVehicle::~btRaycastVehicle(btRaycastVehicle *this)
{
  char *v2;

  *(_QWORD *)this = &off_1EA596620;
  v2 = (char *)this + 8;
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)this + 200);
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)this + 104);
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)this + 72);
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)this + 40);
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)v2);
}

{
  btRaycastVehicle::~btRaycastVehicle(this);
  JUMPOUT(0x1DF0D41C0);
}

uint64_t btRaycastVehicle::addWheel(uint64_t a1, __int128 *a2, __int128 *a3, __int128 *a4, uint64_t *a5, char a6, float a7, float a8)
{
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  void **v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v35;
  __int128 v36;
  __int128 v37;

  v12 = *a2;
  v13 = *a3;
  v14 = *a4;
  v15 = *a5;
  v16 = *((_DWORD *)a5 + 2);
  v17 = *((_DWORD *)a5 + 3);
  v19 = *((_DWORD *)a5 + 4);
  v18 = *((_DWORD *)a5 + 5);
  v20 = *(_DWORD *)(a1 + 204);
  if (v20 == *(_DWORD *)(a1 + 208))
  {
    v21 = v20 ? 2 * v20 : 1;
    if (v20 < v21)
    {
      v35 = *a4;
      v36 = *a3;
      v37 = *a2;
      if (v21)
      {
        v22 = btAlignedAllocInternal(320 * v21, 16);
        v20 = *(_DWORD *)(a1 + 204);
      }
      else
      {
        v22 = 0;
      }
      if (v20 >= 1)
      {
        v23 = 0;
        v24 = 320 * v20;
        do
        {
          v25 = *(_QWORD *)(a1 + 216) + v23;
          v26 = v22 + v23;
          *(_OWORD *)v26 = *(_OWORD *)v25;
          *(_OWORD *)(v26 + 16) = *(_OWORD *)(v25 + 16);
          *(_DWORD *)(v26 + 32) = *(_DWORD *)(v25 + 32);
          *(_OWORD *)(v26 + 48) = *(_OWORD *)(v25 + 48);
          *(_OWORD *)(v26 + 64) = *(_OWORD *)(v25 + 64);
          *(_OWORD *)(v26 + 80) = *(_OWORD *)(v25 + 80);
          *(_OWORD *)(v26 + 96) = *(_OWORD *)(v25 + 96);
          *(_OWORD *)(v26 + 112) = *(_OWORD *)(v25 + 112);
          *(_OWORD *)(v26 + 128) = *(_OWORD *)(v25 + 128);
          *(_OWORD *)(v26 + 144) = *(_OWORD *)(v25 + 144);
          *(_OWORD *)(v26 + 160) = *(_OWORD *)(v25 + 160);
          *(_OWORD *)(v26 + 176) = *(_OWORD *)(v25 + 176);
          *(_OWORD *)(v26 + 192) = *(_OWORD *)(v25 + 192);
          *(_OWORD *)(v26 + 208) = *(_OWORD *)(v25 + 208);
          v27 = *(_OWORD *)(v25 + 240);
          *(_OWORD *)(v26 + 224) = *(_OWORD *)(v25 + 224);
          *(_OWORD *)(v26 + 240) = v27;
          v28 = *(_OWORD *)(v25 + 256);
          v29 = *(_OWORD *)(v25 + 272);
          v30 = *(_OWORD *)(v25 + 288);
          *(_QWORD *)(v26 + 304) = *(_QWORD *)(v25 + 304);
          *(_OWORD *)(v26 + 272) = v29;
          *(_OWORD *)(v26 + 288) = v30;
          *(_OWORD *)(v26 + 256) = v28;
          v23 += 320;
        }
        while (v24 != v23);
      }
      v31 = *(void ***)(a1 + 216);
      if (v31 && *(_BYTE *)(a1 + 224))
        btAlignedFreeInternal(v31);
      *(_BYTE *)(a1 + 224) = 1;
      *(_QWORD *)(a1 + 216) = v22;
      *(_DWORD *)(a1 + 208) = v21;
      v20 = *(_DWORD *)(a1 + 204);
      v13 = v36;
      v12 = v37;
      v14 = v35;
    }
  }
  v32 = *(_QWORD *)(a1 + 216) + 320 * v20;
  *(_OWORD *)(v32 + 176) = v12;
  *(_OWORD *)(v32 + 192) = v13;
  *(_OWORD *)(v32 + 208) = v14;
  *(float *)(v32 + 224) = a7;
  *(_DWORD *)(v32 + 228) = v17;
  *(float *)(v32 + 232) = a8;
  *(_QWORD *)(v32 + 236) = v15;
  *(_DWORD *)(v32 + 244) = v16;
  *(_DWORD *)(v32 + 248) = v19;
  *(_OWORD *)(v32 + 252) = xmmword_1DD02CFC0;
  *(_DWORD *)(v32 + 268) = v18;
  *(_QWORD *)(v32 + 272) = 0;
  *(_BYTE *)(v32 + 280) = a6;
  LODWORD(v32) = *(_DWORD *)(a1 + 204);
  *(_DWORD *)(a1 + 204) = v32 + 1;
  v33 = *(_QWORD *)(a1 + 216) + 320 * (int)v32;
  btRaycastVehicle::updateWheelTransformsWS(a1, v33, 0);
  btRaycastVehicle::updateWheelTransform((btRaycastVehicle *)a1, *(_DWORD *)(a1 + 204) - 1, 0);
  return v33;
}

__n128 btRaycastVehicle::updateWheelTransformsWS(uint64_t a1, uint64_t a2, int a3)
{
  float32x4_t *v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  uint64_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  int8x16_t v13;
  int8x16_t v14;
  float32x4_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  float32x4_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  __n128 result;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;

  *(_BYTE *)(a2 + 96) = 0;
  v4 = *(float32x4_t **)(a1 + 176);
  v5 = v4[1];
  v6 = v4[2];
  v24 = v5;
  v25 = v6;
  v7 = v4[3];
  v8 = v4[4];
  v26 = v7;
  v27 = v8;
  if (a3)
  {
    v9 = v4[33].i64[1];
    if (v9)
    {
      (*(void (**)(uint64_t, float32x4_t *))(*(_QWORD *)v9 + 16))(v9, &v24);
      v5 = v24;
      v6 = v25;
      v7 = v26;
      v8 = v27;
    }
  }
  v10 = *(float32x4_t *)(a2 + 176);
  v11 = *(float32x4_t *)(a2 + 192);
  v12 = vmulq_f32(v5, v10);
  v13 = (int8x16_t)vmulq_f32(v10, v6);
  v14 = (int8x16_t)vmulq_f32(v10, v7);
  v14.i32[3] = 0;
  *(float32x2_t *)v12.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v12.f32, *(float32x2_t *)v13.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL)));
  *(float32x2_t *)&v12.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v14.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)), 0);
  v15 = vaddq_f32(v12, v8);
  v16 = (int8x16_t)vmulq_f32(v5, v11);
  v17 = (int8x16_t)vmulq_f32(v6, v11);
  v18 = (int8x16_t)vmulq_f32(v7, v11);
  v18.i32[3] = 0;
  *(float32x2_t *)v16.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v16.i8, *(float32x2_t *)v17.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL)));
  v16.u64[1] = (unint64_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v18.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL)), 0);
  *(float32x4_t *)(a2 + 48) = v15;
  *(int8x16_t *)(a2 + 64) = v16;
  v19 = *(float32x4_t *)(a2 + 208);
  v20 = (int8x16_t)vmulq_f32(v5, v19);
  v21 = (int8x16_t)vmulq_f32(v6, v19);
  v22 = (int8x16_t)vmulq_f32(v7, v19);
  v22.i32[3] = 0;
  result.n128_u64[0] = (unint64_t)vadd_f32(vpadd_f32(*(float32x2_t *)v20.i8, *(float32x2_t *)v21.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL)));
  *(float32x2_t *)&result.n128_i8[8] = vpadd_f32(vpadd_f32(*(float32x2_t *)v22.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL)), 0);
  *(__n128 *)(a2 + 80) = result;
  return result;
}

float32x4_t btRaycastVehicle::updateWheelTransform(btRaycastVehicle *this, int a2, int a3)
{
  uint64_t v3;
  int8x16_t v4;
  int8x16_t v5;
  float v6;
  __float2 v7;
  int8x16_t v8;
  float v9;
  __float2 v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  int8x16_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  int8x16_t v18;
  int8x16_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t result;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  btMatrix3x3 v31;
  btQuaternion v32;
  btMatrix3x3 v33;
  btQuaternion v34;

  v3 = *((_QWORD *)this + 27) + 320 * a2;
  btRaycastVehicle::updateWheelTransformsWS((uint64_t)this, v3, a3);
  v4.i64[0] = 0x8000000080000000;
  v4.i64[1] = 0x8000000080000000;
  v29 = *(float32x4_t *)(v3 + 80);
  v30 = (float32x4_t)veorq_s8(*(int8x16_t *)(v3 + 64), v4);
  v5 = (int8x16_t)vmulq_f32(v30, v30);
  v6 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v5.i8, *(float32x2_t *)v5.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL)).f32[0]);
  v7 = __sincosf_stret(*(float *)(v3 + 252) * 0.5);
  *(float32x2_t *)v34.var0.var0 = vmul_n_f32(*(float32x2_t *)v30.f32, v7.__sinval / v6);
  *(_QWORD *)&v34.var0.var0[2] = __PAIR64__(LODWORD(v7.__cosval), COERCE_UNSIGNED_INT(vmuls_lane_f32(v7.__sinval / v6, v30, 2)));
  btMatrix3x3::setRotation(&v33, (float32x4_t *)&v34);
  v28 = *(float32x4_t *)(v3 + 80);
  v8 = (int8x16_t)vmulq_f32(v28, v28);
  v9 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v8.i8, *(float32x2_t *)v8.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL)).f32[0]);
  v10 = __sincosf_stret(*(float *)(v3 + 256) * -0.5);
  *(float32x2_t *)v32.var0.var0 = vmul_n_f32(*(float32x2_t *)v28.f32, v10.__sinval / v9);
  *(_QWORD *)&v32.var0.var0[2] = __PAIR64__(LODWORD(v10.__cosval), COERCE_UNSIGNED_INT(vmuls_lane_f32(v10.__sinval / v9, v28, 2)));
  btMatrix3x3::setRotation(&v31, (float32x4_t *)&v32);
  v12 = (float32x4_t)v31.var0[0];
  v11 = (float32x4_t)v31.var0[1];
  v13 = (float32x4_t)v31.var0[2];
  v14 = (int8x16_t)v30;
  *(int8x8_t *)v15.f32 = vext_s8(*(int8x8_t *)v29.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL), 4uLL);
  v15.i64[1] = v29.i64[0];
  v16.i32[0] = *(_DWORD *)(v3 + 88);
  *(int8x8_t *)v17.f32 = vext_s8(*(int8x8_t *)v30.f32, (int8x8_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL), 4uLL);
  v17.i64[1] = v30.i64[0];
  v18 = (int8x16_t)vsubq_f32(vmulq_f32(v15, v30), vmulq_f32(v29, v17));
  v17.i64[0] = vextq_s8(v18, v18, 4uLL).u64[0];
  v17.i64[1] = v18.u32[0];
  v19 = (int8x16_t)vmulq_f32(v17, v17);
  *(float32x2_t *)v14.i8 = vpadd_f32(*(float32x2_t *)v19.i8, *(float32x2_t *)v19.i8);
  v20 = vmulq_n_f32(v17, 1.0 / sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL), *(float32x2_t *)v14.i8).f32[0]));
  v16.i32[1] = v20.i32[2];
  v16.i64[1] = v30.u32[2];
  v13.i32[3] = 0;
  v11.i32[3] = 0;
  v12.i32[3] = 0;
  v21 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v12, v33.var0[2].var0.var0[0]), v11, *(float32x2_t *)v33.var0[2].var0.var0, 1), v13, (float32x4_t)v33.var0[2], 2);
  v14.i32[0] = *(_DWORD *)(v3 + 80);
  v22.i32[0] = *(_DWORD *)(v3 + 84);
  v22.i32[1] = v20.i32[1];
  v22.i64[1] = v30.u32[1];
  v20.i64[0] = vzip1q_s32((int32x4_t)v14, (int32x4_t)v20).u64[0];
  v20.i64[1] = v30.u32[0];
  v23 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v20, v21.f32[0]), v22, *(float32x2_t *)v21.f32, 1), v16, v21, 2);
  v24 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v12, v33.var0[1].var0.var0[0]), v11, *(float32x2_t *)v33.var0[1].var0.var0, 1), v13, (float32x4_t)v33.var0[1], 2);
  v25 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v12, v33.var0[0].var0.var0[0]), v11, *(float32x2_t *)v33.var0[0].var0.var0, 1), v13, (float32x4_t)v33.var0[0], 2);
  *(float32x4_t *)(v3 + 112) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v20, v25.f32[0]), v22, *(float32x2_t *)v25.f32, 1), v16, v25, 2);
  *(float32x4_t *)(v3 + 128) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v20, v24.f32[0]), v22, *(float32x2_t *)v24.f32, 1), v16, v24, 2);
  v26 = vmulq_n_f32(*(float32x4_t *)(v3 + 64), *(float *)(v3 + 32));
  v26.i32[3] = 0;
  result = vaddq_f32(*(float32x4_t *)(v3 + 48), v26);
  *(float32x4_t *)(v3 + 144) = v23;
  *(float32x4_t *)(v3 + 160) = result;
  return result;
}

float btRaycastVehicle::rayCast(btRaycastVehicle *this, float32x4_t *a2)
{
  float32x4_t v4;
  btActionInterface *v5;
  float v6;
  float v7;
  float v8;
  float v9;
  BOOL v10;
  float32x4_t v11;
  int8x16_t v12;
  float v13;
  float32x4_t *v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  int8x16_t v19;
  int8x16_t v20;
  float v21;
  int8x16_t v22;
  float v24;
  _OWORD v25[2];
  float v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  btRaycastVehicle::updateWheelTransformsWS((uint64_t)this, (uint64_t)a2, 0);
  v24 = btWheelInfo::getSuspensionRestLength((btWheelInfo *)a2) + a2[14].f32[2];
  v4 = vmulq_n_f32(a2[4], v24);
  v4.i32[3] = 0;
  a2[1] = vaddq_f32(a2[3], v4);
  v26 = -1.0;
  v5 = (btActionInterface *)(*(uint64_t (**)(_QWORD, float32x4_t *, float32x4_t *, _OWORD *))(**((_QWORD **)this + 19) + 16))(*((_QWORD *)this + 19), a2 + 3, a2 + 1, v25);
  a2[6].i64[1] = 0;
  if (v5)
  {
    v6 = v24 * v26;
    *a2 = (float32x4_t)v25[1];
    a2[6].i8[0] = 1;
    btActionInterface::getFixedBody(v5);
    a2[6].i64[1] = (uint64_t)&btActionInterface::getFixedBody(void)::s_fixed;
    a2[2].f32[0] = v6 - a2[14].f32[2];
    v7 = btWheelInfo::getSuspensionRestLength((btWheelInfo *)a2) - (float)(a2[14].f32[1] * 0.01);
    v8 = btWheelInfo::getSuspensionRestLength((btWheelInfo *)a2) + (float)(a2[14].f32[1] * 0.01);
    v9 = a2[2].f32[0];
    if (v9 >= v7)
    {
      v10 = v9 <= v8;
    }
    else
    {
      v9 = v7;
      v10 = 0;
    }
    if (!v10)
    {
      if (v9 <= v8)
        v8 = v9;
      a2[2].f32[0] = v8;
    }
    v11 = (float32x4_t)v25[0];
    a2[1] = (float32x4_t)v25[0];
    v12 = (int8x16_t)vmulq_f32(*a2, a2[4]);
    v13 = vadd_f32(vpadd_f32(*(float32x2_t *)v12.i8, *(float32x2_t *)v12.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL)).f32[0];
    if (v13 >= -0.1)
    {
      a2[18].i32[3] = 0;
      v21 = 10.0;
    }
    else
    {
      v14 = (float32x4_t *)*((_QWORD *)this + 22);
      v15 = v14[23];
      v16 = vsubq_f32(v11, v14[4]);
      v17.i64[0] = vextq_s8((int8x16_t)v16, (int8x16_t)v16, 4uLL).u64[0];
      v16.i32[3] = 0;
      v17.i64[1] = v16.i64[0];
      *(int8x8_t *)v18.f32 = vext_s8(*(int8x8_t *)v15.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL), 4uLL);
      v18.i64[1] = v14[23].i64[0];
      v19 = (int8x16_t)vsubq_f32(vmulq_f32(v15, v17), vmulq_f32(v18, v16));
      v15.i64[0] = vextq_s8(v19, v19, 4uLL).u64[0];
      v15.i64[1] = v19.u32[0];
      v20 = (int8x16_t)vmulq_f32(*a2, vaddq_f32(v14[22], v15));
      v21 = -1.0 / v13;
      a2[18].f32[3] = v21
                    * vadd_f32(vpadd_f32(*(float32x2_t *)v20.i8, *(float32x2_t *)v20.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL)).f32[0];
    }
  }
  else
  {
    a2[2].f32[0] = btWheelInfo::getSuspensionRestLength((btWheelInfo *)a2);
    a2[18].i32[3] = 0;
    v22.i64[0] = 0x8000000080000000;
    v22.i64[1] = 0x8000000080000000;
    *(int8x16_t *)a2 = veorq_s8((int8x16_t)a2[4], v22);
    v6 = -1.0;
    v21 = 1.0;
  }
  a2[18].f32[2] = v21;
  return v6;
}

uint64_t btRaycastVehicle::updateVehicle(btRaycastVehicle *this, double a2, float32x4_t a3)
{
  int v4;
  int i;
  float32x4_t *v6;
  int8x16_t v7;
  float v8;
  __int32 *v9;
  int8x16_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  float32x4_t *v16;
  float v17;
  btVector3 v18;
  uint64_t v19;
  btVector3 v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float *v25;
  float32x4_t *v26;
  float32x4_t v27;
  __int32 *v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  int8x16_t v35;
  float32x4_t v36;
  int8x16_t v37;
  float v38;
  float *v39;
  float v40;
  float v41;
  __n128 v42;
  btVector3 v43;
  btVector3 v44;

  v42.n128_f64[0] = a2;
  v4 = *((_DWORD *)this + 51);
  if (v4 >= 1)
  {
    for (i = 0; i < v4; ++i)
    {
      btRaycastVehicle::updateWheelTransform(this, i, 0);
      v4 = *((_DWORD *)this + 51);
    }
  }
  v6 = (float32x4_t *)*((_QWORD *)this + 22);
  v7 = (int8x16_t)vmulq_f32(v6[22], v6[22]);
  v8 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v7.i8, *(float32x2_t *)v7.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)).f32[0])* 3.6;
  *((float *)this + 42) = v8;
  v9 = &v6->i32[*((int *)this + 48)];
  a3.i32[0] = v9[4];
  a3.i32[1] = v9[8];
  a3.i32[2] = v9[12];
  v10 = (int8x16_t)vmulq_f32(a3, v6[22]);
  if (vadd_f32(vpadd_f32(*(float32x2_t *)v10.i8, *(float32x2_t *)v10.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL)).f32[0] < 0.0)
  {
    v8 = -v8;
    *((float *)this + 42) = v8;
  }
  if (v4 >= 1)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v8 = btRaycastVehicle::rayCast(this, (float32x4_t *)(*((_QWORD *)this + 27) + v11));
      ++v12;
      v11 += 320;
    }
    while (v12 < *((int *)this + 51));
  }
  btRaycastVehicle::updateSuspension(this, v8);
  v13 = v42;
  if (*((int *)this + 51) >= 1)
  {
    v14 = 0;
    v15 = 0;
    do
    {
      v16 = (float32x4_t *)(*((_QWORD *)this + 27) + v14);
      v17 = v16[19].f32[0];
      if (v17 > v16[16].f32[3])
        v17 = v16[16].f32[3];
      v18 = (btVector3)vmulq_n_f32(vmulq_n_f32(*v16, v17), v13.n128_f32[0]);
      v18.var0.var0[3] = 0.0;
      v44 = v18;
      v19 = *((_QWORD *)this + 22);
      v20 = (btVector3)vsubq_f32(v16[1], *(float32x4_t *)(v19 + 64));
      v20.var0.var0[3] = 0.0;
      v43 = v20;
      btRigidBody::applyImpulse((btRigidBody *)v19, (float32x4_t *)&v44, (int8x16_t *)&v43);
      v13 = v42;
      ++v15;
      v14 += 320;
    }
    while (v15 < *((int *)this + 51));
  }
  result = (*(uint64_t (**)(btRaycastVehicle *, __n128))(*(_QWORD *)this + 40))(this, v13);
  v22 = *((unsigned int *)this + 51);
  if ((int)v22 >= 1)
  {
    v23 = 0;
    v24 = *((_QWORD *)this + 27);
    v25 = (float *)(v24 + 232);
    do
    {
      if (*((_BYTE *)v25 - 136))
      {
        v26 = (float32x4_t *)*((_QWORD *)this + 22);
        v27 = v26[23];
        v28 = &v26->i32[*((int *)this + 48)];
        v29 = vsubq_f32(*(float32x4_t *)(v25 - 46), v26[4]);
        v30.i64[0] = vextq_s8((int8x16_t)v29, (int8x16_t)v29, 4uLL).u64[0];
        v29.i32[3] = 0;
        v30.i64[1] = v29.i64[0];
        *(int8x8_t *)v31.f32 = vext_s8(*(int8x8_t *)v27.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL), 4uLL);
        v31.i64[1] = v26[23].i64[0];
        v32 = vsubq_f32(vmulq_f32(v27, v30), vmulq_f32(v31, v29));
        v29.i64[0] = vextq_s8((int8x16_t)v32, (int8x16_t)v32, 4uLL).u64[0];
        v29.i64[1] = v32.u32[0];
        v33 = vaddq_f32(v26[22], v29);
        v32.i32[0] = v28[4];
        v32.i32[1] = v28[8];
        v32.i32[2] = v28[12];
        v34 = *(float32x4_t *)(v25 - 58);
        v35 = (int8x16_t)vmulq_f32(v32, v34);
        v36 = vmulq_n_f32(v34, vadd_f32(vpadd_f32(*(float32x2_t *)v35.i8, *(float32x2_t *)v35.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL)).f32[0]);
        v36.i32[3] = 0;
        v37 = (int8x16_t)vmulq_f32(vsubq_f32(v32, v36), v33);
        v38 = (float)(v42.n128_f32[0]
                    * vadd_f32(vpadd_f32(*(float32x2_t *)v37.i8, *(float32x2_t *)v37.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v37, v37, 8uLL)).f32[0])/ *v25;
        v39 = v25 + 6;
        v40 = v25[6];
        v41 = v38;
      }
      else
      {
        v39 = (float *)(v24 + 320 * v23 + 256);
        v38 = v25[6];
        v40 = v25[7];
        v41 = v40;
      }
      *v39 = v40 + v38;
      v25[7] = v41 * 0.99;
      ++v23;
      v25 += 80;
      --v22;
    }
    while (v22);
  }
  return result;
}

void btRaycastVehicle::updateSuspension(btRaycastVehicle *this, float a2)
{
  uint64_t v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  float v8;
  float v9;
  uint64_t v10;

  if (*((int *)this + 51) >= 1)
  {
    v3 = 0;
    v4 = 0;
    v5 = 1.0 / *(float *)(*((_QWORD *)this + 22) + 384);
    do
    {
      v6 = *((_QWORD *)this + 27) + v3;
      v7 = 0.0;
      if (*(_BYTE *)(v6 + 96))
      {
        v8 = (float)(*(float *)(v6 + 236)
                   * (float)(btWheelInfo::getSuspensionRestLength((btWheelInfo *)(*((_QWORD *)this + 27) + v3))
                           - *(float *)(v6 + 32)))
           * *(float *)(v6 + 296);
        v9 = *(float *)(v6 + 300);
        if (v9 >= 0.0)
          v10 = 244;
        else
          v10 = 240;
        v7 = v5 * (float)(v8 - (float)(*(float *)(v6 + v10) * v9));
        if (v7 < 0.0)
          v7 = 0.0;
      }
      *(float *)(v6 + 304) = v7;
      ++v4;
      v3 += 320;
    }
    while (v4 < *((int *)this + 51));
  }
}

uint64_t btRaycastVehicle::setSteeringValue(uint64_t this, float a2, int a3)
{
  *(float *)(*(_QWORD *)(this + 216) + 320 * a3 + 252) = a2;
  return this;
}

uint64_t btRaycastVehicle::getWheelInfo(btRaycastVehicle *this, int a2)
{
  return *((_QWORD *)this + 27) + 320 * a2;
}

uint64_t btRaycastVehicle::applyEngineForce(uint64_t this, float a2, int a3)
{
  *(float *)(*(_QWORD *)(this + 216) + 320 * a3 + 272) = a2;
  return this;
}

uint64_t btRaycastVehicle::setBrake(uint64_t this, float a2, int a3)
{
  *(float *)(*(_QWORD *)(this + 216) + 320 * a3 + 276) = a2;
  return this;
}

float calcRollingFriction(float32x4_t **a1)
{
  float32x4_t *v1;
  float32x4_t v2;
  float32x4_t v3;
  int8x8_t v4;
  float32x4_t v5;
  int8x8_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  int8x16_t v10;
  float32x4_t v11;
  float32x4_t v12;
  int8x16_t v13;
  float32x4_t v14;
  int8x16_t v15;
  float v16;
  float result;
  float v18;

  v1 = a1[1];
  v2 = *((float32x4_t *)a1 + 1);
  v3 = vsubq_f32(v2, (*a1)[4]);
  v4 = (int8x8_t)vextq_s8((int8x16_t)v3, (int8x16_t)v3, 8uLL).u64[0];
  v3.i32[3] = 0;
  v5 = vsubq_f32(v2, v1[4]);
  v6 = (int8x8_t)vextq_s8((int8x16_t)v5, (int8x16_t)v5, 8uLL).u64[0];
  v5.i32[3] = 0;
  v7 = (*a1)[23];
  *(int8x8_t *)v8.f32 = vext_s8(*(int8x8_t *)v7.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v7, (int8x16_t)v7, 8uLL), 4uLL);
  v8.i64[1] = (*a1)[23].i64[0];
  *(int8x8_t *)v9.f32 = vext_s8(*(int8x8_t *)v3.f32, v4, 4uLL);
  v9.i64[1] = v3.i64[0];
  v10 = (int8x16_t)vsubq_f32(vmulq_f32(v7, v9), vmulq_f32(v8, v3));
  v9.i64[0] = vextq_s8(v10, v10, 4uLL).u64[0];
  v9.i64[1] = v10.i64[0];
  v11 = v1[23];
  *(int8x8_t *)v8.f32 = vext_s8(*(int8x8_t *)v11.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL), 4uLL);
  v8.i64[1] = v1[23].i64[0];
  *(int8x8_t *)v12.f32 = vext_s8(*(int8x8_t *)v5.f32, v6, 4uLL);
  v12.i64[1] = v5.i64[0];
  v13 = (int8x16_t)vsubq_f32(vmulq_f32(v11, v12), vmulq_f32(v8, v5));
  v11.i64[0] = vextq_s8(v13, v13, 4uLL).u64[0];
  v11.i64[1] = v13.i64[0];
  v14 = vsubq_f32(vaddq_f32((*a1)[22], v9), vaddq_f32(v1[22], v11));
  v14.i32[3] = 0;
  v15 = (int8x16_t)vmulq_f32(*((float32x4_t *)a1 + 2), v14);
  v16 = *((float *)a1 + 13);
  result = -(float)(vadd_f32(vpadd_f32(*(float32x2_t *)v15.i8, *(float32x2_t *)v15.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL)).f32[0]* *((float *)a1 + 12));
  if (v16 < result)
    result = *((float *)a1 + 13);
  v18 = -v16;
  if (result < v18)
    return v18;
  return result;
}

void btRaycastVehicle::updateFriction(btRaycastVehicle *this, float a2)
{
  int v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  _DWORD *v21;
  int *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  _DWORD *v28;
  int *v29;
  int v30;
  int v31;
  _DWORD *v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  btRigidBody *v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  uint64_t v47;
  float32x4_t v48;
  int8x16_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  int8x16_t v53;
  uint64_t v54;
  float32x4_t v55;
  int8x16_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  float32x4_t *v63;
  float v64;
  float v65;
  uint64_t v66;
  float v67;
  uint64_t v68;
  float v69;
  float v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  float v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  btVector3 v82;
  float v83;
  btVector3 v84;
  uint64_t v85;
  uint64_t v86;
  btVector3 v87;
  btVector3 v88;
  btRigidBody *v89;
  _DWORD *v90;
  int8x16_t v91;
  float32x4_t v92;
  int8x16_t v93;
  int8x16_t v94;
  btVector3 v95;
  btVector3 v96;
  btVector3 v97;
  __int128 v98;
  _OWORD v99[2];
  uint64_t v100;

  v100 = *MEMORY[0x1E0C80C00];
  v2 = *((_DWORD *)this + 51);
  if (!v2)
    return;
  if (*((_DWORD *)this + 3) < v2 && *((_DWORD *)this + 4) < v2)
  {
    v5 = btAlignedAllocInternal(16 * v2, 16);
    v6 = v5;
    v7 = *((unsigned int *)this + 3);
    if ((int)v7 >= 1)
    {
      v8 = 0;
      v9 = 16 * v7;
      do
      {
        *(_OWORD *)(v5 + v8) = *(_OWORD *)(*((_QWORD *)this + 3) + v8);
        v8 += 16;
      }
      while (v9 != v8);
    }
    v10 = (void **)*((_QWORD *)this + 3);
    if (v10 && *((_BYTE *)this + 32))
      btAlignedFreeInternal(v10);
    *((_BYTE *)this + 32) = 1;
    *((_QWORD *)this + 3) = v6;
    *((_DWORD *)this + 4) = v2;
  }
  *((_DWORD *)this + 3) = v2;
  if (*((_DWORD *)this + 11) < v2 && *((_DWORD *)this + 12) < v2)
  {
    v11 = btAlignedAllocInternal(16 * v2, 16);
    v12 = v11;
    v13 = *((unsigned int *)this + 11);
    if ((int)v13 >= 1)
    {
      v14 = 0;
      v15 = 16 * v13;
      do
      {
        *(_OWORD *)(v11 + v14) = *(_OWORD *)(*((_QWORD *)this + 7) + v14);
        v14 += 16;
      }
      while (v15 != v14);
    }
    v16 = (void **)*((_QWORD *)this + 7);
    if (v16 && *((_BYTE *)this + 64))
      btAlignedFreeInternal(v16);
    *((_BYTE *)this + 64) = 1;
    *((_QWORD *)this + 7) = v12;
    *((_DWORD *)this + 12) = v2;
  }
  *((_DWORD *)this + 11) = v2;
  v17 = *((int *)this + 19);
  if ((int)v17 < v2)
  {
    if (*((_DWORD *)this + 20) >= v2)
    {
LABEL_30:
      bzero((void *)(*((_QWORD *)this + 11) + 4 * v17), 4 * (v2 + ~(_DWORD)v17) + 4);
      goto LABEL_31;
    }
    v18 = btAlignedAllocInternal(4 * v2, 16);
    v19 = *((unsigned int *)this + 19);
    v20 = (void **)*((_QWORD *)this + 11);
    if ((int)v19 < 1)
    {
      if (!v20)
      {
LABEL_29:
        *((_BYTE *)this + 96) = 1;
        *((_QWORD *)this + 11) = v18;
        *((_DWORD *)this + 20) = v2;
        goto LABEL_30;
      }
    }
    else
    {
      v21 = (_DWORD *)v18;
      v22 = (int *)*((_QWORD *)this + 11);
      do
      {
        v23 = *v22++;
        *v21++ = v23;
        --v19;
      }
      while (v19);
    }
    if (*((_BYTE *)this + 96))
      btAlignedFreeInternal(v20);
    goto LABEL_29;
  }
LABEL_31:
  *((_DWORD *)this + 19) = v2;
  v24 = *((int *)this + 27);
  if ((int)v24 >= v2)
    goto LABEL_42;
  if (*((_DWORD *)this + 28) < v2)
  {
    v25 = btAlignedAllocInternal(4 * v2, 16);
    v26 = *((unsigned int *)this + 27);
    v27 = (void **)*((_QWORD *)this + 15);
    if ((int)v26 < 1)
    {
      if (!v27)
      {
LABEL_40:
        *((_BYTE *)this + 128) = 1;
        *((_QWORD *)this + 15) = v25;
        *((_DWORD *)this + 28) = v2;
        goto LABEL_41;
      }
    }
    else
    {
      v28 = (_DWORD *)v25;
      v29 = (int *)*((_QWORD *)this + 15);
      do
      {
        v30 = *v29++;
        *v28++ = v30;
        --v26;
      }
      while (v26);
    }
    if (*((_BYTE *)this + 128))
      btAlignedFreeInternal(v27);
    goto LABEL_40;
  }
LABEL_41:
  bzero((void *)(*((_QWORD *)this + 15) + 4 * v24), 4 * (v2 + ~(_DWORD)v24) + 4);
LABEL_42:
  *((_DWORD *)this + 27) = v2;
  v31 = *((_DWORD *)this + 51);
  if (v31 >= 1)
  {
    v32 = (_DWORD *)*((_QWORD *)this + 15);
    v33 = (_DWORD *)*((_QWORD *)this + 11);
    v34 = *((unsigned int *)this + 51);
    do
    {
      *v32++ = 0;
      *v33++ = 0;
      --v34;
    }
    while (v34);
    v35 = 0;
    v36 = 0;
    v37 = 0;
    v38 = 0;
    do
    {
      v39 = *((_QWORD *)this + 27) + v35;
      v40 = *(btRigidBody **)(v39 + 104);
      if (v40)
      {
        v97 = *(btVector3 *)(v39 + 112);
        v98 = *(_OWORD *)(v39 + 128);
        v99[0] = *(_OWORD *)(v39 + 144);
        HIDWORD(v41) = HIDWORD(v99[0]);
        v42 = *((int *)this + 46);
        *(float *)&v41 = v97.var0.var0[v42];
        DWORD1(v41) = *((_DWORD *)&v99[-1] + v42);
        DWORD2(v41) = *((_DWORD *)v99 + v42);
        *(_OWORD *)(*((_QWORD *)this + 7) + 16 * v38) = v41;
        v43 = *((_QWORD *)this + 7);
        v44 = *(float32x4_t *)(v43 + 16 * v38);
        v45 = vmulq_f32(v44, *(float32x4_t *)v39);
        v46 = vmulq_n_f32(*(float32x4_t *)v39, vadd_f32(vpadd_f32(*(float32x2_t *)v45.f32, *(float32x2_t *)v45.f32), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL)).f32[0]);
        v46.i32[3] = 0;
        *(float32x4_t *)(v43 + 16 * v38) = vsubq_f32(v44, v46);
        v47 = *((_QWORD *)this + 7);
        v48 = *(float32x4_t *)(v47 + 16 * v38);
        v49 = (int8x16_t)vmulq_f32(v48, v48);
        v50 = vmulq_n_f32(v48, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v49.i8, *(float32x2_t *)v49.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v49, v49, 8uLL)).f32[0]));
        *(float32x4_t *)(v47 + 16 * v38) = v50;
        *(float32x4_t *)(*((_QWORD *)this + 7) + 16 * v38) = v50;
        v51 = *(float32x4_t *)(*((_QWORD *)this + 7) + 16 * v38);
        *(int8x8_t *)v45.f32 = vext_s8(*(int8x8_t *)v39, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v39, *(int8x16_t *)v39, 8uLL), 4uLL);
        v45.i64[1] = *(_QWORD *)v39;
        *(int8x8_t *)v52.f32 = vext_s8(*(int8x8_t *)v51.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL), 4uLL);
        v52.i64[1] = *(_QWORD *)(*((_QWORD *)this + 7) + 16 * v38);
        v53 = (int8x16_t)vsubq_f32(vmulq_f32(*(float32x4_t *)v39, v52), vmulq_f32(v51, v45));
        v51.i64[0] = vextq_s8(v53, v53, 4uLL).u64[0];
        v51.i64[1] = v53.u32[0];
        *(float32x4_t *)(*((_QWORD *)this + 3) + 16 * v38) = v51;
        v54 = *((_QWORD *)this + 3);
        v55 = *(float32x4_t *)(v54 + 16 * v38);
        v56 = (int8x16_t)vmulq_f32(v55, v55);
        *(float32x4_t *)(v54 + 16 * v38) = vmulq_n_f32(v55, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v56.i8, *(float32x2_t *)v56.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v56, v56, 8uLL)).f32[0]));
        resolveSingleBilateral(*((btRigidBody **)this + 22), (float32x4_t *)(v39 + 16), v40, (float32x4_t *)(v39 + 16), 0.0, (float32x4_t *)(*((_QWORD *)this + 7) + v36), (float *)(*((_QWORD *)this + 15) + v37), a2);
        *(float *)(*((_QWORD *)this + 15) + 4 * v38) = *(float *)&sideFrictionStiffness2
                                                     * *(float *)(*((_QWORD *)this + 15) + 4 * v38);
        v31 = *((_DWORD *)this + 51);
      }
      ++v38;
      v37 += 4;
      v36 += 16;
      v35 += 320;
    }
    while (v38 < v31);
    if (v31 >= 1)
    {
      v57 = 0;
      v58 = 0;
      v59 = 0;
      v60 = *((_QWORD *)this + 27);
      v61 = 308;
      v62 = v60;
      do
      {
        v63 = *(float32x4_t **)(v62 + v61 - 204);
        if (v63)
        {
          v64 = *(float *)(v62 + v61 - 36);
          if (v64 == 0.0)
          {
            v67 = *(float *)(v62 + v61 - 32);
            if (v67 == 0.0)
              v67 = 0.0;
            btWheelContactPoint::btWheelContactPoint((btWheelContactPoint *)&v97, *((float32x4_t **)this + 22), v63, (float32x4_t *)(v62 + v61 - 292), (int8x16_t *)(*((_QWORD *)this + 3) + v57), v67);
            v65 = calcRollingFriction((float32x4_t **)&v97);
            v60 = *((_QWORD *)this + 27);
            v66 = v60;
          }
          else
          {
            v65 = v64 * a2;
            v66 = v62;
          }
          v68 = *((_QWORD *)this + 11);
          *(_DWORD *)(v68 + 4 * v58) = 0;
          *(_DWORD *)(v66 + v61) = 1065353216;
          v69 = (float)(*(float *)(v62 + v61 - 4) * a2) * *(float *)(v62 + v61 - 60);
          *(float *)(v68 + 4 * v58) = v65;
          v70 = (float)(*(float *)(*((_QWORD *)this + 15) + 4 * v58) * *(float *)(*((_QWORD *)this + 15) + 4 * v58))
              + (float)((float)(v65 * 0.5) * (float)(v65 * 0.5));
          if (v70 > (float)(v69 * v69))
          {
            *(float *)(v66 + v61) = (float)(v69 / sqrtf(v70)) * *(float *)(v66 + v61);
            v59 = 1;
          }
        }
        else
        {
          *(_DWORD *)(*((_QWORD *)this + 11) + 4 * v58) = 0;
          *(_DWORD *)(v60 + v61) = 1065353216;
          v66 = v60;
        }
        ++v58;
        v71 = *((int *)this + 51);
        v57 += 16;
        v61 += 320;
        v62 = v66;
      }
      while (v58 < v71);
      v72 = *((unsigned int *)this + 51);
      if ((int)v71 >= 1 && (v59 & 1) != 0)
      {
        v73 = 0;
        v74 = *((_QWORD *)this + 15);
        v75 = 308;
        do
        {
          if (*(float *)(v74 + v73) != 0.0)
          {
            v76 = *((_QWORD *)this + 27);
            v77 = *(float *)(v76 + v75);
            if (v77 < 1.0)
            {
              *(float *)(*((_QWORD *)this + 11) + v73) = v77 * *(float *)(*((_QWORD *)this + 11) + v73);
              *(float *)(v74 + v73) = *(float *)(v76 + v75) * *(float *)(v74 + v73);
            }
          }
          v73 += 4;
          v75 += 320;
        }
        while (4 * v72 != v73);
      }
      if ((int)v72 >= 1)
      {
        v78 = 0;
        v79 = 264;
        do
        {
          v80 = *((_QWORD *)this + 27);
          v81 = *((_QWORD *)this + 22);
          v82 = (btVector3)vsubq_f32(*(float32x4_t *)(v80 + v79 - 248), *(float32x4_t *)(v81 + 64));
          v82.var0.var0[3] = 0.0;
          v97 = v82;
          v83 = *(float *)(*((_QWORD *)this + 11) + 4 * v78);
          if (v83 != 0.0)
          {
            v84 = (btVector3)vmulq_n_f32(*(float32x4_t *)(*((_QWORD *)this + 3) + 16 * v78), v83);
            v84.var0.var0[3] = 0.0;
            v96 = v84;
            btRigidBody::applyImpulse((btRigidBody *)v81, (float32x4_t *)&v96, (int8x16_t *)&v97);
          }
          v85 = *((_QWORD *)this + 15);
          if (*(float *)(v85 + 4 * v78) != 0.0)
          {
            v86 = *(_QWORD *)(*((_QWORD *)this + 27) + v79 - 160);
            v87 = (btVector3)vsubq_f32(*(float32x4_t *)(v80 + v79 - 248), *(float32x4_t *)(v86 + 64));
            v87.var0.var0[3] = 0.0;
            v96 = v87;
            v88 = (btVector3)vmulq_n_f32(*(float32x4_t *)(*((_QWORD *)this + 7) + 16 * v78), *(float *)(v85 + 4 * v78));
            v88.var0.var0[3] = 0.0;
            v95 = v88;
            v89 = (btRigidBody *)*((_QWORD *)this + 22);
            v90 = (_DWORD *)((char *)v89 + 4 * *((int *)this + 47));
            v88.var0.var0[0] = (float)v90[4];
            v88.var0.var0[1] = (float)v90[8];
            v88.var0.var0[2] = (float)v90[12];
            v91 = (int8x16_t)vmulq_f32((float32x4_t)v88, (float32x4_t)v97);
            v92 = vmulq_n_f32((float32x4_t)v88, (float)(1.0 - *(float *)(v80 + v79))* vadd_f32(vpadd_f32(*(float32x2_t *)v91.i8, *(float32x2_t *)v91.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v91, v91, 8uLL)).f32[0]);
            v92.i32[3] = 0;
            v97 = (btVector3)vsubq_f32((float32x4_t)v97, v92);
            btRigidBody::applyImpulse(v89, (float32x4_t *)&v95, (int8x16_t *)&v97);
            v93.i64[0] = 0x8000000080000000;
            v93.i64[1] = 0x8000000080000000;
            v94 = veorq_s8((int8x16_t)v95, v93);
            btRigidBody::applyImpulse((btRigidBody *)v86, (float32x4_t *)&v94, (int8x16_t *)&v96);
          }
          ++v78;
          v79 += 320;
        }
        while (v78 < *((int *)this + 51));
      }
    }
  }
}

uint64_t btRaycastVehicle::debugDraw(uint64_t this, btIDebugDraw *a2, double a3, float32x4_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float32x4_t *v13;
  float v14;
  __int32 *v15;
  float32x4_t v16;
  float32x4_t v17;
  float v18;
  uint64_t v19;
  int v20;

  if (*(int *)(this + 204) >= 1)
  {
    v5 = this;
    v6 = 0;
    v7 = 0;
    __asm { FMOV            V8.2S, #1.0 }
    do
    {
      v18 = 0.0;
      v19 = _D8;
      v20 = 0;
      v13 = (float32x4_t *)(*(_QWORD *)(v5 + 216) + v6);
      if (v13[6].i8[0])
        v14 = 0.0;
      else
        v14 = 1.0;
      v18 = v14;
      v19 = 0x3F80000000000000;
      v20 = 0;
      v17 = v13[10];
      v15 = &v13->i32[*(int *)(v5 + 184)];
      a4.i32[0] = v15[28];
      a4.i32[1] = v15[32];
      a4.i32[2] = v15[36];
      v16 = vaddq_f32(v17, a4);
      (*(void (**)(btIDebugDraw *, float32x4_t *, float32x4_t *, float *))(*(_QWORD *)a2 + 16))(a2, &v17, &v16, &v18);
      this = (*(uint64_t (**)(btIDebugDraw *, float32x4_t *, uint64_t, float *))(*(_QWORD *)a2 + 16))(a2, &v17, *(_QWORD *)(v5 + 216) + v6 + 16, &v18);
      ++v7;
      v6 += 320;
    }
    while (v7 < *(int *)(v5 + 204));
  }
  return this;
}

uint64_t btDefaultVehicleRaycaster::castRay(uint64_t a1)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8));
  return 0;
}

void btDefaultVehicleRaycaster::~btDefaultVehicleRaycaster(btDefaultVehicleRaycaster *this)
{
  JUMPOUT(0x1DF0D41C0);
}

uint64_t btRaycastVehicle::updateAction(btRaycastVehicle *this, btCollisionWorld *a2, float a3)
{
  return (*(uint64_t (**)(btRaycastVehicle *, float))(*(_QWORD *)this + 32))(this, a3);
}

_DWORD *btRaycastVehicle::setCoordinateSystem(_DWORD *this, int a2, int a3, int a4)
{
  this[46] = a2;
  this[47] = a3;
  this[48] = a4;
  return this;
}

void btWheelContactPoint::btWheelContactPoint(btWheelContactPoint *this, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, int8x16_t *a5, float a6)
{
  float32x4_t v6;
  int8x8_t v7;
  float32x4_t v8;
  float32x4_t v9;
  int8x16_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  int8x16_t v16;
  int8x16_t v17;
  float32x4_t v18;
  int8x16_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  int8x16_t v24;
  int8x16_t v25;

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = a3;
  *((float32x4_t *)this + 1) = *a4;
  *((int8x16_t *)this + 2) = *a5;
  *((float *)this + 13) = a6;
  v6 = vsubq_f32(*a4, a2[4]);
  v7 = (int8x8_t)vextq_s8((int8x16_t)v6, (int8x16_t)v6, 8uLL).u64[0];
  v6.i32[3] = 0;
  *(int8x8_t *)v8.f32 = vext_s8(*(int8x8_t *)v6.f32, v7, 4uLL);
  v8.i64[1] = v6.i64[0];
  *(int8x8_t *)v9.f32 = vext_s8(*(int8x8_t *)a5->i8, (int8x8_t)*(_OWORD *)&vextq_s8(*a5, *a5, 8uLL), 4uLL);
  v9.i64[1] = a5->i64[0];
  v10 = (int8x16_t)vsubq_f32(vmulq_f32(v9, v6), vmulq_f32(*(float32x4_t *)a5, v8));
  v11.i64[0] = vextq_s8(v10, v10, 4uLL).u64[0];
  v11.i64[1] = v10.u32[0];
  v12 = a2[19];
  v13 = a2[20];
  v12.i32[3] = 0;
  v13.i32[3] = 0;
  v14 = a2[21];
  v14.i32[3] = 0;
  v15 = vaddq_f32(vmulq_laneq_f32(v14, v11, 2), vaddq_f32(vmulq_n_f32(v12, v11.f32[0]), vmulq_lane_f32(v13, *(float32x2_t *)v11.f32, 1)));
  v12.i64[0] = vextq_s8((int8x16_t)v15, (int8x16_t)v15, 4uLL).u64[0];
  v12.i64[1] = v15.i64[0];
  v16 = (int8x16_t)vsubq_f32(vmulq_f32(v8, v15), vmulq_f32(v12, v6));
  v8.i64[0] = vextq_s8(v16, v16, 4uLL).u64[0];
  v8.i64[1] = v16.u32[0];
  v17 = (int8x16_t)vmulq_f32(*(float32x4_t *)a5, v8);
  v18 = vsubq_f32(*a4, a3[4]);
  v15.i64[0] = vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL).u64[0];
  v18.i32[3] = 0;
  *(int8x8_t *)v15.f32 = vext_s8(*(int8x8_t *)v18.f32, *(int8x8_t *)v15.f32, 4uLL);
  v15.i64[1] = v18.i64[0];
  v19 = (int8x16_t)vsubq_f32(vmulq_f32(v9, v18), vmulq_f32(*(float32x4_t *)a5, v15));
  v12.i64[0] = vextq_s8(v19, v19, 4uLL).u64[0];
  v12.i64[1] = v19.u32[0];
  v20 = a3[19];
  v21 = a3[20];
  v20.i32[3] = 0;
  v21.i32[3] = 0;
  v22 = a3[21];
  v22.i32[3] = 0;
  v23 = vaddq_f32(vmulq_laneq_f32(v22, v12, 2), vaddq_f32(vmulq_n_f32(v20, v12.f32[0]), vmulq_lane_f32(v21, *(float32x2_t *)v12.f32, 1)));
  v21.i64[0] = vextq_s8((int8x16_t)v23, (int8x16_t)v23, 4uLL).u64[0];
  v21.i64[1] = v23.i64[0];
  v24 = (int8x16_t)vsubq_f32(vmulq_f32(v15, v23), vmulq_f32(v21, v18));
  v23.i64[0] = vextq_s8(v24, v24, 4uLL).u64[0];
  v23.i64[1] = v24.u32[0];
  v25 = (int8x16_t)vmulq_f32(*(float32x4_t *)a5, v23);
  *((float *)this + 12) = 1.0
                        / (float)((float)(a2[24].f32[0]
                                        + vadd_f32(vpadd_f32(*(float32x2_t *)v17.i8, *(float32x2_t *)v17.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL)).f32[0])+ (float)(a3[24].f32[0]+ vadd_f32(vpadd_f32(*(float32x2_t *)v25.i8, *(float32x2_t *)v25.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL)).f32[0]));
}

void btCollisionWorld::ClosestRayResultCallback::~ClosestRayResultCallback(btCollisionWorld::ClosestRayResultCallback *this)
{
  JUMPOUT(0x1DF0D41C0);
}

float btWheelInfo::getSuspensionRestLength(btWheelInfo *this)
{
  return *((float *)this + 56);
}

uint64_t btAlignedAllocDefault(uint64_t a1, int a2)
{
  void *v3;
  uint64_t v4;

  v3 = sAllocFunc(a1 + a2 - 1 + 8);
  v4 = 0;
  if (v3)
  {
    v4 = ((unint64_t)v3 + a2 + 7) & -(uint64_t)a2;
    *(_QWORD *)(v4 - 8) = v3;
  }
  return v4;
}

void btAlignedFreeDefault(void **a1)
{
  if (a1)
    sFreeFunc(*(a1 - 1));
}

void *btAllocDefault(size_t a1)
{
  return malloc_type_malloc(a1, 0x7DDD96CuLL);
}

uint64_t btAlignedAllocInternal(uint64_t a1, int a2)
{
  return sAlignedAllocFunc(a1, a2);
}

void btAlignedFreeInternal(void **a1)
{
  if (a1)
    sAlignedFreeFunc(a1);
}

BOOL above(uint64_t a1, int *a2, float32x4_t *a3, float32_t a4)
{
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  int8x8_t v7;
  float32x4_t v8;
  int8x8_t v9;
  float32x4_t v10;
  float32x4_t v11;
  int8x16_t v12;
  float32x4_t v13;
  int8x16_t v14;
  float v15;
  float32x4_t v16;
  float32x4_t v17;
  int8x16_t v18;

  v4 = *(float32x4_t *)(a1 + 16 * a2[1]);
  v5 = *(float32x4_t *)(a1 + 16 * *a2);
  v6 = vsubq_f32(v4, v5);
  v7 = (int8x8_t)vextq_s8((int8x16_t)v6, (int8x16_t)v6, 8uLL).u64[0];
  v6.i32[3] = 0;
  v8 = vsubq_f32(*(float32x4_t *)(a1 + 16 * a2[2]), v4);
  v9 = (int8x8_t)vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL).u64[0];
  v8.i32[3] = 0;
  *(int8x8_t *)v10.f32 = vext_s8(*(int8x8_t *)v6.f32, v7, 4uLL);
  v10.i64[1] = v6.i64[0];
  *(int8x8_t *)v11.f32 = vext_s8(*(int8x8_t *)v8.f32, v9, 4uLL);
  v11.i64[1] = v8.i64[0];
  v12 = (int8x16_t)vmlaq_f32(vnegq_f32(vmulq_f32(v10, v8)), v6, v11);
  v13.i64[0] = vextq_s8(v12, v12, 4uLL).u64[0];
  v13.i64[1] = v12.u32[0];
  v14 = (int8x16_t)vmulq_f32(v13, v13);
  v15 = sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL), vpadd_f32(*(float32x2_t *)v14.i8, *(float32x2_t *)v14.i8)).f32[0]);
  if (v15 == 0.0)
  {
    v16 = (float32x4_t)xmmword_1DD007970;
  }
  else
  {
    v16 = vmulq_n_f32(v13, 1.0 / v15);
    v16.i32[3] = 0;
  }
  v17 = vsubq_f32(*a3, v5);
  v17.i32[3] = 0;
  v18 = (int8x16_t)vmulq_f32(v16, v17);
  return vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL), vpadd_f32(*(float32x2_t *)v18.i8, *(float32x2_t *)v18.i8)).f32[0] > a4;
}

char *btHullTriangle::neib(btHullTriangle *this, int a2, int a3)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;

  v3 = 0;
  v4 = &btHullTriangle::neib(int,int)::er;
  while (1)
  {
    v5 = v3 + 1;
    v6 = v3 == 2 ? 0 : v3 + 1;
    v7 = *((_DWORD *)this + v3);
    if (v7 == a2 && *((_DWORD *)this + v6) == a3)
      break;
    if (v7 == a3 && *((_DWORD *)this + v6) == a2)
      break;
    ++v3;
    if (v5 == 3)
      return (char *)v4;
  }
  v8 = v3 + 2;
  v9 = v3 - 1;
  if (v8 >= 3)
    v8 = v9;
  return (char *)this + 4 * (int)v8 + 12;
}

char *HullLibrary::b2bfix(HullLibrary *this, btHullTriangle *a2, btHullTriangle *a3)
{
  int v6;
  unsigned int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  char *v13;
  uint64_t v14;
  int v15;
  char *v16;
  char *result;

  v6 = -3;
  do
  {
    v7 = v6 + 4;
    v8 = v6 + 1;
    if (v6 == -1)
      v7 = 0;
    if (v6 == -3)
      v9 = 2;
    else
      v9 = v6 + 2;
    v10 = *((_DWORD *)a2 + v7);
    v11 = *((_DWORD *)a2 + v9);
    v12 = *(_DWORD *)btHullTriangle::neib(a3, v11, v10);
    v13 = btHullTriangle::neib(a2, v10, v11);
    v14 = *((_QWORD *)this + 2);
    *(_DWORD *)btHullTriangle::neib(*(btHullTriangle **)(v14 + 8 * *(int *)v13), v11, v10) = v12;
    v15 = *(_DWORD *)btHullTriangle::neib(a2, v10, v11);
    v16 = btHullTriangle::neib(a3, v11, v10);
    result = btHullTriangle::neib(*(btHullTriangle **)(v14 + 8 * *(int *)v16), v10, v11);
    *(_DWORD *)result = v15;
    v6 = v8;
  }
  while (v8);
  return result;
}

void HullLibrary::removeb2b(HullLibrary *this, btHullTriangle *a2, btHullTriangle *a3)
{
  HullLibrary::b2bfix(this, a2, a3);
  *(_QWORD *)(*((_QWORD *)this + 2) + 8 * *((int *)a2 + 6)) = 0;
  btAlignedFreeInternal((void **)a2);
  *(_QWORD *)(*((_QWORD *)this + 2) + 8 * *((int *)a3 + 6)) = 0;
  btAlignedFreeInternal((void **)a3);
}

uint64_t HullLibrary::allocateTriangle(HullLibrary *this, int a2, int a3, int a4)
{
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;

  v8 = btAlignedAllocInternal(36, 16);
  *(_DWORD *)v8 = a2;
  *(_DWORD *)(v8 + 4) = a3;
  *(_DWORD *)(v8 + 8) = a4;
  *(_QWORD *)(v8 + 12) = -1;
  *(_QWORD *)(v8 + 28) = 0xFFFFFFFFLL;
  v9 = *((_DWORD *)this + 1);
  v10 = *((_DWORD *)this + 2);
  *(_DWORD *)(v8 + 20) = -1;
  *(_DWORD *)(v8 + 24) = v9;
  if (v9 == v10)
  {
    v11 = v9 ? 2 * v9 : 1;
    if (v9 < v11)
    {
      if (v11)
      {
        v12 = btAlignedAllocInternal(8 * v11, 16);
        v9 = *((_DWORD *)this + 1);
      }
      else
      {
        v12 = 0;
      }
      if (v9 >= 1)
      {
        v13 = 0;
        do
        {
          *(_QWORD *)(v12 + v13) = *(_QWORD *)(*((_QWORD *)this + 2) + v13);
          v13 += 8;
        }
        while (8 * v9 != v13);
      }
      v14 = (void **)*((_QWORD *)this + 2);
      if (v14 && *((_BYTE *)this + 24))
      {
        btAlignedFreeInternal(v14);
        v9 = *((_DWORD *)this + 1);
      }
      *((_BYTE *)this + 24) = 1;
      *((_QWORD *)this + 2) = v12;
      *((_DWORD *)this + 2) = v11;
    }
  }
  *(_QWORD *)(*((_QWORD *)this + 2) + 8 * v9) = v8;
  *((_DWORD *)this + 1) = v9 + 1;
  return v8;
}

void HullLibrary::extrude(HullLibrary *this, btHullTriangle *a2, int a3)
{
  int v6;
  int v7;
  int v8;
  int v9;
  btHullTriangle *Triangle;
  int v11;
  int *v12;
  btHullTriangle *v13;
  uint64_t v14;
  btHullTriangle *v15;
  btHullTriangle *v18;
  btHullTriangle *v21;
  int *v22;

  v6 = *(_DWORD *)a2;
  v7 = *((_DWORD *)a2 + 1);
  v8 = *((_DWORD *)a2 + 2);
  v9 = *((_DWORD *)this + 1);
  Triangle = (btHullTriangle *)HullLibrary::allocateTriangle(this, a3, v7, v8);
  v11 = v9 + 2;
  *((_DWORD *)Triangle + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)Triangle + 4) = v9 + 1;
  *((_DWORD *)Triangle + 5) = v9 + 2;
  *(_DWORD *)btHullTriangle::neib(*(btHullTriangle **)(*((_QWORD *)this + 2) + 8 * *((int *)a2 + 3)), v7, v8) = v9;
  v12 = (int *)HullLibrary::allocateTriangle(this, a3, v8, v6);
  v12[3] = *((_DWORD *)a2 + 4);
  v12[4] = v9 + 2;
  v22 = v12;
  v12[5] = v9;
  *(_DWORD *)btHullTriangle::neib(*(btHullTriangle **)(*((_QWORD *)this + 2) + 8 * *((int *)a2 + 4)), v8, v6) = v9 + 1;
  v13 = (btHullTriangle *)HullLibrary::allocateTriangle(this, a3, v6, v7);
  *((_DWORD *)v13 + 3) = *((_DWORD *)a2 + 5);
  *((_DWORD *)v13 + 4) = v9;
  *((_DWORD *)v13 + 5) = v9 + 1;
  v14 = *((_QWORD *)this + 2);
  *(_DWORD *)btHullTriangle::neib(*(btHullTriangle **)(v14 + 8 * *((int *)a2 + 5)), v6, v7) = v11;
  v15 = *(btHullTriangle **)(v14 + 8 * *((int *)Triangle + 3));
  if (*(_DWORD *)v15 == a3 || *((_DWORD *)v15 + 1) == a3 || *((_DWORD *)v15 + 2) == a3)
  {
    HullLibrary::removeb2b(this, Triangle, v15);
    v14 = *((_QWORD *)this + 2);
  }
  v18 = *(btHullTriangle **)(v14 + 8 * v22[3]);
  if (*(_DWORD *)v18 == a3 || *((_DWORD *)v18 + 1) == a3 || *((_DWORD *)v18 + 2) == a3)
  {
    HullLibrary::removeb2b(this, (btHullTriangle *)v22, v18);
    v14 = *((_QWORD *)this + 2);
  }
  v21 = *(btHullTriangle **)(v14 + 8 * *((int *)v13 + 3));
  if (*(_DWORD *)v21 == a3 || *((_DWORD *)v21 + 1) == a3 || *((_DWORD *)v21 + 2) == a3)
  {
    HullLibrary::removeb2b(this, v13, v21);
    v14 = *((_QWORD *)this + 2);
  }
  *(_QWORD *)(v14 + 8 * *((int *)a2 + 6)) = 0;
  btAlignedFreeInternal((void **)a2);
}

uint64_t HullLibrary::extrudable(HullLibrary *this, float a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v5;
  uint64_t v6;

  v2 = *((unsigned int *)this + 1);
  if ((int)v2 < 1)
    return 0;
  result = 0;
  v5 = (uint64_t *)*((_QWORD *)this + 2);
  do
  {
    v6 = *v5;
    if (!result || v6 && *(float *)(result + 32) < *(float *)(v6 + 32))
      result = *v5;
    ++v5;
    --v2;
  }
  while (v2);
  if (result && *(float *)(result + 32) <= a2)
    return 0;
  return result;
}

unint64_t HullLibrary::FindSimplex(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  signed int v7;
  int8x16_t v8;
  uint64_t v9;
  float32x4_t v10;
  uint64_t v11;
  float32x4_t v12;
  int32x2_t v13;
  unsigned int v14;
  uint64_t v15;
  int8x16_t v17;
  float32x4_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  float32x4_t v22;
  int8x16_t v23;
  float32x2_t v24;
  float32x4_t v25;
  int v26;
  int v27;
  int8x16_t v28;
  float32x4_t v29;
  int8x8_t v30;
  float32x4_t v31;
  float32x4_t v32;
  int8x16_t v33;
  float32x4_t v34;
  int8x16_t v35;
  int v36;
  int8x16_t v37;
  int8x16_t v38;
  __int128 v39;
  int8x16_t v40;
  float32x4_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v39 = xmmword_1DD02CFE0;
  v7 = maxdirsterid<btVector3>(a2, a3, (int8x8_t *)&v39, a4);
  v8.i64[0] = 0x8000000080000000;
  v8.i64[1] = 0x8000000080000000;
  v38 = veorq_s8((int8x16_t)v39, v8);
  v9 = maxdirsterid<btVector3>(a2, a3, (int8x8_t *)&v38, a4);
  v10 = vsubq_f32(*(float32x4_t *)(a2 + 16 * v7), *(float32x4_t *)(a2 + 16 * (int)v9));
  v10.i32[3] = 0;
  v39 = (__int128)v10;
  if (v7 == (_DWORD)v9
    || (v11 = v9,
        v12.i64[0] = vextq_s8((int8x16_t)v10, (int8x16_t)v10, 4uLL).u64[0],
        v13 = vceqz_f32(*(float32x2_t *)v12.f32),
        (v13.i8[4] & 1) != 0)
    && (v13.i8[0] & 1) != 0
    && v10.f32[0] == 0.0)
  {
    v14 = -1;
LABEL_6:
    v15 = 0xFFFFFFFFLL;
    return v14 | (unint64_t)(v15 << 32);
  }
  v12.i64[1] = v10.i64[0];
  v17 = (int8x16_t)vmlaq_f32(vmulq_f32(v10, (float32x4_t)xmmword_1DD02D000), (float32x4_t)xmmword_1DD02CFF0, v12);
  v18.i64[0] = vextq_s8(v17, v17, 4uLL).u64[0];
  v18.i64[1] = v17.u32[0];
  v19 = (int8x16_t)vmlaq_f32(vmulq_f32(v10, (float32x4_t)xmmword_1DD02D020), (float32x4_t)xmmword_1DD02D010, v12);
  v20.i64[0] = vextq_s8(v19, v19, 4uLL).u64[0];
  v20.i64[1] = v19.u32[0];
  v21 = (int8x16_t)vmulq_f32(v18, v18);
  *(float32x2_t *)v17.i8 = vpadd_f32(*(float32x2_t *)v21.i8, *(float32x2_t *)v21.i8);
  v22 = (float32x4_t)vextq_s8(v21, v21, 8uLL);
  *(float32x2_t *)v22.f32 = vadd_f32(*(float32x2_t *)v17.i8, *(float32x2_t *)v22.f32);
  v22.f32[0] = sqrtf(v22.f32[0]);
  v23 = (int8x16_t)vmulq_f32((float32x4_t)v20, (float32x4_t)v20);
  v24 = vpadd_f32(*(float32x2_t *)v23.i8, *(float32x2_t *)v23.i8);
  v25 = (float32x4_t)vextq_s8(v23, v23, 8uLL);
  *(float32x2_t *)v25.f32 = vadd_f32(v24, *(float32x2_t *)v25.f32);
  v25.f32[0] = sqrtf(v25.f32[0]);
  v40 = (int8x16_t)vmulq_n_f32((float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v22, v25), 0), (int8x16_t)v18, v20), 1.0 / fmaxf(v22.f32[0], v25.f32[0]));
  v41 = (float32x4_t)v20;
  v26 = maxdirsterid<btVector3>(a2, a3, (int8x8_t *)&v40, a4);
  if (v26 == v7 || (v27 = v26, v26 == (_DWORD)v11))
  {
    v28.i64[0] = 0x8000000080000000;
    v28.i64[1] = 0x8000000080000000;
    v38 = veorq_s8(v40, v28);
    v27 = maxdirsterid<btVector3>(a2, a3, (int8x8_t *)&v38, a4);
  }
  v14 = -1;
  if (v27 == v7)
    goto LABEL_6;
  v15 = 0xFFFFFFFFLL;
  if (v27 == (_DWORD)v11)
    return v14 | (unint64_t)(v15 << 32);
  v29 = vsubq_f32(*(float32x4_t *)(a2 + 16 * v27), *(float32x4_t *)(a2 + 16 * v7));
  v30 = (int8x8_t)vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL).u64[0];
  v29.i32[3] = 0;
  *(int8x8_t *)v31.f32 = vext_s8(*(int8x8_t *)v29.f32, v30, 4uLL);
  v31.i64[1] = v29.i64[0];
  *(int8x8_t *)v32.f32 = vext_s8(*(int8x8_t *)&v39, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v39, (int8x16_t)v39, 8uLL), 4uLL);
  v32.i64[1] = v39;
  v33 = (int8x16_t)vmlaq_f32(vnegq_f32(vmulq_f32(v31, (float32x4_t)v39)), v29, v32);
  v34.i64[0] = vextq_s8(v33, v33, 4uLL).u64[0];
  v34.i64[1] = v33.u32[0];
  v35 = (int8x16_t)vmulq_f32(v34, v34);
  v40 = (int8x16_t)v29;
  v41 = vmulq_n_f32(v34, 1.0/ sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL), vpadd_f32(*(float32x2_t *)v35.i8, *(float32x2_t *)v35.i8)).f32[0]));
  v36 = maxdirsterid<btVector3>(a2, a3, (int8x8_t *)&v41, a4);
  if (v36 == v27 || v36 == v7 || v36 == (_DWORD)v11)
  {
    v37.i64[0] = 0x8000000080000000;
    v37.i64[1] = 0x8000000080000000;
    v38 = veorq_s8((int8x16_t)v41, v37);
    v36 = maxdirsterid<btVector3>(a2, a3, (int8x8_t *)&v38, a4);
  }
  v14 = -1;
  if (v36 == v27 || v36 == v7)
    goto LABEL_6;
  v15 = 0xFFFFFFFFLL;
  if (v36 != (_DWORD)v11)
  {
    v14 = v7;
    v15 = v11;
  }
  return v14 | (unint64_t)(v15 << 32);
}

uint64_t maxdirsterid<btVector3>(uint64_t a1, int a2, int8x8_t *a3, uint64_t a4)
{
  uint64_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  uint64_t v11;
  uint64_t v12;
  float32x4_t v13;
  int v14;
  int8x16_t v15;
  int8x16_t v16;
  uint64_t v17;
  int v18;
  float32x4_t v19;
  int8x16_t v20;
  float32x4_t v21;
  int8x16_t v22;
  float32x4_t v23;
  int8x16_t v24;
  float32x2_t v25;
  float32x4_t v26;
  int8x16_t v27;
  float32x2_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int8x16_t v31;
  int v32;
  int v33;
  float v34;
  __float2 v35;
  uint64_t v36;
  float32x4_t v37;
  float32x4_t v38;
  int8x16_t v39;
  int8x16_t v40;
  float i;
  __float2 v42;
  uint64_t v43;
  float32x4_t v44;
  float32x4_t v45;
  int v46;
  int8x16_t v47;
  int8x16_t v48;
  BOOL v49;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;

  v7 = *(_QWORD *)(a4 + 16);
  v8 = (float32x4_t)xmmword_1DD007920;
  v9 = (float32x4_t)xmmword_1DD02A890;
  v10 = (float32x4_t)xmmword_1DD007880;
  v11 = a2;
  v51 = (float32x4_t)vdupq_n_s32(0x3CCCCCCDu);
LABEL_2:
  if (a2 < 1)
  {
    v14 = -1;
  }
  else
  {
    v12 = 0;
    v13 = *(float32x4_t *)a3->i8;
    v14 = -1;
    do
    {
      if (*(_DWORD *)(v7 + 4 * v12))
      {
        if (v14 == -1
          || (v15 = (int8x16_t)vmulq_f32(*(float32x4_t *)(a1 + 16 * v12), v13),
              v16 = (int8x16_t)vmulq_f32(*(float32x4_t *)(a1 + 16 * v14), v13),
              (vcgt_f32(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL), vpadd_f32(*(float32x2_t *)v15.i8, *(float32x2_t *)v15.i8)), vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL), vpadd_f32(*(float32x2_t *)v16.i8, *(float32x2_t *)v16.i8))).u8[0] & 1) != 0))
        {
          v14 = v12;
        }
      }
      ++v12;
    }
    while (v11 != v12);
  }
  v17 = v14;
  if (*(_DWORD *)(v7 + 4 * v14) != 3)
  {
    v18 = 0;
    *(int8x8_t *)v19.f32 = vext_s8(*a3, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a3->i8, *(int8x16_t *)a3->i8, 8uLL), 4uLL);
    *(int8x8_t *)&v19.u32[2] = *a3;
    v20 = (int8x16_t)vmlaq_f32(vmulq_f32(v19, v9), v8, *(float32x4_t *)a3->i8);
    v21.i64[0] = vextq_s8(v20, v20, 4uLL).u64[0];
    v21.i64[1] = v20.u32[0];
    v22 = (int8x16_t)vmlaq_f32(vnegq_f32(vmulq_f32(v19, v8)), v10, *(float32x4_t *)a3->i8);
    v23.i64[0] = vextq_s8(v22, v22, 4uLL).u64[0];
    v23.i64[1] = v22.u32[0];
    v24 = (int8x16_t)vmulq_f32(v21, v21);
    v25 = vpadd_f32(*(float32x2_t *)v24.i8, *(float32x2_t *)v24.i8);
    v26 = (float32x4_t)vextq_s8(v24, v24, 8uLL);
    *(float32x2_t *)v26.f32 = vadd_f32(*(float32x2_t *)v26.f32, v25);
    v26.f32[0] = sqrtf(v26.f32[0]);
    v27 = (int8x16_t)vmulq_f32(v23, v23);
    v28 = vpadd_f32(*(float32x2_t *)v27.i8, *(float32x2_t *)v27.i8);
    v29 = (float32x4_t)vextq_s8(v27, v27, 8uLL);
    *(float32x2_t *)v29.f32 = vadd_f32(*(float32x2_t *)v29.f32, v28);
    v29.f32[0] = sqrtf(v29.f32[0]);
    v30 = vmulq_n_f32((float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v26, v29), 0), (int8x16_t)v21, (int8x16_t)v23), 1.0 / fmaxf(v26.f32[0], v29.f32[0]));
    v26.i64[0] = vextq_s8((int8x16_t)v30, (int8x16_t)v30, 4uLL).u64[0];
    v26.i64[1] = v30.i64[0];
    v53 = v30;
    v54 = *(float32x4_t *)a3->i8;
    v31 = (int8x16_t)vmlaq_f32(vnegq_f32(vmulq_f32(v26, *(float32x4_t *)a3->i8)), v19, v30);
    v19.i64[0] = vextq_s8(v31, v31, 4uLL).u64[0];
    v19.i64[1] = v31.u32[0];
    v52 = v19;
    v32 = -1;
    while (1)
    {
      v33 = v32;
      v34 = (float)v18;
      v35 = __sincosf_stret((float)v18 * 0.017453);
      if (a2 < 1)
      {
        v32 = -1;
      }
      else
      {
        v36 = 0;
        v37 = vmulq_f32(vmlaq_n_f32(vmulq_n_f32(v52, v35.__cosval), v53, v35.__sinval), v51);
        v37.i32[3] = 0;
        v38 = vaddq_f32(v54, v37);
        v32 = -1;
        do
        {
          if (*(_DWORD *)(v7 + 4 * v36))
          {
            if (v32 == -1
              || (v39 = (int8x16_t)vmulq_f32(*(float32x4_t *)(a1 + 16 * v36), v38),
                  v40 = (int8x16_t)vmulq_f32(*(float32x4_t *)(a1 + 16 * v32), v38),
                  (vcgt_f32(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v39, v39, 8uLL), vpadd_f32(*(float32x2_t *)v39.i8, *(float32x2_t *)v39.i8)), vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v40, v40, 8uLL), vpadd_f32(*(float32x2_t *)v40.i8, *(float32x2_t *)v40.i8))).u8[0] & 1) != 0))
            {
              v32 = v36;
            }
          }
          ++v36;
        }
        while (v11 != v36);
      }
      if (v33 == (_DWORD)v17 && v32 == (_DWORD)v17)
        break;
      if (v33 != -1 && v33 != v32)
      {
        for (i = v34 + -40.0; i <= v34; v33 = v46)
        {
          v42 = __sincosf_stret(i * 0.017453);
          if (a2 < 1)
          {
            if ((v33 & v17) == 0xFFFFFFFF)
              goto LABEL_43;
            v46 = -1;
          }
          else
          {
            v43 = 0;
            v44 = vmulq_f32(vmlaq_n_f32(vmulq_n_f32(v52, v42.__cosval), v53, v42.__sinval), v51);
            v44.i32[3] = 0;
            v45 = vaddq_f32(v54, v44);
            v46 = -1;
            do
            {
              if (*(_DWORD *)(v7 + 4 * v43))
              {
                if (v46 == -1
                  || (v47 = (int8x16_t)vmulq_f32(*(float32x4_t *)(a1 + 16 * v43), v45),
                      v48 = (int8x16_t)vmulq_f32(*(float32x4_t *)(a1 + 16 * v46), v45),
                      (vcgt_f32(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v47, v47, 8uLL), vpadd_f32(*(float32x2_t *)v47.i8, *(float32x2_t *)v47.i8)), vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v48, v48, 8uLL), vpadd_f32(*(float32x2_t *)v48.i8, *(float32x2_t *)v48.i8))).u8[0] & 1) != 0))
                {
                  v46 = v43;
                }
              }
              ++v43;
            }
            while (v11 != v43);
            if (v33 == (_DWORD)v17 && v46 == (_DWORD)v17)
              goto LABEL_43;
          }
          i = i + 5.0;
        }
      }
      v49 = v18 >= 0x13C;
      v18 += 45;
      if (v49)
      {
        *(_DWORD *)(v7 + 4 * v17) = 0;
        v9 = (float32x4_t)xmmword_1DD02A890;
        v8 = (float32x4_t)xmmword_1DD007920;
        v10 = (float32x4_t)xmmword_1DD007880;
        goto LABEL_2;
      }
    }
LABEL_43:
    *(_DWORD *)(v7 + 4 * v17) = 3;
  }
  return v17;
}

uint64_t HullLibrary::calchullgen(HullLibrary *this, float32x4_t *a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  void **v11;
  float32x4_t v12;
  void **v13;
  uint64_t v14;
  float32x4_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  void **v19;
  _DWORD *v20;
  void **v21;
  int v22;
  uint64_t v23;
  void **v24;
  uint64_t i;
  float32x4_t v26;
  int64_t Simplex;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  float32x4_t v37;
  uint64_t Triangle;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int *v43;
  float32x4_t v44;
  float32x4_t v45;
  int8x8_t v46;
  float32x4_t v47;
  int8x8_t v48;
  float32x4_t v49;
  float32x4_t v50;
  int8x16_t v51;
  float32x4_t v52;
  int8x16_t v53;
  float v54;
  float32x4_t v55;
  int v56;
  float32x4_t v57;
  int8x16_t v58;
  int v59;
  float32x4_t v60;
  int8x16_t v61;
  float v62;
  float v63;
  float v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  btHullTriangle *v69;
  int v71;
  int v72;
  uint64_t v73;
  _DWORD *v74;
  float32x4_t v77;
  float32x4_t v78;
  int8x8_t v79;
  float32x4_t v80;
  int8x8_t v81;
  float32x4_t v82;
  float32x4_t v83;
  int8x16_t v84;
  int8x16_t v85;
  uint64_t v86;
  int *v87;
  float32x4_t v88;
  float32x4_t v89;
  int8x8_t v90;
  float32x4_t v91;
  int8x8_t v92;
  float32x4_t v93;
  float32x4_t v94;
  int8x16_t v95;
  float32x4_t v96;
  int8x16_t v97;
  float v98;
  float32x4_t v99;
  int v100;
  float32x4_t v101;
  int8x16_t v102;
  BOOL v104;
  int v106;
  int v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  _BYTE v118[4];
  int v119;
  int v120;
  void *v121;
  char v122;

  if ((int)a3 < 4)
    return 0;
  v106 = a4 - 4;
  v112 = *a2;
  v8 = 4 * a3;
  v9 = a3;
  v10 = (void **)btAlignedAllocInternal(v8, 16);
  v119 = 0;
  v11 = (void **)btAlignedAllocInternal(v8, 16);
  v12 = v112;
  v13 = v11;
  v14 = 0;
  v122 = 1;
  v121 = v11;
  v120 = a3;
  v15 = v112;
  v108 = a3;
  v16 = a3;
  do
  {
    v17 = v119;
    if (v119 == v120)
    {
      v18 = v119 ? 2 * v119 : 1;
      if (v119 < v18)
      {
        v109 = v15;
        v113 = v12;
        if (v18)
        {
          v11 = (void **)btAlignedAllocInternal(4 * v18, 16);
          v19 = v11;
        }
        else
        {
          v19 = 0;
        }
        if (v119 < 1)
        {
          if (!v13)
          {
LABEL_18:
            v122 = 1;
            v121 = v19;
            v120 = v18;
            v13 = v19;
            LODWORD(v17) = v119;
            v15 = v109;
            v12 = v113;
            goto LABEL_19;
          }
        }
        else
        {
          v20 = v19;
          v21 = v13;
          do
          {
            v22 = *(_DWORD *)v21;
            v21 = (void **)((char *)v21 + 4);
            *v20++ = v22;
            --v17;
          }
          while (v17);
        }
        btAlignedFreeInternal(v13);
        goto LABEL_18;
      }
    }
LABEL_19:
    *((_DWORD *)v13 + (int)v17) = 1;
    ++v119;
    if (v14 != v16 || (!v14 ? (v23 = 1) : (v23 = (2 * v14)), (int)v16 >= (int)v23))
    {
      v23 = v16;
      goto LABEL_34;
    }
    v110 = v15;
    v114 = v12;
    if ((_DWORD)v23)
    {
      v11 = (void **)btAlignedAllocInternal(4 * v23, 16);
      v24 = v11;
      if (v14)
        goto LABEL_26;
    }
    else
    {
      v24 = 0;
      if (v14)
      {
LABEL_26:
        for (i = 0; i != v14; ++i)
          *((_DWORD *)v24 + i) = *((_DWORD *)v10 + i);
        goto LABEL_32;
      }
    }
    if (!v10)
    {
      v23 = 1;
      goto LABEL_33;
    }
LABEL_32:
    btAlignedFreeInternal(v10);
LABEL_33:
    v10 = v24;
    v15 = v110;
    v12 = v114;
LABEL_34:
    *((_DWORD *)v10 + v14) = 0;
    v26 = a2[v14];
    v12 = vminq_f32(v12, v26);
    v15 = vmaxq_f32(v15, v26);
    ++v14;
    v16 = v23;
  }
  while (v14 != v9);
  v111 = v15;
  v115 = v12;
  Simplex = HullLibrary::FindSimplex((uint64_t)v11, (uint64_t)a2, v108, (uint64_t)v118);
  v29 = Simplex;
  if ((_DWORD)Simplex == -1)
  {
    v4 = 0;
  }
  else
  {
    v30 = v28;
    v31 = HIDWORD(v28);
    v32 = v28 >> 32;
    __asm { FMOV            V1.4S, #0.25 }
    v37 = vmulq_f32(vaddq_f32(vaddq_f32(a2[Simplex >> 32], a2[(int)Simplex]), vaddq_f32(a2[(int)v28], a2[v28 >> 32])), _Q1);
    v37.i32[3] = 0;
    v117 = v37;
    Triangle = HullLibrary::allocateTriangle(this, v28, SHIDWORD(v28), SHIDWORD(Simplex));
    *(_QWORD *)(Triangle + 12) = 0x300000002;
    *(_DWORD *)(Triangle + 20) = 1;
    v39 = HullLibrary::allocateTriangle(this, v31, v30, v29);
    *(_QWORD *)(v39 + 12) = 0x200000003;
    *(_DWORD *)(v39 + 20) = 0;
    v40 = HullLibrary::allocateTriangle(this, v29, SHIDWORD(v29), v31);
    *(_QWORD *)(v40 + 12) = 0x100000000;
    *(_DWORD *)(v40 + 20) = 3;
    v41 = HullLibrary::allocateTriangle(this, SHIDWORD(v29), v29, v30);
    *(_QWORD *)(v41 + 12) = 1;
    *(_DWORD *)(v41 + 20) = 2;
    *((_DWORD *)v10 + v32) = 1;
    *((_DWORD *)v10 + v30) = 1;
    *((_DWORD *)v10 + (v29 >> 32)) = 1;
    *((_DWORD *)v10 + (int)v29) = 1;
    if (*((int *)this + 1) >= 1)
    {
      v42 = 0;
      do
      {
        v43 = *(int **)(*((_QWORD *)this + 2) + 8 * v42);
        v44 = a2[v43[1]];
        v45 = vsubq_f32(v44, a2[*v43]);
        v46 = (int8x8_t)vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL).u64[0];
        v45.i32[3] = 0;
        v47 = vsubq_f32(a2[v43[2]], v44);
        v48 = (int8x8_t)vextq_s8((int8x16_t)v47, (int8x16_t)v47, 8uLL).u64[0];
        v47.i32[3] = 0;
        *(int8x8_t *)v49.f32 = vext_s8(*(int8x8_t *)v45.f32, v46, 4uLL);
        v49.i64[1] = v45.i64[0];
        *(int8x8_t *)v50.f32 = vext_s8(*(int8x8_t *)v47.f32, v48, 4uLL);
        v50.i64[1] = v47.i64[0];
        v51 = (int8x16_t)vmlaq_f32(vnegq_f32(vmulq_f32(v49, v47)), v45, v50);
        v52.i64[0] = vextq_s8(v51, v51, 4uLL).u64[0];
        v52.i64[1] = v51.u32[0];
        v53 = (int8x16_t)vmulq_f32(v52, v52);
        v54 = sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v53, v53, 8uLL), vpadd_f32(*(float32x2_t *)v53.i8, *(float32x2_t *)v53.i8)).f32[0]);
        v55 = (float32x4_t)xmmword_1DD007970;
        if (v54 != 0.0)
        {
          v55 = vmulq_n_f32(v52, 1.0 / v54);
          v55.i32[3] = 0;
        }
        v116 = v55;
        v56 = maxdirsterid<btVector3>((uint64_t)a2, v108, (int8x8_t *)&v116, (uint64_t)v118);
        v43[7] = v56;
        v57 = vsubq_f32(a2[v56], a2[*v43]);
        v57.i32[3] = 0;
        v58 = (int8x16_t)vmulq_f32(v116, v57);
        v43[8] = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v58, v58, 8uLL), vpadd_f32(*(float32x2_t *)v58.i8, *(float32x2_t *)v58.i8)).u32[0];
        ++v42;
      }
      while (v42 < *((int *)this + 1));
    }
    if (a4)
      v59 = v106;
    else
      v59 = 999999996;
    if (v59 >= 1)
    {
      v60 = vsubq_f32(v111, v115);
      v60.i32[3] = 0;
      v61 = (int8x16_t)vmulq_f32(v60, v60);
      *(float *)v61.i32 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v61.i8, *(float32x2_t *)v61.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v61, v61, 8uLL)).f32[0]);
      v62 = *(float *)v61.i32 * 0.001;
      v63 = *(float *)v61.i32 * 0.00001;
      v64 = (float)(*(float *)v61.i32 * 0.0001) * (float)(*(float *)v61.i32 * 0.001);
      while (1)
      {
        v65 = HullLibrary::extrudable(this, v62);
        if (!v65)
          goto LABEL_82;
        v66 = *(int *)(v65 + 28);
        *((_DWORD *)v10 + v66) = 1;
        v67 = *((int *)this + 1);
        if (!(_DWORD)v67)
          goto LABEL_80;
        v68 = v67 - 1;
        do
        {
          v69 = *(btHullTriangle **)(*((_QWORD *)this + 2) + 8 * v68);
          if (v69)
          {
            v116.i64[0] = *(_QWORD *)v69;
            v116.i32[2] = *((_DWORD *)v69 + 2);
            if (above((uint64_t)a2, (int *)&v116, &a2[v66], v63))
              HullLibrary::extrude(this, v69, v66);
          }
        }
        while ((_DWORD)v68--);
        v71 = *((_DWORD *)this + 1);
        if (!v71)
          goto LABEL_80;
        v72 = *((_DWORD *)this + 1);
        while (1)
        {
          --v72;
          v73 = *((_QWORD *)this + 2);
          v74 = *(_DWORD **)(v73 + 8 * v72);
          if (v74)
            break;
LABEL_69:
          if (!v72)
            goto LABEL_70;
        }
        _ZF = *v74 == (_DWORD)v66 || v74[1] == (_DWORD)v66;
        if (_ZF || v74[2] == (_DWORD)v66)
          break;
LABEL_70:
        if (v71)
        {
          v86 = v71 - 1;
          do
          {
            v87 = *(int **)(*((_QWORD *)this + 2) + 8 * v86);
            if (v87)
            {
              if ((v87[7] & 0x80000000) == 0)
                break;
              v88 = a2[v87[1]];
              v89 = vsubq_f32(v88, a2[*v87]);
              v90 = (int8x8_t)vextq_s8((int8x16_t)v89, (int8x16_t)v89, 8uLL).u64[0];
              v89.i32[3] = 0;
              v91 = vsubq_f32(a2[v87[2]], v88);
              v92 = (int8x8_t)vextq_s8((int8x16_t)v91, (int8x16_t)v91, 8uLL).u64[0];
              v91.i32[3] = 0;
              *(int8x8_t *)v93.f32 = vext_s8(*(int8x8_t *)v89.f32, v90, 4uLL);
              v93.i64[1] = v89.i64[0];
              *(int8x8_t *)v94.f32 = vext_s8(*(int8x8_t *)v91.f32, v92, 4uLL);
              v94.i64[1] = v91.i64[0];
              v95 = (int8x16_t)vmlaq_f32(vnegq_f32(vmulq_f32(v93, v91)), v89, v94);
              v96.i64[0] = vextq_s8(v95, v95, 4uLL).u64[0];
              v96.i64[1] = v95.u32[0];
              v97 = (int8x16_t)vmulq_f32(v96, v96);
              v98 = sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v97, v97, 8uLL), vpadd_f32(*(float32x2_t *)v97.i8, *(float32x2_t *)v97.i8)).f32[0]);
              v99 = (float32x4_t)xmmword_1DD007970;
              if (v98 != 0.0)
              {
                v99 = vmulq_n_f32(v96, 1.0 / v98);
                v99.i32[3] = 0;
              }
              v116 = v99;
              v100 = maxdirsterid<btVector3>((uint64_t)a2, v108, (int8x8_t *)&v116, (uint64_t)v118);
              v87[7] = v100;
              if (*((_DWORD *)v10 + v100))
              {
                v87[7] = -1;
              }
              else
              {
                v101 = vsubq_f32(a2[v100], a2[*v87]);
                v101.i32[3] = 0;
                v102 = (int8x16_t)vmulq_f32(v116, v101);
                v87[8] = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v102, v102, 8uLL), vpadd_f32(*(float32x2_t *)v102.i8, *(float32x2_t *)v102.i8)).u32[0];
              }
            }
          }
          while ((_DWORD)v86--);
        }
LABEL_80:
        _VF = __OFSUB__(v59--, 1);
        if ((v59 < 0) ^ _VF | (v59 == 0))
          goto LABEL_82;
      }
      v116.i64[0] = *(_QWORD *)v74;
      v116.i32[2] = v74[2];
      if (above((uint64_t)a2, (int *)&v116, &v117, v63))
        goto LABEL_68;
      v77 = a2[v116.i32[1]];
      v78 = vsubq_f32(v77, a2[v116.i32[0]]);
      v79 = (int8x8_t)vextq_s8((int8x16_t)v78, (int8x16_t)v78, 8uLL).u64[0];
      v78.i32[3] = 0;
      v80 = vsubq_f32(a2[v116.i32[2]], v77);
      v81 = (int8x8_t)vextq_s8((int8x16_t)v80, (int8x16_t)v80, 8uLL).u64[0];
      v80.i32[3] = 0;
      *(int8x8_t *)v82.f32 = vext_s8(*(int8x8_t *)v78.f32, v79, 4uLL);
      v82.i64[1] = v78.i64[0];
      *(int8x8_t *)v83.f32 = vext_s8(*(int8x8_t *)v80.f32, v81, 4uLL);
      v83.i64[1] = v80.i64[0];
      v84 = (int8x16_t)vmlaq_f32(vnegq_f32(vmulq_f32(v82, v80)), v78, v83);
      v78.i64[0] = vextq_s8(v84, v84, 4uLL).u64[0];
      v78.i64[1] = v84.u32[0];
      v85 = (int8x16_t)vmulq_f32(v78, v78);
      if (sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v85, v85, 8uLL), vpadd_f32(*(float32x2_t *)v85.i8, *(float32x2_t *)v85.i8)).f32[0]) < v64)
      {
LABEL_68:
        HullLibrary::extrude(this, *(btHullTriangle **)(v73 + 8 * (int)v74[3]), v66);
        v71 = *((_DWORD *)this + 1);
        v72 = v71;
      }
      goto LABEL_69;
    }
LABEL_82:
    v4 = 1;
  }
  if (v121)
    v104 = v122 == 0;
  else
    v104 = 1;
  if (!v104)
    btAlignedFreeInternal((void **)v121);
  if (v10)
    btAlignedFreeInternal(v10);
  return v4;
}

uint64_t HullLibrary::calchull(uint64_t a1, float32x4_t *a2, uint64_t a3, uint64_t a4, int *a5, int a6)
{
  uint64_t result;
  int v10;
  uint64_t v11;
  void **v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  void **v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  void **v29;
  _DWORD *v30;
  int *v31;
  int v32;
  _DWORD *v33;
  uint64_t v34;
  void **v35;
  int v36;
  uint64_t v37;
  void **v38;
  int *v39;

  result = HullLibrary::calchullgen((HullLibrary *)a1, a2, a3, a6);
  if (!(_DWORD)result)
    return result;
  v39 = a5;
  v10 = *(_DWORD *)(a1 + 4);
  if (v10 < 1)
  {
    v14 = 0;
    v12 = 0;
    goto LABEL_26;
  }
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  do
  {
    if (!*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v11))
      goto LABEL_23;
    v15 = 0;
    v16 = v14;
    do
    {
      v17 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v11);
      if (v13 == (_DWORD)v16)
      {
        v18 = v16 ? 2 * v13 : 1;
        if (v13 < v18)
        {
          if (v18)
            v19 = btAlignedAllocInternal(4 * v18, 16);
          else
            v19 = 0;
          if (v16 < 1)
          {
            if (!v12)
            {
LABEL_20:
              v13 = v18;
              v12 = (void **)v19;
              goto LABEL_21;
            }
          }
          else
          {
            v20 = v13;
            v21 = (_DWORD *)v19;
            v22 = v12;
            do
            {
              v23 = *(_DWORD *)v22;
              v22 = (void **)((char *)v22 + 4);
              *v21++ = v23;
              --v20;
            }
            while (v20);
          }
          btAlignedFreeInternal(v12);
          goto LABEL_20;
        }
      }
LABEL_21:
      *((_DWORD *)v12 + v16++) = *(_DWORD *)(v17 + 4 * v15++);
    }
    while (v15 != 3);
    v24 = *(_QWORD *)(a1 + 16);
    v25 = *(_QWORD *)(v24 + 8 * v11);
    *(_QWORD *)(v24 + 8 * *(int *)(v25 + 24)) = 0;
    btAlignedFreeInternal((void **)v25);
    v10 = *(_DWORD *)(a1 + 4);
    v14 = v16;
LABEL_23:
    ++v11;
  }
  while (v11 < v10);
LABEL_26:
  *v39 = v14 / 3;
  v26 = *(_DWORD *)(a4 + 4);
  if (v26 < v14)
  {
    if (*(_DWORD *)(a4 + 8) < v14)
    {
      if (v14)
        v27 = btAlignedAllocInternal(4 * v14, 16);
      else
        v27 = 0;
      LODWORD(v28) = *(_DWORD *)(a4 + 4);
      v29 = *(void ***)(a4 + 16);
      if ((int)v28 >= 1)
      {
        v28 = v28;
        v30 = (_DWORD *)v27;
        v31 = *(int **)(a4 + 16);
        do
        {
          v32 = *v31++;
          *v30++ = v32;
          --v28;
        }
        while (v28);
        goto LABEL_36;
      }
      if (v29)
      {
LABEL_36:
        if (*(_BYTE *)(a4 + 24))
          btAlignedFreeInternal(v29);
      }
      *(_BYTE *)(a4 + 24) = 1;
      *(_QWORD *)(a4 + 16) = v27;
      *(_DWORD *)(a4 + 8) = v14;
    }
    bzero((void *)(*(_QWORD *)(a4 + 16) + 4 * v26), 4 * (v14 + ~v26) + 4);
  }
  *(_DWORD *)(a4 + 4) = v14;
  if (v14 >= 1)
  {
    v33 = *(_DWORD **)(a4 + 16);
    v34 = v14;
    v35 = v12;
    do
    {
      v36 = *(_DWORD *)v35;
      v35 = (void **)((char *)v35 + 4);
      *v33++ = v36;
      --v34;
    }
    while (v34);
  }
  v37 = *(int *)(a1 + 4);
  if ((v37 & 0x80000000) != 0)
  {
    if ((*(_DWORD *)(a1 + 8) & 0x80000000) != 0)
    {
      v38 = *(void ***)(a1 + 16);
      if (v38 && *(_BYTE *)(a1 + 24))
        btAlignedFreeInternal(v38);
      *(_BYTE *)(a1 + 24) = 1;
      *(_QWORD *)(a1 + 16) = 0;
      *(_DWORD *)(a1 + 8) = 0;
    }
    do
      *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v37++) = 0;
    while ((_DWORD)v37);
  }
  *(_DWORD *)(a1 + 4) = 0;
  if (v12)
    btAlignedFreeInternal(v12);
  return 1;
}

BOOL HullLibrary::ComputeHull(uint64_t a1, uint64_t a2, float32x4_t *a3, uint64_t a4, int a5)
{
  int v7;
  int v8;
  int v9;
  int v11;

  v7 = a2;
  v11 = 0;
  v8 = HullLibrary::calchull(a1, a3, a2, a4 + 24, &v11, a5);
  if (v8)
  {
    v9 = v11;
    *(_DWORD *)(a4 + 8) = v11;
    *(_QWORD *)(a4 + 16) = a3;
    *(_DWORD *)a4 = v7;
    *(_DWORD *)(a4 + 4) = 3 * v9;
  }
  return v8 != 0;
}

uint64_t HullLibrary::CreateConvexHull(HullLibrary *a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6)
{
  double v9;
  unsigned int v10;
  unsigned int v11;
  btVector3 *v12;
  uint64_t v13;
  int v14;
  float32x2_t v15;
  float v16;
  float32x2_t *v17;
  unsigned int v18;
  btVector3 *v19;
  uint64_t v20;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void **v30;
  BOOL v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void **v39;
  BOOL v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  void **v46;
  _DWORD *v47;
  int *v48;
  int v49;
  void **v50;
  _DWORD *v51;
  int *v52;
  int v53;
  void **v54;
  _DWORD *v55;
  _DWORD *v56;
  _DWORD *v57;
  uint64_t v58;
  uint64_t v59;
  _DWORD *v60;
  unsigned int v61;
  btVector3 v62;
  unsigned int v63[2];
  int v64;
  btVector3 *v65;
  uint64_t v66;
  void *__src;
  char v68;

  v68 = 1;
  __src = 0;
  HIDWORD(v9) = 0;
  v66 = 0;
  *(_QWORD *)v63 = 0;
  v64 = 0;
  v65 = 0;
  v10 = *(_DWORD *)(a2 + 4);
  if (v10 <= 8)
    v11 = 8;
  else
    v11 = v10;
  if ((v11 & 0x80000000) != 0)
  {
    v12 = 0;
  }
  else
  {
    v12 = (btVector3 *)btAlignedAllocInternal(16 * v11, 16);
    v10 = *(_DWORD *)(a2 + 4);
  }
  v61 = 0;
  LODWORD(v9) = *(_DWORD *)(a2 + 20);
  if (!HullLibrary::CleanupVertices(a1, v10, *(const btVector3 **)(a2 + 8), *(_DWORD *)(a2 + 16), &v61, v12, v9, &v62, a5, a6))goto LABEL_14;
  v13 = v61;
  if (v61)
  {
    v14 = 0;
    v15 = *(float32x2_t *)v62.var0.var0;
    v16 = v62.var0.var0[2];
    do
    {
      v17 = (float32x2_t *)&v12[v14];
      *v17 = vmul_f32(*v17, v15);
      v17[1].f32[0] = v17[1].f32[0] * v16;
      ++v14;
    }
    while ((_DWORD)v13 != v14);
  }
  if (!HullLibrary::ComputeHull((uint64_t)a1, v13, (float32x4_t *)v12, (uint64_t)v63, *(_DWORD *)(a2 + 24)))
  {
LABEL_14:
    v20 = 1;
    if (!v12)
      goto LABEL_16;
LABEL_15:
    btAlignedFreeInternal((void **)v12);
    goto LABEL_16;
  }
  v18 = v63[0];
  if ((int)v63[0] < 1)
    v19 = 0;
  else
    v19 = (btVector3 *)btAlignedAllocInternal(16 * v63[0], 16);
  HullLibrary::BringOutYourDead(a1, v65, v18, v19, &v61, (unsigned int *)__src, v63[1]);
  if ((*(_BYTE *)a2 & 1) == 0)
  {
    *(_BYTE *)a3 = 1;
    v22 = v61;
    *(_DWORD *)(a3 + 4) = v61;
    v23 = *(_DWORD *)(a3 + 12);
    if (v23 < (int)v22 && *(_DWORD *)(a3 + 16) < (int)v22)
    {
      if ((_DWORD)v22)
      {
        v24 = btAlignedAllocInternal(16 * (int)v22, 16);
        v23 = *(_DWORD *)(a3 + 12);
      }
      else
      {
        v24 = 0;
      }
      if (v23 >= 1)
      {
        v28 = 0;
        v29 = 16 * v23;
        do
        {
          *(_OWORD *)(v24 + v28) = *(_OWORD *)(*(_QWORD *)(a3 + 24) + v28);
          v28 += 16;
        }
        while (v29 != v28);
      }
      v30 = *(void ***)(a3 + 24);
      if (v30)
        v31 = *(_BYTE *)(a3 + 32) == 0;
      else
        v31 = 1;
      if (!v31)
        btAlignedFreeInternal(v30);
      *(_BYTE *)(a3 + 32) = 1;
      *(_QWORD *)(a3 + 24) = v24;
      *(_DWORD *)(a3 + 16) = v22;
    }
    *(_DWORD *)(a3 + 12) = v22;
    v32 = v64;
    v33 = v63[1] + v64;
    *(_DWORD *)(a3 + 40) = v64;
    *(_DWORD *)(a3 + 44) = v33;
    v34 = *(_DWORD *)(a3 + 52);
    if (v34 >= v33)
      goto LABEL_73;
    if (*(_DWORD *)(a3 + 56) >= v33)
    {
LABEL_72:
      bzero((void *)(*(_QWORD *)(a3 + 64) + 4 * v34), 4 * (v33 + ~v34) + 4);
LABEL_73:
      *(_DWORD *)(a3 + 52) = v33;
      memcpy(*(void **)(a3 + 24), v19, 16 * v22);
      v54 = (void **)__src;
      if (v32)
      {
        v55 = (_DWORD *)(*(_QWORD *)(a3 + 64) + 8);
        v56 = __src;
        do
        {
          *(v55 - 2) = 3;
          if ((*(_BYTE *)a2 & 2) != 0)
          {
            *(v55 - 1) = v56[2];
            *v55 = v56[1];
            v57 = v56;
          }
          else
          {
            *(v55 - 1) = *v56;
            *v55 = v56[1];
            v57 = v56 + 2;
          }
          v55[1] = *v57;
          v56 += 3;
          v55 += 4;
          --v32;
        }
        while (v32);
      }
      goto LABEL_90;
    }
    if (v33)
      v35 = btAlignedAllocInternal(4 * v33, 16);
    else
      v35 = 0;
    LODWORD(v36) = *(_DWORD *)(a3 + 52);
    v46 = *(void ***)(a3 + 64);
    if ((int)v36 < 1)
    {
      if (!v46)
      {
LABEL_71:
        *(_BYTE *)(a3 + 72) = 1;
        *(_QWORD *)(a3 + 64) = v35;
        *(_DWORD *)(a3 + 56) = v33;
        goto LABEL_72;
      }
    }
    else
    {
      v36 = v36;
      v47 = (_DWORD *)v35;
      v48 = *(int **)(a3 + 64);
      do
      {
        v49 = *v48++;
        *v47++ = v49;
        --v36;
      }
      while (v36);
    }
    if (*(_BYTE *)(a3 + 72))
      btAlignedFreeInternal(v46);
    goto LABEL_71;
  }
  *(_BYTE *)a3 = 0;
  v25 = v61;
  *(_DWORD *)(a3 + 4) = v61;
  v26 = *(_DWORD *)(a3 + 12);
  if (v26 < (int)v25 && *(_DWORD *)(a3 + 16) < (int)v25)
  {
    if ((_DWORD)v25)
    {
      v27 = btAlignedAllocInternal(16 * (int)v25, 16);
      v26 = *(_DWORD *)(a3 + 12);
    }
    else
    {
      v27 = 0;
    }
    if (v26 >= 1)
    {
      v37 = 0;
      v38 = 16 * v26;
      do
      {
        *(_OWORD *)(v27 + v37) = *(_OWORD *)(*(_QWORD *)(a3 + 24) + v37);
        v37 += 16;
      }
      while (v38 != v37);
    }
    v39 = *(void ***)(a3 + 24);
    if (v39)
      v40 = *(_BYTE *)(a3 + 32) == 0;
    else
      v40 = 1;
    if (!v40)
      btAlignedFreeInternal(v39);
    *(_BYTE *)(a3 + 32) = 1;
    *(_QWORD *)(a3 + 24) = v27;
    *(_DWORD *)(a3 + 16) = v25;
  }
  *(_DWORD *)(a3 + 12) = v25;
  v42 = v63[1];
  v41 = v64;
  *(_DWORD *)(a3 + 40) = v64;
  *(_DWORD *)(a3 + 44) = v42;
  v43 = *(_DWORD *)(a3 + 52);
  if (v43 < (int)v42)
  {
    if (*(_DWORD *)(a3 + 56) >= (int)v42)
    {
LABEL_84:
      bzero((void *)(*(_QWORD *)(a3 + 64) + 4 * v43), 4 * (v42 + ~v43) + 4);
      goto LABEL_85;
    }
    if ((_DWORD)v42)
      v44 = btAlignedAllocInternal(4 * (int)v42, 16);
    else
      v44 = 0;
    LODWORD(v45) = *(_DWORD *)(a3 + 52);
    v50 = *(void ***)(a3 + 64);
    if ((int)v45 < 1)
    {
      if (!v50)
      {
LABEL_83:
        *(_BYTE *)(a3 + 72) = 1;
        *(_QWORD *)(a3 + 64) = v44;
        *(_DWORD *)(a3 + 56) = v42;
        goto LABEL_84;
      }
    }
    else
    {
      v45 = v45;
      v51 = (_DWORD *)v44;
      v52 = *(int **)(a3 + 64);
      do
      {
        v53 = *v52++;
        *v51++ = v53;
        --v45;
      }
      while (v45);
    }
    if (*(_BYTE *)(a3 + 72))
      btAlignedFreeInternal(v50);
    goto LABEL_83;
  }
LABEL_85:
  *(_DWORD *)(a3 + 52) = v42;
  memcpy(*(void **)(a3 + 24), v19, 16 * v25);
  if ((*(_BYTE *)a2 & 2) != 0)
  {
    v54 = (void **)__src;
    if (v41)
    {
      v58 = 0;
      v59 = *(_QWORD *)(a3 + 64);
      do
      {
        v60 = (_DWORD *)(v59 + v58);
        *v60 = *(_DWORD *)((char *)v54 + v58 + 8);
        v60[1] = *(_DWORD *)((char *)v54 + v58 + 4);
        v60[2] = *(_DWORD *)((char *)v54 + v58);
        v58 += 12;
        --v41;
      }
      while (v41);
    }
  }
  else
  {
    v54 = (void **)__src;
    memcpy(*(void **)(a3 + 64), __src, 4 * v42);
  }
LABEL_90:
  if ((_DWORD)v66)
  {
    if (v54 && v68)
      btAlignedFreeInternal(v54);
    v68 = 1;
    __src = 0;
  }
  if (v19)
    btAlignedFreeInternal((void **)v19);
  v20 = 0;
  if (v12)
    goto LABEL_15;
LABEL_16:
  if (__src && v68)
    btAlignedFreeInternal((void **)__src);
  return v20;
}

BOOL HullLibrary::CleanupVertices(HullLibrary *this, unsigned int a2, const btVector3 *a3, unsigned int a4, unsigned int *a5, btVector3 *a6, double a7, btVector3 *a8, double a9, double a10)
{
  unsigned int v10;
  uint64_t v17;
  void **v18;
  int v19;
  const btVector3 *v24;
  unint64_t i;
  float v26;
  float v27;
  float32x2_t v28;
  float32x2_t v29;
  int v30;
  float v31;
  float32x2_t v32;
  float32x2_t v33;
  float32x2_t v34;
  float32x2_t v35;
  float *v36;
  float v37;
  float32x2_t v38;
  uint64_t v39;
  uint64_t v40;
  float32x2_t *v41;
  int32x2_t v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x2_t v45;
  int32x2_t v46;
  float32x2_t v47;
  int32x2_t v48;
  int32x2_t v49;
  btVector3 *v50;
  uint64_t v51;
  int v52;
  btVector3 *v53;
  unsigned int *v54;
  float *v55;
  uint64_t v56;
  void **v57;
  _DWORD *v58;
  int *v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  btVector3 *v63;
  unint64_t j;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v73;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v86;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  unsigned int v102;
  double v103;
  _BYTE v104[12];
  _BYTE v105[12];
  uint64_t v106;

  v10 = a2;
  v106 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return v10 != 0;
  v17 = *((int *)this + 9);
  v103 = a7;
  if ((v17 & 0x80000000) != 0)
  {
    if ((*((_DWORD *)this + 10) & 0x80000000) != 0)
    {
      v18 = (void **)*((_QWORD *)this + 6);
      if (v18 && *((_BYTE *)this + 56))
        btAlignedFreeInternal(v18);
      *((_BYTE *)this + 56) = 1;
      *((_QWORD *)this + 6) = 0;
      *((_DWORD *)this + 10) = 0;
    }
    bzero((void *)(*((_QWORD *)this + 6) + 4 * v17), 4 * ~(_DWORD)v17 + 4);
    a7 = v103;
  }
  v19 = 0;
  *((_DWORD *)this + 9) = 0;
  *a5 = 0;
  __asm { FMOV            V6.2S, #1.0 }
  *(float32x2_t *)a8->var0.var0 = _D6;
  a8->var0.var0[2] = 1.0;
  *(_QWORD *)v105 = 0x7F7FFFFF7F7FFFFFLL;
  *(_DWORD *)&v105[8] = 2139095039;
  *(_DWORD *)&v104[8] = -8388609;
  *(_QWORD *)v104 = 0xFF7FFFFFFF7FFFFFLL;
  v24 = a3;
  do
  {
    for (i = 0; i != 12; i += 4)
    {
      v26 = v24->var0.var0[i / 4];
      if (v26 < *(float *)&v105[i])
        *(float *)&v105[i] = v26;
      if (v26 > *(float *)&v104[i])
        *(float *)&v104[i] = v26;
    }
    v24 = (const btVector3 *)((char *)v24 + a4);
    ++v19;
  }
  while (v19 != v10);
  v27 = *(float *)v104 - *(float *)v105;
  *(float *)&a10 = *(float *)v105 + (float)((float)(*(float *)v104 - *(float *)v105) * 0.5);
  v28 = vsub_f32(*(float32x2_t *)&v104[4], *(float32x2_t *)&v105[4]);
  v29 = vmla_f32(*(float32x2_t *)&v105[4], (float32x2_t)0x3F0000003F000000, v28);
  if (v10 >= 3 && v27 >= 0.000001 && v28.f32[0] >= 0.000001 && v28.f32[1] >= 0.000001)
  {
    v30 = 0;
    a8->var0.var0[0] = v27;
    *(float32x2_t *)&a8->var0.var0[1] = v28;
    v31 = 1.0 / v27;
    v32 = vdiv_f32(_D6, v28);
    *(float *)&a10 = *(float *)&a10 * (float)(1.0 / v27);
    v33 = vmul_f32(v29, v32);
    v34 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a10, 0);
    v35 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a7, 0);
    v36 = &a6->var0.var0[1];
    v102 = v10;
    while (1)
    {
      v37 = a3->var0.var0[0] * v31;
      v38 = vmul_f32(*(float32x2_t *)&a3->var0.var0[1], v32);
      v39 = *a5;
      if ((_DWORD)v39)
      {
        v40 = 0;
        v41 = (float32x2_t *)v36;
        while (1)
        {
          if (vabds_f32(v41[-1].f32[1], v37) < *(float *)&a7)
          {
            v42 = vcgt_f32(v35, vabd_f32(*v41, v38));
            if ((v42.i8[0] & 1) != 0 && (v42.i8[4] & 1) != 0)
              break;
          }
          ++v40;
          v41 += 2;
          if (v39 == v40)
          {
            LODWORD(v40) = *a5;
            goto LABEL_33;
          }
        }
        v43.f32[0] = a3->var0.var0[0] * v31;
        v43.i32[1] = v41[-1].i32[1];
        v44 = vsub_f32(v43, v34);
        v45 = vsub_f32(v38, v33);
        v46 = (int32x2_t)vmul_f32(v45, v45);
        v47 = vsub_f32(*v41, v33);
        v48 = (int32x2_t)vmul_f32(v47, v47);
        v49 = (int32x2_t)vadd_f32(vmla_f32((float32x2_t)vzip1_s32(v46, v48), v44, v44), (float32x2_t)vzip2_s32(v46, v48));
        if ((vcgt_f32((float32x2_t)v49, (float32x2_t)vdup_lane_s32(v49, 1)).u8[0] & 1) != 0)
        {
          v41[-1].f32[1] = v37;
          *v41 = v38;
        }
      }
      else
      {
        LODWORD(v40) = 0;
      }
      if ((_DWORD)v40 == (_DWORD)v39)
      {
LABEL_33:
        v50 = &a6[v39];
        v50->var0.var0[0] = v37;
        *(float32x2_t *)&v50->var0.var0[1] = v38;
        *a5 = v39 + 1;
      }
      LODWORD(v51) = *((_DWORD *)this + 9);
      if ((_DWORD)v51 != *((_DWORD *)this + 10))
        goto LABEL_50;
      v52 = (_DWORD)v51 ? 2 * v51 : 1;
      if ((int)v51 >= v52)
        goto LABEL_50;
      v53 = a6;
      v54 = a5;
      v55 = v36;
      if (v52)
      {
        v56 = btAlignedAllocInternal(4 * v52, 16);
        LODWORD(v51) = *((_DWORD *)this + 9);
      }
      else
      {
        v56 = 0;
      }
      v57 = (void **)*((_QWORD *)this + 6);
      if ((int)v51 >= 1)
        break;
      if (v57)
        goto LABEL_47;
LABEL_49:
      *((_BYTE *)this + 56) = 1;
      *((_QWORD *)this + 6) = v56;
      *((_DWORD *)this + 10) = v52;
      LODWORD(v51) = *((_DWORD *)this + 9);
      LODWORD(a7) = LODWORD(v103);
      v36 = v55;
      a5 = v54;
      a6 = v53;
      v10 = v102;
LABEL_50:
      *(_DWORD *)(*((_QWORD *)this + 6) + 4 * (int)v51) = v40;
      a3 = (const btVector3 *)((char *)a3 + a4);
      ++*((_DWORD *)this + 9);
      if (++v30 == v10)
      {
        *(_DWORD *)&v105[8] = 2139095039;
        *(_QWORD *)v105 = 0x7F7FFFFF7F7FFFFFLL;
        *(_DWORD *)&v104[8] = -8388609;
        *(_QWORD *)v104 = 0xFF7FFFFFFF7FFFFFLL;
        v61 = *a5;
        if ((_DWORD)v61)
        {
          v62 = 0;
          v63 = a6;
          do
          {
            for (j = 0; j != 12; j += 4)
            {
              v65 = v63->var0.var0[j / 4];
              if (v65 < *(float *)&v105[j])
                *(float *)&v105[j] = v65;
              if (v65 > *(float *)&v104[j])
                *(float *)&v104[j] = v65;
            }
            ++v62;
            ++v63;
          }
          while (v62 != v61);
          v66 = *(float *)&v104[4];
          v67 = *(float *)v104;
          v68 = *(float *)&v105[4];
          v69 = *(float *)v105;
          v70 = *(float *)&v104[8];
          v71 = *(float *)&v105[8];
        }
        else
        {
          v70 = -3.4028e38;
          v71 = 3.4028e38;
          v68 = 3.4028e38;
          v66 = -3.4028e38;
          v69 = 3.4028e38;
          v67 = -3.4028e38;
        }
        v79 = v67 - v69;
        v80 = v66 - v68;
        v81 = v70 - v71;
        if (v61 < 3 || v79 < 0.000001 || v80 < 0.000001 || v81 < 0.000001)
        {
          v82 = v69 + (float)(v79 * 0.5);
          v83 = v68 + (float)(v80 * 0.5);
          v84 = v71 + (float)(v81 * 0.5);
          if (v79 >= 3.4028e38 || v79 < 0.000001)
            v86 = 3.4028e38;
          else
            v86 = v79;
          if (v80 < v86 && v80 >= 0.000001)
            v86 = v80;
          if (v81 < v86 && v81 >= 0.000001)
            v86 = v81;
          if (v86 == 3.4028e38)
          {
            v79 = 0.01;
            v80 = 0.01;
            v89 = 0.01;
          }
          else
          {
            v89 = v86 * 0.05;
            if (v79 < 0.000001)
              v79 = v89;
            if (v80 < 0.000001)
              v80 = v89;
            if (v81 >= 0.000001)
              v89 = v81;
          }
          v96 = v82 - v79;
          v97 = v79 + v82;
          v98 = v83 - v80;
          a6->var0.var0[0] = v96;
          a6->var0.var0[1] = v83 - v80;
          v99 = v80 + v83;
          v100 = v84 - v89;
          a6->var0.var0[2] = v84 - v89;
          v95 = v89 + v84;
          a6[1].var0.var0[0] = v97;
          a6[1].var0.var0[1] = v98;
          a6[1].var0.var0[2] = v100;
          a6[2].var0.var0[0] = v97;
          a6[2].var0.var0[1] = v99;
          a6[2].var0.var0[2] = v100;
          a6[3].var0.var0[0] = v96;
          a6[3].var0.var0[1] = v99;
          a6[3].var0.var0[2] = v100;
          a6[4].var0.var0[0] = v96;
          a6[4].var0.var0[1] = v98;
          a6[4].var0.var0[2] = v95;
          a6[5].var0.var0[0] = v97;
          a6[5].var0.var0[1] = v98;
          a6[5].var0.var0[2] = v95;
          a6[6].var0.var0[0] = v97;
          a6[6].var0.var0[1] = v99;
          a6[6].var0.var0[2] = v95;
          a6[7].var0.var0[0] = v96;
          a6[7].var0.var0[1] = v99;
          goto LABEL_118;
        }
        return v10 != 0;
      }
    }
    v51 = v51;
    v58 = (_DWORD *)v56;
    v59 = (int *)*((_QWORD *)this + 6);
    do
    {
      v60 = *v59++;
      *v58++ = v60;
      --v51;
    }
    while (v51);
LABEL_47:
    if (*((_BYTE *)this + 56))
      btAlignedFreeInternal(v57);
    goto LABEL_49;
  }
  if (v27 >= 3.4028e38 || v27 <= 0.000001)
    v73 = 3.4028e38;
  else
    v73 = *(float *)v104 - *(float *)v105;
  if (v28.f32[0] < v73 && v28.f32[0] > 0.000001)
    v73 = v28.f32[0];
  if (v28.f32[1] < v73 && v28.f32[1] > 0.000001)
    v73 = v28.f32[1];
  if (v73 == 3.4028e38)
  {
    v76 = 0.01;
    v77 = 0.01;
    v78 = 0.01;
  }
  else
  {
    v76 = v73 * 0.05;
    if (v27 >= 0.000001)
      v78 = *(float *)v104 - *(float *)v105;
    else
      v78 = v76;
    if (v28.f32[0] >= 0.000001)
      v77 = v28.f32[0];
    else
      v77 = v76;
    if (v28.f32[1] >= 0.000001)
      v76 = v28.f32[1];
  }
  v90 = *(float *)&a10 - v78;
  v91 = v78 + *(float *)&a10;
  v92 = v29.f32[0] - v77;
  a6->var0.var0[0] = v90;
  a6->var0.var0[1] = v29.f32[0] - v77;
  v93 = v77 + v29.f32[0];
  v94 = v29.f32[1] - v76;
  a6->var0.var0[2] = v29.f32[1] - v76;
  v95 = v76 + v29.f32[1];
  a6[1].var0.var0[0] = v91;
  a6[1].var0.var0[1] = v92;
  a6[1].var0.var0[2] = v94;
  a6[2].var0.var0[0] = v91;
  a6[2].var0.var0[1] = v93;
  a6[2].var0.var0[2] = v94;
  a6[3].var0.var0[0] = v90;
  a6[3].var0.var0[1] = v93;
  a6[3].var0.var0[2] = v94;
  a6[4].var0.var0[0] = v90;
  a6[4].var0.var0[1] = v92;
  a6[4].var0.var0[2] = v95;
  a6[5].var0.var0[0] = v91;
  a6[5].var0.var0[1] = v92;
  a6[5].var0.var0[2] = v95;
  a6[6].var0.var0[0] = v91;
  a6[6].var0.var0[1] = v93;
  a6[6].var0.var0[2] = v95;
  a6[7].var0.var0[0] = v90;
  a6[7].var0.var0[1] = v93;
LABEL_118:
  a6[7].var0.var0[2] = v95;
  *a5 = 8;
  return v10 != 0;
}

void HullLibrary::BringOutYourDead(HullLibrary *this, const btVector3 *a2, unsigned int a3, btVector3 *a4, unsigned int *a5, unsigned int *a6, int a7)
{
  uint64_t v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  const btVector3 *v23;
  uint64_t v24;
  btVector3 *v25;
  int v26;
  uint64_t i;

  v14 = *((unsigned int *)this + 9);
  if ((int)v14 < 1)
  {
    v16 = 0;
  }
  else
  {
    v15 = 4 * v14;
    v16 = (void *)btAlignedAllocInternal(4 * v14, 16);
    bzero(v16, v15);
    if (*((int *)this + 9) >= 1)
    {
      v17 = 0;
      v18 = *((_QWORD *)this + 6);
      do
      {
        *((_DWORD *)v16 + v17) = *(_DWORD *)(v18 + 4 * v17);
        ++v17;
      }
      while (v17 < *((int *)this + 9));
    }
  }
  if ((int)a3 < 1)
  {
    v19 = 0;
  }
  else
  {
    v19 = (void *)btAlignedAllocInternal(4 * a3, 16);
    bzero(v19, 4 * a3);
  }
  bzero(v19, 4 * a3);
  *a5 = 0;
  if (a7 < 1)
  {
    if (!v19)
      goto LABEL_25;
  }
  else
  {
    v20 = 0;
    do
    {
      v21 = (int)a6[v20];
      v22 = *((_DWORD *)v19 + v21);
      if (v22)
      {
        a6[v20] = v22 - 1;
      }
      else
      {
        a6[v20] = *a5;
        v23 = &a2[v21];
        v24 = *a5;
        v25 = &a4[v24];
        v25->var0.var0[0] = v23->var0.var0[0];
        v25->var0.var0[1] = v23->var0.var0[1];
        v25->var0.var0[2] = v23->var0.var0[2];
        v26 = *((_DWORD *)this + 9);
        if (v26 >= 1)
        {
          for (i = 0; i < v26; ++i)
          {
            if (*((_DWORD *)v16 + i) == (_DWORD)v21)
            {
              *(_DWORD *)(*((_QWORD *)this + 6) + 4 * i) = *a5;
              v26 = *((_DWORD *)this + 9);
            }
          }
          LODWORD(v24) = *a5;
        }
        *a5 = v24 + 1;
        *((_DWORD *)v19 + v21) = v24 + 1;
      }
      ++v20;
    }
    while (v20 != a7);
  }
  btAlignedFreeInternal((void **)v19);
LABEL_25:
  if (v16)
    btAlignedFreeInternal((void **)v16);
}

uint64_t HullLibrary::ReleaseResult(uint64_t a1, uint64_t a2)
{
  void **v3;
  BOOL v4;
  void **v5;
  BOOL v6;

  if (*(_DWORD *)(a2 + 12))
  {
    *(_DWORD *)(a2 + 4) = 0;
    v3 = *(void ***)(a2 + 24);
    if (v3)
      v4 = *(_BYTE *)(a2 + 32) == 0;
    else
      v4 = 1;
    if (!v4)
      btAlignedFreeInternal(v3);
    *(_BYTE *)(a2 + 32) = 1;
    *(_QWORD *)(a2 + 24) = 0;
    *(_DWORD *)(a2 + 12) = 0;
    *(_DWORD *)(a2 + 16) = 0;
  }
  if (*(_DWORD *)(a2 + 52))
  {
    *(_DWORD *)(a2 + 44) = 0;
    v5 = *(void ***)(a2 + 64);
    if (v5)
      v6 = *(_BYTE *)(a2 + 72) == 0;
    else
      v6 = 1;
    if (!v6)
      btAlignedFreeInternal(v5);
    *(_BYTE *)(a2 + 72) = 1;
    *(_QWORD *)(a2 + 64) = 0;
    *(_DWORD *)(a2 + 52) = 0;
    *(_DWORD *)(a2 + 56) = 0;
  }
  return 0;
}

unint64_t btConvexHullInternal::Int128::operator*(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL4 v3;
  btConvexHullInternal::Int128 *v4;
  _BOOL4 v5;
  uint64_t v6;
  _BOOL4 v7;
  unint64_t result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = v2 >= 0;
  if (v2 >= 0)
    v4 = *(btConvexHullInternal::Int128 **)a1;
  else
    v4 = (btConvexHullInternal::Int128 *)-*(_QWORD *)a1;
  v5 = v2 < 0;
  if (a2 >= 0)
    v6 = a2;
  else
    v6 = -a2;
  if (a2 >= 0)
    v7 = v5;
  else
    v7 = v3;
  result = btConvexHullInternal::Int128::mul(v4, v6);
  if (v7)
    return -(uint64_t)result;
  return result;
}

unint64_t btConvexHullInternal::Int128::mul(btConvexHullInternal::Int128 *this, uint64_t a2)
{
  return a2 * (unint64_t)this
       + (((HIDWORD(a2) * (_DWORD)this) + (unint64_t)(a2 * HIDWORD(this))) << 32);
}

unint64_t btConvexHullInternal::Int128::mul(uint64_t this, uint64_t a2)
{
  _BOOL4 v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = this >= 0;
  if (this >= 0)
    v3 = this;
  else
    v3 = -this;
  if (a2 >= 0)
    v4 = a2;
  else
    v4 = -a2;
  if (a2 >= 0)
    v2 = this < 0;
  v5 = v4 * (unint64_t)v3
     + (((HIDWORD(v4) * v3) + (unint64_t)(v4 * HIDWORD(v3))) << 32);
  if (v2)
    return -(uint64_t)v5;
  else
    return v5;
}

uint64_t btConvexHullInternal::Rational64::compare(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  int v13;
  int v14;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_DWORD *)(a2 + 16);
  result = (v3 - v4);
  if (v3 == v4)
  {
    if (v3)
    {
      v7 = btConvexHullInternal::Int128::mul(*(btConvexHullInternal::Int128 **)a1, *(_QWORD *)(a2 + 8));
      v9 = v8;
      v10 = btConvexHullInternal::Int128::mul(*(btConvexHullInternal::Int128 **)(a1 + 8), *(_QWORD *)a2);
      if (v7 >= v10)
        v12 = v7 > v10;
      else
        v12 = -1;
      if (v9 <= v11)
        v13 = v12;
      else
        v13 = 1;
      if (v9 >= v11)
        v14 = v13;
      else
        v14 = -1;
      return (v14 * v3);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t btConvexHullInternal::Rational128::compare(btConvexHullInternal::Rational128 *this, const btConvexHullInternal::Rational128 *a2)
{
  uint64_t v2;
  int v3;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v2 = *((int *)this + 8);
  v3 = *((_DWORD *)a2 + 8);
  if ((_DWORD)v2 != v3)
    return (v2 - v3);
  if (!(_DWORD)v2)
    return 0;
  if (*((_BYTE *)this + 36))
    return -btConvexHullInternal::Rational128::compare(a2, *(_QWORD *)this * v2);
  btConvexHullInternal::DMul<btConvexHullInternal::Int128,unsigned long long>::mul(*(btConvexHullInternal::Int128 **)this, *((btConvexHullInternal::Int128 **)this + 1), *((_QWORD *)a2 + 2), *((_QWORD *)a2 + 3), &v14, &v12);
  btConvexHullInternal::DMul<btConvexHullInternal::Int128,unsigned long long>::mul(*((btConvexHullInternal::Int128 **)this + 2), *((btConvexHullInternal::Int128 **)this + 3), *(_QWORD *)a2, *((_QWORD *)a2 + 1), &v10, &v8);
  if (v13 < v9)
    goto LABEL_8;
  if (v13 > v9)
  {
LABEL_10:
    v7 = 1;
    return (*((_DWORD *)this + 8) * v7);
  }
  if (v12 >= v8)
  {
    if (v12 > v8)
      goto LABEL_10;
    if (v15 >= v11)
    {
      if (v15 <= v11)
      {
        v7 = v14 > v10;
        if (v14 < v10)
          v7 = -1;
        return (*((_DWORD *)this + 8) * v7);
      }
      goto LABEL_10;
    }
  }
LABEL_8:
  v7 = -1;
  return (*((_DWORD *)this + 8) * v7);
}

uint64_t btConvexHullInternal::Rational128::compare(btConvexHullInternal::Rational128 *this, uint64_t a2)
{
  uint64_t v3;
  BOOL v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;

  if (*((_BYTE *)this + 36))
  {
    v3 = *(_QWORD *)this * *((int *)this + 8);
    v4 = v3 <= a2;
    if (v3 >= a2)
      v5 = 0;
    else
      v5 = -1;
    if (v4)
      return v5;
    else
      return 1;
  }
  else
  {
    if (a2 < 1)
    {
      v6 = *((unsigned int *)this + 8);
      if ((a2 & 0x8000000000000000) == 0)
        return v6;
      if ((v6 & 0x80000000) == 0)
        return 1;
      a2 = -a2;
    }
    else
    {
      LODWORD(v6) = *((_DWORD *)this + 8);
      if ((int)v6 < 1)
        return 0xFFFFFFFFLL;
    }
    v7 = btConvexHullInternal::Int128::operator*((uint64_t)this + 16, a2);
    v9 = *((_QWORD *)this + 1);
    if (v9 >= v8)
    {
      if (v9 > v8)
      {
        v10 = 1;
      }
      else
      {
        v10 = *(_QWORD *)this > v7;
        if (*(_QWORD *)this < v7)
          v10 = -1;
      }
    }
    else
    {
      v10 = -1;
    }
    return (v6 * v10);
  }
}

unint64_t btConvexHullInternal::DMul<btConvexHullInternal::Int128,unsigned long long>::mul(btConvexHullInternal::Int128 *a1, btConvexHullInternal::Int128 *a2, uint64_t a3, uint64_t a4, unint64_t *a5, _QWORD *a6)
{
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t result;
  uint64_t v22;
  uint64_t v23;
  _BOOL8 v24;
  BOOL v25;
  uint64_t v26;
  _BOOL8 v27;
  uint64_t v28;
  _BOOL4 v29;
  _BOOL8 v30;

  v12 = btConvexHullInternal::Int128::mul(a1, a3);
  v14 = v13;
  v15 = btConvexHullInternal::Int128::mul(a1, a4);
  v17 = v16;
  v18 = btConvexHullInternal::Int128::mul(a2, a3);
  v20 = v19;
  result = btConvexHullInternal::Int128::mul(a2, a4);
  v23 = result + v17;
  v24 = __CFADD__(result, v17);
  v25 = __CFADD__(__CFADD__(v18, v15), v23);
  v26 = __CFADD__(v18, v15) + v23;
  v25 |= __CFADD__(v20, v26);
  v26 += v20;
  v27 = v24 + v25 + v22;
  v28 = v26 + 1;
  v29 = __CFADD__(v18 + v15, v14);
  if (!__CFADD__(v18 + v15, v14))
    v28 = v26;
  v30 = v26 == -1 && v29;
  *a5 = v12;
  a5[1] = v18 + v15 + v14;
  *a6 = v28;
  a6[1] = v27 + v30;
  return result;
}

uint64_t btConvexHullInternal::newEdgePair(btConvexHullInternal *this, btConvexHullInternal::Vertex *a2, btConvexHullInternal::Vertex *a3)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;

  v6 = (char *)this + 64;
  btConvexHullInternal::Pool<btConvexHullInternal::Edge>::newObject((uint64_t)this + 64);
  v8 = v7;
  btConvexHullInternal::Pool<btConvexHullInternal::Edge>::newObject((uint64_t)v6);
  v9 = *((_DWORD *)this + 40);
  *(_DWORD *)(v8 + 40) = v9;
  *(_DWORD *)(v10 + 40) = v9;
  *(_QWORD *)(v8 + 16) = v10;
  *(_QWORD *)(v8 + 24) = a3;
  *(_QWORD *)(v10 + 16) = v8;
  *(_QWORD *)(v10 + 24) = a2;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v10 + 32) = 0;
  v11 = *((_DWORD *)this + 44);
  v12 = *((_DWORD *)this + 45);
  *((_DWORD *)this + 44) = v11 + 1;
  if (v11 >= v12)
    *((_DWORD *)this + 45) = v11 + 1;
  return v8;
}

double btConvexHullInternal::Pool<btConvexHullInternal::Edge>::newObject(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64x2_t v7;
  int32x2_t v8;
  _QWORD *v9;
  int32x2_t v10;
  int32x2_t v11;
  _QWORD *v12;
  _QWORD *v13;
  double result;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v3 = *(_QWORD *)(a1 + 8);
    if (v3)
    {
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(v3 + 16);
      v2 = *(_QWORD *)v3;
    }
    else
    {
      v3 = btAlignedAllocInternal(24, 16);
      v4 = *(int *)(a1 + 24);
      *(_DWORD *)(v3 + 8) = v4;
      *(_QWORD *)(v3 + 16) = 0;
      v2 = btAlignedAllocInternal(48 * v4, 16);
      *(_QWORD *)v3 = v2;
      *(_QWORD *)(v3 + 16) = *(_QWORD *)a1;
      *(_QWORD *)a1 = v3;
    }
    v5 = *(unsigned int *)(v3 + 8);
    if ((int)v5 >= 1)
    {
      v6 = 0;
      v7 = (uint64x2_t)vdupq_n_s64(v5 - 1);
      v8 = (int32x2_t)0x100000000;
      v9 = (_QWORD *)(v2 + 48);
      do
      {
        v10 = vmovn_s64((int64x2_t)vcgeq_u64(v7, (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v6), (int8x16_t)xmmword_1DD008320)));
        v11 = vadd_s32(v8, (int32x2_t)0x100000001);
        if ((v10.i8[0] & 1) != 0)
        {
          if (v11.i32[0] >= (int)v5)
            v12 = 0;
          else
            v12 = v9;
          *(v9 - 6) = v12;
        }
        if ((v10.i8[4] & 1) != 0)
        {
          v13 = v9 + 6;
          if (v11.i32[1] >= (int)v5)
            v13 = 0;
          *v9 = v13;
        }
        v6 += 2;
        v8 = vadd_s32(v8, (int32x2_t)0x200000002);
        v9 += 12;
      }
      while (((v5 + 1) & 0x1FFFFFFFELL) != v6);
    }
  }
  *(_QWORD *)(a1 + 16) = *(_QWORD *)v2;
  result = 0.0;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)v2 = 0u;
  return result;
}

uint64_t btConvexHullInternal::mergeProjection(uint64_t a1, uint64_t *a2, uint64_t **a3, uint64_t ***a4, uint64_t **a5)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  int v9;
  int v10;
  uint64_t *v11;
  int v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  char v20;
  int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t **v24;
  char v25;
  int v26;
  int v27;
  int v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t *v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t *v47;
  BOOL v48;
  int v49;
  uint64_t *v50;
  uint64_t *v51;
  int v52;
  int v53;
  int v54;
  int v55;
  uint64_t *v56;
  uint64_t *v57;
  int v58;
  int v59;
  int v60;
  int v61;
  uint64_t *v62;
  int v63;
  int v64;
  int v65;
  int v66;
  uint64_t result;
  uint64_t v68;

  v5 = a2[3];
  v6 = a3[2];
  if (*(_DWORD *)(v5 + 104) == *((_DWORD *)v6 + 26) && *(_DWORD *)(v5 + 108) == *((_DWORD *)v6 + 27))
  {
    v7 = (uint64_t *)v6[1];
    if (v7 == v6)
    {
      *a4 = (uint64_t **)v5;
      v68 = v6[2];
      result = 0;
      if (v68)
        v6 = *(uint64_t **)(v68 + 24);
      goto LABEL_78;
    }
    v8 = (uint64_t *)*v6;
    *v7 = *v6;
    v8[1] = (uint64_t)v7;
    if (v6 == *a3)
    {
      v9 = *((_DWORD *)v8 + 26);
      v10 = *((_DWORD *)v7 + 26);
      v11 = v8;
      if (v9 >= v10)
      {
        if (v9 != v10 || (v11 = v8, *((_DWORD *)v8 + 27) >= *((_DWORD *)v7 + 27)))
          v11 = v7;
      }
      *a3 = v11;
    }
    if (v6 == a3[1])
    {
      v12 = *((_DWORD *)v8 + 26);
      v13 = *((_DWORD *)v7 + 26);
      if (v12 <= v13 && (v12 != v13 || *((_DWORD *)v8 + 27) <= *((_DWORD *)v7 + 27)))
        v8 = v7;
      a3[1] = v8;
    }
  }
  v14 = 0;
  v15 = 0;
  v17 = *a2;
  v16 = a2[1];
  v19 = *a3;
  v18 = a3[1];
  v20 = 1;
  v21 = 1;
  v22 = v18;
  v23 = v16;
  do
  {
    v24 = (uint64_t **)v15;
    v6 = v14;
    v25 = v20;
    v26 = *(_DWORD *)(v23 + 104);
    v27 = (*((_DWORD *)v22 + 26) - v26) * v21;
    if (v27 < 1)
    {
      if (v27 < 0)
      {
        v14 = v22;
        while (1)
        {
          v15 = v23;
          v52 = *(_DWORD *)(v23 + 108);
          v53 = v27;
          while (1)
          {
            v54 = *((_DWORD *)v14 + 27);
            v55 = v54 - v52;
            v56 = v14 + 1;
            if ((v25 & 1) != 0)
              v56 = v14;
            v57 = (uint64_t *)*v56;
            if (v57 == v14)
              break;
            v58 = *((_DWORD *)v57 + 27) - v54;
            if (v58 < 0)
              break;
            v59 = *((_DWORD *)v57 + 26);
            v60 = *((_DWORD *)v14 + 26);
            if (v59 != v60)
            {
              v61 = (v59 - v60) * v21;
              if ((v61 & 0x80000000) == 0 || v58 * v53 > v61 * v55)
                break;
            }
            v53 = (v59 - *(_DWORD *)(v15 + 104)) * v21;
            v14 = v57;
          }
          v62 = (uint64_t *)(v15 + 8);
          if ((v25 & 1) != 0)
            v62 = (uint64_t *)v15;
          v23 = *v62;
          if (v23 == v15)
            break;
          v63 = *(_DWORD *)(v23 + 104);
          v27 = (*((_DWORD *)v14 + 26) - v63) * v21;
          if ((v27 & 0x80000000) == 0)
            break;
          v64 = *(_DWORD *)(v23 + 108) - v52;
          if (v64 < 1)
            break;
          v65 = *(_DWORD *)(v15 + 104);
          if (v63 != v65)
          {
            v66 = (v63 - v65) * v21;
            if ((v66 & 0x80000000) == 0 || v64 * v53 >= v66 * v55)
              break;
          }
        }
      }
      else
      {
        v45 = *(_DWORD *)(v23 + 108);
        v46 = v23;
        do
        {
          v15 = v46;
          v47 = (uint64_t *)(v46 + 8);
          if ((v25 & 1) == 0)
            v47 = (uint64_t *)v15;
          v46 = *v47;
          if (v46 == v23)
            break;
          if (*(_DWORD *)(v46 + 104) != v26)
            break;
          v48 = *(_DWORD *)(v46 + 108) <= v45;
          v45 = *(_DWORD *)(v46 + 108);
        }
        while (v48);
        v49 = *((_DWORD *)v22 + 27);
        v50 = v22;
        do
        {
          v14 = v50;
          v51 = v50 + 1;
          if ((v25 & 1) != 0)
            v51 = v14;
          v50 = (uint64_t *)*v51;
          if (v50 == v22)
            break;
          if (*((_DWORD *)v50 + 26) != v26)
            break;
          v48 = *((_DWORD *)v50 + 27) < v49;
          v49 = *((_DWORD *)v50 + 27);
        }
        while (!v48);
      }
    }
    else
    {
LABEL_18:
      v28 = *(_DWORD *)(v23 + 108);
      v29 = (uint64_t *)(v23 + 8);
      if ((v25 & 1) == 0)
        v29 = (uint64_t *)v23;
      v30 = *v29;
      v31 = v22;
      while (1)
      {
        v32 = v27;
        v22 = v31;
        v33 = *((_DWORD *)v31 + 27);
        v34 = v33 - v28;
        if (v30 != v23)
        {
          v35 = *(_DWORD *)(v30 + 108);
          v36 = v35 - v28;
          if (v35 <= v28)
          {
            v37 = *(_DWORD *)(v30 + 104);
            v38 = *(_DWORD *)(v23 + 104);
            if (v37 == v38 || (v39 = (v37 - v38) * v21, v39 < 0) && v36 * v32 <= v39 * v34)
            {
              v27 = (*((_DWORD *)v22 + 26) - v37) * v21;
              v23 = v30;
              goto LABEL_18;
            }
          }
        }
        v40 = v22 + 1;
        if ((v25 & 1) == 0)
          v40 = v22;
        v31 = (uint64_t *)*v40;
        if ((uint64_t *)*v40 == v22)
          break;
        v41 = *((_DWORD *)v31 + 26);
        v27 = (v41 - *(_DWORD *)(v23 + 104)) * v21;
        if (v27 < 1)
          break;
        v42 = *((_DWORD *)v31 + 27) - v33;
        if ((v42 & 0x80000000) == 0)
          break;
        v43 = *((_DWORD *)v22 + 26);
        if (v41 != v43)
        {
          v44 = (v41 - v43) * v21;
          if ((v44 & 0x80000000) == 0 || v42 * v32 >= v44 * v34)
            break;
        }
      }
      v15 = v23;
      v14 = v22;
    }
    v20 = 0;
    v21 = -1;
    v22 = *a3;
    v23 = *a2;
  }
  while ((v25 & 1) != 0);
  *(_QWORD *)(v15 + 8) = v14;
  *v14 = v15;
  *v24 = v6;
  v6[1] = (uint64_t)v24;
  if (*((_DWORD *)v19 + 26) < *(_DWORD *)(v17 + 104))
    *a2 = (uint64_t)v19;
  if (*((_DWORD *)v18 + 26) >= *(_DWORD *)(v16 + 104))
    a2[1] = (uint64_t)v18;
  a2[3] = (uint64_t)a3[3];
  *a4 = v24;
  result = 1;
LABEL_78:
  *a5 = v6;
  return result;
}

void btConvexHullInternal::computeInternal(btConvexHullInternal *a1, int a2, int a3, uint64_t a4)
{
  int v5;
  uint64_t v7;
  btConvexHullInternal::Vertex *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  _BOOL4 v14;
  _BOOL4 v15;
  BOOL v16;
  int v17;
  _BOOL4 v18;
  int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  _DWORD *v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  _DWORD *v36;
  int v37;
  int v38;
  BOOL v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _OWORD v43[2];

  v5 = a3 - a2;
  if (a3 == a2)
  {
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
  else if (v5 == 2)
  {
    v7 = *(_QWORD *)(*((_QWORD *)a1 + 18) + 8 * a2);
    v8 = (btConvexHullInternal::Vertex *)(v7 + 128);
    v10 = *(_DWORD *)(v7 + 104);
    v9 = *(_DWORD *)(v7 + 108);
    v12 = *(_DWORD *)(v7 + 232);
    v11 = *(_DWORD *)(v7 + 236);
    if (v10 == v12 && v9 == v11)
    {
      v37 = *(_DWORD *)(v7 + 112);
      v38 = *(_DWORD *)(v7 + 240);
      v39 = v37 <= v38;
      if (v37 == v38)
        goto LABEL_5;
      v40 = v37 > v38;
      if (v39)
        v24 = *(_QWORD *)(*((_QWORD *)a1 + 18) + 8 * a2);
      else
        v24 = v7 + 128;
      *(_QWORD *)(v7 + ((unint64_t)v40 << 7)) = v7 + (v40 << 7);
      *(_QWORD *)(v24 + 8) = v24;
      if (!v39)
        v8 = (btConvexHullInternal::Vertex *)v7;
      *(_QWORD *)a4 = v24;
      *(_QWORD *)(a4 + 8) = v24;
      v25 = v24;
      v7 = v24;
    }
    else
    {
      v14 = v10 == v12;
      v15 = v10 != v12;
      if (v9 != v11)
        v15 = 0;
      if (v9 >= v11)
        v14 = 0;
      v16 = v10 < v12;
      v17 = v10 < v12 || v14;
      v18 = v16 && v15;
      *(_QWORD *)v7 = v8;
      *(_QWORD *)(v7 + 8) = v8;
      *(_QWORD *)(v7 + 128) = v7;
      *(_QWORD *)(v7 + 136) = v7;
      v19 = v9 < v11 || v18;
      v20 = v17 == 0;
      if (v17)
        v21 = v7;
      else
        v21 = v7 + 128;
      if (v20)
        v22 = v7;
      else
        v22 = v7 + 128;
      *(_QWORD *)a4 = v21;
      *(_QWORD *)(a4 + 8) = v22;
      v23 = v19 == 0;
      if (v19)
        v24 = v7;
      else
        v24 = v7 + 128;
      if (v23)
        v25 = v7;
      else
        v25 = v7 + 128;
    }
    *(_QWORD *)(a4 + 16) = v24;
    *(_QWORD *)(a4 + 24) = v25;
    v41 = (_QWORD *)btConvexHullInternal::newEdgePair(a1, (btConvexHullInternal::Vertex *)v7, v8);
    *v41 = v41;
    v41[1] = v41;
    *(_QWORD *)(v7 + 16) = v41;
    v42 = (_QWORD *)v41[2];
    *v42 = v42;
    v42[1] = v42;
    *((_QWORD *)v8 + 2) = v42;
  }
  else
  {
    if (v5 == 1)
    {
      v7 = *(_QWORD *)(*((_QWORD *)a1 + 18) + 8 * a2);
LABEL_5:
      *(_QWORD *)(v7 + 8) = v7;
      *(_QWORD *)(v7 + 16) = 0;
      *(_QWORD *)v7 = v7;
      *(_QWORD *)a4 = v7;
      *(_QWORD *)(a4 + 8) = v7;
      *(_QWORD *)(a4 + 16) = v7;
      *(_QWORD *)(a4 + 24) = v7;
      return;
    }
    v27 = v5 + (v5 < 0);
    v28 = a2 + (a3 - a2) / 2;
    if (v28 < a3)
    {
      v29 = v27 >> 1;
      v30 = *((_QWORD *)a1 + 18);
      v31 = *(_DWORD **)(v30 + 8 * (v28 - 1));
      v32 = v31[26];
      v33 = v31[27];
      v34 = v31[28];
      v35 = v29 + (uint64_t)a2;
      do
      {
        v36 = *(_DWORD **)(v30 + 8 * v35);
        if (v36[26] != v32)
          break;
        if (v36[27] != v33)
          break;
        if (v36[28] != v34)
          break;
        ++v35;
      }
      while (v35 < a3);
    }
    btConvexHullInternal::computeInternal(a1);
    memset(v43, 0, sizeof(v43));
    btConvexHullInternal::computeInternal(a1);
    btConvexHullInternal::merge(a1, a4, (uint64_t)v43);
  }
}

void btConvexHullInternal::merge(btConvexHullInternal *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  __int128 *v16;
  uint64_t v17;
  uint64_t *v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int Orientation;
  uint64_t *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t **v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t *v42;
  uint64_t **v43;
  char v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t MaxAngle;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t **v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t **v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t **v65;
  uint64_t **v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t **v69;
  uint64_t v70;
  uint64_t **v71;
  _QWORD *v72;
  uint64_t ***v73;
  _QWORD *v74;
  uint64_t *v75;
  uint64_t *v76;
  BOOL v77;
  uint64_t *v78;
  _QWORD *v79;
  uint64_t **v80;
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t *v84;
  uint64_t *v85;
  uint64_t *v86;
  int v87;
  _QWORD *v88;
  uint64_t v89;
  int *v90;
  uint64_t **v91;
  uint64_t *v92;
  uint64_t *v93;
  uint64_t *v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t **v98;
  uint64_t *v99;
  uint64_t *v100;
  int v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  __int128 v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  _QWORD v116[2];
  uint64_t *v117;
  uint64_t **v118;

  if (!*(_QWORD *)(a3 + 8))
    return;
  if (!*(_QWORD *)(a2 + 8))
  {
    v31 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)(a2 + 16) = v31;
    return;
  }
  --*((_DWORD *)a1 + 40);
  v117 = 0;
  v118 = 0;
  if (btConvexHullInternal::mergeProjection((uint64_t)a1, (uint64_t *)a2, (uint64_t **)a3, &v118, &v117))
  {
    v101 = *((_DWORD *)v117 + 27);
    v102 = *((_DWORD *)v117 + 26);
    v5 = *((int *)v118 + 26);
    v4 = *((int *)v118 + 27);
    v6 = v102 - v5;
    v7 = v101;
    v8 = v101 - v4;
    v90 = (int *)v118;
    v92 = v117;
    v87 = *((_DWORD *)v117 + 28);
    v9 = *((int *)v118 + 28);
    v10 = v87 - v9;
    v11 = v5 - v102;
    v12 = v10 * v6;
    v113 = (v102 - v5) | ((unint64_t)v8 << 32);
    v114 = v10 | 0xFFFFFFFF00000000;
    v13 = v8 * v10;
    v14 = -(v6 * (int)v6) - v8 * v8;
    v15 = v118[2];
    v108 = 0;
    v16 = &xmmword_1DD02D000;
    v97 = v12;
    v17 = 0;
    if (v15)
    {
      v18 = v15;
      v94 = v15;
      do
      {
        v19 = (int *)v18[3];
        v20 = v19[26] - v5;
        v21 = v19[27] - v4;
        if (!(v21 * v11 + v8 * v20) && v20 * v12 + v13 * v21 + v14 * (v19[28] - v9) >= 1)
        {
          if (!v17)
            goto LABEL_11;
          v111 = xmmword_1DD02D050;
          v22 = v14;
          v23 = v13;
          v24 = v9;
          v25 = v8;
          v26 = v11;
          v27 = v4;
          Orientation = btConvexHullInternal::getOrientation((_QWORD *)v17, (uint64_t)v18, &v113, &v111);
          v4 = v27;
          v11 = v26;
          v8 = v25;
          v9 = v24;
          v13 = v23;
          v14 = v22;
          v12 = v97;
          v7 = v101;
          v77 = Orientation == 1;
          v15 = v94;
          if (v77)
LABEL_11:
            v17 = (uint64_t)v18;
        }
        v18 = (uint64_t *)*v18;
      }
      while (v18 != v15);
      v108 = v17;
      v29 = v92;
      v30 = v102;
      v16 = &xmmword_1DD02D000;
    }
    else
    {
      v29 = v117;
      v30 = v102;
    }
    v34 = (_QWORD *)v29[2];
    v105 = 0;
    v35 = 0;
    if (v34)
    {
      v95 = v16[5];
      v36 = v34;
      do
      {
        v37 = (int *)v36[3];
        v38 = v37[26] - v30;
        v39 = v37[27] - v7;
        if (!(v39 * v11 + v8 * v38) && v38 * v12 + v13 * v39 + v14 * (v37[28] - (uint64_t)v87) >= 1)
        {
          if (!v35
            || (v111 = v95,
                v40 = btConvexHullInternal::getOrientation((_QWORD *)v35, (uint64_t)v36, &v113, &v111),
                v12 = v97,
                v7 = v101,
                v40 == 2))
          {
            v35 = (uint64_t)v36;
          }
        }
        v36 = (_QWORD *)*v36;
      }
      while (v36 != v34);
      v105 = v35;
      v29 = v92;
    }
    v32 = (uint64_t **)v90;
    if (!(v17 | v35))
      goto LABEL_31;
    btConvexHullInternal::findEdgeForCoplanarFaces((uint64_t)a1, v90, (int *)v29, &v108, &v105, 0, 0);
    if (v108)
    {
      v32 = *(uint64_t ***)(v108 + 24);
      v118 = v32;
    }
    if (v105)
    {
      v29 = *(uint64_t **)(v105 + 24);
      v117 = v29;
      v102 = *((_DWORD *)v29 + 26);
      v101 = *((_DWORD *)v29 + 27);
      v41 = *((_DWORD *)v29 + 28);
    }
    else
    {
LABEL_31:
      v41 = v87;
    }
    v33 = (v41 + 1);
  }
  else
  {
    v29 = v117;
    v32 = v118;
    v33 = *((unsigned int *)v117 + 28);
    v101 = *((_DWORD *)v117 + 27);
    v102 = *((_DWORD *)v117 + 26) + 1;
  }
  v42 = 0;
  v98 = 0;
  v99 = 0;
  v88 = 0;
  v89 = 0;
  v100 = 0;
  v43 = 0;
  v93 = v29;
  v96 = 0;
  v44 = 1;
  v91 = v32;
  v45 = v29;
  while (1)
  {
    v46 = *((int *)v32 + 26);
    v47 = *((int *)v32 + 27);
    v48 = *((int *)v45 + 26) - v46;
    v49 = *((int *)v45 + 27) - v47;
    v50 = *((int *)v32 + 28);
    v51 = *((int *)v45 + 28) - v50;
    LODWORD(v46) = v102 - v46;
    LODWORD(v47) = v101 - v47;
    v52 = v33;
    LODWORD(v50) = v33 - v50;
    v116[0] = v48 | ((unint64_t)v49 << 32);
    v116[1] = v51 | 0xFFFFFFFF00000000;
    v113 = (int)v51 * (int)v47 - (int)v49 * (int)v50;
    v114 = (int)v48 * (int)v50 - (int)v51 * (int)v46;
    v115 = (int)v49 * (int)v46 - (int)v48 * (int)v47;
    *(_QWORD *)&v111 = v115 * v49 - v114 * v51;
    *((_QWORD *)&v111 + 1) = v113 * v51 - v115 * v48;
    v112 = v114 * v48 - v113 * v49;
    v108 = 0;
    v109 = 0;
    v110 = 0;
    MaxAngle = (uint64_t)btConvexHullInternal::findMaxAngle((uint64_t)a1, 0, (uint64_t)v32, v116, &v113, &v111, (uint64_t)&v108);
    v105 = 0;
    v106 = 0;
    v107 = 0;
    v54 = (uint64_t)btConvexHullInternal::findMaxAngle((uint64_t)a1, 1, (uint64_t)v45, v116, &v113, &v111, (uint64_t)&v105);
    if (!(MaxAngle | v54))
    {
      v78 = (uint64_t *)btConvexHullInternal::newEdgePair(a1, (btConvexHullInternal::Vertex *)v32, (btConvexHullInternal::Vertex *)v45);
      *v78 = (uint64_t)v78;
      v78[1] = (uint64_t)v78;
      v32[2] = v78;
      v79 = (_QWORD *)v78[2];
      *v79 = v79;
      v79[1] = v79;
      v45[2] = (uint64_t)v79;
      return;
    }
    v55 = v54;
    if (MaxAngle)
      v56 = -1;
    else
      v56 = 1;
    if (MaxAngle && v54)
      v56 = btConvexHullInternal::Rational64::compare((uint64_t)&v108, (uint64_t)&v105);
    if ((v44 & 1) != 0)
      goto LABEL_42;
    if ((v56 & 0x80000000) == 0)
    {
      if ((v107 & 0x80000000) == 0 || v106)
      {
LABEL_42:
        v57 = v43;
        v58 = (uint64_t *)btConvexHullInternal::newEdgePair(a1, (btConvexHullInternal::Vertex *)v32, (btConvexHullInternal::Vertex *)v45);
        v59 = v58;
        v60 = (uint64_t **)v58;
        if (v42)
        {
          v42[1] = (uint64_t)v58;
          v60 = v57;
        }
        *v58 = (uint64_t)v42;
        v61 = (uint64_t *)v58[2];
        v62 = v61;
        if (v100)
        {
          *v100 = (uint64_t)v61;
          v62 = v99;
        }
        v61[1] = (uint64_t)v100;
        v63 = v62;
      }
      else
      {
        v60 = v43;
        v59 = v42;
        v63 = v99;
        v61 = v100;
      }
      v103 = v55;
      v104 = MaxAngle;
      v64 = v55;
      if (v56)
      {
        if (v56 < 0)
          goto LABEL_61;
      }
      else
      {
        v65 = v60;
        btConvexHullInternal::findEdgeForCoplanarFaces((uint64_t)a1, (int *)v118, (int *)v117, &v104, &v103, 0, 0);
        v60 = v65;
        v64 = v103;
      }
      if (!v64)
      {
LABEL_61:
        v100 = v61;
LABEL_69:
        v69 = v91;
        goto LABEL_70;
      }
      if (v98)
      {
        v66 = v60;
        v67 = *v98;
        if (*v98 != (uint64_t *)v55)
        {
          do
          {
            v68 = (uint64_t *)*v67;
            btConvexHullInternal::removeEdgePair((uint64_t)a1, v67);
            v67 = v68;
          }
          while (v68 != (uint64_t *)v55);
        }
        v60 = v66;
        if (!v61)
        {
          v55 = v89;
LABEL_68:
          v102 = *((_DWORD *)v117 + 26);
          v52 = *((unsigned int *)v117 + 28);
          v100 = 0;
          v101 = *((_DWORD *)v117 + 27);
          v98 = *(uint64_t ***)(v64 + 16);
          v117 = *(uint64_t **)(v64 + 24);
          v89 = v55;
          goto LABEL_69;
        }
      }
      else
      {
        if (!v61)
          goto LABEL_68;
        v98 = *(uint64_t ***)(v55 + 8);
        v89 = (uint64_t)v63;
      }
      *v98 = v63;
      v63[1] = (uint64_t)v98;
      v63 = 0;
      *v61 = v55;
      *(_QWORD *)(v55 + 8) = v61;
      v55 = v89;
      v64 = v103;
      goto LABEL_68;
    }
    if ((v110 & 0x80000000) == 0 || v109)
      goto LABEL_42;
    v104 = MaxAngle;
    v60 = v43;
    v59 = v42;
    v69 = v91;
    v63 = v99;
LABEL_70:
    if (v56 > 0 || (v70 = v104) == 0)
    {
      v32 = v118;
      v75 = v93;
      v33 = v52;
      goto LABEL_84;
    }
    if (v96)
    {
      v71 = v60;
      v73 = (uint64_t ***)(v96 + 8);
      v72 = *(_QWORD **)(v96 + 8);
      if (v72 != (_QWORD *)MaxAngle)
      {
        do
        {
          v74 = (_QWORD *)v72[1];
          btConvexHullInternal::removeEdgePair((uint64_t)a1, v72);
          v72 = v74;
        }
        while (v74 != (_QWORD *)MaxAngle);
      }
      if (!v59)
      {
        v75 = v93;
        v60 = v71;
        goto LABEL_83;
      }
      v60 = v71;
      *v71 = (uint64_t *)v96;
    }
    else
    {
      if (!v59)
      {
        v88 = (_QWORD *)MaxAngle;
        goto LABEL_81;
      }
      v76 = *(uint64_t **)MaxAngle;
      *v60 = *(uint64_t **)MaxAngle;
      v73 = (uint64_t ***)(v76 + 1);
      v88 = v60;
    }
    *v73 = v60;
    *(_QWORD *)MaxAngle = v59;
    v59[1] = MaxAngle;
    v70 = v104;
    v60 = 0;
LABEL_81:
    v75 = v93;
LABEL_83:
    v59 = 0;
    v102 = *((_DWORD *)v118 + 26);
    v33 = *((unsigned int *)v118 + 28);
    v101 = *((_DWORD *)v118 + 27);
    v32 = *(uint64_t ***)(v70 + 24);
    v96 = *(_QWORD *)(v70 + 16);
    v118 = v32;
LABEL_84:
    v45 = v117;
    v77 = v32 == v69 && v117 == v75;
    if (v77)
      break;
    v99 = v63;
    v44 = 0;
    v42 = v59;
    v43 = v60;
  }
  if (v96)
  {
    v80 = v60;
    v81 = *(_QWORD **)(v96 + 8);
    v82 = v100;
    if (v81 != v88)
    {
      do
      {
        v83 = (_QWORD *)v81[1];
        btConvexHullInternal::removeEdgePair((uint64_t)a1, v81);
        v81 = v83;
      }
      while (v83 != v88);
    }
    v84 = (uint64_t *)v89;
    if (v59)
    {
      *v80 = (uint64_t *)v96;
      *(_QWORD *)(v96 + 8) = v80;
      *v88 = v59;
      v59[1] = (uint64_t)v88;
    }
  }
  else
  {
    *v60 = v59;
    v59[1] = (uint64_t)v60;
    v118[2] = v59;
    v84 = (uint64_t *)v89;
    v82 = v100;
  }
  if (v98)
  {
    v85 = *v98;
    if (*v98 != v84)
    {
      do
      {
        v86 = (uint64_t *)*v85;
        btConvexHullInternal::removeEdgePair((uint64_t)a1, v85);
        v85 = v86;
      }
      while (v86 != v84);
    }
    if (v82)
    {
      *v98 = v63;
      v63[1] = (uint64_t)v98;
      *v82 = v84;
      v84[1] = (uint64_t)v82;
    }
  }
  else
  {
    *v82 = v63;
    v63[1] = (uint64_t)v82;
    v117[2] = (uint64_t)v82;
  }
}

uint64_t btConvexHullInternal::getOrientation(_QWORD *a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v4;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  int v16;
  int v17;

  v4 = a1[1];
  if (*a1 != a2)
    return v4 == a2;
  if (v4 != a2)
    return 2;
  v7 = a3[1];
  v6 = a3[2];
  v9 = a4[1];
  v8 = a4[2];
  v10 = v6 * v9 - v7 * v8;
  v11 = *a3 * v8 - *a4 * v6;
  v12 = *a4 * v7 - *a3 * v9;
  v13 = (_DWORD *)a1[3];
  v14 = *(_DWORD **)(a2 + 24);
  v15 = *(_DWORD **)(*(_QWORD *)(a2 + 16) + 24);
  v16 = v15[26];
  v17 = v15[27];
  LODWORD(v15) = v15[28];
  if (((v14[28] - (int)v15) * (v13[27] - v17) - (v14[27] - v17) * (v13[28] - (int)v15)) * (uint64_t)v10
     + ((v14[27] - v17) * (v13[26] - v16) - (v14[26] - v16) * (v13[27] - v17)) * (uint64_t)v12
     + ((v14[26] - v16) * (v13[28] - (int)v15) - (v14[28] - (int)v15) * (v13[26] - v16)) * (uint64_t)v11 <= 0)
    return 1;
  else
    return 2;
}

_QWORD *btConvexHullInternal::findMaxAngle(uint64_t a1, int a2, uint64_t a3, _DWORD *a4, _QWORD *a5, _QWORD *a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  int v23;
  uint64_t v24;
  int v25;
  __int128 v27;
  int v28;
  _QWORD v29[2];

  v7 = *(_QWORD *)(a3 + 16);
  if (v7)
  {
    v15 = 0;
    v16 = *(_QWORD *)(a3 + 16);
    while (*(_DWORD *)(v16 + 40) <= *(_DWORD *)(a1 + 160))
    {
LABEL_19:
      v16 = *(_QWORD *)v16;
      if (v16 == v7)
        return v15;
    }
    v17 = *(int **)(v16 + 24);
    v18 = v17[26] - (uint64_t)*(int *)(a3 + 104);
    v19 = v17[27] - (uint64_t)*(int *)(a3 + 108);
    v20 = v17[28] - (uint64_t)*(int *)(a3 + 112);
    v29[0] = v18 | ((unint64_t)v19 << 32);
    v29[1] = v20 | 0xFFFFFFFF00000000;
    v21 = *a6 * v18 + a6[1] * v19 + a6[2] * v20;
    if (v21 < 1)
    {
      if (v21 < 0)
      {
        v22 = 0;
        v28 = -1;
        v21 = -v21;
        v23 = 1;
      }
      else
      {
        v21 = 0;
        v23 = 0;
        v28 = 0;
        v22 = 1;
      }
    }
    else
    {
      v22 = 0;
      v28 = 1;
      v23 = -1;
    }
    v24 = *a5 * v18 + a5[1] * v19 + a5[2] * v20;
    *(_QWORD *)&v27 = v21;
    if (v24 <= 0)
    {
      if ((v24 & 0x8000000000000000) == 0)
      {
        *((_QWORD *)&v27 + 1) = 0;
        if ((v22 & 1) != 0)
        {
LABEL_18:
          v7 = *(_QWORD *)(a3 + 16);
          goto LABEL_19;
        }
LABEL_11:
        if (!v15 || (v25 = btConvexHullInternal::Rational64::compare((uint64_t)&v27, a7), v25 < 0))
        {
          *(_OWORD *)a7 = v27;
          *(_DWORD *)(a7 + 16) = v28;
          v15 = (_QWORD *)v16;
        }
        else if (!v25 && (btConvexHullInternal::getOrientation(v15, v16, a4, v29) != 2) != a2)
        {
          v15 = (_QWORD *)v16;
        }
        goto LABEL_18;
      }
      v28 = v23;
      v24 = -v24;
    }
    *((_QWORD *)&v27 + 1) = v24;
    goto LABEL_11;
  }
  return 0;
}

uint64_t btConvexHullInternal::findEdgeForCoplanarFaces(uint64_t a1, int *a2, int *a3, uint64_t *a4, uint64_t *a5, unsigned int *a6, unsigned int *a7)
{
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  signed int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int **v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int **v45;
  int *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t result;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  _DWORD *v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  BOOL v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  int v92;
  unsigned int *v93;
  int v94;
  uint64_t v95;
  unsigned int *v97;
  int *v98;
  int v99;
  unsigned int *v101;
  uint64_t v102;
  int *v103;
  int v104;
  int v105;
  signed int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _DWORD *v110;
  int v111;
  signed int v112;
  int v113;
  uint64_t v114;
  unint64_t v115;
  BOOL v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _DWORD *v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  BOOL v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  int v139;
  _DWORD *v140;
  unsigned int *v141;
  uint64_t v142;
  int v143;
  int v144;
  int v145;
  uint64_t *v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  int v152;
  int v153;
  unsigned int v154;
  signed int v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  uint64_t v159;
  int v160;
  uint64_t v164;
  uint64_t v165;
  int v166;
  unint64_t v167;
  uint64_t v168;
  int v169;

  v9 = *a5;
  v10 = (unsigned int *)a2;
  if (*a4)
    v10 = *(unsigned int **)(*a4 + 24);
  v147 = *a4;
  v11 = v10[26];
  v12 = v10[27];
  v13 = v10[28];
  v14 = (unsigned int *)a3;
  if (v9)
    v14 = *(unsigned int **)(v9 + 24);
  v15 = v14[26];
  v16 = v14[27];
  v17 = v14[28];
  v18 = a2[26];
  v19 = a2[27];
  v20 = a3[26] - v18;
  v21 = a3[27] - v19;
  v22 = a2[28];
  v23 = a3[28] - v22;
  if (v147)
    v24 = *a4;
  else
    v24 = v9;
  v25 = *(_DWORD **)(v24 + 24);
  v26 = v25[26] - v18;
  v27 = v25[27] - v19;
  LODWORD(v25) = v25[28] - v22;
  v28 = v27 * (int)v23 - (int)v25 * (int)v21;
  v29 = (int)v25 * (int)v20 - v26 * (int)v23;
  v30 = v26 * (int)v21 - v27 * (int)v20;
  v31 = (int)v22 * v30 + (int)v18 * v28 + (int)v19 * v29;
  v32 = v30 * v21 - v29 * v23;
  v33 = v28 * v23 - v30 * v20;
  v34 = v29 * v20 - v28 * v21;
  v35 = v32 * (int)v11 + v33 * (int)v12 + v34 * (int)v13;
  v156 = v34;
  v146 = a5;
  if (!v147 || *(unsigned int **)(v147 + 24) == a6)
  {
    v42 = v9;
  }
  else
  {
    v36 = *(_QWORD *)(*(_QWORD *)(v147 + 16) + 8);
    v38 = *(int **)(v36 + 24);
    v37 = (unsigned int **)(v36 + 24);
    v39 = v38[26];
    v40 = v38[27];
    v41 = v38[28];
    if ((int)v39 * (uint64_t)(int)v28 + (int)v40 * (uint64_t)(int)v29 + (int)v41 * (uint64_t)(int)v30 >= v31)
    {
      v94 = *(_DWORD *)(a1 + 160);
      do
      {
        v95 = v32 * v39 + v33 * v40 + v34 * v41;
        if (*(_DWORD *)(v36 + 40) == v94 || v95 <= v35)
          break;
        v35 = v95;
        *a4 = v36;
        v97 = *v37;
        v11 = v97[26];
        v12 = v97[27];
        v13 = v97[28];
        if (v97 == a6)
          break;
        v36 = *(_QWORD *)(*(_QWORD *)(v36 + 16) + 8);
        v37 = (unsigned int **)(v36 + 24);
        v98 = *(int **)(v36 + 24);
        v39 = v98[26];
        v40 = v98[27];
        v41 = v98[28];
      }
      while ((int)v39 * (uint64_t)(int)v28 + (int)v40 * (uint64_t)(int)v29 + (int)v41 * (uint64_t)(int)v30 >= v31);
    }
    v42 = *a5;
    v34 = v29 * v20 - v28 * v21;
  }
  v43 = v32 * (int)v15 + v33 * v16 + v34 * (int)v17;
  if (v42)
  {
    if (*(unsigned int **)(v42 + 24) == a7
      || (v44 = **(_QWORD **)(v42 + 16),
          v46 = *(int **)(v44 + 24),
          v45 = (unsigned int **)(v44 + 24),
          v47 = v46[26],
          v48 = v46[27],
          v49 = v46[28],
          (int)v47 * (uint64_t)(int)v28 + (int)v48 * (uint64_t)(int)v29 + (int)v49 * (uint64_t)(int)v30 < v31))
    {
LABEL_16:
      result = v42;
    }
    else
    {
      v99 = *(_DWORD *)(a1 + 160);
      do
      {
        result = v42;
        v42 = v44;
        if (*(_DWORD *)(v44 + 40) == v99 || v32 * v47 + v33 * v48 + v34 * v49 <= v43)
          break;
        v43 = v32 * v47 + v33 * v48 + v34 * v49;
        *v146 = v44;
        v101 = *v45;
        v15 = v101[26];
        v16 = v101[27];
        v17 = v101[28];
        if (v101 == a7)
          goto LABEL_16;
        v44 = **(_QWORD **)(v44 + 16);
        v102 = **(_QWORD **)(v42 + 16);
        v103 = *(int **)(v102 + 24);
        v45 = (unsigned int **)(v102 + 24);
        v47 = v103[26];
        v48 = v103[27];
        v49 = v103[28];
        result = v42;
      }
      while ((int)v47 * (uint64_t)(int)v28 + (int)v48 * (uint64_t)(int)v29 + (int)v49 * (uint64_t)(int)v30 >= v31);
    }
  }
  else
  {
    result = 0;
  }
  v51 = v43 - v35;
  v152 = v21;
  v153 = v20;
  v150 = v30 * v21 - v29 * v23;
  v151 = v23;
  v144 = v29;
  v145 = v28;
  v143 = v30;
  v149 = v28 * v23 - v30 * v20;
  if (v43 - v35 < 1)
  {
    if ((v51 & 0x8000000000000000) == 0)
      return result;
    v104 = v15;
    v105 = v17;
    v106 = v16;
    v107 = v43 - v35;
    v142 = v9;
LABEL_97:
    v158 = v105;
    v160 = v104;
    v155 = v106;
    while (1)
    {
      v108 = (v104 - (int)v11) * (int)v20 + (v106 - (int)v12) * (int)v21 + (v105 - (int)v13) * (int)v23;
      if (result)
      {
        if (*(unsigned int **)(result + 24) != a7)
        {
          v109 = *(_QWORD *)(*(_QWORD *)(result + 8) + 16);
          if (*(_DWORD *)(v109 + 40) > *(_DWORD *)(a1 + 160))
          {
            v110 = *(_DWORD **)(v109 + 24);
            v111 = v110[26];
            v112 = v110[27];
            v113 = v110[28];
            v114 = v32 * (v111 - v104) + v33 * (v112 - v106) + v34 * (v113 - v105);
            v115 = (v111 - v104) * (int)v20 + (v112 - v106) * (int)v21 + (v113 - v105) * (int)v23;
            if (v114)
            {
              if (v114 < 0)
              {
                v116 = (int)v115 <= 0;
                if ((v115 & 0x80000000) != 0)
                  v117 = -(uint64_t)v115;
                else
                  v117 = 0;
                v118 = (v115 >> 31) & 1;
                if ((int)v115 <= 0)
                  v115 = v117;
                if (v116)
                  v119 = v118;
                else
                  v119 = -1;
                v169 = v119;
                v167 = v115;
                v168 = -v114;
                v148 = v111;
                if ((int)v108 < 1)
                {
                  if ((v108 & 0x80000000) != 0)
                  {
                    v166 = -1;
                    v121 = -v108;
                    v120 = 1;
                  }
                  else
                  {
                    v121 = 0;
                    v120 = 0;
                    v166 = 0;
                  }
                }
                else
                {
                  v166 = 1;
                  v120 = -1;
                  v121 = (v104 - (int)v11) * (int)v20 + (v106 - (int)v12) * (int)v21 + (v105 - (int)v13) * (int)v23;
                }
                v122 = result;
                v164 = v121;
                v123 = v107;
                if (v107 <= 0)
                {
                  if (v107 < 0)
                  {
                    v166 = v120;
                    v123 = -v107;
                  }
                  else
                  {
                    v123 = 0;
                  }
                }
                v165 = v123;
                v65 = (int)btConvexHullInternal::Rational64::compare((uint64_t)&v167, (uint64_t)&v164) < 1;
                LODWORD(v21) = v152;
                LODWORD(v20) = v153;
                v32 = v150;
                LODWORD(v23) = v151;
                v33 = v149;
                v34 = v156;
                v105 = v158;
                v104 = v160;
                v106 = v155;
                result = v122;
                v111 = v148;
                if (v65)
                {
LABEL_151:
                  v107 = v32 * (v111 - (int)v11) + v33 * (v112 - (int)v12) + v34 * (v113 - (int)v13);
                  if (result == v142)
                    result = 0;
                  else
                    result = v109;
                  *v146 = result;
                  v104 = v111;
                  v106 = v112;
                  v105 = v113;
                  goto LABEL_97;
                }
              }
            }
            else if ((int)v115 > 0)
            {
              goto LABEL_151;
            }
          }
        }
      }
      v124 = *a4;
      if (!*a4)
        return result;
      if (*(unsigned int **)(v124 + 24) == a6)
        return result;
      v125 = *(_QWORD *)(*(_QWORD *)(v124 + 16) + 8);
      if (*(_DWORD *)(v125 + 40) <= *(_DWORD *)(a1 + 160))
        return result;
      v126 = *(_DWORD **)(v125 + 24);
      v127 = v126[26];
      v128 = v126[27];
      v129 = v127 - v11;
      v130 = v128 - v12;
      v131 = v126[28];
      if (v145 * (uint64_t)(v127 - (int)v11) + v144 * (uint64_t)(v128 - (int)v12) + v143 * (uint64_t)(v131 - (int)v13))
        return result;
      v132 = v32 * (v104 - v127) + v33 * (v106 - v128) + v34 * (v105 - v131);
      if ((v132 & 0x8000000000000000) == 0)
        return result;
      v133 = v32 * v129 + v33 * v130 + v34 * (v131 - (int)v13);
      v134 = v129 * (int)v20 + v130 * (int)v21 + (v131 - (int)v13) * (int)v23;
      if (v133)
      {
        if ((v133 & 0x8000000000000000) == 0)
          return result;
        v135 = (int)v134 <= 0;
        if ((v134 & 0x80000000) != 0)
          v136 = -(uint64_t)v134;
        else
          v136 = 0;
        v137 = (v134 >> 31) & 1;
        if ((int)v134 <= 0)
          v134 = v136;
        if (v135)
          v138 = v137;
        else
          v138 = -1;
        v169 = v138;
        v167 = v134;
        v168 = -v133;
        if ((int)v108 < 1)
        {
          if ((v108 & 0x80000000) != 0)
          {
            v166 = -1;
            v108 = -v108;
            v139 = 1;
          }
          else
          {
            v108 = 0;
            v139 = 0;
            v166 = 0;
          }
        }
        else
        {
          v166 = 1;
          v139 = -1;
        }
        v164 = v108;
        if (v107 <= 0)
        {
          if (v107 < 0)
          {
            v166 = v139;
            v107 = -v107;
          }
          else
          {
            v107 = 0;
          }
        }
        v165 = v107;
        result = btConvexHullInternal::Rational64::compare((uint64_t)&v167, (uint64_t)&v164);
        LODWORD(v21) = v152;
        LODWORD(v20) = v153;
        v32 = v150;
        LODWORD(v23) = v151;
        v33 = v149;
        v34 = v156;
        v105 = v158;
        v104 = v160;
        v106 = v155;
        if ((result & 0x80000000) == 0)
          return result;
      }
      else if ((int)v134 <= 0)
      {
        return result;
      }
      *a4 = v125;
      v140 = *(_DWORD **)(v125 + 24);
      LODWORD(v11) = v140[26];
      LODWORD(v12) = v140[27];
      LODWORD(v13) = v140[28];
      result = *v146;
      v107 = v132;
    }
  }
  v141 = a7;
  v52 = v15;
  v53 = v17;
  v54 = v16;
  v55 = (_QWORD *)v147;
  while (1)
  {
    v56 = (_QWORD *)*a4;
    v154 = v54;
    while (1)
    {
      v57 = (int)((v52 - v11) * v20 + (v54 - v12) * v21 + (v53 - v13) * v23);
      if (!v56)
        break;
      if ((unsigned int *)v56[3] == a6)
        break;
      v58 = *(_QWORD *)(*v56 + 16);
      if (*(_DWORD *)(v58 + 40) <= *(_DWORD *)(a1 + 160))
        break;
      v59 = *(unsigned int **)(v58 + 24);
      v60 = v59[26];
      v61 = v59[27];
      v62 = v59[28];
      v63 = v32 * ((int)v60 - (int)v11) + v33 * ((int)v61 - (int)v12) + v34 * ((int)v62 - (int)v13);
      v64 = ((int)v60 - (int)v11) * (int)v20 + ((int)v61 - (int)v12) * (int)v21 + ((int)v62 - (int)v13) * (int)v23;
      if (v63)
      {
        if ((v63 & 0x8000000000000000) == 0)
          break;
        v157 = v12;
        v159 = v13;
        v65 = (int)v64 <= 0;
        if ((v64 & 0x80000000) != 0)
          v66 = -(uint64_t)v64;
        else
          v66 = 0;
        v67 = (v64 >> 31) & 1;
        if ((int)v64 <= 0)
          v64 = v66;
        if (v65)
          v68 = v67;
        else
          v68 = -1;
        v169 = v68;
        v167 = v64;
        v168 = -v63;
        v69 = v11;
        if ((int)v57 < 1)
        {
          if ((v57 & 0x80000000) != 0)
          {
            v166 = -1;
            v71 = -v57;
            v70 = 1;
          }
          else
          {
            v71 = 0;
            v70 = 0;
            v166 = 0;
          }
        }
        else
        {
          v166 = 1;
          v70 = -1;
          v71 = v57;
        }
        v72 = v53;
        v73 = v52;
        v164 = v71;
        v74 = v51;
        if (v51 <= 0)
        {
          if (v51 < 0)
          {
            v166 = v70;
            v74 = -v51;
          }
          else
          {
            v74 = 0;
          }
        }
        v165 = v74;
        v75 = v51;
        v76 = btConvexHullInternal::Rational64::compare((uint64_t)&v167, (uint64_t)&v164);
        v51 = v75;
        LODWORD(v21) = v152;
        LODWORD(v20) = v153;
        v32 = v150;
        LODWORD(v23) = v151;
        v52 = v73;
        v11 = v69;
        v34 = v156;
        v12 = v157;
        v13 = v159;
        v54 = v154;
        v53 = v72;
        v55 = (_QWORD *)v147;
        v33 = v149;
        if (v76 < 0)
          break;
      }
      else if ((v64 & 0x80000000) == 0)
      {
        break;
      }
      v51 = v32 * ((int)v52 - (int)v60) + v33 * (int)(v54 - v61) + v34 * ((int)v53 - (int)v62);
      if (v56 == v55)
        v56 = 0;
      else
        v56 = (_QWORD *)v58;
      *a4 = (uint64_t)v56;
      v11 = v60;
      v12 = v61;
      v13 = v62;
    }
    result = v51;
    v77 = *v146;
    if (!*v146)
      return result;
    if (*(unsigned int **)(v77 + 24) == v141)
      return result;
    v78 = **(_QWORD **)(v77 + 16);
    if (*(_DWORD *)(v78 + 40) <= *(_DWORD *)(a1 + 160))
      return result;
    v79 = *(_DWORD **)(v78 + 24);
    v80 = v79[26];
    v81 = v79[27];
    v82 = v80 - v52;
    v83 = v81 - v54;
    v84 = v79[28];
    if (v145 * (uint64_t)v82 + v144 * (uint64_t)(int)(v81 - v54) + v143 * (uint64_t)(v84 - (int)v53))
      return result;
    v85 = v32 * (v80 - (int)v11) + v33 * (v81 - (int)v12) + v34 * (v84 - (int)v13);
    if (v85 < 1)
      return result;
    v86 = v32 * v82 + v33 * v83 + v34 * (v84 - (int)v53);
    v87 = v82 * (int)v20 + v83 * (int)v21 + (v84 - (int)v53) * (int)v23;
    if (!v86)
    {
      if ((v87 & 0x80000000) != 0)
        goto LABEL_77;
      return result;
    }
    if ((v86 & 0x8000000000000000) == 0)
      return result;
    v88 = (int)v87 <= 0;
    if ((v87 & 0x80000000) != 0)
      v89 = -(uint64_t)v87;
    else
      v89 = 0;
    v90 = (v87 >> 31) & 1;
    if ((int)v87 <= 0)
      v87 = v89;
    if (v88)
      v91 = v90;
    else
      v91 = -1;
    v169 = v91;
    v167 = v87;
    v168 = -v86;
    if ((int)v57 < 1)
    {
      if ((v57 & 0x80000000) != 0)
      {
        v166 = -1;
        v57 = -v57;
        v92 = 1;
      }
      else
      {
        v57 = 0;
        v92 = 0;
        v166 = 0;
      }
    }
    else
    {
      v166 = 1;
      v92 = -1;
    }
    v164 = v57;
    if (v51 <= 0)
    {
      if (v51 < 0)
      {
        v166 = v92;
        result = -v51;
      }
      else
      {
        result = 0;
      }
    }
    v165 = result;
    result = btConvexHullInternal::Rational64::compare((uint64_t)&v167, (uint64_t)&v164);
    LODWORD(v21) = v152;
    LODWORD(v20) = v153;
    v32 = v150;
    LODWORD(v23) = v151;
    v33 = v149;
    v34 = v156;
    if ((int)result <= 0)
      return result;
LABEL_77:
    *v146 = v78;
    v93 = *(unsigned int **)(v78 + 24);
    v52 = v93[26];
    v54 = v93[27];
    v53 = v93[28];
    v51 = v85;
  }
}

double btConvexHullInternal::removeEdgePair(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t *v4;
  double result;

  v2 = (_QWORD *)*a2;
  v3 = (uint64_t *)a2[2];
  if ((_QWORD *)*a2 == a2)
  {
    v2 = 0;
  }
  else
  {
    v2[1] = a2[1];
    *(_QWORD *)a2[1] = v2;
  }
  *(_QWORD *)(v3[3] + 16) = v2;
  v4 = (uint64_t *)*v3;
  if ((uint64_t *)*v3 == v3)
  {
    v4 = 0;
  }
  else
  {
    v4[1] = v3[1];
    *(_QWORD *)v3[1] = v4;
  }
  *(_QWORD *)(a2[3] + 16) = v4;
  result = 0.0;
  a2[4] = 0;
  *(_OWORD *)a2 = 0u;
  *((_OWORD *)a2 + 1) = 0u;
  *a2 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = a2;
  v3[4] = 0;
  *(_OWORD *)v3 = 0u;
  *((_OWORD *)v3 + 1) = 0u;
  *v3 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v3;
  --*(_DWORD *)(a1 + 176);
  return result;
}

void btConvexHullInternal::compute(float32x4_t *this, char *a2, char a3, int a4, int a5, double a6, double a7, double a8, int32x4_t a9, int32x4_t a10)
{
  float32x4_t v15;
  float32x4_t v16;
  unint64_t *v17;
  int v18;
  float32x4_t v19;
  __int32 *v20;
  int v21;
  float32x4_t v22;
  float32x4_t v23;
  float v24;
  float v25;
  int v26;
  unsigned __int32 v27;
  int v28;
  float32x4_t v29;
  int8x16_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  _DWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double *v40;
  _DWORD *v41;
  unsigned int v42;
  float32x4_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  _DWORD *v49;
  float32x4_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void **v56;
  uint64_t v57;
  uint64_t v58;
  float32x4_t v59;
  float32x4_t v60;
  _BYTE v61[4];
  uint64_t v62;
  void *v63;
  char v64;

  if ((a3 & 1) != 0)
  {
    if (a5 >= 1)
    {
      v15 = (float32x4_t)xmmword_1DD02D070;
      v16 = (float32x4_t)xmmword_1DD02D060;
      v17 = (unint64_t *)(a2 + 16);
      v18 = a5;
      do
      {
        *(float32x2_t *)v19.f32 = vcvt_f32_f64(*((float64x2_t *)v17 - 1));
        a9.i64[0] = *v17;
        *(float *)a9.i32 = *(double *)v17;
        v19.i64[1] = a9.u32[0];
        v16 = vminq_f32(v16, v19);
        v15 = vmaxq_f32(v15, v19);
        v17 = (unint64_t *)((char *)v17 + a4);
        --v18;
      }
      while (v18);
      goto LABEL_11;
    }
  }
  else if (a5 >= 1)
  {
    v15 = (float32x4_t)xmmword_1DD02D070;
    v16 = (float32x4_t)xmmword_1DD02D060;
    v20 = (__int32 *)(a2 + 8);
    v21 = a5;
    do
    {
      v22.i64[0] = *((_QWORD *)v20 - 1);
      v22.i32[2] = *v20;
      v20 = (__int32 *)((char *)v20 + a4);
      v22.i64[1] = v22.u32[2];
      v16 = vminq_f32(v16, v22);
      v15 = vmaxq_f32(v15, v22);
      --v21;
    }
    while (v21);
    goto LABEL_11;
  }
  v16 = (float32x4_t)xmmword_1DD02D060;
  v15 = (float32x4_t)xmmword_1DD02D070;
LABEL_11:
  v23 = vsubq_f32(v15, v16);
  v24 = v23.f32[1];
  if (v23.f32[0] >= v23.f32[1])
    v25 = v23.f32[0];
  else
    v25 = v23.f32[1];
  if (v23.f32[0] < v23.f32[1])
    v24 = v23.f32[0];
  v23.i32[3] = 0;
  v26 = v23.f32[0] >= v23.f32[1];
  v27 = v23.f32[0] < v23.f32[1];
  if (v25 < v23.f32[2])
    v27 = 2;
  if (v24 >= v23.f32[2])
    v26 = 2;
  if (v27 + 1 < 3)
    v28 = v27 + 1;
  else
    v28 = v27 - 2;
  if (v26 == v27)
    v26 = v28;
  this[10].i32[1] = v26;
  this[10].i32[2] = 3 - (v26 + v27);
  this[10].i32[3] = v27;
  a9.i32[0] = (int)(4 - (v26 + v27)) % 3;
  a10.i32[0] = v27;
  v29 = vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(a9, a10), 0), (int8x16_t)vdupq_n_s32(0x38CD47F8u), (int8x16_t)vdupq_n_s32(0xB8CD47F8)), v23);
  *this = v29;
  v23.i32[0] = 0;
  v30 = (int8x16_t)v29;
  *(float *)v30.i32 = 1.0 / v29.f32[0];
  v31 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v29, v23)), 0), v30, (int8x16_t)v29);
  if (v31.f32[1] != 0.0)
    v31.f32[1] = 1.0 / v31.f32[1];
  if (v31.f32[2] != 0.0)
    v31.f32[2] = 1.0 / v31.f32[2];
  v32 = vaddq_f32(v16, v15);
  v33.i64[0] = 0x3F0000003F000000;
  v33.i64[1] = 0x3F0000003F000000;
  v34 = vmulq_f32(v32, v33);
  v34.i32[3] = 0;
  this[1] = v34;
  v64 = 1;
  v63 = 0;
  HIDWORD(v62) = 0;
  if (a5 < 0)
  {
    v35 = 0;
  }
  else
  {
    if (!a5)
    {
      LODWORD(v62) = 0;
      goto LABEL_44;
    }
    v59 = v31;
    v35 = (_DWORD *)btAlignedAllocInternal(16 * a5, 16);
    v31 = v59;
    v64 = 1;
    v63 = v35;
    HIDWORD(v62) = a5;
  }
  LODWORD(v62) = a5;
  if ((a3 & 1) != 0)
  {
    if (a5 < 1)
      goto LABEL_44;
    v36 = 0;
    v38 = this[10].i32[2];
    v37 = this[10].i32[3];
    v39 = this[10].i32[1];
    v40 = (double *)(a2 + 16);
    v41 = v35 + 2;
    do
    {
      *(float *)&v42 = *v40;
      *(float32x2_t *)v60.f32 = vcvt_f32_f64(*(float64x2_t *)(v40 - 2));
      v60.i64[1] = v42;
      v43 = vsubq_f32(v60, this[1]);
      v43.i32[3] = 0;
      v60 = vmulq_f32(v31, v43);
      *(v41 - 2) = (int)v60.f32[v38];
      *(v41 - 1) = (int)v60.f32[v37];
      *v41 = (int)v60.f32[v39];
      v41[1] = v36;
      v41 += 4;
      ++v36;
      v40 = (double *)((char *)v40 + a4);
    }
    while (a5 != v36);
  }
  else
  {
    if (a5 < 1)
      goto LABEL_44;
    v44 = 0;
    v46 = this[10].i32[2];
    v45 = this[10].i32[3];
    v47 = this[10].i32[1];
    v48 = (unsigned int *)(a2 + 8);
    v49 = v35 + 2;
    do
    {
      v60.i64[0] = *((_QWORD *)v48 - 1);
      v60.i64[1] = *v48;
      v50 = vsubq_f32(v60, this[1]);
      v50.i32[3] = 0;
      v60 = vmulq_f32(v31, v50);
      *(v49 - 2) = (int)v60.f32[v46];
      *(v49 - 1) = (int)v60.f32[v45];
      *v49 = (int)v60.f32[v47];
      v49[1] = v44;
      v49 += 4;
      ++v44;
      v48 = (unsigned int *)((char *)v48 + a4);
    }
    while (a5 != v44);
  }
  if (a5 >= 2)
    btAlignedObjectArray<btConvexHullInternal::Point32>::quickSortInternal<pointCmp>((uint64_t)v61, (uint64_t)&v60, 0, a5 - 1);
LABEL_44:
  this[2].i64[1] = this[2].i64[0];
  this[3].i64[0] = 0;
  this[3].i32[2] = a5;
  v51 = this[8].i32[1];
  if (v51 < a5)
  {
    v52 = v51;
    if (this[8].i32[2] < a5)
    {
      if (a5)
      {
        v53 = btAlignedAllocInternal(8 * a5, 16);
        v51 = this[8].i32[1];
      }
      else
      {
        v53 = 0;
      }
      if (v51 >= 1)
      {
        v54 = 0;
        v55 = 8 * v51;
        do
        {
          *(_QWORD *)(v53 + v54) = *(_QWORD *)(this[9].i64[0] + v54);
          v54 += 8;
        }
        while (v55 != v54);
      }
      v56 = (void **)this[9].i64[0];
      if (v56 && this[9].i8[8])
        btAlignedFreeInternal(v56);
      this[9].i8[8] = 1;
      this[9].i64[0] = v53;
      this[8].i32[2] = a5;
    }
    do
      *(_QWORD *)(this[9].i64[0] + 8 * v52++) = 0;
    while (a5 != v52);
  }
  this[8].i32[1] = a5;
  if (a5 >= 1)
  {
    v57 = 0;
    do
    {
      btConvexHullInternal::Pool<btConvexHullInternal::Vertex>::newObject((uint64_t)&this[2]);
      *(_QWORD *)(v58 + 16) = 0;
      *(_OWORD *)(v58 + 104) = *((_OWORD *)v63 + v57);
      *(_DWORD *)(v58 + 120) = -1;
      *(_QWORD *)(this[9].i64[0] + 8 * v57++) = v58;
    }
    while (v57 != a5);
  }
  if (v63 && v64)
    btAlignedFreeInternal((void **)v63);
  v64 = 1;
  v63 = 0;
  v62 = 0;
  this[4].i64[1] = this[4].i64[0];
  this[5].i64[0] = 0;
  this[5].i32[2] = 6 * a5;
  this[11].i64[0] = 0;
  this[10].i32[0] = -3;
  memset(&v60, 0, 32);
  btConvexHullInternal::computeInternal((btConvexHullInternal *)this, 0, a5, (uint64_t)&v60);
  this[11].i64[1] = v60.i64[0];
  if (v63)
  {
    if (v64)
      btAlignedFreeInternal((void **)v63);
  }
}

double btConvexHullInternal::Pool<btConvexHullInternal::Vertex>::newObject(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64x2_t v7;
  int32x2_t v8;
  _QWORD *v9;
  int32x2_t v10;
  int32x2_t v11;
  _QWORD *v12;
  _QWORD *v13;
  double result;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v3 = *(_QWORD *)(a1 + 8);
    if (v3)
    {
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(v3 + 16);
      v2 = *(_QWORD *)v3;
    }
    else
    {
      v3 = btAlignedAllocInternal(24, 16);
      v4 = *(int *)(a1 + 24);
      *(_DWORD *)(v3 + 8) = v4;
      *(_QWORD *)(v3 + 16) = 0;
      v2 = btAlignedAllocInternal(v4 << 7, 16);
      *(_QWORD *)v3 = v2;
      *(_QWORD *)(v3 + 16) = *(_QWORD *)a1;
      *(_QWORD *)a1 = v3;
    }
    v5 = *(unsigned int *)(v3 + 8);
    if ((int)v5 >= 1)
    {
      v6 = 0;
      v7 = (uint64x2_t)vdupq_n_s64(v5 - 1);
      v8 = (int32x2_t)0x100000000;
      v9 = (_QWORD *)(v2 + 128);
      do
      {
        v10 = vmovn_s64((int64x2_t)vcgeq_u64(v7, (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v6), (int8x16_t)xmmword_1DD008320)));
        v11 = vadd_s32(v8, (int32x2_t)0x100000001);
        if ((v10.i8[0] & 1) != 0)
        {
          if (v11.i32[0] >= (int)v5)
            v12 = 0;
          else
            v12 = v9;
          *(v9 - 16) = v12;
        }
        if ((v10.i8[4] & 1) != 0)
        {
          v13 = v9 + 16;
          if (v11.i32[1] >= (int)v5)
            v13 = 0;
          *v9 = v13;
        }
        v6 += 2;
        v8 = vadd_s32(v8, (int32x2_t)0x200000002);
        v9 += 32;
      }
      while (((v5 + 1) & 0x1FFFFFFFELL) != v6);
    }
  }
  *(_QWORD *)(a1 + 16) = *(_QWORD *)v2;
  result = 0.0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_DWORD *)(v2 + 120) = -1;
  return result;
}

float32x4_t btConvexHullInternal::getBtNormal@<Q0>(float32x4_t *a1@<X0>, int *a2@<X1>, float32x4_t *a3@<X8>)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float32x4_t v7;
  float32x4_t v8;
  int v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  int8x16_t v13;
  int8x16_t v14;
  float32x4_t result;
  float32x4_t v16;

  v3 = a2[11];
  v5 = a1[10].i32[1];
  v4 = a1[10].i32[2];
  v16.f32[v4] = (float)a2[10];
  v6 = a1[10].i32[3];
  v16.f32[v6] = (float)v3;
  v16.f32[v5] = (float)a2[12];
  v7 = *a1;
  v8 = vmulq_f32(*a1, v16);
  v9 = a2[15];
  v16.f32[v4] = (float)a2[14];
  v16.f32[v6] = (float)v9;
  v16.f32[v5] = (float)a2[16];
  v10 = vmulq_f32(v16, v7);
  v11.i64[0] = vextq_s8((int8x16_t)v8, (int8x16_t)v8, 4uLL).u64[0];
  v11.i64[1] = v8.i64[0];
  v12.i64[0] = vextq_s8((int8x16_t)v10, (int8x16_t)v10, 4uLL).u64[0];
  v12.i64[1] = v10.i64[0];
  v13 = (int8x16_t)vmlaq_f32(vnegq_f32(vmulq_f32(v10, v11)), v8, v12);
  v8.i64[0] = vextq_s8(v13, v13, 4uLL).u64[0];
  v8.i64[1] = v13.u32[0];
  v14 = (int8x16_t)vmulq_f32(v8, v8);
  result = vmulq_n_f32(v8, 1.0/ sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL), vpadd_f32(*(float32x2_t *)v14.i8, *(float32x2_t *)v14.i8)).f32[0]));
  *a3 = result;
  return result;
}

void btConvexHullInternal::Vertex::xvalue(btConvexHullInternal::Vertex *this)
{
  if ((*((_DWORD *)this + 29) & 0x80000000) != 0)
  {
    btConvexHullInternal::Int128::toScalar((btConvexHullInternal::Vertex *)((char *)this + 40));
    btConvexHullInternal::Int128::toScalar((btConvexHullInternal::Vertex *)((char *)this + 88));
  }
}

void btConvexHullInternal::Vertex::yvalue(btConvexHullInternal::Vertex *this)
{
  if ((*((_DWORD *)this + 29) & 0x80000000) != 0)
  {
    btConvexHullInternal::Int128::toScalar((btConvexHullInternal::Vertex *)((char *)this + 56));
    btConvexHullInternal::Int128::toScalar((btConvexHullInternal::Vertex *)((char *)this + 88));
  }
}

void btConvexHullInternal::Vertex::zvalue(btConvexHullInternal::Vertex *this)
{
  if ((*((_DWORD *)this + 29) & 0x80000000) != 0)
  {
    btConvexHullInternal::Int128::toScalar((btConvexHullInternal::Vertex *)((char *)this + 72));
    btConvexHullInternal::Int128::toScalar((btConvexHullInternal::Vertex *)((char *)this + 88));
  }
}

float btConvexHullInternal::shrink(btConvexHullInternal *this, float a2, float a3)
{
  uint64_t v3;
  int v7;
  void **v8;
  int v9;
  void **v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _DWORD *v17;
  int v18;
  int v19;
  int v20;
  _QWORD *v21;
  uint64_t *v22;
  void **v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  void **v27;
  void **v28;
  void **v29;
  void **v30;
  void *v31;
  _QWORD *v32;
  int v33;
  int v34;
  void **v35;
  uint64_t v36;
  uint64_t v37;
  void **v38;
  void **v39;
  void *v40;
  _DWORD *v41;
  _DWORD *v42;
  uint64_t *v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  float v58;
  void **v59;
  int v60;
  float v61;
  float32x4_t v62;
  float32x4_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  float v69;
  int **v70;
  int *v71;
  float v72;
  float32x4_t v73;
  int8x16_t v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  void **v78;
  void *v79;
  int **v80;
  int *v81;
  char v82;
  BOOL v83;
  float32x4_t *v85;
  char *v86;
  int v87;
  int v88;
  int v89;
  void **v90;
  void **v91;
  void **v92;
  unint64_t v93;
  unint64_t v94;
  int v95;
  int v96;
  int v97;
  void **v98;
  uint64_t v99;
  uint64_t v100;
  float32x4_t v101;
  uint64_t v102;
  float32x4_t v103;
  _BYTE v104[4];
  int v105;
  int v106;
  void *v107;
  char v108;
  float32x4_t v109;
  float32x4_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  char v119[4];
  unint64_t v120;
  void **v121;
  char v122;
  float32x4_t v123;

  v3 = *((_QWORD *)this + 23);
  if (!v3)
    return 0.0;
  v7 = *((_DWORD *)this + 40) - 1;
  *((_DWORD *)this + 40) = v7;
  v122 = 1;
  v120 = 0;
  *(_DWORD *)(v3 + 120) = v7;
  v8 = (void **)btAlignedAllocInternal(8, 16);
  v9 = 1;
  v10 = 0;
  v87 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v99 = 0;
  v100 = 0;
  v102 = 0;
  v15 = 0;
  v16 = 0;
  v121 = v8;
  *v8 = (void *)*((_QWORD *)this + 23);
  v17 = (_DWORD *)*((_QWORD *)this + 23);
  v18 = v17[26];
  v19 = v17[27];
  v20 = v17[28];
  v117 = 0;
  v118 = 0;
  v115 = 0;
  v116 = 0;
  v113 = 0;
  v114 = 0;
  v85 = (float32x4_t *)this;
  v86 = (char *)this + 96;
  v111 = 0;
  v112 = 0;
  v97 = 1;
  do
  {
    v21 = v121[--v9];
    v22 = (uint64_t *)v21[2];
    if (v22)
    {
      v23 = v10;
      while (1)
      {
        v24 = v22[3];
        if (*(_DWORD *)(v24 + 120) == v7)
          goto LABEL_23;
        *(_DWORD *)(v24 + 120) = v7;
        LODWORD(v24) = v97;
        if (v9 == v97)
        {
          v25 = v97 ? 2 * v97 : 1;
          LODWORD(v24) = v97;
          if (v97 < v25)
            break;
        }
        v25 = v24;
LABEL_22:
        v121[v9++] = (void *)v22[3];
        v97 = v25;
LABEL_23:
        if (*((_DWORD *)v22 + 10) != v7)
        {
          v91 = v23;
          v94 = v15;
          v89 = v9;
          v96 = v11;
          v32 = btConvexHullInternal::Pool<btConvexHullInternal::Face>::newObject((uint64_t)v86);
          btConvexHullInternal::Face::init((uint64_t)v32, v22[3], *(_DWORD **)(*(_QWORD *)(v22[2] + 8) + 24), v21);
          v33 = v96;
          if (v96 == v87)
          {
            v34 = 2 * v96;
            if (!v96)
              v34 = 1;
            v15 = v94;
            v35 = v91;
            if (v96 >= v34)
            {
              v87 = v96;
              v10 = v91;
            }
            else
            {
              v87 = v34;
              if (v34)
              {
                v36 = btAlignedAllocInternal(8 * v34, 16);
                v33 = v96;
                v10 = (void **)v36;
                v35 = v91;
              }
              else
              {
                v10 = 0;
              }
              if (v33 < 1)
              {
                if (v35)
                  goto LABEL_39;
              }
              else
              {
                v37 = v33;
                v38 = v10;
                v39 = v35;
                do
                {
                  v40 = *v39++;
                  *v38++ = v40;
                  --v37;
                }
                while (v37);
LABEL_39:
                v92 = v10;
                btAlignedFreeInternal(v35);
                v10 = v92;
                v33 = v96;
              }
LABEL_40:
              v15 = v94;
            }
            v41 = 0;
            v42 = 0;
            v10[v33] = v32;
            v43 = v22;
            do
            {
              if (v41 && v42)
              {
                v44 = v41[26];
                v45 = v41[27];
                v46 = v41[28];
                v47 = v42[26];
                v48 = v42[27];
                v49 = v42[28];
                v50 = *((_DWORD *)v21 + 26);
                v51 = *((_DWORD *)v21 + 27);
                v52 = *((_DWORD *)v21 + 28);
                v53 = ((v49 - v20) * (v45 - v19) - (v48 - v19) * (v46 - v20)) * (uint64_t)(v50 - v18)
                    + ((v48 - v19) * (v44 - v18) - (v47 - v18) * (v45 - v19)) * (uint64_t)(v52 - v20)
                    + ((v47 - v18) * (v46 - v20) - (v49 - v20) * (v44 - v18)) * (uint64_t)(v51 - v19);
                v13 = (v53 * (v50 + v18 + v44 + v47) + __PAIR128__(v13, v12)) >> 64;
                v12 += v53 * (v50 + v18 + v44 + v47);
                v54 = v53 * (v51 + v19 + v45 + v48);
                v55 = __CFADD__(v14, v54);
                v14 += v54;
                v56 = v99 + v55 + (v54 >> 63);
                v57 = v53 * (v52 + v20 + v46 + v49);
                v55 = __CFADD__(v100, v57);
                v99 = v56;
                v100 += v57;
                v102 += v55 + (v57 >> 63);
                v16 = (__PAIR128__(v16, v15) + v53) >> 64;
                v15 += v53;
              }
              *((_DWORD *)v43 + 10) = v7;
              v43[4] = (uint64_t)v32;
              v41 = v42;
              v42 = (_DWORD *)v43[3];
              v43 = *(uint64_t **)(v43[2] + 8);
            }
            while (v43 != v22);
            v11 = v33 + 1;
            v23 = v10;
            v9 = v89;
            goto LABEL_47;
          }
          v10 = v91;
          goto LABEL_40;
        }
        v10 = v23;
LABEL_47:
        v22 = (uint64_t *)*v22;
        if (v22 == (uint64_t *)v21[2])
          goto LABEL_48;
      }
      v95 = v11;
      v88 = v9;
      v93 = v15;
      v90 = v23;
      if (v25)
      {
        v26 = btAlignedAllocInternal(8 * v25, 16);
        LODWORD(v24) = v97;
        v27 = (void **)v26;
      }
      else
      {
        v27 = 0;
      }
      v28 = v121;
      if ((int)v24 < 1)
      {
        if (!v121)
        {
LABEL_21:
          v121 = v27;
          v11 = v95;
          v9 = v88;
          v15 = v93;
          v23 = v90;
          goto LABEL_22;
        }
      }
      else
      {
        v24 = v24;
        v29 = v27;
        v30 = v121;
        do
        {
          v31 = *v30++;
          *v29++ = v31;
          --v24;
        }
        while (v24);
      }
      v98 = v27;
      btAlignedFreeInternal(v28);
      v27 = v98;
      goto LABEL_21;
    }
LABEL_48:
    ;
  }
  while (v9 > 0);
  v120 = __PAIR64__(v97, v9);
  v122 = 1;
  v117 = v12;
  v118 = v13;
  v115 = v14;
  v116 = v99;
  v113 = v100;
  v114 = v102;
  v58 = 0.0;
  v111 = v15;
  v112 = v16;
  if ((v16 & 0x8000000000000000) == 0 && v16 | v15)
  {
    v59 = v10;
    v60 = v11;
    v110.f32[v85[10].i32[2]] = btConvexHullInternal::Int128::toScalar((btConvexHullInternal::Int128 *)&v117);
    v110.f32[v85[10].i32[3]] = btConvexHullInternal::Int128::toScalar((btConvexHullInternal::Int128 *)&v115);
    v110.f32[v85[10].i32[1]] = btConvexHullInternal::Int128::toScalar((btConvexHullInternal::Int128 *)&v113);
    v61 = btConvexHullInternal::Int128::toScalar((btConvexHullInternal::Int128 *)&v111);
    v62 = *v85;
    v63 = vmulq_f32(vmulq_n_f32(v110, 0.25 / v61), *v85);
    v110 = v63;
    if (a3 <= 0.0)
    {
      v64 = v60;
      v10 = v59;
    }
    else
    {
      v64 = v60;
      if (v60 < 1)
      {
        v69 = 3.4028e38;
        v10 = v59;
      }
      else
      {
        v66 = v85[10].i32[2];
        v65 = v85[10].i32[3];
        v67 = v85[10].i32[1];
        v68 = v60;
        v69 = 3.4028e38;
        v101 = vnegq_f32(v63);
        v103 = v62;
        v70 = (int **)v59;
        do
        {
          btConvexHullInternal::getBtNormal(v85, *v70, &v109);
          v71 = *v70++;
          v72 = (float)v71[7];
          v123.f32[v66] = (float)v71[6];
          v123.f32[v65] = v72;
          v123.f32[v67] = (float)v71[8];
          v73 = vmlaq_f32(v101, v103, v123);
          v73.i32[3] = 0;
          v74 = (int8x16_t)vmulq_f32(v109, v73);
          v69 = fminf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v74, v74, 8uLL), vpadd_f32(*(float32x2_t *)v74.i8, *(float32x2_t *)v74.i8)).f32[0], v69);
          --v68;
        }
        while (v68);
        v58 = 0.0;
        v64 = v60;
        v10 = v59;
        if (v69 <= 0.0)
          goto LABEL_76;
      }
      a2 = fminf(v69 * a3, a2);
    }
    if ((int)v64 < 1)
    {
      v58 = a2;
    }
    else
    {
      v75 = v64;
      v76 = 243703;
      v77 = v64;
      v78 = v10;
      do
      {
        v79 = *v78;
        *v78++ = v10[v76 % v64];
        v10[v76 % v64] = v79;
        v76 = 1664525 * v76 + 1013904223;
        --v77;
      }
      while (v77);
      v80 = (int **)v10;
      while (1)
      {
        v81 = *v80;
        btAlignedObjectArray<btRigidBody *>::btAlignedObjectArray((uint64_t)v104, (uint64_t)v119);
        v82 = btConvexHullInternal::shiftFace(v85, v81, (uint64_t)v104, a2);
        if (v107)
          v83 = v108 == 0;
        else
          v83 = 1;
        if (!v83)
          btAlignedFreeInternal((void **)v107);
        v108 = 1;
        v107 = 0;
        v105 = 0;
        v106 = 0;
        if ((v82 & 1) == 0)
          break;
        ++v80;
        if (!--v75)
        {
          v58 = a2;
          goto LABEL_75;
        }
      }
      v58 = -a2;
LABEL_75:
      v10 = v59;
    }
  }
LABEL_76:
  if (v10)
    btAlignedFreeInternal(v10);
  if (v121 && v122)
    btAlignedFreeInternal(v121);
  return v58;
}

_QWORD *btConvexHullInternal::Pool<btConvexHullInternal::Face>::newObject(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64x2_t v7;
  int32x2_t v8;
  _QWORD *v9;
  int32x2_t v10;
  int32x2_t v11;
  _QWORD *v12;
  _QWORD *v13;

  result = *(_QWORD **)(a1 + 16);
  if (!result)
  {
    v3 = *(_QWORD *)(a1 + 8);
    if (v3)
    {
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(v3 + 16);
      result = *(_QWORD **)v3;
    }
    else
    {
      v3 = btAlignedAllocInternal(24, 16);
      v4 = *(int *)(a1 + 24);
      *(_DWORD *)(v3 + 8) = v4;
      *(_QWORD *)(v3 + 16) = 0;
      result = (_QWORD *)btAlignedAllocInternal(72 * v4, 16);
      *(_QWORD *)v3 = result;
      *(_QWORD *)(v3 + 16) = *(_QWORD *)a1;
      *(_QWORD *)a1 = v3;
    }
    v5 = *(unsigned int *)(v3 + 8);
    if ((int)v5 >= 1)
    {
      v6 = 0;
      v7 = (uint64x2_t)vdupq_n_s64(v5 - 1);
      v8 = (int32x2_t)0x100000000;
      v9 = result + 9;
      do
      {
        v10 = vmovn_s64((int64x2_t)vcgeq_u64(v7, (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v6), (int8x16_t)xmmword_1DD008320)));
        v11 = vadd_s32(v8, (int32x2_t)0x100000001);
        if ((v10.i8[0] & 1) != 0)
        {
          if (v11.i32[0] >= (int)v5)
            v12 = 0;
          else
            v12 = v9;
          *(v9 - 9) = v12;
        }
        if ((v10.i8[4] & 1) != 0)
        {
          v13 = v9 + 9;
          if (v11.i32[1] >= (int)v5)
            v13 = 0;
          *v9 = v13;
        }
        v6 += 2;
        v8 = vadd_s32(v8, (int32x2_t)0x200000002);
        v9 += 18;
      }
      while (((v5 + 1) & 0x1FFFFFFFELL) != v6);
    }
  }
  *(_QWORD *)(a1 + 16) = *result;
  result[1] = 0;
  result[2] = 0;
  *result = 0;
  return result;
}

uint64_t btConvexHullInternal::Face::init(uint64_t result, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  *(_QWORD *)(result + 8) = a2;
  *(_OWORD *)(result + 24) = *(_OWORD *)(a2 + 104);
  v4 = (a3[28] - *(_DWORD *)(a2 + 112)) | 0xFFFFFFFF00000000;
  *(_QWORD *)(result + 40) = (a3[26] - *(_DWORD *)(a2 + 104)) | ((unint64_t)(a3[27] - *(_DWORD *)(a2 + 108)) << 32);
  *(_QWORD *)(result + 48) = v4;
  v5 = (a4[28] - *(_DWORD *)(a2 + 112)) | 0xFFFFFFFF00000000;
  *(_QWORD *)(result + 56) = (a4[26] - *(_DWORD *)(a2 + 104)) | ((unint64_t)(a4[27] - *(_DWORD *)(a2 + 108)) << 32);
  *(_QWORD *)(result + 64) = v5;
  v6 = *(_QWORD *)(a2 + 32);
  if (v6)
    v7 = (_QWORD *)(v6 + 16);
  else
    v7 = (_QWORD *)(a2 + 24);
  *v7 = result;
  *(_QWORD *)(a2 + 32) = result;
  return result;
}

float btConvexHullInternal::Int128::toScalar(btConvexHullInternal::Int128 *this)
{
  unint64_t v1;
  unint64_t v3;
  float v4;
  _QWORD v5[2];

  v1 = *((_QWORD *)this + 1);
  if ((v1 & 0x8000000000000000) == 0)
    return (float)*(unint64_t *)this + (float)((float)v1 * 1.8447e19);
  if (*(_QWORD *)this)
    v3 = ~v1;
  else
    v3 = -(uint64_t)v1;
  v5[0] = -*(_QWORD *)this;
  v5[1] = v3;
  btConvexHullInternal::Int128::toScalar((btConvexHullInternal::Int128 *)v5);
  return -v4;
}

uint64_t btConvexHullInternal::shiftFace(float32x4_t *a1, int *a2, uint64_t a3, float a4)
{
  int *v7;
  float32x4_t v8;
  float v9;
  float v10;
  int v11;
  int v12;
  int v13;
  BOOL v14;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v33;
  int v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  int *v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int *v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  int *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  float v139;
  float v140;
  float v141;
  int v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  void **v147;
  int v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  void **v152;
  int v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  void **v157;
  btConvexHullInternal::Vertex *v158;
  uint64_t *v159;
  uint64_t *v160;
  uint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  _QWORD *v164;
  uint64_t *v165;
  int v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  void **v170;
  int v171;
  _QWORD *v172;
  uint64_t v173;
  int v174;
  int v175;
  uint64_t v176;
  uint64_t v177;
  void **v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  void **v182;
  uint64_t *v183;
  uint64_t **v184;
  uint64_t v185;
  int v186;
  int v187;
  uint64_t v188;
  uint64_t v189;
  void **v190;
  int v191;
  _QWORD *v192;
  uint64_t v193;
  int v194;
  int v195;
  uint64_t v196;
  uint64_t v197;
  void **v198;
  int v199;
  uint64_t v200;
  uint64_t v201;
  void **v202;
  uint64_t v203;
  uint64_t *v204;
  _QWORD *v205;
  char v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t *v210;
  uint64_t v211;
  _QWORD *v212;
  uint64_t v213;
  uint64_t i;
  uint64_t v215;
  uint64_t v216;
  int v217;
  int v218;
  uint64_t v219;
  uint64_t v220;
  void **v221;
  int v222;
  int v223;
  uint64_t v224;
  uint64_t v225;
  void **v226;
  int v227;
  int v228;
  uint64_t v229;
  void **v230;
  int *v231;
  unint64_t v232;
  uint64_t v233;
  void **v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t v244;
  unsigned __int128 v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t v248;
  uint64_t v249;
  uint64_t v250;
  unint64_t v251;
  uint64_t v252;
  unint64_t v253;
  _QWORD *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  int *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  unint64_t v269;
  uint64_t v270;
  int v271;
  uint64_t *v272;
  int v273;
  float32x4_t v274;
  _BYTE v275[21];
  float32x4_t v276;
  _BYTE v277[21];
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  float32x4_t v281;

  v7 = a2;
  btConvexHullInternal::getBtNormal(a1, a2, &v276);
  v8 = vmulq_n_f32(v276, -a4);
  v8.i32[3] = 0;
  v281[0] = v8;
  if (a1->f32[0] != 0.0)
    *(float *)v281 = v8.f32[0] / a1->f32[0];
  v9 = a1->f32[1];
  if (v9 != 0.0)
    *((float *)v281 + 1) = v8.f32[1] / v9;
  v10 = a1->f32[2];
  if (v10 != 0.0)
    *((float *)v281 + 2) = v8.f32[2] / v10;
  v11 = (int)*((float *)v281 + a1[10].i32[2]);
  v12 = (int)*((float *)v281 + a1[10].i32[3]);
  v13 = (int)*((float *)v281 + a1[10].i32[1]);
  if (v11)
    v14 = 0;
  else
    v14 = v12 == 0;
  if (v14 && v13 == 0)
    return 1;
  v17 = v7[15];
  v16 = v7[16];
  v19 = v7[11];
  v18 = v7[12];
  v20 = v7[14];
  v21 = v7[10];
  v278 = v16 * v19 - v17 * v18;
  v279 = v20 * v18 - v21 * v16;
  v280 = v21 * v17 - v20 * v19;
  v22 = v7[6];
  v23 = v7[7];
  v24 = v7[8];
  v259 = v22 + v11;
  v260 = v24 + v13;
  v261 = v23 + v12;
  v25 = v259 * v278 + v261 * v279 + v260 * v280;
  if (v25 >= (int)v22 * v278 + (int)v23 * v279 + (int)v24 * v280)
    return 0;
  v26 = *((_QWORD *)v7 + 1);
  v27 = *(_QWORD *)(v26 + 16);
  btConvexHullInternal::Vertex::dot((int *)v26, &v278, (btConvexHullInternal::Rational128 *)&v276);
  v28 = btConvexHullInternal::Rational128::compare((btConvexHullInternal::Rational128 *)&v276, v25);
  if ((v28 & 0x80000000) == 0)
  {
    v29 = v28;
    v30 = v27;
    while (1)
    {
      btConvexHullInternal::Vertex::dot(*(int **)(v27 + 24), &v278, (btConvexHullInternal::Rational128 *)&v274);
      if ((btConvexHullInternal::Rational128::compare((btConvexHullInternal::Rational128 *)&v274, (const btConvexHullInternal::Rational128 *)&v276) & 0x80000000) != 0)
      {
        v31 = btConvexHullInternal::Rational128::compare((btConvexHullInternal::Rational128 *)&v274, v25);
        *(_QWORD *)&v277[13] = *(_QWORD *)&v275[13];
        v276 = v274;
        *(_OWORD *)v277 = *(_OWORD *)v275;
        v27 = *(_QWORD *)(v27 + 16);
        if (v31 < 0)
        {
          if (v27)
          {
            if (!v29)
              goto LABEL_186;
            goto LABEL_32;
          }
          return 0;
        }
        v29 = v31;
        v30 = v27;
      }
      v27 = *(_QWORD *)(v27 + 8);
      if (v27 == v30)
        return 0;
    }
  }
  v33 = v27;
  while (1)
  {
    btConvexHullInternal::Vertex::dot(*(int **)(v27 + 24), &v278, (btConvexHullInternal::Rational128 *)&v274);
    if ((int)btConvexHullInternal::Rational128::compare((btConvexHullInternal::Rational128 *)&v274, (const btConvexHullInternal::Rational128 *)&v276) >= 1)break;
LABEL_26:
    v27 = *(_QWORD *)(v27 + 8);
    if (v27 == v33)
      return 1;
  }
  v34 = btConvexHullInternal::Rational128::compare((btConvexHullInternal::Rational128 *)&v274, v25);
  if (v34 < 0)
  {
    *(_QWORD *)&v277[13] = *(_QWORD *)&v275[13];
    v276 = v274;
    *(_OWORD *)v277 = *(_OWORD *)v275;
    v27 = *(_QWORD *)(v27 + 16);
    v33 = v27;
    goto LABEL_26;
  }
  v29 = v34;
  if (!v34)
  {
LABEL_186:
    v183 = **(uint64_t ***)(v27 + 16);
    while (1)
    {
      btConvexHullInternal::Vertex::dot((int *)v183[3], &v278, (btConvexHullInternal::Rational128 *)&v274);
      if ((int)btConvexHullInternal::Rational128::compare((btConvexHullInternal::Rational128 *)&v274, v25) > 0)
        break;
      v183 = (uint64_t *)*v183;
      if (v183 == *(uint64_t **)(v27 + 16))
        return 1;
    }
  }
LABEL_32:
  v35 = 0;
  v36 = 0;
  v257 = 0;
  v258 = v7;
  v236 = v25;
  while (2)
  {
    v37 = v36;
    v272 = v36;
    v271 = v29;
    if (v29
      || (v38 = **(_QWORD **)(v27 + 16),
          btConvexHullInternal::Vertex::dot(*(int **)(v38 + 24), &v278, (btConvexHullInternal::Rational128 *)&v274),
          (btConvexHullInternal::Rational128::compare((btConvexHullInternal::Rational128 *)&v274, v25) & 0x80000000) == 0))
    {
LABEL_39:
      v42 = v27;
      v43 = v29;
      if (v257)
      {
        if (v27 == v257)
        {
          if (v29 < 1)
          {
            v186 = *(_DWORD *)(a3 + 4);
            if (v35 != (uint64_t *)v37[2])
            {
              v187 = *(_DWORD *)(a3 + 8);
              if (v186 == v187)
              {
                if (v186)
                  v187 = 2 * v186;
                else
                  v187 = 1;
                if (v186 >= v187)
                {
                  v187 = *(_DWORD *)(a3 + 4);
                }
                else
                {
                  if (v187)
                  {
                    v188 = btAlignedAllocInternal(8 * v187, 16);
                    v186 = *(_DWORD *)(a3 + 4);
                  }
                  else
                  {
                    v188 = 0;
                  }
                  if (v186 >= 1)
                  {
                    v189 = 0;
                    do
                    {
                      *(_QWORD *)(v188 + v189) = *(_QWORD *)(*(_QWORD *)(a3 + 16) + v189);
                      v189 += 8;
                    }
                    while (8 * v186 != v189);
                  }
                  v190 = *(void ***)(a3 + 16);
                  if (v190 && *(_BYTE *)(a3 + 24))
                  {
                    btAlignedFreeInternal(v190);
                    v186 = *(_DWORD *)(a3 + 4);
                  }
                  *(_BYTE *)(a3 + 24) = 1;
                  *(_QWORD *)(a3 + 16) = v188;
                  *(_DWORD *)(a3 + 8) = v187;
                  v37 = v36;
                }
              }
              *(_QWORD *)(*(_QWORD *)(a3 + 16) + 8 * v186) = v37[3];
              v191 = v186 + 1;
              *(_DWORD *)(a3 + 4) = v186 + 1;
              v192 = (_QWORD *)*v35;
              if (*v35 != v37[2])
              {
                do
                {
                  v193 = v192[3];
                  btConvexHullInternal::removeEdgePair((uint64_t)a1, v192);
                  v194 = *(_DWORD *)(a3 + 4);
                  v195 = *(_DWORD *)(a3 + 8);
                  if (v194 == v195)
                  {
                    if (v194)
                      v195 = 2 * v194;
                    else
                      v195 = 1;
                    if (v194 >= v195)
                    {
                      v195 = *(_DWORD *)(a3 + 4);
                    }
                    else
                    {
                      if (v195)
                      {
                        v196 = btAlignedAllocInternal(8 * v195, 16);
                        v194 = *(_DWORD *)(a3 + 4);
                      }
                      else
                      {
                        v196 = 0;
                      }
                      if (v194 >= 1)
                      {
                        v197 = 0;
                        do
                        {
                          *(_QWORD *)(v196 + v197) = *(_QWORD *)(*(_QWORD *)(a3 + 16) + v197);
                          v197 += 8;
                        }
                        while (8 * v194 != v197);
                      }
                      v198 = *(void ***)(a3 + 16);
                      if (v198 && *(_BYTE *)(a3 + 24))
                      {
                        btAlignedFreeInternal(v198);
                        v194 = *(_DWORD *)(a3 + 4);
                      }
                      *(_BYTE *)(a3 + 24) = 1;
                      *(_QWORD *)(a3 + 16) = v196;
                      *(_DWORD *)(a3 + 8) = v195;
                      v37 = v36;
                    }
                  }
                  *(_QWORD *)(*(_QWORD *)(a3 + 16) + 8 * v194) = v193;
                  v191 = v194 + 1;
                  *(_DWORD *)(a3 + 4) = v191;
                  v192 = (_QWORD *)*v35;
                }
                while (*v35 != v37[2]);
                v187 = v195;
              }
              if (v191 == v187)
              {
                if (v187)
                  v199 = 2 * v187;
                else
                  v199 = 1;
                if (v187 < v199)
                {
                  if (v199)
                  {
                    v200 = btAlignedAllocInternal(8 * v199, 16);
                    v187 = *(_DWORD *)(a3 + 4);
                  }
                  else
                  {
                    v200 = 0;
                  }
                  if (v187 >= 1)
                  {
                    v201 = 0;
                    do
                    {
                      *(_QWORD *)(v200 + v201) = *(_QWORD *)(*(_QWORD *)(a3 + 16) + v201);
                      v201 += 8;
                    }
                    while (8 * v187 != v201);
                  }
                  v202 = *(void ***)(a3 + 16);
                  if (v202 && *(_BYTE *)(a3 + 24))
                  {
                    btAlignedFreeInternal(v202);
                    v187 = *(_DWORD *)(a3 + 4);
                  }
                  *(_BYTE *)(a3 + 24) = 1;
                  *(_QWORD *)(a3 + 16) = v200;
                  *(_DWORD *)(a3 + 8) = v199;
                }
                v191 = v187;
              }
              *(_QWORD *)(*(_QWORD *)(a3 + 16) + 8 * v191) = 0;
              v186 = v191 + 1;
              *(_DWORD *)(a3 + 4) = v191 + 1;
            }
          }
          else
          {
            *(_QWORD *)(v35[2] + 24) = v37[3];
            v184 = *(uint64_t ***)(v257 + 16);
            *v184 = v35;
            v35[1] = (uint64_t)v184;
            v185 = v37[2];
            *v35 = v185;
            *(_QWORD *)(v185 + 8) = v35;
            v186 = *(_DWORD *)(a3 + 4);
          }
          a1[11].i64[1] = **(_QWORD **)(a3 + 16);
          if (v186 >= 1)
          {
            LODWORD(v203) = 0;
            do
            {
              v273 = v186;
              do
              {
                v204 = (uint64_t *)(*(_QWORD *)(a3 + 16) + 8 * (int)v203);
                LODWORD(v203) = v203 + 2;
                v205 = (_QWORD *)v204[1];
                if (v205)
                {
                  v206 = 0;
                  v207 = *v204;
                  v208 = *v204 + 24;
                  v203 = (int)v203;
LABEL_250:
                  v209 = v203;
                  do
                  {
                    v210 = v205 + 3;
                    v211 = *(_QWORD *)(v207 + 32);
                    if (v211)
                      v212 = (_QWORD *)(v211 + 16);
                    else
                      v212 = (_QWORD *)v208;
                    *v212 = v205[3];
                    v213 = v205[4];
                    if (v213)
                      *(_QWORD *)(v207 + 32) = v213;
                    for (i = *v210; i; i = *(_QWORD *)(i + 16))
                      *(_QWORD *)(i + 8) = v207;
                    *v210 = 0;
                    v205[4] = 0;
                    v215 = v205[2];
                    if (v215)
                    {
                      if ((v206 & 1) == 0)
                      {
                        v217 = *(_DWORD *)(a3 + 4);
                        if (v217 == *(_DWORD *)(a3 + 8))
                        {
                          v218 = v217 ? 2 * v217 : 1;
                          if (v217 < v218)
                          {
                            if (v218)
                            {
                              v219 = btAlignedAllocInternal(8 * v218, 16);
                              v217 = *(_DWORD *)(a3 + 4);
                            }
                            else
                            {
                              v219 = 0;
                            }
                            if (v217 >= 1)
                            {
                              v220 = 0;
                              do
                              {
                                *(_QWORD *)(v219 + v220) = *(_QWORD *)(*(_QWORD *)(a3 + 16) + v220);
                                v220 += 8;
                              }
                              while (8 * v217 != v220);
                            }
                            v221 = *(void ***)(a3 + 16);
                            if (v221 && *(_BYTE *)(a3 + 24))
                            {
                              btAlignedFreeInternal(v221);
                              v217 = *(_DWORD *)(a3 + 4);
                            }
                            *(_BYTE *)(a3 + 24) = 1;
                            *(_QWORD *)(a3 + 16) = v219;
                            *(_DWORD *)(a3 + 8) = v218;
                          }
                        }
                        *(_QWORD *)(*(_QWORD *)(a3 + 16) + 8 * v217) = v207;
                        *(_DWORD *)(a3 + 4) = v217 + 1;
                        v215 = v205[2];
                      }
                      do
                      {
                        v222 = *(_DWORD *)(a3 + 4);
                        if (v222 == *(_DWORD *)(a3 + 8))
                        {
                          v223 = v222 ? 2 * v222 : 1;
                          if (v222 < v223)
                          {
                            if (v223)
                            {
                              v224 = btAlignedAllocInternal(8 * v223, 16);
                              v222 = *(_DWORD *)(a3 + 4);
                            }
                            else
                            {
                              v224 = 0;
                            }
                            if (v222 >= 1)
                            {
                              v225 = 0;
                              do
                              {
                                *(_QWORD *)(v224 + v225) = *(_QWORD *)(*(_QWORD *)(a3 + 16) + v225);
                                v225 += 8;
                              }
                              while (8 * v222 != v225);
                            }
                            v226 = *(void ***)(a3 + 16);
                            if (v226 && *(_BYTE *)(a3 + 24))
                            {
                              btAlignedFreeInternal(v226);
                              v222 = *(_DWORD *)(a3 + 4);
                            }
                            *(_BYTE *)(a3 + 24) = 1;
                            *(_QWORD *)(a3 + 16) = v224;
                            *(_DWORD *)(a3 + 8) = v223;
                          }
                        }
                        *(_QWORD *)(*(_QWORD *)(a3 + 16) + 8 * v222) = *(_QWORD *)(v215 + 24);
                        *(_DWORD *)(a3 + 4) = v222 + 1;
                        btConvexHullInternal::removeEdgePair((uint64_t)a1, (_QWORD *)v205[2]);
                        v215 = v205[2];
                      }
                      while (v215);
                      v203 = v209 + 1;
                      v216 = *(_QWORD *)(a3 + 16);
                      v205 = *(_QWORD **)(v216 + 8 * v209);
                      v206 = 1;
                      if (!v205)
                      {
                        v186 = v273;
                        goto LABEL_297;
                      }
                      goto LABEL_250;
                    }
                    LODWORD(v203) = v209 + 1;
                    v216 = *(_QWORD *)(a3 + 16);
                    v205 = *(_QWORD **)(v216 + 8 * v209++);
                  }
                  while (v205);
                  v186 = v273;
                  if ((v206 & 1) == 0)
                    continue;
LABEL_297:
                  v227 = *(_DWORD *)(a3 + 4);
                  if (v227 == *(_DWORD *)(a3 + 8))
                  {
                    v228 = v227 ? 2 * v227 : 1;
                    if (v227 < v228)
                    {
                      if (v228)
                      {
                        v216 = btAlignedAllocInternal(8 * v228, 16);
                        v227 = *(_DWORD *)(a3 + 4);
                      }
                      else
                      {
                        v216 = 0;
                      }
                      if (v227 >= 1)
                      {
                        v229 = 0;
                        do
                        {
                          *(_QWORD *)(v216 + v229) = *(_QWORD *)(*(_QWORD *)(a3 + 16) + v229);
                          v229 += 8;
                        }
                        while (8 * v227 != v229);
                      }
                      v230 = *(void ***)(a3 + 16);
                      if (v230 && *(_BYTE *)(a3 + 24))
                      {
                        btAlignedFreeInternal(v230);
                        v227 = *(_DWORD *)(a3 + 4);
                      }
                      *(_BYTE *)(a3 + 24) = 1;
                      *(_QWORD *)(a3 + 16) = v216;
                      *(_DWORD *)(a3 + 8) = v228;
                    }
                  }
                  *(_QWORD *)(v216 + 8 * v227) = 0;
                  *(_DWORD *)(a3 + 4) = v227 + 1;
                }
              }
              while ((int)v203 < v186);
              v186 = *(_DWORD *)(a3 + 4);
            }
            while ((int)v203 < v186);
            v231 = v258;
            v233 = v261 << 32;
            v232 = v260 | 0xFFFFFFFF00000000;
            if (v186 <= 0)
            {
LABEL_319:
              if (v186 < 0)
              {
                if ((*(_DWORD *)(a3 + 8) & 0x80000000) != 0)
                {
                  v234 = *(void ***)(a3 + 16);
                  if (v234 && *(_BYTE *)(a3 + 24))
                    btAlignedFreeInternal(v234);
                  *(_BYTE *)(a3 + 24) = 1;
                  *(_QWORD *)(a3 + 16) = 0;
                  *(_DWORD *)(a3 + 8) = 0;
                }
                v235 = v186;
                do
                  *(_QWORD *)(*(_QWORD *)(a3 + 16) + 8 * v235++) = 0;
                while ((_DWORD)v235);
              }
            }
            *(_DWORD *)(a3 + 4) = 0;
            *((_QWORD *)v231 + 3) = v233 | v259;
            *((_QWORD *)v231 + 4) = v232;
            return 1;
          }
          v231 = v258;
          v233 = v261 << 32;
          v232 = v260 | 0xFFFFFFFF00000000;
          goto LABEL_319;
        }
        v42 = v257;
      }
      v257 = v42;
      v270 = v27;
      v27 = *(_QWORD *)(v27 + 16);
      do
      {
        v27 = *(_QWORD *)(*(_QWORD *)(v27 + 16) + 8);
        btConvexHullInternal::Vertex::dot(*(int **)(v27 + 24), &v278, (btConvexHullInternal::Rational128 *)&v274);
        v44 = btConvexHullInternal::Rational128::compare((btConvexHullInternal::Rational128 *)&v274, v25);
      }
      while (v44 < 0);
      v29 = v44;
      if (!v44)
      {
LABEL_115:
        v158 = *(btConvexHullInternal::Vertex **)(v27 + 24);
        if (!(v29 | v43))
        {
          v36 = **(uint64_t ***)(v270 + 16);
          if ((btConvexHullInternal::Vertex *)v36[3] == v158)
          {
LABEL_126:
            if (v37)
            {
              v165 = (uint64_t *)v37[2];
              if (v43 < 1)
              {
                if (v36 != v165)
                {
                  v166 = *(_DWORD *)(a3 + 4);
                  v167 = *(_DWORD *)(a3 + 8);
                  if (v166 == v167)
                  {
                    if (v166)
                      v167 = 2 * v166;
                    else
                      v167 = 1;
                    if (v166 >= v167)
                    {
                      v167 = *(_DWORD *)(a3 + 4);
                    }
                    else
                    {
                      if (v167)
                      {
                        v168 = btAlignedAllocInternal(8 * v167, 16);
                        v166 = *(_DWORD *)(a3 + 4);
                      }
                      else
                      {
                        v168 = 0;
                      }
                      if (v166 >= 1)
                      {
                        v169 = 0;
                        do
                        {
                          *(_QWORD *)(v168 + v169) = *(_QWORD *)(*(_QWORD *)(a3 + 16) + v169);
                          v169 += 8;
                        }
                        while (8 * v166 != v169);
                      }
                      v170 = *(void ***)(a3 + 16);
                      if (v170 && *(_BYTE *)(a3 + 24))
                      {
                        btAlignedFreeInternal(v170);
                        v166 = *(_DWORD *)(a3 + 4);
                      }
                      *(_BYTE *)(a3 + 24) = 1;
                      *(_QWORD *)(a3 + 16) = v168;
                      *(_DWORD *)(a3 + 8) = v167;
                      v37 = v272;
                    }
                  }
                  *(_QWORD *)(*(_QWORD *)(a3 + 16) + 8 * v166) = v37[3];
                  v171 = v166 + 1;
                  *(_DWORD *)(a3 + 4) = v171;
                  v172 = (_QWORD *)*v36;
                  if (*v36 != v37[2])
                  {
                    do
                    {
                      v173 = v172[3];
                      btConvexHullInternal::removeEdgePair((uint64_t)a1, v172);
                      v174 = *(_DWORD *)(a3 + 4);
                      v175 = *(_DWORD *)(a3 + 8);
                      if (v174 == v175)
                      {
                        if (v174)
                          v175 = 2 * v174;
                        else
                          v175 = 1;
                        if (v174 >= v175)
                        {
                          v175 = *(_DWORD *)(a3 + 4);
                        }
                        else
                        {
                          if (v175)
                          {
                            v176 = btAlignedAllocInternal(8 * v175, 16);
                            v174 = *(_DWORD *)(a3 + 4);
                          }
                          else
                          {
                            v176 = 0;
                          }
                          if (v174 >= 1)
                          {
                            v177 = 0;
                            do
                            {
                              *(_QWORD *)(v176 + v177) = *(_QWORD *)(*(_QWORD *)(a3 + 16) + v177);
                              v177 += 8;
                            }
                            while (8 * v174 != v177);
                          }
                          v178 = *(void ***)(a3 + 16);
                          if (v178 && *(_BYTE *)(a3 + 24))
                          {
                            btAlignedFreeInternal(v178);
                            v174 = *(_DWORD *)(a3 + 4);
                          }
                          *(_BYTE *)(a3 + 24) = 1;
                          *(_QWORD *)(a3 + 16) = v176;
                          *(_DWORD *)(a3 + 8) = v175;
                          v37 = v272;
                        }
                      }
                      *(_QWORD *)(*(_QWORD *)(a3 + 16) + 8 * v174) = v173;
                      v171 = v174 + 1;
                      *(_DWORD *)(a3 + 4) = v171;
                      v172 = (_QWORD *)*v36;
                    }
                    while (*v36 != v37[2]);
                    v167 = v175;
                    v7 = v258;
                  }
                  if (v171 == v167)
                  {
                    if (v167)
                      v179 = 2 * v167;
                    else
                      v179 = 1;
                    if (v167 >= v179)
                    {
                      v171 = v167;
                    }
                    else
                    {
                      if (v179)
                      {
                        v180 = btAlignedAllocInternal(8 * v179, 16);
                        v167 = *(_DWORD *)(a3 + 4);
                      }
                      else
                      {
                        v180 = 0;
                      }
                      if (v167 >= 1)
                      {
                        v181 = 0;
                        do
                        {
                          *(_QWORD *)(v180 + v181) = *(_QWORD *)(*(_QWORD *)(a3 + 16) + v181);
                          v181 += 8;
                        }
                        while (8 * v167 != v181);
                      }
                      v182 = *(void ***)(a3 + 16);
                      if (v182 && *(_BYTE *)(a3 + 24))
                      {
                        btAlignedFreeInternal(v182);
                        v167 = *(_DWORD *)(a3 + 4);
                      }
                      *(_BYTE *)(a3 + 24) = 1;
                      *(_QWORD *)(a3 + 16) = v180;
                      v171 = v167;
                      *(_DWORD *)(a3 + 8) = v179;
                    }
                    v7 = v258;
                  }
                  *(_QWORD *)(*(_QWORD *)(a3 + 16) + 8 * v171) = 0;
                  *(_DWORD *)(a3 + 4) = v171 + 1;
                }
              }
              else
              {
                *v36 = (uint64_t)v165;
                v165[1] = (uint64_t)v36;
              }
            }
            v36[4] = (uint64_t)v7;
            *(_QWORD *)(v36[2] + 32) = *(_QWORD *)(v27 + 32);
            if (!v35)
              v35 = v36;
            continue;
          }
        }
        v159 = (uint64_t *)btConvexHullInternal::newEdgePair((btConvexHullInternal *)a1, *(btConvexHullInternal::Vertex **)(v270 + 24), v158);
        if (v43)
        {
          v36 = v159;
          if (!v37)
          {
LABEL_122:
            if (v29)
            {
              v162 = (_QWORD *)v36[2];
              v163 = *(_QWORD *)(v27 + 16);
            }
            else
            {
              v163 = *(_QWORD *)(v27 + 16);
              v164 = *(_QWORD **)(v163 + 8);
              v162 = (_QWORD *)v36[2];
              *v164 = v162;
              v162[1] = v164;
            }
            *v162 = v163;
            *(_QWORD *)(v163 + 8) = v162;
            goto LABEL_126;
          }
          v160 = *(uint64_t **)(v270 + 16);
        }
        else
        {
          v160 = *(uint64_t **)(v270 + 16);
          v161 = *v160;
          *v159 = *v160;
          *(_QWORD *)(v161 + 8) = v159;
          v36 = v159;
        }
        *v160 = (uint64_t)v36;
        v36[1] = (uint64_t)v160;
        goto LABEL_122;
      }
      v46 = *(_QWORD **)(v27 + 16);
      v45 = *(_QWORD *)(v27 + 24);
      v47 = (_QWORD *)v46[1];
      v238 = v35;
      if (v47 == v46)
      {
        v47 = 0;
      }
      else
      {
        v48 = *v46;
        *v47 = *v46;
        *(_QWORD *)(v48 + 8) = v47;
        *v46 = v46;
        v46[1] = v46;
      }
      v237 = v45;
      *(_QWORD *)(v45 + 16) = v47;
      v49 = *(int **)(v27 + 32);
      v51 = v49[15];
      v50 = v49[16];
      v53 = v49[11];
      v52 = v49[12];
      v54 = v49[14];
      v55 = v49[10];
      v56 = v50 * v53 - v51 * v52;
      v57 = v54 * v52 - v55 * v50;
      v58 = v55 * v51 - v54 * v53;
      v59 = (int *)v46[4];
      v60 = v59[15];
      v61 = v59[16];
      v254 = v46;
      v62 = v59[10];
      v63 = v59[11];
      v64 = v59[12];
      v65 = v59[14];
      v66 = v61 * v63 - v60 * v64;
      v67 = v65 * v64 - v62 * v61;
      v68 = v62 * v60 - v65 * v63;
      v69 = v7[10];
      v70 = v7[11];
      v71 = v7[12];
      v72 = v7[14];
      v73 = v7[15];
      v74 = v7[16];
      v75 = v72 * v56 + v73 * v57 + v74 * v58;
      v265 = v75;
      v76 = v69 * v66 + v70 * v67 + v71 * v68;
      v267 = v76;
      v268 = v69 * v56 + v70 * v57 + v71 * v58;
      v262 = (v49[6] - (uint64_t)(int)v259) * v56
           + (v49[7] - (uint64_t)(int)v261) * v57
           + (v49[8] - (uint64_t)(int)v260) * v58;
      v263 = (v59[6] - (uint64_t)(int)v259) * v66
           + (v59[7] - (uint64_t)(int)v261) * v67
           + (v59[8] - (uint64_t)(int)v260) * v68;
      v77 = v72 * v66 + v73 * v67 + v74 * v68;
      v255 = v77;
      v78 = btConvexHullInternal::Int128::mul(v268, v77);
      v80 = v79;
      v81 = btConvexHullInternal::Int128::mul(v75, v76);
      v83 = v80 + ~v82;
      if (!v81)
        v83 = v80 - v82;
      v253 = v78 - v81;
      if (v78 - v81 < v78)
        ++v83;
      v274.i64[0] = v78 - v81;
      v274.i64[1] = v83;
      btConvexHullInternal::Pool<btConvexHullInternal::Vertex>::newObject((uint64_t)&a1[2]);
      v252 = v84;
      *(_QWORD *)(v84 + 116) = -1;
      v85 = v7[10];
      v248 = btConvexHullInternal::Int128::mul(v262 * v85, v77);
      v250 = v86;
      v87 = btConvexHullInternal::Int128::mul(v263 * v85, v265);
      v88 = v7;
      v90 = v89;
      v246 = ~v89;
      v91 = v248 - v87;
      v92 = v88[14];
      v93 = btConvexHullInternal::Int128::mul(v263 * v92, v268);
      v241 = v94;
      v243 = v93;
      v95 = btConvexHullInternal::Int128::mul(v262 * v92, v267);
      v97 = v96;
      v98 = btConvexHullInternal::Int128::operator*((uint64_t)&v274, v259);
      v100 = v250 - v90;
      if (v87)
        v100 = v250 + v246;
      v101 = v100 + v241;
      v102 = v101 - v97;
      v103 = v101 + ~v97;
      if (v91 < v248)
        v103 = v102;
      v249 = (__PAIR128__((__PAIR128__(v103 + v99, v243) + __PAIR128__(v95 == 0, v91)) >> 64, v98)
            + __PAIR128__(v243 + v91 >= v95, v243 + v91 - v95)) >> 64;
      v251 = v98 + v243 + v91 - v95;
      v104 = v258[11];
      v244 = btConvexHullInternal::Int128::mul(v262 * v104, v255);
      v247 = v105;
      v106 = btConvexHullInternal::Int128::mul(v263 * v104, v265);
      v108 = v107;
      v240 = ~v107;
      v242 = v244 - v106;
      v109 = v258[15];
      v110 = btConvexHullInternal::Int128::mul(v263 * v109, v268);
      v239 = v111;
      v112 = btConvexHullInternal::Int128::mul(v262 * v109, v267);
      v114 = v113;
      v115 = btConvexHullInternal::Int128::operator*((uint64_t)&v274, v261);
      v117 = v247 - v108;
      if (v106)
        v117 = v247 + v240;
      v118 = v117 + v239;
      v119 = v118 - v114;
      v120 = v118 + ~v114;
      if (v242 < v244)
        v120 = v119;
      v245 = __PAIR128__((__PAIR128__(v120 + v116, v110) + __PAIR128__(v112 == 0, v242)) >> 64, v115)
           + __PAIR128__(v110 + v242 >= v112, v110 + v242 - v112);
      v121 = v258[12];
      v122 = btConvexHullInternal::Int128::mul(v262 * v121, v255);
      v256 = v123;
      v124 = btConvexHullInternal::Int128::mul(v263 * v121, v265);
      v126 = v125;
      v266 = ~v125;
      v127 = v258[16];
      v269 = btConvexHullInternal::Int128::mul(v263 * v127, v268);
      v264 = v128;
      v129 = btConvexHullInternal::Int128::mul(v262 * v127, v267);
      v131 = v130;
      v132 = btConvexHullInternal::Int128::operator*((uint64_t)&v274, v260);
      v134 = v256 - v126;
      if (v124)
        v134 = v256 + v266;
      v135 = v134 + v264;
      v136 = v135 - v131;
      v137 = v135 + ~v131;
      if (v122 - v124 < v122)
        v137 = v136;
      v138 = v274.i64[1];
      *(_QWORD *)(v252 + 40) = v251;
      *(_QWORD *)(v252 + 48) = v249;
      *(_QWORD *)(v252 + 56) = v245;
      *(_QWORD *)(v252 + 72) = v132 + v269 + v122 - v124 - v129;
      *(_QWORD *)(v252 + 64) = *((_QWORD *)&v245 + 1);
      *(_QWORD *)(v252 + 80) = (__PAIR128__((__PAIR128__(v129 == 0, v269) + __PAIR128__(v137 + v133, v122 - v124)) >> 64, v132)+ __PAIR128__(v269 + v122 - v124 >= v129, v269 + v122 - v124 - v129)) >> 64;
      *(_QWORD *)(v252 + 88) = v253;
      *(_QWORD *)(v252 + 96) = v138;
      v139 = btConvexHullInternal::Int128::toScalar((btConvexHullInternal::Int128 *)(v252 + 40));
      *(_DWORD *)(v252 + 104) = (int)(float)(v139
                                           / btConvexHullInternal::Int128::toScalar((btConvexHullInternal::Int128 *)(v252 + 88)));
      v140 = btConvexHullInternal::Int128::toScalar((btConvexHullInternal::Int128 *)(v252 + 56));
      *(_DWORD *)(v252 + 108) = (int)(float)(v140
                                           / btConvexHullInternal::Int128::toScalar((btConvexHullInternal::Int128 *)(v252 + 88)));
      v141 = btConvexHullInternal::Int128::toScalar((btConvexHullInternal::Int128 *)(v252 + 72));
      *(_DWORD *)(v252 + 112) = (int)(float)(v141
                                           / btConvexHullInternal::Int128::toScalar((btConvexHullInternal::Int128 *)(v252 + 88)));
      *(_QWORD *)(v27 + 24) = v252;
      *(_QWORD *)(v252 + 16) = v254;
      v142 = *(_DWORD *)(a3 + 4);
      v143 = *(_DWORD *)(a3 + 8);
      if (v142 == v143)
      {
        if (v142)
          v143 = 2 * v142;
        else
          v143 = 1;
        if (v142 < v143)
        {
          v144 = v237;
          v35 = v238;
          v25 = v236;
          if (v143)
          {
            v145 = btAlignedAllocInternal(8 * v143, 16);
            v142 = *(_DWORD *)(a3 + 4);
          }
          else
          {
            v145 = 0;
          }
          if (v142 >= 1)
          {
            v146 = 0;
            do
            {
              *(_QWORD *)(v145 + v146) = *(_QWORD *)(*(_QWORD *)(a3 + 16) + v146);
              v146 += 8;
            }
            while (8 * v142 != v146);
          }
          v147 = *(void ***)(a3 + 16);
          if (v147 && *(_BYTE *)(a3 + 24))
          {
            btAlignedFreeInternal(v147);
            v142 = *(_DWORD *)(a3 + 4);
          }
          *(_BYTE *)(a3 + 24) = 1;
          *(_QWORD *)(a3 + 16) = v145;
          *(_DWORD *)(a3 + 8) = v143;
          goto LABEL_81;
        }
        v143 = *(_DWORD *)(a3 + 4);
      }
      v144 = v237;
      v35 = v238;
      v25 = v236;
LABEL_81:
      v37 = v272;
      *(_QWORD *)(*(_QWORD *)(a3 + 16) + 8 * v142) = v252;
      v148 = v142 + 1;
      *(_DWORD *)(a3 + 4) = v148;
      if (v148 == v143)
      {
        if (v143)
          v149 = 2 * v143;
        else
          v149 = 1;
        if (v143 >= v149)
        {
          v149 = v143;
          v148 = v143;
        }
        else
        {
          if (v149)
          {
            v150 = btAlignedAllocInternal(8 * v149, 16);
            v143 = *(_DWORD *)(a3 + 4);
          }
          else
          {
            v150 = 0;
          }
          if (v143 >= 1)
          {
            v151 = 0;
            do
            {
              *(_QWORD *)(v150 + v151) = *(_QWORD *)(*(_QWORD *)(a3 + 16) + v151);
              v151 += 8;
            }
            while (8 * v143 != v151);
          }
          v152 = *(void ***)(a3 + 16);
          if (v152 && *(_BYTE *)(a3 + 24))
          {
            btAlignedFreeInternal(v152);
            v143 = *(_DWORD *)(a3 + 4);
          }
          *(_BYTE *)(a3 + 24) = 1;
          *(_QWORD *)(a3 + 16) = v150;
          v148 = v143;
          *(_DWORD *)(a3 + 8) = v149;
          v37 = v272;
        }
      }
      else
      {
        v149 = v143;
      }
      *(_QWORD *)(*(_QWORD *)(a3 + 16) + 8 * v148) = v144;
      v153 = v148 + 1;
      *(_DWORD *)(a3 + 4) = v153;
      if (v153 == v149)
      {
        if (v149)
          v154 = 2 * v149;
        else
          v154 = 1;
        if (v149 >= v154)
        {
          v153 = v149;
        }
        else
        {
          if (v154)
          {
            v155 = btAlignedAllocInternal(8 * v154, 16);
            v149 = *(_DWORD *)(a3 + 4);
          }
          else
          {
            v155 = 0;
          }
          if (v149 >= 1)
          {
            v156 = 0;
            do
            {
              *(_QWORD *)(v155 + v156) = *(_QWORD *)(*(_QWORD *)(a3 + 16) + v156);
              v156 += 8;
            }
            while (8 * v149 != v156);
          }
          v157 = *(void ***)(a3 + 16);
          if (v157 && *(_BYTE *)(a3 + 24))
          {
            btAlignedFreeInternal(v157);
            v149 = *(_DWORD *)(a3 + 4);
          }
          *(_BYTE *)(a3 + 24) = 1;
          *(_QWORD *)(a3 + 16) = v155;
          v153 = v149;
          *(_DWORD *)(a3 + 8) = v154;
          v37 = v272;
        }
      }
      *(_QWORD *)(*(_QWORD *)(a3 + 16) + 8 * v153) = 0;
      *(_DWORD *)(a3 + 4) = v153 + 1;
      v7 = v258;
      v43 = v271;
      goto LABEL_115;
    }
    break;
  }
  v39 = (uint64_t *)v38;
  while (1)
  {
    v40 = *v39;
    if (*v39 == v38)
      return 1;
    v27 = v39[2];
    btConvexHullInternal::Vertex::dot(*(int **)(v40 + 24), &v278, (btConvexHullInternal::Rational128 *)&v274);
    v41 = btConvexHullInternal::Rational128::compare((btConvexHullInternal::Rational128 *)&v274, v25);
    v39 = (uint64_t *)v40;
    if ((v41 & 0x80000000) == 0)
    {
      v37 = v36;
      goto LABEL_39;
    }
  }
}

void btConvexHullInternal::Vertex::dot(int *a1@<X0>, uint64_t *a2@<X1>, btConvexHullInternal::Rational128 *a3@<X8>)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int128 v17;

  if (a1[29] < 0)
  {
    v6 = btConvexHullInternal::Int128::operator*((uint64_t)(a1 + 10), *a2);
    v8 = v7;
    v9 = btConvexHullInternal::Int128::operator*((uint64_t)(a1 + 14), a2[1]);
    v11 = __CFADD__(v9, v6);
    v12 = v9 + v6;
    v13 = v11;
    v14 = v10 + v8;
    v15 = btConvexHullInternal::Int128::operator*((uint64_t)(a1 + 18), a2[2]);
    v17 = __PAIR128__(v14 + v16, v15) + __PAIR128__(v13, v12);
    btConvexHullInternal::Rational128::Rational128((uint64_t)a3, (const btConvexHullInternal::Int128 *)&v17, (const btConvexHullInternal::Int128 *)(a1 + 22));
  }
  else
  {
    btConvexHullInternal::Rational128::Rational128(a3, *a2 * a1[26] + a2[1] * a1[27] + a2[2] * a1[28]);
  }
}

float btConvexHullComputer::compute(btConvexHullComputer *this, char *a2, char a3, int a4, int a5, double a6, double a7, double a8, int32x4_t a9, int32x4_t a10)
{
  float v11;
  float v12;
  float v13;
  void **v14;
  void **v15;
  void **v16;
  void **v17;
  uint64_t v18;
  void **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;
  int v25;
  uint64_t v26;
  btConvexHullInternal::Vertex *v27;
  int v28;
  int v29;
  int v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void **v40;
  uint64_t *v41;
  uint64_t v42;
  int v43;
  uint64_t *v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  void **v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  void **v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  void **v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t *v78;
  uint64_t *v79;
  int v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  void **v84;
  _DWORD *v85;
  int *v86;
  int v87;
  uint64_t *v88;
  void **v89;
  void **v90;
  void **v91;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  _BYTE v96[4];
  int v97;
  int v98;
  void *v99;
  char v100;
  float32x4_t v101;
  float32x4_t v102;
  uint64_t v103[3];
  int v104;
  uint64_t v105[3];
  int v106;
  uint64_t v107[3];
  int v108;
  int v109;
  int v110;
  void *v111;
  char v112;
  int v113;
  int v114;
  int v115;
  uint64_t v116;
  float32x4_t v117;

  if (a5 > 0)
  {
    v11 = *(float *)&a7;
    v12 = *(float *)&a6;
    memset(v103, 0, sizeof(v103));
    v104 = 256;
    v112 = 1;
    memset(v105, 0, sizeof(v105));
    v106 = 256;
    memset(v107, 0, sizeof(v107));
    v111 = 0;
    v109 = 0;
    v110 = 0;
    v108 = 256;
    btConvexHullInternal::compute(&v101, a2, a3, a4, a5, a6, a7, a8, a9, a10);
    v13 = 0.0;
    if (v12 > 0.0)
    {
      v13 = btConvexHullInternal::shrink((btConvexHullInternal *)&v101, v12, v11);
      if (v13 < 0.0)
      {
        v14 = (void **)*((_QWORD *)this + 2);
        if (v14 && *((_BYTE *)this + 24))
          btAlignedFreeInternal(v14);
        *((_BYTE *)this + 24) = 1;
        *((_QWORD *)this + 2) = 0;
        *((_DWORD *)this + 1) = 0;
        *((_DWORD *)this + 2) = 0;
        v15 = (void **)*((_QWORD *)this + 6);
        if (v15 && *((_BYTE *)this + 56))
          btAlignedFreeInternal(v15);
        *((_BYTE *)this + 56) = 1;
        *((_QWORD *)this + 6) = 0;
        *((_DWORD *)this + 9) = 0;
        *((_DWORD *)this + 10) = 0;
        v16 = (void **)*((_QWORD *)this + 10);
        if (v16 && *((_BYTE *)this + 88))
          btAlignedFreeInternal(v16);
        *((_BYTE *)this + 88) = 1;
        *((_QWORD *)this + 10) = 0;
        *((_DWORD *)this + 17) = 0;
        *((_DWORD *)this + 18) = 0;
        goto LABEL_131;
      }
    }
    if ((*((_DWORD *)this + 1) & 0x80000000) != 0 && (*((_DWORD *)this + 2) & 0x80000000) != 0)
    {
      v17 = (void **)*((_QWORD *)this + 2);
      if (v17 && *((_BYTE *)this + 24))
        btAlignedFreeInternal(v17);
      *((_BYTE *)this + 24) = 1;
      *((_QWORD *)this + 2) = 0;
      *((_DWORD *)this + 2) = 0;
    }
    *((_DWORD *)this + 1) = 0;
    v18 = *((int *)this + 9);
    if ((v18 & 0x80000000) != 0)
    {
      if ((*((_DWORD *)this + 10) & 0x80000000) != 0)
      {
        v19 = (void **)*((_QWORD *)this + 6);
        if (v19 && *((_BYTE *)this + 56))
          btAlignedFreeInternal(v19);
        *((_BYTE *)this + 56) = 1;
        *((_QWORD *)this + 6) = 0;
        *((_DWORD *)this + 10) = 0;
      }
      v20 = 12 * v18;
      v21 = v18 + 1;
      do
      {
        v22 = *((_QWORD *)this + 6) + v20;
        *(_DWORD *)(v22 + 8) = 0;
        *(_QWORD *)v22 = 0;
        v20 += 12;
        LODWORD(v22) = v21++;
      }
      while ((_DWORD)v22);
    }
    *((_DWORD *)this + 9) = 0;
    v23 = *((int *)this + 17);
    if ((v23 & 0x80000000) != 0)
    {
      if ((*((_DWORD *)this + 18) & 0x80000000) != 0)
      {
        v24 = (void **)*((_QWORD *)this + 10);
        if (v24 && *((_BYTE *)this + 88))
          btAlignedFreeInternal(v24);
        *((_BYTE *)this + 88) = 1;
        *((_QWORD *)this + 10) = 0;
        *((_DWORD *)this + 18) = 0;
      }
      bzero((void *)(*((_QWORD *)this + 10) + 4 * v23), 4 * ~(_DWORD)v23 + 4);
    }
    *((_DWORD *)this + 17) = 0;
    v100 = 1;
    v99 = 0;
    v97 = 0;
    v98 = 0;
    getVertexCopy(v116, (uint64_t)v96);
    v25 = v97;
    if (v97 <= 0)
    {
      v74 = (void **)v99;
      if (!v99)
        goto LABEL_131;
    }
    else
    {
      v26 = 0;
      do
      {
        v27 = (btConvexHullInternal::Vertex *)*((_QWORD *)v99 + v26);
        btConvexHullInternal::Vertex::xvalue(v27);
        v117.i32[v114] = v28;
        btConvexHullInternal::Vertex::yvalue(v27);
        v117.i32[v115] = v29;
        btConvexHullInternal::Vertex::zvalue(v27);
        v117.i32[v113] = v30;
        v31 = v117;
        v33 = v101;
        v32 = v102;
        v34 = *((_DWORD *)this + 1);
        if (v34 == *((_DWORD *)this + 2))
        {
          v35 = v34 ? 2 * v34 : 1;
          if (v34 < v35)
          {
            v93 = v102;
            v94 = v101;
            v95 = v117;
            if (v35)
            {
              v36 = btAlignedAllocInternal(16 * v35, 16);
              v33 = v94;
              v31 = v95;
              v37 = v36;
              v34 = *((_DWORD *)this + 1);
            }
            else
            {
              v37 = 0;
            }
            if (v34 >= 1)
            {
              v38 = 0;
              v39 = 16 * v34;
              do
              {
                *(_OWORD *)(v37 + v38) = *(_OWORD *)(*((_QWORD *)this + 2) + v38);
                v38 += 16;
              }
              while (v39 != v38);
            }
            v40 = (void **)*((_QWORD *)this + 2);
            if (v40 && *((_BYTE *)this + 24))
            {
              btAlignedFreeInternal(v40);
              v33 = v94;
              v31 = v95;
            }
            *((_BYTE *)this + 24) = 1;
            *((_QWORD *)this + 2) = v37;
            *((_DWORD *)this + 2) = v35;
            v34 = *((_DWORD *)this + 1);
            v32 = v93;
          }
        }
        *(float32x4_t *)(*((_QWORD *)this + 2) + 16 * v34) = vmlaq_f32(v32, v31, v33);
        ++*((_DWORD *)this + 1);
        v41 = (uint64_t *)*((_QWORD *)v27 + 2);
        if (v41)
        {
          v42 = 0xFFFFFFFFLL;
          v43 = -1;
          v44 = (uint64_t *)*((_QWORD *)v27 + 2);
          do
          {
            if ((v44[5] & 0x80000000) != 0)
            {
              v45 = *((_DWORD *)this + 9);
              v46 = v45;
              if (v45 == *((_DWORD *)this + 10))
              {
                v47 = v45 ? 2 * v45 : 1;
                v46 = *((_DWORD *)this + 9);
                if (v45 < v47)
                {
                  if (v47)
                    v48 = btAlignedAllocInternal(12 * v47, 16);
                  else
                    v48 = 0;
                  v49 = *((_DWORD *)this + 9);
                  if (v49 >= 1)
                  {
                    v50 = 0;
                    v51 = 12 * v49;
                    do
                    {
                      v52 = v48 + v50;
                      v53 = (uint64_t *)(*((_QWORD *)this + 6) + v50);
                      v54 = *v53;
                      *(_DWORD *)(v52 + 8) = *((_DWORD *)v53 + 2);
                      *(_QWORD *)v52 = v54;
                      v50 += 12;
                    }
                    while (v51 != v50);
                  }
                  v55 = (void **)*((_QWORD *)this + 6);
                  if (v55 && *((_BYTE *)this + 56))
                    btAlignedFreeInternal(v55);
                  *((_BYTE *)this + 56) = 1;
                  *((_QWORD *)this + 6) = v48;
                  *((_DWORD *)this + 10) = v47;
                  v46 = *((_DWORD *)this + 9);
                }
              }
              v56 = *((_QWORD *)this + 6) + 12 * v46;
              *(_DWORD *)(v56 + 8) = 0;
              *(_QWORD *)v56 = 0;
              v57 = *((_DWORD *)this + 10);
              v58 = *((_DWORD *)this + 9) + 1;
              *((_DWORD *)this + 9) = v58;
              if (v58 == v57)
              {
                v59 = v58 ? 2 * v58 : 1;
                if (v58 < v59)
                {
                  if (v59)
                  {
                    v60 = btAlignedAllocInternal(12 * v59, 16);
                    v58 = *((_DWORD *)this + 9);
                  }
                  else
                  {
                    v60 = 0;
                  }
                  if (v58 >= 1)
                  {
                    v61 = 0;
                    v62 = 12 * v58;
                    do
                    {
                      v63 = v60 + v61;
                      v64 = (uint64_t *)(*((_QWORD *)this + 6) + v61);
                      v65 = *v64;
                      *(_DWORD *)(v63 + 8) = *((_DWORD *)v64 + 2);
                      *(_QWORD *)v63 = v65;
                      v61 += 12;
                    }
                    while (v62 != v61);
                  }
                  v66 = (void **)*((_QWORD *)this + 6);
                  if (v66 && *((_BYTE *)this + 56))
                    btAlignedFreeInternal(v66);
                  *((_BYTE *)this + 56) = 1;
                  *((_QWORD *)this + 6) = v60;
                  *((_DWORD *)this + 10) = v59;
                  v58 = *((_DWORD *)this + 9);
                }
              }
              v67 = *((_QWORD *)this + 6) + 12 * v58;
              *(_DWORD *)(v67 + 8) = 0;
              *(_QWORD *)v67 = 0;
              ++*((_DWORD *)this + 9);
              v68 = *((_QWORD *)this + 6);
              v69 = v45 + 1;
              *((_DWORD *)v44 + 10) = v45;
              *(_DWORD *)(v44[2] + 40) = v45 + 1;
              v70 = v68 + 12 * v45;
              *(_DWORD *)(v70 + 4) = 1;
              v71 = v68 + 12 * v69;
              *(_DWORD *)(v71 + 4) = -1;
              *(_DWORD *)(v70 + 8) = getVertexCopy(v44[3], (uint64_t)v96);
              *(_DWORD *)(v71 + 8) = v26;
            }
            v72 = *((_DWORD *)v44 + 10);
            v73 = v72;
            if ((v43 & 0x80000000) == 0)
            {
              *(_DWORD *)(*((_QWORD *)this + 6) + 12 * (int)v72) = v43 - v72;
              v73 = v42;
            }
            v44 = (uint64_t *)*v44;
            v42 = v73;
            v43 = v72;
          }
          while (v44 != v41);
          *(_DWORD *)(*((_QWORD *)this + 6) + 12 * (int)v73) = v72 - v73;
          v25 = v97;
        }
        ++v26;
      }
      while (v26 < v25);
      v74 = (void **)v99;
      v75 = v26;
      if ((_DWORD)v26)
      {
        v76 = 0;
        while (1)
        {
          v77 = v74[v76];
          v78 = (uint64_t *)v77[2];
          if (v78)
            break;
LABEL_115:
          if (++v76 == v75)
            goto LABEL_116;
        }
        v79 = (uint64_t *)v77[2];
        while (1)
        {
          v80 = *((_DWORD *)v79 + 10);
          if ((v80 & 0x80000000) == 0)
            break;
LABEL_114:
          v79 = (uint64_t *)*v79;
          if (v79 == v78)
            goto LABEL_115;
        }
        LODWORD(v81) = *((_DWORD *)this + 17);
        if ((_DWORD)v81 != *((_DWORD *)this + 18) || (!(_DWORD)v81 ? (v82 = 1) : (v82 = 2 * v81), (int)v81 >= v82))
        {
LABEL_112:
          *(_DWORD *)(*((_QWORD *)this + 10) + 4 * (int)v81) = v80;
          ++*((_DWORD *)this + 17);
          v88 = v79;
          do
          {
            *((_DWORD *)v88 + 10) = -1;
            v88 = *(uint64_t **)(v88[2] + 8);
          }
          while (v88 != v79);
          goto LABEL_114;
        }
        if (v82)
        {
          v83 = btAlignedAllocInternal(4 * v82, 16);
          LODWORD(v81) = *((_DWORD *)this + 17);
        }
        else
        {
          v83 = 0;
        }
        v84 = (void **)*((_QWORD *)this + 10);
        if ((int)v81 < 1)
        {
          if (!v84)
          {
LABEL_111:
            *((_BYTE *)this + 88) = 1;
            *((_QWORD *)this + 10) = v83;
            *((_DWORD *)this + 18) = v82;
            LODWORD(v81) = *((_DWORD *)this + 17);
            v80 = *((_DWORD *)v79 + 10);
            goto LABEL_112;
          }
        }
        else
        {
          v81 = v81;
          v85 = (_DWORD *)v83;
          v86 = (int *)*((_QWORD *)this + 10);
          do
          {
            v87 = *v86++;
            *v85++ = v87;
            --v81;
          }
          while (v81);
        }
        if (*((_BYTE *)this + 88))
          btAlignedFreeInternal(v84);
        goto LABEL_111;
      }
LABEL_116:
      if (!v74)
      {
LABEL_131:
        if (v111 && v112)
          btAlignedFreeInternal((void **)v111);
        v112 = 1;
        v111 = 0;
        v109 = 0;
        v110 = 0;
        btConvexHullInternal::Pool<btConvexHullInternal::Face>::~Pool(v107);
        btConvexHullInternal::Pool<btConvexHullInternal::Face>::~Pool(v105);
        btConvexHullInternal::Pool<btConvexHullInternal::Face>::~Pool(v103);
        return v13;
      }
    }
    if (v100)
      btAlignedFreeInternal(v74);
    goto LABEL_131;
  }
  v89 = (void **)*((_QWORD *)this + 2);
  if (v89 && *((_BYTE *)this + 24))
    btAlignedFreeInternal(v89);
  *((_BYTE *)this + 24) = 1;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 1) = 0;
  *((_DWORD *)this + 2) = 0;
  v90 = (void **)*((_QWORD *)this + 6);
  if (v90 && *((_BYTE *)this + 56))
    btAlignedFreeInternal(v90);
  *((_BYTE *)this + 56) = 1;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 9) = 0;
  *((_DWORD *)this + 10) = 0;
  v91 = (void **)*((_QWORD *)this + 10);
  if (v91 && *((_BYTE *)this + 88))
    btAlignedFreeInternal(v91);
  *((_BYTE *)this + 88) = 1;
  *((_QWORD *)this + 10) = 0;
  *((_DWORD *)this + 17) = 0;
  *((_DWORD *)this + 18) = 0;
  return 0.0;
}

uint64_t getVertexCopy(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  BOOL v11;

  v2 = *(unsigned int *)(a1 + 120);
  if ((v2 & 0x80000000) != 0)
  {
    v2 = *(unsigned int *)(a2 + 4);
    v5 = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 120) = v2;
    v6 = v2;
    if ((_DWORD)v2 == v5)
    {
      v7 = (_DWORD)v2 ? 2 * v2 : 1;
      v6 = v2;
      if ((int)v2 < v7)
      {
        if (v7)
        {
          v8 = btAlignedAllocInternal(8 * v7, 16);
          v6 = *(_DWORD *)(a2 + 4);
        }
        else
        {
          v8 = 0;
          v6 = v2;
        }
        if (v6 >= 1)
        {
          v9 = 0;
          do
          {
            *(_QWORD *)(v8 + v9) = *(_QWORD *)(*(_QWORD *)(a2 + 16) + v9);
            v9 += 8;
          }
          while (8 * v6 != v9);
        }
        v10 = *(void ***)(a2 + 16);
        if (v10)
          v11 = *(_BYTE *)(a2 + 24) == 0;
        else
          v11 = 1;
        if (!v11)
        {
          btAlignedFreeInternal(v10);
          v6 = *(_DWORD *)(a2 + 4);
        }
        *(_BYTE *)(a2 + 24) = 1;
        *(_QWORD *)(a2 + 16) = v8;
        *(_DWORD *)(a2 + 8) = v7;
      }
    }
    *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v6) = a1;
    *(_DWORD *)(a2 + 4) = v6 + 1;
  }
  return v2;
}

double btConvexHullInternal::Rational128::Rational128(btConvexHullInternal::Rational128 *this, uint64_t a2)
{
  double result;

  if (a2 < 1)
  {
    if (a2 < 0)
    {
      *((_DWORD *)this + 8) = -1;
      *(_QWORD *)this = -a2;
      *((_QWORD *)this + 1) = a2 > 0;
    }
    else
    {
      *((_DWORD *)this + 8) = 0;
      *(_QWORD *)this = 0;
      *((_QWORD *)this + 1) = 0;
    }
  }
  else
  {
    *((_DWORD *)this + 8) = 1;
    *(_QWORD *)this = a2;
    *((_QWORD *)this + 1) = (unint64_t)a2 >> 63;
  }
  *(_QWORD *)&result = 1;
  *((_OWORD *)this + 1) = xmmword_1DD009B50;
  *((_BYTE *)this + 36) = 1;
  return result;
}

uint64_t btConvexHullInternal::Rational128::Rational128(uint64_t this, const btConvexHullInternal::Int128 *a2, const btConvexHullInternal::Int128 *a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(_QWORD *)(this + 8);
  if (v3 < 0)
  {
    v4 = -1;
    *(_DWORD *)(this + 32) = -1;
    v5 = *((_QWORD *)a2 + 1);
    if (*(_QWORD *)a2)
      v6 = ~v5;
    else
      v6 = -v5;
    *(_QWORD *)this = -*(_QWORD *)a2;
    *(_QWORD *)(this + 8) = v6;
  }
  else
  {
    if (v3)
      v4 = 1;
    else
      v4 = *(_QWORD *)this != 0;
    *(_DWORD *)(this + 32) = v4;
    *(_OWORD *)this = *(_OWORD *)a2;
  }
  v7 = *(_QWORD *)(this + 24);
  if (v7 < 0)
  {
    *(_DWORD *)(this + 32) = -v4;
    v8 = *(_QWORD *)(this + 16);
    v9 = -v8;
    if (v8)
      v10 = ~v7;
    else
      v10 = -v7;
    *(_QWORD *)(this + 16) = v9;
    *(_QWORD *)(this + 24) = v10;
  }
  else
  {
    *(_OWORD *)(this + 16) = *(_OWORD *)a3;
  }
  *(_BYTE *)(this + 36) = 0;
  return this;
}

uint64_t *btConvexHullInternal::Pool<btConvexHullInternal::Face>::~Pool(uint64_t *a1)
{
  uint64_t i;

  for (i = *a1; *a1; i = *a1)
  {
    *a1 = *(_QWORD *)(i + 16);
    btAlignedFreeInternal(*(void ***)i);
    btAlignedFreeInternal((void **)i);
  }
  return a1;
}

uint64_t btAlignedObjectArray<btConvexHullInternal::Point32>::quickSortInternal<pointCmp>(uint64_t result, uint64_t a2, int a3, int a4)
{
  uint64_t v7;
  int v8;
  int v9;
  int *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  _DWORD *i;
  int v17;
  uint64_t j;
  int v19;
  int v20;
  __int128 v21;

  v7 = result;
  do
  {
    v8 = a3;
    v9 = a3 + a4;
    if (a3 + a4 < 0 != __OFADD__(a3, a4))
      ++v9;
    v10 = (int *)(*(_QWORD *)(v7 + 16) + 16 * (v9 >> 1));
    v11 = *v10;
    v12 = v10[1];
    v13 = v10[2];
    v14 = a4;
    do
    {
      v15 = *(_QWORD *)(v7 + 16);
      for (i = (_DWORD *)(v15 + 16 * a3); ; i += 4)
      {
        v17 = i[1];
        if (v17 >= v12 && (v17 != v12 || *i >= v11 && (*i != v11 || i[2] >= v13)))
          break;
        ++a3;
      }
      for (j = 16 * v14; ; j -= 16)
      {
        v19 = *(_DWORD *)(v15 + j + 4);
        if (v12 >= v19)
        {
          if (v12 != v19)
            break;
          v20 = *(_DWORD *)(v15 + j);
          if (v11 >= v20 && (v11 != v20 || v13 >= *(_DWORD *)(v15 + j + 8)))
            break;
        }
        --v14;
      }
      if (a3 <= v14)
      {
        v21 = *(_OWORD *)i;
        *(_OWORD *)i = *(_OWORD *)(v15 + j);
        *(_OWORD *)(*(_QWORD *)(v7 + 16) + j) = v21;
        ++a3;
        --v14;
      }
    }
    while (a3 <= v14);
    if (v14 > v8)
      result = btAlignedObjectArray<btConvexHullInternal::Point32>::quickSortInternal<pointCmp>(v7, a2);
  }
  while (a3 < a4);
  return result;
}

void btGeometryUtil::getPlaneEquationsFromVertices(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float32x4_t v9;
  float32x4_t v10;
  int8x8_t v11;
  float32x4_t v12;
  int8x8_t v13;
  float32x4_t v14;
  float32x4_t v15;
  int8x16_t v16;
  float32x4_t v17;
  float v18;
  char v19;
  float32x4_t v20;
  char v21;
  int8x16_t v22;
  float v23;
  float32x4_t v24;
  unint64_t v25;
  uint64_t v26;
  BOOL v27;
  int8x16_t v28;
  int8x16_t v29;
  float v30;
  unint64_t v31;
  uint64_t v32;
  BOOL v33;
  float v34;
  int8x16_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void **v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  float32x4_t v49;
  float32x4_t v50;

  v2 = *(unsigned int *)(a1 + 4);
  if ((int)v2 >= 1)
  {
    v5 = 0;
    v45 = 2;
    v44 = 1;
    do
    {
      v43 = v5 + 1;
      if (v5 + 1 < v2)
      {
        v6 = *(_QWORD *)(a1 + 16);
        v7 = v44;
        v47 = v45;
        do
        {
          v46 = v7 + 1;
          if ((int)v2 > (int)v7 + 1)
          {
            v48 = *(_QWORD *)(a1 + 16);
            v8 = v47;
            do
            {
              v9 = *(float32x4_t *)(v6 + 16 * v5);
              v10 = vsubq_f32(*(float32x4_t *)(v48 + 16 * v7), v9);
              v11 = (int8x8_t)vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL).u64[0];
              v10.i32[3] = 0;
              v12 = vsubq_f32(*(float32x4_t *)(*(_QWORD *)(a1 + 16) + 16 * v8), v9);
              v13 = (int8x8_t)vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL).u64[0];
              v12.i32[3] = 0;
              *(int8x8_t *)v14.f32 = vext_s8(*(int8x8_t *)v10.f32, v11, 4uLL);
              v14.i64[1] = v10.i64[0];
              *(int8x8_t *)v15.f32 = vext_s8(*(int8x8_t *)v12.f32, v13, 4uLL);
              v15.i64[1] = v12.i64[0];
              v16 = (int8x16_t)vmlaq_f32(vnegq_f32(vmulq_f32(v14, v12)), v10, v15);
              v17.i64[0] = vextq_s8(v16, v16, 4uLL).u64[0];
              v17.i64[1] = v16.u32[0];
              v18 = 1.0;
              v19 = 1;
              v49 = v17;
              do
              {
                v20 = vmulq_n_f32(v17, v18);
                v20.i32[3] = 0;
                v21 = v19;
                v22 = (int8x16_t)vmulq_f32(v20, v20);
                v23 = vadd_f32(vpadd_f32(*(float32x2_t *)v22.i8, *(float32x2_t *)v22.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL)).f32[0];
                if (v23 > 0.0001)
                {
                  v24 = vmulq_n_f32(v20, 1.0 / sqrtf(v23));
                  v25 = *(unsigned int *)(a2 + 4);
                  if ((int)v25 < 1)
                    goto LABEL_14;
                  v26 = 0;
                  v27 = 0;
                  do
                  {
                    v28 = (int8x16_t)vmulq_f32(*(float32x4_t *)(*(_QWORD *)(a2 + 16) + 16 * v26), v24);
                    if (vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL), vpadd_f32(*(float32x2_t *)v28.i8, *(float32x2_t *)v28.i8)).f32[0] > 0.999)break;
                    v27 = ++v26 >= v25;
                  }
                  while (v25 != v26);
                  if (v27)
                  {
LABEL_14:
                    v29 = (int8x16_t)vmulq_f32(*(float32x4_t *)(v6 + 16 * v5), v24);
                    v30 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL), vpadd_f32(*(float32x2_t *)v29.i8, *(float32x2_t *)v29.i8)).f32[0];
                    v24.f32[3] = -v30;
                    v31 = *(unsigned int *)(a1 + 4);
                    if ((int)v31 < 1)
                      goto LABEL_23;
                    v32 = 0;
                    v33 = 0;
                    v34 = -0.01 - v30;
                    do
                    {
                      v35 = (int8x16_t)vmulq_f32(*(float32x4_t *)(*(_QWORD *)(a1 + 16) + 16 * v32), v24);
                      if ((float)(v34
                                 + vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL), vpadd_f32(*(float32x2_t *)v35.i8, *(float32x2_t *)v35.i8)).f32[0]) > 0.0)break;
                      v33 = ++v32 >= v31;
                    }
                    while (v31 != v32);
                    if (v33)
                    {
LABEL_23:
                      if ((_DWORD)v25 == *(_DWORD *)(a2 + 8))
                      {
                        v36 = (_DWORD)v25 ? 2 * v25 : 1;
                        if ((int)v25 < v36)
                        {
                          v50 = v24;
                          if (v36)
                          {
                            v37 = btAlignedAllocInternal(16 * v36, 16);
                            v17 = v49;
                            v24 = v50;
                            v38 = v37;
                            LODWORD(v25) = *(_DWORD *)(a2 + 4);
                          }
                          else
                          {
                            v38 = 0;
                          }
                          if ((int)v25 >= 1)
                          {
                            v39 = 0;
                            v40 = 16 * v25;
                            do
                            {
                              *(_OWORD *)(v38 + v39) = *(_OWORD *)(*(_QWORD *)(a2 + 16) + v39);
                              v39 += 16;
                            }
                            while (v40 != v39);
                          }
                          v41 = *(void ***)(a2 + 16);
                          if (v41)
                            v42 = *(_BYTE *)(a2 + 24) == 0;
                          else
                            v42 = 1;
                          if (!v42)
                          {
                            btAlignedFreeInternal(v41);
                            v17 = v49;
                            v24 = v50;
                          }
                          *(_BYTE *)(a2 + 24) = 1;
                          *(_QWORD *)(a2 + 16) = v38;
                          *(_DWORD *)(a2 + 8) = v36;
                          LODWORD(v25) = *(_DWORD *)(a2 + 4);
                        }
                      }
                      *(float32x4_t *)(*(_QWORD *)(a2 + 16) + 16 * (int)v25) = v24;
                      ++*(_DWORD *)(a2 + 4);
                    }
                  }
                }
                v19 = 0;
                v18 = -1.0;
              }
              while ((v21 & 1) != 0);
              ++v8;
            }
            while ((int)v2 > (int)v8);
          }
          ++v47;
          ++v7;
        }
        while (v46 != v2);
      }
      ++v44;
      ++v45;
      ++v5;
    }
    while (v43 != v2);
  }
}

void btGeometryUtil::getVerticesFromPlaneEquations(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  int8x16_t v17;
  float32x4_t v18;
  int8x16_t v19;
  float32x4_t v20;
  float32x4_t v21;
  int8x16_t v22;
  float32x4_t v23;
  int8x16_t v24;
  int8x16_t v25;
  float32x4_t v26;
  int8x16_t v27;
  int8x16_t v28;
  float v29;
  float32x4_t v30;
  unint64_t v31;
  uint64_t v32;
  BOOL v33;
  int8x16_t v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void **v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  float32x4_t v48;

  v2 = *(unsigned int *)(a1 + 4);
  if ((int)v2 >= 1)
  {
    v5 = 0;
    v45 = 2;
    v44 = 1;
    do
    {
      v43 = v5 + 1;
      if (v5 + 1 < v2)
      {
        v6 = *(_QWORD *)(a1 + 16);
        v8 = v44;
        v7 = v45;
        do
        {
          v9 = v8 + 1;
          if ((int)v2 > (int)v8 + 1)
          {
            v10 = *(_QWORD *)(a1 + 16);
            v11 = v7;
            do
            {
              v12 = *(_QWORD *)(a1 + 16);
              v13 = *(float32x4_t *)(v10 + 16 * v8);
              v14 = *(float32x4_t *)(v12 + 16 * v11);
              *(int8x8_t *)v15.f32 = vext_s8(*(int8x8_t *)v13.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL), 4uLL);
              v15.i64[1] = *(_QWORD *)(v10 + 16 * v8);
              *(int8x8_t *)v16.f32 = vext_s8(*(int8x8_t *)v14.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL), 4uLL);
              v16.i64[1] = *(_QWORD *)(v12 + 16 * v11);
              v17 = (int8x16_t)vmlaq_f32(vnegq_f32(vmulq_f32(v15, v14)), v13, v16);
              v18.i64[0] = vextq_s8(v17, v17, 4uLL).u64[0];
              v18.i64[1] = v17.u32[0];
              v19 = (int8x16_t)vmulq_f32(v18, v18);
              if (vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL), vpadd_f32(*(float32x2_t *)v19.i8, *(float32x2_t *)v19.i8)).f32[0] > 0.0001)
              {
                v20 = *(float32x4_t *)(v6 + 16 * v5);
                *(int8x8_t *)v21.f32 = vext_s8(*(int8x8_t *)v20.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL), 4uLL);
                v21.i64[1] = *(_QWORD *)(v6 + 16 * v5);
                v22 = (int8x16_t)vmlaq_f32(vnegq_f32(vmulq_f32(v16, v20)), v14, v21);
                v23.i64[0] = vextq_s8(v22, v22, 4uLL).u64[0];
                v23.i64[1] = v22.u32[0];
                v24 = (int8x16_t)vmulq_f32(v23, v23);
                if (vadd_f32(vpadd_f32(*(float32x2_t *)v24.i8, *(float32x2_t *)v24.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL)).f32[0] > 0.0001)
                {
                  v25 = (int8x16_t)vmlaq_f32(vnegq_f32(vmulq_f32(v21, v13)), v20, v15);
                  v26.i64[0] = vextq_s8(v25, v25, 4uLL).u64[0];
                  v26.i64[1] = v25.u32[0];
                  v27 = (int8x16_t)vmulq_f32(v26, v26);
                  if (vadd_f32(vpadd_f32(*(float32x2_t *)v27.i8, *(float32x2_t *)v27.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL)).f32[0] > 0.0001)
                  {
                    v28 = (int8x16_t)vmulq_f32(v20, v18);
                    LODWORD(v29) = vadd_f32(vpadd_f32(*(float32x2_t *)v28.i8, *(float32x2_t *)v28.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL)).u32[0];
                    if (fabsf(v29) > 0.000001)
                    {
                      v30 = vmulq_n_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v18, v20, 3), v23, v13, 3), v26, v14, 3), -1.0 / v29);
                      v31 = *(unsigned int *)(a1 + 4);
                      if ((int)v31 < 1)
                        goto LABEL_16;
                      v32 = 0;
                      v33 = 0;
                      do
                      {
                        v34 = (int8x16_t)vmulq_f32(*(float32x4_t *)(v12 + 16 * v32), v30);
                        if ((float)((float)(COERCE_FLOAT(HIDWORD(*(_OWORD *)(v12 + 16 * v32))) + -0.01)
                                   + vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL), vpadd_f32(*(float32x2_t *)v34.i8, *(float32x2_t *)v34.i8)).f32[0]) > 0.0)break;
                        v33 = ++v32 >= v31;
                      }
                      while (v31 != v32);
                      if (v33)
                      {
LABEL_16:
                        v35 = *(_DWORD *)(a2 + 4);
                        if (v35 == *(_DWORD *)(a2 + 8))
                        {
                          v36 = 2 * v35;
                          if (!v35)
                            v36 = 1;
                          if (v35 < v36)
                          {
                            v46 = v36;
                            v47 = v9;
                            v48 = v30;
                            if (v36)
                            {
                              v37 = btAlignedAllocInternal(16 * v36, 16);
                              v30 = v48;
                              v38 = v37;
                              v35 = *(_DWORD *)(a2 + 4);
                            }
                            else
                            {
                              v38 = 0;
                            }
                            if (v35 >= 1)
                            {
                              v39 = 0;
                              v40 = 16 * v35;
                              do
                              {
                                *(_OWORD *)(v38 + v39) = *(_OWORD *)(*(_QWORD *)(a2 + 16) + v39);
                                v39 += 16;
                              }
                              while (v40 != v39);
                            }
                            v41 = *(void ***)(a2 + 16);
                            if (v41)
                              v42 = *(_BYTE *)(a2 + 24) == 0;
                            else
                              v42 = 1;
                            if (!v42)
                            {
                              btAlignedFreeInternal(v41);
                              v30 = v48;
                            }
                            *(_BYTE *)(a2 + 24) = 1;
                            *(_QWORD *)(a2 + 16) = v38;
                            v9 = v47;
                            *(_DWORD *)(a2 + 8) = v46;
                            v35 = *(_DWORD *)(a2 + 4);
                          }
                        }
                        *(float32x4_t *)(*(_QWORD *)(a2 + 16) + 16 * v35) = v30;
                        ++*(_DWORD *)(a2 + 4);
                      }
                    }
                  }
                }
              }
              ++v11;
            }
            while ((int)v2 > (int)v11);
          }
          ++v7;
          v8 = v9;
        }
        while (v9 != v2);
      }
      ++v44;
      ++v45;
      ++v5;
    }
    while (v43 != v2);
  }
}

uint64_t _maxdot_large_sel(const float *a1, const float *a2, unint64_t a3, float *a4)
{
  uint64_t (*v8)(const float *, const float *, unint64_t, float *);
  size_t v10;
  int v11;

  if ((btGetCpuCapabilities(void)::testedCapabilities & 1) == 0)
  {
    v11 = 0;
    v10 = 4;
    if (!sysctlbyname("hw.optional.neon_hpfp", &v11, &v10, 0, 0) && v11)
      btGetCpuCapabilities(void)::capabilities |= 0x2000u;
    btGetCpuCapabilities(void)::testedCapabilities = 1;
  }
  if (btGetCpuCapabilities(void)::capabilities >= 0x2000)
    v8 = (uint64_t (*)(const float *, const float *, unint64_t, float *))_maxdot_large_v1;
  else
    v8 = (uint64_t (*)(const float *, const float *, unint64_t, float *))_maxdot_large_v0;
  _maxdot_large = v8;
  return v8(a1, a2, a3, a4);
}

float _maxdot_large_v1(const float *a1, float32x4_t *a2, unint64_t a3, float *a4)
{
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  unint64_t v7;
  int32x4_t v8;
  int8x16_t v9;
  float32x4_t v10;
  unint64_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  float32x4_t v15;
  int32x4_t v16;
  float32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  float32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  int8x16_t v25;
  int32x4_t v26;
  int32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  int8x16_t v30;
  unint64_t v31;
  int32x4_t v32;
  __int128 v33;
  int32x4_t v34;
  __int128 v35;
  int32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  float32x4_t v41;
  int8x16_t v42;
  unint64_t v43;
  int32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  float32x4_t v49;
  int8x16_t v50;
  int32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  int32x2_t v54;
  int32x4_t v55;
  int8x16_t v56;
  float32x2_t v57;
  int8x8_t v58;
  float32x2_t v59;
  int32x2_t v60;
  float32x2_t v61;
  int8x8_t v62;
  float result;

  v4 = *a2;
  v5 = (float32x4_t)vdupq_lane_s64(a2->i64[0], 0);
  v6 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a2, 2);
  if (a3 >= 8)
  {
    v8 = (int32x4_t)xmmword_1DD029FB0;
    v10.i64[0] = 0x7F0000007FLL;
    v10.i64[1] = 0x7F0000007FLL;
    v9.i64[0] = -1;
    v9.i64[1] = -1;
    v11 = 8;
    v12.i64[0] = 0x400000004;
    v12.i64[1] = 0x400000004;
    v13.i64[0] = 0x800000008;
    v13.i64[1] = 0x800000008;
    do
    {
      v14 = *(int32x4_t *)(a1 + 4);
      v15.i64[0] = *(_QWORD *)a1;
      v16 = *(int32x4_t *)(a1 + 12);
      v15.i64[1] = *((_QWORD *)a1 + 2);
      v17.i64[0] = *((_QWORD *)a1 + 4);
      v17.i64[1] = *((_QWORD *)a1 + 6);
      v14.i32[0] = *((_QWORD *)a1 + 1);
      v16.i32[0] = *((_QWORD *)a1 + 5);
      v18 = (int32x4_t)vmulq_f32(v15, v5);
      v19 = (int32x4_t)vmulq_f32(v17, v5);
      v20 = (float32x4_t)vuzp1q_s32(v14, v16);
      v21 = *(int32x4_t *)(a1 + 20);
      v17.i64[0] = *((_QWORD *)a1 + 8);
      v17.i64[1] = *((_QWORD *)a1 + 10);
      v21.i32[0] = *((_QWORD *)a1 + 9);
      v22 = *(int32x4_t *)(a1 + 28);
      v23.i64[0] = *((_QWORD *)a1 + 12);
      v23.i64[1] = *((_QWORD *)a1 + 14);
      v22.i32[0] = *((_QWORD *)a1 + 13);
      v24 = vmlaq_f32(vaddq_f32((float32x4_t)vuzp1q_s32(v18, v19), (float32x4_t)vuzp2q_s32(v18, v19)), v6, v20);
      v25 = (int8x16_t)vcgtq_f32(v24, v10);
      a1 += 32;
      v26 = (int32x4_t)vmulq_f32(v17, v5);
      v27 = (int32x4_t)vmulq_f32(v23, v5);
      v28 = (float32x4_t)vbslq_s8(v25, (int8x16_t)v24, (int8x16_t)v10);
      v29 = vmlaq_f32(vaddq_f32((float32x4_t)vuzp1q_s32(v26, v27), (float32x4_t)vuzp2q_s32(v26, v27)), v6, (float32x4_t)vuzp1q_s32(v21, v22));
      v30 = (int8x16_t)vcgtq_f32(v29, v28);
      v10 = (float32x4_t)vbslq_s8(v30, (int8x16_t)v29, (int8x16_t)v28);
      v9 = vbslq_s8(v30, (int8x16_t)vaddq_s32(v8, v12), vbslq_s8(v25, (int8x16_t)v8, v9));
      v8 = vaddq_s32(v8, v13);
      v11 += 8;
    }
    while (v11 <= a3);
    v7 = v11 - 8;
  }
  else
  {
    v7 = 0;
    v8 = (int32x4_t)xmmword_1DD029FB0;
    v9.i64[0] = -1;
    v9.i64[1] = -1;
    v10.i64[0] = 0x7F0000007FLL;
    v10.i64[1] = 0x7F0000007FLL;
  }
  v31 = v7 | 4;
  if (v31 <= a3)
  {
    v32.i64[0] = 0x400000004;
    v32.i64[1] = 0x400000004;
    do
    {
      v33 = *(_OWORD *)a1;
      v34 = *(int32x4_t *)(a1 + 4);
      v35 = *((_OWORD *)a1 + 2);
      v36 = *(int32x4_t *)(a1 + 12);
      v37.i64[0] = *(_QWORD *)a1;
      v37.i64[1] = *((_QWORD *)a1 + 2);
      v38.i64[0] = *((_QWORD *)a1 + 4);
      v38.i64[1] = *((_QWORD *)a1 + 6);
      a1 += 16;
      v34.i32[0] = DWORD2(v33);
      v36.i32[0] = DWORD2(v35);
      v39 = (int32x4_t)vmulq_f32(v37, v5);
      v40 = (int32x4_t)vmulq_f32(v38, v5);
      v41 = vmlaq_f32(vaddq_f32((float32x4_t)vuzp1q_s32(v39, v40), (float32x4_t)vuzp2q_s32(v39, v40)), v6, (float32x4_t)vuzp1q_s32(v34, v36));
      v42 = (int8x16_t)vcgtq_f32(v41, v10);
      v10 = (float32x4_t)vbslq_s8(v42, (int8x16_t)v41, (int8x16_t)v10);
      v9 = vbslq_s8(v42, (int8x16_t)v8, v9);
      v8 = vaddq_s32(v8, v32);
      v31 += 4;
    }
    while (v31 <= a3);
  }
  v43 = a3 & 3;
  switch(v43)
  {
    case 1uLL:
      v51 = (int32x4_t)vmulq_f32(*(float32x4_t *)a1, v4);
      v52 = vaddq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v51.i8, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v51.i8, 1)), (float32x4_t)vdupq_laneq_s32(v51, 2));
LABEL_15:
      v56 = (int8x16_t)vcgtq_f32(v52, v10);
      v10 = (float32x4_t)vbslq_s8(v56, (int8x16_t)v52, (int8x16_t)v10);
      v9 = vbslq_s8(v56, (int8x16_t)v8, v9);
      break;
    case 2uLL:
      v53 = *(float32x4_t *)a1;
      v54 = (int32x2_t)vextq_s8((int8x16_t)v53, (int8x16_t)v53, 8uLL).u64[0];
      v53.i64[1] = *((_QWORD *)a1 + 2);
      v55 = (int32x4_t)vmulq_f32(v53, v5);
      *(int32x2_t *)v53.f32 = vzip1_s32(v54, (int32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(a1 + 4), *(int8x16_t *)(a1 + 4), 8uLL));
      v53.i64[1] = v53.i64[0];
      v52 = vaddq_f32(vmlaq_f32((float32x4_t)vuzp2q_s32(v55, v55), v6, v53), (float32x4_t)vuzp1q_s32(v55, v55));
      goto LABEL_15;
    case 3uLL:
      v44 = *(int32x4_t *)(a1 + 4);
      v45 = *(float32x4_t *)(a1 + 8);
      v46.i64[0] = *(_QWORD *)a1;
      v46.i64[1] = *((_QWORD *)a1 + 2);
      v44.i32[0] = *((_QWORD *)a1 + 1);
      v47 = (int32x4_t)vmulq_f32(v46, v5);
      v48 = (int32x4_t)vdupq_lane_s64(vmulq_f32(v45, v4).i64[0], 0);
      v49 = vmlaq_f32(vaddq_f32((float32x4_t)vuzp1q_s32(v47, v48), (float32x4_t)vuzp2q_s32(v47, v48)), v6, (float32x4_t)vuzp1q_s32(v44, vdupq_laneq_s32((int32x4_t)v45, 2)));
      v50 = (int8x16_t)vcgtq_f32(v49, v10);
      v10 = (float32x4_t)vbslq_s8(v50, (int8x16_t)v49, (int8x16_t)v10);
      v9 = vbslq_s8(v50, (int8x16_t)v8, v9);
      break;
  }
  v57 = (float32x2_t)vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL).u64[0];
  v58 = (int8x8_t)vcgt_f32(v57, *(float32x2_t *)v10.f32);
  v59 = (float32x2_t)vbsl_s8(v58, (int8x8_t)v57, *(int8x8_t *)v10.f32);
  v60 = (int32x2_t)vbsl_s8(v58, (int8x8_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL), *(int8x8_t *)v9.i8);
  v61 = (float32x2_t)vdup_lane_s32((int32x2_t)v59, 1);
  v62 = (int8x8_t)vcgt_f32(v61, v59);
  LODWORD(result) = vbsl_s8(v62, (int8x8_t)vdup_lane_s32(v60, 1), (int8x8_t)v60).u32[0];
  *(_DWORD *)a4 = vbsl_s8(v62, (int8x8_t)v61, (int8x8_t)v59).u32[0];
  return result;
}

float _maxdot_large_v0(const float *a1, float32x4_t *a2, unint64_t a3, float *a4)
{
  float32x4_t v4;
  float32x2_t v5;
  unint64_t v6;
  int32x2_t v7;
  int32x2_t v8;
  int8x8_t v9;
  float32x2_t v10;
  int8x8_t v11;
  float32x2_t v12;
  unint64_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x2_t v19;
  int8x8_t v20;
  float32x2_t v21;
  float32x2_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t v29;
  unint64_t i;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  float32x2_t v35;
  float32x2_t v36;
  float32x2_t v37;
  unint64_t v38;
  int8x16_t v39;
  float32x2_t v40;
  float32x2_t v41;
  int32x4_t v42;
  float32x2_t v43;
  float32x2_t v44;
  int8x8_t v45;
  int32x4_t v46;
  int8x8_t v47;
  float32x2_t v48;
  int8x8_t v49;
  int8x8_t v50;
  float32x2_t v51;
  int32x2_t v52;
  float32x2_t v53;
  int8x8_t v54;
  float result;

  v4 = *a2;
  v5 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a2, 2);
  if (a3 >= 8)
  {
    v11 = (int8x8_t)-1;
    v8 = (int32x2_t)0x300000002;
    v7 = (int32x2_t)0x100000000;
    v12 = (float32x2_t)0x7F0000007FLL;
    v13 = 8;
    v10 = (float32x2_t)0x7F0000007FLL;
    v9 = (int8x8_t)-1;
    do
    {
      v14 = *(int8x16_t *)(a1 + 4);
      v15 = *(int8x16_t *)(a1 + 8);
      v16 = *(int8x16_t *)(a1 + 12);
      v17 = vmul_f32(*(float32x2_t *)v14.i8, *(float32x2_t *)v4.f32);
      v18 = vmul_f32(*(float32x2_t *)v15.i8, *(float32x2_t *)v4.f32);
      v19 = (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL));
      *(int32x2_t *)v14.i8 = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL));
      *(float32x2_t *)v15.i8 = vmla_f32(vpadd_f32(vmul_f32(*(float32x2_t *)a1, *(float32x2_t *)v4.f32), v17), v5, v19);
      *(float32x2_t *)v16.i8 = vmla_f32(vpadd_f32(v18, vmul_f32(*(float32x2_t *)v16.i8, *(float32x2_t *)v4.f32)), v5, *(float32x2_t *)v14.i8);
      v20 = (int8x8_t)vcgt_f32(*(float32x2_t *)v15.i8, v12);
      *(int32x2_t *)v14.i8 = vcgt_f32(*(float32x2_t *)v16.i8, v10);
      v21 = (float32x2_t)vbsl_s8(v20, *(int8x8_t *)v15.i8, (int8x8_t)v12);
      v22 = (float32x2_t)vbsl_s8(*(int8x8_t *)v14.i8, *(int8x8_t *)v16.i8, (int8x8_t)v10);
      v23 = *(int8x16_t *)(a1 + 16);
      v24 = *(int8x16_t *)(a1 + 20);
      v25 = *(int8x16_t *)(a1 + 24);
      v26 = *(int8x16_t *)(a1 + 28);
      a1 += 32;
      v27 = vmul_f32(*(float32x2_t *)v23.i8, *(float32x2_t *)v4.f32);
      v28 = vmul_f32(*(float32x2_t *)v24.i8, *(float32x2_t *)v4.f32);
      v29 = vmul_f32(*(float32x2_t *)v25.i8, *(float32x2_t *)v4.f32);
      *(int32x2_t *)v23.i8 = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL));
      *(int32x2_t *)v24.i8 = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL));
      *(float32x2_t *)v25.i8 = vmla_f32(vpadd_f32(v27, v28), v5, *(float32x2_t *)v23.i8);
      *(float32x2_t *)v26.i8 = vmla_f32(vpadd_f32(v29, vmul_f32(*(float32x2_t *)v26.i8, *(float32x2_t *)v4.f32)), v5, *(float32x2_t *)v24.i8);
      *(int32x2_t *)v23.i8 = vcgt_f32(*(float32x2_t *)v25.i8, v21);
      *(int32x2_t *)v24.i8 = vcgt_f32(*(float32x2_t *)v26.i8, v22);
      v12 = (float32x2_t)vbsl_s8(*(int8x8_t *)v23.i8, *(int8x8_t *)v25.i8, (int8x8_t)v21);
      v10 = (float32x2_t)vbsl_s8(*(int8x8_t *)v24.i8, *(int8x8_t *)v26.i8, (int8x8_t)v22);
      v11 = vbsl_s8(*(int8x8_t *)v23.i8, (int8x8_t)vadd_s32(v7, (int32x2_t)0x400000004), vbsl_s8(v20, (int8x8_t)v7, v11));
      v9 = vbsl_s8(*(int8x8_t *)v24.i8, (int8x8_t)vadd_s32(v8, (int32x2_t)0x400000004), vbsl_s8(*(int8x8_t *)v14.i8, (int8x8_t)v8, v9));
      v7 = vadd_s32(v7, (int32x2_t)0x800000008);
      v8 = vadd_s32(v8, (int32x2_t)0x800000008);
      v13 += 8;
    }
    while (v13 <= a3);
    v6 = v13 - 8;
  }
  else
  {
    v6 = 0;
    v7 = (int32x2_t)0x100000000;
    v8 = (int32x2_t)0x300000002;
    v9 = (int8x8_t)-1;
    v10 = (float32x2_t)0x7F0000007FLL;
    v11 = (int8x8_t)-1;
    v12 = (float32x2_t)0x7F0000007FLL;
  }
  for (i = v6 | 4; i <= a3; i += 4)
  {
    v31 = *(int8x16_t *)a1;
    v32 = *(int8x16_t *)(a1 + 4);
    v33 = *(int8x16_t *)(a1 + 8);
    v34 = *(int8x16_t *)(a1 + 12);
    a1 += 16;
    v35 = vmul_f32(*(float32x2_t *)v31.i8, *(float32x2_t *)v4.f32);
    v36 = vmul_f32(*(float32x2_t *)v32.i8, *(float32x2_t *)v4.f32);
    v37 = vmul_f32(*(float32x2_t *)v33.i8, *(float32x2_t *)v4.f32);
    *(int32x2_t *)v31.i8 = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL));
    *(int32x2_t *)v32.i8 = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v33, v33, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL));
    *(float32x2_t *)v33.i8 = vmla_f32(vpadd_f32(v35, v36), v5, *(float32x2_t *)v31.i8);
    *(float32x2_t *)v34.i8 = vmla_f32(vpadd_f32(v37, vmul_f32(*(float32x2_t *)v34.i8, *(float32x2_t *)v4.f32)), v5, *(float32x2_t *)v32.i8);
    *(int32x2_t *)v31.i8 = vcgt_f32(*(float32x2_t *)v33.i8, v12);
    *(int32x2_t *)v32.i8 = vcgt_f32(*(float32x2_t *)v34.i8, v10);
    v12 = (float32x2_t)vbsl_s8(*(int8x8_t *)v31.i8, *(int8x8_t *)v33.i8, (int8x8_t)v12);
    v10 = (float32x2_t)vbsl_s8(*(int8x8_t *)v32.i8, *(int8x8_t *)v34.i8, (int8x8_t)v10);
    v11 = vbsl_s8(*(int8x8_t *)v31.i8, (int8x8_t)v7, v11);
    v9 = vbsl_s8(*(int8x8_t *)v32.i8, (int8x8_t)v8, v9);
    v7 = vadd_s32(v7, (int32x2_t)0x400000004);
    v8 = vadd_s32(v8, (int32x2_t)0x400000004);
  }
  v38 = a3 & 3;
  switch(v38)
  {
    case 1uLL:
      v46 = (int32x4_t)vmulq_f32(*(float32x4_t *)a1, v4);
      *(float32x2_t *)v46.i8 = vadd_f32((float32x2_t)vdup_laneq_s32(v46, 2), vpadd_f32(*(float32x2_t *)v46.i8, *(float32x2_t *)v46.i8));
      v47 = (int8x8_t)vcgt_f32(*(float32x2_t *)v46.i8, v12);
      v12 = (float32x2_t)vbsl_s8(v47, *(int8x8_t *)v46.i8, (int8x8_t)v12);
      v11 = vbsl_s8(v47, (int8x8_t)v7, v11);
      break;
    case 2uLL:
      v48 = vmla_f32(vpadd_f32(vmul_f32(*(float32x2_t *)a1, *(float32x2_t *)v4.f32), vmul_f32(*(float32x2_t *)(a1 + 4), *(float32x2_t *)v4.f32)), v5, (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(a1 + 4), *(int8x16_t *)(a1 + 4), 8uLL)));
      v49 = (int8x8_t)vcgt_f32(v48, v12);
      v12 = (float32x2_t)vbsl_s8(v49, (int8x8_t)v48, (int8x8_t)v12);
      v11 = vbsl_s8(v49, (int8x8_t)v7, v11);
      break;
    case 3uLL:
      v39 = *(int8x16_t *)(a1 + 4);
      v40 = vmul_f32(*(float32x2_t *)a1, *(float32x2_t *)v4.f32);
      v41 = vmul_f32(*(float32x2_t *)v39.i8, *(float32x2_t *)v4.f32);
      v42 = (int32x4_t)vmulq_f32(*(float32x4_t *)(a1 + 8), v4);
      v43 = vmla_f32(vpadd_f32(v40, v41), v5, (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v39, v39, 8uLL)));
      v44 = vadd_f32(vpadd_f32(*(float32x2_t *)v42.i8, *(float32x2_t *)v42.i8), (float32x2_t)vdup_laneq_s32(v42, 2));
      *(int32x2_t *)v42.i8 = vcgt_f32(v43, v12);
      v45 = (int8x8_t)vcgt_f32(v44, v10);
      v12 = (float32x2_t)vbsl_s8(*(int8x8_t *)v42.i8, (int8x8_t)v43, (int8x8_t)v12);
      v10 = (float32x2_t)vbsl_s8(v45, (int8x8_t)v44, (int8x8_t)v10);
      v11 = vbsl_s8(*(int8x8_t *)v42.i8, (int8x8_t)v7, v11);
      v9 = vbsl_s8(v45, (int8x8_t)v8, v9);
      break;
  }
  v50 = (int8x8_t)vcgt_f32(v10, v12);
  v51 = (float32x2_t)vbsl_s8(v50, (int8x8_t)v10, (int8x8_t)v12);
  v52 = (int32x2_t)vbsl_s8(v50, v9, v11);
  v53 = (float32x2_t)vdup_lane_s32((int32x2_t)v51, 1);
  v54 = (int8x8_t)vcgt_f32(v53, v51);
  LODWORD(result) = vbsl_s8(v54, (int8x8_t)vdup_lane_s32(v52, 1), (int8x8_t)v52).u32[0];
  *(_DWORD *)a4 = vbsl_s8(v54, (int8x8_t)v53, (int8x8_t)v51).u32[0];
  return result;
}

double OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::FVarLevel(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a1 + 8) & 0xFE00 | 0x14;
  *(_WORD *)(a1 + 12) = 0;
  *(_BYTE *)(a1 + 14) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  return result;
}

void OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::~FVarLevel(OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v2 = (void *)*((_QWORD *)this + 24);
  if (v2)
  {
    *((_QWORD *)this + 25) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 21);
  if (v3)
  {
    *((_QWORD *)this + 22) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 18);
  if (v4)
  {
    *((_QWORD *)this + 19) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 15);
  if (v5)
  {
    *((_QWORD *)this + 16) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 12);
  if (v6)
  {
    *((_QWORD *)this + 13) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 9);
  if (v7)
  {
    *((_QWORD *)this + 10) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 6);
  if (v8)
  {
    *((_QWORD *)this + 7) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 3);
  if (v9)
  {
    *((_QWORD *)this + 4) = v9;
    operator delete(v9);
  }
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::setOptions(uint64_t result, _WORD *a2)
{
  *(_WORD *)(result + 8) = *a2;
  return result;
}

void OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::resizeComponents(std::vector<unsigned int> *this)
{
  std::vector<unsigned int>::pointer begin;
  std::vector<unsigned int>::pointer v3;
  unint64_t v4;
  char *v5;
  unint64_t v6;
  __int16 v7;
  char v8;

  std::vector<int>::resize(this + 1, (int)((uint64_t)(*((_QWORD *)this->__begin_ + 7) - *((_QWORD *)this->__begin_ + 6)) >> 2));
  begin = this[2].__begin_;
  v8 = 0;
  v3 = this->__begin_;
  v4 = *((int *)this->__begin_ + 1);
  v5 = (char *)((char *)this[2].__end_ - (char *)begin);
  if (v4 <= (unint64_t)v5)
  {
    if (v4 < (unint64_t)v5)
      this[2].__end_ = (std::vector<unsigned int>::pointer)((char *)begin + v4);
  }
  else
  {
    std::vector<OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::ETag>::__append(&this[2].__begin_, v4 - (_QWORD)v5, &v8);
    v3 = this->__begin_;
  }
  std::vector<unsigned short>::resize((uint64_t)&this[3], (int)v3[2]);
  std::vector<int>::resize(this + 4, *((int *)this->__begin_ + 2));
  v6 = (int)((uint64_t)(*((_QWORD *)this->__begin_ + 37) - *((_QWORD *)this->__begin_ + 36)) >> 2);
  v7 = 0;
  std::vector<unsigned short>::resize((uint64_t)&this[5], v6, &v7);
}

void std::vector<unsigned short>::resize(uint64_t a1, unint64_t a2, _WORD *a3)
{
  unint64_t v3;

  v3 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 1;
  if (a2 <= v3)
  {
    if (a2 < v3)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 2 * a2;
  }
  else
  {
    std::vector<unsigned short>::__append((void **)a1, a2 - v3, a3);
  }
}

void OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::resizeVertexValues(std::vector<unsigned int> *this, int a2)
{
  unint64_t v3;
  std::vector<unsigned int>::pointer begin;
  char *v5;
  char v6;

  v3 = a2;
  std::vector<int>::resize(this + 6, a2);
  v6 = 0;
  begin = this[7].__begin_;
  v5 = (char *)((char *)this[7].__end_ - (char *)begin);
  if (v3 <= (unint64_t)v5)
  {
    if (v3 < (unint64_t)v5)
      this[7].__end_ = (std::vector<unsigned int>::pointer)((char *)begin + v3);
  }
  else
  {
    std::vector<OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::ETag>::__append(&this[7].__begin_, v3 - (_QWORD)v5, &v6);
  }
  if (!BYTE5(this->__end_))
    std::vector<OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::CreaseEndPair>::resize((uint64_t)&this[8], v3);
}

void std::vector<OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::CreaseEndPair>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 4 * a2;
  }
  else
  {
    std::vector<OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::CreaseEndPair>::__append((void **)a1, a2 - v2);
  }
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::resizeValues(uint64_t this, int a2)
{
  *(_DWORD *)(this + 16) = a2;
  return this;
}

void OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::completeTopologyFromFaceValues(OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel *this, int a2)
{
  unsigned int v3;
  unsigned int v4;
  int v5;
  _BOOL4 v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int32 *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int32 *v20;
  uint64_t v21;
  int *v22;
  unsigned __int16 *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int32 *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _WORD *v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int *v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  int v64;
  _WORD *v65;
  uint64_t v66;
  char v67;
  char v68;
  __int32 *v69;
  uint64_t v70;
  int v71;
  _WORD *v72;
  __int32 v73;
  __int32 *v74;
  __int32 *v75;
  __int32 *v76;
  uint64_t v77;
  uint64_t v78;
  _BOOL4 v79;
  _WORD *v80;
  __int16 *v81;
  __int16 v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t i;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  _DWORD *v96;
  uint64_t v97;
  unsigned __int16 *v98;
  int *v99;
  unsigned __int16 *v100;
  uint64_t v101;
  int v102;
  int v103;
  uint64_t v104;
  __int16 v105;
  char v106;
  char v108;
  unsigned __int16 *v109;
  int v110;
  int v111;
  int v112;
  _BYTE *v113;
  char v114;
  _WORD *v115;
  uint64_t v116;
  int v117;
  _BOOL4 v118;
  unsigned int v119;
  BOOL v120;
  int v121;
  unsigned int v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  __int16 v128;
  BOOL v129;
  _BOOL4 v130;
  unsigned int v131;
  _QWORD *v132;
  int v134;
  __int16 *v135;
  char v136;
  int v137;
  uint64_t v138;
  void *v139;
  void *v140;
  uint64_t v141;
  void *v142;
  int v143;
  int v144;
  _BYTE v145[160];
  void *__p;
  __int16 *v147;
  int v148;
  int v149;
  _BYTE v150[32];
  void *v151;
  __int32 *__s;
  int v153;
  int v154;
  _BYTE v155[64];
  void *v156;
  __int32 *v157;
  int v158;
  int v159;
  uint64_t v160;
  __int32 *v161;
  uint64_t v162;

  v162 = *MEMORY[0x1E0C80C00];
  v3 = *((unsigned __int16 *)this + 4);
  v4 = v3 >> 2;
  v5 = (v3 >> 2) & 7;
  if (v5)
    v6 = (v3 & 3) != 2;
  else
    v6 = 0;
  v130 = v6;
  *((_BYTE *)this + 12) = v5 == 5;
  v134 = v5;
  v131 = v5 - 3;
  v7 = v5 == 3;
  *((_BYTE *)this + 13) = (v4 & 6) == 4;
  *((_BYTE *)this + 14) = (v4 & 6) == 2;
  v8 = *(_QWORD *)this;
  v9 = *(int *)(*(_QWORD *)this + 8);
  v140 = 0;
  v141 = 0;
  if ((v4 & 6) == 4)
    v7 = 1;
  v129 = v7;
  v139 = 0;
  if ((_DWORD)v9)
  {
    std::vector<unsigned short>::__vallocate[abi:nn180100](&v139, v9);
    v10 = (char *)v140;
    bzero(v140, 2 * v9);
    v140 = &v10[2 * v9];
    v8 = *(_QWORD *)this;
  }
  v11 = (int)((uint64_t)(*(_QWORD *)(v8 + 296) - *(_QWORD *)(v8 + 288)) >> 2);
  LOWORD(v142) = 0;
  v132 = (_QWORD *)((char *)this + 120);
  std::vector<unsigned short>::resize((uint64_t)this + 120, v11, &v142);
  v12 = *(_QWORD *)this;
  v13 = *(unsigned int *)(*(_QWORD *)this + 20);
  v157 = (__int32 *)&v160;
  v158 = v13;
  v159 = 16;
  v161 = 0;
  if (v13 <= 0x10)
  {
    v14 = (__int32 *)v155;
    v151 = 0;
    __s = (__int32 *)v155;
    v153 = v13;
    v154 = 16;
    v156 = 0;
    v135 = (__int16 *)v150;
    __p = 0;
    v147 = (__int16 *)v150;
    v148 = v13;
    v149 = 16;
    v142 = v145;
    v143 = v13;
    v144 = 16;
  }
  else
  {
    v161 = (__int32 *)operator new(4 * v13);
    v157 = v161;
    v159 = v13;
    __s = (__int32 *)v155;
    v153 = v13;
    v154 = 16;
    v156 = 0;
    v156 = operator new(4 * v13);
    v151 = 0;
    __s = (__int32 *)v156;
    v154 = v13;
    v147 = (__int16 *)v150;
    v148 = v13;
    v149 = 16;
    v151 = operator new(2 * v13);
    __p = 0;
    v147 = (__int16 *)v151;
    v149 = v13;
    v142 = v145;
    v143 = v13;
    v144 = 16;
    __p = operator new(10 * v13);
    v142 = __p;
    v144 = v13;
    v14 = __s;
    v135 = v147;
    v12 = *(_QWORD *)this;
  }
  if (*(int *)(v12 + 8) >= 1)
  {
    v15 = 0;
    v16 = 0;
    while (1)
    {
      v17 = (2 * v15) | 1;
      v18 = *(_QWORD *)(v12 + 264);
      v19 = *(unsigned int *)(v18 + 8 * v15);
      v20 = v157;
      if ((int)v19 >= 1)
      {
        v21 = *(int *)(v18 + 4 * v17);
        v22 = (int *)(*(_QWORD *)(v12 + 288) + 4 * v21);
        v23 = (unsigned __int16 *)(*(_QWORD *)(v12 + 312) + 2 * v21);
        v24 = *(_QWORD *)(v12 + 24);
        v25 = *((_QWORD *)this + 3);
        v26 = v19;
        v27 = v157;
        do
        {
          v28 = *v22++;
          v29 = *(_DWORD *)(v24 + 8 * v28 + 4);
          LODWORD(v28) = *v23++;
          *v27++ = *(_DWORD *)(v25 + 4 * (v29 + (int)v28));
          --v26;
        }
        while (v26);
      }
      v30 = *(_QWORD *)(v12 + 336);
      v31 = *(int *)(v30 + 4 * v17);
      v32 = (int *)(*(_QWORD *)(v12 + 360) + 4 * v31);
      v33 = *(unsigned int *)(v30 + 8 * v15);
      v34 = *(unsigned __int16 *)(*(_QWORD *)(v12 + 432) + 2 * v15);
      if ((v34 & 1) != 0)
      {
        if ((int)v19 >= 1 && (int)v33 >= 1)
        {
          v43 = 0;
          v44 = *(_QWORD *)(v12 + 384) + 2 * v31;
          do
          {
            v45 = v32[v43];
            v46 = *(_QWORD **)this;
            v47 = *(_QWORD *)(*(_QWORD *)this + 144);
            v48 = *(unsigned int *)(v47 + 8 * (_DWORD)v45);
            if ((int)v48 >= 2)
            {
              v49 = 0;
              v50 = 0;
              v51 = *(int *)(v47 + 8 * v45 + 4);
              v52 = (int *)(v46[15] + 8 * (_DWORD)v45);
              while (v48 != v49)
              {
                v53 = *(int *)(v46[21] + 4 * v51 + 4 * v49);
                v54 = 2 * v53;
                v55 = v46[3];
                v56 = *(int *)(v55 + 8 * v53 + 4);
                v57 = v46[6] + 4 * v56;
                v58 = *(_DWORD *)(v55 + 4 * v54);
                v59 = *(unsigned __int16 *)(v46[24] + 2 * v51 + 2 * v49);
                v60 = *((_QWORD *)this + 3) + 4 * v56;
                v61 = *v52;
                if (*(_WORD *)(v44 + 2 * v43) == ((_DWORD)v61 != *(_DWORD *)(v57 + 4 * v59)))
                  v62 = *(unsigned __int16 *)(v46[24] + 2 * v51 + 2 * v49);
                else
                  v62 = v59 + 1;
                if (v62 == v58)
                  v63 = 0;
                else
                  v63 = v62;
                v64 = *(_DWORD *)(v60 + 4 * v63);
                if (v49)
                {
                  ++v49;
                  if (v64 != v50)
                  {
                    v65 = v139;
                    *((_WORD *)v139 + v61) = 1;
                    v65[v52[1]] = 1;
                    v66 = *((_QWORD *)this + 6);
                    v67 = *(_BYTE *)(v66 + v45) & 0xFD | (2 * (v15 == v61));
                    *(_BYTE *)(v66 + v45) = v67;
                    v68 = v67 & 0xFB | (4 * (v15 == v52[1])) | 1;
                    *(_BYTE *)(v66 + v45) = v68;
                    *(_BYTE *)(v66 + v45) = v68 & 0xF7 | (8 * *((_BYTE *)this + 13));
                    break;
                  }
                }
                else
                {
                  v49 = 1;
                  v50 = v64;
                }
              }
            }
            ++v43;
          }
          while (v43 != v33);
        }
      }
      else if ((int)v19 > (v34 & 4) >> 2)
      {
        v35 = (v34 >> 2) & 1;
        do
        {
          if (v35)
            v36 = v35;
          else
            v36 = v19;
          if (v20[v35] != v20[v36 - 1])
          {
            v37 = v32[v35];
            v38 = *(_QWORD *)(*(_QWORD *)this + 120) + 8 * v37;
            v39 = *(unsigned int *)v38;
            v40 = v139;
            *((_WORD *)v139 + (int)v39) = 1;
            v40[*(int *)(v38 + 4)] = 1;
            v41 = *((_QWORD *)this + 6);
            LOBYTE(v39) = *(_BYTE *)(v41 + v37) & 0xFD | (2 * (v15 == v39));
            *(_BYTE *)(v41 + v37) = v39;
            LOBYTE(v38) = v39 & 0xFB | (4 * (v15 == *(_DWORD *)(v38 + 4))) | 1;
            *(_BYTE *)(v41 + v37) = v38;
            *(_BYTE *)(v41 + v37) = v38 & 0xF7 | (8 * *((_BYTE *)this + 13));
          }
          ++v35;
        }
        while (v19 != v35);
      }
      v137 = v16;
      v136 = v34;
      if ((v34 & 4) != 0 && !*((_WORD *)v139 + v15))
      {
        if (*((_BYTE *)this + 13))
        {
          if ((int)v19 < 1)
            goto LABEL_72;
          *((_WORD *)v139 + v15) = 1;
          if ((v34 & 1) != 0)
          {
            if ((int)v33 >= 1)
            {
              do
              {
                v84 = *v32++;
                v83 = v84;
                if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)this + 240) + v84) & 2) != 0)
                  *(_BYTE *)(*((_QWORD *)this + 6) + v83) |= 8u;
                --v33;
              }
              while (v33);
            }
          }
          else
          {
            *(_BYTE *)(*((_QWORD *)this + 6) + *v32) |= 8u;
            v78 = v32[(int)v33 - 1];
            *(_BYTE *)(*((_QWORD *)this + 6) + v78) |= 8u;
          }
        }
        else
        {
          v79 = v130;
          if ((_DWORD)v19 != 1)
            v79 = 0;
          if (v79)
          {
            *((_WORD *)v139 + v15) = 1;
LABEL_72:
            *v14 = *v20;
            *v135 = 0;
            goto LABEL_73;
          }
        }
      }
      *v14 = *v20;
      *v135 = 0;
      if ((int)v19 > 1)
      {
        v69 = v20 + 1;
        v70 = v19 - 1;
        v71 = 1;
        v72 = v135 + 1;
        while (1)
        {
          v73 = *v69;
          if (*v69 == *(v69 - 1))
          {
            *v72 = *(v72 - 1);
          }
          else
          {
            *v72 = v71;
            if (v71 == 2)
            {
              if (*v14 == v73)
              {
LABEL_55:
                v74 = &v14[v71];
                v75 = wmemchr(v14, v73, v71);
                if (v75)
                  v76 = v75;
                else
                  v76 = &v14[v71];
                v77 = (char *)v76 - (char *)v14;
                if (v71 == v77 >> 2)
                {
                  ++v71;
                  *v74 = *v69;
                }
                else
                {
                  *v72 = (unint64_t)v77 >> 2;
                }
                goto LABEL_62;
              }
              v14[2] = v73;
              v71 = 3;
            }
            else
            {
              if (v71 != 1)
                goto LABEL_55;
              v14[1] = v73;
              v71 = 2;
            }
          }
LABEL_62:
          ++v72;
          ++v69;
          if (!--v70)
            goto LABEL_74;
        }
      }
LABEL_73:
      v71 = 1;
LABEL_74:
      if ((v136 & 1) != 0 && !*((_WORD *)v139 + v15))
        *((_WORD *)v139 + v15) = v71 > 1;
      *(_WORD *)(*((_QWORD *)this + 9) + 2 * v15) = v71;
      *(_DWORD *)(*((_QWORD *)this + 12) + 4 * v15) = v137;
      v12 = *(_QWORD *)this;
      if (v71 >= 2 && (int)v19 >= 1)
      {
        v80 = (_WORD *)(*v132 + 2 * *(int *)(*(_QWORD *)(v12 + 264) + 4 * ((2 * v15) | 1)));
        v81 = v135;
        do
        {
          v82 = *v81++;
          *v80++ = v82;
          --v19;
        }
        while (v19);
      }
      v16 = v71 + v137;
      if (++v15 >= *(int *)(v12 + 8))
        goto LABEL_89;
    }
  }
  v16 = 0;
LABEL_89:
  OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::resizeVertexValues((std::vector<unsigned int> *)this, v16);
  v85 = *(_QWORD **)this;
  if (*(int *)(*(_QWORD *)this + 8) >= 1)
  {
    for (i = 0; i < *(int *)(*(_QWORD *)this + 8); ++i)
    {
      v87 = (2 * i) | 1;
      v88 = v85[33];
      v89 = *(int *)(v88 + 4 * v87);
      v90 = v85[36];
      v91 = *(unsigned int *)(v88 + 8 * i);
      v92 = v85[39];
      if ((int)v91 < 1)
        v93 = 0;
      else
        v93 = *(_DWORD *)(*((_QWORD *)this + 3)
                        + 4
                        * (*(_DWORD *)(v85[3] + 8 * *(int *)(v90 + 4 * v89) + 4) + *(unsigned __int16 *)(v92 + 2 * v89)));
      v94 = *(unsigned __int16 *)(*((_QWORD *)this + 9) + 2 * i);
      v95 = *((_QWORD *)this + 12);
      v96 = (_DWORD *)(*((_QWORD *)this + 18) + 4 * *(int *)(v95 + 4 * i));
      *v96 = v93;
      if (!*((_WORD *)v139 + i))
        goto LABEL_169;
      if (v94 >= 2 && (int)v91 >= 2)
      {
        v97 = *(int *)(v88 + 4 * v87);
        v98 = (unsigned __int16 *)(v92 + 2 * v89 + 2);
        v99 = (int *)(v90 + 4 * v89 + 4);
        v100 = (unsigned __int16 *)(*v132 + 2 * v97 + 2);
        v101 = v91 - 1;
        v102 = 1;
        do
        {
          v103 = *v100++;
          if (v102 == v103)
            v96[v102++] = *(_DWORD *)(*((_QWORD *)this + 3) + 4 * (*(_DWORD *)(v85[3] + 8 * *v99 + 4) + *v98));
          ++v98;
          ++v99;
          --v101;
        }
        while (v101);
      }
      v138 = *(int *)(v95 + 4 * i);
      v104 = *((_QWORD *)this + 21);
      v105 = *(_WORD *)(v85[54] + 2 * i);
      v106 = 1;
      if (!*((_BYTE *)this + 13) && (v105 & 0x10) == 0 && (v105 & 1) == 0)
      {
        if (*((_BYTE *)this + 14))
        {
          v106 = v94 > 2;
          v108 = !v129;
          if (v94 > 2)
            v108 = 1;
          if ((v108 & 1) != 0)
            goto LABEL_116;
          if ((_DWORD)v94 != 1)
          {
            v106 = 0;
            goto LABEL_116;
          }
        }
        else
        {
          v106 = 0;
          if (v131 > 2 || (_DWORD)v94 != 1)
            goto LABEL_116;
        }
        v106 = (v105 & 4) == 0;
      }
LABEL_116:
      v109 = (unsigned __int16 *)v142;
      bzero(v142, 10 * v94);
      OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::gatherValueSpans(this, i, (uint64_t)v109);
      if ((v106 & 1) == 0 && (_DWORD)v94 == 2 && *((_BYTE *)this + 14))
      {
        v110 = a2;
        v106 = v109[4] || v109[9] || v109[2] || v109[7] != 0;
        if (v134 == 3)
        {
          v112 = *v109;
          if (v112 != 1)
            LOBYTE(v112) = v109[5] == 1;
          v106 |= v112;
        }
        v111 = (v109[3] != 0) ^ (v109[8] != 0);
LABEL_130:
        v113 = (_BYTE *)(v104 + v138);
        if (v111)
          v114 = 48;
        else
          v114 = 8;
        v115 = v109 + 4;
        v116 = 2;
        while (2)
        {
          *v113 = 1;
          if (*(v115 - 2))
          {
            *v113 = 5;
            goto LABEL_136;
          }
          v117 = (unsigned __int16)*(v115 - 4);
          if (!*(v115 - 4))
            OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::completeTopologyFromFaceValues();
          if ((v106 & 1) != 0 || *v115)
          {
            v118 = v117 == 1;
            if (v117 == v110)
              v119 = 1;
            else
              v119 = 3;
            v120 = 1;
            goto LABEL_145;
          }
          v120 = v134 != 0;
          v118 = v117 == 1;
          if (v117 != 1)
            v120 = 0;
          v121 = 3;
          if (v117 == v110)
            v119 = 1;
          else
            v119 = 3;
          if (v120)
LABEL_145:
            v121 = 1;
          if (v118)
            v119 = v121;
          *v113 = v119;
          v122 = v119 | ((*v115 != 0) << 6);
          *v113 = v122;
          if (*v115)
          {
            LOBYTE(v122) = v122 | (((unsigned __int16)*(v115 - 4) - (unsigned __int16)*v115 > 1) << 7);
            *v113 = v122;
            if (!v120)
              goto LABEL_161;
          }
          else if (v120)
          {
            *v113 = v122 | (((unsigned __int16)*(v115 - 4) > 1u) << 7);
          }
          else
          {
            v122 = v122 & 0xFFFFFF7F | (((v119 >> 1) & 1) << 7);
            *v113 = v122;
LABEL_161:
            if ((unsigned __int16)*(v115 - 1) | v105 & 0x20)
              v123 = 16;
            else
              v123 = v114;
            *v113 = v122 | v123;
            if (!*((_BYTE *)this + 13))
            {
              v124 = *(int *)(*((_QWORD *)this + 12) + 4 * i);
              v125 = *((_QWORD *)this + 24);
              v126 = v125 + 4 * v124;
              v127 = (unsigned __int16)*(v115 - 3);
              *(_WORD *)(v126 + v116 - 2) = v127;
              v128 = *(v115 - 4);
              if (v116 == 2 && v127)
                *(_WORD *)(v125 + 4 * v124 + 2) = v127 + ~(_WORD)v91 + v128;
              else
                *(_WORD *)(v126 + v116) = v127 + v128 - 1;
            }
          }
LABEL_136:
          v116 += 4;
          v115 += 5;
          ++v113;
          if (!--v94)
            goto LABEL_169;
          continue;
        }
      }
      v110 = a2;
      if ((_DWORD)v94)
      {
        v111 = 0;
        goto LABEL_130;
      }
LABEL_169:
      v85 = *(_QWORD **)this;
    }
  }
  operator delete(__p);
  operator delete(v151);
  operator delete(v156);
  operator delete(v161);
  if (v139)
  {
    v140 = v139;
    operator delete(v139);
  }
}

_QWORD *OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::gatherValueSpans(_QWORD *result, int a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  char v17;
  _WORD *v18;
  _WORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int16 *v27;
  unsigned int v28;
  uint64_t v29;
  char v30;

  v3 = (_QWORD *)*result;
  v4 = *(unsigned __int16 *)(result[9] + 2 * a2);
  if ((*(_WORD *)(*(_QWORD *)(*result + 432) + 2 * a2) & 1) != 0)
  {
    if (*(_WORD *)(result[9] + 2 * a2))
    {
      v19 = (_WORD *)(a3 + 4);
      do
      {
        *(v19 - 2) = 0;
        *v19 = 1;
        v19 += 5;
        --v4;
      }
      while (v4);
    }
  }
  else
  {
    v5 = v3[45];
    v6 = v3[42];
    v7 = (8 * ((unint64_t)(2 * a2) >> 1)) | 4;
    v8 = *(int *)(v6 + v7);
    v9 = 8 * a2;
    v10 = *(unsigned int *)(v6 + v9);
    v11 = (int *)(v5 + 4 * v8);
    v12 = v3[33];
    v13 = *(unsigned int *)(v12 + v9);
    if ((_DWORD)v4 != 1 || (int)v10 > (int)v13)
    {
      v15 = result[15] + 2 * *(int *)(v12 + v7);
      *(_DWORD *)a3 = 1;
      if ((int)v10 > (int)v13 || *(_WORD *)(v15 + 2 * ((int)v13 - 1)))
        goto LABEL_33;
      v16 = *v11;
      if ((*(_BYTE *)(result[6] + v16) & 1) != 0)
      {
        v18 = (_WORD *)(a3 + 4);
      }
      else
      {
        v17 = *(_BYTE *)(v3[30] + v16);
        if ((v17 & 4) != 0)
        {
          v18 = (_WORD *)(a3 + 8);
        }
        else
        {
          if ((v17 & 8) == 0)
          {
LABEL_33:
            if ((int)v13 >= 2)
            {
              v25 = 0;
              v26 = v5 + 4 * v8 + 4;
              do
              {
                v27 = (unsigned __int16 *)(v15 + 2 * v25);
                v28 = v27[1];
                if (v28 == *v27)
                {
                  v29 = *(int *)(v26 + 4 * v25);
                  if ((*(_BYTE *)(result[6] + v29) & 1) != 0)
                  {
                    ++*(_WORD *)(a3 + 10 * v27[1] + 4);
                  }
                  else
                  {
                    v30 = *(_BYTE *)(v3[30] + v29);
                    if ((v30 & 4) != 0)
                    {
                      ++*(_WORD *)(a3 + 10 * v27[1] + 8);
                    }
                    else if ((v30 & 8) != 0)
                    {
                      ++*(_WORD *)(a3 + 10 * v27[1] + 6);
                    }
                  }
                }
                else
                {
                  if (*(_WORD *)(a3 + 10 * v27[1]))
                  {
                    ++*(_WORD *)(a3 + 10 * v27[1] + 4);
                    v28 = v27[1];
                  }
                  *(_WORD *)(a3 + 10 * v28 + 2) = v25 + 1;
                }
                ++*(_WORD *)(a3 + 10 * v27[1]);
                ++v25;
              }
              while (v13 - 1 != v25);
            }
            if (!*(_WORD *)(v15 + 2 * ((int)v13 - 1)) && (int)v10 <= (int)v13)
              --*(_WORD *)(a3 + 4);
            return result;
          }
          v18 = (_WORD *)(a3 + 6);
        }
      }
      ++*v18;
      goto LABEL_33;
    }
    *(_DWORD *)a3 = 0;
    if ((int)v10 > 0)
    {
      v20 = 0;
      v21 = 0;
      v22 = result[6];
      do
      {
        v23 = v11[v21];
        if ((*(_BYTE *)(v22 + v23) & 1) != 0)
        {
          if (v20)
          {
            *(_WORD *)(a3 + 4) = 1;
            break;
          }
          *(_WORD *)a3 = v13;
          *(_WORD *)(a3 + 2) = v21;
          v20 = (unsigned __int16)v13;
        }
        else
        {
          v24 = *(_BYTE *)(v3[30] + v23);
          if ((v24 & 4) != 0)
          {
            ++*(_WORD *)(a3 + 8);
          }
          else if ((v24 & 8) != 0)
          {
            ++*(_WORD *)(a3 + 6);
          }
        }
        ++v21;
      }
      while (v10 != v21);
    }
    *(_WORD *)a3 = v13;
  }
  return result;
}

_QWORD *OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getVertexCreaseEndValues(_QWORD *this, int a2, unsigned int a3, int *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int16 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned int v20;

  v4 = *(int *)(*(_QWORD *)(*this + 264) + 8 * a2 + 4);
  v5 = *(_QWORD *)(*this + 288) + 4 * v4;
  v6 = *(_QWORD *)(*this + 312) + 2 * v4;
  v7 = (unsigned __int16 *)(this[24] + 4 * *(int *)(this[12] + 4 * a2) + 4 * a3);
  v8 = *v7;
  v9 = *(int *)(v5 + 4 * v8);
  v10 = v7[1];
  v11 = *(_QWORD *)(*this + 24);
  v12 = *(_DWORD *)(v11 + 8 * v9);
  v13 = *(int *)(v11 + 4 * (int)((2 * v9) | 1));
  v14 = this[3];
  v15 = *(int *)(v5 + 4 * v10);
  v16 = *(_DWORD *)(v11 + 8 * v15);
  v17 = v14 + 4 * *(int *)(v11 + 4 * (int)((2 * v15) | 1));
  v18 = *(unsigned __int16 *)(v6 + 2 * v8);
  v19 = *(unsigned __int16 *)(v6 + 2 * v10);
  if (!v19)
    v19 = v16;
  if (v12 - 1 == v18)
    v20 = 0;
  else
    v20 = v18 + 1;
  *a4 = *(_DWORD *)(v14 + 4 * v13 + 4 * v20);
  a4[1] = *(_DWORD *)(v17 + 4 * (v19 - 1));
  return this;
}

void *OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::initializeFaceValuesFromFaceVertices(void **this)
{
  return memcpy(this[3], *((const void **)*this + 6), ((uint64_t)((*((_QWORD *)*this + 7) - *((_QWORD *)*this + 6)) << 30) >> 30) & 0xFFFFFFFFFFFFFFFCLL);
}

_QWORD *OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::initializeFaceValuesFromVertexFaceSiblings(_QWORD *this)
{
  uint64_t v1;
  int *v2;
  unint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  unsigned __int16 *v15;
  unsigned __int16 *v16;
  int v17;
  int v18;
  int v19;

  v1 = *this;
  v2 = *(int **)(*this + 48);
  v3 = *(_QWORD *)(*this + 56) - (_QWORD)v2;
  if ((int)(v3 >> 2) >= 1)
  {
    v4 = this[12];
    v5 = (_DWORD *)this[3];
    v6 = (v3 >> 2);
    do
    {
      v7 = *v2++;
      *v5++ = *(_DWORD *)(v4 + 4 * v7);
      --v6;
    }
    while (v6);
  }
  v8 = *(_DWORD *)(v1 + 8);
  if (v8 >= 1)
  {
    v9 = 0;
    v10 = this[9];
    do
    {
      if (*(unsigned __int16 *)(v10 + 2 * v9) >= 2u)
      {
        v11 = (unsigned int *)(*(_QWORD *)(v1 + 264) + 8 * v9);
        v12 = *v11;
        if ((int)v12 >= 1)
        {
          v13 = (int)v11[1];
          v14 = (int *)(*(_QWORD *)(v1 + 288) + 4 * v13);
          v15 = (unsigned __int16 *)(*(_QWORD *)(v1 + 312) + 2 * v13);
          v16 = (unsigned __int16 *)(this[15] + 2 * v13);
          do
          {
            v18 = *v16++;
            v17 = v18;
            if (v18)
            {
              v19 = *(_DWORD *)(*(_QWORD *)(v1 + 24) + 8 * *v14 + 4) + *v15;
              *(_DWORD *)(this[3] + 4 * v19) += v17;
            }
            ++v15;
            ++v14;
            --v12;
          }
          while (v12);
          v8 = *(_DWORD *)(v1 + 8);
        }
      }
      ++v9;
    }
    while (v9 < v8);
  }
  return this;
}

_QWORD *OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getEdgeFaceValues(_QWORD *this, int a2, int a3, int *a4)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;

  v4 = *this;
  v5 = (int *)(*(_QWORD *)(*this + 120) + 8 * a2);
  v6 = *v5;
  if (*(unsigned __int16 *)(this[9] + 2 * v5[1]) + *(unsigned __int16 *)(this[9] + 2 * v6) < 3)
  {
    if (*(int *)(v4 + 12) < 1)
    {
      v19 = this[12];
      v20 = this[18];
      *a4 = *(_DWORD *)(v20 + 4 * *(int *)(v19 + 4 * v6));
      v18 = *(_DWORD *)(v20 + 4 * *(int *)(v19 + 4 * v5[1]));
    }
    else
    {
      v17 = this[12];
      *a4 = *(_DWORD *)(v17 + 4 * v6);
      v18 = *(_DWORD *)(v17 + 4 * v5[1]);
    }
    a4[1] = v18;
  }
  else
  {
    v7 = *(int *)(*(_QWORD *)(v4 + 144) + ((8 * a2) | 4));
    v8 = *(int *)(*(_QWORD *)(v4 + 168) + 4 * v7 + 4 * a3);
    v9 = *(unsigned __int16 *)(*(_QWORD *)(v4 + 192) + 2 * v7 + 2 * a3);
    v10 = *(_QWORD *)(v4 + 24);
    v11 = *(_DWORD *)(v10 + 8 * v8);
    v12 = (2 * v8) | 1;
    v13 = this[3] + 4 * *(int *)(v10 + 4 * v12);
    v14 = *(_DWORD *)(v13 + 4 * v9);
    *a4 = v14;
    if ((int)v9 + 1 < v11)
      v15 = v9 + 1;
    else
      v15 = 0;
    v16 = *(_DWORD *)(v13 + 4 * v15);
    a4[1] = v16;
    if (*v5 != *(_DWORD *)(*(_QWORD *)(v4 + 48) + 4 * *(int *)(v10 + 4 * v12) + 4 * v9))
    {
      *a4 = v16;
      a4[1] = v14;
    }
  }
  return this;
}

_QWORD *OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getVertexEdgeValues(_QWORD *this, int a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int *v8;
  _WORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  unsigned __int16 *v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  unsigned int v45;
  unsigned int v46;

  v3 = *this;
  v4 = *(_QWORD *)(*this + 336);
  v5 = *(unsigned int *)(v4 + 8 * a2);
  if ((int)v5 >= 1)
  {
    v6 = (8 * ((unint64_t)(2 * a2) >> 1)) | 4;
    v7 = *(int *)(v4 + v6);
    v8 = (int *)(*(_QWORD *)(v3 + 360) + 4 * v7);
    v9 = (_WORD *)(*(_QWORD *)(v3 + 384) + 2 * v7);
    v10 = *(int *)(*(_QWORD *)(v3 + 264) + v6);
    v11 = *(_QWORD *)(v3 + 288) + 4 * v10;
    v12 = *(_QWORD *)(v3 + 312) + 2 * v10;
    v13 = *(_WORD *)(*(_QWORD *)(v3 + 432) + 2 * a2);
    v14 = *(_DWORD *)(v3 + 12);
    v15 = (v5 - 1);
    v16 = v15 - 1;
    v17 = this[6];
    v18 = (int *)v11;
    v19 = (unsigned __int16 *)v12;
    v20 = v15;
    v21 = a3;
    do
    {
      v23 = *v8++;
      v22 = v23;
      if ((*(_BYTE *)(v17 + v23) & 1) != 0)
        OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getVertexEdgeValues();
      v24 = 2 * v22;
      v25 = *(int *)(*(_QWORD *)(v3 + 120) + 8 * v22 + 4 * (*v9 == 0));
      if (*(_WORD *)(this[9] + 2 * v25) == 1)
      {
        v26 = (int *)(this[12] + 4 * v25);
        if (!v14)
          v26 = (int *)(this[18] + 4 * *v26);
        v27 = *v26;
      }
      else if ((v13 & 1) != 0)
      {
        v33 = *(int *)(*(_QWORD *)(v3 + 144) + 4 * (v24 | 1));
        v34 = *(int *)(*(_QWORD *)(v3 + 168) + 4 * v33);
        v35 = *(unsigned __int16 *)(*(_QWORD *)(v3 + 192) + 2 * v33);
        v36 = *(_QWORD *)(v3 + 24);
        v37 = *(int *)(v36 + 8 * v34 + 4);
        v38 = *(_QWORD *)(v3 + 48) + 4 * v37;
        v39 = this[3] + 4 * v37;
        if ((_DWORD)v25 == *(_DWORD *)(v38 + 4 * v35))
        {
          v27 = *(_DWORD *)(v39 + 4 * v35);
        }
        else
        {
          if (*(_DWORD *)(v36 + 8 * (_DWORD)v34) - 1 == (_DWORD)v35)
            v46 = 0;
          else
            v46 = v35 + 1;
          v27 = *(_DWORD *)(v39 + 4 * v46);
        }
      }
      else
      {
        if ((v13 & 4) != 0 && !v20)
        {
          v28 = *(int *)(v11 + 4 * v16);
          v29 = *(_QWORD *)(v3 + 24);
          v30 = *(_DWORD *)(v29 + 8 * v28);
          v31 = this[3] + 4 * *(int *)(v29 + 4 * (int)((2 * v28) | 1));
          v32 = *(unsigned __int16 *)(v12 + 2 * v16);
          if (!*(_WORD *)(v12 + 2 * v16))
            v32 = v30;
          a3[v15] = *(_DWORD *)(v31 + 4 * (v32 - 1));
          goto LABEL_9;
        }
        v40 = *v18;
        v41 = *(_QWORD *)(v3 + 24);
        v42 = *(_DWORD *)(v41 + 8 * v40);
        v43 = this[3] + 4 * *(int *)(v41 + 4 * (int)((2 * v40) | 1));
        v44 = *v19;
        if (v42 - 1 == v44)
          v45 = 0;
        else
          v45 = v44 + 1;
        v27 = *(_DWORD *)(v43 + 4 * v45);
      }
      *v21 = v27;
LABEL_9:
      ++v21;
      --v20;
      ++v19;
      ++v18;
      ++v9;
      --v5;
    }
    while (v5);
  }
  return this;
}

_QWORD *OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getFaceValueTags(_QWORD *result, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int *v13;
  int v14;

  v3 = *(_QWORD *)(*result + 24);
  v4 = *(unsigned int *)(v3 + 8 * a2);
  if ((int)v4 >= 1)
  {
    v5 = 0;
    v6 = *(int *)(v3 + 8 * a2 + 4);
    v7 = result[3] + 4 * v6;
    v8 = *(_QWORD *)(*result + 48) + 4 * v6;
    do
    {
      v9 = *(_DWORD *)(v7 + 4 * v5);
      v10 = result[18];
      v11 = v9;
      if (*(int *)(*result + 12) <= 0)
      {
        v12 = *(int *)(result[12] + 4 * *(int *)(v8 + 4 * v5));
        v11 = v12 - 1;
        v13 = (int *)(v10 + 4 * v12);
        do
        {
          v14 = *v13++;
          ++v11;
        }
        while (v14 != v9);
      }
      if (*(_DWORD *)(v10 + 4 * v11) != v9)
        OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getFaceValueTags();
      *(_BYTE *)(a3 + v5++) = *(_BYTE *)(result[21] + v11);
    }
    while (v5 != v4);
  }
  return result;
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getFaceCompositeValueTag(OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel *this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int *v15;
  int v16;

  v2 = *(_QWORD *)this;
  v3 = *(_QWORD *)(*(_QWORD *)this + 24);
  v4 = *(unsigned int *)(v3 + 8 * a2);
  if ((int)v4 < 1)
    return 0;
  v5 = 0;
  LODWORD(v6) = 0;
  v7 = *(int *)(v3 + 8 * a2 + 4);
  v8 = *((_QWORD *)this + 3) + 4 * v7;
  v9 = *(_QWORD *)(v2 + 48) + 4 * v7;
  v10 = *(_DWORD *)(v2 + 12);
  v11 = *((_QWORD *)this + 18);
  do
  {
    v12 = *(_DWORD *)(v8 + 4 * v5);
    v13 = v12;
    if (v10 <= 0)
    {
      v14 = *(int *)(*((_QWORD *)this + 12) + 4 * *(int *)(v9 + 4 * v5));
      v13 = v14 - 1;
      v15 = (int *)(v11 + 4 * v14);
      do
      {
        v16 = *v15++;
        ++v13;
      }
      while (v16 != v12);
    }
    if (*(_DWORD *)(v11 + 4 * v13) != v12)
      OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getFaceCompositeValueTag();
    v6 = *(unsigned __int8 *)(*((_QWORD *)this + 21) + v13) | v6;
    ++v5;
  }
  while (v5 != v4);
  return v6;
}

void std::vector<OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::ETag>::__append(_QWORD *a1, unint64_t a2, _BYTE *a3)
{
  unint64_t v4;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  void *v12;
  _BYTE *v13;
  char *v14;
  char *v15;
  _BYTE *v16;
  _BYTE *v17;
  char v18;

  v4 = a2;
  v7 = (_BYTE *)a1[1];
  v6 = a1[2];
  if (v6 - (uint64_t)v7 >= a2)
  {
    if (a2)
    {
      v13 = &v7[a2];
      do
      {
        *v7++ = *a3;
        --v4;
      }
      while (v4);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = &v7[-*a1];
    v9 = (unint64_t)&v8[a2];
    if ((uint64_t)&v8[a2] < 0)
      abort();
    v10 = v6 - *a1;
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
      v12 = operator new(v11);
    else
      v12 = 0;
    v14 = &v8[(_QWORD)v12];
    v15 = &v8[(_QWORD)v12 + v4];
    v16 = &v8[(_QWORD)v12];
    do
    {
      *v16++ = *a3;
      --v4;
    }
    while (v4);
    v17 = (_BYTE *)*a1;
    if (v7 != (_BYTE *)*a1)
    {
      do
      {
        v18 = *--v7;
        *--v14 = v18;
      }
      while (v7 != v17);
      v7 = (_BYTE *)*a1;
    }
    *a1 = v14;
    a1[1] = v15;
    a1[2] = (char *)v12 + v11;
    if (v7)
      operator delete(v7);
  }
}

void std::vector<unsigned short>::__append(void **a1, unint64_t a2, _WORD *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _WORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _WORD *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *i;
  __int16 v25;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_WORD **)(v6 - 8);
  if (a2 <= (v8 - (_BYTE *)v9) >> 1)
  {
    if (a2)
    {
      v16 = 2 * a2;
      v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 2;
      }
      while (v16);
      v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = (char *)v9 - (_BYTE *)*a1;
    v11 = a2 + (v10 >> 1);
    if (v11 < 0)
      abort();
    v12 = v10 >> 1;
    v13 = v7 - (_BYTE *)*a1;
    if (v13 > v11)
      v11 = v13;
    if (v13 >= 0x7FFFFFFFFFFFFFFELL)
      v14 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned short>>(v6, v14);
    else
      v15 = 0;
    v18 = &v15[2 * v12];
    v19 = &v18[2 * a2];
    v20 = 2 * a2;
    v21 = v18;
    do
    {
      *(_WORD *)v21 = *a3;
      v21 += 2;
      v20 -= 2;
    }
    while (v20);
    v22 = &v15[2 * v14];
    v23 = (char *)*a1;
    for (i = (char *)a1[1]; i != v23; i -= 2)
    {
      v25 = *((_WORD *)i - 1);
      *((_WORD *)v18 - 1) = v25;
      v18 -= 2;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
      operator delete(v23);
  }
}

void std::vector<OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::CreaseEndPair>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  int v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 2);
    if (v9 >> 62)
      abort();
    v10 = v8 >> 2;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 1 > v9)
      v9 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[4 * v10];
    v15 = &v13[4 * v12];
    bzero(v14, 4 * a2);
    v16 = &v14[4 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        v19 = *((_DWORD *)v17 - 1);
        v17 -= 4;
        *((_DWORD *)v14 - 1) = v19;
        v14 -= 4;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

char *std::vector<unsigned short>::__vallocate[abi:nn180100](_QWORD *a1, uint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 < 0)
    abort();
  result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned short>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[2 * v4];
  return result;
}

void OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::completeTopologyFromFaceValues()
{
  __assert_rtn("completeTopologyFromFaceValues", "fvarLevel.cpp", 539, "vSpan._size != 0");
}

void OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getVertexEdgeValues()
{
  __assert_rtn("getVertexEdgeValues", "fvarLevel.cpp", 899, "edgeTopologyMatches(eIndex)");
}

void OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getFaceValueTags()
{
  __assert_rtn("getFaceValueTags", "fvarLevel.cpp", 1033, "_vertValueIndices[srcValueIndex] == faceValues[i]");
}

void OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getFaceCompositeValueTag()
{
  __assert_rtn("getFaceCompositeValueTag", "fvarLevel.cpp", 1053, "_vertValueIndices[srcValueIndex] == faceValues[i]");
}

void OpenSubdiv::v3_1_1::Sdc::staticTraitsTable(OpenSubdiv::v3_1_1::Sdc *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      OpenSubdiv::v3_1_1::Sdc::staticTraitsTable(void)::staticTraitsTable = (uint64_t)"bilinear";
      unk_1F03C4E60 = xmmword_1DD02D080;
      qword_1F03C4E70 = (uint64_t)"catmark";
      xmmword_1F03C4E78 = xmmword_1DD02D090;
      qword_1F03C4E88 = (uint64_t)"loop";
      *(_OWORD *)algn_1F03C4E90 = xmmword_1DD02D0A0;
    }
  }
}

uint64_t OpenSubdiv::v3_1_1::Sdc::SchemeTypeTraits::GetTopologicalSplitType(OpenSubdiv::v3_1_1::Sdc *a1)
{
  unsigned int v1;

  v1 = a1;
  OpenSubdiv::v3_1_1::Sdc::staticTraitsTable(a1);
  return LODWORD(OpenSubdiv::v3_1_1::Sdc::staticTraitsTable(void)::staticTraitsTable[3 * v1 + 1]);
}

uint64_t OpenSubdiv::v3_1_1::Sdc::SchemeTypeTraits::GetRegularFaceSize(OpenSubdiv::v3_1_1::Sdc *a1)
{
  unsigned int v1;

  v1 = a1;
  OpenSubdiv::v3_1_1::Sdc::staticTraitsTable(a1);
  return HIDWORD(OpenSubdiv::v3_1_1::Sdc::staticTraitsTable(void)::staticTraitsTable[3 * v1 + 1]);
}

uint64_t OpenSubdiv::v3_1_1::Sdc::SchemeTypeTraits::GetRegularVertexValence(OpenSubdiv::v3_1_1::Sdc *a1)
{
  unsigned int v1;

  v1 = a1;
  OpenSubdiv::v3_1_1::Sdc::staticTraitsTable(a1);
  return LODWORD(OpenSubdiv::v3_1_1::Sdc::staticTraitsTable(void)::staticTraitsTable[3 * v1 + 2]);
}

uint64_t OpenSubdiv::v3_1_1::Sdc::SchemeTypeTraits::GetLocalNeighborhoodSize(OpenSubdiv::v3_1_1::Sdc *a1)
{
  unsigned int v1;

  v1 = a1;
  OpenSubdiv::v3_1_1::Sdc::staticTraitsTable(a1);
  return HIDWORD(OpenSubdiv::v3_1_1::Sdc::staticTraitsTable(void)::staticTraitsTable[3 * v1 + 2]);
}

void OpenSubdiv::v3_1_1::Osd::MTLLegacyGregoryPatchTable::~MTLLegacyGregoryPatchTable(id *this)
{

}

uint64_t OpenSubdiv::v3_1_1::Osd::MTLLegacyGregoryPatchTable::Create(OpenSubdiv::v3_1_1::Osd::MTLLegacyGregoryPatchTable *this, id *a2, MTLContext *a3)
{
  MTLContext *v5;
  uint64_t v6;
  OpenSubdiv::v3_1_1::Osd *v7;
  OpenSubdiv::v3_1_1::Osd *v8;
  OpenSubdiv::v3_1_1::Osd *v9;
  OpenSubdiv::v3_1_1::Osd *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v15;

  v6 = operator new();
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)v6 = 0;
  v7 = (OpenSubdiv::v3_1_1::Osd *)*((_QWORD *)this + 13);
  v8 = (OpenSubdiv::v3_1_1::Osd *)*((_QWORD *)this + 14);
  if (v7 != v8)
    *(_QWORD *)(v6 + 8) = OpenSubdiv::v3_1_1::Osd::createBuffer(v7, (const void *)(v8 - v7), a2, v5);
  v9 = (OpenSubdiv::v3_1_1::Osd *)*((_QWORD *)this + 10);
  v10 = (OpenSubdiv::v3_1_1::Osd *)*((_QWORD *)this + 11);
  if (v9 != v10)
    *(_QWORD *)(v6 + 16) = OpenSubdiv::v3_1_1::Osd::createBuffer(v9, (const void *)(v10 - v9), a2, v5);
  *(_QWORD *)(v6 + 24) = 0;
  if ((int)OpenSubdiv::v3_1_1::Far::PatchTable::GetNumPatchArrays(this) >= 1)
  {
    v12 = 0;
    while (1)
    {
      OpenSubdiv::v3_1_1::Far::PatchTable::GetPatchArrayDescriptor((uint64_t)this, v12, v11, &v15);
      if (v15 == 7)
        break;
      v12 = (v12 + 1);
      if ((int)v12 >= (int)OpenSubdiv::v3_1_1::Far::PatchTable::GetNumPatchArrays(this))
        return v6;
    }
    *(_DWORD *)(v6 + 28) = 4 * OpenSubdiv::v3_1_1::Far::PatchTable::GetNumPatches(this, v12, v13);
  }
  return v6;
}

uint64_t OpenSubdiv::v3_1_1::Osd::createBuffer(OpenSubdiv::v3_1_1::Osd *this, const void *a2, id *a3, MTLContext *a4)
{
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;

  v7 = (void *)MEMORY[0x1DF0D4CF4](this, a2, a3, a4);
  v8 = (void *)objc_msgSend(a3[1], "commandBuffer");
  v9 = (void *)objc_msgSend(v8, "blitCommandEncoder");
  v10 = (void *)objc_msgSend(*a3, "newBufferWithBytes:length:options:", this, a2, 0);
  v11 = objc_msgSend(*a3, "newBufferWithLength:options:", a2, 32);
  objc_msgSend(v9, "copyFromBuffer:sourceOffset:toBuffer:destinationOffset:size:", v10, 0, v11, 0, a2);
  objc_msgSend(v9, "endEncoding");
  objc_msgSend(v8, "commit");
  objc_msgSend(v8, "waitUntilCompleted");

  objc_autoreleasePoolPop(v7);
  return v11;
}

uint64_t OpenSubdiv::v3_1_1::Far::StencilTable::StencilTable(uint64_t a1, int a2, uint64_t *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, int a7, unint64_t a8)
{
  *(_QWORD *)a1 = &off_1EA598468;
  *(_DWORD *)(a1 + 8) = a2;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
    0,
    0);
  return a1;
}

void OpenSubdiv::v3_1_1::Far::`anonymous namespace'::copyStencilData(int a1, int a2, unint64_t a3, uint64_t *a4, std::vector<unsigned int> *this, _QWORD *a6, std::vector<unsigned int> *a7, _QWORD *a8, std::vector<unsigned int> *a9, _QWORD *a10, _QWORD *a11, _QWORD *a12, _QWORD *a13, _QWORD *a14, _QWORD *a15, _QWORD *a16, _QWORD *a17, _QWORD *a18, _QWORD *a19, _QWORD *a20,_QWORD *a21)
{
  unint64_t v24;
  uint64_t v25;
  std::vector<unsigned int>::size_type v26;
  std::vector<unsigned int>::size_type v27;
  signed int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v33;
  _QWORD *v35;
  _QWORD *v36;
  std::vector<unsigned int> *v39;

  v33 = a2;
  if (a2)
    v24 = 0;
  else
    v24 = a3;
  std::vector<int>::resize(this, (a4[1] - *a4) >> 2);
  v35 = a6;
  v39 = a7;
  std::vector<int>::resize(a7, (uint64_t)(a6[1] - *a6) >> 2);
  v36 = a8;
  std::vector<int>::resize(a9, (uint64_t)(a8[1] - *a8) >> 2);
  std::vector<float>::resize((uint64_t)a11, (uint64_t)(a10[1] - *a10) >> 2);
  if (a13)
    std::vector<float>::resize((uint64_t)a13, (uint64_t)(a12[1] - *a12) >> 2);
  if (a15)
    std::vector<float>::resize((uint64_t)a15, (uint64_t)(a14[1] - *a14) >> 2);
  if (a17)
    std::vector<float>::resize((uint64_t)a17, (uint64_t)(a16[1] - *a16) >> 2);
  if (a19)
    std::vector<float>::resize((uint64_t)a19, (uint64_t)(a18[1] - *a18) >> 2);
  if (a21)
    std::vector<float>::resize((uint64_t)a21, (uint64_t)(a20[1] - *a20) >> 2);
  v25 = *a4;
  if (v24 >= (a4[1] - *a4) >> 2)
  {
    v27 = 0;
    v26 = 0;
  }
  else
  {
    v26 = 0;
    v27 = 0;
    v28 = 0;
    do
    {
      if ((((_DWORD)v24 == a1) & v33) != 0)
        v29 = a3;
      else
        v29 = v24;
      v30 = *(int *)(*v35 + 4 * v29);
      v31 = *(int *)(v25 + 4 * v29);
      this->__begin_[v27] = v28;
      v39->__begin_[v27] = v30;
      memcpy(&a9->__begin_[v28], (const void *)(*v36 + 4 * v31), 4 * v30);
      memcpy((void *)(*a11 + 4 * v28), (const void *)(*a10 + 4 * v31), 4 * v30);
      if (a13 && *a13 != a13[1])
        memcpy((void *)(*a13 + 4 * v28), (const void *)(*a12 + 4 * v31), 4 * v30);
      if (a15 && *a15 != a15[1])
        memcpy((void *)(*a15 + 4 * v28), (const void *)(*a14 + 4 * v31), 4 * v30);
      if (a17 && *a17 != a17[1])
        memcpy((void *)(*a17 + 4 * v28), (const void *)(*a16 + 4 * v31), 4 * v30);
      if (a19 && *a19 != a19[1])
        memcpy((void *)(*a19 + 4 * v28), (const void *)(*a18 + 4 * v31), 4 * v30);
      if (a21 && *a21 != a21[1])
        memcpy((void *)(*a21 + 4 * v28), (const void *)(*a20 + 4 * v31), 4 * v30);
      v28 += v30;
      ++v27;
      v26 += v30;
      v24 = v29 + 1;
      v25 = *a4;
    }
    while (v29 + 1 < (a4[1] - *a4) >> 2);
  }
  std::vector<int>::resize(this, v27);
  std::vector<int>::resize(v39, v27);
  std::vector<int>::resize(a9, v26);
  if (a13 && *a13 != a13[1])
    std::vector<float>::resize((uint64_t)a13, v26);
  if (a15 && *a15 != a15[1])
    std::vector<float>::resize((uint64_t)a15, v26);
  if (a17 && *a17 != a17[1])
    std::vector<float>::resize((uint64_t)a17, v26);
  if (a19 && *a19 != a19[1])
    std::vector<float>::resize((uint64_t)a19, v26);
  if (a21)
  {
    if (*a21 != a21[1])
      std::vector<float>::resize((uint64_t)a21, v26);
  }
}

void OpenSubdiv::v3_1_1::Far::StencilTable::~StencilTable(OpenSubdiv::v3_1_1::Far::StencilTable *this)
{
  OpenSubdiv::v3_1_1::Far::StencilTable::~StencilTable(this);
  JUMPOUT(0x1DF0D41C0);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *(_QWORD *)this = &off_1EA598468;
  v2 = (void *)*((_QWORD *)this + 11);
  if (v2)
  {
    *((_QWORD *)this + 12) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 8);
  if (v3)
  {
    *((_QWORD *)this + 9) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 5);
  if (v4)
  {
    *((_QWORD *)this + 6) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 2);
  if (v5)
  {
    *((_QWORD *)this + 3) = v5;
    operator delete(v5);
  }
}

OpenSubdiv::v3_1_1::Far::internal::StencilBuilder *OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::StencilBuilder(OpenSubdiv::v3_1_1::Far::internal::StencilBuilder *this, int a2, int a3, char a4)
{
  OpenSubdiv::v3_1_1::Far::internal::WeightTable *v8;

  v8 = (OpenSubdiv::v3_1_1::Far::internal::WeightTable *)operator new();
  *(_QWORD *)this = OpenSubdiv::v3_1_1::Far::internal::WeightTable::WeightTable(v8, a2, a3, a4);
  return this;
}

void OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::~StencilBuilder(OpenSubdiv::v3_1_1::Far::internal::WeightTable **this)
{
  OpenSubdiv::v3_1_1::Far::internal::WeightTable *v1;

  v1 = *this;
  if (v1)
  {
    OpenSubdiv::v3_1_1::Far::internal::WeightTable::~WeightTable(v1);
    MEMORY[0x1DF0D41C0]();
  }
}

uint64_t OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::GetNumVertsInStencil(OpenSubdiv::v3_1_1::Far::internal::StencilBuilder *this, unint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)this + 216);
  if (((*(_QWORD *)(*(_QWORD *)this + 224) - v2) >> 2) - 1 >= a2)
    return *(unsigned int *)(v2 + 4 * a2);
  else
    return 0;
}

uint64_t OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::SetCoarseVertCount(uint64_t this, int a2)
{
  *(_DWORD *)(*(_QWORD *)this + 248) = a2;
  return this;
}

uint64_t OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::GetStencilOffsets(OpenSubdiv::v3_1_1::Far::internal::StencilBuilder *this)
{
  return *(_QWORD *)this + 192;
}

uint64_t OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::GetStencilSizes(OpenSubdiv::v3_1_1::Far::internal::StencilBuilder *this)
{
  return *(_QWORD *)this + 216;
}

uint64_t OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::GetStencilSources(OpenSubdiv::v3_1_1::Far::internal::StencilBuilder *this)
{
  return *(_QWORD *)this + 24;
}

uint64_t OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::GetStencilWeights(OpenSubdiv::v3_1_1::Far::internal::StencilBuilder *this)
{
  return *(_QWORD *)this + 48;
}

void OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index::AddWithWeight(uint64_t a1, uint64_t a2, float a3)
{
  if (a3 != 0.0)
    OpenSubdiv::v3_1_1::Far::internal::WeightTable::AddWithWeight<float,OpenSubdiv::v3_1_1::Far::internal::WeightTable::ScalarAccumulator>(**(_QWORD **)a1, *(_DWORD *)(a2 + 8), *(unsigned int *)(a1 + 8), **(_QWORD **)a1, a3);
}

void OpenSubdiv::v3_1_1::Far::internal::WeightTable::AddWithWeight<float,OpenSubdiv::v3_1_1::Far::internal::WeightTable::ScalarAccumulator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, float a5)
{
  int v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v7 = a3;
  if (*(_DWORD *)(a1 + 248) <= a2)
  {
    v9 = *(int *)(*(_QWORD *)(a1 + 216) + 4 * a2);
    if ((int)v9 >= 1)
    {
      v10 = *(int *)(*(_QWORD *)(a1 + 192) + 4 * a2);
      v11 = v10 + v9;
      do
      {
        v12 = *(unsigned int *)(*(_QWORD *)(a1 + 24) + 4 * v10);
        if ((int)v12 >= *(_DWORD *)(a1 + 248))
          OpenSubdiv::v3_1_1::Far::internal::WeightTable::AddWithWeight<float,OpenSubdiv::v3_1_1::Far::internal::WeightTable::ScalarAccumulator>(a1, v12, a3);
        OpenSubdiv::v3_1_1::Far::internal::WeightTable::merge<float,OpenSubdiv::v3_1_1::Far::internal::WeightTable::ScalarAccumulator>(a1, v12, v7, *(_DWORD *)(a1 + 244), *(_DWORD *)(a1 + 240), a4, *(float *)(*(_QWORD *)(a4 + 48) + 4 * v10++), a5);
      }
      while (v10 < v11);
    }
  }
  else
  {
    OpenSubdiv::v3_1_1::Far::internal::WeightTable::merge<float,OpenSubdiv::v3_1_1::Far::internal::WeightTable::ScalarAccumulator>(a1, a2, a3, *(_DWORD *)(a1 + 244), *(_DWORD *)(a1 + 240), a4, a5, 1.0);
  }
}

void OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index::AddWithWeight(uint64_t a1, unsigned int **a2, float a3)
{
  uint64_t v3;
  int *v6;
  float *v7;

  if (a3 != 0.0)
  {
    v3 = **a2;
    if ((int)v3 >= 1)
    {
      v6 = (int *)a2[1];
      v7 = (float *)a2[2];
      do
      {
        if (*v7 != 0.0)
          OpenSubdiv::v3_1_1::Far::internal::WeightTable::AddWithWeight<float,OpenSubdiv::v3_1_1::Far::internal::WeightTable::ScalarAccumulator>(**(_QWORD **)a1, *v6, *(unsigned int *)(a1 + 8), **(_QWORD **)a1, *v7 * a3);
        ++v6;
        ++v7;
        --v3;
      }
      while (v3);
    }
  }
}

OpenSubdiv::v3_1_1::Far::internal::WeightTable *OpenSubdiv::v3_1_1::Far::internal::WeightTable::WeightTable(OpenSubdiv::v3_1_1::Far::internal::WeightTable *this, int a2, int a3, char a4)
{
  void **v7;
  std::vector<unsigned int> *v8;
  int v9;
  std::vector<int> *v10;
  std::vector<int>::size_type v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  *((_OWORD *)this + 3) = 0u;
  v7 = (void **)((char *)this + 48);
  *((_OWORD *)this + 12) = 0u;
  v8 = (std::vector<unsigned int> *)((char *)this + 192);
  *((_QWORD *)this + 30) = 0;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  v9 = 2 * a2;
  if (a2 >= 2621440)
    v9 = 5242880;
  v10 = (std::vector<int> *)((char *)this + 24);
  *((_OWORD *)this + 8) = 0uLL;
  *((_OWORD *)this + 9) = 0uLL;
  *((_OWORD *)this + 6) = 0uLL;
  *((_OWORD *)this + 7) = 0uLL;
  *((_OWORD *)this + 4) = 0uLL;
  *((_OWORD *)this + 5) = 0uLL;
  *((_OWORD *)this + 1) = 0uLL;
  *((_OWORD *)this + 2) = 0uLL;
  *(_OWORD *)this = 0uLL;
  *((_DWORD *)this + 62) = a2;
  if (v9 <= a2)
    v9 = a2;
  v11 = v9;
  *((_BYTE *)this + 252) = a4;
  std::vector<unsigned int>::reserve((std::vector<int> *)this, v9);
  std::vector<unsigned int>::reserve(v10, v11);
  std::vector<float>::reserve(v7, v11);
  if (a3)
  {
    std::vector<int>::resize((std::vector<unsigned int> *)v10, a2);
    std::vector<float>::resize((uint64_t)v7, a2);
    std::vector<int>::resize((std::vector<unsigned int> *)this, a2);
    std::vector<int>::resize(v8, a2);
    std::vector<int>::resize((std::vector<unsigned int> *)this + 9, a2);
    v12 = *((_QWORD *)this + 3);
    if (a2 >= 1)
    {
      v13 = 0;
      v14 = *((_QWORD *)this + 24);
      v15 = *((_QWORD *)this + 27);
      v16 = *(_QWORD *)this;
      v17 = *((_QWORD *)this + 6);
      do
      {
        *(_DWORD *)(v14 + 4 * v13) = v13;
        *(_DWORD *)(v15 + 4 * v13) = 1;
        *(_DWORD *)(v16 + 4 * v13) = v13;
        *(_DWORD *)(v12 + 4 * v13) = v13;
        *(_DWORD *)(v17 + 4 * v13++) = 1065353216;
      }
      while (a2 != v13);
    }
    v18 = (unint64_t)(*((_QWORD *)this + 4) - v12) >> 2;
    *((_DWORD *)this + 60) = v18;
    *((_DWORD *)this + 61) = v18 - 1;
  }
  return this;
}

void OpenSubdiv::v3_1_1::Far::internal::WeightTable::~WeightTable(OpenSubdiv::v3_1_1::Far::internal::WeightTable *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  v2 = (void *)*((_QWORD *)this + 27);
  if (v2)
  {
    *((_QWORD *)this + 28) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 24);
  if (v3)
  {
    *((_QWORD *)this + 25) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 21);
  if (v4)
  {
    *((_QWORD *)this + 22) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 18);
  if (v5)
  {
    *((_QWORD *)this + 19) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 15);
  if (v6)
  {
    *((_QWORD *)this + 16) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 12);
  if (v7)
  {
    *((_QWORD *)this + 13) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 9);
  if (v8)
  {
    *((_QWORD *)this + 10) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 6);
  if (v9)
  {
    *((_QWORD *)this + 7) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 3);
  if (v10)
  {
    *((_QWORD *)this + 4) = v10;
    operator delete(v10);
  }
  v11 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v11;
    operator delete(v11);
  }
}

float OpenSubdiv::v3_1_1::Far::internal::WeightTable::merge<float,OpenSubdiv::v3_1_1::Far::internal::WeightTable::ScalarAccumulator>(uint64_t a1, int a2, int a3, int a4, int a5, uint64_t a6, float a7, float a8)
{
  BOOL v8;
  uint64_t v9;
  float result;
  uint64_t v11;

  if (*(_BYTE *)(a1 + 252)
    && *(_QWORD *)a1 != *(_QWORD *)(a1 + 8)
    && (*(_DWORD *)(*(_QWORD *)a1 + 4 * a4) == a3 ? (v8 = a4 < a5) : (v8 = 0), v8))
  {
    v9 = a4;
    while (*(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * v9) != a2)
    {
      if (a5 == ++v9)
        goto LABEL_11;
    }
    v11 = *(_QWORD *)(a6 + 48);
    result = (float)(a7 * a8) + *(float *)(v11 + 4 * v9);
    *(float *)(v11 + 4 * v9) = result;
  }
  else
  {
LABEL_11:
    OpenSubdiv::v3_1_1::Far::internal::WeightTable::add<float,OpenSubdiv::v3_1_1::Far::internal::WeightTable::ScalarAccumulator>(a1, a2, a3, a6, a7 * a8);
  }
  return result;
}

void OpenSubdiv::v3_1_1::Far::internal::WeightTable::add<float,OpenSubdiv::v3_1_1::Far::internal::WeightTable::ScalarAccumulator>(uint64_t a1, int a2, int a3, uint64_t a4, float a5)
{
  int *v9;
  uint64_t v10;
  uint64_t v11;
  std::vector<unsigned int> *v12;
  uint64_t v13;
  std::vector<unsigned int>::size_type v14;
  uint64_t v15;
  unint64_t v16;
  _DWORD *v17;
  int *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  int *v25;
  char *v26;
  int v27;
  unint64_t v28;
  char *v29;
  _DWORD *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  int v39;
  uint64_t v40;

  v40 = a4;
  v9 = *(int **)(a1 + 8);
  if (*(int **)a1 == v9 || *(v9 - 1) != a3)
  {
    v13 = *(_QWORD *)(a1 + 192);
    v12 = (std::vector<unsigned int> *)(a1 + 192);
    if ((int)((unint64_t)(*(_QWORD *)(a1 + 200) - v13) >> 2) <= a3)
    {
      v14 = a3 + 1;
      std::vector<int>::resize(v12, v14);
      std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 216), v14);
      v13 = *(_QWORD *)(a1 + 192);
      v9 = *(int **)(a1 + 8);
    }
    v15 = (*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2;
    v11 = a3;
    *(_DWORD *)(v13 + 4 * a3) = v15;
    v10 = *(_QWORD *)(a1 + 216);
    *(_DWORD *)(v10 + 4 * a3) = 0;
    *(_DWORD *)(a1 + 244) = v15;
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 216);
    v11 = a3;
  }
  v16 = *(_QWORD *)(a1 + 16);
  ++*(_DWORD *)(a1 + 240);
  ++*(_DWORD *)(v10 + 4 * v11);
  if ((unint64_t)v9 >= v16)
  {
    v18 = *(int **)a1;
    v19 = ((uint64_t)v9 - *(_QWORD *)a1) >> 2;
    v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 62)
      goto LABEL_40;
    v21 = v16 - (_QWORD)v18;
    v22 = (uint64_t)(v16 - (_QWORD)v18) >> 1;
    if (v22 > v20)
      v20 = v22;
    if (v21 >= 0x7FFFFFFFFFFFFFFCLL)
      v23 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v23 = v20;
    if (v23)
    {
      v24 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a1 + 16, v23);
      v18 = *(int **)a1;
      v9 = *(int **)(a1 + 8);
    }
    else
    {
      v24 = 0;
    }
    v25 = (int *)&v24[4 * v19];
    v26 = &v24[4 * v23];
    *v25 = a3;
    v17 = v25 + 1;
    while (v9 != v18)
    {
      v27 = *--v9;
      *--v25 = v27;
    }
    *(_QWORD *)a1 = v25;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v26;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v9 = a3;
    v17 = v9 + 1;
  }
  v28 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 8) = v17;
  v29 = *(char **)(a1 + 32);
  if ((unint64_t)v29 < v28)
  {
    *(_DWORD *)v29 = a2;
    v30 = v29 + 4;
    goto LABEL_39;
  }
  v31 = *(char **)(a1 + 24);
  v32 = (v29 - v31) >> 2;
  v33 = v32 + 1;
  if ((unint64_t)(v32 + 1) >> 62)
LABEL_40:
    abort();
  v34 = v28 - (_QWORD)v31;
  if (v34 >> 1 > v33)
    v33 = v34 >> 1;
  if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL)
    v35 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v35 = v33;
  if (v35)
  {
    v36 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a1 + 40, v35);
    v31 = *(char **)(a1 + 24);
    v29 = *(char **)(a1 + 32);
  }
  else
  {
    v36 = 0;
  }
  v37 = &v36[4 * v32];
  v38 = &v36[4 * v35];
  *(_DWORD *)v37 = a2;
  v30 = v37 + 4;
  while (v29 != v31)
  {
    v39 = *((_DWORD *)v29 - 1);
    v29 -= 4;
    *((_DWORD *)v37 - 1) = v39;
    v37 -= 4;
  }
  *(_QWORD *)(a1 + 24) = v37;
  *(_QWORD *)(a1 + 32) = v30;
  *(_QWORD *)(a1 + 40) = v38;
  if (v31)
    operator delete(v31);
LABEL_39:
  *(_QWORD *)(a1 + 32) = v30;
  OpenSubdiv::v3_1_1::Far::internal::WeightTable::ScalarAccumulator::PushBack((OpenSubdiv::v3_1_1::Far::internal::WeightTable::ScalarAccumulator *)&v40, a5);
}

void OpenSubdiv::v3_1_1::Far::internal::WeightTable::ScalarAccumulator::PushBack(OpenSubdiv::v3_1_1::Far::internal::WeightTable::ScalarAccumulator *this, float a2)
{
  _QWORD *v3;
  float *v4;
  _QWORD *v5;
  float *v6;
  float *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  float *v13;
  char *v14;
  int v15;

  v3 = *(_QWORD **)this;
  v4 = *(float **)(*(_QWORD *)this + 56);
  v5 = (_QWORD *)(*(_QWORD *)this + 64);
  if ((unint64_t)v4 >= *v5)
  {
    v7 = (float *)v3[6];
    v8 = v4 - v7;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 62)
      abort();
    v10 = *v5 - (_QWORD)v7;
    if (v10 >> 1 > v9)
      v9 = v10 >> 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      v12 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v5, v11);
      v7 = (float *)v3[6];
      v4 = (float *)v3[7];
    }
    else
    {
      v12 = 0;
    }
    v13 = (float *)&v12[4 * v8];
    v14 = &v12[4 * v11];
    *v13 = a2;
    v6 = v13 + 1;
    while (v4 != v7)
    {
      v15 = *((_DWORD *)v4-- - 1);
      *((_DWORD *)v13-- - 1) = v15;
    }
    v3[6] = v13;
    v3[7] = v6;
    v3[8] = v14;
    if (v7)
      operator delete(v7);
  }
  else
  {
    *v4 = a2;
    v6 = v4 + 1;
  }
  v3[7] = v6;
}

void OUTLINED_FUNCTION_0_10(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 188, a4);
}

void OpenSubdiv::v3_1_1::Far::internal::WeightTable::AddWithWeight<float,OpenSubdiv::v3_1_1::Far::internal::WeightTable::ScalarAccumulator>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_0_10("AddWithWeight", "stencilBuilder.cpp", a3, "_sources[i] < _coarseVertCount");
}

uint64_t OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::BuilderContext(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  std::vector<unsigned int> *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  OpenSubdiv::v3_1_1::Far::PtexIndices::PtexIndices((std::vector<unsigned int> *)(a1 + 32), a2);
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_BYTE *)(a1 + 24) = 1;
  if ((*(_BYTE *)(a1 + 9) & 0x10) != 0)
  {
    v5 = (std::vector<unsigned int> *)(a1 + 144);
    v6 = *(int *)(a1 + 12);
    if ((_DWORD)v6 == -1)
    {
      std::vector<int>::resize(v5, (int)((uint64_t)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)a1 + 40) + 464)- *(_QWORD *)(**(_QWORD **)(*(_QWORD *)a1 + 40) + 456)) >> 3));
      v7 = *(_QWORD *)(a1 + 144);
      v8 = *(_QWORD *)(a1 + 152) - v7;
      if ((int)(v8 >> 2) >= 1)
      {
        v9 = 0;
        v10 = (v8 >> 2);
        do
        {
          *(_DWORD *)(v7 + 4 * v9) = v9;
          ++v9;
        }
        while (v10 != v9);
      }
    }
    else
    {
      std::vector<int>::__assign_with_size[abi:nn180100]<int const*,int const*>((char *)v5, *(char **)(a1 + 16), (char *)(*(_QWORD *)(a1 + 16) + 4 * v6), v6);
    }
  }
  return a1;
}

uint64_t OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::GatherLinearPatchPoints(_QWORD *a1, _DWORD *a2, int *a3, unsigned int a4)
{
  uint64_t v6;
  OpenSubdiv::v3_1_1::Vtr::internal::Level *v7;
  int v8;
  int v9;
  int *FaceFVarValues;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  v6 = a3[1];
  v7 = *(OpenSubdiv::v3_1_1::Vtr::internal::Level **)(*(_QWORD *)(*a1 + 40) + 8 * v6);
  if ((a4 & 0x80000000) != 0)
  {
    v8 = *(_DWORD *)(a1[12] + 4 * v6);
  }
  else
  {
    v8 = *(_DWORD *)(*(_QWORD *)(a1[15] + 24 * a4) + 4 * v6);
    v9 = *(_DWORD *)(a1[18] + 4 * a4);
    if ((v9 & 0x80000000) == 0)
    {
      FaceFVarValues = (int *)OpenSubdiv::v3_1_1::Vtr::internal::Level::getFaceFVarValues(v7, *a3, v9);
      goto LABEL_6;
    }
  }
  v12 = *a3;
  v13 = *((_QWORD *)v7 + 3);
  FaceFVarValues = (int *)(*((_QWORD *)v7 + 6) + 4 * *(int *)(v13 + 8 * v12 + 4));
  v11 = *(unsigned int *)(v13 + 8 * (_DWORD)v12);
LABEL_6:
  if ((int)v11 >= 1)
  {
    v14 = v11;
    do
    {
      v15 = *FaceFVarValues++;
      *a2++ = v15 + v8;
      --v14;
    }
    while (v14);
  }
  return v11;
}

uint64_t OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::GatherRegularPatchPoints(_QWORD *a1, uint64_t a2, int *a3, int a4, unsigned int a5)
{
  uint64_t v7;
  OpenSubdiv::v3_1_1::Vtr::internal::Level *v8;
  _QWORD *v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v20;
  int32x4_t v21;
  int v22[16];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v7 = a3[1];
  v8 = *(OpenSubdiv::v3_1_1::Vtr::internal::Level **)(*(_QWORD *)(*a1 + 40) + 8 * v7);
  if ((a5 & 0x80000000) != 0)
  {
    v9 = a1 + 12;
    v10 = -1;
  }
  else
  {
    v9 = (_QWORD *)(a1[15] + 24 * a5);
    v10 = *(_DWORD *)(a1[18] + 4 * a5);
  }
  v11 = *(_DWORD *)(*v9 + 4 * v7);
  if (!a4)
    goto LABEL_8;
  v12 = OpenSubdiv::v3_1_1::Far::PatchTableFactory::PatchFaceTag::assignBoundaryPropertiesFromEdgeMask(int)::edgeMaskToCount[a4];
  v13 = OpenSubdiv::v3_1_1::Far::PatchTableFactory::PatchFaceTag::assignBoundaryPropertiesFromEdgeMask(int)::edgeMaskToIndex[a4];
  switch(v12)
  {
    case 2:
      v14 = (char *)&OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::GatherRegularPatchPoints(int *,OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::PatchTuple const&,int,int)const::permuteCorner
          + 64 * v13;
      OpenSubdiv::v3_1_1::Vtr::internal::Level::gatherQuadRegularCornerPatchPoints(v8, *a3, v22, v13, v10);
      goto LABEL_11;
    case 1:
      v14 = (char *)&OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::GatherRegularPatchPoints(int *,OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::PatchTuple const&,int,int)const::permuteBoundary
          + 64 * v13;
      OpenSubdiv::v3_1_1::Vtr::internal::Level::gatherQuadRegularBoundaryPatchPoints(v8, *a3, v22, v13, v10);
LABEL_11:
      v15 = 0;
      v16 = v22[0];
      do
      {
        v17 = *(unsigned int *)&v14[v15];
        v18 = v16;
        if ((v17 & 0x80000000) == 0)
          v18 = v22[v17];
        *(_DWORD *)(a2 + v15) = v18 + v11;
        v15 += 4;
      }
      while (v15 != 64);
      return 16;
    case 0:
LABEL_8:
      OpenSubdiv::v3_1_1::Vtr::internal::Level::gatherQuadRegularInteriorPatchPoints(v8, *a3, v22, 0, v10);
      v14 = (char *)&OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::GatherRegularPatchPoints(int *,OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::PatchTuple const&,int,int)const::permuteRegular;
      goto LABEL_11;
  }
  if (v11)
  {
    v20 = 0;
    v21 = vdupq_n_s32(v11);
    do
    {
      *(int32x4_t *)(a2 + v20 * 4) = vaddq_s32(*(int32x4_t *)&v22[v20], v21);
      v20 += 4;
    }
    while (v20 != 16);
  }
  return 16;
}

BOOL OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::IsPatchEligible(OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext *this, int a2, int a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  int *v6;
  int *v8[2];

  v3 = *(_QWORD *)this;
  v4 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)this + 40) + 8 * a2);
  if ((*(_BYTE *)(v4[12] + a3) & 1) != 0
    || ((*(unsigned __int8 *)(v3 + 8) >> 2) & 0xF) > a2
    && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 64) + 8 * a2) + 408) + a3) & 1) != 0)
  {
    return 0;
  }
  v5 = v4[3];
  v6 = (int *)*(unsigned int *)(v5 + 8 * a3);
  v8[0] = (int *)(v4[6] + 4 * *(int *)(v5 + 8 * a3 + 4));
  v8[1] = v6;
  if ((_DWORD)v6 != 4)
    OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::IsPatchEligible();
  return (OpenSubdiv::v3_1_1::Vtr::internal::Level::getFaceCompositeVTag((uint64_t)v4, v8) & 0x800) == 0;
}

BOOL OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::IsPatchSmoothCorner(OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext *this, int a2, int a3, unsigned int a4)
{
  _QWORD *v7;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int16x4_t v12;
  uint8x8_t v13;
  int v14;
  int v15;
  int v16;
  int v19;
  int8x8_t v20[2];

  v20[1] = *(int8x8_t *)MEMORY[0x1E0C80C00];
  v7 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)this + 40) + 8 * a2);
  if ((a4 & 0x80000000) != 0
    || OpenSubdiv::v3_1_1::Vtr::internal::Level::doesFaceFVarTopologyMatch(*(OpenSubdiv::v3_1_1::Vtr::internal::Level **)(*(_QWORD *)(*(_QWORD *)this + 40) + 8 * a2), a3, *(_DWORD *)(*((_QWORD *)this + 18) + 4 * a4)))
  {
    v9 = -1;
  }
  else
  {
    v9 = *(_DWORD *)(*((_QWORD *)this + 18) + 4 * a4);
  }
  if (*(_DWORD *)(v7[3] + 8 * a3) != 4)
    return 0;
  OpenSubdiv::v3_1_1::Vtr::internal::Level::getFaceVTags(v7, a3, v20, v9);
  v10 = (*((_WORD *)this + 4) & 8) != 0 ? 6016 : 1924;
  v11 = (*((_WORD *)this + 4) & 8) != 0 ? 4608 : 516;
  v12 = (int16x4_t)vand_s8((int8x8_t)vceq_s16((int16x4_t)vand_s8(v20[0], (int8x8_t)vdup_n_s16(v10)), vdup_n_s16(v11)), (int8x8_t)0x8000400020001);
  v12.i32[0] = vaddv_s16(v12) & 0xF;
  v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
  v13.i16[0] = vaddlv_u8(v13);
  v14 = (v20[0].u16[0] >> 1) & 1;
  v15 = (v20[0].u16[1] >> 1) & 1;
  v16 = (v20[0].u16[2] >> 1) & 1;
  if (v13.i32[0] != 3 || v15 + v14 + v16 + ((v20[0].u16[3] >> 1) & 1) != 1)
    return 0;
  if (a2 > 1)
    return 1;
  if (v14)
  {
    v19 = v20[0].i16[2] & 0x780;
  }
  else if (v15)
  {
    v19 = v20[0].i16[3] & 0x780;
  }
  else if (v16)
  {
    v19 = v20[0].i16[0] & 0x780;
  }
  else
  {
    v19 = v20[0].i16[1] & 0x780;
  }
  return v19 == 128;
}

BOOL OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::IsPatchRegular(OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext *this, int a2, int a3, unsigned int a4)
{
  int v5;
  OpenSubdiv::v3_1_1::Vtr::internal::Level *v7;
  unsigned int v9;
  __int16 FaceCompositeVTag;
  char v11;
  BOOL v12;
  char v13;
  unsigned int v14;
  uint64_t v15;
  __int16 v16;
  int v17;
  int16x8_t v18;
  unsigned __int32 v19;
  _BOOL8 result;
  char v22;
  int v24;
  int v25;
  __int16 v26;
  int8x8_t v27[2];

  v5 = a2;
  v27[1] = *(int8x8_t *)MEMORY[0x1E0C80C00];
  v7 = *(OpenSubdiv::v3_1_1::Vtr::internal::Level **)(*(_QWORD *)(*(_QWORD *)this + 40) + 8 * a2);
  if ((a4 & 0x80000000) != 0
    || OpenSubdiv::v3_1_1::Vtr::internal::Level::doesFaceFVarTopologyMatch(v7, a3, *(_DWORD *)(*((_QWORD *)this + 18) + 4 * a4)))
  {
    v9 = -1;
  }
  else
  {
    v9 = *(_DWORD *)(*((_QWORD *)this + 18) + 4 * a4);
  }
  FaceCompositeVTag = OpenSubdiv::v3_1_1::Vtr::internal::Level::getFaceCompositeVTag(v7, a3, v9);
  v11 = FaceCompositeVTag;
  v12 = (FaceCompositeVTag & 2) == 0;
  v13 = v12 | FaceCompositeVTag;
  if ((*((_WORD *)this + 4) & 8) == 0 || (FaceCompositeVTag & 0x1010) == 0)
    goto LABEL_25;
  v14 = (FaceCompositeVTag & 0x4001) != 0x4000;
  if ((FaceCompositeVTag & 0x5001) == 0x5000)
  {
    v24 = v5;
    OpenSubdiv::v3_1_1::Vtr::internal::Level::getFaceVTags(v7, a3, v27, v9);
    v15 = 0;
    v26 = 0;
    v25 = 0;
    while (1)
    {
      v16 = v27[0].i16[v15];
      if ((v16 & 0x4000) != 0)
      {
        v17 = (v16 & 0x2000) != 0 ? 2 : 1;
        if (v17 != (unsigned __int16)v25)
          break;
      }
      if (++v15 == 4)
      {
        v14 = 1;
        goto LABEL_17;
      }
    }
    v14 = 0;
LABEL_17:
    v5 = v24;
  }
  v13 = v14 != 0;
  if (v5 <= 1 && (v11 & 2) != 0)
  {
    OpenSubdiv::v3_1_1::Vtr::internal::Level::getFaceVTags(v7, a3, v27, v9);
    v18 = vdupq_n_s16(v14);
    v19 = vmovn_s16(v18).u32[0];
    *(int8x8_t *)v18.i8 = vbic_s8(*(int8x8_t *)v18.i8, (int8x8_t)vceq_s16((int16x4_t)vand_s8(v27[0], (int8x8_t)vdup_n_s16(0x782u)), (int16x4_t)0x82008200820082));
    if (vmovn_s16(v18).u32[0] == v19 && v14 != 0)
      return 1;
  }
  else
  {
LABEL_25:
    if ((v13 & 1) != 0)
      return 1;
  }
  result = 0;
  if (*((_BYTE *)this + 24))
    v22 = v12;
  else
    v22 = 1;
  if ((v22 & 1) == 0 && (v11 & 4) != 0 && (v11 & 1) == 0)
    return OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::IsPatchSmoothCorner(this, v5, a3, v9);
  return result;
}

uint64_t OpenSubdiv::v3_1_1::Far::`anonymous namespace'::identifyManifoldCornerSpan(_QWORD *a1, int a2, int a3, int a4, uint64_t a5, unsigned int a6)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t result;
  int v20;
  uint64_t v21;
  int v22;

  if ((a6 & 0x80000000) != 0)
    v6 = 0;
  else
    v6 = *(_QWORD *)(a1[57] + 8 * a6);
  v7 = 1;
  v8 = *(int *)(a1[3] + 4 * ((2 * a2) | 1));
  v9 = *(int *)(a1[6] + 4 * v8 + 4 * a3);
  v10 = 2 * v9;
  v11 = a1[42];
  v12 = a1[45] + 4 * *(int *)(v11 + 8 * v9 + 4);
  v13 = *(unsigned int *)(v11 + 4 * v10);
  if ((int)v13 < 1)
  {
LABEL_8:
    LODWORD(v14) = -1;
  }
  else
  {
    v14 = 0;
    v15 = *(_DWORD *)(a1[9] + 4 * v8 + 4 * a3);
    while (*(_DWORD *)(v12 + 4 * v14) != v15)
    {
      if (v13 == ++v14)
        goto LABEL_8;
    }
  }
  v16 = ((int)v14 + 1) % (int)v13;
  *(_DWORD *)(a5 + 2) = 0;
  *(_WORD *)a5 = 1;
  v17 = a1[30];
  v18 = v14;
  while (1)
  {
    result = *(int *)(v12 + 4 * v18);
    v20 = *(unsigned __int8 *)(v17 + result);
    if (v6)
    {
      result = *(unsigned __int8 *)(*(_QWORD *)(v6 + 48) + result);
      if ((result & 1) != 0)
        v20 |= 6u;
    }
    if ((v20 & a4) != 0)
      break;
    *(_WORD *)a5 = ++v7;
    v18 = ((int)v13 - 1 + v18) % (int)v13;
    if (v18 == v16)
    {
      v18 = ((int)v14 + 1) % (int)v13;
      goto LABEL_16;
    }
  }
  do
  {
LABEL_16:
    v21 = *(int *)(v12 + 4 * v16);
    v22 = *(unsigned __int8 *)(v17 + v21);
    if (v6)
    {
      result = v22 | 6u;
      if ((*(_BYTE *)(*(_QWORD *)(v6 + 48) + v21) & 1) != 0)
        v22 |= 6u;
    }
    if ((v22 & a4) != 0)
      break;
    *(_WORD *)a5 = ++v7;
    v16 = (v16 + 1) % (int)v13;
  }
  while (v16 != (_DWORD)v14);
  *(_WORD *)(a5 + 2) = v18;
  return result;
}

uint64_t OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::GetRegularPatchBoundaryMask(OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext *this, int a2, int a3, unsigned int a4)
{
  OpenSubdiv::v3_1_1::Vtr::internal::Level *v6;
  unsigned int v8;
  __int16 v9;
  unsigned int v10;
  int8x8_t v11;
  int8x16_t v13;
  int v14;
  int8x8_t v15[2];

  v15[1] = *(int8x8_t *)MEMORY[0x1E0C80C00];
  v6 = *(OpenSubdiv::v3_1_1::Vtr::internal::Level **)(*(_QWORD *)(*(_QWORD *)this + 40) + 8 * a2);
  if ((a4 & 0x80000000) != 0
    || OpenSubdiv::v3_1_1::Vtr::internal::Level::doesFaceFVarTopologyMatch(v6, a3, *(_DWORD *)(*((_QWORD *)this + 18) + 4 * a4)))
  {
    v8 = -1;
  }
  else
  {
    v8 = *(_DWORD *)(*((_QWORD *)this + 18) + 4 * a4);
  }
  OpenSubdiv::v3_1_1::Vtr::internal::Level::getFaceVTags(v6, a3, v15, v8);
  v9 = OpenSubdiv::v3_1_1::Vtr::internal::Level::VTag::BitwiseOr((unsigned __int16 *)v15, 4);
  if ((v9 & 0x1000) == 0)
    goto LABEL_8;
  if ((*((_WORD *)this + 4) & 8) != 0)
  {
    v11 = vand_s8((int8x8_t)vshl_u16((uint16x4_t)v15[0], (uint16x4_t)0xFFF7FFF6FFF5FFF4), (int8x8_t)0x8000400020001);
    LOWORD(v10) = v11.i16[0] | v11.i16[2] | ((v11.i32[0] | v11.i32[1]) >> 16);
  }
  else
  {
    if ((v9 & 4) == 0)
    {
LABEL_8:
      LOWORD(v10) = 0;
      goto LABEL_11;
    }
    v10 = (v15[0].u16[1] >> 1) & 2 | (v15[0].u16[0] >> 2) & 1 | v15[0].i8[4] & 4 | (8 * ((v15[0].u16[3] >> 2) & 1));
  }
LABEL_11:
  v10 = (unsigned __int16)v10;
  if ((v9 & 1) != 0)
  {
    v13 = vbicq_s8(vbslq_s8((int8x16_t)vmovl_s16(vceqz_s16((int16x4_t)vand_s8(v15[0], (int8x8_t)0x10001000100010))), (int8x16_t)xmmword_1DD007E80, (int8x16_t)xmmword_1DD02D0C0), (int8x16_t)vmovl_s16(vceqz_s16((int16x4_t)vand_s8(v15[0], (int8x8_t)0x1000100010001))));
    *(int8x8_t *)v13.i8 = vorr_s8(*(int8x8_t *)v13.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL));
    v10 = v13.i32[0] | (unsigned __int16)v10 | v13.i32[1];
    switch((__int16)v10)
    {
      case 1:
      case 4:
        v14 = 10;
        break;
      case 2:
      case 8:
        v14 = 5;
        break;
      default:
        goto LABEL_12;
    }
    v10 |= v14;
  }
  else
  {
LABEL_12:
    if (!v10)
      return 0;
  }
  if (((0x8536uLL >> v10) & 1) != 0)
    OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::GetRegularPatchBoundaryMask();
  return OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::GetRegularPatchBoundaryMask(int,int,int)const::vBoundaryMaskToEMask[v10];
}

uint64_t OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::GetIrregularPatchCornerSpans(uint64_t a1, int a2, int a3, uint64_t a4, unsigned int a5)
{
  OpenSubdiv::v3_1_1::Vtr::internal::Level *v8;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _BOOL4 v17;
  BOOL v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int16 *v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  _BYTE v40[4];
  _WORD v41[4];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v8 = *(OpenSubdiv::v3_1_1::Vtr::internal::Level **)(*(_QWORD *)(*(_QWORD *)a1 + 40) + 8 * a2);
  if ((a5 & 0x80000000) != 0
    || OpenSubdiv::v3_1_1::Vtr::internal::Level::doesFaceFVarTopologyMatch(v8, a3, *(_DWORD *)(*(_QWORD *)(a1 + 144) + 4 * a5)))
  {
    LODWORD(v10) = -1;
    result = (uint64_t)OpenSubdiv::v3_1_1::Vtr::internal::Level::getFaceVTags(v8, a3, v41, 0xFFFFFFFF);
  }
  else
  {
    v10 = *(unsigned int *)(*(_QWORD *)(a1 + 144) + 4 * a5);
    result = (uint64_t)OpenSubdiv::v3_1_1::Vtr::internal::Level::getFaceVTags(v8, a3, v41, v10);
    if ((v10 & 0x80000000) == 0)
      result = (uint64_t)OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getFaceValueTags(*(_QWORD **)(*((_QWORD *)v8 + 57) + 8 * v10), a3, (uint64_t)v40);
  }
  v12 = *((_QWORD *)v8 + 3);
  v13 = *(unsigned int *)(v12 + 8 * a3);
  if ((int)v13 >= 1)
  {
    v14 = 0;
    v39 = (2 * a3) | 1;
    v15 = *((_QWORD *)v8 + 6) + 4 * *(int *)(v12 + 4 * v39);
    v16 = 7;
    if ((*(_WORD *)(a1 + 8) & 8) == 0)
      v16 = 3;
    v37 = v15;
    v38 = v16;
    do
    {
      v17 = (v10 & 0x80000000) != 0 || (v40[v14] & 1) == 0;
      if ((*(_WORD *)(a1 + 8) & 8) != 0
        && ((v41[v14] & 0x1000) != 0 ? (v18 = (v41[v14] & 0x780) != 256) : (v18 = 0), v18)
        || !v17)
      {
        v20 = v41[v14];
        v21 = a4 + 6 * v14;
        if ((v20 & 1) != 0)
        {
          v23 = *(int *)(*((_QWORD *)v8 + 6) + 4 * *(int *)(*((_QWORD *)v8 + 3) + 4 * v39) + 4 * v14);
          v24 = *((_QWORD *)v8 + 36);
          v25 = *((_QWORD *)v8 + 33);
          v26 = *(int *)(v25 + 8 * v23 + 4);
          v27 = *(unsigned int *)(v25 + 8 * (_DWORD)v23);
          v28 = *((_QWORD *)v8 + 39);
          *(_WORD *)(v21 + 4) = 0;
          *(_DWORD *)v21 = 0;
          if ((int)v27 < 1)
LABEL_42:
            OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::GetIrregularPatchCornerSpans();
          v29 = 0;
          v30 = v24 + 4 * v26;
          v31 = v28 + 2 * v26;
          while (*(_DWORD *)(v30 + 4 * v29) != a3 || v14 != *(unsigned __int16 *)(v31 + 2 * v29))
          {
            if (v27 == ++v29)
              goto LABEL_42;
          }
          v33 = a4 + 6 * v14;
          *(_WORD *)(v33 + 2) = v29;
          *(_WORD *)v21 = 1;
          *(_BYTE *)(v33 + 4) = 2;
          if ((v20 & 8) == 0)
          {
LABEL_23:
            if ((*(_WORD *)(a1 + 8) & 8) != 0)
            {
              v32 = a4 + 6 * v14;
              v22 = *(_BYTE *)(v32 + 4) & 0xFD | (2 * ((v20 & 0x4780) == 17408));
              *(_BYTE *)(v32 + 4) = v22;
            }
            else
            {
              v22 = *(_BYTE *)(a4 + 6 * v14 + 4);
            }
            goto LABEL_34;
          }
        }
        else
        {
          if ((v20 & 8) == 0)
            goto LABEL_23;
        }
      }
      else
      {
        v19 = a4 + 6 * v14;
        *(_WORD *)(v19 + 4) = 0;
        *(_DWORD *)v19 = 0;
        v20 = v41[v14];
        if ((v20 & 8) == 0)
          goto LABEL_23;
      }
      v34 = a4 + 6 * v14;
      v22 = *(_BYTE *)(v34 + 4) | 2;
      *(_BYTE *)(v34 + 4) = v22;
LABEL_34:
      if ((v22 & 2) == 0 && (v20 & 7) == 6 && *(_BYTE *)(a1 + 24))
      {
        v35 = (unsigned __int16 *)(a4 + 6 * v14);
        v36 = *v35;
        if (!*v35)
          v36 = *(_DWORD *)(*((_QWORD *)v8 + 33) + 8 * *(int *)(v37 + 4 * v14));
        *((_BYTE *)v35 + 4) = v22 & 0xFD | (2 * (v36 == 1));
      }
      ++v14;
    }
    while (v14 != v13);
  }
  return result;
}

void OpenSubdiv::v3_1_1::Far::PatchTableFactory::allocateVertexTables(OpenSubdiv::v3_1_1::Far::PatchTableFactory *this, const OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext *a2, OpenSubdiv::v3_1_1::Far::PatchTable *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;

  if ((int)OpenSubdiv::v3_1_1::Far::PatchTable::GetNumPatchArrays(a2) >= 1)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    do
    {
      v7 += OpenSubdiv::v3_1_1::Far::PatchTable::GetNumPatches(a2, v6, v5);
      v8 += OpenSubdiv::v3_1_1::Far::PatchTable::GetNumControlVertices(a2, v6, v9);
      v6 = (v6 + 1);
    }
    while ((int)v6 < (int)OpenSubdiv::v3_1_1::Far::PatchTable::GetNumPatchArrays(a2));
    if (v8 && v7)
    {
      std::vector<int>::resize((std::vector<unsigned int> *)((char *)a2 + 32), v8);
      std::vector<ClippedCorner>::resize((uint64_t)a2 + 56, v7);
      if ((*(_BYTE *)(*(_QWORD *)this + 8) & 1) == 0)
      {
        v10 = 3;
        OpenSubdiv::v3_1_1::Far::PatchTable::allocateVaryingVertices((uint64_t)a2, &v10, v7);
      }
      if ((*((_WORD *)this + 4) & 4) != 0)
        std::vector<int>::resize((std::vector<int> *)((char *)a2 + 224), v7, &OpenSubdiv::v3_1_1::Vtr::INDEX_INVALID);
    }
  }
}

void OpenSubdiv::v3_1_1::Far::PatchTableFactory::allocateFVarChannels(OpenSubdiv::v3_1_1::Far::PatchTableFactory *this, const OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext *a2, OpenSubdiv::v3_1_1::Far::PatchTable *a3)
{
  uint64_t v5;
  uint64_t NumPatchesTotal;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  int v12;
  int *v13;
  int v14;
  int v15;
  int v16;

  v5 = *(_QWORD *)this;
  NumPatchesTotal = OpenSubdiv::v3_1_1::Far::PatchTable::GetNumPatchesTotal(a2);
  OpenSubdiv::v3_1_1::Far::PatchTable::allocateFVarPatchChannels(a2, (*((_QWORD *)this + 19) - *((_QWORD *)this + 18)) >> 2);
  v7 = *((_QWORD *)this + 18);
  if ((int)((unint64_t)(*((_QWORD *)this + 19) - v7) >> 2) >= 1)
  {
    v8 = 0;
    do
    {
      v9 = (OpenSubdiv::v3_1_1::Vtr::internal::Level::getFVarOptions(**(OpenSubdiv::v3_1_1::Vtr::internal::Level ***)(v5 + 40), *(_DWORD *)(v7 + 4 * v8)) >> 2) & 7;
      OpenSubdiv::v3_1_1::Far::PatchTable::setFVarPatchChannelLinearInterpolation((uint64_t)a2, v9, v8);
      v10 = *((unsigned __int16 *)this + 4);
      if ((*(_BYTE *)(v5 + 8) & 1) != 0)
      {
        if ((v10 & 2) != 0)
          v14 = 4;
        else
          v14 = 3;
        v16 = v14;
        v13 = &v16;
      }
      else
      {
        v11 = (v10 >> 13) & 1;
        if ((_DWORD)v9 == 5)
          v11 = 1;
        if ((v10 & 0x700) == 0x300)
          v12 = 9;
        else
          v12 = 6;
        if (v11)
          v12 = 3;
        v15 = v12;
        v13 = &v15;
      }
      OpenSubdiv::v3_1_1::Far::PatchTable::allocateFVarPatchChannelValues((uint64_t)a2, v13, NumPatchesTotal, v8++);
      v7 = *((_QWORD *)this + 18);
    }
    while (v8 < (int)((unint64_t)(*((_QWORD *)this + 19) - v7) >> 2));
  }
}

unint64_t OpenSubdiv::v3_1_1::Far::PatchTableFactory::computePatchParam(OpenSubdiv::v3_1_1::Far::PatchTableFactory *this, const OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext *a2, uint64_t a3, char a4, unsigned __int8 a5)
{
  char v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int FaceId;
  int v29;
  uint64_t v30;
  int v31;

  v7 = (char)a2;
  v8 = *(_QWORD *)this;
  v9 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 88) + 24 * (int)a2) + 24)
                 + 8 * (_DWORD)a3) != 4;
  if ((int)a2 < 1)
  {
    v12 = 0;
    LOWORD(v11) = 0;
    v10 = 0;
  }
  else
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = *(_QWORD *)(v8 + 64);
    v14 = *(_QWORD *)(v8 + 40);
    v15 = 1;
    v16 = a2;
    v17 = a2;
    do
    {
      v18 = *(_QWORD **)(v13 + 8 * --v16);
      v19 = a3;
      a3 = *(int *)(v18[33] + 4 * (int)a3);
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 8 * v16) + 24) + 8 * a3) == 4)
      {
        v10 = (*(unsigned __int8 *)(v18[42] + v19) >> 3) & 3;
        v20 = v15 + v12;
        if (v10 == 1)
          v21 = v15 + v12;
        else
          v21 = v12;
        if (v10 == 2)
        {
          v22 = v15 + v11;
        }
        else
        {
          v20 = v21;
          v22 = v11;
        }
        if (v10 == 3)
        {
          v11 += v15;
        }
        else
        {
          v12 = v20;
          v11 = v22;
        }
        v15 = 2 * (v15 & 0x7FFF);
      }
      else
      {
        v23 = v18[11];
        v24 = *(unsigned int *)(v23 + 8 * a3);
        if ((int)v24 < 1)
        {
LABEL_18:
          v9 = 1;
        }
        else
        {
          v25 = 0;
          v26 = v18[15] + 4 * *(int *)(v23 + 4 * (int)((2 * a3) | 1));
          while (*(_DWORD *)(v26 + 4 * v25) != v19)
          {
            if (v24 == ++v25)
              goto LABEL_18;
          }
          v9 = 1;
          v10 = v25;
        }
      }
    }
    while (v17-- > 1);
  }
  FaceId = OpenSubdiv::v3_1_1::Far::PtexIndices::GetFaceId((OpenSubdiv::v3_1_1::Far::PatchTableFactory *)((char *)this + 32), a3);
  if (FaceId == -1)
    OpenSubdiv::v3_1_1::Far::PatchTableFactory::computePatchParam();
  if (v9)
    v29 = v10;
  else
    v29 = 0;
  v30 = (FaceId + v29) & 0xFFFFFFF | (a5 << 28);
  if (v9)
    v31 = 16;
  else
    v31 = 0;
  return v30 | ((unint64_t)(v7 & 0xF | ((a4 & 0xF) << 8) | (v12 << 22) | ((v11 & 0x3FF) << 12) | v31) << 32);
}

OpenSubdiv::v3_1_1::Far::PatchTable *OpenSubdiv::v3_1_1::Far::PatchTableFactory::Create(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
    return (OpenSubdiv::v3_1_1::Far::PatchTable *)OpenSubdiv::v3_1_1::Far::PatchTableFactory::createUniform(a1, a2, a3);
  else
    return OpenSubdiv::v3_1_1::Far::PatchTableFactory::createAdaptive(a1, a2, a3);
}

uint64_t OpenSubdiv::v3_1_1::Far::PatchTableFactory::createUniform(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5;
  unsigned int v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  OpenSubdiv::v3_1_1::Far::PatchTable *v14;
  unint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  OpenSubdiv::v3_1_1::Far::PatchTable *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  _DWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  _DWORD *v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  size_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unsigned int v41;
  _QWORD *v42;
  uint64_t i;
  OpenSubdiv::v3_1_1::Vtr::internal::Level *v44;
  unsigned int *v45;
  uint64_t v46;
  int *v47;
  int v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t *v51;
  uint64_t v52;
  uint64_t FaceFVarValues;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  uint64_t v62;
  int v63;
  unint64_t *v64;
  uint64_t v65;
  _DWORD **v66;
  _DWORD *v67;
  int v68;
  uint64_t v69;
  int NumFVarValues;
  OpenSubdiv::v3_1_1::Far::PtexIndices *v71;
  uint64_t v73;
  OpenSubdiv::v3_1_1::Far::PtexIndices *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  unsigned int v78;
  unint64_t v79;
  unint64_t *v80;
  _DWORD *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  OpenSubdiv::v3_1_1::Vtr::internal::Level **v87;
  int v88;
  int v89;
  _BYTE v90[32];
  _BYTE v91[40];
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  uint64_t v96;
  char *v97;
  char *v98;
  void **v99[2];

  v99[1] = *(void ***)MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(a1 + 8) & 1) == 0)
    OpenSubdiv::v3_1_1::Far::PatchTableFactory::createUniform();
  OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::BuilderContext((uint64_t)v90, (unsigned int *)a1, a2, a3);
  v5 = *(_DWORD *)a1;
  v6 = (a2 & (2 * (*(_DWORD *)a1 < 2u)));
  v7 = *(_DWORD *)(a1 + 36);
  v8 = ((unint64_t)*(unsigned __int8 *)(a1 + 8) >> 2) & 0xF;
  if ((a2 & 1) != 0)
    v9 = 1;
  else
    v9 = ((unint64_t)*(unsigned __int8 *)(a1 + 8) >> 2) & 0xF;
  v79 = v9;
  v78 = v6;
  if (v6)
  {
    v10 = 4;
  }
  else
  {
    if (v5 >= 3)
      OpenSubdiv::v3_1_1::Far::PatchTableFactory::createUniform();
    v10 = dword_1DD02D3E4[v5];
  }
  v11 = v8 + 1;
  v12 = v79;
  v13 = operator new();
  OpenSubdiv::v3_1_1::Far::PatchTable::PatchTable((OpenSubdiv::v3_1_1::Far::PatchTable *)v13, v7);
  *(_DWORD *)(v13 + 4) = OpenSubdiv::v3_1_1::Far::PtexIndices::GetNumFaces((OpenSubdiv::v3_1_1::Far::PtexIndices *)v91);
  OpenSubdiv::v3_1_1::Far::PatchTable::reservePatchArrays((char **)v13, v8 + 1 - v12);
  LODWORD(v99[0]) = 0;
  v89 = 0;
  if (v12 <= v8)
  {
    v15 = v79;
    do
    {
      v16 = *(unsigned int **)(*(_QWORD *)(a1 + 88) + 24 * v15);
      v17 = *v16;
      if ((*(_BYTE *)(a1 + 8) & 2) != 0 && (int)v17 >= 1)
      {
        v18 = *((_QWORD *)v16 + 12);
        v19 = v17 + 1;
        do
          LODWORD(v17) = v17 - (*(_BYTE *)(v18 + (v19-- - 2)) & 1);
        while (v19 > 1);
      }
      if ((v17 & 0x80000000) != 0)
        OpenSubdiv::v3_1_1::Far::PatchTableFactory::createUniform();
      v88 = v10;
      OpenSubdiv::v3_1_1::Far::PatchTable::pushPatchArray((_QWORD *)v13, &v88, (_DWORD)v17 << (v78 >> 1), &v89, (int *)v99, 0);
      ++v15;
    }
    while (v15 != v11);
  }
  v74 = (OpenSubdiv::v3_1_1::Far::PtexIndices *)v91;
  OpenSubdiv::v3_1_1::Far::PatchTableFactory::allocateVertexTables((OpenSubdiv::v3_1_1::Far::PatchTableFactory *)v90, (const OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext *)v13, v14);
  v21 = v97;
  v76 = a2;
  v83 = a1;
  if (v97 == v98)
  {
    v35 = 0;
    v32 = 0;
    v25 = *(_DWORD **)(v13 + 32);
    v84 = *(unint64_t **)(v13 + 56);
    v39 = *(_QWORD *)(a1 + 88);
    v77 = (_QWORD *)(a1 + 88);
    v28 = *(_DWORD *)(*(_QWORD *)v39 + 8);
    v24 = v97;
    if (!(_DWORD)v8)
      goto LABEL_61;
    goto LABEL_25;
  }
  OpenSubdiv::v3_1_1::Far::PatchTableFactory::allocateFVarChannels((OpenSubdiv::v3_1_1::Far::PatchTableFactory *)v90, (const OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext *)v13, v20);
  v23 = a1;
  v21 = v97;
  v24 = v98;
  v25 = *(_DWORD **)(v13 + 32);
  v84 = *(unint64_t **)(v13 + 56);
  v27 = (_QWORD *)(v23 + 88);
  v26 = *(_QWORD *)(v23 + 88);
  v77 = v27;
  v28 = *(_DWORD *)(*(_QWORD *)v26 + 8);
  if (v97 == v98)
  {
    v35 = 0;
    v32 = 0;
    v21 = v98;
    if (!(_DWORD)v8)
      goto LABEL_61;
    goto LABEL_25;
  }
  v29 = v25;
  v30 = v98 - v97;
  MEMORY[0x1E0C80A78](v22);
  v32 = (char *)&v73 - v31;
  bzero((char *)&v73 - v31, v24 - v21);
  MEMORY[0x1E0C80A78](v33);
  v35 = (char *)&v73 - v34;
  bzero((char *)&v73 - v34, v36);
  if ((int)(v30 >> 2) >= 1)
  {
    v38 = 0;
    do
    {
      *(_QWORD *)&v35[8 * v38] = OpenSubdiv::v3_1_1::Far::PatchTable::getFVarValues((OpenSubdiv::v3_1_1::Far::PatchTable *)v13, v38, v37);
      ++v38;
      v21 = v97;
      v24 = v98;
    }
    while (v38 < (int)((unint64_t)(v98 - v97) >> 2));
  }
  v25 = v29;
  if ((_DWORD)v8)
  {
LABEL_25:
    v75 = v11;
    v40 = 1;
    v41 = v78;
    v42 = v77;
    do
    {
      v85 = v40;
      if (v40 >= v79)
      {
        v87 = (OpenSubdiv::v3_1_1::Vtr::internal::Level **)(*v42 + 24 * v40);
        v82 = *(unsigned int *)*v87;
        if ((int)v82 >= 1)
        {
          for (i = 0; i != v82; ++i)
          {
            v44 = *v87;
            if ((*(_BYTE *)(v83 + 8) & 2) == 0 || (*(_BYTE *)(*((_QWORD *)v44 + 12) + i) & 1) == 0)
            {
              v45 = (unsigned int *)(*((_QWORD *)v44 + 3) + 8 * i);
              v46 = *v45;
              if ((int)v46 >= 1)
              {
                v47 = (int *)(*((_QWORD *)v44 + 6) + 4 * (int)v45[1]);
                do
                {
                  v48 = *v47++;
                  *v25++ = v48 + v28;
                  --v46;
                }
                while (v46);
              }
              v49 = OpenSubdiv::v3_1_1::Far::PatchTableFactory::computePatchParam((OpenSubdiv::v3_1_1::Far::PatchTableFactory *)v90, (const OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext *)v40, i, 0, 0);
              v50 = v84;
              *v84 = v49;
              v51 = v50 + 1;
              v21 = v97;
              v24 = v98;
              if (v97 == v98)
              {
                v24 = v97;
              }
              else if ((int)((unint64_t)(v98 - v97) >> 2) >= 1)
              {
                v80 = v51;
                v81 = v25;
                v52 = 0;
                v86 = i;
                do
                {
                  FaceFVarValues = OpenSubdiv::v3_1_1::Vtr::internal::Level::getFaceFVarValues(*v87, i, *(_DWORD *)&v21[4 * v52]);
                  v56 = v54;
                  if (v54 <= 0)
                  {
                    v62 = *(_QWORD *)&v35[8 * v52];
                  }
                  else
                  {
                    v57 = FaceFVarValues;
                    v58 = 0;
                    v59 = 4 * v54;
                    do
                    {
                      v60 = *(_DWORD *)(v57 + v58) + v28;
                      OpenSubdiv::v3_1_1::Far::PatchTable::getFVarValues((OpenSubdiv::v3_1_1::Far::PatchTable *)v13, v52, v55);
                      if (v60 >= v61)
                        OpenSubdiv::v3_1_1::Far::PatchTableFactory::createUniform();
                      v62 = *(_QWORD *)&v35[8 * v52];
                      *(_DWORD *)(v62 + v58) = *(_DWORD *)(v57 + v58) + *(_DWORD *)&v32[4 * v52];
                      v58 += 4;
                    }
                    while (v59 != v58);
                    i = v86;
                  }
                  *(_QWORD *)&v35[8 * v52++] = v62 + 4 * v56;
                  v21 = v97;
                  v24 = v98;
                }
                while (v52 < (int)((unint64_t)(v98 - v97) >> 2));
                v41 = v78;
                v25 = v81;
                v42 = v77;
                v51 = v80;
              }
              v40 = v85;
              if (v41)
              {
                v63 = *(v25 - 2);
                *v25 = *(v25 - 4);
                v25[1] = v63;
                v25 += 2;
                v64 = v84;
                v84[1] = *v84;
                v84 = v64 + 2;
                v21 = v97;
                v24 = v98;
                if (v97 == v98)
                {
                  v24 = v97;
                }
                else if ((int)((unint64_t)(v98 - v97) >> 2) >= 1)
                {
                  v65 = ((unint64_t)(v98 - v97) >> 2);
                  v66 = (_DWORD **)v35;
                  do
                  {
                    v67 = *v66;
                    v68 = *(*v66 - 2);
                    *v67 = *(*v66 - 4);
                    v67[1] = v68;
                    *v66++ = v67 + 2;
                    --v65;
                  }
                  while (v65);
                }
              }
              else
              {
                v84 = v51;
              }
            }
          }
        }
      }
      if ((v76 & 1) != 0)
      {
        v28 += *(_DWORD *)(*(_QWORD *)(*v42 + 24 * v40) + 8);
        if ((int)((unint64_t)(v24 - v21) >> 2) >= 1)
        {
          v81 = v25;
          v69 = 0;
          do
          {
            NumFVarValues = OpenSubdiv::v3_1_1::Vtr::internal::Level::getNumFVarValues(*(OpenSubdiv::v3_1_1::Vtr::internal::Level **)(*v42 + 24 * v40), *(_DWORD *)&v21[4 * v69]);
            v40 = v85;
            *(_DWORD *)&v32[4 * v69++] += NumFVarValues;
            v21 = v97;
            v24 = v98;
          }
          while (v69 < (int)((unint64_t)(v98 - v97) >> 2));
          v25 = v81;
        }
      }
      ++v40;
    }
    while (v40 != v75);
  }
LABEL_61:
  if (v21)
  {
    v98 = v21;
    operator delete(v21);
  }
  v99[0] = (void **)&v96;
  std::vector<std::vector<CFRange>>::__destroy_vector::operator()[abi:nn180100](v99);
  if (v94)
  {
    v95 = v94;
    operator delete(v94);
  }
  v71 = v74;
  if (v92)
  {
    v93 = v92;
    operator delete(v92);
  }
  OpenSubdiv::v3_1_1::Far::PtexIndices::~PtexIndices(v71);
  return v13;
}

OpenSubdiv::v3_1_1::Far::PatchTable *OpenSubdiv::v3_1_1::Far::PatchTableFactory::createAdaptive(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext *v4;
  int v5;
  OpenSubdiv::v3_1_1::Far::PatchTable *v6;
  OpenSubdiv::v3_1_1::Far::PatchTable *v7;
  void *v9[4];
  _BYTE v10[40];
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *__p;
  void *v17;
  void **v18;

  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
    OpenSubdiv::v3_1_1::Far::PatchTableFactory::createAdaptive();
  OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::BuilderContext((uint64_t)v9, (unsigned int *)a1, a2, a3);
  OpenSubdiv::v3_1_1::Far::PatchTableFactory::identifyAdaptivePatches(v9, v4);
  v5 = *(_DWORD *)(a1 + 36);
  v6 = (OpenSubdiv::v3_1_1::Far::PatchTable *)operator new();
  OpenSubdiv::v3_1_1::Far::PatchTable::PatchTable(v6, v5);
  *((_DWORD *)v6 + 1) = OpenSubdiv::v3_1_1::Far::PtexIndices::GetNumFaces((OpenSubdiv::v3_1_1::Far::PtexIndices *)v10);
  OpenSubdiv::v3_1_1::Far::PatchTableFactory::populateAdaptivePatches((OpenSubdiv::v3_1_1::Far::PatchTableFactory *)v9, v6, v7);
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  v18 = (void **)&v15;
  std::vector<std::vector<CFRange>>::__destroy_vector::operator()[abi:nn180100](&v18);
  if (v13)
  {
    v14 = v13;
    operator delete(v13);
  }
  if (v11)
  {
    v12 = v11;
    operator delete(v11);
  }
  OpenSubdiv::v3_1_1::Far::PtexIndices::~PtexIndices((OpenSubdiv::v3_1_1::Far::PtexIndices *)v10);
  return v6;
}

void OpenSubdiv::v3_1_1::Far::PatchTableFactory::identifyAdaptivePatches(void **this, OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext *a2)
{
  char *v3;
  char *v4;
  _DWORD *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD **v19;
  unint64_t v20;
  _QWORD *v21;
  _DWORD *v22;
  _DWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  int v30;
  _QWORD *v31;
  uint64_t v32;
  OpenSubdiv::v3_1_1::Vtr::internal::Level *v33;
  int *v34;
  int *v35;
  int v36;
  _DWORD *v37;
  int *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  int *v44;
  int v45;
  _DWORD *v46;
  uint64_t v47;
  uint64_t v48;
  _DWORD **v49;
  int v50;
  int v51;
  _DWORD *v52;
  unint64_t v53;
  _DWORD *v54;
  _DWORD *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  int v62;
  int v63;
  int *v64;
  int *v65;
  _DWORD *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  int *v73;
  char *v74;
  char *v75;
  int *v76;
  uint64_t v77;
  unsigned int v78;
  char *v79;
  char *v80;
  _QWORD *v81;
  _QWORD *v82;

  v81 = this + 9;
  v82 = *this;
  std::vector<OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::PatchTuple>::reserve(this + 9, *((int *)*this + 7));
  v3 = (char *)this[14];
  v80 = (char *)(this + 14);
  v4 = (char *)this[13];
  if (v4 >= v3)
  {
    v6 = (char *)this[12];
    v7 = (v4 - v6) >> 2;
    v8 = v7 + 1;
    if ((unint64_t)(v7 + 1) >> 62)
LABEL_97:
      abort();
    v9 = v3 - v6;
    if (v9 >> 1 > v8)
      v8 = v9 >> 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL)
      v10 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      v11 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v80, v10);
      v6 = (char *)this[12];
      v4 = (char *)this[13];
    }
    else
    {
      v11 = 0;
    }
    v12 = &v11[4 * v7];
    v13 = &v11[4 * v10];
    *(_DWORD *)v12 = 0;
    v5 = v12 + 4;
    while (v4 != v6)
    {
      v14 = *((_DWORD *)v4 - 1);
      v4 -= 4;
      *((_DWORD *)v12 - 1) = v14;
      v12 -= 4;
    }
    this[12] = v12;
    this[13] = v5;
    this[14] = v13;
    if (v6)
      operator delete(v6);
  }
  else
  {
    *(_DWORD *)v4 = 0;
    v5 = v4 + 4;
  }
  this[13] = v5;
  v15 = this + 15;
  std::vector<std::vector<int>>::resize(this + 15, ((_BYTE *)this[19] - (_BYTE *)this[18]) >> 2);
  if ((int)((unint64_t)((_BYTE *)this[19] - (_BYTE *)this[18]) >> 2) >= 1)
  {
    v16 = 0;
    do
    {
      v17 = *v15 + 24 * v16;
      v19 = (_DWORD **)(v17 + 8);
      v18 = *(_DWORD **)(v17 + 8);
      v21 = (_QWORD *)(v17 + 16);
      v20 = *(_QWORD *)(v17 + 16);
      if ((unint64_t)v18 >= v20)
      {
        v23 = *(_DWORD **)v17;
        v24 = ((uint64_t)v18 - *(_QWORD *)v17) >> 2;
        v25 = v24 + 1;
        if ((unint64_t)(v24 + 1) >> 62)
          goto LABEL_97;
        v26 = v20 - (_QWORD)v23;
        if (v26 >> 1 > v25)
          v25 = v26 >> 1;
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL)
          v27 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v27 = v25;
        if (v27)
        {
          v28 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v21, v27);
          v18 = *v19;
          v23 = *(_DWORD **)v17;
        }
        else
        {
          v28 = 0;
        }
        v29 = &v28[4 * v24];
        *(_DWORD *)v29 = 0;
        v22 = v29 + 4;
        while (v18 != v23)
        {
          v30 = *--v18;
          *((_DWORD *)v29 - 1) = v30;
          v29 -= 4;
        }
        *(_QWORD *)v17 = v29;
        *v19 = v22;
        *v21 = &v28[4 * v27];
        if (v23)
          operator delete(v23);
      }
      else
      {
        *v18 = 0;
        v22 = v18 + 1;
      }
      *v19 = v22;
      ++v16;
    }
    while (v16 < (int)((unint64_t)((_BYTE *)this[19] - (_BYTE *)this[18]) >> 2));
  }
  v31 = v82;
  if ((int)(-1431655765 * ((v82[12] - v82[11]) >> 3)) >= 1)
  {
    v32 = 0;
    while (1)
    {
      v33 = *(OpenSubdiv::v3_1_1::Vtr::internal::Level **)(v31[5] + 8 * v32);
      v35 = (int *)this[13];
      v34 = (int *)this[14];
      v36 = *((_DWORD *)v33 + 2) + *(v35 - 1);
      if (v35 >= v34)
      {
        v38 = (int *)this[12];
        v39 = v35 - v38;
        v40 = v39 + 1;
        if ((unint64_t)(v39 + 1) >> 62)
          goto LABEL_97;
        v41 = (char *)v34 - (char *)v38;
        if (v41 >> 1 > v40)
          v40 = v41 >> 1;
        if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL)
          v42 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v42 = v40;
        if (v42)
        {
          v43 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v80, v42);
          v38 = (int *)this[12];
          v35 = (int *)this[13];
        }
        else
        {
          v43 = 0;
        }
        v44 = (int *)&v43[4 * v39];
        *v44 = v36;
        v37 = v44 + 1;
        while (v35 != v38)
        {
          v45 = *--v35;
          *--v44 = v45;
        }
        this[12] = v44;
        this[13] = v37;
        this[14] = &v43[4 * v42];
        if (v38)
          operator delete(v38);
      }
      else
      {
        *v35 = v36;
        v37 = v35 + 1;
      }
      this[13] = v37;
      v46 = this[18];
      if ((int)((unint64_t)((_BYTE *)this[19] - (_BYTE *)v46) >> 2) >= 1)
      {
        v47 = 0;
        do
        {
          v48 = *v15 + 24 * v47;
          v49 = (_DWORD **)(v48 + 8);
          v50 = *(_DWORD *)(*(_QWORD *)(v48 + 8) - 4);
          v51 = OpenSubdiv::v3_1_1::Vtr::internal::Level::getNumFVarValues(v33, v46[v47]) + v50;
          v52 = *(_DWORD **)(v48 + 8);
          v53 = *(_QWORD *)(v48 + 16);
          if ((unint64_t)v52 >= v53)
          {
            v55 = *(_DWORD **)v48;
            v56 = ((uint64_t)v52 - *(_QWORD *)v48) >> 2;
            v57 = v56 + 1;
            if ((unint64_t)(v56 + 1) >> 62)
              goto LABEL_97;
            v58 = v53 - (_QWORD)v55;
            if (v58 >> 1 > v57)
              v57 = v58 >> 1;
            if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL)
              v59 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v59 = v57;
            if (v59)
            {
              v60 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v48 + 16, v59);
              v52 = *v49;
              v55 = *(_DWORD **)v48;
            }
            else
            {
              v60 = 0;
            }
            v61 = &v60[4 * v56];
            *(_DWORD *)v61 = v51;
            v54 = v61 + 4;
            while (v52 != v55)
            {
              v62 = *--v52;
              *((_DWORD *)v61 - 1) = v62;
              v61 -= 4;
            }
            *(_QWORD *)v48 = v61;
            *v49 = v54;
            *(_QWORD *)(v48 + 16) = &v60[4 * v59];
            if (v55)
              operator delete(v55);
          }
          else
          {
            *v52 = v51;
            v54 = v52 + 1;
          }
          *v49 = v54;
          ++v47;
          v46 = this[18];
        }
        while (v47 < (int)((unint64_t)((_BYTE *)this[19] - (_BYTE *)v46) >> 2));
      }
      if (*(int *)v33 >= 1)
        break;
LABEL_95:
      ++v32;
      v31 = v82;
      if (v32 >= (int)(-1431655765 * ((v82[12] - v82[11]) >> 3)))
        return;
    }
    v63 = 0;
    while (1)
    {
      if (OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::IsPatchEligible((OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext *)this, v32, v63))
      {
        v65 = (int *)this[10];
        v64 = (int *)this[11];
        if (v65 >= v64)
        {
          v67 = ((uint64_t)v65 - *v81) >> 3;
          v68 = v67 + 1;
          if ((unint64_t)(v67 + 1) >> 61)
            goto LABEL_97;
          v69 = (uint64_t)v64 - *v81;
          if (v69 >> 2 > v68)
            v68 = v69 >> 2;
          if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8)
            v70 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v70 = v68;
          v72 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Statement *>>((uint64_t)(this + 11), v70);
          v73 = (int *)&v72[8 * v67];
          *v73 = v63;
          v73[1] = v32;
          v74 = (char *)this[9];
          v75 = (char *)this[10];
          v76 = v73;
          while (v75 != v74)
          {
            v77 = *((_QWORD *)v75 - 1);
            v75 -= 8;
            *((_QWORD *)v76 - 1) = v77;
            v76 -= 2;
          }
          v66 = v73 + 2;
          this[9] = v76;
          this[10] = v73 + 2;
          this[11] = &v72[8 * v71];
          if (v74)
            operator delete(v74);
        }
        else
        {
          *v65 = v63;
          v65[1] = v32;
          v66 = v65 + 2;
        }
        this[10] = v66;
        if (OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::IsPatchRegular((OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext *)this, v32, v63, 0xFFFFFFFF))
        {
          v78 = 1;
          v79 = (char *)(this + 7);
LABEL_93:
          *(_DWORD *)v79 += v78;
          goto LABEL_94;
        }
        ++*((_DWORD *)this + 15);
        if (((_WORD)this[1] & 0x700) == 0x400)
        {
          v78 = (OpenSubdiv::v3_1_1::Vtr::internal::Level::getFaceCompositeVTag(v33, v63, 0xFFFFFFFF) >> 2) & 1;
          v79 = (char *)(this + 8);
          goto LABEL_93;
        }
      }
LABEL_94:
      if (++v63 >= *(_DWORD *)v33)
        goto LABEL_95;
    }
  }
}

void OpenSubdiv::v3_1_1::Far::PatchTableFactory::populateAdaptivePatches(OpenSubdiv::v3_1_1::Far::PatchTableFactory *this, OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext *a2, OpenSubdiv::v3_1_1::Far::PatchTable *a3)
{
  uint64_t v5;
  char *v6;
  int v7;
  _BOOL4 v8;
  int v9;
  int v10;
  unsigned int v11;
  int *v12;
  int v13;
  int v14;
  BOOL v15;
  int v16;
  unsigned int v17;
  int *v18;
  int *v19;
  int v20;
  int v21;
  int v22;
  OpenSubdiv::v3_1_1::Far::PatchTable *v23;
  uint64_t v24;
  int *v25;
  int v26;
  unint64_t v27;
  OpenSubdiv::v3_1_1::Far::PatchTable *v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  int *v37;
  _DWORD *v38;
  unsigned int v39;
  void **v40;
  void *v41;
  void **v42;
  int *v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t v46;
  int *v47;
  _DWORD *v48;
  unsigned int v49;
  void **v50;
  void *v51;
  void **v52;
  uint64_t v53;
  int PatchIndex;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t *v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  int v69;
  unint64_t v70;
  int v71;
  unint64_t v72;
  int v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  OpenSubdiv::v3_1_1::Far::EndCapGregoryBasisPatchFactory *v77;
  uint64_t v78;
  uint64_t **v79;
  uint64_t v80;
  OpenSubdiv::v3_1_1::Far::EndCapBSplineBasisPatchFactory *v81;
  uint64_t v82;
  uint64_t v83;
  int *v84;
  int *v85;
  OpenSubdiv::v3_1_1::Vtr::internal::Level *v86;
  __int16 FaceCompositeVTag;
  _BOOL4 IsPatchRegular;
  int v89;
  int v90;
  int RegularPatchBoundaryMask;
  int v92;
  float v93;
  float v94;
  int v95;
  uint64_t *v96;
  int v97;
  uint64_t v98;
  int v99;
  int *v100;
  unint64_t v101;
  unint64_t *v102;
  float *v103;
  float *v104;
  uint64_t v105;
  uint64_t v106;
  float *v107;
  unint64_t v108;
  uint64_t v109;
  char *v110;
  float *v111;
  int v112;
  _DWORD *v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t *v119;
  int v120;
  uint64_t v121;
  __int16 *v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t *v125;
  int v126;
  OpenSubdiv::v3_1_1::Far::StencilTable *v127;
  uint64_t v128;
  int *v129;
  unint64_t v130;
  int v131;
  _DWORD *v132;
  uint64_t v133;
  int v134;
  int *v135;
  unint64_t v136;
  int v137;
  _DWORD *v138;
  uint64_t v139;
  int v140;
  int v141;
  void *v142;
  void *v143;
  OpenSubdiv::v3_1_1::Far::EndCapGregoryBasisPatchFactory *v144;
  unsigned int v145;
  void *v146;
  void *v147;
  void *v148;
  void *v149;
  uint64_t v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v156;
  int *v157;
  unint64_t v158;
  int v159;
  _DWORD *v160;
  uint64_t v161;
  int v162;
  int v163;
  _QWORD *v164;
  void *v165;
  void *v166;
  _QWORD *v167;
  unsigned int v168;
  _QWORD *v169;
  void *v170;
  uint64_t v171;
  char *v172;
  _DWORD **v173;
  int *v174;
  uint64_t v175;
  OpenSubdiv::v3_1_1::Far::StencilTable *v176;
  OpenSubdiv::v3_1_1::Far::EndCapBSplineBasisPatchFactory *v177;
  OpenSubdiv::v3_1_1::Far::EndCapLegacyGregoryPatchFactory *v178;
  OpenSubdiv::v3_1_1::Far::EndCapGregoryBasisPatchFactory *v179;
  uint64_t *v180;
  int *v181;
  _QWORD *v182;
  OpenSubdiv::v3_1_1::Far::TopologyRefiner *v183;
  unsigned int v184;
  uint64_t v185;
  __int16 v186;
  unsigned int v187;
  int v188;
  uint64_t v189;
  BOOL v190;
  int v191;
  int v192[2];
  int v193;
  int v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  _QWORD v199[3];
  uint64_t *v200;
  uint64_t v201;
  uint64_t v202;
  void *__p;
  uint64_t *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t *v207;
  uint64_t *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t *v211;
  int v212;
  int v213;
  uint64_t v214[37];

  v5 = 0;
  v214[35] = *MEMORY[0x1E0C80C00];
  v183 = *(OpenSubdiv::v3_1_1::Far::TopologyRefiner **)this;
  do
  {
    v6 = (char *)&v212 + v5 * 8;
    *(_DWORD *)v6 = 6;
    *(_QWORD *)(v6 + 4) = 0;
    *(_QWORD *)(v6 + 20) = 0;
    *(_QWORD *)(v6 + 12) = 0;
    *((_DWORD *)v6 + 7) = 0;
    *((_QWORD *)v6 + 4) = &v214[v5 + 5];
    *((_QWORD *)v6 + 5) = 0x100000000;
    *((_QWORD *)v6 + 7) = 0;
    *((_QWORD *)v6 + 8) = &v214[v5 + 9];
    *((_QWORD *)v6 + 9) = 0x100000000;
    v5 += 12;
    *((_QWORD *)v6 + 11) = 0;
  }
  while (v5 != 36);
  v7 = *((_DWORD *)this + 14);
  v212 = 6;
  v213 = v7;
  v8 = v7 > 0;
  v9 = *((_BYTE *)this + 9) & 7;
  switch(v9)
  {
    case 4:
      v12 = &v212 + 24 * (v7 > 0);
      v13 = *((_DWORD *)this + 15);
      v14 = *((_DWORD *)this + 16);
      v15 = __OFSUB__(v13, v14);
      v16 = v13 - v14;
      *v12 = 7;
      v12[1] = v16;
      v187 = v8;
      if ((v16 < 0) ^ v15 | (v16 == 0))
        v17 = v8;
      else
        v17 = v8 + 1;
      v18 = &v212 + 24 * v17;
      *v18 = 8;
      v18[1] = v14;
      v184 = v17;
      if (v14 <= 0)
        v11 = v17;
      else
        v11 = v17 + 1;
      break;
    case 3:
      v19 = &v212 + 24 * (v7 > 0);
      v20 = *((_DWORD *)this + 15);
      v21 = v19[1];
      v15 = __OFADD__(v21, v20);
      v22 = v21 + v20;
      *v19 = 9;
      v19[1] = v22;
      if ((v22 < 0) ^ v15 | (v22 == 0))
        v11 = v8;
      else
        v11 = v8 + 1;
      v187 = v8;
      v184 = v8;
      break;
    case 2:
      v184 = 0;
      v187 = 0;
      v10 = *((_DWORD *)this + 15);
      v213 = v10 + v7;
      if ((v213 < 0) ^ __OFADD__(v10, v7) | (v213 == 0))
        v11 = 0;
      else
        v11 = 1;
      break;
    default:
      v184 = 2;
      v11 = v7 > 0;
      v187 = 1;
      break;
  }
  OpenSubdiv::v3_1_1::Far::PatchTable::reservePatchArrays((char **)a2, v11);
  v195 = 0;
  v194 = 0;
  if (v11)
  {
    v24 = v11;
    v25 = &v213;
    do
    {
      v26 = *v25;
      v193 = *(v25 - 1);
      OpenSubdiv::v3_1_1::Far::PatchTable::pushPatchArray(a2, &v193, v26, (int *)&v195 + 1, (int *)&v195, &v194);
      v25 += 24;
      --v24;
    }
    while (v24);
  }
  v186 = *((_WORD *)this + 4);
  OpenSubdiv::v3_1_1::Far::PatchTableFactory::allocateVertexTables(this, a2, v23);
  if (*((_QWORD *)this + 18) != *((_QWORD *)this + 19))
    OpenSubdiv::v3_1_1::Far::PatchTableFactory::allocateFVarChannels(this, a2, v28);
  if (v11)
  {
    v29 = 0;
    v189 = v11;
    do
    {
      v30 = &v212 + 24 * v29;
      *((_QWORD *)v30 + 1) = OpenSubdiv::v3_1_1::Far::PatchTable::getPatchArrayVertices(a2, v29, (uint64_t)v28);
      *((_QWORD *)v30 + 2) = OpenSubdiv::v3_1_1::Far::PatchTable::getPatchParams(a2, v29, v31);
      if ((v186 & 4) != 0)
        v214[12 * v29 + 2] = OpenSubdiv::v3_1_1::Far::PatchTable::getSharpnessIndices(a2, v29, (uint64_t)v28);
      v32 = *((_QWORD *)this + 18);
      v33 = *((_QWORD *)this + 19);
      if (v32 != v33)
      {
        v34 = &v214[12 * v29 + 3];
        v35 = v33 - v32;
        v36 = (unint64_t)(v33 - v32) >> 2;
        if ((_DWORD)v36)
        {
          v37 = &v212 + 24 * v29;
          v39 = v37[11];
          v38 = v37 + 11;
          if (v39 < v36)
          {
            v40 = (void **)(&v212 + 24 * v29);
            operator delete(v40[7]);
            *v34 = (uint64_t)(v40 + 6);
            *v38 = 1;
            v41 = operator new((2 * v35) & 0x7FFFFFFF8);
            v40[7] = v41;
            *v34 = (uint64_t)v41;
            *v38 = v36;
          }
        }
        else
        {
          v42 = (void **)(&v212 + 24 * v29);
          operator delete(v42[7]);
          *v34 = (uint64_t)(v42 + 6);
          *((_DWORD *)v42 + 11) = 1;
        }
        v43 = &v212 + 24 * v29;
        v43[10] = v36;
        v44 = v43 + 16;
        v45 = *((_QWORD *)this + 19) - *((_QWORD *)this + 18);
        v46 = v45 >> 2;
        if ((v45 >> 2))
        {
          v47 = &v212 + 24 * v29;
          v49 = v47[19];
          v48 = v47 + 19;
          if (v49 < v46)
          {
            v50 = (void **)(&v212 + 24 * v29);
            operator delete(v50[11]);
            *v44 = v50 + 10;
            *v48 = 1;
            v51 = operator new((2 * v45) & 0x7FFFFFFF8);
            v50[11] = v51;
            *v44 = v51;
            *v48 = v46;
          }
        }
        else
        {
          v52 = (void **)(&v212 + 24 * v29);
          operator delete(v52[11]);
          *v44 = v52 + 10;
          *((_DWORD *)v52 + 19) = 1;
        }
        LODWORD(v214[12 * v29 + 8]) = v46;
        if ((int)((*((_QWORD *)this + 19) - *((_QWORD *)this + 18)) >> 2) >= 1)
        {
          v53 = 0;
          do
          {
            OpenSubdiv::v3_1_1::Far::PatchTable::GetFVarPatchDescriptor((uint64_t)a2, v53, (uint64_t)v28, &v208);
            PatchIndex = OpenSubdiv::v3_1_1::Far::PatchTable::getPatchIndex(a2, v29, 0);
            v56 = PatchIndex;
            if (((_DWORD)v208 - 1) > 8)
              v57 = -1;
            else
              v57 = dword_1DD02D3F0[(int)v208 - 1];
            *(_QWORD *)(*v34 + 8 * v53) = OpenSubdiv::v3_1_1::Far::PatchTable::getFVarValues(a2, v53, v55)
                                        + 4 * v57 * PatchIndex;
            *(_QWORD *)(*v44 + 8 * v53) = OpenSubdiv::v3_1_1::Far::PatchTable::getFVarPatchParams(a2, v53, v58)
                                        + 8 * v56;
            ++v53;
          }
          while (v53 < (int)((*((_QWORD *)this + 19) - *((_QWORD *)this + 18)) >> 2));
        }
      }
      ++v29;
    }
    while (v29 != v189);
  }
  v59 = &v210;
  v209 = 0x100000000;
  v211 = 0;
  v60 = &v206;
  __p = 0;
  v204 = &v206;
  v205 = 0x100000000;
  v207 = 0;
  v208 = &v210;
  v61 = &v202;
  v200 = &v202;
  v201 = 0x100000000;
  v62 = *((_BYTE *)this + 9) & 7;
  if (v62 == 2)
  {
    v63 = operator new();
    *(_QWORD *)v63 = &off_1EA598468;
    *(_DWORD *)(v63 + 8) = 0;
    *(_OWORD *)(v63 + 16) = 0u;
    *(_OWORD *)(v63 + 32) = 0u;
    *(_OWORD *)(v63 + 48) = 0u;
    *(_OWORD *)(v63 + 64) = 0u;
    *(_OWORD *)(v63 + 80) = 0u;
    *(_OWORD *)(v63 + 96) = 0u;
    v64 = operator new();
    *(_QWORD *)v64 = &off_1EA598468;
    *(_DWORD *)(v64 + 8) = 0;
    *(_OWORD *)(v64 + 16) = 0u;
    *(_OWORD *)(v64 + 32) = 0u;
    *(_OWORD *)(v64 + 48) = 0u;
    *(_OWORD *)(v64 + 64) = 0u;
    *(_OWORD *)(v64 + 80) = 0u;
    *(_OWORD *)(v64 + 96) = 0u;
    v177 = (OpenSubdiv::v3_1_1::Far::EndCapBSplineBasisPatchFactory *)operator new();
    OpenSubdiv::v3_1_1::Far::EndCapBSplineBasisPatchFactory::EndCapBSplineBasisPatchFactory(v177, v183, (OpenSubdiv::v3_1_1::Far::StencilTable *)v63, (OpenSubdiv::v3_1_1::Far::StencilTable *)v64);
    v179 = 0;
LABEL_51:
    v178 = 0;
    goto LABEL_52;
  }
  if (v62 == 3)
  {
    v63 = operator new();
    *(_QWORD *)v63 = &off_1EA598468;
    *(_DWORD *)(v63 + 8) = 0;
    *(_OWORD *)(v63 + 16) = 0u;
    *(_OWORD *)(v63 + 32) = 0u;
    *(_OWORD *)(v63 + 48) = 0u;
    *(_OWORD *)(v63 + 64) = 0u;
    *(_OWORD *)(v63 + 80) = 0u;
    *(_OWORD *)(v63 + 96) = 0u;
    v64 = operator new();
    *(_QWORD *)v64 = &off_1EA598468;
    *(_DWORD *)(v64 + 8) = 0;
    *(_OWORD *)(v64 + 16) = 0u;
    *(_OWORD *)(v64 + 32) = 0u;
    *(_OWORD *)(v64 + 48) = 0u;
    *(_OWORD *)(v64 + 64) = 0u;
    *(_OWORD *)(v64 + 80) = 0u;
    *(_OWORD *)(v64 + 96) = 0u;
    v179 = (OpenSubdiv::v3_1_1::Far::EndCapGregoryBasisPatchFactory *)operator new();
    OpenSubdiv::v3_1_1::Far::EndCapGregoryBasisPatchFactory::EndCapGregoryBasisPatchFactory(v179, v183, (OpenSubdiv::v3_1_1::Far::StencilTable *)v63, (OpenSubdiv::v3_1_1::Far::StencilTable *)v64, (*((_WORD *)this + 4) & 0x800) != 0);
    v177 = 0;
    goto LABEL_51;
  }
  v177 = 0;
  v178 = 0;
  v179 = 0;
  v63 = 0;
  v64 = 0;
  if (v62 == 4)
  {
    v178 = (OpenSubdiv::v3_1_1::Far::EndCapLegacyGregoryPatchFactory *)operator new();
    OpenSubdiv::v3_1_1::Far::EndCapLegacyGregoryPatchFactory::EndCapLegacyGregoryPatchFactory(v178, v183);
    v177 = 0;
    v179 = 0;
    v63 = 0;
    v64 = 0;
  }
LABEL_52:
  v65 = *((_QWORD *)this + 18);
  v66 = *((_QWORD *)this + 19);
  if (v65 == v66)
    goto LABEL_76;
  v67 = v66 - v65;
  v68 = (unint64_t)(v66 - v65) >> 2;
  if ((_DWORD)v68)
  {
    if (HIDWORD(v209) >= v68)
      goto LABEL_58;
    operator delete(v211);
    v208 = &v210;
    HIDWORD(v209) = 1;
    v59 = (uint64_t *)operator new((2 * v67) & 0x7FFFFFFF8);
    v211 = v59;
    v69 = v68;
  }
  else
  {
    operator delete(v211);
    v69 = 1;
  }
  v208 = v59;
  HIDWORD(v209) = v69;
LABEL_58:
  LODWORD(v209) = v68;
  v70 = *((_QWORD *)this + 19) - *((_QWORD *)this + 18);
  if ((v70 >> 2))
  {
    if (HIDWORD(v205) >= (v70 >> 2))
      goto LABEL_63;
    operator delete(v207);
    v204 = &v206;
    HIDWORD(v205) = 1;
    v60 = (uint64_t *)operator new((2 * v70) & 0x7FFFFFFF8);
    v207 = v60;
    v71 = v70 >> 2;
  }
  else
  {
    operator delete(v207);
    v71 = 1;
  }
  v204 = v60;
  HIDWORD(v205) = v71;
LABEL_63:
  LODWORD(v205) = v70 >> 2;
  v72 = *((_QWORD *)this + 19) - *((_QWORD *)this + 18);
  if ((v72 >> 2))
  {
    if (HIDWORD(v201) >= (v72 >> 2))
      goto LABEL_68;
    operator delete(__p);
    v200 = &v202;
    HIDWORD(v201) = 1;
    v61 = (uint64_t *)operator new((2 * v72) & 0x7FFFFFFF8);
    __p = v61;
    v73 = v72 >> 2;
  }
  else
  {
    operator delete(__p);
    v73 = 1;
  }
  v200 = v61;
  HIDWORD(v201) = v73;
LABEL_68:
  LODWORD(v201) = v72 >> 2;
  if ((int)((*((_QWORD *)this + 19) - *((_QWORD *)this + 18)) >> 2) >= 1)
  {
    v74 = 0;
    while (1)
    {
      v75 = *((_BYTE *)this + 9) & 7;
      if (v75 == 2)
        break;
      if (v75 == 3)
      {
        v76 = operator new();
        *(_QWORD *)v76 = &off_1EA598468;
        *(_DWORD *)(v76 + 8) = 0;
        *(_OWORD *)(v76 + 16) = 0u;
        *(_OWORD *)(v76 + 32) = 0u;
        *(_OWORD *)(v76 + 48) = 0u;
        *(_OWORD *)(v76 + 64) = 0u;
        *(_OWORD *)(v76 + 80) = 0u;
        *(_OWORD *)(v76 + 96) = 0u;
        v200[v74] = v76;
        v77 = (OpenSubdiv::v3_1_1::Far::EndCapGregoryBasisPatchFactory *)operator new();
        v78 = OpenSubdiv::v3_1_1::Far::EndCapGregoryBasisPatchFactory::EndCapGregoryBasisPatchFactory(v77, v183, (OpenSubdiv::v3_1_1::Far::StencilTable *)v200[v74], 0, (*((_WORD *)this + 4) & 0x800) != 0);
        v79 = &v204;
LABEL_74:
        (*v79)[v74] = v78;
      }
      if (++v74 >= (int)((*((_QWORD *)this + 19) - *((_QWORD *)this + 18)) >> 2))
        goto LABEL_76;
    }
    v80 = operator new();
    *(_QWORD *)v80 = &off_1EA598468;
    *(_DWORD *)(v80 + 8) = 0;
    *(_OWORD *)(v80 + 16) = 0u;
    *(_OWORD *)(v80 + 32) = 0u;
    *(_OWORD *)(v80 + 48) = 0u;
    *(_OWORD *)(v80 + 64) = 0u;
    *(_OWORD *)(v80 + 80) = 0u;
    *(_OWORD *)(v80 + 96) = 0u;
    v200[v74] = v80;
    v81 = (OpenSubdiv::v3_1_1::Far::EndCapBSplineBasisPatchFactory *)operator new();
    v78 = OpenSubdiv::v3_1_1::Far::EndCapBSplineBasisPatchFactory::EndCapBSplineBasisPatchFactory(v81, v183, (OpenSubdiv::v3_1_1::Far::StencilTable *)v200[v74], 0);
    v79 = &v208;
    goto LABEL_74;
  }
LABEL_76:
  v175 = v64;
  v176 = (OpenSubdiv::v3_1_1::Far::StencilTable *)v63;
  v82 = *((_QWORD *)this + 9);
  if ((int)((unint64_t)(*((_QWORD *)this + 10) - v82) >> 3) >= 1)
  {
    v83 = 0;
    v174 = &v212 + 24 * v184;
    v173 = (_DWORD **)(v174 + 2);
    v180 = &v214[12 * v187];
    v181 = &v212 + 24 * v187;
    v182 = (_QWORD *)((char *)a2 + 264);
    while (1)
    {
      v84 = (int *)(v82 + 8 * v83);
      v85 = v84 + 1;
      v86 = *(OpenSubdiv::v3_1_1::Vtr::internal::Level **)(*((_QWORD *)v183 + 5) + 8 * v84[1]);
      FaceCompositeVTag = OpenSubdiv::v3_1_1::Vtr::internal::Level::getFaceCompositeVTag(v86, *v84, 0xFFFFFFFF);
      memset(v199, 0, sizeof(v199));
      IsPatchRegular = OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::IsPatchRegular(this, v84[1], *v84, 0xFFFFFFFF);
      v89 = v84[1];
      v90 = *v84;
      v190 = IsPatchRegular;
      v185 = v83;
      if (IsPatchRegular)
      {
        RegularPatchBoundaryMask = OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::GetRegularPatchBoundaryMask(this, v89, v90, 0xFFFFFFFF);
        v92 = RegularPatchBoundaryMask;
        v188 = 0;
        v93 = 0.0;
        if ((v186 & 4) == 0 || RegularPatchBoundaryMask)
        {
          v95 = RegularPatchBoundaryMask;
        }
        else
        {
          if ((FaceCompositeVTag & 0x1040) == 0)
            goto LABEL_90;
          LODWORD(v196) = 0;
          v192[0] = 0;
          if (!OpenSubdiv::v3_1_1::Vtr::internal::Level::isSingleCreasePatch(v86, *v84, (float *)&v196, v192))goto LABEL_90;
          v94 = (float)((*((_WORD *)this + 4) >> 4) - *v85);
          if (*(float *)&v196 <= v94)
            v94 = *(float *)&v196;
          if (v94 > 0.0)
          {
            v92 = 0;
            v188 = 1;
            v95 = 1 << SLOBYTE(v192[0]);
            v93 = v94;
          }
          else
          {
LABEL_90:
            v92 = 0;
            v95 = 0;
            v188 = 0;
          }
        }
        OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::GatherRegularPatchPoints(this, v214[0], v84, v92, 0xFFFFFFFF);
        v214[0] += 64;
        v98 = *v85;
        if ((_DWORD)v98 == ((*(unsigned __int8 *)(*(_QWORD *)this + 8) >> 2) & 0xF))
          LOBYTE(v99) = 0;
        else
          v99 = (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 64) + 8 * v98) + 408)
                                    + *v84) >> 1) & 0xF;
        v100 = &v212;
      }
      else
      {
        OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::GetIrregularPatchCornerSpans((uint64_t)this, v89, v90, (uint64_t)v199, 0xFFFFFFFF);
        v93 = 0.0;
        switch(*((_BYTE *)this + 9) & 7)
        {
          case 1:
            OpenSubdiv::v3_1_1::Far::PatchTableFactory::populateAdaptivePatches();
          case 2:
            v96 = v180;
            v97 = OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::GatherIrregularPatchPoints<OpenSubdiv::v3_1_1::Far::EndCapBSplineBasisPatchFactory>(this, (uint64_t)v177, (_DWORD *)*v180, v84, (__int16 *)v199, 0xFFFFFFFF);
            goto LABEL_99;
          case 3:
            v96 = v180;
            v97 = OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::GatherIrregularPatchPoints<OpenSubdiv::v3_1_1::Far::EndCapGregoryBasisPatchFactory>(this, (uint64_t)v179, (_DWORD *)*v180, v84, (uint64_t)v199, 0xFFFFFFFF);
            goto LABEL_99;
          case 4:
            if ((FaceCompositeVTag & 4) != 0)
            {
              v126 = OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::GatherIrregularPatchPoints<OpenSubdiv::v3_1_1::Far::EndCapLegacyGregoryPatchFactory>(this, v178, *v173, v84, (int)v199, 0xFFFFFFFF);
              v188 = 0;
              v95 = 0;
              LOBYTE(v99) = 0;
              *v173 += v126;
              v100 = v174;
            }
            else
            {
              v96 = v180;
              v97 = OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::GatherIrregularPatchPoints<OpenSubdiv::v3_1_1::Far::EndCapLegacyGregoryPatchFactory>(this, v178, (_DWORD *)*v180, v84, (int)v199, 0xFFFFFFFF);
LABEL_99:
              v188 = 0;
              v95 = 0;
              LOBYTE(v99) = 0;
              *v96 += 4 * v97;
LABEL_100:
              v100 = v181;
            }
            break;
          default:
            v188 = 0;
            v95 = 0;
            LOBYTE(v99) = 0;
            goto LABEL_100;
        }
      }
      v101 = OpenSubdiv::v3_1_1::Far::PatchTableFactory::computePatchParam(this, (const OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext *)*v85, *v84, v95, v99);
      v102 = (unint64_t *)*((_QWORD *)v100 + 2);
      *((_QWORD *)v100 + 2) = v102 + 1;
      *v102 = v101;
      if ((v186 & 4) != 0)
      {
        v103 = (float *)*((_QWORD *)a2 + 31);
        v104 = (float *)*((_QWORD *)a2 + 32);
        v105 = v104 - v103;
        if ((int)v105 < 1)
        {
LABEL_106:
          if ((unint64_t)v104 >= *v182)
          {
            v108 = v105 + 1;
            if ((unint64_t)(v105 + 1) >> 62)
              abort();
            v109 = *v182 - (_QWORD)v103;
            if (v109 >> 1 > v108)
              v108 = v109 >> 1;
            if ((unint64_t)v109 >= 0x7FFFFFFFFFFFFFFCLL)
              v27 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v27 = v108;
            if (v27)
            {
              v110 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v182, v27);
              v103 = (float *)*((_QWORD *)a2 + 31);
              v104 = (float *)*((_QWORD *)a2 + 32);
            }
            else
            {
              v110 = 0;
            }
            v111 = (float *)&v110[4 * v105];
            *v111 = v93;
            v107 = v111 + 1;
            while (v104 != v103)
            {
              v112 = *((_DWORD *)v104-- - 1);
              *((_DWORD *)v111-- - 1) = v112;
            }
            *((_QWORD *)a2 + 31) = v111;
            *((_QWORD *)a2 + 32) = v107;
            *((_QWORD *)a2 + 33) = &v110[4 * v27];
            if (v103)
            {
              operator delete(v103);
              v103 = (float *)*((_QWORD *)a2 + 31);
            }
            else
            {
              v103 = v111;
            }
          }
          else
          {
            *v104 = v93;
            v107 = v104 + 1;
          }
          *((_QWORD *)a2 + 32) = v107;
          LODWORD(v106) = ((unint64_t)((char *)v107 - (char *)v103) >> 2) - 1;
        }
        else
        {
          v106 = 0;
          while (v103[v106] != v93)
          {
            if (((unint64_t)((char *)v104 - (char *)v103) >> 2) == ++v106)
              goto LABEL_106;
          }
        }
        v113 = (_DWORD *)*((_QWORD *)v100 + 3);
        *v113 = v106;
        *((_QWORD *)v100 + 3) = v113 + 1;
      }
      v114 = *((_QWORD *)this + 18);
      v115 = *((_QWORD *)this + 19);
      if (v114 != v115 && (int)((unint64_t)(v115 - v114) >> 2) >= 1)
        break;
LABEL_149:
      v83 = v185 + 1;
      v82 = *((_QWORD *)this + 9);
      if (v185 + 1 >= (int)((unint64_t)(*((_QWORD *)this + 10) - v82) >> 3))
        goto LABEL_152;
    }
    v116 = v95;
    v117 = 0;
    while (1)
    {
      *(_QWORD *)v192 = *(_QWORD *)v84;
      OpenSubdiv::v3_1_1::Far::PatchTable::GetFVarPatchDescriptor((uint64_t)a2, v117, (uint64_t)v28, &v191);
      if (v191 != 3)
        break;
      *(_QWORD *)(*((_QWORD *)v100 + 4) + 8 * v117) += 4
                                                     * (int)OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::GatherLinearPatchPoints(this, *(_DWORD **)(*((_QWORD *)v100 + 4) + 8 * v117), v192, v117);
      v118 = *((_QWORD *)v100 + 8);
      v119 = *(unint64_t **)(v118 + 8 * v117);
      *(_QWORD *)(v118 + 8 * v117) = v119 + 1;
      *v119 = v101;
LABEL_148:
      if (++v117 >= (int)((*((_QWORD *)this + 19) - *((_QWORD *)this + 18)) >> 2))
        goto LABEL_149;
    }
    if (OpenSubdiv::v3_1_1::Vtr::internal::Level::doesFaceFVarTopologyMatch(*(OpenSubdiv::v3_1_1::Vtr::internal::Level **)(*(_QWORD *)(*(_QWORD *)this + 40) + 8 * *v85), *v84, *(_DWORD *)(*((_QWORD *)this + 18) + 4 * v117)))
    {
      if (v190)
      {
        v120 = v116;
        if (v188)
        {
          OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::GatherRegularPatchPoints(this, *(_QWORD *)(*((_QWORD *)v100 + 4) + 8 * v117), v192, 0, v117);
          v121 = 0x2000000000;
          LOBYTE(v120) = v116;
LABEL_144:
          if ((v191 - 1) > 8)
            v123 = -1;
          else
            v123 = qword_1DD02D418[v191 - 1];
          *(_QWORD *)(*((_QWORD *)v100 + 4) + 8 * v117) += 4 * v123;
          v124 = *((_QWORD *)v100 + 8);
          v125 = *(unint64_t **)(v124 + 8 * v117);
          *(_QWORD *)(v124 + 8 * v117) = v125 + 1;
          *v125 = v101 & 0xFFFFF01FFFFFFFFFLL | v121 | ((unint64_t)(v120 & 0xF) << 40);
          goto LABEL_148;
        }
LABEL_136:
        OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::GatherRegularPatchPoints(this, *(_QWORD *)(*((_QWORD *)v100 + 4) + 8 * v117), v192, v120, v117);
        v121 = 0x2000000000;
        goto LABEL_144;
      }
      v196 = 0;
      v197 = 0;
      v122 = (__int16 *)v199;
      v198 = 0;
    }
    else
    {
      if (OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::IsPatchRegular(this, *v85, *v84, v117))
      {
        v120 = OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::GetRegularPatchBoundaryMask(this, *v85, *v84, v117);
        goto LABEL_136;
      }
      v196 = 0;
      v197 = 0;
      v198 = 0;
      v122 = (__int16 *)&v196;
      OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::GetIrregularPatchCornerSpans((uint64_t)this, *v85, *v84, (uint64_t)&v196, v117);
    }
    if (v191 == 9)
    {
      OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::GatherIrregularPatchPoints<OpenSubdiv::v3_1_1::Far::EndCapGregoryBasisPatchFactory>(this, v204[v117], *(_DWORD **)(*((_QWORD *)v100 + 4) + 8 * v117), v192, (uint64_t)v122, v117);
    }
    else
    {
      if (v191 != 6)
        OpenSubdiv::v3_1_1::Far::PatchTableFactory::populateAdaptivePatches();
      OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::GatherIrregularPatchPoints<OpenSubdiv::v3_1_1::Far::EndCapBSplineBasisPatchFactory>(this, v208[v117], *(_DWORD **)(*((_QWORD *)v100 + 4) + 8 * v117), v192, v122, v117);
    }
    v121 = 0;
    LOBYTE(v120) = 0;
    goto LABEL_144;
  }
LABEL_152:
  OpenSubdiv::v3_1_1::Far::PatchTable::populateVaryingVertices((uint64_t)a2, v27, (uint64_t)v28);
  v127 = v176;
  if (v176)
  {
    v128 = v175;
    if ((int)((*((_QWORD *)v176 + 3) - *((_QWORD *)v176 + 2)) >> 2) < 1)
    {
      (*(void (**)(OpenSubdiv::v3_1_1::Far::StencilTable *))(*(_QWORD *)v176 + 8))(v176);
      v127 = 0;
      if (!v175)
        goto LABEL_168;
      goto LABEL_160;
    }
    OpenSubdiv::v3_1_1::Far::StencilTable::shrinkToFit((int **)v176);
    std::vector<int>::resize((std::vector<unsigned int> *)((char *)v176 + 40), (int)((uint64_t)(*((_QWORD *)v176 + 3) - *((_QWORD *)v176 + 2)) >> 2));
    v129 = (int *)*((_QWORD *)v176 + 2);
    v130 = *((_QWORD *)v176 + 3) - (_QWORD)v129;
    if ((int)(v130 >> 2) >= 1)
    {
      v131 = 0;
      v132 = (_DWORD *)*((_QWORD *)v176 + 5);
      v133 = (v130 >> 2);
      do
      {
        *v132++ = v131;
        v134 = *v129++;
        v131 += v134;
        --v133;
      }
      while (v133);
    }
  }
  else
  {
    v128 = v175;
  }
  if (!v128)
    goto LABEL_168;
LABEL_160:
  if ((int)((*(_QWORD *)(v128 + 24) - *(_QWORD *)(v128 + 16)) >> 2) < 1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v128 + 8))(v128);
    v128 = 0;
  }
  else
  {
    OpenSubdiv::v3_1_1::Far::StencilTable::shrinkToFit((int **)v128);
    std::vector<int>::resize((std::vector<unsigned int> *)(v128 + 40), (int)((uint64_t)(*(_QWORD *)(v128 + 24) - *(_QWORD *)(v128 + 16)) >> 2));
    v135 = *(int **)(v128 + 16);
    v136 = *(_QWORD *)(v128 + 24) - (_QWORD)v135;
    if ((int)(v136 >> 2) >= 1)
    {
      v137 = 0;
      v138 = *(_DWORD **)(v128 + 40);
      v139 = (v136 >> 2);
      do
      {
        *v138++ = v137;
        v140 = *v135++;
        v137 += v140;
        --v139;
      }
      while (v139);
    }
  }
LABEL_168:
  v141 = *((_BYTE *)this + 9) & 7;
  switch(v141)
  {
    case 2:
      *((_QWORD *)a2 + 16) = v127;
      *((_QWORD *)a2 + 17) = v128;
      if (v177)
      {
        v151 = (void *)*((_QWORD *)v177 + 4);
        if (v151)
        {
          *((_QWORD *)v177 + 5) = v151;
          operator delete(v151);
        }
        v144 = v177;
        v145 = 1232653951;
        goto LABEL_191;
      }
      break;
    case 4:
      OpenSubdiv::v3_1_1::Far::EndCapLegacyGregoryPatchFactory::Finalize(v178, *(_DWORD *)a2, (std::vector<unsigned int> *)((char *)a2 + 80), (std::vector<unsigned int> *)((char *)a2 + 104), (unsigned int *)0xFFFFFFFFLL);
      if (v178)
      {
        v146 = (void *)*((_QWORD *)v178 + 10);
        if (v146)
        {
          *((_QWORD *)v178 + 11) = v146;
          operator delete(v146);
        }
        v147 = (void *)*((_QWORD *)v178 + 7);
        if (v147)
        {
          *((_QWORD *)v178 + 8) = v147;
          operator delete(v147);
        }
        v148 = (void *)*((_QWORD *)v178 + 4);
        if (v148)
        {
          *((_QWORD *)v178 + 5) = v148;
          operator delete(v148);
        }
        v149 = (void *)*((_QWORD *)v178 + 1);
        if (v149)
        {
          *((_QWORD *)v178 + 2) = v149;
          operator delete(v149);
        }
        v144 = v178;
        v150 = 0x70C40F9997B92;
        goto LABEL_192;
      }
      break;
    case 3:
      *((_QWORD *)a2 + 16) = v127;
      *((_QWORD *)a2 + 17) = v128;
      if (v179)
      {
        v142 = (void *)*((_QWORD *)v179 + 8);
        if (v142)
        {
          *((_QWORD *)v179 + 9) = v142;
          operator delete(v142);
        }
        v143 = (void *)*((_QWORD *)v179 + 5);
        if (v143)
        {
          *((_QWORD *)v179 + 6) = v143;
          operator delete(v143);
        }
        v144 = v179;
        v145 = 537674454;
LABEL_191:
        v150 = v145 | 0x1070C4000000000;
LABEL_192:
        MEMORY[0x1DF0D41C0](v144, v150);
      }
      break;
  }
  v152 = *((_QWORD *)this + 18);
  v153 = *((_QWORD *)this + 19);
  if (v152 != v153)
  {
    v154 = (_QWORD *)((char *)a2 + 200);
    std::vector<ClippedCorner>::resize((uint64_t)v154, (v153 - v152) >> 2);
    if ((int)((*((_QWORD *)this + 19) - *((_QWORD *)this + 18)) >> 2) >= 1)
    {
      v155 = 0;
      while (1)
      {
        v156 = v200[v155];
        if ((int)((*(_QWORD *)(v156 + 24) - *(_QWORD *)(v156 + 16)) >> 2) < 1)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v156 + 8))(v200[v155]);
          v200[v155] = 0;
        }
        else
        {
          OpenSubdiv::v3_1_1::Far::StencilTable::shrinkToFit((int **)v200[v155]);
          std::vector<int>::resize((std::vector<unsigned int> *)(v156 + 40), (int)((uint64_t)(*(_QWORD *)(v156 + 24) - *(_QWORD *)(v156 + 16)) >> 2));
          v157 = *(int **)(v156 + 16);
          v158 = *(_QWORD *)(v156 + 24) - (_QWORD)v157;
          if ((int)(v158 >> 2) >= 1)
          {
            v159 = 0;
            v160 = *(_DWORD **)(v156 + 40);
            v161 = (v158 >> 2);
            do
            {
              *v160++ = v159;
              v162 = *v157++;
              v159 += v162;
              --v161;
            }
            while (v161);
          }
        }
        v163 = *((_BYTE *)this + 9) & 7;
        if (v163 != 2)
          break;
        v169 = (_QWORD *)v208[v155];
        if (v169)
        {
          v170 = (void *)v169[4];
          if (v170)
          {
            v169[5] = v170;
            operator delete(v170);
          }
          v167 = v169;
          v168 = 1232653951;
LABEL_214:
          MEMORY[0x1DF0D41C0](v167, v168 | 0x1070C4000000000);
        }
LABEL_215:
        *(_QWORD *)(*v154 + 8 * v155) = v200[v155];
        if (++v155 >= (int)((*((_QWORD *)this + 19) - *((_QWORD *)this + 18)) >> 2))
          goto LABEL_216;
      }
      if (v163 != 3)
        goto LABEL_215;
      v164 = (_QWORD *)v204[v155];
      if (!v164)
        goto LABEL_215;
      v165 = (void *)v164[8];
      if (v165)
      {
        v164[9] = v165;
        operator delete(v165);
      }
      v166 = (void *)v164[5];
      if (v166)
      {
        v164[6] = v166;
        operator delete(v166);
      }
      v167 = v164;
      v168 = 537674454;
      goto LABEL_214;
    }
  }
LABEL_216:
  operator delete(__p);
  operator delete(v207);
  operator delete(v211);
  v171 = 36;
  do
  {
    v172 = (char *)&v212 + v171 * 8;
    operator delete((&v211)[v171]);
    *((_QWORD *)v172 - 4) = v172 - 16;
    *((_DWORD *)v172 - 5) = 1;
    operator delete((&v207)[v171]);
    *((_QWORD *)v172 - 8) = v172 - 48;
    *((_DWORD *)v172 - 13) = 1;
    v171 -= 12;
  }
  while (v171 * 8);
}

void std::vector<OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::PatchTuple>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      abort();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Statement *>>(v3, a2);
    v7 = &v6[v5];
    v9 = &v6[8 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_QWORD *)v11 - 1);
        v11 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void std::vector<std::vector<int>>::resize(_QWORD *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<int>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      v8 = a1[1];
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v3 - 16) = v9;
          operator delete(v9);
        }
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

uint64_t OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::GatherIrregularPatchPoints<OpenSubdiv::v3_1_1::Far::EndCapGregoryBasisPatchFactory>(_QWORD *a1, uint64_t a2, _DWORD *a3, int *a4, uint64_t a5, unsigned int a6)
{
  _QWORD *v7;
  unsigned int v8;
  uint64_t v9;
  int *PatchPoints;
  uint64_t result;
  uint64_t v12;
  int v13;

  if ((a6 & 0x80000000) != 0)
  {
    v7 = a1 + 12;
    v8 = -1;
  }
  else
  {
    v7 = (_QWORD *)(a1[15] + 24 * a6);
    v8 = *(_DWORD *)(a1[18] + 4 * a6);
  }
  PatchPoints = (int *)OpenSubdiv::v3_1_1::Far::EndCapGregoryBasisPatchFactory::GetPatchPoints(a2, *(_QWORD *)(*(_QWORD *)(*a1 + 40) + 8 * a4[1]), *a4, a5, *(unsigned int *)(*v7 + 4 * a4[1]), v8);
  result = v9;
  if ((int)v9 >= 1)
  {
    v12 = v9;
    do
    {
      v13 = *PatchPoints++;
      *a3++ = v13;
      --v12;
    }
    while (v12);
  }
  return result;
}

uint64_t OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::GatherIrregularPatchPoints<OpenSubdiv::v3_1_1::Far::EndCapBSplineBasisPatchFactory>(_QWORD *a1, uint64_t a2, _DWORD *a3, int *a4, __int16 *a5, unsigned int a6)
{
  _QWORD *v7;
  unsigned int v8;
  uint64_t v9;
  int *PatchPoints;
  uint64_t result;
  uint64_t v12;
  int v13;

  if ((a6 & 0x80000000) != 0)
  {
    v7 = a1 + 12;
    v8 = -1;
  }
  else
  {
    v7 = (_QWORD *)(a1[15] + 24 * a6);
    v8 = *(_DWORD *)(a1[18] + 4 * a6);
  }
  PatchPoints = (int *)OpenSubdiv::v3_1_1::Far::EndCapBSplineBasisPatchFactory::GetPatchPoints(a2, *(_QWORD **)(*(_QWORD *)(*a1 + 40) + 8 * a4[1]), *a4, a5, *(_DWORD *)(*v7 + 4 * a4[1]), v8);
  result = v9;
  if ((int)v9 >= 1)
  {
    v12 = v9;
    do
    {
      v13 = *PatchPoints++;
      *a3++ = v13;
      --v12;
    }
    while (v12);
  }
  return result;
}

uint64_t OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::GatherIrregularPatchPoints<OpenSubdiv::v3_1_1::Far::EndCapLegacyGregoryPatchFactory>(_QWORD *a1, _QWORD *a2, _DWORD *a3, int *a4, int a5, unsigned int a6)
{
  _QWORD *v7;
  int v8;
  uint64_t v9;
  char *PatchPoints;
  uint64_t result;
  uint64_t v12;
  int v13;

  if ((a6 & 0x80000000) != 0)
  {
    v7 = a1 + 12;
    v8 = -1;
  }
  else
  {
    v7 = (_QWORD *)(a1[15] + 24 * a6);
    v8 = *(_DWORD *)(a1[18] + 4 * a6);
  }
  PatchPoints = OpenSubdiv::v3_1_1::Far::EndCapLegacyGregoryPatchFactory::GetPatchPoints(a2, *(OpenSubdiv::v3_1_1::Vtr::internal::Level **)(*(_QWORD *)(*a1 + 40) + 8 * a4[1]), *a4, a5, *(_DWORD *)(*v7 + 4 * a4[1]), v8);
  result = v9;
  if ((int)v9 >= 1)
  {
    v12 = v9;
    do
    {
      v13 = *(_DWORD *)PatchPoints;
      PatchPoints += 4;
      *a3++ = v13;
      --v12;
    }
    while (v12);
  }
  return result;
}

void OpenSubdiv::v3_1_1::Far::StencilTable::shrinkToFit(int **this)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  int *v8;
  int *v9;
  int *v10;
  __int128 v11;
  int *v12;

  v11 = 0uLL;
  v12 = 0;
  std::vector<int>::__init_with_size[abi:nn180100]<int *,int *>((char *)&v11, this[2], this[3], this[3] - this[2]);
  v2 = this[2];
  *((_OWORD *)this + 1) = v11;
  v3 = v12;
  v4 = this[4];
  *(_QWORD *)&v11 = v2;
  v12 = v4;
  this[4] = v3;
  if (v2)
  {
    *((_QWORD *)&v11 + 1) = v2;
    operator delete(v2);
  }
  v11 = 0uLL;
  v12 = 0;
  std::vector<int>::__init_with_size[abi:nn180100]<int *,int *>((char *)&v11, this[8], this[9], this[9] - this[8]);
  v5 = this[8];
  *((_OWORD *)this + 4) = v11;
  v6 = v12;
  v7 = this[10];
  *(_QWORD *)&v11 = v5;
  v12 = v7;
  this[10] = v6;
  if (v5)
  {
    *((_QWORD *)&v11 + 1) = v5;
    operator delete(v5);
  }
  v11 = 0uLL;
  v12 = 0;
  std::vector<float>::__init_with_size[abi:nn180100]<float *,float *>((char *)&v11, this[11], this[12], this[12] - this[11]);
  v8 = this[11];
  *(_OWORD *)(this + 11) = v11;
  v9 = v12;
  v10 = this[13];
  *(_QWORD *)&v11 = v8;
  v12 = v10;
  this[13] = v9;
  if (v8)
  {
    *((_QWORD *)&v11 + 1) = v8;
    operator delete(v8);
  }
}

char *std::vector<int>::__init_with_size[abi:nn180100]<int *,int *>(char *result, int *a2, int *a3, unint64_t a4)
{
  char *v6;
  _DWORD *v7;
  int v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<float>::__vallocate[abi:nn180100](result, a4);
    v7 = (_DWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

char *std::vector<float>::__init_with_size[abi:nn180100]<float *,float *>(char *result, int *a2, int *a3, unint64_t a4)
{
  char *v6;
  _DWORD *v7;
  int v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<float>::__vallocate[abi:nn180100](result, a4);
    v7 = (_DWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

char *std::vector<int>::__assign_with_size[abi:nn180100]<int const*,int const*>(char *result, char *__src, char *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  char *v14;
  int v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  _DWORD *v19;
  int v20;
  size_t v21;

  v6 = __src;
  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 2)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62)
      abort();
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<float>::__vallocate[abi:nn180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
    v14 = v13;
    if (v6 != a3)
    {
      v14 = v9;
      do
      {
        v15 = *(_DWORD *)v6;
        v6 += 4;
        *(_DWORD *)v14 = v15;
        v14 += 4;
      }
      while (v6 != a3);
    }
LABEL_20:
    v21 = v14 - v9;
    goto LABEL_21;
  }
  v12 = (void **)(result + 8);
  v16 = (_BYTE *)*((_QWORD *)result + 1);
  v17 = (v16 - v9) >> 2;
  if (v17 < a4)
  {
    v18 = &__src[4 * v17];
    if (v16 != v9)
    {
      result = (char *)memmove(*(void **)result, __src, v16 - v9);
      v9 = (char *)*v12;
    }
    v14 = v9;
    if (v18 != a3)
    {
      v14 = v9;
      v19 = v9;
      do
      {
        v20 = *(_DWORD *)v18;
        v18 += 4;
        *v19++ = v20;
        v14 += 4;
      }
      while (v18 != a3);
    }
    goto LABEL_20;
  }
  v21 = a3 - __src;
  if (a3 != __src)
    result = (char *)memmove(*(void **)result, __src, v21);
LABEL_21:
  *v12 = &v9[v21];
  return result;
}

void std::vector<std::vector<int>>::__append(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<float>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)&v15);
  }
}

void OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::IsPatchEligible()
{
  __assert_rtn("IsPatchEligible", "patchTableFactory.cpp", 497, "fVerts.size() == 4");
}

void OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::GetRegularPatchBoundaryMask()
{
  __assert_rtn("GetRegularPatchBoundaryMask", "patchTableFactory.cpp", 702, "eBoundaryMask != -1");
}

void OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::GetIrregularPatchCornerSpans()
{
  __assert_rtn("identifyNonManifoldCornerSpan", "patchTableFactory.cpp", 166, "vSpan._numFaces == 1");
}

void OpenSubdiv::v3_1_1::Far::PatchTableFactory::computePatchParam()
{
  __assert_rtn("computePatchParam", "patchTableFactory.cpp", 896, "ptexIndex!=-1");
}

void OpenSubdiv::v3_1_1::Far::PatchTableFactory::createUniform()
{
  __assert_rtn("createUniform", "patchTableFactory.cpp", 926, "refiner.IsUniform()");
}

{
  __assert_rtn("createUniform", "patchTableFactory.cpp", 1038, "(levelVertOffset + fvalues[vert]) < (int)table->getFVarValues(fvc).size()");
}

{
  __assert_rtn("createUniform", "patchTableFactory.cpp", 975, "npatches>=0");
}

{
  __assert_rtn("createUniform", "patchTableFactory.cpp", 952, "ptype!=PatchDescriptor::NON_PATCH");
}

void OpenSubdiv::v3_1_1::Far::PatchTableFactory::createAdaptive()
{
  __assert_rtn("createAdaptive", "patchTableFactory.cpp", 1081, "! refiner.IsUniform()");
}

void OpenSubdiv::v3_1_1::Far::PatchTableFactory::populateAdaptivePatches()
{
  __assert_rtn("populateAdaptivePatches", "patchTableFactory.cpp", 1527, "\"Unknown Descriptor for FVar patch\" == 0");
}

{
  __assert_rtn("populateAdaptivePatches", "patchTableFactory.cpp", 1445, "false");
}

OpenSubdiv::v3_1_1::Osd::CpuPatchTable *OpenSubdiv::v3_1_1::Osd::CpuPatchTable::CpuPatchTable(OpenSubdiv::v3_1_1::Osd::CpuPatchTable *this, const OpenSubdiv::v3_1_1::Far::PatchTable *a2)
{
  const OpenSubdiv::v3_1_1::Far::PatchTable *v2;
  uint64_t v3;
  int NumPatchArrays;
  int v5;
  int v6;
  uint64_t v7;
  int NumPatches;
  uint64_t v9;
  int v10;
  std::vector<int>::size_type v11;
  _QWORD *v12;
  unint64_t v13;
  int v14;
  int NumFVarChannels;
  int v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  OpenSubdiv::v3_1_1::Osd::CpuPatchTable *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  OpenSubdiv::v3_1_1::Osd::CpuPatchTable *v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  _DWORD *v35;
  unint64_t v36;
  _DWORD *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  int v49;
  uint64_t v50;
  char *PatchArrayVertices;
  int v52;
  uint64_t v53;
  OpenSubdiv::v3_1_1::Osd::CpuPatchTable *v54;
  int v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  int v69;
  uint64_t v70;
  OpenSubdiv::v3_1_1::Osd::CpuPatchTable *v71;
  char *PatchArrayVaryingVertices;
  int v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  char **v77;
  unint64_t v78;
  char **v79;
  unint64_t v80;
  _QWORD *v81;
  int v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  int v94;
  uint64_t v95;
  char *PatchArrayFVarValues;
  int v97;
  uint64_t PatchArrayFVarPatchParams;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char **v102;
  unint64_t v103;
  char **v104;
  unint64_t v105;
  _QWORD *v106;
  char *v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  char *v112;
  char *v113;
  char *v114;
  char *v115;
  char *v116;
  uint64_t v117;
  int v118;
  int v119;
  _QWORD *v120;
  int v121;
  char *v122;
  unint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  char *v130;
  char *v131;
  char *v132;
  char *v133;
  char *v134;
  uint64_t v135;
  int v136;
  char **v138;
  int v139;
  std::vector<int> *v140;
  std::vector<int> *v141;
  OpenSubdiv::v3_1_1::Far::PatchTable *v143;
  uint64_t *v144;
  _QWORD *v145;
  unsigned int v146;
  char **v147;
  int v148;
  int v149;
  int v150;
  int v151;
  int v152;

  v2 = a2;
  *((_OWORD *)this + 3) = 0u;
  v147 = (char **)((char *)this + 48);
  *((_OWORD *)this + 6) = 0u;
  v140 = (std::vector<int> *)((char *)this + 96);
  *((_OWORD *)this + 9) = 0u;
  v144 = (uint64_t *)((char *)this + 144);
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  v141 = (std::vector<int> *)((char *)this + 24);
  v138 = (char **)((char *)this + 72);
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  NumPatchArrays = OpenSubdiv::v3_1_1::Far::PatchTable::GetNumPatchArrays(a2);
  if (NumPatchArrays < 1)
  {
    v11 = 0;
    v5 = 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    do
    {
      NumPatches = OpenSubdiv::v3_1_1::Far::PatchTable::GetNumPatches(v2, v7, v3);
      OpenSubdiv::v3_1_1::Far::PatchTable::GetPatchArrayDescriptor((uint64_t)v2, v7, v9, &v152);
      if ((v152 - 1) > 8)
        v10 = -1;
      else
        v10 = dword_1DD02D460[v152 - 1];
      v5 += NumPatches;
      v6 += v10 * NumPatches;
      v7 = (v7 + 1);
    }
    while (NumPatchArrays != (_DWORD)v7);
    v11 = v6;
  }
  v145 = (_QWORD *)((char *)this + 120);
  v12 = (_QWORD *)((char *)this + 168);
  v13 = NumPatchArrays;
  std::vector<OpenSubdiv::v3_1_1::Osd::PatchArray>::reserve((char **)this, NumPatchArrays);
  std::vector<unsigned int>::reserve(v141, v11);
  std::vector<OpenSubdiv::v3_1_1::Osd::PatchArray>::reserve(v138, NumPatchArrays);
  OpenSubdiv::v3_1_1::Far::PatchTable::GetVaryingPatchDescriptor((uint64_t)v2, &v152);
  v139 = NumPatchArrays;
  if ((v152 - 1) > 8)
    v14 = -1;
  else
    v14 = dword_1DD02D460[v152 - 1];
  std::vector<unsigned int>::reserve(v140, v14 * v5);
  NumFVarChannels = OpenSubdiv::v3_1_1::Far::PatchTable::GetNumFVarChannels(v2);
  std::vector<std::vector<int>>::resize(v145, NumFVarChannels);
  v16 = OpenSubdiv::v3_1_1::Far::PatchTable::GetNumFVarChannels(v2);
  std::vector<std::vector<int>>::resize(v144, v16);
  v17 = OpenSubdiv::v3_1_1::Far::PatchTable::GetNumFVarChannels(v2);
  std::vector<std::vector<int>>::resize(v12, v17);
  v148 = v5;
  v18 = v5;
  if ((int)OpenSubdiv::v3_1_1::Far::PatchTable::GetNumFVarChannels(v2) >= 1)
  {
    v19 = 0;
    v20 = 0;
    do
    {
      std::vector<OpenSubdiv::v3_1_1::Osd::PatchArray>::reserve((char **)(*v145 + v19), v13);
      v21 = *v144;
      OpenSubdiv::v3_1_1::Far::PatchTable::GetFVarPatchDescriptor((uint64_t)v2, v20, v22, &v152);
      if ((v152 - 1) > 8)
        v23 = -1;
      else
        v23 = dword_1DD02D460[v152 - 1];
      std::vector<unsigned int>::reserve((std::vector<int> *)(v21 + v19), v23 * v148);
      std::vector<OpenSubdiv::v3_1_1::Osd::PatchParam>::reserve((char **)(*v12 + v19), v18);
      ++v20;
      v19 += 24;
    }
    while (v20 < (int)OpenSubdiv::v3_1_1::Far::PatchTable::GetNumFVarChannels(v2));
  }
  std::vector<OpenSubdiv::v3_1_1::Osd::PatchParam>::reserve(v147, v18);
  v25 = this;
  if (v139 >= 1)
  {
    v26 = 0;
    v143 = v2;
    do
    {
      OpenSubdiv::v3_1_1::Far::PatchTable::GetPatchArrayDescriptor((uint64_t)v2, v26, v24, &v151);
      v146 = v26;
      v28 = OpenSubdiv::v3_1_1::Far::PatchTable::GetNumPatches(v2, v26, v27);
      v30 = this;
      v31 = v28;
      v32 = (*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 2;
      v33 = -1431655765 * ((*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) >> 2);
      v34 = v151;
      v35 = (_DWORD *)*((_QWORD *)this + 1);
      v36 = *((_QWORD *)this + 2);
      if ((unint64_t)v35 >= v36)
      {
        v39 = ((uint64_t)v35 - *(_QWORD *)this) >> 4;
        v40 = v39 + 1;
        if ((unint64_t)(v39 + 1) >> 60)
          goto LABEL_109;
        v41 = v36 - *(_QWORD *)this;
        if (v41 >> 3 > v40)
          v40 = v41 >> 3;
        if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF0)
          v42 = 0xFFFFFFFFFFFFFFFLL;
        else
          v42 = v40;
        v43 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)this + 16, v42);
        v45 = &v43[16 * v39];
        *(_DWORD *)v45 = v34;
        *((_DWORD *)v45 + 1) = v31;
        *((_DWORD *)v45 + 2) = v32;
        *((_DWORD *)v45 + 3) = v33;
        v47 = *(_QWORD *)this;
        v46 = *((_QWORD *)this + 1);
        v30 = this;
        v48 = v45;
        if (v46 == *(_QWORD *)this)
        {
          v38 = v146;
        }
        else
        {
          v38 = v146;
          do
          {
            v49 = *(_DWORD *)(v46 - 16);
            v46 -= 16;
            *((_DWORD *)v48 - 4) = v49;
            v48 -= 16;
            v50 = *(_QWORD *)(v46 + 4);
            *((_DWORD *)v48 + 3) = *(_DWORD *)(v46 + 12);
            *(_QWORD *)(v48 + 4) = v50;
          }
          while (v46 != v47);
          v46 = *(_QWORD *)this;
        }
        v37 = v45 + 16;
        *(_QWORD *)this = v48;
        *((_QWORD *)this + 1) = v45 + 16;
        *((_QWORD *)this + 2) = &v43[16 * v44];
        if (v46)
        {
          operator delete((void *)v46);
          v30 = this;
        }
      }
      else
      {
        *v35 = v151;
        v35[1] = v28;
        v37 = v35 + 4;
        v35[2] = v32;
        v35[3] = v33;
        v38 = v146;
      }
      *((_QWORD *)v30 + 1) = v37;
      PatchArrayVertices = (char *)OpenSubdiv::v3_1_1::Far::PatchTable::GetPatchArrayVertices(v2, v38, v29);
      std::vector<int>::__insert_with_size[abi:nn180100]<int const*,int const*>(v141, *((int **)this + 4), PatchArrayVertices, &PatchArrayVertices[4 * v52], v52);
      OpenSubdiv::v3_1_1::Far::PatchTable::GetVaryingPatchDescriptor((uint64_t)v2, &v150);
      v54 = this;
      v55 = v150;
      v56 = *((_QWORD *)this + 10);
      v57 = *((_QWORD *)this + 11);
      if (v56 >= v57)
      {
        v59 = (uint64_t)(v56 - (_QWORD)*v138) >> 4;
        v60 = v59 + 1;
        if ((unint64_t)(v59 + 1) >> 60)
LABEL_109:
          abort();
        v61 = v57 - (_QWORD)*v138;
        if (v61 >> 3 > v60)
          v60 = v61 >> 3;
        if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF0)
          v62 = 0xFFFFFFFFFFFFFFFLL;
        else
          v62 = v60;
        v63 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)this + 88, v62);
        v65 = &v63[16 * v59];
        *(_DWORD *)v65 = v55;
        *((_DWORD *)v65 + 1) = v148;
        *((_QWORD *)v65 + 1) = 0;
        v54 = this;
        v67 = (char *)*((_QWORD *)this + 9);
        v66 = (char *)*((_QWORD *)this + 10);
        v68 = v65;
        if (v66 != v67)
        {
          do
          {
            v69 = *((_DWORD *)v66 - 4);
            v66 -= 16;
            *((_DWORD *)v68 - 4) = v69;
            v68 -= 16;
            v70 = *(_QWORD *)(v66 + 4);
            *((_DWORD *)v68 + 3) = *((_DWORD *)v66 + 3);
            *(_QWORD *)(v68 + 4) = v70;
          }
          while (v66 != v67);
          v66 = *v138;
        }
        v58 = v65 + 16;
        *((_QWORD *)this + 9) = v68;
        *((_QWORD *)this + 10) = v65 + 16;
        *((_QWORD *)this + 11) = &v63[16 * v64];
        if (v66)
        {
          operator delete(v66);
          v54 = this;
        }
      }
      else
      {
        *(_DWORD *)v56 = v150;
        *(_DWORD *)(v56 + 4) = v148;
        v58 = (char *)(v56 + 16);
        *(_QWORD *)(v56 + 8) = 0;
      }
      *((_QWORD *)v54 + 10) = v58;
      v71 = v54;
      PatchArrayVaryingVertices = (char *)OpenSubdiv::v3_1_1::Far::PatchTable::GetPatchArrayVaryingVertices(v2, v38, v53);
      std::vector<int>::__insert_with_size[abi:nn180100]<int const*,int const*>(v140, *((int **)v71 + 13), PatchArrayVaryingVertices, &PatchArrayVaryingVertices[4 * v73], v73);
      if ((int)OpenSubdiv::v3_1_1::Far::PatchTable::GetNumFVarChannels(v2) >= 1)
      {
        v75 = 0;
        do
        {
          OpenSubdiv::v3_1_1::Far::PatchTable::GetFVarPatchDescriptor((uint64_t)v2, v75, v74, &v149);
          v76 = v149;
          v77 = (char **)(*v145 + 24 * v75);
          v79 = v77 + 1;
          v78 = (unint64_t)v77[1];
          v81 = v77 + 2;
          v80 = (unint64_t)v77[2];
          if (v78 >= v80)
          {
            v84 = (uint64_t)(v78 - (_QWORD)*v77) >> 4;
            v85 = v84 + 1;
            if ((unint64_t)(v84 + 1) >> 60)
              goto LABEL_109;
            v86 = v80 - (_QWORD)*v77;
            if (v86 >> 3 > v85)
              v85 = v86 >> 3;
            if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFF0)
              v87 = 0xFFFFFFFFFFFFFFFLL;
            else
              v87 = v85;
            v88 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)v81, v87);
            v90 = &v88[16 * v84];
            *(_DWORD *)v90 = v76;
            *((_DWORD *)v90 + 1) = v148;
            *((_QWORD *)v90 + 1) = 0;
            v91 = *v79;
            v92 = *v77;
            v93 = v90;
            if (*v79 != *v77)
            {
              do
              {
                v94 = *((_DWORD *)v91 - 4);
                v91 -= 16;
                *((_DWORD *)v93 - 4) = v94;
                v93 -= 16;
                v95 = *(_QWORD *)(v91 + 4);
                *((_DWORD *)v93 + 3) = *((_DWORD *)v91 + 3);
                *(_QWORD *)(v93 + 4) = v95;
              }
              while (v91 != v92);
              v91 = *v77;
            }
            *v77 = v93;
            v83 = v90 + 16;
            *v79 = v90 + 16;
            *v81 = &v88[16 * v89];
            if (v91)
              operator delete(v91);
            v82 = v148;
          }
          else
          {
            *(_DWORD *)v78 = v149;
            v82 = v148;
            *(_DWORD *)(v78 + 4) = v148;
            v83 = (char *)(v78 + 16);
            *(_QWORD *)(v78 + 8) = 0;
          }
          *v79 = v83;
          PatchArrayFVarValues = (char *)OpenSubdiv::v3_1_1::Far::PatchTable::GetPatchArrayFVarValues(v2, v146, v75);
          std::vector<int>::__insert_with_size[abi:nn180100]<int const*,int const*>((std::vector<int> *)(*v144 + 24 * v75), *(int **)(*v144 + 24 * v75 + 8), PatchArrayFVarValues, &PatchArrayFVarValues[4 * v97], v97);
          PatchArrayFVarPatchParams = OpenSubdiv::v3_1_1::Far::PatchTable::GetPatchArrayFVarPatchParams(v2, v146, v75);
          if (v82 >= 1)
          {
            v99 = PatchArrayFVarPatchParams;
            v100 = 0;
            do
            {
              v101 = *(_QWORD *)(v99 + 8 * v100);
              v102 = (char **)(*v12 + 24 * v75);
              v104 = v102 + 1;
              v103 = (unint64_t)v102[1];
              v106 = v102 + 2;
              v105 = (unint64_t)v102[2];
              if (v103 >= v105)
              {
                v108 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v103 - (_QWORD)*v102) >> 2);
                v109 = v108 + 1;
                if (v108 + 1 > 0x1555555555555555)
                  goto LABEL_109;
                v110 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v105 - (_QWORD)*v102) >> 2);
                if (2 * v110 > v109)
                  v109 = 2 * v110;
                if (v110 >= 0xAAAAAAAAAAAAAAALL)
                  v111 = 0x1555555555555555;
                else
                  v111 = v109;
                if (v111)
                  v112 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<vmesh::Triangle>>((uint64_t)v106, v111);
                else
                  v112 = 0;
                v113 = &v112[12 * v108];
                *(_QWORD *)v113 = v101;
                *((_DWORD *)v113 + 2) = 0;
                v114 = *v104;
                v115 = *v102;
                v116 = v113;
                if (*v104 != *v102)
                {
                  do
                  {
                    v117 = *(_QWORD *)(v114 - 12);
                    v114 -= 12;
                    v118 = *((_DWORD *)v114 + 2);
                    *(_QWORD *)(v116 - 12) = v117;
                    v116 -= 12;
                    *((_DWORD *)v116 + 2) = v118;
                  }
                  while (v114 != v115);
                  v114 = *v102;
                }
                *v102 = v116;
                v107 = v113 + 12;
                *v104 = v113 + 12;
                *v106 = &v112[12 * v111];
                if (v114)
                  operator delete(v114);
              }
              else
              {
                *(_QWORD *)v103 = v101;
                *(_DWORD *)(v103 + 8) = 0;
                v107 = (char *)(v103 + 12);
              }
              *v104 = v107;
              ++v100;
            }
            while (v100 != v148);
          }
          ++v75;
          v2 = v143;
        }
        while (v75 < (int)OpenSubdiv::v3_1_1::Far::PatchTable::GetNumFVarChannels(v143));
      }
      v119 = OpenSubdiv::v3_1_1::Far::PatchTable::GetNumPatches(v2, v146, v74);
      v120 = (_QWORD *)((char *)this + 64);
      v25 = this;
      if (v119 >= 1)
      {
        v121 = 0;
        v122 = (char *)*((_QWORD *)this + 7);
        do
        {
          v123 = 0xAAAAAAAAAAAAAAABLL * ((v122 - *v147) >> 2);
          v124 = *((_QWORD *)v2 + 28);
          v125 = 0;
          if ((int)v123 < (int)((unint64_t)(*((_QWORD *)v2 + 29) - v124) >> 2))
          {
            v126 = *(unsigned int *)(v124 + 4 * (int)v123);
            if ((v126 & 0x80000000) == 0)
              v125 = *(_DWORD *)(*((_QWORD *)v2 + 31) + 4 * v126);
          }
          v127 = *(_QWORD *)(*((_QWORD *)v2 + 7) + 8 * (int)v123);
          if ((unint64_t)v122 >= *v120)
          {
            if (v123 + 1 > 0x1555555555555555)
              goto LABEL_109;
            v128 = 0x5555555555555556 * ((uint64_t)(*v120 - (_QWORD)*v147) >> 2);
            if (v128 <= v123 + 1)
              v128 = v123 + 1;
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v120 - (_QWORD)*v147) >> 2) >= 0xAAAAAAAAAAAAAAALL)
              v129 = 0x1555555555555555;
            else
              v129 = v128;
            if (v129)
            {
              v130 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<vmesh::Triangle>>((uint64_t)v120, v129);
              v25 = this;
            }
            else
            {
              v130 = 0;
            }
            v131 = &v130[12 * v123];
            *(_QWORD *)v131 = v127;
            *((_DWORD *)v131 + 2) = v125;
            v133 = (char *)*((_QWORD *)v25 + 6);
            v132 = (char *)*((_QWORD *)v25 + 7);
            v134 = v131;
            if (v132 != v133)
            {
              do
              {
                v135 = *(_QWORD *)(v132 - 12);
                v132 -= 12;
                v136 = *((_DWORD *)v132 + 2);
                *(_QWORD *)(v134 - 12) = v135;
                v134 -= 12;
                *((_DWORD *)v134 + 2) = v136;
              }
              while (v132 != v133);
              v132 = *v147;
            }
            v122 = v131 + 12;
            *((_QWORD *)v25 + 6) = v134;
            *((_QWORD *)v25 + 7) = v131 + 12;
            *((_QWORD *)v25 + 8) = &v130[12 * v129];
            if (v132)
            {
              operator delete(v132);
              v25 = this;
            }
            v120 = (_QWORD *)((char *)this + 64);
          }
          else
          {
            *(_QWORD *)v122 = v127;
            *((_DWORD *)v122 + 2) = v125;
            v122 += 12;
          }
          *((_QWORD *)v25 + 7) = v122;
          ++v121;
        }
        while (v121 != v119);
      }
      v26 = v146 + 1;
    }
    while ((_DWORD)v26 != v139);
  }
  return v25;
}

void std::vector<OpenSubdiv::v3_1_1::Osd::PatchArray>::reserve(char **a1, unint64_t a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  int v13;
  uint64_t v14;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60)
      abort();
    v5 = a1[1] - *a1;
    v6 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v3, a2);
    v7 = &v6[v5];
    v9 = &v6[16 * v8];
    v11 = *a1;
    v10 = a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_DWORD *)v10 - 4);
        v10 -= 16;
        *((_DWORD *)v12 - 4) = v13;
        v12 -= 16;
        v14 = *(_QWORD *)(v10 + 4);
        *((_DWORD *)v12 + 3) = *((_DWORD *)v10 + 3);
        *(_QWORD *)(v12 + 4) = v14;
      }
      while (v10 != v11);
      v10 = *a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void std::vector<OpenSubdiv::v3_1_1::Osd::PatchParam>::reserve(char **a1, unint64_t a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  int v14;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 2) < a2)
  {
    if (a2 >= 0x1555555555555556)
      abort();
    v5 = (a1[1] - *a1) / 12;
    v6 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<vmesh::Triangle>>(v3, a2);
    v7 = &v6[12 * v5];
    v9 = &v6[12 * v8];
    v11 = *a1;
    v10 = a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *(_QWORD *)(v10 - 12);
        v10 -= 12;
        v14 = *((_DWORD *)v10 + 2);
        *(_QWORD *)(v12 - 12) = v13;
        v12 -= 12;
        *((_DWORD *)v12 + 2) = v14;
      }
      while (v10 != v11);
      v10 = *a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

int *std::vector<int>::__insert_with_size[abi:nn180100]<int const*,int const*>(std::vector<int> *a1, int *__dst, char *__src, char *a4, uint64_t a5)
{
  int *v5;
  int *v7;
  std::allocator<int> *p_end_cap;
  int *v10;
  int *value;
  unint64_t v12;
  char *begin;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  int *v21;
  char *v22;
  _DWORD *v23;
  int v24;
  char *v25;
  int *v26;
  int *v27;
  int v28;
  int *v29;
  uint64_t v30;
  int *v31;
  int v32;
  std::__split_buffer<int> __v;

  v5 = __dst;
  if (a5 < 1)
    return v5;
  v7 = (int *)__src;
  value = a1->__end_cap_.__value_;
  p_end_cap = (std::allocator<int> *)&a1->__end_cap_;
  v10 = value;
  v12 = *((_QWORD *)p_end_cap - 1);
  if (a5 > (uint64_t)((uint64_t)value - v12) >> 2)
  {
    begin = (char *)a1->__begin_;
    v14 = a5 + ((uint64_t)(v12 - (unint64_t)a1->__begin_) >> 2);
    if (v14 >> 62)
      abort();
    v15 = ((char *)__dst - begin) >> 2;
    v16 = (char *)v10 - begin;
    if (v16 >> 1 > v14)
      v14 = v16 >> 1;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
      v17 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    __v.__end_cap_.__value_ = p_end_cap;
    if (v17)
      v18 = (int *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)p_end_cap, v17);
    else
      v18 = 0;
    v29 = &v18[v15];
    __v.__first_ = v18;
    __v.__begin_ = v29;
    __v.__end_cap_.__value_ = &v18[v17];
    v30 = 4 * a5;
    v31 = &v29[a5];
    do
    {
      v32 = *v7++;
      *v29++ = v32;
      v30 -= 4;
    }
    while (v30);
    __v.__end_ = v31;
    v5 = std::vector<int>::__swap_out_circular_buffer(a1, &__v, v5);
    if (__v.__end_ != __v.__begin_)
      __v.__end_ = (std::__split_buffer<int>::pointer)((char *)__v.__end_
                                                     + (((char *)__v.__begin_ - (char *)__v.__end_ + 3) & 0xFFFFFFFFFFFFFFFCLL));
    if (__v.__first_)
      operator delete(__v.__first_);
    return v5;
  }
  v19 = (uint64_t)(v12 - (_QWORD)__dst) >> 2;
  if (v19 >= a5)
  {
    v20 = &__src[4 * a5];
    v21 = (int *)*((_QWORD *)p_end_cap - 1);
LABEL_18:
    v25 = (char *)&__dst[a5];
    v26 = &v21[-a5];
    v27 = v21;
    if ((unint64_t)v26 < v12)
    {
      v27 = v21;
      do
      {
        v28 = *v26++;
        *v27++ = v28;
      }
      while ((unint64_t)v26 < v12);
    }
    a1->__end_ = v27;
    if (v21 != (int *)v25)
      memmove(&v21[-(((char *)v21 - v25) >> 2)], __dst, (char *)v21 - v25);
    if (v20 != (char *)v7)
      memmove(v5, v7, v20 - (char *)v7);
    return v5;
  }
  v20 = &__src[4 * v19];
  v21 = (int *)*((_QWORD *)p_end_cap - 1);
  if (v20 != a4)
  {
    v22 = v20;
    v23 = (_DWORD *)*((_QWORD *)p_end_cap - 1);
    do
    {
      v24 = *(_DWORD *)v22;
      v22 += 4;
      *v23++ = v24;
      ++v21;
    }
    while (v22 != a4);
  }
  a1->__end_ = v21;
  if ((uint64_t)(v12 - (_QWORD)__dst) >= 1)
    goto LABEL_18;
  return v5;
}

std::vector<int>::pointer std::vector<int>::__swap_out_circular_buffer(std::vector<int> *this, std::__split_buffer<int> *__v, std::vector<int>::pointer __p)
{
  int *begin;
  std::vector<int>::pointer v6;
  int *v7;
  std::vector<int>::pointer v8;
  int v9;
  int *end;
  std::__split_buffer<int>::pointer v11;
  int64_t v12;
  int *v13;
  int *v14;
  int *value;

  begin = __v->__begin_;
  v6 = this->__begin_;
  v7 = begin;
  if (this->__begin_ != __p)
  {
    v8 = __p;
    v7 = __v->__begin_;
    do
    {
      v9 = *--v8;
      *--v7 = v9;
    }
    while (v8 != v6);
  }
  __v->__begin_ = v7;
  end = this->__end_;
  v11 = __v->__end_;
  v12 = (char *)end - (char *)__p;
  if (end != __p)
  {
    memmove(__v->__end_, __p, (char *)end - (char *)__p);
    v7 = __v->__begin_;
  }
  __v->__end_ = (std::__split_buffer<int>::pointer)((char *)v11 + v12);
  v13 = this->__begin_;
  this->__begin_ = v7;
  __v->__begin_ = v13;
  v14 = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = v14;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
  return begin;
}

double OpenSubdiv::v3_1_1::Far::PatchTable::PatchTable(OpenSubdiv::v3_1_1::Far::PatchTable *this, int a2)
{
  double result;

  *(_DWORD *)this = a2;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_QWORD *)this + 17) = 0;
  *((_DWORD *)this + 36) = 3;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((_QWORD *)this + 33) = 0;
  return result;
}

void OpenSubdiv::v3_1_1::Far::PatchTable::~PatchTable(OpenSubdiv::v3_1_1::Far::PatchTable *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void **v17;

  v2 = *((_QWORD *)this + 16);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 17);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v5 = *((_QWORD *)this + 25);
  v4 = *((_QWORD *)this + 26);
  if ((int)((unint64_t)(v4 - v5) >> 3) >= 1)
  {
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(v5 + 8 * v6);
      if (v7)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
        v5 = *((_QWORD *)this + 25);
        v4 = *((_QWORD *)this + 26);
      }
      ++v6;
    }
    while (v6 < (int)((unint64_t)(v4 - v5) >> 3));
  }
  v8 = (void *)*((_QWORD *)this + 31);
  if (v8)
  {
    *((_QWORD *)this + 32) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 28);
  if (v9)
  {
    *((_QWORD *)this + 29) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 25);
  if (v10)
  {
    *((_QWORD *)this + 26) = v10;
    operator delete(v10);
  }
  v17 = (void **)((char *)this + 176);
  std::vector<OpenSubdiv::v3_1_1::Far::PatchTable::FVarPatchChannel>::__destroy_vector::operator()[abi:nn180100](&v17);
  v11 = (void *)*((_QWORD *)this + 19);
  if (v11)
  {
    *((_QWORD *)this + 20) = v11;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)this + 13);
  if (v12)
  {
    *((_QWORD *)this + 14) = v12;
    operator delete(v12);
  }
  v13 = (void *)*((_QWORD *)this + 10);
  if (v13)
  {
    *((_QWORD *)this + 11) = v13;
    operator delete(v13);
  }
  v14 = (void *)*((_QWORD *)this + 7);
  if (v14)
  {
    *((_QWORD *)this + 8) = v14;
    operator delete(v14);
  }
  v15 = (void *)*((_QWORD *)this + 4);
  if (v15)
  {
    *((_QWORD *)this + 5) = v15;
    operator delete(v15);
  }
  v16 = (void *)*((_QWORD *)this + 1);
  if (v16)
  {
    *((_QWORD *)this + 2) = v16;
    operator delete(v16);
  }
}

void OpenSubdiv::v3_1_1::Far::PatchTable::reservePatchArrays(char **this, int a2)
{
  std::vector<OpenSubdiv::v3_1_1::Far::PatchTable::PatchArray>::reserve(this + 1, a2);
}

void std::vector<OpenSubdiv::v3_1_1::Far::PatchTable::PatchArray>::reserve(char **a1, unint64_t a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  int v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - *a1) >> 2) < a2)
  {
    if (a2 >= 0xCCCCCCCCCCCCCCDLL)
      abort();
    v5 = a1[1] - *a1;
    v6 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<OpenSubdiv::v3_1_1::Far::PatchTable::PatchArray>>(v3, a2);
    v7 = &v6[v5];
    v9 = &v6[20 * v8];
    v11 = *a1;
    v10 = a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_DWORD *)v10 - 5);
        v10 -= 20;
        *((_DWORD *)v12 - 5) = v13;
        v12 -= 20;
        *(_OWORD *)(v12 + 4) = *(_OWORD *)(v10 + 4);
      }
      while (v10 != v11);
      v10 = *a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void OpenSubdiv::v3_1_1::Far::PatchTable::allocateVaryingVertices(uint64_t a1, _DWORD *a2, int a3)
{
  int v3;
  int v4;

  *(_DWORD *)(a1 + 144) = *a2;
  v3 = *a2 - 1;
  if (v3 > 8)
    v4 = -1;
  else
    v4 = dword_1DD02D490[v3];
  std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 152), v4 * a3);
}

void OpenSubdiv::v3_1_1::Far::PatchTable::allocateFVarPatchChannels(OpenSubdiv::v3_1_1::Far::PatchTable *this, int a2)
{
  std::vector<OpenSubdiv::v3_1_1::Far::PatchTable::FVarPatchChannel>::resize((_QWORD *)this + 22, a2);
}

void std::vector<OpenSubdiv::v3_1_1::Far::PatchTable::FVarPatchChannel>::resize(_QWORD *a1, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  v3 = (_QWORD *)a1[1];
  v4 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<OpenSubdiv::v3_1_1::Far::PatchTable::FVarPatchChannel>::__append((uint64_t)a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 56 * a2;
    while (v3 != (_QWORD *)v7)
    {
      v3 -= 7;
      std::allocator<OpenSubdiv::v3_1_1::Far::PatchTable::FVarPatchChannel>::destroy[abi:nn180100]((uint64_t)(a1 + 2), v3);
    }
    a1[1] = v7;
  }
}

void OpenSubdiv::v3_1_1::Far::PatchTable::allocateFVarPatchChannelValues(uint64_t a1, _DWORD *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  int v7;
  uint64_t v8;

  if ((a4 & 0x80000000) != 0
    || (v4 = *(_QWORD *)(a1 + 176), (int)(-1227133513 * ((unint64_t)(*(_QWORD *)(a1 + 184) - v4) >> 3)) <= (int)a4))
  {
    OpenSubdiv::v3_1_1::Far::PatchTable::allocateFVarPatchChannelValues(a1, (uint64_t)a2, a3);
  }
  v5 = a3;
  *(_DWORD *)(v4 + 56 * a4 + 4) = *a2;
  v6 = *a2 - 1;
  if (v6 > 8)
    v7 = -1;
  else
    v7 = dword_1DD02D490[v6];
  v8 = v4 + 56 * a4;
  std::vector<int>::resize((std::vector<unsigned int> *)(v8 + 8), v7 * (int)a3);
  std::vector<ClippedCorner>::resize(v8 + 32, v5);
}

uint64_t OpenSubdiv::v3_1_1::Far::PatchTable::setFVarPatchChannelLinearInterpolation(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if ((a3 & 0x80000000) != 0
    || (v3 = *(_QWORD *)(result + 176),
        (int)(-1227133513 * ((unint64_t)(*(_QWORD *)(result + 184) - v3) >> 3)) <= (int)a3))
  {
    OpenSubdiv::v3_1_1::Far::PatchTable::allocateFVarPatchChannelValues(result, a2, a3);
  }
  *(_DWORD *)(v3 + 56 * a3) = a2;
  return result;
}

void OpenSubdiv::v3_1_1::Far::PatchTable::pushPatchArray(_QWORD *a1, int *a2, int a3, int *a4, int *a5, int *a6)
{
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  int v33;
  int v34;
  int v35;

  if (a3 >= 1)
  {
    if (a6)
      v12 = *a6;
    else
      v12 = 0;
    v13 = *a2;
    v14 = *a4;
    v15 = *a5;
    v16 = (uint64_t)(a1 + 3);
    v17 = a1[3];
    v18 = (_DWORD *)a1[2];
    if ((unint64_t)v18 >= v17)
    {
      v35 = v12;
      v20 = a1[1];
      v21 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v18 - v20) >> 2);
      v22 = v21 + 1;
      if (v21 + 1 > 0xCCCCCCCCCCCCCCCLL)
        abort();
      v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v17 - v20) >> 2);
      if (2 * v23 > v22)
        v22 = 2 * v23;
      if (v23 >= 0x666666666666666)
        v24 = 0xCCCCCCCCCCCCCCCLL;
      else
        v24 = v22;
      v25 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<OpenSubdiv::v3_1_1::Far::PatchTable::PatchArray>>(v16, v24);
      v26 = &v25[20 * v21];
      v28 = &v25[20 * v27];
      *(_DWORD *)v26 = v13;
      *((_DWORD *)v26 + 1) = a3;
      *((_DWORD *)v26 + 2) = v14;
      *((_DWORD *)v26 + 3) = v15;
      *((_DWORD *)v26 + 4) = v35;
      v19 = v26 + 20;
      v30 = a1[1];
      v29 = a1[2];
      if (v29 != v30)
      {
        do
        {
          v31 = *(_DWORD *)(v29 - 20);
          v29 -= 20;
          *((_DWORD *)v26 - 5) = v31;
          v26 -= 20;
          *(_OWORD *)(v26 + 4) = *(_OWORD *)(v29 + 4);
        }
        while (v29 != v30);
        v29 = a1[1];
      }
      a1[1] = v26;
      a1[2] = v19;
      a1[3] = v28;
      if (v29)
        operator delete((void *)v29);
    }
    else
    {
      *v18 = v13;
      v18[1] = a3;
      v18[2] = v14;
      v18[3] = v15;
      v19 = v18 + 5;
      v18[4] = v12;
    }
    a1[2] = v19;
    v32 = *a2 - 1;
    if (v32 > 8)
      v33 = -1;
    else
      v33 = dword_1DD02D490[v32];
    v34 = v33 * a3;
    *a4 += v34;
    *a5 += a3;
    if (a6)
    {
      if (*a2 != 7)
        v34 = 0;
      *a6 += v34;
    }
  }
}

uint64_t OpenSubdiv::v3_1_1::Far::PatchTable::getPatchIndex(OpenSubdiv::v3_1_1::Far::PatchTable *this, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  if ((int)(-858993459 * ((unint64_t)(*((_QWORD *)this + 2) - v3) >> 2)) <= (int)a2)
    OpenSubdiv::v3_1_1::Far::PatchTable::getPatchIndex((uint64_t)this, a2, a3);
  if (*(_DWORD *)(v3 + 20 * (int)a2 + 4) <= (int)a3)
    OpenSubdiv::v3_1_1::Far::PatchTable::getPatchIndex();
  return (*(_DWORD *)(v3 + 20 * (int)a2 + 12) + a3);
}

uint64_t OpenSubdiv::v3_1_1::Far::PatchTable::getSharpnessIndices(OpenSubdiv::v3_1_1::Far::PatchTable *this, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  if ((int)(-858993459 * ((unint64_t)(*((_QWORD *)this + 2) - v3) >> 2)) <= (int)a2)
    OpenSubdiv::v3_1_1::Far::PatchTable::getSharpnessIndices((uint64_t)this, a2, a3);
  return *((_QWORD *)this + 28) + 4 * *(int *)(v3 + 20 * (int)a2 + 12);
}

uint64_t OpenSubdiv::v3_1_1::Far::PatchTable::GetPatchArrayDescriptor@<X0>(uint64_t this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _DWORD *a4@<X8>)
{
  uint64_t v4;

  v4 = *(_QWORD *)(this + 8);
  if ((int)(-858993459 * ((unint64_t)(*(_QWORD *)(this + 16) - v4) >> 2)) <= (int)a2)
    OpenSubdiv::v3_1_1::Far::PatchTable::getPatchIndex(this, a2, a3);
  *a4 = *(_DWORD *)(v4 + 20 * (int)a2);
  return this;
}

uint64_t OpenSubdiv::v3_1_1::Far::PatchTable::GetNumPatchArrays(OpenSubdiv::v3_1_1::Far::PatchTable *this)
{
  return -858993459 * ((*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 2);
}

uint64_t OpenSubdiv::v3_1_1::Far::PatchTable::GetNumPatches(OpenSubdiv::v3_1_1::Far::PatchTable *this, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  if ((int)(-858993459 * ((unint64_t)(*((_QWORD *)this + 2) - v3) >> 2)) <= (int)a2)
    OpenSubdiv::v3_1_1::Far::PatchTable::getPatchIndex((uint64_t)this, a2, a3);
  return *(unsigned int *)(v3 + 20 * (int)a2 + 4);
}

uint64_t OpenSubdiv::v3_1_1::Far::PatchTable::GetNumPatchesTotal(OpenSubdiv::v3_1_1::Far::PatchTable *this)
{
  return (*((_QWORD *)this + 8) - *((_QWORD *)this + 7)) >> 3;
}

uint64_t OpenSubdiv::v3_1_1::Far::PatchTable::GetNumControlVertices(OpenSubdiv::v3_1_1::Far::PatchTable *this, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  int v7;

  v3 = *((_QWORD *)this + 1);
  if ((int)(-858993459 * ((unint64_t)(*((_QWORD *)this + 2) - v3) >> 2)) <= (int)a2)
    OpenSubdiv::v3_1_1::Far::PatchTable::getPatchIndex((uint64_t)this, a2, a3);
  v5 = *(_DWORD *)(v3 + 20 * (int)a2);
  v4 = *(_DWORD *)(v3 + 20 * (int)a2 + 4);
  v6 = v5 - 1;
  if (v6 > 8)
    v7 = -1;
  else
    v7 = dword_1DD02D490[v6];
  return (v7 * v4);
}

uint64_t OpenSubdiv::v3_1_1::Far::PatchTable::getPatchArrayVertices(OpenSubdiv::v3_1_1::Far::PatchTable *this, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *((_QWORD *)this + 1);
  if ((int)(-858993459 * ((unint64_t)(*((_QWORD *)this + 2) - v3) >> 2)) <= (int)a2)
    OpenSubdiv::v3_1_1::Far::PatchTable::getSharpnessIndices((uint64_t)this, a2, a3);
  v4 = *(int *)(v3 + 20 * (int)a2 + 8);
  v5 = *((_QWORD *)this + 4);
  if ((int)v4 >= (int)((unint64_t)(*((_QWORD *)this + 5) - v5) >> 2))
    OpenSubdiv::v3_1_1::Far::PatchTable::getPatchArrayVertices();
  return v5 + 4 * v4;
}

uint64_t OpenSubdiv::v3_1_1::Far::PatchTable::GetPatchArrayVertices(OpenSubdiv::v3_1_1::Far::PatchTable *this, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *((_QWORD *)this + 1);
  if ((int)(-858993459 * ((unint64_t)(*((_QWORD *)this + 2) - v3) >> 2)) <= (int)a2)
    OpenSubdiv::v3_1_1::Far::PatchTable::getPatchIndex((uint64_t)this, a2, a3);
  v4 = *(int *)(v3 + 20 * (int)a2 + 8);
  v5 = *((_QWORD *)this + 4);
  if ((int)v4 >= (int)((unint64_t)(*((_QWORD *)this + 5) - v5) >> 2))
    OpenSubdiv::v3_1_1::Far::PatchTable::GetPatchArrayVertices();
  return v5 + 4 * v4;
}

uint64_t OpenSubdiv::v3_1_1::Far::PatchTable::GetPatchVertices(OpenSubdiv::v3_1_1::Far::PatchTable *this, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  int v6;
  uint64_t v7;

  v3 = *((_QWORD *)this + 1);
  if ((int)(-858993459 * ((unint64_t)(*((_QWORD *)this + 2) - v3) >> 2)) <= (int)a2)
    OpenSubdiv::v3_1_1::Far::PatchTable::getPatchIndex((uint64_t)this, a2, a3);
  v4 = *(_DWORD *)(v3 + 20 * (int)a2) - 1;
  if (v4 > 8)
    v5 = -1;
  else
    v5 = dword_1DD02D490[v4];
  v6 = *(_DWORD *)(v3 + 20 * (int)a2 + 8) + v5 * a3;
  v7 = *((_QWORD *)this + 4);
  if (v6 >= (int)((unint64_t)(*((_QWORD *)this + 5) - v7) >> 2))
    OpenSubdiv::v3_1_1::Far::PatchTable::GetPatchVertices();
  return v7 + 4 * v6;
}

uint64_t OpenSubdiv::v3_1_1::Far::PatchTable::getPatchParams(OpenSubdiv::v3_1_1::Far::PatchTable *this, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  if ((int)(-858993459 * ((unint64_t)(*((_QWORD *)this + 2) - v3) >> 2)) <= (int)a2)
    OpenSubdiv::v3_1_1::Far::PatchTable::getSharpnessIndices((uint64_t)this, a2, a3);
  return *((_QWORD *)this + 7) + 8 * *(int *)(v3 + 20 * (int)a2 + 12);
}

uint64_t OpenSubdiv::v3_1_1::Far::PatchTable::GetVaryingPatchDescriptor@<X0>(uint64_t this@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *(_DWORD *)(this + 144);
  return this;
}

uint64_t OpenSubdiv::v3_1_1::Far::PatchTable::GetPatchArrayVaryingVertices(OpenSubdiv::v3_1_1::Far::PatchTable *this, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  int v6;

  v3 = *((_QWORD *)this + 19);
  if (v3 == *((_QWORD *)this + 20))
    return 0;
  v4 = *((_QWORD *)this + 1);
  if ((int)(-858993459 * ((unint64_t)(*((_QWORD *)this + 2) - v4) >> 2)) <= (int)a2)
    OpenSubdiv::v3_1_1::Far::PatchTable::getPatchIndex((uint64_t)this, a2, a3);
  v5 = *((_DWORD *)this + 36) - 1;
  if (v5 > 8)
    v6 = -1;
  else
    v6 = dword_1DD02D490[v5];
  return v3 + 4 * *(_DWORD *)(v4 + 20 * (int)a2 + 12) * v6;
}

uint64_t OpenSubdiv::v3_1_1::Far::PatchTable::populateVaryingVertices(uint64_t this, uint64_t a2, uint64_t a3)
{
  OpenSubdiv::v3_1_1::Far::PatchTable *v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  int v11;
  uint64_t v12;
  int v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  _DWORD *v22;
  _DWORD *v23;

  v3 = (OpenSubdiv::v3_1_1::Far::PatchTable *)this;
  v4 = *(_DWORD *)(this + 144) - 1;
  if (v4 > 8)
    v5 = -1;
  else
    v5 = dword_1DD02D490[v4];
  v6 = *(_QWORD *)(this + 8);
  v7 = *(_QWORD *)(this + 16);
  if ((int)(-858993459 * ((unint64_t)(v7 - v6) >> 2)) >= 1)
  {
    v8 = 0;
    do
    {
      if (v8 >= (int)(-858993459 * ((unint64_t)(v7 - v6) >> 2)))
        OpenSubdiv::v3_1_1::Far::PatchTable::getSharpnessIndices(this, a2, a3);
      v9 = v6 + 20 * v8;
      v11 = *(_DWORD *)(v9 + 4);
      v10 = (_DWORD *)(v9 + 4);
      if (v11 >= 1)
      {
        v12 = 0;
        v13 = *(_DWORD *)(v6 + 20 * v8);
        v14 = (_DWORD *)(v6 + 20 * v8 + 12);
        do
        {
          this = OpenSubdiv::v3_1_1::Far::PatchTable::GetPatchVertices(v3, v8, v12);
          v15 = ((int)v12 + *v14) * (uint64_t)v5;
          switch(v13)
          {
            case 3:
              v16 = *((_QWORD *)v3 + 19);
              v17 = (_DWORD *)(v16 + 4 * (int)v15);
              *v17 = *(_DWORD *)this;
              v17[1] = *(_DWORD *)(this + 4);
              v18 = 3;
              v19 = 2;
              v20 = 2;
              v21 = 3;
              goto LABEL_14;
            case 4:
              v16 = *((_QWORD *)v3 + 19);
              *(_DWORD *)(v16 + 4 * (int)v15) = *(_DWORD *)this;
              v18 = 2;
              v19 = 1;
              v20 = 1;
              v21 = 2;
              goto LABEL_14;
            case 6:
              v16 = *((_QWORD *)v3 + 19);
              v22 = (_DWORD *)(v16 + 4 * (int)v15);
              *v22 = *(_DWORD *)(this + 20);
              v22[1] = *(_DWORD *)(this + 24);
              v21 = 3;
              v20 = 2;
              v19 = 10;
              v18 = 9;
              goto LABEL_14;
            case 9:
              v16 = *((_QWORD *)v3 + 19);
              v23 = (_DWORD *)(v16 + 4 * v15);
              *v23 = *(_DWORD *)this;
              v23[1] = *(_DWORD *)(this + 20);
              v21 = 3;
              v20 = 2;
              v19 = 10;
              v18 = 15;
LABEL_14:
              *(_DWORD *)(v16 + 4 * ((int)v15 + v20)) = *(_DWORD *)(this + 4 * v19);
              *(_DWORD *)(v16 + 4 * ((int)v15 + v21)) = *(_DWORD *)(this + 4 * v18);
              break;
            default:
              break;
          }
          v12 = (v12 + 1);
        }
        while ((int)v12 < *v10);
        v6 = *((_QWORD *)v3 + 1);
        v7 = *((_QWORD *)v3 + 2);
      }
      ++v8;
    }
    while (v8 < (int)(-858993459 * ((unint64_t)(v7 - v6) >> 2)));
  }
  return this;
}

uint64_t OpenSubdiv::v3_1_1::Far::PatchTable::GetNumFVarChannels(OpenSubdiv::v3_1_1::Far::PatchTable *this)
{
  return -1227133513 * ((*((_QWORD *)this + 23) - *((_QWORD *)this + 22)) >> 3);
}

uint64_t OpenSubdiv::v3_1_1::Far::PatchTable::GetFVarPatchDescriptor@<X0>(uint64_t this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _DWORD *a4@<X8>)
{
  uint64_t v4;

  if ((a2 & 0x80000000) != 0
    || (v4 = *(_QWORD *)(this + 176),
        (int)(-1227133513 * ((unint64_t)(*(_QWORD *)(this + 184) - v4) >> 3)) <= (int)a2))
  {
    OpenSubdiv::v3_1_1::Far::PatchTable::GetFVarPatchDescriptor(this, a2, a3);
  }
  *a4 = *(_DWORD *)(v4 + 56 * a2 + 4);
  return this;
}

uint64_t OpenSubdiv::v3_1_1::Far::PatchTable::getFVarValues(OpenSubdiv::v3_1_1::Far::PatchTable *this, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if ((a2 & 0x80000000) != 0
    || (v3 = *((_QWORD *)this + 22),
        (int)(-1227133513 * ((unint64_t)(*((_QWORD *)this + 23) - v3) >> 3)) <= (int)a2))
  {
    OpenSubdiv::v3_1_1::Far::PatchTable::allocateFVarPatchChannelValues((uint64_t)this, a2, a3);
  }
  return *(_QWORD *)(v3 + 56 * a2 + 8);
}

uint64_t OpenSubdiv::v3_1_1::Far::PatchTable::GetPatchArrayFVarValues(OpenSubdiv::v3_1_1::Far::PatchTable *this, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  int v6;

  v3 = *((_QWORD *)this + 1);
  if ((int)(-858993459 * ((unint64_t)(*((_QWORD *)this + 2) - v3) >> 2)) <= (int)a2)
    OpenSubdiv::v3_1_1::Far::PatchTable::getPatchIndex((uint64_t)this, a2, a3);
  if ((a3 & 0x80000000) != 0
    || (v4 = *((_QWORD *)this + 22),
        (int)(-1227133513 * ((unint64_t)(*((_QWORD *)this + 23) - v4) >> 3)) <= (int)a3))
  {
    OpenSubdiv::v3_1_1::Far::PatchTable::GetFVarPatchDescriptor((uint64_t)this, a2, a3);
  }
  v5 = *(_DWORD *)(v4 + 56 * a3 + 4) - 1;
  if (v5 > 8)
    v6 = -1;
  else
    v6 = dword_1DD02D490[v5];
  return *(_QWORD *)(v4 + 56 * a3 + 8) + 4 * *(_DWORD *)(v3 + 20 * (int)a2 + 12) * v6;
}

uint64_t OpenSubdiv::v3_1_1::Far::PatchTable::GetPatchArrayFVarPatchParams(OpenSubdiv::v3_1_1::Far::PatchTable *this, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *((_QWORD *)this + 1);
  if ((int)(-858993459 * ((unint64_t)(*((_QWORD *)this + 2) - v3) >> 2)) <= (int)a2)
    OpenSubdiv::v3_1_1::Far::PatchTable::getPatchIndex((uint64_t)this, a2, a3);
  if ((a3 & 0x80000000) != 0
    || (v4 = *((_QWORD *)this + 22),
        (int)(-1227133513 * ((unint64_t)(*((_QWORD *)this + 23) - v4) >> 3)) <= (int)a3))
  {
    OpenSubdiv::v3_1_1::Far::PatchTable::GetFVarPatchDescriptor((uint64_t)this, a2, a3);
  }
  return *(_QWORD *)(v4 + 56 * a3 + 32) + 8 * *(int *)(v3 + 20 * (int)a2 + 12);
}

uint64_t OpenSubdiv::v3_1_1::Far::PatchTable::getFVarPatchParams(OpenSubdiv::v3_1_1::Far::PatchTable *this, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if ((a2 & 0x80000000) != 0
    || (v3 = *((_QWORD *)this + 22),
        (int)(-1227133513 * ((unint64_t)(*((_QWORD *)this + 23) - v3) >> 3)) <= (int)a2))
  {
    OpenSubdiv::v3_1_1::Far::PatchTable::allocateFVarPatchChannelValues((uint64_t)this, a2, a3);
  }
  return *(_QWORD *)(v3 + 56 * a2 + 32);
}

void std::vector<OpenSubdiv::v3_1_1::Far::PatchTable::FVarPatchChannel>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 7;
        std::allocator<OpenSubdiv::v3_1_1::Far::PatchTable::FVarPatchChannel>::destroy[abi:nn180100]((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<OpenSubdiv::v3_1_1::Far::PatchTable::FVarPatchChannel>::destroy[abi:nn180100](uint64_t a1, _QWORD *a2)
{
  void *v3;
  void *v4;

  v3 = (void *)a2[4];
  if (v3)
  {
    a2[5] = v3;
    operator delete(v3);
  }
  v4 = (void *)a2[1];
  if (v4)
  {
    a2[2] = v4;
    operator delete(v4);
  }
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<OpenSubdiv::v3_1_1::Far::PatchTable::PatchArray>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xCCCCCCCCCCCCCCDLL)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(20 * a2);
}

char *std::vector<OpenSubdiv::v3_1_1::Far::PatchParam>::__init_with_size[abi:nn180100]<OpenSubdiv::v3_1_1::Far::PatchParam*,OpenSubdiv::v3_1_1::Far::PatchParam*>(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<Statement *>::__vallocate[abi:nn180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void std::vector<OpenSubdiv::v3_1_1::Far::PatchTable::FVarPatchChannel>::__append(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  void *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = *(_QWORD *)(a1 + 16);
  v4 = a1 + 16;
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0x6DB6DB6DB6DB6DB7 * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 56 * ((56 * a2 - 56) / 0x38) + 56;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    *(_QWORD *)(a1 + 8) = v7;
  }
  else
  {
    v8 = 0x6DB6DB6DB6DB6DB7 * ((v7 - *(_QWORD *)a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x492492492492492)
      abort();
    v10 = 0x6DB6DB6DB6DB6DB7 * ((v5 - *(_QWORD *)a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x249249249249249)
      v11 = 0x492492492492492;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<OpenSubdiv::v3_1_1::Osd::EvaluatorCacheT<OpenSubdiv::v3_1_1::Osd::MTLComputeEvaluator>::Entry>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[56 * v8];
    v18 = &v12[56 * v11];
    v14 = 56 * ((56 * a2 - 56) / 0x38) + 56;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<OpenSubdiv::v3_1_1::Far::PatchTable::FVarPatchChannel>::__swap_out_circular_buffer((char *)a1, &v15);
    std::__split_buffer<OpenSubdiv::v3_1_1::Far::PatchTable::FVarPatchChannel>::~__split_buffer(&v15);
  }
}

char *std::vector<OpenSubdiv::v3_1_1::Far::PatchTable::FVarPatchChannel>::__swap_out_circular_buffer(char *result, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = (uint64_t *)result;
  v5 = *(_QWORD *)result;
  v4 = *((_QWORD *)result + 1);
  v6 = a2[1];
  if (v4 != *(_QWORD *)result)
  {
    do
    {
      v6 -= 56;
      v4 -= 56;
      result = std::allocator<OpenSubdiv::v3_1_1::Far::PatchTable::FVarPatchChannel>::construct[abi:nn180100]<OpenSubdiv::v3_1_1::Far::PatchTable::FVarPatchChannel,OpenSubdiv::v3_1_1::Far::PatchTable::FVarPatchChannel>((uint64_t)(v3 + 2), v6, v4);
    }
    while (v4 != v5);
  }
  a2[1] = v6;
  v7 = *v3;
  *v3 = v6;
  a2[1] = v7;
  v8 = v3[1];
  v3[1] = a2[2];
  a2[2] = v8;
  v9 = v3[2];
  v3[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

char *std::allocator<OpenSubdiv::v3_1_1::Far::PatchTable::FVarPatchChannel>::construct[abi:nn180100]<OpenSubdiv::v3_1_1::Far::PatchTable::FVarPatchChannel,OpenSubdiv::v3_1_1::Far::PatchTable::FVarPatchChannel>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2;
  *(_QWORD *)a2 = *(_QWORD *)a3;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  std::vector<int>::__init_with_size[abi:nn180100]<int *,int *>((char *)(a2 + 8), *(int **)(a3 + 8), *(int **)(a3 + 16), (uint64_t)(*(_QWORD *)(a3 + 16) - *(_QWORD *)(a3 + 8)) >> 2);
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  v4 += 32;
  *(_QWORD *)(v4 + 16) = 0;
  return std::vector<OpenSubdiv::v3_1_1::Far::PatchParam>::__init_with_size[abi:nn180100]<OpenSubdiv::v3_1_1::Far::PatchParam*,OpenSubdiv::v3_1_1::Far::PatchParam*>((char *)v4, *(uint64_t **)(a3 + 32), *(uint64_t **)(a3 + 40), (uint64_t)(*(_QWORD *)(a3 + 40) - *(_QWORD *)(a3 + 32)) >> 3);
}

void **std::__split_buffer<OpenSubdiv::v3_1_1::Far::PatchTable::FVarPatchChannel>::~__split_buffer(void **a1)
{
  std::__split_buffer<OpenSubdiv::v3_1_1::Far::PatchTable::FVarPatchChannel>::clear[abi:nn180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<OpenSubdiv::v3_1_1::Far::PatchTable::FVarPatchChannel>::clear[abi:nn180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 56;
    std::allocator<OpenSubdiv::v3_1_1::Far::PatchTable::FVarPatchChannel>::destroy[abi:nn180100](v4, (_QWORD *)(i - 56));
  }
}

void OUTLINED_FUNCTION_0_11(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 121, a4);
}

void OUTLINED_FUNCTION_1_6(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 177, a4);
}

void OUTLINED_FUNCTION_2_5(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 116, a4);
}

void OUTLINED_FUNCTION_3_9(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 172, a4);
}

void OpenSubdiv::v3_1_1::Far::PatchTable::allocateFVarPatchChannelValues(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_3_9("getFVarPatchChannel", "patchTable.cpp", a3, "channel>=0 && channel<(int)_fvarChannels.size()");
}

void OpenSubdiv::v3_1_1::Far::PatchTable::getPatchIndex()
{
  __assert_rtn("getPatchIndex", "patchTable.cpp", 228, "patchIndex<pa.numPatches");
}

void OpenSubdiv::v3_1_1::Far::PatchTable::getPatchIndex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_0_11("getPatchArray", "patchTable.cpp", a3, "arrayIndex<(Index)GetNumPatchArrays()");
}

void OpenSubdiv::v3_1_1::Far::PatchTable::getSharpnessIndices(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_2_5("getPatchArray", "patchTable.cpp", a3, "arrayIndex<(Index)GetNumPatchArrays()");
}

void OpenSubdiv::v3_1_1::Far::PatchTable::getPatchArrayVertices()
{
  __assert_rtn("getPatchArrayVertices", "patchTable.cpp", 282, "pa.vertIndex<(Index)_patchVerts.size()");
}

void OpenSubdiv::v3_1_1::Far::PatchTable::GetPatchArrayVertices()
{
  __assert_rtn("GetPatchArrayVertices", "patchTable.cpp", 289, "pa.vertIndex<(Index)_patchVerts.size()");
}

void OpenSubdiv::v3_1_1::Far::PatchTable::GetPatchVertices()
{
  __assert_rtn("GetPatchVertices", "patchTable.cpp", 303, "(pa.vertIndex + patchIndex*size)<(Index)_patchVerts.size()");
}

void OpenSubdiv::v3_1_1::Far::PatchTable::GetFVarPatchDescriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_1_6("getFVarPatchChannel", "patchTable.cpp", a3, "channel>=0 && channel<(int)_fvarChannels.size()");
}

uint64_t OpenSubdiv::v3_1_1::Far::TopologyRefinerFactoryBase::prepareComponentTopologySizing(OpenSubdiv::v3_1_1::Far::TopologyRefinerFactoryBase *this, OpenSubdiv::v3_1_1::Far::TopologyRefiner *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  std::vector<unsigned int> **v8;
  std::vector<unsigned int> *v9;
  int end;
  int begin;
  const char *v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  std::vector<unsigned int>::size_type v16;
  int begin_high;
  unsigned int *v19;
  std::vector<unsigned int>::size_type v20;
  int v21;
  unint64_t v22;
  std::vector<unsigned int>::size_type v23;
  std::vector<unsigned int>::size_type v24;
  char v25;

  v8 = (std::vector<unsigned int> **)*((_QWORD *)this + 5);
  v9 = *v8;
  end = (int)(*v8)->__end_;
  if (!end)
  {
    v12 = "Failure in TopologyRefinerFactory<>::Create() -- mesh contains no vertices.";
LABEL_12:
    OpenSubdiv::v3_1_1::Far::Error(4, (uint64_t)v12, a3, a4, a5, a6, a7, a8, v25);
    return 0;
  }
  begin = (int)v9->__begin_;
  if (!LODWORD(v9->__begin_))
  {
    v12 = "Failure in TopologyRefinerFactory<>::Create() -- meshes without faces not yet supported.";
    goto LABEL_12;
  }
  if (SHIDWORD(v9->__end_cap_.__value_) >= 0x10000)
  {
    OpenSubdiv::v3_1_1::Far::Error(4, (uint64_t)"Failure in TopologyRefinerFactory<>::Create() -- face with %d vertices > %d max.", a3, a4, a5, a6, a7, a8, HIDWORD(v9->__end_cap_.__value_));
    return 0;
  }
  v13 = &v9[1].__begin_[2 * begin - 2];
  v15 = (int)*v13;
  v14 = (int)v13[1];
  v16 = v14 + v15;
  if (!((_DWORD)v14 + (_DWORD)v15))
  {
    v12 = "Failure in TopologyRefinerFactory<>::Create() -- mesh contains no face-vertices.";
    goto LABEL_12;
  }
  if (*(_DWORD *)this == 2 && (_DWORD)v16 != 3 * begin)
  {
    v12 = "Failure in TopologyRefinerFactory<>::Create() -- non-triangular faces not supported by Loop scheme.";
    goto LABEL_12;
  }
  std::vector<int>::resize(v9 + 2, v16);
  begin_high = HIDWORD(v9->__begin_);
  if (begin_high >= 1)
  {
    std::vector<int>::resize(v9 + 3, (int)(v9[2].__end_ - v9[2].__begin_));
    std::vector<int>::resize(v9 + 5, 2 * SHIDWORD(v9->__begin_));
    v19 = &v9[6].__begin_[2 * begin_high - 2];
    v20 = (int)v19[1] + (uint64_t)(int)*v19;
    std::vector<int>::resize(v9 + 7, v20);
    std::vector<unsigned short>::resize((uint64_t)&v9[8], v20);
    v21 = 2 * end - 2;
    v22 = (8 * ((unint64_t)v21 >> 1)) | 4;
    v23 = *(int *)((char *)v9[11].__begin_ + v22) + (uint64_t)(int)v9[11].__begin_[v21];
    std::vector<int>::resize(v9 + 12, v23);
    std::vector<unsigned short>::resize((uint64_t)&v9[13], v23);
    v24 = *(int *)((char *)v9[14].__begin_ + v22) + (uint64_t)(int)v9[14].__begin_[v21];
    std::vector<int>::resize(v9 + 15, v24);
    std::vector<unsigned short>::resize((uint64_t)&v9[16], v24);
    if ((int)((unint64_t)((char *)v9[3].__end_ - (char *)v9[3].__begin_) >> 2) <= 0)
      OpenSubdiv::v3_1_1::Far::TopologyRefinerFactoryBase::prepareComponentTopologySizing();
    if ((int)((unint64_t)((char *)v9[5].__end_ - (char *)v9[5].__begin_) >> 2) <= 0)
      OpenSubdiv::v3_1_1::Far::TopologyRefinerFactoryBase::prepareComponentTopologySizing();
    if ((int)((unint64_t)((char *)v9[7].__end_ - (char *)v9[7].__begin_) >> 2) <= 0)
      OpenSubdiv::v3_1_1::Far::TopologyRefinerFactoryBase::prepareComponentTopologySizing();
    if ((int)((unint64_t)((char *)v9[12].__end_ - (char *)v9[12].__begin_) >> 2) <= 0)
      OpenSubdiv::v3_1_1::Far::TopologyRefinerFactoryBase::prepareComponentTopologySizing();
    if ((int)((unint64_t)((char *)v9[15].__end_ - (char *)v9[15].__begin_) >> 2) <= 0)
      OpenSubdiv::v3_1_1::Far::TopologyRefinerFactoryBase::prepareComponentTopologySizing();
  }
  return 1;
}

uint64_t OpenSubdiv::v3_1_1::Far::TopologyRefinerFactoryBase::prepareComponentTopologyAssignment(OpenSubdiv::v3_1_1::Far::TopologyRefiner *this, int a2, void (*a3)(uint64_t, char *, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OpenSubdiv::v3_1_1::Vtr::internal::Level **v12;
  OpenSubdiv::v3_1_1::Vtr::internal::Level *v13;
  int v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v23;

  v12 = (OpenSubdiv::v3_1_1::Vtr::internal::Level **)*((_QWORD *)this + 5);
  v13 = *v12;
  v14 = *((_DWORD *)*v12 + 1);
  if (v14)
  {
    if (!*((_DWORD *)v13 + 5))
    {
      v15 = "Failure in TopologyRefinerFactory<>::Create() -- maximum valence not assigned.";
LABEL_12:
      OpenSubdiv::v3_1_1::Far::Error(4, (uint64_t)v15, (uint64_t)a3, a4, a5, a6, a7, a8, v23);
      return 0;
    }
LABEL_5:
    if (!a2 || OpenSubdiv::v3_1_1::Vtr::internal::Level::validateTopology(v13, a3, a4))
    {
      OpenSubdiv::v3_1_1::Far::TopologyRefiner::initializeInventory(this);
      return 1;
    }
    if (v14)
      v15 = "Failure in TopologyRefinerFactory<>::Create() -- invalid topology detected as fully specified.";
    else
      v15 = "Failure in TopologyRefinerFactory<>::Create() -- invalid topology detected from partial specification.";
    goto LABEL_12;
  }
  if (OpenSubdiv::v3_1_1::Vtr::internal::Level::completeTopologyFromFaceVertices(*v12))
    goto LABEL_5;
  OpenSubdiv::v3_1_1::Far::Error(4, (uint64_t)"Failure in TopologyRefinerFactory<>::Create() -- vertex with valence %d > %d max.", v16, v17, v18, v19, v20, v21, *((_DWORD *)v13 + 5));
  return 0;
}

uint64_t OpenSubdiv::v3_1_1::Far::TopologyRefinerFactoryBase::prepareComponentTagsAndSharpness(OpenSubdiv::v3_1_1::Far::TopologyRefinerFactoryBase *this, OpenSubdiv::v3_1_1::Far::TopologyRefiner *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char v9;
  char v10;
  int v11;
  float v13;
  char v14;
  char v16;
  int RegularVertexValence;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  __int16 v37;
  float v38;
  __int16 v40;
  char v41;
  __int16 v42;
  __int16 v43;
  int v44;
  __int16 v45;
  __int16 v46;
  __int16 v47;
  __int16 v48;
  float v49;
  int v50;
  int v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  unsigned int v55;
  int *v56;
  uint64_t v57;
  int v59;
  int v60;
  int v61;
  int *v62;
  _BOOL4 v63;
  uint64_t v64;
  uint64_t v65;
  int v66;

  v3 = **((_QWORD **)this + 5);
  v66 = *((_DWORD *)this + 1);
  v59 = v66 & 3;
  v63 = (v66 & 3) == 0
     && (int)OpenSubdiv::v3_1_1::Sdc::SchemeTypeTraits::GetLocalNeighborhoodSize((OpenSubdiv::v3_1_1::Sdc *)*(unsigned int *)this) > 0;
  if (*(int *)(v3 + 4) >= 1)
  {
    v4 = 0;
    v5 = 0;
    do
    {
      v6 = *(_QWORD *)(v3 + 240);
      v7 = *(_QWORD *)(v3 + 216);
      v8 = *(_DWORD *)(*(_QWORD *)(v3 + 144) + v4) < 2;
      v9 = *(_BYTE *)(v6 + v5);
      v10 = v9 & 0xFD | (2 * v8);
      *(_BYTE *)(v6 + v5) = v10;
      v11 = v9 & 1;
      if (!v8 && v11 == 0)
      {
        v13 = *(float *)(v7 + 4 * v5);
      }
      else
      {
        *(_DWORD *)(v7 + 4 * v5) = 1092616192;
        v10 = *(_BYTE *)(v6 + v5);
        v13 = 10.0;
      }
      v14 = v10 & 0xFB | (4 * (v13 >= 10.0));
      *(_BYTE *)(v6 + v5) = v14;
      if (v13 < 10.0 && *(float *)(v7 + 4 * v5) > 0.0)
        v16 = 8;
      else
        v16 = 0;
      *(_BYTE *)(v6 + v5++) = v16 | v14 & 0xF7;
      v4 += 8;
    }
    while (v5 < *(int *)(v3 + 4));
  }
  RegularVertexValence = OpenSubdiv::v3_1_1::Sdc::SchemeTypeTraits::GetRegularVertexValence((OpenSubdiv::v3_1_1::Sdc *)*(unsigned int *)this);
  if (RegularVertexValence >= 0)
    v18 = RegularVertexValence;
  else
    v18 = RegularVertexValence + 1;
  if (*(int *)(v3 + 8) >= 1)
  {
    v19 = 0;
    v60 = v18 >> 1;
    v61 = RegularVertexValence;
    while (1)
    {
      v20 = *(_QWORD *)(v3 + 336);
      v21 = (8 * v19) | 4;
      v22 = *(_QWORD *)(v3 + 360) + 4 * *(int *)(v20 + v21);
      v23 = *(unsigned int *)(v20 + 8 * v19);
      if ((int)v23 < 1)
      {
        v27 = 0;
        v26 = 0;
        v25 = 0;
        v24 = 0;
      }
      else
      {
        v24 = 0;
        v25 = 0;
        v26 = 0;
        v27 = 0;
        v28 = v23;
        v29 = (int *)v22;
        do
        {
          v30 = *v29++;
          v31 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 240) + v30);
          v27 += (v31 >> 1) & 1;
          v26 += (v31 >> 2) & 1;
          v25 += (v31 >> 3) & 1;
          v24 += v31 & 1;
          --v28;
        }
        while (v28);
      }
      v32 = *(_QWORD *)(v3 + 432);
      v33 = *(_QWORD *)(v3 + 408);
      v34 = *(_QWORD *)(v3 + 264);
      v35 = *(unsigned int *)(v34 + 8 * v19);
      v62 = (int *)v22;
      v64 = *(int *)(v34 + v21);
      v65 = *(_QWORD *)(v3 + 288);
      if ((_DWORD)v35 != 1)
        break;
      v36 = (_DWORD)v23 == 2;
      if (v59 != 2 || (_DWORD)v23 != 2)
        goto LABEL_34;
      v36 = 1;
LABEL_38:
      *(_DWORD *)(v33 + 4 * v19) = 1092616192;
LABEL_39:
      v37 = *(_WORD *)(v32 + 2 * v19) & 0xFFEF | (16 * (*(float *)(v33 + 4 * v19) >= 10.0));
      *(_WORD *)(v32 + 2 * v19) = v37;
      v38 = *(float *)(v33 + 4 * v19);
      if (v38 < 10.0 && v38 > 0.0)
        v40 = 32;
      else
        v40 = 0;
      *(_WORD *)(v32 + 2 * v19) = v37 & 0xFF9F | ((v25 != 0) << 6) | v40;
      v41 = OpenSubdiv::v3_1_1::Sdc::Crease::DetermineVertexVertexRule((OpenSubdiv::v3_1_1::Sdc::Crease *)&v66, *(float *)(v33 + 4 * v19), v25 + v26);
      v42 = *(_WORD *)(v32 + 2 * v19);
      v43 = v42 & 0xF871;
      v44 = *(_DWORD *)&v36 & ((v42 & 0x10) >> 4);
      if (v44)
        v45 = 8;
      else
        v45 = 0;
      v46 = (v43 | (4 * (v27 != 0))) & 0xF87F | ((v41 & 0xF) << 7) | v45;
      v47 = v46 | (2 * ((_DWORD)v35 != v61));
      if (v27)
        v47 = v46 | (2 * ((_DWORD)v35 != v60));
      if ((v44 & 1) != 0)
        v48 = v46;
      else
        v48 = v47;
      *(_WORD *)(v32 + 2 * v19) = v48 & 0x87FF | ((v26 != 0) << 12) | (((v26 | v48 & 0x10) != 0) << 14);
      if (!v26)
        goto LABEL_70;
      v49 = *(float *)(v33 + 4 * v19);
      if ((v48 & 0x10) == 0)
        v49 = 0.0;
      v50 = OpenSubdiv::v3_1_1::Sdc::Crease::DetermineVertexVertexRule((OpenSubdiv::v3_1_1::Sdc::Crease *)&v66, v49, v26);
      if (v50 == 8)
      {
        if (v26 != (_DWORD)v23)
          goto LABEL_70;
        v52 = *(_WORD *)(v32 + 2 * v19);
        if ((int)v23 <= 2 && (v52 & 0x10) == 0)
          goto LABEL_70;
      }
      else
      {
        if (v50 != 4)
          goto LABEL_70;
        v51 = *(unsigned __int16 *)(v32 + 2 * v19);
        v52 = v51 | 0x2000;
        *(_WORD *)(v32 + 2 * v19) = v51 | 0x2000;
        if ((v51 & 3) != 0)
          goto LABEL_70;
        if ((v51 & 4) == 0)
        {
          if (v61 == 4)
          {
            v55 = v51 & 0xFFFF9FFF | 0x2000 | ((((*(unsigned __int8 *)(*(_QWORD *)(v3 + 240) + v62[2]) ^ *(unsigned __int8 *)(*(_QWORD *)(v3 + 240) + *v62)) >> 2) & 1) << 14);
          }
          else
          {
            if (v61 != 6)
              OpenSubdiv::v3_1_1::Far::TopologyRefinerFactoryBase::prepareComponentTagsAndSharpness();
            v53 = *(_QWORD *)(v3 + 240);
            if (((*(unsigned __int8 *)(v53 + v62[3]) ^ *(unsigned __int8 *)(v53 + *v62)) & 4) != 0
              || ((*(unsigned __int8 *)(v53 + v62[4]) ^ *(unsigned __int8 *)(v53 + v62[1])) & 4) != 0)
            {
              v54 = 0x4000;
            }
            else
            {
              v54 = 0;
            }
            LOWORD(v55) = v54 | v52 & 0xBFFF;
          }
          goto LABEL_69;
        }
      }
      LOWORD(v55) = v52 & 0xBFFF;
LABEL_69:
      *(_WORD *)(v32 + 2 * v19) = v55;
LABEL_70:
      if (v63 && (*(_WORD *)(v32 + 2 * v19) & 4) != 0 && (int)v35 >= 1)
      {
        v56 = (int *)(v65 + 4 * v64);
        do
        {
          v57 = *v56++;
          *(_BYTE *)(*(_QWORD *)(v3 + 96) + v57) |= 1u;
          *((_BYTE *)this + 8) |= 2u;
          --v35;
        }
        while (v35);
      }
      if (++v19 >= *(int *)(v3 + 8))
        return 1;
    }
    v36 = 0;
LABEL_34:
    if ((*(_WORD *)(v32 + 2 * v19) & 1) == 0 || v24 == 2 && !v27 && (int)v35 > (int)v23)
      goto LABEL_39;
    goto LABEL_38;
  }
  return 1;
}

uint64_t OpenSubdiv::v3_1_1::Far::TopologyRefinerFactoryBase::prepareFaceVaryingChannels(OpenSubdiv::v3_1_1::Far::TopologyRefinerFactoryBase *this, OpenSubdiv::v3_1_1::Far::TopologyRefiner *a2)
{
  OpenSubdiv::v3_1_1::Vtr::internal::Level *v3;
  int RegularVertexValence;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = (OpenSubdiv::v3_1_1::Vtr::internal::Level *)**((_QWORD **)this + 5);
  RegularVertexValence = OpenSubdiv::v3_1_1::Sdc::SchemeTypeTraits::GetRegularVertexValence((OpenSubdiv::v3_1_1::Sdc *)*(unsigned int *)this);
  if (RegularVertexValence >= 0)
    v5 = RegularVertexValence;
  else
    v5 = RegularVertexValence + 1;
  if ((int)((*(_QWORD *)(**((_QWORD **)this + 5) + 464) - *(_QWORD *)(**((_QWORD **)this + 5) + 456)) >> 3) < 1)
    return 1;
  v6 = 0;
  v7 = v5 >> 1;
  while (OpenSubdiv::v3_1_1::Vtr::internal::Level::getNumFVarValues(v3, v6))
  {
    OpenSubdiv::v3_1_1::Vtr::internal::Level::completeFVarChannelTopology(v3, v6++, v7);
    if (v6 >= (int)((*(_QWORD *)(**((_QWORD **)this + 5) + 464) - *(_QWORD *)(**((_QWORD **)this + 5) + 456)) >> 3))
      return 1;
  }
  OpenSubdiv::v3_1_1::Far::Error(4, (uint64_t)"Failure in TopologyRefinerFactory<>::Create() -- face-varying channel %d has no values.", v8, v9, v10, v11, v12, v13, v6);
  return 0;
}

void OpenSubdiv::v3_1_1::Far::TopologyRefinerFactoryBase::prepareComponentTopologySizing()
{
  __assert_rtn("prepareComponentTopologySizing", "topologyRefinerFactory.cpp", 109, "baseLevel.getNumFaceEdgesTotal() > 0");
}

{
  __assert_rtn("prepareComponentTopologySizing", "topologyRefinerFactory.cpp", 110, "baseLevel.getNumEdgeVerticesTotal() > 0");
}

{
  __assert_rtn("prepareComponentTopologySizing", "topologyRefinerFactory.cpp", 111, "baseLevel.getNumEdgeFacesTotal() > 0");
}

{
  __assert_rtn("prepareComponentTopologySizing", "topologyRefinerFactory.cpp", 112, "baseLevel.getNumVertexFacesTotal() > 0");
}

{
  __assert_rtn("prepareComponentTopologySizing", "topologyRefinerFactory.cpp", 113, "baseLevel.getNumVertexEdgesTotal() > 0");
}

void OpenSubdiv::v3_1_1::Far::TopologyRefinerFactoryBase::prepareComponentTagsAndSharpness()
{
  __assert_rtn("prepareComponentTagsAndSharpness", "topologyRefinerFactory.cpp", 291, "(schemeRegularInteriorValence == 4) || (schemeRegularInteriorValence == 6)");
}

void OpenSubdiv::v3_1_1::Far::PtexIndices::initializePtexIndices(std::vector<unsigned int> *a1, unsigned int *a2)
{
  int RegularFaceSize;
  unsigned int **v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  std::vector<unsigned int>::pointer begin;
  unsigned int v10;
  int *v11;
  uint64_t v12;
  std::vector<unsigned int>::pointer v13;
  int v14;
  int v15;

  RegularFaceSize = OpenSubdiv::v3_1_1::Sdc::SchemeTypeTraits::GetRegularFaceSize((OpenSubdiv::v3_1_1::Sdc *)*a2);
  v5 = (unsigned int **)*((_QWORD *)a2 + 5);
  v6 = *v5;
  v7 = (int)**v5;
  v8 = **v5;
  std::vector<int>::resize(a1, v7 + 1);
  begin = a1->__begin_;
  if ((int)v7 < 1)
  {
    v10 = 0;
  }
  else
  {
    v10 = 0;
    v11 = (int *)*((_QWORD *)v6 + 3);
    v12 = v8;
    v13 = a1->__begin_;
    do
    {
      *v13++ = v10;
      v15 = *v11;
      v11 += 2;
      v14 = v15;
      if (v15 == RegularFaceSize)
        v14 = 1;
      v10 += v14;
      --v12;
    }
    while (v12);
  }
  begin[(int)v8] = v10;
}

std::vector<unsigned int> *OpenSubdiv::v3_1_1::Far::PtexIndices::PtexIndices(std::vector<unsigned int> *a1, unsigned int *a2)
{
  a1->__begin_ = 0;
  a1->__end_ = 0;
  a1->__end_cap_.__value_ = 0;
  OpenSubdiv::v3_1_1::Far::PtexIndices::initializePtexIndices(a1, a2);
  return a1;
}

void OpenSubdiv::v3_1_1::Far::PtexIndices::~PtexIndices(OpenSubdiv::v3_1_1::Far::PtexIndices *this)
{
  void *v2;

  v2 = *(void **)this;
  if (v2)
  {
    *((_QWORD *)this + 1) = v2;
    operator delete(v2);
  }
}

uint64_t OpenSubdiv::v3_1_1::Far::PtexIndices::GetNumFaces(OpenSubdiv::v3_1_1::Far::PtexIndices *this)
{
  return *(unsigned int *)(*((_QWORD *)this + 1) - 4);
}

uint64_t OpenSubdiv::v3_1_1::Far::PtexIndices::GetFaceId(OpenSubdiv::v3_1_1::Far::PtexIndices *this, int a2)
{
  if ((int)((*((_QWORD *)this + 1) - *(_QWORD *)this) >> 2) <= a2)
    OpenSubdiv::v3_1_1::Far::PtexIndices::GetFaceId();
  return *(unsigned int *)(*(_QWORD *)this + 4 * a2);
}

uint64_t OpenSubdiv::v3_1_1::Vtr::ConstArray<int>::FindIndexIn4Tuple(uint64_t a1, int a2)
{
  _DWORD *v2;

  if (*(int *)(a1 + 8) <= 3)
    OpenSubdiv::v3_1_1::Vtr::ConstArray<int>::FindIndexIn4Tuple();
  v2 = *(_DWORD **)a1;
  if (**(_DWORD **)a1 == a2)
    return 0;
  if (v2[1] == a2)
    return 1;
  if (v2[2] == a2)
    return 2;
  if (v2[3] != a2)
    OpenSubdiv::v3_1_1::Vtr::ConstArray<int>::FindIndexIn4Tuple();
  return 3;
}

void OpenSubdiv::v3_1_1::Far::PtexIndices::GetFaceId()
{
  __assert_rtn("GetFaceId", "ptexIndices.cpp", 73, "f<(int)_ptexIndices.size()");
}

void OpenSubdiv::v3_1_1::Vtr::ConstArray<int>::FindIndexIn4Tuple()
{
  __assert_rtn("FindIndexIn4Tuple", "array.h", 81, "_size>=4");
}

{
  __assert_rtn("FindIndexIn4Tuple", "array.h", 86, "\"FindIndexIn4Tuple() did not find expected value!\" == 0");
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void OpenSubdiv::v3_1_1::Osd::MTLPatchTable::~MTLPatchTable(id *this)
{
  id *v2;
  id *v3;
  id *v4;
  id *v5;
  id v6;
  id v7;
  id v8;
  void **v9;

  v2 = (id *)this[12];
  v3 = (id *)this[13];
  while (v2 != v3)

  v4 = (id *)this[15];
  v5 = (id *)this[16];
  if (v4 != v5)
  {
    do

    while (v4 != v5);
    v4 = (id *)this[15];
  }
  if (v4)
  {
    this[16] = v4;
    operator delete(v4);
  }
  v6 = this[12];
  if (v6)
  {
    this[13] = v6;
    operator delete(v6);
  }
  v9 = this + 9;
  std::vector<std::vector<CFRange>>::__destroy_vector::operator()[abi:nn180100](&v9);
  v7 = this[5];
  if (v7)
  {
    this[6] = v7;
    operator delete(v7);
  }
  v8 = *this;
  if (*this)
  {
    this[1] = v8;
    operator delete(v8);
  }
}

void sub_1DCFA85E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  v12 = *(void **)(v10 + 120);
  if (v12)
  {
    *(_QWORD *)(v10 + 128) = v12;
    operator delete(v12);
  }
  v13 = *(void **)(v10 + 96);
  if (v13)
  {
    *(_QWORD *)(v10 + 104) = v13;
    operator delete(v13);
  }
  a10 = (void **)(v10 + 72);
  std::vector<std::vector<CFRange>>::__destroy_vector::operator()[abi:nn180100](&a10);
  v14 = *(void **)(v10 + 40);
  if (v14)
  {
    *(_QWORD *)(v10 + 48) = v14;
    operator delete(v14);
  }
  v15 = *(void **)v10;
  if (*(_QWORD *)v10)
  {
    *(_QWORD *)(v10 + 8) = v15;
    operator delete(v15);
  }
  _Unwind_Resume(a1);
}

OpenSubdiv::v3_1_1::Osd::MTLPatchTable *OpenSubdiv::v3_1_1::Osd::MTLPatchTable::Create(OpenSubdiv::v3_1_1::Osd::MTLPatchTable *this, MTLContext *a2, MTLContext *a3)
{
  OpenSubdiv::v3_1_1::Osd::MTLPatchTable *v5;

  v5 = (OpenSubdiv::v3_1_1::Osd::MTLPatchTable *)operator new();
  *(_OWORD *)v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  *((_OWORD *)v5 + 2) = 0u;
  *((_OWORD *)v5 + 3) = 0u;
  *((_OWORD *)v5 + 4) = 0u;
  *((_OWORD *)v5 + 5) = 0u;
  *((_OWORD *)v5 + 6) = 0u;
  *((_OWORD *)v5 + 7) = 0u;
  *((_OWORD *)v5 + 8) = 0u;
  if (!OpenSubdiv::v3_1_1::Osd::MTLPatchTable::allocate(v5, this, a2))
  {
    OpenSubdiv::v3_1_1::Osd::MTLPatchTable::~MTLPatchTable(v5);
    OpenSubdiv::v3_1_1::Osd::MTLPatchTable::Create((uint64_t)v5);
  }
  return v5;
}

void sub_1DCFA86C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0D41C0](v1, 0xA0C4074858A82);
  _Unwind_Resume(a1);
}

uint64_t OpenSubdiv::v3_1_1::Osd::MTLPatchTable::allocate(OpenSubdiv::v3_1_1::Osd::MTLPatchTable *this, const OpenSubdiv::v3_1_1::Far::PatchTable *a2, MTLContext *a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v26;
  __int128 *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 *v32;
  __int128 *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  OpenSubdiv::v3_1_1::Osd::CpuPatchTable::CpuPatchTable((OpenSubdiv::v3_1_1::Osd::CpuPatchTable *)&v26, a2);
  v5 = v27 - v26;
  v7 = v28;
  v6 = v29;
  v9 = v30;
  v8 = v31;
  std::vector<OpenSubdiv::v3_1_1::Osd::PatchArray>::__assign_with_size[abi:nn180100]<OpenSubdiv::v3_1_1::Osd::PatchArray const*,OpenSubdiv::v3_1_1::Osd::PatchArray const*>(this, v26, v27, v5);
  if (v6 == v7)
  {
    v15 = (char *)this + 24;
LABEL_14:
    v14 = 0;
    *(_QWORD *)v15 = 0;
    goto LABEL_15;
  }
  v10 = (void *)objc_msgSend(a3->var0, "newBufferWithBytes:length:options:", v28, v6 - v7, 0);
  *((_QWORD *)this + 3) = v10;
  if (!v10)
    goto LABEL_11;
  objc_msgSend(v10, "setLabel:", CFSTR("OSD PatchIndexBuffer"));
  if (v8 == v9)
  {
    v15 = (char *)this + 32;
    goto LABEL_14;
  }
  v11 = (void *)objc_msgSend(a3->var0, "newBufferWithBytes:length:options:", v30, v8 - v9, 0);
  *((_QWORD *)this + 4) = v11;
  if (v11)
  {
    objc_msgSend(v11, "setLabel:", CFSTR("OSD PatchParamBuffer"));
    if (v32 == v33)
      v12 = 0;
    else
      v12 = v32;
    std::vector<OpenSubdiv::v3_1_1::Osd::PatchArray>::__assign_with_size[abi:nn180100]<OpenSubdiv::v3_1_1::Osd::PatchArray const*,OpenSubdiv::v3_1_1::Osd::PatchArray const*>((_QWORD *)this + 5, v12, &v12[v5], v5);
    if (v35 == v34)
    {
      *((_QWORD *)this + 8) = 0;
    }
    else
    {
      v13 = objc_msgSend(a3->var0, "newBufferWithBytes:length:options:", v34, v35 - v34, 0);
      *((_QWORD *)this + 8) = v13;
      if (!v13 && v35 != v34)
        goto LABEL_11;
    }
    v17 = -1431655765 * ((v37 - v36) >> 3);
    v18 = (_QWORD *)((char *)this + 72);
    std::vector<std::vector<int>>::resize((_QWORD *)this + 9, v17);
    v19 = (_QWORD *)((char *)this + 96);
    std::vector<ClippedCorner>::resize((uint64_t)this + 96, v17);
    v20 = (_QWORD *)((char *)this + 120);
    std::vector<ClippedCorner>::resize((uint64_t)v20, v17);
    if (v17 < 1)
    {
      v14 = 1;
      goto LABEL_15;
    }
    v21 = 0;
    v22 = 8 * v17;
    v23 = 8;
    v14 = 1;
    while (1)
    {
      std::vector<OpenSubdiv::v3_1_1::Osd::PatchArray>::__assign_with_size[abi:nn180100]<OpenSubdiv::v3_1_1::Osd::PatchArray const*,OpenSubdiv::v3_1_1::Osd::PatchArray const*>((_QWORD *)(*v18 + v23 - 8), *(__int128 **)(v36 + v23 - 8), (__int128 *)(*(_QWORD *)(v36 + v23 - 8) + 16 * v5), v5);
      v24 = *(_QWORD *)(v38 + v23) == *(_QWORD *)(v38 + v23 - 8)
          ? 0
          : objc_msgSend(a3->var0, "newBufferWithBytes:length:options:");
      *(_QWORD *)(*v19 + v21) = v24;
      if (!*(_QWORD *)(*v19 + v21))
        break;
      v25 = *(_QWORD *)(v39 + v23) == *(_QWORD *)(v39 + v23 - 8)
          ? 0
          : objc_msgSend(a3->var0, "newBufferWithBytes:length:options:");
      *(_QWORD *)(*v20 + v21) = v25;
      if (!*(_QWORD *)(*v20 + v21))
        break;
      v23 += 24;
      v21 += 8;
      if (v22 == v21)
        goto LABEL_15;
    }
  }
LABEL_11:
  v14 = 0;
LABEL_15:
  OpenSubdiv::v3_1_1::Osd::CpuPatchTable::~CpuPatchTable((OpenSubdiv::v3_1_1::Osd::CpuPatchTable *)&v26);
  return v14;
}

void sub_1DCFA8950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  OpenSubdiv::v3_1_1::Osd::CpuPatchTable::~CpuPatchTable((OpenSubdiv::v3_1_1::Osd::CpuPatchTable *)&a9);
  _Unwind_Resume(a1);
}

_OWORD *std::vector<OpenSubdiv::v3_1_1::Osd::PatchArray>::__assign_with_size[abi:nn180100]<OpenSubdiv::v3_1_1::Osd::PatchArray const*,OpenSubdiv::v3_1_1::Osd::PatchArray const*>(_QWORD *a1, __int128 *a2, __int128 *a3, unint64_t a4)
{
  __int128 *v6;
  uint64_t v8;
  _OWORD *result;
  uint64_t v10;
  unint64_t v11;
  _OWORD **v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  unint64_t v18;
  __int128 *v19;
  uint64_t v20;
  __int128 v21;
  char *v22;
  _OWORD *v23;
  uint64_t v24;
  int64_t v25;
  _OWORD *v26;
  __int128 v27;

  v6 = a2;
  v8 = a1[2];
  result = (_OWORD *)*a1;
  if (a4 > (v8 - (uint64_t)result) >> 4)
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 60)
      abort();
    v10 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE11__vallocateB8nn180100Em(a1, v11);
    v13 = (_OWORD *)a1[1];
    v12 = (_OWORD **)(a1 + 1);
    result = v13;
    v14 = v13;
    if (v6 != a3)
    {
      v14 = result;
      do
      {
        *(_DWORD *)v14 = *(_DWORD *)v6;
        v15 = *(_QWORD *)((char *)v6 + 4);
        *((_DWORD *)v14 + 3) = *((_DWORD *)v6 + 3);
        *(_QWORD *)((char *)v14++ + 4) = v15;
        ++v6;
      }
      while (v6 != a3);
    }
LABEL_26:
    v25 = (char *)v14 - (char *)result;
    goto LABEL_27;
  }
  v17 = (_OWORD *)a1[1];
  v12 = (_OWORD **)(a1 + 1);
  v16 = v17;
  v18 = v17 - result;
  if (v18 >= a4)
  {
    v14 = result;
    if (a2 != a3)
    {
      v26 = result;
      do
      {
        v27 = *v6++;
        *v26++ = v27;
        ++v14;
      }
      while (v6 != a3);
    }
    goto LABEL_26;
  }
  v19 = &a2[v18];
  if (v16 != result)
  {
    v20 = 16 * v18;
    do
    {
      v21 = *v6++;
      *result++ = v21;
      v20 -= 16;
    }
    while (v20);
    result = *v12;
  }
  v22 = (char *)result;
  if (v19 != a3)
  {
    v22 = (char *)result;
    v23 = result;
    do
    {
      *(_DWORD *)v23 = *(_DWORD *)v19;
      v24 = *(_QWORD *)((char *)v19 + 4);
      *((_DWORD *)v23 + 3) = *((_DWORD *)v19 + 3);
      *(_QWORD *)((char *)v23 + 4) = v24;
      v22 += 16;
      ++v19;
      ++v23;
    }
    while (v19 != a3);
  }
  v25 = v22 - (char *)result;
LABEL_27:
  *v12 = (_OWORD *)((char *)result + v25);
  return result;
}

void OpenSubdiv::v3_1_1::Osd::MTLPatchTable::Create(uint64_t a1)
{
  MEMORY[0x1DF0D41C0](a1, 0xA0C4074858A82);
  __assert_rtn("Create", "mtlPatchTable.mm", 97, "0 && \"MTLPatchTable Creation Failed\"");
}

uint64_t OpenSubdiv::v3_1_1::Sdc::Crease::DetermineVertexVertexRule(OpenSubdiv::v3_1_1::Sdc::Crease *this, float a2, int a3)
{
  if (a3 <= 2 && a2 <= 0.0)
    return (1 << a3);
  else
    return 8;
}

uint64_t OpenSubdiv::v3_1_1::Sdc::Crease::DetermineVertexVertexRule(OpenSubdiv::v3_1_1::Sdc::Crease *this, float a2, int a3, float *a4)
{
  unsigned int v5;
  uint64_t v6;
  float v7;

  if (a2 > 0.0)
    return 8;
  if (a3 < 1)
    return 1;
  v5 = 0;
  v6 = a3;
  do
  {
    v7 = *a4++;
    if (v7 > 0.0)
      ++v5;
    --v6;
  }
  while (v6);
  if (v5 <= 2)
    return (1 << v5);
  else
    return 8;
}

float OpenSubdiv::v3_1_1::Sdc::Crease::ComputeFractionalWeightAtVertex(OpenSubdiv::v3_1_1::Sdc::Crease *this, float a2, float a3, int a4, float *a5, const float *a6)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  float v10;
  float result;

  v6 = a2 > 0.0 && a3 <= 0.0;
  if (a2 <= 0.0 || a3 > 0.0)
    a2 = 0.0;
  if (a6 && (*(_WORD *)this & 0x60) != 0)
  {
    if (a4 >= 1)
    {
      v7 = a4;
      do
      {
        if (*a5 > 0.0 && *a6 <= 0.0)
        {
          a2 = a2 + *a5;
          ++v6;
        }
        ++a6;
        ++a5;
        --v7;
      }
      while (v7);
    }
  }
  else if (a4 >= 1)
  {
    v8 = a4;
    do
    {
      v9 = *a5++;
      v10 = v9;
      v6 += v9 > 0.0 && v9 <= 1.0;
      if (v9 <= 0.0 || v9 > 1.0)
        v10 = -0.0;
      a2 = a2 + v10;
      --v8;
    }
    while (v8);
  }
  if (!v6)
    return 0.0;
  result = a2 / (float)v6;
  if (result > 1.0)
    return 1.0;
  return result;
}

float OpenSubdiv::v3_1_1::Sdc::Crease::SubdivideEdgeSharpnessAtVertex(OpenSubdiv::v3_1_1::Sdc::Crease *this, float a2, int a3, float *a4)
{
  float v4;
  int v5;
  uint64_t v6;
  float v7;
  float v8;
  float v9;
  int v10;
  BOOL v11;
  int v12;

  if (a3 >= 2 && (*(_WORD *)this & 0x60) != 0)
  {
    v4 = 0.0;
    if (a2 > 0.0)
    {
      v4 = 10.0;
      if (a2 < 10.0)
      {
        v5 = 0;
        v6 = a3;
        v7 = 0.0;
        do
        {
          v8 = *a4++;
          v9 = v8;
          v10 = v8 > 0.0 && v8 < 10.0;
          if (v8 <= 0.0 || v8 >= 10.0)
            v9 = -0.0;
          v7 = v7 + v9;
          v5 += v10;
          --v6;
        }
        while (v6);
        v11 = v5 != 0;
        v12 = v5 - 1;
        if (v12 != 0 && v11)
          a2 = (float)((float)((float)(v7 - a2) / (float)v12) * 0.25) + (float)(a2 * 0.75);
        return fmaxf(a2 + -1.0, 0.0);
      }
    }
  }
  else
  {
    v4 = 0.0;
    if (a2 > 0.0)
    {
      v4 = 10.0;
      if (a2 < 10.0)
      {
        v4 = 0.0;
        if (a2 > 1.0)
          return a2 + -1.0;
      }
    }
  }
  return v4;
}

_WORD *OpenSubdiv::v3_1_1::Sdc::Crease::SubdivideEdgeSharpnessesAroundVertex(_WORD *this, int a2, float *a3, float *a4)
{
  int v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float *v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  int v14;
  uint64_t v15;
  float v16;
  float v17;

  if (a2 > 1 && (*this & 0x60) != 0)
  {
    if ((*this & 0x60) == 0x20)
    {
      v4 = 0;
      v5 = a2;
      v6 = 0.0;
      v7 = a2;
      v8 = a3;
      do
      {
        v9 = *v8++;
        v10 = v9;
        v4 += v9 > 0.0 && v9 < 10.0;
        if (v9 <= 0.0 || v9 >= 10.0)
          v10 = -0.0;
        v6 = v6 + v10;
        --v7;
      }
      while (v7);
      if (v4)
      {
        while (1)
        {
          v11 = *a3;
          v12 = 0.0;
          if (*a3 <= 0.0)
            goto LABEL_16;
          v12 = 10.0;
          if (v11 >= 10.0)
            goto LABEL_16;
          if (v4 == 1)
            break;
          v13 = (float)((float)((float)((float)(v6 - v11) / (float)(v4 - 1)) * 0.25) + (float)(v11 * 0.75)) + -1.0;
          v12 = 0.0;
          if (v13 <= 0.0)
            goto LABEL_16;
LABEL_17:
          *a4++ = v13;
          ++a3;
          if (!--v5)
            return this;
        }
        v12 = v11 + -1.0;
        if (v11 <= 1.0)
          v12 = 0.0;
LABEL_16:
        v13 = v12;
        goto LABEL_17;
      }
      do
      {
        v14 = *(_DWORD *)a3++;
        *(_DWORD *)a4++ = v14;
        --v5;
      }
      while (v5);
    }
  }
  else if (a2 >= 1)
  {
    v15 = a2;
    do
    {
      v16 = *a3;
      v17 = 0.0;
      if (*a3 > 0.0)
      {
        v17 = 10.0;
        if (v16 < 10.0)
        {
          v17 = 0.0;
          if (v16 > 1.0)
            v17 = v16 + -1.0;
        }
      }
      *a4++ = v17;
      ++a3;
      --v15;
    }
    while (v15);
  }
  return this;
}

double OpenSubdiv::v3_1_1::Vtr::internal::Level::Level(OpenSubdiv::v3_1_1::Vtr::internal::Level *this)
{
  double result;

  result = 0.0;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return result;
}

void OpenSubdiv::v3_1_1::Vtr::internal::Level::~Level(OpenSubdiv::v3_1_1::Vtr::internal::Level *this)
{
  OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel **v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  v4 = (char *)this + 456;
  v2 = (OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel **)*((_QWORD *)this + 57);
  v3 = *((_QWORD *)v4 + 1);
  if ((int)((unint64_t)(v3 - (_QWORD)v2) >> 3) >= 1)
  {
    v5 = 0;
    do
    {
      if (v2[v5])
      {
        OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::~FVarLevel(v2[v5]);
        MEMORY[0x1DF0D41C0]();
        v2 = (OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel **)*((_QWORD *)this + 57);
        v3 = *((_QWORD *)this + 58);
      }
      ++v5;
    }
    while (v5 < (int)((unint64_t)(v3 - (_QWORD)v2) >> 3));
  }
  if (v2)
  {
    *((_QWORD *)this + 58) = v2;
    operator delete(v2);
  }
  v6 = (void *)*((_QWORD *)this + 54);
  if (v6)
  {
    *((_QWORD *)this + 55) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 51);
  if (v7)
  {
    *((_QWORD *)this + 52) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 48);
  if (v8)
  {
    *((_QWORD *)this + 49) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 45);
  if (v9)
  {
    *((_QWORD *)this + 46) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 42);
  if (v10)
  {
    *((_QWORD *)this + 43) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 39);
  if (v11)
  {
    *((_QWORD *)this + 40) = v11;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)this + 36);
  if (v12)
  {
    *((_QWORD *)this + 37) = v12;
    operator delete(v12);
  }
  v13 = (void *)*((_QWORD *)this + 33);
  if (v13)
  {
    *((_QWORD *)this + 34) = v13;
    operator delete(v13);
  }
  v14 = (void *)*((_QWORD *)this + 30);
  if (v14)
  {
    *((_QWORD *)this + 31) = v14;
    operator delete(v14);
  }
  v15 = (void *)*((_QWORD *)this + 27);
  if (v15)
  {
    *((_QWORD *)this + 28) = v15;
    operator delete(v15);
  }
  v16 = (void *)*((_QWORD *)this + 24);
  if (v16)
  {
    *((_QWORD *)this + 25) = v16;
    operator delete(v16);
  }
  v17 = (void *)*((_QWORD *)this + 21);
  if (v17)
  {
    *((_QWORD *)this + 22) = v17;
    operator delete(v17);
  }
  v18 = (void *)*((_QWORD *)this + 18);
  if (v18)
  {
    *((_QWORD *)this + 19) = v18;
    operator delete(v18);
  }
  v19 = (void *)*((_QWORD *)this + 15);
  if (v19)
  {
    *((_QWORD *)this + 16) = v19;
    operator delete(v19);
  }
  v20 = (void *)*((_QWORD *)this + 12);
  if (v20)
  {
    *((_QWORD *)this + 13) = v20;
    operator delete(v20);
  }
  v21 = (void *)*((_QWORD *)this + 9);
  if (v21)
  {
    *((_QWORD *)this + 10) = v21;
    operator delete(v21);
  }
  v22 = (void *)*((_QWORD *)this + 6);
  if (v22)
  {
    *((_QWORD *)this + 7) = v22;
    operator delete(v22);
  }
  v23 = (void *)*((_QWORD *)this + 3);
  if (v23)
  {
    *((_QWORD *)this + 4) = v23;
    operator delete(v23);
  }
}

BOOL OpenSubdiv::v3_1_1::Vtr::internal::Level::validateTopology(OpenSubdiv::v3_1_1::Vtr::internal::Level *this, void (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  unsigned __int16 *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  unsigned __int16 *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  unsigned __int16 *v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _BOOL4 v60;
  uint64_t v61;
  BOOL v62;
  _BOOL4 v64;
  _BOOL4 v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int *v74;
  uint64_t v75;
  void *__p;
  char __str[1024];
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)this + 6);
  if (((*((_QWORD *)this + 7) - v6) & 0x3FFFFFFFCLL) == 0)
  {
    if (!a2)
      return 0;
    snprintf(__str, 0x400uLL, "%s - missing face-verts", "MISSING_FACE_VERTS");
    a2(3, __str, a3);
    v60 = 1;
LABEL_65:
    v62 = 0;
    if (v60 && ((*((_QWORD *)this + 37) - *((_QWORD *)this + 36)) & 0x3FFFFFFFCLL) == 0)
    {
      snprintf(__str, 0x400uLL, "%s - missing vert-faces", "MISSING_VERT_FACES");
      v61 = 4;
      goto LABEL_68;
    }
    return v62;
  }
  v7 = *((_QWORD *)this + 36);
  if (((*((_QWORD *)this + 37) - v7) & 0x3FFFFFFFCLL) == 0)
  {
    v60 = a2 != 0;
    goto LABEL_65;
  }
  v8 = *(unsigned int *)this;
  if ((int)v8 >= 1)
  {
    v9 = 0;
    while (1)
    {
      v10 = (unsigned int *)(*((_QWORD *)this + 3) + 8 * v9);
      v11 = *v10;
      if ((int)v11 >= 1)
        break;
LABEL_14:
      if (++v9 == v8)
        goto LABEL_15;
    }
    v12 = 0;
    v13 = v6 + 4 * (int)v10[1];
    v14 = *((_QWORD *)this + 33);
    while (1)
    {
      v15 = *(int *)(v13 + 4 * v12);
      v16 = *(unsigned int *)(v14 + 8 * (_DWORD)v15);
      if ((int)v16 < 1)
        break;
      v17 = *(int *)(v14 + 8 * v15 + 4);
      v18 = (int *)(v7 + 4 * v17);
      v19 = (unsigned __int16 *)(*((_QWORD *)this + 39) + 2 * v17);
      while (1)
      {
        v20 = *v18++;
        if (v9 == v20 && v12 == *v19)
          break;
        ++v19;
        if (!--v16)
          goto LABEL_61;
      }
      if (++v12 == v11)
        goto LABEL_14;
    }
LABEL_61:
    if (!a2)
      return 0;
    snprintf(__str, 0x400uLL, "%s - face %d correlation of vert %d failed");
    goto LABEL_63;
  }
LABEL_15:
  v21 = *((_QWORD *)this + 21);
  if (((*((_QWORD *)this + 22) - v21) & 0x3FFFFFFFCLL) == 0)
  {
    if (!a2)
      return 0;
    snprintf(__str, 0x400uLL, "%s - missing edge-faces", "MISSING_EDGE_FACES");
    a2(0, __str, a3);
    v64 = 1;
LABEL_76:
    v62 = 0;
    if (v64 && ((*((_QWORD *)this + 10) - *((_QWORD *)this + 9)) & 0x3FFFFFFFCLL) == 0)
    {
      snprintf(__str, 0x400uLL, "%s - missing face-edges", "MISSING_FACE_EDGES");
      v61 = 2;
      goto LABEL_68;
    }
    return v62;
  }
  v22 = *((_QWORD *)this + 9);
  if (((*((_QWORD *)this + 10) - v22) & 0x3FFFFFFFCLL) == 0)
  {
    v64 = a2 != 0;
    goto LABEL_76;
  }
  if ((int)v8 >= 1)
  {
    v23 = 0;
    while (1)
    {
      v24 = (unsigned int *)(*((_QWORD *)this + 3) + 8 * v23);
      v25 = *v24;
      if ((int)v25 >= 1)
        break;
LABEL_28:
      if (++v23 == v8)
        goto LABEL_29;
    }
    v26 = 0;
    v27 = v22 + 4 * (int)v24[1];
    v28 = *((_QWORD *)this + 18);
    while (1)
    {
      v29 = *(int *)(v27 + 4 * v26);
      v30 = *(unsigned int *)(v28 + 8 * (_DWORD)v29);
      if ((int)v30 < 1)
        break;
      v31 = *(int *)(v28 + 8 * v29 + 4);
      v32 = (int *)(v21 + 4 * v31);
      v33 = (unsigned __int16 *)(*((_QWORD *)this + 24) + 2 * v31);
      while (1)
      {
        v34 = *v32++;
        if (v23 == v34 && v26 == *v33)
          break;
        ++v33;
        if (!--v30)
          goto LABEL_73;
      }
      if (++v26 == v25)
        goto LABEL_28;
    }
LABEL_73:
    if (!a2)
      return 0;
    snprintf(__str, 0x400uLL, "%s - face %d correlation of edge %d failed", "FAILED_CORRELATION_FACE_EDGE", v23, v26);
    v61 = 8;
    goto LABEL_68;
  }
LABEL_29:
  v35 = *((_QWORD *)this + 15);
  if (((*((_QWORD *)this + 16) - v35) & 0x3FFFFFFFCLL) == 0)
  {
    if (!a2)
      return 0;
    snprintf(__str, 0x400uLL, "%s - missing edge-verts", "MISSING_EDGE_VERTS");
    v65 = 1;
    a2(1, __str, a3);
LABEL_84:
    v62 = 0;
    if (v65 && ((*((_QWORD *)this + 46) - *((_QWORD *)this + 45)) & 0x3FFFFFFFCLL) == 0)
    {
      snprintf(__str, 0x400uLL, "%s - missing vert-edges", "MISSING_VERT_EDGES");
      v61 = 5;
      goto LABEL_68;
    }
    return v62;
  }
  v36 = *((_QWORD *)this + 45);
  if (((*((_QWORD *)this + 46) - v36) & 0x3FFFFFFFCLL) == 0)
  {
    v65 = a2 != 0;
    goto LABEL_84;
  }
  v37 = *((unsigned int *)this + 1);
  if ((int)v37 >= 1)
  {
    v38 = 0;
    v39 = *((_QWORD *)this + 42);
LABEL_33:
    v40 = 0;
    v41 = 1;
    while (1)
    {
      v42 = v41;
      v43 = *(int *)(v35 + 8 * v38 + 4 * v40);
      v44 = *(unsigned int *)(v39 + 8 * (_DWORD)v43);
      if ((int)v44 < 1)
        break;
      v45 = *(int *)(v39 + 8 * v43 + 4);
      v46 = (int *)(v36 + 4 * v45);
      v47 = (unsigned __int16 *)(*((_QWORD *)this + 48) + 2 * v45);
      while (1)
      {
        v48 = *v46++;
        if (v38 == v48 && v40 == *v47)
          break;
        ++v47;
        if (!--v44)
          goto LABEL_81;
      }
      v41 = 0;
      v40 = 1;
      if ((v42 & 1) == 0)
      {
        if (++v38 != v37)
          goto LABEL_33;
        goto LABEL_42;
      }
    }
LABEL_81:
    if (!a2)
      return 0;
    snprintf(__str, 0x400uLL, "%s - edge %d correlation of vert %d failed");
LABEL_63:
    v61 = 7;
LABEL_68:
    a2(v61, __str, a3);
    return 0;
  }
LABEL_42:
  v49 = 2 * *((_DWORD *)this + 5);
  v74 = (int *)&v75;
  __p = 0;
  if (v49 >= 0x21)
  {
    __p = operator new(4 * v49);
    v74 = (int *)__p;
  }
  if (*((int *)this + 2) < 1)
  {
LABEL_87:
    v66 = *((unsigned int *)this + 1);
    if ((int)v66 < 1)
    {
      v62 = 1;
    }
    else
    {
      v67 = 0;
      v62 = 0;
      v68 = 4;
      while (1)
      {
        if ((*(_BYTE *)(*((_QWORD *)this + 30) + v67) & 1) == 0)
        {
          if (*(_DWORD *)(*((_QWORD *)this + 15) + v68 - 4) == *(_DWORD *)(*((_QWORD *)this + 15) + v68))
          {
            if (!a2)
              goto LABEL_106;
            snprintf(__str, 0x400uLL, "%s - Error in eIndex = %d:  degenerate edge not tagged marked non-manifold", "DEGENERATE_EDGE", v67);
            v71 = 12;
            goto LABEL_105;
          }
          v69 = *(_DWORD *)(*((_QWORD *)this + 18) + v68 - 4);
          if ((v69 - 3) <= 0xFFFFFFFD)
            break;
        }
        v62 = ++v67 >= v66;
        v68 += 8;
        if (v66 == v67)
          goto LABEL_106;
      }
      if (!a2)
        goto LABEL_106;
      snprintf(__str, 0x400uLL, "%s - edge %d with %d incident faces not tagged non-manifold", "NON_MANIFOLD_EDGE", v67, v69);
      v71 = 13;
LABEL_105:
      a2(v71, __str, a3);
    }
  }
  else
  {
    v50 = 0;
    while (1)
    {
      if ((*(_WORD *)(*((_QWORD *)this + 54) + 2 * v50) & 0x801) == 0)
      {
        v51 = *((_QWORD *)this + 33);
        v52 = (8 * v50) | 4;
        v53 = *(int *)(v51 + v52);
        v54 = *((_QWORD *)this + 36);
        v55 = *(int *)(v51 + 8 * v50);
        v56 = *((_QWORD *)this + 42);
        v72 = *(int *)(v56 + v52);
        v73 = *((_QWORD *)this + 45);
        v57 = *(unsigned int *)(v56 + 8 * v50);
        if (!OpenSubdiv::v3_1_1::Vtr::internal::Level::orderVertexFacesAndEdges(this, v50, v74, &v74[v55]))
        {
          if (a2)
          {
            snprintf(__str, 0x400uLL, "%s - vertex %d cannot orient incident faces and edges", "FAILED_ORIENTATION_INCIDENT_FACES_EDGES", v50);
            v70 = 11;
            goto LABEL_98;
          }
          goto LABEL_99;
        }
        if ((int)v55 >= 1)
        {
          v58 = 0;
          while (*(_DWORD *)(v54 + 4 * v53 + 4 * v58) == v74[v58])
          {
            if (v55 == ++v58)
              goto LABEL_54;
          }
          if (a2)
          {
            snprintf(__str, 0x400uLL, "%s - vertex %d orientation failure at incident face %d", "FAILED_ORIENTATION_INCIDENT_FACE", v50, v58);
            v70 = 10;
LABEL_98:
            a2(v70, __str, a3);
            goto LABEL_99;
          }
          goto LABEL_99;
        }
LABEL_54:
        if ((int)v57 >= 1)
          break;
      }
LABEL_47:
      if (++v50 >= *((int *)this + 2))
        goto LABEL_87;
    }
    v59 = 0;
    while (*(_DWORD *)(v73 + 4 * v72 + 4 * v59) == v74[v55 + v59])
    {
      if (v57 == ++v59)
        goto LABEL_47;
    }
    if (a2)
    {
      snprintf(__str, 0x400uLL, "%s - vertex %d orientation failure at incident edge %d", "FAILED_ORIENTATION_INCIDENT_EDGE", v50, v59);
      v70 = 9;
      goto LABEL_98;
    }
LABEL_99:
    v62 = 0;
  }
LABEL_106:
  operator delete(__p);
  return v62;
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::Level::orderVertexFacesAndEdges(OpenSubdiv::v3_1_1::Vtr::internal::Level *this, __int32 __c, int *a3, int *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  __int32 *v19;
  size_t v20;
  __int32 *v21;
  __int32 *v22;
  __int32 *v23;
  unint64_t v24;
  int v25;
  int *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  __int32 *v32;
  size_t v33;
  __int32 *v34;
  __int32 *v35;
  __int32 *v36;
  int v37;
  int *v38;
  uint64_t v39;
  int v40;
  __int32 v41;
  unint64_t v42;
  int v43;
  __int32 v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v49;
  int *v50;
  int v51;
  int v52;
  __int32 *v53;
  size_t v54;
  __int32 *v55;
  __int32 *v56;
  __int32 *v57;
  uint64_t v58;
  int v59;

  v5 = *((_QWORD *)this + 42);
  v6 = 8 * __c;
  v7 = *(unsigned int *)(v5 + v6);
  v8 = *((_QWORD *)this + 33);
  v9 = *(_DWORD *)(v8 + v6);
  if (v9)
    v10 = (int)v7 < 2;
  else
    v10 = 1;
  if (!v10 && (int)v7 - v9 <= 1)
  {
    v15 = (8 * ((unint64_t)(2 * __c) >> 1)) | 4;
    v59 = v9;
    v58 = v7;
    if ((_DWORD)v7 == v9)
    {
      v16 = *(int *)(*((_QWORD *)this + 36) + 4 * *(int *)(v8 + v15));
      v17 = (2 * v16) | 1;
      v18 = *((_QWORD *)this + 3);
      v19 = (__int32 *)(*((_QWORD *)this + 6) + 4 * *(int *)(v18 + 4 * v17));
      v20 = *(int *)(v18 + 8 * v16);
      v21 = &v19[v20];
      v22 = wmemchr(v19, __c, v20);
      if (v22)
        v23 = v22;
      else
        v23 = v21;
      v24 = (unint64_t)((char *)v23 - (char *)v19) >> 2;
      v25 = *(_DWORD *)(*((_QWORD *)this + 9) + 4 * *(int *)(*((_QWORD *)this + 3) + 4 * v17) + 4 * (int)v24);
    }
    else
    {
      LODWORD(v24) = 0;
      v26 = (int *)(*((_QWORD *)this + 45) + 4 * *(int *)(v5 + v15));
      LODWORD(v16) = -1;
      v25 = -1;
      do
      {
        v28 = *v26++;
        v27 = v28;
        v29 = *((_QWORD *)this + 18);
        if (*(_DWORD *)(v29 + 8 * v28) == 1)
        {
          v16 = *(int *)(*((_QWORD *)this + 21) + 4 * *(int *)(v29 + 4 * ((2 * v27) | 1)));
          v30 = (2 * v16) | 1;
          v31 = *((_QWORD *)this + 3);
          v32 = (__int32 *)(*((_QWORD *)this + 6) + 4 * *(int *)(v31 + 4 * v30));
          v33 = *(int *)(v31 + 8 * v16);
          v34 = &v32[v33];
          v35 = wmemchr(v32, __c, v33);
          v36 = v35 ? v35 : v34;
          v24 = (unint64_t)((char *)v36 - (char *)v32) >> 2;
          v37 = *(_DWORD *)(*((_QWORD *)this + 9) + 4 * *(int *)(*((_QWORD *)this + 3) + 4 * v30) + 4 * (int)v24);
          v25 = v27;
          if (v27 == v37)
            break;
        }
        --v7;
      }
      while (v7);
    }
    *a3 = v16;
    *a4 = v25;
    v38 = a4 + 1;
    v39 = v58 - 1;
    v40 = 1;
    v41 = v25;
    LODWORD(v42) = v24;
    v43 = v59;
    while (1)
    {
      v44 = v41;
      v45 = *((_QWORD *)this + 3);
      v46 = *(_DWORD *)(v45 + 8 * (int)v16);
      v47 = *((_QWORD *)this + 9);
      if ((_DWORD)v42)
        v46 = v42;
      v41 = *(_DWORD *)(v47 + 4 * *(int *)(v45 + 8 * (_DWORD)v16 + 4) + 4 * (v46 - 1));
      if (v41 == v44 || v41 == v25)
        break;
      *v38 = v41;
      if (v40 < v43)
      {
        v49 = *((_QWORD *)this + 18);
        v50 = (int *)(*((_QWORD *)this + 21) + 4 * *(int *)(v49 + 4 * ((2 * v41) | 1)));
        v51 = *(_DWORD *)(v49 + 8 * v41);
        if (v51 == 1)
        {
          v52 = *v50;
          if (*v50 == (_DWORD)v16)
            return 0;
        }
        else
        {
          if (!v51)
            return 0;
          v52 = *v50;
        }
        v16 = v50[v52 == (_DWORD)v16];
        v53 = (__int32 *)(v47 + 4 * *(int *)(v45 + 4 * (int)((2 * v16) | 1)));
        v54 = *(int *)(v45 + 8 * v16);
        v55 = &v53[v54];
        v56 = wmemchr(v53, v41, v54);
        v43 = v59;
        if (v56)
          v57 = v56;
        else
          v57 = v55;
        v42 = (unint64_t)((char *)v57 - (char *)v53) >> 2;
        a3[v40++] = v16;
      }
      ++v38;
      if (!--v39)
      {
        if (v40 != v43)
          OpenSubdiv::v3_1_1::Vtr::internal::Level::orderVertexFacesAndEdges();
        return 1;
      }
    }
  }
  return 0;
}

BOOL OpenSubdiv::v3_1_1::Vtr::internal::Level::doesFaceFVarTopologyMatch(OpenSubdiv::v3_1_1::Vtr::internal::Level *this, int a2, int a3)
{
  return (OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getFaceCompositeValueTag(*(OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel **)(*((_QWORD *)this + 57) + 8 * a3), a2) & 1) == 0;
}

_QWORD *OpenSubdiv::v3_1_1::Vtr::internal::Level::getFaceVTags(_QWORD *result, int a2, _WORD *a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int *v14;
  int v15;
  unsigned int v16;
  __int16 v17;
  __int16 v18;
  int v19;
  __int16 v20;
  uint64_t v21;

  v4 = (2 * a2) | 1;
  v5 = result[3];
  v6 = (int *)(result[6] + 4 * *(int *)(v5 + 4 * v4));
  v7 = *(unsigned int *)(v5 + 8 * a2);
  if ((a4 & 0x80000000) != 0)
  {
    if ((int)v7 >= 1)
    {
      do
      {
        v21 = *v6++;
        *a3++ = *(_WORD *)(result[54] + 2 * v21);
        --v7;
      }
      while (v7);
    }
  }
  else if ((int)v7 >= 1)
  {
    v8 = 0;
    v9 = *(_QWORD **)(result[57] + 8 * a4);
    v10 = v9[3] + 4 * *(int *)(*(_QWORD *)(*v9 + 24) + 4 * v4);
    do
    {
      v11 = v6[v8];
      v12 = *(_DWORD *)(v10 + 4 * v8);
      if (*(int *)(*v9 + 12) <= 0)
      {
        v13 = *(int *)(v9[12] + 4 * v11);
        v12 = v13 - 1;
        v14 = (int *)(v9[18] + 4 * v13);
        do
        {
          v15 = *v14++;
          ++v12;
        }
        while (v15 != *(_DWORD *)(v10 + 4 * v8));
      }
      v16 = *(unsigned __int8 *)(v9[21] + v12);
      LOWORD(v11) = *(_WORD *)(result[54] + 2 * v11);
      if ((v16 & 1) != 0)
      {
        v17 = v11 & 0xD867;
        v18 = v17 | 0x2200;
        if ((v16 & 0x80u) == 0)
          v19 = ~(v16 >> 3) & 8;
        else
          LOWORD(v19) = 0;
        v20 = v17 | 0x410 | v19;
        if ((v16 & 8) != 0)
          v20 = v18;
        LODWORD(v11) = v20 & 0xAFF8 | (((v16 >> 7) & 1) << 14) | v16 & 2 | (v16 >> 2) & 1 | 0x1004;
      }
      a3[v8++] = v11;
    }
    while (v8 != v7);
  }
  return result;
}

_QWORD *OpenSubdiv::v3_1_1::Vtr::internal::Level::getFaceETags(_QWORD *result, int a2, _BYTE *a3, unsigned int a4)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v4 = result[3];
  v5 = (int *)(result[9] + 4 * *(int *)(v4 + 8 * a2 + 4));
  v6 = *(unsigned int *)(v4 + 8 * a2);
  if ((a4 & 0x80000000) != 0)
  {
    if ((int)v6 >= 1)
    {
      do
      {
        v10 = *v5++;
        *a3++ = *(_BYTE *)(result[30] + v10);
        --v6;
      }
      while (v6);
    }
  }
  else if ((int)v6 >= 1)
  {
    v7 = *(_QWORD *)(result[57] + 8 * a4);
    do
    {
      v8 = *v5++;
      v9 = *(_BYTE *)(result[30] + v8);
      if ((*(_BYTE *)(*(_QWORD *)(v7 + 48) + v8) & 1) != 0)
        v9 |= 6u;
      *a3++ = v9;
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::Level::VTag::BitwiseOr(unsigned __int16 *a1, int a2)
{
  uint64_t result;
  unsigned __int16 *v4;
  uint64_t v5;
  int v6;

  result = *a1;
  if (a2 >= 2)
  {
    v4 = a1 + 1;
    v5 = a2 - 1;
    do
    {
      v6 = *v4++;
      result = v6 | result;
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::Level::getFaceCompositeVTag(uint64_t a1, int **a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 432);
  result = *(unsigned __int16 *)(v2 + 2 * **a2);
  v4 = *((unsigned int *)a2 + 2);
  if ((int)v4 >= 2)
  {
    v5 = *a2 + 1;
    v6 = v4 - 1;
    do
    {
      v7 = *v5++;
      result = *(unsigned __int16 *)(v2 + 2 * v7) | result;
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::Level::getFaceCompositeVTag(OpenSubdiv::v3_1_1::Vtr::internal::Level *this, int a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  __int16 v15;
  unsigned __int8 *v16;
  int *v17;
  size_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  __int16 v22;
  __int16 v23;
  int v24;
  __int16 v25;
  uint64_t v26;
  size_t v27;
  int *v28;
  uint64_t v29;
  unsigned __int8 *v31;
  _BYTE v32[64];
  void *__p;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v5 = *((_QWORD *)this + 3);
  v6 = *(int *)(v5 + 8 * a2 + 4);
  v7 = *((_QWORD *)this + 6);
  v8 = *(unsigned int *)(v5 + 8 * a2);
  if ((a3 & 0x80000000) != 0)
  {
    v26 = *((_QWORD *)this + 54);
    v12 = *(unsigned __int16 *)(v26 + 2 * *(int *)(v7 + 4 * v6));
    if ((int)v8 >= 2)
    {
      v27 = v8 - 1;
      v28 = (int *)(v7 + 4 * v6 + 4);
      do
      {
        v29 = *v28++;
        v12 = *(unsigned __int16 *)(v26 + 2 * v29) | v12;
        --v27;
      }
      while (v27);
    }
  }
  else
  {
    v9 = *(_QWORD **)(*((_QWORD *)this + 57) + 8 * a3);
    v10 = v32;
    v31 = v32;
    __p = 0;
    if (v8 >= 0x41)
    {
      v10 = operator new(v8);
      __p = v10;
      v31 = v10;
    }
    OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getFaceValueTags(v9, a2, (uint64_t)v10);
    v11 = *((_QWORD *)this + 54);
    v12 = *(unsigned __int16 *)(v11 + 2 * *(int *)(v7 + 4 * v6));
    v13 = *v31;
    if ((v13 & 1) != 0)
    {
      if ((v13 & 0x80u) == 0)
        v14 = ~(v13 >> 3) & 8;
      else
        LOWORD(v14) = 0;
      v15 = v12 & 0xD867 | v14 | 0x410;
      if ((v13 & 8) != 0)
        v15 = v12 & 0xD867 | 0x2200;
      v12 = v15 & 0xAFF8 | (((v13 >> 7) & 1) << 14) | v13 & 2 | (v13 >> 2) & 1 | 0x1004;
    }
    if ((int)v8 >= 2)
    {
      v16 = v31 + 1;
      v17 = (int *)(v7 + 4 * v6 + 4);
      v18 = v8 - 1;
      do
      {
        v19 = *v17++;
        v20 = *(unsigned __int16 *)(v11 + 2 * v19);
        LODWORD(v19) = *v16++;
        v21 = v19;
        if ((v19 & 1) != 0)
        {
          v22 = v20 & 0xD867;
          v23 = v22 | 0x2200;
          if ((v21 & 0x80u) == 0)
            v24 = ~(v21 >> 3) & 8;
          else
            LOWORD(v24) = 0;
          v25 = v22 | v24 | 0x410;
          if ((v21 & 8) != 0)
            v25 = v23;
          v20 = v25 & 0xAFF8 | (((v21 >> 7) & 1) << 14) | v21 & 2 | (v21 >> 2) & 1 | 0x1004;
        }
        v12 = v20 | v12;
        --v18;
      }
      while (v18);
    }
    operator delete(__p);
  }
  return v12;
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::Level::getVertexCompositeFVarVTag(OpenSubdiv::v3_1_1::Vtr::internal::Level *this, int a2, int a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t result;
  uint64_t v9;
  __int16 v10;
  int v11;
  __int16 v12;
  __int16 v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  __int16 v20;

  v3 = *(_QWORD **)(*((_QWORD *)this + 57) + 8 * a3);
  v4 = *(int *)(v3[12] + 4 * a2);
  v5 = v3[21];
  v6 = *(unsigned __int16 *)(*((_QWORD *)this + 54) + 2 * a2);
  v7 = *(unsigned __int8 *)(v5 + v4);
  if ((v7 & 1) == 0)
    return *(unsigned __int16 *)(*((_QWORD *)this + 54) + 2 * a2);
  v9 = *(unsigned __int16 *)(v3[9] + 2 * a2);
  v10 = v6 & 0xD867;
  v11 = ~(v7 >> 3) & 8;
  if ((v7 & 0x80u) != 0)
    LOWORD(v11) = 0;
  v12 = v10 | 0x410 | v11;
  if ((v7 & 8) != 0)
    v13 = v6 & 0xD867 | 0x2200;
  else
    v13 = v12;
  result = v13 & 0xAFF8 | (((v7 >> 7) & 1) << 14) | v7 & 2 | (v7 >> 2) & 1 | 0x1004;
  if (v9 >= 2)
  {
    v14 = (unsigned __int8 *)(v4 + v5 + 1);
    v15 = v9 - 1;
    do
    {
      v17 = *v14++;
      v16 = v17;
      v18 = v6;
      if ((v17 & 1) != 0)
      {
        if ((v16 & 0x80u) == 0)
          v19 = ~(v16 >> 3) & 8;
        else
          LOWORD(v19) = 0;
        v20 = v10 | v19 | 0x410;
        if ((v16 & 8) != 0)
          v20 = v6 & 0xD867 | 0x2200;
        v18 = v20 & 0xAFF8 | (((v16 >> 7) & 1) << 14) | v16 & 2 | (v16 >> 2) & 1 | 0x1004;
      }
      result = v18 | result;
      --v15;
    }
    while (v15);
  }
  return result;
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::Level::gatherQuadRegularRingAroundVertex(OpenSubdiv::v3_1_1::Vtr::internal::Level *this, int a2, int *a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int *v8;
  __int16 *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  __int16 v20;
  int *v21;
  uint64_t v22;

  v4 = *((_QWORD *)this + 33);
  v5 = *(unsigned int *)(v4 + 8 * a2);
  if ((int)v5 < 1)
    return 0;
  v6 = 0;
  v7 = *(int *)(v4 + 8 * a2 + 4);
  v8 = (int *)(*((_QWORD *)this + 36) + 4 * v7);
  v9 = (__int16 *)(*((_QWORD *)this + 39) + 2 * v7);
  v10 = *(_DWORD *)(*((_QWORD *)this + 42) + 8 * a2);
  v11 = (v5 - 1);
  v12 = v5;
  do
  {
    v14 = *v8++;
    v13 = v14;
    if ((a4 & 0x80000000) != 0)
    {
      v18 = (int *)(*((_QWORD *)this + 3) + 4 * ((2 * v13) | 1));
      v16 = (_QWORD *)((char *)this + 48);
    }
    else
    {
      v15 = *(uint64_t **)(*((_QWORD *)this + 57) + 8 * a4);
      v17 = *v15;
      v16 = v15 + 3;
      v18 = (int *)(*(_QWORD *)(v17 + 24) + 4 * ((2 * v13) | 1));
    }
    v19 = *v16 + 4 * *v18;
    v20 = *v9;
    v21 = &a3[v6];
    *v21 = *(_DWORD *)(v19 + 4 * ((*v9 + 1) & 3));
    v22 = v6 + 2;
    v21[1] = *(_DWORD *)(v19 + 4 * (((_BYTE)v20 + 2) & 3));
    if (v10 > (int)v5 && !v11)
    {
      a3[v22] = *(_DWORD *)(v19 + 4 * (((_BYTE)v20 - 1) & 3));
      v22 = (v6 + 3);
    }
    --v11;
    ++v9;
    v6 = v22;
    --v12;
  }
  while (v12);
  return v22;
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::Level::getFaceFVarValues(OpenSubdiv::v3_1_1::Vtr::internal::Level *this, int a2, int a3)
{
  _QWORD *v3;

  v3 = *(_QWORD **)(*((_QWORD *)this + 57) + 8 * a3);
  return v3[3] + 4 * *(int *)(*(_QWORD *)(*v3 + 24) + 8 * a2 + 4);
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::Level::gatherQuadRegularPartialRingAroundVertex(_QWORD *a1, int a2, unsigned __int16 *a3, uint64_t a4, unsigned int a5)
{
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  __int16 v20;
  _DWORD *v21;
  uint64_t v22;

  if ((*(_WORD *)(a1[54] + 2 * a2) & 1) != 0)
    OpenSubdiv::v3_1_1::Vtr::internal::Level::gatherQuadRegularPartialRingAroundVertex();
  v5 = *a3;
  if (!*a3)
    return 0;
  v6 = 0;
  v7 = a1[33];
  v8 = *(int *)(v7 + 8 * a2 + 4);
  v9 = a1[36] + 4 * v8;
  v10 = *(_DWORD *)(v7 + 8 * a2);
  v11 = a1[39] + 2 * v8;
  v12 = a3[1];
  do
  {
    v13 = (v12 % v10);
    v14 = (2 * *(_DWORD *)(v9 + 4 * v13)) | 1;
    if ((a5 & 0x80000000) != 0)
    {
      v18 = (int *)(a1[3] + 4 * v14);
      v16 = a1 + 6;
    }
    else
    {
      v15 = *(uint64_t **)(a1[57] + 8 * a5);
      v17 = *v15;
      v16 = v15 + 3;
      v18 = (int *)(*(_QWORD *)(v17 + 24) + 4 * v14);
    }
    v19 = *v16 + 4 * *v18;
    v20 = *(_WORD *)(v11 + 2 * v13);
    v21 = (_DWORD *)(a4 + 4 * v6);
    *v21 = *(_DWORD *)(v19 + 4 * (((_BYTE)v20 + 1) & 3));
    v22 = v6 + 2;
    v21[1] = *(_DWORD *)(v19 + 4 * (((_BYTE)v20 + 2) & 3));
    if (v5 == 1 && (a3[2] & 1) == 0)
    {
      *(_DWORD *)(a4 + 4 * v22) = *(_DWORD *)(v19 + 4 * (((_BYTE)v20 - 1) & 3));
      v22 = (v6 + 3);
    }
    ++v12;
    v6 = v22;
    --v5;
  }
  while (v5);
  return v22;
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::Level::gatherQuadRegularInteriorPatchPoints(OpenSubdiv::v3_1_1::Vtr::internal::Level *this, int a2, int *a3, unsigned int a4, unsigned int a5)
{
  int *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char IndexIn4Tuple;
  int v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t v28;
  int *v29;
  char v30;
  uint64_t v31;
  char *v33;
  uint64_t v34;
  _QWORD v35[2];

  if (a4 >= 4)
    OpenSubdiv::v3_1_1::Vtr::internal::Level::gatherQuadRegularInteriorPatchPoints();
  v8 = (int *)((char *)&OpenSubdiv::v3_1_1::Vtr::internal::Level::gatherQuadRegularInteriorPatchPoints(int,int *,int,int)const::rotationSequence
             + 4 * a4);
  v9 = *((_QWORD *)this + 6);
  v10 = (2 * a2) | 1;
  v33 = (char *)this + 48;
  v11 = *(int *)(*((_QWORD *)this + 3) + 4 * v10);
  v12 = v9 + 4 * v11;
  v34 = a5;
  if ((a5 & 0x80000000) != 0)
  {
    v14 = v9 + 4 * v11;
  }
  else
  {
    v13 = *(_QWORD **)(*((_QWORD *)this + 57) + 8 * a5);
    v14 = v13[3] + 4 * *(int *)(*(_QWORD *)(*v13 + 24) + 4 * v10);
  }
  v15 = 0;
  *a3 = *(_DWORD *)(v14 + 4 * *v8);
  a3[1] = *(_DWORD *)(v14 + 4 * v8[1]);
  a3[2] = *(_DWORD *)(v14 + 4 * v8[2]);
  a3[3] = *(_DWORD *)(v14 + 4 * v8[3]);
  v16 = a3 + 6;
  do
  {
    v17 = *(int *)(v12 + 4 * v8[v15]);
    v18 = 2 * v17;
    v19 = *((_QWORD *)this + 33);
    v20 = v19 + 8 * v17;
    v21 = *(unsigned int *)(v19 + 4 * v18);
    v35[0] = *((_QWORD *)this + 36) + 4 * *(int *)(v20 + 4);
    v35[1] = v21;
    v22 = *((_QWORD *)this + 39);
    v23 = *(int *)(v20 + 4);
    IndexIn4Tuple = OpenSubdiv::v3_1_1::Vtr::ConstArray<int>::FindIndexIn4Tuple((uint64_t)v35, a2);
    v25 = (2 * *(_DWORD *)(v35[0] + 4 * ((IndexIn4Tuple + 2) & 3))) | 1;
    if ((a5 & 0x80000000) != 0)
    {
      v29 = (int *)(*((_QWORD *)this + 3) + 4 * v25);
      v27 = v33;
    }
    else
    {
      v26 = *(uint64_t **)(*((_QWORD *)this + 57) + 8 * v34);
      v28 = *v26;
      v27 = v26 + 3;
      v29 = (int *)(*(_QWORD *)(v28 + 24) + 4 * v25);
    }
    v30 = *(_WORD *)(v22 + 2 * v23 + 2 * ((IndexIn4Tuple + 2) & 3));
    ++v15;
    v31 = *v27 + 4 * *v29;
    *(v16 - 2) = *(_DWORD *)(v31 + 4 * ((v30 + 1) & 3));
    *(v16 - 1) = *(_DWORD *)(v31 + 4 * ((v30 + 2) & 3));
    *v16 = *(_DWORD *)(v31 + 4 * ((v30 - 1) & 3));
    v16 += 3;
  }
  while (v15 != 4);
  return 16;
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::Level::gatherQuadRegularBoundaryPatchPoints(OpenSubdiv::v3_1_1::Vtr::internal::Level *this, int a2, int *a3, int a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  __int16 v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int16 v31;
  __int16 v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;

  v5 = 0;
  v6 = (2 * a2) | 1;
  v7 = *((_QWORD *)this + 3);
  v8 = *((_QWORD *)this + 6);
  v9 = v8 + 4 * *(int *)(v7 + 4 * v6);
  v10 = *((_QWORD *)this + 36);
  v11 = *((_QWORD *)this + 33);
  v12 = *(int *)(v11 + 8 * *(int *)(v9 + 4 * (((_BYTE)a4 + 2) & 3)) + 4);
  v13 = v10 + 4 * v12;
  v14 = *(int *)(v11 + 8 * *(int *)(v9 + 4 * (((_BYTE)a4 - 1) & 3)) + 4);
  v15 = v10 + 4 * v14;
  v16 = *((_QWORD *)this + 39);
  v17 = v16 + 2 * v12;
  v18 = -1;
  v19 = -1;
  do
  {
    if (*(_DWORD *)(v13 + 4 * v5) == a2)
      v18 = v5;
    if (*(_DWORD *)(v15 + 4 * v5) == a2)
      v19 = v5;
    ++v5;
  }
  while (v5 != 4);
  if (v18 < 0 || v19 < 0)
    OpenSubdiv::v3_1_1::Vtr::internal::Level::gatherQuadRegularBoundaryPatchPoints();
  v20 = ((_BYTE)v18 + 1) & 3;
  v21 = ((_BYTE)v18 + 2) & 3;
  v22 = ((_BYTE)v19 + 2) & 3;
  v23 = ((_BYTE)v19 - 1) & 3;
  v24 = *(int *)(v13 + 4 * (((_BYTE)v18 + 1) & 3));
  v25 = *(int *)(v13 + 4 * (((_BYTE)v18 + 2) & 3));
  v26 = *(_WORD *)(v17 + 2 * v20);
  v27 = *(_WORD *)(v17 + 2 * v21);
  v28 = *(int *)(v15 + 4 * v22);
  v29 = *(int *)(v15 + 4 * v23);
  v30 = v16 + 2 * v14;
  v31 = *(_WORD *)(v30 + 2 * v22);
  v32 = *(_WORD *)(v30 + 2 * v23);
  if ((a5 & 0x80000000) == 0)
  {
    v33 = *(_QWORD **)(*((_QWORD *)this + 57) + 8 * a5);
    v7 = *(_QWORD *)(*v33 + 24);
    v8 = v33[3];
    v9 = v8 + 4 * *(int *)(v7 + 4 * v6);
  }
  v34 = *(int *)(v7 + 8 * v24 + 4);
  v35 = *(int *)(v7 + 8 * v25 + 4);
  v36 = *(int *)(v7 + 8 * v28 + 4);
  v37 = *(int *)(v7 + 8 * v29 + 4);
  *a3 = *(_DWORD *)(v9 + 4 * (((_BYTE)a4 + 1) & 3));
  a3[1] = *(_DWORD *)(v9 + 4 * (((_BYTE)a4 + 2) & 3));
  a3[2] = *(_DWORD *)(v9 + 4 * (((_BYTE)a4 - 1) & 3));
  a3[3] = *(_DWORD *)(v9 + 4 * a4);
  v38 = v8 + 4 * v35;
  a3[4] = *(_DWORD *)(v8 + 4 * v34 + 4 * (((_BYTE)v26 + 2) & 3));
  a3[5] = *(_DWORD *)(v38 + 4 * (((_BYTE)v27 + 1) & 3));
  a3[6] = *(_DWORD *)(v38 + 4 * (((_BYTE)v27 + 2) & 3));
  v39 = *(_DWORD *)(v38 + 4 * (((_BYTE)v27 - 1) & 3));
  v40 = v8 + 4 * v36;
  a3[7] = v39;
  a3[8] = *(_DWORD *)(v40 + 4 * (((_BYTE)v31 + 1) & 3));
  a3[9] = *(_DWORD *)(v40 + 4 * (((_BYTE)v31 + 2) & 3));
  a3[10] = *(_DWORD *)(v40 + 4 * (((_BYTE)v31 - 1) & 3));
  a3[11] = *(_DWORD *)(v8 + 4 * v37 + 4 * (((_BYTE)v32 + 2) & 3));
  return 12;
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::Level::gatherQuadRegularCornerPatchPoints(OpenSubdiv::v3_1_1::Vtr::internal::Level *this, int a2, int *a3, int a4, unsigned int a5)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;
  __int16 v23;
  __int16 v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v5 = (2 * a2) | 1;
  v6 = *((_QWORD *)this + 3);
  v7 = *((_QWORD *)this + 6);
  v8 = v7 + 4 * *(int *)(v6 + 4 * v5);
  v9 = *(int *)(v8 + 4 * (((_BYTE)a4 + 2) & 3));
  v10 = *((_QWORD *)this + 33);
  v11 = *(unsigned int *)(v10 + 8 * (_DWORD)v9);
  if ((int)v11 < 1)
LABEL_5:
    OpenSubdiv::v3_1_1::Vtr::internal::Level::gatherQuadRegularCornerPatchPoints();
  v12 = 0;
  v13 = *(int *)(v10 + 8 * v9 + 4);
  v14 = *((_QWORD *)this + 36) + 4 * v13;
  v15 = *((_QWORD *)this + 39) + 2 * v13;
  while (*(_DWORD *)(v14 + 4 * v12) != a2)
  {
    if (v11 == ++v12)
      goto LABEL_5;
  }
  v16 = ((_BYTE)v12 + 1) & 3;
  v17 = ((_BYTE)v12 + 2) & 3;
  v18 = ((_BYTE)v12 - 1) & 3;
  v19 = *(int *)(v14 + 4 * v16);
  v20 = *(int *)(v14 + 4 * v17);
  v21 = *(int *)(v14 + 4 * v18);
  v22 = *(_WORD *)(v15 + 2 * v16);
  v23 = *(_WORD *)(v15 + 2 * v17);
  v24 = *(_WORD *)(v15 + 2 * v18);
  if ((a5 & 0x80000000) == 0)
  {
    v25 = *(_QWORD **)(*((_QWORD *)this + 57) + 8 * a5);
    v6 = *(_QWORD *)(*v25 + 24);
    v7 = v25[3];
    v8 = v7 + 4 * *(int *)(v6 + 4 * v5);
  }
  v26 = *(int *)(v6 + 8 * v19 + 4);
  v27 = *(int *)(v6 + 8 * v20 + 4);
  v28 = *(int *)(v6 + 8 * v21 + 4);
  *a3 = *(_DWORD *)(v8 + 4 * a4);
  a3[1] = *(_DWORD *)(v8 + 4 * (((_BYTE)a4 + 1) & 3));
  a3[2] = *(_DWORD *)(v8 + 4 * (((_BYTE)a4 + 2) & 3));
  a3[3] = *(_DWORD *)(v8 + 4 * (((_BYTE)a4 - 1) & 3));
  v29 = v7 + 4 * v27;
  a3[4] = *(_DWORD *)(v7 + 4 * v26 + 4 * (((_BYTE)v22 + 2) & 3));
  a3[5] = *(_DWORD *)(v29 + 4 * (((_BYTE)v23 + 1) & 3));
  a3[6] = *(_DWORD *)(v29 + 4 * (((_BYTE)v23 + 2) & 3));
  a3[7] = *(_DWORD *)(v29 + 4 * (((_BYTE)v23 - 1) & 3));
  a3[8] = *(_DWORD *)(v7 + 4 * v28 + 4 * (((_BYTE)v24 + 2) & 3));
  return 9;
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::Level::isSingleCreasePatch(OpenSubdiv::v3_1_1::Vtr::internal::Level *this, int a2, float *a3, int *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  int *v19;

  v4 = *((_QWORD *)this + 3);
  v5 = *(int *)(v4 + 8 * a2 + 4);
  v6 = *(unsigned int *)(v4 + 8 * a2);
  v7 = (int *)(*((_QWORD *)this + 6) + 4 * v5);
  v8 = *((_QWORD *)this + 54);
  if ((int)v6 < 2)
  {
    v11 = *(_WORD *)(v8 + 2 * *v7);
  }
  else
  {
    v9 = v6 - 1;
    v10 = v7 + 1;
    v11 = *(_WORD *)(v8 + 2 * *v7);
    do
    {
      v12 = *v10++;
      v11 |= *(_WORD *)(v8 + 2 * v12);
      --v9;
    }
    while (v9);
  }
  if ((v11 & 0x707) != 0x200)
    return 0;
  v13 = ((*(_WORD *)(v8 + 2 * *v7) & 0x780) == 512) | (2 * ((*(_WORD *)(v8 + 2 * v7[1]) & 0x780) == 512)) | (4 * ((*(_WORD *)(v8 + 2 * v7[2]) & 0x780) == 512)) | (8 * ((*(_WORD *)(v8 + 2 * v7[3]) & 0x780) == 512));
  if (((0xEDB7uLL >> v13) & 1) != 0)
    return 0;
  v14 = OpenSubdiv::v3_1_1::Vtr::internal::Level::isSingleCreasePatch(int,float *,int *)const::sharpEdgeFromCreaseMask[v13];
  v15 = *((_QWORD *)this + 45);
  v16 = *((_QWORD *)this + 42);
  v17 = (int *)(v15 + 4 * *(int *)(v16 + 8 * v7[v14] + 4));
  v18 = *((_QWORD *)this + 27);
  if (*(float *)(v18 + 4 * *v17) != *(float *)(v18 + 4 * v17[2]))
    return 0;
  if (*(float *)(v18 + 4 * v17[1]) != *(float *)(v18 + 4 * v17[3]))
    return 0;
  v19 = (int *)(v15 + 4 * *(int *)(v16 + 8 * v7[((_BYTE)v14 + 1) & 3] + 4));
  if (*(float *)(v18 + 4 * *v19) != *(float *)(v18 + 4 * v19[2])
    || *(float *)(v18 + 4 * v19[1]) != *(float *)(v18 + 4 * v19[3]))
  {
    return 0;
  }
  if (a3)
    *a3 = *(float *)(v18 + 4 * *(int *)(*((_QWORD *)this + 9) + 4 * v5 + 4 * v14));
  if (a4)
    *a4 = v14;
  return 1;
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::Level::findEdge(OpenSubdiv::v3_1_1::Vtr::internal::Level *this, int a2, int a3)
{
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;

  v3 = *((_QWORD *)this + 42);
  v4 = (int *)(*((_QWORD *)this + 45) + 4 * *(int *)(v3 + 8 * a2 + 4));
  v5 = *(unsigned int *)(v3 + 8 * a2);
  if (a2 == a3)
  {
    if ((int)v5 >= 1)
    {
      v6 = *((_QWORD *)this + 15);
      while (1)
      {
        v8 = *v4++;
        result = v8;
        if (*(_DWORD *)(v6 + 8 * v8) == *(_DWORD *)(v6 + 8 * v8 + 4))
          break;
        if (!--v5)
          return 0xFFFFFFFFLL;
      }
      return result;
    }
    return 0xFFFFFFFFLL;
  }
  if ((int)v5 < 1)
    return 0xFFFFFFFFLL;
  v9 = *((_QWORD *)this + 15);
  while (1)
  {
    v10 = *v4++;
    result = v10;
    v11 = (_DWORD *)(v9 + 8 * v10);
    if (*v11 == a3 || v11[1] == a3)
      break;
    if (!--v5)
      return 0xFFFFFFFFLL;
  }
  return result;
}

BOOL OpenSubdiv::v3_1_1::Vtr::internal::Level::completeTopologyFromFaceVertices(OpenSubdiv::v3_1_1::Vtr::internal::Level *this)
{
  unint64_t v1;
  unint64_t v2;
  char *v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  void **v10;
  std::vector<int>::size_type v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  _DWORD *v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  _DWORD *v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  _DWORD *v32;
  uint64_t v33;
  unsigned int *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t **v45;
  uint64_t *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  _DWORD *v55;
  unint64_t v56;
  uint64_t **v57;
  unsigned int *v58;
  char *v59;
  int v60;
  char *v61;
  int *v62;
  int *v63;
  int *v64;
  int *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  int *v71;
  int v72;
  _DWORD *v73;
  int *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  int *v80;
  int v81;
  char *v82;
  _DWORD *v83;
  unint64_t v84;
  _DWORD *v85;
  _DWORD *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  char *v92;
  int v93;
  void **v94;
  char *v95;
  int v96;
  int *v97;
  unint64_t v98;
  _DWORD *v99;
  int *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  char *v105;
  int *v106;
  int v107;
  uint64_t v108;
  char *v109;
  char *v110;
  char *v111;
  char *v112;
  char *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  char *v124;
  char *v125;
  char *v126;
  int v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  char *v132;
  char *v133;
  int v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  char *v138;
  int v139;
  int v140;
  int v141;
  int v142;
  signed int v143;
  int v144;
  unsigned int v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  _QWORD *v149;
  _QWORD *v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  int *v154;
  std::vector<int> *v156;
  unint64_t v157;
  int **v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char *__p;
  char *v164;
  char *v165;
  int v166;
  int v167;
  _QWORD *v168;
  _QWORD *v169;
  uint64_t *v170;
  _QWORD *v171[2];
  int v172;
  int v173;
  char *v174;
  char *v175;
  _QWORD **v176;
  _QWORD *v177[2];
  int v178;
  int v179;
  char *v180;
  std::vector<unsigned int> *v181;
  uint64_t *v182;
  _QWORD *v183[2];
  int v184[3];

  v1 = *((unsigned int *)this + 2);
  v2 = *(unsigned int *)this;
  if ((int)v1 < 1 || (int)v2 < 1 || *((_DWORD *)this + 1) != 0)
    OpenSubdiv::v3_1_1::Vtr::internal::Level::completeTopologyFromFaceVertices();
  v6 = (char *)this + 264;
  std::vector<int>::resize((std::vector<unsigned int> *)this + 11, 2 * v1);
  std::vector<int>::resize((std::vector<unsigned int> *)this + 14, 2 * v1);
  std::vector<float>::resize((uint64_t)this + 408, v1);
  std::vector<OpenSubdiv::v3_1_1::Vtr::internal::Level::VTag>::resize((uint64_t)this + 432, v1);
  bzero(*((void **)this + 54), 2 * *((int *)this + 2));
  *(_DWORD *)this = v2;
  std::vector<int>::resize((std::vector<unsigned int> *)this + 1, 2 * v2);
  v7 = (char *)*((_QWORD *)this + 12);
  v8 = *((_QWORD *)this + 13) - (_QWORD)v7;
  if (v2 <= v8)
  {
    if (v2 < v8)
      *((_QWORD *)this + 13) = &v7[v2];
  }
  else
  {
    std::vector<OpenSubdiv::v3_1_1::Vtr::internal::Level::FTag>::__append((void **)this + 12, v2 - v8);
    v7 = (char *)*((_QWORD *)this + 12);
  }
  bzero(v7, *(int *)this);
  *((_DWORD *)this + 1) = 0;
  v156 = (std::vector<int> *)((char *)this + 144);
  std::vector<int>::resize((std::vector<unsigned int> *)this + 6, 0);
  std::vector<float>::resize((uint64_t)this + 216, 0);
  v9 = *((_QWORD *)this + 30);
  if (*((_QWORD *)this + 31) != v9)
    *((_QWORD *)this + 31) = v9;
  std::vector<int>::resize((std::vector<unsigned int> *)this + 3, (int)((uint64_t)(*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) >> 2));
  v10 = (void **)((char *)this + 120);
  v11 = 4 * (int)v1;
  std::vector<unsigned int>::reserve((std::vector<int> *)this + 5, v11);
  std::vector<unsigned int>::reserve((std::vector<int> *)this + 7, v11);
  std::vector<unsigned int>::reserve(v156, v11);
  v12 = 2;
  v180 = (char *)this + 144;
  v181 = (std::vector<unsigned int> *)((char *)this + 168);
  v183[0] = 0;
  v183[1] = 0;
  v182 = (uint64_t *)v183;
  v13 = *((_QWORD *)this + 18);
  v14 = (unint64_t)(*((_QWORD *)this + 19) - v13) >> 2;
  if ((v14 & 0x80000000) == 0)
    v15 = (unint64_t)(*((_QWORD *)this + 19) - v13) >> 2;
  else
    v15 = v14 + 1;
  v16 = v15 >> 1;
  v178 = v16;
  v179 = 2;
  if ((int)v14 >= 2)
  {
    v17 = 0;
    v18 = (_DWORD *)(v13 + 4);
    do
    {
      *(v18 - 1) = 0;
      *v18 = v179 * v17;
      v18 += 2;
      ++v17;
      v16 = v178;
    }
    while (v17 < v178);
    v12 = v179;
  }
  std::vector<int>::resize((std::vector<unsigned int> *)this + 7, v16 * v12);
  v19 = 6;
  v174 = v6;
  v175 = (char *)this + 288;
  v177[0] = 0;
  v177[1] = 0;
  v176 = v177;
  v20 = *((_QWORD *)this + 33);
  v21 = (unint64_t)(*((_QWORD *)this + 34) - v20) >> 2;
  if ((v21 & 0x80000000) == 0)
    v22 = (unint64_t)(*((_QWORD *)this + 34) - v20) >> 2;
  else
    v22 = v21 + 1;
  v23 = v22 >> 1;
  v172 = v23;
  v173 = 6;
  if ((int)v21 < 2)
  {
    v26 = 6;
  }
  else
  {
    v24 = 0;
    v25 = (_DWORD *)(v20 + 4);
    do
    {
      *(v25 - 1) = 0;
      *v25 = v173 * v24;
      v25 += 2;
      ++v24;
      v23 = v172;
    }
    while (v24 < v172);
    v26 = v173;
  }
  std::vector<int>::resize((std::vector<unsigned int> *)this + 12, v23 * v26);
  v168 = (_QWORD *)((char *)this + 336);
  v169 = (_QWORD *)((char *)this + 360);
  v171[0] = 0;
  v171[1] = 0;
  v170 = (uint64_t *)v171;
  v27 = *((_QWORD *)this + 42);
  v28 = (unint64_t)(*((_QWORD *)this + 43) - v27) >> 2;
  if ((v28 & 0x80000000) == 0)
    v29 = (unint64_t)(*((_QWORD *)this + 43) - v27) >> 2;
  else
    v29 = v28 + 1;
  v30 = v29 >> 1;
  v166 = v30;
  v167 = 6;
  if ((int)v28 >= 2)
  {
    v31 = 0;
    v32 = (_DWORD *)(v27 + 4);
    do
    {
      *(v32 - 1) = 0;
      *v32 = v167 * v31;
      v32 += 2;
      ++v31;
      v30 = v166;
    }
    while (v31 < v166);
    v19 = v167;
  }
  std::vector<int>::resize((std::vector<unsigned int> *)this + 15, v30 * v19);
  v33 = 0;
  __p = 0;
  v164 = 0;
  v165 = 0;
  v158 = (int **)((char *)this + 136);
  v157 = v2;
  do
  {
    v34 = (unsigned int *)(*((_QWORD *)this + 3) + 8 * v33);
    v35 = *v34;
    if ((int)v35 >= 1)
    {
      v36 = 0;
      v37 = (int)v34[1];
      v161 = *((_QWORD *)this + 9) + 4 * v37;
      v162 = *((_QWORD *)this + 6) + 4 * v37;
      v159 = v35;
      v160 = v33;
      while (1)
      {
        v38 = *(_DWORD *)(v162 + 4 * v36);
        v39 = v36 + 1;
        v40 = (v36 + 1);
        if (v36 + 1 == v35)
          v40 = 0;
        v41 = *(_DWORD *)(v162 + 4 * v40);
        if (v38 == v41)
        {
          v42 = v164;
          if (v164 < v165)
          {
            *(_DWORD *)v164 = *((_DWORD *)this + 1);
            v43 = v164 + 4;
LABEL_71:
            v164 = v43;
LABEL_72:
            LODWORD(v53) = *((_DWORD *)this + 1);
            *((_DWORD *)this + 1) = v53 + 1;
            v63 = (int *)*((_QWORD *)this + 16);
            v62 = (int *)*((_QWORD *)this + 17);
            if (v63 >= v62)
            {
              v65 = (int *)*v10;
              v66 = ((char *)v63 - (_BYTE *)*v10) >> 2;
              v67 = v66 + 1;
              if ((unint64_t)(v66 + 1) >> 62)
                goto LABEL_225;
              v68 = (char *)v62 - (char *)v65;
              if (v68 >> 1 > v67)
                v67 = v68 >> 1;
              if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFFCLL)
                v69 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v69 = v67;
              if (v69)
              {
                v70 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v158, v69);
                v65 = (int *)*((_QWORD *)this + 15);
                v63 = (int *)*((_QWORD *)this + 16);
              }
              else
              {
                v70 = 0;
              }
              v71 = (int *)&v70[4 * v66];
              *v71 = v38;
              v64 = v71 + 1;
              while (v63 != v65)
              {
                v72 = *--v63;
                *--v71 = v72;
              }
              v62 = (int *)&v70[4 * v69];
              *((_QWORD *)this + 15) = v71;
              *((_QWORD *)this + 16) = v64;
              *((_QWORD *)this + 17) = v62;
              if (v65)
              {
                operator delete(v65);
                v62 = *v158;
              }
            }
            else
            {
              *v63 = v38;
              v64 = v63 + 1;
            }
            *((_QWORD *)this + 16) = v64;
            if (v64 >= v62)
            {
              v74 = (int *)*v10;
              v75 = ((char *)v64 - (_BYTE *)*v10) >> 2;
              v76 = v75 + 1;
              if ((unint64_t)(v75 + 1) >> 62)
                goto LABEL_225;
              v77 = (char *)v62 - (char *)v74;
              if (v77 >> 1 > v76)
                v76 = v77 >> 1;
              if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFFCLL)
                v78 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v78 = v76;
              if (v78)
              {
                v79 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v158, v78);
                v74 = (int *)*((_QWORD *)this + 15);
                v64 = (int *)*((_QWORD *)this + 16);
              }
              else
              {
                v79 = 0;
              }
              v80 = (int *)&v79[4 * v75];
              *v80 = v41;
              v73 = v80 + 1;
              while (v64 != v74)
              {
                v81 = *--v64;
                *--v80 = v81;
              }
              *((_QWORD *)this + 15) = v80;
              *((_QWORD *)this + 16) = v73;
              *((_QWORD *)this + 17) = &v79[4 * v78];
              if (v74)
                operator delete(v74);
            }
            else
            {
              *v64 = v41;
              v73 = v64 + 1;
            }
            *((_QWORD *)this + 16) = v73;
            v82 = v180;
            v83 = (_DWORD *)*((_QWORD *)v180 + 1);
            v84 = *((_QWORD *)v180 + 2);
            if ((unint64_t)v83 >= v84)
            {
              v86 = *(_DWORD **)v180;
              v87 = ((uint64_t)v83 - *(_QWORD *)v180) >> 2;
              v88 = v87 + 1;
              if ((unint64_t)(v87 + 1) >> 62)
                goto LABEL_225;
              v89 = v84 - (_QWORD)v86;
              if (v89 >> 1 > v88)
                v88 = v89 >> 1;
              if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFFCLL)
                v90 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v90 = v88;
              if (v90)
              {
                v91 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v180 + 16), v90);
                v86 = *(_DWORD **)v82;
                v83 = (_DWORD *)*((_QWORD *)v82 + 1);
              }
              else
              {
                v91 = 0;
              }
              v92 = &v91[4 * v87];
              *(_DWORD *)v92 = 0;
              v85 = v92 + 4;
              while (v83 != v86)
              {
                v93 = *--v83;
                *((_DWORD *)v92 - 1) = v93;
                v92 -= 4;
              }
              *(_QWORD *)v82 = v92;
              *((_QWORD *)v82 + 1) = v85;
              *((_QWORD *)v82 + 2) = &v91[4 * v90];
              if (v86)
                operator delete(v86);
            }
            else
            {
              *v83 = 0;
              v85 = v83 + 1;
            }
            v94 = v10;
            *((_QWORD *)v82 + 1) = v85;
            v95 = v180;
            v96 = v179 * v178;
            v97 = (int *)*((_QWORD *)v180 + 1);
            v98 = *((_QWORD *)v180 + 2);
            if ((unint64_t)v97 >= v98)
            {
              v100 = *(int **)v180;
              v101 = ((uint64_t)v97 - *(_QWORD *)v180) >> 2;
              v102 = v101 + 1;
              if ((unint64_t)(v101 + 1) >> 62)
                goto LABEL_225;
              v103 = v98 - (_QWORD)v100;
              if (v103 >> 1 > v102)
                v102 = v103 >> 1;
              if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFFFCLL)
                v104 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v104 = v102;
              if (v104)
              {
                v105 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v180 + 16), v104);
                v100 = *(int **)v95;
                v97 = (int *)*((_QWORD *)v95 + 1);
              }
              else
              {
                v105 = 0;
              }
              v106 = (int *)&v105[4 * v101];
              *v106 = v96;
              v99 = v106 + 1;
              while (v97 != v100)
              {
                v107 = *--v97;
                *--v106 = v107;
              }
              *(_QWORD *)v95 = v106;
              *((_QWORD *)v95 + 1) = v99;
              *((_QWORD *)v95 + 2) = &v105[4 * v104];
              if (v100)
                operator delete(v100);
            }
            else
            {
              *v97 = v96;
              v99 = v97 + 1;
            }
            *((_QWORD *)v95 + 1) = v99;
            v108 = ++v178;
            std::vector<int>::resize(v181, v179 * v108);
            v10 = v94;
            v35 = v159;
            v33 = v160;
            goto LABEL_137;
          }
          v47 = __p;
          v48 = (v164 - __p) >> 2;
          v49 = v48 + 1;
          if ((unint64_t)(v48 + 1) >> 62)
            goto LABEL_225;
          v50 = v165 - __p;
          if ((v165 - __p) >> 1 > v49)
            v49 = v50 >> 1;
          if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL)
            v51 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v51 = v49;
          if (v51)
          {
            v52 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v165, v51);
            v47 = __p;
            v42 = v164;
          }
          else
          {
            v52 = 0;
          }
          v59 = &v52[4 * v48];
          *(_DWORD *)v59 = *((_DWORD *)this + 1);
          v43 = v59 + 4;
          while (v42 != v47)
          {
            v60 = *((_DWORD *)v42 - 1);
            v42 -= 4;
            *((_DWORD *)v59 - 1) = v60;
            v59 -= 4;
          }
          v61 = &v52[4 * v51];
          __p = v59;
          goto LABEL_69;
        }
        v184[0] = *(_DWORD *)(v162 + 4 * v36);
        v44 = *(unsigned int *)(*v168 + 8 * v38);
        if ((int)v44 <= v167)
        {
          v46 = (uint64_t *)(*v169 + 4 * *(int *)(*v168 + 4 * ((2 * v38) | 1)));
        }
        else
        {
          v45 = std::map<int,std::vector<int>>::operator[](&v170, v184);
          v46 = *v45;
          v44 = ((unint64_t)((char *)v45[1] - (char *)*v45) >> 2);
        }
        if ((int)v44 < 1)
          goto LABEL_72;
        while (1)
        {
          v54 = *(int *)v46;
          v46 = (uint64_t *)((char *)v46 + 4);
          v53 = v54;
          v55 = (char *)*v10 + 8 * v54;
          if (*v55 == v41 || v55[1] == v41)
            break;
          if (!--v44)
            goto LABEL_72;
        }
        if ((_DWORD)v53 == -1)
          goto LABEL_72;
        v184[0] = v53;
        LODWORD(v56) = *(_DWORD *)(*(_QWORD *)v180 + 8 * v53);
        if ((int)v56 <= v179)
        {
          v58 = &v181->__begin_[*(int *)(*(_QWORD *)v180 + 4 * (int)((2 * v53) | 1))];
        }
        else
        {
          v57 = std::map<int,std::vector<int>>::operator[](&v182, v184);
          v58 = (unsigned int *)*v57;
          v56 = (unint64_t)((char *)v57[1] - (char *)*v57) >> 2;
        }
        if (v33 == v58[(int)v56 - 1])
        {
          v110 = v164;
          v109 = v165;
          if (v164 >= v165)
          {
            v119 = __p;
            v120 = (v164 - __p) >> 2;
            v121 = v120 + 1;
            if ((unint64_t)(v120 + 1) >> 62)
              goto LABEL_225;
            v122 = v165 - __p;
            if ((v165 - __p) >> 1 > v121)
              v121 = v122 >> 1;
            if ((unint64_t)v122 >= 0x7FFFFFFFFFFFFFFCLL)
              v123 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v123 = v121;
            if (v123)
            {
              v124 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v165, v123);
              v119 = __p;
              v110 = v164;
            }
            else
            {
              v124 = 0;
            }
            v126 = &v124[4 * v120];
            *(_DWORD *)v126 = v53;
            v111 = v126 + 4;
            while (v110 != v119)
            {
              v127 = *((_DWORD *)v110 - 1);
              v110 -= 4;
              *((_DWORD *)v126 - 1) = v127;
              v126 -= 4;
            }
            v109 = &v124[4 * v123];
            __p = v126;
            v165 = v109;
            if (v119)
            {
              operator delete(v119);
              v109 = v165;
            }
          }
          else
          {
            *(_DWORD *)v164 = v53;
            v111 = v164 + 4;
          }
          if (v111 < v109)
          {
            *(_DWORD *)v111 = *((_DWORD *)this + 1);
            v43 = v111 + 4;
            goto LABEL_71;
          }
          v47 = __p;
          v128 = (v111 - __p) >> 2;
          v129 = v128 + 1;
          if ((unint64_t)(v128 + 1) >> 62)
            goto LABEL_225;
          v130 = v109 - __p;
          if (v130 >> 1 > v129)
            v129 = v130 >> 1;
          if ((unint64_t)v130 >= 0x7FFFFFFFFFFFFFFCLL)
            v131 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v131 = v129;
          if (v131)
          {
            v132 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v165, v131);
            v47 = __p;
          }
          else
          {
            v132 = 0;
          }
          v133 = &v132[4 * v128];
          *(_DWORD *)v133 = *((_DWORD *)this + 1);
          v43 = v133 + 4;
          while (v111 != v47)
          {
            v134 = *((_DWORD *)v111 - 1);
            v111 -= 4;
            *((_DWORD *)v133 - 1) = v134;
            v133 -= 4;
          }
          v61 = &v132[4 * v131];
          __p = v133;
LABEL_69:
          v165 = v61;
          if (v47)
            operator delete(v47);
          goto LABEL_71;
        }
        if ((int)v56 >= 2)
          break;
        if (v38 == *((_DWORD *)*v10 + 2 * v53))
        {
          v112 = v164;
          if (v164 < v165)
          {
LABEL_163:
            *(_DWORD *)v112 = v53;
            v125 = v112 + 4;
LABEL_203:
            v164 = v125;
            goto LABEL_137;
          }
          v113 = __p;
          v135 = (v164 - __p) >> 2;
          v136 = v135 + 1;
          if ((unint64_t)(v135 + 1) >> 62)
LABEL_225:
            abort();
          v137 = v165 - __p;
          if ((v165 - __p) >> 1 > v136)
            v136 = v137 >> 1;
          if ((unint64_t)v137 >= 0x7FFFFFFFFFFFFFFCLL)
            v117 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v117 = v136;
          if (v117)
          {
            v118 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v165, v117);
            v113 = __p;
            v112 = v164;
          }
          else
          {
            v118 = 0;
          }
          v138 = &v118[4 * v135];
          *(_DWORD *)v138 = v53;
          v125 = v138 + 4;
          while (v112 != v113)
          {
            v140 = *((_DWORD *)v112 - 1);
            v112 -= 4;
            *((_DWORD *)v138 - 1) = v140;
            v138 -= 4;
          }
LABEL_201:
          __p = v138;
          v165 = &v118[4 * v117];
          if (v113)
            operator delete(v113);
          goto LABEL_203;
        }
LABEL_137:
        *(_DWORD *)(v161 + 4 * v36++) = v53;
        if (v39 == v35)
          goto LABEL_204;
      }
      v112 = v164;
      if (v164 < v165)
        goto LABEL_163;
      v113 = __p;
      v114 = (v164 - __p) >> 2;
      v115 = v114 + 1;
      if ((unint64_t)(v114 + 1) >> 62)
        goto LABEL_225;
      v116 = v165 - __p;
      if ((v165 - __p) >> 1 > v115)
        v115 = v116 >> 1;
      if ((unint64_t)v116 >= 0x7FFFFFFFFFFFFFFCLL)
        v117 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v117 = v115;
      if (v117)
      {
        v118 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v165, v117);
        v113 = __p;
        v112 = v164;
      }
      else
      {
        v118 = 0;
      }
      v138 = &v118[4 * v114];
      *(_DWORD *)v138 = v53;
      v125 = v138 + 4;
      while (v112 != v113)
      {
        v139 = *((_DWORD *)v112 - 1);
        v112 -= 4;
        *((_DWORD *)v138 - 1) = v139;
        v138 -= 4;
      }
      goto LABEL_201;
    }
LABEL_204:
    ++v33;
  }
  while (v33 != v157);
  *((_DWORD *)this + 4) = v141;
  v144 = *((_DWORD *)this + 5);
  if (v144 < 1)
    OpenSubdiv::v3_1_1::Vtr::internal::Level::completeTopologyFromFaceVertices();
  if (v142 > v144)
    v144 = v142;
  if (v143 <= v144)
    v145 = v144;
  else
    v145 = v143;
  *((_DWORD *)this + 5) = v145;
  if (!HIWORD(v145))
  {
    v146 = *((int *)this + 1);
    std::vector<int>::resize((std::vector<unsigned int> *)v156, 2 * v146);
    std::vector<float>::resize((uint64_t)this + 216, v146);
    v147 = *((_QWORD *)this + 30);
    v148 = *((_QWORD *)this + 31) - v147;
    if (v146 <= v148)
    {
      v149 = (_QWORD *)((char *)this + 240);
      v150 = (_QWORD *)((char *)this + 432);
      if (v146 < v148)
        *((_QWORD *)this + 31) = v147 + v146;
    }
    else
    {
      v149 = (_QWORD *)((char *)this + 240);
      std::vector<OpenSubdiv::v3_1_1::Vtr::internal::Level::FTag>::__append((void **)this + 30, v146 - v148);
      v150 = (_QWORD *)((char *)this + 432);
    }
    if ((int)v146 >= 1)
      bzero(*((void **)this + 30), *((int *)this + 1));
    v151 = __p;
    if ((int)((unint64_t)(v164 - __p) >> 2) >= 1)
    {
      v152 = 0;
      do
      {
        v153 = *(int *)&v151[4 * v152];
        *(_BYTE *)(*v149 + v153) |= 1u;
        v154 = (int *)((char *)*v10 + 8 * v153);
        *(_WORD *)(*v150 + 2 * *v154) |= 1u;
        *(_WORD *)(*v150 + 2 * v154[1]) |= 1u;
        ++v152;
        v151 = __p;
      }
      while (v152 < (int)((unint64_t)(v164 - __p) >> 2));
    }
    OpenSubdiv::v3_1_1::Vtr::internal::Level::orientIncidentComponents((uint64_t)this);
    OpenSubdiv::v3_1_1::Vtr::internal::Level::populateLocalIndices(this);
  }
  if (__p)
    operator delete(__p);
  std::__tree<std::__value_type<SKNode *,std::vector<UITouch *>>,std::__map_value_compare<SKNode *,std::__value_type<SKNode *,std::vector<UITouch *>>,std::less<SKNode *>,true>,std::allocator<std::__value_type<SKNode *,std::vector<UITouch *>>>>::destroy((uint64_t)&v170, v171[0]);
  std::__tree<std::__value_type<SKNode *,std::vector<UITouch *>>,std::__map_value_compare<SKNode *,std::__value_type<SKNode *,std::vector<UITouch *>>,std::less<SKNode *>,true>,std::allocator<std::__value_type<SKNode *,std::vector<UITouch *>>>>::destroy((uint64_t)&v176, v177[0]);
  std::__tree<std::__value_type<SKNode *,std::vector<UITouch *>>,std::__map_value_compare<SKNode *,std::__value_type<SKNode *,std::vector<UITouch *>>,std::less<SKNode *>,true>,std::allocator<std::__value_type<SKNode *,std::vector<UITouch *>>>>::destroy((uint64_t)&v182, v183[0]);
  return v145 < 0x10000;
}

void OpenSubdiv::v3_1_1::Vtr::internal::`anonymous namespace'::DynamicRelation::appendCompMember(OpenSubdiv::v3_1_1::Vtr::internal::_anonymous_namespace_::DynamicRelation *this, int a2, unsigned int a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  std::vector<unsigned int> *v8;
  std::vector<unsigned int> *v9;
  uint64_t v10;
  unsigned int *value;
  std::vector<unsigned int>::pointer end;
  unsigned int *v13;
  std::vector<unsigned int>::pointer begin;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  int v23;

  v23 = a2;
  v5 = **((_QWORD **)this + 1);
  v6 = *(_DWORD *)(v5 + 8 * a2);
  v7 = *(int *)(v5 + 8 * a2 + 4);
  if (v6 >= *((_DWORD *)this + 1))
  {
    v8 = (std::vector<unsigned int> *)std::map<int,std::vector<int>>::operator[]((uint64_t **)this + 3, &v23);
    v9 = v8;
    v10 = *((int *)this + 1);
    if (v6 <= (int)v10)
    {
      std::vector<int>::resize(v8, v10 + 1);
      memcpy(v9->__begin_, (const void *)(**((_QWORD **)this + 2) + 4 * v7), 4 * *((int *)this + 1));
      v9->__begin_[*((int *)this + 1)] = a3;
    }
    else
    {
      value = v8->__end_cap_.__value_;
      end = v8->__end_;
      if (end >= value)
      {
        begin = v8->__begin_;
        v15 = end - v9->__begin_;
        v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 62)
          abort();
        v17 = (char *)value - (char *)begin;
        if (v17 >> 1 > v16)
          v16 = v17 >> 1;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
          v18 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v18 = v16;
        if (v18)
        {
          v19 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v9->__end_cap_, v18);
          begin = v9->__begin_;
          end = v9->__end_;
        }
        else
        {
          v19 = 0;
        }
        v20 = (unsigned int *)&v19[4 * v15];
        v21 = (unsigned int *)&v19[4 * v18];
        *v20 = a3;
        v13 = v20 + 1;
        while (end != begin)
        {
          v22 = *--end;
          *--v20 = v22;
        }
        v9->__begin_ = v20;
        v9->__end_ = v13;
        v9->__end_cap_.__value_ = v21;
        if (begin)
          operator delete(begin);
      }
      else
      {
        *end = a3;
        v13 = end + 1;
      }
      v9->__end_ = v13;
    }
  }
  else
  {
    *(_DWORD *)(**((_QWORD **)this + 2) + 4 * ((int)v7 + v6)) = a3;
  }
  ++*(_DWORD *)(**((_QWORD **)this + 1) + 8 * v23);
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::`anonymous namespace'::DynamicRelation::compressMemberIndices(OpenSubdiv::v3_1_1::Vtr::internal::_anonymous_namespace_::DynamicRelation *this)
{
  int *v2;
  int v3;
  uint64_t v4;
  char v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  std::vector<unsigned int> *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::vector<unsigned int>::pointer begin;
  int v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int *v23;
  int v25;
  std::vector<unsigned int> v26;

  v2 = (int *)**((_QWORD **)this + 1);
  v3 = *v2;
  LODWORD(v4) = *(_DWORD *)this;
  if (*((_QWORD *)this + 5))
  {
    if ((int)v4 < 2)
    {
      v5 = 0;
      v8 = *((unsigned int *)this + 1);
    }
    else
    {
      v5 = 0;
      v6 = v2 + 3;
      v7 = 1;
      do
      {
        *v6 = v3;
        v8 = *((unsigned int *)this + 1);
        v4 = *(int *)this;
        v5 |= v3 > (int)v8 * (int)v7;
        v3 += *(v6 - 1);
        ++v7;
        v6 += 2;
      }
      while (v7 < v4);
    }
    v12 = v5 | (v3 > (int)v8 * (int)v4);
    memset(&v26, 0, sizeof(v26));
    if (v5 & 1 | (v3 > (int)v8 * (int)v4))
    {
      v13 = &v26;
      std::vector<int>::resize(&v26, v3);
      LODWORD(v4) = *(_DWORD *)this;
      v8 = *((unsigned int *)this + 1);
    }
    else
    {
      v13 = (std::vector<unsigned int> *)*((_QWORD *)this + 2);
    }
    v25 = 0;
    if ((int)v4 >= 1)
    {
      v14 = 0;
      do
      {
        v15 = **((_QWORD **)this + 1);
        v16 = *(int *)(v15 + 8 * v14);
        v17 = *(int *)(v15 + 8 * v14 + 4);
        begin = v13->__begin_;
        v19 = *((_DWORD *)this + 1);
        if ((int)v16 <= v19)
        {
          v20 = (uint64_t *)(**((_QWORD **)this + 2) + 4 * v19 * v14);
        }
        else
        {
          v20 = *std::map<int,std::vector<int>>::operator[]((uint64_t **)this + 3, &v25);
          if ((int)v8 <= (int)v16)
            v8 = v16;
          else
            v8 = v8;
        }
        memmove(&begin[v17], v20, 4 * v16);
        v14 = v25 + 1;
        v25 = v14;
      }
      while (v14 < *(_DWORD *)this);
    }
    v21 = *((_QWORD *)this + 2);
    if ((v12 & 1) != 0)
    {
      v22 = *(unsigned int **)v21;
      *(_QWORD *)v21 = v26.__begin_;
      *(_QWORD *)(v21 + 8) = v26.__end_;
      v23 = *(unsigned int **)(v21 + 16);
      *(_QWORD *)(v21 + 16) = v26.__end_cap_.__value_;
      v26.__begin_ = v22;
      v26.__end_cap_.__value_ = v23;
      if (!v22)
        return v8;
      goto LABEL_29;
    }
    std::vector<int>::resize(*((std::vector<unsigned int> **)this + 2), v3);
    v22 = v26.__begin_;
    if (v26.__begin_)
    {
LABEL_29:
      v26.__end_ = v22;
      operator delete(v22);
    }
  }
  else
  {
    if ((int)v4 < 2)
    {
      v8 = *v2;
    }
    else
    {
      v9 = 0;
      v10 = 1;
      LODWORD(v8) = *v2;
      do
      {
        v11 = v2[v9 + 2];
        memmove((void *)(**((_QWORD **)this + 2) + 4 * v3), (const void *)(**((_QWORD **)this + 2) + 4 * v2[v9 + 3]), 4 * v11);
        v2 = (int *)**((_QWORD **)this + 1);
        v2[v9 + 3] = v3;
        v3 += v11;
        if ((int)v8 <= (int)v11)
          v8 = v11;
        else
          v8 = v8;
        ++v10;
        v9 += 2;
      }
      while (v10 < *(int *)this);
    }
    std::vector<int>::resize(*((std::vector<unsigned int> **)this + 2), v3);
  }
  return v8;
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::Level::orientIncidentComponents(uint64_t this)
{
  uint64_t v1;
  OpenSubdiv::v3_1_1::Vtr::internal::Level *v2;
  uint64_t i;
  uint64_t v4;

  v1 = *(unsigned int *)(this + 8);
  if ((int)v1 >= 1)
  {
    v2 = (OpenSubdiv::v3_1_1::Vtr::internal::Level *)this;
    for (i = 0; i != v1; ++i)
    {
      v4 = *((_QWORD *)v2 + 54);
      if ((*(_WORD *)(v4 + 2 * i) & 1) == 0)
      {
        this = OpenSubdiv::v3_1_1::Vtr::internal::Level::orderVertexFacesAndEdges(v2, i);
        if ((this & 1) == 0)
          *(_WORD *)(v4 + 2 * i) |= 1u;
      }
    }
  }
  return this;
}

void OpenSubdiv::v3_1_1::Vtr::internal::Level::populateLocalIndices(OpenSubdiv::v3_1_1::Vtr::internal::Level *this)
{
  uint64_t v2;
  uint64_t i;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  _WORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int32 *v14;
  uint64_t v15;
  __int32 *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  int v33;
  BOOL v34;
  __int16 v35;
  uint64_t j;
  unsigned int *v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  _WORD *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int32 *v47;
  uint64_t v48;
  __int32 *v49;
  int v50;
  int v51;
  uint64_t v52;

  v2 = *((unsigned int *)this + 2);
  v52 = *((unsigned int *)this + 1);
  std::vector<unsigned short>::resize((uint64_t)this + 312, (uint64_t)(*((_QWORD *)this + 37) - *((_QWORD *)this + 36)) >> 2);
  std::vector<unsigned short>::resize((uint64_t)this + 384, (uint64_t)(*((_QWORD *)this + 46) - *((_QWORD *)this + 45)) >> 2);
  std::vector<unsigned short>::resize((uint64_t)this + 192, (uint64_t)(*((_QWORD *)this + 22) - *((_QWORD *)this + 21)) >> 2);
  if ((int)v2 >= 1)
  {
    for (i = 0; i != v2; ++i)
    {
      v4 = (unsigned int *)(*((_QWORD *)this + 33) + 8 * i);
      v5 = *v4;
      if ((int)v5 >= 1)
      {
        v6 = (int)v4[1];
        v7 = (int *)(*((_QWORD *)this + 36) + 4 * v6);
        v8 = (_WORD *)(*((_QWORD *)this + 39) + 2 * v6);
        v9 = -1;
        do
        {
          v10 = *v7;
          if ((_DWORD)v10 == v9)
            v11 = (unsigned __int16)*(v8 - 1) + 1;
          else
            v11 = 0;
          v12 = *((_QWORD *)this + 3);
          v13 = *((_QWORD *)this + 6) + 4 * *(int *)(v12 + 4 * (int)((2 * v10) | 1));
          v14 = (__int32 *)(v13 + 4 * v11);
          v15 = v13 + 4 * *(int *)(v12 + 8 * v10);
          v16 = wmemchr(v14, i, (v15 - (uint64_t)v14) >> 2);
          if (v16)
            v17 = (int)v16;
          else
            v17 = v15;
          *v8++ = (v14 + ((v17 - (_DWORD)v14) & 0x3FFFC) - v13) >> 2;
          v18 = *v7++;
          v9 = v18;
          --v5;
        }
        while (v5);
      }
    }
    v19 = 0;
    v20 = *((_QWORD *)this + 45);
    v21 = *((_QWORD *)this + 42);
    v22 = *((_QWORD *)this + 48);
    while (1)
    {
      v23 = (unsigned int *)(v21 + 8 * v19);
      v24 = *v23;
      if ((int)v24 >= 1)
        break;
LABEL_26:
      if (*((_DWORD *)this + 5) > (int)v24)
        LODWORD(v24) = *((_DWORD *)this + 5);
      *((_DWORD *)this + 5) = v24;
      if (++v19 == v2)
        goto LABEL_29;
    }
    v25 = 0;
    v26 = (int)v23[1];
    v27 = v20 + 4 * v26;
    v28 = v22 + 2 * v26;
    v29 = *((_QWORD *)this + 15);
    while (1)
    {
      v30 = *(int *)(v27 + 4 * v25);
      v31 = (int *)(v29 + 8 * v30);
      v33 = *v31;
      v32 = v31[1];
      if (v33 != (_DWORD)v32)
        break;
      if (v25)
      {
        v34 = (_DWORD)v30 == *(_DWORD *)(v27 + 4 * v25 - 4);
        goto LABEL_20;
      }
      v35 = 0;
LABEL_23:
      *(_WORD *)(v28 + 2 * v25++) = v35;
      if (v24 == v25)
        goto LABEL_26;
    }
    v34 = v19 == v32;
LABEL_20:
    v35 = v34;
    goto LABEL_23;
  }
LABEL_29:
  if ((int)v52 >= 1)
  {
    for (j = 0; j != v52; ++j)
    {
      v37 = (unsigned int *)(*((_QWORD *)this + 18) + 8 * j);
      v38 = *v37;
      if ((int)v38 >= 1)
      {
        v39 = (int)v37[1];
        v40 = (int *)(*((_QWORD *)this + 21) + 4 * v39);
        v41 = (_WORD *)(*((_QWORD *)this + 24) + 2 * v39);
        v42 = -1;
        do
        {
          v43 = *v40;
          if ((_DWORD)v43 == v42)
            v44 = (unsigned __int16)*(v41 - 1) + 1;
          else
            v44 = 0;
          v45 = *((_QWORD *)this + 3);
          v46 = *((_QWORD *)this + 9) + 4 * *(int *)(v45 + 4 * (int)((2 * v43) | 1));
          v47 = (__int32 *)(v46 + 4 * v44);
          v48 = v46 + 4 * *(int *)(v45 + 8 * v43);
          v49 = wmemchr(v47, j, (v48 - (uint64_t)v47) >> 2);
          if (v49)
            v50 = (int)v49;
          else
            v50 = v48;
          *v41++ = (v47 + ((v50 - (_DWORD)v47) & 0x3FFFC) - v46) >> 2;
          v51 = *v40++;
          v42 = v51;
          --v38;
        }
        while (v38);
      }
    }
  }
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::Level::orderVertexFacesAndEdges(OpenSubdiv::v3_1_1::Vtr::internal::Level *this, __int32 __c)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v17;
  void *__p;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 36);
  v5 = *((_QWORD *)this + 33);
  v6 = (8 * ((unint64_t)(2 * __c) >> 1)) | 4;
  v7 = *(int *)(v5 + v6);
  v8 = 8 * __c;
  v9 = *(int *)(v5 + v8);
  v10 = *((_QWORD *)this + 42);
  v11 = *(int *)(v10 + v6);
  v12 = *((_QWORD *)this + 45);
  v13 = *(int *)(v10 + v8);
  v14 = &v17;
  __p = 0;
  if ((v13 + v9) >= 0x21)
  {
    v14 = (uint64_t *)operator new(4 * (v13 + v9));
    __p = v14;
  }
  v15 = OpenSubdiv::v3_1_1::Vtr::internal::Level::orderVertexFacesAndEdges(this, __c, (int *)v14, (int *)v14 + v9);
  if ((_DWORD)v15)
  {
    memcpy((void *)(v4 + 4 * v7), v14, 4 * v9);
    memcpy((void *)(v12 + 4 * v11), (char *)v14 + 4 * v9, 4 * v13);
  }
  operator delete(__p);
  return v15;
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::Level::createFVarChannel(_QWORD *a1, int a2, _WORD *a3)
{
  std::vector<unsigned int> *v6;
  uint64_t v7;
  unint64_t v8;
  std::vector<unsigned int> **v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  std::vector<unsigned int> **v17;
  char *v18;
  char *v19;
  char *v20;
  std::vector<unsigned int> *v21;

  v6 = (std::vector<unsigned int> *)operator new();
  OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::FVarLevel((uint64_t)v6, (uint64_t)a1);
  OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::setOptions(v7, a3);
  OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::resizeValues((uint64_t)v6, a2);
  OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::resizeComponents(v6);
  v9 = (std::vector<unsigned int> **)a1[58];
  v8 = a1[59];
  if ((unint64_t)v9 >= v8)
  {
    v11 = a1[57];
    v12 = ((uint64_t)v9 - v11) >> 3;
    if ((unint64_t)(v12 + 1) >> 61)
      abort();
    v13 = v8 - v11;
    v14 = v13 >> 2;
    if (v13 >> 2 <= (unint64_t)(v12 + 1))
      v14 = v12 + 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v15 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    if (v15)
      v16 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Statement *>>((uint64_t)(a1 + 59), v15);
    else
      v16 = 0;
    v17 = (std::vector<unsigned int> **)&v16[8 * v12];
    v18 = &v16[8 * v15];
    *v17 = v6;
    v10 = v17 + 1;
    v20 = (char *)a1[57];
    v19 = (char *)a1[58];
    if (v19 != v20)
    {
      do
      {
        v21 = (std::vector<unsigned int> *)*((_QWORD *)v19 - 1);
        v19 -= 8;
        *--v17 = v21;
      }
      while (v19 != v20);
      v19 = (char *)a1[57];
    }
    a1[57] = v17;
    a1[58] = v10;
    a1[59] = v18;
    if (v19)
      operator delete(v19);
  }
  else
  {
    *v9 = v6;
    v10 = v9 + 1;
  }
  a1[58] = v10;
  return (((unint64_t)v10 - a1[57]) >> 3) - 1;
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::Level::getNumFVarValues(OpenSubdiv::v3_1_1::Vtr::internal::Level *this, int a2)
{
  return *(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 57) + 8 * a2) + 16);
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::Level::getFVarOptions(OpenSubdiv::v3_1_1::Vtr::internal::Level *this, int a2)
{
  return *(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 57) + 8 * a2) + 8);
}

void OpenSubdiv::v3_1_1::Vtr::internal::Level::completeFVarChannelTopology(OpenSubdiv::v3_1_1::Vtr::internal::Level *this, int a2, int a3)
{
  OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::completeTopologyFromFaceValues(*(OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel **)(*((_QWORD *)this + 57) + 8 * a2), a3);
}

void std::vector<OpenSubdiv::v3_1_1::Vtr::internal::Level::VTag>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 1;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 2 * a2;
  }
  else
  {
    std::vector<OpenSubdiv::v3_1_1::Vtr::internal::Level::VTag>::__append((char **)a1, a2 - v2);
  }
}

void std::vector<OpenSubdiv::v3_1_1::Vtr::internal::Level::VTag>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  __int16 v17;

  v4 = (uint64_t)(a1 + 2);
  v5 = a1[2];
  v6 = a1[1];
  if (a2 <= (v5 - v6) >> 1)
  {
    a1[1] = &v6[2 * a2];
  }
  else
  {
    v7 = *a1;
    v8 = v6 - *a1;
    v9 = a2 + (v8 >> 1);
    if (v9 < 0)
      abort();
    v10 = v8 >> 1;
    v11 = v5 - v7;
    if (v11 > v9)
      v9 = v11;
    if (v11 >= 0x7FFFFFFFFFFFFFFELL)
      v12 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned short>>(v4, v12);
      v7 = *a1;
      v6 = a1[1];
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[2 * v10];
    v15 = &v13[2 * v12];
    v16 = &v14[2 * a2];
    if (v6 != v7)
    {
      do
      {
        v17 = *((_WORD *)v6 - 1);
        v6 -= 2;
        *((_WORD *)v14 - 1) = v17;
        v14 -= 2;
      }
      while (v6 != v7);
      v7 = *a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v7)
      operator delete(v7);
  }
}

void std::vector<OpenSubdiv::v3_1_1::Vtr::internal::Level::FTag>::__append(void **a1, unint64_t a2)
{
  _BYTE *v4;
  char *v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char v15;

  v5 = (char *)a1[1];
  v4 = a1[2];
  if (v4 - v5 >= a2)
  {
    a1[1] = &v5[a2];
  }
  else
  {
    v6 = (unint64_t)*a1;
    v7 = (char *)(v5 - (_BYTE *)*a1);
    v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0)
      abort();
    v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      v11 = (char *)operator new(v10);
    else
      v11 = 0;
    v12 = &v11[v10];
    v13 = &v7[(_QWORD)v11 + a2];
    if (v5 == (char *)v6)
    {
      v11 = &v7[(_QWORD)v11];
    }
    else
    {
      v14 = &v5[~v6];
      do
      {
        v15 = *--v5;
        (v14--)[(_QWORD)v11] = v15;
      }
      while (v5 != (char *)v6);
      v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
}

uint64_t **std::map<int,std::vector<int>>::operator[](uint64_t **a1, int *a2)
{
  uint64_t *v3;
  uint64_t **v4;
  int v5;
  uint64_t **v6;
  int v7;
  _DWORD *v8;

  v4 = a1 + 1;
  v3 = a1[1];
  v5 = *a2;
  if (v3)
  {
    while (1)
    {
      while (1)
      {
        v6 = (uint64_t **)v3;
        v7 = *((_DWORD *)v3 + 8);
        if (v5 >= v7)
          break;
        v3 = *v6;
        v4 = v6;
        if (!*v6)
          goto LABEL_9;
      }
      if (v7 >= v5)
        break;
      v3 = v6[1];
      if (!v3)
      {
        v4 = v6 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v6 = a1 + 1;
LABEL_9:
    v8 = operator new(0x40uLL);
    v8[8] = v5;
    *((_QWORD *)v8 + 6) = 0;
    *((_QWORD *)v8 + 7) = 0;
    *((_QWORD *)v8 + 5) = 0;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__insert_node_at(a1, (uint64_t)v6, v4, (uint64_t *)v8);
    v6 = (uint64_t **)v8;
  }
  return v6 + 5;
}

void OpenSubdiv::v3_1_1::Vtr::internal::Level::orderVertexFacesAndEdges()
{
  __assert_rtn("orderVertexFacesAndEdges", "level.cpp", 2024, "fCountOrdered == fCount");
}

void OpenSubdiv::v3_1_1::Vtr::internal::Level::gatherQuadRegularPartialRingAroundVertex()
{
  __assert_rtn("gatherQuadRegularPartialRingAroundVertex", "level.cpp", 764, "! level.isVertexNonManifold(vIndex)");
}

void OpenSubdiv::v3_1_1::Vtr::internal::Level::gatherQuadRegularInteriorPatchPoints()
{
  __assert_rtn("gatherQuadRegularInteriorPatchPoints", "level.cpp", 861, "(0 <= rotation) && (rotation < 4)");
}

void OpenSubdiv::v3_1_1::Vtr::internal::Level::gatherQuadRegularBoundaryPatchPoints()
{
  __assert_rtn("gatherQuadRegularBoundaryPatchPoints", "level.cpp", 960, "(boundaryFaceInV0Faces >= 0) && (boundaryFaceInV1Faces >= 0)");
}

void OpenSubdiv::v3_1_1::Vtr::internal::Level::gatherQuadRegularCornerPatchPoints()
{
  __assert_rtn("gatherQuadRegularCornerPatchPoints", "level.cpp", 1070, "cornerFaceInIntVertFaces >= 0");
}

void OpenSubdiv::v3_1_1::Vtr::internal::Level::completeTopologyFromFaceVertices()
{
  __assert_rtn("completeTopologyFromFaceVertices", "level.cpp", 1665, "(vCount > 0) && (fCount > 0) && (eCount == 0)");
}

{
  __assert_rtn("completeTopologyFromFaceVertices", "level.cpp", 1780, "_maxValence > 0");
}

OpenSubdiv::v3_1_1::Osd::MTLStencilTable *OpenSubdiv::v3_1_1::Osd::MTLStencilTable::MTLStencilTable(OpenSubdiv::v3_1_1::Osd::MTLStencilTable *this, const OpenSubdiv::v3_1_1::Far::StencilTable *a2, MTLContext *a3)
{
  id var0;
  uint64_t v7;

  if (!a3)
    OpenSubdiv::v3_1_1::Osd::MTLStencilTable::MTLStencilTable();
  var0 = a3->var0;
  if (!a3->var0 || !a3->var1)
    OpenSubdiv::v3_1_1::Osd::MTLStencilTable::MTLStencilTable();
  v7 = (*((_QWORD *)a2 + 3) - *((_QWORD *)a2 + 2)) >> 2;
  *((_DWORD *)this + 12) = v7;
  if ((int)v7 < 1)
  {
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
  }
  else
  {
    *(_QWORD *)this = objc_msgSend(var0, "newBufferWithBytes:length:options:");
    *((_QWORD *)this + 1) = objc_msgSend(a3->var0, "newBufferWithBytes:length:options:", *((_QWORD *)a2 + 5), *((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 5), 0);
    *((_QWORD *)this + 2) = objc_msgSend(a3->var0, "newBufferWithBytes:length:options:", *((_QWORD *)a2 + 8), *((_QWORD *)a2 + 9) - *((_QWORD *)a2 + 8), 0);
    *((_QWORD *)this + 3) = objc_msgSend(a3->var0, "newBufferWithBytes:length:options:", *((_QWORD *)a2 + 11), *((_QWORD *)a2 + 12) - *((_QWORD *)a2 + 11), 0);
    objc_msgSend(*(id *)this, "setLabel:", CFSTR("StencilTable Sizes"));
    objc_msgSend(*((id *)this + 1), "setLabel:", CFSTR("StencilTable Offsets"));
    objc_msgSend(*((id *)this + 2), "setLabel:", CFSTR("StencilTable Indices"));
    objc_msgSend(*((id *)this + 3), "setLabel:", CFSTR("StencilTable Weights"));
  }
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  return this;
}

void OpenSubdiv::v3_1_1::Osd::MTLStencilTable::~MTLStencilTable(id *this)
{

}

uint64_t OpenSubdiv::v3_1_1::Osd::MTLComputeEvaluator::Create(const BufferDescriptor *this, const BufferDescriptor *a2, const BufferDescriptor *a3, const BufferDescriptor *a4, MTLContext *a5, MTLContext *a6)
{
  uint64_t v11;

  if (!a5)
    OpenSubdiv::v3_1_1::Osd::MTLComputeEvaluator::Create();
  if (!a5->var0 || !a5->var1)
    OpenSubdiv::v3_1_1::Osd::MTLComputeEvaluator::Create();
  v11 = operator new();
  *(_QWORD *)(v11 + 8) = 0;
  *(_QWORD *)(v11 + 16) = 0;
  *(_QWORD *)v11 = 0;
  *(_DWORD *)(v11 + 24) = 32;
  if ((OpenSubdiv::v3_1_1::Osd::MTLComputeEvaluator::Compile((id *)v11, this, a2, a3, a4, a5) & 1) == 0)
  {
    OpenSubdiv::v3_1_1::Osd::MTLLegacyGregoryPatchTable::~MTLLegacyGregoryPatchTable((id *)v11);
    MEMORY[0x1DF0D41C0](v11, 0x1080C40AA79BA9DLL);
    return 0;
  }
  return v11;
}

void sub_1DCFAC5F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0D41C0](v1, 0x1080C40AA79BA9DLL);
  _Unwind_Resume(a1);
}

uint64_t OpenSubdiv::v3_1_1::Osd::MTLComputeEvaluator::Compile(id *this, const BufferDescriptor *a2, const BufferDescriptor *a3, const BufferDescriptor *a4, const BufferDescriptor *a5, MTLContext *a6)
{
  id v12;
  _BOOL8 v14;
  OpenSubdiv::v3_1_1::Osd::MTLPatchShaderSource *v15;
  void **v16;
  uint64_t v17;
  id v18;
  void **v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  const char *v43;
  const char *v44;
  void *__p[2];
  unsigned __int8 v47;
  _BYTE v48[16];
  _QWORD v49[33];
  _QWORD v50[21];
  _QWORD v51[22];

  v51[21] = *MEMORY[0x1E0C80C00];
  if (!a6)
    OpenSubdiv::v3_1_1::Osd::MTLComputeEvaluator::Compile();
  if (!a6->var0 || !a6->var1)
    OpenSubdiv::v3_1_1::Osd::MTLComputeEvaluator::Compile();
  v12 = objc_alloc_init(MEMORY[0x1E0CC6A68]);
  objc_msgSend(v12, "setLanguageVersion:", C3DOpenSubdivMetalVersion());
  objc_msgSend(v12, "setPreprocessorMacros:", 0);
  objc_msgSend(v12, "setAdditionalCompilerArguments:", CFSTR(" -w "));
  v14 = a4->var1 > 0 || a5->var1 > 0;
  if (v14)
    printf("Using OPENSUBDIV_MTL_COMPUTE_USE_DERIVATIVES");
  v50[0] = CFSTR("LENGTH");
  v51[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a2->var1);
  v50[1] = CFSTR("SRC_STRIDE");
  v51[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a2->var2);
  v50[2] = CFSTR("DST_STRIDE");
  v51[2] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a3->var2);
  v50[3] = CFSTR("WORK_GROUP_SIZE");
  v51[3] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *((unsigned int *)this + 6));
  v50[4] = CFSTR("OPENSUBDIV_MTL_COMPUTE_USE_DERIVATIVES");
  v50[5] = CFSTR("PARAMETER_BUFFER_INDEX");
  v50[6] = CFSTR("SIZES_BUFFER_INDEX");
  v51[6] = &unk_1EA5FF2B8;
  v51[7] = &unk_1EA5FF2D0;
  v50[7] = CFSTR("OFFSETS_BUFFER_INDEX");
  v50[8] = CFSTR("INDICES_BUFFER_INDEX");
  v51[8] = &unk_1EA5FF2E8;
  v51[9] = &unk_1EA5FF300;
  v50[9] = CFSTR("WEIGHTS_BUFFER_INDEX");
  v50[10] = CFSTR("SRC_VERTEX_BUFFER_INDEX");
  v51[10] = &unk_1EA5FF318;
  v51[11] = &unk_1EA5FF330;
  v50[11] = CFSTR("DST_VERTEX_BUFFER_INDEX");
  v50[12] = CFSTR("DU_WEIGHTS_BUFFER_INDEX");
  v51[12] = &unk_1EA5FF348;
  v51[13] = &unk_1EA5FF360;
  v50[13] = CFSTR("DV_WEIGHTS_BUFFER_INDEX");
  v50[14] = CFSTR("DU_DERIVATIVE_BUFFER_INDEX");
  v51[14] = &unk_1EA5FF378;
  v51[15] = &unk_1EA5FF390;
  v50[15] = CFSTR("DV_DERIVATIVE_BUFFER_INDEX");
  v50[16] = CFSTR("PATCH_ARRAYS_BUFFER_INDEX");
  v51[16] = &unk_1EA5FF3A8;
  v51[17] = &unk_1EA5FF3C0;
  v50[17] = CFSTR("PATCH_COORDS_BUFFER_INDEX");
  v50[18] = CFSTR("PATCH_INDICES_BUFFER_INDEX");
  v51[18] = &unk_1EA5FF3D8;
  v51[19] = &unk_1EA5FF3F0;
  v51[4] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v14);
  v51[5] = &unk_1EA5FF2A0;
  v50[19] = CFSTR("PATCH_PARAMS_BUFFER_INDEX");
  v50[20] = CFSTR("C3D_OPTIMIZE_OPENSUBDIV_STORAGE");
  v51[20] = &unk_1EA5FF2A0;
  objc_msgSend(v12, "setPreprocessorMacros:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v51, v50, 21));
  v15 = (OpenSubdiv::v3_1_1::Osd::MTLPatchShaderSource *)std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v48);
  OpenSubdiv::v3_1_1::Osd::MTLPatchShaderSource::GetPatchBasisShaderSource((uint64_t *)__p, v15);
  if ((v47 & 0x80u) == 0)
    v16 = __p;
  else
    v16 = (void **)__p[0];
  if ((v47 & 0x80u) == 0)
    v17 = v47;
  else
    v17 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v49, (uint64_t)v16, v17);
  if ((char)v47 < 0)
    operator delete(__p[0]);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v49, (uint64_t)aLine0OsdMtlcom, 9645);
  v18 = objc_alloc(MEMORY[0x1E0CB3940]);
  std::stringbuf::str();
  if ((v47 & 0x80u) == 0)
    v19 = __p;
  else
    v19 = (void **)__p[0];
  v20 = (void *)objc_msgSend(v18, "initWithUTF8String:", v19);
  if ((char)v47 < 0)
    operator delete(__p[0]);
  __p[0] = 0;
  *this = (id)objc_msgSend(a6->var0, "newLibraryWithSource:options:error:", v20, v12, __p);

  if (!*this)
  {
    if (__p[0])
      LOBYTE(v42) = objc_msgSend((id)objc_msgSend(__p[0], "localizedDescription"), "UTF8String");
    else
      v42 = "";
    OpenSubdiv::v3_1_1::Far::Error(4, (uint64_t)"Error compiling MTL Shader: %s\n", v21, v22, v23, v24, v25, v26, (char)v42);
    goto LABEL_41;
  }
  v27 = (void *)objc_msgSend(*this, "newFunctionWithName:", CFSTR("eval_stencils"));
  this[1] = (id)objc_msgSend(a6->var0, "newComputePipelineStateWithFunction:error:", v27, __p);

  if (!this[1])
  {
    if (__p[0])
      LOBYTE(v43) = objc_msgSend((id)objc_msgSend(__p[0], "localizedDescription"), "UTF8String");
    else
      v43 = "";
    OpenSubdiv::v3_1_1::Far::Error(4, (uint64_t)"Error compiling MTL Pipeline eval_stencils: %s\n", v28, v29, v30, v31, v32, v33, (char)v43);
    goto LABEL_41;
  }
  v34 = (void *)objc_msgSend(*this, "newFunctionWithName:", CFSTR("eval_patches"));
  this[2] = (id)objc_msgSend(a6->var0, "newComputePipelineStateWithFunction:error:", v34, __p);

  if (!this[2])
  {
    if (__p[0])
      LOBYTE(v44) = objc_msgSend((id)objc_msgSend(__p[0], "localizedDescription"), "UTF8String");
    else
      v44 = "";
    OpenSubdiv::v3_1_1::Far::Error(4, (uint64_t)"Error compiling MTL Pipeline eval_patches:  %s\n", v35, v36, v37, v38, v39, v40, (char)v44);
LABEL_41:
    v41 = 0;
    goto LABEL_42;
  }
  v41 = 1;
LABEL_42:
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)v48);
  return v41;
}

void sub_1DCFACAF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL OpenSubdiv::v3_1_1::Osd::MTLComputeEvaluator::EvalStencils(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, int *a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9, __n128 a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, int a19, _QWORD *a20)
{
  uint64_t v20;
  void *v22;
  BOOL v23;
  int v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  void *v32;
  uint64_t v33;
  _BOOL4 v34;
  uint64_t v37;
  int64x2_t v38;
  uint64_t v39;
  int64x2_t v40;
  _DWORD v41[4];
  __n128 v42;
  __n128 v43;

  v20 = *(_QWORD *)(a1 + 8);
  if (v20 && a19 - a18 >= 1)
  {
    if (!a20)
      OpenSubdiv::v3_1_1::Osd::MTLComputeEvaluator::EvalStencils();
    v22 = (void *)a20[1];
    if (*a20)
      v23 = v22 == 0;
    else
      v23 = 1;
    if (v23)
      OpenSubdiv::v3_1_1::Osd::MTLComputeEvaluator::EvalStencils();
    v41[0] = a18;
    v41[1] = a19;
    v26 = *a5;
    v41[2] = *a3;
    v41[3] = v26;
    a9.n128_u64[0] = *(_QWORD *)a7;
    a9.n128_u32[2] = *(_DWORD *)(a7 + 8);
    a10.n128_u64[0] = *(_QWORD *)a11;
    a10.n128_u32[2] = *(_DWORD *)(a11 + 8);
    v42 = a9;
    v43 = a10;
    v27 = (void *)a20[2];
    v28 = (void *)a20[3];
    if (v28)
    {
      v34 = 0;
      v29 = (void *)a20[3];
      objc_msgSend(v28, "setBytes:length:atIndex:", v41, 48, 0, v27);
    }
    else
    {
      v34 = v27 == 0;
      if (!v27)
        v27 = (void *)objc_msgSend(v22, "commandBuffer");
      v29 = (void *)objc_msgSend(v27, "computeCommandEncoder", v27);
      objc_msgSend(v29, "setBytes:length:atIndex:", v41, 48, 0, v33);
    }
    objc_msgSend(v29, "setBuffer:offset:atIndex:", a12, 0, 1);
    objc_msgSend(v29, "setBuffer:offset:atIndex:", a15, 0, 4);
    objc_msgSend(v29, "setBuffer:offset:atIndex:", a13, 0, 2);
    objc_msgSend(v29, "setBuffer:offset:atIndex:", a14, 0, 3);
    objc_msgSend(v29, "setBuffer:offset:atIndex:", a2, 0, 6);
    objc_msgSend(v29, "setBuffer:offset:atIndex:", a4, 0, 5);
    if (a16 && a17)
    {
      objc_msgSend(v29, "setBuffer:offset:atIndex:");
      objc_msgSend(v29, "setBuffer:offset:atIndex:", a17, 0, 8);
    }
    objc_msgSend(v29, "setBuffer:offset:atIndex:", a6, 0, 9);
    objc_msgSend(v29, "setBuffer:offset:atIndex:", a8, 0, 10);
    objc_msgSend(v29, "setComputePipelineState:", *(_QWORD *)(a1 + 8));
    v30 = *(int *)(a1 + 24);
    v39 = (a19 - a18 + (int)v30 - 1) / (int)v30;
    v40 = vdupq_n_s64(1uLL);
    v37 = v30;
    v38 = v40;
    objc_msgSend(v29, "dispatchThreadgroups:threadsPerThreadgroup:", &v39, &v37);
    if (!v28)
      objc_msgSend(v29, "endEncoding");
    if (v34)
      objc_msgSend(v32, "commit");
  }
  return v20 != 0;
}

void OpenSubdiv::v3_1_1::Osd::MTLStencilTable::MTLStencilTable()
{
  __assert_rtn("MTLStencilTable", "mtlComputeEvaluator.mm", 130, "context != nil");
}

{
  __assert_rtn("MTLStencilTable", "mtlComputeEvaluator.mm", 131, "context->device != nil && context->commandQueue != nil");
}

void OpenSubdiv::v3_1_1::Osd::MTLComputeEvaluator::Create()
{
  __assert_rtn("Create", "mtlComputeEvaluator.mm", 241, "context != nil");
}

{
  __assert_rtn("Create", "mtlComputeEvaluator.mm", 242, "context->device != nil && context->commandQueue != nil");
}

void OpenSubdiv::v3_1_1::Osd::MTLComputeEvaluator::Compile()
{
  __assert_rtn("Compile", "mtlComputeEvaluator.mm", 259, "context != nil");
}

{
  __assert_rtn("Compile", "mtlComputeEvaluator.mm", 260, "context->device != nil && context->commandQueue != nil");
}

void OpenSubdiv::v3_1_1::Osd::MTLComputeEvaluator::EvalStencils()
{
  __assert_rtn("EvalStencils", "mtlComputeEvaluator.mm", 403, "context != nullptr");
}

{
  __assert_rtn("EvalStencils", "mtlComputeEvaluator.mm", 408, "device != nil && commandQueue != nil");
}

uint64_t OpenSubdiv::v3_1_1::Far::StencilTableFactory::Create(uint64_t a1, unint64_t a2)
{
  unsigned int v3;
  unint64_t v4;
  int v5;
  unsigned int *v6;
  uint64_t NumFVarValues;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  OpenSubdiv::v3_1_1::Vtr::internal::Level *v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t StencilOffsets;
  uint64_t StencilSizes;
  uint64_t StencilSources;
  uint64_t StencilWeights;
  _BYTE *v25;
  int v26;
  _BYTE *v27;
  int v28;
  int *v29;
  _BYTE v30[8];

  v3 = (unsigned __int16)a2;
  v4 = HIDWORD(a2);
  v5 = a2 & 3;
  v6 = **(unsigned int ***)(a1 + 88);
  if (v5 == 2)
    NumFVarValues = OpenSubdiv::v3_1_1::Vtr::internal::Level::getNumFVarValues((OpenSubdiv::v3_1_1::Vtr::internal::Level *)v6, SHIDWORD(a2));
  else
    NumFVarValues = v6[2];
  v8 = (v3 >> 6) & 0xF;
  v9 = *(unsigned __int8 *)(a1 + 8);
  if (((v9 >> 2) & 0xF) >= v8)
    v10 = (v3 >> 6) & 0xF;
  else
    v10 = (v9 >> 2) & 0xF;
  if (!(v3 & 8 | v10))
  {
    v11 = operator new();
    *(_QWORD *)v11 = &off_1EA598468;
    *(_OWORD *)(v11 + 16) = 0u;
    *(_OWORD *)(v11 + 32) = 0u;
    *(_OWORD *)(v11 + 48) = 0u;
    *(_OWORD *)(v11 + 64) = 0u;
    *(_OWORD *)(v11 + 80) = 0u;
    *(_OWORD *)(v11 + 96) = 0u;
    *(_DWORD *)(v11 + 8) = NumFVarValues;
    return v11;
  }
  OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::StencilBuilder((OpenSubdiv::v3_1_1::Far::internal::StencilBuilder *)v30, NumFVarValues, 1, 1);
  v29 = (int *)a1;
  v27 = v30;
  v28 = 0;
  v25 = v30;
  v26 = NumFVarValues;
  if (v10)
  {
    v12 = 0;
    if (((v9 >> 2) & 0xF) < v8)
      v8 = (v9 >> 2) & 0xF;
    v13 = 24;
    while (1)
    {
      v14 = (v12 + 1);
      if (v5 == 1)
        break;
      if (!v5)
      {
        OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Interpolate<OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index>((uint64_t *)&v29, v14, (uint64_t)&v27, (uint64_t)&v25);
        if ((v3 & 0x20) == 0)
          goto LABEL_21;
        goto LABEL_20;
      }
      OpenSubdiv::v3_1_1::Far::PrimvarRefiner::InterpolateFaceVarying<OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index>(&v29, v14, (uint64_t *)&v27, (uint64_t *)&v25, v4);
      if ((v3 & 0x20) != 0)
        goto LABEL_20;
LABEL_21:
      v15 = *(OpenSubdiv::v3_1_1::Vtr::internal::Level **)(*(_QWORD *)(a1 + 88) + v13);
      if (v5 == 2)
        v16 = OpenSubdiv::v3_1_1::Vtr::internal::Level::getNumFVarValues(v15, v4);
      else
        v16 = *((_DWORD *)v15 + 2);
      v17 = v26 + v16;
      v26 += v16;
      if ((v3 & 0x20) == 0)
        OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::SetCoarseVertCount((uint64_t)v30, v17);
      ++v12;
      v13 += 24;
      if (v8 == v12)
      {
        v18 = v28;
        goto LABEL_29;
      }
    }
    OpenSubdiv::v3_1_1::Far::PrimvarRefiner::InterpolateVarying<OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index>((uint64_t)&v29, v14, (uint64_t *)&v27, (uint64_t *)&v25);
    if ((v3 & 0x20) == 0)
      goto LABEL_21;
LABEL_20:
    v27 = v25;
    v28 = v26;
    goto LABEL_21;
  }
  v18 = 0;
LABEL_29:
  if ((v3 & 0x10) != 0)
    v18 = NumFVarValues;
  v19 = v18;
  v11 = operator new();
  StencilOffsets = OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::GetStencilOffsets((OpenSubdiv::v3_1_1::Far::internal::StencilBuilder *)v30);
  StencilSizes = OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::GetStencilSizes((OpenSubdiv::v3_1_1::Far::internal::StencilBuilder *)v30);
  StencilSources = OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::GetStencilSources((OpenSubdiv::v3_1_1::Far::internal::StencilBuilder *)v30);
  StencilWeights = OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::GetStencilWeights((OpenSubdiv::v3_1_1::Far::internal::StencilBuilder *)v30);
  OpenSubdiv::v3_1_1::Far::StencilTable::StencilTable(v11, NumFVarValues, StencilOffsets, StencilSizes, StencilSources, StencilWeights, (v3 >> 3) & 1, v19);
  OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::~StencilBuilder((OpenSubdiv::v3_1_1::Far::internal::StencilBuilder *)v30);
  return v11;
}

void OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Interpolate<OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index>(uint64_t *a1, int a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  int v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  uint64_t i;
  int v16;
  int v17;
  uint64_t v18;
  _QWORD v19[2];
  _QWORD v20[2];
  uint64_t *v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  void *__p;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v4 = a2 - 1;
  if (a2 < 1 || (int)((*(_QWORD *)(*a1 + 72) - *(_QWORD *)(*a1 + 64)) >> 3) < a2)
    OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Interpolate<OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index>();
  v9 = *(_DWORD *)*a1;
  if (v9)
  {
    if (v9 == 2)
    {
      OpenSubdiv::v3_1_1::Far::PrimvarRefiner::interpFromFaces<(OpenSubdiv::v3_1_1::Sdc::SchemeType)1,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index>((uint64_t)a1, a2, a3, a4);
      OpenSubdiv::v3_1_1::Far::PrimvarRefiner::interpFromEdges<(OpenSubdiv::v3_1_1::Sdc::SchemeType)2,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index>(a1, a2, (uint64_t *)a3, (uint64_t *)a4);
      OpenSubdiv::v3_1_1::Far::PrimvarRefiner::interpFromVerts<(OpenSubdiv::v3_1_1::Sdc::SchemeType)2,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index>(a1, a2, (uint64_t *)a3, (uint64_t *)a4);
    }
    else if (v9 == 1)
    {
      OpenSubdiv::v3_1_1::Far::PrimvarRefiner::interpFromFaces<(OpenSubdiv::v3_1_1::Sdc::SchemeType)1,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index>((uint64_t)a1, a2, a3, a4);
      OpenSubdiv::v3_1_1::Far::PrimvarRefiner::interpFromEdges<(OpenSubdiv::v3_1_1::Sdc::SchemeType)1,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index>(a1, a2, (uint64_t *)a3, (uint64_t *)a4);
      OpenSubdiv::v3_1_1::Far::PrimvarRefiner::interpFromVerts<(OpenSubdiv::v3_1_1::Sdc::SchemeType)1,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index>(a1, a2, (uint64_t *)a3, (uint64_t *)a4);
    }
  }
  else
  {
    OpenSubdiv::v3_1_1::Far::PrimvarRefiner::interpFromFaces<(OpenSubdiv::v3_1_1::Sdc::SchemeType)1,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index>((uint64_t)a1, a2, a3, a4);
    OpenSubdiv::v3_1_1::Far::PrimvarRefiner::interpFromEdges<(OpenSubdiv::v3_1_1::Sdc::SchemeType)0,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index>((uint64_t)a1, a2, (uint64_t *)a3, (uint64_t *)a4);
    v10 = 0;
    v11 = *(_QWORD *)(*(_QWORD *)(*a1 + 64) + 8 * v4);
    v12 = *(_QWORD *)(v11 + 8);
    v13 = 2 * *(_DWORD *)(v12 + 20);
    v21 = &v24;
    v22 = v13;
    v23 = 32;
    __p = 0;
    if (v13 >= 0x21)
    {
      v10 = operator new(4 * v13);
      __p = v10;
      v21 = (uint64_t *)v10;
      v23 = v13;
    }
    v14 = *(_DWORD *)(v12 + 8);
    if (v14 >= 1)
    {
      for (i = 0; i < v14; ++i)
      {
        v16 = *(_DWORD *)(*(_QWORD *)(v11 + 240) + 4 * i);
        if (v16 != -1)
        {
          v17 = *(_DWORD *)(a4 + 8);
          v20[0] = *(_QWORD *)a4;
          v20[1] = (v17 + v16);
          v18 = (i + *(_DWORD *)(a3 + 8));
          v19[0] = *(_QWORD *)a3;
          v19[1] = v18;
          OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index::AddWithWeight((uint64_t)v20, (uint64_t)v19, 1.0);
          v14 = *(_DWORD *)(v12 + 8);
        }
      }
      v10 = __p;
    }
    operator delete(v10);
  }
}

void OpenSubdiv::v3_1_1::Far::PrimvarRefiner::InterpolateVarying<OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index>(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  unsigned int *v12;
  uint64_t v13;
  int *v14;
  float v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t i;
  int v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t j;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  if (a2 < 1
    || (v4 = *(_QWORD *)(*(_QWORD *)a1 + 64),
        (int)((unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 72) - v4) >> 3) < a2))
  {
    OpenSubdiv::v3_1_1::Far::PrimvarRefiner::InterpolateVarying<OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index>();
  }
  v7 = *(_QWORD *)(v4 + 8 * (a2 - 1));
  v8 = *(_QWORD *)(v7 + 8);
  if (*(int *)(v7 + 52) >= 1)
  {
    v9 = *(_DWORD *)v8;
    if (*(int *)v8 >= 1)
    {
      v10 = 0;
      do
      {
        v11 = *(_DWORD *)(*(_QWORD *)(v7 + 168) + 4 * v10);
        if (v11 != -1)
        {
          v12 = (unsigned int *)(*(_QWORD *)(v8 + 24) + 8 * v10);
          v13 = *v12;
          if ((int)v13 >= 1)
          {
            v14 = (int *)(*(_QWORD *)(v8 + 48) + 4 * (int)v12[1]);
            v15 = 1.0 / (float)(int)v13;
            do
            {
              v16 = (*((_DWORD *)a4 + 2) + v11);
              v35 = *a4;
              v36 = v16;
              v17 = *v14++;
              v18 = (*((_DWORD *)a3 + 2) + v17);
              v33 = *a3;
              v34 = v18;
              OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index::AddWithWeight((uint64_t)&v35, (uint64_t)&v33, v15);
              --v13;
            }
            while (v13);
            v9 = *(_DWORD *)v8;
          }
        }
        ++v10;
      }
      while (v10 < v9);
    }
  }
  v19 = *(_DWORD *)(v8 + 4);
  if (v19 >= 1)
  {
    v20 = 0;
    for (i = 0; i < v19; ++i)
    {
      v22 = *(_DWORD *)(*(_QWORD *)(v7 + 216) + 4 * i);
      if (v22 != -1)
      {
        v23 = (_DWORD *)(*(_QWORD *)(v8 + 120) + v20);
        v24 = (*((_DWORD *)a4 + 2) + v22);
        v35 = *a4;
        v36 = v24;
        v25 = (*((_DWORD *)a3 + 2) + *v23);
        v33 = *a3;
        v34 = v25;
        OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index::AddWithWeight((uint64_t)&v35, (uint64_t)&v33, 0.5);
        v26 = (*((_DWORD *)a4 + 2) + v22);
        v35 = *a4;
        v36 = v26;
        v27 = (*((_DWORD *)a3 + 2) + v23[1]);
        v33 = *a3;
        v34 = v27;
        OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index::AddWithWeight((uint64_t)&v35, (uint64_t)&v33, 0.5);
        v19 = *(_DWORD *)(v8 + 4);
      }
      v20 += 8;
    }
  }
  v28 = *(_DWORD *)(v8 + 8);
  if (v28 >= 1)
  {
    for (j = 0; j < v28; ++j)
    {
      v30 = *(_DWORD *)(*(_QWORD *)(v7 + 240) + 4 * j);
      if (v30 != -1)
      {
        v31 = *((_DWORD *)a4 + 2);
        v35 = *a4;
        v36 = (v31 + v30);
        v32 = (j + *((_DWORD *)a3 + 2));
        v33 = *a3;
        v34 = v32;
        OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index::AddWithWeight((uint64_t)&v35, (uint64_t)&v33, 1.0);
        v28 = *(_DWORD *)(v8 + 8);
      }
    }
  }
}

void OpenSubdiv::v3_1_1::Far::PrimvarRefiner::InterpolateFaceVarying<OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index>(int **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, int a5)
{
  int v10;

  if ((int)a2 < 1 || (int)((*((_QWORD *)*a1 + 9) - *((_QWORD *)*a1 + 8)) >> 3) < (int)a2)
    OpenSubdiv::v3_1_1::Far::PrimvarRefiner::InterpolateFaceVarying<OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index>();
  v10 = **a1;
  if (v10)
  {
    if (v10 == 2)
    {
      OpenSubdiv::v3_1_1::Far::PrimvarRefiner::interpFVarFromFaces<(OpenSubdiv::v3_1_1::Sdc::SchemeType)1,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index>((uint64_t)a1, a2, (uint64_t)a3, (uint64_t)a4, a5);
      OpenSubdiv::v3_1_1::Far::PrimvarRefiner::interpFVarFromEdges<(OpenSubdiv::v3_1_1::Sdc::SchemeType)2,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index>((uint64_t)a1, a2, a3, a4, a5);
      OpenSubdiv::v3_1_1::Far::PrimvarRefiner::interpFVarFromVerts<(OpenSubdiv::v3_1_1::Sdc::SchemeType)2,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index>((uint64_t)a1, a2, (uint64_t)a3, (uint64_t)a4, a5);
    }
    else if (v10 == 1)
    {
      OpenSubdiv::v3_1_1::Far::PrimvarRefiner::interpFVarFromFaces<(OpenSubdiv::v3_1_1::Sdc::SchemeType)1,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index>((uint64_t)a1, a2, (uint64_t)a3, (uint64_t)a4, a5);
      OpenSubdiv::v3_1_1::Far::PrimvarRefiner::interpFVarFromEdges<(OpenSubdiv::v3_1_1::Sdc::SchemeType)1,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index>((uint64_t)a1, a2, a3, a4, a5);
      OpenSubdiv::v3_1_1::Far::PrimvarRefiner::interpFVarFromVerts<(OpenSubdiv::v3_1_1::Sdc::SchemeType)1,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index>((uint64_t)a1, a2, (uint64_t)a3, (uint64_t)a4, a5);
    }
  }
  else
  {
    OpenSubdiv::v3_1_1::Far::PrimvarRefiner::interpFVarFromFaces<(OpenSubdiv::v3_1_1::Sdc::SchemeType)1,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index>((uint64_t)a1, a2, (uint64_t)a3, (uint64_t)a4, a5);
    OpenSubdiv::v3_1_1::Far::PrimvarRefiner::interpFVarFromEdges<(OpenSubdiv::v3_1_1::Sdc::SchemeType)0,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index>((uint64_t)a1, a2, a3, a4, a5);
    OpenSubdiv::v3_1_1::Far::PrimvarRefiner::interpFVarFromVerts<(OpenSubdiv::v3_1_1::Sdc::SchemeType)0,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index>((uint64_t)a1, a2, (uint64_t)a3, a4, a5);
  }
}

uint64_t OpenSubdiv::v3_1_1::Far::StencilTableFactory::AppendLocalPointStencilTable(OpenSubdiv::v3_1_1::Far::StencilTableFactory *this, const OpenSubdiv::v3_1_1::Far::TopologyRefiner *a2, const OpenSubdiv::v3_1_1::Far::StencilTable *a3, const OpenSubdiv::v3_1_1::Far::StencilTable *a4)
{
  return OpenSubdiv::v3_1_1::Far::StencilTableFactory::appendLocalPointStencilTable(this, a2, a3, (const OpenSubdiv::v3_1_1::Far::StencilTable *)0xFFFFFFFFLL, (int)a4);
}

uint64_t OpenSubdiv::v3_1_1::Far::StencilTableFactory::appendLocalPointStencilTable(OpenSubdiv::v3_1_1::Far::StencilTableFactory *this, const OpenSubdiv::v3_1_1::Far::TopologyRefiner *a2, const OpenSubdiv::v3_1_1::Far::StencilTable *a3, const OpenSubdiv::v3_1_1::Far::StencilTable *a4, int a5)
{
  uint64_t v5;
  int v8;
  OpenSubdiv::v3_1_1::Vtr::internal::Level *v11;
  int NumFVarValues;
  unint64_t v13;
  unint64_t v14;
  int NumFVarValuesTotal;
  int v16;
  uint64_t v17;
  uint64_t NumVertsInStencil;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int *v40;
  int v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  size_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  int *v51;
  int v52;
  _QWORD *StencilOffsets;
  uint64_t v54;
  uint64_t v55;
  int *v56;
  unint64_t v57;
  int v58;
  _DWORD *v59;
  uint64_t v60;
  int v61;
  unint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t i;
  unsigned int *v70[3];
  char *v71;
  int v72;
  char *v73;
  int v74;
  char v75[8];

  v5 = 0;
  if (a2 && a3)
  {
    if (((*((_QWORD *)a3 + 3) - *((_QWORD *)a3 + 2)) & 0x3FFFFFFFCLL) != 0)
    {
      v8 = (int)a4;
      v11 = (OpenSubdiv::v3_1_1::Vtr::internal::Level *)**((_QWORD **)this + 11);
      if ((a4 & 0x80000000) != 0)
        NumFVarValues = *((_DWORD *)v11 + 2);
      else
        NumFVarValues = OpenSubdiv::v3_1_1::Vtr::internal::Level::getNumFVarValues(v11, (int)a4);
      v13 = *((_QWORD *)a2 + 3) - *((_QWORD *)a2 + 2);
      v14 = v13 >> 2;
      v67 = *((_QWORD *)a2 + 8);
      v68 = *((_QWORD *)a2 + 9);
      if (v8 < 0)
        NumFVarValuesTotal = *((_DWORD *)this + 5);
      else
        NumFVarValuesTotal = OpenSubdiv::v3_1_1::Far::TopologyRefiner::GetNumFVarValuesTotal(this, v8);
      if (NumFVarValuesTotal == (_DWORD)v14)
      {
        v16 = 0;
      }
      else
      {
        v16 = NumFVarValues;
        if (NumFVarValuesTotal - NumFVarValues != (_DWORD)v14)
          OpenSubdiv::v3_1_1::Far::StencilTableFactory::appendLocalPointStencilTable();
      }
      v63 = v13 >> 2;
      v66 = v13;
      v17 = (*((_QWORD *)a3 + 3) - *((_QWORD *)a3 + 2)) >> 2;
      v65 = NumFVarValues;
      NumVertsInStencil = (uint64_t)OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::StencilBuilder((OpenSubdiv::v3_1_1::Far::internal::StencilBuilder *)v75, NumFVarValues, 0, a5);
      v73 = v75;
      v74 = 0;
      v71 = v75;
      v21 = v17;
      v72 = 0;
      v64 = v17;
      if ((int)v17 < 1)
      {
        v23 = 0;
      }
      else
      {
        v22 = 0;
        v23 = 0;
        for (i = v17; i != v22; v21 = i)
        {
          v24 = *((_QWORD *)a3 + 5);
          v25 = *((_QWORD *)a3 + 6);
          if (v24 == v25 || v22 >= (int)((unint64_t)(v25 - v24) >> 2))
            OpenSubdiv::v3_1_1::Far::StencilTableFactory::appendLocalPointStencilTable(NumVertsInStencil, v19, v20);
          v26 = *(int *)(v24 + 4 * v22);
          v27 = *((_QWORD *)a3 + 2);
          v28 = *((_QWORD *)a3 + 8);
          v29 = *((_QWORD *)a3 + 11);
          v73 = v75;
          v74 = v22;
          if (*(int *)(v27 + 4 * v22) >= 1)
          {
            v30 = 0;
            v31 = v28 + 4 * v26;
            v32 = v29 + 4 * v26;
            do
            {
              v33 = *(float *)(v32 + 4 * v30);
              if (v33 != 0.0)
              {
                v34 = *(_DWORD *)(v31 + 4 * v30);
                if (a5)
                {
                  v35 = *((_QWORD *)a2 + 5);
                  v36 = *((_QWORD *)a2 + 6);
                  if (v35 == v36 || (v37 = v34 - v16, v37 >= (int)((unint64_t)(v36 - v35) >> 2)))
                    OpenSubdiv::v3_1_1::Far::StencilTableFactory::appendLocalPointStencilTable(NumVertsInStencil, v19, v20);
                  v38 = *(int *)(v35 + 4 * v37);
                  v39 = (unsigned int *)(*((_QWORD *)a2 + 8) + 4 * v38);
                  v40 = (unsigned int *)(*((_QWORD *)a2 + 11) + 4 * v38);
                  v70[0] = (unsigned int *)(*((_QWORD *)a2 + 2) + 4 * v37);
                  v70[1] = v39;
                  v70[2] = v40;
                  OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index::AddWithWeight((uint64_t)&v73, v70, v33);
                }
                else
                {
                  v71 = v75;
                  v72 = v34 + v16;
                  OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index::AddWithWeight((uint64_t)&v73, (uint64_t)&v71, v33);
                }
              }
              ++v30;
            }
            while (v30 < *(int *)(v27 + 4 * v22));
          }
          NumVertsInStencil = OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::GetNumVertsInStencil((OpenSubdiv::v3_1_1::Far::internal::StencilBuilder *)v75, v22);
          v23 += NumVertsInStencil;
          ++v22;
        }
      }
      v5 = operator new();
      *(_QWORD *)v5 = &off_1EA598468;
      *(_OWORD *)(v5 + 32) = 0u;
      *(_OWORD *)(v5 + 48) = 0u;
      *(_OWORD *)(v5 + 80) = 0u;
      *(_OWORD *)(v5 + 96) = 0u;
      *(_OWORD *)(v5 + 64) = 0u;
      *(_OWORD *)(v5 + 16) = 0u;
      v41 = v23 + ((unint64_t)(v68 - v67) >> 2);
      v42 = v68 - v67;
      *(_DWORD *)(v5 + 8) = v65;
      std::vector<int>::resize((std::vector<unsigned int> *)(v5 + 16), v64 + (int)v63);
      std::vector<int>::resize((std::vector<unsigned int> *)(v5 + 64), v41);
      std::vector<float>::resize(v5 + 88, v41);
      v43 = *(char **)(v5 + 16);
      v44 = *(char **)(v5 + 64);
      v45 = *(char **)(v5 + 88);
      v46 = (int)(v66 >> 2);
      memcpy(v43, *((const void **)a2 + 2), 4 * v46);
      v47 = (v68 - v67) << 30 >> 30;
      memcpy(v44, *((const void **)a2 + 8), v47);
      memcpy(v45, *((const void **)a2 + 11), v47);
      if (v64 >= 1)
      {
        v48 = 0;
        v49 = &v45[v42 << 30 >> 30];
        v50 = &v44[v42 << 30 >> 30];
        v51 = (int *)&v43[4 * v46];
        do
        {
          v52 = OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::GetNumVertsInStencil((OpenSubdiv::v3_1_1::Far::internal::StencilBuilder *)v75, v48);
          StencilOffsets = (_QWORD *)OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::GetStencilOffsets((OpenSubdiv::v3_1_1::Far::internal::StencilBuilder *)v75);
          if (v52 >= 1)
          {
            v54 = v52;
            v55 = 4 * *(int *)(*StencilOffsets + 4 * v48);
            do
            {
              *(_DWORD *)v50 = *(_DWORD *)(*(_QWORD *)OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::GetStencilSources((OpenSubdiv::v3_1_1::Far::internal::StencilBuilder *)v75)
                                         + v55);
              v50 += 4;
              *(_DWORD *)v49 = *(_DWORD *)(*(_QWORD *)OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::GetStencilWeights((OpenSubdiv::v3_1_1::Far::internal::StencilBuilder *)v75)
                                         + v55);
              v49 += 4;
              v55 += 4;
              --v54;
            }
            while (v54);
          }
          *v51++ = v52;
          ++v48;
        }
        while (v48 != v21);
      }
      std::vector<int>::resize((std::vector<unsigned int> *)(v5 + 40), (int)((uint64_t)(*(_QWORD *)(v5 + 24) - *(_QWORD *)(v5 + 16)) >> 2));
      v56 = *(int **)(v5 + 16);
      v57 = *(_QWORD *)(v5 + 24) - (_QWORD)v56;
      if ((int)(v57 >> 2) >= 1)
      {
        v58 = 0;
        v59 = *(_DWORD **)(v5 + 40);
        v60 = (v57 >> 2);
        do
        {
          *v59++ = v58;
          v61 = *v56++;
          v58 += v61;
          --v60;
        }
        while (v60);
      }
      OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::~StencilBuilder((OpenSubdiv::v3_1_1::Far::internal::StencilBuilder *)v75);
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

void OpenSubdiv::v3_1_1::Far::PrimvarRefiner::interpFromFaces<(OpenSubdiv::v3_1_1::Sdc::SchemeType)1,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index>(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  float *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];
  _QWORD v23[2];
  float *v24;
  int v25;
  int v26;
  uint64_t v27;
  void *__p;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 64) + 8 * (a2 - 1));
  if (*(_DWORD *)(v4 + 52))
  {
    v7 = 0;
    v8 = *(_QWORD *)(v4 + 8);
    v9 = *(unsigned int *)(v8 + 20);
    v24 = (float *)&v27;
    v25 = v9;
    v26 = 16;
    __p = 0;
    if (v9 >= 0x11)
    {
      v7 = operator new(4 * v9);
      __p = v7;
      v24 = (float *)v7;
      v26 = v9;
    }
    v10 = *(_DWORD *)v8;
    if (*(int *)v8 >= 1)
    {
      v11 = 0;
      do
      {
        v12 = *(_DWORD *)(*(_QWORD *)(v4 + 168) + 4 * v11);
        if (v12 != -1)
        {
          v13 = (unsigned int *)(*(_QWORD *)(v8 + 24) + 8 * v11);
          v14 = *v13;
          if ((int)v14 >= 1)
          {
            v15 = *(_QWORD *)(v8 + 48) + 4 * (int)v13[1];
            v16 = v24;
            v17 = v14;
            do
            {
              *v16++ = 1.0 / (float)(int)v14;
              --v17;
            }
            while (v17);
            v18 = 0;
            v19 = 4 * v14;
            do
            {
              v20 = (*(_DWORD *)(a4 + 8) + v12);
              v23[0] = *(_QWORD *)a4;
              v23[1] = v20;
              v21 = (*(_DWORD *)(a3 + 8) + *(_DWORD *)(v15 + v18));
              v22[0] = *(_QWORD *)a3;
              v22[1] = v21;
              OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index::AddWithWeight((uint64_t)v23, (uint64_t)v22, v24[v18 / 4]);
              v18 += 4;
            }
            while (v19 != v18);
            v10 = *(_DWORD *)v8;
          }
        }
        ++v11;
      }
      while (v11 < v10);
      v7 = __p;
    }
    operator delete(v7);
  }
}

void OpenSubdiv::v3_1_1::Far::PrimvarRefiner::interpFromEdges<(OpenSubdiv::v3_1_1::Sdc::SchemeType)1,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index>(uint64_t *a1, int a2, uint64_t *a3, uint64_t *a4)
{
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t i;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[5];
  uint64_t v44;
  int v45;
  int v46;
  float *v47;
  int v48;
  int v49;
  uint64_t v50;
  void *__p;
  float v52[2];
  uint64_t v53;

  v7 = 0;
  v53 = *MEMORY[0x1E0C80C00];
  v8 = *a1;
  v9 = *(_QWORD *)(*(_QWORD *)(v8 + 64) + 8 * (a2 - 1));
  v10 = *(_QWORD *)(v9 + 8);
  v38 = *(_QWORD *)(v9 + 16);
  v46 = *(_DWORD *)(v8 + 4);
  v11 = *(unsigned int *)(v10 + 16);
  v47 = (float *)&v50;
  v48 = v11;
  v49 = 8;
  v44 = v10;
  __p = 0;
  if (v11 >= 9)
  {
    v7 = operator new(4 * v11);
    __p = v7;
    v47 = (float *)v7;
    v49 = v11;
  }
  v12 = *(_DWORD *)(v10 + 4);
  if (v12 >= 1)
  {
    for (i = 0; i < v12; ++i)
    {
      v14 = *(int *)(*(_QWORD *)(v9 + 216) + 4 * i);
      if ((_DWORD)v14 != -1)
      {
        v15 = (_DWORD *)(*(_QWORD *)(v10 + 120) + 8 * i);
        v16 = *(_QWORD *)(v10 + 168);
        v17 = (unsigned int *)(*(_QWORD *)(v10 + 144) + 8 * i);
        v18 = *v17;
        v19 = (int)v17[1];
        v43[0] = v52;
        v43[1] = 0;
        v43[2] = v47;
        memset(&v43[3], 0, 13);
        v45 = i;
        if (*(float *)(*(_QWORD *)(v10 + 216) + 4 * i) <= 0.0)
          v20 = 1;
        else
          v20 = 4;
        OpenSubdiv::v3_1_1::Sdc::Scheme<(OpenSubdiv::v3_1_1::Sdc::SchemeType)1>::ComputeEdgeVertexMask<OpenSubdiv::v3_1_1::Vtr::internal::EdgeInterface,OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Mask>(&v46, (OpenSubdiv::v3_1_1::Vtr::internal::EdgeInterface *)&v44, (uint64_t)v43, v20, (*(unsigned __int16 *)(*(_QWORD *)(v38 + 432) + 2 * v14) >> 7) & 0xF);
        v21 = (*((_DWORD *)a4 + 2) + v14);
        v41 = *a4;
        v42 = v21;
        v22 = (*((_DWORD *)a3 + 2) + *v15);
        v39 = *a3;
        v40 = v22;
        OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index::AddWithWeight((uint64_t)&v41, (uint64_t)&v39, v52[0]);
        v23 = (*((_DWORD *)a4 + 2) + v14);
        v41 = *a4;
        v42 = v23;
        v24 = (*((_DWORD *)a3 + 2) + v15[1]);
        v39 = *a3;
        v40 = v24;
        OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index::AddWithWeight((uint64_t)&v41, (uint64_t)&v39, v52[1]);
        if (SLODWORD(v43[4]) >= 1 && (int)v18 >= 1)
        {
          v25 = 0;
          v26 = v16 + 4 * v19;
          do
          {
            if (BYTE4(v43[4]))
            {
              if (*(int *)(v9 + 52) <= 0)
                OpenSubdiv::v3_1_1::Far::PrimvarRefiner::interpFromEdges<(OpenSubdiv::v3_1_1::Sdc::SchemeType)1,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index>();
              v27 = *(_DWORD *)(*(_QWORD *)(v9 + 168) + 4 * *(int *)(v26 + 4 * v25));
              if (v27 == -1)
                OpenSubdiv::v3_1_1::Far::PrimvarRefiner::interpFromEdges<(OpenSubdiv::v3_1_1::Sdc::SchemeType)1,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index>();
              v28 = *a4;
              v29 = *((_DWORD *)a4 + 2);
              v41 = *a4;
              v42 = (v29 + v14);
            }
            else
            {
              v30 = 0;
              v31 = *(int *)(v26 + 4 * v25);
              v32 = *(_QWORD *)(v10 + 24);
              v33 = *(int *)(v32 + 8 * v31 + 4);
              v34 = *(_DWORD *)(v32 + 8 * (_DWORD)v31);
              do
                v35 = *(unsigned int *)(*(_QWORD *)(v10 + 72) + 4 * v33 + 4 * v30++);
              while (i != v35);
              v36 = *(_QWORD *)(v10 + 48) + 4 * v33;
              if ((int)v30 + 1 < v34)
                v34 = 0;
              v27 = *(_DWORD *)(v36 + 4 * ((int)v30 - v34 + 1));
              v37 = (*((_DWORD *)a4 + 2) + v14);
              v41 = *a4;
              v42 = v37;
              v28 = *a3;
              v29 = *((_DWORD *)a3 + 2);
            }
            v39 = v28;
            v40 = (v29 + v27);
            OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index::AddWithWeight((uint64_t)&v41, (uint64_t)&v39, v47[v25++]);
          }
          while (v25 != v18);
        }
        v12 = *(_DWORD *)(v10 + 4);
      }
    }
    v7 = __p;
  }
  operator delete(v7);
}

void OpenSubdiv::v3_1_1::Far::PrimvarRefiner::interpFromVerts<(OpenSubdiv::v3_1_1::Sdc::SchemeType)1,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index>(uint64_t *a1, int a2, uint64_t *a3, uint64_t *a4)
{
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  uint64_t i;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  float *v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  int v26;
  int v27;
  float v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[5];
  float v47;
  _QWORD v48[2];
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  uint64_t *v54;
  unsigned int v55;
  int v56;
  uint64_t v57;
  void *__p;
  uint64_t v59;

  v7 = 0;
  v59 = *MEMORY[0x1E0C80C00];
  v8 = *a1;
  v9 = *(_QWORD **)(*(_QWORD *)(v8 + 64) + 8 * (a2 - 1));
  v11 = v9[1];
  v10 = v9[2];
  v53 = *(_DWORD *)(v8 + 4);
  v12 = 2 * *(_DWORD *)(v11 + 20);
  v54 = &v57;
  v55 = v12;
  v56 = 32;
  v48[0] = v11;
  v48[1] = v10;
  v37 = v10;
  __p = 0;
  if (v12 >= 0x21)
  {
    v7 = operator new(4 * v12);
    __p = v7;
    v54 = (uint64_t *)v7;
    v56 = v12;
  }
  v13 = *(_DWORD *)(v11 + 8);
  if (v13 >= 1)
  {
    for (i = 0; i < v13; ++i)
    {
      v15 = *(_DWORD *)(v9[30] + 4 * i);
      if (v15 != -1)
      {
        v40 = *(_QWORD *)(v11 + 360);
        v16 = *(_QWORD *)(v11 + 336);
        v17 = (8 * i) | 4;
        v39 = *(int *)(v16 + v17);
        v18 = *(int *)(v16 + 8 * i);
        v19 = *(_QWORD *)(v11 + 264);
        v38 = *(int *)(v19 + v17);
        v20 = *(unsigned int *)(v19 + 8 * i);
        v47 = 0.0;
        v21 = v54;
        v41 = v18;
        v22 = (float *)v54 + v18;
        v46[0] = &v47;
        v46[1] = v54;
        v46[2] = v22;
        memset(&v46[3], 0, 13);
        v49 = i;
        v50 = v15;
        v51 = *(_DWORD *)(*(_QWORD *)(v48[0] + 336) + 8 * i);
        v52 = *(_DWORD *)(*(_QWORD *)(v48[0] + 264) + 8 * i);
        v23 = *(_QWORD *)(v11 + 288);
        OpenSubdiv::v3_1_1::Sdc::Scheme<(OpenSubdiv::v3_1_1::Sdc::SchemeType)1>::ComputeVertexVertexMask<OpenSubdiv::v3_1_1::Vtr::internal::VertexInterface,OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Mask>(&v53, (uint64_t)v48, (uint64_t)v46, (*(unsigned __int16 *)(*(_QWORD *)(v11 + 432) + 2 * i) >> 7) & 0xF, (*(unsigned __int16 *)(*(_QWORD *)(v37 + 432) + 2 * v15) >> 7) & 0xF);
        if (SLODWORD(v46[4]) >= 1)
        {
          if (!BYTE4(v46[4]))
            OpenSubdiv::v3_1_1::Far::PrimvarRefiner::interpFromVerts<(OpenSubdiv::v3_1_1::Sdc::SchemeType)1,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index>();
          if ((int)v20 >= 1)
          {
            v24 = (int *)(v23 + 4 * v38);
            do
            {
              v25 = *v24++;
              v26 = *(_DWORD *)(v9[21] + 4 * v25);
              if (v26 == -1)
                OpenSubdiv::v3_1_1::Far::PrimvarRefiner::interpFromVerts<(OpenSubdiv::v3_1_1::Sdc::SchemeType)1,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index>();
              v27 = *((_DWORD *)a4 + 2);
              v44 = *a4;
              v45 = (v27 + v15);
              v42 = v44;
              v43 = (v27 + v26);
              v28 = *v22++;
              OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index::AddWithWeight((uint64_t)&v44, (uint64_t)&v42, v28);
              --v20;
            }
            while (v20);
          }
        }
        if (SHIDWORD(v46[3]) >= 1)
        {
          v29 = v41;
          if (v41 >= 1)
          {
            v30 = (int *)(v40 + 4 * v39);
            do
            {
              v31 = *v30++;
              v32 = *(_DWORD *)(*(_QWORD *)(v11 + 120)
                              + 8 * v31
                              + 4 * (i == *(_DWORD *)(*(_QWORD *)(v11 + 120) + 8 * v31)));
              v33 = (*((_DWORD *)a4 + 2) + v15);
              v44 = *a4;
              v45 = v33;
              v34 = (*((_DWORD *)a3 + 2) + v32);
              v42 = *a3;
              v43 = v34;
              LODWORD(v31) = *(_DWORD *)v21;
              v21 = (uint64_t *)((char *)v21 + 4);
              OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index::AddWithWeight((uint64_t)&v44, (uint64_t)&v42, *(float *)&v31);
              --v29;
            }
            while (v29);
          }
        }
        v35 = (*((_DWORD *)a4 + 2) + v15);
        v44 = *a4;
        v45 = v35;
        v36 = (*((_DWORD *)a3 + 2) + i);
        v42 = *a3;
        v43 = v36;
        OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index::AddWithWeight((uint64_t)&v44, (uint64_t)&v42, v47);
        v13 = *(_DWORD *)(v11 + 8);
      }
    }
    v7 = __p;
  }
  operator delete(v7);
}

void OpenSubdiv::v3_1_1::Far::PrimvarRefiner::interpFromEdges<(OpenSubdiv::v3_1_1::Sdc::SchemeType)2,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index>(uint64_t *a1, int a2, uint64_t *a3, uint64_t *a4)
{
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t i;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[5];
  uint64_t v44;
  int v45;
  int v46;
  float *v47;
  int v48;
  int v49;
  uint64_t v50;
  void *__p;
  float v52[2];
  uint64_t v53;

  v7 = 0;
  v53 = *MEMORY[0x1E0C80C00];
  v8 = *a1;
  v9 = *(_QWORD *)(*(_QWORD *)(v8 + 64) + 8 * (a2 - 1));
  v10 = *(_QWORD *)(v9 + 8);
  v38 = *(_QWORD *)(v9 + 16);
  v46 = *(_DWORD *)(v8 + 4);
  v11 = *(unsigned int *)(v10 + 16);
  v47 = (float *)&v50;
  v48 = v11;
  v49 = 8;
  v44 = v10;
  __p = 0;
  if (v11 >= 9)
  {
    v7 = operator new(4 * v11);
    __p = v7;
    v47 = (float *)v7;
    v49 = v11;
  }
  v12 = *(_DWORD *)(v10 + 4);
  if (v12 >= 1)
  {
    for (i = 0; i < v12; ++i)
    {
      v14 = *(int *)(*(_QWORD *)(v9 + 216) + 4 * i);
      if ((_DWORD)v14 != -1)
      {
        v15 = (_DWORD *)(*(_QWORD *)(v10 + 120) + 8 * i);
        v16 = *(_QWORD *)(v10 + 168);
        v17 = (unsigned int *)(*(_QWORD *)(v10 + 144) + 8 * i);
        v18 = *v17;
        v19 = (int)v17[1];
        v43[0] = v52;
        v43[1] = 0;
        v43[2] = v47;
        memset(&v43[3], 0, 13);
        v45 = i;
        if (*(float *)(*(_QWORD *)(v10 + 216) + 4 * i) <= 0.0)
          v20 = 1;
        else
          v20 = 4;
        OpenSubdiv::v3_1_1::Sdc::Scheme<(OpenSubdiv::v3_1_1::Sdc::SchemeType)2>::ComputeEdgeVertexMask<OpenSubdiv::v3_1_1::Vtr::internal::EdgeInterface,OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Mask>(&v46, (int *)&v44, (uint64_t)v43, v20, (*(unsigned __int16 *)(*(_QWORD *)(v38 + 432) + 2 * v14) >> 7) & 0xF);
        v21 = (*((_DWORD *)a4 + 2) + v14);
        v41 = *a4;
        v42 = v21;
        v22 = (*((_DWORD *)a3 + 2) + *v15);
        v39 = *a3;
        v40 = v22;
        OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index::AddWithWeight((uint64_t)&v41, (uint64_t)&v39, v52[0]);
        v23 = (*((_DWORD *)a4 + 2) + v14);
        v41 = *a4;
        v42 = v23;
        v24 = (*((_DWORD *)a3 + 2) + v15[1]);
        v39 = *a3;
        v40 = v24;
        OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index::AddWithWeight((uint64_t)&v41, (uint64_t)&v39, v52[1]);
        if (SLODWORD(v43[4]) >= 1 && (int)v18 >= 1)
        {
          v25 = 0;
          v26 = v16 + 4 * v19;
          do
          {
            if (BYTE4(v43[4]))
            {
              if (*(int *)(v9 + 52) <= 0)
                OpenSubdiv::v3_1_1::Far::PrimvarRefiner::interpFromEdges<(OpenSubdiv::v3_1_1::Sdc::SchemeType)1,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index>();
              v27 = *(_DWORD *)(*(_QWORD *)(v9 + 168) + 4 * *(int *)(v26 + 4 * v25));
              if (v27 == -1)
                OpenSubdiv::v3_1_1::Far::PrimvarRefiner::interpFromEdges<(OpenSubdiv::v3_1_1::Sdc::SchemeType)1,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index>();
              v28 = *a4;
              v29 = *((_DWORD *)a4 + 2);
              v41 = *a4;
              v42 = (v29 + v14);
            }
            else
            {
              v30 = 0;
              v31 = *(int *)(v26 + 4 * v25);
              v32 = *(_QWORD *)(v10 + 24);
              v33 = *(int *)(v32 + 8 * v31 + 4);
              v34 = *(_DWORD *)(v32 + 8 * (_DWORD)v31);
              do
                v35 = *(unsigned int *)(*(_QWORD *)(v10 + 72) + 4 * v33 + 4 * v30++);
              while (i != v35);
              v36 = *(_QWORD *)(v10 + 48) + 4 * v33;
              if ((int)v30 + 1 < v34)
                v34 = 0;
              v27 = *(_DWORD *)(v36 + 4 * ((int)v30 - v34 + 1));
              v37 = (*((_DWORD *)a4 + 2) + v14);
              v41 = *a4;
              v42 = v37;
              v28 = *a3;
              v29 = *((_DWORD *)a3 + 2);
            }
            v39 = v28;
            v40 = (v29 + v27);
            OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index::AddWithWeight((uint64_t)&v41, (uint64_t)&v39, v47[v25++]);
          }
          while (v25 != v18);
        }
        v12 = *(_DWORD *)(v10 + 4);
      }
    }
    v7 = __p;
  }
  operator delete(v7);
}

void OpenSubdiv::v3_1_1::Far::PrimvarRefiner::interpFromVerts<(OpenSubdiv::v3_1_1::Sdc::SchemeType)2,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index>(uint64_t *a1, int a2, uint64_t *a3, uint64_t *a4)
{
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  uint64_t i;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  float *v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  int v26;
  int v27;
  float v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[5];
  float v47;
  _QWORD v48[2];
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  uint64_t *v54;
  unsigned int v55;
  int v56;
  uint64_t v57;
  void *__p;
  uint64_t v59;

  v7 = 0;
  v59 = *MEMORY[0x1E0C80C00];
  v8 = *a1;
  v9 = *(_QWORD **)(*(_QWORD *)(v8 + 64) + 8 * (a2 - 1));
  v11 = v9[1];
  v10 = v9[2];
  v53 = *(_DWORD *)(v8 + 4);
  v12 = 2 * *(_DWORD *)(v11 + 20);
  v54 = &v57;
  v55 = v12;
  v56 = 32;
  v48[0] = v11;
  v48[1] = v10;
  v37 = v10;
  __p = 0;
  if (v12 >= 0x21)
  {
    v7 = operator new(4 * v12);
    __p = v7;
    v54 = (uint64_t *)v7;
    v56 = v12;
  }
  v13 = *(_DWORD *)(v11 + 8);
  if (v13 >= 1)
  {
    for (i = 0; i < v13; ++i)
    {
      v15 = *(_DWORD *)(v9[30] + 4 * i);
      if (v15 != -1)
      {
        v40 = *(_QWORD *)(v11 + 360);
        v16 = *(_QWORD *)(v11 + 336);
        v17 = (8 * i) | 4;
        v39 = *(int *)(v16 + v17);
        v18 = *(int *)(v16 + 8 * i);
        v19 = *(_QWORD *)(v11 + 264);
        v38 = *(int *)(v19 + v17);
        v20 = *(unsigned int *)(v19 + 8 * i);
        v47 = 0.0;
        v21 = v54;
        v41 = v18;
        v22 = (float *)v54 + v18;
        v46[0] = &v47;
        v46[1] = v54;
        v46[2] = v22;
        memset(&v46[3], 0, 13);
        v49 = i;
        v50 = v15;
        v51 = *(_DWORD *)(*(_QWORD *)(v48[0] + 336) + 8 * i);
        v52 = *(_DWORD *)(*(_QWORD *)(v48[0] + 264) + 8 * i);
        v23 = *(_QWORD *)(v11 + 288);
        OpenSubdiv::v3_1_1::Sdc::Scheme<(OpenSubdiv::v3_1_1::Sdc::SchemeType)2>::ComputeVertexVertexMask<OpenSubdiv::v3_1_1::Vtr::internal::VertexInterface,OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Mask>(&v53, (uint64_t)v48, (uint64_t)v46, (*(unsigned __int16 *)(*(_QWORD *)(v11 + 432) + 2 * i) >> 7) & 0xF, (*(unsigned __int16 *)(*(_QWORD *)(v37 + 432) + 2 * v15) >> 7) & 0xF);
        if (SLODWORD(v46[4]) >= 1)
        {
          if (!BYTE4(v46[4]))
            OpenSubdiv::v3_1_1::Far::PrimvarRefiner::interpFromVerts<(OpenSubdiv::v3_1_1::Sdc::SchemeType)1,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index>();
          if ((int)v20 >= 1)
          {
            v24 = (int *)(v23 + 4 * v38);
            do
            {
              v25 = *v24++;
              v26 = *(_DWORD *)(v9[21] + 4 * v25);
              if (v26 == -1)
                OpenSubdiv::v3_1_1::Far::PrimvarRefiner::interpFromVerts<(OpenSubdiv::v3_1_1::Sdc::SchemeType)1,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index>();
              v27 = *((_DWORD *)a4 + 2);
              v44 = *a4;
              v45 = (v27 + v15);
              v42 = v44;
              v43 = (v27 + v26);
              v28 = *v22++;
              OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index::AddWithWeight((uint64_t)&v44, (uint64_t)&v42, v28);
              --v20;
            }
            while (v20);
          }
        }
        if (SHIDWORD(v46[3]) >= 1)
        {
          v29 = v41;
          if (v41 >= 1)
          {
            v30 = (int *)(v40 + 4 * v39);
            do
            {
              v31 = *v30++;
              v32 = *(_DWORD *)(*(_QWORD *)(v11 + 120)
                              + 8 * v31
                              + 4 * (i == *(_DWORD *)(*(_QWORD *)(v11 + 120) + 8 * v31)));
              v33 = (*((_DWORD *)a4 + 2) + v15);
              v44 = *a4;
              v45 = v33;
              v34 = (*((_DWORD *)a3 + 2) + v32);
              v42 = *a3;
              v43 = v34;
              LODWORD(v31) = *(_DWORD *)v21;
              v21 = (uint64_t *)((char *)v21 + 4);
              OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index::AddWithWeight((uint64_t)&v44, (uint64_t)&v42, *(float *)&v31);
              --v29;
            }
            while (v29);
          }
        }
        v35 = (*((_DWORD *)a4 + 2) + v15);
        v44 = *a4;
        v45 = v35;
        v36 = (*((_DWORD *)a3 + 2) + i);
        v42 = *a3;
        v43 = v36;
        OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index::AddWithWeight((uint64_t)&v44, (uint64_t)&v42, v47);
        v13 = *(_DWORD *)(v11 + 8);
      }
    }
    v7 = __p;
  }
  operator delete(v7);
}

void OpenSubdiv::v3_1_1::Far::PrimvarRefiner::interpFromEdges<(OpenSubdiv::v3_1_1::Sdc::SchemeType)0,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index>(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t i;
  int v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  int v25;
  int v26;
  uint64_t v27;
  void *__p;
  uint64_t v29;

  v7 = 0;
  v29 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 64) + 8 * (a2 - 1));
  v9 = *(_QWORD *)(v8 + 8);
  v10 = *(unsigned int *)(v9 + 16);
  v24 = &v27;
  v25 = v10;
  v26 = 8;
  __p = 0;
  if (v10 >= 9)
  {
    v7 = operator new(4 * v10);
    __p = v7;
    v24 = (uint64_t *)v7;
    v26 = v10;
  }
  v11 = *(_DWORD *)(v9 + 4);
  if (v11 >= 1)
  {
    v12 = 0;
    for (i = 0; i < v11; ++i)
    {
      v14 = *(_DWORD *)(*(_QWORD *)(v8 + 216) + 4 * i);
      if (v14 != -1)
      {
        v15 = (_DWORD *)(*(_QWORD *)(v9 + 120) + v12);
        v16 = (*((_DWORD *)a4 + 2) + v14);
        v22 = *a4;
        v23 = v16;
        v17 = (*((_DWORD *)a3 + 2) + *v15);
        v20 = *a3;
        v21 = v17;
        OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index::AddWithWeight((uint64_t)&v22, (uint64_t)&v20, 0.5);
        v18 = (*((_DWORD *)a4 + 2) + v14);
        v22 = *a4;
        v23 = v18;
        v19 = (*((_DWORD *)a3 + 2) + v15[1]);
        v20 = *a3;
        v21 = v19;
        OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index::AddWithWeight((uint64_t)&v22, (uint64_t)&v20, 0.5);
        v11 = *(_DWORD *)(v9 + 4);
      }
      v12 += 8;
    }
    v7 = __p;
  }
  operator delete(v7);
}

void OpenSubdiv::v3_1_1::Far::PrimvarRefiner::interpFVarFromFaces<(OpenSubdiv::v3_1_1::Sdc::SchemeType)1,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  float *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  _QWORD v27[2];
  _QWORD v28[2];
  float *v29;
  int v30;
  int v31;
  uint64_t v32;
  void *__p;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 64) + 8 * (a2 - 1));
  if (*(_DWORD *)(v5 + 52))
  {
    v8 = 0;
    v9 = *(_QWORD *)(v5 + 8);
    v10 = *(_QWORD **)(*(_QWORD *)(v9 + 456) + 8 * a5);
    v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 16) + 456) + 8 * a5);
    v26 = (int *)v9;
    v12 = *(unsigned int *)(v9 + 20);
    v29 = (float *)&v32;
    v30 = v12;
    v31 = 16;
    __p = 0;
    if (v12 >= 0x11)
    {
      v8 = operator new(4 * v12);
      __p = v8;
      v29 = (float *)v8;
      v31 = v12;
    }
    v13 = *v26;
    if (*v26 >= 1)
    {
      v14 = 0;
      do
      {
        v15 = *(int *)(*(_QWORD *)(v5 + 168) + 4 * v14);
        if ((_DWORD)v15 != -1)
        {
          v16 = (unsigned int *)(*(_QWORD *)(*v10 + 24) + 8 * v14);
          v17 = *v16;
          if ((int)v17 >= 1)
          {
            v18 = *(_DWORD *)(*(_QWORD *)(v11 + 96) + 4 * v15);
            v19 = v10[3] + 4 * (int)v16[1];
            v20 = v29;
            v21 = *v16;
            do
            {
              *v20++ = 1.0 / (float)(int)v17;
              --v21;
            }
            while (v21);
            v22 = 0;
            v23 = 4 * v17;
            do
            {
              v24 = (*(_DWORD *)(a4 + 8) + v18);
              v28[0] = *(_QWORD *)a4;
              v28[1] = v24;
              v25 = (*(_DWORD *)(a3 + 8) + *(_DWORD *)(v19 + v22));
              v27[0] = *(_QWORD *)a3;
              v27[1] = v25;
              OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index::AddWithWeight((uint64_t)v28, (uint64_t)v27, v29[v22 / 4]);
              v22 += 4;
            }
            while (v23 != v22);
            v13 = *v26;
          }
        }
        ++v14;
      }
      while (v14 < v13);
      v8 = __p;
    }
    operator delete(v8);
  }
}

void OpenSubdiv::v3_1_1::Far::PrimvarRefiner::interpFVarFromEdges<(OpenSubdiv::v3_1_1::Sdc::SchemeType)1,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, int a5)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _BYTE *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  _QWORD v61[5];
  int v62;
  int v63;
  int v64;
  _BYTE *v65;
  int v66;
  int v67;
  _BYTE v68[32];
  void *__p;
  _QWORD v70[3];

  v70[1] = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)a1 + 64) + 8 * ((int)a2 - 1));
  v62 = *(_DWORD *)(*(_QWORD *)a1 + 4);
  v9 = v8[1];
  v54 = v8;
  v10 = *(_QWORD *)(v8[60] + 8 * a5);
  v11 = *(_QWORD *)(*(_QWORD *)(v9 + 456) + 8 * a5);
  v50 = v8[2];
  v12 = *(_QWORD **)(*(_QWORD *)(v50 + 456) + 8 * a5);
  v52 = v9;
  v13 = *(unsigned int *)(v9 + 16);
  v14 = v68;
  v65 = v68;
  v66 = v13;
  v67 = 8;
  __p = 0;
  if (v13 < 9)
  {
    v15 = 0;
  }
  else
  {
    v15 = operator new(4 * v13);
    __p = v15;
    v65 = v15;
    v67 = v13;
    v14 = v15;
  }
  v61[0] = v70;
  v61[1] = 0;
  v61[2] = v14;
  memset(&v61[3], 0, 13);
  if (*(_BYTE *)(v11 + 12) || !**(_DWORD **)a1)
  {
    LODWORD(v61[3]) = 2;
    LODWORD(v61[4]) = 0;
    v70[0] = 0x3F0000003F000000;
    v51 = 1;
  }
  else
  {
    v51 = 0;
  }
  v59 = v52;
  if (*(int *)(v52 + 4) >= 1)
  {
    v53 = v12;
    v16 = 0;
    do
    {
      v17 = *(int *)(v54[27] + 4 * v16);
      if ((_DWORD)v17 != -1)
      {
        v18 = (int *)(v53[18] + 4 * *(int *)(v53[12] + 4 * v17));
        if ((*(_BYTE *)(v53[21] + *v18) & 1) != 0)
        {
          v41 = v53[9];
          v42 = *(unsigned __int16 *)(v41 + 2 * v17);
          if (*(_WORD *)(v41 + 2 * v17))
          {
            v43 = 0;
            do
            {
              v44 = *(unsigned __int16 *)(*(_QWORD *)(v10 + 40)
                                        + 2 * (v43 + *(int *)(*(_QWORD *)(*(_QWORD *)(v10 + 32) + 96) + 4 * v17)));
              if (v43 != v44)
                _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromEdgesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i_cold_2((uint64_t)v15, a2, v44);
              OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getEdgeFaceValues((_QWORD *)v11, v16, v44, &v63);
              v45 = v18[v43];
              v46 = (*((_DWORD *)a4 + 2) + v45);
              v57 = *a4;
              v58 = v46;
              v47 = (*((_DWORD *)a3 + 2) + v63);
              v55 = *a3;
              v56 = v47;
              OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index::AddWithWeight((uint64_t)&v57, (uint64_t)&v55, 0.5);
              v48 = (*((_DWORD *)a4 + 2) + v45);
              v57 = *a4;
              v58 = v48;
              v49 = (*((_DWORD *)a3 + 2) + v64);
              v55 = *a3;
              v56 = v49;
              OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index::AddWithWeight((uint64_t)&v57, (uint64_t)&v55, 0.5);
              ++v43;
            }
            while (v42 != v43);
          }
        }
        else
        {
          if ((v51 & 1) == 0)
          {
            v60 = v16;
            if (*(float *)(*(_QWORD *)(v52 + 216) + 4 * v16) <= 0.0)
              v19 = 1;
            else
              v19 = 4;
            OpenSubdiv::v3_1_1::Sdc::Scheme<(OpenSubdiv::v3_1_1::Sdc::SchemeType)1>::ComputeEdgeVertexMask<OpenSubdiv::v3_1_1::Vtr::internal::EdgeInterface,OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Mask>(&v62, (OpenSubdiv::v3_1_1::Vtr::internal::EdgeInterface *)&v59, (uint64_t)v61, v19, (*(unsigned __int16 *)(*(_QWORD *)(v50 + 432) + 2 * v17) >> 7) & 0xF);
          }
          OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getEdgeFaceValues((_QWORD *)v11, v16, 0, &v63);
          v20 = *v18;
          v21 = (*((_DWORD *)a4 + 2) + v20);
          v57 = *a4;
          v58 = v21;
          v22 = (*((_DWORD *)a3 + 2) + v63);
          v55 = *a3;
          v56 = v22;
          OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index::AddWithWeight((uint64_t)&v57, (uint64_t)&v55, *(float *)v70);
          v23 = (*((_DWORD *)a4 + 2) + v20);
          v57 = *a4;
          v58 = v23;
          v24 = (*((_DWORD *)a3 + 2) + v64);
          v55 = *a3;
          v56 = v24;
          OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index::AddWithWeight((uint64_t)&v57, (uint64_t)&v55, *((float *)v70 + 1));
          if (SLODWORD(v61[4]) >= 1)
          {
            v25 = (unsigned int *)(*(_QWORD *)(v52 + 144) + 8 * v16);
            v26 = *v25;
            if ((int)v26 >= 1)
            {
              v27 = 0;
              v28 = *(_QWORD *)(v52 + 168) + 4 * (int)v25[1];
              do
              {
                v29 = *(int *)(v28 + 4 * v27);
                if (BYTE4(v61[4]))
                {
                  v30 = *(int *)(v54[21] + 4 * v29);
                  if ((_DWORD)v30 == -1)
                    OpenSubdiv::v3_1_1::Far::PrimvarRefiner::interpFVarFromEdges<(OpenSubdiv::v3_1_1::Sdc::SchemeType)1,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index>();
                  v31 = *(_DWORD *)(v53[12] + 4 * v30);
                  v32 = *a4;
                  v33 = *((_DWORD *)a4 + 2);
                  v57 = *a4;
                  v58 = (v33 + v20);
                }
                else
                {
                  v34 = 0;
                  v35 = (2 * (int)v29) | 1;
                  v36 = *(_QWORD *)(v52 + 24);
                  v37 = *(_QWORD *)(v52 + 72) + 4 * *(int *)(v36 + 4 * v35);
                  v38 = *(_DWORD *)(v36 + 8 * v29);
                  do
                    v39 = *(unsigned int *)(v37 + 4 * v34++);
                  while (v16 != v39);
                  if ((int)v34 + 1 < v38)
                    v38 = 0;
                  v31 = *(_DWORD *)(*(_QWORD *)(v11 + 24)
                                  + 4 * *(int *)(*(_QWORD *)(*(_QWORD *)v11 + 24) + 4 * v35)
                                  + 4 * ((int)v34 - v38 + 1));
                  v40 = (*((_DWORD *)a4 + 2) + v20);
                  v57 = *a4;
                  v58 = v40;
                  v32 = *a3;
                  v33 = *((_DWORD *)a3 + 2);
                }
                v55 = v32;
                v56 = (v33 + v31);
                OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index::AddWithWeight((uint64_t)&v57, (uint64_t)&v55, *(float *)&v65[4 * v27++]);
              }
              while (v27 != v26);
            }
          }
        }
      }
      ++v16;
    }
    while (v16 < *(int *)(v52 + 4));
    v15 = __p;
  }
  operator delete(v15);
}

void OpenSubdiv::v3_1_1::Far::PrimvarRefiner::interpFVarFromVerts<(OpenSubdiv::v3_1_1::Sdc::SchemeType)1,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  _DWORD *v7;
  _QWORD *v8;
  _BOOL4 v9;
  unsigned int v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  unint64_t v20;
  uint64_t v21;
  float **v22;
  int *v23;
  float v24;
  uint64_t v25;
  uint64_t *v26;
  float *v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  float v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  float v52;
  float v53;
  float v54;
  OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement *v55;
  int v56;
  unsigned int v57;
  float FractionalWeight;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel *v69;
  int v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement *v74;
  _BOOL4 v75;
  float *v76;
  unint64_t v77;
  float *v78;
  _DWORD v79[5];
  float v80;
  float *v81;
  uint64_t v82;
  _QWORD v83[2];
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89[2];
  uint64_t v90;
  int *v91;
  unsigned int v92;
  int v93;
  uint64_t v94;
  void *__p;
  uint64_t *v96;
  int v97;
  int v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;

  v101 = *MEMORY[0x1E0C80C00];
  v7 = *(_DWORD **)a1;
  v8 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)a1 + 64) + 8 * ((int)a2 - 1));
  v88 = *(_DWORD *)(*(_QWORD *)a1 + 4);
  v72 = v8;
  v67 = v8[1];
  v65 = v8[2];
  v69 = *(OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel **)(*(_QWORD *)(v67 + 456) + 8 * a5);
  if (*((_BYTE *)v69 + 12))
    v9 = 1;
  else
    v9 = *v7 == 0;
  v75 = v9;
  v74 = *(OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement **)(v8[60] + 8 * a5);
  v71 = *(_QWORD **)(*(_QWORD *)(v65 + 456) + 8 * a5);
  v10 = *(_DWORD *)(v67 + 20);
  v96 = &v99;
  v97 = 2 * v10;
  v98 = 32;
  v100 = 0;
  if (2 * v10 >= 0x21)
  {
    v100 = operator new(8 * v10);
    v96 = (uint64_t *)v100;
    v98 = 2 * v10;
    v10 = *(_DWORD *)(v67 + 20);
  }
  v11 = 0;
  v91 = (int *)&v94;
  v92 = v10;
  v93 = 16;
  __p = 0;
  if (v10 >= 0x11)
  {
    v11 = operator new(4 * v10);
    __p = v11;
    v91 = (int *)v11;
    v93 = v10;
  }
  v83[0] = v67;
  v83[1] = v65;
  if (*(int *)(v67 + 8) >= 1)
  {
    v12 = 0;
    while (1)
    {
      v70 = *(_DWORD *)(v72[30] + 4 * v12);
      if (v70 != -1)
      {
        v13 = *(int *)(*((_QWORD *)v69 + 12) + 4 * v12);
        v14 = (_DWORD *)(*((_QWORD *)v69 + 18) + 4 * v13);
        v15 = *(int *)(v71[12] + 4 * v70);
        v16 = (int *)(v71[18] + 4 * v15);
        v17 = *v16;
        v18 = v71[21];
        v19 = v75;
        if ((*(_BYTE *)(v18 + v17) & 1) != 0)
          v19 = 0;
        if (v19)
        {
          v20 = (v17 + *(_DWORD *)(a4 + 8));
          v76 = *(float **)a4;
          v77 = v20;
          v21 = (*(_DWORD *)(a3 + 8) + *v14);
          v81 = *(float **)a3;
          v82 = v21;
          v22 = &v76;
          v23 = (int *)&v81;
          v24 = 1.0;
        }
        else
        {
          if ((*(_BYTE *)(v18 + v17) & 1) != 0)
          {
            v73 = *(unsigned __int16 *)(v71[9] + 2 * v70);
            if (*(_WORD *)(v71[9] + 2 * v70))
            {
              v45 = 0;
              v66 = *((_QWORD *)v69 + 21) + v13;
              v68 = v18 + v15;
              do
              {
                v46 = *(unsigned __int16 *)(*((_QWORD *)v74 + 5)
                                          + 2
                                          * (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v74 + 4) + 96) + 4 * v70)
                                           + (unsigned __int16)v45));
                if (v45 != v46)
                  _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i_cold_3((uint64_t)v11, a2, a3);
                v47 = v14;
                v48 = v14[v46];
                v49 = v16[v45];
                v50 = *(_DWORD *)(a4 + 8);
                if (!v75 && (*(_BYTE *)(v68 + v45) & 8) != 0)
                {
                  OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getVertexCreaseEndValues(v69, v12, v46, v89);
                  if ((*(_BYTE *)(v66 + v46) & 0x10) != 0)
                  {
                    if ((*(_BYTE *)(v66 + v46) & 0x20) != 0)
                    {
                      v57 = v46 == 0;
                      v55 = v74;
                      v56 = v12;
                    }
                    else
                    {
                      v55 = v74;
                      v56 = v12;
                      v57 = v46;
                    }
                    FractionalWeight = OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement::getFractionalWeight(v55, v56, v57, v70);
                    v54 = FractionalWeight + (float)((float)(1.0 - FractionalWeight) * 0.75);
                    v53 = (float)(1.0 - FractionalWeight) * 0.125;
                  }
                  else
                  {
                    v53 = 0.125;
                    v54 = 0.75;
                  }
                  v59 = (*(_DWORD *)(a4 + 8) + v49);
                  v76 = *(float **)a4;
                  v77 = v59;
                  v60 = (*(_DWORD *)(a3 + 8) + v89[0]);
                  v81 = *(float **)a3;
                  v82 = v60;
                  OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index::AddWithWeight((uint64_t)&v76, (uint64_t)&v81, v53);
                  v61 = (*(_DWORD *)(a4 + 8) + v49);
                  v76 = *(float **)a4;
                  v77 = v61;
                  v62 = (*(_DWORD *)(a3 + 8) + v89[1]);
                  v81 = *(float **)a3;
                  v82 = v62;
                  OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index::AddWithWeight((uint64_t)&v76, (uint64_t)&v81, v53);
                  v63 = (*(_DWORD *)(a4 + 8) + v49);
                  v76 = *(float **)a4;
                  v77 = v63;
                  v64 = (*(_DWORD *)(a3 + 8) + v48);
                  v81 = *(float **)a3;
                  v82 = v64;
                  v52 = v54;
                }
                else
                {
                  v76 = *(float **)a4;
                  v77 = (v50 + v49);
                  v51 = (*(_DWORD *)(a3 + 8) + v48);
                  v81 = *(float **)a3;
                  v82 = v51;
                  v52 = 1.0;
                }
                OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index::AddWithWeight((uint64_t)&v76, (uint64_t)&v81, v52);
                ++v45;
                v14 = v47;
              }
              while (v73 != v45);
            }
            goto LABEL_28;
          }
          v25 = *(int *)(*(_QWORD *)(v67 + 336) + 8 * v12);
          v80 = 0.0;
          v26 = v96;
          v27 = (float *)v96 + v25;
          v76 = &v80;
          v77 = (unint64_t)v96;
          v78 = v27;
          memset(v79, 0, 13);
          v84 = v12;
          v85 = v70;
          v86 = *(_DWORD *)(*(_QWORD *)(v83[0] + 336) + 8 * v12);
          v87 = *(_DWORD *)(*(_QWORD *)(v83[0] + 264) + 8 * v12);
          OpenSubdiv::v3_1_1::Sdc::Scheme<(OpenSubdiv::v3_1_1::Sdc::SchemeType)1>::ComputeVertexVertexMask<OpenSubdiv::v3_1_1::Vtr::internal::VertexInterface,OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Mask>(&v88, (uint64_t)v83, (uint64_t)&v76, (*(unsigned __int16 *)(*(_QWORD *)(v67 + 432) + 2 * v12) >> 7) & 0xF, (*(unsigned __int16 *)(*(_QWORD *)(v65 + 432) + 2 * v70) >> 7) & 0xF);
          v28 = *v14;
          v29 = *v16;
          if (v79[2] >= 1)
          {
            if (!LOBYTE(v79[3]))
              OpenSubdiv::v3_1_1::Far::PrimvarRefiner::interpFVarFromVerts<(OpenSubdiv::v3_1_1::Sdc::SchemeType)1,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index>();
            v30 = *(_QWORD *)(v67 + 264);
            v31 = *(unsigned int *)(v30 + 8 * v12);
            if ((int)v31 >= 1)
            {
              v32 = (int *)(*(_QWORD *)(v67 + 288) + 4 * *(int *)(v30 + 4 * ((2 * v12) | 1)));
              do
              {
                v33 = *v32++;
                v34 = *(int *)(v72[21] + 4 * v33);
                if ((_DWORD)v34 == -1)
                  OpenSubdiv::v3_1_1::Far::PrimvarRefiner::interpFVarFromVerts<(OpenSubdiv::v3_1_1::Sdc::SchemeType)1,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index>();
                v35 = *(_DWORD *)(v71[12] + 4 * v34);
                v36 = *(_DWORD *)(a4 + 8);
                v81 = *(float **)a4;
                v82 = (v36 + v29);
                *(_QWORD *)v89 = v81;
                v90 = (v36 + v35);
                v37 = *v27++;
                OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index::AddWithWeight((uint64_t)&v81, (uint64_t)v89, v37);
                --v31;
              }
              while (v31);
            }
          }
          if (v79[1] >= 1)
          {
            v38 = v25;
            OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getVertexEdgeValues(v69, v12, v91);
            if ((int)v25 >= 1)
            {
              v39 = 0;
              v40 = 4 * v38;
              do
              {
                v41 = (*(_DWORD *)(a4 + 8) + v29);
                v81 = *(float **)a4;
                v82 = v41;
                v42 = (*(_DWORD *)(a3 + 8) + v91[v39 / 4]);
                *(_QWORD *)v89 = *(_QWORD *)a3;
                v90 = v42;
                OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index::AddWithWeight((uint64_t)&v81, (uint64_t)v89, *(float *)((char *)v26 + v39));
                v39 += 4;
              }
              while (v40 != v39);
            }
          }
          v43 = (*(_DWORD *)(a4 + 8) + v29);
          v81 = *(float **)a4;
          v82 = v43;
          v44 = (*(_DWORD *)(a3 + 8) + v28);
          *(_QWORD *)v89 = *(_QWORD *)a3;
          v90 = v44;
          v24 = v80;
          v22 = &v81;
          v23 = v89;
        }
        OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index::AddWithWeight((uint64_t)v22, (uint64_t)v23, v24);
      }
LABEL_28:
      if (++v12 >= *(int *)(v67 + 8))
      {
        v11 = __p;
        break;
      }
    }
  }
  operator delete(v11);
  operator delete(v100);
}

void OpenSubdiv::v3_1_1::Far::PrimvarRefiner::interpFVarFromEdges<(OpenSubdiv::v3_1_1::Sdc::SchemeType)2,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, int a5)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _BYTE *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  _QWORD v61[5];
  int v62;
  int v63;
  int v64;
  _BYTE *v65;
  int v66;
  int v67;
  _BYTE v68[32];
  void *__p;
  _QWORD v70[3];

  v70[1] = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)a1 + 64) + 8 * ((int)a2 - 1));
  v62 = *(_DWORD *)(*(_QWORD *)a1 + 4);
  v9 = v8[1];
  v54 = v8;
  v10 = *(_QWORD *)(v8[60] + 8 * a5);
  v11 = *(_QWORD *)(*(_QWORD *)(v9 + 456) + 8 * a5);
  v50 = v8[2];
  v12 = *(_QWORD **)(*(_QWORD *)(v50 + 456) + 8 * a5);
  v52 = v9;
  v13 = *(unsigned int *)(v9 + 16);
  v14 = v68;
  v65 = v68;
  v66 = v13;
  v67 = 8;
  __p = 0;
  if (v13 < 9)
  {
    v15 = 0;
  }
  else
  {
    v15 = operator new(4 * v13);
    __p = v15;
    v65 = v15;
    v67 = v13;
    v14 = v15;
  }
  v61[0] = v70;
  v61[1] = 0;
  v61[2] = v14;
  memset(&v61[3], 0, 13);
  if (*(_BYTE *)(v11 + 12) || !**(_DWORD **)a1)
  {
    LODWORD(v61[3]) = 2;
    LODWORD(v61[4]) = 0;
    v70[0] = 0x3F0000003F000000;
    v51 = 1;
  }
  else
  {
    v51 = 0;
  }
  v59 = v52;
  if (*(int *)(v52 + 4) >= 1)
  {
    v53 = v12;
    v16 = 0;
    do
    {
      v17 = *(int *)(v54[27] + 4 * v16);
      if ((_DWORD)v17 != -1)
      {
        v18 = (int *)(v53[18] + 4 * *(int *)(v53[12] + 4 * v17));
        if ((*(_BYTE *)(v53[21] + *v18) & 1) != 0)
        {
          v41 = v53[9];
          v42 = *(unsigned __int16 *)(v41 + 2 * v17);
          if (*(_WORD *)(v41 + 2 * v17))
          {
            v43 = 0;
            do
            {
              v44 = *(unsigned __int16 *)(*(_QWORD *)(v10 + 40)
                                        + 2 * (v43 + *(int *)(*(_QWORD *)(*(_QWORD *)(v10 + 32) + 96) + 4 * v17)));
              if (v43 != v44)
                _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromEdgesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i_cold_2((uint64_t)v15, a2, v44);
              OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getEdgeFaceValues((_QWORD *)v11, v16, v44, &v63);
              v45 = v18[v43];
              v46 = (*((_DWORD *)a4 + 2) + v45);
              v57 = *a4;
              v58 = v46;
              v47 = (*((_DWORD *)a3 + 2) + v63);
              v55 = *a3;
              v56 = v47;
              OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index::AddWithWeight((uint64_t)&v57, (uint64_t)&v55, 0.5);
              v48 = (*((_DWORD *)a4 + 2) + v45);
              v57 = *a4;
              v58 = v48;
              v49 = (*((_DWORD *)a3 + 2) + v64);
              v55 = *a3;
              v56 = v49;
              OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index::AddWithWeight((uint64_t)&v57, (uint64_t)&v55, 0.5);
              ++v43;
            }
            while (v42 != v43);
          }
        }
        else
        {
          if ((v51 & 1) == 0)
          {
            v60 = v16;
            if (*(float *)(*(_QWORD *)(v52 + 216) + 4 * v16) <= 0.0)
              v19 = 1;
            else
              v19 = 4;
            OpenSubdiv::v3_1_1::Sdc::Scheme<(OpenSubdiv::v3_1_1::Sdc::SchemeType)2>::ComputeEdgeVertexMask<OpenSubdiv::v3_1_1::Vtr::internal::EdgeInterface,OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Mask>(&v62, (int *)&v59, (uint64_t)v61, v19, (*(unsigned __int16 *)(*(_QWORD *)(v50 + 432) + 2 * v17) >> 7) & 0xF);
          }
          OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getEdgeFaceValues((_QWORD *)v11, v16, 0, &v63);
          v20 = *v18;
          v21 = (*((_DWORD *)a4 + 2) + v20);
          v57 = *a4;
          v58 = v21;
          v22 = (*((_DWORD *)a3 + 2) + v63);
          v55 = *a3;
          v56 = v22;
          OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index::AddWithWeight((uint64_t)&v57, (uint64_t)&v55, *(float *)v70);
          v23 = (*((_DWORD *)a4 + 2) + v20);
          v57 = *a4;
          v58 = v23;
          v24 = (*((_DWORD *)a3 + 2) + v64);
          v55 = *a3;
          v56 = v24;
          OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index::AddWithWeight((uint64_t)&v57, (uint64_t)&v55, *((float *)v70 + 1));
          if (SLODWORD(v61[4]) >= 1)
          {
            v25 = (unsigned int *)(*(_QWORD *)(v52 + 144) + 8 * v16);
            v26 = *v25;
            if ((int)v26 >= 1)
            {
              v27 = 0;
              v28 = *(_QWORD *)(v52 + 168) + 4 * (int)v25[1];
              do
              {
                v29 = *(int *)(v28 + 4 * v27);
                if (BYTE4(v61[4]))
                {
                  v30 = *(int *)(v54[21] + 4 * v29);
                  if ((_DWORD)v30 == -1)
                    OpenSubdiv::v3_1_1::Far::PrimvarRefiner::interpFVarFromEdges<(OpenSubdiv::v3_1_1::Sdc::SchemeType)1,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index>();
                  v31 = *(_DWORD *)(v53[12] + 4 * v30);
                  v32 = *a4;
                  v33 = *((_DWORD *)a4 + 2);
                  v57 = *a4;
                  v58 = (v33 + v20);
                }
                else
                {
                  v34 = 0;
                  v35 = (2 * (int)v29) | 1;
                  v36 = *(_QWORD *)(v52 + 24);
                  v37 = *(_QWORD *)(v52 + 72) + 4 * *(int *)(v36 + 4 * v35);
                  v38 = *(_DWORD *)(v36 + 8 * v29);
                  do
                    v39 = *(unsigned int *)(v37 + 4 * v34++);
                  while (v16 != v39);
                  if ((int)v34 + 1 < v38)
                    v38 = 0;
                  v31 = *(_DWORD *)(*(_QWORD *)(v11 + 24)
                                  + 4 * *(int *)(*(_QWORD *)(*(_QWORD *)v11 + 24) + 4 * v35)
                                  + 4 * ((int)v34 - v38 + 1));
                  v40 = (*((_DWORD *)a4 + 2) + v20);
                  v57 = *a4;
                  v58 = v40;
                  v32 = *a3;
                  v33 = *((_DWORD *)a3 + 2);
                }
                v55 = v32;
                v56 = (v33 + v31);
                OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index::AddWithWeight((uint64_t)&v57, (uint64_t)&v55, *(float *)&v65[4 * v27++]);
              }
              while (v27 != v26);
            }
          }
        }
      }
      ++v16;
    }
    while (v16 < *(int *)(v52 + 4));
    v15 = __p;
  }
  operator delete(v15);
}

void OpenSubdiv::v3_1_1::Far::PrimvarRefiner::interpFVarFromVerts<(OpenSubdiv::v3_1_1::Sdc::SchemeType)2,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  _DWORD *v7;
  _QWORD *v8;
  _BOOL4 v9;
  unsigned int v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  unint64_t v20;
  uint64_t v21;
  float **v22;
  int *v23;
  float v24;
  uint64_t v25;
  uint64_t *v26;
  float *v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  float v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  float v52;
  float v53;
  float v54;
  OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement *v55;
  int v56;
  unsigned int v57;
  float FractionalWeight;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel *v69;
  int v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement *v74;
  _BOOL4 v75;
  float *v76;
  unint64_t v77;
  float *v78;
  _DWORD v79[5];
  float v80;
  float *v81;
  uint64_t v82;
  _QWORD v83[2];
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89[2];
  uint64_t v90;
  int *v91;
  unsigned int v92;
  int v93;
  uint64_t v94;
  void *__p;
  uint64_t *v96;
  int v97;
  int v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;

  v101 = *MEMORY[0x1E0C80C00];
  v7 = *(_DWORD **)a1;
  v8 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)a1 + 64) + 8 * ((int)a2 - 1));
  v88 = *(_DWORD *)(*(_QWORD *)a1 + 4);
  v72 = v8;
  v67 = v8[1];
  v65 = v8[2];
  v69 = *(OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel **)(*(_QWORD *)(v67 + 456) + 8 * a5);
  if (*((_BYTE *)v69 + 12))
    v9 = 1;
  else
    v9 = *v7 == 0;
  v75 = v9;
  v74 = *(OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement **)(v8[60] + 8 * a5);
  v71 = *(_QWORD **)(*(_QWORD *)(v65 + 456) + 8 * a5);
  v10 = *(_DWORD *)(v67 + 20);
  v96 = &v99;
  v97 = 2 * v10;
  v98 = 32;
  v100 = 0;
  if (2 * v10 >= 0x21)
  {
    v100 = operator new(8 * v10);
    v96 = (uint64_t *)v100;
    v98 = 2 * v10;
    v10 = *(_DWORD *)(v67 + 20);
  }
  v11 = 0;
  v91 = (int *)&v94;
  v92 = v10;
  v93 = 16;
  __p = 0;
  if (v10 >= 0x11)
  {
    v11 = operator new(4 * v10);
    __p = v11;
    v91 = (int *)v11;
    v93 = v10;
  }
  v83[0] = v67;
  v83[1] = v65;
  if (*(int *)(v67 + 8) >= 1)
  {
    v12 = 0;
    while (1)
    {
      v70 = *(_DWORD *)(v72[30] + 4 * v12);
      if (v70 != -1)
      {
        v13 = *(int *)(*((_QWORD *)v69 + 12) + 4 * v12);
        v14 = (_DWORD *)(*((_QWORD *)v69 + 18) + 4 * v13);
        v15 = *(int *)(v71[12] + 4 * v70);
        v16 = (int *)(v71[18] + 4 * v15);
        v17 = *v16;
        v18 = v71[21];
        v19 = v75;
        if ((*(_BYTE *)(v18 + v17) & 1) != 0)
          v19 = 0;
        if (v19)
        {
          v20 = (v17 + *(_DWORD *)(a4 + 8));
          v76 = *(float **)a4;
          v77 = v20;
          v21 = (*(_DWORD *)(a3 + 8) + *v14);
          v81 = *(float **)a3;
          v82 = v21;
          v22 = &v76;
          v23 = (int *)&v81;
          v24 = 1.0;
        }
        else
        {
          if ((*(_BYTE *)(v18 + v17) & 1) != 0)
          {
            v73 = *(unsigned __int16 *)(v71[9] + 2 * v70);
            if (*(_WORD *)(v71[9] + 2 * v70))
            {
              v45 = 0;
              v66 = *((_QWORD *)v69 + 21) + v13;
              v68 = v18 + v15;
              do
              {
                v46 = *(unsigned __int16 *)(*((_QWORD *)v74 + 5)
                                          + 2
                                          * (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v74 + 4) + 96) + 4 * v70)
                                           + (unsigned __int16)v45));
                if (v45 != v46)
                  _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i_cold_3((uint64_t)v11, a2, a3);
                v47 = v14;
                v48 = v14[v46];
                v49 = v16[v45];
                v50 = *(_DWORD *)(a4 + 8);
                if (!v75 && (*(_BYTE *)(v68 + v45) & 8) != 0)
                {
                  OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getVertexCreaseEndValues(v69, v12, v46, v89);
                  if ((*(_BYTE *)(v66 + v46) & 0x10) != 0)
                  {
                    if ((*(_BYTE *)(v66 + v46) & 0x20) != 0)
                    {
                      v57 = v46 == 0;
                      v55 = v74;
                      v56 = v12;
                    }
                    else
                    {
                      v55 = v74;
                      v56 = v12;
                      v57 = v46;
                    }
                    FractionalWeight = OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement::getFractionalWeight(v55, v56, v57, v70);
                    v54 = FractionalWeight + (float)((float)(1.0 - FractionalWeight) * 0.75);
                    v53 = (float)(1.0 - FractionalWeight) * 0.125;
                  }
                  else
                  {
                    v53 = 0.125;
                    v54 = 0.75;
                  }
                  v59 = (*(_DWORD *)(a4 + 8) + v49);
                  v76 = *(float **)a4;
                  v77 = v59;
                  v60 = (*(_DWORD *)(a3 + 8) + v89[0]);
                  v81 = *(float **)a3;
                  v82 = v60;
                  OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index::AddWithWeight((uint64_t)&v76, (uint64_t)&v81, v53);
                  v61 = (*(_DWORD *)(a4 + 8) + v49);
                  v76 = *(float **)a4;
                  v77 = v61;
                  v62 = (*(_DWORD *)(a3 + 8) + v89[1]);
                  v81 = *(float **)a3;
                  v82 = v62;
                  OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index::AddWithWeight((uint64_t)&v76, (uint64_t)&v81, v53);
                  v63 = (*(_DWORD *)(a4 + 8) + v49);
                  v76 = *(float **)a4;
                  v77 = v63;
                  v64 = (*(_DWORD *)(a3 + 8) + v48);
                  v81 = *(float **)a3;
                  v82 = v64;
                  v52 = v54;
                }
                else
                {
                  v76 = *(float **)a4;
                  v77 = (v50 + v49);
                  v51 = (*(_DWORD *)(a3 + 8) + v48);
                  v81 = *(float **)a3;
                  v82 = v51;
                  v52 = 1.0;
                }
                OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index::AddWithWeight((uint64_t)&v76, (uint64_t)&v81, v52);
                ++v45;
                v14 = v47;
              }
              while (v73 != v45);
            }
            goto LABEL_28;
          }
          v25 = *(int *)(*(_QWORD *)(v67 + 336) + 8 * v12);
          v80 = 0.0;
          v26 = v96;
          v27 = (float *)v96 + v25;
          v76 = &v80;
          v77 = (unint64_t)v96;
          v78 = v27;
          memset(v79, 0, 13);
          v84 = v12;
          v85 = v70;
          v86 = *(_DWORD *)(*(_QWORD *)(v83[0] + 336) + 8 * v12);
          v87 = *(_DWORD *)(*(_QWORD *)(v83[0] + 264) + 8 * v12);
          OpenSubdiv::v3_1_1::Sdc::Scheme<(OpenSubdiv::v3_1_1::Sdc::SchemeType)2>::ComputeVertexVertexMask<OpenSubdiv::v3_1_1::Vtr::internal::VertexInterface,OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Mask>(&v88, (uint64_t)v83, (uint64_t)&v76, (*(unsigned __int16 *)(*(_QWORD *)(v67 + 432) + 2 * v12) >> 7) & 0xF, (*(unsigned __int16 *)(*(_QWORD *)(v65 + 432) + 2 * v70) >> 7) & 0xF);
          v28 = *v14;
          v29 = *v16;
          if (v79[2] >= 1)
          {
            if (!LOBYTE(v79[3]))
              OpenSubdiv::v3_1_1::Far::PrimvarRefiner::interpFVarFromVerts<(OpenSubdiv::v3_1_1::Sdc::SchemeType)1,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index>();
            v30 = *(_QWORD *)(v67 + 264);
            v31 = *(unsigned int *)(v30 + 8 * v12);
            if ((int)v31 >= 1)
            {
              v32 = (int *)(*(_QWORD *)(v67 + 288) + 4 * *(int *)(v30 + 4 * ((2 * v12) | 1)));
              do
              {
                v33 = *v32++;
                v34 = *(int *)(v72[21] + 4 * v33);
                if ((_DWORD)v34 == -1)
                  OpenSubdiv::v3_1_1::Far::PrimvarRefiner::interpFVarFromVerts<(OpenSubdiv::v3_1_1::Sdc::SchemeType)1,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index>();
                v35 = *(_DWORD *)(v71[12] + 4 * v34);
                v36 = *(_DWORD *)(a4 + 8);
                v81 = *(float **)a4;
                v82 = (v36 + v29);
                *(_QWORD *)v89 = v81;
                v90 = (v36 + v35);
                v37 = *v27++;
                OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index::AddWithWeight((uint64_t)&v81, (uint64_t)v89, v37);
                --v31;
              }
              while (v31);
            }
          }
          if (v79[1] >= 1)
          {
            v38 = v25;
            OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getVertexEdgeValues(v69, v12, v91);
            if ((int)v25 >= 1)
            {
              v39 = 0;
              v40 = 4 * v38;
              do
              {
                v41 = (*(_DWORD *)(a4 + 8) + v29);
                v81 = *(float **)a4;
                v82 = v41;
                v42 = (*(_DWORD *)(a3 + 8) + v91[v39 / 4]);
                *(_QWORD *)v89 = *(_QWORD *)a3;
                v90 = v42;
                OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index::AddWithWeight((uint64_t)&v81, (uint64_t)v89, *(float *)((char *)v26 + v39));
                v39 += 4;
              }
              while (v40 != v39);
            }
          }
          v43 = (*(_DWORD *)(a4 + 8) + v29);
          v81 = *(float **)a4;
          v82 = v43;
          v44 = (*(_DWORD *)(a3 + 8) + v28);
          *(_QWORD *)v89 = *(_QWORD *)a3;
          v90 = v44;
          v24 = v80;
          v22 = &v81;
          v23 = v89;
        }
        OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index::AddWithWeight((uint64_t)v22, (uint64_t)v23, v24);
      }
LABEL_28:
      if (++v12 >= *(int *)(v67 + 8))
      {
        v11 = __p;
        break;
      }
    }
  }
  operator delete(v11);
  operator delete(v100);
}

void OpenSubdiv::v3_1_1::Far::PrimvarRefiner::interpFVarFromEdges<(OpenSubdiv::v3_1_1::Sdc::SchemeType)0,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, int a5)
{
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t *v39;
  int v40;
  int v41;
  uint64_t v42;
  void *__p;
  uint64_t v44;

  v8 = 0;
  v44 = *MEMORY[0x1E0C80C00];
  v31 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)a1 + 64) + 8 * ((int)a2 - 1));
  v32 = v31[1];
  v9 = *(_QWORD *)(v31[60] + 8 * a5);
  v10 = *(_QWORD **)(*(_QWORD *)(v32 + 456) + 8 * a5);
  v11 = *(_QWORD **)(*(_QWORD *)(v31[2] + 456) + 8 * a5);
  v12 = *(unsigned int *)(v32 + 16);
  v39 = &v42;
  v40 = v12;
  v41 = 8;
  __p = 0;
  if (v12 >= 9)
  {
    v8 = operator new(4 * v12);
    __p = v8;
    v39 = (uint64_t *)v8;
    v41 = v12;
  }
  if (*(int *)(v32 + 4) >= 1)
  {
    v30 = v11;
    v13 = 0;
    do
    {
      v14 = *(int *)(v31[27] + 4 * v13);
      if ((_DWORD)v14 != -1)
      {
        v15 = (int *)(v30[18] + 4 * *(int *)(v30[12] + 4 * v14));
        if ((*(_BYTE *)(v30[21] + *v15) & 1) != 0)
        {
          v21 = v30[9];
          v22 = *(unsigned __int16 *)(v21 + 2 * v14);
          if (*(_WORD *)(v21 + 2 * v14))
          {
            v23 = 0;
            do
            {
              v24 = *(unsigned __int16 *)(*(_QWORD *)(v9 + 40)
                                        + 2 * (v23 + *(int *)(*(_QWORD *)(*(_QWORD *)(v9 + 32) + 96) + 4 * v14)));
              if (v23 != v24)
                _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromEdgesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i_cold_2((uint64_t)v8, a2, v24);
              OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getEdgeFaceValues(v10, v13, v24, &v37);
              v25 = v15[v23];
              v26 = (*((_DWORD *)a4 + 2) + v25);
              v35 = *a4;
              v36 = v26;
              v27 = (*((_DWORD *)a3 + 2) + v37);
              v33 = *a3;
              v34 = v27;
              OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index::AddWithWeight((uint64_t)&v35, (uint64_t)&v33, 0.5);
              v28 = (*((_DWORD *)a4 + 2) + v25);
              v35 = *a4;
              v36 = v28;
              v29 = (*((_DWORD *)a3 + 2) + v38);
              v33 = *a3;
              v34 = v29;
              OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index::AddWithWeight((uint64_t)&v35, (uint64_t)&v33, 0.5);
              ++v23;
            }
            while (v22 != v23);
          }
        }
        else
        {
          OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getEdgeFaceValues(v10, v13, 0, &v37);
          v16 = *v15;
          v17 = (*((_DWORD *)a4 + 2) + *v15);
          v35 = *a4;
          v36 = v17;
          v18 = (*((_DWORD *)a3 + 2) + v37);
          v33 = *a3;
          v34 = v18;
          OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index::AddWithWeight((uint64_t)&v35, (uint64_t)&v33, 0.5);
          v19 = (*((_DWORD *)a4 + 2) + v16);
          v35 = *a4;
          v36 = v19;
          v20 = (*((_DWORD *)a3 + 2) + v38);
          v33 = *a3;
          v34 = v20;
          OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index::AddWithWeight((uint64_t)&v35, (uint64_t)&v33, 0.5);
        }
      }
      ++v13;
    }
    while (v13 < *(int *)(v32 + 4));
    v8 = __p;
  }
  operator delete(v8);
}

void OpenSubdiv::v3_1_1::Far::PrimvarRefiner::interpFVarFromVerts<(OpenSubdiv::v3_1_1::Sdc::SchemeType)0,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  unsigned int v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL4 v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  float v34;
  float v35;
  float v36;
  OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement *v37;
  int v38;
  unsigned int v39;
  float FractionalWeight;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel *v51;
  uint64_t v52;
  uint64_t v53;
  OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement *v54;
  _BOOL4 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60[2];
  uint64_t *v61;
  unsigned int v62;
  int v63;
  uint64_t v64;
  void *__p;
  uint64_t *v66;
  int v67;
  int v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)a1 + 64) + 8 * ((int)a2 - 1));
  v8 = v7[2];
  v49 = v7;
  v50 = v7[1];
  v9 = v7[60];
  v10 = *(_QWORD *)(v8 + 456);
  v51 = *(OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel **)(*(_QWORD *)(v50 + 456) + 8 * a5);
  if (*((_BYTE *)v51 + 12))
    v11 = 1;
  else
    v11 = **(_DWORD **)a1 == 0;
  v55 = v11;
  v54 = *(OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement **)(v9 + 8 * a5);
  v47 = *(_QWORD **)(v10 + 8 * a5);
  v12 = *(_DWORD *)(v50 + 20);
  v66 = &v69;
  v67 = 2 * v12;
  v68 = 32;
  v70 = 0;
  if (2 * v12 >= 0x21)
  {
    v70 = operator new(8 * v12);
    v66 = (uint64_t *)v70;
    v68 = 2 * v12;
    v12 = *(_DWORD *)(v50 + 20);
  }
  v13 = 0;
  v61 = &v64;
  v62 = v12;
  v63 = 16;
  __p = 0;
  if (v12 >= 0x11)
  {
    v13 = operator new(4 * v12);
    __p = v13;
    v61 = (uint64_t *)v13;
    v63 = v12;
  }
  if (*(int *)(v50 + 8) >= 1)
  {
    v14 = 0;
    while (1)
    {
      v15 = *(int *)(v49[30] + 4 * v14);
      if ((_DWORD)v15 != -1)
      {
        v16 = *(int *)(*((_QWORD *)v51 + 12) + 4 * v14);
        v17 = (_DWORD *)(*((_QWORD *)v51 + 18) + 4 * v16);
        v18 = *(int *)(v47[12] + 4 * v15);
        v19 = (int *)(v47[18] + 4 * v18);
        v20 = *v19;
        v21 = v47[21];
        v22 = v55;
        if ((*(_BYTE *)(v21 + v20) & 1) != 0)
          v22 = 0;
        if (v22)
        {
          v23 = (v20 + *((_DWORD *)a4 + 2));
          v58 = *a4;
          v59 = v23;
          v24 = *v17;
        }
        else
        {
          if ((*(_BYTE *)(v21 + v20) & 1) != 0)
          {
            v53 = *(unsigned __int16 *)(v47[9] + 2 * v15);
            if (*(_WORD *)(v47[9] + 2 * v15))
            {
              v27 = 0;
              v48 = *((_QWORD *)v51 + 21) + v16;
              v52 = v21 + v18;
              do
              {
                v28 = *(unsigned __int16 *)(*((_QWORD *)v54 + 5)
                                          + 2
                                          * (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v54 + 4) + 96) + 4 * v15)
                                           + (unsigned __int16)v27));
                if (v27 != v28)
                  _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i_cold_3((uint64_t)v13, a2, a3);
                v29 = v17;
                v30 = v17[v28];
                v31 = v19[v27];
                v32 = *((_DWORD *)a4 + 2);
                if (!v55 && (*(_BYTE *)(v52 + v27) & 8) != 0)
                {
                  OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getVertexCreaseEndValues(v51, v14, v28, v60);
                  if ((*(_BYTE *)(v48 + v28) & 0x10) != 0)
                  {
                    if ((*(_BYTE *)(v48 + v28) & 0x20) != 0)
                    {
                      v39 = v28 == 0;
                      v37 = v54;
                      v38 = v14;
                    }
                    else
                    {
                      v37 = v54;
                      v38 = v14;
                      v39 = v28;
                    }
                    FractionalWeight = OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement::getFractionalWeight(v37, v38, v39, v15);
                    v36 = FractionalWeight + (float)((float)(1.0 - FractionalWeight) * 0.75);
                    v35 = (float)(1.0 - FractionalWeight) * 0.125;
                  }
                  else
                  {
                    v35 = 0.125;
                    v36 = 0.75;
                  }
                  v41 = (*((_DWORD *)a4 + 2) + v31);
                  v58 = *a4;
                  v59 = v41;
                  v42 = (*(_DWORD *)(a3 + 8) + v60[0]);
                  v56 = *(_QWORD *)a3;
                  v57 = v42;
                  OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index::AddWithWeight((uint64_t)&v58, (uint64_t)&v56, v35);
                  v43 = (*((_DWORD *)a4 + 2) + v31);
                  v58 = *a4;
                  v59 = v43;
                  v44 = (*(_DWORD *)(a3 + 8) + v60[1]);
                  v56 = *(_QWORD *)a3;
                  v57 = v44;
                  OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index::AddWithWeight((uint64_t)&v58, (uint64_t)&v56, v35);
                  v45 = (*((_DWORD *)a4 + 2) + v31);
                  v58 = *a4;
                  v59 = v45;
                  v46 = (*(_DWORD *)(a3 + 8) + v30);
                  v56 = *(_QWORD *)a3;
                  v57 = v46;
                  v34 = v36;
                }
                else
                {
                  v58 = *a4;
                  v59 = (v32 + v31);
                  v33 = (*(_DWORD *)(a3 + 8) + v30);
                  v56 = *(_QWORD *)a3;
                  v57 = v33;
                  v34 = 1.0;
                }
                OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index::AddWithWeight((uint64_t)&v58, (uint64_t)&v56, v34);
                ++v27;
                v17 = v29;
              }
              while (v53 != v27);
            }
            goto LABEL_18;
          }
          v24 = *v17;
          v25 = (*((_DWORD *)a4 + 2) + v20);
          v58 = *a4;
          v59 = v25;
        }
        v26 = (*(_DWORD *)(a3 + 8) + v24);
        v56 = *(_QWORD *)a3;
        v57 = v26;
        OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index::AddWithWeight((uint64_t)&v58, (uint64_t)&v56, 1.0);
      }
LABEL_18:
      if (++v14 >= *(int *)(v50 + 8))
      {
        v13 = __p;
        break;
      }
    }
  }
  operator delete(v13);
  operator delete(v70);
}

void OUTLINED_FUNCTION_0_12(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 527, a4);
}

void OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Interpolate<OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index>()
{
  __assert_rtn("Interpolate", "primvarRefiner.h", 268, "level>0 && level<=(int)_refiner._refinements.size()");
}

void OpenSubdiv::v3_1_1::Far::PrimvarRefiner::InterpolateVarying<OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index>()
{
  __assert_rtn("InterpolateVarying", "primvarRefiner.h", 407, "level>0 && level<=(int)_refiner._refinements.size()");
}

void OpenSubdiv::v3_1_1::Far::PrimvarRefiner::InterpolateFaceVarying<OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index>()
{
  __assert_rtn("InterpolateFaceVarying", "primvarRefiner.h", 293, "level>0 && level<=(int)_refiner._refinements.size()");
}

void OpenSubdiv::v3_1_1::Far::StencilTableFactory::appendLocalPointStencilTable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_0_12("GetStencil", "stencilTable.h", a3, "(! _offsets.empty()) && i<(int)_offsets.size()");
}

void OpenSubdiv::v3_1_1::Far::StencilTableFactory::appendLocalPointStencilTable()
{
  __assert_rtn("appendLocalPointStencilTable", "stencilTableFactory.cpp", 312, "0");
}

void OpenSubdiv::v3_1_1::Far::PrimvarRefiner::interpFromEdges<(OpenSubdiv::v3_1_1::Sdc::SchemeType)1,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index>()
{
  __assert_rtn("interpFromEdges", "primvarRefiner.h", 547, "refinement.getNumChildVerticesFromFaces() > 0");
}

{
  __assert_rtn("interpFromEdges", "primvarRefiner.h", 550, "Vtr::IndexIsValid(cVertOfFace)");
}

void OpenSubdiv::v3_1_1::Far::PrimvarRefiner::interpFromVerts<(OpenSubdiv::v3_1_1::Sdc::SchemeType)1,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index>()
{
  __assert_rtn("interpFromVerts", "primvarRefiner.h", 617, "vMask.AreFaceWeightsForFaceCenters()");
}

{
  __assert_rtn("interpFromVerts", "primvarRefiner.h", 622, "Vtr::IndexIsValid(cVertOfFace)");
}

void OpenSubdiv::v3_1_1::Far::PrimvarRefiner::interpFVarFromEdges<(OpenSubdiv::v3_1_1::Sdc::SchemeType)1,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index>()
{
  __assert_rtn("interpFVarFromEdges", "primvarRefiner.h", 789, "Vtr::IndexIsValid(cVertOfFace)");
}

void OpenSubdiv::v3_1_1::Far::PrimvarRefiner::interpFVarFromVerts<(OpenSubdiv::v3_1_1::Sdc::SchemeType)1,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index,OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index>()
{
  __assert_rtn("interpFVarFromVerts", "primvarRefiner.h", 926, "vMask.AreFaceWeightsForFaceCenters()");
}

{
  __assert_rtn("interpFVarFromVerts", "primvarRefiner.h", 933, "Vtr::IndexIsValid(cVertOfFace)");
}

uint64_t OpenSubdiv::v3_1_1::Far::GregoryBasis::ProtoBasis::ProtoBasis(uint64_t a1)
{
  uint64_t v1;
  OpenSubdiv::v3_1_1::Vtr::internal::Level *v2;
  int v3;
  int v4;
  signed int v5;
  int v6;
  int v7;
  uint64_t v8;
  OpenSubdiv::v3_1_1::Vtr::internal::Level *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _BOOL8 v24;
  unsigned int v25;
  uint64_t v26;
  unsigned __int16 *v27;
  int v28;
  uint64_t *v29;
  int v30;
  char v31;
  int v32;
  int v33;
  float v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t i;
  void **v44;
  uint64_t j;
  void **v46;
  _QWORD *v47;
  uint64_t v48;
  unsigned int v49;
  _QWORD *v50;
  uint64_t v51;
  OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *v52;
  uint64_t v53;
  uint64_t v54;
  OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *v55;
  float v56;
  float v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  int *v63;
  int v64;
  int v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int **v71;
  int v72;
  int v73;
  void **v74;
  float v75;
  float v76;
  __float2 v77;
  float v78;
  float v79;
  void **v80;
  unint64_t v81;
  int v82;
  float v83;
  float v84;
  float v85;
  int *v86;
  int v87;
  uint64_t v88;
  float *v89;
  float v90;
  float v91;
  float v92;
  unsigned int v93;
  float v94;
  float v95;
  float v96;
  void **v97;
  void **v98;
  uint64_t v99;
  uint64_t v100;
  float v101;
  int v102;
  int v103;
  __float2 v104;
  const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char v110;
  int v111;
  float v112;
  float v113;
  float v114;
  __float2 v115;
  __float2 v116;
  uint64_t v117;
  uint64_t v118;
  float v119;
  void **v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *v124;
  const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  int v133;
  void **v134;
  const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *v135;
  const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *v136;
  float v137;
  float v138;
  float v139;
  const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *v140;
  const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *v141;
  const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *v142;
  void **v143;
  float v144;
  float v145;
  const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *v146;
  char *v147;
  uint64_t v148;
  const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *v149;
  uint64_t k;
  uint64_t v151;
  _DWORD *v152;
  uint64_t v153;
  _DWORD *v154;
  uint64_t v155;
  _DWORD *v156;
  uint64_t v157;
  _DWORD *v158;
  uint64_t v159;
  _DWORD *v160;
  unint64_t v161;
  uint64_t v162;
  _BYTE *v163;
  _QWORD *v164;
  unint64_t v165;
  uint64_t v166;
  _BYTE *v167;
  _QWORD *v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  uint64_t v174;
  void **v175;
  const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *v176;
  int v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t FaceFVarValues;
  unsigned int v182;
  OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *v183;
  OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *v184;
  OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *v185;
  OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *v186;
  OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *v187;
  OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *v188;
  int v189;
  uint64_t v190;
  uint64_t v191;
  _BYTE v192[4];
  _BYTE *v193;
  unsigned int v194;
  int v195;
  _BYTE v196[14080];
  void *v197;
  _BYTE *v198;
  unsigned int v199;
  int v200;
  _BYTE v201[3520];
  void *v202[361];
  _BYTE *v203;
  unsigned int v204;
  unsigned int v205;
  _BYTE v206[160];
  void *v207;
  _BYTE *v208;
  unsigned int v209;
  unsigned int v210;
  _BYTE v211[160];
  void *v212;
  _BYTE *v213;
  unsigned int v214;
  unsigned int v215;
  _BYTE v216[160];
  void *v217;
  _BYTE *v218;
  unsigned int v219;
  unsigned int v220;
  _BYTE v221[160];
  void *v222;
  uint64_t v223;

  MEMORY[0x1E0C80A78](a1);
  v5 = v4;
  v7 = v6;
  v179 = v8;
  v9 = v2;
  v10 = v1;
  v11 = 0;
  v223 = *MEMORY[0x1E0C80C00];
  do
  {
    v12 = v1 + v11;
    *(_DWORD *)v12 = 0;
    *(_QWORD *)(v12 + 8) = v1 + v11 + 24;
    *(_QWORD *)(v12 + 344) = 0;
    *(_QWORD *)(v12 + 16) = 0x2800000028;
    v11 += 352;
  }
  while (v11 != 1408);
  do
  {
    v13 = v1 + v11;
    *(_DWORD *)v13 = 0;
    *(_QWORD *)(v13 + 8) = v1 + v11 + 24;
    *(_QWORD *)(v13 + 344) = 0;
    *(_QWORD *)(v13 + 16) = 0x2800000028;
    v11 += 352;
  }
  while (v13 + 352 != v1 + 2816);
  v14 = 2816;
  do
  {
    v15 = v1 + v14;
    *(_DWORD *)v15 = 0;
    *(_QWORD *)(v15 + 8) = v1 + v14 + 24;
    *(_QWORD *)(v15 + 344) = 0;
    *(_QWORD *)(v15 + 16) = 0x2800000028;
    v14 += 352;
  }
  while (v15 + 352 != v1 + 4224);
  v16 = 4224;
  do
  {
    v17 = v1 + v16;
    *(_DWORD *)v17 = 0;
    *(_QWORD *)(v17 + 8) = v1 + v16 + 24;
    *(_QWORD *)(v17 + 344) = 0;
    *(_QWORD *)(v17 + 16) = 0x2800000028;
    v16 += 352;
  }
  while (v17 + 352 != v1 + 5632);
  v18 = 5632;
  do
  {
    v19 = v1 + v18;
    *(_DWORD *)v19 = 0;
    *(_QWORD *)(v19 + 8) = v1 + v18 + 24;
    *(_QWORD *)(v19 + 344) = 0;
    *(_QWORD *)(v19 + 16) = 0x2800000028;
    v18 += 352;
  }
  while (v19 + 352 != v1 + 7040);
  v20 = *((_QWORD *)v2 + 6) + 4 * *(int *)(*((_QWORD *)v2 + 3) + 4 * ((2 * v3) | 1));
  FaceFVarValues = v20;
  if ((v4 & 0x80000000) == 0)
    FaceFVarValues = OpenSubdiv::v3_1_1::Vtr::internal::Level::getFaceFVarValues(v2, v3, v4);
  v21 = 0;
  v22 = *((int *)v9 + 5);
  do
  {
    v23 = &(&v203)[v21];
    *v23 = &v206[v21 * 8];
    v23[1] = 0x2800000000;
    v23[22] = 0;
    v21 += 23;
  }
  while (v21 != 92);
  v24 = v5 >= 0;
  v25 = 2 * (v22 + v24);
  v178 = v10;
  v177 = v7;
  v175 = (void **)(v10 + 2816);
  v174 = v22 + v24;
  if ((_DWORD)v22 + v24)
  {
    if (v205 < v25)
    {
      operator delete(v207);
      v203 = v206;
      v205 = 40;
      v207 = operator new(4 * v25);
      v203 = v207;
      v205 = v25;
    }
    v204 = v25;
    if (v210 < v25)
    {
      operator delete(v212);
      v208 = v211;
      v210 = 40;
      v212 = operator new(4 * v25);
      v208 = v212;
      v210 = v25;
    }
    v209 = v25;
    if (v215 < v25)
    {
      operator delete(v217);
      v213 = v216;
      v215 = 40;
      v217 = operator new(4 * v25);
      v213 = v217;
      v215 = v25;
    }
    v214 = v25;
    if (v220 < v25)
    {
      operator delete(v222);
      v218 = v221;
      v220 = 40;
      v222 = operator new(4 * v25);
      v218 = v222;
      v220 = v25;
    }
  }
  else
  {
    operator delete(v207);
    v203 = v206;
    v204 = v25;
    v205 = 40;
    operator delete(v212);
    v208 = v211;
    v209 = v25;
    v210 = 40;
    operator delete(v217);
    v213 = v216;
    v215 = 40;
    v214 = v25;
    operator delete(v222);
    v218 = v221;
    v220 = 40;
  }
  v26 = 0;
  v219 = v25;
  v182 = 4;
  while (v26 != 4)
  {
    *(_DWORD *)(v10 + 4 * v26 + 7040) = *(_DWORD *)(v20 + 4 * v26) + v177;
    v27 = (unsigned __int16 *)(v179 + 6 * v26);
    v28 = *(_DWORD *)(v20 + 4 * v26);
    v29 = (uint64_t *)&(&v203)[23 * v26];
    if (*v27)
    {
      v30 = OpenSubdiv::v3_1_1::Vtr::internal::Level::gatherQuadRegularPartialRingAroundVertex(v9, v28, v27, *v29, v5);
      if ((v30 & 1) == 0)
        goto LABEL_28;
    }
    else
    {
      v30 = OpenSubdiv::v3_1_1::Vtr::internal::Level::gatherQuadRegularRingAroundVertex(v9, v28, (int *)*v29, v5);
      if ((v30 & 1) == 0)
      {
LABEL_28:
        v31 = 0;
        if (v30 >= 0)
          v32 = v30;
        else
          v32 = v30 + 1;
        v33 = v32 >> 1;
        v34 = 6.2832 / (float)v33;
        v35 = v33;
        goto LABEL_37;
      }
    }
    v36 = v30 - 1;
    if ((int)v36 >= 0)
      v37 = v30 - 1;
    else
      v37 = v30;
    v33 = v37 >> 1;
    v35 = v33 + 1;
    v34 = 3.1416 / (float)v33;
    *(_DWORD *)(*v29 + 4 * v30) = *(_DWORD *)(*v29 + 4 * v36);
    v31 = 1;
LABEL_37:
    v192[v26] = v31;
    *((_DWORD *)&v202[357] + v26) = v33;
    *((_DWORD *)&v202[359] + v26) = v35;
    *((float *)&v202[353] + v26) = v34;
    if (v35 >= 1)
    {
      v38 = 0;
      v39 = 0;
      v182 = v182 + v30 - 3;
      v40 = *v29;
      v41 = 2 * v35;
      while (1)
      {
        if (*(_DWORD *)(v40 + 4 * v39) == *(_DWORD *)(FaceFVarValues + 4 * ((v26 + 1) & 3)))
        {
          v42 = v39 + 2;
          if (v41 - 2 == v39)
            v42 = 0;
          if (*(_DWORD *)(v40 + 4 * v42) == *(_DWORD *)(FaceFVarValues + 4 * (((_BYTE)v26 - 1) & 3)))
            break;
        }
        v39 += 2;
        ++v38;
        if (v41 == v39)
          goto LABEL_46;
      }
      *((_DWORD *)&v202[355] + v26++) = v38;
      if ((_DWORD)v39 != -2)
        continue;
    }
LABEL_46:
    OpenSubdiv::v3_1_1::Far::GregoryBasis::ProtoBasis::ProtoBasis();
  }
  for (i = 0; i != 176; i += 44)
  {
    v44 = &v202[i + 177];
    *(_DWORD *)v44 = 0;
    v44[1] = &v202[i + 180];
    v44[43] = 0;
    v44[2] = (void *)0x2800000028;
  }
  for (j = 0; j != 176; j += 44)
  {
    v46 = &v202[j + 1];
    *(_DWORD *)v46 = 0;
    v46[1] = &v202[j + 4];
    v46[43] = 0;
    v46[2] = (void *)0x2800000028;
  }
  v47 = v201;
  v198 = v201;
  v199 = v174;
  v200 = 10;
  v202[0] = 0;
  LODWORD(v48) = v174;
  if (v174 >= 0xB)
  {
    v47 = operator new(352 * v174);
    v202[0] = v47;
    v198 = v47;
    v200 = v174;
    LODWORD(v48) = v199;
  }
  if ((_DWORD)v48)
  {
    v48 = v48;
    do
    {
      *(_DWORD *)v47 = 0;
      v47[1] = v47 + 3;
      v47[43] = 0;
      v47[2] = 0x2800000028;
      v47 += 44;
      --v48;
    }
    while (v48);
  }
  v49 = 4 * v174;
  v50 = v196;
  v193 = v196;
  v194 = 4 * v174;
  v195 = 40;
  v197 = 0;
  if ((4 * v174) >= 0x29)
  {
    v50 = operator new(352 * v49);
    v197 = v50;
    v193 = v50;
    v195 = 4 * v174;
    v49 = v194;
  }
  if (v49)
  {
    v51 = v49;
    do
    {
      *(_DWORD *)v50 = 0;
      v50[1] = v50 + 3;
      v50[43] = 0;
      v50[2] = 0x2800000028;
      v50 += 44;
      --v51;
    }
    while (v51);
  }
  v52 = 0;
  v53 = 0;
  do
  {
    v187 = v52;
    v189 = *(_DWORD *)(FaceFVarValues + 4 * v53);
    v180 = v53;
    v54 = *((unsigned int *)&v202[359] + v53);
    v190 = v54;
    if ((int)v54 >= 1)
    {
      v55 = 0;
      v56 = 1.0 / (float)((float)(int)v54 + 5.0);
      v57 = v56 * (float)(int)v54;
      v183 = (OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)(352 * v54);
      v185 = (OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&(&v203)[23 * v53];
      v58 = -1;
      v59 = 2;
      v60 = 4;
      do
      {
        v61 = ((int)v54 + v58) % (int)v54;
        v62 = *(_QWORD *)v185;
        v63 = (int *)(*(_QWORD *)v185 + v60);
        v64 = *(v63 - 1);
        v65 = *v63;
        if ((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)((char *)v183 - 352) == v55)
          v66 = 0;
        else
          v66 = v59;
        v67 = *(_DWORD *)(v62 + 4 * v66);
        v68 = *(_DWORD *)(v62 + 8 * v61);
        v69 = *(_DWORD *)(v62 + 8 * v61 + 4);
        OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::Clear((void **)((char *)v55 + (_QWORD)v198), 4u);
        OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)((char *)v55 + (_QWORD)v198), v189, v57);
        OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)((char *)v55 + (_QWORD)v198), v67, v56 + v56);
        OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)((char *)v55 + (_QWORD)v198), v64, v56 + v56);
        OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)((char *)v55 + (_QWORD)v198), v65, v56);
        OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::Clear((void **)&v193[(unint64_t)v55 + (_QWORD)v187], 4u);
        OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v193[(unint64_t)v55 + (_QWORD)v187], v67, 0.33333);
        OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v193[(unint64_t)v55 + (_QWORD)v187], v68, -0.33333);
        v70 = v65;
        v54 = v190;
        OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v193[(unint64_t)v55 + (_QWORD)v187], v70, 0.16667);
        OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v193[(unint64_t)v55 + (_QWORD)v187], v69, -0.16667);
        v55 = (OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)((char *)v55 + 352);
        v60 += 8;
        ++v58;
        v59 += 2;
      }
      while (v183 != v55);
    }
    if ((*(_BYTE *)(v179 + 6 * v53 + 4) & 2) != 0)
    {
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::Clear((void **)(v178 + 352 * v53), v182);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)(v178 + 352 * v53), v189, 1.0);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::Clear(&v202[44 * v53 + 177], v182);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v202[44 * v53 + 177], *(_DWORD *)(FaceFVarValues + 4 * v53), 0.66667);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v202[44 * v53 + 177], *(_DWORD *)(FaceFVarValues + 4 * (((_BYTE)v53 + 1) & 3)), 0.33333);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::Clear(&v202[44 * v53 + 1], v182);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v202[44 * v53 + 1], *(_DWORD *)(FaceFVarValues + 4 * v53), 0.66667);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v202[44 * v53 + 1], *(_DWORD *)(FaceFVarValues + 4 * (((_BYTE)v53 - 1) & 3)), 0.33333);
    }
    else if (v192[v53])
    {
      v71 = (int **)&(&v203)[23 * v53];
      v72 = **v71;
      v73 = (*v71)[2 * (int)v54 - 1];
      v74 = (void **)(v178 + 352 * v53);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::Clear(v74, v182);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)v74, v72, 0.16667);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)v74, v73, 0.16667);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)v74, v189, 0.66667);
      v75 = (float)*((int *)&v202[357] + v53);
      v76 = *((float *)&v202[353] + v53);
      v77 = __sincosf_stret(v76);
      v78 = 1.0 / (float)(v77.__cosval + (float)(v75 * 3.0));
      LODWORD(v74) = (*v71)[1];
      v79 = (float)(v78 * (float)-(float)((float)((float)(v77.__cosval * 2.0) + 1.0) * sqrtf(v77.__cosval + 1.0)))
          / sqrtf(1.0 - v77.__cosval);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::Clear(&v202[44 * v53 + 177], v182);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v202[44 * v53 + 177], v72, 0.16667);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v202[44 * v53 + 177], v73, -0.16667);
      v80 = &v202[44 * v53 + 1];
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::Clear(v80, v182);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)v80, v189, (float)(v77.__sinval * -4.0) * v78);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)v80, v72, v79);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)v80, (int)v74, v77.__sinval * v78);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)v80, v73, v79);
      if ((int)v190 >= 3)
      {
        v81 = 0;
        v82 = 1;
        do
        {
          v83 = sinf(v76 * (float)v82);
          v84 = v78 * (float)(v83 * 4.0);
          v85 = v78 * (float)(v83 + sinf(v76 * (float)++v82));
          v86 = &(*v71)[v81 / 4];
          v87 = v86[3];
          OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)v80, v86[2], v84);
          OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)v80, v87, v85);
          v81 += 8;
        }
        while (8 * (v190 - 1) - 8 != v81);
      }
      v88 = *(unsigned int *)v80;
      if ((int)v88 >= 1)
      {
        v89 = (float *)((char *)v202[44 * v53 + 2] + 4);
        do
        {
          *v89 = *v89 * 0.33333;
          v89 += 2;
          --v88;
        }
        while (v88);
      }
    }
    else
    {
      if ((int)v54 <= 0)
        OpenSubdiv::v3_1_1::Far::GregoryBasis::ProtoBasis::ProtoBasis();
      v90 = *((float *)&v202[353] + v53);
      v91 = (float)(int)v54;
      if (v54 > 0x1D)
      {
        v95 = cosf(6.2832 / v91);
        v94 = 1.0;
        v92 = 1.0
            / (float)((float)((float)((float)(v95 + 5.0) + sqrtf((float)(v95 + 9.0) * (float)(v95 + 1.0))) * v91)
                    * 0.0625);
        v93 = v182;
      }
      else
      {
        v92 = OpenSubdiv::v3_1_1::Far::computeCoefficient(int)::efTable[v54];
        v93 = v182;
        v94 = 1.0;
      }
      v96 = v94 / v91;
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::Clear((void **)(v178 + 352 * v53), v93);
      v97 = &v202[44 * v53 + 177];
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::Clear(v97, v93);
      v98 = &v202[44 * v53 + 1];
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::Clear(v98, v93);
      v99 = 0;
      v100 = 0;
      v101 = v92 * 0.5;
      v102 = v54 - 1;
      do
      {
        v103 = v102 + v100 - (v102 + (int)v100) / (int)v54 * v190;
        OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)(v178 + 352 * v53), (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v198[v99], v96);
        v104 = __sincosf_stret(v90 * (float)(int)v100);
        OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)v97, (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v198[v99], v101 * v104.__cosval);
        OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)v97, (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v198[352 * v103], v101 * v104.__cosval);
        OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)v98, (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v198[v99], v101 * v104.__sinval);
        v105 = (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v198[352 * v103];
        LODWORD(v54) = v190;
        OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)v98, v105, v101 * v104.__sinval);
        ++v100;
        v99 += 352;
      }
      while (v190 != v100);
    }
    ++v53;
    v52 = (OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)((char *)v187 + 352 * v174);
  }
  while (v180 != 3);
  v106 = 0;
  v107 = 0;
  v108 = v178;
  v109 = (char *)(v179 + 4);
  do
  {
    v110 = *v109;
    v109 += 6;
    if ((v110 & 2) != 0)
    {
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::operator=((int *)(v178 + v106 + 1408), (int *)&v202[v106 / 8 + 177]);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::operator=((int *)(v178 + v106 + 2816), (int *)&v202[v106 / 8 + 1]);
    }
    else
    {
      v111 = *((_DWORD *)&v202[355] + v107);
      v112 = *((float *)&v202[353] + v107);
      v113 = v112 * (float)v111;
      v114 = v112 * (float)((v111 + 1) % *((_DWORD *)&v202[359] + v107));
      if (v192[v107] && *((int *)&v202[357] + v107) < 2)
      {
        OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::Clear((void **)(v178 + v106 + 1408), v182);
        OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)(v178 + v106 + 1408), *(_DWORD *)(FaceFVarValues + 4 * v107), 0.66667);
        OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)(v178 + v106 + 1408), *(_DWORD *)(FaceFVarValues + 4 * (((_BYTE)v107 + 1) & 3)), 0.33333);
        OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::Clear((void **)(v178 + v106 + 2816), v182);
        OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)(v178 + v106 + 2816), *(_DWORD *)(FaceFVarValues + 4 * v107), 0.66667);
        OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)(v178 + v106 + 2816), *(_DWORD *)(FaceFVarValues + 4 * (((_BYTE)v107 - 1) & 3)), 0.33333);
      }
      else
      {
        OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::operator=((int *)(v178 + v106 + 1408), (int *)(v178 + v106));
        v115 = __sincosf_stret(v113);
        OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)(v178 + v106 + 1408), (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v202[v106 / 8 + 177], v115.__cosval);
        OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)(v178 + v106 + 1408), (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v202[v106 / 8 + 1], v115.__sinval);
        OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::operator=((int *)(v178 + v106 + 2816), (int *)(v178 + v106));
        v116 = __sincosf_stret(v114);
        OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)(v178 + v106 + 2816), (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v202[v106 / 8 + 177], v116.__cosval);
        OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)(v178 + v106 + 2816), (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v202[v106 / 8 + 1], v116.__sinval);
      }
    }
    ++v107;
    v106 += 352;
  }
  while (v107 != 4);
  v117 = 0;
  v118 = 0;
  v119 = -2.0;
  v120 = v175;
  while (2)
  {
    v191 = v118 + 1;
    v121 = (v118 + 1) & 3;
    v122 = ((_BYTE)v118 - 1) & 3;
    v123 = *((_DWORD *)&v202[355] + v118);
    v124 = (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v193[352 * v123 + v117];
    v125 = (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v193[352
                                                                     * ((v123 + 1) % *((_DWORD *)&v202[359] + v118))
                                                                     + v117];
    v126 = cosf(*((float *)&v202[353] + v118));
    v127 = cosf(*((float *)&v202[353] + v122));
    v128 = cosf(*((float *)&v202[353] + v121));
    v129 = (float)(v126 * v119) + 3.0;
    v130 = v129 - v128;
    v131 = v126 + v126;
    v132 = v129 - v127;
    if (!v192[v118])
    {
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::Clear(v120 + 176, v182);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)(v120 + 176), (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)(v120 - 352), v128 / 3.0);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)(v120 + 176), (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)(v120 - 176), v130 / 3.0);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)(v120 + 176), (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)(v108 + 352 * v121 + 2816), v131 / 3.0);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)(v120 + 176), v124, 0.33333);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::Clear(v120 + 352, v182);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)(v120 + 352), (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)(v120 - 352), v127 / 3.0);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)(v120 + 352), (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)v120, v132 / 3.0);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)(v120 + 352), (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)(v108 + 352 * (((_BYTE)v118 - 1) & 3) + 1408), v131 / 3.0);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)(v120 + 352), v125, -0.33333);
      goto LABEL_100;
    }
    v133 = *((_DWORD *)&v202[357] + v118);
    v134 = v120 + 176;
    OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::Clear(v120 + 176, v182);
    if (v133 < 2)
    {
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)(v120 + 176), *(_DWORD *)(FaceFVarValues + 4 * v118), 0.44444);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)(v120 + 176), *(_DWORD *)(FaceFVarValues + 4 * (((_BYTE)v118 + 2) & 3)), 0.11111);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)(v120 + 176), *(_DWORD *)(FaceFVarValues + 4 * v121), 0.22222);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)(v120 + 176), *(_DWORD *)(FaceFVarValues + 4 * v122), 0.22222);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::operator=((int *)v120 + 704, (int *)v120 + 352);
      v108 = v178;
LABEL_100:
      v147 = (char *)v120;
LABEL_101:
      v148 = v191;
      goto LABEL_102;
    }
    v135 = v125;
    v136 = (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)(v120 - 352);
    v137 = v128 / 3.0;
    OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)(v120 + 176), (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)(v120 - 352), v128 / 3.0);
    v138 = v130 / 3.0;
    v188 = (OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)(v120 - 176);
    OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)(v120 + 176), (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)(v120 - 176), v130 / 3.0);
    v108 = v178;
    v139 = v131 / 3.0;
    v186 = (OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)(v178 + 352 * v121 + 2816);
    OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)(v120 + 176), v186, v131 / 3.0);
    v140 = v124;
    v141 = v135;
    v184 = v140;
    OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)(v120 + 176), v140, 0.33333);
    v142 = (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)v120;
    v143 = v120 + 352;
    OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::Clear(v143, v182);
    v144 = v127 / 3.0;
    OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)v143, v136, v144);
    v145 = v132 / 3.0;
    v176 = v142;
    OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)v143, v142, v145);
    v146 = (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)(v178 + 352 * v122 + 1408);
    OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)v143, v146, v131 / 3.0);
    OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)v143, v141, -0.33333);
    if (v192[v122])
    {
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::Clear(v134, v182);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)v134, v136, v137);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)v134, v188, v138);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)v134, v186, v139);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)v134, v184, 0.33333);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::operator=((int *)v143, (int *)v134);
      v147 = (char *)v142;
      v119 = -2.0;
      goto LABEL_101;
    }
    v149 = v141;
    v147 = (char *)v176;
    v119 = -2.0;
    v148 = v191;
    if (v192[v121])
    {
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::Clear(v143, v182);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)v143, v136, v144);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)v143, v176, v145);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)v143, v146, v139);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)v143, v149, -0.33333);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::operator=((int *)v134, (int *)v143);
    }
LABEL_102:
    v117 += 352 * v174;
    v120 = (void **)(v147 + 352);
    v118 = v148;
    if (v148 != 4)
      continue;
    break;
  }
  for (k = 0; k != 4; ++k)
  {
    v151 = *(unsigned int *)(v108 + 352 * k);
    if ((int)v151 >= 1)
    {
      v152 = *(_DWORD **)(v108 + 352 * k + 8);
      do
      {
        *v152 += v177;
        v152 += 2;
        --v151;
      }
      while (v151);
    }
    v153 = *(unsigned int *)(v108 + 352 * k + 1408);
    if ((int)v153 >= 1)
    {
      v154 = *(_DWORD **)(v108 + 352 * k + 1416);
      do
      {
        *v154 += v177;
        v154 += 2;
        --v153;
      }
      while (v153);
    }
    v155 = *(unsigned int *)(v108 + 352 * k + 2816);
    if ((int)v155 >= 1)
    {
      v156 = *(_DWORD **)(v108 + 352 * k + 2824);
      do
      {
        *v156 += v177;
        v156 += 2;
        --v155;
      }
      while (v155);
    }
    v157 = *(unsigned int *)(v108 + 352 * k + 4224);
    if ((int)v157 >= 1)
    {
      v158 = *(_DWORD **)(v108 + 352 * k + 4232);
      do
      {
        *v158 += v177;
        v158 += 2;
        --v157;
      }
      while (v157);
    }
    v159 = *(unsigned int *)(v108 + 352 * k + 5632);
    if ((int)v159 >= 1)
    {
      v160 = *(_DWORD **)(v108 + 352 * k + 5640);
      do
      {
        *v160 += v177;
        v160 += 2;
        --v159;
      }
      while (v159);
    }
  }
  if (v194)
  {
    v161 = 0;
    v162 = 344;
    do
    {
      v163 = &v193[v162];
      v164 = &v193[v162 - 336];
      operator delete(*(void **)&v193[v162]);
      *v164 = v163 - 320;
      *((_DWORD *)v163 - 81) = 40;
      ++v161;
      v162 += 352;
    }
    while (v161 < v194);
  }
  operator delete(v197);
  if (v199)
  {
    v165 = 0;
    v166 = 344;
    do
    {
      v167 = &v198[v166];
      v168 = &v198[v166 - 336];
      operator delete(*(void **)&v198[v166]);
      *v168 = v167 - 320;
      *((_DWORD *)v167 - 81) = 40;
      ++v165;
      v166 += 352;
    }
    while (v165 < v199);
  }
  operator delete(v202[0]);
  v169 = 1408;
  do
  {
    operator delete(v202[v169 / 8]);
    *(_QWORD *)&v201[v169 + 3184] = &v201[v169 + 3200];
    *(_DWORD *)&v201[v169 + 3196] = 40;
    v169 -= 352;
  }
  while (v169);
  v170 = 176;
  do
  {
    operator delete(v202[v170 + 176]);
    v202[v170 + 134] = &v202[v170 + 136];
    HIDWORD(v202[v170 + 135]) = 40;
    v170 -= 44;
  }
  while (v170 * 8);
  v171 = 92;
  do
  {
    v172 = (char *)&(&v203)[v171];
    operator delete(v202[v171 + 360]);
    *((_QWORD *)v172 - 23) = v172 - 168;
    *((_DWORD *)v172 - 43) = 40;
    v171 -= 23;
  }
  while (v171 * 8);
  return v178;
}

void OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::Clear(void **this, unsigned int a2)
{
  void *v4;

  *(_DWORD *)this = 0;
  if (*((_DWORD *)this + 4) < (signed int)a2)
  {
    if (a2)
    {
      if (*((_DWORD *)this + 5) < a2)
      {
        operator delete(this[43]);
        this[1] = this + 3;
        *((_DWORD *)this + 5) = 40;
        v4 = operator new(8 * a2);
        this[43] = v4;
        this[1] = v4;
        *((_DWORD *)this + 5) = a2;
      }
    }
    else
    {
      operator delete(this[43]);
      this[1] = this + 3;
      *((_DWORD *)this + 5) = 40;
    }
    *((_DWORD *)this + 4) = a2;
  }
}

float OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight(OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *this, int a2, float result)
{
  int v3;
  float *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_DWORD *)this;
  if (*(int *)this < 1)
  {
LABEL_5:
    if (v3 >= *((_DWORD *)this + 4))
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight();
    v6 = *((_QWORD *)this + 1) + 8 * v3;
    *(_DWORD *)v6 = a2;
    *(float *)(v6 + 4) = result;
    *(_DWORD *)this = v3 + 1;
  }
  else
  {
    v4 = (float *)(*((_QWORD *)this + 1) + 4);
    v5 = *(unsigned int *)this;
    while (*((_DWORD *)v4 - 1) != a2)
    {
      v4 += 2;
      if (!--v5)
        goto LABEL_5;
    }
    result = *v4 + result;
    *v4 = result;
  }
  return result;
}

void OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight(OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *this, const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *a2, float a3)
{
  uint64_t v6;
  uint64_t v7;

  if (*(int *)a2 >= 1)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight(this, *(_DWORD *)(*((_QWORD *)a2 + 1) + v6), *(float *)(*((_QWORD *)a2 + 1) + v6 + 4) * a3);
      ++v7;
      v6 += 8;
    }
    while (v7 < *(int *)a2);
  }
}

int *OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::operator=(int *a1, int *a2)
{
  int v4;
  uint64_t v5;

  OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::Clear((void **)a1, a2[4]);
  v4 = *a2;
  *a1 = *a2;
  if (v4 > a1[4])
    OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::operator=();
  if (v4 >= 1)
  {
    v5 = 0;
    do
    {
      *(_QWORD *)(*((_QWORD *)a1 + 1) + 8 * v5) = *(_QWORD *)(*((_QWORD *)a2 + 1) + 8 * v5);
      ++v5;
    }
    while (v5 < *a1);
  }
  return a1;
}

void OpenSubdiv::v3_1_1::Far::GregoryBasis::ProtoBasis::ProtoBasis()
{
  __assert_rtn("computeCoefficient", "gregoryBasis.cpp", 53, "valence > 0");
}

{
  __assert_rtn("ProtoBasis", "gregoryBasis.cpp", 169, "cornerPatchFace[corner] != -1");
}

void OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight()
{
  __assert_rtn("AddWithWeight", "gregoryBasis.h", 92, "_size < (int)_stencils.GetSize()");
}

void OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::operator=()
{
  __assert_rtn("operator=", "gregoryBasis.h", 108, "_size <= (int)_stencils.GetSize()");
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::Refinement::Refinement(uint64_t result, uint64_t a2, uint64_t a3, int *a4)
{
  int v4;

  *(_QWORD *)result = off_1EA598510;
  *(_QWORD *)(result + 8) = a2;
  *(_QWORD *)(result + 16) = a3;
  v4 = *a4;
  *(_OWORD *)(result + 120) = 0u;
  *(_DWORD *)(result + 24) = v4;
  *(_DWORD *)(result + 32) = -1;
  *(_WORD *)(result + 36) = 0;
  *(_QWORD *)(result + 104) = 0;
  *(_DWORD *)(result + 112) = 0;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  *(_OWORD *)(result + 72) = 0u;
  *(_OWORD *)(result + 84) = 0u;
  *(_OWORD *)(result + 136) = 0u;
  *(_OWORD *)(result + 152) = 0u;
  *(_OWORD *)(result + 168) = 0u;
  *(_OWORD *)(result + 184) = 0u;
  *(_OWORD *)(result + 200) = 0u;
  *(_OWORD *)(result + 216) = 0u;
  *(_OWORD *)(result + 232) = 0u;
  *(_OWORD *)(result + 248) = 0u;
  *(_OWORD *)(result + 264) = 0u;
  *(_OWORD *)(result + 280) = 0u;
  *(_OWORD *)(result + 296) = 0u;
  *(_OWORD *)(result + 312) = 0u;
  *(_OWORD *)(result + 328) = 0u;
  *(_OWORD *)(result + 344) = 0u;
  *(_OWORD *)(result + 360) = 0u;
  *(_OWORD *)(result + 376) = 0u;
  *(_OWORD *)(result + 392) = 0u;
  *(_OWORD *)(result + 408) = 0u;
  *(_OWORD *)(result + 424) = 0u;
  *(_OWORD *)(result + 440) = 0u;
  *(_OWORD *)(result + 456) = 0u;
  *(_OWORD *)(result + 472) = 0u;
  *(_OWORD *)(result + 488) = 0u;
  if (*(_QWORD *)(a3 + 8))
    OpenSubdiv::v3_1_1::Vtr::internal::Refinement::Refinement();
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(a2 + 12) + 1;
  return result;
}

void OpenSubdiv::v3_1_1::Vtr::internal::Refinement::~Refinement(OpenSubdiv::v3_1_1::Vtr::internal::Refinement *this)
{
  OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement **v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  *(_QWORD *)this = off_1EA598510;
  v4 = (char *)this + 480;
  v2 = (OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement **)*((_QWORD *)this + 60);
  v3 = *((_QWORD *)v4 + 1);
  if ((int)((unint64_t)(v3 - (_QWORD)v2) >> 3) >= 1)
  {
    v5 = 0;
    do
    {
      if (v2[v5])
      {
        OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement::~FVarRefinement(v2[v5]);
        MEMORY[0x1DF0D41C0]();
        v2 = (OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement **)*((_QWORD *)this + 60);
        v3 = *((_QWORD *)this + 61);
      }
      ++v5;
    }
    while (v5 < (int)((unint64_t)(v3 - (_QWORD)v2) >> 3));
  }
  if (v2)
  {
    *((_QWORD *)this + 61) = v2;
    operator delete(v2);
  }
  v6 = (void *)*((_QWORD *)this + 57);
  if (v6)
  {
    *((_QWORD *)this + 58) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 54);
  if (v7)
  {
    *((_QWORD *)this + 55) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 51);
  if (v8)
  {
    *((_QWORD *)this + 52) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 48);
  if (v9)
  {
    *((_QWORD *)this + 49) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 45);
  if (v10)
  {
    *((_QWORD *)this + 46) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 42);
  if (v11)
  {
    *((_QWORD *)this + 43) = v11;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)this + 39);
  if (v12)
  {
    *((_QWORD *)this + 40) = v12;
    operator delete(v12);
  }
  v13 = (void *)*((_QWORD *)this + 36);
  if (v13)
  {
    *((_QWORD *)this + 37) = v13;
    operator delete(v13);
  }
  v14 = (void *)*((_QWORD *)this + 33);
  if (v14)
  {
    *((_QWORD *)this + 34) = v14;
    operator delete(v14);
  }
  v15 = (void *)*((_QWORD *)this + 30);
  if (v15)
  {
    *((_QWORD *)this + 31) = v15;
    operator delete(v15);
  }
  v16 = (void *)*((_QWORD *)this + 27);
  if (v16)
  {
    *((_QWORD *)this + 28) = v16;
    operator delete(v16);
  }
  v17 = (void *)*((_QWORD *)this + 24);
  if (v17)
  {
    *((_QWORD *)this + 25) = v17;
    operator delete(v17);
  }
  v18 = (void *)*((_QWORD *)this + 21);
  if (v18)
  {
    *((_QWORD *)this + 22) = v18;
    operator delete(v18);
  }
  v19 = (void *)*((_QWORD *)this + 18);
  if (v19)
  {
    *((_QWORD *)this + 19) = v19;
    operator delete(v19);
  }
  v20 = (void *)*((_QWORD *)this + 15);
  if (v20)
  {
    *((_QWORD *)this + 16) = v20;
    operator delete(v20);
  }
}

void OpenSubdiv::v3_1_1::Vtr::internal::Refinement::initializeSparseSelectionTags(OpenSubdiv::v3_1_1::Vtr::internal::Refinement *this)
{
  int *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v2 = (int *)*((_QWORD *)this + 1);
  v3 = *v2;
  v4 = *((_QWORD *)this + 51);
  v5 = *((_QWORD *)this + 52) - v4;
  if (v3 <= v5)
  {
    if (v3 < v5)
      *((_QWORD *)this + 52) = v4 + v3;
  }
  else
  {
    std::vector<OpenSubdiv::v3_1_1::Vtr::internal::Refinement::SparseTag>::__append((_QWORD *)this + 51, v3 - v5);
    v2 = (int *)*((_QWORD *)this + 1);
  }
  v6 = v2[1];
  v7 = *((_QWORD *)this + 54);
  v8 = *((_QWORD *)this + 55) - v7;
  if (v6 <= v8)
  {
    if (v6 < v8)
      *((_QWORD *)this + 55) = v7 + v6;
  }
  else
  {
    std::vector<OpenSubdiv::v3_1_1::Vtr::internal::Refinement::SparseTag>::__append((_QWORD *)this + 54, v6 - v8);
    v2 = (int *)*((_QWORD *)this + 1);
  }
  v9 = v2[2];
  v10 = *((_QWORD *)this + 57);
  v11 = *((_QWORD *)this + 58) - v10;
  if (v9 <= v11)
  {
    if (v9 < v11)
      *((_QWORD *)this + 58) = v10 + v9;
  }
  else
  {
    std::vector<OpenSubdiv::v3_1_1::Vtr::internal::Refinement::SparseTag>::__append((_QWORD *)this + 57, v9 - v11);
  }
}

void OpenSubdiv::v3_1_1::Vtr::internal::Refinement::refine(std::vector<unsigned int> *this, char a2)
{
  std::vector<unsigned int>::pointer end;
  uint64_t v5;
  unsigned int *value;
  int begin_high;
  int v8;
  uint8x8_t v9;
  uint8x8_t v10;
  char v11;
  char v12[4];

  end = this->__end_;
  if (!end || !this->__end_cap_.__value_)
    OpenSubdiv::v3_1_1::Vtr::internal::Refinement::refine();
  BYTE4(this[1].__end_) = (a2 & 1) == 0;
  BYTE5(this[1].__end_) = (a2 & 2) != 0;
  v5 = (*((_QWORD *)end + 58) - *((_QWORD *)end + 57)) >> 3;
  OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateParentToChildMapping((OpenSubdiv::v3_1_1::Vtr::internal::Refinement *)this);
  value = this->__end_cap_.__value_;
  begin_high = HIDWORD(this[2].__begin_);
  v8 = LODWORD(this[2].__begin_) + HIDWORD(this[1].__end_cap_.__value_);
  *value = this[1].__end_cap_.__value_;
  value[1] = v8;
  value[2] = LODWORD(this[2].__end_) + begin_high + HIDWORD(this[2].__end_);
  OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateChildToParentMapping(this, v9, v10);
  OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateFaceTagVectors((OpenSubdiv::v3_1_1::Vtr::internal::Refinement *)this);
  OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateEdgeTagVectors((OpenSubdiv::v3_1_1::Vtr::internal::Refinement *)this);
  OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateVertexTagVectors((OpenSubdiv::v3_1_1::Vtr::internal::Refinement *)this);
  if ((a2 & 4) != 0)
    v11 = 1;
  else
    v11 = -1;
  v12[0] = v11;
  if ((int)v5 < 1)
  {
    OpenSubdiv::v3_1_1::Vtr::internal::Refinement::subdivideTopology((uint64_t)this, v12);
    OpenSubdiv::v3_1_1::Vtr::internal::Refinement::subdivideEdgeSharpness((OpenSubdiv::v3_1_1::Vtr::internal::Refinement *)this);
    OpenSubdiv::v3_1_1::Vtr::internal::Refinement::subdivideVertexSharpness((OpenSubdiv::v3_1_1::Vtr::internal::Refinement *)this);
    OpenSubdiv::v3_1_1::Vtr::internal::Refinement::reclassifySemisharpVertices((uint64_t)this);
  }
  else
  {
    v12[0] = v11 | 0x10;
    OpenSubdiv::v3_1_1::Vtr::internal::Refinement::subdivideTopology((uint64_t)this, v12);
    OpenSubdiv::v3_1_1::Vtr::internal::Refinement::subdivideEdgeSharpness((OpenSubdiv::v3_1_1::Vtr::internal::Refinement *)this);
    OpenSubdiv::v3_1_1::Vtr::internal::Refinement::subdivideVertexSharpness((OpenSubdiv::v3_1_1::Vtr::internal::Refinement *)this);
    OpenSubdiv::v3_1_1::Vtr::internal::Refinement::reclassifySemisharpVertices((uint64_t)this);
    OpenSubdiv::v3_1_1::Vtr::internal::Refinement::subdivideFVarChannels((OpenSubdiv::v3_1_1::Vtr::internal::Refinement *)this);
  }
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateParentToChildMapping(OpenSubdiv::v3_1_1::Vtr::internal::Refinement *this)
{
  (*(void (**)(OpenSubdiv::v3_1_1::Vtr::internal::Refinement *))(*(_QWORD *)this + 16))(this);
  if (!*((_BYTE *)this + 36))
  {
    if (*((_QWORD *)this + 58) == *((_QWORD *)this + 57))
      OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateParentToChildMapping();
    OpenSubdiv::v3_1_1::Vtr::internal::Refinement::markSparseVertexChildren(this);
    OpenSubdiv::v3_1_1::Vtr::internal::Refinement::markSparseEdgeChildren(this);
    (*(void (**)(OpenSubdiv::v3_1_1::Vtr::internal::Refinement *))(*(_QWORD *)this + 24))(this);
  }
  return OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateParentChildIndices((uint64_t)this);
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateChildToParentMapping(std::vector<unsigned int> *this, uint8x8_t a2, uint8x8_t a3)
{
  int16x8_t v4;
  int16x8_t v5;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  a3.i32[0] = HIDWORD(v7[0]);
  a2.i32[0] = v7[0];
  v4 = (int16x8_t)vmovl_u8(a2);
  *(int8x8_t *)v4.i8 = vorr_s8((int8x8_t)(v4.i64[0] & 0xFFE0FFE0FFE0FFE0), (int8x8_t)0x18001000080000);
  v4.i32[0] = vmovn_s16(v4).u32[0];
  v5 = (int16x8_t)vmovl_u8(a3);
  *(int8x8_t *)v5.i8 = vorr_s8((int8x8_t)(v5.i64[0] & 0xFFE0FFE0FFE0FFE0), (int8x8_t)0x19001100090001);
  v4.i32[1] = vmovn_s16(v5).u32[0];
  v7[0] = v4.i64[0];
  OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateFaceParentVectors(this, v7);
  OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateEdgeParentVectors(this, v7);
  return OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateVertexParentVectors((uint64_t)this, v7);
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::Refinement::subdivideTopology(uint64_t result, char *a2)
{
  uint64_t v3;
  char v4;
  int v5;

  v3 = result;
  v4 = *a2;
  if ((*a2 & 1) != 0)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
    v4 = *a2;
    if ((*a2 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((*a2 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  v4 = *a2;
  if ((*a2 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3);
  v4 = *a2;
  if ((*a2 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 56))(v3);
  v4 = *a2;
  if ((*a2 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_18:
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 64))(v3);
  if ((*a2 & 0x20) != 0)
LABEL_7:
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
LABEL_8:
  if (*(_DWORD *)(v3 + 28))
    v5 = 6;
  else
    v5 = 4;
  if (*(_DWORD *)(*(_QWORD *)(v3 + 8) + 20) > v5)
    v5 = *(_DWORD *)(*(_QWORD *)(v3 + 8) + 20);
  *(_DWORD *)(*(_QWORD *)(v3 + 16) + 20) = v5;
  return result;
}

void OpenSubdiv::v3_1_1::Vtr::internal::Refinement::subdivideFVarChannels(OpenSubdiv::v3_1_1::Vtr::internal::Refinement *this)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel *v5;
  OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel *v6;
  _QWORD *v7;
  OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement *v8;
  _QWORD *v9;
  unint64_t v10;
  OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel **v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel **v19;
  char *v20;
  char *v21;
  OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;

  if (*(_QWORD *)(*((_QWORD *)this + 2) + 464) != *(_QWORD *)(*((_QWORD *)this + 2) + 456))
    OpenSubdiv::v3_1_1::Vtr::internal::Refinement::subdivideFVarChannels();
  if (*((_QWORD *)this + 61) != *((_QWORD *)this + 60))
    OpenSubdiv::v3_1_1::Vtr::internal::Refinement::subdivideFVarChannels();
  v2 = *(_QWORD *)(*((_QWORD *)this + 1) + 464) - *(_QWORD *)(*((_QWORD *)this + 1) + 456);
  if ((int)(v2 >> 3) >= 1)
  {
    v3 = 0;
    v4 = (v2 >> 3);
    do
    {
      v5 = *(OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel **)(*(_QWORD *)(*((_QWORD *)this + 1) + 456) + 8 * v3);
      v6 = (OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel *)operator new();
      OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::FVarLevel((uint64_t)v6, *((_QWORD *)this + 2));
      v7 = (_QWORD *)operator new();
      v8 = (OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement *)OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement::FVarRefinement(v7, this, v5, v6);
      OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement::applyRefinement(v8);
      v9 = (_QWORD *)*((_QWORD *)this + 2);
      v11 = (OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel **)v9[58];
      v10 = v9[59];
      if ((unint64_t)v11 >= v10)
      {
        v13 = v9[57];
        v14 = ((uint64_t)v11 - v13) >> 3;
        if ((unint64_t)(v14 + 1) >> 61)
          goto LABEL_41;
        v15 = v10 - v13;
        v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1))
          v16 = v14 + 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        if (v17)
          v18 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Statement *>>((uint64_t)(v9 + 59), v17);
        else
          v18 = 0;
        v19 = (OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel **)&v18[8 * v14];
        *v19 = v6;
        v12 = v19 + 1;
        v21 = (char *)v9[57];
        v20 = (char *)v9[58];
        if (v20 != v21)
        {
          do
          {
            v22 = (OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel *)*((_QWORD *)v20 - 1);
            v20 -= 8;
            *--v19 = v22;
          }
          while (v20 != v21);
          v20 = (char *)v9[57];
        }
        v9[57] = v19;
        v9[58] = v12;
        v9[59] = &v18[8 * v17];
        if (v20)
          operator delete(v20);
      }
      else
      {
        *v11 = v6;
        v12 = v11 + 1;
      }
      v9[58] = v12;
      v24 = (_QWORD *)*((_QWORD *)this + 61);
      v23 = *((_QWORD *)this + 62);
      if ((unint64_t)v24 >= v23)
      {
        v26 = *((_QWORD *)this + 60);
        v27 = ((uint64_t)v24 - v26) >> 3;
        if ((unint64_t)(v27 + 1) >> 61)
LABEL_41:
          abort();
        v28 = v23 - v26;
        v29 = v28 >> 2;
        if (v28 >> 2 <= (unint64_t)(v27 + 1))
          v29 = v27 + 1;
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
          v30 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v30 = v29;
        if (v30)
          v31 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Statement *>>((uint64_t)this + 496, v30);
        else
          v31 = 0;
        v32 = &v31[8 * v27];
        *(_QWORD *)v32 = v7;
        v25 = v32 + 8;
        v34 = (char *)*((_QWORD *)this + 60);
        v33 = (char *)*((_QWORD *)this + 61);
        if (v33 != v34)
        {
          do
          {
            v35 = *((_QWORD *)v33 - 1);
            v33 -= 8;
            *((_QWORD *)v32 - 1) = v35;
            v32 -= 8;
          }
          while (v33 != v34);
          v33 = (char *)*((_QWORD *)this + 60);
        }
        *((_QWORD *)this + 60) = v32;
        *((_QWORD *)this + 61) = v25;
        *((_QWORD *)this + 62) = &v31[8 * v30];
        if (v33)
          operator delete(v33);
      }
      else
      {
        *v24 = v7;
        v25 = v24 + 1;
      }
      *((_QWORD *)this + 61) = v25;
      ++v3;
    }
    while (v3 != v4);
  }
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateParentChildIndices(uint64_t this)
{
  int v1;
  int *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  _DWORD *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  _DWORD *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int *v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  int *v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  int v50;
  int *v51;
  unint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  int v56;
  int *v57;
  unint64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  _DWORD *v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  int v68;
  _DWORD *v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  int v73;
  int *v74;
  unint64_t v75;
  int v76;
  uint64_t v77;
  int v78;
  int v79;
  int v80;
  int *v81;
  unint64_t v82;
  int v83;
  uint64_t v84;
  int v85;
  int v86;
  int v87;
  int *v88;
  unint64_t v89;
  int v90;
  uint64_t v91;
  int v92;
  int v93;
  int v94;
  int *v95;
  unint64_t v96;
  int v97;
  uint64_t v98;
  int v99;
  int v100;

  v1 = *(unsigned __int8 *)(this + 36);
  *(_DWORD *)(this + 64) = 0;
  v2 = *(int **)(this + 120);
  v3 = *(_QWORD *)(this + 128) - (_QWORD)v2;
  v4 = v3 >> 2;
  if (v1)
  {
    if ((int)v4 >= 1)
    {
      v5 = 0;
      do
      {
        v2[v5] = v5;
        ++v5;
      }
      while ((v3 >> 2) != v5);
    }
    *(_DWORD *)(this + 40) = v4;
    *(_DWORD *)(this + 68) = 0;
    v6 = *(_QWORD *)(this + 144);
    v7 = *(_QWORD *)(this + 152) - v6;
    v8 = v7 >> 2;
    if ((int)(v7 >> 2) >= 1)
    {
      v9 = 0;
      v10 = (v7 >> 2);
      do
      {
        *(_DWORD *)(v6 + 4 * v9) = v9;
        ++v9;
      }
      while (v10 != v9);
    }
    *(_DWORD *)(this + 44) = v8;
    *(_DWORD *)(this + 72) = v8;
    v11 = *(_DWORD **)(this + 192);
    v12 = *(_QWORD *)(this + 200) - (_QWORD)v11;
    v13 = v12 >> 2;
    if ((int)(v12 >> 2) >= 1)
    {
      v14 = (v12 >> 2);
      do
      {
        *v11++ = v8;
        LODWORD(v8) = v8 + 1;
        --v14;
      }
      while (v14);
    }
    *(_DWORD *)(this + 48) = v13;
    if (*(_BYTE *)(this + 37))
    {
      *(_DWORD *)(this + 76) = 0;
      v15 = *(_QWORD *)(this + 168);
      v16 = *(_QWORD *)(this + 176) - v15;
      v17 = v16 >> 2;
      if ((int)(v16 >> 2) < 1)
      {
        v20 = 0;
      }
      else
      {
        v18 = 0;
        v19 = (v16 >> 2);
        do
        {
          *(_DWORD *)(v15 + 4 * v18) = v18;
          ++v18;
        }
        while (v19 != v18);
        v20 = *(_DWORD *)(this + 76);
      }
      *(_DWORD *)(this + 52) = v17;
      v30 = v20 + v17;
      *(_DWORD *)(this + 80) = v30;
      v31 = *(_DWORD **)(this + 216);
      v32 = *(_QWORD *)(this + 224) - (_QWORD)v31;
      v33 = v32 >> 2;
      if ((int)(v32 >> 2) >= 1)
      {
        v34 = (v32 >> 2);
        do
        {
          *v31++ = v30++;
          --v34;
        }
        while (v34);
        v30 = *(_DWORD *)(this + 80);
      }
      *(_DWORD *)(this + 56) = v33;
      v35 = v30 + v33;
      *(_DWORD *)(this + 84) = v30 + v33;
      v36 = *(_DWORD **)(this + 240);
      v37 = *(_QWORD *)(this + 248) - (_QWORD)v36;
      v38 = v37 >> 2;
      if ((int)(v37 >> 2) >= 1)
      {
        v39 = (v37 >> 2);
        do
        {
          *v36++ = v35++;
          --v39;
        }
        while (v39);
      }
      *(_DWORD *)(this + 60) = v38;
    }
    else
    {
      *(_DWORD *)(this + 84) = 0;
      v24 = *(_QWORD *)(this + 240);
      v25 = *(_QWORD *)(this + 248) - v24;
      v26 = v25 >> 2;
      if ((int)(v25 >> 2) < 1)
      {
        v29 = 0;
      }
      else
      {
        v27 = 0;
        v28 = (v25 >> 2);
        do
        {
          *(_DWORD *)(v24 + 4 * v27) = v27;
          ++v27;
        }
        while (v28 != v27);
        v29 = *(_DWORD *)(this + 84);
      }
      *(_DWORD *)(this + 60) = v26;
      v63 = v29 + v26;
      *(_DWORD *)(this + 76) = v63;
      v64 = *(_DWORD **)(this + 168);
      v65 = *(_QWORD *)(this + 176) - (_QWORD)v64;
      v66 = v65 >> 2;
      if ((int)(v65 >> 2) >= 1)
      {
        v67 = (v65 >> 2);
        do
        {
          *v64++ = v63++;
          --v67;
        }
        while (v67);
        v63 = *(_DWORD *)(this + 76);
      }
      *(_DWORD *)(this + 52) = v66;
      v68 = v63 + v66;
      *(_DWORD *)(this + 80) = v63 + v66;
      v69 = *(_DWORD **)(this + 216);
      v70 = *(_QWORD *)(this + 224) - (_QWORD)v69;
      v71 = v70 >> 2;
      if ((int)(v70 >> 2) >= 1)
      {
        v72 = (v70 >> 2);
        do
        {
          *v69++ = v68++;
          --v72;
        }
        while (v72);
      }
      *(_DWORD *)(this + 56) = v71;
    }
  }
  else
  {
    if ((int)v4 < 1)
    {
      v23 = 0;
    }
    else
    {
      v21 = 0;
      v22 = (v3 >> 2);
      do
      {
        if (*v2)
          v23 = v21 + 1;
        else
          v23 = v21;
        if (!*v2)
          v21 = -1;
        *v2++ = v21;
        v21 = v23;
        --v22;
      }
      while (v22);
    }
    *(_DWORD *)(this + 40) = v23;
    *(_DWORD *)(this + 68) = 0;
    v40 = *(int **)(this + 144);
    v41 = *(_QWORD *)(this + 152) - (_QWORD)v40;
    if ((int)(v41 >> 2) < 1)
    {
      v44 = 0;
    }
    else
    {
      v42 = 0;
      v43 = (v41 >> 2);
      do
      {
        if (*v40)
          v44 = v42 + 1;
        else
          v44 = v42;
        if (!*v40)
          v42 = -1;
        *v40++ = v42;
        v42 = v44;
        --v43;
      }
      while (v43);
    }
    *(_DWORD *)(this + 44) = v44;
    *(_DWORD *)(this + 72) = v44;
    v45 = *(int **)(this + 192);
    v46 = *(_QWORD *)(this + 200) - (_QWORD)v45;
    if ((int)(v46 >> 2) < 1)
    {
      v47 = 0;
    }
    else
    {
      v47 = 0;
      v48 = (v46 >> 2);
      do
      {
        v49 = v47 + v44;
        if (*v45)
        {
          ++v47;
          v50 = v49;
        }
        else
        {
          v50 = -1;
        }
        *v45++ = v50;
        --v48;
      }
      while (v48);
    }
    *(_DWORD *)(this + 48) = v47;
    if (*(_BYTE *)(this + 37))
    {
      *(_DWORD *)(this + 76) = 0;
      v51 = *(int **)(this + 168);
      v52 = *(_QWORD *)(this + 176) - (_QWORD)v51;
      if ((int)(v52 >> 2) < 1)
      {
        v56 = 0;
        v53 = 0;
      }
      else
      {
        v53 = 0;
        v54 = (v52 >> 2);
        do
        {
          if (*v51)
            v55 = v53;
          else
            v55 = -1;
          if (*v51)
            ++v53;
          *v51++ = v55;
          --v54;
        }
        while (v54);
        v56 = *(_DWORD *)(this + 76);
      }
      *(_DWORD *)(this + 52) = v53;
      v73 = v56 + v53;
      *(_DWORD *)(this + 80) = v73;
      v74 = *(int **)(this + 216);
      v75 = *(_QWORD *)(this + 224) - (_QWORD)v74;
      if ((int)(v75 >> 2) < 1)
      {
        v76 = 0;
      }
      else
      {
        v76 = 0;
        v77 = (v75 >> 2);
        do
        {
          v78 = v76 + v73;
          if (*v74)
          {
            ++v76;
            v79 = v78;
          }
          else
          {
            v79 = -1;
          }
          *v74++ = v79;
          --v77;
        }
        while (v77);
        v73 = *(_DWORD *)(this + 80);
      }
      *(_DWORD *)(this + 56) = v76;
      v80 = v73 + v76;
      *(_DWORD *)(this + 84) = v80;
      v81 = *(int **)(this + 240);
      v82 = *(_QWORD *)(this + 248) - (_QWORD)v81;
      if ((int)(v82 >> 2) < 1)
      {
        v83 = 0;
      }
      else
      {
        v83 = 0;
        v84 = (v82 >> 2);
        do
        {
          v85 = v83 + v80;
          if (*v81)
          {
            ++v83;
            v86 = v85;
          }
          else
          {
            v86 = -1;
          }
          *v81++ = v86;
          --v84;
        }
        while (v84);
      }
      *(_DWORD *)(this + 60) = v83;
    }
    else
    {
      *(_DWORD *)(this + 84) = 0;
      v57 = *(int **)(this + 240);
      v58 = *(_QWORD *)(this + 248) - (_QWORD)v57;
      if ((int)(v58 >> 2) < 1)
      {
        v62 = 0;
        v59 = 0;
      }
      else
      {
        v59 = 0;
        v60 = (v58 >> 2);
        do
        {
          if (*v57)
            v61 = v59;
          else
            v61 = -1;
          if (*v57)
            ++v59;
          *v57++ = v61;
          --v60;
        }
        while (v60);
        v62 = *(_DWORD *)(this + 84);
      }
      *(_DWORD *)(this + 60) = v59;
      v87 = v62 + v59;
      *(_DWORD *)(this + 76) = v87;
      v88 = *(int **)(this + 168);
      v89 = *(_QWORD *)(this + 176) - (_QWORD)v88;
      if ((int)(v89 >> 2) < 1)
      {
        v90 = 0;
      }
      else
      {
        v90 = 0;
        v91 = (v89 >> 2);
        do
        {
          v92 = v90 + v87;
          if (*v88)
          {
            ++v90;
            v93 = v92;
          }
          else
          {
            v93 = -1;
          }
          *v88++ = v93;
          --v91;
        }
        while (v91);
        v87 = *(_DWORD *)(this + 76);
      }
      *(_DWORD *)(this + 52) = v90;
      v94 = v87 + v90;
      *(_DWORD *)(this + 80) = v94;
      v95 = *(int **)(this + 216);
      v96 = *(_QWORD *)(this + 224) - (_QWORD)v95;
      if ((int)(v96 >> 2) < 1)
      {
        v97 = 0;
      }
      else
      {
        v97 = 0;
        v98 = (v96 >> 2);
        do
        {
          v99 = v97 + v94;
          if (*v95)
          {
            ++v97;
            v100 = v99;
          }
          else
          {
            v100 = -1;
          }
          *v95++ = v100;
          --v98;
        }
        while (v98);
      }
      *(_DWORD *)(this + 56) = v97;
    }
  }
  return this;
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateFaceParentVectors(std::vector<unsigned int> *a1, _BYTE *a2)
{
  std::vector<unsigned int>::size_type v4;
  std::vector<unsigned int>::pointer begin;
  char *v6;
  BOOL v7;
  unint64_t v8;

  v4 = *(int *)a1->__end_cap_.__value_;
  begin = a1[14].__begin_;
  v6 = (char *)((char *)a1[14].__end_ - (char *)begin);
  v7 = v4 >= (unint64_t)v6;
  v8 = v4 - (_QWORD)v6;
  if (v8 != 0 && v7)
  {
    std::vector<OpenSubdiv::v3_1_1::Vtr::internal::Level::FTag>::__append((void **)&a1[14].__begin_, v8);
    v4 = *(int *)a1->__end_cap_.__value_;
  }
  else if (!v7)
  {
    a1[14].__end_ = (std::vector<unsigned int>::pointer)((char *)begin + v4);
  }
  std::vector<int>::resize(a1 + 11, v4);
  return OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateFaceParentFromParentFaces((uint64_t)a1, a2);
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateEdgeParentVectors(std::vector<unsigned int> *a1, _BYTE *a2)
{
  std::vector<unsigned int>::size_type v4;
  std::vector<unsigned int>::pointer begin;
  char *v6;
  BOOL v7;
  unint64_t v8;

  v4 = *((int *)a1->__end_cap_.__value_ + 1);
  begin = a1[15].__begin_;
  v6 = (char *)((char *)a1[15].__end_ - (char *)begin);
  v7 = v4 >= (unint64_t)v6;
  v8 = v4 - (_QWORD)v6;
  if (v8 != 0 && v7)
  {
    std::vector<OpenSubdiv::v3_1_1::Vtr::internal::Level::FTag>::__append((void **)&a1[15].__begin_, v8);
    v4 = *((int *)a1->__end_cap_.__value_ + 1);
  }
  else if (!v7)
  {
    a1[15].__end_ = (std::vector<unsigned int>::pointer)((char *)begin + v4);
  }
  std::vector<int>::resize(a1 + 12, v4);
  OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateEdgeParentFromParentFaces((uint64_t)a1, a2);
  return OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateEdgeParentFromParentEdges((uint64_t)a1, a2);
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateVertexParentVectors(uint64_t a1, _BYTE *a2)
{
  int v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _BYTE *v9;

  v4 = *(unsigned __int8 *)(a1 + 36);
  v5 = (_QWORD *)(a1 + 384);
  v6 = *(int *)(*(_QWORD *)(a1 + 16) + 8);
  v7 = *(_QWORD *)(a1 + 384);
  v8 = *(_QWORD *)(a1 + 392) - v7;
  if (v4)
  {
    if (v6 > v8)
    {
      v9 = a2;
LABEL_6:
      std::vector<OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::ETag>::__append(v5, v6 - v8, v9);
      goto LABEL_9;
    }
  }
  else if (v6 > v8)
  {
    v9 = a2 + 4;
    goto LABEL_6;
  }
  if (v6 < v8)
    *(_QWORD *)(a1 + 392) = v7 + v6;
LABEL_9:
  std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 312), *(int *)(*(_QWORD *)(a1 + 16) + 8));
  OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateVertexParentFromParentFaces(a1, a2);
  OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateVertexParentFromParentEdges(a1, a2);
  return OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateVertexParentFromParentVertices(a1, a2);
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateFaceParentFromParentFaces(uint64_t result, _BYTE *a2)
{
  int v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  uint64_t v21;

  v2 = **(_DWORD **)(result + 8);
  if (*(_BYTE *)(result + 36))
  {
    if (v2 >= 1)
    {
      v3 = 0;
      v4 = *(_DWORD *)(result + 64);
      do
      {
        v5 = *(_DWORD *)(*(_QWORD *)(result + 88) + 8 * v3);
        if (v5 == 4)
        {
          *(_BYTE *)(*(_QWORD *)(result + 336) + v4) = *a2;
          v6 = v4 + 1;
          *(_BYTE *)(*(_QWORD *)(result + 336) + v6) = a2[1];
          v7 = v4 + 2;
          *(_BYTE *)(*(_QWORD *)(result + 336) + v7) = a2[2];
          v8 = v4 + 3;
          *(_BYTE *)(*(_QWORD *)(result + 336) + v8) = a2[3];
          v9 = *(_QWORD *)(result + 264);
          *(_DWORD *)(v9 + 4 * v4) = v3;
          *(_DWORD *)(v9 + 4 * v6) = v3;
          *(_DWORD *)(v9 + 4 * v7) = v3;
          *(_DWORD *)(v9 + 4 * v8) = v3;
          v4 += 4;
        }
        else if (v5 >= 1)
        {
          v10 = 0;
          v11 = v4;
          do
          {
            if (v5 <= 4)
              v12 = v10;
            else
              v12 = 0;
            *(_BYTE *)(*(_QWORD *)(result + 336) + v11) = a2[v12];
            *(_DWORD *)(*(_QWORD *)(result + 264) + 4 * v11) = v3;
            ++v10;
            ++v11;
          }
          while (v5 != v10);
          v4 += v10;
        }
        ++v3;
      }
      while (v3 < **(int **)(result + 8));
    }
  }
  else if (v2 >= 1)
  {
    v13 = 0;
    do
    {
      v14 = (unsigned int *)(*(_QWORD *)(result + 88) + 8 * v13);
      v15 = *v14;
      v16 = (int *)(*(_QWORD *)(result + 120) + 4 * (int)v14[1]);
      if ((*(_BYTE *)(*(_QWORD *)(result + 408) + v13) & 1) != 0 && (_DWORD)v15 == 4)
      {
        *(_BYTE *)(*(_QWORD *)(result + 336) + *v16) = *a2;
        *(_BYTE *)(*(_QWORD *)(result + 336) + v16[1]) = a2[1];
        *(_BYTE *)(*(_QWORD *)(result + 336) + v16[2]) = a2[2];
        *(_BYTE *)(*(_QWORD *)(result + 336) + v16[3]) = a2[3];
        v17 = *(_QWORD *)(result + 264);
        *(_DWORD *)(v17 + 4 * *v16) = v13;
        *(_DWORD *)(v17 + 4 * v16[1]) = v13;
        *(_DWORD *)(v17 + 4 * v16[2]) = v13;
        *(_DWORD *)(v17 + 4 * v16[3]) = v13;
      }
      else if ((int)v15 >= 1)
      {
        v18 = 0;
        v19 = (*(_BYTE *)(*(_QWORD *)(result + 408) + v13) & 1) == 0;
        do
        {
          v20 = v16[v18];
          if ((_DWORD)v20 != -1)
          {
            if ((int)v15 <= 4)
              v21 = v18;
            else
              v21 = 0;
            *(_BYTE *)(*(_QWORD *)(result + 336) + v20) = a2[4 * v19 + v21];
            *(_DWORD *)(*(_QWORD *)(result + 264) + 4 * v16[v18]) = v13;
          }
          ++v18;
        }
        while (v15 != v18);
      }
      ++v13;
    }
    while (v13 < **(int **)(result + 8));
  }
  return result;
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateEdgeParentFromParentFaces(uint64_t result, _BYTE *a2)
{
  int v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  uint64_t v21;

  v2 = **(_DWORD **)(result + 8);
  if (*(_BYTE *)(result + 36))
  {
    if (v2 >= 1)
    {
      v3 = 0;
      v4 = *(_DWORD *)(result + 68);
      do
      {
        v5 = *(_DWORD *)(*(_QWORD *)(result + 104) + 8 * v3);
        if (v5 == 4)
        {
          *(_BYTE *)(*(_QWORD *)(result + 360) + v4) = *a2;
          v6 = v4 + 1;
          *(_BYTE *)(*(_QWORD *)(result + 360) + v6) = a2[1];
          v7 = v4 + 2;
          *(_BYTE *)(*(_QWORD *)(result + 360) + v7) = a2[2];
          v8 = v4 + 3;
          *(_BYTE *)(*(_QWORD *)(result + 360) + v8) = a2[3];
          v9 = *(_QWORD *)(result + 288);
          *(_DWORD *)(v9 + 4 * v4) = v3;
          *(_DWORD *)(v9 + 4 * v6) = v3;
          *(_DWORD *)(v9 + 4 * v7) = v3;
          *(_DWORD *)(v9 + 4 * v8) = v3;
          v4 += 4;
        }
        else if (v5 >= 1)
        {
          v10 = 0;
          v11 = v4;
          do
          {
            if (v5 <= 4)
              v12 = v10;
            else
              v12 = 0;
            *(_BYTE *)(*(_QWORD *)(result + 360) + v11) = a2[v12];
            *(_DWORD *)(*(_QWORD *)(result + 288) + 4 * v11) = v3;
            ++v10;
            ++v11;
          }
          while (v5 != v10);
          v4 += v10;
        }
        ++v3;
      }
      while (v3 < **(int **)(result + 8));
    }
  }
  else if (v2 >= 1)
  {
    v13 = 0;
    do
    {
      v14 = (unsigned int *)(*(_QWORD *)(result + 104) + 8 * v13);
      v15 = *v14;
      v16 = (int *)(*(_QWORD *)(result + 144) + 4 * (int)v14[1]);
      if ((*(_BYTE *)(*(_QWORD *)(result + 408) + v13) & 1) != 0 && (_DWORD)v15 == 4)
      {
        *(_BYTE *)(*(_QWORD *)(result + 360) + *v16) = *a2;
        *(_BYTE *)(*(_QWORD *)(result + 360) + v16[1]) = a2[1];
        *(_BYTE *)(*(_QWORD *)(result + 360) + v16[2]) = a2[2];
        *(_BYTE *)(*(_QWORD *)(result + 360) + v16[3]) = a2[3];
        v17 = *(_QWORD *)(result + 288);
        *(_DWORD *)(v17 + 4 * *v16) = v13;
        *(_DWORD *)(v17 + 4 * v16[1]) = v13;
        *(_DWORD *)(v17 + 4 * v16[2]) = v13;
        *(_DWORD *)(v17 + 4 * v16[3]) = v13;
      }
      else if ((int)v15 >= 1)
      {
        v18 = 0;
        v19 = (*(_BYTE *)(*(_QWORD *)(result + 408) + v13) & 1) == 0;
        do
        {
          v20 = v16[v18];
          if ((_DWORD)v20 != -1)
          {
            if ((int)v15 <= 4)
              v21 = v18;
            else
              v21 = 0;
            *(_BYTE *)(*(_QWORD *)(result + 360) + v20) = a2[4 * v19 + v21];
            *(_DWORD *)(*(_QWORD *)(result + 288) + 4 * v16[v18]) = v13;
          }
          ++v18;
        }
        while (v15 != v18);
      }
      ++v13;
    }
    while (v13 < **(int **)(result + 8));
  }
  return result;
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateEdgeParentFromParentEdges(uint64_t result, _BYTE *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *(_DWORD *)(*(_QWORD *)(result + 8) + 4);
  if (*(_BYTE *)(result + 36))
  {
    if (v2 >= 1)
    {
      v3 = 0;
      v4 = *(int *)(result + 72);
      do
      {
        *(_BYTE *)(*(_QWORD *)(result + 360) + v4) = *a2;
        *(_BYTE *)(*(_QWORD *)(result + 360) + v4 + 1) = a2[1];
        v5 = (_DWORD *)(*(_QWORD *)(result + 288) + 4 * v4);
        *v5 = v3;
        v5[1] = v3++;
        v4 += 2;
      }
      while (v3 < *(_DWORD *)(*(_QWORD *)(result + 8) + 4));
    }
  }
  else if (v2 >= 1)
  {
    v6 = 0;
    do
    {
      v7 = (int *)(*(_QWORD *)(result + 192) + 8 * v6);
      if ((*(_BYTE *)(*(_QWORD *)(result + 432) + v6) & 1) != 0)
      {
        *(_BYTE *)(*(_QWORD *)(result + 360) + *v7) = *a2;
        *(_BYTE *)(*(_QWORD *)(result + 360) + v7[1]) = a2[1];
        v12 = *(_QWORD *)(result + 288);
        *(_DWORD *)(v12 + 4 * *v7) = v6;
        *(_DWORD *)(v12 + 4 * v7[1]) = v6;
      }
      else
      {
        v8 = 0;
        v9 = 1;
        do
        {
          v10 = v9;
          v11 = v7[v8];
          if ((_DWORD)v11 != -1)
          {
            *(_BYTE *)(*(_QWORD *)(result + 360) + v11) = a2[v8 + 4];
            *(_DWORD *)(*(_QWORD *)(result + 288) + 4 * v7[v8]) = v6;
          }
          v9 = 0;
          v8 = 1;
        }
        while ((v10 & 1) != 0);
      }
      ++v6;
    }
    while (v6 < *(int *)(*(_QWORD *)(result + 8) + 4));
  }
  return result;
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateVertexParentFromParentFaces(uint64_t result, _BYTE *a2)
{
  int *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;

  if (*(_DWORD *)(result + 52))
  {
    v2 = *(int **)(result + 8);
    v3 = *v2;
    if (*(_BYTE *)(result + 36))
    {
      if (v3 >= 1)
      {
        v4 = 0;
        v5 = *(_QWORD *)(result + 312) + 4 * *(int *)(result + 76);
        do
        {
          *(_DWORD *)(v5 + 4 * v4) = v4;
          ++v4;
        }
        while ((int)v4 < *v2);
      }
    }
    else if (v3 >= 1)
    {
      for (i = 0; i < v3; ++i)
      {
        v7 = *(int *)(*(_QWORD *)(result + 168) + 4 * i);
        if ((_DWORD)v7 != -1)
        {
          if ((*(_BYTE *)(*(_QWORD *)(result + 408) + i) & 1) != 0)
          {
            *(_BYTE *)(*(_QWORD *)(result + 384) + v7) = *a2;
            v2 = *(int **)(result + 8);
          }
          *(_DWORD *)(*(_QWORD *)(result + 312) + 4 * v7) = i;
          v3 = *v2;
        }
      }
    }
  }
  return result;
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateVertexParentFromParentEdges(uint64_t result, _BYTE *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(result + 8);
  v3 = *(_DWORD *)(v2 + 4);
  if (*(_BYTE *)(result + 36))
  {
    if (v3 >= 1)
    {
      v4 = 0;
      v5 = *(_QWORD *)(result + 312) + 4 * *(int *)(result + 80);
      do
      {
        *(_DWORD *)(v5 + 4 * v4) = v4;
        ++v4;
      }
      while ((int)v4 < *(_DWORD *)(v2 + 4));
    }
  }
  else if (v3 >= 1)
  {
    v6 = 0;
    do
    {
      v7 = *(int *)(*(_QWORD *)(result + 216) + 4 * v6);
      if ((_DWORD)v7 != -1)
      {
        if ((*(_BYTE *)(*(_QWORD *)(result + 432) + v6) & 1) != 0)
        {
          *(_BYTE *)(*(_QWORD *)(result + 384) + v7) = *a2;
          v2 = *(_QWORD *)(result + 8);
        }
        *(_DWORD *)(*(_QWORD *)(result + 312) + 4 * v7) = v6;
      }
      ++v6;
    }
    while (v6 < *(int *)(v2 + 4));
  }
  return result;
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateVertexParentFromParentVertices(uint64_t result, _BYTE *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(result + 8);
  v3 = *(_DWORD *)(v2 + 8);
  if (*(_BYTE *)(result + 36))
  {
    if (v3 >= 1)
    {
      v4 = 0;
      v5 = *(_QWORD *)(result + 312) + 4 * *(int *)(result + 84);
      do
      {
        *(_DWORD *)(v5 + 4 * v4) = v4;
        ++v4;
      }
      while ((int)v4 < *(_DWORD *)(v2 + 8));
    }
  }
  else if (v3 >= 1)
  {
    v6 = 0;
    do
    {
      v7 = *(int *)(*(_QWORD *)(result + 240) + 4 * v6);
      if ((_DWORD)v7 != -1)
      {
        if ((*(_BYTE *)(*(_QWORD *)(result + 456) + v6) & 1) != 0)
        {
          *(_BYTE *)(*(_QWORD *)(result + 384) + v7) = *a2;
          v2 = *(_QWORD *)(result + 8);
        }
        *(_DWORD *)(*(_QWORD *)(result + 312) + 4 * v7) = v6;
      }
      ++v6;
    }
    while (v6 < *(int *)(v2 + 8));
  }
  return result;
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateFaceTagVectors(OpenSubdiv::v3_1_1::Vtr::internal::Refinement *this)
{
  int *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v2 = (int *)*((_QWORD *)this + 2);
  v3 = *((_QWORD *)v2 + 12);
  v4 = *v2;
  v5 = *((_QWORD *)v2 + 13) - v3;
  if (v4 <= v5)
  {
    if (v4 < v5)
      *((_QWORD *)v2 + 13) = v3 + v4;
  }
  else
  {
    std::vector<OpenSubdiv::v3_1_1::Vtr::internal::Level::FTag>::__append((void **)v2 + 12, v4 - v5);
  }
  return OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateFaceTagsFromParentFaces((uint64_t)this);
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateEdgeTagVectors(OpenSubdiv::v3_1_1::Vtr::internal::Refinement *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *((_QWORD *)this + 2);
  v3 = *(_QWORD *)(v2 + 240);
  v4 = *(int *)(v2 + 4);
  v5 = *(_QWORD *)(v2 + 248) - v3;
  if (v4 <= v5)
  {
    if (v4 < v5)
      *(_QWORD *)(v2 + 248) = v3 + v4;
  }
  else
  {
    std::vector<OpenSubdiv::v3_1_1::Vtr::internal::Level::FTag>::__append((void **)(v2 + 240), v4 - v5);
  }
  v6 = *((int *)this + 11);
  if ((int)v6 >= 1)
  {
    v7 = *((int *)this + 17);
    v8 = v7 + v6;
    do
      *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 2) + 240) + v7++) = 0;
    while (v7 < v8);
  }
  return OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateEdgeTagsFromParentEdges((uint64_t)this);
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateVertexTagVectors(OpenSubdiv::v3_1_1::Vtr::internal::Refinement *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  std::vector<OpenSubdiv::v3_1_1::Vtr::internal::Level::VTag>::resize(*((_QWORD *)this + 2) + 432, *(int *)(*((_QWORD *)this + 2) + 8));
  OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateVertexTagsFromParentFaces((uint64_t)this);
  OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateVertexTagsFromParentEdges(this);
  result = OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateVertexTagsFromParentVertices((uint64_t)this);
  if (!*((_BYTE *)this + 36))
  {
    v3 = *((_QWORD *)this + 2);
    if (*(int *)(v3 + 8) >= 1)
    {
      v4 = 0;
      do
      {
        if ((*(_BYTE *)(*((_QWORD *)this + 48) + v4) & 1) != 0)
        {
          *(_WORD *)(*(_QWORD *)(v3 + 432) + 2 * v4) |= 0x800u;
          v3 = *((_QWORD *)this + 2);
        }
        ++v4;
      }
      while (v4 < *(int *)(v3 + 8));
    }
  }
  return result;
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateFaceTagsFromParentFaces(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(int *)(this + 40);
  if ((int)v1 >= 1)
  {
    v2 = *(int *)(this + 64);
    v3 = v1 + v2;
    do
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(this + 16) + 96) + v2) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(this + 8) + 96)
                                                                             + *(int *)(*(_QWORD *)(this + 264) + 4 * v2));
      ++v2;
    }
    while (v2 < v3);
  }
  return this;
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateEdgeTagsFromParentEdges(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(int *)(this + 48);
  if ((int)v1 >= 1)
  {
    v2 = *(int *)(this + 72);
    v3 = v1 + v2;
    do
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(this + 16) + 240) + v2) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(this + 8) + 240)
                                                                              + *(int *)(*(_QWORD *)(this + 288) + 4 * v2));
      ++v2;
    }
    while (v2 < v3);
  }
  return this;
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateVertexTagsFromParentFaces(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(int *)(this + 52);
  if ((_DWORD)v1)
  {
    v2 = *(int *)(this + 76);
    v3 = v2 + v1;
    if (*(int *)(*(_QWORD *)(this + 8) + 12) <= 0)
    {
      if ((int)v1 >= 1)
      {
        do
        {
          *(_WORD *)(*(_QWORD *)(*(_QWORD *)(this + 16) + 432) + 2 * v2) = 128;
          if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(this + 8) + 24) + 8 * *(int *)(*(_QWORD *)(this + 312) + 4 * v2)) != *(_DWORD *)(this + 32))
            *(_WORD *)(*(_QWORD *)(*(_QWORD *)(this + 16) + 432) + 2 * v2) |= 2u;
          ++v2;
        }
        while (v2 < v3);
      }
    }
    else if ((int)v1 >= 1)
    {
      do
        *(_WORD *)(*(_QWORD *)(*(_QWORD *)(this + 16) + 432) + 2 * v2++) = 128;
      while (v2 < (int)v3);
    }
  }
  return this;
}

_QWORD *OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateVertexTagsFromParentEdges(_QWORD *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;

  v1 = this[1];
  if (*(int *)(v1 + 4) >= 1)
  {
    v2 = 0;
    v3 = 0;
    do
    {
      v4 = *(int *)(this[27] + 4 * v2);
      if ((_DWORD)v4 != -1)
      {
        v5 = *(unsigned __int8 *)(*(_QWORD *)(v1 + 240) + v2);
        v6 = v3 & 0xFFFF883A | v5 & 1 | (4 * ((v5 >> 1) & 1)) & 0xFFFFFFBF | (((v5 >> 3) & 1) << 6);
        v7 = v5 >> 2;
        v8 = (~v5 & 5) == 0;
        if ((v5 & 0xC) != 0)
          v9 = 512;
        else
          v9 = 128;
        v3 = v6 & 0xFFFFCFFF | (v8 << 14) | ((v7 & 1) << 12) & 0xDFFF | ((v7 & 1) << 13) | v9;
        *(_WORD *)(*(_QWORD *)(this[2] + 432) + 2 * v4) = v3;
        v1 = this[1];
      }
      ++v2;
    }
    while (v2 < *(int *)(v1 + 4));
  }
  return this;
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateVertexTagsFromParentVertices(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(int *)(this + 60);
  if ((int)v1 >= 1)
  {
    v2 = *(int *)(this + 84);
    v3 = v1 + v2;
    do
    {
      *(_WORD *)(*(_QWORD *)(*(_QWORD *)(this + 16) + 432) + 2 * v2) = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(this + 8)
                                                                                              + 432)
                                                                                  + 2
                                                                                  * *(int *)(*(_QWORD *)(this + 312)
                                                                                           + 4 * v2));
      ++v2;
    }
    while (v2 < v3);
  }
  return this;
}

void OpenSubdiv::v3_1_1::Vtr::internal::Refinement::subdivideEdgeSharpness(OpenSubdiv::v3_1_1::Vtr::internal::Refinement *this)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  float *v20;
  int *v21;
  uint64_t v22;
  float *v23;
  uint64_t v24;
  float v25;
  int v26;
  float *v27;
  uint64_t v28;
  uint64_t v29;
  void *__p;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v26 = *((_DWORD *)this + 6);
  v2 = v26;
  v3 = *((_QWORD *)this + 2);
  v4 = *(_QWORD *)(v3 + 216);
  v3 += 216;
  *(_QWORD *)(v3 + 8) = v4;
  std::vector<float>::resize(v3, *(int *)(v3 - 212), &OpenSubdiv::v3_1_1::Sdc::Crease::SHARPNESS_SMOOTH);
  v27 = (float *)&v29;
  v28 = 0x1000000000;
  __p = 0;
  if ((v2 & 0x60) != 0 && (v5 = *(unsigned int *)(*((_QWORD *)this + 1) + 20), v5 >= 0x11))
  {
    operator delete(0);
    v6 = operator new(4 * v5);
    __p = v6;
    v27 = (float *)v6;
    HIDWORD(v28) = v5;
  }
  else
  {
    v6 = 0;
  }
  v7 = *((int *)this + 12);
  if ((int)v7 >= 1)
  {
    v8 = *((int *)this + 18);
    v9 = v7 + v8;
    while (1)
    {
      v10 = *((_QWORD *)this + 2);
      v11 = *(_QWORD *)(v10 + 216);
      v12 = *(_QWORD *)(v10 + 240);
      if ((*(_BYTE *)(v12 + v8) & 4) != 0)
      {
        *(_DWORD *)(v11 + 4 * v8) = 1092616192;
      }
      else if ((*(_BYTE *)(v12 + v8) & 8) != 0)
      {
        v13 = *(int *)(*((_QWORD *)this + 36) + 4 * v8);
        v14 = (_QWORD *)*((_QWORD *)this + 1);
        v15 = v14[27];
        v16 = *(float *)(v15 + 4 * v13);
        if ((v26 & 0x60) != 0)
        {
          v17 = *(int *)(v14[15]
                       + 8 * v13
                       + 4 * (((unint64_t)*(unsigned __int8 *)(*((_QWORD *)this + 45) + v8) >> 3) & 3));
          v18 = v14[42];
          v19 = *(_DWORD *)(v18 + 8 * (_DWORD)v17);
          v20 = v27;
          if (v19 >= 1)
          {
            v21 = (int *)(v14[45] + 4 * *(int *)(v18 + 8 * v17 + 4));
            v22 = *(unsigned int *)(v18 + 8 * (_DWORD)v17);
            v23 = v27;
            do
            {
              v24 = *v21++;
              *v23++ = *(float *)(v15 + 4 * v24);
              --v22;
            }
            while (v22);
          }
          v25 = OpenSubdiv::v3_1_1::Sdc::Crease::SubdivideEdgeSharpnessAtVertex((OpenSubdiv::v3_1_1::Sdc::Crease *)&v26, v16, v19, v20);
          goto LABEL_14;
        }
        if (v16 <= 0.0)
          goto LABEL_21;
        v25 = 10.0;
        if (v16 >= 10.0)
        {
LABEL_14:
          *(float *)(v11 + 4 * v8) = v25;
          if (v25 > 0.0)
            goto LABEL_23;
        }
        else
        {
          if (v16 > 1.0)
          {
            v25 = v16 + -1.0;
            goto LABEL_14;
          }
LABEL_21:
          *(_DWORD *)(v11 + 4 * v8) = 0;
        }
        *(_BYTE *)(v12 + v8) &= ~8u;
      }
LABEL_23:
      if (++v8 >= v9)
      {
        v6 = __p;
        break;
      }
    }
  }
  operator delete(v6);
}

void OpenSubdiv::v3_1_1::Vtr::internal::Refinement::subdivideVertexSharpness(OpenSubdiv::v3_1_1::Vtr::internal::Refinement *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  float v10;
  float v11;

  v2 = *((_QWORD *)this + 2);
  *(_QWORD *)(v2 + 416) = *(_QWORD *)(v2 + 408);
  std::vector<float>::resize(v2 + 408, *(int *)(v2 + 8), &OpenSubdiv::v3_1_1::Sdc::Crease::SHARPNESS_SMOOTH);
  v3 = *((int *)this + 15);
  if ((int)v3 >= 1)
  {
    v4 = *((int *)this + 21);
    v5 = v3 + v4;
    do
    {
      v6 = *((_QWORD *)this + 2);
      v7 = *(_QWORD *)(v6 + 408);
      v8 = *(_QWORD *)(v6 + 432);
      v9 = *(_WORD *)(v8 + 2 * v4);
      if ((v9 & 0x10) != 0)
      {
        *(_DWORD *)(v7 + 4 * v4) = 1092616192;
      }
      else if ((v9 & 0x20) != 0)
      {
        v10 = *(float *)(*(_QWORD *)(*((_QWORD *)this + 1) + 408) + 4 * *(int *)(*((_QWORD *)this + 39) + 4 * v4));
        if (v10 <= 0.0)
          goto LABEL_12;
        v11 = 10.0;
        if (v10 >= 10.0)
        {
LABEL_9:
          *(float *)(v7 + 4 * v4) = v11;
          if (v11 > 0.0)
            goto LABEL_14;
        }
        else
        {
          if (v10 > 1.0)
          {
            v11 = v10 + -1.0;
            goto LABEL_9;
          }
LABEL_12:
          *(_DWORD *)(v7 + 4 * v4) = 0;
        }
        *(_WORD *)(v8 + 2 * v4) &= ~0x20u;
      }
LABEL_14:
      ++v4;
    }
    while (v4 < v5);
  }
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::Refinement::reclassifySemisharpVertices(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;
  int *v8;
  int v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unsigned int v20;
  _QWORD *v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  int32x2_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  unsigned __int16 *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int32 v39;
  __int16 v40;
  __int32 v41;
  int v42;

  v1 = this;
  v42 = *(_DWORD *)(this + 24);
  v2 = *(int *)(this + 56);
  if ((int)v2 >= 1)
  {
    v3 = *(int *)(this + 80);
    v4 = v2 + v3;
    do
    {
      v5 = *(_QWORD *)(v1 + 16);
      v6 = *(_QWORD *)(v5 + 432);
      v7 = *(_WORD *)(v6 + 2 * v3);
      if ((v7 & 0x40) != 0)
      {
        v8 = (int *)(*(_QWORD *)(v1 + 192) + 8 * *(int *)(*(_QWORD *)(v1 + 312) + 4 * v3));
        if ((*(_BYTE *)(*(_QWORD *)(v1 + 384) + v3) & 1) != 0)
        {
          v11 = *v8;
          if ((_DWORD)v11 != -1 && (*(_BYTE *)(*(_QWORD *)(v5 + 240) + v11) & 8) != 0)
          {
            v13 = v7 & 0xF83F | 0x40;
            v14 = 512;
          }
          else
          {
            v12 = v8[1];
            if ((_DWORD)v12 == -1)
            {
              v13 = v7 & 0xF83F;
              v14 = 128;
            }
            else
            {
              v13 = v7 & 0xF83F;
              if ((*(_BYTE *)(*(_QWORD *)(v5 + 240) + v12) & 8) != 0)
              {
                v13 |= 0x40u;
                v14 = 512;
              }
              else
              {
                v14 = 128;
              }
            }
          }
          v10 = v14 | v13;
        }
        else
        {
          v9 = ((*(unsigned __int8 *)(*(_QWORD *)(v5 + 240) + v8[1]) >> 3) & 1)
             + ((*(unsigned __int8 *)(*(_QWORD *)(v5 + 240) + *v8) >> 3) & 1);
          *(_WORD *)(v6 + 2 * v3) = v7 & 0xFFBF | ((v9 != 0) << 6);
          this = OpenSubdiv::v3_1_1::Sdc::Crease::DetermineVertexVertexRule((OpenSubdiv::v3_1_1::Sdc::Crease *)&v42, 0.0, v9);
          v10 = *(_WORD *)(v6 + 2 * v3) & 0xF87F | ((this & 0xF) << 7);
        }
        *(_WORD *)(v6 + 2 * v3) = v10;
      }
      ++v3;
    }
    while (v3 < v4);
  }
  v15 = *(int *)(v1 + 60);
  if ((int)v15 >= 1)
  {
    v16 = *(int *)(v1 + 84);
    v17 = v15 + v16;
    do
    {
      v18 = *(int *)(*(_QWORD *)(v1 + 312) + 4 * v16);
      v19 = *(_QWORD **)(v1 + 8);
      v20 = *(unsigned __int16 *)(v19[54] + 2 * v18);
      if ((v20 & 0x60) == 0)
        goto LABEL_34;
      v21 = *(_QWORD **)(v1 + 16);
      v22 = v21[54];
      v23 = *(_WORD *)(v22 + 2 * v16);
      if ((v20 & 0x40) == 0 && (((v23 & 0x20) == 0) & (v20 >> 5)) == 0)
        goto LABEL_34;
      v24 = v21[45];
      if ((int)((unint64_t)(v21[46] - v24) >> 2) < 1)
      {
        v31 = v19[42];
        v32 = *(unsigned int *)(v31 + 8 * (_DWORD)v18);
        if ((int)v32 >= 1)
        {
          v33 = *(int *)(v31 + 8 * v18 + 4);
          v34 = (int *)(v19[45] + 4 * v33);
          v35 = (unsigned __int16 *)(v19[48] + 2 * v33);
          v28 = 0;
          v36 = v21[30];
          do
          {
            v37 = *v34++;
            v38 = *(_QWORD *)(v1 + 192) + 8 * v37;
            LODWORD(v37) = *v35++;
            v28 = vadd_s32(v28, (int32x2_t)(*(_QWORD *)&vshl_u32((uint32x2_t)vand_s8((int8x8_t)vdup_n_s32(*(unsigned __int8 *)(v36 + *(int *)(v38 + 4 * v37))), (int8x8_t)0xFF000000FFLL), (uint32x2_t)0xFFFFFFFEFFFFFFFDLL) & 0xFFFFFFC1FFFFFFC1));
            --v32;
          }
          while (v32);
          goto LABEL_30;
        }
      }
      else
      {
        v25 = v21[42];
        v26 = *(unsigned int *)(v25 + 8 * (int)v16);
        if ((int)v26 >= 1)
        {
          v27 = (int *)(v24 + 4 * *(int *)(v25 + 8 * (_DWORD)v16 + 4));
          v28 = 0;
          v29 = v21[30];
          do
          {
            v30 = *v27++;
            v28 = vadd_s32(v28, (int32x2_t)(*(_QWORD *)&vshl_u32((uint32x2_t)vand_s8((int8x8_t)vdup_n_s32(*(unsigned __int8 *)(v29 + v30)), (int8x8_t)0xFF000000FFLL), (uint32x2_t)0xFFFFFFFEFFFFFFFDLL) & 0xFFFFFFC1FFFFFFC1));
            --v26;
          }
          while (v26);
LABEL_30:
          v39 = v28.i32[0];
          v40 = (v28.i32[0] > 0) << 6;
          v41 = v28.i32[1];
          goto LABEL_32;
        }
      }
      v41 = 0;
      v39 = 0;
      v40 = 0;
LABEL_32:
      *(_WORD *)(v22 + 2 * v16) = v40 | v23 & 0xFFBF;
      if ((v23 & 0x30) == 0)
      {
        this = OpenSubdiv::v3_1_1::Sdc::Crease::DetermineVertexVertexRule((OpenSubdiv::v3_1_1::Sdc::Crease *)&v42, 0.0, v41 + v39);
        *(_WORD *)(v22 + 2 * v16) = ((this & 0xF) << 7) | *(_WORD *)(v22 + 2 * v16) & 0xF87F;
      }
LABEL_34:
      ++v16;
    }
    while (v16 < v17);
  }
  return this;
}

void std::vector<float>::resize(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v3;

  v3 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  if (a2 <= v3)
  {
    if (a2 < v3)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 4 * a2;
  }
  else
  {
    std::vector<float>::__append((void **)a1, a2 - v3, a3);
  }
}

_QWORD *OpenSubdiv::v3_1_1::Vtr::internal::Refinement::markSparseVertexChildren(_QWORD *this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t i;

  v1 = this[57];
  if (this[58] == v1)
    OpenSubdiv::v3_1_1::Vtr::internal::Refinement::markSparseVertexChildren();
  v2 = this[1];
  v3 = *(_DWORD *)(v2 + 8);
  if (v3 >= 1)
  {
    for (i = 0; i < v3; ++i)
    {
      if ((*(_BYTE *)(v1 + i) & 1) != 0)
      {
        *(_DWORD *)(this[30] + 4 * i) = 2;
        v3 = *(_DWORD *)(v2 + 8);
      }
    }
  }
  return this;
}

_QWORD *OpenSubdiv::v3_1_1::Vtr::internal::Refinement::markSparseEdgeChildren(_QWORD *this)
{
  uint64_t v1;
  uint64_t i;
  _DWORD *v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  int *v13;
  int *v14;
  uint64_t v15;
  int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;

  if (this[55] == this[54])
    OpenSubdiv::v3_1_1::Vtr::internal::Refinement::markSparseEdgeChildren();
  v1 = this[1];
  if (*(int *)(v1 + 4) >= 1)
  {
    for (i = 0; i < *(int *)(v1 + 4); ++i)
    {
      v3 = (_DWORD *)(this[24] + 8 * i);
      v4 = this[54];
      if ((*(_BYTE *)(v4 + i) & 1) != 0)
      {
        v7 = 2;
        *v3 = 2;
      }
      else
      {
        v5 = (int *)(*(_QWORD *)(v1 + 120) + 8 * i);
        v6 = this[57];
        if ((*(_BYTE *)(v6 + *v5) & 1) != 0)
        {
          *v3 = 1;
          *(_DWORD *)(this[27] + 4 * i) = 1;
        }
        if ((*(_BYTE *)(v6 + v5[1]) & 1) == 0)
          goto LABEL_11;
        v7 = 1;
      }
      v3[1] = v7;
      *(_DWORD *)(this[27] + 4 * i) = v7;
LABEL_11:
      v8 = *(_QWORD *)(v1 + 168);
      v9 = *(_QWORD *)(v1 + 144);
      v10 = *(int *)(v9 + ((8 * i) | 4));
      v11 = *(unsigned int *)(v9 + 8 * i);
      if ((_DWORD)v11 == 2)
      {
        v12 = *(_BYTE *)(v4 + i) & 0xE1 | (2
                                         * ((*(_BYTE *)(this[51] + *(int *)(v8 + 4 * v10 + 4)) ^ *(_BYTE *)(this[51] + *(int *)(v8 + 4 * v10))) & 1));
      }
      else if ((int)v11 > 1)
      {
        v13 = (int *)(v8 + 4 * v10);
        v15 = *v13;
        v14 = v13 + 1;
        v16 = *(unsigned __int8 *)(this[51] + v15);
        v17 = *(_BYTE *)(v4 + i) & 0xE1;
        *(_BYTE *)(v4 + i) = v17;
        v18 = v11 - 1;
        while (1)
        {
          v19 = *v14++;
          if (((*(unsigned __int8 *)(this[51] + v19) ^ v16) & 1) != 0)
            break;
          if (!--v18)
            goto LABEL_21;
        }
        v12 = v17 | 2;
      }
      else
      {
        v12 = *(_BYTE *)(v4 + i) & 0xE1;
      }
      *(_BYTE *)(v4 + i) = v12;
LABEL_21:
      v1 = this[1];
    }
  }
  return this;
}

void std::vector<OpenSubdiv::v3_1_1::Vtr::internal::Refinement::SparseTag>::__append(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  unint64_t v7;
  unint64_t v8;
  size_t v9;
  void *v10;
  _BYTE *v11;
  char *v12;
  char *v13;
  _BYTE *v14;
  _BYTE *v15;
  char v16;

  v2 = a2;
  v5 = (_BYTE *)a1[1];
  v4 = a1[2];
  if (v4 - (uint64_t)v5 >= a2)
  {
    if (a2)
    {
      v11 = &v5[a2];
      do
      {
        *v5++ &= 0xE0u;
        --v2;
      }
      while (v2);
      v5 = v11;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = &v5[-*a1];
    v7 = (unint64_t)&v6[a2];
    if ((uint64_t)&v6[a2] < 0)
      abort();
    v8 = v4 - *a1;
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x3FFFFFFFFFFFFFFFLL)
      v9 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
      v10 = operator new(v9);
    else
      v10 = 0;
    v12 = &v6[(_QWORD)v10];
    v13 = &v6[(_QWORD)v10 + v2];
    v14 = &v6[(_QWORD)v10];
    do
    {
      *v14++ &= 0xE0u;
      --v2;
    }
    while (v2);
    v15 = (_BYTE *)*a1;
    if (v5 != (_BYTE *)*a1)
    {
      do
      {
        v16 = *--v5;
        *--v12 = v16;
      }
      while (v5 != v15);
      v5 = (_BYTE *)*a1;
    }
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (char *)v10 + v9;
    if (v5)
      operator delete(v5);
  }
}

void std::vector<float>::__append(void **a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _DWORD *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *i;
  int v25;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_DWORD **)(v6 - 8);
  if (a2 <= (v8 - (_BYTE *)v9) >> 2)
  {
    if (a2)
    {
      v16 = 4 * a2;
      v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 4;
      }
      while (v16);
      v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = (char *)v9 - (_BYTE *)*a1;
    v11 = a2 + (v10 >> 2);
    if (v11 >> 62)
      abort();
    v12 = v10 >> 2;
    v13 = v7 - (_BYTE *)*a1;
    if (v13 >> 1 > v11)
      v11 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v6, v14);
    else
      v15 = 0;
    v18 = &v15[4 * v12];
    v19 = &v18[4 * a2];
    v20 = 4 * a2;
    v21 = v18;
    do
    {
      *(_DWORD *)v21 = *a3;
      v21 += 4;
      v20 -= 4;
    }
    while (v20);
    v22 = &v15[4 * v14];
    v23 = (char *)*a1;
    for (i = (char *)a1[1]; i != v23; i -= 4)
    {
      v25 = *((_DWORD *)i - 1);
      *((_DWORD *)v18 - 1) = v25;
      v18 -= 4;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
      operator delete(v23);
  }
}

void OpenSubdiv::v3_1_1::Vtr::internal::Refinement::Refinement()
{
  __assert_rtn("Refinement", "refinement.cpp", 68, "(childArg.getDepth() == 0) && (childArg.getNumVertices() == 0)");
}

void OpenSubdiv::v3_1_1::Vtr::internal::Refinement::refine()
{
  __assert_rtn("refine", "refinement.cpp", 120, "_parent && _child");
}

void OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateParentToChildMapping()
{
  __assert_rtn("populateParentToChildMapping", "refinement.cpp", 194, "\"Unsupported empty sparse refinement detected in Refinement\" == 0");
}

void OpenSubdiv::v3_1_1::Vtr::internal::Refinement::subdivideFVarChannels()
{
  __assert_rtn("subdivideFVarChannels", "refinement.cpp", 1068, "this->_fvarChannels.size() == 0");
}

{
  __assert_rtn("subdivideFVarChannels", "refinement.cpp", 1067, "_child->_fvarChannels.size() == 0");
}

void OpenSubdiv::v3_1_1::Vtr::internal::Refinement::markSparseVertexChildren()
{
  __assert_rtn("markSparseVertexChildren", "refinement.cpp", 1162, "_parentVertexTag.size() > 0");
}

void OpenSubdiv::v3_1_1::Vtr::internal::Refinement::markSparseEdgeChildren()
{
  __assert_rtn("markSparseEdgeChildren", "refinement.cpp", 1178, "_parentEdgeTag.size() > 0");
}

void *OpenSubdiv::v3_1_1::Far::SetErrorCallback(void *result)
{
  OpenSubdiv::v3_1_1::Far::errorFunc = result;
  return result;
}

void *OpenSubdiv::v3_1_1::Far::SetWarningCallback(void *this, void (*a2)(const char *))
{
  OpenSubdiv::v3_1_1::Far::warningFunc = this;
  return this;
}

uint64_t OpenSubdiv::v3_1_1::Far::Error(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  char __str[10240];
  uint64_t v14;

  v9 = MEMORY[0x1E0C80A78](a1);
  v14 = *MEMORY[0x1E0C80C00];
  if (!(_DWORD)v9)
    OpenSubdiv::v3_1_1::Far::Error();
  v11 = v9;
  vsnprintf(__str, 0x2800uLL, v10, &a9);
  if (OpenSubdiv::v3_1_1::Far::errorFunc)
    return OpenSubdiv::v3_1_1::Far::errorFunc(v11, __str);
  else
    return printf("%s: %s\n", OpenSubdiv::v3_1_1::Far::Error(OpenSubdiv::v3_1_1::Far::ErrorType,char const*,...)::errorTypeLabel[v11], __str);
}

uint64_t OpenSubdiv::v3_1_1::Far::Warning(OpenSubdiv::v3_1_1::Far *this, const char *a2, ...)
{
  const char *v2;
  char __str[10240];
  uint64_t v5;
  va_list va;

  va_start(va, a2);
  v2 = (const char *)MEMORY[0x1E0C80A78](this);
  v5 = *MEMORY[0x1E0C80C00];
  vsnprintf(__str, 0x2800uLL, v2, va);
  if (OpenSubdiv::v3_1_1::Far::warningFunc)
    return OpenSubdiv::v3_1_1::Far::warningFunc(__str);
  else
    return fprintf((FILE *)*MEMORY[0x1E0C80C20], "Warning: %s\n", __str);
}

void OpenSubdiv::v3_1_1::Far::Error()
{
  __assert_rtn("Error", "error.cpp", 74, "err!=FAR_NO_ERROR");
}

_QWORD *OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement::FVarRefinement(_QWORD *this, const OpenSubdiv::v3_1_1::Vtr::internal::Refinement *a2, OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel *a3, OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel *a4)
{
  *this = a2;
  this[1] = *((_QWORD *)a2 + 1);
  this[2] = a3;
  this[3] = *((_QWORD *)a2 + 2);
  this[4] = a4;
  this[6] = 0;
  this[7] = 0;
  this[5] = 0;
  return this;
}

void OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement::~FVarRefinement(OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
}

_QWORD *OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement::applyRefinement(OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_WORD *)(*((_QWORD *)this + 4) + 8) = *(_WORD *)(*((_QWORD *)this + 2) + 8);
  v2 = *((_QWORD *)this + 2);
  v3 = *((_QWORD *)this + 4);
  *(_BYTE *)(v3 + 12) = *(_BYTE *)(v2 + 12);
  *(_WORD *)(v3 + 13) = *(_WORD *)(v2 + 13);
  OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement::estimateAndAllocateChildValues(this);
  OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement::populateChildValues(this);
  OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement::trimAndFinalizeChildValues(this);
  OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement::propagateEdgeTags(this);
  OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement::propagateValueTags((int **)this);
  v4 = *((_QWORD *)this + 4);
  if (!*(_BYTE *)(v4 + 13))
  {
    OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement::propagateValueCreases(this);
    OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement::reclassifySemisharpValues(this);
    v4 = *((_QWORD *)this + 4);
  }
  if (*(_DWORD *)(v4 + 16) <= *(_DWORD *)(*((_QWORD *)this + 3) + 8))
    return OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::initializeFaceValuesFromFaceVertices((void **)v4);
  else
    return OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::initializeFaceValuesFromVertexFaceSiblings((_QWORD *)v4);
}

void OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement::estimateAndAllocateChildValues(OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement *this)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int16 v15;

  v2 = *(_QWORD *)this;
  v3 = *(_DWORD *)(*(_QWORD *)this + 52);
  v4 = *(int *)(*(_QWORD *)this + 56);
  if ((int)v4 >= 1)
  {
    v5 = *(int *)(v2 + 80);
    v6 = v4 + v5;
    do
    {
      v7 = *(int *)(*(_QWORD *)(v2 + 312) + 4 * v5);
      if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 2) + 48) + v7) & 1) != 0)
        v8 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 144) + 8 * v7);
      else
        v8 = 1;
      v3 += v8;
      ++v5;
    }
    while (v5 < v6);
  }
  v9 = *(int *)(v2 + 60);
  if ((int)v9 >= 1)
  {
    v10 = *(int *)(v2 + 84);
    v11 = v9 + v10;
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(v2 + 384) + v10) & 1) != 0)
        OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement::estimateAndAllocateChildValues();
      v3 += *(unsigned __int16 *)(*(_QWORD *)(*((_QWORD *)this + 2) + 72)
                                + 2 * *(int *)(*(_QWORD *)(v2 + 312) + 4 * v10++));
    }
    while (v10 < v11);
  }
  OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::resizeComponents(*((std::vector<unsigned int> **)this + 4));
  v12 = *((_QWORD *)this + 4);
  v13 = *(_QWORD *)(v12 + 168);
  v14 = *(_QWORD *)(v12 + 176) - v13;
  if (v3 <= v14)
  {
    if (v3 < v14)
      *(_QWORD *)(v12 + 176) = v13 + v3;
  }
  else
  {
    std::vector<OpenSubdiv::v3_1_1::Vtr::internal::Level::FTag>::__append((void **)(v12 + 168), v3 - v14);
  }
  v15 = 0;
  std::vector<unsigned short>::resize((uint64_t)this + 40, v3, &v15);
}

_QWORD *OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement::populateChildValues(OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement *this)
{
  *(_DWORD *)(*((_QWORD *)this + 4) + 16) = 0;
  if (*(_BYTE *)(*(_QWORD *)this + 37))
  {
    OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement::populateChildValuesFromFaceVertices(this);
    OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement::populateChildValuesFromEdgeVertices((uint64_t)this);
    return OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement::populateChildValuesFromVertexVertices(this);
  }
  else
  {
    OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement::populateChildValuesFromVertexVertices(this);
    OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement::populateChildValuesFromFaceVertices(this);
    return (_QWORD *)OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement::populateChildValuesFromEdgeVertices((uint64_t)this);
  }
}

void OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement::trimAndFinalizeChildValues(OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *((_QWORD *)this + 4);
  v3 = *(_QWORD *)(v2 + 168);
  v4 = *(int *)(v2 + 16);
  v5 = *(_QWORD *)(v2 + 176) - v3;
  if (v4 <= v5)
  {
    if (v4 < v5)
      *(_QWORD *)(v2 + 176) = v3 + v4;
  }
  else
  {
    std::vector<OpenSubdiv::v3_1_1::Vtr::internal::Level::FTag>::__append((void **)(v2 + 168), v4 - v5);
    v2 = *((_QWORD *)this + 4);
  }
  if (!*(_BYTE *)(v2 + 13))
  {
    std::vector<OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::CreaseEndPair>::resize(v2 + 192, *(int *)(v2 + 16));
    v2 = *((_QWORD *)this + 4);
  }
  std::vector<unsigned short>::resize((uint64_t)this + 40, *(int *)(v2 + 16));
  std::vector<int>::resize((std::vector<unsigned int> *)(*((_QWORD *)this + 4) + 144), *(int *)(*((_QWORD *)this + 4) + 16));
  v6 = *((_QWORD *)this + 4);
  if (*(int *)(v6 + 16) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(v6 + 144);
    do
    {
      *(_DWORD *)(v8 + 4 * v7) = v7;
      ++v7;
    }
    while (v7 < *(int *)(v6 + 16));
  }
}

