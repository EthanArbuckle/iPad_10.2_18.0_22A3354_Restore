uint64_t C3DHitTestResultGetLocalPosition(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DHitTestResultGetNode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return a1 + 64;
}

uint64_t C3DHitTestResultGetWorldPosition(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DHitTestResultGetNode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return a1 + 96;
}

uint64_t C3DHitTestResultGetLocalNormal(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DHitTestResultGetNode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return a1 + 80;
}

double C3DHitTestResultGetWorldNormal(float32x4_t *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const float *f32;
  double result;
  float32x4_t v12;
  simd_float4x4 v13;
  simd_float4x4 v14;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DHitTestResultGetNode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  f32 = a1[7].f32;
  v12 = a1[5];
  v14 = (simd_float4x4)vld4q_f32(f32);
  v13 = __invert_f4(v14);
  *(_QWORD *)&result = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32((float32x4_t)v13.columns[1], *(float32x2_t *)v12.f32, 1), (float32x4_t)v13.columns[0], v12.f32[0]), (float32x4_t)v13.columns[2], v12, 2).u64[0];
  return result;
}

uint64_t C3DHitTestResultGetModelTransform(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DHitTestResultGetNode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return a1 + 112;
}

double C3DHitTestResultGetTextureCoordinates(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t Geometry;
  uint64_t Mesh;
  uint64_t v16;
  const void *SourceWithSemanticAtIndex;
  uint64_t v18;
  const void *PositionSource;
  uint64_t v20;
  const void *ElementAtIndex;
  uint64_t v22;
  uint64_t ChannelForSourceWithSemanticAtIndex;
  uint64_t v24;
  uint64_t Index;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  double ValueAtIndexAsVector2;
  double v33;
  double v34;
  uint64_t v36;
  uint64_t v37;
  float32x4_t v38;
  _OWORD v39[3];

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DHitTestResultGetTextureCoordinates_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = *(_QWORD *)(a1 + 16);
  v13 = 0.0;
  if (v12)
  {
    Geometry = C3DNodeGetGeometry(v12);
    if (Geometry)
    {
      Mesh = C3DGeometryGetMesh(Geometry);
      if (Mesh)
      {
        v16 = Mesh;
        SourceWithSemanticAtIndex = C3DMeshGetSourceWithSemanticAtIndex(Mesh, 3, a2, 0);
        if (SourceWithSemanticAtIndex)
        {
          v18 = (uint64_t)SourceWithSemanticAtIndex;
          PositionSource = C3DMeshGetPositionSource(v16, 0);
          if (PositionSource)
          {
            v20 = (uint64_t)PositionSource;
            ElementAtIndex = C3DMeshGetElementAtIndex(v16, *(_QWORD *)(a1 + 32), 0);
            if (ElementAtIndex)
            {
              v22 = (uint64_t)ElementAtIndex;
              ChannelForSourceWithSemanticAtIndex = C3DMeshGetChannelForSourceWithSemanticAtIndex(v16, 3, a2);
              v24 = C3DMeshGetChannelForSourceWithSemanticAtIndex(v16, 0, 0);
              Index = C3DMeshElementGetIndex(v22, *(_QWORD *)(a1 + 40), *(_DWORD *)(a1 + 48), ChannelForSourceWithSemanticAtIndex);
              v26 = C3DMeshElementGetIndex(v22, *(_QWORD *)(a1 + 40), *(_DWORD *)(a1 + 52), ChannelForSourceWithSemanticAtIndex);
              v27 = C3DMeshElementGetIndex(v22, *(_QWORD *)(a1 + 40), *(_DWORD *)(a1 + 56), ChannelForSourceWithSemanticAtIndex);
              v36 = v26;
              v37 = Index;
              v28 = v27;
              if (v24 != ChannelForSourceWithSemanticAtIndex)
              {
                Index = C3DMeshElementGetIndex(v22, *(_QWORD *)(a1 + 40), *(_DWORD *)(a1 + 48), v24);
                v26 = C3DMeshElementGetIndex(v22, *(_QWORD *)(a1 + 40), *(_DWORD *)(a1 + 52), v24);
                v28 = C3DMeshElementGetIndex(v22, *(_QWORD *)(a1 + 40), *(_DWORD *)(a1 + 56), v24);
              }
              *(double *)&v29 = C3DMeshSourceGetValueAtIndexAsVector3(v20, Index);
              v39[0] = v29;
              *(double *)&v30 = C3DMeshSourceGetValueAtIndexAsVector3(v20, v26);
              v39[1] = v30;
              *(double *)&v31 = C3DMeshSourceGetValueAtIndexAsVector3(v20, v28);
              v39[2] = v31;
              v38.i32[2] = 0;
              v38.i64[0] = 0;
              C3DTriangle3BarycentricCoordinates(v39, (__int128 *)(a1 + 64), &v38);
              ValueAtIndexAsVector2 = C3DMeshSourceGetValueAtIndexAsVector2(v18, v37);
              v33 = C3DMeshSourceGetValueAtIndexAsVector2(v18, v36);
              v34 = C3DMeshSourceGetValueAtIndexAsVector2(v18, v27);
              return COERCE_DOUBLE(vmla_laneq_f32(vmla_n_f32(vmul_lane_f32(*(float32x2_t *)&v33, *(float32x2_t *)v38.f32, 1), *(float32x2_t *)&ValueAtIndexAsVector2, v38.f32[0]), *(float32x2_t *)&v34, v38, 2));
            }
          }
        }
      }
    }
  }
  return v13;
}

uint64_t _C3DProjectPoints(float32x4_t *a1, int a2, float32x4_t *a3, uint64_t a4, char a5, float32x4_t *a6, __n128 a7)
{
  uint64_t v11;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t ProjectionInfos;
  char *Matrix;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float64x2_t v26;
  float v27;
  float32x4_t v34;
  float32x4_t v35;
  float v36;
  float v37;
  char v38;
  float v39;
  float64x2_t v41;
  int8x16_t v42;
  float32x2_t v43;
  float64x2_t v44;
  simd_float4x4 v45;
  simd_float4x4 v46;
  float32x4_t v47[4];
  _OWORD v48[14];
  __n128 v49;
  float32x4_t v50[4];

  LODWORD(v11) = a2;
  v49 = a7;
  memset(v48, 0, sizeof(v48));
  memset(&v46, 0, sizeof(v46));
  if (!a3)
  {
    v13 = scn_default_log();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
      C3DNodeGetProjectionInfos_cold_1(v13, v14, v15, v16, v17, v18, v19, v20);
  }
  ProjectionInfos = C3DNodeGetProjectionInfos((uint64_t)a3, (uint64_t)v48);
  if ((_DWORD)ProjectionInfos)
  {
    if (a4 && (v48[0] & 2) != 0)
      C3DAdjustZRangeOfProjectionInfos((uint64_t)v48, a3, 0, a4);
    Matrix = C3DProjectionInfosGetMatrix((char *)v48, (uint64_t)&v49, a5);
    v23 = *((float32x4_t *)Matrix + 3);
    v25 = *(float32x4_t *)Matrix;
    v24 = *((float32x4_t *)Matrix + 1);
    v47[2] = *((float32x4_t *)Matrix + 2);
    v47[3] = v23;
    v47[0] = v25;
    v47[1] = v24;
    memset(&v45, 0, sizeof(v45));
    C3DNodeComputeWorldMatrix(a3, (uint64_t)&v45);
    C3DMatrix4x4Invert(&v45, &v46);
    v42 = (int8x16_t)v49;
    memset(v50, 0, sizeof(v50));
    C3DMatrix4x4Mult((uint64_t)&v46, v47, v50);
    if ((int)v11 >= 1)
    {
      v26 = vcvtq_f64_f32(*(float32x2_t *)v42.i8);
      v11 = v11;
      v43 = (float32x2_t)vextq_s8(v42, v42, 8uLL).u64[0];
      v44 = v26;
      v27 = 1.0;
      __asm
      {
        FMOV            V8.2S, #1.0
        FMOV            V0.2D, #0.5
      }
      v41 = _Q0;
      do
      {
        v34 = *a1;
        v34.f32[3] = v27;
        *(double *)v35.i64 = C3DVector4MultMatrix4x4(v50, v34);
        v27 = 1.0;
        if (v35.f32[3] == 0.0)
          break;
        v36 = 1.0 / v35.f32[3];
        if ((float)(1.0 / v35.f32[3]) == 0.0)
          break;
        v37 = vmuls_lane_f32(v36, v35, 2);
        *(float32x2_t *)v35.f32 = vcvt_f32_f64(vaddq_f64(vmulq_f64(vcvtq_f64_f32(vmul_f32(v43, vadd_f32(vmul_n_f32(*(float32x2_t *)v35.f32, v36), _D8))), v41), v44));
        a6->i32[2] = a6->i64[1];
        a6->i64[0] = v35.i64[0];
        if ((a5 & 8) != 0 && (v38 = C3DWasLinkedBeforeMajorOSYear2021(), v35 = *a6, v27 = 1.0, (v38 & 1) == 0))
          v39 = 1.0 - v37;
        else
          v39 = (float)(v37 + v27) * 0.5;
        a6->f32[2] = v39;
        a6->i64[0] = v35.i64[0];
        ++a6;
        ++a1;
        --v11;
      }
      while (v11);
    }
  }
  return ProjectionInfos;
}

uint64_t _C3DUnProjectPoints(uint64_t a1, int a2, float32x4_t *a3, uint64_t a4, char a5, float32x4_t *a6, __n128 a7)
{
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  float32x4_t *WorldMatrix;
  float32x4_t v23;
  float32x4_t v24;
  uint64_t v25;
  float32x4_t v26;
  float32x4_t v27;
  _OWORD v29[14];

  if (!a3)
  {
    v13 = scn_default_log();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
      C3DNodeGetProjectionInfos_cold_1(v13, v14, v15, v16, v17, v18, v19, v20);
  }
  memset(v29, 0, sizeof(v29));
  result = C3DNodeGetProjectionInfos((uint64_t)a3, (uint64_t)v29);
  if ((_DWORD)result)
  {
    if (a4 && (v29[0] & 2) != 0)
      C3DAdjustZRangeOfProjectionInfos((uint64_t)v29, a3, 0, a4);
    result = C3DProjectionInfosUnproject((uint64_t)v29, a1, a2, a5, a6, a7);
    if ((_DWORD)result)
    {
      WorldMatrix = C3DNodeGetWorldMatrix(a3);
      if (a2 >= 1)
      {
        v24 = WorldMatrix[2];
        v23 = WorldMatrix[3];
        v25 = a2;
        v27 = *WorldMatrix;
        v26 = WorldMatrix[1];
        do
        {
          *a6 = vaddq_f32(v23, vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v26, *(float32x2_t *)a6->f32, 1), v27, COERCE_FLOAT(*a6)), v24, *a6, 2));
          ++a6;
          --v25;
        }
        while (v25);
      }
      return 1;
    }
  }
  return result;
}

double _C3DHitTestComputeHitSegment(float32x4_t *a1, uint64_t a2, float32x4_t *a3, _OWORD *a4, __n128 a5, double a6)
{
  float32x4_t v14;
  __int128 v15;
  _OWORD v16[2];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    __asm { FMOV            V2.4S, #1.0 }
    *(double *)&_Q2 = a6;
    v16[0] = *(unint64_t *)&a6;
    v16[1] = _Q2;
    _C3DUnProjectPoints((uint64_t)v16, 2, a1, a2, 0, &v14, a5);
    if (a3)
    {
      a5.n128_u64[0] = v14.i64[0];
      *a3 = v14;
    }
    if (a4)
    {
      a5.n128_u64[0] = v15;
      *a4 = v15;
    }
  }
  return a5.n128_f64[0];
}

uint64_t C3DHitTestContextFillOptionsFromDictionary(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t result;
  __int16 v5;
  __int16 v6;
  const void *Value;
  CFTypeRef *v8;
  char v9;
  void *v10;
  uint64_t v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const __CFNumber *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  void *v20;
  uint64_t v21;
  __int16 v22;
  const void *v23;
  const void *v24;
  const void *v25;
  uint64_t valuePtr;

  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_QWORD *)a1 = -1;
  *(_BYTE *)(a1 + 8) = 63;
  result = C3DWasLinkedBeforeMajorOSYear2017();
  v5 = *(_WORD *)(a1 + 8);
  if ((_DWORD)result)
    v6 = 0;
  else
    v6 = 256;
  *(_BYTE *)(a1 + 10) = 1;
  *(_WORD *)(a1 + 8) = v5 & 0xFEFF | v6 | 0x400;
  if (!a2)
    return result;
  Value = CFDictionaryGetValue(a2, CFSTR("kHitTestAllLayers"));
  v8 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
  if (Value)
  {
    if (CFEqual((CFTypeRef)*MEMORY[0x1E0C9AE50], Value))
      v9 = 3;
    else
      v9 = 1;
    *(_BYTE *)(a1 + 10) = v9;
  }
  v10 = (void *)CFDictionaryGetValue(a2, CFSTR("kHitTestLayerMask"));
  if (v10)
  {
    v11 = objc_msgSend(v10, "integerValue");
    if (v11 >= 1)
      *(_BYTE *)(a1 + 10) = v11;
  }
  v12 = CFDictionaryGetValue(a2, CFSTR("kHitTestClipToZRange"));
  if (v12)
    *(_WORD *)(a1 + 8) = *(_WORD *)(a1 + 8) & 0xFFFD | (2 * (CFEqual(*v8, v12) != 0));
  v13 = CFDictionaryGetValue(a2, CFSTR("kHitTestBackFaceCulling"));
  if (v13)
    *(_WORD *)(a1 + 8) = *(_WORD *)(a1 + 8) & 0xFFF7 | (8 * (CFEqual(*v8, v13) != 0));
  v14 = CFDictionaryGetValue(a2, CFSTR("kHitTestSkipTransparentNode"));
  if (v14)
    *(_WORD *)(a1 + 8) = *(_WORD *)(a1 + 8) & 0xFFEF | (16 * (CFEqual(*v8, v14) != 0));
  v15 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("kHitTestCategoryBitMask"));
  if (v15)
  {
    valuePtr = 0;
    CFNumberGetValue(v15, kCFNumberLongType, &valuePtr);
    *(_QWORD *)a1 = valuePtr;
  }
  v16 = CFDictionaryGetValue(a2, CFSTR("kHitTestSkipHiddenNode"));
  if (v16)
    *(_WORD *)(a1 + 8) = *(_WORD *)(a1 + 8) & 0xFFDF | (32 * (CFEqual(*v8, v16) != 0));
  v17 = CFDictionaryGetValue(a2, CFSTR("kHitTestIgnoreChildNodes"));
  if (v17)
    *(_WORD *)(a1 + 8) = *(_WORD *)(a1 + 8) & 0xFFFE | (CFEqual(*v8, v17) == 0);
  v18 = CFDictionaryGetValue(a2, CFSTR("kHitTestFirstFoundOnly"));
  if (v18)
    *(_WORD *)(a1 + 8) = *(_WORD *)(a1 + 8) & 0xFF7F | ((CFEqual(*v8, v18) != 0) << 7);
  v19 = CFDictionaryGetValue(a2, CFSTR("kHitTestSortResults"));
  if (v19)
    *(_WORD *)(a1 + 8) = *(_WORD *)(a1 + 8) & 0xFFFB | (4 * (CFEqual(*v8, v19) != 0));
  v20 = (void *)CFDictionaryGetValue(a2, CFSTR("kHitTestSearchMode"));
  if (v20)
  {
    v21 = objc_msgSend(v20, "integerValue");
    switch(v21)
    {
      case 2:
        v22 = *(_WORD *)(a1 + 8) & 0xFE7F | 0x80;
        goto LABEL_36;
      case 1:
        v22 = *(_WORD *)(a1 + 8) & 0xFE7F;
        goto LABEL_36;
      case 0:
        v22 = *(_WORD *)(a1 + 8) & 0xFE7F | 0x100;
LABEL_36:
        *(_WORD *)(a1 + 8) = v22;
        break;
    }
  }
  v23 = CFDictionaryGetValue(a2, CFSTR("kHitTestBoundingBoxOnly"));
  if (v23)
    *(_WORD *)(a1 + 8) = *(_WORD *)(a1 + 8) & 0xFFBF | ((CFEqual(*v8, v23) != 0) << 6);
  v24 = CFDictionaryGetValue(a2, CFSTR("kHitTestShowDebugInfo"));
  if (v24)
    *(_WORD *)(a1 + 8) = *(_WORD *)(a1 + 8) & 0xFDFF | ((CFEqual(*v8, v24) != 0) << 9);
  v25 = CFDictionaryGetValue(a2, CFSTR("kHitTestResultIgnoreLightArea"));
  if (v25)
    *(_WORD *)(a1 + 8) = *(_WORD *)(a1 + 8) & 0xFBFF | ((CFEqual(*v8, v25) & 1) << 10);
  result = (uint64_t)CFDictionaryGetValue(a2, CFSTR("auth"));
  *(_QWORD *)(a1 + 416) = result;
  return result;
}

void __AddLocalResult(uint64_t a1, unsigned int a2, int a3, int a4, int a5, float a6, float32x4_t a7, __n128 a8)
{
  uint64_t v14;
  CFTypeRef v15;
  CFTypeRef v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  float v20;

  v14 = C3DHitTestResultCreate();
  C3DHitTestResultSetNode(v14, *(CFTypeRef *)(a1 + 112));
  v15 = *(CFTypeRef *)(v14 + 24);
  v16 = *(CFTypeRef *)(a1 + 120);
  if (v15 != v16)
  {
    if (v15)
    {
      CFRelease(*(CFTypeRef *)(v14 + 24));
      *(_QWORD *)(v14 + 24) = 0;
      v16 = *(CFTypeRef *)(a1 + 120);
    }
    if (v16)
      v16 = CFRetain(v16);
    *(_QWORD *)(v14 + 24) = v16;
  }
  v17 = *(_OWORD *)(a1 + 128);
  v18 = *(_OWORD *)(a1 + 144);
  v19 = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(v14 + 144) = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(v14 + 160) = v19;
  *(_OWORD *)(v14 + 112) = v17;
  *(_OWORD *)(v14 + 128) = v18;
  *(__n128 *)(v14 + 80) = a8;
  *(_QWORD *)(v14 + 32) = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(v14 + 40) = a2;
  *(_DWORD *)(v14 + 48) = a3;
  *(_DWORD *)(v14 + 52) = a4;
  *(_DWORD *)(v14 + 56) = a5;
  *(float32x4_t *)(v14 + 64) = a7;
  *(float32x4_t *)(v14 + 96) = vaddq_f32(*(float32x4_t *)(a1 + 176), vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(*(float32x4_t *)(a1 + 144), *(float32x2_t *)a7.f32, 1), *(float32x4_t *)(a1 + 128), a7.f32[0]), *(float32x4_t *)(a1 + 160), a7, 2));
  if ((*(_WORD *)(a1 + 8) & 0x100) != 0)
  {
    v20 = a6 / *(float *)(a1 + 108);
    *(float *)(a1 + 108) = a6;
    *(float *)(a1 + 60) = v20 * *(float *)(a1 + 60);
  }
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 312), (const void *)v14);
  CFRelease((CFTypeRef)v14);
}

void __AddWorldResult(uint64_t a1, unsigned int a2, int a3, int a4, int a5, float a6, float32x4_t a7, __n128 a8)
{
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  simd_float4x4 v20;

  v14 = C3DHitTestResultCreate();
  C3DHitTestResultSetNode(v14, *(CFTypeRef *)(a1 + 112));
  v15 = *(_OWORD *)(a1 + 128);
  v16 = *(_OWORD *)(a1 + 144);
  v17 = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(v14 + 144) = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(v14 + 160) = v17;
  *(_OWORD *)(v14 + 112) = v15;
  *(_OWORD *)(v14 + 128) = v16;
  *(__n128 *)(v14 + 80) = a8;
  *(_QWORD *)(v14 + 32) = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(v14 + 40) = a2;
  *(_DWORD *)(v14 + 48) = a3;
  *(_DWORD *)(v14 + 52) = a4;
  *(_DWORD *)(v14 + 56) = a5;
  *(float32x4_t *)(v14 + 96) = a7;
  v20 = __invert_f4(*(simd_float4x4 *)(a1 + 128));
  *(float32x4_t *)(v14 + 64) = vaddq_f32((float32x4_t)v20.columns[3], vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32((float32x4_t)v20.columns[1], *(float32x2_t *)a7.f32, 1), (float32x4_t)v20.columns[0], a7.f32[0]), (float32x4_t)v20.columns[2], a7, 2));
  if ((*(_WORD *)(a1 + 8) & 0x100) != 0)
    *(float *)(a1 + 60) = a6;
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 312), (const void *)v14);
  CFRelease((CFTypeRef)v14);
}

uint64_t scn_plane_ray_intersection(uint64_t a1, uint64_t a2, float *a3, float32x4_t a4, float32x4_t a5, __n128 a6)
{
  float32x4_t v6;
  int8x16_t v7;
  float v8;
  int8x16_t v9;
  float v10;

  v6.i64[0] = a1;
  v6.i64[1] = a2;
  v7 = (int8x16_t)vmulq_f32(a5, v6);
  v8 = vaddv_f32(vadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)));
  if (v8 == 0.0)
    return 0;
  v9 = (int8x16_t)vmulq_f32(a4, v6);
  v10 = (float)-vaddv_f32(vadd_f32(*(float32x2_t *)v9.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL))) / v8;
  if (v10 < 0.0 || v10 > a6.n128_f32[3])
    return 0;
  *a3 = v10;
  return 1;
}

BOOL __ProcessTriangleIndicesBatch(uint64_t a1, uint64_t a2, unsigned int a3, float32x4_t a4, float32x4_t a5, __n128 a6, uint64_t a7, char a8, uint64_t a9)
{
  float32x4_t v11;
  float32x4_t v12;
  uint64_t v15;
  float v16;
  BOOL v17;
  unsigned int v18;
  unint64_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  int32x4_t v27;
  float32x2_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int8x16_t v31;
  float v32;
  int8x16_t v33;
  float v34;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  uint32x4_t v39;
  float32x4_t v41;
  float v44;
  __n128 v45;

  if (a3)
  {
    v11 = a5;
    v12 = a4;
    v15 = 0;
    v16 = a6.n128_f32[3];
    v17 = 1;
    v18 = 2;
    v19 = a3;
    while (1)
    {
      v20 = *(float32x4_t *)(a1 + 16 * (v18 - 2));
      v21 = *(float32x4_t *)(a1 + 16 * (v18 - 1));
      v22 = *(float32x4_t *)(a1 + 16 * v18);
      v23 = vsubq_f32(v21, v20);
      v24 = vsubq_f32(v22, v20);
      v25 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v24, (int32x4_t)v24), (int8x16_t)v24, 0xCuLL), vnegq_f32(v23)), v24, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v23, (int32x4_t)v23), (int8x16_t)v23, 0xCuLL));
      v26 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v25, (int32x4_t)v25), (int8x16_t)v25, 0xCuLL);
      v27 = (int32x4_t)vmulq_f32(v25, v25);
      v27.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v27.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v27, 2), *(float32x2_t *)v27.i8)).u32[0];
      v28 = vrsqrte_f32((float32x2_t)v27.u32[0]);
      v30 = vmulq_n_f32(v26, vmul_f32(v28, vrsqrts_f32((float32x2_t)v27.u32[0], vmul_f32(v28, v28))).f32[0]);
      v29 = vmulq_f32(v30, v20);
      v30.f32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v29, 2), vaddq_f32(v29, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.f32, 1))).f32[0];
      v31 = (int8x16_t)vmulq_f32(v11, v30);
      v32 = vaddv_f32(vadd_f32(*(float32x2_t *)v31.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL)));
      if ((*(_WORD *)(a9 + 8) & 8) == 0 || (a8 & 1) != 0)
      {
        if (v32 == 0.0)
          goto LABEL_15;
      }
      else if (v32 >= 0.0)
      {
        goto LABEL_15;
      }
      v33 = (int8x16_t)vmulq_f32(v12, v30);
      v34 = (float)-vaddv_f32(vadd_f32(*(float32x2_t *)v33.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v33, v33, 8uLL))) / v32;
      if (v34 >= 0.0 && v34 <= v16)
      {
        v44 = v34;
        v45 = (__n128)v30;
        v41 = vmlaq_n_f32(v12, v11, v34);
        *(double *)v36.i64 = scn_triangle_barycentric_coordinates(v20, v21, v22, v41);
        v12 = a4;
        v11 = a5;
        v37.i64[0] = 0xBF000000BF000000;
        v37.i64[1] = 0xBF000000BF000000;
        v38 = vabsq_f32(vaddq_f32(v36, v37));
        v37.i64[0] = 0x3F0000003F000000;
        v37.i64[1] = 0x3F0000003F000000;
        v39 = (uint32x4_t)vcgeq_f32(v37, v38);
        v39.i32[3] = v39.i32[2];
        if ((vminvq_u32(v39) & 0x80000000) != 0)
        {
          __AddLocalResult(a9, *(_DWORD *)(a2 + 4 * v15), 0, 1, 2, v44, v41, v45);
          v12 = a4;
          v11 = a5;
          if ((*(_WORD *)(a9 + 8) & 0x80) != 0)
            return v17;
        }
      }
LABEL_15:
      v17 = ++v15 < v19;
      v18 += 3;
      if (v19 == v15)
        return v17;
    }
  }
  return 0;
}

uint64_t C3DMeshElementGetPrimitiveGroupBoundingBoxes(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  unsigned int v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unint64_t v25;
  __int128 v26;
  float32x4_t v27;
  float v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  float32x4_t v32;
  float32x4_t v33;
  uint64_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float v37;
  float v38;
  float32x4_t v39;
  float v40;
  float v41;
  float32x4_t *v42;
  float32x4_t *v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  float32x4_t *v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  NSObject *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  _QWORD v65[10];
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  __int128 v72;
  __int128 v73;
  __n128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  float32x4_t *v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  float32x4_t *v91;
  uint64_t v92;
  int32x4_t v93;
  uint64_t v94;

  v94 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v10 = scn_default_log();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
      C3DMeshElementCreate_cold_1(v10, v11, v12, v13, v14, v15, v16, v17);
  }
  result = *(_QWORD *)(a1 + 208);
  if (result)
    goto LABEL_5;
  if ((*((_BYTE *)a2 + 26) & 0xFA) == 0)
  {
    v19 = *((_DWORD *)a2 + 2) + 31;
    *(_DWORD *)(a1 + 216) = v19 >> 5;
    *(_QWORD *)(a1 + 208) = malloc_type_malloc(v19 & 0xFFFFFFE0, 0x1000040E0EAB150uLL);
    v20 = a4 & 0xFF000000000000;
    v80 = 0;
    v81 = &v80;
    v82 = 0x2020000000;
    v83 = 0;
    v90 = 0;
    v91 = (float32x4_t *)&v90;
    v92 = 0x3020000000;
    v93 = vdupq_n_s32(0x7F7FFFFFu);
    v86 = 0;
    v87 = (float32x4_t *)&v86;
    v88 = 0x3020000000;
    *(_QWORD *)&v21 = 0x80000000800000;
    *((_QWORD *)&v21 + 1) = 0x80000000800000;
    v89 = v21;
    v76 = 0;
    v77 = &v76;
    v78 = 0x2020000000;
    v79 = 0;
    if (*((_BYTE *)a2 + 26) == 4)
    {
      v65[1] = 3221225472;
      v22 = a2[1];
      v66 = *a2;
      v67 = v22;
      v24 = *a2;
      v23 = a2[1];
      v68 = a2[2];
      v65[0] = MEMORY[0x1E0C809B0];
      v65[2] = __C3DMeshElementGetPrimitiveGroupBoundingBoxes_block_invoke;
      v65[3] = &unk_1EA59E328;
      v71 = v20 == 0x1000000000000;
      v65[8] = a3;
      v65[9] = a4;
      v65[4] = &v90;
      v65[5] = &v86;
      v69 = *((_QWORD *)a2 + 6);
      v70 = a1;
      v65[6] = &v80;
      v65[7] = &v76;
      v72 = v24;
      v73 = v23;
      v74 = (__n128)a2[2];
      v75 = *((_QWORD *)a2 + 6);
      C3DIndicesContentEnumeratePrimitives((uint64_t *)&v72, (uint64_t)v65, v74);
    }
    else
    {
      v85 = 0;
      v84 = 0;
      if (*((_DWORD *)a2 + 2))
      {
        v25 = 0;
        v62 = vdupq_n_s32(0x7F7FFFFFu);
        do
        {
          v26 = a2[1];
          v72 = *a2;
          v73 = v26;
          v74 = (__n128)a2[2];
          v75 = *((_QWORD *)a2 + 6);
          C3DIndicesContentGetTriangleIndex_0((uint64_t *)&v72, v25, &v84, (_DWORD *)&v84 + 1, &v85);
          v30 = a3 + v84 * BYTE5(a4);
          if (v20 == 0x1000000000000)
          {
            v32.i64[0] = *(_QWORD *)v30;
            v31 = a3 + HIDWORD(v84) * BYTE5(a4);
            v33.i64[0] = *(_QWORD *)v31;
            v32.i64[1] = *(unsigned int *)(v30 + 8);
            v33.i64[1] = *(unsigned int *)(v31 + 8);
            v34 = a3 + v85 * BYTE5(a4);
            v35.i64[0] = *(_QWORD *)v34;
            v35.i64[1] = *(unsigned int *)(v34 + 8);
          }
          else
          {
            *(double *)v36.i64 = C3DConvertFloatingTypeToFloat4(BYTE4(a4), (float *)v30, v27, v28, v29);
            v64 = v36;
            *(double *)v39.i64 = C3DConvertFloatingTypeToFloat4(BYTE4(a4), (float *)(a3 + HIDWORD(v84) * BYTE5(a4)), v36, v37, v38);
            v63 = v39;
            *(double *)v35.i64 = C3DConvertFloatingTypeToFloat4(BYTE4(a4), (float *)(a3 + v85 * BYTE5(a4)), v39, v40, v41);
            v33 = v63;
            v32 = v64;
          }
          v42 = v91;
          v91[2] = vminq_f32(vminq_f32(vminq_f32(v91[2], v32), v33), v35);
          v43 = v87;
          v87[2] = vmaxq_f32(vmaxq_f32(vmaxq_f32(v87[2], v32), v33), v35);
          v44 = *((_DWORD *)v81 + 6) + 1;
          *((_DWORD *)v81 + 6) = v44;
          if (v44 > 0x1F || (v45 = *((_DWORD *)a2 + 2), v25 >= v45 - 1))
          {
            v46 = *(_QWORD *)(a1 + 208);
            v47 = *((unsigned int *)v77 + 6);
            *((_DWORD *)v77 + 6) = v47 + 1;
            v48 = (float32x4_t *)(v46 + 32 * v47);
            v49 = v42[2];
            v50 = v43[2];
            v51.i64[0] = 0x3F0000003F000000;
            v51.i64[1] = 0x3F0000003F000000;
            v52 = vmulq_f32(vaddq_f32(v49, v50), v51);
            v52.i32[3] = 1.0;
            v53 = vmulq_f32(vsubq_f32(v50, v49), v51);
            v53.i32[3] = 0;
            *v48 = v52;
            v48[1] = v53;
            v91[2] = (float32x4_t)v62;
            v53.i64[0] = 0x80000000800000;
            v53.i64[1] = 0x80000000800000;
            v87[2] = v53;
            *((_DWORD *)v81 + 6) = 0;
            v45 = *((_DWORD *)a2 + 2);
          }
          ++v25;
        }
        while (v25 < v45);
      }
    }
    if (*((_DWORD *)v77 + 6) != *(_DWORD *)(a1 + 216))
    {
      v54 = scn_default_log();
      if (os_log_type_enabled(v54, OS_LOG_TYPE_FAULT))
        C3DMeshElementGetPrimitiveGroupBoundingBoxes_cold_1(v54, v55, v56, v57, v58, v59, v60, v61);
    }
    _Block_object_dispose(&v76, 8);
    _Block_object_dispose(&v86, 8);
    _Block_object_dispose(&v90, 8);
    _Block_object_dispose(&v80, 8);
    result = *(_QWORD *)(a1 + 208);
LABEL_5:
    *a5 = *(_DWORD *)(a1 + 216);
    return result;
  }
  return 0;
}

void sub_1DCD51B14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v45;

  _Block_object_dispose(&a45, 8);
  _Block_object_dispose((const void *)(v45 - 208), 8);
  _Block_object_dispose((const void *)(v45 - 160), 8);
  _Block_object_dispose((const void *)(v45 - 256), 8);
  _Unwind_Resume(a1);
}

void C3DIndicesContentGetTriangleIndex_0(uint64_t *a1, uint64_t a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;

  v5 = *((unsigned __int8 *)a1 + 26);
  v6 = 3;
  if ((a2 & 1) != 0)
    v7 = 1;
  else
    v7 = 2;
  if ((a2 & 1) != 0)
    v8 = 2;
  else
    v8 = 1;
  v9 = v5 == 1 || v5 != 5;
  if (v5 != 1)
  {
    v7 = 2;
    v8 = 1;
  }
  v10 = v5 == 0;
  if (*((_BYTE *)a1 + 26))
    v11 = v9;
  else
    v11 = 3;
  if (*((_BYTE *)a1 + 26))
  {
    v6 = 1;
    v12 = v7;
  }
  else
  {
    v12 = 2;
  }
  if (v10)
    v13 = 1;
  else
    v13 = v8;
  v14 = *a1;
  if (!*a1)
  {
    *a3 = v11 * a2;
    *a4 = v13 + v6 * a2;
    v20 = v6 * a2 + v12;
    goto LABEL_29;
  }
  v16 = (unsigned __int8 *)a1 + 27;
  v15 = *((unsigned __int8 *)a1 + 27);
  switch(v15)
  {
    case 4:
      v21 = a1[5];
      v22 = a1[6];
      *a3 = *(_DWORD *)(v14 + 4 * (v21 + v11 * a2 * v22));
      v23 = v6 * a2;
      *a4 = *(_DWORD *)(v14 + 4 * (v21 + v22 * (v13 + v23)));
      v20 = *(_DWORD *)(v14 + 4 * (v21 + v22 * (v23 + v12)));
      goto LABEL_29;
    case 2:
      v24 = a1[5];
      v25 = a1[6];
      *a3 = *(unsigned __int16 *)(v14 + 2 * (v24 + v11 * a2 * v25));
      v26 = v6 * a2;
      *a4 = *(unsigned __int16 *)(v14 + 2 * (v24 + v25 * (v13 + v26)));
      v20 = *(unsigned __int16 *)(v14 + 2 * (v24 + v25 * (v26 + v12)));
      goto LABEL_29;
    case 1:
      v17 = a1[5];
      v18 = a1[6];
      *a3 = *(unsigned __int8 *)(v14 + v17 + v11 * a2 * v18);
      v19 = v6 * a2;
      *a4 = *(unsigned __int8 *)(v14 + v17 + v18 * (v13 + v19));
      v20 = *(unsigned __int8 *)(v14 + v17 + v18 * (v19 + v12));
LABEL_29:
      *a5 = v20;
      return;
  }
  *a3 = 0;
  *a4 = 0;
  *a5 = 0;
  v27 = scn_default_log();
  if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    C3DIndicesContentGetTriangleIndex_cold_1_0(v16, v27);
}

BOOL __ProcessTriangleRange_Generic(unsigned int a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  int v5;
  __int128 v6;
  _BOOL4 v7;
  BOOL v8;
  int v9;
  int v10;
  __int128 v11;
  unsigned int v12;
  float v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  float32x4_t v18;
  float v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  float32x4_t v23;
  float32x4_t v24;
  uint64_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float v28;
  float v29;
  float32x4_t v30;
  float v31;
  float v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  int32x4_t v38;
  float32x2_t v39;
  float32x4_t v40;
  float32x4_t v41;
  int8x16_t v42;
  float v43;
  int8x16_t v44;
  float v45;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  uint32x4_t v50;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float v56;
  float32x4_t v57;
  __n128 v58;
  unint64_t v59;
  float32x4_t v60;
  _OWORD v61[3];
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a3 + 200);
  v4 = *(unsigned __int8 *)(a3 + 212);
  v5 = *(unsigned __int8 *)(a3 + 213);
  v6 = *(_OWORD *)(a3 + 232);
  v63 = *(_OWORD *)(a3 + 216);
  v64 = v6;
  v65 = *(_OWORD *)(a3 + 248);
  v66 = *(_QWORD *)(a3 + 264);
  v7 = (*(_BYTE *)(a3 + 8) & 8) != 0 && *(_BYTE *)(a3 + 272) == 0;
  v8 = 0;
  v9 = *(unsigned __int8 *)(a3 + 214);
  v10 = *(unsigned __int8 *)(a3 + 273);
  v54 = *(float32x4_t *)(a3 + 64);
  v60 = *(float32x4_t *)(a3 + 80);
  v11 = *(_OWORD *)(a3 + 96);
  v68 = 0;
  v67 = 0;
  v12 = a2 - a1;
  if (a2 > a1)
  {
    v13 = *((float *)&v11 + 3);
    v14 = a1;
    v59 = a2;
    v8 = 1;
    do
    {
      v61[0] = v63;
      v61[1] = v64;
      v61[2] = v65;
      v62 = v66;
      if (v10)
      {
        v15 = &v67;
        v16 = v14;
        v17 = (uint64_t *)((char *)&v67 + 4);
      }
      else
      {
        v17 = &v67;
        v16 = v14;
        v15 = (uint64_t *)((char *)&v67 + 4);
      }
      C3DIndicesContentGetTriangleIndex_0((uint64_t *)v61, v16, v17, v15, &v68);
      v21 = v3 + (v67 * v5);
      if (v9 == 1)
      {
        v23.i64[0] = *(_QWORD *)v21;
        v22 = v3 + (HIDWORD(v67) * v5);
        v24.i64[0] = *(_QWORD *)v22;
        v23.i64[1] = *(unsigned int *)(v21 + 8);
        v24.i64[1] = *(unsigned int *)(v22 + 8);
        v25 = v3 + (v68 * v5);
        v26.i64[0] = *(_QWORD *)v25;
        v26.i64[1] = *(unsigned int *)(v25 + 8);
      }
      else
      {
        *(double *)v27.i64 = C3DConvertFloatingTypeToFloat4(v4, (float *)v21, v18, v19, v20);
        v57 = v27;
        *(double *)v30.i64 = C3DConvertFloatingTypeToFloat4(v4, (float *)(v3 + (HIDWORD(v67) * v5)), v27, v28, v29);
        v55 = v30;
        *(double *)v33.i64 = C3DConvertFloatingTypeToFloat4(v4, (float *)(v3 + (v68 * v5)), v30, v31, v32);
        v24 = v55;
        v23 = v57;
        v26 = v33;
      }
      v34 = vsubq_f32(v24, v23);
      v35 = vsubq_f32(v26, v23);
      v36 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v35, (int32x4_t)v35), (int8x16_t)v35, 0xCuLL), vnegq_f32(v34)), v35, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v34, (int32x4_t)v34), (int8x16_t)v34, 0xCuLL));
      v37 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v36, (int32x4_t)v36), (int8x16_t)v36, 0xCuLL);
      v38 = (int32x4_t)vmulq_f32(v36, v36);
      v38.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v38.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v38, 2), *(float32x2_t *)v38.i8)).u32[0];
      v39 = vrsqrte_f32((float32x2_t)v38.u32[0]);
      v41 = vmulq_n_f32(v37, vmul_f32(v39, vrsqrts_f32((float32x2_t)v38.u32[0], vmul_f32(v39, v39))).f32[0]);
      v40 = vmulq_f32(v23, v41);
      v41.f32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v40, 2), vaddq_f32(v40, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v40.f32, 1))).f32[0];
      v42 = (int8x16_t)vmulq_f32(v60, v41);
      v43 = vaddv_f32(vadd_f32(*(float32x2_t *)v42.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v42, v42, 8uLL)));
      if (v7)
      {
        if (v43 >= 0.0)
          goto LABEL_23;
      }
      else if (v43 == 0.0)
      {
        goto LABEL_23;
      }
      v44 = (int8x16_t)vmulq_f32(v54, v41);
      v45 = (float)-vaddv_f32(vadd_f32(*(float32x2_t *)v44.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v44, v44, 8uLL))) / v43;
      if (v45 >= 0.0 && v45 <= v13)
      {
        v56 = v45;
        v58 = (__n128)v41;
        v53 = vmlaq_n_f32(v54, v60, v45);
        *(double *)v47.i64 = scn_triangle_barycentric_coordinates(v23, v24, v26, v53);
        v48.i64[0] = 0xBF000000BF000000;
        v48.i64[1] = 0xBF000000BF000000;
        v49 = vabsq_f32(vaddq_f32(v47, v48));
        v48.i64[0] = 0x3F0000003F000000;
        v48.i64[1] = 0x3F0000003F000000;
        v50 = (uint32x4_t)vcgeq_f32(v48, v49);
        v50.i32[3] = v50.i32[2];
        if ((vminvq_u32(v50) & 0x80000000) != 0)
        {
          __AddLocalResult(a3, v14, 0, 1, 2, v56, v53, v58);
          if ((*(_WORD *)(a3 + 8) & 0x80) != 0)
            return v8;
        }
      }
LABEL_23:
      v8 = ++v14 < v59;
      --v12;
    }
    while (v12);
  }
  return v8;
}

uint64_t __ProcessPrimitiveRange_Generic(unsigned int a1, int a2, uint64_t a3)
{
  uint64_t v3;
  char v4;
  int v5;
  BOOL v6;
  BOOL v7;
  char v8;
  __int128 v9;
  __int128 v11;
  _QWORD *v12;
  __int16 v13;
  _OWORD v14[2];
  _QWORD v15[4];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char v23;
  BOOL v24;
  char v25;
  BOOL v26;
  _QWORD v27[3];
  char v28;
  _QWORD v29[2];

  v3 = *(_QWORD *)(a3 + 200);
  v4 = *(_BYTE *)(a3 + 212);
  v5 = *(unsigned __int8 *)(a3 + 213);
  v29[0] = a1;
  v29[1] = a2 - a1;
  v6 = *(_BYTE *)(a3 + 214) == 1;
  v7 = (*(_BYTE *)(a3 + 8) & 8) != 0 && *(_BYTE *)(a3 + 272) == 0;
  v8 = *(_BYTE *)(a3 + 273);
  v9 = *(_OWORD *)(a3 + 80);
  v16 = *(_OWORD *)(a3 + 64);
  v17 = v9;
  v18 = *(_OWORD *)(a3 + 96);
  v27[0] = 0;
  v27[1] = v27;
  v27[2] = 0x2020000000;
  v28 = 0;
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = ____ProcessPrimitiveRange_Generic_block_invoke;
  v15[3] = &unk_1EA59E350;
  v23 = v8;
  v24 = v6;
  v22 = v5;
  v25 = v4;
  v26 = v7;
  v20 = v3;
  v21 = a3;
  v19 = v27;
  v11 = *(_OWORD *)(a3 + 216);
  v12 = v29;
  v13 = 1;
  v14[0] = *(_OWORD *)(a3 + 242);
  *(_OWORD *)((char *)v14 + 14) = *(_OWORD *)(a3 + 256);
  C3DIndicesContentEnumeratePrimitivesByEvaluatingPrimitiveRanges((uint64_t)&v11, (uint64_t)v15, *(__n128 *)((char *)v14 + 14));
  _Block_object_dispose(v27, 8);
  return 0;
}

void sub_1DCD5233C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

BOOL __ProcessTriangleRange_Mask(unsigned int a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  __int128 v6;
  _BOOL4 v7;
  BOOL v8;
  int v9;
  __int128 v10;
  unsigned int v11;
  float v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  float32x4_t v17;
  float v18;
  float v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  float32x4_t v23;
  uint64_t v24;
  float32x4_t v25;
  uint64_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float v29;
  float v30;
  float32x4_t v31;
  float v32;
  float v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  int32x4_t v39;
  float32x2_t v40;
  float32x4_t v41;
  float32x4_t v42;
  int8x16_t v43;
  float v44;
  int8x16_t v45;
  float v46;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  uint32x4_t v51;
  float32x4_t v53;
  int v55;
  float32x4_t v56;
  float32x4_t v57;
  float v58;
  float32x4_t v59;
  __n128 v60;
  float32x4_t v61;
  unint64_t v62;
  int v63;
  _OWORD v64[3];
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;

  v3 = a3;
  v72 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a3 + 200);
  v55 = *(unsigned __int8 *)(a3 + 212);
  v5 = *(unsigned __int8 *)(a3 + 213);
  v6 = *(_OWORD *)(a3 + 232);
  v66 = *(_OWORD *)(a3 + 216);
  v67 = v6;
  v68 = *(_OWORD *)(a3 + 248);
  v69 = *(_QWORD *)(a3 + 264);
  v7 = (*(_BYTE *)(a3 + 8) & 8) != 0 && *(_BYTE *)(a3 + 272) == 0;
  v8 = 0;
  v9 = *(unsigned __int8 *)(a3 + 214);
  v63 = *(unsigned __int8 *)(a3 + 273);
  v56 = *(float32x4_t *)(a3 + 64);
  v61 = *(float32x4_t *)(a3 + 80);
  v10 = *(_OWORD *)(a3 + 96);
  v71 = 0;
  v70 = 0;
  v11 = a2 - a1;
  if (a2 > a1)
  {
    v12 = *((float *)&v10 + 3);
    v13 = a1;
    v62 = a2;
    v8 = 1;
    do
    {
      v64[0] = v66;
      v64[1] = v67;
      v64[2] = v68;
      v65 = v69;
      if (v63)
      {
        v14 = &v70;
        v15 = v13;
        v16 = (uint64_t *)((char *)&v70 + 4);
      }
      else
      {
        v16 = &v70;
        v15 = v13;
        v14 = (uint64_t *)((char *)&v70 + 4);
      }
      C3DIndicesContentGetTriangleIndex_0((uint64_t *)v64, v15, v16, v14, &v71);
      v20 = HIDWORD(v70);
      v21 = v71;
      if (((*(_BYTE *)(*(_QWORD *)(v3 + 304) + HIDWORD(v70)) & *(_BYTE *)(*(_QWORD *)(v3 + 304)
                                                                                          + v70)) & *(_BYTE *)(*(_QWORD *)(v3 + 304) + v71)) != 0)
        goto LABEL_10;
      v22 = v4 + (v70 * v5);
      if (v9 == 1)
      {
        v23.i64[0] = *(_QWORD *)v22;
        v23.i64[1] = *(unsigned int *)(v22 + 8);
        v24 = v4 + (HIDWORD(v70) * v5);
        v25.i64[0] = *(_QWORD *)v24;
        v25.i64[1] = *(unsigned int *)(v24 + 8);
        v26 = v4 + v71 * v5;
        v27.i64[0] = *(_QWORD *)v26;
        v27.i64[1] = *(unsigned int *)(v26 + 8);
      }
      else
      {
        *(double *)v28.i64 = C3DConvertFloatingTypeToFloat4(v55, (float *)v22, v17, v18, v19);
        v59 = v28;
        *(double *)v31.i64 = C3DConvertFloatingTypeToFloat4(v55, (float *)(v4 + (v20 * v5)), v28, v29, v30);
        v57 = v31;
        v3 = a3;
        *(double *)v34.i64 = C3DConvertFloatingTypeToFloat4(v55, (float *)(v4 + v21 * v5), v31, v32, v33);
        v25 = v57;
        v23 = v59;
        v27 = v34;
      }
      v35 = vsubq_f32(v25, v23);
      v36 = vsubq_f32(v27, v23);
      v37 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v36, (int32x4_t)v36), (int8x16_t)v36, 0xCuLL), vnegq_f32(v35)), v36, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v35, (int32x4_t)v35), (int8x16_t)v35, 0xCuLL));
      v38 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v37, (int32x4_t)v37), (int8x16_t)v37, 0xCuLL);
      v39 = (int32x4_t)vmulq_f32(v37, v37);
      v39.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v39.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v39, 2), *(float32x2_t *)v39.i8)).u32[0];
      v40 = vrsqrte_f32((float32x2_t)v39.u32[0]);
      v42 = vmulq_n_f32(v38, vmul_f32(v40, vrsqrts_f32((float32x2_t)v39.u32[0], vmul_f32(v40, v40))).f32[0]);
      v41 = vmulq_f32(v23, v42);
      v42.f32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v41, 2), vaddq_f32(v41, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v41.f32, 1))).f32[0];
      v43 = (int8x16_t)vmulq_f32(v61, v42);
      v44 = vaddv_f32(vadd_f32(*(float32x2_t *)v43.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v43, v43, 8uLL)));
      if (v7)
      {
        if (v44 >= 0.0)
          goto LABEL_10;
      }
      else if (v44 == 0.0)
      {
        goto LABEL_10;
      }
      v45 = (int8x16_t)vmulq_f32(v56, v42);
      v46 = (float)-vaddv_f32(vadd_f32(*(float32x2_t *)v45.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v45, v45, 8uLL))) / v44;
      if (v46 >= 0.0 && v46 <= v12)
      {
        v58 = v46;
        v60 = (__n128)v42;
        v53 = vmlaq_n_f32(v56, v61, v46);
        *(double *)v48.i64 = scn_triangle_barycentric_coordinates(v23, v25, v27, v53);
        v49.i64[0] = 0xBF000000BF000000;
        v49.i64[1] = 0xBF000000BF000000;
        v50 = vabsq_f32(vaddq_f32(v48, v49));
        v49.i64[0] = 0x3F0000003F000000;
        v49.i64[1] = 0x3F0000003F000000;
        v51 = (uint32x4_t)vcgeq_f32(v49, v50);
        v51.i32[3] = v51.i32[2];
        if ((vminvq_u32(v51) & 0x80000000) != 0)
        {
          __AddLocalResult(v3, v13, 0, 1, 2, v58, v53, v60);
          if ((*(_WORD *)(v3 + 8) & 0x80) != 0)
            return v8;
        }
      }
LABEL_10:
      v8 = ++v13 < v62;
      --v11;
    }
    while (v11);
  }
  return v8;
}

uint64_t __ProcessPrimitiveRange_Mask(unsigned int a1, int a2, uint64_t a3)
{
  uint64_t v3;
  char v4;
  int v5;
  BOOL v6;
  BOOL v7;
  char v8;
  __int128 v9;
  __int128 v11;
  _QWORD *v12;
  __int16 v13;
  _OWORD v14[2];
  _QWORD v15[4];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char v23;
  BOOL v24;
  char v25;
  BOOL v26;
  _QWORD v27[3];
  char v28;
  _QWORD v29[2];

  v3 = *(_QWORD *)(a3 + 200);
  v4 = *(_BYTE *)(a3 + 212);
  v5 = *(unsigned __int8 *)(a3 + 213);
  v29[0] = a1;
  v29[1] = a2 - a1;
  v6 = *(_BYTE *)(a3 + 214) == 1;
  v7 = (*(_BYTE *)(a3 + 8) & 8) != 0 && *(_BYTE *)(a3 + 272) == 0;
  v8 = *(_BYTE *)(a3 + 273);
  v9 = *(_OWORD *)(a3 + 80);
  v16 = *(_OWORD *)(a3 + 64);
  v17 = v9;
  v18 = *(_OWORD *)(a3 + 96);
  v27[0] = 0;
  v27[1] = v27;
  v27[2] = 0x2020000000;
  v28 = 0;
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = ____ProcessPrimitiveRange_Mask_block_invoke;
  v15[3] = &unk_1EA59E350;
  v23 = v8;
  v24 = v6;
  v20 = a3;
  v21 = v3;
  v22 = v5;
  v25 = v4;
  v26 = v7;
  v19 = v27;
  v11 = *(_OWORD *)(a3 + 216);
  v12 = v29;
  v13 = 1;
  v14[0] = *(_OWORD *)(a3 + 242);
  *(_OWORD *)((char *)v14 + 14) = *(_OWORD *)(a3 + 256);
  C3DIndicesContentEnumeratePrimitivesByEvaluatingPrimitiveRanges((uint64_t)&v11, (uint64_t)v15, *(__n128 *)((char *)v14 + 14));
  _Block_object_dispose(v27, 8);
  return 0;
}

void sub_1DCD52A80(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

BOOL __ProcessTriangleRange_Mask_Ind16VrtFloat3CullBack(unsigned int a1, unsigned int a2, uint64_t a3, int32x4_t a4, float32x4_t a5, float32x4_t a6)
{
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int32x4_t v31;
  float32x2_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  int8x16_t v36;
  float v37;
  float32x4_t v38;
  int8x16_t v39;
  float v40;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float v46;
  float32x4_t v47;
  __n128 v48;

  v9 = *(_QWORD *)(a3 + 200);
  v10 = *(unsigned __int8 *)(a3 + 213);
  v11 = *(_QWORD *)(a3 + 216);
  if (*(_QWORD *)(a3 + 256) || *(_QWORD *)(a3 + 264) != 1)
  {
    v12 = scn_default_log();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
      __ProcessTriangleRange_Mask_Ind16VrtFloat3CullBack_cold_1(v12, v13, v14, v15, v16, v17, v18, v19);
  }
  v20 = a2 - a1;
  if (a2 <= a1)
  {
    return 0;
  }
  else
  {
    v21 = a1;
    v22 = 1;
    v23 = 3 * a1;
    do
    {
      if (((*(_BYTE *)(*(_QWORD *)(a3 + 304) + *(unsigned __int16 *)(v11 + 2 * (v23 + 1))) & *(_BYTE *)(*(_QWORD *)(a3 + 304) + *(unsigned __int16 *)(v11 + 2 * v23))) & *(_BYTE *)(*(_QWORD *)(a3 + 304) + *(unsigned __int16 *)(v11 + 2 * (v23 + 2)))) == 0)
      {
        v24 = v9 + *(unsigned __int16 *)(v11 + 2 * v23) * (unint64_t)v10;
        a4.i64[0] = *(_QWORD *)v24;
        a4.i32[2] = *(_DWORD *)(v24 + 8);
        v25 = v9 + *(unsigned __int16 *)(v11 + 2 * (v23 + 1)) * (unint64_t)v10;
        a5.i64[0] = *(_QWORD *)v25;
        a5.i32[2] = *(_DWORD *)(v25 + 8);
        v26 = v9 + *(unsigned __int16 *)(v11 + 2 * (v23 + 2)) * (unint64_t)v10;
        a6.i64[0] = *(_QWORD *)v26;
        a6.i32[2] = *(_DWORD *)(v26 + 8);
        v27 = vsubq_f32(a5, (float32x4_t)a4);
        v28 = vsubq_f32(a6, (float32x4_t)a4);
        v29 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v28, (int32x4_t)v28), (int8x16_t)v28, 0xCuLL), vnegq_f32(v27)), v28, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v27, (int32x4_t)v27), (int8x16_t)v27, 0xCuLL));
        v30 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v29, (int32x4_t)v29), (int8x16_t)v29, 0xCuLL);
        v31 = (int32x4_t)vmulq_f32(v29, v29);
        v31.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v31.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v31, 2), *(float32x2_t *)v31.i8)).u32[0];
        v32 = vrsqrte_f32((float32x2_t)v31.u32[0]);
        v34 = vmulq_n_f32(v30, vmul_f32(v32, vrsqrts_f32((float32x2_t)v31.u32[0], vmul_f32(v32, v32))).f32[0]);
        v33 = vmulq_f32((float32x4_t)a4, v34);
        v34.f32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v33, 2), vaddq_f32(v33, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v33.f32, 1))).f32[0];
        v35 = *(float32x4_t *)(a3 + 80);
        v36 = (int8x16_t)vmulq_f32(v35, v34);
        v37 = vaddv_f32(vadd_f32(*(float32x2_t *)v36.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v36, v36, 8uLL)));
        if (v37 < 0.0)
        {
          v38 = *(float32x4_t *)(a3 + 64);
          v39 = (int8x16_t)vmulq_f32(v38, v34);
          v40 = (float)-vaddv_f32(vadd_f32(*(float32x2_t *)v39.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v39, v39, 8uLL)))
              / v37;
          if (v40 >= 0.0 && v40 <= *(float *)(a3 + 108))
          {
            v47 = vmlaq_n_f32(v38, v35, v40);
            v48 = (__n128)v34;
            v46 = v40;
            *(double *)v42.i64 = scn_triangle_barycentric_coordinates((float32x4_t)a4, a5, a6, v47);
            a6.i32[3] = v48.n128_i32[3];
            v43.i64[0] = 0xBF000000BF000000;
            v43.i64[1] = 0xBF000000BF000000;
            v44 = vabsq_f32(vaddq_f32(v42, v43));
            a5.i64[0] = 0x3F0000003F000000;
            a5.i64[1] = 0x3F0000003F000000;
            a4 = vcgeq_f32(a5, v44);
            a4.i32[3] = a4.i32[2];
            if ((vminvq_u32((uint32x4_t)a4) & 0x80000000) != 0)
            {
              __AddLocalResult(a3, v21, 0, 1, 2, v46, v47, v48);
              if ((*(_WORD *)(a3 + 8) & 0x80) != 0)
                break;
            }
          }
        }
      }
      v22 = ++v21 < (unint64_t)a2;
      v23 += 3;
      --v20;
    }
    while (v20);
  }
  return v22;
}

BOOL __ProcessTriangleRange_Ind16VrtFloat3CullBack(unsigned int a1, unsigned int a2, uint64_t a3, int32x4_t a4, float32x4_t a5, float32x4_t a6)
{
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  BOOL v22;
  unsigned int v23;
  unsigned __int16 v24;
  unsigned __int16 v25;
  unsigned __int16 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  int32x4_t v34;
  float32x2_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  int8x16_t v39;
  float v40;
  float32x4_t v41;
  int8x16_t v42;
  float v43;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float v49;
  float32x4_t v50;
  __n128 v51;

  v9 = *(_QWORD *)(a3 + 200);
  v10 = *(unsigned __int8 *)(a3 + 213);
  v11 = *(_QWORD *)(a3 + 216);
  if (*(_QWORD *)(a3 + 256) || *(_QWORD *)(a3 + 264) != 1)
  {
    v12 = scn_default_log();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
      __ProcessTriangleRange_Ind16VrtFloat3CullBack_cold_1(v12, v13, v14, v15, v16, v17, v18, v19);
  }
  v20 = a2 - a1;
  if (a2 <= a1)
  {
    return 0;
  }
  else
  {
    v21 = a1;
    v22 = 1;
    v23 = 3 * a1;
    do
    {
      if (v11)
      {
        v24 = *(_WORD *)(v11 + 2 * v23);
        v25 = *(_WORD *)(v11 + 2 * (v23 + 1));
        v26 = *(_WORD *)(v11 + 2 * (v23 + 2));
      }
      else
      {
        v25 = v23 + 1;
        v26 = v23 + 2;
        v24 = v23;
      }
      v27 = v9 + v10 * (unint64_t)v24;
      a4.i64[0] = *(_QWORD *)v27;
      a4.i32[2] = *(_DWORD *)(v27 + 8);
      v28 = v9 + v10 * (unint64_t)v25;
      a5.i64[0] = *(_QWORD *)v28;
      a5.i32[2] = *(_DWORD *)(v28 + 8);
      v29 = v9 + v10 * (unint64_t)v26;
      a6.i64[0] = *(_QWORD *)v29;
      a6.i32[2] = *(_DWORD *)(v29 + 8);
      v30 = vsubq_f32(a5, (float32x4_t)a4);
      v31 = vsubq_f32(a6, (float32x4_t)a4);
      v32 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v31, (int32x4_t)v31), (int8x16_t)v31, 0xCuLL), vnegq_f32(v30)), v31, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v30, (int32x4_t)v30), (int8x16_t)v30, 0xCuLL));
      v33 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v32, (int32x4_t)v32), (int8x16_t)v32, 0xCuLL);
      v34 = (int32x4_t)vmulq_f32(v32, v32);
      v34.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v34.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v34, 2), *(float32x2_t *)v34.i8)).u32[0];
      v35 = vrsqrte_f32((float32x2_t)v34.u32[0]);
      v37 = vmulq_n_f32(v33, vmul_f32(v35, vrsqrts_f32((float32x2_t)v34.u32[0], vmul_f32(v35, v35))).f32[0]);
      v36 = vmulq_f32((float32x4_t)a4, v37);
      v37.f32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v36, 2), vaddq_f32(v36, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v36.f32, 1))).f32[0];
      v38 = *(float32x4_t *)(a3 + 80);
      v39 = (int8x16_t)vmulq_f32(v38, v37);
      v40 = vaddv_f32(vadd_f32(*(float32x2_t *)v39.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v39, v39, 8uLL)));
      if (v40 < 0.0)
      {
        v41 = *(float32x4_t *)(a3 + 64);
        v42 = (int8x16_t)vmulq_f32(v41, v37);
        v43 = (float)-vaddv_f32(vadd_f32(*(float32x2_t *)v42.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v42, v42, 8uLL)))
            / v40;
        if (v43 >= 0.0 && v43 <= *(float *)(a3 + 108))
        {
          v50 = vmlaq_n_f32(v41, v38, v43);
          v51 = (__n128)v37;
          v49 = v43;
          *(double *)v45.i64 = scn_triangle_barycentric_coordinates((float32x4_t)a4, a5, a6, v50);
          a6.i32[3] = v51.n128_i32[3];
          v46.i64[0] = 0xBF000000BF000000;
          v46.i64[1] = 0xBF000000BF000000;
          v47 = vabsq_f32(vaddq_f32(v45, v46));
          a5.i64[0] = 0x3F0000003F000000;
          a5.i64[1] = 0x3F0000003F000000;
          a4 = vcgeq_f32(a5, v47);
          a4.i32[3] = a4.i32[2];
          if ((vminvq_u32((uint32x4_t)a4) & 0x80000000) != 0)
          {
            __AddLocalResult(a3, v21, 0, 1, 2, v49, v50, v51);
            if ((*(_WORD *)(a3 + 8) & 0x80) != 0)
              break;
          }
        }
      }
      v22 = ++v21 < (unint64_t)a2;
      v23 += 3;
      --v20;
    }
    while (v20);
  }
  return v22;
}

BOOL __ProcessSkinnedGeometryForJointIndex(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  const __CFArray *MaterialsCount;
  uint64_t Mesh;
  const void *PositionSource;
  uint64_t Content;
  uint64_t v12;
  uint64_t IndexedBoneIndices;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  __int128 v23;
  const __CFArray *ElementsCount;
  int16x8_t v25;
  CFIndex v26;
  BOOL v27;
  const void *ElementAtIndex;
  const __CFArray *MaterialAtIndex;
  char IsDoubleSided;
  int CullMode;
  __int128 v32;
  int v33;
  __n128 v35;
  int32x4_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t ChannelForSourceWithSemanticAtIndex;
  _OWORD v42[3];
  uint64_t v43;
  _QWORD v44[4];
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  CFIndex v62;
  uint64_t v63;
  int v64;
  unsigned __int32 v65;
  BOOL v66;
  char v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  char v71;
  _QWORD v72[3];
  int v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  _QWORD v81[4];
  __int128 v82;
  _QWORD v83[4];
  int32x4_t v84;
  char v85;
  char v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  MaterialsCount = C3DGeometryGetMaterialsCount(a2);
  Mesh = C3DGeometryGetMesh(a2);
  PositionSource = C3DMeshGetPositionSource(Mesh, 0);
  ChannelForSourceWithSemanticAtIndex = C3DMeshGetChannelForSourceWithSemanticAtIndex(Mesh, 0, 0);
  Content = C3DMeshSourceGetContent((uint64_t)PositionSource);
  v40 = v12;
  v38 = Content;
  if (!Content)
    return 0;
  IndexedBoneIndices = C3DSkinGetIndexedBoneIndices(a1);
  if (!IndexedBoneIndices)
  {
    v14 = scn_default_log();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
      __ProcessSkinnedGeometryForJointIndex_cold_1(v14, v15, v16, v17, v18, v19, v20, v21);
  }
  v37 = C3DMeshSourceGetContent(IndexedBoneIndices);
  v39 = v22;
  if (HIWORD(v22) == 1040
    && (v23 = *(_OWORD *)(a4 + 80),
        v78 = *(_OWORD *)(a4 + 64),
        v79 = v23,
        v80 = *(_OWORD *)(a4 + 96),
        ElementsCount = C3DMeshGetElementsCount(Mesh),
        (uint64_t)ElementsCount >= 1))
  {
    v26 = 0;
    *(int16x4_t *)v25.i8 = vdup_n_s16(a3);
    v27 = 1;
    v36 = vdupq_n_s32(0x7F7FFFFFu);
    *(int8x8_t *)v25.i8 = vmovn_s16(v25);
    v35 = (__n128)v25;
    do
    {
      *(_QWORD *)(a4 + 192) = v26;
      ElementAtIndex = C3DMeshGetElementAtIndex(Mesh, v26, 0);
      v77 = 0;
      v75 = 0u;
      v76 = 0u;
      v74 = 0u;
      C3DMeshElementGetContent((uint64_t)ElementAtIndex, ChannelForSourceWithSemanticAtIndex, (uint64_t)&v74);
      if ((((uint64_t)MaterialsCount > 0) & (*(unsigned __int16 *)(a4 + 8) >> 3)) == 1)
      {
        MaterialAtIndex = C3DGeometryGetMaterialAtIndex(a2, v26 % (uint64_t)MaterialsCount);
        IsDoubleSided = C3DMaterialIsDoubleSided((uint64_t)MaterialAtIndex);
        CullMode = C3DMaterialGetCullMode((uint64_t)MaterialAtIndex);
      }
      else
      {
        IsDoubleSided = 0;
        CullMode = 0;
      }
      if ((BYTE10(v75) & 0xFA) == 0)
      {
        v59 = v75;
        v60 = v76;
        v58 = v74;
        v46 = v79;
        v47 = v80;
        v45 = v78;
        v64 = CullMode;
        v61 = v77;
        v72[0] = 0;
        v72[1] = v72;
        v72[2] = 0x2020000000;
        v73 = 0;
        v83[0] = 0;
        v83[1] = v83;
        v83[2] = 0x3020000000;
        v84 = v36;
        v81[0] = 0;
        v81[1] = v81;
        v81[2] = 0x3020000000;
        *(_QWORD *)&v32 = 0x80000000800000;
        *((_QWORD *)&v32 + 1) = 0x80000000800000;
        v82 = v32;
        v68 = 0;
        v69 = &v68;
        v70 = 0x2020000000;
        v71 = 0;
        v44[0] = MEMORY[0x1E0C809B0];
        v44[1] = 3221225472;
        v44[2] = ____ProcessSkinnedGeometryForJointIndex_block_invoke;
        v44[3] = &unk_1EA59E378;
        v52 = v37;
        v53 = v39;
        v65 = v35.n128_u32[0];
        v66 = (v40 & 0xFF000000000000) == 0x1000000000000;
        v54 = v38;
        v55 = v40;
        v48 = v83;
        v49 = v81;
        v56 = &v86;
        v57 = &v85;
        v67 = IsDoubleSided;
        v62 = v26;
        v63 = a4;
        v50 = v72;
        v51 = &v68;
        v42[0] = v74;
        v42[1] = v75;
        v42[2] = v76;
        v43 = v77;
        C3DIndicesContentEnumerateTriangulatedPrimitives((uint64_t *)v42, (uint64_t)v44, v35);
        v33 = *((unsigned __int8 *)v69 + 24);
        _Block_object_dispose(&v68, 8);
        _Block_object_dispose(v81, 8);
        _Block_object_dispose(v83, 8);
        _Block_object_dispose(v72, 8);
        if (v33)
          break;
      }
      v27 = ++v26 < (uint64_t)ElementsCount;
    }
    while (ElementsCount != (const __CFArray *)v26);
  }
  else
  {
    return 0;
  }
  return v27;
}

void sub_1DCD5355C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  char a65;

  _Block_object_dispose(&a61, 8);
  _Block_object_dispose(&STACK[0x250], 8);
  _Block_object_dispose(&STACK[0x280], 8);
  _Block_object_dispose(&a65, 8);
  _Unwind_Resume(a1);
}

uint64_t __ProcessSkinner(uint64_t a1, uint64_t a2)
{
  uint64_t JointBoundingBoxes;
  uint64_t OverrideMaterial;
  uint64_t Geometry;
  uint64_t v7;
  uint64_t IOSurface;
  const __CFArray *Joints;
  const __CFArray *v10;
  CFIndex Count;
  CFIndex v12;
  char v13;
  CFIndex v14;
  float32x4_t *v15;
  float32x4_t *ValueAtIndex;
  float32x4_t *WorldMatrix;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  int8x16_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float v29;
  float32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  int8x16_t v47;
  float32x4_t v48;
  float v49;
  float v50;
  uint64_t v52;
  unsigned int v53;
  float v54;
  simd_float4 v55;
  int8x16_t v56;
  float v57;
  float v58;
  uint64_t v59;
  _OWORD *v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  uint64_t v71;
  float32x4_t *v72;
  CFTypeRef v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x2_t v76;
  float32x2_t v77;
  float32x4_t v78;
  float32x4_t v83;
  __int16 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  float32x4_t v88;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  simd_float4x4 v99;
  float32x4_t v100;
  _OWORD v101[5];
  simd_float4x4 v102;
  simd_float4x4 v103;

  JointBoundingBoxes = C3DSkinnerGetJointBoundingBoxes(a1, *(_QWORD *)(a2 + 112));
  OverrideMaterial = C3DGeometryGetOverrideMaterial(a1);
  Geometry = C3DNodeGetGeometry(*(_QWORD *)(a2 + 112));
  v7 = Geometry;
  if ((*(_WORD *)(a2 + 8) & 0x40) != 0 || Geometry)
  {
    IOSurface = C3DTextureGetIOSurface(OverrideMaterial);
    Joints = (const __CFArray *)C3DSkinnerGetJoints(a1);
    if (Joints)
    {
      v10 = Joints;
      Count = CFArrayGetCount(Joints);
      if (Count >= 1)
      {
        v12 = Count;
        v13 = 0;
        v14 = 0;
        while (1)
        {
          v15 = (float32x4_t *)(JointBoundingBoxes + 32 * v14);
          if ((vminvq_u32((uint32x4_t)vcgezq_f32(v15[1])) & 0x80000000) != 0)
          {
            v93 = *v15;
            v95 = v15[1];
            ValueAtIndex = (float32x4_t *)CFArrayGetValueAtIndex(v10, v14);
            *(_QWORD *)(a2 + 120) = ValueAtIndex;
            WorldMatrix = C3DNodeGetWorldMatrix(ValueAtIndex);
            v18 = *WorldMatrix;
            v19 = WorldMatrix[1];
            v20 = WorldMatrix[2];
            v21 = WorldMatrix[3];
            v22 = vaddq_f32(v21, vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v19, *(float32x2_t *)v93.f32, 1), *WorldMatrix, v93.f32[0]), v20, v93, 2));
            v23 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v20, (int32x4_t)v20), (int8x16_t)v20, 0xCuLL), vnegq_f32(v19)), v20, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v19, (int32x4_t)v19), (int8x16_t)v19, 0xCuLL));
            v24 = vmulq_f32(*WorldMatrix, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v23, (int32x4_t)v23), v23, 0xCuLL));
            _NF = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 2), vaddq_f32(v24, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.f32, 1))).f32[0] < 0.0;
            v25 = vmulq_f32(v18, v18);
            v28 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2), vaddq_f32(v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 1)));
            v26 = vmulq_f32(v19, v19);
            v28.f32[0] = sqrtf(v28.f32[0]);
            v27 = vmulq_f32(v20, v20);
            v28.i32[1] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v26, 2), vaddq_f32(v26, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 1))).f32[0]);
            v28.i32[2] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v27, 2), vaddq_f32(v27, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.f32, 1))).f32[0]);
            v29 = 1.0;
            if (_NF)
              v29 = -1.0;
            v30 = vmulq_n_f32(v28, v29);
            v31 = (int32x4_t)vdivq_f32(v18, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v30.f32, 0));
            v32 = (int32x4_t)vdivq_f32(v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v30.f32, 1));
            v33 = (int32x4_t)vdivq_f32(v20, (float32x4_t)vdupq_laneq_s32((int32x4_t)v30, 2));
            v34 = vmulq_f32(v95, v30);
            v35 = *(float32x4_t *)(a2 + 16);
            v36 = *(float32x4_t *)(a2 + 32);
            v37 = vsubq_f32(v22, v35);
            v38 = (float32x4_t)vzip1q_s32(vzip1q_s32(v31, v33), v32);
            v39 = (float32x4_t)vtrn2q_s32(v31, v32);
            v39.i32[2] = v33.i32[1];
            v40 = (float32x4_t)vzip1q_s32(vzip2q_s32(v31, v33), vdupq_laneq_s32(v32, 2));
            v41 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v39, *(float32x2_t *)v37.f32, 1), v38, v37.f32[0]), v40, v37, 2);
            v42 = vaddq_f32(v34, v41);
            v43 = vsubq_f32(v41, v34);
            v34.i32[3] = v95.i32[3];
            v99.columns[1] = (simd_float4)v31;
            v99.columns[2] = (simd_float4)v32;
            v99.columns[3] = (simd_float4)v33;
            v100 = v34;
            v44 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v39, *(float32x2_t *)v36.f32, 1), v38, v36.f32[0]), v40, v36, 2);
            v45 = vdivq_f32(v42, v44);
            v45.i32[3] = 0;
            v46 = vdivq_f32(v43, v44);
            v46.i32[3] = 0;
            v47 = (int8x16_t)vminnmq_f32(v45, v46);
            v48 = vmaxnmq_f32(v45, v46);
            if (*(float *)v47.i32 < *(float *)&v47.i32[2])
              v49 = *(float *)&v47.i32[2];
            else
              v49 = *(float *)v47.i32;
            if (v49 < *(float *)&v47.i32[1])
              v49 = *(float *)&v47.i32[1];
            v50 = v48.f32[2];
            if (v48.f32[0] <= v48.f32[2])
              v50 = v48.f32[0];
            v48.i32[0] = v48.i32[1];
            if (v50 <= v48.f32[1])
              v48.f32[0] = v50;
            if (v48.f32[0] >= v49)
            {
              _NF = v48.f32[0] >= 0.0 && v49 < *(float *)(a2 + 60);
              if (_NF)
              {
                LODWORD(v52) = 2 * (*(float *)v47.i32 <= *(float *)&v47.i32[2]);
                if (*(float *)&v47.i32[1] > *(float *)&v47.i32[2])
                  v53 = 1;
                else
                  v53 = 2;
                if (*(float *)v47.i32 <= *(float *)&v47.i32[1])
                  v52 = v53;
                else
                  v52 = v52;
                if (v49 >= 0.0)
                  v54 = v49;
                else
                  v54 = v48.f32[0];
                v55 = v99.columns[v52 + 1];
                v98 = v44;
                v44.i32[0] = *(_DWORD *)((unint64_t)&v98 | (4 * v52));
                v47.i32[0] = 1.0;
                v56.i64[0] = 0x8000000080000000;
                v56.i64[1] = 0x8000000080000000;
                v47.i32[0] = vbslq_s8(v56, v47, (int8x16_t)v44).u32[0];
                if (v44.f32[0] == 0.0)
                  v57 = 0.0;
                else
                  v57 = *(float *)v47.i32;
                v58 = v57;
                if ((*(_WORD *)(a2 + 8) & 0x40) != 0)
                {
                  v90 = (float32x4_t)v55;
                  v92 = v36;
                  v94 = v54;
                  v96 = v35;
                  v71 = C3DHitTestResultCreate();
                  C3DHitTestResultSetNode(v71, *(CFTypeRef *)(a2 + 112));
                  v72 = *(float32x4_t **)(v71 + 24);
                  if (v72 != ValueAtIndex)
                  {
                    if (v72)
                    {
                      CFRelease(v72);
                      *(_QWORD *)(v71 + 24) = 0;
                    }
                    if (ValueAtIndex)
                      v73 = CFRetain(ValueAtIndex);
                    else
                      v73 = 0;
                    *(_QWORD *)(v71 + 24) = v73;
                  }
                  v91 = vmulq_n_f32(v90, -v58);
                  v97 = vmlaq_n_f32(v96, v92, v94);
                  v85 = *(_OWORD *)(a2 + 128);
                  v86 = *(_OWORD *)(a2 + 144);
                  v87 = *(_OWORD *)(a2 + 176);
                  *(_OWORD *)(v71 + 144) = *(_OWORD *)(a2 + 160);
                  *(_OWORD *)(v71 + 160) = v87;
                  *(_OWORD *)(v71 + 112) = v85;
                  *(_OWORD *)(v71 + 128) = v86;
                  *(float32x4_t *)(v71 + 96) = v97;
                  v103 = __invert_f4(*(simd_float4x4 *)(a2 + 128));
                  v88 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32((float32x4_t)v103.columns[1], *(float32x2_t *)v97.f32, 1), (float32x4_t)v103.columns[0], v97.f32[0]), (float32x4_t)v103.columns[2], v97, 2);
                  v103.columns[1] = (simd_float4)vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32((float32x4_t)v103.columns[1], *(float32x2_t *)v91.f32, 1), (float32x4_t)v103.columns[0], v91.f32[0]), (float32x4_t)v103.columns[2], v91, 2);
                  v103.columns[0] = (simd_float4)vmulq_f32((float32x4_t)v103.columns[1], (float32x4_t)v103.columns[1]);
                  v103.columns[0].i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v103.columns[0], 2), vadd_f32(*(float32x2_t *)v103.columns[0].f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v103.columns[0].f32, 1))).u32[0];
                  v103.columns[2] = (simd_float4)vaddq_f32((float32x4_t)v103.columns[3], v88);
                  *(float32x2_t *)v103.columns[3].f32 = vrsqrte_f32((float32x2_t)v103.columns[0].u32[0]);
                  *(float32x2_t *)v103.columns[3].f32 = vmul_f32(*(float32x2_t *)v103.columns[3].f32, vrsqrts_f32((float32x2_t)v103.columns[0].u32[0], vmul_f32(*(float32x2_t *)v103.columns[3].f32, *(float32x2_t *)v103.columns[3].f32)));
                  *(simd_float4 *)(v71 + 64) = v103.columns[2];
                  *(float32x4_t *)(v71 + 80) = vmulq_n_f32((float32x4_t)v103.columns[1], vmul_f32(*(float32x2_t *)v103.columns[3].f32, vrsqrts_f32((float32x2_t)v103.columns[0].u32[0], vmul_f32(*(float32x2_t *)v103.columns[3].f32, *(float32x2_t *)v103.columns[3].f32))).f32[0]);
                  CFArrayAppendValue(*(CFMutableArrayRef *)(a2 + 312), (const void *)v71);
                  CFRelease((CFTypeRef)v71);
                  v84 = *(_WORD *)(a2 + 8);
                  if ((v84 & 0x100) != 0)
                    *(float *)(a2 + 60) = v94;
LABEL_53:
                  v13 = 1;
                  if ((v84 & 0x80) != 0)
                    return v13 & 1;
                  goto LABEL_54;
                }
                v59 = 0;
                v60 = (_OWORD *)(IOSurface + (v14 << 6));
                v61 = v60[1];
                v62 = v60[2];
                v63 = v60[3];
                v101[0] = *v60;
                v101[1] = v61;
                v101[2] = v62;
                v101[3] = v63;
                memset(&v99, 0, sizeof(v99));
                do
                {
                  v99.columns[v59] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v18, COERCE_FLOAT(v101[v59])), v19, *(float32x2_t *)&v101[v59], 1), v20, (float32x4_t)v101[v59], 2), v21, (float32x4_t)v101[v59], 3);
                  ++v59;
                }
                while (v59 != 4);
                v102 = __invert_f4(v99);
                v64 = *(float32x4_t *)(a2 + 16);
                v65 = *(float32x4_t *)(a2 + 32);
                v66 = vaddq_f32((float32x4_t)v102.columns[3], vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32((float32x4_t)v102.columns[1], *(float32x2_t *)v64.f32, 1), (float32x4_t)v102.columns[0], v64.f32[0]), (float32x4_t)v102.columns[2], v64, 2));
                if (COERCE_FLOAT(HIDWORD(*(_OWORD *)(a2 + 48))) >= 1.0e20)
                {
                  v74 = vaddq_f32(v64, v65);
                  v75 = vsubq_f32(vaddq_f32((float32x4_t)v102.columns[3], vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32((float32x4_t)v102.columns[1], *(float32x2_t *)v74.f32, 1), (float32x4_t)v102.columns[0], v74.f32[0]), (float32x4_t)v102.columns[2], v74, 2)), v66);
                  v69 = vmulq_f32(v75, v75);
                  v69.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v69, 2), vadd_f32(*(float32x2_t *)v69.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v69.f32, 1))).u32[0];
                  v76 = vrsqrte_f32((float32x2_t)v69.u32[0]);
                  v77 = vmul_f32(v76, vrsqrts_f32((float32x2_t)v69.u32[0], vmul_f32(v76, v76)));
                  v70 = vmulq_n_f32(v75, vmul_f32(v77, vrsqrts_f32((float32x2_t)v69.u32[0], vmul_f32(v77, v77))).f32[0]);
                  v66.i32[3] = 1.0;
                  v69.i32[0] = 2139095040;
                }
                else
                {
                  v67 = vmlaq_laneq_f32(v64, v65, *(float32x4_t *)(a2 + 48), 3);
                  v68 = vsubq_f32(vaddq_f32((float32x4_t)v102.columns[3], vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32((float32x4_t)v102.columns[1], *(float32x2_t *)v67.f32, 1), (float32x4_t)v102.columns[0], v67.f32[0]), (float32x4_t)v102.columns[2], v67, 2)), v66);
                  v66.i32[3] = 1.0;
                  v69 = vmulq_f32(v68, v68);
                  v69.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v69, 2), vaddq_f32(v69, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v69.f32, 1))).u64[0];
                  v69.f32[0] = sqrtf(v69.f32[0]);
                  v70 = vdivq_f32(v68, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v69.f32, 0));
                }
                v78 = v70;
                v70.i32[3] = 0;
                __asm { FMOV            V3.4S, #1.0 }
                v83 = vdivq_f32(_Q3, v78);
                v83.i32[3] = v69.i32[0];
                *(float32x4_t *)(a2 + 64) = v66;
                *(float32x4_t *)(a2 + 80) = v70;
                *(float32x4_t *)(a2 + 96) = v83;
                if (__ProcessSkinnedGeometryForJointIndex(OverrideMaterial, v7, v14, a2))
                {
                  v84 = *(_WORD *)(a2 + 8);
                  goto LABEL_53;
                }
              }
            }
          }
LABEL_54:
          if (++v14 == v12)
            return v13 & 1;
        }
      }
    }
  }
  v13 = 0;
  return v13 & 1;
}

uint64_t __ProcessNode(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  float32x4_t *v3;
  uint64_t v4;
  float32x4_t *WorldMatrix;
  simd_float4 v6;
  simd_float4 v7;
  simd_float4 v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  uint64_t Skinner;
  uint64_t v13;
  __C3DGeometry *Geometry;
  int EffectiveCalculationMode;
  uint64_t JointMatrices;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float *v26;
  float *v27;
  int32x4_t v28;
  int32x4_t v29;
  float32x2x2_t v30;
  float32x2x2_t v31;
  int32x4_t v32;
  int32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x4_t v45;
  float32x4_t v49;
  const __CFDictionary *Light;
  uint64_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  float v55;
  int DoubleSided;
  int v57;
  int v58;
  __n128 v59;
  float32x4_t v60;
  float32x4_t v61;
  float v62;
  int v63;
  float32x2_t v64;
  float32x4_t v65;
  __n128 v66;
  int v67;
  float32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float v78;
  float32x4_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  float32x4_t v83;
  float32x4_t v84;
  __n128 v85;
  uint64_t v86;
  char v87;
  float32x4_t v88;
  int8x16_t v89;
  int8x16_t v90;
  float32x2_t v91;
  float32x2_t v92;
  int32x2_t v93;
  float v94;
  float32x2_t v95;
  float32x2_t v96;
  uint64_t v97;
  float32x2_t v98;
  float32x2_t v99;
  float32x2_t v100;
  float32x2_t v101;
  int32x2_t v102;
  int32x2_t v103;
  int32x2_t v104;
  float32x4_t v105;
  float32x4_t v106;
  int32x4_t v107;
  float32x2_t v108;
  float32x2_t v109;
  float32x4_t v110;
  float v111;
  float32x4_t v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  unint64_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  int32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  int8x16_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  int32x4_t v137;
  int32x4_t v138;
  int32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  float v154;
  float v155;
  uint64_t v157;
  unsigned int v158;
  float v159;
  float32x4_t v160;
  int8x16_t v161;
  float32x4_t v162;
  int32x4_t v163;
  float32x2_t v164;
  float32x2_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  int8x16_t v169;
  float v170;
  int8x16_t v171;
  float v172;
  BOOL v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t Mesh;
  uint64_t v178;
  const __CFArray *ElementsCount;
  const __CFArray *v180;
  const void *ElementAtIndex;
  char Type;
  BOOL v183;
  BOOL v184;
  CFIndex v185;
  CFIndex v186;
  const void *v187;
  char v188;
  _BOOL4 v189;
  const __CFArray *MaterialsCount;
  const void *PositionSource;
  uint64_t v192;
  uint64_t ChannelForSourceWithSemanticAtIndex;
  uint64_t v194;
  int8x16_t v195;
  int8x16_t v196;
  uint64_t v197;
  const __CFArray *v198;
  const __CFArray *v199;
  CFIndex v200;
  const void *v201;
  int IsDoubleSided;
  int CullMode;
  const __CFArray *MaterialAtIndex;
  uint64_t v205;
  float32x4_t v206;
  _BOOL4 v210;
  unsigned int (*v211)(void);
  uint64_t PrimitiveGroupBoundingBoxes;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  float32x4_t v217;
  float32x4_t v218;
  float32x4_t v219;
  float32x4_t v220;
  float32x4_t v221;
  float32x4_t v222;
  float32x4_t v223;
  float32x4_t v224;
  float32x4_t v225;
  float32x4_t v226;
  float v227;
  float v228;
  uint64_t v229;
  BOOL v230;
  void *v231;
  int v233;
  const __CFArray *v234;
  float32x4_t v235;
  float32x4_t v236;
  uint64_t v237;
  float32x4_t v238;
  uint64_t v239;
  float32x4_t v240;
  uint64_t v241;
  float32x4_t v242;
  float32x4_t v243;
  float32x4_t v244;
  float32x4_t v245;
  uint64_t v246;
  float32x4_t v247;
  float32x4_t v248;
  float32x4_t v249;
  float32x4_t v250;
  float32x4_t v251;
  __n128 v252;
  uint64_t Content;
  float32x4_t v254;
  __int128 v255[3];
  uint64_t v256;
  unsigned int v257;
  float32x4_t v258;
  float32x4_t v259;
  __int128 v260;
  uint64_t v261;
  float v262;
  simd_float4 v263;
  simd_float4 v264;
  simd_float4 v265;
  simd_float4 v266;
  __int128 v267;
  int32x4_t v268;
  __int128 v269;
  int32x4_t v270;
  float32x4_t v271;
  uint64_t v272;
  simd_float4x4 v273;
  simd_float4x4 v274;

  MEMORY[0x1E0C80A78](a1);
  v2 = (uint64_t)v1;
  v4 = (uint64_t)v3;
  v272 = *MEMORY[0x1E0C80C00];
  v1[14] = v3;
  v1[15] = 0;
  v1[24] = 0;
  WorldMatrix = C3DNodeGetWorldMatrix(v3);
  v6 = (simd_float4)WorldMatrix[3];
  v8 = *(simd_float4 *)WorldMatrix;
  v7 = (simd_float4)WorldMatrix[1];
  v265 = (simd_float4)WorldMatrix[2];
  v266 = v6;
  v263 = v8;
  v264 = v7;
  v9 = *WorldMatrix;
  v10 = WorldMatrix[1];
  v11 = WorldMatrix[3];
  *(float32x4_t *)(v2 + 160) = WorldMatrix[2];
  *(float32x4_t *)(v2 + 176) = v11;
  *(float32x4_t *)(v2 + 128) = v9;
  *(float32x4_t *)(v2 + 144) = v10;
  Skinner = C3DNodeGetSkinner(v4);
  if (Skinner)
  {
    v13 = Skinner;
    Geometry = (__C3DGeometry *)C3DNodeGetGeometry(v4);
    EffectiveCalculationMode = C3DSkinnerGetEffectiveCalculationMode(v13, Geometry);
    if (C3DSkinnerCalculationModeUsesGPU(EffectiveCalculationMode))
      return __ProcessSkinner(v13, v2);
    if (EffectiveCalculationMode == 3)
    {
      v258.i64[0] = 0;
      JointMatrices = C3DSkinnerGetJointMatrices(v13, &v258);
      if (v258.i64[0] != 3)
      {
        v18 = scn_default_log();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_FAULT))
          __ProcessNode_cold_1(v18, v19, v20, v21, v22, v23, v24, v25);
      }
      v269 = 0u;
      v270 = 0u;
      v267 = 0u;
      v268 = 0u;
      v26 = (float *)&v267;
      v27 = (float *)&v269;
      v28 = *(int32x4_t *)(JointMatrices + 16);
      v29 = *(int32x4_t *)(JointMatrices + 32);
      v30 = (float32x2x2_t)vzip1q_s32(*(int32x4_t *)JointMatrices, v29);
      v31 = (float32x2x2_t)vzip2q_s32(*(int32x4_t *)JointMatrices, v29);
      v32 = vzip1q_s32(v28, (int32x4_t)0);
      v33 = vzip2q_s32(v28, (int32x4_t)xmmword_1DD007610);
      vst2_f32(v26, v30);
      vst2_f32(v27, v31);
      v268 = vzip2q_s32((int32x4_t)v30, v32);
      v270 = vzip2q_s32((int32x4_t)v31, v33);
      C3DMatrix4x4Mult((uint64_t)&v267, (float32x4_t *)&v263, &v263);
    }
  }
  v262 = 0.0;
  v273.columns[0] = v263;
  v273.columns[1] = v264;
  v273.columns[2] = v265;
  v273.columns[3] = v266;
  v274 = __invert_f4(v273);
  v34 = *(float32x4_t *)(v2 + 16);
  v35 = *(float32x4_t *)(v2 + 32);
  v36 = vaddq_f32((float32x4_t)v274.columns[3], vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32((float32x4_t)v274.columns[1], *(float32x2_t *)v34.f32, 1), (float32x4_t)v274.columns[0], v34.f32[0]), (float32x4_t)v274.columns[2], v34, 2));
  if (COERCE_FLOAT(HIDWORD(*(_OWORD *)(v2 + 48))) >= 1.0e20)
  {
    v41 = vaddq_f32(v34, v35);
    v42 = vsubq_f32(vaddq_f32((float32x4_t)v274.columns[3], vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32((float32x4_t)v274.columns[1], *(float32x2_t *)v41.f32, 1), (float32x4_t)v274.columns[0], v41.f32[0]), (float32x4_t)v274.columns[2], v41, 2)), v36);
    v39 = vmulq_f32(v42, v42);
    v39.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v39, 2), vadd_f32(*(float32x2_t *)v39.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v39.f32, 1))).u32[0];
    v43 = vrsqrte_f32((float32x2_t)v39.u32[0]);
    v44 = vmul_f32(v43, vrsqrts_f32((float32x2_t)v39.u32[0], vmul_f32(v43, v43)));
    v40 = vmulq_n_f32(v42, vmul_f32(v44, vrsqrts_f32((float32x2_t)v39.u32[0], vmul_f32(v44, v44))).f32[0]);
    v36.i32[3] = 1.0;
    v39.i32[0] = 2139095040;
  }
  else
  {
    v37 = vmlaq_laneq_f32(v34, v35, *(float32x4_t *)(v2 + 48), 3);
    v38 = vsubq_f32(vaddq_f32((float32x4_t)v274.columns[3], vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32((float32x4_t)v274.columns[1], *(float32x2_t *)v37.f32, 1), (float32x4_t)v274.columns[0], v37.f32[0]), (float32x4_t)v274.columns[2], v37, 2)), v36);
    v36.i32[3] = 1.0;
    v39 = vmulq_f32(v38, v38);
    v39.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v39, 2), vaddq_f32(v39, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v39.f32, 1))).u64[0];
    v39.f32[0] = sqrtf(v39.f32[0]);
    v40 = vdivq_f32(v38, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v39.f32, 0));
  }
  v45 = v40;
  v40.i32[3] = 0;
  __asm { FMOV            V3.4S, #1.0 }
  v247 = _Q3;
  v49 = vdivq_f32(_Q3, v45);
  v49.i32[3] = v39.i32[0];
  *(float32x4_t *)(v2 + 64) = v36;
  *(float32x4_t *)(v2 + 80) = v40;
  *(float32x4_t *)(v2 + 96) = v49;
  if ((*(_BYTE *)(v2 + 9) & 4) == 0)
  {
    Light = C3DNodeGetLight(v4);
    if (Light)
    {
      v51 = (uint64_t)Light;
      if (C3DLightGetType((uint64_t)Light) == 6)
      {
        if (C3DLightGetDrawsArea(v51))
        {
          v52.i32[0] = *(_DWORD *)(v2 + 88);
          v53.i32[0] = 1.0;
          v54.i64[0] = 0x8000000080000000;
          v54.i64[1] = 0x8000000080000000;
          v53.i32[0] = vbslq_s8(v54, v53, v52).u32[0];
          if (*(float *)v52.i32 == 0.0)
            *(float *)v53.i32 = 0.0;
          v55 = *(float *)v53.i32;
          DoubleSided = C3DLightGetDoubleSided(v51);
          v258 = 0u;
          v259 = 0u;
          C3DLightGetAreaDescription(v51, (__int128 *)&v258);
          switch(v258.i8[0])
          {
            case 1:
              if (v55 > 0.0)
                v57 = 1;
              else
                v57 = DoubleSided;
              if (v57 == 1)
              {
                v267 = 0u;
                v268 = (int32x4_t)xmmword_1DD007600;
                v269 = xmmword_1DD007970;
                v270.i64[0] = v259.i64[0];
                v242 = *(float32x4_t *)(v2 + 80);
                v248 = *(float32x4_t *)(v2 + 64);
                v58 = scn_rectangle_ray_intersection((uint64_t)&v267, &v262, v248, v242, *(__n128 *)(v2 + 96));
                v59.n128_u64[0] = 0;
                v59.n128_u32[3] = 0;
                v61 = v242;
                v60 = v248;
                if (v58)
                {
                  v59.n128_f32[2] = -v55;
                  v62 = v262;
                  goto LABEL_57;
                }
              }
              break;
            case 2:
              if (v55 > 0.0)
                v63 = 1;
              else
                v63 = DoubleSided;
              if (v63 == 1)
              {
                v64 = *(float32x2_t *)v259.f32;
                v65 = *(float32x4_t *)(v2 + 80);
                v243 = v65;
                v249 = *(float32x4_t *)(v2 + 64);
                v66 = *(__n128 *)(v2 + 96);
                LODWORD(v267) = 0;
                v67 = scn_plane_ray_intersection(0, 0x800000003F800000, (float *)&v267, v249, v65, v66);
                v61 = v243;
                v60 = v249;
                if (v67)
                {
                  v62 = *(float *)&v267;
                  v68 = vmlaq_n_f32(v249, v243, *(float *)&v267);
                  v69 = (int32x4_t)vmulq_f32(v68, (float32x4_t)xmmword_1DD007970);
                  v70 = (int32x4_t)vmulq_f32(v68, (float32x4_t)xmmword_1DD007920);
                  *(float32x2_t *)v70.i8 = vdiv_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v69, 2), vadd_f32(*(float32x2_t *)v69.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v69.i8, 1))), (int32x2_t)vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v70, 2), vadd_f32(*(float32x2_t *)v70.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v70.i8, 1)))),
                                             v64);
                  if (vaddv_f32(vmul_f32(*(float32x2_t *)v70.i8, *(float32x2_t *)v70.i8)) <= 1.0)
                  {
                    v59.n128_u64[0] = 0;
                    v59.n128_u32[3] = 0;
                    v59.n128_f32[2] = -v55;
                    v262 = *(float *)&v267;
                    goto LABEL_57;
                  }
                }
              }
              break;
            case 3:
              v71 = v259;
              v60 = *(float32x4_t *)(v2 + 64);
              v61 = *(float32x4_t *)(v2 + 80);
              v72 = vdivq_f32(v247, v259);
              v73 = (float32x4_t)v72.u32[0];
              v74.i32[0] = 0;
              v74.i64[1] = 0;
              v74.i32[1] = v72.i32[1];
              v75.i64[0] = 0;
              v75.i64[1] = v72.u32[2];
              v76 = vaddq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32((float32x4_t)v74.u64[0], *(float32x2_t *)v60.f32, 1), (float32x4_t)v72.u32[0], v60.f32[0]), v75, v60, 2), (float32x4_t)0);
              if (COERCE_FLOAT(HIDWORD(*(_OWORD *)(v2 + 96))) >= 1.0e20)
              {
                v105 = vaddq_f32(v60, v61);
                v106 = vsubq_f32(vaddq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v74, *(float32x2_t *)v105.f32, 1), (float32x4_t)v72.u32[0], v105.f32[0]), v75, v105, 2), (float32x4_t)0), v76);
                v107 = (int32x4_t)vmulq_f32(v106, v106);
                v107.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v107, 2), vadd_f32(*(float32x2_t *)v107.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v107.i8, 1))).u32[0];
                v108 = vrsqrte_f32((float32x2_t)v107.u32[0]);
                v109 = vmul_f32(v108, vrsqrts_f32((float32x2_t)v107.u32[0], vmul_f32(v108, v108)));
                v77 = vmulq_n_f32(v106, vmul_f32(v109, vrsqrts_f32((float32x2_t)v107.u32[0], vmul_f32(v109, v109))).f32[0]);
                v76.i32[3] = 1.0;
                v77.i32[3] = 0;
                v78 = INFINITY;
              }
              else
              {
                v244 = *(float32x4_t *)(v2 + 80);
                v250 = *(float32x4_t *)(v2 + 64);
                v238 = v74;
                v240 = (float32x4_t)v72.u32[0];
                v235 = v259;
                v236 = v75;
                scn_ray_create_segment();
                v71 = v235;
                v75 = v236;
                v74 = v238;
                v73 = v240;
                v61 = v244;
                v60 = v250;
                v76 = v79;
              }
              v110 = vmulq_f32(v76, v77);
              LODWORD(v111) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v110, 2), vaddq_f32(v110, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v110.f32, 1))).u32[0];
              v112 = vmulq_f32(v76, v76);
              v113 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v112, 2), vaddq_f32(v112, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v112.f32, 1))).f32[0]+ -1.0;
              if (v113 <= 0.0 || v111 <= 0.0)
              {
                v114 = -(float)(v113 - (float)(v111 * v111));
                if (v114 >= 0.0)
                {
                  v115 = sqrtf(v114);
                  v116 = (float)-v111 - v115;
                  v117 = v111 + v115;
                  if (v116 >= 0.0)
                    v117 = v116;
                  if (v117 <= v78)
                  {
                    LODWORD(v118) = 0;
                    HIDWORD(v118) = v71.i32[1];
                    v119.i64[0] = 0;
                    v119.i64[1] = v71.u32[2];
                    v120 = vmlaq_f32(v76, (float32x4_t)0, v77);
                    v121 = vsubq_f32(vaddq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v71.u32[0], v120.f32[0]), (float32x4_t)v118, *(float32x2_t *)v120.f32, 1), v119, v120, 2), (float32x4_t)0), v60);
                    v122 = vmulq_f32(v121, v121);
                    v62 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v122, 2), vaddq_f32(v122, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v122.f32, 1))).f32[0]);
                    v262 = v62;
                    v123 = vaddq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v73, v120.f32[0]), v74, *(float32x2_t *)v120.f32, 1), v75, v120, 2), (float32x4_t)0);
                    v124 = (int32x4_t)vmulq_f32(v123, v123);
                    v124.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v124, 2), vadd_f32(*(float32x2_t *)v124.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v124.i8, 1))).u32[0];
                    *(float32x2_t *)v120.f32 = vrsqrte_f32((float32x2_t)v124.u32[0]);
                    *(float32x2_t *)v120.f32 = vmul_f32(*(float32x2_t *)v120.f32, vrsqrts_f32((float32x2_t)v124.u32[0], vmul_f32(*(float32x2_t *)v120.f32, *(float32x2_t *)v120.f32)));
                    v59 = (__n128)vmulq_n_f32(v123, vmul_f32(*(float32x2_t *)v120.f32, vrsqrts_f32((float32x2_t)v124.u32[0], vmul_f32(*(float32x2_t *)v120.f32, *(float32x2_t *)v120.f32))).f32[0]);
                    goto LABEL_57;
                  }
                }
              }
              break;
            case 4:
              if (v55 > 0.0)
                v80 = 1;
              else
                v80 = DoubleSided;
              if (v80 == 1)
              {
                v81 = v259.i64[1];
                v82 = v259.u8[0];
                v83 = *(float32x4_t *)(v2 + 64);
                v84 = *(float32x4_t *)(v2 + 80);
                v85 = *(__n128 *)(v2 + 96);
                LODWORD(v267) = 0;
                v245 = v84;
                v251 = v83;
                if ((scn_plane_ray_intersection(0, 0x80000000BF800000, (float *)&v267, v83, v84, v85) & 1) != 0)
                {
                  v62 = *(float *)&v267;
                  if ((_DWORD)v82)
                  {
                    v86 = 0;
                    v87 = 0;
                    v59.n128_u64[0] = 0;
                    v59.n128_u32[3] = 0;
                    v59.n128_f32[2] = -v55;
                    v61 = v245;
                    v60 = v251;
                    v88 = vmlaq_n_f32(v251, v245, *(float *)&v267);
                    v89 = (int8x16_t)vmulq_f32(v88, (float32x4_t)xmmword_1DD007A30);
                    v90 = (int8x16_t)vmulq_f32(v88, (float32x4_t)xmmword_1DD007920);
                    v91 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v89, v89, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v90, v90, 8uLL)), vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v89.i8, *(int32x2_t *)v90.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v89.i8, *(int32x2_t *)v90.i8)));
                    v92.i32[1] = v91.i32[1];
                    v92.i32[0] = -859915232;
                    v93 = (int32x2_t)vsub_f32(v92, v91);
                    v94 = -*(float *)&v93.i32[1];
                    v95 = (float32x2_t)vdup_lane_s32(v93, 0);
                    do
                    {
                      v96 = *(float32x2_t *)(v81 + 8 * v86);
                      if (v82 - 1 == v86)
                        v97 = 0;
                      else
                        v97 = v86 + 1;
                      v98 = *(float32x2_t *)(v81 + 8 * v97);
                      v99 = vsub_f32(v91, v96);
                      v100 = vsub_f32(v92, v96);
                      v101 = vsub_f32(v98, v96);
                      if (vmlas_n_f32((float)-v101.f32[1] * v99.f32[0], v99.f32[1], v101.f32[0]) < 0.0 == vmlas_n_f32((float)-v101.f32[1] * v100.f32[0], v100.f32[1], v101.f32[0]) >= 0.0)
                      {
                        v102 = (int32x2_t)vsub_f32(v98, v91);
                        v103 = (int32x2_t)vsub_f32(v96, v91);
                        v104 = vcgez_f32(vmla_f32(vmul_n_f32((float32x2_t)vzip1_s32(v103, v102), v94), (float32x2_t)vzip2_s32(v103, v102), v95));
                        v87 -= veor_s8((int8x8_t)v104, (int8x8_t)vdup_lane_s32(v104, 1)).u8[0];
                      }
                      ++v86;
                    }
                    while (v82 != v86);
                    v262 = *(float *)&v267;
                    if ((v87 & 1) != 0)
LABEL_57:
                      __AddLocalResult(v2, 0, 0, 0, 0, v62, vmlaq_n_f32(v60, v61, v62), v59);
                  }
                  else
                  {
                    v262 = *(float *)&v267;
                  }
                }
              }
              break;
            default:
              break;
          }
        }
      }
    }
  }
  if ((*(_BYTE *)(v4 + 221) & 0x10) != 0)
  {
    v162 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(*(float32x4_t *)(v2 + 144), *(float32x2_t *)(v2 + 288), 1), *(float32x4_t *)(v2 + 128), COERCE_FLOAT(*(_OWORD *)(v2 + 288))), *(float32x4_t *)(v2 + 160), *(float32x4_t *)(v2 + 288), 2);
    v163 = (int32x4_t)vmulq_f32(v162, v162);
    v163.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v163, 2), vadd_f32(*(float32x2_t *)v163.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v163.i8, 1))).u32[0];
    v164 = vrsqrte_f32((float32x2_t)v163.u32[0]);
    v165 = vmul_f32(v164, vrsqrts_f32((float32x2_t)v163.u32[0], vmul_f32(v164, v164)));
    v166 = vmulq_n_f32(v162, vmul_f32(v165, vrsqrts_f32((float32x2_t)v163.u32[0], vmul_f32(v165, v165))).f32[0]);
    v167 = vmulq_f32(*(float32x4_t *)(v2 + 176), v166);
    v168 = v166;
    v168.f32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v167, 2), vaddq_f32(v167, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v167.f32, 1))).f32[0];
    v169 = (int8x16_t)vmulq_f32(*(float32x4_t *)(v2 + 32), v168);
    v170 = vaddv_f32(vadd_f32(*(float32x2_t *)v169.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v169, v169, 8uLL)));
    if (v170 == 0.0)
      return 0;
    v171 = (int8x16_t)vmulq_f32(v168, *(float32x4_t *)(v2 + 16));
    v172 = (float)-vaddv_f32(vadd_f32(*(float32x2_t *)v171.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v171, v171, 8uLL)))
         / v170;
    if (v172 < 0.0 || v172 > *(float *)(v2 + 60))
      return 0;
    v252 = (__n128)v166;
    v262 = v172;
  }
  else
  {
    v258 = 0u;
    v259 = 0u;
    if ((C3DNodeGetLocalBoundingBox(v4, &v258) & 1) == 0)
      return 0;
    v125 = *(float32x4_t *)(v2 + 128);
    v126 = *(float32x4_t *)(v2 + 144);
    v127 = *(float32x4_t *)(v2 + 160);
    v128 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v127, (int32x4_t)v127), (int8x16_t)v127, 0xCuLL), vnegq_f32(v126)), v127, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v126, (int32x4_t)v126), (int8x16_t)v126, 0xCuLL));
    v129 = vmulq_f32(v125, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v128, (int32x4_t)v128), v128, 0xCuLL));
    v130 = vaddq_f32(*(float32x4_t *)(v2 + 176), vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v126, *(float32x2_t *)v258.f32, 1), v125, v258.f32[0]), v127, v258, 2));
    _NF = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v129, 2), vaddq_f32(v129, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v129.f32, 1))).f32[0] < 0.0;
    v131 = 1.0;
    v132 = vmulq_f32(v125, v125);
    v135 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v132, 2), vaddq_f32(v132, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v132.f32, 1)));
    v133 = vmulq_f32(v126, v126);
    v135.f32[0] = sqrtf(v135.f32[0]);
    v134 = vmulq_f32(v127, v127);
    v135.i32[1] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v133, 2), vaddq_f32(v133, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v133.f32, 1))).f32[0]);
    v135.i32[2] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v134, 2), vaddq_f32(v134, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v134.f32, 1))).f32[0]);
    if (_NF)
      v131 = -1.0;
    v136 = vmulq_n_f32(v135, v131);
    v137 = (int32x4_t)vdivq_f32(v125, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v136.f32, 0));
    v138 = (int32x4_t)vdivq_f32(v126, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v136.f32, 1));
    v139 = (int32x4_t)vdivq_f32(v127, (float32x4_t)vdupq_laneq_s32((int32x4_t)v136, 2));
    v140 = vmulq_f32(v259, v136);
    v141 = *(float32x4_t *)(v2 + 32);
    v142 = vsubq_f32(v130, *(float32x4_t *)(v2 + 16));
    v143 = (float32x4_t)vzip1q_s32(vzip1q_s32(v137, v139), v138);
    v144 = (float32x4_t)vtrn2q_s32(v137, v138);
    v144.i32[2] = v139.i32[1];
    v145 = (float32x4_t)vzip1q_s32(vzip2q_s32(v137, v139), vdupq_laneq_s32(v138, 2));
    v146 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v144, *(float32x2_t *)v142.f32, 1), v143, v142.f32[0]), v145, v142, 2);
    v147 = vaddq_f32(v140, v146);
    v148 = vsubq_f32(v146, v140);
    v140.i32[3] = v259.i32[3];
    v268 = v137;
    v269 = (__int128)v138;
    v270 = v139;
    v271 = v140;
    v149 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v144, *(float32x2_t *)v141.f32, 1), v143, v141.f32[0]), v145, v141, 2);
    v150 = vdivq_f32(v147, v149);
    v150.i32[3] = 0;
    v151 = vdivq_f32(v148, v149);
    v151.i32[3] = 0;
    v152 = vminnmq_f32(v150, v151);
    v153 = vmaxnmq_f32(v150, v151);
    if (v152.f32[0] < v152.f32[2])
      v154 = v152.f32[2];
    else
      v154 = v152.f32[0];
    if (v154 < v152.f32[1])
      v154 = v152.f32[1];
    v155 = v153.f32[2];
    if (v153.f32[0] <= v153.f32[2])
      v155 = v153.f32[0];
    v153.i32[0] = v153.i32[1];
    if (v155 <= v153.f32[1])
      v153.f32[0] = v155;
    if (v153.f32[0] < v154)
      return 0;
    _NF = v153.f32[0] >= v262 && v154 < *(float *)(v2 + 60);
    if (!_NF)
      return 0;
    LODWORD(v157) = 2 * (v152.f32[0] <= v152.f32[2]);
    if (v152.f32[1] > v152.f32[2])
      v158 = 1;
    else
      v158 = 2;
    if (v152.f32[0] <= v152.f32[1])
      v157 = v158;
    else
      v157 = v157;
    if (v154 >= v262)
      v159 = v154;
    else
      v159 = v153.f32[0];
    v262 = v159;
    v160 = *((float32x4_t *)&v268 + v157);
    v254 = v149;
    v149.i32[0] = *(_DWORD *)((unint64_t)&v254 | (4 * v157));
    v150.i32[0] = 1.0;
    v161.i64[0] = 0x8000000080000000;
    v161.i64[1] = 0x8000000080000000;
    v150.i32[0] = vbslq_s8(v161, (int8x16_t)v150, (int8x16_t)v149).u32[0];
    if (v149.f32[0] == 0.0)
      v150.f32[0] = 0.0;
    v252 = (__n128)vmulq_n_f32(v160, -v150.f32[0]);
  }
  v175 = C3DNodeGetGeometry(v4);
  if (!v175)
    goto LABEL_173;
  v176 = v175;
  Mesh = C3DGeometryGetMesh(v175);
  if (!Mesh)
    goto LABEL_173;
  v178 = Mesh;
  ElementsCount = C3DMeshGetElementsCount(Mesh);
  if ((uint64_t)ElementsCount < 1)
    goto LABEL_173;
  v180 = ElementsCount;
  ElementAtIndex = C3DMeshGetElementAtIndex(v178, 0, 0);
  Type = C3DMeshElementGetType((uint64_t)ElementAtIndex);
  v183 = C3DMeshElementTypeDefinesSurface(Type);
  v184 = 0;
  if (!v183)
  {
    v185 = 1;
    do
    {
      v186 = v185;
      if (v180 == (const __CFArray *)v185)
        break;
      v187 = C3DMeshGetElementAtIndex(v178, v185, 0);
      v188 = C3DMeshElementGetType((uint64_t)v187);
      v189 = C3DMeshElementTypeDefinesSurface(v188);
      v185 = v186 + 1;
    }
    while (!v189);
    v184 = v186 >= (uint64_t)v180;
  }
  if (v184 || (*(_WORD *)(v2 + 8) & 0x40) != 0 || (*(_BYTE *)(v4 + 221) & 0x10) != 0)
  {
LABEL_173:
    __AddWorldResult(v2, 0, 0, 0, 0, v262, vmlaq_n_f32(*(float32x4_t *)(v2 + 16), *(float32x4_t *)(v2 + 32), v262), v252);
    return 1;
  }
  MaterialsCount = C3DGeometryGetMaterialsCount(v176);
  PositionSource = C3DMeshGetPositionSource(v178, 0);
  if (!PositionSource)
    return 0;
  v192 = (uint64_t)PositionSource;
  ChannelForSourceWithSemanticAtIndex = C3DMeshGetChannelForSourceWithSemanticAtIndex(v178, 0, 0);
  Content = C3DMeshSourceGetContent(v192);
  if (!Content)
    return 0;
  v197 = v194;
  v241 = v194 & 0xFFFFF000;
  if ((v194 & 0xFFFFF000) == 0)
  {
    C3DMeshSourceContentClassifyRay(Content, v194, &v267, *(float32x4_t *)(v2 + 64), *(__n128 *)(v2 + 80), *(double *)(v2 + 96), v195, v196);
    *(_QWORD *)(v2 + 304) = &v267;
  }
  v198 = C3DMeshGetElementsCount(v178);
  if ((uint64_t)v198 < 1)
    return 0;
  v199 = v198;
  v200 = 0;
  v246 = v197;
  v237 = v197 & 0xFF000000000000;
  v234 = MaterialsCount;
  v174 = 1;
  v239 = ChannelForSourceWithSemanticAtIndex;
  while (1)
  {
    *(_QWORD *)(v2 + 192) = v200;
    v201 = C3DMeshGetElementAtIndex(v178, v200, 0);
    v261 = 0;
    v259 = 0u;
    v260 = 0u;
    v258 = 0u;
    C3DMeshElementGetContent((uint64_t)v201, ChannelForSourceWithSemanticAtIndex, (uint64_t)&v258);
    if (C3DMeshElementGetMTLBuffer((uint64_t)v201) || !C3DMeshElementTypeDefinesSurface(v259.i8[10]))
      goto LABEL_171;
    IsDoubleSided = 0;
    if ((*(_WORD *)(v2 + 8) & 8) != 0)
    {
      CullMode = 0;
      if ((uint64_t)MaterialsCount >= 1)
      {
        MaterialAtIndex = C3DGeometryGetMaterialAtIndex(v176, v200 % (uint64_t)MaterialsCount);
        IsDoubleSided = C3DMaterialIsDoubleSided((uint64_t)MaterialAtIndex);
        v205 = (uint64_t)MaterialAtIndex;
        ChannelForSourceWithSemanticAtIndex = v239;
        CullMode = C3DMaterialGetCullMode(v205);
      }
    }
    else
    {
      CullMode = 0;
    }
    *(_BYTE *)(v2 + 272) = IsDoubleSided;
    *(_BYTE *)(v2 + 273) = CullMode == 1;
    v206 = v259;
    *(float32x4_t *)(v2 + 216) = v258;
    *(float32x4_t *)(v2 + 232) = v206;
    *(_OWORD *)(v2 + 248) = v260;
    *(_QWORD *)(v2 + 264) = v261;
    *(_QWORD *)(v2 + 200) = Content;
    *(_QWORD *)(v2 + 208) = v246;
    v210 = v237 == 0x1000000000000 && v259.u8[10] == 0 && v259.u8[11] == 2 && CullMode == 0;
    if (!v241)
    {
      v231 = __ProcessTriangleRange_Mask;
      if (v259.u8[10] == 4)
        v231 = __ProcessPrimitiveRange_Mask;
      if (v210 && !((*(_WORD *)(v2 + 8) & 8) != 0 ? IsDoubleSided : 1))
        v231 = __ProcessTriangleRange_Mask_Ind16VrtFloat3CullBack;
      ((void (*)(_QWORD, _QWORD, uint64_t))v231)(0, v258.u32[2], v2);
      goto LABEL_171;
    }
    if (v259.u8[10] == 4)
      v211 = (unsigned int (*)(void))__ProcessPrimitiveRange_Generic;
    else
      v211 = (unsigned int (*)(void))__ProcessTriangleRange_Generic;
    if (v210 && !((*(_WORD *)(v2 + 8) & 8) != 0 ? IsDoubleSided : 1))
      v211 = (unsigned int (*)(void))__ProcessTriangleRange_Ind16VrtFloat3CullBack;
    if (v258.i32[2] < 0x41u)
    {
      v233 = ((uint64_t (*)(_QWORD))v211)(0);
      ChannelForSourceWithSemanticAtIndex = v239;
      if (v233)
        return v174;
      goto LABEL_171;
    }
    v257 = 0;
    v255[0] = (__int128)v258;
    v255[1] = (__int128)v259;
    v255[2] = v260;
    v256 = v261;
    PrimitiveGroupBoundingBoxes = C3DMeshElementGetPrimitiveGroupBoundingBoxes((uint64_t)v201, v255, Content, v246, &v257);
    if (v257)
      break;
LABEL_160:
    MaterialsCount = v234;
    ChannelForSourceWithSemanticAtIndex = v239;
LABEL_171:
    v174 = ++v200 < (uint64_t)v199;
    if ((const __CFArray *)v200 == v199)
      return v174;
  }
  v214 = PrimitiveGroupBoundingBoxes;
  v215 = 0;
  v216 = 32 * v257;
  while (1)
  {
    v217 = *(float32x4_t *)(v214 + v215);
    v218 = *(float32x4_t *)(v214 + v215 + 16);
    v219 = *(float32x4_t *)(v2 + 64);
    v220 = *(float32x4_t *)(v2 + 96);
    v221 = vsubq_f32(v217, v218);
    v222 = vaddq_f32(v217, v218);
    v223 = vmulq_f32(v220, vsubq_f32(v221, v219));
    v224 = vmulq_f32(v220, vsubq_f32(v222, v219));
    v223.i32[3] = 0;
    v224.i32[3] = 0;
    v225 = vminnmq_f32(v223, v224);
    v226 = vmaxnmq_f32(v223, v224);
    v227 = v225.f32[2];
    if (v225.f32[0] >= v225.f32[2])
      v227 = v225.f32[0];
    if (v227 < v225.f32[1])
      v227 = v225.f32[1];
    v228 = v226.f32[2];
    if (v226.f32[0] <= v226.f32[2])
      v228 = v226.f32[0];
    v226.i32[0] = v226.i32[1];
    if (v228 <= v226.f32[1])
      v226.f32[0] = v228;
    v229 = v215 + 32;
    v230 = v226.f32[0] >= v227 && v227 < v220.f32[3];
    if (v230 && v211())
      return v174;
    v215 = v229;
    if (v216 == v229)
      goto LABEL_160;
  }
}

uint64_t scn_rectangle_ray_intersection(uint64_t a1, float *a2, float32x4_t a3, float32x4_t a4, __n128 a5)
{
  float32x4_t v5;
  float32x4_t v6;
  float32_t v7;
  float32x4_t v8;
  int8x16_t v9;
  float v10;
  int8x16_t v11;
  float v12;
  float32x4_t v14;
  float32x4_t v15;
  int32x4_t v16;
  float32x4_t v17;
  int8x16_t v18;
  float32x4_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  uint32x2_t v24;
  uint32x2_t v25;

  v5 = *(float32x4_t *)(a1 + 16);
  v6 = vmulq_f32(v5, *(float32x4_t *)a1);
  v7 = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v6, 2), vaddq_f32(v6, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v6.f32, 1))).f32[0];
  v8 = v5;
  v8.f32[3] = v7;
  v9 = (int8x16_t)vmulq_f32(a4, v8);
  v10 = vaddv_f32(vadd_f32(*(float32x2_t *)v9.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL)));
  if (v10 == 0.0)
    return 0;
  v11 = (int8x16_t)vmulq_f32(a3, v8);
  v12 = (float)-vaddv_f32(vadd_f32(*(float32x2_t *)v11.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL))) / v10;
  if (v12 < 0.0 || v12 > a5.n128_f32[3])
    return 0;
  v14 = vmlaq_n_f32(a3, a4, v12);
  v15 = *(float32x4_t *)(a1 + 32);
  v16 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v15, (int32x4_t)v15), (int8x16_t)v15, 0xCuLL), vnegq_f32(v5)), v15, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v5, (int32x4_t)v5), (int8x16_t)v5, 0xCuLL));
  v17 = vsubq_f32(v14, *(float32x4_t *)a1);
  v18 = (int8x16_t)vmulq_f32(v15, v17);
  v19 = vmulq_f32(v17, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v16, v16), (int8x16_t)v16, 0xCuLL));
  v20.i32[0] = vdup_lane_s32(*(int32x2_t *)v18.i8, 1).u32[0];
  v21 = (float32x2_t)__PAIR64__(v19.u32[0], v18.u32[0]);
  v18.i32[0] = vextq_s8(v18, v18, 8uLL).u32[0];
  v20.i32[1] = v19.i32[1];
  v18.i32[1] = v19.i32[2];
  v22 = vadd_f32(*(float32x2_t *)v18.i8, vadd_f32(v21, v20));
  v23 = *(float32x2_t *)(a1 + 48);
  v24 = (uint32x2_t)vcgt_f32(vneg_f32(v23), v22);
  if ((vpmax_u32(v24, v24).u32[0] & 0x80000000) != 0)
    return 0;
  v25 = (uint32x2_t)vcgt_f32(v22, v23);
  if ((vpmax_u32(v25, v25).u32[0] & 0x80000000) != 0)
    return 0;
  if (a2)
    *a2 = v12;
  return 1;
}

uint64_t C3DSceneCreateHitTestResultsWithSegment(__n128 *a1, float32x4_t *a2, const __CFDictionary *a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x2_t v24;
  float32x2_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v34;
  uint64_t RootNode;
  const void *Value;
  uint64_t CullingSystem;
  uint64_t Count;
  __int16 v39;
  CFRange v40;
  CFIndex v41;
  CFIndex v42;
  CFIndex i;
  float32x4_t *ValueAtIndex;
  uint64_t v45;
  uint64_t Geometry;
  uint64_t Mesh;
  uint64_t v48;
  uint64_t ChannelForSourceWithSemanticAtIndex;
  const void *PositionSource;
  const void *ElementAtIndex;
  float32x4_t v52;
  const float *f32;
  _OWORD v55[3];
  uint64_t v56;
  _QWORD v57[4];
  _BYTE v58[432];
  __int128 v59;
  uint64_t *v60;
  const void *v61;
  float32x4_t *v62;
  _QWORD v63[2];
  __int128 v64;
  __int128 v65;
  __n128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  int v71;
  _QWORD v72[2];
  __int128 v73;
  __int128 v74;
  _QWORD v75[5];
  _OWORD __src[28];
  simd_float4x4 v77;
  simd_float4x4 v78;

  if (!a1 && (v6 = scn_default_log(), os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)))
  {
    C3DSceneCreateHitTestResultsWithSegment_cold_2(v6, v7, v8, v9, v10, v11, v12, v13);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v14 = scn_default_log();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    C3DSceneCreateHitTestResultsWithSegment_cold_1(v14, v15, v16, v17, v18, v19, v20, v21);
LABEL_6:
  memset(__src, 0, 432);
  C3DHitTestContextFillOptionsFromDictionary((uint64_t)__src, a3);
  C3DSceneGetUpAxis(a1, (__n128 *)&__src[18]);
  *((_QWORD *)&__src[19] + 1) = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v22 = *a2;
  v23 = vsubq_f32(a2[1], *a2);
  if ((BYTE8(__src[0]) & 2) != 0)
  {
    v22.i32[3] = 1.0;
    v27 = vmulq_f32(v23, v23);
    v27.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v27, 2), vaddq_f32(v27, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.f32, 1))).u64[0];
    v27.f32[0] = sqrtf(v27.f32[0]);
    v26 = vdivq_f32(v23, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.f32, 0));
  }
  else
  {
    v27 = vmulq_f32(v23, v23);
    v27.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v27, 2), vadd_f32(*(float32x2_t *)v27.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v27.f32, 1))).u32[0];
    v24 = vrsqrte_f32((float32x2_t)v27.u32[0]);
    v25 = vmul_f32(v24, vrsqrts_f32((float32x2_t)v27.u32[0], vmul_f32(v24, v24)));
    v26 = vmulq_n_f32(v23, vmul_f32(v25, vrsqrts_f32((float32x2_t)v27.u32[0], vmul_f32(v25, v25))).f32[0]);
    v22.i32[3] = 1.0;
    v27.i32[0] = 2139095040;
  }
  v28 = v26;
  v26.i32[3] = 0;
  __asm { FMOV            V4.4S, #1.0 }
  v34 = vdivq_f32(_Q4, v28);
  v34.i32[3] = v27.i32[0];
  __src[1] = v22;
  __src[2] = v26;
  __src[3] = v34;
  RootNode = C3DSceneGetRootNode((uint64_t)a1);
  if (a3)
    Value = CFDictionaryGetValue(a3, CFSTR("kHitTestRootNode"));
  else
    Value = 0;
  if (!Value)
    Value = (const void *)RootNode;
  if ((BYTE8(__src[0]) & 1) != 0 && Value == (const void *)RootNode)
  {
    v66.n128_u64[0] = 0;
    v64 = 0u;
    v65 = 0u;
    v75[0] = MEMORY[0x1E0C809B0];
    v75[1] = 3221225472;
    v75[2] = __C3DSceneCreateHitTestResultsWithSegment_block_invoke;
    v75[3] = &__block_descriptor_40_e23_v24__0_____C3DNode_8q16l;
    v75[4] = __src;
    C3DCullingSystemQueryMake((uint64_t)v75, (uint64_t)&v64);
    *(_QWORD *)&v64 = *(_QWORD *)&__src[0];
    BYTE12(v65) = BYTE9(__src[0]) & 1;
    if ((BYTE8(__src[0]) & 0x20) != 0)
      DWORD1(v65) |= 1u;
    DWORD2(v65) = BYTE10(__src[0]);
    CullingSystem = C3DSceneGetCullingSystem((uint64_t)a1);
    C3DCullingSystemRayIntersect(CullingSystem);
  }
  else if ((BYTE8(__src[0]) & 1) != 0)
  {
    *(_QWORD *)&v64 = MEMORY[0x1E0C809B0];
    *((_QWORD *)&v64 + 1) = 3221225472;
    *(_QWORD *)&v65 = ____ProcessHierarchy_block_invoke;
    *((_QWORD *)&v65 + 1) = &__block_descriptor_40_e315_q16__0____C3DNode____C3DEntity____CFRuntimeBase_QAQ__v____CFString_____CFString_____CFDictionary_____C3DScene_q_____C3DNode_____C3DNode_____C3DNode_i____C3DMatrix4x4__16f__4_____4__________C3DMatrix4x4_BfQib1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b3b1______SS_I_________C3DGeometry_____C3DDeformerStack_f_____8l;
    v66.n128_u64[0] = (unint64_t)__src;
    C3DNodeApplyHierarchy((uint64_t)Value, (uint64_t)&v64);
  }
  else
  {
    __ProcessNode((uint64_t)Value);
  }
  Count = CFArrayGetCount(*((CFArrayRef *)&__src[19] + 1));
  v39 = WORD4(__src[0]);
  if ((BYTE8(__src[0]) & 4) != 0)
  {
    v40.length = Count;
    if (Count >= 2)
    {
      v40.location = 0;
      CFArraySortValues(*((CFMutableArrayRef *)&__src[19] + 1), v40, (CFComparatorFunction)_C3DHitTestSortFunc, a2);
      v39 = WORD4(__src[0]);
    }
  }
  if ((v39 & 0x200) != 0 && *(_QWORD *)&__src[26])
  {
    v74 = 0uLL;
    C3DColor4Make((float *)&v74, 1.0, 0.0, 0.0, 1.0);
    v73 = 0uLL;
    C3DColor4Make((float *)&v73, 0.0, 1.0, 0.0, 1.0);
    v72[1] = 0;
    v72[0] = 0;
    C3DColor4Make((float *)v72, 0.0, 0.0, 1.0, 1.0);
    C3DAuthoringEnvironmentBeginTimedRecord(*(uint64_t *)&__src[26], 5.0);
    v41 = CFArrayGetCount(*((CFArrayRef *)&__src[19] + 1));
    if (v41 >= 1)
    {
      v42 = v41;
      for (i = 0; i != v42; ++i)
      {
        ValueAtIndex = (float32x4_t *)CFArrayGetValueAtIndex(*((CFArrayRef *)&__src[19] + 1), i);
        v68 = 0;
        v69 = &v68;
        v70 = 0x2020000000;
        v71 = 1065353216;
        v45 = ValueAtIndex[1].i64[0];
        if (v45)
        {
          Geometry = C3DNodeGetGeometry(v45);
          if (Geometry)
          {
            Mesh = C3DGeometryGetMesh(Geometry);
            v48 = Mesh;
            if (Mesh)
            {
              ChannelForSourceWithSemanticAtIndex = C3DMeshGetChannelForSourceWithSemanticAtIndex(Mesh, 0, 0);
              PositionSource = C3DMeshGetPositionSource(v48, 0);
              if (PositionSource)
              {
                ElementAtIndex = C3DMeshGetElementAtIndex(v48, ValueAtIndex[2].i64[0], 0);
                if (ElementAtIndex)
                {
                  v67 = 0;
                  v65 = 0u;
                  v66 = 0u;
                  v64 = 0u;
                  C3DMeshElementGetContent((uint64_t)ElementAtIndex, ChannelForSourceWithSemanticAtIndex, (uint64_t)&v64);
                  v63[0] = ValueAtIndex[2].i64[1];
                  v63[1] = 1;
                  *(_QWORD *)&v65 = v63;
                  WORD4(v65) = 1;
                  v57[0] = MEMORY[0x1E0C809B0];
                  v57[1] = 3221225472;
                  v57[2] = __C3DSceneCreateHitTestResultsWithSegment_block_invoke_2;
                  v57[3] = &unk_1EA59E3E0;
                  v61 = PositionSource;
                  v60 = &v68;
                  memcpy(v58, __src, sizeof(v58));
                  v62 = ValueAtIndex;
                  v59 = v74;
                  v55[0] = v64;
                  v55[1] = v65;
                  v55[2] = v66;
                  v56 = v67;
                  C3DIndicesContentEnumeratePrimitivesByEvaluatingPrimitiveRanges((uint64_t)v55, (uint64_t)v57, v66);
                }
              }
            }
          }
        }
        v52 = ValueAtIndex[6];
        v52.i32[3] = *((_DWORD *)v69 + 6);
        C3DAuthoringEnvironmentAppendDebugBoundingSphere(*(uint64_t *)&__src[26], ValueAtIndex[6].i64[0], v52.i64[1], 0, &v73);
        f32 = ValueAtIndex[7].f32;
        v78 = (simd_float4x4)vld4q_f32(f32);
        v77 = __invert_f4(v78);
        v77.columns[1] = (simd_float4)vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32((float32x4_t)v77.columns[1], *(float32x2_t *)ValueAtIndex[5].f32, 1), (float32x4_t)v77.columns[0], COERCE_FLOAT(*(_OWORD *)&ValueAtIndex[5])), (float32x4_t)v77.columns[2], ValueAtIndex[5], 2);
        v77.columns[0] = (simd_float4)vmulq_f32((float32x4_t)v77.columns[1], (float32x4_t)v77.columns[1]);
        v77.columns[0].i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v77.columns[0], 2), vadd_f32(*(float32x2_t *)v77.columns[0].f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v77.columns[0].f32, 1))).u32[0];
        *(float32x2_t *)v77.columns[2].f32 = vrsqrte_f32((float32x2_t)v77.columns[0].u32[0]);
        *(float32x2_t *)v77.columns[2].f32 = vmul_f32(*(float32x2_t *)v77.columns[2].f32, vrsqrts_f32((float32x2_t)v77.columns[0].u32[0], vmul_f32(*(float32x2_t *)v77.columns[2].f32, *(float32x2_t *)v77.columns[2].f32)));
        C3DAuthoringEnvironmentAppendDebugRay(*(uint64_t *)&__src[26], 0, (float *)v72, ValueAtIndex[6], vaddq_f32(ValueAtIndex[6], vmulq_n_f32((float32x4_t)v77.columns[1], vmul_f32(*(float32x2_t *)v77.columns[2].f32, vrsqrts_f32((float32x2_t)v77.columns[0].u32[0], vmul_f32(*(float32x2_t *)v77.columns[2].f32, *(float32x2_t *)v77.columns[2].f32))).f32[0])));
        _Block_object_dispose(&v68, 8);
      }
    }
    C3DAuthoringEnvironmentEndTimedRecord(*(uint64_t *)&__src[26]);
  }
  return *((_QWORD *)&__src[19] + 1);
}

void sub_1DCD554F4(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x290], 8);
  _Unwind_Resume(a1);
}

void scn_ray_create_segment()
{
  __asm { FMOV            V2.4S, #1.0 }
}

uint64_t _C3DHitTestSortFunc(uint64_t a1, uint64_t a2, float32x4_t *a3)
{
  float32x4_t *WorldPosition;
  float32x4_t *v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  unsigned __int8 v13;
  unsigned __int8 v14;

  WorldPosition = (float32x4_t *)C3DHitTestResultGetWorldPosition(a1);
  v6 = (float32x4_t *)C3DHitTestResultGetWorldPosition(a2);
  v7 = vsubq_f32(*WorldPosition, *a3);
  v8 = vmulq_f32(v7, v7);
  v9 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v8, 2), vaddq_f32(v8, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.f32, 1)));
  v10 = vsubq_f32(*v6, *a3);
  v11 = vmulq_f32(v10, v10);
  v12 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 2), vaddq_f32(v11, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 1)));
  v13 = vmovn_s32(vcgtq_f32(v12, v9)).u8[0];
  v14 = vmovn_s32(vcgtq_f32(v9, v12)).u8[0];
  if ((v13 & 1) != 0)
    return -1;
  else
    return v14 & 1;
}

uint64_t C3DSceneCreateHitTestResultsAtPoint(__n128 *a1, float32x4_t *a2, const __CFDictionary *a3, double a4, __n128 a5)
{
  NSObject *v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v22;
  const void *Value;
  __n128 *WorldMatrix;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float32x4_t v34;
  int32x4_t v35;
  float32x2_t v36;
  float32x2_t v37;
  float32x4_t v38;
  float32x4_t v39;
  double v40;
  __n128 v41;
  float32x4_t v42;
  float32x4_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __n128 v58[2];
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  if (a1
    || (v40 = a4,
        v41 = a5,
        v8 = scn_default_log(),
        v9 = os_log_type_enabled(v8, OS_LOG_TYPE_FAULT),
        a4 = v40,
        a5 = v41,
        !v9))
  {
    if (a2)
      goto LABEL_4;
LABEL_13:
    v26 = scn_default_log();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_FAULT))
      C3DNodeGetProjectionInfos_cold_1(v26, v27, v28, v29, v30, v31, v32, v33);
    return 0;
  }
  C3DSceneCreateHitTestResultsWithSegment_cold_2(v8, v10, v11, v12, v13, v14, v15, v16);
  a4 = v40;
  a5 = v41;
  if (!a2)
    goto LABEL_13;
LABEL_4:
  __asm { FMOV            V3.4S, #1.0 }
  *(double *)&_Q3 = a4;
  v44 = *(unint64_t *)&a4;
  v45 = _Q3;
  v22 = _C3DUnProjectPoints((uint64_t)&v44, 2, a2, (uint64_t)a1, 0, (float32x4_t *)v58, a5);
  v42 = (float32x4_t)v58[0];
  v43 = (float32x4_t)v58[1];
  if (v22)
  {
    if (!a3)
      return C3DSceneCreateHitTestResultsWithSegment(a1, &v42, a3);
    Value = CFDictionaryGetValue(a3, CFSTR("kHitTestClipToZRange"));
    if (!Value || CFEqual((CFTypeRef)*MEMORY[0x1E0C9AE50], Value))
      return C3DSceneCreateHitTestResultsWithSegment(a1, &v42, a3);
    v56 = 0u;
    v57 = 0u;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    if (C3DNodeGetProjectionInfos((uint64_t)a2, (uint64_t)&v44))
    {
      if ((v44 & 1) != 0)
      {
        *(unint64_t *)((char *)v58[0].n128_u64 + 4) = 0;
        v58[0].n128_u32[0] = 0;
        C3DNodeGetWorldPosition(a2, v58);
        v34 = vsubq_f32(v43, v42);
        v35 = (int32x4_t)vmulq_f32(v34, v34);
        v35.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v35, 2), vadd_f32(*(float32x2_t *)v35.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v35.i8, 1))).u32[0];
        v36 = vrsqrte_f32((float32x2_t)v35.u32[0]);
        v37 = vmul_f32(v36, vrsqrts_f32((float32x2_t)v35.u32[0], vmul_f32(v36, v36)));
        v38 = vmulq_n_f32(v34, vmul_f32(v37, vrsqrts_f32((float32x2_t)v35.u32[0], vmul_f32(v37, v37))).f32[0]);
        v39 = vmulq_f32(vsubq_f32(v42, (float32x4_t)v58[0]), v38);
        v42 = vmlsq_lane_f32(v42, v38, (float32x2_t)*(_OWORD *)&vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v39, 2), vaddq_f32(v39, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v39.f32, 1))), 0);
      }
      else
      {
        WorldMatrix = (__n128 *)C3DNodeGetWorldMatrix(a2);
        C3DMatrix4x4GetTranslation(WorldMatrix, (__n128 *)&v42);
      }
      return C3DSceneCreateHitTestResultsWithSegment(a1, &v42, a3);
    }
  }
  return 0;
}

uint64_t C3DHitTestResultCreateFromBulletResults(float32x4_t *a1, float32x4_t a2, float32x4_t a3)
{
  uint64_t v4;
  float32x4_t *WorldMatrix;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  __int128 v9;
  __int128 v10;
  float32x4_t v14;
  simd_float4 v15;
  simd_float4 v16;
  simd_float4 v17;
  simd_float4x4 v18;

  v4 = C3DHitTestResultCreate();
  WorldMatrix = C3DNodeGetWorldMatrix(a1);
  v6 = WorldMatrix[3];
  v8 = *WorldMatrix;
  v7 = WorldMatrix[1];
  *(float32x4_t *)(v4 + 144) = WorldMatrix[2];
  *(float32x4_t *)(v4 + 160) = v6;
  *(float32x4_t *)(v4 + 112) = v8;
  *(float32x4_t *)(v4 + 128) = v7;
  memset(&v18, 0, sizeof(v18));
  C3DMatrix4x4Invert((simd_float4x4 *)(v4 + 112), &v18);
  *(float32x4_t *)(v4 + 96) = a2;
  v14 = (float32x4_t)v18.columns[0];
  v15 = v18.columns[1];
  v16 = v18.columns[2];
  v17 = v18.columns[3];
  *(double *)&v9 = C3DVector3MultMatrix4x4(&v14, a2);
  *(_OWORD *)(v4 + 64) = v9;
  C3DHitTestResultSetNode(v4, a1);
  v14 = (float32x4_t)v18.columns[0];
  v15 = v18.columns[1];
  v16 = v18.columns[2];
  v17 = v18.columns[3];
  *(double *)&v10 = C3DVector3Rotate((float32x2_t *)&v14, a3);
  *(_OWORD *)(v4 + 80) = v10;
  return v4;
}

void OUTLINED_FUNCTION_4_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 0x16u);
}

uint64_t C3DIntersectionRay3Plane(uint64_t a1, float *a2, float32x4_t *a3)
{
  float32x4_t *v6;
  float32x4_t *v7;
  float v8;
  float v9;
  float v10;
  float v11;

  v6 = (float32x4_t *)C3DSceneSourcePerformConsistencyCheck(a1);
  v7 = (float32x4_t *)C3DRay3Vector(a1);
  v8 = a2[1];
  v9 = a2[2];
  v10 = (float)((float)(v7->f32[1] * v8) + (float)(v7->f32[0] * *a2)) + (float)(v7->f32[2] * v9);
  if (v10 == 0.0)
    return 0;
  v11 = (float)-(float)(a2[3]
                      + (float)((float)((float)(v8 * v6->f32[1]) + (float)(*a2 * v6->f32[0])) + (float)(v9 * v6->f32[2])))
      / v10;
  if (v11 < 0.0)
    return 0;
  if (a3)
    *a3 = vmlaq_n_f32(*v6, *v7, v11);
  return 1;
}

BOOL C3DIntersectionLinePlane(uint64_t a1, float *a2, float32x4_t *a3)
{
  float32x4_t *v6;
  float32x4_t *v7;
  float v8;
  float v9;
  float v10;

  v6 = (float32x4_t *)C3DSceneSourcePerformConsistencyCheck(a1);
  v7 = (float32x4_t *)C3DRay3Vector(a1);
  v8 = a2[1];
  v9 = a2[2];
  v10 = (float)((float)(v7->f32[1] * v8) + (float)(v7->f32[0] * *a2)) + (float)(v7->f32[2] * v9);
  if (a3 && v10 != 0.0)
    *a3 = vmlaq_n_f32(*v6, *v7, (float)-(float)(a2[3]+ (float)((float)((float)(v8 * v6->f32[1]) + (float)(*a2 * v6->f32[0]))+ (float)(v9 * v6->f32[2])))/ v10);
  return v10 != 0.0;
}

BOOL C3DIntersectionSegment3Plane(float32x4_t *a1, float *a2, float32x4_t *a3)
{
  int v6;
  _BOOL8 result;
  float32x4_t *v8;
  float32x4_t *v9;
  float32x4_t v10;
  float v11;
  float32x4_t v12[2];
  float32x4_t v13;

  v13.i32[2] = 0;
  v13.i64[0] = 0;
  memset(v12, 0, sizeof(v12));
  C3DRay3MakeWithSegment(v12, a1);
  v6 = C3DIntersectionRay3Plane((uint64_t)v12, a2, &v13);
  result = 0;
  if (v6)
  {
    v8 = (float32x4_t *)C3DSceneSourcePerformConsistencyCheck(a1);
    v9 = (float32x4_t *)C3DRay3Vector((uint64_t)a1);
    v10 = vmulq_f32(vsubq_f32(v13, *v8), vsubq_f32(v13, *v9));
    v11 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2), vaddq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1))).f32[0];
    result = v11 <= 0.0;
    if (a3)
    {
      if (v11 <= 0.0)
      {
        *a3 = v13;
        return 1;
      }
    }
  }
  return result;
}

CFStringRef _C3DListCFCopyDebugDescription(_QWORD *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DList %p: head %p, tail %p, %ld objects>"), a1, a1[2], a1[3], a1[6]);
}

uint64_t C3DListCreate()
{
  if (C3DListGetTypeID_onceToken != -1)
    dispatch_once(&C3DListGetTypeID_onceToken, &__block_literal_global_5_0);
  return C3DTypeCreateInstance_(C3DListGetTypeID_typeID, 0x28uLL);
}

uint64_t C3DListRemoveAllObjects(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;

  result = C3DListGetLastLinkableObject((uint64_t)a1);
  if (result)
  {
    v3 = (_QWORD *)result;
    do
    {
      C3DListRemoveLinkableObject(a1, v3);
      result = C3DListGetLastLinkableObject((uint64_t)a1);
      v3 = (_QWORD *)result;
    }
    while (result);
  }
  return result;
}

uint64_t C3DListGetLastLinkableObject(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DListGetLastLinkableObject_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 24);
}

void C3DListRemoveLinkableObject(_QWORD *a1, _QWORD *cf)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DListGetLastLinkableObject_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*((_BYTE *)cf + 32))
  {
    v12 = cf[3];
    if (v12)
    {
      *(_QWORD *)(v12 + 16) = cf[2];
      v13 = cf[2];
      if (v13)
      {
LABEL_7:
        *(_QWORD *)(v13 + 24) = v12;
LABEL_16:
        *((_BYTE *)cf + 32) = 0;
        --a1[6];
        CFRelease(cf);
        return;
      }
LABEL_12:
      if ((_QWORD *)a1[3] == cf)
      {
        a1[3] = v12;
      }
      else
      {
        v22 = scn_default_log();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          C3DListRemoveLinkableObject_cold_1(v22, v23, v24, v25, v26, v27, v28, v29);
      }
      goto LABEL_16;
    }
    if ((_QWORD *)a1[2] == cf)
    {
      v13 = cf[2];
      a1[2] = v13;
      if (v13)
        goto LABEL_7;
      goto LABEL_12;
    }
    v14 = scn_default_log();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      C3DListRemoveLinkableObject_cold_2(v14, v15, v16, v17, v18, v19, v20, v21);
  }
}

CFTypeRef C3DListAddLinkableObjectFirst(_QWORD *a1, CFTypeRef cf)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  CFTypeRef result;
  _QWORD *v21;
  uint64_t v22;

  if (!a1 && (v4 = scn_default_log(), os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)))
  {
    C3DListGetLastLinkableObject_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
    if (cf)
      goto LABEL_6;
  }
  else if (cf)
  {
    goto LABEL_6;
  }
  v12 = scn_default_log();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    C3DGeometryTrackNode_cold_2(v12, v13, v14, v15, v16, v17, v18, v19);
LABEL_6:
  result = CFRetain(cf);
  v21 = (_QWORD *)a1[2];
  *((_QWORD *)cf + 2) = v21;
  *((_QWORD *)cf + 3) = 0;
  if (!v21)
    v21 = a1;
  v21[3] = cf;
  a1[2] = cf;
  v22 = a1[6] + 1;
  a1[5] = -1;
  a1[6] = v22;
  *((_BYTE *)cf + 32) = 1;
  return result;
}

uint64_t C3DListMoveLinkableObjectFirst(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a2 + 24);
  if (v2)
  {
    *(_QWORD *)(v2 + 16) = *(_QWORD *)(a2 + 16);
    v3 = *(_QWORD *)(a2 + 16);
    if (v3)
      *(_QWORD *)(v3 + 24) = v2;
    if (*(_QWORD *)(result + 24) == a2)
      *(_QWORD *)(result + 24) = *(_QWORD *)(a2 + 24);
    v4 = *(_QWORD *)(result + 16);
    *(_QWORD *)(a2 + 16) = v4;
    *(_QWORD *)(a2 + 24) = 0;
    if (v4)
      *(_QWORD *)(v4 + 24) = a2;
    *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

C3D::DrawNodesPass *C3D::RenderGraph::createPass<C3D::SSAODepthNormalPass,C3D::DrawNodesPass *&,C3D::SSAOPassData *&>(uint64_t a1, C3D::Pass **a2, uint64_t *a3)
{
  C3D::DrawNodesPass *Aligned;

  Aligned = (C3D::DrawNodesPass *)C3DScratchAllocatorAllocateAligned(*(_QWORD *)(a1 + 16), 5376, 16, 0);
  C3D::SSAODepthNormalPass::SSAODepthNormalPass(Aligned, (C3D::RenderGraph *)a1, *a2, *a3);
  C3D::RenderGraph::addPass((C3D::RenderGraph *)a1, Aligned);
  if (*(_BYTE *)(a1 + 209))
    (*(void (**)(C3D::DrawNodesPass *))(*(_QWORD *)Aligned + 8))(Aligned);
  return Aligned;
}

C3D::GenerateMipmapPass *C3D::RenderGraph::createPass<C3D::GenerateMipmapPass,C3D::DrawNodesPass *&>(uint64_t a1, C3D::Pass **a2)
{
  C3D::GenerateMipmapPass *Aligned;
  Parameters v6;

  Aligned = (C3D::GenerateMipmapPass *)C3DScratchAllocatorAllocateAligned(*(_QWORD *)(a1 + 16), 112, 8, 0);
  *(_QWORD *)&v6.var0 = 0;
  C3D::GenerateMipmapPass::GenerateMipmapPass(Aligned, (C3D::RenderGraph *)a1, *a2, v6);
  C3D::RenderGraph::addPass((C3D::RenderGraph *)a1, Aligned);
  if (*(_BYTE *)(a1 + 209))
    (*(void (**)(C3D::GenerateMipmapPass *))(*(_QWORD *)Aligned + 8))(Aligned);
  return Aligned;
}

C3D::ComputePass *C3D::RenderGraph::createPass<C3D::SSAOMinMaxOffsetPass,C3D::DrawNodesPass *&,C3D::SSAOPassData *&>(uint64_t a1, C3D::Pass **a2, uint64_t *a3)
{
  C3D::ComputePass *Aligned;

  Aligned = (C3D::ComputePass *)C3DScratchAllocatorAllocateAligned(*(_QWORD *)(a1 + 16), 128, 8, 0);
  C3D::SSAOMinMaxOffsetPass::SSAOMinMaxOffsetPass(Aligned, (C3D::RenderGraph *)a1, *a2, *a3);
  C3D::RenderGraph::addPass((C3D::RenderGraph *)a1, Aligned);
  if (*(_BYTE *)(a1 + 209))
    (*(void (**)(C3D::ComputePass *))(*(_QWORD *)Aligned + 8))(Aligned);
  return Aligned;
}

C3D::RenderPass *C3D::RenderGraph::createPass<C3D::SSAORaytracePass,C3D::DrawNodesPass *&,C3D::SSAOPassData *&>(uint64_t a1, C3D::Pass **a2, uint64_t *a3)
{
  C3D::RenderPass *Aligned;

  Aligned = (C3D::RenderPass *)C3DScratchAllocatorAllocateAligned(*(_QWORD *)(a1 + 16), 256, 16, 0);
  C3D::SSAORaytracePass::SSAORaytracePass(Aligned, (C3D::RenderGraph *)a1, *a2, *a3);
  C3D::RenderGraph::addPass((C3D::RenderGraph *)a1, Aligned);
  if (*(_BYTE *)(a1 + 209))
    (*(void (**)(C3D::RenderPass *))(*(_QWORD *)Aligned + 8))(Aligned);
  return Aligned;
}

C3D::ComputePass *C3D::RenderGraph::createPass<C3D::SSAOBlurPass,C3D::DrawNodesPass *&,C3D::SSAOPassData *&,BOOL>(uint64_t a1, C3D::Pass **a2, uint64_t *a3, char *a4)
{
  C3D::ComputePass *Aligned;

  Aligned = (C3D::ComputePass *)C3DScratchAllocatorAllocateAligned(*(_QWORD *)(a1 + 16), 128, 8, 0);
  C3D::SSAOBlurPass::SSAOBlurPass(Aligned, (C3D::RenderGraph *)a1, *a2, *a3, *a4);
  C3D::RenderGraph::addPass((C3D::RenderGraph *)a1, Aligned);
  if (*(_BYTE *)(a1 + 209))
    (*(void (**)(C3D::ComputePass *))(*(_QWORD *)Aligned + 8))(Aligned);
  return Aligned;
}

C3D::ComputePass *C3D::RenderGraph::createPass<C3D::SSAOUpSamplePass,C3D::DrawNodesPass *&,C3D::SSAOPassData *&>(uint64_t a1, C3D::Pass **a2, uint64_t *a3)
{
  C3D::ComputePass *Aligned;

  Aligned = (C3D::ComputePass *)C3DScratchAllocatorAllocateAligned(*(_QWORD *)(a1 + 16), 128, 8, 0);
  C3D::SSAOUpSamplePass::SSAOUpSamplePass(Aligned, (C3D::RenderGraph *)a1, *a2, *a3);
  C3D::RenderGraph::addPass((C3D::RenderGraph *)a1, Aligned);
  if (*(_BYTE *)(a1 + 209))
    (*(void (**)(C3D::ComputePass *))(*(_QWORD *)Aligned + 8))(Aligned);
  return Aligned;
}

__n128 C3DMatrix4x4MakeRotation(_OWORD *a1, float32x4_t *a2)
{
  float32x4_t v2;
  __int128 v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float v7;
  __int128 v8;
  float32x2_t v9;
  __int128 v10;
  __n128 result;

  v2 = *a2;
  v8 = *MEMORY[0x1E0C83FF0];
  v3 = *(_OWORD *)(MEMORY[0x1E0C83FF0] + 16);
  v4 = vmulq_f32(v2, v2);
  v5 = vaddq_f32(v4, v4);
  v6 = vmulq_laneq_f32(v2, v2, 3);
  v7 = vmulq_lane_f32(v2, *(float32x2_t *)v2.f32, 1).f32[0];
  *(float *)&v8 = (float)(1.0 - v5.f32[1]) - v5.f32[2];
  *((float *)&v8 + 1) = (float)(v7 + v6.f32[2]) + (float)(v7 + v6.f32[2]);
  *(float *)&v3 = (float)(v7 - v6.f32[2]) + (float)(v7 - v6.f32[2]);
  v5.f32[0] = 1.0 - v5.f32[0];
  *((float *)&v3 + 1) = v5.f32[0] - v5.f32[2];
  *(float32x2_t *)v2.f32 = vmul_laneq_f32(*(float32x2_t *)v2.f32, v2, 2);
  *((float *)&v8 + 2) = (float)(v2.f32[0] - v6.f32[1]) + (float)(v2.f32[0] - v6.f32[1]);
  *((float *)&v3 + 2) = (float)(v2.f32[1] + v6.f32[0]) + (float)(v2.f32[1] + v6.f32[0]);
  *(int32x2_t *)v6.f32 = vrev64_s32(*(int32x2_t *)v6.f32);
  v9.i32[0] = vadd_f32(*(float32x2_t *)v2.f32, *(float32x2_t *)v6.f32).u32[0];
  v9.i32[1] = vsub_f32(*(float32x2_t *)&v2, *(float32x2_t *)&v6).i32[1];
  v10 = *(_OWORD *)(MEMORY[0x1E0C83FF0] + 48);
  *(float32x2_t *)v6.f32 = vadd_f32(v9, v9);
  v6.i32[3] = HIDWORD(*(_QWORD *)(MEMORY[0x1E0C83FF0] + 40));
  v6.f32[2] = v5.f32[0] - v5.f32[1];
  *a1 = v8;
  a1[1] = v3;
  a1[2] = v6;
  a1[3] = v10;
  result.n128_u64[0] = v8;
  result.n128_u32[2] = DWORD2(v8);
  return result;
}

float32x4_t C3DMatrix4x4MultFloat(float32x4_t *a1, float32x4_t *a2, float a3)
{
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t result;

  v3 = vmulq_n_f32(*a1, a3);
  v4 = vmulq_n_f32(a1[1], a3);
  v5 = vmulq_n_f32(a1[2], a3);
  result = vmulq_n_f32(a1[3], a3);
  *a2 = v3;
  a2[1] = v4;
  a2[2] = v5;
  a2[3] = result;
  return result;
}

float32x4_t C3DMatrix4x4Add(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3)
{
  float32x4_t result;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;

  result = vaddq_f32(*a1, *a2);
  v4 = vaddq_f32(a1[1], a2[1]);
  v5 = vaddq_f32(a1[2], a2[2]);
  v6 = vaddq_f32(a1[3], a2[3]);
  *a3 = result;
  a3[1] = v4;
  a3[2] = v5;
  a3[3] = v6;
  return result;
}

float32x4_t C3DMatrix4x4Sub(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3)
{
  float32x4_t result;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;

  result = vsubq_f32(*a1, *a2);
  v4 = vsubq_f32(a1[1], a2[1]);
  v5 = vsubq_f32(a1[2], a2[2]);
  v6 = vsubq_f32(a1[3], a2[3]);
  *a3 = result;
  a3[1] = v4;
  a3[2] = v5;
  a3[3] = v6;
  return result;
}

float C3DMatrix4x4Distance(float32x4_t *a1)
{
  float32x4_t v1;
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  int8x16_t v5;

  v1 = vsubq_f32(*a1, *a1);
  v2 = vsubq_f32(a1[1], a1[1]);
  v3 = vsubq_f32(a1[2], a1[2]);
  v4 = vsubq_f32(a1[3], a1[3]);
  v5 = (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1, v1), v2, v2), v3, v3), v4, v4);
  return vaddv_f32(vadd_f32(*(float32x2_t *)v5.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL)));
}

__n128 C3DMatrix4x4Mult3x3(uint64_t a1, float32x4_t *a2, uint64_t a3)
{
  uint64_t v3;
  __int128 v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  __int128 v8;
  __int128 v9;
  __n128 result;
  _OWORD v11[3];
  __n128 v12;
  __int128 v13;
  __int128 v14;

  v3 = 0;
  v4 = *(_OWORD *)(a1 + 32);
  v5 = *a2;
  v6 = a2[1];
  v7 = a2[2];
  HIDWORD(v4) = 0;
  v11[2] = v4;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  do
  {
    *(float32x4_t *)((char *)&v12 + v3 * 16) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v5, COERCE_FLOAT(v11[v3])), v6, *(float32x2_t *)&v11[v3], 1), v7, (float32x4_t)v11[v3], 2);
    ++v3;
  }
  while (v3 != 3);
  result = v12;
  v8 = v13;
  v9 = v14;
  result.n128_u32[3] = *(_DWORD *)(a3 + 12);
  HIDWORD(v8) = *(_DWORD *)(a3 + 28);
  *(__n128 *)a3 = result;
  *(_OWORD *)(a3 + 16) = v8;
  HIDWORD(v9) = *(_DWORD *)(a3 + 44);
  *(_OWORD *)(a3 + 32) = v9;
  return result;
}

double C3DMatrix4x4MakeZero(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

__n128 C3DMatrix4x4MakeTranslation(uint64_t a1, __n128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;

  result = *a2;
  v2 = *(_OWORD *)(MEMORY[0x1E0C83FF0] + 16);
  v3 = *(_OWORD *)(MEMORY[0x1E0C83FF0] + 32);
  result.n128_u32[3] = *(_DWORD *)(MEMORY[0x1E0C83FF0] + 60);
  *(_OWORD *)a1 = *MEMORY[0x1E0C83FF0];
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

float32x4_t C3DMatrix4x4Translate(float32x4_t *a1, float32x4_t *a2)
{
  float32x4_t result;

  result = vaddq_f32(*a2, a1[3]);
  result.i32[3] = HIDWORD(*(_OWORD *)&a1[3]);
  a1[3] = result;
  return result;
}

double C3DMatrix4x4MakeScale(_OWORD *a1, _QWORD *a2)
{
  __int128 v2;
  unint64_t v3;
  double result;

  *(_QWORD *)&v2 = 0;
  LODWORD(v3) = 0;
  HIDWORD(v3) = HIDWORD(*a2);
  *((_QWORD *)&v2 + 1) = a2[1];
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  result = 0.0;
  a1[2] = v2;
  a1[3] = xmmword_1DD007610;
  return result;
}

float C3DMatrix4x4MakeRotationX(_OWORD *a1, float a2)
{
  __float2 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  float result;

  v3 = __sincosf_stret(a2);
  v4 = *(_OWORD *)(MEMORY[0x1E0C83FF0] + 16);
  DWORD1(v4) = LODWORD(v3.__cosval);
  v5 = *(_OWORD *)(MEMORY[0x1E0C83FF0] + 32);
  v6 = *(_OWORD *)(MEMORY[0x1E0C83FF0] + 48);
  DWORD2(v4) = LODWORD(v3.__sinval);
  result = -v3.__sinval;
  *((float *)&v5 + 1) = -v3.__sinval;
  DWORD2(v5) = LODWORD(v3.__cosval);
  *a1 = *MEMORY[0x1E0C83FF0];
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  return result;
}

void C3DMatrix4x4MakeRotationY(_OWORD *a1, float a2)
{
  __float2 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v3 = __sincosf_stret(a2);
  v4 = *MEMORY[0x1E0C83FF0];
  v5 = *(_OWORD *)(MEMORY[0x1E0C83FF0] + 16);
  *(float *)&v4 = v3.__cosval;
  v6 = *(_OWORD *)(MEMORY[0x1E0C83FF0] + 32);
  v7 = *(_OWORD *)(MEMORY[0x1E0C83FF0] + 48);
  *((float *)&v4 + 2) = -v3.__sinval;
  *(float *)&v6 = v3.__sinval;
  DWORD2(v6) = LODWORD(v3.__cosval);
  *a1 = v4;
  a1[1] = v5;
  a1[2] = v6;
  a1[3] = v7;
}

float C3DMatrix4x4MakeRotationZ(_OWORD *a1, float a2)
{
  __float2 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  float result;

  v3 = __sincosf_stret(a2);
  v4 = *MEMORY[0x1E0C83FF0];
  v5 = *(_OWORD *)(MEMORY[0x1E0C83FF0] + 16);
  *(_QWORD *)&v4 = __PAIR64__(LODWORD(v3.__sinval), LODWORD(v3.__cosval));
  v6 = *(_OWORD *)(MEMORY[0x1E0C83FF0] + 32);
  v7 = *(_OWORD *)(MEMORY[0x1E0C83FF0] + 48);
  result = -v3.__sinval;
  *(_QWORD *)&v5 = __PAIR64__(LODWORD(v3.__cosval), -v3.__sinval);
  *a1 = v4;
  a1[1] = v5;
  a1[2] = v6;
  a1[3] = v7;
  return result;
}

double C3DMatrix4x4MakeEulerRotation(float32x4_t *a1, _OWORD *a2)
{
  __float2 v3;
  float32x4_t v4;
  float32x4_t v5;
  __float2 v6;
  float32x4_t v7;
  float32x4_t v8;
  __float2 v9;
  unint64_t v10;
  float32x4_t v11;
  float32x4_t v12;
  unint64_t v13;
  double result;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  __int128 v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;

  v25 = *a2;
  v3 = __sincosf_stret(COERCE_FLOAT(*a2));
  v26 = *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 32);
  v20 = *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 16);
  v21 = *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 48);
  v4 = v20;
  v4.i32[1] = LODWORD(v3.__cosval);
  v4.i32[2] = LODWORD(v3.__sinval);
  v23 = v4;
  v24 = *(float32x4_t *)MEMORY[0x1E0C83FF0];
  v5 = v26;
  v5.f32[1] = -v3.__sinval;
  v5.i32[2] = LODWORD(v3.__cosval);
  v22 = v5;
  v6 = __sincosf_stret(*((float *)&v25 + 1));
  v7 = v24;
  v7.i32[0] = LODWORD(v6.__cosval);
  v7.f32[2] = -v6.__sinval;
  v8 = v26;
  v8.i32[0] = LODWORD(v6.__sinval);
  v8.i32[2] = LODWORD(v6.__cosval);
  v18 = v8;
  v19 = v7;
  v9 = __sincosf_stret(*((float *)&v25 + 2));
  v12.i64[1] = v24.i64[1];
  v10 = 0;
  v11.i64[1] = v20.i64[1];
  v27 = v24;
  v12.i32[0] = LODWORD(v9.__cosval);
  v28 = v23;
  v29 = v22;
  v30 = v21;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  do
  {
    *(float32x4_t *)((char *)&v31 + v10) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v19, COERCE_FLOAT(*(_OWORD *)((char *)&v27 + v10))), v20, *(float32x2_t *)&v27.f32[v10 / 4], 1), v18, *(float32x4_t *)((char *)&v27 + v10), 2), v21, *(float32x4_t *)((char *)&v27 + v10), 3);
    v10 += 16;
  }
  while (v10 != 64);
  v13 = 0;
  v12.i32[1] = LODWORD(v9.__sinval);
  v11.i32[1] = LODWORD(v9.__cosval);
  v27 = v31;
  v28 = v32;
  v29 = v33;
  v30 = v34;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  do
  {
    v11.f32[0] = -v9.__sinval;
    *(float32x4_t *)((char *)&v31 + v13) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v12, COERCE_FLOAT(*(_OWORD *)((char *)&v27 + v13))), v11, *(float32x2_t *)&v27.f32[v13 / 4], 1), v26, *(float32x4_t *)((char *)&v27 + v13), 2), v21, *(float32x4_t *)((char *)&v27 + v13), 3);
    v13 += 16;
  }
  while (v13 != 64);
  result = *(double *)v31.i64;
  v15 = v32;
  v16 = v33;
  v17 = v34;
  *a1 = v31;
  a1[1] = v15;
  a1[2] = v16;
  a1[3] = v17;
  return result;
}

float32x4_t C3DMatrix4x4MakeAffine(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, float32x2_t *a4)
{
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float v10;
  float32x4_t v11;
  float32x2_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t result;

  v4 = *a3;
  v6 = *(float32x4_t *)MEMORY[0x1E0C83FF0];
  v5 = *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 16);
  v7 = vmulq_f32(v4, v4);
  v8 = vaddq_f32(v7, v7);
  v9 = vmulq_laneq_f32(v4, v4, 3);
  v10 = vmulq_lane_f32(v4, *(float32x2_t *)v4.f32, 1).f32[0];
  v6.f32[0] = (float)(1.0 - v8.f32[1]) - v8.f32[2];
  v6.f32[1] = (float)(v10 + v9.f32[2]) + (float)(v10 + v9.f32[2]);
  v5.f32[0] = (float)(v10 - v9.f32[2]) + (float)(v10 - v9.f32[2]);
  v8.f32[0] = 1.0 - v8.f32[0];
  v5.f32[1] = v8.f32[0] - v8.f32[2];
  *(float32x2_t *)v4.f32 = vmul_laneq_f32(*(float32x2_t *)v4.f32, v4, 2);
  v6.f32[2] = (float)(v4.f32[0] - v9.f32[1]) + (float)(v4.f32[0] - v9.f32[1]);
  v5.f32[2] = (float)(v4.f32[1] + v9.f32[0]) + (float)(v4.f32[1] + v9.f32[0]);
  v11 = *(float32x4_t *)a4->f32;
  *(int32x2_t *)v9.f32 = vrev64_s32(*(int32x2_t *)v9.f32);
  v12.i32[0] = vadd_f32(*(float32x2_t *)v4.f32, *(float32x2_t *)v9.f32).u32[0];
  v12.i32[1] = vsub_f32(*(float32x2_t *)&v4, *(float32x2_t *)&v9).i32[1];
  *(float32x2_t *)v9.f32 = vadd_f32(v12, v12);
  v9.i32[3] = HIDWORD(*(_QWORD *)(MEMORY[0x1E0C83FF0] + 40));
  v9.f32[2] = v8.f32[0] - v8.f32[1];
  v13 = vaddq_f32(*a2, *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 48));
  v13.i32[3] = HIDWORD(*(_OWORD *)(MEMORY[0x1E0C83FF0] + 48));
  v14 = vmulq_lane_f32(v5, *a4, 1);
  *a1 = vmulq_n_f32(v6, COERCE_FLOAT(*(_OWORD *)a4->f32));
  a1[1] = v14;
  result = vmulq_laneq_f32(v9, v11, 2);
  a1[2] = result;
  a1[3] = v13;
  return result;
}

void C3DMatrix4x4ComputeNormalMatrix(__n128 *a1, _OWORD *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  *(double *)&v3 = scn_matrix_compute_normal(a1->n128_f64[0], a1[1], a1[2]);
  *a2 = v3;
  a2[1] = v4;
  a2[2] = v5;
  a2[3] = v6;
}

uint64_t C3DMatrix4x4Project(float32x4_t *a1, float32x2_t *a2, float32x4_t *a3)
{
  float32x4_t v3;
  float32x2_t v4;
  float32x2_t v5;
  float32x2_t v6;

  v3 = vaddq_f32(a1[3], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*a1, COERCE_FLOAT(*(_OWORD *)a2->f32)), a1[1], *a2, 1), a1[2], *(float32x4_t *)a2->f32, 2));
  v4 = (float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v3, (int8x16_t)v3, 8uLL), 0);
  v5 = vrecpe_f32(v4);
  v6 = vmul_f32(v5, vrecps_f32(v4, v5));
  *a3 = vmulq_n_f32(v3, vmul_f32(v6, vrecps_f32(v4, v6)).f32[0]);
  return 1;
}

__n128 C3DMatrix4x4SetTranslation(__n128 *a1, __n128 result)
{
  result.n128_u32[3] = a1[3].n128_u32[3];
  a1[3] = result;
  return result;
}

float32x4_t C3DMatrix4x4ClearScale(float32x4_t *a1)
{
  float32x4_t v1;
  int32x4_t v2;
  float32x2_t v3;
  float32x2_t v4;
  float32x4_t v5;
  int32x4_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x4_t v9;
  float32x4_t v10;
  int32x4_t v11;
  float32x4_t result;

  v1 = a1[1];
  v2 = (int32x4_t)vmulq_f32(*a1, *a1);
  v2.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v2, 2), vadd_f32(*(float32x2_t *)v2.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v2.i8, 1))).u32[0];
  v3 = vrsqrte_f32((float32x2_t)v2.u32[0]);
  v4 = vmul_f32(v3, vrsqrts_f32((float32x2_t)v2.u32[0], vmul_f32(v3, v3)));
  v5 = vmulq_n_f32(*a1, vmul_f32(v4, vrsqrts_f32((float32x2_t)v2.u32[0], vmul_f32(v4, v4))).f32[0]);
  v5.i32[3] = HIDWORD(*(unsigned __int128 *)a1);
  v6 = (int32x4_t)vmulq_f32(v1, v1);
  v6.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v6, 2), vadd_f32(*(float32x2_t *)v6.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v6.i8, 1))).u32[0];
  v7 = vrsqrte_f32((float32x2_t)v6.u32[0]);
  v8 = vmul_f32(v7, vrsqrts_f32((float32x2_t)v6.u32[0], vmul_f32(v7, v7)));
  v9 = vmulq_n_f32(v1, vmul_f32(v8, vrsqrts_f32((float32x2_t)v6.u32[0], vmul_f32(v8, v8))).f32[0]);
  v9.i32[3] = v1.i32[3];
  v10 = a1[2];
  v11 = (int32x4_t)vmulq_f32(v10, v10);
  v11.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v11, 2), vadd_f32(*(float32x2_t *)v11.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v11.i8, 1))).u32[0];
  *a1 = v5;
  a1[1] = v9;
  *(float32x2_t *)v9.f32 = vrsqrte_f32((float32x2_t)v11.u32[0]);
  *(float32x2_t *)v9.f32 = vmul_f32(*(float32x2_t *)v9.f32, vrsqrts_f32((float32x2_t)v11.u32[0], vmul_f32(*(float32x2_t *)v9.f32, *(float32x2_t *)v9.f32)));
  result = vmulq_n_f32(v10, vmul_f32(*(float32x2_t *)v9.f32, vrsqrts_f32((float32x2_t)v11.u32[0], vmul_f32(*(float32x2_t *)v9.f32, *(float32x2_t *)v9.f32))).f32[0]);
  result.i32[3] = v10.i32[3];
  a1[2] = result;
  return result;
}

float32x4_t C3DMatrix4x4Lerp(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, float a4)
{
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t result;

  v4 = vmlaq_n_f32(vmulq_n_f32(*a2, a4), *a1, 1.0 - a4);
  v5 = vmlaq_n_f32(vmulq_n_f32(a2[1], a4), a1[1], 1.0 - a4);
  v6 = vmlaq_n_f32(vmulq_n_f32(a2[2], a4), a1[2], 1.0 - a4);
  result = vmlaq_n_f32(vmulq_n_f32(a2[3], a4), a1[3], 1.0 - a4);
  *a3 = v4;
  a3[1] = v5;
  a3[2] = v6;
  a3[3] = result;
  return result;
}

void C3DMatrix4x4Interpolate(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, float a4)
{
  int32x2_t v4;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  int32x4_t v12;
  float32x4_t v13;
  float v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  float32x4_t v23;
  uint32x4_t v24;
  __int32 v25;
  float32x4_t v26;
  float32x4_t v27;
  int32x4_t v28;
  float v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  _BOOL4 v33;
  float32x4_t v34;
  float32_t v37;
  float32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32_t v43;
  float32x4_t v44;
  int8x16_t v45;
  float32x4_t v46;
  float32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  float32x4_t v50;
  int32x4_t v51;
  float32x4_t v52;
  float v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  float32x4_t v61;
  uint32x4_t v62;
  int v63;
  float32x4_t v64;
  float32x4_t v65;
  float v66;
  int32x4_t v67;
  float v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32_t v78;
  float32x4_t v79;
  int8x16_t v80;
  float32x4_t v81;
  float32x4_t v82;
  unsigned int v83;
  float32x4_t v84;
  float32x4_t v85;
  float v90;
  float32x4_t v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float v105;
  float32x4_t v106;
  float32x2_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float v115;
  float v116;

  *(float *)v4.i32 = a4;
  v6 = *a1;
  v7 = a1[1];
  _Q2 = a1[2];
  v10 = *a2;
  v9 = a2[1];
  v11 = a2[2];
  v12 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q2, (int32x4_t)_Q2), (int8x16_t)_Q2, 0xCuLL), vnegq_f32(v7)), _Q2, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v7, (int32x4_t)v7), (int8x16_t)v7, 0xCuLL));
  v13 = vmulq_f32(*a1, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v12, v12), (int8x16_t)v12, 0xCuLL));
  _NF = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2), vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1))).f32[0] < 0.0;
  v15 = 1.0;
  if (_NF)
    v15 = -1.0;
  v16 = vmulq_f32(v6, v6);
  v17 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2), vaddq_f32(v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1)));
  v17.f32[0] = sqrtf(v17.f32[0]);
  v18 = vmulq_f32(v7, v7);
  v19 = vmulq_f32(_Q2, _Q2);
  v17.i32[1] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 2), vaddq_f32(v18, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 1))).f32[0]);
  v17.i32[2] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 2), vaddq_f32(v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 1))).f32[0]);
  v20 = vmulq_n_f32(v17, v15);
  v21 = vcltzq_f32(v20);
  v22 = (int32x4_t)vmvnq_s8(vorrq_s8((int8x16_t)v21, (int8x16_t)vcgezq_f32(v20)));
  v22.i32[3] = v22.i32[2];
  v22.i32[0] = vmaxvq_u32((uint32x4_t)v22);
  v21.i32[0] = -1;
  v23 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v22, v21), 0), (int8x16_t)v20, (int8x16_t)0);
  v24 = (uint32x4_t)vceqzq_f32(v23);
  v24.i32[3] = v24.i32[2];
  if ((vmaxvq_u32(v24) & 0x80000000) != 0)
  {
    v33 = 0;
    v34 = *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 48);
    _Q23 = v34;
    v23 = 0uLL;
  }
  else
  {
    v25 = v22.i32[0];
    v26 = vdivq_f32(v6, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v23.f32, 0));
    v27 = vdivq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v23.f32, 1));
    v28 = (int32x4_t)vdivq_f32(_Q2, (float32x4_t)vdupq_laneq_s32((int32x4_t)v23, 2));
    v29 = *(float *)&v28.i32[2] + (float)(v26.f32[0] + v27.f32[1]);
    if (v29 <= 0.0)
    {
      if (v26.f32[0] <= v27.f32[1] || v26.f32[0] <= *(float *)&v28.i32[2])
      {
        if (v27.f32[1] <= *(float *)&v28.i32[2])
        {
          v43 = (float)(*(float *)&v28.i32[2] + 1.0) - v26.f32[0];
          v44 = (float32x4_t)vzip2q_s32((int32x4_t)v26, vzip1q_s32(v28, (int32x4_t)v26));
          v45 = (int8x16_t)vrev64q_s32((int32x4_t)v27);
          v46 = (float32x4_t)vextq_s8(v45, v45, 8uLL);
          v46.i32[0] = v28.i32[0];
          v32.i64[0] = vaddq_f32(v44, v46).u64[0];
          v44.f32[2] = v43;
          v32.i64[1] = vsubq_f32(v44, v46).i64[1];
          v28.i32[0] = v32.i32[2];
        }
        else
        {
          v37 = (float)(v27.f32[1] + 1.0) - v26.f32[0];
          v38 = v27;
          v38.i32[0] = v26.i32[1];
          v27.i32[1] = v28.i32[2];
          v27.i32[2] = v28.i32[1];
          v39 = (int32x4_t)vaddq_f32(v38, v27);
          v38.f32[1] = v37;
          v38.i32[3] = v28.i32[0];
          v27.i32[3] = v26.i32[2];
          v40 = (int32x4_t)vsubq_f32(v38, v27);
          v32 = (float32x4_t)vtrn2q_s32(vrev64q_s32(v39), v40);
          v28.i32[0] = v40.i32[1];
        }
      }
      else
      {
        v41 = v26;
        v41.f32[0] = (float)(v26.f32[0] + 1.0) - v27.f32[1];
        v41.i32[3] = v27.i32[2];
        v42 = (float32x4_t)vextq_s8((int8x16_t)v28, (int8x16_t)v28, 8uLL);
        v28 = (int32x4_t)vsubq_f32(v41, v42);
        v42.i32[1] = v27.i32[0];
        v32 = vaddq_f32(v26, v42);
        v32.i32[0] = v28.i32[0];
        v32.i32[3] = v28.i32[3];
      }
    }
    else
    {
      v30 = (float32x4_t)vzip2q_s32((int32x4_t)v27, vuzp1q_s32((int32x4_t)v27, v28));
      v30.i32[2] = v26.i32[1];
      v31 = (float32x4_t)vtrn2q_s32(v28, vzip2q_s32(v28, (int32x4_t)v26));
      v31.i32[2] = v27.i32[0];
      v32 = vsubq_f32(v30, v31);
      v31.i32[3] = 1.0;
      v30.f32[3] = v29;
      v32.i32[3] = vaddq_f32(v30, v31).i32[3];
      v28.i32[0] = v32.i32[3];
    }
    v47 = vmulq_n_f32(v32, 0.5 / sqrtf(*(float *)v28.i32));
    v48 = vcltzq_f32(v47);
    v49 = (int32x4_t)vmvnq_s8(vorrq_s8((int8x16_t)v48, (int8x16_t)vcgezq_f32(v47)));
    v49.i32[0] = vmaxvq_u32((uint32x4_t)v49);
    v48.i32[0] = -1;
    v34 = *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 48);
    _Q23 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v49, v48), 0), (int8x16_t)v47, (int8x16_t)v34);
    v33 = (v49.i32[0] | v25) >= 0;
  }
  v50 = a1[3];
  v51 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v11, (int32x4_t)v11), (int8x16_t)v11, 0xCuLL), vnegq_f32(v9)), v11, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v9, (int32x4_t)v9), (int8x16_t)v9, 0xCuLL));
  v52 = vmulq_f32(v10, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v51, v51), (int8x16_t)v51, 0xCuLL));
  _NF = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v52, 2), vaddq_f32(v52, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v52.f32, 1))).f32[0] < 0.0;
  v53 = 1.0;
  if (_NF)
    v53 = -1.0;
  v54 = vmulq_f32(v10, v10);
  v55 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v54, 2), vaddq_f32(v54, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v54.f32, 1)));
  v55.f32[0] = sqrtf(v55.f32[0]);
  v56 = vmulq_f32(v9, v9);
  v57 = vmulq_f32(v11, v11);
  v55.i32[1] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v56, 2), vaddq_f32(v56, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v56.f32, 1))).f32[0]);
  v55.i32[2] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v57, 2), vaddq_f32(v57, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v57.f32, 1))).f32[0]);
  v58 = vmulq_n_f32(v55, v53);
  v59 = vcltzq_f32(v58);
  v60 = (int32x4_t)vmvnq_s8(vorrq_s8((int8x16_t)v59, (int8x16_t)vcgezq_f32(v58)));
  v60.i32[3] = v60.i32[2];
  v60.i32[0] = vmaxvq_u32((uint32x4_t)v60);
  v59.i32[0] = -1;
  v61 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v60, v59), 0), (int8x16_t)v58, (int8x16_t)0);
  v62 = (uint32x4_t)vceqzq_f32(v61);
  v62.i32[3] = v62.i32[2];
  if ((vmaxvq_u32(v62) & 0x80000000) == 0)
  {
    v63 = v60.i32[0];
    v64 = vdivq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v61.f32, 0));
    v65 = vdivq_f32(v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v61.f32, 1));
    v66 = v65.f32[1];
    v67 = (int32x4_t)vdivq_f32(v11, (float32x4_t)vdupq_laneq_s32((int32x4_t)v61, 2));
    v68 = *(float *)&v67.i32[2] + (float)(v64.f32[0] + v65.f32[1]);
    if (v68 <= 0.0)
    {
      if (v64.f32[0] <= v65.f32[1] || v64.f32[0] <= *(float *)&v67.i32[2])
      {
        if (v65.f32[1] <= *(float *)&v67.i32[2])
        {
          v78 = (float)(*(float *)&v67.i32[2] + 1.0) - v64.f32[0];
          v79 = (float32x4_t)vzip2q_s32((int32x4_t)v64, vzip1q_s32(v67, (int32x4_t)v64));
          v80 = (int8x16_t)vrev64q_s32((int32x4_t)v65);
          v81 = (float32x4_t)vextq_s8(v80, v80, 8uLL);
          v81.i32[0] = v67.i32[0];
          v70.i64[0] = vaddq_f32(v79, v81).u64[0];
          v79.f32[2] = v78;
          v70.i64[1] = vsubq_f32(v79, v81).i64[1];
          v71.i32[0] = v70.i32[2];
        }
        else
        {
          v73 = v65;
          v73.i32[0] = v64.i32[1];
          v65.i32[1] = v67.i32[2];
          v65.i32[2] = v67.i32[1];
          v74 = (int32x4_t)vaddq_f32(v73, v65);
          v73.f32[1] = (float)(v66 + 1.0) - v64.f32[0];
          v73.i32[3] = v67.i32[0];
          v65.i32[3] = v64.i32[2];
          v75 = (int32x4_t)vsubq_f32(v73, v65);
          v70 = (float32x4_t)vtrn2q_s32(vrev64q_s32(v74), v75);
          v71.i32[0] = v75.i32[1];
        }
      }
      else
      {
        v76 = v64;
        v76.f32[0] = (float)(v64.f32[0] + 1.0) - v65.f32[1];
        v76.i32[3] = v65.i32[2];
        v77 = (float32x4_t)vextq_s8((int8x16_t)v67, (int8x16_t)v67, 8uLL);
        v71 = vsubq_f32(v76, v77);
        v77.i32[1] = v65.i32[0];
        v70 = vaddq_f32(v64, v77);
        v70.i32[0] = v71.i32[0];
        v70.i32[3] = v71.i32[3];
      }
    }
    else
    {
      v71 = (float32x4_t)vzip2q_s32((int32x4_t)v65, vuzp1q_s32((int32x4_t)v65, v67));
      v71.i32[2] = v64.i32[1];
      v69 = (float32x4_t)vtrn2q_s32(v67, vzip2q_s32(v67, (int32x4_t)v64));
      v69.i32[2] = v65.i32[0];
      v70 = vsubq_f32(v71, v69);
      v69.i32[3] = 1.0;
      v71.f32[3] = v68;
      v70.i32[3] = vaddq_f32(v71, v69).i32[3];
      v71.i32[0] = v70.i32[3];
    }
    _NF = v63 < 0;
    v82 = vmulq_n_f32(v70, 0.5 / sqrtf(v71.f32[0]));
    v83 = vmaxvq_u32((uint32x4_t)vmvnq_s8(vorrq_s8((int8x16_t)vcltzq_f32(v82), (int8x16_t)vcgezq_f32(v82))));
    if (_NF)
      v33 = 0;
    if ((v83 & 0x80000000) == 0 && v33)
    {
      v84 = (float32x4_t)vdupq_lane_s32(v4, 0);
      v85 = vmlaq_n_f32(v50, vsubq_f32(a2[3], v50), *(float *)v4.i32);
      _Q0 = vmulq_f32(_Q23, v82);
      _S1 = v82.i32[2];
      __asm { FMLA            S0, S1, V23.S[2] }
      _Q2.i32[0] = v82.i32[3];
      v90 = -(float)(_Q0.f32[0] + (float)(_Q23.f32[3] * v82.f32[3]));
      __asm { FMLA            S0, S2, V23.S[3] }
      _Q2.i32[0] = 0;
      v92 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(_Q2, _Q0), 0), (int8x16_t)vnegq_f32(v82), (int8x16_t)v82);
      if (_Q0.f32[0] < 0.0)
        _Q0.f32[0] = v90;
      if (1.0 - _Q0.f32[0] <= 0.00100000005)
      {
        v98 = 1.0 - *(float *)v4.i32;
      }
      else
      {
        v114 = v23;
        v115 = *(float *)v4.i32;
        v112 = v34;
        v113 = v85;
        v110 = v61;
        v111 = _Q23;
        v108 = v92;
        v109 = v84;
        v93 = acosf(_Q0.f32[0]);
        v94 = sinf(v93);
        v95 = sinf((float)(1.0 - v115) * v93);
        v96 = v93 * v115;
        v116 = v95 / v94;
        v97 = sinf(v96);
        v92 = v108;
        v84 = v109;
        v61 = v110;
        _Q23 = v111;
        v34 = v112;
        v85 = v113;
        *(float *)v4.i32 = v97 / v94;
        v23 = v114;
        v98 = v116;
      }
      v99 = vmlaq_n_f32(vmulq_n_f32(v92, *(float *)v4.i32), _Q23, v98);
      v100 = *(float32x4_t *)MEMORY[0x1E0C83FF0];
      v101 = *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 16);
      v102 = vmulq_f32(v99, v99);
      v103 = vaddq_f32(v102, v102);
      v104 = vmulq_laneq_f32(v99, v99, 3);
      v105 = vmulq_lane_f32(v99, *(float32x2_t *)v99.f32, 1).f32[0];
      v100.f32[0] = (float)(1.0 - v103.f32[1]) - v103.f32[2];
      v100.f32[1] = (float)(v105 + v104.f32[2]) + (float)(v105 + v104.f32[2]);
      v101.f32[0] = (float)(v105 - v104.f32[2]) + (float)(v105 - v104.f32[2]);
      v103.f32[0] = 1.0 - v103.f32[0];
      v101.f32[1] = v103.f32[0] - v103.f32[2];
      *(float32x2_t *)v99.f32 = vmul_laneq_f32(*(float32x2_t *)v99.f32, v99, 2);
      v100.f32[2] = (float)(v99.f32[0] - v104.f32[1]) + (float)(v99.f32[0] - v104.f32[1]);
      v106 = vmlaq_f32(v23, vsubq_f32(v61, v23), v84);
      v101.f32[2] = (float)(v99.f32[1] + v104.f32[0]) + (float)(v99.f32[1] + v104.f32[0]);
      *(int32x2_t *)v104.f32 = vrev64_s32(*(int32x2_t *)v104.f32);
      v107.i32[0] = vadd_f32(*(float32x2_t *)v99.f32, *(float32x2_t *)v104.f32).u32[0];
      v107.i32[1] = vsub_f32(*(float32x2_t *)&v99, *(float32x2_t *)&v104).i32[1];
      *(float32x2_t *)v99.f32 = vadd_f32(v107, v107);
      v99.i32[3] = HIDWORD(*(_QWORD *)(MEMORY[0x1E0C83FF0] + 40));
      v99.f32[2] = v103.f32[0] - v103.f32[1];
      v6 = vmulq_n_f32(v100, v106.f32[0]);
      v7 = vmulq_lane_f32(v101, *(float32x2_t *)v106.f32, 1);
      _Q2 = vmulq_laneq_f32(v99, v106, 2);
      v50 = vaddq_f32(v85, v34);
      v50.i32[3] = v34.i32[3];
    }
  }
  *a3 = v6;
  a3[1] = v7;
  a3[2] = _Q2;
  a3[3] = v50;
}

BOOL C3DMatrix4x4GetAffineTransforms(uint64_t a1, _OWORD *a2, int8x16_t *a3, float32x4_t *a4)
{
  float32x4_t v4;
  float32x4_t v5;
  __int128 v6;
  float32x4_t v7;
  int32x4_t v8;
  float32x4_t v9;
  float v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  float32x4_t v18;
  uint32x4_t v19;
  __int32 v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float v24;
  int32x4_t v25;
  float v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  int8x16_t v30;
  _BOOL8 result;
  BOOL v32;
  BOOL v33;
  float32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32_t v39;
  float32x4_t v40;
  int8x16_t v41;
  float32x4_t v42;
  float32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;

  v5 = *(float32x4_t *)a1;
  v4 = *(float32x4_t *)(a1 + 16);
  v7 = *(float32x4_t *)(a1 + 32);
  v6 = *(_OWORD *)(a1 + 48);
  v8 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v7, (int32x4_t)v7), (int8x16_t)v7, 0xCuLL), vnegq_f32(v4)), v7, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v4, (int32x4_t)v4), (int8x16_t)v4, 0xCuLL));
  v9 = vmulq_f32(*(float32x4_t *)a1, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v8, v8), (int8x16_t)v8, 0xCuLL));
  v33 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2), vaddq_f32(v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1))).f32[0] < 0.0;
  v10 = 1.0;
  if (v33)
    v10 = -1.0;
  v11 = vmulq_f32(v5, v5);
  v12 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 2), vaddq_f32(v11, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 1)));
  v12.f32[0] = sqrtf(v12.f32[0]);
  v13 = vmulq_f32(v4, v4);
  v14 = vmulq_f32(v7, v7);
  v12.i32[1] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2), vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1))).f32[0]);
  v12.i32[2] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 2), vaddq_f32(v14, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.f32, 1))).f32[0]);
  v15 = vmulq_n_f32(v12, v10);
  v16 = vcltzq_f32(v15);
  v17 = (int32x4_t)vmvnq_s8(vorrq_s8((int8x16_t)v16, (int8x16_t)vcgezq_f32(v15)));
  v17.i32[3] = v17.i32[2];
  v17.i32[0] = vmaxvq_u32((uint32x4_t)v17);
  v16.i32[0] = -1;
  v18 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v17, v16), 0), (int8x16_t)v15, (int8x16_t)0);
  if (a4)
    *a4 = v18;
  v19 = (uint32x4_t)vceqzq_f32(v18);
  v19.i32[3] = v19.i32[2];
  if ((vmaxvq_u32(v19) & 0x80000000) != 0)
  {
    v30 = *(int8x16_t *)(MEMORY[0x1E0C83FF0] + 48);
    result = 0;
    if (a4)
      *a4 = 0u;
  }
  else
  {
    v20 = v17.i32[0];
    v21 = vdivq_f32(v5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 0));
    v22 = vdivq_f32(v4, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 1));
    v23 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 2);
    v24 = v22.f32[1];
    v25 = (int32x4_t)vdivq_f32(v7, v23);
    v26 = *(float *)&v25.i32[2] + (float)(v21.f32[0] + v22.f32[1]);
    if (v26 <= 0.0)
    {
      if (v21.f32[0] > v22.f32[1])
      {
        v32 = v21.f32[0] == *(float *)&v25.i32[2];
        v33 = v21.f32[0] < *(float *)&v25.i32[2];
      }
      else
      {
        v32 = 1;
        v33 = 0;
      }
      if (v33 || v32)
      {
        if (v22.f32[1] <= *(float *)&v25.i32[2])
        {
          v39 = (float)(*(float *)&v25.i32[2] + 1.0) - v21.f32[0];
          v40 = (float32x4_t)vzip2q_s32((int32x4_t)v21, vzip1q_s32(v25, (int32x4_t)v21));
          v41 = (int8x16_t)vrev64q_s32((int32x4_t)v22);
          v42 = (float32x4_t)vextq_s8(v41, v41, 8uLL);
          v42.i32[0] = v25.i32[0];
          v28.i64[0] = vaddq_f32(v40, v42).u64[0];
          v40.f32[2] = v39;
          v28.i64[1] = vsubq_f32(v40, v42).i64[1];
          v29.i32[0] = v28.i32[2];
        }
        else
        {
          v34 = v22;
          v34.i32[0] = v21.i32[1];
          v22.i32[1] = v25.i32[2];
          v22.i32[2] = v25.i32[1];
          v35 = (int32x4_t)vaddq_f32(v34, v22);
          v34.f32[1] = (float)(v24 + 1.0) - v21.f32[0];
          v34.i32[3] = v25.i32[0];
          v22.i32[3] = v21.i32[2];
          v36 = (int32x4_t)vsubq_f32(v34, v22);
          v28 = (float32x4_t)vtrn2q_s32(vrev64q_s32(v35), v36);
          v29.i32[0] = v36.i32[1];
        }
      }
      else
      {
        v37 = v21;
        v37.f32[0] = (float)(v21.f32[0] + 1.0) - v22.f32[1];
        v37.i32[3] = v22.i32[2];
        v38 = (float32x4_t)vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL);
        v29 = vsubq_f32(v37, v38);
        v38.i32[1] = v22.i32[0];
        v28 = vaddq_f32(v21, v38);
        v28.i32[0] = v29.i32[0];
        v28.i32[3] = v29.i32[3];
      }
    }
    else
    {
      v29 = (float32x4_t)vzip2q_s32((int32x4_t)v22, vuzp1q_s32((int32x4_t)v22, v25));
      v29.i32[2] = v21.i32[1];
      v27 = (float32x4_t)vtrn2q_s32(v25, vzip2q_s32(v25, (int32x4_t)v21));
      v27.i32[2] = v22.i32[0];
      v28 = vsubq_f32(v29, v27);
      v27.i32[3] = 1.0;
      v29.f32[3] = v26;
      v28.i32[3] = vaddq_f32(v29, v27).i32[3];
      v29.i32[0] = v28.i32[3];
    }
    v43 = vmulq_n_f32(v28, 0.5 / sqrtf(v29.f32[0]));
    v44 = vcltzq_f32(v43);
    v45 = (int32x4_t)vmvnq_s8(vorrq_s8((int8x16_t)v44, (int8x16_t)vcgezq_f32(v43)));
    v45.i32[0] = vmaxvq_u32((uint32x4_t)v45);
    v44.i32[0] = -1;
    v30 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v45, v44), 0), (int8x16_t)v43, *(int8x16_t *)(MEMORY[0x1E0C83FF0] + 48));
    result = (v45.i32[0] | v20) >= 0;
  }
  if (a2)
    *a2 = v6;
  if (a3)
    *a3 = v30;
  return result;
}

uint64_t C3DMatrix4x4CopyPropertyList(uint64_t result)
{
  if (result)
    return C3DCreatePropertyListFromC3DFloatBuffer(result, 16);
  return result;
}

uint64_t C3DMatrix4x4InitWithPropertyList(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result)
    return C3DInitC3DFloatArrayWithPropertyList(a2, result, a4);
  return result;
}

int32x4_t *C3DMatrix4x4MakeLookAt(int32x4_t *result, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4)
{
  float32x4_t v4;
  int32x4_t v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x4_t v8;
  int32x4_t v9;
  float32x2_t v10;
  float32x2_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  int32x4_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x4_t v19;
  int32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  int32x4_t v24;
  float32x2x2_t v25;
  float32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  float32x2x2_t v29;
  int32x4_t v30;
  float *v31;
  float *i32;

  v4 = vsubq_f32(*a3, *a2);
  v5 = (int32x4_t)vmulq_f32(v4, v4);
  v5.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v5, 2), vadd_f32(*(float32x2_t *)v5.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v5.i8, 1))).u32[0];
  v6 = vrsqrte_f32((float32x2_t)v5.u32[0]);
  v7 = vmul_f32(v6, vrsqrts_f32((float32x2_t)v5.u32[0], vmul_f32(v6, v6)));
  v8 = vmulq_n_f32(v4, vmul_f32(v7, vrsqrts_f32((float32x2_t)v5.u32[0], vmul_f32(v7, v7))).f32[0]);
  v9 = (int32x4_t)vmulq_f32(*a4, *a4);
  v9.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v9, 2), vadd_f32(*(float32x2_t *)v9.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v9.i8, 1))).u32[0];
  v10 = vrsqrte_f32((float32x2_t)v9.u32[0]);
  v11 = vmul_f32(v10, vrsqrts_f32((float32x2_t)v9.u32[0], vmul_f32(v10, v10)));
  v12 = vmulq_n_f32(*a4, vmul_f32(v11, vrsqrts_f32((float32x2_t)v9.u32[0], vmul_f32(v11, v11))).f32[0]);
  v13 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v8, (int32x4_t)v8), (int8x16_t)v8, 0xCuLL);
  v14 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v12, (int32x4_t)v12), (int8x16_t)v12, 0xCuLL), vnegq_f32(v8)), v12, v13);
  v15 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v14, (int32x4_t)v14), (int8x16_t)v14, 0xCuLL);
  v16 = (int32x4_t)vmulq_f32(v14, v14);
  v16.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v16.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v16, 2), *(float32x2_t *)v16.i8)).u32[0];
  v17 = vrsqrte_f32((float32x2_t)v16.u32[0]);
  v18 = vmul_f32(v17, vrsqrts_f32((float32x2_t)v16.u32[0], vmul_f32(v17, v17)));
  v19 = vmulq_n_f32(v15, vmul_f32(v18, vrsqrts_f32((float32x2_t)v16.u32[0], vmul_f32(v18, v18))).f32[0]);
  v20 = (int32x4_t)vmlaq_f32(vmulq_f32(v13, vnegq_f32(v19)), v8, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v19, (int32x4_t)v19), (int8x16_t)v19, 0xCuLL));
  v21 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v20, v20), (int8x16_t)v20, 0xCuLL);
  v22 = vmulq_f32(*a2, v19);
  v23 = vmulq_f32(*a2, v8);
  v8.f32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v23, 2), vaddq_f32(v23, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v23.f32, 1))).f32[0];
  v24 = (int32x4_t)vnegq_f32(v8);
  v25 = (float32x2x2_t)vzip1q_s32((int32x4_t)v19, v24);
  v19.f32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 2), vaddq_f32(v22, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 1))).f32[0];
  v26 = vmulq_f32(*a2, v21);
  v27 = *(int32x4_t *)(MEMORY[0x1E0C83FF0] + 48);
  v28 = vzip1q_s32((int32x4_t)v21, v27);
  v21.f32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v26, 2), vaddq_f32(v26, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 1))).f32[0];
  v29 = (float32x2x2_t)vzip2q_s32((int32x4_t)v19, v24);
  v30 = vzip2q_s32((int32x4_t)v21, v27);
  v31 = (float *)result;
  vst2_f32(v31, v25);
  v31 += 4;
  *(int32x4_t *)v31 = vzip2q_s32((int32x4_t)v25, v28);
  i32 = (float *)result[2].i32;
  vst2_f32(i32, v29);
  result[3] = vzip2q_s32((int32x4_t)v29, v30);
  return result;
}

double C3DMatrix4x4Determinant3x3(uint64_t a1)
{
  int32x4_t v1;
  int32x4_t v2;
  float32x4_t v3;
  double result;

  v1 = *(int32x4_t *)(a1 + 16);
  v2 = *(int32x4_t *)(a1 + 32);
  v3 = vmulq_f32(*(float32x4_t *)a1, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v2, (int8x16_t)v2, 0xCuLL), (int8x16_t)v2, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v1, v1), (int8x16_t)v1, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v2, v2), (int8x16_t)v2, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v1, (int8x16_t)v1, 0xCuLL), (int8x16_t)v1, 8uLL)));
  *(_QWORD *)&result = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v3, 2), vaddq_f32(v3, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v3.f32, 1))).u64[0];
  return result;
}

float32x4_t C3DMatrix4x4Scale(float32x4_t *a1, float32x2_t *a2)
{
  float32x4_t v2;
  float32x4_t result;

  v2 = vmulq_lane_f32(a1[1], *a2, 1);
  result = vmulq_laneq_f32(a1[2], *(float32x4_t *)a2->f32, 2);
  *a1 = vmulq_n_f32(*a1, COERCE_FLOAT(*(_OWORD *)a2->f32));
  a1[1] = v2;
  a1[2] = result;
  return result;
}

_DWORD *C3DDelaunayTriangulationForSimplePlanarPolygon(uint64_t a1, unsigned int *a2, unsigned int a3, int *a4)
{
  uint64_t v5;
  _DWORD *v6;
  unsigned int *v8;
  int v9;
  float32x4_t v11;
  float32x4_t v12;
  BOOL v13;
  char v14;
  float32x4_t v15;
  int32x4_t v16;
  float32x2_t v17;
  float32x2_t v18;
  uint64_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  int32x4_t v27;
  float32x2_t v28;
  float32x2_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  char *v33;
  uint64_t v34;
  double v35;
  double v36;
  double v37;
  double v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  double v42;
  float32x4_t v43;
  double v44;
  double *v45;
  int v46;
  double v47;
  double v48;
  double v49;
  double v50;
  int Orientation;
  _QWORD *v52;
  _DWORD *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  _QWORD *v58;
  _DWORD *v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int *v62;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  __int128 v68;
  float32x4_t v69;
  char **v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  unsigned int v75;
  char *v76;
  unsigned int v77;
  unsigned int v78;
  double v79;
  double v80;
  double v81;
  double v82;
  uint64_t v83;

  v5 = a3 - 2;
  if (a3 <= 2)
  {
    v6 = 0;
    *a4 = 0;
    return v6;
  }
  v8 = a2;
  if (a3 == 4)
  {
    v6 = malloc_type_malloc(0x18uLL, 0x100004052888210uLL);
    *v6 = *v8;
    v6[1] = v8[1];
    v6[2] = v8[2];
    v6[3] = *v8;
    v6[4] = v8[2];
    v6[5] = v8[3];
    v9 = 6;
    goto LABEL_7;
  }
  if (a3 == 3)
  {
    v6 = malloc_type_malloc(0xCuLL, 0x100004052888210uLL);
    *v6 = *v8;
    v6[1] = v8[1];
    v6[2] = v8[2];
    v9 = 3;
LABEL_7:
    *a4 = v9;
    return v6;
  }
  *(double *)v11.i64 = C3DMeshSourceGetValueAtIndexAsVector3(a1, *a2);
  v69 = v11;
  *(double *)v12.i64 = C3DMeshSourceGetValueAtIndexAsVector3(a1, v8[1]);
  v13 = 0;
  v14 = 0;
  v15 = vsubq_f32(v12, v69);
  v16 = (int32x4_t)vmulq_f32(v15, v15);
  v16.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v16, 2), vadd_f32(*(float32x2_t *)v16.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v16.i8, 1))).u32[0];
  v17 = vrsqrte_f32((float32x2_t)v16.u32[0]);
  v18 = vmul_f32(v17, vrsqrts_f32((float32x2_t)v16.u32[0], vmul_f32(v17, v17)));
  v64 = vmulq_n_f32(v15, vmul_f32(v18, vrsqrts_f32((float32x2_t)v16.u32[0], vmul_f32(v18, v18))).f32[0]);
  v65 = 0u;
  v19 = 2;
  v66 = vnegq_f32(v64);
  v67 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v64, (int32x4_t)v64), (int8x16_t)v64, 0xCuLL);
  do
  {
    *(double *)v20.i64 = C3DMeshSourceGetValueAtIndexAsVector3(a1, v8[v19]);
    v21 = vsubq_f32(v20, v69);
    v22 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v21, (int32x4_t)v21), (int8x16_t)v21, 0xCuLL), v66), v21, v67);
    v23 = vmulq_f32(v22, v22);
    if (vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v23.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v23, 2), v23)).f32[0] != 0.0)
    {
      v24 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v22, (int32x4_t)v22), (int8x16_t)v22, 0xCuLL);
      v25 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v24, (int32x4_t)v24), (int8x16_t)v24, 0xCuLL), v66), v24, v67);
      v26 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v25, (int32x4_t)v25), (int8x16_t)v25, 0xCuLL);
      v27 = (int32x4_t)vmulq_f32(v25, v25);
      v27.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v27.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v27, 2), *(float32x2_t *)v27.i8)).u32[0];
      v28 = vrsqrte_f32((float32x2_t)v27.u32[0]);
      v29 = vmul_f32(v28, vrsqrts_f32((float32x2_t)v27.u32[0], vmul_f32(v28, v28)));
      v30 = vmulq_n_f32(v26, vmul_f32(v29, vrsqrts_f32((float32x2_t)v27.u32[0], vmul_f32(v29, v29))).f32[0]);
      if ((v14 & 1) != 0)
      {
        v31 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v30, (int32x4_t)v30), (int8x16_t)v30, 0xCuLL), vnegq_f32(v65)), v30, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v65, (int32x4_t)v65), (int8x16_t)v65, 0xCuLL));
        v32 = vmulq_f32(v31, v31);
        v14 = 1;
        if (vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v32.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v32, 2), v32)).f32[0] > 0.00001)break;
      }
      else
      {
        v14 = 1;
        v65 = v30;
      }
    }
    v13 = ++v19 >= (unint64_t)a3;
  }
  while (a3 != v19);
  if (v13 && (v14 & 1) != 0)
  {
    v33 = (char *)malloc_type_malloc(80 * a3, 0x1000040392EC4B1uLL);
    v34 = 0;
    v35 = 0.0;
    v68 = *MEMORY[0x1E0C9D538];
    v36 = 0.0;
    v37 = 0.0;
    v38 = 0.0;
    do
    {
      *(double *)v39.i64 = C3DMeshSourceGetValueAtIndexAsVector3(a1, *v8);
      v40 = vsubq_f32(v39, v69);
      v41 = vmulq_f32(v64, v40);
      v42 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v41, 2), vaddq_f32(v41, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v41.f32, 1))).f32[0];
      v43 = vmulq_f32(v65, v40);
      v44 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v43, 2), vaddq_f32(v43, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v43.f32, 1))).f32[0];
      v45 = (double *)&v33[v34];
      v46 = *v8++;
      *v45 = v42;
      v45[1] = v44;
      *((_OWORD *)v45 + 1) = v68;
      *((_OWORD *)v45 + 2) = v68;
      *((_OWORD *)v45 + 3) = v68;
      v45[8] = 0.0;
      *((_BYTE *)v45 + 72) = 0;
      *((_DWORD *)v45 + 19) = v46;
      v47 = fmin(v38, v42);
      v48 = fmin(v36, v44);
      v49 = fmax(v37, v42);
      v50 = fmax(v35, v44);
      if (v34)
        v38 = v47;
      else
        v38 = v42;
      if (v34)
        v37 = v49;
      else
        v37 = v42;
      if (v34)
        v36 = v48;
      else
        v36 = v44;
      if (v34)
        v35 = v50;
      else
        v35 = v44;
      v34 += 80;
    }
    while (80 * a3 != v34);
    v83 = 0;
    v76 = v33;
    v77 = a3;
    v78 = a3;
    v79 = v38 + -1.0;
    v80 = v37 + 1.0;
    v81 = v36 + -1.0;
    v82 = v35 + 1.0;
    Orientation = C3DShapeBoundaryGetOrientation((unsigned int *)&v76);
    if (Orientation != 2)
      C3DShapeBoundaryReverse(&v76);
    v75 = 0;
    v70 = &v76;
    v71 = 1;
    v73 = 0;
    v72 = 0;
    v74 = 0;
    v52 = C3DShapeConnectedComponentTriangulate((uint64_t)&v70, &v75);
    v53 = malloc_type_malloc(12 * v75, 0x100004052888210uLL);
    v6 = v53;
    if (v75)
    {
      v54 = 0;
      v55 = 1;
      if (Orientation == 2)
        v56 = 1;
      else
        v56 = 2;
      if (Orientation == 2)
        v55 = 2;
      v57 = 2;
      v58 = v52;
      do
      {
        v53[v57 - 2] = *(_DWORD *)(*v58 + 76);
        v53[v57 - 1] = *(_DWORD *)(v58[v56] + 76);
        v53[v57] = *(_DWORD *)(v58[v55] + 76);
        ++v54;
        v57 += 3;
        v58 += 7;
      }
      while (v54 < v75);
    }
    else if (!v52)
    {
LABEL_47:
      free(v33);
      *a4 = (int)v52;
      return v6;
    }
    free(v52);
    LODWORD(v52) = 3 * v75;
    goto LABEL_47;
  }
  v59 = malloc_type_malloc(4 * (3 * v5), 0x100004052888210uLL);
  v6 = v59;
  v60 = 0;
  v61 = 2;
  do
  {
    v59[v61 - 2] = *v8;
    v62 = &v8[v60];
    v59[v61 - 1] = v62[1];
    v59[v61] = v62[2];
    v61 += 3;
    ++v60;
  }
  while (v5 != v60);
  *a4 = 3 * v5;
  return v6;
}

void sub_1DCD59D80(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0D41C0](v1, 0x1081C407B4F9BAFLL);
  _Unwind_Resume(a1);
}

void sub_1DCD59DE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0D41C0](v1, 0x1081C40CC86CA3FLL);
  _Unwind_Resume(a1);
}

void sub_1DCD59E50(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0D41C0](v1, 0x1081C40CC86CA3FLL);
  _Unwind_Resume(a1);
}

void sub_1DCD59EB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0D41C0](v1, 0x1081C407B4F9BAFLL);
  _Unwind_Resume(a1);
}

void sub_1DCD59FE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0D41C0](v1, 0x1081C40CC86CA3FLL);
  _Unwind_Resume(a1);
}

void sub_1DCD5A048(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0D41C0](v1, 0x1081C40CC86CA3FLL);
  _Unwind_Resume(a1);
}

void sub_1DCD5A19C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0D41C0](v1, 0x1081C404D916FF5);
  _Unwind_Resume(a1);
}

void sub_1DCD5A254(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0D41C0](v1, 0x1081C407B4F9BAFLL);
  _Unwind_Resume(a1);
}

void sub_1DCD5A408(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0D41C0](v1, 0x1081C40F20E8228);
  _Unwind_Resume(a1);
}

void sub_1DCD5A8A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0D41C0](v1, 0x1081C40F20E8228);
  _Unwind_Resume(a1);
}

void *SCNMTLComputeCommandEncoder::setBytes(SCNMTLComputeCommandEncoder *this, const void *a2, size_t a3, unint64_t a4)
{
  SCNMTLBufferPool *bufferPool;
  void *result;
  MTLBuffer *v8;
  MTLBuffer **v9;
  MTLBuffer **v10;
  MTLBuffer **v11;
  MTLBuffer **v12;
  MTLBuffer *v13;
  void *v14;
  MTLBuffer *v15;
  MTLBuffer *v16;

  bufferPool = this->_bufferPool;
  if (!bufferPool)
  {
    result = (void *)-[MTLComputeCommandEncoder setBytes:length:atIndex:](this->_encoder, "setBytes:length:atIndex:", a2, a3, a4);
    v11 = &this->_buffers[a4];
    *v11 = 0;
    v11[31] = 0;
    return result;
  }
  v14 = 0;
  v15 = 0;
  v16 = 0;
  result = SCNMTLBufferPool::allocateAndCopy(bufferPool, a2, a3, &v14);
  v8 = v16;
  if (this->_buffers[a4] == v15)
  {
    v12 = &this->_buffers[a4];
    v13 = v12[31];
    v10 = v12 + 31;
    if (v13 == v16)
      return result;
  }
  else
  {
    v9 = &this->_buffers[a4];
    *v9 = v15;
    v10 = v9 + 31;
  }
  *v10 = v8;
  this->_buffersToBind[a4 >> 6] |= 1 << a4;
  return result;
}

uint64_t SCNMTLComputeCommandEncoder::dispatch(SCNMTLComputeCommandEncoder *this, MTLComputePipelineState *a2, MTLSize *a3, MTLSize *a4)
{
  MTLSize v8;
  MTLSize v9;

  if (this->_computePipelineState != a2)
  {
    this->_computePipelineState = a2;
    -[MTLComputeCommandEncoder setComputePipelineState:](this->_encoder, "setComputePipelineState:", a2);
  }
  v9 = *a3;
  v8 = *a4;
  return SCNMTLComputeCommandEncoder::dispatch(this, &v9, &v8);
}

uint64_t SCNMTLComputeCommandEncoder::dispatch(SCNMTLComputeCommandEncoder *this, MTLSize *a2, MTLSize *a3)
{
  MTLComputeCommandEncoder *encoder;
  MTLSize v8;
  MTLSize v9;

  SCNMTLComputeCommandEncoder::_bindPendingTextures(this);
  SCNMTLComputeCommandEncoder::_bindPendingBuffers(this);
  encoder = this->_encoder;
  v9 = *a2;
  v8 = *a3;
  return -[MTLComputeCommandEncoder dispatchThreadgroups:threadsPerThreadgroup:](encoder, "dispatchThreadgroups:threadsPerThreadgroup:", &v9, &v8);
}

void C3D::DOFDownsampleCoCPass::DOFDownsampleCoCPass(C3D::ComputePass *a1, C3D::RenderGraph *a2, C3D::Pass *a3, uint64_t a4)
{
  _QWORD *v5;

  C3D::ComputePass::ComputePass(a1, a2, a3);
  *v5 = off_1EA599CC8;
  v5[14] = a4;
}

const char *C3D::DOFDownsampleCoCPass::name(C3D::DOFDownsampleCoCPass *this)
{
  return "DOFDownsampleCoCPass";
}

uint64_t C3D::DOFDownsampleCoCPass::setup(float **this)
{
  float **v1;
  uint64_t v2;
  int v3;
  C3D::PassDescriptor *v4;
  int v5;
  int v6;
  uint64_t result;

  v1 = this;
  C3D::Pass::setInputCount((C3D::Pass *)this, 1u);
  C3D::Pass::setOutputCount((C3D::Pass *)v1, 1u);
  v2 = (*((uint64_t (**)(float **))*v1 + 11))(v1);
  v3 = (int)fmax(*(float *)(v2 + 8) * 0.5 / *v1[14], 1.0);
  v4 = (C3D::PassDescriptor *)(v1 + 4);
  *(_WORD *)(C3D::PassDescriptor::inputAtIndex((C3D::PassDescriptor *)(v1 + 4), 0) + 16) = v3;
  v5 = (int)fmax(*(float *)(v2 + 12) * 0.5 / *v1[14], 1.0);
  *(_WORD *)(C3D::PassDescriptor::inputAtIndex((C3D::PassDescriptor *)(v1 + 4), 0) + 18) = v5;
  *(_WORD *)(C3D::PassDescriptor::inputAtIndex((C3D::PassDescriptor *)(v1 + 4), 0) + 28) = 115;
  *(_QWORD *)(C3D::PassDescriptor::inputAtIndex((C3D::PassDescriptor *)(v1 + 4), 0) + 8) = "DofColorCoC";
  v6 = (int)fmax(*(float *)(v2 + 8) * 0.5 / *v1[14] * 0.25, 1.0);
  *(_WORD *)(C3D::PassDescriptor::outputAtIndex((C3D::PassDescriptor *)(v1 + 4), 0) + 16) = v6;
  LODWORD(v1) = (int)fmax(*(float *)(v2 + 12) * 0.5 / *v1[14] * 0.25, 1.0);
  *(_WORD *)(C3D::PassDescriptor::outputAtIndex(v4, 0) + 18) = (_WORD)v1;
  result = C3D::PassDescriptor::outputAtIndex(v4, 0);
  *(_WORD *)(result + 28) = 115;
  return result;
}

void C3D::DOFDownsampleCoCPass::compile(C3D::DOFDownsampleCoCPass *this)
{
  uint64_t RenderContext;
  void *v3;
  uint64_t v4;
  C3D::RenderGraphResourceManager *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  RenderContext = C3DEngineContextGetRenderContext(*((_QWORD *)this + 2));
  v3 = (void *)-[SCNMTLRenderContext resourceManager](RenderContext);
  v4 = (*(uint64_t (**)(C3D::DOFDownsampleCoCPass *))(*(_QWORD *)this + 64))(this);
  v5 = *(C3D::RenderGraphResourceManager **)(*((_QWORD *)this + 3) + 128);
  v6 = C3D::RenderGraphResourceManager::get(v5, v4);
  *((_QWORD *)this + 15) = v6;
  if (!v6)
  {
    v7 = (_QWORD *)operator new();
    v7[1] = 0;
    v7[2] = 0;
    *v7 = &off_1EA59A4E8;
    *((_QWORD *)this + 15) = v7;
    C3D::RenderGraphResourceManager::set((uint64_t)v5, v4, (uint64_t)v7);
    v8 = objc_msgSend(v3, "newComputePipelineStateWithFunctionName:", CFSTR("dof_coc_downsample4"));
    v9 = *((_QWORD *)this + 15);
    v10 = *(void **)(v9 + 16);
    *(_QWORD *)(v9 + 16) = v8;
    if (v10)

  }
}

uint64_t C3D::DOFDownsampleCoCPass::execute(C3D::Pass *this, SCNMTLComputeCommandEncoder **a2)
{
  SCNMTLComputeCommandEncoder *v3;
  uint64_t v4;
  unint64_t v5;
  MTLBuffer *v6;
  void **v7;
  MTLTexture *v8;
  _QWORD *v9;
  uint64_t v10;
  MTLComputePipelineState *v11;

  v3 = *a2;
  v4 = *((_QWORD *)this + 14);
  v6 = *(MTLBuffer **)(v4 + 40);
  v5 = *(_QWORD *)(v4 + 48);
  if ((*a2)->_buffers[0] == v6)
  {
    if (v3->_offsets[0] == v5)
      goto LABEL_5;
  }
  else
  {
    v3->_buffers[0] = v6;
  }
  v3->_offsets[0] = v5;
  v3->_buffersToBind[0] |= 1uLL;
LABEL_5:
  v7 = C3D::Pass::inputTextureAtIndex(this, 0);
  if ((void **)v3->_textures[0] != v7)
  {
    v3->_textures[0] = (MTLTexture *)v7;
    v3->_texturesToBind[0] |= 1uLL;
  }
  v8 = (MTLTexture *)C3D::Pass::outputTextureAtIndex(this, 0);
  if (v3->_textures[1] != v8)
  {
    v3->_textures[1] = v8;
    v3->_texturesToBind[0] |= 2uLL;
  }
  v9 = C3D::Pass::outputTextureAtIndex(this, 0);
  v10 = C3D::SmartPtr<SCNMTLComputePipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLComputePipeline *(*((_QWORD *)this + 15) + 16);
  v11 = (MTLComputePipelineState *)-[SCNMTLOpenSubdivComputeEvaluator computeEvaluator](v10);
  return SCNMTLComputeCommandEncoder::dispatchOnTexture2D(v3, v9, v11);
}

uint64_t SCNMTLComputeCommandEncoder::dispatchOnTexture2D(SCNMTLComputeCommandEncoder *a1, void *a2, MTLComputePipelineState *a3)
{
  if (a1->_computePipelineState != a3)
  {
    a1->_computePipelineState = a3;
    -[MTLComputeCommandEncoder setComputePipelineState:](a1->_encoder, "setComputePipelineState:");
  }
  return SCNMTLComputeCommandEncoder::dispatchOnGrid2D(a1, objc_msgSend(a2, "width"), objc_msgSend(a2, "height"));
}

uint64_t C3D::SmartPtr<SCNMTLComputePipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLComputePipeline *(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;

  if (!*(_QWORD *)a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3D::SmartPtr<SCNMTLComputePipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLComputePipeline *(v2, v3, v4);
  }
  return *(_QWORD *)a1;
}

void C3D::DOFDownsampleCoCPassResource::~DOFDownsampleCoCPassResource(C3D::DOFDownsampleCoCPassResource *this)
{
  void *v1;

  *(_QWORD *)this = &off_1EA59A4E8;
  v1 = (void *)*((_QWORD *)this + 2);
  if (v1)

}

{
  void *v1;

  *(_QWORD *)this = &off_1EA59A4E8;
  v1 = (void *)*((_QWORD *)this + 2);
  if (v1)

  JUMPOUT(0x1DF0D41C0);
}

uint64_t _C3DNodeIterateTreePreOrder(uint64_t a1, uint64_t (**a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  void (*v8)(uint64_t, uint64_t);
  _QWORD v10[6];

  if (!a1)
    return 0;
  if (!*a2 || (v6 = (*a2)(a1, a3)) == 0)
  {
    v7 = a2[1];
    if (!v7)
    {
      v6 = 0;
LABEL_10:
      v10[0] = MEMORY[0x1E0C809B0];
      v10[1] = 0x40000000;
      v10[2] = ___C3DNodeIterateTreePreOrder_block_invoke;
      v10[3] = &__block_descriptor_tmp_5;
      v10[4] = a2;
      v10[5] = a3;
      if (C3DNodeApplyChildrenInterruptible(a1, (uint64_t)v10))
        v6 = 3;
      goto LABEL_12;
    }
    v6 = v7(a1, a3);
  }
  if ((unint64_t)(v6 - 4) <= 0xFFFFFFFFFFFFFFFDLL)
    goto LABEL_10;
LABEL_12:
  v8 = (void (*)(uint64_t, uint64_t))a2[2];
  if (v8)
    v8(a1, a3);
  return v6;
}

uint64_t _C3DNodeIterateTreePostOrder(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t (*v8)(uint64_t, uint64_t);
  _QWORD v10[6];

  if (!a1)
    return 0;
  if (*(_QWORD *)a2)
  {
    v6 = (*(uint64_t (**)(uint64_t, uint64_t))a2)(a1, a3);
    if ((unint64_t)(v6 - 4) > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_7;
  }
  else
  {
    v6 = 0;
  }
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 0x40000000;
  v10[2] = ___C3DNodeIterateTreePostOrder_block_invoke;
  v10[3] = &__block_descriptor_tmp_1;
  v10[4] = a2;
  v10[5] = a3;
  C3DNodeApplyChildrenInterruptible(a1, (uint64_t)v10);
LABEL_7:
  v7 = *(void (**)(uint64_t, uint64_t))(a2 + 16);
  if (v7)
    v7(a1, a3);
  if (v6)
    return v6;
  v8 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 8);
  if (v8)
    return v8(a1, a3);
  return 0;
}

uint64_t C3DNodeIterateTree(uint64_t a1, uint64_t (**a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (!a1 && (v8 = scn_default_log(), os_log_type_enabled(v8, OS_LOG_TYPE_FAULT)))
  {
    C3DNodeIterateTree_cold_2(v8, v9, v10, v11, v12, v13, v14, v15);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v16 = scn_default_log();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
    C3DNodeIterateTree_cold_1(v16, v17, v18, v19, v20, v21, v22, v23);
LABEL_6:
  if (a3)
    return _C3DNodeIterateTreePostOrder(a1, (uint64_t)a2, a4);
  else
    return _C3DNodeIterateTreePreOrder(a1, a2, a4);
}

__n128 C3DPlaneMakeWithVectors(__n128 *a1, float32x4_t *a2, float32x4_t *a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float32x4_t v30;
  __n128 result;

  if (!a1 && (v6 = scn_default_log(), os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)))
  {
    C3DPlaneMakeWithVectors_cold_3(v6, v7, v8, v9, v10, v11, v12, v13);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v14 = scn_default_log();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    C3DPlaneMakeWithVectors_cold_2(v14, v15, v16, v17, v18, v19, v20, v21);
LABEL_6:
  if (!a3)
  {
    v22 = scn_default_log();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_FAULT))
      C3DPlaneMakeWithVectors_cold_1(v22, v23, v24, v25, v26, v27, v28, v29);
  }
  result = *(__n128 *)a3;
  result.n128_u32[3] = a1->n128_u32[3];
  *a1 = result;
  v30 = vmulq_f32(*a2, *a3);
  result.n128_f32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v30, 2), vaddq_f32(v30, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v30.f32, 1))).f32[0];
  *a1 = result;
  return result;
}

BOOL C3DPlaneMakeWithPoints(uint64_t a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4)
{
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  int32x2_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float v11;

  v4 = vsubq_f32(*a4, *a2);
  v5 = vsubq_f32(*a3, *a2);
  v6 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v5, (int32x4_t)v5), (int8x16_t)v5, 0xCuLL), vnegq_f32(v4)), v5, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v4, (int32x4_t)v4), (int8x16_t)v4, 0xCuLL));
  v7 = vmulq_f32(v6, v6);
  v8 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), v7)).u64[0];
  *(float *)v8.i32 = sqrtf(*(float *)v8.i32);
  if (*(float *)v8.i32 == 0.0)
  {
    *(_DWORD *)(a1 + 8) = 0;
    v11 = 0.0;
    *(_QWORD *)a1 = 0;
  }
  else
  {
    v9 = vdivq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v6, (int32x4_t)v6), (int8x16_t)v6, 0xCuLL), (float32x4_t)vdupq_lane_s32(v8, 0));
    *(_QWORD *)a1 = v9.i64[0];
    *(_DWORD *)(a1 + 8) = v9.i32[2];
    v10 = vmulq_f32(v9, *a4);
    v11 = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2), vaddq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1))).f32[0];
  }
  *(float *)(a1 + 12) = v11;
  return *(float *)v8.i32 != 0.0;
}

BOOL C3DPlaneMakeWithTriangle(uint64_t a1, uint64_t a2)
{
  float32x4_t *v4;
  float32x4_t *v5;
  float32x4_t *v6;

  v4 = (float32x4_t *)C3DTriangle3PointAtIndex(a2, 0);
  v5 = (float32x4_t *)C3DTriangle3PointAtIndex(a2, 1u);
  v6 = (float32x4_t *)C3DTriangle3PointAtIndex(a2, 2u);
  return C3DPlaneMakeWithPoints(a1, v4, v5, v6);
}

uint64_t C3DGeometryCreateSmoothIcosahedron(int a1, float a2)
{
  const void *v4;
  const __CFAllocator *v5;
  CFDataRef v6;
  uint64_t v7;
  int v8;
  const CFArrayCallBacks *v9;
  const __CFArray *v10;
  const __CFArray *v11;
  uint64_t v12;
  uint64_t i;
  CFTypeRef cf;
  UInt8 bytes[16];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  void *values[4];

  values[3] = *(void **)MEMORY[0x1E0C80C00];
  values[0] = (void *)__CreateSmoothIcosahedronSource(0, a2);
  values[1] = (void *)__CreateSmoothIcosahedronSource(1, a2);
  values[2] = (void *)__CreateSmoothIcosahedronSource(3, a2);
  v4 = (const void *)C3DMeshElementCreate();
  cf = v4;
  if (a1)
  {
    if (a1 == 2)
    {
      v28 = xmmword_1DD007CA8;
      v29 = unk_1DD007CB8;
      v30 = xmmword_1DD007CC8;
      v24 = xmmword_1DD007C68;
      v25 = unk_1DD007C78;
      v26 = xmmword_1DD007C88;
      v27 = unk_1DD007C98;
      v20 = xmmword_1DD007C28;
      v21 = unk_1DD007C38;
      v22 = xmmword_1DD007C48;
      v23 = *(_OWORD *)asc_1DD007C58;
      *(_OWORD *)bytes = xmmword_1DD007BE8;
      v17 = unk_1DD007BF8;
      v18 = xmmword_1DD007C08;
      v19 = unk_1DD007C18;
      v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v6 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], bytes, 240);
      v7 = (uint64_t)v4;
      v8 = 60;
    }
    else
    {
      if (a1 != 3)
      {
        v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        goto LABEL_9;
      }
      *(_OWORD *)bytes = xmmword_1DD007CD8;
      *(_QWORD *)&v17 = 0x10000F000E000DLL;
      v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v6 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], bytes, 24);
      v7 = (uint64_t)v4;
      v8 = 12;
    }
  }
  else
  {
    v20 = xmmword_1DD007BB0;
    v21 = unk_1DD007BC0;
    v22 = xmmword_1DD007BD0;
    *(_QWORD *)&v23 = 0x14000F000E0013;
    *(_OWORD *)bytes = xmmword_1DD007B70;
    v17 = unk_1DD007B80;
    v18 = xmmword_1DD007B90;
    v19 = unk_1DD007BA0;
    v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v6 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], bytes, 120);
    v7 = (uint64_t)v4;
    v8 = 20;
  }
  C3DMeshElementSetPrimitives(v7, v8, v6, 2);
  CFRelease(v6);
LABEL_9:
  bytes[2] = 0;
  *(_WORD *)bytes = 0;
  v9 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
  v10 = CFArrayCreate(v5, (const void **)values, 3, MEMORY[0x1E0C9B378]);
  v11 = CFArrayCreate(v5, &cf, 1, v9);
  v12 = C3DMeshCreateWithMeshSourcesAndMeshElements(v10, v11, (uint64_t)bytes);
  for (i = 0; i != 3; ++i)
    CFRelease(values[i]);
  CFRelease(cf);
  CFRelease(v10);
  CFRelease(v11);
  return v12;
}

uint64_t __CreateSmoothIcosahedronSource(int a1, float a2)
{
  float32x4_t v4;
  unsigned int v5;
  float v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  CFDataRef v15;
  CFDataRef v16;
  __int16 v17;
  uint64_t v18;
  int32x4_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x4_t v22;
  int32x4_t v23;
  float32x2_t v24;
  float32x2_t v25;
  int32x4_t v26;
  int8x16_t v27;
  float32x2_t v28;
  float32x2_t v29;
  int8x16_t v30;
  int32x4_t v31;
  float32x2_t v32;
  float32x2_t v33;
  int32x4_t v34;
  int32x4_t v35;
  float32x2_t v36;
  float32x2_t v37;
  int8x16_t v38;
  int32x4_t v39;
  float32x2_t v40;
  float32x2_t v41;
  int8x16_t v42;
  int32x4_t v43;
  float32x2_t v44;
  float32x2_t v45;
  int8x16_t v46;
  int32x4_t v47;
  float32x2_t v48;
  float32x2_t v49;
  int32x4_t v50;
  int32x4_t v51;
  float32x2_t v52;
  float32x2_t v53;
  int8x16_t v54;
  int32x4_t v55;
  float32x2_t v56;
  float32x2_t v57;
  int8x16_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  const void *v63;
  uint64_t MutableCopy;
  float v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float v76;
  __int32 v77;
  UInt8 bytes[16];
  __int128 v79;
  _BYTE v80[160];
  __int128 v81;
  __int128 v82;
  _BYTE v83[24];
  int v84;
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  *(double *)v4.i64 = (float)(a2 + a2) * 2.23606798;
  *(float *)&v5 = *(double *)v4.i64 / 5.0;
  v4.f32[0] = *(double *)v4.i64 / 10.0;
  v76 = *(float *)&v5;
  v77 = v4.i32[0];
  v6 = -v4.f32[0];
  v4.i32[0] = 0;
  v66 = v6;
  v4.f32[1] = v6;
  v4.i64[1] = v5;
  v67 = v4;
  *(float32x2_t *)v7.f32 = C3DVector3EulerRotate(v4, (__n128)xmmword_1DD007AB0);
  v70 = v7;
  *(float32x2_t *)v8.f32 = C3DVector3EulerRotate(v7, (__n128)xmmword_1DD007AB0);
  v71 = v8;
  *(float32x2_t *)v9.f32 = C3DVector3EulerRotate(v8, (__n128)xmmword_1DD007AB0);
  v72 = v9;
  *(float32x2_t *)v10.f32 = C3DVector3EulerRotate(v9, (__n128)xmmword_1DD007AB0);
  v69 = v10;
  v10.i32[0] = 0;
  v10.i32[3] = 0;
  v10.i32[1] = v77;
  v10.f32[2] = -v76;
  v68 = v10;
  *(float32x2_t *)v11.f32 = C3DVector3EulerRotate(v10, (__n128)xmmword_1DD007AB0);
  v73 = v11;
  *(float32x2_t *)v12.f32 = C3DVector3EulerRotate(v11, (__n128)xmmword_1DD007AB0);
  v74 = v12;
  *(float32x2_t *)v13.f32 = C3DVector3EulerRotate(v12, (__n128)xmmword_1DD007AB0);
  v75 = v13;
  *(float32x2_t *)v14.f32 = C3DVector3EulerRotate(v13, (__n128)xmmword_1DD007AB0);
  if (!a1)
  {
    *(_DWORD *)bytes = 0;
    *(float *)&bytes[4] = -a2;
    *(_QWORD *)&bytes[8] = 0;
    *(float *)&v79 = -a2;
    *(_QWORD *)((char *)&v79 + 4) = 0;
    *((float *)&v79 + 3) = -a2;
    *(_QWORD *)v80 = 0;
    *(float *)&v80[8] = -a2;
    *(_QWORD *)&v80[12] = 0;
    *(float *)&v80[20] = -a2;
    *(_QWORD *)&v80[24] = 0;
    *(float *)&v80[32] = v66;
    *(float *)&v80[36] = v76;
    v60 = v70;
    v60.i32[3] = v71.i32[0];
    *(float32x4_t *)&v80[40] = v60;
    *(int8x16_t *)&v80[56] = vextq_s8(vextq_s8((int8x16_t)v71, (int8x16_t)v71, 0xCuLL), (int8x16_t)v72, 8uLL);
    *(int8x16_t *)&v80[72] = vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v72, (int32x4_t)v72), (int8x16_t)v69, 0xCuLL);
    *(_DWORD *)&v80[88] = 0;
    *(float *)&v80[92] = v66;
    *(float *)&v80[96] = v76;
    v61 = v75;
    v61.i32[3] = v14.i32[0];
    *(float32x4_t *)&v80[100] = v61;
    *(_QWORD *)&v80[116] = vextq_s8((int8x16_t)v14, (int8x16_t)v14, 4uLL).u64[0];
    *(_DWORD *)&v80[124] = 0;
    v62 = v73;
    v62.i32[3] = v74.i32[0];
    *(_DWORD *)&v80[128] = v77;
    *(float *)&v80[132] = -v76;
    *(float32x4_t *)&v80[136] = v62;
    *(_QWORD *)&v80[152] = vextq_s8((int8x16_t)v74, (int8x16_t)v74, 4uLL).u64[0];
    LODWORD(v81) = 0;
    *((float *)&v81 + 1) = a2;
    *((_QWORD *)&v81 + 1) = 0;
    *(_QWORD *)((char *)&v82 + 4) = 0;
    *(float *)&v82 = a2;
    *((float *)&v82 + 3) = a2;
    *(_QWORD *)v83 = 0;
    *(_QWORD *)&v83[12] = 0;
    *(float *)&v83[8] = a2;
    *(float *)&v83[20] = a2;
    v84 = 0;
    v15 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], bytes, 252);
    v16 = v15;
    v17 = 0;
    goto LABEL_7;
  }
  if (a1 == 1)
  {
    v19 = (int32x4_t)vmulq_f32(v69, v69);
    v19.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v19, 2), vadd_f32(*(float32x2_t *)v19.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v19.i8, 1))).u32[0];
    v20 = vrsqrte_f32((float32x2_t)v19.u32[0]);
    v21 = vmul_f32(v20, vrsqrts_f32((float32x2_t)v19.u32[0], vmul_f32(v20, v20)));
    v22 = vmulq_n_f32(v69, vmul_f32(v21, vrsqrts_f32((float32x2_t)v19.u32[0], vmul_f32(v21, v21))).f32[0]);
    v23 = (int32x4_t)vmulq_f32(v67, v67);
    v23.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v23, 2), vadd_f32(*(float32x2_t *)v23.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v23.i8, 1))).u32[0];
    v24 = vrsqrte_f32((float32x2_t)v23.u32[0]);
    v25 = vmul_f32(v24, vrsqrts_f32((float32x2_t)v23.u32[0], vmul_f32(v24, v24)));
    v23.i32[0] = vmul_f32(v25, vrsqrts_f32((float32x2_t)v23.u32[0], vmul_f32(v25, v25))).u32[0];
    v26 = (int32x4_t)vmulq_f32(v70, v70);
    v26.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v26, 2), vadd_f32(*(float32x2_t *)v26.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v26.i8, 1))).u32[0];
    v27 = (int8x16_t)vmulq_n_f32(v67, *(float *)v23.i32);
    v28 = vrsqrte_f32((float32x2_t)v26.u32[0]);
    v29 = vmul_f32(v28, vrsqrts_f32((float32x2_t)v26.u32[0], vmul_f32(v28, v28)));
    v30 = (int8x16_t)vmulq_n_f32(v70, vmul_f32(v29, vrsqrts_f32((float32x2_t)v26.u32[0], vmul_f32(v29, v29))).f32[0]);
    v31 = (int32x4_t)vmulq_f32(v71, v71);
    v31.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v31, 2), vadd_f32(*(float32x2_t *)v31.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v31.i8, 1))).u32[0];
    v32 = vrsqrte_f32((float32x2_t)v31.u32[0]);
    v33 = vmul_f32(v32, vrsqrts_f32((float32x2_t)v31.u32[0], vmul_f32(v32, v32)));
    v31.i32[0] = vmul_f32(v33, vrsqrts_f32((float32x2_t)v31.u32[0], vmul_f32(v33, v33))).u32[0];
    v34 = (int32x4_t)vmulq_f32(v72, v72);
    v35 = (int32x4_t)vmulq_n_f32(v71, *(float *)v31.i32);
    v34.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v34, 2), vadd_f32(*(float32x2_t *)v34.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v34.i8, 1))).u32[0];
    v36 = vrsqrte_f32((float32x2_t)v34.u32[0]);
    v37 = vmul_f32(v36, vrsqrts_f32((float32x2_t)v34.u32[0], vmul_f32(v36, v36)));
    v38 = (int8x16_t)vmulq_n_f32(v72, vmul_f32(v37, vrsqrts_f32((float32x2_t)v34.u32[0], vmul_f32(v37, v37))).f32[0]);
    v39 = (int32x4_t)vmulq_f32(v73, v73);
    v39.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v39, 2), vadd_f32(*(float32x2_t *)v39.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v39.i8, 1))).u32[0];
    v40 = vrsqrte_f32((float32x2_t)v39.u32[0]);
    v41 = vmul_f32(v40, vrsqrts_f32((float32x2_t)v39.u32[0], vmul_f32(v40, v40)));
    v42 = (int8x16_t)vmulq_n_f32(v73, vmul_f32(v41, vrsqrts_f32((float32x2_t)v39.u32[0], vmul_f32(v41, v41))).f32[0]);
    v43 = (int32x4_t)vmulq_f32(v74, v74);
    v43.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v43, 2), vadd_f32(*(float32x2_t *)v43.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v43.i8, 1))).u32[0];
    v44 = vrsqrte_f32((float32x2_t)v43.u32[0]);
    v45 = vmul_f32(v44, vrsqrts_f32((float32x2_t)v43.u32[0], vmul_f32(v44, v44)));
    v46 = (int8x16_t)vmulq_n_f32(v74, vmul_f32(v45, vrsqrts_f32((float32x2_t)v43.u32[0], vmul_f32(v45, v45))).f32[0]);
    v47 = (int32x4_t)vmulq_f32(v75, v75);
    v47.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v47, 2), vadd_f32(*(float32x2_t *)v47.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v47.i8, 1))).u32[0];
    v48 = vrsqrte_f32((float32x2_t)v47.u32[0]);
    v49 = vmul_f32(v48, vrsqrts_f32((float32x2_t)v47.u32[0], vmul_f32(v48, v48)));
    v47.i32[0] = vmul_f32(v49, vrsqrts_f32((float32x2_t)v47.u32[0], vmul_f32(v49, v49))).u32[0];
    v50 = (int32x4_t)vmulq_f32(v14, v14);
    v50.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v50, 2), vadd_f32(*(float32x2_t *)v50.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v50.i8, 1))).u32[0];
    v51 = (int32x4_t)vmulq_n_f32(v75, *(float *)v47.i32);
    v52 = vrsqrte_f32((float32x2_t)v50.u32[0]);
    v53 = vmul_f32(v52, vrsqrts_f32((float32x2_t)v50.u32[0], vmul_f32(v52, v52)));
    v54 = (int8x16_t)vmulq_n_f32(v14, vmul_f32(v53, vrsqrts_f32((float32x2_t)v50.u32[0], vmul_f32(v53, v53))).f32[0]);
    v55 = (int32x4_t)vmulq_f32(v68, v68);
    v55.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v55, 2), vadd_f32(*(float32x2_t *)v55.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v55.i8, 1))).u32[0];
    v56 = vrsqrte_f32((float32x2_t)v55.u32[0]);
    v57 = vmul_f32(v56, vrsqrts_f32((float32x2_t)v55.u32[0], vmul_f32(v56, v56)));
    *(_OWORD *)bytes = xmmword_1DD007A00;
    v79 = xmmword_1DD007B60;
    *(_OWORD *)v80 = xmmword_1DD007960;
    *(_QWORD *)&v80[16] = 0xBF80000000000000;
    v22.i32[3] = v27.i32[0];
    v58 = vextq_s8(v27, v27, 0xCuLL);
    v27.i32[3] = v30.i32[0];
    *(_DWORD *)&v80[24] = 0;
    *(int8x16_t *)&v80[28] = v27;
    *(int8x16_t *)&v80[44] = vextq_s8(vextq_s8(v30, v30, 0xCuLL), (int8x16_t)v35, 8uLL);
    *(int8x16_t *)&v80[60] = vextq_s8((int8x16_t)vuzp1q_s32(v35, v35), v38, 0xCuLL);
    v59 = vmulq_n_f32(v68, vmul_f32(v57, vrsqrts_f32((float32x2_t)v55.u32[0], vmul_f32(v57, v57))).f32[0]);
    *(float32x4_t *)&v80[76] = v22;
    *(int8x16_t *)&v80[92] = vextq_s8(v58, (int8x16_t)v51, 8uLL);
    *(int8x16_t *)&v80[108] = vextq_s8((int8x16_t)vuzp1q_s32(v51, v51), v54, 0xCuLL);
    v59.i32[3] = v42.i32[0];
    *(float32x4_t *)&v80[124] = v59;
    *(int8x16_t *)&v80[140] = vextq_s8(vextq_s8(v42, v42, 0xCuLL), v46, 8uLL);
    *(_DWORD *)&v80[156] = v46.i32[2];
    v81 = xmmword_1DD007920;
    v82 = xmmword_1DD007880;
    *(_OWORD *)v83 = xmmword_1DD007600;
    *(_QWORD *)&v83[16] = 0x3F80000000000000;
    v84 = 0;
    v15 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], bytes, 252);
    v16 = v15;
    v17 = 1;
LABEL_7:
    v18 = 3;
    goto LABEL_8;
  }
  if (a1 != 3)
    return C3DMeshSourceCreateMutableCopy(0);
  *(_OWORD *)bytes = xmmword_1DD007AC0;
  v79 = xmmword_1DD007AD0;
  *(_OWORD *)v80 = xmmword_1DD007AE0;
  *(_OWORD *)&v80[16] = xmmword_1DD007AF0;
  *(_OWORD *)&v80[32] = xmmword_1DD007B00;
  *(_OWORD *)&v80[48] = xmmword_1DD007B10;
  *(_OWORD *)&v80[64] = xmmword_1DD007B20;
  *(_OWORD *)&v80[80] = xmmword_1DD007B30;
  *(_OWORD *)&v80[96] = xmmword_1DD007B40;
  *(_OWORD *)&v80[112] = xmmword_1DD007B50;
  *(_QWORD *)&v80[128] = 1061997773;
  v15 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], bytes, 168);
  v16 = v15;
  v17 = 3;
  v18 = 2;
LABEL_8:
  v63 = (const void *)C3DMeshSourceCreate(v15, v17, 21, v18, 1);
  CFRelease(v16);
  MutableCopy = C3DMeshSourceCreateMutableCopy((uint64_t)v63);
  if (v63)
    CFRelease(v63);
  return MutableCopy;
}

uint64_t CreateSphereNormalsAndTexCoordForPoints(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t i;
  float32x4_t v9;
  int32x4_t v10;
  float32x2_t v11;
  float32x2_t v12;
  float v13;
  unsigned int v14;
  float v15;
  float v16;
  unint64_t v17;
  float32x4_t v18;

  result = C3DMeshSourceGetCount(a1);
  if (result >= 1)
  {
    v7 = result;
    for (i = 0; i != v7; ++i)
    {
      v18.i32[2] = 0;
      v18.i64[0] = 0;
      *(double *)v9.i64 = C3DMeshSourceGetValueAtIndexAsVector3(a1, i);
      v10 = (int32x4_t)vmulq_f32(v9, v9);
      v10.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v10, 2), vadd_f32(*(float32x2_t *)v10.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v10.i8, 1))).u32[0];
      v11 = vrsqrte_f32((float32x2_t)v10.u32[0]);
      v12 = vmul_f32(v11, vrsqrts_f32((float32x2_t)v10.u32[0], vmul_f32(v11, v11)));
      v18 = vmulq_n_f32(v9, vmul_f32(v12, vrsqrts_f32((float32x2_t)v10.u32[0], vmul_f32(v12, v12))).f32[0]);
      C3DMeshSourceAppendVector3(a2, (uint64_t)&v18, 1);
      v15 = v18.f32[1];
      v13 = asinf(v18.f32[0]) / 3.14159265 + 0.5;
      v16 = v13;
      *(float *)&v14 = 1.0 - (asinf(v15) / 3.14159265 + 0.5);
      v17 = __PAIR64__(v14, LODWORD(v16));
      result = C3DMeshSourceAppendVector2(a3, (uint64_t)&v17, 1);
    }
  }
  return result;
}

uint64_t C3DMeshCreateGeosphere(int a1, uint64_t a2, double a3)
{
  float v5;
  const void *SmoothIcosahedron;
  uint64_t v7;
  int v8;
  const __CFAllocator *v9;
  int v10;
  const CFArrayCallBacks *v11;
  const void *SourceWithSemanticAtIndex;
  const void *v13;
  const void *ElementAtIndex;
  const void *v15;
  CFArrayRef v16;
  const void *Mutable;
  const void *v18;
  const void *v19;
  const void *v20;
  uint64_t DeepCopy;
  void *values;

  v5 = a3;
  SmoothIcosahedron = (const void *)C3DGeometryCreateSmoothIcosahedron(0, v5);
  v7 = 6;
  if (a2 > 6)
    v7 = a2;
  v8 = vcvtpd_s64_f64(log((double)(v7 - 5)) / 1.09861229);
  if (v8 < 1)
  {
    v15 = SmoothIcosahedron;
  }
  else
  {
    v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v10 = v8 + 1;
    v11 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
    do
    {
      SourceWithSemanticAtIndex = C3DMeshGetSourceWithSemanticAtIndex((uint64_t)SmoothIcosahedron, 0, 0, 0);
      v13 = C3DMeshGetSourceWithSemanticAtIndex((uint64_t)SmoothIcosahedron, 1, 0, 0);
      values = 0;
      ElementAtIndex = C3DMeshGetElementAtIndex((uint64_t)SmoothIcosahedron, 0, 0);
      values = (void *)C3DMeshSubdivide((uint64_t)SmoothIcosahedron, 0, ElementAtIndex, (uint64_t)SourceWithSemanticAtIndex, (uint64_t)v13, 0, 1);
      v15 = (const void *)C3DMeshCreate();
      C3DMeshAddSource((uint64_t)v15, SourceWithSemanticAtIndex, 0, 0);
      C3DMeshAddSource((uint64_t)v15, v13, 0, 0);
      v16 = CFArrayCreate(v9, (const void **)&values, 1, v11);
      C3DMeshSetMeshElements((uint64_t)v15, v16);
      if (values)
      {
        CFRelease(values);
        values = 0;
      }
      CFRelease(v16);
      if (SmoothIcosahedron)
        CFRelease(SmoothIcosahedron);
      --v10;
      SmoothIcosahedron = v15;
    }
    while (v10 > 1);
  }
  Mutable = (const void *)C3DMeshSourceCreateMutable(0, 1, 0, 3, 1);
  v18 = (const void *)C3DMeshSourceCreateMutable(0, 3, 0, 2, 1);
  v19 = C3DMeshGetSourceWithSemanticAtIndex((uint64_t)v15, 0, 0, 0);
  CreateSphereNormalsAndTexCoordForPoints((uint64_t)v19, (uint64_t)Mutable, (uint64_t)v18);
  v20 = C3DMeshGetSourceWithSemanticAtIndex((uint64_t)v15, 1, 0, 0);
  C3DMeshRemoveSource((uint64_t)v15, v20);
  C3DMeshAddSource((uint64_t)v15, Mutable, 0, 0);
  C3DMeshAddSource((uint64_t)v15, v18, 0, 0);
  if (Mutable)
    CFRelease(Mutable);
  if (v18)
    CFRelease(v18);
  C3DMeshSetOriginalElementType((uint64_t)v15, a1);
  DeepCopy = C3DMeshCreateDeepCopy((uint64_t)v15);
  if (v15)
    CFRelease(v15);
  return DeepCopy;
}

uint64_t C3DFXTechniqueCreateFloor(uint64_t a1, __C3DNode *a2)
{
  const void *v3;
  uint64_t v4;
  uint64_t PassNamed;
  uint64_t v6;
  uint64_t Floor;
  uint64_t PassAtIndex;
  uint64_t v9;
  double ReflectionResolutionScaleFactor;
  int ReflectionSampleCount;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *InputWithName;
  const __CFAllocator *v30;
  CFStringRef v31;
  CFStringRef v32;
  CFTypeRef v33;
  _QWORD *v34;
  CFStringRef v35;
  CFStringRef v36;
  CFTypeRef v37;

  v3 = (const void *)C3DDictionaryNamed(CFSTR("C3DFXFloorPass.plist"));
  v4 = C3DFXTechniqueCreateWithDescription(v3, (uint64_t)a2);
  PassNamed = C3DFXTechniqueGetPassNamed(v4, CFSTR("SceneKit_renderMirroredScene"));
  C3DFXPassSetInitializeCallback(PassNamed, (uint64_t)_initialize);
  C3DFXPassSetShouldExecuteCallback(PassNamed, (uint64_t)_shouldExecute);
  v6 = C3DFXTechniqueGetPassNamed(v4, CFSTR("SceneKit_renderFloor"));
  C3DFXPassSetWillExecuteCallback(v6, (uint64_t)_willExecuteRenderFloor);
  Floor = C3DNodeGetFloor((uint64_t)a2);
  PassAtIndex = C3DFXTechniqueGetPassAtIndex(v4, 0);
  v9 = PassAtIndex;
  if (Floor)
  {
    if (PassAtIndex)
    {
      ReflectionResolutionScaleFactor = C3DFloorGetReflectionResolutionScaleFactor(Floor);
      *(double *)(v9 + 376) = ReflectionResolutionScaleFactor;
      *(double *)(v9 + 384) = ReflectionResolutionScaleFactor;
      ReflectionSampleCount = C3DFloorGetReflectionSampleCount(Floor);
      if (ReflectionSampleCount)
        *(_BYTE *)(v9 + 176) = ReflectionSampleCount;
      goto LABEL_10;
    }
    goto LABEL_8;
  }
  v12 = scn_default_log();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    C3DFXTechniqueCreateFloor_cold_2(v12, v13, v14, v15, v16, v17, v18, v19);
  if (!v9)
  {
LABEL_8:
    v20 = scn_default_log();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_FAULT))
      C3DFXTechniqueCreateFloor_cold_1(v20, v21, v22, v23, v24, v25, v26, v27);
  }
LABEL_10:
  __attachModifierToFloor(a2);
  v28 = C3DFXTechniqueGetPassNamed(v4, CFSTR("SceneKit_renderFloor"));
  InputWithName = C3DFXPassGetInputWithName(v28, CFSTR("u_floorReflectionColor"));
  v30 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v31 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("SceneKit-floor-color-%p"), a2);
  v32 = (CFStringRef)InputWithName[8];
  if (v32 != v31)
  {
    if (v32)
    {
      CFRelease(v32);
      InputWithName[8] = 0;
    }
    if (v31)
      v33 = CFRetain(v31);
    else
      v33 = 0;
    InputWithName[8] = v33;
  }
  CFRelease(v31);
  if (C3DFloorGetReflectionFalloffEnd(Floor) != 0.0)
  {
    v34 = C3DFXPassGetInputWithName(v28, CFSTR("u_floorReflectionDepth"));
    v35 = CFStringCreateWithFormat(v30, 0, CFSTR("SceneKit-floor-depth-%p"), a2);
    v36 = (CFStringRef)v34[8];
    if (v36 != v35)
    {
      if (v36)
      {
        CFRelease(v36);
        v34[8] = 0;
      }
      if (v35)
        v37 = CFRetain(v35);
      else
        v37 = 0;
      v34[8] = v37;
    }
    CFRelease(v35);
  }
  return v4;
}

CFTypeRef _initialize(uint64_t a1)
{
  return C3DFXPassSetMirrorNode(*(_QWORD *)a1, *(CFTypeRef *)(a1 + 16));
}

__C3DFloor *_shouldExecute(__C3DFXPass *a1, __C3DNode *a2)
{
  __C3DFloor *result;
  uint64_t v4;
  float v5;
  float v6;

  if (!a2)
    return 0;
  result = (__C3DFloor *)C3DNodeGetFloor((uint64_t)a2);
  if (result)
  {
    v4 = (uint64_t)result;
    v5 = __computeFloorOpacity(a2, result);
    v6 = *(float *)(v4 + 244);
    *(float *)(v4 + 244) = v5;
    if (v6 == 1.0 && v5 != 1.0)
      __attachModifierToFloor(a2);
    return (__C3DFloor *)(C3DFloorGetReflectivity(v4) != 0.0);
  }
  return result;
}

void _willExecuteRenderFloor(uint64_t *a1)
{
  float32x4_t *v1;
  uint64_t Floor;
  uint64_t v4;
  __n128 *Scene;
  simd_float4 v6;
  float32x4_t *PointOfView;
  float32x4_t v8;
  float32x4_t *v9;
  double v10;
  double v11;
  double v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  float32_t v22;
  int32x2_t v23;
  float v24;
  float v25;
  unsigned int EyeCount;
  int32x4_t v27;
  float32x2_t v28;
  float32x4_t v29;
  int32x4_t v30;
  int8x16_t v31;
  float ReflectionFalloffEnd;
  float v38;
  uint64_t Matrix4x4;
  float32x4_t *v40;
  simd_float4 v41;
  __n128 Viewport;
  float SuperSamplingFactor;
  simd_float4x4 v44;
  float32x4_t v45;
  simd_float4x4 v46[3];
  double v47;
  double v48;

  v1 = (float32x4_t *)a1[2];
  if (v1)
  {
    Floor = C3DNodeGetFloor(a1[2]);
    if (Floor)
    {
      v4 = Floor;
      Scene = (__n128 *)C3DEngineContextGetScene(a1[3]);
      v45.i32[2] = 0;
      v45.i64[0] = 0;
      C3DSceneGetUpAxis(Scene, (__n128 *)&v45);
      C3DFXTechniqueSetValueForSymbol(a1[1], CFSTR("u_floorNormal"), &v45);
      v6.i32[0] = v45.i32[1];
      if (v45.f32[1] == 0.0 && (v6.i32[0] = v45.i32[2], v45.f32[2] == 0.0))
      {
        v41.i32[0] = 0;
        v41.f32[1] = -v45.f32[0];
        v41.i32[2] = 0;
        v41.i32[3] = 1.0;
        v46[0].columns[0] = v41;
      }
      else
      {
        v6.i32[1] = 0;
        v6.i32[2] = 0;
        v6.i32[3] = 1.0;
        v46[0].columns[0] = v6;
      }
      C3DFXTechniqueSetValueForSymbol(a1[1], CFSTR("u_floorTangent"), v46);
      PointOfView = C3DEngineContextGetPointOfView(a1[3]);
      if (PointOfView)
      {
        v9 = PointOfView;
        if (C3DNodeGetProjectionInfos((uint64_t)PointOfView, (uint64_t)v46))
        {
          if (*(double *)v46[0].columns[1].i64 >= 10000.0)
            v10 = *(double *)v46[0].columns[1].i64;
          else
            v10 = 10000.0;
          if ((v46[0].columns[0].i8[0] & 1) != 0)
          {
            v21 = sqrt(*(double *)v46[0].columns[3].i64 * *(double *)v46[0].columns[3].i64 + v10 * v10);
          }
          else
          {
            v11 = v47;
            if (v47 < v48)
              v11 = v48;
            v12 = cos(v11 * 0.5 / 180.0 * 3.14159265);
            if (v12 <= 0.0)
            {
              v13 = scn_default_log();
              if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
                _willExecuteRenderFloor(v13, v14, v15, v16, v17, v18, v19, v20);
            }
            v21 = (v10 + v10) / v12;
          }
          v44.columns[0].i32[2] = 0;
          v44.columns[0].i64[0] = 0;
          C3DNodeGetWorldPosition(v9, (__n128 *)&v44);
          v8 = (float32x4_t)v44.columns[0];
          v22 = v21;
          v8.f32[3] = v22;
        }
      }
      v23 = vdup_laneq_s32((int32x4_t)v8, 3);
      v46[0].columns[0] = (simd_float4)vmlsq_f32(v8, v45, v8);
      *(int32x2_t *)v44.columns[0].f32 = v23;
      v24 = *(float *)(v4 + 236);
      if (v24 != 0.0)
      {
        v46[0].columns[0].i32[0] = 0;
        *(float *)v23.i32 = v24;
        *(int32x2_t *)v44.columns[0].f32 = v23;
      }
      v25 = *(float *)(v4 + 240);
      if (v25 != 0.0)
      {
        v46[0].columns[0].i32[2] = 0;
        v44.columns[0].f32[1] = v25;
      }
      C3DFXTechniqueSetValueForSymbol(a1[1], CFSTR("u_floorCenter"), v46);
      C3DFXTechniqueSetValueForSymbol(a1[1], CFSTR("u_floorExtent"), &v44);
      Viewport = C3DEngineContextGetViewport((__n128 *)a1[3]);
      SuperSamplingFactor = C3DEngineContextGetSuperSamplingFactor(a1[3]);
      EyeCount = C3DEngineContextGetEyeCount(a1[3]);
      v29 = (float32x4_t)Viewport;
      if (EyeCount >= 2)
      {
        *(float *)v27.i32 = (float)EyeCount;
        v28.f32[0] = (float)a1[9];
        v30 = (int32x4_t)vextq_s8((int8x16_t)Viewport, (int8x16_t)Viewport, 8uLL);
        *(int32x2_t *)v30.i8 = vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v30.i8, *(float32x2_t *)v27.i8), 0);
        *(float32x2_t *)v27.i8 = vdiv_f32(v28, *(float32x2_t *)v27.i8);
        v30.i32[0] = v27.i32[0];
        v29 = (float32x4_t)vtrn2q_s32(vrev64q_s32(vzip1q_s32(v30, v27)), (int32x4_t)Viewport);
      }
      v31 = (int8x16_t)vmulq_n_f32(v29, SuperSamplingFactor);
      __asm { FMOV            V2.2S, #1.0 }
      v31.u64[1] = (unint64_t)vdiv_f32(_D2, (float32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL));
      v46[0].columns[0] = (simd_float4)v31;
      C3DFXTechniqueSetValueForSymbol(a1[1], CFSTR("u_floor_viewport"), v46);
      v46[0].columns[0].i32[0] = C3DFloorGetReflectivity(v4);
      C3DFXTechniqueSetValueForSymbol(a1[1], CFSTR("u_floorReflectivity"), v46);
      v46[0].columns[0].i32[0] = C3DFloorGetReflectionFalloffStart(v4);
      C3DFXTechniqueSetValueForSymbol(a1[1], CFSTR("u_floorFalloffStart"), v46);
      ReflectionFalloffEnd = C3DFloorGetReflectionFalloffEnd(v4);
      v38 = ReflectionFalloffEnd - C3DFloorGetReflectionFalloffStart(v4);
      if (v38 <= 0.0)
        v38 = 1.0;
      v46[0].columns[0].f32[0] = v38;
      C3DFXTechniqueSetValueForSymbol(a1[1], CFSTR("u_floorFalloff"), v46);
      C3DComputeMirrorPlane(v1, &v45, (__n128 *)v46);
      C3DFXTechniqueSetValueForSymbol(a1[1], CFSTR("u_floorPlane"), v46);
      Matrix4x4 = C3DEngineContextGetMatrix4x4(a1[3], 1);
      v40 = (float32x4_t *)C3DEngineContextGetMatrix4x4(a1[3], 0);
      C3DMatrix4x4Mult(Matrix4x4, v40, v46);
      C3DMatrix4x4Invert(v46, &v44);
      C3DFXTechniqueSetValueForSymbol(a1[1], CFSTR("u_floorMVP_i"), &v44);
    }
  }
}

void __attachModifierToFloor(__C3DNode *a1)
{
  __C3DFloor *Floor;
  CFTypeRef *v3;
  float v4;
  __CFArray *Mutable;
  const __CFString *v6;
  const void *v7;
  const __CFString *v8;
  const void *v9;
  __CFDictionary *v10;
  int v11;
  const __CFString *v12;
  const __CFString *v13;
  const void *v14;
  const void *v15;

  Floor = (__C3DFloor *)C3DNodeGetFloor((uint64_t)a1);
  if (Floor)
  {
    v3 = (CFTypeRef *)Floor;
    v4 = __computeFloorOpacity(a1, Floor);
    Mutable = CFArrayCreateMutable(0, 4, MEMORY[0x1E0C9B378]);
    v6 = (const __CFString *)C3DGetTextResourceWithNameAllowingHotReload(CFSTR("FloorGeomImpl.glsl"));
    v7 = (const void *)C3DShaderModifiersCreate(v6, 0, 0, 1, 0, 0);
    CFArrayAppendValue(Mutable, v7);
    CFRelease(v7);
    v8 = (const __CFString *)C3DGetTextResourceWithNameAllowingHotReload(CFSTR("FloorGeomImpl-metal.h"));
    v9 = (const void *)C3DShaderModifiersCreate(v8, 0, 0, 0, 0, 0);
    CFArrayAppendValue(Mutable, v9);
    CFRelease(v9);
    if (C3DFloorGetReflectivity((uint64_t)v3) > 0.0)
    {
      v10 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (C3DFloorGetReflectionFalloffEnd((uint64_t)v3) != 0.0)
        CFDictionaryAddValue(v10, CFSTR("USE_FALLOFF"), &stru_1EA5A6480);
      v11 = 2 * (v4 != 1.0);
      if (C3DFloorGetReflectionFalloffStart((uint64_t)v3) != 0.0)
        CFDictionaryAddValue(v10, CFSTR("USE_FALLOFF_START"), &stru_1EA5A6480);
      if (v4 < 1.0)
        CFDictionaryAddValue(v10, CFSTR("USE_TRANSPARENCY"), &stru_1EA5A6480);
      v12 = (const __CFString *)C3DGetTextResourceWithNameAllowingHotReload(CFSTR("FloorImpl.glsl"));
      v13 = (const __CFString *)C3DGetTextResourceWithNameAllowingHotReload(CFSTR("FloorImpl-metal.h"));
      v14 = (const void *)C3DShaderModifiersCreate(v12, 2, v10, 1, 0, v11);
      CFArrayAppendValue(Mutable, v14);
      CFRelease(v14);
      v15 = (const void *)C3DShaderModifiersCreate(v13, 2, v10, 0, 0, v11);
      CFArrayAppendValue(Mutable, v15);
      CFRelease(v15);
      CFRelease(v10);
    }
    C3DEntitySetAttribute(v3, CFSTR("kShaderModifiers"), Mutable);
    CFRelease(Mutable);
  }
}

float __computeFloorOpacity(__C3DNode *a1, __C3DFloor *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  float v14;
  const __CFArray *MaterialAtIndex;
  float *CommonProfile;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __computeFloorOpacity(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = 1.0;
  if (C3DFloorGetReflectivity((uint64_t)a2) != 0.0)
  {
    C3DNodeGetWorldAlpha((uint64_t)a1);
    v12 = v14;
    MaterialAtIndex = C3DGeometryGetMaterialAtIndex((uint64_t)a2, 0);
    if (MaterialAtIndex)
    {
      CommonProfile = (float *)C3DMaterialGetCommonProfile((uint64_t)MaterialAtIndex);
      if (CommonProfile)
        return v12 * C3DEffectCommonProfileGetFloatProperty(CommonProfile, 18);
    }
  }
  return v12;
}

uint64_t C3DFinalizeDeserialization(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *ClassWithTypeID;
  uint64_t (*v9)(const void *, uint64_t, uint64_t, uint64_t);

  CFGetTypeID(a1);
  ClassWithTypeID = (_QWORD *)_CFRuntimeGetClassWithTypeID();
  if (*ClassWithTypeID == 749405696
    && (v9 = (uint64_t (*)(const void *, uint64_t, uint64_t, uint64_t))ClassWithTypeID[25]) != 0)
  {
    return v9(a1, a2, a3, a4);
  }
  else
  {
    return 0;
  }
}

_QWORD *C3DFillLibraryForSerialization(const void *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t (*v7)(const void *, uint64_t, uint64_t);

  CFGetTypeID(a1);
  result = (_QWORD *)_CFRuntimeGetClassWithTypeID();
  if (*result == 749405696)
  {
    v7 = (uint64_t (*)(const void *, uint64_t, uint64_t))result[26];
    if (v7)
      return (_QWORD *)v7(a1, a2, a3);
  }
  return result;
}

uint64_t C3DInitWithPropertyList(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *ClassWithTypeID;
  uint64_t (*v9)(const void *, uint64_t, uint64_t, uint64_t);

  CFGetTypeID(a1);
  ClassWithTypeID = (_QWORD *)_CFRuntimeGetClassWithTypeID();
  if (*ClassWithTypeID == 749405696
    && (v9 = (uint64_t (*)(const void *, uint64_t, uint64_t, uint64_t))ClassWithTypeID[23]) != 0)
  {
    return v9(a1, a2, a3, a4);
  }
  else
  {
    return 0;
  }
}

uint64_t C3DCopyPropertyList(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *ClassWithTypeID;
  uint64_t (*v9)(const void *, uint64_t, uint64_t, uint64_t);

  CFGetTypeID(a1);
  ClassWithTypeID = (_QWORD *)_CFRuntimeGetClassWithTypeID();
  if (*ClassWithTypeID == 749405696
    && (v9 = (uint64_t (*)(const void *, uint64_t, uint64_t, uint64_t))ClassWithTypeID[24]) != 0)
  {
    return v9(a1, a2, a3, a4);
  }
  else
  {
    return 0;
  }
}

void *C3DSetValue(CFTypeRef cf, void *a2, const void *a3, size_t a4, uint64_t a5, uint64_t a6)
{
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *ClassWithTypeID;
  uint64_t (*v21)(CFTypeRef, void *, const void *, size_t, uint64_t, uint64_t);

  if (!cf)
  {
    v12 = scn_default_log();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
      _C3DGeometryFillLibraryForSerialization_cold_1(v12, v13, v14, v15, v16, v17, v18, v19);
  }
  CFGetTypeID(cf);
  ClassWithTypeID = (_QWORD *)_CFRuntimeGetClassWithTypeID();
  if (*ClassWithTypeID == 749405696
    && (v21 = (uint64_t (*)(CFTypeRef, void *, const void *, size_t, uint64_t, uint64_t))ClassWithTypeID[12]) != 0)
  {
    return (void *)v21(cf, a2, a3, a4, a5, a6);
  }
  else
  {
    return memcpy(a2, a3, a4);
  }
}

void *(*C3DGetValueGetter(const void *a1))(int a1, const void *a2, void *__dst, size_t __n)
{
  _QWORD *ClassWithTypeID;
  void *(*result)(int, const void *, void *, size_t);

  CFGetTypeID(a1);
  ClassWithTypeID = (_QWORD *)_CFRuntimeGetClassWithTypeID();
  if (*ClassWithTypeID != 749405696)
    return _C3DGenericGetValue;
  result = (void *(*)(int, const void *, void *, size_t))ClassWithTypeID[13];
  if (!result)
    return _C3DGenericGetValue;
  return result;
}

void *_C3DGenericGetValue(int a1, const void *a2, void *__dst, size_t __n)
{
  return memcpy(__dst, a2, __n);
}

void *(*C3DGetValueSetter(const void *a1))(int a1, void *__dst, void *__src, size_t __n)
{
  _QWORD *ClassWithTypeID;
  void *(*result)(int, void *, void *, size_t);

  CFGetTypeID(a1);
  ClassWithTypeID = (_QWORD *)_CFRuntimeGetClassWithTypeID();
  if (*ClassWithTypeID != 749405696)
    return _C3DGenericSetValue;
  result = (void *(*)(int, void *, void *, size_t))ClassWithTypeID[12];
  if (!result)
    return _C3DGenericSetValue;
  return result;
}

void *_C3DGenericSetValue(int a1, void *__dst, void *__src, size_t __n)
{
  return memcpy(__dst, __src, __n);
}

_QWORD *C3DGenericSourceDidChange(CFTypeRef cf, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *result;
  uint64_t (*v13)(CFTypeRef, uint64_t);

  if (!cf)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      _C3DGeometryFillLibraryForSerialization_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  CFGetTypeID(cf);
  result = (_QWORD *)_CFRuntimeGetClassWithTypeID();
  if (*result == 749405696)
  {
    v13 = (uint64_t (*)(CFTypeRef, uint64_t))result[28];
    if (v13)
      return (_QWORD *)v13(cf, a2);
  }
  return result;
}

uint64_t C3DGetBoundingSphere(CFTypeRef cf, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *ClassWithTypeID;
  uint64_t (*v15)(CFTypeRef, uint64_t, uint64_t);

  if (!cf)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      _C3DGeometryFillLibraryForSerialization_cold_1(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  CFGetTypeID(cf);
  ClassWithTypeID = (_QWORD *)_CFRuntimeGetClassWithTypeID();
  if (*ClassWithTypeID == 749405696
    && (v15 = (uint64_t (*)(CFTypeRef, uint64_t, uint64_t))ClassWithTypeID[16]) != 0)
  {
    return v15(cf, a2, a3);
  }
  else
  {
    return 0;
  }
}

void _removeFromScene(void *a1, uint64_t a2)
{
  uint64_t AnimationManager;
  uint64_t v4;

  AnimationManager = C3DSceneGetAnimationManager(a2);
  if (AnimationManager)
  {
    v4 = AnimationManager;
    C3DAnimationManagerRemoveAllAnimationsForObject(AnimationManager, a1);
    C3DAnimationManagerRemoveAllBindings(v4, (uint64_t)a1);
    C3DAnimationManagerRemoveActionsForObject(v4, a1);
  }
}

uint64_t C3DSearchByID(const void *a1, uint64_t a2)
{
  _QWORD *ClassWithTypeID;
  uint64_t (*v5)(const void *, uint64_t);

  if (a1
    && (CFGetTypeID(a1), ClassWithTypeID = (_QWORD *)_CFRuntimeGetClassWithTypeID(), *ClassWithTypeID == 749405696)
    && (v5 = (uint64_t (*)(const void *, uint64_t))ClassWithTypeID[22]) != 0)
  {
    return v5(a1, a2);
  }
  else
  {
    return 0;
  }
}

BOOL C3DTypeConformsToProtocol(uint64_t a1, int a2)
{
  _QWORD *ClassWithTypeID;
  _QWORD *v4;

  ClassWithTypeID = (_QWORD *)_CFRuntimeGetClassWithTypeID();
  if (*ClassWithTypeID != 749405696)
    return 0;
  switch(a2)
  {
    case 0:
      v4 = ClassWithTypeID + 24;
      break;
    case 1:
      v4 = ClassWithTypeID + 13;
      break;
    case 2:
      v4 = ClassWithTypeID + 14;
      break;
    case 3:
      v4 = ClassWithTypeID + 15;
      break;
    case 4:
      v4 = ClassWithTypeID + 17;
      break;
    case 5:
      v4 = ClassWithTypeID + 22;
      break;
    default:
      return 0;
  }
  return *v4 != 0;
}

void C3DQuaternionMakeAxisAngle(float32x4_t *a1, float32x4_t *a2)
{
  float32x4_t v3;
  float32x4_t v4;
  float v5;
  __float2 v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x4_t v9;
  float v10;
  float32x4_t v11;

  v3 = *a2;
  v4 = vmulq_f32(v3, v3);
  v5 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v4, 2), vaddq_f32(v4, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v4.f32, 1))).f32[0];
  if (v5 <= 0.000000001)
  {
    v9 = *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 48);
  }
  else
  {
    v10 = v5;
    v11 = *a2;
    v6 = __sincosf_stret(vmuls_lane_f32(0.5, v3, 3));
    v7 = vrsqrte_f32((float32x2_t)LODWORD(v10));
    v8 = vmul_f32(v7, vrsqrts_f32((float32x2_t)LODWORD(v10), vmul_f32(v7, v7)));
    v9 = vmulq_n_f32(vmulq_n_f32(v11, vmul_f32(v8, vrsqrts_f32((float32x2_t)LODWORD(v10), vmul_f32(v8, v8))).f32[0]), v6.__sinval);
    v9.i32[3] = LODWORD(v6.__cosval);
  }
  *a1 = v9;
}

float32_t C3DQuaternionGetAxisAngle(float32x4_t *a1, float32x4_t *a2)
{
  float v4;
  float32_t result;
  float32x4_t v12;

  v12 = *a1;
  LODWORD(_S8) = HIDWORD(*(unsigned __int128 *)a1);
  v4 = acosf(_S8);
  _Q3 = v12;
  result = v4 + v4;
  __asm { FMLS            S1, S8, V3.S[3] }
  *(float *)_D1.i32 = sqrtf(*(float *)_D1.i32);
  if (*(float *)_D1.i32 > 0.000001)
    _Q3 = vdivq_f32(v12, (float32x4_t)vdupq_lane_s32(_D1, 0));
  _Q3.f32[3] = result;
  *a2 = _Q3;
  return result;
}

float32x4_t C3DQuaternionAdd(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3)
{
  float32x4_t result;

  result = vaddq_f32(*a1, *a2);
  *a3 = result;
  return result;
}

__n128 C3DQuaternionConjugate(float32x4_t *a1)
{
  __n128 result;
  float32x4_t v2;

  result = *(__n128 *)a1;
  v2 = vnegq_f32(*a1);
  v2.i32[3] = HIDWORD(*(unsigned __int128 *)a1);
  *a1 = v2;
  return result;
}

float32x4_t C3DQuaternionNormalize(float32x4_t *a1)
{
  int8x16_t v1;
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t result;

  v1 = (int8x16_t)vmulq_f32(*a1, *a1);
  *(float32x2_t *)v1.i8 = vadd_f32(*(float32x2_t *)v1.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v1, v1, 8uLL));
  v2 = (float32x4_t)vdupq_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v1.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v1.i8, 1)), 0);
  v3 = vrsqrteq_f32(v2);
  v4 = vmulq_f32(v3, vrsqrtsq_f32(v2, vmulq_f32(v3, v3)));
  __asm { FMOV            V3.4S, #1.0 }
  result = vmulq_f32(*a1, (float32x4_t)vbslq_s8((int8x16_t)vceqzq_f32(v2), _Q3, (int8x16_t)vmulq_f32(v4, vrsqrtsq_f32(v2, vmulq_f32(v4, v4)))));
  *a1 = result;
  return result;
}

float32x4_t C3DQuaternionMult(float32x4_t *a1, int32x4_t *a2, float32x4_t *a3)
{
  int32x4_t v3;
  int32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t result;
  float32x4_t v9;

  v3 = *(int32x4_t *)a1;
  v4 = *a2;
  v5 = *a1;
  v5.i32[3] = (__int32)*a1;
  v6 = (float32x4_t)vzip1q_s32(v4, v4);
  v6.i32[0] = a2->i64[1];
  v7 = vmlaq_f32(vmlaq_laneq_f32(vmulq_f32(vmulq_f32(v5, (float32x4_t)vextq_s8((int8x16_t)vdupq_laneq_s32(*a2, 3), *(int8x16_t *)a2, 4uLL)), (float32x4_t)xmmword_1DD007D20), *(float32x4_t *)a2, *a1, 3), (float32x4_t)xmmword_1DD007D20, vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v3, (int8x16_t)v3, 0xCuLL), *(int8x16_t *)a1, 8uLL), v6));
  result = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v3, v3), *(int8x16_t *)a1, 0xCuLL);
  v9 = (float32x4_t)vuzp1q_s32(v4, v4);
  v9.i32[0] = HIDWORD(a2->i64[0]);
  *a3 = vmlsq_f32(v7, v9, result);
  return result;
}

float32x4_t C3DQuaternionSlerp(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, float a4, double a5, double a6, double a7, double a8, double a9, float32x4_t _Q6)
{
  float32x4_t v13;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float32x4_t result;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float v31;
  float v32;

  _Q3 = *a1;
  v13 = *a2;
  _Q0 = vmulq_f32(*a1, *a2);
  _S1 = a2->i64[1];
  __asm { FMLA            S0, S1, V3.S[2] }
  LODWORD(_S2) = HIDWORD(*(unsigned __int128 *)a2);
  __asm { FMLA            S6, S2, V3.S[3] }
  if (_Q6.f32[0] >= 0.0)
    v21 = _Q6.f32[0];
  else
    v21 = -(float)(_Q0.f32[0] + (float)(COERCE_FLOAT(HIDWORD(*(unsigned __int128 *)a1)) * _S2));
  if (1.0 - v21 <= 0.00100000005)
  {
    v26 = 1.0 - a4;
  }
  else
  {
    v29 = *a2;
    v30 = *a1;
    v31 = a4;
    v28 = _Q6;
    v22 = acosf(v21);
    v23 = sinf(v22);
    v24 = sinf((float)(1.0 - v31) * v22);
    v25 = v22 * v31;
    v32 = v24 / v23;
    _Q0.f32[0] = sinf(v25);
    _Q3 = v30;
    v26 = v32;
    _Q6 = v28;
    v13 = v29;
    a4 = _Q0.f32[0] / v23;
  }
  _Q0.i32[0] = 0;
  result = vmlaq_n_f32(vmulq_n_f32((float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(_Q0, _Q6), 0), (int8x16_t)vnegq_f32(v13), (int8x16_t)v13), a4), _Q3, v26);
  *a3 = result;
  return result;
}

float C3DQuaternionMakeEuler(_OWORD *a1, float a2, float a3, float a4)
{
  __float2 v7;
  __float2 v8;
  __float2 v9;
  __int128 v10;
  float result;

  v7 = __sincosf_stret(a2 * 0.5);
  v8 = __sincosf_stret(a3 * 0.5);
  v9 = __sincosf_stret(a4 * 0.5);
  *(float *)&v10 = (float)(v7.__sinval * (float)(v8.__cosval * v9.__cosval))
                 - (float)(v7.__cosval * (float)(v8.__sinval * v9.__sinval));
  *((float *)&v10 + 1) = (float)((float)(v7.__sinval * v8.__cosval) * v9.__sinval)
                       + (float)((float)(v7.__cosval * v8.__sinval) * v9.__cosval);
  result = (float)((float)-(float)(v7.__sinval * v8.__sinval) * v9.__cosval)
         + (float)((float)(v7.__cosval * v8.__cosval) * v9.__sinval);
  *((_QWORD *)&v10 + 1) = __PAIR64__((float)(v7.__sinval * (float)(v8.__sinval * v9.__sinval))+ (float)(v7.__cosval * (float)(v8.__cosval * v9.__cosval)), LODWORD(result));
  *a1 = v10;
  return result;
}

double C3DQuaternionGetRotationBetweenQuaternions(float32x4_t a1, float32x4_t a2)
{
  float32x4_t v2;
  int8x16_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  double result;

  v2 = vnegq_f32(a1);
  v2.i32[3] = a1.i32[3];
  v3 = (int8x16_t)vmulq_f32(v2, v2);
  *(float32x2_t *)v3.i8 = vadd_f32(*(float32x2_t *)v3.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v3, v3, 8uLL));
  v4 = (float32x4_t)vdupq_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v3.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v3.i8, 1)), 0);
  v5 = vrsqrteq_f32(v4);
  v6 = vmulq_f32(v5, vrsqrtsq_f32(v4, vmulq_f32(v5, v5)));
  __asm { FMOV            V4.4S, #1.0 }
  v12 = vmulq_f32(v2, (float32x4_t)vbslq_s8((int8x16_t)vceqzq_f32(v4), _Q4, (int8x16_t)vmulq_f32(v6, vrsqrtsq_f32(v4, vmulq_f32(v6, v6)))));
  v13 = a2;
  v13.i32[3] = a2.i32[0];
  v14 = (float32x4_t)vzip1q_s32((int32x4_t)v12, (int32x4_t)v12);
  v14.i32[0] = v12.i32[2];
  v15 = (float32x4_t)vuzp1q_s32((int32x4_t)v12, (int32x4_t)v12);
  v15.i32[0] = v12.i32[1];
  *(_QWORD *)&result = vmlsq_f32(vmlaq_f32(vmlaq_laneq_f32(vmulq_f32(vmulq_f32(v13, (float32x4_t)vextq_s8((int8x16_t)vdupq_laneq_s32((int32x4_t)v12, 3), (int8x16_t)v12, 4uLL)), (float32x4_t)xmmword_1DD007D20), v12, a2, 3), (float32x4_t)xmmword_1DD007D20, vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)a2, (int8x16_t)a2, 0xCuLL), (int8x16_t)a2, 8uLL), v14)), v15, (float32x4_t)vextq_s8(
                                        (int8x16_t)vuzp1q_s32((int32x4_t)a2, (int32x4_t)a2),
                                        (int8x16_t)a2,
                                        0xCuLL)).u64[0];
  return result;
}

void C3DQuaternionGetEuler(float32x4_t *a1, int8x16_t *a2)
{
  float32x4_t v3;
  int8x16_t v4;
  float v5;
  int8x16_t v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  int *v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  float32x4_t v17;
  int8x16_t v18;
  float v19;

  v3 = *a1;
  v4 = (int8x16_t)vmulq_f32(v3, v3);
  v5 = vaddv_f32(vadd_f32(*(float32x2_t *)v4.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v4, v4, 8uLL)));
  v6 = 0uLL;
  if (v5 != 0.0)
  {
    LODWORD(v7) = a1->i64[1];
    LODWORD(v8) = HIDWORD(a1->i64[0]);
    LODWORD(v9) = HIDWORD(*(unsigned __int128 *)a1);
    v10 = vmlas_n_f32(vmuls_lane_f32(-v3.f32[1], v3, 3), v3.f32[2], v3.f32[0]) / v5;
    if (v10 <= 0.499)
    {
      if (v10 >= -0.499)
      {
        v13 = *(float *)&v4.i32[1];
        v14 = v4.i64[1];
        v17 = *a1;
        v18 = v4;
        v19 = atan2f((float)((float)(v3.f32[2] * v3.f32[3]) + (float)(v3.f32[0] * v3.f32[1]))+ (float)((float)(v3.f32[2] * v3.f32[3]) + (float)(v3.f32[0] * v3.f32[1])), *(float *)&v4.i32[3] + (float)((float)(*(float *)v4.i32 - *(float *)&v4.i32[1]) - *(float *)&v4.i32[2]));
        *(float *)&v15 = atan2f((float)((float)(v17.f32[0] * v9) + (float)(v8 * v7))+ (float)((float)(v17.f32[0] * v9) + (float)(v8 * v7)), *((float *)&v14 + 1) + (float)(*(float *)&v14 + (float)((float)-*(float *)v18.i32 - v13)));
        v18.i64[0] = v15;
        v16 = asinf(v10 * -2.0);
        v6 = v18;
        *(float *)&v6.i32[1] = v16;
        *(float *)&v6.i32[2] = v19;
        goto LABEL_8;
      }
      *(float *)v6.i32 = atan2f(COERCE_FLOAT(*a1), v3.f32[3]) * -2.0;
      v12 = &dword_1DD007D08;
    }
    else
    {
      v11 = atan2f(COERCE_FLOAT(*a1), v3.f32[3]);
      *(float *)v6.i32 = v11 + v11;
      v12 = &dword_1DD007D0C;
    }
    v6.i32[1] = *v12;
    v6.i32[2] = 0;
  }
LABEL_8:
  *a2 = v6;
}

C3D::ShadowMapPass *C3D::ShadowMapPass::ShadowMapPass(C3D::ShadowMapPass *this, C3D::RenderGraph *a2, C3D::Pass *a3, __C3DNode *a4)
{
  C3D::DrawNodesPass *v5;
  const __CFDictionary *Light;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[5];
  __int128 v25;
  char v26;
  uint64_t v27;
  char v28;

  v24[0] = 0;
  v24[1] = a4;
  memset(&v24[2], 0, 24);
  v25 = xmmword_1DD007D30;
  v26 = 0;
  v27 = 16842752;
  v28 = 2;
  v5 = C3D::DrawNodesPass::DrawNodesPass(this, a2, a3, (const Parameters *)v24);
  *(_QWORD *)v5 = off_1EA598FC8;
  Light = C3DNodeGetLight(*((_QWORD *)v5 + 31));
  if (!Light)
  {
    v7 = scn_default_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
      C3D::ShadowMapPass::ShadowMapPass(v7, v8, v9, v10, v11, v12, v13, v14);
  }
  if ((C3DLightGetCastsShadow((uint64_t)Light) & 1) == 0)
  {
    v15 = scn_default_log();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_FAULT))
      C3D::ShadowMapPass::ShadowMapPass(v15, v16, v17, v18, v19, v20, v21, v22);
  }
  return this;
}

const char *C3D::ShadowMapPass::name(C3D::ShadowMapPass *this)
{
  return "ShadowMapPass";
}

const char *C3D::ShadowMapPass::programHashCodeStoreName(C3D::ShadowMapPass *this)
{
  return "ShadowMapPass";
}

void C3D::ShadowMapPass::setup(C3D::ShadowMapPass *this)
{
  void *v2;
  char *v3;
  uint64_t Scene;
  uint64_t LightingSystem;
  uint64_t v6;
  const __CFDictionary *Light;
  int8x8_t RealShadowMapSize;
  BOOL v9;
  unsigned int ShadowCascadeCount;
  int Type;
  BOOL v12;
  uint32x2_t v13;
  unsigned int v19;
  char v20;
  char v21;

  *((_BYTE *)this + 119) = 0;
  v2 = (void *)*((_QWORD *)this + 31);
  v3 = C3D::Pass::nameWithPrefixAndPointer(this, "SceneKit-spotShadowDepth-", v2);
  Scene = C3DEngineContextGetScene(*((_QWORD *)this + 2));
  LightingSystem = C3DSceneGetLightingSystem(Scene);
  C3DLightingSystemSetShadowMapNameForNode(LightingSystem, v2, (const void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v3));
  C3D::Pass::setOutputCount(this, 1u);
  v6 = C3D::PassDescriptor::outputAtIndex((C3D::ShadowMapPass *)((char *)this + 32), 0);
  *(_BYTE *)(v6 + 64) = 2;
  *(_QWORD *)(v6 + 8) = v3;
  *(_WORD *)(v6 + 28) = 252;
  *(_WORD *)(v6 + 66) = *(_WORD *)(v6 + 66) & 0xFFEC | 0x12;
  Light = C3DNodeGetLight((uint64_t)v2);
  RealShadowMapSize = C3DLightGetRealShadowMapSize((uint64_t)Light);
  *(_WORD *)(v6 + 16) = (int)*(float *)RealShadowMapSize.i32;
  *(_WORD *)(v6 + 18) = (int)*(float *)&RealShadowMapSize.i32[1];
  v9 = C3DLightSupportsShadowCascades((uint64_t)Light);
  ShadowCascadeCount = C3DLightGetShadowCascadeCount((uint64_t)Light);
  Type = C3DLightGetType((uint64_t)Light);
  v12 = ShadowCascadeCount > 1 && v9;
  if (!v12 && Type != 2)
  {
    *((_BYTE *)this + 121) = 1;
    v13.i32[0] = *(unsigned __int16 *)(v6 + 16);
    v13.i32[1] = *(unsigned __int16 *)(v6 + 18);
    __asm { FMOV            V1.2S, #1.0 }
    *((float32x2_t *)&_Q1 + 1) = vadd_f32(vcvt_f32_u32(v13), (float32x2_t)0xC0000000C0000000);
    *((_OWORD *)this + 8) = _Q1;
LABEL_11:
    v20 = !v9;
    if (ShadowCascadeCount < 2)
      v20 = 1;
    if ((v20 & 1) != 0)
    {
      LOWORD(ShadowCascadeCount) = 1;
      v21 = 2;
    }
    else
    {
      *(_WORD *)(v6 + 22) = ShadowCascadeCount;
      v21 = 3;
    }
    *(_BYTE *)(v6 + 24) = v21;
    *((_WORD *)this + 19) = ShadowCascadeCount;
    *(_WORD *)((char *)this + 117) = 0;
    goto LABEL_17;
  }
  if (Type != 2)
    goto LABEL_11;
  v19 = *(unsigned __int16 *)(v6 + 16);
  if (v19 <= *(unsigned __int16 *)(v6 + 18))
    LOWORD(v19) = *(_WORD *)(v6 + 18);
  *(_WORD *)(v6 + 16) = v19;
  *(_WORD *)(v6 + 18) = v19;
  *(_BYTE *)(v6 + 24) = 5;
LABEL_17:
  C3D::DrawNodesPass::setup(this);
}

void C3D::ShadowMapPass::compile(C3D::ShadowMapPass *this)
{
  uint64_t v2;
  C3D::RenderGraphResourceManager *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t CommonProfile;
  uint64_t v8;
  const void *v9;
  float v10[4];

  v2 = (*(uint64_t (**)(C3D::ShadowMapPass *))(*(_QWORD *)this + 64))(this);
  v3 = *(C3D::RenderGraphResourceManager **)(*((_QWORD *)this + 3) + 128);
  v4 = C3D::RenderGraphResourceManager::get(v3, v2);
  *((_QWORD *)this + 670) = v4;
  if (!v4)
  {
    v5 = (_QWORD *)operator new();
    v5[1] = 0;
    v5[2] = 0;
    *v5 = &off_1EA598FA8;
    *((_QWORD *)this + 670) = v5;
    C3D::RenderGraphResourceManager::set((uint64_t)v3, v2, (uint64_t)v5);
    v6 = C3DMaterialCreate();
    C3DEntitySetName(v6, CFSTR("--ShadowMaterial--"));
    CommonProfile = C3DMaterialGetCommonProfile(v6);
    C3DEffectCommonProfileSetLightingModel(CommonProfile, 4);
    v8 = *((_QWORD *)this + 670);
    v9 = *(const void **)(v8 + 16);
    if (v9 != (const void *)v6)
    {
      if (v9)
        CFRelease(v9);
      *(_QWORD *)(v8 + 16) = v6;
    }
    C3DColor4Make(v10, 1.0, 1.0, 1.0, 1.0);
    C3DEffectCommonProfileSetColor(CommonProfile, 2, v10);
    v4 = *((_QWORD *)this + 670);
  }
  *((_QWORD *)this + 32) = C3D::SmartPtr<__C3DMaterial *,C3D::detail::CFRetainFct,C3D::detail::CFReleaseFct>::operator __C3DMaterial *(v4 + 16);
  C3D::DrawNodesPass::compile(this);
}

uint64_t C3D::SmartPtr<__C3DMaterial *,C3D::detail::CFRetainFct,C3D::detail::CFReleaseFct>::operator __C3DMaterial *(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!*(_QWORD *)a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3D::SmartPtr<__C3DMaterial *,C3D::detail::CFRetainFct,C3D::detail::CFReleaseFct>::operator __C3DMaterial *(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)a1;
}

void C3D::ShadowMapPass::execute(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  const __CFDictionary *Light;
  float v6;
  float ShadowBias;
  char CoordinatesSystemOptions;
  double v9;
  double v10;
  double v11;

  v4 = *a2;
  Light = C3DNodeGetLight(a1[31]);
  v6 = 2.0;
  if (C3DLightGetForceCasterBackFaceOnly((uint64_t)Light))
  {
    if (!*(_BYTE *)(v4 + 73) && *(_QWORD *)(v4 + 16) != 1)
    {
      *(_QWORD *)(v4 + 16) = 1;
      *(_BYTE *)(v4 + 41) = 1;
    }
    *(_BYTE *)(v4 + 73) = 1;
    v6 = 0.0;
  }
  if (C3DLightGetType((uint64_t)Light) != 2)
  {
    ShadowBias = C3DLightGetShadowBias((uint64_t)Light);
    CoordinatesSystemOptions = C3DEngineContextGetCoordinatesSystemOptions(a1[2]);
    if ((CoordinatesSystemOptions & 8) != 0)
      *(float *)&v10 = -v6;
    else
      *(float *)&v10 = v6;
    LODWORD(v9) = 1036831949;
    if ((CoordinatesSystemOptions & 8) != 0)
      *(float *)&v9 = -10.0;
    *(float *)&v9 = *(float *)&v9 * ShadowBias;
    LODWORD(v11) = 0;
    objc_msgSend(*(id *)(v4 + 3392), "setDepthBias:slopeScale:clamp:", v9, v10, v11);
  }
  C3D::DrawNodesPass::execute(a1, (uint64_t)a2);
}

void C3D::ShadowMapPass::_setupPointOfViewMatrices(uint64_t a1, float32x4_t *a2, float32x4_t *a3)
{
  uint64_t Scene;
  uint64_t LightingSystem;
  char CoordinatesSystemOptions;
  uint64_t v9;

  Scene = C3DEngineContextGetScene(*(_QWORD *)(a1 + 16));
  LightingSystem = C3DSceneGetLightingSystem(Scene);
  CoordinatesSystemOptions = C3DEngineContextGetCoordinatesSystemOptions(*(_QWORD *)(a1 + 16));
  C3D::DrawNodesPass::_setupPointOfViewMatrices(a1, a2, a3);
  if (*(_BYTE *)(a1 + 302))
    v9 = 0;
  else
    v9 = a1 + 3024;
  C3DLightingSystemComputeShadowMatrices(LightingSystem, a2, v9, a1 + 3792, 0, 0, 0, CoordinatesSystemOptions);
}

void C3D::ShadowMapPass::Resource::~Resource(C3D::ShadowMapPass::Resource *this)
{
  const void *v1;

  *(_QWORD *)this = &off_1EA598FA8;
  v1 = (const void *)*((_QWORD *)this + 2);
  if (v1)
    CFRelease(v1);
}

{
  const void *v1;

  *(_QWORD *)this = &off_1EA598FA8;
  v1 = (const void *)*((_QWORD *)this + 2);
  if (v1)
    CFRelease(v1);
  JUMPOUT(0x1DF0D41C0);
}

void C3DSphereMake(_OWORD *a1, __int128 *a2, float a3)
{
  NSObject *v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  float v24;
  float v25;

  if (!a1
    && (v24 = a3, v5 = scn_default_log(), v6 = os_log_type_enabled(v5, OS_LOG_TYPE_FAULT), a3 = v24, v6))
  {
    C3DPlaneMakeWithVectors_cold_3(v5, v7, v8, v9, v10, v11, v12, v13);
    a3 = v24;
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v25 = a3;
  v14 = scn_default_log();
  v15 = os_log_type_enabled(v14, OS_LOG_TYPE_FAULT);
  a3 = v25;
  if (v15)
  {
    C3DSphereMake_cold_1(v14, v16, v17, v18, v19, v20, v21, v22);
    a3 = v25;
  }
LABEL_6:
  v23 = *a2;
  *((float *)&v23 + 3) = a3;
  *a1 = v23;
}

void C3DSphereMakeByMergingSpheres(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3)
{
  float32x4_t v4;
  float v5;
  float32x4_t v6;
  float32x4_t v7;
  float v8;
  float32x4_t v9;
  float32x4_t v10;
  int32x2_t v11;
  float v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  int8x16_t v16;
  int32x4_t v17;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;

  v4 = *a2;
  LODWORD(v5) = HIDWORD(*(unsigned __int128 *)a2);
  if (v5 < 0.0)
    goto LABEL_2;
  v7 = *a3;
  LODWORD(v8) = HIDWORD(*(unsigned __int128 *)a3);
  if (v8 < 0.0)
  {
LABEL_4:
    v6 = *a2;
    goto LABEL_5;
  }
  v9 = vsubq_f32(v4, v7);
  v10 = vmulq_f32(v9, v9);
  v11 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2), vaddq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1))).u64[0];
  v12 = sqrtf(*(float *)v11.i32);
  if ((float)(v5 + v12) >= v8)
  {
    if ((float)(v8 + v12) >= v5)
    {
      v13 = (float32x4_t)vdupq_lane_s32(v11, 0);
      v14 = vrsqrteq_f32(v13);
      v15 = vmulq_f32(v14, vrsqrtsq_f32(v13, vmulq_f32(v14, v14)));
      v16 = (int8x16_t)vmulq_f32(v15, vrsqrtsq_f32(v13, vmulq_f32(v15, v15)));
      v17 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(*(float *)v11.i32 != 0.0)), 0x1FuLL));
      v17.i32[3] = 0;
      __asm { FMOV            V5.4S, #1.0 }
      v23 = vmulq_f32(v9, (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v17), v16, _Q5));
      v24 = vsubq_f32(v7, vmulq_laneq_f32(v23, v7, 3));
      v25 = vaddq_f32(v4, vmulq_laneq_f32(v23, v4, 3));
      v26 = vsubq_f32(v24, v25);
      v27 = vmulq_f32(v26, v26);
      a1->f32[3] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v27, 2), vaddq_f32(v27, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.f32, 1))).f32[0])* 0.5;
      *(double *)v6.i64 = C3DVector3MidVector(v25, v24);
      v6.i32[3] = a1->i32[3];
      goto LABEL_5;
    }
    if (a2 != a1)
      goto LABEL_4;
  }
  else if (a3 != a1)
  {
LABEL_2:
    v6 = *a3;
LABEL_5:
    *a1 = v6;
  }
}

float C3DSphereXFormMatrix4x4(float32x4_t *a1, float32x4_t *a2, uint64_t a3)
{
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  __int128 v9;
  float32x4_t v10;
  float result;
  float32x4_t v12[4];

  v6 = *a1;
  v7 = a2[1];
  v12[0] = *a2;
  v12[1] = v7;
  v8 = a2[3];
  v12[2] = a2[2];
  v12[3] = v8;
  *(double *)&v9 = C3DVector3MultMatrix4x4(v12, v6);
  HIDWORD(v9) = *(_DWORD *)(a3 + 12);
  *(_OWORD *)a3 = v9;
  v12[0].i32[2] = 0;
  v12[0].i64[0] = 0;
  C3DMatrix4x4GetScale(a2, v12);
  v10 = vabsq_f32(v12[0]);
  result = a1->f32[3] * fmaxf(fmaxf(v10.f32[0], v10.f32[2]), v10.f32[1]);
  *(float *)(a3 + 12) = result;
  return result;
}

CFTypeRef __CFTypeStackRetainCallback(CFTypeRef cf)
{
  if (cf)
    return CFRetain(cf);
  return cf;
}

void __CFTypeStackReleaseCallback(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

void _C3DStackCFFinalize(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      _C3DStackCFFinalize_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  C3DStackReset(a1);
  v10 = *(void **)(a1 + 16);
  if (v10)
    free(v10);
}

CFStringRef _C3DStackCFCopyFormatDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DStack>"));
}

CFStringRef _C3DStackCFCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DStack>"));
}

uint64_t C3DStackCreate(unsigned int a1, uint64_t a2, size_t a3)
{
  uint64_t Instance;

  if (C3DStackGetTypeID_onceToken != -1)
    dispatch_once(&C3DStackGetTypeID_onceToken, &__block_literal_global_13);
  Instance = C3DTypeCreateInstance_(C3DStackGetTypeID_typeID, 0x20uLL);
  *(_DWORD *)(Instance + 24) = a1;
  *(_QWORD *)(Instance + 32) = a3;
  *(_QWORD *)(Instance + 16) = malloc_type_calloc(a1, a3, 0x39951513uLL);
  *(_DWORD *)(Instance + 28) = 0;
  *(_QWORD *)(Instance + 40) = a2;
  return Instance;
}

uint64_t C3DStackGetCount(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      _C3DStackCFFinalize_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(unsigned int *)(a1 + 28);
}

void C3DStackPop(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      _C3DStackCFFinalize_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  if (!*(_DWORD *)(a1 + 28))
  {
    v10 = scn_default_log();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
      C3DStackPop_cold_1(v10, v11, v12, v13, v14, v15, v16, v17);
  }
  --*(_DWORD *)(a1 + 28);
}

uint64_t C3DStackSetValue(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      _C3DStackCFFinalize_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(_QWORD *)(a1 + 32) != 8)
  {
    v12 = scn_default_log();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
      C3DStackSetValue_cold_1(v12, v13, v14, v15, v16, v17, v18, v19);
  }
  v20 = *(_QWORD *)(a1 + 16);
  v21 = *(unsigned int *)(a1 + 28);
  result = *(_QWORD *)(v20 + 8 * v21);
  if (result != a2)
  {
    v23 = *(_QWORD *)(a1 + 40);
    if (v23)
    {
      (*(void (**)(void))(v23 + 8))();
      result = (*(uint64_t (**)(uint64_t))v23)(a2);
      v20 = *(_QWORD *)(a1 + 16);
      v21 = *(unsigned int *)(a1 + 28);
    }
    *(_QWORD *)(v20 + 8 * v21) = a2;
  }
  return result;
}

void C3DStackPush(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char *v13;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      _C3DStackCFFinalize_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  v10 = *(unsigned int *)(a1 + 24);
  v11 = *(_DWORD *)(a1 + 28) + 1;
  *(_DWORD *)(a1 + 28) = v11;
  if (v11 >= v10)
  {
    LODWORD(v12) = 2 * v10;
    if (2 * (int)v10 >= (v10 + 1024))
      v12 = (v10 + 1024);
    else
      v12 = v12;
    *(_DWORD *)(a1 + 24) = v12;
    v13 = (char *)malloc_type_realloc(*(void **)(a1 + 16), *(_QWORD *)(a1 + 32) * v12, 0x6256DF45uLL);
    *(_QWORD *)(a1 + 16) = v13;
    bzero(&v13[*(_QWORD *)(a1 + 32) * v10], *(_QWORD *)(a1 + 32) * (*(_DWORD *)(a1 + 24) - v10));
  }
}

uint64_t C3DStackGetValue(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      _C3DStackCFFinalize_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  if (*(_QWORD *)(a1 + 32) != 8)
  {
    v10 = scn_default_log();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
      C3DStackGetValue_cold_1(v10, v11, v12, v13, v14, v15, v16, v17);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(a1 + 32) * *(unsigned int *)(a1 + 28));
}

void C3DStackReset(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      _C3DStackCFFinalize_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  *(_DWORD *)(a1 + 28) = 0;
  v10 = *(_QWORD *)(a1 + 40);
  if (v10)
  {
    v11 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v11)
    {
      v12 = 0;
      v13 = *(_QWORD *)(a1 + 16);
      do
      {
        if (*(_QWORD *)(v13 + *(_QWORD *)(a1 + 32) * v12))
        {
          (*(void (**)(void))(v10 + 8))();
          v11 = *(unsigned int *)(a1 + 24);
        }
        ++v12;
      }
      while (v12 < v11);
    }
  }
}

btHingeConstraint *_createConstraintFromDefinition(uint64_t a1)
{
  id v2;
  btRigidBody *v4;
  btRigidBody *v5;
  btHingeConstraint *v6;
  NSObject *v7;
  btRigidBody *v8;
  btVector3 v10;
  btVector3 v11;
  btVector3 v12;
  btVector3 v13;

  v2 = *(id *)a1;
  if (*(_QWORD *)(a1 + 8))
  {
    v4 = (btRigidBody *)objc_msgSend(v2, "_handle");
    *(_QWORD *)v13.var0.var0 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)&v13.var0.var0[2] = *(unsigned int *)(a1 + 48);
    *(_QWORD *)v12.var0.var0 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)&v12.var0.var0[2] = *(unsigned int *)(a1 + 24);
    v5 = (btRigidBody *)objc_msgSend(*(id *)(a1 + 8), "_handle");
    *(_QWORD *)v11.var0.var0 = *(_QWORD *)(a1 + 52);
    *(_QWORD *)&v11.var0.var0[2] = *(unsigned int *)(a1 + 60);
    *(_QWORD *)v10.var0.var0 = *(_QWORD *)(a1 + 28);
    *(_QWORD *)&v10.var0.var0[2] = *(unsigned int *)(a1 + 36);
    v6 = (btHingeConstraint *)btAlignedAllocInternal(880, 16);
    btHingeConstraint::btHingeConstraint(v6, v4, v5, &v12, &v10, &v13, &v11, 0);
  }
  else
  {
    if (!v2)
    {
      v7 = scn_default_log();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
        _createConstraintFromDefinition(v7);
    }
    v8 = (btRigidBody *)objc_msgSend(*(id *)a1, "_handle");
    *(_QWORD *)v13.var0.var0 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)&v13.var0.var0[2] = *(unsigned int *)(a1 + 48);
    *(_QWORD *)v12.var0.var0 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)&v12.var0.var0[2] = *(unsigned int *)(a1 + 24);
    v6 = (btHingeConstraint *)btAlignedAllocInternal(880, 16);
    btHingeConstraint::btHingeConstraint(v6, v8, &v12, &v13, 0);
  }
  return v6;
}

void sub_1DCD5E6AC(_Unwind_Exception *a1)
{
  void **v1;

  btAlignedFreeInternal(v1);
  _Unwind_Resume(a1);
}

float32x4_t btHingeConstraint::setAxis(btHingeConstraint *this, float32x4_t *a2)
{
  float v2;
  float v3;
  float v4;
  float v5;
  __int32 v6;
  unsigned int v7;
  float v8;
  int8x16_t v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float32x4_t v14;
  btRigidBody *var8;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  int8x16_t v19;
  int8x16_t v20;
  float32x4_t v21;
  int8x16_t v22;
  int8x8_t v23;
  int8x8_t v24;
  float32x4_t v25;
  float32x4_t v26;
  int8x16_t v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float32x4_t v37;
  float32x4_t v38;
  int8x16_t v39;
  float32x4_t v40;
  int32x4_t v41;
  float32x4_t v42;
  int32x2_t v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x2_t v46;
  float32x2_t v47;
  float32x4_t v48;
  int8x16_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x2_t v52;
  int32x2_t v53;
  float32x2_t v54;
  float32x2_t v55;
  float32x2_t v56;
  float32x4_t v57;
  float32x2_t v58;
  float32x4_t v59;
  float32x4_t v60;
  btRigidBody *var9;
  float32x4_t v62;
  int32x4_t v63;
  int8x16_t v64;
  float32x4_t v65;
  int32x2_t v66;
  unsigned __int32 v67;
  float32x4_t v69;
  float32x4_t v73;
  int8x16_t v74;
  int8x16_t v75;
  float32x4_t v76;
  int8x16_t v77;
  int8x16_t v79;
  float v82;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t result;
  float32x4_t v87;
  int8x16_t v88;
  float32x4_t v93;
  float32x4_t v94;

  v2 = a2->f32[2];
  v3 = a2->f32[1];
  if (fabsf(v2) <= 0.70711)
  {
    v12 = (float)(v3 * v3) + (float)(a2->f32[0] * a2->f32[0]);
    v13 = 1.0 / sqrtf(v12);
    v9.i64[1] = 0;
    *(float *)v9.i32 = -(float)(v3 * v13);
    *(float *)&v9.i32[1] = a2->f32[0] * v13;
    v8 = -(float)(v2 * *(float *)&v9.i32[1]);
    v10 = v2 * *(float *)v9.i32;
    v11 = v12 * v13;
  }
  else
  {
    v4 = (float)(v2 * v2) + (float)(v3 * v3);
    v5 = 1.0 / sqrtf(v4);
    *(float *)&v6 = -(float)(v2 * v5);
    *(float *)&v7 = v3 * v5;
    v8 = v4 * v5;
    v9.i32[0] = 0;
    v9.i32[1] = v6;
    v9.i64[1] = v7;
    v10 = -(float)(a2->f32[0] * *(float *)&v7);
    v11 = a2->f32[0] * *(float *)&v6;
  }
  v14 = *(float32x4_t *)&this->var17;
  LODWORD(this->var16.var0.var0[1].var0.var0[0]) = v9.i32[0];
  this->var16.var0.var0[1].var0.var0[1] = v8;
  *(_QWORD *)&this->var16.var0.var0[1].var0.var0[2] = a2->u32[0];
  LODWORD(this->var16.var0.var0[2].var0.var0[0]) = v9.i32[1];
  this->var16.var0.var0[2].var0.var0[1] = v10;
  *(_QWORD *)&this->var16.var0.var0[2].var0.var0[2] = a2->u32[1];
  LODWORD(this->var16.var1.var0.var0[0]) = v9.i32[2];
  this->var16.var1.var0.var0[1] = v11;
  *(_QWORD *)&this->var16.var1.var0.var0[2] = a2->u32[2];
  var8 = this->var8;
  v16 = *a2;
  v17 = *((float32x4_t *)var8 + 1);
  v18 = *((float32x4_t *)var8 + 2);
  v19 = (int8x16_t)vmulq_f32(v17, *a2);
  v20 = (int8x16_t)vmulq_f32(*a2, v18);
  v21 = *((float32x4_t *)var8 + 3);
  v22 = (int8x16_t)vmulq_f32(*a2, v21);
  v22.i32[3] = 0;
  v23 = (int8x8_t)vadd_f32(vpadd_f32(*(float32x2_t *)v19.i8, *(float32x2_t *)v20.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL)));
  v24 = (int8x8_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v22.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL)), 0);
  *(int8x8_t *)v25.f32 = vext_s8(v23, v24, 4uLL);
  *(int8x8_t *)&v25.u32[2] = v23;
  *(int8x8_t *)v26.f32 = v23;
  *(int8x8_t *)&v26.u32[2] = v24;
  v27 = (int8x16_t)vmulq_f32(*a2, v26);
  v28 = vadd_f32(vpadd_f32(*(float32x2_t *)v27.i8, *(float32x2_t *)v27.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL)).f32[0];
  if (v28 >= -1.0)
  {
    v38.i64[0] = vextq_s8((int8x16_t)v16, (int8x16_t)v16, 4uLL).u64[0];
    v38.i64[1] = a2->i64[0];
    v39 = (int8x16_t)vsubq_f32(vmulq_f32(v16, v25), vmulq_f32(v38, v26));
    v40 = (float32x4_t)vextq_s8(vextq_s8(v39, v39, 0xCuLL), v39, 8uLL);
    v40.i32[3] = sqrtf((float)(v28 + 1.0) + (float)(v28 + 1.0));
    v41.i32[1] = 1056964608;
    v41.i64[1] = 0x3F0000003F000000;
    *(float *)v41.i32 = 1.0 / v40.f32[3];
    v42 = (float32x4_t)vzip1q_s32(v41, v41);
    v42.f32[2] = 1.0 / v40.f32[3];
    v37 = vmulq_f32(v40, v42);
  }
  else
  {
    LODWORD(v29) = HIDWORD(a2->i64[0]);
    v30 = fabsf(v16.f32[2]);
    v31 = 1.0 / sqrtf((float)(v29 * v29) + (float)(v16.f32[0] * v16.f32[0]));
    v32 = -(float)(v16.f32[1] * v31);
    v33 = v16.f32[0] * v31;
    v34 = v32;
    v16.f32[0] = 1.0 / sqrtf((float)(v16.f32[2] * v16.f32[2]) + (float)(v29 * v29));
    v35 = v16.f32[1] * v16.f32[0];
    if (v30 <= 0.70711)
    {
      v36 = v33;
    }
    else
    {
      v34 = 0.0;
      v36 = -(float)(v16.f32[2] * v16.f32[0]);
    }
    if (v30 <= 0.70711)
      v35 = 0.0;
    v37.i64[0] = __PAIR64__(LODWORD(v36), LODWORD(v34));
    v37.i64[1] = LODWORD(v35);
  }
  v43 = (int32x2_t)vextq_s8((int8x16_t)v37, (int8x16_t)v37, 8uLL).u64[0];
  v44 = (float32x2_t)vext_s8((int8x8_t)v43, *(int8x8_t *)v37.f32, 4uLL);
  v45 = (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL), *(int32x2_t *)v9.i8);
  v46 = (float32x2_t)vzip1_s32(v43, *(int32x2_t *)v37.f32);
  v47 = (float32x2_t)vext_s8(*(int8x8_t *)v37.f32, (int8x8_t)v43, 4uLL);
  *(float32x2_t *)v48.f32 = vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 4uLL), v46);
  *(float32x2_t *)&v48.u32[2] = vmul_f32((float32x2_t)vrev64_s32((int32x2_t)v45), v47);
  *(float32x2_t *)v49.i8 = vadd_f32(vmul_laneq_f32(*(float32x2_t *)v9.i8, v37, 3), vmul_f32(v45, v47));
  v49.u64[1] = (unint64_t)vadd_f32(vmul_lane_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v9.i8, 1), vmul_f32(v45, v44));
  v50 = vsubq_f32((float32x4_t)veorq_s8(v49, (int8x16_t)xmmword_1DD007D50), v48);
  v51 = (float32x4_t)veorq_s8((int8x16_t)v37, (int8x16_t)xmmword_1DD007D60);
  v52 = (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL), *(int32x2_t *)v50.f32);
  v53 = (int32x2_t)vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL).u64[0];
  *(int32x2_t *)v48.f32 = vzip1_s32(v53, *(int32x2_t *)v51.f32);
  v54 = (float32x2_t)vextq_s8((int8x16_t)v50, (int8x16_t)v50, 4uLL).u64[0];
  v55 = vmul_laneq_f32(*(float32x2_t *)v50.f32, v51, 3);
  v56 = vmul_f32((float32x2_t)vext_s8((int8x8_t)v53, *(int8x8_t *)v51.f32, 4uLL), v52);
  *(float32x2_t *)v57.f32 = vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v51.f32, (int8x8_t)v53, 4uLL), v52);
  *(float32x2_t *)&v57.u32[2] = vmul_f32((float32x2_t)vrev64_s32(*(int32x2_t *)v48.f32), v54);
  v58 = vmul_lane_f32(*(float32x2_t *)v50.f32, *(float32x2_t *)v51.f32, 1);
  v59 = vmulq_laneq_f32(v51, v50, 3);
  *(float32x2_t *)v50.f32 = vadd_f32(v55, vmul_f32(*(float32x2_t *)v48.f32, v54));
  *(float32x2_t *)&v50.u32[2] = vadd_f32(v58, v56);
  v60 = vaddq_f32(vsubq_f32(v59, v57), (float32x4_t)veorq_s8((int8x16_t)v50, (int8x16_t)xmmword_1DD007D50));
  v59.i64[0] = vextq_s8((int8x16_t)v60, (int8x16_t)v60, 8uLL).u64[0];
  v60.i32[3] = 0;
  *(int8x8_t *)v59.f32 = vext_s8(*(int8x8_t *)v60.f32, *(int8x8_t *)v59.f32, 4uLL);
  v59.i64[1] = v60.i64[0];
  var9 = this->var9;
  v62 = *((float32x4_t *)var9 + 1);
  v63 = *((int32x4_t *)var9 + 2);
  v64 = *((int8x16_t *)var9 + 3);
  v65 = (float32x4_t)vtrn1q_s32((int32x4_t)v62, v63);
  v66 = vzip2_s32(*(int32x2_t *)v64.i8, 0);
  v67 = vextq_s8(v64, v64, 8uLL).u32[0];
  _Q25.i64[0] = vextq_s8((int8x16_t)v65, (int8x16_t)v65, 8uLL).u64[0];
  v65.i64[1] = v64.u32[0];
  v64.i64[0] = 0x8000000080000000;
  v64.i64[1] = 0x8000000080000000;
  v69 = (float32x4_t)veorq_s8(*((int8x16_t *)var9 + 4), v64);
  _Q21 = (int8x16_t)vmulq_f32(v65, v69);
  *(int32x2_t *)v62.f32 = vzip2_s32(*(int32x2_t *)v62.f32, *(int32x2_t *)v63.i8);
  *(int32x2_t *)&v62.u32[2] = v66;
  _Q19 = (int8x16_t)vmulq_f32(v62, v69);
  _Q25.i64[1] = v67;
  _Q20 = (int8x16_t)vmulq_f32(_Q25, v69);
  _Q20.i32[3] = 0;
  v73 = vmulq_f32(v14, v17);
  v74 = (int8x16_t)vmulq_f32(v14, v18);
  v75 = (int8x16_t)vmulq_f32(v14, v21);
  v75.i32[3] = 0;
  *(float32x2_t *)v73.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v73, (int8x16_t)v73, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v74, v74, 8uLL)), vpadd_f32(*(float32x2_t *)v73.f32, *(float32x2_t *)v74.i8));
  *(float32x2_t *)&v73.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v75.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v75, v75, 8uLL)), 0);
  v76 = vaddq_f32(v73, *((float32x4_t *)var8 + 4));
  v77 = (int8x16_t)vmulq_f32(v65, v76);
  _Q4 = (int8x16_t)vmulq_f32(v62, v76);
  v79 = (int8x16_t)vmulq_f32(_Q25, v76);
  v79.i32[3] = 0;
  *(float32x2_t *)v77.i8 = vadd_f32(vadd_f32(vpadd_f32(*(float32x2_t *)_Q21.i8, *(float32x2_t *)_Q19.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(_Q21, _Q21, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(_Q19, _Q19, 8uLL))), vadd_f32(vpadd_f32(*(float32x2_t *)v77.i8, *(float32x2_t *)_Q4.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v77, v77, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(_Q4, _Q4, 8uLL))));
  v77.u64[1] = (unint64_t)vadd_f32(vpadd_f32(vpadd_f32(*(float32x2_t *)_Q20.i8, (float32x2_t)*(_OWORD *)&vextq_s8(_Q20, _Q20, 8uLL)), 0), vpadd_f32(vpadd_f32(*(float32x2_t *)v79.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v79, v79, 8uLL)), 0));
  _Q2 = (int32x4_t)vsubq_f32(vmulq_f32(v26, v59), vmulq_f32(v25, v60));
  *(int8x16_t *)&this->var29 = v77;
  *(int8x8_t *)v77.i8 = vext_s8(*(int8x8_t *)v60.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)_Q2, (int8x16_t)_Q2, 8uLL), 4uLL);
  _Q4.i64[0] = vzip2q_s32((int32x4_t)v60, vuzp1q_s32((int32x4_t)v60, _Q2)).u64[0];
  v60.i32[1] = _Q2.i32[1];
  *(_QWORD *)&this->var19.var2 = v60.i64[0];
  LODWORD(this->var19.var4) = v23.i32[0];
  this->var19.var5 = 0.0;
  *(_QWORD *)&this->var19.var6 = v77.i64[0];
  LODWORD(this->var20) = v23.i32[1];
  this->var21 = 0.0;
  *(_QWORD *)&this->var22 = _Q4.i64[0];
  *(_DWORD *)&this->var24 = v24.i32[0];
  *(_DWORD *)&this->var28 = 0;
  _S1 = *((float *)var9 + 13);
  _Q2.i32[0] = *((_DWORD *)var9 + 14);
  v82 = *((float *)var9 + 9);
  _Q4.i32[0] = *((_DWORD *)var9 + 10);
  _Q19.i32[0] = *((_DWORD *)var9 + 12);
  _Q20.i32[0] = *((_DWORD *)var9 + 8);
  _Q5 = *((float32x4_t *)var9 + 1);
  v85 = *(float32x4_t *)&this->var19.var2;
  v84 = *(float32x4_t *)&this->var19.var6;
  result = *(float32x4_t *)&this->var22;
  result.i32[3] = 0;
  v62.f32[0] = (float)(v82 * *(float *)_Q2.i32) - (float)(*(float *)_Q4.i32 * _S1);
  v87.i32[3] = 0;
  v87.f32[0] = v62.f32[0];
  v87.f32[1] = (float)(*(float *)_Q4.i32 * *(float *)_Q19.i32) - (float)(*(float *)_Q20.i32 * *(float *)_Q2.i32);
  v87.f32[2] = (float)(*(float *)_Q20.i32 * _S1) - (float)(v82 * *(float *)_Q19.i32);
  v88 = (int8x16_t)vmulq_f32(_Q5, v87);
  *(float *)v88.i32 = 1.0
                    / vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v88, v88, 8uLL), vpadd_f32(*(float32x2_t *)v88.i8, *(float32x2_t *)v88.i8)).f32[0];
  v84.i32[3] = 0;
  __asm { FMLA            S25, S19, V5.S[1] }
  v85.i32[3] = 0;
  v93 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v85, (float)((float)(*(float *)_Q20.i32 * _S1) - (float)(v82 * *(float *)_Q19.i32)) * *(float *)v88.i32), v84, _Q25.f32[0] * *(float *)v88.i32), result, vmlas_n_f32(-(float)(COERCE_FLOAT(HIDWORD(*((_QWORD *)var9 + 2))) * *(float *)_Q20.i32), v82, _Q5.f32[0])* *(float *)v88.i32);
  __asm { FMLA            S21, S20, V5.S[2] }
  v94 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v85, (float)((float)(*(float *)_Q4.i32 * *(float *)_Q19.i32) - (float)(*(float *)_Q20.i32 * *(float *)_Q2.i32))* *(float *)v88.i32), v84, vmlas_n_f32(-(float)(COERCE_FLOAT(*((_QWORD *)var9 + 3)) * *(float *)_Q19.i32), *(float *)_Q2.i32, _Q5.f32[0])* *(float *)v88.i32), result, *(float *)_Q21.i32 * *(float *)v88.i32);
  __asm
  {
    FMLA            S16, S4, V5.S[1]
    FMLA            S2, S1, V5.S[2]
  }
  *(float32x4_t *)&this->var19.var2 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v85, v62.f32[0] * *(float *)v88.i32), v84, *(float *)_Q2.i32 * *(float *)v88.i32), result, _S16 * *(float *)v88.i32);
  *(float32x4_t *)&this->var19.var6 = v94;
  *(float32x4_t *)&this->var22 = v93;
  return result;
}

void sub_1DCD5FDC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 240), 8);
  _Block_object_dispose((const void *)(v1 - 208), 8);
  _Unwind_Resume(a1);
}

void sub_1DCD6065C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

uint64_t SCNMTLComputeCommandEncoder::dispatchOnGrid1D(SCNMTLComputeCommandEncoder *this, uint64_t a2)
{
  NSObject *v4;
  unsigned int features;
  unint64_t v6;
  MTLComputeCommandEncoder *encoder;
  unint64_t v9;
  int64x2_t v10;
  unint64_t v11;
  int64x2_t v12;
  unint64_t v13;
  int64x2_t v14;
  uint64_t v15;
  int64x2_t v16;

  if (!this->_computePipelineState)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      SCNMTLComputeCommandEncoder::dispatchOnGrid1D(v4);
  }
  SCNMTLComputeCommandEncoder::_bindPendingTextures(this);
  SCNMTLComputeCommandEncoder::_bindPendingBuffers(this);
  features = this->_features;
  v6 = -[MTLComputePipelineState threadExecutionWidth](this->_computePipelineState, "threadExecutionWidth");
  encoder = this->_encoder;
  if ((features & 0x40) != 0)
  {
    v15 = a2;
    v16 = vdupq_n_s64(1uLL);
    v13 = v6;
    v14 = v16;
    return -[MTLComputeCommandEncoder dispatchThreads:threadsPerThreadgroup:](encoder, "dispatchThreads:threadsPerThreadgroup:", &v15, &v13);
  }
  else
  {
    v11 = (a2 + v6 - 1) / v6;
    v12 = vdupq_n_s64(1uLL);
    v9 = v6;
    v10 = v12;
    return -[MTLComputeCommandEncoder dispatchThreadgroups:threadsPerThreadgroup:](encoder, "dispatchThreadgroups:threadsPerThreadgroup:", &v11, &v9);
  }
}

void OUTLINED_FUNCTION_0_5(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
  _os_log_fault_impl(a1, log, OS_LOG_TYPE_FAULT, a4, a5, 0xCu);
}

void sub_1DCD61310(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1DCD61394(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void *_arrowNode(uint64_t a1)
{
  void *v2;
  _QWORD v4[5];

  if (_arrowNode_onceToken != -1)
    dispatch_once(&_arrowNode_onceToken, &__block_literal_global_188);
  v2 = (void *)objc_msgSend((id)_arrowNode_arrowNode, "clone");
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = ___arrowNode_block_invoke_2;
  v4[3] = &unk_1EA59E6D8;
  v4[4] = a1;
  objc_msgSend(v2, "enumerateHierarchyUsingBlock:", v4);
  return v2;
}

void *_axisNode(uint64_t a1)
{
  void *v2;
  _QWORD v4[5];

  if (_axisNode_onceToken != -1)
    dispatch_once(&_axisNode_onceToken, &__block_literal_global_191);
  v2 = (void *)objc_msgSend((id)_axisNode_axisNode, "clone");
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = ___axisNode_block_invoke_2;
  v4[3] = &unk_1EA59E6D8;
  v4[4] = a1;
  objc_msgSend(v2, "enumerateHierarchyUsingBlock:", v4);
  return v2;
}

void *_translationPlaneNode(uint64_t a1)
{
  void *v2;
  _QWORD v4[5];

  if (_translationPlaneNode_onceToken != -1)
    dispatch_once(&_translationPlaneNode_onceToken, &__block_literal_global_192);
  v2 = (void *)objc_msgSend((id)_translationPlaneNode_planeNode, "clone");
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = ___translationPlaneNode_block_invoke_2;
  v4[3] = &unk_1EA59E6D8;
  v4[4] = a1;
  objc_msgSend(v2, "enumerateHierarchyUsingBlock:", v4);
  return v2;
}

void *_rotationArcNode(uint64_t a1)
{
  void *v2;
  _QWORD v4[5];

  if (_rotationArcNode_onceToken != -1)
    dispatch_once(&_rotationArcNode_onceToken, &__block_literal_global_195);
  v2 = (void *)objc_msgSend((id)_rotationArcNode_arcNode, "clone");
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = ___rotationArcNode_block_invoke_2;
  v4[3] = &unk_1EA59E6D8;
  v4[4] = a1;
  objc_msgSend(v2, "enumerateHierarchyUsingBlock:", v4);
  return v2;
}

void *_wireframeCircle(uint64_t a1, float a2)
{
  void *v4;
  _QWORD v6[5];
  float v7;

  if (_wireframeCircle_onceToken != -1)
    dispatch_once(&_wireframeCircle_onceToken, &__block_literal_global_196);
  v4 = (void *)objc_msgSend((id)_wireframeCircle_circleNode, "clone");
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = ___wireframeCircle_block_invoke_2;
  v6[3] = &unk_1EA59E720;
  v7 = a2;
  v6[4] = a1;
  objc_msgSend(v4, "enumerateHierarchyUsingBlock:", v6);
  return v4;
}

void __computeAnchorMatrix(_QWORD *a1@<X0>, float32x4_t *a2@<X8>)
{
  uint64_t v4;
  void *v5;
  __n128 Identity;
  void *v7;
  float32x4_t *v8;
  float32x4_t v9;
  float32x4_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64x2_t *v16;
  __n128 v17;
  uint64_t v18;
  __n128 v19;
  void *v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  __n128 v24;
  float v25;
  __n128 v26;
  float32x2_t v32;
  float v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  int32x4_t v38;
  float32x2_t v39;
  float32x2_t v40;
  float32x4_t v41;
  float32x4_t v42;
  int32x4_t v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x4_t v46;
  float32x4_t v47;
  int32x4_t v48;
  float32x4_t v49;
  __n128 v50;
  float32x4_t v51;
  __n128 v52;
  float32x4_t v53;
  __n128 v54;
  __n128 v55;
  __n128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  SCNMatrix4 m;
  SCNMatrix4 v62;
  float32x4_t v63;
  __int128 v64;
  __int128 v65;
  float32x4_t v66;
  float32x4_t v67;
  __int128 v68;
  __int128 v69;
  float32x4_t v70;
  _BYTE v71[128];
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v4 = objc_msgSend((id)objc_msgSend(a1, "targets"), "firstObject");
  if (v4)
  {
    v5 = (void *)v4;
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    switch(objc_msgSend(a1, "effectiveEditingSpace"))
    {
      case 0:
        v65 = 0u;
        v66 = 0u;
        v63 = 0u;
        v64 = 0u;
        v7 = v5;
        goto LABEL_8;
      case 1:
        v7 = (void *)objc_msgSend(v5, "parentItem");
        v65 = 0u;
        v66 = 0u;
        if (!v7)
          v7 = v5;
        v63 = 0uLL;
        v64 = 0uLL;
LABEL_8:
        objc_msgSend(v7, "worldTransform");
        goto LABEL_14;
      case 2:
        Identity = C3DMatrix4x4MakeIdentity((uint64_t)&v67);
        break;
      case 3:
        v65 = 0u;
        v66 = 0u;
        v63 = 0u;
        v64 = 0u;
        v11 = (void *)objc_msgSend(a1, "authoringEnvironment");
        if (v11)
        {
          objc_msgSend(v11, "viewMatrix");
        }
        else
        {
          v65 = 0u;
          v66 = 0u;
          v63 = 0u;
          v64 = 0u;
        }
        *(float32x4_t *)&m.m11 = v63;
        *(_OWORD *)&m.m21 = v64;
        *(_OWORD *)&m.m31 = v65;
        *(float32x4_t *)&m.m41 = v66;
        SCNMatrix4Invert(&v62, &m);
        v63 = *(float32x4_t *)&v62.m11;
        v64 = *(_OWORD *)&v62.m21;
        v65 = *(_OWORD *)&v62.m31;
        v66 = *(float32x4_t *)&v62.m41;
LABEL_14:
        Identity = C3DMatrix4x4FromSCNMatrix4(&v67, (uint64_t)&v63);
        break;
      default:
        break;
    }
    Identity.n128_u64[0] = 0;
    v54 = Identity;
    v55 = Identity;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v12 = (void *)objc_msgSend(a1, "targets");
    v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v57, v71, 16);
    if (v13)
    {
      v14 = v13;
      v15 = *(_QWORD *)v58;
      v16 = (int64x2_t *)(a1 + 77);
      v17 = v54;
      v17.n128_u32[0] = v54.n128_u32[1];
      v50 = v17;
      v17.n128_u32[0] = 0;
      v52 = v17;
      do
      {
        v18 = 0;
        v19 = v55;
        do
        {
          v56 = v19;
          if (*(_QWORD *)v58 != v15)
          {
            objc_enumerationMutation(v12);
            v19 = v56;
          }
          v20 = *(void **)(*((_QWORD *)&v57 + 1) + 8 * v18);
          v65 = 0u;
          v66 = 0u;
          v63 = 0u;
          v64 = 0u;
          if (v20)
          {
            objc_msgSend(v20, "worldTransform");
            v19 = v56;
          }
          v21 = v16->i64[0];
          if (v16->i64[0] == 2)
          {
            v22 = v54;
            if (v54.n128_f32[0] < v66.f32[0])
              v22.n128_f32[0] = v66.f32[0];
          }
          else if (v21 == 1)
          {
            v22 = v54;
            if (v54.n128_f32[0] >= v66.f32[0])
              v22.n128_f32[0] = v66.f32[0];
          }
          else
          {
            v22 = v54;
            v22.n128_f32[0] = v54.n128_f32[0] + v66.f32[0];
          }
          v54 = v22;
          v23 = a1[78];
          v24 = v50;
          if (v23 == 2)
          {
            if (v50.n128_f32[0] < v66.f32[1])
              v24.n128_f32[0] = v66.f32[1];
          }
          else if (v23 == 1)
          {
            if (v50.n128_f32[0] >= v66.f32[1])
              v24.n128_f32[0] = v66.f32[1];
          }
          else
          {
            v24.n128_f32[0] = v50.n128_f32[0] + v66.f32[1];
          }
          v50 = v24;
          if (a1[79] == 1)
          {
            if (v19.n128_f32[0] >= v66.f32[2])
              v19.n128_f32[0] = v66.f32[2];
          }
          else
          {
            v25 = v66.f32[2];
            if (v19.n128_f32[0] >= v66.f32[2])
              v25 = v19.n128_f32[0];
            if (v21 == 2)
              v19.n128_f32[0] = v25;
            else
              v19.n128_f32[0] = v19.n128_f32[0] + v66.f32[2];
          }
          v26 = v52;
          v26.n128_f32[0] = v52.n128_f32[0] + 1.0;
          v52 = v26;
          ++v18;
        }
        while (v14 != v18);
        v55 = v19;
        v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v57, v71, 16);
      }
      while (v14);
      if (v52.n128_f32[0] == 0.0)
      {
        v54.n128_u64[0] = __PAIR64__(v50.n128_u32[0], v54.n128_u32[0]);
      }
      else
      {
        __asm { FMOV            V2.2S, #1.0 }
        v32 = vdiv_f32((float32x2_t)__PAIR64__(v50.n128_u32[0], v54.n128_u32[0]), (float32x2_t)vbsl_s8((int8x8_t)vmovn_s64(vceqzq_s64(*v16)), (int8x8_t)vdup_lane_s32((int32x2_t)v52.n128_u64[0], 0), _D2));
        v33 = v55.n128_f32[0];
        if (!a1[79])
          v33 = v55.n128_f32[0] / v52.n128_f32[0];
        v54.n128_u64[0] = (unint64_t)v32;
        v55.n128_f32[0] = v33;
      }
    }
    v63 = v67;
    v64 = v68;
    v65 = v69;
    v66 = v70;
    *(double *)v34.i64 = C3DVector3MultMatrix4x4(&v63, (float32x4_t)xmmword_1DD007970);
    v51 = v34;
    v63 = v67;
    v64 = v68;
    v65 = v69;
    v66 = v70;
    *(double *)v35.i64 = C3DVector3MultMatrix4x4(&v63, (float32x4_t)xmmword_1DD007920);
    v53 = v35;
    v63 = v67;
    v64 = v68;
    v65 = v69;
    v66 = v70;
    *(double *)v36.i64 = C3DVector3MultMatrix4x4(&v63, (float32x4_t)xmmword_1DD007600);
    v37 = vsubq_f32(v51, v70);
    v38 = (int32x4_t)vmulq_f32(v37, v37);
    v38.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v38, 2), vadd_f32(*(float32x2_t *)v38.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v38.i8, 1))).u32[0];
    v39 = vrsqrte_f32((float32x2_t)v38.u32[0]);
    v40 = vmul_f32(v39, vrsqrts_f32((float32x2_t)v38.u32[0], vmul_f32(v39, v39)));
    v41 = vmulq_n_f32(v37, vmul_f32(v40, vrsqrts_f32((float32x2_t)v38.u32[0], vmul_f32(v40, v40))).f32[0]);
    v42 = vsubq_f32(v53, v70);
    v43 = (int32x4_t)vmulq_f32(v42, v42);
    v43.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v43, 2), vadd_f32(*(float32x2_t *)v43.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v43.i8, 1))).u32[0];
    v44 = vrsqrte_f32((float32x2_t)v43.u32[0]);
    v45 = vmul_f32(v44, vrsqrts_f32((float32x2_t)v43.u32[0], vmul_f32(v44, v44)));
    v46 = vmulq_n_f32(v42, vmul_f32(v45, vrsqrts_f32((float32x2_t)v43.u32[0], vmul_f32(v45, v45))).f32[0]);
    v47 = vsubq_f32(v36, v70);
    v48 = (int32x4_t)vmulq_f32(v47, v47);
    v48.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v48, 2), vadd_f32(*(float32x2_t *)v48.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v48.i8, 1))).u32[0];
    *(float32x2_t *)v43.i8 = vrsqrte_f32((float32x2_t)v48.u32[0]);
    *(float32x2_t *)v43.i8 = vmul_f32(*(float32x2_t *)v43.i8, vrsqrts_f32((float32x2_t)v48.u32[0], vmul_f32(*(float32x2_t *)v43.i8, *(float32x2_t *)v43.i8)));
    v49 = vmulq_n_f32(v47, vmul_f32(*(float32x2_t *)v43.i8, vrsqrts_f32((float32x2_t)v48.u32[0], vmul_f32(*(float32x2_t *)v43.i8, *(float32x2_t *)v43.i8))).f32[0]);
    v41.i32[3] = 0;
    v46.i32[3] = 0;
    v49.i32[3] = 0;
    v43.i64[0] = v54.n128_u64[0];
    v43.i64[1] = __PAIR64__(1.0, v55.n128_u32[0]);
    *a2 = v41;
    a2[1] = v46;
    a2[2] = v49;
    a2[3] = (float32x4_t)v43;
  }
  else
  {
    v8 = (float32x4_t *)C3DMatrix4x4GetIdentity();
    v9 = v8[1];
    *a2 = *v8;
    a2[1] = v9;
    v10 = v8[3];
    a2[2] = v8[2];
    a2[3] = v10;
  }
}

double __resolveAxisMove(float32x4_t *a1, float32x4_t a2, float32x4_t a3)
{
  int32x4_t v3;
  float32x2_t v4;
  float32x2_t v5;
  float32x4_t v6;
  float32x4_t v7;
  int32x4_t v8;
  float32x4_t v9;
  float32x2_t v10;
  float32x2_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  double result;

  v3 = (int32x4_t)vmulq_f32(a3, a3);
  v3.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v3, 2), vadd_f32(*(float32x2_t *)v3.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v3.i8, 1))).u32[0];
  v4 = vrsqrte_f32((float32x2_t)v3.u32[0]);
  v5 = vmul_f32(v4, vrsqrts_f32((float32x2_t)v3.u32[0], vmul_f32(v4, v4)));
  v5.i32[0] = vmul_f32(v5, vrsqrts_f32((float32x2_t)v3.u32[0], vmul_f32(v5, v5))).u32[0];
  v6 = a1[19];
  v7 = a1[20];
  v8 = (int32x4_t)vmulq_f32(v7, v7);
  v8.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v8, 2), vadd_f32(*(float32x2_t *)v8.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v8.i8, 1))).u32[0];
  v9 = vmulq_n_f32(a3, v5.f32[0]);
  v10 = vrsqrte_f32((float32x2_t)v8.u32[0]);
  v11 = vmul_f32(v10, vrsqrts_f32((float32x2_t)v8.u32[0], vmul_f32(v10, v10)));
  v12 = vmulq_n_f32(v7, vmul_f32(v11, vrsqrts_f32((float32x2_t)v8.u32[0], vmul_f32(v11, v11))).f32[0]);
  v13 = vmulq_f32(v9, v12);
  v14 = vsubq_f32(v6, a2);
  v15 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2), vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1)));
  v16 = vmulq_f32(v9, v14);
  v17 = vmulq_f32(v14, v12);
  v17.f32[0] = vmlas_n_f32(-vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v17, 2), vaddq_f32(v17, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 1))).f32[0], vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2), vaddq_f32(v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1))).f32[0], v15.f32[0])/ (1.0 - vmulq_f32(v15, v15).f32[0]);
  *(_QWORD *)&result = vmlaq_n_f32(v6, v12, v17.f32[0]).u64[0];
  return result;
}

uint64_t _snapPositionToGrid(uint64_t result, _BYTE *a2, __n128 a3, float a4, float a5, float a6, long double a7, float32x4_t a8, float32x4_t a9)
{
  int v10;
  __n128 v14;
  _BOOL8 v15;
  __n128 v16;
  int v17;
  __n128 v18;
  __int32 v19;
  int v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  __int32 v26;
  __n128 v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  __n128 v35;
  __n128 v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  __int128 v40;
  float32x4_t v41;

  v10 = result;
  v14 = a3;
  v33 = a9;
  v34 = a8;
  if (vabds_f32(a3.n128_f32[0], a4) <= 0.00001)
  {
    v15 = 0;
    v16 = a3;
  }
  else
  {
    v35.n128_u32[0] = 0;
    result = _snapPositionComponentToGrid((float *)&v35, a3.n128_f32[0], a7);
    v14 = a3;
    v15 = result;
    v16 = a3;
    if ((_DWORD)result)
    {
      v16.n128_u32[0] = v35.n128_u32[0];
      *(unint64_t *)((char *)v16.n128_u64 + 4) = *(unint64_t *)((char *)a3.n128_u64 + 4);
    }
  }
  v30 = v16;
  v26 = v14.n128_i32[1];
  if (vabds_f32(v14.n128_f32[1], a5) <= 0.00001)
  {
    v17 = 0;
  }
  else
  {
    v35.n128_u32[0] = 0;
    result = _snapPositionComponentToGrid((float *)&v35, v14.n128_f32[1], a7);
    v17 = result;
    if ((_DWORD)result)
    {
      v18.n128_u64[0] = __PAIR64__(v35.n128_u32[0], v30.n128_u32[0]);
      v18.n128_u64[1] = v30.n128_u64[1];
      v30 = v18;
    }
    v14 = a3;
  }
  v19 = v14.n128_i32[2];
  if (vabds_f32(v14.n128_f32[2], a6) <= 0.00001)
  {
    v20 = 0;
    v21 = (float32x4_t)v30;
  }
  else
  {
    v35.n128_u32[0] = 0;
    result = _snapPositionComponentToGrid((float *)&v35, v14.n128_f32[2], a7);
    v20 = result;
    if ((_DWORD)result)
    {
      v21.i64[0] = v30.n128_u64[0];
      v21.i64[1] = __PAIR64__(v30.n128_u32[3], v35.n128_u32[0]);
    }
    else
    {
      v21 = (float32x4_t)v30;
    }
    v14.n128_u32[0] = a3.n128_u32[0];
  }
  v22 = a9;
  if (v15)
  {
    *a2 = 1;
  }
  else
  {
    *a2 = v17 | v20;
    if (((v17 | v20) & 1) == 0)
      return result;
  }
  if (v10)
  {
    v35 = 0u;
    v36 = 0u;
    v31 = v21;
    C3DRay3Make(&v35, &v34, (__n128 *)&v33);
    return _adjustSnapForAxisMove(v15, v17, v20, 0, v31, a3, v35, v36);
  }
  v23 = vmulq_f32(a9, a8);
  v24 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v23, 2), vaddq_f32(v23, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v23.f32, 1)));
  v22.f32[3] = -v24.f32[0];
  v41 = v22;
  if (v15 | v17 | v20)
  {
    v39 = v21;
    v37 = v21;
    v38 = v21;
    v35 = 0u;
    v36 = 0u;
    v25 = vmulq_f32(v21, v22);
    if (vsubq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2), vaddq_f32(v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 1))), v24).f32[0] >= 5.0)
    {
      v32 = v21;
      if (v15)
      {
        v21.i32[1] = v26;
        v39.i32[2] = v19;
        v39.i64[0] = v21.i64[0];
        v40 = xmmword_1DD007920;
        C3DRay3Make(&v35, &v39, (__n128 *)&v40);
        result = C3DIntersectionLinePlane((uint64_t)&v35, v41.f32, &v39);
        if ((_DWORD)result)
        {
          v14.n128_u32[0] = a3.n128_u32[0];
          v21 = v32;
          if (!v17)
          {
LABEL_32:
            if (!v20)
              return result;
LABEL_35:
            v37.i32[2] = v21.i32[2];
            v37.i64[0] = __PAIR64__(v26, v14.n128_u32[0]);
            v40 = xmmword_1DD007600;
            C3DRay3Make(&v35, &v37, (__n128 *)&v40);
            return C3DIntersectionLinePlane((uint64_t)&v35, v41.f32, &v37);
          }
        }
        else
        {
          v14.n128_u32[0] = a3.n128_u32[0];
          v21 = v32;
          if (!v17)
            goto LABEL_32;
        }
      }
      else if (!v17)
      {
        goto LABEL_32;
      }
      v21.i32[0] = v14.n128_u32[0];
      v38.i32[2] = v19;
      v38.i64[0] = v21.i64[0];
      v40 = xmmword_1DD007920;
      C3DRay3Make(&v35, &v38, (__n128 *)&v40);
      result = C3DIntersectionLinePlane((uint64_t)&v35, v41.f32, &v38);
      if ((_DWORD)result)
      {
        v14.n128_u32[0] = a3.n128_u32[0];
        v21.i32[2] = v32.i32[2];
        if (!v20)
          return result;
      }
      else
      {
        v14.n128_u32[0] = a3.n128_u32[0];
        v21.i32[2] = v32.i32[2];
        if (!v20)
          return result;
      }
      goto LABEL_35;
    }
  }
  return result;
}

void sub_1DCD65000(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _sortSnapData(float *a1, float *a2)
{
  if (*a1 < *a2)
    return 0xFFFFFFFFLL;
  else
    return *a1 > *a2;
}

uint64_t _itemsContainsNode(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 0;
  v11 = 0u;
  v12 = 0u;
  v9 = 0u;
  v10 = 0u;
  v4 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v10;
    while (2)
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v10 != v6)
          objc_enumerationMutation(a1);
        if ((void *)objc_msgSend(*(id *)(*((_QWORD *)&v9 + 1) + 8 * v7), "node") == a2)
          return 1;
        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      if (v5)
        continue;
      break;
    }
  }
  return _itemsContainsNode(a1, objc_msgSend(a2, "parentNode"));
}

uint64_t _closestSnapToAlignItem(uint64_t a1, uint64_t a2, float *a3, float a4)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  float v10;

  if (a2 < 2)
    return 0;
  if (a2 == 2)
  {
    v5 = 0;
    v6 = 1;
  }
  else
  {
    v5 = 0;
    v6 = a2 - 1;
    do
    {
      v7 = v6 + v5;
      if (v6 + v5 < 0 != __OFADD__(v6, v5))
        ++v7;
      v8 = v7 >> 1;
      if (*(float *)(a1 + 24 * v8) > a4)
        v6 = v8;
      else
        v5 = v8;
    }
    while (v6 - v5 > 1);
  }
  v9 = vabds_f32(a4, *(float *)(a1 + 24 * v5));
  v10 = vabds_f32(*(float *)(a1 + 24 * v6), a4);
  if (v9 >= v10)
  {
    result = v6;
  }
  else
  {
    v10 = v9;
    result = v5;
  }
  *a3 = v10;
  return result;
}

uint64_t _snapPositionToAlign(uint64_t a1, uint64_t a2, _DWORD *a3, float a4, double a5)
{
  uint64_t result;
  double v9;
  float v10;
  float v11;

  v11 = 0.0;
  result = _closestSnapToAlignItem(a1, a2, &v11, a4);
  v9 = a5 * 0.3;
  if (a5 <= 0.1)
    v9 = 0.03;
  v10 = v9;
  if (v11 >= v10)
    return -1;
  *a3 = *(_DWORD *)(a1 + 24 * result);
  return result;
}

BOOL _adjustSnapForAxisMove(_BOOL8 result, int a2, int a3, _QWORD *a4, float32x4_t a5, __n128 a6, __n128 a7, __n128 a8)
{
  __int32 v11;
  __n128 v12;
  __n128 v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  __int128 v17;
  _OWORD v18[2];

  v18[0] = a7;
  v18[1] = a8;
  if (!result && (a2 & 1) == 0 && !a3)
    return result;
  v15 = a5;
  v16 = a5;
  v14 = a5;
  v13 = 0uLL;
  v11 = a5.i32[2];
  v12 = a6;
  if (result)
  {
    a5.i32[1] = a6.n128_i32[1];
    v16.i32[2] = a6.n128_i32[2];
    v16.i64[0] = a5.i64[0];
    v17 = xmmword_1DD007970;
    C3DPlaneMakeWithVectors(&v13, &v15, (float32x4_t *)&v17);
    result = C3DIntersectionLinePlane((uint64_t)v18, (float *)&v13, &v16);
    if (result)
    {
      a6 = v12;
      if (!a2)
        goto LABEL_16;
      goto LABEL_11;
    }
    a6 = v12;
    if (a4)
      *a4 = -1;
  }
  if (!a2)
    goto LABEL_16;
LABEL_11:
  v15.i32[2] = a6.n128_i32[2];
  v15.i64[0] = __PAIR64__(v15.u32[1], a6.n128_u32[0]);
  v17 = xmmword_1DD007920;
  C3DPlaneMakeWithVectors(&v13, &v15, (float32x4_t *)&v17);
  result = C3DIntersectionLinePlane((uint64_t)v18, (float *)&v13, &v15);
  if (result)
  {
    a6.n128_u64[0] = v12.n128_u64[0];
    if (!a3)
      return result;
    goto LABEL_17;
  }
  a6.n128_u64[0] = v12.n128_u64[0];
  if (a4)
    a4[1] = -1;
LABEL_16:
  if (!a3)
    return result;
LABEL_17:
  v14.i32[2] = v11;
  v14.i64[0] = a6.n128_u64[0];
  v17 = xmmword_1DD007600;
  C3DPlaneMakeWithVectors(&v13, &v14, (float32x4_t *)&v17);
  result = C3DIntersectionLinePlane((uint64_t)v18, (float *)&v13, &v14);
  if (!result)
  {
    if (a4)
      a4[2] = -1;
  }
  return result;
}

uint64_t ___arrowNode_block_invoke()
{
  SCNNode *v0;
  double v1;
  double v2;
  double v3;
  SCNNode *v4;
  double v5;
  double v6;
  double v7;
  SCNNode *v8;
  double v9;
  double v10;
  double v11;

  _arrowNode_arrowNode = +[SCNNode node](SCNNode, "node");
  v0 = +[SCNNode nodeWithGeometry:](SCNNode, "nodeWithGeometry:", +[SCNCylinder cylinderWithRadius:height:](SCNCylinder, "cylinderWithRadius:height:", 0.015, 0.7));
  LODWORD(v1) = 0;
  LODWORD(v2) = 0;
  LODWORD(v3) = 1051931443;
  -[SCNNode setPosition:](v0, "setPosition:", v1, v3, v2);
  objc_msgSend((id)_arrowNode_arrowNode, "addChildNode:", v0);
  v4 = +[SCNNode nodeWithGeometry:](SCNNode, "nodeWithGeometry:", +[SCNCone coneWithTopRadius:bottomRadius:height:](SCNCone, "coneWithTopRadius:bottomRadius:height:", 0.0, 0.06, 0.3));
  LODWORD(v5) = 1062836634;
  LODWORD(v6) = 0;
  LODWORD(v7) = 0;
  -[SCNNode setPosition:](v4, "setPosition:", v6, v5, v7);
  objc_msgSend((id)_arrowNode_arrowNode, "addChildNode:", v4);
  _arrowNode_arrowNode = objc_msgSend((id)_arrowNode_arrowNode, "flattenedCopy");
  v8 = +[SCNNode nodeWithGeometry:](SCNNode, "nodeWithGeometry:", +[SCNCylinder cylinderWithRadius:height:](SCNCylinder, "cylinderWithRadius:height:", 0.05, 0.7));
  LODWORD(v9) = 0;
  LODWORD(v10) = 0;
  LODWORD(v11) = 1051931443;
  -[SCNNode setPosition:](v8, "setPosition:", v9, v11, v10);
  -[SCNNode setHidden:](v8, "setHidden:", 1);
  -[SCNNode setCategoryBitMask:](v8, "setCategoryBitMask:", 0xFFFFLL);
  return objc_msgSend((id)_arrowNode_arrowNode, "addChildNode:", v8);
}

uint64_t ___arrowNode_block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v4;
  _QWORD v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  objc_msgSend(a2, "setGeometry:", (id)objc_msgSend((id)objc_msgSend(a2, "geometry"), "copy"));
  if (objc_msgSend((id)objc_msgSend(a2, "geometry"), "firstMaterial"))
  {
    v6[0] = (id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "geometry"), "firstMaterial"), "copy");
    v4 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v6, 1);
  }
  else
  {
    v4 = MEMORY[0x1E0C9AA60];
  }
  objc_msgSend((id)objc_msgSend(a2, "geometry"), "setMaterials:", v4);
  objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "geometry"), "firstMaterial"), "diffuse"), "setContents:", *(_QWORD *)(a1 + 32));
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "geometry"), "firstMaterial"), "setLightingModelName:", CFSTR("SCNLightingModelConstant"));
  return objc_msgSend(a2, "setAuthoringEnvironmentNode:", 1);
}

uint64_t ___axisNode_block_invoke()
{
  SCNNode *v0;
  double v1;
  double v2;
  double v3;
  uint64_t result;

  _axisNode_axisNode = +[SCNNode node](SCNNode, "node");
  v0 = +[SCNNode nodeWithGeometry:](SCNNode, "nodeWithGeometry:", +[SCNCylinder cylinderWithRadius:height:](SCNCylinder, "cylinderWithRadius:height:", 0.01, 0.6));
  LODWORD(v1) = 1050253722;
  LODWORD(v2) = 0;
  LODWORD(v3) = 0;
  -[SCNNode setPosition:](v0, "setPosition:", v2, v1, v3);
  objc_msgSend((id)_axisNode_axisNode, "addChildNode:", v0);
  result = objc_msgSend((id)_axisNode_axisNode, "flattenedCopy");
  _axisNode_axisNode = result;
  return result;
}

uint64_t ___axisNode_block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v4;
  _QWORD v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  objc_msgSend(a2, "setGeometry:", (id)objc_msgSend((id)objc_msgSend(a2, "geometry"), "copy"));
  if (objc_msgSend((id)objc_msgSend(a2, "geometry"), "firstMaterial"))
  {
    v6[0] = (id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "geometry"), "firstMaterial"), "copy");
    v4 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v6, 1);
  }
  else
  {
    v4 = MEMORY[0x1E0C9AA60];
  }
  objc_msgSend((id)objc_msgSend(a2, "geometry"), "setMaterials:", v4);
  objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "geometry"), "firstMaterial"), "diffuse"), "setContents:", *(_QWORD *)(a1 + 32));
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "geometry"), "firstMaterial"), "setLightingModelName:", CFSTR("SCNLightingModelConstant"));
  return objc_msgSend(a2, "setAuthoringEnvironmentNode:", 1);
}

uint64_t ___translationPlaneNode_block_invoke()
{
  SCNTorus *v0;
  SCNNode *v1;
  double v2;
  double v3;
  double v4;

  _translationPlaneNode_planeNode = +[SCNNode nodeWithGeometry:](SCNNode, "nodeWithGeometry:", +[SCNPlane planeWithWidth:height:](SCNPlane, "planeWithWidth:height:", 0.3, 0.3));
  v0 = +[SCNTorus torusWithRingRadius:pipeRadius:](SCNTorus, "torusWithRingRadius:pipeRadius:", 0.212132037, 0.01);
  -[SCNTorus setPipeSegmentCount:](v0, "setPipeSegmentCount:", 3);
  -[SCNTorus setRingSegmentCount:](v0, "setRingSegmentCount:", 4);
  v1 = +[SCNNode nodeWithGeometry:](SCNNode, "nodeWithGeometry:", v0);
  LODWORD(v2) = 1070141403;
  LODWORD(v3) = 1061752795;
  LODWORD(v4) = 0;
  -[SCNNode setEulerAngles:](v1, "setEulerAngles:", v2, v4, v3);
  return objc_msgSend((id)_translationPlaneNode_planeNode, "addChildNode:", v1);
}

uint64_t ___translationPlaneNode_block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v4;
  char isKindOfClass;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  objc_msgSend(a2, "setGeometry:", (id)objc_msgSend((id)objc_msgSend(a2, "geometry"), "copy"));
  if (objc_msgSend((id)objc_msgSend(a2, "geometry"), "firstMaterial"))
  {
    v7[0] = (id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "geometry"), "firstMaterial"), "copy");
    v4 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v7, 1);
  }
  else
  {
    v4 = MEMORY[0x1E0C9AA60];
  }
  objc_msgSend((id)objc_msgSend(a2, "geometry"), "setMaterials:", v4);
  objc_msgSend(a2, "geometry");
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "geometry"), "firstMaterial"), "diffuse"), "setContents:", *(_QWORD *)(a1 + 32));
  if ((isKindOfClass & 1) == 0)
  {
    objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "geometry"), "firstMaterial"), "setTransparency:", 0.3);
    objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "geometry"), "firstMaterial"), "setDoubleSided:", 1);
  }
  objc_msgSend(a2, "setAuthoringEnvironmentNode:", 1);
  return objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "geometry"), "firstMaterial"), "setLightingModelName:", CFSTR("SCNLightingModelConstant"));
}

uint64_t ___rotationArcNode_block_invoke()
{
  SCNCylinder *v0;
  SCNTorus *v1;

  _rotationArcNode_arcNode = +[SCNNode node](SCNNode, "node");
  v0 = +[SCNCylinder cylinderWithRadius:height:](SCNCylinder, "cylinderWithRadius:height:", 0.3, 0.0);
  -[SCNCylinder setRadialSpan:](v0, "setRadialSpan:", 0.25);
  objc_msgSend((id)_rotationArcNode_arcNode, "addChildNode:", +[SCNNode nodeWithGeometry:](SCNNode, "nodeWithGeometry:", v0));
  v1 = +[SCNTorus torusWithRingRadius:pipeRadius:](SCNTorus, "torusWithRingRadius:pipeRadius:", 0.68, 0.015);
  -[SCNTorus setRadialSpan:](v1, "setRadialSpan:", 0.25);
  return objc_msgSend((id)_rotationArcNode_arcNode, "addChildNode:", +[SCNNode nodeWithGeometry:](SCNNode, "nodeWithGeometry:", v1));
}

uint64_t ___rotationArcNode_block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t result;
  uint64_t v5;
  char isKindOfClass;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  result = objc_msgSend(a2, "geometry");
  if (result)
  {
    objc_msgSend(a2, "setGeometry:", (id)objc_msgSend((id)objc_msgSend(a2, "geometry"), "copy"));
    if (objc_msgSend((id)objc_msgSend(a2, "geometry"), "firstMaterial"))
    {
      v7[0] = (id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "geometry"), "firstMaterial"), "copy");
      v5 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v7, 1);
    }
    else
    {
      v5 = MEMORY[0x1E0C9AA60];
    }
    objc_msgSend((id)objc_msgSend(a2, "geometry"), "setMaterials:", v5);
    objc_msgSend(a2, "geometry");
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();
    objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "geometry"), "firstMaterial"), "diffuse"), "setContents:", *(_QWORD *)(a1 + 32));
    if ((isKindOfClass & 1) == 0)
      objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "geometry"), "firstMaterial"), "setTransparency:", 0.6);
    objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "geometry"), "firstMaterial"), "setDoubleSided:", 1);
    objc_msgSend(a2, "setAuthoringEnvironmentNode:", 1);
    return objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "geometry"), "firstMaterial"), "setLightingModelName:", CFSTR("SCNLightingModelConstant"));
  }
  return result;
}

uint64_t ___wireframeCircle_block_invoke()
{
  SCNTorus *v0;
  SCNTorus *v1;
  SCNNode *v2;

  v0 = +[SCNTorus torusWithRingRadius:pipeRadius:](SCNTorus, "torusWithRingRadius:pipeRadius:", 1.0, 0.01);
  -[SCNTorus setPipeSegmentCount:](v0, "setPipeSegmentCount:", 5);
  -[SCNTorus setRingSegmentCount:](v0, "setRingSegmentCount:", 64);
  _wireframeCircle_circleNode = +[SCNNode nodeWithGeometry:](SCNNode, "nodeWithGeometry:", v0);
  objc_msgSend((id)_wireframeCircle_circleNode, "setHittable:", 0);
  v1 = +[SCNTorus torusWithRingRadius:pipeRadius:](SCNTorus, "torusWithRingRadius:pipeRadius:", 1.0, 0.07);
  -[SCNTorus setPipeSegmentCount:](v1, "setPipeSegmentCount:", 5);
  -[SCNTorus setRingSegmentCount:](v1, "setRingSegmentCount:", 30);
  v2 = +[SCNNode nodeWithGeometry:](SCNNode, "nodeWithGeometry:", v1);
  -[SCNNode setHidden:](v2, "setHidden:", 1);
  -[SCNNode setCategoryBitMask:](v2, "setCategoryBitMask:", 0xFFFFLL);
  return objc_msgSend((id)_wireframeCircle_circleNode, "addChildNode:", v2);
}

uint64_t ___wireframeCircle_block_invoke_2(uint64_t a1, void *a2)
{
  float v4;
  uint64_t v5;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  objc_msgSend(a2, "setGeometry:", (id)objc_msgSend((id)objc_msgSend(a2, "geometry"), "copy"));
  v4 = *(float *)(a1 + 40);
  if (v4 != 1.0)
    objc_msgSend((id)objc_msgSend(a2, "geometry"), "setRingRadius:", v4);
  if (objc_msgSend((id)objc_msgSend(a2, "geometry"), "firstMaterial"))
  {
    v7[0] = (id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "geometry"), "firstMaterial"), "copy");
    v5 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v7, 1);
  }
  else
  {
    v5 = MEMORY[0x1E0C9AA60];
  }
  objc_msgSend((id)objc_msgSend(a2, "geometry"), "setMaterials:", v5);
  objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "geometry"), "firstMaterial"), "diffuse"), "setContents:", *(_QWORD *)(a1 + 32));
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "geometry"), "firstMaterial"), "setLightingModelName:", CFSTR("SCNLightingModelConstant"));
  return objc_msgSend(a2, "setAuthoringEnvironmentNode:", 1);
}

uint64_t _snapPositionComponentToGrid(float *a1, float a2, long double a3)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  double v11;

  v6 = -a2;
  if (a2 >= 0.0)
    v7 = a2;
  else
    v7 = v6;
  v8 = fmod(v7, a3);
  v9 = a3 * 0.3;
  if (v8 >= v9)
  {
    v11 = v8;
    if (a3 - v9 >= v11)
      return 0;
    v10 = a3 - v11 + v7;
  }
  else
  {
    v10 = v7 - v8;
  }
  if (a2 < 0.0)
    v10 = -v10;
  *a1 = v10;
  return 1;
}

const char *C3D::FinalPass::name(C3D::FinalPass *this)
{
  return "FinalPass";
}

C3D::Pass *C3D::FinalPass::_createCustomTechniquePassesIfNeeded(uint64_t *a1, uint64_t a2, _DWORD *a3, C3D::Pass **a4)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int PassCount;
  const void *v23;
  void *Aligned;
  uint64_t v25;
  __C3DFXPass *PassAtIndex;
  uint64_t Scene;
  int DrawInstruction;
  C3D::Pass *v29;
  NSObject *v30;
  NSObject *v31;
  NSObject *v32;
  C3D::PassDescriptor *v33;
  unsigned __int8 v34;
  _QWORD *v35;
  C3D::PassDescriptor *v36;
  C3D::PassDescriptor *v37;
  unsigned __int8 v38;
  char appended;
  uint64_t v40;
  __int16 v41;
  _BYTE *v42;
  C3D::PassDescriptor *v43;
  NSObject *v44;
  C3D::PassDescriptor *v45;
  unsigned __int8 v46;
  uint64_t v47;
  uint64_t v48;
  _anonymous_namespace_ *v49;
  size_t v50;
  unsigned __int8 *v51;
  unint64_t v52;
  unsigned __int8 *v53;
  uint64_t v54;
  uint64_t v55;
  _anonymous_namespace_ *v56;
  uint64_t v57;
  unint64_t v58;
  unsigned int v59;
  unsigned int v60;
  BOOL v61;
  unsigned __int8 *v62;
  C3D::PassDescriptor *v63;
  uint64_t v64;
  signed int v65;
  C3D::Pass *v66;
  C3D::PassDescriptor *v67;
  int v68;
  int v69;
  uint64_t v70;
  C3D::Pass *v74;
  uint64_t StackAllocator;
  uint64_t v76;
  _QWORD v78[3];
  char v79;
  char v80[15];
  char v81;
  char v82[15];
  char v83;
  char v84[15];
  C3D::Pass *v85;
  char v86;
  _QWORD v87[4];
  int v88;
  uint64_t v89;
  unsigned int v90;
  unsigned int v91;
  const void *v92;
  uint8_t buf[4];
  const char *v94;
  __int16 v95;
  uint64_t v96;
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  if (!a4)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      C3D::FinalPass::_createCustomTechniquePassesIfNeeded(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  if (!a2)
  {
    v14 = scn_default_log();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
      C3D::FinalPass::_createCustomTechniquePassesIfNeeded(v14, v15, v16, v17, v18, v19, v20, v21);
  }
  a1[14] = a2;
  PassCount = C3DFXTechniqueGetPassCount(a2);
  if (!PassCount)
    return 0;
  StackAllocator = C3DEngineContextGetStackAllocator(a1[2]);
  C3DStackAllocatorPushFrame(StackAllocator);
  C3D::Array<C3D::Pass *,0u,C3D::StackAllocator>::Array(&v89, StackAllocator);
  if (v91 < PassCount)
  {
    v23 = v92;
    Aligned = C3DStackAllocatorAllocateAligned(v89, 8 * PassCount, 8, 0);
    memcpy(Aligned, v23, 8 * v90);
    v92 = Aligned;
    v91 = PassCount;
  }
  v87[0] = StackAllocator;
  C3D::Hash<C3D::FinalPass::RenderTarget,C3D::StackAllocator>::_allocate((uint64_t)v87, 32);
  v25 = 0;
  v86 = 0;
  v74 = 0;
  v76 = PassCount;
  do
  {
    PassAtIndex = (__C3DFXPass *)C3DFXTechniqueGetPassAtIndex(a2, v25);
    Scene = C3DEngineContextGetScene(a1[2]);
    C3DFXContextResolveNodeReferences(PassAtIndex, Scene);
    DrawInstruction = C3DFXPassGetDrawInstruction((uint64_t)PassAtIndex);
    v85 = 0;
    switch(DrawInstruction)
    {
      case 1:
        v29 = C3D::FinalPass::_createTechniquePassCustom(a1, PassAtIndex, (uint64_t)v87, &v86);
        goto LABEL_23;
      case 2:
        v30 = scn_default_log();
        if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
          C3D::FinalPass::_createCustomTechniquePassesIfNeeded(&v83, v84);
        goto LABEL_19;
      case 3:
        v29 = C3D::FinalPass::_createTechniquePassDrawScene((C3D::Pass *)a1, PassAtIndex, (uint64_t)v87, &v86, 0);
        goto LABEL_25;
      case 4:
        v29 = C3D::FinalPass::_createTechniquePassDrawQuad(a1, PassAtIndex, (uint64_t)v87, &v86);
        goto LABEL_23;
      case 6:
        v29 = C3D::FinalPass::_createTechniquePassDrawNodes((C3D::Pass *)a1, PassAtIndex, (uint64_t)v87, &v86);
LABEL_23:
        v85 = v29;
        goto LABEL_26;
      case 7:
        v32 = scn_default_log();
        if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
          C3D::FinalPass::_createCustomTechniquePassesIfNeeded(&v81, v82);
        goto LABEL_19;
      case 8:
        v29 = C3D::FinalPass::_createTechniquePassDrawScene((C3D::Pass *)a1, PassAtIndex, (uint64_t)v87, &v86, 1u);
LABEL_25:
        v85 = v29;
        v74 = v29;
        goto LABEL_26;
      default:
        v31 = scn_default_log();
        if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
          C3D::FinalPass::_createCustomTechniquePassesIfNeeded(&v79, v80);
LABEL_19:
        v29 = v85;
LABEL_26:
        PassAtIndex[1].var5 = (__C3DFXTechnique *)v29;
        if (!v29)
          goto LABEL_73;
        C3D::Array<C3D::Pass *,0u,C3D::StackAllocator>::Array(v78, StackAllocator);
        v33 = (C3D::PassDescriptor *)C3D::Pass::descriptor(v85);
        if (C3D::PassDescriptor::inputCount(v33))
        {
          v34 = 0;
          do
          {
            v35 = (_QWORD *)(C3D::Pass::inputBufferParameterAtIndex(v85, v34) + 8);
            if (*v35)
              C3D::Array<char const*,0u,C3D::StackAllocator>::push_back<char const*&>(v78, v35);
            v36 = (C3D::PassDescriptor *)C3D::Pass::descriptor(v85);
            ++v34;
          }
          while (C3D::PassDescriptor::inputCount(v36) > v34);
        }
        if (v86 && v90)
        {
          v37 = (C3D::PassDescriptor *)C3D::Pass::descriptor(v85);
          if (!C3D::PassDescriptor::outputCount(v37))
            goto LABEL_43;
          v38 = 0;
          appended = 0;
          do
          {
            v40 = C3D::Pass::outputBufferParameterAtIndex(v85, v38);
            v41 = *(_WORD *)(v40 + 66);
            if ((v41 & 0x40) == 0 && (v41 & 3) != 2)
            {
              v42 = *(_BYTE **)(v40 + 8);
              if (v42)
              {
                if (*v42)
                  appended = C3D::FinalPass::_appendRenderTargetDependencyForPass(v40, (uint64_t)&v89, v85, v40);
              }
            }
            v43 = (C3D::PassDescriptor *)C3D::Pass::descriptor(v85);
            ++v38;
          }
          while (C3D::PassDescriptor::outputCount(v43) > v38);
          if ((appended & 1) == 0)
          {
LABEL_43:
            v44 = scn_default_log();
            if (os_log_type_enabled(v44, OS_LOG_TYPE_FAULT))
            {
              v64 = (**(uint64_t (***)(C3D::Pass *))v85)(v85);
              *(_DWORD *)buf = 136315394;
              v94 = "dependencyFound";
              v95 = 2080;
              v96 = v64;
              _os_log_fault_impl(&dword_1DCCB8000, v44, OS_LOG_TYPE_FAULT, "Assertion '%s' failed. Unable to find dependency in previous techniques for pass %s", buf, 0x16u);
            }
          }
        }
        v45 = (C3D::PassDescriptor *)C3D::Pass::descriptor(v85);
        if (!C3D::PassDescriptor::inputCount(v45))
          goto LABEL_72;
        v46 = 0;
        break;
    }
    do
    {
      v47 = C3D::Pass::inputBufferParameterAtIndex(v85, v46);
      v48 = v47;
      v49 = *(_anonymous_namespace_ **)(v47 + 8);
      if (!v49)
        goto LABEL_67;
      v50 = strlen(*(const char **)(v47 + 8));
      v52 = 0xC6A4A7935BD1E995 * v50;
      if (v50 >= 8)
      {
        v54 = v50 >> 3;
        v53 = (unsigned __int8 *)v49 + 8 * v54;
        v55 = 8 * v54;
        v56 = v49;
        do
        {
          v57 = *(_QWORD *)v56;
          v56 = (_anonymous_namespace_ *)((char *)v56 + 8);
          v52 = 0xC6A4A7935BD1E995
              * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v57) ^ ((0xC6A4A7935BD1E995 * v57) >> 47))) ^ v52);
          v55 -= 8;
        }
        while (v55);
      }
      else
      {
        v53 = (unsigned __int8 *)v49;
      }
      switch(v50 & 7)
      {
        case 1uLL:
          goto LABEL_59;
        case 2uLL:
          goto LABEL_58;
        case 3uLL:
          goto LABEL_57;
        case 4uLL:
          goto LABEL_56;
        case 5uLL:
          goto LABEL_55;
        case 6uLL:
          goto LABEL_54;
        case 7uLL:
          v52 ^= (unint64_t)v53[6] << 48;
LABEL_54:
          v52 ^= (unint64_t)v53[5] << 40;
LABEL_55:
          v52 ^= (unint64_t)v53[4] << 32;
LABEL_56:
          v52 ^= (unint64_t)v53[3] << 24;
LABEL_57:
          v52 ^= (unint64_t)v53[2] << 16;
LABEL_58:
          v52 ^= (unint64_t)v53[1] << 8;
LABEL_59:
          v52 = 0xC6A4A7935BD1E995 * (v52 ^ *v53);
          break;
        default:
          break;
      }
      v58 = (0xC6A4A7935BD1E995 * (v52 ^ (v52 >> 47))) ^ ((0xC6A4A7935BD1E995 * (v52 ^ (v52 >> 47))) >> 47);
      v59 = (v88 - 1) & v58;
      v60 = *(unsigned __int16 *)(v87[3] + 2 * v59);
      if (v60 >= 2)
      {
        while ((v60 & 2) == 0 || v58 != *(_QWORD *)(v87[1] + 8 * v59))
        {
          ++v59;
          v61 = v60 >= 4;
          v60 >>= 1;
          if (!v61)
            goto LABEL_64;
        }
        if (v87[2])
        {
          if ((C3D::FinalPass::_appendRenderTargetDependencyForPass(v50, (uint64_t)&v89, v85, v48) & 1) != 0)
            goto LABEL_67;
          v49 = *(_anonymous_namespace_ **)(v48 + 8);
        }
      }
LABEL_64:
      {
        C3D::Array<char const*,0u,C3D::StackAllocator>::push_back<char const*&>(a3, &v85);
      }
LABEL_67:
      v63 = (C3D::PassDescriptor *)C3D::Pass::descriptor(v85);
      ++v46;
    }
    while (C3D::PassDescriptor::inputCount(v63) > v46);
LABEL_72:
    C3D::Array<char const*,0u,C3D::StackAllocator>::push_back<char const*&>(&v89, &v85);
LABEL_73:
    ++v25;
  }
  while (v25 != v76);
  v65 = v90 - 1;
  if ((int)(v90 - 1) < 0)
  {
    v66 = 0;
  }
  else
  {
    do
    {
      v66 = *(C3D::Pass **)C3D::Array<C3D::Pass *,0u,C3D::StackAllocator>::operator[]((uint64_t)&v89, v65);
      v67 = (C3D::PassDescriptor *)C3D::Pass::descriptor(v66);
      v68 = C3D::PassDescriptor::outputCount(v67);
      if (v68)
      {
        v69 = 0;
        while (1)
        {
          v70 = C3D::Pass::outputBufferParameterAtIndex(v66, v69);
          if (*(_BYTE *)(v70 + 64) == 1 && !strcmp(*(const char **)(v70 + 8), "COLOR"))
            break;
          if (v68 == ++v69)
            goto LABEL_80;
        }
      }
      else
      {
LABEL_80:
        v66 = 0;
      }
      if (v66)
        break;
    }
    while (v65-- > 0);
  }
  *a4 = v66;
  C3DStackAllocatorPopFrame(StackAllocator);
  return v74;
}

C3D::RenderPass *C3D::RenderGraph::createPass<C3D::OverlayPass,C3D::FinalPass *>(uint64_t a1, C3D::Pass **a2)
{
  C3D::RenderPass *Aligned;

  Aligned = (C3D::RenderPass *)C3DScratchAllocatorAllocateAligned(*(_QWORD *)(a1 + 16), 240, 16, 0);
  *(_QWORD *)C3D::RenderPass::RenderPass(Aligned, (C3D::RenderGraph *)a1, *a2) = &unk_1EA598A78;
  C3D::RenderGraph::addPass((C3D::RenderGraph *)a1, Aligned);
  if (*(_BYTE *)(a1 + 209))
    (*(void (**)(C3D::RenderPass *))(*(_QWORD *)Aligned + 8))(Aligned);
  return Aligned;
}

C3D::DownsamplePass *C3D::RenderGraph::createPass<C3D::DownsamplePass,C3D::FinalPass *>(uint64_t a1, C3D::Pass **a2)
{
  C3D::DownsamplePass *Aligned;

  Aligned = (C3D::DownsamplePass *)C3DScratchAllocatorAllocateAligned(*(_QWORD *)(a1 + 16), 256, 16, 0);
  C3D::DownsamplePass::DownsamplePass(Aligned, (C3D::RenderGraph *)a1, *a2);
  C3D::RenderGraph::addPass((C3D::RenderGraph *)a1, Aligned);
  if (*(_BYTE *)(a1 + 209))
    (*(void (**)(C3D::DownsamplePass *))(*(_QWORD *)Aligned + 8))(Aligned);
  return Aligned;
}

C3D::RenderPass *C3D::RenderGraph::createPass<C3D::JitteringPass,C3D::FinalPass *>(uint64_t a1, C3D::Pass **a2)
{
  C3D::RenderPass *Aligned;

  Aligned = (C3D::RenderPass *)C3DScratchAllocatorAllocateAligned(*(_QWORD *)(a1 + 16), 256, 16, 0);
  *(_QWORD *)C3D::RenderPass::RenderPass(Aligned, (C3D::RenderGraph *)a1, *a2) = &unk_1EA598EC8;
  C3D::RenderGraph::addPass((C3D::RenderGraph *)a1, Aligned);
  if (*(_BYTE *)(a1 + 209))
    (*(void (**)(C3D::RenderPass *))(*(_QWORD *)Aligned + 8))(Aligned);
  return Aligned;
}

C3D::ManipulatorPass *C3D::RenderGraph::createPass<C3D::ManipulatorPass,C3D::FinalPass *>(uint64_t a1, C3D::Pass **a2)
{
  C3D::ManipulatorPass *Aligned;

  Aligned = (C3D::ManipulatorPass *)C3DScratchAllocatorAllocateAligned(*(_QWORD *)(a1 + 16), 5376, 16, 0);
  C3D::ManipulatorPass::ManipulatorPass(Aligned, (C3D::RenderGraph *)a1, *a2);
  C3D::RenderGraph::addPass((C3D::RenderGraph *)a1, Aligned);
  if (*(_BYTE *)(a1 + 209))
    (*(void (**)(C3D::ManipulatorPass *))(*(_QWORD *)Aligned + 8))(Aligned);
  return Aligned;
}

C3D::GridPass *C3D::RenderGraph::createPass<C3D::GridPass,C3D::FinalPass *>(uint64_t a1, C3D::Pass **a2)
{
  C3D::GridPass *Aligned;

  Aligned = (C3D::GridPass *)C3DScratchAllocatorAllocateAligned(*(_QWORD *)(a1 + 16), 256, 16, 0);
  C3D::GridPass::GridPass(Aligned, (C3D::RenderGraph *)a1, *a2);
  C3D::RenderGraph::addPass((C3D::RenderGraph *)a1, Aligned);
  if (*(_BYTE *)(a1 + 209))
    (*(void (**)(C3D::GridPass *))(*(_QWORD *)Aligned + 8))(Aligned);
  return Aligned;
}

C3D::AuthoringPass *C3D::RenderGraph::createPass<C3D::AuthoringPass,C3D::FinalPass *>(uint64_t a1, C3D::Pass **a2)
{
  C3D::AuthoringPass *Aligned;

  Aligned = (C3D::AuthoringPass *)C3DScratchAllocatorAllocateAligned(*(_QWORD *)(a1 + 16), 5392, 16, 0);
  C3D::AuthoringPass::AuthoringPass(Aligned, (C3D::RenderGraph *)a1, *a2);
  C3D::RenderGraph::addPass((C3D::RenderGraph *)a1, Aligned);
  if (*(_BYTE *)(a1 + 209))
    (*(void (**)(C3D::AuthoringPass *))(*(_QWORD *)Aligned + 8))(Aligned);
  return Aligned;
}

C3D::CompositeARPass *C3D::RenderGraph::createPass<C3D::CompositeARPass,C3D::ScenePass *&>(uint64_t a1, C3D::Pass **a2)
{
  C3D::CompositeARPass *Aligned;

  Aligned = (C3D::CompositeARPass *)C3DScratchAllocatorAllocateAligned(*(_QWORD *)(a1 + 16), 272, 16, 0);
  C3D::CompositeARPass::CompositeARPass(Aligned, (C3D::RenderGraph *)a1, *a2);
  C3D::RenderGraph::addPass((C3D::RenderGraph *)a1, Aligned);
  if (*(_BYTE *)(a1 + 209))
    (*(void (**)(C3D::CompositeARPass *))(*(_QWORD *)Aligned + 8))(Aligned);
  return Aligned;
}

C3D::DrawBackgroundPass *C3D::RenderGraph::createPass<C3D::DrawBackgroundPass,C3D::ScenePass *&>(uint64_t a1, C3D::Pass **a2)
{
  C3D::DrawBackgroundPass *Aligned;

  Aligned = (C3D::DrawBackgroundPass *)C3DScratchAllocatorAllocateAligned(*(_QWORD *)(a1 + 16), 5280, 16, 0);
  C3D::DrawBackgroundPass::DrawBackgroundPass(Aligned, (C3D::RenderGraph *)a1, *a2);
  C3D::RenderGraph::addPass((C3D::RenderGraph *)a1, Aligned);
  if (*(_BYTE *)(a1 + 209))
    (*(void (**)(C3D::DrawBackgroundPass *))(*(_QWORD *)Aligned + 8))(Aligned);
  return Aligned;
}

C3D::ScenePass *C3D::FinalPass::_createTechniquePassDrawScene(C3D::Pass *a1, __C3DFXPass *a2, uint64_t a3, _BYTE *a4, unsigned __int8 a5)
{
  uint64_t v9;
  C3D::ScenePass *v10;
  Parameters v12[7];
  C3D::Pass *v13;
  Parameters v14;

  v14.var4 = 1;
  *(_DWORD *)&v14.var0 = 16843009;
  v14.var5 = a5;
  v9 = *((_QWORD *)a1 + 3);
  v13 = a1;
  C3D::FinalPass::_parametersForDrawNodesTechniquePass((const __CFArray **)a1, a2, (uint64_t)v12);
  v10 = C3D::RenderGraph::createPass<C3D::ScenePass,C3D::FinalPass *,C3D::ScenePass::Parameters &,C3D::DrawNodesPass::Parameters>(v9, &v13, &v14, v12);
  C3D::FinalPass::_setupTechniquePassCommonData((uint64_t *)a1, (__n128 *)v10, (uint64_t)a2, a3, a4);
  return v10;
}

C3D::DrawNodesPass *C3D::FinalPass::_createTechniquePassDrawNodes(C3D::Pass *a1, __C3DFXPass *a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v8;
  C3D::DrawNodesPass *v9;
  Parameters v11[7];
  C3D::Pass *v12;

  v8 = *((_QWORD *)a1 + 3);
  v12 = a1;
  C3D::FinalPass::_parametersForDrawNodesTechniquePass((const __CFArray **)a1, a2, (uint64_t)v11);
  v9 = C3D::RenderGraph::createPass<C3D::DrawNodesPass,C3D::FinalPass *,C3D::DrawNodesPass::Parameters>(v8, &v12, v11);
  C3D::FinalPass::_setupTechniquePassCommonData((uint64_t *)a1, (__n128 *)v9, (uint64_t)a2, a3, a4);
  return v9;
}

C3D::DrawQuadPass *C3D::FinalPass::_createTechniquePassDrawQuad(uint64_t *a1, __C3DFXPass *a2, uint64_t a3, _BYTE *a4)
{
  C3D::DrawQuadPass *v7;
  C3D::Pass *v9;
  __C3DFXPass *v10;

  v9 = (C3D::Pass *)a1;
  v10 = a2;
  v7 = C3D::RenderGraph::createPass<C3D::DrawQuadPass,C3D::FinalPass *,__C3DFXPass *&>(a1[3], &v9, &v10);
  C3D::FinalPass::_setupTechniquePassCommonData(a1, (__n128 *)v7, (uint64_t)v10, a3, a4);
  return v7;
}

C3D::CustomPass *C3D::FinalPass::_createTechniquePassCustom(uint64_t *a1, __C3DFXPass *a2, uint64_t a3, _BYTE *a4)
{
  C3D::CustomPass *v7;
  C3D::PassDescriptor *v8;
  unsigned int v9;
  _BYTE *v10;
  C3D::PassDescriptor *v11;
  C3D::Pass *v13;
  __C3DFXPass *v14;

  v13 = (C3D::Pass *)a1;
  v14 = a2;
  v7 = C3D::RenderGraph::createPass<C3D::CustomPass,C3D::FinalPass *,__C3DFXPass *&>(a1[3], &v13, &v14);
  C3D::FinalPass::_setupTechniquePassCommonData(a1, (__n128 *)v7, (uint64_t)v14, a3, a4);
  v8 = (C3D::PassDescriptor *)C3D::Pass::descriptor(v7);
  if (C3D::PassDescriptor::outputCount(v8))
  {
    v9 = 0;
    do
    {
      v10 = (_BYTE *)C3D::Pass::outputBufferParameterAtIndex(v7, v9);
      if (*v10 == 1)
        v10[26] = 7;
      ++v9;
      v11 = (C3D::PassDescriptor *)C3D::Pass::descriptor(v7);
    }
    while (v9 < C3D::PassDescriptor::outputCount(v11));
  }
  return v7;
}

uint64_t C3D::FinalPass::_appendRenderTargetDependencyForPass(uint64_t a1, uint64_t a2, C3D::Pass *a3, uint64_t a4)
{
  signed int v4;
  C3D::Pass *v8;
  C3D::PassDescriptor *v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;

  v4 = *(_DWORD *)(a2 + 8) - 1;
  if (v4 < 0)
    return 0;
  while (1)
  {
    v8 = *(C3D::Pass **)C3D::Array<C3D::Pass *,0u,C3D::StackAllocator>::operator[](a2, v4);
    v9 = (C3D::PassDescriptor *)C3D::Pass::descriptor(v8);
    v10 = C3D::PassDescriptor::outputCount(v9);
    if (v10)
      break;
LABEL_7:
    if (v4-- <= 0)
      return 0;
  }
  v11 = v10;
  v12 = 0;
  while (1)
  {
    v13 = C3D::Pass::outputBufferParameterAtIndex(v8, v12);
    if (*(unsigned __int8 *)(v13 + 64) == *(unsigned __int8 *)(a4 + 64)
      && !strcmp(*(const char **)(v13 + 8), *(const char **)(a4 + 8)))
    {
      break;
    }
    if (++v12 >= v11)
      goto LABEL_7;
  }
  C3D::Pass::addDependency(a3, v8);
  return 1;
}

uint64_t `anonymous namespace'::SymbolNameHasPrefix(_anonymous_namespace_ *this, const char *a2, char *a3, unsigned __int8 *a4)
{
  unsigned int v7;
  unsigned int v8;
  uint64_t v10;
  _anonymous_namespace_ *v11;
  uint64_t v12;
  unsigned int v13;

  v7 = strlen((const char *)this);
  v8 = strlen(a2);
  if (v8 + 1 < v7)
    return 0;
  if (!v7)
  {
LABEL_8:
    if (!a3)
      return 1;
    LOBYTE(v13) = 0;
LABEL_10:
    *a3 = v13;
    return 1;
  }
  v10 = v7;
  v11 = this;
  v12 = v8;
  while (v12)
  {
    if (*(unsigned __int8 *)a2 != *(unsigned __int8 *)v11)
      return 0;
    --v12;
    ++a2;
    v11 = (_anonymous_namespace_ *)((char *)v11 + 1);
    if (!--v10)
      goto LABEL_8;
  }
  v13 = *((unsigned __int8 *)this + v8) - 48;
  if (v13 > 9)
    return 0;
  if (a3)
    goto LABEL_10;
  return 1;
}

uint64_t C3D::Array<C3D::Pass *,0u,C3D::StackAllocator>::operator[](uint64_t a1, unsigned int a2)
{
  NSObject *v4;
  int v6;
  int v7;
  const char *v8;
  __int16 v9;
  uint64_t v10;
  __int16 v11;
  unsigned int v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
    {
      v6 = *(_DWORD *)(a1 + 8);
      v7 = 136315906;
      v8 = "i < size()";
      v9 = 2048;
      v10 = a1;
      v11 = 1024;
      v12 = a2;
      v13 = 1024;
      v14 = v6;
      _os_log_fault_impl(&dword_1DCCB8000, v4, OS_LOG_TYPE_FAULT, "Assertion '%s' failed. Out of bound Array:%p access %d size %d", (uint8_t *)&v7, 0x22u);
    }
  }
  return *(_QWORD *)(a1 + 16) + 8 * a2;
}

BOOL C3D::__IsSameRenderTarget(C3D *this, const C3D::PassIODescriptor *a2, const C3D::PassIODescriptor *a3)
{
  const char *v5;
  const char *v6;
  int v7;

  v5 = (const char *)*((_QWORD *)this + 1);
  if (!v5 || (v6 = (const char *)*((_QWORD *)a2 + 1)) == 0 || strcmp(v5, v6))
  {
    v7 = *((unsigned __int8 *)this + 64);
    if (v7 != *((unsigned __int8 *)a2 + 64))
      return 0;
    if (v7 == 1)
      return *((unsigned __int8 *)this + 65) == *((unsigned __int8 *)a2 + 65);
  }
  return 1;
}

uint64_t C3D::FinalPass::_setupTechniquePassCommonData(uint64_t *a1, __n128 *this, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t RasterizerStates;
  C3D::PassDescriptor *v9;
  C3D::PassDescriptor *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  _BOOL4 IsMultisampled;
  _BOOL4 v17;
  unsigned int v18;
  char v19;
  C3D::PassDescriptor *v21;
  uint64_t v22;
  void *v23;
  uint64_t i;
  uint64_t *v25;
  uint64_t v26;
  int v27;
  int v28;
  C3D::PassDescriptor *v29;
  void *v30;
  unsigned int v31;
  __n128 v32;
  C3D::PassIODescriptor *v33;
  void *Aligned;
  unint64_t v35;
  uint64_t v36;
  const __CFString *v37;
  const char *v38;
  char v39;
  _DWORD *v40;
  unsigned int v41;
  unsigned int v42;
  BOOL v43;
  BOOL v44;
  unint64_t v45;
  char v46;
  NSObject *v47;
  const char *v48;
  char *v49;
  char v50;
  unsigned int v51;
  NSObject *v52;
  uint64_t FramebufferDescription;
  float32x2_t v54;
  float v55;
  uint64_t v56;
  unsigned __int8 *v57;
  int v58;
  uint64_t v59;
  NSObject *v60;
  unsigned int v61;
  unsigned int v62;
  char v63;
  int v64;
  char v65;
  char v66;
  const char *v67;
  unsigned int v68;
  unint64_t v69;
  unsigned __int8 *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  unsigned int v76;
  unsigned int v77;
  BOOL v78;
  __int16 v79;
  const char **v80;
  uint64_t v81;
  uint64_t v82;
  const char **v83;
  C3D::PassIODescriptor *v84;
  unint64_t v85;
  char *v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  C3D::PassDescriptor *v90;
  C3D::PassDescriptor *v91;
  unsigned int v92;
  const C3D::PassIODescriptor *v93;
  C3D *v94;
  C3D::PassIODescriptor *v95;
  unsigned int v96;
  uint64_t v97;
  C3D::PassIODescriptor *v98;
  C3D::PassDescriptor *v99;
  int v100;
  C3D::PassIODescriptor *v101;
  uint64_t v102;
  _OWORD *v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  unsigned int v108;
  C3D::PassDescriptor *v109;
  unsigned int v110;
  const void *v111;
  void *v112;
  unsigned int v113;
  const C3D::PassIODescriptor *v114;
  int v115;
  unint64_t v116;
  _OWORD *v117;
  unsigned int v118;
  unsigned int v119;
  C3D::PassIODescriptor *v120;
  uint64_t v121;
  NSObject *v122;
  _OWORD *v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  void *v127;
  int v128;
  NSObject *v129;
  char v130;
  NSObject *v131;
  _anonymous_namespace_ *v132;
  unsigned int v133;
  unsigned __int8 *v134;
  unint64_t v135;
  unsigned __int8 *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  unint64_t v141;
  unsigned int v142;
  unsigned int v143;
  unsigned __int8 *v144;
  char v145;
  uint64_t v146;
  uint64_t v147;
  __int128 v148;
  unsigned int v149;
  char v150;
  unsigned int j;
  C3D::PassDescriptor *v152;
  uint64_t v153;
  int v154;
  _OWORD *v155;
  uint64_t v156;
  _OWORD *v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  uint64_t StackAllocator;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  float32x2_t v169;
  __n128 *v170;
  uint64_t v172;
  unsigned int v173;
  unsigned int v174;
  C3D::PassIODescriptor *v175;
  _QWORD v176[4];
  unsigned int v177;
  int v178;
  uint64_t v179;
  unsigned int v180;
  const char **v181;
  char v182;
  char v183[15];
  char v184;
  char v185[14];
  char v186;
  char v187;
  char v188[15];
  uint8_t v189[4];
  uint64_t v190;
  char *__s[2];
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  _BYTE v196[32];
  __int128 v197;
  __int128 v198;
  __int128 v199;
  uint64_t v200;
  uint8_t v201[4];
  uint64_t v202;
  uint8_t v203[4];
  _QWORD v204[3];

  *(_QWORD *)((char *)&v204[1] + 4) = *MEMORY[0x1E0C80C00];
  v170 = this;
  if ((*(_BYTE *)(a3 + 187) & 8) == 0)
  {
    v5 = a1[14];
    *(_QWORD *)v196 = a3;
    *(_QWORD *)&v196[8] = v5;
    v6 = a1[2];
    *(_QWORD *)&v196[16] = 0;
    *(_QWORD *)&v196[24] = v6;
    v197 = 0uLL;
    v7 = *(_QWORD *)(a3 + 280);
    *(_QWORD *)&v198 = 0xBFF0000000000000;
    *((_QWORD *)&v198 + 1) = v7;
    v200 = 0;
    v199 = 0uLL;
    C3DFXPassInitialize((uint64_t *)v196, 0);
    this = v170;
  }
  *a5 = 0;
  if (*(_DWORD *)C3D::Pass::descriptor((C3D::Pass *)this) == 2)
  {
    RasterizerStates = C3DFXPassGetRasterizerStates(a3);
    if (RasterizerStates)
    {
      C3DRasterizerStatesGetDesc(RasterizerStates, (uint64_t)v196);
      v170[14].n128_u32[0] = v196[16];
    }
    if (C3DFXPassGetHasCustomViewport(a3))
    {
      v170[7].n128_u8[9] = 1;
      v170[8] = C3DFXPassGetViewport((__n128 *)a3);
    }
  }
  v9 = (C3D::PassDescriptor *)C3D::Pass::descriptor((C3D::Pass *)v170);
  if (C3D::PassDescriptor::outputCount(v9))
  {
    v10 = (C3D::PassDescriptor *)C3D::Pass::descriptor((C3D::Pass *)v170);
    if (C3D::PassDescriptor::outputCount(v10))
    {
      v11 = 0;
      do
      {
        v12 = C3D::Pass::outputBufferParameterAtIndex((C3D::Pass *)v170, v11);
        v13 = v12;
        v14 = *(unsigned __int8 *)(a3 + 176);
        if (v14 <= 1)
          LOBYTE(v14) = 0;
        *(_BYTE *)(v12 + 31) = v14;
        v15 = *(unsigned __int8 *)(v12 + 24);
        IsMultisampled = SCNMTLTextureTypeIsMultisampled(v15);
        v17 = IsMultisampled;
        v18 = *(unsigned __int8 *)(a3 + 176);
        v19 = v18 < 2 || IsMultisampled;
        if ((v19 & 1) == 0)
        {
          *(_BYTE *)(v13 + 24) = SCNMTLTextureTypeMultisampledEquivalent(v15);
          v18 = *(unsigned __int8 *)(a3 + 176);
        }
        if (v18 < 2 && v17)
          *(_BYTE *)(v13 + 24) = SCNMTLTextureTypeNonMultisampledEquivalent(v15);
        v21 = (C3D::PassDescriptor *)C3D::Pass::descriptor((C3D::Pass *)v170);
        ++v11;
      }
      while (v11 < C3D::PassDescriptor::outputCount(v21));
    }
  }
  StackAllocator = C3DEngineContextGetStackAllocator(a1[2]);
  C3DStackAllocatorPushFrame(StackAllocator);
  v22 = C3DEngineContextGetStackAllocator(a1[2]);
  C3D::Array<C3D::Pass *,0u,C3D::StackAllocator>::Array(&v179, v22);
  v165 = *(_QWORD *)(a3 + 512);
  v166 = *(unsigned int *)(a3 + 520);
  if (*(_DWORD *)(a3 + 520))
  {
    v25 = *(uint64_t **)(a3 + 512);
    for (i = *(unsigned int *)(a3 + 520); i; --i)
    {
      v26 = *v25;
      if (*(_DWORD *)(*v25 + 16) == 1)
      {
        *(_QWORD *)v196 = 0;
        v27 = *(_DWORD *)(v26 + 32);
        if (v27)
        {
LABEL_30:
          C3D::Array<char const*,0u,C3D::StackAllocator>::push_back<char const*&>(&v179, v196);
          goto LABEL_31;
        }
        if (*(_QWORD *)v196)
          goto LABEL_30;
      }
LABEL_31:
      ++v25;
    }
  }
  v176[0] = C3DEngineContextGetStackAllocator(a1[2]);
  C3D::Hash<C3D::PassIODescriptor,C3D::StackAllocator>::_allocate((uint64_t)v176, 32);
  C3D::Array<C3D::PassIODescriptor,0u,C3D::StackAllocator>::Array(&v172, StackAllocator);
  v28 = *(_DWORD *)(a3 + 440);
  v29 = (C3D::PassDescriptor *)C3D::Pass::descriptor((C3D::Pass *)v170);
  v31 = v28 + C3D::PassDescriptor::outputCount(v29);
  if (v174 < v31)
  {
    v33 = v175;
    Aligned = C3DStackAllocatorAllocateAligned(v172, 80 * v31, 16, 0);
    memcpy(Aligned, v33, 80 * v173);
    v175 = (C3D::PassIODescriptor *)Aligned;
    v174 = v31;
  }
  if (*(_DWORD *)(a3 + 440))
  {
    v35 = 0;
    v164 = *(_QWORD *)(a3 + 432);
    do
    {
      v36 = v164 + (v35 << 6);
      v37 = *(const __CFString **)(v36 + 8);
      if (v37)
      else
        v38 = 0;
      v41 = *(_DWORD *)(v36 + 16);
      v40 = (_DWORD *)(v36 + 16);
      v39 = v41;
      if (v41 >= 6)
      {
        v47 = scn_default_log();
        if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
          C3D::FinalPass::_setupTechniquePassCommonData(&v182, v183);
        v42 = 0;
        v43 = 0;
        v44 = 0;
        LOBYTE(v45) = 0;
        v46 = 1;
      }
      else
      {
        v42 = (0x1Eu >> v39) & 1;
        v43 = (v39 & 0x3F) == 0;
        v44 = (v39 & 0x3F) == 5;
        v45 = 0x30101010102uLL >> (8 * v39);
        v46 = (0x1Eu >> v39) & 1;
      }
      v48 = "COLOR";
      if (((v38 == 0) & v42) == 0)
        v48 = v38;
      if (v43 && v48 == 0)
        v49 = "DEPTH";
      else
        v49 = (char *)v48;
      if (*(unsigned __int8 *)(a3 + 176) <= 1u)
        v50 = 2;
      else
        v50 = 4;
      C3D::PassIODescriptor::PassIODescriptor((uint64_t)__s, v50);
      __s[1] = v49;
      LOBYTE(v195) = v45;
      if (!strcmp(v49, "DEPTH"))
        WORD1(v195) |= 8u;
      if (*v40 >= 6u)
      {
        v52 = scn_default_log();
        if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
          C3D::FinalPass::_setupTechniquePassCommonData(&v184, v185);
        v51 = 255;
      }
      else
      {
        v51 = (0xFF03020100FFuLL >> (8 * *v40));
      }
      FramebufferDescription = C3DFXPassGetFramebufferDescription(a3);
      if ((*(_BYTE *)(FramebufferDescription + 80) & 8) != 0)
        v54 = (float32x2_t)a1[17];
      else
        v54 = *(float32x2_t *)FramebufferDescription;
      v169 = v54;
      if (v42)
      {
        v55 = *(float *)(a3 + 4 * v51 + 392);
        v56 = FramebufferDescription + 8 * v51;
        v58 = *(unsigned __int8 *)(v56 + 8);
        v57 = (unsigned __int8 *)(v56 + 8);
        if (v58 == 1)
        {
          v59 = a1[19];
        }
        else
        {
          if ((*(_BYTE *)(FramebufferDescription + 80) & 7u) <= v51)
          {
            v60 = scn_default_log();
            if (os_log_type_enabled(v60, OS_LOG_TYPE_FAULT))
              C3D::FinalPass::_setupTechniquePassCommonData(v201, &v202, v60);
          }
          LOWORD(v59) = C3DRenderBufferFormatToMTLPixelFormat(*v57, 0, 0);
        }
      }
      else if ((v46 & 1) != 0)
      {
        LOWORD(v59) = 0;
        v55 = 1.0;
      }
      else
      {
        LOWORD(v59) = C3DRenderBufferFormatToMTLPixelFormat(*(unsigned __int8 *)(FramebufferDescription + 72), 0, 0);
        v55 = *(float *)(a3 + 424);
      }
      LOWORD(v192) = (int)(float)(v55 * v169.f32[0]);
      WORD1(v192) = (int)vmuls_lane_f32(v55, v169, 1);
      WORD6(v192) = v59;
      v61 = *(unsigned __int8 *)(a3 + 176);
      if (v61 <= 1)
        LOBYTE(v61) = 0;
      HIBYTE(v192) = v61;
      v194 = *(_OWORD *)(a3 + 128);
      v62 = *(_DWORD *)(a3 + 184);
      v63 = v42 ^ 1;
      if ((v62 & 1) == 0)
        v63 = 1;
      if ((v63 & 1) != 0)
      {
        v65 = !v43;
        if ((v62 & 2) == 0)
          v65 = 1;
        if ((v65 & 1) != 0)
        {
          v66 = !v44;
          if ((*(_DWORD *)(a3 + 184) & 4) == 0)
            v66 = 1;
          if ((v66 & 1) != 0)
            goto LABEL_86;
        }
        LOWORD(v64) = WORD1(v195) & 0xFFFC | 2;
      }
      else
      {
        v64 = (WORD1(v195) & 0xFFBC | (v62 >> 3) & 0x40) ^ 0x42;
      }
      WORD1(v195) = v64;
LABEL_86:
      BYTE1(v195) = v51;
      if (v49)
      {
        v67 = __s[1];
        v68 = strlen(__s[1]);
        v69 = 0xC6A4A7935BD1E995 * v68;
        if (v68 >= 8)
        {
          v71 = v68 >> 3;
          v70 = (unsigned __int8 *)&__s[1][8 * v71];
          v72 = 8 * v71;
          v73 = __s[1];
          do
          {
            v74 = *(_QWORD *)v73;
            v73 += 8;
            v69 = 0xC6A4A7935BD1E995
                * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v74) ^ ((0xC6A4A7935BD1E995 * v74) >> 47))) ^ v69);
            v72 -= 8;
          }
          while (v72);
        }
        else
        {
          v70 = (unsigned __int8 *)__s[1];
        }
        switch(v68 & 7)
        {
          case 1u:
            goto LABEL_98;
          case 2u:
            goto LABEL_97;
          case 3u:
            goto LABEL_96;
          case 4u:
            goto LABEL_95;
          case 5u:
            goto LABEL_94;
          case 6u:
            goto LABEL_93;
          case 7u:
            v69 ^= (unint64_t)v70[6] << 48;
LABEL_93:
            v69 ^= (unint64_t)v70[5] << 40;
LABEL_94:
            v69 ^= (unint64_t)v70[4] << 32;
LABEL_95:
            v69 ^= (unint64_t)v70[3] << 24;
LABEL_96:
            v69 ^= (unint64_t)v70[2] << 16;
LABEL_97:
            v69 ^= (unint64_t)v70[1] << 8;
LABEL_98:
            v69 = 0xC6A4A7935BD1E995 * (v69 ^ *v70);
            break;
          default:
            break;
        }
        v75 = (0xC6A4A7935BD1E995 * (v69 ^ (v69 >> 47))) ^ ((0xC6A4A7935BD1E995 * (v69 ^ (v69 >> 47))) >> 47);
        v76 = (*(_DWORD *)(a4 + 36) - 1) & v75;
        v77 = *(unsigned __int16 *)(*(_QWORD *)(a4 + 24) + 2 * v76);
        if (v77 < 2)
          goto LABEL_103;
        while ((v77 & 2) == 0 || v75 != *(_QWORD *)(*(_QWORD *)(a4 + 8) + 8 * v76))
        {
          ++v76;
          v78 = v77 >= 4;
          v77 >>= 1;
          if (!v78)
            goto LABEL_103;
        }
        if (!*(_QWORD *)(a4 + 16) || (v79 = WORD1(v195), (BYTE2(v195) & 3) == 2))
        {
LABEL_103:
          v196[0] = v45;
          *(_OWORD *)&v196[4] = v192;
          *(_DWORD *)&v196[20] = v193;
          C3D::Hash<C3D::FinalPass::RenderTarget,C3D::StackAllocator>::insert(a4, v75, (__int128 *)v196);
        }
        else
        {
          v80 = v181;
          v81 = v180;
          if (v180)
          {
            v82 = 8 * v180;
            v83 = v181;
            while (strcmp(*v83, v67))
            {
              ++v83;
              v82 -= 8;
              if (!v82)
                goto LABEL_115;
            }
          }
          else
          {
            v83 = v181;
          }
          if (v83 == &v80[v81])
          {
LABEL_115:
            WORD1(v195) = v79 & 0xFF74 | 0x81;
            *a5 = 1;
            v197 = v193;
            v198 = v194;
            v199 = v195;
            *(_OWORD *)v196 = *(_OWORD *)__s;
            *(_OWORD *)&v196[16] = v192;
            C3D::Hash<C3D::PassIODescriptor,C3D::StackAllocator>::insert((uint64_t)v176, v75, v196);
          }
        }
      }
      v32 = C3D::Array<C3D::PassIODescriptor,0u,C3D::StackAllocator>::push_back<C3D::PassIODescriptor&>((uint64_t)&v172, (uint64_t)__s);
      ++v35;
    }
    while (v35 < *(unsigned int *)(a3 + 440));
  }
  v84 = v175;
  v85 = v173;
  v86 = (char *)v175 + 80 * v173;
  if (v173 < 0x81)
  {
    v87 = 0;
    v89 = 0;
  }
  else
  {
    v87 = std::get_temporary_buffer[abi:nn180100]<C3D::PassIODescriptor>(v173);
    v89 = v88;
  }
  std::__stable_sort<std::_ClassicAlgPolicy,C3D::FinalPass::_setupTechniquePassCommonData(C3D::Pass *,__C3DFXPass *,C3D::Hash<C3D::FinalPass::RenderTarget,C3D::StackAllocator> &,BOOL &)::$_1 &,C3D::PassIODescriptor *>((uint64_t)v84, v86, v85, (uint64_t)v87, v89, v32);
  if (v87)
    operator delete(v87);
  v90 = (C3D::PassDescriptor *)C3D::Pass::descriptor((C3D::Pass *)v170);
  if (C3D::PassDescriptor::outputCount(v90))
  {
    v91 = (C3D::PassDescriptor *)C3D::Pass::descriptor((C3D::Pass *)v170);
    if (C3D::PassDescriptor::outputCount(v91))
    {
      v92 = 0;
      do
      {
        v94 = (C3D *)C3D::Pass::outputBufferParameterAtIndex((C3D::Pass *)v170, v92);
        v95 = v175;
        v96 = v173;
        if (v173)
        {
          v97 = 80 * v173;
          v98 = v175;
          while (!C3D::__IsSameRenderTarget(v94, v98, v93))
          {
            v98 = (C3D::PassIODescriptor *)((char *)v98 + 80);
            v97 -= 80;
            if (!v97)
              goto LABEL_131;
          }
        }
        else
        {
          v98 = v175;
        }
        if (v98 == (C3D::PassIODescriptor *)((char *)v95 + 80 * v96))
LABEL_131:
          C3D::Array<C3D::PassIODescriptor,0u,C3D::StackAllocator>::push_back<C3D::PassIODescriptor&>((uint64_t)&v172, (uint64_t)v94);
        v99 = (C3D::PassDescriptor *)C3D::Pass::descriptor((C3D::Pass *)v170);
        ++v92;
      }
      while (v92 < C3D::PassDescriptor::outputCount(v99));
    }
  }
  C3D::Pass::setOutputCount((C3D::Pass *)v170, v173);
  if (v173)
  {
    v100 = 0;
    v101 = v175;
    v102 = 80 * v173;
    do
    {
      v103 = (_OWORD *)C3D::Pass::outputBufferParameterAtIndex((C3D::Pass *)v170, v100++);
      *v103 = *(_OWORD *)v101;
      v104 = *((_OWORD *)v101 + 1);
      v105 = *((_OWORD *)v101 + 2);
      v106 = *((_OWORD *)v101 + 4);
      v103[3] = *((_OWORD *)v101 + 3);
      v103[4] = v106;
      v103[1] = v104;
      v103[2] = v105;
      v101 = (C3D::PassIODescriptor *)((char *)v101 + 80);
      v102 -= 80;
    }
    while (v102);
  }
  C3D::Array<C3D::PassIODescriptor,0u,C3D::StackAllocator>::Array(__s, StackAllocator);
  v107 = *(_QWORD *)(a3 + 520);
  v108 = v177;
  v109 = (C3D::PassDescriptor *)C3D::Pass::descriptor((C3D::Pass *)v170);
  v110 = v107 + v108 + C3D::PassDescriptor::inputCount(v109);
  if (HIDWORD(__s[1]) < v110)
  {
    v111 = (const void *)v192;
    v112 = C3DStackAllocatorAllocateAligned((uint64_t)__s[0], 80 * v110, 16, 0);
    memcpy(v112, v111, 80 * LODWORD(__s[1]));
    *(_QWORD *)&v192 = v112;
    HIDWORD(__s[1]) = v110;
  }
  v113 = v177;
  C3D::PassIODescriptor::PassIODescriptor((uint64_t)v196, 2);
  C3D::Array<C3D::PassIODescriptor,0u,C3D::StackAllocator>::resize(__s, v113, v196);
  v115 = v178;
  if (v178 != -15)
  {
    v116 = 0;
    do
    {
      if ((*(_WORD *)(v176[3] + 2 * v116) & 1) != 0)
      {
        v117 = (_OWORD *)(v176[2] + 80 * v116);
        v199 = v117[4];
        *(_OWORD *)&v196[16] = v117[1];
        v197 = v117[2];
        v198 = v117[3];
        *(_OWORD *)v196 = *v117;
        WORD1(v199) = WORD1(v199) & 0xFF74 | 0x81;
        v118 = v173;
        if (v173)
        {
          v119 = 0;
          v120 = v175;
          v121 = 80 * v173;
          while (!C3D::__IsSameRenderTarget(v120, (const C3D::PassIODescriptor *)v196, v114))
          {
            ++v119;
            v120 = (C3D::PassIODescriptor *)((char *)v120 + 80);
            v121 -= 80;
            if (!v121)
              goto LABEL_149;
          }
        }
        else
        {
          v119 = 0;
        }
        v78 = v119 >= v118;
        v118 = v119;
        if (v78)
        {
LABEL_149:
          v122 = scn_default_log();
          if (os_log_type_enabled(v122, OS_LOG_TYPE_FAULT))
            C3D::FinalPass::_setupTechniquePassCommonData(v203, v204, v122);
        }
        v123 = (_OWORD *)C3D::Array<C3D::PassIODescriptor,0u,C3D::StackAllocator>::operator[]((uint64_t)__s, v118);
        v123[1] = *(_OWORD *)&v196[16];
        v123[2] = v197;
        v123[3] = v198;
        v123[4] = v199;
        *v123 = *(_OWORD *)v196;
        v115 = v178;
      }
      ++v116;
    }
    while (v116 < (v115 + 15));
  }
  if (v166)
  {
    v124 = 0;
    while (1)
    {
      v125 = *(_QWORD *)(v165 + 8 * v124);
      if (*(_DWORD *)(v125 + 16) == 1)
        break;
LABEL_169:
      if (++v124 == v166)
        goto LABEL_206;
    }
    if (*(unsigned __int8 *)(a3 + 176) <= 1u)
      v126 = 2;
    else
      v126 = 4;
    C3D::PassIODescriptor::PassIODescriptor((uint64_t)v196, v126);
    v128 = *(_DWORD *)(v125 + 32);
    if (v128)
    {
    }
    else
    {
      if (!*(_QWORD *)&v196[8])
      {
        v129 = scn_default_log();
        if (os_log_type_enabled(v129, OS_LOG_TYPE_FAULT))
          C3D::FinalPass::_setupTechniquePassCommonData(v189, &v190, v129);
      }
      v128 = *(_DWORD *)(v125 + 32);
    }
    if ((v128 - 20) >= 8)
    {
      if (v128 != 28)
      {
        v132 = *(_anonymous_namespace_ **)&v196[8];
        v133 = strlen(*(const char **)&v196[8]);
        v135 = 0xC6A4A7935BD1E995 * v133;
        if (v133 >= 8)
        {
          v137 = v133 >> 3;
          v136 = (unsigned __int8 *)(*(_QWORD *)&v196[8] + 8 * v137);
          v138 = 8 * v137;
          v139 = *(uint64_t **)&v196[8];
          do
          {
            v140 = *v139++;
            v135 = 0xC6A4A7935BD1E995
                 * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v140) ^ ((0xC6A4A7935BD1E995 * v140) >> 47))) ^ v135);
            v138 -= 8;
          }
          while (v138);
        }
        else
        {
          v136 = *(unsigned __int8 **)&v196[8];
        }
        switch(v133 & 7)
        {
          case 1u:
            goto LABEL_186;
          case 2u:
            goto LABEL_185;
          case 3u:
            goto LABEL_184;
          case 4u:
            goto LABEL_183;
          case 5u:
            goto LABEL_182;
          case 6u:
            goto LABEL_181;
          case 7u:
            v135 ^= (unint64_t)v136[6] << 48;
LABEL_181:
            v135 ^= (unint64_t)v136[5] << 40;
LABEL_182:
            v135 ^= (unint64_t)v136[4] << 32;
LABEL_183:
            v135 ^= (unint64_t)v136[3] << 24;
LABEL_184:
            v135 ^= (unint64_t)v136[2] << 16;
LABEL_185:
            v135 ^= (unint64_t)v136[1] << 8;
LABEL_186:
            v135 = 0xC6A4A7935BD1E995 * (v135 ^ *v136);
            break;
          default:
            break;
        }
        v141 = (0xC6A4A7935BD1E995 * (v135 ^ (v135 >> 47))) ^ ((0xC6A4A7935BD1E995 * (v135 ^ (v135 >> 47))) >> 47);
        v142 = (*(_DWORD *)(a4 + 36) - 1) & v141;
        v143 = *(unsigned __int16 *)(*(_QWORD *)(a4 + 24) + 2 * v142);
        if (v143 < 2)
          goto LABEL_191;
        while ((v143 & 2) == 0 || v141 != *(_QWORD *)(*(_QWORD *)(a4 + 8) + 8 * v142))
        {
          ++v142;
          v78 = v143 >= 4;
          v143 >>= 1;
          if (!v78)
            goto LABEL_191;
        }
        v146 = *(_QWORD *)(a4 + 16);
        if (v146)
        {
          v147 = v146 + 24 * v142;
          LOBYTE(v199) = *(_BYTE *)v147;
          v148 = *(_OWORD *)(v147 + 4);
          LODWORD(v197) = *(_DWORD *)(v147 + 20);
          *(_OWORD *)&v196[16] = v148;
          v149 = *(unsigned __int8 *)(a3 + 176);
          if (v149 <= 1)
            v150 = 0;
          else
            v150 = *(_BYTE *)(a3 + 176);
          v196[31] = v150;
          if (v196[24] == 2)
          {
            if (v149 >= 2)
              v196[24] = 4;
          }
          else if (v196[24] == 4 && v149 <= 1)
          {
            v196[24] = 2;
          }
        }
        else
        {
LABEL_191:
          {
            v145 = 1;
          }
          else
          {
              goto LABEL_169;
            v145 = 2;
          }
          v186 = -1;
          LOBYTE(v199) = v145;
        }
        goto LABEL_168;
      }
      v131 = scn_default_log();
      if (os_log_type_enabled(v131, OS_LOG_TYPE_ERROR))
        C3D::FinalPass::_setupTechniquePassCommonData(&v187, v188);
      v130 = 2;
    }
    else
    {
      v130 = 1;
    }
    LOBYTE(v199) = v130;
LABEL_168:
    C3D::Array<C3D::PassIODescriptor,0u,C3D::StackAllocator>::push_back<C3D::PassIODescriptor&>((uint64_t)__s, (uint64_t)v196);
    goto LABEL_169;
  }
LABEL_206:
  for (j = 0; ; ++j)
  {
    v152 = (C3D::PassDescriptor *)C3D::Pass::descriptor((C3D::Pass *)v170);
    if (j >= C3D::PassDescriptor::inputCount(v152))
      break;
    v153 = C3D::Pass::inputBufferParameterAtIndex((C3D::Pass *)v170, j);
    C3D::Array<C3D::PassIODescriptor,0u,C3D::StackAllocator>::push_back<C3D::PassIODescriptor&>((uint64_t)__s, v153);
  }
  C3D::Pass::setInputCount((C3D::Pass *)v170, __s[1]);
  if (LODWORD(__s[1]))
  {
    v154 = 0;
    v155 = (_OWORD *)v192;
    v156 = 80 * LODWORD(__s[1]);
    do
    {
      v157 = (_OWORD *)C3D::Pass::inputBufferParameterAtIndex((C3D::Pass *)v170, v154++);
      *v157 = *v155;
      v158 = v155[1];
      v159 = v155[2];
      v160 = v155[4];
      v157[3] = v155[3];
      v157[4] = v160;
      v157[1] = v158;
      v157[2] = v159;
      v155 += 5;
      v156 -= 80;
    }
    while (v156);
  }
  return C3DStackAllocatorPopFrame(StackAllocator);
}

void sub_1DCD68AA4(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void *`anonymous namespace'::ScratchAllocatedCStringFromCFString(const __CFString *this, const __CFString *a2, void *a3)
{
  size_t v5;
  void *Aligned;

  v5 = CFStringGetLength(this) + 1;
  Aligned = (void *)C3DScratchAllocatorAllocateAligned(a2, v5, 1, 0);
  bzero(Aligned, v5);
  CFStringGetCString(this, (char *)Aligned, v5, 0x8000100u);
  return Aligned;
}

const char *`anonymous namespace'::InputNameForFXSemantic(int a1)
{
  if ((a1 - 1) > 0x1B)
    return "Invalid";
  else
    return off_1EA59E740[a1 - 1];
}

uint64_t C3D::Hash<C3D::FinalPass::RenderTarget,C3D::StackAllocator>::insert(uint64_t a1, uint64_t a2, __int128 *a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  __int16 *v14;
  unsigned int v15;
  __int16 v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  int v22;
  char v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  __int128 *v28;
  __int128 v29;
  uint64_t result;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;

  while (1)
  {
    v6 = *(_DWORD *)(a1 + 36);
    v7 = (v6 - 1) & a2;
    v8 = *(_QWORD *)(a1 + 24);
    v9 = *(unsigned __int16 *)(v8 + 2 * v7);
    if (v9 >= 2)
      break;
LABEL_6:
    v12 = v7 + 496;
    v13 = v6 + 15;
    if (v13 < (int)v7 + 496)
      v12 = v13;
    if (v7 >= v12)
    {
      v15 = v7;
    }
    else
    {
      v14 = (__int16 *)(v8 + 2 * v7);
      v15 = v7;
      while (1)
      {
        v16 = *v14++;
        if ((v16 & 1) == 0)
          break;
        if (v12 == ++v15)
          goto LABEL_33;
      }
    }
    if (v15 != v12)
    {
      *(_WORD *)(v8 + 2 * v15) |= 1u;
      if (v15 <= (int)v7 + 14)
      {
        v21 = v15;
      }
      else
      {
        while (2)
        {
          if (v15 >= 0xF)
            v17 = v15 - 14;
          else
            v17 = 0;
          v18 = v17 - 1;
          if (v17 <= v15)
            v19 = v15;
          else
            v19 = v17;
          v20 = 1;
          while (1)
          {
            v21 = v18 + 1;
            if (v17 <= v21)
              break;
LABEL_27:
            ++v20;
            v18 = v21;
            if ((_DWORD)v21 == v19)
              goto LABEL_32;
          }
          v22 = 1 << (v18 - v17 + 2);
          v23 = v20;
          v24 = v17;
          while (1)
          {
            v25 = v24;
            if (((unsigned __int16)v22 & *(_WORD *)(v8 + 2 * v24)) != 0)
              break;
            ++v24;
            LOWORD(v22) = (unsigned __int16)v22 >> 1;
            --v23;
            if (v25 + 1 > v21)
              goto LABEL_27;
          }
          if (v21 >= v15)
          {
LABEL_32:
            *(_WORD *)(v8 + 2 * v15) ^= 1u;
            goto LABEL_33;
          }
          v26 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v21);
          v27 = v26 + 24 * v15;
          v28 = (__int128 *)(v26 + 24 * v21);
          v29 = *v28;
          *(_QWORD *)(v27 + 16) = *((_QWORD *)v28 + 2);
          *(_OWORD *)v27 = v29;
          v8 = *(_QWORD *)(a1 + 24);
          *(_WORD *)(v8 + 2 * v24) = (*(_WORD *)(v8 + 2 * v24) | (1 << (v15 - v24 + 1))) ^ (1 << v23);
          v15 = v21;
          if (v21 > (int)v7 + 14)
            continue;
          break;
        }
        LOBYTE(v15) = v21;
      }
      v33 = *(_QWORD *)(a1 + 16) + 24 * v21;
      v34 = *a3;
      *(_QWORD *)(v33 + 16) = *((_QWORD *)a3 + 2);
      *(_OWORD *)v33 = v34;
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v21) = a2;
      v35 = *(_QWORD *)(a1 + 24);
      *(_WORD *)(v35 + 2 * v21) |= 1u;
      result = 1;
      *(_WORD *)(v35 + 2 * v7) |= 1 << (v15 - v7 + 1);
      ++*(_DWORD *)(a1 + 32);
      return result;
    }
LABEL_33:
    C3D::Hash<C3D::FinalPass::RenderTarget,C3D::StackAllocator>::_grow(a1);
  }
  v10 = (v6 - 1) & a2;
  while ((v9 & 2) == 0 || *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v10) != a2)
  {
    ++v10;
    v11 = v9 > 3;
    v9 >>= 1;
    if (!v11)
      goto LABEL_6;
  }
  result = 0;
  v31 = *(_QWORD *)(a1 + 16) + 24 * v10;
  v32 = *a3;
  *(_QWORD *)(v31 + 16) = *((_QWORD *)a3 + 2);
  *(_OWORD *)v31 = v32;
  return result;
}

__n128 C3D::Array<C3D::PassIODescriptor,0u,C3D::StackAllocator>::push_back<C3D::PassIODescriptor&>(uint64_t a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  char *v6;
  unsigned int v7;
  char *Aligned;
  char *v9;
  __n128 result;
  __int128 v11;
  __int128 v12;

  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 12);
  v6 = *(char **)(a1 + 16);
  if (v4 + 1 > v5)
  {
    v7 = ((double)(v5 + 1) * 1.5);
    Aligned = (char *)C3DStackAllocatorAllocateAligned(*(_QWORD *)a1, 80 * v7, 16, 0);
    memcpy(Aligned, v6, 80 * *(unsigned int *)(a1 + 8));
    *(_QWORD *)(a1 + 16) = Aligned;
    *(_DWORD *)(a1 + 12) = v7;
    v6 = Aligned;
    v4 = *(_DWORD *)(a1 + 8);
  }
  v9 = &v6[80 * v4];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v11 = *(_OWORD *)(a2 + 32);
  v12 = *(_OWORD *)(a2 + 64);
  *((_OWORD *)v9 + 3) = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v9 + 4) = v12;
  *((__n128 *)v9 + 1) = result;
  *((_OWORD *)v9 + 2) = v11;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

_DWORD *C3D::Array<C3D::PassIODescriptor,0u,C3D::StackAllocator>::resize(_DWORD *result, unsigned int a2, _OWORD *a3)
{
  unsigned int v3;
  _DWORD *v5;
  const void *v7;
  unsigned int v8;
  void *Aligned;
  uint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v3 = result[2];
  if (v3 != a2)
  {
    v5 = result;
    if (v3 <= a2)
    {
      if (result[3] < a2)
      {
        v7 = (const void *)*((_QWORD *)result + 2);
        v8 = ((double)a2 * 1.5);
        Aligned = C3DStackAllocatorAllocateAligned(*(_QWORD *)result, 80 * v8, 16, 0);
        result = memcpy(Aligned, v7, 80 * v5[2]);
        *((_QWORD *)v5 + 2) = Aligned;
        v5[3] = v8;
        v3 = v5[2];
      }
      if (v3 < a2)
      {
        v10 = 80 * v3;
        v11 = a2 - (unint64_t)v3;
        do
        {
          v12 = (_OWORD *)(*((_QWORD *)v5 + 2) + v10);
          *v12 = *a3;
          v13 = a3[1];
          v14 = a3[2];
          v15 = a3[4];
          v12[3] = a3[3];
          v12[4] = v15;
          v12[1] = v13;
          v12[2] = v14;
          v10 += 80;
          --v11;
        }
        while (v11);
      }
    }
    v5[2] = a2;
  }
  return result;
}

uint64_t C3D::FinalPass::_parametersForDrawNodesTechniquePass@<X0>(const __CFArray **this@<X0>, __C3DFXPass *a2@<X1>, uint64_t a3@<X8>)
{
  C3D *Nodes;
  void *v7;
  C3D::ScratchAllocator *v8;
  float32x4_t *PointOfView;
  const __CFDictionary *Camera;
  __int16 v11;
  uint64_t var60_low;
  int *v13;
  int v14;
  uint64_t result;

  Nodes = (C3D *)C3DFXPassGetNodes((uint64_t)a2);
  if (Nodes)
    v8 = C3D::flattenedNodesForSelectedNodes(Nodes, this[2], *((__C3DEngineContext **)this[3] + 2), v7);
  else
    v8 = 0;
  PointOfView = C3DEngineContextGetPointOfView((uint64_t)this[2]);
  if (PointOfView && (Camera = C3DNodeGetCamera((uint64_t)PointOfView)) != 0)
  {
    if (C3DCameraGetScreenSpaceAmbientOcclusionIntensity((uint64_t)Camera) > 0.0)
      v11 = 16;
    else
      v11 = 0;
  }
  else
  {
    v11 = 0;
  }
  var60_low = LODWORD(a2->var60);
  if ((_DWORD)var60_low)
  {
    v13 = (int *)(*(_QWORD *)&a2->var59 + 16);
    do
    {
      v14 = *v13;
      v13 += 16;
      if (v14 == 2)
        v11 |= 0x80u;
      --var60_low;
    }
    while (var60_low);
  }
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = C3DFXPassGetPointOfView((uint64_t)a2);
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = C3DFXPassGetRootNode((uint64_t)a2);
  *(_QWORD *)(a3 + 32) = v8;
  *(_QWORD *)(a3 + 40) = C3DFXPassGetIncludeCategoryMask((uint64_t)a2);
  *(_QWORD *)(a3 + 48) = C3DFXPassGetExcludeCategoryMask((uint64_t)a2);
  *(_BYTE *)(a3 + 56) = 1;
  *(_WORD *)(a3 + 58) = v11;
  *(_WORD *)(a3 + 60) = 0;
  *(_BYTE *)(a3 + 62) = 0;
  result = C3DFXPassGetUsesSceneBackgroundColor((uint64_t)a2);
  *(_BYTE *)(a3 + 63) = result;
  *(_WORD *)(a3 + 64) = 0;
  *(_BYTE *)(a3 + 66) = 2;
  return result;
}

C3D::ScenePass *C3D::RenderGraph::createPass<C3D::ScenePass,C3D::FinalPass *,C3D::ScenePass::Parameters &,C3D::DrawNodesPass::Parameters>(uint64_t a1, C3D::Pass **a2, const Parameters *a3, const Parameters *a4)
{
  C3D::ScenePass *Aligned;

  Aligned = (C3D::ScenePass *)C3DScratchAllocatorAllocateAligned(*(_QWORD *)(a1 + 16), 5456, 16, 0);
  C3D::ScenePass::ScenePass(Aligned, (C3D::RenderGraph *)a1, *a2, a3, a4);
  C3D::RenderGraph::addPass((C3D::RenderGraph *)a1, Aligned);
  if (*(_BYTE *)(a1 + 209))
    (*(void (**)(C3D::ScenePass *))(*(_QWORD *)Aligned + 8))(Aligned);
  return Aligned;
}

C3D::DrawNodesPass *C3D::RenderGraph::createPass<C3D::DrawNodesPass,C3D::FinalPass *,C3D::DrawNodesPass::Parameters>(uint64_t a1, C3D::Pass **a2, const Parameters *a3)
{
  C3D::DrawNodesPass *Aligned;

  Aligned = (C3D::DrawNodesPass *)C3DScratchAllocatorAllocateAligned(*(_QWORD *)(a1 + 16), 5360, 16, 0);
  C3D::DrawNodesPass::DrawNodesPass(Aligned, (C3D::RenderGraph *)a1, *a2, a3);
  C3D::RenderGraph::addPass((C3D::RenderGraph *)a1, Aligned);
  if (*(_BYTE *)(a1 + 209))
    (*(void (**)(C3D::DrawNodesPass *))(*(_QWORD *)Aligned + 8))(Aligned);
  return Aligned;
}

C3D::DrawQuadPass *C3D::RenderGraph::createPass<C3D::DrawQuadPass,C3D::FinalPass *,__C3DFXPass *&>(uint64_t a1, C3D::Pass **a2, __C3DFXPass **a3)
{
  C3D::DrawQuadPass *Aligned;

  Aligned = (C3D::DrawQuadPass *)C3DScratchAllocatorAllocateAligned(*(_QWORD *)(a1 + 16), 256, 16, 0);
  C3D::DrawQuadPass::DrawQuadPass(Aligned, (C3D::RenderGraph *)a1, *a2, *a3);
  C3D::RenderGraph::addPass((C3D::RenderGraph *)a1, Aligned);
  if (*(_BYTE *)(a1 + 209))
    (*(void (**)(C3D::DrawQuadPass *))(*(_QWORD *)Aligned + 8))(Aligned);
  return Aligned;
}

C3D::CustomPass *C3D::RenderGraph::createPass<C3D::CustomPass,C3D::FinalPass *,__C3DFXPass *&>(uint64_t a1, C3D::Pass **a2, __C3DFXPass **a3)
{
  C3D::CustomPass *Aligned;

  Aligned = (C3D::CustomPass *)C3DScratchAllocatorAllocateAligned(*(_QWORD *)(a1 + 16), 128, 8, 0);
  C3D::CustomPass::CustomPass(Aligned, (C3D::RenderGraph *)a1, *a2, *a3);
  C3D::RenderGraph::addPass((C3D::RenderGraph *)a1, Aligned);
  if (*(_BYTE *)(a1 + 209))
    (*(void (**)(C3D::CustomPass *))(*(_QWORD *)Aligned + 8))(Aligned);
  return Aligned;
}

void C3D::Hash<C3D::FinalPass::RenderTarget,C3D::StackAllocator>::_allocate(uint64_t a1, int a2)
{
  unsigned int v3;
  size_t v4;

  if ((a2 & (a2 - 1)) != 0)
    C3D::Hash<C3D::FinalPass::RenderTarget,C3D::StackAllocator>::_allocate();
  *(_DWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 36) = a2;
  v3 = a2 + 15;
  v4 = 2 * (a2 + 15);
  *(_QWORD *)(a1 + 24) = C3DStackAllocatorAllocateAligned(*(_QWORD *)a1, (2 * (a2 + 15)), 4, 0);
  *(_QWORD *)(a1 + 8) = C3DStackAllocatorAllocateAligned(*(_QWORD *)a1, (8 * v3) & 0xFFFFFFF8, 8, 0);
  *(_QWORD *)(a1 + 16) = C3DStackAllocatorAllocateAligned(*(_QWORD *)a1, 24 * v3, 4, 0);
  memset(*(void **)(a1 + 8), 255, 8 * v3);
  bzero(*(void **)(a1 + 24), v4);
}

void C3D::Hash<C3D::PassIODescriptor,C3D::StackAllocator>::_allocate(uint64_t a1, int a2)
{
  unsigned int v3;
  size_t v4;

  if ((a2 & (a2 - 1)) != 0)
    C3D::Hash<C3D::FinalPass::RenderTarget,C3D::StackAllocator>::_allocate();
  *(_DWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 36) = a2;
  v3 = a2 + 15;
  v4 = 2 * (a2 + 15);
  *(_QWORD *)(a1 + 24) = C3DStackAllocatorAllocateAligned(*(_QWORD *)a1, (2 * (a2 + 15)), 4, 0);
  *(_QWORD *)(a1 + 8) = C3DStackAllocatorAllocateAligned(*(_QWORD *)a1, (8 * v3) & 0xFFFFFFF8, 8, 0);
  *(_QWORD *)(a1 + 16) = C3DStackAllocatorAllocateAligned(*(_QWORD *)a1, 80 * v3, 16, 0);
  memset(*(void **)(a1 + 8), 255, 8 * v3);
  bzero(*(void **)(a1 + 24), v4);
}

uint64_t C3D::Hash<C3D::PassIODescriptor,C3D::StackAllocator>::insert(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  __int16 *v14;
  unsigned int v15;
  __int16 v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  int v22;
  char v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  _OWORD *v27;
  _OWORD *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t result;
  _OWORD *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _OWORD *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  while (1)
  {
    v6 = *(_DWORD *)(a1 + 36);
    v7 = (v6 - 1) & a2;
    v8 = *(_QWORD *)(a1 + 24);
    v9 = *(unsigned __int16 *)(v8 + 2 * v7);
    if (v9 >= 2)
      break;
LABEL_6:
    v12 = v7 + 496;
    v13 = v6 + 15;
    if (v13 < (int)v7 + 496)
      v12 = v13;
    if (v7 >= v12)
    {
      v15 = v7;
    }
    else
    {
      v14 = (__int16 *)(v8 + 2 * v7);
      v15 = v7;
      while (1)
      {
        v16 = *v14++;
        if ((v16 & 1) == 0)
          break;
        if (v12 == ++v15)
          goto LABEL_33;
      }
    }
    if (v15 != v12)
    {
      *(_WORD *)(v8 + 2 * v15) |= 1u;
      if (v15 <= (int)v7 + 14)
      {
        v21 = v15;
      }
      else
      {
        while (2)
        {
          if (v15 >= 0xF)
            v17 = v15 - 14;
          else
            v17 = 0;
          v18 = v17 - 1;
          if (v17 <= v15)
            v19 = v15;
          else
            v19 = v17;
          v20 = 1;
          while (1)
          {
            v21 = v18 + 1;
            if (v17 <= v21)
              break;
LABEL_27:
            ++v20;
            v18 = v21;
            if ((_DWORD)v21 == v19)
              goto LABEL_32;
          }
          v22 = 1 << (v18 - v17 + 2);
          v23 = v20;
          v24 = v17;
          while (1)
          {
            v25 = v24;
            if (((unsigned __int16)v22 & *(_WORD *)(v8 + 2 * v24)) != 0)
              break;
            ++v24;
            LOWORD(v22) = (unsigned __int16)v22 >> 1;
            --v23;
            if (v25 + 1 > v21)
              goto LABEL_27;
          }
          if (v21 >= v15)
          {
LABEL_32:
            *(_WORD *)(v8 + 2 * v15) ^= 1u;
            goto LABEL_33;
          }
          v26 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v21);
          v27 = (_OWORD *)(v26 + 80 * v15);
          v28 = (_OWORD *)(v26 + 80 * v21);
          v29 = v28[1];
          v30 = v28[2];
          v31 = v28[4];
          v27[3] = v28[3];
          v27[4] = v31;
          v27[1] = v29;
          v27[2] = v30;
          *v27 = *v28;
          v8 = *(_QWORD *)(a1 + 24);
          *(_WORD *)(v8 + 2 * v24) = (*(_WORD *)(v8 + 2 * v24) | (1 << (v15 - v24 + 1))) ^ (1 << v23);
          v15 = v21;
          if (v21 > (int)v7 + 14)
            continue;
          break;
        }
        LOBYTE(v15) = v21;
      }
      v37 = (_OWORD *)(*(_QWORD *)(a1 + 16) + 80 * v21);
      *v37 = *a3;
      v38 = a3[1];
      v39 = a3[2];
      v40 = a3[4];
      v37[3] = a3[3];
      v37[4] = v40;
      v37[1] = v38;
      v37[2] = v39;
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v21) = a2;
      v41 = *(_QWORD *)(a1 + 24);
      *(_WORD *)(v41 + 2 * v21) |= 1u;
      result = 1;
      *(_WORD *)(v41 + 2 * v7) |= 1 << (v15 - v7 + 1);
      ++*(_DWORD *)(a1 + 32);
      return result;
    }
LABEL_33:
    C3D::Hash<C3D::PassIODescriptor,C3D::StackAllocator>::_grow(a1);
  }
  v10 = (v6 - 1) & a2;
  while ((v9 & 2) == 0 || *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v10) != a2)
  {
    ++v10;
    v11 = v9 > 3;
    v9 >>= 1;
    if (!v11)
      goto LABEL_6;
  }
  result = 0;
  v33 = (_OWORD *)(*(_QWORD *)(a1 + 16) + 80 * v10);
  *v33 = *a3;
  v34 = a3[1];
  v35 = a3[2];
  v36 = a3[4];
  v33[3] = a3[3];
  v33[4] = v36;
  v33[1] = v34;
  v33[2] = v35;
  return result;
}

void C3D::Hash<C3D::PassIODescriptor,C3D::StackAllocator>::_grow(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  __int16 *v4;
  int v5;
  uint64_t v6;
  __int16 v7;

  v3 = *(_QWORD **)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  v4 = *(__int16 **)(a1 + 24);
  v5 = *(_DWORD *)(a1 + 36);
  C3D::Hash<C3D::PassIODescriptor,C3D::StackAllocator>::_allocate(a1, 2 * v5);
  v6 = (v5 + 15);
  if ((_DWORD)v6)
  {
    do
    {
      v7 = *v4++;
      if ((v7 & 1) != 0)
        C3D::Hash<C3D::PassIODescriptor,C3D::StackAllocator>::insert(a1, *v3, v2);
      ++v3;
      v2 += 80;
      --v6;
    }
    while (v6);
  }
}

void C3D::Hash<C3D::FinalPass::RenderTarget,C3D::StackAllocator>::_grow(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  __int16 *v4;
  int v5;
  uint64_t v6;
  __int16 v7;

  v3 = *(_QWORD **)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  v4 = *(__int16 **)(a1 + 24);
  v5 = *(_DWORD *)(a1 + 36);
  C3D::Hash<C3D::FinalPass::RenderTarget,C3D::StackAllocator>::_allocate(a1, 2 * v5);
  v6 = (v5 + 15);
  if ((_DWORD)v6)
  {
    do
    {
      v7 = *v4++;
      if ((v7 & 1) != 0)
        C3D::Hash<C3D::FinalPass::RenderTarget,C3D::StackAllocator>::insert(a1, *v3, v2);
      ++v3;
      v2 += 24;
      --v6;
    }
    while (v6);
  }
}

void *std::get_temporary_buffer[abi:nn180100]<C3D::PassIODescriptor>(uint64_t a1)
{
  unint64_t v1;
  const std::nothrow_t *v2;
  void *result;
  BOOL v4;

  if (a1 < 1)
    return 0;
  if (a1 >= 0x199999999999999)
    v1 = 0x199999999999999;
  else
    v1 = a1;
  v2 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
  while (1)
  {
    result = operator new(80 * v1, v2);
    if (result)
      break;
    v4 = v1 > 1;
    v1 >>= 1;
    if (!v4)
      return 0;
  }
  return result;
}

__n128 std::__stable_sort<std::_ClassicAlgPolicy,C3D::FinalPass::_setupTechniquePassCommonData(C3D::Pass *,__C3DFXPass *,C3D::Hash<C3D::FinalPass::RenderTarget,C3D::StackAllocator> &,BOOL &)::$_1 &,C3D::PassIODescriptor *>(uint64_t a1, char *a2, unint64_t a3, uint64_t a4, uint64_t a5, __n128 result)
{
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  _OWORD *v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  __n128 v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __n128 v45;
  __int128 v46;
  __int128 v47;
  __n128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int16 v54;
  uint64_t v55;
  int v56;

  if (a3 >= 2)
  {
    v7 = a1;
    if (a3 == 2)
    {
      if (((*((unsigned __int16 *)a2 - 7) >> 7) & 1u) > ((*(unsigned __int16 *)(a1 + 66) >> 7) & 1u))
      {
        v49 = *(_OWORD *)(a1 + 32);
        v51 = *(_OWORD *)(a1 + 48);
        v53 = *(_OWORD *)(a1 + 64);
        v45 = *(__n128 *)a1;
        v47 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)a1 = *((_OWORD *)a2 - 5);
        v8 = *((_OWORD *)a2 - 1);
        v10 = *((_OWORD *)a2 - 4);
        v9 = *((_OWORD *)a2 - 3);
        *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 - 2);
        *(_OWORD *)(a1 + 64) = v8;
        *(_OWORD *)(a1 + 16) = v10;
        *(_OWORD *)(a1 + 32) = v9;
        *((_OWORD *)a2 - 2) = v51;
        *((_OWORD *)a2 - 1) = v53;
        result = v45;
        *((__n128 *)a2 - 5) = v45;
        *((_OWORD *)a2 - 4) = v47;
        *((_OWORD *)a2 - 3) = v49;
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      v25 = a4;
      v26 = a3 >> 1;
      v27 = a1 + 80 * (a3 >> 1);
      v28 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        v29 = std::__stable_sort_move<std::_ClassicAlgPolicy,C3D::FinalPass::_setupTechniquePassCommonData(C3D::Pass *,__C3DFXPass *,C3D::Hash<C3D::FinalPass::RenderTarget,C3D::StackAllocator> &,BOOL &)::$_1 &,C3D::PassIODescriptor *>(a1, v27, v28, a4, result);
        v30 = v25 + 80 * v26;
        result.n128_u64[0] = std::__stable_sort_move<std::_ClassicAlgPolicy,C3D::FinalPass::_setupTechniquePassCommonData(C3D::Pass *,__C3DFXPass *,C3D::Hash<C3D::FinalPass::RenderTarget,C3D::StackAllocator> &,BOOL &)::$_1 &,C3D::PassIODescriptor *>(v7 + 80 * (a3 >> 1), (uint64_t)a2, a3 - (a3 >> 1), v30, v29).n128_u64[0];
        v31 = v25 + 80 * a3;
        v32 = v30;
        while (v32 != v31)
        {
          if (((*(unsigned __int16 *)(v32 + 66) >> 7) & 1u) <= ((*(unsigned __int16 *)(v25 + 66) >> 7) & 1u))
          {
            *(_OWORD *)v7 = *(_OWORD *)v25;
            result = *(__n128 *)(v25 + 16);
            v35 = *(_OWORD *)(v25 + 32);
            v36 = *(_OWORD *)(v25 + 64);
            *(_OWORD *)(v7 + 48) = *(_OWORD *)(v25 + 48);
            *(_OWORD *)(v7 + 64) = v36;
            *(__n128 *)(v7 + 16) = result;
            *(_OWORD *)(v7 + 32) = v35;
            v25 += 80;
          }
          else
          {
            *(_OWORD *)v7 = *(_OWORD *)v32;
            result = *(__n128 *)(v32 + 16);
            v33 = *(_OWORD *)(v32 + 32);
            v34 = *(_OWORD *)(v32 + 64);
            *(_OWORD *)(v7 + 48) = *(_OWORD *)(v32 + 48);
            *(_OWORD *)(v7 + 64) = v34;
            *(__n128 *)(v7 + 16) = result;
            *(_OWORD *)(v7 + 32) = v33;
            v32 += 80;
          }
          v7 += 80;
          if (v25 == v30)
          {
            if (v32 != v31)
            {
              v37 = 0;
              do
              {
                v38 = v7 + v37;
                *(_OWORD *)v38 = *(_OWORD *)(v32 + v37);
                result = *(__n128 *)(v32 + v37 + 16);
                v39 = *(_OWORD *)(v32 + v37 + 32);
                v40 = *(_OWORD *)(v32 + v37 + 64);
                *(_OWORD *)(v38 + 48) = *(_OWORD *)(v32 + v37 + 48);
                *(_OWORD *)(v38 + 64) = v40;
                *(__n128 *)(v38 + 16) = result;
                *(_OWORD *)(v38 + 32) = v39;
                v37 += 80;
              }
              while (v32 + v37 != v31);
            }
            return result;
          }
        }
        if (v25 != v30)
        {
          v41 = 0;
          do
          {
            v42 = v7 + v41;
            *(_OWORD *)v42 = *(_OWORD *)(v25 + v41);
            result = *(__n128 *)(v25 + v41 + 16);
            v43 = *(_OWORD *)(v25 + v41 + 32);
            v44 = *(_OWORD *)(v25 + v41 + 64);
            *(_OWORD *)(v42 + 48) = *(_OWORD *)(v25 + v41 + 48);
            *(_OWORD *)(v42 + 64) = v44;
            *(__n128 *)(v42 + 16) = result;
            *(_OWORD *)(v42 + 32) = v43;
            v41 += 80;
          }
          while (v25 + v41 != v30);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,C3D::FinalPass::_setupTechniquePassCommonData(C3D::Pass *,__C3DFXPass *,C3D::Hash<C3D::FinalPass::RenderTarget,C3D::StackAllocator> &,BOOL &)::$_1 &,C3D::PassIODescriptor *>(a1, v27, v28, a4, a5);
        std::__stable_sort<std::_ClassicAlgPolicy,C3D::FinalPass::_setupTechniquePassCommonData(C3D::Pass *,__C3DFXPass *,C3D::Hash<C3D::FinalPass::RenderTarget,C3D::StackAllocator> &,BOOL &)::$_1 &,C3D::PassIODescriptor *>(v7 + 80 * (a3 >> 1), a2, a3 - (a3 >> 1), v25, a5);
        std::__inplace_merge<std::_ClassicAlgPolicy,C3D::FinalPass::_setupTechniquePassCommonData(C3D::Pass *,__C3DFXPass *,C3D::Hash<C3D::FinalPass::RenderTarget,C3D::StackAllocator> &,BOOL &)::$_1 &,C3D::PassIODescriptor *>((char *)v7, (char *)(v7 + 80 * (a3 >> 1)), a2, a3 >> 1, a3 - (a3 >> 1), (char *)v25, a5);
      }
    }
    else if ((char *)a1 != a2)
    {
      v12 = a1 + 80;
      if ((char *)(a1 + 80) != a2)
      {
        v13 = 0;
        v14 = a1;
        do
        {
          v15 = v12;
          v16 = *(unsigned __int16 *)(v14 + 146);
          v17 = (v16 >> 7) & 1;
          if (v17 > ((*(unsigned __int16 *)(v14 + 66) >> 7) & 1u))
          {
            v50 = *(_OWORD *)(v15 + 32);
            v52 = *(_OWORD *)(v15 + 48);
            v54 = *(_WORD *)(v15 + 64);
            v46 = *(_OWORD *)v15;
            v48 = *(__n128 *)(v15 + 16);
            v55 = *(_QWORD *)(v14 + 148);
            v18 = *(_DWORD *)(v14 + 156);
            v19 = v13;
            v56 = v18;
            while (1)
            {
              v20 = (_OWORD *)(a1 + v19);
              v21 = *(_OWORD *)(a1 + v19 + 48);
              v20[7] = *(_OWORD *)(a1 + v19 + 32);
              v20[8] = v21;
              v20[9] = *(_OWORD *)(a1 + v19 + 64);
              v22 = *(_OWORD *)(a1 + v19 + 16);
              v20[5] = *(_OWORD *)(a1 + v19);
              v20[6] = v22;
              if (!v19)
                break;
              v19 -= 80;
              if (v17 <= ((*((unsigned __int16 *)v20 - 7) >> 7) & 1u))
              {
                v23 = a1 + v19 + 80;
                goto LABEL_15;
              }
            }
            v23 = a1;
LABEL_15:
            *(_OWORD *)(v23 + 32) = v50;
            *(_OWORD *)(v23 + 48) = v52;
            *(_WORD *)(v23 + 64) = v54;
            result = v48;
            *(_OWORD *)v23 = v46;
            *(__n128 *)(v23 + 16) = v48;
            *(_WORD *)(v23 + 66) = v16;
            *(_QWORD *)(v23 + 68) = v55;
            *(_DWORD *)(v23 + 76) = v56;
          }
          v12 = v15 + 80;
          v13 += 80;
          v14 = v15;
        }
        while ((char *)(v15 + 80) != a2);
      }
    }
  }
  return result;
}

__n128 std::__stable_sort_move<std::_ClassicAlgPolicy,C3D::FinalPass::_setupTechniquePassCommonData(C3D::Pass *,__C3DFXPass *,C3D::Hash<C3D::FinalPass::RenderTarget,C3D::StackAllocator> &,BOOL &)::$_1 &,C3D::PassIODescriptor *>(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, __n128 result)
{
  uint64_t v5;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __n128 *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t v23;
  _OWORD *v24;
  _OWORD *v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;

  if (a3)
  {
    v5 = a4;
    v8 = a1;
    if (a3 == 2)
    {
      v11 = (__n128 *)(a2 - 80);
      if (((*(unsigned __int16 *)(a2 - 14) >> 7) & 1u) <= ((*(unsigned __int16 *)(a1 + 66) >> 7) & 1u))
      {
        *(_OWORD *)a4 = *(_OWORD *)a1;
        v33 = *(_OWORD *)(a1 + 16);
        v34 = *(_OWORD *)(a1 + 32);
        v35 = *(_OWORD *)(a1 + 64);
        *(_OWORD *)(a4 + 48) = *(_OWORD *)(a1 + 48);
        *(_OWORD *)(a4 + 64) = v35;
        *(_OWORD *)(a4 + 16) = v33;
        *(_OWORD *)(a4 + 32) = v34;
        v36 = *(_OWORD *)(a2 - 16);
        v38 = *(_OWORD *)(a2 - 64);
        v37 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a4 + 128) = *(_OWORD *)(a2 - 32);
        *(_OWORD *)(a4 + 144) = v36;
        *(_OWORD *)(a4 + 96) = v38;
        *(_OWORD *)(a4 + 112) = v37;
        result = *v11;
      }
      else
      {
        *(__n128 *)a4 = *v11;
        v12 = *(_OWORD *)(a2 - 64);
        v13 = *(_OWORD *)(a2 - 48);
        v14 = *(_OWORD *)(a2 - 16);
        *(_OWORD *)(a4 + 48) = *(_OWORD *)(a2 - 32);
        *(_OWORD *)(a4 + 64) = v14;
        *(_OWORD *)(a4 + 16) = v12;
        *(_OWORD *)(a4 + 32) = v13;
        v15 = *(_OWORD *)(a1 + 64);
        v17 = *(_OWORD *)(a1 + 16);
        v16 = *(_OWORD *)(a1 + 32);
        *(_OWORD *)(a4 + 128) = *(_OWORD *)(a1 + 48);
        *(_OWORD *)(a4 + 144) = v15;
        *(_OWORD *)(a4 + 96) = v17;
        *(_OWORD *)(a4 + 112) = v16;
        result = *(__n128 *)a1;
      }
      *(__n128 *)(a4 + 80) = result;
    }
    else if (a3 == 1)
    {
      *(_OWORD *)a4 = *(_OWORD *)a1;
      result = *(__n128 *)(a1 + 16);
      v9 = *(_OWORD *)(a1 + 32);
      v10 = *(_OWORD *)(a1 + 64);
      *(_OWORD *)(a4 + 48) = *(_OWORD *)(a1 + 48);
      *(_OWORD *)(a4 + 64) = v10;
      *(__n128 *)(a4 + 16) = result;
      *(_OWORD *)(a4 + 32) = v9;
    }
    else if ((uint64_t)a3 > 8)
    {
      v39 = a1 + 80 * (a3 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,C3D::FinalPass::_setupTechniquePassCommonData(C3D::Pass *,__C3DFXPass *,C3D::Hash<C3D::FinalPass::RenderTarget,C3D::StackAllocator> &,BOOL &)::$_1 &,C3D::PassIODescriptor *>(a1, v39, a3 >> 1, a4, a3 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,C3D::FinalPass::_setupTechniquePassCommonData(C3D::Pass *,__C3DFXPass *,C3D::Hash<C3D::FinalPass::RenderTarget,C3D::StackAllocator> &,BOOL &)::$_1 &,C3D::PassIODescriptor *>(v8 + 80 * (a3 >> 1), a2, a3 - (a3 >> 1), v5 + 80 * (a3 >> 1), a3 - (a3 >> 1));
      v40 = v8 + 80 * (a3 >> 1);
      while (v40 != a2)
      {
        if (((*(unsigned __int16 *)(v40 + 66) >> 7) & 1u) <= ((*(unsigned __int16 *)(v8 + 66) >> 7) & 1u))
        {
          *(_OWORD *)v5 = *(_OWORD *)v8;
          result = *(__n128 *)(v8 + 16);
          v43 = *(_OWORD *)(v8 + 32);
          v44 = *(_OWORD *)(v8 + 64);
          *(_OWORD *)(v5 + 48) = *(_OWORD *)(v8 + 48);
          *(_OWORD *)(v5 + 64) = v44;
          *(__n128 *)(v5 + 16) = result;
          *(_OWORD *)(v5 + 32) = v43;
          v8 += 80;
        }
        else
        {
          *(_OWORD *)v5 = *(_OWORD *)v40;
          result = *(__n128 *)(v40 + 16);
          v41 = *(_OWORD *)(v40 + 32);
          v42 = *(_OWORD *)(v40 + 64);
          *(_OWORD *)(v5 + 48) = *(_OWORD *)(v40 + 48);
          *(_OWORD *)(v5 + 64) = v42;
          *(__n128 *)(v5 + 16) = result;
          *(_OWORD *)(v5 + 32) = v41;
          v40 += 80;
        }
        v5 += 80;
        if (v8 == v39)
        {
          if (v40 != a2)
          {
            v45 = 0;
            do
            {
              v46 = v5 + v45;
              *(_OWORD *)v46 = *(_OWORD *)(v40 + v45);
              result = *(__n128 *)(v40 + v45 + 16);
              v47 = *(_OWORD *)(v40 + v45 + 32);
              v48 = *(_OWORD *)(v40 + v45 + 64);
              *(_OWORD *)(v46 + 48) = *(_OWORD *)(v40 + v45 + 48);
              *(_OWORD *)(v46 + 64) = v48;
              *(__n128 *)(v46 + 16) = result;
              *(_OWORD *)(v46 + 32) = v47;
              v45 += 80;
            }
            while (v40 + v45 != a2);
          }
          return result;
        }
      }
      if (v8 != v39)
      {
        v49 = 0;
        do
        {
          v50 = v5 + v49;
          *(_OWORD *)v50 = *(_OWORD *)(v8 + v49);
          result = *(__n128 *)(v8 + v49 + 16);
          v51 = *(_OWORD *)(v8 + v49 + 32);
          v52 = *(_OWORD *)(v8 + v49 + 64);
          *(_OWORD *)(v50 + 48) = *(_OWORD *)(v8 + v49 + 48);
          *(_OWORD *)(v50 + 64) = v52;
          *(__n128 *)(v50 + 16) = result;
          *(_OWORD *)(v50 + 32) = v51;
          v49 += 80;
        }
        while (v8 + v49 != v39);
      }
    }
    else if (a1 != a2)
    {
      *(_OWORD *)a4 = *(_OWORD *)a1;
      result = *(__n128 *)(a1 + 16);
      v18 = *(_OWORD *)(a1 + 32);
      v19 = *(_OWORD *)(a1 + 64);
      *(_OWORD *)(a4 + 48) = *(_OWORD *)(a1 + 48);
      *(_OWORD *)(a4 + 64) = v19;
      *(__n128 *)(a4 + 16) = result;
      *(_OWORD *)(a4 + 32) = v18;
      v20 = a1 + 80;
      if (a1 + 80 != a2)
      {
        v21 = 0;
        v22 = (_OWORD *)a4;
        do
        {
          v23 = v8;
          v24 = v22;
          v8 = v20;
          v22 += 5;
          v25 = v22;
          if (((*(unsigned __int16 *)(v23 + 146) >> 7) & 1u) > ((*((unsigned __int16 *)v24 + 33) >> 7) & 1u))
          {
            v26 = v24[3];
            v22[2] = v24[2];
            v22[3] = v26;
            v22[4] = v24[4];
            v27 = v24[1];
            *v22 = *v24;
            v22[1] = v27;
            v25 = (_OWORD *)a4;
            if (v24 != (_OWORD *)a4)
            {
              v28 = v21;
              while (1)
              {
                v25 = (_OWORD *)(a4 + v28);
                if (((*(unsigned __int16 *)(v23 + 146) >> 7) & 1u) <= ((*(unsigned __int16 *)(a4 + v28 - 14) >> 7) & 1u))
                  break;
                v29 = *(v25 - 2);
                v25[2] = *(v25 - 3);
                v25[3] = v29;
                v25[4] = *(v25 - 1);
                v30 = *(v25 - 4);
                *v25 = *(v25 - 5);
                v25[1] = v30;
                v28 -= 80;
                if (!v28)
                {
                  v25 = (_OWORD *)a4;
                  break;
                }
              }
            }
          }
          *v25 = *(_OWORD *)v8;
          result = *(__n128 *)(v8 + 16);
          v31 = *(_OWORD *)(v8 + 32);
          v32 = *(_OWORD *)(v8 + 64);
          v25[3] = *(_OWORD *)(v8 + 48);
          v25[4] = v32;
          v25[1] = result;
          v25[2] = v31;
          v20 = v8 + 80;
          v21 += 80;
        }
        while (v8 + 80 != a2);
      }
    }
  }
  return result;
}

char *std::__inplace_merge<std::_ClassicAlgPolicy,C3D::FinalPass::_setupTechniquePassCommonData(C3D::Pass *,__C3DFXPass *,C3D::Hash<C3D::FinalPass::RenderTarget,C3D::StackAllocator> &,BOOL &)::$_1 &,C3D::PassIODescriptor *>(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  char *v21;
  unsigned int v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  unint64_t v27;
  char *v28;
  unsigned int v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  char *v44;
  char *v45;
  unsigned int v46;
  unsigned int v47;
  BOOL v48;
  char *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  unint64_t v53;
  char *v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  char *v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  char *v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  char *v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  char *v74;
  char *v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;

  if (a5)
  {
    v8 = a5;
    while (v8 > a7 && a4 > a7)
    {
      if (!a4)
        return result;
      v10 = 0;
      v11 = -a4;
      while (1)
      {
        v12 = &result[v10];
        if (((*((unsigned __int16 *)a2 + 33) >> 7) & 1u) > ((*(unsigned __int16 *)&result[v10 + 66] >> 7) & 1u))
          break;
        v10 += 80;
        if (__CFADD__(v11++, 1))
          return result;
      }
      v14 = -v11;
      v74 = a3;
      v75 = a6;
      v76 = a7;
      if (-v11 >= v8)
      {
        if (v11 == -1)
        {
          v65 = &result[v10];
          v77 = *(_OWORD *)v65;
          v80 = *((_OWORD *)v65 + 3);
          v81 = *((_OWORD *)v65 + 4);
          v78 = *((_OWORD *)v65 + 1);
          v79 = *((_OWORD *)v65 + 2);
          v66 = *((_OWORD *)a2 + 4);
          v68 = *((_OWORD *)a2 + 1);
          v67 = *((_OWORD *)a2 + 2);
          *((_OWORD *)v65 + 3) = *((_OWORD *)a2 + 3);
          *((_OWORD *)v65 + 4) = v66;
          *((_OWORD *)v65 + 1) = v68;
          *((_OWORD *)v65 + 2) = v67;
          *(_OWORD *)v65 = *(_OWORD *)a2;
          *((_OWORD *)a2 + 3) = v80;
          *((_OWORD *)a2 + 4) = v81;
          *((_OWORD *)a2 + 1) = v78;
          *((_OWORD *)a2 + 2) = v79;
          *(_OWORD *)a2 = v77;
          return result;
        }
        if (v11 > 0)
          v14 = 1 - v11;
        v24 = v14 >> 1;
        if (a3 == a2)
        {
          v26 = a3;
        }
        else
        {
          v25 = 0xCCCCCCCCCCCCCCCDLL * ((a3 - a2) >> 4);
          v26 = a2;
          do
          {
            v27 = v25 >> 1;
            v28 = &v26[80 * (v25 >> 1)];
            v29 = (*((unsigned __int16 *)v28 + 33) >> 7) & 1;
            v30 = v28 + 80;
            v25 += ~(v25 >> 1);
            if (v29 > ((*(unsigned __int16 *)&result[80 * v24 + 66 + v10] >> 7) & 1u))
              v26 = v30;
            else
              v25 = v27;
          }
          while (v25);
        }
        v19 = &result[80 * v24 + v10];
        v16 = 0xCCCCCCCCCCCCCCCDLL * ((v26 - a2) >> 4);
      }
      else
      {
        if (v8 >= 0)
          v15 = v8;
        else
          v15 = v8 + 1;
        v16 = v15 >> 1;
        if (v12 == a2)
        {
          v17 = &result[v10];
          v19 = a2;
        }
        else
        {
          v17 = &result[v10];
          v18 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - result - v10) >> 4);
          v19 = v12;
          do
          {
            v20 = v18 >> 1;
            v21 = &v19[80 * (v18 >> 1)];
            v22 = (*((unsigned __int16 *)v21 + 33) >> 7) & 1;
            v23 = v21 + 80;
            v18 += ~(v18 >> 1);
            if (((*(unsigned __int16 *)&a2[80 * v16 + 66] >> 7) & 1u) > v22)
              v18 = v20;
            else
              v19 = v23;
          }
          while (v18);
        }
        v26 = &a2[80 * v16];
        v24 = 0xCCCCCCCCCCCCCCCDLL * ((v19 - v17) >> 4);
      }
      a4 = -(v24 + v11);
      v31 = v8 - v16;
      v32 = v16;
      v33 = std::__rotate[abi:nn180100]<std::_ClassicAlgPolicy,C3D::PassIODescriptor *,C3D::PassIODescriptor *>(v19, a2, v26);
      v34 = v32;
      v35 = v33;
      if (v24 + v34 >= v8 - (v24 + v34) - v11)
      {
        v37 = -(v24 + v11);
        v38 = v34;
        std::__inplace_merge<std::_ClassicAlgPolicy,C3D::FinalPass::_setupTechniquePassCommonData(C3D::Pass *,__C3DFXPass *,C3D::Hash<C3D::FinalPass::RenderTarget,C3D::StackAllocator> &,BOOL &)::$_1 &,C3D::PassIODescriptor *>(v33, v26, v74, v37, v31, v75, v76);
        v26 = v19;
        a6 = v75;
        v31 = v38;
        a4 = v24;
        a3 = v35;
      }
      else
      {
        v36 = v19;
        a6 = v75;
        std::__inplace_merge<std::_ClassicAlgPolicy,C3D::FinalPass::_setupTechniquePassCommonData(C3D::Pass *,__C3DFXPass *,C3D::Hash<C3D::FinalPass::RenderTarget,C3D::StackAllocator> &,BOOL &)::$_1 &,C3D::PassIODescriptor *>(v12, v36, v33, v24, v34, v75, v76);
        v12 = v35;
        a3 = v74;
      }
      v8 = v31;
      result = v12;
      a2 = v26;
      a7 = v76;
      if (!v31)
        return result;
    }
    if (a4 <= v8)
    {
      if (result != a2)
      {
        v53 = 0;
        do
        {
          v54 = &a6[v53];
          *(_OWORD *)v54 = *(_OWORD *)&result[v53];
          v55 = *(_OWORD *)&result[v53 + 16];
          v56 = *(_OWORD *)&result[v53 + 32];
          v57 = *(_OWORD *)&result[v53 + 64];
          *((_OWORD *)v54 + 3) = *(_OWORD *)&result[v53 + 48];
          *((_OWORD *)v54 + 4) = v57;
          *((_OWORD *)v54 + 1) = v55;
          *((_OWORD *)v54 + 2) = v56;
          v53 += 80;
        }
        while (&result[v53] != a2);
        if (v53)
        {
          v58 = a6;
          while (a2 != a3)
          {
            if (((*((unsigned __int16 *)a2 + 33) >> 7) & 1u) <= ((*((unsigned __int16 *)v58 + 33) >> 7) & 1u))
            {
              *(_OWORD *)result = *(_OWORD *)v58;
              v62 = *((_OWORD *)v58 + 1);
              v63 = *((_OWORD *)v58 + 2);
              v64 = *((_OWORD *)v58 + 4);
              *((_OWORD *)result + 3) = *((_OWORD *)v58 + 3);
              *((_OWORD *)result + 4) = v64;
              *((_OWORD *)result + 1) = v62;
              *((_OWORD *)result + 2) = v63;
              v58 += 80;
            }
            else
            {
              *(_OWORD *)result = *(_OWORD *)a2;
              v59 = *((_OWORD *)a2 + 1);
              v60 = *((_OWORD *)a2 + 2);
              v61 = *((_OWORD *)a2 + 4);
              *((_OWORD *)result + 3) = *((_OWORD *)a2 + 3);
              *((_OWORD *)result + 4) = v61;
              *((_OWORD *)result + 1) = v59;
              *((_OWORD *)result + 2) = v60;
              a2 += 80;
            }
            result += 80;
            if (&a6[v53] == v58)
              return result;
          }
          return (char *)memmove(result, v58, a6 - v58 + v53);
        }
      }
    }
    else if (a2 != a3)
    {
      v39 = 0;
      do
      {
        v40 = &a6[v39];
        *(_OWORD *)v40 = *(_OWORD *)&a2[v39];
        v41 = *(_OWORD *)&a2[v39 + 16];
        v42 = *(_OWORD *)&a2[v39 + 32];
        v43 = *(_OWORD *)&a2[v39 + 64];
        *((_OWORD *)v40 + 3) = *(_OWORD *)&a2[v39 + 48];
        *((_OWORD *)v40 + 4) = v43;
        *((_OWORD *)v40 + 1) = v41;
        *((_OWORD *)v40 + 2) = v42;
        v39 += 80;
      }
      while (&a2[v39] != a3);
      if (v39)
      {
        v44 = &a6[v39];
        v45 = a3 - 80;
        while (a2 != result)
        {
          v46 = (*((unsigned __int16 *)v44 - 7) >> 7) & 1;
          v47 = (*((unsigned __int16 *)a2 - 7) >> 7) & 1;
          v48 = v46 > v47;
          if (v46 <= v47)
            v49 = v44 - 80;
          else
            v49 = a2 - 80;
          if (v48)
            a2 -= 80;
          else
            v44 -= 80;
          v50 = *((_OWORD *)v49 + 4);
          v52 = *((_OWORD *)v49 + 1);
          v51 = *((_OWORD *)v49 + 2);
          *((_OWORD *)v45 + 3) = *((_OWORD *)v49 + 3);
          *((_OWORD *)v45 + 4) = v50;
          *((_OWORD *)v45 + 1) = v52;
          *((_OWORD *)v45 + 2) = v51;
          *(_OWORD *)v45 = *(_OWORD *)v49;
          v45 -= 80;
          if (v44 == a6)
            return result;
        }
        v69 = 0;
        do
        {
          v70 = &v45[v69];
          *(_OWORD *)v70 = *(_OWORD *)&v44[v69 - 80];
          v71 = *(_OWORD *)&v44[v69 - 64];
          v72 = *(_OWORD *)&v44[v69 - 48];
          v73 = *(_OWORD *)&v44[v69 - 16];
          *((_OWORD *)v70 + 3) = *(_OWORD *)&v44[v69 - 32];
          *((_OWORD *)v70 + 4) = v73;
          *((_OWORD *)v70 + 1) = v71;
          *((_OWORD *)v70 + 2) = v72;
          v69 -= 80;
        }
        while (&v44[v69] != a6);
      }
    }
  }
  return result;
}

char *std::__rotate[abi:nn180100]<std::_ClassicAlgPolicy,C3D::PassIODescriptor *,C3D::PassIODescriptor *>(char *__src, char *a2, char *a3)
{
  char *v4;
  int64_t v6;
  size_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v4 = a3;
  if (__src != a2)
  {
    if (a2 == a3)
    {
      return __src;
    }
    else if (__src + 80 == a2)
    {
      v13 = *((_OWORD *)__src + 2);
      v15 = *((_OWORD *)__src + 3);
      v17 = *((_OWORD *)__src + 4);
      v9 = *(_OWORD *)__src;
      v11 = *((_OWORD *)__src + 1);
      v6 = a3 - a2;
      memmove(__src, a2, a3 - a2);
      v4 = &__src[v6];
      *((_OWORD *)v4 + 2) = v13;
      *((_OWORD *)v4 + 3) = v15;
      *((_OWORD *)v4 + 4) = v17;
      *(_OWORD *)v4 = v9;
      *((_OWORD *)v4 + 1) = v11;
    }
    else if (a2 + 80 == a3)
    {
      v4 = __src + 80;
      v14 = *((_OWORD *)a3 - 3);
      v16 = *((_OWORD *)a3 - 2);
      v18 = *((_OWORD *)a3 - 1);
      v10 = *((_OWORD *)a3 - 5);
      v12 = *((_OWORD *)a3 - 4);
      v7 = a3 - 80 - __src;
      if (a3 - 80 != __src)
        memmove(__src + 80, __src, v7);
      *((_OWORD *)__src + 2) = v14;
      *((_OWORD *)__src + 3) = v16;
      *((_OWORD *)__src + 4) = v18;
      *(_OWORD *)__src = v10;
      *((_OWORD *)__src + 1) = v12;
    }
    else
    {
      return (char *)std::__rotate_gcd[abi:nn180100]<std::_ClassicAlgPolicy,C3D::PassIODescriptor *>(__src, a2, a3);
    }
  }
  return v4;
}

_OWORD *std::__rotate_gcd[abi:nn180100]<std::_ClassicAlgPolicy,C3D::PassIODescriptor *>(_OWORD *a1, _OWORD *a2, _OWORD *a3)
{
  unint64_t v3;
  uint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _OWORD *v19;
  _OWORD *v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unint64_t v25;
  BOOL v26;
  char v27;
  uint64_t v28;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;

  v3 = 0xCCCCCCCCCCCCCCCDLL * (a2 - a1);
  if (v3 == 0xCCCCCCCCCCCCCCCDLL * (a3 - a2))
  {
    if (a1 != a2 && a2 != a3)
    {
      v4 = 0;
      do
      {
        v5 = &a2[v4];
        v6 = &a1[v4];
        v33 = a1[v4 + 2];
        v35 = a1[v4 + 3];
        v37 = a1[v4 + 4];
        v30 = a1[v4];
        v31 = a1[v4 + 1];
        *v6 = a2[v4];
        v7 = a2[v4 + 4];
        v9 = a2[v4 + 1];
        v8 = a2[v4 + 2];
        v6[3] = a2[v4 + 3];
        v6[4] = v7;
        v6[1] = v9;
        v6[2] = v8;
        v5[3] = v35;
        v5[4] = v37;
        *v5 = v30;
        v5[1] = v31;
        v5[2] = v33;
        if (&a1[v4 + 5] == a2)
          break;
        v4 += 5;
      }
      while (v5 + 5 != a3);
    }
  }
  else
  {
    v10 = 0xCCCCCCCCCCCCCCCDLL * (a3 - a2);
    v11 = 0xCCCCCCCCCCCCCCCDLL * (a2 - a1);
    do
    {
      v12 = v11;
      v11 = v10;
      v10 = v12 % v10;
    }
    while (v10);
    if (v11)
    {
      v13 = &a1[5 * v11];
      do
      {
        v14 = *(v13 - 3);
        v15 = *(v13 - 2);
        v16 = *(v13 - 1);
        v18 = *(v13 - 5);
        v17 = *(v13 - 4);
        v13 -= 5;
        v34 = v14;
        v36 = v15;
        v32 = v17;
        v19 = &v13[a2 - a1];
        v20 = v13;
        do
        {
          v21 = v20;
          v20 = v19;
          *v21 = *v19;
          v22 = v19[1];
          v23 = v19[2];
          v24 = v19[4];
          v21[3] = v19[3];
          v21[4] = v24;
          v21[1] = v22;
          v21[2] = v23;
          v25 = 0xCCCCCCCCCCCCCCCDLL * (a3 - v19);
          v26 = __OFSUB__(v3, v25);
          v28 = v3 - v25;
          v27 = (v28 < 0) ^ v26;
          v19 = &a1[5 * v28];
          if (v27)
            v19 = &v20[a2 - a1];
        }
        while (v19 != v13);
        *v20 = v18;
        v20[3] = v36;
        v20[4] = v16;
        v20[1] = v32;
        v20[2] = v34;
      }
      while (v13 != a1);
    }
    return &a1[a3 - a2];
  }
  return a2;
}

uint64_t C3D::Array<C3D::PassIODescriptor,0u,C3D::StackAllocator>::operator[](uint64_t a1, unsigned int a2)
{
  NSObject *v4;
  int v6;
  int v7;
  const char *v8;
  __int16 v9;
  uint64_t v10;
  __int16 v11;
  unsigned int v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
    {
      v6 = *(_DWORD *)(a1 + 8);
      v7 = 136315906;
      v8 = "i < size()";
      v9 = 2048;
      v10 = a1;
      v11 = 1024;
      v12 = a2;
      v13 = 1024;
      v14 = v6;
      _os_log_fault_impl(&dword_1DCCB8000, v4, OS_LOG_TYPE_FAULT, "Assertion '%s' failed. Out of bound Array:%p access %d size %d", (uint8_t *)&v7, 0x22u);
    }
  }
  return *(_QWORD *)(a1 + 16) + 80 * a2;
}

void OUTLINED_FUNCTION_2(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, a5, 2u);
}

_BYTE *OUTLINED_FUNCTION_3(_BYTE *result, _BYTE *a2)
{
  *result = 0;
  *a2 = 0;
  return result;
}

uint64_t C3DAnimationClusterKeyframesCreate()
{
  if (C3DAnimationClusterKeyframesGetTypeID_onceToken != -1)
    dispatch_once(&C3DAnimationClusterKeyframesGetTypeID_onceToken, &__block_literal_global_15);
  return C3DTypeCreateInstance_(C3DAnimationClusterKeyframesGetTypeID_typeID, 0x40uLL);
}

uint64_t C3DAnimationClusterCreate()
{
  if (C3DAnimationClusterGetTypeID_onceToken != -1)
    dispatch_once(&C3DAnimationClusterGetTypeID_onceToken, &__block_literal_global_2);
  return C3DTypeCreateInstance_(C3DAnimationClusterGetTypeID_typeID, 0xA0uLL);
}

uint64_t C3DKeyframeAnimationCreateWithClusteredKeyframe(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  char Semantic;
  const void *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char v12;
  unint64_t v13;

  v4 = C3DKeyframedAnimationCreate();
  v5 = *(_DWORD *)(a1 + 16);
  v6 = *(__int16 *)(*(_QWORD *)(a1 + 32) + 2 * a2);
  Semantic = C3DKeyFrameInterpolatorGetSemantic(*(double (**)(float32x4_t *, float32x4_t *, double, double, double, double, double, double, float32x4_t, uint64_t, uint64_t, uint64_t, int, float32x4_t *))(*(_QWORD *)(a1 + 48) + 8 * a2));
  v8 = (const void *)C3DKeyframeControllerCreateWithCapacity(v5, v6, Semantic, 0, 0, 0, 0);
  v9 = *(char **)(a1 + 64);
  if (a2 >= 1)
  {
    v10 = *(char **)(a1 + 40);
    v11 = a2;
    do
    {
      v12 = *v10++;
      v9 += (v12 + 15) & 0xF0;
      --v11;
    }
    while (v11);
  }
  if (*(_DWORD *)(a1 + 16))
  {
    v13 = 0;
    do
    {
      C3DKeyframeControllerSetKeyframeAtIndex((uint64_t)v8, v13, v9, 0, 0, 0, 0, *(float *)(*(_QWORD *)(a1 + 56) + 4 * v13), 0.0, 0.0, 0.0);
      v9 += *(unsigned int *)(a1 + 24);
      ++v13;
    }
    while (v13 < *(unsigned int *)(a1 + 16));
  }
  C3DAnimationSetKeyPath(v4, *(CFTypeRef *)(*(_QWORD *)(a1 + 72) + 8 * a2));
  C3DKeyframedAnimationSetController(v4, v8);
  CFRelease(v8);
  return v4;
}

__n128 *C3DAnimationGroupCreateWithAnimationCluster(uint64_t a1)
{
  __n128 *v2;
  const void *ID;
  float Duration;
  uint64_t v5;
  float v6;
  uint64_t i;
  void *v8;

  v2 = (__n128 *)C3DAnimationGroupCreate();
  C3DAnimationCopySettingsToAnimation(a1, v2);
  ID = (const void *)C3DEntityGetID(a1);
  C3DEntitySetID((uint64_t)v2, ID);
  Duration = C3DAnimationGetDuration(a1);
  v5 = *(unsigned int *)(*(_QWORD *)(a1 + 168) + 20);
  if ((_DWORD)v5)
  {
    v6 = Duration;
    for (i = 0; i != v5; ++i)
    {
      v8 = (void *)C3DKeyframeAnimationCreateWithClusteredKeyframe(*(_QWORD *)(a1 + 168), i);
      C3DAnimationSetDuration((uint64_t)v8, v6);
      C3DAnimationGroupAddAnimation((uint64_t)v2, v8);
      CFRelease(v8);
    }
  }
  return v2;
}

__n128 *C3DAnimationClusterCreateWithAnimationGroup(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  __n128 *Instance;
  const void *ID;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  float Duration;
  double v14;
  unsigned int v16;
  double v17;
  uint64_t v18;
  uint64_t *v19;
  double v20;
  uint64_t v21;
  double v22;
  char v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  double v45;
  double v46;
  uint64_t v47;
  uint64_t *v48;
  double v49;
  uint64_t v50;
  double v51;
  float v52;
  unint64_t v53;
  uint64_t v54;
  double v55;
  NSObject *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66[5];

  v66[4] = *MEMORY[0x1E0C80C00];
  if ((C3DWasLinkedBeforeMajorOSYear2017() & 1) != 0)
    return 0;
  if (!_checkCompatibility(a1))
  {
    C3DAnimationGroupGetAnimationCount(a1);
    return 0;
  }
  v2 = _countAnimation(a1);
  if (v2 < 3)
    return 0;
  v3 = v2;
  if (C3DAnimationClusterGetTypeID_onceToken != -1)
    dispatch_once(&C3DAnimationClusterGetTypeID_onceToken, &__block_literal_global_2);
  Instance = (__n128 *)C3DTypeCreateInstance_(C3DAnimationClusterGetTypeID_typeID, 0xA0uLL);
  ID = (const void *)C3DEntityGetID(a1);
  C3DEntitySetID((uint64_t)Instance, ID);
  Instance[10].n128_u64[1] = C3DAnimationClusterKeyframesCreate();
  C3DAnimationCommonInit((uint64_t)Instance);
  v6 = Instance[10].n128_u64[1];
  *(_DWORD *)(v6 + 20) = v3;
  v7 = v3;
  *(_QWORD *)(v6 + 32) = malloc_type_malloc(2 * v3, 0x1000040BDFB0063uLL);
  *(_QWORD *)(v6 + 40) = malloc_type_malloc(v3, 0x100004077774924uLL);
  v64 = v3;
  *(_QWORD *)(v6 + 48) = malloc_type_malloc(8 * v3, 0x80040B8603338uLL);
  *(_QWORD *)(v6 + 72) = malloc_type_malloc(8 * v3, 0x6004044C4A2DFuLL);
  v8 = (uint64_t *)malloc_type_malloc(8 * *(unsigned int *)(v6 + 20), 0x2004093837F09uLL);
  v66[0] = 0;
  _getAnimations(a1, (uint64_t)v8, v66);
  v9 = 0;
  for (i = 0; i != v7; ++i)
  {
    v11 = v8[i];
    *(_QWORD *)(*(_QWORD *)(v6 + 72) + 8 * i) = C3DAnimationGetKeyPath(v11);
    CFRetain(*(CFTypeRef *)(*(_QWORD *)(v6 + 72) + 8 * i));
    v12 = *(_QWORD *)(v11 + 168);
    *(_WORD *)(*(_QWORD *)(v6 + 32) + 2 * i) = *(_WORD *)(v12 + 28);
    *(_BYTE *)(*(_QWORD *)(v6 + 40) + i) = *(_BYTE *)(v12 + 30);
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * i) = *(_QWORD *)(*(_QWORD *)(v11 + 168) + 32);
    v9 += (*(_BYTE *)(*(_QWORD *)(v6 + 40) + i) + 15) & 0xF0;
  }
  *(_DWORD *)(v6 + 24) = v9;
  Duration = C3DAnimationGetDuration(a1);
  v14 = Duration;
  v65 = a1;
  if (Duration < 0.0)
  {
    v66[0] = v7;
LABEL_24:
    v24 = scn_default_log();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_FAULT))
      C3DAnimationClusterCreateWithAnimationGroup_cold_4(v24, v25, v26, v27, v28, v29, v30, v31);
    v16 = 0;
    v23 = 1;
    goto LABEL_27;
  }
  v16 = 0;
  v17 = 0.0;
  do
  {
    v18 = v7;
    v19 = v8;
    v20 = Duration;
    do
    {
      v21 = *v19++;
      _getNextKeyTime(v21, v17, v14);
      if (v22 < v20)
        v20 = v22;
      --v18;
    }
    while (v18);
    if (v20 >= v17 + 0.00833333333)
      v17 = v20;
    else
      v17 = v17 + 0.00833333333;
    ++v16;
  }
  while (v17 <= v14);
  v66[0] = v7;
  if (!v16)
    goto LABEL_24;
  v23 = 0;
LABEL_27:
  *(_DWORD *)(v6 + 16) = v16;
  v32 = v16;
  *(_QWORD *)(v6 + 56) = malloc_type_malloc(4 * v16, 0x100004052888210uLL);
  if (Duration >= 0.0)
  {
    v33 = 0;
    v45 = 0.0;
    do
    {
      v46 = v45;
      v47 = v7;
      v48 = v8;
      v49 = Duration;
      do
      {
        v50 = *v48++;
        _getNextKeyTime(v50, v46, v14);
        if (v51 < v49)
          v49 = v51;
        --v47;
      }
      while (v47);
      v45 = v46 + 0.00833333333;
      if (v49 >= v46 + 0.00833333333)
        v45 = v49;
      v52 = v46;
      *(float *)(*(_QWORD *)(v6 + 56) + 4 * v33++) = v52;
    }
    while (v45 <= v14);
  }
  else
  {
    LODWORD(v33) = 0;
  }
  if ((_DWORD)v33 != (_DWORD)v32)
  {
    v34 = scn_default_log();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_FAULT))
      C3DAnimationClusterCreateWithAnimationGroup_cold_2(v34, v35, v36, v37, v38, v39, v40, v41);
  }
  v42 = (char *)malloc_type_malloc(v9 * v32, 0x2528734CuLL);
  v43 = (uint64_t)v42;
  *(_QWORD *)(v6 + 64) = v42;
  v66[0] = 0;
  if ((v23 & 1) != 0)
  {
    v44 = v42;
  }
  else
  {
    v53 = 0;
    do
    {
      v54 = 0;
      v55 = *(float *)(*(_QWORD *)(v6 + 56) + 4 * v53);
      do
      {
        C3DKeyframeControllerEvaluateAtTime(*(_QWORD *)(v8[v54] + 168), 0, 0, v43, v55);
        v43 += (*(_BYTE *)(*(_QWORD *)(v6 + 40) + v54++) + 15) & 0xF0;
      }
      while (v64 != v54);
      v53 = v66[0] + 1;
      v66[0] = v53;
    }
    while (v53 < v32);
    v44 = *(char **)(v6 + 64);
  }
  if ((char *)v43 != &v44[v9 * v32])
  {
    v56 = scn_default_log();
    if (os_log_type_enabled(v56, OS_LOG_TYPE_FAULT))
      C3DAnimationClusterCreateWithAnimationGroup_cold_1(v56, v57, v58, v59, v60, v61, v62, v63);
  }
  free(v8);
  Instance[4].n128_f32[2] = Duration;
  C3DAnimationCopySettingsToAnimation(v65, Instance);
  return Instance;
}

BOOL _checkCompatibility(uint64_t a1)
{
  CFIndex AnimationCount;
  BOOL v3;
  _WORD *AnimationAtIndex;
  _WORD *v6;
  CFIndex v7;
  CFTypeID v8;
  uint64_t Controller;

  if ((*(_WORD *)(a1 + 84) & 6) != 0)
    return 0;
  AnimationCount = C3DAnimationGroupGetAnimationCount(a1);
  if (C3DAnimationGetDuration(a1) == 0.0)
    return 0;
  if (AnimationCount < 1)
    return 1;
  AnimationAtIndex = C3DAnimationGroupGetAnimationAtIndex(a1, 0);
  if ((AnimationAtIndex[42] & 6) != 0)
  {
    return 0;
  }
  else
  {
    v6 = AnimationAtIndex;
    v3 = 0;
    v7 = 1;
    while (C3DAnimationNodeGetPauseTime((uint64_t)v6) == 0.0
         && C3DAnimationGetTimeOffset((uint64_t)v6) == 0.0
         && C3DAnimationGetDuration((uint64_t)v6) != 0.0)
    {
      if (C3DAnimationIsGroup(v6))
      {
        if ((_checkCompatibility(v6) & 1) == 0)
          return v3;
      }
      else
      {
        v8 = CFGetTypeID(v6);
        if (v8 != C3DKeyframedAnimationGetTypeID())
          return v3;
        Controller = C3DKeyframedAnimationGetController((uint64_t)v6);
        if (C3DKeyframeControllerHasTCB(Controller)
          || C3DKeyframeControllerGetDefaultInterpolationMode(Controller)
          || C3DKeyframeControllerGetCalculationMode(Controller)
          || C3DKeyframeControllerHasInterpolationModesPerKey(Controller)
          || C3DKeyframeControllerHasTimingFunctions(Controller)
          || *(_QWORD *)(Controller + 96))
        {
          return v3;
        }
      }
      v3 = v7 >= AnimationCount;
      if (AnimationCount != v7)
      {
        v6 = C3DAnimationGroupGetAnimationAtIndex(a1, v7++);
        if ((v6[42] & 6) == 0)
          continue;
      }
      return v3;
    }
  }
  return v3;
}

uint64_t _countAnimation(uint64_t a1)
{
  CFIndex AnimationCount;
  CFIndex v3;
  CFIndex v4;
  uint64_t v5;
  const void *AnimationAtIndex;
  int v7;

  AnimationCount = C3DAnimationGroupGetAnimationCount(a1);
  if (AnimationCount < 1)
    return 0;
  v3 = AnimationCount;
  v4 = 0;
  LODWORD(v5) = 0;
  do
  {
    AnimationAtIndex = C3DAnimationGroupGetAnimationAtIndex(a1, v4);
    if (C3DAnimationIsGroup(AnimationAtIndex))
      v7 = _countAnimation(AnimationAtIndex);
    else
      v7 = 1;
    v5 = (v7 + v5);
    ++v4;
  }
  while (v3 != v4);
  return v5;
}

void _getAnimations(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  CFIndex AnimationCount;
  CFIndex v7;
  CFIndex i;
  const void *AnimationAtIndex;
  CFTypeID v10;
  NSObject *v11;
  uint64_t v12;
  uint8_t v13[4];
  _DWORD v14[7];

  *(_QWORD *)&v14[5] = *MEMORY[0x1E0C80C00];
  AnimationCount = C3DAnimationGroupGetAnimationCount(a1);
  if (AnimationCount >= 1)
  {
    v7 = AnimationCount;
    for (i = 0; i != v7; ++i)
    {
      AnimationAtIndex = C3DAnimationGroupGetAnimationAtIndex(a1, i);
      if (C3DAnimationIsGroup(AnimationAtIndex))
      {
        _getAnimations(AnimationAtIndex, a2, a3);
      }
      else
      {
        v10 = CFGetTypeID(AnimationAtIndex);
        if (v10 != C3DKeyframedAnimationGetTypeID())
        {
          v11 = scn_default_log();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
            _getAnimations_cold_1(v13, v14, v11);
        }
        v12 = *a3;
        *(_QWORD *)(a2 + 8 * *a3) = AnimationAtIndex;
        *a3 = v12 + 1;
      }
    }
  }
}

void _getNextKeyTime(uint64_t a1, double a2, double a3)
{
  uint64_t v3;
  double v4;
  float v5;
  unsigned int v6;
  float v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;

  v3 = *(_QWORD *)(a1 + 168);
  v4 = a2 / a3 * *(double *)(v3 + 16);
  v5 = v4 + 0.00001;
  v16 = v5;
  v6 = C3DPreviousKeyFrameIndexForTime(*(float **)(v3 + 40), *(_DWORD *)(v3 + 24), &v16);
  if (v6 < *(_DWORD *)(v3 + 24) - 1)
  {
    v7 = v4;
    if (*(float *)(*(_QWORD *)(v3 + 40) + 4 * (v6 + 1)) < v7)
    {
      v8 = scn_default_log();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
        _getNextKeyTime_cold_1(v8, v9, v10, v11, v12, v13, v14, v15);
    }
  }
}

CFTypeRef C3DAnimationClusterCopy(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  CFTypeRef result;

  if (!a1 && (v4 = scn_default_log(), os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)))
  {
    C3DAnimationClusterCopy_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v12 = scn_default_log();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    C3DAnimationClusterCopy_cold_1(v12, v13, v14, v15, v16, v17, v18, v19);
LABEL_6:
  result = *(CFTypeRef *)(a1 + 168);
  if (result)
    result = CFRetain(result);
  *(_QWORD *)(a2 + 168) = result;
  return result;
}

__CFArray *C3DAnimationClusterCopyKeyPaths(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  __CFArray *Mutable;
  uint64_t v5;
  uint64_t v6;
  const __CFArray *v7;
  const __CFArray *v8;

  v1 = *(_QWORD *)(a1 + 168);
  if (!v1)
    return 0;
  v2 = *(unsigned int *)(v1 + 20);
  if (!(_DWORD)v2)
    return 0;
  Mutable = CFArrayCreateMutable(0, *(unsigned int *)(v1 + 20), MEMORY[0x1E0C9B378]);
  v5 = 0;
  v6 = 8 * v2;
  do
  {
    v7 = C3DCreatePathFromComponents(*(const __CFArray **)(*(_QWORD *)(*(_QWORD *)(a1 + 168) + 72) + v5));
    if (v7)
    {
      v8 = v7;
      CFArrayAppendValue(Mutable, v7);
      CFRelease(v8);
    }
    v5 += 8;
  }
  while (v6 != v5);
  return Mutable;
}

void _C3DAnimationClusterKeyframesCFFinalize(uint64_t a1)
{
  unint64_t v2;
  unint64_t i;
  const void *v4;

  free(*(void **)(a1 + 32));
  free(*(void **)(a1 + 40));
  free(*(void **)(a1 + 48));
  free(*(void **)(a1 + 56));
  free(*(void **)(a1 + 64));
  v2 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v2)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(const void **)(*(_QWORD *)(a1 + 72) + 8 * i);
      if (v4)
      {
        CFRelease(v4);
        *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * i) = 0;
        v2 = *(unsigned int *)(a1 + 20);
      }
    }
  }
  free(*(void **)(a1 + 72));
}

CFStringRef _C3DAnimationClusterKeyframesCFCopyFormatDescription(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DAnimationClusterKeyframes %p>"), a1);
}

CFStringRef _C3DAnimationClusterKeyframesCFCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DAnimationClusterKeyframes %p>"), a1);
}

void _C3DAnimationClusterCFFinalize(_QWORD *a1)
{
  const void *v2;

  _C3DAnimationCFFinalize(a1);
  v2 = (const void *)a1[21];
  if (v2)
  {
    CFRelease(v2);
    a1[21] = 0;
  }
}

CFStringRef _C3DAnimationClusterCFCopyFormatDescription(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DAnimationCluster %p>"), a1);
}

CFStringRef _C3DAnimationClusterCFCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DAnimationCluster %p>"), a1);
}

uint64_t _C3DAnimationClusterInitWithPropertyList()
{
  return 1;
}

uint64_t _C3DAnimationClusterCopyPropertyList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 *v16;
  __n128 *v17;
  uint64_t v18;

  if (!a1)
  {
    v8 = scn_default_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      _C3DGeometryFillLibraryForSerialization_cold_1(v8, v9, v10, v11, v12, v13, v14, v15);
  }
  v16 = C3DAnimationGroupCreateWithAnimationCluster(a1);
  if (!v16)
    return 0;
  v17 = v16;
  v18 = C3DCopyPropertyList(v16, a2, a3, a4);
  CFRelease(v17);
  return v18;
}

float32x2_t C3DVector3RotateAndScale(float32x2_t *a1, float32x4_t _Q0)
{
  _S2 = a1[5].i32[0];
  __asm { FMLA            S3, S2, V0.S[2] }
  return vmla_laneq_f32(vmla_n_f32(vmul_lane_f32(a1[2], *(float32x2_t *)_Q0.f32, 1), *a1, _Q0.f32[0]), a1[4], _Q0, 2);
}

double C3DVector3Rescale(float32x4_t a1, float a2)
{
  float32x4_t v2;
  float v3;
  float v4;

  v2 = vmulq_f32(a1, a1);
  v3 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v2, 2), vaddq_f32(v2, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v2.f32, 1))).f32[0];
  if (v3 != 0.0)
  {
    v4 = sqrtf(v3);
    if (v4 != a2)
      a1.i64[0] = vmulq_n_f32(a1, a2 / v4).u64[0];
  }
  return *(double *)a1.i64;
}

float32x2_t C3DVector3EulerRotate(float32x4_t a1, __n128 a2)
{
  float32x2_t result;
  float32x4_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 v15;

  v15 = a2;
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  C3DMatrix4x4MakeEulerRotation(&v11, &v15);
  _S3 = DWORD2(v13);
  _V6.S[2] = a1.u32[2];
  result = vmla_laneq_f32(vmla_n_f32(vmul_lane_f32(*(float32x2_t *)&v12, *(float32x2_t *)a1.f32, 1), *(float32x2_t *)v11.f32, a1.f32[0]), *(float32x2_t *)&v13, a1, 2);
  __asm { FMLA            S2, S3, V6.S[2] }
  return result;
}

float C3DVector3Angle(float32x4_t a1, float32x4_t a2)
{
  float32x4_t v2;
  float32x4_t v3;
  float v4;
  float32x4_t v5;
  float v6;
  float v7;

  v2 = vmulq_f32(a1, a1);
  v3 = vmulq_f32(a2, a2);
  v4 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v2, 2), vaddq_f32(v2, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v2.f32, 1))).f32[0])* sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v3, 2), vaddq_f32(v3, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v3.f32, 1))).f32[0]);
  if (v4 == 0.0)
  {
    v6 = 0.0;
  }
  else
  {
    v5 = vmulq_f32(a1, a2);
    v6 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v5, 2), vaddq_f32(v5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.f32, 1))).f32[0]/ v4;
    v7 = 0.0;
    if (v6 >= 1.0)
      return v7;
    if (v6 <= -1.0)
      return 3.1416;
  }
  return acosf(v6);
}

uint64_t C3DVector3InitWithPropertyList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 && a2)
    return C3DInitC3DFloatArrayWithPropertyList(a2, a1, a4);
  else
    return 0;
}

uint64_t C3DVector3CopyPropertyList(uint64_t result)
{
  if (result)
    return C3DCreatePropertyListFromC3DFloatBuffer(result, 3);
  return result;
}

int8x16_t C3DVectorGenerateOrthogonalBasis(float32x4_t *a1, int8x16_t *a2, float32x4_t a3)
{
  float32x4_t v3;
  float32x4_t v4;
  int32x4_t v5;
  int8x16_t result;

  v3 = vabsq_f32(a3);
  if (v3.f32[0] >= v3.f32[1])
  {
    if (v3.f32[1] < v3.f32[2])
    {
      v4.i32[1] = 0;
      v4.f32[0] = -a3.f32[2];
      v4.i64[1] = a3.u32[0];
      goto LABEL_7;
    }
LABEL_6:
    v4.i64[1] = 0;
    v4.f32[0] = -a3.f32[1];
    v4.i32[1] = a3.i32[0];
    goto LABEL_7;
  }
  if (v3.f32[0] >= v3.f32[2])
    goto LABEL_6;
  v4.i32[0] = 0;
  v4.f32[1] = -a3.f32[2];
  v4.i64[1] = a3.u32[1];
LABEL_7:
  *a1 = v4;
  v5 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v4, (int32x4_t)v4), (int8x16_t)v4, 0xCuLL), vnegq_f32(a3)), v4, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a3, (int32x4_t)a3), (int8x16_t)a3, 0xCuLL));
  result = vextq_s8((int8x16_t)vuzp1q_s32(v5, v5), (int8x16_t)v5, 0xCuLL);
  *a2 = result;
  return result;
}

double C3DVector4MultMatrix4x4(float32x4_t *a1, float32x4_t a2)
{
  double result;

  *(_QWORD *)&result = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*a1, a2.f32[0]), a1[1], *(float32x2_t *)a2.f32, 1), a1[2], a2, 2), a1[3], a2, 3).u64[0];
  return result;
}

__n128 C3DVector4GetAxisAngleRotationBetweenVectors(float32x4_t a1, int32x4_t a2)
{
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float v5;
  float32x4_t v7;

  v2 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(a2, a2), (int8x16_t)a2, 0xCuLL), vnegq_f32(a1)), (float32x4_t)a2, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a1, (int32x4_t)a1), (int8x16_t)a1, 0xCuLL));
  v3 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v2, (int32x4_t)v2), (int8x16_t)v2, 0xCuLL);
  v4 = vmulq_f32(v2, v2);
  v5 = sqrtf(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v4.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v4, 2), v4)).f32[0]);
  if (v5 != 0.0)
    v3 = vmulq_n_f32(v3, 1.0 / v5);
  v7 = v3;
  asin(v5);
  return (__n128)v7;
}

double C3DVector4MakeAxisAngleFromEuler(float32x4_t a1)
{
  __float2 v1;
  __float2 v2;
  __float2 v3;
  float32x4_t v4;
  int32x4_t v5;
  float32x2_t v6;
  float32x2_t v7;
  double result;
  float32x4_t v10;

  v1 = __sincosf_stret(0.5 * a1.f32[0]);
  v2 = __sincosf_stret(vmuls_lane_f32(0.5, *(float32x2_t *)a1.f32, 1));
  v3 = __sincosf_stret(vmuls_lane_f32(0.5, a1, 2));
  v4.f32[0] = (float)(v3.__cosval * (float)(v1.__sinval * v2.__sinval))
            + (float)((float)(v1.__cosval * v2.__cosval) * v3.__sinval);
  v4.f32[1] = (float)(v3.__sinval * (float)(v1.__cosval * v2.__sinval))
            + (float)((float)(v1.__sinval * v2.__cosval) * v3.__cosval);
  v4.f32[2] = (float)((float)(v1.__cosval * v2.__sinval) * v3.__cosval)
            - (float)((float)(v1.__sinval * v2.__cosval) * v3.__sinval);
  v10 = v4;
  acosf((float)((float)(v1.__cosval * v2.__cosval) * v3.__cosval)- (float)((float)(v1.__sinval * v2.__sinval) * v3.__sinval));
  v5 = (int32x4_t)vmulq_f32(v10, v10);
  v5.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v5, 2), vadd_f32(*(float32x2_t *)v5.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v5.i8, 1))).u32[0];
  v6 = vrsqrte_f32((float32x2_t)v5.u32[0]);
  v7 = vmul_f32(v6, vrsqrts_f32((float32x2_t)v5.u32[0], vmul_f32(v6, v6)));
  *(_QWORD *)&result = vmulq_n_f32(v10, vmul_f32(v7, vrsqrts_f32((float32x2_t)v5.u32[0], vmul_f32(v7, v7))).f32[0]).u64[0];
  return result;
}

void C3DVector3MakeEulerFromAxisAngle(float32x4_t a1)
{
  float v1;
  __float2 v2;
  float v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  int32x4_t v8;
  int8x16_t v9;
  float32x4_t v15;
  float v16;
  __float2 v17;
  __float2 v18;
  float v19;
  float v20;
  float v22;

  v1 = a1.f32[3];
  v2 = __sincosf_stret(a1.f32[3]);
  v3 = 1.0 - v2.__cosval;
  v4 = vmulq_f32(a1, a1);
  v4.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v4, 2), vaddq_f32(v4, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v4.f32, 1))).u64[0];
  v5 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v4.f32, 0);
  v6 = vrsqrteq_f32(v5);
  v7 = vmulq_f32(v6, vrsqrtsq_f32(v5, vmulq_f32(v6, v6)));
  v8 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v4.f32[0] != 0.0)), 0x1FuLL));
  v8.i32[3] = 0;
  v9 = (int8x16_t)vmulq_f32(v7, vrsqrtsq_f32(v5, vmulq_f32(v7, v7)));
  __asm { FMOV            V2.4S, #1.0 }
  v15 = vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v8), v9, _Q2), a1);
  v16 = vmuls_lane_f32(v2.__sinval, v15, 2)
      + (float)(vmuls_lane_f32(v15.f32[0], *(float32x2_t *)v15.f32, 1) * (float)(1.0 - v2.__cosval));
  v22 = v15.f32[0];
  if (v16 <= 0.998)
  {
    if (v16 >= -0.998)
    {
      v19 = v15.f32[1];
      v20 = v15.f32[2];
      atan2f((float)(v3 * (float)-(float)(v15.f32[0] * v15.f32[2])) + (float)(v15.f32[1] * v2.__sinval), 1.0 - (float)((float)((float)(v20 * v20) + (float)(v19 * v19)) * v3));
      asinf(v16);
      atan2f((float)(v3 * (float)-(float)(v19 * v20)) + (float)(v22 * v2.__sinval), 1.0 - (float)((float)((float)(v20 * v20) + (float)(v22 * v22)) * v3));
    }
    else
    {
      v18 = __sincosf_stret(v1 * 0.5);
      atan2f(v18.__sinval * v22, v18.__cosval);
    }
  }
  else
  {
    v17 = __sincosf_stret(v1 * 0.5);
    atan2f(v17.__sinval * v22, v17.__cosval);
  }
}

void *_mm_realloc(void *a1, size_t a2, size_t size, unint64_t a4)
{
  void *v6;
  size_t v8;
  void *memptr;

  if (a4 == 1)
  {
    v6 = malloc_type_malloc(size, 0x295520E9uLL);
    if (!a2)
      goto LABEL_15;
    goto LABEL_14;
  }
  if ((a4 & (a4 - 1)) != 0 || a4 >= 8)
    v8 = a4;
  else
    v8 = 8;
  memptr = 0;
  if (malloc_type_posix_memalign(&memptr, v8, size, 0xBA8A1232uLL))
    v6 = 0;
  else
    v6 = memptr;
  if (a2)
LABEL_14:
    memcpy(v6, a1, a2);
LABEL_15:
  free(a1);
  return v6;
}

double C3DCullingSystemQueryMake@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_QWORD *)(a2 + 32) = a1;
  *(_OWORD *)a2 = xmmword_1DD007E50;
  *(_QWORD *)&result = 255;
  *(_QWORD *)(a2 + 16) = 255;
  *(_DWORD *)(a2 + 24) = 255;
  *(_BYTE *)(a2 + 28) = 0;
  return result;
}

CFStringRef _C3DCullingSystemCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  const __CFAllocator *v3;

  v3 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v3, 0, CFSTR("<C3DCullingSystem %p>"), a1);
}

CFStringRef _C3DCullingSystemCFCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DCullingSystem %p>"), a1);
}

uint64_t ___Z25C3DCullingSystemGetTypeIDv_block_invoke()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  C3DCullingSystemGetTypeID(void)::typeID = result;
  return result;
}

void C3DCullingSystemUpdateWorldTransforms(uint64_t a1, int *a2, float32x4_t *a3, int a4)
{
  uint64_t v4;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float32x4_t *v16;
  __n128 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float32x4_t *v21;
  float32x4_t v22;
  float32x4_t v23;
  __n128 v24;
  float32x4_t v25;
  __n128 v26;

  LODWORD(v4) = a4;
  if (!a1 && (v8 = scn_default_log(), os_log_type_enabled(v8, OS_LOG_TYPE_FAULT)))
  {
    C3DCullingSystemAdd_cold_1(v8, v9, v10, v11, v12, v13, v14, v15);
    if (!(_DWORD)v4)
      return;
  }
  else if (!(_DWORD)v4)
  {
    return;
  }
  v4 = v4;
  v16 = a3 + 2;
  v17 = (__n128 *)MEMORY[0x1E0C83FF0];
  do
  {
    v19 = *a2++;
    v18 = v19;
    if ((_DWORD)v19 != -1)
    {
      v20 = *(unsigned int *)(*(_QWORD *)(a1 + 32) + 4 * v18);
      if (v20 < *(_DWORD *)(a1 + 16))
      {
        if ((*(_WORD *)(*(_QWORD *)(a1 + 88) + 2 * v20) & 0x10) != 0)
        {
          v24 = v17[3];
          v26 = (__n128)xmmword_1DD007E60;
        }
        else
        {
          v21 = (float32x4_t *)(*(_QWORD *)(a1 + 64) + 32 * v20);
          v22 = v16[-2];
          v23 = v16[-1];
          v24 = (__n128)vaddq_f32(v16[1], vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v23, *(float32x2_t *)v21->f32, 1), v22, COERCE_FLOAT(*v21)), *v16, *v21, 2));
          v24.n128_u32[3] = 1.0;
          v25 = v21[1];
          v25.i32[1] = v25.i32[0];
          v25.i32[2] = (__int32)v21[1];
          v26 = (__n128)vaddq_f32(vaddq_f32(vabsq_f32(vmulq_f32(v22, v25)), vabsq_f32(vmulq_f32((float32x4_t)vuzp2q_s32(vdupq_lane_s32(*(int32x2_t *)v21[1].f32, 1), (int32x4_t)v21[1]), v23))), vabsq_f32(vmulq_f32((float32x4_t)vzip2q_s32(vtrn1q_s32((int32x4_t)v21[1], (int32x4_t)v21[1]), (int32x4_t)v21[1]), *v16)));
        }
        __C3DCullingSystem::_setWorldAABBAtIndex(a1, v20, v24, v26);
      }
    }
    v16 += 4;
    --v4;
  }
  while (v4);
}

double C3DCullingSystemRemove(__C3DCullingSystem *this, unsigned int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;

  if (!this)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DCullingSystemAdd_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(_QWORD *)&result = __C3DCullingSystem::remove(this, a2).n128_u64[0];
  return result;
}

__n128 __C3DCullingSystem::remove(__C3DCullingSystem *this, unsigned int a2)
{
  NSObject *v4;
  unint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  __n128 WorldAABBAtIndex;
  __n128 v19;
  uint64_t v20;
  _OWORD *v21;
  __int128 v22;
  _OWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  char v28;
  uint64_t v29;
  _OWORD *v30;
  __n128 result;
  uint64_t v32;

  if ((a2 & 0x80000000) != 0 || a2 >= (unint64_t)((uint64_t)(*((_QWORD *)this + 5) - *((_QWORD *)this + 4)) >> 2))
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __C3DCullingSystem::remove();
  }
  v5 = *(unsigned int *)(*((_QWORD *)this + 4) + 4 * (int)a2);
  if (v5 >= *((_DWORD *)this + 4))
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      __C3DCullingSystem::remove(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  v14 = *((_DWORD *)this + 4);
  v15 = (v14 - 1);
  *((_DWORD *)this + 4) = v15;
  if ((_DWORD)v5 == (_DWORD)v15)
  {
    v16 = 1 << ((v14 - 1) & 7);
    v17 = v15 >> 3;
  }
  else
  {
    WorldAABBAtIndex = __C3DCullingSystem::_getWorldAABBAtIndex(this, v14 - 1);
    __C3DCullingSystem::_setWorldAABBAtIndex((uint64_t)this, v5, WorldAABBAtIndex, v19);
    v20 = *((_QWORD *)this + 8);
    v21 = (_OWORD *)(v20 + 32 * v15);
    v22 = v21[1];
    v23 = (_OWORD *)(v20 + 32 * v5);
    *v23 = *v21;
    v23[1] = v22;
    *(_QWORD *)(*((_QWORD *)this + 13) + 8 * v5) = *(_QWORD *)(*((_QWORD *)this + 13) + 8 * v15);
    v24 = *((_QWORD *)this + 10);
    *(_DWORD *)(*((_QWORD *)this + 9) + 4 * v5) = *(_DWORD *)(*((_QWORD *)this + 9) + 4 * v15);
    *(_DWORD *)(v24 + 4 * v5) = *(_DWORD *)(v24 + 4 * v15);
    *(_WORD *)(*((_QWORD *)this + 11) + 2 * v5) = *(_WORD *)(*((_QWORD *)this + 11) + 2 * v15);
    v16 = 1 << (v15 & 7);
    v25 = *((_QWORD *)this + 14);
    v17 = v15 >> 3;
    LODWORD(v24) = 1 << (v5 & 7);
    v26 = *(_BYTE *)(v25 + (v5 >> 3));
    v27 = v26 & ~(_BYTE)v24;
    v28 = v26 | v24;
    if ((v16 & *(_BYTE *)(v25 + (v15 >> 3))) == 0)
      v28 = v27;
    *(_BYTE *)(v25 + (v5 >> 3)) = v28;
    *(_DWORD *)(*((_QWORD *)this + 4)
              + 4 * *(int *)(*(_QWORD *)(*((_QWORD *)this + 13) + 8 * v15) + 216)) = v5;
  }
  v29 = MEMORY[0x1E0C83FF0];
  __C3DCullingSystem::_setWorldAABBAtIndex((uint64_t)this, v15, *(__n128 *)(MEMORY[0x1E0C83FF0] + 48), (__n128)xmmword_1DD0076D0);
  v30 = (_OWORD *)(*((_QWORD *)this + 8) + 32 * v15);
  result = (__n128)xmmword_1DD0076D0;
  *v30 = *(_OWORD *)(v29 + 48);
  v30[1] = xmmword_1DD0076D0;
  *(_QWORD *)(*((_QWORD *)this + 13) + 8 * v15) = 0;
  v32 = *((_QWORD *)this + 10);
  *(_DWORD *)(*((_QWORD *)this + 9) + 4 * v15) = 0;
  *(_DWORD *)(v32 + 4 * v15) = 0;
  *(_WORD *)(*((_QWORD *)this + 11) + 2 * v15) = 0;
  *(_BYTE *)(*((_QWORD *)this + 14) + v17) &= ~(_BYTE)v16;
  *(_DWORD *)(*((_QWORD *)this + 4) + 4 * (int)a2) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = a2;
  return result;
}

void C3DCullingSystemCull(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  _OWORD v28[1024];
  _BYTE v29[768];
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  int v37;
  char v38;
  __int16 v39;
  char v40;
  uint64_t v41;
  _OWORD *v42;
  int v43;
  uint64_t v44;

  MEMORY[0x1E0C80A78](a1);
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v44 = *MEMORY[0x1E0C80C00];
  if (!v5)
  {
    v7 = scn_default_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
      C3DCullingSystemAdd_cold_1(v7, v8, v9, v10, v11, v12, v13, v14);
  }
  v15 = *(_QWORD *)(v6 + 88);
  v30 = *(_QWORD *)(v6 + 96);
  v31 = v15;
  v32 = *(_OWORD *)(v6 + 72);
  v33 = *(_QWORD *)(v6 + 64);
  v34 = *(_QWORD *)(v6 + 104);
  if (v2)
  {
    v16 = *(_OWORD *)v2;
    v17 = *(_QWORD *)(v2 + 16);
    v18 = *(_DWORD *)(v2 + 24);
    v19 = *(_BYTE *)(v2 + 28);
    LOWORD(v28[0]) = *(_WORD *)(v2 + 29);
    BYTE2(v28[0]) = *(_BYTE *)(v2 + 31);
    v20 = *(_QWORD *)(v2 + 32);
  }
  else
  {
    v20 = 0;
    v19 = 0;
    v16 = xmmword_1DD007E50;
    v17 = 255;
    v18 = 255;
  }
  v21 = 0;
  v35 = v16;
  v36 = v17;
  v37 = v18;
  v38 = v19;
  v39 = v28[0];
  v40 = BYTE2(v28[0]);
  v41 = v20;
  v43 = 1;
  do
  {
    *(float32x4_t *)&v29[v21] = vnegq_f32(*(float32x4_t *)(v4 + v21));
    v21 += 16;
  }
  while (v21 != 96);
  v22 = *(_DWORD *)(v6 + 16) + 2047;
  memset(v28, 0, 512);
  v42 = v28;
  if (v22 >= 0x800)
  {
    v23 = v22 >> 11;
    v24 = 2048;
    do
    {
      v25 = *(_DWORD *)(v6 + 16);
      if (v24 >= v25)
        v26 = v25;
      else
        v26 = v24;
      v27 = (*(uint64_t (**)(_BYTE *, _QWORD, uint64_t))(v6 + 176))(v29, v24 - 2048, v26);
      if (v27)
        (*(void (**)(uint64_t, _OWORD *, _QWORD))(v41 + 16))(v41, v42, v27);
      v24 += 2048;
      --v23;
    }
    while (v23);
  }
}

void C3DCullingSystemRayIntersect(uint64_t a1)
{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  char v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _OWORD v32[48];
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  int v40;
  char v41;
  __int16 v42;
  char v43;
  uint64_t v44;
  _OWORD *v45;
  __int16 *v46;
  int v47;
  __int16 v48;
  char v49;
  _OWORD v50[1024];
  uint64_t v51;

  *(double *)&v1 = MEMORY[0x1E0C80A78](a1);
  v5 = v4;
  v7 = v6;
  v51 = *MEMORY[0x1E0C80C00];
  if (!v6)
  {
    v30 = v2;
    v31 = v3;
    v29 = v1;
    v8 = scn_default_log();
    v9 = os_log_type_enabled(v8, OS_LOG_TYPE_FAULT);
    v1 = v29;
    v2 = v30;
    v3 = v31;
    if (v9)
    {
      C3DCullingSystemAdd_cold_1(v8, v10, v11, v12, v13, v14, v15, v16);
      v1 = v29;
      v2 = v30;
      v3 = v31;
    }
  }
  v17 = *(_QWORD *)(v7 + 88);
  v33 = *(_QWORD *)(v7 + 96);
  v18 = *(_DWORD *)(v7 + 16) + 2047;
  memset(v50, 0, 512);
  v34 = v17;
  v35 = *(_OWORD *)(v7 + 72);
  v36 = *(_QWORD *)(v7 + 64);
  v37 = *(_QWORD *)(v7 + 104);
  if (v5)
  {
    v19 = *(_OWORD *)v5;
    v20 = *(_QWORD *)(v5 + 16);
    v21 = *(_DWORD *)(v5 + 24);
    v22 = *(_BYTE *)(v5 + 28);
    v48 = *(_WORD *)(v5 + 29);
    v49 = *(_BYTE *)(v5 + 31);
    v23 = *(_QWORD *)(v5 + 32);
  }
  else
  {
    v23 = 0;
    v22 = 0;
    v19 = xmmword_1DD007E50;
    v20 = 255;
    v21 = 255;
  }
  v39 = v20;
  v40 = v21;
  v41 = v22;
  v42 = v48;
  v43 = v49;
  v44 = v23;
  v47 = 1;
  v45 = v50;
  v46 = &v48;
  v32[0] = v1;
  v32[1] = v2;
  v38 = v19;
  v32[2] = v3;
  if (v18 >= 0x800)
  {
    v24 = v18 >> 11;
    if (v24 <= 1)
      v25 = 1;
    else
      v25 = v24;
    v26 = 2048;
    do
    {
      v27 = *(_DWORD *)(v7 + 16);
      if (v26 >= v27)
        v28 = v27;
      else
        v28 = v26;
      __C3DCullingSystem::__rayIntersectRange(v7, (uint64_t)v32, v26 - 2048, v28);
      v26 += 2048;
      --v25;
    }
    while (v25);
  }
}

uint64_t __C3DCullingSystem::__rayIntersectRange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t result;
  unint64_t v8;
  float32x4_t *v9;
  uint64_t v10;
  __int32 *v11;
  uint64_t v12;
  float32x4_t *v13;
  uint64_t v14;
  float32x4_t v15;
  float32x4_t *WorldMatrix;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int8x16_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float v27;
  float32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  int32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  __n128 v43;
  float v44;
  float v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  float32x4_t v49;
  float32x4_t v50;
  uint64_t (*v51[2])(__int128 *, __int128 *);

  v51[1] = *(uint64_t (**)(__int128 *, __int128 *))MEMORY[0x1E0C80C00];
  v6 = 168;
  if (!*(_BYTE *)(a2 + 844))
    v6 = 160;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + v6))(a2, a3, a4);
  if ((_DWORD)result)
  {
    v8 = result;
    if (*(_BYTE *)(a2 + 844))
    {
      MEMORY[0x1E0C80A78](result);
      v9 = &v49 - v8;
      v10 = 0;
      v11 = &v9->i32[2];
      do
      {
        v12 = *(unsigned int *)(*(_QWORD *)(a2 + 864) + v10);
        v13 = *(float32x4_t **)(*(_QWORD *)(a1 + 104) + 8 * v12);
        v14 = *(_QWORD *)(a1 + 64) + 32 * v12;
        v15 = *(float32x4_t *)(v14 + 16);
        v49 = *(float32x4_t *)v14;
        v50 = v15;
        WorldMatrix = C3DNodeGetWorldMatrix(v13);
        v17 = *WorldMatrix;
        v18 = WorldMatrix[1];
        v19 = WorldMatrix[2];
        v20 = vaddq_f32(WorldMatrix[3], vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v18, *(float32x2_t *)v49.f32, 1), *WorldMatrix, v49.f32[0]), v19, v49, 2));
        v21 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v19, (int32x4_t)v19), (int8x16_t)v19, 0xCuLL), vnegq_f32(v18)), v19, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v18, (int32x4_t)v18), (int8x16_t)v18, 0xCuLL));
        v22 = vmulq_f32(*WorldMatrix, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v21, (int32x4_t)v21), v21, 0xCuLL));
        v46 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 2), vaddq_f32(v22, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 1))).f32[0] < 0.0;
        v23 = vmulq_f32(v17, v17);
        v26 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v23, 2), vaddq_f32(v23, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v23.f32, 1)));
        v24 = vmulq_f32(v18, v18);
        v26.f32[0] = sqrtf(v26.f32[0]);
        v25 = vmulq_f32(v19, v19);
        v26.i32[1] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 2), vaddq_f32(v24, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.f32, 1))).f32[0]);
        v26.i32[2] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2), vaddq_f32(v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 1))).f32[0]);
        if (v46)
          v27 = -1.0;
        else
          v27 = 1.0;
        v28 = vmulq_n_f32(v26, v27);
        v29 = (int32x4_t)vdivq_f32(v17, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v28.f32, 0));
        v30 = (int32x4_t)vdivq_f32(v18, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v28.f32, 1));
        v31 = (int32x4_t)vdivq_f32(v19, (float32x4_t)vdupq_laneq_s32((int32x4_t)v28, 2));
        v32 = vmulq_f32(v50, v28);
        v33 = vsubq_f32(v20, *(float32x4_t *)a2);
        v34 = vzip2q_s32(v29, v31);
        v35 = (float32x4_t)vzip1q_s32(vzip1q_s32(v29, v31), v30);
        v36 = (float32x4_t)vtrn2q_s32(v29, v30);
        v36.i32[2] = v31.i32[1];
        v37 = (float32x4_t)vzip1q_s32(v34, vdupq_laneq_s32(v30, 2));
        v38 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v36, *(float32x2_t *)v33.f32, 1), v35, v33.f32[0]), v37, v33, 2);
        v39 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v36, *(float32x2_t *)(a2 + 16), 1), v35, COERCE_FLOAT(*(_OWORD *)(a2 + 16))), v37, *(float32x4_t *)(a2 + 16), 2);
        v40 = vdivq_f32(vaddq_f32(v32, v38), v39);
        v41 = vdivq_f32(vsubq_f32(v38, v32), v39);
        v40.i32[3] = 0;
        v41.i32[3] = 0;
        v42 = vminnmq_f32(v40, v41);
        v43 = (__n128)vmaxnmq_f32(v40, v41);
        v44 = v42.f32[2];
        if (v42.f32[0] >= v42.f32[2])
          v44 = v42.f32[0];
        if (v44 < v42.f32[1])
          v44 = v42.f32[1];
        v45 = v43.n128_f32[2];
        if (v43.n128_f32[0] <= v43.n128_f32[2])
          v45 = v43.n128_f32[0];
        if (v45 > v43.n128_f32[1])
          v45 = v43.n128_f32[1];
        v43.n128_u32[0] = 0;
        if (v45 >= v44)
        {
          v46 = v45 >= 0.0 && v44 < *(float *)(a2 + 44);
          if (v46)
          {
            if (v44 >= 0.0)
              v43.n128_f32[0] = v44;
            else
              v43.n128_f32[0] = v45;
          }
        }
        v10 += 4;
        *((_QWORD *)v11 - 1) = v13;
        *v11 = v43.n128_u32[0];
        v11 += 4;
      }
      while (4 * v8 != v10);
      v51[0] = (uint64_t (*)(__int128 *, __int128 *))HitResultCmp;
      std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(HitResult const&,HitResult const&),HitResult*,false>((__int128 *)&v49 - v8, (__int128 *)&v49, v51, 126 - 2 * __clz(v8), 1, v43);
      v47 = 0;
      do
      {
        v48 = v9->i64[0];
        ++v9;
        *(_QWORD *)(*(_QWORD *)(a2 + 856) + v47) = v48;
        v47 += 8;
      }
      while (8 * v8 != v47);
    }
    return (*(uint64_t (**)(void))(*(_QWORD *)(a2 + 848) + 16))();
  }
  return result;
}

void C3DCullingSystemAABBIntersect(uint64_t a1)
{
  __int128 v1;
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  char v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  int v25;
  int v26;
  unsigned int v27;
  __int128 v28;
  __int128 v29;
  __int16 v30;
  char v31;
  _OWORD v32[48];
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  int v40;
  char v41;
  __int16 v42;
  char v43;
  uint64_t v44;
  _BYTE *v45;
  int v46;
  _BYTE v47[16392];
  uint64_t v48;

  *(double *)&v1 = MEMORY[0x1E0C80A78](a1);
  v4 = v3;
  v6 = v5;
  v48 = *MEMORY[0x1E0C80C00];
  if (!v5)
  {
    v28 = v1;
    v29 = v2;
    v7 = scn_default_log();
    v8 = os_log_type_enabled(v7, OS_LOG_TYPE_FAULT);
    v1 = v28;
    v2 = v29;
    if (v8)
    {
      C3DCullingSystemAdd_cold_1(v7, v9, v10, v11, v12, v13, v14, v15);
      v1 = v28;
      v2 = v29;
    }
  }
  v16 = *(_QWORD *)(v6 + 88);
  v33 = *(_QWORD *)(v6 + 96);
  v17 = *(_DWORD *)(v6 + 16) + 2047;
  memset(v47, 0, 512);
  v34 = v16;
  v35 = *(_OWORD *)(v6 + 72);
  v36 = *(_QWORD *)(v6 + 64);
  v37 = *(_QWORD *)(v6 + 104);
  if (v4)
  {
    v18 = *(_OWORD *)v4;
    v19 = *(_QWORD *)(v4 + 16);
    v20 = *(_DWORD *)(v4 + 24);
    v21 = *(_BYTE *)(v4 + 28);
    v30 = *(_WORD *)(v4 + 29);
    v31 = *(_BYTE *)(v4 + 31);
    v22 = *(_QWORD *)(v4 + 32);
  }
  else
  {
    v22 = 0;
    v21 = 0;
    v18 = xmmword_1DD007E50;
    v19 = 255;
    v20 = 255;
  }
  v38 = v18;
  v39 = v19;
  v40 = v20;
  v41 = v21;
  v42 = v30;
  v43 = v31;
  v44 = v22;
  v46 = 1;
  v32[0] = v1;
  v32[1] = v2;
  v45 = v47;
  if (v17 >= 0x800)
  {
    v23 = 0;
    v24 = v17 >> 11;
    if (v24 <= 1)
      v25 = 1;
    else
      v25 = v24;
    do
    {
      v26 = v23 + 2048;
      v27 = (*(uint64_t (**)(_OWORD *))(v6 + 152))(v32);
      if (v27)
        (*(void (**)(uint64_t, _BYTE *, _QWORD))(v44 + 16))(v44, v45, v27);
      v23 = v26;
      --v25;
    }
    while (v25);
  }
}

__n128 __C3DCullingSystem::_getWorldAABBAtIndex(__C3DCullingSystem *this, unsigned int a2)
{
  int v2;
  unsigned __int32 *v3;
  __n128 result;
  unsigned __int32 *v9;

  v2 = *((_DWORD *)this + 6);
  if (v2 == 4)
  {
    v9 = (unsigned __int32 *)(*((_QWORD *)this + 12) + 96 * (a2 >> 2) + 4 * (a2 & 3));
    __asm { FMOV            V0.4S, #1.0 }
    result.n128_u32[0] = *v9;
    result.n128_u32[1] = v9[4];
  }
  else if (v2 == 8)
  {
    v3 = (unsigned __int32 *)(*((_QWORD *)this + 12) + 192 * (a2 >> 3) + 4 * (a2 & 7));
    __asm { FMOV            V0.4S, #1.0 }
    result.n128_u32[0] = *v3;
    result.n128_u32[1] = v3[8];
  }
  else
  {
    return *(__n128 *)(*((_QWORD *)this + 12) + 32 * a2);
  }
  return result;
}

__n128 C3DCullingSystemComputeHierarchicalAABB(uint64_t a1, float32x4_t *a2, int a3)
{
  float32x4_t *WorldMatrix;
  uint64_t v6;
  __int128 *v7;
  __int128 v8;
  __int128 v9;
  uint64_t *v10;
  _QWORD *v11;
  __int128 v13;
  _QWORD v14[6];
  _QWORD v15[4];
  simd_float4x4 v16;
  uint64_t *v17;
  float32x4_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  __n128 (*v23)(uint64_t, uint64_t);
  uint64_t (*v24)();
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  simd_float4x4 v28;
  simd_float4x4 v29;

  v27 = *MEMORY[0x1E0C80C00];
  v20 = 0;
  v21 = &v20;
  v23 = __Block_byref_object_copy__1;
  v24 = __Block_byref_object_dispose__1;
  v22 = 0x5002000000;
  v25 = *(_OWORD *)(MEMORY[0x1E0C83FF0] + 48);
  v26 = xmmword_1DD0076D0;
  if (a3)
  {
    WorldMatrix = C3DNodeGetWorldMatrix(a2);
    v28.columns[0] = (simd_float4)*WorldMatrix;
    v28.columns[1] = (simd_float4)WorldMatrix[1];
    v28.columns[2] = (simd_float4)WorldMatrix[2];
    v28.columns[3] = (simd_float4)WorldMatrix[3];
    v29 = __invert_f4(v28);
    v6 = a2[13].i32[2];
    if ((_DWORD)v6 != -1)
    {
      v7 = (__int128 *)(*(_QWORD *)(a1 + 64) + 32 * *(unsigned int *)(*(_QWORD *)(a1 + 32) + 4 * v6));
      v8 = *v7;
      v9 = v7[1];
      v10 = v21;
      *((_OWORD *)v21 + 3) = v8;
      *((_OWORD *)v10 + 4) = v9;
    }
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 0x40000000;
    v15[2] = __C3DCullingSystemComputeHierarchicalAABB_block_invoke;
    v15[3] = &unk_1EA59F120;
    v18 = a2;
    v19 = a1;
    v16 = v29;
    v17 = &v20;
    v11 = v15;
  }
  else
  {
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 0x40000000;
    v14[2] = __C3DCullingSystemComputeHierarchicalAABB_block_invoke_2;
    v14[3] = &unk_1EA59F148;
    v14[4] = &v20;
    v14[5] = a1;
    v11 = v14;
  }
  C3DNodeApplyHierarchy((uint64_t)a2, (uint64_t)v11);
  v13 = *((_OWORD *)v21 + 3);
  _Block_object_dispose(&v20, 8);
  return (__n128)v13;
}

uint64_t C3DCullingSystemGetSceneBoundingBox(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v7;
  __int16 v9;
  char v10;
  _BYTE v11[768];
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  char v20;
  __int16 v21;
  char v22;
  uint64_t v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 88);
  v12 = *(_QWORD *)(a1 + 96);
  v13 = v2;
  v14 = *(_OWORD *)(a1 + 72);
  v15 = *(_QWORD *)(a1 + 64);
  v16 = *(_QWORD *)(a1 + 104);
  if (a2)
  {
    v3 = *(_OWORD *)a2;
    v4 = *(_QWORD *)(a2 + 16);
    v5 = *(_DWORD *)(a2 + 24);
    v6 = *(_BYTE *)(a2 + 28);
    v9 = *(_WORD *)(a2 + 29);
    v10 = *(_BYTE *)(a2 + 31);
    v7 = *(_QWORD *)(a2 + 32);
  }
  else
  {
    v7 = 0;
    v6 = 0;
    v3 = xmmword_1DD007E50;
    v4 = 255;
    v5 = 255;
  }
  v17 = v3;
  v18 = v4;
  v19 = v5;
  v20 = v6;
  v21 = v9;
  v22 = v10;
  v23 = v7;
  v24 = 1;
  return (*(uint64_t (**)(_BYTE *, _QWORD, _QWORD))(a1 + 144))(v11, 0, *(unsigned int *)(a1 + 16));
}

uint64_t C3DCullingSystem_AABBRange_x8(uint64_t a1, unsigned int a2, unsigned int a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  int8x16_t v17;
  const float *v18;
  uint64_t v19;
  const float *v20;
  int8x16_t v21;
  uint64_t v22;
  int8x16_t v23;
  int32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  unsigned int v31;
  uint64_t v32;
  float32x4_t *v33;
  int8x8_t v34;
  int8x16_t v35;
  unsigned __int32 v36;
  BOOL v37;
  unint64_t v38;

  if ((a2 & 7) != 0)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      C3DCullingSystem_AABBRange_x8(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  v14 = a2 >> 3;
  if (v14 >= (a3 + 7) >> 3)
    return 0;
  result = 0;
  v16 = *(_QWORD *)(a1 + 776);
  v17 = (int8x16_t)vdupq_n_s32(*(_DWORD *)(a1 + 836) | (~*(_DWORD *)(a1 + 840) << 8));
  v18 = (const float *)(a1 + 816);
  v19 = *(_QWORD *)(a1 + 784);
  v20 = (const float *)(a1 + 820);
  v21 = (int8x16_t)vld1q_dup_f32(v18);
  v22 = *(_QWORD *)(a1 + 792);
  v23 = (int8x16_t)vld1q_dup_f32(v20);
  v24 = *(int32x4_t *)(a1 + 16);
  v25 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a1, 0);
  v26 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a1, 1);
  v27 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a1, 2);
  v28 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.i8, 0);
  v29 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.i8, 1);
  v30 = (float32x4_t)vdupq_laneq_s32(v24, 2);
  v31 = a2 & 0xFFFFFFF8;
  v32 = *(_QWORD *)(a1 + 768);
  do
  {
    v33 = (float32x4_t *)(v32 + 192 * v14);
    v34 = vmovn_s16((int16x8_t)vandq_s8(vandq_s8(vbicq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v17, (int8x16_t)vmovl_u16(*(uint16x4_t *)(v16 + 16 * v14)))), (int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v17, (int8x16_t)vmovl_high_u16(*(uint16x8_t *)(v16 + 16 * v14))))), (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(vandq_s8(*(int8x16_t *)(v22 + 32 * v14), v23), vandq_s8(*(int8x16_t *)(v19 + 32 * v14), v21))), (int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(vandq_s8(
                                                                                       *(int8x16_t *)(v22 + 32 * v14 + 16),
                                                                                       v23),
                                                                                     vandq_s8(*(int8x16_t *)(v19 + 32 * v14 + 16), v21))))), (int8x16_t)vuzp1q_s16((int16x8_t)vcgeq_f32(vaddq_f32(v28, v33[6]), vabdq_f32(v25, *v33)), (int16x8_t)vcgeq_f32(vaddq_f32(v28, v33[7]), vabdq_f32(v25, v33[1])))), vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgeq_f32(vaddq_f32(v29, v33[8]), vabdq_f32(v26, v33[2])), (int16x8_t)vcgeq_f32(vaddq_f32(v29, v33[9]), vabdq_f32(v26, v33[3]))), (int8x16_t)vuzp1q_s16((int16x8_t)vcgeq_f32(vaddq_f32(v30, v33[10]), vabdq_f32(v27, v33[4])), (int16x8_t)vcgeq_f32(vaddq_f32(v30, v33[11]), vabdq_f32(v27, v33[5]))))));
    v35 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s8(v34, *(int8x8_t *)v17.i8)), 0x1FuLL)), (int8x16_t)xmmword_1DD007E80), vandq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip2_s8(v34, *(int8x8_t *)v17.i8)), 0x1FuLL)), (int8x16_t)xmmword_1DD007E70));
    *(int8x8_t *)v35.i8 = vorr_s8(*(int8x8_t *)v35.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL));
    v36 = vadd_s32(*(int32x2_t *)v35.i8, vdup_lane_s32(*(int32x2_t *)v35.i8, 1)).u32[0];
    if (v36)
      v37 = 8 * (int)v14 >= a3;
    else
      v37 = 1;
    if (!v37)
    {
      v38 = v31;
      do
      {
        if ((v36 & 1) != 0)
        {
          *(_QWORD *)(*(_QWORD *)(a1 + 856) + 8 * result) = *(_QWORD *)(*(_QWORD *)(a1 + 808) + 8 * v38);
          result = (result + 1);
        }
        if (v36 < 2)
          break;
        ++v38;
        v36 >>= 1;
      }
      while (v38 < a3);
    }
    ++v14;
    v31 += 8;
  }
  while (v14 != (a3 + 7) >> 3);
  return result;
}

uint64_t C3DCullingSystem_AABBRange_x4(uint64_t a1, unsigned int a2, unsigned int a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  const float *v17;
  int8x16_t v18;
  uint64_t v19;
  int8x16_t v20;
  const float *v21;
  uint64_t v22;
  int8x16_t v23;
  int32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  unsigned int v31;
  uint64_t v32;
  float32x4_t *v33;
  int8x16_t v34;
  unsigned __int32 v35;
  BOOL v36;
  unint64_t v37;

  if ((a2 & 3) != 0)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      C3DCullingSystem_AABBRange_x8(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  v14 = a2 >> 2;
  if (v14 >= (a3 + 3) >> 2)
    return 0;
  result = 0;
  v16 = *(_QWORD *)(a1 + 776);
  v17 = (const float *)(a1 + 816);
  v18 = (int8x16_t)vdupq_n_s32(*(_DWORD *)(a1 + 836) | (~*(_DWORD *)(a1 + 840) << 8));
  v19 = *(_QWORD *)(a1 + 784);
  v20 = (int8x16_t)vld1q_dup_f32(v17);
  v21 = (const float *)(a1 + 820);
  v22 = *(_QWORD *)(a1 + 792);
  v23 = (int8x16_t)vld1q_dup_f32(v21);
  v24 = *(int32x4_t *)(a1 + 16);
  v25 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a1, 0);
  v26 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a1, 1);
  v27 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a1, 2);
  v28 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.i8, 0);
  v29 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.i8, 1);
  v30 = (float32x4_t)vdupq_laneq_s32(v24, 2);
  v31 = a2 & 0xFFFFFFFC;
  v32 = *(_QWORD *)(a1 + 768);
  do
  {
    v33 = (float32x4_t *)(v32 + 96 * v14);
    v34 = vandq_s8(vandq_s8(vandq_s8(vbicq_s8((int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(v18, (int8x16_t)vmovl_u16(*(uint16x4_t *)(v16 + 8 * v14)))), (int8x16_t)vceqzq_s32((int32x4_t)vorrq_s8(vandq_s8(*(int8x16_t *)(v22 + 16 * v14), v23), vandq_s8(*(int8x16_t *)(v19 + 16 * v14), v20)))), (int8x16_t)vcgeq_f32(vaddq_f32(v28, v33[3]), vabdq_f32(v25, *v33))), vandq_s8((int8x16_t)vcgeq_f32(vaddq_f32(v29, v33[4]), vabdq_f32(v26, v33[1])), (int8x16_t)vcgeq_f32(vaddq_f32(v30, v33[5]), vabdq_f32(v27, v33[2])))), (int8x16_t)xmmword_1DD007E80);
    *(int8x8_t *)v34.i8 = vorr_s8(*(int8x8_t *)v34.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL));
    v35 = vadd_s32(*(int32x2_t *)v34.i8, vdup_lane_s32(*(int32x2_t *)v34.i8, 1)).u32[0];
    if (v35)
      v36 = 4 * (int)v14 >= a3;
    else
      v36 = 1;
    if (!v36)
    {
      v37 = v31;
      do
      {
        if ((v35 & 1) != 0)
        {
          *(_QWORD *)(*(_QWORD *)(a1 + 856) + 8 * result) = *(_QWORD *)(*(_QWORD *)(a1 + 808) + 8 * v37);
          result = (result + 1);
        }
        if (v35 < 2)
          break;
        ++v37;
        v35 >>= 1;
      }
      while (v37 < a3);
    }
    ++v14;
    v31 += 4;
  }
  while (v14 != (a3 + 3) >> 2);
  return result;
}

uint64_t C3DCullingSystem_AABBRange_x1(float32x4_t *a1, unsigned int a2, unsigned int a3)
{
  uint64_t result;
  uint64_t v5;
  int v6;
  uint64_t v7;
  __int32 v8;
  __int32 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint32x4_t v14;

  if (a2 >= a3)
    return 0;
  result = 0;
  v5 = a1[48].i64[1];
  v6 = a1[52].i32[1] | (~a1[52].i32[2] << 8);
  v7 = a1[49].i64[0];
  v8 = a1[51].i32[0];
  v9 = a1[51].i32[1];
  v10 = a1[49].i64[1];
  v11 = a2;
  v12 = (32 * a2) | 0x10;
  do
  {
    if (*(_DWORD *)(v10 + 4 * v11) & v9 | *(_DWORD *)(v7 + 4 * v11) & v8)
      v13 = (unsigned __int16)(v6 & *(_WORD *)(v5 + 2 * v11)) == 0;
    else
      v13 = 0;
    if (v13)
    {
      v14 = (uint32x4_t)vcgeq_f32(vaddq_f32(a1[1], *(float32x4_t *)(a1[48].i64[0] + v12)), vabdq_f32(*a1, *(float32x4_t *)(a1[48].i64[0] + v12 - 16)));
      v14.i32[3] = v14.i32[2];
      if ((vminvq_u32(v14) & 0x80000000) != 0)
      {
        *(_QWORD *)(a1[53].i64[1] + 8 * result) = *(_QWORD *)(a1[50].i64[1] + 8 * v11);
        result = (result + 1);
      }
    }
    ++v11;
    v12 += 32;
  }
  while (a3 != v11);
  return result;
}

double C3DCullingSystem_MergeAABBRange_x8(uint64_t a1, unsigned int a2, int a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const float *v16;
  int v17;
  int v18;
  int32x2_t v19;
  uint64_t v20;
  const float *v21;
  int8x16_t v22;
  int8x16_t v23;
  uint64_t v24;
  int8x16_t v25;
  int8x16_t v26;
  uint64_t v27;
  uint64_t v28;
  uint16x8_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x8_t v32;
  int8x16_t v33;
  int8x16_t v34;
  float32x4_t *v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  int8x16_t v41;
  int8x16_t v42;
  float32x4_t *v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  int64x2_t v58;
  float32x4_t v59;
  int64x2_t v60;
  int64x2_t v61;
  int64x2_t v62;
  float32x4_t v63;
  int64x2_t v64;
  int64x2_t v65;
  float32x4_t v66;
  double result;
  __int128 v68;
  float32x4_t v69;
  __int128 v70;
  float32x4_t v71;
  __int128 v72;
  float32x4_t v73;
  __int128 v74;
  float32x4_t v75;
  __int128 v76;
  float32x4_t v77;
  __int128 v78;
  float32x4_t v79;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  if ((a2 & 7) != 0)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      C3DCullingSystem_AABBRange_x8(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  v14 = *(_QWORD *)(a1 + 776);
  v15 = a2 >> 3;
  v16 = (const float *)(a1 + 816);
  v17 = *(_DWORD *)(a1 + 836);
  v18 = *(_DWORD *)(a1 + 840);
  v19 = *(int32x2_t *)(a1 + 832);
  v20 = *(_QWORD *)(a1 + 784);
  v21 = (const float *)(a1 + 820);
  v22 = (int8x16_t)vld1q_dup_f32(v16);
  v23 = (int8x16_t)vld1q_dup_f32(v21);
  v24 = *(_QWORD *)(a1 + 792);
  v76 = xmmword_1DD0080E0;
  v77 = (float32x4_t)unk_1DD0080F0;
  v78 = xmmword_1DD008100;
  v79 = (float32x4_t)unk_1DD008110;
  v74 = xmmword_1DD0080C0;
  v75 = (float32x4_t)unk_1DD0080D0;
  v70 = xmmword_1DD008140;
  v71 = (float32x4_t)unk_1DD008150;
  v72 = xmmword_1DD008160;
  v73 = (float32x4_t)unk_1DD008170;
  v68 = xmmword_1DD008120;
  v69 = (float32x4_t)unk_1DD008130;
  if (v15 >= (a3 + 7) >> 3)
  {
    v50 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
    v56.i64[0] = 0x80000000800000;
    v56.i64[1] = 0x80000000800000;
    v57.i64[0] = 0x80000000800000;
    v57.i64[1] = 0x80000000800000;
    v54.i64[0] = 0x80000000800000;
    v54.i64[1] = 0x80000000800000;
    v55.i64[0] = 0x80000000800000;
    v55.i64[1] = 0x80000000800000;
    v52.i64[0] = 0x80000000800000;
    v52.i64[1] = 0x80000000800000;
    v51 = v50;
    v53.i64[0] = 0x80000000800000;
    v53.i64[1] = 0x80000000800000;
    v48 = v50;
    v49 = v50;
    v46 = v50;
    v47 = v50;
  }
  else
  {
    v25 = (int8x16_t)vdupq_n_s32(v17 | (~v18 << 8));
    v26 = (int8x16_t)vdupq_lane_s32(v19, 0);
    v27 = *(_QWORD *)(a1 + 768) + 192 * v15 + 96;
    do
    {
      v28 = 0;
      v29 = *(uint16x8_t *)(v14 + 16 * v15);
      v30 = (int8x16_t)vmovl_high_u16(v29);
      v31 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v29.i8);
      v32 = vmovn_s16((int16x8_t)vbicq_s8(vbicq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v25, v31)), (int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v25, v30))), (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(vandq_s8(*(int8x16_t *)(v24 + 32 * v15), v23), vandq_s8(*(int8x16_t *)(v20 + 32 * v15), v22))), (int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(vandq_s8(*(int8x16_t *)(v24 + 32 * v15 + 16), v23), vandq_s8(*(int8x16_t *)(v20 + 32 * v15 + 16), v22))))),
                                   (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v26, v31)), (int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v26, v30)))));
      v33 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip2_s8(v32, *(int8x8_t *)v22.i8)), 0x1FuLL));
      v34 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s8(v32, *(int8x8_t *)v22.i8)), 0x1FuLL));
      do
      {
        v35 = (float32x4_t *)((char *)&v74 + v28);
        v36 = *(float32x4_t *)((char *)&v74 + v28 + 16);
        v37 = *(float32x4_t *)(v27 + v28 - 96);
        v38 = *(float32x4_t *)(v27 + v28 - 80);
        v39 = *(float32x4_t *)(v27 + v28);
        v40 = *(float32x4_t *)(v27 + v28 + 16);
        v41 = (int8x16_t)vcgezq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s8(v32, *(int8x8_t *)v22.i8)), 0x1FuLL));
        v42 = (int8x16_t)vcgezq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip2_s8(v32, *(int8x8_t *)v22.i8)), 0x1FuLL));
        v43 = (float32x4_t *)((char *)&v68 + v28);
        v45 = *(float32x4_t *)((char *)&v68 + v28);
        v44 = *(float32x4_t *)((char *)&v68 + v28 + 16);
        *v35 = vminnmq_f32(*(float32x4_t *)((char *)&v74 + v28), (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)vsubq_f32(v37, v39), v34), vandq_s8(*(int8x16_t *)((char *)&v74 + v28), v41)));
        v35[1] = vminnmq_f32(v36, (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)vsubq_f32(v38, v40), v33), vandq_s8((int8x16_t)v36, v42)));
        *v43 = vmaxnmq_f32(v45, (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v45, v41), vandq_s8((int8x16_t)vaddq_f32(v37, v39), v34)));
        v43[1] = vmaxnmq_f32(v44, (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v44, v42), vandq_s8((int8x16_t)vaddq_f32(v38, v40), v33)));
        v28 += 32;
      }
      while (v28 != 96);
      ++v15;
      v27 += 192;
    }
    while (v15 != (a3 + 7) >> 3);
    v46 = (float32x4_t)v74;
    v47 = v75;
    v48 = (float32x4_t)v76;
    v49 = v77;
    v50 = (float32x4_t)v78;
    v51 = v79;
    v52 = (float32x4_t)v68;
    v53 = v69;
    v54 = (float32x4_t)v70;
    v55 = v71;
    v56 = (float32x4_t)v72;
    v57 = v73;
  }
  v58 = (int64x2_t)vminq_f32(v46, v47);
  v59 = vminq_f32((float32x4_t)vdupq_lane_s64(v58.i64[0], 0), (float32x4_t)vdupq_laneq_s64(v58, 1));
  v60 = (int64x2_t)vminq_f32(v48, v49);
  v59.f32[0] = fminf(v59.f32[0], v59.f32[1]);
  v60.i64[0] = vminq_f32((float32x4_t)vdupq_lane_s64(v60.i64[0], 0), (float32x4_t)vdupq_laneq_s64(v60, 1)).u64[0];
  v61 = (int64x2_t)vminq_f32(v50, v51);
  v61.i64[0] = vminq_f32((float32x4_t)vdupq_lane_s64(v61.i64[0], 0), (float32x4_t)vdupq_laneq_s64(v61, 1)).u64[0];
  v59.i32[1] = fminf(*(float *)v60.i32, *(float *)&v60.i32[1]);
  v59.i32[2] = fminf(*(float *)v61.i32, *(float *)&v61.i32[1]);
  v62 = (int64x2_t)vmaxq_f32(v52, v53);
  v63 = vmaxq_f32((float32x4_t)vdupq_lane_s64(v62.i64[0], 0), (float32x4_t)vdupq_laneq_s64(v62, 1));
  v64 = (int64x2_t)vmaxq_f32(v54, v55);
  v63.f32[0] = fmaxf(v63.f32[0], v63.f32[1]);
  v64.i64[0] = vmaxq_f32((float32x4_t)vdupq_lane_s64(v64.i64[0], 0), (float32x4_t)vdupq_laneq_s64(v64, 1)).u64[0];
  v65 = (int64x2_t)vmaxq_f32(v56, v57);
  v65.i64[0] = vmaxq_f32((float32x4_t)vdupq_lane_s64(v65.i64[0], 0), (float32x4_t)vdupq_laneq_s64(v65, 1)).u64[0];
  v63.i32[1] = fmaxf(*(float *)v64.i32, *(float *)&v64.i32[1]);
  v63.i32[2] = fmaxf(*(float *)v65.i32, *(float *)&v65.i32[1]);
  v66.i64[0] = 0x3F0000003F000000;
  v66.i64[1] = 0x3F0000003F000000;
  *(_QWORD *)&result = vmulq_f32(vaddq_f32(v59, v63), v66).u64[0];
  return result;
}

double C3DCullingSystem_MergeAABBRange_x4(uint64_t a1, unsigned int a2, int a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const float *v16;
  int v17;
  int v18;
  const float *v19;
  int32x4_t v20;
  uint64_t v21;
  const float *v22;
  int8x16_t v23;
  int8x16_t v24;
  uint64_t v25;
  int8x16_t v26;
  uint64_t v27;
  uint64_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int16x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  int8x16_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  double result;
  __int128 v44;
  float32x4_t v45;
  __int128 v46;
  __int128 v47;
  float32x4_t v48;
  __int128 v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  if ((a2 & 3) != 0)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      C3DCullingSystem_AABBRange_x8(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  v14 = *(_QWORD *)(a1 + 776);
  v15 = a2 >> 2;
  v16 = (const float *)(a1 + 816);
  v17 = *(_DWORD *)(a1 + 836);
  v18 = *(_DWORD *)(a1 + 840);
  v19 = (const float *)(a1 + 832);
  v20 = (int32x4_t)vld1q_dup_f32(v19);
  v21 = *(_QWORD *)(a1 + 784);
  v22 = (const float *)(a1 + 820);
  v23 = (int8x16_t)vld1q_dup_f32(v16);
  v24 = (int8x16_t)vld1q_dup_f32(v22);
  v25 = *(_QWORD *)(a1 + 792);
  v47 = xmmword_1DD008180;
  v48 = (float32x4_t)unk_1DD008190;
  v49 = xmmword_1DD0081A0;
  v44 = xmmword_1DD0081B0;
  v45 = (float32x4_t)unk_1DD0081C0;
  v46 = xmmword_1DD0081D0;
  if (v15 >= (a3 + 3) >> 2)
  {
    v38 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
    v41.i64[0] = 0x80000000800000;
    v41.i64[1] = 0x80000000800000;
    v39.i64[0] = 0x80000000800000;
    v39.i64[1] = 0x80000000800000;
    v40.i64[0] = 0x80000000800000;
    v40.i64[1] = 0x80000000800000;
    v36 = v38;
    v37 = v38;
  }
  else
  {
    v26 = (int8x16_t)vdupq_n_s32(v17 | (~v18 << 8));
    v27 = *(_QWORD *)(a1 + 768) + 96 * v15 + 48;
    do
    {
      v28 = 0;
      v29 = (int32x4_t)vmovl_u16(*(uint16x4_t *)(v14 + 8 * v15));
      v30 = (int32x4_t)vandq_s8(vbicq_s8((int8x16_t)vtstq_s32(v20, v29), (int8x16_t)vceqzq_s32((int32x4_t)vorrq_s8(vandq_s8(*(int8x16_t *)(v25 + 16 * v15), v24), vandq_s8(*(int8x16_t *)(v21 + 16 * v15), v23)))), (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(v26, (int8x16_t)v29)));
      v31 = vmovn_s32(v30);
      do
      {
        v32 = *(float32x4_t *)(v27 + v28 - 48);
        v33 = *(float32x4_t *)(v27 + v28);
        v34 = (int8x16_t)vmovl_s16(v31);
        v35 = *(float32x4_t *)((char *)&v44 + v28);
        *(__int128 *)((char *)&v47 + v28) = (__int128)vminnmq_f32(*(float32x4_t *)((char *)&v47 + v28), (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)vsubq_f32(v32, v33), (int8x16_t)v30), vbicq_s8(*(int8x16_t *)((char *)&v47 + v28), v34)));
        *(__int128 *)((char *)&v44 + v28) = (__int128)vmaxnmq_f32(v35, (float32x4_t)vorrq_s8(vbicq_s8((int8x16_t)v35, v34), vandq_s8((int8x16_t)vaddq_f32(v32, v33), (int8x16_t)v30)));
        v28 += 16;
      }
      while (v28 != 48);
      ++v15;
      v27 += 96;
    }
    while (v15 != (a3 + 3) >> 2);
    v37 = (float32x4_t)v47;
    v36 = v48;
    v38 = (float32x4_t)v49;
    v40 = (float32x4_t)v44;
    v39 = v45;
    v41 = (float32x4_t)v46;
  }
  v37.f32[0] = vminvq_f32(v37);
  v37.i32[1] = vminvq_f32(v36);
  v37.i32[2] = vminvq_f32(v38);
  v40.f32[0] = vmaxvq_f32(v40);
  v40.i32[1] = vmaxvq_f32(v39);
  v40.i32[2] = vmaxvq_f32(v41);
  v42.i64[0] = 0x3F0000003F000000;
  v42.i64[1] = 0x3F0000003F000000;
  *(_QWORD *)&result = vmulq_f32(vaddq_f32(v37, v40), v42).u64[0];
  return result;
}

uint64_t C3DCullingSystem_MergeAABBRange_x1(uint64_t result, unsigned int a2, unsigned int a3)
{
  float32x4_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int *v8;
  int *v9;
  unsigned __int16 *v10;
  float32x4_t *v11;
  float32x4_t v12;
  float32x4_t v13;
  unint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;

  v3 = *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 48);
  if (a2 < a3)
  {
    v4 = *(_DWORD *)(result + 836) | (~*(_DWORD *)(result + 840) << 8);
    v5 = *(_DWORD *)(result + 832);
    v6 = *(_DWORD *)(result + 816);
    v7 = *(_DWORD *)(result + 820);
    v8 = (int *)(*(_QWORD *)(result + 784) + 4 * a2);
    v9 = (int *)(*(_QWORD *)(result + 792) + 4 * a2);
    v10 = (unsigned __int16 *)(*(_QWORD *)(result + 776) + 2 * a2);
    v11 = (float32x4_t *)(*(_QWORD *)(result + 768) + 32 * a2 + 16);
    v12 = (float32x4_t)xmmword_1DD0076D0;
    v13.i64[0] = 0x3F0000003F000000;
    v13.i64[1] = 0x3F0000003F000000;
    v14 = a3 - (unint64_t)a2;
    do
    {
      v15 = *v8++;
      v16 = v15 & v6;
      v17 = *v9++;
      v18 = v17 & v7;
      v19 = *v10++;
      v20 = v18 | v16;
      result = v5 & v19;
      if ((v4 & v19) == 0 && v20 != 0 && (_DWORD)result != 0)
      {
        v23 = v11[-1];
        v24 = vsubq_f32(v3, v12);
        v25 = vsubq_f32(v23, *v11);
        v24.i32[3] = 0;
        v25.i32[3] = 0;
        v26 = vminnmq_f32(v24, v25);
        v27 = vaddq_f32(v3, v12);
        v27.i32[3] = 0;
        v28 = vaddq_f32(v23, *v11);
        v28.i32[3] = 0;
        v29 = vmaxnmq_f32(v27, v28);
        v3 = vmulq_f32(vaddq_f32(v26, v29), v13);
        v12 = vmulq_f32(vsubq_f32(v29, v26), v13);
        v3.i32[3] = 1.0;
        v12.i32[3] = 0;
      }
      v11 += 2;
      --v14;
    }
    while (v14);
  }
  return result;
}

uint64_t C3DCullingSystem_RayRange_x8<true>(uint64_t a1, unsigned int a2, unsigned int a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  int8x16_t v17;
  const float *v18;
  const float *v19;
  int8x16_t v20;
  int8x16_t v21;
  uint64_t v22;
  float32x4_t v23;
  float32x4_t v24;
  uint64_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  uint64_t v29;
  int8x8_t v30;
  float32x4_t *v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  int8x8_t v64;
  int8x16_t v65;
  unsigned __int32 v66;
  unsigned int v67;
  uint64_t v69;

  if ((a2 & 7) != 0)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      C3DCullingSystem_AABBRange_x8(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  v14 = a2 >> 3;
  if (v14 >= (a3 + 7) >> 3)
    return 0;
  result = 0;
  v16 = *(_QWORD *)(a1 + 776);
  v17 = (int8x16_t)vdupq_n_s32(*(_DWORD *)(a1 + 836) | (~*(_DWORD *)(a1 + 840) << 8));
  v18 = (const float *)(a1 + 816);
  v19 = (const float *)(a1 + 820);
  v20 = (int8x16_t)vld1q_dup_f32(v18);
  v21 = (int8x16_t)vld1q_dup_f32(v19);
  v22 = *(_QWORD *)(a1 + 784);
  v23 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a1, 0);
  v24 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a1, 1);
  v25 = *(_QWORD *)(a1 + 792);
  v26 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a1, 2);
  v27 = *(float32x4_t *)(a1 + 32);
  v28 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v27, 3);
  v29 = *(_QWORD *)(a1 + 768);
  do
  {
    v30 = vmovn_s16((int16x8_t)vbicq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v17, (int8x16_t)vmovl_u16(*(uint16x4_t *)(v16 + 16 * v14)))), (int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v17, (int8x16_t)vmovl_high_u16(*(uint16x8_t *)(v16 + 16 * v14))))), (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(vandq_s8(*(int8x16_t *)(v25 + 32 * v14), v21), vandq_s8(*(int8x16_t *)(v22 + 32 * v14), v20))), (int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(vandq_s8(*(int8x16_t *)(v25 + 32 * v14 + 16), v21),
                                                                                 vandq_s8(*(int8x16_t *)(v22 + 32 * v14 + 16), v20))))));
    if ((vmaxvq_u32((uint32x4_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vorr_s8(vzip1_s8(v30, *(int8x8_t *)v17.i8), vzip2_s8(v30, *(int8x8_t *)v17.i8))), 0x1FuLL))) & 0x80000000) != 0)
    {
      v31 = (float32x4_t *)(v29 + 192 * v14);
      v32 = v31[1];
      v33 = v31[6];
      v34 = v31[7];
      v35 = vmulq_n_f32(vsubq_f32(vsubq_f32(v32, v34), v23), v27.f32[0]);
      v36 = vmulq_n_f32(vsubq_f32(vsubq_f32(*v31, v33), v23), v27.f32[0]);
      v37 = v31[2];
      v38 = v31[3];
      v39 = v31[8];
      v40 = v31[9];
      v41 = vmulq_lane_f32(vsubq_f32(vsubq_f32(v38, v40), v24), *(float32x2_t *)v27.f32, 1);
      v42 = vmulq_lane_f32(vsubq_f32(vsubq_f32(v37, v39), v24), *(float32x2_t *)v27.f32, 1);
      v44 = v31[4];
      v43 = v31[5];
      v45 = v31[10];
      v46 = v31[11];
      v47 = vmulq_laneq_f32(vsubq_f32(vsubq_f32(v43, v46), v26), v27, 2);
      v48 = vmulq_laneq_f32(vsubq_f32(vsubq_f32(v44, v45), v26), v27, 2);
      v49 = vmulq_n_f32(vsubq_f32(vaddq_f32(v32, v34), v23), v27.f32[0]);
      v50 = vmulq_n_f32(vsubq_f32(vaddq_f32(*v31, v33), v23), v27.f32[0]);
      v51 = vmulq_lane_f32(vsubq_f32(vaddq_f32(v38, v40), v24), *(float32x2_t *)v27.f32, 1);
      v52 = vmulq_lane_f32(vsubq_f32(vaddq_f32(v37, v39), v24), *(float32x2_t *)v27.f32, 1);
      v53 = vmulq_laneq_f32(vsubq_f32(vaddq_f32(v43, v46), v26), v27, 2);
      v54 = vmulq_laneq_f32(vsubq_f32(vaddq_f32(v44, v45), v26), v27, 2);
      v55 = vminnmq_f32(v36, v50);
      v56 = vminnmq_f32(v35, v49);
      v57 = vminnmq_f32(v47, v53);
      v58 = vmaxnmq_f32(v36, v50);
      v59 = vmaxnmq_f32(v35, v49);
      v60 = vmaxnmq_f32(v48, v54);
      v61 = vmaxnmq_f32(v47, v53);
      v62 = vmaxnmq_f32(v55, vmaxnmq_f32(vminnmq_f32(v42, v52), vminnmq_f32(v48, v54)));
      v63 = vmaxnmq_f32(v56, vmaxnmq_f32(vminnmq_f32(v41, v51), v57));
      v64 = vand_s8(vmovn_s16((int16x8_t)vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v28, v62), (int16x8_t)vcgtq_f32(v28, v63)), (int8x16_t)vuzp1q_s16((int16x8_t)vcgeq_f32(vminnmq_f32(v58, vminnmq_f32(vmaxnmq_f32(v42, v52), v60)), v62), (int16x8_t)vcgeq_f32(vminnmq_f32(v59, vminnmq_f32(vmaxnmq_f32(v41, v51), v61)), v63)))), v30);
      v65 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s8(v64, *(int8x8_t *)v17.i8)), 0x1FuLL)), (int8x16_t)xmmword_1DD007E80), vandq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip2_s8(v64, *(int8x8_t *)v17.i8)), 0x1FuLL)), (int8x16_t)xmmword_1DD007E70));
      *(int8x8_t *)v65.i8 = vorr_s8(*(int8x8_t *)v65.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v65, v65, 8uLL));
      v66 = vadd_s32(*(int32x2_t *)v65.i8, vdup_lane_s32(*(int32x2_t *)v65.i8, 1)).u32[0];
      v67 = 8 * v14;
      if (v66 && v67 < a3)
      {
        v69 = *(_QWORD *)(a1 + 864);
        do
        {
          if ((v66 & 1) != 0)
          {
            *(_DWORD *)(v69 + 4 * result) = v67;
            result = (result + 1);
          }
          if (v66 < 2)
            break;
          ++v67;
          v66 >>= 1;
        }
        while (v67 < a3);
      }
    }
    ++v14;
  }
  while (v14 != (a3 + 7) >> 3);
  return result;
}

uint64_t C3DCullingSystem_RayRange_x8<false>(uint64_t a1, unsigned int a2, unsigned int a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  const float *v17;
  int8x16_t v18;
  uint64_t v19;
  const float *v20;
  int8x16_t v21;
  int8x16_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  uint64_t v26;
  float32x4_t v27;
  float32x4_t v28;
  unsigned int v29;
  uint64_t v30;
  int8x8_t v31;
  float32x4_t *v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  int8x8_t v65;
  int8x16_t v66;
  unsigned __int32 v67;
  unint64_t v69;

  if ((a2 & 7) != 0)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      C3DCullingSystem_AABBRange_x8(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  v14 = a2 >> 3;
  if (v14 >= (a3 + 7) >> 3)
    return 0;
  result = 0;
  v16 = *(_QWORD *)(a1 + 776);
  v17 = (const float *)(a1 + 816);
  v18 = (int8x16_t)vdupq_n_s32(*(_DWORD *)(a1 + 836) | (~*(_DWORD *)(a1 + 840) << 8));
  v19 = *(_QWORD *)(a1 + 784);
  v20 = (const float *)(a1 + 820);
  v21 = (int8x16_t)vld1q_dup_f32(v17);
  v22 = (int8x16_t)vld1q_dup_f32(v20);
  v23 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a1, 0);
  v24 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a1, 1);
  v25 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a1, 2);
  v26 = *(_QWORD *)(a1 + 792);
  v27 = *(float32x4_t *)(a1 + 32);
  v28 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v27, 3);
  v29 = a2 & 0xFFFFFFF8;
  v30 = *(_QWORD *)(a1 + 768);
  do
  {
    v31 = vmovn_s16((int16x8_t)vbicq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v18, (int8x16_t)vmovl_u16(*(uint16x4_t *)(v16 + 16 * v14)))), (int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v18, (int8x16_t)vmovl_high_u16(*(uint16x8_t *)(v16 + 16 * v14))))), (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(vandq_s8(*(int8x16_t *)(v26 + 32 * v14), v22), vandq_s8(*(int8x16_t *)(v19 + 32 * v14), v21))), (int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(vandq_s8(*(int8x16_t *)(v26 + 32 * v14 + 16), v22),
                                                                                 vandq_s8(*(int8x16_t *)(v19 + 32 * v14 + 16), v21))))));
    if ((vmaxvq_u32((uint32x4_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vorr_s8(vzip1_s8(v31, *(int8x8_t *)v18.i8), vzip2_s8(v31, *(int8x8_t *)v18.i8))), 0x1FuLL))) & 0x80000000) != 0)
    {
      v32 = (float32x4_t *)(v30 + 192 * v14);
      v33 = v32[1];
      v34 = v32[6];
      v35 = v32[7];
      v36 = vmulq_n_f32(vsubq_f32(vsubq_f32(v33, v35), v23), v27.f32[0]);
      v37 = vmulq_n_f32(vsubq_f32(vsubq_f32(*v32, v34), v23), v27.f32[0]);
      v38 = v32[2];
      v39 = v32[3];
      v40 = v32[8];
      v41 = v32[9];
      v42 = vmulq_lane_f32(vsubq_f32(vsubq_f32(v39, v41), v24), *(float32x2_t *)v27.f32, 1);
      v43 = vmulq_lane_f32(vsubq_f32(vsubq_f32(v38, v40), v24), *(float32x2_t *)v27.f32, 1);
      v45 = v32[4];
      v44 = v32[5];
      v46 = v32[10];
      v47 = v32[11];
      v48 = vmulq_laneq_f32(vsubq_f32(vsubq_f32(v44, v47), v25), v27, 2);
      v49 = vmulq_laneq_f32(vsubq_f32(vsubq_f32(v45, v46), v25), v27, 2);
      v50 = vmulq_n_f32(vsubq_f32(vaddq_f32(v33, v35), v23), v27.f32[0]);
      v51 = vmulq_n_f32(vsubq_f32(vaddq_f32(*v32, v34), v23), v27.f32[0]);
      v52 = vmulq_lane_f32(vsubq_f32(vaddq_f32(v39, v41), v24), *(float32x2_t *)v27.f32, 1);
      v53 = vmulq_lane_f32(vsubq_f32(vaddq_f32(v38, v40), v24), *(float32x2_t *)v27.f32, 1);
      v54 = vmulq_laneq_f32(vsubq_f32(vaddq_f32(v44, v47), v25), v27, 2);
      v55 = vmulq_laneq_f32(vsubq_f32(vaddq_f32(v45, v46), v25), v27, 2);
      v56 = vminnmq_f32(v37, v51);
      v57 = vminnmq_f32(v36, v50);
      v58 = vminnmq_f32(v48, v54);
      v59 = vmaxnmq_f32(v37, v51);
      v60 = vmaxnmq_f32(v36, v50);
      v61 = vmaxnmq_f32(v49, v55);
      v62 = vmaxnmq_f32(v48, v54);
      v63 = vmaxnmq_f32(v56, vmaxnmq_f32(vminnmq_f32(v43, v53), vminnmq_f32(v49, v55)));
      v64 = vmaxnmq_f32(v57, vmaxnmq_f32(vminnmq_f32(v42, v52), v58));
      v65 = vand_s8(vmovn_s16((int16x8_t)vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v28, v63), (int16x8_t)vcgtq_f32(v28, v64)), (int8x16_t)vuzp1q_s16((int16x8_t)vcgeq_f32(vminnmq_f32(v59, vminnmq_f32(vmaxnmq_f32(v43, v53), v61)), v63), (int16x8_t)vcgeq_f32(vminnmq_f32(v60, vminnmq_f32(vmaxnmq_f32(v42, v52), v62)), v64)))), v31);
      v66 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s8(v65, *(int8x8_t *)v18.i8)), 0x1FuLL)), (int8x16_t)xmmword_1DD007E80), vandq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip2_s8(v65, *(int8x8_t *)v18.i8)), 0x1FuLL)), (int8x16_t)xmmword_1DD007E70));
      *(int8x8_t *)v66.i8 = vorr_s8(*(int8x8_t *)v66.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v66, v66, 8uLL));
      v67 = vadd_s32(*(int32x2_t *)v66.i8, vdup_lane_s32(*(int32x2_t *)v66.i8, 1)).u32[0];
      if (v67 && 8 * (int)v14 < a3)
      {
        v69 = v29;
        do
        {
          if ((v67 & 1) != 0)
          {
            *(_QWORD *)(*(_QWORD *)(a1 + 856) + 8 * result) = *(_QWORD *)(*(_QWORD *)(a1 + 808) + 8 * v69);
            result = (result + 1);
          }
          if (v67 < 2)
            break;
          ++v69;
          v67 >>= 1;
        }
        while (v69 < a3);
      }
    }
    ++v14;
    v29 += 8;
  }
  while (v14 != (a3 + 7) >> 3);
  return result;
}

uint64_t C3DCullingSystem_RayRange_x4<true>(uint64_t a1, unsigned int a2, unsigned int a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  const float *v17;
  int8x16_t v18;
  uint64_t v19;
  int8x16_t v20;
  const float *v21;
  int8x16_t v22;
  float32x4_t v23;
  uint64_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  uint64_t v29;
  int32x4_t v30;
  float32x4_t *v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  int8x16_t v44;
  unsigned __int32 v45;
  unsigned int v46;
  uint64_t v48;

  if ((a2 & 3) != 0)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      C3DCullingSystem_AABBRange_x8(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  v14 = a2 >> 2;
  if (v14 >= (a3 + 3) >> 2)
    return 0;
  result = 0;
  v16 = *(_QWORD *)(a1 + 776);
  v17 = (const float *)(a1 + 816);
  v18 = (int8x16_t)vdupq_n_s32(*(_DWORD *)(a1 + 836) | (~*(_DWORD *)(a1 + 840) << 8));
  v19 = *(_QWORD *)(a1 + 784);
  v20 = (int8x16_t)vld1q_dup_f32(v17);
  v21 = (const float *)(a1 + 820);
  v22 = (int8x16_t)vld1q_dup_f32(v21);
  v23 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a1, 0);
  v24 = *(_QWORD *)(a1 + 792);
  v25 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a1, 1);
  v26 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a1, 2);
  v27 = *(float32x4_t *)(a1 + 32);
  v28 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v27, 3);
  v29 = *(_QWORD *)(a1 + 768);
  do
  {
    v30 = (int32x4_t)vbicq_s8((int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(v18, (int8x16_t)vmovl_u16(*(uint16x4_t *)(v16 + 8 * v14)))), (int8x16_t)vceqzq_s32((int32x4_t)vorrq_s8(vandq_s8(*(int8x16_t *)(v24 + 16 * v14), v22), vandq_s8(*(int8x16_t *)(v19 + 16 * v14), v20))));
    if ((vmaxvq_u32((uint32x4_t)v30) & 0x80000000) != 0)
    {
      v31 = (float32x4_t *)(v29 + 96 * v14);
      v32 = v31[1];
      v34 = v31[2];
      v33 = v31[3];
      v35 = vmulq_n_f32(vsubq_f32(vsubq_f32(*v31, v33), v23), v27.f32[0]);
      v36 = v31[4];
      v37 = v31[5];
      v38 = vmulq_lane_f32(vsubq_f32(vsubq_f32(v32, v36), v25), *(float32x2_t *)v27.f32, 1);
      v39 = vmulq_laneq_f32(vsubq_f32(vsubq_f32(v34, v37), v26), v27, 2);
      v40 = vmulq_n_f32(vsubq_f32(vaddq_f32(*v31, v33), v23), v27.f32[0]);
      v41 = vmulq_lane_f32(vsubq_f32(vaddq_f32(v32, v36), v25), *(float32x2_t *)v27.f32, 1);
      v42 = vmulq_laneq_f32(vsubq_f32(vaddq_f32(v34, v37), v26), v27, 2);
      v43 = vmaxnmq_f32(vminnmq_f32(v35, v40), vmaxnmq_f32(vminnmq_f32(v38, v41), vminnmq_f32(v39, v42)));
      v44 = vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vand_s8((int8x8_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vcgtq_f32(v28, v43), (int8x16_t)vcgeq_f32(vminnmq_f32(vmaxnmq_f32(v35, v40), vminnmq_f32(vmaxnmq_f32(v38, v41), vmaxnmq_f32(v39, v42))), v43))), (int8x8_t)vmovn_s32(v30))), (int8x16_t)xmmword_1DD007E80);
      *(int8x8_t *)v44.i8 = vorr_s8(*(int8x8_t *)v44.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v44, v44, 8uLL));
      v45 = vadd_s32(*(int32x2_t *)v44.i8, vdup_lane_s32(*(int32x2_t *)v44.i8, 1)).u32[0];
      v46 = 4 * v14;
      if (v45 && v46 < a3)
      {
        v48 = *(_QWORD *)(a1 + 864);
        do
        {
          if ((v45 & 1) != 0)
          {
            *(_DWORD *)(v48 + 4 * result) = v46;
            result = (result + 1);
          }
          if (v45 < 2)
            break;
          ++v46;
          v45 >>= 1;
        }
        while (v46 < a3);
      }
    }
    ++v14;
  }
  while (v14 != (a3 + 3) >> 2);
  return result;
}

uint64_t C3DCullingSystem_RayRange_x4<false>(uint64_t a1, unsigned int a2, unsigned int a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  int8x16_t v17;
  const float *v18;
  const float *v19;
  int8x16_t v20;
  int8x16_t v21;
  uint64_t v22;
  float32x4_t v23;
  float32x4_t v24;
  uint64_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  uint64_t v29;
  unsigned int v30;
  int32x4_t v31;
  float32x4_t *v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  int8x16_t v45;
  unsigned __int32 v46;
  unint64_t v48;

  if ((a2 & 3) != 0)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      C3DCullingSystem_AABBRange_x8(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  v14 = a2 >> 2;
  if (v14 >= (a3 + 3) >> 2)
    return 0;
  result = 0;
  v16 = *(_QWORD *)(a1 + 776);
  v17 = (int8x16_t)vdupq_n_s32(*(_DWORD *)(a1 + 836) | (~*(_DWORD *)(a1 + 840) << 8));
  v18 = (const float *)(a1 + 816);
  v19 = (const float *)(a1 + 820);
  v20 = (int8x16_t)vld1q_dup_f32(v18);
  v21 = (int8x16_t)vld1q_dup_f32(v19);
  v22 = *(_QWORD *)(a1 + 784);
  v23 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a1, 0);
  v24 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a1, 1);
  v25 = *(_QWORD *)(a1 + 792);
  v26 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a1, 2);
  v27 = *(float32x4_t *)(a1 + 32);
  v28 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v27, 3);
  v29 = *(_QWORD *)(a1 + 768);
  v30 = a2 & 0xFFFFFFFC;
  do
  {
    v31 = (int32x4_t)vbicq_s8((int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(v17, (int8x16_t)vmovl_u16(*(uint16x4_t *)(v16 + 8 * v14)))), (int8x16_t)vceqzq_s32((int32x4_t)vorrq_s8(vandq_s8(*(int8x16_t *)(v25 + 16 * v14), v21), vandq_s8(*(int8x16_t *)(v22 + 16 * v14), v20))));
    if ((vmaxvq_u32((uint32x4_t)v31) & 0x80000000) != 0)
    {
      v32 = (float32x4_t *)(v29 + 96 * v14);
      v33 = v32[1];
      v35 = v32[2];
      v34 = v32[3];
      v36 = vmulq_n_f32(vsubq_f32(vsubq_f32(*v32, v34), v23), v27.f32[0]);
      v37 = v32[4];
      v38 = v32[5];
      v39 = vmulq_lane_f32(vsubq_f32(vsubq_f32(v33, v37), v24), *(float32x2_t *)v27.f32, 1);
      v40 = vmulq_laneq_f32(vsubq_f32(vsubq_f32(v35, v38), v26), v27, 2);
      v41 = vmulq_n_f32(vsubq_f32(vaddq_f32(*v32, v34), v23), v27.f32[0]);
      v42 = vmulq_lane_f32(vsubq_f32(vaddq_f32(v33, v37), v24), *(float32x2_t *)v27.f32, 1);
      v43 = vmulq_laneq_f32(vsubq_f32(vaddq_f32(v35, v38), v26), v27, 2);
      v44 = vmaxnmq_f32(vminnmq_f32(v36, v41), vmaxnmq_f32(vminnmq_f32(v39, v42), vminnmq_f32(v40, v43)));
      v45 = vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vand_s8((int8x8_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vcgtq_f32(v28, v44), (int8x16_t)vcgeq_f32(vminnmq_f32(vmaxnmq_f32(v36, v41), vminnmq_f32(vmaxnmq_f32(v39, v42), vmaxnmq_f32(v40, v43))), v44))), (int8x8_t)vmovn_s32(v31))), (int8x16_t)xmmword_1DD007E80);
      *(int8x8_t *)v45.i8 = vorr_s8(*(int8x8_t *)v45.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v45, v45, 8uLL));
      v46 = vadd_s32(*(int32x2_t *)v45.i8, vdup_lane_s32(*(int32x2_t *)v45.i8, 1)).u32[0];
      if (v46 && 4 * (int)v14 < a3)
      {
        v48 = v30;
        do
        {
          if ((v46 & 1) != 0)
          {
            *(_QWORD *)(*(_QWORD *)(a1 + 856) + 8 * result) = *(_QWORD *)(*(_QWORD *)(a1 + 808) + 8 * v48);
            result = (result + 1);
          }
          if (v46 < 2)
            break;
          ++v48;
          v46 >>= 1;
        }
        while (v48 < a3);
      }
    }
    ++v14;
    v30 += 4;
  }
  while (v14 != (a3 + 3) >> 2);
  return result;
}

uint64_t C3DCullingSystem_RayRange_x1<true>(float32x4_t *a1, unsigned int a2, unsigned int a3)
{
  uint64_t result;
  uint64_t v5;
  int v6;
  uint64_t v7;
  __int32 v8;
  __int32 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float32x4_t *v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float v21;
  float v22;

  if (a2 >= a3)
    return 0;
  result = 0;
  v5 = a1[48].i64[1];
  v6 = a1[52].i32[1] | (~a1[52].i32[2] << 8);
  v7 = a1[49].i64[0];
  v8 = a1[51].i32[0];
  v9 = a1[51].i32[1];
  v10 = a1[49].i64[1];
  v11 = a1[54].i64[0];
  v12 = a2;
  v13 = (32 * a2) | 0x10;
  do
  {
    v14 = (float32x4_t *)(a1[48].i64[0] + v13);
    v15 = v14[-1];
    v16 = a1[2];
    v17 = vmulq_f32(v16, vsubq_f32(vsubq_f32(v15, *v14), *a1));
    v17.i32[3] = 0;
    v18 = vmulq_f32(v16, vsubq_f32(vaddq_f32(v15, *v14), *a1));
    v18.i32[3] = 0;
    v19 = vminnmq_f32(v17, v18);
    v20 = vmaxnmq_f32(v17, v18);
    v21 = v19.f32[2];
    if (v19.f32[0] >= v19.f32[2])
      v21 = v19.f32[0];
    if (v21 < v19.f32[1])
      v21 = v19.f32[1];
    v22 = v20.f32[2];
    if (v20.f32[0] <= v20.f32[2])
      v22 = v20.f32[0];
    v20.i32[0] = v20.i32[1];
    if (v22 <= v20.f32[1])
      v20.f32[0] = v22;
    if (*(_DWORD *)(v10 + 4 * v12) & v9 | *(_DWORD *)(v7 + 4 * v12) & v8
      && ((unsigned __int16)v6 & *(_WORD *)(v5 + 2 * v12)) == 0
      && v20.f32[0] >= v21
      && v21 < v16.f32[3])
    {
      *(_DWORD *)(v11 + 4 * result) = v12;
      result = (result + 1);
    }
    ++v12;
    v13 += 32;
  }
  while (a3 != v12);
  return result;
}

uint64_t C3DCullingSystem_RayRange_x1<false>(float32x4_t *a1, unsigned int a2, unsigned int a3)
{
  uint64_t result;
  uint64_t v5;
  int v6;
  uint64_t v7;
  __int32 v8;
  __int32 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float32x4_t *v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float v21;
  float v22;

  if (a2 >= a3)
    return 0;
  result = 0;
  v5 = a1[48].i64[1];
  v6 = a1[52].i32[1] | (~a1[52].i32[2] << 8);
  v7 = a1[49].i64[0];
  v8 = a1[51].i32[0];
  v9 = a1[51].i32[1];
  v10 = a1[49].i64[1];
  v11 = a2;
  v12 = a3;
  v13 = (32 * a2) | 0x10;
  do
  {
    v14 = (float32x4_t *)(a1[48].i64[0] + v13);
    v15 = v14[-1];
    v16 = a1[2];
    v17 = vmulq_f32(v16, vsubq_f32(vsubq_f32(v15, *v14), *a1));
    v17.i32[3] = 0;
    v18 = vmulq_f32(v16, vsubq_f32(vaddq_f32(v15, *v14), *a1));
    v18.i32[3] = 0;
    v19 = vminnmq_f32(v17, v18);
    v20 = vmaxnmq_f32(v17, v18);
    v21 = v19.f32[2];
    if (v19.f32[0] >= v19.f32[2])
      v21 = v19.f32[0];
    if (v21 < v19.f32[1])
      v21 = v19.f32[1];
    v22 = v20.f32[2];
    if (v20.f32[0] <= v20.f32[2])
      v22 = v20.f32[0];
    v20.i32[0] = v20.i32[1];
    if (v22 <= v20.f32[1])
      v20.f32[0] = v22;
    if (*(_DWORD *)(v10 + 4 * v11) & v9 | *(_DWORD *)(v7 + 4 * v11) & v8
      && ((unsigned __int16)v6 & *(_WORD *)(v5 + 2 * v11)) == 0
      && v20.f32[0] >= v21
      && v21 < v16.f32[3])
    {
      *(_QWORD *)(a1[53].i64[1] + 8 * result) = *(_QWORD *)(a1[50].i64[1] + 8 * v11);
      result = (result + 1);
    }
    ++v11;
    v13 += 32;
  }
  while (v12 != v11);
  return result;
}

void __C3DCullingSystem::~__C3DCullingSystem(__C3DCullingSystem *this)
{
  const void *v2;
  NSObject *v3;
  void *v4;

  free(*((void **)this + 14));
  free(*((void **)this + 12));
  free(*((void **)this + 8));
  free(*((void **)this + 13));
  free(*((void **)this + 9));
  free(*((void **)this + 10));
  free(*((void **)this + 11));
  v2 = (const void *)*((_QWORD *)this + 17);
  if (v2)
  {
    CFRelease(v2);
    *((_QWORD *)this + 17) = 0;
  }
  v3 = *((_QWORD *)this + 15);
  if (v3)
  {
    dispatch_release(v3);
    dispatch_release(*((dispatch_object_t *)this + 16));
  }
  v4 = (void *)*((_QWORD *)this + 4);
  if (v4)
  {
    *((_QWORD *)this + 5) = v4;
    operator delete(v4);
  }
}

BOOL HitResultCmp(uint64_t a1, uint64_t a2)
{
  return *(float *)(a1 + 8) < *(float *)(a2 + 8);
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(HitResult const&,HitResult const&),HitResult*,false>(__int128 *a1, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *), uint64_t a4, char a5, __n128 a6)
{
  __int128 *v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int128 *v17;
  __int128 *v18;
  char v19;
  BOOL v20;
  __int128 v21;
  __int128 v22;

LABEL_1:
  v10 = a2 - 1;
  v11 = a1;
LABEL_2:
  v12 = 1 - a4;
  while (2)
  {
    a1 = v11;
    v13 = v12;
    v14 = (char *)a2 - (char *)v11;
    v15 = a2 - v11;
    switch(v15)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if ((*a3)(a2 - 1, v11))
        {
          v22 = *v11;
          *v11 = *v10;
          *v10 = v22;
        }
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(HitResult const&,HitResult const&),HitResult*>(v11, v11 + 1, a2 - 1, a3);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(HitResult const&,HitResult const&),HitResult*>(v11, v11 + 1, v11 + 2, a2 - 1, a3);
        return;
      case 5uLL:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(HitResult const&,HitResult const&),HitResult*>(v11, v11 + 1, v11 + 2, v11 + 3, a2 - 1, a3);
        return;
      default:
        if (v14 <= 383)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(HitResult const&,HitResult const&),HitResult*>((uint64_t)v11, a2, (uint64_t (**)(_OWORD *, _QWORD))a3);
          else
            std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(HitResult const&,HitResult const&),HitResult*>((uint64_t)v11, a2, (uint64_t (**)(_OWORD *, _QWORD))a3);
          return;
        }
        if (v13 != 1)
        {
          v16 = v15 >> 1;
          v17 = &v11[v15 >> 1];
          if ((unint64_t)v14 < 0x801)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(HitResult const&,HitResult const&),HitResult*>(&v11[v15 >> 1], v11, a2 - 1, a3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(HitResult const&,HitResult const&),HitResult*>(v11, &v11[v15 >> 1], a2 - 1, a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(HitResult const&,HitResult const&),HitResult*>(v11 + 1, v17 - 1, a2 - 2, a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(HitResult const&,HitResult const&),HitResult*>(v11 + 2, &v11[v16 + 1], a2 - 3, a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(HitResult const&,HitResult const&),HitResult*>(v17 - 1, v17, &v11[v16 + 1], a3);
            v21 = *v11;
            *v11 = *v17;
            *v17 = v21;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (((*a3)(v11 - 1, v11) & 1) == 0)
          {
            v11 = std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,HitResult *,BOOL (*&)(HitResult const&,HitResult const&)>(v11, a2, a3);
            goto LABEL_16;
          }
LABEL_11:
          v18 = std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,HitResult *,BOOL (*&)(HitResult const&,HitResult const&)>(v11, a2, a3);
          if ((v19 & 1) == 0)
            goto LABEL_14;
          v20 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(HitResult const&,HitResult const&),HitResult*>(v11, v18, a3);
          v11 = v18 + 1;
          if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(HitResult const&,HitResult const&),HitResult*>(v18 + 1, a2, a3))
          {
            v12 = v13 + 1;
            if (v20)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(HitResult const&,HitResult const&),HitResult*,false>(a1, v18, a3, -v13, a5 & 1);
            v11 = v18 + 1;
LABEL_16:
            a5 = 0;
            a4 = -v13;
            goto LABEL_2;
          }
          a4 = -v13;
          a2 = v18;
          if (v20)
            return;
          goto LABEL_1;
        }
        if (v11 != a2)
          std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(HitResult const&,HitResult const&),HitResult*,HitResult*>(v11, a2, a2, (unsigned int (**)(__int128 *, __int128 *))a3, a6);
        return;
    }
  }
}

uint64_t std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(HitResult const&,HitResult const&),HitResult*>(uint64_t result, _OWORD *a2, uint64_t (**a3)(_OWORD *, _QWORD))
{
  uint64_t v3;
  uint64_t v4;
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  uint64_t v12;
  _OWORD *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  if ((_OWORD *)result != a2)
  {
    v15 = v3;
    v16 = v4;
    v6 = (_OWORD *)result;
    v7 = (_OWORD *)(result + 16);
    if ((_OWORD *)(result + 16) != a2)
    {
      v9 = 0;
      v10 = (_OWORD *)result;
      do
      {
        v11 = v10;
        v10 = v7;
        result = (*a3)(v7, v11);
        if ((_DWORD)result)
        {
          v14 = *v10;
          v12 = v9;
          while (1)
          {
            *(_OWORD *)((char *)v6 + v12 + 16) = *(_OWORD *)((char *)v6 + v12);
            if (!v12)
              break;
            v12 -= 16;
            result = (*a3)(&v14, (char *)v6 + v12);
            if ((result & 1) == 0)
            {
              v13 = (_OWORD *)((char *)v6 + v12 + 16);
              goto LABEL_10;
            }
          }
          v13 = v6;
LABEL_10:
          *v13 = v14;
        }
        v7 = v10 + 1;
        v9 += 16;
      }
      while (v10 + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(HitResult const&,HitResult const&),HitResult*>(uint64_t result, _OWORD *a2, uint64_t (**a3)(_OWORD *, _QWORD))
{
  uint64_t v3;
  uint64_t v4;
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  if ((_OWORD *)result != a2)
  {
    v13 = v3;
    v14 = v4;
    v6 = (_OWORD *)result;
    v7 = (_OWORD *)(result + 16);
    if ((_OWORD *)(result + 16) != a2)
    {
      v9 = result - 16;
      do
      {
        v10 = v6;
        v6 = v7;
        result = (*a3)(v7, v10);
        if ((_DWORD)result)
        {
          v12 = *v6;
          v11 = v9;
          do
          {
            *(_OWORD *)(v11 + 32) = *(_OWORD *)(v11 + 16);
            result = (*a3)(&v12, v11);
            v11 -= 16;
          }
          while ((result & 1) != 0);
          *(_OWORD *)(v11 + 32) = v12;
        }
        v7 = v6 + 1;
        v9 += 16;
      }
      while (v6 + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(HitResult const&,HitResult const&),HitResult*>(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t (**a4)(__int128 *, __int128 *))
{
  char v8;
  uint64_t result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v8 = (*a4)(a2, a1);
  result = (*a4)(a3, a2);
  if ((v8 & 1) == 0)
  {
    if (!(_DWORD)result)
      return result;
    v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    if (!(*a4)(a2, a1))
      return 1;
    v12 = *a1;
    *a1 = *a2;
    *a2 = v12;
    return 2;
  }
  if (!(_DWORD)result)
  {
    v13 = *a1;
    *a1 = *a2;
    *a2 = v13;
    if (!(*a4)(a3, a2))
      return 1;
    v14 = *a2;
    *a2 = *a3;
    *a3 = v14;
    return 2;
  }
  v10 = *a1;
  *a1 = *a3;
  *a3 = v10;
  return 1;
}

__int128 *std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,HitResult *,BOOL (*&)(HitResult const&,HitResult const&)>(__int128 *a1, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  __int128 *v4;
  __int128 *v6;
  __int128 *v7;
  int v8;
  __int128 *v9;
  __int128 v11;
  __int128 v12;

  v4 = a2;
  v11 = *a1;
  if (((*a3)(&v11, a2 - 1) & 1) != 0)
  {
    v6 = a1;
    do
      ++v6;
    while (((*a3)(&v11, v6) & 1) == 0);
  }
  else
  {
    v7 = a1 + 1;
    do
    {
      v6 = v7;
      if (v7 >= v4)
        break;
      v8 = (*a3)(&v11, v7);
      v7 = v6 + 1;
    }
    while (!v8);
  }
  if (v6 < v4)
  {
    do
      --v4;
    while (((*a3)(&v11, v4) & 1) != 0);
  }
  while (v6 < v4)
  {
    v12 = *v6;
    *v6 = *v4;
    *v4 = v12;
    do
      ++v6;
    while (!(*a3)(&v11, v6));
    do
      --v4;
    while (((*a3)(&v11, v4) & 1) != 0);
  }
  v9 = v6 - 1;
  if (v6 - 1 != a1)
    *a1 = *v9;
  *v9 = v11;
  return v6;
}

__int128 *std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,HitResult *,BOOL (*&)(HitResult const&,HitResult const&)>(__int128 *a1, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  uint64_t v6;
  __int128 *v7;
  __int128 *v8;
  __int128 *v9;
  __int128 *v10;
  __int128 v11;
  __int128 v13;
  __int128 v14;

  v6 = 0;
  v13 = *a1;
  do
    ++v6;
  while (((*a3)(&a1[v6], &v13) & 1) != 0);
  v7 = &a1[v6];
  v8 = &a1[v6 - 1];
  if (v6 == 1)
  {
    do
    {
      if (v7 >= a2)
        break;
      --a2;
    }
    while (((*a3)(a2, &v13) & 1) == 0);
  }
  else
  {
    do
      --a2;
    while (!(*a3)(a2, &v13));
  }
  if (v7 < a2)
  {
    v9 = &a1[v6];
    v10 = a2;
    do
    {
      v14 = *v9;
      v11 = v14;
      *v9 = *v10;
      *v10 = v11;
      do
        ++v9;
      while (((*a3)(v9, &v13) & 1) != 0);
      do
        --v10;
      while (!(*a3)(v10, &v13));
    }
    while (v9 < v10);
    v8 = v9 - 1;
  }
  if (v8 != a1)
    *a1 = *v8;
  *v8 = v13;
  return v8;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(HitResult const&,HitResult const&),HitResult*>(__int128 *a1, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  uint64_t v6;
  _BOOL8 result;
  __int128 *v8;
  __int128 v9;
  __int128 *v10;
  __int128 *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __int128 *v15;
  __int128 *v16;
  __int128 v17;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = a2 - 1;
      if ((*a3)(a2 - 1, a1))
      {
        v9 = *a1;
        *a1 = *v8;
        *v8 = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(HitResult const&,HitResult const&),HitResult*>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(HitResult const&,HitResult const&),HitResult*>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(HitResult const&,HitResult const&),HitResult*>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v10 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(HitResult const&,HitResult const&),HitResult*>(a1, a1 + 1, a1 + 2, a3);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(v11, v10))
    {
      v17 = *v11;
      v14 = v12;
      while (1)
      {
        v15 = (__int128 *)((char *)a1 + v14);
        *(__int128 *)((char *)a1 + v14 + 48) = *(__int128 *)((char *)a1 + v14 + 32);
        if (v14 == -32)
          break;
        v14 -= 16;
        if (((*a3)(&v17, v15 + 1) & 1) == 0)
        {
          v16 = (__int128 *)((char *)a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v17;
      if (++v13 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v12 += 16;
    if (++v11 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(HitResult const&,HitResult const&),HitResult*>(__int128 *a1, __int128 *a2, __int128 *a3, __int128 *a4, uint64_t (**a5)(__int128 *, __int128 *))
{
  __n128 result;
  __int128 v11;
  __int128 v12;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(HitResult const&,HitResult const&),HitResult*>(a1, a2, a3, a5);
  if ((*a5)(a4, a3))
  {
    v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    if ((*a5)(a3, a2))
    {
      v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      if ((*a5)(a2, a1))
      {
        result = (__n128)*a1;
        *a1 = *a2;
        *a2 = (__int128)result;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(HitResult const&,HitResult const&),HitResult*>(__int128 *a1, __int128 *a2, __int128 *a3, __int128 *a4, __int128 *a5, uint64_t (**a6)(__int128 *, __int128 *))
{
  __n128 v12;
  __n128 result;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v12 = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(HitResult const&,HitResult const&),HitResult*>(a1, a2, a3, a4, a6);
  if (((unsigned int (*)(__int128 *, __int128 *, __n128))*a6)(a5, a4, v12))
  {
    v14 = *a4;
    *a4 = *a5;
    *a5 = v14;
    if ((*a6)(a4, a3))
    {
      v15 = *a3;
      *a3 = *a4;
      *a4 = v15;
      if ((*a6)(a3, a2))
      {
        v16 = *a2;
        *a2 = *a3;
        *a3 = v16;
        if ((*a6)(a2, a1))
        {
          result = (__n128)*a1;
          *a1 = *a2;
          *a2 = (__int128)result;
        }
      }
    }
  }
  return result;
}

__int128 *std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(HitResult const&,HitResult const&),HitResult*,HitResult*>(__int128 *a1, __int128 *a2, __int128 *a3, unsigned int (**a4)(__int128 *, __int128 *), __n128 a5)
{
  __int128 *v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 *v13;
  __int128 *v14;
  __int128 *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 *v19;
  __int128 *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v25;
  __int128 v26;

  if (a1 != a2)
  {
    v7 = a2;
    v9 = (char *)a2 - (char *)a1;
    v10 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      v11 = (unint64_t)(v10 - 2) >> 1;
      v12 = v11 + 1;
      v13 = &a1[v11];
      do
      {
        a5.n128_f64[0] = std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(HitResult const&,HitResult const&),HitResult*>((uint64_t)a1, a4, v10, v13--);
        --v12;
      }
      while (v12);
    }
    v14 = v7;
    if (v7 != a3)
    {
      v15 = v7;
      do
      {
        if (((unsigned int (*)(__int128 *, __int128 *, __n128))*a4)(v15, a1, a5))
        {
          v16 = *v15;
          *v15 = *a1;
          *a1 = v16;
          a5.n128_f64[0] = std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(HitResult const&,HitResult const&),HitResult*>((uint64_t)a1, a4, v10, a1);
        }
        ++v15;
      }
      while (v15 != a3);
      v14 = a3;
    }
    if (v9 < 17)
    {
      return v14;
    }
    else
    {
      v25 = v14;
      v17 = (unint64_t)v9 >> 4;
      do
      {
        v18 = 0;
        v26 = *a1;
        v19 = a1;
        do
        {
          v20 = &v19[v18 + 1];
          v21 = (2 * v18) | 1;
          v22 = 2 * v18 + 2;
          if (v22 < v17 && (*a4)(&v19[v18 + 1], &v19[v18 + 2]))
          {
            ++v20;
            v21 = v22;
          }
          *v19 = *v20;
          v19 = v20;
          v18 = v21;
        }
        while (v21 <= (uint64_t)((unint64_t)(v17 - 2) >> 1));
        if (v20 == --v7)
        {
          *v20 = v26;
        }
        else
        {
          *v20 = *v7;
          *v7 = v26;
          std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(HitResult const&,HitResult const&),HitResult*>((uint64_t)a1, (uint64_t)(v20 + 1), (uint64_t (**)(__int128 *, __int128 *))a4, v20 + 1 - a1);
        }
      }
      while (v17-- > 2);
      return v25;
    }
  }
  return a3;
}

double std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(HitResult const&,HitResult const&),HitResult*>(uint64_t a1, unsigned int (**a2)(__int128 *, __int128 *), uint64_t a3, __int128 *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __int128 *v7;
  int64_t v9;
  uint64_t v12;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  double result;
  __int128 *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  v6 = a3 - 2;
  if (a3 >= 2)
  {
    v21 = v4;
    v22 = v5;
    v7 = a4;
    v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= ((uint64_t)a4 - a1) >> 4)
    {
      v12 = ((uint64_t)a4 - a1) >> 3;
      v13 = v12 + 1;
      v14 = (__int128 *)(a1 + 16 * (v12 + 1));
      v15 = v12 + 2;
      if (v12 + 2 < a3 && (*a2)(v14, v14 + 1))
      {
        ++v14;
        v13 = v15;
      }
      if ((((uint64_t (*)(__int128 *, __int128 *))*a2)(v14, v7) & 1) == 0)
      {
        v20 = *v7;
        do
        {
          v17 = v14;
          *v7 = *v14;
          if (v9 < v13)
            break;
          v18 = (2 * v13) | 1;
          v14 = (__int128 *)(a1 + 16 * v18);
          v19 = 2 * v13 + 2;
          if (v19 < a3)
          {
            if ((*a2)((__int128 *)(a1 + 16 * v18), v14 + 1))
            {
              ++v14;
              v18 = v19;
            }
          }
          v7 = v17;
          v13 = v18;
        }
        while (!(*a2)(v14, &v20));
        result = *(double *)&v20;
        *v17 = v20;
      }
    }
  }
  return result;
}

double std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(HitResult const&,HitResult const&),HitResult*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(__int128 *, __int128 *), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v9;
  __int128 *v10;
  __int128 *v11;
  double result;
  __int128 *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v6 = a4 - 2;
  if (a4 >= 2)
  {
    v15 = v4;
    v16 = v5;
    v9 = v6 >> 1;
    v10 = (__int128 *)(a1 + 16 * (v6 >> 1));
    v11 = (__int128 *)(a2 - 16);
    if ((*a3)(v10, (__int128 *)(a2 - 16)))
    {
      v14 = *v11;
      do
      {
        v13 = v10;
        *v11 = *v10;
        if (!v9)
          break;
        v9 = (v9 - 1) >> 1;
        v10 = (__int128 *)(a1 + 16 * v9);
        v11 = v13;
      }
      while (((*a3)(v10, &v14) & 1) != 0);
      result = *(double *)&v14;
      *v13 = v14;
    }
  }
  return result;
}

uint64_t C3DCullingSystem_CullRange_x8<false,true>(uint64_t a1)
{
  unsigned int v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  int32x2_t *v5;
  int32x2_t *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  int8x16_t v21;
  int32x2_t *v22;
  uint64_t i;
  int32x4_t v24;
  int8x16_t v25;
  int8x16_t *v26;
  int8x16_t v27;
  int8x16_t v28;
  int32x4_t v29;
  int8x16_t *v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  uint64_t result;
  int32x2_t v35;
  const float *v36;
  int8x16_t v37;
  int8x16_t v38;
  int32x2_t v39;
  const float *v40;
  int8x16_t v41;
  const float *v42;
  const float *v43;
  int8x16_t v44;
  int8x16_t v45;
  int32x2_t v46;
  int8x16_t v47;
  unsigned int v48;
  int32x2_t v49;
  int8x16_t *v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t *v54;
  int8x16_t v55;
  int8x16_t v56;
  uint16x8_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  uint64_t v62;
  unsigned int v63;
  int v64;
  _OWORD *v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int v80;
  int v81;
  int32x4_t v82;
  int32x4_t v83;
  unsigned int v84;
  int8x16_t *v85;
  float32x4_t *v86;
  int8x16_t *v87;
  unsigned int v88;
  unint64_t v89;
  int v90;
  int8x16_t v91;
  int8x16_t v92;
  _OWORD v93[674];
  uint64_t v94;

  MEMORY[0x1E0C80A78](a1);
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v94 = *MEMORY[0x1E0C80C00];
  if ((v3 & 7) != 0)
  {
    v7 = scn_default_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
      C3DCullingSystem_AABBRange_x8(v7, v8, v9, v10, v11, v12, v13, v14);
  }
  v15 = v4 >> 3;
  v16 = (v2 + 7) >> 3;
  v17 = v6[110].u32[0];
  if ((_DWORD)v17)
  {
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21.i64[0] = 0x8000000080000000;
    v21.i64[1] = 0x8000000080000000;
    v22 = v6;
    do
    {
      for (i = 0; i != 12; i += 2)
      {
        v24 = *(int32x4_t *)v22[i].i8;
        v25 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v24.i8, 0);
        v26 = (int8x16_t *)&v93[2 * v19 + 290];
        *v26 = v25;
        v26[1] = v25;
        v27 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v24.i8, 1);
        v26[2] = v27;
        v26[3] = v27;
        v28 = (int8x16_t)vdupq_laneq_s32(v24, 2);
        v29 = vdupq_laneq_s32(v24, 3);
        v26[4] = v28;
        v26[5] = v28;
        v26[6] = (int8x16_t)v29;
        v26[7] = (int8x16_t)v29;
        v30 = (int8x16_t *)&v93[2 * v20 + 2];
        v31 = vandq_s8(v25, v21);
        *v30 = v31;
        v30[1] = v31;
        v32 = vandq_s8(v27, v21);
        v30[2] = v32;
        v30[3] = v32;
        v33 = vandq_s8(v28, v21);
        v30[4] = v33;
        v30[5] = v33;
        v19 += 4;
        v20 += 3;
      }
      ++v18;
      v22 += 12;
    }
    while (v18 != v17);
  }
  if (v15 >= v16)
    return 0;
  result = 0;
  v35 = v6[97];
  v36 = (const float *)&v6[102];
  v37 = (int8x16_t)vdupq_n_s32(v6[104].i32[1] | (~v6[105].i32[0] << 8));
  v38 = (int8x16_t)vdupq_lane_s32(v6[104], 0);
  v39 = v6[98];
  v40 = (const float *)&v6[102] + 1;
  v41 = (int8x16_t)vld1q_dup_f32(v36);
  v42 = (const float *)&v6[103];
  v43 = (const float *)&v6[103] + 1;
  v44 = (int8x16_t)vld1q_dup_f32(v42);
  v45 = (int8x16_t)vld1q_dup_f32(v40);
  v46 = v6[99];
  v47 = (int8x16_t)vld1q_dup_f32(v43);
  v48 = v4 & 0xFFFFFFF8;
  v49 = v6[96];
  v91 = v38;
  v92 = v37;
  do
  {
    v50 = (int8x16_t *)(*(_QWORD *)&v39 + 32 * v15);
    v51 = *v50;
    v52 = v50[1];
    v53 = vandq_s8(*v50, v41);
    v54 = (int8x16_t *)(*(_QWORD *)&v46 + 32 * v15);
    v55 = v54[1];
    v56 = (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(vandq_s8(*v54, v45), v53)), (int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(vandq_s8(v55, v45), vandq_s8(v52, v41))));
    v57 = *(uint16x8_t *)(*(_QWORD *)&v35 + 16 * v15);
    v58 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v57.i8);
    v59 = (int8x16_t)vmovl_high_u16(v57);
    *(int8x8_t *)v51.i8 = vmovn_s16((int16x8_t)vandq_s8(vbicq_s8(vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v38, v58)), (int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v38, v59)))), v56), (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(vorrq_s8(vandq_s8(*v54, v47), vandq_s8(v51, v44)), vandq_s8(v37, v58))), (int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(vorrq_s8(vandq_s8(v55, v47), vandq_s8(v52, v44)), vandq_s8(v37, v59))))));
    v60 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)v51.i8, *(int8x8_t *)v37.i8)), 0x1FuLL));
    v61 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)v51.i8, *(int8x8_t *)v37.i8)), 0x1FuLL));
    if ((vmaxvq_u32((uint32x4_t)vorrq_s8(v61, v60)) & 0x80000000) != 0)
    {
      if ((_DWORD)v17)
      {
        v62 = 0;
        v63 = 0;
        v64 = 0;
        v65 = (_OWORD *)(*(_QWORD *)&v49 + 192 * v15);
        v67 = *((int8x16_t *)v65 + 6);
        v66 = *((int8x16_t *)v65 + 7);
        v69 = *((int8x16_t *)v65 + 8);
        v68 = *((int8x16_t *)v65 + 9);
        v71 = *((int8x16_t *)v65 + 10);
        v70 = *((int8x16_t *)v65 + 11);
        v73 = *(float32x4_t *)v65;
        v72 = *((float32x4_t *)v65 + 1);
        v75 = *((float32x4_t *)v65 + 2);
        v74 = *((float32x4_t *)v65 + 3);
        v77 = *((float32x4_t *)v65 + 4);
        v76 = *((float32x4_t *)v65 + 5);
        v78 = 0uLL;
        v79 = 0uLL;
        do
        {
          v80 = 0;
          v81 = v64 + 24;
          v82.i64[0] = -1;
          v82.i64[1] = -1;
          v83.i64[0] = -1;
          v83.i64[1] = -1;
          v84 = v63;
          do
          {
            v85 = (int8x16_t *)&v93[2 * v84 + 2];
            v86 = (float32x4_t *)&v93[2 * (v64 + v80) + 290];
            v83 = (int32x4_t)vandq_s8((int8x16_t)v83, (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32(v86[7], v86[1], vsubq_f32(v72, (float32x4_t)veorq_s8(v85[1], v66))), v86[3], vsubq_f32(v74, (float32x4_t)veorq_s8(v85[3], v68))), v86[5], vsubq_f32(v76, (float32x4_t)veorq_s8(v85[5], v70))));
            v82 = (int32x4_t)vandq_s8((int8x16_t)v82, (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32(v86[6], *v86, vsubq_f32(v73, (float32x4_t)veorq_s8(*v85, v67))), v86[2], vsubq_f32(v75, (float32x4_t)veorq_s8(v85[2], v69))), v86[4], vsubq_f32(v77, (float32x4_t)veorq_s8(v85[4], v71))));
            v84 += 3;
            v80 += 4;
          }
          while (v80 != 24);
          v63 += 18;
          v87 = (int8x16_t *)((char *)&unk_1DD007F40 + 32 * v62);
          v78 = vorrq_s8(vandq_s8(vandq_s8(*v87, v61), (int8x16_t)vcltzq_s32(v82)), v78);
          v79 = vorrq_s8(vandq_s8(vandq_s8(v87[1], v60), (int8x16_t)vcltzq_s32(v83)), v79);
          ++v62;
          v64 = v81;
        }
        while (v62 != v17);
      }
      else
      {
        v78 = 0uLL;
        v79 = 0uLL;
      }
      if ((vminvq_u32((uint32x4_t)vceqzq_s32((int32x4_t)vorrq_s8(v78, v79))) & 0x80000000) != 0)
      {
        v38 = v91;
        v37 = v92;
      }
      else
      {
        v38 = v91;
        v37 = v92;
        if (8 * (int)v15 < v2)
        {
          v88 = 0;
          v89 = v48;
          do
          {
            v93[0] = v78;
            v93[1] = v79;
            v90 = *((_DWORD *)v93 + (v88 & 7));
            if ((_BYTE)v90)
            {
              *(_BYTE *)(*(_QWORD *)&v6[109] + result) = v90;
              *(_QWORD *)(*(_QWORD *)&v6[107] + 8 * result) = *(_QWORD *)(*(_QWORD *)&v6[101] + 8 * v89);
              result = (result + 1);
            }
            if (v88 > 6)
              break;
            ++v88;
            ++v89;
          }
          while (v89 < v2);
        }
      }
    }
    ++v15;
    v48 += 8;
  }
  while (v15 != v16);
  return result;
}

uint64_t C3DCullingSystem_CullRange_x4<false,true>(uint64_t a1)
{
  unsigned int v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  int8x16_t v21;
  uint64_t v22;
  uint64_t i;
  int32x4_t v24;
  int8x16_t *v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t *v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  int8x16_t v33;
  const float *v34;
  const float *v35;
  int32x4_t v36;
  uint64_t v37;
  const float *v38;
  int8x16_t v39;
  const float *v40;
  const float *v41;
  int8x16_t v42;
  uint64_t v43;
  int8x16_t v44;
  int8x16_t v45;
  unsigned int v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int32x4_t v51;
  int8x16_t v52;
  uint64_t v53;
  unsigned int v54;
  int v55;
  uint64_t v56;
  int32x4_t v57;
  int v58;
  int32x4_t v59;
  unsigned int v60;
  float32x4_t *v61;
  unsigned int v62;
  unint64_t v63;
  int v64;
  _OWORD v65[337];
  uint64_t v66;

  MEMORY[0x1E0C80A78](a1);
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v66 = *MEMORY[0x1E0C80C00];
  if ((v3 & 3) != 0)
  {
    v7 = scn_default_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
      C3DCullingSystem_AABBRange_x8(v7, v8, v9, v10, v11, v12, v13, v14);
  }
  v15 = v4 >> 2;
  v16 = (v2 + 3) >> 2;
  v17 = *(unsigned int *)(v6 + 880);
  if ((_DWORD)v17)
  {
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21.i64[0] = 0x8000000080000000;
    v21.i64[1] = 0x8000000080000000;
    v22 = v6;
    do
    {
      for (i = 0; i != 96; i += 16)
      {
        v24 = *(int32x4_t *)(v22 + i);
        v25 = (int8x16_t *)&v65[v19 + 145];
        v26 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v24.i8, 0);
        v27 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v24.i8, 1);
        *v25 = v26;
        v25[1] = v27;
        v28 = (int8x16_t)vdupq_laneq_s32(v24, 2);
        v25[2] = v28;
        v25[3] = (int8x16_t)vdupq_laneq_s32(v24, 3);
        v29 = (int8x16_t *)&v65[v20 + 1];
        *v29 = vandq_s8(v26, v21);
        v29[1] = vandq_s8(v27, v21);
        v29[2] = vandq_s8(v28, v21);
        v19 += 4;
        v20 += 3;
      }
      ++v18;
      v22 += 96;
    }
    while (v18 != v17);
  }
  if (v15 >= v16)
    return 0;
  result = 0;
  v31 = *(_QWORD *)(v6 + 768);
  v32 = *(_QWORD *)(v6 + 776);
  v33 = (int8x16_t)vdupq_n_s32(*(_DWORD *)(v6 + 836) | (~*(_DWORD *)(v6 + 840) << 8));
  v34 = (const float *)(v6 + 816);
  v35 = (const float *)(v6 + 832);
  v36 = (int32x4_t)vld1q_dup_f32(v35);
  v37 = *(_QWORD *)(v6 + 784);
  v38 = (const float *)(v6 + 820);
  v39 = (int8x16_t)vld1q_dup_f32(v34);
  v40 = (const float *)(v6 + 824);
  v41 = (const float *)(v6 + 828);
  v42 = (int8x16_t)vld1q_dup_f32(v40);
  v43 = *(_QWORD *)(v6 + 792);
  v44 = (int8x16_t)vld1q_dup_f32(v38);
  v45 = (int8x16_t)vld1q_dup_f32(v41);
  v46 = v4 & 0xFFFFFFFC;
  do
  {
    v47 = *(int8x16_t *)(v37 + 16 * v15);
    v48 = *(int8x16_t *)(v43 + 16 * v15);
    v49 = (int8x16_t)vceqzq_s32((int32x4_t)vorrq_s8(vandq_s8(v48, v44), vandq_s8(v47, v39)));
    v50 = vorrq_s8(vandq_s8(v48, v45), vandq_s8(v47, v42));
    v51 = (int32x4_t)vmovl_u16(*(uint16x4_t *)(v32 + 8 * v15));
    v52 = vandq_s8(vbicq_s8((int8x16_t)vtstq_s32(v36, v51), v49), (int8x16_t)vceqzq_s32((int32x4_t)vorrq_s8(v50, vandq_s8(v33, (int8x16_t)v51))));
    if ((vmaxvq_u32((uint32x4_t)v52) & 0x80000000) != 0)
    {
      if ((_DWORD)v17)
      {
        v53 = 0;
        v54 = 0;
        v55 = 0;
        v57 = 0uLL;
        do
        {
          v58 = 0;
          v59.i64[0] = -1;
          v59.i64[1] = -1;
          v60 = v54;
          do
          {
            v61 = (float32x4_t *)&v65[(v55 + v58) + 145];
            v56 = v31 + 96 * v15;
            v59 = (int32x4_t)vandq_s8((int8x16_t)v59, (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32(v61[3], *v61, vsubq_f32(*(float32x4_t *)v56, (float32x4_t)veorq_s8((int8x16_t)v65[v60 + 1], *(int8x16_t *)(v56 + 48)))), v61[1], vsubq_f32(*(float32x4_t *)(v56 + 16), (float32x4_t)veorq_s8((int8x16_t)v65[v60 + 2], *(int8x16_t *)(v56 + 64)))), v61[2], vsubq_f32(*(float32x4_t *)(v56 + 32), (float32x4_t)veorq_s8((int8x16_t)v65[v60 + 3], *(int8x16_t *)(v56 + 80)))));
            v60 += 3;
            v58 += 4;
          }
          while (v58 != 24);
          v54 += 18;
          v57 = (int32x4_t)vorrq_s8(vandq_s8(vandq_s8(xmmword_1DD008040[v53++], v52), (int8x16_t)vcltzq_s32(v59)), (int8x16_t)v57);
          v55 += 24;
        }
        while (v53 != v17);
      }
      else
      {
        v57 = 0uLL;
      }
      if ((vminvq_u32((uint32x4_t)vceqzq_s32(v57)) & 0x80000000) == 0 && 4 * (int)v15 < v2)
      {
        v62 = 0;
        v63 = v46;
        do
        {
          v65[0] = v57;
          v64 = *(_DWORD *)((unint64_t)v65 & 0xFFFFFFFFFFFFFFF3 | (4 * (v62 & 3)));
          if ((_BYTE)v64)
          {
            *(_BYTE *)(*(_QWORD *)(v6 + 872) + result) = v64;
            *(_QWORD *)(*(_QWORD *)(v6 + 856) + 8 * result) = *(_QWORD *)(*(_QWORD *)(v6 + 808) + 8 * v63);
            result = (result + 1);
          }
          if (v62 > 2)
            break;
          ++v62;
          ++v63;
        }
        while (v63 < v2);
      }
    }
    ++v15;
    v46 += 4;
  }
  while (v15 != v16);
  return result;
}

uint64_t C3DCullingSystem_CullRange_x1<false,true>(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t result;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  BOOL v11;
  unint64_t v12;
  int v13;
  int v14;
  float32x4_t *v15;
  float32x4_t v16;
  float32x4_t v17;
  unint64_t v18;
  BOOL v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  float32x4_t v23;
  int8x16_t v24;
  float32x4_t v25;
  _OWORD v26[6];

  if (a2 >= a3)
    return 0;
  result = 0;
  v5 = *(_DWORD *)(a1 + 836) | (~*(_DWORD *)(a1 + 840) << 8);
  v6 = *(_DWORD *)(a1 + 832);
  v7 = a2;
  do
  {
    v8 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 776) + 2 * v7);
    v9 = v6 & v8;
    v10 = v5 & v8;
    if (v9)
      v11 = v10 == 0;
    else
      v11 = 0;
    if (v11)
    {
      v12 = *(unsigned int *)(*(_QWORD *)(a1 + 784) + 4 * v7) | ((unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 792) + 4 * v7) << 32);
      if ((v12 & *(_QWORD *)(a1 + 816)) != 0 && (*(_QWORD *)(a1 + 824) & v12) == 0)
      {
        v13 = 0;
        v14 = 0;
        v15 = (float32x4_t *)(*(_QWORD *)(a1 + 768) + 32 * v7);
        v16 = *v15;
        v17 = v15[1];
        do
        {
          v18 = 0;
          v19 = 0;
          v20 = *(_OWORD *)(a1 + 48);
          v26[2] = *(_OWORD *)(a1 + 32);
          v26[3] = v20;
          v21 = *(_OWORD *)(a1 + 80);
          v26[4] = *(_OWORD *)(a1 + 64);
          v26[5] = v21;
          v22 = *(_OWORD *)(a1 + 16);
          v26[0] = *(_OWORD *)a1;
          v26[1] = v22;
          do
          {
            v23 = (float32x4_t)v26[v18];
            v24 = (int8x16_t)vmulq_f32(v16, v23);
            v25 = vmulq_f32(v17, vabsq_f32(v23));
            if (vaddv_f32(vadd_f32(*(float32x2_t *)v24.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL))) > vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2), vaddq_f32(v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 1))).f32[0])
              break;
            v19 = v18++ > 4;
          }
          while (v18 != 6);
          v14 |= (v19 << v13++);
        }
        while (v13 != 6);
        if (v14)
        {
          *(_BYTE *)(*(_QWORD *)(a1 + 872) + result) = v14;
          *(_QWORD *)(*(_QWORD *)(a1 + 856) + 8 * result) = *(_QWORD *)(*(_QWORD *)(a1 + 808) + 8 * v7);
          result = (result + 1);
        }
      }
    }
    ++v7;
  }
  while (v7 != a3);
  return result;
}

uint64_t C3DCullingSystem_CullRange_x8<true,false>(int32x2_t *a1, unsigned int a2, unsigned int a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int8x16_t v20;
  int32x2_t *v21;
  uint64_t i;
  int32x4_t v23;
  int8x16_t v24;
  int8x16_t *v25;
  int8x16_t v26;
  int8x16_t v27;
  int32x4_t v28;
  int8x16_t *v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  uint64_t result;
  int32x2_t v34;
  const float *v35;
  int8x16_t v36;
  int8x16_t v37;
  int32x2_t v38;
  int8x16_t v39;
  const float *v40;
  const float *v41;
  const float *v42;
  int8x16_t v43;
  int32x2_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int32x2_t v47;
  int8x16_t *v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t *v52;
  int8x16_t v53;
  int8x16_t v54;
  uint16x8_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int32x4_t v58;
  int32x4_t v59;
  unsigned int v60;
  int v61;
  int v62;
  uint64_t v63;
  int v64;
  unsigned int v65;
  int8x16_t *v66;
  float32x4_t *v67;
  int8x16_t v68;
  unsigned __int32 v69;
  unsigned int v70;
  BOOL v71;
  int32x2_t v72;
  _OWORD v73[84];
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  if ((a2 & 7) != 0)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      C3DCullingSystem_AABBRange_x8(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  v14 = a2 >> 3;
  v15 = (a3 + 7) >> 3;
  v16 = a1[110].u32[0];
  if ((_DWORD)v16)
  {
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20.i64[0] = 0x8000000080000000;
    v20.i64[1] = 0x8000000080000000;
    v21 = a1;
    do
    {
      for (i = 0; i != 12; i += 2)
      {
        v23 = *(int32x4_t *)v21[i].i8;
        v24 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v23.i8, 0);
        v25 = (int8x16_t *)&v73[2 * v18 + 36];
        *v25 = v24;
        v25[1] = v24;
        v26 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v23.i8, 1);
        v25[2] = v26;
        v25[3] = v26;
        v27 = (int8x16_t)vdupq_laneq_s32(v23, 2);
        v28 = vdupq_laneq_s32(v23, 3);
        v25[4] = v27;
        v25[5] = v27;
        v25[6] = (int8x16_t)v28;
        v25[7] = (int8x16_t)v28;
        v29 = (int8x16_t *)&v73[2 * v19];
        v30 = vandq_s8(v24, v20);
        *v29 = v30;
        v29[1] = v30;
        v31 = vandq_s8(v26, v20);
        v29[2] = v31;
        v29[3] = v31;
        v32 = vandq_s8(v27, v20);
        v29[4] = v32;
        v29[5] = v32;
        v18 += 4;
        v19 += 3;
      }
      ++v17;
      v21 += 12;
    }
    while (v17 != v16);
  }
  if (v14 >= v15)
    return 0;
  result = 0;
  v34 = a1[97];
  v35 = (const float *)&a1[102];
  v36 = (int8x16_t)vdupq_n_s32(a1[104].i32[1] | (~a1[105].i32[0] << 8));
  v37 = (int8x16_t)vdupq_lane_s32(a1[104], 0);
  v38 = a1[98];
  v39 = (int8x16_t)vld1q_dup_f32(v35);
  v40 = (const float *)&a1[102] + 1;
  v41 = (const float *)&a1[103];
  v42 = (const float *)&a1[103] + 1;
  v43 = (int8x16_t)vld1q_dup_f32(v41);
  v44 = a1[99];
  v45 = (int8x16_t)vld1q_dup_f32(v40);
  v46 = (int8x16_t)vld1q_dup_f32(v42);
  v47 = a1[96];
  do
  {
    v48 = (int8x16_t *)(*(_QWORD *)&v38 + 32 * v14);
    v49 = *v48;
    v50 = v48[1];
    v51 = vandq_s8(*v48, v39);
    v52 = (int8x16_t *)(*(_QWORD *)&v44 + 32 * v14);
    v53 = v52[1];
    v54 = (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(vandq_s8(*v52, v45), v51)), (int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(vandq_s8(v53, v45), vandq_s8(v50, v39))));
    v55 = *(uint16x8_t *)(*(_QWORD *)&v34 + 16 * v14);
    v56 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v55.i8);
    v57 = (int8x16_t)vmovl_high_u16(v55);
    *(int8x8_t *)v50.i8 = vmovn_s16((int16x8_t)vandq_s8(vbicq_s8(vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v37, v56)), (int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v37, v57)))), v54), (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(vorrq_s8(vandq_s8(*v52, v46), vandq_s8(v49, v43)), vandq_s8(v36, v56))), (int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(vorrq_s8(vandq_s8(v53, v46), vandq_s8(v50, v43)), vandq_s8(v36, v57))))));
    v58 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)v50.i8, *(int8x8_t *)v36.i8)), 0x1FuLL));
    v59 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)v50.i8, *(int8x8_t *)v36.i8)), 0x1FuLL));
    if ((vmaxvq_u32((uint32x4_t)vorrq_s8((int8x16_t)v59, (int8x16_t)v58)) & 0x80000000) != 0)
    {
      if ((_DWORD)v16)
      {
        v60 = 0;
        v61 = 0;
        v62 = 0;
        v63 = *(_QWORD *)&v47 + 192 * v14;
        do
        {
          v64 = 0;
          v65 = v60;
          do
          {
            v66 = (int8x16_t *)&v73[2 * v65];
            v67 = (float32x4_t *)&v73[2 * (v61 + v64) + 36];
            v58 = (int32x4_t)vandq_s8((int8x16_t)v58, (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32(v67[7], v67[1], vsubq_f32(*(float32x4_t *)(v63 + 16), (float32x4_t)veorq_s8(v66[1], *(int8x16_t *)(v63 + 112)))), v67[3], vsubq_f32(*(float32x4_t *)(v63 + 48), (float32x4_t)veorq_s8(v66[3], *(int8x16_t *)(v63 + 144)))), v67[5], vsubq_f32(*(float32x4_t *)(v63 + 80), (float32x4_t)veorq_s8(v66[5], *(int8x16_t *)(v63 + 176)))));
            v59 = (int32x4_t)vandq_s8((int8x16_t)v59, (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32(v67[6], *v67, vsubq_f32(*(float32x4_t *)v63, (float32x4_t)veorq_s8(*v66, *(int8x16_t *)(v63 + 96)))), v67[2], vsubq_f32(*(float32x4_t *)(v63 + 32), (float32x4_t)veorq_s8(v66[2], *(int8x16_t *)(v63 + 128)))), v67[4], vsubq_f32(*(float32x4_t *)(v63 + 64), (float32x4_t)veorq_s8(v66[4], *(int8x16_t *)(v63 + 160)))));
            v65 += 3;
            v64 += 4;
          }
          while (v64 != 24);
          v60 += 18;
          ++v62;
          v61 += 24;
        }
        while (v62 != (_DWORD)v16);
      }
      v68 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s32(v59), (int8x16_t)xmmword_1DD007E80), vandq_s8((int8x16_t)vcltzq_s32(v58), (int8x16_t)xmmword_1DD007E70));
      *(int8x8_t *)v68.i8 = vorr_s8(*(int8x8_t *)v68.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v68, v68, 8uLL));
      v69 = vadd_s32(*(int32x2_t *)v68.i8, vdup_lane_s32(*(int32x2_t *)v68.i8, 1)).u32[0];
      v70 = 8 * v14;
      if (v69)
        v71 = v70 >= a3;
      else
        v71 = 1;
      if (!v71)
      {
        v72 = a1[108];
        do
        {
          if ((v69 & 1) != 0)
          {
            *(_DWORD *)(*(_QWORD *)&v72 + 4 * result) = v70;
            result = (result + 1);
          }
          if (v69 < 2)
            break;
          ++v70;
          v69 >>= 1;
        }
        while (v70 < a3);
      }
    }
    ++v14;
  }
  while (v14 != v15);
  return result;
}

uint64_t C3DCullingSystem_CullRange_x4<true,false>(uint64_t a1, unsigned int a2, unsigned int a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  int8x16_t v20;
  uint64_t v21;
  uint64_t i;
  int32x4_t v23;
  int8x16_t *v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t *v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  const float *v32;
  int8x16_t v33;
  const float *v34;
  int32x4_t v35;
  uint64_t v36;
  const float *v37;
  int8x16_t v38;
  const float *v39;
  const float *v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  uint64_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int32x4_t v49;
  int32x4_t v50;
  unsigned int v51;
  int v52;
  int v53;
  uint64_t v54;
  int v55;
  unsigned int v56;
  float32x4_t *v57;
  int8x16_t v58;
  unsigned __int32 v59;
  unsigned int v60;
  BOOL v61;
  uint64_t v62;
  _OWORD v63[42];
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  if ((a2 & 3) != 0)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      C3DCullingSystem_AABBRange_x8(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  v14 = a2 >> 2;
  v15 = (a3 + 3) >> 2;
  v16 = *(unsigned int *)(a1 + 880);
  if ((_DWORD)v16)
  {
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20.i64[0] = 0x8000000080000000;
    v20.i64[1] = 0x8000000080000000;
    v21 = a1;
    do
    {
      for (i = 0; i != 96; i += 16)
      {
        v23 = *(int32x4_t *)(v21 + i);
        v24 = (int8x16_t *)&v63[v18 + 18];
        v25 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v23.i8, 0);
        v26 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v23.i8, 1);
        *v24 = v25;
        v24[1] = v26;
        v27 = (int8x16_t)vdupq_laneq_s32(v23, 2);
        v24[2] = v27;
        v24[3] = (int8x16_t)vdupq_laneq_s32(v23, 3);
        v28 = (int8x16_t *)&v63[v19];
        *v28 = vandq_s8(v25, v20);
        v28[1] = vandq_s8(v26, v20);
        v28[2] = vandq_s8(v27, v20);
        v18 += 4;
        v19 += 3;
      }
      ++v17;
      v21 += 96;
    }
    while (v17 != v16);
  }
  if (v14 >= v15)
    return 0;
  result = 0;
  v30 = *(_QWORD *)(a1 + 768);
  v31 = *(_QWORD *)(a1 + 776);
  v32 = (const float *)(a1 + 816);
  v33 = (int8x16_t)vdupq_n_s32(*(_DWORD *)(a1 + 836) | (~*(_DWORD *)(a1 + 840) << 8));
  v34 = (const float *)(a1 + 832);
  v35 = (int32x4_t)vld1q_dup_f32(v34);
  v36 = *(_QWORD *)(a1 + 784);
  v37 = (const float *)(a1 + 820);
  v38 = (int8x16_t)vld1q_dup_f32(v32);
  v39 = (const float *)(a1 + 824);
  v40 = (const float *)(a1 + 828);
  v41 = (int8x16_t)vld1q_dup_f32(v39);
  v42 = (int8x16_t)vld1q_dup_f32(v37);
  v43 = (int8x16_t)vld1q_dup_f32(v40);
  v44 = *(_QWORD *)(a1 + 792);
  do
  {
    v45 = *(int8x16_t *)(v36 + 16 * v14);
    v46 = *(int8x16_t *)(v44 + 16 * v14);
    v47 = (int8x16_t)vceqzq_s32((int32x4_t)vorrq_s8(vandq_s8(v46, v42), vandq_s8(v45, v38)));
    v48 = vorrq_s8(vandq_s8(v46, v43), vandq_s8(v45, v41));
    v49 = (int32x4_t)vmovl_u16(*(uint16x4_t *)(v31 + 8 * v14));
    v50 = (int32x4_t)vandq_s8(vbicq_s8((int8x16_t)vtstq_s32(v35, v49), v47), (int8x16_t)vceqzq_s32((int32x4_t)vorrq_s8(v48, vandq_s8(v33, (int8x16_t)v49))));
    if ((vmaxvq_u32((uint32x4_t)v50) & 0x80000000) != 0)
    {
      if ((_DWORD)v16)
      {
        v51 = 0;
        v52 = 0;
        v53 = 0;
        do
        {
          v55 = 0;
          v56 = v51;
          do
          {
            v57 = (float32x4_t *)&v63[(v52 + v55) + 18];
            v54 = v30 + 96 * v14;
            v50 = (int32x4_t)vandq_s8((int8x16_t)v50, (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32(v57[3], *v57, vsubq_f32(*(float32x4_t *)v54, (float32x4_t)veorq_s8((int8x16_t)v63[v56], *(int8x16_t *)(v54 + 48)))), v57[1], vsubq_f32(*(float32x4_t *)(v54 + 16), (float32x4_t)veorq_s8((int8x16_t)v63[v56 + 1], *(int8x16_t *)(v54 + 64)))), v57[2], vsubq_f32(*(float32x4_t *)(v54 + 32), (float32x4_t)veorq_s8((int8x16_t)v63[v56 + 2], *(int8x16_t *)(v54 + 80)))));
            v56 += 3;
            v55 += 4;
          }
          while (v55 != 24);
          v51 += 18;
          ++v53;
          v52 += 24;
        }
        while (v53 != (_DWORD)v16);
      }
      v58 = vandq_s8((int8x16_t)vcltzq_s32(v50), (int8x16_t)xmmword_1DD007E80);
      *(int8x8_t *)v58.i8 = vorr_s8(*(int8x8_t *)v58.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v58, v58, 8uLL));
      v59 = vadd_s32(*(int32x2_t *)v58.i8, vdup_lane_s32(*(int32x2_t *)v58.i8, 1)).u32[0];
      v60 = 4 * v14;
      if (v59)
        v61 = v60 >= a3;
      else
        v61 = 1;
      if (!v61)
      {
        v62 = *(_QWORD *)(a1 + 864);
        do
        {
          if ((v59 & 1) != 0)
          {
            *(_DWORD *)(v62 + 4 * result) = v60;
            result = (result + 1);
          }
          if (v59 < 2)
            break;
          ++v60;
          v59 >>= 1;
        }
        while (v60 < a3);
      }
    }
    ++v14;
  }
  while (v14 != v15);
  return result;
}

uint64_t C3DCullingSystem_CullRange_x1<true,false>(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t result;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  float32x4_t *v23;
  float32x4_t v24;
  int8x16_t v25;
  float32x4_t v26;
  _OWORD v27[6];

  if (a2 >= a3)
    return 0;
  result = 0;
  v5 = *(_DWORD *)(a1 + 836) | (~*(_DWORD *)(a1 + 840) << 8);
  v6 = *(_DWORD *)(a1 + 832);
  v7 = *(_QWORD *)(a1 + 816);
  v8 = *(_QWORD *)(a1 + 824);
  v9 = *(_QWORD *)(a1 + 864);
  v10 = a2;
  do
  {
    v11 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 776) + 2 * v10);
    v12 = v6 & v11;
    v13 = v5 & v11;
    if (v12)
      v14 = v13 == 0;
    else
      v14 = 0;
    if (v14)
    {
      v15 = *(unsigned int *)(*(_QWORD *)(a1 + 784) + 4 * v10) | ((unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 792) + 4 * v10) << 32);
      v16 = v15 & v7;
      v17 = v8 & v15;
      if (v16 && v17 == 0)
      {
        v19 = 0;
        v20 = *(_OWORD *)(a1 + 48);
        v27[2] = *(_OWORD *)(a1 + 32);
        v27[3] = v20;
        v21 = *(_OWORD *)(a1 + 80);
        v27[4] = *(_OWORD *)(a1 + 64);
        v27[5] = v21;
        v22 = *(_OWORD *)(a1 + 16);
        v27[0] = *(_OWORD *)a1;
        v27[1] = v22;
        v23 = (float32x4_t *)(*(_QWORD *)(a1 + 768) + 32 * v10);
        while (1)
        {
          v24 = (float32x4_t)v27[v19];
          v25 = (int8x16_t)vmulq_f32(*v23, v24);
          v26 = vmulq_f32(v23[1], vabsq_f32(v24));
          if (vaddv_f32(vadd_f32(*(float32x2_t *)v25.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL))) > vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v26, 2), vaddq_f32(v26, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 1))).f32[0])
            break;
          if (++v19 == 6)
          {
            *(_DWORD *)(v9 + 4 * result) = v10;
            result = (result + 1);
            break;
          }
        }
      }
    }
    ++v10;
  }
  while (v10 != a3);
  return result;
}

uint64_t C3DCullingSystem_CullRange_x8<false,false>(int32x2_t *a1, unsigned int a2, unsigned int a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int8x16_t v20;
  int32x2_t *v21;
  uint64_t i;
  int32x4_t v23;
  int8x16_t v24;
  int8x16_t *v25;
  int8x16_t v26;
  int8x16_t v27;
  int32x4_t v28;
  int8x16_t *v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  uint64_t result;
  int32x2_t v34;
  int8x16_t v35;
  int8x16_t v36;
  const float *v37;
  int32x2_t v38;
  const float *v39;
  int8x16_t v40;
  const float *v41;
  const float *v42;
  int8x16_t v43;
  int32x2_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int32x2_t v47;
  unsigned int v48;
  int8x16_t *v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t *v53;
  int8x16_t v54;
  int8x16_t v55;
  uint16x8_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int32x4_t v59;
  int32x4_t v60;
  unsigned int v61;
  int v62;
  int v63;
  uint64_t v64;
  int v65;
  unsigned int v66;
  int8x16_t *v67;
  float32x4_t *v68;
  int8x16_t v69;
  unsigned __int32 v70;
  BOOL v71;
  unint64_t v72;
  _OWORD v73[84];
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  if ((a2 & 7) != 0)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      C3DCullingSystem_AABBRange_x8(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  v14 = a2 >> 3;
  v15 = (a3 + 7) >> 3;
  v16 = a1[110].u32[0];
  if ((_DWORD)v16)
  {
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20.i64[0] = 0x8000000080000000;
    v20.i64[1] = 0x8000000080000000;
    v21 = a1;
    do
    {
      for (i = 0; i != 12; i += 2)
      {
        v23 = *(int32x4_t *)v21[i].i8;
        v24 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v23.i8, 0);
        v25 = (int8x16_t *)&v73[2 * v18 + 36];
        *v25 = v24;
        v25[1] = v24;
        v26 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v23.i8, 1);
        v25[2] = v26;
        v25[3] = v26;
        v27 = (int8x16_t)vdupq_laneq_s32(v23, 2);
        v28 = vdupq_laneq_s32(v23, 3);
        v25[4] = v27;
        v25[5] = v27;
        v25[6] = (int8x16_t)v28;
        v25[7] = (int8x16_t)v28;
        v29 = (int8x16_t *)&v73[2 * v19];
        v30 = vandq_s8(v24, v20);
        *v29 = v30;
        v29[1] = v30;
        v31 = vandq_s8(v26, v20);
        v29[2] = v31;
        v29[3] = v31;
        v32 = vandq_s8(v27, v20);
        v29[4] = v32;
        v29[5] = v32;
        v18 += 4;
        v19 += 3;
      }
      ++v17;
      v21 += 12;
    }
    while (v17 != v16);
  }
  if (v14 >= v15)
    return 0;
  result = 0;
  v34 = a1[97];
  v35 = (int8x16_t)vdupq_n_s32(a1[104].i32[1] | (~a1[105].i32[0] << 8));
  v36 = (int8x16_t)vdupq_lane_s32(a1[104], 0);
  v37 = (const float *)&a1[102];
  v38 = a1[98];
  v39 = (const float *)&a1[102] + 1;
  v40 = (int8x16_t)vld1q_dup_f32(v37);
  v41 = (const float *)&a1[103];
  v42 = (const float *)&a1[103] + 1;
  v43 = (int8x16_t)vld1q_dup_f32(v41);
  v44 = a1[99];
  v45 = (int8x16_t)vld1q_dup_f32(v39);
  v46 = (int8x16_t)vld1q_dup_f32(v42);
  v47 = a1[96];
  v48 = a2 & 0xFFFFFFF8;
  do
  {
    v49 = (int8x16_t *)(*(_QWORD *)&v38 + 32 * v14);
    v50 = *v49;
    v51 = v49[1];
    v52 = vandq_s8(*v49, v40);
    v53 = (int8x16_t *)(*(_QWORD *)&v44 + 32 * v14);
    v54 = v53[1];
    v55 = (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(vandq_s8(*v53, v45), v52)), (int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(vandq_s8(v54, v45), vandq_s8(v51, v40))));
    v56 = *(uint16x8_t *)(*(_QWORD *)&v34 + 16 * v14);
    v57 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v56.i8);
    v58 = (int8x16_t)vmovl_high_u16(v56);
    *(int8x8_t *)v51.i8 = vmovn_s16((int16x8_t)vandq_s8(vbicq_s8(vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v36, v57)), (int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v36, v58)))), v55), (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(vorrq_s8(vandq_s8(*v53, v46), vandq_s8(v50, v43)), vandq_s8(v35, v57))), (int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(vorrq_s8(vandq_s8(v54, v46), vandq_s8(v51, v43)), vandq_s8(v35, v58))))));
    v59 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)v51.i8, *(int8x8_t *)v35.i8)), 0x1FuLL));
    v60 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)v51.i8, *(int8x8_t *)v35.i8)), 0x1FuLL));
    if ((vmaxvq_u32((uint32x4_t)vorrq_s8((int8x16_t)v60, (int8x16_t)v59)) & 0x80000000) != 0)
    {
      if ((_DWORD)v16)
      {
        v61 = 0;
        v62 = 0;
        v63 = 0;
        v64 = *(_QWORD *)&v47 + 192 * v14;
        do
        {
          v65 = 0;
          v66 = v61;
          do
          {
            v67 = (int8x16_t *)&v73[2 * v66];
            v68 = (float32x4_t *)&v73[2 * (v62 + v65) + 36];
            v59 = (int32x4_t)vandq_s8((int8x16_t)v59, (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32(v68[7], v68[1], vsubq_f32(*(float32x4_t *)(v64 + 16), (float32x4_t)veorq_s8(v67[1], *(int8x16_t *)(v64 + 112)))), v68[3], vsubq_f32(*(float32x4_t *)(v64 + 48), (float32x4_t)veorq_s8(v67[3], *(int8x16_t *)(v64 + 144)))), v68[5], vsubq_f32(*(float32x4_t *)(v64 + 80), (float32x4_t)veorq_s8(v67[5], *(int8x16_t *)(v64 + 176)))));
            v60 = (int32x4_t)vandq_s8((int8x16_t)v60, (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32(v68[6], *v68, vsubq_f32(*(float32x4_t *)v64, (float32x4_t)veorq_s8(*v67, *(int8x16_t *)(v64 + 96)))), v68[2], vsubq_f32(*(float32x4_t *)(v64 + 32), (float32x4_t)veorq_s8(v67[2], *(int8x16_t *)(v64 + 128)))), v68[4], vsubq_f32(*(float32x4_t *)(v64 + 64), (float32x4_t)veorq_s8(v67[4], *(int8x16_t *)(v64 + 160)))));
            v66 += 3;
            v65 += 4;
          }
          while (v65 != 24);
          v61 += 18;
          ++v63;
          v62 += 24;
        }
        while (v63 != (_DWORD)v16);
      }
      v69 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s32(v60), (int8x16_t)xmmword_1DD007E80), vandq_s8((int8x16_t)vcltzq_s32(v59), (int8x16_t)xmmword_1DD007E70));
      *(int8x8_t *)v69.i8 = vorr_s8(*(int8x8_t *)v69.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v69, v69, 8uLL));
      v70 = vadd_s32(*(int32x2_t *)v69.i8, vdup_lane_s32(*(int32x2_t *)v69.i8, 1)).u32[0];
      if (v70)
        v71 = 8 * (int)v14 >= a3;
      else
        v71 = 1;
      v72 = v48;
      if (!v71)
      {
        do
        {
          if ((v70 & 1) != 0)
          {
            *(_QWORD *)(*(_QWORD *)&a1[107] + 8 * result) = *(_QWORD *)(*(_QWORD *)&a1[101] + 8 * v72);
            result = (result + 1);
          }
          if (v70 < 2)
            break;
          ++v72;
          v70 >>= 1;
        }
        while (v72 < a3);
      }
    }
    ++v14;
    v48 += 8;
  }
  while (v14 != v15);
  return result;
}

uint64_t C3DCullingSystem_CullRange_x4<false,false>(uint64_t a1, unsigned int a2, unsigned int a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  int8x16_t v20;
  uint64_t v21;
  uint64_t i;
  int32x4_t v23;
  int8x16_t *v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t *v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  int8x16_t v32;
  const float *v33;
  const float *v34;
  int32x4_t v35;
  uint64_t v36;
  const float *v37;
  int8x16_t v38;
  const float *v39;
  const float *v40;
  int8x16_t v41;
  uint64_t v42;
  int8x16_t v43;
  int8x16_t v44;
  unsigned int v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int32x4_t v50;
  int32x4_t v51;
  unsigned int v52;
  int v53;
  int v54;
  uint64_t v55;
  int v56;
  unsigned int v57;
  float32x4_t *v58;
  int8x16_t v59;
  unsigned __int32 v60;
  BOOL v61;
  unint64_t v62;
  _OWORD v63[42];
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  if ((a2 & 3) != 0)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      C3DCullingSystem_AABBRange_x8(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  v14 = a2 >> 2;
  v15 = (a3 + 3) >> 2;
  v16 = *(unsigned int *)(a1 + 880);
  if ((_DWORD)v16)
  {
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20.i64[0] = 0x8000000080000000;
    v20.i64[1] = 0x8000000080000000;
    v21 = a1;
    do
    {
      for (i = 0; i != 96; i += 16)
      {
        v23 = *(int32x4_t *)(v21 + i);
        v24 = (int8x16_t *)&v63[v18 + 18];
        v25 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v23.i8, 0);
        v26 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v23.i8, 1);
        *v24 = v25;
        v24[1] = v26;
        v27 = (int8x16_t)vdupq_laneq_s32(v23, 2);
        v24[2] = v27;
        v24[3] = (int8x16_t)vdupq_laneq_s32(v23, 3);
        v28 = (int8x16_t *)&v63[v19];
        *v28 = vandq_s8(v25, v20);
        v28[1] = vandq_s8(v26, v20);
        v28[2] = vandq_s8(v27, v20);
        v18 += 4;
        v19 += 3;
      }
      ++v17;
      v21 += 96;
    }
    while (v17 != v16);
  }
  if (v14 >= v15)
    return 0;
  result = 0;
  v30 = *(_QWORD *)(a1 + 768);
  v31 = *(_QWORD *)(a1 + 776);
  v32 = (int8x16_t)vdupq_n_s32(*(_DWORD *)(a1 + 836) | (~*(_DWORD *)(a1 + 840) << 8));
  v33 = (const float *)(a1 + 816);
  v34 = (const float *)(a1 + 832);
  v35 = (int32x4_t)vld1q_dup_f32(v34);
  v36 = *(_QWORD *)(a1 + 784);
  v37 = (const float *)(a1 + 820);
  v38 = (int8x16_t)vld1q_dup_f32(v33);
  v39 = (const float *)(a1 + 824);
  v40 = (const float *)(a1 + 828);
  v41 = (int8x16_t)vld1q_dup_f32(v39);
  v42 = *(_QWORD *)(a1 + 792);
  v43 = (int8x16_t)vld1q_dup_f32(v37);
  v44 = (int8x16_t)vld1q_dup_f32(v40);
  v45 = a2 & 0xFFFFFFFC;
  do
  {
    v46 = *(int8x16_t *)(v36 + 16 * v14);
    v47 = *(int8x16_t *)(v42 + 16 * v14);
    v48 = (int8x16_t)vceqzq_s32((int32x4_t)vorrq_s8(vandq_s8(v47, v43), vandq_s8(v46, v38)));
    v49 = vorrq_s8(vandq_s8(v47, v44), vandq_s8(v46, v41));
    v50 = (int32x4_t)vmovl_u16(*(uint16x4_t *)(v31 + 8 * v14));
    v51 = (int32x4_t)vandq_s8(vbicq_s8((int8x16_t)vtstq_s32(v35, v50), v48), (int8x16_t)vceqzq_s32((int32x4_t)vorrq_s8(v49, vandq_s8(v32, (int8x16_t)v50))));
    if ((vmaxvq_u32((uint32x4_t)v51) & 0x80000000) != 0)
    {
      if ((_DWORD)v16)
      {
        v52 = 0;
        v53 = 0;
        v54 = 0;
        do
        {
          v56 = 0;
          v57 = v52;
          do
          {
            v58 = (float32x4_t *)&v63[(v53 + v56) + 18];
            v55 = v30 + 96 * v14;
            v51 = (int32x4_t)vandq_s8((int8x16_t)v51, (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32(v58[3], *v58, vsubq_f32(*(float32x4_t *)v55, (float32x4_t)veorq_s8((int8x16_t)v63[v57], *(int8x16_t *)(v55 + 48)))), v58[1], vsubq_f32(*(float32x4_t *)(v55 + 16), (float32x4_t)veorq_s8((int8x16_t)v63[v57 + 1], *(int8x16_t *)(v55 + 64)))), v58[2], vsubq_f32(*(float32x4_t *)(v55 + 32), (float32x4_t)veorq_s8((int8x16_t)v63[v57 + 2], *(int8x16_t *)(v55 + 80)))));
            v57 += 3;
            v56 += 4;
          }
          while (v56 != 24);
          v52 += 18;
          ++v54;
          v53 += 24;
        }
        while (v54 != (_DWORD)v16);
      }
      v59 = vandq_s8((int8x16_t)vcltzq_s32(v51), (int8x16_t)xmmword_1DD007E80);
      *(int8x8_t *)v59.i8 = vorr_s8(*(int8x8_t *)v59.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v59, v59, 8uLL));
      v60 = vadd_s32(*(int32x2_t *)v59.i8, vdup_lane_s32(*(int32x2_t *)v59.i8, 1)).u32[0];
      if (v60)
        v61 = 4 * (int)v14 >= a3;
      else
        v61 = 1;
      v62 = v45;
      if (!v61)
      {
        do
        {
          if ((v60 & 1) != 0)
          {
            *(_QWORD *)(*(_QWORD *)(a1 + 856) + 8 * result) = *(_QWORD *)(*(_QWORD *)(a1 + 808) + 8 * v62);
            result = (result + 1);
          }
          if (v60 < 2)
            break;
          ++v62;
          v60 >>= 1;
        }
        while (v62 < a3);
      }
    }
    ++v14;
    v45 += 4;
  }
  while (v14 != v15);
  return result;
}

uint64_t C3DCullingSystem_CullRange_x1<false,false>(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t result;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  float32x4_t *v22;
  float32x4_t v23;
  int8x16_t v24;
  float32x4_t v25;
  _OWORD v26[6];

  if (a2 >= a3)
    return 0;
  result = 0;
  v5 = *(_DWORD *)(a1 + 836) | (~*(_DWORD *)(a1 + 840) << 8);
  v6 = *(_DWORD *)(a1 + 832);
  v7 = *(_QWORD *)(a1 + 816);
  v8 = *(_QWORD *)(a1 + 824);
  v9 = a2;
  do
  {
    v10 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 776) + 2 * v9);
    v11 = v6 & v10;
    v12 = v5 & v10;
    if (v11)
      v13 = v12 == 0;
    else
      v13 = 0;
    if (v13)
    {
      v14 = *(unsigned int *)(*(_QWORD *)(a1 + 784) + 4 * v9) | ((unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 792) + 4 * v9) << 32);
      v15 = v14 & v7;
      v16 = v8 & v14;
      if (v15 && v16 == 0)
      {
        v18 = 0;
        v19 = *(_OWORD *)(a1 + 48);
        v26[2] = *(_OWORD *)(a1 + 32);
        v26[3] = v19;
        v20 = *(_OWORD *)(a1 + 80);
        v26[4] = *(_OWORD *)(a1 + 64);
        v26[5] = v20;
        v21 = *(_OWORD *)(a1 + 16);
        v26[0] = *(_OWORD *)a1;
        v26[1] = v21;
        v22 = (float32x4_t *)(*(_QWORD *)(a1 + 768) + 32 * v9);
        while (1)
        {
          v23 = (float32x4_t)v26[v18];
          v24 = (int8x16_t)vmulq_f32(*v22, v23);
          v25 = vmulq_f32(v22[1], vabsq_f32(v23));
          if (vaddv_f32(vadd_f32(*(float32x2_t *)v24.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL))) > vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2), vaddq_f32(v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 1))).f32[0])
            break;
          if (++v18 == 6)
          {
            *(_QWORD *)(*(_QWORD *)(a1 + 856) + 8 * result) = *(_QWORD *)(*(_QWORD *)(a1 + 808) + 8 * v9);
            result = (result + 1);
            break;
          }
        }
      }
    }
    ++v9;
  }
  while (v9 != a3);
  return result;
}

void OUTLINED_FUNCTION_2_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 0x12u);
}

void C3D::Hash<std::unique_ptr<C3D::RenderGraphResource>,C3D::MallocAllocator>::_grow(uint64_t a1)
{
  _QWORD *v2;
  uint64_t *v3;
  __int16 *v4;
  int v5;
  uint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  __int16 *v9;
  __int16 v10;
  uint64_t v11;

  v2 = *(_QWORD **)a1;
  v3 = *(uint64_t **)(a1 + 8);
  v4 = *(__int16 **)(a1 + 16);
  v5 = *(_DWORD *)(a1 + 28);
  C3D::Hash<std::unique_ptr<C3D::RenderGraphResource>,C3D::MallocAllocator>::_allocate(a1, 2 * v5);
  v6 = (v5 + 15);
  if (v5 != -15)
  {
    v7 = v3;
    v8 = v2;
    v9 = v4;
    do
    {
      v10 = *v9++;
      if ((v10 & 1) != 0)
      {
        C3D::Hash<std::unique_ptr<C3D::RenderGraphResource>,C3D::MallocAllocator>::insert(a1, *v8, v7);
        v11 = *v7;
        *v7 = 0;
        if (v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      }
      ++v8;
      ++v7;
      --v6;
    }
    while (v6);
  }
  free(v3);
  free(v2);
  free(v4);
}

void C3D::Array<unsigned long long,32u,C3D::MallocAllocator>::push_back<unsigned long long const&>(uint64_t a1, _QWORD *a2)
{
  unsigned int v4;
  unsigned int v5;

  v4 = *(_DWORD *)a1;
  v5 = *(_DWORD *)a1 + 1;
  if (v5 > *(_DWORD *)(a1 + 4))
  {
    C3D::Array<unsigned long long,32u,C3D::MallocAllocator>::GrowCapacityBy((unsigned int *)a1, 1, 0);
    v4 = *(_DWORD *)a1;
    v5 = *(_DWORD *)a1 + 1;
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v4) = *a2;
  *(_DWORD *)a1 = v5;
}

const __CFString *C3DMeshSourceSemanticToSemanticString(int a1)
{
  __CFString **v1;
  const __CFString *result;

  switch(a1)
  {
    case 0:
      v1 = kC3DPositionKey;
      goto LABEL_10;
    case 1:
      v1 = kC3DNormalKey;
      goto LABEL_10;
    case 2:
      v1 = kC3DColorKey;
      goto LABEL_10;
    case 3:
      v1 = kC3DTexcoordKey;
      goto LABEL_10;
    case 4:
      v1 = kC3DTexTangentKey;
      goto LABEL_10;
    case 5:
      v1 = kC3DSkinningJointsKey;
      goto LABEL_10;
    case 6:
      v1 = kC3DSkinningWeightsKey;
LABEL_10:
      result = *v1;
      break;
    case 7:
      result = CFSTR("vertexCrease");
      break;
    case 8:
      result = CFSTR("edgeCrease");
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t __GetSemanticFromSerializedSemanticString(const __CFString *a1)
{
  if (CFStringCompare(a1, CFSTR("vertex"), 0))
  {
    if (CFStringCompare(a1, CFSTR("normal"), 0))
    {
      if (CFStringCompare(a1, CFSTR("color"), 0))
      {
        if (CFStringCompare(a1, CFSTR("texcoord"), 0))
        {
          if (CFStringCompare(a1, CFSTR("textangent"), 0))
          {
            if (CFStringCompare(a1, CFSTR("joints"), 0))
            {
              if (CFStringCompare(a1, CFSTR("weights"), 0))
                return -1;
              else
                return 6;
            }
            else
            {
              return 5;
            }
          }
          else
          {
            return 4;
          }
        }
        else
        {
          return 3;
        }
      }
      else
      {
        return 2;
      }
    }
    else
    {
      return 1;
    }
  }
  else
  {
    return 0;
  }
}

uint64_t C3DMeshSourceCreateDeltaSource(uint64_t a1, uint64_t a2)
{
  uint64_t Content;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const UInt8 *v27;
  CFDataRef v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  float *v32;
  uint64_t v33;
  float *v34;
  float *v35;
  float v36;
  float v37;
  float v38;
  __int16 Semantic;
  uint64_t v40;
  uint64_t v41;
  CFDataRef v42;
  NSObject *v43;
  const UInt8 *v44;
  float32x4_t v45;
  float v46;
  float v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  float32x4_t v53;
  float v54;
  float v55;
  float32x4_t v56;
  __int16 v57;
  uint64_t v58;
  CFDataRef v60;
  uint64_t v61;
  float32x4_t v62;

  Content = C3DMeshSourceGetContent(a1);
  v5 = v4;
  v6 = C3DMeshSourceGetContent(a2);
  v8 = v7;
  if ((_DWORD)v5 == (_DWORD)v7)
  {
    v9 = v6;
    if (!Content && (v10 = scn_default_log(), os_log_type_enabled(v10, OS_LOG_TYPE_FAULT)))
    {
      C3DMeshSourceCreateDeltaSource_cold_2(v10, v11, v12, v13, v14, v15, v16, v17);
      if (!v9)
      {
LABEL_5:
        v18 = scn_default_log();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_FAULT))
          C3DMeshSourceCreateDeltaSource_cold_1(v18, v19, v20, v21, v22, v23, v24, v25);
      }
    }
    else if (!v9)
    {
      goto LABEL_5;
    }
    if ((v8 & 0xFF000000000000) == 0x1000000000000 && (v5 & 0xFF000000000000) == 0x1000000000000)
    {
      if (HIBYTE(v8) >= 3)
        v26 = 3;
      else
        v26 = HIBYTE(v8);
      v27 = (const UInt8 *)malloc_type_malloc((4 * v26) * (unint64_t)v5, 0x535D28F0uLL);
      v28 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v27, (4 * v26) * (unint64_t)v5, (CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
      if ((_DWORD)v5)
      {
        v29 = 0;
        v30 = 0;
        v31 = 0;
        do
        {
          if ((_DWORD)v26)
          {
            v32 = (float *)(v9 + v30);
            v33 = v26;
            v34 = (float *)v27;
            v35 = (float *)(Content + v29);
            do
            {
              v36 = *v32++;
              v37 = v36;
              v38 = *v35++;
              *v34++ = v37 - v38;
              --v33;
            }
            while (v33);
          }
          ++v31;
          v30 += BYTE5(v8);
          v29 += BYTE5(v5);
          v27 += 4 * v26;
        }
        while (v31 != v5);
      }
      Semantic = C3DMeshSourceGetSemantic(a2);
      v40 = C3DSizeOfBaseType(1);
      v41 = C3DMeshSourceCreateWithData(Semantic, v28, 1, v26, v5, v40 * v26, 0);
      v42 = v28;
    }
    else
    {
      v61 = C3DSizeOfBaseType(BYTE4(v5));
      v44 = (const UInt8 *)malloc_type_malloc(v61 * v5, 0x8D58C3BFuLL);
      v60 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v44, v61 * v5, (CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
      if ((_DWORD)v5)
      {
        v48 = v9;
        v49 = Content;
        v50 = 0;
        v51 = 0;
        v52 = v5;
        do
        {
          *(double *)v53.i64 = C3DConvertFloatingTypeToFloat4(BYTE4(v5), (float *)(v49 + v50), v45, v46, v47);
          v62 = v53;
          *(double *)v56.i64 = C3DConvertFloatingTypeToFloat4(BYTE4(v8), (float *)(v48 + v51), v53, v54, v55);
          C3DConvertFloatingTypeFromFloat4(BYTE4(v5), (uint64_t)v44, vsubq_f32(v56, v62));
          v51 += BYTE5(v8);
          v50 += BYTE5(v5);
          v44 += v61;
          --v52;
        }
        while (v52);
      }
      v57 = C3DMeshSourceGetSemantic(a2);
      v58 = C3DSizeOfBaseType(BYTE4(v5));
      v41 = C3DMeshSourceCreateWithData(v57, v60, BYTE4(v5), 1, v5, v58, 0);
      v42 = v60;
    }
    CFRelease(v42);
    return v41;
  }
  v43 = scn_default_log();
  if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
    C3DMeshSourceCreateDeltaSource_cold_3(v8, v5, v43);
  return 0;
}

uint64_t C3DMeshSourceCreateAbsoluteSource(uint64_t a1, uint64_t a2)
{
  uint64_t Content;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const UInt8 *v26;
  CFDataRef v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  float *v31;
  uint64_t v32;
  float *v33;
  float *v34;
  float v35;
  float v36;
  float v37;
  __int16 Semantic;
  uint64_t v39;
  __int16 v40;
  CFDataRef v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const UInt8 *v46;
  float32x4_t v47;
  float v48;
  float v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  float32x4_t v55;
  float v56;
  float v57;
  float32x4_t v58;
  __int16 v59;
  CFDataRef v61;
  uint64_t v62;
  float32x4_t v63;

  Content = C3DMeshSourceGetContent(a1);
  v5 = v4;
  if (!Content)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      C3DMeshSourceCreateDeltaSource_cold_2(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  v14 = C3DMeshSourceGetContent(a2);
  v16 = v15;
  if (!v14)
  {
    v17 = scn_default_log();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT))
      C3DMeshSourceCreateAbsoluteSource_cold_1(v17, v18, v19, v20, v21, v22, v23, v24);
  }
  if ((_DWORD)v5 != (_DWORD)v16)
    return 0;
  if ((v16 & 0xFF000000000000) == 0x1000000000000 && (v5 & 0xFF000000000000) == 0x1000000000000)
  {
    if (HIBYTE(v16) >= 3)
      v25 = 3;
    else
      v25 = HIBYTE(v16);
    v26 = (const UInt8 *)malloc_type_malloc((4 * v25) * (unint64_t)v5, 0x2C3B15ACuLL);
    v27 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v26, (4 * v25) * (unint64_t)v5, (CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
    if ((_DWORD)v5)
    {
      v28 = 0;
      v29 = 0;
      v30 = 0;
      do
      {
        if ((_DWORD)v25)
        {
          v31 = (float *)(Content + v29);
          v32 = v25;
          v33 = (float *)v26;
          v34 = (float *)(v14 + v28);
          do
          {
            v35 = *v31++;
            v36 = v35;
            v37 = *v34++;
            *v33++ = v36 + v37;
            --v32;
          }
          while (v32);
        }
        ++v30;
        v29 += BYTE5(v5);
        v28 += BYTE5(v16);
        v26 += 4 * v25;
      }
      while (v30 != v5);
    }
    Semantic = C3DMeshSourceGetSemantic(a2);
    v39 = C3DSizeOfBaseType(1) * v25;
    v40 = Semantic;
    v41 = v27;
    v42 = 1;
    v43 = v25;
    v44 = v5;
  }
  else
  {
    v62 = C3DSizeOfBaseType(BYTE4(v5));
    v46 = (const UInt8 *)malloc_type_malloc(v62 * v5, 0xE2379C45uLL);
    v61 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v46, v62 * v5, (CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
    if ((_DWORD)v5)
    {
      v50 = v14;
      v51 = Content;
      v52 = 0;
      v53 = 0;
      v54 = v5;
      do
      {
        *(double *)v55.i64 = C3DConvertFloatingTypeToFloat4(BYTE4(v5), (float *)(v51 + v52), v47, v48, v49);
        v63 = v55;
        *(double *)v58.i64 = C3DConvertFloatingTypeToFloat4(BYTE4(v16), (float *)(v50 + v53), v55, v56, v57);
        C3DConvertFloatingTypeFromFloat4(BYTE4(v5), (uint64_t)v46, vaddq_f32(v63, v58));
        v53 += BYTE5(v16);
        v52 += BYTE5(v5);
        v46 += v62;
        --v54;
      }
      while (v54);
    }
    v59 = C3DMeshSourceGetSemantic(a2);
    v39 = C3DSizeOfBaseType(BYTE4(v5));
    v40 = v59;
    v27 = v61;
    v41 = v61;
    v42 = BYTE4(v5);
    v43 = 1;
    v44 = v5;
  }
  v45 = C3DMeshSourceCreateWithData(v40, v41, v42, v43, v44, v39, 0);
  CFRelease(v27);
  return v45;
}

uint64_t C3DMeshSourceGetValueType(uint64_t a1)
{
  return C3DSourceAccessorGetComponentsValueType(*(_QWORD *)(a1 + 64));
}

uint64_t C3DMeshSourceCreatePackedCopy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  NSObject *v28;
  uint64_t Content;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  const UInt8 *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  NSObject *v40;
  size_t v41;
  NSObject *v42;
  uint64_t v43;
  CFDataRef v44;
  __int16 Semantic;
  uint64_t v46;
  CFIndex length;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint8_t buf[4];
  int v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  if (!a1 && (v6 = scn_default_log(), os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)))
  {
    C3DMeshSourceCreatePackedCopy_cold_3(v6, v7, v8, v9, v10, v11, v12, v13);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v14 = scn_default_log();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    C3DMeshSourceCreatePackedCopy_cold_2(v14, v15, v16, v17, v18, v19, v20, v21);
LABEL_6:
  v52 = 0;
  v50 = 0u;
  v51 = 0u;
  v49 = 0u;
  C3DMeshElementGetContent(a2, a3, (uint64_t)&v49);
  if (DWORD2(v49))
  {
    v22 = 0;
    v23 = 0;
    v24 = 1;
    do
    {
      v25 = BYTE11(v50);
      switch(BYTE11(v50))
      {
        case 4u:
          v26 = *(_DWORD *)(v49 + 4 * (*((_QWORD *)&v51 + 1) + v52 * (v24 - 1)));
          v27 = *(_DWORD *)(v49 + 4 * (*((_QWORD *)&v51 + 1) + v52 * v24));
          break;
        case 2u:
          v26 = *(unsigned __int16 *)(v49 + 2 * (*((_QWORD *)&v51 + 1) + v52 * (v24 - 1)));
          v27 = *(unsigned __int16 *)(v49 + 2 * (*((_QWORD *)&v51 + 1) + v52 * v24));
          break;
        case 1u:
          v26 = *(unsigned __int8 *)(v49 + *((_QWORD *)&v51 + 1) + v52 * (v24 - 1));
          v27 = *(unsigned __int8 *)(v49 + *((_QWORD *)&v51 + 1) + v52 * v24);
          break;
        default:
          v28 = scn_default_log();
          if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67109120;
            v54 = v25;
            _os_log_error_impl(&dword_1DCCB8000, v28, OS_LOG_TYPE_ERROR, "Unreachable code: Invalid bytes per index (%d)", buf, 8u);
          }
          v27 = 0;
          v26 = 0;
          break;
      }
      v23 += (v27 - v26);
      ++v22;
      v24 += 2;
    }
    while (v22 < DWORD2(v49));
  }
  else
  {
    v23 = 0;
  }
  Content = C3DMeshSourceGetContent(a1);
  v31 = v30;
  v32 = BYTE5(v30);
  if (BYTE5(v30) != C3DSizeOfBaseType(BYTE4(v30)))
  {
    v42 = scn_default_log();
    if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
      C3DMeshSourceCreatePackedCopy_cold_1();
    return 0;
  }
  if (!(v32 * v23))
    return 0;
  length = v32 * v23;
  v33 = (const UInt8 *)malloc_type_malloc(v32 * v23, 0x571B6873uLL);
  if (DWORD2(v49))
  {
    v34 = 0;
    v35 = 0;
    v36 = 1;
    do
    {
      v37 = BYTE11(v50);
      switch(BYTE11(v50))
      {
        case 4u:
          v38 = *(_DWORD *)(v49 + 4 * (*((_QWORD *)&v51 + 1) + v52 * (v36 - 1)));
          v39 = *(_DWORD *)(v49 + 4 * (*((_QWORD *)&v51 + 1) + v52 * v36));
          break;
        case 2u:
          v38 = *(unsigned __int16 *)(v49 + 2 * (*((_QWORD *)&v51 + 1) + v52 * (v36 - 1)));
          v39 = *(unsigned __int16 *)(v49 + 2 * (*((_QWORD *)&v51 + 1) + v52 * v36));
          break;
        case 1u:
          v38 = *(unsigned __int8 *)(v49 + *((_QWORD *)&v51 + 1) + v52 * (v36 - 1));
          v39 = *(unsigned __int8 *)(v49 + *((_QWORD *)&v51 + 1) + v52 * v36);
          break;
        default:
          v40 = scn_default_log();
          if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67109120;
            v54 = v37;
            _os_log_error_impl(&dword_1DCCB8000, v40, OS_LOG_TYPE_ERROR, "Unreachable code: Invalid bytes per index (%d)", buf, 8u);
          }
          v39 = 0;
          v38 = 0;
          break;
      }
      v41 = (v39 - v38) * BYTE5(v31);
      memcpy((void *)&v33[v35], (const void *)(Content + v38 * BYTE5(v31)), v41);
      v35 += v41;
      ++v34;
      v36 += 2;
    }
    while (v34 < DWORD2(v49));
  }
  v44 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v33, length, (CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
  Semantic = C3DMeshSourceGetSemantic(a1);
  v46 = C3DSizeOfBaseType(BYTE6(v31));
  v43 = C3DMeshSourceCreateWithData(Semantic, v44, BYTE6(v31), HIBYTE(v31), v23, v46 * HIBYTE(v31), 0);
  CFRelease(v44);
  return v43;
}

double C3DMeshSourceGetAbsoluteMaxValue(uint64_t a1)
{
  uint64_t Content;
  unsigned __int8 v2;
  unsigned __int8 v3;
  float32x4_t v4;
  float v5;
  unsigned int v6;
  uint64_t v7;
  float *v8;
  int v9;
  uint64_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v14;

  Content = C3DMeshSourceGetContent(a1);
  v7 = v6;
  if (v6)
  {
    v8 = (float *)Content;
    v9 = v2;
    v10 = v3;
    v11 = 0uLL;
    do
    {
      v14 = v11;
      v12.i64[0] = COERCE_UNSIGNED_INT64(C3DConvertFloatingTypeToFloat4(v9, v8, v11, v4.f32[0], v5)) & 0x7FFFFFFF7FFFFFFFLL;
      v12.i64[1] &= 0x7FFFFFFF7FFFFFFFuLL;
      v4 = vmaxnmq_f32(v14, v12);
      v11 = v4;
      v8 = (float *)((char *)v8 + v10);
      --v7;
    }
    while (v7);
  }
  else
  {
    v11.i64[0] = 0;
  }
  return *(double *)v11.i64;
}

uint64_t C3DMeshSourceHasNonOpaqueColors(uint64_t a1)
{
  uint64_t result;
  unsigned int v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  float32x4_t v5;
  float v6;
  float v7;
  float *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;

  result = C3DMeshSourceGetContent(a1);
  if (result)
  {
    if (v2)
    {
      v8 = (float *)result;
      v9 = v3;
      v10 = v4;
      v11 = v2 - 1;
      do
      {
        *(double *)v5.i64 = C3DConvertFloatingTypeToFloat4(v9, v8, v5, v6, v7);
        v5.i32[0] = v5.i32[3];
        result = v5.f32[3] < 1.0;
        v12 = v5.f32[3] < 1.0 || v11-- == 0;
        v8 = (float *)((char *)v8 + v10);
      }
      while (!v12);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t C3DMeshSourceCreateUnpackedCopy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t Content;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  size_t v28;
  __int128 v29;
  unint64_t v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  NSObject *v35;
  unsigned int v36;
  UInt8 *v37;
  unsigned int v38;
  UInt8 *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  UInt8 *v43;
  CFDataRef v44;
  __int16 Semantic;
  uint64_t v46;
  int v47;
  uint64_t v48;
  __int128 v50;
  CFIndex v51;
  __int128 *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const UInt8 *v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  uint8_t buf[4];
  int v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v8 = scn_default_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      C3DMeshSourceCreatePackedCopy_cold_3(v8, v9, v10, v11, v12, v13, v14, v15);
  }
  Content = C3DMeshSourceGetContent(a1);
  if (!Content)
    return 0;
  v18 = (char *)Content;
  v19 = v17;
  v54 = a1;
  v60 = 0;
  v58 = 0u;
  v59 = 0u;
  v57 = 0u;
  C3DMeshElementGetContent(a2, a4, (uint64_t)&v57);
  if (BYTE10(v58) != 2)
  {
    v20 = scn_default_log();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_FAULT))
      C3DMeshSourceCreateUnpackedCopy_cold_1(v20, v21, v22, v23, v24, v25, v26, v27);
  }
  v28 = C3DSizeOfBaseType(BYTE4(v19));
  v55 = a3;
  v51 = v28 * a3;
  v56 = (const UInt8 *)malloc_type_malloc(v28 * a3, 0x439C994BuLL);
  v52 = &v50;
  MEMORY[0x1E0C80A78](v56);
  bzero((char *)&v50 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0), v28);
  v53 = v19;
  if (DWORD2(v57))
  {
    v30 = 0;
    v31 = 0;
    *(_QWORD *)&v29 = 67109120;
    v50 = v29;
    do
    {
      v32 = BYTE11(v58);
      switch(BYTE11(v58))
      {
        case 4u:
          v33 = *(_DWORD *)(v57 + 4 * (*((_QWORD *)&v59 + 1) + v60 * 2 * v30));
          v34 = *(_DWORD *)(v57 + 4 * (*((_QWORD *)&v59 + 1) + v60 * ((2 * v30) | 1)));
          break;
        case 2u:
          v33 = *(unsigned __int16 *)(v57 + 2 * (*((_QWORD *)&v59 + 1) + v60 * 2 * v30));
          v34 = *(unsigned __int16 *)(v57 + 2 * (*((_QWORD *)&v59 + 1) + v60 * ((2 * v30) | 1)));
          break;
        case 1u:
          v33 = *(unsigned __int8 *)(v57 + *((_QWORD *)&v59 + 1) + v60 * 2 * v30);
          v34 = *(unsigned __int8 *)(v57 + *((_QWORD *)&v59 + 1) + v60 * ((2 * v30) | 1));
          break;
        default:
          v35 = scn_default_log();
          if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = v50;
            v62 = v32;
            _os_log_error_impl(&dword_1DCCB8000, v35, OS_LOG_TYPE_ERROR, "Unreachable code: Invalid bytes per index (%d)", buf, 8u);
          }
          v34 = 0;
          v33 = 0;
          break;
      }
      v36 = v33 - v31;
      if (v33 > v31)
      {
        v37 = (UInt8 *)&v56[v28 * v31];
        do
        {
          memcpy(v37, (char *)&v50 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0), v28);
          v37 += v28;
          --v36;
        }
        while (v36);
      }
      v38 = v34 - v33;
      if (v34 > v33)
      {
        v39 = (UInt8 *)&v56[v28 * v33];
        do
        {
          memcpy(v39, v18, v28);
          v18 += BYTE5(v19);
          v39 += v28;
          --v38;
        }
        while (v38);
      }
      ++v30;
      v31 = v34;
    }
    while (v30 < DWORD2(v57));
  }
  else
  {
    v34 = 0;
  }
  v41 = v55;
  if (v55 > v34)
  {
    v42 = v55 - v34;
    v43 = (UInt8 *)&v56[v28 * v34];
    do
    {
      memcpy(v43, (char *)&v50 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0), v28);
      v43 += v28;
      --v42;
    }
    while (v42);
  }
  v44 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v56, v51, (CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
  Semantic = C3DMeshSourceGetSemantic(v54);
  v46 = HIBYTE(v53);
  v47 = BYTE6(v53);
  v48 = C3DSizeOfBaseType(BYTE6(v53));
  v40 = C3DMeshSourceCreateWithData(Semantic, v44, v47, v46, v41, v48 * v46, 0);
  CFRelease(v44);
  return v40;
}

uint64_t C3DMeshSourceCreateCopy(uint64_t a1)
{
  uint64_t v2;
  const void *Copy;
  const void *v4;
  uint64_t v5;

  v2 = _C3DMeshSourceCreate();
  Copy = (const void *)C3DSourceAccessorCreateCopy(*(_QWORD *)(a1 + 64));
  C3DGenericSourceInit(v2, Copy);
  C3DSourceAccessorSetSource((uint64_t)Copy, v2);
  CFRelease(Copy);
  v4 = *(const void **)(a1 + 72);
  v5 = *(_QWORD *)(a1 + 80);
  if (v5)
    C3DGenericSourceSetMTLBuffer(v2, (uint64_t)v4, v5);
  else
    C3DGenericSourceSetData(v2, v4);
  *(_WORD *)(v2 + 96) = *(_WORD *)(a1 + 96);
  return v2;
}

uint64_t C3DMeshSourceCreateDeepCopy(uint64_t a1)
{
  uint64_t v2;

  v2 = _C3DMeshSourceCreate();
  C3DGenericSourceInitDeepCopy(a1, v2);
  *(_WORD *)(v2 + 96) = *(_WORD *)(a1 + 96);
  return v2;
}

uint64_t C3DMeshSourceCreateMutableCopy(uint64_t a1)
{
  uint64_t v2;

  v2 = _C3DMeshSourceCreate();
  C3DGenericSourceInitMutableCopy(a1, v2);
  *(_WORD *)(v2 + 96) = *(_WORD *)(a1 + 96);
  return v2;
}

double C3DMeshSourceGetValueAtIndexAsVector3(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  const UInt8 *ValuePtrAtIndex;
  float *v14;
  int VectorType;
  float32x4_t v16;
  float v17;
  float v18;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DMeshSourceCreateWithAccessor_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = *(_QWORD **)(a1 + 64);
  ValuePtrAtIndex = C3DSourceAccessorGetValuePtrAtIndex(v12, a2);
  if (!ValuePtrAtIndex)
    return 0.0;
  v14 = (float *)ValuePtrAtIndex;
  VectorType = C3DSourceAccessorGetVectorType((uint64_t)v12);
  return C3DConvertFloatingTypeToFloat4(VectorType, v14, v16, v17, v18);
}

double C3DMeshSourceGetValueAtIndexAsVector2(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  float *ValuePtrAtIndex;
  int VectorType;
  float32x4_t v15;
  float v16;
  float v17;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DMeshSourceCreateWithAccessor_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = *(_QWORD **)(a1 + 64);
  ValuePtrAtIndex = (float *)C3DSourceAccessorGetValuePtrAtIndex(v12, a2);
  VectorType = C3DSourceAccessorGetVectorType((uint64_t)v12);
  return C3DConvertFloatingTypeToFloat4(VectorType, ValuePtrAtIndex, v15, v16, v17);
}

uint64_t C3DMeshSourceGetComponentsCountPerValue(uint64_t a1)
{
  return C3DSourceAccessorGetComponentsCountPerValue(*(_QWORD *)(a1 + 64));
}

uint64_t C3DMeshSourceCreateCopyWithComponentsBaseType(uint64_t a1, int a2)
{
  _QWORD *Accessor;
  NSObject *v4;
  NSObject *v5;
  uint64_t v7;
  uint64_t ComponentsCountPerValue;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  CFDataRef v14;
  uint64_t v15;
  uint64_t Count;
  uint64_t v17;
  uint64_t v18;
  const UInt8 *ValuePtrAtIndex;
  uint64_t v20;
  int v21;
  float v22;
  float v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  __int16 v28;
  __int16 v29;
  NSObject *v30;
  uint64_t v31;
  uint8_t buf;
  _BYTE v34[15];

  Accessor = (_QWORD *)C3DGenericSourceGetAccessor(a1);
  if (C3DSourceAccessorGetComponentsValueType((uint64_t)Accessor) != 1)
  {
    v5 = scn_default_log();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      C3DMeshSourceCreateCopyWithComponentsBaseType_cold_3();
    return 0;
  }
  if (C3DSourceAccessorIsInterleaved((uint64_t)Accessor))
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      C3DMeshSourceCreateCopyWithComponentsBaseType_cold_1();
    return 0;
  }
  v7 = C3DSizeOfBaseType(a2);
  ComponentsCountPerValue = C3DSourceAccessorGetComponentsCountPerValue((uint64_t)Accessor);
  v9 = ComponentsCountPerValue * v7;
  if (((ComponentsCountPerValue * v7) & 3) != 0)
    v10 = -((_DWORD)ComponentsCountPerValue * (_DWORD)v7) & 3;
  else
    v10 = 0;
  v11 = v10 + v9;
  v12 = (v10 + v9) * C3DSourceAccessorGetCount((uint64_t)Accessor);
  v13 = (char *)C3DMalloc(v12);
  bzero(v13, v12);
  v14 = CFDataCreateWithBytesNoCopy(0, (const UInt8 *)v13, v12, 0);
  LOWORD(v12) = C3DMeshSourceGetSemantic(a1);
  v15 = C3DSourceAccessorGetComponentsCountPerValue((uint64_t)Accessor);
  Count = C3DSourceAccessorGetCount((uint64_t)Accessor);
  v31 = C3DMeshSourceCreateWithData(v12, v14, a2, v15, Count, v11, 0);
  v17 = C3DGenericSourceGetAccessor(v31);
  C3DSourceAccessorSetPadding(v17, v10);
  if (C3DMeshSourceGetCount(a1) >= 1)
  {
    v18 = 0;
    while (1)
    {
      ValuePtrAtIndex = C3DSourceAccessorGetValuePtrAtIndex(Accessor, v18);
      if (C3DSourceAccessorGetComponentsCountPerValue((uint64_t)Accessor) >= 1)
        break;
LABEL_35:
      ++v18;
      v13 += v11;
      if (v18 >= C3DMeshSourceGetCount(a1))
        goto LABEL_36;
    }
    v20 = 0;
    while (1)
    {
      if (a2 > 14)
      {
        if (a2 == 15)
        {
          v24 = HIWORD(*(_DWORD *)ValuePtrAtIndex) & 0x8000;
          v25 = (*(_DWORD *)ValuePtrAtIndex >> 23);
          v26 = v25 - 112;
          v27 = v25 - 113;
          v28 = v24 | 0x7BFF;
          if (v25 == 255)
            v28 = v24 | ((*(_DWORD *)ValuePtrAtIndex & 0x7FFFFF) != 0) | 0x7C00;
          if (v25 >= 0x71)
            v29 = v28;
          else
            v29 = HIWORD(*(_DWORD *)ValuePtrAtIndex) & 0x8000;
          v21 = HIWORD(*(_DWORD *)ValuePtrAtIndex) & 0x8000 | (*(_DWORD *)ValuePtrAtIndex >> 13) & 0x3FF | (v26 << 10);
          if (v27 > 0x1D)
            LOWORD(v21) = v29;
LABEL_31:
          *(_WORD *)&v13[2 * v20] = v21;
          goto LABEL_34;
        }
        if (a2 != 16)
        {
LABEL_32:
          v30 = scn_default_log();
          if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
            C3DMeshSourceCreateCopyWithComponentsBaseType_cold_2(&buf, v34, v30);
          goto LABEL_34;
        }
        v22 = *(float *)ValuePtrAtIndex;
        v23 = 255.0;
      }
      else
      {
        if (a2 != 4)
        {
          if (a2 != 14)
            goto LABEL_32;
          v21 = (int)(float)(*(float *)ValuePtrAtIndex * 32767.0);
          goto LABEL_31;
        }
        v22 = *(float *)ValuePtrAtIndex;
        v23 = 127.0;
      }
      v13[v20] = (int)(float)(v22 * v23);
LABEL_34:
      ++v20;
      ValuePtrAtIndex += 4;
      if (C3DSourceAccessorGetComponentsCountPerValue((uint64_t)Accessor) <= v20)
        goto LABEL_35;
    }
  }
LABEL_36:
  CFRelease(v14);
  return v31;
}

uint64_t C3DMeshSourceCreateCopyWithBaseType(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t Content;
  unint64_t v7;
  unint64_t v8;
  unsigned int CompoundType;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __CFData *Mutable;
  NSObject *v18;
  const UInt8 *v19;
  const UInt8 *BytePtr;
  __int16 Semantic;
  uint64_t Accessor;

  Content = C3DMeshSourceGetContent(a1);
  v8 = v7;
  CompoundType = C3DBaseTypeGetCompoundType(BYTE6(v7), HIBYTE(v7));
  if (CompoundType == a2)
  {
    if (!a3)
      return C3DMeshSourceCreateCopy(a1);
    v10 = _C3DMeshSourceCreate();
    C3DGenericSourceInitMutableCopy(a1, v10);
    *(_WORD *)(v10 + 96) = *(_WORD *)(a1 + 96);
  }
  else
  {
    v11 = CompoundType;
    v12 = C3DSizeOfBaseType(a2);
    v13 = v12;
    if ((v12 & 3) != 0)
      v14 = -(int)v12 & 3;
    else
      v14 = 0;
    if ((C3DConvertIsConvertible(a2, v11) & 1) != 0)
    {
      v15 = v14 + v13;
      if (a3)
      {
        Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v15 * v8);
        CFDataSetLength(Mutable, v15 * v8);
      }
      else
      {
        v19 = (const UInt8 *)malloc_type_calloc(v15 * v8, 1uLL, 0x7DCD4C24uLL);
        Mutable = CFDataCreateWithBytesNoCopy(0, v19, v15 * v8, 0);
      }
      BytePtr = CFDataGetBytePtr(Mutable);
      C3DConvertBatch((uint64_t)BytePtr, (unsigned __int16)(v14 + v13) | ((unsigned __int16)a2 << 16) | ((unint64_t)v8 << 32), Content, (v8 >> 16) & 0xFF0000 | BYTE5(v8) | ((unint64_t)v8 << 32));
      Semantic = C3DMeshSourceGetSemantic(a1);
      v10 = C3DMeshSourceCreateWithData(Semantic, Mutable, a2, 1, v8, v15, 0);
      CFRelease(Mutable);
      if (a3)
        C3DGenericSourceMarkMutable(v10);
      Accessor = C3DGenericSourceGetAccessor(v10);
      C3DSourceAccessorSetPadding(Accessor, v14);
    }
    else
    {
      v18 = scn_default_log();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        C3DMeshSourceCreateCopyWithBaseType_cold_1(v11, a2, v18);
      return 0;
    }
  }
  return v10;
}

size_t C3DMeshSourcePrintData(uint64_t a1, uint64_t a2)
{
  size_t result;
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  int Semantic;
  const __CFString *v9;
  FILE **v10;
  FILE *v11;
  const char *CStringPtr;
  uint64_t v13;
  uint64_t v14;
  FILE *v15;
  FILE *v16;
  FILE *v17;

  result = C3DMeshSourceGetContent(a1);
  if (result)
  {
    v6 = result;
    v7 = v5;
    Semantic = C3DMeshSourceGetSemantic(a1);
    v9 = C3DMeshSourceSemanticToSemanticString(Semantic);
    v10 = (FILE **)MEMORY[0x1E0C80C20];
    v11 = (FILE *)*MEMORY[0x1E0C80C20];
    CStringPtr = CFStringGetCStringPtr(v9, 0x600u);
    result = fprintf(v11, "%s\n", CStringPtr);
    v13 = v7 >= a2 ? a2 : v7;
    if (v13 >= 1)
    {
      v14 = 0;
      while (1)
      {
        if (BYTE4(v7) <= 0x18u)
        {
          switch(BYTE4(v7))
          {
            case 8u:
              v16 = *v10;
              goto LABEL_24;
            case 9u:
              v17 = *v10;
              goto LABEL_25;
            case 0xAu:
              v15 = *v10;
LABEL_26:
              result = fprintf(v15, "%4d : %+.2f %+.2f %+.2f %+.2f\n");
              goto LABEL_27;
          }
          goto LABEL_22;
        }
        if (BYTE4(v7) > 0x2Bu)
          break;
        if (BYTE4(v7) != 25)
        {
          if (BYTE4(v7) == 43)
          {
            v16 = *v10;
LABEL_24:
            result = fprintf(v16, "%4d : %+.2f %+.2f\n");
            goto LABEL_27;
          }
          goto LABEL_22;
        }
        result = fprintf(*v10, "%4d : %3d %3d %3d %3d\n");
LABEL_27:
        ++v14;
        v6 += BYTE5(v7);
        if (v13 == v14)
          return result;
      }
      if (BYTE4(v7) == 44)
      {
        v17 = *v10;
LABEL_25:
        result = fprintf(v17, "%4d : %+.2f %+.2f %+.2f\n");
        goto LABEL_27;
      }
      if (BYTE4(v7) == 45)
      {
        v15 = *v10;
        goto LABEL_26;
      }
LABEL_22:
      result = fwrite("type debugging not implemented\n", 0x1FuLL, 1uLL, *v10);
      goto LABEL_27;
    }
  }
  return result;
}

uint64_t C3DMeshSourceGetModelKitSemantic(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DMeshSourceCreateWithAccessor_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(unsigned __int8 *)(a1 + 99);
}

id _C3DMeshSourceCFFinalize(_QWORD *a1)
{
  CFNumberRef v2;
  __CFNotificationCenter *LocalCenter;
  void *valuePtr;

  if (C3DGenericSourceIsPrimary((uint64_t)a1))
  {
    valuePtr = C3DGenericSourceGetData(a1);
    v2 = CFNumberCreate(0, kCFNumberLongType, &valuePtr);
    LocalCenter = CFNotificationCenterGetLocalCenter();
    CFNotificationCenterPostNotification(LocalCenter, CFSTR("kC3DNotificationMeshSourceWillDie"), v2, 0, 1u);
    CFRelease(v2);
  }
  return _C3DGenericSourceCFFinalize((uint64_t)a1);
}

__CFString *_C3DMeshSourceCFCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;
  int ComponentsValueType;
  int ComponentsCountPerValue;
  uint64_t Count;
  uint64_t MTLBuffer;
  unsigned int IsMutable;
  uint64_t v8;
  uint64_t Data;
  uint64_t v10;
  int CompoundType;
  const __CFString *v12;
  const __CFString *v13;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  ComponentsValueType = C3DSourceAccessorGetComponentsValueType(*(_QWORD *)(a1 + 64));
  ComponentsCountPerValue = C3DSourceAccessorGetComponentsCountPerValue(*(_QWORD *)(a1 + 64));
  Count = C3DMeshSourceGetCount(a1);
  MTLBuffer = C3DGenericSourceGetMTLBuffer(a1);
  IsMutable = C3DGenericSourceIsMutable(a1);
  v8 = *(_QWORD *)(a1 + 64);
  if (MTLBuffer)
    Data = C3DGenericSourceGetMTLBuffer(a1);
  else
    Data = (uint64_t)C3DGenericSourceGetData((_QWORD *)a1);
  v10 = Data;
  CompoundType = C3DBaseTypeGetCompoundType(ComponentsValueType, ComponentsCountPerValue);
  v12 = C3DMeshSourceSemanticToSemanticString(*(char *)(a1 + 96));
  v13 = C3DBaseTypeStringDescription(CompoundType);
  CFStringAppendFormat(Mutable, 0, CFSTR("<C3DMeshSource %p(%@) data:(%p) mut:%d count:%ld type:%@ divisor:%d mtl:%d offset:%d stride:%d"), a1, v12, v10, IsMutable, Count, v13, *(unsigned __int8 *)(a1 + 98), MTLBuffer != 0, *(_QWORD *)(v8 + 48), *(_QWORD *)(v8 + 40));
  CFStringAppend(Mutable, CFSTR(">"));
  return Mutable;
}

BOOL _C3DMeshSourceInitWithPropertyList(uint64_t a1, const __CFDictionary *a2, uint64_t a3, CFErrorRef *a4)
{
  _BOOL8 result;
  const __CFString *Value;
  int SemanticFromSerializedSemanticString;
  uint64_t Accessor;
  const __CFNumber *v11;
  NSObject *v12;
  NSObject *v13;
  CFErrorRef MalformedDocumentError;
  int valuePtr;

  result = _C3DGenericSourceInitWithPropertyList(a1, a2, (uint64_t)a4, a4);
  if (result)
  {
    if (!a2)
      return 1;
    if ((C3DCFTypeIsDictionary() & 1) == 0)
    {
      v12 = scn_default_log();
      result = os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
      if (!result)
        return result;
      _C3DMeshSourceInitWithPropertyList_cold_2(v12);
      return 0;
    }
    Value = (const __CFString *)CFDictionaryGetValue(a2, CFSTR("semantic"));
    if (Value)
    {
      SemanticFromSerializedSemanticString = __GetSemanticFromSerializedSemanticString(Value);
      *(_WORD *)(a1 + 96) = SemanticFromSerializedSemanticString;
      if (SemanticFromSerializedSemanticString == 5)
      {
        Accessor = C3DGenericSourceGetAccessor(a1);
        if (*(_WORD *)(Accessor + 24) == 26)
          *(_WORD *)(Accessor + 24) = 25;
      }
      v11 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("mkSemantic"));
      if (v11)
      {
        valuePtr = 0;
        CFNumberGetValue(v11, kCFNumberIntType, &valuePtr);
        C3DMeshSourceSetModelKitSemantic(a1, valuePtr);
      }
      return 1;
    }
    v13 = scn_default_log();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      _C3DMeshSourceInitWithPropertyList_cold_1();
      if (a4)
      {
LABEL_15:
        if (!*a4)
        {
          MalformedDocumentError = C3DSceneSourceCreateMalformedDocumentError(0);
          result = 0;
          *a4 = MalformedDocumentError;
          return result;
        }
      }
    }
    else if (a4)
    {
      goto LABEL_15;
    }
    return 0;
  }
  return result;
}

__CFDictionary *_C3DMeshSourceCopyPropertyList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __CFDictionary *v5;
  __int16 v6;
  const __CFString *v7;
  NSObject *v8;
  CFNumberRef v9;
  int valuePtr;

  v5 = _C3DGenericSourceCopyPropertyList(a1, a2, a4, a4);
  if (!v5)
    return v5;
  v6 = *(_WORD *)(a1 + 96);
  if (!(_BYTE)v6)
  {
    v7 = CFSTR("vertex");
    if (CFSTR("vertex"))
      goto LABEL_4;
LABEL_6:
    v8 = scn_default_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      _C3DMeshSourceCopyPropertyList_cold_1();
    goto LABEL_8;
  }
  v7 = C3DMeshSourceSemanticToSemanticString((char)v6);
  if (!v7)
    goto LABEL_6;
LABEL_4:
  CFDictionarySetValue(v5, CFSTR("semantic"), v7);
LABEL_8:
  if (*(_BYTE *)(a1 + 99))
  {
    valuePtr = *(unsigned __int8 *)(a1 + 99);
    v9 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    CFDictionarySetValue(v5, CFSTR("mkSemantic"), v9);
    CFRelease(v9);
  }
  return v5;
}

__CFArray *_C3DMeshSourceCopyInstanceVariables(uint64_t a1)
{
  __CFArray *Mutable;
  __CFDictionary *v3;
  CFNumberRef v4;
  CFNumberRef v5;
  CFNumberRef v6;
  __CFDictionary *v7;
  CFNumberRef v8;
  CFNumberRef v9;
  CFNumberRef v10;
  __CFDictionary *v11;
  CFNumberRef v12;
  CFNumberRef v13;
  CFNumberRef v14;
  uint64_t v16;
  int v17;
  int valuePtr;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v3 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v17 = 2;
  valuePtr = 5;
  v16 = a1 + 64;
  v4 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v5 = CFNumberCreate(0, kCFNumberSInt32Type, &v17);
  v6 = CFNumberCreate(0, kCFNumberLongType, &v16);
  CFDictionarySetValue(v3, CFSTR("name"), CFSTR("accessor"));
  CFDictionarySetValue(v3, CFSTR("type"), v4);
  CFDictionarySetValue(v3, CFSTR("address"), v6);
  CFDictionarySetValue(v3, CFSTR("semantic"), v5);
  CFArrayAppendValue(Mutable, v3);
  CFRelease(v5);
  CFRelease(v3);
  CFRelease(v6);
  CFRelease(v4);
  v7 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v17 = 2;
  valuePtr = 5;
  v16 = a1 + 72;
  v8 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v9 = CFNumberCreate(0, kCFNumberSInt32Type, &v17);
  v10 = CFNumberCreate(0, kCFNumberLongType, &v16);
  CFDictionarySetValue(v7, CFSTR("name"), CFSTR("data"));
  CFDictionarySetValue(v7, CFSTR("type"), v8);
  CFDictionarySetValue(v7, CFSTR("address"), v10);
  CFDictionarySetValue(v7, CFSTR("semantic"), v9);
  CFArrayAppendValue(Mutable, v7);
  CFRelease(v9);
  CFRelease(v7);
  CFRelease(v10);
  CFRelease(v8);
  v11 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v17 = 0;
  valuePtr = 2;
  v16 = a1 + 96;
  v12 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v13 = CFNumberCreate(0, kCFNumberSInt32Type, &v17);
  v14 = CFNumberCreate(0, kCFNumberLongType, &v16);
  CFDictionarySetValue(v11, CFSTR("name"), CFSTR("semantic"));
  CFDictionarySetValue(v11, CFSTR("type"), v12);
  CFDictionarySetValue(v11, CFSTR("address"), v14);
  CFDictionarySetValue(v11, CFSTR("semantic"), v13);
  CFArrayAppendValue(Mutable, v11);
  CFRelease(v13);
  CFRelease(v11);
  CFRelease(v14);
  CFRelease(v12);
  return Mutable;
}

void C3D::CopyProbeFromOldTextureToNewTexture(C3D::Pass *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, C3D::RefCountedResource *a6, int a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL4 IsCube;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  C3D::Pass *v27;
  int v28;
  C3D::PassDescriptor *v29;
  uint64_t v30;
  C3D::PassDescriptor *v31;
  uint64_t v32;
  void *v33;
  C3D::PassDescriptor *v34;
  uint64_t v35;
  id v36;
  C3D::RefCountedResource *PersistentResource;
  C3D::PassResource *v38;
  C3D::PassResource *v39;
  C3D::PassDescriptor *v40;
  uint64_t v41;
  __int128 v42;
  int v43;
  int v44;
  C3D::Pass *v45;

  v45 = a1;
  v12 = *((_QWORD *)a1 + 3);
  v13 = a5 + 48;
  v14 = objc_msgSend((id)C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(a5 + 48), "textureType");
  IsCube = SCNMTLTextureTypeIsCube(v14);
  v16 = a3 + 48;
  v17 = objc_msgSend((id)C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(v16), "textureType");
  v18 = SCNMTLTextureTypeIsCube(v17);
  v19 = objc_msgSend((id)C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(v13), "textureType");
  v20 = SCNMTLTextureTypeIsCube(v19);
  if (v18 == v20)
  {
    if (IsCube)
      v28 = 6;
    else
      v28 = 1;
    LODWORD(v42) = v28 * a4;
    DWORD1(v42) = v28;
    *((_QWORD *)&v42 + 1) = 0x500000000;
    v43 = v28 * a7;
    v44 = 0;
    v27 = C3D::RenderGraph::createPass<C3D::CopyTextureComputePass,C3D::Pass *&,C3D::CopyTextureComputePass::Parameters>(v12, &v45, (const Parameters *)&v42);
  }
  else
  {
    v21 = v20;
    if (a7 | a4)
    {
      v22 = scn_default_log();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_FAULT))
        C3D::CopyProbeFromOldTextureToNewTexture(v22, v23, v24);
    }
    if (v18)
      v25 = 0;
    else
      v25 = 2;
    LOBYTE(v42) = v25;
    if (v21)
      v26 = 0;
    else
      v26 = 2;
    BYTE1(v42) = v26;
    v27 = C3D::RenderGraph::createPass<C3D::ConvertCubePass,C3D::Pass *&,C3D::ConvertCubePass::Parameters>(v12, &v45, (const Parameters *)&v42);
    *(_WORD *)(C3D::Pass::descriptor(v27) + 10) = 5;
  }
  v29 = (C3D::PassDescriptor *)C3D::Pass::descriptor(v27);
  v30 = C3D::PassDescriptor::inputAtIndex(v29, 0);
  *(_WORD *)(v30 + 66) |= 0x100u;
  v31 = (C3D::PassDescriptor *)C3D::Pass::descriptor(v27);
  v32 = C3D::PassDescriptor::outputAtIndex(v31, 0);
  *(_WORD *)(v32 + 66) |= 0x100u;
  v33 = (void *)C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(v13);
  SCNMTLTextureDescFromMTLTexture(v33, (uint64_t)&v42);
  v34 = (C3D::PassDescriptor *)C3D::Pass::descriptor(v27);
  v35 = C3D::PassDescriptor::outputAtIndex(v34, 0);
  *(_OWORD *)(v35 + 16) = v42;
  *(_DWORD *)(v35 + 32) = v43;
  v36 = (id)C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(v16);
  PersistentResource = (C3D::RefCountedResource *)C3D::RenderGraph::createPersistentResource(v12, (uint64_t)v36);
  v38 = (C3D::PassResource *)C3D::Pass::resource(v27);
  C3D::PassResource::setInputAtIndex(v38, PersistentResource, 0);
  v39 = (C3D::PassResource *)C3D::Pass::resource(v27);
  C3D::PassResource::setOutputAtIndex(v39, a6, 0);
  v40 = (C3D::PassDescriptor *)C3D::Pass::descriptor(v27);
  v41 = C3D::PassDescriptor::outputAtIndex(v40, 0);
  C3D::Array<C3D::PassIODescriptor,0u,C3D::StackAllocator>::push_back<C3D::PassIODescriptor&>(a2, v41);
  C3D::Pass::addDependency(v45, v27);
}

C3D::CopyTextureComputePass *C3D::RenderGraph::createPass<C3D::CopyTextureComputePass,C3D::Pass *&,C3D::CopyTextureComputePass::Parameters>(uint64_t a1, C3D::Pass **a2, const Parameters *a3)
{
  C3D::CopyTextureComputePass *Aligned;

  Aligned = (C3D::CopyTextureComputePass *)C3DScratchAllocatorAllocateAligned(*(_QWORD *)(a1 + 16), 144, 8, 0);
  C3D::CopyTextureComputePass::CopyTextureComputePass(Aligned, (C3D::RenderGraph *)a1, *a2, a3);
  C3D::RenderGraph::addPass((C3D::RenderGraph *)a1, Aligned);
  if (*(_BYTE *)(a1 + 209))
    (*(void (**)(C3D::CopyTextureComputePass *))(*(_QWORD *)Aligned + 8))(Aligned);
  return Aligned;
}

C3D::ConvertCubePass *C3D::RenderGraph::createPass<C3D::ConvertCubePass,C3D::Pass *&,C3D::ConvertCubePass::Parameters>(uint64_t a1, C3D::Pass **a2, const Parameters *a3)
{
  C3D::ConvertCubePass *Aligned;

  Aligned = (C3D::ConvertCubePass *)C3DScratchAllocatorAllocateAligned(*(_QWORD *)(a1 + 16), 320, 16, 0);
  C3D::ConvertCubePass::ConvertCubePass(Aligned, (C3D::RenderGraph *)a1, *a2, a3);
  C3D::RenderGraph::addPass((C3D::RenderGraph *)a1, Aligned);
  if (*(_BYTE *)(a1 + 209))
    (*(void (**)(C3D::ConvertCubePass *))(*(_QWORD *)Aligned + 8))(Aligned);
  return Aligned;
}

double C3D::ComputeProbeFromTextureOrPreviousPass(C3D::Pass *a1, uint64_t a2, C3D::RefCountedResource *a3, __int16 a4, void **a5, C3D::Pass *a6, unsigned __int16 a7, uint64_t a8)
{
  uint64_t v15;
  void *v16;
  _BOOL4 IsCube;
  char ArrayElementType;
  char v19;
  unsigned int v20;
  C3D::Pass *v21;
  C3D::PassDescriptor *v22;
  _OWORD *v23;
  C3D::PassDescriptor *v24;
  _OWORD *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  C3D::PassDescriptor *v32;
  uint64_t v33;
  C3D::PassDescriptor *v34;
  uint64_t v35;
  C3D::PassResource *v36;
  C3D::Pass *v37;
  C3D::PassDescriptor *v38;
  _OWORD *v39;
  C3D::PassDescriptor *v40;
  _OWORD *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  C3D::PassDescriptor *v45;
  uint64_t v46;
  C3D::PassDescriptor *v47;
  _OWORD *v48;
  C3D::PassDescriptor *v49;
  _OWORD *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  C3D::PassDescriptor *v54;
  C3D::PassDescriptor *v55;
  _OWORD *v56;
  C3D::PassDescriptor *v57;
  _OWORD *v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  C3D::PassDescriptor *v62;
  C3D::PassDescriptor *v63;
  _OWORD *v64;
  C3D::PassDescriptor *v65;
  _OWORD *v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  C3D::PassDescriptor *v70;
  _OWORD *v71;
  C3D::PassDescriptor *v72;
  _OWORD *v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  C3D::PassDescriptor *v77;
  uint64_t v78;
  C3D::PassDescriptor *v79;
  _OWORD *v80;
  C3D::PassDescriptor *v81;
  _OWORD *v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  C3D::PassDescriptor *v86;
  _OWORD *v87;
  C3D::PassDescriptor *v88;
  _OWORD *v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  C3D::PassDescriptor *v93;
  uint64_t v94;
  C3D::PassDescriptor *v95;
  _OWORD *v96;
  C3D::PassDescriptor *v97;
  _OWORD *v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  C3D::PassDescriptor *v102;
  uint64_t v103;
  C3D::PassDescriptor *v104;
  uint64_t v105;
  C3D::PassResource *v106;
  double result;
  __int128 v108;
  int v109;
  __int128 v110;
  int v111;
  C3D::Pass *v112;
  _BYTE v113[16];
  __int128 v114;
  int v115;
  uint64_t v116;

  v116 = *MEMORY[0x1E0C80C00];
  v112 = a1;
  v15 = *((_QWORD *)a1 + 3);
  v16 = *(void **)a3;
  v110 = 0uLL;
  v111 = 0;
  SCNMTLTextureDescFromMTLTexture(v16, (uint64_t)&v110);
  IsCube = SCNMTLTextureTypeIsCube(objc_msgSend(v16, "textureType"));
  C3D::PassIODescriptor::PassIODescriptor((uint64_t)v113, 0);
  v114 = v110;
  v115 = v111;
  ArrayElementType = SCNMTLTextureTypeGetArrayElementType(BYTE8(v110));
  v19 = 0;
  BYTE8(v114) = ArrayElementType;
  WORD3(v114) = 1;
  *(_BYTE *)(a8 + 16) = 0;
  v20 = *(_DWORD *)(a8 + 20);
  if (v20 != 1)
  {
    if (IsCube)
      v19 = 1;
    else
      v19 = 2;
    *(_BYTE *)(a8 + 16) = v19;
  }
  LOBYTE(v108) = v19;
  *(_QWORD *)((char *)&v108 + 4) = __PAIR64__(*(_DWORD *)a8, v20);
  v21 = C3D::RenderGraph::createPass<C3D::ComputeRadiancePass,C3D::Pass *&,C3D::ComputeRadiancePass::Parameters>(v15, &v112, (const Parameters *)&v108);
  if (a6)
  {
    v22 = (C3D::PassDescriptor *)C3D::Pass::descriptor(a6);
    v23 = (_OWORD *)C3D::PassDescriptor::outputAtIndex(v22, a7);
    v24 = (C3D::PassDescriptor *)C3D::Pass::descriptor(v21);
    v25 = (_OWORD *)C3D::PassDescriptor::inputAtIndex(v24, 0);
    *v25 = *v23;
    v26 = v23[4];
    v28 = v23[1];
    v27 = v23[2];
    v25[3] = v23[3];
    v25[4] = v26;
    v25[1] = v28;
    v25[2] = v27;
    C3D::Pass::addDependency(v21, a6);
  }
  else
  {
    if (!a5)
    {
      v29 = scn_default_log();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_FAULT))
        C3D::ComputeProbeFromTextureOrPreviousPass(v29, v30, v31);
    }
    SCNMTLTextureDescFromMTLTexture(*a5, (uint64_t)&v108);
    v32 = (C3D::PassDescriptor *)C3D::Pass::descriptor(v21);
    v33 = C3D::PassDescriptor::inputAtIndex(v32, 0);
    *(_OWORD *)(v33 + 16) = v108;
    *(_DWORD *)(v33 + 32) = v109;
    v34 = (C3D::PassDescriptor *)C3D::Pass::descriptor(v21);
    v35 = C3D::PassDescriptor::inputAtIndex(v34, 0);
    *(_WORD *)(v35 + 66) |= 0x100u;
    v36 = (C3D::PassResource *)C3D::Pass::resource(v21);
    C3D::PassResource::setInputAtIndex(v36, (C3D::RefCountedResource *)a5, 0);
  }
  if (*(_DWORD *)(a8 + 20) != 1)
  {
    if (!*(_BYTE *)(a8 + 16))
    {
      LODWORD(v108) = 1082130432;
      *(_QWORD *)((char *)&v108 + 4) = 0x400000001;
      v37 = C3D::RenderGraph::createPass<C3D::CubeBlurPass,C3D::Pass *&,C3D::CubeBlurPass::Parameters>(v15, &v112, (const Parameters *)&v108);
      v70 = (C3D::PassDescriptor *)C3D::Pass::descriptor(v21);
      v71 = (_OWORD *)C3D::PassDescriptor::outputAtIndex(v70, 0);
      v72 = (C3D::PassDescriptor *)C3D::Pass::descriptor(v37);
      v73 = (_OWORD *)C3D::PassDescriptor::inputAtIndex(v72, 0);
      *v73 = *v71;
      v74 = v71[4];
      v76 = v71[1];
      v75 = v71[2];
      v73[3] = v71[3];
      v73[4] = v74;
      v73[1] = v76;
      v73[2] = v75;
      v77 = (C3D::PassDescriptor *)C3D::Pass::descriptor(v37);
      v78 = C3D::PassDescriptor::inputAtIndex(v77, 0);
      *(_WORD *)(v78 + 66) |= 0x80u;
      v79 = (C3D::PassDescriptor *)C3D::Pass::descriptor(v21);
      v80 = (_OWORD *)C3D::PassDescriptor::outputAtIndex(v79, 0);
      v81 = (C3D::PassDescriptor *)C3D::Pass::descriptor(v37);
      v82 = (_OWORD *)C3D::PassDescriptor::outputAtIndex(v81, 0);
      *v82 = *v80;
      v83 = v80[4];
      v85 = v80[1];
      v84 = v80[2];
      v82[3] = v80[3];
      v82[4] = v83;
      v82[1] = v85;
      v82[2] = v84;
      v86 = (C3D::PassDescriptor *)C3D::Pass::descriptor(v21);
      v87 = (_OWORD *)C3D::PassDescriptor::outputAtIndex(v86, 0);
      v88 = (C3D::PassDescriptor *)C3D::Pass::descriptor(v37);
      v89 = (_OWORD *)C3D::PassDescriptor::outputAtIndex(v88, 1u);
      *v89 = *v87;
      v90 = v87[4];
      v92 = v87[1];
      v91 = v87[2];
      v89[3] = v87[3];
      v89[4] = v90;
      v89[1] = v92;
      v89[2] = v91;
      v93 = (C3D::PassDescriptor *)C3D::Pass::descriptor(v37);
      v94 = C3D::PassDescriptor::outputAtIndex(v93, 1u);
      *(_WORD *)(v94 + 66) |= 8u;
      goto LABEL_19;
    }
    *(_QWORD *)&v108 = 0x4000100000005;
    v37 = C3D::RenderGraph::createPass<C3D::BoxBlurPass,C3D::Pass *&,C3D::BoxBlurPass::Parameters>(v15, &v112, (const Parameters *)&v108);
    v47 = (C3D::PassDescriptor *)C3D::Pass::descriptor(v21);
    v48 = (_OWORD *)C3D::PassDescriptor::outputAtIndex(v47, 0);
    v49 = (C3D::PassDescriptor *)C3D::Pass::descriptor(v37);
    v50 = (_OWORD *)C3D::PassDescriptor::inputAtIndex(v49, 0);
    *v50 = *v48;
    v51 = v48[4];
    v53 = v48[1];
    v52 = v48[2];
    v50[3] = v48[3];
    v50[4] = v51;
    v50[1] = v53;
    v50[2] = v52;
    v54 = (C3D::PassDescriptor *)C3D::Pass::descriptor(v37);
    *(_BYTE *)(C3D::PassDescriptor::inputAtIndex(v54, 0) + 26) = 1;
    if (IsCube)
    {
      v55 = (C3D::PassDescriptor *)C3D::Pass::descriptor(v21);
      v56 = (_OWORD *)C3D::PassDescriptor::outputAtIndex(v55, 0);
      v57 = (C3D::PassDescriptor *)C3D::Pass::descriptor(v37);
      v58 = (_OWORD *)C3D::PassDescriptor::outputAtIndex(v57, 0);
      *v58 = *v56;
      v59 = v56[4];
      v61 = v56[1];
      v60 = v56[2];
      v58[3] = v56[3];
      v58[4] = v59;
      v58[1] = v61;
      v58[2] = v60;
      v62 = (C3D::PassDescriptor *)C3D::Pass::descriptor(v37);
      *(_BYTE *)(C3D::PassDescriptor::outputAtIndex(v62, 0) + 26) = 4;
      C3D::Pass::addDependency(v37, v21);
      LOWORD(v108) = *(unsigned __int8 *)(a8 + 16);
      v21 = C3D::RenderGraph::createPass<C3D::ConvertCubeComputePass,C3D::Pass *&,C3D::ConvertCubeComputePass::Parameters>(v15, &v112, (const Parameters *)&v108);
      v63 = (C3D::PassDescriptor *)C3D::Pass::descriptor(v37);
      v64 = (_OWORD *)C3D::PassDescriptor::outputAtIndex(v63, 0);
      v65 = (C3D::PassDescriptor *)C3D::Pass::descriptor(v21);
      v66 = (_OWORD *)C3D::PassDescriptor::inputAtIndex(v65, 0);
      *v66 = *v64;
      v67 = v64[4];
      v69 = v64[1];
      v68 = v64[2];
      v66[3] = v64[3];
      v66[4] = v67;
      v66[1] = v69;
      v66[2] = v68;
      a4 *= 6;
    }
    else
    {
      *(_WORD *)(C3D::Pass::descriptor(v37) + 4) = a4;
      C3D::Pass::addDependency(v37, v21);
      if (*(_BYTE *)(a8 + 16) == 2)
        goto LABEL_24;
      LOBYTE(v108) = *(_BYTE *)(a8 + 16);
      BYTE1(v108) = 2;
      v21 = C3D::RenderGraph::createPass<C3D::ConvertCubePass,C3D::Pass *&,C3D::ConvertCubePass::Parameters>(v15, &v112, (const Parameters *)&v108);
      v95 = (C3D::PassDescriptor *)C3D::Pass::descriptor(v37);
      v96 = (_OWORD *)C3D::PassDescriptor::outputAtIndex(v95, 0);
      v97 = (C3D::PassDescriptor *)C3D::Pass::descriptor(v21);
      v98 = (_OWORD *)C3D::PassDescriptor::inputAtIndex(v97, 0);
      *v98 = *v96;
      v99 = v96[4];
      v101 = v96[1];
      v100 = v96[2];
      v98[3] = v96[3];
      v98[4] = v99;
      v98[1] = v101;
      v98[2] = v100;
      *(_WORD *)(C3D::Pass::descriptor(v21) + 10) = 5;
      v102 = (C3D::PassDescriptor *)C3D::Pass::descriptor(v21);
      v103 = C3D::PassDescriptor::outputAtIndex(v102, 0);
      *(_WORD *)(v103 + 66) &= 0xFFFCu;
    }
    *(_WORD *)(C3D::Pass::descriptor(v21) + 4) = a4;
    C3D::Pass::addDependency(v21, v37);
LABEL_23:
    v37 = v21;
    goto LABEL_24;
  }
  if (IsCube)
    goto LABEL_23;
  LOBYTE(v108) = *(_BYTE *)(a8 + 16);
  BYTE1(v108) = 2;
  v37 = C3D::RenderGraph::createPass<C3D::ConvertCubePass,C3D::Pass *&,C3D::ConvertCubePass::Parameters>(v15, &v112, (const Parameters *)&v108);
  v38 = (C3D::PassDescriptor *)C3D::Pass::descriptor(v21);
  v39 = (_OWORD *)C3D::PassDescriptor::outputAtIndex(v38, 0);
  v40 = (C3D::PassDescriptor *)C3D::Pass::descriptor(v37);
  v41 = (_OWORD *)C3D::PassDescriptor::inputAtIndex(v40, 0);
  *v41 = *v39;
  v42 = v39[4];
  v44 = v39[1];
  v43 = v39[2];
  v41[3] = v39[3];
  v41[4] = v42;
  v41[1] = v44;
  v41[2] = v43;
  *(_WORD *)(C3D::Pass::descriptor(v37) + 10) = 5;
  v45 = (C3D::PassDescriptor *)C3D::Pass::descriptor(v37);
  v46 = C3D::PassDescriptor::outputAtIndex(v45, 0);
  *(_WORD *)(v46 + 66) &= 0xFFFCu;
  *(_WORD *)(C3D::Pass::descriptor(v37) + 4) = a4;
LABEL_19:
  C3D::Pass::addDependency(v37, v21);
LABEL_24:
  C3D::Pass::addDependency(v112, v37);
  v104 = (C3D::PassDescriptor *)C3D::Pass::descriptor(v37);
  v105 = C3D::PassDescriptor::outputAtIndex(v104, 0);
  *(_OWORD *)(v105 + 16) = v110;
  *(_DWORD *)(v105 + 32) = v111;
  *(_WORD *)(v105 + 66) |= 0x100u;
  v106 = (C3D::PassResource *)C3D::Pass::resource(v37);
  C3D::PassResource::setOutputAtIndex(v106, a3, 0);
  *(_QWORD *)&result = C3D::Array<C3D::PassIODescriptor,0u,C3D::StackAllocator>::push_back<C3D::PassIODescriptor&>(a2, v105).n128_u64[0];
  return result;
}

C3D::ComputeRadiancePass *C3D::RenderGraph::createPass<C3D::ComputeRadiancePass,C3D::Pass *&,C3D::ComputeRadiancePass::Parameters>(uint64_t a1, C3D::Pass **a2, const Parameters *a3)
{
  C3D::ComputeRadiancePass *Aligned;

  Aligned = (C3D::ComputeRadiancePass *)C3DScratchAllocatorAllocateAligned(*(_QWORD *)(a1 + 16), 128, 8, 0);
  C3D::ComputeRadiancePass::ComputeRadiancePass(Aligned, (C3D::RenderGraph *)a1, *a2, a3);
  C3D::RenderGraph::addPass((C3D::RenderGraph *)a1, Aligned);
  if (*(_BYTE *)(a1 + 209))
    (*(void (**)(C3D::ComputeRadiancePass *))(*(_QWORD *)Aligned + 8))(Aligned);
  return Aligned;
}

C3D::BoxBlurPass *C3D::RenderGraph::createPass<C3D::BoxBlurPass,C3D::Pass *&,C3D::BoxBlurPass::Parameters>(uint64_t a1, C3D::Pass **a2, const Parameters *a3)
{
  C3D::BoxBlurPass *Aligned;

  Aligned = (C3D::BoxBlurPass *)C3DScratchAllocatorAllocateAligned(*(_QWORD *)(a1 + 16), 256, 16, 0);
  C3D::BoxBlurPass::BoxBlurPass(Aligned, (C3D::RenderGraph *)a1, *a2, a3);
  C3D::RenderGraph::addPass((C3D::RenderGraph *)a1, Aligned);
  if (*(_BYTE *)(a1 + 209))
    (*(void (**)(C3D::BoxBlurPass *))(*(_QWORD *)Aligned + 8))(Aligned);
  return Aligned;
}

C3D::ConvertCubeComputePass *C3D::RenderGraph::createPass<C3D::ConvertCubeComputePass,C3D::Pass *&,C3D::ConvertCubeComputePass::Parameters>(uint64_t a1, C3D::Pass **a2, const Parameters *a3)
{
  C3D::ConvertCubeComputePass *Aligned;

  Aligned = (C3D::ConvertCubeComputePass *)C3DScratchAllocatorAllocateAligned(*(_QWORD *)(a1 + 16), 184, 8, 0);
  C3D::ConvertCubeComputePass::ConvertCubeComputePass(Aligned, (C3D::RenderGraph *)a1, *a2, a3);
  C3D::RenderGraph::addPass((C3D::RenderGraph *)a1, Aligned);
  if (*(_BYTE *)(a1 + 209))
    (*(void (**)(C3D::ConvertCubeComputePass *))(*(_QWORD *)Aligned + 8))(Aligned);
  return Aligned;
}

C3D::CubeBlurPass *C3D::RenderGraph::createPass<C3D::CubeBlurPass,C3D::Pass *&,C3D::CubeBlurPass::Parameters>(uint64_t a1, C3D::Pass **a2, const Parameters *a3)
{
  C3D::CubeBlurPass *Aligned;

  Aligned = (C3D::CubeBlurPass *)C3DScratchAllocatorAllocateAligned(*(_QWORD *)(a1 + 16), 128, 8, 0);
  C3D::CubeBlurPass::CubeBlurPass(Aligned, (C3D::RenderGraph *)a1, *a2, a3);
  C3D::RenderGraph::addPass((C3D::RenderGraph *)a1, Aligned);
  if (*(_BYTE *)(a1 + 209))
    (*(void (**)(C3D::CubeBlurPass *))(*(_QWORD *)Aligned + 8))(Aligned);
  return Aligned;
}

double C3D::ComputeProbeFromEnvironmentTexture(C3D::Pass *a1, uint64_t a2, C3D::RefCountedResource *a3, unsigned int a4, uint64_t a5, __int128 *a6)
{
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t RenderContext;
  void *v16;
  void *v17;
  uint64_t v18;
  id *PersistentResource;
  C3D::Pass *v20;
  __int128 *v21;
  uint64_t v22;
  C3D::RefCountedResource *v23;
  __int16 v24;
  void **v25;
  C3D::Pass *v26;
  __int16 v27;
  C3D::Pass *v28;
  C3D::PassDescriptor *v29;
  uint64_t v30;
  C3D::PassDescriptor *v31;
  uint64_t v32;
  __int16 v33;
  C3D::PassResource *v34;
  C3D::PassDescriptor *v35;
  uint64_t v36;
  uint64_t v37;
  double result;
  C3D::Pass *v39;
  C3D::PassDescriptor *v40;
  uint64_t v41;
  C3D::PassDescriptor *v42;
  uint64_t v43;
  C3D::PassResource *v44;
  C3D::PassDescriptor *v45;
  uint64_t v46;
  C3D::PassDescriptor *v47;
  uint64_t v48;
  unsigned int v49;
  int v50;
  C3D::PassDescriptor *v51;
  C3D::Pass *v52;
  C3D::PassDescriptor *v53;
  uint64_t v54;
  C3D::PassDescriptor *v55;
  uint64_t v56;
  C3D::PassResource *v57;
  C3D::PassDescriptor *v58;
  uint64_t v59;
  C3D::PassResource *v60;
  __int128 v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  __int128 v67;
  int v68;
  C3D::Pass *v69;

  v69 = a1;
  v12 = *((_QWORD *)a1 + 3);
  v13 = *(void **)a3;
  v67 = 0uLL;
  v68 = 0;
  SCNMTLTextureDescFromMTLTexture(v13, (uint64_t)&v67);
  v14 = *((_QWORD *)a1 + 2);
  RenderContext = C3DEngineContextGetRenderContext(v14);
  v16 = (void *)-[SCNMTLRenderContext resourceManager](RenderContext);
  if (!a5
    || (v17 = (void *)objc_msgSend(v16, "renderResourceForEffectSlot:withEngineContext:didFallbackToDefaultTexture:", a5, v14, 0)) == 0|| (v18 = (uint64_t)v17, objc_msgSend(v17, "textureType") != 5))
  {
    if (SCNMTLTextureTypeIsCube(BYTE8(v67)))
      v27 = 6;
    else
      v27 = 1;
    v65 = xmmword_1DD007610;
    v28 = C3D::RenderGraph::createPass<C3D::FillTexturePass,C3D::Pass *&,C3D::FillTexturePass::Parameters>(v12, &v69, (const Parameters *)&v65);
    v29 = (C3D::PassDescriptor *)C3D::Pass::descriptor(v28);
    v30 = C3D::PassDescriptor::outputAtIndex(v29, 0);
    *(_OWORD *)(v30 + 16) = v67;
    *(_DWORD *)(v30 + 32) = v68;
    v31 = (C3D::PassDescriptor *)C3D::Pass::descriptor(v28);
    v32 = C3D::PassDescriptor::outputAtIndex(v31, 0);
    *(_WORD *)(v32 + 66) |= 0x100u;
    *(_WORD *)(C3D::Pass::descriptor(v28) + 4) = v27 * a4;
    *(_WORD *)(C3D::Pass::descriptor(v28) + 6) = v27;
    v33 = BYTE14(v67);
    *(_WORD *)(C3D::Pass::descriptor(v28) + 10) = v33;
    v34 = (C3D::PassResource *)C3D::Pass::resource(v28);
    C3D::PassResource::setOutputAtIndex(v34, a3, 0);
    C3D::Pass::addDependency(v69, v28);
    v35 = (C3D::PassDescriptor *)C3D::Pass::descriptor(v28);
    v36 = C3D::PassDescriptor::outputAtIndex(v35, 0);
    v37 = a2;
LABEL_12:
    *(_QWORD *)&result = C3D::Array<C3D::PassIODescriptor,0u,C3D::StackAllocator>::push_back<C3D::PassIODescriptor&>(v37, v36).n128_u64[0];
    return result;
  }
  PersistentResource = (id *)C3D::RenderGraph::createPersistentResource(v12, v18);
  if (objc_msgSend(*PersistentResource, "mipmapLevelCount") == 5 && objc_msgSend(*PersistentResource, "width") != 16)
  {
    if (SCNMTLTextureTypeIsCube(objc_msgSend(v13, "textureType")))
      a4 *= 6;
    objc_msgSend(*PersistentResource, "height");
    objc_msgSend(*PersistentResource, "pixelFormat");
    v65 = 0uLL;
    v66 = a4;
    v52 = C3D::RenderGraph::createPass<C3D::CopyTextureComputePass,C3D::Pass *&,C3D::CopyTextureComputePass::Parameters>(v12, &v69, (const Parameters *)&v65);
    SCNMTLTextureDescFromMTLTexture(*PersistentResource, (uint64_t)&v65);
    v53 = (C3D::PassDescriptor *)C3D::Pass::descriptor(v52);
    v54 = C3D::PassDescriptor::inputAtIndex(v53, 0);
    *(_OWORD *)(v54 + 16) = v65;
    *(_DWORD *)(v54 + 32) = v66;
    v55 = (C3D::PassDescriptor *)C3D::Pass::descriptor(v52);
    v56 = C3D::PassDescriptor::inputAtIndex(v55, 0);
    *(_WORD *)(v56 + 66) |= 0x100u;
    v57 = (C3D::PassResource *)C3D::Pass::resource(v52);
    C3D::PassResource::setInputAtIndex(v57, (C3D::RefCountedResource *)PersistentResource, 0);
    v58 = (C3D::PassDescriptor *)C3D::Pass::descriptor(v52);
    v59 = C3D::PassDescriptor::outputAtIndex(v58, 0);
    *(_OWORD *)(v59 + 16) = v67;
    *(_DWORD *)(v59 + 32) = v68;
    *(_WORD *)(v59 + 66) |= 0x100u;
    v60 = (C3D::PassResource *)C3D::Pass::resource(v52);
    C3D::PassResource::setOutputAtIndex(v60, a3, 0);
    C3D::Pass::addDependency(v69, v52);
    v37 = a2;
    v36 = v59;
    goto LABEL_12;
  }
  if ((unint64_t)objc_msgSend(*PersistentResource, "mipmapLevelCount") < 5)
  {
    LOBYTE(v65) = 1;
    v39 = C3D::RenderGraph::createPass<C3D::GenerateMipmapPass,C3D::Pass *&,C3D::GenerateMipmapPass::Parameters>(v12, &v69, (unsigned __int8 *)&v65);
    SCNMTLTextureDescFromMTLTexture(*PersistentResource, (uint64_t)&v65);
    v40 = (C3D::PassDescriptor *)C3D::Pass::descriptor(v39);
    v41 = C3D::PassDescriptor::inputAtIndex(v40, 0);
    *(_OWORD *)(v41 + 16) = v65;
    *(_DWORD *)(v41 + 32) = v66;
    v42 = (C3D::PassDescriptor *)C3D::Pass::descriptor(v39);
    v43 = C3D::PassDescriptor::inputAtIndex(v42, 0);
    *(_WORD *)(v43 + 66) |= 0x100u;
    v44 = (C3D::PassResource *)C3D::Pass::resource(v39);
    C3D::PassResource::setInputAtIndex(v44, (C3D::RefCountedResource *)PersistentResource, 0);
    SCNMTLTextureDescFromMTLTexture(*PersistentResource, (uint64_t)&v65);
    v45 = (C3D::PassDescriptor *)C3D::Pass::descriptor(v39);
    v46 = C3D::PassDescriptor::outputAtIndex(v45, 0);
    *(_OWORD *)(v46 + 16) = v65;
    *(_DWORD *)(v46 + 32) = v66;
    v47 = (C3D::PassDescriptor *)C3D::Pass::descriptor(v39);
    v48 = C3D::PassDescriptor::outputAtIndex(v47, 0);
    v49 = *(unsigned __int16 *)(v48 + 16);
    if (v49 <= *(unsigned __int16 *)(v48 + 18))
      v49 = *(unsigned __int16 *)(v48 + 18);
    v50 = (int)(float)(floorf(log2f((float)v49)) + 1.0);
    v51 = (C3D::PassDescriptor *)C3D::Pass::descriptor(v39);
    *(_BYTE *)(C3D::PassDescriptor::outputAtIndex(v51, 0) + 30) = v50;
    v20 = v69;
    v61 = *a6;
    v62 = *((_QWORD *)a6 + 2);
    v21 = &v61;
    v22 = a2;
    v23 = a3;
    v24 = a4;
    v25 = 0;
    v26 = v39;
  }
  else
  {
    v20 = v69;
    v63 = *a6;
    v64 = *((_QWORD *)a6 + 2);
    v21 = &v63;
    v22 = a2;
    v23 = a3;
    v24 = a4;
    v25 = PersistentResource;
    v26 = 0;
  }
  return C3D::ComputeProbeFromTextureOrPreviousPass(v20, v22, v23, v24, v25, v26, 0, (uint64_t)v21);
}

C3D::FillTexturePass *C3D::RenderGraph::createPass<C3D::FillTexturePass,C3D::Pass *&,C3D::FillTexturePass::Parameters>(uint64_t a1, C3D::Pass **a2, const Parameters *a3)
{
  C3D::FillTexturePass *Aligned;

  Aligned = (C3D::FillTexturePass *)C3DScratchAllocatorAllocateAligned(*(_QWORD *)(a1 + 16), 256, 16, 0);
  C3D::FillTexturePass::FillTexturePass(Aligned, (C3D::RenderGraph *)a1, *a2, a3);
  C3D::RenderGraph::addPass((C3D::RenderGraph *)a1, Aligned);
  if (*(_BYTE *)(a1 + 209))
    (*(void (**)(C3D::FillTexturePass *))(*(_QWORD *)Aligned + 8))(Aligned);
  return Aligned;
}

C3D::GenerateMipmapPass *C3D::RenderGraph::createPass<C3D::GenerateMipmapPass,C3D::Pass *&,C3D::GenerateMipmapPass::Parameters>(uint64_t a1, C3D::Pass **a2, unsigned __int8 *a3)
{
  C3D::GenerateMipmapPass *Aligned;
  Parameters v8;

  Aligned = (C3D::GenerateMipmapPass *)C3DScratchAllocatorAllocateAligned(*(_QWORD *)(a1 + 16), 112, 8, 0);
  *(_QWORD *)&v8.var0 = *a3;
  C3D::GenerateMipmapPass::GenerateMipmapPass(Aligned, (C3D::RenderGraph *)a1, *a2, v8);
  C3D::RenderGraph::addPass((C3D::RenderGraph *)a1, Aligned);
  if (*(_BYTE *)(a1 + 209))
    (*(void (**)(C3D::GenerateMipmapPass *))(*(_QWORD *)Aligned + 8))(Aligned);
  return Aligned;
}

double C3D::ComputeProbeFromProbeNode(C3D::Pass *a1, uint64_t a2, C3D::RefCountedResource *a3, __int16 a4, __C3DNode *a5, __int128 *a6)
{
  uint64_t v10;
  C3D::Pass *v11;
  C3D::Pass *v12;
  C3D::PassDescriptor *v13;
  _OWORD *v14;
  C3D::PassDescriptor *v15;
  _OWORD *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  C3D::PassDescriptor *v20;
  _OWORD *v21;
  C3D::PassDescriptor *v22;
  _OWORD *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  C3D::PassDescriptor *v27;
  uint64_t v28;
  C3D::PassDescriptor *v29;
  uint64_t v30;
  __int128 v32;
  uint64_t v33;
  __C3DNode *v34;
  C3D::Pass *v35;

  v34 = a5;
  v35 = a1;
  v10 = *((_QWORD *)a1 + 3);
  v11 = C3D::RenderGraph::createPass<C3D::RenderProbePass,C3D::Pass *&,__C3DNode *&,unsigned int &,MTLPixelFormat &>(v10, &v35, &v34, (unsigned int *)a6, (MTLPixelFormat *)a6 + 1);
  v12 = C3D::RenderGraph::createPass<C3D::GenerateMipmapPass,C3D::DrawNodesPass *&>(v10, &v35);
  v13 = (C3D::PassDescriptor *)C3D::Pass::descriptor(v11);
  v14 = (_OWORD *)C3D::PassDescriptor::outputAtIndex(v13, 0);
  v15 = (C3D::PassDescriptor *)C3D::Pass::descriptor(v12);
  v16 = (_OWORD *)C3D::PassDescriptor::inputAtIndex(v15, 0);
  *v16 = *v14;
  v17 = v14[4];
  v19 = v14[1];
  v18 = v14[2];
  v16[3] = v14[3];
  v16[4] = v17;
  v16[1] = v19;
  v16[2] = v18;
  v20 = (C3D::PassDescriptor *)C3D::Pass::descriptor(v11);
  v21 = (_OWORD *)C3D::PassDescriptor::outputAtIndex(v20, 0);
  v22 = (C3D::PassDescriptor *)C3D::Pass::descriptor(v12);
  v23 = (_OWORD *)C3D::PassDescriptor::outputAtIndex(v22, 0);
  *v23 = *v21;
  v24 = v21[4];
  v26 = v21[1];
  v25 = v21[2];
  v23[3] = v21[3];
  v23[4] = v24;
  v23[1] = v26;
  v23[2] = v25;
  v27 = (C3D::PassDescriptor *)C3D::Pass::descriptor(v12);
  v28 = C3D::PassDescriptor::inputAtIndex(v27, 0);
  *(_WORD *)(v28 + 66) |= 4u;
  v29 = (C3D::PassDescriptor *)C3D::Pass::descriptor(v12);
  v30 = C3D::PassDescriptor::inputAtIndex(v29, 0);
  *(_WORD *)(v30 + 66) |= 0x80u;
  C3D::Pass::addDependency(v12, v11);
  *((_DWORD *)a6 + 5) = 0;
  v32 = *a6;
  v33 = *((_QWORD *)a6 + 2);
  return C3D::ComputeProbeFromTextureOrPreviousPass(v35, a2, a3, a4, 0, v12, 0, (uint64_t)&v32);
}

C3D::RenderProbePass *C3D::RenderGraph::createPass<C3D::RenderProbePass,C3D::Pass *&,__C3DNode *&,unsigned int &,MTLPixelFormat &>(uint64_t a1, C3D::Pass **a2, __C3DNode **a3, unsigned int *a4, MTLPixelFormat *a5)
{
  C3D::RenderProbePass *Aligned;

  Aligned = (C3D::RenderProbePass *)C3DScratchAllocatorAllocateAligned(*(_QWORD *)(a1 + 16), 5376, 16, 0);
  C3D::RenderProbePass::RenderProbePass(Aligned, (C3D::RenderGraph *)a1, *a2, *a3, *a4, *a5);
  C3D::RenderGraph::addPass((C3D::RenderGraph *)a1, Aligned);
  if (*(_BYTE *)(a1 + 209))
    (*(void (**)(C3D::RenderProbePass *))(*(_QWORD *)Aligned + 8))(Aligned);
  return Aligned;
}

void OUTLINED_FUNCTION_2_1(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_fault_impl(a1, log, OS_LOG_TYPE_FAULT, a4, (uint8_t *)va, 0x22u);
}

uint64_t C3DFXPassSetup2PassesBlurCallbacks(uint64_t a1, int a2)
{
  BOOL v3;
  void (*v4)(uint64_t *, int);
  void (*v5)(uint64_t);

  v3 = a2 == 0;
  if (a2)
    v4 = _initializeHorizontalBlur;
  else
    v4 = _initializeVerticalBlur;
  if (v3)
    v5 = _executeVerticalBlur;
  else
    v5 = _executeHorizontalBlur;
  C3DFXPassSetInitializeCallback(a1, (uint64_t)v4);
  return C3DFXPassSetWillExecuteCallback(a1, (uint64_t)v5);
}

void _initializeHorizontalBlur(uint64_t *a1, int a2)
{
  __initialize2PassesBlur(*a1, 1, a2);
}

void _executeHorizontalBlur(uint64_t a1)
{
  _execute2PassesBlur(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(__n128 **)(a1 + 24), 1u);
}

void _initializeVerticalBlur(uint64_t *a1, int a2)
{
  __initialize2PassesBlur(*a1, 0, a2);
}

void _executeVerticalBlur(uint64_t a1)
{
  _execute2PassesBlur(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(__n128 **)(a1 + 24), 0);
}

void __initialize2PassesBlur(uint64_t a1, int a2, int a3)
{
  const void *BuiltInProgramWithName;
  uint64_t Shader;
  uint64_t Source;
  uint64_t v8;
  uint64_t v9;
  CFStringRef v10;

  if (a3)
  {
    if (a3 != 1)
    {
      C3DFXPassSetProgram(a1, 0);
      return;
    }
    BuiltInProgramWithName = (const void *)C3DFXGLSLProgramCreateBuiltInProgramWithName(CFSTR("C3D-GaussianBlur"));
    Shader = C3DFXGLSLProgramGetShader(BuiltInProgramWithName, 1);
    Source = C3DFXShaderGetSource(Shader);
    v8 = _create2PassesBlurProgramWithSampleCount_k++;
    v9 = 120;
    if (!a2)
      v9 = 121;
    v10 = CFStringCreateWithFormat(0, 0, CFSTR("#define unshareIndex %d\n#define MAX_SAMPLE %d\n#define COMPONENT %c\n%@"), v8, 31, v9, Source);
    C3DFXShaderSetSource(Shader, v10);
    CFRelease(v10);
  }
  else
  {
    BuiltInProgramWithName = (const void *)C3DFXMetalProgramCreateFromDefaultLibrary(CFSTR("GaussianBlur_vert"), CFSTR("GaussianBlur_frag"));
    C3DFXProgramSetClientProgram((uint64_t)BuiltInProgramWithName, *(unsigned __int8 *)(a1 + 80));
  }
  C3DFXPassSetProgram(a1, BuiltInProgramWithName);
  if (BuiltInProgramWithName)
    CFRelease(BuiltInProgramWithName);
}

void _execute2PassesBlur(uint64_t a1, uint64_t a2, __n128 *a3, unsigned int a4)
{
  __CFString *v8;
  float *ValueForSymbol;
  float v10;
  double v11;
  double v12;
  BOOL v13;
  double v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  float32x2_t *v18;
  float v19;
  float v20;
  float v21;
  __n128 v22;
  float v23;
  uint64_t v24;
  int8x8_t v30;
  float32x2_t v31;
  float v32;
  float32x2_t *v33;
  float *v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float32x2_t v40;
  float *v41;
  uint64_t v42;
  float64x2_t v43;
  __n128 Viewport;
  int v45;
  float v46[29];
  uint64_t v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  if (a4)
    v8 = CFSTR("C3D-blur-radiusH");
  else
    v8 = CFSTR("C3D-blur-radiusV");
  ValueForSymbol = (float *)C3DFXTechniqueGetValueForSymbol(a2, v8, 0);
  v10 = *ValueForSymbol;
  v11 = ceilf(*ValueForSymbol * 0.5) * 4.0;
  v12 = v11 + 1.0;
  v13 = v11 <= 30.0;
  v14 = 31.0;
  if (v13)
    v14 = v12;
  v15 = (int)v14;
  v45 = (int)v14;
  v47 = 0;
  v16 = fminf(v10, 14.0);
  memset(&v46[1], 0, 112);
  MEMORY[0x1E0C80A78](ValueForSymbol);
  v18 = (float32x2_t *)((char *)&v43 - v17);
  Viewport = C3DEngineContextGetViewport(a3);
  v43 = *(float64x2_t *)(a1 + 376);
  v19 = v16 * 6.28318531 * v16;
  v20 = 1.0 / sqrtf(v19);
  v21 = v16 * (float)(v16 + v16);
  v23 = expf(-0.0 / v21) * v20;
  v46[0] = v23;
  *v18 = 0;
  if ((int)v15 > 1)
  {
    v24 = 0;
    __asm { FMOV            V2.2S, #1.0 }
    v30 = (int8x8_t)vdiv_f32(_D2, vmaxnm_f32(vcvt_f32_f64(vmulq_f64(v43, vcvt_hight_f64_f32((float32x4_t)Viewport))), _D2));
    _D2.i32[0] = v30.i32[0];
    v30.i32[0] = 0;
    v22.n128_u64[0] = (unint64_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(a4), 0x1FuLL)), (int8x8_t)_D2.u32[0], v30);
    v31 = vneg_f32((float32x2_t)v22.n128_u64[0]);
    Viewport = v22;
    v32 = v22.n128_f32[1];
    v33 = v18 + 2;
    v34 = &v46[2];
    do
    {
      v35 = (float)(v24 + 1);
      v24 += 2;
      v36 = v20 * expf((float)-(float)(v35 * v35) / v21);
      v37 = v20 * expf((float)-(float)((float)(int)v24 * (float)(int)v24) / v21);
      v38 = v36 + v37;
      v39 = (float)((float)(v37 * (float)(int)v24) + (float)(v35 * v36)) / (float)(v36 + v37);
      *(v34 - 1) = v38;
      *v34 = v38;
      v23 = v23 + (float)(v38 * 2.0);
      v40.f32[0] = Viewport.n128_f32[0] * v39;
      v40.f32[1] = v32 * v39;
      v33[-1] = v40;
      *v33 = vmul_n_f32(v31, v39);
      v33 += 2;
      v34 += 2;
    }
    while ((v15 & 0xFFFFFFFE) != v24);
  }
  if ((int)v15 >= 1)
  {
    v41 = v46;
    v42 = v15;
    do
    {
      *v41 = *v41 / v23;
      ++v41;
      --v42;
    }
    while (v42);
  }
  C3DFXTechniqueSetValueForSymbolWithCount(a2, CFSTR("C3D-blur-offsets"), v18, v15);
  C3DFXTechniqueSetValueForSymbolWithCount(a2, CFSTR("C3D-blur-weights"), v46, v15);
  C3DFXTechniqueSetValueForSymbol(a2, CFSTR("C3D-blur-samples"), &v45);
}

void _C3DConvexPolyhedronCFFinalize(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v2 = (void *)a1[17];
  if (v2)
  {
    a1[18] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[14];
  if (v3)
  {
    a1[15] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[11];
  if (v4)
  {
    a1[12] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[8];
  if (v5)
  {
    a1[9] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[5];
  if (v6)
  {
    a1[6] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[2];
  if (v7)
  {
    a1[3] = v7;
    operator delete(v7);
  }
}

CFStringRef _C3DConvexPolyhedronCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  const __CFAllocator *v3;

  v3 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v3, 0, CFSTR("<C3DConvexPolyhedron %p>"), a1);
}

CFStringRef _C3DConvexPolyhedronCFCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DConvexPolyhedron %p>"), a1);
}

uint64_t C3DConvexPolyhedronGetVerticesCount(uint64_t a1)
{
  return (*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 4;
}

uint64_t C3DConvexPolyhedronGetEdgeCount(uint64_t a1)
{
  return ((int)((*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 2) / 2);
}

void _C3DConvexPolyhedronSet(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  char **v9;
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 v21;
  void **v22;
  uint64_t v23;
  char **v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  int v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  int v44;

  v9 = (char **)(a1 + 16);
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm(a1 + 16, 0);
  if (a3 >= 1)
  {
    v10 = 0;
    v11 = (_QWORD *)(a1 + 32);
    v12 = *(char **)(a1 + 24);
    do
    {
      if ((unint64_t)v12 >= *v11)
      {
        v13 = (v12 - *v9) >> 4;
        if ((unint64_t)(v13 + 1) >> 60)
LABEL_56:
          abort();
        v14 = *v11 - (_QWORD)*v9;
        v15 = v14 >> 3;
        if (v14 >> 3 <= (unint64_t)(v13 + 1))
          v15 = v13 + 1;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
          v16 = 0xFFFFFFFFFFFFFFFLL;
        else
          v16 = v15;
        if (v16)
          v17 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(a1 + 32, v16);
        else
          v17 = 0;
        v18 = &v17[16 * v13];
        *(_OWORD *)v18 = *(_OWORD *)(a2 + 16 * v10);
        v12 = v18 + 16;
        v20 = *(char **)(a1 + 16);
        v19 = *(char **)(a1 + 24);
        if (v19 != v20)
        {
          do
          {
            v21 = *((_OWORD *)v19 - 1);
            v19 -= 16;
            *((_OWORD *)v18 - 1) = v21;
            v18 -= 16;
          }
          while (v19 != v20);
          v19 = *v9;
        }
        *(_QWORD *)(a1 + 16) = v18;
        *(_QWORD *)(a1 + 24) = v12;
        *(_QWORD *)(a1 + 32) = &v17[16 * v16];
        if (v19)
          operator delete(v19);
      }
      else
      {
        *(_OWORD *)v12 = *(_OWORD *)(a2 + 16 * v10);
        v12 += 16;
      }
      *(_QWORD *)(a1 + 24) = v12;
      ++v10;
    }
    while (v10 != a3);
  }
  v22 = (void **)(a1 + 40);
  std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 40), 0);
  if (a5 >= 1)
  {
    v23 = 0;
    v24 = (char **)(a1 + 56);
    v25 = *(char **)(a1 + 48);
    do
    {
      v26 = *v24;
      if (v25 >= *v24)
      {
        v28 = (char *)*v22;
        v29 = (v25 - (_BYTE *)*v22) >> 2;
        v30 = v29 + 1;
        if ((unint64_t)(v29 + 1) >> 62)
          goto LABEL_56;
        v31 = v26 - v28;
        if (v31 >> 1 > v30)
          v30 = v31 >> 1;
        if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL)
          v32 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v32 = v30;
        if (v32)
        {
          v33 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a1 + 56, v32);
          v28 = *(char **)(a1 + 40);
          v25 = *(char **)(a1 + 48);
        }
        else
        {
          v33 = 0;
        }
        v34 = &v33[4 * v29];
        *(_DWORD *)v34 = *(_DWORD *)(a4 + 8 * v23);
        v27 = v34 + 4;
        while (v25 != v28)
        {
          v35 = *((_DWORD *)v25 - 1);
          v25 -= 4;
          *((_DWORD *)v34 - 1) = v35;
          v34 -= 4;
        }
        v26 = &v33[4 * v32];
        *(_QWORD *)(a1 + 40) = v34;
        *(_QWORD *)(a1 + 48) = v27;
        *(_QWORD *)(a1 + 56) = v26;
        if (v28)
        {
          operator delete(v28);
          v26 = *v24;
        }
      }
      else
      {
        *(_DWORD *)v25 = *(_DWORD *)(a4 + 8 * v23);
        v27 = v25 + 4;
      }
      *(_QWORD *)(a1 + 48) = v27;
      v36 = (2 * v23) | 1;
      if (v27 >= v26)
      {
        v37 = (char *)*v22;
        v38 = (v27 - (_BYTE *)*v22) >> 2;
        v39 = v38 + 1;
        if ((unint64_t)(v38 + 1) >> 62)
          goto LABEL_56;
        v40 = v26 - v37;
        if (v40 >> 1 > v39)
          v39 = v40 >> 1;
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL)
          v41 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v41 = v39;
        if (v41)
        {
          v42 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a1 + 56, v41);
          v37 = *(char **)(a1 + 40);
          v27 = *(char **)(a1 + 48);
        }
        else
        {
          v42 = 0;
        }
        v43 = &v42[4 * v38];
        *(_DWORD *)v43 = *(_DWORD *)(a4 + 4 * v36);
        v25 = v43 + 4;
        while (v27 != v37)
        {
          v44 = *((_DWORD *)v27 - 1);
          v27 -= 4;
          *((_DWORD *)v43 - 1) = v44;
          v43 -= 4;
        }
        *(_QWORD *)(a1 + 40) = v43;
        *(_QWORD *)(a1 + 48) = v25;
        *(_QWORD *)(a1 + 56) = &v42[4 * v41];
        if (v37)
          operator delete(v37);
      }
      else
      {
        *(_DWORD *)v27 = *(_DWORD *)(a4 + 4 * v36);
        v25 = v27 + 4;
      }
      *(_QWORD *)(a1 + 48) = v25;
      ++v23;
    }
    while (v23 != a5);
  }
}

void _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 16 * a2;
  }
  else
  {
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE8__appendEm((void **)a1, a2 - v2);
  }
}

void std::vector<int>::resize(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __sz)
{
  std::vector<unsigned int>::size_type v2;

  v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2)
      this->__end_ = &this->__begin_[__sz];
  }
  else
  {
    std::vector<int>::__append(this, __sz - v2);
  }
}

__n128 C3DConvexPolyhedronSetAABB(uint64_t a1, float32x4_t a2, float32x4_t a3)
{
  float32x4_t v3;
  int32x4_t v4;
  float32x4_t v5;
  int8x16_t v6;
  float32x4_t v7;
  __n128 result;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = vsubq_f32(a2, a3);
  v4 = (int32x4_t)vaddq_f32(a3, a3);
  v5 = (float32x4_t)vdupq_laneq_s32(v4, 3);
  v5.i32[0] = v4.i32[0];
  v9 = v3;
  v10 = vaddq_f32(v3, v5);
  v11 = vaddq_f32(v3, (float32x4_t)vextq_s8((int8x16_t)v4, (int8x16_t)vuzp2q_s32(v4, v4), 0xCuLL));
  v12 = vaddq_f32(v5, v11);
  v6 = (int8x16_t)vzip2q_s32(v4, v4);
  v7 = (float32x4_t)vextq_s8(v6, v6, 8uLL);
  v13 = vaddq_f32(v3, v7);
  v14 = vaddq_f32(v7, v10);
  v15 = vaddq_f32(v7, v11);
  v16 = vaddq_f32(v7, v12);
  _C3DConvexPolyhedronSet(a1, (uint64_t)&v9, 8, (uint64_t)&kBoxEdges, 12);
  return result;
}

void C3DConvexPolyhedronSetFrustum(uint64_t a1, uint64_t *a2)
{
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  scn_plane_intersect_3_planes(a2[10], a2[11], a2[4], a2[5], a2[2], a2[3], &v4);
  scn_plane_intersect_3_planes(a2[10], a2[11], *a2, a2[1], a2[4], a2[5], &v5);
  scn_plane_intersect_3_planes(a2[10], a2[11], a2[2], a2[3], a2[6], a2[7], &v6);
  scn_plane_intersect_3_planes(a2[10], a2[11], a2[6], a2[7], *a2, a2[1], &v7);
  scn_plane_intersect_3_planes(a2[8], a2[9], a2[4], a2[5], a2[2], a2[3], &v8);
  scn_plane_intersect_3_planes(a2[8], a2[9], *a2, a2[1], a2[4], a2[5], &v9);
  scn_plane_intersect_3_planes(a2[8], a2[9], a2[2], a2[3], a2[6], a2[7], &v10);
  scn_plane_intersect_3_planes(a2[8], a2[9], a2[6], a2[7], *a2, a2[1], &v11);
  _C3DConvexPolyhedronSet(a1, (uint64_t)&v4, 8, (uint64_t)&kBoxEdges, 12);
}

void C3DConvexPolyhedronClipPlane(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float32x4_t v4;
  int32x4_t v5;
  float32x2_t v6;
  float32x2_t v7;
  std::vector<unsigned int> *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float v21;
  float32x4_t v22;
  float v23;
  unsigned int v24;
  unint64_t v25;
  float32x4_t *v26;
  _OWORD *v27;
  unint64_t v28;
  float32x4_t *v29;
  _OWORD *v30;
  unsigned int v31;
  unint64_t v32;
  float32x4_t *v33;
  _OWORD *f32;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  float32x4_t *v47;
  float32x4_t *v48;
  float32x4_t *v49;
  float32x4_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  _DWORD *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  int v62;
  unint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  unint64_t v77;
  _OWORD *v78;
  _OWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  float32x4_t *v86;
  float32x4_t *v87;
  float32x4_t *v88;
  float32x4_t v89;
  unint64_t v90;
  char *v91;
  char *v92;
  _BYTE *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  unsigned int *v99;
  unsigned int v100;
  int v101;
  uint64_t v102;
  unint64_t v103;
  _OWORD *v104;
  _OWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char *v111;
  char *v112;
  char *v113;
  char *v114;
  __int128 v115;
  _DWORD *v116;
  char *v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  char *v122;
  char *v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  char *v130;
  char *v131;
  char *v132;
  char *v133;
  __int128 v134;
  unint64_t v135;
  char *v136;
  _DWORD *v137;
  char *v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  char *v143;
  char *v144;
  int v145;
  char *v146;
  char *v147;
  char *v148;
  __int128 v149;
  unint64_t v150;
  char *v151;
  _DWORD *v152;
  char *v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  unint64_t v157;
  char *v158;
  unsigned int *v159;
  unsigned int v160;
  unint64_t v161;
  float32x4_t *v162;
  _OWORD *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  char *v169;
  float32x4_t *v170;
  float32x4_t *v171;
  float32x4_t *v172;
  float32x4_t v173;
  uint64_t v174;
  unint64_t v175;
  char *v176;
  _DWORD *v177;
  char *v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  unint64_t v182;
  char *v183;
  char *v184;
  int v185;
  unint64_t v186;
  _QWORD *v187;
  _QWORD *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  char *v193;
  char *v194;
  char *v195;
  char *v196;
  uint64_t v197;
  float *v198;
  uint64_t v199;
  unint64_t v200;
  uint64_t v201;
  float32x4_t v202;
  uint64_t v203;
  int *v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  float32x4_t v208;
  float32x4_t v209;
  float32x4_t v210;
  float32x4_t v211;
  float32x4_t v212;
  float32x4_t v213;
  int32x4_t v214;
  float32x4_t v215;
  float32x4_t v216;
  float32x4_t v217;
  int32x4_t v218;
  float32x2_t v219;
  float32x2_t v220;
  int32x4_t v221;
  int8x16_t v222;
  float *v223;
  float32x4_t v224;
  float32x4_t v225;
  float32x4_t v226;
  unint64_t v227;
  uint64_t v228;
  uint64_t v229;
  char **v230;
  char *v231;
  _DWORD *v232;
  char *v233;
  char *v234;
  _BYTE *v235;
  uint64_t v236;
  unint64_t v237;
  uint64_t v238;
  unint64_t v239;
  char *v240;
  char *v241;
  int v242;
  _DWORD *v243;
  _BYTE *v244;
  uint64_t v245;
  unint64_t v246;
  uint64_t v247;
  unint64_t v248;
  char *v249;
  char *v250;
  int v251;
  uint64_t v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  uint64_t v259;
  float32x4_t v260;
  float32x4_t v261;
  uint64_t v262;
  float32x4_t v263;
  float32x4_t v264;
  float32x4_t v265;
  float32x4_t v266;
  float32x4_t v267;
  float32x4_t v268;
  float v269;
  char **v270;
  float32x4_t v271;
  int8x16_t v272;
  float32x4_t v273;
  char v274;

  v4.i64[0] = a2;
  v4.i64[1] = a3;
  v271 = v4;
  v5 = (int32x4_t)vmulq_f32(v4, v4);
  v5.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v5, 2), vadd_f32(*(float32x2_t *)v5.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v5.i8, 1))).u32[0];
  v6 = vrsqrte_f32((float32x2_t)v5.u32[0]);
  v7 = vmul_f32(v6, vrsqrts_f32((float32x2_t)v5.u32[0], vmul_f32(v6, v6)));
  LODWORD(v269) = vmul_f32(v7, vrsqrts_f32((float32x2_t)v5.u32[0], vmul_f32(v7, v7))).u32[0];
  v8 = (std::vector<unsigned int> *)(a1 + 112);
  std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 112), (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 4);
  v9 = *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16);
  if ((int)(v9 >> 4) >= 1)
    memset(v8->__begin_, 255, (v9 >> 2) & 0x3FFFFFFFCLL);
  v272 = (int8x16_t)vmulq_n_f32(v271, v269);
  v270 = (char **)(a1 + 136);
  std::vector<ClippedCorner>::resize(a1 + 136, 0);
  v10 = *(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40);
  if ((int)(v10 >> 2) > 1)
  {
    v11 = 0;
    v262 = a1 + 80;
    v12 = (_QWORD *)(a1 + 104);
    v259 = a1 + 152;
    v13 = (v10 >> 3) & 0x7FFFFFFF;
    do
    {
      v14 = (int *)(*(_QWORD *)(a1 + 40) + 8 * v11);
      v15 = *v14;
      v16 = v14[1];
      v17 = *(_QWORD *)(a1 + 16);
      v18 = *(float32x4_t *)(v17 + 16 * v15);
      v19 = *(float32x4_t *)(v17 + 16 * v16);
      v20 = vmulq_f32((float32x4_t)v272, v18);
      v21 = *(float *)&v272.i32[3]
          + vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 2), vaddq_f32(v20, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.f32, 1))).f32[0];
      v22 = vmulq_f32((float32x4_t)v272, v19);
      v23 = *(float *)&v272.i32[3]
          + vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 2), vaddq_f32(v22, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 1))).f32[0];
      if (v21 > 0.0 || v23 > 0.0)
      {
        if (v21 <= 0.0 || v23 > 0.0)
        {
          if (v21 <= 0.0 && v23 > 0.0)
          {
            v31 = v8->__begin_[v15];
            if (v31 == -1)
            {
              v33 = *(float32x4_t **)(a1 + 72);
              v32 = *(_QWORD *)(a1 + 80);
              if ((unint64_t)v33 >= v32)
              {
                v125 = *(_QWORD *)(a1 + 64);
                v126 = ((uint64_t)v33 - v125) >> 4;
                if ((unint64_t)(v126 + 1) >> 60)
                  goto LABEL_301;
                v260 = *(float32x4_t *)(v17 + 16 * v16);
                v127 = v32 - v125;
                v128 = v127 >> 3;
                if (v127 >> 3 <= (unint64_t)(v126 + 1))
                  v128 = v126 + 1;
                if ((unint64_t)v127 >= 0x7FFFFFFFFFFFFFF0)
                  v129 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v129 = v128;
                v265 = *(float32x4_t *)(v17 + 16 * v15);
                if (v129)
                {
                  v130 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v262, v129);
                  v18 = v265;
                }
                else
                {
                  v130 = 0;
                }
                v146 = &v130[16 * v126];
                *(_OWORD *)v146 = *(_OWORD *)(v17 + 16 * v15);
                f32 = v146 + 16;
                v148 = *(char **)(a1 + 64);
                v147 = *(char **)(a1 + 72);
                if (v147 != v148)
                {
                  do
                  {
                    v149 = *((_OWORD *)v147 - 1);
                    v147 -= 16;
                    *((_OWORD *)v146 - 1) = v149;
                    v146 -= 16;
                  }
                  while (v147 != v148);
                  v147 = *(char **)(a1 + 64);
                }
                *(_QWORD *)(a1 + 64) = v146;
                *(_QWORD *)(a1 + 72) = f32;
                *(_QWORD *)(a1 + 80) = &v130[16 * v129];
                if (v147)
                {
                  operator delete(v147);
                  v18 = v265;
                }
                v19 = v260;
              }
              else
              {
                *v33 = v18;
                f32 = (_OWORD *)v33[1].f32;
              }
              *(_QWORD *)(a1 + 72) = f32;
              v31 = (((unint64_t)f32 - *(_QWORD *)(a1 + 64)) >> 4) - 1;
              *(_DWORD *)(*(_QWORD *)(a1 + 112) + 4 * v15) = v31;
            }
            v151 = *(char **)(a1 + 96);
            v150 = *(_QWORD *)(a1 + 104);
            if ((unint64_t)v151 >= v150)
            {
              v153 = *(char **)(a1 + 88);
              v154 = (v151 - v153) >> 2;
              v155 = v154 + 1;
              if ((unint64_t)(v154 + 1) >> 62)
                goto LABEL_301;
              v261 = v19;
              v266 = v18;
              v156 = v150 - (_QWORD)v153;
              if (v156 >> 1 > v155)
                v155 = v156 >> 1;
              if ((unint64_t)v156 >= 0x7FFFFFFFFFFFFFFCLL)
                v157 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v157 = v155;
              if (v157)
              {
                v158 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a1 + 104, v157);
                v153 = *(char **)(a1 + 88);
                v151 = *(char **)(a1 + 96);
              }
              else
              {
                v158 = 0;
              }
              v159 = (unsigned int *)&v158[4 * v154];
              *v159 = v31;
              v152 = v159 + 1;
              while (v151 != v153)
              {
                v160 = *((_DWORD *)v151 - 1);
                v151 -= 4;
                *--v159 = v160;
              }
              *(_QWORD *)(a1 + 88) = v159;
              *(_QWORD *)(a1 + 96) = v152;
              *(_QWORD *)(a1 + 104) = &v158[4 * v157];
              if (v153)
                operator delete(v153);
              v18 = v266;
              v19 = v261;
            }
            else
            {
              *(_DWORD *)v151 = v31;
              v152 = v151 + 4;
            }
            *(_QWORD *)(a1 + 96) = v152;
            if ((float)(v23 - v21) != 0.0)
              v18 = vmlaq_n_f32(v18, vsubq_f32(v19, v18), (float)-v21 / (float)(v23 - v21));
            v162 = *(float32x4_t **)(a1 + 72);
            v161 = *(_QWORD *)(a1 + 80);
            if ((unint64_t)v162 >= v161)
            {
              v164 = *(_QWORD *)(a1 + 64);
              v165 = ((uint64_t)v162 - v164) >> 4;
              if ((unint64_t)(v165 + 1) >> 60)
                goto LABEL_301;
              v166 = v161 - v164;
              v167 = v166 >> 3;
              if (v166 >> 3 <= (unint64_t)(v165 + 1))
                v167 = v165 + 1;
              if ((unint64_t)v166 >= 0x7FFFFFFFFFFFFFF0)
                v168 = 0xFFFFFFFFFFFFFFFLL;
              else
                v168 = v167;
              if (v168)
              {
                v267 = v18;
                v169 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v262, v168);
                v18 = v267;
              }
              else
              {
                v169 = 0;
              }
              v170 = (float32x4_t *)&v169[16 * v165];
              *v170 = v18;
              v163 = (_OWORD *)v170[1].f32;
              v172 = *(float32x4_t **)(a1 + 64);
              v171 = *(float32x4_t **)(a1 + 72);
              if (v171 != v172)
              {
                do
                {
                  v173 = v171[-1];
                  --v171;
                  v170[-1] = v173;
                  --v170;
                }
                while (v171 != v172);
                v171 = *(float32x4_t **)(a1 + 64);
              }
              *(_QWORD *)(a1 + 64) = v170;
              *(_QWORD *)(a1 + 72) = v163;
              *(_QWORD *)(a1 + 80) = &v169[16 * v168];
              if (v171)
                operator delete(v171);
            }
            else
            {
              *v162 = v18;
              v163 = (_OWORD *)v162[1].f32;
            }
            *(_QWORD *)(a1 + 72) = v163;
            v174 = (((unint64_t)v163 - *(_QWORD *)(a1 + 64)) >> 4) - 1;
            v176 = *(char **)(a1 + 96);
            v175 = *(_QWORD *)(a1 + 104);
            if ((unint64_t)v176 >= v175)
            {
              v178 = *(char **)(a1 + 88);
              v179 = (v176 - v178) >> 2;
              v180 = v179 + 1;
              if ((unint64_t)(v179 + 1) >> 62)
                goto LABEL_301;
              v181 = v175 - (_QWORD)v178;
              if (v181 >> 1 > v180)
                v180 = v181 >> 1;
              if ((unint64_t)v181 >= 0x7FFFFFFFFFFFFFFCLL)
                v182 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v182 = v180;
              if (v182)
              {
                v183 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a1 + 104, v182);
                v178 = *(char **)(a1 + 88);
                v176 = *(char **)(a1 + 96);
              }
              else
              {
                v183 = 0;
              }
              v184 = &v183[4 * v179];
              *(_DWORD *)v184 = v174;
              v177 = v184 + 4;
              while (v176 != v178)
              {
                v185 = *((_DWORD *)v176 - 1);
                v176 -= 4;
                *((_DWORD *)v184 - 1) = v185;
                v184 -= 4;
              }
              *(_QWORD *)(a1 + 88) = v184;
              *(_QWORD *)(a1 + 96) = v177;
              *(_QWORD *)(a1 + 104) = &v183[4 * v182];
              if (v178)
                operator delete(v178);
            }
            else
            {
              *(_DWORD *)v176 = v174;
              v177 = v176 + 4;
            }
            *(_QWORD *)(a1 + 96) = v177;
            v187 = *(_QWORD **)(a1 + 144);
            v186 = *(_QWORD *)(a1 + 152);
            if ((unint64_t)v187 >= v186)
            {
              v189 = ((char *)v187 - *v270) >> 3;
              if ((unint64_t)(v189 + 1) >> 61)
LABEL_301:
                abort();
              v190 = v186 - (_QWORD)*v270;
              v191 = v190 >> 2;
              if (v190 >> 2 <= (unint64_t)(v189 + 1))
                v191 = v189 + 1;
              if ((unint64_t)v190 >= 0x7FFFFFFFFFFFFFF8)
                v192 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v192 = v191;
              if (v192)
                v193 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Statement *>>(v259, v192);
              else
                v193 = 0;
              v194 = &v193[8 * v189];
              *(_QWORD *)v194 = v174 << 32;
              v188 = v194 + 8;
              v196 = *(char **)(a1 + 136);
              v195 = *(char **)(a1 + 144);
              if (v195 != v196)
              {
                do
                {
                  v197 = *((_QWORD *)v195 - 1);
                  v195 -= 8;
                  *((_QWORD *)v194 - 1) = v197;
                  v194 -= 8;
                }
                while (v195 != v196);
                v195 = *v270;
              }
              *(_QWORD *)(a1 + 136) = v194;
              *(_QWORD *)(a1 + 144) = v188;
              *(_QWORD *)(a1 + 152) = &v193[8 * v192];
              if (v195)
                operator delete(v195);
            }
            else
            {
              *v187 = v174 << 32;
              v188 = v187 + 1;
            }
            *(_QWORD *)(a1 + 144) = v188;
          }
        }
        else
        {
          if ((float)(v23 - v21) != 0.0)
            v18 = vmlaq_n_f32(v18, vsubq_f32(v19, v18), (float)-v21 / (float)(v23 - v21));
          v29 = *(float32x4_t **)(a1 + 72);
          v28 = *(_QWORD *)(a1 + 80);
          if ((unint64_t)v29 >= v28)
          {
            v35 = *(_QWORD *)(a1 + 64);
            v36 = ((uint64_t)v29 - v35) >> 4;
            if ((unint64_t)(v36 + 1) >> 60)
              goto LABEL_301;
            v37 = v28 - v35;
            v38 = v37 >> 3;
            if (v37 >> 3 <= (unint64_t)(v36 + 1))
              v38 = v36 + 1;
            if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF0)
              v39 = 0xFFFFFFFFFFFFFFFLL;
            else
              v39 = v38;
            if (v39)
            {
              v264 = v18;
              v40 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v262, v39);
              v18 = v264;
            }
            else
            {
              v40 = 0;
            }
            v47 = (float32x4_t *)&v40[16 * v36];
            *v47 = v18;
            v30 = (_OWORD *)v47[1].f32;
            v49 = *(float32x4_t **)(a1 + 64);
            v48 = *(float32x4_t **)(a1 + 72);
            if (v48 != v49)
            {
              do
              {
                v50 = v48[-1];
                --v48;
                v47[-1] = v50;
                --v47;
              }
              while (v48 != v49);
              v48 = *(float32x4_t **)(a1 + 64);
            }
            *(_QWORD *)(a1 + 64) = v47;
            *(_QWORD *)(a1 + 72) = v30;
            *(_QWORD *)(a1 + 80) = &v40[16 * v39];
            if (v48)
              operator delete(v48);
          }
          else
          {
            *v29 = v18;
            v30 = (_OWORD *)v29[1].f32;
          }
          *(_QWORD *)(a1 + 72) = v30;
          v51 = (((unint64_t)v30 - *(_QWORD *)(a1 + 64)) >> 4) - 1;
          v53 = *(char **)(a1 + 96);
          v52 = *(_QWORD *)(a1 + 104);
          if ((unint64_t)v53 >= v52)
          {
            v55 = *(char **)(a1 + 88);
            v56 = (v53 - v55) >> 2;
            v57 = v56 + 1;
            if ((unint64_t)(v56 + 1) >> 62)
              goto LABEL_301;
            v58 = v52 - (_QWORD)v55;
            if (v58 >> 1 > v57)
              v57 = v58 >> 1;
            if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL)
              v59 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v59 = v57;
            if (v59)
            {
              v60 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a1 + 104, v59);
              v55 = *(char **)(a1 + 88);
              v53 = *(char **)(a1 + 96);
            }
            else
            {
              v60 = 0;
            }
            v61 = &v60[4 * v56];
            *(_DWORD *)v61 = v51;
            v54 = v61 + 4;
            while (v53 != v55)
            {
              v62 = *((_DWORD *)v53 - 1);
              v53 -= 4;
              *((_DWORD *)v61 - 1) = v62;
              v61 -= 4;
            }
            *(_QWORD *)(a1 + 88) = v61;
            *(_QWORD *)(a1 + 96) = v54;
            *(_QWORD *)(a1 + 104) = &v60[4 * v59];
            if (v55)
              operator delete(v55);
          }
          else
          {
            *(_DWORD *)v53 = v51;
            v54 = v53 + 4;
          }
          *(_QWORD *)(a1 + 96) = v54;
          v64 = *(_QWORD **)(a1 + 144);
          v63 = *(_QWORD *)(a1 + 152);
          if ((unint64_t)v64 >= v63)
          {
            v66 = ((char *)v64 - *v270) >> 3;
            if ((unint64_t)(v66 + 1) >> 61)
              goto LABEL_301;
            v67 = v63 - (_QWORD)*v270;
            v68 = v67 >> 2;
            if (v67 >> 2 <= (unint64_t)(v66 + 1))
              v68 = v66 + 1;
            if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF8)
              v69 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v69 = v68;
            if (v69)
              v70 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Statement *>>(v259, v69);
            else
              v70 = 0;
            v71 = &v70[8 * v66];
            *(_QWORD *)v71 = v51 << 32;
            v65 = v71 + 8;
            v73 = *(char **)(a1 + 136);
            v72 = *(char **)(a1 + 144);
            if (v72 != v73)
            {
              do
              {
                v74 = *((_QWORD *)v72 - 1);
                v72 -= 8;
                *((_QWORD *)v71 - 1) = v74;
                v71 -= 8;
              }
              while (v72 != v73);
              v72 = *v270;
            }
            *(_QWORD *)(a1 + 136) = v71;
            *(_QWORD *)(a1 + 144) = v65;
            *(_QWORD *)(a1 + 152) = &v70[8 * v69];
            if (v72)
              operator delete(v72);
          }
          else
          {
            *v64 = v51 << 32;
            v65 = v64 + 1;
          }
          *(_QWORD *)(a1 + 144) = v65;
          v75 = *(_DWORD *)(*(_QWORD *)(a1 + 112) + 4 * v16);
          if (v75 == -1)
          {
            v76 = *(_QWORD *)(a1 + 16);
            v78 = *(_OWORD **)(a1 + 72);
            v77 = *(_QWORD *)(a1 + 80);
            if ((unint64_t)v78 >= v77)
            {
              v80 = *(_QWORD *)(a1 + 64);
              v81 = ((uint64_t)v78 - v80) >> 4;
              if ((unint64_t)(v81 + 1) >> 60)
                goto LABEL_301;
              v82 = v77 - v80;
              v83 = v82 >> 3;
              if (v82 >> 3 <= (unint64_t)(v81 + 1))
                v83 = v81 + 1;
              if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFF0)
                v84 = 0xFFFFFFFFFFFFFFFLL;
              else
                v84 = v83;
              if (v84)
                v85 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v262, v84);
              else
                v85 = 0;
              v131 = &v85[16 * v81];
              *(_OWORD *)v131 = *(_OWORD *)(v76 + 16 * v16);
              v79 = v131 + 16;
              v133 = *(char **)(a1 + 64);
              v132 = *(char **)(a1 + 72);
              if (v132 != v133)
              {
                do
                {
                  v134 = *((_OWORD *)v132 - 1);
                  v132 -= 16;
                  *((_OWORD *)v131 - 1) = v134;
                  v131 -= 16;
                }
                while (v132 != v133);
                v132 = *(char **)(a1 + 64);
              }
              *(_QWORD *)(a1 + 64) = v131;
              *(_QWORD *)(a1 + 72) = v79;
              *(_QWORD *)(a1 + 80) = &v85[16 * v84];
              if (v132)
                operator delete(v132);
            }
            else
            {
              *v78 = *(_OWORD *)(v76 + 16 * v16);
              v79 = v78 + 1;
            }
            *(_QWORD *)(a1 + 72) = v79;
            v75 = (((unint64_t)v79 - *(_QWORD *)(a1 + 64)) >> 4) - 1;
            *(_DWORD *)(*(_QWORD *)(a1 + 112) + 4 * v16) = v75;
          }
          v136 = *(char **)(a1 + 96);
          v135 = *(_QWORD *)(a1 + 104);
          if ((unint64_t)v136 >= v135)
          {
            v138 = *(char **)(a1 + 88);
            v139 = (v136 - v138) >> 2;
            v140 = v139 + 1;
            if ((unint64_t)(v139 + 1) >> 62)
              goto LABEL_301;
            v141 = v135 - (_QWORD)v138;
            if (v141 >> 1 > v140)
              v140 = v141 >> 1;
            if ((unint64_t)v141 >= 0x7FFFFFFFFFFFFFFCLL)
              v142 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v142 = v140;
            if (v142)
            {
              v143 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a1 + 104, v142);
              v138 = *(char **)(a1 + 88);
              v136 = *(char **)(a1 + 96);
            }
            else
            {
              v143 = 0;
            }
            v144 = &v143[4 * v139];
            *(_DWORD *)v144 = v75;
            v137 = v144 + 4;
            while (v136 != v138)
            {
              v145 = *((_DWORD *)v136 - 1);
              v136 -= 4;
              *((_DWORD *)v144 - 1) = v145;
              v144 -= 4;
            }
            *(_QWORD *)(a1 + 88) = v144;
            *(_QWORD *)(a1 + 96) = v137;
            *(_QWORD *)(a1 + 104) = &v143[4 * v142];
            if (v138)
              operator delete(v138);
          }
          else
          {
            *(_DWORD *)v136 = v75;
            v137 = v136 + 4;
          }
          *(_QWORD *)(a1 + 96) = v137;
        }
      }
      else
      {
        v24 = v8->__begin_[v15];
        if (v24 == -1)
        {
          v26 = *(float32x4_t **)(a1 + 72);
          v25 = *(_QWORD *)(a1 + 80);
          if ((unint64_t)v26 >= v25)
          {
            v41 = *(_QWORD *)(a1 + 64);
            v42 = ((uint64_t)v26 - v41) >> 4;
            if ((unint64_t)(v42 + 1) >> 60)
              goto LABEL_301;
            v43 = v25 - v41;
            v44 = v43 >> 3;
            if (v43 >> 3 <= (unint64_t)(v42 + 1))
              v44 = v42 + 1;
            if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF0)
              v45 = 0xFFFFFFFFFFFFFFFLL;
            else
              v45 = v44;
            if (v45)
            {
              v46 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v262, v45);
              v18 = *(float32x4_t *)(v17 + 16 * v15);
            }
            else
            {
              v46 = 0;
            }
            v86 = (float32x4_t *)&v46[16 * v42];
            *v86 = v18;
            v27 = (_OWORD *)v86[1].f32;
            v88 = *(float32x4_t **)(a1 + 64);
            v87 = *(float32x4_t **)(a1 + 72);
            if (v87 != v88)
            {
              do
              {
                v89 = v87[-1];
                --v87;
                v86[-1] = v89;
                --v86;
              }
              while (v87 != v88);
              v87 = *(float32x4_t **)(a1 + 64);
            }
            *(_QWORD *)(a1 + 64) = v86;
            *(_QWORD *)(a1 + 72) = v27;
            *(_QWORD *)(a1 + 80) = &v46[16 * v45];
            if (v87)
              operator delete(v87);
          }
          else
          {
            *v26 = v18;
            v27 = (_OWORD *)v26[1].f32;
          }
          *(_QWORD *)(a1 + 72) = v27;
          v24 = (((unint64_t)v27 - *(_QWORD *)(a1 + 64)) >> 4) - 1;
          *(_DWORD *)(*(_QWORD *)(a1 + 112) + 4 * v15) = v24;
        }
        v91 = *(char **)(a1 + 96);
        v90 = *(_QWORD *)(a1 + 104);
        if ((unint64_t)v91 >= v90)
        {
          v93 = *(_BYTE **)(a1 + 88);
          v94 = (v91 - v93) >> 2;
          v95 = v94 + 1;
          if ((unint64_t)(v94 + 1) >> 62)
            goto LABEL_301;
          v96 = v90 - (_QWORD)v93;
          if (v96 >> 1 > v95)
            v95 = v96 >> 1;
          if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFFCLL)
            v97 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v97 = v95;
          if (v97)
          {
            v98 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a1 + 104, v97);
            v93 = *(_BYTE **)(a1 + 88);
            v91 = *(char **)(a1 + 96);
          }
          else
          {
            v98 = 0;
          }
          v99 = (unsigned int *)&v98[4 * v94];
          *v99 = v24;
          v92 = (char *)(v99 + 1);
          while (v91 != v93)
          {
            v100 = *((_DWORD *)v91 - 1);
            v91 -= 4;
            *--v99 = v100;
          }
          *(_QWORD *)(a1 + 88) = v99;
          *(_QWORD *)(a1 + 96) = v92;
          *(_QWORD *)(a1 + 104) = &v98[4 * v97];
          if (v93)
            operator delete(v93);
        }
        else
        {
          *(_DWORD *)v91 = v24;
          v92 = v91 + 4;
        }
        *(_QWORD *)(a1 + 96) = v92;
        v101 = *(_DWORD *)(*(_QWORD *)(a1 + 112) + 4 * v16);
        if (v101 == -1)
        {
          v102 = *(_QWORD *)(a1 + 16);
          v104 = *(_OWORD **)(a1 + 72);
          v103 = *(_QWORD *)(a1 + 80);
          if ((unint64_t)v104 >= v103)
          {
            v106 = *(_QWORD *)(a1 + 64);
            v107 = ((uint64_t)v104 - v106) >> 4;
            if ((unint64_t)(v107 + 1) >> 60)
              goto LABEL_301;
            v108 = v103 - v106;
            v109 = v108 >> 3;
            if (v108 >> 3 <= (unint64_t)(v107 + 1))
              v109 = v107 + 1;
            if ((unint64_t)v108 >= 0x7FFFFFFFFFFFFFF0)
              v110 = 0xFFFFFFFFFFFFFFFLL;
            else
              v110 = v109;
            if (v110)
              v111 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v262, v110);
            else
              v111 = 0;
            v112 = &v111[16 * v107];
            *(_OWORD *)v112 = *(_OWORD *)(v102 + 16 * v16);
            v105 = v112 + 16;
            v114 = *(char **)(a1 + 64);
            v113 = *(char **)(a1 + 72);
            if (v113 != v114)
            {
              do
              {
                v115 = *((_OWORD *)v113 - 1);
                v113 -= 16;
                *((_OWORD *)v112 - 1) = v115;
                v112 -= 16;
              }
              while (v113 != v114);
              v113 = *(char **)(a1 + 64);
            }
            *(_QWORD *)(a1 + 64) = v112;
            *(_QWORD *)(a1 + 72) = v105;
            *(_QWORD *)(a1 + 80) = &v111[16 * v110];
            if (v113)
              operator delete(v113);
          }
          else
          {
            *v104 = *(_OWORD *)(v102 + 16 * v16);
            v105 = v104 + 1;
          }
          *(_QWORD *)(a1 + 72) = v105;
          v101 = (((unint64_t)v105 - *(_QWORD *)(a1 + 64)) >> 4) - 1;
          *(_DWORD *)(*(_QWORD *)(a1 + 112) + 4 * v16) = v101;
          v92 = *(char **)(a1 + 96);
        }
        if ((unint64_t)v92 >= *v12)
        {
          v117 = *(char **)(a1 + 88);
          v118 = (v92 - v117) >> 2;
          v119 = v118 + 1;
          if ((unint64_t)(v118 + 1) >> 62)
            goto LABEL_301;
          v120 = *v12 - (_QWORD)v117;
          if (v120 >> 1 > v119)
            v119 = v120 >> 1;
          if ((unint64_t)v120 >= 0x7FFFFFFFFFFFFFFCLL)
            v121 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v121 = v119;
          if (v121)
          {
            v122 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a1 + 104, v121);
            v117 = *(char **)(a1 + 88);
            v92 = *(char **)(a1 + 96);
          }
          else
          {
            v122 = 0;
          }
          v123 = &v122[4 * v118];
          *(_DWORD *)v123 = v101;
          v116 = v123 + 4;
          while (v92 != v117)
          {
            v124 = *((_DWORD *)v92 - 1);
            v92 -= 4;
            *((_DWORD *)v123 - 1) = v124;
            v123 -= 4;
          }
          *(_QWORD *)(a1 + 88) = v123;
          *(_QWORD *)(a1 + 96) = v116;
          *(_QWORD *)(a1 + 104) = &v122[4 * v121];
          if (v117)
            operator delete(v117);
        }
        else
        {
          *(_DWORD *)v92 = v101;
          v116 = v92 + 4;
        }
        *(_QWORD *)(a1 + 96) = v116;
      }
      ++v11;
    }
    while (v11 != v13);
  }
  v199 = *(_QWORD *)(a1 + 136);
  v198 = *(float **)(a1 + 144);
  v200 = (unint64_t)v198 - v199;
  if ((unint64_t)v198 - v199 > 0x10)
  {
    if (v200 >= 0x19)
    {
      v201 = *(_QWORD *)(a1 + 64);
      v202 = *(float32x4_t *)(v201 + 16 * *(int *)(v199 + 4));
      v203 = (v200 >> 3);
      if ((int)(v200 >> 3) > 1)
      {
        v204 = (int *)(v199 + 12);
        v205 = v203 - 1;
        do
        {
          v206 = *v204;
          v204 += 2;
          v202 = vaddq_f32(v202, *(float32x4_t *)(v201 + 16 * v206));
          --v205;
        }
        while (v205);
      }
      v207 = (uint64_t)v200 >> 3;
      if ((int)(v200 >> 3) >= 1)
      {
        v208 = vmulq_f32((float32x4_t)v272, (float32x4_t)xmmword_1DD007600);
        v209 = vaddq_f32(v208, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v208.f32, 1));
        v210 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v208, 2), v209);
        v210.f32[0] = fabsf(v210.f32[0]);
        v209.i32[0] = 1064514355;
        v211 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v210, v209), 0), (int8x16_t)xmmword_1DD007920, (int8x16_t)xmmword_1DD007600);
        v212 = vnegq_f32((float32x4_t)v272);
        v213 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v272, (int32x4_t)v272), v272, 0xCuLL);
        v214 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v211, (int32x4_t)v211), (int8x16_t)v211, 0xCuLL), v212), v211, v213);
        v215 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v214, v214), (int8x16_t)v214, 0xCuLL);
        v216 = vmulq_f32((float32x4_t)v272, v215);
        v217 = vmlsq_lane_f32(v215, (float32x4_t)v272, (float32x2_t)*(_OWORD *)&vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v216, 2), vaddq_f32(v216, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v216.f32, 1))), 0);
        v218 = (int32x4_t)vmulq_f32(v217, v217);
        v218.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v218, 2), vadd_f32(*(float32x2_t *)v218.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v218.i8, 1))).u32[0];
        v219 = vrsqrte_f32((float32x2_t)v218.u32[0]);
        v220 = vmul_f32(v219, vrsqrts_f32((float32x2_t)v218.u32[0], vmul_f32(v219, v219)));
        v273 = vmulq_n_f32(v217, vmul_f32(v220, vrsqrts_f32((float32x2_t)v218.u32[0], vmul_f32(v220, v220))).f32[0]);
        v221 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v273, (int32x4_t)v273), (int8x16_t)v273, 0xCuLL), v212), v273, v213);
        v222 = vextq_s8((int8x16_t)vuzp1q_s32(v221, v221), (int8x16_t)v221, 0xCuLL);
        *(float *)v221.i32 = (float)v207;
        v263 = vdivq_f32(v202, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v221.i8, 0));
        v268 = (float32x4_t)v222;
        v223 = (float *)(v199 + 4);
        do
        {
          v224 = vsubq_f32(*(float32x4_t *)(v201 + 16 * *(int *)v223), v263);
          v225 = vmulq_f32(v273, v224);
          v226 = vmulq_f32(v268, v224);
          *(v223 - 1) = atan2f(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v225, 2), vaddq_f32(v225, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v225.f32, 1))).f32[0], vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v226, 2), vaddq_f32(v226, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v226.f32, 1))).f32[0]);
          v223 += 2;
          --v203;
        }
        while (v203);
      }
      v227 = 126 - 2 * __clz(v207);
      if (v198 == (float *)v199)
        v228 = 0;
      else
        v228 = v227;
      std::__introsort<std::_ClassicAlgPolicy,CompareCornerAngle &,ClippedCorner *,false>(v199, v198, (uint64_t)&v274, v228, 1);
      v199 = *(_QWORD *)(a1 + 136);
      v200 = *(_QWORD *)(a1 + 144) - v199;
    }
    if ((int)(v200 >> 3) >= 1)
    {
      v229 = 0;
      v230 = (char **)(a1 + 104);
      v231 = *(char **)(a1 + 96);
      do
      {
        v232 = (_DWORD *)(v199 + 8 * v229 + 4);
        v233 = *v230;
        if (v231 >= *v230)
        {
          v235 = *(_BYTE **)(a1 + 88);
          v236 = (v231 - v235) >> 2;
          v237 = v236 + 1;
          if ((unint64_t)(v236 + 1) >> 62)
            goto LABEL_301;
          v238 = v233 - v235;
          if (v238 >> 1 > v237)
            v237 = v238 >> 1;
          if ((unint64_t)v238 >= 0x7FFFFFFFFFFFFFFCLL)
            v239 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v239 = v237;
          if (v239)
          {
            v240 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a1 + 104, v239);
            v235 = *(_BYTE **)(a1 + 88);
            v231 = *(char **)(a1 + 96);
          }
          else
          {
            v240 = 0;
          }
          v241 = &v240[4 * v236];
          *(_DWORD *)v241 = *v232;
          v234 = v241 + 4;
          while (v231 != v235)
          {
            v242 = *((_DWORD *)v231 - 1);
            v231 -= 4;
            *((_DWORD *)v241 - 1) = v242;
            v241 -= 4;
          }
          v233 = &v240[4 * v239];
          *(_QWORD *)(a1 + 88) = v241;
          *(_QWORD *)(a1 + 96) = v234;
          *(_QWORD *)(a1 + 104) = v233;
          if (v235)
          {
            operator delete(v235);
            v233 = *v230;
          }
        }
        else
        {
          *(_DWORD *)v231 = *v232;
          v234 = v231 + 4;
        }
        *(_QWORD *)(a1 + 96) = v234;
        v243 = (_DWORD *)(*(_QWORD *)(a1 + 136)
                        + 8
                        * (++v229 % (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 144) - *(_QWORD *)(a1 + 136)) >> 3))
                        + 4);
        if (v234 >= v233)
        {
          v244 = *(_BYTE **)(a1 + 88);
          v245 = (v234 - v244) >> 2;
          v246 = v245 + 1;
          if ((unint64_t)(v245 + 1) >> 62)
            goto LABEL_301;
          v247 = v233 - v244;
          if (v247 >> 1 > v246)
            v246 = v247 >> 1;
          if ((unint64_t)v247 >= 0x7FFFFFFFFFFFFFFCLL)
            v248 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v248 = v246;
          if (v248)
          {
            v249 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a1 + 104, v248);
            v244 = *(_BYTE **)(a1 + 88);
            v234 = *(char **)(a1 + 96);
          }
          else
          {
            v249 = 0;
          }
          v250 = &v249[4 * v245];
          *(_DWORD *)v250 = *v243;
          v231 = v250 + 4;
          while (v234 != v244)
          {
            v251 = *((_DWORD *)v234 - 1);
            v234 -= 4;
            *((_DWORD *)v250 - 1) = v251;
            v250 -= 4;
          }
          *(_QWORD *)(a1 + 88) = v250;
          *(_QWORD *)(a1 + 96) = v231;
          *(_QWORD *)(a1 + 104) = &v249[4 * v248];
          if (v244)
            operator delete(v244);
        }
        else
        {
          *(_DWORD *)v234 = *v243;
          v231 = v234 + 4;
        }
        *(_QWORD *)(a1 + 96) = v231;
        v199 = *(_QWORD *)(a1 + 136);
      }
      while (v229 < (int)((unint64_t)(*(_QWORD *)(a1 + 144) - v199) >> 3));
    }
  }
  v253 = *(_OWORD *)(a1 + 64);
  v252 = a1 + 64;
  v254 = *(_OWORD *)(v252 - 16);
  v255 = *(_OWORD *)(v252 + 16);
  v256 = *(_OWORD *)(v252 + 32);
  v257 = *(_OWORD *)(v252 - 48);
  v258 = *(_OWORD *)(v252 - 32);
  *(_OWORD *)(v252 - 48) = v253;
  *(_OWORD *)(v252 - 32) = v255;
  *(_OWORD *)(v252 - 16) = v256;
  *(_OWORD *)v252 = v257;
  *(_OWORD *)(v252 + 16) = v258;
  *(_OWORD *)(v252 + 32) = v254;
  std::vector<int>::resize((std::vector<unsigned int> *)(v252 + 24), 0);
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm(v252, 0);
  std::vector<int>::resize(v8, 0);
  std::vector<ClippedCorner>::resize((uint64_t)v270, 0);
}

void std::vector<ClippedCorner>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<ClippedCorner>::__append((void **)a1, a2 - v2);
  }
}

BOOL C3DConvexPolyhedronClipAABB(uint64_t a1, float32x4_t a2, float32x4_t a3)
{
  uint64_t v4;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float32x4_t v18;
  float32x4_t v19;

  v19 = vaddq_f32(a2, a3);
  LODWORD(v4) = 1.0;
  *((float *)&v4 + 1) = -v19.f32[2];
  C3DConvexPolyhedronClipPlane(a1, 0, v4);
  if (*(_QWORD *)(a1 + 40) == *(_QWORD *)(a1 + 48))
    return 0;
  __asm { FMOV            V0.4S, #1.0 }
  DWORD2(_Q0) = 0;
  *((float *)&_Q0 + 3) = -v19.f32[0];
  C3DConvexPolyhedronClipPlane(a1, _Q0, *((uint64_t *)&_Q0 + 1));
  if (*(_QWORD *)(a1 + 40) == *(_QWORD *)(a1 + 48))
    return 0;
  LODWORD(v10) = 0;
  v18 = vsubq_f32(a2, a3);
  HIDWORD(v10) = v18.i32[0];
  C3DConvexPolyhedronClipPlane(a1, 3212836864, v10);
  if (*(_QWORD *)(a1 + 40) == *(_QWORD *)(a1 + 48))
    return 0;
  LODWORD(v11) = 0;
  HIDWORD(v11) = 1.0;
  LODWORD(v12) = 0;
  *((float *)&v12 + 1) = -v19.f32[1];
  C3DConvexPolyhedronClipPlane(a1, v11, v12);
  if (*(_QWORD *)(a1 + 40) == *(_QWORD *)(a1 + 48))
    return 0;
  LODWORD(v13) = 0;
  HIDWORD(v13) = v18.i32[1];
  C3DConvexPolyhedronClipPlane(a1, 0xBF80000000000000, v13);
  if (*(_QWORD *)(a1 + 40) == *(_QWORD *)(a1 + 48))
    return 0;
  LODWORD(v14) = -1082130432;
  HIDWORD(v14) = v18.i32[2];
  C3DConvexPolyhedronClipPlane(a1, 0, v14);
  return *(_QWORD *)(a1 + 40) != *(_QWORD *)(a1 + 48);
}

float32x4_t C3DConvexPolyhedronTransform(uint64_t a1, float32x4_t *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float32x4_t result;

  v2 = *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16);
  if ((int)(v2 >> 4) >= 1)
  {
    v3 = 0;
    v4 = v2 & 0xFFFFFFFF0;
    do
    {
      v5 = *(_QWORD *)(a1 + 16);
      result = vaddq_f32(a2[3], vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(a2[1], *(float32x2_t *)(v5 + v3), 1), *a2, COERCE_FLOAT(*(_OWORD *)(v5 + v3))), a2[2], *(float32x4_t *)(v5 + v3), 2));
      *(float32x4_t *)(v5 + v3) = result;
      v3 += 16;
    }
    while (v4 != v3);
  }
  return result;
}

float32x4_t C3DConvexPolyhedronComputeBoxInSpace(uint64_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5)
{
  float32x4_t result;
  float32x4_t *v7;
  unint64_t v8;
  float32x4_t v9;
  uint64_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;

  result = *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 48);
  v7 = *(float32x4_t **)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24) - (_QWORD)v7;
  v9 = (float32x4_t)xmmword_1DD0076D0;
  if ((int)(v8 >> 4) >= 1)
  {
    v10 = (v8 >> 4);
    v11.i64[0] = 0x3F0000003F000000;
    v11.i64[1] = 0x3F0000003F000000;
    do
    {
      v12 = *v7++;
      v13 = vaddq_f32(a5, vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(a3, *(float32x2_t *)v12.f32, 1), a2, v12.f32[0]), a4, v12, 2));
      v14 = vsubq_f32(result, v9);
      v14.i32[3] = 0;
      v13.i32[3] = 0;
      v15 = vminnmq_f32(v14, v13);
      v16 = vaddq_f32(result, v9);
      v16.i32[3] = 0;
      v17 = vmaxnmq_f32(v16, v13);
      result = vmulq_f32(vaddq_f32(v15, v17), v11);
      v9 = vmulq_f32(vsubq_f32(v17, v15), v11);
      result.i32[3] = 1.0;
      v9.i32[3] = 0;
      --v10;
    }
    while (v10);
  }
  return result;
}

void _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE8__appendEm(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 4);
    if (v9 >> 60)
      abort();
    v10 = v8 >> 4;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v4, v12);
    else
      v13 = 0;
    v14 = &v13[16 * v10];
    v15 = &v13[16 * v12];
    bzero(v14, 16 * a2);
    v16 = &v14[16 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        v19 = *((_OWORD *)v17 - 1);
        v17 -= 16;
        *((_OWORD *)v14 - 1) = v19;
        v14 -= 16;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

void *_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(16 * a2);
}

void std::vector<int>::__append(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  std::__compressed_pair<unsigned int *> *p_end_cap;
  unsigned int *v5;
  unsigned int *value;
  unsigned int *end;
  std::vector<unsigned int>::pointer begin;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  unsigned int *v16;
  unsigned int *v17;
  int v18;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v5 = value;
  end = p_end_cap[-1].__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(p_end_cap[-1].__value_, 4 * __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    begin = this->__begin_;
    v9 = (char *)end - (char *)this->__begin_;
    v10 = __n + (v9 >> 2);
    if (v10 >> 62)
      abort();
    v11 = v9 >> 2;
    v12 = (char *)v5 - (char *)begin;
    if (v12 >> 1 > v10)
      v10 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)p_end_cap, v13);
      begin = this->__begin_;
      end = this->__end_;
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v11];
    v16 = (unsigned int *)&v14[4 * v13];
    bzero(v15, 4 * __n);
    v17 = (unsigned int *)&v15[4 * __n];
    while (end != begin)
    {
      v18 = *--end;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    this->__begin_ = (std::vector<unsigned int>::pointer)v15;
    this->__end_ = v17;
    this->__end_cap_.__value_ = v16;
    if (begin)
      operator delete(begin);
  }
}

void std::vector<ClippedCorner>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 3);
    if (v9 >> 61)
      abort();
    v10 = v8 >> 3;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 2 > v9)
      v9 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Statement *>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v10];
    v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    v16 = &v14[8 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *((_QWORD *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,CompareCornerAngle &,ClippedCorner *,false>(uint64_t result, float *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  float *v15;
  uint64_t v16;
  float *v17;
  char v18;
  BOOL v19;
  uint64_t v20;
  float *v21;
  float *v22;
  float v23;
  int v24;
  float *v25;
  float *v26;
  uint64_t v27;

  v8 = result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (uint64_t)a2 - v9;
    v13 = ((uint64_t)a2 - v9) >> 3;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        if (*(a2 - 2) < *(float *)v9)
        {
          v20 = *(_QWORD *)v9;
          *(_QWORD *)v9 = *((_QWORD *)a2 - 1);
          *((_QWORD *)a2 - 1) = v20;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,CompareCornerAngle &,ClippedCorner *>((float *)v9, (float *)(v9 + 8), a2 - 2);
      case 4uLL:
        return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,CompareCornerAngle &,ClippedCorner *>((float *)v9, (float *)(v9 + 8), (float *)(v9 + 16), (_QWORD *)a2 - 1);
      case 5uLL:
        return std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,CompareCornerAngle &,ClippedCorner *>((float *)v9, (float *)(v9 + 8), (float *)(v9 + 16), (uint64_t *)(v9 + 24), (uint64_t *)a2 - 1);
      default:
        if (v12 > 191)
        {
          if (v11 == 1)
          {
            if ((float *)v9 != a2)
              return (uint64_t)std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,CompareCornerAngle &,ClippedCorner *,ClippedCorner *>((float *)v9, a2, a2, a3);
            return result;
          }
          v14 = v13 >> 1;
          v15 = (float *)(v9 + 8 * (v13 >> 1));
          if ((unint64_t)v12 < 0x401)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,CompareCornerAngle &,ClippedCorner *>((float *)(v9 + 8 * (v13 >> 1)), (float *)v9, a2 - 2);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,CompareCornerAngle &,ClippedCorner *>((float *)v9, (float *)(v9 + 8 * (v13 >> 1)), a2 - 2);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,CompareCornerAngle &,ClippedCorner *>((float *)(v9 + 8), v15 - 2, a2 - 4);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,CompareCornerAngle &,ClippedCorner *>((float *)(v9 + 16), (float *)(v9 + 8 + 8 * v14), a2 - 6);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,CompareCornerAngle &,ClippedCorner *>(v15 - 2, v15, (float *)(v9 + 8 + 8 * v14));
            v16 = *(_QWORD *)v9;
            *(_QWORD *)v9 = *(_QWORD *)v15;
            *(_QWORD *)v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (*(float *)(v9 - 8) >= *(float *)v9)
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,ClippedCorner *,CompareCornerAngle &>((float *)v9, a2);
            v9 = result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,ClippedCorner *,CompareCornerAngle &>((float *)v9, a2);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,CompareCornerAngle &,ClippedCorner *>(v9, (uint64_t)v17);
          v9 = (uint64_t)(v17 + 2);
          result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,CompareCornerAngle &,ClippedCorner *>((uint64_t)(v17 + 2), (uint64_t)a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,CompareCornerAngle &,ClippedCorner *,false>(v8, v17, a3, -v11, a5 & 1);
            v9 = (uint64_t)(v17 + 2);
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        if ((a5 & 1) != 0)
          return std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,CompareCornerAngle &,ClippedCorner *>(v9, (uint64_t)a2);
        if ((float *)v9 != a2)
        {
          v21 = (float *)(v9 + 8);
          while (v21 != a2)
          {
            v22 = v21;
            v23 = *(float *)(v8 + 8);
            if (v23 < *(float *)v8)
            {
              v24 = *(_DWORD *)(v8 + 12);
              v25 = v22;
              do
              {
                v26 = v25;
                v27 = *((_QWORD *)v25 - 1);
                v25 -= 2;
                *(_QWORD *)v26 = v27;
              }
              while (*(v26 - 4) > v23);
              *v25 = v23;
              *((_DWORD *)v25 + 1) = v24;
            }
            v21 = v22 + 2;
            v8 = (uint64_t)v22;
          }
        }
        return result;
    }
  }
}

uint64_t std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,CompareCornerAngle &,ClippedCorner *>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  int v7;
  uint64_t v8;
  float v9;
  uint64_t v10;

  if (result != a2)
  {
    v2 = result + 8;
    if (result + 8 != a2)
    {
      v3 = 0;
      v4 = result;
      do
      {
        v5 = v2;
        v6 = *(float *)(v4 + 8);
        if (v6 < *(float *)v4)
        {
          v7 = *(_DWORD *)(v4 + 12);
          v8 = v3;
          while (1)
          {
            *(_QWORD *)(result + v8 + 8) = *(_QWORD *)(result + v8);
            if (!v8)
              break;
            v9 = *(float *)(result + v8 - 8);
            v8 -= 8;
            if (v9 <= v6)
            {
              v10 = result + v8 + 8;
              goto LABEL_10;
            }
          }
          v10 = result;
LABEL_10:
          *(float *)v10 = v6;
          *(_DWORD *)(v10 + 4) = v7;
        }
        v2 = v5 + 8;
        v3 += 8;
        v4 = v5;
      }
      while (v5 + 8 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,CompareCornerAngle &,ClippedCorner *>(float *a1, float *a2, float *a3)
{
  float v3;
  float v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a2;
  v4 = *a3;
  if (*a2 < *a1)
  {
    v5 = *(_QWORD *)a1;
    if (v4 < v3)
    {
      *(_QWORD *)a1 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v5;
      return 1;
    }
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)a2 = v5;
    if (*a3 >= *(float *)&v5)
      return 1;
    *(_QWORD *)a2 = *(_QWORD *)a3;
    *(_QWORD *)a3 = v5;
    return 2;
  }
  if (v4 < v3)
  {
    v6 = *(_QWORD *)a2;
    *(_QWORD *)a2 = *(_QWORD *)a3;
    *(_QWORD *)a3 = v6;
    if (*a2 >= *a1)
      return 1;
    v7 = *(_QWORD *)a1;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)a2 = v7;
    return 2;
  }
  return 0;
}

float *std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,ClippedCorner *,CompareCornerAngle &>(float *a1, float *a2)
{
  uint64_t v2;
  float *v3;
  float v4;
  float *v5;
  float v6;
  uint64_t v7;
  float v8;
  float v9;

  v2 = *(_QWORD *)a1;
  if (*(a2 - 2) <= COERCE_FLOAT(*(_QWORD *)a1))
  {
    v5 = a1 + 2;
    do
    {
      v3 = v5;
      if (v5 >= a2)
        break;
      v5 += 2;
    }
    while (*v3 <= *(float *)&v2);
  }
  else
  {
    v3 = a1;
    do
    {
      v4 = v3[2];
      v3 += 2;
    }
    while (v4 <= *(float *)&v2);
  }
  if (v3 < a2)
  {
    do
    {
      v6 = *(a2 - 2);
      a2 -= 2;
    }
    while (v6 > *(float *)&v2);
  }
  while (v3 < a2)
  {
    v7 = *(_QWORD *)v3;
    *(_QWORD *)v3 = *(_QWORD *)a2;
    *(_QWORD *)a2 = v7;
    do
    {
      v8 = v3[2];
      v3 += 2;
    }
    while (v8 <= *(float *)&v2);
    do
    {
      v9 = *(a2 - 2);
      a2 -= 2;
    }
    while (v9 > *(float *)&v2);
  }
  if (v3 - 2 != a1)
    *(_QWORD *)a1 = *((_QWORD *)v3 - 1);
  *((_QWORD *)v3 - 1) = v2;
  return v3;
}

float *std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,ClippedCorner *,CompareCornerAngle &>(float *a1, float *a2)
{
  uint64_t v2;
  uint64_t v3;
  float v4;
  float *v5;
  float *v6;
  float v7;
  float v8;
  float *v9;
  float *v10;
  uint64_t v11;
  float v12;
  float v13;

  v2 = 0;
  v3 = *(_QWORD *)a1;
  do
  {
    v4 = a1[v2 + 2];
    v2 += 2;
  }
  while (v4 < *(float *)&v3);
  v5 = &a1[v2];
  v6 = &a1[v2 - 2];
  if (v2 == 2)
  {
    do
    {
      if (v5 >= a2)
        break;
      v8 = *(a2 - 2);
      a2 -= 2;
    }
    while (v8 >= *(float *)&v3);
  }
  else
  {
    do
    {
      v7 = *(a2 - 2);
      a2 -= 2;
    }
    while (v7 >= *(float *)&v3);
  }
  if (v5 < a2)
  {
    v9 = &a1[v2];
    v10 = a2;
    do
    {
      v11 = *(_QWORD *)v9;
      *(_QWORD *)v9 = *(_QWORD *)v10;
      *(_QWORD *)v10 = v11;
      do
      {
        v12 = v9[2];
        v9 += 2;
      }
      while (v12 < *(float *)&v3);
      do
      {
        v13 = *(v10 - 2);
        v10 -= 2;
      }
      while (v13 >= *(float *)&v3);
    }
    while (v9 < v10);
    v6 = v9 - 2;
  }
  if (v6 != a1)
    *(_QWORD *)a1 = *(_QWORD *)v6;
  *(_QWORD *)v6 = v3;
  return v6;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,CompareCornerAngle &,ClippedCorner *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  float v11;
  int v12;
  uint64_t v13;
  float v14;
  uint64_t v15;

  v4 = (a2 - a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(float *)(a2 - 8) < *(float *)a1)
      {
        v6 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v6;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,CompareCornerAngle &,ClippedCorner *>((float *)a1, (float *)(a1 + 8), (float *)(a2 - 8));
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,CompareCornerAngle &,ClippedCorner *>((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16), (_QWORD *)(a2 - 8));
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,CompareCornerAngle &,ClippedCorner *>((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16), (uint64_t *)(a1 + 24), (uint64_t *)(a2 - 8));
      return 1;
    default:
      v7 = (float *)(a1 + 16);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,CompareCornerAngle &,ClippedCorner *>((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16));
      v8 = a1 + 24;
      if (a1 + 24 == a2)
        return 1;
      v9 = 0;
      v10 = 0;
      break;
  }
  while (1)
  {
    v11 = *(float *)v8;
    if (*(float *)v8 < *v7)
    {
      v12 = *(_DWORD *)(v8 + 4);
      v13 = v9;
      while (1)
      {
        *(_QWORD *)(a1 + v13 + 24) = *(_QWORD *)(a1 + v13 + 16);
        if (v13 == -16)
          break;
        v14 = *(float *)(a1 + v13 + 8);
        v13 -= 8;
        if (v14 <= v11)
        {
          v15 = a1 + v13 + 24;
          goto LABEL_12;
        }
      }
      v15 = a1;
LABEL_12:
      *(float *)v15 = v11;
      *(_DWORD *)(v15 + 4) = v12;
      if (++v10 == 8)
        return v8 + 8 == a2;
    }
    v7 = (float *)v8;
    v9 += 8;
    v8 += 8;
    if (v8 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,CompareCornerAngle &,ClippedCorner *>(float *a1, float *a2, float *a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,CompareCornerAngle &,ClippedCorner *>(a1, a2, a3);
  if (*(float *)a4 < *a3)
  {
    v9 = *(_QWORD *)a3;
    *(_QWORD *)a3 = *a4;
    *a4 = v9;
    if (*a3 < *a2)
    {
      v10 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v10;
      if (*a2 < *a1)
      {
        v11 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)a2 = v11;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,CompareCornerAngle &,ClippedCorner *>(float *a1, float *a2, float *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,CompareCornerAngle &,ClippedCorner *>(a1, a2, a3, a4);
  if (*(float *)a5 < *(float *)a4)
  {
    v11 = *a4;
    *a4 = *a5;
    *a5 = v11;
    if (*(float *)a4 < *a3)
    {
      v12 = *(_QWORD *)a3;
      *(_QWORD *)a3 = *a4;
      *a4 = v12;
      if (*a3 < *a2)
      {
        v13 = *(_QWORD *)a2;
        *(_QWORD *)a2 = *(_QWORD *)a3;
        *(_QWORD *)a3 = v13;
        if (*a2 < *a1)
        {
          v14 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)a2 = v14;
        }
      }
    }
  }
  return result;
}

float *std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,CompareCornerAngle &,ClippedCorner *,ClippedCorner *>(float *a1, float *a2, float *a3, uint64_t a4)
{
  float *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  float *v12;
  float *v13;
  float *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float *v19;
  float *v20;
  uint64_t v21;
  uint64_t v22;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) >> 3;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[2 * v10];
      do
      {
        std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,CompareCornerAngle &,ClippedCorner *>((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        if (*v14 < *a1)
        {
          v15 = *(_QWORD *)v14;
          *(_QWORD *)v14 = *(_QWORD *)a1;
          *(_QWORD *)a1 = v15;
          std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,CompareCornerAngle &,ClippedCorner *>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 9)
    {
      v16 = (unint64_t)v8 >> 3;
      do
      {
        v17 = 0;
        v18 = *(_QWORD *)a1;
        v19 = a1;
        do
        {
          v20 = v19;
          v19 += 2 * v17 + 2;
          v21 = 2 * v17;
          v17 = (2 * v17) | 1;
          v22 = v21 + 2;
          if (v22 < v16 && *v19 < v19[2])
          {
            v19 += 2;
            v17 = v22;
          }
          *(_QWORD *)v20 = *(_QWORD *)v19;
        }
        while (v17 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        v6 -= 2;
        if (v19 == v6)
        {
          *(_QWORD *)v19 = v18;
        }
        else
        {
          *(_QWORD *)v19 = *(_QWORD *)v6;
          *(_QWORD *)v6 = v18;
          std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,CompareCornerAngle &,ClippedCorner *>((uint64_t)a1, (uint64_t)(v19 + 2), a4, ((char *)(v19 + 2) - (char *)a1) >> 3);
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,CompareCornerAngle &,ClippedCorner *>(uint64_t result, uint64_t a2, uint64_t a3, float *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float v10;
  int v11;
  float *v12;
  uint64_t v13;
  uint64_t v14;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      v6 = v4 >> 2;
      v7 = (v4 >> 2) + 1;
      v8 = (float *)(result + 8 * v7);
      v9 = v6 + 2;
      if (v9 < a3 && *v8 < v8[2])
      {
        v8 += 2;
        v7 = v9;
      }
      v10 = *a4;
      if (*v8 >= *a4)
      {
        v11 = *((_DWORD *)a4 + 1);
        do
        {
          v12 = a4;
          a4 = v8;
          *(_QWORD *)v12 = *(_QWORD *)v8;
          if (v5 < v7)
            break;
          v13 = 2 * v7;
          v7 = (2 * v7) | 1;
          v8 = (float *)(result + 8 * v7);
          v14 = v13 + 2;
          if (v14 < a3 && *v8 < v8[2])
          {
            v8 += 2;
            v7 = v14;
          }
        }
        while (*v8 >= v10);
        *a4 = v10;
        *((_DWORD *)a4 + 1) = v11;
      }
    }
  }
  return result;
}

uint64_t std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,CompareCornerAngle &,ClippedCorner *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  float v8;
  int v9;
  _QWORD *v10;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = v4 >> 1;
    v6 = (_QWORD *)(result + 8 * (v4 >> 1));
    v7 = (_QWORD *)(a2 - 8);
    v8 = *(float *)(a2 - 8);
    if (*(float *)v6 < v8)
    {
      v9 = *(_DWORD *)(a2 - 4);
      do
      {
        v10 = v7;
        v7 = v6;
        *v10 = *v6;
        if (!v5)
          break;
        v5 = (v5 - 1) >> 1;
        v6 = (_QWORD *)(result + 8 * v5);
      }
      while (*(float *)v6 < v8);
      *(float *)v7 = v8;
      *((_DWORD *)v7 + 1) = v9;
    }
  }
  return result;
}

uint64_t _configureStageInputOutputDescriptorWithDeformerFunction(void *a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;

  if (!*(_BYTE *)a3)
    _configureStageInputOutputDescriptorWithDeformerFunction();
  v6 = (void *)objc_msgSend((id)objc_msgSend(a1, "attributes"), "objectAtIndexedSubscript:", a2);
  objc_msgSend(v6, "setFormat:", *(_QWORD *)(a3 + 8));
  objc_msgSend(v6, "setOffset:", *(_QWORD *)(a3 + 16));
  objc_msgSend(v6, "setBufferIndex:", a2 + 10);
  v7 = (void *)objc_msgSend((id)objc_msgSend(a1, "layouts"), "objectAtIndexedSubscript:", objc_msgSend(v6, "bufferIndex"));
  objc_msgSend(v7, "setStepFunction:", 5);
  return objc_msgSend(v7, "setStride:", *(_QWORD *)(a3 + 24));
}

uint64_t _C3DAnimationManagerAddAnimationNode(uint64_t a1, uint64_t a2, const void *a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t Animation;
  uint64_t v31;
  int v32;
  int BaseType;
  uint64_t v34;
  void *Bytes;
  CFTypeID v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *TargetAddress;
  NSObject *v46;
  uint8_t v48[16];

  if (!a1 && (v6 = scn_default_log(), os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)))
  {
    _C3DAnimationManagerAddAnimationNode_cold_4(v6, v7, v8, v9, v10, v11, v12, v13);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v14 = scn_default_log();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    _C3DAnimationManagerAddAnimationNode_cold_3(v14, v15, v16, v17, v18, v19, v20, v21);
LABEL_6:
  if (!a3)
  {
    v22 = scn_default_log();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationNode_cold_2(v22, v23, v24, v25, v26, v27, v28, v29);
  }
  Animation = C3DAnimationNodeGetAnimation(a2);
  v31 = C3DAnimationSetup((CFTypeRef)Animation, (uint64_t)a3);
  if ((_DWORD)v31)
  {
    C3DAnimationNodeSetTarget(a2, a3);
    if (_C3DAnimationReadsDestinationBuffer((_BYTE *)Animation))
      v32 = 4096;
    else
      v32 = 0;
    *(_DWORD *)(a2 + 121) = *(_DWORD *)(a2 + 121) & 0xFFFFEFFF | v32;
    if ((*(_BYTE *)(Animation + 84) & 4) != 0 && *(float *)(Animation + 76) > 1.0)
    {
      *(_QWORD *)(a2 + 112) = malloc_type_calloc(0x20uLL, 1uLL, 0xD89A7E41uLL);
      BaseType = C3DModelTargetGetBaseType((uint64_t)a3);
      *(_QWORD *)(*(_QWORD *)(a2 + 112) + 24) = C3DValueCreate(BaseType, 1);
      v34 = C3DValueCreate(BaseType, 1);
      *(_QWORD *)(*(_QWORD *)(a2 + 112) + 16) = v34;
      Bytes = (void *)C3DValueGetBytes(v34);
      C3DModelTargetGetValue((uint64_t)a3, Bytes);
      C3DAnimationEvaluate(Animation);
    }
    v36 = CFGetTypeID((CFTypeRef)a2);
    if (v36 == C3DAnimationClusterNodeGetTypeID())
    {
      v37 = scn_default_log();
      if (os_log_type_enabled(v37, OS_LOG_TYPE_FAULT))
        _C3DAnimationManagerAddAnimationNode_cold_1(v37, v38, v39, v40, v41, v42, v43, v44);
    }
    TargetAddress = (void *)C3DModelTargetGetTargetAddress((uint64_t)a3);
    __C3DAnimationManagerAddAnimationNodeToAnimationStackWithKey(a1, (_QWORD *)a2, TargetAddress, a3);
  }
  else
  {
    v46 = scn_default_log();
    if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v48 = 0;
      _os_log_impl(&dword_1DCCB8000, v46, OS_LOG_TYPE_DEFAULT, "Warning: fail to setup the animation - won't be added to the animation stack", v48, 2u);
    }
  }
  return v31;
}

void __C3DAnimationManagerAddAnimationNodeToAnimationStackWithKey(uint64_t a1, _QWORD *a2, void *key, const void *a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const void *Value;
  uint64_t Count;
  uint64_t ValuePtrAtIndex;
  _QWORD *appended;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t TypeID;
  CFTypeID v37;
  uint64_t Target;
  uint64_t v39;
  NSObject *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int TypeSemantic;
  int BaseType;
  int v51;
  uint64_t ModelValueStorage;
  NSObject *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  if (!a1 && (v8 = scn_default_log(), os_log_type_enabled(v8, OS_LOG_TYPE_FAULT)))
  {
    _C3DAnimationManagerAddAnimationNode_cold_4(v8, v9, v10, v11, v12, v13, v14, v15);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v16 = scn_default_log();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
    _C3DAnimationManagerAddAnimationNode_cold_3(v16, v17, v18, v19, v20, v21, v22, v23);
LABEL_6:
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), key);
  if (Value
    && (Count = (uint64_t)Value - 1,
        (ValuePtrAtIndex = C3DArrayGetValuePtrAtIndex(*(_QWORD *)(a1 + 24), (uint64_t)Value - 1)) != 0))
  {
    appended = (_QWORD *)ValuePtrAtIndex;
  }
  else
  {
    if (CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 32), key))
    {
      v28 = scn_default_log();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_FAULT))
        __C3DAnimationManagerAddAnimationNodeToAnimationStackWithKey_cold_3(v28, v29, v30, v31, v32, v33, v34, v35);
    }
    Count = C3DArrayGetCount(*(_QWORD *)(a1 + 24));
    appended = C3DArrayAppendValue(*(_QWORD *)(a1 + 24), 0);
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 32), key, (const void *)(Count + 1));
    C3DAnimationStackInit(appended);
    appended[5] = key;
    C3DAnimationStackSetTarget((uint64_t)appended, a4);
    TypeID = C3DAnimationClusterNodeGetTypeID();
    v37 = CFGetTypeID(a2);
    *((_BYTE *)appended + 48) = TypeID == v37;
    if (TypeID != v37)
    {
      Target = C3DAnimationStackGetTarget((uint64_t)appended);
      v39 = Target;
      if (*(_BYTE *)(Target + 37))
      {
        *((_BYTE *)appended + 128) = 1;
        if (!*(_BYTE *)(a2[3] + 34))
        {
          v40 = scn_default_log();
          if (os_log_type_enabled(v40, OS_LOG_TYPE_FAULT))
            __C3DAnimationManagerAddAnimationNodeToAnimationStackWithKey_cold_2(v40, v41, v42, v43, v44, v45, v46, v47);
        }
        *(_WORD *)(v39 + 32) = 11;
        *(_BYTE *)(v39 + 36) = C3DSizeOfBaseType(11);
        *(_WORD *)(v39 + 34) = 8;
        v48 = 11;
        TypeSemantic = 8;
      }
      else
      {
        *((_BYTE *)appended + 128) = 0;
        BaseType = C3DModelTargetGetBaseType(Target);
        TypeSemantic = C3DModelTargetGetTypeSemantic(v39);
        v48 = BaseType;
      }
      appended[31] = C3DKeyFrameInterpolatorForType(v48, TypeSemantic, 0, 0, 1);
      v51 = C3DModelTargetGetBaseType(v39);
      *((_BYTE *)appended + 242) = C3DSizeOfBaseType(v51);
      ModelValueStorage = C3DAnimationManagerGetModelValueStorage(a1);
      if (!ModelValueStorage)
      {
        v53 = scn_default_log();
        if (os_log_type_enabled(v53, OS_LOG_TYPE_FAULT))
          __C3DAnimationManagerAddAnimationNodeToAnimationStackWithKey_cold_1(v53, v54, v55, v56, v57, v58, v59, v60);
      }
      appended[4] = C3DModelValueStorageAddAndRetainModelValue(ModelValueStorage, (const void *)v39);
    }
  }
  if ((*(_WORD *)(C3DAnimationNodeGetAnimation((uint64_t)a2) + 84) & 8) != 0)
    ++*(_DWORD *)(a1 + 168);
  else
    ++*(_DWORD *)(a1 + 164);
  a2[19] = Count;
  a2[20] = key;
  C3DAnimationStackAppendAnimationNode((uint64_t)appended, a2, a1);
}

void C3DAnimationManagerTriggerCallbacks(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  CFIndex Count;
  CFIndex v19;
  const __CFArray *Copy;
  CFIndex v21;
  const __CFDictionary *ValueAtIndex;
  uint64_t Animation;
  _QWORD *v24;
  int v25;
  int v26;
  void (*v27)(const __CFDictionary *);
  uint64_t ModelValueStorage;
  uint64_t v29;
  uint64_t v30;
  uint64_t ValuePtrAtIndex;
  unsigned int v32;
  uint64_t (*v33)(const __CFDictionary *, _QWORD, uint64_t, _QWORD);
  void *Owner;
  int v35;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationNode_cold_4(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  if (*(_BYTE *)(a1 + 90))
  {
    v10 = scn_default_log();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
      C3DAnimationManagerTriggerCallbacks_cold_1(v10, v11, v12, v13, v14, v15, v16, v17);
  }
  Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 80));
  if (Count >= 1)
  {
    v19 = Count;
    Copy = CFArrayCreateCopy(0, *(CFArrayRef *)(a1 + 80));
    CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 80));
    v21 = 0;
    while (1)
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(Copy, v21);
      Animation = C3DAnimationNodeGetAnimation((uint64_t)ValueAtIndex);
      v24 = (_QWORD *)Animation;
      v25 = *(_DWORD *)((char *)ValueAtIndex + 121);
      *(_DWORD *)((char *)ValueAtIndex + 121) = v25 & 0xFFFE1FFF;
      if ((v25 & 0x22000) == 0x2000)
      {
        *(_DWORD *)((char *)ValueAtIndex + 121) = v25 & 0xFFFC1FFF | 0x20000;
        (*(void (**)(const __CFDictionary *))(Animation + 144))(ValueAtIndex);
      }
      if ((v25 & 0x8000) != 0)
      {
        v26 = *(_DWORD *)((char *)ValueAtIndex + 121);
        if ((v26 & 0x80000) == 0)
        {
          *(_DWORD *)((char *)ValueAtIndex + 121) = v26 | 0x80000;
          v27 = (void (*)(const __CFDictionary *))*((_QWORD *)ValueAtIndex + 26);
          if (v27)
            v27(ValueAtIndex);
          if (C3DAnimationGetCommitWhenDone((uint64_t)v24))
          {
            if (!v24[19])
            {
              ModelValueStorage = C3DAnimationManagerGetModelValueStorage(a1);
              if (ModelValueStorage)
              {
                v29 = *((_QWORD *)ValueAtIndex + 19);
                if (v29 != -1)
                {
                  v30 = ModelValueStorage;
                  ValuePtrAtIndex = C3DArrayGetValuePtrAtIndex(*(_QWORD *)(a1 + 24), v29);
                  C3DModelValueStorageUpdateModelValueFromPresentationValue(v30, *(_QWORD *)(ValuePtrAtIndex + 32));
                }
              }
            }
          }
        }
      }
      if ((v25 & 0x4000) == 0)
        goto LABEL_34;
      v32 = *(_DWORD *)((char *)ValueAtIndex + 121);
      if ((v32 & 0x40000) != 0)
        goto LABEL_34;
      *(_DWORD *)((char *)ValueAtIndex + 121) = v32 | 0x40000;
      CFRetain(v24);
      v33 = (uint64_t (*)(const __CFDictionary *, _QWORD, uint64_t, _QWORD))v24[19];
      if (v33 && (v33(ValueAtIndex, (v32 >> 10) & 1, a1, *((_QWORD *)ValueAtIndex + 17)) & 1) != 0
        || C3DIsRunningInEditor()
        && !C3DAnimationGetIsImplicit(*((_QWORD *)ValueAtIndex + 2))
        || *((double *)ValueAtIndex + 11) == 0.0
        && !C3DAnimationNodeGetRemovedOnCompletion((uint64_t)ValueAtIndex))
      {
        goto LABEL_33;
      }
      Owner = (void *)C3DAnimationNodeGetOwner((uint64_t)ValueAtIndex);
      if ((C3DAnimationGetIsImplicit((uint64_t)v24) & 1) == 0
        && Owner
        && _C3DAnimationManagerGetAnimationNodeForKey(a1, Owner, *((const void **)ValueAtIndex + 17)) == ValueAtIndex)
      {
        break;
      }
      _C3DAnimationManagerAppendCallback(a1, (char *)ValueAtIndex, 8);
      CFRelease(v24);
LABEL_37:
      if (v19 == ++v21)
      {
        CFRelease(Copy);
        return;
      }
    }
    _C3DAnimationManagerRemoveAnimationForKey(a1, Owner, *((void **)ValueAtIndex + 17));
LABEL_33:
    CFRelease(v24);
LABEL_34:
    if ((v25 & 0x10000) != 0)
    {
      v35 = *(_DWORD *)((char *)ValueAtIndex + 121);
      if ((v35 & 0x100000) == 0)
      {
        *(_DWORD *)((char *)ValueAtIndex + 121) = v35 | 0x100000;
        _C3DAnimationManagerDiscardAnimationNodeFromStack(a1, ValueAtIndex);
      }
    }
    goto LABEL_37;
  }
}

uint64_t C3DAnimationManagerGetModelValueStorage(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationNode_cold_4(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 16);
}

const __CFDictionary *_C3DAnimationManagerGetAnimationNodeForKey(uint64_t a1, void *key, const void *a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const __CFDictionary *result;

  if (!a1 && (v6 = scn_default_log(), os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)))
  {
    _C3DAnimationManagerAddAnimationNode_cold_4(v6, v7, v8, v9, v10, v11, v12, v13);
    if (key)
      goto LABEL_6;
  }
  else if (key)
  {
    goto LABEL_6;
  }
  v14 = scn_default_log();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    _C3DAnimationManagerGetAnimationNodeForKey_cold_2(v14, v15, v16, v17, v18, v19, v20, v21);
LABEL_6:
  if (!a3)
  {
    v22 = scn_default_log();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerGetAnimationNodeForKey_cold_1(v22, v23, v24, v25, v26, v27, v28, v29);
  }
  result = (const __CFDictionary *)_C3DAnimationManagerGetAnimationPerKeyDictionaryForObject(a1, key, 0);
  if (result)
    return (const __CFDictionary *)CFDictionaryGetValue(result, a3);
  return result;
}

void C3DAnimationManagerRemoveAnimationForKey(uint64_t a1, void *key, void *a3)
{
  _C3DAnimationManagerRemoveAnimationForKey(a1, key, a3);
}

void _C3DAnimationManagerAppendCallback(uint64_t a1, char *value, char a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;

  if (!a1 && (v6 = scn_default_log(), os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)))
  {
    _C3DAnimationManagerAddAnimationNode_cold_4(v6, v7, v8, v9, v10, v11, v12, v13);
    if (value)
      goto LABEL_6;
  }
  else if (value)
  {
    goto LABEL_6;
  }
  v14 = scn_default_log();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    _C3DAnimationManagerAddAnimationNode_cold_3(v14, v15, v16, v17, v18, v19, v20, v21);
LABEL_6:
  if (*(_BYTE *)(a1 + 90))
  {
    v22 = scn_default_log();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_FAULT))
      C3DAnimationManagerTriggerCallbacks_cold_1(v22, v23, v24, v25, v26, v27, v28, v29);
  }
  v30 = *(_DWORD *)(value + 121);
  *(_DWORD *)(value + 121) = v30 | ((a3 & 0xF) << 13);
  if ((v30 & 0x1E000) == 0)
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 80), value);
}

void _C3DAnimationManagerDiscardAnimationNodeFromStack(uint64_t a1, _QWORD *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t ValuePtrAtIndex;
  uint64_t Animation;
  const void *v23;
  uint64_t ModelValueStorage;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const void *Value;
  NSObject *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t Count;
  uint64_t v55;
  uint64_t i;
  __int128 *v57;
  __int128 *v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t j;
  uint64_t v73;
  int v74;
  uint64_t Player;

  if (!a1 && (v4 = scn_default_log(), os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)))
  {
    _C3DAnimationManagerAddAnimationNode_cold_4(v4, v5, v6, v7, v8, v9, v10, v11);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v12 = scn_default_log();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    _C3DAnimationManagerAddAnimationNode_cold_3(v12, v13, v14, v15, v16, v17, v18, v19);
LABEL_6:
  v20 = a2[19];
  if (v20 != -1)
  {
    ValuePtrAtIndex = C3DArrayGetValuePtrAtIndex(*(_QWORD *)(a1 + 24), v20);
    Animation = C3DAnimationNodeGetAnimation((uint64_t)a2);
    if ((*(_WORD *)(Animation + 84) & 8) != 0)
      --*(_DWORD *)(a1 + 168);
    else
      --*(_DWORD *)(a1 + 164);
    C3DAnimationStackRemoveAnimationNode(ValuePtrAtIndex, a2);
    if (*(_BYTE *)(ValuePtrAtIndex + 48))
      C3DAnimationStackDiscardModelValueItemForAnimationClusterNode(ValuePtrAtIndex, (uint64_t)a2, *(_QWORD *)(a1 + 16), (*(_WORD *)(Animation + 84) & 0x20) == 0);
    if (C3DAnimationStackIsEmpty(ValuePtrAtIndex))
    {
      v23 = (const void *)a2[20];
      ModelValueStorage = C3DAnimationManagerGetModelValueStorage(a1);
      if (ModelValueStorage && !*(_BYTE *)(ValuePtrAtIndex + 48))
      {
        v25 = ModelValueStorage;
        C3DModelValueStorageUpdatePresentationValueFromModelValue(ModelValueStorage, *(_QWORD *)(ValuePtrAtIndex + 32));
        C3DModelValueStorageReleaseModelValue(v25, *(_QWORD *)(ValuePtrAtIndex + 32));
      }
      if (*(_BYTE *)(ValuePtrAtIndex + 241))
        _C3DAnimationManagerUpdateConstantCount(a1, -1);
      if (CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 32), v23) != 1)
      {
        v26 = scn_default_log();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_FAULT))
          _C3DAnimationManagerDiscardAnimationNodeFromStack_cold_3(v26, v27, v28, v29, v30, v31, v32, v33);
      }
      Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), v23);
      if (!Value)
      {
        v35 = scn_default_log();
        if (os_log_type_enabled(v35, OS_LOG_TYPE_FAULT))
          _C3DAnimationManagerDiscardAnimationNodeFromStack_cold_2(v35, v36, v37, v38, v39, v40, v41, v42);
      }
      v43 = (uint64_t)Value - 1;
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 32), v23);
      if (!C3DArrayGetCount(*(_QWORD *)(a1 + 24)))
      {
        v44 = scn_default_log();
        if (os_log_type_enabled(v44, OS_LOG_TYPE_FAULT))
          _C3DAnimationManagerDiscardAnimationNodeFromStack_cold_1(v44, v45, v46, v47, v48, v49, v50, v51);
      }
      v52 = C3DArrayGetValuePtrAtIndex(*(_QWORD *)(a1 + 24), v43);
      C3DAnimationStackCleanup(v52, *(_QWORD *)(a1 + 16));
      v53 = *(_DWORD *)(a1 + 40);
      *(_DWORD *)(a1 + 40) = v53 + 1;
      if (v53 >= 511)
      {
        Count = C3DArrayGetCount(*(_QWORD *)(a1 + 24));
        if (Count < 1)
        {
          v55 = 0;
        }
        else
        {
          v55 = 0;
          for (i = 0; i != Count; ++i)
          {
            v57 = (__int128 *)C3DArrayGetValuePtrAtIndex(*(_QWORD *)(a1 + 24), i);
            if (*(_BYTE *)v57)
            {
              if (v55)
              {
                v58 = v57;
                v59 = C3DArrayGetValuePtrAtIndex(*(_QWORD *)(a1 + 24), i - v55);
                v60 = v58[3];
                v62 = *v58;
                v61 = v58[1];
                *(_OWORD *)(v59 + 32) = v58[2];
                *(_OWORD *)(v59 + 48) = v60;
                *(_OWORD *)v59 = v62;
                *(_OWORD *)(v59 + 16) = v61;
                v63 = v58[7];
                v65 = v58[4];
                v64 = v58[5];
                *(_OWORD *)(v59 + 96) = v58[6];
                *(_OWORD *)(v59 + 112) = v63;
                *(_OWORD *)(v59 + 64) = v65;
                *(_OWORD *)(v59 + 80) = v64;
                v66 = v58[11];
                v68 = v58[8];
                v67 = v58[9];
                *(_OWORD *)(v59 + 160) = v58[10];
                *(_OWORD *)(v59 + 176) = v66;
                *(_OWORD *)(v59 + 128) = v68;
                *(_OWORD *)(v59 + 144) = v67;
                v69 = v58[15];
                v71 = v58[12];
                v70 = v58[13];
                *(_OWORD *)(v59 + 224) = v58[14];
                *(_OWORD *)(v59 + 240) = v69;
                *(_OWORD *)(v59 + 192) = v71;
                *(_OWORD *)(v59 + 208) = v70;
                v58[14] = 0u;
                v58[15] = 0u;
                v58[12] = 0u;
                v58[13] = 0u;
                v58[10] = 0u;
                v58[11] = 0u;
                v58[8] = 0u;
                v58[9] = 0u;
                v58[6] = 0u;
                v58[7] = 0u;
                v58[4] = 0u;
                v58[5] = 0u;
                v58[2] = 0u;
                v58[3] = 0u;
                *v58 = 0u;
                v58[1] = 0u;
                *(_BYTE *)v58 = 0;
                CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), *(const void **)(v59 + 40), (const void *)(i - v55 + 1));
                for (j = *(_QWORD *)(v59 + 8); j; j = *(_QWORD *)(j + 176))
                  *(_QWORD *)(j + 152) = i - v55;
              }
            }
            else
            {
              ++v55;
            }
          }
        }
        v73 = Count - v55;
        C3DArraySetCount(*(_DWORD **)(a1 + 24), v73);
        if (v73 <= 64)
          v74 = 64;
        else
          v74 = v73;
        C3DArraySetCapacity(*(_QWORD *)(a1 + 24), v74);
        *(_DWORD *)(a1 + 40) = 0;
      }
    }
  }
  if (!C3DAnimationNodeGetParent((uint64_t)a2))
  {
    Player = C3DAnimationNodeGetPlayer((uint64_t)a2);
    if (Player)
      C3DAnimationPlayerRemoveAnimationNode(Player, a2);
    C3DAnimationNodeSetAnimationManager((uint64_t)a2, 0);
    CFSetRemoveValue(*(CFMutableSetRef *)(a1 + 56), a2);
  }
}

uint64_t C3DAnimationManagerPushEvent(_QWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  id *Owner;
  id *ObjCWrapper;
  id *Animation;
  id *v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  char **v15;

  Owner = (id *)C3DAnimationNodeGetOwner(a3);
  ObjCWrapper = Owner;
  if (Owner)
  {
    if (CFTypeIsC3DEntity(Owner))
      ObjCWrapper = C3DEntityGetObjCWrapper(ObjCWrapper);
    else
      ObjCWrapper = 0;
  }
  Animation = (id *)C3DAnimationNodeGetAnimation(a3);
  v11 = C3DEntityGetObjCWrapper(Animation);
  v12 = C3DAllocatorNew(a1[14]);
  result = objc_msgSend(v11, "userAnimation");
  *((_QWORD *)v12 + 1) = result;
  *((_QWORD *)v12 + 2) = ObjCWrapper;
  v12[24] = a4;
  *(_QWORD *)v12 = a2;
  *((_QWORD *)v12 + 4) = 0;
  v14 = a1[13];
  if (v14)
    v15 = (char **)(v14 + 32);
  else
    v15 = (char **)(a1 + 12);
  *v15 = v12;
  a1[13] = v12;
  return result;
}

double C3DAnimationManagerGetSystemTime(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationNode_cold_4(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(double *)(a1 + 144);
}

void C3DAnimationManagerSetSystemTime(uint64_t a1, double a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DAnimationManagerSetSystemTime_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(double *)(a1 + 144) = a2;
}

void _C3DAnimationManagerUpdateConstantCount(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationNode_cold_4(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = *(_DWORD *)(a1 + 172) + a2;
  *(_DWORD *)(a1 + 172) = v12;
  if (v12 < 0)
  {
    v13 = scn_default_log();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerUpdateConstantCount_cold_1(v13, v14, v15, v16, v17, v18, v19, v20);
  }
}

uint64_t C3DAnimationManagerSetPausedForEditing(uint64_t result, char a2)
{
  *(_BYTE *)(result + 91) = a2;
  return result;
}

void C3DAnimationManagerApplyAnimations(uint64_t a1, double a2, double a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD v17[5];

  if (!a1)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationNode_cold_4(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  *(_BYTE *)(a1 + 88) = 1;
  *(double *)(a1 + 136) = a3;
  *(double *)(a1 + 144) = a2;
  v14 = *(_QWORD *)(a1 + 24);
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 3221225472;
  v17[2] = __C3DAnimationManagerApplyAnimations_block_invoke;
  v17[3] = &__block_descriptor_40_e13_v24__0q8r_v16l;
  v17[4] = a1;
  C3DArrayApply(v14, (uint64_t)v17);
  CFSetApplyFunction(*(CFSetRef *)(a1 + 56), (CFSetApplierFunction)_updateTopLevelAnimationTiming, (void *)a1);
  *(_BYTE *)(a1 + 88) = 0;
  v15 = *(_QWORD **)(a1 + 96);
  if (v15)
  {
    do
    {
      v16 = (_QWORD *)v15[4];
      (*(void (**)(void))(*v15 + 16))();
      v15[4] = 0;
      C3DAllocatorDelete(*(_QWORD *)(a1 + 112), (unint64_t)v15);
      *(_QWORD *)(a1 + 96) = v16;
      v15 = v16;
    }
    while (v16);
  }
  *(_QWORD *)(a1 + 104) = 0;
  C3DAnimationManagerTriggerCallbacks(a1);
}

void _C3DAnimationManagerApplyStack(uint64_t a1, uint64_t a2)
{
  __n128 *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  _BOOL4 v6;
  uint64_t v7;
  float WeightAtTime;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t ValuePtrAtIndex;
  NSObject *v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, __int128 *, uint64_t, _QWORD, _QWORD);
  uint64_t Target;
  uint64_t TargetAddress;
  uint64_t v29;
  unsigned __int8 v30;
  _OWORD *v31;
  _OWORD *v32;
  BOOL v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  BOOL v38;
  uint64_t v39;
  char v40;
  int v41;
  float v42;
  __n128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  NSObject *v47;
  char v48;
  uint64_t Animation;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __n128 v54;
  uint64_t v55;
  int v56;
  int v57;
  _BOOL4 v58;
  uint64_t v61;
  uint64_t v62;
  __n128 *v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  float v76;
  _QWORD v77[3];

  v2 = (__n128 *)a2;
  v3 = a1;
  *(_QWORD *)((char *)&v77[1] + 4) = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a2 + 48))
  {
    v4 = *(_QWORD *)(a2 + 8);
    if (v4)
    {
      v5 = 1;
      do
      {
        if ((*(_WORD *)(v4 + 121) & 0x804) != 0)
        {
          v6 = 1;
        }
        else
        {
          v7 = *(_QWORD *)(v4 + 16);
          v6 = !_C3DAnimationManagerUpdateRelativeTimeOfAnimation(v3, v4);
          if ((*(_BYTE *)(v4 + 121) & 0x20) != 0)
          {
            WeightAtTime = C3DAnimationNodeGetWeightAtTime(v4, *(float *)(v4 + 60));
            *(float *)(v4 + 56) = WeightAtTime;
            if (WeightAtTime != 0.0)
            {
              v9 = *(_QWORD *)(v7 + 168);
              v76 = *(float *)(v4 + 72) * *(float *)(v7 + 72);
              v61 = *(unsigned int *)(v9 + 20);
              v10 = C3DPreviousKeyFrameIndexForTime(*(float **)(v9 + 56), *(_DWORD *)(v9 + 16), &v76);
              if (v10 + 1 < *(_DWORD *)(v9 + 16) - 1)
                v11 = v10 + 1;
              else
                v11 = *(_DWORD *)(v9 + 16) - 1;
              v62 = v9;
              v12 = *(_QWORD *)(v9 + 56);
              v13 = *(float *)(v12 + 4 * v10);
              v14 = *(float *)(v12 + 4 * v11) - v13;
              v58 = v6;
              if (v14 == 0.0)
                v15 = 0.0;
              else
                v15 = (float)(v76 - v13) / v14;
              v76 = v15;
              v16 = *(_QWORD *)(v9 + 64);
              v17 = *(_DWORD *)(v9 + 24);
              v74 = 0u;
              v75 = 0u;
              v72 = 0u;
              v73 = 0u;
              if ((_DWORD)v61)
              {
                v18 = 0;
                v19 = v16 + v17 * v11;
                v20 = v16 + v17 * v10;
                do
                {
                  v21 = *(int *)(*(_QWORD *)(v4 + 224) + 4 * v18);
                  v22 = *(unsigned __int8 *)(*(_QWORD *)(v62 + 40) + v18);
                  if ((_DWORD)v21 != -1)
                  {
                    ValuePtrAtIndex = C3DArrayGetValuePtrAtIndex(v2[3].n128_i64[1], v21);
                    if (!*(_QWORD *)ValuePtrAtIndex)
                    {
                      v24 = scn_default_log();
                      if (os_log_type_enabled(v24, OS_LOG_TYPE_FAULT))
                        _C3DAnimationManagerApplyStack_cold_2((uint8_t *)&v64, (__int128 *)((char *)&v64 + 4), v24);
                    }
                    (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, __int128 *, double))(*(_QWORD *)(v62 + 48) + 8 * v18))(v20, v19, 0, 0, 0, 0, &v72, v76);
                    if (*(float *)(v4 + 56) < 1.0)
                    {
                      v70 = 0u;
                      v71 = 0u;
                      v68 = 0u;
                      v69 = 0u;
                      v25 = *(_QWORD *)ValuePtrAtIndex;
                      C3DModelValueStorageUpdatePresentationValueInNeeded(*(_QWORD *)(v3 + 16), *(_QWORD *)ValuePtrAtIndex);
                      v26 = *(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, _QWORD, _QWORD))(v25 + 136);
                      Target = C3DModelTargetGetTarget(*(_QWORD *)(v25 + 24));
                      TargetAddress = C3DModelTargetGetTargetAddress(*(_QWORD *)(v25 + 24));
                      v29 = Target;
                      v2 = (__n128 *)a2;
                      v26(v29, TargetAddress, &v68, v22, *(char *)(ValuePtrAtIndex + 8), *(unsigned __int8 *)(ValuePtrAtIndex + 9));
                      v3 = a1;
                      (*(void (**)(__int128 *, __int128 *, _QWORD, _QWORD, _QWORD, _QWORD, __int128 *, double))(ValuePtrAtIndex + 16))(&v68, &v72, 0, 0, 0, 0, &v72, *(float *)(v4 + 56));
                    }
                    C3DModelValueStorageUpdatePresentationValueWithBytes(*(_QWORD *)(v3 + 16), *(uint64_t **)ValuePtrAtIndex, *(char *)(ValuePtrAtIndex + 8), *(unsigned __int8 *)(ValuePtrAtIndex + 9), (uint64_t)&v72, v22);
                  }
                  v30 = (v22 + 15) & 0xF0;
                  v19 += v30;
                  v20 += v30;
                  ++v18;
                }
                while (v61 != v18);
              }
              v6 = v58;
            }
          }
        }
        v5 &= v6;
        v4 = *(_QWORD *)(v4 + 176);
      }
      while (v4);
    }
    else
    {
      v5 = 1;
    }
    if (v2[15].n128_u8[1] != v5)
    {
      v2[15].n128_u8[1] = v5;
      v38 = v5 == 0;
      goto LABEL_74;
    }
    return;
  }
  *(_BYTE *)(a2 + 240) = 0;
  v31 = (_OWORD *)(a2 + 64);
  v32 = *(_OWORD **)(a2 + 32);
  v33 = *(_BYTE *)(a2 + 128) != 0;
  if (*(_BYTE *)(a2 + 128))
  {
    v34 = v32[3];
    *(_OWORD *)(a2 + 144) = v32[2];
    *(_OWORD *)(a2 + 160) = v34;
    v35 = v32[4];
    v36 = v32[5];
    v37 = v32[7];
    *(_OWORD *)(a2 + 208) = v32[6];
    *(_OWORD *)(a2 + 224) = v37;
    *(_OWORD *)(a2 + 176) = v35;
    *(_OWORD *)(a2 + 192) = v36;
  }
  else
  {
    memcpy((void *)(a2 + 64), v32 + 2, *((__int16 *)v32 + 65));
  }
  v39 = v2->n128_i64[1];
  if (!v39)
  {
    LOBYTE(v41) = 1;
    goto LABEL_71;
  }
  v40 = 0;
  v63 = v2 + 9;
  v41 = 1;
  do
  {
    if ((*(_WORD *)(v39 + 121) & 0x804) == 0)
    {
      v41 &= !_C3DAnimationManagerUpdateRelativeTimeOfAnimation(v3, v39);
      if ((*(_BYTE *)(v39 + 121) & 0x20) != 0)
      {
        v42 = C3DAnimationNodeGetWeightAtTime(v39, *(float *)(v39 + 60));
        *(float *)(v39 + 56) = v42;
        if (v42 != 0.0)
        {
          v43.n128_u32[1] = 0;
          v43.n128_u64[1] = 0;
          v74 = 0u;
          v75 = 0u;
          v72 = 0u;
          v73 = 0u;
          v70 = 0u;
          v71 = 0u;
          v68 = 0u;
          v69 = 0u;
          v43.n128_u32[0] = *(_DWORD *)(v39 + 56);
          if (v43.n128_f32[0] >= 1.0)
          {
            v46 = a2;
          }
          else
          {
            if (v33)
            {
              C3DTransformGetMatrix((uint64_t)v63, (uint64_t)&v64);
              v44 = v65;
              *v31 = v64;
              v31[1] = v44;
              v45 = v67;
              v31[2] = v66;
              v31[3] = v45;
            }
            v46 = a2;
            __memcpy_chk();
            v33 = 0;
          }
          if (*(_BYTE *)(v46 + 128)
            && ((*(_WORD *)(*(_QWORD *)(v39 + 16) + 84) & 2) != 0 || (*(_BYTE *)(v39 + 122) & 0x10) != 0))
          {
            C3DTransformGetValue((uint64_t)v63, v31, *(unsigned __int8 *)(*(_QWORD *)(v39 + 24) + 36), *(char *)(*(_QWORD *)(v39 + 24) + 34), *(unsigned __int8 *)(*(_QWORD *)(v39 + 24) + 35));
          }
          if (!v3)
          {
            v47 = scn_default_log();
            if (os_log_type_enabled(v47, OS_LOG_TYPE_FAULT))
              _C3DAnimationManagerApplyStack_cold_1((uint8_t *)&v76, v77, v47);
          }
          if ((*(_BYTE *)(v39 + 121) & 0x20) != 0)
          {
            Animation = C3DAnimationNodeGetAnimation(v39);
            v50 = Animation;
            v51 = *(_QWORD *)(v39 + 112);
            if (v51 && *(_DWORD *)v51)
            {
              C3DValueInitFrom(*(_QWORD *)(v51 + 24), v31);
              C3DValueGetBytes(*(_QWORD *)(*(_QWORD *)(v39 + 112) + 24));
              v48 = C3DAnimationEvaluate(v50);
              C3DValueConcat(*(_QWORD *)(*(_QWORD *)(v39 + 112) + 8), *(_QWORD *)(*(_QWORD *)(v39 + 112) + 24), *(_QWORD *)(*(_QWORD *)(v39 + 112) + 24));
              C3DValueCopyTo(*(_QWORD *)(*(_QWORD *)(v39 + 112) + 24), v31);
            }
            else
            {
              v48 = C3DAnimationEvaluate(Animation);
            }
          }
          else
          {
            v48 = 0;
          }
          v40 |= v48;
          if ((v40 & 1) != 0)
          {
            if (*(_BYTE *)(a2 + 128))
            {
              *(_BYTE *)(a2 + 240) |= *(_BYTE *)(v39 + 120);
              C3DTransformSetValue(v63, v31, *(unsigned __int8 *)(*(_QWORD *)(v39 + 24) + 36), *(char *)(*(_QWORD *)(v39 + 24) + 34), *(unsigned __int8 *)(*(_QWORD *)(v39 + 24) + 35), v43);
              if (*(float *)(v39 + 56) >= 1.0)
              {
                v33 = 1;
                goto LABEL_66;
              }
            }
            else
            {
              if (*(float *)(v39 + 56) >= 1.0)
                goto LABEL_66;
              if (!v33)
                goto LABEL_63;
            }
            C3DTransformGetMatrix((uint64_t)v63, (uint64_t)&v64);
            v52 = v65;
            *v31 = v64;
            v31[1] = v52;
            v53 = v67;
            v31[2] = v66;
            v31[3] = v53;
LABEL_63:
            __memcpy_chk();
            (*(void (**)(__int128 *, __int128 *, _QWORD, _QWORD, _QWORD, _QWORD, _OWORD *, double))(a2 + 248))(&v72, &v68, 0, 0, 0, 0, v31, *(float *)(v39 + 56));
            if (*(_BYTE *)(a2 + 128))
              C3DTransformSetValue(v63, v31, *(unsigned __int8 *)(*(_QWORD *)(a2 + 24) + 36), *(char *)(*(_QWORD *)(a2 + 24) + 34), *(unsigned __int8 *)(*(_QWORD *)(a2 + 24) + 35), v54);
            v33 = 0;
          }
        }
      }
    }
LABEL_66:
    v39 = *(_QWORD *)(v39 + 176);
  }
  while (v39);
  v2 = (__n128 *)a2;
  v32 = *(_OWORD **)(a2 + 32);
  if ((v40 & 1) == 0)
  {
LABEL_71:
    C3DModelValueStorageUpdatePresentationValueFromModelValue(*(_QWORD *)(v3 + 16), (uint64_t)v32);
    goto LABEL_72;
  }
  v55 = *(_QWORD *)(v3 + 16);
  if (*(_BYTE *)(a2 + 128))
    C3DModelValueStorageUpdatePresentationValueWithTransform(v55, *(uint64_t **)(a2 + 32), v63, *(char *)(a2 + 240));
  else
    C3DModelValueStorageUpdatePresentationValueWithBytes(v55, *(uint64_t **)(a2 + 32), 0, 0, (uint64_t)v31, *(unsigned __int8 *)(a2 + 242));
LABEL_72:
  v56 = v41 & 1;
  if (v2[15].n128_u8[1] != v56)
  {
    v2[15].n128_u8[1] = v56;
    v38 = v56 == 0;
LABEL_74:
    if (v38)
      v57 = -1;
    else
      v57 = 1;
    _C3DAnimationManagerUpdateConstantCount(v3, v57);
  }
}

uint64_t _updateTopLevelAnimationTiming(uint64_t result, uint64_t a2)
{
  if (*(_QWORD *)(result + 152) == -1)
    return _C3DAnimationManagerUpdateRelativeTimeOfAnimation(a2, result);
  return result;
}

void C3DAnimationManagerApplyAnimationsForTarget(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const void *TargetAddress;
  const void *Value;
  uint64_t ValuePtrAtIndex;

  if (!a1 && (v4 = scn_default_log(), os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)))
  {
    _C3DAnimationManagerAddAnimationNode_cold_4(v4, v5, v6, v7, v8, v9, v10, v11);
    if (a2)
      goto LABEL_4;
  }
  else if (a2)
  {
LABEL_4:
    *(_BYTE *)(a1 + 88) = 1;
    v12 = (_BYTE *)(a1 + 88);
    *(_BYTE *)(a1 + 90) = 1;
    v13 = (_BYTE *)(a1 + 90);
    goto LABEL_10;
  }
  v14 = scn_default_log();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    C3DAnimationManagerApplyAnimationsForTarget_cold_1(v14, v15, v16, v17, v18, v19, v20, v21);
  *(_BYTE *)(a1 + 88) = 1;
  v12 = (_BYTE *)(a1 + 88);
  *(_BYTE *)(a1 + 90) = 1;
  v13 = (_BYTE *)(a1 + 90);
  v22 = scn_default_log();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_FAULT))
    C3DAnimationManagerApplyAnimationsForTarget_cold_1(v22, v23, v24, v25, v26, v27, v28, v29);
LABEL_10:
  TargetAddress = (const void *)C3DModelTargetGetTargetAddress(a2);
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), TargetAddress);
  if (Value)
  {
    ValuePtrAtIndex = C3DArrayGetValuePtrAtIndex(*(_QWORD *)(a1 + 24), (uint64_t)Value - 1);
    if (ValuePtrAtIndex)
    {
      *(_QWORD *)(*(_QWORD *)(ValuePtrAtIndex + 32) + 152) = 0;
      _C3DAnimationManagerApplyStack(a1, ValuePtrAtIndex);
    }
  }
  *v12 = 0;
  *v13 = 0;
}

BOOL C3DAnimationManagerIsEmpty(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DAnimationManagerSetSystemTime_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  v10 = *(_QWORD *)(a1 + 24);
  return !v10 || C3DArrayGetCount(v10) <= *(int *)(a1 + 40);
}

BOOL C3DAnimationManagerNeedsRedraw(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DAnimationManagerSetSystemTime_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(int *)(a1 + 160) < 1 || (v12 = C3DIsRunningInEditor(), result = 1, v12) && a2)
  {
    v14 = *(_QWORD *)(a1 + 24);
    if (v14)
      v15 = C3DArrayGetCount(v14) - *(int *)(a1 + 40);
    else
      v15 = 0;
    if (v15 < *(int *)(a1 + 172))
    {
      v16 = scn_default_log();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
        C3DAnimationManagerNeedsRedraw_cold_1(v16, v17, v18, v19, v20, v21, v22, v23);
    }
    return v15 > *(int *)(a1 + 172);
  }
  return result;
}

BOOL C3DAnimationManagerContainsAnimationForObject(uint64_t a1, const void *a2)
{
  return a2 && CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 48), a2) != 0;
}

void C3DAnimationManagerAddAnimationPlayerForKey(uint64_t a1, uint64_t a2, float32x4_t *a3, void *a4)
{
  const void *Animation;
  const void *v9;
  CFTypeID v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __CFDictionary *AnimationPerKeyDictionaryForObject;
  const void *v63;
  const void *v64;

  Animation = (const void *)C3DAnimationPlayerGetAnimation(a2);
  if (!Animation)
    return;
  v9 = Animation;
  v10 = CFGetTypeID(Animation);
  if (C3DAnimationGroupGetTypeID() == v10)
  {
    if (!a1 && (v11 = scn_default_log(), os_log_type_enabled(v11, OS_LOG_TYPE_FAULT)))
    {
      _C3DAnimationManagerAddAnimationNode_cold_4(v11, v12, v13, v14, v15, v16, v17, v18);
      if (a3)
        goto LABEL_8;
    }
    else if (a3)
    {
      goto LABEL_8;
    }
    v19 = scn_default_log();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerGetAnimationPerKeyDictionaryForObject_cold_1(v19, v20, v21, v22, v23, v24, v25, v26);
LABEL_8:
    if (!a4)
    {
      v27 = scn_default_log();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_FAULT))
        C3DAnimationManagerAddAnimationPlayerForKey_cold_1(v27, v28, v29, v30, v31, v32, v33, v34);
    }
    _C3DAnimationManagerRemoveAnimationForKey(a1, a3, a4);
    v35 = C3DAnimationNodeCreateWithAnimationGroupAndAddToAnimationManager(a1, v9, a3, a4);
    if (v35)
    {
      v36 = (_QWORD *)v35;
      C3DAnimationNodeSetOwner(v35, (uint64_t)a3);
      C3DAnimationNodeSetAnimationManager((uint64_t)v36, a1);
      CFSetAddValue(*(CFMutableSetRef *)(a1 + 56), v36);
LABEL_24:
      AnimationPerKeyDictionaryForObject = (__CFDictionary *)_C3DAnimationManagerGetAnimationPerKeyDictionaryForObject(a1, a3, 1);
      CFDictionarySetValue(AnimationPerKeyDictionaryForObject, a4, v36);
      if ((C3DAnimationGetIsSceneTimeBased((uint64_t)v9) & 1) == 0)
        C3DTransactionAddAnimationNode(v36);
      CFRelease(v36);
      goto LABEL_27;
    }
    return;
  }
  if (C3DAnimationClusterGetTypeID() != v10)
  {
    v63 = C3DAnimationCopyTarget((uint64_t)v9, a3);
    if (v63)
    {
      v64 = v63;
      v36 = _C3DAnimationManagerAddAnimationForKey(a1, v9, v63, a3, a4);
      CFRelease(v64);
      if (v36)
      {
LABEL_27:
        C3DAnimationPlayerAddAnimationNode(a2, v36);
        if ((C3DAnimationPlayerGetPaused(a2) & 1) == 0)
          C3DAnimationManagerPlayAnimationNode(a1, (uint64_t)v36);
        return;
      }
    }
    return;
  }
  if (!a1 && (v37 = scn_default_log(), os_log_type_enabled(v37, OS_LOG_TYPE_FAULT)))
  {
    _C3DAnimationManagerAddAnimationNode_cold_4(v37, v38, v39, v40, v41, v42, v43, v44);
    if (a3)
      goto LABEL_19;
  }
  else if (a3)
  {
    goto LABEL_19;
  }
  v45 = scn_default_log();
  if (os_log_type_enabled(v45, OS_LOG_TYPE_FAULT))
    _C3DAnimationManagerGetAnimationPerKeyDictionaryForObject_cold_1(v45, v46, v47, v48, v49, v50, v51, v52);
LABEL_19:
  if (!a4)
  {
    v53 = scn_default_log();
    if (os_log_type_enabled(v53, OS_LOG_TYPE_FAULT))
      C3DAnimationManagerAddAnimationPlayerForKey_cold_1(v53, v54, v55, v56, v57, v58, v59, v60);
  }
  _C3DAnimationManagerRemoveAnimationForKey(a1, a3, a4);
  v61 = C3DAnimationNodeCreateWithAnimationCluster(a1, v9, (uint64_t)a3, a4);
  if (v61)
  {
    v36 = (_QWORD *)v61;
    C3DAnimationNodeSetOwner(v61, (uint64_t)a3);
    C3DAnimationNodeSetAnimationManager((uint64_t)v36, a1);
    __C3DAnimationManagerAddAnimationNodeToAnimationStackWithKey(a1, v36, a3, 0);
    goto LABEL_24;
  }
}

_QWORD *_C3DAnimationManagerAddAnimationForKey(uint64_t a1, const void *a2, const void *a3, void *key, void *a5)
{
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  __CFDictionary *AnimationPerKeyDictionaryForObject;

  if (!a1 && (v10 = scn_default_log(), os_log_type_enabled(v10, OS_LOG_TYPE_FAULT)))
  {
    _C3DAnimationManagerAddAnimationNode_cold_4(v10, v11, v12, v13, v14, v15, v16, v17);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v18 = scn_default_log();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_FAULT))
    _C3DAnimationManagerAddAnimationForKey_cold_4(v18, v19, v20, v21, v22, v23, v24, v25);
LABEL_6:
  if (!a3 && (v26 = scn_default_log(), os_log_type_enabled(v26, OS_LOG_TYPE_FAULT)))
  {
    C3DAnimationManagerApplyAnimationsForTarget_cold_1(v26, v27, v28, v29, v30, v31, v32, v33);
    if (key)
      goto LABEL_11;
  }
  else if (key)
  {
    goto LABEL_11;
  }
  v34 = scn_default_log();
  if (os_log_type_enabled(v34, OS_LOG_TYPE_FAULT))
    _C3DAnimationManagerGetAnimationPerKeyDictionaryForObject_cold_1(v34, v35, v36, v37, v38, v39, v40, v41);
LABEL_11:
  if (!a5)
  {
    v42 = scn_default_log();
    if (os_log_type_enabled(v42, OS_LOG_TYPE_FAULT))
      C3DAnimationManagerAddAnimationPlayerForKey_cold_1(v42, v43, v44, v45, v46, v47, v48, v49);
  }
  _C3DAnimationManagerRemoveAnimationForKey(a1, key, a5);
  v50 = C3DAnimationNodeCreateWithAnimationAndAddToAnimationManager(a1, a2, a3, a5);
  v51 = (_QWORD *)v50;
  if (v50)
  {
    C3DAnimationNodeSetOwner(v50, (uint64_t)key);
    C3DAnimationNodeSetAnimationManager((uint64_t)v51, a1);
    AnimationPerKeyDictionaryForObject = (__CFDictionary *)_C3DAnimationManagerGetAnimationPerKeyDictionaryForObject(a1, key, 1);
    CFDictionarySetValue(AnimationPerKeyDictionaryForObject, a5, v51);
    if ((C3DAnimationGetIsSceneTimeBased((uint64_t)a2) & 1) == 0)
      C3DTransactionAddAnimationNode(v51);
    CFRelease(v51);
  }
  return v51;
}

uint64_t C3DAnimationManagerPlayAnimationNode(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t Animation;
  double v22;
  double v23;
  double PauseTime;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t ValuePtrAtIndex;
  uint64_t result;
  uint64_t v30;
  CFIndex i;
  const __CFArray *ChildAtIndex;

  if (!a2 && (v4 = scn_default_log(), os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)))
  {
    C3DGeometryTrackNode_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
    if (a1)
      goto LABEL_6;
  }
  else if (a1)
  {
    goto LABEL_6;
  }
  v12 = scn_default_log();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    _C3DAnimationManagerAddAnimationNode_cold_4(v12, v13, v14, v15, v16, v17, v18, v19);
LABEL_6:
  v20 = *(_DWORD *)(a2 + 121);
  *(_DWORD *)(a2 + 121) = v20 & 0xFFFBFFFF;
  C3DAnimationNodeSetPaused(a2, 0);
  Animation = C3DAnimationNodeGetAnimation(a2);
  C3DTransactionGetAtomicTime();
  v23 = v22;
  PauseTime = C3DAnimationNodeGetPauseTime(Animation);
  if (C3DAnimationGetIsSceneTimeBased(Animation))
  {
    *(double *)(a2 + 80) = C3DAnimationNodeGetPauseTime(Animation);
  }
  else
  {
    v25 = v23 + PauseTime;
    if ((v20 & 0x200000) == 0 || *(double *)(a2 + 128) == 0.0)
    {
      C3DAnimationNodeSetStartTime(a2, v25);
      if ((C3DAnimationGetIsSceneTimeBased(Animation) & 1) == 0 && (C3DAnimationGetIsImplicit(Animation) & 1) == 0)
        C3DAnimationNodeRestart(a2);
    }
    else
    {
      v26 = C3DAnimationNodeGetPauseTime(a2);
      C3DAnimationNodeTimeJump(a2, v25 - v26);
      *(_QWORD *)(a2 + 128) = 0;
    }
  }
  *(_QWORD *)(a2 + 104) = 0;
  *(_DWORD *)(a2 + 121) &= 0xFFFFFFF3;
  *(_DWORD *)(a2 + 72) = -1082130432;
  v27 = *(_QWORD *)(a2 + 152);
  if (v27 != -1)
  {
    ValuePtrAtIndex = C3DArrayGetValuePtrAtIndex(*(_QWORD *)(a1 + 24), v27);
    C3DAnimationStackSetConstant(ValuePtrAtIndex, 0, a1);
  }
  result = (uint64_t)C3DAnimationNodeGetChildCount(a2);
  if (result >= 1)
  {
    v30 = result;
    for (i = 0; i != v30; ++i)
    {
      ChildAtIndex = C3DAnimationNodeGetChildAtIndex(a2, i);
      result = C3DAnimationManagerPlayAnimationNode(a1, ChildAtIndex);
    }
  }
  return result;
}

_QWORD *C3DAnimationManagerAddAnimationForKey(uint64_t a1, const void *a2, const void *a3, void *a4, void *a5)
{
  _QWORD *result;

  result = _C3DAnimationManagerAddAnimationForKey(a1, a2, a3, a4, a5);
  if (result)
    return (_QWORD *)C3DAnimationManagerPlayAnimationNode(a1, (uint64_t)result);
  return result;
}

const void *_resolveAnimationGroupTargets(uint64_t a1, const void *a2, uint64_t a3, const __CFArray *a4)
{
  uint64_t v6;
  const void *v7;
  CFIndex v8;
  int v9;
  char v10;
  const void *AnimationAtIndex;
  const void *v12;
  uint64_t v13;
  CFTypeID v14;
  const __CFArray *KeyPath;
  uint64_t v16;
  const void *v17;
  uint64_t v18;
  const void *v19;
  uint64_t TypeID;
  uint64_t Name;
  const void *v22;
  const void *ValueAtIndex;
  uint64_t RootNode;
  void *v25;
  const __CFArray *v26;
  uint64_t v27;
  uint64_t Listener;
  const void *v29;
  uint64_t v30;
  CFTypeID v31;
  BOOL v32;
  int v33;
  BOOL v34;
  int v35;
  const void *v37;
  uint64_t v38;
  uint64_t v39;
  CFIndex AnimationCount;
  _QWORD v42[6];
  uint64_t v43;
  int *v44;
  uint64_t v45;
  int v46;

  v6 = a1;
  AnimationCount = C3DAnimationGroupGetAnimationCount(a1);
  if (AnimationCount < 1)
    return 0;
  v7 = 0;
  v8 = 0;
  v9 = 1;
  v10 = 1;
  v39 = v6;
  do
  {
    AnimationAtIndex = C3DAnimationGroupGetAnimationAtIndex(v6, v8);
    if (C3DAnimationIsGroup(AnimationAtIndex))
    {
      v12 = (const void *)_resolveAnimationGroupTargets(AnimationAtIndex, a2, a3, a4);
      v13 = (uint64_t)v12;
      if (v12)
      {
        if ((v10 & 1) != 0)
        {
          v14 = CFGetTypeID(v12);
          if (v14 == C3DNodeGetTypeID())
          {
            v7 = (const void *)_commonAncessor(a4, v7, v13);
            v10 = 1;
            goto LABEL_45;
          }
        }
      }
      else if ((C3DWasLinkedBeforeMajorOSYear2018() & 1) == 0)
      {
        goto LABEL_45;
      }
      v10 = 0;
      if (v7)
        v34 = v7 == (const void *)v13;
      else
        v34 = 1;
      v35 = v34;
      v9 &= v35;
      v7 = (const void *)v13;
    }
    else
    {
      KeyPath = (const __CFArray *)C3DAnimationGetKeyPath((uint64_t)AnimationAtIndex);
      v16 = (uint64_t)a2;
      v17 = a2;
      v18 = a3;
      v19 = (const void *)C3DModelDescriptionResolveRootComponentInPath(KeyPath, v17, a3, 0);
      if (KeyPath)
      {
        if (CFArrayGetCount(KeyPath) >= 1)
        {
          if (v19)
          {
            TypeID = C3DNodeGetTypeID();
            if (TypeID == CFGetTypeID(v19))
            {
              Name = C3DNodeGetName((uint64_t)v19);
              if (Name)
              {
                v38 = Name;
                v22 = (const void *)objc_msgSend(CFSTR("/"), "stringByAppendingString:", Name);
                ValueAtIndex = CFArrayGetValueAtIndex(KeyPath, 0);
                v37 = v22;
                if (!CFEqual(v22, ValueAtIndex))
                {
                  v43 = 0;
                  v44 = (int *)&v43;
                  v45 = 0x2020000000;
                  v46 = 0;
                  RootNode = C3DSceneGetRootNode(v16);
                  if (RootNode)
                  {
                    v42[0] = MEMORY[0x1E0C809B0];
                    v42[1] = 3221225472;
                    v42[2] = ___resolveAnimationGroupTargets_block_invoke;
                    v42[3] = &unk_1EA59F378;
                    v42[4] = &v43;
                    v42[5] = v38;
                    C3DNodeApplyHierarchy(RootNode, (uint64_t)v42);
                  }
                  if (v44[6] <= 1)
                  {
                    v25 = (void *)-[__CFArray mutableCopy](KeyPath, "mutableCopy");
                    objc_msgSend(v25, "replaceObjectAtIndex:withObject:", 0, v37);
                    C3DAnimationSetKeyPath((uint64_t)AnimationAtIndex, v25);

                  }
                  _Block_object_dispose(&v43, 8);
                }
              }
            }
          }
        }
      }
      v26 = (const __CFArray *)C3DAnimationGetKeyPath((uint64_t)AnimationAtIndex);
      if (v26)
      {
        if (CFArrayGetCount(v26) >= 1)
        {
          if (v19)
          {
            v27 = C3DGenericSourceGetTypeID();
            if (v27 == CFGetTypeID(v19))
            {
              Listener = C3DGenericSourceGetListener((uint64_t)v19);
              if (Listener)
              {
                v29 = (const void *)Listener;
                v30 = C3DMorphGetTypeID();
                if (v30 == CFGetTypeID(v29))
                  v19 = v29;
              }
            }
          }
        }
      }
      if (((v19 != 0) & v10) == 1 && (v31 = CFGetTypeID(v19), v31 == C3DNodeGetTypeID()))
      {
        v7 = (const void *)_commonAncessor(a4, v7, (uint64_t)v19);
        v10 = 1;
      }
      else
      {
        v10 = 0;
        if (v7)
          v32 = v7 == v19;
        else
          v32 = 1;
        v33 = v32;
        v9 &= v33;
        v7 = v19;
      }
      a3 = v18;
      a2 = (const void *)v16;
      v6 = v39;
    }
LABEL_45:
    ++v8;
  }
  while (AnimationCount != v8);
  if ((v9 & 1) == 0)
    return 0;
  return v7;
}

void sub_1DCD7F220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

const void *_resolveAnimationClusterTargets(uint64_t a1, const void *a2, uint64_t a3, const __CFArray *a4)
{
  uint64_t v4;
  uint64_t v7;
  const void *v8;
  char v9;
  char v10;
  const __CFArray *v11;
  const void *v12;
  uint64_t TypeID;
  uint64_t Name;
  uint64_t v16;
  const void *v17;
  const void *ValueAtIndex;
  uint64_t RootNode;
  void *v20;
  const void *v21;
  CFTypeRef v22;
  CFTypeID v23;
  BOOL v24;
  char v25;
  uint64_t v28;
  _QWORD v30[6];
  uint64_t v31;
  int *v32;
  uint64_t v33;
  int v34;

  v4 = *(unsigned int *)(*(_QWORD *)(a1 + 168) + 20);
  if (!(_DWORD)v4)
    return 0;
  v7 = 0;
  v8 = 0;
  v28 = 8 * v4;
  v9 = 1;
  v10 = 1;
  do
  {
    v11 = *(const __CFArray **)(*(_QWORD *)(*(_QWORD *)(a1 + 168) + 72) + v7);
    v12 = (const void *)C3DModelDescriptionResolveRootComponentInPath(v11, a2, a3, 0);
    if (v11)
    {
      if (CFArrayGetCount(v11) >= 1 && v12 != 0)
      {
        TypeID = C3DNodeGetTypeID();
        if (TypeID == CFGetTypeID(v12))
        {
          Name = C3DNodeGetName((uint64_t)v12);
          if (Name)
          {
            v16 = Name;
            v17 = (const void *)objc_msgSend(CFSTR("/"), "stringByAppendingString:", Name);
            ValueAtIndex = CFArrayGetValueAtIndex(v11, 0);
            if (!CFEqual(v17, ValueAtIndex))
            {
              v31 = 0;
              v32 = (int *)&v31;
              v33 = 0x2020000000;
              v34 = 0;
              RootNode = C3DSceneGetRootNode((uint64_t)a2);
              if (RootNode)
              {
                v30[0] = MEMORY[0x1E0C809B0];
                v30[1] = 3221225472;
                v30[2] = ___resolveAnimationClusterTargets_block_invoke;
                v30[3] = &unk_1EA59F378;
                v30[4] = &v31;
                v30[5] = v16;
                C3DNodeApplyHierarchy(RootNode, (uint64_t)v30);
              }
              if (v32[6] <= 1)
              {
                v20 = (void *)-[__CFArray mutableCopy](v11, "mutableCopy");
                objc_msgSend(v20, "replaceObjectAtIndex:withObject:", 0, v17);
                v21 = *(const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 168) + 72) + v7);
                if (v21 != v20)
                {
                  if (v21)
                  {
                    CFRelease(v21);
                    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 168) + 72) + v7) = 0;
                  }
                  if (v20)
                    v22 = CFRetain(v20);
                  else
                    v22 = 0;
                  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 168) + 72) + v7) = v22;
                }

              }
              _Block_object_dispose(&v31, 8);
            }
          }
        }
      }
    }
    if (v12 == 0 || (v10 & 1) == 0 || (v23 = CFGetTypeID(v12), v23 != C3DNodeGetTypeID()))
    {
      v10 = 0;
      if (v8)
        v24 = v8 == v12;
      else
        v24 = 1;
      v25 = v24;
      v9 &= v25;
      v8 = v12;
    }
    else
    {
      v8 = (const void *)_commonAncessor(a4, v8, (uint64_t)v12);
      v10 = 1;
    }
    v7 += 8;
  }
  while (v28 != v7);
  if ((v9 & 1) == 0)
    return 0;
  return v8;
}

void sub_1DCD7F4A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void C3DAnimationManagerAddAnimationToSceneForKey(uint64_t a1, const void *a2, const void *a3, uint64_t a4, void *a5)
{
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t RootNode;
  NSObject *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const __CFArray *Mutable;
  uint64_t TypeID;
  float32x4_t *v52;
  uint64_t v53;
  float32x4_t *v54;
  uint64_t *v55;

  if (!a1 && (v9 = scn_default_log(), os_log_type_enabled(v9, OS_LOG_TYPE_FAULT)))
  {
    _C3DAnimationManagerAddAnimationNode_cold_4(v9, v10, v11, v12, v13, v14, v15, v16);
    if (a3)
      goto LABEL_6;
  }
  else if (a3)
  {
    goto LABEL_6;
  }
  v17 = scn_default_log();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT))
    C3DSceneCreateHitTestResultsWithSegment_cold_2(v17, v18, v19, v20, v21, v22, v23, v24);
LABEL_6:
  if (!a2 && (v25 = scn_default_log(), os_log_type_enabled(v25, OS_LOG_TYPE_FAULT)))
  {
    _C3DAnimationManagerAddAnimationForKey_cold_4(v25, v26, v27, v28, v29, v30, v31, v32);
    if (a5)
      goto LABEL_11;
  }
  else if (a5)
  {
    goto LABEL_11;
  }
  v33 = scn_default_log();
  if (os_log_type_enabled(v33, OS_LOG_TYPE_FAULT))
    C3DAnimationManagerAddAnimationPlayerForKey_cold_1(v33, v34, v35, v36, v37, v38, v39, v40);
LABEL_11:
  RootNode = C3DSceneGetRootNode((uint64_t)a3);
  if (!RootNode)
  {
    v42 = scn_default_log();
    if (os_log_type_enabled(v42, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerGetAnimationPerKeyDictionaryForObject_cold_1(v42, v43, v44, v45, v46, v47, v48, v49);
  }
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  TypeID = C3DAnimationGroupGetTypeID();
  if (TypeID == CFGetTypeID(a2))
  {
    v52 = (float32x4_t *)_resolveAnimationGroupTargets((uint64_t)a2, a3, a4, Mutable);
  }
  else
  {
    v53 = C3DAnimationClusterGetTypeID();
    if (v53 == CFGetTypeID(a2))
      v52 = (float32x4_t *)_resolveAnimationClusterTargets((uint64_t)a2, a3, a4, Mutable);
    else
      v52 = 0;
  }
  if (v52)
    v54 = v52;
  else
    v54 = (float32x4_t *)RootNode;
  CFRelease(Mutable);
  v55 = (uint64_t *)C3DAnimationPlayerCreateWithAnimation(a2);
  C3DEntityAddAnimationForKey(v54, v55, a5);
  C3DAnimationPlayerPlay((uint64_t)v55);
  if (v55)
    CFRelease(v55);
}

void C3DAnimationManagerRemoveAllAnimationsForObject(uint64_t a1, void *key)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const __CFDictionary *AnimationPerKeyDictionaryForObject;
  const __CFDictionary *v21;
  const __CFDictionary *Copy;
  _QWORD v23[7];

  if (!a1 && (v4 = scn_default_log(), os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)))
  {
    _C3DAnimationManagerAddAnimationNode_cold_4(v4, v5, v6, v7, v8, v9, v10, v11);
    if (key)
      goto LABEL_6;
  }
  else if (key)
  {
    goto LABEL_6;
  }
  v12 = scn_default_log();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    C3DAnimationManagerRemoveAllAnimationsForObject_cold_1(v12, v13, v14, v15, v16, v17, v18, v19);
LABEL_6:
  AnimationPerKeyDictionaryForObject = (const __CFDictionary *)_C3DAnimationManagerGetAnimationPerKeyDictionaryForObject(a1, key, 0);
  if (AnimationPerKeyDictionaryForObject)
  {
    v21 = AnimationPerKeyDictionaryForObject;
    CFRetain(AnimationPerKeyDictionaryForObject);
    Copy = CFDictionaryCreateCopy(0, v21);
    v23[0] = MEMORY[0x1E0C809B0];
    v23[1] = 3221225472;
    v23[2] = __C3DAnimationManagerRemoveAllAnimationsForObject_block_invoke;
    v23[3] = &__block_descriptor_56_e15_v24__0r_v8r_v16l;
    v23[4] = a1;
    v23[5] = key;
    v23[6] = v21;
    C3DCFDictionaryApplyBlock(Copy, (uint64_t)v23);
    CFRelease(Copy);
    CFRelease(v21);
  }
}

void _C3DAnimationManagerRemoveAnimationsForKey(uint64_t a1, const void *a2, void *key, CFDictionaryRef theDict)
{
  const void *Value;

  Value = CFDictionaryGetValue(theDict, key);
  C3DAnimationManagerRemoveAnimationNode(a1, (uint64_t)Value);
  CFDictionaryRemoveValue(theDict, key);
  if (!CFDictionaryGetCount(theDict))
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 48), a2);
}

void C3DAnimationManagerChangeSpeedOfAnimationForKey(uint64_t a1, void *key, const void *a3, float a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const __CFDictionary *AnimationPerKeyDictionaryForObject;
  const void *Value;

  if (!a1 && (v8 = scn_default_log(), os_log_type_enabled(v8, OS_LOG_TYPE_FAULT)))
  {
    _C3DAnimationManagerAddAnimationNode_cold_4(v8, v9, v10, v11, v12, v13, v14, v15);
    if (key)
      goto LABEL_6;
  }
  else if (key)
  {
    goto LABEL_6;
  }
  v16 = scn_default_log();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
    _C3DAnimationManagerGetAnimationPerKeyDictionaryForObject_cold_1(v16, v17, v18, v19, v20, v21, v22, v23);
LABEL_6:
  if (!a3)
  {
    v24 = scn_default_log();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_FAULT))
      C3DAnimationManagerAddAnimationPlayerForKey_cold_1(v24, v25, v26, v27, v28, v29, v30, v31);
  }
  AnimationPerKeyDictionaryForObject = (const __CFDictionary *)_C3DAnimationManagerGetAnimationPerKeyDictionaryForObject(a1, key, 0);
  if (AnimationPerKeyDictionaryForObject)
  {
    Value = CFDictionaryGetValue(AnimationPerKeyDictionaryForObject, a3);
    if (Value)
      C3DAnimationNodeChangeSpeed((uint64_t)Value, a4);
  }
}

void C3DAnimationManagerFadeAndRemoveAllAnimationsForObject(uint64_t a1, void *key, double a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const __CFDictionary *AnimationPerKeyDictionaryForObject;
  const __CFDictionary *v23;
  _QWORD v24[5];

  if (a3 == 0.0)
  {
    C3DAnimationManagerRemoveAllAnimationsForObject(a1, key);
    return;
  }
  if (!a1 && (v6 = scn_default_log(), os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)))
  {
    _C3DAnimationManagerAddAnimationNode_cold_4(v6, v7, v8, v9, v10, v11, v12, v13);
    if (!key)
    {
LABEL_6:
      v14 = scn_default_log();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
        C3DAnimationManagerRemoveAllAnimationsForObject_cold_1(v14, v15, v16, v17, v18, v19, v20, v21);
    }
  }
  else if (!key)
  {
    goto LABEL_6;
  }
  AnimationPerKeyDictionaryForObject = (const __CFDictionary *)_C3DAnimationManagerGetAnimationPerKeyDictionaryForObject(a1, key, 0);
  if (AnimationPerKeyDictionaryForObject)
  {
    v23 = AnimationPerKeyDictionaryForObject;
    CFRetain(AnimationPerKeyDictionaryForObject);
    v24[0] = MEMORY[0x1E0C809B0];
    v24[1] = 3221225472;
    v24[2] = __C3DAnimationManagerFadeAndRemoveAllAnimationsForObject_block_invoke;
    v24[3] = &__block_descriptor_40_e15_v24__0r_v8r_v16l;
    *(double *)&v24[4] = a3;
    C3DCFDictionaryApplyBlock(v23, (uint64_t)v24);
    CFRelease(v23);
  }
}

void C3DAnimationManagerFadeAndRemoveAnimationForKey(uint64_t a1, void *key, void *a3, double a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const __CFDictionary *AnimationPerKeyDictionaryForObject;
  const __CFDictionary *v33;
  CFTimeInterval *Value;
  CFTimeInterval *v35;
  double v36;
  double v37;

  if (a4 == 0.0)
  {
    _C3DAnimationManagerRemoveAnimationForKey(a1, key, a3);
    return;
  }
  if (!a1 && (v8 = scn_default_log(), os_log_type_enabled(v8, OS_LOG_TYPE_FAULT)))
  {
    _C3DAnimationManagerAddAnimationNode_cold_4(v8, v9, v10, v11, v12, v13, v14, v15);
    if (!key)
    {
LABEL_6:
      v16 = scn_default_log();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
        _C3DAnimationManagerGetAnimationPerKeyDictionaryForObject_cold_1(v16, v17, v18, v19, v20, v21, v22, v23);
    }
  }
  else if (!key)
  {
    goto LABEL_6;
  }
  if (!a3)
  {
    v24 = scn_default_log();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_FAULT))
      C3DAnimationManagerAddAnimationPlayerForKey_cold_1(v24, v25, v26, v27, v28, v29, v30, v31);
  }
  AnimationPerKeyDictionaryForObject = (const __CFDictionary *)_C3DAnimationManagerGetAnimationPerKeyDictionaryForObject(a1, key, 0);
  if (AnimationPerKeyDictionaryForObject)
  {
    v33 = AnimationPerKeyDictionaryForObject;
    CFRetain(AnimationPerKeyDictionaryForObject);
    Value = (CFTimeInterval *)CFDictionaryGetValue(v33, a3);
    if (Value)
    {
      v35 = Value;
      Value[11] = CACurrentMediaTime();
      v36 = CACurrentMediaTime();
      v37 = 0.0001;
      if (a4 >= 0.0001)
        v37 = a4;
      v35[12] = v36;
      v35[13] = v37;
    }
    CFRelease(v33);
  }
}

const __CFDictionary *C3DAnimationManagerGetAnimationNodeForKey(uint64_t a1, void *key, const void *a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (!a1 && (v6 = scn_default_log(), os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)))
  {
    _C3DAnimationManagerAddAnimationNode_cold_4(v6, v7, v8, v9, v10, v11, v12, v13);
    if (key)
      goto LABEL_6;
  }
  else if (key)
  {
    goto LABEL_6;
  }
  v14 = scn_default_log();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    C3DAnimationManagerRemoveAllAnimationsForObject_cold_1(v14, v15, v16, v17, v18, v19, v20, v21);
LABEL_6:
  if (!a3)
  {
    v22 = scn_default_log();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_FAULT))
      C3DAnimationManagerAddAnimationPlayerForKey_cold_1(v22, v23, v24, v25, v26, v27, v28, v29);
  }
  return _C3DAnimationManagerGetAnimationNodeForKey(a1, key, a3);
}

uint64_t C3DAnimationManagerStopAnimationNode(uint64_t a1, uint64_t a2, double a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t Animation;
  int v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  CFIndex i;
  const __CFArray *ChildAtIndex;

  if (!a2 && (v6 = scn_default_log(), os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)))
  {
    C3DGeometryTrackNode_cold_2(v6, v7, v8, v9, v10, v11, v12, v13);
    if (a1)
      goto LABEL_6;
  }
  else if (a1)
  {
    goto LABEL_6;
  }
  v14 = scn_default_log();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    _C3DAnimationManagerAddAnimationNode_cold_4(v14, v15, v16, v17, v18, v19, v20, v21);
LABEL_6:
  Animation = C3DAnimationNodeGetAnimation(a2);
  if ((C3DAnimationGetIsSceneTimeBased(Animation) & 1) == 0)
    C3DTransactionGetAtomicTime();
  v23 = *(_DWORD *)(a2 + 121);
  if (a3 == 0.0)
  {
    *(_DWORD *)(a2 + 121) = v23 & 0xFFFFFFDB | 4;
  }
  else
  {
    *(_DWORD *)(a2 + 121) = v23 | 8;
    C3DTransactionGetAtomicTime();
    *(_QWORD *)(a2 + 96) = v24;
    *(double *)(a2 + 104) = a3;
  }
  *(_QWORD *)(a2 + 128) = 0;
  result = (uint64_t)C3DAnimationNodeGetChildCount(a2);
  if (result >= 1)
  {
    v26 = result;
    for (i = 0; i != v26; ++i)
    {
      ChildAtIndex = C3DAnimationNodeGetChildAtIndex(a2, i);
      result = C3DAnimationManagerStopAnimationNode(a1, ChildAtIndex, a3);
    }
  }
  return result;
}

uint64_t C3DAnimationManagerPauseAnimationNode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  int PausedOrPausedByScene;
  int v28;
  uint64_t Animation;
  double v30;
  uint64_t v31;
  uint64_t ValuePtrAtIndex;
  double PauseTime;
  uint64_t v34;
  CFIndex i;
  const __CFArray *ChildAtIndex;

  if (!a2 && (v10 = scn_default_log(), os_log_type_enabled(v10, OS_LOG_TYPE_FAULT)))
  {
    C3DGeometryTrackNode_cold_2(v10, v11, v12, v13, v14, v15, v16, v17);
    if (a1)
      goto LABEL_6;
  }
  else if (a1)
  {
    goto LABEL_6;
  }
  v18 = scn_default_log();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_FAULT))
    _C3DAnimationManagerAddAnimationNode_cold_4(v18, v19, v20, v21, v22, v23, v24, v25);
LABEL_6:
  if ((_DWORD)a4)
  {
    result = C3DAnimationNodeGetPausedByScene(a2);
    if ((_DWORD)result == (_DWORD)a3)
      return result;
    PausedOrPausedByScene = C3DAnimationNodeGetPausedOrPausedByScene(a2);
    C3DAnimationNodeSetPausedByScene(a2, a3);
  }
  else
  {
    result = C3DAnimationNodeGetPaused(a2);
    if ((_DWORD)result == (_DWORD)a3)
      return result;
    PausedOrPausedByScene = C3DAnimationNodeGetPausedOrPausedByScene(a2);
    C3DAnimationNodeSetPaused(a2, a3);
  }
  if (C3DAnimationNodeGetPausedOrPausedByScene(a2))
    v28 = 1;
  else
    v28 = (*(_DWORD *)(a2 + 121) >> 2) & 1;
  if (v28 != PausedOrPausedByScene)
  {
    Animation = C3DAnimationNodeGetAnimation(a2);
    v30 = a5;
    if (C3DAnimationGetIsSceneTimeBased(Animation))
      v30 = *(double *)(a1 + 136);
    if (C3DAnimationNodeGetPausedOrPausedByScene(a2))
    {
      C3DAnimationNodeSetPauseTime(a2, v30);
    }
    else
    {
      v31 = *(_QWORD *)(a2 + 152);
      if (v31 != -1)
      {
        ValuePtrAtIndex = C3DArrayGetValuePtrAtIndex(*(_QWORD *)(a1 + 24), v31);
        C3DAnimationStackSetConstant(ValuePtrAtIndex, 0, a1);
      }
      if ((*(_BYTE *)(a2 + 121) & 4) != 0)
      {
        C3DAnimationNodeSetStartTime(a2, v30);
      }
      else
      {
        PauseTime = C3DAnimationNodeGetPauseTime(a2);
        C3DAnimationNodeTimeJump(a2, v30 - PauseTime);
      }
      *(_DWORD *)(a2 + 121) &= ~4u;
    }
  }
  result = (uint64_t)C3DAnimationNodeGetChildCount(a2);
  if (result >= 1)
  {
    v34 = result;
    for (i = 0; i != v34; ++i)
    {
      ChildAtIndex = C3DAnimationNodeGetChildAtIndex(a2, i);
      result = C3DAnimationManagerPauseAnimationNode(a1, ChildAtIndex, a3, a4, a5);
    }
  }
  return result;
}

uint64_t C3DAnimationManagerGetAnimationForKeyIsPaused(uint64_t a1, void *a2, const void *a3)
{
  const __CFDictionary *AnimationPerKeyDictionaryForObject;
  const void *Value;

  AnimationPerKeyDictionaryForObject = (const __CFDictionary *)_C3DAnimationManagerGetAnimationPerKeyDictionaryForObject(a1, a2, 0);
  if (AnimationPerKeyDictionaryForObject
    && (Value = CFDictionaryGetValue(AnimationPerKeyDictionaryForObject, a3)) != 0)
  {
    return C3DAnimationNodeGetPaused((uint64_t)Value);
  }
  else
  {
    return 0;
  }
}

const __CFDictionary *C3DAnimationManagerPauseAnimationForKey(uint64_t a1, void *key, const void *a3, uint64_t a4, uint64_t a5, double a6)
{
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const __CFDictionary *result;

  if (!a1 && (v12 = scn_default_log(), os_log_type_enabled(v12, OS_LOG_TYPE_FAULT)))
  {
    _C3DAnimationManagerAddAnimationNode_cold_4(v12, v13, v14, v15, v16, v17, v18, v19);
    if (key)
      goto LABEL_6;
  }
  else if (key)
  {
    goto LABEL_6;
  }
  v20 = scn_default_log();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_FAULT))
    _C3DAnimationManagerGetAnimationPerKeyDictionaryForObject_cold_1(v20, v21, v22, v23, v24, v25, v26, v27);
LABEL_6:
  if (!a3)
  {
    v28 = scn_default_log();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_FAULT))
      C3DAnimationManagerAddAnimationPlayerForKey_cold_1(v28, v29, v30, v31, v32, v33, v34, v35);
  }
  result = (const __CFDictionary *)_C3DAnimationManagerGetAnimationPerKeyDictionaryForObject(a1, key, 0);
  if (result)
  {
    result = (const __CFDictionary *)CFDictionaryGetValue(result, a3);
    if (result)
      return (const __CFDictionary *)C3DAnimationManagerPauseAnimationNode(a1, (uint64_t)result, a4, a5, a6);
  }
  return result;
}

void C3DAnimationManagerApplyBindings(uint64_t a1)
{
  os_unfair_lock_s *v2;
  void *v3;

  v2 = (os_unfair_lock_s *)(a1 + 64);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  v3 = *(void **)(a1 + 72);
  if (v3)
    objc_msgSend(v3, "enumerateObjectsUsingBlock:", &__block_literal_global_31);
  os_unfair_lock_unlock(v2);
}

BOOL C3DAnimationManagerAddBinding(uint64_t a1, float32x4_t *a2, CFStringRef theString, float32x4_t *a4, const __CFString *a5, void *a6)
{
  const __CFString *v12;
  __C3DModelTarget *v13;
  const __CFString *v14;
  __C3DModelTarget *v15;
  int BaseType;
  C3DAnimationBinding *v17;
  void *v18;
  unsigned int v19;
  NSObject *v20;
  _BOOL8 result;
  __C3DModelTarget *v22;
  NSObject *v23;
  const void *v24;
  __CFArray *v25;
  int v26;
  uint64_t Name;
  __int16 v28;
  CFStringRef v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  const __CFString *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v12 = C3DCFTypeCopyModelInfoAtPath(a2, theString, 0);
  if (!v12)
  {
LABEL_9:
    v19 = CFTypeIsC3DEntity(a2);
    v20 = scn_default_log();
    result = os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);
    if (v19)
    {
      if (!result)
        return result;
      C3DAnimationManagerAddBinding_cold_1((uint64_t)a2, (uint64_t)theString, v20);
    }
    else
    {
      if (!result)
        return result;
      C3DAnimationManagerAddBinding_cold_2();
    }
    return 0;
  }
  v13 = (__C3DModelTarget *)v12;
  if (!C3DModelTargetGetTargetAddress((uint64_t)v12))
  {
    CFRelease(v13);
    goto LABEL_9;
  }
  v14 = C3DCFTypeCopyModelInfoAtPath(a4, a5, 0);
  if (!v14)
  {
    v22 = v13;
LABEL_16:
    CFRelease(v22);
    return 0;
  }
  v15 = (__C3DModelTarget *)v14;
  if (!C3DModelTargetGetTargetAddress((uint64_t)v14))
  {
    CFRelease(v13);
    v22 = v15;
    goto LABEL_16;
  }
  BaseType = C3DModelTargetGetBaseType((uint64_t)v13);
  if (BaseType != C3DModelTargetGetBaseType((uint64_t)v15))
  {
    CFRelease(v13);
    CFRelease(v15);
    if (CFTypeIsC3DEntity(a2) && CFTypeIsC3DEntity(a4))
    {
      v23 = scn_default_log();
      result = os_log_type_enabled(v23, OS_LOG_TYPE_ERROR);
      if (!result)
        return result;
      v26 = 138413058;
      Name = C3DEntityGetName((uint64_t)a2);
      v28 = 2112;
      v29 = theString;
      v30 = 2112;
      v31 = C3DEntityGetName((uint64_t)a4);
      v32 = 2112;
      v33 = a5;
    }
    else
    {
      v23 = scn_default_log();
      result = os_log_type_enabled(v23, OS_LOG_TYPE_ERROR);
      if (!result)
        return result;
      v26 = 138413058;
      Name = (uint64_t)a2;
      v28 = 2112;
      v29 = theString;
      v30 = 2112;
      v31 = (uint64_t)a4;
      v32 = 2112;
      v33 = a5;
    }
    _os_log_error_impl(&dword_1DCCB8000, v23, OS_LOG_TYPE_ERROR, "Error: Binding: Trying to bind two incompatible keypaths: %@(%@) -> %@(%@)", (uint8_t *)&v26, 0x2Au);
    return 0;
  }
  C3DAnimationManagerRemoveBinding(a1, a2, theString);
  v17 = objc_alloc_init(C3DAnimationBinding);
  v17->_source = v15;
  v17->_destination = v13;
  if (a2)
    v18 = (void *)CFRetain(a2);
  else
    v18 = 0;
  v17->_owner = v18;
  v24 = (const void *)objc_msgSend(a6, "objectForKeyedSubscript:", CFSTR("SCNBindingValueTransformerKey"));
  if (v24)
    v17->_valueTransformer = _Block_copy(v24);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  v25 = *(__CFArray **)(a1 + 72);
  if (!v25)
  {
    v25 = (__CFArray *)objc_alloc_init(MEMORY[0x1E0C99DE8]);
    *(_QWORD *)(a1 + 72) = v25;
  }
  CFArrayAppendValue(v25, v17);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));

  return 1;
}

void C3DAnimationManagerRemoveBinding(uint64_t a1, float32x4_t *a2, const __CFString *a3)
{
  os_unfair_lock_s *v6;
  void *v7;
  const __CFString *v8;
  uint64_t TargetAddress;
  _QWORD v10[6];

  v6 = (os_unfair_lock_s *)(a1 + 64);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  v7 = *(void **)(a1 + 72);
  if (v7)
  {
    v8 = C3DCFTypeCopyModelInfoAtPath(a2, a3, 0);
    TargetAddress = C3DModelTargetGetTargetAddress((uint64_t)v8);
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = __C3DAnimationManagerRemoveBinding_block_invoke;
    v10[3] = &__block_descriptor_48_e15_B32__0_8Q16_B24l;
    v10[4] = a2;
    v10[5] = TargetAddress;
    objc_msgSend(v7, "removeObjectsAtIndexes:", objc_msgSend(v7, "indexesOfObjectsPassingTest:", v10));
    CFRelease(v8);
  }
  os_unfair_lock_unlock(v6);
}

void C3DAnimationManagerRemoveAllBindings(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *v4;
  void *v5;
  _QWORD v6[5];

  v4 = (os_unfair_lock_s *)(a1 + 64);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  v5 = *(void **)(a1 + 72);
  if (v5)
  {
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __C3DAnimationManagerRemoveAllBindings_block_invoke;
    v6[3] = &__block_descriptor_40_e15_B32__0_8Q16_B24l;
    v6[4] = a2;
    objc_msgSend(v5, "removeObjectsAtIndexes:", objc_msgSend(v5, "indexesOfObjectsPassingTest:", v6));
  }
  os_unfair_lock_unlock(v4);
}

void _C3DAnimationManagerCFFinalize(_QWORD *a1)
{
  uint64_t v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  _QWORD v13[5];

  v2 = a1[3];
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = ___C3DAnimationManagerCFFinalize_block_invoke;
  v13[3] = &__block_descriptor_40_e13_v24__0q8r_v16l;
  v13[4] = a1;
  C3DArrayApply(v2, (uint64_t)v13);
  v3 = (const void *)a1[3];
  if (v3)
  {
    CFRelease(v3);
    a1[3] = 0;
  }
  v4 = (const void *)a1[4];
  if (v4)
  {
    CFRelease(v4);
    a1[4] = 0;
  }
  v5 = (const void *)a1[10];
  if (v5)
  {
    CFRelease(v5);
    a1[10] = 0;
  }
  v6 = (const void *)a1[6];
  if (v6)
  {
    CFRelease(v6);
    a1[6] = 0;
  }
  v7 = (const void *)a1[7];
  if (v7)
  {
    CFRelease(v7);
    a1[7] = 0;
  }
  v8 = (const void *)a1[2];
  if (v8)
  {
    CFRelease(v8);
    a1[2] = 0;
  }
  v9 = (const void *)a1[14];
  if (v9)
  {
    CFRelease(v9);
    a1[14] = 0;
  }
  v10 = (const void *)a1[15];
  if (v10)
  {
    CFRelease(v10);
    a1[15] = 0;
  }
  v11 = (const void *)a1[16];
  if (v11)
  {
    CFRelease(v11);
    a1[16] = 0;
  }
  v12 = (const void *)a1[9];
  if (v12)
  {
    CFRelease(v12);
    a1[9] = 0;
  }
}

CFStringRef _C3DAnimationManagerCFCopyFormatDescription(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DAnimationManager %p>"), a1);
}

CFStringRef _C3DAnimationManagerCFCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DAnimationManager %p>"), a1);
}

uint64_t _C3DAnimationManagerInitWithPropertyList()
{
  return 1;
}

uint64_t _C3DAnimationManagerCopyPropertyList()
{
  return 0;
}

uint64_t _C3DAnimationManagerFinalizeDeserialization()
{
  return 1;
}

void _C3DAnimationManagerFillLibraryForSerialization(uint64_t a1, void *context)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const __CFDictionary *v12;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DAnimationManagerSetSystemTime_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = *(const __CFDictionary **)(a1 + 48);
  if (v12)
    CFDictionaryApplyFunction(v12, (CFDictionaryApplierFunction)__fillLibraryWithAnimationPerObject, context);
}

void __fillLibraryWithAnimationPerObject(int a1, CFDictionaryRef theDict, void *a3)
{
  if (theDict)
    CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)__fillLibraryWithAnimationPerKey, a3);
}

void __fillLibraryWithAnimationPerKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *Animation;
  void *v5;
  CFTypeID v6;
  __n128 *v7;
  __n128 *v8;
  CFTypeID v9;
  __n128 *v10;

  if (a2)
  {
    Animation = (void *)C3DAnimationNodeGetAnimation(a2);
    if (Animation)
    {
      v5 = Animation;
      v6 = CFGetTypeID(Animation);
      if (v6 == C3DKeyframedAnimationGetTypeID())
      {
        v7 = (__n128 *)C3DAnimationGroupCreate();
        C3DAnimationGroupAddAnimation((uint64_t)v7, v5);
        C3DLibraryAddEntry(a3, v7);
        v8 = v7;
LABEL_8:
        CFRelease(v8);
        return;
      }
      v9 = CFGetTypeID(v5);
      if (v9 == C3DAnimationClusterGetTypeID())
      {
        v10 = C3DAnimationGroupCreateWithAnimationCluster((uint64_t)v5);
        C3DLibraryAddEntry(a3, v10);
        v8 = v10;
        goto LABEL_8;
      }
      C3DLibraryAddEntry(a3, v5);
    }
  }
}

BOOL _C3DAnimationManagerUpdateRelativeTimeOfAnimation(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  __int16 v22;
  _BOOL4 v23;
  double PauseTime;
  int v25;
  uint64_t v26;
  double ContentTimeForTime;
  unsigned int v28;
  int v29;
  _BOOL4 v30;
  float v31;
  double v32;
  BOOL v33;
  double v34;
  double v35;
  float v36;
  float v37;
  uint64_t v38;
  int v39;
  _BOOL8 result;
  uint64_t v41;
  BOOL v42;
  __int16 v43;

  if (!a1 && (v4 = scn_default_log(), os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)))
  {
    _C3DAnimationManagerAddAnimationNode_cold_4(v4, v5, v6, v7, v8, v9, v10, v11);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v12 = scn_default_log();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    _C3DAnimationManagerAddAnimationNode_cold_3(v12, v13, v14, v15, v16, v17, v18, v19);
LABEL_6:
  v20 = *(_QWORD *)(a2 + 16);
  if (C3DAnimationNodeGetPausedOrPausedByScene(a2))
    return 0;
  v21 = *(_DWORD *)(a2 + 121);
  if ((v21 & 4) != 0)
    return 0;
  v22 = *(_WORD *)(v20 + 84);
  if ((v22 & 8) != 0)
  {
    v23 = 1;
    if ((v21 & 2) == 0)
      goto LABEL_20;
  }
  else if (*(_BYTE *)(a1 + 91))
  {
    v23 = (v22 & 0x200) == 0;
    if ((v21 & 2) == 0)
      goto LABEL_20;
  }
  else
  {
    v23 = 0;
    if ((v21 & 2) == 0)
      goto LABEL_20;
  }
  *(_DWORD *)(a2 + 121) = v21 & 0xFFFFFFFD;
  PauseTime = C3DAnimationNodeGetPauseTime(v20);
  if (!v23)
  {
    if (PauseTime == 0.0)
      PauseTime = 0.0;
    PauseTime = PauseTime + *(double *)(a1 + 144);
  }
  *(double *)(a2 + 80) = PauseTime;
LABEL_20:
  v43 = 0;
  v42 = 0;
  v25 = *(_DWORD *)(a2 + 121);
  v26 = 144;
  if (v23)
    v26 = 136;
  ContentTimeForTime = C3DAnimationNodeGetContentTimeForTime(a2, (BOOL *)&v43 + 1, &v43, &v42, *(double *)(a1 + v26));
  v28 = *(_DWORD *)(a2 + 121);
  v29 = HIBYTE(v43);
  v30 = v42;
  *(_DWORD *)(a2 + 121) = v28 & 0xFFFFFFCF | (16 * HIBYTE(v43)) | (32 * v42);
  if (v28 & 0x20 | v30)
  {
    v31 = *(float *)(v20 + 72);
    v32 = v31;
    v33 = v31 == 0.0;
    v34 = 1.0;
    if (!v33)
      v34 = v32;
    v35 = ContentTimeForTime / v34;
    v36 = *(float *)(a2 + 72);
    v37 = v35;
    *(float *)(a2 + 72) = v37;
    v38 = *(_QWORD *)(v20 + 96);
    if (v38)
      C3DAnimationEventsTriggerEventsWithTimeChanges((_QWORD *)a1, v38, (v28 >> 4) & 1, v29 != 0, a2, v36, v35);
  }
  if (!*(_BYTE *)(a1 + 90))
  {
    v39 = *(_DWORD *)(a2 + 121);
    if ((v39 & 1) == 0)
    {
      *(_DWORD *)(a2 + 121) = v39 | 1;
      if (*(_QWORD *)(v20 + 144))
        _C3DAnimationManagerAppendCallback(a1, (char *)a2, 1);
    }
    if ((_BYTE)v43 && ((*(_WORD *)(v20 + 84) & 8) == 0 || *(double *)(a2 + 88) != 0.0))
    {
      *(_DWORD *)(a2 + 121) |= 0x400u;
      _animationNodeCompleted(a1, a2);
    }
  }
  if (v23)
    return 0;
  result = 1;
  if ((v25 & 0x100) != 0 && (_BYTE)v43)
  {
    v41 = *(_QWORD *)(a2 + 40);
    if (v41)
      return (*(_BYTE *)(v41 + 122) & 1) == 0;
    return 0;
  }
  return result;
}

void _animationNodeCompleted(uint64_t a1, uint64_t a2)
{
  int v2;

  if (!*(_BYTE *)(a1 + 90))
  {
    v2 = *(_DWORD *)(a2 + 121);
    if ((v2 & 0x40) == 0)
    {
      *(_DWORD *)(a2 + 121) = v2 | 0x40;
      _C3DAnimationManagerAppendCallback(a1, (char *)a2, 6);
    }
  }
}

uint64_t _commonAncessor(const __CFArray *a1, const void *a2, uint64_t a3)
{
  const void *v3;
  uint64_t Parent;
  CFIndex Count;
  CFIndex v7;
  char v8;
  CFIndex v9;
  const void *ValueAtIndex;
  NSObject *v12;
  const void *v13;

  v3 = a2;
  if (a2 != (const void *)a3)
  {
    Parent = a3;
    Count = CFArrayGetCount(a1);
    if (Count)
    {
      if (!Parent)
      {
LABEL_11:
        v12 = scn_default_log();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          _commonAncessor_cold_1(v12);
        return 0;
      }
      v7 = Count;
      while (2)
      {
        if ((const void *)Parent != v3)
        {
          v8 = 0;
          v9 = v7;
          while (v9-- >= 1)
          {
            ValueAtIndex = CFArrayGetValueAtIndex(a1, v9);
            v8 |= ValueAtIndex == v3;
            if (ValueAtIndex == (const void *)Parent)
            {
              if ((v8 & 1) == 0)
                return Parent;
              return (uint64_t)v3;
            }
          }
          Parent = C3DNodeGetParent(Parent);
          if (Parent)
            continue;
          goto LABEL_11;
        }
        break;
      }
    }
    else
    {
      if (!Parent)
        return 0;
      v13 = (const void *)Parent;
      do
      {
        CFArrayAppendValue(a1, v13);
        v13 = (const void *)C3DNodeGetParent((uint64_t)v13);
      }
      while (v13);
      return Parent;
    }
  }
  return (uint64_t)v3;
}

uint64_t ___resolveAnimationGroupTargets_block_invoke(uint64_t a1, uint64_t a2)
{
  const void *Name;

  Name = (const void *)C3DNodeGetName(a2);
  if (Name
    && CFEqual(Name, *(CFTypeRef *)(a1 + 40))
    && (++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24),
        *(int *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) > 1))
  {
    return 2;
  }
  else
  {
    return 0;
  }
}

uint64_t ___resolveAnimationClusterTargets_block_invoke(uint64_t a1, uint64_t a2)
{
  const void *Name;

  Name = (const void *)C3DNodeGetName(a2);
  if (Name
    && CFEqual(Name, *(CFTypeRef *)(a1 + 40))
    && (++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24),
        *(int *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) > 1))
  {
    return 2;
  }
  else
  {
    return 0;
  }
}

void C3DAnimationManagerRemoveAnimationNode(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const __CFArray *ChildCount;
  const __CFArray *v38;
  CFIndex i;
  const __CFArray *ChildAtIndex;

  if (!a2 && (v4 = scn_default_log(), os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)))
  {
    C3DGeometryTrackNode_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
    if (a1)
      goto LABEL_6;
  }
  else if (a1)
  {
    goto LABEL_6;
  }
  v12 = scn_default_log();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    _C3DAnimationManagerAddAnimationNode_cold_4(v12, v13, v14, v15, v16, v17, v18, v19);
LABEL_6:
  CFRetain((CFTypeRef)a2);
  if (*(_BYTE *)(a1 + 88))
  {
    v20 = scn_default_log();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_FAULT))
      C3DAnimationManagerRemoveAnimationNode_cold_2(v20, v21, v22, v23, v24, v25, v26, v27);
  }
  _animationNodeCompleted(a1, a2);
  if (*(_BYTE *)(a1 + 88))
  {
    v28 = scn_default_log();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_FAULT))
      C3DAnimationManagerRemoveAnimationNode_cold_1(v28, v29, v30, v31, v32, v33, v34, v35);
  }
  _C3DAnimationManagerDiscardAnimationNodeFromStack(a1, (_QWORD *)a2);
  *(_DWORD *)(a2 + 121) |= 0x800u;
  C3DAnimationNodeSetOwner(a2, 0);
  v36 = *(_QWORD *)(a2 + 192);
  if (v36)
    C3DAnimationPlayerRemoveAnimationNode(v36, (const void *)a2);
  ChildCount = C3DAnimationNodeGetChildCount(a2);
  if ((uint64_t)ChildCount >= 1)
  {
    v38 = ChildCount;
    for (i = 0; (const __CFArray *)i != v38; ++i)
    {
      ChildAtIndex = C3DAnimationNodeGetChildAtIndex(a2, i);
      C3DAnimationManagerRemoveAnimationNode(a1, ChildAtIndex);
    }
  }
  CFRelease((CFTypeRef)a2);
}

void OUTLINED_FUNCTION_3_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x16u);
}

uint64_t C3DPreviousKeyFrameIndexForTime(float *a1, int a2, float *a3)
{
  int v5;
  float v6;
  uint64_t v7;
  int v8;
  int v9;
  NSObject *v10;
  int v11;
  uint8_t v13[4];
  _DWORD v14[7];

  *(_QWORD *)&v14[5] = *MEMORY[0x1E0C80C00];
  v5 = a2 - 1;
  v6 = *a3;
  if (a2 - 1 >= 1)
  {
    v7 = 0;
    do
    {
      v8 = v5 + v7;
      if (v5 + (int)v7 < 0 != __OFADD__(v5, (_DWORD)v7))
        v9 = v8 + 1;
      else
        v9 = v5 + v7;
      if (v8 <= -2)
      {
        v10 = scn_default_log();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
          C3DPreviousKeyFrameIndexForTime_cold_1(v13, v14, v10);
      }
      v11 = v9 >> 1;
      if (a1[v9 >> 1] >= v6)
      {
        v5 = v11 - 1;
      }
      else
      {
        if ((_DWORD)v7 == v11)
        {
          if (a1[v5] <= v6)
            return v5;
          else
            return v7;
        }
        v7 = (v9 >> 1);
      }
    }
    while (v5 > (int)v7);
    if ((_DWORD)v7)
      return v7;
  }
  v7 = 0;
  if (*a1 > v6)
    *a3 = *a1;
  return v7;
}

uint64_t _C3DKeyframeControllerCreate()
{
  if (C3DKeyframeControllerGetTypeID_onceToken != -1)
    dispatch_once(&C3DKeyframeControllerGetTypeID_onceToken, &__block_literal_global_20);
  return C3DTypeCreateInstance_(C3DKeyframeControllerGetTypeID_typeID, 0x68uLL);
}

const void *C3DKeyframeControllerCreateWithPropertyList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v6;
  const void *v7;

  v6 = (const void *)_C3DKeyframeControllerCreate();
  v7 = v6;
  if (v6 && (C3DInitWithPropertyList(v6, a1, a2, a3) & 1) == 0)
  {
    CFRelease(v7);
    return 0;
  }
  return v7;
}

uint64_t C3DKeyframeControllerCreateWithCapacity(unsigned int a1, unsigned int a2, char a3, int a4, int a5, int a6, int a7)
{
  uint64_t v14;
  uint64_t v15;

  v14 = _C3DKeyframeControllerCreate();
  v15 = v14;
  if (v14)
    _C3DKeyframeControllerSetupWithCapacity(v14, a1, a2, a3, a4, a5, a6, a7);
  return v15;
}

uint64_t (*_C3DKeyframeControllerSetupWithCapacity(uint64_t a1, unsigned int a2, unsigned int a3, char a4, int a5, int a6, int a7, int a8))()
{
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;
  unsigned __int8 ComponentCount;
  uint64_t (*result)();

  if (!a1 && (v16 = scn_default_log(), os_log_type_enabled(v16, OS_LOG_TYPE_FAULT)))
  {
    _C3DKeyframeControllerSetupWithCapacity_cold_2(v16, v17, v18, v19, v20, v21, v22, v23);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v24 = scn_default_log();
  if (os_log_type_enabled(v24, OS_LOG_TYPE_FAULT))
    _C3DKeyframeControllerSetupWithCapacity_cold_1(v24, v25, v26, v27, v28, v29, v30, v31);
LABEL_6:
  *(_QWORD *)(a1 + 40) = C3DMalloc(4 * a2);
  *(_DWORD *)(a1 + 24) = a2;
  v32 = C3DSizeOfBaseType(a3);
  *(_BYTE *)(a1 + 30) = v32;
  *(_WORD *)(a1 + 28) = a3;
  *(_BYTE *)(a1 + 115) = a4;
  *(_QWORD *)(a1 + 48) = C3DMalloc(v32 * a2);
  if (a5)
    *(_QWORD *)(a1 + 64) = C3DMalloc(a2);
  if (a7)
  {
    *(_QWORD *)(a1 + 72) = C3DMalloc(4 * a2);
    *(_QWORD *)(a1 + 80) = C3DMalloc(4 * a2);
    *(_QWORD *)(a1 + 88) = C3DMalloc(4 * a2);
  }
  *(_BYTE *)(a1 + 114) = a8;
  if (a8)
  {
    ComponentCount = C3DBaseTypeGetComponentCount(a3);
    *(_BYTE *)(a1 + 113) = ComponentCount;
    *(_QWORD *)(a1 + 96) = C3DMalloc(ComponentCount * 8 * a2);
    *(_QWORD *)(a1 + 104) = C3DMalloc(8 * a2 * *(unsigned __int8 *)(a1 + 113));
  }
  if (a6)
    *(_QWORD *)(a1 + 56) = C3DMalloc(16 * a2);
  result = C3DKeyFrameInterpolatorForType(*(__int16 *)(a1 + 28), *(char *)(a1 + 115), 0, *(char *)(a1 + 31), *(_QWORD *)(a1 + 64) == 0);
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

BOOL C3DKeyframeControllerSetKeyframeAtIndex(uint64_t a1, unsigned int a2, void *__src, char a4, uint64_t a5, const void *a6, const void *a7, double a8, float a9, float a10, float a11)
{
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  float v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 *ControlPoints;
  uint64_t v42;
  __int128 v43;
  NSObject *v44;

  if (!a1)
  {
    v22 = scn_default_log();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_FAULT))
      C3DKeyframeControllerSetKeyframeAtIndex_cold_3(v22, v23, v24, v25, v26, v27, v28, v29);
  }
  v30 = *(_DWORD *)(a1 + 24);
  if (v30 <= a2)
  {
    v44 = scn_default_log();
    if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
      C3DKeyframeControllerSetKeyframeAtIndex_cold_1();
  }
  else
  {
    v31 = a8;
    *(float *)(*(_QWORD *)(a1 + 40) + 4 * a2) = v31;
    v32 = *(double *)(a1 + 16);
    if (v32 <= a8)
      v32 = a8;
    *(double *)(a1 + 16) = v32;
    memcpy((void *)(*(_QWORD *)(a1 + 48) + *(unsigned __int8 *)(a1 + 30) * a2), __src, *(unsigned __int8 *)(a1 + 30));
    v33 = *(_QWORD *)(a1 + 64);
    if (v33 && *(_DWORD *)(a1 + 24) > a2)
      *(_BYTE *)(v33 + a2) = a4;
    v34 = *(_QWORD *)(a1 + 72);
    if (v34)
      *(float *)(v34 + 4 * a2) = a9;
    v35 = *(_QWORD *)(a1 + 80);
    if (v35)
      *(float *)(v35 + 4 * a2) = a10;
    v36 = *(_QWORD *)(a1 + 88);
    if (v36)
      *(float *)(v36 + 4 * a2) = a11;
    if (a6)
    {
      v37 = *(_QWORD *)(a1 + 96);
      if (v37)
      {
        *(_BYTE *)(a1 + 114) = 0;
        memcpy((void *)(v37 + 8 * *(unsigned __int8 *)(a1 + 113) * a2), a6, 8 * *(unsigned __int8 *)(a1 + 113));
      }
    }
    if (a7)
    {
      v38 = *(_QWORD *)(a1 + 104);
      if (v38)
      {
        *(_BYTE *)(a1 + 114) = 0;
        memcpy((void *)(v38 + 8 * *(unsigned __int8 *)(a1 + 113) * a2), a7, 8 * *(unsigned __int8 *)(a1 + 113));
      }
    }
    v39 = *(_QWORD *)(a1 + 56);
    if (v39)
    {
      v40 = 4 * a2;
      if (a5)
      {
        ControlPoints = (__int128 *)C3DTimingFunctionGetControlPoints(a5);
        v39 = *(_QWORD *)(a1 + 56);
        v42 = 4 * v40;
        v43 = *ControlPoints;
      }
      else
      {
        v42 = 4 * v40;
        v43 = 0uLL;
      }
      *(_OWORD *)(v39 + v42) = v43;
    }
  }
  return v30 > a2;
}

double C3DKeyframeControllerGetDuration(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DKeyframeControllerSetKeyframeAtIndex_cold_3(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(double *)(a1 + 16);
}

uint64_t C3DKeyframeControllerEvaluateAtTime(uint64_t a1, int a2, uint64_t a3, uint64_t a4, double a5)
{
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  float v43;
  unsigned int v44;
  __n128 v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, __n128);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  float v60;
  float v61;
  uint64_t v62;
  float v63;

  if (!a1)
  {
    v10 = scn_default_log();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
      C3DKeyframeControllerSetKeyframeAtIndex_cold_3(v10, v11, v12, v13, v14, v15, v16, v17);
  }
  if (!*(_QWORD *)(a1 + 48))
  {
    v18 = scn_default_log();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_FAULT))
      C3DKeyframeControllerEvaluateAtTime_cold_3(v18, v19, v20, v21, v22, v23, v24, v25);
  }
  if (!*(_QWORD *)(a1 + 32))
  {
    v26 = scn_default_log();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_FAULT))
      C3DKeyframeControllerEvaluateAtTime_cold_2(v26, v27, v28, v29, v30, v31, v32, v33);
  }
  if (!*(_DWORD *)(a1 + 24))
  {
    v34 = scn_default_log();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_FAULT))
      C3DKeyframeControllerEvaluateAtTime_cold_1(v34, v35, v36, v37, v38, v39, v40, v41);
  }
  v42 = *(unsigned __int8 *)(a1 + 31);
  v43 = a5;
  v63 = v43;
  v44 = C3DPreviousKeyFrameIndexForTime(*(float **)(a1 + 40), *(_DWORD *)(a1 + 24), &v63);
  v46 = v44;
  v47 = *(_DWORD *)(a1 + 24) - 1;
  if (v44 + 1 < v47)
    v48 = v44 + 1;
  else
    v48 = *(_DWORD *)(a1 + 24) - 1;
  v49 = *(_QWORD *)(a1 + 48);
  v50 = *(unsigned __int8 *)(a1 + 30);
  v51 = *(_QWORD *)(a1 + 64);
  if (v51)
  {
    if (v44 < v47)
      v47 = v44;
    v42 = *(unsigned __int8 *)(v51 + v47);
  }
  v52 = v49 + v44 * v50;
  v53 = v49 + v48 * v50;
  if (v42 == 1 || *(_WORD *)(a1 + 28) == 3)
  {
    v54 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, __n128))(a1 + 32);
    v45.n128_f64[0] = v63;
    if (a2)
      v55 = v53;
    else
      v55 = v52;
    v56 = (char)v42;
    v57 = v55;
  }
  else
  {
    v59 = *(_QWORD *)(a1 + 40);
    v60 = *(float *)(v59 + 4 * v44);
    v61 = *(float *)(v59 + 4 * v48) - v60;
    if (v61 == 0.0)
      v45.n128_u32[0] = 0;
    else
      v45.n128_f32[0] = (float)(v63 - v60) / v61;
    v62 = *(_QWORD *)(a1 + 56);
    if (v62)
      v45.n128_f32[0] = C3DTimingFunctionSolveCurve((float *)(v62 + 16 * v44), v45.n128_f32[0]);
    if (v42)
    {
      v45.n128_f64[0] = v45.n128_f32[0];
      (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, __n128))(a1 + 32))(v52, v53, (char)v42, *(_QWORD *)(a1 + 104) + 8 * v46 * *(unsigned __int8 *)(a1 + 113), *(_QWORD *)(a1 + 96) + 8 * v48 * *(unsigned __int8 *)(a1 + 113), a3, a4, v45);
      return 1;
    }
    v54 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, __n128))(a1 + 32);
    v45.n128_f64[0] = v45.n128_f32[0];
    v55 = v52;
    v57 = v53;
    v56 = 0;
  }
  v54(v55, v57, v56, 0, 0, a3, a4, v45);
  return 1;
}

uint64_t C3DKeyframeControllerGetKeyCount(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DKeyframeControllerSetKeyframeAtIndex_cold_3(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(unsigned int *)(a1 + 24);
}

uint64_t C3DKeyframeControllerGetValueType(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DKeyframeControllerSetKeyframeAtIndex_cold_3(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(__int16 *)(a1 + 28);
}

uint64_t C3DKeyframeControllerGetKeyframeSemantic(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DKeyframeControllerSetKeyframeAtIndex_cold_3(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return C3DKeyFrameInterpolatorGetSemantic(*(double (**)(float32x4_t *, float32x4_t *, double, double, double, double, double, double, float32x4_t, uint64_t, uint64_t, uint64_t, int, float32x4_t *))(a1 + 32));
}

double C3DKeyframeControllerGetKeyTimeAtIndex(uint64_t a1, unsigned int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double result;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DKeyframeControllerSetKeyframeAtIndex_cold_3(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = *(_QWORD *)(a1 + 40);
  result = 0.0;
  if (v12)
  {
    if (*(_DWORD *)(a1 + 24) > a2)
      return *(float *)(v12 + 4 * a2);
  }
  return result;
}

uint64_t C3DKeyframeControllerGetValueAtIndex(uint64_t a1, int a2, void *__dst)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (!a1)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      C3DKeyframeControllerSetKeyframeAtIndex_cold_3(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  v14 = *(_QWORD *)(a1 + 48);
  if (!v14)
    return 0;
  memcpy(__dst, (const void *)(v14 + *(unsigned __int8 *)(a1 + 30) * a2), *(unsigned __int8 *)(a1 + 30));
  return *(unsigned __int8 *)(a1 + 30);
}

void C3DKeyframeControllerSetupKeyTimesForPacedMode(uint64_t a1, float32x4_t a2, float32x4_t a3)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float32x2_t *v22;
  int v23;
  double v24;
  uint64_t v25;
  float32x2_t *v26;
  uint64_t v27;
  uint64_t v28;
  float32x2_t v29;
  float v30;
  float v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  double v35;
  NSObject *v36;
  float v37;
  _DWORD *v38;
  uint64_t v39;
  double v40;
  float v41;
  uint8_t buf[4];
  int v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DKeyframeControllerSetKeyframeAtIndex_cold_3(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (!*(_QWORD *)(a1 + 48))
  {
    v12 = scn_default_log();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
      C3DKeyframeControllerEvaluateAtTime_cold_3(v12, v13, v14, v15, v16, v17, v18, v19);
  }
  v20 = *(unsigned int *)(a1 + 24);
  if (v20 >= 2)
  {
    if (!*(_QWORD *)(a1 + 40))
      *(_QWORD *)(a1 + 40) = C3DMalloc(4 * v20);
    v21 = (v20 - 1);
    v22 = *(float32x2_t **)(a1 + 48);
    v23 = *(__int16 *)(a1 + 28);
    v24 = 0.0;
    v25 = 1;
    do
    {
      v26 = v22;
      v27 = *(_QWORD *)(a1 + 48);
      v28 = v25 * *(unsigned __int8 *)(a1 + 30);
      v22 = (float32x2_t *)(v27 + v28);
      switch(v23)
      {
        case 1:
        case 7:
          a2.f32[0] = vabds_f32(v26->f32[0], v22->f32[0]);
          goto LABEL_18;
        case 2:
          v30 = v26->f32[0];
          v31 = v22->f32[0];
          goto LABEL_28;
        case 3:
        case 16:
          LODWORD(v30) = v26->u8[0];
          LODWORD(v31) = v22->u8[0];
          goto LABEL_28;
        case 4:
          LODWORD(v30) = v26->i8[0];
          LODWORD(v31) = v22->i8[0];
          goto LABEL_28;
        case 6:
          v35 = vabdd_f64(*(double *)v26, *(double *)v22);
          break;
        case 8:
        case 18:
          v29 = vsub_f32(*v26, *v22);
          *(float32x2_t *)a2.f32 = vmul_f32(v29, v29);
          goto LABEL_17;
        case 9:
        case 19:
          *(float32x2_t *)a2.f32 = *v26;
          a2.i32[2] = v26[1].i32[0];
          *(float32x2_t *)a3.f32 = *v22;
          a3.i32[2] = v22[1].i32[0];
          v32 = vsubq_f32(a2, a3);
          v33 = vmulq_f32(v32, v32);
          a3 = vaddq_f32(v33, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v33.f32, 1));
          a2 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v33, 2), a3);
          a2.f32[0] = sqrtf(a2.f32[0]);
          goto LABEL_18;
        case 10:
        case 20:
          v34 = vsubq_f32(*(float32x4_t *)v26->f32, *(float32x4_t *)v22->f32);
          a2 = vmulq_f32(v34, v34);
          a3 = (float32x4_t)vextq_s8((int8x16_t)a2, (int8x16_t)a2, 8uLL);
          *(float32x2_t *)a2.f32 = vadd_f32(*(float32x2_t *)a2.f32, *(float32x2_t *)a3.f32);
LABEL_17:
          a2.f32[0] = sqrtf(vaddv_f32(*(float32x2_t *)a2.f32));
          goto LABEL_18;
        case 11:
          a2.f32[0] = C3DMatrix4x4Distance((float32x4_t *)v26);
          goto LABEL_18;
        case 13:
          a2.f32[0] = C3DColor4Distance((float *)v26, (float *)(v27 + v28));
LABEL_18:
          v35 = a2.f32[0];
          break;
        case 14:
          LODWORD(v30) = v26->i16[0];
          LODWORD(v31) = v22->i16[0];
          goto LABEL_28;
        case 17:
          LODWORD(v30) = v26->u16[0];
          LODWORD(v31) = v22->u16[0];
LABEL_28:
          v35 = fabs((double)(LODWORD(v30) - LODWORD(v31)));
          break;
        default:
          v36 = scn_default_log();
          v35 = 0.0;
          if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            v43 = v23;
            _os_log_impl(&dword_1DCCB8000, v36, OS_LOG_TYPE_DEFAULT, "Warning: _C3DKeyDistance - can't compute key distance for type %d", buf, 8u);
          }
          break;
      }
      v24 = v24 + v35;
      v37 = v24;
      v38 = *(_DWORD **)(a1 + 40);
      *(float *)&v38[v25++] = v37;
      v39 = v25 - v21;
    }
    while (v25 - v21 != 1);
    *v38 = 0;
    do
    {
      if (v24 == 0.0)
        v40 = (float)((float)v39 / (float)v20) + -1.0;
      else
        v40 = *(float *)&v38[v39] / v24;
      v41 = v40;
      *(float *)&v38[v39++] = v41;
    }
    while (v20 != v39);
    *(double *)(a1 + 16) = *(float *)&v38[v21];
  }
}

void C3DKeyframeControllerSetCalculationMode(uint64_t a1, char a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DKeyframeControllerSetKeyframeAtIndex_cold_3(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(_BYTE *)(a1 + 112) = a2;
}

uint64_t C3DKeyframeControllerGetCalculationMode(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DKeyframeControllerSetKeyframeAtIndex_cold_3(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(char *)(a1 + 112);
}

uint64_t (*C3DKeyframeControllerSetDefaultInterpolationMode(uint64_t a1, unsigned int a2))()
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*result)();

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DKeyframeControllerSetKeyframeAtIndex_cold_3(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(_BYTE *)(a1 + 31) = a2;
  result = C3DKeyFrameInterpolatorForType(*(__int16 *)(a1 + 28), *(char *)(a1 + 115), 0, a2, *(_QWORD *)(a1 + 64) == 0);
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

uint64_t C3DKeyframeControllerGetDefaultInterpolationMode(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DKeyframeControllerSetKeyframeAtIndex_cold_3(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(char *)(a1 + 31);
}

void _C3DKeyframeControllerRemoveUselessKeys(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  NSObject *v11;
  const char *v12;
  BOOL v13;
  uint64_t v14;
  const void *Mutable;
  uint64_t v16;
  unsigned int v17;
  int v18;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  __n128 v24;
  double KeyTimeAtIndex;
  double v26;
  __n128 v27;
  uint64_t Count;
  int v29;
  char *v30;
  float *v31;
  void *v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  _OWORD v36[4];
  _OWORD __dst[4];
  _OWORD v38[4];
  uint8_t buf[16];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DKeyframeControllerSetKeyframeAtIndex_cold_3(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  v10 = *(unsigned __int8 *)(a1 + 31);
  if (*(_QWORD *)(a1 + 96))
  {
    if (v10 == 2)
    {
LABEL_6:
      v11 = scn_default_log();
      if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        return;
      *(_WORD *)buf = 0;
      v12 = "Warning: can't simplify keyframes because of cubic interpolation";
      goto LABEL_17;
    }
  }
  else
  {
    if (*(_QWORD *)(a1 + 104))
      v13 = v10 == 2;
    else
      v13 = 0;
    if (v13)
      goto LABEL_6;
  }
  if (*(_QWORD *)(a1 + 72) || *(_QWORD *)(a1 + 88) || *(_QWORD *)(a1 + 80))
  {
    v11 = scn_default_log();
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      return;
    *(_WORD *)buf = 0;
    v12 = "Warning: can't simplify keyframes because of tcb values";
    goto LABEL_17;
  }
  if (*(_QWORD *)(a1 + 56) || *(_QWORD *)(a1 + 64))
  {
    v11 = scn_default_log();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      v12 = "Warning: can't simplify keyframes because of timing functions";
LABEL_17:
      _os_log_impl(&dword_1DCCB8000, v11, OS_LOG_TYPE_DEFAULT, v12, buf, 2u);
    }
  }
  else
  {
    v14 = *(unsigned int *)(a1 + 24);
    if (v14 >= 3)
    {
      v41 = 0u;
      v42 = 0u;
      *(_OWORD *)buf = 0u;
      v40 = 0u;
      memset(v38, 0, sizeof(v38));
      memset(__dst, 0, sizeof(__dst));
      memset(v36, 0, sizeof(v36));
      Mutable = (const void *)C3DIndexSetCreateMutable();
      v16 = 0;
      v17 = 0;
      v18 = *(unsigned __int16 *)(a1 + 28);
      v20 = v10 == 1 || v18 == 3;
      v35 = v14;
      v21 = (v14 - 1) - 1;
      v22 = (char)v10;
      v23 = (__int16)v18;
      do
      {
        C3DKeyframeControllerGetValueAtIndex(a1, v16 + 1, buf);
        C3DKeyframeControllerGetValueAtIndex(a1, v17, __dst);
        if (v20)
        {
          v24.n128_u64[0] = 0;
          (*(void (**)(_OWORD *, _OWORD *, uint64_t, _QWORD, _QWORD, _QWORD, _OWORD *, __n128))(a1 + 32))(__dst, __dst, v22, 0, 0, 0, v38, v24);
        }
        else
        {
          C3DKeyframeControllerGetValueAtIndex(a1, v16 + 2, v36);
          KeyTimeAtIndex = C3DKeyframeControllerGetKeyTimeAtIndex(a1, (int)v16 + 1);
          v26 = C3DKeyframeControllerGetKeyTimeAtIndex(a1, v17);
          v27.n128_f64[0] = (KeyTimeAtIndex - v26) / (C3DKeyframeControllerGetKeyTimeAtIndex(a1, (int)v16 + 2) - v26);
          (*(void (**)(_OWORD *, _OWORD *, uint64_t, _QWORD, _QWORD, _QWORD, _OWORD *, __n128))(a1 + 32))(__dst, v36, v22, 0, 0, 0, v38, v27);
        }
        if (_compareValuesWithAccuracy((float *)buf, (float *)v38, v23))
          v17 = v16 + 1;
        else
          C3DIndexSetAddIndex((uint64_t)Mutable, v16 + 1);
        ++v16;
      }
      while (v21 != v16);
      Count = C3DIndexSetGetCount((uint64_t)Mutable);
      if (Count >= 1)
      {
        v29 = v35 - Count;
        v31 = *(float **)(a1 + 40);
        v30 = *(char **)(a1 + 48);
        *(_DWORD *)(a1 + 24) = v35 - Count;
        *(_QWORD *)(a1 + 40) = C3DMalloc(4 * (v35 - Count));
        v32 = C3DMalloc(v29 * *(unsigned __int8 *)(a1 + 30));
        v33 = 0;
        v34 = 0;
        *(_QWORD *)(a1 + 48) = v32;
        do
        {
          if ((C3DIndexSetContainsIndex((uint64_t)Mutable, v33) & 1) == 0)
            C3DKeyframeControllerSetKeyframeAtIndex(a1, v34++, &v30[v33 * *(unsigned __int8 *)(a1 + 30)], v22, 0, 0, 0, v31[v33], 0.0, 0.0, 0.0);
          ++v33;
        }
        while (v35 != v33);
        if (v31)
          free(v31);
        if (v30)
          free(v30);
      }
      CFRelease(Mutable);
    }
  }
}

BOOL _compareValuesWithAccuracy(float *a1, float *a2, int a3)
{
  size_t v5;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  double v11;
  unint64_t v12;
  uint64_t v13;
  double v14;
  unint64_t v15;
  uint64_t v16;
  double v17;

  switch(a3)
  {
    case 1:
    case 13:
      v12 = C3DSizeOfBaseType(a3);
      if (v12 < 4)
        return 0;
      if (vabds_f32(*a1, *a2) > 0.000001)
        return 1;
      v8 = v12 >> 2;
      v13 = 1;
      do
      {
        v10 = v13;
        if (v8 == v13)
          break;
        v14 = vabds_f32(a1[v13], a2[v13]);
        ++v13;
      }
      while (v14 <= 0.000001);
      return v10 < v8;
    case 2:
    case 3:
    case 4:
    case 5:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
      v5 = C3DSizeOfBaseType(a3);
      return memcmp(a1, a2, v5) != 0;
    case 6:
      v15 = C3DSizeOfBaseType(a3);
      if (v15 < 8)
        return 0;
      if (vabdd_f64(*(double *)a1, *(double *)a2) > 0.000001)
        return 1;
      v8 = v15 >> 3;
      v16 = 1;
      do
      {
        v10 = v16;
        if (v8 == v16)
          break;
        v17 = vabdd_f64(*(double *)&a1[2 * v16], *(double *)&a2[2 * v16]);
        ++v16;
      }
      while (v17 <= 0.000001);
      return v10 < v8;
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      v7 = C3DSizeOfBaseType(a3);
      if (v7 < 4)
        return 0;
      if (vabds_f32(*a1, *a2) > 0.000001)
        return 1;
      v8 = v7 >> 2;
      v9 = 1;
      do
      {
        v10 = v9;
        if (v8 == v9)
          break;
        v11 = vabds_f32(a1[v9], a2[v9]);
        ++v9;
      }
      while (v11 <= 0.000001);
      return v10 < v8;
    default:
      return 1;
  }
}

void C3DKeyframeControllerRemoveUselessKeys(uint64_t a1, _BYTE *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  BOOL v13;
  _OWORD v14[4];
  _OWORD __dst[4];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  _C3DKeyframeControllerRemoveUselessKeys(a1);
  if (a1 || (v4 = scn_default_log(), !os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)))
  {
    if (!a2)
      goto LABEL_5;
    goto LABEL_4;
  }
  C3DKeyframeControllerSetKeyframeAtIndex_cold_3(v4, v5, v6, v7, v8, v9, v10, v11);
  if (a2)
LABEL_4:
    *a2 = 0;
LABEL_5:
  if ((!*(_QWORD *)(a1 + 96) && !*(_QWORD *)(a1 + 104) || *(_BYTE *)(a1 + 31) != 2)
    && !*(_QWORD *)(a1 + 72)
    && !*(_QWORD *)(a1 + 88)
    && !*(_QWORD *)(a1 + 80)
    && !*(_QWORD *)(a1 + 56)
    && !*(_QWORD *)(a1 + 64)
    && C3DKeyframeControllerGetKeyCount(a1) == 2)
  {
    memset(__dst, 0, sizeof(__dst));
    memset(v14, 0, sizeof(v14));
    v12 = *(_WORD *)(a1 + 28);
    if (C3DKeyframeControllerGetValueAtIndex(a1, 0, __dst))
    {
      if (C3DKeyframeControllerGetValueAtIndex(a1, 1, v14))
      {
        v13 = _compareValuesWithAccuracy((float *)__dst, (float *)v14, v12);
        if (a2)
        {
          if (!v13)
            *a2 = 1;
        }
      }
    }
  }
}

uint64_t C3DKeyframeControllerGetValueComponentCount(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 113);
}

BOOL C3DKeyframeControllerHasTCB(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72) && *(_QWORD *)(a1 + 88) != 0;
}

BOOL C3DKeyframeControllerHasTimingFunctions(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56) != 0;
}

float C3DKeyframeControllerGetTensionAtIndex(uint64_t a1, unsigned int a2)
{
  return *(float *)(*(_QWORD *)(a1 + 72) + 4 * a2);
}

float C3DKeyframeControllerGetContinuityAtIndex(uint64_t a1, unsigned int a2)
{
  return *(float *)(*(_QWORD *)(a1 + 80) + 4 * a2);
}

float C3DKeyframeControllerGetBiasAtIndex(uint64_t a1, unsigned int a2)
{
  return *(float *)(*(_QWORD *)(a1 + 88) + 4 * a2);
}

uint64_t C3DKeyframeControllerGetTimingFunctionAtIndex(uint64_t a1, int a2)
{
  return *(_QWORD *)(a1 + 56) + 4 * (4 * a2);
}

uint64_t C3DKeyframeControllerGetOutTangentsAtIndex(uint64_t a1, int a2)
{
  return *(_QWORD *)(a1 + 104) + 8 * *(unsigned __int8 *)(a1 + 113) * a2;
}

uint64_t C3DKeyframeControllerGetInTangentsAtIndex(uint64_t a1, int a2)
{
  return *(_QWORD *)(a1 + 96) + 8 * *(unsigned __int8 *)(a1 + 113) * a2;
}

uint64_t __C3DKeyframeControllerCopyGenericSource(uint64_t a1, const UInt8 *a2, uint64_t a3, unsigned int a4, int a5, int a6)
{
  uint64_t v8;
  CFIndex v9;
  CFDataRef v10;
  CFDataRef v11;
  const void *v12;
  uint64_t Mutable;

  v8 = a4;
  v9 = a4 * a3 * *(unsigned int *)(a1 + 24);
  if (a6)
    v10 = CFDataCreate(0, a2, v9);
  else
    v10 = CFDataCreateWithBytesNoCopy(0, a2, v9, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
  v11 = v10;
  v12 = (const void *)C3DSourceAccessorCreate(a5, v8, *(unsigned int *)(a1 + 24), 0, 0);
  Mutable = C3DGenericSourceCreateMutable(v12, 0);
  C3DGenericSourceSetData(Mutable, v11);
  C3DSourceAccessorSetSource((uint64_t)v12, Mutable);
  CFRelease(v11);
  CFRelease(v12);
  return Mutable;
}

uint64_t C3DKeyframeControllerCopyValuesAsGenericSource(uint64_t a1)
{
  const UInt8 *v1;

  v1 = *(const UInt8 **)(a1 + 48);
  if (v1)
    return __C3DKeyframeControllerCopyGenericSource(a1, v1, *(unsigned __int8 *)(a1 + 30), 1u, *(__int16 *)(a1 + 28), 0);
  else
    return 0;
}

void _C3DKeyframeControllerCFFinalize(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v2 = (void *)a1[5];
  if (v2)
    free(v2);
  v3 = (void *)a1[6];
  if (v3)
    free(v3);
  v4 = (void *)a1[7];
  if (v4)
    free(v4);
  v5 = (void *)a1[8];
  if (v5)
    free(v5);
  v6 = (void *)a1[9];
  if (v6)
    free(v6);
  v7 = (void *)a1[10];
  if (v7)
    free(v7);
  v8 = (void *)a1[11];
  if (v8)
    free(v8);
  v9 = (void *)a1[12];
  if (v9)
    free(v9);
  v10 = (void *)a1[13];
  if (v10)
    free(v10);
}

CFStringRef _C3DKeyframeControllerCFCopyFormatDescription(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DKeyframeController %p>"), a1);
}

CFStringRef _C3DKeyframeControllerCFCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DKeyframeController %p>"), a1);
}

uint64_t _C3DKeyframeControllerInitWithPropertyList(uint64_t a1, CFDictionaryRef theDict, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const __CFString *Value;
  double v17;
  const void *v18;
  uint64_t v19;
  const void *Empty;
  const __CFNumber *v21;
  const __CFNumber *v22;
  CFTypeID v23;
  int v24;
  const __CFNumber *v25;
  const __CFNumber *v26;
  CFTypeID v27;
  const __CFData *v28;
  const __CFData *v29;
  const __CFNumber *v30;
  const __CFNumber *v31;
  CFTypeID v32;
  int v33;
  unint64_t Length;
  unint64_t v35;
  const UInt8 *BytePtr;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  const __CFArray *v48;
  const __CFArray *v49;
  unsigned int Count;
  uint64_t v51;
  unsigned int v52;
  unsigned int i;
  const void *ValueAtIndex;
  CFTypeID v55;
  const __CFBoolean *v56;
  const __CFBoolean *v57;
  NSObject *v58;
  CFTypeID v59;
  NSObject *v60;
  const __CFNumber *v61;
  CFNumberType v62;
  CFTypeID v63;
  NSObject *v64;
  CFTypeID v65;
  NSObject *v66;
  CFTypeID v67;
  NSObject *v68;
  CFTypeID v69;
  NSObject *v70;
  CFTypeID v71;
  NSObject *v72;
  NSObject *v73;
  int KeyCount;
  double KeyTimeAtIndex;
  const __CFData *v77;
  const __CFData *v78;
  const __CFArray *v79;
  __CFData *DeserializedDataWithAccessors;
  NSObject *v81;
  const void *v82;
  uint64_t v83;
  const void *v84;
  const __CFData *v85;
  const __CFData *v86;
  const __CFArray *v87;
  __CFData *v88;
  NSObject *v89;
  const void *v90;
  uint64_t v91;
  const void *v92;
  const __CFData *v93;
  const __CFData *v94;
  const __CFArray *v95;
  __CFData *v96;
  NSObject *v97;
  const void *v98;
  uint64_t v99;
  const __CFData *v100;
  const __CFData *v101;
  const __CFArray *v102;
  __CFData *v103;
  NSObject *v104;
  const void *v105;
  uint64_t v106;
  const __CFData *v107;
  const __CFData *v108;
  const __CFArray *v109;
  __CFData *v110;
  NSObject *v111;
  const void *v112;
  uint64_t v113;
  const __CFData *v114;
  const __CFData *v115;
  const __CFArray *v116;
  __CFData *v117;
  NSObject *v118;
  const void *v119;
  uint64_t v120;
  const __CFData *v121;
  const __CFData *v122;
  const __CFArray *v123;
  __CFData *v124;
  NSObject *v125;
  const void *v126;
  uint64_t v127;
  const __CFData *v128;
  const __CFData *v129;
  const __CFArray *v130;
  __CFData *v131;
  NSObject *v132;
  const void *v133;
  uint64_t v134;
  const void *v135;
  uint64_t v136;
  const __CFData *v137;
  const __CFData *v138;
  const __CFArray *v139;
  __CFData *v140;
  NSObject *v141;
  uint64_t Accessor;
  unsigned int ComponentsValueType;
  unsigned int v144;
  const __CFNumber *v145;
  const __CFNumber *v146;
  CFTypeID v147;
  char v148;
  NSObject *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t j;
  const void *v158;
  uint64_t v159;
  uint64_t v160;
  unsigned int v161;
  uint64_t v162;
  const void *v163;
  const UInt8 *ValuePtrAtIndex;
  UInt8 *v165;
  _QWORD *v166;
  float *v167;
  _QWORD *v168;
  uint64_t v169;
  const UInt8 *v170;
  double v171;
  float v172;
  float v173;
  _QWORD *v174;
  _QWORD *v175;
  _QWORD *v176;
  float v177;
  _QWORD *v178;
  const UInt8 *v179;
  _QWORD *v180;
  const UInt8 *v181;
  uint64_t v182;
  const void *v183;
  const __CFNumber *v184;
  const __CFNumber *v185;
  CFTypeID v186;
  const __CFNumber *v187;
  const __CFNumber *v188;
  CFTypeID v189;
  NSObject *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  int v198;
  int v199;
  const __CFDictionary *v200;
  _QWORD *v201;
  _QWORD *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint8_t v208;
  _BYTE v209[15];
  uint8_t v210;
  _BYTE v211[7];
  double v212;
  __int128 valuePtr;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  const void *v217;
  uint8_t v218[4];
  uint64_t v219;
  uint8_t v220[4];
  uint64_t v221;
  uint8_t v222[4];
  uint64_t v223;
  uint8_t v224[4];
  uint64_t v225;
  uint8_t v226[4];
  uint64_t v227;
  void *values[4];

  v7 = a1;
  values[2] = *(void **)MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v8 = scn_default_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      _C3DGeometryFillLibraryForSerialization_cold_1(v8, v9, v10, v11, v12, v13, v14, v15);
  }
  Value = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("keyframeVersion"));
  if (!Value)
  {
    v17 = 0.04;
    goto LABEL_9;
  }
  v17 = C3DParseVersionNumber(Value);
  if (v17 <= 0.11)
  {
LABEL_9:
    v21 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("keyframeType"));
    if (v21 && (v22 = v21, v23 = CFGetTypeID(v21), v23 == CFNumberGetTypeID()))
    {
      LODWORD(valuePtr) = 0;
      CFNumberGetValue(v22, kCFNumberIntType, &valuePtr);
      v24 = valuePtr;
    }
    else
    {
      v24 = 0;
    }
    if (v17 < 0.05)
    {
      if ((v24 - 3) > 2)
      {
        if ((v24 - 6) < 3)
          LOWORD(v24) = v24 - 3;
      }
      else
      {
        LOWORD(v24) = v24 + 5;
      }
    }
    v25 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("keyCount"));
    if (v25)
    {
      v26 = v25;
      v27 = CFGetTypeID(v25);
      if (v27 == CFNumberGetTypeID())
      {
        LODWORD(valuePtr) = 0;
        CFNumberGetValue(v26, kCFNumberIntType, &valuePtr);
      }
    }
    v28 = (const __CFData *)CFDictionaryGetValue(theDict, CFSTR("data"));
    if (v28)
    {
      v29 = v28;
      v30 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("keyCount"));
      if (v30 && (v31 = v30, v32 = CFGetTypeID(v30), v32 == CFNumberGetTypeID()))
      {
        LODWORD(valuePtr) = 0;
        CFNumberGetValue(v31, kCFNumberIntType, &valuePtr);
        v33 = valuePtr;
      }
      else
      {
        v33 = 0;
      }
      Length = CFDataGetLength(v29);
      v35 = C3DSizeOfBaseType((__int16)v24) + 8;
      BytePtr = CFDataGetBytePtr(v29);
      if (v33 != (Length / v35))
      {
        v37 = scn_default_log();
        if (os_log_type_enabled(v37, OS_LOG_TYPE_FAULT))
          _C3DKeyframeControllerInitWithPropertyList_cold_9(v37, v38, v39, v40, v41, v42, v43, v44);
      }
      v45 = (int)Length / v35;
      _C3DKeyframeControllerSetupWithCapacity(v7, v45, (__int16)v24, 0, 0, 0, 0, 0);
      if ((_DWORD)v45)
      {
        v46 = 0;
        v47 = (char *)(BytePtr + 8);
        do
        {
          C3DKeyframeControllerSetKeyframeAtIndex(v7, v46++, v47, 0, 0, 0, 0, *((double *)v47 - 1), 0.0, 0.0, 0.0);
          v47 += v35;
        }
        while (v45 != v46);
      }
    }
    else
    {
      v48 = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("keyframes"));
      if (v48)
      {
        v49 = v48;
        Count = CFArrayGetCount(v48);
        v51 = v7;
        _C3DKeyframeControllerSetupWithCapacity(v7, Count, (__int16)v24, 0, 0, 0, 0, 0);
        v52 = CFArrayGetCount(v49);
        if (v52 >= 2)
        {
          v212 = 0.0;
          valuePtr = 0u;
          v214 = 0u;
          v215 = 0u;
          v216 = 0u;
          for (i = 1; i < v52; i += 2)
          {
            ValueAtIndex = CFArrayGetValueAtIndex(v49, i - 1);
            v55 = CFGetTypeID(ValueAtIndex);
            if (v55 == CFNumberGetTypeID())
            {
              CFNumberGetValue((CFNumberRef)ValueAtIndex, kCFNumberDoubleType, &v212);
              v56 = (const __CFBoolean *)CFArrayGetValueAtIndex(v49, i);
              v57 = v56;
              switch((__int16)v24)
              {
                case 1:
                  v63 = CFGetTypeID(v56);
                  if (v63 != CFNumberGetTypeID())
                  {
                    v64 = scn_default_log();
                    if (os_log_type_enabled(v64, OS_LOG_TYPE_FAULT))
                      _C3DKeyframeControllerInitWithPropertyList_cold_2((uint8_t *)values, (void **)((char *)values + 4), v64);
                  }
                  v61 = v57;
                  v62 = kCFNumberFloatType;
                  goto LABEL_65;
                case 2:
                  v65 = CFGetTypeID(v56);
                  if (v65 != CFNumberGetTypeID())
                  {
                    v66 = scn_default_log();
                    if (os_log_type_enabled(v66, OS_LOG_TYPE_FAULT))
                      _C3DKeyframeControllerInitWithPropertyList_cold_2(v226, &v227, v66);
                  }
                  v61 = v57;
                  v62 = kCFNumberIntType;
                  goto LABEL_65;
                case 3:
                  v67 = CFGetTypeID(v56);
                  if (v67 != CFBooleanGetTypeID())
                  {
                    v68 = scn_default_log();
                    if (os_log_type_enabled(v68, OS_LOG_TYPE_FAULT))
                      _C3DKeyframeControllerInitWithPropertyList_cold_4(v224, &v225, v68);
                  }
                  LOBYTE(valuePtr) = CFBooleanGetValue(v57) != 0;
                  break;
                case 4:
                case 16:
                  v59 = CFGetTypeID(v56);
                  if (v59 != CFNumberGetTypeID())
                  {
                    v60 = scn_default_log();
                    if (os_log_type_enabled(v60, OS_LOG_TYPE_FAULT))
                      _C3DKeyframeControllerInitWithPropertyList_cold_2(v222, &v223, v60);
                  }
                  v61 = v57;
                  v62 = kCFNumberCharType;
                  goto LABEL_65;
                case 5:
                  v69 = CFGetTypeID(v56);
                  if (v69 != CFNumberGetTypeID())
                  {
                    v70 = scn_default_log();
                    if (os_log_type_enabled(v70, OS_LOG_TYPE_FAULT))
                      _C3DKeyframeControllerInitWithPropertyList_cold_2(v220, &v221, v70);
                  }
                  v61 = v57;
                  v62 = kCFNumberLongType;
                  goto LABEL_65;
                case 6:
                  v71 = CFGetTypeID(v56);
                  if (v71 != CFNumberGetTypeID())
                  {
                    v72 = scn_default_log();
                    if (os_log_type_enabled(v72, OS_LOG_TYPE_FAULT))
                      _C3DKeyframeControllerInitWithPropertyList_cold_2(v218, &v219, v72);
                  }
                  v61 = v57;
                  v62 = kCFNumberDoubleType;
LABEL_65:
                  CFNumberGetValue(v61, v62, &valuePtr);
                  break;
                case 8:
                case 9:
                case 10:
                case 11:
                case 13:
                  C3DInitC3DFloatArrayWithPropertyList(v56, &valuePtr, 0);
                  break;
                default:
                  v73 = scn_default_log();
                  if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
                    _C3DKeyframeControllerInitWithPropertyList_cold_1(&v208, v209, v73);
                  break;
              }
              C3DKeyframeControllerSetKeyframeAtIndex(v51, i - 1, &valuePtr, 0, 0, 0, 0, v212, 0.0, 0.0, 0.0);
            }
            else
            {
              v58 = scn_default_log();
              if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
                _C3DKeyframeControllerInitWithPropertyList_cold_8(&v210, v211, v58);
            }
          }
        }
        v7 = v51;
      }
    }
    *(_QWORD *)(v7 + 32) = C3DKeyFrameInterpolatorForType((__int16)v24, 0, 0, *(char *)(v7 + 31), *(_QWORD *)(v7 + 64) == 0);
LABEL_73:
    KeyCount = C3DKeyframeControllerGetKeyCount(v7);
    if (KeyCount)
      KeyTimeAtIndex = C3DKeyframeControllerGetKeyTimeAtIndex(v7, KeyCount - 1);
    else
      KeyTimeAtIndex = 0.0;
    *(double *)(v7 + 16) = KeyTimeAtIndex;
    return 1;
  }
  v217 = 0;
  v215 = 0u;
  v216 = 0u;
  valuePtr = 0u;
  v214 = 0u;
  v18 = CFDictionaryGetValue(theDict, CFSTR("keytimes"));
  if (v18)
  {
    v19 = (uint64_t)v18;
    Empty = (const void *)C3DGenericSourceCreateEmpty();
    *(_QWORD *)&valuePtr = Empty;
    C3DInitWithPropertyList(Empty, v19, a3, a4);
  }
  else
  {
    Empty = 0;
  }
  v77 = (const __CFData *)CFDictionaryGetValue(theDict, CFSTR("keytimes-data"));
  if (v77 && Empty)
  {
    v78 = v77;
    values[0] = (void *)C3DGenericSourceGetAccessor((uint64_t)Empty);
    v79 = CFArrayCreate(0, (const void **)values, 1, MEMORY[0x1E0C9B378]);
    DeserializedDataWithAccessors = C3DGenericSourceCreateDeserializedDataWithAccessors((uint64_t)Empty, v78, v79);
    C3DSourceAccessorsConvertToCurrentPlatform(v79);
    CFRelease(v79);
    if (DeserializedDataWithAccessors)
    {
      C3DGenericSourceSetData((uint64_t)Empty, DeserializedDataWithAccessors);
      CFRelease(DeserializedDataWithAccessors);
    }
    else
    {
      v81 = scn_default_log();
      if (os_log_type_enabled(v81, OS_LOG_TYPE_ERROR))
        _C3DKeyframeControllerInitWithPropertyList_cold_12();
    }
  }
  v82 = CFDictionaryGetValue(theDict, CFSTR("values"));
  if (v82)
  {
    v83 = (uint64_t)v82;
    v84 = (const void *)C3DGenericSourceCreateEmpty();
    *((_QWORD *)&valuePtr + 1) = v84;
    C3DInitWithPropertyList(v84, v83, a3, a4);
  }
  else
  {
    v84 = 0;
  }
  v85 = (const __CFData *)CFDictionaryGetValue(theDict, CFSTR("values-data"));
  if (v85 && v84)
  {
    v86 = v85;
    values[0] = 0;
    values[0] = (void *)C3DGenericSourceGetAccessor((uint64_t)v84);
    v87 = CFArrayCreate(0, (const void **)values, 1, MEMORY[0x1E0C9B378]);
    v88 = C3DGenericSourceCreateDeserializedDataWithAccessors((uint64_t)v84, v86, v87);
    C3DSourceAccessorsConvertToCurrentPlatform(v87);
    CFRelease(v87);
    if (v88)
    {
      C3DGenericSourceSetData((uint64_t)v84, v88);
      CFRelease(v88);
    }
    else
    {
      v89 = scn_default_log();
      if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR))
        _C3DKeyframeControllerInitWithPropertyList_cold_12();
    }
  }
  v90 = CFDictionaryGetValue(theDict, CFSTR("timingFunctions"));
  if (v90)
  {
    v91 = (uint64_t)v90;
    v92 = (const void *)C3DGenericSourceCreateEmpty();
    *(_QWORD *)&v214 = v92;
    C3DInitWithPropertyList(v92, v91, a3, a4);
  }
  else
  {
    v92 = 0;
  }
  v93 = (const __CFData *)CFDictionaryGetValue(theDict, CFSTR("timingFunctions-data"));
  if (v93 && v92)
  {
    v94 = v93;
    values[0] = 0;
    values[0] = (void *)C3DGenericSourceGetAccessor((uint64_t)v92);
    v95 = CFArrayCreate(0, (const void **)values, 1, MEMORY[0x1E0C9B378]);
    v96 = C3DGenericSourceCreateDeserializedDataWithAccessors((uint64_t)v92, v94, v95);
    C3DSourceAccessorsConvertToCurrentPlatform(v95);
    CFRelease(v95);
    if (v96)
    {
      C3DGenericSourceSetData((uint64_t)v92, v96);
      CFRelease(v96);
    }
    else
    {
      v97 = scn_default_log();
      if (os_log_type_enabled(v97, OS_LOG_TYPE_ERROR))
        _C3DKeyframeControllerInitWithPropertyList_cold_12();
    }
  }
  v98 = CFDictionaryGetValue(theDict, CFSTR("interpolationModes"));
  if (v98)
  {
    v99 = (uint64_t)v98;
    *((_QWORD *)&v214 + 1) = C3DGenericSourceCreateEmpty();
    v207 = *((_QWORD *)&v214 + 1);
    C3DInitWithPropertyList(*((const void **)&v214 + 1), v99, a3, a4);
  }
  else
  {
    v207 = 0;
  }
  v100 = (const __CFData *)CFDictionaryGetValue(theDict, CFSTR("interpolationModes-data"));
  if (v100 && v207)
  {
    v101 = v100;
    values[0] = 0;
    values[0] = (void *)C3DGenericSourceGetAccessor(v207);
    v102 = CFArrayCreate(0, (const void **)values, 1, MEMORY[0x1E0C9B378]);
    v103 = C3DGenericSourceCreateDeserializedDataWithAccessors(v207, v101, v102);
    C3DSourceAccessorsConvertToCurrentPlatform(v102);
    CFRelease(v102);
    if (v103)
    {
      C3DGenericSourceSetData(v207, v103);
      CFRelease(v103);
    }
    else
    {
      v104 = scn_default_log();
      if (os_log_type_enabled(v104, OS_LOG_TYPE_ERROR))
        _C3DKeyframeControllerInitWithPropertyList_cold_12();
    }
  }
  v105 = CFDictionaryGetValue(theDict, CFSTR("tensionValues"));
  if (v105)
  {
    v106 = (uint64_t)v105;
    *(_QWORD *)&v215 = C3DGenericSourceCreateEmpty();
    v206 = v215;
    C3DInitWithPropertyList((const void *)v215, v106, a3, a4);
  }
  else
  {
    v206 = 0;
  }
  v107 = (const __CFData *)CFDictionaryGetValue(theDict, CFSTR("tensionValues-data"));
  if (v107 && v206)
  {
    v108 = v107;
    values[0] = 0;
    values[0] = (void *)C3DGenericSourceGetAccessor(v206);
    v109 = CFArrayCreate(0, (const void **)values, 1, MEMORY[0x1E0C9B378]);
    v110 = C3DGenericSourceCreateDeserializedDataWithAccessors(v206, v108, v109);
    C3DSourceAccessorsConvertToCurrentPlatform(v109);
    CFRelease(v109);
    if (v110)
    {
      C3DGenericSourceSetData(v206, v110);
      CFRelease(v110);
    }
    else
    {
      v111 = scn_default_log();
      if (os_log_type_enabled(v111, OS_LOG_TYPE_ERROR))
        _C3DKeyframeControllerInitWithPropertyList_cold_12();
    }
  }
  v112 = CFDictionaryGetValue(theDict, CFSTR("continuityValues"));
  if (v112)
  {
    v113 = (uint64_t)v112;
    *((_QWORD *)&v215 + 1) = C3DGenericSourceCreateEmpty();
    v204 = *((_QWORD *)&v215 + 1);
    C3DInitWithPropertyList(*((const void **)&v215 + 1), v113, a3, a4);
  }
  else
  {
    v204 = 0;
  }
  v114 = (const __CFData *)CFDictionaryGetValue(theDict, CFSTR("continuityValues-data"));
  if (v114 && v204)
  {
    v115 = v114;
    values[0] = 0;
    values[0] = (void *)C3DGenericSourceGetAccessor(v204);
    v116 = CFArrayCreate(0, (const void **)values, 1, MEMORY[0x1E0C9B378]);
    v117 = C3DGenericSourceCreateDeserializedDataWithAccessors(v204, v115, v116);
    C3DSourceAccessorsConvertToCurrentPlatform(v116);
    CFRelease(v116);
    if (v117)
    {
      C3DGenericSourceSetData(v204, v117);
      CFRelease(v117);
    }
    else
    {
      v118 = scn_default_log();
      if (os_log_type_enabled(v118, OS_LOG_TYPE_ERROR))
        _C3DKeyframeControllerInitWithPropertyList_cold_12();
    }
  }
  v119 = CFDictionaryGetValue(theDict, CFSTR("biasValues"));
  if (v119)
  {
    v120 = (uint64_t)v119;
    *(_QWORD *)&v216 = C3DGenericSourceCreateEmpty();
    v203 = v216;
    C3DInitWithPropertyList((const void *)v216, v120, a3, a4);
  }
  else
  {
    v203 = 0;
  }
  v121 = (const __CFData *)CFDictionaryGetValue(theDict, CFSTR("biasValues-data"));
  if (v121 && v203)
  {
    v122 = v121;
    values[0] = 0;
    values[0] = (void *)C3DGenericSourceGetAccessor(v203);
    v123 = CFArrayCreate(0, (const void **)values, 1, MEMORY[0x1E0C9B378]);
    v124 = C3DGenericSourceCreateDeserializedDataWithAccessors(v203, v122, v123);
    C3DSourceAccessorsConvertToCurrentPlatform(v123);
    CFRelease(v123);
    if (v124)
    {
      C3DGenericSourceSetData(v203, v124);
      CFRelease(v124);
    }
    else
    {
      v125 = scn_default_log();
      if (os_log_type_enabled(v125, OS_LOG_TYPE_ERROR))
        _C3DKeyframeControllerInitWithPropertyList_cold_12();
    }
  }
  v126 = CFDictionaryGetValue(theDict, CFSTR("inTangents"));
  if (v126)
  {
    v127 = (uint64_t)v126;
    *((_QWORD *)&v216 + 1) = C3DGenericSourceCreateEmpty();
    v205 = *((_QWORD *)&v216 + 1);
    C3DInitWithPropertyList(*((const void **)&v216 + 1), v127, a3, a4);
  }
  else
  {
    v205 = 0;
  }
  v128 = (const __CFData *)CFDictionaryGetValue(theDict, CFSTR("inTangents-data"));
  if (v128 && v205)
  {
    v129 = v128;
    values[0] = 0;
    values[0] = (void *)C3DGenericSourceGetAccessor(v205);
    v130 = CFArrayCreate(0, (const void **)values, 1, MEMORY[0x1E0C9B378]);
    v131 = C3DGenericSourceCreateDeserializedDataWithAccessors(v205, v129, v130);
    C3DSourceAccessorsConvertToCurrentPlatform(v130);
    CFRelease(v130);
    if (v131)
    {
      C3DGenericSourceSetData(v205, v131);
      CFRelease(v131);
    }
    else
    {
      v132 = scn_default_log();
      if (os_log_type_enabled(v132, OS_LOG_TYPE_ERROR))
        _C3DKeyframeControllerInitWithPropertyList_cold_12();
    }
  }
  v133 = CFDictionaryGetValue(theDict, CFSTR("outTangents"));
  if (v133)
  {
    v134 = (uint64_t)v133;
    v135 = (const void *)C3DGenericSourceCreateEmpty();
    v217 = v135;
    C3DInitWithPropertyList(v135, v134, a3, a4);
  }
  else
  {
    v135 = 0;
  }
  v136 = v207;
  v137 = (const __CFData *)CFDictionaryGetValue(theDict, CFSTR("outTangents-data"));
  if (v137 && v135)
  {
    v138 = v137;
    values[0] = 0;
    values[0] = (void *)C3DGenericSourceGetAccessor((uint64_t)v135);
    v139 = CFArrayCreate(0, (const void **)values, 1, MEMORY[0x1E0C9B378]);
    v140 = C3DGenericSourceCreateDeserializedDataWithAccessors((uint64_t)v135, v138, v139);
    C3DSourceAccessorsConvertToCurrentPlatform(v139);
    CFRelease(v139);
    if (v140)
    {
      C3DGenericSourceSetData((uint64_t)v135, v140);
      CFRelease(v140);
    }
    else
    {
      v141 = scn_default_log();
      if (os_log_type_enabled(v141, OS_LOG_TYPE_ERROR))
        _C3DKeyframeControllerInitWithPropertyList_cold_12();
    }
  }
  Accessor = C3DGenericSourceGetAccessor((uint64_t)Empty);
  v201 = (_QWORD *)C3DGenericSourceGetAccessor((uint64_t)v84);
  ComponentsValueType = C3DSourceAccessorGetComponentsValueType((uint64_t)v201);
  v202 = (_QWORD *)Accessor;
  v144 = C3DSourceAccessorGetCount(Accessor);
  if (v144)
  {
    if (ComponentsValueType)
    {
      v200 = theDict;
      v145 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("semantic"));
      if (v145 && (v146 = v145, v147 = CFGetTypeID(v145), v147 == CFNumberGetTypeID()))
      {
        LODWORD(values[0]) = 0;
        CFNumberGetValue(v146, kCFNumberIntType, values);
        v148 = (char)values[0];
      }
      else
      {
        v148 = 0;
      }
      v159 = v7;
      v198 = v148;
      v199 = ComponentsValueType;
      _C3DKeyframeControllerSetupWithCapacity(v7, v144, ComponentsValueType, v148, v207 != 0, v92 != 0, v206 != 0, v205 != 0);
      v160 = 0;
      v161 = v144 - 2;
      v162 = v144;
      v163 = v92;
      while (1)
      {
        ValuePtrAtIndex = C3DSourceAccessorGetValuePtrAtIndex(v202, v160);
        v165 = (UInt8 *)C3DSourceAccessorGetValuePtrAtIndex(v201, v160);
        if (v92)
        {
          v166 = (_QWORD *)C3DGenericSourceGetAccessor((uint64_t)v92);
          v167 = (float *)C3DSourceAccessorGetValuePtrAtIndex(v166, v160);
          if (!v167)
          {
            v92 = 0;
            if (!v136)
              goto LABEL_182;
            goto LABEL_174;
          }
          v92 = (const void *)C3DTimingFunctionCreateWithControlPoints(*v167, v167[1], v167[2], v167[3]);
        }
        if (!v136)
          goto LABEL_182;
LABEL_174:
        v168 = (_QWORD *)C3DGenericSourceGetAccessor(v136);
        if (v160 >= v161)
          v169 = v161;
        else
          v169 = v160;
        v170 = C3DSourceAccessorGetValuePtrAtIndex(v168, v169);
        if (v170)
          LOBYTE(v136) = *v170;
        else
          LOBYTE(v136) = 0;
LABEL_182:
        v171 = *(double *)ValuePtrAtIndex;
        v172 = 0.0;
        v173 = 0.0;
        if (v206)
        {
          v174 = (_QWORD *)C3DGenericSourceGetAccessor(v206);
          v173 = *(float *)C3DSourceAccessorGetValuePtrAtIndex(v174, v160);
        }
        if (v204)
        {
          v175 = (_QWORD *)C3DGenericSourceGetAccessor(v204);
          v172 = *(float *)C3DSourceAccessorGetValuePtrAtIndex(v175, v160);
        }
        if (v203)
        {
          v176 = (_QWORD *)C3DGenericSourceGetAccessor(v203);
          v177 = *(float *)C3DSourceAccessorGetValuePtrAtIndex(v176, v160);
        }
        else
        {
          v177 = 0.0;
        }
        if (v205)
        {
          v178 = (_QWORD *)C3DGenericSourceGetAccessor(v205);
          v179 = C3DSourceAccessorGetValuePtrAtIndex(v178, v160);
          if (!v135)
            goto LABEL_193;
        }
        else
        {
          v179 = 0;
          if (!v135)
          {
LABEL_193:
            v181 = 0;
            goto LABEL_194;
          }
        }
        v180 = (_QWORD *)C3DGenericSourceGetAccessor((uint64_t)v135);
        v181 = C3DSourceAccessorGetValuePtrAtIndex(v180, v160);
LABEL_194:
        C3DKeyframeControllerSetKeyframeAtIndex(v159, v160, v165, v136, (uint64_t)v92, v179, v181, v171, v173, v172, v177);
        if (v92)
          CFRelease(v92);
        ++v160;
        v92 = v163;
        v136 = v207;
        if (v162 == v160)
        {
          v182 = 0;
          v7 = v159;
          do
          {
            v183 = *(const void **)((char *)&valuePtr + v182);
            if (v183)
            {
              CFRelease(v183);
              *(_QWORD *)((char *)&valuePtr + v182) = 0;
            }
            v182 += 8;
          }
          while (v182 != 72);
          *(_QWORD *)(v159 + 32) = C3DKeyFrameInterpolatorForType(v199, v198, 0, *(char *)(v159 + 31), *(_QWORD *)(v159 + 64) == 0);
          v184 = (const __CFNumber *)CFDictionaryGetValue(v200, CFSTR("interpolationMode"));
          if (v184)
          {
            v185 = v184;
            v186 = CFGetTypeID(v184);
            if (v186 == CFNumberGetTypeID())
            {
              LODWORD(values[0]) = 0;
              CFNumberGetValue(v185, kCFNumberIntType, values);
              *(_BYTE *)(v159 + 31) = values[0];
            }
          }
          v187 = (const __CFNumber *)CFDictionaryGetValue(v200, CFSTR("calculationMode"));
          if (v187 && (v188 = v187, v189 = CFGetTypeID(v187), v189 == CFNumberGetTypeID()))
          {
            LODWORD(values[0]) = 0;
            CFNumberGetValue(v188, kCFNumberIntType, values);
            *(_BYTE *)(v159 + 112) = values[0];
          }
          else if (!v159)
          {
            v190 = scn_default_log();
            if (os_log_type_enabled(v190, OS_LOG_TYPE_FAULT))
              C3DKeyframeControllerSetKeyframeAtIndex_cold_3(v190, v191, v192, v193, v194, v195, v196, v197);
          }
          goto LABEL_73;
        }
      }
    }
  }
  else
  {
    v149 = scn_default_log();
    if (os_log_type_enabled(v149, OS_LOG_TYPE_FAULT))
      _C3DKeyframeControllerInitWithPropertyList_cold_10(v149, v150, v151, v152, v153, v154, v155, v156);
  }
  for (j = 0; j != 72; j += 8)
  {
    v158 = *(const void **)((char *)&valuePtr + j);
    if (v158)
    {
      CFRelease(v158);
      *(_QWORD *)((char *)&valuePtr + j) = 0;
    }
  }
  return 0;
}

__CFDictionary *_C3DKeyframeControllerCopyPropertyList(char *cf, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const __CFAllocator *v16;
  __CFDictionary *Mutable;
  CFNumberRef v18;
  CFNumberRef v19;
  const UInt8 *v20;
  UInt8 *v21;
  uint64_t v22;
  float *v23;
  double *v24;
  float v25;
  const void *v26;
  const void *v27;
  const void *v28;
  const __CFArray *v29;
  CFDataRef SerializedDataWithAccessors;
  const void *v31;
  const void *v32;
  const void *v33;
  const void *v34;
  const __CFArray *v35;
  CFDataRef v36;
  const UInt8 *v37;
  const void *v38;
  const void *v39;
  const void *v40;
  const void *v41;
  const __CFArray *v42;
  CFDataRef v43;
  const UInt8 *v44;
  const void *v45;
  const void *v46;
  const void *v47;
  const void *v48;
  const __CFArray *v49;
  CFDataRef v50;
  const UInt8 *v51;
  const void *v52;
  const void *v53;
  const void *v54;
  const void *v55;
  const __CFArray *v56;
  CFDataRef v57;
  const UInt8 *v58;
  const void *v59;
  const void *v60;
  const void *v61;
  const void *v62;
  const __CFArray *v63;
  CFDataRef v64;
  const UInt8 *v65;
  const void *v66;
  const void *v67;
  const void *v68;
  const void *v69;
  const __CFArray *v70;
  CFDataRef v71;
  const UInt8 *v72;
  const void *v73;
  const void *v74;
  const void *v75;
  const void *v76;
  const __CFArray *v77;
  CFDataRef v78;
  const UInt8 *v79;
  const void *v80;
  const void *v81;
  const void *v82;
  const void *v83;
  const __CFArray *v84;
  CFDataRef v85;
  int KeyframeSemantic;
  CFNumberRef v87;
  uint64_t valuePtr;

  if (!cf)
  {
    v8 = scn_default_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      _C3DGeometryFillLibraryForSerialization_cold_1(v8, v9, v10, v11, v12, v13, v14, v15);
  }
  v16 = CFGetAllocator(cf);
  Mutable = CFDictionaryCreateMutable(v16, 15, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionaryAddValue(Mutable, CFSTR("keyframeVersion"), CFSTR("0.12"));
  LODWORD(valuePtr) = cf[31];
  v18 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  CFDictionaryAddValue(Mutable, CFSTR("interpolationMode"), v18);
  CFRelease(v18);
  LODWORD(valuePtr) = cf[112];
  v19 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  CFDictionaryAddValue(Mutable, CFSTR("calculationMode"), v19);
  CFRelease(v19);
  if (*((_QWORD *)cf + 5))
  {
    v20 = (const UInt8 *)C3DMalloc(8 * *((unsigned int *)cf + 6));
    v21 = (UInt8 *)v20;
    v22 = *((unsigned int *)cf + 6);
    if ((_DWORD)v22)
    {
      v23 = (float *)*((_QWORD *)cf + 5);
      v24 = (double *)v20;
      do
      {
        v25 = *v23++;
        *v24++ = v25;
        --v22;
      }
      while (v22);
    }
    v26 = (const void *)__C3DKeyframeControllerCopyGenericSource((uint64_t)cf, v20, 8, 1u, 6, 1);
    free(v21);
    if (v26)
    {
      v27 = (const void *)C3DCopyPropertyList(v26, a2, a3, a4);
      if (v27)
      {
        v28 = v27;
        CFDictionaryAddValue(Mutable, CFSTR("keytimes"), v27);
        CFRelease(v28);
      }
      if (Mutable)
      {
        valuePtr = 0;
        valuePtr = C3DGenericSourceGetAccessor((uint64_t)v26);
        v29 = CFArrayCreate(0, (const void **)&valuePtr, 1, MEMORY[0x1E0C9B378]);
        SerializedDataWithAccessors = C3DGenericSourceCreateSerializedDataWithAccessors((uint64_t)v26, v29);
        CFRelease(v29);
        CFDictionaryAddValue(Mutable, CFSTR("keytimes-data"), SerializedDataWithAccessors);
        CFRelease(SerializedDataWithAccessors);
      }
      CFRelease(v26);
    }
  }
  v31 = (const void *)C3DKeyframeControllerCopyValuesAsGenericSource((uint64_t)cf);
  if (v31)
  {
    v32 = v31;
    v33 = (const void *)C3DCopyPropertyList(v31, a2, a3, a4);
    if (v33)
    {
      v34 = v33;
      CFDictionaryAddValue(Mutable, CFSTR("values"), v33);
      CFRelease(v34);
    }
    if (Mutable)
    {
      valuePtr = 0;
      valuePtr = C3DGenericSourceGetAccessor((uint64_t)v32);
      v35 = CFArrayCreate(0, (const void **)&valuePtr, 1, MEMORY[0x1E0C9B378]);
      v36 = C3DGenericSourceCreateSerializedDataWithAccessors((uint64_t)v32, v35);
      CFRelease(v35);
      CFDictionaryAddValue(Mutable, CFSTR("values-data"), v36);
      CFRelease(v36);
    }
    CFRelease(v32);
  }
  v37 = (const UInt8 *)*((_QWORD *)cf + 7);
  if (v37)
  {
    v38 = (const void *)__C3DKeyframeControllerCopyGenericSource((uint64_t)cf, v37, 4, 4u, 7, 0);
    if (v38)
    {
      v39 = v38;
      v40 = (const void *)C3DCopyPropertyList(v38, a2, a3, a4);
      if (v40)
      {
        v41 = v40;
        CFDictionaryAddValue(Mutable, CFSTR("timingFunctions"), v40);
        CFRelease(v41);
      }
      if (Mutable)
      {
        valuePtr = 0;
        valuePtr = C3DGenericSourceGetAccessor((uint64_t)v39);
        v42 = CFArrayCreate(0, (const void **)&valuePtr, 1, MEMORY[0x1E0C9B378]);
        v43 = C3DGenericSourceCreateSerializedDataWithAccessors((uint64_t)v39, v42);
        CFRelease(v42);
        CFDictionaryAddValue(Mutable, CFSTR("timingFunctions-data"), v43);
        CFRelease(v43);
      }
      CFRelease(v39);
    }
  }
  v44 = (const UInt8 *)*((_QWORD *)cf + 8);
  if (v44)
  {
    v45 = (const void *)__C3DKeyframeControllerCopyGenericSource((uint64_t)cf, v44, 1, 1u, 4, 0);
    if (v45)
    {
      v46 = v45;
      v47 = (const void *)C3DCopyPropertyList(v45, a2, a3, a4);
      if (v47)
      {
        v48 = v47;
        CFDictionaryAddValue(Mutable, CFSTR("interpolationModes"), v47);
        CFRelease(v48);
      }
      if (Mutable)
      {
        valuePtr = 0;
        valuePtr = C3DGenericSourceGetAccessor((uint64_t)v46);
        v49 = CFArrayCreate(0, (const void **)&valuePtr, 1, MEMORY[0x1E0C9B378]);
        v50 = C3DGenericSourceCreateSerializedDataWithAccessors((uint64_t)v46, v49);
        CFRelease(v49);
        CFDictionaryAddValue(Mutable, CFSTR("interpolationModes-data"), v50);
        CFRelease(v50);
      }
      CFRelease(v46);
    }
  }
  v51 = (const UInt8 *)*((_QWORD *)cf + 9);
  if (v51)
  {
    v52 = (const void *)__C3DKeyframeControllerCopyGenericSource((uint64_t)cf, v51, 4, 1u, 1, 0);
    if (v52)
    {
      v53 = v52;
      v54 = (const void *)C3DCopyPropertyList(v52, a2, a3, a4);
      if (v54)
      {
        v55 = v54;
        CFDictionaryAddValue(Mutable, CFSTR("tensionValues"), v54);
        CFRelease(v55);
      }
      if (Mutable)
      {
        valuePtr = 0;
        valuePtr = C3DGenericSourceGetAccessor((uint64_t)v53);
        v56 = CFArrayCreate(0, (const void **)&valuePtr, 1, MEMORY[0x1E0C9B378]);
        v57 = C3DGenericSourceCreateSerializedDataWithAccessors((uint64_t)v53, v56);
        CFRelease(v56);
        CFDictionaryAddValue(Mutable, CFSTR("tensionValues-data"), v57);
        CFRelease(v57);
      }
      CFRelease(v53);
    }
  }
  v58 = (const UInt8 *)*((_QWORD *)cf + 10);
  if (v58)
  {
    v59 = (const void *)__C3DKeyframeControllerCopyGenericSource((uint64_t)cf, v58, 4, 1u, 1, 0);
    if (v59)
    {
      v60 = v59;
      v61 = (const void *)C3DCopyPropertyList(v59, a2, a3, a4);
      if (v61)
      {
        v62 = v61;
        CFDictionaryAddValue(Mutable, CFSTR("continuityValues"), v61);
        CFRelease(v62);
      }
      if (Mutable)
      {
        valuePtr = C3DGenericSourceGetAccessor((uint64_t)v60);
        v63 = CFArrayCreate(0, (const void **)&valuePtr, 1, MEMORY[0x1E0C9B378]);
        v64 = C3DGenericSourceCreateSerializedDataWithAccessors((uint64_t)v60, v63);
        CFRelease(v63);
        CFDictionaryAddValue(Mutable, CFSTR("continuityValues-data"), v64);
        CFRelease(v64);
      }
      CFRelease(v60);
    }
  }
  v65 = (const UInt8 *)*((_QWORD *)cf + 11);
  if (v65)
  {
    v66 = (const void *)__C3DKeyframeControllerCopyGenericSource((uint64_t)cf, v65, 4, 1u, 1, 0);
    if (v66)
    {
      v67 = v66;
      v68 = (const void *)C3DCopyPropertyList(v66, a2, a3, a4);
      if (v68)
      {
        v69 = v68;
        CFDictionaryAddValue(Mutable, CFSTR("biasValues"), v68);
        CFRelease(v69);
      }
      if (Mutable)
      {
        valuePtr = C3DGenericSourceGetAccessor((uint64_t)v67);
        v70 = CFArrayCreate(0, (const void **)&valuePtr, 1, MEMORY[0x1E0C9B378]);
        v71 = C3DGenericSourceCreateSerializedDataWithAccessors((uint64_t)v67, v70);
        CFRelease(v70);
        CFDictionaryAddValue(Mutable, CFSTR("biasValues-data"), v71);
        CFRelease(v71);
      }
      CFRelease(v67);
    }
  }
  v72 = (const UInt8 *)*((_QWORD *)cf + 12);
  if (v72)
  {
    v73 = (const void *)__C3DKeyframeControllerCopyGenericSource((uint64_t)cf, v72, 8, cf[113], 8, 0);
    if (v73)
    {
      v74 = v73;
      v75 = (const void *)C3DCopyPropertyList(v73, a2, a3, a4);
      if (v75)
      {
        v76 = v75;
        CFDictionaryAddValue(Mutable, CFSTR("inTangents"), v75);
        CFRelease(v76);
      }
      if (Mutable)
      {
        valuePtr = C3DGenericSourceGetAccessor((uint64_t)v74);
        v77 = CFArrayCreate(0, (const void **)&valuePtr, 1, MEMORY[0x1E0C9B378]);
        v78 = C3DGenericSourceCreateSerializedDataWithAccessors((uint64_t)v74, v77);
        CFRelease(v77);
        CFDictionaryAddValue(Mutable, CFSTR("inTangents-data"), v78);
        CFRelease(v78);
      }
      CFRelease(v74);
    }
  }
  v79 = (const UInt8 *)*((_QWORD *)cf + 13);
  if (v79)
  {
    v80 = (const void *)__C3DKeyframeControllerCopyGenericSource((uint64_t)cf, v79, 8, cf[113], 8, 0);
    if (v80)
    {
      v81 = v80;
      v82 = (const void *)C3DCopyPropertyList(v80, a2, a3, a4);
      if (v82)
      {
        v83 = v82;
        CFDictionaryAddValue(Mutable, CFSTR("outTangents"), v82);
        CFRelease(v83);
      }
      if (Mutable)
      {
        valuePtr = C3DGenericSourceGetAccessor((uint64_t)v81);
        v84 = CFArrayCreate(0, (const void **)&valuePtr, 1, MEMORY[0x1E0C9B378]);
        v85 = C3DGenericSourceCreateSerializedDataWithAccessors((uint64_t)v81, v84);
        CFRelease(v84);
        CFDictionaryAddValue(Mutable, CFSTR("outTangents-data"), v85);
        CFRelease(v85);
      }
      CFRelease(v81);
    }
  }
  KeyframeSemantic = C3DKeyframeControllerGetKeyframeSemantic((uint64_t)cf);
  if (KeyframeSemantic)
  {
    LODWORD(valuePtr) = KeyframeSemantic;
    v87 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    CFDictionaryAddValue(Mutable, CFSTR("semantic"), v87);
    CFRelease(v87);
  }
  return Mutable;
}

uint64_t _C3DKeyframeControllerFinalizeDeserialization()
{
  return 1;
}

MTLTexture *C3D::CreateSharedTexture(MTLTexture *a1, __int128 *a2, void *a3, void *a4)
{
  void *v8;
  int IsUnsignedInt;
  MTLTexture *v10;
  const __CFString *v11;
  const __CFString *v12;
  void *v13;
  MTLComputePipelineState *v14;
  SCNMTLComputeCommandEncoder v16;
  __int128 v17;
  int v18;

  if ((-[MTLTexture isFramebufferOnly](a1, "isFramebufferOnly") & 1) != 0
    || -[MTLTexture textureType](a1, "textureType") != 2
    || -[MTLTexture sampleCount](a1, "sampleCount") != 1)
  {
    return 0;
  }
  v17 = *a2;
  v18 = *((_DWORD *)a2 + 4);
  v8 = SCNMTLTextureDescToMTLTextureDescriptor((unsigned __int16 *)&v17);
  IsUnsignedInt = SCNMTLPixelFormatIsUnsignedInt(objc_msgSend(v8, "pixelFormat"));
  objc_msgSend(v8, "setTextureType:", -[MTLTexture textureType](a1, "textureType"));
  objc_msgSend(v8, "setSampleCount:", 1);
  objc_msgSend(v8, "setPixelFormat:", 70);
  objc_msgSend(v8, "setStorageMode:", 0);
  v10 = (MTLTexture *)objc_msgSend(a4, "newTextureWithDescriptor:", v8);
  v11 = CFSTR("copy_no_alpha_texture");
  if (IsUnsignedInt)
    v11 = CFSTR("copy_no_alpha_uint_texture");
  if (*((_WORD *)a2 + 6) == 252)
    v12 = CFSTR("copy_no_alpha_depth_texture");
  else
    v12 = v11;
  v13 = (void *)objc_msgSend(a4, "newComputePipelineStateWithFunctionName:", v12);
  v16._encoder = 0;
  v16._bufferPool = 0;
  SCNMTLComputeCommandEncoder::beginEncoding(&v16, a3, 0, 0, 0);
  if (v16._textures[0] != v10)
  {
    v16._textures[0] = v10;
    v16._texturesToBind[0] |= 1uLL;
  }
  if (v16._textures[1] != a1)
  {
    v16._textures[1] = a1;
    v16._texturesToBind[0] |= 2uLL;
  }
  v14 = (MTLComputePipelineState *)-[SCNMTLOpenSubdivComputeEvaluator computeEvaluator]((uint64_t)v13);
  SCNMTLComputeCommandEncoder::dispatchOnTexture2D(&v16, v10, v14);
  SCNMTLComputeCommandEncoder::endEncoding(&v16);

  return v10;
}

uint64_t C3D::SetupDefaultRenderPassDescriptor(C3D *this, __C3DEngineContext *a2, MTLRenderPassDescriptor *a3)
{
  char v3;
  _QWORD *RenderContext;
  uint64_t i;
  uint64_t result;
  __n128 ViewBackgroundColor;

  v3 = (char)a3;
  RenderContext = (_QWORD *)C3DEngineContextGetRenderContext((uint64_t)this);
  for (i = 0; i != 8; ++i)
  {
    objc_msgSend((id)objc_msgSend((id)-[__C3DEngineContext colorAttachments](a2, "colorAttachments"), "objectAtIndexedSubscript:", i), "setTexture:", 0);
    objc_msgSend((id)objc_msgSend((id)-[__C3DEngineContext colorAttachments](a2, "colorAttachments"), "objectAtIndexedSubscript:", i), "setResolveTexture:", 0);
  }
  objc_msgSend((id)-[__C3DEngineContext depthAttachment](a2, "depthAttachment"), "setTexture:", 0);
  objc_msgSend((id)-[__C3DEngineContext depthAttachment](a2, "depthAttachment"), "setResolveTexture:", 0);
  objc_msgSend((id)-[__C3DEngineContext stencilAttachment](a2, "stencilAttachment"), "setTexture:", 0);
  -[__C3DEngineContext setRenderTargetArrayLength:](a2, "setRenderTargetArrayLength:", 0);
  objc_msgSend((id)objc_msgSend((id)-[__C3DEngineContext colorAttachments](a2, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setTexture:", -[SCNMTLRenderContext _finalRenderTexture](RenderContext));
  result = objc_msgSend((id)objc_msgSend((id)-[__C3DEngineContext colorAttachments](a2, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setStoreAction:", 1);
  if ((v3 & 1) != 0)
  {
    objc_msgSend((id)objc_msgSend((id)-[__C3DEngineContext colorAttachments](a2, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setLoadAction:", 2);
    ViewBackgroundColor = C3DEngineContextGetViewBackgroundColor((uint64_t)this);
    return objc_msgSend((id)objc_msgSend((id)-[__C3DEngineContext colorAttachments](a2, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setClearColor:", ViewBackgroundColor.n128_f32[0], ViewBackgroundColor.n128_f32[1], ViewBackgroundColor.n128_f32[2], ViewBackgroundColor.n128_f32[3]);
  }
  return result;
}

void *C3D::RenderGraph::GraphNode::predecessorsAtIndex@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  void *result;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  int v11;

  result = C3D::Array<C3D::RenderGraph::Link,0u,C3D::StackAllocator>::Array(a4, a3);
  v8 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v8)
  {
    v9 = *(int **)(a1 + 24);
    v10 = 4 * v8;
    do
    {
      v11 = *v9;
      if (a2 == BYTE2(v11))
        result = C3D::Array<C3D::RenderGraph::Link,0u,C3D::StackAllocator>::push_back<C3D::RenderGraph::Link&>(a4, &v11);
      ++v9;
      v10 -= 4;
    }
    while (v10);
  }
  return result;
}

void C3D::RenderGraph::addDependency(C3D::RenderGraph *this, const C3D::Pass *a2, const C3D::Pass *a3, uint64_t a4, uint64_t a5)
{
  unsigned int PrimitiveCount;
  unsigned int v11;

  if (C3DMeshElementGetPrimitiveCount((uint64_t)a2) == -1)
    C3D::RenderGraph::addDependency();
  if (C3DMeshElementGetPrimitiveCount((uint64_t)a3) == -1)
    C3D::RenderGraph::addDependency();
  PrimitiveCount = C3DMeshElementGetPrimitiveCount((uint64_t)a2);
  v11 = C3DMeshElementGetPrimitiveCount((uint64_t)a3);
  C3D::RenderGraph::addDependency(this, PrimitiveCount, v11, a4, a5);
}

void C3D::RenderGraph::removeDependency(C3D::RenderGraph *this, const C3D::Pass *a2, const C3D::Pass *a3)
{
  unsigned __int16 PrimitiveCount;
  unsigned __int16 v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  int *v15;
  int *v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  int *v20;
  int *v21;
  int v22;

  PrimitiveCount = C3DMeshElementGetPrimitiveCount((uint64_t)a2);
  v6 = C3DMeshElementGetPrimitiveCount((uint64_t)a3);
  v7 = C3D::Array<C3D::RenderGraph::GraphNode,0u,C3D::ScratchAllocator>::operator[](*((_QWORD *)this + 3), PrimitiveCount);
  v8 = *((_QWORD *)this + 3);
  v9 = v6;
  v10 = C3D::Array<C3D::RenderGraph::GraphNode,0u,C3D::ScratchAllocator>::operator[](v8, v6);
  if (*(_DWORD *)(v10 + 40))
  {
    v11 = v10;
    v12 = 0;
    v13 = v10 + 32;
    do
    {
      if ((*(_DWORD *)C3D::Array<C3D::RenderGraph::Link,0u,C3D::ScratchAllocator>::operator[](v13, v12) & 0x7FFF) == PrimitiveCount)
      {
        v14 = *(_DWORD *)(v11 + 40) - 1;
        v15 = (int *)C3D::Array<C3D::RenderGraph::Link,0u,C3D::ScratchAllocator>::operator[](v13, v12);
        v16 = (int *)C3D::Array<C3D::RenderGraph::Link,0u,C3D::ScratchAllocator>::operator[](v13, v14);
        v17 = *v15;
        *v15 = *v16;
        *v16 = v17;
        C3D::Array<C3D::RenderGraph::Link,0u,C3D::ScratchAllocator>::resize(v13, v14);
      }
      else
      {
        ++v12;
      }
    }
    while (v12 < *(_DWORD *)(v11 + 40));
  }
  if (*(_DWORD *)(v7 + 16))
  {
    v18 = 0;
    do
    {
      if ((*(_DWORD *)C3D::Array<C3D::RenderGraph::Link,0u,C3D::ScratchAllocator>::operator[](v7 + 8, v18) & 0x7FFF) == v9)
      {
        v19 = *(_DWORD *)(v7 + 16) - 1;
        v20 = (int *)C3D::Array<C3D::RenderGraph::Link,0u,C3D::ScratchAllocator>::operator[](v7 + 8, v18);
        v21 = (int *)C3D::Array<C3D::RenderGraph::Link,0u,C3D::ScratchAllocator>::operator[](v7 + 8, v19);
        v22 = *v20;
        *v20 = *v21;
        *v21 = v22;
        C3D::Array<C3D::RenderGraph::Link,0u,C3D::ScratchAllocator>::resize(v7 + 8, v19);
      }
      else
      {
        ++v18;
      }
    }
    while (v18 < *(_DWORD *)(v7 + 16));
  }
}

void C3D::Array<C3D::RenderGraph::Link,0u,C3D::ScratchAllocator>::resize(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  char *v5;
  unsigned int v6;
  char *Aligned;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 != a2)
  {
    if (v2 <= a2)
    {
      v5 = *(char **)(a1 + 16);
      if (*(_DWORD *)(a1 + 12) < a2)
      {
        v6 = ((double)a2 * 1.5);
        Aligned = (char *)C3DScratchAllocatorAllocateAligned(*(_QWORD *)a1, 4 * v6, 4, 0);
        memcpy(Aligned, v5, 4 * *(unsigned int *)(a1 + 8));
        *(_QWORD *)(a1 + 16) = Aligned;
        *(_DWORD *)(a1 + 12) = v6;
        v5 = Aligned;
        v2 = *(_DWORD *)(a1 + 8);
      }
      bzero(&v5[4 * v2], 4 * (a2 - v2));
    }
    *(_DWORD *)(a1 + 8) = a2;
  }
}

void C3D::RenderGraph::setCustomTechnique(C3D::RenderGraph *this, CFTypeRef cf)
{
  CFTypeRef v3;
  CFTypeRef v5;
  const void *v6;

  v3 = (CFTypeRef)*((_QWORD *)this + 24);
  if (v3 != cf)
  {
    if (v3)
    {
      CFRelease(v3);
      *((_QWORD *)this + 24) = 0;
    }
    if (cf)
      v5 = CFRetain(cf);
    else
      v5 = 0;
    *((_QWORD *)this + 24) = v5;
    *((_BYTE *)this + 208) = 0;
    v6 = (const void *)*((_QWORD *)this + 25);
    if (v6)
    {
      CFRelease(v6);
      *((_QWORD *)this + 25) = 0;
    }
  }
}

void ___ZN3C3D11RenderGraph14finalTechniqueEv_block_invoke(uint64_t a1, uint64_t a2)
{
  const void *Technique;

  Technique = (const void *)C3DLightGetTechnique(a2);
  if (Technique)
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 32), Technique);
}

uint64_t C3D::__nextPassInStage(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;
  unsigned int v5;
  unsigned int v6;

  if (*(unsigned __int16 *)(a2 + 8) - 1 == a3)
  {
    result = *(_QWORD *)(a2 + 24);
    if (!result)
      return result;
    v5 = 0;
  }
  else
  {
    result = a2;
    v5 = a3 + 1;
  }
  v6 = *(unsigned __int16 *)C3D::Array<unsigned short,0u,C3D::ScratchAllocator>::operator[](result, v5);
  if (v6 == 0xFFFF)
    return 0;
  else
    return *(_QWORD *)C3D::Array<C3D::RenderGraph::GraphNode,0u,C3D::ScratchAllocator>::operator[](a1, v6);
}

uint64_t SCNMTLRenderCommandEncoder::setVertexAmplificationCount(uint64_t result, unsigned int a2, int a3)
{
  uint64_t v4;
  __int128 v5;
  NSObject *v6;
  __int128 v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (*(unsigned __int8 *)(result + 72) != a2)
  {
    v4 = result;
    *(_BYTE *)(result + 72) = a2;
    if (a2 <= 1)
      return objc_msgSend(*(id *)(result + 3392), "setVertexAmplificationCount:viewMappings:", 1, 0);
    if (a3 == 2)
    {
      v5 = xmmword_1DD008320;
    }
    else
    {
      if (a3 != 1)
      {
        v6 = scn_default_log();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
          SCNMTLRenderCommandEncoder::setVertexAmplificationCount();
        return objc_msgSend(*(id *)(v4 + 3392), "setVertexAmplificationCount:viewMappings:", a2, &v7);
      }
      v5 = xmmword_1DD008330;
    }
    v7 = v5;
    return objc_msgSend(*(id *)(v4 + 3392), "setVertexAmplificationCount:viewMappings:", a2, &v7);
  }
  return result;
}

double SCNMTLRenderCommandEncoder::useCommandEncoder(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  double result;

  if (!a2 && (v8 = scn_default_log(), os_log_type_enabled(v8, OS_LOG_TYPE_FAULT)))
  {
    SCNMTLRenderCommandEncoder::useCommandEncoder(v8, v9, v10);
    if (a3)
      goto LABEL_6;
  }
  else if (a3)
  {
    goto LABEL_6;
  }
  v11 = scn_default_log();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
    SCNMTLRenderCommandEncoder::useCommandEncoder(v11, v12, v13);
LABEL_6:
  bzero(a1, 0xD70uLL);
  *((_DWORD *)a1 + 16) = 1;
  a1[72] = 1;
  *((_WORD *)a1 + 20) = 257;
  a1[42] = 1;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *((_QWORD *)a1 + 423) = a2;
  *((_QWORD *)a1 + 424) = a3;
  *((_QWORD *)a1 + 425) = a4;
  return result;
}

id C3D::RenderGraph::graphDescription(C3D::RenderGraph *this)
{
  unint64_t v2;
  id v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  void *v7;
  unsigned int v8;
  uint64_t v9;
  C3D::Pass *v10;
  id v11;
  const char *v12;
  CFStringRef v13;
  C3D::PassDescriptor *v14;
  unsigned int v15;
  void *v16;
  uint64_t i;
  id v18;
  C3D::PassDescriptor *v19;
  uint64_t v20;
  void *v21;
  C3D::PassDescriptor *v22;
  C3D::PassDescriptor *v23;
  unsigned int v24;
  void *v25;
  uint64_t j;
  id v27;
  C3D::PassDescriptor *v28;
  uint64_t v29;
  void *v30;
  C3D::PassDescriptor *v31;
  uint64_t v32;
  void *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v42;
  id v43;
  void *v44;
  const __CFAllocator *alloc;
  C3D::RenderGraph *v46;
  uint64_t v47;
  void *v48;
  int v49;
  uint64_t v50;
  unsigned int v51;
  void *v52;

  v2 = 0x1E0C99000uLL;
  v3 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v46 = this;
  v4 = *((_QWORD *)this + 12);
  v5 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v43 = v3;
  objc_msgSend(v3, "setValue:forKey:", v5, CFSTR("stages"));
  v44 = v5;

  if (v4)
  {
    alloc = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    do
    {
      v6 = *(unsigned int *)(v4 + 8);
      v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", v6);
      objc_msgSend(v44, "addObject:", v7);
      v48 = v7;

      v49 = v6;
      if ((_DWORD)v6)
      {
        v8 = 0;
        v47 = v4;
        do
        {
          v51 = v8;
          v9 = *(unsigned __int16 *)C3D::Array<unsigned short,0u,C3D::ScratchAllocator>::operator[](v4, v8);
          v50 = C3D::Array<C3D::RenderGraph::GraphNode,0u,C3D::ScratchAllocator>::operator[](*((_QWORD *)v46 + 3), v9);
          v10 = *(C3D::Pass **)v50;
          v11 = objc_alloc_init(*(Class *)(v2 + 3592));
          v12 = (const char *)(**(uint64_t (***)(C3D::Pass *))v10)(v10);
          v13 = CFStringCreateWithCString(alloc, v12, 0x8000100u);
          objc_msgSend(v11, "setValue:forKey:", v13, CFSTR("name"));
          CFRelease(v13);
          objc_msgSend(v11, "setValue:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v9), CFSTR("id"));
          objc_msgSend(v11, "setValue:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", 0), CFSTR("type"));
          objc_msgSend(v11, "setValue:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", 1), CFSTR("enabled"));
          v14 = (C3D::PassDescriptor *)C3D::Pass::descriptor(v10);
          v15 = C3D::PassDescriptor::inputCount(v14);
          v16 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", v15);
          v52 = v11;
          objc_msgSend(v11, "setValue:forKey:", v16, CFSTR("inputs"));

          if (v15)
          {
            for (i = 0; i != v15; ++i)
            {
              v18 = objc_alloc_init(*(Class *)(v2 + 3592));
              objc_msgSend(v18, "setValue:forKey:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%d-i-%d"), C3DMeshElementGetPrimitiveCount((uint64_t)v10), i), CFSTR("id"));
              v19 = (C3D::PassDescriptor *)C3D::Pass::descriptor(v10);
              v20 = *(_QWORD *)(C3D::PassDescriptor::inputAtIndex(v19, i) + 8);
              if (v20)
                objc_msgSend(v18, "setValue:forKey:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s"), v20), CFSTR("name"));
              v21 = (void *)MEMORY[0x1E0CB37E8];
              v22 = (C3D::PassDescriptor *)C3D::Pass::descriptor(v10);
              objc_msgSend(v18, "setValue:forKey:", objc_msgSend(v21, "numberWithInteger:", *(unsigned __int8 *)C3D::PassDescriptor::inputAtIndex(v22, i)), CFSTR("type"));
              objc_msgSend(v16, "addObject:", v18);
            }
          }
          v23 = (C3D::PassDescriptor *)C3D::Pass::descriptor(v10);
          v24 = C3D::PassDescriptor::outputCount(v23);
          v25 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", v24);
          objc_msgSend(v52, "setValue:forKey:", v25, CFSTR("outputs"));

          if (v24)
          {
            for (j = 0; j != v24; ++j)
            {
              v27 = objc_alloc_init(*(Class *)(v2 + 3592));
              objc_msgSend(v27, "setValue:forKey:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%d-o-%d"), C3DMeshElementGetPrimitiveCount((uint64_t)v10), j), CFSTR("id"));
              v28 = (C3D::PassDescriptor *)C3D::Pass::descriptor(v10);
              v29 = *(_QWORD *)(C3D::PassDescriptor::outputAtIndex(v28, j) + 8);
              if (v29)
                objc_msgSend(v27, "setValue:forKey:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s"), v29), CFSTR("name"));
              v30 = (void *)MEMORY[0x1E0CB37E8];
              v31 = (C3D::PassDescriptor *)C3D::Pass::descriptor(v10);
              objc_msgSend(v27, "setValue:forKey:", objc_msgSend(v30, "numberWithInteger:", *(unsigned __int8 *)C3D::PassDescriptor::outputAtIndex(v31, j)), CFSTR("type"));
              objc_msgSend(v25, "addObject:", v27);
            }
          }
          v32 = *(unsigned int *)(v50 + 40);
          v33 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", v32);
          objc_msgSend(v52, "setValue:forKey:", v33, CFSTR("links"));

          v34 = 0x1E0C99000uLL;
          if ((_DWORD)v32)
          {
            v35 = 0;
            v36 = v50 + 32;
            do
            {
              v37 = *(void **)(v34 + 3360);
              v38 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned __int8 *)(C3D::Array<C3D::RenderGraph::Link,0u,C3D::ScratchAllocator>::operator[](v36, v35)+ 2));
              v39 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(_DWORD *)C3D::Array<C3D::RenderGraph::Link,0u,C3D::ScratchAllocator>::operator[](v36, v35) & 0x7FFF);
              v42 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned __int8 *)(C3D::Array<C3D::RenderGraph::Link,0u,C3D::ScratchAllocator>::operator[](v36, v35)+ 3));
              v40 = v37;
              v34 = 0x1E0C99000;
              objc_msgSend(v33, "addObject:", objc_msgSend(v40, "arrayWithObjects:", v38, v39, v42, 0));
              ++v35;
            }
            while (v32 != v35);
          }
          objc_msgSend(v48, "addObject:", v52);
          v8 = v51 + 1;
          v2 = 0x1E0C99000;
          v4 = v47;
        }
        while (v51 + 1 != v49);
      }
      v4 = *(_QWORD *)(v4 + 24);
    }
    while (v4);
  }
  return v43;
}

void C3D::RenderGraph::logFrame(C3D::RenderGraph *this)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  __int128 v5;
  uint64_t v6;
  int v7;
  NSObject *v8;
  unsigned int v9;
  unsigned __int16 *v10;
  uint64_t v11;
  C3D::Pass *v12;
  NSObject *v13;
  NSObject *v14;
  uint64_t v15;
  C3D::PassDescriptor *v16;
  int v17;
  int v18;
  NSObject *v19;
  int i;
  unsigned int v21;
  int v22;
  uint64_t v23;
  _DWORD *v24;
  _QWORD *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  _DWORD *v30;
  C3D::Pass **v31;
  C3D::PassDescriptor *v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  C3D::PassDescriptor *v36;
  uint64_t v37;
  C3D::PassDescriptor *v38;
  C3D::RenderGraph *v39;
  NSObject *v40;
  C3D::PassDescriptor *v41;
  NSObject *v42;
  int v43;
  unsigned int v44;
  int v45;
  uint64_t v46;
  _DWORD *v47;
  _QWORD *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  _DWORD *v53;
  C3D::Pass **v54;
  C3D::PassDescriptor *v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  C3D::PassDescriptor *v59;
  uint64_t v60;
  C3D::PassDescriptor *v61;
  C3D::RenderGraph *v62;
  const char *v63;
  size_t v64;
  unsigned __int16 v65;
  uint64_t v66;
  _BYTE *v67;
  int v68;
  NSObject *v69;
  NSObject *v70;
  NSObject *v71;
  NSObject *v72;
  _BOOL4 v73;
  int v74;
  NSObject *v75;
  _BYTE v76[12];
  int v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  int v81;
  unsigned int v82;
  __int128 v83;
  int v84;
  C3D::Pass *v85;
  _DWORD v86[512];
  uint8_t buf[4];
  uint64_t v88;
  __int16 v89;
  _DWORD *v90;
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  v2 = scn_default_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    LOWORD(v86[0]) = 0;
    _os_log_impl(&dword_1DCCB8000, v2, OS_LOG_TYPE_INFO, "Info: ###########################################################################################################", (uint8_t *)v86, 2u);
  }
  v3 = scn_default_log();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    LOWORD(v86[0]) = 0;
    _os_log_impl(&dword_1DCCB8000, v3, OS_LOG_TYPE_INFO, "Info: ################################################ NEW FRAME ################################################", (uint8_t *)v86, 2u);
  }
  v4 = scn_default_log();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    LOWORD(v86[0]) = 0;
    _os_log_impl(&dword_1DCCB8000, v4, OS_LOG_TYPE_INFO, "Info: ###########################################################################################################\n", (uint8_t *)v86, 2u);
  }
  v6 = *((_QWORD *)this + 12);
  if (v6)
  {
    v7 = 0;
    *(_QWORD *)&v5 = 67109120;
    v78 = v5;
    *(_QWORD *)&v5 = 136315138;
    v79 = v5;
    *(_QWORD *)&v5 = 136315394;
    v83 = v5;
    do
    {
      v81 = *(unsigned __int16 *)(v6 + 8);
      v8 = scn_default_log();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        v86[0] = v78;
        v86[1] = (unsigned __int16)v7;
        _os_log_impl(&dword_1DCCB8000, v8, OS_LOG_TYPE_INFO, "Info: ######################################## STAGE %d ########################################", (uint8_t *)v86, 8u);
      }
      v77 = v7;
      if (v81)
      {
        v9 = 0;
        v80 = v6;
        do
        {
          v82 = v9;
          v10 = (unsigned __int16 *)C3D::Array<unsigned short,0u,C3D::ScratchAllocator>::operator[](v6, v9);
          v11 = C3D::Array<C3D::RenderGraph::GraphNode,0u,C3D::ScratchAllocator>::operator[](*((_QWORD *)this + 3), *v10);
          v12 = *(C3D::Pass **)v11;
          v13 = scn_default_log();
          if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
          {
            LOWORD(v86[0]) = 0;
            _os_log_impl(&dword_1DCCB8000, v13, OS_LOG_TYPE_INFO, "Info: ", (uint8_t *)v86, 2u);
          }
          v14 = scn_default_log();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
          {
            v15 = (**(uint64_t (***)(C3D::Pass *))v12)(v12);
            v86[0] = v79;
            *(_QWORD *)&v86[1] = v15;
            _os_log_impl(&dword_1DCCB8000, v14, OS_LOG_TYPE_INFO, "Info: |---------------------------  %s ---------------------------", (uint8_t *)v86, 0xCu);
          }
          v16 = (C3D::PassDescriptor *)C3D::Pass::descriptor(v12);
          v17 = C3D::PassDescriptor::inputCount(v16);
          v85 = v12;
          if (v17)
          {
            v18 = v17;
            v19 = scn_default_log();
            if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
            {
              v86[0] = v78;
              v86[1] = v18;
              _os_log_impl(&dword_1DCCB8000, v19, OS_LOG_TYPE_INFO, "Info: |---- %d INPUTS ---- \n", (uint8_t *)v86, 8u);
            }
            for (i = 0; i != v18; ++i)
            {
              if (*(_DWORD *)(v11 + 16))
              {
                v21 = 0;
                v22 = 0;
                while (*(unsigned __int8 *)(C3D::Array<C3D::RenderGraph::Link,0u,C3D::ScratchAllocator>::operator[](v11 + 8, v21)+ 2) != i)
                {
                  v21 = (unsigned __int16)++v22;
                  if (*(_DWORD *)(v11 + 16) <= (unsigned __int16)v22)
                    goto LABEL_27;
                }
                v23 = *((_QWORD *)this + 3);
                v24 = (_DWORD *)C3D::Array<C3D::RenderGraph::Link,0u,C3D::ScratchAllocator>::operator[](v11 + 8, v21);
                v25 = (_QWORD *)C3D::Array<C3D::RenderGraph::GraphNode,0u,C3D::ScratchAllocator>::operator[](v23, *v24 & 0x7FFF);
                v26 = (const char *)(**(uint64_t (***)(_QWORD))*v25)(*v25);
                v27 = C3D::Array<C3D::RenderGraph::Link,0u,C3D::ScratchAllocator>::operator[](v11 + 8, v21);
                v28 = *((_QWORD *)this + 3);
                v29 = *(unsigned __int8 *)(v27 + 3);
                v30 = (_DWORD *)C3D::Array<C3D::RenderGraph::Link,0u,C3D::ScratchAllocator>::operator[](v11 + 8, v21);
                v31 = (C3D::Pass **)C3D::Array<C3D::RenderGraph::GraphNode,0u,C3D::ScratchAllocator>::operator[](v28, *v30 & 0x7FFF);
                v32 = (C3D::PassDescriptor *)C3D::Pass::descriptor(*v31);
                v33 = C3D::Array<C3D::RenderGraph::Link,0u,C3D::ScratchAllocator>::operator[](v11 + 8, v21);
                v34 = C3D::PassDescriptor::outputAtIndex(v32, *(unsigned __int8 *)(v33 + 3));
                v12 = v85;
                snprintf((char *)v86, 0x200uLL, "linked to : %s slot %d (%s)", v26, v29, *(const char **)(v34 + 8));
              }
LABEL_27:
              v35 = scn_default_log();
              if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
              {
                v36 = (C3D::PassDescriptor *)C3D::Pass::descriptor(v12);
                v37 = *(_QWORD *)(C3D::PassDescriptor::inputAtIndex(v36, (unsigned __int16)i) + 8);
                *(_DWORD *)buf = v83;
                v88 = v37;
                v89 = 2080;
                v90 = v86;
                _os_log_impl(&dword_1DCCB8000, v35, OS_LOG_TYPE_INFO, "Info: |-> %s(%s)", buf, 0x16u);
              }
              v38 = (C3D::PassDescriptor *)C3D::Pass::descriptor(v12);
              v39 = (C3D::RenderGraph *)C3D::PassDescriptor::inputAtIndex(v38, (unsigned __int16)i);
              C3D::RenderGraph::logPassIODescriptor(v39, v39, "  ");
            }
            v40 = scn_default_log();
            if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
            {
              LOWORD(v86[0]) = 0;
              _os_log_impl(&dword_1DCCB8000, v40, OS_LOG_TYPE_INFO, "Info: |", (uint8_t *)v86, 2u);
            }
          }
          v41 = (C3D::PassDescriptor *)C3D::Pass::descriptor(v12);
          v84 = C3D::PassDescriptor::outputCount(v41);
          if (v84)
          {
            v42 = scn_default_log();
            if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
            {
              v86[0] = v78;
              v86[1] = v84;
              _os_log_impl(&dword_1DCCB8000, v42, OS_LOG_TYPE_INFO, "Info: |---- %d OUTPUTS ---- \n", (uint8_t *)v86, 8u);
            }
            v43 = 0;
            do
            {
              strcpy((char *)v86, "linked to : ");
              if (*(_DWORD *)(v11 + 40))
              {
                v44 = 0;
                v45 = 0;
                do
                {
                  if (*(unsigned __int8 *)(C3D::Array<C3D::RenderGraph::Link,0u,C3D::ScratchAllocator>::operator[](v11 + 32, v44)+ 2) == v43)
                  {
                    v46 = *((_QWORD *)this + 3);
                    v47 = (_DWORD *)C3D::Array<C3D::RenderGraph::Link,0u,C3D::ScratchAllocator>::operator[](v11 + 32, v44);
                    v48 = (_QWORD *)C3D::Array<C3D::RenderGraph::GraphNode,0u,C3D::ScratchAllocator>::operator[](v46, *v47 & 0x7FFF);
                    v49 = (const char *)(**(uint64_t (***)(_QWORD))*v48)(*v48);
                    v50 = C3D::Array<C3D::RenderGraph::Link,0u,C3D::ScratchAllocator>::operator[](v11 + 32, v44);
                    v51 = *((_QWORD *)this + 3);
                    v52 = *(unsigned __int8 *)(v50 + 3);
                    v53 = (_DWORD *)C3D::Array<C3D::RenderGraph::Link,0u,C3D::ScratchAllocator>::operator[](v11 + 32, v44);
                    v54 = (C3D::Pass **)C3D::Array<C3D::RenderGraph::GraphNode,0u,C3D::ScratchAllocator>::operator[](v51, *v53 & 0x7FFF);
                    v55 = (C3D::PassDescriptor *)C3D::Pass::descriptor(*v54);
                    v56 = C3D::Array<C3D::RenderGraph::Link,0u,C3D::ScratchAllocator>::operator[](v11 + 32, v44);
                    v57 = C3D::PassDescriptor::inputAtIndex(v55, *(unsigned __int8 *)(v56 + 3));
                    snprintf((char *)v86, 0x800uLL, "%s %s slot %d (%s)", (const char *)v86, v49, v52, *(const char **)(v57 + 8));
                  }
                  v44 = (unsigned __int16)++v45;
                }
                while (*(_DWORD *)(v11 + 40) > (unsigned __int16)v45);
              }
              v58 = scn_default_log();
              if (os_log_type_enabled(v58, OS_LOG_TYPE_INFO))
              {
                v12 = v85;
                v59 = (C3D::PassDescriptor *)C3D::Pass::descriptor(v85);
                v60 = *(_QWORD *)(C3D::PassDescriptor::outputAtIndex(v59, (unsigned __int16)v43) + 8);
                *(_DWORD *)buf = v83;
                v88 = v60;
                v89 = 2080;
                v90 = v86;
                _os_log_impl(&dword_1DCCB8000, v58, OS_LOG_TYPE_INFO, "Info: |-> %s(%s)", buf, 0x16u);
              }
              else
              {
                v12 = v85;
              }
              v61 = (C3D::PassDescriptor *)C3D::Pass::descriptor(v12);
              v62 = (C3D::RenderGraph *)C3D::PassDescriptor::outputAtIndex(v61, (unsigned __int16)v43);
              C3D::RenderGraph::logPassIODescriptor(v62, v62, "  ");
              ++v43;
            }
            while (v43 != v84);
          }
          v63 = (const char *)(**(uint64_t (***)(C3D::Pass *))v12)(v12);
          v64 = strlen(v63);
          v65 = v64;
          MEMORY[0x1E0C80A78](v64);
          v67 = &v76[-v66];
          if (v68)
            memset(&v76[-v66], 45, v65);
          v67[v65] = 0;
          v69 = scn_default_log();
          if (os_log_type_enabled(v69, OS_LOG_TYPE_INFO))
          {
            v86[0] = v79;
            *(_QWORD *)&v86[1] = v67;
            _os_log_impl(&dword_1DCCB8000, v69, OS_LOG_TYPE_INFO, "Info: |----------------------------%s----------------------------", (uint8_t *)v86, 0xCu);
          }
          v70 = scn_default_log();
          if (os_log_type_enabled(v70, OS_LOG_TYPE_INFO))
          {
            LOWORD(v86[0]) = 0;
            _os_log_impl(&dword_1DCCB8000, v70, OS_LOG_TYPE_INFO, "Info: ", (uint8_t *)v86, 2u);
          }
          v9 = v82 + 1;
          v6 = v80;
        }
        while (v82 + 1 != v81);
      }
      v6 = *(_QWORD *)(v6 + 24);
      v71 = scn_default_log();
      if (os_log_type_enabled(v71, OS_LOG_TYPE_INFO))
      {
        LOWORD(v86[0]) = 0;
        _os_log_impl(&dword_1DCCB8000, v71, OS_LOG_TYPE_INFO, "Info: ", (uint8_t *)v86, 2u);
      }
      v72 = scn_default_log();
      v73 = os_log_type_enabled(v72, OS_LOG_TYPE_INFO);
      v74 = v77;
      if (v73)
      {
        LOWORD(v86[0]) = 0;
        _os_log_impl(&dword_1DCCB8000, v72, OS_LOG_TYPE_INFO, "Info: ", (uint8_t *)v86, 2u);
      }
      v7 = v74 + 1;
    }
    while (v6);
  }
  v75 = scn_default_log();
  if (os_log_type_enabled(v75, OS_LOG_TYPE_INFO))
  {
    LOWORD(v86[0]) = 0;
    _os_log_impl(&dword_1DCCB8000, v75, OS_LOG_TYPE_INFO, "Info: \n\n\n", (uint8_t *)v86, 2u);
  }
}

uint64_t ___ZN3C3D11RenderGraph7executeEv_block_invoke(uint64_t result)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(result + 32);
  if (v1)
  {
    v2 = *(void **)(v1 + 8);
    if (v2 != (void *)(v1 + 16))
      free(v2);
    JUMPOUT(0x1DF0D41C0);
  }
  return result;
}

uint64_t C3D::RenderGraph::getPredecessors@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned __int16 PrimitiveCount;
  uint64_t result;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  C3D::Array<C3D::Pass *,0u,C3D::StackAllocator>::Array((_QWORD *)a4, a3);
  PrimitiveCount = C3DMeshElementGetPrimitiveCount(a2);
  result = C3D::Array<C3D::RenderGraph::GraphNode,0u,C3D::ScratchAllocator>::operator[](*(_QWORD *)(a1 + 24), PrimitiveCount);
  v9 = *(unsigned int *)(result + 16);
  if ((_DWORD)v9)
  {
    v10 = *(_DWORD **)(result + 24);
    v11 = &v10[v9];
    do
    {
      result = C3D::Array<C3D::RenderGraph::GraphNode,0u,C3D::ScratchAllocator>::operator[](*(_QWORD *)(a1 + 24), *v10 & 0x7FFF);
      v12 = *(_QWORD *)(a4 + 16);
      v13 = *(unsigned int *)(a4 + 8);
      if ((_DWORD)v13)
      {
        v14 = 8 * v13;
        v15 = *(_QWORD **)(a4 + 16);
        while (*v15 != *(_QWORD *)result)
        {
          ++v15;
          v14 -= 8;
          if (!v14)
          {
            v15 = (_QWORD *)(v12 + 8 * v13);
            break;
          }
        }
      }
      else
      {
        v15 = *(_QWORD **)(a4 + 16);
      }
      if (v13 == ((uint64_t)v15 - v12) >> 3)
        result = (uint64_t)C3D::Array<char const*,0u,C3D::StackAllocator>::push_back<char const*&>((_DWORD *)a4, (_QWORD *)result);
      ++v10;
    }
    while (v10 != v11);
  }
  return result;
}

uint64_t C3D::RenderGraph::getTextureNamed(C3D::RenderGraph *this, const char *__s)
{
  const char *v2;
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v15;

  if (!__s)
    return 0;
  v2 = __s;
  v3 = *((_QWORD *)this + 17);
  v4 = strlen(__s);
  v5 = 0xC6A4A7935BD1E995 * v4;
  if (v4 >= 8)
  {
    v6 = v4 >> 3;
    v7 = &v2[8 * v6];
    v8 = 8 * v6;
    do
    {
      v9 = *(_QWORD *)v2;
      v2 += 8;
      v5 = 0xC6A4A7935BD1E995
         * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v9) ^ ((0xC6A4A7935BD1E995 * v9) >> 47))) ^ v5);
      v8 -= 8;
    }
    while (v8);
    v2 = v7;
  }
  switch(v4 & 7)
  {
    case 1u:
      goto LABEL_13;
    case 2u:
      goto LABEL_12;
    case 3u:
      goto LABEL_11;
    case 4u:
      goto LABEL_10;
    case 5u:
      goto LABEL_9;
    case 6u:
      goto LABEL_8;
    case 7u:
      v5 ^= (unint64_t)*((unsigned __int8 *)v2 + 6) << 48;
LABEL_8:
      v5 ^= (unint64_t)*((unsigned __int8 *)v2 + 5) << 40;
LABEL_9:
      v5 ^= (unint64_t)*((unsigned __int8 *)v2 + 4) << 32;
LABEL_10:
      v5 ^= (unint64_t)*((unsigned __int8 *)v2 + 3) << 24;
LABEL_11:
      v5 ^= (unint64_t)*((unsigned __int8 *)v2 + 2) << 16;
LABEL_12:
      v5 ^= (unint64_t)*((unsigned __int8 *)v2 + 1) << 8;
LABEL_13:
      v5 = 0xC6A4A7935BD1E995 * (v5 ^ *(unsigned __int8 *)v2);
      break;
    default:
      break;
  }
  v10 = (0xC6A4A7935BD1E995 * (v5 ^ (v5 >> 47))) ^ ((0xC6A4A7935BD1E995 * (v5 ^ (v5 >> 47))) >> 47);
  v11 = (*(_DWORD *)(v3 + 36) - 1) & v10;
  v12 = *(unsigned __int16 *)(*(_QWORD *)(v3 + 24) + 2 * v11);
  if (v12 < 2)
    return 0;
  while ((v12 & 2) == 0 || v10 != *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8 * v11))
  {
    ++v11;
    v13 = v12 >= 4;
    v12 >>= 1;
    if (!v13)
      return 0;
  }
  v15 = *(_QWORD *)(v3 + 16);
  if (v15)
    return *(_QWORD *)(v15 + 8 * v11);
  else
    return 0;
}

_QWORD *C3D::RenderGraph::requestFrameRecording(_QWORD *result, _QWORD *a2, void *a3)
{
  _QWORD *v4;

  if (!result[21])
  {
    v4 = result;
    result[21] = objc_msgSend(a3, "copy");
    result = (_QWORD *)v4[22];
    if (result != a2)
    {
      if (result)
      {
        CFRelease(result);
        v4[22] = 0;
      }
      if (a2)
        result = CFRetain(a2);
      else
        result = 0;
      v4[22] = result;
    }
  }
  return result;
}

uint64_t C3D::Hash<objc_object  {objcproto10MTLTexture}*,C3D::ScratchAllocator>::insert(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  __int16 *v14;
  unsigned int v15;
  __int16 v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;

  v4 = a2;
  while (1)
  {
    v6 = *(_DWORD *)(a1 + 36);
    v7 = (v6 - 1) & v4;
    v8 = *(_QWORD *)(a1 + 24);
    v9 = *(unsigned __int16 *)(v8 + 2 * v7);
    if (v9 >= 2)
      break;
LABEL_7:
    v12 = v7 + 496;
    v13 = v6 + 15;
    if (v13 < (int)v7 + 496)
      v12 = v13;
    if (v7 >= v12)
    {
      v15 = v7;
    }
    else
    {
      v14 = (__int16 *)(v8 + 2 * v7);
      v15 = v7;
      while (1)
      {
        v16 = *v14++;
        if ((v16 & 1) == 0)
          break;
        if (v12 == ++v15)
          goto LABEL_34;
      }
    }
    if (v15 != v12)
    {
      *(_WORD *)(v8 + 2 * v15) |= 1u;
      if (v15 <= (int)v7 + 14)
      {
        v21 = v15;
      }
      else
      {
        while (2)
        {
          if (v15 >= 0xF)
            v17 = v15 - 14;
          else
            v17 = 0;
          v18 = v17 - 1;
          if (v17 <= v15)
            v19 = v15;
          else
            v19 = v17;
          v20 = 1;
          while (1)
          {
            v21 = v18 + 1;
            if (v17 <= v21)
              break;
LABEL_28:
            ++v20;
            v18 = v21;
            if ((_DWORD)v21 == v19)
              goto LABEL_33;
          }
          v22 = 1 << (v18 - v17 + 2);
          v23 = v20;
          LODWORD(a2) = v17;
          while (1)
          {
            v24 = a2;
            a2 = *(unsigned __int16 *)(v8 + 2 * a2);
            if ((v22 & a2) != 0)
              break;
            a2 = (v24 + 1);
            v22 = (unsigned __int16)v22 >> 1;
            --v23;
            if (a2 > v21)
              goto LABEL_28;
          }
          if (v21 >= v15)
          {
LABEL_33:
            *(_WORD *)(v8 + 2 * v15) ^= 1u;
            goto LABEL_34;
          }
          v25 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v21);
          *(_QWORD *)(v25 + 8 * v15) = *(_QWORD *)(v25 + 8 * v21);
          v8 = *(_QWORD *)(a1 + 24);
          *(_WORD *)(v8 + 2 * v24) = (*(_WORD *)(v8 + 2 * v24) | (1 << (v15 - v24 + 1))) ^ (1 << v23);
          v15 = v21;
          if (v21 > (int)v7 + 14)
            continue;
          break;
        }
        LOBYTE(v15) = v21;
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v21) = *a3;
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v21) = v4;
      v27 = *(_QWORD *)(a1 + 24);
      *(_WORD *)(v27 + 2 * v21) |= 1u;
      result = 1;
      *(_WORD *)(v27 + 2 * v7) |= 1 << (v15 - v7 + 1);
      ++*(_DWORD *)(a1 + 32);
      return result;
    }
LABEL_34:
    C3D::Hash<objc_object  {objcproto10MTLTexture}*,C3D::ScratchAllocator>::_grow(a1, a2, (uint64_t)a3);
  }
  v10 = (v6 - 1) & v4;
  while ((v9 & 2) == 0 || *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v10) != v4)
  {
    ++v10;
    v11 = v9 > 3;
    v9 >>= 1;
    if (!v11)
      goto LABEL_7;
  }
  result = 0;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v10) = *a3;
  return result;
}

_DWORD *C3D::Array<C3D::Pass *,0u,C3D::ScratchAllocator>::push_back<C3D::Pass *&>(_DWORD *result, _QWORD *a2)
{
  _DWORD *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  const void *v7;
  unsigned int v8;
  void *Aligned;

  v3 = result;
  v4 = result[2];
  v5 = result[3];
  v6 = v4 + 1;
  v7 = (const void *)*((_QWORD *)result + 2);
  if (v4 + 1 > v5)
  {
    v8 = ((double)(v5 + 1) * 1.5);
    Aligned = (void *)C3DScratchAllocatorAllocateAligned(*(_QWORD *)result, 8 * v8, 8, 0);
    result = memcpy(Aligned, v7, 8 * v3[2]);
    *((_QWORD *)v3 + 2) = Aligned;
    v3[3] = v8;
    v4 = v3[2];
    v6 = v4 + 1;
    v7 = Aligned;
  }
  *((_QWORD *)v7 + v4) = *a2;
  v3[2] = v6;
  return result;
}

_DWORD *C3D::Array<unsigned char,16u,C3D::StackAllocator>::push_back<unsigned char>(_DWORD *result, _BYTE *a2)
{
  _DWORD *v3;
  unsigned int v4;
  unsigned int v5;
  const void *v6;
  unsigned int v7;
  void *Aligned;

  v3 = result;
  v4 = result[2];
  v5 = result[3];
  v6 = (const void *)*((_QWORD *)result + 2);
  if (v4 + 1 > v5)
  {
    v7 = ((double)(v5 + 1) * 1.5);
    Aligned = C3DStackAllocatorAllocateAligned(*(_QWORD *)result, v7, 1, 0);
    result = memcpy(Aligned, v6, v3[2]);
    *((_QWORD *)v3 + 2) = Aligned;
    v3[3] = v7;
    v6 = Aligned;
    v4 = v3[2];
  }
  *((_BYTE *)v6 + v4) = *a2;
  ++v3[2];
  return result;
}

uint64_t C3D::RenderGraph::propagateReadWriteResources(uint64_t a1, C3D::Pass **a2, unsigned int a3, unsigned __int8 a4, C3D::RefCountedResource *a5)
{
  C3D::Pass **v9;
  uint64_t result;
  uint64_t v11;
  C3D::PassResource *v12;
  _DWORD *v13;
  _QWORD v14[3];

  v9 = (C3D::Pass **)C3D::Array<C3D::RenderGraph::GraphNode,0u,C3D::ScratchAllocator>::operator[](*(_QWORD *)(a1 + 24), a3);
  result = C3DEngineContextGetStackAllocator(*(_QWORD *)(a1 + 8));
  if (v9 != a2)
  {
    v11 = result;
    do
    {
      result = C3D::PassDescriptor::inputAtIndex((C3D::Pass *)((char *)*v9 + 32), a4);
      if ((*(_WORD *)(result + 66) & 0x80) == 0)
        break;
      v12 = (C3D::PassResource *)C3D::Pass::resource(*v9);
      C3D::PassResource::setInputAtIndex(v12, a5, a4);
      ++*((_BYTE *)a5 + 33);
      C3D::RenderGraph::GraphNode::successorsAtIndex((uint64_t)v9, a4, v11, v14);
      a4 = *(_BYTE *)(C3D::Array<C3D::RenderGraph::Link,0u,C3D::ScratchAllocator>::operator[]((uint64_t)v14, 0) + 3);
      v13 = (_DWORD *)C3D::Array<C3D::RenderGraph::Link,0u,C3D::ScratchAllocator>::operator[]((uint64_t)v14, 0);
      result = C3D::Array<C3D::RenderGraph::GraphNode,0u,C3D::ScratchAllocator>::operator[](*(_QWORD *)(a1 + 24), *v13 & 0x7FFF);
      v9 = (C3D::Pass **)result;
    }
    while ((C3D::Pass **)result != a2);
  }
  return result;
}

double C3D::RenderGraph::clearDrawable(C3D::RenderGraph *this)
{
  uint64_t RenderContext;
  double result;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  SCNMTLRenderCommandEncoder v7;

  RenderContext = C3DEngineContextGetRenderContext(*((_QWORD *)this + 1));
  if (-[SCNMTLRenderContext layerTarget](RenderContext))
  {
    C3D::SetupDefaultRenderPassDescriptor(*((C3D **)this + 1), *((__C3DEngineContext **)this + 19), (MTLRenderPassDescriptor *)1);
    v4 = (void *)-[SCNMTLRenderContext currentCommandBuffer](RenderContext);
    v5 = -[SCNMTLRenderContext frameConstantBufferPool](RenderContext);
    v6 = *((_QWORD *)this + 19);
    bzero(&v7, 0xD70uLL);
    LODWORD(v7.var14[0].var1) = 1;
    LOBYTE(v7.var14[1].var0) = 1;
    v7.var24[0] = (unint64_t)v4;
    v7.var24[1] = objc_msgSend(v4, "renderCommandEncoderWithDescriptor:", v6);
    v7.var25[0] = v5;
    objc_msgSend((id)v7.var24[1], "setLabel:", CFSTR("Clear drawable"));
    memset(&v7.var1, 0, 32);
    return SCNMTLRenderCommandEncoder::endEncoding(&v7);
  }
  return result;
}

double C3D::RenderGraph::spriteKitTransitionBegin(C3D::RenderGraph *this, MTLRenderPassDescriptor *a2)
{
  uint64_t RenderContext;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  C3D::SetupDefaultRenderPassDescriptor(*((C3D **)this + 1), *((__C3DEngineContext **)this + 19), a2);
  RenderContext = C3DEngineContextGetRenderContext(*((_QWORD *)this + 1));
  v4 = (void *)-[SCNMTLRenderContext currentCommandBuffer](RenderContext);
  v5 = -[SCNMTLRenderContext frameConstantBufferPool](RenderContext);
  v6 = operator new();
  v7 = *((_QWORD *)this + 19);
  bzero((void *)v6, 0xD70uLL);
  *(_DWORD *)(v6 + 64) = 1;
  *(_BYTE *)(v6 + 72) = 1;
  *(_QWORD *)(v6 + 3384) = v4;
  v8 = (void *)objc_msgSend(v4, "renderCommandEncoderWithDescriptor:", v7);
  *(_QWORD *)(v6 + 3392) = v8;
  *(_QWORD *)(v6 + 3400) = v5;
  objc_msgSend(v8, "setLabel:", CFSTR("SpriteKit transition"));
  *(_OWORD *)(v6 + 24) = 0u;
  *(_OWORD *)(v6 + 8) = 0u;
  return -[SCNMTLRenderContext beginRenderPass:renderEncoder:parameters:](RenderContext, *((void **)this + 19), v6, 0);
}

void C3D::RenderGraph::spriteKitTransitionEnd(C3D::RenderGraph *this)
{
  uint64_t RenderContext;
  SCNMTLRenderCommandEncoder *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;

  RenderContext = C3DEngineContextGetRenderContext(*((_QWORD *)this + 1));
  v2 = (SCNMTLRenderCommandEncoder *)-[SCNMTLRenderContext renderEncoder](RenderContext);
  if (v2)
  {
    SCNMTLRenderCommandEncoder::endEncoding(v2);
    -[SCNMTLRenderContext endRenderPass](RenderContext);
    JUMPOUT(0x1DF0D41C0);
  }
  v3 = scn_default_log();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT))
    C3D::RenderGraph::spriteKitTransitionEnd(v3, v4, v5);
  SCNMTLRenderCommandEncoder::endEncoding(0);
  -[SCNMTLRenderContext endRenderPass](RenderContext);
}

void C3D::RenderGraph::logDependencyInputMismatch(uint64_t a1, _QWORD *a2, _QWORD *a3, int a4, int a5)
{
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  unsigned __int8 *v36;
  int v37;
  unsigned __int8 *v38;
  NSObject *v39;
  int v40;
  NSObject *v41;
  int v42;
  int v43;
  NSObject *v44;
  int v45;
  int v46;
  NSObject *v47;
  int v48;
  int v49;
  NSObject *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  NSObject *v55;
  NSObject *v56;
  NSObject *v57;
  NSObject *v58;
  int v59;
  int v60;
  NSObject *v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  NSObject *v67;
  uint64_t v68;
  const char *v69;
  uint64_t v70;
  const char *v71;
  uint64_t StackAllocator;
  char v73;
  uint8_t buf[4];
  uint64_t v75;
  __int16 __n_4;
  _BYTE __n_6[14];
  __int16 v78;
  uint64_t v79;
  __int16 v80;
  int v81;
  __int16 v82;
  const char *v83;
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  StackAllocator = C3DEngineContextGetStackAllocator(*(_QWORD *)(a1 + 8));
  if (a4 == 255 && a5 != 255)
  {
    v9 = C3D::PassDescriptor::outputAtIndex((C3D::PassDescriptor *)(*a3 + 32), a5);
    C3D::Array<C3D::RenderGraph::PortsPair,16u,C3D::StackAllocator>::Array(buf, StackAllocator);
    v10 = *((unsigned int *)a2 + 4);
    if ((_DWORD)v10)
    {
      v11 = (_DWORD *)a2[3];
      v12 = 4 * v10;
      do
      {
        if ((~*v11 & 0xFF0000) != 0)
        {
          v73 = BYTE2(*v11);
          C3D::Array<unsigned char,16u,C3D::StackAllocator>::push_back<unsigned char>(buf, &v73);
        }
        ++v11;
        v12 -= 4;
      }
      while (v12);
    }
    LOBYTE(a4) = 0;
    while (C3D::PassDescriptor::inputCount((C3D::PassDescriptor *)(*a2 + 32)) > a4)
    {
      v13 = *(unsigned __int8 *)(C3D::PassDescriptor::inputAtIndex((C3D::PassDescriptor *)(*a2 + 32), a4)+ 64);
      v14 = *(unsigned __int8 *)(v9 + 64);
      v15 = *(_QWORD *)&__n_6[2];
      v16 = (char *)HIDWORD(v75);
      v17 = (char *)(*(_QWORD *)&__n_6[2] + HIDWORD(v75));
      v18 = (char *)memchr(*(void **)&__n_6[2], (char)a4, HIDWORD(v75));
      if (v18)
        v19 = v18;
      else
        v19 = v17;
      v20 = &v19[-v15];
      if (v13 == v14 && v20 == v16)
        goto LABEL_19;
      LOBYTE(a4) = a4 + 1;
    }
    LOBYTE(a4) = -1;
  }
LABEL_19:
  v22 = a4;
  if (a5 == 255 && (_BYTE)a4 != 0xFF)
  {
    v23 = C3D::PassDescriptor::inputAtIndex((C3D::PassDescriptor *)(*a2 + 32), a4);
    C3D::Array<C3D::RenderGraph::PortsPair,16u,C3D::StackAllocator>::Array(buf, StackAllocator);
    v24 = *((unsigned int *)a3 + 10);
    if ((_DWORD)v24)
    {
      v25 = (_DWORD *)a3[6];
      v26 = 4 * v24;
      do
      {
        if ((~*v25 & 0xFF0000) != 0)
        {
          v73 = BYTE2(*v25);
          C3D::Array<unsigned char,16u,C3D::StackAllocator>::push_back<unsigned char>(buf, &v73);
        }
        ++v25;
        v26 -= 4;
      }
      while (v26);
    }
    LOBYTE(a5) = 0;
    while (C3D::PassDescriptor::outputCount((C3D::PassDescriptor *)(*a3 + 32)) > a5)
    {
      v27 = *(unsigned __int8 *)(C3D::PassDescriptor::outputAtIndex((C3D::PassDescriptor *)(*a3 + 32), a5)+ 64);
      v28 = *(unsigned __int8 *)(v23 + 64);
      v29 = *(_QWORD *)&__n_6[2];
      v30 = (char *)HIDWORD(v75);
      v31 = (char *)(*(_QWORD *)&__n_6[2] + HIDWORD(v75));
      v32 = (char *)memchr(*(void **)&__n_6[2], (char)a5, HIDWORD(v75));
      if (v32)
        v33 = v32;
      else
        v33 = v31;
      v34 = &v33[-v29];
      if (v27 == v28 && v34 == v30)
        goto LABEL_37;
      LOBYTE(a5) = a5 + 1;
    }
    LOBYTE(a5) = -1;
  }
LABEL_37:
  if (v22 != 255 && (_BYTE)a5 != 0xFF)
  {
    v36 = (unsigned __int8 *)C3D::PassDescriptor::inputAtIndex((C3D::PassDescriptor *)(*a2 + 32), v22);
    v37 = a5;
    v38 = (unsigned __int8 *)C3D::PassDescriptor::outputAtIndex((C3D::PassDescriptor *)(*a3 + 32), a5);
    if (!C3D::PassIODescriptor::isCompatible((C3D::PassIODescriptor *)v38, (const C3D::PassIODescriptor *)v36))
    {
      if ((C3D::RenderGraph::logDependencyInputMismatch(C3D::RenderGraph::GraphNode const&,C3D::RenderGraph::GraphNode const&,unsigned char,unsigned char)::done & 1) == 0)
      {
        C3D::RenderGraph::logDependencyInputMismatch(C3D::RenderGraph::GraphNode const&,C3D::RenderGraph::GraphNode const&,unsigned char,unsigned char)::done = 1;
        v39 = scn_default_log();
        if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
        {
          v68 = (**(uint64_t (***)(_QWORD))*a3)(*a3);
          if (*((_QWORD *)v38 + 1))
            v69 = (const char *)*((_QWORD *)v38 + 1);
          else
            v69 = "";
          v70 = (**(uint64_t (***)(_QWORD))*a2)(*a2);
          v71 = (const char *)*((_QWORD *)v36 + 1);
          if (!v71)
            v71 = "";
          *(_DWORD *)buf = 136316418;
          v75 = v68;
          __n_4 = 1024;
          *(_DWORD *)__n_6 = v37;
          *(_WORD *)&__n_6[4] = 2080;
          *(_QWORD *)&__n_6[6] = v69;
          v78 = 2080;
          v79 = v70;
          v80 = 1024;
          v81 = v22;
          v82 = 2080;
          v83 = v71;
          _os_log_error_impl(&dword_1DCCB8000, v39, OS_LOG_TYPE_ERROR, "Error: Dependency issue between source %s[%d]:%s and destination %s[%d]:%s", buf, 0x36u);
        }
      }
      v40 = *v36;
      if (v40 != *v38
        && (C3D::RenderGraph::logDependencyInputMismatch(C3D::RenderGraph::GraphNode const&,C3D::RenderGraph::GraphNode const&,unsigned char,unsigned char)::done & 1) == 0)
      {
        C3D::RenderGraph::logDependencyInputMismatch(C3D::RenderGraph::GraphNode const&,C3D::RenderGraph::GraphNode const&,unsigned char,unsigned char)::done = 1;
        v41 = scn_default_log();
        if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
          C3D::RenderGraph::logDependencyInputMismatch();
        v40 = *v36;
      }
      if (v40 == 1)
      {
        v42 = *((unsigned __int16 *)v38 + 8);
        v43 = *((unsigned __int16 *)v36 + 8);
        if (v42 != v43
          && (v43 + v42) >= 2
          && (C3D::RenderGraph::logDependencyInputMismatch(C3D::RenderGraph::GraphNode const&,C3D::RenderGraph::GraphNode const&,unsigned char,unsigned char)::done & 1) == 0)
        {
          C3D::RenderGraph::logDependencyInputMismatch(C3D::RenderGraph::GraphNode const&,C3D::RenderGraph::GraphNode const&,unsigned char,unsigned char)::done = 1;
          v44 = scn_default_log();
          if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
            C3D::RenderGraph::logDependencyInputMismatch();
        }
        v45 = *((unsigned __int16 *)v38 + 9);
        v46 = *((unsigned __int16 *)v36 + 9);
        if (v45 != v46
          && (v46 + v45) >= 2
          && (C3D::RenderGraph::logDependencyInputMismatch(C3D::RenderGraph::GraphNode const&,C3D::RenderGraph::GraphNode const&,unsigned char,unsigned char)::done & 1) == 0)
        {
          C3D::RenderGraph::logDependencyInputMismatch(C3D::RenderGraph::GraphNode const&,C3D::RenderGraph::GraphNode const&,unsigned char,unsigned char)::done = 1;
          v47 = scn_default_log();
          if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
            C3D::RenderGraph::logDependencyInputMismatch();
        }
        v48 = *((unsigned __int16 *)v38 + 10);
        v49 = *((unsigned __int16 *)v36 + 10);
        if (v48 != v49
          && (v49 + v48) >= 2
          && (C3D::RenderGraph::logDependencyInputMismatch(C3D::RenderGraph::GraphNode const&,C3D::RenderGraph::GraphNode const&,unsigned char,unsigned char)::done & 1) == 0)
        {
          C3D::RenderGraph::logDependencyInputMismatch(C3D::RenderGraph::GraphNode const&,C3D::RenderGraph::GraphNode const&,unsigned char,unsigned char)::done = 1;
          v50 = scn_default_log();
          if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
            C3D::RenderGraph::logDependencyInputMismatch();
        }
        v51 = v38[24];
        v52 = v36[24];
        if (SCNMTLTextureTypeIsMultisampled(v51))
        {
          v53 = SCNMTLTextureTypeNonMultisampledEquivalent(v51);
          if (v53 != SCNMTLTextureTypeNonMultisampledEquivalent(v52)
            && (C3D::RenderGraph::logDependencyInputMismatch(C3D::RenderGraph::GraphNode const&,C3D::RenderGraph::GraphNode const&,unsigned char,unsigned char)::done & 1) == 0)
          {
            C3D::RenderGraph::logDependencyInputMismatch(C3D::RenderGraph::GraphNode const&,C3D::RenderGraph::GraphNode const&,unsigned char,unsigned char)::done = 1;
            v54 = scn_default_log();
            if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
              C3D::RenderGraph::logDependencyInputMismatch();
          }
        }
        else if ((_DWORD)v51 != (_DWORD)v52
               && (C3D::RenderGraph::logDependencyInputMismatch(C3D::RenderGraph::GraphNode const&,C3D::RenderGraph::GraphNode const&,unsigned char,unsigned char)::done & 1) == 0)
        {
          C3D::RenderGraph::logDependencyInputMismatch(C3D::RenderGraph::GraphNode const&,C3D::RenderGraph::GraphNode const&,unsigned char,unsigned char)::done = 1;
          v55 = scn_default_log();
          if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
            C3D::RenderGraph::logDependencyInputMismatch();
        }
        if (v38[25] != v36[25]
          && (C3D::RenderGraph::logDependencyInputMismatch(C3D::RenderGraph::GraphNode const&,C3D::RenderGraph::GraphNode const&,unsigned char,unsigned char)::done & 1) == 0)
        {
          C3D::RenderGraph::logDependencyInputMismatch(C3D::RenderGraph::GraphNode const&,C3D::RenderGraph::GraphNode const&,unsigned char,unsigned char)::done = 1;
          v56 = scn_default_log();
          if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
            C3D::RenderGraph::logDependencyInputMismatch();
        }
        if (v38[27] != v36[27]
          && (C3D::RenderGraph::logDependencyInputMismatch(C3D::RenderGraph::GraphNode const&,C3D::RenderGraph::GraphNode const&,unsigned char,unsigned char)::done & 1) == 0)
        {
          C3D::RenderGraph::logDependencyInputMismatch(C3D::RenderGraph::GraphNode const&,C3D::RenderGraph::GraphNode const&,unsigned char,unsigned char)::done = 1;
          v57 = scn_default_log();
          if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
            C3D::RenderGraph::logDependencyInputMismatch();
        }
        if (*((unsigned __int16 *)v38 + 14) != *((unsigned __int16 *)v36 + 14)
          && (C3D::RenderGraph::logDependencyInputMismatch(C3D::RenderGraph::GraphNode const&,C3D::RenderGraph::GraphNode const&,unsigned char,unsigned char)::done & 1) == 0)
        {
          C3D::RenderGraph::logDependencyInputMismatch(C3D::RenderGraph::GraphNode const&,C3D::RenderGraph::GraphNode const&,unsigned char,unsigned char)::done = 1;
          v58 = scn_default_log();
          if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
            C3D::RenderGraph::logDependencyInputMismatch();
        }
        v59 = v38[30];
        v60 = v36[30];
        if (v59 != v60
          && (v60 + v59) >= 2
          && (C3D::RenderGraph::logDependencyInputMismatch(C3D::RenderGraph::GraphNode const&,C3D::RenderGraph::GraphNode const&,unsigned char,unsigned char)::done & 1) == 0)
        {
          C3D::RenderGraph::logDependencyInputMismatch(C3D::RenderGraph::GraphNode const&,C3D::RenderGraph::GraphNode const&,unsigned char,unsigned char)::done = 1;
          v61 = scn_default_log();
          if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
            C3D::RenderGraph::logDependencyInputMismatch();
        }
      }
      if (*v36 == 2)
      {
        v64 = *((_QWORD *)v38 + 2);
        v63 = (uint64_t *)(v38 + 16);
        v62 = v64;
        v66 = *((_QWORD *)v36 + 2);
        v65 = (uint64_t *)(v36 + 16);
        if (v62 != v66
          && (_ZZN3C3D11RenderGraph26logDependencyInputMismatchERKNS0_9GraphNodeES3_hhE4done__10_ & 1) == 0)
        {
          _ZZN3C3D11RenderGraph26logDependencyInputMismatchERKNS0_9GraphNodeES3_hhE4done__10_ = 1;
          v67 = scn_default_log();
          if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
            C3D::RenderGraph::logDependencyInputMismatch(v63, v65, v67);
        }
      }
    }
  }
}

uint64_t C3D::RenderGraph::getCurrentFrameCachedPass(C3D::RenderGraph *this, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  BOOL v4;
  uint64_t v6;

  v2 = (*((_DWORD *)this + 23) - 1) & a2;
  v3 = *(unsigned __int16 *)(*((_QWORD *)this + 10) + 2 * v2);
  if (v3 < 2)
    return 0;
  while ((v3 & 2) == 0 || *(_QWORD *)(*((_QWORD *)this + 8) + 8 * v2) != a2)
  {
    ++v2;
    v4 = v3 >= 4;
    v3 >>= 1;
    if (!v4)
      return 0;
  }
  v6 = *((_QWORD *)this + 9);
  if (v6)
    return *(_QWORD *)(v6 + 8 * v2);
  else
    return 0;
}

uint64_t C3D::RenderGraph::cachePassForCurrentFrame(C3D::RenderGraph *this, uint64_t a2, C3D::Pass *a3)
{
  C3D::Pass *v4;

  v4 = a3;
  return C3D::Hash<C3D::Pass *,C3D::ScratchAllocator>::insert((uint64_t)this + 56, a2, &v4);
}

C3D::Pass *C3D::RenderGraph::search(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t StackAllocator;
  int v6;
  uint64_t v7;
  unsigned int PrimitiveCount;
  C3D::Pass *v9;
  C3D::Pass **v10;
  const char *v11;
  _BOOL4 v12;
  int v13;
  uint64_t v14;
  _BOOL4 v15;
  C3D::PassDescriptor *v16;
  unsigned int v17;
  C3D::PassDescriptor *v18;
  uint64_t v19;
  const char *v20;
  C3D::PassDescriptor *v21;
  int v22;
  uint64_t v23;
  _BOOL4 v24;
  C3D::PassDescriptor *v25;
  unsigned int v26;
  C3D::PassDescriptor *v27;
  uint64_t v28;
  const char *v29;
  C3D::PassDescriptor *v30;
  C3D::Pass **v31;
  uint64_t v32;
  C3D::Pass *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  int v38;

  v2 = *(_QWORD *)(a1 + 24);
  if (!v2 || !*(_DWORD *)(v2 + 8))
    return 0;
  StackAllocator = C3DEngineContextGetStackAllocator(*(_QWORD *)(a1 + 8));
  C3DStackAllocatorPushFrame(StackAllocator);
  if (*(_DWORD *)(a2 + 40))
    v6 = 1;
  else
    v6 = 2;
  C3D::RenderGraph::clearAllDirtyBits(a1, v6);
  C3D::Array<C3D::RenderGraph::Link,0u,C3D::StackAllocator>::Array(&v37, StackAllocator);
  v7 = *(_QWORD *)(a2 + 32);
  if (v7)
    PrimitiveCount = C3DMeshElementGetPrimitiveCount(v7);
  else
    PrimitiveCount = 0;
  v36 = C3D::Array<C3D::RenderGraph::GraphNode,0u,C3D::ScratchAllocator>::operator[](*(_QWORD *)(a1 + 24), PrimitiveCount);
  C3D::Array<char const*,0u,C3D::StackAllocator>::push_back<char const*&>(&v37, &v36);
  while (1)
  {
    if (!v38)
    {
      v9 = 0;
      goto LABEL_57;
    }
    v10 = *(C3D::Pass ***)C3D::Array<C3D::RenderGraph::GraphNode *,0u,C3D::StackAllocator>::back((uint64_t)&v37);
    C3D::Array<C3D::RenderGraph::GraphNode *,0u,C3D::StackAllocator>::pop_back((uint64_t)&v37);
    if (!*(_BYTE *)(a2 + 44) || *v10 != *(C3D::Pass **)(a2 + 32))
      break;
LABEL_47:
    v31 = v10 + 4;
    if (*(_DWORD *)(a2 + 40))
      v31 = v10 + 1;
    v32 = *((unsigned int *)v31 + 2);
    if ((_DWORD)v32)
    {
      v33 = v31[2];
      v34 = 4 * v32;
      do
      {
        if ((*(_DWORD *)v33 & 0x8000) == 0)
        {
          v36 = C3D::Array<C3D::RenderGraph::GraphNode,0u,C3D::ScratchAllocator>::operator[](*(_QWORD *)(a1 + 24), *(_DWORD *)v33 & 0x7FFF);
          C3D::Array<char const*,0u,C3D::StackAllocator>::push_back<char const*&>(&v37, &v36);
          *(_DWORD *)v33 |= 0x8000u;
        }
        v33 = (C3D::Pass *)((char *)v33 + 4);
        v34 -= 4;
      }
      while (v34);
    }
  }
  if (*(_QWORD *)a2)
  {
    if ((**(uint64_t (***)(C3D::Pass *))*v10)(*v10))
    {
      v11 = (const char *)(**(uint64_t (***)(C3D::Pass *))*v10)(*v10);
      v12 = strcmp(v11, *(const char **)a2) == 0;
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 1;
  }
  v13 = *(_BYTE *)(a2 + 24) == 0;
  v14 = *(_QWORD *)(a2 + 8);
  v15 = v14 == 0;
  if (*(_BYTE *)(a2 + 24) || v14)
  {
    v16 = (C3D::PassDescriptor *)C3D::Pass::descriptor(*v10);
    if (!C3D::PassDescriptor::inputCount(v16))
      goto LABEL_32;
    v17 = 0;
    while (1)
    {
      v18 = (C3D::PassDescriptor *)C3D::Pass::descriptor(*v10);
      v19 = C3D::PassDescriptor::inputAtIndex(v18, (unsigned __int16)v17);
      v13 |= *(unsigned __int8 *)(v19 + 64) == *(unsigned __int8 *)(a2 + 24);
      if (v15)
        break;
      v20 = *(const char **)(v19 + 8);
      if (v20)
      {
        v15 = strcmp(v20, *(const char **)(a2 + 8)) == 0;
LABEL_28:
        if ((v15 & v13 & 1) != 0)
          goto LABEL_21;
        goto LABEL_29;
      }
      v15 = 0;
LABEL_29:
      ++v17;
      v21 = (C3D::PassDescriptor *)C3D::Pass::descriptor(*v10);
      if (v17 >= C3D::PassDescriptor::inputCount(v21))
        goto LABEL_32;
    }
    v15 = 1;
    goto LABEL_28;
  }
LABEL_21:
  v13 = 1;
  v15 = 1;
LABEL_32:
  v22 = *(_BYTE *)(a2 + 25) == 0;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = v23 == 0;
  if (*(_BYTE *)(a2 + 25) || v23)
  {
    v25 = (C3D::PassDescriptor *)C3D::Pass::descriptor(*v10);
    if (!C3D::PassDescriptor::outputCount(v25))
      goto LABEL_45;
    v26 = 0;
    while (1)
    {
      v27 = (C3D::PassDescriptor *)C3D::Pass::descriptor(*v10);
      v28 = C3D::PassDescriptor::outputAtIndex(v27, (unsigned __int16)v26);
      v22 |= *(unsigned __int8 *)(v28 + 64) == *(unsigned __int8 *)(a2 + 25);
      if (v24)
        break;
      v29 = *(const char **)(v28 + 8);
      if (v29)
      {
        v24 = strcmp(v29, *(const char **)(a2 + 16)) == 0;
LABEL_41:
        if ((v24 & v22 & 1) != 0)
          goto LABEL_34;
        goto LABEL_42;
      }
      v24 = 0;
LABEL_42:
      ++v26;
      v30 = (C3D::PassDescriptor *)C3D::Pass::descriptor(*v10);
      if (v26 >= C3D::PassDescriptor::outputCount(v30))
        goto LABEL_45;
    }
    v24 = 1;
    goto LABEL_41;
  }
LABEL_34:
  v22 = 1;
  v24 = 1;
LABEL_45:
  if ((v12 & v13 & v22 & v15) != 1 || !v24)
    goto LABEL_47;
  v9 = *v10;
LABEL_57:
  C3DStackAllocatorPopFrame(StackAllocator);
  return v9;
}

void C3D::RenderGraph::logPassIODescriptor(C3D::RenderGraph *this, C3D::PassIODescriptor *a2, const char *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  NSObject *v20;
  const char *v21;
  NSObject *v22;
  uint32_t v23;
  NSObject *v24;
  uint64_t v25;
  NSObject *v26;
  NSObject *v27;
  NSObject *v28;
  int v29;
  double v30;
  double v31;
  double v32;
  double v33;
  int v34;
  unsigned int v35;
  NSObject *v36;
  int v37;
  const char *v38;
  __int16 v39;
  const char *v40;
  __int16 v41;
  __int128 v42;
  _BYTE v43[10];
  double v44;
  _BYTE v45[10];
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;
  __int16 v54;
  _BYTE v55[10];
  __int16 v56;
  int v57;
  __int16 v58;
  int v59;
  __int16 v60;
  int v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v5 = *(unsigned __int8 *)a2;
  if (v5 == 2)
  {
    v24 = scn_default_log();
    if (!os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
      goto LABEL_14;
    v25 = *((_QWORD *)a2 + 2);
    v37 = 136315650;
    v38 = a3;
    v39 = 2080;
    v40 = a3;
    v41 = 2048;
    *(_QWORD *)&v42 = v25;
    v21 = "Info: |%s%slength : %lu";
    v22 = v24;
    v23 = 32;
    goto LABEL_13;
  }
  if (v5 != 1)
  {
    v26 = scn_default_log();
    if (!os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
      goto LABEL_14;
    v37 = 136315138;
    v38 = a3;
    v21 = "Info: |%stype : INVALID";
    v22 = v26;
    v23 = 12;
    goto LABEL_13;
  }
  v6 = -[__CFString cStringUsingEncoding:]((id)SCNMTLTextureTypeToString(*((unsigned __int8 *)a2 + 24)), "cStringUsingEncoding:", objc_msgSend(MEMORY[0x1E0CB3940], "defaultCStringEncoding"));
  v7 = -[__CFString cStringUsingEncoding:]((id)SCNMTLPixelFormatToString(*((unsigned __int16 *)a2 + 14)), "cStringUsingEncoding:", objc_msgSend(MEMORY[0x1E0CB3940], "defaultCStringEncoding"));
  v8 = scn_default_log();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    v37 = 136315394;
    v38 = a3;
    v39 = 2080;
    v40 = a3;
    _os_log_impl(&dword_1DCCB8000, v8, OS_LOG_TYPE_INFO, "Info: |%s%s|width|height|depth|        pixelFormat      |arrayLength|storageMode|usage|cpuCacheMo|mipmapCount|sampleCount|usedForRes|         textureType      |", (uint8_t *)&v37, 0x16u);
  }
  v9 = scn_default_log();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    v10 = *((unsigned __int16 *)a2 + 8);
    v11 = *((unsigned __int16 *)a2 + 9);
    v12 = *((unsigned __int16 *)a2 + 10);
    v13 = *((unsigned __int16 *)a2 + 11);
    v14 = *((unsigned __int8 *)a2 + 25);
    v15 = *((unsigned __int8 *)a2 + 26);
    v16 = *((unsigned __int8 *)a2 + 27);
    v17 = *((unsigned __int8 *)a2 + 30);
    v18 = *((unsigned __int8 *)a2 + 31);
    v19 = *((_DWORD *)a2 + 8);
    v37 = 136318466;
    v38 = a3;
    v39 = 2080;
    v40 = a3;
    v41 = 1024;
    LODWORD(v42) = v10;
    WORD2(v42) = 1024;
    *(_DWORD *)((char *)&v42 + 6) = v11;
    WORD5(v42) = 1024;
    HIDWORD(v42) = v12;
    *(_WORD *)v43 = 2080;
    *(_QWORD *)&v43[2] = v7;
    LOWORD(v44) = 1024;
    *(_DWORD *)((char *)&v44 + 2) = v13;
    HIWORD(v44) = 1024;
    *(_DWORD *)v45 = v14;
    *(_WORD *)&v45[4] = 1024;
    *(_DWORD *)&v45[6] = v15;
    v46 = 1024;
    v47 = v16;
    v48 = 1024;
    v49 = v17;
    v50 = 1024;
    v51 = v18;
    v52 = 1024;
    v53 = v19;
    v54 = 2080;
    *(_QWORD *)v55 = v6;
    _os_log_impl(&dword_1DCCB8000, v9, OS_LOG_TYPE_INFO, "Info: |%s%s|%5d|%6d|%5d|%25s|%11d|%11d|%5d|%10d|%11d|%11d|%10d|%26s|", (uint8_t *)&v37, 0x66u);
  }
  v20 = scn_default_log();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
  {
    LOWORD(v37) = 0;
    v21 = "Info: |";
    v22 = v20;
    v23 = 2;
LABEL_13:
    _os_log_impl(&dword_1DCCB8000, v22, OS_LOG_TYPE_INFO, v21, (uint8_t *)&v37, v23);
  }
LABEL_14:
  v27 = scn_default_log();
  if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
  {
    v37 = 136315394;
    v38 = a3;
    v39 = 2080;
    v40 = a3;
    _os_log_impl(&dword_1DCCB8000, v27, OS_LOG_TYPE_INFO, "Info: |%s%s|type|clearColor R|   G|   B|   A|attachmentType|loadMode|dispatchToOutput|usedInternally|registerTexture|registerResolveT|specificClearCol|readWrite|persistent|", (uint8_t *)&v37, 0x16u);
  }
  v28 = scn_default_log();
  if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
  {
    v29 = *(unsigned __int8 *)a2;
    v30 = *((float *)a2 + 12);
    v31 = *((float *)a2 + 13);
    v32 = *((float *)a2 + 14);
    v33 = *((float *)a2 + 15);
    v34 = *((unsigned __int8 *)a2 + 64);
    v35 = *((unsigned __int16 *)a2 + 33);
    v37 = 136318978;
    v38 = a3;
    v39 = 2080;
    v40 = a3;
    v41 = 1024;
    LODWORD(v42) = v29;
    WORD2(v42) = 2048;
    *(double *)((char *)&v42 + 6) = v30;
    HIWORD(v42) = 2048;
    *(double *)v43 = v31;
    *(_WORD *)&v43[8] = 2048;
    v44 = v32;
    *(_WORD *)v45 = 2048;
    *(double *)&v45[2] = v33;
    v46 = 1024;
    v47 = v34;
    v48 = 1024;
    v49 = v35 & 3;
    v50 = 1024;
    v51 = (v35 >> 2) & 1;
    v52 = 1024;
    v53 = (v35 >> 3) & 1;
    v54 = 1024;
    *(_DWORD *)v55 = (v35 >> 4) & 1;
    *(_WORD *)&v55[4] = 1024;
    *(_DWORD *)&v55[6] = (v35 >> 5) & 1;
    v56 = 1024;
    v57 = (v35 >> 6) & 1;
    v58 = 1024;
    v59 = (v35 >> 7) & 1;
    v60 = 1024;
    v61 = (v35 >> 8) & 1;
    _os_log_impl(&dword_1DCCB8000, v28, OS_LOG_TYPE_INFO, "Info: |%s%s|%4hhu|%12.1f|%4.1f|%4.1f|%4.1f|%14hhu|%8hhu|%16d|%14d|%15d|%16d|%16d|%9d|%10d|", (uint8_t *)&v37, 0x7Au);
  }
  v36 = scn_default_log();
  if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
  {
    LOWORD(v37) = 0;
    _os_log_impl(&dword_1DCCB8000, v36, OS_LOG_TYPE_INFO, "Info: |", (uint8_t *)&v37, 2u);
  }
}

void C3DRenderGraphClearRenderGraphResources(uint64_t a1)
{
  C3D::Hash<std::unique_ptr<C3D::RenderGraphResource>,C3D::MallocAllocator>::clear(*(_QWORD *)(a1 + 128));
}

void C3DRenderGraphInvalidateTechniques(uint64_t a1)
{
  const void *v2;

  *(_BYTE *)(a1 + 208) = 0;
  v2 = *(const void **)(a1 + 200);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 200) = 0;
  }
}

uint64_t C3DRenderGraphIsRecordingWithoutExecute(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 210);
}

uint64_t C3DRenderGraphSetRecordWithoutExecute(uint64_t result, char a2)
{
  *(_BYTE *)(result + 210) = a2;
  return result;
}

void C3D::Hash<std::unique_ptr<C3D::RenderGraphResource>,C3D::MallocAllocator>::clear(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t *v4;
  __int16 *v5;
  __int16 v6;
  uint64_t v7;
  size_t v8;

  v2 = *(_DWORD *)(a1 + 28);
  v3 = (v2 + 15);
  if (v2 == -15)
  {
    v8 = 0;
  }
  else
  {
    v4 = *(uint64_t **)(a1 + 8);
    v5 = *(__int16 **)(a1 + 16);
    do
    {
      v6 = *v5++;
      if ((v6 & 1) != 0)
      {
        v7 = *v4;
        *v4 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      }
      ++v4;
      --v3;
    }
    while (v3);
    v8 = 8 * (*(_DWORD *)(a1 + 28) + 15);
  }
  memset(*(void **)a1, 255, v8);
  bzero(*(void **)(a1 + 16), 2 * (*(_DWORD *)(a1 + 28) + 15));
  *(_DWORD *)(a1 + 24) = 0;
}

void C3D::Hash<objc_object  {objcproto10MTLTexture}*,C3D::ScratchAllocator>::_grow(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  __int16 *v6;
  int v7;
  uint64_t v8;
  __int16 v9;

  v5 = *(_QWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = *(__int16 **)(a1 + 24);
  v7 = *(_DWORD *)(a1 + 36);
  C3D::Hash<C3D::Pass *,C3D::ScratchAllocator>::_allocate((_QWORD *)a1, (2 * v7), a3);
  v8 = (v7 + 15);
  if ((_DWORD)v8)
  {
    do
    {
      v9 = *v6++;
      if ((v9 & 1) != 0)
        C3D::Hash<objc_object  {objcproto10MTLTexture}*,C3D::ScratchAllocator>::insert(a1, *v5, v4);
      ++v5;
      v4 += 8;
      --v8;
    }
    while (v8);
  }
}

void C3D::Hash<C3D::Pass *,C3D::StackAllocator>::_grow(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  __int16 *v6;
  int v7;
  uint64_t v8;
  __int16 v9;

  v5 = *(_QWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = *(__int16 **)(a1 + 24);
  v7 = *(_DWORD *)(a1 + 36);
  C3D::Hash<C3D::Pass *,C3D::StackAllocator>::_allocate(a1, (2 * v7), a3);
  v8 = (v7 + 15);
  if ((_DWORD)v8)
  {
    do
    {
      v9 = *v6++;
      if ((v9 & 1) != 0)
        C3D::Hash<C3D::Pass *,C3D::StackAllocator>::insert(a1, *v5, v4);
      ++v5;
      v4 += 8;
      --v8;
    }
    while (v8);
  }
}

unsigned __int8 *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,C3D::RenderGraph::validate(void)::$_0 &,C3D::RenderGraph::PortsPair *>(unsigned __int8 *result, unsigned __int8 *a2, _WORD *a3)
{
  unsigned int v3;
  unsigned int v4;
  __int16 v5;
  __int16 v6;
  __int16 v7;

  v3 = *a2;
  v4 = *(unsigned __int8 *)a3;
  if (v3 >= *result)
  {
    if (v4 < v3)
    {
      v6 = *(_WORD *)a2;
      *(_WORD *)a2 = *a3;
      *a3 = v6;
      if (*a2 < *result)
      {
        v7 = *(_WORD *)result;
        *(_WORD *)result = *(_WORD *)a2;
        *(_WORD *)a2 = v7;
      }
    }
  }
  else
  {
    v5 = *(_WORD *)result;
    if (v4 >= v3)
    {
      *(_WORD *)result = *(_WORD *)a2;
      *(_WORD *)a2 = v5;
      if (*(unsigned __int8 *)a3 >= v5)
        return result;
      *(_WORD *)a2 = *a3;
    }
    else
    {
      *(_WORD *)result = *a3;
    }
    *a3 = v5;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,C3D::RenderGraph::validate(void)::$_0 &,C3D::RenderGraph::PortsPair *>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int16 v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  __int16 v11;
  uint64_t v12;
  unsigned int v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  __int16 v17;
  __int16 v18;
  __int16 v19;
  __int16 v20;
  __int16 v21;

  v4 = (a2 - a1) >> 1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(a2 - 2) < *a1)
      {
        v6 = *(_WORD *)a1;
        *(_WORD *)a1 = *((_WORD *)a2 - 1);
        *((_WORD *)a2 - 1) = v6;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,C3D::RenderGraph::validate(void)::$_0 &,C3D::RenderGraph::PortsPair *>(a1, a1 + 2, (_WORD *)a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,C3D::RenderGraph::validate(void)::$_0 &,C3D::RenderGraph::PortsPair *>(a1, a1 + 2, (__int16 *)a1 + 2, (__int16 *)a2 - 1);
      return 1;
    case 5:
      v15 = a1 + 4;
      v16 = a1 + 6;
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,C3D::RenderGraph::validate(void)::$_0 &,C3D::RenderGraph::PortsPair *>(a1, a1 + 2, (__int16 *)a1 + 2, (__int16 *)a1 + 3);
      if (*(a2 - 2) < a1[6])
      {
        v17 = *(_WORD *)v16;
        *(_WORD *)v16 = *((_WORD *)a2 - 1);
        *((_WORD *)a2 - 1) = v17;
        if (*v16 < *v15)
        {
          v18 = *(_WORD *)v15;
          v19 = *(_WORD *)v16;
          *(_WORD *)v15 = *(_WORD *)v16;
          *(_WORD *)v16 = v18;
          if (a1[2] > v19)
          {
            v20 = *((_WORD *)a1 + 1);
            *((_WORD *)a1 + 1) = v19;
            *((_WORD *)a1 + 2) = v20;
            if (*a1 > v19)
            {
              v21 = *(_WORD *)a1;
              *(_WORD *)a1 = v19;
              *((_WORD *)a1 + 1) = v21;
            }
          }
        }
      }
      return 1;
    default:
      v7 = a1 + 4;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,C3D::RenderGraph::validate(void)::$_0 &,C3D::RenderGraph::PortsPair *>(a1, a1 + 2, (_WORD *)a1 + 2);
      v8 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v9 = 0;
      v10 = 0;
      break;
  }
  while (1)
  {
    if (*v8 < *v7)
    {
      v11 = *(_WORD *)v8;
      v12 = v9;
      while (1)
      {
        *(_WORD *)&a1[v12 + 6] = *(_WORD *)&a1[v12 + 4];
        if (v12 == -4)
          break;
        v13 = a1[v12 + 2];
        v12 -= 2;
        if (v13 <= v11)
        {
          v14 = &a1[v12 + 6];
          goto LABEL_13;
        }
      }
      v14 = a1;
LABEL_13:
      *(_WORD *)v14 = v11;
      if (++v10 == 8)
        return v8 + 2 == a2;
    }
    v7 = v8;
    v9 += 2;
    v8 += 2;
    if (v8 == a2)
      return 1;
  }
}

unsigned __int8 *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,C3D::RenderGraph::validate(void)::$_0 &,C3D::RenderGraph::PortsPair *>(unsigned __int8 *a1, unsigned __int8 *a2, __int16 *a3, __int16 *a4)
{
  unsigned __int8 *result;
  __int16 v9;
  __int16 v10;
  __int16 v11;

  result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,C3D::RenderGraph::validate(void)::$_0 &,C3D::RenderGraph::PortsPair *>(a1, a2, a3);
  if (*(unsigned __int8 *)a4 < *(unsigned __int8 *)a3)
  {
    v9 = *a3;
    *a3 = *a4;
    *a4 = v9;
    if (*(unsigned __int8 *)a3 < *a2)
    {
      v10 = *(_WORD *)a2;
      *(_WORD *)a2 = *a3;
      *a3 = v10;
      if (*a2 < *a1)
      {
        v11 = *(_WORD *)a1;
        *(_WORD *)a1 = *(_WORD *)a2;
        *(_WORD *)a2 = v11;
      }
    }
  }
  return result;
}

int *std::__introsort<std::_ClassicAlgPolicy,C3D::RenderGraph::resolvePartialDependencies(void)::$_0 &,C3D::RenderGraph::Link *,false>(int *result, int *a2, uint64_t a3, char a4)
{
  int *v7;
  int *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int *v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  int *v18;
  int *v19;
  int v20;
  int v21;
  int v22;
  int *v23;
  int *v24;
  int v25;
  int v26;
  int *v27;
  BOOL v28;
  int v29;
  int *v30;
  int *v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int *v37;
  int v38;
  int *v39;
  int *v40;
  int v41;
  int v42;
  unsigned int v43;
  int v44;
  int v45;
  int v46;
  int *v47;
  BOOL v49;
  uint64_t v50;
  int *v51;
  int v52;
  int v53;
  uint64_t v54;
  int *v55;
  int64_t v56;
  int64_t v57;
  int64_t v58;
  uint64_t v59;
  int *v60;
  int v61;
  int *v62;
  int v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int *v69;
  int *v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  unint64_t v74;
  int *v75;
  int v76;
  int v77;
  unsigned int v78;
  int v80;
  int v81;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v38 = *v8;
        if ((*(a2 - 1) & 0x7FFFu) < (*v8 & 0x7FFFu))
        {
          *v8 = *(a2 - 1);
          *(a2 - 1) = v38;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,C3D::RenderGraph::resolvePartialDependencies(void)::$_0 &,C3D::RenderGraph::Link *>(v8, v8 + 1, a2 - 1);
      case 4uLL:
        return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,C3D::RenderGraph::resolvePartialDependencies(void)::$_0 &,C3D::RenderGraph::Link *>(v8, v8 + 1, v8 + 2, a2 - 1);
      case 5uLL:
        v39 = v8 + 2;
        v40 = v8 + 3;
        result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,C3D::RenderGraph::resolvePartialDependencies(void)::$_0 &,C3D::RenderGraph::Link *>(v8, v8 + 1, v8 + 2, v8 + 3);
        v41 = v8[3];
        if ((*(a2 - 1) & 0x7FFFu) < (v41 & 0x7FFFu))
        {
          *v40 = *(a2 - 1);
          *(a2 - 1) = v41;
          v42 = *v40;
          v43 = *v40 & 0x7FFF;
          v44 = *v39;
          if (v43 < (*v39 & 0x7FFFu))
          {
            *v39 = v42;
            *v40 = v44;
            v45 = v8[1];
            if (v43 < (v45 & 0x7FFFu))
            {
              v8[1] = v42;
              v8[2] = v45;
              v46 = *v8;
              if (v43 < (*v8 & 0x7FFFu))
              {
                *v8 = v42;
                v8[1] = v46;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 95)
        {
          v47 = v8 + 1;
          v49 = v8 == a2 || v47 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v49)
            {
              v50 = 0;
              v51 = v8;
              do
              {
                v53 = *v51;
                v52 = v51[1];
                v51 = v47;
                if ((v52 & 0x7FFFu) < (v53 & 0x7FFFu))
                {
                  v54 = v50;
                  while (1)
                  {
                    *(int *)((char *)v8 + v54 + 4) = v53;
                    if (!v54)
                      break;
                    v53 = *(int *)((char *)v8 + v54 - 4);
                    v54 -= 4;
                    if ((v52 & 0x7FFFu) >= (v53 & 0x7FFFu))
                    {
                      v55 = (int *)((char *)v8 + v54 + 4);
                      goto LABEL_80;
                    }
                  }
                  v55 = v8;
LABEL_80:
                  *v55 = v52;
                }
                v47 = v51 + 1;
                v50 += 4;
              }
              while (v51 + 1 != a2);
            }
          }
          else if (!v49)
          {
            do
            {
              v81 = *v7;
              v80 = v7[1];
              v7 = v47;
              if ((v80 & 0x7FFFu) < (v81 & 0x7FFFu))
              {
                do
                {
                  *v47 = v81;
                  v81 = *(v47 - 2);
                  --v47;
                }
                while ((v80 & 0x7FFFu) < (v81 & 0x7FFFu));
                *v47 = v80;
              }
              v47 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v56 = (v10 - 2) >> 1;
            v57 = v56;
            do
            {
              v58 = v57;
              if (v56 >= v57)
              {
                v59 = (2 * v57) | 1;
                v60 = &v8[v59];
                if (2 * v58 + 2 >= (uint64_t)v10)
                {
                  v61 = *v60;
                }
                else
                {
                  v61 = v60[1];
                  if ((*v60 & 0x7FFFu) < (v61 & 0x7FFFu))
                  {
                    ++v60;
                    v59 = 2 * v58 + 2;
                  }
                  else
                  {
                    v61 = *v60;
                  }
                }
                v62 = &v8[v58];
                result = (int *)(v61 & 0x7FFF);
                v63 = *v62;
                v64 = *v62 & 0x7FFF;
                if (result >= v64)
                {
                  do
                  {
                    *v62 = v61;
                    v62 = v60;
                    if (v56 < v59)
                      break;
                    v65 = (2 * v59) | 1;
                    v60 = &v8[v65];
                    v59 = 2 * v59 + 2;
                    if (v59 >= (uint64_t)v10)
                    {
                      v61 = *v60;
                      v59 = v65;
                    }
                    else
                    {
                      v61 = *v60;
                      if ((*v60 & 0x7FFFu) >= (v60[1] & 0x7FFFu))
                      {
                        v59 = v65;
                      }
                      else
                      {
                        v61 = v60[1];
                        ++v60;
                      }
                    }
                    result = (int *)(v61 & 0x7FFF);
                  }
                  while (result >= v64);
                  *v62 = v63;
                }
              }
              v57 = v58 - 1;
            }
            while (v58);
            v66 = (unint64_t)v9 >> 2;
            do
            {
              v67 = 0;
              v68 = *v8;
              v69 = v8;
              do
              {
                v70 = &v69[v67 + 1];
                v71 = (2 * v67) | 1;
                v67 = 2 * v67 + 2;
                if (v67 >= v66)
                {
                  v72 = *v70;
                  v67 = v71;
                }
                else
                {
                  v72 = *v70;
                  result = (int *)(*v70 & 0x7FFF);
                  if (result >= (v70[1] & 0x7FFFu))
                  {
                    v67 = v71;
                  }
                  else
                  {
                    v72 = v70[1];
                    ++v70;
                  }
                }
                *v69 = v72;
                v69 = v70;
              }
              while (v67 <= (uint64_t)((unint64_t)(v66 - 2) >> 1));
              if (v70 == --a2)
              {
                *v70 = v68;
              }
              else
              {
                *v70 = *a2;
                *a2 = v68;
                v73 = (char *)v70 - (char *)v8 + 4;
                if (v73 >= 5)
                {
                  v74 = (((unint64_t)v73 >> 2) - 2) >> 1;
                  v75 = &v8[v74];
                  v76 = *v75;
                  v77 = *v70;
                  v78 = *v70 & 0x7FFF;
                  if ((*v75 & 0x7FFFu) < v78)
                  {
                    do
                    {
                      *v70 = v76;
                      v70 = v75;
                      if (!v74)
                        break;
                      v74 = (v74 - 1) >> 1;
                      v75 = &v8[v74];
                      v76 = *v75;
                    }
                    while ((*v75 & 0x7FFFu) < v78);
                    *v70 = v77;
                  }
                }
              }
            }
            while (v66-- > 2);
          }
          return result;
        }
        v11 = v10 >> 1;
        v12 = &v8[v10 >> 1];
        if ((unint64_t)v9 < 0x201)
        {
          result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,C3D::RenderGraph::resolvePartialDependencies(void)::$_0 &,C3D::RenderGraph::Link *>(&v7[v10 >> 1], v7, a2 - 1);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,C3D::RenderGraph::resolvePartialDependencies(void)::$_0 &,C3D::RenderGraph::Link *>(v7, &v7[v10 >> 1], a2 - 1);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,C3D::RenderGraph::resolvePartialDependencies(void)::$_0 &,C3D::RenderGraph::Link *>(v7 + 1, v12 - 1, a2 - 2);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,C3D::RenderGraph::resolvePartialDependencies(void)::$_0 &,C3D::RenderGraph::Link *>(v7 + 2, &v7[v11 + 1], a2 - 3);
          result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,C3D::RenderGraph::resolvePartialDependencies(void)::$_0 &,C3D::RenderGraph::Link *>(v12 - 1, v12, &v7[v11 + 1]);
          v13 = *v7;
          *v7 = *v12;
          *v12 = v13;
        }
        --a3;
        v14 = *v7;
        if ((a4 & 1) == 0)
        {
          v15 = *v7 & 0x7FFF;
          if ((*(v7 - 1) & 0x7FFFu) < v15)
            goto LABEL_12;
          if (v15 >= (*(a2 - 1) & 0x7FFFu))
          {
            v30 = v7 + 1;
            do
            {
              v8 = v30;
              if (v30 >= a2)
                break;
              ++v30;
            }
            while (v15 >= (*v8 & 0x7FFFu));
          }
          else
          {
            v8 = v7;
            do
            {
              v29 = v8[1];
              ++v8;
            }
            while (v15 >= (v29 & 0x7FFFu));
          }
          v31 = a2;
          if (v8 < a2)
          {
            v31 = a2;
            do
              v32 = *--v31;
            while (v15 < (v32 & 0x7FFFu));
          }
          if (v8 < v31)
          {
            v33 = *v8;
            v34 = *v31;
            do
            {
              *v8 = v34;
              *v31 = v33;
              do
              {
                v35 = v8[1];
                ++v8;
                v33 = v35;
              }
              while (v15 >= (v35 & 0x7FFFu));
              do
              {
                v36 = *--v31;
                v34 = v36;
              }
              while (v15 < (v36 & 0x7FFFu));
            }
            while (v8 < v31);
          }
          v37 = v8 - 1;
          if (v8 - 1 != v7)
            *v7 = *v37;
          a4 = 0;
          *v37 = v14;
          continue;
        }
        v15 = *v7 & 0x7FFF;
LABEL_12:
        v16 = 0;
        do
          v17 = v7[++v16];
        while ((v17 & 0x7FFFu) < v15);
        v18 = &v7[v16];
        v19 = a2;
        if (v16 == 1)
        {
          v19 = a2;
          do
          {
            if (v18 >= v19)
              break;
            v21 = *--v19;
          }
          while ((v21 & 0x7FFFu) >= v15);
        }
        else
        {
          do
            v20 = *--v19;
          while ((v20 & 0x7FFFu) >= v15);
        }
        if (v18 >= v19)
        {
          v27 = v18 - 1;
        }
        else
        {
          v22 = *v19;
          v23 = &v7[v16];
          v24 = v19;
          do
          {
            *v23 = v22;
            *v24 = v17;
            do
            {
              v25 = v23[1];
              ++v23;
              v17 = v25;
            }
            while ((v25 & 0x7FFFu) < v15);
            do
            {
              v26 = *--v24;
              v22 = v26;
            }
            while ((v26 & 0x7FFFu) >= v15);
          }
          while (v23 < v24);
          v27 = v23 - 1;
        }
        if (v27 != v7)
          *v7 = *v27;
        *v27 = v14;
        if (v18 < v19)
        {
LABEL_33:
          result = (int *)std::__introsort<std::_ClassicAlgPolicy,C3D::RenderGraph::resolvePartialDependencies(void)::$_0 &,C3D::RenderGraph::Link *,false>(v7, v27, a3, a4 & 1);
          a4 = 0;
          v8 = v27 + 1;
          continue;
        }
        v28 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,C3D::RenderGraph::resolvePartialDependencies(void)::$_0 &,C3D::RenderGraph::Link *>(v7, v27);
        v8 = v27 + 1;
        result = (int *)std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,C3D::RenderGraph::resolvePartialDependencies(void)::$_0 &,C3D::RenderGraph::Link *>(v27 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v28)
            continue;
          goto LABEL_33;
        }
        a2 = v27;
        if (!v28)
          goto LABEL_2;
        return result;
    }
  }
}

int *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,C3D::RenderGraph::resolvePartialDependencies(void)::$_0 &,C3D::RenderGraph::Link *>(int *result, int *a2, int *a3)
{
  int v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  int v9;

  v3 = *a2;
  v4 = *a2 & 0x7FFF;
  v5 = *result;
  v6 = *result & 0x7FFF;
  v7 = *a3;
  v8 = *a3 & 0x7FFF;
  if (v4 >= v6)
  {
    if (v8 < v4)
    {
      *a2 = v7;
      *a3 = v3;
      v9 = *result;
      if ((*a2 & 0x7FFFu) < (*result & 0x7FFFu))
      {
        *result = *a2;
        *a2 = v9;
      }
    }
  }
  else
  {
    if (v8 >= v4)
    {
      *result = v3;
      *a2 = v5;
      if ((*a3 & 0x7FFFu) >= v6)
        return result;
      *a2 = *a3;
    }
    else
    {
      *result = v7;
    }
    *a3 = v5;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,C3D::RenderGraph::resolvePartialDependencies(void)::$_0 &,C3D::RenderGraph::Link *>(int *a1, int *a2)
{
  uint64_t v4;
  _BOOL8 result;
  int v6;
  int *v7;
  int *v8;
  int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  int *v17;
  int *v18;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *a1;
      if ((*(a2 - 1) & 0x7FFFu) < (*a1 & 0x7FFFu))
      {
        *a1 = *(a2 - 1);
        *(a2 - 1) = v6;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,C3D::RenderGraph::resolvePartialDependencies(void)::$_0 &,C3D::RenderGraph::Link *>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,C3D::RenderGraph::resolvePartialDependencies(void)::$_0 &,C3D::RenderGraph::Link *>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      v17 = a1 + 2;
      v18 = a1 + 3;
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,C3D::RenderGraph::resolvePartialDependencies(void)::$_0 &,C3D::RenderGraph::Link *>(a1, a1 + 1, a1 + 2, a1 + 3);
      v19 = a1[3];
      if ((*(a2 - 1) & 0x7FFFu) < (v19 & 0x7FFFu))
      {
        *v18 = *(a2 - 1);
        *(a2 - 1) = v19;
        v20 = *v18;
        v21 = *v18 & 0x7FFF;
        v22 = *v17;
        if (v21 < (*v17 & 0x7FFFu))
        {
          *v17 = v20;
          *v18 = v22;
          v23 = a1[1];
          if (v21 < (v23 & 0x7FFFu))
          {
            a1[1] = v20;
            a1[2] = v23;
            v24 = *a1;
            if (v21 < (*a1 & 0x7FFFu))
            {
              *a1 = v20;
              a1[1] = v24;
            }
          }
        }
      }
      return 1;
    default:
      v7 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,C3D::RenderGraph::resolvePartialDependencies(void)::$_0 &,C3D::RenderGraph::Link *>(a1, a1 + 1, a1 + 2);
      v8 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v9 = 0;
      v10 = 12;
      break;
  }
  while (1)
  {
    v11 = *v8;
    v12 = *v8 & 0x7FFF;
    v13 = *v7;
    if (v12 < (*v7 & 0x7FFFu))
    {
      v14 = v10;
      while (1)
      {
        *(int *)((char *)a1 + v14) = v13;
        v15 = v14 - 4;
        if (v14 == 4)
          break;
        v13 = *(int *)((char *)a1 + v14 - 8);
        v14 -= 4;
        if (v12 >= (v13 & 0x7FFFu))
        {
          v16 = (int *)((char *)a1 + v15);
          goto LABEL_13;
        }
      }
      v16 = a1;
LABEL_13:
      *v16 = v11;
      if (++v9 == 8)
        return v8 + 1 == a2;
    }
    v7 = v8;
    v10 += 4;
    if (++v8 == a2)
      return 1;
  }
}

int *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,C3D::RenderGraph::resolvePartialDependencies(void)::$_0 &,C3D::RenderGraph::Link *>(int *a1, int *a2, int *a3, int *a4)
{
  int *result;
  int v9;
  int v10;
  int v11;

  result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,C3D::RenderGraph::resolvePartialDependencies(void)::$_0 &,C3D::RenderGraph::Link *>(a1, a2, a3);
  v9 = *a3;
  if ((*a4 & 0x7FFFu) < (*a3 & 0x7FFFu))
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = *a2;
    if ((*a3 & 0x7FFFu) < (*a2 & 0x7FFFu))
    {
      *a2 = *a3;
      *a3 = v10;
      v11 = *a1;
      if ((*a2 & 0x7FFFu) < (*a1 & 0x7FFFu))
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

uint64_t C3D::Hash<C3D::Pass *,C3D::ScratchAllocator>::insert(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  __int16 *v14;
  unsigned int v15;
  __int16 v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;

  v4 = a2;
  while (1)
  {
    v6 = *(_DWORD *)(a1 + 36);
    v7 = (v6 - 1) & v4;
    v8 = *(_QWORD *)(a1 + 24);
    v9 = *(unsigned __int16 *)(v8 + 2 * v7);
    if (v9 >= 2)
      break;
LABEL_7:
    v12 = v7 + 496;
    v13 = v6 + 15;
    if (v13 < (int)v7 + 496)
      v12 = v13;
    if (v7 >= v12)
    {
      v15 = v7;
    }
    else
    {
      v14 = (__int16 *)(v8 + 2 * v7);
      v15 = v7;
      while (1)
      {
        v16 = *v14++;
        if ((v16 & 1) == 0)
          break;
        if (v12 == ++v15)
          goto LABEL_34;
      }
    }
    if (v15 != v12)
    {
      *(_WORD *)(v8 + 2 * v15) |= 1u;
      if (v15 <= (int)v7 + 14)
      {
        v21 = v15;
      }
      else
      {
        while (2)
        {
          if (v15 >= 0xF)
            v17 = v15 - 14;
          else
            v17 = 0;
          v18 = v17 - 1;
          if (v17 <= v15)
            v19 = v15;
          else
            v19 = v17;
          v20 = 1;
          while (1)
          {
            v21 = v18 + 1;
            if (v17 <= v21)
              break;
LABEL_28:
            ++v20;
            v18 = v21;
            if ((_DWORD)v21 == v19)
              goto LABEL_33;
          }
          v22 = 1 << (v18 - v17 + 2);
          v23 = v20;
          LODWORD(a2) = v17;
          while (1)
          {
            v24 = a2;
            a2 = *(unsigned __int16 *)(v8 + 2 * a2);
            if ((v22 & a2) != 0)
              break;
            a2 = (v24 + 1);
            v22 = (unsigned __int16)v22 >> 1;
            --v23;
            if (a2 > v21)
              goto LABEL_28;
          }
          if (v21 >= v15)
          {
LABEL_33:
            *(_WORD *)(v8 + 2 * v15) ^= 1u;
            goto LABEL_34;
          }
          v25 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v21);
          *(_QWORD *)(v25 + 8 * v15) = *(_QWORD *)(v25 + 8 * v21);
          v8 = *(_QWORD *)(a1 + 24);
          *(_WORD *)(v8 + 2 * v24) = (*(_WORD *)(v8 + 2 * v24) | (1 << (v15 - v24 + 1))) ^ (1 << v23);
          v15 = v21;
          if (v21 > (int)v7 + 14)
            continue;
          break;
        }
        LOBYTE(v15) = v21;
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v21) = *a3;
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v21) = v4;
      v27 = *(_QWORD *)(a1 + 24);
      *(_WORD *)(v27 + 2 * v21) |= 1u;
      result = 1;
      *(_WORD *)(v27 + 2 * v7) |= 1 << (v15 - v7 + 1);
      ++*(_DWORD *)(a1 + 32);
      return result;
    }
LABEL_34:
    C3D::Hash<C3D::Pass *,C3D::ScratchAllocator>::_grow(a1, a2, (uint64_t)a3);
  }
  v10 = (v6 - 1) & v4;
  while ((v9 & 2) == 0 || *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v10) != v4)
  {
    ++v10;
    v11 = v9 > 3;
    v9 >>= 1;
    if (!v11)
      goto LABEL_7;
  }
  result = 0;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v10) = *a3;
  return result;
}

void C3D::Hash<C3D::Pass *,C3D::ScratchAllocator>::_grow(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  __int16 *v6;
  int v7;
  uint64_t v8;
  __int16 v9;

  v5 = *(_QWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = *(__int16 **)(a1 + 24);
  v7 = *(_DWORD *)(a1 + 36);
  C3D::Hash<C3D::Pass *,C3D::ScratchAllocator>::_allocate((_QWORD *)a1, (2 * v7), a3);
  v8 = (v7 + 15);
  if ((_DWORD)v8)
  {
    do
    {
      v9 = *v6++;
      if ((v9 & 1) != 0)
        C3D::Hash<C3D::Pass *,C3D::ScratchAllocator>::insert(a1, *v5, v4);
      ++v5;
      v4 += 8;
      --v8;
    }
    while (v8);
  }
}

uint64_t OUTLINED_FUNCTION_2_2(uint64_t a1, _QWORD *a2)
{
  return (**(uint64_t (***)(_QWORD))*a2)(*a2);
}

void OUTLINED_FUNCTION_3_2(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

void OUTLINED_FUNCTION_5_0(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;

  _os_log_error_impl(a1, v4, OS_LOG_TYPE_ERROR, a4, v5, 0xCu);
}

uint64_t OUTLINED_FUNCTION_6_0(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void OUTLINED_FUNCTION_7(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0xEu);
}

void OUTLINED_FUNCTION_13(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint8_t *v4;
  NSObject *v5;

  _os_log_fault_impl(a1, v5, OS_LOG_TYPE_FAULT, a4, v4, 0x16u);
}

uint64_t OUTLINED_FUNCTION_14(uint64_t result, float a2)
{
  _QWORD *v2;
  float *v3;

  *v3 = a2;
  *v2 = result;
  return result;
}

void OUTLINED_FUNCTION_17(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 268, a4);
}

void OUTLINED_FUNCTION_18(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, a5, 8u);
}

void OUTLINED_FUNCTION_19(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

BOOL OUTLINED_FUNCTION_20(NSObject *a1)
{
  return os_log_type_enabled(a1, OS_LOG_TYPE_FAULT);
}

uint64_t OUTLINED_FUNCTION_21()
{
  return scn_default_log();
}

const __CFString *OUTLINED_FUNCTION_22()
{
  unint64_t v0;

  return SCNMTLTextureTypeToString(v0);
}

C3D::RenderPass *C3D::GaussianBlurPass::GaussianBlurPass(C3D::GaussianBlurPass *this, C3D::RenderGraph *a2, C3D::Pass *a3, const Parameters *a4)
{
  C3D::RenderPass *result;
  unsigned int v6;

  result = C3D::RenderPass::RenderPass(this, a2, a3);
  *(_QWORD *)result = off_1EA599618;
  *((_OWORD *)result + 15) = *(_OWORD *)&a4->var0;
  *((_WORD *)result + 20) = *(_WORD *)&a4[1].var0;
  v6 = *(unsigned __int16 *)&a4[1].var2;
  if (v6 <= 1)
    LOWORD(v6) = 1;
  *((_WORD *)result + 21) = v6;
  return result;
}

const char *C3D::GaussianBlurPass::name(C3D::GaussianBlurPass *this)
{
  if (*((_BYTE *)this + 244))
    return "GaussianBlurPass-Y";
  else
    return "GaussianBlurPass-X";
}

void C3D::GaussianBlurPass::setup(C3D::GaussianBlurPass *this)
{
  C3D::Pass::setInputCount(this, 1u);
  C3D::Pass::setOutputCount(this, 1u);
}

void C3D::GaussianBlurPass::compile(C3D::GaussianBlurPass *this)
{
  uint64_t RenderContext;
  void *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  C3D::RenderGraphResourceManager *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 *v10;
  int v11;
  const char *v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _OWORD v25[6];
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  RenderContext = C3DEngineContextGetRenderContext(*((_QWORD *)this + 2));
  v3 = (void *)-[SCNMTLRenderContext resourceManager](RenderContext);
  v4 = objc_msgSend((id)-[SCNMTLResourceManager libraryManager]((uint64_t)v3), "frameworkLibrary");
  v5 = 0xC6A4A7935BD1E995
     * ((*(uint64_t (**)(C3D::GaussianBlurPass *))(*(_QWORD *)this + 64))(this) ^ ((unint64_t)*((unsigned __int8 *)this + 249) << 24) ^ ((unint64_t)*((unsigned __int8 *)this + 248) << 16) ^ ((unint64_t)*((unsigned __int8 *)this + 247) << 8) ^ *((unsigned __int8 *)this + 246) ^ 0x1A929E4D6F47A654);
  v6 = (0xC6A4A7935BD1E995 * (v5 ^ (v5 >> 47))) ^ ((0xC6A4A7935BD1E995 * (v5 ^ (v5 >> 47))) >> 47);
  v7 = *(C3D::RenderGraphResourceManager **)(*((_QWORD *)this + 3) + 128);
  v8 = C3D::RenderGraphResourceManager::get(v7, v6);
  *((_QWORD *)this + 32) = v8;
  if (v8)
    return;
  v9 = operator new();
  *(_QWORD *)v9 = &off_1EA5995F8;
  *(_QWORD *)(v9 + 8) = 0;
  *(_OWORD *)(v9 + 16) = 0u;
  *(_OWORD *)(v9 + 32) = 0u;
  *(_OWORD *)(v9 + 48) = 0u;
  *(_OWORD *)(v9 + 64) = 0u;
  *(_OWORD *)(v9 + 80) = 0u;
  *(_OWORD *)(v9 + 96) = 0u;
  *(_OWORD *)(v9 + 112) = 0u;
  *(_OWORD *)(v9 + 128) = 0u;
  *((_QWORD *)this + 32) = v9;
  C3D::RenderGraphResourceManager::set((uint64_t)v7, v6, v9);
  v24 = RenderContext;
  if (*((_WORD *)this + 123))
  {
    v10 = (unsigned __int16 *)(C3D::PassDescriptor::outputAtIndex((C3D::GaussianBlurPass *)((char *)this + 32), 0) + 28);
    v23 = 1;
LABEL_5:
    v12 = "smp_";
    goto LABEL_6;
  }
  v11 = *((unsigned __int16 *)this + 124);
  v23 = *((_WORD *)this + 124) != 0;
  v10 = (unsigned __int16 *)(C3D::PassDescriptor::outputAtIndex((C3D::GaussianBlurPass *)((char *)this + 32), 0) + 28);
  if (v11)
    goto LABEL_5;
  v12 = "";
LABEL_6:
  for (i = 2; i != 17; ++i)
  {
    v14 = *((_QWORD *)this + 32);
    memset(v25, 0, sizeof(v25));
    v26 = 0;
    v28 = 0u;
    v29 = 0u;
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    v33 = 0u;
    v34 = 0u;
    v35 = 0u;
    v36 = 0u;
    v37 = 0u;
    v38 = 0u;
    v39 = 0u;
    v40 = 0u;
    v41 = 0u;
    v42 = 0;
    v27 = v4;
    *(_QWORD *)&v28 = *v10;
    *((_QWORD *)&v39 + 1) = CFSTR("scn_draw_fullscreen_triangle_vertex");
    *(_QWORD *)&v40 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("bloom_blur_%sfrag_%d"), v12, i - 1);
    v15 = objc_msgSend(v3, "newRenderPipelineStateWithDesc:", v25);
    v16 = *(void **)(v14 + 8 * i);
    if (v16 != (void *)v15)
    {
      v17 = v15;
      if (v16)

      *(_QWORD *)(v14 + 8 * i) = v17;
    }
  }
  if (v23)
  {
    v18 = objc_alloc_init(MEMORY[0x1E0CC6B80]);
    objc_msgSend(v18, "setRAddressMode:", *((unsigned __int16 *)this + 123));
    objc_msgSend(v18, "setSAddressMode:", *((unsigned __int16 *)this + 124));
    objc_msgSend(v18, "setMinFilter:", 1);
    objc_msgSend(v18, "setMagFilter:", 1);
    v19 = *((_QWORD *)this + 32);
    v20 = objc_msgSend((id)-[SCNMTLRenderContext device](v24), "newSamplerStateWithDescriptor:", v18);
    v21 = *(void **)(v19 + 136);
    if (v21 != (void *)v20)
    {
      v22 = v20;
      if (v21)

      *(_QWORD *)(v19 + 136) = v22;
    }

  }
}

uint64_t C3D::GaussianBlurPass::execute(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t RenderContext;
  SCNMTLBufferPool *v6;
  void **v7;
  void **v8;
  uint64_t v9;
  unint64_t v10;
  float32x2_t v11;
  float v12;
  unsigned int v13;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  float32x2_t v23;
  unsigned int v24;
  float v25;
  float v26;
  float v27;
  __int128 v28;
  float v29;
  unint64_t v30;
  uint64_t v31;
  float v33;
  float32x2_t v34;
  __int128 v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD v39[16];

  v4 = *(_QWORD *)a2;
  RenderContext = C3DEngineContextGetRenderContext(*(_QWORD *)(a1 + 16));
  v6 = (SCNMTLBufferPool *)-[SCNMTLRenderContext frameConstantBufferPool](RenderContext);
  v7 = C3D::Pass::inputTextureAtIndex((C3D::Pass *)a1, 0);
  v8 = v7;
  if (*(_WORD *)(a2 + 18))
    v8 = (void **)(id)objc_msgSend(v7, "newTextureViewWithPixelFormat:textureType:levels:slices:", objc_msgSend(v7, "pixelFormat"), objc_msgSend(v7, "textureType"), *(unsigned __int16 *)(a2 + 18), 1, 0, 1);
  SCNMTLRenderCommandEncoder::setFragmentTexture(v4, v8, 0);
  if (*(_WORD *)(a1 + 246) || *(_WORD *)(a1 + 248))
  {
    v9 = C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*(_QWORD *)(a1 + 256) + 136);
    if (*(_QWORD *)(v4 + 3248) != v9)
    {
      *(_QWORD *)(v4 + 3248) = v9;
      objc_msgSend(*(id *)(v4 + 3392), "setFragmentSamplerState:atIndex:", v9, 0);
    }
  }
  v33 = (float)(unint64_t)objc_msgSend(v8, "width");
  v10 = objc_msgSend(v8, "height");
  v11.f32[0] = v33;
  v11.f32[1] = (float)v10;
  v12 = *(float *)(a1 + 240);
  v13 = *(_BYTE *)(a1 + 244) == 0;
  __asm { FMOV            V0.2S, #1.0 }
  v34 = vdiv_f32(_D0, vmaxnm_f32(v11, _D0));
  *(float *)&v19 = C3DComputeGaussianProbability(0.0, v12);
  v20 = 0;
  v21 = 0;
  *(_QWORD *)&v22 = 0;
  *((_QWORD *)&v22 + 1) = v19;
  v39[0] = v22;
  DWORD1(v22) = v34.i32[1];
  v23 = (float32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v13), 0x1FuLL)), *(int8x8_t *)&v22, (int8x8_t)v34.u32[0]);
  v24 = 1;
  while (1)
  {
    v35 = v19;
    v25 = (float)(v24 + 1);
    v26 = C3DComputeGaussianProbability((float)v24, v12);
    v27 = C3DComputeGaussianProbability(v25, v12);
    v29 = v26 + v27;
    if ((float)(v26 + v27) <= 0.002)
      break;
    *(float32x2_t *)&v28 = vmul_n_f32(v23, (float)((float)(v27 * v25) + (float)((float)v24 * v26)) / v29);
    *((float *)&v28 + 2) = v26 + v27;
    ++v21;
    v19 = v35;
    *(float *)&v19 = *(float *)&v35 + (float)(v29 * 2.0);
    v39[++v20] = v28;
    v24 += 2;
    if (v21 == 15)
      goto LABEL_14;
  }
  if (v21 < 0xF)
    bzero(&v39[v20 + 1], ((224 - v20 * 16) & 0xFFFFFFFF0) + 16);
  LODWORD(v19) = v35;
LABEL_14:
  v30 = 0;
  do
  {
    *((float *)&v39[v30 / 0x10] + 2) = *((float *)&v39[v30 / 0x10] + 2) / *(float *)&v19;
    v30 += 16;
  }
  while (16 * v21 + 16 != v30);
  if (v21 >= 0xE)
    LODWORD(v21) = 14;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  SCNMTLBufferPool::allocateAndCopy(v6, v39, 0x100uLL, &v36);
  v31 = objc_msgSend((id)C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*(_QWORD *)(a1 + 256) + 8 * v21 + 16), "state");
  if (*(_QWORD *)(v4 + 3376) != v31)
  {
    *(_QWORD *)(v4 + 3376) = v31;
    objc_msgSend(*(id *)(v4 + 3392), "setRenderPipelineState:", v31);
  }
  SCNMTLRenderCommandEncoder::setFragmentBuffer(v4, v37, v38, 0);
  return SCNMTLRenderCommandEncoder::drawFullScreenTriangle((SCNMTLRenderCommandEncoder *)v4);
}

void C3D::GaussianBlurPass::Resource::~Resource(C3D::GaussianBlurPass::Resource *this)
{
  void *v2;
  uint64_t i;
  void *v4;

  *(_QWORD *)this = &off_1EA5995F8;
  v2 = (void *)*((_QWORD *)this + 17);
  if (v2)

  for (i = 128; i != 8; i -= 8)
  {
    v4 = *(void **)((char *)this + i);
    if (v4)

  }
}

{
  void *v2;
  uint64_t v3;
  void *v4;

  *(_QWORD *)this = &off_1EA5995F8;
  v2 = (void *)*((_QWORD *)this + 17);
  if (v2)

  v3 = 128;
  while (1)
  {
    v4 = *(void **)((char *)this + v3);
    if (v4)

    v3 -= 8;
    if (v3 == 8)
      JUMPOUT(0x1DF0D41C0);
  }
}

void C3D::ComputePass::ComputePass(C3D::ComputePass *this, C3D::RenderGraph *a2, C3D::Pass *a3)
{
  uint64_t v3;

  C3D::Pass::Pass(this, a2, a3);
  *(_QWORD *)v3 = &unk_1EA598998;
  *(_DWORD *)(v3 + 32) = 3;
}

char *C3DScratchAllocatorAllocate(_QWORD *a1, size_t a2)
{
  return C3DScratchAllocator::Allocate(a1, a2, 8, 0);
}

uint64_t _rasterizerStateDidDie(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend(a2, "_rasterizerStateDidDie:", a4);
}

void sub_1DCD8A8B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1DCD8AB00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t (*C3DKeyFrameInterpolatorForType(int a1, int a2, int a3, unsigned int a4, int a5))()
{
  int v5;
  uint64_t (*result)();
  uint64_t (**v7)();
  char v8;

  v5 = a1 - 1;
  result = (uint64_t (*)())_C3DKeyFrameBoolInterpolator;
  switch(v5)
  {
    case 0:
    case 6:
      result = (uint64_t (*)())_C3DKeyFrameFloatInterpolator;
      if (a5 && a4 < 3)
      {
        v7 = off_1EA59F588;
        goto LABEL_43;
      }
      break;
    case 1:
      result = (uint64_t (*)())_C3DKeyFrameIntInterpolator;
      if (a5 && a4 < 3)
      {
        v7 = off_1EA59F5B8;
        goto LABEL_43;
      }
      break;
    case 2:
      return result;
    case 3:
    case 15:
      result = (uint64_t (*)())_C3DKeyFrameCharInterpolator;
      if (a5 && a4 < 3)
      {
        v7 = off_1EA59F690;
        goto LABEL_43;
      }
      break;
    case 5:
      result = (uint64_t (*)())_C3DKeyFrameDoubleInterpolator;
      if (a5 && a4 < 3)
      {
        v7 = off_1EA59F5A0;
        goto LABEL_43;
      }
      break;
    case 7:
    case 17:
      result = (uint64_t (*)())_C3DKeyFrameVector2Interpolator;
      if (a5 && a4 < 3)
      {
        v7 = off_1EA59F648;
        goto LABEL_43;
      }
      break;
    case 8:
    case 18:
      result = (uint64_t (*)())_C3DKeyFrameVector3Interpolator;
      if (a5 && a4 < 3)
      {
        v7 = off_1EA59F630;
        goto LABEL_43;
      }
      break;
    case 9:
    case 19:
      if (a2 == 3)
      {
        result = (uint64_t (*)())_C3DKeyFrameQuaternionInterpolator;
        if (a5 && a4 < 3)
        {
          v7 = off_1EA59F5E8;
          goto LABEL_43;
        }
      }
      else if (a2 == 4)
      {
        result = (uint64_t (*)())_C3DKeyFrameAxisAngleInterpolator;
        if (a5 && a4 < 3)
        {
          v7 = off_1EA59F5D0;
          goto LABEL_43;
        }
      }
      else
      {
        result = (uint64_t (*)())_C3DKeyFrameVector4Interpolator;
        if (a5 && a4 < 3)
        {
          v7 = off_1EA59F600;
          goto LABEL_43;
        }
      }
      break;
    case 10:
      if (a4 < 3)
        v8 = a5;
      else
        v8 = 0;
      if (a3)
      {
        if ((v8 & 1) != 0)
        {
          v7 = off_1EA59F660;
          goto LABEL_43;
        }
        result = (uint64_t (*)())_C3DKeyFrameMatrix4x4FastInterpolator;
      }
      else
      {
        if ((v8 & 1) != 0)
        {
          v7 = off_1EA59F678;
          goto LABEL_43;
        }
        result = (uint64_t (*)())_C3DKeyFrameMatrix4x4Interpolator;
      }
      break;
    case 12:
      result = (uint64_t (*)())_C3DKeyFrameColor4Interpolator;
      if (a5 && a4 < 3)
      {
        v7 = off_1EA59F618;
LABEL_43:
        result = v7[a4];
      }
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

float _C3DKeyFrameFloatInterpolator_linear(float *a1, float *a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, float *a8)
{
  double v8;
  float result;

  v8 = *a1 + (float)(*a2 - *a1) * a3;
  if (a7)
    v8 = v8 + *a8;
  result = v8;
  *a8 = result;
  return result;
}

float *_C3DKeyFrameFloatInterpolator_discrete(float *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, float *a7)
{
  float v7;

  v7 = *result;
  if (a6)
    v7 = v7 + *a7;
  *a7 = v7;
  return result;
}

float _C3DKeyFrameFloatInterpolator_cubic(float *a1, float *a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, float *a8)
{
  double v8;
  double v9;
  float result;

  v8 = a3 * a3 * a3;
  v9 = (v8 + a3 * a3 * -2.0 + a3) * *(float *)(a5 + 4)
     + (1.0 - (a3 * a3 * 3.0 - v8 * 2.0)) * *a1
     + (a3 * a3 * 3.0 + v8 * -2.0) * *a2
     + (v8 - a3 * a3) * *(float *)(a6 + 4);
  if (a7)
    v9 = v9 + *a8;
  result = v9;
  *a8 = result;
  return result;
}

float _C3DKeyFrameFloatInterpolator(float *a1, float *a2, int a3, uint64_t a4, uint64_t a5, int a6, float *a7, double a8)
{
  float result;
  double v9;

  if (!a3)
  {
    v9 = *a1 + (float)(*a2 - *a1) * a8;
    if (a6)
      v9 = v9 + *a7;
    result = v9;
    goto LABEL_8;
  }
  if (a3 == 1)
  {
    result = *a1;
    if (a6)
      result = result + *a7;
LABEL_8:
    *a7 = result;
    return result;
  }
  return _C3DKeyFrameFloatInterpolator_cubic(a1, a2, a8, 0, a4, a5, a6, a7);
}

double *_C3DKeyFrameDoubleInterpolator_linear(double *result, double *a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, double *a8)
{
  double v8;

  v8 = *result + (*a2 - *result) * a3;
  if (a7)
    v8 = *a8 + v8;
  *a8 = v8;
  return result;
}

double *_C3DKeyFrameDoubleInterpolator_discrete(double *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, double *a7)
{
  double v7;

  v7 = *result;
  if (a6)
    v7 = v7 + *a7;
  *a7 = v7;
  return result;
}

double *_C3DKeyFrameDoubleInterpolator_cubic(double *result, double *a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, double *a8)
{
  double v8;
  double v9;

  v8 = a3 * a3 * a3;
  v9 = (v8 + a3 * a3 * -2.0 + a3) * *(float *)(a5 + 4)
     + (1.0 - (a3 * a3 * 3.0 - v8 * 2.0)) * *result
     + (a3 * a3 * 3.0 + v8 * -2.0) * *a2
     + (v8 - a3 * a3) * *(float *)(a6 + 4);
  if (a7)
    v9 = *a8 + v9;
  *a8 = v9;
  return result;
}

double *_C3DKeyFrameDoubleInterpolator(double *result, double *a2, int a3, uint64_t a4, uint64_t a5, int a6, double *a7, double a8)
{
  double v8;

  if (!a3)
  {
    v8 = *result + (*a2 - *result) * a8;
    if (!a6)
      goto LABEL_5;
    goto LABEL_4;
  }
  if (a3 == 1)
  {
    v8 = *result;
    if (!a6)
    {
LABEL_5:
      *a7 = v8;
      return result;
    }
LABEL_4:
    v8 = v8 + *a7;
    goto LABEL_5;
  }
  return _C3DKeyFrameDoubleInterpolator_cubic(result, a2, a8, 0, a4, a5, a6, a7);
}

int *_C3DKeyFrameIntInterpolator_linear(int *result, _DWORD *a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int *a8)
{
  double v8;

  v8 = (double)*result + (double)(*a2 - *result) * a3;
  if (a7)
    v8 = v8 + (double)*a8;
  *a8 = (int)v8;
  return result;
}

int *_C3DKeyFrameIntInterpolator_discrete(int *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, _DWORD *a7)
{
  int v7;

  v7 = *result;
  if (a6)
    v7 += *a7;
  *a7 = v7;
  return result;
}

int *_C3DKeyFrameIntInterpolator_cubic(int *result, int *a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int *a8)
{
  double v8;
  double v9;

  v8 = a3 * a3 * a3;
  v9 = (v8 + a3 * a3 * -2.0 + a3) * *(float *)(a5 + 4)
     + (1.0 - (a3 * a3 * 3.0 - v8 * 2.0)) * (double)*result
     + (a3 * a3 * 3.0 + v8 * -2.0) * (double)*a2
     + (v8 - a3 * a3) * *(float *)(a6 + 4);
  if (a7)
    v9 = v9 + (double)*a8;
  *a8 = (int)v9;
  return result;
}

int *_C3DKeyFrameIntInterpolator(int *result, int *a2, unsigned int a3, uint64_t a4, uint64_t a5, int a6, int *a7, double a8)
{
  int v8;

  if (a3 > 1)
    return _C3DKeyFrameIntInterpolator_cubic(result, a2, a8, 0, a4, a5, a6, a7);
  v8 = *result;
  if (a6)
    v8 += *a7;
  *a7 = v8;
  return result;
}

float32x4_t *_C3DKeyFrameAxisAngleInterpolator_linear(float32x4_t *result, float32x4_t *a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, float32x4_t *a8)
{
  float32x4_t v8;
  uint32x4_t v9;
  unsigned int v10;
  float32x4_t v11;
  uint32x4_t v12;
  float v13;
  float32x4_t v14;
  float32x4_t v15;

  v8 = *result;
  v9 = (uint32x4_t)vceqzq_f32(*result);
  v9.i32[3] = v9.i32[2];
  v10 = vminvq_u32(v9);
  v11 = *a2;
  if ((v10 & 0x80000000) != 0)
  {
    v8 = *a2;
    v8.i32[3] = 0;
    v15 = v8;
    result = &v15;
  }
  v12 = (uint32x4_t)vceqzq_f32(v11);
  v12.i32[3] = v12.i32[2];
  if ((vminvq_u32(v12) & 0x80000000) != 0)
  {
    v8.i32[3] = 0;
    v15 = v8;
    v11 = v8;
  }
  v13 = a3;
  v14 = vmlaq_n_f32(*result, vsubq_f32(v11, *result), v13);
  if (a7)
    v14 = vaddq_f32(*a8, v14);
  *a8 = v14;
  return result;
}

float32x4_t *_C3DKeyFrameAxisAngleInterpolator_discrete(float32x4_t *result, float32x4_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, float32x4_t *a7)
{
  float32x4_t v7;
  uint32x4_t v8;
  float32x4_t v9;

  v7 = *result;
  v8 = (uint32x4_t)vceqzq_f32(*result);
  v8.i32[3] = v8.i32[2];
  if ((vminvq_u32(v8) & 0x80000000) != 0)
  {
    v7 = *a2;
    v7.i32[3] = 0;
    if (a6)
      goto LABEL_3;
LABEL_5:
    v9 = *result;
    goto LABEL_6;
  }
  if (!a6)
    goto LABEL_5;
LABEL_3:
  v9 = vaddq_f32(v7, *a7);
LABEL_6:
  *a7 = v9;
  return result;
}

float32x4_t *_C3DKeyFrameAxisAngleInterpolator(float32x4_t *result, float32x4_t *a2, int a3, double a4, int32x4_t a5, double a6, int32x4_t a7, uint64_t a8, uint64_t a9, int a10, float32x4_t *a11)
{
  float32x4_t v11;
  uint32x4_t v12;
  float32x4_t v13;
  uint32x4_t v14;
  float32x4_t v15;
  int8x16_t v16;
  float32x4_t v17;
  uint32x4_t v18;
  float32x4_t *v19;
  float v20;
  float32x4_t v21;
  float32x4_t v22;

  if (a3 == 1)
  {
    v11 = *result;
    v12 = (uint32x4_t)vceqzq_f32(*result);
    v12.i32[3] = v12.i32[2];
    if ((vminvq_u32(v12) & 0x80000000) != 0)
    {
      v11 = *a2;
      v11.i32[3] = 0;
      if (a10)
        goto LABEL_4;
    }
    else if (a10)
    {
LABEL_4:
      v13 = vaddq_f32(v11, *a11);
LABEL_14:
      *a11 = v13;
      return result;
    }
    v13 = *result;
    goto LABEL_14;
  }
  a5.i32[0] = 0;
  v14 = (uint32x4_t)vceqzq_f32(*result);
  v14.i32[3] = v14.i32[2];
  a7.i32[0] = vminvq_u32(v14);
  v15 = *a2;
  v16 = *(int8x16_t *)a2;
  v16.i32[3] = 0;
  v17 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(a5, a7), 0), v16, *(int8x16_t *)result);
  v18 = (uint32x4_t)vceqzq_f32(*a2);
  v18.i32[3] = v18.i32[2];
  if ((vminvq_u32(v18) & 0x80000000) != 0)
  {
    v19 = &v22;
    if (a7.i32[0] >= 0)
      v19 = result;
    v15 = v17;
    v15.i32[3] = 0;
    v22 = v15;
    v17 = *v19;
  }
  v20 = a4;
  v21 = vmlaq_n_f32(v17, vsubq_f32(v15, v17), v20);
  if (a10)
    v21 = vaddq_f32(v21, *a11);
  *a11 = v21;
  return result;
}

double _C3DKeyFrameQuaternionInterpolator_linear(float32x4_t *a1, float32x4_t *a2, double a3, double a4, double a5, double a6, double a7, double a8, float32x4_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, float32x4_t *a14)
{
  float v15;
  double result;
  float v17;
  float32x4_t v18;

  if (a13)
  {
    v18 = 0uLL;
    v15 = a3;
    C3DQuaternionSlerp(a1, a2, &v18, v15, a4, a5, a6, a7, a8, a9);
    *(_QWORD *)&result = C3DQuaternionAdd(&v18, a14, a14).u64[0];
  }
  else
  {
    v17 = a3;
    *(_QWORD *)&result = C3DQuaternionSlerp(a1, a2, a14, v17, a4, a5, a6, a7, a8, a9).u64[0];
  }
  return result;
}

float32x4_t _C3DKeyFrameQuaternionInterpolator_discrete(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, float32x4_t *a7)
{
  float32x4_t result;

  if (a6)
  {
    result.i64[0] = C3DQuaternionAdd(a1, a7, a7).u64[0];
  }
  else
  {
    result = *a1;
    *a7 = *a1;
  }
  return result;
}

float32x4_t _C3DKeyFrameQuaternionInterpolator(float32x4_t *a1, float32x4_t *a2, int a3, uint64_t a4, uint64_t a5, int a6, float32x4_t *a7, double a8, double a9, double a10, double a11, double a12, double a13, float32x4_t a14)
{
  float32x4_t result;

  if (a3 == 1)
  {
    if (a6)
    {
      result.i64[0] = C3DQuaternionAdd(a1, a7, a7).u64[0];
    }
    else
    {
      result = *a1;
      *a7 = *a1;
    }
  }
  else
  {
    *(double *)result.i64 = _C3DKeyFrameQuaternionInterpolator_linear(a1, a2, a8, a9, a10, a11, a12, a13, a14, 0, a4, a5, a6, a7);
  }
  return result;
}

float32x4_t *_C3DKeyFrameVector4Interpolator_linear(float32x4_t *result, float32x4_t *a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, float32x4_t *a8)
{
  float v8;
  float32x4_t v9;

  v8 = a3;
  v9 = vmlaq_n_f32(*result, vsubq_f32(*a2, *result), v8);
  if (a7)
    v9 = vaddq_f32(*a8, v9);
  *a8 = v9;
  return result;
}

float32x4_t _C3DKeyFrameVector4Interpolator_discrete(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, float32x4_t *a7)
{
  float32x4_t result;

  if (a6)
  {
    result = vaddq_f32(*a1, *a7);
    *a7 = result;
  }
  else
  {
    result = *a1;
    *a7 = *a1;
  }
  return result;
}

float32x4_t *_C3DKeyFrameVector4Interpolator_cubic(float32x4_t *result, float32x4_t *a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, float32x4_t *a8)
{
  float v8;
  float32x4_t v9;

  v8 = a3;
  v9 = vmlaq_n_f32(*result, vsubq_f32(*a2, *result), v8);
  if (a7)
    v9 = vaddq_f32(*a8, v9);
  *a8 = v9;
  return result;
}

float32x4_t *_C3DKeyFrameVector4Interpolator(float32x4_t *result, float32x4_t *a2, int a3, double a4, uint64_t a5, uint64_t a6, int a7, float32x4_t *a8)
{
  float32x4_t v8;
  float v9;
  float32x4_t v10;

  if (a3 == 1)
  {
    if (a7)
      v8 = vaddq_f32(*result, *a8);
    else
      v8 = *result;
    *a8 = v8;
  }
  else
  {
    v9 = a4;
    v10 = vmlaq_n_f32(*result, vsubq_f32(*a2, *result), v9);
    if (a7)
      v10 = vaddq_f32(v10, *a8);
    *a8 = v10;
  }
  return result;
}

float _C3DKeyFrameColor4Interpolator_linear(float *a1, float *a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, float *a8)
{
  float v9;
  float v11;
  _QWORD v12[2];

  if (a7)
  {
    v12[0] = 0;
    v12[1] = 0;
    v9 = a3;
    C3DColor4Lerp(a1, a2, (float *)v12, v9);
    return C3DColor4Add((float *)v12, a8, a8);
  }
  else
  {
    v11 = a3;
    return C3DColor4Lerp(a1, a2, a8, v11);
  }
}

__n128 _C3DKeyFrameColor4Interpolator_discrete(float *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, float *a7)
{
  __n128 result;

  if (a6)
  {
    result.n128_f32[0] = C3DColor4Add(a1, a7, a7);
  }
  else
  {
    result = *(__n128 *)a1;
    *(_OWORD *)a7 = *(_OWORD *)a1;
  }
  return result;
}

__n128 _C3DKeyFrameColor4Interpolator(float *a1, float *a2, int a3, uint64_t a4, uint64_t a5, int a6, float *a7, double a8)
{
  __n128 result;

  if (a3 == 1)
  {
    if (a6)
    {
      result.n128_f32[0] = C3DColor4Add(a1, a7, a7);
    }
    else
    {
      result = *(__n128 *)a1;
      *(_OWORD *)a7 = *(_OWORD *)a1;
    }
  }
  else
  {
    result.n128_f32[0] = _C3DKeyFrameColor4Interpolator_linear(a1, a2, a8, 0, a4, a5, a6, a7);
  }
  return result;
}

uint64_t _C3DKeyFrameVector3Interpolator_linear(uint64_t result, uint64_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10)
{
  float v10;
  float32x4_t v11;

  a4.i64[0] = *(_QWORD *)result;
  a4.i32[2] = *(_DWORD *)(result + 8);
  a5.i64[0] = *(_QWORD *)a2;
  a5.i32[2] = *(_DWORD *)(a2 + 8);
  v10 = *(double *)a3.i64;
  v11 = vmlaq_n_f32(a4, vsubq_f32(a5, a4), v10);
  if (a9)
  {
    a3.i64[0] = *(_QWORD *)a10;
    a3.i32[2] = *(_DWORD *)(a10 + 8);
    v11 = vaddq_f32(v11, a3);
  }
  *(_QWORD *)a10 = v11.i64[0];
  *(_DWORD *)(a10 + 8) = v11.i32[2];
  return result;
}

float *_C3DKeyFrameVector3Interpolator_discrete(float *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, float *a7)
{
  float v7;
  uint64_t v8;

  if (a6)
  {
    v7 = a7[1];
    *a7 = *result + *a7;
    a7[1] = result[1] + v7;
    a7[2] = result[2] + a7[2];
  }
  else
  {
    v8 = *(_QWORD *)result;
    a7[2] = result[2];
    *(_QWORD *)a7 = v8;
  }
  return result;
}

uint64_t _C3DKeyFrameVector3Interpolator_cubic(uint64_t result, uint64_t a2, double a3, float32x4_t a4, float32x4_t a5, uint64_t a6, int32x2_t *a7, int32x2_t *a8, int a9, uint64_t a10)
{
  double v10;
  double v11;
  double v12;
  float v13;
  float v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;

  a4.i64[0] = *(_QWORD *)result;
  a4.i32[2] = *(_DWORD *)(result + 8);
  a5.i64[0] = *(_QWORD *)a2;
  a5.i32[2] = *(_DWORD *)(a2 + 8);
  v10 = a3 * a3;
  v11 = a3 * a3 * a3;
  v12 = a3 * a3 * 3.0;
  v13 = 1.0 - (v12 - v11 * 2.0);
  v14 = v11 + a3 * a3 * -2.0 + a3;
  *(float *)&v12 = v12 + v11 * -2.0;
  *(float *)&v10 = v11 - v10;
  *(int32x2_t *)v15.f32 = vzip2_s32(*a7, a7[1]);
  *(int32x2_t *)&v15.u32[2] = vdup_lane_s32(a7[2], 1);
  *(int32x2_t *)v16.f32 = vzip2_s32(*a8, a8[1]);
  *(int32x2_t *)&v16.u32[2] = vdup_lane_s32(a8[2], 1);
  v17 = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v15, v14), a4, v13), a5, *(float *)&v12), v16, *(float *)&v10);
  if (a9)
  {
    a4.i64[0] = *(_QWORD *)a10;
    a4.i32[2] = *(_DWORD *)(a10 + 8);
    v17 = vaddq_f32(v17, a4);
  }
  *(_QWORD *)a10 = v17.i64[0];
  *(_DWORD *)(a10 + 8) = v17.i32[2];
  return result;
}

float *_C3DKeyFrameVector3Interpolator(float *result, uint64_t a2, int a3, int32x2_t *a4, int32x2_t *a5, int a6, float *a7, float32x4_t a8, float32x4_t a9, float32x4_t a10)
{
  float v10;
  float v11;
  float32x4_t v12;
  uint64_t v13;

  if (a3)
  {
    if (a3 == 1)
    {
      if (a6)
      {
        v10 = a7[1];
        *a7 = *result + *a7;
        a7[1] = result[1] + v10;
        a7[2] = result[2] + a7[2];
      }
      else
      {
        v13 = *(_QWORD *)result;
        a7[2] = result[2];
        *(_QWORD *)a7 = v13;
      }
    }
    else
    {
      return (float *)_C3DKeyFrameVector3Interpolator_cubic((uint64_t)result, a2, *(double *)a8.i64, a9, a10, 0, a4, a5, a6, (uint64_t)a7);
    }
  }
  else
  {
    a9.i64[0] = *(_QWORD *)result;
    a9.f32[2] = result[2];
    a10.i64[0] = *(_QWORD *)a2;
    a10.i32[2] = *(_DWORD *)(a2 + 8);
    v11 = *(double *)a8.i64;
    v12 = vmlaq_n_f32(a9, vsubq_f32(a10, a9), v11);
    if (a6)
    {
      a8.i64[0] = *(_QWORD *)a7;
      a8.f32[2] = a7[2];
      v12 = vaddq_f32(v12, a8);
    }
    *(_QWORD *)a7 = v12.i64[0];
    a7[2] = v12.f32[2];
  }
  return result;
}

float32x2_t *_C3DKeyFrameVector2Interpolator_linear(float32x2_t *result, float32x2_t *a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, float32x2_t *a8)
{
  float v8;
  float32x2_t v9;

  v8 = a3;
  v9 = vmla_n_f32(*result, vsub_f32(*a2, *result), v8);
  if (a7)
    v9 = vadd_f32(v9, *a8);
  *a8 = v9;
  return result;
}

float32x2_t *_C3DKeyFrameVector2Interpolator_discrete(float32x2_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, float32x2_t *a7)
{
  float32x2_t v7;

  v7 = *result;
  if (a6)
    v7 = vadd_f32(v7, *a7);
  *a7 = v7;
  return result;
}

float32x2_t *_C3DKeyFrameVector2Interpolator_cubic(float32x2_t *result, float32x2_t *a2, double a3, uint64_t a4, int32x2_t *a5, int32x2_t *a6, int a7, float32x2_t *a8)
{
  double v8;
  double v9;
  double v10;
  float v11;
  float v12;
  float v13;
  float32x2_t v14;
  float v15;
  float32x2_t v16;

  v8 = a3 * a3;
  v9 = a3 * a3 * a3;
  v10 = a3 * a3 * 3.0;
  v11 = 1.0 - (v10 - v9 * 2.0);
  v12 = v9 + a3 * a3 * -2.0 + a3;
  v13 = v10 + v9 * -2.0;
  v14 = vmla_n_f32(vmla_n_f32(vmul_n_f32((float32x2_t)vzip2_s32(*a5, a5[1]), v12), *result, v11), *a2, v13);
  v15 = v9 - v8;
  v16 = vmla_n_f32(v14, (float32x2_t)vzip2_s32(*a6, a6[1]), v15);
  if (a7)
    v16 = vadd_f32(v16, *a8);
  *a8 = v16;
  return result;
}

float32x2_t *_C3DKeyFrameVector2Interpolator(float32x2_t *result, float32x2_t *a2, int a3, int32x2_t *a4, int32x2_t *a5, int a6, float32x2_t *a7, double a8)
{
  float32x2_t v8;
  float v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  float32x2_t v17;
  float32x2_t v18;

  if (a3)
  {
    if (a3 == 1)
    {
      v8 = *result;
      if ((a6 & 1) == 0)
        goto LABEL_7;
    }
    else
    {
      v10 = a8 * a8;
      v11 = a8 * a8 * a8;
      v12 = a8 * a8 * 3.0;
      v13 = 1.0 - (v12 - v11 * 2.0);
      v14 = v11 + a8 * a8 * -2.0 + a8;
      v15 = v12 + v11 * -2.0;
      v16 = v11 - v10;
      *(float *)&v13 = v13;
      *(float *)&v14 = v14;
      v17 = vmla_n_f32(vmul_n_f32((float32x2_t)vzip2_s32(*a4, a4[1]), *(float *)&v14), *result, *(float *)&v13);
      *(float *)&v14 = v15;
      v18 = vmla_n_f32(v17, *a2, *(float *)&v14);
      *(float *)&v14 = v16;
      v8 = vmla_n_f32(v18, (float32x2_t)vzip2_s32(*a5, a5[1]), *(float *)&v14);
      if (!a6)
        goto LABEL_7;
    }
    goto LABEL_6;
  }
  v9 = a8;
  v8 = vmla_n_f32(*result, vsub_f32(*a2, *result), v9);
  if ((a6 & 1) != 0)
LABEL_6:
    v8 = vadd_f32(v8, *a7);
LABEL_7:
  *a7 = v8;
  return result;
}

double _C3DKeyFrameMatrix4x4FastInterpolator_linear(float32x4_t *a1, float32x4_t *a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, float32x4_t *a8)
{
  float v9;
  double result;
  float v11;
  float32x4_t v12[4];

  if (a7)
  {
    memset(v12, 0, sizeof(v12));
    v9 = a3;
    C3DMatrix4x4Lerp(a1, a2, v12, v9);
    return C3DMatrix4x4Mult((uint64_t)v12, a8, a8);
  }
  else
  {
    v11 = a3;
    *(_QWORD *)&result = C3DMatrix4x4Lerp(a1, a2, a8, v11).u64[0];
  }
  return result;
}

__n128 _C3DKeyFrameMatrix4x4FastInterpolator_discrete(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7)
{
  __n128 result;
  __int128 v8;
  __int128 v9;

  if (a6)
  {
    result.n128_f64[0] = C3DMatrix4x4Mult(a1, (float32x4_t *)a7, (_OWORD *)a7);
  }
  else
  {
    result = *(__n128 *)a1;
    v8 = *(_OWORD *)(a1 + 16);
    v9 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(a7 + 32) = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a7 + 48) = v9;
    *(__n128 *)a7 = result;
    *(_OWORD *)(a7 + 16) = v8;
  }
  return result;
}

double _C3DKeyFrameMatrix4x4FastInterpolator_cubic(float32x4_t *a1, float32x4_t *a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, float32x4_t *a8)
{
  float v9;
  double result;
  float v11;
  float32x4_t v12[4];

  if (a7)
  {
    memset(v12, 0, sizeof(v12));
    v9 = a3;
    C3DMatrix4x4Lerp(a1, a2, v12, v9);
    return C3DMatrix4x4Mult((uint64_t)v12, a8, a8);
  }
  else
  {
    v11 = a3;
    *(_QWORD *)&result = C3DMatrix4x4Lerp(a1, a2, a8, v11).u64[0];
  }
  return result;
}

__n128 _C3DKeyFrameMatrix4x4FastInterpolator(uint64_t a1, float32x4_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, double a8)
{
  __n128 result;
  __int128 v9;
  __int128 v10;

  if ((_DWORD)a3)
  {
    if ((_DWORD)a3 == 1)
    {
      if (a6)
      {
        result.n128_f64[0] = C3DMatrix4x4Mult(a1, (float32x4_t *)a7, (_OWORD *)a7);
      }
      else
      {
        result = *(__n128 *)a1;
        v9 = *(_OWORD *)(a1 + 16);
        v10 = *(_OWORD *)(a1 + 48);
        *(_OWORD *)(a7 + 32) = *(_OWORD *)(a1 + 32);
        *(_OWORD *)(a7 + 48) = v10;
        *(__n128 *)a7 = result;
        *(_OWORD *)(a7 + 16) = v9;
      }
    }
    else
    {
      result.n128_f64[0] = _C3DKeyFrameMatrix4x4FastInterpolator_cubic((float32x4_t *)a1, a2, a8, 0, a4, a5, a6, (float32x4_t *)a7);
    }
  }
  else
  {
    result.n128_f64[0] = _C3DKeyFrameMatrix4x4FastInterpolator_linear((float32x4_t *)a1, a2, a8, a3, a4, a5, a6, (float32x4_t *)a7);
  }
  return result;
}

float _C3DKeyFrameMatrix4x4Interpolator_linear(float32x4_t *a1, float32x4_t *a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, float32x4_t *a8)
{
  float v9;
  double v10;
  float v11;
  float32x4_t v13[4];

  if (a7)
  {
    memset(v13, 0, sizeof(v13));
    v9 = a3;
    C3DMatrix4x4Interpolate(a1, a2, v13, v9);
    v10 = C3DMatrix4x4Mult((uint64_t)v13, a8, a8);
  }
  else
  {
    v11 = a3;
    C3DMatrix4x4Interpolate(a1, a2, a8, v11);
  }
  return *(float *)&v10;
}

__n128 _C3DKeyFrameMatrix4x4Interpolator_discrete(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7)
{
  __n128 result;
  __int128 v8;
  __int128 v9;

  if (a6)
  {
    result.n128_f64[0] = C3DMatrix4x4Mult(a1, (float32x4_t *)a7, (_OWORD *)a7);
  }
  else
  {
    result = *(__n128 *)a1;
    v8 = *(_OWORD *)(a1 + 16);
    v9 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(a7 + 32) = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a7 + 48) = v9;
    *(__n128 *)a7 = result;
    *(_OWORD *)(a7 + 16) = v8;
  }
  return result;
}

float _C3DKeyFrameMatrix4x4Interpolator_cubic(float32x4_t *a1, float32x4_t *a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, float32x4_t *a8)
{
  float v9;
  double v10;
  float v11;
  float32x4_t v13[4];

  if (a7)
  {
    memset(v13, 0, sizeof(v13));
    v9 = a3;
    C3DMatrix4x4Interpolate(a1, a2, v13, v9);
    v10 = C3DMatrix4x4Mult((uint64_t)v13, a8, a8);
  }
  else
  {
    v11 = a3;
    C3DMatrix4x4Interpolate(a1, a2, a8, v11);
  }
  return *(float *)&v10;
}

__n128 _C3DKeyFrameMatrix4x4Interpolator(uint64_t a1, float32x4_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, double a8)
{
  __n128 result;
  __int128 v9;
  __int128 v10;

  if ((_DWORD)a3)
  {
    if ((_DWORD)a3 == 1)
    {
      if (a6)
      {
        result.n128_f64[0] = C3DMatrix4x4Mult(a1, (float32x4_t *)a7, (_OWORD *)a7);
      }
      else
      {
        result = *(__n128 *)a1;
        v9 = *(_OWORD *)(a1 + 16);
        v10 = *(_OWORD *)(a1 + 48);
        *(_OWORD *)(a7 + 32) = *(_OWORD *)(a1 + 32);
        *(_OWORD *)(a7 + 48) = v10;
        *(__n128 *)a7 = result;
        *(_OWORD *)(a7 + 16) = v9;
      }
    }
    else
    {
      result.n128_f32[0] = _C3DKeyFrameMatrix4x4Interpolator_cubic((float32x4_t *)a1, a2, a8, 0, a4, a5, a6, (float32x4_t *)a7);
    }
  }
  else
  {
    result.n128_f32[0] = _C3DKeyFrameMatrix4x4Interpolator_linear((float32x4_t *)a1, a2, a8, a3, a4, a5, a6, (float32x4_t *)a7);
  }
  return result;
}

_BYTE *_C3DKeyFrameBoolInterpolator(_BYTE *result, _BYTE *a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _BYTE *a8)
{
  if (a3 < 1.0)
    a2 = result;
  *a8 = *a2;
  return result;
}

unsigned __int8 *_C3DKeyFrameCharInterpolator_linear(unsigned __int8 *result, unsigned __int8 *a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, _BYTE *a8)
{
  unsigned int v8;
  double v9;
  double v10;

  v8 = *result;
  v9 = (double)v8;
  v10 = (double)v8 + (double)(int)(*a2 - v8) * a3;
  if (a7)
  {
    LOBYTE(v9) = *a8;
    v10 = v10 + (double)*(unint64_t *)&v9;
  }
  *a8 = (int)v10;
  return result;
}

char *_C3DKeyFrameCharInterpolator_discrete(char *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, _BYTE *a7)
{
  char v7;

  v7 = *result;
  if (a6)
    v7 += *a7;
  *a7 = v7;
  return result;
}

_BYTE *_C3DKeyFrameCharInterpolator_cubic(_BYTE *result, _BYTE *a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, _BYTE *a8)
{
  unint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  unint64_t v14;
  double v15;
  double v16;

  *(double *)&v8 = a3 * a3 * a3;
  v9 = a3 * a3 * 3.0;
  v10 = 1.0 - (v9 - *(double *)&v8 * 2.0);
  v11 = *(double *)&v8 + a3 * a3 * -2.0;
  v12 = v9 + *(double *)&v8 * -2.0;
  v13 = *(double *)&v8 - a3 * a3;
  LOBYTE(v8) = *result;
  *(double *)&v14 = (double)v8;
  v15 = (v11 + a3) * *(float *)(a5 + 4) + v10 * *(double *)&v14;
  LOBYTE(v14) = *a2;
  v16 = v15 + v12 * (double)v14 + v13 * *(float *)(a6 + 4);
  if (a7)
  {
    LOBYTE(v13) = *a8;
    v16 = v16 + (double)*(unint64_t *)&v13;
  }
  *a8 = (int)v16;
  return result;
}

unsigned __int8 *_C3DKeyFrameCharInterpolator(unsigned __int8 *result, _BYTE *a2, int a3, uint64_t a4, uint64_t a5, int a6, _BYTE *a7, double a8)
{
  int v8;
  unsigned int v9;
  double v10;
  double v11;

  if (!a3)
  {
    v9 = *result;
    v10 = (double)v9;
    v11 = (double)v9 + (double)(int)(*a2 - v9) * a8;
    if (a6)
    {
      LOBYTE(v10) = *a7;
      v11 = v11 + (double)*(unint64_t *)&v10;
    }
    v8 = (int)v11;
    goto LABEL_8;
  }
  if (a3 == 1)
  {
    LOBYTE(v8) = *result;
    if (a6)
      LOBYTE(v8) = *a7 + v8;
LABEL_8:
    *a7 = v8;
    return result;
  }
  return _C3DKeyFrameCharInterpolator_cubic(result, a2, a8, 0, a4, a5, a6, a7);
}

uint64_t C3DKeyFrameInterpolatorGetSemantic(double (*a1)(float32x4_t *a1, float32x4_t *a2, double a3, double a4, double a5, double a6, double a7, double a8, float32x4_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, float32x4_t *a14))
{
  if (a1 == _C3DKeyFrameQuaternionInterpolator_linear
    || (char *)a1 == (char *)_C3DKeyFrameQuaternionInterpolator
    || (char *)a1 == (char *)_C3DKeyFrameQuaternionInterpolator_discrete)
  {
    return 3;
  }
  else
  {
    return 0;
  }
}

double C3DTimingFunctionSpring(float *a1, double a2, float a3)
{
  double v4;
  float v5;
  double v6;
  double v7;
  __double2 v8;
  double v9;

  v4 = a3 * a2;
  v5 = a1[6];
  if (v5 >= 1.0)
  {
    v6 = a1[8] + a1[10] * v4;
    v9 = exp(-(v4 * a1[7]));
  }
  else
  {
    v6 = exp(-(v4 * v5) * a1[7]);
    v7 = a1[8];
    v8 = __sincos_stret(v4 * a1[9]);
    v9 = v8.__sinval * a1[10] + v7 * v8.__cosval;
  }
  return 1.0 - v6 * v9;
}

double C3DTimingFunctionSolveCurve(float *a1, double a2)
{
  float v2;
  double v3;
  double v4;
  double v5;
  int v6;
  double v7;
  double v8;
  double v9;
  float v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;

  v2 = a1[1];
  v3 = *a1 * 3.0;
  v4 = -(v3 - (float)(a1[2] - *a1) * 3.0);
  v5 = 1.0 - v3 - v4;
  v6 = 8;
  v7 = a2;
  do
  {
    v8 = v7 * (v3 + (v5 * v7 - (v3 - (float)(a1[2] - *a1) * 3.0)) * v7);
    if (vabdd_f64(v8, a2) < 0.001)
      goto LABEL_13;
    v9 = v3 + (v4 + v4 + v5 * 3.0 * v7) * v7;
    if (fabs(v9) < 0.000001)
      break;
    v7 = v7 - (v8 - a2) / v9;
    --v6;
  }
  while (v6);
  v10 = 0.0;
  if (a2 >= 0.0)
  {
    v10 = 1.0;
    v11 = 1.0;
    if (a2 <= 1.0)
    {
      v12 = 0.0;
      v7 = a2;
      do
      {
        v13 = v7 * (v3 + (v5 * v7 - (v3 - (float)(a1[2] - *a1) * 3.0)) * v7);
        if (vabdd_f64(v13, a2) < 0.001)
          break;
        if (v13 >= a2)
          v11 = v7;
        else
          v12 = v7;
        v7 = v12 + (v11 - v12) * 0.5;
      }
      while (v12 < v11);
LABEL_13:
      v10 = v7;
    }
  }
  v14 = v2 * 3.0;
  v15 = -(v14 - (float)(a1[3] - v2) * 3.0);
  return (v14 + (v15 + (1.0 - v14 - v15) * v10) * v10) * v10;
}

double C3DTimingFunctionCurve(uint64_t a1, double a2)
{
  return C3DTimingFunctionSolveCurve((float *)(a1 + 24), a2);
}

BOOL _C3DTimingFunctionInitWithPropertyList(uint64_t a1, CFTypeRef cf)
{
  CFTypeID v4;
  double (*v5)(uint64_t, double);
  _BOOL8 result;
  const __CFNumber *Value;
  const __CFNumber *v8;
  CFTypeID v9;
  float v10;
  const __CFNumber *v11;
  const __CFNumber *v12;
  CFTypeID v13;
  float v14;
  const __CFNumber *v15;
  const __CFNumber *v16;
  CFTypeID v17;
  float v18;
  const __CFNumber *v19;
  const __CFNumber *v20;
  CFTypeID v21;
  float v22;
  NSObject *v23;
  double valuePtr;

  if (!cf)
    return 0;
  v4 = CFGetTypeID(cf);
  if (v4 == CFStringGetTypeID())
  {
    v5 = (double (*)(uint64_t, double))C3DTimingFunctionLinear;
LABEL_19:
    *(_QWORD *)(a1 + 16) = v5;
    return 1;
  }
  if ((C3DCFTypeIsDictionary() & 1) != 0)
  {
    Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("c0"));
    if (Value)
    {
      v8 = Value;
      v9 = CFGetTypeID(Value);
      if (v9 == CFNumberGetTypeID())
      {
        valuePtr = 0.0;
        CFNumberGetValue(v8, kCFNumberCGFloatType, &valuePtr);
        v10 = valuePtr;
        *(float *)(a1 + 24) = v10;
      }
    }
    v11 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("c1"));
    if (v11)
    {
      v12 = v11;
      v13 = CFGetTypeID(v11);
      if (v13 == CFNumberGetTypeID())
      {
        valuePtr = 0.0;
        CFNumberGetValue(v12, kCFNumberCGFloatType, &valuePtr);
        v14 = valuePtr;
        *(float *)(a1 + 28) = v14;
      }
    }
    v15 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("c2"));
    if (v15)
    {
      v16 = v15;
      v17 = CFGetTypeID(v15);
      if (v17 == CFNumberGetTypeID())
      {
        valuePtr = 0.0;
        CFNumberGetValue(v16, kCFNumberCGFloatType, &valuePtr);
        v18 = valuePtr;
        *(float *)(a1 + 32) = v18;
      }
    }
    v19 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("c3"));
    if (v19)
    {
      v20 = v19;
      v21 = CFGetTypeID(v19);
      if (v21 == CFNumberGetTypeID())
      {
        valuePtr = 0.0;
        CFNumberGetValue(v20, kCFNumberCGFloatType, &valuePtr);
        v22 = valuePtr;
        *(float *)(a1 + 36) = v22;
      }
    }
    v5 = C3DTimingFunctionCurve;
    goto LABEL_19;
  }
  v23 = scn_default_log();
  result = os_log_type_enabled(v23, OS_LOG_TYPE_ERROR);
  if (result)
  {
    _C3DTimingFunctionInitWithPropertyList_cold_1(v23);
    return 0;
  }
  return result;
}

const __CFString *_C3DTimingFunctionCopyPropertyList(uint64_t (**cf)())
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const __CFAllocator *v10;
  __CFDictionary *Mutable;
  CFNumberRef v12;
  CFNumberRef v13;
  CFNumberRef v14;
  CFNumberRef v15;
  double valuePtr;

  if (!cf)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      _C3DTimingFunctionCopyPropertyList_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  if (cf[2] == C3DTimingFunctionLinear)
    return CFSTR("linear");
  v10 = CFGetAllocator(cf);
  Mutable = CFDictionaryCreateMutable(v10, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  valuePtr = *((float *)cf + 6);
  v12 = CFNumberCreate(0, kCFNumberCGFloatType, &valuePtr);
  CFDictionaryAddValue(Mutable, CFSTR("c0"), v12);
  CFRelease(v12);
  valuePtr = *((float *)cf + 7);
  v13 = CFNumberCreate(0, kCFNumberCGFloatType, &valuePtr);
  CFDictionaryAddValue(Mutable, CFSTR("c1"), v13);
  CFRelease(v13);
  valuePtr = *((float *)cf + 8);
  v14 = CFNumberCreate(0, kCFNumberCGFloatType, &valuePtr);
  CFDictionaryAddValue(Mutable, CFSTR("c2"), v14);
  CFRelease(v14);
  valuePtr = *((float *)cf + 9);
  v15 = CFNumberCreate(0, kCFNumberCGFloatType, &valuePtr);
  CFDictionaryAddValue(Mutable, CFSTR("c3"), v15);
  CFRelease(v15);
  return (const __CFString *)Mutable;
}

uint64_t _C3DTimingFunctionFinalizeDeserialization()
{
  return 1;
}

uint64_t C3DTimingFunctionCreateSpring(float a1, float a2, float a3, float a4)
{
  uint64_t result;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;

  if (C3DTimingFunctionGetTypeID_onceToken != -1)
    dispatch_once(&C3DTimingFunctionGetTypeID_onceToken, &__block_literal_global_22);
  result = C3DTypeCreateInstance_(C3DTimingFunctionGetTypeID_typeID, 0x20uLL);
  v9 = sqrtf(a2 / a1);
  v10 = sqrtf(a1 * a2);
  v11 = a3 / (float)(v10 + v10);
  if (v11 >= 1.0)
  {
    v13 = v9 - a4;
    v12 = 0.0;
  }
  else
  {
    v12 = v9 * sqrtf(1.0 - (float)(v11 * v11));
    v13 = (float)-(float)(a4 - (float)(v11 * v9)) / v12;
  }
  *(float *)(result + 24) = v11;
  *(float *)(result + 28) = v9;
  *(_DWORD *)(result + 32) = 1065353216;
  *(float *)(result + 36) = v12;
  *(float *)(result + 40) = v13;
  *(_QWORD *)(result + 16) = C3DTimingFunctionSpring;
  return result;
}

uint64_t C3DTimingFunctionCreateWithControlPoints(float a1, float a2, float a3, float a4)
{
  uint64_t result;

  if (C3DTimingFunctionGetTypeID_onceToken != -1)
    dispatch_once(&C3DTimingFunctionGetTypeID_onceToken, &__block_literal_global_22);
  result = C3DTypeCreateInstance_(C3DTimingFunctionGetTypeID_typeID, 0x20uLL);
  *(float *)(result + 24) = a1;
  *(float *)(result + 28) = a2;
  *(float *)(result + 32) = a3;
  *(float *)(result + 36) = a4;
  *(_QWORD *)(result + 16) = C3DTimingFunctionCurve;
  return result;
}

uint64_t C3DTimingFunctionCreateWithPropertyList(const void *a1)
{
  uint64_t Instance;

  if (C3DTimingFunctionGetTypeID_onceToken != -1)
    dispatch_once(&C3DTimingFunctionGetTypeID_onceToken, &__block_literal_global_22);
  Instance = C3DTypeCreateInstance_(C3DTimingFunctionGetTypeID_typeID, 0x20uLL);
  _C3DTimingFunctionInitWithPropertyList(Instance, a1);
  return Instance;
}

uint64_t C3DTimingFunctionGetControlPoints(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DTimingFunctionGetControlPoints_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return a1 + 24;
}

uint64_t C3DTimingFunctionSolve(uint64_t a1, double a2, float a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (!a1)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      C3DTimingFunctionGetControlPoints_cold_1(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  return (*(uint64_t (**)(uint64_t, double, float))(a1 + 16))(a1, a2, a3);
}

CFStringRef _C3DTimingFunctionCFCopyFormatDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DTimingFunction>"));
}

CFStringRef _C3DTimingFunctionCFCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DTimingFunction>"));
}

void C3D::SSRDownSampleColorDepthPass::SSRDownSampleColorDepthPass(C3D::ComputePass *a1, C3D::RenderGraph *a2, C3D::Pass *a3, uint64_t a4)
{
  _QWORD *v5;

  C3D::ComputePass::ComputePass(a1, a2, a3);
  *v5 = off_1EA59A478;
  v5[15] = a4;
}

const char *C3D::SSRDownSampleColorDepthPass::name(C3D::SSRDownSampleColorDepthPass *this)
{
  return "SSRDownSampleColorDepthPass";
}

uint64_t C3D::SSRDownSampleColorDepthPass::setup(C3D::SSRDownSampleColorDepthPass *this)
{
  uint64_t v2;
  __int16 v3;
  uint64_t result;
  _BYTE v5[12];
  __int16 v6;
  _BYTE v7[12];
  __int16 v8;

  C3D::Pass::setInputCount(this, 3u);
  C3D::Pass::setOutputCount(this, 2u);
  *(_QWORD *)(C3D::PassDescriptor::inputAtIndex((C3D::SSRDownSampleColorDepthPass *)((char *)this + 32), 0) + 8) = "COLOR";
  *(_BYTE *)(C3D::PassDescriptor::inputAtIndex((C3D::SSRDownSampleColorDepthPass *)((char *)this + 32), 1u) + 64) = 2;
  *(_BYTE *)(C3D::PassDescriptor::inputAtIndex((C3D::SSRDownSampleColorDepthPass *)((char *)this + 32), 2u) + 64) = 2;
  *(_QWORD *)(C3D::PassDescriptor::inputAtIndex((C3D::SSRDownSampleColorDepthPass *)((char *)this + 32), 2u) + 8) = "BackDepth";
  v2 = C3D::PassDescriptor::outputAtIndex((C3D::SSRDownSampleColorDepthPass *)((char *)this + 32), 0);
  *(_WORD *)(v2 + 16) = **((_WORD **)this + 15);
  *(_WORD *)(v2 + 18) = *(_WORD *)(*((_QWORD *)this + 15) + 2);
  C3D::Pass::parentColorDesc(this, (uint64_t)v7);
  if (v8 == 81)
  {
    v3 = 80;
  }
  else
  {
    C3D::Pass::parentColorDesc(this, (uint64_t)v5);
    v3 = v6;
  }
  *(_WORD *)(v2 + 28) = v3;
  *(_QWORD *)(v2 + 8) = "ColorDownSampled";
  *(_BYTE *)(v2 + 26) = 3;
  result = C3D::PassDescriptor::outputAtIndex((C3D::SSRDownSampleColorDepthPass *)((char *)this + 32), 1u);
  *(_WORD *)(result + 16) = **((_WORD **)this + 15);
  *(_WORD *)(result + 18) = *(_WORD *)(*((_QWORD *)this + 15) + 2);
  *(_WORD *)(result + 28) = 65;
  *(_QWORD *)(result + 8) = "DepthDownSampled";
  *(_BYTE *)(result + 26) = 3;
  return result;
}

void C3D::SSRDownSampleColorDepthPass::compile(C3D::SSRDownSampleColorDepthPass *this)
{
  uint64_t RenderContext;
  void *v3;
  int v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  C3D::RenderGraphResourceManager *v9;
  uint64_t v10;
  _QWORD *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  char v16;

  RenderContext = C3DEngineContextGetRenderContext(*((_QWORD *)this + 2));
  v3 = (void *)-[SCNMTLRenderContext resourceManager](RenderContext);
  v4 = -[SCNMTLRenderContext reverseZ](RenderContext);
  v16 = v4;
  if (v4)
    v6 = 2;
  else
    v6 = 0;
  v5 = *(_DWORD *)(*((_QWORD *)this + 15) + 4);
  v7 = 0xC6A4A7935BD1E995
     * ((*(uint64_t (**)(C3D::SSRDownSampleColorDepthPass *))(*(_QWORD *)this + 64))(this) ^ 0x35253C9ADE8F4CA8 ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * (v5 | v6)) ^ ((0xC6A4A7935BD1E995 * (v5 | v6)) >> 47))));
  v8 = (0xC6A4A7935BD1E995 * (v7 ^ (v7 >> 47))) ^ ((0xC6A4A7935BD1E995 * (v7 ^ (v7 >> 47))) >> 47);
  v9 = *(C3D::RenderGraphResourceManager **)(*((_QWORD *)this + 3) + 128);
  v10 = C3D::RenderGraphResourceManager::get(v9, v8);
  *((_QWORD *)this + 14) = v10;
  if (!v10)
  {
    v11 = (_QWORD *)operator new();
    v11[1] = 0;
    v11[2] = 0;
    *v11 = &off_1EA59A588;
    *((_QWORD *)this + 14) = v11;
    C3D::RenderGraphResourceManager::set((uint64_t)v9, v8, (uint64_t)v11);
    v12 = objc_alloc_init(MEMORY[0x1E0CC6AA0]);
    objc_msgSend(v12, "setConstantValue:type:withName:", *((_QWORD *)this + 15) + 4, 29, CFSTR("SSRDownSample"));
    objc_msgSend(v12, "setConstantValue:type:withName:", &v16, 53, CFSTR("SSRReverseZ"));
    v13 = objc_msgSend(v3, "newComputePipelineStateWithFunctionName:constantValues:", CFSTR("scn_ssr_downsample_depth"), v12);
    v14 = *((_QWORD *)this + 14);
    v15 = *(void **)(v14 + 16);
    *(_QWORD *)(v14 + 16) = v13;
    if (v15)

  }
}

uint64_t C3D::SSRDownSampleColorDepthPass::execute(uint64_t *a1, SCNMTLComputeCommandEncoder **a2)
{
  uint64_t RenderContext;
  SCNMTLComputeCommandEncoder *v5;
  void **v6;
  void **v7;
  void **v8;
  MTLTexture *v9;
  MTLTexture *v10;
  int v11;
  float32x2_t v12;
  float v13;
  float v14;
  _QWORD *v20;
  uint64_t v21;
  MTLComputePipelineState *v22;
  float32x2_t v24;
  float32x2_t v25;

  RenderContext = C3DEngineContextGetRenderContext(a1[2]);
  v5 = *a2;
  v6 = C3D::Pass::inputTextureAtIndex((C3D::Pass *)a1, 0);
  if ((void **)v5->_textures[0] != v6)
  {
    v5->_textures[0] = (MTLTexture *)v6;
    v5->_texturesToBind[0] |= 1uLL;
  }
  v7 = C3D::Pass::inputTextureAtIndex((C3D::Pass *)a1, 1u);
  if ((void **)v5->_textures[1] != v7)
  {
    v5->_textures[1] = (MTLTexture *)v7;
    v5->_texturesToBind[0] |= 2uLL;
  }
  v8 = C3D::Pass::inputTextureAtIndex((C3D::Pass *)a1, 2u);
  if ((void **)v5->_textures[2] != v8)
  {
    v5->_textures[2] = (MTLTexture *)v8;
    v5->_texturesToBind[0] |= 4uLL;
  }
  v9 = (MTLTexture *)C3D::Pass::outputTextureAtIndex((C3D::Pass *)a1, 0);
  if (v5->_textures[3] != v9)
  {
    v5->_textures[3] = v9;
    v5->_texturesToBind[0] |= 8uLL;
  }
  v10 = (MTLTexture *)C3D::Pass::outputTextureAtIndex((C3D::Pass *)a1, 1u);
  if (v5->_textures[4] != v10)
  {
    v5->_textures[4] = v10;
    v5->_texturesToBind[0] |= 0x10uLL;
  }
  v24 = *(float32x2_t *)(a1[15] + 8);
  v11 = -[SCNMTLRenderContext reverseZ](RenderContext);
  v12.f32[0] = vmuls_lane_f32(v24.f32[0], v24, 1);
  v13 = v24.f32[0] - v24.f32[1];
  if (v11)
  {
    v13 = v24.f32[1] - v24.f32[0];
    v14 = v24.f32[1];
  }
  else
  {
    v14 = v24.f32[0];
  }
  __asm { FMOV            V3.2S, #1.0 }
  _D3.f32[0] = v13;
  v12.f32[1] = v14;
  v25 = vdiv_f32(_D3, v12);
  SCNMTLComputeCommandEncoder::setBytes(v5, &v25, 8uLL, 0);
  v20 = C3D::Pass::outputTextureAtIndex((C3D::Pass *)a1, 0);
  v21 = C3D::SmartPtr<SCNMTLComputePipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLComputePipeline *(a1[14] + 16);
  v22 = (MTLComputePipelineState *)-[SCNMTLOpenSubdivComputeEvaluator computeEvaluator](v21);
  return SCNMTLComputeCommandEncoder::dispatchOnTexture2D(v5, v20, v22);
}

void C3D::SSRDownSampleColorDepthPassResource::~SSRDownSampleColorDepthPassResource(C3D::SSRDownSampleColorDepthPassResource *this)
{
  void *v1;

  *(_QWORD *)this = &off_1EA59A588;
  v1 = (void *)*((_QWORD *)this + 2);
  if (v1)

}

{
  void *v1;

  *(_QWORD *)this = &off_1EA59A588;
  v1 = (void *)*((_QWORD *)this + 2);
  if (v1)

  JUMPOUT(0x1DF0D41C0);
}

void _C3DFXTechniqueCFFinalize(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  const __CFArray *v5;
  CFIndex Count;
  CFIndex v7;
  CFIndex i;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;

  if (*(uint64_t *)(a1 + 72) >= 1)
  {
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(a1 + 80);
      *(_QWORD *)(*(_QWORD *)(v3 + 8 * v2) + 40) = 0;
      CFRelease(*(CFTypeRef *)(v3 + 8 * v2++));
    }
    while (v2 < *(_QWORD *)(a1 + 72));
  }
  v4 = *(void **)(a1 + 80);
  if (v4)
    free(v4);
  v5 = *(const __CFArray **)(a1 + 120);
  if (v5)
  {
    Count = CFArrayGetCount(v5);
    if (Count >= 1)
    {
      v7 = Count;
      for (i = 0; i != v7; ++i)
        *((_QWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 120), i) + 16) = 0;
    }
  }
  if ((*(_BYTE *)(a1 + 88) & 0x10) != 0)
    _freeStorage(a1);
  v9 = *(const void **)(a1 + 120);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(a1 + 120) = 0;
  }
  v10 = *(const void **)(a1 + 104);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(a1 + 104) = 0;
  }
  v11 = *(const void **)(a1 + 144);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(a1 + 144) = 0;
  }
  v12 = *(const void **)(a1 + 152);
  if (v12)
  {
    CFRelease(v12);
    *(_QWORD *)(a1 + 152) = 0;
  }

}

void _freeStorage(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 96);
  if (v2)
  {
    if (*(_QWORD *)v2)
    {
      CFDictionaryApplyFunction(*(CFDictionaryRef *)(v2 + 16), (CFDictionaryApplierFunction)_releaseCFTypeParameters, *(void **)v2);
      v2 = *(_QWORD *)(a1 + 96);
    }
    if (*(_QWORD *)(v2 + 16))
    {
      CFRelease(*(CFTypeRef *)(v2 + 16));
      v2 = *(_QWORD *)(a1 + 96);
      *(_QWORD *)(v2 + 16) = 0;
    }
    if (*(_QWORD *)v2)
    {
      free(*(void **)v2);
      v2 = *(_QWORD *)(a1 + 96);
    }
    free((void *)v2);
    *(_QWORD *)(a1 + 96) = 0;
  }
}

uint64_t C3DFXTechniqueCreateWithDescription(const void *a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t Instance;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DFXTechniqueCreateWithDescription_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (C3DFXTechniqueGetTypeID_onceToken != -1)
    dispatch_once(&C3DFXTechniqueGetTypeID_onceToken, &__block_literal_global_23);
  Instance = C3DTypeCreateInstance_(C3DFXTechniqueGetTypeID_typeID, 0x90uLL);
  C3DFXTechniqueSetDescription(Instance, a1);
  C3DFXTechniqueSetOwner(Instance, a2);
  C3DFXTechniqueCompile(Instance);
  *(_DWORD *)(Instance + 92) = -1;
  return Instance;
}

CFTypeRef C3DFXTechniqueSetDescription(uint64_t a1, CFTypeRef cf)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef result;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DFXTechniqueSetDescription_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  result = *(CFTypeRef *)(a1 + 104);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 104) = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *(_QWORD *)(a1 + 104) = result;
  }
  return result;
}

void C3DFXTechniqueSetOwner(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DFXTechniqueSetDescription_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(_QWORD *)(a1 + 112) = a2;
}

uint64_t C3DFXTechniqueCompile(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *Description;
  void *v11;
  CFIndex v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  void *v17;
  void *v18;
  __CFString *v19;
  unsigned __int8 v20;
  int v21;
  NSObject *v22;
  CFTypeID v23;
  uint64_t RootNode;
  NSObject *v25;
  CFTypeID v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t j;
  const __CFString *v32;
  uint64_t v33;
  void *v34;
  const void *v35;
  void *v36;
  char v37;
  int v38;
  uint64_t v39;
  uint64_t Technique;
  uint64_t v41;
  uint64_t PassAtIndex;
  uint64_t v43;
  uint64_t NodeReference;
  const void *v45;
  const void *v46;
  uint64_t PassCount;
  CFMutableSetRef Mutable;
  __CFSet *v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unsigned int v59;
  _DWORD *v60;
  unsigned int v61;
  const void *v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  int v70;
  uint64_t v71;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  BOOL v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _BOOL4 IsConsumed;
  NSObject *v82;
  uint64_t Name;
  char v84;
  uint64_t v85;
  char v86;
  char v87;
  CFTypeRef cf;
  CFTypeRef cfa;
  uint64_t size;
  id obj;
  void *v93;
  const __CFDictionary *v94;
  int v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  uint8_t v104[128];
  uint8_t buf[4];
  uint64_t v106;
  _BYTE v107[128];
  uint64_t v108;

  v108 = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(a1 + 88) & 1) != 0)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DFXTechniqueCompile_cold_2(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  *(_BYTE *)(a1 + 88) |= 1u;
  cf = (CFTypeRef)C3DFXTechniqueGetOwner(a1);
  Description = (void *)C3DFXTechniqueGetDescription(a1);
  *(_QWORD *)(a1 + 144) = (id)objc_msgSend(Description, "valueForKey:", CFSTR("bundle"));
  *(_QWORD *)(a1 + 152) = (id)objc_msgSend(Description, "valueForKey:", CFSTR("metalLibraryName"));
  obj = (id)objc_msgSend(Description, "valueForKey:", CFSTR("sequence"));
  v93 = (void *)objc_msgSend(Description, "valueForKey:", CFSTR("passes"));
  size = objc_msgSend(obj, "count");
  v94 = (const __CFDictionary *)Description;
  v11 = (void *)objc_msgSend(Description, "valueForKey:", CFSTR("symbols"));
  if (!*(_QWORD *)(a1 + 96))
  {
    *(_QWORD *)(a1 + 96) = malloc_type_calloc(0x18uLL, 1uLL, 0x156481A9uLL);
    *(_BYTE *)(a1 + 88) |= 0x10u;
  }
  v12 = objc_msgSend(v11, "count", cf);
  *(_QWORD *)(*(_QWORD *)(a1 + 96) + 16) = CFDictionaryCreateMutable(0, v12, MEMORY[0x1E0C9B390], 0);
  v102 = 0u;
  v103 = 0u;
  v100 = 0u;
  v101 = 0u;
  v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v100, v107, 16);
  if (v13)
  {
    v14 = v13;
    v15 = *(_QWORD *)v101;
    do
    {
      for (i = 0; i != v14; ++i)
      {
        if (*(_QWORD *)v101 != v15)
          objc_enumerationMutation(v11);
        v17 = *(void **)(*((_QWORD *)&v100 + 1) + 8 * i);
        v18 = (void *)objc_msgSend(v11, "valueForKey:", v17);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          if (!objc_msgSend(v18, "valueForKey:", CFSTR("semantic")))
          {
            v19 = (__CFString *)objc_msgSend(v18, "valueForKey:", CFSTR("type"));
            if ((-[__CFString isEqualToString:](v19, "isEqualToString:", CFSTR("color")) & 1) == 0
              && (-[__CFString isEqualToString:](v19, "isEqualToString:", CFSTR("depth")) & 1) == 0)
            {
              v20 = C3DBaseTypeArraySizeFromString(v19);
              v21 = C3DBaseTypeFromMetalOrGLSLString(v19);
              if (v21)
                C3DFXTechniqueDeclareSymbol(a1, v17, v21, v20);
            }
          }
        }
        else
        {
          v22 = scn_default_log();
          if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            v106 = (uint64_t)v17;
            _os_log_error_impl(&dword_1DCCB8000, v22, OS_LOG_TYPE_ERROR, "Error: invalue description for input named %@ - expect a dictionary", buf, 0xCu);
          }
        }
      }
      v14 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v100, v107, 16);
    }
    while (v14);
  }
  if (!size)
  {
    if (objc_msgSend(v93, "count"))
    {
      v25 = scn_default_log();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        C3DFXTechniqueCompile_cold_1();
    }
    return 1;
  }
  *(_QWORD *)(a1 + 80) = malloc_type_calloc(8uLL, size, 0x2684F385uLL);
  *(_QWORD *)(a1 + 64) = size;
  if (cfa)
  {
    v23 = CFGetTypeID(cfa);
    if (v23 == C3DSceneGetTypeID())
    {
      RootNode = C3DSceneGetRootNode((uint64_t)cfa);
    }
    else
    {
      v26 = CFGetTypeID(cfa);
      if (v26 == C3DNodeGetTypeID())
        RootNode = (uint64_t)cfa;
      else
        RootNode = 0;
    }
  }
  else
  {
    RootNode = 0;
  }
  v98 = 0u;
  v99 = 0u;
  v96 = 0u;
  v97 = 0u;
  v27 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v96, v104, 16);
  if (v27)
  {
    v28 = v27;
    v29 = 0;
    v30 = *(_QWORD *)v97;
    do
    {
      for (j = 0; j != v28; ++j)
      {
        if (*(_QWORD *)v97 != v30)
          objc_enumerationMutation(obj);
        v32 = *(const __CFString **)(*((_QWORD *)&v96 + 1) + 8 * j);
        v33 = C3DFXPassCreate();
        C3DFXPassSetName(v33, v32);
        v34 = (void *)objc_msgSend(v93, "valueForKey:", v32);
        C3DFXPassSetupWithPropertyList(v33, v34, v94);
        if (!C3DFXPassGetProgram(v33))
        {
          C3DFXPassSetProgramName(v33, (CFTypeRef)objc_msgSend(v34, "objectForKey:", CFSTR("program")));
          v35 = (const void *)objc_msgSend(v34, "objectForKey:", CFSTR("metalLibraryFile"));
          if (v35)
            C3DFXPassSetMetalLibraryName(v33, v35);
          C3DFXPassSetMetalVertexShaderFunction(v33, (CFTypeRef)objc_msgSend(v34, "objectForKey:", CFSTR("metalVertexShader")));
          C3DFXPassSetMetalFragmentShaderFunction(v33, (CFTypeRef)objc_msgSend(v34, "objectForKey:", CFSTR("metalFragmentShader")));
          v36 = (void *)objc_msgSend(v34, "objectForKey:", CFSTR("clientProgram"));
          if (v36)
            v37 = objc_msgSend(v36, "BOOLValue");
          else
            v37 = 1;
          C3DFXPassSetClientProgram(v33, v37);
        }
        v38 = *(_DWORD *)(v33 + 24);
        if (v38 == 6 || v38 == 3)
        {
          v39 = *(_QWORD *)(v33 + 96);
          if (v39)
          {
            Technique = C3DMaterialGetTechnique(v39);
            if (Technique)
            {
              v41 = Technique;
              PassAtIndex = C3DFXTechniqueGetPassAtIndex(Technique, 0);
              if (PassAtIndex)
                C3DFXPassAddInputsWithDescription(PassAtIndex, (CFDictionaryRef)objc_msgSend(v34, "valueForKey:", CFSTR("inputs")), v41);
            }
          }
        }
        C3DFXPassAddInputsWithDescription(v33, (CFDictionaryRef)objc_msgSend(v34, "valueForKey:", CFSTR("inputs")), a1);
        v43 = objc_msgSend((id)-[__CFDictionary valueForKey:](v94, "valueForKey:", CFSTR("owners")), "objectAtIndex:", v29 + j);
        NodeReference = _loadNodeReference((uint64_t)CFSTR("pointOfView"), v34, a1, v43, RootNode, (const void **)(v33 + 504));
        if (NodeReference)
          C3DFXPassSetPointOfView(v33, NodeReference);
        v45 = (const void *)_loadNodeReference((uint64_t)CFSTR("mirrorNode"), v34, a1, v43, RootNode, (const void **)(v33 + 496));
        if (v45)
          C3DFXPassSetMirrorNode(v33, v45);
        v46 = (const void *)_loadNodeReference((uint64_t)CFSTR("node"), v34, a1, v43, RootNode, (const void **)(v33 + 488));
        if (v46)
          C3DFXPassSetRootNode(v33, v46);
        C3DFXPassAddOutputsWithDescription(v33, (CFDictionaryRef)objc_msgSend(v34, "valueForKey:", CFSTR("outputs")), a1);
        C3DFXTechniqueAppendPass((_QWORD *)a1, (CFTypeRef)v33);
        CFRelease((CFTypeRef)v33);
      }
      v28 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v96, v104, 16);
      v29 += j;
    }
    while (v28);
  }
  PassCount = C3DFXTechniqueGetPassCount(a1);
  Mutable = CFSetCreateMutable(0, 0, MEMORY[0x1E0C9B3B0]);
  v49 = Mutable;
  if (PassCount < 1)
  {
    CFRelease(Mutable);
    v84 = *(_BYTE *)(a1 + 88);
    goto LABEL_130;
  }
  v50 = 0;
  v95 = 0;
  v51 = 0;
  do
  {
    v52 = C3DFXTechniqueGetPassAtIndex(a1, v50);
    v53 = v52;
    if ((v51 & 1) == 0 && (v95 & 1) == 0)
    {
      v54 = *(_QWORD *)(v52 + 520);
      if (v54 < 1)
        goto LABEL_67;
      v51 = 0;
      v55 = *(uint64_t **)(v52 + 512);
      do
      {
        v56 = *v55++;
        v51 |= *(_BYTE *)(v56 + 80);
        --v54;
      }
      while (v54);
    }
    if ((v51 & 1) != 0)
    {
      v51 = 1;
      goto LABEL_68;
    }
LABEL_67:
    v51 = 0;
    v95 |= *(unsigned __int8 *)(v52 + 186) >> 7;
LABEL_68:
    if (*(_DWORD *)(v52 + 440))
    {
      v57 = 0;
      do
      {
        buf[0] = 0;
        v58 = *(_QWORD *)(v53 + 432) + (v57 << 6);
        v61 = *(_DWORD *)(v58 + 20);
        v60 = (_DWORD *)(v58 + 20);
        v59 = v61;
        v62 = *(const void **)(v60 - 3);
        if (v62)
        {
          if (v59 > 0x7FFFFFFD)
          {
            if (v59 == 0x7FFFFFFF)
              v63 = 0x7FFFFFFF;
            else
              v63 = 2147483646;
          }
          else
          {
            v63 = _computeInputCountForOutputNamed(a1, v62, v50, buf, 0);
          }
          if ((C3DMetalIsUsed() & 1) == 0 && !*(_DWORD *)(*(_QWORD *)(v53 + 432) + (v57 << 6) + 16) && v63 >= 2)
          {
            *(_BYTE *)(v53 + 176) = 1;
            buf[0] = 0;
          }
          if (!CFSetContainsValue(v49, v62))
          {
            CFSetAddValue(v49, v62);
            *(_DWORD *)(*(_QWORD *)(v53 + 432) + (v57 << 6) + 20) = v63;
          }
          if (buf[0])
            *(_DWORD *)(v53 + 184) |= 0x10u;
          if (v63 >= 2)
            *(_DWORD *)(v53 + 184) |= 0x400000u;
        }
        else
        {
          *v60 = v59 + 1;
          v64 = v50 + 1;
          if (v50 + 1 < PassCount)
          {
            do
            {
              v65 = C3DFXTechniqueGetPassAtIndex(a1, v64);
              v66 = *(_QWORD *)(v65 + 520);
              if (v66 >= 1)
              {
                v67 = *(_QWORD *)(v65 + 512);
                do
                {
                  if ((*(_BYTE *)(*(_QWORD *)v67 + 80) & 3) != 0)
                    ++*(_DWORD *)(*(_QWORD *)(v53 + 432) + (v57 << 6) + 20);
                  v67 += 8;
                  --v66;
                }
                while (v66);
              }
              v68 = *(unsigned int *)(v65 + 440);
              if ((_DWORD)v68)
              {
                v69 = (uint64_t *)(*(_QWORD *)(v65 + 432) + 8);
                LOBYTE(v70) = 1;
                do
                {
                  v71 = *v69;
                  v69 += 8;
                  v70 = (v71 != 0) & v70;
                  --v68;
                }
                while (v68);
              }
              else
              {
                v70 = 1;
              }
              ++v64;
            }
            while (v64 < PassCount && v70);
          }
        }
        ++v57;
      }
      while (v57 < *(unsigned int *)(v53 + 440));
    }
    v73 = *(_DWORD *)(v53 + 184);
    if ((v73 & 0x800010) == 0x800000)
    {
      buf[0] = 0;
      _computeInputCountForOutputNamed(a1, CFSTR("COLOR"), v50, buf, 1);
      v73 = *(_DWORD *)(v53 + 184) & 0xFFFFFFEF | (16 * buf[0]);
      *(_DWORD *)(v53 + 184) = v73;
    }
    if ((v73 & 0x400000) == 0)
    {
      if ((v73 & 0x800000) == 0)
        goto LABEL_116;
      v74 = C3DFXTechniqueGetPassCount(a1);
      v75 = v50 + 1;
      if (v50 + 1 >= v74)
      {
        v73 = *(_DWORD *)(v53 + 184);
        if ((v73 & 0x1000000) == 0)
          goto LABEL_121;
      }
      else
      {
        v76 = v74;
        v77 = 1;
        while (1)
        {
          v78 = C3DFXTechniqueGetPassAtIndex(a1, v75);
          v79 = *(_QWORD *)(v78 + 520);
          if (v79 >= 1)
            break;
LABEL_114:
          v77 = ++v75 < v76;
          if (v75 == v76)
            goto LABEL_115;
        }
        v80 = *(_QWORD *)(v78 + 512);
        while ((*(_BYTE *)(*(_QWORD *)v80 + 80) & 1) == 0)
        {
          v80 += 8;
          if (!--v79)
            goto LABEL_114;
        }
LABEL_115:
        v73 = *(_DWORD *)(v53 + 184);
        if (v77)
        {
LABEL_120:
          *(_DWORD *)(v53 + 184) = v73 | 0x400000;
          goto LABEL_125;
        }
LABEL_116:
        if ((v73 & 0x1000000) == 0)
        {
LABEL_121:
          if ((v73 & 0x1A00000) == 0x200000)
          {
            v82 = scn_default_log();
            if (os_log_type_enabled(v82, OS_LOG_TYPE_INFO))
            {
              Name = C3DFXPassGetName(v53);
              *(_DWORD *)buf = 138412290;
              v106 = Name;
              _os_log_impl(&dword_1DCCB8000, v82, OS_LOG_TYPE_INFO, "Info: pass named %@ appears to be useless - skipping", buf, 0xCu);
            }
            C3DFXPassSetEnabled(v53, 0);
          }
          goto LABEL_125;
        }
      }
      IsConsumed = _depthIsConsumed(a1, v50);
      v73 = *(_DWORD *)(v53 + 184);
      if (IsConsumed)
        goto LABEL_120;
      goto LABEL_121;
    }
LABEL_125:
    ++v50;
  }
  while (v50 != PassCount);
  CFRelease(v49);
  v84 = *(_BYTE *)(a1 + 88);
  if ((v95 & 1) != 0)
    v84 |= 8u;
LABEL_130:
  *(_BYTE *)(a1 + 88) = v84 | 4;
  if (size >= 1)
  {
    v85 = C3DFXTechniqueGetPassAtIndex(a1, size - 1);
    if (v85)
    {
      if ((*(_BYTE *)(v85 + 185) & 1) != 0)
      {
        if (C3DFXPassGetProgramIsOpaque(v85))
          v87 = 4;
        else
          v87 = 0;
        v86 = *(_BYTE *)(a1 + 88) & 0xFB | v87;
      }
      else
      {
        v86 = *(_BYTE *)(a1 + 88) & 0xFB;
      }
      *(_BYTE *)(a1 + 88) = v86;
    }
  }
  return 1;
}

uint64_t C3DFXTechniqueCreateWithCapacity(size_t a1)
{
  uint64_t Instance;
  void *v3;

  if (C3DFXTechniqueGetTypeID_onceToken != -1)
    dispatch_once(&C3DFXTechniqueGetTypeID_onceToken, &__block_literal_global_23);
  Instance = C3DTypeCreateInstance_(C3DFXTechniqueGetTypeID_typeID, 0x90uLL);
  if (a1)
    v3 = malloc_type_calloc(8uLL, a1, 0x1E39D3BEuLL);
  else
    v3 = 0;
  *(_QWORD *)(Instance + 80) = v3;
  *(_QWORD *)(Instance + 64) = a1;
  *(_DWORD *)(Instance + 92) = -1;
  return Instance;
}

uint64_t C3DFXTechniqueGetNullTechnique()
{
  uint64_t result;

  result = C3DFXTechniqueGetNullTechnique_nullT;
  if (!C3DFXTechniqueGetNullTechnique_nullT)
  {
    result = C3DFXTechniqueCreateWithCapacity(0);
    C3DFXTechniqueGetNullTechnique_nullT = result;
  }
  return result;
}

void C3DFXTechniqueAppendPass(_QWORD *a1, CFTypeRef cf)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  CFTypeRef v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;

  if (!a1 && (v4 = scn_default_log(), os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)))
  {
    C3DFXTechniqueAppendPass_cold_3(v4, v5, v6, v7, v8, v9, v10, v11);
    if (cf)
      goto LABEL_6;
  }
  else if (cf)
  {
    goto LABEL_6;
  }
  v12 = scn_default_log();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    C3DFXTechniqueAppendPass_cold_2(v12, v13, v14, v15, v16, v17, v18, v19);
LABEL_6:
  if (a1[9] >= a1[8])
  {
    v23 = scn_default_log();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      C3DFXTechniqueAppendPass_cold_1(v23);
  }
  else
  {
    v20 = CFRetain(cf);
    v22 = a1[9];
    v21 = a1[10];
    a1[9] = v22 + 1;
    *(_QWORD *)(v21 + 8 * v22) = v20;
    *((_QWORD *)cf + 5) = a1;
  }
}

uint64_t C3DFXTechniqueGetPassCount(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DFXTechniqueAppendPass_cold_3(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 72);
}

uint64_t C3DFXTechniqueGetPassNamed(uint64_t a1, CFTypeRef cf1)
{
  uint64_t v2;
  uint64_t v5;
  const void *v6;

  v2 = *(_QWORD *)(a1 + 72);
  if (v2 < 1)
    return 0;
  v5 = 0;
  while (1)
  {
    v6 = *(const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v5) + 16);
    if (v6)
      break;
LABEL_6:
    if (++v5 >= v2)
      return 0;
  }
  if (!CFEqual(cf1, v6))
  {
    v2 = *(_QWORD *)(a1 + 72);
    goto LABEL_6;
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v5);
}

uint64_t C3DFXTechniqueGetOwner(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DFXTechniqueSetDescription_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 112);
}

uint64_t C3DFXTechniqueGetPassAtIndex(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DFXTechniqueAppendPass_cold_3(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(_QWORD *)(a1 + 72) <= a2)
  {
    v12 = scn_default_log();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
      C3DFXTechniqueGetPassAtIndex_cold_1((uint64_t *)(a1 + 72), a2, v12);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * a2);
}

uint64_t C3DFXTechniqueGetDescription(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DFXTechniqueAppendPass_cold_3(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 104);
}

void C3DFXTechniqueDeclareSymbol(uint64_t a1, void *key, int a3, unsigned int a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const __CFDictionary *Mutable;
  NSObject *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  const void *v40;
  unint64_t v41;
  uint64_t v42;
  __CFDictionary *v43;

  if (!a1 && (v8 = scn_default_log(), os_log_type_enabled(v8, OS_LOG_TYPE_FAULT)))
  {
    C3DFXTechniqueAppendPass_cold_3(v8, v9, v10, v11, v12, v13, v14, v15);
    if (key)
      goto LABEL_6;
  }
  else if (key)
  {
    goto LABEL_6;
  }
  v16 = scn_default_log();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
    C3DFXTechniqueDeclareSymbol_cold_3(v16, v17, v18, v19, v20, v21, v22, v23);
LABEL_6:
  v24 = *(_QWORD **)(a1 + 96);
  if (!v24)
    goto LABEL_11;
  if (*v24)
  {
    v25 = scn_default_log();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_FAULT))
      C3DFXTechniqueDeclareSymbol_cold_2(v25, v26, v27, v28, v29, v30, v31, v32);
    v24 = *(_QWORD **)(a1 + 96);
    if (!v24)
    {
LABEL_11:
      v24 = malloc_type_calloc(0x18uLL, 1uLL, 0x156481A9uLL);
      *(_QWORD *)(a1 + 96) = v24;
      *(_BYTE *)(a1 + 88) |= 0x10u;
    }
  }
  Mutable = (const __CFDictionary *)v24[2];
  if (!Mutable)
  {
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], 0);
    *(_QWORD *)(*(_QWORD *)(a1 + 96) + 16) = Mutable;
  }
  if (CFDictionaryGetValue(Mutable, key))
  {
    v34 = scn_default_log();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_FAULT))
      C3DFXTechniqueDeclareSymbol_cold_1((uint64_t)key, v34);
  }
  v35 = *(uint64_t **)(a1 + 96);
  if (a3 == 5)
  {
    v37 = *v35;
    v36 = v35[1];
    v38 = ((v37 + v36 + 7) & 0xFFFFFFFFFFFFFFF8) - (v37 + v36);
  }
  else
  {
    v38 = 0;
    v36 = v35[1];
  }
  v39 = a4;
  v40 = (const void *)((((_DWORD)v36 + (_DWORD)v38) << 16) | ((unint64_t)a4 << 8) | a3 & 0x3F);
  v41 = v38 + C3DSizeOfBaseType(a3) * v39;
  v42 = *(_QWORD *)(a1 + 96);
  v43 = *(__CFDictionary **)(v42 + 16);
  *(_QWORD *)(v42 + 8) += v41;
  CFDictionarySetValue(v43, key, v40);
}

void C3DFXTechniqueSetValueForSymbolWithCount(uint64_t a1, void *a2, const void *a3, int a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const void *Value;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  CFTypeID v34;
  uint64_t TypeID;
  const void *ValueForSymbol;
  NSObject *v37;
  int v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  const void *v42;
  NSObject *v43;
  uint64_t *v44;
  uint64_t v45;
  const void *v46;

  if (!a1 && (v8 = scn_default_log(), os_log_type_enabled(v8, OS_LOG_TYPE_FAULT)))
  {
    C3DFXTechniqueAppendPass_cold_3(v8, v9, v10, v11, v12, v13, v14, v15);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v16 = scn_default_log();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
    C3DFXTechniqueSetValueForSymbolWithCount_cold_4(v16, v17, v18, v19, v20, v21, v22, v23);
LABEL_6:
  if (!*(_QWORD *)(a1 + 96))
  {
    *(_QWORD *)(a1 + 96) = malloc_type_calloc(0x18uLL, 1uLL, 0x156481A9uLL);
    *(_BYTE *)(a1 + 88) |= 0x10u;
  }
  __CheckParametersStorage((_QWORD *)a1);
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(*(_QWORD *)(a1 + 96) + 16), a2);
  if (Value)
  {
    v25 = WORD1(Value);
    if ((Value & 0x3F) == 5)
    {
      if (a4 != 1 && (v26 = scn_default_log(), os_log_type_enabled(v26, OS_LOG_TYPE_FAULT)))
      {
        C3DFXTechniqueSetValueForSymbolWithCount_cold_3(v26, v27, v28, v29, v30, v31, v32, v33);
        if (a3)
        {
LABEL_13:
          v34 = CFGetTypeID(a3);
          if (v34 == C3DImageGetTypeID())
          {
            TypeID = C3DImageGetTypeID();
            if (TypeID == CFGetTypeID(a3))
            {
              ValueForSymbol = (const void *)C3DFXTechniqueGetValueForSymbol(a1, a2, 0);
              if (!ValueForSymbol)
              {
                ValueForSymbol = (const void *)C3DFXSamplerCreate();
                C3DFXTechniqueSetValueForSymbolWithCount(a1, a2, ValueForSymbol, 1);
                CFRelease(ValueForSymbol);
              }
              C3DFXSamplerSetImage((uint64_t)ValueForSymbol, a3);
            }
            else
            {
              v43 = scn_default_log();
              if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
                C3DFXTechniqueSetValueForSymbolWithCount_cold_2();
            }
          }
          else
          {
            v40 = *(uint64_t **)(a1 + 96);
            v41 = *v40;
            v42 = *(const void **)(*v40 + v25);
            if (v42 != a3)
            {
              if (v42)
              {
                CFRelease(v42);
                *(_QWORD *)(v41 + v25) = 0;
              }
              *(_QWORD *)(v41 + v25) = CFRetain(a3);
            }
          }
          return;
        }
      }
      else if (a3)
      {
        goto LABEL_13;
      }
      v44 = *(uint64_t **)(a1 + 96);
      v45 = *v44;
      v46 = *(const void **)(*v44 + v25);
      if (v46)
      {
        CFRelease(v46);
        *(_QWORD *)(v45 + v25) = 0;
      }
    }
    else if (a3)
    {
      if (BYTE1(Value) >= a4)
        v38 = a4;
      else
        v38 = BYTE1(Value);
      v39 = C3DSizeOfBaseType(Value & 0x3F);
      memcpy((void *)(**(_QWORD **)(a1 + 96) + v25), a3, v39 * v38);
    }
  }
  else
  {
    v37 = scn_default_log();
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
      C3DFXTechniqueSetValueForSymbolWithCount_cold_1();
  }
}

_QWORD *__CheckParametersStorage(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)result[12];
  if (v1 && !*v1)
  {
    v2 = result;
    result = (_QWORD *)v1[1];
    if (result)
    {
      result = malloc_type_calloc((size_t)result, 1uLL, 0x7DF6CA8DuLL);
      *(_QWORD *)v2[12] = result;
    }
  }
  return result;
}

uint64_t C3DFXTechniqueGetValueForSymbol(uint64_t a1, void *a2, _WORD *a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t ValueOffsetForSymbol;
  uint64_t v23;
  uint64_t result;
  __int16 v25;

  if (!a1 && (v6 = scn_default_log(), os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)))
  {
    C3DFXTechniqueAppendPass_cold_3(v6, v7, v8, v9, v10, v11, v12, v13);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v14 = scn_default_log();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    C3DFXTechniqueSetValueForSymbolWithCount_cold_4(v14, v15, v16, v17, v18, v19, v20, v21);
LABEL_6:
  __CheckParametersStorage((_QWORD *)a1);
  v25 = 0;
  ValueOffsetForSymbol = C3DFXTechniqueGetValueOffsetForSymbol(a1, a2, &v25, 0);
  if (ValueOffsetForSymbol == -1)
    return 0;
  v23 = ValueOffsetForSymbol;
  if (a3)
    *a3 = v25;
  __CheckParametersStorage((_QWORD *)a1);
  result = **(_QWORD **)(a1 + 96) + v23;
  if (v25 == 5)
    return *(_QWORD *)result;
  return result;
}

void C3DFXTechniqueSetValueForSymbol(uint64_t a1, void *a2, const void *a3)
{
  C3DFXTechniqueSetValueForSymbolWithCount(a1, a2, a3, 1);
}

uint64_t C3DFXTechniqueGetValueOffsetForSymbol(uint64_t a1, void *key, _WORD *a3, BOOL *a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const __CFDictionary *v25;
  unint64_t Value;
  char v27;
  uint64_t result;
  NSObject *v29;

  if (!a1 && (v8 = scn_default_log(), os_log_type_enabled(v8, OS_LOG_TYPE_FAULT)))
  {
    C3DFXTechniqueAppendPass_cold_3(v8, v9, v10, v11, v12, v13, v14, v15);
    if (key)
      goto LABEL_6;
  }
  else if (key)
  {
    goto LABEL_6;
  }
  v16 = scn_default_log();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
    C3DFXTechniqueSetValueForSymbolWithCount_cold_4(v16, v17, v18, v19, v20, v21, v22, v23);
LABEL_6:
  v24 = *(_QWORD *)(a1 + 96);
  if (v24
    && (v25 = *(const __CFDictionary **)(v24 + 16)) != 0
    && (Value = (unint64_t)CFDictionaryGetValue(v25, key),
        Value & 0xFFFFFFFF0000FFFFLL | ((unint64_t)WORD1(Value) << 16)))
  {
    v27 = Value;
    result = WORD1(Value);
    if (a3)
      *a3 = v27 & 0x3F;
    if (a4)
      *a4 = (v27 & 0x40) != 0;
  }
  else
  {
    v29 = scn_default_log();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      C3DFXTechniqueGetValueOffsetForSymbol_cold_1();
    return -1;
  }
  return result;
}

uint64_t C3DFXTechniqueGetValueAnimatableAddressForSymbol(uint64_t a1, void *a2, _WORD *a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t ValueOffsetForSymbol;
  uint64_t v23;
  __int16 v25;

  if (!a1 && (v6 = scn_default_log(), os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)))
  {
    C3DFXTechniqueAppendPass_cold_3(v6, v7, v8, v9, v10, v11, v12, v13);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v14 = scn_default_log();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    C3DFXTechniqueSetValueForSymbolWithCount_cold_4(v14, v15, v16, v17, v18, v19, v20, v21);
LABEL_6:
  __CheckParametersStorage((_QWORD *)a1);
  v25 = 0;
  ValueOffsetForSymbol = C3DFXTechniqueGetValueOffsetForSymbol(a1, a2, &v25, 0);
  if (ValueOffsetForSymbol == -1)
    return 0;
  v23 = ValueOffsetForSymbol;
  if (a3)
    *a3 = v25;
  __CheckParametersStorage((_QWORD *)a1);
  return **(_QWORD **)(a1 + 96) + v23;
}

CFTypeRef C3DFXTechniqueCreateBySequencingTechniques(void *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  void *Description;
  void *v13;
  uint64_t Owner;
  uint64_t j;
  _QWORD *v16;
  const void *v17;
  CFTypeRef v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t k;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t m;
  uint64_t v30;
  void *v31;
  NSObject *v32;
  NSObject *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t n;
  void *v44;
  const void *ValueForSymbol;
  int *v47;
  void *v49;
  void *v50;
  uint64_t v51;
  id obj;
  __int16 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  _BYTE v66[128];
  uint8_t v67[4];
  uint64_t v68;
  uint8_t v69[4];
  uint64_t v70;
  uint8_t v71[4];
  int v72;
  _BYTE v73[128];
  _QWORD v74[5];
  _QWORD v75[5];
  _BYTE v76[128];
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  v50 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v49 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v3 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v4 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v5 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v62 = 0u;
  v63 = 0u;
  v64 = 0u;
  v65 = 0u;
  obj = a1;
  v6 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v62, v76, 16);
  if (v6)
  {
    v7 = v6;
    v8 = 0;
    v9 = *(_QWORD *)v63;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v63 != v9)
          objc_enumerationMutation(obj);
        v11 = *(_QWORD *)(*((_QWORD *)&v62 + 1) + 8 * i);
        if (*(_QWORD *)(v11 + 136))
          v8 = *(const void **)(v11 + 136);
        Description = (void *)C3DFXTechniqueGetDescription(*(_QWORD *)(*((_QWORD *)&v62 + 1) + 8 * i));
        v13 = (void *)objc_msgSend(Description, "valueForKey:", CFSTR("sequence"));
        objc_msgSend(v50, "addObjectsFromArray:", v13);
        objc_msgSend(v49, "addEntriesFromDictionary:", objc_msgSend(Description, "valueForKey:", CFSTR("passes")));
        objc_msgSend(v3, "addEntriesFromDictionary:", objc_msgSend(Description, "valueForKey:", CFSTR("targets")));
        objc_msgSend(v4, "addEntriesFromDictionary:", objc_msgSend(Description, "valueForKey:", CFSTR("symbols")));
        Owner = C3DFXTechniqueGetOwner(v11);
        if (!Owner)
          Owner = objc_msgSend(MEMORY[0x1E0C99E38], "null");
        for (j = objc_msgSend(v13, "count"); j; --j)
          objc_msgSend(v5, "addObject:", Owner);
      }
      v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v62, v76, 16);
    }
    while (v7);
  }
  else
  {
    v8 = 0;
  }
  v74[0] = 0x1EA5AA000;
  v74[1] = CFSTR("passes");
  v75[1] = v49;
  v75[2] = v3;
  v74[2] = CFSTR("targets");
  v74[3] = CFSTR("symbols");
  v74[4] = CFSTR("owners");
  v75[0] = v50;
  v75[3] = v4;
  v75[4] = v5;
  v16 = (_QWORD *)C3DFXTechniqueCreateWithDescription((const void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v75, v74, 5), a2);
  v17 = (const void *)v16[17];
  if (v17 != v8)
  {
    if (v17)
    {
      CFRelease(v17);
      v16[17] = 0;
    }
    if (v8)
      v18 = CFRetain(v8);
    else
      v18 = 0;
    v16[17] = v18;
  }
  v60 = 0u;
  v61 = 0u;
  v58 = 0u;
  v59 = 0u;
  v19 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v58, v73, 16);
  if (v19)
  {
    v20 = v19;
    v21 = 0;
    v51 = *(_QWORD *)v59;
    v47 = &v72;
    do
    {
      for (k = 0; k != v20; ++k)
      {
        if (*(_QWORD *)v59 != v51)
          objc_enumerationMutation(obj);
        v23 = *(_QWORD **)(*((_QWORD *)&v58 + 1) + 8 * k);
        if ((uint64_t)v23[9] >= 1)
        {
          v24 = 0;
          do
          {
            v25 = *(_QWORD *)(v23[10] + 8 * v24);
            v26 = *(_QWORD *)(v16[10] + 8 * v21);
            v27 = *(_QWORD *)(v25 + 520);
            if (v27 != *(_QWORD *)(v26 + 520))
            {
              v28 = scn_default_log();
              if (os_log_type_enabled(v28, OS_LOG_TYPE_FAULT))
                C3DFXTechniqueCreateBySequencingTechniques_cold_3(v71, v47, v28);
              v27 = *(_QWORD *)(v25 + 520);
            }
            if (v27 >= 1)
            {
              for (m = 0; m < v27; ++m)
              {
                v30 = *(_QWORD *)(*(_QWORD *)(v25 + 512) + 8 * m);
                if (*(_DWORD *)(v30 + 16) == 3)
                {
                  v31 = *(void **)(v30 + 96);
                  if (v31)
                  {
                    C3DFXPassInputSetBindingBlock(*(_QWORD *)(*(_QWORD *)(v26 + 512) + 8 * m), v31);
                    v27 = *(_QWORD *)(v25 + 520);
                  }
                }
              }
            }
            if (*(_QWORD *)(v26 + 544))
            {
              v32 = scn_default_log();
              if (os_log_type_enabled(v32, OS_LOG_TYPE_FAULT))
                C3DFXTechniqueCreateBySequencingTechniques_cold_2(v69, &v70, v32);
            }
            C3DFXPassSetInitializeBlock(v26, *(void **)(v25 + 544));
            if (*(_QWORD *)(v26 + 552))
            {
              v33 = scn_default_log();
              if (os_log_type_enabled(v33, OS_LOG_TYPE_FAULT))
                C3DFXTechniqueCreateBySequencingTechniques_cold_1(v67, &v68, v33);
            }
            C3DFXPassSetExecuteBlock(v26, *(void **)(v25 + 552));
            *(_OWORD *)(v26 + 216) = *(_OWORD *)(v25 + 216);
            v34 = *(_OWORD *)(v25 + 232);
            v35 = *(_OWORD *)(v25 + 248);
            v36 = *(_OWORD *)(v25 + 264);
            *(_QWORD *)(v26 + 280) = *(_QWORD *)(v25 + 280);
            *(_OWORD *)(v26 + 264) = v36;
            *(_OWORD *)(v26 + 248) = v35;
            *(_OWORD *)(v26 + 232) = v34;
            v37 = *(_OWORD *)(v25 + 392);
            v38 = *(_OWORD *)(v25 + 408);
            *(_DWORD *)(v26 + 424) = *(_DWORD *)(v25 + 424);
            *(_OWORD *)(v26 + 392) = v37;
            *(_OWORD *)(v26 + 408) = v38;
            *(_OWORD *)(v26 + 200) = *(_OWORD *)(v25 + 200);
            ++v24;
            ++v21;
          }
          while (v24 < v23[9]);
        }
        v56 = 0u;
        v57 = 0u;
        v54 = 0u;
        v55 = 0u;
        v39 = *(void **)(v23[12] + 16);
        v40 = objc_msgSend(v39, "countByEnumeratingWithState:objects:count:", &v54, v66, 16, v47);
        if (v40)
        {
          v41 = v40;
          v42 = *(_QWORD *)v55;
          do
          {
            for (n = 0; n != v41; ++n)
            {
              if (*(_QWORD *)v55 != v42)
                objc_enumerationMutation(v39);
              v44 = *(void **)(*((_QWORD *)&v54 + 1) + 8 * n);
              v53 = 0;
              ValueForSymbol = (const void *)C3DFXTechniqueGetValueForSymbol((uint64_t)v23, v44, &v53);
              if (ValueForSymbol)
                C3DFXTechniqueSetValueForSymbolWithCount((uint64_t)v16, v44, ValueForSymbol, 1);
            }
            v41 = objc_msgSend(v39, "countByEnumeratingWithState:objects:count:", &v54, v66, 16);
          }
          while (v41);
        }
      }
      v20 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v58, v73, 16);
    }
    while (v20);
  }
  return CFRetain(v16);
}

BOOL C3DFXTechniqueConsumesMainDepth(uint64_t a1)
{
  return _depthIsConsumed(a1, -1);
}

BOOL _depthIsConsumed(uint64_t a1, uint64_t a2)
{
  uint64_t PassCount;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t PassAtIndex;
  uint64_t v9;
  uint64_t v10;

  PassCount = C3DFXTechniqueGetPassCount(a1);
  v5 = a2 + 1;
  if (v5 >= PassCount)
  {
    return 0;
  }
  else
  {
    v6 = PassCount;
    v7 = 1;
    while (1)
    {
      PassAtIndex = C3DFXTechniqueGetPassAtIndex(a1, v5);
      v9 = *(_QWORD *)(PassAtIndex + 520);
      if (v9 >= 1)
        break;
LABEL_7:
      v7 = ++v5 < v6;
      if (v5 == v6)
        return v7;
    }
    v10 = *(_QWORD *)(PassAtIndex + 512);
    while ((*(_BYTE *)(*(_QWORD *)v10 + 80) & 2) == 0)
    {
      v10 += 8;
      if (!--v9)
        goto LABEL_7;
    }
  }
  return v7;
}

uint64_t _loadNodeReference(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, const void **a6)
{
  void *v10;
  const void *v11;
  const void *v13;

  v10 = (void *)objc_msgSend(a2, "objectForKey:", a1);
  if (!v10)
    return 0;
  v11 = v10;
  if (objc_msgSend(v10, "isEqualToString:", CFSTR("self")))
  {
    if (!a4)
      return C3DFXTechniqueGetOwner(a3);
    return a4;
  }
  if (a5)
    return C3DNodeGetNodeWithName(a5, (uint64_t)v11);
  v13 = *a6;
  if (*a6 == v11)
    return 0;
  if (v13)
  {
    CFRelease(v13);
    *a6 = 0;
  }
  a4 = 0;
  *a6 = CFRetain(v11);
  return a4;
}

uint64_t _computeInputCountForOutputNamed(uint64_t a1, const void *a2, uint64_t a3, _BYTE *a4, int a5)
{
  uint64_t PassCount;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t PassAtIndex;
  uint64_t v14;
  const void *v15;
  unint64_t v16;
  uint64_t v17;
  const void *v18;
  char v19;

  PassCount = C3DFXTechniqueGetPassCount(a1);
  v8 = a3 + 1;
  if (a3 + 1 >= PassCount)
  {
    LOBYTE(v11) = 0;
    LOBYTE(v10) = 0;
    v12 = 1;
  }
  else
  {
    v9 = PassCount;
    v10 = 0;
    v11 = 0;
    v12 = 1;
    do
    {
      PassAtIndex = C3DFXTechniqueGetPassAtIndex(a1, v8);
      if (*(uint64_t *)(PassAtIndex + 520) >= 1)
      {
        v14 = 0;
        do
        {
          v15 = *(const void **)(*(_QWORD *)(*(_QWORD *)(PassAtIndex + 512) + 8 * v14) + 56);
          if (v15 && CFEqual(v15, a2))
          {
            ++v12;
            v11 |= v10 ^ 1;
          }
          ++v14;
        }
        while (v14 < *(_QWORD *)(PassAtIndex + 520));
      }
      if (*(_DWORD *)(PassAtIndex + 440))
      {
        v16 = 0;
        v17 = 8;
        do
        {
          v18 = *(const void **)(*(_QWORD *)(PassAtIndex + 432) + v17);
          if (v18 && CFEqual(v18, a2))
          {
            v10 |= v11 ^ 1;
            ++v12;
          }
          ++v16;
          v17 += 64;
        }
        while (v16 < *(unsigned int *)(PassAtIndex + 440));
      }
      ++v8;
    }
    while (v8 != v9);
  }
  if (a4)
  {
    if (a5)
      v19 = ~(_BYTE)v10;
    else
      v19 = v11;
    *a4 = v19 & 1;
  }
  return v12;
}

uint64_t C3DFXTechniqueIsBeingRendered(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DFXTechniqueAppendPass_cold_3(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return (*(unsigned __int8 *)(a1 + 88) >> 1) & 1;
}

uint64_t C3DFXTechniqueIsOpaque(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DFXTechniqueAppendPass_cold_3(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return (*(unsigned __int8 *)(a1 + 88) >> 2) & 1;
}

void C3DFXTechniqueSetIsOpaque(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DFXTechniqueAppendPass_cold_3(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (a2)
    v12 = 4;
  else
    v12 = 0;
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a1 + 88) & 0xFB | v12;
}

void C3DFXTechniqueAddSubTechnique(uint64_t a1, _QWORD *value)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __CFArray *Mutable;

  if (!a1 && (v4 = scn_default_log(), os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)))
  {
    C3DFXTechniqueAppendPass_cold_3(v4, v5, v6, v7, v8, v9, v10, v11);
    if (value)
      goto LABEL_6;
  }
  else if (value)
  {
    goto LABEL_6;
  }
  v12 = scn_default_log();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    C3DFXTechniqueAddSubTechnique_cold_1(v12, v13, v14, v15, v16, v17, v18, v19);
LABEL_6:
  Mutable = *(__CFArray **)(a1 + 120);
  if (!Mutable)
  {
    Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    *(_QWORD *)(a1 + 120) = Mutable;
  }
  value[16] = a1;
  CFArrayAppendValue(Mutable, value);
}

uint64_t C3DFXTechniqueGetParentTechnique(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DFXTechniqueAppendPass_cold_3(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 128);
}

void C3DFXTechniqueAddSymbolWithBindingBlock(uint64_t a1, const void *a2, void *a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const void *SymbolName;
  uint64_t Material;
  uint64_t Technique;

  if (!a1)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      C3DFXTechniqueAppendPass_cold_3(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  if (*(uint64_t *)(a1 + 72) >= 1)
  {
    v14 = 0;
    do
    {
      v15 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v14);
      if (*(uint64_t *)(v15 + 520) >= 1)
      {
        v16 = 0;
        do
        {
          v17 = *(_QWORD *)(*(_QWORD *)(v15 + 512) + 8 * v16);
          SymbolName = (const void *)C3DFXPassInputGetSymbolName(v17);
          if (CFEqual(a2, SymbolName))
            C3DFXPassInputSetBindingBlock(v17, a3);
          ++v16;
        }
        while (v16 < *(_QWORD *)(v15 + 520));
      }
      Material = C3DFXPassGetMaterial(v15);
      if (Material)
      {
        Technique = C3DMaterialGetTechnique(Material);
        if (Technique)
          C3DFXTechniqueAddSymbolWithBindingBlock(Technique, a2, a3);
      }
      ++v14;
    }
    while (v14 < *(_QWORD *)(a1 + 72));
  }
}

uint64_t C3DFXTechniqueCreateDefault(int a1, int a2)
{
  __CFString *v3;
  const void *v4;
  uint64_t v5;
  uint64_t PassAtIndex;

  if (a2)
    v3 = CFSTR("C3DFXDefault_velocity.plist");
  else
    v3 = CFSTR("C3DFXDefaultPass.plist");
  v4 = (const void *)C3DDictionaryNamed(v3);
  v5 = C3DFXTechniqueCreateWithDescription(v4, 0);
  PassAtIndex = C3DFXTechniqueGetPassAtIndex(v5, 0);
  if (a1)
    *(_BYTE *)(PassAtIndex + 296) = 36;
  return v5;
}

uint64_t C3DFXTechniqueEnsureThatPassesShouldExecute(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t i;
  uint64_t (*v5)(void);

  result = C3DFXTechniqueGetPassCount(a1);
  if (result >= 1)
  {
    v3 = result;
    for (i = 0; i != v3; ++i)
    {
      result = C3DFXTechniqueGetPassAtIndex(a1, i);
      v5 = *(uint64_t (**)(void))(result + 232);
      if (v5)
        result = v5();
    }
  }
  return result;
}

BOOL C3DFXTechniqueMarkAsUsed(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 result;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DFXTechniqueAppendPass_cold_3(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  result = *(_DWORD *)(a1 + 92) != a2;
  *(_DWORD *)(a1 + 92) = a2;
  return result;
}

uint64_t C3DFXTechniqueGetSingleProgram(uint64_t result)
{
  uint64_t PassAtIndex;

  if (result)
  {
    PassAtIndex = C3DFXTechniqueGetPassAtIndex(result, 0);
    return C3DFXPassGetProgram(PassAtIndex);
  }
  return result;
}

void *C3DFXTechniqueSetParentTechnique(uint64_t a1, uint64_t a2)
{
  uint64_t Owner;
  void *result;

  Owner = C3DFXTechniqueGetOwner(a2);
  C3DFXTechniqueSetOwner(a1, Owner);
  C3DFXTechniqueCompile(a1);
  _freeStorage(a1);
  result = *(void **)(a2 + 96);
  if (!result)
  {
    result = malloc_type_calloc(0x18uLL, 1uLL, 0x156481A9uLL);
    *(_QWORD *)(a2 + 96) = result;
    *(_BYTE *)(a2 + 88) |= 0x10u;
  }
  *(_QWORD *)(a1 + 96) = result;
  *(_BYTE *)(a1 + 88) &= ~0x10u;
  return result;
}

void C3DFXTechniqueSetLibrary(uint64_t a1, void *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DFXTechniqueAppendPass_cold_3(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = *(void **)(a1 + 136);
  if (v12 != a2)
  {

    *(_QWORD *)(a1 + 136) = a2;
  }
}

void _releaseCFTypeParameters(uint64_t a1, int a2, uint64_t a3)
{
  const void *v3;

  if ((a2 & 0x3F) == 5)
  {
    v3 = *(const void **)(a3 + HIWORD(a2));
    if (v3)
      CFRelease(v3);
  }
}

CFStringRef _C3DFXTechniqueCFCopyFormatDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DFXTechnique>"));
}

CFStringRef _C3DFXTechniqueCFCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DFXTechnique>"));
}

__CFArray *_C3DFXTechniqueCopyInstanceVariables(uint64_t a1)
{
  __CFArray *Mutable;
  uint64_t v3;
  uint64_t v4;
  CFStringRef v5;
  __CFDictionary *v6;
  CFNumberRef v7;
  CFNumberRef v8;
  CFNumberRef v9;
  __CFDictionary *v10;
  CFNumberRef v11;
  CFNumberRef v12;
  CFNumberRef v13;
  uint64_t v15;
  int v16;
  int valuePtr;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (*(uint64_t *)(a1 + 72) >= 1)
  {
    v3 = 0;
    v4 = 0;
    do
    {
      v5 = CFStringCreateWithFormat(0, 0, CFSTR("pass %d"), v4);
      v6 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v16 = 2;
      valuePtr = 5;
      v15 = *(_QWORD *)(a1 + 80) + v3;
      v7 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      v8 = CFNumberCreate(0, kCFNumberSInt32Type, &v16);
      v9 = CFNumberCreate(0, kCFNumberLongType, &v15);
      CFDictionarySetValue(v6, CFSTR("name"), v5);
      CFDictionarySetValue(v6, CFSTR("type"), v7);
      CFDictionarySetValue(v6, CFSTR("address"), v9);
      CFDictionarySetValue(v6, CFSTR("semantic"), v8);
      CFArrayAppendValue(Mutable, v6);
      CFRelease(v8);
      CFRelease(v6);
      CFRelease(v9);
      CFRelease(v7);
      CFRelease(v5);
      ++v4;
      v3 += 8;
    }
    while (v4 < *(_QWORD *)(a1 + 72));
  }
  v10 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v16 = 2;
  valuePtr = 5;
  v15 = a1 + 104;
  v11 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v12 = CFNumberCreate(0, kCFNumberSInt32Type, &v16);
  v13 = CFNumberCreate(0, kCFNumberLongType, &v15);
  CFDictionarySetValue(v10, CFSTR("name"), CFSTR("plist"));
  CFDictionarySetValue(v10, CFSTR("type"), v11);
  CFDictionarySetValue(v10, CFSTR("address"), v13);
  CFDictionarySetValue(v10, CFSTR("semantic"), v12);
  CFArrayAppendValue(Mutable, v10);
  CFRelease(v12);
  CFRelease(v10);
  CFRelease(v13);
  CFRelease(v11);
  return Mutable;
}

void C3DAnimationStackInit(_BYTE *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (*a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DAnimationStackInit_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  *a1 = 1;
}

void C3DAnimationStackDiscardModelValueItemForAnimationClusterNode(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *ValuePtrAtIndex;
  uint64_t v14;
  NSObject *v15;
  int v16;
  uint8_t v17[4];
  _DWORD v18[7];

  *(_QWORD *)&v18[5] = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) + 168) + 20);
  if ((_DWORD)v4)
  {
    v9 = 0;
    v10 = *(_QWORD *)(a2 + 224);
    v11 = 4 * v4;
    do
    {
      v12 = *(int *)(v10 + v9);
      if ((_DWORD)v12 != -1)
      {
        ValuePtrAtIndex = (uint64_t *)C3DArrayGetValuePtrAtIndex(*(_QWORD *)(a1 + 56), v12);
        v14 = *ValuePtrAtIndex;
        if (*ValuePtrAtIndex)
          goto LABEL_8;
        v15 = scn_default_log();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_FAULT))
          C3DAnimationStackDiscardModelValueItemForAnimationClusterNode_cold_1(v17, v18, v15);
        v14 = *ValuePtrAtIndex;
        if (*ValuePtrAtIndex)
        {
LABEL_8:
          v16 = *(unsigned __int16 *)(v14 + 16);
          if (a4)
            C3DModelValueStorageReleaseModelValueAndRestorePresentationValueIfNeeded(a3, v14);
          else
            C3DModelValueStorageReleaseModelValue(a3, v14);
          if (v16 == 1)
            *ValuePtrAtIndex = 0;
        }
        v10 = *(_QWORD *)(a2 + 224);
        *(_DWORD *)(v10 + v9) = -1;
      }
      v9 += 4;
    }
    while (v11 != v9);
  }
}

void C3DAnimationStackCleanup(uint64_t a1, uint64_t a2)
{
  _QWORD *i;
  uint64_t v5;
  _BOOL4 v6;
  const void *v7;
  const void *v8;
  const void *v9;

  if (*(_BYTE *)a1)
  {
    *(_BYTE *)a1 = 0;
    for (i = *(_QWORD **)(a1 + 8); i; i = (_QWORD *)i[22])
    {
      if (*(_BYTE *)(a1 + 48))
      {
        v5 = i[2];
        if (v5)
          v6 = (*(_WORD *)(v5 + 84) & 0x20) == 0;
        else
          v6 = 1;
        C3DAnimationStackDiscardModelValueItemForAnimationClusterNode(a1, (uint64_t)i, a2, v6);
      }
      i[19] = -1;
    }
    v7 = *(const void **)(a1 + 56);
    if (v7)
    {
      CFRelease(v7);
      *(_QWORD *)(a1 + 56) = 0;
    }
    v8 = *(const void **)(a1 + 8);
    if (v8)
    {
      CFRelease(v8);
      *(_QWORD *)(a1 + 8) = 0;
    }
    v9 = *(const void **)(a1 + 24);
    if (v9)
    {
      CFRelease(v9);
      *(_QWORD *)(a1 + 24) = 0;
    }
  }
}

void C3DAnimationStackSetTarget(uint64_t a1, CFTypeRef cf)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef v12;
  CFTypeRef v13;

  if (a1 || (v4 = scn_default_log(), !os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)))
  {
    if (!cf)
      goto LABEL_5;
    goto LABEL_4;
  }
  C3DAnimationStackSetTarget_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  if (cf)
LABEL_4:
    cf = (CFTypeRef)C3DModelTargetCreateCopy((uint64_t)cf);
LABEL_5:
  v12 = *(CFTypeRef *)(a1 + 24);
  if (v12 != cf)
  {
    if (v12)
    {
      CFRelease(v12);
      *(_QWORD *)(a1 + 24) = 0;
    }
    if (cf)
      v13 = CFRetain(cf);
    else
      v13 = 0;
    *(_QWORD *)(a1 + 24) = v13;
  }
  if (cf)
    CFRelease(cf);
}

uint64_t C3DAnimationStackGetTarget(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DAnimationStackSetTarget_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 24);
}

void C3DAnimationStackAppendAnimationNode(uint64_t a1, CFTypeRef cf, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  CFTypeRef v30;
  CFTypeRef v31;
  uint64_t v32;
  unsigned int v33;
  CFTypeID v34;
  NSObject *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t Count;
  uint64_t v54;
  __int16 *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t ValuePtrAtIndex;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int BaseType;
  uint64_t v67;
  BOOL v68;
  NSObject *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t ModelValueStorage;
  float32x4_t *Owner;
  uint8_t v75[4];
  _DWORD v76[7];

  *(_QWORD *)&v76[5] = *MEMORY[0x1E0C80C00];
  if (!a1 && (v6 = scn_default_log(), os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)))
  {
    C3DAnimationStackSetTarget_cold_1(v6, v7, v8, v9, v10, v11, v12, v13);
    if (cf)
      goto LABEL_6;
  }
  else if (cf)
  {
    goto LABEL_6;
  }
  v14 = scn_default_log();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    _C3DAnimationManagerAddAnimationNode_cold_3(v14, v15, v16, v17, v18, v19, v20, v21);
LABEL_6:
  if (!*(_BYTE *)a1)
  {
    v22 = scn_default_log();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_FAULT))
      C3DAnimationStackAppendAnimationNode_cold_4(v22, v23, v24, v25, v26, v27, v28, v29);
  }
  if (*(_QWORD *)(a1 + 8))
  {
    if (cf)
      v30 = CFRetain(cf);
    else
      v30 = 0;
    v32 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(v32 + 176) = v30;
    *((_QWORD *)cf + 21) = v32;
  }
  else
  {
    if (cf)
      v31 = CFRetain(cf);
    else
      v31 = 0;
    *(_QWORD *)(a1 + 8) = v31;
  }
  *(_QWORD *)(a1 + 16) = cf;
  C3DAnimationStackSetConstant(a1, 0, a3);
  if (*(_BYTE *)(a1 + 128))
  {
    v33 = *(char *)(*((_QWORD *)cf + 3) + 34) - 3;
    if (v33 <= 5)
      *((_BYTE *)cf + 120) = 0x70401020202uLL >> (8 * v33);
  }
  if (*(_BYTE *)(a1 + 48))
  {
    v34 = CFGetTypeID(cf);
    if (v34 != C3DAnimationClusterNodeGetTypeID())
    {
      v35 = scn_default_log();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_FAULT))
        C3DAnimationStackAppendAnimationNode_cold_3(v35, v36, v37, v38, v39, v40, v41, v42);
    }
    ModelValueStorage = C3DAnimationManagerGetModelValueStorage(a3);
    if (!ModelValueStorage)
    {
      v43 = scn_default_log();
      if (os_log_type_enabled(v43, OS_LOG_TYPE_FAULT))
        C3DAnimationStackAppendAnimationNode_cold_2(v43, v44, v45, v46, v47, v48, v49, v50);
    }
    v51 = *((_QWORD *)cf + 2);
    v52 = *(unsigned int *)(*(_QWORD *)(v51 + 168) + 20);
    if (!*(_QWORD *)(a1 + 56))
      *(_QWORD *)(a1 + 56) = C3DArrayCreate(24, *(_DWORD *)(*(_QWORD *)(v51 + 168) + 20));
    *((_QWORD *)cf + 28) = malloc_type_malloc(4 * v52, 0x100004052888210uLL);
    Count = C3DArrayGetCount(*(_QWORD *)(a1 + 56));
    Owner = (float32x4_t *)C3DAnimationNodeGetOwner((uint64_t)cf);
    if ((_DWORD)v52)
    {
      v54 = 0;
      v70 = cf;
      v71 = v52;
      v72 = v51;
      do
      {
        v55 = (__int16 *)C3DCFTypeCopyModelInfoAtSplittedPath(Owner, *(const __CFArray **)(*(_QWORD *)(*(_QWORD *)(v51 + 168) + 72) + 8 * v54), 0, 0);
        if (!C3DModelTargetGetTargetAddress((uint64_t)v55))
        {
          *(_DWORD *)(*((_QWORD *)cf + 28) + 4 * v54) = -1;
          if (!v55)
            goto LABEL_55;
          goto LABEL_54;
        }
        v56 = C3DModelValueStorageAddAndRetainModelValue(ModelValueStorage, v55);
        if (Count < 1)
          goto LABEL_49;
        v57 = 0;
        v58 = -1;
        v59 = -1;
        do
        {
          ValuePtrAtIndex = C3DArrayGetValuePtrAtIndex(*(_QWORD *)(a1 + 56), v57);
          if (*(_QWORD *)ValuePtrAtIndex)
          {
            if (v56 == *(_QWORD *)ValuePtrAtIndex)
            {
              v61 = ValuePtrAtIndex;
              v62 = *(unsigned __int8 *)(ValuePtrAtIndex + 8);
              if (v62 == C3DModelTargetGetTypeSemantic((uint64_t)v55))
              {
                v63 = *(unsigned __int8 *)(v61 + 9);
                if (v63 == C3DModelTargetGetComponentIndex((uint64_t)v55))
                {
                  v59 = v57;
                  v57 = Count;
                }
              }
            }
          }
          else
          {
            v58 = v57;
          }
          ++v57;
        }
        while (v57 < Count);
        if (v59 != -1)
        {
          cf = v70;
          *(_DWORD *)(v70[28] + 4 * v54) = v59;
          goto LABEL_51;
        }
        cf = v70;
        if (v58 == -1)
        {
LABEL_49:
          C3DArrayAppendValue(*(_QWORD *)(a1 + 56), 0);
          v64 = Count + 1;
        }
        else
        {
          v64 = Count;
          Count = v58;
        }
        *(_DWORD *)(*((_QWORD *)cf + 28) + 4 * v54) = Count;
        v65 = C3DArrayGetValuePtrAtIndex(*(_QWORD *)(a1 + 56), Count);
        *(_QWORD *)v65 = v56;
        *(_BYTE *)(v65 + 8) = C3DModelTargetGetTypeSemantic((uint64_t)v55);
        *(_BYTE *)(v65 + 9) = C3DModelTargetGetComponentIndex((uint64_t)v55);
        BaseType = C3DModelTargetGetBaseType((uint64_t)v55);
        *(_QWORD *)(v65 + 16) = C3DKeyFrameInterpolatorForType(BaseType, *(char *)(v65 + 8), 0, 0, 1);
        Count = v64;
LABEL_51:
        v51 = v72;
        v67 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v72 + 168) + 40) + v54);
        v68 = C3DSizeOfBaseType(v55[16]) == v67;
        v52 = v71;
        if (!v68)
        {
          v69 = scn_default_log();
          if (os_log_type_enabled(v69, OS_LOG_TYPE_FAULT))
            C3DAnimationStackAppendAnimationNode_cold_1(v75, v76, v69);
        }
LABEL_54:
        CFRelease(v55);
LABEL_55:
        ++v54;
      }
      while (v54 != v52);
    }
  }
}

void C3DAnimationStackSetConstant(uint64_t a1, int a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;

  if (!a1 && (v6 = scn_default_log(), os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)))
  {
    _C3DStackCFFinalize_cold_1(v6, v7, v8, v9, v10, v11, v12, v13);
    if (a3)
      goto LABEL_6;
  }
  else if (a3)
  {
    goto LABEL_6;
  }
  v14 = scn_default_log();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    _C3DAnimationManagerAddAnimationNode_cold_4(v14, v15, v16, v17, v18, v19, v20, v21);
LABEL_6:
  if (*(unsigned __int8 *)(a1 + 241) != a2)
  {
    if (a2)
      v22 = 1;
    else
      v22 = -1;
    _C3DAnimationManagerUpdateConstantCount(a3, v22);
    *(_BYTE *)(a1 + 241) = a2;
  }
}

void C3DAnimationStackRemoveAnimationNode(uint64_t a1, _QWORD *cf)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;

  if (!a1 && (v4 = scn_default_log(), os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)))
  {
    C3DAnimationStackSetTarget_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
    if (cf)
      goto LABEL_6;
  }
  else if (cf)
  {
    goto LABEL_6;
  }
  v12 = scn_default_log();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    _C3DAnimationManagerAddAnimationNode_cold_3(v12, v13, v14, v15, v16, v17, v18, v19);
LABEL_6:
  v20 = cf + 21;
  v21 = cf[21];
  cf[19] = -1;
  if (v21)
    *(_QWORD *)(v21 + 176) = cf[22];
  v22 = cf[22];
  if (v22)
    *(_QWORD *)(v22 + 168) = v21;
  if (*(_QWORD **)(a1 + 8) == cf)
    *(_QWORD *)(a1 + 8) = v22;
  if (*(_QWORD **)(a1 + 16) == cf)
    *(_QWORD *)(a1 + 16) = *v20;
  *v20 = 0;
  cf[22] = 0;
  CFRelease(cf);
}

BOOL C3DAnimationStackIsEmpty(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      _C3DStackCFFinalize_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 8) == 0;
}

void C3DRendererContextSetPlatformSpecificImplementations_ES2(uint64_t a1)
{
  uint64_t v1;
  int32x2_t *v2;
  uint64_t v3;
  int32x2_t v4;
  int32x2_t v5;
  int32x2_t v6;
  int32x2_t v7;
  int v8;
  NSObject *v9;
  uint8_t buf[4];
  int v11;
  uint64_t v12;

  v1 = 0;
  v12 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 776) = C3DES2BindVertexArray;
  *(_QWORD *)(a1 + 784) = C3DES2GenVertexArrays;
  *(_QWORD *)(a1 + 792) = C3DES2DeleteVertexArrays;
  *(_QWORD *)(a1 + 808) = C3DES2MapBufferRange;
  *(_QWORD *)(a1 + 816) = C3DES2FlushMappedBufferRange;
  *(_QWORD *)(a1 + 824) = C3DES2UnmapBufferRange;
  *(_QWORD *)(a1 + 832) = C3DES2RenderbufferStorageMultisample;
  *(_QWORD *)(a1 + 800) = C3DES2BlitFramebuffer;
  *(_QWORD *)(a1 + 768) = C3DES2SlotToAttachmentID;
  *(_OWORD *)a1 = xmmword_1DD008400;
  v2 = (int32x2_t *)(a1 + 36);
  v3 = a1 + 580;
  *(_QWORD *)(a1 + 16) = 0xFFFF0000800BLL;
  *(_DWORD *)(a1 + 24) = 0xFFFF;
  v4 = vdup_n_s32(0x1908u);
  v5 = vdup_n_s32(0x1907u);
  v6 = vdup_n_s32(0x1902u);
  v7 = vdup_n_s32(0x84F9u);
  do
  {
    if (v1 > 0x12u)
    {
      switch((char)v1)
      {
        case '$':
        case '\'':
          v2->i32[0] = 36193;
          v2[-1] = v4;
          *(_DWORD *)(v3 + 4 * v1) = 36193;
          goto LABEL_20;
        case '%':
        case '&':
        case '(':
        case '*':
        case '+':
          goto LABEL_16;
        case ')':
          v2->i32[0] = 5125;
          v2[-1] = v6;
          v8 = 33190;
          goto LABEL_19;
        case ',':
          v2->i32[0] = 34042;
          v2[-1] = v7;
          v8 = 35056;
          goto LABEL_19;
        default:
          if (v1 == 19)
          {
            v2->i32[0] = 5123;
            v2[-1] = (int32x2_t)0x822700001907;
            v8 = 33319;
          }
          else
          {
            if (v1 != 23)
            {
LABEL_16:
              v2->i32[0] = 0;
              v2[-1] = 0;
              *(_DWORD *)(v3 + 4 * v1) = 0;
              v9 = scn_default_log();
              if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 67109120;
                v11 = v1;
                _os_log_impl(&dword_1DCCB8000, v9, OS_LOG_TYPE_DEFAULT, "Warning: Unknown render buffer format %hhu", buf, 8u);
              }
              goto LABEL_20;
            }
            v2->i32[0] = 36193;
            v2[-1] = (int32x2_t)0x822700001907;
            v8 = 33327;
          }
LABEL_19:
          *(_DWORD *)(v3 + 4 * v1) = v8;
          goto LABEL_20;
      }
    }
    switch((char)v1)
    {
      case 0:
        v2->i32[0] = 0xFFFF;
        v2[-1] = (int32x2_t)0xFFFF0000FFFFLL;
        *(_DWORD *)(v3 + 4 * v1) = 0xFFFF;
        break;
      case 1:
      case 2:
        v2->i32[0] = 5121;
        v2[-1] = v4;
        *(_DWORD *)(v3 + 4 * v1) = 32856;
        break;
      case 3:
        v2->i32[0] = 5121;
        v2[-1] = v5;
        v8 = 33321;
        goto LABEL_19;
      case 11:
        v2->i32[0] = 36193;
        v2[-1] = (int32x2_t)0x190300001907;
        v8 = 33325;
        goto LABEL_19;
      case 14:
        v2->i32[0] = 5126;
        v2[-1] = (int32x2_t)0x190300001907;
        v8 = 33326;
        goto LABEL_19;
      default:
        goto LABEL_16;
    }
LABEL_20:
    ++v1;
    v2 = (int32x2_t *)((char *)v2 + 12);
  }
  while (v1 != 46);
}

uint64_t C3DES2BlitFramebuffer()
{
  glResolveMultisampleFramebufferAPPLE();
  return glDiscardFramebufferEXT();
}

uint64_t C3DES2SlotToAttachmentID(int a1)
{
  NSObject *v2;

  switch(a1)
  {
    case 0:
      return 36064;
    case 5:
      return 36128;
    case 4:
      return 36096;
  }
  v2 = scn_default_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    C3DES2SlotToAttachmentID_cold_1(v2);
  return 0xFFFFLL;
}

void sub_1DCD90868(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0D41C0](v1, 0x10E1C4096E98722);
  _Unwind_Resume(a1);
}

void sub_1DCD909E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0D41C0](v1, 0x10E1C4096E98722);
  _Unwind_Resume(a1);
}

void SCNCPlaySound::SCNCPlaySound(SCNCPlaySound *this, SCNCAction *a2)
{
  uint64_t v3;

  SCNCAction::SCNCAction((SCNCAction *)this);
  *(_QWORD *)v3 = &off_1EA595508;
  *(_QWORD *)(v3 + 24) = a2->var3;
  *(double *)(v3 + 56) = a2->var7;
  *(_OWORD *)(v3 + 40) = *(_OWORD *)&a2->var5;
  *(_WORD *)(v3 + 80) = *(_WORD *)&a2->var10;
  *(double *)(v3 + 64) = a2->var8;
  *(_QWORD *)(v3 + 104) = a2->var14;
  *(_BYTE *)(v3 + 32) = 1;
  *(_BYTE *)(v3 + 144) = 0;
}

void SCNCPlaySound::~SCNCPlaySound(SCNCPlaySound *this)
{
  SCNCPlaySound::~SCNCPlaySound(this);
  JUMPOUT(0x1DF0D41C0);
}

{
  this->var0 = (void **)&off_1EA595508;

  SCNCAction::~SCNCAction((SCNCAction *)this);
}

void SCNCPlaySound::cpp_updateWithTargetForTime(SCNCPlaySound *this, SCNNode *a2, double a3)
{
  float v6;

  SCNCAction::cpp_updateWithTargetForTime((SCNCAction *)this, a2, a3);
  if (!this->var19 && this->var21)
  {
    this->var19 = 1;
    -[SCNNode addAudioPlayer:](a2, "addAudioPlayer:", +[SCNAudioPlayer audioPlayerWithSource:](SCNAudioPlayer, "audioPlayerWithSource:"));
  }
  v6 = SCNCAction::cpp_ratioForTime((SCNCAction *)this, a3);
  if ((COERCE_UNSIGNED_INT(v6 + -1.0) & 0x60000000) == 0 || !this->var21)
    SCNCAction::didFinishWithTargetAtTime((SCNCAction *)this, a2, a3);
}

SCNCAction *SCNCPlaySound::cpp_wasRemovedFromTargetAtTime(SCNCPlaySound *this, SCNNode *a2, double a3)
{
  SCNCAction *result;
  NSArray *v6;
  SCNCAction *v7;
  uint64_t v8;
  SCNCAction *v9;
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  result = SCNCAction::cpp_wasRemovedFromTargetAtTime((SCNCAction *)this, a2, a3);
  if (this->var20 && this->var19)
  {
    if (this->var21)
    {
      v13 = 0u;
      v14 = 0u;
      v11 = 0u;
      v12 = 0u;
      v6 = -[SCNNode audioPlayers](a2, "audioPlayers", 0);
      result = (SCNCAction *)-[NSArray countByEnumeratingWithState:objects:count:](v6, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      if (result)
      {
        v7 = result;
        v8 = *(_QWORD *)v12;
        while (2)
        {
          v9 = 0;
          do
          {
            if (*(_QWORD *)v12 != v8)
              objc_enumerationMutation(v6);
            v10 = *(void **)(*((_QWORD *)&v11 + 1) + 8 * (_QWORD)v9);
            if ((id)objc_msgSend(v10, "audioSource") == this->var21)
              return (SCNCAction *)-[SCNNode removeAudioPlayer:](a2, "removeAudioPlayer:", v10);
            v9 = (SCNCAction *)((char *)v9 + 1);
          }
          while (v7 != v9);
          result = (SCNCAction *)-[NSArray countByEnumeratingWithState:objects:count:](v6, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
          v7 = result;
          if (result)
            continue;
          break;
        }
      }
    }
  }
  return result;
}

SCNCAction *SCNCPlaySound::cpp_willStartWithTargetAtTime(SCNCPlaySound *this, SCNNode *a2, double a3)
{
  SCNCAction *result;

  result = SCNCAction::cpp_willStartWithTargetAtTime((SCNCAction *)this, a2, a3);
  this->var19 = 0;
  return result;
}

uint64_t SCNCPlaySound::cpp_didFinishWithTargetAtTime(SCNCPlaySound *this, SCNNode *a2, double a3)
{
  uint64_t result;
  NSArray *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  result = SCNCAction::cpp_didFinishWithTargetAtTime((SCNCAction *)this, a2, a3);
  if (this->var20 && this->var19)
  {
    if (this->var21)
    {
      v13 = 0u;
      v14 = 0u;
      v11 = 0u;
      v12 = 0u;
      v6 = -[SCNNode audioPlayers](a2, "audioPlayers", 0);
      result = -[NSArray countByEnumeratingWithState:objects:count:](v6, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      if (result)
      {
        v7 = result;
        v8 = *(_QWORD *)v12;
        while (2)
        {
          v9 = 0;
          do
          {
            if (*(_QWORD *)v12 != v8)
              objc_enumerationMutation(v6);
            v10 = *(void **)(*((_QWORD *)&v11 + 1) + 8 * v9);
            if ((id)objc_msgSend(v10, "audioSource") == this->var21)
              return -[SCNNode removeAudioPlayer:](a2, "removeAudioPlayer:", v10);
            ++v9;
          }
          while (v7 != v9);
          result = -[NSArray countByEnumeratingWithState:objects:count:](v6, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
          v7 = result;
          if (result)
            continue;
          break;
        }
      }
    }
  }
  return result;
}

void sub_1DCD9103C(_Unwind_Exception *a1)
{
  SCNCAction *v1;

  SCNCAction::~SCNCAction(v1);
  _Unwind_Resume(a1);
}

double scn_matrix_compute_normal(double _D0, __n128 _Q1, __n128 a3)
{
  float v12;
  __int128 v13;
  float v14;

  _S7 = a3.n128_u32[2];
  _S3 = _Q1.n128_u32[2];
  __asm
  {
    FMLA            S5, S7, V1.S[1]
    FMLA            S17, S7, V0.S[1]
    FMLA            S16, S3, V0.S[1]
  }
  v12 = vmlas_n_f32(vmlas_n_f32(-(float)(_Q1.n128_f32[0] * _S17), _S5, *(float *)&_D0), _S16, a3.n128_f32[0]);
  if (v12 == 0.0)
  {
    v13 = *MEMORY[0x1E0C83FF0];
  }
  else
  {
    v14 = 1.0 / v12;
    *(float *)&v13 = _S5 * v14;
    *((float *)&v13 + 1) = -(float)((float)((float)(a3.n128_f32[0] * (float)-_Q1.n128_f32[2])
                                          + (float)(_Q1.n128_f32[0] * a3.n128_f32[2]))
                                  * v14);
  }
  return *(double *)&v13;
}

double scn_matrix_fast_invert(int32x4_t a1, int32x4_t a2, int32x4_t a3, int32x4_t a4)
{
  int32x4_t v4;
  int32x4_t v5;
  int32x4_t v6;
  int32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  int8x16_t v11;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  double result;

  v4 = vzip1q_s32(a1, a3);
  v5 = vzip2q_s32(a1, a3);
  v6 = vzip1q_s32(a2, a4);
  v7 = vzip2q_s32(a2, a4);
  v8 = (float32x4_t)vzip1q_s32(v4, v6);
  v9 = (float32x4_t)vzip2q_s32(v4, v6);
  v10 = (float32x4_t)vzip1q_s32(v5, v7);
  v11 = (int8x16_t)vzip2q_s32(v5, v7);
  _Q3 = (float32x4_t)vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL);
  _Q4 = (float32x4_t)vextq_s8(v11, v11, 8uLL);
  v14 = (float32x4_t)vrev64q_s32((int32x4_t)vmulq_f32(v10, _Q4));
  v15 = (float32x4_t)vrev64q_s32((int32x4_t)vmulq_f32(v10, _Q3));
  v16 = (float32x4_t)vrev64q_s32((int32x4_t)vmulq_f32(v9, _Q4));
  v17 = (float32x4_t)vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL);
  v18 = vmlsq_f32(vmlaq_f32(vmlsq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v14, vnegq_f32(_Q3)), (float32x4_t)vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL), _Q3), v15, _Q4), (float32x4_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL), _Q4), v16, v17), (float32x4_t)vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL), v17);
  _Q2 = (int8x16_t)vmulq_f32(v8, v18);
  *(float32x2_t *)_Q2.i8 = vadd_f32(*(float32x2_t *)_Q2.i8, (float32x2_t)*(_OWORD *)&vextq_s8(_Q2, _Q2, 8uLL));
  _Q3.i32[0] = vadd_f32(*(float32x2_t *)_Q2.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)_Q2.i8, 1)).u32[0];
  *(float *)_Q2.i32 = vaddv_f32(*(float32x2_t *)_Q2.i8);
  *(float32x2_t *)_Q4.f32 = vrecpe_f32((float32x2_t)_Q3.u32[0]);
  *(float32x2_t *)_Q4.f32 = vmul_f32(*(float32x2_t *)_Q4.f32, vrecps_f32((float32x2_t)_Q3.u32[0], *(float32x2_t *)_Q4.f32));
  *(float32x2_t *)_Q3.f32 = vmul_f32(*(float32x2_t *)_Q4.f32, vrecps_f32((float32x2_t)_Q3.u32[0], *(float32x2_t *)_Q4.f32));
  _Q3.i32[0] = vmul_f32(*(float32x2_t *)_Q3.f32, *(float32x2_t *)_Q3.f32).u32[0];
  __asm { FMLS            S4, S2, V3.S[0] }
  *(_QWORD *)&result = vmulq_n_f32(v18, _Q4.f32[0]).u64[0];
  return result;
}

simd_float4 scn_matrix_multiply_batch(simd_float4x4 *a1, const simd_float4x4 *a2, const simd_float4x4 *a3, unsigned int a4)
{
  simd_float4 *v4;
  simd_float4 *v5;
  simd_float4 *v6;
  uint64_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  simd_float4 result;

  if (a4)
  {
    v4 = &a3->columns[2];
    v5 = &a2->columns[2];
    v6 = &a1->columns[2];
    v7 = a4;
    do
    {
      v8 = (float32x4_t)v5[-2];
      v9 = (float32x4_t)v5[-1];
      v10 = *(float32x4_t *)v5;
      v11 = (float32x4_t)v5[1];
      v5 += 4;
      v12 = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v8, v4[-2].f32[0]), v9, v4[-2].f32[1]), v10, v4[-2].f32[2]), v11, v4[-2].f32[3]);
      v13 = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v8, v4[-1].f32[0]), v9, v4[-1].f32[1]), v10, v4[-1].f32[2]), v11, v4[-1].f32[3]);
      v14 = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v8, v4->f32[0]), v9, v4->f32[1]), v10, v4->f32[2]), v11, v4->f32[3]);
      result = (simd_float4)vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v8, v4[1].f32[0]), v9, v4[1].f32[1]), v10, v4[1].f32[2]), v11, v4[1].f32[3]);
      v6[-2] = (simd_float4)v12;
      v6[-1] = (simd_float4)v13;
      *v6 = (simd_float4)v14;
      v6[1] = result;
      v6 += 4;
      v4 += 4;
      --v7;
    }
    while (v7);
  }
  return result;
}

float32x4_t *scn_matrix_multiply_batch(float32x4_t *result, simd_float4x4 a2, const simd_float4x4 *a3, unsigned int a4)
{
  uint64_t v4;
  simd_float4 *v5;
  float32x4_t *v6;

  if (a4)
  {
    v4 = a4;
    v5 = &a3->columns[2];
    v6 = result + 2;
    do
    {
      v6[-2] = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32((float32x4_t)a2.columns[0], v5[-2].f32[0]), (float32x4_t)a2.columns[1], v5[-2].f32[1]), (float32x4_t)a2.columns[2], v5[-2].f32[2]), (float32x4_t)a2.columns[3], v5[-2].f32[3]);
      v6[-1] = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32((float32x4_t)a2.columns[0], v5[-1].f32[0]), (float32x4_t)a2.columns[1], v5[-1].f32[1]), (float32x4_t)a2.columns[2], v5[-1].f32[2]), (float32x4_t)a2.columns[3], v5[-1].f32[3]);
      *v6 = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32((float32x4_t)a2.columns[0], v5->f32[0]), (float32x4_t)a2.columns[1], v5->f32[1]), (float32x4_t)a2.columns[2], v5->f32[2]), (float32x4_t)a2.columns[3], v5->f32[3]);
      v6[1] = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32((float32x4_t)a2.columns[0], v5[1].f32[0]), (float32x4_t)a2.columns[1], v5[1].f32[1]), (float32x4_t)a2.columns[2], v5[1].f32[2]), (float32x4_t)a2.columns[3], v5[1].f32[3]);
      v5 += 4;
      v6 += 4;
      --v4;
    }
    while (v4);
  }
  return result;
}

int32x4_t scn_matrix_transpose_batch(uint64_t a1, int32x4_t *a2, unsigned int a3)
{
  uint64_t v3;
  float *v4;
  int32x4_t *v5;
  int32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;
  float *v10;
  float32x2x2_t v11;
  int32x4_t v12;
  int32x4_t result;
  float32x2x2_t v14;

  if (a3)
  {
    v3 = a3;
    v4 = (float *)(a1 + 32);
    v5 = a2 + 2;
    do
    {
      v6 = v5[-2];
      v7 = v5[-1];
      v8 = *v5;
      v9 = v5[1];
      v5 += 4;
      v10 = v4 - 8;
      v11 = (float32x2x2_t)vzip1q_s32(v6, v8);
      v14.val[0] = (float32x2_t)vzip2q_s32(v6, v8).u64[0];
      v12 = vzip1q_s32(v7, v9);
      v14.val[1] = (float32x2_t)vzip2q_s32(v7, v9).u64[0];
      result = vzip2q_s32((int32x4_t)v11, v12);
      vst2_f32(v10, v11);
      *((int32x4_t *)v4 - 1) = result;
      vst2_f32(v4, v14);
      v4 += 12;
      --v3;
    }
    while (v3);
  }
  return result;
}

float32_t scn_triangle_point_distance_squared(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4)
{
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  float32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  float32x4_t v35;
  int8x16_t v36;
  float32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float v61;

  v4 = vsubq_f32(a2, a1);
  v5 = vsubq_f32(a4, a1);
  v6 = vsubq_f32(a3, a2);
  v7 = vsubq_f32(a4, a2);
  v8 = vsubq_f32(a1, a3);
  v9 = vsubq_f32(a4, a3);
  v10 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v4, (int32x4_t)v4), (int8x16_t)v4, 0xCuLL);
  v11 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v8, (int32x4_t)v8), (int8x16_t)v8, 0xCuLL);
  v12 = vnegq_f32(v4);
  v13 = vmlaq_f32(vmulq_f32(v11, v12), v8, v10);
  v14 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v13, (int32x4_t)v13), (int8x16_t)v13, 0xCuLL);
  v15 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v14, (int32x4_t)v14), (int8x16_t)v14, 0xCuLL);
  v16 = (int32x4_t)vmlaq_f32(vmulq_f32(v15, v12), v14, v10);
  v17 = (int32x4_t)vmlaq_f32(vmulq_f32(v15, vnegq_f32(v6)), v14, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v6, (int32x4_t)v6), (int8x16_t)v6, 0xCuLL));
  v18 = (int32x4_t)vmlaq_f32(vmulq_f32(v15, vnegq_f32(v8)), v14, v11);
  v19 = (int32x4_t)vmulq_f32(v5, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v16, v16), (int8x16_t)v16, 0xCuLL));
  v20 = (int32x4_t)vmulq_f32(v7, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v17, v17), (int8x16_t)v17, 0xCuLL));
  v21 = (int32x4_t)vmulq_f32(v9, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v18, v18), (int8x16_t)v18, 0xCuLL));
  v22 = (int32x4_t)vmulq_f32(v5, v14);
  v23 = vzip1q_s32(v19, v21);
  v24 = vzip2q_s32(v19, v21);
  v25 = vzip1q_s32(v20, v22);
  v26 = vaddq_f32((float32x4_t)vzip1q_s32(v24, vzip2q_s32(v20, v22)), vaddq_f32((float32x4_t)vzip1q_s32(v23, v25), (float32x4_t)vzip2q_s32(v23, v25)));
  v27 = (int32x4_t)vmulq_f32(v4, v4);
  v28 = (int32x4_t)vmulq_f32(v6, v6);
  v29 = (int32x4_t)vmulq_f32(v8, v8);
  v30 = (int32x4_t)vmulq_f32(v13, v13);
  v31 = (int32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v30, v30), (int8x16_t)v30, 0xCuLL);
  v32 = vzip1q_s32(v27, v29);
  v33 = vzip2q_s32(v27, v29);
  v34 = vzip1q_s32(v28, v31);
  v35 = vaddq_f32((float32x4_t)vzip1q_s32(v33, vzip2q_s32(v28, v31)), vaddq_f32((float32x4_t)vzip1q_s32(v32, v34), (float32x4_t)vzip2q_s32(v32, v34)));
  v28.i64[0] = 0x8000000080000000;
  v28.i64[1] = 0x8000000080000000;
  v36 = vandq_s8((int8x16_t)v26, (int8x16_t)v28);
  __asm { FMOV            V16.4S, #1.0 }
  v42 = (float32x4_t)vandq_s8(vorrq_s8(v36, (int8x16_t)_Q16), vorrq_s8((int8x16_t)vcltzq_f32(v26), (int8x16_t)vcgtzq_f32(v26)));
  if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v42, 2), vaddq_f32(v42, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v42.f32, 1))).f32[0] >= 2.0)
  {
    v60.i32[0] = vdivq_f32(vmulq_f32(v26, v26), v35).i32[3];
  }
  else
  {
    v43 = (int32x4_t)vmulq_f32(v4, v5);
    v44 = (int32x4_t)vmulq_f32(v6, v7);
    v45 = (int32x4_t)vmulq_f32(v8, v9);
    v46 = vzip2q_s32(v43, v45);
    v47 = (float32x4_t)vzip1q_s32(vzip1q_s32(v43, v45), v44);
    v48 = (float32x4_t)vtrn2q_s32(v43, v44);
    v48.i32[2] = v45.i32[1];
    v49 = vdivq_f32(vaddq_f32((float32x4_t)vzip1q_s32(v46, vdupq_laneq_s32(v44, 2)), vaddq_f32(v47, v48)), v35);
    v49.i32[3] = v49.i32[2];
    v50 = vminq_f32(vmaxq_f32(v49, (float32x4_t)0), _Q16);
    v51 = vmlaq_n_f32(vnegq_f32(v5), v4, v50.f32[0]);
    v52 = vmlaq_lane_f32(vnegq_f32(v7), v6, *(float32x2_t *)v50.f32, 1);
    v53 = vmlaq_laneq_f32(vnegq_f32(v9), v8, v50, 2);
    v54 = (int32x4_t)vmulq_f32(v51, v51);
    v55 = (int32x4_t)vmulq_f32(v52, v52);
    v56 = (int32x4_t)vmulq_f32(v53, v53);
    v57 = vzip2q_s32(v54, v56);
    v58 = (float32x4_t)vzip1q_s32(vzip1q_s32(v54, v56), v55);
    v59 = (float32x4_t)vtrn2q_s32(v54, v55);
    v59.i32[2] = v56.i32[1];
    v60 = vaddq_f32((float32x4_t)vzip1q_s32(v57, vdupq_laneq_s32(v55, 2)), vaddq_f32(v58, v59));
    v61 = v60.f32[1];
    if (v60.f32[0] <= v60.f32[1])
      v61 = v60.f32[0];
    v60.i32[0] = v60.i32[2];
    if (v61 <= v60.f32[2])
      v60.f32[0] = v61;
  }
  return v60.f32[0];
}

BOOL scn_plane_intersect_3_planes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float32x4_t *a7)
{
  float32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;
  float32x4_t v10;
  int32x2_t v11;
  float32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;

  v7.i64[0] = a1;
  v7.i64[1] = a2;
  v8.i64[0] = a3;
  v8.i64[1] = a4;
  v9.i64[0] = a5;
  v9.i64[1] = a6;
  v10 = vmulq_f32(v7, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v9, (int8x16_t)v9, 0xCuLL), (int8x16_t)v9, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v8, v8), (int8x16_t)v8, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v9, v9), (int8x16_t)v9, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v8, (int8x16_t)v8, 0xCuLL), (int8x16_t)v8, 8uLL)));
  v11 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2), vaddq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1))).u64[0];
  if (*(float *)v11.i32 != 0.0)
  {
    v12 = v7;
    v12.f32[0] = -*((float *)&a2 + 1);
    v13 = v8;
    *(float *)v13.i32 = -*((float *)&a4 + 1);
    v14 = v9;
    *(float *)v14.i32 = -*((float *)&a6 + 1);
    v15 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v14, (int8x16_t)v14, 0xCuLL), (int8x16_t)v14, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v13, v13), (int8x16_t)v13, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v14, v14), (int8x16_t)v14, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v13, (int8x16_t)v13, 0xCuLL), (int8x16_t)v13, 8uLL));
    v16 = v7;
    v16.f32[1] = -*((float *)&a2 + 1);
    v17 = v8;
    *(float *)&v17.i32[1] = -*((float *)&a4 + 1);
    v18 = v9;
    *(float *)&v18.i32[1] = -*((float *)&a6 + 1);
    v19 = (int32x4_t)vmulq_f32(v12, v15);
    v20 = (int32x4_t)vmulq_f32(v16, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v18, (int8x16_t)v18, 0xCuLL), (int8x16_t)v18, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v17, v17), (int8x16_t)v17, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v18, v18), (int8x16_t)v18, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v17, (int8x16_t)v17, 0xCuLL), (int8x16_t)v17, 8uLL)));
    *(float32x2_t *)v16.f32 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v19.i8, *(int32x2_t *)v20.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v19.i8, *(int32x2_t *)v20.i8));
    v21 = (float32x4_t)vzip2q_s32(v19, v20);
    *(float32x2_t *)v21.f32 = vadd_f32(*(float32x2_t *)v21.f32, *(float32x2_t *)v16.f32);
    v7.f32[2] = -*((float *)&a2 + 1);
    *(float *)&v8.i32[2] = -*((float *)&a4 + 1);
    *(float *)&v9.i32[2] = -*((float *)&a6 + 1);
    v22 = vmulq_f32(v7, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v9, (int8x16_t)v9, 0xCuLL), (int8x16_t)v9, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v8, v8), (int8x16_t)v8, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v9, v9), (int8x16_t)v9, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v8, (int8x16_t)v8, 0xCuLL), (int8x16_t)v8, 8uLL)));
    v21.i32[2] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 2), vaddq_f32(v22, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 1))).u32[0];
    *a7 = vdivq_f32(v21, (float32x4_t)vdupq_lane_s32(v11, 0));
  }
  return *(float *)v11.i32 != 0.0;
}

uint64_t scn_frustum_classify_aabb(float32x4_t *a1, float32x4_t a2, float32x4_t a3)
{
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  int32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  float32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int8x16_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int8x16_t v33;
  int8x16_t v34;
  float32x2_t v35;
  float32x4_t v36;

  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = (int32x4_t)vmulq_f32(a2, *a1);
  v7 = (int32x4_t)vmulq_f32(a2, v3);
  v8 = (int32x4_t)vmulq_f32(a2, v4);
  v9 = (int32x4_t)vmulq_f32(a2, v5);
  v10 = vzip1q_s32(v6, v8);
  v11 = vzip2q_s32(v6, v8);
  v12 = vzip1q_s32(v7, v9);
  v13 = vzip2q_s32(v7, v9);
  v14 = vaddq_f32((float32x4_t)vzip2q_s32(v11, v13), vaddq_f32((float32x4_t)vzip1q_s32(v11, v13), vaddq_f32((float32x4_t)vzip1q_s32(v10, v12), (float32x4_t)vzip2q_s32(v10, v12))));
  v15 = (int32x4_t)vmulq_f32(a3, vabsq_f32(*a1));
  v16 = (int32x4_t)vmulq_f32(a3, vabsq_f32(v3));
  v17 = (int32x4_t)vmulq_f32(a3, vabsq_f32(v4));
  v18 = (int32x4_t)vmulq_f32(a3, vabsq_f32(v5));
  v19 = vzip1q_s32(v15, v17);
  v20 = vzip2q_s32(v15, v17);
  v21 = vzip1q_s32(v16, v18);
  v22 = vzip2q_s32(v16, v18);
  v23 = (int8x16_t)vmaxnmq_f32(vsubq_f32(vabsq_f32(v14), vaddq_f32((float32x4_t)vzip2q_s32(v20, v22), vaddq_f32((float32x4_t)vzip1q_s32(v20, v22), vaddq_f32((float32x4_t)vzip1q_s32(v19, v21), (float32x4_t)vzip2q_s32(v19, v21))))), (float32x4_t)0);
  v22.i64[0] = 0x8000000080000000;
  v22.i64[1] = 0x8000000080000000;
  v24 = (float32x4_t)vbslq_s8((int8x16_t)v22, (int8x16_t)v14, v23);
  if ((vmaxvq_u32((uint32x4_t)vcltzq_f32(v24)) & 0x80000000) != 0)
    return 1;
  v26 = a1[4];
  v25 = a1[5];
  v27 = (int32x4_t)vmulq_f32(a2, v26);
  v28 = (int32x4_t)vmulq_f32(a2, v25);
  v29 = (int8x16_t)vzip1q_s32(v27, v28);
  v30 = (int8x16_t)vzip2q_s32(v27, v28);
  *(float32x2_t *)v30.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL), vadd_f32(*(float32x2_t *)v30.i8, vadd_f32(*(float32x2_t *)v29.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL))));
  v31 = (int32x4_t)vmulq_f32(a3, vabsq_f32(v26));
  v32 = (int32x4_t)vmulq_f32(a3, vabsq_f32(v25));
  v33 = (int8x16_t)vzip1q_s32(v31, v32);
  v34 = (int8x16_t)vzip2q_s32(v31, v32);
  v35 = (float32x2_t)vbsl_s8((int8x8_t)0x8000000080000000, *(int8x8_t *)v30.i8, (int8x8_t)vmaxnm_f32(vsub_f32(vabs_f32(*(float32x2_t *)v30.i8), vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL), vadd_f32(*(float32x2_t *)v34.i8, vadd_f32(*(float32x2_t *)v33.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v33, v33, 8uLL))))), 0));
  *(int32x2_t *)v34.i8 = vcltz_f32(v35);
  if ((vpmax_u32(*(uint32x2_t *)v34.i8, *(uint32x2_t *)v34.i8).u32[0] & 0x80000000) != 0)
    return 1;
  *(float32x2_t *)v36.f32 = vmul_f32(*(float32x2_t *)v24.f32, v35);
  v36.i64[1] = vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL).u64[0];
  return (vmaxvq_u32((uint32x4_t)vceqzq_f32(v36)) >> 30) & 2;
}

double scn_triangle_barycentric_coordinates(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4)
{
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  int32x2_t v8;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;

  v4 = vsubq_f32(a2, a1);
  v5 = vsubq_f32(a3, a1);
  v6 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v5, (int8x16_t)v5, 0xCuLL), (int8x16_t)v5, 8uLL), vnegq_f32(v4)), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v4, (int8x16_t)v4, 0xCuLL), (int8x16_t)v4, 8uLL), v5);
  v7 = vmulq_f32(v6, v6);
  v8 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), vaddq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1))).u64[0];
  if (fabsf(*(float *)v8.i32) >= 1.1755e-38)
  {
    v14 = vsubq_f32(a3, a4);
    v15 = vsubq_f32(a2, a4);
    v16 = vsubq_f32(a1, a4);
    v17 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v15, (int8x16_t)v15, 0xCuLL), (int8x16_t)v15, 8uLL);
    v18 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v14, (int8x16_t)v14, 0xCuLL), (int8x16_t)v14, 8uLL);
    v19 = vmlaq_f32(vmulq_f32(v18, vnegq_f32(v15)), v17, v14);
    v20 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v16, (int8x16_t)v16, 0xCuLL), (int8x16_t)v16, 8uLL);
    v21 = vmlaq_f32(vmulq_f32(v20, vnegq_f32(v14)), v18, v16);
    v22 = vmlaq_f32(vmulq_f32(v17, vnegq_f32(v16)), v20, v15);
    v23 = (int32x4_t)vmulq_f32(v6, v19);
    v24 = (int32x4_t)vmulq_f32(v6, v21);
    _Q0 = (int32x4_t)vmulq_f32(v6, v22);
    v25 = vzip2q_s32(v23, _Q0);
    v26 = (float32x4_t)vzip1q_s32(vzip1q_s32(v23, _Q0), v24);
    v27 = (float32x4_t)vtrn2q_s32(v23, v24);
    v27.i32[2] = _Q0.i32[1];
    _Q0.i64[0] = vdivq_f32(vaddq_f32((float32x4_t)vzip1q_s32(v25, vdupq_laneq_s32(v24, 2)), vaddq_f32(v26, v27)), (float32x4_t)vdupq_lane_s32(v8, 0)).u64[0];
  }
  else
  {
    __asm { FMOV            V0.4S, #-1.0 }
  }
  return *(double *)_Q0.i64;
}

uint64_t C3DKeyframedAnimationCreate()
{
  uint64_t Instance;

  if (C3DKeyframedAnimationGetTypeID_onceToken != -1)
    dispatch_once(&C3DKeyframedAnimationGetTypeID_onceToken, &__block_literal_global_24);
  Instance = C3DTypeCreateInstance_(C3DKeyframedAnimationGetTypeID_typeID, 0xA0uLL);
  C3DAnimationCommonInit(Instance);
  return Instance;
}

float C3DKeyframedAnimationSetController(uint64_t a1, CFTypeRef cf)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef v12;
  float result;
  float Duration;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationForKey_cold_4(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = *(CFTypeRef *)(a1 + 168);
  if (v12 != cf)
  {
    if (v12)
    {
      CFRelease(v12);
      *(_QWORD *)(a1 + 168) = 0;
    }
    if (cf)
      cf = CFRetain(cf);
    *(_QWORD *)(a1 + 168) = cf;
  }
  result = *(float *)(a1 + 72);
  if (result == 0.0 && cf != 0)
  {
    Duration = C3DKeyframeControllerGetDuration((uint64_t)cf);
    C3DAnimationSetDuration(a1, Duration);
  }
  return result;
}

uint64_t C3DKeyframedAnimationGetController(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationForKey_cold_4(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 168);
}

uint64_t C3DKeyframedAnimationEvaluate(uint64_t a1, int a2, uint64_t a3, double a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  double v25;
  uint64_t v26;
  uint64_t Additive;

  if (!a1 && (v8 = scn_default_log(), os_log_type_enabled(v8, OS_LOG_TYPE_FAULT)))
  {
    C3DKeyframedAnimationEvaluate_cold_2(v8, v9, v10, v11, v12, v13, v14, v15);
    if (a3)
      goto LABEL_6;
  }
  else if (a3)
  {
    goto LABEL_6;
  }
  v16 = scn_default_log();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
    C3DKeyframedAnimationEvaluate_cold_1(v16, v17, v18, v19, v20, v21, v22, v23);
LABEL_6:
  result = *(_QWORD *)(a1 + 168);
  if (result)
  {
    v25 = C3DKeyframeControllerGetDuration(result) * a4;
    v26 = *(_QWORD *)(a1 + 168);
    Additive = C3DAnimationGetAdditive(a1);
    return C3DKeyframeControllerEvaluateAtTime(v26, a2, Additive, a3, v25);
  }
  return result;
}

uint64_t C3DKeyframedAnimationSetup(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t Controller;
  uint64_t v11;
  float32x4_t v12;
  float32x4_t v13;
  unsigned int KeyCount;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  double KeyTimeAtIndex;
  double v19;
  double v20;
  float TensionAtIndex;
  float ContinuityAtIndex;
  float BiasAtIndex;
  uint64_t OutTangentsAtIndex;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  float v33;
  double v34;
  float v35;
  double v36;
  double v37;
  double v38;
  float v39;
  float v40;
  float v41;
  double v42;
  double v43;
  unsigned int v44;
  int ValueComponentCount;
  unsigned int v47;
  unsigned int v48;
  _OWORD __dst[4];
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationForKey_cold_4(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  Controller = C3DKeyframedAnimationGetController(a1);
  if (Controller)
  {
    v11 = Controller;
    if (C3DKeyframeControllerGetCalculationMode(Controller) == 1
      || C3DKeyframeControllerGetDuration(v11) == 0.0)
    {
      *(double *)v12.i64 = C3DAnimationGetDuration(a1);
      C3DKeyframeControllerSetupKeyTimesForPacedMode(v11, v12, v13);
    }
    KeyCount = C3DKeyframeControllerGetKeyCount(v11);
    if (*(_BYTE *)(v11 + 114))
    {
      v15 = KeyCount;
      ValueComponentCount = C3DKeyframeControllerGetValueComponentCount(v11);
      memset(__dst, 0, sizeof(__dst));
      if (v15)
      {
        v16 = 0;
        do
        {
          v17 = v16;
          KeyTimeAtIndex = C3DKeyframeControllerGetKeyTimeAtIndex(v11, v16++);
          if (v16 >= v15)
          {
            v19 = KeyTimeAtIndex + KeyTimeAtIndex - C3DKeyframeControllerGetKeyTimeAtIndex(v11, v17 - 1);
            if (!v17)
            {
LABEL_15:
              v20 = KeyTimeAtIndex - (C3DKeyframeControllerGetKeyTimeAtIndex(v11, v16) - KeyTimeAtIndex);
              goto LABEL_16;
            }
          }
          else
          {
            v19 = C3DKeyframeControllerGetKeyTimeAtIndex(v11, v16);
            if (!v17)
              goto LABEL_15;
          }
          v20 = C3DKeyframeControllerGetKeyTimeAtIndex(v11, v17 - 1);
LABEL_16:
          TensionAtIndex = C3DKeyframeControllerGetTensionAtIndex(v11, v17);
          ContinuityAtIndex = C3DKeyframeControllerGetContinuityAtIndex(v11, v17);
          BiasAtIndex = C3DKeyframeControllerGetBiasAtIndex(v11, v17);
          OutTangentsAtIndex = C3DKeyframeControllerGetOutTangentsAtIndex(v11, v17);
          v25 = C3DKeyframeControllerGetInTangentsAtIndex(v11, v17);
          if (ValueComponentCount)
          {
            v26 = v25;
            v27 = 0;
            v28 = KeyTimeAtIndex - v20;
            v29 = v19 - KeyTimeAtIndex;
            v30 = v19 - KeyTimeAtIndex + KeyTimeAtIndex - v20;
            v31 = (v19 - KeyTimeAtIndex) / v30;
            v32 = (KeyTimeAtIndex - v20) / v30;
            v33 = (float)(1.0 - TensionAtIndex) * (float)(ContinuityAtIndex + 1.0);
            v34 = v31 * (float)(v33 * (float)(BiasAtIndex + 1.0));
            v35 = (float)(1.0 - TensionAtIndex) * (float)(1.0 - ContinuityAtIndex);
            v36 = v31 * (float)(v35 * (float)(1.0 - BiasAtIndex));
            v37 = v32 * (float)(v35 * (float)(BiasAtIndex + 1.0));
            v38 = v32 * (float)(v33 * (float)(1.0 - BiasAtIndex));
            *(float *)&v32 = v29 * v36 + v34 * v28;
            *(float *)&v28 = v29 * v38 + v37 * v28;
            v47 = LODWORD(v28);
            v48 = LODWORD(v32);
            do
            {
              C3DKeyframeControllerGetValueAtIndex(v11, v17, __dst);
              v39 = *((float *)__dst + v27);
              if (v16 >= v15)
              {
                C3DKeyframeControllerGetValueAtIndex(v11, v17 - 1, __dst);
                v40 = v39 + (float)(v39 - *((float *)__dst + v27));
              }
              else
              {
                C3DKeyframeControllerGetValueAtIndex(v11, v16, __dst);
                v40 = *((float *)__dst + v27);
              }
              if (v17)
              {
                C3DKeyframeControllerGetValueAtIndex(v11, v17 - 1, __dst);
                v41 = *((float *)__dst + v27);
              }
              else
              {
                C3DKeyframeControllerGetValueAtIndex(v11, v16, __dst);
                v41 = v39 - (float)(*((float *)__dst + v27) - v39);
              }
              v42 = (float)(v39 - v41);
              v43 = (float)(v40 - v39);
              *(float *)&v44 = v36 * v43 + v34 * v42;
              *(_QWORD *)(OutTangentsAtIndex + 8 * v27) = __PAIR64__(v44, v48);
              *(float *)&v42 = v38 * v43 + v37 * v42;
              *(_QWORD *)(v26 + 8 * v27++) = __PAIR64__(LODWORD(v42), v47);
            }
            while (ValueComponentCount != v27);
          }
        }
        while (v16 != v15);
      }
    }
  }
  else
  {
    C3DKeyframeControllerGetKeyCount(0);
  }
  return 1;
}

float C3DKeyframedAnimationCopy(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const void *Controller;

  if (!a1 && (v4 = scn_default_log(), os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)))
  {
    C3DKeyframedAnimationCopy_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v12 = scn_default_log();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    C3DKeyframedAnimationCopy_cold_1(v12, v13, v14, v15, v16, v17, v18, v19);
LABEL_6:
  Controller = (const void *)C3DKeyframedAnimationGetController(a1);
  return C3DKeyframedAnimationSetController(a2, Controller);
}

id _C3DKeyframedAnimationCFFinalize(_QWORD *a1)
{
  const void *v2;

  v2 = (const void *)a1[21];
  if (v2)
  {
    CFRelease(v2);
    a1[21] = 0;
  }
  return _C3DAnimationCFFinalize(a1);
}

CFStringRef _C3DKeyframedAnimationCFCopyFormatDescription(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DKeyframedAnimation %p>"), a1);
}

CFStringRef _C3DKeyframedAnimationCFCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DKeyframedAnimation %p>"), a1);
}

uint64_t _C3DKeyframedAnimationInitWithPropertyList(uint64_t a1, CFTypeRef cf, const __CFDictionary *a3, uint64_t a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  CFTypeID v16;
  const void *Value;
  uint64_t result;
  const void *v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  if (!a1)
  {
    v8 = scn_default_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      _C3DGeometryFillLibraryForSerialization_cold_1(v8, v9, v10, v11, v12, v13, v14, v15);
  }
  v16 = CFGetTypeID(cf);
  if (v16 == CFDictionaryGetTypeID())
  {
    Value = CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("keyframeController"));
    if (Value)
    {
      result = (uint64_t)C3DKeyframeControllerCreateWithPropertyList((uint64_t)Value, (uint64_t)a3, a4);
      if (!result)
        return result;
      v19 = (const void *)result;
      C3DKeyframedAnimationSetController(a1, (CFTypeRef)result);
      CFRelease(v19);
    }
    else
    {
      v28 = scn_default_log();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
        _C3DKeyframedAnimationInitWithPropertyList_cold_1(v28, v29, v30, v31, v32, v33, v34, v35);
    }
    _C3DAnimationInitWithPropertyList(a1, (const __CFDictionary *)cf, a3);
    return 1;
  }
  else
  {
    v20 = scn_default_log();
    result = os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);
    if ((_DWORD)result)
    {
      _C3DKeyframedAnimationInitWithPropertyList_cold_2(v20, v21, v22, v23, v24, v25, v26, v27);
      return 0;
    }
  }
  return result;
}

__CFDictionary *_C3DKeyframedAnimationCopyPropertyList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __CFDictionary *v16;
  const void *v17;
  const void *v18;

  if (!a1)
  {
    v8 = scn_default_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      _C3DGeometryFillLibraryForSerialization_cold_1(v8, v9, v10, v11, v12, v13, v14, v15);
  }
  v16 = _C3DAnimationCopyPropertyList(a1, a2, a3, a4);
  CFDictionaryAddValue(v16, CFSTR("type"), CFSTR("keyframedAnimation"));
  v17 = *(const void **)(a1 + 168);
  if (v17)
  {
    v18 = (const void *)C3DCopyPropertyList(v17, a2, a3, a4);
    CFDictionaryAddValue(v16, CFSTR("keyframeController"), v18);
    CFRelease(v18);
  }
  return v16;
}

uint64_t SCNPassInitialize(uint64_t *a1)
{
  uint64_t InitializeBlock;

  if (!gPassContext)
    gPassContext = objc_alloc_init(SCNPassContext);
  InitializeBlock = C3DFXPassGetInitializeBlock(*a1);
  *(_QWORD *)(gPassContext + 8) = a1;
  return (*(uint64_t (**)(void))(InitializeBlock + 16))();
}

uint64_t SCNPassExecute(uint64_t *a1)
{
  uint64_t ExecuteBlock;

  if (!gPassContext)
    gPassContext = objc_alloc_init(SCNPassContext);
  ExecuteBlock = C3DFXPassGetExecuteBlock(*a1);
  *(_QWORD *)(gPassContext + 8) = a1;
  return (*(uint64_t (**)(void))(ExecuteBlock + 16))();
}

uint64_t C3DAnimationPlayerCreateWithAnimation(const void *a1)
{
  uint64_t Instance;
  const void *v3;
  CFTypeRef v4;

  if (C3DAnimationPlayerGetTypeID_onceToken != -1)
    dispatch_once(&C3DAnimationPlayerGetTypeID_onceToken, &__block_literal_global_25);
  Instance = C3DTypeCreateInstance_(C3DAnimationPlayerGetTypeID_typeID, 0x50uLL);
  if (Instance)
  {
    *(_QWORD *)(Instance + 72) = CFArrayCreateMutable(0, 1, MEMORY[0x1E0C9B378]);
    v3 = *(const void **)(Instance + 64);
    if (v3 != a1)
    {
      if (v3)
      {
        CFRelease(v3);
        *(_QWORD *)(Instance + 64) = 0;
      }
      if (a1)
        v4 = CFRetain(a1);
      else
        v4 = 0;
      *(_QWORD *)(Instance + 64) = v4;
    }
    __asm { FMOV            V0.2S, #1.0 }
    *(_QWORD *)(Instance + 80) = _D0;
    *(_BYTE *)(Instance + 88) = 1;
  }
  return Instance;
}

CFTypeRef C3DAnimationPlayerSetAnimation(uint64_t a1, CFTypeRef cf)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef result;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DAnimationPlayerSetAnimation_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  result = *(CFTypeRef *)(a1 + 64);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 64) = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *(_QWORD *)(a1 + 64) = result;
  }
  return result;
}

uint64_t C3DAnimationPlayerGetAnimation(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DAnimationPlayerSetAnimation_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 64);
}

void C3DAnimationPlayerRemoveAnimationNode(uint64_t a1, const void *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const __CFArray *v20;
  CFIndex FirstIndexOfValue;
  CFIndex v22;
  CFRange v23;

  if (!a1 && (v4 = scn_default_log(), os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)))
  {
    C3DAnimationPlayerSetAnimation_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v12 = scn_default_log();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    _C3DAnimationManagerAddAnimationNode_cold_3(v12, v13, v14, v15, v16, v17, v18, v19);
LABEL_6:
  v20 = *(const __CFArray **)(a1 + 72);
  v23.length = CFArrayGetCount(v20);
  v23.location = 0;
  FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v20, v23, a2);
  if (FirstIndexOfValue != -1)
  {
    v22 = FirstIndexOfValue;
    C3DAnimationNodeSetPlayer((uint64_t)a2, 0);
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 72), v22);
  }
}

double C3DAnimationPlayerAddAnimationNode(uint64_t a1, void *value)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AnimationManager;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double result;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DAnimationPlayerSetAnimation_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 72), value);
  C3DAnimationNodeSetPlayer((uint64_t)value, a1);
  AnimationManager = C3DAnimationNodeGetAnimationManager((uint64_t)value);
  if (!AnimationManager)
  {
    v13 = scn_default_log();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
      C3DAnimationManagerSetSystemTime_cold_1(v13, v14, v15, v16, v17, v18, v19, v20);
  }
  if (!*(_BYTE *)(a1 + 88))
    C3DAnimationManagerPlayAnimationNode(AnimationManager, (uint64_t)value);
  result = *(double *)(a1 + 80);
  *((double *)value + 6) = result;
  return result;
}

void C3DAnimationPlayerSetSpeed(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFIndex Count;
  CFIndex v13;
  CFIndex i;
  const void *ValueAtIndex;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DAnimationPlayerSetAnimation_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(float *)(a1 + 84) != a2)
  {
    *(float *)(a1 + 84) = a2;
    Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 72));
    if (Count >= 1)
    {
      v13 = Count;
      for (i = 0; i != v13; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), i);
        C3DAnimationNodeChangeSpeed((uint64_t)ValueAtIndex, a2);
      }
    }
  }
}

float C3DAnimationPlayerGetSpeed(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DAnimationPlayerSetAnimation_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 84);
}

void C3DAnimationPlayerSetWeight(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFIndex Count;
  CFIndex v13;
  CFIndex i;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DAnimationPlayerSetAnimation_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(float *)(a1 + 80) != a2)
  {
    *(float *)(a1 + 80) = a2;
    Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 72));
    if (Count >= 1)
    {
      v13 = Count;
      for (i = 0; i != v13; ++i)
        *((float *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), i) + 12) = a2;
    }
  }
}

float C3DAnimationPlayerGetWeight(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DAnimationPlayerSetAnimation_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 80);
}

void C3DAnimationPlayerSetPaused(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFIndex Count;
  CFIndex v13;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t AnimationManager;
  uint64_t v17;
  double v18;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DAnimationPlayerSetAnimation_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(unsigned __int8 *)(a1 + 88) != (_DWORD)a2)
  {
    *(_BYTE *)(a1 + 88) = a2;
    Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 72));
    if (Count >= 1)
    {
      v13 = Count;
      for (i = 0; i != v13; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), i);
        AnimationManager = C3DAnimationNodeGetAnimationManager((uint64_t)ValueAtIndex);
        if (AnimationManager)
        {
          v17 = AnimationManager;
          C3DTransactionGetAtomicTime();
          C3DAnimationManagerPauseAnimationNode(v17, (uint64_t)ValueAtIndex, a2, 0, v18);
        }
      }
    }
  }
}

uint64_t C3DAnimationPlayerGetPaused(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DAnimationPlayerSetAnimation_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(unsigned __int8 *)(a1 + 88);
}

CFIndex C3DAnimationPlayerPlay(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CFIndex result;
  CFIndex v11;
  CFIndex i;
  const void *ValueAtIndex;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DAnimationPlayerSetAnimation_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  *(_BYTE *)(a1 + 88) = 0;
  result = CFArrayGetCount(*(CFArrayRef *)(a1 + 72));
  if (result >= 1)
  {
    v11 = result;
    for (i = 0; i != v11; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), i);
      result = C3DAnimationNodeGetAnimationManager((uint64_t)ValueAtIndex);
      if (result)
        result = C3DAnimationManagerPlayAnimationNode(result, (uint64_t)ValueAtIndex);
    }
  }
  return result;
}

CFIndex C3DAnimationPlayerStop(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CFIndex result;
  CFIndex v11;
  CFIndex i;
  const void *ValueAtIndex;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DAnimationPlayerSetAnimation_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  *(_BYTE *)(a1 + 88) = 1;
  result = CFArrayGetCount(*(CFArrayRef *)(a1 + 72));
  if (result >= 1)
  {
    v11 = result;
    for (i = 0; i != v11; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), i);
      result = C3DAnimationNodeGetAnimationManager((uint64_t)ValueAtIndex);
      if (result)
        result = C3DAnimationManagerStopAnimationNode(result, (uint64_t)ValueAtIndex, 0.0);
    }
  }
  return result;
}

CFIndex C3DAnimationPlayerStopWithDuration(uint64_t a1, double a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFIndex result;
  CFIndex v13;
  CFIndex i;
  const void *ValueAtIndex;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DAnimationPlayerSetAnimation_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(_BYTE *)(a1 + 88) = 1;
  result = CFArrayGetCount(*(CFArrayRef *)(a1 + 72));
  if (result >= 1)
  {
    v13 = result;
    for (i = 0; i != v13; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), i);
      result = C3DAnimationNodeGetAnimationManager((uint64_t)ValueAtIndex);
      if (result)
        result = C3DAnimationManagerStopAnimationNode(result, (uint64_t)ValueAtIndex, a2);
    }
  }
  return result;
}

void _C3DAnimationPlayerCFFinalize(uint64_t a1)
{
  CFIndex Count;
  CFIndex v3;
  CFIndex i;
  const void *ValueAtIndex;
  const void *v6;
  const void *v7;

  Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 72));
  if (Count >= 1)
  {
    v3 = Count;
    for (i = 0; i != v3; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), i);
      C3DAnimationNodeSetPlayer((uint64_t)ValueAtIndex, 0);
    }
  }
  v6 = *(const void **)(a1 + 64);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(a1 + 64) = 0;
  }
  v7 = *(const void **)(a1 + 72);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(a1 + 72) = 0;
  }
}

CFStringRef _C3DAnimationPlayerCFCopyFormatDescription(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DAnimationPlayer %p>"), a1);
}

CFStringRef _C3DAnimationPlayerCFCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DAnimationPlayer %p>"), a1);
}

void _C3DAnimationPlayerSetValue(uint64_t a1, uint64_t a2, float *a3)
{
  if (a1 + 84 == a2)
  {
    C3DAnimationPlayerSetSpeed(a1, *a3);
  }
  else if (a1 + 80 == a2)
  {
    C3DAnimationPlayerSetWeight(a1, *a3);
  }
}

uint64_t C3DAnimationNodeCreateWithAnimation(const void *a1)
{
  uint64_t Instance;
  uint64_t v3;

  if (C3DAnimationNodeGetTypeID_onceToken != -1)
    dispatch_once(&C3DAnimationNodeGetTypeID_onceToken, &__block_literal_global_26);
  Instance = C3DTypeCreateInstance_(C3DAnimationNodeGetTypeID_typeID, 0xD0uLL);
  v3 = Instance;
  if (Instance)
    _C3DAnimationNodeInitializeWithAnimation(Instance, a1);
  return v3;
}

float _C3DAnimationNodeInitializeWithAnimation(uint64_t a1, const void *a2)
{
  int v4;
  float Duration;
  double v11;
  float result;

  *(_DWORD *)(a1 + 60) = 2139095039;
  *(_DWORD *)(a1 + 72) = -1082130432;
  v4 = *(_DWORD *)(a1 + 121);
  *(_QWORD *)(a1 + 152) = -1;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(a1 + 48) = _D0;
  *(_DWORD *)(a1 + 121) = v4 | 0x24;
  C3DAnimationNodeSetAnimation(a1, a2);
  Duration = C3DAnimationGetDuration((uint64_t)a2);
  if (Duration == 0.0)
  {
    v11 = C3DTransactionGetDuration();
    if (v11 == 0.0)
      v11 = 0.25;
  }
  else
  {
    v11 = Duration;
  }
  result = v11;
  *(float *)(a1 + 76) = result;
  return result;
}

CFTypeRef C3DAnimationNodeSetAnimation(uint64_t a1, CFTypeRef cf)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef result;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationNode_cold_3(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  result = *(CFTypeRef *)(a1 + 16);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *(_QWORD *)(a1 + 16) = result;
  }
  return result;
}

uint64_t C3DAnimationNodeGetAnimation(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationNode_cold_3(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 16);
}

uint64_t C3DAnimationNodeGetOwner(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationForKey_cold_4(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 144);
}

void C3DAnimationNodeSetOwner(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationForKey_cold_4(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(_QWORD *)(a1 + 144) = a2;
}

void C3DAnimationNodeSetStartTime(uint64_t a1, double a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationNode_cold_3(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(double *)(a1 + 80) = a2;
}

void C3DAnimationNodeRestart(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationNode_cold_3(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  *(_DWORD *)(a1 + 121) |= 2u;
}

double C3DAnimationNodeGetStartTime(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationNode_cold_3(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(double *)(a1 + 80);
}

void C3DAnimationNodeTimeJump(uint64_t a1, double a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationNode_cold_3(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if ((*(_BYTE *)(a1 + 121) & 1) != 0 && (*(_WORD *)(*(_QWORD *)(a1 + 16) + 84) & 8) == 0)
    *(double *)(a1 + 80) = *(double *)(a1 + 80) + a2;
}

uint64_t C3DAnimationNodeSetAnimationManager(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 184) = a2;
  return result;
}

uint64_t C3DAnimationNodeGetAnimationManager(uint64_t a1)
{
  return *(_QWORD *)(a1 + 184);
}

uint64_t C3DAnimationNodeSetPlayer(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 192) = a2;
  return result;
}

uint64_t C3DAnimationNodeGetPlayer(uint64_t a1)
{
  return *(_QWORD *)(a1 + 192);
}

CFTypeRef C3DAnimationNodeSetKey(uint64_t a1, CFTypeRef cf)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef result;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationForKey_cold_4(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  result = *(CFTypeRef *)(a1 + 136);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 136) = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *(_QWORD *)(a1 + 136) = result;
  }
  return result;
}

uint64_t C3DAnimationNodeGetCompletionCallbacks(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationForKey_cold_4(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return a1 + 208;
}

CFTypeRef C3DAnimationNodeSetCompletionItem(uint64_t a1, CFTypeRef cf)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef result;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationForKey_cold_4(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  result = *(CFTypeRef *)(a1 + 200);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 200) = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *(_QWORD *)(a1 + 200) = result;
  }
  return result;
}

uint64_t C3DAnimationNodeGetCompletionItem(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationForKey_cold_4(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 200);
}

uint64_t C3DAnimationNodeGetParent(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationNode_cold_3(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 40);
}

void C3DAnimationNodeAddChild(uint64_t a1, void *value)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __CFArray *Mutable;

  if (!a1 && (v4 = scn_default_log(), os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)))
  {
    _C3DAnimationManagerAddAnimationNode_cold_3(v4, v5, v6, v7, v8, v9, v10, v11);
    if (value)
      goto LABEL_6;
  }
  else if (value)
  {
    goto LABEL_6;
  }
  v12 = scn_default_log();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    C3DAnimationNodeAddChild_cold_1(v12, v13, v14, v15, v16, v17, v18, v19);
LABEL_6:
  Mutable = *(__CFArray **)(a1 + 32);
  if (!Mutable)
  {
    Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    *(_QWORD *)(a1 + 32) = Mutable;
  }
  CFArrayAppendValue(Mutable, value);
  *((_QWORD *)value + 5) = a1;
}

const __CFArray *C3DAnimationNodeGetChildCount(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const __CFArray *result;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationNode_cold_3(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  result = *(const __CFArray **)(a1 + 32);
  if (result)
    return (const __CFArray *)CFArrayGetCount(result);
  return result;
}

const __CFArray *C3DAnimationNodeGetChildAtIndex(uint64_t a1, CFIndex idx)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const __CFArray *result;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationNode_cold_3(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  result = *(const __CFArray **)(a1 + 32);
  if (result)
    return (const __CFArray *)CFArrayGetValueAtIndex(result, idx);
  return result;
}

void C3DAnimationNodeSetRepeatStep(uint64_t a1, unsigned int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int Type;
  uint64_t v16;
  void *Bytes;
  unsigned int v18;

  if (!*(_QWORD *)(a1 + 112))
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DAnimationNodeSetRepeatStep_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = *(_QWORD *)(a1 + 112);
  v13 = *(_DWORD *)v12;
  if (*(_DWORD *)v12 != a2)
  {
    v14 = *(_QWORD *)(v12 + 8);
    if (!v14)
    {
      Type = C3DValueGetType(*(_QWORD *)(v12 + 16));
      v14 = C3DValueCreate(Type, 1);
      v16 = *(_QWORD *)(a1 + 112);
      *(_QWORD *)(v16 + 8) = v14;
      v13 = *(_DWORD *)v16;
    }
    if (v13 - 1 >= a2)
    {
      Bytes = (void *)C3DValueGetBytes(v14);
      C3DValueCopyTo(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 16), Bytes);
      v13 = 1;
    }
    v18 = a2 - v13;
    if (a2 > v13)
    {
      do
      {
        C3DValueConcat(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8), *(_QWORD *)(*(_QWORD *)(a1 + 112) + 16), *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8));
        --v18;
      }
      while (v18);
    }
    **(_DWORD **)(a1 + 112) = a2;
  }
}

double C3DAnimationNodeGetContentTimeForTime(uint64_t a1, BOOL *a2, _BYTE *a3, BOOL *a4, double a5)
{
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  double v20;
  int v21;
  uint64_t Animation;
  float Duration;
  double v24;
  double PauseTime;
  double v26;
  float v27;
  float v28;
  double TimeOffset;
  double v30;
  unsigned int v31;
  int v32;
  double v33;
  char FillModeMask;
  float v35;
  _BOOL4 v36;
  __int16 v37;
  float v38;
  double v39;
  double v40;
  int v41;
  double v42;
  double v44;
  double v45;
  double v46;
  double v47;
  _BOOL4 v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  uint64_t TimingFunction;
  double v57;
  float v58;
  unsigned int v59;
  float v60;
  int v61;
  unsigned __int8 v63;
  __int16 v64;

  if (!a1)
  {
    v10 = scn_default_log();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationNode_cold_3(v10, v11, v12, v13, v14, v15, v16, v17);
  }
  if ((*(_BYTE *)(a1 + 123) & 0x60) != 0)
    a5 = *(double *)(a1 + 128);
  if (a5 != *(float *)(a1 + 60))
  {
    v18 = a5;
    *(float *)(a1 + 60) = v18;
    v64 = 0;
    v63 = 1;
    v19 = *(_QWORD *)(a1 + 40);
    if (v19)
    {
      C3DAnimationNodeGetContentTimeForTime(v19, (char *)&v64 + 1, &v64, &v63, a5);
      v21 = v63;
      if (!v63)
      {
        v31 = 0;
        v32 = 0;
        v30 = 0.0;
        v33 = 0.0;
        goto LABEL_99;
      }
      a5 = v20;
    }
    Animation = C3DAnimationNodeGetAnimation(a1);
    Duration = C3DAnimationGetDuration(Animation);
    v24 = Duration;
    if (*(_QWORD *)(a1 + 40) || (*(_WORD *)(Animation + 84) & 8) != 0)
      PauseTime = C3DAnimationNodeGetPauseTime(Animation);
    else
      PauseTime = C3DAnimationNodeGetStartTime(a1);
    v26 = PauseTime;
    v27 = *(float *)(a1 + 52);
    v28 = v27 * C3DAnimationGetSpeed(Animation);
    TimeOffset = C3DAnimationGetTimeOffset(Animation);
    if (Duration <= 0.0)
      v24 = 1.0;
    if (v28 < 0.0)
      HIBYTE(v64) ^= 1u;
    v30 = a5 - v26;
    if (Duration == 0.0)
    {
      v31 = 0;
      v32 = 0;
      v33 = 0.0;
    }
    else
    {
      if (v28 == 0.0)
        v33 = *(float *)(a1 + 64);
      else
        v33 = v30 * fabsf(v28) / v24;
      v30 = v33;
      if (v33 < 0.0)
      {
        FillModeMask = C3DAnimationGetFillModeMask(Animation);
        v30 = 0.0;
        if ((FillModeMask & 2) == 0)
        {
          v31 = 0;
          v32 = 0;
          v21 = 0;
          goto LABEL_99;
        }
      }
      v35 = *(float *)(Animation + 76);
      v36 = v35 == 3.4028e38 || v35 == INFINITY;
      v37 = *(_WORD *)(Animation + 84);
      if ((v37 & 1) != 0 || (v31 = 0, v38 = 1.0, v35 != 0.0) && v35 != 1.0)
      {
        if (v35 == 0.0)
          v38 = 1.0;
        else
          v38 = *(float *)(Animation + 76);
        if (v36)
        {
          v39 = v33 * 0.5;
          if ((v37 & 1) == 0)
            v39 = v33;
          v31 = (int)v39;
        }
        else
        {
          if ((v37 & 1) != 0)
            v38 = v38 + v38;
          v40 = v33 * 0.5;
          if ((v37 & 1) == 0)
            v40 = v33;
          v31 = (int)v40;
          v33 = v33 / v38;
        }
      }
      v41 = !v36;
      if (v33 < 1.0)
        v41 = 0;
      if ((_BYTE)v64)
        v32 = 1;
      else
        v32 = v41;
      v42 = *(double *)(a1 + 88);
      if (v42 != 0.0 && v42 + *(double *)(a1 + 104) < a5)
        v32 = 1;
      if (v33 > 1.0 && v32 != 0)
      {
        if (((v37 & 0x20) == 0 || (*(_BYTE *)(a1 + 121) & 0x40) != 0 || *(_QWORD *)(a1 + 40))
          && (C3DAnimationGetFillModeMask(Animation) & 1) == 0)
        {
          v21 = 0;
          v32 = 1;
          v30 = 0.0;
          goto LABEL_99;
        }
        v30 = v38;
        v33 = 1.0;
        if (v36)
          v30 = 1.0;
      }
      v44 = TimeOffset / v24;
      if (v28 < 0.0)
        v44 = -(TimeOffset / v24);
      if (TimeOffset == 0.0)
        v45 = v30;
      else
        v45 = v44 + v30;
      if (TimeOffset == 0.0)
        v46 = 0.0;
      else
        v46 = v44;
      if (v45 <= 1.0)
      {
        v47 = v45;
        if (v45 < 0.0)
          v47 = fmod(v45, 1.0) + 1.0;
      }
      else
      {
        v47 = fmod(v45, 1.0);
      }
      if ((*(_WORD *)(Animation + 84) & 1) != 0)
      {
        if (v33 < 1.0 || v36)
        {
          v49 = v45 < 0.0;
          v50 = (double)(int)v45;
          v51 = 1.0 - v45;
        }
        else
        {
          v52 = v46 + v38;
          v49 = v52 > 0.0;
          v51 = (double)(int)v52;
          v50 = 1.0 - v52;
        }
        v53 = v49 ? v51 : v50;
        if (v28 < 0.0 == (((int)v53 & 1) == 0))
        {
          HIBYTE(v64) ^= 1u;
          v47 = 1.0 - v47;
        }
      }
      if (v28 >= 0.0)
        v54 = v47;
      else
        v54 = 1.0 - v47;
      TimingFunction = C3DAnimationGetTimingFunction(Animation);
      if (TimingFunction)
      {
        if (v54 >= 0.0 && v54 <= 1.0)
        {
          C3DTimingFunctionSolve(TimingFunction, v54, Duration);
          v54 = v57;
        }
      }
      v30 = v24 * v54;
    }
    v21 = 128;
LABEL_99:
    v58 = v33;
    v59 = *(_DWORD *)(a1 + 121) & 0xFFFFFC7F | (HIBYTE(v64) << 9);
    v60 = v30;
    *(float *)(a1 + 64) = v58;
    *(float *)(a1 + 68) = v60;
    if (v32)
    {
      if (*(_QWORD *)(a1 + 40))
        v61 = v64 << 8;
      else
        v61 = 256;
    }
    else
    {
      v61 = 0;
    }
    *(_DWORD *)(a1 + 121) = v59 | v21 | v61;
    if (*(_QWORD *)(a1 + 112))
      C3DAnimationNodeSetRepeatStep(a1, v31);
  }
  if (a2)
    *a2 = (*(_DWORD *)(a1 + 121) & 0x200) != 0;
  if (a3)
    *a3 = *(_BYTE *)(a1 + 122) & 1;
  if (a4)
    *a4 = (*(_DWORD *)(a1 + 121) & 0x80) != 0;
  return *(float *)(a1 + 68);
}

float C3DAnimationNodeGetWeightAtTime(uint64_t a1, double a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double WeightAtTime;
  float *Animation;
  float *v14;
  double v15;
  float v16;
  float v17;
  float v18;
  float Duration;
  float v21;
  float v22;
  float v24;
  float v25;
  BOOL v26;
  float v27;
  double v29;
  double v30;
  float v31;
  int v32;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationNode_cold_3(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(_QWORD *)(a1 + 40))
    WeightAtTime = C3DAnimationNodeGetWeightAtTime(a2);
  else
    WeightAtTime = 1.0;
  Animation = (float *)C3DAnimationNodeGetAnimation(a1);
  v14 = Animation;
  v15 = WeightAtTime * (float)(Animation[26] * *(float *)(a1 + 48));
  if (Animation[27] != 0.0 || Animation[28] != 0.0)
  {
    v16 = *(float *)(a1 + 64);
    if (v16 < 0.0)
      v16 = 0.0;
    v17 = fminf(v16, 1.0);
    v18 = Animation[19];
    if (v18 == INFINITY || v18 == 3.4028e38)
      Duration = C3DAnimationGetDuration((uint64_t)Animation);
    else
      Duration = C3DAnimationGetTotalDuration((uint64_t)Animation);
    v21 = v14[27];
    v22 = v17 * Duration;
    if (v21 != 0.0 && v22 < v21)
      v15 = v15 * (v22 / v21);
    v24 = v14[28];
    if (v24 != 0.0)
    {
      v25 = v14[19];
      v26 = v25 == INFINITY || v25 == 3.4028e38;
      if (!v26 && ((_WORD)v14[21] & 0x50) != 0x40)
      {
        v27 = (float)(1.0 - v17) * Duration;
        if (v27 >= 0.0 && v27 < v24)
          v15 = v15 * (v27 / v24);
      }
    }
  }
  v29 = *(double *)(a1 + 104);
  if (v29 != 0.0)
  {
    v30 = 1.0 - (a2 - *(double *)(a1 + 96)) / v29;
    if (v30 <= 0.0)
      v30 = 0.0;
    v31 = v30;
    v15 = v15 * v31;
    if (v31 == 0.0)
    {
      v32 = *(_DWORD *)(a1 + 121);
      if ((v32 & 8) != 0)
        *(_DWORD *)(a1 + 121) = v32 & 0xFFFFFFD3 | 4;
    }
  }
  return v15;
}

uint64_t C3DAnimationNodeGetRemovedOnCompletion(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationNode_cold_3(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  result = C3DAnimationGetRemoveOnCompletion(*(_QWORD *)(a1 + 16));
  if ((_DWORD)result)
  {
    if (C3DAnimationNodeGetParent(a1))
      return C3DAnimationNodeGetRemovedOnCompletion();
    else
      return 1;
  }
  return result;
}

void C3DAnimationNodeChangeSpeed(uint64_t a1, float a2)
{
  float v3;
  uint64_t v5;
  float v6;
  float v7;
  double v8;
  float v9;
  double v10;

  v3 = *(float *)(a1 + 52);
  if (v3 != a2)
  {
    if ((*(_BYTE *)(a1 + 121) & 1) != 0)
    {
      v5 = *(_QWORD *)(a1 + 16);
      v6 = *(float *)(v5 + 80);
      v7 = v3 * v6;
      if (C3DAnimationGetIsSceneTimeBased(v5))
        v8 = *(float *)(a1 + 60);
      else
        C3DTransactionGetAtomicTime();
      v9 = v6 * a2;
      if (v7 == 0.0)
        v10 = (float)(*(float *)(a1 + 64) * *(float *)(a1 + 76));
      else
        v10 = (v8 - *(double *)(a1 + 80)) * v7;
      if (v9 != 0.0)
        *(double *)(a1 + 80) = -(v10 / v9 - v8);
    }
    *(float *)(a1 + 52) = a2;
  }
}

CFTypeRef C3DAnimationNodeSetTarget(uint64_t a1, CFTypeRef cf)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a1 + 24);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 24) = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *(_QWORD *)(a1 + 24) = result;
  }
  return result;
}

BOOL C3DAnimationNodeGetPausedOrPausedByScene(uint64_t a1)
{
  return (*(_BYTE *)(a1 + 123) & 0x60) != 0;
}

uint64_t C3DAnimationNodeGetPaused(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationForKey_cold_4(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return (*(unsigned __int8 *)(a1 + 123) >> 5) & 1;
}

void C3DAnimationNodeSetPaused(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationForKey_cold_4(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (a2)
    v12 = 0x200000;
  else
    v12 = 0;
  *(_DWORD *)(a1 + 121) = *(_DWORD *)(a1 + 121) & 0xFFDFFFFF | v12;
}

void C3DAnimationNodeSetPausedByScene(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationForKey_cold_4(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (a2)
    v12 = 0x400000;
  else
    v12 = 0;
  *(_DWORD *)(a1 + 121) = *(_DWORD *)(a1 + 121) & 0xFFBFFFFF | v12;
}

uint64_t C3DAnimationNodeGetPausedByScene(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 123) >> 6) & 1;
}

double C3DAnimationNodeGetPauseTime(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationForKey_cold_4(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(double *)(a1 + 128);
}

void C3DAnimationNodeSetPauseTime(uint64_t a1, double a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationForKey_cold_4(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(double *)(a1 + 128) = a2;
}

uint64_t C3DAnimationNodeCreateWithAnimationGroupAndAddToAnimationManager(uint64_t a1, const void *a2, float32x4_t *a3, const void *a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t IsSceneTimeBased;
  uint64_t SubAnimationNodes;

  if (!a1 && (v8 = scn_default_log(), os_log_type_enabled(v8, OS_LOG_TYPE_FAULT)))
  {
    _C3DAnimationManagerAddAnimationNode_cold_4(v8, v9, v10, v11, v12, v13, v14, v15);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v16 = scn_default_log();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
    C3DAnimationNodeCreateWithAnimationGroupAndAddToAnimationManager_cold_1(v16, v17, v18, v19, v20, v21, v22, v23);
LABEL_6:
  IsSceneTimeBased = C3DAnimationGetIsSceneTimeBased((uint64_t)a2);
  SubAnimationNodes = _createSubAnimationNodes(a1, a2, a3, IsSceneTimeBased);
  C3DAnimationNodeSetKey(SubAnimationNodes, a4);
  return SubAnimationNodes;
}

uint64_t _createSubAnimationNodes(uint64_t a1, const void *a2, float32x4_t *a3, uint64_t a4)
{
  uint64_t v8;
  CFIndex AnimationCount;
  CFIndex v10;
  CFIndex i;
  const void *AnimationAtIndex;
  void *SubAnimationNodes;
  const void *v14;
  const void *v15;
  void *v16;

  v8 = C3DAnimationNodeCreateWithAnimation(a2);
  AnimationCount = C3DAnimationGroupGetAnimationCount((uint64_t)a2);
  if (AnimationCount >= 1)
  {
    v10 = AnimationCount;
    for (i = 0; v10 != i; ++i)
    {
      AnimationAtIndex = C3DAnimationGroupGetAnimationAtIndex((uint64_t)a2, i);
      if (C3DAnimationIsGroup(AnimationAtIndex))
      {
        SubAnimationNodes = (void *)_createSubAnimationNodes(a1, AnimationAtIndex, a3, a4);
        if (SubAnimationNodes)
        {
          v14 = SubAnimationNodes;
          C3DAnimationNodeAddChild(v8, SubAnimationNodes);
LABEL_10:
          CFRelease(v14);
        }
      }
      else
      {
        v15 = C3DAnimationCopyTarget((uint64_t)AnimationAtIndex, a3);
        v14 = v15;
        if (AnimationAtIndex)
        {
          v16 = (void *)C3DAnimationNodeCreateWithAnimation(AnimationAtIndex);
          C3DAnimationSetIsSceneTimeBased((uint64_t)AnimationAtIndex, a4);
          C3DAnimationNodeAddChild(v8, v16);
          CFRelease(v16);
          if (v14)
          {
            _C3DAnimationManagerAddAnimationNode(a1, (uint64_t)v16, v14);
            goto LABEL_10;
          }
        }
        else if (v15)
        {
          goto LABEL_10;
        }
      }
    }
  }
  return v8;
}

uint64_t C3DAnimationNodeCreateWithAnimationCluster(uint64_t a1, const void *a2, uint64_t a3, const void *a4)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (!a1 && (v6 = scn_default_log(), os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)))
  {
    _C3DAnimationManagerAddAnimationNode_cold_4(v6, v7, v8, v9, v10, v11, v12, v13);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v14 = scn_default_log();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    C3DAnimationNodeCreateWithAnimationCluster_cold_1(v14, v15, v16, v17, v18, v19, v20, v21);
LABEL_6:
  v22 = C3DAnimationClusterNodeCreateWithAnimation(a2);
  C3DAnimationNodeSetKey(v22, a4);
  return v22;
}

uint64_t C3DAnimationClusterNodeCreateWithAnimation(const void *a1)
{
  uint64_t Instance;

  if (C3DAnimationClusterNodeGetTypeID_onceToken != -1)
    dispatch_once(&C3DAnimationClusterNodeGetTypeID_onceToken, &__block_literal_global_10);
  Instance = C3DTypeCreateInstance_(C3DAnimationClusterNodeGetTypeID_typeID, 0xD8uLL);
  _C3DAnimationNodeInitializeWithAnimation(Instance, a1);
  return Instance;
}

uint64_t C3DAnimationNodeCreateWithAnimationAndAddToAnimationManager(uint64_t a1, const void *a2, const void *a3, const void *a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  if (!a1 && (v8 = scn_default_log(), os_log_type_enabled(v8, OS_LOG_TYPE_FAULT)))
  {
    _C3DAnimationManagerAddAnimationNode_cold_4(v8, v9, v10, v11, v12, v13, v14, v15);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v16 = scn_default_log();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
    _C3DAnimationManagerAddAnimationForKey_cold_4(v16, v17, v18, v19, v20, v21, v22, v23);
LABEL_6:
  if (!a3)
  {
    v24 = scn_default_log();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_FAULT))
      C3DAnimationManagerApplyAnimationsForTarget_cold_1(v24, v25, v26, v27, v28, v29, v30, v31);
  }
  v32 = C3DAnimationNodeCreateWithAnimation(a2);
  C3DAnimationNodeSetKey(v32, a4);
  _C3DAnimationManagerAddAnimationNode(a1, v32, a3);
  return v32;
}

uint64_t C3DAnimationClusterNodeGetTypeID()
{
  if (C3DAnimationClusterNodeGetTypeID_onceToken != -1)
    dispatch_once(&C3DAnimationClusterNodeGetTypeID_onceToken, &__block_literal_global_10);
  return C3DAnimationClusterNodeGetTypeID_typeID;
}

void _C3DAnimationNodeCFFinalize(uint64_t a1)
{
  const __CFArray *v2;
  CFIndex Count;
  CFIndex v4;
  CFIndex i;
  void (*v6)(uint64_t);
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  CFTypeRef *v19;
  const void *v20;

  v2 = *(const __CFArray **)(a1 + 32);
  if (v2)
  {
    Count = CFArrayGetCount(v2);
    if (Count >= 1)
    {
      v4 = Count;
      for (i = 0; i != v4; ++i)
        *((_QWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 32), i) + 5) = 0;
    }
    CFRelease(*(CFTypeRef *)(a1 + 32));
  }
  if (*(_QWORD *)(a1 + 200))
  {
    v6 = *(void (**)(uint64_t))(a1 + 216);
    if (!v6 || (v6(a1), *(_QWORD *)(a1 + 200)))
    {
      v7 = scn_default_log();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
        _C3DAnimationNodeCFFinalize_cold_1(v7, v8, v9, v10, v11, v12, v13, v14);
      v15 = *(const void **)(a1 + 200);
      if (v15)
      {
        CFRelease(v15);
        *(_QWORD *)(a1 + 200) = 0;
      }
    }
  }
  v16 = *(const void **)(a1 + 16);
  if (v16)
  {
    CFRelease(v16);
    *(_QWORD *)(a1 + 16) = 0;
  }
  v17 = *(const void **)(a1 + 136);
  if (v17)
  {
    CFRelease(v17);
    *(_QWORD *)(a1 + 136) = 0;
  }
  v18 = *(const void **)(a1 + 24);
  if (v18)
  {
    CFRelease(v18);
    *(_QWORD *)(a1 + 24) = 0;
  }
  v19 = *(CFTypeRef **)(a1 + 112);
  if (v19)
  {
    if (v19[1])
    {
      CFRelease(v19[1]);
      v19 = *(CFTypeRef **)(a1 + 112);
      v19[1] = 0;
    }
    if (v19[3])
    {
      CFRelease(v19[3]);
      v19 = *(CFTypeRef **)(a1 + 112);
      v19[3] = 0;
    }
    if (v19[2])
    {
      CFRelease(v19[2]);
      v19 = *(CFTypeRef **)(a1 + 112);
      v19[2] = 0;
    }
  }
  free(v19);
  v20 = *(const void **)(a1 + 176);
  if (v20)
  {
    CFRelease(v20);
    *(_QWORD *)(a1 + 176) = 0;
  }
}

CFStringRef _C3DAnimationNodeCFCopyFormatDescription(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DAnimationNode %p>"), a1);
}

CFStringRef _C3DAnimationNodeCFCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DAnimationNode %p>"), a1);
}

uint64_t _C3DAnimationNodeInitWithPropertyList()
{
  return 1;
}

const void *_C3DAnimationNodeCopyPropertyList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const void *result;

  result = (const void *)C3DAnimationNodeGetAnimation(a1);
  if (result)
    return (const void *)C3DCopyPropertyList(result, a2, a3, a4);
  return result;
}

uint64_t _C3DAnimationNodeFinalizeDeserialization()
{
  return 1;
}

void _C3DAnimationNodeSetValue(uint64_t a1, void *__dst, float *__src, size_t __n)
{
  if ((void *)(a1 + 52) == __dst)
    C3DAnimationNodeChangeSpeed(a1, *__src);
  else
    memcpy(__dst, __src, __n);
}

void _C3DAnimationClusterNodeCFFinalize(uint64_t a1)
{
  _C3DAnimationNodeCFFinalize(a1);
  free(*(void **)(a1 + 224));
}

CFStringRef _C3DAnimationClusterNodeCFCopyFormatDescription(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DAnimationClusterNode %p>"), a1);
}

CFStringRef _C3DAnimationClusterNodeCFCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DAnimationClusterNode %p>"), a1);
}

void _C3DAnimationClusterNodeSetValue(uint64_t a1, void *__dst, float *__src, size_t __n)
{
  if ((void *)(a1 + 52) == __dst)
    C3DAnimationNodeChangeSpeed(a1, *__src);
  else
    memcpy(__dst, __src, __n);
}

id C3DFXContextGetCIContext(uint64_t a1, uint64_t a2)
{
  id result;
  uint64_t RenderContext;
  void *v6;
  uint64_t RendererContextGL;

  result = *(id *)(a1 + 264);
  if (!result)
  {
    RenderContext = C3DEngineContextGetRenderContext(a2);
    if (RenderContext)
    {
      v6 = (void *)objc_msgSend(MEMORY[0x1E0C9DD90], "contextWithMTLDevice:", -[SCNMTLRenderContext device](RenderContext));
    }
    else
    {
      RendererContextGL = C3DEngineContextGetRendererContextGL(a2);
      v6 = (void *)objc_msgSend(MEMORY[0x1E0C9DD90], "contextWithEAGLContext:", C3DRendererContextGetGLContext(RendererContextGL));
    }
    result = v6;
    *(_QWORD *)(a1 + 264) = result;
  }
  return result;
}

uint64_t _getCIFilterParameterType(void *a1, CFStringRef theString, _QWORD *a3, _QWORD *a4)
{
  __CFString *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  __CFString *v14;
  uint64_t v15;
  uint64_t result;
  const void *v17;
  const void *v18;
  CFTypeRef v19;
  CFTypeRef v20;
  void *v21;
  void *v22;
  void *v23;
  BOOL v24;
  unsigned int v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[128];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v7 = (__CFString *)C3DCreatePathComponentsFromString(theString);
  if (objc_msgSend(a1, "count") && -[__CFString count](v7, "count"))
  {
    if (-[__CFString count](v7, "count") == 2)
    {
      v8 = -[__CFString objectAtIndex:](v7, "objectAtIndex:", 0);
      v27 = 0u;
      v28 = 0u;
      v29 = 0u;
      v30 = 0u;
      v9 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v27, v31, 16);
      if (v9)
      {
        v10 = v9;
        v11 = *(_QWORD *)v28;
LABEL_6:
        v12 = 0;
        while (1)
        {
          if (*(_QWORD *)v28 != v11)
            objc_enumerationMutation(a1);
          v13 = *(void **)(*((_QWORD *)&v27 + 1) + 8 * v12);
          if ((objc_msgSend((id)objc_msgSend(v13, "name"), "isEqualToString:", v8) & 1) != 0)
            break;
          if (v10 == ++v12)
          {
            v10 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v27, v31, 16);
            if (v10)
              goto LABEL_6;
            goto LABEL_12;
          }
        }
      }
      else
      {
LABEL_12:
        v13 = 0;
      }
      v14 = v7;
      v15 = 1;
    }
    else
    {
      v13 = (void *)objc_msgSend(a1, "objectAtIndex:", 0);
      v14 = v7;
      v15 = 0;
    }
    v17 = (const void *)-[__CFString objectAtIndex:](v14, "objectAtIndex:", v15);
    v18 = v17;
    if (v17)
      v19 = CFRetain(v17);
    else
      v19 = 0;
    *a4 = v19;
    if (v13)
      v20 = CFRetain(v13);
    else
      v20 = 0;
    *a3 = v20;
    CFRelease(v7);
    result = objc_msgSend(v13, "attributes");
    if (result)
    {
      result = objc_msgSend((id)objc_msgSend(v13, "attributes"), "objectForKey:", v18);
      if (result)
      {
        v21 = (void *)result;
        v22 = (void *)objc_msgSend((id)result, "objectForKey:", *MEMORY[0x1E0C9DE68]);
        if (v22)
        {
          v23 = v22;
          if ((objc_msgSend(v22, "isEqualToString:", *MEMORY[0x1E0C9DED8]) & 1) != 0
            || (objc_msgSend(v23, "isEqualToString:", *MEMORY[0x1E0C9DED0]) & 1) != 0
            || (objc_msgSend(v23, "isEqualToString:", *MEMORY[0x1E0C9DE90]) & 1) != 0
            || (objc_msgSend(v23, "isEqualToString:", *MEMORY[0x1E0C9DE70]) & 1) != 0)
          {
            return 6;
          }
          if ((objc_msgSend(v23, "isEqualToString:", *MEMORY[0x1E0C9DE78]) & 1) != 0)
            return 3;
          if ((objc_msgSend(v23, "isEqualToString:", *MEMORY[0x1E0C9DEA0]) & 1) != 0
            || (objc_msgSend(v23, "isEqualToString:", *MEMORY[0x1E0C9DE88]) & 1) != 0)
          {
            return 2;
          }
          if ((objc_msgSend(v23, "isEqualToString:", *MEMORY[0x1E0C9DEB8]) & 1) != 0
            || (objc_msgSend(v23, "isEqualToString:", *MEMORY[0x1E0C9DEA8]) & 1) != 0)
          {
            return 8;
          }
          v26 = *MEMORY[0x1E0C9DEC0];
          if ((objc_msgSend(v23, "isEqualToString:", *MEMORY[0x1E0C9DEC0]) & 1) != 0
            || (objc_msgSend(v23, "isEqualToString:", v26) & 1) != 0)
          {
            return 9;
          }
          v24 = objc_msgSend(v23, "isEqualToString:", *MEMORY[0x1E0C9DEC8]) == 0;
          v25 = 10;
        }
        else
        {
          v24 = objc_msgSend((id)objc_msgSend(v21, "objectForKey:", *MEMORY[0x1E0C9DE08]), "isEqualToString:", CFSTR("NSNumber")) == 0;
          v25 = 6;
        }
        if (v24)
          return 0;
        else
          return v25;
      }
    }
  }
  else
  {
    CFRelease(v7);
    return 0;
  }
  return result;
}

float32x4_t _getCIFilterParameterValue(void *a1, uint64_t a2, _DWORD *a3, int a4)
{
  void *v6;
  void *v7;
  float32x4_t result;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  float64x2_t v18;
  double v19;
  float64x2_t v20;
  float64_t v21;
  __int128 v22;
  __int128 v23;
  double v24;
  double v25;
  double v26;
  float64x2_t v27;
  float64_t v28;
  float64x2_t v29;
  float64_t v30;
  float64_t v31;
  float64_t v32;
  float64_t v33;
  __int128 v34;
  float64_t v35;

  v6 = (void *)objc_msgSend(a1, "valueForKey:", a2);
  v7 = v6;
  switch(a4)
  {
    case 2:
      *a3 = objc_msgSend(v6, "intValue");
      break;
    case 3:
      *(_BYTE *)a3 = objc_msgSend(v6, "BOOLValue");
      break;
    case 6:
      objc_msgSend(v6, "doubleValue");
      goto LABEL_8;
    case 8:
      objc_msgSend(v6, "X");
      v32 = v17;
      objc_msgSend(v7, "Y");
      v18.f64[0] = v32;
      *(_QWORD *)&v18.f64[1] = result.i64[0];
      *(float32x2_t *)result.f32 = vcvt_f32_f64(v18);
LABEL_8:
      *(_QWORD *)a3 = result.i64[0];
      break;
    case 9:
      objc_msgSend(v6, "X");
      v33 = v19;
      objc_msgSend(v7, "Y");
      v20.f64[0] = v33;
      v20.f64[1] = v21;
      *(float32x2_t *)&v22 = vcvt_f32_f64(v20);
      v34 = v22;
      objc_msgSend(v7, "Z");
      result.f32[0] = *(double *)result.i64;
      v23 = v34;
      DWORD2(v23) = result.i32[0];
      *(_OWORD *)a3 = v23;
      break;
    case 10:
      objc_msgSend(v6, "X");
      v35 = v24;
      objc_msgSend(v7, "Y");
      v31 = v25;
      objc_msgSend(v7, "Z");
      v30 = v26;
      objc_msgSend(v7, "W");
      v27.f64[0] = v30;
      v27.f64[1] = v28;
      v29.f64[0] = v35;
      v29.f64[1] = v31;
      result = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v29), v27);
      *(float32x4_t *)a3 = result;
      break;
    default:
      v9 = scn_default_log();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        _getCIFilterParameterValue_cold_1(v9, v10, v11, v12, v13, v14, v15, v16);
      break;
  }
  return result;
}

void _setCIFilterParameterValue(void *a1, uint64_t a2, float32x2_t *a3, int a4)
{
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  switch(a4)
  {
    case 2:
      v6 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a3->u32[0]);
      goto LABEL_7;
    case 3:
      v6 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a3->u8[0]);
      goto LABEL_7;
    case 6:
      v6 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(double *)a3);
LABEL_7:
      objc_msgSend(a1, "setValue:forKey:", v6, a2);
      return;
    case 8:
      v18 = vcvtq_f64_f32(*a3);
      v15 = (void *)MEMORY[0x1E0C9DDF8];
      v16 = 2;
      goto LABEL_11;
    case 9:
      v18 = vcvtq_f64_f32(*a3);
      v19.f64[0] = a3[1].f32[0];
      v15 = (void *)MEMORY[0x1E0C9DDF8];
      v16 = 3;
      goto LABEL_11;
    case 10:
      v17 = vcvtq_f64_f32(a3[1]);
      v18 = vcvtq_f64_f32(*a3);
      v19 = v17;
      v15 = (void *)MEMORY[0x1E0C9DDF8];
      v16 = 4;
LABEL_11:
      objc_msgSend(a1, "setValue:forKey:", objc_msgSend(v15, "vectorWithValues:count:", &v18, v16, *(_OWORD *)&v18, *(_OWORD *)&v19), a2);
      break;
    default:
      v7 = scn_default_log();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        _getCIFilterParameterValue_cold_1(v7, v8, v9, v10, v11, v12, v13, v14);
      break;
  }
}

uint64_t C3DFXTechniqueCreateCIFilter(uint64_t a1, uint64_t a2)
{
  _BOOL4 IsClusteredShadingEnabled;
  uint64_t v4;
  const void *v5;
  uint64_t v6;
  __CFString *v7;
  const void *v8;
  uint64_t v9;
  uint64_t PassNamed;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[9];

  IsClusteredShadingEnabled = C3DEngineContextIsClusteredShadingEnabled(a2);
  v4 = objc_msgSend(CFSTR("SceneKit-CI-nodetree-color-"), "stringByAppendingString:", objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLong:", a1), "stringValue"));
  v5 = (const void *)objc_msgSend(CFSTR("SceneKit_renderCINodeTree-"), "stringByAppendingString:", objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLong:", a1), "stringValue"));
  v6 = objc_msgSend(CFSTR("SceneKit-CI-effect-color-"), "stringByAppendingString:", objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLong:", a1), "stringValue"));
  v15[0] = MEMORY[0x1E0C809B0];
  v15[2] = __C3DFXTechniqueCreateCIFilter_block_invoke;
  v15[3] = &unk_1EA59F7F0;
  v15[1] = 3221225472;
  v15[7] = v5;
  v15[8] = a1;
  v15[4] = &unk_1EA5FF678;
  v15[5] = v4;
  v15[6] = v6;
  if (IsClusteredShadingEnabled)
    v7 = CFSTR("C3DFXCIFilterPassMetal.json");
  else
    v7 = CFSTR("C3DFXCIFilterPass.json");
  v8 = (const void *)C3DJsonNamed(v7, (uint64_t)v15);
  v9 = C3DFXTechniqueCreateWithDescription(v8, a1);
  PassNamed = C3DFXTechniqueGetPassNamed(v9, v5);
  C3DFXPassSetWillExecuteCallback(PassNamed, (uint64_t)_willRenderNodeForCIFilter);
  v11 = C3DFXTechniqueGetPassNamed(v9, (CFTypeRef)objc_msgSend(CFSTR("SceneKit_ApplyCIFilter"), "stringByAppendingString:", objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLong:", a1), "stringValue")));
  v12 = v11;
  if (IsClusteredShadingEnabled)
    C3DFXPassSetDrawInstruction(v11, 7);
  C3DFloorSetReflectionCategoryBitMask(v12, (uint64_t)_applyCIFilter);
  v13 = C3DFXTechniqueGetPassNamed(v9, (CFTypeRef)objc_msgSend(CFSTR("SceneKit_renderCIQuad"), "stringByAppendingString:", objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLong:", a1), "stringValue")));
  C3DFXPassSetInitializeCallback(v13, (uint64_t)_initializeRenderFilteredBuffer);
  C3DFXPassSetWillExecuteCallback(v13, (uint64_t)_willRenderFilteredBuffer);
  C3DFloorSetReflectionCategoryBitMask(v13, (uint64_t)_blendFilteredBuffer);
  return v9;
}

void _willRenderNodeForCIFilter(uint64_t a1)
{
  uint64_t RendererContextGL;
  float32x4_t v2;

  RendererContextGL = C3DEngineContextGetRendererContextGL(*(_QWORD *)(a1 + 24));
  if (RendererContextGL)
  {
    v2 = 0uLL;
    C3DRendererContextClear(RendererContextGL, 0x4500u, &v2);
  }
}

void _applyCIFilter(uint64_t a1)
{
  uint64_t v2;
  uint64_t RenderContext;
  uint64_t Stats;
  double v5;
  uint64_t FXContext;
  float32x4_t *v7;
  void *CIImage;
  __n128 *v9;
  _QWORD *v10;
  float32x4_t *CurrentPassInstanceAncestor;
  float32x4_t *WorldMatrix;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  double v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int32x4_t v28;
  int8x16_t v29;
  int32x4_t v30;
  int8x16_t v31;
  float32x4_t v32;
  int8x16_t v33;
  unsigned int v34;
  uint64_t FirstPassInstanceWithName;
  float32x4_t v36;
  float32x4_t v37;
  int8x16_t v38;
  int8x16_t v39;
  uint64_t FramebufferRegistry;
  const void *RenderTargetWithName;
  uint64_t v42;
  uint64_t Texture;
  NSObject *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  CGColorSpace *DeviceRGB;
  double Size;
  NSObject *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  void *v67;
  double v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  const __CFDictionary *Filters;
  uint64_t v73;
  uint64_t v74;
  uint64_t i;
  void *v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  float64x2_t v84;
  double v85;
  unint64_t v86;
  int8x16_t v87;
  double v88;
  int64x2_t v89;
  double v90;
  int8x16_t v91;
  double v92;
  double v93;
  uint64_t v94;
  float64x2_t v95;
  float32x2_t v96;
  float32x4_t v97;
  uint64_t v98;
  float32x4_t v99;
  int8x16_t v100;
  float32x2_t v101;
  float32x2_t v102;
  NSObject *v103;
  const char *v104;
  NSObject *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  float32x2_t v113;
  float32x2_t v114;
  id CIContext;
  uint64_t RendererContextGL;
  _QWORD *v117;
  uint64_t v118;
  __n128 Viewport;
  float32x4_t v120;
  __n128 v121;
  double v122;
  float32x4_t v123;
  float64x2_t v124;
  float32x4_t v125;
  float v126;
  double v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  float32x4_t v132;
  __int128 v133;
  float32x4_t v134[4];
  _BYTE v135[128];
  float32x4_t buf;
  uint64_t v137;
  float v138;
  uint64_t v139;
  float v140;
  uint64_t v141;
  float v142;
  uint64_t v143;
  float v144;
  uint64_t v145;
  float v146;
  uint64_t v147;
  float v148;
  uint64_t v149;
  float v150;
  uint64_t v151;

  v151 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 24);
  RenderContext = C3DEngineContextGetRenderContext(v2);
  Stats = C3DEngineContextGetStats(v2);
  v5 = CACurrentMediaTime();
  FXContext = C3DEngineContextGetFXContext(*(_QWORD *)(a1 + 24));
  Viewport = C3DEngineContextGetViewport((__n128 *)*(_QWORD *)(a1 + 24));
  v7 = *(float32x4_t **)(a1 + 16);
  RendererContextGL = C3DEngineContextGetRendererContextGL(v2);
  v117 = (_QWORD *)FXContext;
  v118 = RenderContext;
  if (RenderContext)
  {
LABEL_2:
    CIImage = 0;
    goto LABEL_3;
  }
  FramebufferRegistry = C3DFXContextGetFramebufferRegistry(FXContext);
  RenderTargetWithName = C3DFramebufferRegistryGetRenderTargetWithName(FramebufferRegistry, (const __CFString *)objc_msgSend(CFSTR("SceneKit-CI-nodetree-color-"), "stringByAppendingString:", objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLong:", v7), "stringValue")));
  if (!RenderTargetWithName)
  {
    v105 = scn_default_log();
    if (os_log_type_enabled(v105, OS_LOG_TYPE_ERROR))
      _applyCIFilter_cold_1(v105, v106, v107, v108, v109, v110, v111, v112);
    goto LABEL_2;
  }
  v42 = (uint64_t)RenderTargetWithName;
  CIImage = (void *)C3DRenderTargetGetCIImage((uint64_t)RenderTargetWithName);
  if (!CIImage)
  {
    Texture = C3DRenderTargetGetTexture(v42);
    if (!Texture)
    {
      v44 = scn_default_log();
      if (os_log_type_enabled(v44, OS_LOG_TYPE_FAULT))
        _applyCIFilter_cold_3(v44, v45, v46, v47, v48, v49, v50, v51);
    }
    glFlush();
    DeviceRGB = CGColorSpaceCreateDeviceRGB();
    Size = C3DTextureGetSize(Texture);
    CIImage = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C9DDC8]), "initWithTexture:size:flipped:colorSpace:", C3DTextureGetID(Texture), 0, DeviceRGB, vcvtq_f64_f32(*(float32x2_t *)&Size));
    CGColorSpaceRelease(DeviceRGB);
    if (!CIImage)
    {
      v54 = scn_default_log();
      if (os_log_type_enabled(v54, OS_LOG_TYPE_FAULT))
        _applyCIFilter_cold_2(v54, v55, v56, v57, v58, v59, v60, v61);
    }
    C3DRenderTargetSetCIImage(v42, CIImage);

  }
LABEL_3:
  v9 = *(__n128 **)(a1 + 24);
  v10 = (_QWORD *)C3DEngineContextGetFXContext((uint64_t)v9);
  v121 = C3DEngineContextGetViewport(v9);
  CurrentPassInstanceAncestor = (float32x4_t *)C3DFXContextGetCurrentPassInstanceAncestor(v10);
  if (CurrentPassInstanceAncestor)
  {
    memset(v134, 0, sizeof(v134));
    WorldMatrix = C3DNodeGetWorldMatrix(v7);
    C3DMatrix4x4Mult((uint64_t)WorldMatrix, CurrentPassInstanceAncestor + 246, v134);
    v132 = 0u;
    v133 = 0u;
    C3DNodeComputeHierarchicalBoundingBox(v7, 1, &v132);
    v13 = 0;
    v14 = 0;
    *(float *)&v15 = v132.f32[0] + *(float *)&v133;
    *(float *)&v16 = v132.f32[0] + *(float *)&v133;
    *((float *)&v16 + 1) = v132.f32[1] + *((float *)&v133 + 1);
    buf.f32[2] = v132.f32[2] + *((float *)&v133 + 2);
    buf.i64[0] = v16;
    v138 = v132.f32[2] - *((float *)&v133 + 2);
    v137 = v16;
    *((float *)&v15 + 1) = v132.f32[1] - *((float *)&v133 + 1);
    v140 = v132.f32[2] + *((float *)&v133 + 2);
    v139 = v15;
    v142 = v132.f32[2] - *((float *)&v133 + 2);
    v141 = v15;
    *(float *)&v17 = v132.f32[0] - *(float *)&v133;
    *(float *)&v18 = v132.f32[0] - *(float *)&v133;
    *((float *)&v18 + 1) = v132.f32[1] + *((float *)&v133 + 1);
    v144 = v132.f32[2] + *((float *)&v133 + 2);
    v143 = v18;
    v146 = v132.f32[2] - *((float *)&v133 + 2);
    v145 = v18;
    *((float *)&v17 + 1) = v132.f32[1] - *((float *)&v133 + 1);
    v148 = v132.f32[2] + *((float *)&v133 + 2);
    v147 = v17;
    v150 = v132.f32[2] - *((float *)&v133 + 2);
    v149 = v17;
    v125 = (float32x4_t)xmmword_1DD008460;
    v19 = 1.0;
    v123 = (float32x4_t)xmmword_1DD007E00;
    while (2)
    {
      v20 = 16 * v13++;
      while (1)
      {
        v21 = *(float32x4_t *)((char *)&buf + v20);
        v21.f32[3] = v19;
        *(double *)v22.i64 = C3DVector4MultMatrix4x4(v134, v21);
        LODWORD(v24) = v22.i32[3];
        if (v22.f32[3] <= 0.0)
          break;
        v19 = 1.0;
        v23.f32[0] = (float)(1.0 / v22.f32[3]) * v22.f32[0];
        v22.f32[0] = vmuls_lane_f32(1.0 / v22.f32[3], *(float32x2_t *)v22.f32, 1);
        v25 = (int8x16_t)v125;
        v25.i32[0] = v23.i32[0];
        v26 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v125, v23), 0), v25, (int8x16_t)v125);
        v27 = v26;
        v27.i32[1] = v22.i32[0];
        v28 = (int32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.i8, 1), v22), 0), v27, v26);
        v29 = (int8x16_t)v28;
        v29.i32[2] = v23.i32[0];
        v30 = (int32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v23, (float32x4_t)vdupq_laneq_s32(v28, 2)), 0), v29, (int8x16_t)v28);
        v31 = (int8x16_t)v30;
        v31.i32[3] = v22.i32[0];
        v125 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v22, (float32x4_t)vdupq_laneq_s32(v30, 3)), 0), v31, (int8x16_t)v30);
        ++v13;
        v20 += 16;
        if (v13 == 9)
        {
          v32.i64[0] = 0x3F0000003F000000;
          v32.i64[1] = 0x3F0000003F000000;
          v33 = (int8x16_t)vmlaq_f32(v32, v32, v125);
          v24 = 0.0;
          if ((v14 & 1) != 0)
            v34 = -1;
          else
            v34 = 0;
          v22 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v34), (int8x16_t)xmmword_1DD007E00, v33);
          v123 = v22;
          goto LABEL_15;
        }
      }
      v14 = 1;
      v19 = 1.0;
      if (v13 != 8)
        continue;
      break;
    }
LABEL_15:
    FirstPassInstanceWithName = C3DFXContextGetFirstPassInstanceWithName((uint64_t)v10, (CFTypeRef)objc_msgSend(CFSTR("SceneKit_renderCINodeTree-"), "stringByAppendingString:", objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLong:", v7, *(double *)v22.i64, v24), "stringValue")));
    v36 = vmulq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v121, 1), v123);
    if (FirstPassInstanceWithName)
    {
      v37 = *(float32x4_t *)(FirstPassInstanceWithName + 5120);
      if ((vminvq_u32((uint32x4_t)vceqzq_f32(v37)) & 0x80000000) == 0)
      {
        v38 = (int8x16_t)vcgtq_f32(v36, v37);
        v39.i64[0] = *(_QWORD *)(FirstPassInstanceWithName + 5120);
        v39.i64[1] = v36.i64[1];
        v36.i64[1] = *(_QWORD *)(FirstPassInstanceWithName + 5128);
        v36 = (float32x4_t)vbslq_s8(v38, v39, (int8x16_t)v36);
      }
    }
  }
  else
  {
    v36 = 0uLL;
  }
  v62 = v36.f32[2];
  if (v36.f32[2] <= v36.f32[0] || (v63 = v36.f32[3], v64 = v36.f32[1], v36.f32[3] <= v36.f32[1]))
  {
    v103 = scn_default_log();
    if (!os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
      goto LABEL_69;
    buf.i16[0] = 0;
    v104 = "Warning: CIFilter should have been clipped by the culling";
LABEL_68:
    _os_log_impl(&dword_1DCCB8000, v103, OS_LOG_TYPE_DEFAULT, v104, (uint8_t *)&buf, 2u);
    goto LABEL_69;
  }
  v126 = v36.f32[0];
  if (v36.f32[3] < Viewport.n128_f32[0]
    || v36.f32[3] < Viewport.n128_f32[1]
    || (v65 = Viewport.n128_f32[2], v36.f32[0] >= Viewport.n128_f32[2])
    || (v66 = Viewport.n128_f32[3], v36.f32[1] >= Viewport.n128_f32[3]))
  {
    v103 = scn_default_log();
    if (!os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
      goto LABEL_69;
    buf.i16[0] = 0;
    v104 = "Warning: CIFilter should have been clipped by the culling (2)";
    goto LABEL_68;
  }
  v67 = (void *)objc_msgSend(MEMORY[0x1E0C9DDB8], "filterWithName:", CFSTR("CICrop"), *(double *)v36.i64);
  objc_msgSend(v67, "setDefaults");
  v68 = (float)(v63 - v64);
  if (v118)
    v64 = Viewport.n128_f32[3] - (v64 + v68);
  objc_msgSend(v67, "setValue:forKey:", objc_msgSend(MEMORY[0x1E0C9DDF8], "vectorWithX:Y:Z:W:", v126, v64, (float)(v62 - v126), v68), CFSTR("inputRectangle"));
  v69 = *MEMORY[0x1E0C9E1F8];
  objc_msgSend(v67, "setValue:forKey:", CIImage, *MEMORY[0x1E0C9E1F8]);
  v70 = *MEMORY[0x1E0C9E298];
  v71 = (void *)objc_msgSend(v67, "valueForKey:", *MEMORY[0x1E0C9E298]);
  CIContext = C3DFXContextGetCIContext(FXContext, *(_QWORD *)(a1 + 24));
  Filters = C3DNodeGetFilters((uint64_t)v7);
  v130 = 0u;
  v131 = 0u;
  v128 = 0u;
  v129 = 0u;
  v73 = -[__CFDictionary countByEnumeratingWithState:objects:count:](Filters, "countByEnumeratingWithState:objects:count:", &v128, v135, 16);
  if (v73)
  {
    v74 = *(_QWORD *)v129;
    do
    {
      for (i = 0; i != v73; ++i)
      {
        if (*(_QWORD *)v129 != v74)
          objc_enumerationMutation(Filters);
        v76 = *(void **)(*((_QWORD *)&v128 + 1) + 8 * i);
        objc_msgSend(v76, "setValue:forKey:", v71, v69);
        v71 = (void *)objc_msgSend(v76, "valueForKey:", v70);
      }
      v73 = -[__CFDictionary countByEnumeratingWithState:objects:count:](Filters, "countByEnumeratingWithState:objects:count:", &v128, v135, 16);
    }
    while (v73);
  }
  objc_msgSend(v71, "extent");
  v81 = Viewport.n128_f32[3];
  if (v118)
    v78 = Viewport.n128_f32[3] - (v78 + v80);
  if (v77 >= 0.0)
    v82 = -0.0;
  else
    v82 = v77;
  v83 = v79 + v82;
  v84.f64[0] = Viewport.n128_f32[2];
  if (v77 >= 0.0)
    v85 = v77;
  else
    v85 = 0.0;
  *(double *)&v86 = v85 + v83;
  v87.i64[1] = 0;
  v127 = v85;
  v88 = v84.f64[0] - v85;
  v84.f64[1] = v78;
  v89 = vcgtq_f64((float64x2_t)v86, v84);
  if ((vmovn_s64(v89).i32[1] & 1) == 0)
    v78 = -0.0;
  v90 = v80 + v78;
  *(double *)v87.i64 = v88;
  v84.f64[0] = v83;
  v91 = vbslq_s8((int8x16_t)v89, v87, (int8x16_t)v84);
  v124 = (float64x2_t)v91;
  v92 = *(double *)&v91.i64[1];
  if (*(double *)&v91.i64[1] + v90 <= v81)
    v93 = v90;
  else
    v93 = v81 - *(double *)&v91.i64[1];
  v122 = v93;
  v94 = C3DFXContextGetFirstPassInstanceWithName((uint64_t)v117, (CFTypeRef)objc_msgSend(CFSTR("SceneKit_renderCINodeTree-"), "stringByAppendingString:", objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLong:", v7), "stringValue")));
  v95.f64[0] = v127;
  v95.f64[1] = v122;
  v96 = vcvt_f32_f64(v95);
  *(float32x2_t *)v97.f32 = vcvt_f32_f64(v124);
  *(_QWORD *)&v95.f64[0] = __PAIR64__(v96.u32[1], v97.u32[0]);
  v113 = *(float32x2_t *)v97.f32;
  v114 = v96;
  v97.i32[0] = v96.i32[0];
  v97.i64[1] = *(_QWORD *)&v95.f64[0];
  v120 = v97;
  *(float32x4_t *)(v94 + 5120) = v97;
  v98 = C3DFXContextGetCurrentPassInstanceAncestor(v117);
  v99 = v120;
  if (v98 && (vminvq_u32((uint32x4_t)vceqzq_f32(v120)) & 0x80000000) == 0)
  {
    v100 = *(int8x16_t *)(v98 + 5120);
    if (COERCE_FLOAT(*(_QWORD *)(v98 + 5128)) != 0.0 && *(float *)&v100.i32[3] != 0.0)
    {
      v101 = vadd_f32(v113, v114);
      v102 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v100, v100, 8uLL), *(float32x2_t *)v100.i8);
      *(int8x8_t *)v99.f32 = vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)__PAIR64__(v113.u32[1], v114.u32[0]), *(float32x2_t *)v100.i8), *(int8x8_t *)v100.i8, (int8x8_t)__PAIR64__(v113.u32[1], v114.u32[0]));
      *(float32x2_t *)&v99.u32[2] = vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v101, v102), (int8x8_t)v101, (int8x8_t)v102), *(float32x2_t *)v99.f32);
    }
    *(float32x4_t *)(v98 + 5120) = v99;
  }
  if (!v118)
  {
    glViewport(0, 0, (int)v65, (int)v66);
    glEnable(0xC11u);
    glScissor((int)v127, (int)v92, (int)v124.f64[0], (int)v122);
    buf = 0uLL;
    C3DRendererContextClear(RendererContextGL, 0x4000u, &buf);
    glDisable(0xC11u);
    glDisable(0xB44u);
    objc_msgSend(CIContext, "drawImage:inRect:fromRect:", v71, v127, v92, v124.f64[0], v122, v127, v92, v124.f64[0], v122);
  }
LABEL_69:
  *(double *)(Stats + 160) = *(double *)(Stats + 160) + CACurrentMediaTime() - v5;
}

void _initializeRenderFilteredBuffer(uint64_t *a1)
{
  uint64_t Program;

  Program = C3DFXPassGetProgram(*a1);
  C3DFXProgramSetOpaque(Program, 0);
}

void _willRenderFilteredBuffer(uint64_t a1)
{
  _QWORD *FXContext;
  uint64_t CurrentPassInstance;
  float32x4_t *WorldMatrix;
  float v5;
  float v6;
  uint64_t v7;
  uint64_t RenderContext;
  float64x2_t v9;
  float64x2_t v15;
  uint64_t v17;
  __CFString *v18;
  uint64_t v19;
  int8x16_t v20;
  float64x2_t v21;
  float64x2_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  int8x16_t v27;
  float v28;
  float32x4_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  float32x4_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;

  FXContext = (_QWORD *)C3DEngineContextGetFXContext(*(_QWORD *)(a1 + 24));
  CurrentPassInstance = C3DFXContextGetCurrentPassInstance(FXContext);
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  WorldMatrix = C3DNodeGetWorldMatrix(*(float32x4_t **)(a1 + 16));
  C3DMatrix4x4Mult((uint64_t)WorldMatrix, (float32x4_t *)(CurrentPassInstance + 3168), &v33);
  v29 = v33;
  v30 = v34;
  v31 = v35;
  v32 = v36;
  C3DVector3MultMatrix4x4(&v29, (float32x4_t)0);
  v6 = fmax(*(double *)(CurrentPassInstance + 4832)/ (*(double *)(CurrentPassInstance + 4832) - *(double *)(CurrentPassInstance + 4824))- *(double *)(CurrentPassInstance + 4832)* *(double *)(CurrentPassInstance + 4824)/ (*(double *)(CurrentPassInstance + 4824) - *(double *)(CurrentPassInstance + 4832))/ v5, 0.0);
  v28 = v6;
  v7 = *(_QWORD *)(a1 + 16);
  C3DFXTechniqueSetValueForSymbol(*(_QWORD *)(a1 + 8), (void *)objc_msgSend(CFSTR("C3D-CIFilter_middleZ"), "stringByAppendingString:", objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLong:", v7), "stringValue")), &v28);
  v24 = *(float32x4_t *)(C3DFXContextGetFirstPassInstanceWithName((uint64_t)FXContext, (CFTypeRef)objc_msgSend(CFSTR("SceneKit_renderCINodeTree-"), "stringByAppendingString:", objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLong:", v7), "stringValue")))+ 5120);
  v25 = *(float32x4_t *)(CurrentPassInstance + 4720);
  RenderContext = C3DEngineContextGetRenderContext(*(_QWORD *)(a1 + 24));
  v9.f64[0] = v24.f32[0];
  if (RenderContext)
  {
    __asm { FMOV            V3.2D, #0.5 }
    v15 = vmulq_f64(vcvt_hight_f64_f32(v25), _Q3);
    v9.f64[1] = v24.f32[1];
    __asm { FMOV            V1.2D, #-1.0 }
    v29 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vaddq_f64(vdivq_f64(v9, v15), _Q1)), vdivq_f64(vcvt_hight_f64_f32(v24), v15));
    v17 = *(_QWORD *)(a1 + 8);
    v18 = (__CFString *)objc_msgSend(CFSTR("C3D-CIFilter_extent"), "stringByAppendingString:", objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLong:", v7), "stringValue"));
    v19 = v17;
  }
  else
  {
    v20 = vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL);
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    *(float32x2_t *)v20.i8 = vdiv_f32(*(float32x2_t *)v20.i8, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL));
    v20.i32[2] = 1.0;
    v27 = v20;
    v21 = vcvt_hight_f64_f32(v25);
    v9.f64[1] = v24.f32[1];
    __asm { FMOV            V1.2D, #0.5 }
    v23 = vdivq_f64(vcvtq_f64_f32(vcvt_f32_f64(vmlaq_f64(v9, _Q1, vsubq_f64(vcvt_hight_f64_f32(v24), v21)))), vmulq_f64(v21, _Q1));
    *(float32x2_t *)&v23.f64[0] = vcvt_f32_f64(v23);
    *(float *)_Q1.f64 = v28 * 2.0 + -1.0;
    LODWORD(v23.f64[1]) = LODWORD(_Q1.f64[0]);
    v26 = (float32x4_t)v23;
    C3DMatrix4x4MakeScale(&v29, &v27);
    C3DMatrix4x4Translate(&v29, &v26);
    v19 = *(_QWORD *)(a1 + 8);
    v18 = CFSTR("C3D-CIFilter_modelMatrix");
  }
  C3DFXTechniqueSetValueForSymbol(v19, v18, &v29);
}

double _blendFilteredBuffer(uint64_t *a1)
{
  uint64_t v2;
  uint64_t Stats;
  double v4;
  void *QuadMesh;
  uint64_t RendererContextGL;
  uint64_t v7;
  uint64_t ResourceManager;
  const void *ElementAtIndex;
  uint64_t RenderContext;
  uint64_t v11;
  double result;

  v2 = a1[3];
  Stats = C3DEngineContextGetStats(v2);
  v4 = CACurrentMediaTime();
  QuadMesh = (void *)C3DEngineContextGetQuadMesh(a1[3]);
  RendererContextGL = C3DEngineContextGetRendererContextGL(v2);
  if (RendererContextGL)
  {
    v7 = RendererContextGL;
    ResourceManager = C3DEngineContextGetResourceManager(v2);
    C3DRendererContextSetEnable(v7, 2, 0);
    C3DRendererContextSetEnable(v7, 1, 1);
    C3DRendererContextSetEnableWriteToDepth(v7, 0);
    C3DRendererContextBindMesh(v7, ResourceManager, QuadMesh);
    ElementAtIndex = C3DMeshGetElementAtIndex((uint64_t)QuadMesh, 0, 1);
    C3DRendererContextBindMeshElement(v7, ResourceManager, ElementAtIndex);
    C3DRendererContextRenderResidentMeshElement(v7);
    C3DRendererContextSetEnable(v7, 2, 1);
    C3DRendererContextSetEnableWriteToDepth(v7, 1);
  }
  else
  {
    RenderContext = C3DEngineContextGetRenderContext(v2);
    *(_QWORD *)(a1[8] + 24) = QuadMesh;
    *(_QWORD *)(a1[8] + 48) = C3DMeshGetElementAtIndex((uint64_t)QuadMesh, 0, 1);
    -[SCNMTLRenderContext drawRenderElement:withPass:](RenderContext, a1[8], *a1);
    v11 = a1[8];
    *(_QWORD *)(v11 + 24) = 0;
    *(_QWORD *)(v11 + 48) = 0;
  }
  result = *(double *)(Stats + 160) + CACurrentMediaTime() - v4;
  *(double *)(Stats + 160) = result;
  return result;
}

void WireframeMesh::WireframeMesh(WireframeMesh *this, __C3DMesh *a2)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  WireframeMesh::Prepare(this, a2);
}

void sub_1DCD97C9C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void WireframeMesh::Prepare(WireframeMesh *this, __C3DMesh *a2)
{
  CFIndex v4;
  const void *ElementAtIndex;
  unsigned int Type;
  uint64_t PrimitiveCount;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const __CFData *Indexes;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  CFDataRef v29;
  const void *v30;
  uint64_t v31;
  CFDataRef v32;
  unint64_t v33;
  uint64_t *v34;
  _QWORD *v35;
  CFIndex v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t *v42;
  char *v43;
  char *v44;
  uint64_t *v45;
  char *v46;
  const __CFAllocator *allocator;
  WireframeMesh *v48;
  const __CFArray *ElementsCount;
  __C3DMesh *v50;
  CFIndex v51;
  CFIndex v52;
  const UInt8 *BytePtr;
  const UInt8 *v54;
  const UInt8 *v55;
  const void *PositionSource;
  unsigned int v57;
  uint64_t v58;
  UInt8 *bytes;
  UInt8 *v60;
  uint64_t v61;
  uint64_t v62;
  int v63[3];

  PositionSource = C3DMeshGetPositionSource((uint64_t)a2, 1);
  v50 = a2;
  ElementsCount = C3DMeshGetElementsCount((uint64_t)a2);
  if ((uint64_t)ElementsCount >= 1)
  {
    v4 = 0;
    v46 = (char *)this + 16;
    allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v48 = this;
    while (1)
    {
      ElementAtIndex = C3DMeshGetElementAtIndex((uint64_t)v50, v4, 1);
      Type = C3DMeshElementGetType((uint64_t)ElementAtIndex);
      PrimitiveCount = C3DMeshElementGetPrimitiveCount((uint64_t)ElementAtIndex);
      if (Type > 5 || ((1 << Type) & 0x23) == 0 || PrimitiveCount == 0)
        return;
      v10 = PrimitiveCount;
      v11 = 3 * PrimitiveCount;
      v12 = 12 * PrimitiveCount;
      v60 = (UInt8 *)malloc_type_malloc(12 * PrimitiveCount, 0x4CD3D790uLL);
      v13 = 16 * v11;
      bytes = (UInt8 *)malloc_type_malloc(v13, 0x4671C95BuLL);
      v63[0] = 0;
      Indexes = (const __CFData *)C3DMeshElementGetIndexes((uint64_t)ElementAtIndex, v63);
      v51 = v4;
      v52 = v12;
      if (v63[0] == 4)
      {
        BytePtr = CFDataGetBytePtr(Indexes);
        v54 = 0;
        v55 = 0;
      }
      else if (v63[0] == 2)
      {
        v54 = CFDataGetBytePtr(Indexes);
        v55 = 0;
        BytePtr = 0;
      }
      else
      {
        v55 = v63[0] == 1 ? CFDataGetBytePtr(Indexes) : 0;
        BytePtr = 0;
        v54 = 0;
      }
      if (v10 >= 1)
        break;
LABEL_39:
      v28 = C3DMeshCreate();
      v29 = CFDataCreate(allocator, bytes, v13);
      v30 = (const void *)C3DMeshSourceCreate(v29, 0, 3 * v10, 4, 1);
      CFRelease(v29);
      C3DMeshAddSource(v28, v30, 0, 0);
      CFRelease(v30);
      v31 = C3DMeshElementCreate();
      C3DMeshElementSetType(v31, 0);
      v32 = CFDataCreate(allocator, v60, v52);
      C3DMeshElementSetPrimitives(v31, v10, v32, 4);
      CFRelease(v32);
      v34 = (uint64_t *)*((_QWORD *)v48 + 1);
      v33 = *((_QWORD *)v48 + 2);
      if ((unint64_t)v34 >= v33)
      {
        v37 = ((uint64_t)v34 - *(_QWORD *)v48) >> 4;
        v38 = v37 + 1;
        if ((unint64_t)(v37 + 1) >> 60)
          abort();
        v39 = v33 - *(_QWORD *)v48;
        if (v39 >> 3 > v38)
          v38 = v39 >> 3;
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF0)
          v40 = 0xFFFFFFFFFFFFFFFLL;
        else
          v40 = v38;
        if (v40)
          v41 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)v46, v40);
        else
          v41 = 0;
        v42 = (uint64_t *)&v41[16 * v37];
        *v42 = v28;
        v42[1] = v31;
        v44 = *(char **)v48;
        v43 = (char *)*((_QWORD *)v48 + 1);
        v45 = v42;
        if (v43 == *(char **)v48)
        {
          v36 = v51;
        }
        else
        {
          v36 = v51;
          do
          {
            *((_OWORD *)v45 - 1) = *((_OWORD *)v43 - 1);
            v45 -= 2;
            v43 -= 16;
          }
          while (v43 != v44);
          v43 = *(char **)v48;
        }
        v35 = v42 + 2;
        *(_QWORD *)v48 = v45;
        *((_QWORD *)v48 + 1) = v42 + 2;
        *((_QWORD *)v48 + 2) = &v41[16 * v40];
        if (v43)
          operator delete(v43);
      }
      else
      {
        *v34 = v28;
        v34[1] = v31;
        v35 = v34 + 2;
        v36 = v51;
      }
      *((_QWORD *)v48 + 1) = v35;
      free(v60);
      free(bytes);
      v4 = v36 + 1;
      if ((const __CFArray *)v4 == ElementsCount)
        return;
    }
    v15 = 0;
    v16 = 0;
    v17 = 6;
    v18 = 1;
    v19 = 2;
    v58 = v10;
    v57 = Type;
    while (1)
    {
      if (Type == 5)
      {
        v20 = 0;
        v21 = (2 * v16) | 1;
        v22 = 2 * v16 + 2;
      }
      else if (Type == 1)
      {
        v23 = 2 * v16;
        if ((v16 & 1) != 0)
        {
          v21 = v23 | 1;
          v22 = v23 + 2;
        }
        else
        {
          v21 = v23 + 2;
          v22 = v23 | 1;
        }
        v20 = v16;
      }
      else if (Type)
      {
        v20 = 0;
        v21 = 0;
        v22 = 0;
      }
      else
      {
        v20 = 3 * v16;
        v21 = v15 + 1;
        v22 = v15 + 2;
      }
      switch(v63[0])
      {
        case 4:
          v20 = *(unsigned int *)&BytePtr[4 * v20];
          v61 = *(unsigned int *)&BytePtr[4 * v21];
          v24 = *(unsigned int *)&BytePtr[4 * v22];
          break;
        case 2:
          v20 = *(unsigned __int16 *)&v54[2 * v20];
          v61 = *(unsigned __int16 *)&v54[2 * v21];
          v24 = *(unsigned __int16 *)&v54[2 * v22];
          break;
        case 1:
          v20 = v55[v20];
          v61 = v55[v21];
          v24 = v55[v22];
          break;
        default:
          v62 = v22;
          v61 = v21;
          goto LABEL_38;
      }
      v62 = v24;
LABEL_38:
      *(double *)&bytes[4 * v17 - 24] = C3DMeshSourceGetValueAtIndexAsVector3((uint64_t)PositionSource, v20);
      *(_DWORD *)&bytes[4 * v17 - 16] = v25;
      *(float *)&bytes[4 * v17 - 12] = (float)(v15 % 3);
      *(_DWORD *)&v60[4 * v15] = v15;
      *(double *)&bytes[4 * v17 - 8] = C3DMeshSourceGetValueAtIndexAsVector3((uint64_t)PositionSource, v61);
      *(_DWORD *)&bytes[4 * v17] = v26;
      *(float *)&bytes[4 * v17 + 4] = (float)(v15 + 1 - 3 * (v18 / 3));
      *(_DWORD *)&v60[4 * (v15 + 1)] = v15 + 1;
      *(double *)&bytes[4 * v17 + 8] = C3DMeshSourceGetValueAtIndexAsVector3((uint64_t)PositionSource, v62);
      *(_DWORD *)&bytes[4 * v17 + 16] = v27;
      *(float *)&bytes[4 * v17 + 20] = (float)(v15 + 2 - 3 * (v19 / 3));
      *(_DWORD *)&v60[4 * (v15 + 2)] = v15 + 2;
      ++v16;
      v17 += 12;
      v18 += 3;
      v19 += 3;
      v15 += 3;
      v10 = v58;
      Type = v57;
      if (v58 == v16)
        goto LABEL_39;
    }
  }
}

void WireframeMesh::~WireframeMesh(WireframeMesh *this)
{
  uint64_t v2;
  uint64_t v3;
  const void *v4;

  v2 = *(_QWORD *)this;
  v3 = *((_QWORD *)this + 1);
  if (*(_QWORD *)this != v3)
  {
    do
    {
      v4 = *(const void **)(v2 + 8);
      CFRelease(*(CFTypeRef *)v2);
      CFRelease(v4);
      v2 += 16;
    }
    while (v2 != v3);
    v2 = *(_QWORD *)this;
  }
  if (v2)
  {
    *((_QWORD *)this + 1) = v2;
    operator delete((void *)v2);
  }
}

void sub_1DCD98238(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WireframeMesh::Draw(WireframeMesh *this, __C3DEngineContext *a2, __C3DFXProgram *a3, const C3DMatrix4x4 *a4, float32x4_t *a5, uint64_t a6)
{
  uint64_t RendererContextGL;
  uint64_t v12;
  uint64_t ResourceManager;
  _QWORD *ProgramResident;
  uint64_t v15;
  uint64_t UniformLocationOfSymbolNamed;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const void *v22;
  uint64_t result;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  _OWORD v32[4];

  *((_QWORD *)this + 3) = a6;
  RendererContextGL = C3DEngineContextGetRendererContextGL((uint64_t)a2);
  if (RendererContextGL)
  {
    v12 = RendererContextGL;
    glPushGroupMarkerEXT(0, "SceneKit - Draw wireframe");
    ResourceManager = C3DEngineContextGetResourceManager((uint64_t)a2);
    ProgramResident = C3DResourceManagerMakeProgramResident(ResourceManager, a3, v12);
    C3DRendererContextBindProgramObject(v12, ProgramResident);
    v15 = C3DBlendStatesDefaultOver();
    C3DRendererContextSetBlendStates(v12, v15);
    C3DRendererContextSetEnableReadsFromDepth(v12, 1);
    UniformLocationOfSymbolNamed = C3DFXGLSLProgramObjectGetUniformLocationOfSymbolNamed((uint64_t)ProgramResident, CFSTR("u_modelViewProjectionTransform"));
    C3DRendererContextSetMatrix4x4UniformAtLocation(v12, UniformLocationOfSymbolNamed, a4->components, 1);
    C3DRendererContextSetEnable(v12, 2, 1);
    C3DRendererContextSetEnable(v12, 1, 1);
    glEnable(0x8037u);
    glPolygonOffset(-2.0, -2.0);
    v17 = C3DFXGLSLProgramObjectGetUniformLocationOfSymbolNamed((uint64_t)ProgramResident, CFSTR("u_color"));
    C3DRendererContextSetColor4UniformAtLocation(v12, v17, a5, 1);
    v18 = C3DFXGLSLProgramObjectGetUniformLocationOfSymbolNamed((uint64_t)ProgramResident, CFSTR("u_transform"));
    C3DRendererContextSetMatrix4x4UniformAtLocation(v12, v18, a4->components, 1);
    v19 = *(_QWORD *)this;
    v20 = *((_QWORD *)this + 1);
    while (v19 != v20)
    {
      v21 = *(void **)v19;
      v22 = *(const void **)(v19 + 8);
      v19 += 16;
      C3DRendererContextBindMesh(v12, ResourceManager, v21);
      C3DRendererContextBindMeshElement(v12, ResourceManager, v22);
      C3DRendererContextRenderResidentMeshElement(v12);
    }
    C3DRendererContextUnbindProgramObject(v12);
    glDisable(0x8037u);
    glPopGroupMarkerEXT();
  }
  result = C3DEngineContextGetRenderContext((uint64_t)a2);
  if (result)
  {
    v24 = result;
    -[SCNMTLRenderContext pushDebugGroup:](result, (uint64_t)CFSTR("SceneKit - Draw wireframe"));
    v25 = *(uint64_t **)this;
    v26 = (uint64_t *)*((_QWORD *)this + 1);
    if (*(uint64_t **)this != v26)
    {
      do
      {
        v27 = *v25;
        v28 = v25[1];
        v25 += 2;
        v29 = *(_OWORD *)&a4->components[4];
        v32[0] = *(_OWORD *)a4->components;
        v32[1] = v29;
        v30 = *(_OWORD *)&a4->components[12];
        v32[2] = *(_OWORD *)&a4->components[8];
        v32[3] = v30;
        v31 = C3DBlendStatesDefaultOver();
        -[SCNMTLRenderContext renderMesh:meshElement:withProgram:engineContext:transform:color:rasterizerStates:blendState:texture:depthBias:](v24, v27, v28, (uint64_t)a3, (uint64_t)a2, v32, (__int128 *)a5, 0, v31, 0, 1);
      }
      while (v25 != v26);
    }
    return -[SCNMTLRenderContext popDebugGroup](v24);
  }
  return result;
}

void WireframeMeshRenderer::AddInstance(WireframeMeshRenderer *this, __C3DMesh *a2, C3DColor4 a3, C3DMatrix4x4 *a4)
{
  uint64_t v5;
  uint64_t v6;
  WireframeMesh *WireframeMesh;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;

  v5 = *(_QWORD *)&a3.var0.var1.var2;
  v6 = *(_QWORD *)a3.var0.var0;
  WireframeMesh = WireframeMeshRenderer::GetWireframeMesh(this, a2);
  v9 = operator new();
  v10 = *(_OWORD *)&a4->components[4];
  *(_OWORD *)(v9 + 32) = *(_OWORD *)a4->components;
  *(_OWORD *)(v9 + 48) = v10;
  v11 = *(_OWORD *)&a4->components[12];
  *(_OWORD *)(v9 + 64) = *(_OWORD *)&a4->components[8];
  *(_OWORD *)(v9 + 80) = v11;
  *(_QWORD *)v9 = WireframeMesh;
  *(_QWORD *)(v9 + 16) = v6;
  *(_QWORD *)(v9 + 24) = v5;
  v12 = *((_QWORD *)this + 2);
  v13 = (uint64_t *)*((_QWORD *)this + 1);
  if ((unint64_t)v13 >= v12)
  {
    v15 = ((uint64_t)v13 - *(_QWORD *)this) >> 3;
    if ((unint64_t)(v15 + 1) >> 61)
      abort();
    v16 = v12 - *(_QWORD *)this;
    v17 = v16 >> 2;
    if (v16 >> 2 <= (unint64_t)(v15 + 1))
      v17 = v15 + 1;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v17;
    if (v18)
      v19 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Statement *>>((uint64_t)this + 16, v18);
    else
      v19 = 0;
    v20 = (uint64_t *)&v19[8 * v15];
    v21 = &v19[8 * v18];
    *v20 = v9;
    v14 = v20 + 1;
    v23 = *(char **)this;
    v22 = (char *)*((_QWORD *)this + 1);
    if (v22 != *(char **)this)
    {
      do
      {
        v24 = *((_QWORD *)v22 - 1);
        v22 -= 8;
        *--v20 = v24;
      }
      while (v22 != v23);
      v22 = *(char **)this;
    }
    *(_QWORD *)this = v20;
    *((_QWORD *)this + 1) = v14;
    *((_QWORD *)this + 2) = v21;
    if (v22)
      operator delete(v22);
  }
  else
  {
    *v13 = v9;
    v14 = v13 + 1;
  }
  *((_QWORD *)this + 1) = v14;
}

WireframeMesh *WireframeMeshRenderer::GetWireframeMesh(WireframeMeshRenderer *this, __C3DMesh *a2)
{
  _QWORD *v3;
  uint64_t **v4;
  uint64_t **v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  WireframeMesh *v9;
  __C3DMesh *v11;
  __C3DMesh **v12;

  v11 = a2;
  v4 = (uint64_t **)((char *)this + 32);
  v3 = (_QWORD *)*((_QWORD *)this + 4);
  if (!v3)
    goto LABEL_12;
  v5 = (uint64_t **)((char *)this + 32);
  do
  {
    v6 = v3[4];
    v7 = v6 >= (unint64_t)a2;
    if (v6 >= (unint64_t)a2)
      v8 = v3;
    else
      v8 = v3 + 1;
    if (v7)
      v5 = (uint64_t **)v3;
    v3 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v5 != v4 && v5[4] <= (uint64_t *)a2)
    return (WireframeMesh *)v5[5];
LABEL_12:
  v9 = (WireframeMesh *)operator new();
  WireframeMesh::WireframeMesh(v9, a2);
  v12 = &v11;
  std::__tree<std::__value_type<__C3DMesh *,WireframeMesh *>,std::__map_value_compare<__C3DMesh *,std::__value_type<__C3DMesh *,WireframeMesh *>,std::less<__C3DMesh *>,true>,std::allocator<std::__value_type<__C3DMesh *,WireframeMesh *>>>::__emplace_unique_key_args<__C3DMesh *,std::piecewise_construct_t const&,std::tuple<__C3DMesh * const&>,std::tuple<>>(v4 - 1, (unint64_t *)&v11, (uint64_t)&std::piecewise_construct, (uint64_t **)&v12)[5] = (uint64_t)v9;
  return v9;
}

void sub_1DCD98668(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0D41C0](v1, 0x1020C4016EE4530);
  _Unwind_Resume(a1);
}

uint64_t WireframeMeshRenderer::DrawInstances(WireframeMeshRenderer *this, __C3DEngineContext *a2, __C3DFXProgram *a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;

  v4 = *(uint64_t **)this;
  v5 = (uint64_t *)*((_QWORD *)this + 1);
  if (*(uint64_t **)this != v5)
  {
    do
    {
      v8 = *v4++;
      WireframeMesh::Draw(*(WireframeMesh **)v8, a2, a3, (const C3DMatrix4x4 *)(v8 + 32), (float32x4_t *)(v8 + 16), *((_QWORD *)this + 6));
      MEMORY[0x1DF0D41C0](v8, 0x1020C406DF670C8);
    }
    while (v4 != v5);
    v4 = *(uint64_t **)this;
  }
  *((_QWORD *)this + 1) = v4;
  ++*((_QWORD *)this + 6);
  return WireframeMeshRenderer::Purge((uint64_t)this);
}

uint64_t WireframeMeshRenderer::Purge(uint64_t this)
{
  uint64_t **v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  WireframeMesh *v5;
  uint64_t *v6;
  uint64_t *v7;
  BOOL v8;

  v1 = (uint64_t **)(this + 24);
  v2 = *(uint64_t **)(this + 24);
  v3 = (uint64_t *)(this + 32);
  if (v2 != (uint64_t *)(this + 32))
  {
    v4 = this;
    do
    {
      v5 = (WireframeMesh *)v2[5];
      if (*((_QWORD *)v5 + 3) >= *(_QWORD *)(v4 + 48) - 100)
      {
        v7 = (uint64_t *)v2[1];
        if (v7)
        {
          do
          {
            v6 = v7;
            v7 = (uint64_t *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            v6 = (uint64_t *)v2[2];
            v8 = *v6 == (_QWORD)v2;
            v2 = v6;
          }
          while (!v8);
        }
      }
      else
      {
        v6 = std::__tree<std::__value_type<__C3DMesh *,WireframeMesh *>,std::__map_value_compare<__C3DMesh *,std::__value_type<__C3DMesh *,WireframeMesh *>,std::less<__C3DMesh *>,true>,std::allocator<std::__value_type<__C3DMesh *,WireframeMesh *>>>::__remove_node_pointer(v1, v2);
        operator delete(v2);
        WireframeMesh::~WireframeMesh(v5);
        this = MEMORY[0x1DF0D41C0]();
      }
      v2 = v6;
    }
    while (v6 != v3);
  }
  return this;
}

void C3DWireframeAddInstance(WireframeMeshRenderer *a1, __C3DMesh *a2, C3DColor4 a3, _OWORD *a4)
{
  __int128 v4;
  __int128 v5;
  C3DMatrix4x4 v6;

  v4 = a4[1];
  *(_OWORD *)v6.components = *a4;
  *(_OWORD *)&v6.components[4] = v4;
  v5 = a4[3];
  *(_OWORD *)&v6.components[8] = a4[2];
  *(_OWORD *)&v6.components[12] = v5;
  WireframeMeshRenderer::AddInstance(a1, a2, a3, &v6);
}

void C3DWireframeDrawInstances(WireframeMeshRenderer *a1, __C3DEngineContext *a2, __C3DFXProgram *a3)
{
  uint64_t RendererContextGL;
  uint64_t v7;

  RendererContextGL = C3DEngineContextGetRendererContextGL((uint64_t)a2);
  if (RendererContextGL)
  {
    v7 = RendererContextGL;
    C3DRendererContextResetToDefaultStates(RendererContextGL);
    WireframeMeshRenderer::DrawInstances(a1, a2, a3);
    C3DRendererContextResetToDefaultStates(v7);
    C3DRendererContextSetEnable(v7, 1, 1);
  }
  else
  {
    WireframeMeshRenderer::DrawInstances(a1, a2, a3);
  }
}

_QWORD *C3DWireframeRendererCreate()
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = 0;
  result[1] = 0;
  result[5] = 0;
  result[4] = 0;
  result[2] = 0;
  result[3] = result + 4;
  return result;
}

WireframeMeshRenderer *C3DWireframeRendererDestroy(WireframeMeshRenderer *result)
{
  if (result)
  {
    WireframeMeshRenderer::~WireframeMeshRenderer(result);
    JUMPOUT(0x1DF0D41C0);
  }
  return result;
}

void WireframeMeshRenderer::~WireframeMeshRenderer(WireframeMeshRenderer *this)
{
  _QWORD *v2;

  std::__tree<char>::destroy((uint64_t)this + 24, *((_QWORD **)this + 4));
  v2 = *(_QWORD **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v2;
    operator delete(v2);
  }
}

uint64_t SCNPhysicsShapeDestroyShape(uint64_t result)
{
  _QWORD *v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (result)
  {
    v1 = (_QWORD *)result;
    v2 = *(_DWORD *)(result + 8);
    if (v2 == 21)
    {
      v7 = *(_QWORD *)(result + 80);
      if (!v7)
        return (*(uint64_t (**)(_QWORD *))(*v1 + 8))(v1);
    }
    else
    {
      if (v2 != 22)
      {
        if (v2 == 31)
        {
          v3 = *(unsigned int *)(result + 28);
          if ((int)v3 >= 1)
          {
            v4 = 0;
            v5 = 96 * v3;
            do
            {
              v6 = v1[5] + v4;
              if ((*(_BYTE *)(v6 + 88) & 1) != 0)
                SCNPhysicsShapeDestroyShape(*(btCollisionShape **)(v6 + 64));
              v4 += 96;
            }
            while (v5 != v4);
          }
        }
        return (*(uint64_t (**)(_QWORD *))(*v1 + 8))(v1);
      }
      v7 = *(_QWORD *)(*(_QWORD *)(result + 48) + 80);
      if (!v7)
        return (*(uint64_t (**)(_QWORD *))(*v1 + 8))(v1);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    return (*(uint64_t (**)(_QWORD *))(*v1 + 8))(v1);
  }
  return result;
}

btStridingMeshInterface *_createShapeForGeometry(__C3DGeometry *a1, NSDictionary *a2)
{
  CFTypeID v4;
  __n128 *v5;
  __C3DMesh *Mesh;
  uint64_t v8;
  double v9;
  float v10;
  float64x2_t v11;
  double v12;
  double v13;
  double v14;
  float v15;
  float v16;
  double v17;
  double v18;
  unsigned int v19;
  float v20;
  float v21;
  NSObject *v22;
  double v23;
  double v24;
  float v25;
  float v26;
  double v27;
  double v28;
  unsigned int v29;
  float v30;
  double v31;
  double v32;
  float v33;
  float v34;
  double v35;
  double v36;
  uint64_t v37;
  float v38;
  int32x2_t v39;
  int32x2_t v40;
  btVector3 *v41;
  uint64_t v42;
  float64x2_t v43;
  __float2 v44;
  __float2 v45;
  float32x2_t v46;
  float32x2_t v47;
  uint64_t v48;
  double v49;
  float v50;
  float64x2_t v51;
  float64x2_t v52;
  float v53;
  float v54;
  double v55;
  double v56;
  double FloatValue;
  double v58;
  float32x4_t __s1;
  float v60[8];
  btVector3 v61;
  float v62;
  int v63;
  float v64;
  int v65;
  float v66;
  int v67;
  float v68;
  int v69;
  float v70;
  int v71;
  float v72;
  int v73;
  float v74;
  int v75;
  float v76;
  int v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v4 = CFGetTypeID(a1);
  if (v4 == C3DParametricGeometryGetTypeID()
    && !-[NSDictionary objectForKey:](a2, "objectForKey:", CFSTR("SCNPhysicsShapeTypeKey")))
  {
    memset(&__s1, 0, 48);
    C3DParametricGeometryGetCallbacks((uint64_t)a1, (uint64_t)&__s1);
    if (!memcmp(&__s1, &kC3DBoxCallBacks, 0x30uLL))
    {
      FloatValue = C3DParametricGeometryGetFloatValue((uint64_t)a1, 0);
      v55 = C3DParametricGeometryGetFloatValue((uint64_t)a1, 1);
      v9 = C3DParametricGeometryGetFloatValue((uint64_t)a1, 2);
      v8 = btAlignedAllocInternal(80, 16);
      v10 = v9;
      v11.f64[0] = FloatValue;
      v11.f64[1] = v55;
      *(float32x2_t *)v61.var0.var0 = vmul_f32(vcvt_f32_f64(v11), (float32x2_t)0x3F0000003F000000);
      *(_QWORD *)&v61.var0.var0[2] = COERCE_UNSIGNED_INT(v10 * 0.5);
      btBoxShape::btBoxShape((btBoxShape *)v8, &v61);
      return (btStridingMeshInterface *)v8;
    }
    if (!memcmp(&__s1, kC3DPyramidCallBacks, 0x30uLL))
    {
      v12 = C3DParametricGeometryGetFloatValue((uint64_t)a1, 0);
      v13 = C3DParametricGeometryGetFloatValue((uint64_t)a1, 1);
      v14 = C3DParametricGeometryGetFloatValue((uint64_t)a1, 2);
      v15 = v12;
      v61.var0.var0[0] = 0.0;
      v16 = v13;
      *(float *)&v14 = v14;
      v61.var0.var0[1] = v16;
      *(_QWORD *)&v61.var0.var0[2] = 0;
      v62 = v15 * -0.5;
      v63 = 0;
      v64 = *(float *)&v14 * -0.5;
      v65 = 0;
      v66 = v15 * -0.5;
      v67 = 0;
      v68 = *(float *)&v14 * 0.5;
      v69 = 0;
      v70 = v15 * 0.5;
      v71 = 0;
      v72 = *(float *)&v14 * -0.5;
      v73 = 0;
      v74 = v15 * 0.5;
      v75 = 0;
      v76 = *(float *)&v14 * 0.5;
      v77 = 0;
      v8 = btAlignedAllocInternal(192, 16);
      btConvexHullShape::btConvexHullShape((btConvexHullShape *)v8, v61.var0.var0, 5, 16, 0, 0);
      return (btStridingMeshInterface *)v8;
    }
    if (!memcmp(&__s1, kC3DCylinderCallBacks, 0x30uLL))
    {
      v17 = C3DParametricGeometryGetFloatValue((uint64_t)a1, 4);
      v18 = C3DParametricGeometryGetFloatValue((uint64_t)a1, 1);
      v8 = btAlignedAllocInternal(80, 16);
      *(float *)&v19 = v17;
      v20 = v18;
      LODWORD(v61.var0.var0[0]) = v19;
      v61.var0.var0[1] = v20 * 0.5;
      *(_QWORD *)&v61.var0.var0[2] = v19;
      btCylinderShape::btCylinderShape((btCylinderShape *)v8, &v61);
      return (btStridingMeshInterface *)v8;
    }
    if (!memcmp(&__s1, kC3DConeCallBacks, 0x30uLL))
    {
      v21 = C3DParametricGeometryGetFloatValue((uint64_t)a1, 5);
      if (v21 != 0.0 && (_createShapeForGeometry(__C3DGeometry *,NSDictionary *)::done & 1) == 0)
      {
        _createShapeForGeometry(__C3DGeometry *,NSDictionary *)::done = 1;
        v22 = scn_default_log();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          _createShapeForGeometry();
      }
      v23 = C3DParametricGeometryGetFloatValue((uint64_t)a1, 6);
      v24 = C3DParametricGeometryGetFloatValue((uint64_t)a1, 1);
      v8 = btAlignedAllocInternal(96, 16);
      v25 = v23;
      v26 = v24;
      btConeShape::btConeShape((btConeShape *)v8, v25, v26);
      return (btStridingMeshInterface *)v8;
    }
    if (!memcmp(&__s1, kC3DTubeCallBacks, 0x30uLL))
    {
      v27 = C3DParametricGeometryGetFloatValue((uint64_t)a1, 8);
      v28 = C3DParametricGeometryGetFloatValue((uint64_t)a1, 1);
      v8 = btAlignedAllocInternal(80, 16);
      *(float *)&v29 = v27;
      v30 = v28;
      LODWORD(v61.var0.var0[0]) = v29;
      v61.var0.var0[1] = v30 * 0.5;
      *(_QWORD *)&v61.var0.var0[2] = v29;
      btCylinderShape::btCylinderShape((btCylinderShape *)v8, &v61);
      return (btStridingMeshInterface *)v8;
    }
    if (!memcmp(&__s1, kC3DCapsuleCallBacks, 0x30uLL))
    {
      v31 = C3DParametricGeometryGetFloatValue((uint64_t)a1, 4);
      v32 = C3DParametricGeometryGetFloatValue((uint64_t)a1, 1);
      v8 = btAlignedAllocInternal(80, 16);
      v33 = v31;
      v34 = v32;
      btCapsuleShape::btCapsuleShape((btCapsuleShape *)v8, v33, v34 + (float)(v33 * -2.0));
      return (btStridingMeshInterface *)v8;
    }
    if (!memcmp(&__s1, kC3DTorusCallBacks, 0x30uLL))
    {
      v35 = C3DParametricGeometryGetFloatValue((uint64_t)a1, 9);
      v36 = C3DParametricGeometryGetFloatValue((uint64_t)a1, 10);
      v37 = 0;
      *(float *)&v36 = v36;
      v38 = v35;
      v53 = v38;
      v39 = vdup_lane_s32(*(int32x2_t *)&v36, 0);
      v40 = (int32x2_t)0x100000000;
      v41 = &v61;
      v52 = (float64x2_t)vdupq_n_s64(0x400921FB54442D18uLL);
      v42 = 0;
      do
      {
        v43 = vmulq_f64(vcvtq_f64_f32(vmul_f32(vcvt_f32_s32(v40), (float32x2_t)0x3E0000003E000000)), v52);
        *(float32x2_t *)&v43.f64[0] = vcvt_f32_f64(vaddq_f64(v43, v43));
        v54 = *(float *)v43.f64;
        v44 = __sincosf_stret(*((float *)v43.f64 + 1));
        v45 = __sincosf_stret(v54);
        v46 = vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(v44.__sinval), LODWORD(v45.__sinval)), v53);
        v47 = vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(v44.__cosval), LODWORD(v45.__cosval)), v53);
        v48 = 0;
        vst4_f32(v41->var0.var0, *(float32x2x4_t *)(&v42 - 1));
        v41 += 2;
        *(int32x2_t *)&v60[v37] = v39;
        v40 = vadd_s32(v40, (int32x2_t)0x200000002);
        v37 += 2;
      }
      while (v37 != 8);
      v8 = btAlignedAllocInternal(192, 16);
      btMultiSphereShape::btMultiSphereShape((btMultiSphereShape *)v8, &v61, v60, 8);
      return (btStridingMeshInterface *)v8;
    }
    if (!memcmp(&__s1, kC3DSphereCallBacks, 0x30uLL))
    {
      v49 = C3DParametricGeometryGetFloatValue((uint64_t)a1, 4);
      v8 = btAlignedAllocInternal(80, 16);
      btConvexInternalShape::btConvexInternalShape((btConvexInternalShape *)v8);
      v50 = v49;
      *(_QWORD *)v8 = &unk_1EA5956E8;
      *(_DWORD *)(v8 + 8) = 8;
      *(float *)(v8 + 48) = v50;
      *(float *)(v8 + 64) = v50;
      return (btStridingMeshInterface *)v8;
    }
    if (!memcmp(&__s1, kC3DPlaneCallBacks, 0x30uLL))
    {
      v58 = C3DParametricGeometryGetFloatValue((uint64_t)a1, 0);
      v56 = C3DParametricGeometryGetFloatValue((uint64_t)a1, 1);
      v8 = btAlignedAllocInternal(224, 16);
      v51.f64[0] = v58;
      v51.f64[1] = v56;
      v61 = (btVector3)*(unint64_t *)&vmul_f32(vcvt_f32_f64(v51), (float32x2_t)0x3F0000003F000000);
      btBox2dShape::btBox2dShape((btBox2dShape *)v8, (float32x4_t *)&v61);
      return (btStridingMeshInterface *)v8;
    }
  }
  else
  {
    if (v4 == C3DFloorGetTypeID())
    {
      v5 = (__n128 *)C3DGetScene(a1);
      v61.var0.var0[2] = 0.0;
      *(_QWORD *)v61.var0.var0 = 0;
      if (v5)
        C3DSceneGetUpAxis(v5, (__n128 *)&v61);
      else
        v61 = (btVector3)xmmword_1DD007920;
      v8 = btAlignedAllocInternal(112, 16);
      __s1.i64[0] = *(_QWORD *)v61.var0.var0;
      __s1.i64[1] = LODWORD(v61.var0.var0[2]);
      btStaticPlaneShape::btStaticPlaneShape((btStaticPlaneShape *)v8, &__s1, 0.0);
      return (btStridingMeshInterface *)v8;
    }
    Mesh = (__C3DMesh *)C3DGeometryGetMesh((uint64_t)a1);
    if (Mesh)
      return _createShapeForEntity(Mesh, a2);
  }
  return 0;
}

void sub_1DCD99520(_Unwind_Exception *a1)
{
  void **v1;

  btAlignedFreeInternal(v1);
  _Unwind_Resume(a1);
}

btStridingMeshInterface *_createShapeForNode(__C3DMesh *a1, NSDictionary *a2)
{
  id v4;
  uint64_t v5;
  int v6;
  btCompoundShape *v7;
  simd_float4x4 *WorldMatrix;
  NSObject *v10;
  _QWORD v11[4];
  simd_float4x4 v12;
  NSDictionary *v13;
  btCompoundShape *v14;
  simd_float4x4 v15;
  _QWORD v16[5];

  v4 = -[NSDictionary valueForKey:](a2, "valueForKey:", CFSTR("SCNPhysicsShapeKeepAsCompoundKey"));
  if (v4 && !objc_msgSend(v4, "BOOLValue"))
    return _createShapeForEntity(a1, a2);
  v15.columns[0].i64[0] = 0;
  v15.columns[0].i64[1] = (uint64_t)&v15;
  v15.columns[1].i64[0] = 0x2020000000;
  v5 = MEMORY[0x1E0C809B0];
  v15.columns[1].i32[2] = 0;
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = ___Z19_createShapeForNodeP9__C3DNodeP12NSDictionary_block_invoke;
  v16[3] = &unk_1EA59F880;
  v16[4] = &v15;
  C3DNodeApplyHierarchy((uint64_t)a1, (uint64_t)v16);
  v6 = *(_DWORD *)(v15.columns[0].i64[1] + 24);
  _Block_object_dispose(&v15, 8);
  if (v6 < 2)
    return _createShapeForEntity(a1, a2);
  v7 = (btCompoundShape *)btAlignedAllocInternal(128, 16);
  btCompoundShape::btCompoundShape(v7, 1);
  WorldMatrix = (simd_float4x4 *)C3DNodeGetWorldMatrix((float32x4_t *)a1);
  C3DMatrix4x4Invert(WorldMatrix, &v15);
  v11[0] = v5;
  v11[1] = 3221225472;
  v11[2] = ___Z19_createShapeForNodeP9__C3DNodeP12NSDictionary_block_invoke_2;
  v11[3] = &unk_1EA59F8A8;
  v12 = v15;
  v13 = a2;
  v14 = v7;
  C3DNodeApplyHierarchy((uint64_t)a1, (uint64_t)v11);
  if (*((_DWORD *)v7 + 7))
  {
    btCompoundShape::createAabbTreeFromChildren(v7);
  }
  else
  {
    (*(void (**)(btCompoundShape *))(*(_QWORD *)v7 + 8))(v7);
    v10 = scn_default_log();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      _createShapeForNode();
    return 0;
  }
  return v7;
}

void sub_1DCD996F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  void **v23;

  btAlignedFreeInternal(v23);
  _Unwind_Resume(a1);
}

btCompoundShape *_createShapeForArrayOfShapes(NSArray *a1, NSArray *a2)
{
  btCompoundShape *v4;
  NSObject *v5;
  _QWORD v7[6];

  v4 = (btCompoundShape *)btAlignedAllocInternal(128, 16);
  btCompoundShape::btCompoundShape(v4, 0);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = ___Z28_createShapeForArrayOfShapesP7NSArrayS0__block_invoke;
  v7[3] = &unk_1EA59F858;
  v7[4] = a2;
  v7[5] = v4;
  -[NSArray enumerateObjectsUsingBlock:](a1, "enumerateObjectsUsingBlock:", v7);
  if (*((_DWORD *)v4 + 7))
  {
    btCompoundShape::createAabbTreeFromChildren(v4);
  }
  else
  {
    (*(void (**)(btCompoundShape *))(*(_QWORD *)v4 + 8))(v4);
    v5 = scn_default_log();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      _createShapeForNode();
    return 0;
  }
  return v4;
}

void sub_1DCD997E8(_Unwind_Exception *a1)
{
  void **v1;

  btAlignedFreeInternal(v1);
  _Unwind_Resume(a1);
}

BOOL __fillMeshElementInfo(uint64_t a1, const UInt8 **a2, _DWORD *a3, int *a4, int *a5)
{
  NSObject *v10;
  _BOOL8 result;
  uint64_t Indexes;
  const __CFData *v13;
  int IndexCount;
  int v15;
  int v16;
  NSObject *v17;
  uint8_t v18[12];
  int v19;

  if (C3DMeshElementGetType(a1))
  {
    v10 = scn_default_log();
    result = os_log_type_enabled(v10, OS_LOG_TYPE_INFO);
    if (!result)
      return result;
    *(_WORD *)v18 = 0;
    _os_log_impl(&dword_1DCCB8000, v10, OS_LOG_TYPE_INFO, "Info: Non triangle list element type not yet supported in physics shape generation", v18, 2u);
    return 0;
  }
  v19 = 0;
  Indexes = C3DMeshElementGetIndexes(a1, &v19);
  if (Indexes)
  {
    v13 = (const __CFData *)Indexes;
    IndexCount = C3DMeshElementGetIndexCount(a1);
    *a2 = CFDataGetBytePtr(v13);
    v15 = v19;
    *a3 = 3 * v19;
    *a4 = IndexCount / 3;
    switch(v15)
    {
      case 1:
        v16 = 5;
        goto LABEL_11;
      case 4:
        v16 = 2;
        goto LABEL_11;
      case 2:
        v16 = 3;
LABEL_11:
        *a5 = v16;
        return 1;
    }
    v17 = scn_default_log();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT))
      __fillMeshElementInfo(v17);
  }
  return 0;
}

uint64_t _createMeshInterfaceForMesh(__C3DMesh *a1)
{
  uint64_t v2;
  const void *SourceWithSemanticAtIndex;
  uint64_t Accessor;
  int Library;
  int Count;
  const __CFData *Data;
  const UInt8 *BytePtr;
  int ComponentsValueType;
  int v10;
  uint64_t result;
  int v12;
  const __CFArray *ElementsCount;
  const __CFArray *v14;
  CFIndex i;
  const void *ElementAtIndex;
  uint64_t v17;
  int v18;
  int v19;
  const UInt8 *v20;
  _DWORD v21[2];
  const UInt8 *v22;
  int v23;
  int v24;
  int v25;

  v2 = btAlignedAllocInternal(112, 16);
  *(_OWORD *)(v2 + 16) = xmmword_1DD008470;
  *(_QWORD *)v2 = off_1EA597C90;
  *(_BYTE *)(v2 + 56) = 1;
  *(_QWORD *)(v2 + 48) = 0;
  *(_DWORD *)(v2 + 36) = 0;
  *(_DWORD *)(v2 + 40) = 0;
  v17 = v2;
  *(_DWORD *)(v2 + 72) = 0;
  SourceWithSemanticAtIndex = C3DMeshGetSourceWithSemanticAtIndex((uint64_t)a1, 0, 0, 1);
  Accessor = C3DMeshSourceGetAccessor(SourceWithSemanticAtIndex);
  Library = C3DSceneSourceGetLibrary(Accessor);
  Count = C3DMeshSourceGetCount((uint64_t)SourceWithSemanticAtIndex);
  Data = (const __CFData *)C3DMeshSourceGetData(SourceWithSemanticAtIndex);
  BytePtr = CFDataGetBytePtr(Data);
  ComponentsValueType = C3DSourceAccessorGetComponentsValueType(Accessor);
  if (ComponentsValueType == 1)
  {
    v12 = 0;
  }
  else
  {
    v10 = ComponentsValueType;
    result = 0;
    if (v10 != 6)
      return result;
    v12 = 1;
  }
  ElementsCount = C3DMeshGetElementsCount((uint64_t)a1);
  if ((uint64_t)ElementsCount >= 1)
  {
    v14 = ElementsCount;
    for (i = 0; (const __CFArray *)i != v14; ++i)
    {
      ElementAtIndex = C3DMeshGetElementAtIndex((uint64_t)a1, i, 1);
      v22 = BytePtr;
      v23 = Library;
      v24 = 2;
      v25 = v12;
      v21[1] = Count;
      v18 = 0;
      if (__fillMeshElementInfo((uint64_t)ElementAtIndex, &v20, v21, &v19, &v18))
        btTriangleIndexVertexArray::addIndexedMesh(v17, (uint64_t)&v19, v18);
    }
  }
  return v17;
}

__n128 btTriangleIndexVertexArray::addIndexedMesh(uint64_t a1, uint64_t a2, int a3)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  __int128 *v12;
  __int128 v13;
  __int128 v14;
  void **v15;
  uint64_t v16;
  __n128 result;
  __int128 v18;

  v6 = *(_DWORD *)(a1 + 36);
  if (v6 == *(_DWORD *)(a1 + 40))
  {
    v7 = v6 ? 2 * v6 : 1;
    if (v6 < v7)
    {
      if (v7)
      {
        v8 = btAlignedAllocInternal(48 * v7, 16);
        v6 = *(_DWORD *)(a1 + 36);
      }
      else
      {
        v8 = 0;
      }
      if (v6 >= 1)
      {
        v9 = 0;
        v10 = 48 * v6;
        do
        {
          v11 = (_OWORD *)(v8 + v9);
          v12 = (__int128 *)(*(_QWORD *)(a1 + 48) + v9);
          v13 = *v12;
          v14 = v12[2];
          v11[1] = v12[1];
          v11[2] = v14;
          *v11 = v13;
          v9 += 48;
        }
        while (v10 != v9);
      }
      v15 = *(void ***)(a1 + 48);
      if (v15 && *(_BYTE *)(a1 + 56))
        btAlignedFreeInternal(v15);
      *(_BYTE *)(a1 + 56) = 1;
      *(_QWORD *)(a1 + 48) = v8;
      *(_DWORD *)(a1 + 40) = v7;
      v6 = *(_DWORD *)(a1 + 36);
    }
  }
  v16 = *(_QWORD *)(a1 + 48) + 48 * v6;
  result = *(__n128 *)a2;
  v18 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v16 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v16 + 32) = v18;
  *(__n128 *)v16 = result;
  LODWORD(v16) = *(_DWORD *)(a1 + 36);
  *(_DWORD *)(a1 + 36) = v16 + 1;
  *(_DWORD *)(*(_QWORD *)(a1 + 48) + 48 * (int)v16 + 36) = a3;
  return result;
}

btC3DMultiMeshInterface *_createMeshInterfaceForEntity(__C3DMesh *a1)
{
  CFTypeID v2;
  btC3DMultiMeshInterface *v4;

  v2 = CFGetTypeID(a1);
  if (v2 == C3DMeshGetTypeID())
    return (btC3DMultiMeshInterface *)_createMeshInterfaceForMesh(a1);
  if (v2 != C3DNodeGetTypeID())
    return 0;
  v4 = (btC3DMultiMeshInterface *)btAlignedAllocInternal(96, 16);
  btC3DMultiMeshInterface::btC3DMultiMeshInterface(v4, (float32x4_t *)a1);
  return v4;
}

void sub_1DCD99CFC(_Unwind_Exception *a1)
{
  void **v1;

  btAlignedFreeInternal(v1);
  _Unwind_Resume(a1);
}

btStridingMeshInterface *_createConvexHullForEntity(__C3DMesh *a1)
{
  btStridingMeshInterface *MeshInterfaceForEntity;
  int v3;
  int v4;
  uint64_t v5;
  int i;
  void **v7;
  int v8;
  uint64_t v9;
  _OWORD *v10;
  void **v11;
  __int128 v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _DWORD *v17;
  __int128 v18;
  btConvexTriangleMeshShape *v19;
  btShapeHull *v20;
  float v21;
  const float *v22;
  int v23;
  const unsigned int *v24;
  int v25;
  int v26;
  NSObject *v27;
  id *ObjCWrapper;
  void **v29;
  id *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint8_t v37[16];
  uint8_t buf[4];
  int v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  MeshInterfaceForEntity = _createMeshInterfaceForEntity(a1);
  if (!MeshInterfaceForEntity)
    return MeshInterfaceForEntity;
  v31 = (id *)a1;
  v3 = 0;
  v4 = 0;
  v5 = 0;
  for (i = 0; ; ++i)
  {
    v7 = (void **)v5;
    v8 = v4;
    if (i >= (*(int (**)(btStridingMeshInterface *))(*(_QWORD *)MeshInterfaceForEntity + 56))(MeshInterfaceForEntity))
      break;
    v36 = 0;
    *(_QWORD *)v37 = 0;
    v35 = 0;
    v33 = 0;
    v34 = 0;
    v32 = 0;
    (*(void (**)(btStridingMeshInterface *, uint8_t *, char *, uint64_t *, int *, uint64_t *, char *, uint64_t *, int *, int))(*(_QWORD *)MeshInterfaceForEntity + 32))(MeshInterfaceForEntity, v37, (char *)&v36 + 4, &v36, &v35, &v34, (char *)&v33 + 4, &v33, &v32, i);
    v4 += HIDWORD(v36);
    if ((v36 & 0x8000000000000000) == 0 && HIDWORD(v36) && v3 < v4)
    {
      if (v4)
        v5 = btAlignedAllocInternal(16 * v4, 16);
      else
        v5 = 0;
      if (v8 >= 1)
      {
        v9 = v8;
        v10 = (_OWORD *)v5;
        v11 = v7;
        do
        {
          v12 = *(_OWORD *)v11;
          v11 += 2;
          *v10++ = v12;
          --v9;
        }
        while (v9);
LABEL_16:
        btAlignedFreeInternal(v7);
        v3 = v4;
        goto LABEL_17;
      }
      if (v7)
        goto LABEL_16;
      v3 = v4;
    }
LABEL_17:
    if ((_DWORD)v36)
    {
      if ((_createConvexHullForEntity(__C3DEntity *)::done & 1) == 0)
      {
        _createConvexHullForEntity(__C3DEntity *)::done = 1;
        v13 = scn_default_log();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109120;
          v39 = v36;
          _os_log_error_impl(&dword_1DCCB8000, v13, OS_LOG_TYPE_ERROR, "Error: vertex format not supported for physics shape creation (%d)", buf, 8u);
        }
      }
    }
    else
    {
      v14 = HIDWORD(v36);
      if (SHIDWORD(v36) >= 1)
      {
        v15 = v35;
        v16 = (_OWORD *)(v5 + 16 * v8);
        v17 = (_DWORD *)(*(_QWORD *)v37 + 8);
        do
        {
          *(_QWORD *)&v18 = *((_QWORD *)v17 - 1);
          DWORD2(v18) = *v17;
          v17 = (_DWORD *)((char *)v17 + v15);
          *((_QWORD *)&v18 + 1) = DWORD2(v18);
          *v16++ = v18;
          --v14;
        }
        while (v14);
      }
    }
  }
  v19 = (btConvexTriangleMeshShape *)btAlignedAllocInternal(128, 16);
  btConvexTriangleMeshShape::btConvexTriangleMeshShape(v19, MeshInterfaceForEntity, 1);
  v20 = (btShapeHull *)btAlignedAllocInternal(80, 16);
  btShapeHull::btShapeHull(v20, v19);
  v21 = (*(float (**)(btConvexTriangleMeshShape *))(*(_QWORD *)v19 + 96))(v19);
  btShapeHull::buildHull(v20, v21);
  (*(void (**)(btConvexTriangleMeshShape *))(*(_QWORD *)v19 + 8))(v19);
  (*(void (**)(btStridingMeshInterface *))(*(_QWORD *)MeshInterfaceForEntity + 8))(MeshInterfaceForEntity);
  v22 = (const float *)*((_QWORD *)v20 + 2);
  v23 = btShapeHull::numVertices(v20);
  v24 = (const unsigned int *)*((_QWORD *)v20 + 6);
  v25 = btShapeHull::numTriangles(v20);
  if (v23 && v22)
  {
    v26 = v25;
    MeshInterfaceForEntity = (btStridingMeshInterface *)btAlignedAllocInternal(192, 16);
    btConvexHullShape::btConvexHullShape(MeshInterfaceForEntity, v22, v23, 16, v24, v26);
  }
  else
  {
    v27 = scn_default_log();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      ObjCWrapper = C3DEntityGetObjCWrapper(v31);
      *(_DWORD *)v37 = 138412290;
      *(_QWORD *)&v37[4] = ObjCWrapper;
      _os_log_impl(&dword_1DCCB8000, v27, OS_LOG_TYPE_DEFAULT, "Warning: Cannot create convex hull for entity %@", v37, 0xCu);
    }
    MeshInterfaceForEntity = 0;
  }
  btShapeHull::~btShapeHull(v20);
  btAlignedFreeInternal(v29);
  if (v7)
    btAlignedFreeInternal(v7);
  return MeshInterfaceForEntity;
}

void sub_1DCD9A064(_Unwind_Exception *exception_object)
{
  void **v1;

  if (v1)
    btAlignedFreeInternal(v1);
  _Unwind_Resume(exception_object);
}

btBvhTriangleMeshShape *_createConcaveTriMeshForEntity(__C3DMesh *a1)
{
  btC3DMultiMeshInterface *MeshInterfaceForEntity;
  btStridingMeshInterface *v2;
  btBvhTriangleMeshShape *v3;
  btTriangleInfoMap *v4;

  MeshInterfaceForEntity = _createMeshInterfaceForEntity(a1);
  if (!MeshInterfaceForEntity)
    return 0;
  v2 = MeshInterfaceForEntity;
  v3 = (btBvhTriangleMeshShape *)btAlignedAllocInternal(112, 16);
  btBvhTriangleMeshShape::btBvhTriangleMeshShape(v3, v2, 1, 1);
  v4 = (btTriangleInfoMap *)operator new();
  btTriangleInfoMap::btTriangleInfoMap(v4);
  btGenerateInternalEdgeInfo((uint64_t)v3, v4);
  return v3;
}

void sub_1DCD9A154(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1;
  MEMORY[0x1DF0D41C0](v2, 0x10B1C403C62072ELL);
  _Unwind_Resume(a1);
}

double ___Z28_createShapeForArrayOfShapesP7NSArrayS0__block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  double result;
  btCollisionShape *v7;
  uint64_t v8;
  void *v9;
  btVector3 v10;
  btVector3 v11;
  btVector3 v12;
  btVector3 v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  float v21;
  float v22;
  uint64_t v23;
  unsigned int v24;
  btTransform v25;

  v5 = objc_msgSend(a2, "_handle");
  if (v5)
  {
    v7 = (btCollisionShape *)v5;
    v8 = objc_msgSend(*(id *)(a1 + 32), "objectAtIndex:", a3);
    if (v8 && (v9 = (void *)v8, objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    {
      objc_msgSend(v9, "SCNMatrix4Value");
      *(_QWORD *)v10.var0.var0 = v23;
      *(_QWORD *)v11.var0.var0 = __PAIR64__(v17, v14);
      *(_QWORD *)&v11.var0.var0[2] = v20;
      *(_QWORD *)v12.var0.var0 = __PAIR64__(v18, v15);
      v12.var0.var0[2] = v21;
      *(_QWORD *)v13.var0.var0 = __PAIR64__(v19, v16);
      v13.var0.var0[2] = v22;
      *(_QWORD *)&v10.var0.var0[2] = v24;
      v25.var0.var0[0] = v11;
      v25.var0.var0[1] = v12;
      v25.var0.var0[2] = v13;
      v25.var1 = v10;
    }
    else
    {
      v25.var0.var0[0] = (btVector3)xmmword_1DD007970;
      v25.var0.var0[1] = (btVector3)xmmword_1DD007920;
      v25.var0.var0[2] = (btVector3)xmmword_1DD007600;
      v25.var1 = 0uLL;
    }
    *(_QWORD *)&result = btCompoundShape::addChildShape((btCompoundShape *)*(_QWORD *)(a1 + 40), &v25, v7, 0).n128_u64[0];
  }
  return result;
}

btStridingMeshInterface *_createShapeForEntity(__C3DMesh *a1, NSDictionary *a2)
{
  id v3;
  CFTypeID v4;
  btConvexHullShape *v5;
  int8x16_t v6;
  int8x16_t v7;
  int8x16_t v8;
  __int128 v9;
  int32x4_t v10;
  int8x16_t v11;
  int32x4_t v12;
  int8x16_t v14;
  int32x4_t v15;
  unsigned int v16[4];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _OWORD v25[3];
  __int32 v26;
  int8x16_t v27;
  __int32 v28;
  __int128 v29;
  int8x8_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v3 = -[NSDictionary valueForKey:](a2, "valueForKey:", CFSTR("SCNPhysicsShapeTypeKey"));
  if (objc_msgSend(v3, "isEqualToString:", CFSTR("boundingBox")))
  {
    v15.i32[2] = 0;
    v15.i64[0] = 0;
    v14.i32[2] = 0;
    v14.i64[0] = 0;
    v4 = CFGetTypeID(a1);
    if (v4 == C3DMeshGetTypeID())
      C3DMeshGetBoundingBox((uint64_t)a1, &v15, &v14);
    else
      C3DGetBoundingBox(a1, 1, (uint64_t)&v15, (uint64_t)&v14);
    v6 = (int8x16_t)vrev64q_s32(v15);
    v7 = vextq_s8(v14, (int8x16_t)v15, 4uLL);
    v8 = vextq_s8(v7, v7, 8uLL);
    v8.i32[0] = v15.i32[2];
    *(_QWORD *)&v9 = v14.i64[0];
    *((_QWORD *)&v9 + 1) = __PAIR64__(v14.u32[0], v15.u32[2]);
    v10 = v15;
    v10.i32[3] = v15.i32[0];
    v11 = vextq_s8((int8x16_t)v15, v6, 4uLL);
    v12 = vzip1q_s32((int32x4_t)v6, (int32x4_t)v14);
    v12.i32[1] = v14.i32[2];
    v25[0] = v10;
    v25[1] = v12;
    v25[2] = v8;
    v26 = v14.i32[0];
    v11.i32[2] = v14.i32[0];
    v27 = v11;
    v28 = v14.i32[2];
    v29 = v9;
    v30 = vext_s8(*(int8x8_t *)v14.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL), 4uLL);
    v22 = xmmword_1DD008524;
    v23 = unk_1DD008534;
    v24 = xmmword_1DD008544;
    v18 = xmmword_1DD0084E4;
    v19 = unk_1DD0084F4;
    v20 = xmmword_1DD008504;
    v21 = unk_1DD008514;
    *(_OWORD *)v16 = xmmword_1DD0084C4;
    v17 = unk_1DD0084D4;
    v5 = (btConvexHullShape *)btAlignedAllocInternal(192, 16);
    btConvexHullShape::btConvexHullShape(v5, (const float *)v25, 8, 12, v16, 12);
    return v5;
  }
  if ((objc_msgSend(v3, "isEqualToString:", CFSTR("convexDecomposition")) & 1) != 0)
    return 0;
  if (objc_msgSend(v3, "isEqualToString:", CFSTR("concaveMesh")))
    return _createConcaveTriMeshForEntity(a1);
  else
    return _createConvexHullForEntity(a1);
}

void sub_1DCD9A4C4(_Unwind_Exception *a1)
{
  void **v1;

  btAlignedFreeInternal(v1);
  _Unwind_Resume(a1);
}

uint64_t ___Z19_createShapeForNodeP9__C3DNodeP12NSDictionary_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t Geometry;
  uint64_t v4;
  int v5;

  Geometry = C3DNodeGetGeometry(a2);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = *(_DWORD *)(v4 + 24);
  if (Geometry)
    ++v5;
  *(_DWORD *)(v4 + 24) = v5;
  return 2 * (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) > 1);
}

uint64_t ___Z19_createShapeForNodeP9__C3DNodeP12NSDictionary_block_invoke_2(uint64_t a1, float32x4_t *a2)
{
  __C3DGeometry *Geometry;
  btStridingMeshInterface *ShapeForGeometry;
  btCollisionShape *v6;
  float32x4_t *WorldMatrix;
  btTransform v9;
  __int128 v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;

  Geometry = (__C3DGeometry *)C3DNodeGetGeometry((uint64_t)a2);
  if (Geometry)
  {
    ShapeForGeometry = _createShapeForGeometry(Geometry, *(NSDictionary **)(a1 + 96));
    if (ShapeForGeometry)
    {
      v6 = (btCollisionShape *)ShapeForGeometry;
      WorldMatrix = C3DNodeGetWorldMatrix(a2);
      C3DMatrix4x4Mult((uint64_t)WorldMatrix, (float32x4_t *)(a1 + 32), &v10);
      *(_QWORD *)v9.var0.var0[0].var0.var0 = __PAIR64__(v11, v10);
      *(_QWORD *)&v9.var0.var0[0].var0.var0[2] = v14;
      *(_QWORD *)v9.var0.var0[1].var0.var0 = __PAIR64__(v12, DWORD1(v10));
      *(_QWORD *)&v9.var0.var0[1].var0.var0[2] = v15;
      *(_QWORD *)v9.var0.var0[2].var0.var0 = __PAIR64__(v13, DWORD2(v10));
      *(_QWORD *)&v9.var0.var0[2].var0.var0[2] = v16;
      *(_QWORD *)v9.var1.var0.var0 = v17;
      *(_QWORD *)&v9.var1.var0.var0[2] = v18;
      btCompoundShape::addChildShape(*(btCompoundShape **)(a1 + 104), &v9, v6, 1);
    }
  }
  return 0;
}

void sub_1DCD9A720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

btCollisionShape *C3DPhysicsShapeGetDefaultShapeForEntity(CFTypeRef *a1, SCNVector3 a2)
{
  float x;
  float z;
  float y;
  __CFString *Copy;
  const __CFDictionary *v9;
  double v10;
  double v11;
  double v12;
  SCNPhysicsShape *Attribute;

  x = a2.x;
  if (a2.x == 1.0 && a2.y == 1.0 && a2.z == 1.0)
  {
    Copy = (__CFString *)CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], CFSTR("physicsShape"));
    Attribute = (SCNPhysicsShape *)C3DEntityGetAttribute((uint64_t)a1, Copy);
    if (Attribute)
      goto LABEL_14;
LABEL_13:
    Attribute = -[SCNPhysicsShape initWithCachedObject:options:]([SCNPhysicsShape alloc], "initWithCachedObject:options:", a1, Attribute);
    C3DEntitySetAttribute(a1, Copy, (const __CFDictionary *)Attribute);

    goto LABEL_14;
  }
  z = a2.z;
  y = a2.y;
  Copy = (__CFString *)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("physicsShape[%f,%f,%f]"), a2.x, a2.y, a2.z);
  v9 = C3DEntityGetAttribute((uint64_t)a1, Copy);
  if (!v9)
  {
    *(float *)&v10 = x;
    *(float *)&v11 = y;
    *(float *)&v12 = z;
    Attribute = (SCNPhysicsShape *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithSCNVector3:", v10, v11, v12), CFSTR("SCNPhysicsShapeScaleKey"));
    goto LABEL_13;
  }
  Attribute = (SCNPhysicsShape *)v9;
LABEL_14:
  CFRelease(Copy);
  return -[SCNPhysicsShape _handle](Attribute, "_handle");
}

btCollisionShape *C3DPhysicsShapeGetDefaultShapeForNode(float32x4_t *a1)
{
  float32x4_t *WorldMatrix;
  CFTypeRef *Geometry;
  __int32 v4;
  __int32 v5;
  __int32 v6;
  float32x4_t v8[2];
  float32x4_t v9;

  v9.i32[2] = 0;
  v9.i64[0] = 0;
  WorldMatrix = C3DNodeGetWorldMatrix(a1);
  C3DMatrix4x4GetScale(WorldMatrix, &v9);
  Geometry = (CFTypeRef *)C3DNodeGetGeometry((uint64_t)a1);
  if (Geometry)
  {
    v5 = v9.i32[1];
    v4 = v9.i32[0];
    v6 = v9.i32[2];
    return C3DPhysicsShapeGetDefaultShapeForEntity(Geometry, *(SCNVector3 *)&v4);
  }
  if (C3DNodeComputeHierarchicalBoundingBox(a1, 1, v8))
  {
    v5 = v9.i32[1];
    v4 = v9.i32[0];
    v6 = v9.i32[2];
    Geometry = (CFTypeRef *)a1;
    return C3DPhysicsShapeGetDefaultShapeForEntity(Geometry, *(SCNVector3 *)&v4);
  }
  return 0;
}

void btC3DMultiMeshInterface::btC3DMultiMeshInterface(btC3DMultiMeshInterface *this, float32x4_t *a2)
{
  simd_float4x4 *WorldMatrix;
  _QWORD v5[4];
  simd_float4x4 v6;
  btC3DMultiMeshInterface *v7;
  simd_float4x4 v8;

  *((_OWORD *)this + 1) = xmmword_1DD008470;
  *(_QWORD *)this = off_1EA5973B8;
  *((_BYTE *)this + 56) = 1;
  *((_QWORD *)this + 6) = 0;
  *(_QWORD *)((char *)this + 36) = 0;
  *((_BYTE *)this + 88) = 1;
  *((_QWORD *)this + 10) = 0;
  *(_QWORD *)((char *)this + 68) = 0;
  WorldMatrix = (simd_float4x4 *)C3DNodeGetWorldMatrix(a2);
  C3DMatrix4x4Invert(WorldMatrix, &v8);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = ___ZN23btC3DMultiMeshInterfaceC2EP9__C3DNode_block_invoke;
  v5[3] = &__block_descriptor_104_e20_q16__0____C3DNode__8l;
  v7 = this;
  v6 = v8;
  C3DNodeApplyHierarchy((uint64_t)a2, (uint64_t)v5);
}

void sub_1DCD9AD04(_Unwind_Exception *a1)
{
  uint64_t v1;

  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray(v1 + 64);
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray(v1 + 32);
  C3DSceneSourcePerformConsistencyCheck(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN23btC3DMultiMeshInterfaceC2EP9__C3DNode_block_invoke(float32x4_t *a1, float32x4_t *a2)
{
  uint64_t v4;
  uint64_t Geometry;
  uint64_t Mesh;
  const void *v7;
  float32x4_t *WorldMatrix;
  const void *SourceWithSemanticAtIndex;
  uint64_t v10;
  uint64_t Accessor;
  uint64_t Library;
  uint64_t Count;
  const __CFData *Data;
  const UInt8 *BytePtr;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  int ComponentsValueType;
  float32x4_t v23;
  int v24;
  int v25;
  uint64_t v26;
  float32_t v27;
  int32x4_t v28;
  NSObject *v29;
  const __CFArray *ElementsCount;
  const __CFArray *i;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD *v37;
  _OWORD *v38;
  __int128 v39;
  void **v40;
  uint64_t v41;
  float32x4_t v43[4];
  _OWORD v44[4];
  uint8_t buf[4];
  int v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v4 = a1[6].i64[0];
  Geometry = C3DNodeGetGeometry((uint64_t)a2);
  if (Geometry)
  {
    Mesh = C3DGeometryGetMesh(Geometry);
    if (Mesh)
    {
      v7 = (const void *)Mesh;
      WorldMatrix = C3DNodeGetWorldMatrix(a2);
      C3DMatrix4x4Mult((uint64_t)WorldMatrix, a1 + 2, v44);
      SourceWithSemanticAtIndex = C3DMeshGetSourceWithSemanticAtIndex((uint64_t)v7, 0, 0, 1);
      v10 = (uint64_t)SourceWithSemanticAtIndex;
      if (SourceWithSemanticAtIndex)
      {
        Accessor = C3DMeshSourceGetAccessor(SourceWithSemanticAtIndex);
        Library = C3DSceneSourceGetLibrary(Accessor);
        Count = C3DMeshSourceGetCount(v10);
        Data = (const __CFData *)C3DMeshSourceGetData(v10);
        BytePtr = CFDataGetBytePtr(Data);
        v16 = *(_DWORD *)(v4 + 68);
        v17 = v16 + Count;
        if ((int)Count >= 1 && *(_DWORD *)(v4 + 72) < v17)
        {
          if (v17)
            v18 = btAlignedAllocInternal(16 * v17, 16);
          else
            v18 = 0;
          if (*(int *)(v4 + 68) >= 1)
          {
            v19 = 0;
            v20 = 16 * *(unsigned int *)(v4 + 68);
            do
            {
              *(_OWORD *)(v18 + v19) = *(_OWORD *)(*(_QWORD *)(v4 + 80) + v19);
              v19 += 16;
            }
            while (v20 != v19);
          }
          v21 = *(void ***)(v4 + 80);
          if (v21 && *(_BYTE *)(v4 + 88))
            btAlignedFreeInternal(v21);
          *(_BYTE *)(v4 + 88) = 1;
          *(_QWORD *)(v4 + 80) = v18;
          *(_DWORD *)(v4 + 72) = v17;
        }
        *(_DWORD *)(v4 + 68) = v17;
        ComponentsValueType = C3DSourceAccessorGetComponentsValueType(Accessor);
        v24 = ComponentsValueType;
        if (ComponentsValueType == 6 || (unsigned __int16)ComponentsValueType == 1)
        {
          if (Count >= 1)
          {
            v25 = v16;
            v26 = Count;
            do
            {
              if (v24 == 1)
              {
                v23.i64[0] = *(_QWORD *)BytePtr;
                v23.i32[2] = *((_DWORD *)BytePtr + 2);
              }
              else
              {
                v23 = *(float32x4_t *)BytePtr;
                *(float32x2_t *)v23.f32 = vcvt_f32_f64(*(float64x2_t *)BytePtr);
                v27 = *((double *)BytePtr + 2);
                v23.f32[2] = v27;
              }
              v28 = (int32x4_t)vmvnq_s8(vorrq_s8((int8x16_t)vcltzq_f32(v23), (int8x16_t)vcgezq_f32(v23)));
              v28.i32[3] = 0;
              v43[0] = (float32x4_t)v44[0];
              v43[1] = (float32x4_t)v44[1];
              v43[2] = (float32x4_t)v44[2];
              v43[3] = (float32x4_t)v44[3];
              *(double *)v23.i64 = C3DVector3MultMatrix4x4(v43, (float32x4_t)vbicq_s8((int8x16_t)v23, (int8x16_t)vcltzq_s32(v28)));
              v23.i32[3] = 0;
              *(float32x4_t *)(*(_QWORD *)(v4 + 80) + 16 * v25++) = v23;
              BytePtr += Library;
              --v26;
            }
            while (v26);
          }
        }
        else
        {
          v29 = scn_default_log();
          if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            v46 = v24;
            _os_log_impl(&dword_1DCCB8000, v29, OS_LOG_TYPE_DEFAULT, "Warning: Physics shape construction does not support meshes with positions value type different from double or float. (%d)", buf, 8u);
          }
        }
        ElementsCount = C3DMeshGetElementsCount((uint64_t)v7);
        if ((uint64_t)ElementsCount >= 1)
        {
          for (i = 0; i != ElementsCount; i = (const __CFArray *)((char *)i + 1))
          {
            CFRetain(v7);
            v32 = *(_DWORD *)(v4 + 36);
            if (v32 == *(_DWORD *)(v4 + 40))
            {
              v33 = v32 ? 2 * v32 : 1;
              if (v32 < v33)
              {
                if (v33)
                {
                  v34 = btAlignedAllocInternal(32 * v33, 16);
                  v32 = *(_DWORD *)(v4 + 36);
                }
                else
                {
                  v34 = 0;
                }
                if (v32 >= 1)
                {
                  v35 = 0;
                  v36 = 32 * v32;
                  do
                  {
                    v37 = (_OWORD *)(v34 + v35);
                    v38 = (_OWORD *)(*(_QWORD *)(v4 + 48) + v35);
                    v39 = v38[1];
                    *v37 = *v38;
                    v37[1] = v39;
                    v35 += 32;
                  }
                  while (v36 != v35);
                }
                v40 = *(void ***)(v4 + 48);
                if (v40 && *(_BYTE *)(v4 + 56))
                  btAlignedFreeInternal(v40);
                *(_BYTE *)(v4 + 56) = 1;
                *(_QWORD *)(v4 + 48) = v34;
                *(_DWORD *)(v4 + 40) = v33;
                v32 = *(_DWORD *)(v4 + 36);
              }
            }
            v41 = *(_QWORD *)(v4 + 48) + 32 * v32;
            *(_QWORD *)v41 = v7;
            *(_QWORD *)(v41 + 8) = i;
            *(_DWORD *)(v41 + 16) = v16;
            *(_DWORD *)(v41 + 20) = Count;
            ++*(_DWORD *)(v4 + 36);
          }
        }
      }
    }
  }
  return 0;
}

void btC3DMultiMeshInterface::~btC3DMultiMeshInterface(btC3DMultiMeshInterface *this)
{
  void **v1;

  btC3DMultiMeshInterface::~btC3DMultiMeshInterface(this);
  btAlignedFreeInternal(v1);
}

{
  int v2;
  uint64_t v3;
  uint64_t i;
  const void *v5;

  *(_QWORD *)this = off_1EA5973B8;
  v2 = *((_DWORD *)this + 9);
  if (v2 >= 1)
  {
    v3 = 0;
    for (i = 0; i < v2; ++i)
    {
      v5 = *(const void **)(*((_QWORD *)this + 6) + v3);
      if (v5)
      {
        CFRelease(v5);
        v2 = *((_DWORD *)this + 9);
      }
      v3 += 32;
    }
  }
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)this + 64);
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)this + 32);
  C3DSceneSourcePerformConsistencyCheck(this);
}

void btC3DMultiMeshInterface::getLockedVertexIndexBase()
{
  NSObject *v0;

  v0 = scn_default_log();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
    btC3DMultiMeshInterface::getLockedVertexIndexBase();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_4(&dword_1DCCB8000, v0, v1, "Unreachable code: This is not yet implemented", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_5();
}

const void *btC3DMultiMeshInterface::getLockedReadOnlyVertexIndexBase(uint64_t a1, _QWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, const UInt8 **a6, _DWORD *a7, int *a8, int *a9, int a10)
{
  uint64_t v13;
  const void *result;

  v13 = *(_QWORD *)(a1 + 48) + 32 * a10;
  *a3 = *(_DWORD *)(v13 + 20);
  *a2 = *(_QWORD *)(a1 + 80) + 16 * *(int *)(v13 + 16);
  *a4 = 0;
  *a5 = 16;
  result = C3DMeshGetElementAtIndex(*(_QWORD *)v13, *(_QWORD *)(v13 + 8), 1);
  if (result)
    return (const void *)__fillMeshElementInfo((uint64_t)result, a6, a7, a8, a9);
  return result;
}

uint64_t btC3DMultiMeshInterface::getNumSubParts(btC3DMultiMeshInterface *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t btStridingMeshInterface::hasPremadeAabb(btStridingMeshInterface *this)
{
  return 0;
}

uint64_t btStridingMeshInterface::calculateSerializeBufferSize(btStridingMeshInterface *this)
{
  return 32;
}

uint64_t btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray(uint64_t a1)
{
  void **v2;

  v2 = *(void ***)(a1 + 16);
  if (v2 && *(_BYTE *)(a1 + 24))
    btAlignedFreeInternal(v2);
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  return a1;
}

void sub_1DCD9B264(_Unwind_Exception *a1)
{
  uint64_t v1;

  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray(v1 + 64);
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray(v1 + 32);
  C3DSceneSourcePerformConsistencyCheck(v1);
  _Unwind_Resume(a1);
}

void btTriangleInfoMap::btTriangleInfoMap(btTriangleInfoMap *this)
{
  *((_BYTE *)this + 32) = 1;
  *((_QWORD *)this + 3) = 0;
  *(_QWORD *)((char *)this + 12) = 0;
  *((_BYTE *)this + 64) = 1;
  *((_QWORD *)this + 7) = 0;
  *(_QWORD *)((char *)this + 44) = 0;
  *((_BYTE *)this + 96) = 1;
  *((_QWORD *)this + 11) = 0;
  *(_QWORD *)((char *)this + 76) = 0;
  *((_BYTE *)this + 128) = 1;
  *((_QWORD *)this + 15) = 0;
  *(_QWORD *)((char *)this + 108) = 0;
  *(_QWORD *)this = &off_1EA5968B0;
  *(_OWORD *)((char *)this + 136) = xmmword_1DD008480;
  *((_QWORD *)this + 19) = 0x322BCC7640C90FDBLL;
}

void btTriangleInfoMap::~btTriangleInfoMap(btTriangleInfoMap *this)
{
  btTriangleInfoMap::~btTriangleInfoMap(this);
  JUMPOUT(0x1DF0D41C0);
}

{
  char *v2;

  v2 = (char *)this + 8;
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)this + 104);
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)this + 72);
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)this + 40);
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)v2);
}

uint64_t btTriangleInfoMap::calculateSerializeBufferSize(btTriangleInfoMap *this)
{
  return 72;
}

const char *btTriangleInfoMap::serialize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  int *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  int *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  int *v36;
  int v37;

  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 136);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 156);
  v6 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a2 + 56) = v6;
  if (v6)
  {
    v7 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 56))(a3, *(_QWORD *)(a1 + 24));
    *(_QWORD *)a2 = v7;
    if (v7)
    {
      v8 = *(unsigned int *)(a2 + 56);
      v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 4, v8);
      v10 = *(_QWORD *)(a1 + 24);
      if ((int)v8 >= 1)
      {
        v11 = *(_DWORD **)(v9 + 8);
        v12 = *(int **)(a1 + 24);
        do
        {
          v13 = *v12++;
          *v11++ = v13;
          --v8;
        }
        while (v8);
      }
      (*(void (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(_QWORD *)a3 + 40))(a3, v9, "int", 1497453121, v10);
    }
  }
  else
  {
    *(_QWORD *)a2 = 0;
  }
  v14 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a2 + 52) = v14;
  if (v14)
  {
    v15 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 56))(a3, *(_QWORD *)(a1 + 56));
    *(_QWORD *)(a2 + 8) = v15;
    if (v15)
    {
      v16 = *(unsigned int *)(a2 + 52);
      v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 4, v16);
      v18 = *(_QWORD *)(a1 + 56);
      if ((int)v16 >= 1)
      {
        v19 = *(_DWORD **)(v17 + 8);
        v20 = *(int **)(a1 + 56);
        do
        {
          v21 = *v20++;
          *v19++ = v21;
          --v16;
        }
        while (v16);
      }
      (*(void (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(_QWORD *)a3 + 40))(a3, v17, "int", 1497453121, v18);
    }
  }
  else
  {
    *(_QWORD *)(a2 + 8) = 0;
  }
  v22 = *(_DWORD *)(a1 + 76);
  *(_DWORD *)(a2 + 60) = v22;
  if (v22)
  {
    v23 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 56))(a3, *(_QWORD *)(a1 + 88));
    *(_QWORD *)(a2 + 16) = v23;
    if (v23)
    {
      v24 = *(unsigned int *)(a2 + 60);
      v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 16, v24);
      v26 = *(_QWORD *)(a1 + 88);
      if ((int)v24 >= 1)
      {
        v27 = *(_QWORD *)(v25 + 8);
        v28 = *(int **)(a1 + 88);
        do
        {
          *(_QWORD *)(v27 + 4) = *(_QWORD *)(v28 + 1);
          *(_DWORD *)(v27 + 12) = v28[3];
          v29 = *v28;
          v28 += 4;
          *(_DWORD *)v27 = v29;
          v27 += 16;
          --v24;
        }
        while (v24);
      }
      (*(void (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(_QWORD *)a3 + 40))(a3, v25, "btTriangleInfoData", 1497453121, v26);
    }
  }
  else
  {
    *(_QWORD *)(a2 + 16) = 0;
  }
  v30 = *(_DWORD *)(a1 + 108);
  *(_DWORD *)(a2 + 64) = v30;
  if (v30)
  {
    v31 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 56))(a3, *(_QWORD *)(a1 + 120));
    *(_QWORD *)(a2 + 24) = v31;
    if (v31)
    {
      v32 = *(unsigned int *)(a2 + 60);
      v33 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 4, v32);
      v34 = *(_QWORD *)(a1 + 120);
      if ((int)v32 >= 1)
      {
        v35 = *(_DWORD **)(v33 + 8);
        v36 = *(int **)(a1 + 120);
        do
        {
          v37 = *v36++;
          *v35++ = v37;
          --v32;
        }
        while (v32);
      }
      (*(void (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(_QWORD *)a3 + 40))(a3, v33, "int", 1497453121, v34);
    }
  }
  else
  {
    *(_QWORD *)(a2 + 24) = 0;
  }
  return "btTriangleInfoMapData";
}

void btBox2dShape::btBox2dShape(btBox2dShape *this, float32x4_t *a2)
{
  uint64_t v4;
  float v5;
  float v6;
  float Margin;
  __n128 v8;
  float v9;
  float32x4_t v10;
  float32x4_t v11;
  __int32 v12;
  float32x4_t v13;

  btPolyhedralConvexShape::btPolyhedralConvexShape(this);
  *(_QWORD *)v4 = &unk_1EA5953C8;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 0;
  *(float32x2_t *)(v4 + 96) = vneg_f32(*(float32x2_t *)a2->f32);
  *(_QWORD *)(v4 + 104) = 0;
  v5 = -a2->f32[1];
  *(_DWORD *)(v4 + 112) = a2->i32[0];
  *(float *)(v4 + 116) = v5;
  *(_QWORD *)(v4 + 120) = 0;
  *(_DWORD *)(v4 + 128) = a2->i32[0];
  *(_DWORD *)(v4 + 132) = a2->i32[1];
  *(_QWORD *)(v4 + 136) = 0;
  *(float *)(v4 + 144) = -a2->f32[0];
  *(_DWORD *)(v4 + 148) = a2->i32[1];
  *(_OWORD *)(v4 + 152) = xmmword_1DD008490;
  *(_QWORD *)(v4 + 168) = 0;
  *(_DWORD *)(v4 + 176) = 1065353216;
  *(_QWORD *)(v4 + 188) = 0;
  *(_QWORD *)(v4 + 180) = 0;
  *(_OWORD *)(v4 + 196) = xmmword_1DD0084A0;
  *(_QWORD *)(v4 + 212) = 0;
  *(_DWORD *)(v4 + 220) = 0;
  if (a2->f32[0] <= a2->f32[1])
    v6 = a2->f32[0];
  else
    v6 = a2->f32[1];
  Margin = btConvexInternalShape::getMargin((btConvexInternalShape *)v4);
  v8.n128_f32[0] = v6 * 0.1;
  if ((float)(v6 * 0.1) < Margin)
    (*(void (**)(btBox2dShape *, float))(*(_QWORD *)this + 88))(this, v8.n128_f32[0]);
  *((_DWORD *)this + 2) = 17;
  v13.i64[0] = (*(double (**)(btBox2dShape *, __n128))(*(_QWORD *)this + 96))(this, v8);
  v12 = COERCE_UNSIGNED_INT64((*(double (**)(btBox2dShape *))(*(_QWORD *)this + 96))(this));
  v9 = (*(float (**)(btBox2dShape *))(*(_QWORD *)this + 96))(this);
  v10 = v13;
  v10.i32[1] = v12;
  v10.f32[2] = v9;
  v11 = vsubq_f32(vmulq_f32(*a2, *((float32x4_t *)this + 2)), v10);
  v11.i32[3] = 0;
  *((float32x4_t *)this + 3) = v11;
}

void sub_1DCD9B76C(_Unwind_Exception *a1)
{
  btPolyhedralConvexShape *v1;

  btPolyhedralConvexShape::~btPolyhedralConvexShape(v1);
  _Unwind_Resume(a1);
}

uint64_t scn_cone_x4_fill(uint64_t result, int32x4_t *a2, unsigned int a3, double a4, double a5, double a6, __n128 a7)
{
  unint64_t v7;
  int32x4_t *v8;
  uint64_t v9;
  int32x4_t v10;
  int32x4_t v11;
  __int32 v12;
  int32x4_t v13;
  int32x4_t v14;
  uint64_t v15;
  int32x4_t v16;
  int32x2_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  uint64_t v21;
  int32x4_t v22;
  float32x2x2_t v23;
  int32x4_t v24;
  __int128 v25;
  float32x2x2_t v26;
  float *v27;
  float *v28;
  int32x4_t v29;
  float *v30;
  float *v31;
  float32x2x2_t v32;
  float32x2x2_t v33;

  if (a3 + 3 >= 4)
  {
    v7 = 0;
    v8 = a2 + 6;
    v9 = result + 64;
    v10 = vdupq_n_s32(0x7F800000u);
    do
    {
      v11 = 0uLL;
      a7.n128_u32[0] = 0;
      v12 = 0;
      v13 = v10;
      v14 = 0uLL;
      if (v7 < a3)
      {
        v13 = v8[-6];
        v14 = v8[-5];
        a7.n128_u32[0] = v8[-4].u32[0];
        v12 = v8[-4].i32[1];
      }
      v15 = 0;
      v16 = v10;
      v17 = 0;
      if (v7 + 1 < a3)
      {
        v16 = v8[-3];
        v11 = v8[-2];
        v17 = *(int32x2_t *)v8[-1].i8;
      }
      v18 = 0uLL;
      v19 = 0uLL;
      v20 = v10;
      if (v7 + 2 < a3)
      {
        v20 = *v8;
        v19 = v8[1];
        v15 = v8[2].i64[0];
      }
      v21 = 0;
      v22 = v10;
      if (v7 + 3 < a3)
      {
        v22 = v8[3];
        v18 = v8[4];
        v21 = v8[5].i64[0];
      }
      v23 = (float32x2x2_t)vzip1q_s32(v13, v20);
      v33.val[0] = (float32x2_t)vzip2q_s32(v13, v20).u64[0];
      v24 = vzip1q_s32(v16, v22);
      v33.val[1] = (float32x2_t)vzip2q_s32(v16, v22).u64[0];
      *(_QWORD *)&v25 = __PAIR64__(v17.u32[1], v12);
      *((_QWORD *)&v25 + 1) = __PAIR64__(HIDWORD(v21), HIDWORD(v15));
      v26 = (float32x2x2_t)vzip1q_s32(v14, v19);
      a7.n128_u64[0] = (unint64_t)vzip1_s32((int32x2_t)a7.n128_u64[0], v17);
      a7.n128_u64[1] = __PAIR64__(v21, v15);
      v27 = (float *)(v9 - 64);
      vst2_f32(v27, v23);
      v28 = (float *)(v9 - 32);
      vst2_f32(v28, v33);
      v32.val[0] = (float32x2_t)vzip2q_s32(v14, v19).u64[0];
      v29 = vzip1q_s32(v11, v18);
      v32.val[1] = (float32x2_t)vzip2q_s32(v11, v18).u64[0];
      v30 = (float *)(v9 - 16);
      vst2_f32(v30, v26);
      *(int32x4_t *)(v9 - 48) = vzip2q_s32((int32x4_t)v23, v24);
      *(int32x4_t *)v9 = vzip2q_s32((int32x4_t)v26, v29);
      v31 = (float *)(v9 + 16);
      vst2_f32(v31, v32);
      *(__n128 *)(v9 + 32) = a7;
      *(_OWORD *)(v9 + 48) = v25;
      v7 += 4;
      v8 += 12;
      v9 += 128;
    }
    while (((a3 + 3) & 0xFFFFFFFC) != v7);
  }
  return result;
}

float32x4_t *scn_cone_x4_filter(float32x4_t *result, int a2, float32x4_t *a3, float32x4_t *a4, uint64_t a5)
{
  uint64_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t *v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  int8x16_t v56;
  unsigned __int8 v57;
  uint64_t v58;

  if (a2)
  {
    v5 = 0;
    v6 = *a3;
    v7 = a3[1];
    v8 = a3[2];
    v9 = a3[3];
    v10 = *a4;
    v11 = a4[1];
    v12 = a4[2];
    v13 = a4[3];
    v14 = vnegq_f32(v8);
    v15 = vnegq_f32(*a3);
    v16 = vnegq_f32(v7);
    v17 = vnegq_f32(v12);
    v18 = vnegq_f32(*a4);
    v19 = vnegq_f32(v11);
    v20 = result + 4;
    do
    {
      v21 = v20[-4];
      v22 = v20[-3];
      v23 = v20[-2];
      v24 = v20[2];
      v25 = vnegq_f32(v24);
      v26 = vaddq_f32(v9, vmlaq_f32(vmlaq_f32(vmulq_f32(v7, v22), v21, v6), v23, v8));
      v27 = vaddq_f32(v13, vmlaq_f32(vmlaq_f32(vmulq_f32(v11, v22), v21, v10), v23, v12));
      if ((vminvq_u32((uint32x4_t)vornq_s8(vmvnq_s8((int8x16_t)vcgeq_f32(v26, v25)), (int8x16_t)vcgeq_f32(v27, v25))) & 0x80000000) != 0)
      {
        if ((v5 & 1) == 0)
          *(_BYTE *)(a5 + (v5 >> 1)) = 0;
      }
      else
      {
        v28 = v20[3];
        v29 = v20[1];
        v30 = v20[-1];
        v31 = vmlaq_f32(vmulq_f32(*v20, v14), v29, v7);
        v32 = vmlaq_f32(vmulq_f32(v29, v15), v30, v8);
        v33 = vmlaq_f32(vmulq_f32(v30, v16), *v20, v6);
        v34 = vmlaq_f32(vmulq_f32(*v20, vnegq_f32(v33)), v29, v32);
        v35 = vmlaq_f32(vmulq_f32(v29, vnegq_f32(v31)), v30, v33);
        v36 = vmlaq_f32(vmulq_f32(v30, vnegq_f32(v32)), *v20, v31);
        v37 = vmlaq_f32(vmlaq_f32(vmulq_f32(v35, v35), v34, v34), v36, v36);
        v38 = vrsqrteq_f32(v37);
        v39 = vmulq_f32(v38, vrsqrtsq_f32(v37, vmulq_f32(v38, v38)));
        v40 = (float32x4_t)vbicq_s8((int8x16_t)vmulq_f32(v39, vrsqrtsq_f32(v37, vmulq_f32(v39, v39))), (int8x16_t)vceqzq_f32(v37));
        v41 = vmlaq_f32(v21, v24, v30);
        v42 = vmlaq_f32(v22, v24, *v20);
        v43 = vmlaq_f32(v23, v24, v29);
        v44 = vaddq_f32(v9, vmlaq_f32(vmlaq_f32(vmulq_f32(v7, vmlaq_f32(v42, v28, vmulq_f32(v40, vnegq_f32(v35)))), vmlaq_f32(v41, v28, vmulq_f32(v40, vnegq_f32(v34))), v6), vmlaq_f32(v43, v28, vmulq_f32(v40, vnegq_f32(v36))), v8));
        v45 = vmlaq_f32(vmulq_f32(*v20, v17), v29, v11);
        v46 = vmlaq_f32(vmulq_f32(v29, v18), v30, v12);
        v47 = vmlaq_f32(vmulq_f32(v30, v19), *v20, v10);
        v48 = vmlaq_f32(vmulq_f32(*v20, vnegq_f32(v47)), v29, v46);
        v49 = vmlaq_f32(vmulq_f32(v29, vnegq_f32(v45)), v30, v47);
        v50 = vmlaq_f32(vmulq_f32(v30, vnegq_f32(v46)), *v20, v45);
        v51 = vmlaq_f32(vmlaq_f32(vmulq_f32(v49, v49), v48, v48), v50, v50);
        v52 = vrsqrteq_f32(v51);
        v53 = vmulq_f32(v52, vrsqrtsq_f32(v51, vmulq_f32(v52, v52)));
        v54 = (float32x4_t)vbicq_s8((int8x16_t)vmulq_f32(v53, vrsqrtsq_f32(v51, vmulq_f32(v53, v53))), (int8x16_t)vceqzq_f32(v51));
        v55 = vaddq_f32(v13, vmlaq_f32(vmlaq_f32(vmulq_f32(v11, vmlaq_f32(v42, v28, vmulq_f32(v54, vnegq_f32(v49)))), vmlaq_f32(v41, v28, vmulq_f32(v54, vnegq_f32(v48))), v10), vmlaq_f32(v43, v28, vmulq_f32(v54, vnegq_f32(v50))), v12));
        v56 = vandq_s8(vandq_s8(vorrq_s8((int8x16_t)vcltzq_f32(vmulq_f32(v26, v44)), (int8x16_t)vcgezq_f32(vminnmq_f32(v26, v44))), vorrq_s8((int8x16_t)vcltzq_f32(vmulq_f32(v27, v55)), (int8x16_t)vcgezq_f32(vminnmq_f32(v27, v55)))), (int8x16_t)xmmword_1DD007E80);
        *(int8x8_t *)v56.i8 = vorr_s8(*(int8x8_t *)v56.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v56, v56, 8uLL));
        v57 = vadd_s32(*(int32x2_t *)v56.i8, vdup_lane_s32(*(int32x2_t *)v56.i8, 1)).u8[0];
        v58 = v5 >> 1;
        if ((v5 & 1) != 0)
          v57 = *(_BYTE *)(a5 + v58) | (16 * v57);
        *(_BYTE *)(a5 + v58) = v57;
      }
      ++v5;
      v20 += 8;
    }
    while (a2 != v5);
  }
  return result;
}

uint64_t scn_sphere_x4_fill(uint64_t result, int32x4_t *a2, unsigned int a3)
{
  unint64_t v3;
  float *v4;
  int32x4_t *v5;
  int32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;
  float32x2x2_t v10;
  int32x4_t v11;
  __int128 v12;
  float *v13;
  float *v14;
  _OWORD *v15;
  float32x2x2_t v16;

  if (a3 + 3 >= 4)
  {
    v3 = 0;
    v4 = (float *)(result + 32);
    v5 = a2 + 2;
    do
    {
      v6 = (int32x4_t)xmmword_1DD008560;
      if (v3 < a3)
        v6 = v5[-2];
      v7 = (int32x4_t)xmmword_1DD008560;
      if (v3 + 1 < a3)
        v7 = v5[-1];
      v8 = (int32x4_t)xmmword_1DD008560;
      if (v3 + 2 < a3)
        v8 = *v5;
      v9 = (int32x4_t)xmmword_1DD008560;
      if (v3 + 3 < a3)
        v9 = v5[1];
      v10 = (float32x2x2_t)vzip1q_s32(v6, v8);
      v16.val[0] = (float32x2_t)vzip2q_s32(v6, v8).u64[0];
      v11 = vzip1q_s32(v7, v9);
      *(_QWORD *)&v12 = vuzp2q_s32(vuzp2q_s32(v6, v7), v6).u64[0];
      *((_QWORD *)&v12 + 1) = __PAIR64__(v9.u32[3], v8.u32[3]);
      v16.val[1] = (float32x2_t)vzip2q_s32(v7, v9).u64[0];
      v13 = v4 - 8;
      vst2_f32(v13, v10);
      *((int32x4_t *)v4 - 1) = vzip2q_s32((int32x4_t)v10, v11);
      v14 = v4 + 16;
      vst2_f32(v4, v16);
      v15 = v4 + 4;
      *v15 = v12;
      v3 += 4;
      v5 += 4;
      v4 = v14;
    }
    while (((a3 + 3) & 0xFFFFFFFC) != v3);
  }
  return result;
}

float32x4_t *scn_sphere_x4_filter(float32x4_t *result, int a2, float32x4_t *a3, float32x4_t *a4, uint64_t a5)
{
  uint64_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t *v14;
  float32x4_t v15;
  int8x16_t v16;
  unsigned __int8 v17;
  uint64_t v18;

  if (a2)
  {
    v5 = 0;
    v6 = *a3;
    v7 = a3[1];
    v8 = a3[2];
    v9 = a3[3];
    v10 = *a4;
    v11 = a4[1];
    v12 = a4[2];
    v13 = a4[3];
    v14 = result + 2;
    do
    {
      v15 = vnegq_f32(v14[1]);
      v16 = vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(vaddq_f32(v9, vmlaq_f32(vmlaq_f32(vmulq_f32(v7, v14[-1]), v14[-2], v6), *v14, v8)), v15), (int8x16_t)vcgeq_f32(vaddq_f32(v13, vmlaq_f32(vmlaq_f32(vmulq_f32(v11, v14[-1]), v14[-2], v10), *v14, v12)), v15)), (int8x16_t)xmmword_1DD007E80);
      *(int8x8_t *)v16.i8 = vorr_s8(*(int8x8_t *)v16.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL));
      v17 = vadd_s32(*(int32x2_t *)v16.i8, vdup_lane_s32(*(int32x2_t *)v16.i8, 1)).u8[0];
      v18 = v5 >> 1;
      if ((v5 & 1) != 0)
        v17 = *(_BYTE *)(a5 + v18) | (16 * v17);
      *(_BYTE *)(a5 + v18) = v17;
      ++v5;
      v14 += 4;
    }
    while (a2 != v5);
  }
  return result;
}

uint64_t C3DComparisonFuncToMTLCompareFunction(unsigned int a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1 >= 8)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DComparisonFuncToMTLCompareFunction_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return mtl_ComparisonFunc[a1];
}

uint64_t C3DStencilOpToMTLStencilOperation(unsigned int a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1 >= 8)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DStencilOpToMTLStencilOperation_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return mtl_StencilOp[a1];
}

uint64_t SCNMTLPixelFormatSRGBVariant(uint64_t result)
{
  if (result > 499)
  {
    if (result > 549)
    {
      switch(result)
      {
        case 550:
          return 551;
        case 552:
          return 553;
        case 554:
          return 555;
      }
    }
    else
    {
      switch(result)
      {
        case 500:
          result = 520;
          break;
        case 501:
          result = 521;
          break;
        case 502:
          result = 522;
          break;
        case 503:
          result = 523;
          break;
        case 504:
          result = 524;
          break;
        case 505:
          result = 525;
          break;
        case 506:
          result = 526;
          break;
        case 507:
          result = 527;
          break;
        case 508:
          result = 528;
          break;
        case 509:
          result = 529;
          break;
        case 510:
          result = 530;
          break;
        default:
          return result;
      }
    }
  }
  else if (result <= 177)
  {
    if (result > 79)
    {
      switch(result)
      {
        case 160:
          result = 161;
          break;
        case 161:
        case 163:
        case 165:
          return result;
        case 162:
          result = 163;
          break;
        case 164:
          result = 165;
          break;
        case 166:
          result = 167;
          break;
        default:
          if (result == 80)
            result = 81;
          break;
      }
    }
    else
    {
      switch(result)
      {
        case 10:
          return 11;
        case 30:
          return 31;
        case 70:
          return 71;
      }
    }
  }
  else
  {
    switch(result)
    {
      case 178:
        result = 179;
        break;
      case 180:
        result = 181;
        break;
      case 182:
        result = 183;
        break;
      case 204:
        result = 186;
        break;
      case 205:
        result = 187;
        break;
      case 206:
        result = 188;
        break;
      case 207:
        result = 189;
        break;
      case 208:
        result = 190;
        break;
      case 210:
        result = 192;
        break;
      case 211:
        result = 193;
        break;
      case 212:
        result = 194;
        break;
      case 213:
        result = 195;
        break;
      case 214:
        result = 196;
        break;
      case 215:
        result = 197;
        break;
      case 216:
        result = 198;
        break;
      case 217:
        result = 199;
        break;
      case 218:
        result = 200;
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t SCNMTLPixelFormatNonSRGBVariant(uint64_t result)
{
  if (result <= 160)
  {
    if (result > 70)
    {
      if (result == 71)
      {
        return 70;
      }
      else if (result == 81)
      {
        return 80;
      }
    }
    else if (result == 11)
    {
      return 10;
    }
    else if (result == 31)
    {
      return 30;
    }
  }
  else if (result > 550)
  {
    switch(result)
    {
      case 551:
        return 550;
      case 553:
        return 552;
      case 555:
        return 554;
    }
  }
  else
  {
    switch(result)
    {
      case 161:
        result = 160;
        break;
      case 163:
        result = 162;
        break;
      case 165:
        result = 164;
        break;
      case 167:
        result = 166;
        break;
      case 179:
        result = 178;
        break;
      case 181:
        result = 180;
        break;
      case 183:
        result = 182;
        break;
      case 186:
        result = 204;
        break;
      case 187:
        result = 205;
        break;
      case 188:
        result = 206;
        break;
      case 189:
        result = 207;
        break;
      case 190:
        result = 208;
        break;
      case 192:
        result = 210;
        break;
      case 193:
        result = 211;
        break;
      case 194:
        result = 212;
        break;
      case 195:
        result = 213;
        break;
      case 196:
        result = 214;
        break;
      case 197:
        result = 215;
        break;
      case 198:
        result = 216;
        break;
      case 199:
        result = 217;
        break;
      case 200:
        result = 218;
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t C3DRenderBufferFormatToMTLPixelFormat(int a1, uint64_t a2, char a3)
{
  int v3;
  uint64_t result;

  v3 = a1 - 1;
  result = 80;
  switch(v3)
  {
    case 0:
      result = C3DMetalFramebufferPixelFormat(a3);
      break;
    case 1:
    case 26:
      return result;
    case 2:
      result = 10;
      break;
    case 3:
      result = 12;
      break;
    case 4:
      result = 13;
      break;
    case 5:
      result = 14;
      break;
    case 6:
      result = 20;
      break;
    case 7:
      result = 22;
      break;
    case 8:
      result = 23;
      break;
    case 9:
      result = 24;
      break;
    case 10:
      result = 25;
      break;
    case 11:
      result = 53;
      break;
    case 12:
      result = 54;
      break;
    case 13:
      result = 55;
      break;
    case 14:
      result = 30;
      break;
    case 15:
      result = 32;
      break;
    case 16:
      result = 33;
      break;
    case 17:
      result = 34;
      break;
    case 18:
      result = 60;
      break;
    case 19:
      result = 62;
      break;
    case 20:
      result = 63;
      break;
    case 21:
      result = 64;
      break;
    case 22:
      result = 65;
      break;
    case 23:
      result = 103;
      break;
    case 24:
      result = 104;
      break;
    case 25:
      result = 105;
      break;
    case 27:
      result = 70;
      break;
    case 28:
      result = 72;
      break;
    case 29:
      result = 73;
      break;
    case 30:
      result = 74;
      break;
    case 31:
      result = 110;
      break;
    case 32:
      result = 112;
      break;
    case 33:
      result = 113;
      break;
    case 34:
      result = 114;
      break;
    case 35:
      result = 115;
      break;
    case 36:
      result = 123;
      break;
    case 37:
      result = 124;
      break;
    case 38:
      result = 125;
      break;
    case 39:
      result = 250;
      break;
    case 40:
    case 41:
      result = 252;
      break;
    case 42:
    case 43:
      result = 253;
      break;
    case 44:
      result = 260;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t SCNMTLVertexFormatToC3DBaseType(unint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1 >= 0x36)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      SCNMTLVertexFormatToC3DBaseType_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return __SCNMTLVertexFormatToC3DBaseTypeArray[a1];
}

uint64_t SCNMTLDataTypeFromC3DBaseType(int a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1 >= 46)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      SCNMTLDataTypeFromC3DBaseType_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return mtl_DataType[a1];
}

uint64_t SCNMTLVertexFormatGetSize(uint64_t a1)
{
  return mtl_vertexFormatSize[a1];
}

uint64_t SCNMTLIndexTypeGetSize(uint64_t a1)
{
  return *((unsigned int *)&mtl_indexTypeSize + a1);
}

uint64_t SCNMTLPixelFormatIsUnsignedInt(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;

  result = 1;
  if ((unint64_t)(a1 - 13) > 0x3C || ((1 << (a1 - 13)) & 0x1004010000100401) == 0)
  {
    v3 = a1 - 91;
    if (v3 > 0x20 || ((1 << v3) & 0x100401001) == 0)
      return 0;
  }
  return result;
}

const __CFString *SCNMTLPixelFormatToString(uint64_t a1)
{
  const __CFString *result;

  if (a1 > 102)
  {
    if (a1 > 251)
    {
      switch(a1)
      {
        case 552:
          result = CFSTR("BGRA10_XR");
          break;
        case 553:
          result = CFSTR("BGRA10_XR_sRGB");
          break;
        case 554:
          result = CFSTR("BGR10_XR");
          break;
        case 555:
          result = CFSTR("BGR10_XR_sRGB");
          break;
        default:
          if (a1 == 252)
          {
            result = CFSTR("Depth32Float");
          }
          else if (a1 == 253)
          {
            result = CFSTR("Stencil8");
          }
          else
          {
LABEL_52:
            result = (const __CFString *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithCString:encoding:", MTLPixelFormatGetName(), 1), "stringByReplacingOccurrencesOfString:withString:", CFSTR("MTLPixelFormat"), &stru_1EA5A6480);
          }
          break;
      }
    }
    else
    {
      switch(a1)
      {
        case 'g':
          result = CFSTR("RG32Uint");
          break;
        case 'h':
          result = CFSTR("RG32Sint");
          break;
        case 'i':
          result = CFSTR("RG32Float");
          break;
        case 'j':
        case 'k':
        case 'l':
        case 'm':
        case 'o':
        case 't':
        case 'u':
        case 'v':
        case 'w':
        case 'x':
        case 'y':
        case 'z':
          goto LABEL_52;
        case 'n':
          result = CFSTR("RGBA16Unorm");
          break;
        case 'p':
          result = CFSTR("RGBA16Snorm");
          break;
        case 'q':
          result = CFSTR("RGBA16Uint");
          break;
        case 'r':
          result = CFSTR("RGBA16Sint");
          break;
        case 's':
          result = CFSTR("RGBA16Float");
          break;
        case '{':
          result = CFSTR("RGBA32Uint");
          break;
        case '|':
          result = CFSTR("RGBA32Sint");
          break;
        case '}':
          result = CFSTR("RGBA32Float");
          break;
        default:
          if (a1 != 250)
            goto LABEL_52;
          result = CFSTR("Depth16Unorm");
          break;
      }
    }
  }
  else
  {
    switch(a1)
    {
      case '5':
        result = CFSTR("R32Uint");
        break;
      case '6':
        result = CFSTR("R32Sint");
        break;
      case '7':
        result = CFSTR("R32Float");
        break;
      case '8':
      case '9':
      case ':':
      case ';':
      case '=':
      case 'B':
      case 'C':
      case 'D':
      case 'E':
      case 'K':
      case 'L':
      case 'M':
      case 'N':
      case 'O':
      case 'R':
      case 'S':
      case 'T':
      case 'U':
      case 'V':
      case 'W':
      case 'X':
      case 'Y':
      case '\\':
      case ']':
        goto LABEL_52;
      case '<':
        result = CFSTR("RG16Unorm");
        break;
      case '>':
        result = CFSTR("RG16Snorm");
        break;
      case '?':
        result = CFSTR("RG16Uint");
        break;
      case '@':
        result = CFSTR("RG16Sint");
        break;
      case 'A':
        result = CFSTR("RG16Float");
        break;
      case 'F':
        result = CFSTR("RGBA8Unorm");
        break;
      case 'G':
        result = CFSTR("RGBA8Unorm_sRGB");
        break;
      case 'H':
        result = CFSTR("RGBA8Snorm");
        break;
      case 'I':
        result = CFSTR("RGBA8Uint");
        break;
      case 'J':
        result = CFSTR("RGBA8Sint");
        break;
      case 'P':
        result = CFSTR("BGRA8Unorm");
        break;
      case 'Q':
        result = CFSTR("BGRA8Unorm_sRGB");
        break;
      case 'Z':
        result = CFSTR("RGB10A2Unorm");
        break;
      case '[':
        result = CFSTR("RGB10A2Uint");
        break;
      case '^':
        result = CFSTR("BGR10A2Unorm");
        break;
      default:
        result = CFSTR("Invalid");
        switch(a1)
        {
          case 0:
            return result;
          case 1:
            result = CFSTR("A8Unorm");
            break;
          case 10:
            result = CFSTR("R8Unorm");
            break;
          case 11:
            result = CFSTR("R8Unorm_sRGB");
            break;
          case 12:
            result = CFSTR("R8Snorm");
            break;
          case 13:
            result = CFSTR("R8Uint");
            break;
          case 14:
            result = CFSTR("R8Sint");
            break;
          case 20:
            result = CFSTR("R16Unorm");
            break;
          case 22:
            result = CFSTR("R16Snorm");
            break;
          case 23:
            result = CFSTR("R16Uint");
            break;
          case 24:
            result = CFSTR("R16Sint");
            break;
          case 25:
            result = CFSTR("R16Float");
            break;
          case 30:
            result = CFSTR("RG8Unorm");
            break;
          case 31:
            result = CFSTR("RG8Unorm_sRGB");
            break;
          case 32:
            result = CFSTR("RG8Snorm");
            break;
          case 33:
            result = CFSTR("RG8Uint");
            break;
          case 34:
            result = CFSTR("RG8Sint");
            break;
          default:
            goto LABEL_52;
        }
        break;
    }
  }
  return result;
}

const __CFString *SCNMTLStorageModeToString(unint64_t a1)
{
  if (a1 > 3)
    return CFSTR("Unkown");
  else
    return off_1EA59F978[a1];
}

const __CFString *SCNMTLCPUCacheModeToString(uint64_t a1)
{
  if (a1)
    return CFSTR("MTLCPUCacheModeWriteCombined");
  else
    return CFSTR("MTLCPUCacheModeDefaultCache");
}

uint64_t SCNMTLTextureTypeGetArrayElementType(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = 5;
  v2 = 2;
  if (a1 != 3)
    v2 = a1;
  if (a1 != 6)
    v1 = v2;
  if (a1 == 1)
    return 0;
  else
    return v1;
}

uint64_t SCNMTLTextureTypeNonMultisampledEquivalent(uint64_t a1)
{
  uint64_t v1;

  v1 = 2;
  if (a1 != 4)
    v1 = a1;
  if (a1 == 8)
    return 3;
  else
    return v1;
}

const __CFString *SCNMTLTextureTypeToString(unint64_t a1)
{
  if (a1 > 9)
    return CFSTR("Unkown");
  else
    return off_1EA59F998[a1];
}

uint64_t SCNMTLTextureToC3DTextureType(void *a1)
{
  unint64_t v2;
  NSObject *v3;
  _BOOL4 v4;
  uint64_t result;
  _DWORD v6[2];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = objc_msgSend(a1, "textureType");
  if (v2 < 8 && ((0xA5u >> v2) & 1) != 0)
    return dword_1DD008E3C[v2];
  v3 = scn_default_log();
  v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  result = 0;
  if (v4)
  {
    v6[0] = 67109120;
    v6[1] = objc_msgSend(a1, "textureType");
    _os_log_impl(&dword_1DCCB8000, v3, OS_LOG_TYPE_DEFAULT, "Warning: unsupported texture type %d", (uint8_t *)v6, 8u);
    return 0;
  }
  return result;
}

uint64_t C3DValueWriteToMTLData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int Type;
  __int16 *Bytes;
  float32x4_t v8;
  unsigned int v9;
  unsigned int v10;
  __int16 *v11;
  uint64_t result;
  int v13;
  char v14;
  NSObject *v15;
  _BOOL4 v16;
  float v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int16 v21;
  __int16 v22;
  float v23;
  uint64_t v24;
  float v25;
  float32x2_t v26;
  int32x4_t v27;
  __int16 v28;
  float v29;
  __int16 v30;
  __int16 v31;
  __int16 v32;
  float v33;
  float v34;
  __int16 v35;
  unsigned int v36;
  float v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  __int16 v41;
  float v42;
  float v43;
  unsigned int v44;
  unsigned int v45;
  __int16 v46;
  float v47;
  float v48;
  float v49;
  __int128 v50;
  float v51;
  float v52;
  int v53;
  float v54;
  uint8_t buf[4];
  uint64_t v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  Type = C3DValueGetType(a1);
  Bytes = (__int16 *)C3DValueGetBytes(a1);
  v11 = Bytes;
  switch(a2)
  {
    case 3:
      result = 0;
      switch((__int16)Type)
      {
        case 1:
        case 7:
          v8.i32[0] = *(_DWORD *)v11;
          goto LABEL_127;
        case 2:
          v8.f32[0] = (float)*(int *)v11;
          goto LABEL_127;
        case 3:
          v8.i32[0] = 0;
          if (*(_BYTE *)v11)
            v8.f32[0] = 1.0;
          goto LABEL_127;
        case 6:
          v8.f32[0] = *(double *)v11;
          goto LABEL_127;
        case 14:
          v8.f32[0] = (float)*v11;
          goto LABEL_127;
        case 15:
          v8.f32[0] = __from_half((unsigned __int16)*v11);
          goto LABEL_127;
        case 17:
          v8.i16[0] = *v11;
          v8.f32[0] = (float)v8.u32[0];
LABEL_127:
          *(_DWORD *)a3 = v8.i32[0];
          return 1;
        default:
          return result;
      }
    case 4:
      result = 0;
      if ((unsigned __int16)Type > 0x1Cu)
      {
        switch((unsigned __int16)Type)
        {
          case 0x1Du:
            v8.i16[0] = *v11;
            v8.f32[0] = (float)v8.u32[0];
            LOWORD(v9) = v11[1];
            v34 = (float)v9;
            break;
          case 0x20u:
            v8.f32[0] = (float)*v11;
            v34 = (float)v11[1];
            break;
          case 0x2Bu:
            v51 = __from_half((unsigned __int16)*v11);
            *(_QWORD *)a3 = __PAIR64__(COERCE_UNSIGNED_INT(__from_half((unsigned __int16)v11[1])), LODWORD(v51));
            return 1;
          default:
            return result;
        }
        v8.f32[1] = v34;
        goto LABEL_118;
      }
      if ((unsigned __int16)Type == 8)
        goto LABEL_81;
      if ((unsigned __int16)Type == 18)
      {
        v26 = vcvt_f32_s32(*(int32x2_t *)v11);
        goto LABEL_82;
      }
      return result;
    case 5:
      result = 0;
      if ((unsigned __int16)Type <= 0x1Du)
      {
        if ((unsigned __int16)Type == 9 || (unsigned __int16)Type == 10)
        {
LABEL_86:
          v8 = *(float32x4_t *)v11;
        }
        else
        {
          if ((unsigned __int16)Type != 19)
            return result;
          *(float32x2_t *)v8.f32 = vcvt_f32_s32(*(int32x2_t *)v11);
          v8.f32[2] = (float)*((int *)v11 + 2);
        }
LABEL_87:
        *(float32x4_t *)a3 = v8;
        return 1;
      }
      switch((unsigned __int16)Type)
      {
        case 0x1Eu:
          v8.i16[0] = *v11;
          v8.f32[0] = (float)v8.u32[0];
          LOWORD(v9) = v11[1];
          v42 = (float)v9;
          LOWORD(v10) = v11[2];
          v43 = (float)v10;
          break;
        case 0x21u:
          v8.f32[0] = (float)*v11;
          v42 = (float)v11[1];
          v43 = (float)v11[2];
          break;
        case 0x2Cu:
          *(float *)&v24 = __from_half((unsigned __int16)*v11);
          *(_QWORD *)&v50 = v24;
          v49 = __from_half((unsigned __int16)v11[1]);
          v25 = __from_half((unsigned __int16)v11[2]);
          v18 = v50;
          *((float *)&v18 + 1) = v49;
          *((float *)&v18 + 2) = v25;
LABEL_73:
          *(_OWORD *)a3 = v18;
          return 1;
        default:
          return result;
      }
      v8.f32[1] = v42;
      v8.f32[2] = v43;
      goto LABEL_87;
    case 6:
      result = 0;
      if ((unsigned __int16)Type > 0x1Eu)
      {
        if ((unsigned __int16)Type == 31)
        {
          v8 = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v11));
          goto LABEL_87;
        }
        if ((unsigned __int16)Type != 34)
        {
          if ((unsigned __int16)Type != 45)
            return result;
          v52 = __from_half((unsigned __int16)*v11);
          v48 = __from_half((unsigned __int16)v11[1]);
          v47 = __from_half((unsigned __int16)v11[2]);
          v17 = __from_half((unsigned __int16)v11[3]);
          *(_QWORD *)&v18 = __PAIR64__(LODWORD(v48), LODWORD(v52));
          *((_QWORD *)&v18 + 1) = __PAIR64__(LODWORD(v17), LODWORD(v47));
          goto LABEL_73;
        }
        v27 = vmovl_s16(*(int16x4_t *)v11);
LABEL_102:
        v8 = vcvtq_f32_s32(v27);
        goto LABEL_87;
      }
      if ((unsigned __int16)Type == 10)
        goto LABEL_86;
      if ((unsigned __int16)Type == 20)
      {
        v27 = *(int32x4_t *)v11;
        goto LABEL_102;
      }
      return result;
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
      goto LABEL_23;
    case 15:
      if (Type != 11)
        return 0;
      v8 = *(float32x4_t *)Bytes;
      v19 = *((_OWORD *)Bytes + 1);
      v20 = *((_OWORD *)Bytes + 3);
      *(_OWORD *)(a3 + 32) = *((_OWORD *)Bytes + 2);
      *(_OWORD *)(a3 + 48) = v20;
      *(_OWORD *)(a3 + 16) = v19;
      goto LABEL_87;
    case 16:
      result = 0;
      switch((__int16)Type)
      {
        case 1:
        case 7:
          v8.i32[0] = *(_DWORD *)v11;
          goto LABEL_136;
        case 2:
          v8.f32[0] = (float)*(int *)v11;
          goto LABEL_136;
        case 3:
          v8.i32[0] = 0;
          if (*(_BYTE *)v11)
            v8.f32[0] = 1.0;
          goto LABEL_136;
        case 6:
          v8.f32[0] = *(double *)v11;
          goto LABEL_136;
        case 14:
          v8.f32[0] = (float)*v11;
          goto LABEL_136;
        case 15:
          *(_WORD *)a3 = *v11;
          return 1;
        case 17:
          v8.i16[0] = *v11;
          v8.f32[0] = (float)v8.u32[0];
LABEL_136:
          *(_WORD *)a3 = __to_half(v8.f32[0]);
          return 1;
        default:
          return result;
      }
    case 17:
      result = 0;
      if ((unsigned __int16)Type > 0x1Cu)
      {
        switch((unsigned __int16)Type)
        {
          case 0x1Du:
            v8.i16[0] = *v11;
            v35 = __to_half((float)v8.u32[0]);
            LOWORD(v36) = v11[1];
            v37 = (float)v36;
            break;
          case 0x20u:
            v35 = __to_half((float)*v11);
            v37 = (float)v11[1];
            break;
          case 0x2Bu:
LABEL_51:
            v13 = *(_DWORD *)v11;
LABEL_65:
            *(_DWORD *)a3 = v13;
            return 1;
          default:
            return result;
        }
        *(_WORD *)(a3 + 2) = __to_half(v37);
        *(_WORD *)a3 = v35;
        return 1;
      }
      if ((unsigned __int16)Type == 8)
      {
        LODWORD(v54) = HIDWORD(*(_QWORD *)v11);
        v28 = __to_half(COERCE_FLOAT(*(_QWORD *)v11));
        v29 = v54;
      }
      else
      {
        if ((unsigned __int16)Type != 18)
          return result;
        v53 = HIDWORD(*(_QWORD *)v11);
        v28 = __to_half((float)(int)*(_QWORD *)v11);
        v29 = (float)v53;
      }
      *(_WORD *)(a3 + 2) = __to_half(v29);
      *(_WORD *)a3 = v28;
      return 1;
    case 18:
      result = 0;
      if ((unsigned __int16)Type <= 0x1Du)
      {
        if ((unsigned __int16)Type == 9 || (unsigned __int16)Type == 10)
        {
          v21 = __to_half(*(float *)v11);
          v22 = __to_half(*((float *)v11 + 1));
          v23 = *((float *)v11 + 2);
        }
        else
        {
          if ((unsigned __int16)Type != 19)
            return result;
          v21 = __to_half((float)*(int *)v11);
          v22 = __to_half((float)*((int *)v11 + 1));
          v23 = (float)*((int *)v11 + 2);
        }
        goto LABEL_117;
      }
      switch((unsigned __int16)Type)
      {
        case 0x1Eu:
          v8.i16[0] = *v11;
          v21 = __to_half((float)v8.u32[0]);
          LOWORD(v44) = v11[1];
          v22 = __to_half((float)v44);
          LOWORD(v45) = v11[2];
          v23 = (float)v45;
          break;
        case 0x21u:
          v21 = __to_half((float)*v11);
          v22 = __to_half((float)v11[1]);
          v23 = (float)v11[2];
          break;
        case 0x2Cu:
          goto LABEL_81;
        default:
          return result;
      }
LABEL_117:
      v46 = __to_half(v23);
      v8.i16[0] = v21;
      v8.i16[1] = v22;
      v8.i16[2] = v46;
      goto LABEL_118;
    case 19:
      result = 0;
      if ((unsigned __int16)Type <= 0x1Eu)
      {
        if ((unsigned __int16)Type == 10)
        {
          v30 = __to_half(*(float *)v11);
          v31 = __to_half(*((float *)v11 + 1));
          v32 = __to_half(*((float *)v11 + 2));
          v33 = *((float *)v11 + 3);
        }
        else
        {
          if ((unsigned __int16)Type != 20)
            return result;
          v30 = __to_half((float)*(int *)v11);
          v31 = __to_half((float)*((int *)v11 + 1));
          v32 = __to_half((float)*((int *)v11 + 2));
          v33 = (float)*((int *)v11 + 3);
        }
        goto LABEL_111;
      }
      switch((unsigned __int16)Type)
      {
        case 0x1Fu:
          v8.i16[0] = *v11;
          v30 = __to_half((float)v8.u32[0]);
          LOWORD(v38) = v11[1];
          v31 = __to_half((float)v38);
          LOWORD(v39) = v11[2];
          v32 = __to_half((float)v39);
          LOWORD(v40) = v11[3];
          v33 = (float)v40;
LABEL_111:
          v41 = __to_half(v33);
          v8.i16[0] = v30;
          v8.i16[1] = v31;
          v8.i16[2] = v32;
          v8.i16[3] = v41;
          goto LABEL_118;
        case 0x22u:
          v30 = __to_half((float)*v11);
          v31 = __to_half((float)v11[1]);
          v32 = __to_half((float)v11[2]);
          v33 = (float)v11[3];
          goto LABEL_111;
        case 0x2Du:
          goto LABEL_81;
      }
      return result;
    case 29:
    case 33:
      result = 0;
      if ((unsigned __int16)Type > 0xDu)
      {
        if ((unsigned __int16)Type == 14 || (unsigned __int16)Type == 17)
        {
          v13 = *v11;
          goto LABEL_65;
        }
      }
      else
      {
        if ((unsigned __int16)Type == 2)
          goto LABEL_51;
        if ((unsigned __int16)Type == 3)
        {
          v13 = *(unsigned __int8 *)v11;
          goto LABEL_65;
        }
      }
      return result;
    case 30:
    case 34:
      if (Type == 32 || (unsigned __int16)Type == 29)
      {
        v8.i32[0] = *Bytes;
        v8.i32[1] = Bytes[1];
LABEL_118:
        *(_QWORD *)a3 = v8.i64[0];
      }
      else
      {
        if ((unsigned __int16)Type != 18)
          return 0;
LABEL_81:
        v26 = *(float32x2_t *)v11;
LABEL_82:
        *(float32x2_t *)a3 = v26;
      }
      return 1;
    case 31:
    case 35:
      if (Type == 33 || (unsigned __int16)Type == 30)
      {
        v8 = (float32x4_t)vmovl_s16(*(int16x4_t *)Bytes);
        v8.i32[2] = 0;
        goto LABEL_87;
      }
      if ((unsigned __int16)Type != 19)
        return 0;
      goto LABEL_86;
    case 32:
    case 36:
      if (Type == 34 || (unsigned __int16)Type == 31)
      {
        v8 = (float32x4_t)vmovl_s16(*(int16x4_t *)Bytes);
        goto LABEL_87;
      }
      if ((unsigned __int16)Type == 20)
        goto LABEL_86;
      return 0;
    default:
      if (a2 == 53)
      {
        if (Type == 17 || (unsigned __int16)Type == 14)
        {
          v14 = *Bytes != 0;
          goto LABEL_95;
        }
        if ((unsigned __int16)Type == 3)
        {
          v14 = *(_BYTE *)Bytes;
LABEL_95:
          *(_BYTE *)a3 = v14;
          return 1;
        }
      }
      else
      {
LABEL_23:
        v15 = scn_default_log();
        v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
        result = 0;
        if (!v16)
          return result;
        *(_DWORD *)buf = 138412290;
        v56 = MTLDataTypeString();
        _os_log_impl(&dword_1DCCB8000, v15, OS_LOG_TYPE_DEFAULT, "Warning: C3DValueWriteToMTLData - Unsupported data type %@", buf, 0xCu);
      }
      return 0;
  }
}

float __from_half(unsigned int a1)
{
  int v1;
  float result;

  v1 = (a1 >> 10) & 0x1F;
  if (v1 && v1 != 31)
  {
    v1 = (v1 << 23) + 939524096;
  }
  else if (v1 == 31)
  {
    v1 = 2139095040;
  }
  LODWORD(result) = (a1 << 16) & 0x80000000 | (a1 >> 7) & 7 | (8 * (a1 & 0x3FF)) & 0x1FFF | ((a1 & 0x3FF) << 13) | v1;
  return result;
}

uint64_t __to_half(float a1)
{
  int v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  __int16 v5;
  __int16 v6;
  int v7;

  v1 = HIWORD(LODWORD(a1)) & 0x8000;
  v2 = (LODWORD(a1) >> 23);
  v3 = v2 - 112;
  v4 = v2 - 113;
  v5 = v1 | 0x7BFF;
  if (v2 == 255)
    v5 = v1 | ((LODWORD(a1) & 0x7FFFFF) != 0) | 0x7C00;
  if (v2 >= 0x71)
    v6 = v5;
  else
    v6 = HIWORD(a1) & 0x8000;
  v7 = HIWORD(LODWORD(a1)) & 0x8000 | (LODWORD(a1) >> 13) & 0x3FF | (v3 << 10);
  if (v4 > 0x1D)
    LOWORD(v7) = v6;
  return (unsigned __int16)v7;
}

void C3DValueWriteToStructMember(uint64_t a1, void *a2, uint64_t a3)
{
  NSObject *v5;
  _DWORD v6[2];
  __int16 v7;
  void *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if ((C3DValueWriteToMTLData(a1, objc_msgSend(a2, "dataType"), a3 + objc_msgSend(a2, "offset")) & 1) == 0)
  {
    v5 = scn_default_log();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6[0] = 67109378;
      v6[1] = C3DValueGetType(a1);
      v7 = 2112;
      v8 = a2;
      _os_log_impl(&dword_1DCCB8000, v5, OS_LOG_TYPE_DEFAULT, "Warning: value unsupported %d of member %@", (uint8_t *)v6, 0x12u);
    }
  }
}

CGImageRef C3DCreateImageWithTexture(void *a1)
{
  uint64_t v2;
  uint32_t v3;
  size_t v4;
  size_t v5;
  void *v6;
  size_t v7;
  size_t v8;
  CGColorSpace *v9;
  CGContext *v10;
  CGImageRef Image;
  NSObject *v13;
  _QWORD v14[6];

  v2 = objc_msgSend(a1, "pixelFormat");
  if (v2 > 79)
  {
    if ((unint64_t)(v2 - 80) < 2)
    {
      v3 = 8194;
      goto LABEL_9;
    }
    if (v2 == 125)
    {
      v3 = 16641;
      v4 = 32;
      goto LABEL_10;
    }
    if (v2 == 115)
    {
      v3 = 12545;
      v4 = 16;
LABEL_10:
      v5 = ((v4 * objc_msgSend(a1, "width")) >> 1) & 0xFFFFFFFC;
      v6 = malloc_type_malloc(v5 * objc_msgSend(a1, "height"), 0x4BFDEC0uLL);
      v7 = objc_msgSend(a1, "width");
      v8 = objc_msgSend(a1, "height");
      v9 = (CGColorSpace *)C3DColorSpaceSRGB();
      v10 = CGBitmapContextCreate(v6, v7, v8, v4, v5, v9, v3);
      memset(v14, 0, 24);
      v14[3] = objc_msgSend(a1, "width");
      v14[4] = objc_msgSend(a1, "height");
      v14[5] = 1;
      objc_msgSend(a1, "getBytes:bytesPerRow:fromRegion:mipmapLevel:", v6, v5, v14, 0);
      Image = CGBitmapContextCreateImage(v10);
      CGContextRelease(v10);
      free(v6);
      return Image;
    }
  }
  else if ((unint64_t)(v2 - 70) < 5)
  {
    v3 = 16385;
LABEL_9:
    v4 = 8;
    goto LABEL_10;
  }
  v13 = scn_default_log();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    C3DCreateImageWithTexture_cold_1(a1, v13);
  return 0;
}

uint64_t SCNTextureUsageFromString(const void *a1)
{
  if (CFEqual(a1, CFSTR("shaderRead")))
    return 1;
  if (CFEqual(a1, CFSTR("shaderWrite")))
    return 2;
  if (CFEqual(a1, CFSTR("renderTarget")))
    return 4;
  return 16 * (CFEqual(a1, CFSTR("pixelFormatView")) != 0);
}

const __CFString *SCNTextureUsageToString(char a1)
{
  id v2;
  void *v3;
  _BOOL4 v4;

  v2 = objc_alloc_init(MEMORY[0x1E0CB37A0]);
  v3 = v2;
  v4 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
  {
    objc_msgSend(v2, "appendString:", CFSTR("MTLTextureUsageShaderRead"));
    if ((a1 & 2) == 0)
    {
      if ((a1 & 4) == 0)
      {
        if ((a1 & 0x10) == 0)
          return (const __CFString *)v3;
        goto LABEL_20;
      }
      goto LABEL_15;
    }
    objc_msgSend(v3, "appendString:", CFSTR(" | "));
  }
  else if ((a1 & 2) == 0)
  {
    if ((a1 & 4) == 0)
      goto LABEL_4;
    goto LABEL_13;
  }
  objc_msgSend(v3, "appendString:", CFSTR("MTLTextureUsageShaderWrite"));
  if ((a1 & 4) == 0)
  {
LABEL_4:
    if ((a1 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_13:
  if ((a1 & 1) == 0)
  {
    v4 = 1;
    goto LABEL_16;
  }
LABEL_15:
  objc_msgSend(v3, "appendString:", CFSTR(" | "));
  v4 = 0;
LABEL_16:
  objc_msgSend(v3, "appendString:", CFSTR("MTLTextureUsageRenderTarget"));
  if ((a1 & 0x10) == 0)
  {
LABEL_5:
    if (!v4)
      return (const __CFString *)v3;
    return CFSTR("MTLTextureUsageUnknown");
  }
LABEL_17:
  if (!v4)
  {
LABEL_20:
    objc_msgSend(v3, "appendString:", CFSTR(" | "));
    objc_msgSend(v3, "appendString:", CFSTR("MTLTextureUsagePixelFormatView"));
    return (const __CFString *)v3;
  }
  objc_msgSend(v3, "appendString:", CFSTR("MTLTextureUsagePixelFormatView"));
  return CFSTR("MTLTextureUsageUnknown");
}

uint64_t SCNTextureUsageFromStrings(const __CFArray *a1)
{
  CFIndex Count;
  CFIndex v3;
  CFIndex v4;
  uint64_t v5;
  const void *ValueAtIndex;

  Count = CFArrayGetCount(a1);
  if (Count < 1)
    return 0;
  v3 = Count;
  v4 = 0;
  v5 = 0;
  do
  {
    ValueAtIndex = CFArrayGetValueAtIndex(a1, v4);
    v5 |= SCNTextureUsageFromString(ValueAtIndex);
    ++v4;
  }
  while (v3 != v4);
  return v5;
}

uint64_t C3DMeshSourceCreateWithMTLBuffer(__int16 a1, const void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  int ComponentType;
  uint64_t ComponentCount;
  const void *v31;
  uint64_t v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  if (!a2 && (v12 = scn_default_log(), os_log_type_enabled(v12, OS_LOG_TYPE_FAULT)))
  {
    C3DMeshSourceCreateWithMTLBuffer_cold_3(v12, v13, v14, v15, v16, v17, v18, v19);
    if (a3)
      goto LABEL_6;
  }
  else if (a3)
  {
    goto LABEL_6;
  }
  v20 = scn_default_log();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_FAULT))
    C3DMeshSourceCreateWithMTLBuffer_cold_2(v20, v21, v22, v23, v24, v25, v26, v27);
LABEL_6:
  v28 = SCNMTLVertexFormatToC3DBaseType(a3);
  ComponentType = C3DBaseTypeGetComponentType(v28);
  ComponentCount = C3DBaseTypeGetComponentCount(v28);
  v31 = (const void *)C3DSourceAccessorCreate(ComponentType, ComponentCount, a4, a5, a6);
  v32 = C3DMeshSourceCreateWithAccessor(v31, a1);
  if (!v32)
  {
    v33 = scn_default_log();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_FAULT))
      C3DMeshSourceCreateWithAccessor_cold_1(v33, v34, v35, v36, v37, v38, v39, v40);
  }
  C3DSourceAccessorSetSource((uint64_t)v31, v32);
  if (v31)
    CFRelease(v31);
  *(_QWORD *)(v32 + 72) = CFRetain(a2);
  *(_QWORD *)(v32 + 80) = a3;
  return v32;
}

uint64_t SCNMTLDeviceRequiresOffsetAndStrideForStageInAsMultipleOf4Bytes(void *a1)
{
  return objc_msgSend(a1, "supportsUnalignedVertexFetch") ^ 1;
}

uint64_t C3DImageCreateWithURL(const void *a1)
{
  uint64_t v2;

  v2 = C3DImageCreate();
  if (v2)
  {
    *(_QWORD *)(v2 + 88) = CFRetain(a1);
    *(_DWORD *)(v2 + 96) = 1;
  }
  return v2;
}

uint64_t C3DImageCreateWithData(const void *a1)
{
  uint64_t v2;

  v2 = C3DImageCreate();
  if (v2)
  {
    *(_QWORD *)(v2 + 88) = CFRetain(a1);
    *(_DWORD *)(v2 + 96) = 2;
  }
  return v2;
}

uint64_t C3DImageCreateWithRawData(const void *a1, unsigned __int8 a2, char a3, double a4)
{
  uint64_t v8;
  uint64_t TextureRawData;
  int v10;
  __int128 v11;
  int v12;

  v8 = C3DImageCreateWithData(a1);
  _C3DImageCreateTextureRawData(v8, 0, 1, a4);
  TextureRawData = C3DImageGetTextureRawData(v8);
  *(_BYTE *)(TextureRawData + 4) = a2;
  *(_BYTE *)(TextureRawData + 5) = a3;
  *(_BYTE *)(TextureRawData + 10) = 1;
  if (a3 == 4)
  {
    v10 = a2;
    if (a2 == 128)
    {
LABEL_16:
      v12 = 125;
LABEL_22:
      *(_DWORD *)(TextureRawData + 36) = v12;
      goto LABEL_25;
    }
    if (a2 == 64)
    {
LABEL_17:
      v12 = 110;
      goto LABEL_22;
    }
    goto LABEL_12;
  }
  if (a3 == 2)
  {
    v10 = a2;
    if (a2 > 0x3Fu)
      goto LABEL_14;
    if (a2 == 16)
    {
LABEL_21:
      v12 = 30;
      goto LABEL_22;
    }
LABEL_12:
    if (v10 == 32)
    {
LABEL_13:
      v11 = xmmword_1DD008E80;
LABEL_24:
      *(_OWORD *)(TextureRawData + 24) = v11;
      goto LABEL_25;
    }
    goto LABEL_25;
  }
  if (a3 != 1)
    goto LABEL_25;
  v10 = a2;
  if (a2 <= 0x1Fu)
  {
    if (a2 == 8)
    {
      v11 = xmmword_1DD008E90;
      goto LABEL_24;
    }
    if (a2 != 16)
      goto LABEL_25;
    *(int32x2_t *)(TextureRawData + 24) = vdup_n_s32(0x1909u);
    *(_DWORD *)(TextureRawData + 32) = 5123;
    goto LABEL_21;
  }
  if (a2 == 32)
    goto LABEL_13;
LABEL_14:
  if (v10 == 64)
    goto LABEL_17;
  if (v10 == 128)
    goto LABEL_16;
LABEL_25:
  CFArrayAppendValue(*(CFMutableArrayRef *)(TextureRawData + 40), a1);
  return v8;
}

uint64_t _C3DImageCreateTextureRawData(uint64_t a1, int a2, char a3, double a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  CFMutableArrayRef Mutable;
  uint64_t v17;

  pthread_mutex_lock(&bitmapAccessSharedMutex);
  if (*(_QWORD *)(a1 + 72))
  {
    v8 = scn_default_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      _C3DImageCreateTextureRawData_cold_1(v8, v9, v10, v11, v12, v13, v14, v15);
  }
  *(_QWORD *)(a1 + 72) = malloc_type_calloc(1uLL, 0x30uLL, 0x1020040B13EBABEuLL);
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v17 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(v17 + 40) = Mutable;
  *(_DWORD *)v17 = a2;
  *(_BYTE *)(a1 + 80) &= ~2u;
  *(double *)(a1 + 104) = a4;
  *(_BYTE *)(a1 + 116) = *(_BYTE *)(a1 + 116) & 0xFE | a3 | 0xC;
  return pthread_mutex_unlock(&bitmapAccessSharedMutex);
}

CFURLRef C3DImageCreateWithPath(CFStringRef filePath)
{
  CFURLRef result;
  CFURLRef v2;
  uint64_t v3;

  result = CFURLCreateWithFileSystemPath((CFAllocatorRef)*MEMORY[0x1E0C9AE00], filePath, kCFURLPOSIXPathStyle, 0);
  if (result)
  {
    v2 = result;
    v3 = C3DImageCreateWithURL(result);
    CFRelease(v2);
    return (CFURLRef)v3;
  }
  return result;
}

uint64_t C3DImageCreateVerticalStripCubemapWithFaceImages(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  size_t v4;
  double Size;
  float v6;
  float v7;
  float v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t TextureRawData;
  int *v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  const char *v27;
  NSObject *v28;
  uint32_t v29;
  NSObject *v30;
  uint64_t v33;
  CGImage *v34;
  CGColorSpace *ColorSpace;
  CGContext *v36;
  double v37;
  uint64_t j;
  CGImage *v39;
  NSObject *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t k;
  CGImageRef v48;
  float v49;
  float v50;
  CGImageRef image[8];
  CGRect v52;

  v2 = 0;
  image[7] = *(CGImageRef *)MEMORY[0x1E0C80C00];
  do
  {
    if (!a1[v2])
    {
      v19 = scn_default_log();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        C3DImageCreateVerticalStripCubemapWithFaceImages_cold_1(v2, v19, v20, v21, v22, v23, v24, v25);
      return 0;
    }
    ++v2;
  }
  while (v2 != 6);
  v3 = 0;
  v4 = 0;
  do
  {
    Size = C3DImageGetSize(a1[v3]);
    v6 = *((float *)&Size + 1);
    if (*(float *)&Size != *((float *)&Size + 1))
    {
      v49 = *(float *)&Size;
      v26 = scn_default_log();
      if (!os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
        return 0;
      LODWORD(image[0]) = 67109632;
      HIDWORD(image[0]) = v3;
      LOWORD(image[1]) = 2048;
      *(double *)((char *)&image[1] + 2) = v49;
      WORD1(image[2]) = 2048;
      *(double *)((char *)&image[2] + 4) = v6;
      v27 = "Error: Cannot build cubemap from array of images because image at index %d is not square: %fx%f";
      v28 = v26;
      v29 = 28;
      goto LABEL_46;
    }
    v7 = floorf(*(float *)&Size);
    if (v3)
    {
      v8 = floorf(*((float *)&Size + 1));
      if (v7 != (float)v4 || v8 != (float)v4)
      {
        v50 = *(float *)&Size;
        v30 = scn_default_log();
        if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
          return 0;
        LODWORD(image[0]) = 67110144;
        HIDWORD(image[0]) = v3;
        LOWORD(image[1]) = 2048;
        *(double *)((char *)&image[1] + 2) = v50;
        WORD1(image[2]) = 2048;
        *(double *)((char *)&image[2] + 4) = v6;
        WORD2(image[3]) = 2048;
        *(CGImageRef *)((char *)&image[3] + 6) = (CGImageRef)v4;
        HIWORD(image[4]) = 2048;
        image[5] = (CGImageRef)v4;
        v27 = "Error: Cannot build cubemap from array of images because image at index %d (%fx%f) does not have the expec"
              "ted size (%zux%zu)";
        v28 = v30;
        v29 = 48;
LABEL_46:
        _os_log_error_impl(&dword_1DCCB8000, v28, OS_LOG_TYPE_ERROR, v27, (uint8_t *)image, v29);
        return 0;
      }
    }
    else
    {
      v4 = (unint64_t)v7;
    }
    ++v3;
  }
  while (v3 != 6);
  v10 = 0;
  v11 = 0;
  while (1)
  {
    TextureRawData = C3DImageGetTextureRawData(a1[v10]);
    if (!TextureRawData)
      break;
    if (v10 * 8)
    {
      if (!C3DTextureRawDataIsEqual(v11, TextureRawData))
        break;
    }
    else
    {
      v11 = TextureRawData;
    }
    if (++v10 == 6)
    {
      v13 = (int *)C3DImageGetTextureRawData(*a1);
      v14 = C3DImageCreate();
      *(float *)&v15 = (float)v4;
      *((float *)&v15 + 1) = (float)(6 * v4);
      _C3DImageCreateTextureRawData(v14, *v13, 0, v15);
      *(_BYTE *)(v14 + 116) |= 0x38u;
      *(_DWORD *)(v14 + 120) = 5;
      v16 = C3DImageGetTextureRawData(v14);
      C3DTextureRawDataCopyAttributes(v16, (uint64_t)v13);
      for (i = 0; i != 6; ++i)
      {
        v18 = C3DImageGetTextureRawData(a1[i]);
        CFArrayAppendValue(*(CFMutableArrayRef *)(v16 + 40), *(const void **)(v18 + 40));
      }
      return v14;
    }
  }
  v33 = 0;
  memset(image, 0, 48);
  while (1)
  {
    v34 = C3DImageCopyCGImage(a1[v33]);
    if (!v34)
      break;
    image[v33++] = v34;
    if (v33 == 6)
    {
      ColorSpace = CGImageGetColorSpace(image[0]);
      v36 = CGBitmapContextCreate(0, v4, 6 * v4, 8uLL, 4 * v4, ColorSpace, 0x4001u);
      v37 = (double)v4;
      for (j = 5; j != -1; --j)
      {
        v52.origin.x = 0.0;
        v52.origin.y = 0.0;
        v52.size.width = v37;
        v52.size.height = v37;
        CGContextDrawImage(v36, v52, image[j]);
        CGContextTranslateCTM(v36, 0.0, v37);
      }
      v39 = CGBitmapContextCreateImage(v36);
      v14 = C3DImageCreateWithCGImage(v39);
      *(_DWORD *)(v14 + 120) = 5;
      CGImageRelease(v39);
      CGContextRelease(v36);
      goto LABEL_40;
    }
  }
  v40 = scn_default_log();
  if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
    C3DImageCreateVerticalStripCubemapWithFaceImages_cold_2(v33, v40, v41, v42, v43, v44, v45, v46);
  v14 = 0;
LABEL_40:
  for (k = 0; k != 6; ++k)
  {
    v48 = image[k];
    if (v48)
    {
      CFRelease(v48);
      image[k] = 0;
    }
  }
  return v14;
}

BOOL C3DTextureRawDataIsEqual(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  CFIndex Count;

  if (a1 == a2 || (v3 = 0, a1) && a2)
  {
    if (*(unsigned __int8 *)(a1 + 4) == *(unsigned __int8 *)(a2 + 4)
      && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
      && *(_DWORD *)(a1 + 36) == *(_DWORD *)(a2 + 36))
    {
      Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 40));
      return Count == CFArrayGetCount(*(CFArrayRef *)(a2 + 40));
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

double C3DTextureRawDataCopyAttributes(uint64_t a1, uint64_t a2)
{
  double result;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_WORD *)(a1 + 11) = *(_WORD *)(a2 + 11);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  result = *(double *)(a2 + 32);
  *(double *)(a1 + 32) = result;
  return result;
}

_DWORD *C3DImageCreateVerticalStripCubemapWithImage(uint64_t a1)
{
  _DWORD *v1;
  NSObject *v2;

  v1 = (_DWORD *)a1;
  if (!C3DImageIsCubeMap(a1))
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      C3DImageCreateVerticalStripCubemapWithImage_cold_1();
    return 0;
  }
  if (v1[30] != 5)
    return 0;
  CFRetain(v1);
  return v1;
}

uint64_t C3DImageCreateWithClientImage(const void *a1)
{
  uint64_t v2;

  v2 = C3DImageCreate();
  if (v2)
  {
    *(_QWORD *)(v2 + 88) = CFRetain(a1);
    *(_DWORD *)(v2 + 96) = 4;
  }
  return v2;
}

CFURLRef C3DImageCreateWithName(__CFString *a1)
{
  __CFString *v1;
  void *v2;
  void *v3;
  double v4;
  double v5;
  char v6;
  float64x2_t v7;
  CFURLRef result;
  CFURLRef v9;
  CFURLRef v10;
  uint64_t v11;
  _BOOL4 v12;
  void *v13;
  void *v14;
  float64_t v15;
  float64_t v16;

  v1 = a1;
  v2 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0D1A6A8], "defaultUICatalogForBundle:", SCNGetResourceBundle()), "namedTextureWithName:scaleFactor:", a1, 1.0);
  if (!v2)
    goto LABEL_3;
  v3 = v2;
  objc_msgSend(v2, "size");
  v15 = v5;
  v16 = v4;
  v6 = objc_msgSend(v3, "isOpaque");
  v7.f64[0] = v16;
  v7.f64[1] = v15;
  result = (CFURLRef)C3DImageCreateWithCatalogTextureNameAndSize(v1, v6, COERCE_DOUBLE(vcvt_f32_f64(v7)));
  if (!result)
  {
LABEL_3:
    v9 = C3DCopyURLOfResourceNamed(v1);
    if (v9)
    {
      v10 = v9;
      v11 = C3DImageCreateWithURL(v9);
      CFRelease(v10);
      return (CFURLRef)v11;
    }
    else
    {
      if (-[__CFString characterAtIndex:](v1, "characterAtIndex:", 0) != 47)
      {
        v12 = SCNHasSpecialResourceBundle();
        v13 = (void *)SCNGetResourceBundle();
        if (v12)
          v14 = (void *)objc_msgSend(v13, "bundlePath");
        else
          v14 = (void *)objc_msgSend(v13, "resourcePath");
        v1 = (__CFString *)objc_msgSend(v14, "stringByAppendingPathComponent:", v1);
      }
      return C3DImageCreateWithPath(v1);
    }
  }
  return result;
}

uint64_t C3DImageCreateWithCatalogTextureNameAndSize(const void *a1, char a2, double a3)
{
  uint64_t v6;
  char v7;

  v6 = C3DImageCreate();
  if (v6)
  {
    *(_QWORD *)(v6 + 88) = CFRetain(a1);
    *(_DWORD *)(v6 + 96) = 5;
    v7 = *(_BYTE *)(v6 + 116);
    *(double *)(v6 + 104) = a3;
    *(_BYTE *)(v6 + 116) = v7 & 0xFE | a2 ^ 1 | 0x1C;
  }
  return v6;
}

CGContextRef C3DCreateSRGBBitmapContextWithSize(double a1, double a2)
{
  size_t v2;
  size_t v3;
  size_t v4;
  CGColorSpace *v5;

  v2 = (unint64_t)a1;
  v3 = (unint64_t)a2;
  v4 = 4 * (unint64_t)a1;
  v5 = (CGColorSpace *)C3DColorSpaceSRGB();
  return CGBitmapContextCreate(0, v2, v3, 8uLL, v4, v5, 0x4001u);
}

CGContextRef C3DCreateSRGBBitmapContextWithContext(CGContext *a1)
{
  CGColorSpaceRef ColorSpace;
  double Width;
  double Height;
  CGFloat v5;
  CGFloat v6;
  CGContext *v7;
  CGImage *Image;
  CGRect v10;

  ColorSpace = CGBitmapContextGetColorSpace(a1);
  if (ColorSpace == (CGColorSpaceRef)C3DColorSpaceSRGB())
    return CGContextRetain(a1);
  Width = (double)CGBitmapContextGetWidth(a1);
  Height = (double)CGBitmapContextGetHeight(a1);
  v5 = *MEMORY[0x1E0C9D538];
  v6 = *(double *)(MEMORY[0x1E0C9D538] + 8);
  v7 = C3DCreateSRGBBitmapContextWithSize(Width, Height);
  Image = CGBitmapContextCreateImage(a1);
  v10.origin.x = v5;
  v10.origin.y = v6;
  v10.size.width = Width;
  v10.size.height = Height;
  CGContextDrawImage(v7, v10, Image);
  CGImageRelease(Image);
  return v7;
}

uint64_t C3DImageCreateWithCGImageAndSize(CGImage *a1, double a2)
{
  uint64_t v3;

  v3 = C3DImageCreateWithCGImage(a1);
  __ImageResize(v3, a1, *(float *)&a2, *((float *)&a2 + 1));
  *(_BYTE *)(v3 + 116) |= 8u;
  *(double *)(v3 + 104) = a2;
  return v3;
}

void __ImageResize(uint64_t a1, CGImage *a2, unsigned int a3, unsigned int a4)
{
  double Size;
  float v9;
  float v10;
  float32x2_t v11;
  uint32x2_t v12;
  CGFloat v13;
  CGFloat v14;
  CGContext *v15;
  const void *v16;
  const void *v17;
  NSObject *v18;
  CGRect v19;

  Size = C3DImageGetSize(a1);
  v9 = (float)a3;
  v10 = (float)a4;
  v11.f32[0] = (float)a3;
  v11.f32[1] = (float)a4;
  v12 = (uint32x2_t)vceq_f32(*(float32x2_t *)&Size, v11);
  if ((vpmin_u32(v12, v12).u32[0] & 0x80000000) == 0)
  {
    if (a2)
    {
      v13 = v9;
      v14 = v10;
      v15 = C3DCreateSRGBBitmapContextWithSize(v9, v10);
      CGContextSetInterpolationQuality(v15, kCGInterpolationHigh);
      v19.origin.x = 0.0;
      v19.origin.y = 0.0;
      v19.size.width = v13;
      v19.size.height = v14;
      CGContextDrawImage(v15, v19, a2);
      pthread_mutex_lock(&bitmapAccessSharedMutex);
      v16 = *(const void **)(a1 + 64);
      if (v16)
        CFRelease(v16);
      *(_QWORD *)(a1 + 64) = v15;
      pthread_mutex_unlock(&bitmapAccessSharedMutex);
      if (*(_DWORD *)(a1 + 96))
      {
        *(_DWORD *)(a1 + 96) = 0;
        v17 = *(const void **)(a1 + 88);
        if (v17)
        {
          CFRelease(v17);
          *(_QWORD *)(a1 + 88) = 0;
        }
      }
    }
    else
    {
      v18 = scn_default_log();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        __ImageResize_cold_1();
    }
  }
}

uint64_t C3DImageGetCatalogTextureName(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (*(_DWORD *)(a1 + 96) != 5)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DImageGetCatalogTextureName_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 88);
}

uint64_t C3DImageCopyUSDZEmbeddedData(uint64_t a1, BOOL *a2)
{
  void *URL;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  NSObject *v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  URL = (void *)C3DImageGetURL(a1);
  v4 = objc_msgSend((id)objc_msgSend(URL, "query"), "length");
  if (a2)
    *a2 = v4 != 0;
  if (!v4)
    return 0;
  v5 = objc_msgSend((id)objc_msgSend(URL, "path"), "stringByStandardizingPath");
  v6 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3998], "componentsWithURL:resolvingAgainstBaseURL:", URL, 0), "queryItems");
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
  if (!v7)
    goto LABEL_19;
  v8 = v7;
  v9 = 0;
  v10 = 0;
  v11 = *(_QWORD *)v20;
  do
  {
    for (i = 0; i != v8; ++i)
    {
      if (*(_QWORD *)v20 != v11)
        objc_enumerationMutation(v6);
      v13 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * i);
      if (objc_msgSend((id)objc_msgSend(v13, "name"), "isEqualToString:", CFSTR("offset")))
      {
        v9 = (int)objc_msgSend((id)objc_msgSend(v13, "value"), "intValue");
      }
      else if (objc_msgSend((id)objc_msgSend(v13, "name"), "isEqualToString:", CFSTR("size")))
      {
        v10 = (int)objc_msgSend((id)objc_msgSend(v13, "value"), "intValue");
      }
    }
    v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
  }
  while (v8);
  if (v10 < 1)
  {
LABEL_19:
    v17 = scn_default_log();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      C3DImageCopyUSDZEmbeddedData_cold_1();
    return 0;
  }
  v14 = (void *)objc_msgSend(objc_alloc(NSClassFromString(CFSTR("MDLMemoryMappedData"))), "initWithURL:offset:length:", objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", v5), v9, v10);
  v15 = objc_msgSend((id)objc_msgSend(v14, "dataNoCopy"), "copy");

  if (!v15)
  {
    v16 = scn_default_log();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      C3DImageCopyUSDZEmbeddedData_cold_2();
    goto LABEL_19;
  }
  return v15;
}

void _C3DImageDeleteTextureRawDataIfNeeded(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    CFRelease(*(CFTypeRef *)(v1 + 40));
    free(*(void **)(a1 + 72));
    *(_QWORD *)(a1 + 72) = 0;
  }
}

BOOL C3DImageIsConvertibleToCubeMap(uint64_t a1)
{
  double Size;

  Size = C3DImageGetSize(a1);
  return (unint64_t)*(float *)&Size == 2 * (unint64_t)*((float *)&Size + 1);
}

void C3DImageSetNeedsUnpremultiply(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DImageGetURL_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (a2)
    v12 = 2;
  else
    v12 = 0;
  *(_BYTE *)(a1 + 116) = *(_BYTE *)(a1 + 116) & 0xFD | v12;
}

void C3DImageSetImageType(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DImageGetURL_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(_DWORD *)(a1 + 120) = a2;
}

BOOL C3DImageHasCubeMapComplexLayout(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DImageGetURL_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return (*(_DWORD *)(a1 + 120) & 0xFFFFFFFC) == 4;
}

void C3DImageChangeImageTypeTo3DIfSuitable(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64x2_t v10;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DImageGetURL_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  if (C3DImageGetImageType(a1) != 2)
  {
    v10 = vcvtq_u64_f64(vcvtq_f64_f32(vrnda_f32(COERCE_FLOAT32X2_T(C3DImageGetSize(a1)))));
    if (v10.i64[1] * v10.i64[0])
    {
      if (!(v10.i64[0] % (unint64_t)v10.i64[1]))
        *(_DWORD *)(a1 + 120) = 2;
    }
  }
}

void _C3DImageChangeImageTypeToCubeMapIfSuitable(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double Size;
  unint64_t v11;
  unint64_t v12;
  int v14;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DImageGetURL_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  if (!C3DImageIsCubeMap(a1))
  {
    Size = C3DImageGetSize(a1);
    v11 = vcvtas_u32_f32(*(float *)&Size);
    v12 = vcvtas_u32_f32(*((float *)&Size + 1));
    if (*(float *)&Size == (float)v11 && *((float *)&Size + 1) == (float)v12)
    {
      if (6 * v12 == v11)
      {
        v14 = 4;
      }
      else
      {
        if (6 * v11 != v12)
          return;
        v14 = 5;
      }
      *(_DWORD *)(a1 + 120) = v14;
    }
  }
}

void C3DImageEnumerateCubeMapFacePixelBuffers(unsigned int a1, uint64_t a2, uint64_t a3, size_t a4, size_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  NSObject *v28;
  NSObject *v29;
  char *__src;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  char *__dst;
  unint64_t v36;
  uint64_t v37;
  uint8_t buf;
  char v39[15];

  v10 = a2;
  if (a1 == 5)
  {
    v11 = 0;
    v12 = a3 * a2;
    do
    {
      (*(void (**)(uint64_t, _QWORD, uint64_t))(a7 + 16))(a7, v11++, a6);
      a6 += v12;
    }
    while (v11 != 6);
    return;
  }
  v15 = a1;
  __dst = (char *)malloc_type_malloc(a4 * a2, 0x970B7427uLL);
  if (v15 <= 7 && ((1 << v15) & 0xD0) != 0)
  {
    v16 = 0;
    __src = (char *)(a6 + a5 * (v10 - 1 + v10) + a3 * (3 * v10 + v10 - 1));
    v33 = a6;
    v32 = a3 * v10;
    v37 = v10;
    v34 = v15;
    while (1)
    {
      v36 = v16;
      if (v15 == 4)
      {
        v17 = 0;
        v18 = v16;
        if (v10)
          goto LABEL_20;
      }
      else
      {
        if (v15 == 7)
        {
          v17 = 1;
          v18 = 2;
          switch(v16)
          {
            case 0uLL:
              goto LABEL_19;
            case 1uLL:
              v18 = 0;
              v17 = 1;
              if (v10)
                goto LABEL_20;
              goto LABEL_22;
            case 2uLL:
              v17 = 0;
              goto LABEL_27;
            case 3uLL:
              v17 = 2;
              goto LABEL_27;
            case 4uLL:
              v17 = 1;
LABEL_27:
              v18 = 1;
              if (!v10)
                goto LABEL_22;
              goto LABEL_20;
            case 5uLL:
              if (a5)
              {
                if (v10)
                {
                  v22 = 0;
                  v23 = __dst;
                  v24 = __src;
                  v31 = a7;
                  do
                  {
                    v25 = v23;
                    v26 = v37;
                    v27 = v24;
                    do
                    {
                      memcpy(v25, v27, a5);
                      v27 -= a5;
                      v25 += a5;
                      --v26;
                    }
                    while (v26);
                    ++v22;
                    v24 -= a3;
                    v23 += a4;
                    a7 = v31;
                  }
                  while (v22 != v37);
                }
              }
              else
              {
                v28 = scn_default_log();
                if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
                  C3DImageEnumerateCubeMapFacePixelBuffers_cold_2(&buf, v39, v28);
              }
              goto LABEL_22;
            default:
              goto LABEL_18;
          }
        }
        if (v16 >= 6)
        {
LABEL_18:
          v17 = 0;
          v18 = 0;
LABEL_19:
          if (!v10)
            goto LABEL_22;
LABEL_20:
          v19 = (char *)(v33 + v18 * a4 + v32 * v17);
          v20 = __dst;
          v21 = v37;
          do
          {
            memcpy(v20, v19, a4);
            v20 += a4;
            v19 += a3;
            --v21;
          }
          while (v21);
          goto LABEL_22;
        }
        v17 = qword_1DD008ED8[v16];
        v18 = qword_1DD008F08[v16];
        if (v10)
          goto LABEL_20;
      }
LABEL_22:
      (*(void (**)(uint64_t, _QWORD, char *))(a7 + 16))(a7, v36, __dst);
      v16 = v36 + 1;
      v10 = v37;
      v15 = v34;
      if (v36 == 5)
        goto LABEL_40;
    }
  }
  v29 = scn_default_log();
  if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    C3DImageEnumerateCubeMapFacePixelBuffers_cold_1();
LABEL_40:
  free(__dst);
}

void C3DImageEnumerateTexture3DSlicePixelBuffers(int a1, uint64_t a2, uint64_t a3, uint64_t a4, size_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t i;
  NSObject *v19;
  uint64_t v20;

  if (a1 == 2)
  {
    v14 = (char *)malloc_type_malloc(a5 * a2, 0xDB83C333uLL);
    if (a3)
    {
      v15 = 0;
      v20 = a6 * a2;
      do
      {
        v16 = a7;
        v17 = v14;
        for (i = a2; i; --i)
        {
          memcpy(v17, v16, a5);
          v17 += a5;
          v16 += a4;
        }
        (*(void (**)(uint64_t, _QWORD, char *))(a8 + 16))(a8, v15++, v14);
        a7 += v20;
      }
      while (v15 != a3);
    }
    free(v14);
  }
  else
  {
    v19 = scn_default_log();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      C3DImageEnumerateTexture3DSlicePixelBuffers_cold_1();
  }
}

_DWORD *C3DImageGetDefault()
{
  _DWORD *result;
  CGDataProvider *v1;
  CGColorSpace *v2;
  CGImage *v3;

  result = (_DWORD *)kDefaultImage;
  if (!kDefaultImage)
  {
    result = C3DMalloc(4uLL);
    if (result)
    {
      *result = -1;
      v1 = CGDataProviderCreateWithData(0, result, 4uLL, 0);
      v2 = (CGColorSpace *)C3DColorSpaceLinearSRGB();
      v3 = CGImageCreate(1uLL, 1uLL, 8uLL, 0x20uLL, 4uLL, v2, 0x4001u, v1, 0, 0, kCGRenderingIntentDefault);
      CGDataProviderRelease(v1);
      kDefaultImage = C3DImageCreateWithCGImage(v3);
      CFRelease(v3);
      return (_DWORD *)kDefaultImage;
    }
  }
  return result;
}

unsigned int *C3DImageGetTextureRawDataCompression(uint64_t a1)
{
  unsigned int *result;

  result = (unsigned int *)C3DImageGetTextureRawData(a1);
  if (result)
    return (unsigned int *)*result;
  return result;
}

id _C3DImageCFFinalize(uint64_t a1)
{
  CFNumberRef v2;
  __CFNotificationCenter *LocalCenter;
  uint64_t v4;
  const void *v5;
  const void *v6;
  uint64_t valuePtr;

  valuePtr = a1;
  v2 = CFNumberCreate(0, kCFNumberLongType, &valuePtr);
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterPostNotification(LocalCenter, CFSTR("kC3DNotificationImageWillDie"), v2, 0, 1u);
  CFRelease(v2);
  _C3DImageDeleteTextureRawDataIfNeeded(valuePtr);
  v4 = valuePtr;
  v5 = *(const void **)(valuePtr + 88);
  if (v5)
  {
    CFRelease(v5);
    v4 = valuePtr;
    *(_QWORD *)(valuePtr + 88) = 0;
  }
  v6 = *(const void **)(v4 + 64);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(valuePtr + 64) = 0;
  }
  return C3DEntityCFFinalize(a1);
}

CFStringRef _C3DImageCFCopyDebugDescription(uint64_t a1)
{
  unsigned int v2;
  BOOL v3;
  int v4;
  const __CFAllocator *v6;
  const __CFAllocator *v8;

  v2 = *(_DWORD *)(a1 + 96);
  v3 = v2 > 4;
  v4 = (1 << v2) & 0x16;
  if (v3 || v4 == 0)
  {
    v8 = CFGetAllocator((CFTypeRef)a1);
    return CFStringCreateWithFormat(v8, 0, CFSTR("<C3DImage %p src:%p [%fx%f]>"), a1, *(_QWORD *)(a1 + 88), COERCE_FLOAT(*(_QWORD *)(a1 + 104)), COERCE_FLOAT(HIDWORD(*(_QWORD *)(a1 + 104))));
  }
  else
  {
    v6 = CFGetAllocator((CFTypeRef)a1);
    return CFStringCreateWithFormat(v6, 0, CFSTR("<C3DImage %p src:%@ [%fx%f]>"), a1, *(_QWORD *)(a1 + 88), COERCE_FLOAT(*(_QWORD *)(a1 + 104)), COERCE_FLOAT(HIDWORD(*(_QWORD *)(a1 + 104))));
  }
}

uint64_t _C3DImageInitWithPropertyList(uint64_t a1, const __CFDictionary *a2, const __CFDictionary *a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void *Value;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const __CFURL *v25;
  const __CFString *v26;
  const __CFString *v27;
  const __CFString *Attribute;
  const __CFURL *v29;
  const __CFURL *v30;
  void *v31;
  BOOL v32;
  const __CFURL *v33;
  const __CFURL *v34;
  const __CFURL *v35;
  const __CFString *v36;
  const __CFURL *v37;
  const __CFURL *v38;
  uint64_t SharedInstance;
  const void *v40;
  uint64_t v41;
  NSObject *v42;

  if (!a1)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      _C3DGeometryFillLibraryForSerialization_cold_1(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  v14 = C3DEntityInitWithPropertyList(a1, a2);
  if ((v14 & 1) == 0)
  {
    v16 = scn_default_log();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      _C3DImageInitWithPropertyList_cold_2(v16, v17, v18, v19, v20, v21, v22, v23);
    return v14;
  }
  Value = CFDictionaryGetValue(a2, CFSTR("imageData"));
  if (Value)
  {
    *(_QWORD *)(a1 + 88) = CFRetain(Value);
    *(_DWORD *)(a1 + 96) = 2;
    C3DImageCacheBitmap(a1);
    return v14;
  }
  v25 = (const __CFURL *)CFDictionaryGetValue(a3, CFSTR("kEnclosingFolderURL"));
  v26 = (const __CFString *)CFDictionaryGetValue(a2, CFSTR("imageRelativePath"));
  v27 = (const __CFString *)CFDictionaryGetValue(a2, CFSTR("distantImageURL"));
  *(_DWORD *)(a1 + 96) = 1;
  Attribute = (const __CFString *)C3DImageGetAttribute(a1, CFSTR("runtimePath"));
  if (Attribute)
  {
    v29 = CFURLCreateWithFileSystemPath(0, Attribute, kCFURLPOSIXPathStyle, 0);
    if (v29)
    {
      v30 = v29;
      *(_QWORD *)(a1 + 88) = C3DIOCopyResolvedImageURL(v29, a3);
      CFRelease(v30);
    }
  }
  v31 = *(void **)(a1 + 88);
  if (v31)
    goto LABEL_39;
  if (v26)
  {
    v32 = CFStringGetLength(v26) >= 1 && CFStringGetCharacterAtIndex(v26, 0) == 47;
    if (!v25 || v32)
      v33 = CFURLCreateWithFileSystemPath(0, v26, kCFURLPOSIXPathStyle, 0);
    else
      v33 = (const __CFURL *)C3DURLCreateCopyAppendingPathComponent(v25, v26);
  }
  else
  {
    if (!v27)
    {
      v34 = 0;
      goto LABEL_30;
    }
    v33 = CFURLCreateWithString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v27, 0);
  }
  v34 = v33;
  if (v33)
  {
    v35 = C3DIOCopyResolvedImageURL(v33, a3);
    *(_QWORD *)(a1 + 88) = v35;
    if (v35)
      goto LABEL_33;
  }
  else if (*(_QWORD *)(a1 + 88))
  {
    goto LABEL_33;
  }
LABEL_30:
  v36 = (const __CFString *)C3DImageGetAttribute(a1, CFSTR("relativePath"));
  if (v36)
  {
    v37 = CFURLCreateWithFileSystemPath(0, v36, kCFURLPOSIXPathStyle, 0);
    if (v37)
    {
      v38 = v37;
      *(_QWORD *)(a1 + 88) = C3DIOCopyResolvedImageURL(v37, a3);
      CFRelease(v38);
    }
  }
LABEL_33:
  v31 = *(void **)(a1 + 88);
  if (v34 && !v31)
  {
    *(_QWORD *)(a1 + 88) = CFRetain(v34);
LABEL_37:
    CFRelease(v34);
    v31 = *(void **)(a1 + 88);
    goto LABEL_38;
  }
  if (v34)
    goto LABEL_37;
LABEL_38:
  if (v31)
  {
LABEL_39:
    SharedInstance = C3DResourceCacheGetSharedInstance();
    v40 = C3DResourceCacheCopyResourceForSource(SharedInstance, v31);
    if (v40)
    {
      CFRelease(v40);
    }
    else
    {
      v41 = C3DResourceCacheGetSharedInstance();
      C3DResourceCacheAddResource(v41, *(void **)(a1 + 88), (const void *)a1);
    }
    return v14;
  }
  v42 = scn_default_log();
  if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
    _C3DImageInitWithPropertyList_cold_1();
  return v14;
}

__CFDictionary *_C3DImageCopyPropertyList(_QWORD *a1, uint64_t a2, const __CFDictionary *a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __CFDictionary *v14;
  const __CFBoolean *Value;
  BOOL v16;
  const __CFBoolean *v17;
  BOOL v18;
  const void *v19;
  void *v20;
  const void *Data;
  const void *v22;
  const void *v23;
  uint64_t UpdateQueue;
  CFStringRef v25;
  const __CFString *v26;
  const __CFURL *v27;
  const __CFURL *v28;
  const __CFString *v29;
  const __CFString *v30;
  int HasPrefix;
  char v32;
  const void *v33;
  NSObject *v34;
  uint64_t URL;
  const void *v36;

  if (!a1)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      _C3DGeometryFillLibraryForSerialization_cold_1(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  v14 = C3DEntityCopyPropertyList(a1, a2, (uint64_t)a3);
  Value = (const __CFBoolean *)CFDictionaryGetValue(a3, CFSTR("kCreatePropertyListShouldKeepReferencesToFilesOption"));
  if (Value)
    v16 = CFBooleanGetValue(Value) != 0;
  else
    v16 = 1;
  v17 = (const __CFBoolean *)CFDictionaryGetValue(a3, CFSTR("kSceneSourceSkipImagePathResolution"));
  if (v17)
  {
    v18 = CFBooleanGetValue(v17) != 0;
    if (v16)
      goto LABEL_9;
LABEL_13:
    Data = (const void *)C3DImageGetData((uint64_t)a1);
    if (Data)
    {
      v22 = Data;
      CFRetain(Data);
    }
    else
    {
      URL = C3DImageGetURL((uint64_t)a1);
      if (!URL)
        return v14;
      v22 = (const void *)C3DCreateDataWithContentOfURL(URL, 0);
      if (!v22)
        return v14;
    }
    CFDictionarySetValue(v14, CFSTR("imageData"), v22);
    v23 = v22;
LABEL_35:
    CFRelease(v23);
    return v14;
  }
  v18 = 0;
  if (!v16)
    goto LABEL_13;
LABEL_9:
  v19 = CFDictionaryGetValue(a3, CFSTR("kC3DIOSerializationExportDelegate"));
  v20 = (void *)CFDictionaryGetValue(a3, CFSTR("SCNSceneExportDestinationURL"));
  if (v20)
  {
    if (!v19)
      goto LABEL_20;
  }
  else
  {
    v20 = (void *)CFDictionaryGetValue(a3, CFSTR("kEnclosingFolderURL"));
    if (!v19)
      goto LABEL_20;
  }
  UpdateQueue = C3DParticleManagerGetUpdateQueue();
  if (UpdateQueue)
  {
    v25 = (CFStringRef)UpdateQueue;
    v26 = CFSTR("imageRelativePath");
LABEL_19:
    CFDictionarySetValue(v14, v26, v25);
    return v14;
  }
LABEL_20:
  v27 = (const __CFURL *)C3DImageGetURL((uint64_t)a1);
  if (!v27)
    return v14;
  v28 = v27;
  v29 = CFURLCopyScheme(v27);
  if (v29)
  {
    v30 = v29;
    HasPrefix = CFStringHasPrefix(v29, CFSTR("file"));
    CFRelease(v30);
    if (!HasPrefix)
    {
      v25 = CFURLGetString(v28);
      v26 = CFSTR("distantImageURL");
      goto LABEL_19;
    }
  }
  if (v20)
    v32 = v18;
  else
    v32 = 1;
  if ((v32 & 1) == 0)
  {
    v33 = C3DCopyRelativeFromFileURL(v20, v28);
    goto LABEL_34;
  }
  v33 = CFURLCopyFileSystemPath(v28, kCFURLPOSIXPathStyle);
  if (v33)
  {
LABEL_34:
    v36 = v33;
    CFDictionarySetValue(v14, CFSTR("imageRelativePath"), v33);
    v23 = v36;
    goto LABEL_35;
  }
  v34 = scn_default_log();
  if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    _C3DImageCopyPropertyList_cold_1();
  return v14;
}

uint64_t _C3DImageFinalizeDeserialization()
{
  return 1;
}

__CFArray *_C3DImageCopyInstanceVariables(uint64_t a1)
{
  __CFArray *Mutable;
  int v3;
  __CFDictionary *v4;
  CFNumberRef v5;
  CFNumberRef v6;
  CFNumberRef v7;
  __CFDictionary *v8;
  CFNumberRef v9;
  CFNumberRef v10;
  CFNumberRef v11;
  __CFDictionary *v12;
  CFNumberRef v13;
  CFNumberRef v14;
  CFNumberRef v15;
  __CFDictionary *v16;
  CFNumberRef v17;
  CFNumberRef v18;
  CFNumberRef v19;
  const CFDictionaryKeyCallBacks *v20;
  const CFDictionaryValueCallBacks *v21;
  __CFDictionary *v22;
  CFNumberRef v23;
  CFNumberRef v24;
  CFNumberRef v25;
  __CFDictionary *v26;
  CFNumberRef v27;
  CFNumberRef v28;
  CFNumberRef v29;
  __CFDictionary *v30;
  CFNumberRef v31;
  CFNumberRef v32;
  CFNumberRef v33;
  __CFDictionary *v34;
  CFNumberRef v35;
  CFNumberRef v36;
  CFNumberRef v37;
  char v39;
  char *v40;
  int v41;
  int valuePtr;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v3 = *(_DWORD *)(a1 + 96);
  if (v3 == 1)
  {
    v4 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v41 = 2;
    valuePtr = 5;
    v40 = (char *)(a1 + 88);
    v5 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    v6 = CFNumberCreate(0, kCFNumberSInt32Type, &v41);
    v7 = CFNumberCreate(0, kCFNumberLongType, &v40);
    CFDictionarySetValue(v4, CFSTR("name"), CFSTR("url"));
    CFDictionarySetValue(v4, CFSTR("type"), v5);
    CFDictionarySetValue(v4, CFSTR("address"), v7);
    CFDictionarySetValue(v4, CFSTR("semantic"), v6);
    CFArrayAppendValue(Mutable, v4);
    CFRelease(v6);
    CFRelease(v4);
    CFRelease(v7);
    CFRelease(v5);
    v3 = *(_DWORD *)(a1 + 96);
  }
  if (v3 == 2)
  {
    v8 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v41 = 2;
    valuePtr = 5;
    v40 = (char *)(a1 + 88);
    v9 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    v10 = CFNumberCreate(0, kCFNumberSInt32Type, &v41);
    v11 = CFNumberCreate(0, kCFNumberLongType, &v40);
    CFDictionarySetValue(v8, CFSTR("name"), CFSTR("data"));
    CFDictionarySetValue(v8, CFSTR("type"), v9);
    CFDictionarySetValue(v8, CFSTR("address"), v11);
    CFDictionarySetValue(v8, CFSTR("semantic"), v10);
    CFArrayAppendValue(Mutable, v8);
    CFRelease(v10);
    CFRelease(v8);
    CFRelease(v11);
    CFRelease(v9);
    v3 = *(_DWORD *)(a1 + 96);
  }
  if (v3 == 3)
  {
    v12 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v41 = 2;
    valuePtr = 5;
    v40 = (char *)(a1 + 88);
    v13 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    v14 = CFNumberCreate(0, kCFNumberSInt32Type, &v41);
    v15 = CFNumberCreate(0, kCFNumberLongType, &v40);
    CFDictionarySetValue(v12, CFSTR("name"), CFSTR("cgImage"));
    CFDictionarySetValue(v12, CFSTR("type"), v13);
    CFDictionarySetValue(v12, CFSTR("address"), v15);
    CFDictionarySetValue(v12, CFSTR("semantic"), v14);
    CFArrayAppendValue(Mutable, v12);
    CFRelease(v14);
    CFRelease(v12);
    CFRelease(v15);
    CFRelease(v13);
    v3 = *(_DWORD *)(a1 + 96);
  }
  if (v3 == 4)
  {
    v16 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v41 = 2;
    valuePtr = 5;
    v40 = (char *)(a1 + 88);
    v17 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    v18 = CFNumberCreate(0, kCFNumberSInt32Type, &v41);
    v19 = CFNumberCreate(0, kCFNumberLongType, &v40);
    CFDictionarySetValue(v16, CFSTR("name"), CFSTR("clientImage"));
    CFDictionarySetValue(v16, CFSTR("type"), v17);
    CFDictionarySetValue(v16, CFSTR("address"), v19);
    CFDictionarySetValue(v16, CFSTR("semantic"), v18);
    CFArrayAppendValue(Mutable, v16);
    CFRelease(v18);
    CFRelease(v16);
    CFRelease(v19);
    CFRelease(v17);
  }
  v20 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v21 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  v22 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v41 = 2;
  valuePtr = 5;
  v40 = (char *)(a1 + 64);
  v23 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v24 = CFNumberCreate(0, kCFNumberSInt32Type, &v41);
  v25 = CFNumberCreate(0, kCFNumberLongType, &v40);
  CFDictionarySetValue(v22, CFSTR("name"), CFSTR("bitmap"));
  CFDictionarySetValue(v22, CFSTR("type"), v23);
  CFDictionarySetValue(v22, CFSTR("address"), v25);
  CFDictionarySetValue(v22, CFSTR("semantic"), v24);
  CFArrayAppendValue(Mutable, v22);
  CFRelease(v24);
  CFRelease(v22);
  CFRelease(v25);
  CFRelease(v23);
  v39 = *(_BYTE *)(a1 + 116) & 1;
  v26 = CFDictionaryCreateMutable(0, 4, v20, v21);
  v41 = 0;
  valuePtr = 3;
  v40 = &v39;
  v27 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v28 = CFNumberCreate(0, kCFNumberSInt32Type, &v41);
  v29 = CFNumberCreate(0, kCFNumberLongType, &v40);
  CFDictionarySetValue(v26, CFSTR("name"), CFSTR("hasAlpha"));
  CFDictionarySetValue(v26, CFSTR("type"), v27);
  CFDictionarySetValue(v26, CFSTR("address"), v29);
  CFDictionarySetValue(v26, CFSTR("semantic"), v28);
  CFArrayAppendValue(Mutable, v26);
  CFRelease(v28);
  CFRelease(v26);
  CFRelease(v29);
  CFRelease(v27);
  v30 = CFDictionaryCreateMutable(0, 4, v20, v21);
  v41 = 0;
  valuePtr = 8;
  v40 = (char *)(a1 + 104);
  v31 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v32 = CFNumberCreate(0, kCFNumberSInt32Type, &v41);
  v33 = CFNumberCreate(0, kCFNumberLongType, &v40);
  CFDictionarySetValue(v30, CFSTR("name"), CFSTR("size"));
  CFDictionarySetValue(v30, CFSTR("type"), v31);
  CFDictionarySetValue(v30, CFSTR("address"), v33);
  CFDictionarySetValue(v30, CFSTR("semantic"), v32);
  CFArrayAppendValue(Mutable, v30);
  CFRelease(v32);
  CFRelease(v30);
  CFRelease(v33);
  CFRelease(v31);
  v34 = CFDictionaryCreateMutable(0, 4, v20, v21);
  v41 = 0;
  valuePtr = 2;
  v40 = (char *)(a1 + 120);
  v35 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v36 = CFNumberCreate(0, kCFNumberSInt32Type, &v41);
  v37 = CFNumberCreate(0, kCFNumberLongType, &v40);
  CFDictionarySetValue(v34, CFSTR("name"), CFSTR("type"));
  CFDictionarySetValue(v34, CFSTR("type"), v35);
  CFDictionarySetValue(v34, CFSTR("address"), v37);
  CFDictionarySetValue(v34, CFSTR("semantic"), v36);
  CFArrayAppendValue(Mutable, v34);
  CFRelease(v36);
  CFRelease(v34);
  CFRelease(v37);
  CFRelease(v35);
  return Mutable;
}

float srdnoise3(float *a1, float *a2, float *a3, float a4, float a5, float a6, float a7)
{
  __float2 v13;
  float v14;
  int v15;
  int v16;
  int v17;
  float v18;
  float v19;
  float v20;
  float v21;
  _BOOL4 v22;
  int v23;
  _BOOL4 v24;
  _BOOL4 v25;
  int v26;
  _BOOL4 v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float *v40;
  float *v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  uint64_t v52;
  float *v53;
  float *v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  uint64_t v67;
  float *v68;
  float *v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  uint64_t v77;
  float *v78;
  float *v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;

  v13 = __sincosf_stret(a7);
  v14 = (float)((float)(a4 + a5) + a6) * 0.333333333;
  v15 = (int)(float)(v14 + a4) - ((float)(v14 + a4) <= 0.0);
  v16 = (int)(float)(v14 + a5) - ((float)(v14 + a5) <= 0.0);
  v17 = (int)(float)(v14 + a6) - ((float)(v14 + a6) <= 0.0);
  v18 = (float)(v15 + v16 + v17) * 0.166666667;
  v19 = a4 - (float)((float)v15 - v18);
  v20 = a5 - (float)((float)v16 - v18);
  v21 = a6 - (float)((float)v17 - v18);
  if (v19 >= v20)
  {
    v23 = 0;
    if (v20 < v21)
    {
      v26 = 0;
      v22 = v19 >= v21;
      v25 = v19 < v21;
      v24 = 1;
      goto LABEL_6;
    }
    v25 = 0;
    v27 = 0;
    v22 = 1;
    v24 = 1;
  }
  else
  {
    v22 = 0;
    if (v20 < v21)
    {
      v23 = 0;
      v24 = 0;
      v25 = 1;
      v26 = 1;
LABEL_6:
      v27 = 1;
      goto LABEL_10;
    }
    v25 = 0;
    v24 = v19 >= v21;
    v27 = v19 < v21;
    v23 = 1;
  }
  v26 = 1;
LABEL_10:
  v28 = (float)(v19 - (float)v22) + 0.166666667;
  v29 = (float)(v20 - (float)v23) + 0.166666667;
  v30 = (float)(v21 - (float)v25) + 0.166666667;
  v31 = (float)((float)(0.6 - (float)(v19 * v19)) - (float)(v20 * v20)) - (float)(v21 * v21);
  v32 = 0.0;
  v33 = 0.0;
  v34 = 0.0;
  v35 = 0.0;
  v36 = 0.0;
  v37 = 0.0;
  v38 = 0.0;
  v39 = 0.0;
  if (v31 >= 0.0)
  {
    v40 = (float *)((char *)&grad3u
                  + 12
                  * (perm[perm[perm[v17] + (unint64_t)v16]
                        + (unint64_t)v15] & 0xF));
    v41 = (float *)((char *)&grad3v
                  + 12
                  * (perm[perm[perm[v17] + (unint64_t)v16]
                        + (unint64_t)v15] & 0xF));
    v33 = (float)(v13.__sinval * *v41) + (float)(v13.__cosval * *v40);
    v34 = (float)(v13.__sinval * v41[1]) + (float)(v13.__cosval * v40[1]);
    v35 = (float)(v13.__sinval * v41[2]) + (float)(v13.__cosval * v40[2]);
    v37 = v31 * v31;
    v38 = v37 * v37;
    v39 = (float)(v37 * v37) * (float)((float)((float)(v20 * v34) + (float)(v33 * v19)) + (float)(v35 * v21));
    v36 = (float)((float)(0.6 - (float)(v19 * v19)) - (float)(v20 * v20)) - (float)(v21 * v21);
  }
  v85 = v36;
  v86 = v37;
  v88 = v33;
  v89 = v34;
  v90 = v35;
  v95 = v39;
  v42 = (float)(v19 - (float)v24) + 0.333333334;
  v43 = (float)(v20 - (float)v26) + 0.333333334;
  v44 = (float)(v21 - (float)v27) + 0.333333334;
  v45 = (float)((float)(0.6 - (float)(v28 * v28)) - (float)(v29 * v29)) - (float)(v30 * v30);
  v46 = 0.0;
  v47 = 0.0;
  v48 = 0.0;
  v49 = 0.0;
  v50 = 0.0;
  v51 = 0.0;
  if (v45 >= 0.0)
  {
    v52 = 3
        * (perm[v22
              + v15
              + (unint64_t)perm[v23
                                     + v16
                                     + (unint64_t)perm[v25 + (unint64_t)v17]]] & 0xF);
    v53 = (float *)((char *)&grad3u + 4 * v52);
    v54 = (float *)((char *)&grad3v + 4 * v52);
    v32 = (float)(v13.__sinval * *v54) + (float)(v13.__cosval * *v53);
    v46 = (float)(v13.__sinval * v54[1]) + (float)(v13.__cosval * v53[1]);
    v47 = (float)(v13.__sinval * v54[2]) + (float)(v13.__cosval * v53[2]);
    v49 = v45 * v45;
    v50 = v49 * v49;
    v51 = (float)(v49 * v49) * (float)((float)((float)(v46 * v29) + (float)(v32 * v28)) + (float)(v47 * v30));
    v48 = (float)((float)(0.6 - (float)(v28 * v28)) - (float)(v29 * v29)) - (float)(v30 * v30);
  }
  v93 = (float)(v19 - (float)v22) + 0.166666667;
  v94 = v51;
  v87 = v32;
  v91 = v30;
  v92 = v29;
  v55 = (float)(v19 + -1.0) + 0.500000001;
  v56 = (float)(v20 + -1.0) + 0.500000001;
  v57 = (float)(v21 + -1.0) + 0.500000001;
  v58 = (float)((float)(0.6 - (float)(v42 * v42)) - (float)(v43 * v43)) - (float)(v44 * v44);
  v59 = 0.0;
  v60 = 0.0;
  v61 = 0.0;
  v62 = 0.0;
  v63 = 0.0;
  v64 = 0.0;
  v65 = 0.0;
  v66 = 0.0;
  if (v58 >= 0.0)
  {
    v67 = 3
        * (perm[v24
              + v15
              + (unint64_t)perm[v26
                                     + v16
                                     + (unint64_t)perm[v27 + (unint64_t)v17]]] & 0xF);
    v68 = (float *)((char *)&grad3u + 4 * v67);
    v69 = (float *)((char *)&grad3v + 4 * v67);
    v60 = (float)(v13.__sinval * *v69) + (float)(v13.__cosval * *v68);
    v61 = (float)(v13.__sinval * v69[1]) + (float)(v13.__cosval * v68[1]);
    v62 = (float)(v13.__sinval * v69[2]) + (float)(v13.__cosval * v68[2]);
    v64 = v58 * v58;
    v65 = v64 * v64;
    v66 = (float)(v64 * v64) * (float)((float)((float)(v61 * v43) + (float)(v60 * v42)) + (float)(v62 * v44));
    v63 = (float)((float)(0.6 - (float)(v42 * v42)) - (float)(v43 * v43)) - (float)(v44 * v44);
  }
  v70 = (float)((float)(0.6 - (float)(v55 * v55)) - (float)(v56 * v56)) - (float)(v57 * v57);
  v71 = 0.0;
  v72 = 0.0;
  v73 = 0.0;
  v74 = 0.0;
  v75 = 0.0;
  v76 = 0.0;
  if (v70 >= 0.0)
  {
    v77 = perm[v17 + 1];
    v78 = (float *)((char *)&grad3u
                  + 12
                  * (perm[v15
                        + 1
                        + (unint64_t)perm[v16 + 1 + v77]] & 0xF));
    v79 = (float *)((char *)&grad3v
                  + 12
                  * (perm[v15
                        + 1
                        + (unint64_t)perm[v16 + 1 + v77]] & 0xF));
    v59 = (float)(v13.__sinval * *v79) + (float)(v13.__cosval * *v78);
    v71 = (float)(v13.__sinval * v79[1]) + (float)(v13.__cosval * v78[1]);
    v72 = (float)(v13.__sinval * v79[2]) + (float)(v13.__cosval * v78[2]);
    v74 = v70 * v70;
    v75 = v74 * v74;
    v76 = (float)(v74 * v74) * (float)((float)((float)(v71 * v56) + (float)(v59 * v55)) + (float)(v72 * v57));
    v73 = (float)((float)(0.6 - (float)(v55 * v55)) - (float)(v56 * v56)) - (float)(v57 * v57);
  }
  if (a1 && a2 && a3)
  {
    v80 = (float)((float)((float)(v20 * v89) + (float)(v88 * v19)) + (float)(v90 * v21)) * (float)(v85 * v86);
    *a1 = v19 * v80;
    *a2 = v20 * v80;
    *a3 = v21 * v80;
    v81 = (float)((float)((float)(v46 * v92) + (float)(v87 * v93)) + (float)(v47 * v91)) * (float)(v48 * v49);
    *a1 = *a1 + (float)(v81 * v93);
    *a2 = *a2 + (float)(v81 * v92);
    *a3 = *a3 + (float)(v81 * v91);
    v82 = (float)((float)((float)(v61 * v43) + (float)(v60 * v42)) + (float)(v62 * v44)) * (float)(v63 * v64);
    *a1 = *a1 + (float)(v82 * v42);
    *a2 = *a2 + (float)(v82 * v43);
    *a3 = *a3 + (float)(v82 * v44);
    v83 = (float)((float)((float)(v71 * v56) + (float)(v59 * v55)) + (float)(v72 * v57)) * (float)(v73 * v74);
    *a1 = *a1 + (float)(v83 * v55);
    *a2 = *a2 + (float)(v83 * v56);
    *a3 = *a3 + (float)(v83 * v57);
    *a1 = *a1 * -8.0;
    *a2 = *a2 * -8.0;
    *a3 = *a3 * -8.0;
    *a1 = (float)((float)((float)((float)(v87 * v50) + (float)(v38 * v88)) + (float)(v65 * v60)) + (float)(v75 * v59))
        + *a1;
    *a2 = (float)((float)((float)((float)(v46 * v50) + (float)(v38 * v89)) + (float)(v65 * v61)) + (float)(v75 * v71))
        + *a2;
    *a3 = (float)((float)((float)((float)(v47 * v50) + (float)(v38 * v90)) + (float)(v65 * v62)) + (float)(v75 * v72))
        + *a3;
    *a1 = *a1 * 28.0;
    *a2 = *a2 * 28.0;
    *a3 = *a3 * 28.0;
  }
  return (float)((float)((float)(v95 + v94) + v66) + v76) * 28.0;
}

id _fillViewsFromCubeMap(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  id result;

  for (i = 0; i != 6; ++i)
  {
    result = (id)objc_msgSend(a1, "newTextureViewWithPixelFormat:textureType:levels:slices:", objc_msgSend(a1, "pixelFormat"), 2, a2, 1, i, 1);
    *(_QWORD *)(a3 + 8 * i) = result;
  }
  return result;
}

uint64_t replaceSlice(void *a1, void *a2, unsigned int a3, unsigned int a4, const __CFData *a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t BitSize;
  unint64_t v16;
  uint64_t v17;
  _QWORD v19[6];

  v12 = objc_msgSend(a2, "width");
  v13 = objc_msgSend(a2, "height");
  v14 = objc_msgSend(a1, "pixelFormat");
  BitSize = SCNMTLPixelFormatGetBitSize();
  if ((v14 & 0xFFFFFFFFFFFFFFF8) == 0xA0)
    v16 = 0;
  else
    v16 = (BitSize >> 3) * v12;
  if (a4)
  {
    v17 = a4;
    do
    {
      if (v12 >> 1 <= 1)
        v12 = 1;
      else
        v12 >>= 1;
      if (v13 >> 1 <= 1)
        v13 = 1;
      else
        v13 >>= 1;
      if ((v14 & 0xFFFFFFFFFFFFFFF8) != 0xA0)
      {
        if (a6 && *(_BYTE *)(a6 + 7))
          v16 = ((v12 + (unint64_t)*(unsigned __int8 *)(a6 + 7) - 1)
               / *(unsigned __int8 *)(a6 + 7)
               * *(unsigned __int8 *)(a6 + 4)) >> 3;
        else
          v16 = v12 * (BitSize >> 3);
      }
      --v17;
    }
    while (v17);
  }
  memset(v19, 0, 24);
  v19[3] = v12;
  v19[4] = v13;
  v19[5] = 1;
  return objc_msgSend(a1, "replaceRegion:mipmapLevel:slice:withBytes:bytesPerRow:bytesPerImage:", v19, a4, a3, CFDataGetBytePtr(a5), v16, 0);
}

unint64_t replaceRegion(void *a1, void *a2, unsigned int a3, CFArrayRef theArray, uint64_t a5)
{
  CFIndex Count;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  CFIndex v15;
  unint64_t v16;
  const __CFData *ValueAtIndex;
  const UInt8 *BytePtr;
  unint64_t v19;
  unint64_t v20;
  _QWORD v21[6];

  Count = CFArrayGetCount(theArray);
  v11 = objc_msgSend(a2, "width");
  v12 = objc_msgSend(a2, "height");
  v13 = objc_msgSend(a1, "pixelFormat");
  result = SCNMTLPixelFormatGetBitSize();
  if (Count >= 1)
  {
    v15 = 0;
    v20 = result >> 3;
    v16 = v13 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(theArray, v15);
      BytePtr = CFDataGetBytePtr(ValueAtIndex);
      if (v16 == 160)
      {
        v19 = 0;
      }
      else if (a5 && *(_BYTE *)(a5 + 7))
      {
        v19 = ((v11 + *(unsigned __int8 *)(a5 + 7) - 1)
             / *(unsigned __int8 *)(a5 + 7)
             * (unint64_t)*(unsigned __int8 *)(a5 + 4)) >> 3;
      }
      else
      {
        v19 = v11 * v20;
      }
      memset(v21, 0, 24);
      v21[3] = v11;
      v21[4] = v12;
      v21[5] = 1;
      result = objc_msgSend(a1, "replaceRegion:mipmapLevel:slice:withBytes:bytesPerRow:bytesPerImage:", v21, v15, a3, BytePtr, v19, 0);
      if (v11 >> 1 <= 1)
        v11 = 1;
      else
        v11 >>= 1;
      if (v12 >> 1 <= 1)
        v12 = 1;
      else
        v12 >>= 1;
      ++v15;
    }
    while (Count != v15);
  }
  return result;
}

void SCNMTLBlitCommandEncoder::copyTextureToTexture(void **a1, void *a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  void *v25;
  uint64_t v26;
  _QWORD v27[3];
  _QWORD v28[3];
  _QWORD v29[3];

  v10 = objc_msgSend(a2, "width");
  v26 = objc_msgSend(a2, "height");
  v11 = objc_msgSend(a2, "depth");
  v12 = objc_msgSend(a2, "arrayLength");
  if ((unint64_t)(objc_msgSend(a2, "textureType") - 5) >= 2)
    v13 = v12;
  else
    v13 = 6 * v12;
  v14 = objc_msgSend(a4, "arrayLength");
  if ((unint64_t)(objc_msgSend(a4, "textureType") - 5) >= 2)
    v15 = v14;
  else
    v15 = 6 * v14;
  if (v13 != v15)
  {
    v16 = scn_default_log();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
      SCNMTLBlitCommandEncoder::copyTextureToTexture(v16, v17, v18, v19, v20, v21, v22, v23);
  }
  if (v13)
  {
    for (i = 0; i != v13; ++i)
    {
      v25 = *a1;
      v28[2] = v11;
      memset(v29, 0, sizeof(v29));
      v28[0] = v10;
      v28[1] = v26;
      memset(v27, 0, sizeof(v27));
      objc_msgSend(v25, "copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:", a2, i, a3, v29, v28, a4, i, a5, v27);
    }
  }
}

void SCNMTLBlitCommandEncoder::copyTextureToTexture(void **a1, void *a2, void *a3)
{
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL IsCube;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t i;
  void *v56;
  void **v57;
  _QWORD v58[3];
  _QWORD v59[3];
  _QWORD v60[3];

  v6 = objc_msgSend(a2, "width");
  if (v6 != objc_msgSend(a3, "width"))
  {
    v7 = scn_default_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
      SCNMTLBlitCommandEncoder::copyTextureToTexture(v7, v8, v9, v10, v11, v12, v13, v14);
  }
  v15 = objc_msgSend(a2, "height");
  if (v15 != objc_msgSend(a3, "height"))
  {
    v16 = scn_default_log();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
      SCNMTLBlitCommandEncoder::copyTextureToTexture(v16, v17, v18, v19, v20, v21, v22, v23);
  }
  v24 = objc_msgSend(a2, "depth");
  if (v24 != objc_msgSend(a3, "depth"))
  {
    v25 = scn_default_log();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_FAULT))
      SCNMTLBlitCommandEncoder::copyTextureToTexture(v25, v26, v27, v28, v29, v30, v31, v32);
  }
  v57 = a1;
  IsCube = SCNMTLTextureTypeIsCube(objc_msgSend(a2, "textureType"));
  v34 = objc_msgSend(a2, "mipmapLevelCount");
  v35 = objc_msgSend(a3, "mipmapLevelCount");
  if (v34 >= v35)
    v36 = v35;
  else
    v36 = v34;
  v37 = objc_msgSend(a2, "arrayLength");
  if ((unint64_t)(objc_msgSend(a2, "textureType") - 5) >= 2)
    v38 = v37;
  else
    v38 = 6 * v37;
  v39 = objc_msgSend(a3, "arrayLength");
  if ((unint64_t)(objc_msgSend(a3, "textureType") - 5) >= 2)
    v40 = v39;
  else
    v40 = 6 * v39;
  if (v38 != v40)
  {
    v41 = scn_default_log();
    if (os_log_type_enabled(v41, OS_LOG_TYPE_FAULT))
      SCNMTLBlitCommandEncoder::copyTextureToTexture(v41, v42, v43, v44, v45, v46, v47, v48);
  }
  if (v38)
  {
    v49 = 0;
    v50 = IsCube;
    do
    {
      v51 = objc_msgSend(a2, "width");
      v52 = objc_msgSend(a2, "height");
      v53 = objc_msgSend(a2, "depth");
      if (v36)
      {
        v54 = v53;
        for (i = 0; i != v36; ++i)
        {
          v56 = *v57;
          v59[2] = v54;
          memset(v60, 0, sizeof(v60));
          v59[0] = v51;
          v59[1] = v52;
          memset(v58, 0, sizeof(v58));
          objc_msgSend(v56, "copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:", a2, v49, i, v60, v59, a3, v49, i, v58);
          v51 >>= 1;
          v52 >>= 1;
          v54 >>= v50;
        }
      }
      ++v49;
    }
    while (v49 != v38);
  }
}

void OUTLINED_FUNCTION_3_3(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

uint64_t OUTLINED_FUNCTION_8_0(id *a1)
{
  return objc_msgSend(*a1, "localizedDescription");
}

void sub_1DCDA1D70(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0D41C0](v1, 0x10E1C403A34AA84);
  _Unwind_Resume(a1);
}

void sub_1DCDA1E4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0D41C0](v1, 0x10E1C403A34AA84);
  _Unwind_Resume(a1);
}

void SCNCActionWait::SCNCActionWait(SCNCActionWait *this, SCNCAction *a2)
{
  uint64_t v3;

  SCNCAction::SCNCAction((SCNCAction *)this);
  *(_QWORD *)v3 = &off_1EA595978;
  *(_QWORD *)(v3 + 24) = a2->var3;
  *(double *)(v3 + 56) = a2->var7;
  *(_OWORD *)(v3 + 40) = *(_OWORD *)&a2->var5;
  *(_WORD *)(v3 + 80) = *(_WORD *)&a2->var10;
  *(double *)(v3 + 64) = a2->var8;
  *(_QWORD *)(v3 + 104) = a2->var14;
  *(_BYTE *)(v3 + 32) = 1;
}

void SCNCActionWait::~SCNCActionWait(SCNCActionWait *this)
{
  SCNCAction::~SCNCAction((SCNCAction *)this);
  JUMPOUT(0x1DF0D41C0);
}

uint64_t _C3DTextureSamplerFinalizeDeserialization()
{
  return 1;
}

_DWORD *C3DTextureSamplerCreateWithPropertyList(const __CFDictionary *a1)
{
  _DWORD *v2;
  const void *Value;
  int v4;
  const void *v5;
  int v6;
  const void *v7;
  const void *v8;
  int v9;
  const void *v10;
  int v11;
  const void *v12;
  int v13;
  const char *v14;
  const char *CString;
  const __CFNumber *v16;
  float valuePtr;

  v2 = (_DWORD *)C3DTextureSamplerCreate();
  Value = CFDictionaryGetValue(a1, CFSTR("minificationFilter"));
  if (Value)
    v4 = _filterFromString(Value);
  else
    v4 = 1;
  v2[7] = v4;
  v5 = CFDictionaryGetValue(a1, CFSTR("magnificationFilter"));
  if (v5)
    v6 = _filterFromString(v5);
  else
    v6 = 1;
  v2[8] = v6;
  v7 = CFDictionaryGetValue(a1, CFSTR("mipFilter"));
  if (v7)
    LODWORD(v7) = _filterFromString(v7);
  v2[8] = (_DWORD)v7;
  v8 = CFDictionaryGetValue(a1, CFSTR("wrapS"));
  if (v8)
    v9 = _wrapModeFromString(v8);
  else
    v9 = 1;
  v2[4] = v9;
  v10 = CFDictionaryGetValue(a1, CFSTR("wrapT"));
  if (v10)
    v11 = _wrapModeFromString(v10);
  else
    v11 = 1;
  v2[5] = v11;
  v12 = CFDictionaryGetValue(a1, CFSTR("wrapP"));
  if (v12)
    v13 = _wrapModeFromString(v12);
  else
    v13 = 1;
  v2[6] = v13;
  v14 = (const char *)CFDictionaryGetValue(a1, CFSTR("borderColor"));
  if (v14)
  {
    CString = SCNStringGetCString(v14);
    if (CString)
      sscanf(CString, "%f %f %f %f", v2 + 12, v2 + 13, v2 + 14, v2 + 15);
  }
  v16 = (const __CFNumber *)CFDictionaryGetValue(a1, CFSTR("maxAnisotropy"));
  if (v16)
  {
    valuePtr = 0.0;
    CFNumberGetValue(v16, kCFNumberFloatType, &valuePtr);
    C3DTextureSamplerSetAnisotropy((uint64_t)v2, valuePtr);
  }
  return v2;
}

uint64_t _filterFromString(const void *a1)
{
  if (CFEqual(a1, CFSTR("linear")))
    return 2;
  else
    return CFEqual(a1, CFSTR("nearest")) != 0;
}

uint64_t _wrapModeFromString(const void *a1)
{
  if (CFEqual(a1, CFSTR("clamp")))
    return 1;
  if (CFEqual(a1, CFSTR("repeat")))
    return 2;
  if (CFEqual(a1, CFSTR("clampToBorder")))
    return 3;
  return 4;
}

int8x8_t C3DTextureSamplerSetAnisotropy(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int8x16_t v13;
  int8x8_t result;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DTextureSamplerSetAnisotropy_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(float *)(a1 + 64) = a2;
  if (a2 <= 128.0)
    v12 = ((a2 * 65536.0 * 0.0078125) << 19) | 1;
  else
    v12 = 1;
  v13 = (int8x16_t)vshlq_u32(*(uint32x4_t *)(a1 + 16), (uint32x4_t)xmmword_1DD009300);
  result = vorr_s8(*(int8x8_t *)v13.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL));
  *(_QWORD *)(a1 + 80) = result.i32[0] | result.i32[1] | (*(_DWORD *)(a1 + 32) << 12) | (*(_DWORD *)(a1 + 36) << 14) | (*(unsigned __int8 *)(a1 + 68) << 16) | v12;
  return result;
}

uint64_t C3DTextureSamplerCreateWithOptions(int a1, int a2, int a3, int a4, int a5, int a6)
{
  uint64_t v12;
  float v13;
  unsigned int v14;
  int8x16_t v15;

  v12 = C3DTextureSamplerCreate();
  *(_DWORD *)(v12 + 16) = a4;
  *(_DWORD *)(v12 + 20) = a5;
  *(_DWORD *)(v12 + 24) = a6;
  *(_DWORD *)(v12 + 28) = a1;
  *(_DWORD *)(v12 + 32) = a2;
  *(_DWORD *)(v12 + 36) = a3;
  C3DColor4Make((float *)(v12 + 48), 0.0, 0.0, 0.0, 1.0);
  v13 = *(float *)(v12 + 64);
  v14 = 1;
  if (v13 <= 128.0)
    v14 = ((v13 * 65536.0 * 0.0078125) << 19) | 1;
  v15 = (int8x16_t)vshlq_u32(*(uint32x4_t *)(v12 + 16), (uint32x4_t)xmmword_1DD009300);
  *(int8x8_t *)v15.i8 = vorr_s8(*(int8x8_t *)v15.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL));
  *(_QWORD *)(v12 + 80) = v15.i32[0] | v15.i32[1] | (*(_DWORD *)(v12 + 32) << 12) | (*(_DWORD *)(v12 + 36) << 14) | (*(unsigned __int8 *)(v12 + 68) << 16) | v14;
  return v12;
}

uint64_t C3DTextureSamplerGetComparisonFunc(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DTextureSamplerSetAnisotropy_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(unsigned __int8 *)(a1 + 68);
}

BOOL C3DTextureSamplerUseMipmaps(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DTextureSamplerSetAnisotropy_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_DWORD *)(a1 + 36) != 0;
}

uint64_t C3DTextureSamplerGetDefault()
{
  if (C3DTextureSamplerGetDefault_onceToken != -1)
    dispatch_once(&C3DTextureSamplerGetDefault_onceToken, &__block_literal_global_19);
  return C3DTextureSamplerGetDefault_states;
}

uint64_t C3DTextureSamplerNearest()
{
  if (C3DTextureSamplerNearest_onceToken != -1)
    dispatch_once(&C3DTextureSamplerNearest_onceToken, &__block_literal_global_21);
  return C3DTextureSamplerNearest_states;
}

uint64_t C3DTextureSamplerBilinearNoAnisotropy()
{
  if (C3DTextureSamplerBilinearNoAnisotropy_onceToken != -1)
    dispatch_once(&C3DTextureSamplerBilinearNoAnisotropy_onceToken, &__block_literal_global_23);
  return C3DTextureSamplerBilinearNoAnisotropy_states;
}

uint64_t C3DTextureSamplerTrilinearRepeatNoAnisotropy()
{
  if (C3DTextureSamplerTrilinearRepeatNoAnisotropy_onceToken != -1)
    dispatch_once(&C3DTextureSamplerTrilinearRepeatNoAnisotropy_onceToken, &__block_literal_global_25);
  return C3DTextureSamplerTrilinearRepeatNoAnisotropy_states;
}

uint64_t C3DTextureSamplerDepthCompare()
{
  if (C3DTextureSamplerDepthCompare_onceToken != -1)
    dispatch_once(&C3DTextureSamplerDepthCompare_onceToken, &__block_literal_global_31_0);
  return C3DTextureSamplerDepthCompare_states;
}

BOOL _C3DTextureSamplerCFEqual(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t _C3DTextureSamplerCFHash(uint64_t a1)
{
  return *(_QWORD *)(a1 + 80);
}

CFStringRef _C3DTextureSamplerCFCopyFormatDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DTextureSampler>"));
}

CFStringRef _C3DTextureSamplerCFCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DTextureSampler>"));
}

uint64_t _C3DTextureSamplerInitWithPropertyList(uint64_t a1, const __CFDictionary *a2, uint64_t a3, CFErrorRef *a4)
{
  uint64_t IsDictionary;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const __CFNumber *Value;
  int v41;
  float v42;
  unsigned int v43;
  int8x16_t v44;
  NSObject *v45;
  float valuePtr;

  IsDictionary = C3DCFTypeIsDictionary();
  if ((IsDictionary & 1) != 0)
  {
    if (!a1 && (v8 = scn_default_log(), os_log_type_enabled(v8, OS_LOG_TYPE_FAULT)))
    {
      _C3DGeometryFillLibraryForSerialization_cold_1(v8, v9, v10, v11, v12, v13, v14, v15);
      if (a2)
        goto LABEL_7;
    }
    else if (a2)
    {
      goto LABEL_7;
    }
    v16 = scn_default_log();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
      _C3DGeometryFinalizeDeserialization_cold_4(v16, v17, v18, v19, v20, v21, v22, v23);
LABEL_7:
    *(_DWORD *)(a1 + 28) = __DeserializeInt(a2, CFSTR("minFilter"), a4);
    *(_DWORD *)(a1 + 32) = __DeserializeInt(a2, CFSTR("magFilter"), a4);
    *(_DWORD *)(a1 + 36) = __DeserializeInt(a2, CFSTR("mipFilter"), a4);
    *(_DWORD *)(a1 + 16) = __DeserializeInt(a2, CFSTR("wrapS"), a4);
    *(_DWORD *)(a1 + 20) = __DeserializeInt(a2, CFSTR("wrapT"), a4);
    valuePtr = 1.0;
    if (!a2 && (v24 = scn_default_log(), os_log_type_enabled(v24, OS_LOG_TYPE_FAULT)))
    {
      _C3DTextureSamplerInitWithPropertyList_cold_2(v24, v25, v26, v27, v28, v29, v30, v31);
      if (!CFSTR("anisotropy"))
      {
LABEL_10:
        v32 = scn_default_log();
        if (os_log_type_enabled(v32, OS_LOG_TYPE_FAULT))
          C3DAnimationManagerAddAnimationPlayerForKey_cold_1(v32, v33, v34, v35, v36, v37, v38, v39);
      }
    }
    else if (!CFSTR("anisotropy"))
    {
      goto LABEL_10;
    }
    Value = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("anisotropy"));
    if (Value)
    {
      v41 = CFNumberGetValue(Value, kCFNumberFloatType, &valuePtr);
      if (a4)
      {
        if (!v41 && !*a4)
          *a4 = C3DSceneSourceCreateMalformedDocumentError(0);
      }
    }
    v42 = valuePtr;
    if (valuePtr == 3.4028e38)
      v42 = 1.0;
    *(float *)(a1 + 64) = v42;
    v43 = 1;
    if (v42 <= 128.0)
      v43 = ((v42 * 65536.0 * 0.0078125) << 19) | 1;
    v44 = (int8x16_t)vshlq_u32(*(uint32x4_t *)(a1 + 16), (uint32x4_t)xmmword_1DD009300);
    *(int8x8_t *)v44.i8 = vorr_s8(*(int8x8_t *)v44.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v44, v44, 8uLL));
    *(_QWORD *)(a1 + 80) = v44.i32[0] | v44.i32[1] | (*(_DWORD *)(a1 + 32) << 12) | (*(_DWORD *)(a1 + 36) << 14) | (*(unsigned __int8 *)(a1 + 68) << 16) | v43;
    return IsDictionary;
  }
  v45 = scn_default_log();
  if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
    _C3DTextureSamplerInitWithPropertyList_cold_5(v45);
  return IsDictionary;
}

CFMutableDictionaryRef _C3DTextureSamplerCopyPropertyList(int *cf)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const __CFAllocator *v10;
  CFMutableDictionaryRef Mutable;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  const __CFAllocator *v35;
  CFNumberRef v36;
  CFNumberRef v37;
  int v38;
  NSObject *v39;
  int valuePtr;

  if (!cf)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      _C3DGeometryFillLibraryForSerialization_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  v10 = CFGetAllocator(cf);
  Mutable = CFDictionaryCreateMutable(v10, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v12 = __SerializeInt(Mutable, CFSTR("minFilter"), cf[7]);
  v13 = __SerializeInt(Mutable, CFSTR("magFilter"), cf[8]) & v12;
  v14 = __SerializeInt(Mutable, CFSTR("mipFilter"), cf[9]);
  v15 = v14 & __SerializeInt(Mutable, CFSTR("wrapS"), cf[4]);
  v16 = __SerializeInt(Mutable, CFSTR("wrapT"), cf[5]);
  valuePtr = cf[16];
  if (!Mutable)
  {
    v17 = scn_default_log();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT))
      _C3DTextureSamplerInitWithPropertyList_cold_2(v17, v18, v19, v20, v21, v22, v23, v24);
  }
  v25 = v13 & v15;
  if (!CFSTR("anisotropy"))
  {
    v26 = scn_default_log();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_FAULT))
      C3DAnimationManagerAddAnimationPlayerForKey_cold_1(v26, v27, v28, v29, v30, v31, v32, v33);
  }
  v34 = v25 & v16;
  v35 = CFGetAllocator(Mutable);
  v36 = CFNumberCreate(v35, kCFNumberFloatType, &valuePtr);
  if (v36)
  {
    v37 = v36;
    CFDictionarySetValue(Mutable, CFSTR("anisotropy"), v36);
    CFRelease(v37);
    v38 = 1;
  }
  else
  {
    v38 = 0;
  }
  if ((v34 & v38) == 0)
  {
    v39 = scn_default_log();
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
      _C3DTextureSamplerCopyPropertyList_cold_1(v39);
    CFRelease(Mutable);
    return 0;
  }
  return Mutable;
}

uint64_t __DeserializeInt(CFDictionaryRef theDict, void *key, CFErrorRef *a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const __CFNumber *Value;
  NSObject *v24;
  unsigned int valuePtr;
  uint8_t buf[4];
  void *v27;
  __int16 v28;
  CFDictionaryRef v29;
  __int16 v30;
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  valuePtr = 2;
  if (!theDict && (v6 = scn_default_log(), os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)))
  {
    _C3DTextureSamplerInitWithPropertyList_cold_2(v6, v7, v8, v9, v10, v11, v12, v13);
    if (key)
      goto LABEL_6;
  }
  else if (key)
  {
    goto LABEL_6;
  }
  v14 = scn_default_log();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    C3DAnimationManagerAddAnimationPlayerForKey_cold_1(v14, v15, v16, v17, v18, v19, v20, v21);
LABEL_6:
  Value = (const __CFNumber *)CFDictionaryGetValue(theDict, key);
  if (Value && !CFNumberGetValue(Value, kCFNumberIntType, &valuePtr))
  {
    v24 = scn_default_log();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412802;
      v27 = key;
      v28 = 2112;
      v29 = theDict;
      v30 = 1024;
      v31 = 2;
      _os_log_impl(&dword_1DCCB8000, v24, OS_LOG_TYPE_DEFAULT, "Warning: While reading a texture sampler: could not read %@ (serializedData: %@), using the default value %d instead", buf, 0x1Cu);
    }
    if (a3 && !*a3)
      *a3 = C3DSceneSourceCreateMalformedDocumentError(0);
  }
  return valuePtr;
}

uint64_t __SerializeInt(void *cf, const void *a2, int a3)
{
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const __CFAllocator *v21;
  uint64_t result;
  const void *v23;
  int valuePtr;

  valuePtr = a3;
  if (!cf && (v5 = scn_default_log(), os_log_type_enabled(v5, OS_LOG_TYPE_FAULT)))
  {
    _C3DTextureSamplerInitWithPropertyList_cold_2(v5, v6, v7, v8, v9, v10, v11, v12);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v13 = scn_default_log();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
    C3DAnimationManagerAddAnimationPlayerForKey_cold_1(v13, v14, v15, v16, v17, v18, v19, v20);
LABEL_6:
  v21 = CFGetAllocator(cf);
  result = (uint64_t)CFNumberCreate(v21, kCFNumberIntType, &valuePtr);
  if (result)
  {
    v23 = (const void *)result;
    CFDictionarySetValue((CFMutableDictionaryRef)cf, a2, (const void *)result);
    CFRelease(v23);
    return 1;
  }
  return result;
}

__CFArray *_C3DTextureSamplerCopyInstanceVariables(uint64_t a1)
{
  __CFArray *Mutable;
  const CFDictionaryKeyCallBacks *v3;
  const CFDictionaryValueCallBacks *v4;
  __CFDictionary *v5;
  CFNumberRef v6;
  CFNumberRef v7;
  CFNumberRef v8;
  __CFDictionary *v9;
  CFNumberRef v10;
  CFNumberRef v11;
  CFNumberRef v12;
  __CFDictionary *v13;
  CFNumberRef v14;
  CFNumberRef v15;
  CFNumberRef v16;
  __CFDictionary *v17;
  CFNumberRef v18;
  CFNumberRef v19;
  CFNumberRef v20;
  __CFDictionary *v21;
  CFNumberRef v22;
  CFNumberRef v23;
  CFNumberRef v24;
  __CFDictionary *v25;
  CFNumberRef v26;
  CFNumberRef v27;
  CFNumberRef v28;
  __CFDictionary *v29;
  CFNumberRef v30;
  CFNumberRef v31;
  CFNumberRef v32;
  __CFDictionary *v33;
  CFNumberRef v34;
  CFNumberRef v35;
  CFNumberRef v36;
  uint64_t v38;
  int v39;
  int valuePtr;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v3 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v4 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  v5 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v39 = 0;
  valuePtr = 2;
  v38 = a1 + 16;
  v6 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v7 = CFNumberCreate(0, kCFNumberSInt32Type, &v39);
  v8 = CFNumberCreate(0, kCFNumberLongType, &v38);
  CFDictionarySetValue(v5, CFSTR("name"), CFSTR("wrapS"));
  CFDictionarySetValue(v5, CFSTR("type"), v6);
  CFDictionarySetValue(v5, CFSTR("address"), v8);
  CFDictionarySetValue(v5, CFSTR("semantic"), v7);
  CFArrayAppendValue(Mutable, v5);
  CFRelease(v7);
  CFRelease(v5);
  CFRelease(v8);
  CFRelease(v6);
  v9 = CFDictionaryCreateMutable(0, 4, v3, v4);
  v39 = 0;
  valuePtr = 2;
  v38 = a1 + 20;
  v10 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v11 = CFNumberCreate(0, kCFNumberSInt32Type, &v39);
  v12 = CFNumberCreate(0, kCFNumberLongType, &v38);
  CFDictionarySetValue(v9, CFSTR("name"), CFSTR("wrapT"));
  CFDictionarySetValue(v9, CFSTR("type"), v10);
  CFDictionarySetValue(v9, CFSTR("address"), v12);
  CFDictionarySetValue(v9, CFSTR("semantic"), v11);
  CFArrayAppendValue(Mutable, v9);
  CFRelease(v11);
  CFRelease(v9);
  CFRelease(v12);
  CFRelease(v10);
  v13 = CFDictionaryCreateMutable(0, 4, v3, MEMORY[0x1E0C9B3A0]);
  v39 = 0;
  valuePtr = 2;
  v38 = a1 + 24;
  v14 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v15 = CFNumberCreate(0, kCFNumberSInt32Type, &v39);
  v16 = CFNumberCreate(0, kCFNumberLongType, &v38);
  CFDictionarySetValue(v13, CFSTR("name"), CFSTR("wrapP"));
  CFDictionarySetValue(v13, CFSTR("type"), v14);
  CFDictionarySetValue(v13, CFSTR("address"), v16);
  CFDictionarySetValue(v13, CFSTR("semantic"), v15);
  CFArrayAppendValue(Mutable, v13);
  CFRelease(v15);
  CFRelease(v13);
  CFRelease(v16);
  CFRelease(v14);
  v17 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v39 = 0;
  valuePtr = 2;
  v38 = a1 + 28;
  v18 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v19 = CFNumberCreate(0, kCFNumberSInt32Type, &v39);
  v20 = CFNumberCreate(0, kCFNumberLongType, &v38);
  CFDictionarySetValue(v17, CFSTR("name"), CFSTR("minFilter"));
  CFDictionarySetValue(v17, CFSTR("type"), v18);
  CFDictionarySetValue(v17, CFSTR("address"), v20);
  CFDictionarySetValue(v17, CFSTR("semantic"), v19);
  CFArrayAppendValue(Mutable, v17);
  CFRelease(v19);
  CFRelease(v17);
  CFRelease(v20);
  CFRelease(v18);
  v21 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v39 = 0;
  valuePtr = 2;
  v38 = a1 + 32;
  v22 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v23 = CFNumberCreate(0, kCFNumberSInt32Type, &v39);
  v24 = CFNumberCreate(0, kCFNumberLongType, &v38);
  CFDictionarySetValue(v21, CFSTR("name"), CFSTR("magFilter"));
  CFDictionarySetValue(v21, CFSTR("type"), v22);
  CFDictionarySetValue(v21, CFSTR("address"), v24);
  CFDictionarySetValue(v21, CFSTR("semantic"), v23);
  CFArrayAppendValue(Mutable, v21);
  CFRelease(v23);
  CFRelease(v21);
  CFRelease(v24);
  CFRelease(v22);
  v25 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v39 = 0;
  valuePtr = 2;
  v38 = a1 + 36;
  v26 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v27 = CFNumberCreate(0, kCFNumberSInt32Type, &v39);
  v28 = CFNumberCreate(0, kCFNumberLongType, &v38);
  CFDictionarySetValue(v25, CFSTR("name"), CFSTR("mipFilter"));
  CFDictionarySetValue(v25, CFSTR("type"), v26);
  CFDictionarySetValue(v25, CFSTR("address"), v28);
  CFDictionarySetValue(v25, CFSTR("semantic"), v27);
  CFArrayAppendValue(Mutable, v25);
  CFRelease(v27);
  CFRelease(v25);
  CFRelease(v28);
  CFRelease(v26);
  v29 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v39 = 0;
  valuePtr = 13;
  v38 = a1 + 48;
  v30 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v31 = CFNumberCreate(0, kCFNumberSInt32Type, &v39);
  v32 = CFNumberCreate(0, kCFNumberLongType, &v38);
  CFDictionarySetValue(v29, CFSTR("name"), CFSTR("borderColor"));
  CFDictionarySetValue(v29, CFSTR("type"), v30);
  CFDictionarySetValue(v29, CFSTR("address"), v32);
  CFDictionarySetValue(v29, CFSTR("semantic"), v31);
  CFArrayAppendValue(Mutable, v29);
  CFRelease(v31);
  CFRelease(v29);
  CFRelease(v32);
  CFRelease(v30);
  v33 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v39 = 0;
  valuePtr = 1;
  v38 = a1 + 64;
  v34 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v35 = CFNumberCreate(0, kCFNumberSInt32Type, &v39);
  v36 = CFNumberCreate(0, kCFNumberLongType, &v38);
  CFDictionarySetValue(v33, CFSTR("name"), CFSTR("anisotropy"));
  CFDictionarySetValue(v33, CFSTR("type"), v34);
  CFDictionarySetValue(v33, CFSTR("address"), v36);
  CFDictionarySetValue(v33, CFSTR("semantic"), v35);
  CFArrayAppendValue(Mutable, v33);
  CFRelease(v35);
  CFRelease(v33);
  CFRelease(v36);
  CFRelease(v34);
  return Mutable;
}

uint64_t C3DBezierCurveGeometryGetTypeID()
{
  if (C3DBezierCurveGeometryGetTypeID_onceToken != -1)
    dispatch_once(&C3DBezierCurveGeometryGetTypeID_onceToken, &__block_literal_global_30);
  return C3DBezierCurveGeometryGetTypeID_typeID;
}

uint64_t C3DBezierCurveGeometryCreatePositionSourceForDeformerStack(uint64_t a1)
{
  return C3DBezierCurveCreateControlPointsPositionSource(*(_QWORD *)(a1 + 224));
}

uint64_t C3DBezierCurveGeometryGetMeshElementCountForDeformerBasedDynamicMesh()
{
  return 1;
}

uint64_t C3DBezierCurveGeometryCreate()
{
  uint64_t Instance;
  double v1;
  void *Default;
  uint64_t v3;
  __int128 v4;
  __int128 v5;

  if (C3DBezierCurveGeometryGetTypeID_onceToken != -1)
    dispatch_once(&C3DBezierCurveGeometryGetTypeID_onceToken, &__block_literal_global_30);
  Instance = C3DTypeCreateInstance_(C3DBezierCurveGeometryGetTypeID_typeID, 0x120uLL);
  v1 = C3DGeometryInit(Instance);
  *(_QWORD *)(Instance + 128) = &kC3DBezierCurveGeometryMeshlessGeometryCallBacks;
  Default = (void *)C3DMaterialCreateDefault(v1);
  C3DGeometryAppendMaterial(Instance, Default);
  CFRelease(Default);
  v3 = MEMORY[0x1E0C83FF0];
  v4 = *(_OWORD *)(MEMORY[0x1E0C83FF0] + 16);
  *(_OWORD *)(Instance + 240) = *MEMORY[0x1E0C83FF0];
  *(_OWORD *)(Instance + 256) = v4;
  v5 = *(_OWORD *)(v3 + 48);
  *(_OWORD *)(Instance + 272) = *(_OWORD *)(v3 + 32);
  *(_OWORD *)(Instance + 288) = v5;
  return Instance;
}

void C3DBezierCurveGeometryFinalize(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 216);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 216) = 0;
  }
  v3 = *(const void **)(a1 + 224);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 224) = 0;
  }
}

void C3DBezierCurveGeometrySetPath(uint64_t a1, CFTypeRef cf)
{
  CFTypeRef v3;
  CFTypeRef v5;
  float32x2_t *v6;
  float32x2_t *v7;
  CFTypeRef v8;

  v3 = *(CFTypeRef *)(a1 + 216);
  if (v3 != cf)
  {
    if (v3)
    {
      CFRelease(v3);
      *(_QWORD *)(a1 + 216) = 0;
    }
    if (cf)
      v5 = CFRetain(cf);
    else
      v5 = 0;
    *(_QWORD *)(a1 + 216) = v5;
    v6 = C3DBezierCurveCreateWithCGPath((const CGPath *)cf);
    v7 = *(float32x2_t **)(a1 + 224);
    if (v7 != v6)
    {
      if (v7)
      {
        CFRelease(v7);
        *(_QWORD *)(a1 + 224) = 0;
      }
      if (v6)
        v8 = CFRetain(v6);
      else
        v8 = 0;
      *(_QWORD *)(a1 + 224) = v8;
    }
    CFRelease(v6);
  }
}

__n128 C3DBezierCurveGeometryGetTransform(__n128 *a1)
{
  return a1[15];
}

__n128 *C3DBezierCurveGeometrySetTransform(__n128 *result, __n128 a2, __n128 a3, __n128 a4, __n128 a5)
{
  result[15] = a2;
  result[16] = a3;
  result[17] = a4;
  result[18] = a5;
  return result;
}

uint64_t C3DBezierCurveGeometryGetBezierCurve(uint64_t a1)
{
  return *(_QWORD *)(a1 + 224);
}

id _C3DBezierCurveGeometryCFFinalize(__C3DGeometry *a1)
{
  C3DBezierCurveGeometryFinalize((uint64_t)a1);
  return _C3DGeometryCFFinalize(a1);
}

void *_C3DBezierCurveGeometrySetValue(int a1, void *__dst, void *__src, size_t __n)
{
  return memcpy(__dst, __src, __n);
}

uint64_t _C3DBezierCurveGeometryGetBoundingBox(float32x4_t *a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4)
{
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x2_t v24;
  float32x2_t v25;

  v24 = 0;
  v25 = 0;
  C3DBezierCurveGetBoundingBox(a1[14].i64[0], &v25, (double *)&v24);
  v7 = a1[15];
  v8 = a1[16];
  v9 = a1[17];
  v10 = a1[18];
  v11 = vmulq_lane_f32(v8, v25, 1);
  v12 = vmlaq_f32(vmlaq_n_f32(v11, v7, v25.f32[0]), (float32x4_t)0, v9);
  v13 = vmulq_lane_f32(v8, v24, 1);
  v14 = vmlaq_f32(vmlaq_n_f32(v13, v7, v25.f32[0]), (float32x4_t)0, v9);
  v15 = vaddq_f32(v10, vmlaq_f32(vmlaq_n_f32(v11, v7, v24.f32[0]), (float32x4_t)0, v9));
  v16 = vaddq_f32(v10, vmlaq_f32(vmlaq_n_f32(v13, v7, v24.f32[0]), (float32x4_t)0, v9));
  v15.i32[3] = 0;
  v16.i32[3] = 0;
  v17 = vaddq_f32(v10, v14);
  v18 = vminnmq_f32(v15, v16);
  v17.i32[3] = 0;
  v18.i32[3] = 0;
  v19 = vaddq_f32(v10, v12);
  v20 = vminnmq_f32(v17, v18);
  v19.i32[3] = 0;
  v20.i32[3] = 0;
  v21 = vmaxnmq_f32(v15, v16);
  v21.i32[3] = 0;
  v22 = vmaxnmq_f32(v17, v21);
  v22.i32[3] = 0;
  *a3 = vminnmq_f32(v19, v20);
  *a4 = vmaxnmq_f32(v19, v22);
  return 1;
}

uint64_t _C3DBezierCurveGeometryGetBoundingSphere(float32x4_t *a1, uint64_t a2, _OWORD *a3)
{
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;

  v11.i32[2] = 0;
  v11.i64[0] = 0;
  v10.i32[2] = 0;
  v10.i64[0] = 0;
  _C3DBezierCurveGeometryGetBoundingBox(a1, 0, &v11, &v10);
  v4.i64[0] = 0x3F0000003F000000;
  v4.i64[1] = 0x3F0000003F000000;
  v5 = vmlaq_f32(v11, v4, vsubq_f32(v10, v11));
  v6 = vsubq_f32(v5, v11);
  v7 = vmulq_f32(v6, v6);
  v9 = v5;
  C3DSphereMake(a3, (__int128 *)&v9, sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), vaddq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1))).f32[0]));
  return 1;
}

uint64_t _C3DBezierCurveGeometryCreateCopy(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      _C3DBezierCurveGeometryCreateCopy_cold_1(v2);
  }
  v3 = C3DBezierCurveGeometryCreate();
  C3DGeometryCopy(a1, v3);
  C3DBezierCurveGeometrySetPath(v3, *(CFTypeRef *)(a1 + 216));
  return v3;
}

C3D::DrawNodesPass *C3D::FloorPass::FloorPass(C3D::FloorPass *this, C3D::RenderGraph *a2, C3D::Pass *a3, __C3DNode *a4, char a5, const Parameters *a6, const Parameters *a7)
{
  C3D::DrawNodesPass *result;

  result = C3D::ScenePass::ScenePass(this, a2, a3, a6, a7);
  *(_QWORD *)result = off_1EA59A7F8;
  *((_QWORD *)result + 681) = a4;
  *((_BYTE *)result + 5456) = a5;
  return result;
}

const char *C3D::FloorPass::name(C3D::FloorPass *this)
{
  return "FloorPass";
}

C3D::Pass *C3D::FloorPass::setup(C3D::FloorPass *this)
{
  char *v2;
  uint64_t Floor;
  NSObject *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  __int16 v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  _WORD *v12;
  unsigned int EyeCount;
  uint64_t v14;
  _OWORD *v15;
  __int128 v16;
  uint32x2_t v17;
  float32x2_t v18;
  uint64_t v19;
  int v20;
  C3D::Pass *result;
  uint64_t v22;
  C3D::PassDescriptor *v23;
  __int128 v24;
  int v25;

  v2 = (char *)this + 4949;
  Floor = C3DNodeGetFloor(*((_QWORD *)this + 681));
  if (!Floor)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3D::FloorPass::setup(v4);
  }
  *((_BYTE *)this + 112) = 1;
  *((_BYTE *)this + 296) = 1;
  *((_BYTE *)this + 303) = 0;
  *((_QWORD *)this + 625) = *((_QWORD *)this + 681);
  v2[59] = 0;
  *((_QWORD *)this + 628) &= C3DFloorGetReflectionCategoryBitMask(Floor);
  *v2 = v2[507];
  *((_BYTE *)this + 306) = C3DEngineContextGetViewpointCoordinateSpace(*((_QWORD *)this + 2));
  C3D::ScenePass::setup(this);
  v5 = C3D::PassDescriptor::outputAtIndex((C3D::FloorPass *)((char *)this + 32), 0);
  *(_QWORD *)(v5 + 8) = C3D::Pass::nameWithPrefixAndPointer(this, "SceneKit-floor-color-", *((void **)this + 681));
  *(_BYTE *)(v5 + 24) = 2;
  C3D::Pass::parentColorDesc(this, (uint64_t)&v24);
  *(_OWORD *)(v5 + 16) = v24;
  *(_DWORD *)(v5 + 32) = v25;
  LOWORD(v6) = *(_WORD *)(v5 + 16);
  *(float *)&v7 = (float)v6;
  *(_WORD *)(v5 + 16) = (int)(float)(*(float *)(Floor + 228) * *(float *)&v7);
  LOWORD(v7) = *(_WORD *)(v5 + 18);
  *(_WORD *)(v5 + 18) = (int)(float)(*(float *)(Floor + 228) * (float)v7);
  v8 = *(_WORD *)(v5 + 66);
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 56) = 0;
  *(_WORD *)(v5 + 66) = v8 & 0xFFBC | 0x42;
  *(_WORD *)(v5 + 28) = 115;
  v9 = C3D::PassDescriptor::outputAtIndex((C3D::FloorPass *)((char *)this + 32), 1u);
  C3D::Pass::parentDepthDesc(this, (uint64_t)&v24);
  *(_OWORD *)(v9 + 16) = v24;
  *(_DWORD *)(v9 + 32) = v25;
  *(_BYTE *)(v9 + 64) = 2;
  *(_QWORD *)(v9 + 8) = C3D::Pass::nameWithPrefixAndPointer(this, "SceneKit-floor-depth-", *((void **)this + 681));
  *(_WORD *)(v9 + 66) = *(_WORD *)(v9 + 66) & 0xFFFC | 2;
  LOWORD(v10) = *(_WORD *)(v9 + 16);
  *(float *)&v11 = (float)v10;
  *(_WORD *)(v9 + 16) = (int)(float)(*(float *)(Floor + 228) * *(float *)&v11);
  LOWORD(v11) = *(_WORD *)(v9 + 18);
  *(_WORD *)(v9 + 18) = (int)(float)(*(float *)(Floor + 228) * (float)v11);
  if (*((_BYTE *)this + 306) != 2 && !v2[67])
  {
    v12 = (_WORD *)(v5 + 16);
    EyeCount = C3DEngineContextGetEyeCount(*((_QWORD *)this + 2));
    *((_BYTE *)this + 121) = 1;
    if (EyeCount)
    {
      v14 = EyeCount;
      v15 = (_OWORD *)((char *)this + 128);
      *(_QWORD *)&v16 = 0;
      do
      {
        v17.i32[0] = (unsigned __int16)*v12;
        v17.i32[1] = *(unsigned __int16 *)(v5 + 18);
        v18 = vcvt_f32_u32(v17);
        LODWORD(v19) = vadd_f32(*(float32x2_t *)&v16, v18).u32[0];
        HIDWORD(v19) = DWORD1(v16);
        *((float32x2_t *)&v16 + 1) = v18;
        *v15++ = v16;
        *(_QWORD *)&v16 = v19;
        --v14;
      }
      while (v14);
    }
    *v12 *= (_WORD)EyeCount;
    *(_WORD *)(v9 + 16) *= (_WORD)EyeCount;
  }
  if (*(int *)(Floor + 232) < 2)
  {
    LOBYTE(v20) = 0;
    *(_BYTE *)(v5 + 31) = 0;
  }
  else
  {
    *(_BYTE *)(v5 + 24) = 4;
    *(_BYTE *)(v9 + 24) = 4;
    *(_BYTE *)(v5 + 31) = *(_DWORD *)(Floor + 232);
    v20 = *(_DWORD *)(Floor + 232);
  }
  *(_BYTE *)(v9 + 31) = v20;
  if (C3DFloorGetReflectionFalloffEnd(Floor) == 0.0)
    *(_WORD *)(v9 + 66) |= 8u;
  *(_WORD *)(v9 + 28) = 252;
  result = (C3D::Pass *)*((_QWORD *)this + 680);
  if (result != this)
  {
    v22 = *(_QWORD *)(v5 + 8);
    v23 = (C3D::PassDescriptor *)C3D::Pass::descriptor(result);
    result = (C3D::Pass *)C3D::PassDescriptor::outputAtIndex(v23, 0);
    *((_QWORD *)result + 1) = v22;
  }
  return result;
}

uint64_t C3D::FloorPass::mirrorNode(C3D::FloorPass *this)
{
  return *((_QWORD *)this + 681);
}

void C3D::FloorPass::_setupPointOfViewMatrices(uint64_t a1, float32x4_t *a2, float32x4_t *a3)
{
  C3D::DrawNodesPass::_setupPointOfViewMatrices(a1, a2, a3);
  C3DCullingContextSetupMirrorMatrices(a1 + 320, *(float32x4_t **)(a1 + 5448));
}

void C3D::FloorPass::_didSetupCullingFrustumPlanes(float32x4_t **this)
{
  C3DCullingContextSetupMirrorFrustumPlanes((uint64_t)(this + 40), this[681]);
}

void C3DEngineContextReloadShadersIfNeeded(uint64_t a1)
{
  NSObject *v2;
  CFDictionaryRef *v3;
  uint64_t SharedInstance;
  const void *Scene;
  uint64_t v6;
  uint8_t v7[16];

  if (*(_BYTE *)(a1 + 208))
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_1DCCB8000, v2, OS_LOG_TYPE_INFO, "Info: Reload Shaders", v7, 2u);
    }
    v3 = *(CFDictionaryRef **)(a1 + 152);
    if (v3)
    {
      if (*(_QWORD *)(a1 + 136))
        C3DResourceManagerRemoveAllPrograms(v3);
    }
    SharedInstance = C3DNotificationCenterGetSharedInstance();
    Scene = (const void *)C3DEngineContextGetScene(a1);
    C3DNotificationCenterPostNotification(SharedInstance, CFSTR("kC3DNotificationEngineContextInvalidatePasses"), Scene, 0, 1u);
    objc_msgSend(*(id *)(a1 + 216), "emptyShaderCache");
    v6 = -[SCNMTLRenderContext resourceManager](*(_QWORD *)(a1 + 1704));
    -[SCNMTLResourceManager removeAllShaders](v6);
    C3DRenderGraphClearRenderGraphResources(*(_QWORD *)(a1 + 1728));
    *(_BYTE *)(a1 + 208) = 0;
  }
}

uint64_t C3DEngineContextRenderScene(__n128 *a1, double a2, uint64_t a3, uint64_t a4)
{
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t FXContext;
  void *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t RendererContextGL;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t ResourceManager;
  id *v29;
  uint64_t Stats;
  double v31;
  uint64_t EnginePipeline;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41[2];
  __int128 v42;
  __int128 v43;

  if (!a1)
  {
    v7 = scn_default_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
      C3DEngineContextGetStats_cold_1(v7, v8, v9, v10, v11, v12, v13, v14);
  }
  a1[26].n128_u64[1] = 0x7FF0000000000000;
  FXContext = C3DEngineContextGetFXContext((uint64_t)a1);
  if (FXContext)
  {
    v16 = *(void **)(FXContext + 264);
    if (v16)
      objc_msgSend(v16, "clearCaches");
  }
  a1[28].n128_f64[0] = a2;
  result = C3DEngineContextGetScene((uint64_t)a1);
  if (result)
  {
    v18 = result;
    RendererContextGL = C3DEngineContextGetRendererContextGL((uint64_t)a1);
    if (!RendererContextGL)
    {
      v20 = scn_default_log();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_FAULT))
        C3DEngineContextRenderScene_cold_2(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    ResourceManager = C3DEngineContextGetResourceManager((uint64_t)a1);
    C3DResourceManagerLockVRAMResourceAccess(ResourceManager);
    C3DRendererContextInvalidateCache(RendererContextGL);
    C3DEngineContextReloadShadersIfNeeded((uint64_t)a1);
    v29 = (id *)a1[9].n128_u64[0];
    if (v29)
      C3DAuthoringEnvironmentBeginFrame(v29);
    Stats = C3DEngineContextGetStats((uint64_t)a1);
    v31 = CACurrentMediaTime();
    EnginePipeline = C3DSceneGetEnginePipeline(v18);
    if (!EnginePipeline)
    {
      v33 = scn_default_log();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_FAULT))
        C3DEngineContextRenderScene_cold_1(v33, v34, v35, v36, v37, v38, v39, v40);
    }
    v41[0] = EnginePipeline;
    v41[1] = (uint64_t)a1;
    v42 = 0u;
    v43 = 0u;
    C3DEnginePipelineApplyNotificationQueue(v41);
    *(double *)(Stats + 152) = *(double *)(Stats + 152) + CACurrentMediaTime() - v31;
    C3DRendererContextPushGroupMarker(RendererContextGL, "Resource Manager Flush");
    C3DResourceManagerFlush(ResourceManager);
    C3DRendererContextPopGroupMarker();
    C3DEngineContextApplyModifiers((uint64_t)a1, EnginePipeline);
    C3DEngineContextRenderMainTechnique(a1);
    if (a4)
      (*(void (**)(uint64_t))(a4 + 16))(a4);
    C3DRendererContextUnbindTextureUnits(RendererContextGL);
    C3DRendererContextResetToDefaultStates(RendererContextGL);
    C3DRendererContextResetVolatileObjects(RendererContextGL);
    C3DResourceManagerUnlockVRAMResourceAccess(ResourceManager);
    return 1;
  }
  return result;
}

_QWORD *C3DEngineContextResetNextFrameTime(uint64_t a1)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 424) = 0x7FF0000000000000;
  result = (_QWORD *)C3DEngineContextGetFXContext(a1);
  if (result)
  {
    result = (_QWORD *)result[33];
    if (result)
      return (_QWORD *)objc_msgSend(result, "clearCaches");
  }
  return result;
}

uint64_t C3DEngineContextGetResourceManager(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DEngineContextGetStats_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 152);
}

void C3DEngineContextSynchronizeDefaultLight(uint64_t a1, float32x4_t *a2)
{
  float32x4_t *v2;
  float32x4_t *WorldMatrix;

  if (a2)
  {
    v2 = *(float32x4_t **)(a1 + 48);
    if (v2)
    {
      WorldMatrix = C3DNodeGetWorldMatrix(a2);
      C3DNodeSetMatrix(v2, (uint64_t)WorldMatrix);
    }
  }
}

uint64_t C3DEngineContextGetEnvironmentCubeMesh(uint64_t a1)
{
  uint64_t result;
  const __CFAllocator *v3;
  CFDataRef v4;
  CFDataRef v5;
  const CFArrayCallBacks *v6;
  const __CFArray *v7;
  const __CFArray *v8;
  uint64_t v9;
  char v10;
  CFTypeRef cf;
  void *values;
  UInt8 v13[16];
  __int128 v14;
  int v15;
  UInt8 bytes[16];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  result = *(_QWORD *)(a1 + 400);
  if (!result)
  {
    v18 = xmmword_1DD00934C;
    v19 = unk_1DD00935C;
    v20 = xmmword_1DD00936C;
    v21 = unk_1DD00937C;
    *(_OWORD *)bytes = xmmword_1DD00932C;
    v17 = unk_1DD00933C;
    *(_OWORD *)v13 = xmmword_1DD00938C;
    v14 = unk_1DD00939C;
    v15 = 132612;
    v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v4 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], bytes, 96);
    values = (void *)C3DMeshSourceCreate(v4, 0, 8, 3, 1);
    CFRelease(v4);
    v5 = CFDataCreate(v3, v13, 36);
    cf = (CFTypeRef)C3DMeshElementCreate();
    C3DMeshElementInit((uint64_t)cf, 0, 12, v5, 1);
    CFRelease(v5);
    v10 = 0;
    v6 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
    v7 = CFArrayCreate(v3, (const void **)&values, 1, MEMORY[0x1E0C9B378]);
    v8 = CFArrayCreate(v3, &cf, 1, v6);
    v9 = C3DMeshCreateWithMeshSourcesAndMeshElements(v7, v8, (uint64_t)&v10);
    *(_QWORD *)(a1 + 400) = v9;
    C3DEntitySetName(v9, CFSTR("Environment cube"));
    CFRelease(v8);
    CFRelease(v7);
    CFRelease(cf);
    return *(_QWORD *)(a1 + 400);
  }
  return result;
}

void C3DEngineContextRenderBackgroundMap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t RenderContext;
  _QWORD *v7;
  uint64_t ImageProxy;
  __C3DImageProxy *v9;
  float32x2_t *RendererContextGL;
  uint64_t v11;
  uint64_t v12;
  uint64_t Default;
  uint64_t TextureProxy;
  const void *v15;
  uint64_t TextureSampler;
  uint64_t Image;
  void *v18;
  uint64_t ResourceManager;
  unsigned int ImageType;
  void *QuadMesh;
  void *v22;
  CFMutableDictionaryRef *v23;
  CFMutableDictionaryRef *v24;
  CFMutableDictionaryRef *BuiltInProgramWithName;
  CFMutableDictionaryRef *v26;
  uint64_t v27;
  _QWORD *ProgramResident;
  _BOOL4 IsEnabled;
  _BOOL4 v30;
  uint64_t UniformLocation;
  uint64_t v32;
  _BOOL4 v33;
  void *v34;
  const void *v35;
  float32x2_t *Texture;
  uint64_t v37;
  uint64_t v38;
  const void *ElementAtIndex;
  __int128 *ImageTransform;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _BOOL4 v44;
  float32x4_t v45[4];
  __n128 v46;
  simd_float4x4 v;
  GLfloat value[4];
  __int128 v49;
  __int128 v50;
  __int128 v51;

  if (!C3DEffectSlotGetColorIfApplicable(a2))
  {
    RenderContext = C3DEngineContextGetRenderContext(a1);
    if (RenderContext)
    {
      v7 = (_QWORD *)RenderContext;
      ImageProxy = C3DEffectSlotGetImageProxy(a2);
      if (ImageProxy
        && (v9 = (__C3DImageProxy *)ImageProxy, C3DImageProxyGetSourceType(ImageProxy) - 4 >= 0xFFFFFFFD))
      {
        -[SCNMTLRenderContext renderVideoBackground:engineContext:slot:](v7, v9, (__n128 *)a1, a2);
      }
      else
      {
        -[SCNMTLRenderContext renderBackground:engineContext:passInstance:]((uint64_t)v7, a2, a1, a3);
      }
    }
    else
    {
      RendererContextGL = (float32x2_t *)C3DEngineContextGetRendererContextGL(a1);
      v11 = C3DEffectSlotGetImageProxy(a2);
      if (v11)
      {
        v12 = v11;
        Default = C3DTextureSamplerGetDefault();
        TextureProxy = C3DImageProxyCreateTextureProxy(v12, Default, a1);
        if (TextureProxy)
        {
          v15 = (const void *)TextureProxy;
          TextureSampler = C3DEffectSlotGetTextureSampler(a2);
          if (!TextureSampler)
            TextureSampler = C3DTextureSamplerGetDefault();
          C3DTextureProxyRenderInCurrentContext((uint64_t)v15, a1, TextureSampler);
          CFRelease(v15);
        }
      }
      else
      {
        Image = C3DEffectSlotGetImage(a2);
        if (!Image)
          return;
        v18 = (void *)Image;
        ResourceManager = C3DEngineContextGetResourceManager(a1);
        v50 = 0u;
        v51 = 0u;
        *(_OWORD *)value = 0u;
        v49 = 0u;
        ImageType = C3DImageGetImageType((uint64_t)v18);
        if (ImageType - 3 >= 5)
        {
          if (ImageType > 1)
            return;
          QuadMesh = (void *)C3DEngineContextGetQuadMesh(a1);
          v22 = *(void **)(a1 + 416);
          if (!v22)
          {
            BuiltInProgramWithName = (CFMutableDictionaryRef *)C3DFXGLSLProgramCreateBuiltInProgramWithName(CFSTR("C3D-EnvMap2D"));
            C3DFXGLSLProgramSetUniformIndex(BuiltInProgramWithName, CFSTR("textureSampler0"), 0);
            C3DFXGLSLProgramSetUniformIndex(BuiltInProgramWithName, CFSTR("u_textureMatrix"), (char *)1);
            v26 = *(CFMutableDictionaryRef **)(a1 + 416);
            v22 = BuiltInProgramWithName;
            if (v26 != BuiltInProgramWithName)
            {
              if (v26)
              {
                CFRelease(v26);
                *(_QWORD *)(a1 + 416) = 0;
              }
              if (BuiltInProgramWithName)
                v22 = (void *)CFRetain(BuiltInProgramWithName);
              else
                v22 = 0;
              *(_QWORD *)(a1 + 416) = v22;
            }
            if (BuiltInProgramWithName)
            {
              CFRelease(BuiltInProgramWithName);
              v22 = *(void **)(a1 + 416);
            }
          }
          if (C3DKeyframeControllerHasInterpolationModesPerKey(a2))
          {
            ImageTransform = (__int128 *)C3DEffectSlotGetImageTransform(a2);
            v41 = ImageTransform[3];
            v43 = *ImageTransform;
            v42 = ImageTransform[1];
            v50 = ImageTransform[2];
            v51 = v41;
            *(_OWORD *)value = v43;
            v49 = v42;
          }
          else
          {
            C3DMatrix4x4MakeIdentity((uint64_t)value);
          }
        }
        else
        {
          QuadMesh = (void *)C3DEngineContextGetEnvironmentCubeMesh(a1);
          v22 = *(void **)(a1 + 408);
          if (!v22)
          {
            v23 = (CFMutableDictionaryRef *)C3DFXGLSLProgramCreateBuiltInProgramWithName(CFSTR("C3D-EnvMapCube"));
            C3DFXGLSLProgramSetUniformIndex(v23, CFSTR("textureSampler0"), 0);
            C3DFXGLSLProgramSetUniformIndex(v23, CFSTR("u_mvp"), (char *)1);
            C3DFXGLSLProgramSetUniformIndex(v23, CFSTR("u_zfar"), (char *)2);
            v24 = *(CFMutableDictionaryRef **)(a1 + 408);
            v22 = v23;
            if (v24 != v23)
            {
              if (v24)
              {
                CFRelease(v24);
                *(_QWORD *)(a1 + 408) = 0;
              }
              if (v23)
                v22 = (void *)CFRetain(v23);
              else
                v22 = 0;
              *(_QWORD *)(a1 + 408) = v22;
            }
            if (v23)
            {
              CFRelease(v23);
              v22 = *(void **)(a1 + 408);
            }
          }
          memset(&v, 0, sizeof(v));
          C3DMatrix4x4Invert((simd_float4x4 *)(a1 + 864), &v);
          v46 = (__n128)v.columns[3];
          memset(v45, 0, sizeof(v45));
          C3DMatrix4x4MakeTranslation((uint64_t)v45, &v46);
          if (C3DKeyframeControllerHasInterpolationModesPerKey(a2))
          {
            v27 = C3DEffectSlotGetImageTransform(a2);
            C3DMatrix4x4Mult(v27, v45, v45);
          }
          C3DMatrix4x4Mult((uint64_t)v45, (float32x4_t *)(a1 + 864), v45);
          C3DMatrix4x4Mult((uint64_t)v45, (float32x4_t *)(a1 + 480), value);
        }
        ProgramResident = C3DResourceManagerMakeProgramResident(ResourceManager, v22, (uint64_t)RendererContextGL);
        C3DRendererContextBindProgramObject((uint64_t)RendererContextGL, ProgramResident);
        IsEnabled = C3DRendererContextIsEnabled((uint64_t)RendererContextGL, 2);
        v30 = C3DRendererContextIsEnabled((uint64_t)RendererContextGL, 1);
        C3DRendererContextSetEnable((uint64_t)RendererContextGL, 2, 0);
        C3DRendererContextSetEnable((uint64_t)RendererContextGL, 1, 0);
        UniformLocation = C3DFXGLSLProgramObjectGetUniformLocation((uint64_t)ProgramResident, 0);
        if (UniformLocation == -1)
        {
          Texture = 0;
        }
        else
        {
          v32 = UniformLocation;
          v44 = v30;
          v33 = IsEnabled;
          v34 = QuadMesh;
          v35 = (const void *)C3DEffectSlotGetTextureSampler(a2);
          if (!v35)
            v35 = (const void *)C3DTextureSamplerGetDefault();
          Texture = (float32x2_t *)C3DEffectSlotGetTexture(a2);
          if (!Texture)
            Texture = C3DResourceManagerMakeImageResident(ResourceManager, v18, v35, RendererContextGL);
          if (Texture && v35)
          {
            C3DRendererContextBindTexture((uint64_t)RendererContextGL, Texture, (uint64_t)v35, 0, 0);
            C3DRendererContextSetIntUniformAtLocation((uint64_t)RendererContextGL, v32, 0);
            C3DFXGLSLProgramObjectSetUniformValueAtIndex((uint64_t)ProgramResident, 0, 0);
          }
          QuadMesh = v34;
          IsEnabled = v33;
          v30 = v44;
        }
        v37 = C3DFXGLSLProgramObjectGetUniformLocation((uint64_t)ProgramResident, 1);
        if (v37 != -1)
          C3DRendererContextSetMatrix4x4UniformAtLocation((uint64_t)RendererContextGL, v37, value, 1);
        v38 = C3DFXGLSLProgramObjectGetUniformLocation((uint64_t)ProgramResident, 2);
        if (v38 != -1)
        {
          v.columns[0].f32[0] = *(float *)(a1 + 536) / (float)(*(float *)(a1 + 520) + 1.0);
          C3DRendererContextSetFloatUniformAtLocation((uint64_t)RendererContextGL, v38, (GLfloat *)&v, 1);
        }
        C3DRendererContextBindMesh((uint64_t)RendererContextGL, ResourceManager, QuadMesh);
        ElementAtIndex = C3DMeshGetElementAtIndex((uint64_t)QuadMesh, 0, 1);
        C3DRendererContextBindMeshElement((uint64_t)RendererContextGL, ResourceManager, ElementAtIndex);
        C3DRendererContextRenderResidentMeshElement((uint64_t)RendererContextGL);
        C3DRendererContextSetEnable((uint64_t)RendererContextGL, 2, IsEnabled);
        C3DRendererContextSetEnable((uint64_t)RendererContextGL, 1, v30);
        if (ProgramResident)
          C3DRendererContextUnbindProgramObject((uint64_t)RendererContextGL);
        C3DRendererContextUnbindTexture((uint64_t)RendererContextGL, (uint64_t)Texture, 0);
      }
    }
  }
}

uint64_t C3DEngineContextGetQuadMesh(uint64_t a1)
{
  const void *Plane;
  uint64_t CopyWithInterleavedSources;

  if (!*(_QWORD *)(a1 + 392))
  {
    Plane = (const void *)C3DMeshCreatePlane(0, 1, 1, 0, 2.0, -2.0, 0.0);
    CopyWithInterleavedSources = C3DMeshCreateCopyWithInterleavedSources((uint64_t)Plane);
    *(_QWORD *)(a1 + 392) = CopyWithInterleavedSources;
    C3DEntitySetName(CopyWithInterleavedSources, CFSTR("Quad"));
    if (Plane)
      CFRelease(Plane);
  }
  return *(_QWORD *)(a1 + 392);
}

uint64_t C3DEngineContextGetMatrix4x4(uint64_t a1, int a2)
{
  return a1 + 384 * a2 + 480;
}

void C3DEngineContextRenderNodeTree(uint64_t a1, uint64_t *a2, const void *a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t FXContext;
  uint64_t v23;
  uint64_t EnginePipeline;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t MirrorNode;
  uint64_t RendererContextGL;
  uint64_t v35;
  _BOOL4 FrontFace;
  uint64_t PointOfView;
  const __CFDictionary *Light;
  int v39;
  GLfloat v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t i;
  uint64_t *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t Scene;
  uint64_t BackgroundEffectSlot;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  _QWORD v58[5];
  uint64_t v59;

  if (!a1 && (v6 = scn_default_log(), os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)))
  {
    C3DEngineContextGetStats_cold_1(v6, v7, v8, v9, v10, v11, v12, v13);
    if (a3)
      goto LABEL_6;
  }
  else if (a3)
  {
    goto LABEL_6;
  }
  v14 = scn_default_log();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    _C3DAnimationManagerGetAnimationPerKeyDictionaryForObject_cold_1(v14, v15, v16, v17, v18, v19, v20, v21);
LABEL_6:
  FXContext = C3DEngineContextGetFXContext(a1);
  v23 = *a2;
  if (!*a2)
  {
    v23 = __GetDefaultPass_dummyPass;
    if (!__GetDefaultPass_dummyPass)
    {
      v23 = C3DFXPassCreate();
      __GetDefaultPass_dummyPass = v23;
    }
  }
  EnginePipeline = C3DSceneGetEnginePipeline(*(_QWORD *)(a1 + 16));
  if (!EnginePipeline)
  {
    v25 = scn_default_log();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_FAULT))
      C3DEngineContextRenderScene_cold_1(v25, v26, v27, v28, v29, v30, v31, v32);
  }
  CFRetain(a3);
  v59 = 0;
  v58[0] = EnginePipeline;
  v58[1] = a1;
  v58[2] = a2;
  v58[3] = 0;
  *(_DWORD *)((char *)&v59 + 2) = C3DFXPassGetIgnoreInifiniteFloor(v23);
  MirrorNode = C3DFXContextGetMirrorNode((_QWORD *)FXContext);
  v58[4] = MirrorNode;
  RendererContextGL = C3DEngineContextGetRendererContextGL(a1);
  v35 = RendererContextGL;
  FrontFace = 0;
  if (MirrorNode)
  {
    if (RendererContextGL)
    {
      FrontFace = C3DRendererContextGetFrontFace(RendererContextGL);
      if (FrontFace)
        C3DRendererContextSetFrontFace(v35, 0);
    }
  }
  v57 = FrontFace;
  if (C3DFXPassGetDrawOnlyShadowCaster(v23) && (PointOfView = C3DFXPassGetPointOfView(v23)) != 0)
  {
    Light = C3DNodeGetLight(PointOfView);
    v39 = 0;
    if (Light && v35)
    {
      v40 = C3DLightGetShadowBias((uint64_t)Light) * 4096.0;
      glEnable(0x8037u);
      glPolygonOffset(1.2, v40);
      v39 = 1;
    }
  }
  else
  {
    v39 = 0;
  }
  v56 = v39;
  v41 = 0;
  v42 = a1 + 480;
  do
  {
    for (i = 0; i != 384; i += 64)
      C3DMatrix4x4MakeIdentity(v42 + i);
    ++v41;
    v42 += 384;
  }
  while (v41 != 3);
  v44 = &a2[8 * (unint64_t)*(unsigned __int8 *)(FXContext + 120) + 10];
  v45 = *((_OWORD *)v44 + 217);
  v46 = *((_OWORD *)v44 + 218);
  v47 = *((_OWORD *)v44 + 220);
  *(_OWORD *)(a1 + 512) = *((_OWORD *)v44 + 219);
  *(_OWORD *)(a1 + 528) = v47;
  *(_OWORD *)(a1 + 480) = v45;
  *(_OWORD *)(a1 + 496) = v46;
  v48 = &a2[8 * (unint64_t)*(unsigned __int8 *)(FXContext + 120) + 10];
  v49 = *((_OWORD *)v48 + 193);
  v50 = *((_OWORD *)v48 + 194);
  v51 = *((_OWORD *)v48 + 196);
  *(_OWORD *)(a1 + 896) = *((_OWORD *)v48 + 195);
  *(_OWORD *)(a1 + 912) = v51;
  *(_OWORD *)(a1 + 864) = v49;
  *(_OWORD *)(a1 + 880) = v50;
  if (C3DFXPassGetUsesSceneBackgroundColor(v23))
  {
    Scene = C3DEngineContextGetScene(a1);
    BackgroundEffectSlot = C3DSceneGetBackgroundEffectSlot(Scene, 0);
    if (BackgroundEffectSlot)
      C3DEngineContextRenderBackgroundMap(a1, BackgroundEffectSlot, (uint64_t)a2);
  }
  v54 = *(_QWORD *)(a1 + 1704);
  if (v54)
    -[SCNMTLOpenSubdivComputeEvaluator computeEvaluator](v54);
  kdebug_trace();
  C3DEnginePipelineRenderSubTree(v58, (uint64_t)a3);
  v55 = *(_QWORD *)(a1 + 1704);
  if (v55)
    -[SCNMTLOpenSubdivComputeEvaluator computeEvaluator](v55);
  kdebug_trace();
  CFRelease(a3);
  if (v35)
  {
    if (MirrorNode && v57)
      C3DRendererContextSetFrontFace(v35, v57);
    if (v56)
    {
      glDisable(0x8037u);
      glPolygonOffset(0.0, 0.0);
    }
  }
}

CFStringRef _C3DEngineContextCFCopyFormatDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DEngineContext>"));
}

CFStringRef _C3DEngineContextCFCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DEngineContext>"));
}

void __InstallGLContext(uint64_t a1, void *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n64 *v12;
  const void *v13;
  CFTypeRef v14;
  const void *v15;
  const void *v16;
  id AuthoringEnvironment;
  float ContentScaleFactor;
  int v19;
  const void *ResourceManagerForContext;
  const void *v21;
  CFTypeRef v22;
  const void *v23;
  CFTypeRef v24;
  __n64 *v25;
  CFTypeRef v26;
  int v27;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DEngineContextGetStats_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = C3DRendererContextCreateWithOptions();
  v13 = *(const void **)(a1 + 136);
  if (!v13)
  {
    v19 = 0;
    v15 = 0;
    v16 = *(const void **)(a1 + 144);
    *(_QWORD *)(a1 + 144) = 0;
    if (!v16)
      goto LABEL_13;
    goto LABEL_12;
  }
  v14 = CFRetain(v13);
  v15 = v14;
  v16 = *(const void **)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (!v14)
  {
    v19 = 0;
    if (!v16)
      goto LABEL_13;
LABEL_12:
    CFRelease(v16);
    goto LABEL_13;
  }
  if (C3DRendererContextGetShowsAuthoringEnvironment((uint64_t)v14) && v16)
  {
    C3DAnimationManagerSetPausedForEditing((uint64_t)v12, 1);
    AuthoringEnvironment = C3DEngineContextGetAuthoringEnvironment(a1, 1);
    C3DAuthoringEnvironmentCopySettings((uint64_t)v16, (uint64_t)AuthoringEnvironment);
  }
  ContentScaleFactor = C3DRendererContextGetContentScaleFactor((uint64_t)v15);
  C3DRendererContextSetContentScaleFactor((uint64_t)v12, ContentScaleFactor);
  v19 = 1;
  if (v16)
    goto LABEL_12;
LABEL_13:
  ResourceManagerForContext = C3DResourceManagerRegistryGetResourceManagerForContext(a2, 1);
  v21 = *(const void **)(a1 + 152);
  if (v21)
    v22 = CFRetain(v21);
  else
    v22 = 0;
  C3DRendererContextSetGLContext(v12, a2);
  v23 = *(const void **)(a1 + 152);
  if (v23 != ResourceManagerForContext)
  {
    if (v23)
    {
      CFRelease(v23);
      *(_QWORD *)(a1 + 152) = 0;
    }
    if (ResourceManagerForContext)
      v24 = CFRetain(ResourceManagerForContext);
    else
      v24 = 0;
    *(_QWORD *)(a1 + 152) = v24;
  }
  v25 = *(__n64 **)(a1 + 136);
  if (v25 != v12)
  {
    if (v25)
    {
      CFRelease(v25);
      *(_QWORD *)(a1 + 136) = 0;
    }
    if (v12)
      v26 = CFRetain(v12);
    else
      v26 = 0;
    *(_QWORD *)(a1 + 136) = v26;
  }
  *(_QWORD *)(a1 + 1696) = v12 + 23;
  *(_DWORD *)(a1 + 1712) = C3DMeshElementGetPrimitiveCount((uint64_t)v12);
  _C3DResourceManagerInstallRendererContext(*(_QWORD *)(a1 + 152), *(const void **)(a1 + 136));
  __InstallFXContext(a1);
  if (v22)
    v27 = v19;
  else
    v27 = 0;
  if (v27 == 1)
    _C3DResourceManagerUninstallRendererContext((uint64_t)v22, v15);
  _setupRendererContextWithSceneOptions(a1);
  if (v12)
    CFRelease(v12);
  if (v19)
    CFRelease(v15);
  if (v22)
    CFRelease(v22);
}

void C3DEngineContextSetGLContext(uint64_t a1, void *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (!a1 && (v4 = scn_default_log(), os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)))
  {
    C3DEngineContextGetScene_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v12 = scn_default_log();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    C3DEngineContextSetGLContext_cold_1(v12, v13, v14, v15, v16, v17, v18, v19);
LABEL_6:
  v20 = *(_QWORD *)(a1 + 136);
  if (!v20 || *(void **)(v20 + 160) != a2)
    __InstallGLContext(a1, a2);
}

uint64_t C3DEngineContextGetGLContext(uint64_t a1)
{
  uint64_t result;

  result = C3DEngineContextGetRendererContextGL(a1);
  if (result)
    return C3DRendererContextGetGLContext(result);
  return result;
}

uint64_t C3DEngineContextSetCoordinatesSystemOptions(uint64_t result, __int16 a2, int a3)
{
  __int16 v3;

  if (a3)
    v3 = a2;
  else
    v3 = 0;
  *(_WORD *)(result + 214) = *(_WORD *)(result + 214) & ~a2 | v3;
  return result;
}

void C3DEngineContextSetNextFrameTime(uint64_t a1, double a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DEngineContextGetScene_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = *(double *)(a1 + 424);
  if (v12 > a2)
    v12 = a2;
  *(double *)(a1 + 424) = v12;
}

void C3DEngineContextSetNextFrameTimeToAsap(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DEngineContextGetScene_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  v10 = *(double *)(a1 + 440);
  if (v10 >= *(double *)(a1 + 424))
    v10 = *(double *)(a1 + 424);
  *(double *)(a1 + 424) = v10;
}

double C3DEngineContextGetNextFrameTime(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DEngineContextGetScene_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(double *)(a1 + 424);
}

float32x4_t *C3DEngineContextGetDefaultLightNode(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float32x4_t *v10;
  const __CFDictionary *v11;
  int v12;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DEngineContextGetStats_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  v10 = *(float32x4_t **)(a1 + 48);
  if (!v10)
  {
    v10 = (float32x4_t *)C3DNodeCreate();
    v11 = (const __CFDictionary *)C3DLightCreate();
    if (C3DWasLinkedBeforeMajorOSYear2016())
      v12 = 2;
    else
      v12 = 1;
    C3DLightSetType((uint64_t)v11, v12);
    C3DLightSetCategoryBitMask(v11, 0xDEFA017DEFA017);
    C3DNodeSetLight(v10, v11);
    CFRelease(v11);
    *(_QWORD *)(a1 + 48) = v10;
  }
  return v10;
}

BOOL C3DEngineContextGetAllowsDefaultLightingEnvironmentFallback(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t Scene;
  const __CFDictionary *RenderingOptionForKey;
  _BOOL8 result;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DEngineContextGetStats_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  Scene = C3DEngineContextGetScene(a1);
  result = 1;
  if (!C3DSceneGetAllowsDefaultLightingEnvironmentFallback(Scene)
    || C3DWasLinkedBeforeMajorOSYear2018())
  {
    RenderingOptionForKey = C3DEngineContextGetRenderingOptionForKey(a1, CFSTR("defaultLight"));
    if (!RenderingOptionForKey || !CFEqual(RenderingOptionForKey, (CFTypeRef)*MEMORY[0x1E0C9AE50]))
      return 0;
  }
  return result;
}

CFTypeRef C3DEngineContextSetPointOfCulling(uint64_t a1, CFTypeRef cf)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef result;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DEngineContextGetScene_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  result = *(CFTypeRef *)(a1 + 32);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 32) = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *(_QWORD *)(a1 + 32) = result;
  }
  return result;
}

uint64_t C3DEngineContextGetPointOfCulling(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DEngineContextGetScene_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 32);
}

uint64_t C3DEngineContextGetClearsOnDraw(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DEngineContextGetScene_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(unsigned __int8 *)(a1 + 210);
}

void C3DEngineContextSetForceShaderReload(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DEngineContextGetScene_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(_BYTE *)(a1 + 208) = a2 != 0;
}

void C3DEngineContextSetAutoAdjustZRange(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DEngineContextGetScene_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(_BYTE *)(a1 + 209) = a2 != 0;
}

void _C3DEngineContextInvalidatePasses(int a1, uint64_t a2, int a3, int a4, CFDictionaryRef theDict)
{
  const void *Value;
  void *PointOfView;

  if (!theDict)
    goto LABEL_5;
  Value = CFDictionaryGetValue(theDict, CFSTR("kCameraKey"));
  PointOfView = C3DEngineContextGetPointOfView(a2);
  if (PointOfView)
    PointOfView = C3DNodeGetCamera((uint64_t)PointOfView);
  if (Value == PointOfView)
  {
LABEL_5:
    C3DFXInvalidatePasses(a2);
    C3DRenderGraphInvalidateTechniques(*(_QWORD *)(a2 + 1728));
  }
}

uint64_t C3DEngineContextSetDeltaTime(uint64_t result, double a2)
{
  *(double *)(result + 432) = a2;
  return result;
}

uint64_t C3DEngineContextSetSystemTime(uint64_t result, double a2)
{
  *(double *)(result + 440) = a2;
  return result;
}

uint64_t C3DEngineContextSetSceneTime(uint64_t result, double a2)
{
  *(double *)(result + 448) = a2;
  return result;
}

double C3DEngineContextGetSceneTime(uint64_t a1)
{
  return *(double *)(a1 + 448);
}

uint64_t C3DEngineContextGetIsolateMode(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 460);
}

CFTypeRef C3DEngineContextSetBackgroundTextureProxy(uint64_t a1, CFTypeRef cf)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a1 + 192);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 192) = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *(_QWORD *)(a1 + 192) = result;
  }
  return result;
}

void C3DEngineContextDrawFullScreenQuad(uint64_t a1)
{
  uint64_t RendererContextGL;
  uint64_t ResourceManager;
  void *QuadMesh;
  const void *ElementAtIndex;

  RendererContextGL = C3DEngineContextGetRendererContextGL(a1);
  ResourceManager = C3DEngineContextGetResourceManager(a1);
  QuadMesh = (void *)C3DEngineContextGetQuadMesh(a1);
  C3DRendererContextSetEnable(RendererContextGL, 2, 0);
  C3DRendererContextSetEnable(RendererContextGL, 1, 0);
  C3DRendererContextBindMesh(RendererContextGL, ResourceManager, QuadMesh);
  ElementAtIndex = C3DMeshGetElementAtIndex((uint64_t)QuadMesh, 0, 1);
  C3DRendererContextBindMeshElement(RendererContextGL, ResourceManager, ElementAtIndex);
  C3DRendererContextRenderResidentMeshElement(RendererContextGL);
  C3DRendererContextSetEnable(RendererContextGL, 2, 1);
  C3DRendererContextSetEnable(RendererContextGL, 1, 1);
}

uint64_t C3DEngineContextGetRendererElementState(uint64_t a1)
{
  return *(_QWORD *)(a1 + 1640);
}

uint64_t C3DEngineContextGetMainClearColor(uint64_t a1)
{
  return *(_QWORD *)(a1 + 224);
}

void C3DEngineContextComputeNormalMatrix(float32x4_t *a1@<X0>, _OWORD *a2@<X8>)
{
  __n128 v3[4];

  a2[2] = 0u;
  a2[3] = 0u;
  *a2 = 0u;
  a2[1] = 0u;
  memset(v3, 0, sizeof(v3));
  C3DMatrix4x4Mult((uint64_t)&a1[78], a1 + 54, v3);
  C3DMatrix4x4ComputeNormalMatrix(v3, a2);
}

__n128 C3DEngineContextSetViewportAtIndex(uint64_t a1, unsigned int a2, __n128 result)
{
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;

  if (a2 >= 6)
  {
    v13 = result;
    v5 = scn_default_log();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
      C3DEngineContextGetViewportAtIndex_cold_1(v5, v6, v7, v8, v9, v10, v11, v12);
    result = v13;
    *(__n128 *)(a1 + 16 * a2 + 240) = v13;
  }
  else
  {
    *(__n128 *)(a1 + 16 * a2 + 240) = result;
    if (!a2)
    {
      if (*(_QWORD *)(a1 + 136))
        C3DRendererContextSetViewport(result);
    }
  }
  return result;
}

uint64_t C3DEngineContextGetInterfaceOrientation(uint64_t a1)
{
  return *(unsigned int *)(a1 + 368);
}

__n128 C3DEngineContextGetDrawableSafeAreaInsets(__n128 *a1)
{
  return a1[21];
}

__n128 *C3DEngineContextSetDrawableSafeAreaInsets(__n128 *result, __n128 a2)
{
  result[21] = a2;
  return result;
}

const void *C3DEngineContextGetTextureWithName(uint64_t a1, __CFString *a2)
{
  uint64_t FXContext;
  uint64_t FramebufferRegistry;

  if (*(_QWORD *)(a1 + 1704))
    return (const void *)C3DRenderGraphGetTextureNamed(*(_QWORD *)(a1 + 1728), -[__CFString UTF8String](a2, "UTF8String"));
  FXContext = C3DEngineContextGetFXContext(a1);
  FramebufferRegistry = C3DFXContextGetFramebufferRegistry(FXContext);
  return C3DFramebufferRegistryGetTextureWithName(FramebufferRegistry, a2);
}

float32x2_t *C3DEngineContextGetTextureForEffectSlot(uint64_t a1, uint64_t a2, const void **a3)
{
  uint64_t TextureSampler;
  uint64_t v7;
  float32x2_t *result;
  void *ImageProxy;

  TextureSampler = C3DEffectSlotGetTextureSampler(a2);
  if (!TextureSampler)
    TextureSampler = C3DTextureSamplerGetDefault();
  *a3 = (const void *)TextureSampler;
  v7 = *(_QWORD *)(a1 + 1704);
  if (v7)
    return (float32x2_t *)-[SCNMTLRenderContext textureForEffectSlot:](v7, a2);
  ImageProxy = (void *)C3DEffectSlotGetImageProxy(a2);
  if (!ImageProxy
    || (result = (float32x2_t *)C3DResourceManagerMakeImageProxyResident(*(_QWORD *)(a1 + 152), ImageProxy, (uint64_t)*a3, *(_QWORD *)(a1 + 136), a1)) == 0)
  {
    result = (float32x2_t *)C3DEffectSlotGetImage(a2);
    if (result)
      return C3DResourceManagerMakeImageResident(*(_QWORD *)(a1 + 152), result, *a3, *(float32x2_t **)(a1 + 136));
  }
  return result;
}

uint64_t C3DEngineContextInferTextureTypeForImageTypeAndTextureSampler(unsigned int a1)
{
  if (a1 > 7)
    return 0;
  else
    return dword_1DD0093B0[a1];
}

uint64_t C3DEngineContextGetCommonProfileConditioners(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = 16 * *(unsigned __int8 *)(a1 + 211);
  v2 = *(_QWORD *)(a1 + 1704);
  if (v2)
    return v1 | -[SCNMTLRenderContext disableLinearRendering](v2);
  return v1;
}

uint64_t C3DEngineContextSetPreferredRenderMode(uint64_t result, char a2)
{
  *(_BYTE *)(result + 213) = a2;
  return result;
}

uint64_t C3DEngineContextSetVertexAmplificationEnabled(uint64_t result, char a2)
{
  if ((*(_BYTE *)(result + 1713) & 0x20) != 0)
    *(_BYTE *)(result + 372) = a2;
  return result;
}

uint64_t C3DEngineContextGetPreferredMultiVertexOutputStreamGenerator(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 372))
    return 2;
  else
    return 1;
}

uint64_t C3DEngineContextSetEyeCount(uint64_t result, char a2)
{
  *(_BYTE *)(result + 212) = a2;
  return result;
}

CFTypeRef C3DEngineContextSetRenderPassDescriptorForEye(uint64_t a1, CFTypeRef cf, unsigned int a3)
{
  uint64_t v3;
  CFTypeRef result;
  _QWORD *v6;

  v3 = a1 + 8 * a3;
  result = *(CFTypeRef *)(v3 + 1648);
  if (result != cf)
  {
    v6 = (_QWORD *)(v3 + 1648);
    if (result)
    {
      CFRelease(result);
      *v6 = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *v6 = result;
  }
  return result;
}

uint64_t C3DEngineContextGetRenderPassDescriptorForEye(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(a1 + 8 * a2 + 1648);
}

__n128 C3DEngineContextSetEyeMatrix4x4(uint64_t a1, int a2, uint64_t a3, unsigned int a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 result;
  __int128 v17;
  __int128 v18;
  unint64_t v19;

  if (a4 >= 6)
  {
    v8 = scn_default_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      C3DEngineContextGetEyeMatrix4x4_cold_1(v8, v9, v10, v11, v12, v13, v14, v15);
  }
  result = *(__n128 *)a3;
  v17 = *(_OWORD *)(a3 + 16);
  v18 = *(_OWORD *)(a3 + 48);
  v19 = a1 + 384 * a2 + ((unint64_t)a4 << 6);
  *(_OWORD *)(v19 + 512) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(v19 + 528) = v18;
  *(__n128 *)(v19 + 480) = result;
  *(_OWORD *)(v19 + 496) = v17;
  return result;
}

uint64_t C3DEngineContextSetViewpointCoordinateSpace(uint64_t result, char a2)
{
  *(_BYTE *)(result + 1632) = a2;
  return result;
}

uint64_t C3DEngineContextSetSuperSamplingFactor(uint64_t result, float a2)
{
  *(float *)(result + 204) = a2;
  return result;
}

uint64_t C3DEngineContextSetJitteringEnabled(uint64_t result, int a2)
{
  char v2;
  uint64_t v3;
  uint64_t FXContext;

  v2 = *(_BYTE *)(result + 1716);
  if (((((v2 & 1) == 0) ^ a2) & 1) == 0)
  {
    v3 = result;
    *(_BYTE *)(result + 1716) = v2 & 0xFE | a2;
    if (!*(_QWORD *)(result + 1704))
    {
      FXContext = C3DEngineContextGetFXContext(result);
      result = *(_QWORD *)(FXContext + 40);
      if ((*(_BYTE *)(v3 + 1716) & 1) != 0)
      {
        if (result)
          return result;
        result = C3DFXTechniqueCreateJittering();
      }
      else
      {
        if (!result)
          return result;
        CFRelease((CFTypeRef)result);
        result = 0;
      }
      *(_QWORD *)(FXContext + 40) = result;
    }
  }
  return result;
}

uint64_t C3DEngineContextSetJitteringStep(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1720) = a2;
  return result;
}

uint64_t C3DEngineContextGetJitteringStep(uint64_t a1)
{
  return *(unsigned int *)(a1 + 1720);
}

void C3DEngineContextSetUpdateMainFramebuffer(uint64_t a1, int a2)
{
  uint64_t FXContext;
  uint64_t v4;
  uint64_t v5;
  int PassCount;
  uint64_t PassAtIndex;

  *(_BYTE *)(a1 + 1724) = a2;
  if (!*(_QWORD *)(a1 + 1704))
  {
    FXContext = C3DEngineContextGetFXContext(a1);
    if (FXContext)
    {
      v4 = FXContext;
      v5 = *(_QWORD *)(FXContext + 40);
      if (v5)
      {
        PassCount = C3DFXTechniqueGetPassCount(v5);
        PassAtIndex = C3DFXTechniqueGetPassAtIndex(*(_QWORD *)(v4 + 40), PassCount - 1);
        if (PassAtIndex)
          C3DFXPassSetUpdatesMainFrameBuffer(PassAtIndex, a2);
      }
    }
  }
}

void C3DEngineContextComputeJitterMatrix(uint64_t a1@<X0>, int a2@<W1>, _OWORD *a3@<X8>)
{
  float v5;
  float v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  unint64_t v28;
  __n128 v29;

  v6 = *(float *)(a1 + 248);
  v5 = *(float *)(a1 + 252);
  if (v6 <= 0.0 || v5 <= 0.0)
  {
    v7 = scn_default_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
    {
      C3DEngineContextComputeJitterMatrix_cold_1(v7, v8, v9, v10, v11, v12, v13, v14);
      if (a2)
        goto LABEL_5;
LABEL_30:
      v19 = 4;
      v17 = 4;
      goto LABEL_31;
    }
  }
  if (!a2)
    goto LABEL_30;
LABEL_5:
  v15 = (int)((sqrt((double)a2) + -1.0) * 0.5 + 1.0);
  if (a2 <= 0)
    v16 = -(-a2 & 3);
  else
    v16 = a2 & 3;
  switch(v16)
  {
    case 0:
      v17 = 4 - v15;
      if (v15 >= 0)
        v18 = v15;
      else
        v18 = v15 + 1;
      v19 = 4 - (v18 >> 1);
      break;
    case 1:
      v19 = 4 - v15;
      v17 = 4 - v15;
      break;
    case 2:
      v17 = v15 + 4;
      v19 = 4 - v15;
      break;
    case 3:
      if (v15 >= 0)
        v20 = v15;
      else
        v20 = v15 + 1;
      v17 = 4 - (v20 >> 1);
      v19 = v15 + 4;
      break;
    default:
      v19 = 4;
      v17 = 4;
      break;
  }
  v21 = 2 * v15;
  v22 = a2 - (v21 - 1) * (v21 - 1);
  v23 = v22 / 4;
  v24 = v22 / 8;
  v25 = v23 + 2;
  if (v23 >= -1)
    v25 = v23 + 1;
  v26 = -(v25 >> 1);
  if ((v23 & 1) != 0)
    v24 = v26;
  v27 = v24 + v15;
  switch(v16)
  {
    case 0:
      v19 += v21 + ~v27;
      break;
    case 1:
      v17 += v27;
      break;
    case 2:
      v19 += v27;
      break;
    case 3:
      v17 += v21 + ~v27;
      break;
    default:
      break;
  }
LABEL_31:
  *(float *)&v28 = (float)((float)(int)(float)((float)v17 + -4.0) * -0.25) / v6;
  *((float *)&v28 + 1) = (float)((float)(int)(float)((float)v19 + -4.0) * -0.25) / v5;
  v29 = (__n128)v28;
  *a3 = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  C3DMatrix4x4MakeTranslation((uint64_t)a3, &v29);
}

uint64_t C3DEngineContextSetTemporalAntialiasingEnabled(uint64_t result, char a2)
{
  *(_BYTE *)(result + 1864) = *(_BYTE *)(result + 1864) & 0xFE | a2;
  return result;
}

float32x2_t C3DEngineContextGetTAAJitter(float32x2_t *a1, int a2)
{
  uint64_t RenderContext;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float32x2_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  RenderContext = C3DEngineContextGetRenderContext((uint64_t)a1);
  v5 = -[SCNMTLOpenSubdivComputeEvaluator computeEvaluator](RenderContext) + a2;
  v6 = v5 & 0xF;
  v8 = -v5;
  v7 = v8 < 0;
  v9 = v8 & 0xF;
  if (v7)
    v10 = v6;
  else
    v10 = -v9;
  v11 = a1[v10 + 217];
  if (a1[31].f32[0] <= 0.0 || a1[31].f32[1] <= 0.0)
  {
    v12 = scn_default_log();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
      C3DEngineContextGetTAAJitter_cold_1(v12, v13, v14, v15, v16, v17, v18, v19);
  }
  return vdiv_f32(v11, a1[31]);
}

C3D::RenderPass *C3D::OutlinePass::OutlinePass(C3D::OutlinePass *this, C3D::RenderGraph *a2, C3D::Pass *a3)
{
  C3D::RenderPass *result;

  result = C3D::RenderPass::RenderPass(this, a2, a3);
  *(_QWORD *)result = off_1EA598A08;
  return result;
}

const char *C3D::OutlinePass::name(C3D::OutlinePass *this)
{
  return "OutlinePass";
}

const char *C3D::OutlinePass::programHashCodeStoreName(C3D::OutlinePass *this)
{
  return "OutlinePass";
}

void C3D::OutlinePass::setup(C3D::OutlinePass *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  C3D::PickedObjectPass *v9;
  _OWORD *v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _OWORD *v15;
  _OWORD *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  int v21;

  C3D::Pass::setInputCount(this, 4u);
  C3D::Pass::setOutputCount(this, 1u);
  *(_QWORD *)(C3D::PassDescriptor::inputAtIndex((C3D::OutlinePass *)((char *)this + 32), 0) + 8) = "COLOR";
  C3D::Pass::parentColorDesc(this, (uint64_t)&v20);
  v2 = C3D::PassDescriptor::inputAtIndex((C3D::OutlinePass *)((char *)this + 32), 0);
  *(_OWORD *)(v2 + 16) = v20;
  *(_DWORD *)(v2 + 32) = v21;
  v3 = C3D::PassDescriptor::inputAtIndex((C3D::OutlinePass *)((char *)this + 32), 0);
  *(_WORD *)(v3 + 66) = *(_WORD *)(v3 + 66) & 0xFFFC | 1;
  v4 = C3D::PassDescriptor::inputAtIndex((C3D::OutlinePass *)((char *)this + 32), 0);
  *(_WORD *)(v4 + 66) |= 4u;
  *(_QWORD *)(C3D::PassDescriptor::inputAtIndex((C3D::OutlinePass *)((char *)this + 32), 1u) + 8) = "DEPTH";
  *(_BYTE *)(C3D::PassDescriptor::inputAtIndex((C3D::OutlinePass *)((char *)this + 32), 1u) + 64) = 2;
  C3D::Pass::parentDepthDesc(this, (uint64_t)&v20);
  v5 = C3D::PassDescriptor::inputAtIndex((C3D::OutlinePass *)((char *)this + 32), 1u);
  *(_OWORD *)(v5 + 16) = v20;
  *(_DWORD *)(v5 + 32) = v21;
  v6 = C3D::PassDescriptor::inputAtIndex((C3D::OutlinePass *)((char *)this + 32), 1u);
  *(_WORD *)(v6 + 66) = *(_WORD *)(v6 + 66) & 0xFFFC | 1;
  v7 = C3D::PassDescriptor::inputAtIndex((C3D::OutlinePass *)((char *)this + 32), 1u);
  *(_WORD *)(v7 + 66) |= 4u;
  *(_QWORD *)(C3D::PassDescriptor::outputAtIndex((C3D::OutlinePass *)((char *)this + 32), 0) + 8) = "COLOR_OUTLINE";
  *(_BYTE *)(C3D::PassDescriptor::outputAtIndex((C3D::OutlinePass *)((char *)this + 32), 0) + 65) = 0;
  v8 = *((_QWORD *)this + 3);
  *(_QWORD *)&v20 = this;
  v9 = C3D::RenderGraph::createPass<C3D::PickedObjectPass,C3D::OutlinePass *>(v8, (C3D::Pass **)&v20);
  v10 = (_OWORD *)C3D::PassDescriptor::outputAtIndex((C3D::PickedObjectPass *)((char *)v9 + 32), 0);
  v11 = (_OWORD *)C3D::PassDescriptor::inputAtIndex((C3D::OutlinePass *)((char *)this + 32), 2u);
  *v11 = *v10;
  v12 = v10[4];
  v14 = v10[1];
  v13 = v10[2];
  v11[3] = v10[3];
  v11[4] = v12;
  v11[1] = v14;
  v11[2] = v13;
  v15 = (_OWORD *)C3D::PassDescriptor::outputAtIndex((C3D::PickedObjectPass *)((char *)v9 + 32), 1u);
  v16 = (_OWORD *)C3D::PassDescriptor::inputAtIndex((C3D::OutlinePass *)((char *)this + 32), 3u);
  *v16 = *v15;
  v17 = v15[4];
  v19 = v15[1];
  v18 = v15[2];
  v16[3] = v15[3];
  v16[4] = v17;
  v16[1] = v19;
  v16[2] = v18;
  C3D::Pass::addDependency(this, v9);
}

C3D::PickedObjectPass *C3D::RenderGraph::createPass<C3D::PickedObjectPass,C3D::OutlinePass *>(uint64_t a1, C3D::Pass **a2)
{
  C3D::PickedObjectPass *Aligned;

  Aligned = (C3D::PickedObjectPass *)C3DScratchAllocatorAllocateAligned(*(_QWORD *)(a1 + 16), 5376, 16, 0);
  C3D::PickedObjectPass::PickedObjectPass(Aligned, (C3D::RenderGraph *)a1, *a2);
  C3D::RenderGraph::addPass((C3D::RenderGraph *)a1, Aligned);
  if (*(_BYTE *)(a1 + 209))
    (*(void (**)(C3D::PickedObjectPass *))(*(_QWORD *)Aligned + 8))(Aligned);
  return Aligned;
}

void C3D::OutlinePass::compile(C3D::OutlinePass *this)
{
  uint64_t v2;
  C3D::RenderGraphResourceManager *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t RenderContext;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v2 = (*(uint64_t (**)(C3D::OutlinePass *))(*(_QWORD *)this + 64))(this);
  v3 = *(C3D::RenderGraphResourceManager **)(*((_QWORD *)this + 3) + 128);
  v4 = C3D::RenderGraphResourceManager::get(v3, v2);
  *((_QWORD *)this + 30) = v4;
  if (!v4)
  {
    v5 = (_QWORD *)operator new();
    v5[1] = 0;
    v5[2] = 0;
    *v5 = &off_1EA599BD8;
    *((_QWORD *)this + 30) = v5;
    C3D::RenderGraphResourceManager::set((uint64_t)v3, v2, (uint64_t)v5);
    RenderContext = C3DEngineContextGetRenderContext(*((_QWORD *)this + 2));
    v7 = (void *)-[SCNMTLRenderContext resourceManager](RenderContext);
    *((_QWORD *)&v13 + 1) = objc_msgSend((id)-[SCNMTLResourceManager libraryManager]((uint64_t)v7), "frameworkLibrary", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0);
    *(_QWORD *)&v14 = *(unsigned __int16 *)(C3D::PassDescriptor::inputAtIndex((C3D::OutlinePass *)((char *)this + 32), 0)+ 28);
    LOBYTE(v15) = *(_BYTE *)(C3D::PassDescriptor::inputAtIndex((C3D::OutlinePass *)((char *)this + 32), 0) + 31);
    *((_QWORD *)&v16 + 1) = CFSTR("outline_vert");
    *(_QWORD *)&v17 = CFSTR("outline_frag");
    v8 = objc_msgSend(v7, "newRenderPipelineStateWithDesc:", &v12);
    v9 = *((_QWORD *)this + 30);
    v10 = *(void **)(v9 + 16);
    if (v10 != (void *)v8)
    {
      v11 = v8;
      if (v10)

      *(_QWORD *)(v9 + 16) = v11;
    }
  }
}

uint64_t C3D::OutlinePass::execute(C3D::Pass *a1, SCNMTLRenderCommandEncoder **a2)
{
  SCNMTLRenderCommandEncoder *v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  void **v13;

  v4 = *a2;
  v5 = objc_msgSend((id)C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*((_QWORD *)a1 + 30) + 16), "state");
  if (v4->var23 != (SCNMTLBufferPool *)v5)
  {
    v4->var23 = (SCNMTLBufferPool *)v5;
    objc_msgSend((id)v4->var24[1], "setRenderPipelineState:", v5);
  }
  v6 = (uint64_t)*a2;
  v7 = C3D::Pass::inputTextureAtIndex(a1, 2u);
  SCNMTLRenderCommandEncoder::setFragmentTexture(v6, v7, 0);
  v8 = (uint64_t)*a2;
  v9 = C3D::Pass::inputTextureAtIndex(a1, 0);
  SCNMTLRenderCommandEncoder::setFragmentTexture(v8, v9, 1uLL);
  v10 = (uint64_t)*a2;
  v11 = C3D::Pass::inputTextureAtIndex(a1, 1u);
  SCNMTLRenderCommandEncoder::setFragmentTexture(v10, v11, 2uLL);
  v12 = (uint64_t)*a2;
  v13 = C3D::Pass::inputTextureAtIndex(a1, 3u);
  SCNMTLRenderCommandEncoder::setFragmentTexture(v12, v13, 3uLL);
  return SCNMTLRenderCommandEncoder::drawFullScreenTriangle(*a2);
}

void C3D::OutlinePassResource::~OutlinePassResource(C3D::OutlinePassResource *this)
{
  void *v1;

  *(_QWORD *)this = &off_1EA599BD8;
  v1 = (void *)*((_QWORD *)this + 2);
  if (v1)

}

{
  void *v1;

  *(_QWORD *)this = &off_1EA599BD8;
  v1 = (void *)*((_QWORD *)this + 2);
  if (v1)

  JUMPOUT(0x1DF0D41C0);
}

__n128 __copy_helper_block_e16_32c14_ZTS9btVector3(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[2];
  a1[2] = result;
  return result;
}

void sub_1DCDA6958(_Unwind_Exception *a1)
{
  void **v1;

  btAlignedFreeInternal(v1);
  _Unwind_Resume(a1);
}

double btC3DDynamicCharacterController::setup(btC3DDynamicCharacterController *this, float a2, float a3, float a4)
{
  float v5;
  unint64_t v6;
  unint64_t v7;
  btMultiSphereShape *v8;
  uint64_t v9;
  __int128 *Identity;
  uint64_t v11;
  uint64_t v12;
  double result;
  int v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  int v26;
  char v27;
  __int128 v28;
  float v29[2];
  btVector3 v30;
  __int128 v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v29[0] = a3;
  v29[1] = a3;
  v5 = a2 * 0.5;
  LODWORD(v6) = 0;
  LODWORD(v7) = 0;
  *((float *)&v7 + 1) = v5 - a3;
  *((float *)&v6 + 1) = a3 - v5;
  v30 = (btVector3)v7;
  v31 = v6;
  *((float *)this + 2) = v5;
  v8 = (btMultiSphereShape *)btAlignedAllocInternal(192, 16);
  btMultiSphereShape::btMultiSphereShape(v8, &v30, v29, 2);
  *((_QWORD *)this + 2) = v8;
  v9 = btAlignedAllocInternal(224, 16);
  Identity = btTransform::getIdentity((btTransform *)v9);
  *(_QWORD *)v9 = off_1EA596EB8;
  *(_OWORD *)(v9 + 16) = xmmword_1DD007970;
  *(_OWORD *)(v9 + 32) = xmmword_1DD007920;
  *(_OWORD *)(v9 + 48) = xmmword_1DD007600;
  *(_OWORD *)(v9 + 64) = xmmword_1DD0093F0;
  *(_OWORD *)(v9 + 80) = *Identity;
  *(_OWORD *)(v9 + 96) = Identity[1];
  *(_OWORD *)(v9 + 112) = Identity[2];
  *(_OWORD *)(v9 + 128) = Identity[3];
  *(_OWORD *)(v9 + 144) = xmmword_1DD007970;
  *(_OWORD *)(v9 + 160) = xmmword_1DD007920;
  *(_OWORD *)(v9 + 176) = xmmword_1DD007600;
  *(_OWORD *)(v9 + 192) = xmmword_1DD0093F0;
  *(_QWORD *)(v9 + 208) = 0;
  v11 = *((_QWORD *)this + 2);
  v14 = 1065353216;
  v15 = v9;
  v20 = 0;
  v21 = v11;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = xmmword_1DD009400;
  v26 = 1065353216;
  v27 = 0;
  v28 = xmmword_1DD009410;
  v16 = xmmword_1DD007970;
  v17 = xmmword_1DD007920;
  v18 = xmmword_1DD007600;
  v19 = 0;
  v12 = btAlignedAllocInternal(704, 16);
  btRigidBody::btRigidBody((btCollisionObject *)v12, (uint64_t)&v14);
  *((_QWORD *)this + 3) = v12;
  *(_QWORD *)(v12 + 524) = 0;
  result = 0.0;
  *(_OWORD *)(v12 + 624) = 0u;
  return result;
}

void sub_1DCDA6B0C(_Unwind_Exception *a1)
{
  void **v1;

  btAlignedFreeInternal(v1);
  _Unwind_Resume(a1);
}

void btC3DGhostIgnoreCharacterBody::~btC3DGhostIgnoreCharacterBody(btC3DGhostIgnoreCharacterBody *this)
{
  JUMPOUT(0x1DF0D41C0);
}

BOOL btC3DGhostIgnoreCharacterBody::needBroadphaseCollision(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *a3;
  return (*a2 != v3 || v4 != *(_QWORD *)(a1 + 16))
      && (v4 != v3 || *a2 != *(_QWORD *)(a1 + 16))
      && (a3[2] & a2[1]) != 0
      && (a2[2] & a3[1]) != 0;
}

void btC3DDynamicCharacterController::~btC3DDynamicCharacterController(btC3DDynamicCharacterController *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1EA597FE8;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    *((_QWORD *)this + 3) = 0;
  }
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1EA597FE8;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    *((_QWORD *)this + 3) = 0;
  }
  JUMPOUT(0x1DF0D41C0);
}

uint64_t btC3DDynamicCharacterController::updateAction(uint64_t a1, uint64_t a2, float a3)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)a1 + 72))(a1, a2, a3);
}

uint64_t btC3DDynamicCharacterController::preStep(float32x4_t *this, btCollisionWorld *a2)
{
  uint64_t *v4;
  uint64_t v5;
  int8x16_t v6;
  float32x4_t v7;
  int8x16_t v8;
  float32x4_t v9;
  int8x16_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t result;
  float v21;
  uint64_t v22;
  int8x16_t v23;
  float32x4_t v24;
  float32x4_t v25;
  uint64_t (**v26)();
  int v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  int v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v4 = &this[1].i64[1];
  (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(this[1].i64[1] + 536) + 16))(*(_QWORD *)(this[1].i64[1] + 536), &v22);
  v5 = 0;
  v6.i64[0] = 0x8000000080000000;
  v6.i64[1] = 0x8000000080000000;
  v7 = (float32x4_t)veorq_s8(v23, v6);
  v8 = (int8x16_t)vmulq_f32(v7, v7);
  v9 = vmulq_n_f32(v7, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v8.i8, *(float32x2_t *)v8.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL)).f32[0]));
  v10 = (int8x16_t)vmulq_f32(v24, v24);
  v11 = vmulq_n_f32(v24, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v10.i8, *(float32x2_t *)v10.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL)).f32[0]));
  v12 = v25;
  this[2] = v25;
  this[3] = v12;
  v13 = this->f32[2];
  v14 = (float32x4_t)vdupq_n_s32(0x3F8CCCCDu);
  v15 = vmulq_f32(vmulq_n_f32(v9, v13), v14);
  v15.i32[3] = 0;
  v16 = vmulq_f32(vmulq_n_f32(v11, v13), v14);
  v16.i32[3] = 0;
  this[4] = vaddq_f32(v12, v15);
  this[5] = vaddq_f32(v12, v16);
  v17 = *v4;
  v29 = xmmword_1DD009420;
  v30 = 0;
  v31 = 0;
  v32 = 0u;
  v33 = 0u;
  v28 = 0;
  v26 = &off_1EA59ABE0;
  v34 = v17;
  v18 = 1;
  do
  {
    v19 = v18;
    *(float *)&v27 = 1.0;
    result = (*(uint64_t (**)(btCollisionWorld *, float32x4_t *, float32x4_t *, uint64_t (***)()))(*(_QWORD *)a2 + 64))(a2, &this[v5 + 2], &this[v5 + 4], &v26);
    v18 = 0;
    v21 = *(float *)&v27;
    if (!v28)
      v21 = 1.0;
    this[6].f32[v5] = v21;
    v5 = 1;
  }
  while ((v19 & 1) != 0);
  return result;
}

void btC3DDynamicCharacterController::playerStep(btC3DDynamicCharacterController *this, btCollisionWorld *a2, float a3)
{
  __float2 v5;
  float v6;
  float v7;
  float32x4_t v8;
  int8x16_t v9;
  int32x2_t v10;
  float32x4_t v11;
  float32x4_t v12;
  btQuaternion v13;
  btTransform v14;

  (*(void (**)(_QWORD, btTransform *))(**(_QWORD **)(*((_QWORD *)this + 3) + 536) + 16))(*(_QWORD *)(*((_QWORD *)this + 3) + 536), &v14);
  v5 = __sincosf_stret(*((float *)this + 36) * 0.5);
  v6 = v5.__sinval / sqrtf(vpadd_f32((float32x2_t)0x3F80000000000000, (float32x2_t)0x3F80000000000000).f32[0] + 0.0);
  v13.var0.var0[0] = v6 * 0.0;
  v13.var0.var0[1] = v6;
  v13.var0.var0[2] = v6 * 0.0;
  v13.var0.var0[3] = v5.__cosval;
  btMatrix3x3::setRotation(&v14.var0, (float32x4_t *)&v13);
  v12 = *(float32x4_t *)(*((_QWORD *)this + 3) + 352);
  v7 = *((float *)this + 38);
  if ((*(unsigned int (**)(btC3DDynamicCharacterController *))(*(_QWORD *)this + 96))(this))
  {
    v8 = vmulq_f32(v12, (float32x4_t)vdupq_n_s32(0x3E4CCCCDu));
LABEL_5:
    *(float32x4_t *)(*((_QWORD *)this + 3) + 352) = v8;
    goto LABEL_6;
  }
  v9 = (int8x16_t)vmulq_f32(v12, v12);
  v10 = (int32x2_t)vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL), vpadd_f32(*(float32x2_t *)v9.i8, *(float32x2_t *)v9.i8));
  if (sqrtf(*(float *)v10.i32) < *((float *)this + 37))
  {
    *(float *)v10.i32 = (float)(v7 * a3) * 0.0;
    v11 = (float32x4_t)vdupq_lane_s32(v10, 0);
    v11.i32[3] = 0;
    v8 = vaddq_f32(v12, v11);
    goto LABEL_5;
  }
LABEL_6:
  (*(void (**)(_QWORD, btTransform *))(**(_QWORD **)(*((_QWORD *)this + 3) + 536) + 24))(*(_QWORD *)(*((_QWORD *)this + 3) + 536), &v14);
  btRigidBody::setCenterOfMassTransform(*((btRigidBody **)this + 3), &v14);
}

uint64_t btC3DDynamicCharacterController::canJump(btC3DDynamicCharacterController *this)
{
  return 1;
}

uint64_t btC3DDynamicCharacterController::onGround(btC3DDynamicCharacterController *this)
{
  return 1;
}

void btC3DDynamicCharacterController::preStep(btCollisionWorld *)::ClosestNotMe::~ClosestNotMe()
{
  JUMPOUT(0x1DF0D41C0);
}

uint64_t btCollisionWorld::RayResultCallback::needsCollision(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL4 v3;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = (a1[4] & v2) != 0 && (*(_QWORD *)(a2 + 16) & a1[3]) != 0;
  return (a1[5] & v2) != 0 || v3;
}

float btC3DDynamicCharacterController::preStep(btCollisionWorld *)::ClosestNotMe::addSingleResult(float32x4_t *a1, uint64_t a2, int a3)
{
  if (*(_QWORD *)a2 == a1[8].i64[0])
    return 1.0;
  else
    return btCollisionWorld::ClosestRayResultCallback::addSingleResult(a1, a2, a3);
}

float btCollisionWorld::ClosestRayResultCallback::addSingleResult(float32x4_t *a1, uint64_t a2, int a3)
{
  float32x4_t *v3;
  float32x4_t v4;
  int8x16_t v5;
  int8x16_t v6;
  int8x16_t v7;

  a1->i32[2] = *(_DWORD *)(a2 + 32);
  v3 = *(float32x4_t **)a2;
  a1[1].i64[0] = *(_QWORD *)a2;
  v4 = *(float32x4_t *)(a2 + 16);
  if (!a3)
  {
    v5 = (int8x16_t)vmulq_f32(v3[1], v4);
    v6 = (int8x16_t)vmulq_f32(v4, v3[2]);
    v7 = (int8x16_t)vmulq_f32(v4, v3[3]);
    v7.i32[3] = 0;
    *(float32x2_t *)v4.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v5.i8, *(float32x2_t *)v6.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)));
    *(float32x2_t *)&v4.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)), 0);
  }
  a1[6] = v4;
  a1[7] = vaddq_f32(a1[4], vmulq_n_f32(vsubq_f32(a1[5], a1[4]), *(float *)(a2 + 32)));
  return *(float *)(a2 + 32);
}

float btMatrix3x3::setRotation(btMatrix3x3 *this, float32x4_t *a2)
{
  float32x4_t v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float result;

  v2 = vmulq_f32(*a2, *a2);
  v2.i64[0] = vpaddq_f32(v2, v2).u64[0];
  v2.f32[0] = 2.0 / vpadd_f32(*(float32x2_t *)v2.f32, *(float32x2_t *)v2.f32).f32[0];
  v3 = v2.f32[0] * COERCE_FLOAT(*a2);
  v4 = vmuls_lane_f32(v2.f32[0], *(float32x2_t *)a2->f32, 1);
  v2.f32[0] = vmuls_lane_f32(v2.f32[0], *a2, 2);
  v5 = vmuls_lane_f32(v3, *a2, 3);
  v6 = vmuls_lane_f32(v4, *a2, 3);
  v7 = vmuls_lane_f32(v2.f32[0], *a2, 3);
  v8 = v3 * COERCE_FLOAT(*a2);
  v9 = v4 * COERCE_FLOAT(*a2);
  v10 = v2.f32[0] * COERCE_FLOAT(*a2);
  v11 = vmuls_lane_f32(v4, *(float32x2_t *)a2->f32, 1);
  v12 = vmuls_lane_f32(v2.f32[0], *(float32x2_t *)a2->f32, 1);
  v13 = vmuls_lane_f32(v2.f32[0], *a2, 2);
  this->var0[0].var0.var0[0] = 1.0 - (float)(v11 + v13);
  this->var0[0].var0.var0[1] = v9 - v7;
  this->var0[0].var0.var0[2] = v10 + v6;
  this->var0[0].var0.var0[3] = 0.0;
  this->var0[1].var0.var0[0] = v9 + v7;
  this->var0[1].var0.var0[1] = 1.0 - (float)(v8 + v13);
  this->var0[1].var0.var0[2] = v12 - v5;
  this->var0[1].var0.var0[3] = 0.0;
  this->var0[2].var0.var0[0] = v10 - v6;
  this->var0[2].var0.var0[1] = v12 + v5;
  result = 1.0 - (float)(v8 + v11);
  *(_QWORD *)&this->var0[2].var0.var0[2] = LODWORD(result);
  return result;
}

__int128 *btTransform::getIdentity(btTransform *this)
{
  unsigned __int8 v1;
  btMatrix3x3 *v3;
  __int128 *Identity;
  __int128 v5;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v3)
    {
      Identity = btMatrix3x3::getIdentity(v3);
      v5 = Identity[1];
      btTransform::getIdentity(void)::identityTransform = *Identity;
      unk_1F03C2260 = v5;
      xmmword_1F03C2270 = Identity[2];
      qword_1F03C2280 = 0;
      unk_1F03C2288 = 0;
    }
  }
  return &btTransform::getIdentity(void)::identityTransform;
}

void sub_1DCDA71C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__int128 *btMatrix3x3::getIdentity(btMatrix3x3 *this)
{
  unsigned __int8 v1;

  {
    btMatrix3x3::getIdentity(void)::identityMatrix = xmmword_1DD007970;
    *(_OWORD *)algn_1F03C22B0 = xmmword_1DD007920;
    xmmword_1F03C22C0 = xmmword_1DD007600;
  }
  return &btMatrix3x3::getIdentity(void)::identityMatrix;
}

__n128 btDefaultMotionState::getWorldTransform(btDefaultMotionState *this, btTransform *a2)
{
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  int8x16_t v11;
  float32x4_t v12;
  int8x16_t v13;
  int32x2_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  __n128 result;

  v2 = *((float32x4_t *)this + 5);
  v3 = *((float32x4_t *)this + 6);
  v4 = *((float32x4_t *)this + 7);
  v6 = *((float32x4_t *)this + 1);
  v5 = *((float32x4_t *)this + 2);
  v8 = *((float32x4_t *)this + 3);
  v7 = *((float32x4_t *)this + 4);
  v9 = (float32x4_t)vtrn1q_s32((int32x4_t)v2, (int32x4_t)v3);
  v10.i64[0] = vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL).u64[0];
  v10.i64[1] = vextq_s8((int8x16_t)v4, (int8x16_t)v4, 8uLL).u32[0];
  v11.i64[0] = 0x8000000080000000;
  v11.i64[1] = 0x8000000080000000;
  v12 = (float32x4_t)veorq_s8(*((int8x16_t *)this + 8), v11);
  v13 = (int8x16_t)vmulq_f32(v10, v12);
  v13.i32[3] = 0;
  v8.i32[3] = 0;
  v5.i32[3] = 0;
  v14 = vzip2_s32(*(int32x2_t *)v4.f32, 0);
  v6.i32[3] = 0;
  v15 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v6, v2, 2), v5, v3, 2), v8, v4, 2);
  v16 = vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v6, *(float32x2_t *)v2.f32, 1), v5, *(float32x2_t *)v3.f32, 1), v8, *(float32x2_t *)v4.f32, 1);
  v17 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v6, v2.f32[0]), v5, v3.f32[0]), v8, v4.f32[0]);
  v9.i64[1] = v4.u32[0];
  v18 = (int8x16_t)vmulq_f32(v9, v12);
  *(int32x2_t *)v2.f32 = vzip2_s32(*(int32x2_t *)v2.f32, *(int32x2_t *)v3.f32);
  *(int32x2_t *)&v2.u32[2] = v14;
  v19 = (int8x16_t)vmulq_f32(v2, v12);
  *(float32x2_t *)v19.i8 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL)), vpadd_f32(*(float32x2_t *)v18.i8, *(float32x2_t *)v19.i8));
  v20 = (int8x16_t)vmulq_f32(v10, v7);
  v20.i32[3] = 0;
  v21 = (int8x16_t)vmulq_f32(v9, v7);
  v22 = (int8x16_t)vmulq_f32(v2, v7);
  result.n128_u64[0] = (unint64_t)vadd_f32(*(float32x2_t *)v19.i8, vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL)), vpadd_f32(*(float32x2_t *)v21.i8, *(float32x2_t *)v22.i8)));
  *(float32x2_t *)&result.n128_i8[8] = vadd_f32(vpadd_f32(vpadd_f32(*(float32x2_t *)v13.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL)), 0), vpadd_f32(vpadd_f32(*(float32x2_t *)v20.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL)), 0));
  a2->var0.var0[0] = (btVector3)v17;
  a2->var0.var0[1] = (btVector3)v16;
  a2->var0.var0[2] = (btVector3)v15;
  a2->var1 = (btVector3)result;
  return result;
}

__n128 btDefaultMotionState::setWorldTransform(float32x4_t *this, const btTransform *a2)
{
  __n128 result;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  int8x16_t v10;
  int8x16_t v11;
  float32x4_t v12;

  result = (__n128)a2->var0.var0[0];
  v3 = (float32x4_t)a2->var0.var0[1];
  v4 = this[5];
  v5 = this[6];
  v6 = this[7];
  v7 = this[8];
  v8 = (float32x4_t)a2->var0.var0[2];
  v9 = vmulq_f32((float32x4_t)a2->var0.var0[0], v7);
  v10 = (int8x16_t)vmulq_f32(v3, v7);
  *(float32x2_t *)v9.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL)), vpadd_f32(*(float32x2_t *)v9.f32, *(float32x2_t *)v10.i8));
  v11 = (int8x16_t)vmulq_f32(v8, v7);
  v11.i32[3] = 0;
  *(float32x2_t *)&v9.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v11.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL)), 0);
  v6.i32[3] = 0;
  v12 = vaddq_f32((float32x4_t)a2->var1, v9);
  v5.i32[3] = 0;
  v4.i32[3] = 0;
  this[1] = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v4, COERCE_FLOAT(*(_OWORD *)a2->var0.var0)), v5, *(float32x2_t *)a2->var0.var0[0].var0.var0, 1), v6, (float32x4_t)a2->var0.var0[0], 2);
  this[2] = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v4, v3.f32[0]), v5, *(float32x2_t *)v3.f32, 1), v6, v3, 2);
  this[3] = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v4, v8.f32[0]), v5, *(float32x2_t *)v8.f32, 1), v6, v8, 2);
  this[4] = v12;
  return result;
}

void *C3DEngineStatsEndFrameAndCopy(int *a1, uint64_t a2, uint64_t a3)
{
  double v5;
  double v6;
  double v7;
  uint64_t i;
  double v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  __int128 v17;
  __int128 v18;
  double v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  void *result;
  unsigned int v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  float64x2_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  int v52;
  unsigned int v53;
  _BYTE __dst[536];
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  int v65;

  v5 = 0.0;
  v6 = 1.17549435e-38;
  v7 = 3.40282347e38;
  for (i = 88; i != 208; i += 2)
  {
    v9 = *(double *)&a1[i];
    if (v7 >= v9)
      v7 = *(double *)&a1[i];
    if (v6 < v9)
      v6 = *(double *)&a1[i];
    v5 = v5 + v9;
  }
  *((double *)a1 + 42) = v7;
  *((double *)a1 + 43) = v6;
  *((double *)a1 + 41) = v5 / 60.0;
  v50 = a1[2];
  v51 = a1[1];
  v10 = a1[4];
  v52 = a1[3];
  v53 = *a1;
  v11 = a1[6];
  v12 = a1[7];
  v13 = a1[9];
  v14 = a1[10];
  v15 = a1[11];
  v16 = a1[12];
  v46 = a1[5];
  v47 = a1[13];
  v48 = a1[14];
  v49 = a1[8];
  v17 = *(_OWORD *)(a1 + 15);
  v18 = *(_OWORD *)(a1 + 19);
  v65 = a1[23];
  v63 = v17;
  v64 = v18;
  v43 = *((float64x2_t *)a1 + 7);
  v44 = *((float64x2_t *)a1 + 6);
  v45 = *((float64x2_t *)a1 + 9);
  v40 = *((float64x2_t *)a1 + 10);
  v41 = *((float64x2_t *)a1 + 11);
  v42 = *((float64x2_t *)a1 + 8);
  v19 = *((double *)a1 + 24);
  v20 = *(_OWORD *)(a1 + 50);
  v21 = *(_OWORD *)(a1 + 54);
  v22 = *(_OWORD *)(a1 + 62);
  v57 = *(_OWORD *)(a1 + 58);
  v58 = v22;
  v55 = v20;
  v56 = v21;
  v23 = *(_OWORD *)(a1 + 66);
  v24 = *(_OWORD *)(a1 + 70);
  v25 = *(_OWORD *)(a1 + 74);
  v62 = *((_QWORD *)a1 + 39);
  v60 = v24;
  v61 = v25;
  v59 = v23;
  result = memcpy(__dst, a1 + 80, sizeof(__dst));
  if (v10 <= 1)
    v27 = 1;
  else
    v27 = v10;
  if (a2)
  {
    v62 = *(_QWORD *)(a2 + 312);
    v28 = *(_OWORD *)(a2 + 232);
    v56 = *(_OWORD *)(a2 + 216);
    v57 = v28;
    v29 = *(_OWORD *)(a2 + 264);
    v30 = *(_OWORD *)(a2 + 280);
    v58 = *(_OWORD *)(a2 + 248);
    v59 = v29;
    v31 = *(_OWORD *)(a2 + 296);
    v60 = v30;
    v61 = v31;
  }
  if (a3)
  {
    v32 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v27), 0);
    v33 = v63;
    *(_OWORD *)(a3 + 76) = v64;
    *(_DWORD *)a3 = v53 / v27;
    *(_DWORD *)(a3 + 4) = v51 / v27;
    *(_DWORD *)(a3 + 8) = v50 / v27;
    *(_DWORD *)(a3 + 12) = v52;
    *(_DWORD *)(a3 + 16) = v10;
    *(_DWORD *)(a3 + 20) = v46 / v27;
    *(_DWORD *)(a3 + 24) = v11 / v27;
    *(_DWORD *)(a3 + 28) = v12 / v27;
    *(_DWORD *)(a3 + 32) = v49;
    *(_DWORD *)(a3 + 36) = v13 / v27;
    *(_DWORD *)(a3 + 40) = v14 / v27;
    *(_DWORD *)(a3 + 44) = v15 / v27;
    *(_DWORD *)(a3 + 48) = v16 / v27;
    *(_DWORD *)(a3 + 52) = v47 / v27;
    *(_DWORD *)(a3 + 56) = v48 / v27;
    *(_DWORD *)(a3 + 92) = v65;
    *(_OWORD *)(a3 + 60) = v33;
    *(float64x2_t *)(a3 + 96) = vdivq_f64(v44, v32);
    *(float64x2_t *)(a3 + 112) = vdivq_f64(v43, v32);
    *(float64x2_t *)(a3 + 128) = vdivq_f64(v42, v32);
    *(float64x2_t *)(a3 + 144) = vdivq_f64(v45, v32);
    *(float64x2_t *)(a3 + 160) = vdivq_f64(v40, v32);
    *(float64x2_t *)(a3 + 176) = vdivq_f64(v41, v32);
    *(double *)(a3 + 192) = v19 / (double)v27;
    v34 = v55;
    v35 = v56;
    v36 = v57;
    *(_OWORD *)(a3 + 248) = v58;
    *(_OWORD *)(a3 + 232) = v36;
    *(_OWORD *)(a3 + 216) = v35;
    *(_OWORD *)(a3 + 200) = v34;
    v37 = v59;
    v38 = v60;
    v39 = v61;
    *(_QWORD *)(a3 + 312) = v62;
    *(_OWORD *)(a3 + 280) = v38;
    *(_OWORD *)(a3 + 296) = v39;
    *(_OWORD *)(a3 + 264) = v37;
    return memcpy((void *)(a3 + 320), __dst, 0x218uLL);
  }
  return result;
}

double C3DEngineStatsResetResourceStats(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;
  _OWORD *v11;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DEngineStatsResetResourceStats_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  result = 0.0;
  *(_OWORD *)(a1 + 216) = 0u;
  v11 = (_OWORD *)(a1 + 216);
  v11[5] = 0u;
  v11[6] = 0u;
  v11[3] = 0u;
  v11[4] = 0u;
  v11[1] = 0u;
  v11[2] = 0u;
  return result;
}

void C3DEngineStatsMergeResourceStats(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;

  if (!a1 || !a2)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DEngineStatsMergeResourceStats_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = 216;
  do
  {
    *(_DWORD *)(a2 + v12) += *(_DWORD *)(a1 + v12);
    v13 = v12 >= 0x144;
    v12 += 4;
  }
  while (!v13);
}

void C3DEngineStatsReset(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DEngineStatsResetResourceStats_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(CFTimeInterval *)(a1 + 840) = CACurrentMediaTime();
}

CFTimeInterval C3DEngineStatsFinish(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CFTimeInterval result;
  CFTimeInterval v11;
  uint64_t v12;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DEngineStatsResetResourceStats_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  result = CACurrentMediaTime();
  v11 = result - *(double *)(a1 + 848);
  *(CFTimeInterval *)(a1 + 96) = result - *(double *)(a1 + 840);
  *(CFTimeInterval *)(a1 + 848) = result;
  v12 = *(unsigned int *)(a1 + 832);
  *(CFTimeInterval *)(a1 + 8 * v12 + 352) = v11;
  *(_DWORD *)(a1 + 832) = ((int)v12 + 1) % 0x3Cu;
  ++*(_DWORD *)(a1 + 16);
  return result;
}

void C3D::DownSampleBloomCoCPass::DownSampleBloomCoCPass(C3D::ComputePass *a1, C3D::RenderGraph *a2, C3D::Pass *a3, uint64_t a4)
{
  _QWORD *v5;

  C3D::ComputePass::ComputePass(a1, a2, a3);
  *v5 = off_1EA59A158;
  v5[14] = a4;
}

const char *C3D::DownSampleBloomCoCPass::name(C3D::DownSampleBloomCoCPass *this)
{
  return "DownSampleBloomCoCPass";
}

double C3D::DownSampleBloomCoCPass::setup(C3D::DownSampleBloomCoCPass *this)
{
  uint64_t v2;
  double result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  C3D::Pass::setInputCount(this, 3u);
  C3D::Pass::setOutputCount(this, *(unsigned __int8 *)(*((_QWORD *)this + 14) + 12) + *(unsigned __int8 *)(*((_QWORD *)this + 14) + 10));
  *(_BYTE *)(C3D::PassDescriptor::inputAtIndex((C3D::DownSampleBloomCoCPass *)((char *)this + 32), 0) + 64) = 2;
  *(_QWORD *)(C3D::PassDescriptor::inputAtIndex((C3D::DownSampleBloomCoCPass *)((char *)this + 32), 1u) + 8) = "COLOR";
  *(_QWORD *)(C3D::PassDescriptor::inputAtIndex((C3D::DownSampleBloomCoCPass *)((char *)this + 32), 2u) + 8) = "AverageLuminance";
  v2 = (*(uint64_t (**)(C3D::DownSampleBloomCoCPass *))(*(_QWORD *)this + 88))(this);
  v4 = *((_QWORD *)this + 14);
  if (*(_BYTE *)(v4 + 10))
  {
    v5 = C3D::PassDescriptor::outputAtIndex((C3D::DownSampleBloomCoCPass *)((char *)this + 32), 0);
    *(_WORD *)(v5 + 16) = (int)fmax((float)((float)(*(float *)(v2 + 8) * 0.5) / **((float **)this + 14)), 1.0);
    result = fmax((float)((float)(*(float *)(v2 + 12) * 0.5) / **((float **)this + 14)), 1.0);
    *(_WORD *)(v5 + 18) = (int)result;
    *(_BYTE *)(v5 + 30) = *(_DWORD *)(*((_QWORD *)this + 14) + 24);
    *(_WORD *)(v5 + 28) = 115;
    *(_QWORD *)(v5 + 8) = "Bloom";
    v4 = *((_QWORD *)this + 14);
  }
  if (*(_BYTE *)(v4 + 12))
  {
    v6 = C3D::PassDescriptor::outputAtIndex((C3D::DownSampleBloomCoCPass *)((char *)this + 32), *(unsigned __int8 *)(v4 + 10));
    *(_WORD *)(v6 + 16) = (int)fmax((float)((float)(*(float *)(v2 + 8) * 0.5) / **((float **)this + 14)), 1.0);
    result = fmax((float)((float)(*(float *)(v2 + 12) * 0.5) / **((float **)this + 14)), 1.0);
    *(_WORD *)(v6 + 18) = (int)result;
    *(_WORD *)(v6 + 28) = 115;
    *(_QWORD *)(v6 + 8) = "DofColorCoC";
  }
  return result;
}

void C3D::DownSampleBloomCoCPass::compile(C3D::DownSampleBloomCoCPass *this)
{
  uint64_t RenderContext;
  void *v3;
  uint64_t v4;
  C3D::RenderGraphResourceManager *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;

  RenderContext = C3DEngineContextGetRenderContext(*((_QWORD *)this + 2));
  v3 = (void *)-[SCNMTLRenderContext resourceManager](RenderContext);
  v4 = (*(uint64_t (**)(C3D::DownSampleBloomCoCPass *))(*(_QWORD *)this + 64))(this);
  v5 = *(C3D::RenderGraphResourceManager **)(*((_QWORD *)this + 3) + 128);
  v6 = C3D::RenderGraphResourceManager::get(v5, v4);
  *((_QWORD *)this + 15) = v6;
  if (!v6)
  {
    v7 = operator new();
    *(_QWORD *)v7 = &off_1EA59A548;
    *(_QWORD *)(v7 + 8) = 0;
    *(_OWORD *)(v7 + 16) = 0u;
    *(_OWORD *)(v7 + 32) = 0u;
    *(_OWORD *)(v7 + 48) = 0u;
    *((_QWORD *)this + 15) = v7;
    C3D::RenderGraphResourceManager::set((uint64_t)v5, v4, v7);
    v8 = objc_msgSend(v3, "newComputePipelineStateWithFunctionName:", CFSTR("downsample_2x_bloom"));
    v9 = *((_QWORD *)this + 15);
    v10 = *(void **)(v9 + 16);
    *(_QWORD *)(v9 + 16) = v8;
    if (v10)

    v11 = objc_msgSend(v3, "newComputePipelineStateWithFunctionName:", CFSTR("downsample_2x_dof"));
    v12 = *((_QWORD *)this + 15);
    v13 = *(void **)(v12 + 24);
    *(_QWORD *)(v12 + 24) = v11;
    if (v13)

    v14 = objc_msgSend(v3, "newComputePipelineStateWithFunctionName:", CFSTR("downsample_2x_bloom_dof"));
    v15 = *((_QWORD *)this + 15);
    v16 = *(void **)(v15 + 32);
    *(_QWORD *)(v15 + 32) = v14;
    if (v16)

    v17 = objc_msgSend(v3, "newComputePipelineStateWithFunctionName:", CFSTR("downsample_4x_bloom"));
    v18 = *((_QWORD *)this + 15);
    v19 = *(void **)(v18 + 40);
    *(_QWORD *)(v18 + 40) = v17;
    if (v19)

    v20 = objc_msgSend(v3, "newComputePipelineStateWithFunctionName:", CFSTR("downsample_4x_dof"));
    v21 = *((_QWORD *)this + 15);
    v22 = *(void **)(v21 + 48);
    *(_QWORD *)(v21 + 48) = v20;
    if (v22)

    v23 = objc_msgSend(v3, "newComputePipelineStateWithFunctionName:", CFSTR("downsample_4x_bloom_dof"));
    v24 = *((_QWORD *)this + 15);
    v25 = *(void **)(v24 + 56);
    *(_QWORD *)(v24 + 56) = v23;
    if (v25)

  }
}

uint64_t C3D::DownSampleBloomCoCPass::execute(uint64_t *a1, uint64_t a2)
{
  SCNMTLComputeCommandEncoder *v3;
  int32x4_t v4;
  int32x4_t v5;
  void **v6;
  void **v7;
  uint64_t v8;
  MTLTexture *v9;
  MTLTexture *v10;
  _QWORD *v11;
  unint64_t v12;
  MTLBuffer *v13;
  MTLBuffer *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  MTLComputePipelineState *v24;
  int32x2_t v26;
  int32x4_t v27;
  __n128 ViewportAtIndex;
  int8x16_t v29;
  int32x4_t v30;

  v3 = *(SCNMTLComputeCommandEncoder **)a2;
  ViewportAtIndex = C3DEngineContextGetViewportAtIndex(a1[2], *(unsigned __int16 *)(a2 + 8));
  v30 = (int32x4_t)xmmword_1DD009440;
  if (C3DEngineContextGetEyeCount(a1[2]) >= 2)
  {
    v29 = vextq_s8((int8x16_t)ViewportAtIndex, (int8x16_t)ViewportAtIndex, 8uLL);
    v4 = *(int32x4_t *)(*(uint64_t (**)(uint64_t *))(*a1 + 88))(a1);
    v26 = (int32x2_t)vextq_s8(v29, v29, 8uLL).u64[0];
    *(float32x2_t *)v4.i8 = vdiv_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v29.i8, v26), (float32x2_t)vdup_laneq_s32(v4, 2));
    v27 = v4;
    v5 = *(int32x4_t *)(*(uint64_t (**)(uint64_t *))(*a1 + 88))(a1);
    *(float32x2_t *)v5.i8 = vdiv_f32((float32x2_t)vzip2_s32(*(int32x2_t *)v29.i8, v26), (float32x2_t)vdup_laneq_s32(v5, 3));
    v30 = vzip1q_s32(v27, v5);
  }
  v6 = C3D::Pass::inputTextureAtIndex((C3D::Pass *)a1, 0);
  if ((void **)v3->_textures[0] != v6)
  {
    v3->_textures[0] = (MTLTexture *)v6;
    v3->_texturesToBind[0] |= 1uLL;
  }
  v7 = C3D::Pass::inputTextureAtIndex((C3D::Pass *)a1, 1u);
  if ((void **)v3->_textures[1] != v7)
  {
    v3->_textures[1] = (MTLTexture *)v7;
    v3->_texturesToBind[0] |= 2uLL;
  }
  v8 = a1[14];
  if (*(_BYTE *)(v8 + 12))
  {
    v9 = (MTLTexture *)C3D::Pass::outputTextureAtIndex((C3D::Pass *)a1, *(unsigned __int8 *)(v8 + 10));
    if (v3->_textures[2] != v9)
    {
      v3->_textures[2] = v9;
      v3->_texturesToBind[0] |= 4uLL;
    }
  }
  if (*(_BYTE *)(a1[14] + 10))
  {
    v10 = (MTLTexture *)C3D::Pass::outputTextureAtIndex((C3D::Pass *)a1, 0);
    if (v3->_textures[3] != v10)
    {
      v3->_textures[3] = v10;
      v3->_texturesToBind[0] |= 8uLL;
    }
  }
  v11 = (_QWORD *)a1[14];
  v13 = (MTLBuffer *)v11[5];
  v12 = v11[6];
  if (v3->_buffers[0] == v13)
  {
    if (v3->_offsets[0] == v12)
      goto LABEL_17;
  }
  else
  {
    v3->_buffers[0] = v13;
    v11 = (_QWORD *)a1[14];
  }
  v3->_offsets[0] = v12;
  v3->_buffersToBind[0] |= 1uLL;
LABEL_17:
  v14 = (MTLBuffer *)v11[7];
  if (v3->_buffers[1] == v14)
  {
    if (!v3->_offsets[1])
      goto LABEL_21;
  }
  else
  {
    v3->_buffers[1] = v14;
  }
  v3->_offsets[1] = 0;
  v3->_buffersToBind[0] |= 2uLL;
LABEL_21:
  SCNMTLComputeCommandEncoder::setBytes(v3, &v30, 0x10uLL, 2uLL);
  v15 = a1[14];
  v16 = (int)(float)((float)(*(float *)v15 + -1.0) * 3.0);
  if (*(_BYTE *)(v15 + 10))
  {
    v17 = *(unsigned __int8 *)(v15 + 12);
    v18 = C3D::Pass::outputTextureAtIndex((C3D::Pass *)a1, 0);
    v19 = a1[15] + 8 * v16;
    v20 = v19 + 16;
    v21 = v19 + 32;
    if (v17)
      v22 = v21;
    else
      v22 = v20;
  }
  else
  {
    v18 = C3D::Pass::outputTextureAtIndex((C3D::Pass *)a1, 0);
    v22 = a1[15] + 8 * v16 + 24;
  }
  v23 = C3D::SmartPtr<SCNMTLComputePipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLComputePipeline *(v22);
  v24 = (MTLComputePipelineState *)-[SCNMTLOpenSubdivComputeEvaluator computeEvaluator](v23);
  return SCNMTLComputeCommandEncoder::dispatchOnTexture2D(v3, v18, v24);
}

void C3D::DownSampleBloomCoCPassResource::~DownSampleBloomCoCPassResource(C3D::DownSampleBloomCoCPassResource *this)
{
  uint64_t i;
  void *v3;

  *(_QWORD *)this = &off_1EA59A548;
  for (i = 56; i != 8; i -= 8)
  {
    v3 = *(void **)((char *)this + i);
    if (v3)

  }
}

{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = &off_1EA59A548;
  v2 = 56;
  while (1)
  {
    v3 = *(void **)((char *)this + v2);
    if (v3)

    v2 -= 8;
    if (v2 == 8)
      JUMPOUT(0x1DF0D41C0);
  }
}

uint64_t _fillInfoFromFormat(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  uint64_t v5;
  int v6;
  int v7;
  char v8;
  int v9;
  __int16 v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  BOOL v18;
  int v19;

  if (a4 == a3)
    return 0;
  v5 = 0;
  *(_DWORD *)(a1 + 24) = a4;
  *(_DWORD *)(a1 + 28) = a5;
  *(_WORD *)(a1 + 7) = 257;
  *(_BYTE *)(a1 + 9) = 1;
  if (a4 > 36755)
  {
    if (a4 > 37807)
    {
      switch(a4)
      {
        case 37808:
        case 37840:
          v6 = 2;
          goto LABEL_66;
        case 37809:
        case 37841:
          *(_DWORD *)a1 = 2;
          v7 = 83952768;
          goto LABEL_86;
        case 37810:
        case 37842:
          *(_DWORD *)a1 = 2;
          v14 = 83952768;
          goto LABEL_49;
        case 37811:
        case 37843:
          *(_DWORD *)a1 = 2;
          v14 = 100729984;
          goto LABEL_49;
        case 37812:
        case 37844:
          *(_DWORD *)a1 = 2;
          v15 = 100729984;
          goto LABEL_51;
        case 37813:
        case 37845:
          *(_DWORD *)a1 = 2;
          v14 = 134284416;
          goto LABEL_49;
        case 37814:
        case 37846:
          *(_DWORD *)a1 = 2;
          v15 = 134284416;
          goto LABEL_51;
        case 37815:
        case 37847:
          *(_DWORD *)a1 = 2;
          v16 = 134284416;
          goto LABEL_53;
        case 37816:
        case 37848:
          *(_DWORD *)a1 = 2;
          v14 = 167838848;
LABEL_49:
          *(_DWORD *)(a1 + 4) = v14;
          v8 = 5;
          goto LABEL_87;
        case 37817:
        case 37849:
          *(_DWORD *)a1 = 2;
          v15 = 167838848;
LABEL_51:
          *(_DWORD *)(a1 + 4) = v15;
          v8 = 6;
          goto LABEL_87;
        case 37818:
        case 37850:
          *(_DWORD *)a1 = 2;
          v16 = 167838848;
LABEL_53:
          *(_DWORD *)(a1 + 4) = v16;
          v8 = 8;
          goto LABEL_87;
        case 37819:
        case 37851:
          *(_DWORD *)a1 = 2;
          v17 = 167838848;
          goto LABEL_56;
        case 37820:
        case 37852:
          *(_DWORD *)a1 = 2;
          v17 = 201393280;
LABEL_56:
          *(_DWORD *)(a1 + 4) = v17;
          v8 = 10;
          goto LABEL_87;
        case 37821:
        case 37853:
          *(_DWORD *)a1 = 2;
          *(_DWORD *)(a1 + 4) = 201393280;
          v8 = 12;
          goto LABEL_87;
        default:
          return v5;
      }
    }
    switch(a4)
    {
      case 37488:
      case 37489:
        *(_DWORD *)a1 = 5;
        v7 = 67109184;
        goto LABEL_86;
      case 37490:
      case 37491:
        *(_DWORD *)a1 = 5;
        v7 = 67109504;
        goto LABEL_86;
      case 37492:
      case 37493:
        v12 = 5;
        goto LABEL_60;
      case 37494:
      case 37495:
        v13 = 5;
        goto LABEL_85;
      case 37496:
      case 37497:
        v6 = 5;
        goto LABEL_66;
      default:
        switch(a4)
        {
          case 36756:
            goto LABEL_26;
          case 36757:
            goto LABEL_69;
          case 36758:
          case 36762:
            return v5;
          case 36759:
            *(_BYTE *)(a1 + 6) = 1;
            *(_WORD *)(a1 + 4) = 1056;
LABEL_119:
            LODWORD(v5) = 72;
            goto LABEL_210;
          case 36760:
            goto LABEL_70;
          case 36761:
            goto LABEL_71;
          case 36763:
            goto LABEL_72;
          default:
            if (a4 == 36975)
              goto LABEL_79;
            break;
        }
        break;
    }
    return v5;
  }
  if (a4 > 35839)
  {
    if (a4 > 36193)
    {
      if (a4 > 36491)
      {
        if ((a4 - 36492) < 2)
        {
          v8 = 4;
          *(_DWORD *)a1 = 4;
          v9 = 67175552;
        }
        else
        {
          if ((a4 - 36494) >= 2)
            return v5;
          v8 = 4;
          *(_DWORD *)a1 = 4;
          v9 = 67109760;
        }
      }
      else if ((a4 - 36283) < 2)
      {
        v8 = 4;
        *(_DWORD *)a1 = 4;
        v9 = 67109184;
      }
      else
      {
        if ((a4 - 36285) >= 2)
        {
          if (a4 != 36194)
            return v5;
          *(_BYTE *)(a1 + 6) = 0;
          *(_WORD *)(a1 + 4) = 784;
          goto LABEL_118;
        }
        v8 = 4;
        *(_DWORD *)a1 = 4;
        v9 = 67109504;
      }
      *(_DWORD *)(a1 + 4) = v9;
      goto LABEL_87;
    }
    if (a4 > 35900)
    {
      if (a4 <= 35917)
      {
        if (a4 == 35901)
        {
LABEL_74:
          *(_BYTE *)(a1 + 6) = 1;
          v10 = 800;
LABEL_80:
          *(_WORD *)(a1 + 4) = v10;
          goto LABEL_88;
        }
        if (a4 == 35907)
        {
          *(_BYTE *)(a1 + 6) = 1;
          *(_WORD *)(a1 + 4) = 1056;
          v18 = a3 == 32993;
          LODWORD(v5) = 71;
          v19 = 81;
LABEL_139:
          if (v18)
            LODWORD(v5) = v19;
          goto LABEL_210;
        }
        v11 = 35917;
LABEL_83:
        if (a4 != v11)
          return v5;
        v13 = 3;
LABEL_85:
        *(_DWORD *)a1 = v13;
        v7 = 67175488;
        goto LABEL_86;
      }
      if ((a4 - 35918) >= 2)
        return v5;
LABEL_65:
      v6 = 3;
LABEL_66:
      *(_DWORD *)a1 = v6;
      v7 = 67175552;
LABEL_86:
      *(_DWORD *)(a1 + 4) = v7;
      v8 = 4;
LABEL_87:
      *(_BYTE *)(a1 + 8) = v8;
LABEL_88:
      v5 = 1;
      if (a4 > 36755)
      {
        if (a4 > 37807)
        {
          switch(a4)
          {
            case 37808:
              LODWORD(v5) = 204;
              goto LABEL_210;
            case 37809:
              LODWORD(v5) = 205;
              goto LABEL_210;
            case 37810:
              LODWORD(v5) = 206;
              goto LABEL_210;
            case 37811:
              LODWORD(v5) = 207;
              goto LABEL_210;
            case 37812:
              LODWORD(v5) = 208;
              goto LABEL_210;
            case 37813:
              LODWORD(v5) = 210;
              goto LABEL_210;
            case 37814:
              LODWORD(v5) = 211;
              goto LABEL_210;
            case 37815:
              LODWORD(v5) = 212;
              goto LABEL_210;
            case 37816:
              LODWORD(v5) = 213;
              goto LABEL_210;
            case 37817:
              LODWORD(v5) = 214;
              goto LABEL_210;
            case 37818:
              LODWORD(v5) = 215;
              goto LABEL_210;
            case 37819:
              LODWORD(v5) = 216;
              goto LABEL_210;
            case 37820:
              LODWORD(v5) = 217;
              goto LABEL_210;
            case 37821:
              LODWORD(v5) = 218;
              goto LABEL_210;
            case 37840:
              LODWORD(v5) = 186;
              goto LABEL_210;
            case 37841:
              LODWORD(v5) = 187;
              goto LABEL_210;
            case 37842:
              LODWORD(v5) = 188;
              goto LABEL_210;
            case 37843:
              LODWORD(v5) = 189;
              goto LABEL_210;
            case 37844:
              LODWORD(v5) = 190;
              goto LABEL_210;
            case 37845:
              LODWORD(v5) = 192;
              goto LABEL_210;
            case 37846:
              LODWORD(v5) = 193;
              goto LABEL_210;
            case 37847:
              LODWORD(v5) = 194;
              goto LABEL_210;
            case 37848:
              LODWORD(v5) = 195;
              goto LABEL_210;
            case 37849:
              LODWORD(v5) = 196;
              goto LABEL_210;
            case 37850:
              LODWORD(v5) = 197;
              goto LABEL_210;
            case 37851:
              LODWORD(v5) = 198;
              goto LABEL_210;
            case 37852:
              LODWORD(v5) = 199;
              goto LABEL_210;
            case 37853:
              LODWORD(v5) = 200;
              goto LABEL_210;
            default:
              return v5;
          }
          return v5;
        }
        switch(a4)
        {
          case 37488:
            LODWORD(v5) = 170;
            break;
          case 37489:
            LODWORD(v5) = 172;
            break;
          case 37490:
            LODWORD(v5) = 174;
            break;
          case 37491:
            LODWORD(v5) = 176;
            break;
          case 37492:
            LODWORD(v5) = 180;
            break;
          case 37493:
            LODWORD(v5) = 181;
            break;
          case 37494:
            LODWORD(v5) = 182;
            break;
          case 37495:
            LODWORD(v5) = 183;
            break;
          case 37496:
            LODWORD(v5) = 178;
            break;
          case 37497:
            LODWORD(v5) = 179;
            break;
          default:
            switch(a4)
            {
              case 36756:
                LODWORD(v5) = 12;
                goto LABEL_210;
              case 36757:
                LODWORD(v5) = 32;
                goto LABEL_210;
              case 36758:
              case 36762:
                return v5;
              case 36759:
                goto LABEL_119;
              case 36760:
                LODWORD(v5) = 22;
                goto LABEL_210;
              case 36761:
                LODWORD(v5) = 62;
                goto LABEL_210;
              case 36763:
                LODWORD(v5) = 112;
                goto LABEL_210;
              default:
                if (a4 != 36975)
                  return v5;
                LODWORD(v5) = 91;
                break;
            }
            break;
        }
LABEL_210:
        *(_DWORD *)(a1 + 36) = v5;
        return 1;
      }
      if (a4 <= 34835)
      {
        v5 = 25;
        switch(a4)
        {
          case 33321:
            LODWORD(v5) = 10;
            goto LABEL_210;
          case 33322:
            LODWORD(v5) = 20;
            goto LABEL_210;
          case 33323:
            LODWORD(v5) = 30;
            goto LABEL_210;
          case 33324:
            LODWORD(v5) = 60;
            goto LABEL_210;
          case 33325:
            goto LABEL_210;
          case 33326:
            goto LABEL_132;
          case 33327:
            goto LABEL_134;
          case 33328:
            goto LABEL_136;
          case 33329:
            LODWORD(v5) = 14;
            goto LABEL_210;
          case 33330:
            LODWORD(v5) = 13;
            goto LABEL_210;
          case 33331:
            LODWORD(v5) = 24;
            goto LABEL_210;
          case 33332:
            LODWORD(v5) = 23;
            goto LABEL_210;
          case 33333:
            LODWORD(v5) = 54;
            goto LABEL_210;
          case 33334:
            LODWORD(v5) = 53;
            goto LABEL_210;
          case 33335:
            LODWORD(v5) = 34;
            goto LABEL_210;
          case 33336:
            LODWORD(v5) = 33;
            goto LABEL_210;
          case 33337:
            LODWORD(v5) = 64;
            goto LABEL_210;
          case 33338:
            LODWORD(v5) = 63;
            goto LABEL_210;
          case 33339:
            LODWORD(v5) = 104;
            goto LABEL_210;
          case 33340:
            LODWORD(v5) = 103;
            goto LABEL_210;
          default:
            if (a4 == 32857)
            {
              LODWORD(v5) = 90;
            }
            else
            {
              if (a4 != 32859)
                return v5;
              LODWORD(v5) = 110;
            }
            break;
        }
        goto LABEL_210;
      }
      if (a4 <= 35897)
      {
        if (a4 <= 35839)
        {
          switch(a4)
          {
            case 35412:
              LODWORD(v5) = 161;
              goto LABEL_210;
            case 35413:
              LODWORD(v5) = 163;
              goto LABEL_210;
            case 35414:
              LODWORD(v5) = 165;
              goto LABEL_210;
            case 35415:
              LODWORD(v5) = 167;
              goto LABEL_210;
            default:
              if (a4 == 34836)
                goto LABEL_123;
              if (a4 == 34842)
                goto LABEL_122;
              return v5;
          }
        }
        switch(a4)
        {
          case 35840:
            LODWORD(v5) = 162;
            goto LABEL_210;
          case 35841:
            LODWORD(v5) = 160;
            goto LABEL_210;
          case 35842:
            LODWORD(v5) = 166;
            goto LABEL_210;
          case 35843:
            LODWORD(v5) = 164;
            goto LABEL_210;
          default:
            return v5;
        }
        return v5;
      }
      if (a4 > 36213)
      {
        if (a4 <= 36225)
        {
          if (a4 == 36214)
          {
            LODWORD(v5) = 113;
          }
          else
          {
            if (a4 != 36220)
              return v5;
            LODWORD(v5) = 73;
          }
        }
        else
        {
          switch(a4)
          {
            case 36226:
              LODWORD(v5) = 124;
              break;
            case 36232:
              LODWORD(v5) = 114;
              break;
            case 36238:
              LODWORD(v5) = 74;
              break;
            default:
              return v5;
          }
        }
        goto LABEL_210;
      }
      if (a4 <= 35906)
      {
        if (a4 == 35898)
        {
          LODWORD(v5) = 92;
        }
        else
        {
          if (a4 != 35901)
            return v5;
          LODWORD(v5) = 93;
        }
        goto LABEL_210;
      }
      if (a4 != 36194)
      {
        if (a4 != 36208)
          return v5;
        LODWORD(v5) = 123;
        goto LABEL_210;
      }
LABEL_118:
      LODWORD(v5) = 40;
      goto LABEL_210;
    }
    switch(a4)
    {
      case 35840:
LABEL_38:
        v12 = 1;
LABEL_60:
        *(_DWORD *)a1 = v12;
        v7 = 67109696;
        goto LABEL_86;
      case 35841:
LABEL_34:
        *(_DWORD *)a1 = 1;
        v7 = 134218560;
        goto LABEL_86;
      case 35842:
LABEL_40:
        v13 = 1;
        goto LABEL_85;
      case 35843:
LABEL_39:
        *(_DWORD *)a1 = 1;
        v7 = 134284352;
        goto LABEL_86;
      default:
        if (a4 == 35898)
          goto LABEL_74;
        break;
    }
  }
  else
  {
    if (a4 <= 33777)
    {
      switch(a4)
      {
        case 33321:
LABEL_26:
          *(_BYTE *)(a1 + 6) = 0;
          v10 = 264;
          goto LABEL_80;
        case 33322:
LABEL_70:
          *(_BYTE *)(a1 + 6) = 0;
          v10 = 272;
          goto LABEL_80;
        case 33323:
LABEL_69:
          *(_BYTE *)(a1 + 6) = 0;
          v10 = 528;
          goto LABEL_80;
        case 33324:
LABEL_71:
          *(_BYTE *)(a1 + 6) = 0;
          v10 = 544;
          goto LABEL_80;
        case 33325:
          *(_BYTE *)(a1 + 6) = 0;
          *(_WORD *)(a1 + 4) = 272;
          LODWORD(v5) = 25;
          goto LABEL_210;
        case 33326:
          *(_BYTE *)(a1 + 6) = 0;
          *(_WORD *)(a1 + 4) = 288;
LABEL_132:
          LODWORD(v5) = 55;
          goto LABEL_210;
        case 33327:
          *(_BYTE *)(a1 + 6) = 0;
          *(_WORD *)(a1 + 4) = 544;
LABEL_134:
          LODWORD(v5) = 65;
          goto LABEL_210;
        case 33328:
          *(_BYTE *)(a1 + 6) = 0;
          *(_WORD *)(a1 + 4) = 576;
LABEL_136:
          LODWORD(v5) = 105;
          goto LABEL_210;
        default:
          switch(a4)
          {
            case 32854:
              *(_BYTE *)(a1 + 6) = 1;
              *(_WORD *)(a1 + 4) = 1040;
              LODWORD(v5) = 42;
              goto LABEL_210;
            case 32855:
              *(_BYTE *)(a1 + 6) = 1;
              *(_WORD *)(a1 + 4) = 1040;
              LODWORD(v5) = 41;
              goto LABEL_210;
            case 32856:
              *(_BYTE *)(a1 + 6) = 1;
              *(_WORD *)(a1 + 4) = 1056;
              v18 = a3 == 32993;
              LODWORD(v5) = 70;
              v19 = 80;
              goto LABEL_139;
            case 32857:
LABEL_79:
              *(_BYTE *)(a1 + 6) = 1;
              v10 = 1056;
              goto LABEL_80;
            case 32858:
              return v5;
            case 32859:
LABEL_72:
              *(_BYTE *)(a1 + 6) = 1;
              v10 = 1088;
              goto LABEL_80;
            default:
              v11 = 33777;
              goto LABEL_83;
          }
      }
      return v5;
    }
    if (a4 <= 35411)
    {
      if ((a4 - 33778) >= 2)
      {
        if (a4 == 34836)
        {
          *(_BYTE *)(a1 + 6) = 1;
          *(_WORD *)(a1 + 4) = 1152;
LABEL_123:
          LODWORD(v5) = 125;
        }
        else
        {
          if (a4 != 34842)
            return v5;
          *(_BYTE *)(a1 + 6) = 1;
          *(_WORD *)(a1 + 4) = 1088;
LABEL_122:
          LODWORD(v5) = 115;
        }
        goto LABEL_210;
      }
      goto LABEL_65;
    }
    switch(a4)
    {
      case 35412:
        goto LABEL_34;
      case 35413:
        goto LABEL_38;
      case 35414:
        goto LABEL_39;
      case 35415:
        goto LABEL_40;
      default:
        return v5;
    }
  }
  return v5;
}

uint64_t _loadKTX(uint64_t a1)
{
  NSObject *v2;
  const __CFData *Data;
  const __CFData *v4;
  unint64_t Length;
  NSObject *v6;
  uint64_t v7;
  unint64_t v8;
  const UInt8 *BytePtr;
  const UInt8 *v11;
  uint64_t TextureRawData;
  uint64_t v13;
  int v14;
  char v15;
  int v16;
  unint64_t v17;
  int v18;
  int v19;
  int v20;
  CFIndex v21;
  unint64_t v22;
  CFDataRef v23;
  NSObject *v24;
  uint64_t URL;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v43;
  NSObject *v44;
  int v45;
  int v46;
  uint8_t buf[4];
  int v48;
  __int16 v49;
  _BYTE v50[24];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  kdebug_trace();
  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      _loadKTX_cold_3(v2);
  }
  Data = (const __CFData *)C3DImageGetData(a1);
  if (Data)
  {
    v4 = Data;
    CFRetain(Data);
    goto LABEL_6;
  }
  URL = C3DImageGetURL(a1);
  if (URL)
  {
    v4 = (const __CFData *)C3DCreateDataWithContentOfURL(URL, 0);
    if (v4)
    {
LABEL_6:
      Length = CFDataGetLength(v4);
      if (Length > 0x3F)
      {
        v8 = Length;
        BytePtr = CFDataGetBytePtr(v4);
        if (*(_QWORD *)BytePtr == 0xBB31312058544BABLL && *((_DWORD *)BytePtr + 2) == 169478669)
        {
          v11 = BytePtr;
          if (*((_DWORD *)BytePtr + 3) == 67305985)
          {
            _C3DImageDeleteTextureRawDataIfNeeded(a1);
            _C3DImageCreateTextureRawData(a1, 0, 0, COERCE_DOUBLE(vcvt_f32_u32(*(uint32x2_t *)(v11 + 36))));
            if (*((_DWORD *)v11 + 13) == 6)
              C3DImageSetImageType(a1, 3);
            TextureRawData = C3DImageGetTextureRawData(a1);
            if ((_fillInfoFromFormat(TextureRawData, v13, *((_DWORD *)v11 + 6), *((_DWORD *)v11 + 7), *((_DWORD *)v11 + 8)) & 1) != 0)
            {
              v14 = *(_DWORD *)TextureRawData;
              if (!*(_DWORD *)TextureRawData)
                goto LABEL_24;
              v15 = (v14 - 5) < 0xFFFFFFFE;
              if (v14 == 2)
              {
                v15 = C3DASTCIsSupported();
                v14 = *(_DWORD *)TextureRawData;
              }
              if (v14 == 5)
                v15 = C3DASTCIsSupported();
              if ((v15 & 1) != 0)
              {
LABEL_24:
                v16 = 0;
                v17 = *((unsigned int *)v11 + 15) + 64;
                if (*((_DWORD *)v11 + 13) <= 1u)
                  v18 = 1;
                else
                  v18 = *((_DWORD *)v11 + 13);
                if (*((_DWORD *)v11 + 14) <= 1u)
                  v19 = 1;
                else
                  v19 = *((_DWORD *)v11 + 14);
                v46 = v19;
                while (v17 <= v8)
                {
                  v20 = 0;
                  v21 = *(unsigned int *)&v11[v17];
                  v17 += 4;
                  while (1)
                  {
                    v22 = v17 + v21;
                    if (v17 + v21 > v8)
                      break;
                    v23 = CFDataCreate(0, &v11[v17], v21);
                    CFArrayAppendValue(*(CFMutableArrayRef *)(TextureRawData + 40), v23);
                    CFRelease(v23);
                    v17 = (v22 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                    if (v18 == ++v20)
                      goto LABEL_38;
                  }
                  v24 = scn_default_log();
                  if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 67109888;
                    v48 = v20;
                    v49 = 1024;
                    *(_DWORD *)v50 = v16;
                    *(_WORD *)&v50[4] = 2048;
                    *(_QWORD *)&v50[6] = v22;
                    *(_WORD *)&v50[14] = 2048;
                    *(_QWORD *)&v50[16] = v8;
                    _os_log_error_impl(&dword_1DCCB8000, v24, OS_LOG_TYPE_ERROR, "Error: overflow reading slice[%d] / mip[%d] (%zu > %zu)", buf, 0x22u);
                  }
LABEL_38:
                  ++v16;
                  v7 = 1;
                  if (v16 == v46)
                    goto LABEL_49;
                }
                v43 = scn_default_log();
                if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 67109632;
                  v48 = v16;
                  v49 = 2048;
                  *(_QWORD *)v50 = v17;
                  *(_WORD *)&v50[8] = 2048;
                  *(_QWORD *)&v50[10] = v8;
                  _os_log_error_impl(&dword_1DCCB8000, v43, OS_LOG_TYPE_ERROR, "Error: overflow reading mip[%d] (%zu > %zu)", buf, 0x1Cu);
                }
                v7 = 1;
                goto LABEL_49;
              }
              v44 = scn_default_log();
              if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
              {
                v45 = *(_DWORD *)TextureRawData;
                *(_DWORD *)buf = 67109120;
                v48 = v45;
                _os_log_impl(&dword_1DCCB8000, v44, OS_LOG_TYPE_DEFAULT, "Warning: Compression type %d not supported", buf, 8u);
              }
            }
            else
            {
              v34 = scn_default_log();
              if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
                _loadKTX_cold_1(v34, v35, v36, v37, v38, v39, v40, v41);
            }
            _C3DImageDeleteTextureRawDataIfNeeded(a1);
          }
          else
          {
            v26 = scn_default_log();
            if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
              _loadKTX_cold_2(v26, v27, v28, v29, v30, v31, v32, v33);
          }
        }
      }
      else
      {
        v6 = scn_default_log();
        v7 = 0;
        if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
LABEL_49:
          CFRelease(v4);
          goto LABEL_50;
        }
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1DCCB8000, v6, OS_LOG_TYPE_DEFAULT, "Warning: KTX file seems too small or is not a KTX", buf, 2u);
      }
      v7 = 0;
      goto LABEL_49;
    }
  }
  v7 = 0;
LABEL_50:
  kdebug_trace();
  return v7;
}

uint64_t _createKTXDataRepresentation(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  signed int v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  __int128 v12;
  uint64_t v13;
  signed int v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  int v21;
  int v22;
  int v23;
  void *v24;
  void *v25;
  uint64_t v26;
  int v27;
  uint64_t i;
  NSObject *v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  uint32x2_t v34[3];
  uint64_t v35;
  __int128 v36;
  unsigned int v37;
  _QWORD v38[6];
  _QWORD v39[3];
  __int128 v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  __int128 v44;
  _OWORD v45[2];
  uint64_t v46;

  v1 = a1;
  v46 = *MEMORY[0x1E0C80C00];
  v2 = objc_msgSend(a1, "width");
  v3 = objc_msgSend(v1, "height");
  v4 = objc_msgSend(v1, "depth");
  if (objc_msgSend(v1, "textureType") == 5)
    v5 = 6;
  else
    v5 = 1;
  v6 = objc_msgSend(v1, "mipmapLevelCount");
  v35 = v6;
  if (objc_msgSend(v1, "storageMode") == 2)
  {
    v32 = v3;
    v33 = v2;
    v7 = objc_alloc_init(MEMORY[0x1E0CC6BB0]);
    objc_msgSend(v7, "setTextureType:", objc_msgSend(v1, "textureType"));
    objc_msgSend(v7, "setPixelFormat:", objc_msgSend(v1, "pixelFormat"));
    objc_msgSend(v7, "setWidth:", objc_msgSend(v1, "width"));
    objc_msgSend(v7, "setHeight:", objc_msgSend(v1, "height"));
    objc_msgSend(v7, "setDepth:", objc_msgSend(v1, "depth"));
    objc_msgSend(v7, "setMipmapLevelCount:", objc_msgSend(v1, "mipmapLevelCount"));
    objc_msgSend(v7, "setUsage:", 0);
    v8 = (void *)objc_msgSend((id)objc_msgSend(v1, "device"), "newTextureWithDescriptor:", v7);
    v9 = (void *)objc_msgSend((id)objc_msgSend(v1, "device"), "newCommandQueue");
    v10 = (void *)objc_msgSend(v9, "commandBuffer");
    v11 = (void *)objc_msgSend(v10, "blitCommandEncoder");
    if (v6)
    {
      v13 = 0;
      *(_QWORD *)&v12 = __PAIR64__(v32, v33);
      v14 = v4;
      do
      {
        v15 = 0;
        *(_OWORD *)v34[0].i8 = v12;
        *(_QWORD *)&v16 = (int)v12;
        *((_QWORD *)&v16 + 1) = SDWORD1(v12);
        v36 = v16;
        v17 = v14;
        do
        {
          v40 = v36;
          v41 = v17;
          v42 = 0;
          v43 = 0;
          *(_QWORD *)&v44 = 0;
          memset(v39, 0, sizeof(v39));
          objc_msgSend(v11, "copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:", v1, v15, v13, &v42, &v40, v8, v15, v13, v39);
          ++v15;
        }
        while (v5 != v15);
        *((uint32x2_t *)&v12 + 1) = v34[1];
        *(uint32x2_t *)&v12 = vshl_u32(v34[0], (uint32x2_t)vcgt_s32((int32x2_t)v34[0], (int32x2_t)0x100000001));
        v14 = v17 >> ((int)v17 > 1);
        ++v13;
        v6 = v35;
      }
      while (v13 != v35);
    }
    objc_msgSend(v11, "endEncoding");
    objc_msgSend(v10, "commit");
    objc_msgSend(v10, "waitUntilCompleted");

    v1 = v8;
    v3 = v32;
    v2 = v33;
  }
  memset(v45, 0, sizeof(v45));
  v44 = 0u;
  v42 = 0xBB31312058544BABLL;
  v43 = 0x40302010A1A0A0DLL;
  v18 = objc_msgSend(v1, "pixelFormat");
  v19 = v18;
  if (v18 > 79)
  {
    switch(v18)
    {
      case 'P':
        v20 = xmmword_1DD009600;
        goto LABEL_24;
      case 's':
        v20 = xmmword_1DD009630;
        v23 = 8;
        goto LABEL_26;
      case 'Q':
        v20 = xmmword_1DD009650;
        goto LABEL_24;
    }
LABEL_37:
    v31 = scn_default_log();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      _createKTXDataRepresentation_cold_1(v19);
    return 0;
  }
  switch(v18)
  {
    case 10:
      v20 = xmmword_1DD009620;
      v21 = 1;
      break;
    case 25:
      v20 = xmmword_1DD009610;
      v21 = 2;
      break;
    case 71:
      v20 = xmmword_1DD009640;
LABEL_24:
      v23 = 4;
LABEL_26:
      v37 = v23;
      v22 = 6408;
      goto LABEL_27;
    default:
      goto LABEL_37;
  }
  v37 = v21;
  v22 = 6403;
LABEL_27:
  v44 = v20;
  LODWORD(v45[0]) = v22;
  if (objc_msgSend(v1, "textureType") != 2 && objc_msgSend(v1, "textureType") != 5)
  {
    v30 = scn_default_log();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      _createKTXDataRepresentation_cold_2(v1);
    return 0;
  }
  DWORD1(v45[0]) = objc_msgSend(v1, "width");
  DWORD2(v45[0]) = objc_msgSend(v1, "height");
  *(_QWORD *)((char *)v45 + 12) = 0;
  *(_QWORD *)((char *)&v45[1] + 4) = __PAIR64__(v6, v5);
  v24 = (void *)objc_msgSend(MEMORY[0x1E0C99DF0], "dataWithCapacity:", 0);
  objc_msgSend(v24, "appendBytes:length:", &v42, 64);
  v25 = malloc_type_malloc(v3 * v2 * v37, 0x55733F60uLL);
  if (v6)
  {
    v26 = 0;
    v27 = v3;
    do
    {
      LODWORD(v39[0]) = v2 * v37 * v27;
      objc_msgSend(v24, "appendBytes:length:", v39, 4);
      for (i = 0; i != v5; ++i)
      {
        memset(v38, 0, 24);
        v38[3] = (int)v2;
        v38[4] = v27;
        v38[5] = 1;
        objc_msgSend(v1, "getBytes:bytesPerRow:bytesPerImage:fromRegion:mipmapLevel:slice:", v25, (int)(v2 * v37), LODWORD(v39[0]), v38, v26, i);
        objc_msgSend(v24, "appendBytes:length:", v25, LODWORD(v39[0]));
      }
      LODWORD(v2) = v2 >> ((int)v2 > 1);
      v27 = v27 >> (v27 > 1);
      ++v26;
    }
    while (v26 != v35);
  }
  free(v25);
  return objc_msgSend(v24, "copy");
}

void OUTLINED_FUNCTION_0_6(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x12u);
}

void _C3DRendererElementFinalize(uint64_t a1)
{
  uint64_t SharedInstance;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  CFTypeID v7;
  CFTypeID v8;
  const void *v9;
  const void *v10;

  SharedInstance = C3DNotificationCenterGetSharedInstance();
  C3DNotificationCenterPostNotification(SharedInstance, CFSTR("kC3DNotificationRendererElementWillDie"), (const void *)a1, 0, 1u);
  v3 = *(const void **)(a1 + 32);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 32) = 0;
  }
  v4 = *(const void **)(a1 + 16);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 16) = 0;
  }
  v5 = *(const void **)(a1 + 24);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(a1 + 24) = 0;
  }
  v6 = *(const void **)(a1 + 48);
  if (v6)
  {
    v7 = CFGetTypeID(*(CFTypeRef *)(a1 + 48));
    if (v7 == C3DMeshElementGetTypeID() || (v8 = CFGetTypeID(v6), v8 == CFNumberGetTypeID()))
    {
      v9 = *(const void **)(a1 + 48);
      if (v9)
      {
        CFRelease(v9);
        *(_QWORD *)(a1 + 48) = 0;
      }
    }
  }
  v10 = *(const void **)(a1 + 40);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(a1 + 40) = 0;
  }
}

__C3DMesh *C3DGeometryOsdGetCPUSubdividedC3DMesh(uint64_t a1)
{
  __C3DMesh *v2;
  __C3DMesh *Mesh;
  char v4;
  unsigned int *Refiner;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int v14;
  double v15;
  float32x4_t v16;
  float32x4_t v17;
  __C3DMesh *v18;
  char v20;
  int *v21;
  _OWORD v22[3];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  C3DSubdivInitializeIfNeeded();
  v2 = *(__C3DMesh **)(a1 + 160);
  if (v2)
    return v2;
  Mesh = (__C3DMesh *)C3DGeometryGetMesh(a1);
  v2 = Mesh;
  v4 = *(_BYTE *)(a1 + 136);
  if (!v4)
  {
    v18 = (__C3DMesh *)CFRetain(Mesh);
    v2 = v18;
LABEL_13:
    *(_QWORD *)(a1 + 160) = v18;
    return v2;
  }
  kdebug_trace();
  if (!C3DGeometryInitSubdivTopologyInfoIfNeeded((__C3DGeometry *)a1))
  {
    v18 = (__C3DMesh *)CFRetain(v2);
    goto LABEL_13;
  }
  C3DGeometrySubdivTopologyInfoInitCreasesAndCorners((_QWORD *)(a1 + 136), (uint64_t)v2);
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v28 = 0u;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v23 = 0u;
  memset(v22, 0, sizeof(v22));
  C3DSubdivInitCPUPrimvarContext((uint64_t)v22, a1 + 136, (uint64_t)v2);
  Refiner = (unsigned int *)C3DSubdivCreateRefiner(a1 + 136);
  v12 = (int *)Refiner;
  if (*((_QWORD *)&v23 + 1) != (_QWORD)v23 || *(_BYTE *)(a1 + 141) == 2)
    v14 = 32;
  else
    v14 = 0;
  OpenSubdiv::v3_1_1::Far::TopologyRefiner::RefineUniform(Refiner, v14 & 0xFFFFFFF0 | v4 & 0xF, v6, v7, v8, v9, v10, v11, v20);
  v21 = v12;
  C3DSubdivFeedCPUPrimvar((uint64_t)v22, a1 + 136, (uint64_t)v12);
  C3DSubdivInterpolateCPUPrimvar((uint64_t)v22, v15, v16, v17, a1 + 136, (uint64_t)v12, &v21);
  *(_QWORD *)(a1 + 160) = C3DSubdivCreateMesh(v22, a1 + 136, (uint64_t)v12, (uint64_t *)&v21, v2);
  OpenSubdiv::v3_1_1::Far::TopologyRefiner::~TopologyRefiner((OpenSubdiv::v3_1_1::Far::TopologyRefiner *)v12);
  MEMORY[0x1DF0D41C0]();
  C3DSceneSourcePerformConsistencyCheck(v22);
  kdebug_trace();
  C3DSubdivCPUPrimvarContext::~C3DSubdivCPUPrimvarContext((C3DSubdivCPUPrimvarContext *)v22);
  return *(__C3DMesh **)(a1 + 160);
}

void C3DSubdivCPUPrimvarContext::~C3DSubdivCPUPrimvarContext(C3DSubdivCPUPrimvarContext *this)
{
  void *v2;
  void *v3;
  void **v4;

  v4 = (void **)((char *)this + 216);
  std::vector<C3DSubdivCPUPrimvarDataGroup>::__destroy_vector::operator()[abi:nn180100](&v4);
  v4 = (void **)((char *)this + 192);
  _ZNSt3__16vectorI23C3DSubdivCPUPrimvarDataIDv4_fENS_9allocatorIS3_EEE16__destroy_vectorclB8nn180100Ev(&v4);
  v4 = (void **)((char *)this + 168);
  _ZNSt3__16vectorI23C3DSubdivCPUPrimvarDataIDv4_fENS_9allocatorIS3_EEE16__destroy_vectorclB8nn180100Ev(&v4);
  v4 = (void **)((char *)this + 144);
  _ZNSt3__16vectorI23C3DSubdivCPUPrimvarDataIDv4_fENS_9allocatorIS3_EEE16__destroy_vectorclB8nn180100Ev(&v4);
  v4 = (void **)((char *)this + 120);
  _ZNSt3__16vectorI23C3DSubdivCPUPrimvarDataIDv4_fENS_9allocatorIS3_EEE16__destroy_vectorclB8nn180100Ev(&v4);
  v4 = (void **)((char *)this + 96);
  _ZNSt3__16vectorI23C3DSubdivCPUPrimvarDataIDv4_fENS_9allocatorIS3_EEE16__destroy_vectorclB8nn180100Ev(&v4);
  v4 = (void **)((char *)this + 72);
  _ZNSt3__16vectorI23C3DSubdivCPUPrimvarDataIDv4_fENS_9allocatorIS3_EEE16__destroy_vectorclB8nn180100Ev(&v4);
  v4 = (void **)((char *)this + 48);
  std::vector<C3DSubdivCPUFVarPrimvarInfo>::__destroy_vector::operator()[abi:nn180100](&v4);
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  v3 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v3;
    operator delete(v3);
  }
}

void std::vector<C3DSubdivCPUPrimvarDataGroup>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 9;
        std::allocator<C3DSubdivCPUPrimvarDataGroup>::destroy[abi:nn180100]((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<C3DSubdivCPUPrimvarDataGroup>::destroy[abi:nn180100](uint64_t a1, void **a2)
{
  void **v3;

  v3 = a2 + 6;
  _ZNSt3__16vectorI23C3DSubdivCPUPrimvarDataIDv4_fENS_9allocatorIS3_EEE16__destroy_vectorclB8nn180100Ev(&v3);
  v3 = a2 + 3;
  _ZNSt3__16vectorI23C3DSubdivCPUPrimvarDataIDv4_fENS_9allocatorIS3_EEE16__destroy_vectorclB8nn180100Ev(&v3);
  v3 = a2;
  _ZNSt3__16vectorI23C3DSubdivCPUPrimvarDataIDv4_fENS_9allocatorIS3_EEE16__destroy_vectorclB8nn180100Ev(&v3);
}

void _ZNSt3__16vectorI23C3DSubdivCPUPrimvarDataIDv4_fENS_9allocatorIS3_EEE16__destroy_vectorclB8nn180100Ev(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 112;
        _ZNSt3__19allocatorI23C3DSubdivCPUPrimvarDataIDv4_fEE7destroyB8nn180100EPS3_((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void _ZNSt3__19allocatorI23C3DSubdivCPUPrimvarDataIDv4_fEE7destroyB8nn180100EPS3_(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;

  v3 = *(void **)(a2 + 48);
  if (v3)
  {
    *(_QWORD *)(a2 + 56) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a2 + 24);
  if (v4)
  {
    *(_QWORD *)(a2 + 32) = v4;
    operator delete(v4);
  }
  v5 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v5;
    operator delete(v5);
  }
}

void std::vector<C3DSubdivCPUFVarPrimvarInfo>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<C3DSubdivCPUFVarPrimvarInfo>::__clear[abi:nn180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<C3DSubdivCPUFVarPrimvarInfo>::__clear[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 32)
  {
    v4 = *(void **)(i - 24);
    if (v4)
    {
      *(_QWORD *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

CFStringRef _C3DRendererElementStateCFCopyFormatDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DRendererElementState>"));
}

CFStringRef _C3DRendererElementStateCFCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DRendererElementState>"));
}

uint64_t C3DRendererElementStateBeginProcessing(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t RendererContextGL;
  uint64_t Scene;
  uint64_t LightingSystem;

  RendererContextGL = C3DEngineContextGetRendererContextGL(a3);
  C3DRendererElementStateReset(a1, a3);
  Scene = C3DEngineContextGetScene(a3);
  *(_DWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 16) = RendererContextGL;
  *(_QWORD *)(a1 + 24) = C3DEngineContextGetResourceManager(a3);
  LightingSystem = C3DSceneGetLightingSystem(Scene);
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = LightingSystem;
  *(_QWORD *)(a1 + 48) = 0;
  return C3DSceneSourcePerformConsistencyCheck(LightingSystem);
}

void C3DRendererElementStateReset(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t RendererContextGL;
  const void *v13;

  if (!a2)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DEngineContextGetStats_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  RendererContextGL = C3DEngineContextGetRendererContextGL(a2);
  C3DRendererContextUnbindBufferObjects(RendererContextGL);
  __RendererElementStateUnbindLastUsedCommonProfile(a1, 1);
  C3DRendererContextBindProgramObject(RendererContextGL, 0);
  v13 = *(const void **)(a1 + 328);
  if (v13)
  {
    CFRelease(v13);
    *(_QWORD *)(a1 + 328) = 0;
  }
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_DWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 412) = -1;
  *(_QWORD *)(a1 + 424) = -1;
  if (!*(_DWORD *)(a1 + 404))
    C3DRendererContextSetEnableWriteToDepth(RendererContextGL, 1);
  *(_DWORD *)(a1 + 404) = -1;
  if (!*(_DWORD *)(a1 + 408))
    C3DRendererContextSetEnableReadsFromDepth(RendererContextGL, 1);
  *(_DWORD *)(a1 + 408) = -1;
  *(_DWORD *)(a1 + 420) = 0;
}

void __RendererElementStateUnbindLastUsedCommonProfile(uint64_t a1, int a2)
{
  uint64_t v3;

  if (a2)
  {
    v3 = *(_QWORD *)(a1 + 56);
    if (v3)
    {
      C3DRendererContextUnbindCommonProfile(*(_QWORD *)(a1 + 16), v3, a1 + 64);
      C3DRendererContextUnbindTextureUnits(*(_QWORD *)(a1 + 16));
      *(_QWORD *)(a1 + 56) = 0;
    }
  }
  *(_DWORD *)(a1 + 400) = 0;
}

void C3DRendererElementStateEndProcessing(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t RendererContextGL;
  uint64_t v22;
  uint64_t v23;

  if (!a1 && (v5 = scn_default_log(), os_log_type_enabled(v5, OS_LOG_TYPE_FAULT)))
  {
    C3DRendererElementStateCreate_cold_1(v5, v6, v7, v8, v9, v10, v11, v12);
    if (a3)
      goto LABEL_6;
  }
  else if (a3)
  {
    goto LABEL_6;
  }
  v13 = scn_default_log();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
    C3DEngineContextGetStats_cold_1(v13, v14, v15, v16, v17, v18, v19, v20);
LABEL_6:
  RendererContextGL = C3DEngineContextGetRendererContextGL(a3);
  C3DRendererElementStateReset(a1, a3);
  v22 = C3DBlendStatesDefaultReplace();
  C3DRendererContextSetBlendStates(RendererContextGL, v22);
  C3DLightingSystemEndProcessing(*(_QWORD *)(a1 + 40), a3, v23);
  *(_QWORD *)(a1 + 48) = 0;
}

uint64_t __getShaderModifierOwner(uint64_t a1, int a2)
{
  if (a2 == 1)
    return C3DRendererElementGetGeometry(a1);
  if (a2)
    return 0;
  return C3DRendererElementGetMaterial(a1);
}

void __UpdateMatrixUniforms(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float32x4_t *Matrix4x4;
  simd_float4 *v8;
  simd_float4 v9;
  simd_float4 v10;
  simd_float4 v11;
  float32x4_t *v12;
  uint64_t Node;
  uint64_t v14;
  uint64_t Skinner;
  uint64_t v16;
  uint64_t JointMatrices;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int32x4_t v26;
  int32x4_t v27;
  float32x2x2_t v28;
  float32x2x2_t v29;
  int32x4_t v30;
  int32x4_t v31;
  float *v32;
  float *v33;
  uint64_t UniformLocation;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  float v49;
  int v50;
  _QWORD *FXContext;
  float v52;
  GLfloat v53[8];
  _OWORD v54[2];
  uint64_t v55;
  simd_float4x4 value;
  simd_float4x4 v57;
  simd_float4x4 v58;
  simd_float4x4 v59;

  memset(&v59, 0, sizeof(v59));
  memset(&v58, 0, sizeof(v58));
  memset(&v57, 0, sizeof(v57));
  v4 = a1[2];
  v5 = a1[4];
  v6 = a1[42];
  Matrix4x4 = (float32x4_t *)C3DEngineContextGetMatrix4x4(v5, 1);
  v8 = (simd_float4 *)C3DEngineContextGetMatrix4x4(v5, 2);
  v9 = v8[3];
  v11 = *v8;
  v10 = v8[1];
  value.columns[2] = v8[2];
  value.columns[3] = v9;
  value.columns[0] = v11;
  value.columns[1] = v10;
  v12 = (float32x4_t *)C3DEngineContextGetMatrix4x4(v5, 0);
  Node = C3DRendererElementGetNode(a2);
  if (Node)
  {
    v14 = Node;
    Skinner = C3DNodeGetSkinner(Node);
    if (Skinner)
    {
      v16 = Skinner;
      if (C3DSkinnerGetEffectiveCalculationMode(Skinner, *(__C3DGeometry **)(v14 + 240)) == 3)
      {
        v55 = 0;
        JointMatrices = C3DSkinnerGetJointMatrices(v16, &v55);
        if (v55 != 3)
        {
          v18 = scn_default_log();
          if (os_log_type_enabled(v18, OS_LOG_TYPE_FAULT))
            __UpdateMatrixUniforms_cold_1(v18, v19, v20, v21, v22, v23, v24, v25);
        }
        v26 = *(int32x4_t *)(JointMatrices + 16);
        v27 = *(int32x4_t *)(JointMatrices + 32);
        v28 = (float32x2x2_t)vzip1q_s32(*(int32x4_t *)JointMatrices, v27);
        v29 = (float32x2x2_t)vzip2q_s32(*(int32x4_t *)JointMatrices, v27);
        v30 = vzip1q_s32(v26, (int32x4_t)0);
        v31 = vzip2q_s32(v26, (int32x4_t)xmmword_1DD007610);
        v32 = v53;
        vst2_f32(v32, v28);
        v32 += 4;
        *(int32x4_t *)v32 = vzip2q_s32((int32x4_t)v28, v30);
        v33 = (float *)v54;
        vst2_f32(v33, v29);
        v54[1] = vzip2q_s32((int32x4_t)v29, v31);
        C3DMatrix4x4Mult((uint64_t)v53, (float32x4_t *)&value, &value);
      }
    }
  }
  UniformLocation = C3DFXGLSLProgramObjectGetUniformLocation(v6, 2);
  if (UniformLocation != -1)
    C3DRendererContextSetMatrix4x4UniformAtLocation(v4, UniformLocation, (GLfloat *)&value, 1);
  v35 = C3DFXGLSLProgramObjectGetUniformLocation(v6, 3);
  if (v35 != -1)
  {
    v36 = v35;
    C3DMatrix4x4Invert(&value, &v58);
    C3DRendererContextSetMatrix4x4UniformAtLocation(v4, v36, (GLfloat *)&v58, 1);
  }
  v37 = C3DFXGLSLProgramObjectGetUniformLocation(v6, 4);
  C3DMatrix4x4Mult((uint64_t)&value, Matrix4x4, &v57);
  if (v37 != -1)
    C3DRendererContextSetMatrix4x4UniformAtLocation(v4, v37, (GLfloat *)&v57, 1);
  v38 = C3DFXGLSLProgramObjectGetUniformLocation(v6, 5);
  if (v38 != -1)
  {
    v39 = v38;
    C3DMatrix4x4Invert(&v57, &v58);
    C3DRendererContextSetMatrix4x4UniformAtLocation(v4, v39, (GLfloat *)&v58, 1);
  }
  v40 = C3DFXGLSLProgramObjectGetUniformLocation(v6, 7);
  if (v40 != -1)
  {
    v41 = v40;
    C3DMatrix4x4Mult((uint64_t)&v57, v12, &v59);
    C3DRendererContextSetMatrix4x4UniformAtLocation(v4, v41, (GLfloat *)&v59, 1);
  }
  v42 = C3DFXGLSLProgramObjectGetUniformLocation(v6, 8);
  if (v42 != -1)
  {
    v43 = v42;
    C3DMatrix4x4Mult((uint64_t)&v57, v12, &v59);
    C3DMatrix4x4Invert(&v59, &v58);
    C3DRendererContextSetMatrix4x4UniformAtLocation(v4, v43, (GLfloat *)&v58, 1);
  }
  v44 = C3DFXGLSLProgramObjectGetUniformLocation(v6, 6);
  if (v44 != -1)
  {
    v45 = v44;
    C3DMatrix4x4ComputeNormalMatrix((__n128 *)&v57, &v58);
    C3DRendererContextSetMatrix4x4UniformAtLocation(v4, v45, (GLfloat *)&v58, 1);
  }
  v46 = C3DFXGLSLProgramObjectGetUniformLocation(v6, 188);
  if (v46 != -1)
  {
    v47 = v46;
    v48 = C3DMatrix4x4Determinant3x3((uint64_t)&value);
    v49 = *(float *)&v48;
    v50 = *(float *)&v48 > 0.0;
    FXContext = (_QWORD *)C3DEngineContextGetFXContext(a1[4]);
    if (FXContext)
      v50 = (v49 > 0.0) ^ (C3DFXContextGetMirrorNode(FXContext) != 0);
    v52 = -1.0;
    if (v50)
      v52 = 1.0;
    v53[0] = v52;
    C3DRendererContextSetFloatUniformAtLocation(v4, v47, v53, 1);
  }
}

_QWORD *__BindValueForSymbol(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t UserInfo;
  _QWORD *result;
  uint64_t ProgramID;
  uint64_t Node;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t);

  v5 = *a3;
  v6 = a3[1];
  v8 = a3[2];
  v7 = a3[3];
  UserInfo = C3DFXProgramDelegateGetUserInfo(v6);
  result = (_QWORD *)C3DFXProgramDelegateGetCallbacks(v6);
  if (result)
  {
    result = (_QWORD *)*result;
    if (result)
    {
      v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))result;
      ProgramID = C3DFXGLSLProgramObjectGetProgramID(v8);
      Node = C3DRendererElementGetNode(v7);
      return (_QWORD *)v13(v5, a1, ProgramID, (a2 - 1), Node, UserInfo);
    }
  }
  return result;
}

uint64_t __UnbindValueForSymbol(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t UserInfo;
  uint64_t result;
  uint64_t ProgramID;
  uint64_t Node;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t);

  v5 = *a3;
  v6 = a3[1];
  v8 = a3[2];
  v7 = a3[3];
  UserInfo = C3DFXProgramDelegateGetUserInfo(v6);
  result = C3DFXProgramDelegateGetCallbacks(v6);
  if (result)
  {
    result = *(_QWORD *)(result + 8);
    if (result)
    {
      v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))result;
      ProgramID = C3DFXGLSLProgramObjectGetProgramID(v8);
      Node = C3DRendererElementGetNode(v7);
      return v13(v5, a1, ProgramID, (a2 - 1), Node, UserInfo);
    }
  }
  return result;
}

uint64_t C3DRendererElementStateBindProgramRendererElement(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t MaterialForRenderPass;
  uint64_t Technique;
  uint64_t SingleProgram;
  int Profile;
  uint64_t CommonProfile;
  uint64_t ProgramHashCodeStore;
  unsigned int PreferredRenderMode;
  uint64_t ProgramHashCodeForRenderElement;
  _BOOL4 HasShaderModifiers;
  _BYTE *v25;
  _BYTE *v26;
  int v27;
  char v28;
  char v29;
  const __CFArray *ShaderModifiers;
  const __CFArray *v31;
  NSObject *v32;
  CFIndex Count;
  CFIndex v34;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t v37;
  float32x2_t *v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  float v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  _BOOL4 v47;
  int v48;
  char v49;
  uint64_t v50;
  char v51;
  uint64_t ShaderModifierOwner;
  char v53;
  uint64_t v54;
  int v55;
  const void *v56;
  float v57;
  int v58;
  _QWORD *ProgramResident;
  const void *v60;
  void *v61;
  void *v62;
  CFTypeRef v63;
  _BOOL4 v64;
  uint64_t v65;
  char v66;
  uint64_t UniformLocation;
  uint64_t v68;
  float32x4_t *PointOfView;
  double ZFar;
  GLfloat v71;
  uint64_t v72;
  uint64_t v73;
  float PointOfViewScale;
  uint64_t Scene;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  double SystemTime;
  double v84;
  float v85;
  uint64_t v86;
  uint64_t v87;
  __n128 Viewport;
  uint64_t v94;
  uint64_t v95;
  GLfloat *Matrix4x4;
  uint64_t v97;
  uint64_t v98;
  simd_float4x4 *v99;
  uint64_t v100;
  uint64_t v101;
  simd_float4x4 *v102;
  uint64_t v103;
  uint64_t v104;
  GLfloat *v105;
  uint64_t v106;
  uint64_t v107;
  simd_float4x4 *v108;
  uint64_t v109;
  uint64_t v110;
  simd_float4 *v111;
  simd_float4 v112;
  simd_float4 v113;
  simd_float4 v114;
  __n128 *v115;
  int v116;
  GLfloat v117;
  int BlendMode;
  uint64_t v119;
  _BOOL4 v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  float32x4_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t Skinner;
  uint64_t v134;
  __C3DGeometry *Geometry;
  uint64_t JointMatrices;
  GLfloat *v137;
  uint64_t v138;
  uint64_t Mesh;
  int v140;
  uint64_t RasterizerStates;
  int HasConstantAlpha;
  __int16 v144;
  uint64_t v145;
  __int16 v146;
  _BYTE *v147;
  int TransparencyMode;
  float ConstantAlpha;
  uint64_t EffectSlot;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  int v162;
  uint64_t v163;
  __int16 v164;
  uint64_t v165;
  __int16 v166;
  uint64_t v167;
  __int16 v168;
  uint64_t v169;
  __int16 v170;
  uint64_t v171;
  __int16 v172;
  uint64_t v173;
  __int16 v174;
  uint64_t v175;
  __int16 v176;
  uint64_t v177;
  __int16 v178;
  uint64_t v179;
  __int16 v180;
  uint64_t v181;
  __int16 v182;
  uint64_t v183;
  __int16 v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  int v189;
  char v190;
  _BOOL4 v191;
  uint64_t v192;
  uint64_t v193;
  int v194;
  int v195;
  _BOOL4 v196;
  uint64_t v197;
  uint64_t Node;
  __n128 *v199;
  simd_float4x4 value;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  void *v211;
  GLfloat v[4];
  uint8_t v213[4];
  _QWORD v214[3];

  *(_QWORD *)((char *)&v214[1] + 4) = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    v8 = scn_default_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      _C3DRendererElementSync_cold_1(v8, v9, v10, v11, v12, v13, v14, v15);
  }
  *(_QWORD *)(a1 + 48) = a2;
  MaterialForRenderPass = C3DRendererElementGetMaterialForRenderPass(a2, (uint64_t)a4);
  Technique = C3DMaterialGetTechnique(MaterialForRenderPass);
  *(_QWORD *)(a1 + 368) = Technique;
  if (Technique)
  {
    SingleProgram = C3DFXTechniqueGetSingleProgram(Technique);
    Profile = C3DFXProgramGetProfile(SingleProgram);
    CommonProfile = 0;
    *(_DWORD *)(a1 + 384) = Profile;
  }
  else
  {
    *(_DWORD *)(a1 + 384) = 0;
    CommonProfile = C3DMaterialGetCommonProfile(MaterialForRenderPass);
  }
  *(_QWORD *)(a1 + 376) = CommonProfile;
  ProgramHashCodeStore = C3DEngineContextGetProgramHashCodeStore(a3);
  PreferredRenderMode = C3DEngineContextGetPreferredRenderMode(a3);
  ProgramHashCodeForRenderElement = C3DProgramHashCodeStoreGetProgramHashCodeForRenderElement(ProgramHashCodeStore, (unsigned __int16 *)a2, a4, PreferredRenderMode);
  *(_QWORD *)(a1 + 392) = ProgramHashCodeForRenderElement;
  if (ProgramHashCodeForRenderElement)
  {
    HasShaderModifiers = C3DProgramHashCodeHasShaderModifiers(ProgramHashCodeForRenderElement);
    v25 = (_BYTE *)(a1 + 389);
    *(_BYTE *)(a1 + 389) = HasShaderModifiers;
    v26 = (_BYTE *)(a1 + 390);
    *(_BYTE *)(a1 + 390) = 0;
    if (HasShaderModifiers)
    {
      v27 = 0;
      v28 = 1;
      do
      {
        v29 = v28;
        ShaderModifiers = (const __CFArray *)C3DProgramHashCodeGetShaderModifiers(*(_QWORD *)(a1 + 392), v27);
        if (ShaderModifiers)
        {
          v31 = ShaderModifiers;
          if (!CFArrayGetCount(ShaderModifiers))
          {
            v32 = scn_default_log();
            if (os_log_type_enabled(v32, OS_LOG_TYPE_FAULT))
              C3DRendererElementStateBindProgramRendererElement_cold_1(v213, v214, v32);
          }
          Count = CFArrayGetCount(v31);
          if (Count >= 1)
          {
            v34 = Count;
            for (i = 0; i != v34; ++i)
            {
              ValueAtIndex = CFArrayGetValueAtIndex(v31, i);
              *v26 |= C3DShaderModifierGetFlags((uint64_t)ValueAtIndex) & 1;
            }
          }
        }
        v28 = 0;
        v27 = 1;
      }
      while ((v29 & 1) != 0);
      v25 = (_BYTE *)(a1 + 389);
    }
  }
  else
  {
    v25 = (_BYTE *)(a1 + 389);
    *(_WORD *)(a1 + 389) = 0;
    v26 = (_BYTE *)(a1 + 390);
  }
  v37 = *(_QWORD *)(a1 + 32);
  v38 = *(float32x2_t **)(a1 + 16);
  v197 = *(_QWORD *)(a1 + 24);
  v39 = C3DEngineContextGetProgramHashCodeStore(v37);
  if (a4)
    v40 = C3DFXPassRequiresLighting((uint64_t)a4);
  else
    v40 = 1;
  v41 = C3DEngineContextGetPreferredRenderMode(v37);
  v42 = C3DProgramHashCodeStoreGetProgramHashCodeForRenderElement(v39, (unsigned __int16 *)a2, a4, v41);
  v43 = 1.0;
  Node = C3DRendererElementGetNode(a2);
  if (Node && !*v26)
  {
    C3DNodeGetWorldAlpha(Node);
    if (v57 == 0.0)
      return 0;
    v43 = v57;
  }
  v44 = C3DRendererElementGetMaterialForRenderPass(a2, (uint64_t)a4);
  if (!v44)
  {
    __RendererElementStateUnbindLastUsedCommonProfile(a1, 1);
    if (*(_QWORD *)(a1 + 328))
    {
      C3DRendererContextUnbindProgramObject((uint64_t)v38);
      v56 = *(const void **)(a1 + 328);
      if (v56)
      {
        CFRelease(v56);
        *(_QWORD *)(a1 + 328) = 0;
      }
      *(_QWORD *)(a1 + 336) = 0;
    }
    goto LABEL_140;
  }
  v211 = 0;
  v192 = v44;
  v199 = (__n128 *)v37;
  if (C3DMaterialGetTechnique(v44))
  {
    v45 = 0;
    v46 = 0;
    v190 = 0;
    v196 = 0;
    v194 = 0;
LABEL_28:
    v47 = 0;
    goto LABEL_29;
  }
  if (!v42)
    return 0;
  v46 = C3DMaterialGetCommonProfile(v192);
  v58 = C3DProgramHashCodeNeedTangents(v42);
  v196 = v40
      && C3DEffectCommonProfileGetLightingModel(v46) != 4
      && C3DEffectCommonProfileGetLightingModel(v46) != 0;
  HasConstantAlpha = C3DProgramHashCodeHasConstantAlpha(v42);
  if (a4 && HasConstantAlpha)
    HasConstantAlpha = C3DFXPassHasConstantAlpha((uint64_t)a4);
  v190 = HasConstantAlpha;
  if (!*v25 && (v43 < 1.0 || (C3DEffectCommonProfileIsOpaque(v46) & HasConstantAlpha & 1) == 0))
  {
    v147 = v25;
    TransparencyMode = C3DEffectCommonProfileGetTransparencyMode(v46);
    ConstantAlpha = C3DEffectCommonProfileGetConstantAlpha((float *)v46);
    _ZF = TransparencyMode == 1;
    v25 = v147;
    if (!_ZF && (float)(v43 * ConstantAlpha) <= 0.0)
      return 0;
  }
  v194 = v58;
  if (!v46)
  {
    v45 = 0;
    goto LABEL_28;
  }
  v144 = *(_WORD *)(v46 + 196);
  if ((v144 & 0x1FFF) != 1)
  {
    if ((*(_WORD *)(v46 + 196) & 0x1FFF) != 0)
    {
      if ((v144 & 2) != 0)
      {
        EffectSlot = C3DEffectCommonProfileGetEffectSlot(v46, 0, 0);
        if (EffectSlot)
          C3DRendererContextExecuteSlotTextureProxy(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), EffectSlot);
      }
      if ((*(_WORD *)(v46 + 196) & 4) != 0)
      {
        v151 = C3DEffectCommonProfileGetEffectSlot(v46, 2, 0);
        if (v151)
          C3DRendererContextExecuteSlotTextureProxy(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), v151);
      }
      if ((*(_WORD *)(v46 + 196) & 8) != 0)
      {
        v152 = C3DEffectCommonProfileGetEffectSlot(v46, 3, 0);
        if (v152)
          C3DRendererContextExecuteSlotTextureProxy(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), v152);
      }
      if ((*(_WORD *)(v46 + 196) & 0x10) != 0)
      {
        v153 = C3DEffectCommonProfileGetEffectSlot(v46, 4, 0);
        if (v153)
          C3DRendererContextExecuteSlotTextureProxy(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), v153);
      }
      if ((*(_WORD *)(v46 + 196) & 0x20) != 0)
      {
        v154 = C3DEffectCommonProfileGetEffectSlot(v46, 5, 0);
        if (v154)
          C3DRendererContextExecuteSlotTextureProxy(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), v154);
      }
      if ((*(_WORD *)(v46 + 196) & 0x40) != 0)
      {
        v155 = C3DEffectCommonProfileGetEffectSlot(v46, 6, 0);
        if (v155)
          C3DRendererContextExecuteSlotTextureProxy(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), v155);
      }
      if ((*(_WORD *)(v46 + 196) & 0x80) != 0)
      {
        v156 = C3DEffectCommonProfileGetEffectSlot(v46, 7, 0);
        if (v156)
          C3DRendererContextExecuteSlotTextureProxy(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), v156);
      }
      if ((*(_WORD *)(v46 + 196) & 0x100) != 0)
      {
        v157 = C3DEffectCommonProfileGetEffectSlot(v46, 1, 0);
        if (v157)
          C3DRendererContextExecuteSlotTextureProxy(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), v157);
      }
      if ((*(_WORD *)(v46 + 196) & 0x200) != 0)
      {
        v158 = C3DEffectCommonProfileGetEffectSlot(v46, 8, 0);
        if (v158)
          C3DRendererContextExecuteSlotTextureProxy(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), v158);
      }
      if ((*(_WORD *)(v46 + 196) & 0x400) != 0)
      {
        v159 = C3DEffectCommonProfileGetEffectSlot(v46, 9, 0);
        if (v159)
          C3DRendererContextExecuteSlotTextureProxy(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), v159);
      }
      if ((*(_WORD *)(v46 + 196) & 0x800) != 0)
      {
        v160 = C3DEffectCommonProfileGetEffectSlot(v46, 10, 0);
        if (v160)
          C3DRendererContextExecuteSlotTextureProxy(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), v160);
      }
      if ((*(_WORD *)(v46 + 196) & 0x1000) == 0)
        goto LABEL_263;
      v161 = v46;
      v162 = 11;
    }
    else
    {
      *(_WORD *)(v46 + 196) = v144 & 0xE000 | 1;
      v145 = C3DEffectCommonProfileGetEffectSlot(v46, 0, 0);
      if (v145)
      {
        if (C3DRendererContextExecuteSlotTextureProxy(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), v145))
        {
          v146 = 2;
        }
        else
        {
          v146 = 0;
        }
      }
      else
      {
        v146 = 0;
      }
      *(_WORD *)(v46 + 196) |= v146;
      v163 = C3DEffectCommonProfileGetEffectSlot(v46, 2, 0);
      if (v163)
      {
        if (C3DRendererContextExecuteSlotTextureProxy(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), v163))
        {
          v164 = 4;
        }
        else
        {
          v164 = 0;
        }
      }
      else
      {
        v164 = 0;
      }
      *(_WORD *)(v46 + 196) |= v164;
      v165 = C3DEffectCommonProfileGetEffectSlot(v46, 3, 0);
      if (v165)
      {
        if (C3DRendererContextExecuteSlotTextureProxy(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), v165))
        {
          v166 = 8;
        }
        else
        {
          v166 = 0;
        }
      }
      else
      {
        v166 = 0;
      }
      *(_WORD *)(v46 + 196) |= v166;
      v167 = C3DEffectCommonProfileGetEffectSlot(v46, 4, 0);
      if (v167)
      {
        if (C3DRendererContextExecuteSlotTextureProxy(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), v167))
        {
          v168 = 16;
        }
        else
        {
          v168 = 0;
        }
      }
      else
      {
        v168 = 0;
      }
      *(_WORD *)(v46 + 196) |= v168;
      v169 = C3DEffectCommonProfileGetEffectSlot(v46, 5, 0);
      if (v169)
      {
        if (C3DRendererContextExecuteSlotTextureProxy(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), v169))
        {
          v170 = 32;
        }
        else
        {
          v170 = 0;
        }
      }
      else
      {
        v170 = 0;
      }
      *(_WORD *)(v46 + 196) |= v170;
      v171 = C3DEffectCommonProfileGetEffectSlot(v46, 6, 0);
      if (v171)
      {
        if (C3DRendererContextExecuteSlotTextureProxy(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), v171))
        {
          v172 = 64;
        }
        else
        {
          v172 = 0;
        }
      }
      else
      {
        v172 = 0;
      }
      *(_WORD *)(v46 + 196) |= v172;
      v173 = C3DEffectCommonProfileGetEffectSlot(v46, 7, 0);
      if (v173)
      {
        if (C3DRendererContextExecuteSlotTextureProxy(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), v173))
        {
          v174 = 128;
        }
        else
        {
          v174 = 0;
        }
      }
      else
      {
        v174 = 0;
      }
      *(_WORD *)(v46 + 196) |= v174;
      v175 = C3DEffectCommonProfileGetEffectSlot(v46, 1, 0);
      if (v175)
      {
        if (C3DRendererContextExecuteSlotTextureProxy(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), v175))
        {
          v176 = 256;
        }
        else
        {
          v176 = 0;
        }
      }
      else
      {
        v176 = 0;
      }
      *(_WORD *)(v46 + 196) |= v176;
      v177 = C3DEffectCommonProfileGetEffectSlot(v46, 8, 0);
      if (v177)
      {
        if (C3DRendererContextExecuteSlotTextureProxy(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), v177))
        {
          v178 = 512;
        }
        else
        {
          v178 = 0;
        }
      }
      else
      {
        v178 = 0;
      }
      *(_WORD *)(v46 + 196) |= v178;
      v179 = C3DEffectCommonProfileGetEffectSlot(v46, 9, 0);
      if (v179)
      {
        if (C3DRendererContextExecuteSlotTextureProxy(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), v179))
        {
          v180 = 1024;
        }
        else
        {
          v180 = 0;
        }
      }
      else
      {
        v180 = 0;
      }
      *(_WORD *)(v46 + 196) |= v180;
      v181 = C3DEffectCommonProfileGetEffectSlot(v46, 10, 0);
      if (v181)
      {
        if (C3DRendererContextExecuteSlotTextureProxy(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), v181))
        {
          v182 = 2048;
        }
        else
        {
          v182 = 0;
        }
      }
      else
      {
        v182 = 0;
      }
      *(_WORD *)(v46 + 196) |= v182;
      v183 = C3DEffectCommonProfileGetEffectSlot(v46, 11, 0);
      if (v183)
      {
        if (C3DRendererContextExecuteSlotTextureProxy(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), v183))
        {
          v184 = 4096;
        }
        else
        {
          v184 = 0;
        }
      }
      else
      {
        v184 = 0;
      }
      *(_WORD *)(v46 + 196) |= v184;
      v185 = C3DEffectCommonProfileGetEffectSlot(v46, 15, 0);
      if (v185)
        C3DRendererContextExecuteSlotTextureProxy(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), v185);
      v186 = C3DEffectCommonProfileGetEffectSlot(v46, 12, 0);
      if (v186)
        C3DRendererContextExecuteSlotTextureProxy(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), v186);
      v187 = C3DEffectCommonProfileGetEffectSlot(v46, 13, 0);
      if (v187)
        C3DRendererContextExecuteSlotTextureProxy(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), v187);
      v161 = v46;
      v162 = 14;
    }
    v188 = C3DEffectCommonProfileGetEffectSlot(v161, v162, 0);
    if (v188)
      C3DRendererContextExecuteSlotTextureProxy(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), v188);
LABEL_263:
    v47 = (*(_WORD *)(v46 + 196) & 0x1FFF) != 1;
    goto LABEL_264;
  }
  v47 = 0;
LABEL_264:
  v45 = 1;
LABEL_29:
  v193 = v46;
  v195 = v45;
  if (*v25)
  {
    v48 = 0;
    *(_BYTE *)(a1 + 388) = 0;
    v49 = 1;
    v50 = MEMORY[0x1E0C809B0];
    do
    {
      v51 = v49;
      if (C3DProgramHashCodeGetShaderModifiers(v42, v48))
      {
        ShaderModifierOwner = __getShaderModifierOwner(a2, v48);
        value.columns[0].i64[0] = v50;
        value.columns[0].i64[1] = 0x40000000;
        value.columns[1].i64[0] = (uint64_t)___ExecuteShaderModifiersTextureProxy_block_invoke;
        value.columns[1].i64[1] = (uint64_t)&__block_descriptor_tmp_13_0;
        value.columns[2].i64[0] = a1;
        C3DEntityEnumerateKeyValuesWithBlock(ShaderModifierOwner, (uint64_t)&value);
      }
      v49 = 0;
      v48 = 1;
    }
    while ((v51 & 1) != 0);
    if (*(_BYTE *)(a1 + 388))
      v53 = 1;
    else
      v53 = v47;
    v46 = v193;
    if ((v53 & 1) != 0)
      goto LABEL_38;
  }
  else if (v47)
  {
LABEL_38:
    v54 = (uint64_t)v199;
    C3DRendererElementStateReset(a1, (uint64_t)v199);
    v55 = 1;
    goto LABEL_51;
  }
  v55 = 0;
  v54 = (uint64_t)v199;
LABEL_51:
  C3DEnginePipelineGetRenderComponentsForRenderPass(a2, a4, v54, 0, 0, (uint64_t *)&v211, 0);
  if (v211 && (ProgramResident = C3DResourceManagerMakeProgramResident(v197, v211, (uint64_t)v38)) != 0)
  {
    v60 = ProgramResident;
    v61 = v211;
  }
  else
  {
    v61 = 0;
    v60 = 0;
    v211 = 0;
  }
  v62 = *(void **)(a1 + 328);
  if (v62 != v61)
  {
    v63 = v61;
    if (v62)
    {
      CFRelease(*(CFTypeRef *)(a1 + 328));
      *(_QWORD *)(a1 + 328) = 0;
      v63 = v211;
    }
    if (v63)
      v63 = CFRetain(v63);
    *(_QWORD *)(a1 + 328) = v63;
    if (*(const void **)(a1 + 336) != v60)
    {
      *(_QWORD *)(a1 + 336) = v60;
      C3DRendererContextBindProgramObject((uint64_t)v38, v60);
    }
  }
  v64 = v196;
  if (v196)
  {
    v65 = *(_QWORD *)(a2 + 56);
    v64 = *(_QWORD *)(a1 + 344) != v65;
    *(_QWORD *)(a1 + 344) = v65;
  }
  v191 = v64;
  if (v62 != v61)
    v64 = 1;
  if (((v55 | v64) & 1) != 0 || *(_QWORD *)(a1 + 56) != v46 || (C3DRendererElementIsOpaque(a2) & 1) == 0)
  {
    v189 = v55;
    __RendererElementStateUnbindLastUsedCommonProfile(a1, v62 != v61);
    v66 = v45 ^ 1;
    if (!v60)
      v66 = 1;
    if ((v66 & 1) == 0 && v62 != v61)
    {
      UniformLocation = C3DFXGLSLProgramObjectGetUniformLocation((uint64_t)v60, 187);
      if (UniformLocation != -1)
      {
        v68 = UniformLocation;
        PointOfView = C3DEngineContextGetPointOfView((uint64_t)v199);
        v209 = 0u;
        v210 = 0u;
        v207 = 0u;
        v208 = 0u;
        v205 = 0u;
        v206 = 0u;
        v203 = 0u;
        v204 = 0u;
        v201 = 0u;
        v202 = 0u;
        memset(&value, 0, sizeof(value));
        if (PointOfView)
        {
          if (C3DNodeGetProjectionInfos((uint64_t)PointOfView, (uint64_t)&value))
          {
            v[0] = 0.0;
            ZFar = C3DProjectionInfosGetZFar((uint64_t)&value);
            v71 = 1.0 / (ZFar - C3DProjectionInfosGetZNear((uint64_t)&value));
            v[0] = v71;
            C3DRendererContextSetFloatUniformAtLocation((uint64_t)v38, v68, v, 1);
          }
        }
      }
      v72 = C3DFXGLSLProgramObjectGetUniformLocation((uint64_t)v60, 190);
      if (v72 != -1)
      {
        v73 = v72;
        PointOfViewScale = C3DEngineContextGetPointOfViewScale((uint64_t)v199);
        Scene = C3DEngineContextGetScene((uint64_t)v199);
        value.columns[0] = 0uLL;
        value.columns[0] = *(simd_float4 *)C3DSceneGetFogColor(Scene);
        C3DRendererContextSetColor4UniformAtLocation((uint64_t)v38, v73, (float32x4_t *)&value, 1);
        v76 = C3DFXGLSLProgramObjectGetUniformLocation((uint64_t)v60, 191);
        if (v76 != -1)
        {
          v77 = v76;
          *(_QWORD *)&v[1] = 0;
          v[0] = 0.0;
          *(__n64 *)&v78 = C3DSceneComputeFogParameters(Scene, PointOfViewScale);
          *(_OWORD *)v = v78;
          C3DRendererContextSetVector3UniformAtLocation((uint64_t)v38, v77, v, 1);
        }
        v46 = v193;
      }
      v79 = C3DFXGLSLProgramObjectGetUniformLocation((uint64_t)v60, 189);
      v45 = v195;
      if (v79 != -1)
      {
        v80 = v79;
        if ((__UpdateEffectIfNeeded_initialized & 1) == 0)
        {
          __UpdateEffectIfNeeded_initialized = 1;
          C3DSetupHaltonFilterKernelConic(__UpdateEffectIfNeeded_s_kernel, 31, 1.0, 1.0, -2.0);
        }
        C3DRendererContextSetVector4UniformAtLocation((uint64_t)v38, v80, __UpdateEffectIfNeeded_s_kernel[0].f32, 31);
      }
      v81 = C3DFXGLSLProgramObjectGetUniformLocation((uint64_t)v60, 0);
      if (v81 != -1)
      {
        v82 = v81;
        SystemTime = C3DEngineContextGetSystemTime((uint64_t)v199);
        v84 = *(double *)&__UpdateEffectIfNeeded_t0;
        if (*(double *)&__UpdateEffectIfNeeded_t0 == 0.0)
        {
          __UpdateEffectIfNeeded_t0 = *(_QWORD *)&SystemTime;
          v84 = SystemTime;
        }
        v85 = SystemTime - v84;
        value.columns[0].f32[0] = v85;
        C3DRendererContextSetFloatUniformAtLocation((uint64_t)v38, v82, (GLfloat *)&value, 1);
      }
      v86 = C3DFXGLSLProgramObjectGetUniformLocation((uint64_t)v60, 1);
      if (v86 != -1)
      {
        v87 = v86;
        Viewport = C3DEngineContextGetViewport(v199);
        __asm { FMOV            V1.2S, #1.0 }
        *(float32x2_t *)value.columns[0].f32 = vdiv_f32(_D1, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)Viewport, (int8x16_t)Viewport, 8uLL));
        C3DRendererContextSetVector2UniformAtLocation((uint64_t)v38, v87, (GLfloat *)&value, 1);
      }
      v94 = C3DFXGLSLProgramObjectGetUniformLocation((uint64_t)v60, 14);
      if (v94 != -1)
      {
        v95 = v94;
        Matrix4x4 = (GLfloat *)C3DEngineContextGetMatrix4x4((uint64_t)v199, 0);
        C3DRendererContextSetMatrix4x4UniformAtLocation((uint64_t)v38, v95, Matrix4x4, 1);
      }
      v97 = C3DFXGLSLProgramObjectGetUniformLocation((uint64_t)v60, 15);
      if (v97 != -1)
      {
        v98 = v97;
        memset(&value, 0, sizeof(value));
        v99 = (simd_float4x4 *)C3DEngineContextGetMatrix4x4((uint64_t)v199, 0);
        C3DMatrix4x4Invert(v99, &value);
        C3DRendererContextSetMatrix4x4UniformAtLocation((uint64_t)v38, v98, (GLfloat *)&value, 1);
      }
      v100 = C3DFXGLSLProgramObjectGetUniformLocation((uint64_t)v60, 17);
      if (v100 != -1)
      {
        v101 = v100;
        memset(&value, 0, sizeof(value));
        v102 = (simd_float4x4 *)C3DEngineContextGetMatrix4x4((uint64_t)v199, 1);
        C3DMatrix4x4Invert(v102, &value);
        *(_QWORD *)&v[1] = 0;
        v[0] = 0.0;
        C3DMatrix4x4GetTranslation((__n128 *)&value, (__n128 *)v);
        C3DRendererContextSetVector3UniformAtLocation((uint64_t)v38, v101, v, 1);
      }
      v103 = C3DFXGLSLProgramObjectGetUniformLocation((uint64_t)v60, 12);
      if (v103 != -1)
      {
        v104 = v103;
        v105 = (GLfloat *)C3DEngineContextGetMatrix4x4((uint64_t)v199, 1);
        C3DRendererContextSetMatrix4x4UniformAtLocation((uint64_t)v38, v104, v105, 1);
      }
      v106 = C3DFXGLSLProgramObjectGetUniformLocation((uint64_t)v60, 13);
      if (v106 != -1)
      {
        v107 = v106;
        memset(&value, 0, sizeof(value));
        v108 = (simd_float4x4 *)C3DEngineContextGetMatrix4x4((uint64_t)v199, 1);
        C3DMatrix4x4Invert(v108, &value);
        C3DRendererContextSetMatrix4x4UniformAtLocation((uint64_t)v38, v107, (GLfloat *)&value, 1);
      }
      v109 = C3DFXGLSLProgramObjectGetUniformLocation((uint64_t)v60, 16);
      if (v109 != -1)
      {
        v110 = v109;
        memset(&value, 0, sizeof(value));
        v111 = (simd_float4 *)C3DEngineContextGetMatrix4x4((uint64_t)v199, 1);
        v112 = v111[3];
        v114 = *v111;
        v113 = v111[1];
        value.columns[2] = v111[2];
        value.columns[3] = v112;
        value.columns[0] = v114;
        value.columns[1] = v113;
        v45 = v195;
        v115 = (__n128 *)C3DEngineContextGetScene((uint64_t)v199);
        C3DSceneComputeViewToCubemapMatrix(v115, (uint64_t)&value);
        C3DRendererContextSetMatrix4x4UniformAtLocation((uint64_t)v38, v110, (GLfloat *)&value, 1);
      }
    }
    *(_DWORD *)(a1 + 320) = *(_DWORD *)(a1 + 400);
    v116 = *(_DWORD *)(a1 + 384);
    if (v116 == 1)
    {
      v119 = C3DBlendStatesDefaultOver();
      C3DRendererContextSetBlendStates((uint64_t)v38, v119);
    }
    else if (!v116)
    {
      v117 = v43 * v38[19].f32[1];
      BlendMode = C3DMaterialGetBlendMode(v192);
      C3DRendererContextBindCommonProfile(v38, v197, v46, a1 + 64, v190, BlendMode, v117);
    }
    *(_DWORD *)(a1 + 400) = *(_DWORD *)(a1 + 320);
    if (v45)
    {
      if (v60)
        v120 = v196;
      else
        v120 = 0;
      v121 = v191;
      if (v62 != v61)
        v121 = 1;
      if (v120 && v121)
      {
        v122 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)&v205 = 0;
        v203 = 0u;
        v204 = 0u;
        v201 = 0u;
        v202 = 0u;
        v123 = *(_QWORD *)(a1 + 40);
        v124 = *(_QWORD *)(a1 + 48) + 56;
        memset(&value, 0, sizeof(value));
        C3DLightingSystemGetLightingSetDesc(v123, v124, (unint64_t *)&value);
        v125 = value.columns[0].i64[0];
        if (value.columns[0].i64[0] >= 1)
        {
          v126 = 0;
          do
          {
            v127 = (char *)&value + 8 * v126;
            v128 = (float32x4_t *)*((_QWORD *)v127 + 1);
            if (v128)
            {
              v129 = *((_QWORD *)v127 + 9);
              if (v129)
              {
                C3DRendererContextSetLight(v122, v126, v128, v129, (unsigned int *)(a1 + 400));
                v125 = value.columns[0].i64[0];
              }
            }
            ++v126;
          }
          while (v126 < v125);
        }
        v130 = C3DFXGLSLProgramObjectGetUniformLocation((uint64_t)v60, 184);
        if (v130 != -1)
        {
          v131 = v130;
          *(_QWORD *)v = C3DLightingSystemGetAmbientLighting(*(_QWORD *)(a1 + 40));
          *(_QWORD *)&v[2] = v132;
          C3DRendererContextSetColor4UniformAtLocation(v122, v131, (float32x4_t *)v, 1);
        }
      }
      if (v189)
      {
        _C3DEffectCommonProfileSetTextureForTextureProxy(v46, 0, 0);
        _C3DEffectCommonProfileSetTextureForTextureProxy(v46, 1, 0);
        _C3DEffectCommonProfileSetTextureForTextureProxy(v46, 2, 0);
        _C3DEffectCommonProfileSetTextureForTextureProxy(v46, 3, 0);
        _C3DEffectCommonProfileSetTextureForTextureProxy(v46, 4, 0);
        _C3DEffectCommonProfileSetTextureForTextureProxy(v46, 5, 0);
        _C3DEffectCommonProfileSetTextureForTextureProxy(v46, 6, 0);
        _C3DEffectCommonProfileSetTextureForTextureProxy(v46, 7, 0);
        _C3DEffectCommonProfileSetTextureForTextureProxy(v46, 9, 0);
        _C3DEffectCommonProfileSetTextureForTextureProxy(v46, 8, 0);
        _C3DEffectCommonProfileSetTextureForTextureProxy(v46, 10, 0);
        _C3DEffectCommonProfileSetTextureForTextureProxy(v46, 11, 0);
        _C3DEffectCommonProfileSetTextureForTextureProxy(v46, 15, 0);
        _C3DEffectCommonProfileSetTextureForTextureProxy(v46, 12, 0);
        _C3DEffectCommonProfileSetTextureForTextureProxy(v46, 13, 0);
        _C3DEffectCommonProfileSetTextureForTextureProxy(v46, 14, 0);
      }
    }
    *(_QWORD *)(a1 + 56) = v46;
  }
  if (Node)
  {
    Skinner = C3DNodeGetSkinner(Node);
    if (Skinner)
    {
      v134 = Skinner;
      if (C3DGeometryGetOverrideMaterial(Skinner))
      {
        Geometry = (__C3DGeometry *)C3DNodeGetGeometry(Node);
        if (C3DSkinnerGetEffectiveCalculationMode(v134, Geometry) == 1)
        {
          if (C3DRendererElementGetMeshElement(a2))
          {
            value.columns[0].i64[0] = 0;
            JointMatrices = C3DSkinnerGetJointMatrices(v134, &value);
            if (value.columns[0].i64[0] >= 1)
            {
              v137 = (GLfloat *)JointMatrices;
              v138 = C3DFXGLSLProgramObjectGetUniformLocation((uint64_t)v60, 186);
              if (v138 != -1)
                C3DRendererContextSetVector4UniformAtLocation((uint64_t)v38, v138, v137, value.columns[0].i64[0]);
            }
          }
        }
      }
    }
  }
  if (v194)
  {
    Mesh = C3DRendererElementGetMesh(a2);
    C3DMeshCreateTangentsIfNeeded(Mesh, 1);
  }
  if (v46)
  {
    v140 = C3DEffectCommonProfileGetLightingModel(v46) != 4;
    if (C3DEngineContextGetScene((uint64_t)v199))
    {
      if (*(_DWORD *)(a1 + 428) != v140)
        *(_DWORD *)(a1 + 428) = v140;
    }
  }
LABEL_140:
  RasterizerStates = C3DFXPassGetRasterizerStates((uint64_t)a4);
  if (RasterizerStates || (RasterizerStates = C3DRendererElementGetRaterizerStates(a2)) != 0)
    C3DRendererContextSetRasterizerStates((uint64_t)v38, RasterizerStates);
  return 1;
}

void C3DRendererElementStateDrawRendererElement(uint64_t a1, uint64_t a2, float32x4_t *a3, _QWORD *a4, int a5)
{
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t RendererContextGL;
  uint64_t ResourceManager;
  float32x4_t *Node;
  void *Mesh;
  const void *MeshElement;
  uint64_t v23;
  uint64_t OverrideMaterial;
  float32x4_t *WorldMatrix;
  uint64_t v26;
  uint64_t v27;
  const __CFDictionary *LightmapInfo;
  const __CFDictionary *v29;
  void *Value;
  void *v31;
  uint64_t v32;
  float32x2_t *v33;
  uint64_t v34;
  uint64_t TypeID;
  uint64_t CommonProfileIfNoTechnique;
  float32x2_t *ImageResident;
  uint64_t v38;
  const __CFNumber *v39;
  int SourcesCountForSemantic;
  uint64_t v41;
  float32x2_t *v42;
  float32x2_t *v43;
  float32x2_t *v44;
  CFTypeRef v45;
  float32x2_t *v46;
  CFTypeRef v47;
  uint64_t v48;
  NSObject *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t UniformLocation;
  uint64_t v58;
  int v59;
  uint64_t v60;
  char v61;
  char v62;
  const __CFArray *ShaderModifiers;
  const __CFArray *v64;
  NSObject *v65;
  uint64_t ShaderModifierOwner;
  CFIndex Count;
  CFIndex v68;
  CFIndex i;
  const void *ValueAtIndex;
  int v71;
  uint64_t v72;
  char v73;
  char v74;
  uint64_t v75;
  const void *v76;
  const void *v77;
  float32x2_t *cf;
  CFTypeRef TextureSampler;
  uint64_t v80;
  float32x2_t *v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int valuePtr;
  _DWORD v85[7];

  *(_QWORD *)&v85[5] = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    v10 = scn_default_log();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
      _C3DRendererElementSync_cold_1(v10, v11, v12, v13, v14, v15, v16, v17);
  }
  *(_QWORD *)(a1 + 48) = a2;
  if ((!a5 || C3DRendererElementStateBindProgramRendererElement(a1, a2, (uint64_t)a3, a4))
    && *(_QWORD *)(a1 + 328))
  {
    RendererContextGL = C3DEngineContextGetRendererContextGL((uint64_t)a3);
    ResourceManager = C3DEngineContextGetResourceManager((uint64_t)a3);
    Node = (float32x4_t *)C3DRendererElementGetNode(a2);
    Mesh = (void *)C3DRendererElementGetMesh(a2);
    MeshElement = C3DRendererElementGetMeshElement(a2);
    v23 = *(_QWORD *)(a1 + 328);
    if (v23)
    {
      OverrideMaterial = C3DGeometryGetOverrideMaterial(v23);
      if (!Node)
      {
LABEL_10:
        if (Mesh)
          C3DRendererContextBindMesh(RendererContextGL, ResourceManager, Mesh);
        v26 = *(_QWORD *)(a1 + 336);
        if (!*(_QWORD *)(v26 + 40))
        {
          __UpdateMatrixUniforms((_QWORD *)a1, a2);
          goto LABEL_47;
        }
        if (*(_DWORD *)(a1 + 384) == 1)
        {
          C3DGLSLProfileBindProfileInputs(a3, v26, *(_QWORD *)(a1 + 368));
LABEL_47:
          ImageResident = 0;
LABEL_48:
          if (MeshElement)
            C3DRendererContextBindMeshElement(RendererContextGL, ResourceManager, MeshElement);
          if (OverrideMaterial)
            __FireProgramDelegateCallback(a1, a2, OverrideMaterial, (void (__cdecl *)(const void *, const void *, void *))__BindValueForSymbol);
          v58 = OverrideMaterial;
          if (*(_BYTE *)(a1 + 389))
          {
            v81 = ImageResident;
            v83 = RendererContextGL;
            v59 = 0;
            v60 = *(_QWORD *)(a1 + 392);
            v61 = 1;
            do
            {
              v62 = v61;
              ShaderModifiers = (const __CFArray *)C3DProgramHashCodeGetShaderModifiers(v60, v59);
              if (ShaderModifiers)
              {
                v64 = ShaderModifiers;
                if (!CFArrayGetCount(ShaderModifiers))
                {
                  v65 = scn_default_log();
                  if (os_log_type_enabled(v65, OS_LOG_TYPE_FAULT))
                    C3DRendererElementStateBindProgramRendererElement_cold_1((uint8_t *)&valuePtr, v85, v65);
                }
                ShaderModifierOwner = __getShaderModifierOwner(a2, v59);
                Count = CFArrayGetCount(v64);
                if (Count >= 1)
                {
                  v68 = Count;
                  for (i = 0; i != v68; ++i)
                  {
                    ValueAtIndex = CFArrayGetValueAtIndex(v64, i);
                    if (C3DShaderModifierGetLanguage((uint64_t)ValueAtIndex) == 1)
                      *(_DWORD *)(a1 + 400) += C3DShaderModifierBindUniforms((uint64_t)ValueAtIndex, *(_QWORD *)(a1 + 32), ShaderModifierOwner, *(unsigned int *)(a1 + 400));
                  }
                }
              }
              v61 = 0;
              v59 = 1;
            }
            while ((v62 & 1) != 0);
            ImageResident = v81;
            RendererContextGL = v83;
            if (*(_BYTE *)(a1 + 388))
            {
              v71 = 0;
              v72 = *(_QWORD *)(a1 + 392);
              v73 = 1;
              do
              {
                v74 = v73;
                if (C3DProgramHashCodeGetShaderModifiers(v72, v71))
                {
                  v75 = __getShaderModifierOwner(a2, v71);
                  C3DEntityEnumerateKeyValuesWithBlock(v75, (uint64_t)&__block_literal_global_20);
                }
                v73 = 0;
                v71 = 1;
              }
              while ((v74 & 1) != 0);
              *(_BYTE *)(a1 + 388) = 0;
            }
          }
          C3DRendererContextRenderResidentMeshElement(RendererContextGL);
          if (v58)
            __FireProgramDelegateCallback(a1, a2, v58, (void (__cdecl *)(const void *, const void *, void *))__UnbindValueForSymbol);
          if (ImageResident)
          {
            v76 = (const void *)ImageResident[1];
            if (v76)
            {
              CFRelease(v76);
              ImageResident[1] = 0;
            }
            v77 = (const void *)ImageResident[3];
            if (v77)
            {
              CFRelease(v77);
              ImageResident[3] = 0;
            }
            --*(_DWORD *)(a1 + 400);
          }
          return;
        }
        __UpdateMatrixUniforms((_QWORD *)a1, a2);
        v27 = C3DRendererElementGetNode(a2);
        if (!v27)
          goto LABEL_47;
        LightmapInfo = C3DNodeGetLightmapInfo(v27);
        if (!LightmapInfo)
          goto LABEL_47;
        v29 = LightmapInfo;
        v82 = RendererContextGL;
        Value = (void *)CFDictionaryGetValue(LightmapInfo, CFSTR("image"));
        if (Value)
        {
          v31 = Value;
          v80 = OverrideMaterial;
          v32 = C3DEngineContextGetResourceManager((uint64_t)a3);
          v33 = (float32x2_t *)C3DEngineContextGetRendererContextGL((uint64_t)a3);
          v34 = *(unsigned int *)(a1 + 400);
          *(_DWORD *)(a1 + 400) = v34 + 1;
          TypeID = C3DImageGetTypeID();
          if (TypeID != CFGetTypeID(v31))
          {
            ImageResident = 0;
            RendererContextGL = v82;
LABEL_82:
            OverrideMaterial = v80;
            goto LABEL_48;
          }
          CommonProfileIfNoTechnique = C3DMaterialGetCommonProfileIfNoTechnique(*(_QWORD *)(a2 + 32));
          OverrideMaterial = v80;
          if (CommonProfileIfNoTechnique)
          {
            TextureSampler = (CFTypeRef)C3DEffectCommonProfileGetTextureSampler(CommonProfileIfNoTechnique, 2);
            ImageResident = C3DResourceManagerMakeImageResident(v32, v31, TextureSampler, v33);
            if (!ImageResident)
            {
LABEL_80:
              RendererContextGL = v82;
              goto LABEL_48;
            }
            valuePtr = 1;
            v38 = C3DRendererElementGetMesh(a2);
            v39 = (const __CFNumber *)CFDictionaryGetValue(v29, CFSTR("uv_set"));
            if (v39)
              CFNumberGetValue(v39, kCFNumberIntType, &valuePtr);
            SourcesCountForSemantic = C3DMeshGetSourcesCountForSemantic(v38, 3);
            if (SourcesCountForSemantic)
            {
              v41 = SourcesCountForSemantic - 1 >= valuePtr ? valuePtr : (SourcesCountForSemantic - 1);
              valuePtr = v41;
              if (C3DMeshGetSourceWithSemanticAtIndex(v38, 3, v41, 1))
              {
                v42 = ImageResident;
                ImageResident = (float32x2_t *)(a1 + 64 + 32 * v34);
                ImageResident[2].i32[0] = v34;
                ImageResident->i8[0] = 6;
                v44 = ImageResident + 1;
                v43 = (float32x2_t *)ImageResident[1];
                cf = v42;
                if (v43 != v42)
                {
                  if (v43)
                  {
                    CFRelease(v43);
                    *v44 = 0;
                  }
                  *v44 = (float32x2_t)CFRetain(cf);
                }
                v46 = ImageResident + 3;
                v45 = (CFTypeRef)ImageResident[3];
                if (v45 != TextureSampler)
                {
                  if (v45)
                  {
                    CFRelease(v45);
                    *v46 = 0;
                  }
                  v47 = TextureSampler;
                  if (TextureSampler)
                    v47 = CFRetain(TextureSampler);
                  *v46 = (float32x2_t)v47;
                }
                v48 = *(_QWORD *)(a1 + 336);
                RendererContextGL = v82;
                if (!v48)
                {
                  v49 = scn_default_log();
                  if (os_log_type_enabled(v49, OS_LOG_TYPE_FAULT))
                    C3DRendererElementStateDrawRendererElement_cold_2(v49, v50, v51, v52, v53, v54, v55, v56);
                }
                if ((_DWORD)v34 != C3DFXGLSLProgramObjectGetUniformValueAtIndex(v48, 178))
                {
                  UniformLocation = C3DFXGLSLProgramObjectGetUniformLocation(v48, 178);
                  C3DRendererContextSetIntUniformAtLocation((uint64_t)v33, UniformLocation, v34);
                  C3DFXGLSLProgramObjectSetUniformValueAtIndex(v48, 178, v34);
                }
                C3DRendererContextBindTexture((uint64_t)v33, cf, (uint64_t)TextureSampler, 0, v34);
                goto LABEL_82;
              }
            }
          }
        }
        ImageResident = 0;
        goto LABEL_80;
      }
    }
    else
    {
      OverrideMaterial = 0;
      if (!Node)
        goto LABEL_10;
    }
    WorldMatrix = C3DNodeGetWorldMatrix(Node);
    C3DEngineContextSetMatrix4x4((uint64_t)a3, 2, (uint64_t)WorldMatrix);
    goto LABEL_10;
  }
}

void __FireProgramDelegateCallback(uint64_t a1, uint64_t a2, uint64_t a3, void (__cdecl *a4)(const void *, const void *, void *))
{
  uint64_t v4;
  _QWORD context[5];

  context[4] = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 336);
  if (v4)
  {
    if (C3DFXProgramDelegateGetCallbacks(a3))
    {
      context[0] = *(_QWORD *)(a1 + 32);
      context[1] = a3;
      context[2] = v4;
      context[3] = a2;
      C3DFXGLSLProgramObjectApplyFunctionForAttributes(v4, a4, context);
      C3DFXGLSLProgramObjectApplyFunctionForUniforms(v4, a4, context);
    }
  }
}

void C3DRendererElementStateProcessRendererElement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float32x4_t *v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *Pass;
  float32x4_t *Node;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const __CFDictionary *RendererDelegate;
  uint64_t v50;
  float32x4_t *WorldMatrix;
  NSObject *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v5 = *(float32x4_t **)(a3 + 8);
  v6 = *(_QWORD *)(a3 + 16);
  if (!v6)
  {
    v7 = scn_default_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
      C3DRendererElementStateProcessRendererElement_cold_6(v7, v8, v9, v10, v11, v12, v13, v14);
  }
  Pass = (_QWORD *)C3DFXPassInstanceGetPass(v6);
  Node = (float32x4_t *)C3DRendererElementGetNode(a2);
  if (!a1 && (v17 = scn_default_log(), os_log_type_enabled(v17, OS_LOG_TYPE_FAULT)))
  {
    C3DRendererElementStateCreate_cold_1(v17, v18, v19, v20, v21, v22, v23, v24);
    if (a2)
      goto LABEL_9;
  }
  else if (a2)
  {
    goto LABEL_9;
  }
  v25 = scn_default_log();
  if (os_log_type_enabled(v25, OS_LOG_TYPE_FAULT))
    _C3DRendererElementSync_cold_1(v25, v26, v27, v28, v29, v30, v31, v32);
LABEL_9:
  *(_QWORD *)(a1 + 48) = a2;
  if (C3DRendererElementIsHidden(a2))
  {
    v33 = scn_default_log();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_FAULT))
    {
      C3DRendererElementStateProcessRendererElement_cold_3(v33, v34, v35, v36, v37, v38, v39, v40);
      if (Node)
        goto LABEL_12;
LABEL_22:
      if (C3DRendererElementIsRendererDelegate(a2))
        return;
      goto LABEL_23;
    }
  }
  if (!Node)
    goto LABEL_22;
LABEL_12:
  if (C3DNodeGetOpacity((uint64_t)Node) <= 0.0 && (*(_WORD *)(a2 + 72) & 7) != 2)
  {
    v41 = scn_default_log();
    if (os_log_type_enabled(v41, OS_LOG_TYPE_FAULT))
      C3DRendererElementStateProcessRendererElement_cold_2(v41, v42, v43, v44, v45, v46, v47, v48);
  }
  if (C3DRendererElementIsRendererDelegate(a2))
  {
    RendererDelegate = C3DNodeGetRendererDelegate((uint64_t)Node);
    if (RendererDelegate)
    {
      v50 = (uint64_t)RendererDelegate;
      C3DRendererElementStateReset(a1, (uint64_t)v5);
      WorldMatrix = C3DNodeGetWorldMatrix(Node);
      C3DEngineContextSetMatrix4x4((uint64_t)v5, 2, (uint64_t)WorldMatrix);
      C3DRendererDelegateFireWithNode(v50, (uint64_t)v5, (uint64_t)Node, (uint64_t)Pass);
      return;
    }
    v52 = scn_default_log();
    if (os_log_type_enabled(v52, OS_LOG_TYPE_FAULT))
      C3DRendererElementStateProcessRendererElement_cold_1(v52, v53, v54, v55, v56, v57, v58, v59);
  }
LABEL_23:
  v60 = *(_QWORD *)(a2 + 40);
  if (v60)
  {
    if (v60 != C3DFXTechniqueGetNullTechnique())
    {
      C3DEngineContextRenderSubTechnique((uint64_t)v5, v60, v6, a2);
      C3DRendererElementStateReset(a1, (uint64_t)v5);
    }
  }
  else
  {
    C3DRendererElementStateDrawRendererElement(a1, a2, v5, Pass, 1);
  }
}

uint64_t C3DRendererElementStateGetCurrentProgram(uint64_t a1)
{
  return *(_QWORD *)(a1 + 328);
}

uint64_t C3DRendererElementStateGetCurrentProgramObject(uint64_t a1)
{
  return *(_QWORD *)(a1 + 336);
}

uint64_t C3DRendererElementStateGetActiveTextureUnit(uint64_t a1)
{
  return *(unsigned int *)(a1 + 400);
}

uint64_t C3DRendererElementStateSetActiveTextureUnit(uint64_t result, int a2)
{
  *(_DWORD *)(result + 400) = a2;
  return result;
}

void C3DRendererContextDestroyAllVertexArrayObjects(void *context)
{
  const __CFDictionary *v2;
  const void *v3;

  v2 = (const __CFDictionary *)*((_QWORD *)context + 15);
  if (v2)
  {
    CFDictionaryApplyFunction(v2, (CFDictionaryApplierFunction)_destroyVertexArray, context);
    CFDictionaryRemoveAllValues(*((CFMutableDictionaryRef *)context + 15));
    v3 = (const void *)*((_QWORD *)context + 16);
    if (v3)
    {
      CFRelease(v3);
      *((_QWORD *)context + 16) = 0;
    }
  }
}

uint64_t _destroyVertexArray(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t result;
  int v5;

  v5 = a2;
  result = (*(uint64_t (**)(uint64_t, int *))(a3 + 1944))(1, &v5);
  --*(_DWORD *)(a3 + 428);
  return result;
}

void _C3DRendererContextCFFinalize(char *context)
{
  const void *v2;
  const void *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  char *v8;
  const void *v9;
  CFTypeRef *v10;
  CFTypeRef v11;
  uint64_t v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  _QWORD v21[5];
  _QWORD v22[5];

  if (context)
  {
    CFDictionaryApplyFunction(*((CFDictionaryRef *)context + 15), (CFDictionaryApplierFunction)_destroyVertexArray, context);
    v2 = (const void *)*((_QWORD *)context + 15);
    if (v2)
    {
      CFRelease(v2);
      *((_QWORD *)context + 15) = 0;
    }
    v3 = (const void *)*((_QWORD *)context + 16);
    if (v3)
    {
      CFRelease(v3);
      *((_QWORD *)context + 16) = 0;
    }
    v4 = 0;
    v5 = 1;
    v6 = MEMORY[0x1E0C809B0];
    do
    {
      v7 = v5;
      v8 = &context[24 * v4];
      v9 = (const void *)*((_QWORD *)v8 + 251);
      if (v9)
      {
        CFRelease(v9);
        *((_QWORD *)v8 + 251) = 0;
      }
      v10 = (CFTypeRef *)(v8 + 1992);
      v11 = *v10;
      v22[0] = v6;
      v22[1] = 0x40000000;
      v22[2] = ___C3DRendererContextCFFinalize_block_invoke;
      v22[3] = &__block_descriptor_tmp_44;
      v22[4] = context;
      C3DArrayApply((uint64_t)v11, (uint64_t)v22);
      if (*v10)
      {
        CFRelease(*v10);
        *v10 = 0;
      }
      v5 = 0;
      v4 = 1;
    }
    while ((v7 & 1) != 0);
    v12 = *((_QWORD *)context + 255);
    v21[0] = v6;
    v21[1] = 0x40000000;
    v21[2] = ___C3DRendererContextCFFinalize_block_invoke_2;
    v21[3] = &__block_descriptor_tmp_45;
    v21[4] = context;
    C3DArrayApply(v12, (uint64_t)v21);
    v13 = (const void *)*((_QWORD *)context + 255);
    if (v13)
    {
      CFRelease(v13);
      *((_QWORD *)context + 255) = 0;
    }
    v14 = (const void *)*((_QWORD *)context + 20);
    if (v14)
    {
      C3DResourceManagerRegistryReleaseContext((uint64_t)context, v14);
      C3DEAGLWrapperContextRelease(*((id *)context + 20));
    }
    v15 = (const void *)*((_QWORD *)context + 12);
    if (v15)
    {
      CFRelease(v15);
      *((_QWORD *)context + 12) = 0;
    }
    v16 = (const void *)*((_QWORD *)context + 9);
    if (v16)
    {
      CFRelease(v16);
      *((_QWORD *)context + 9) = 0;
    }
    v17 = (const void *)*((_QWORD *)context + 14);
    if (v17)
    {
      CFRelease(v17);
      *((_QWORD *)context + 14) = 0;
    }
    v18 = (const void *)*((_QWORD *)context + 8);
    if (v18)
    {
      CFRelease(v18);
      *((_QWORD *)context + 8) = 0;
    }
    v19 = (const void *)*((_QWORD *)context + 22);
    if (v19)
    {
      CFRelease(v19);
      *((_QWORD *)context + 22) = 0;
    }
    v20 = (const void *)*((_QWORD *)context + 257);
    if (v20)
    {
      CFRelease(v20);
      *((_QWORD *)context + 257) = 0;
    }
  }
}

CFStringRef _C3DRendererContextCFCopyFormatDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DRendererContext>"));
}

CFStringRef _C3DRendererContextCFCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DRendererContext>"));
}

__n64 C3DRendererContextSetupCommonPipeline(__n64 *a1)
{
  __n64 result;
  GLint params;

  a1[2].n64_u32[1] = 4;
  a1[6].n64_u32[0] = 1;
  C3DRendererContextSetPlatformSpecificImplementations_ES2((uint64_t)&a1[144]);
  a1[2].n64_u32[0] = 1;
  params = 0;
  glGetIntegerv(0xD33u, &params);
  result.n64_u64[0] = a1[3].n64_u64[0];
  if (result.n64_f32[0] == 0.0)
  {
    result.n64_f32[0] = (float)params;
    a1[3].n64_u64[0] = result.n64_u64[0];
  }
  if (result.n64_f32[1] == 0.0)
  {
    result.n64_f32[1] = (float)params;
    a1[3].n64_u64[0] = result.n64_u64[0];
  }
  return result;
}

__n64 __InitStateVarsIfNeeded(__n64 *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DEngineContextRenderScene_cold_2(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return C3DRendererContextSetupCommonPipeline(a1);
}

__n64 *C3DRendererContextCreateWithOptions()
{
  __n64 *Instance;
  _DWORD *v1;
  _DWORD *v2;

  if (C3DRendererContextGetTypeID_onceToken != -1)
    dispatch_once(&C3DRendererContextGetTypeID_onceToken, &__block_literal_global_34);
  Instance = (__n64 *)C3DTypeCreateInstance_(C3DRendererContextGetTypeID_typeID, 0x800uLL);
  Instance[21].n64_u64[0] = 0;
  Instance[6].n64_u32[1] = 1065353216;
  Instance[11].n64_u16[0] = 256;
  C3DColor4Make((float *)&Instance[18], 1.0, 1.0, 1.0, 1.0);
  Instance[3].n64_u64[0] = 0;
  __InitStateVarsIfNeeded(Instance);
  Instance[22].n64_u64[0] = 0;
  Instance[15].n64_u64[0] = (unint64_t)CFDictionaryCreateMutable(0, 0, 0, 0);
  v1 = (_DWORD *)C3DArrayCreate(32, 0);
  Instance[249].n64_u64[0] = (unint64_t)v1;
  C3DArraySetCount(v1, 3u);
  Instance[250].n64_u32[1] = 0;
  v2 = (_DWORD *)C3DArrayCreate(32, 0);
  Instance[252].n64_u64[0] = (unint64_t)v2;
  C3DArraySetCount(v2, 3u);
  Instance[253].n64_u32[1] = 0;
  Instance[255].n64_u64[0] = C3DArrayCreate(4, 10);
  Instance[256].n64_u32[0] = 0;
  return Instance;
}

void C3DRendererContextSetMaxTextureSize(uint64_t a1, double a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DEngineContextRenderScene_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(double *)(a1 + 24) = a2;
}

void C3DRendererContextClear(uint64_t a1, GLbitfield mask, float32x4_t *a3)
{
  float32x4_t v4;

  *(_QWORD *)(a1 + 1096) = 0;
  if (a3 && (mask & 0x4000) != 0)
  {
    v4 = *a3;
    if (C3DLinearRenderingIsEnabled())
      C3DColor4ConvertToNonLinear(&v4);
    glClearColor(v4.f32[0], v4.f32[1], v4.f32[2], v4.f32[3]);
  }
  if ((mask & 0x100) != 0)
    glDepthMask(1u);
  if ((mask & 0x400) != 0)
    glStencilMask(0xFFFFFFFF);
  glClear(mask);
}

BOOL C3DRendererContextTextureSamplerImpliesPow2TextureSize()
{
  return C3DRendererContextInferTextureTargetForImageTypeAndTextureSampler(1u) == 3553;
}

uint64_t C3DRendererContextGetTextureUnitOffset(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DEngineContextRenderScene_cold_2(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 168);
}

uint64_t C3DRendererContextGetStats(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DEngineContextRenderScene_cold_2(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return a1 + 184;
}

BOOL C3DRendererContextIsEnabled(uint64_t a1, int a2)
{
  GLenum v2;

  if (a2 == 1)
  {
    v2 = 2929;
    return glIsEnabled(v2) != 0;
  }
  if (a2 == 2)
  {
    v2 = 2884;
    return glIsEnabled(v2) != 0;
  }
  return 0;
}

void C3DRendererContextSetEnable(uint64_t a1, int a2, int a3)
{
  GLenum v3;

  if (a2 == 1)
  {
    v3 = 2929;
    if (!a3)
    {
LABEL_4:
      glDisable(v3);
      return;
    }
  }
  else
  {
    if (a2 != 2)
      return;
    v3 = 2884;
    if (!a3)
      goto LABEL_4;
  }
  glEnable(v3);
}

void C3DRendererContextResetToDefaultStates(uint64_t a1)
{
  uint64_t v2;

  glPushGroupMarkerEXT(0, "Reset all states");
  glActiveTexture(0x84C0u);
  glDisable(0xB71u);
  glDisable(0xB44u);
  C3DRendererContextUnbindProgramObject(a1);
  C3DRendererContextBindMesh(a1, 0, 0);
  C3DRendererContextBindMeshElement(a1, 0, 0);
  v2 = C3DBlendStatesDefaultReplace();
  C3DRendererContextSetBlendStates(a1, v2);
  glPopGroupMarkerEXT();
}

void C3DRendererContextUnbindProgramObject(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 176);
  if (v2)
  {
    if (!*(_DWORD *)(a1 + 1076)
      || (*(_DWORD *)(a1 + 1076) = 0, glUseProgram(0), ++*(_DWORD *)(a1 + 228), (v2 = *(const void **)(a1 + 176)) != 0))
    {
      CFRelease(v2);
      *(_QWORD *)(a1 + 176) = 0;
    }
  }
}

void C3DRendererContextUnbindBufferObjects(uint64_t a1)
{
  C3DRendererContextBindMesh(a1, 0, 0);
  C3DRendererContextBindMeshElement(a1, 0, 0);
}

void C3DRendererContextSetBlendStates(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t Desc;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  _DWORD *v9;
  GLenum v10;
  GLenum v11;

  if (!*(_DWORD *)(a1 + 1088))
  {
    v2 = a2;
    if (*(_QWORD *)(a1 + 1080) != a2)
    {
      if (!a2)
        v2 = C3DBlendStatesDefaultReplace();
      Desc = C3DBlendStatesGetDesc(v2, 0);
      v5 = HIBYTE(Desc);
      v6 = *(_QWORD *)(a1 + 1080);
      if (v6)
      {
        v7 = C3DBlendStatesGetDesc(v6, 0);
        v8 = BYTE2(v7);
        if ((v7 & 1) != (Desc & 1))
        {
          if ((Desc & 1) != 0)
          {
            glEnable(0xBE2u);
            v8 = 15;
          }
          else
          {
            glDisable(0xBE2u);
          }
          ++*(_DWORD *)(a1 + 236);
        }
        if ((Desc & 0x100) != 0)
        {
          if (v8 != BYTE2(Desc) || BYTE3(v7) != BYTE3(Desc) || ((v7 ^ Desc) & 0xFFFF0000000000) != 0)
          {
            glBlendFuncSeparate(gl_BlendModes[BYTE2(Desc)], gl_BlendModes[BYTE3(Desc)], gl_BlendModes[BYTE5(Desc)], gl_BlendModes[BYTE6(Desc)]);
            ++*(_DWORD *)(a1 + 236);
          }
          if (BYTE4(v7) == BYTE4(Desc) && HIBYTE(v7) == (_DWORD)v5)
            goto LABEL_32;
          glBlendEquationSeparate(*(_DWORD *)(a1 + 1160 + 4 * BYTE4(Desc)), *(_DWORD *)(a1 + 1160 + 4 * v5));
        }
        else
        {
          if (v8 != BYTE2(Desc) || BYTE3(v7) != BYTE3(Desc))
          {
            glBlendFunc(gl_BlendModes[BYTE2(Desc)], gl_BlendModes[BYTE3(Desc)]);
            ++*(_DWORD *)(a1 + 236);
          }
          if (BYTE4(v7) == BYTE4(Desc))
            goto LABEL_32;
          glBlendEquation(*(_DWORD *)(a1 + 4 * BYTE4(Desc) + 1160));
        }
        v9 = (_DWORD *)(a1 + 236);
      }
      else
      {
        if ((Desc & 1) != 0)
          glEnable(0xBE2u);
        else
          glDisable(0xBE2u);
        v9 = (_DWORD *)(a1 + 236);
        ++*(_DWORD *)(a1 + 236);
        v10 = gl_BlendModes[BYTE2(Desc)];
        v11 = gl_BlendModes[BYTE3(Desc)];
        if ((Desc & 0x100) != 0)
        {
          glBlendFuncSeparate(v10, v11, gl_BlendModes[BYTE5(Desc)], gl_BlendModes[BYTE6(Desc)]);
          glBlendEquationSeparate(*(_DWORD *)(a1 + 1160 + 4 * BYTE4(Desc)), *(_DWORD *)(a1 + 1160 + 4 * v5));
        }
        else
        {
          glBlendFunc(v10, v11);
          glBlendEquation(*(_DWORD *)(a1 + 4 * BYTE4(Desc) + 1160));
        }
      }
      ++*v9;
LABEL_32:
      *(_QWORD *)(a1 + 1080) = v2;
    }
  }
}

void C3DRendererContextSetMatrix4x4UniformAtLocation(uint64_t a1, uint64_t location, GLfloat *value, uint64_t count)
{
  GLsizei v4;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = count;
  if (!count)
  {
    v8 = scn_default_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      C3DRendererContextSetMatrix4x4UniformAtLocation_cold_1(v8, v9, v10, v11, v12, v13, v14, v15);
  }
  if (location != -1)
  {
    glUniformMatrix4fv(location, v4, 0, value);
    if (a1)
      *(_DWORD *)(a1 + 264) += v4;
  }
}

void C3DRendererContextSetColor4UniformAtLocation(uint64_t a1, uint64_t a2, float32x4_t *a3, uint64_t a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t IsEnabled;
  float32x4_t *v17;
  GLint v18;
  GLsizei v19;
  size_t v20;
  float32x4_t *v21;
  uint64_t v22;
  float32x4_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (!a4)
  {
    v8 = scn_default_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      C3DRendererContextSetMatrix4x4UniformAtLocation_cold_1(v8, v9, v10, v11, v12, v13, v14, v15);
  }
  if (a2 != -1)
  {
    IsEnabled = C3DLinearRenderingIsEnabled();
    if (!(_DWORD)IsEnabled)
    {
      v18 = a2;
      v19 = a4;
      v17 = a3;
LABEL_9:
      glUniform4fv(v18, v19, v17->f32);
      if (!a1)
        return;
      goto LABEL_10;
    }
    if (a4 == 1)
    {
      v23 = *a3;
      C3DColor4ConvertToNonLinear(&v23);
      v17 = &v23;
      v18 = a2;
      v19 = 1;
      goto LABEL_9;
    }
    MEMORY[0x1E0C80A78](IsEnabled);
    memcpy(&v23 - a4, a3, v20);
    if (a4 >= 1)
    {
      v21 = &v23 - a4;
      v22 = a4;
      do
      {
        C3DColor4ConvertToNonLinear(v21++);
        --v22;
      }
      while (v22);
    }
    glUniform4fv(a2, a4, &v23.f32[-4 * a4]);
    if (a1)
LABEL_10:
      *(_DWORD *)(a1 + 260) += a4;
  }
}

void C3DRendererContextSetVector4UniformAtLocation(uint64_t a1, uint64_t location, GLfloat *v, uint64_t count)
{
  GLsizei v4;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = count;
  if (!count)
  {
    v8 = scn_default_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      C3DRendererContextSetMatrix4x4UniformAtLocation_cold_1(v8, v9, v10, v11, v12, v13, v14, v15);
  }
  if (location != -1)
  {
    glUniform4fv(location, v4, v);
    if (a1)
      *(_DWORD *)(a1 + 260) += v4;
  }
}

void C3DRendererContextSetVector3UniformAtLocation(uint64_t a1, uint64_t location, GLfloat *v, uint64_t count)
{
  GLsizei v4;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = count;
  if (!count)
  {
    v8 = scn_default_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      C3DRendererContextSetMatrix4x4UniformAtLocation_cold_1(v8, v9, v10, v11, v12, v13, v14, v15);
  }
  if (location != -1)
  {
    glUniform3fv(location, v4, v);
    if (a1)
      *(_DWORD *)(a1 + 256) += v4;
  }
}

void C3DRendererContextSetVector2UniformAtLocation(uint64_t a1, uint64_t location, GLfloat *v, uint64_t count)
{
  GLsizei v4;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = count;
  if (!count)
  {
    v8 = scn_default_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      C3DRendererContextSetMatrix4x4UniformAtLocation_cold_1(v8, v9, v10, v11, v12, v13, v14, v15);
  }
  if (location != -1)
  {
    glUniform2fv(location, v4, v);
    if (a1)
      *(_DWORD *)(a1 + 252) += v4;
  }
}

void C3DRendererContextSetIntUniformAtLocation(uint64_t a1, uint64_t location, GLint x)
{
  if (location != -1)
  {
    glUniform1i(location, x);
    if (a1)
      ++*(_DWORD *)(a1 + 248);
  }
}

void C3DRendererContextSetInt2UniformAtLocation(uint64_t a1, uint64_t location, GLint *a3, uint64_t a4)
{
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (!a4)
  {
    v7 = scn_default_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
      C3DRendererContextSetMatrix4x4UniformAtLocation_cold_1(v7, v8, v9, v10, v11, v12, v13, v14);
  }
  if (location != -1)
  {
    glUniform2i(location, *a3, a3[1]);
    if (a1)
      ++*(_DWORD *)(a1 + 248);
  }
}

void C3DRendererContextSetInt3UniformAtLocation(uint64_t a1, uint64_t location, GLint *a3, uint64_t a4)
{
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (!a4)
  {
    v7 = scn_default_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
      C3DRendererContextSetMatrix4x4UniformAtLocation_cold_1(v7, v8, v9, v10, v11, v12, v13, v14);
  }
  if (location != -1)
  {
    glUniform3i(location, *a3, a3[1], a3[2]);
    if (a1)
      ++*(_DWORD *)(a1 + 248);
  }
}

void C3DRendererContextSetInt4UniformAtLocation(uint64_t a1, uint64_t location, GLint *a3, uint64_t a4)
{
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (!a4)
  {
    v7 = scn_default_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
      C3DRendererContextSetMatrix4x4UniformAtLocation_cold_1(v7, v8, v9, v10, v11, v12, v13, v14);
  }
  if (location != -1)
  {
    glUniform4i(location, *a3, a3[1], a3[2], a3[3]);
    if (a1)
      ++*(_DWORD *)(a1 + 248);
  }
}

void C3DRendererContextSetFloatUniformAtLocation(uint64_t a1, uint64_t location, GLfloat *v, uint64_t count)
{
  GLsizei v4;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = count;
  if (!count)
  {
    v8 = scn_default_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      C3DRendererContextSetMatrix4x4UniformAtLocation_cold_1(v8, v9, v10, v11, v12, v13, v14, v15);
  }
  if (location != -1)
  {
    glUniform1fv(location, v4, v);
    if (a1)
      *(_DWORD *)(a1 + 244) += v4;
  }
}

void C3DRendererContextBindProgramObject(uint64_t a1, CFTypeRef cf)
{
  CFTypeRef v4;
  CFTypeRef v5;
  GLuint ProgramID;

  v4 = *(CFTypeRef *)(a1 + 176);
  if (v4 != cf)
  {
    if (v4)
    {
      CFRelease(v4);
      *(_QWORD *)(a1 + 176) = 0;
    }
    if (cf)
      v5 = CFRetain(cf);
    else
      v5 = 0;
    *(_QWORD *)(a1 + 176) = v5;
  }
  if (cf)
    ProgramID = C3DFXGLSLProgramObjectGetProgramID((uint64_t)cf);
  else
    ProgramID = 0;
  if (*(_DWORD *)(a1 + 1076) != ProgramID)
  {
    *(_DWORD *)(a1 + 1076) = ProgramID;
    glUseProgram(ProgramID);
    ++*(_DWORD *)(a1 + 228);
  }
}

BOOL C3DRendererContextExecuteSlotTextureProxy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *ImageProxy;
  uint64_t TextureSampler;
  _QWORD *ImageProxyResident;

  if (!a1 && (v8 = scn_default_log(), os_log_type_enabled(v8, OS_LOG_TYPE_FAULT)))
  {
    C3DEngineContextRenderScene_cold_2(v8, v9, v10, v11, v12, v13, v14, v15);
    if (a4)
      goto LABEL_6;
  }
  else if (a4)
  {
    goto LABEL_6;
  }
  v16 = scn_default_log();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
    C3DRendererContextExecuteSlotTextureProxy_cold_1(v16, v17, v18, v19, v20, v21, v22, v23);
LABEL_6:
  ImageProxy = (void *)C3DEffectSlotGetImageProxy(a4);
  if (ImageProxy)
  {
    TextureSampler = C3DEffectSlotGetTextureSampler(a4);
    if (!TextureSampler)
      TextureSampler = C3DTextureSamplerGetDefault();
    C3DRendererContextResetToDefaultStates(a1);
    ImageProxyResident = C3DResourceManagerMakeImageProxyResident(a2, ImageProxy, TextureSampler, a1, a3);
    C3DEffectSlotSetTextureFromImageProxy(a4, ImageProxyResident);
    *(_DWORD *)(a1 + 1076) = -1;
    *(_QWORD *)(a1 + 1104) = -1;
    *(_QWORD *)(a1 + 1112) = -1;
    *(_QWORD *)(a1 + 1080) = 0;
    *(_QWORD *)(a1 + 1096) = 0;
  }
  return ImageProxy != 0;
}

uint64_t C3DRendererContextInvalidateCache(uint64_t result)
{
  *(_DWORD *)(result + 1076) = -1;
  *(_QWORD *)(result + 1104) = -1;
  *(_QWORD *)(result + 1112) = -1;
  *(_QWORD *)(result + 1080) = 0;
  *(_QWORD *)(result + 1096) = 0;
  return result;
}

void C3DRendererContextSetupResidentMeshSourceAtLocation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *Accessor;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  const UInt8 *ValuePtrAtIndex;
  int ComponentsCountPerValue;
  unsigned int ComponentsValueType;
  unsigned int ComponentType;
  unsigned int v24;
  GLBOOLean v25;
  GLenum v26;
  NSObject *v27;
  NSObject *v28;
  GLsizei Library;
  GLuint InstancingDivisor;

  if (!a2)
  {
    v8 = scn_default_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      C3DMeshSourceCreateWithAccessor_cold_1(v8, v9, v10, v11, v12, v13, v14, v15);
  }
  if (a4 != -1)
  {
    Accessor = (_QWORD *)C3DMeshSourceGetAccessor(a2);
    v17 = (uint64_t)Accessor;
    if (a3)
    {
      v18 = *(uint64_t **)(a3 + 72);
      if (v18)
        v19 = *v18;
      else
        v19 = 0;
      ValuePtrAtIndex = (const UInt8 *)(v19 + C3DSourceAccessorGetOffset((uint64_t)Accessor));
    }
    else
    {
      ValuePtrAtIndex = C3DSourceAccessorGetValuePtrAtIndex(Accessor, 0);
    }
    ComponentsCountPerValue = C3DMeshSourceGetComponentsCountPerValue(a2);
    glEnableVertexAttribArray(a4);
    if (a1)
      ++*(_DWORD *)(a1 + 216);
    ComponentsValueType = C3DSourceAccessorGetComponentsValueType(v17);
    if (C3DBaseTypeGetCompoundType(ComponentsValueType, ComponentsCountPerValue) == ComponentsValueType)
    {
      ComponentType = C3DBaseTypeGetComponentType(ComponentsValueType);
      ComponentsCountPerValue = C3DBaseTypeGetComponentCount(ComponentsValueType);
      ComponentsValueType = ComponentType;
    }
    v24 = ComponentsValueType - 1;
    v25 = 0;
    v26 = 5126;
    switch(v24)
    {
      case 0u:
        break;
      case 1u:
        v25 = 0;
        v26 = 5124;
        break;
      case 3u:
        v25 = 0;
        goto LABEL_31;
      case 5u:
        v28 = scn_default_log();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
          C3DRendererContextSetupResidentMeshSourceAtLocation_cold_2();
        v25 = 0;
        break;
      case 0xDu:
        v25 = 1;
        v26 = 5122;
        break;
      case 0xEu:
        v25 = 0;
        v26 = 5131;
        break;
      case 0xFu:
        v25 = 0;
        goto LABEL_29;
      case 0x10u:
        v25 = 1;
        v26 = 5123;
        break;
      case 0x14u:
        v25 = 1;
LABEL_29:
        v26 = 5121;
        break;
      case 0x15u:
        v25 = 1;
LABEL_31:
        v26 = 5120;
        break;
      case 0x16u:
        v25 = 1;
        v26 = 33640;
        ComponentsCountPerValue = 4;
        break;
      default:
        v27 = scn_default_log();
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
          C3DRendererContextSetupResidentMeshSourceAtLocation_cold_1();
        v25 = 0;
        v26 = 5126;
        break;
    }
    Library = C3DSceneSourceGetLibrary(v17);
    glVertexAttribPointer(a4, ComponentsCountPerValue, v26, v25, Library, ValuePtrAtIndex);
    if (a1)
      ++*(_DWORD *)(a1 + 212);
    if ((*(_BYTE *)(a1 + 104) & 1) != 0)
    {
      InstancingDivisor = C3DMeshSourceGetInstancingDivisor(a2);
      glVertexAttribDivisor(a4, InstancingDivisor);
    }
  }
}

CFStringRef __CopyHashCodeFromShaderSources(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  CC_SHA256_CTX c;
  char __str[65];
  unsigned __int8 md[32];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  memset(&c, 0, sizeof(c));
  CC_SHA256_Init(&c);
  CFStringUpdateHash(a1);
  CFStringUpdateHash(a2);
  CC_SHA256_Final(md, &c);
  v4 = 0;
  v5 = __str;
  do
  {
    snprintf(v5, 3uLL, "%02x", md[v4++]);
    v5 += 2;
  }
  while (v4 != 32);
  return CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], __str, 0x8000100u);
}

_QWORD *C3DRendererContextCreateProgramObjectForProgram(uint64_t a1, uint64_t a2, CFDictionaryRef *a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int Profile;
  uint64_t ShaderSources;
  uint64_t v24;
  const __CFString *v25;
  const __CFString *v26;
  CFStringRef v27;
  _QWORD *ValueForKey;
  _QWORD *v29;
  NSObject *v30;
  NSObject *v31;
  NSObject *v33;
  NSObject *v34;
  uint64_t OverrideMaterial;
  uint64_t v37;
  uint64_t Callbacks;
  uint64_t v39;
  CFMutableStringRef Mutable;
  uint64_t IsClientProgram;
  unsigned int v42;
  CFErrorRef v43;
  void (*v44)(_QWORD, CFErrorRef, uint64_t);
  uint64_t UserInfo;
  __CFDictionary *v46;
  uint64_t v47;
  GLint params;

  if (!a1 && (v6 = scn_default_log(), os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)))
  {
    C3DEngineContextRenderScene_cold_2(v6, v7, v8, v9, v10, v11, v12, v13);
    if (a3)
      goto LABEL_6;
  }
  else if (a3)
  {
    goto LABEL_6;
  }
  v14 = scn_default_log();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    C3DRendererContextCreateProgramObjectForProgram_cold_5(v14, v15, v16, v17, v18, v19, v20, v21);
LABEL_6:
  Profile = C3DFXProgramGetProfile((uint64_t)a3);
  if (Profile >= 2)
  {
    if (Profile == 2)
    {
      v30 = scn_default_log();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
        C3DRendererContextCreateProgramObjectForProgram_cold_4();
    }
    else
    {
      v31 = scn_default_log();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
        C3DRendererContextCreateProgramObjectForProgram_cold_1();
    }
    return 0;
  }
  ShaderSources = C3DFXGLSLProgramGetShaderSources(a3);
  if (!ShaderSources)
  {
    v33 = scn_default_log();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      C3DRendererContextCreateProgramObjectForProgram_cold_2();
    return 0;
  }
  v25 = (const __CFString *)v24;
  if (!v24)
  {
    v34 = scn_default_log();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      C3DRendererContextCreateProgramObjectForProgram_cold_3();
    return 0;
  }
  v26 = (const __CFString *)ShaderSources;
  v27 = __CopyHashCodeFromShaderSources(ShaderSources, v24);
  ValueForKey = C3DKeyValueStoreGetValueForKey(a2, v27);
  if (ValueForKey)
  {
    v29 = ValueForKey;
    C3DFXGLSLProgramObjectAttachWithProgram((uint64_t)ValueForKey);
    __FillProgramObjectLocations(a3, (uint64_t)v29);
    CFRelease(v27);
    CFRetain(v29);
    return v29;
  }
  params = 0;
  glGetIntegerv(0x8B8Du, &params);
  if (a1)
    ++*(_DWORD *)(a1 + 240);
  OverrideMaterial = C3DGeometryGetOverrideMaterial((uint64_t)a3);
  v37 = OverrideMaterial;
  if (!OverrideMaterial)
  {
    v39 = 0;
    Mutable = 0;
    if (!*(_BYTE *)(a1 + 92))
      goto LABEL_31;
LABEL_30:
    Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
    goto LABEL_31;
  }
  Callbacks = C3DFXProgramDelegateGetCallbacks(OverrideMaterial);
  v39 = Callbacks;
  if (Callbacks && *(_QWORD *)(Callbacks + 16))
    goto LABEL_30;
  Mutable = 0;
LABEL_31:
  IsClientProgram = C3DFXProgramIsClientProgram((uint64_t)a3);
  v42 = C3DCreateProgram(a1, v26, v25, IsClientProgram, Mutable);
  if (Mutable)
  {
    if (CFStringGetLength(Mutable) >= 1)
    {
      if (v39)
      {
        v43 = C3DErrorCreate(0, Mutable, &stru_1EA5A6480);
        v44 = *(void (**)(_QWORD, CFErrorRef, uint64_t))(v39 + 16);
        UserInfo = C3DFXProgramDelegateGetUserInfo(v37);
        v44(0, v43, UserInfo);
        CFRelease(v43);
      }
      else if (*(_BYTE *)(a1 + 92))
      {
        v46 = *(__CFDictionary **)(a1 + 96);
        if (!v46)
        {
          v46 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          *(_QWORD *)(a1 + 96) = v46;
        }
        CFDictionaryAddValue(v46, a3, Mutable);
      }
    }
    CFRelease(Mutable);
  }
  if (v42 && (v47 = C3DFXGLSLProgramObjectCreateWithProgramID(v42)) != 0)
  {
    v29 = (_QWORD *)v47;
    __FillProgramObjectLocations(a3, v47);
    glUseProgram(params);
    C3DResourceManagerSetGLSLProgramObjectForSourceHash(a2, v27, v29);
  }
  else
  {
    glUseProgram(params);
    v29 = 0;
  }
  CFRelease(v27);
  return v29;
}

void __FillProgramObjectLocations(CFDictionaryRef *a1, uint64_t a2)
{
  GLuint ProgramID;
  int Profile;
  const __CFArray *v6;
  const __CFArray *v7;
  CFIndex Count;
  CFIndex v9;
  CFIndex j;
  const __CFString *ValueAtIndex;
  GLuint AttributeIndex;
  uint64_t i;
  GLchar *v14;
  const void *v15;
  __CFArray *Mutable;
  signed int v17;
  int UniformLocation;
  GLsizei v19;
  uint64_t v20;
  int v21;
  CFStringRef v22;
  GLchar *v23;
  const void *v24;
  signed int k;
  int AttribLocation;
  CFStringRef v27;
  CFIndex v28;
  const __CFDictionary *MaxUniformIndex;
  uint64_t v30;
  uint64_t v31;
  size_t v32;
  _QWORD *v33;
  _QWORD *v34;
  CFIndex m;
  const __CFString *v36;
  uint64_t UniformIndex;
  uint64_t v38;
  NSObject *v39;
  uint64_t v40;
  CFIndex v41;
  char *v42;
  GLuint v43;
  int v44;
  NSObject *v45;
  _QWORD *v46;
  CFDictionaryRef *cf;
  uint8_t buf;
  char v49[15];
  GLint v50;
  GLsizei length;
  GLint params[2];
  char buffer[4];
  _DWORD v54[19];

  *(_QWORD *)&v54[17] = *MEMORY[0x1E0C80C00];
  ProgramID = C3DFXGLSLProgramObjectGetProgramID(a2);
  Profile = C3DFXProgramGetProfile((uint64_t)a1);
  cf = a1;
  v6 = C3DFXGLSLProgramCopyAttributesNames(a1);
  v7 = v6;
  if (!v6 || !Profile)
  {
    for (i = 0; i != 14; ++i)
    {
      CFStringGetCString(kC3DVertexAttribDefaultNames[i], buffer, 64, 0x600u);
      glBindAttribLocation(ProgramID, i, buffer);
    }
LABEL_9:
    if (!v7)
      goto LABEL_11;
    goto LABEL_10;
  }
  Count = CFArrayGetCount(v6);
  if (Count >= 1)
  {
    v9 = Count;
    for (j = 0; j != v9; ++j)
    {
      ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v7, j);
      AttributeIndex = C3DFXGLSLProgramGetAttributeIndex(a1, ValueAtIndex);
      CFStringGetCString(ValueAtIndex, buffer, 64, 0x600u);
      glBindAttribLocation(ProgramID, AttributeIndex, buffer);
    }
    goto LABEL_9;
  }
LABEL_10:
  CFRelease(v7);
LABEL_11:
  glLinkProgram(ProgramID);
  *(_QWORD *)params = 0;
  length = 0;
  glGetProgramiv(ProgramID, 0x8B86u, &params[1]);
  glGetProgramiv(ProgramID, 0x8B87u, params);
  v14 = (GLchar *)malloc_type_malloc(params[0] + 1, 0x9995C124uLL);
  v15 = *(const void **)(a2 + 104);
  if (v15)
  {
    CFRelease(v15);
    *(_QWORD *)(a2 + 104) = 0;
  }
  *(_QWORD *)(a2 + 104) = CFDictionaryCreateMutable(0, params[1], MEMORY[0x1E0C9B390], 0);
  Mutable = CFArrayCreateMutable(0, params[1], MEMORY[0x1E0C9B378]);
  if (params[1] >= 1)
  {
    v17 = 0;
    do
    {
      glGetActiveUniform(ProgramID, v17, params[0], &length, 0, 0, v14);
      UniformLocation = glGetUniformLocation(ProgramID, v14);
      v19 = length;
      if (length)
      {
        v20 = length;
        if (v14[length - 1] == 93)
        {
          do
          {
            v19 = v20 - 1;
            length = v20 - 1;
            if (v20 < 2)
              break;
            v21 = v14[--v20];
          }
          while (v21 != 91);
        }
      }
      v14[v19] = 0;
      v22 = CFStringCreateWithCString(0, v14, 0x8000100u);
      CFArrayAppendValue(Mutable, v22);
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a2 + 104), v22, (const void *)(UniformLocation + 1));
      CFRelease(v22);
      ++v17;
    }
    while (v17 < params[1]);
  }
  free(v14);
  v50 = 0;
  glGetProgramiv(ProgramID, 0x8B89u, &v50);
  glGetProgramiv(ProgramID, 0x8B8Au, params);
  v23 = (GLchar *)malloc_type_malloc(params[0] + 1, 0xA605503BuLL);
  v24 = *(const void **)(a2 + 112);
  if (v24)
  {
    CFRelease(v24);
    *(_QWORD *)(a2 + 112) = 0;
  }
  *(_QWORD *)(a2 + 112) = CFDictionaryCreateMutable(0, v50, MEMORY[0x1E0C9B390], 0);
  if (v50 >= 1)
  {
    for (k = 0; k < v50; ++k)
    {
      glGetActiveAttrib(ProgramID, k, params[0], &length, 0, 0, v23);
      AttribLocation = glGetAttribLocation(ProgramID, v23);
      v23[length] = 0;
      v27 = CFStringCreateWithCString(0, v23, 0x8000100u);
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a2 + 112), v27, (const void *)(AttribLocation + 1));
      CFRelease(v27);
    }
  }
  free(v23);
  if (Mutable)
  {
    v28 = CFArrayGetCount(Mutable);
    MaxUniformIndex = _C3DFXGLSLProgramGetMaxUniformIndex(a1);
    v30 = (uint64_t)MaxUniformIndex + 1;
    v31 = (uint64_t)MaxUniformIndex + v28;
    v32 = 8 * ((_QWORD)MaxUniformIndex + v28) + 8;
    v33 = malloc_type_malloc(v32, 0x100004000313F17uLL);
    v34 = v33;
    if ((v31 & 0x8000000000000000) == 0)
      memset(v33, 255, v32);
    v46 = v34;
    if (v28 >= 1)
    {
      for (m = 0; m != v28; ++m)
      {
        v36 = (const __CFString *)CFArrayGetValueAtIndex(Mutable, m);
        UniformIndex = C3DFXGLSLProgramGetUniformIndex(cf, v36);
        if (UniformIndex == -1)
        {
          if (v30 > v31)
          {
            v39 = scn_default_log();
            if (os_log_type_enabled(v39, OS_LOG_TYPE_FAULT))
              __FillProgramObjectLocations_cold_2((uint8_t *)buffer, v54, v39);
          }
          v38 = v30 + 1;
        }
        else
        {
          v38 = v30;
          v30 = UniformIndex;
        }
        v40 = v30;
        v30 = v38;
        v41 = CFStringGetLength(v36) + 1;
        v42 = (char *)malloc_type_calloc(v41, 1uLL, 0xD9776BA1uLL);
        CFStringGetCString(v36, v42, v41, 0x600u);
        v43 = C3DFXGLSLProgramObjectGetProgramID(a2);
        v44 = glGetUniformLocation(v43, v42);
        if (v42)
          free(v42);
        if (v40 <= v31)
        {
          v46[v40] = v44;
        }
        else
        {
          v45 = scn_default_log();
          if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
            __FillProgramObjectLocations_cold_1(&buf, v49, v45);
        }
      }
    }
    C3DFXGLSLProgramObjectSetUniformsLocations(a2, v46, v30);
    free(v46);
    CFRelease(Mutable);
  }
}

void C3DRendererContextDeleteProgramObject(uint64_t a1, const void *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeID v12;
  GLuint ProgramID;

  if (!a2)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DRendererElementStateDrawRendererElement_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (!C3DVRAMResourceLockCount((uint64_t)a2) && (C3DVRAMResourceIsAttachment((uint64_t)a2) & 1) == 0)
  {
    v12 = CFGetTypeID(a2);
    if (v12 == C3DFXGLSLProgramObjectGetTypeID())
    {
      ProgramID = C3DFXGLSLProgramObjectGetProgramID((uint64_t)a2);
      if (ProgramID)
      {
        if (a1)
          --*(_DWORD *)(a1 + 400);
        glDeleteProgram(ProgramID);
      }
    }
  }
}

void C3DRendererContextDeleteBufferObject(_DWORD *a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int Size;
  int v13;
  NSObject *v14;
  uint8_t v15[12];
  GLuint buffers;

  if (!a2)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DRendererContextDeleteBufferObject_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (!C3DVRAMResourceLockCount(a2) && (C3DVRAMResourceIsAttachment(a2) & 1) == 0)
  {
    buffers = C3DBufferObjectGetBufferID(a2);
    if (!buffers)
    {
      v14 = scn_default_log();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v15 = 0;
        _os_log_impl(&dword_1DCCB8000, v14, OS_LOG_TYPE_DEFAULT, "Warning: Trying to delete an empty or already released VBO", v15, 2u);
      }
      goto LABEL_17;
    }
    Size = C3DBufferObjectGetSize(a2);
    v13 = *(_DWORD *)(a2 + 64);
    if (v13 == 1)
    {
      if (a1)
      {
        --a1[105];
        a1[111] -= Size;
        goto LABEL_16;
      }
    }
    else if (v13)
    {
      if (a1)
        goto LABEL_16;
    }
    else if (a1)
    {
      --a1[103];
      a1[110] -= Size;
LABEL_16:
      glDeleteBuffers(1, &buffers);
    }
LABEL_17:
    C3DVRAMResourceSetID(a2, 0);
  }
}

void C3DRendererContextApplyTextureSampler(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  GLenum v22;
  int WrapModeS;
  GLfloat v24;
  GLfloat v25;
  int WrapModeT;
  int ComparisonFunc;
  int v28;
  GLint v29;
  GLenum v30;
  GLenum v31;
  unsigned int MinFilter;
  unsigned int MagFilter;
  int v34;
  float v35;
  float v36;
  unsigned int *v37;
  float v38;
  float v39;
  float v40;

  if (!a2 && (v6 = scn_default_log(), os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)))
  {
    C3DRendererContextApplyTextureSampler_cold_2(v6, v7, v8, v9, v10, v11, v12, v13);
    if (a3)
      goto LABEL_6;
  }
  else if (a3)
  {
    goto LABEL_6;
  }
  v14 = scn_default_log();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    C3DTextureSamplerSetAnisotropy_cold_1(v14, v15, v16, v17, v18, v19, v20, v21);
LABEL_6:
  v22 = *(_DWORD *)(a2 + 88);
  WrapModeS = C3DTextureSamplerGetWrapModeS(a3);
  v24 = 33071.0;
  v25 = 33071.0;
  if (v22 == 3553)
  {
    if ((WrapModeS - 1) > 3)
      v25 = 10497.0;
    else
      v25 = flt_1DD0098B0[WrapModeS - 1];
  }
  glTexParameterf(v22, 0x2802u, v25);
  WrapModeT = C3DTextureSamplerGetWrapModeT(a3);
  if (v22 == 3553)
  {
    if ((WrapModeT - 1) > 3)
      v24 = 10497.0;
    else
      v24 = flt_1DD0098B0[WrapModeT - 1];
  }
  glTexParameterf(v22, 0x2803u, v24);
  ComparisonFunc = C3DTextureSamplerGetComparisonFunc(a3);
  if (ComparisonFunc)
  {
    v28 = ComparisonFunc;
    glTexParameteri(v22, 0x884Cu, 34894);
    v29 = gl_ComparisonFunc[v28];
    v30 = v22;
    v31 = 34893;
  }
  else
  {
    v30 = v22;
    v31 = 34892;
    v29 = 0;
  }
  glTexParameteri(v30, v31, v29);
  MinFilter = C3DTextureSamplerGetMinFilter(a3);
  MagFilter = C3DTextureSamplerGetMagFilter(a3);
  v34 = (*(unsigned __int8 *)(a2 + 80) << 31 >> 31) & C3DTextureSamplerGetMipFilter(a3);
  v35 = 9729.0;
  v36 = 9729.0;
  switch(v34)
  {
    case 2:
      if (MinFilter > 2)
        break;
      v37 = (unsigned int *)&unk_1DD00985C;
      goto LABEL_26;
    case 1:
      if (MinFilter >= 3)
        break;
      v37 = (unsigned int *)&unk_1DD009850;
      goto LABEL_26;
    case 0:
      v36 = 9729.0;
      if (MinFilter < 3)
      {
        v37 = dword_1DD009868;
LABEL_26:
        v36 = (float)v37[MinFilter];
      }
      break;
  }
  if (MagFilter <= 2)
    v35 = (float)dword_1DD009868[MagFilter];
  glTexParameterf(v22, 0x2800u, v35);
  glTexParameterf(v22, 0x2801u, v36);
  v38 = *(float *)(a3 + 64);
  if (*(float *)&C3DRendererContextApplyTextureSampler_largest_supported_anisotropy < 0.0)
  {
    glGetFloatv(0x84FFu, (GLfloat *)&C3DRendererContextApplyTextureSampler_largest_supported_anisotropy);
    if (a1)
      ++*(_DWORD *)(a1 + 240);
  }
  v39 = 1.0;
  if (v38 == -1.0)
    v40 = 1.0;
  else
    v40 = v38;
  if (*(float *)&C3DRendererContextApplyTextureSampler_largest_supported_anisotropy < v40)
    v40 = *(float *)&C3DRendererContextApplyTextureSampler_largest_supported_anisotropy;
  if (v40 >= 1.0)
    v39 = v40;
  glTexParameterf(v22, 0x84FEu, v39);
}

uint64_t C3DGLTextureTypePixelSize(int a1, int a2)
{
  uint64_t result;

  if ((a2 - 5120) > 6)
  {
    result = 2;
    if (((a2 - 33635) > 3 || a2 == 33636) && (a2 - 32819) >= 2)
      return 4;
  }
  else if (((1 << a2) & 0x70) != 0)
  {
    if (a1 != 6407)
    {
      if (a1 == 32993 || a1 == 6408)
        return 16;
      return 0;
    }
    return 12;
  }
  else if (((1 << a2) & 3) != 0)
  {
    if (a1 != 6407)
    {
      if (a1 == 32993 || a1 == 6408)
        return 4;
      return 0;
    }
    return 3;
  }
  else
  {
    if (a1 != 6407)
    {
      if (a1 == 32993 || a1 == 6408)
        return 8;
      return 0;
    }
    return 6;
  }
  return result;
}

uint64_t _C3DRendererContextComputeRenderBufferInternalSize(uint64_t a1, int a2, int a3, int a4)
{
  GLint v7;
  int v8;
  GLint v9;
  int v10;
  GLint v11;
  int v12;
  GLint params;

  params = 0;
  glGetRenderbufferParameteriv(0x8D41u, 0x8D50u, &params);
  v7 = params;
  params = 0;
  glGetRenderbufferParameteriv(0x8D41u, 0x8D51u, &params);
  v8 = params + v7;
  params = 0;
  glGetRenderbufferParameteriv(0x8D41u, 0x8D52u, &params);
  v9 = params;
  params = 0;
  glGetRenderbufferParameteriv(0x8D41u, 0x8D53u, &params);
  v10 = v8 + v9 + params;
  params = 0;
  glGetRenderbufferParameteriv(0x8D41u, 0x8D54u, &params);
  v11 = params;
  params = 0;
  glGetRenderbufferParameteriv(0x8D41u, 0x8D55u, &params);
  v12 = v10 + v11 + params;
  if (v12 < 0 != __OFADD__(v10, v11 + params))
    v12 += 7;
  return (v12 >> 3) * (uint64_t)(a3 * a2 * a4);
}

float32x2_t *__C3DRendererContextGetDefaultInvalidTexture(uint64_t a1)
{
  float32x2_t *result;
  uint64_t v3;
  __int128 v4;

  result = *(float32x2_t **)(a1 + 64);
  if (!result)
  {
    v4 = xmmword_1DD0098A0;
    v3 = C3DTextureSamplerBilinearNoAnisotropy();
    result = _C3DRendererContextCreateTextureWithSize((_DWORD *)a1, 4, 4, v3, 6408, 0x80E1u, 0x1401u, (float32x4_t *)&v4);
    *(_QWORD *)(a1 + 64) = result;
  }
  return result;
}

float32x2_t *_C3DRendererContextCreateTextureWithSize(_DWORD *a1, GLsizei a2, GLsizei a3, uint64_t a4, GLint a5, GLenum a6, GLenum a7, float32x4_t *a8)
{
  void *pixels;
  int16x8_t v17;
  float32x2_t *v18;
  unsigned __int32 __pattern4;
  GLint params[2];

  *(_QWORD *)params = 0;
  glGetIntegerv(0x8069u, params);
  glGenTextures(1, (GLuint *)&params[1]);
  if (a1)
  {
    ++a1[101];
    glBindTexture(0xDE1u, params[1]);
    ++a1[58];
  }
  else
  {
    glBindTexture(0xDE1u, params[1]);
  }
  if (a5 == 6408 && a8)
  {
    pixels = C3DMalloc((4 * a3 * a2));
    v17 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(*a8, (float32x4_t)vdupq_n_s32(0x437F0000u)));
    *(int16x4_t *)v17.i8 = vrev32_s16(vmovn_s32((int32x4_t)v17));
    *(int8x8_t *)v17.i8 = vext_s8(*(int8x8_t *)v17.i8, *(int8x8_t *)v17.i8, 6uLL);
    __pattern4 = vmovn_s16(v17).u32[0];
    memset_pattern4(pixels, &__pattern4, (4 * a3 * a2));
    glTexImage2D(0xDE1u, 0, 6408, a2, a3, 0, 0x80E1u, 0x1401u, 0);
    if (pixels)
    {
      glTexSubImage2D(0xDE1u, 0, 0, 0, a2, a3, 0x80E1u, 0x1401u, pixels);
      if (a1)
        a1[69] += a3 * a2 * C3DGLTextureTypePixelSize(32993, 5121);
      free(pixels);
    }
  }
  else
  {
    glTexImage2D(0xDE1u, 0, a5, a2, a3, 0, a6, a7, 0);
  }
  v18 = (float32x2_t *)C3DTextureCreate();
  C3DTextureSetID((uint64_t)v18, params[1], 3553);
  C3DTextureSetFormat((uint64_t)v18, a5);
  v18[8] = vcvt_f32_s32((int32x2_t)__PAIR64__(a3, a2));
  C3DTextureSetServerStorageSize((uint64_t)v18, 0);
  C3DRendererContextApplyTextureSampler((uint64_t)a1, (uint64_t)v18, a4);
  glBindTexture(0xDE1u, 0);
  if (a1)
    ++a1[58];
  glBindTexture(0xDE1u, params[0]);
  return v18;
}

void C3DRendererContextBindTexture(uint64_t a1, float32x2_t *DefaultInvalidTexture, uint64_t a3, uint64_t a4, unsigned int a5)
{
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int TextureUnitOffset;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  GLenum TargetMode;
  GLuint ID;
  float32x2_t v28;

  if (a5 <= 7)
  {
    if (!a1)
    {
      v9 = scn_default_log();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
        C3DEngineContextRenderScene_cold_2(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    TextureUnitOffset = C3DRendererContextGetTextureUnitOffset(a1);
    glActiveTexture(a5 + TextureUnitOffset + 33984);
    if (!DefaultInvalidTexture)
    {
      DefaultInvalidTexture = __C3DRendererContextGetDefaultInvalidTexture(a1);
      if (!DefaultInvalidTexture)
      {
        v18 = scn_default_log();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_FAULT))
          C3DRendererContextApplyTextureSampler_cold_2(v18, v19, v20, v21, v22, v23, v24, v25);
        DefaultInvalidTexture = 0;
      }
    }
    TargetMode = C3DTextureGetTargetMode((uint64_t)DefaultInvalidTexture);
    ID = C3DTextureGetID((uint64_t)DefaultInvalidTexture);
    glBindTexture(TargetMode, ID);
    if (a1)
      ++*(_DWORD *)(a1 + 232);
    *(_DWORD *)(a1 + 4 * a5 + 1040) = TargetMode;
    if (*(_DWORD *)(a1 + 1072) <= a5)
      *(_DWORD *)(a1 + 1072) = a5 + 1;
    if (a3)
    {
      v28 = DefaultInvalidTexture[12];
      if (*(_QWORD *)&v28 != C3DMeshSourceGetMTLVertexFormat(a3))
      {
        C3DRendererContextApplyTextureSampler(a1, (uint64_t)DefaultInvalidTexture, a3);
        DefaultInvalidTexture[12] = (float32x2_t)C3DMeshSourceGetMTLVertexFormat(a3);
      }
    }
  }
}

void _C3DRendererContextBindTextureGL(uint64_t a1, GLenum target, GLuint texture)
{
  glBindTexture(target, texture);
  if (a1)
    ++*(_DWORD *)(a1 + 232);
}

void C3DRendererContextDeleteTexture(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  GLuint textures;

  if (!a2)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DRendererContextApplyTextureSampler_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (!C3DVRAMResourceLockCount(a2) && (C3DVRAMResourceIsAttachment(a2) & 1) == 0)
  {
    textures = C3DVRAMResourceGetID(a2);
    if (textures)
    {
      if (a1)
      {
        *(_DWORD *)(a1 + 452) -= C3DTextureGetServerStorageSize(a2);
        --*(_DWORD *)(a1 + 404);
      }
      glDeleteTextures(1, &textures);
      *(_QWORD *)(a2 + 48) = 0;
    }
  }
}

int32x2_t *C3DRendererContextCreateTextureWithImage(float32x2_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int ImageType;
  BOOL v15;
  float32x2_t TextureSize;
  CFTypeRef v17;
  const void *v18;
  GLenum v19;
  __n64 v20;
  float32x2_t v21;
  uint32x2_t v22;
  CGImage *v23;
  CGImage *v24;
  int v25;
  GLenum v26;
  NSObject *v27;
  uint64_t v28;
  CFTypeRef v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int32x2_t *v38;
  const void *v39;
  NSObject *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  float32x2_t v48;
  __n64 v49;
  float32x2_t v50;
  int32x2_t v51;
  float32x2_t v52;
  uint32x2_t v53;
  CGImage *v54;
  CGImage *v55;
  const void *v56;
  int v57;
  uint64_t TextureRawData;
  _BOOL4 IsCubeMap;
  const __CFArray *ValueAtIndex;
  CFIndex Count;
  __n128 v62;
  CFIndex i;
  const void *v64;
  CGContext *v65;
  CGContext *v66;
  CGContextRef v67;
  NSObject *v68;
  char *Data;
  char *v70;
  unsigned int BytesPerRow;
  unsigned int BitsPerComponent;
  unsigned int v73;
  uint64_t Width;
  unsigned int v75;
  int v76;
  BOOL v77;
  NSObject *v78;
  NSObject *v79;
  unsigned int v80;
  GLint v81;
  __int16 BitmapInfo;
  int v83;
  int v84;
  float64x2_t v85;
  int v86;
  int v87;
  int v88;
  int v89;
  NSObject *v90;
  char *v91;
  int v92;
  uint64x2_t v93;
  char *v94;
  float v95;
  float v96;
  unsigned int v97;
  int v98;
  int v99;
  int v100;
  uint64_t j;
  char *v102;
  char *v103;
  unsigned int v104;
  int v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  uint64_t v111;
  unsigned int v112;
  int Height;
  unsigned int v115;
  unsigned int v116;
  BOOL v117;
  GLenum target;
  const void *v119;
  const void *v120;
  unsigned int v121;
  __int32 v122;
  double v123;
  const void *v124;
  __int32 v125;
  float32x2_t v126;
  float64x2_t v127;
  uint64x2_t v128;
  GLint params;
  GLuint textures;
  _QWORD v131[5];
  uint64_t v132;
  uint64_t v133;
  void *v134;
  void *v135;
  uint64x2_t v136;
  uint64_t v137;
  unint64_t v138;
  int v139;
  BOOL v140;
  GLint v141[3];

  v4 = a2;
  textures = 0;
  if (!a2)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      C3DImageGetURL_cold_1(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  params = 0;
  glGetIntegerv(0x8069u, &params);
  ImageType = C3DImageGetImageType(v4);
  v15 = C3DTextureSamplerUseMipmaps(a3);
  TextureSize = (float32x2_t)C3DImageGetTextureSize(v4);
  if (C3DImageIsCubeMap(v4))
  {
    v17 = 0;
    v15 = 0;
    v18 = 0;
    *(_DWORD *)(a3 + 36) = 0;
    v19 = 34067;
  }
  else
  {
    v19 = C3DRendererContextInferTextureTargetForImageTypeAndTextureSampler(ImageType);
    v20.n64_u64[0] = C3DRendererContextInferTextureSizeForImageAndTextureSampler(v4, a3).n64_u64[0];
    v21 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)v20.n64_u64[0], a1[3]), (int8x8_t)a1[3], (int8x8_t)v20.n64_u64[0]);
    v22 = (uint32x2_t)vceq_f32(v21, TextureSize);
    if ((vpmin_u32(v22, v22).u32[0] & 0x80000000) != 0)
    {
      v18 = 0;
    }
    else
    {
      v23 = C3DImageCopyCGImage(v4);
      if (v23)
      {
        v24 = v23;
        v18 = (const void *)C3DImageCreateWithCGImageAndSize(v23, *(double *)&v21);
        v25 = C3DImageNeedsUnpremultiply(v4);
        C3DImageSetNeedsUnpremultiply((uint64_t)v18, v25);
        CFRelease(v24);
        v4 = (uint64_t)v18;
      }
      else
      {
        v26 = v19;
        v27 = scn_default_log();
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
          C3DRendererContextCreateTextureWithImage_cold_7(v4, v27, v28);
        v18 = 0;
        v19 = v26;
      }
    }
    if (C3DImageHasTextureRawData(v4))
    {
      v17 = 0;
      v19 = 3553;
    }
    else
    {
      v29 = C3DImageCopyBitmap(v4, 1);
      if (!v29)
      {
        v38 = 0;
        v39 = 0;
        goto LABEL_130;
      }
      v17 = v29;
    }
  }
  glGenTextures(1, &textures);
  if (!textures)
  {
    v30 = scn_default_log();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_FAULT))
    {
      C3DRendererContextCreateTextureWithImage_cold_6(v30, v31, v32, v33, v34, v35, v36, v37);
      if (a1)
        goto LABEL_20;
LABEL_23:
      glBindTexture(v19, textures);
      goto LABEL_24;
    }
  }
  if (!a1)
    goto LABEL_23;
LABEL_20:
  ++a1[50].i32[1];
  glBindTexture(v19, textures);
  ++a1[29].i32[0];
LABEL_24:
  v38 = (int32x2_t *)C3DTextureCreate();
  v38[8] = (int32x2_t)TextureSize;
  C3DTextureSetID((uint64_t)v38, textures, v19);
  v38[5] = (int32x2_t)v4;
  if (!v4)
  {
    v40 = scn_default_log();
    if (os_log_type_enabled(v40, OS_LOG_TYPE_FAULT))
      C3DImageGetURL_cold_1(v40, v41, v42, v43, v44, v45, v46, v47);
  }
  v141[0] = 0;
  glGetIntegerv(0x8069u, v141);
  v48 = (float32x2_t)C3DImageGetTextureSize(v4);
  v49.n64_u64[0] = C3DRendererContextInferTextureSizeForImageAndTextureSampler(v4, a3).n64_u64[0];
  v50 = a1[3];
  v51 = vcgt_f32((float32x2_t)v49.n64_u64[0], v50);
  v52.i32[0] = vbsl_s8((int8x8_t)vdup_lane_s32(v51, 0), (int8x8_t)v50, (int8x8_t)v49.n64_u64[0]).u32[0];
  v125 = v52.i32[0];
  v52.i32[1] = v49.n64_i32[1];
  v122 = vbsl_s8((int8x8_t)vdup_lane_s32(v51, 1), *(int8x8_t *)&v50, *(int8x8_t *)&v52).i32[1];
  v52.i32[1] = v122;
  v53 = (uint32x2_t)vceq_f32(v52, v48);
  if ((vpmin_u32(v53, v53).u32[0] & 0x80000000) != 0
    || (v123 = *(double *)&v52, (v54 = C3DImageCopyCGImage(v4)) == 0))
  {
    v56 = 0;
  }
  else
  {
    v55 = v54;
    v56 = (const void *)C3DImageCreateWithCGImageAndSize(v54, v123);
    v57 = C3DImageNeedsUnpremultiply(v4);
    C3DImageSetNeedsUnpremultiply((uint64_t)v56, v57);
    CFRelease(v55);
    v4 = (uint64_t)v56;
  }
  if (C3DImageHasTextureRawData(v4))
  {
    v124 = v56;
    TextureRawData = C3DImageGetTextureRawData(v4);
    IsCubeMap = C3DImageIsCubeMap(v4);
    ValueAtIndex = *(const __CFArray **)(TextureRawData + 40);
    v39 = v17;
    if (IsCubeMap)
      ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(ValueAtIndex, 0);
    Count = CFArrayGetCount(ValueAtIndex);
    v132 = MEMORY[0x1E0C809B0];
    v62.n128_u64[0] = 0x40000000;
    v133 = 0x40000000;
    v134 = ___C3DRendererContextFillTextureWithImage_block_invoke;
    v135 = &__block_descriptor_tmp_50;
    v136.i64[0] = Count;
    v136.u64[1] = (unint64_t)v48;
    v137 = TextureRawData;
    v138 = (unint64_t)a1;
    if (IsCubeMap)
    {
      for (i = 0; i != 6; ++i)
      {
        v64 = CFArrayGetValueAtIndex(*(CFArrayRef *)(TextureRawData + 40), i);
        ((void (*)(uint64_t *, _QWORD, const void *, _QWORD))v134)(&v132, i, v64, (i + 34069));
      }
    }
    else
    {
      ___C3DRendererContextFillTextureWithImage_block_invoke((uint64_t)&v132, 0, *(CFArrayRef *)(TextureRawData + 40), v19, v62);
    }
    v76 = 0;
    v77 = Count == 1;
    goto LABEL_126;
  }
  v120 = v17;
  v65 = (CGContext *)C3DImageCopyBitmap(v4, 1);
  if (v65)
  {
    v66 = v65;
    v119 = v18;
    if ((C3DLinearRenderingIsEnabled() & 1) != 0 || C3DWideGamutIsUsed())
    {
      v67 = C3DCreateSRGBBitmapContextWithContext(v66);
      if (v67 != v66 && (_C3DRendererContextFillTextureWithImage_done & 1) == 0)
      {
        _C3DRendererContextFillTextureWithImage_done = 1;
        v68 = scn_default_log();
        if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
          C3DRendererContextCreateTextureWithImage_cold_4();
      }
      CGContextRelease(v66);
      v66 = v67;
    }
    Data = (char *)CGBitmapContextGetData(v66);
    if (Data)
    {
      v70 = Data;
      v117 = v15;
      target = v19;
      v126 = (float32x2_t)__PAIR64__(v122, v125);
      BytesPerRow = CGBitmapContextGetBytesPerRow(v66);
      BitsPerComponent = CGBitmapContextGetBitsPerComponent(v66);
      v73 = CGBitmapContextGetBitsPerPixel(v66) / BitsPerComponent;
      Width = CGBitmapContextGetWidth(v66);
      v121 = BitsPerComponent;
      v116 = BytesPerRow;
      Height = CGBitmapContextGetHeight(v66);
      if (BytesPerRow == ((BitsPerComponent * (unint64_t)v73 * Width) >> 3))
      {
        v75 = v73;
      }
      else
      {
        v75 = v73;
        v80 = ~(BytesPerRow / v73 * v73) + BytesPerRow;
        if (v80 <= 7)
        {
          v81 = dword_1DD009874[v80];
LABEL_62:
          glPixelStorei(0xCF5u, v81);
          BitmapInfo = CGBitmapContextGetBitmapInfo(v66);
          v83 = BitmapInfo & 0x1B;
          if (v83 != 1 || (v84 = BitmapInfo & 0x7000, (BitmapInfo & 0x7000) != 0) && v84 != 12288 && v84 != 0x4000)
            v83 = 0;
          v85 = vcvtq_f64_f32(v126);
          v124 = v56;
          v115 = v75;
          if (v75 == 1)
          {
            v76 = 6409;
          }
          else
          {
            v86 = v83 | ((unsigned __int16)(BitmapInfo & 0x100) >> 8);
            if (v75 == 4)
            {
              v76 = 6408;
              if (v86)
                v87 = 6408;
              else
                v87 = 32993;
              if ((BitmapInfo & 0x100) != 0)
                v88 = 5131;
              else
                v88 = 5123;
              if (v121 == 16)
                v89 = v88;
              else
                v89 = 5121;
LABEL_88:
              v128 = vcvtq_u64_f64(v85);
              if (C3DImageNeedsUnpremultiply(v4) && C3DImageHasAlpha(v4))
              {
                v91 = 0;
                v92 = v89;
                v93 = v128;
                if (v89 != 5123 && v87 == 6408)
                {
                  v94 = (char *)C3DMalloc(Height * v116);
                  v91 = v94;
                  if (Height)
                  {
                    v98 = 0;
                    v99 = 0;
                    v87 = 6408;
                    do
                    {
                      v100 = v98;
                      for (j = Width; j; --j)
                      {
                        v102 = &v70[v100];
                        v103 = &v94[v100];
                        v104 = v102[3];
                        if (v102[3])
                        {
                          if (v104 == 255)
                          {
                            *v103 = *v102;
                            v103[1] = v102[1];
                            LOBYTE(v105) = v102[2];
                          }
                          else
                          {
                            v106 = 1.0 / (float)v104;
                            LOBYTE(v95) = *v102;
                            v107 = v106 * (float)LODWORD(v95);
                            LOBYTE(v96) = v102[1];
                            v96 = v106 * (float)LODWORD(v96);
                            LOBYTE(v97) = v102[2];
                            v108 = v106 * (float)v97;
                            v97 = 1132396544;
                            if (v107 <= 1.0)
                              v109 = v107 * 255.0;
                            else
                              v109 = 255.0;
                            *v103 = (int)v109;
                            if (v96 <= 1.0)
                              v95 = v96 * 255.0;
                            else
                              v95 = 255.0;
                            v103[1] = (int)v95;
                            if (v108 <= 1.0)
                              v110 = v108 * 255.0;
                            else
                              v110 = 255.0;
                            v105 = (int)v110;
                          }
                          v103[2] = v105;
                          v103[3] = v102[3];
                        }
                        else
                        {
                          *(_DWORD *)v103 = 0;
                        }
                        v100 += 4;
                      }
                      ++v99;
                      v98 += v116;
                    }
                    while (v99 != Height);
                  }
                  else
                  {
                    v87 = 6408;
                  }
                  v92 = v89;
                  v93 = v128;
                }
                if (v91)
                  v70 = v91;
              }
              else
              {
                v91 = 0;
                v92 = v89;
                v93 = v128;
              }
              v111 = MEMORY[0x1E0C809B0];
              v132 = MEMORY[0x1E0C809B0];
              v133 = 0x40000000;
              v134 = ___C3DRendererContextFillTextureWithImage_block_invoke_51;
              v135 = &__block_descriptor_tmp_53;
              v136 = v93;
              v138 = __PAIR64__(v87, v76);
              v139 = v92;
              v140 = v117;
              v137 = (uint64_t)a1;
              if (C3DImageIsCubeMap(v4))
              {
                v112 = C3DImageGetImageType(v4);
                v131[0] = v111;
                v131[1] = 0x40000000;
                v131[2] = ___C3DRendererContextFillTextureWithImage_block_invoke_2;
                v131[3] = &unk_1EA59FE18;
                v131[4] = &v132;
                C3DImageEnumerateCubeMapFacePixelBuffers(v112, v128.i64[0], v116, v128.i64[0] * ((v115 * v121) >> 3), (v115 * v121) >> 3, (uint64_t)v70, (uint64_t)v131);
                v19 = target;
              }
              else
              {
                v19 = target;
                ___C3DRendererContextFillTextureWithImage_block_invoke_51((uint64_t)&v132, target, v70);
              }
              v18 = v119;
              if (v66)
                CFRelease(v66);
              if (v91)
                free(v91);
              v77 = 0;
              v39 = v120;
LABEL_126:
              C3DTextureSetFormat((uint64_t)v38, v76);
              v56 = v124;
              if (!v124)
                goto LABEL_128;
              goto LABEL_127;
            }
            if ((v86 & 1) != 0)
            {
              v76 = 6407;
            }
            else
            {
              v127 = v85;
              v90 = scn_default_log();
              if (os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
                C3DRendererContextCreateTextureWithImage_cold_3();
              v76 = 6407;
              v85 = v127;
            }
          }
          if (v121 == 16)
            v89 = 5123;
          else
            v89 = 5121;
          v87 = v76;
          goto LABEL_88;
        }
      }
      v81 = 1;
      goto LABEL_62;
    }
    v79 = scn_default_log();
    if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
      C3DRendererContextCreateTextureWithImage_cold_2();
    if (v66)
      CFRelease(v66);
  }
  else
  {
    v78 = scn_default_log();
    if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
      C3DRendererContextCreateTextureWithImage_cold_1(v4, v78);
  }
  v77 = 0;
  v39 = v120;
  if (v56)
  {
LABEL_127:
    C3DImageReleaseBitmapCache((uint64_t)v56);
    CFRelease(v56);
  }
LABEL_128:
  glBindTexture(0xDE1u, v141[0]);
  v38[10].i8[0] = (v38[10].i8[0] & 0xFE | v77) ^ 1;
  C3DTextureSetServerStorageSize((uint64_t)v38, 0);
  glBindTexture(v19, 0);
  if (a1)
    ++a1[29].i32[0];
LABEL_130:
  if (v18)
  {
    C3DImageReleaseBitmapCache((uint64_t)v18);
    CFRelease(v18);
  }
  glBindTexture(0xDE1u, params);
  if (v39)
    CFRelease(v39);
  return v38;
}

uint64_t C3DRendererContextInferTextureTargetForImageTypeAndTextureSampler(unsigned int a1)
{
  int v1;
  NSObject *v3;
  uint8_t v4[16];

  v1 = C3DEngineContextInferTextureTypeForImageTypeAndTextureSampler(a1);
  if (v1 != 2)
  {
    if (v1 == 4)
      return 34067;
    v3 = scn_default_log();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1DCCB8000, v3, OS_LOG_TYPE_DEFAULT, "Warning: C3DRendererContextInferTextureTargetForImageTypeAndTextureSampler: called with kC3DTextureUntype type should be resolved before calling it, using GL_TEXTURE_2D as fallback", v4, 2u);
    }
  }
  return 3553;
}

__n64 C3DRendererContextInferTextureSizeForImageAndTextureSampler(uint64_t a1, uint64_t a2)
{
  unsigned int ImageType;
  int WrapModeS;
  int WrapModeT;
  __n64 result;
  int v8;
  int v9;
  int v10;
  int v11;
  int32x2_t TextureSize;

  TextureSize = C3DImageGetTextureSize(a1);
  ImageType = C3DImageGetImageType(a1);
  if (C3DRendererContextInferTextureTargetForImageTypeAndTextureSampler(ImageType) == 3553
    && ((WrapModeS = C3DTextureSamplerGetWrapModeS(a2),
         WrapModeT = C3DTextureSamplerGetWrapModeT(a2),
         C3DTextureSamplerGetMipFilter(a2))
     || (WrapModeS & 0xFFFFFFFD) != 1
     || (WrapModeT & 0xFFFFFFFD) != 1))
  {
    result.n64_u64[0] = (unint64_t)TextureSize;
    if (((int)*(float *)TextureSize.i32 & ((int)*(float *)TextureSize.i32 - 1)) != 0)
    {
      v8 = 1;
      do
      {
        v9 = v8;
        v8 *= 2;
      }
      while (v9 < (int)*(float *)TextureSize.i32);
      result.n64_f32[0] = (float)v9;
    }
    if (((int)*(float *)&TextureSize.i32[1] & ((int)*(float *)&TextureSize.i32[1] - 1)) != 0)
    {
      v10 = 1;
      do
      {
        v11 = v10;
        v10 *= 2;
      }
      while (v11 < (int)*(float *)&TextureSize.i32[1]);
      result.n64_f32[1] = (float)v11;
    }
  }
  else
  {
    return (__n64)TextureSize;
  }
  return result;
}

uint64_t C3DCreateTextureFromIOSurface(uint64_t a1, const void *a2, int a3, uint64_t a4, double a5)
{
  void *GLContext;
  uint64_t v11;
  GLuint textures;

  textures = 0;
  glGenTextures(1, &textures);
  glBindTexture(0xDE1u, textures);
  if (a1)
    ++*(_DWORD *)(a1 + 232);
  glTexParameteri(0xDE1u, 0x2801u, 9729);
  glTexParameteri(0xDE1u, 0x2800u, 9729);
  glTexParameteri(0xDE1u, 0x2802u, 33071);
  glTexParameteri(0xDE1u, 0x2803u, 33071);
  GLContext = (void *)C3DRendererContextGetGLContext(a1);
  C3DIOSurfaceToTexImage((uint64_t)a2, GLContext, 0xDE1u, a3, a5);
  v11 = C3DTextureCreate();
  C3DTextureSetID(v11, textures, 3553);
  *(double *)(v11 + 64) = a5;
  *(_BYTE *)(v11 + 80) &= ~1u;
  *(_QWORD *)(v11 + 104) = CFRetain(a2);
  C3DTextureSetFormat(v11, a3);
  C3DTextureSetServerStorageSize(v11, 0);
  C3DRendererContextApplyTextureSampler(a1, v11, a4);
  glBindTexture(0xDE1u, 0);
  if (a1)
    ++*(_DWORD *)(a1 + 232);
  return v11;
}

double *C3DRendererContextCreateRenderTargetWithDescription(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double *v23;
  double v24;
  NSObject *v25;
  _BOOL4 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  _DWORD *v36;
  int v37;
  const void *TextureWithSize;
  NSObject *v39;
  uint64_t v40;
  GLuint v41;
  NSObject *v42;
  IOSurfaceRef v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  double Size;
  GLint params;
  GLuint renderbuffers;

  if (!a1)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      C3DEngineContextRenderScene_cold_2(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  v14 = BYTE1(a2);
  if (BYTE1(a2) != C3DFramebufferGetSampleCount(a3))
  {
    v15 = scn_default_log();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_FAULT))
      C3DRendererContextCreateRenderTargetWithDescription_cold_4(v15, v16, v17, v18, v19, v20, v21, v22);
  }
  v23 = (double *)C3DRenderTargetCreate();
  Size = C3DFramebufferGetSize(a3);
  C3DRenderTargetSetDescription((uint64_t)v23, a2);
  v24 = Size;
  v23[5] = Size;
  if ((a2 & 0x1000000) != 0)
  {
    if (!a1)
    {
      v25 = scn_default_log();
      v26 = os_log_type_enabled(v25, OS_LOG_TYPE_FAULT);
      v24 = Size;
      if (v26)
      {
        C3DEngineContextRenderScene_cold_2(v25, v27, v28, v29, v30, v31, v32, v33);
        v24 = Size;
      }
    }
    if (*(float *)&v24 == 0.0 || (v34 = *((float *)&v24 + 1), *((float *)&v24 + 1) == 0.0))
    {
      v42 = scn_default_log();
      if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
        C3DRendererContextCreateRenderTargetWithDescription_cold_2();
      goto LABEL_25;
    }
    v35 = C3DTextureSamplerNearest();
    v36 = (_DWORD *)(a1 + 12 * a2);
    v37 = v36[295];
    if ((a2 & 0x8000000) != 0)
    {
      v43 = SCNIOSurfaceCreateWithSize(Size);
      TextureWithSize = (const void *)C3DCreateTextureFromIOSurface(a1, v43, v37, v35, Size);
      CFRelease(v43);
      if (!TextureWithSize)
      {
LABEL_25:
        CFRelease(v23);
        return 0;
      }
    }
    else
    {
      TextureWithSize = _C3DRendererContextCreateTextureWithSize((_DWORD *)a1, (int)*(float *)&Size, (int)v34, v35, v37, v36[296], v36[297], 0);
      if (!TextureWithSize)
        goto LABEL_25;
    }
    C3DRenderTargetSetTexture((uint64_t)v23, TextureWithSize);
    *((_QWORD *)v23 + 8) = C3DTextureGetServerStorageSize((uint64_t)TextureWithSize);
    CFRelease(TextureWithSize);
    return v23;
  }
  if (*(float *)&Size == 0.0 || *((float *)&Size + 1) == 0.0)
  {
    v39 = scn_default_log();
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
      C3DRendererContextCreateRenderTargetWithDescription_cold_1();
    v40 = 0;
    v41 = 0;
  }
  else
  {
    renderbuffers = 0;
    glGenRenderbuffers(1, &renderbuffers);
    if (a1)
    {
      ++*(_DWORD *)(a1 + 416);
      params = 0;
      glGetIntegerv(0x8CA7u, &params);
      ++*(_DWORD *)(a1 + 240);
    }
    else
    {
      params = 0;
      glGetIntegerv(0x8CA7u, &params);
    }
    glBindRenderbuffer(0x8D41u, renderbuffers);
    if (a2 == 41 || a2 == 44 || (v44 = *(_QWORD *)(a3 + 136)) == 0)
    {
      v48 = a1 + 4 * a2;
      v46 = (int)*(float *)&Size;
      v47 = (int)*((float *)&Size + 1);
      if (v14 < 2)
        glRenderbufferStorage(0x8D41u, *(_DWORD *)(v48 + 1732), (int)*(float *)&Size, (int)*((float *)&Size + 1));
      else
        v45 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(a1 + 1984))(36161, v14, *(unsigned int *)(v48 + 1732), (int)*(float *)&Size, (int)*((float *)&Size + 1));
    }
    else
    {
      v45 = (*(uint64_t (**)(void))(v44 + 16))();
      v46 = (int)*(float *)&Size;
      v47 = (int)*((float *)&Size + 1);
    }
    v40 = _C3DRendererContextComputeRenderBufferInternalSize(v45, v46, v47, v14);
    glBindRenderbuffer(0x8D41u, params);
    v41 = renderbuffers;
  }
  C3DRenderTargetSetRenderBuffer((uint64_t)v23, v41);
  *((_QWORD *)v23 + 8) = v40;
  if (a1)
    *(_DWORD *)(a1 + 436) += v40;
  return v23;
}

BOOL C3DRendererContextSetupFramebuffer(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int FBO;
  NSObject *v21;
  const __CFDictionary *RenderTargetDescriptions;
  const __CFDictionary *v23;
  const void *RenderTarget;
  const void *v25;
  const void *v26;
  GLuint framebuffers;
  _QWORD context[3];

  context[2] = *MEMORY[0x1E0C80C00];
  if (!a1 && (v4 = scn_default_log(), os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)))
  {
    C3DEngineContextRenderScene_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v12 = scn_default_log();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    C3DRendererContextSetupFramebuffer_cold_2(v12, v13, v14, v15, v16, v17, v18, v19);
LABEL_6:
  FBO = C3DFramebufferGetFBO(a2);
  if (FBO)
  {
    v21 = scn_default_log();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      C3DRendererContextSetupFramebuffer_cold_1();
  }
  else
  {
    framebuffers = 0;
    glGenFramebuffers(1, &framebuffers);
    if (a1)
      ++*(_DWORD *)(a1 + 408);
    C3DFramebufferSetFBO(a2, framebuffers);
    C3DRendererContextBindFramebuffer(a1, a2);
    RenderTargetDescriptions = (const __CFDictionary *)C3DFramebufferGetRenderTargetDescriptions(a2);
    if (RenderTargetDescriptions
      && (v23 = RenderTargetDescriptions, CFDictionaryGetCount(RenderTargetDescriptions) >= 1))
    {
      context[0] = a1;
      context[1] = a2;
      CFDictionaryApplyFunction(v23, (CFDictionaryApplierFunction)_attachRenderTargetDescription, context);
    }
    else
    {
      RenderTarget = C3DFramebufferGetRenderTarget(a2, 0);
      if (RenderTarget)
        C3DRenderContextAttachRenderTargetToFramebuffer(a1, (uint64_t)RenderTarget, 0);
      v25 = C3DFramebufferGetRenderTarget(a2, 4);
      if (v25)
        C3DRenderContextAttachRenderTargetToFramebuffer(a1, (uint64_t)v25, 4);
      v26 = C3DFramebufferGetRenderTarget(a2, 5);
      if (v26)
        C3DRenderContextAttachRenderTargetToFramebuffer(a1, (uint64_t)v26, 5);
    }
    C3DRendererContextUnbindFramebuffer(a1);
  }
  return FBO == 0;
}

void C3DRendererContextBindFramebuffer(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  GLint params;

  if (!a2)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DRendererContextSetupFramebuffer_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = *(_QWORD *)(a1 + 72);
  if (!v12)
  {
    v12 = C3DStackCreate(8u, (uint64_t)kCFTypeStackCallBacks, 8uLL);
    *(_QWORD *)(a1 + 72) = v12;
  }
  if (!C3DStackGetCount(v12))
  {
    params = 0;
    glGetIntegerv(0x8CA6u, &params);
    ++*(_DWORD *)(a1 + 240);
    *(_QWORD *)(a1 + 80) = params;
  }
  C3DStackPush(*(_QWORD *)(a1 + 72));
  C3DStackSetValue(*(_QWORD *)(a1 + 72), a2);
  _C3DRendererContextBindFramebuffer(a1, a2);
}

void _attachRenderTargetDescription(char a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double *RenderTargetWithDescription;
  uint64_t v8;

  v4 = *a3;
  v5 = a3[1];
  v6 = C3DSceneSourcePerformConsistencyCheck(a2);
  RenderTargetWithDescription = C3DRendererContextCreateRenderTargetWithDescription(v4, v6, v5);
  v8 = a1;
  C3DRenderContextAttachRenderTargetToFramebuffer(v4, (uint64_t)RenderTargetWithDescription, v8);
  C3DFramebufferAddRenderTarget(v5, RenderTargetWithDescription, v8);
  CFRelease(RenderTargetWithDescription);
}

uint64_t C3DRenderContextAttachRenderTargetToFramebuffer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  GLenum v5;
  GLuint RenderBuffer;
  uint64_t Texture;
  GLuint ID;
  GLenum TargetMode;
  uint64_t result;

  v5 = (*(uint64_t (**)(uint64_t))(a1 + 1920))(a3);
  if ((*(_BYTE *)(a2 + 19) & 1) != 0)
  {
    Texture = C3DRenderTargetGetTexture(a2);
    ID = C3DTextureGetID(Texture);
    TargetMode = C3DTextureGetTargetMode(Texture);
    glFramebufferTexture2D(0x8D40u, v5, TargetMode, ID, 0);
  }
  else
  {
    RenderBuffer = C3DRenderTargetGetRenderBuffer(a2);
    glFramebufferRenderbuffer(0x8D40u, v5, 0x8D41u, RenderBuffer);
  }
  result = C3DAnimationGetKeyPath(a2);
  *(_DWORD *)(a1 + 432) += result;
  return result;
}

void C3DRendererContextUnbindFramebuffer(uint64_t a1)
{
  uint64_t Value;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;

  Value = C3DStackGetValue(*(_QWORD *)(a1 + 72));
  if (Value)
  {
    v3 = Value;
    if ((*(_BYTE *)(Value + 128) & 1) == 0)
    {
      v4 = scn_default_log();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
        C3DRendererContextUnbindFramebuffer_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
    }
    *(_BYTE *)(v3 + 128) &= ~1u;
  }
  else
  {
    v12 = scn_default_log();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      C3DRendererContextUnbindFramebuffer_cold_1();
  }
  C3DStackPop(*(_QWORD *)(a1 + 72));
  if (C3DStackGetCount(*(_QWORD *)(a1 + 72)))
  {
    v13 = C3DStackGetValue(*(_QWORD *)(a1 + 72));
    if (v13)
    {
      _C3DRendererContextBindFramebuffer(a1, v13);
      return;
    }
  }
  else
  {
    LODWORD(v13) = *(_DWORD *)(a1 + 80);
  }
  glBindFramebuffer(0x8D40u, v13);
  ++*(_DWORD *)(a1 + 204);
}

void _C3DRendererContextBindFramebuffer(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  GLuint FBO;

  if (!a2)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DRendererContextSetupFramebuffer_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  FBO = C3DFramebufferGetFBO(a2);
  *(_BYTE *)(a2 + 128) |= 1u;
  glBindFramebuffer(0x8D40u, FBO);
  if (a1)
    ++*(_DWORD *)(a1 + 204);
}

void C3DRendererContextRestoreFramebuffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t Value;

  if (a1)
  {
    v2 = *(_QWORD *)(a1 + 72);
    if (v2)
    {
      Value = C3DStackGetValue(v2);
      if (Value)
        _C3DRendererContextBindFramebuffer(a1, Value);
    }
  }
}

uint64_t C3DRendererContextGetBoundFramebuffer(uint64_t a1)
{
  uint64_t v1;

  if (a1 && (v1 = *(_QWORD *)(a1 + 72)) != 0)
    return C3DStackGetValue(v1);
  else
    return 0;
}

uint64_t C3DRendererContextResolveFramebuffer(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, __int128 *a6)
{
  GLuint FBO;
  GLuint v12;
  double Size;
  __int128 v14;
  unsigned int v15;

  FBO = C3DFramebufferGetFBO(a3);
  glBindFramebuffer(0x8CA8u, FBO);
  v12 = C3DFramebufferGetFBO(a2);
  glBindFramebuffer(0x8CA9u, v12);
  if (a1)
    ++*(_DWORD *)(a1 + 204);
  Size = C3DFramebufferGetSize(a2);
  if (a6)
  {
    v14 = *a6;
  }
  else
  {
    *(_QWORD *)&v14 = 0;
    *((double *)&v14 + 1) = Size;
  }
  if (a4)
    v15 = 0x4000;
  else
    v15 = 0;
  if (a5)
    v15 |= 0x100u;
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(a1 + 1952))((int)*(float *)&v14, (int)*((float *)&v14 + 1), (int)*((float *)&v14 + 2), (int)*((float *)&v14 + 3), (int)*(float *)&v14, (int)*((float *)&v14 + 1), (int)*((float *)&v14 + 2), (int)*((float *)&v14 + 3), v15 | 0x260000000000, a1);
}

void _C3DRendererContextDeleteRenderBuffer(uint64_t a1, GLuint a2)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  GLuint renderbuffers;

  renderbuffers = a2;
  if (a1)
  {
    --*(_DWORD *)(a1 + 416);
  }
  else
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DEngineContextRenderScene_cold_2(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  glDeleteRenderbuffers(1, &renderbuffers);
}

void C3DRendererContextDeleteRenderTarget(uint64_t a1, uint64_t a2)
{
  GLuint RenderBuffer;
  int KeyPath;
  _DWORD *v6;
  uint64_t Texture;

  if ((*(_BYTE *)(a2 + 19) & 1) != 0)
  {
    Texture = C3DRenderTargetGetTexture(a2);
    C3DRendererContextDeleteTexture(a1, Texture);
    if (!a1)
      return;
    KeyPath = C3DAnimationGetKeyPath(a2);
    v6 = (_DWORD *)(a1 + 452);
  }
  else
  {
    RenderBuffer = C3DRenderTargetGetRenderBuffer(a2);
    _C3DRendererContextDeleteRenderBuffer(a1, RenderBuffer);
    if (!a1)
      return;
    KeyPath = C3DAnimationGetKeyPath(a2);
    v6 = (_DWORD *)(a1 + 436);
  }
  *v6 -= KeyPath;
  *(_DWORD *)(a1 + 432) -= C3DAnimationGetKeyPath(a2);
}

void C3DRendererContextDeleteFramebuffer(uint64_t a1, uint64_t a2, int a3)
{
  GLuint framebuffers;
  _QWORD context[5];

  if (a3)
  {
    context[0] = MEMORY[0x1E0C809B0];
    context[1] = 0x40000000;
    context[2] = __C3DRendererContextDeleteFramebuffer_block_invoke;
    context[3] = &__block_descriptor_tmp_20_1;
    context[4] = a1;
    C3DFramebufferApplyToRenderTargets(a2, context);
  }
  framebuffers = C3DFramebufferGetFBO(a2);
  if (framebuffers)
  {
    if (a1)
      --*(_DWORD *)(a1 + 408);
    glDeleteFramebuffers(1, &framebuffers);
  }
  C3DFramebufferCleanup(a2);
}

uint64_t C3DRendererContextPushBlendStatesOverride(uint64_t result)
{
  ++*(_DWORD *)(result + 1088);
  return result;
}

uint64_t C3DRendererContextPopBlendStatesOverride(uint64_t result)
{
  --*(_DWORD *)(result + 1088);
  return result;
}

void C3DRendererContextSetRasterizerStates(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  int v5;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  GLBOOLean v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  GLint v21;
  GLenum v22;
  GLenum v23;
  GLenum v24;
  GLuint v25;
  uint64_t v26;
  uint64_t v27;
  GLuint v28;
  uint64_t v29;
  uint64_t v30;
  GLuint v31;
  GLuint mask;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  GLuint v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  GLBOOLean flag[8];
  uint64_t v43;
  int v44;

  v2 = a2;
  if (!a2)
    v2 = C3DRasterizerStatesDefault();
  if (*(_QWORD *)(a1 + 1096) != v2)
  {
    v41 = 0;
    *(_QWORD *)flag = 0;
    v44 = 0;
    v43 = 0;
    C3DRasterizerStatesGetDesc(v2, (uint64_t)&v41);
    v4 = *(_QWORD *)(a1 + 1096);
    if (!v4)
    {
      LOBYTE(v5) = -1;
      goto LABEL_27;
    }
    v37 = 0;
    v38 = 0;
    v40 = 0;
    v39 = 0;
    C3DRasterizerStatesGetDesc(v4, (uint64_t)&v37);
    if (v38 == flag[0])
      v5 = v37 != v41;
    else
      v5 = ((_DWORD)v37 != (_DWORD)v41) | 2;
    if (flag[0])
    {
      if (BYTE2(v38) != flag[2] || v38 == 0)
        v5 |= 4u;
      if ((_BYTE)v38 && BYTE1(v38) == flag[1])
        goto LABEL_21;
    }
    else
    {
      if ((_BYTE)v38)
        goto LABEL_21;
      v5 |= 4u;
    }
    v5 |= 8u;
LABEL_21:
    if (flag[3] | BYTE3(v38))
    {
      LOBYTE(v5) = v5 | 0x10;
    }
    else if (!v5)
    {
      v7 = scn_default_log();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
        C3DRendererContextSetRasterizerStates_cold_1(v7, v8, v9, v10, v11, v12, v13, v14);
      LOBYTE(v5) = 0;
    }
LABEL_27:
    v15 = flag[0];
    v16 = flag[1];
    v17 = flag[2];
    v18 = flag[3];
    v19 = flag[4];
    v20 = flag[5];
    v36 = flag[7];
    v21 = v43;
    v35 = BYTE1(v43);
    v34 = BYTE2(v43);
    v33 = BYTE3(v43);
    v26 = BYTE4(v43);
    v28 = BYTE5(v43);
    v31 = BYTE6(v43);
    mask = flag[6];
    v30 = v44;
    v29 = BYTE1(v44);
    v27 = BYTE2(v44);
    if ((v5 & 1) == 0)
    {
      if ((v5 & 2) == 0)
        goto LABEL_29;
      goto LABEL_41;
    }
    if ((_DWORD)v41 == 2)
    {
      glDisable(0xB44u);
    }
    else
    {
      if ((_DWORD)v41 == 1)
      {
        glEnable(0xB44u);
        v22 = 1028;
      }
      else
      {
        if ((_DWORD)v41)
          goto LABEL_40;
        glEnable(0xB44u);
        v22 = 1029;
      }
      glCullFace(v22);
    }
LABEL_40:
    ++*(_DWORD *)(a1 + 236);
    if ((v5 & 2) == 0)
    {
LABEL_29:
      if ((v5 & 4) == 0)
        goto LABEL_30;
      goto LABEL_45;
    }
LABEL_41:
    if (v15)
      glEnable(0xB71u);
    else
      glDisable(0xB71u);
    ++*(_DWORD *)(a1 + 236);
    if ((v5 & 4) == 0)
    {
LABEL_30:
      if ((v5 & 8) == 0)
        goto LABEL_31;
      goto LABEL_46;
    }
LABEL_45:
    glDepthFunc(gl_ComparisonFunc[v17]);
    ++*(_DWORD *)(a1 + 236);
    if ((v5 & 8) == 0)
    {
LABEL_31:
      if ((v5 & 0x10) == 0)
        goto LABEL_54;
      goto LABEL_47;
    }
LABEL_46:
    glDepthMask(v16);
    ++*(_DWORD *)(a1 + 236);
    if ((v5 & 0x10) == 0)
    {
LABEL_54:
      *(_QWORD *)(a1 + 1096) = v2;
      return;
    }
LABEL_47:
    if (v18)
    {
      glEnable(0xB90u);
      v23 = gl_ComparisonFunc[v20];
      if (v19)
      {
        glStencilFuncSeparate(0x404u, v23, v21, mask);
        glStencilOpSeparate(0x404u, gl_StencilOp[v33], gl_StencilOp[v34], gl_StencilOp[v35]);
        glStencilMaskSeparate(0x404u, v36);
        glStencilFuncSeparate(0x405u, gl_ComparisonFunc[v26], v21, v28);
        glStencilOpSeparate(0x405u, gl_StencilOp[v27], gl_StencilOp[v29], gl_StencilOp[v30]);
        v24 = 1029;
        v25 = v31;
      }
      else
      {
        glStencilFuncSeparate(0x408u, v23, v21, mask);
        glStencilOpSeparate(0x408u, gl_StencilOp[v33], gl_StencilOp[v34], gl_StencilOp[v35]);
        v24 = 1032;
        v25 = v36;
      }
      glStencilMaskSeparate(v24, v25);
    }
    else
    {
      glDisable(0xB90u);
    }
    ++*(_DWORD *)(a1 + 236);
    goto LABEL_54;
  }
}

void C3DRendererContextRenderResidentMeshElement(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DEngineContextRenderScene_cold_2(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  __drawCall(a1);
}

void __drawCall(uint64_t a1)
{
  GLenum v1;
  unsigned int v2;
  int32x2_t v3;
  GLsizei v4;
  int v5;
  NSObject *v6;
  int v7;

  v1 = *(_DWORD *)(a1 + 1124);
  v2 = *(_DWORD *)(a1 + 1144);
  v3 = vadd_s32(*(int32x2_t *)(a1 + 188), (int32x2_t)(v2 | 0x100000000));
  *(int32x2_t *)(a1 + 188) = v3;
  v4 = *(_DWORD *)(a1 + 1128);
  v5 = *(_DWORD *)(a1 + 184) + v4;
  *(_DWORD *)(a1 + 184) = v5;
  switch(*(_DWORD *)(a1 + 1120))
  {
    case 0:
      glDrawArrays(v1, 0, v4);
      break;
    case 1:
      glDrawElements(v1, v4, *(_DWORD *)(a1 + 1132), *(const GLvoid **)(a1 + 1136));
      break;
    case 2:
      v7 = *(_DWORD *)(a1 + 1148) - 1;
      *(_DWORD *)(a1 + 184) = v5 + v4 * v7;
      *(_DWORD *)(a1 + 188) = v3.i32[0] + v7 * v2;
      __assert_rtn("__drawCall", "C3DRendererContextGL.c", 3465, "0");
    case 3:
      __drawCall_cold_2();
    default:
      v6 = scn_default_log();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        __drawCall_cold_1();
      break;
  }
}

double C3DRendererContextGetViewport()
{
  __int128 v1;

  v1 = 0uLL;
  glGetFloatv(0xBA2u, (GLfloat *)&v1);
  return *(double *)&v1;
}

void C3DRendererContextSetViewport(__n128 a1)
{
  glViewport((int)a1.n128_f32[0], (int)a1.n128_f32[1], (int)a1.n128_f32[2], (int)a1.n128_f32[3]);
}

float C3DRendererContextGetContentScaleFactor(uint64_t a1)
{
  return *(float *)(a1 + 52);
}

uint64_t C3DRendererContextSetContentScaleFactor(uint64_t result, float a2)
{
  *(float *)(result + 52) = a2;
  return result;
}

uint64_t C3DRendererContextGetSampleCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t C3DRendererContextSetSampleCount(uint64_t result, int a2)
{
  *(_DWORD *)(result + 48) = a2;
  return result;
}

void C3DRendererContextSetLight(uint64_t a1, uint64_t a2, float32x4_t *a3, uint64_t a4, unsigned int *a5)
{
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  GLint UniformLocation;
  float32x4_t v25;
  float32x4_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  GLint v34;
  GLint v35;
  GLint v36;
  GLint v37;
  uint64_t v38;
  uint64_t v39;
  GLint v40;
  int8x8_t RealShadowMapSize;
  float32x4_t *v42;
  uint64_t Gobo;
  uint64_t v44;
  uint64_t v45;
  GLint v46;
  NSObject *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  GLint v54;
  float32x4_t v55;
  float32x4_t v56;
  GLint v57;
  float32x4_t v58[4];

  if (!*(_QWORD *)(a1 + 176))
  {
    v10 = scn_default_log();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
      C3DRendererContextSetLight_cold_3(v10, v11, v12, v13, v14, v15, v16, v17);
  }
  if (a2 >= 8)
  {
    v18 = scn_default_log();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_FAULT))
      C3DRendererContextSetLight_cold_2(a2, v18);
  }
  v19 = *(_QWORD *)(a1 + 176);
  v20 = 16 * a2;
  v21 = 16 * a2 + 18;
  v22 = 16 * a2 + 19;
  v23 = 16 * a2 + 20;
  UniformLocation = C3DFXGLSLProgramObjectGetUniformLocation(v19, v21);
  if (UniformLocation != -1)
  {
    C3DLightGetColorModulatedByIntensity((uint64_t)a3, v25, v26, v27, v28, v29, v30, v31);
    v58[0].i64[0] = v32;
    v58[0].i64[1] = v33;
    if (C3DLinearRenderingIsEnabled())
      C3DColor4ConvertToNonLinear(v58);
    glUniform4fv(UniformLocation, 1, v58[0].f32);
  }
  v34 = C3DFXGLSLProgramObjectGetUniformLocation(v19, v22);
  if (v34 != -1)
    glUniform4f(v34, *(GLfloat *)(a4 + 16), *(GLfloat *)(a4 + 20), *(GLfloat *)(a4 + 24), 0.0);
  v35 = C3DFXGLSLProgramObjectGetUniformLocation(v19, v23);
  if (v35 != -1)
    glUniform4f(v35, *(GLfloat *)(a4 + 32), *(GLfloat *)(a4 + 36), *(GLfloat *)(a4 + 40), 0.0);
  v36 = C3DFXGLSLProgramObjectGetUniformLocation(v19, v20 + 23);
  if (v36 != -1)
    glUniform4f(v36, *(GLfloat *)(a4 + 80), *(GLfloat *)(a4 + 84), *(GLfloat *)(a4 + 88), 0.0);
  v37 = C3DFXGLSLProgramObjectGetUniformLocation(v19, v20 + 24);
  if (v37 != -1)
    glUniform4f(v37, *(GLfloat *)(a4 + 96), *(GLfloat *)(a4 + 100), *(GLfloat *)(a4 + 104), 0.0);
  if (*(_QWORD *)(a4 + 408) && *(_QWORD *)(a4 + 400))
  {
    if (a3 && a3[10].i8[8] && (a3[10].i8[9] & 1) == 0)
    {
      v38 = v20 + 30;
      v39 = v20 + 31;
      v40 = C3DFXGLSLProgramObjectGetUniformLocation(v19, v20 + 32);
      if (v40 == -1)
      {
LABEL_34:
        v44 = v20 + 33;
        v46 = C3DFXGLSLProgramObjectGetUniformLocation(v19, v38);
        if (v46 != -1)
        {
          if (*a5 >= 8)
          {
            v47 = scn_default_log();
            if (os_log_type_enabled(v47, OS_LOG_TYPE_FAULT))
              C3DRendererContextSetLight_cold_1(v47, v48, v49, v45, v50, v51, v52, v53);
          }
          C3DRendererContextBindTexture(a1, *(float32x2_t **)(a4 + 400), *(_QWORD *)(a4 + 408), v45, *a5);
          glUniform1i(v46, *a5);
          C3DFXGLSLProgramObjectSetUniformValueAtIndex(v19, v38, *a5);
          ++*a5;
        }
        v54 = C3DFXGLSLProgramObjectGetUniformLocation(v19, v39);
        if (v54 != -1)
        {
          v55 = *(float32x4_t *)(a4 + 144);
          v58[0] = *(float32x4_t *)(a4 + 128);
          v58[1] = v55;
          v56 = *(float32x4_t *)(a4 + 176);
          v58[2] = *(float32x4_t *)(a4 + 160);
          v58[3] = v56;
          glUniformMatrix4fv(v54, 1, 0, v58[0].f32);
          ++*(_DWORD *)(a1 + 264);
        }
        v57 = C3DFXGLSLProgramObjectGetUniformLocation(v19, v44);
        if (v57 != -1)
        {
          v58[0] = a3[7];
          if (C3DLinearRenderingIsEnabled())
            C3DColor4ConvertToNonLinear(v58);
          glUniform4fv(v57, 1, v58[0].f32);
        }
        return;
      }
      RealShadowMapSize = C3DLightGetRealShadowMapSize((uint64_t)a3);
      if (*(float *)RealShadowMapSize.i32 <= *(float *)&RealShadowMapSize.i32[1])
        RealShadowMapSize.i32[0] = RealShadowMapSize.i32[1];
      if (*(float *)RealShadowMapSize.i32 < 1.0)
        *(float *)RealShadowMapSize.i32 = 1.0;
      v58[0].f32[0] = a3[8].f32[3] / *(float *)RealShadowMapSize.i32;
      v42 = v58;
    }
    else
    {
      v38 = v20 + 25;
      v39 = v20 + 26;
      v40 = C3DFXGLSLProgramObjectGetUniformLocation(v19, v20 + 27);
      if (v40 == -1)
        goto LABEL_34;
      Gobo = C3DLightGetGobo((uint64_t)a3, 0);
      if (!Gobo)
        goto LABEL_34;
      v42 = (float32x4_t *)(Gobo + 72);
    }
    glUniform1fv(v40, 1, v42->f32);
    ++*(_DWORD *)(a1 + 244);
    goto LABEL_34;
  }
}

void C3DRendererContextBindCommonProfile(float32x2_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, int a6, GLfloat a7)
{
  int v13;
  NSObject *v14;
  int TransparencyMode;
  float FloatProperty;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t UniformLocation;
  float v21;
  uint64_t v22;
  int v23;
  char v24;
  double v25;
  float *Color;
  float v27;
  float v28;
  float v29;
  GLfloat v30;
  GLfloat v31;
  GLfloat v32;
  GLfloat v33;
  uint64_t v34;
  float ConstantAlpha;
  uint64_t v36;
  uint64_t v37[2];
  int v38;
  GLfloat v39;
  uint64_t v40;

  v37[0] = a3;
  v37[1] = a4;
  v38 = 0;
  v40 = a2;
  v39 = a7;
  __SetupCommonProfileEffectProperty(a1, 7, v37);
  __SetupCommonProfileEffectProperty(a1, 2, v37);
  if (C3DEffectCommonProfileIsUsingSelfIllumination(a3))
    v13 = 9;
  else
    v13 = 0;
  __SetupCommonProfileEffectProperty(a1, v13, v37);
  __SetupCommonProfileEffectProperty(a1, 6, v37);
  if (!__SetupCommonProfileEffectProperty(a1, 8, v37))
    __SetupCommonProfileEffectProperty(a1, 1, v37);
  __SetupCommonProfileEffectProperty(a1, 3, v37);
  __SetupCommonProfileEffectProperty(a1, 16, v37);
  __SetupCommonProfileEffectProperty(a1, 19, v37);
  if (*(_DWORD *)(a3 + 24) == 5)
  {
    v14 = scn_default_log();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      C3DRendererContextBindCommonProfile_cold_1();
    *(_DWORD *)(a3 + 24) = 2;
  }
  if (a1[11].i8[1])
    __SetupCommonProfileEffectProperty(a1, 4, v37);
  TransparencyMode = C3DEffectCommonProfileGetTransparencyMode(a3);
  FloatProperty = C3DEffectCommonProfileGetFloatProperty((float *)a3, 18);
  *(_BYTE *)(a4 + 260) = TransparencyMode;
  v17 = __SetupCommonProfileEffectProperty(a1, 5, v37);
  if (a7 >= 1.0 && C3DEffectCommonProfileIsOpaque(a3) && (a5 & 1) != 0)
  {
    v18 = C3DBlendStatesDefaultReplace();
    C3DRendererContextSetBlendStates((uint64_t)a1, v18);
    *(_BYTE *)(a4 + 260) = -1;
    goto LABEL_32;
  }
  v19 = (uint64_t)a1[22];
  UniformLocation = C3DFXGLSLProgramObjectGetUniformLocation(v19, 168);
  if (UniformLocation != -1)
  {
    v21 = 1.0;
    if (TransparencyMode != 1)
      v21 = a7;
    glUniform1f(UniformLocation, FloatProperty * v21);
  }
  v22 = C3DFXGLSLProgramObjectGetUniformLocation(v19, 9);
  if (v22 != -1)
    glUniform1f(v22, a7);
  if (C3DEffectCommonProfileContainsContentForEffectProperty(a3, 2))
    v23 = C3DEffectCommonProfileContentIsOpaqueForEffectProperty(a3, 2) ^ 1;
  else
    LOBYTE(v23) = 0;
  v24 = v17 | v23 | a5 ^ 1;
  if (TransparencyMode != 1)
  {
    if ((v24 & 1) == 0)
    {
      ConstantAlpha = C3DEffectCommonProfileGetConstantAlpha((float *)a3);
      glBlendColor(0.0, 0.0, 0.0, ConstantAlpha * a7);
      v34 = C3DBlendStatesDefaultConstantAlpha();
      goto LABEL_31;
    }
    goto LABEL_29;
  }
  if ((v24 & 1) != 0)
  {
LABEL_29:
    v34 = C3DBlendStatesDefaultOver();
    goto LABEL_31;
  }
  v25 = a7;
  Color = (float *)C3DEffectCommonProfileGetColor(a3, 5);
  v27 = Color[1];
  v28 = Color[2];
  v29 = v27 * 0.71516 + *Color * 0.212671 + v28 * 0.072169;
  v30 = (1.0 - (float)(FloatProperty * *Color)) * v25;
  v31 = (1.0 - (float)(FloatProperty * v27)) * v25;
  v32 = (1.0 - (float)(FloatProperty * v28)) * v25;
  v33 = (1.0 - (float)(FloatProperty * v29)) * v25;
  glBlendColor(v30, v31, v32, v33);
  v34 = C3DBlendStatesDefaultConstantColor();
LABEL_31:
  C3DRendererContextSetBlendStates((uint64_t)a1, v34);
LABEL_32:
  switch(a6)
  {
    case 1:
      v36 = C3DBlendStatesDefaultAdditive();
      goto LABEL_39;
    case 2:
      v36 = C3DBlendStatesDefaultSubtract();
      goto LABEL_39;
    case 3:
      v36 = C3DBlendStatesDefaultMultiplicative();
      goto LABEL_39;
    case 4:
      v36 = C3DBlendStatesDefaultScreen();
      goto LABEL_39;
    case 5:
      v36 = C3DBlendStatesDefaultReplace();
      goto LABEL_39;
    case 6:
      v36 = C3DBlendStatesDefaultMax();
LABEL_39:
      C3DRendererContextSetBlendStates((uint64_t)a1, v36);
      break;
    default:
      return;
  }
}

BOOL __SetupCommonProfileEffectProperty(float32x2_t *a1, int a2, uint64_t *a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float *v15;
  uint64_t v16;
  uint64_t EffectSlot;
  uint64_t v18;
  uint64_t Texture;
  uint64_t v20;
  const void *TextureSampler;
  uint64_t v22;
  uint64_t v23;
  const void *v24;
  CFTypeRef *v25;
  uint64_t v26;
  const void *v27;
  _QWORD *v28;
  CFTypeRef v29;
  uint64_t v30;
  const void *Default;
  unsigned int v32;
  GLint *v33;
  NSObject *v34;
  _BOOL8 result;
  NSObject *v36;
  uint64_t v37;
  GLint v38;
  GLint v39;
  GLint UniformLocation;
  const GLfloat *ImageTransform;
  uint64_t v42;
  GLint v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t ColorModulatedByIntensity;
  uint64_t v54;
  uint64_t v55;
  GLfloat v56;
  GLfloat v57;
  GLfloat v58;
  GLfloat v59;
  uint64_t v60;
  GLint v61;
  int v62;
  float FloatProperty;
  BOOL v64;
  uint64_t v65;
  GLint v66;
  float v67;
  float v68;
  GLfloat v69;
  float *v70;
  GLfloat v[4];
  __int128 v72;
  __int128 v73;
  __int128 v74;

  if (!*(_QWORD *)&a1[22])
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      C3DRendererContextSetLight_cold_3(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  v14 = (uint64_t)a1[22];
  v15 = (float *)*a3;
  v16 = a3[1];
  EffectSlot = C3DEffectCommonProfileGetEffectSlot(*a3, a2, 0);
  if (!EffectSlot)
    goto LABEL_45;
  v18 = EffectSlot;
  Texture = C3DEffectSlotGetTexture(EffectSlot);
  TextureSampler = (const void *)C3DEffectSlotGetTextureSampler(v18);
  if (!Texture)
  {
    Texture = C3DEffectSlotGetImage(v18);
    if (!Texture)
      goto LABEL_38;
    v30 = a3[3];
    Default = TextureSampler;
    if (!TextureSampler)
      Default = (const void *)C3DTextureSamplerGetDefault();
    Texture = (uint64_t)C3DResourceManagerMakeImageResident(v30, (void *)Texture, Default, a1);
    if (!Texture)
    {
LABEL_38:
      if ((unint64_t)a2 - 10 >= 0xB)
      {
        UniformLocation = C3DFXGLSLProgramObjectGetUniformLocation(v14, s_PropertyToTextureMatrixUniformIndex[a2]);
        if (UniformLocation != -1)
        {
          ImageTransform = (const GLfloat *)C3DEffectSlotGetImageTransform(v18);
          v73 = 0u;
          v74 = 0u;
          *(_OWORD *)v = 0u;
          v72 = 0u;
          if (!ImageTransform)
          {
            ImageTransform = v;
            C3DMatrix4x4MakeIdentity((uint64_t)v);
          }
          glUniformMatrix4fv(UniformLocation, 1, 0, ImageTransform);
          ++a1[33].i32[0];
        }
      }
      if ((Texture & 1) != 0)
        return 1;
LABEL_45:
      result = 0;
      switch(a2)
      {
        case 0:
          v42 = C3DFXGLSLProgramObjectGetUniformLocation(v14, 160);
          if (v42 == -1)
            return 0;
          v43 = v42;
          v44 = (uint64_t)v15;
          v45 = 0;
          goto LABEL_62;
        case 1:
          v46 = C3DFXGLSLProgramObjectGetUniformLocation(v14, 152);
          if (v46 == -1)
            return 0;
          v43 = v46;
          v44 = (uint64_t)v15;
          v45 = 1;
          goto LABEL_62;
        case 2:
          v47 = C3DFXGLSLProgramObjectGetUniformLocation(v14, 148);
          if (v47 == -1)
            return 0;
          v43 = v47;
          v44 = (uint64_t)v15;
          v45 = 2;
          goto LABEL_62;
        case 3:
          v48 = C3DFXGLSLProgramObjectGetUniformLocation(v14, 156);
          if (v48 == -1)
            return 0;
          v43 = v48;
          v44 = (uint64_t)v15;
          v45 = 3;
          goto LABEL_62;
        case 4:
          v49 = C3DFXGLSLProgramObjectGetUniformLocation(v14, 179);
          if (v49 == -1)
            return 0;
          v43 = v49;
          v44 = (uint64_t)v15;
          v45 = 4;
          goto LABEL_62;
        case 5:
          v50 = C3DFXGLSLProgramObjectGetUniformLocation(v14, 169);
          if (v50 == -1)
            return 0;
          v43 = v50;
          v44 = (uint64_t)v15;
          v45 = 5;
          goto LABEL_62;
        case 6:
          v51 = C3DFXGLSLProgramObjectGetUniformLocation(v14, 164);
          if (v51 == -1)
            return 0;
          v43 = v51;
          v44 = (uint64_t)v15;
          v45 = 6;
          goto LABEL_62;
        case 9:
          v52 = C3DFXGLSLProgramObjectGetUniformLocation(v14, 160);
          if (v52 == -1)
            return 0;
          v43 = v52;
          v44 = (uint64_t)v15;
          v45 = 9;
LABEL_62:
          ColorModulatedByIntensity = C3DEffectCommonProfileGetColorModulatedByIntensity(v44, v45);
          v55 = v54;
          *(_QWORD *)v = ColorModulatedByIntensity;
          *(_QWORD *)&v[2] = v54;
          if (C3DLinearRenderingIsEnabled())
          {
            C3DColor4ConvertToNonLinear((float32x4_t *)v);
            v56 = v[0];
            v57 = v[1];
            v58 = v[2];
            v59 = v[3];
          }
          else
          {
            v57 = *((float *)&ColorModulatedByIntensity + 1);
            v56 = *(float *)&ColorModulatedByIntensity;
            v59 = *((float *)&v55 + 1);
            v58 = *(float *)&v55;
          }
          glUniform4f(v43, v56, v57, v58, v59);
          return 0;
        case 16:
          v60 = C3DFXGLSLProgramObjectGetUniformLocation(v14, 147);
          if (v60 != -1)
          {
            v61 = v60;
            v62 = C3DWasLinkedBeforeMajorOSYear2014();
            FloatProperty = C3DEffectCommonProfileGetFloatProperty(v15, 16);
            if (v62)
            {
              v64 = FloatProperty < 1.0;
              FloatProperty = 1.0;
              if (v64)
                FloatProperty = C3DEffectCommonProfileGetFloatProperty(v15, 16);
            }
            glUniform1f(v61, FloatProperty * 128.0);
          }
          return 0;
        case 19:
          v65 = C3DFXGLSLProgramObjectGetUniformLocation(v14, 183);
          if (v65 != -1)
          {
            v66 = v65;
            v67 = C3DEffectCommonProfileGetFloatProperty(v15, 19);
            v68 = C3DEffectCommonProfileGetFloatProperty(v15, 20);
            v69 = (float)((float)(1.0 - v67) * (float)(1.0 - v67)) / (float)((float)(v67 + 1.0) * (float)(v67 + 1.0));
            glUniform3f(v66, v69, 1.0 - v69, v68);
          }
          return 0;
        default:
          return result;
      }
    }
  }
  v70 = v15;
  v22 = *(unsigned int *)(v16 + 256);
  v23 = v16 + 32 * v22;
  if (!TextureSampler)
    TextureSampler = (const void *)C3DTextureSamplerGetDefault();
  v25 = (CFTypeRef *)(v23 + 8);
  v24 = *(const void **)(v23 + 8);
  if (v24 != (const void *)Texture)
  {
    if (v24)
    {
      CFRelease(v24);
      *v25 = 0;
    }
    *v25 = CFRetain((CFTypeRef)Texture);
  }
  v26 = v16 + 32 * v22;
  v28 = (_QWORD *)(v26 + 24);
  v27 = *(const void **)(v26 + 24);
  if (v27 != TextureSampler)
  {
    if (v27)
    {
      CFRelease(v27);
      *v28 = 0;
    }
    if (TextureSampler)
      v29 = CFRetain(TextureSampler);
    else
      v29 = 0;
    *v28 = v29;
  }
  *(_BYTE *)v23 = a2;
  v32 = *(_DWORD *)(v16 + 256);
  *(_DWORD *)(v26 + 16) = v32;
  v33 = (GLint *)(v26 + 16);
  if (v32 < 8)
  {
    C3DRendererContextBindTexture((uint64_t)a1, (float32x2_t *)Texture, (uint64_t)TextureSampler, v20, v32);
    ++*(_DWORD *)(v16 + 256);
    if ((unint64_t)a2 - 10 > 0xA)
    {
      v37 = s_PropertyToTextureUniformIndex[a2];
      if (*v33 != C3DFXGLSLProgramObjectGetUniformValueAtIndex(v14, v37))
      {
        v38 = C3DFXGLSLProgramObjectGetUniformLocation(v14, v37);
        if (v38 != -1)
        {
          glUniform1i(v38, *v33);
          C3DFXGLSLProgramObjectSetUniformValueAtIndex(v14, v37, *v33);
        }
      }
      v39 = C3DFXGLSLProgramObjectGetUniformLocation(v14, s_PropertyToIntensityUniformIndex[a2]);
      if (v39 == -1)
      {
        LOBYTE(Texture) = 1;
      }
      else
      {
        v[0] = C3DEffectSlotGetIntensity(v18);
        LOBYTE(Texture) = 1;
        glUniform1fv(v39, 1, v);
        ++a1[30].i32[1];
      }
      v15 = v70;
      goto LABEL_38;
    }
    if ((__SetupCommonProfileEffectProperty_done & 1) == 0)
    {
      __SetupCommonProfileEffectProperty_done = 1;
      v36 = scn_default_log();
      result = os_log_type_enabled(v36, OS_LOG_TYPE_ERROR);
      if (!result)
        return result;
      __SetupCommonProfileEffectProperty_cold_2();
    }
  }
  else
  {
    v34 = scn_default_log();
    result = os_log_type_enabled(v34, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    __SetupCommonProfileEffectProperty_cold_1();
  }
  return 0;
}

void C3DRendererContextUnbindCommonProfile(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  CFTypeRef *v5;
  const void *v6;

  v4 = *(unsigned int *)(a3 + 256);
  if ((_DWORD)v4)
  {
    v5 = (CFTypeRef *)(a3 + 24);
    do
    {
      v6 = *(v5 - 2);
      if (v6)
      {
        CFRelease(v6);
        *(v5 - 2) = 0;
        if (*v5)
        {
          CFRelease(*v5);
          *v5 = 0;
        }
      }
      v5 += 4;
      --v4;
    }
    while (v4);
  }
  *(_DWORD *)(a3 + 256) = 0;
  if (*(unsigned __int8 *)(a3 + 260) != 255)
    glBlendColor(0.0, 0.0, 0.0, 0.0);
}

void C3DRendererContextSetFrontFace(uint64_t a1, int a2)
{
  GLenum v3;

  if (a2)
    v3 = 2305;
  else
    v3 = 2304;
  glFrontFace(v3);
  if (a1)
    ++*(_DWORD *)(a1 + 236);
}

BOOL C3DRendererContextGetFrontFace(uint64_t a1)
{
  GLint params;

  params = 0;
  glGetIntegerv(0xB46u, &params);
  if (a1)
    ++*(_DWORD *)(a1 + 240);
  return params != 2304;
}

void C3DRendererContextSetEnableWriteToDepth(uint64_t a1, int a2)
{
  glDepthMask(a2 != 0);
  *(_QWORD *)(a1 + 1096) = 0;
  ++*(_DWORD *)(a1 + 236);
}

void C3DRendererContextSetEnableReadsFromDepth(uint64_t a1, int a2)
{
  GLenum v3;

  if (a2)
    v3 = 515;
  else
    v3 = 519;
  glDepthFunc(v3);
  if (a1)
    ++*(_DWORD *)(a1 + 236);
}

uint64_t C3DRendererContextAllocateBufferObject(_DWORD *a1, int a2, GLsizeiptr a3, int a4)
{
  GLenum v7;
  GLuint buffers;

  if (a4)
    v7 = 35040;
  else
    v7 = 35044;
  buffers = 0;
  glGenBuffers(1, &buffers);
  if (a2 == 1)
  {
    glBindBuffer(0x8893u, buffers);
    glBufferData(0x8893u, a3, 0, v7);
    if (a1)
    {
      ++a1[105];
      a1[111] += a3;
    }
  }
  else if (!a2)
  {
    glBindBuffer(0x8892u, buffers);
    glBufferData(0x8892u, a3, 0, v7);
    if (a1)
    {
      ++a1[103];
      a1[110] += a3;
    }
  }
  return C3DBufferObjectCreate(buffers, a2, a3, 0);
}

uint64_t C3DRendererContextCreateBufferObjectForMeshSource(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t Data;
  const __CFData *v13;
  GLenum v14;
  CFIndex Length;
  const UInt8 *BytePtr;
  NSObject *v18;
  GLuint buffers;

  buffers = 0;
  if (!a2)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DMeshSourceCreateWithAccessor_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  Data = C3DMeshSourceGetData(a2);
  if (Data)
  {
    v13 = (const __CFData *)Data;
    glGenBuffers(1, &buffers);
    if (a1)
      ++*(_DWORD *)(a1 + 412);
    glBindBuffer(0x8892u, buffers);
    if (C3DMeshSourceIsMutable(a2))
      v14 = 35048;
    else
      v14 = 35044;
    Length = CFDataGetLength(v13);
    BytePtr = CFDataGetBytePtr(v13);
    glBufferData(0x8892u, Length, BytePtr, v14);
    if (a1)
      *(_DWORD *)(a1 + 440) += Length;
    return C3DBufferObjectCreate(buffers, 0, Length, (uint64_t)v13);
  }
  else
  {
    if ((C3DRendererContextCreateBufferObjectForMeshSource_done & 1) == 0)
    {
      C3DRendererContextCreateBufferObjectForMeshSource_done = 1;
      v18 = scn_default_log();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        C3DRendererContextCreateBufferObjectForMeshSource_cold_1();
    }
    return 0;
  }
}

uint64_t C3DRendererContextCreateBufferObjectForMeshElement(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const __CFData *Indexes;
  CFIndex Length;
  const UInt8 *BytePtr;
  const UInt8 *v15;
  GLuint buffers[2];

  *(_QWORD *)buffers = 0;
  if (!a2)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DRendererContextCreateBufferObjectForMeshElement_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  Indexes = (const __CFData *)C3DMeshElementGetIndexes(a2, buffers);
  Length = CFDataGetLength(Indexes);
  glGenBuffers(1, &buffers[1]);
  if (a1)
  {
    ++*(_DWORD *)(a1 + 420);
    glBindBuffer(0x8893u, buffers[1]);
    BytePtr = CFDataGetBytePtr(Indexes);
    glBufferData(0x8893u, Length, BytePtr, 0x88E4u);
    *(_DWORD *)(a1 + 444) += Length;
  }
  else
  {
    glBindBuffer(0x8893u, buffers[1]);
    v15 = CFDataGetBytePtr(Indexes);
    glBufferData(0x8893u, Length, v15, 0x88E4u);
  }
  return C3DBufferObjectCreate(buffers[1], 1, Length, a2);
}

void C3DRendererContextUnbindTexture(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int TextureUnitOffset;
  GLenum TargetMode;

  if (a2)
  {
    if (*(_DWORD *)(a1 + 20) > a3)
    {
      TextureUnitOffset = C3DRendererContextGetTextureUnitOffset(a1);
      glActiveTexture(a3 + TextureUnitOffset + 33984);
      TargetMode = C3DTextureGetTargetMode(a2);
      glBindTexture(TargetMode, 0);
      ++*(_DWORD *)(a1 + 232);
      *(_DWORD *)(a1 + 4 * a3 + 1040) = 0;
    }
  }
}

void C3DRendererContextUnbindTextureUnits(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  GLenum v5;

  v2 = *(unsigned int *)(a1 + 1072);
  if ((_DWORD)v2)
  {
    v3 = 0;
    v4 = a1 + 1040;
    do
    {
      v5 = *(_DWORD *)(v4 + 4 * v3);
      if (v5)
      {
        glActiveTexture(v3 + 33984);
        glBindTexture(v5, 0);
        ++*(_DWORD *)(a1 + 232);
        *(_DWORD *)(v4 + 4 * v3) = 0;
        v2 = *(unsigned int *)(a1 + 1072);
      }
      ++v3;
    }
    while (v3 < v2);
  }
  *(_DWORD *)(a1 + 1072) = 0;
}

void C3DRendererContextBindMesh(uint64_t a1, uint64_t a2, void *key)
{
  const void *Value;
  __CFDictionary *v7;
  const void *MutabilityTimeStamp;
  _QWORD v9[7];
  _QWORD v10[6];
  unsigned int v11;

  if (*(void **)(a1 + 1104) != key)
  {
    *(_QWORD *)(a1 + 1104) = key;
    *(_QWORD *)(a1 + 1112) = -1;
    if (!key)
    {
      glBindBuffer(0x8892u, 0);
      Value = 0;
LABEL_9:
      (*(void (**)(const void *, uint64_t))(a1 + 1928))(Value, a1);
      ++*(_DWORD *)(a1 + 224);
      return;
    }
    Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 120), key);
    v11 = Value;
    if ((_DWORD)Value)
    {
      if (C3DMeshIsMutable((uint64_t)key))
      {
        if (!*(_QWORD *)(a1 + 128))
          *(_QWORD *)(a1 + 128) = CFDictionaryCreateMutable(0, 0, 0, 0);
        v9[0] = MEMORY[0x1E0C809B0];
        v9[1] = 0x40000000;
        v9[2] = __C3DRendererContextBindMesh_block_invoke_2;
        v9[3] = &__block_descriptor_tmp_31_0;
        v9[4] = a1;
        v9[5] = key;
        v9[6] = a2;
        C3DMeshApplySources((uint64_t)key, 1, (uint64_t)v9);
        glBindBuffer(0x8892u, 0);
        v7 = *(__CFDictionary **)(a1 + 128);
        MutabilityTimeStamp = (const void *)C3DMeshGetMutabilityTimeStamp((uint64_t)key);
        CFDictionarySetValue(v7, key, MutabilityTimeStamp);
      }
      goto LABEL_9;
    }
    (*(void (**)(uint64_t, unsigned int *, uint64_t))(a1 + 1936))(1, &v11, a1);
    ++*(_DWORD *)(a1 + 428);
    (*(void (**)(_QWORD, uint64_t))(a1 + 1928))(v11, a1);
    ++*(_DWORD *)(a1 + 224);
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 0x40000000;
    v10[2] = __C3DRendererContextBindMesh_block_invoke;
    v10[3] = &__block_descriptor_tmp_30_0;
    v10[4] = a2;
    v10[5] = a1;
    C3DMeshApplySources((uint64_t)key, 1, (uint64_t)v10);
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 120), key, (const void *)v11);
    glBindBuffer(0x8892u, 0);
  }
}

void C3DRendererContextBindMeshElement(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t Indexes;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  GLuint Value;
  NSObject *v16;
  _QWORD *MeshElementResident;
  unsigned int *v18;
  unsigned int SharedIndexBufferOffset;
  int v20;
  unsigned int InstanceCount;
  int v22;
  int PrimitiveCount;
  int v24;
  int Type;
  int v26;
  NSObject *v27;
  int v28;

  if (*(const void **)(a1 + 1112) == a3)
    return;
  *(_QWORD *)(a1 + 1112) = a3;
  if (!a3)
  {
    Value = 0;
    *(_QWORD *)(a1 + 1128) = 0;
    *(_QWORD *)(a1 + 1120) = 0;
    *(_DWORD *)(a1 + 1144) = 0;
    *(_QWORD *)(a1 + 1136) = 0;
LABEL_41:
    glBindBuffer(0x8893u, Value);
    ++*(_DWORD *)(a1 + 220);
    return;
  }
  v28 = 0;
  Indexes = C3DMeshElementGetIndexes((uint64_t)a3, &v28);
  if (C3DMeshElementIsVolatile((uint64_t)a3))
  {
    if (!*(_QWORD *)(a1 + 2056))
    {
      v7 = scn_default_log();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
        C3DRendererContextBindMeshElement_cold_2(v7, v8, v9, v10, v11, v12, v13, v14);
    }
    Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 2056), a3);
    *(_DWORD *)(a1 + 1120) = 1;
    if (v28 != 4)
    {
      if (v28 != 2)
      {
        if (v28 != 1)
        {
          v16 = scn_default_log();
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
            goto LABEL_44;
          return;
        }
        goto LABEL_21;
      }
LABEL_23:
      v20 = 5123;
      goto LABEL_24;
    }
LABEL_22:
    v20 = 5125;
    goto LABEL_24;
  }
  if (!Indexes)
  {
    Value = 0;
    *(_DWORD *)(a1 + 1120) = 0;
    goto LABEL_25;
  }
  *(_DWORD *)(a1 + 1120) = 1;
  MeshElementResident = C3DResourceManagerMakeMeshElementResident(a2, (uint64_t)a3, a1);
  Value = C3DBufferObjectGetBufferID((uint64_t)MeshElementResident);
  v18 = (unsigned int *)MeshElementResident[9];
  if (v18)
    SharedIndexBufferOffset = *v18;
  else
    SharedIndexBufferOffset = C3DMeshElementGetSharedIndexBufferOffset((uint64_t)a3);
  *(_QWORD *)(a1 + 1136) = SharedIndexBufferOffset;
  switch(v28)
  {
    case 4:
      goto LABEL_22;
    case 2:
      goto LABEL_23;
    case 1:
LABEL_21:
      v20 = 5121;
LABEL_24:
      *(_DWORD *)(a1 + 1132) = v20;
LABEL_25:
      if ((*(_BYTE *)(a1 + 104) & 1) != 0)
      {
        InstanceCount = C3DMeshElementGetInstanceCount((uint64_t)a3);
        if (InstanceCount >= 2)
        {
          *(_DWORD *)(a1 + 1148) = InstanceCount;
          if (Indexes)
            v22 = 3;
          else
            v22 = 2;
          *(_DWORD *)(a1 + 1120) = v22;
        }
      }
      PrimitiveCount = C3DMeshElementGetPrimitiveCount((uint64_t)a3);
      if (C3DMeshElementGetPrimitiveRange((uint64_t)a3) != -1)
        PrimitiveCount = v24;
      Type = C3DMeshElementGetType((uint64_t)a3);
      *(_DWORD *)(a1 + 1144) = PrimitiveCount;
      switch(Type)
      {
        case 0:
          *(_DWORD *)(a1 + 1124) = 4;
          PrimitiveCount *= 3;
          goto LABEL_40;
        case 1:
          v26 = 5;
          goto LABEL_39;
        case 2:
          *(_DWORD *)(a1 + 1124) = 1;
          PrimitiveCount *= 2;
          goto LABEL_40;
        case 3:
          *(_DWORD *)(a1 + 1124) = 0;
          goto LABEL_40;
        case 5:
          v26 = 6;
LABEL_39:
          *(_DWORD *)(a1 + 1124) = v26;
          PrimitiveCount += 2;
LABEL_40:
          *(_DWORD *)(a1 + 1128) = PrimitiveCount;
          break;
        default:
          goto LABEL_41;
      }
      goto LABEL_41;
  }
  v27 = scn_default_log();
  if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
LABEL_44:
    C3DRendererContextBindMeshElement_cold_1();
}

void _C3DRendererContextMeshWillDie(uint64_t a1, const void *a2, NSObject *a3)
{
  unsigned int Value;
  __CFDictionary *v7;
  _QWORD v8[5];
  unsigned int v9;

  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 120), a2);
  if (Value)
  {
    C3DRendererContextRetainContext(a1);
    CFRetain((CFTypeRef)a1);
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 0x40000000;
    v8[2] = ___C3DRendererContextMeshWillDie_block_invoke;
    v8[3] = &__block_descriptor_tmp_28;
    v8[4] = a1;
    v9 = Value;
    dispatch_async(a3, v8);
    *(_QWORD *)(a1 + 1104) = -1;
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 120), a2);
    v7 = *(__CFDictionary **)(a1 + 128);
    if (v7)
      CFDictionaryRemoveValue(v7, a2);
  }
}

uint64_t C3DRendererContextGetProfile(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t C3DRendererContextBindEffectSlot(float32x2_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  float32x2_t *Texture;
  uint64_t v22;
  const void *TextureSampler;
  void *Image;
  const GLfloat *ImageTransform;
  _OWORD v26[4];

  if (!a3)
  {
    v12 = scn_default_log();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
      C3DRendererContextExecuteSlotTextureProxy_cold_1(v12, v13, v14, v15, v16, v17, v18, v19);
  }
  if (a5 > 7)
    return 0;
  Texture = (float32x2_t *)C3DEffectSlotGetTexture(a3);
  TextureSampler = (const void *)C3DEffectSlotGetTextureSampler(a3);
  if (TextureSampler)
  {
    if (!Texture)
    {
LABEL_10:
      Image = (void *)C3DEffectSlotGetImage(a3);
      if (Image)
        Texture = C3DResourceManagerMakeImageResident(a2, Image, TextureSampler, a1);
      else
        Texture = 0;
    }
  }
  else
  {
    TextureSampler = (const void *)C3DTextureSamplerGetDefault();
    if (!Texture)
      goto LABEL_10;
  }
  if (a6 != -1)
  {
    ImageTransform = (const GLfloat *)C3DEffectSlotGetImageTransform(a3);
    memset(v26, 0, sizeof(v26));
    if (!ImageTransform)
    {
      ImageTransform = (const GLfloat *)v26;
      C3DMatrix4x4MakeIdentity((uint64_t)v26);
    }
    glUniformMatrix4fv(a6, 1, 0, ImageTransform);
    if (a1)
      ++a1[33].i32[0];
  }
  result = 0;
  if (Texture && TextureSampler)
  {
    C3DRendererContextBindTexture((uint64_t)a1, Texture, (uint64_t)TextureSampler, v22, a5);
    if (a4 != -1)
    {
      glUniform1i(a4, a5);
      if (a1)
        ++a1[31].i32[0];
    }
    return 1;
  }
  return result;
}

uint64_t __ReserveAndBindVolatileVBO(_DWORD *a1, unint64_t a2, _QWORD *a3, int a4, int a5)
{
  GLenum v9;
  _DWORD *v10;
  uint64_t Count;
  uint64_t ValuePtrAtIndex;
  uint64_t v13;
  uint64_t *v14;
  _DWORD *v15;
  unint64_t Size;
  unint64_t v17;
  int v18;
  uint64_t v19;
  int v22;
  uint64_t v23;
  GLsizeiptr v24;
  uint64_t result;
  GLuint BufferID;
  uint64_t v27;
  GLsizeiptr v28;
  GLenum target;

  v9 = gl_ArrayBufferType[a5];
  v10 = &a1[6 * a5];
  Count = C3DArrayGetCount(*((_QWORD *)v10 + 249));
  ValuePtrAtIndex = C3DArrayGetValuePtrAtIndex(*((_QWORD *)v10 + 249), v10[501]);
  v13 = *(_QWORD *)ValuePtrAtIndex;
  if (!*(_QWORD *)ValuePtrAtIndex)
  {
LABEL_25:
    v23 = 0x800000;
    if (a2 > 0x800000)
      v23 = a2;
    if (a4)
      v24 = a2;
    else
      v24 = v23;
    result = C3DRendererContextAllocateBufferObject(a1, (char)a5, v24, 1);
    *(_QWORD *)ValuePtrAtIndex = result;
    *(_QWORD *)(ValuePtrAtIndex + 8) = a2;
    *(_DWORD *)(ValuePtrAtIndex + 20) = a1[14];
    *a3 = 0;
    return result;
  }
  target = v9;
  v14 = (uint64_t *)(v10 + 498);
  v15 = v10 + 501;
  while (1)
  {
    Size = C3DBufferObjectGetSize(v13);
    v17 = Size;
    v18 = a1[14] - *(_DWORD *)(ValuePtrAtIndex + 20);
    if (!v18)
      v18 = 0x7FFFFFFF;
    v19 = *(_QWORD *)(ValuePtrAtIndex + 8);
    if (Size > 0x800000 && !v19 && v18 >= 3)
    {
      v19 = 0;
      if (*(_DWORD *)(ValuePtrAtIndex + 16) > 0x3Cu)
        v17 = 0;
    }
    if (v19 + a2 > v17 || v18 < 3)
      break;
    if (!v19 || (a4 & 1) == 0)
    {
      BufferID = C3DBufferObjectGetBufferID(*(_QWORD *)ValuePtrAtIndex);
      glBindBuffer(target, BufferID);
      ++a1[52];
      *(_DWORD *)(ValuePtrAtIndex + 20) = a1[14];
      result = *(_QWORD *)ValuePtrAtIndex;
      *a3 = *(_QWORD *)(ValuePtrAtIndex + 8);
      *(_QWORD *)(ValuePtrAtIndex + 8) += a2;
      return result;
    }
LABEL_22:
    v22 = (*v15 + 1) % Count;
    *v15 = v22;
    if (a1[6 * a5 + 500] == v22)
      C3DArraySetCount((_DWORD *)*v14, Count + 1);
    Count = C3DArrayGetCount(*v14);
    ValuePtrAtIndex = C3DArrayGetValuePtrAtIndex(*v14, *v15);
    v13 = *(_QWORD *)ValuePtrAtIndex;
    if (!*(_QWORD *)ValuePtrAtIndex)
      goto LABEL_25;
  }
  if (v19 || v18 < 3)
    goto LABEL_22;
  v27 = 0x800000;
  if (a2 > 0x800000)
    v27 = a2;
  if (a4)
    v28 = a2;
  else
    v28 = v27;
  C3DRendererContextDeleteBufferObject(a1, *(_QWORD *)ValuePtrAtIndex);
  if (*(_QWORD *)ValuePtrAtIndex)
  {
    CFRelease(*(CFTypeRef *)ValuePtrAtIndex);
    *(_QWORD *)ValuePtrAtIndex = 0;
  }
  result = C3DRendererContextAllocateBufferObject(a1, (char)a5, v28, 1);
  *(_QWORD *)ValuePtrAtIndex = result;
  *(_QWORD *)(ValuePtrAtIndex + 8) = a2;
  *(_DWORD *)(ValuePtrAtIndex + 20) = a1[14];
  *a3 = 0;
  if (a4)
    *(_QWORD *)(ValuePtrAtIndex + 8) = v17;
  return result;
}

uint64_t C3DRendererContextMapVolatileMesh(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, int a5)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  GLuint BufferID;
  __CFArray *Mutable;
  _QWORD v31[6];
  _QWORD v32[10];
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  char v36;
  unsigned int value;
  _QWORD value_4[4];
  uint64_t v39;
  _QWORD v40[6];
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;

  if ((C3DMeshIsVolatile((uint64_t)a3) & 1) != 0)
  {
    v41 = 0;
    v42 = &v41;
    v43 = 0x2000000000;
    v44 = 0;
    v10 = MEMORY[0x1E0C809B0];
    v40[0] = MEMORY[0x1E0C809B0];
    v40[1] = 0x40000000;
    v40[2] = __C3DRendererContextMapVolatileMesh_block_invoke;
    v40[3] = &unk_1EA59FCA8;
    v40[4] = &v41;
    v40[5] = a4;
    C3DMeshApplySources((uint64_t)a3, 1, (uint64_t)v40);
    v11 = v42[3];
    if (v11
      && (v39 = 0, (v12 = __ReserveAndBindVolatileVBO((_DWORD *)a1, v11, &v39, a5, 0)) != 0)
      && (v13 = v12,
          v14 = v39,
          (v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 1960))(34962, v39, v42[3], 38, a1)) != 0))
    {
      v16 = v15;
      *(_QWORD *)(C3DArrayGetValuePtrAtIndex(*(_QWORD *)(a1 + 1992), *(unsigned int *)(a1 + 2004)) + 24) = v15;
      value_4[0] = 0;
      value_4[1] = value_4;
      value_4[2] = 0x2000000000;
      value_4[3] = 0;
      value = 0;
      v17 = *(_DWORD *)(a1 + 2048);
      if (v17 >= C3DArrayGetCount(*(_QWORD *)(a1 + 2040)))
      {
        (*(void (**)(uint64_t, unsigned int *, uint64_t))(a1 + 1936))(1, &value, a1);
        ++*(_DWORD *)(a1 + 428);
        C3DArrayAppendValue(*(_QWORD *)(a1 + 2040), &value);
        v18 = value;
      }
      else
      {
        v18 = *(unsigned int *)C3DArrayGetValuePtrAtIndex(*(_QWORD *)(a1 + 2040), *(unsigned int *)(a1 + 2048));
        value = v18;
      }
      ++*(_DWORD *)(a1 + 2048);
      (*(void (**)(uint64_t, uint64_t))(a1 + 1928))(v18, a1);
      ++*(_DWORD *)(a1 + 224);
      v33 = 0;
      v34 = &v33;
      v35 = 0x2000000000;
      v36 = 0;
      v32[0] = v10;
      v32[1] = 0x40000000;
      v32[2] = __C3DRendererContextMapVolatileMesh_block_invoke_2;
      v32[3] = &unk_1EA59FCD0;
      v32[4] = &v33;
      v32[5] = value_4;
      v32[6] = v16;
      v32[7] = v14;
      v32[8] = a1;
      v32[9] = v13;
      C3DMeshApplySources((uint64_t)a3, 1, (uint64_t)v32);
      if (*((_BYTE *)v34 + 24))
      {
        v31[0] = v10;
        v31[1] = 0x40000000;
        v31[2] = __C3DRendererContextMapVolatileMesh_block_invoke_3;
        v31[3] = &__block_descriptor_tmp_36;
        v31[4] = a2;
        v31[5] = a1;
        C3DMeshApplySources((uint64_t)a3, 1, (uint64_t)v31);
        BufferID = C3DBufferObjectGetBufferID(v13);
        glBindBuffer(0x8892u, BufferID);
        ++*(_DWORD *)(a1 + 208);
      }
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 120), a3, (const void *)value);
      (*(void (**)(_QWORD, uint64_t))(a1 + 1928))(0, a1);
      Mutable = *(__CFArray **)(a1 + 2008);
      if (!Mutable)
      {
        Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
        *(_QWORD *)(a1 + 2008) = Mutable;
      }
      CFArrayAppendValue(Mutable, a3);
      _Block_object_dispose(&v33, 8);
      _Block_object_dispose(value_4, 8);
      v27 = 1;
    }
    else
    {
      v27 = 0;
    }
    _Block_object_dispose(&v41, 8);
  }
  else
  {
    v19 = scn_default_log();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_FAULT))
      C3DRendererContextMapVolatileMesh_cold_1(v19, v20, v21, v22, v23, v24, v25, v26);
    return 0;
  }
  return v27;
}

void C3DRendererContextUnmapVolatileMesh(uint64_t a1, uint64_t a2)
{
  _QWORD v2[5];

  v2[0] = MEMORY[0x1E0C809B0];
  v2[1] = 0x40000000;
  v2[2] = __C3DRendererContextUnmapVolatileMesh_block_invoke;
  v2[3] = &__block_descriptor_tmp_39_0;
  v2[4] = a1;
  C3DMeshApplySources(a2, 1, (uint64_t)v2);
  glBindBuffer(0x8892u, 0);
}

uint64_t C3DRendererContextMapVolatileMeshElement(uint64_t a1, const void *a2, uint64_t a3, int a4)
{
  NSObject *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  CFMutableDictionaryRef Mutable;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int BufferID;
  __CFArray *v46;
  uint64_t v47;

  if (C3DMeshElementIsVolatile((uint64_t)a2))
  {
    switch(C3DMeshElementGetType((uint64_t)a2))
    {
      case 0u:
        a3 *= 3;
        goto LABEL_8;
      case 1u:
      case 5u:
        a3 += 2;
        if (!a3)
          goto LABEL_14;
        goto LABEL_17;
      case 2u:
        a3 *= 2;
        if (!a3)
          goto LABEL_14;
        goto LABEL_17;
      case 4u:
        v17 = scn_default_log();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT))
          C3DRendererContextMapVolatileMeshElement_cold_3(v17, v18, v19, v20, v21, v22, v23, v24);
        goto LABEL_14;
      default:
LABEL_8:
        if (!a3)
        {
LABEL_14:
          v25 = scn_default_log();
          if (os_log_type_enabled(v25, OS_LOG_TYPE_FAULT))
            C3DRendererContextMapVolatileMeshElement_cold_2(v25, v26, v27, v28, v29, v30, v31, v32);
          a3 = 0;
        }
LABEL_17:
        v33 = a3 * C3DMeshElementGetBytesPerIndex((uint64_t)a2);
        if (!v33)
          return 0;
        v47 = 0;
        result = __ReserveAndBindVolatileVBO((_DWORD *)a1, v33, &v47, a4, 1);
        if (result)
        {
          v34 = result;
          result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(a1 + 1960))(34963, v47, v33, 38, a1);
          if (result)
          {
            v35 = result;
            *(_QWORD *)(C3DArrayGetValuePtrAtIndex(*(_QWORD *)(a1 + 2016), *(unsigned int *)(a1 + 2028)) + 24) = result;
            C3DMeshElementSetVolatileDataPtr((uint64_t)a2, v35);
            if (!*(_QWORD *)(a1 + 2056))
            {
              Mutable = CFDictionaryCreateMutable(0, 3, 0, 0);
              *(_QWORD *)(a1 + 2056) = Mutable;
              if (!Mutable)
              {
                v37 = scn_default_log();
                if (os_log_type_enabled(v37, OS_LOG_TYPE_FAULT))
                  C3DRendererContextMapVolatileMeshElement_cold_1(v37, v38, v39, v40, v41, v42, v43, v44);
              }
            }
            BufferID = C3DBufferObjectGetBufferID(v34);
            CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 2056), a2, (const void *)BufferID);
            *(_DWORD *)(a1 + 1120) = 1;
            v46 = *(__CFArray **)(a1 + 2032);
            if (!v46)
            {
              v46 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
              *(_QWORD *)(a1 + 2032) = v46;
            }
            CFArrayAppendValue(v46, a2);
            result = 1;
          }
        }
        break;
    }
  }
  else
  {
    v8 = scn_default_log();
    result = os_log_type_enabled(v8, OS_LOG_TYPE_FAULT);
    if ((_DWORD)result)
    {
      C3DRendererContextMapVolatileMesh_cold_1(v8, v10, v11, v12, v13, v14, v15, v16);
      return 0;
    }
  }
  return result;
}

void C3DRendererContextUnmapVolatileMeshElement(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t VolatileDataPtr;
  uint64_t v13;
  _QWORD v14[6];

  if (!C3DMeshElementIsVolatile(a2))
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DRendererContextUnmapVolatileMeshElement_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  VolatileDataPtr = C3DMeshElementGetVolatileDataPtr(a2);
  v13 = *(_QWORD *)(a1 + 2016);
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 0x40000000;
  v14[2] = __C3DRendererContextUnmapVolatileMeshElement_block_invoke;
  v14[3] = &__block_descriptor_tmp_42;
  v14[4] = VolatileDataPtr;
  v14[5] = a1;
  C3DArrayApply(v13, (uint64_t)v14);
  C3DMeshElementSetVolatileDataPtr(a2, 0);
  glBindBuffer(0x8893u, 0);
}

void C3DRendererContextResetVolatileObjects(uint64_t a1)
{
  uint64_t v2;
  char v3;
  char v4;
  int v5;
  uint64_t v6;
  const __CFArray *v7;
  CFArrayRef *v8;
  CFIndex Count;
  CFIndex v10;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  __CFDictionary *v17;
  _QWORD v18[5];
  int v19;

  v2 = 0;
  v3 = 1;
  do
  {
    v4 = v3;
    v5 = gl_ArrayBufferType[v2];
    v6 = a1 + 24 * v2;
    v7 = *(const __CFArray **)(v6 + 2008);
    if (v7)
    {
      v8 = (CFArrayRef *)(v6 + 2008);
      Count = CFArrayGetCount(v7);
      if (Count >= 1)
      {
        v10 = Count;
        for (i = 0; i != v10; ++i)
        {
          if ((v4 & 1) != 0)
          {
            ValueAtIndex = CFArrayGetValueAtIndex(*v8, i);
            CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 120), ValueAtIndex);
          }
        }
      }
      CFArrayRemoveAllValues(*v8);
    }
    v13 = *(_QWORD *)(v6 + 1992);
    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 0x40000000;
    v18[2] = __C3DRendererContextResetVolatileObjects_block_invoke;
    v18[3] = &__block_descriptor_tmp_43;
    v19 = v5;
    v18[4] = a1;
    C3DArrayApply(v13, (uint64_t)v18);
    v14 = C3DArrayGetCount(*(_QWORD *)(v6 + 1992));
    v3 = 0;
    v15 = a1 + 24 * v2;
    v16 = (*(_DWORD *)(v15 + 2004) + 1) % v14;
    *(_DWORD *)(v15 + 2004) = v16;
    *(_DWORD *)(v15 + 2000) = v16;
    v2 = 1;
  }
  while ((v4 & 1) != 0);
  v17 = *(__CFDictionary **)(a1 + 2056);
  if (v17)
    CFDictionaryRemoveAllValues(v17);
  *(_DWORD *)(a1 + 2048) = 0;
}

uint64_t C3DRendererContextGetShowsAuthoringEnvironment(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 91);
}

uint64_t C3DRendererContextSetCompilationErrorsCollection(uint64_t result, char a2)
{
  *(_BYTE *)(result + 92) = a2;
  return result;
}

uint64_t C3DRendererContextGetCompilationErrorsCollection(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 92);
}

const __CFDictionary *C3DRendererContextGetCompilationErrors(uint64_t a1)
{
  const __CFDictionary *result;

  result = *(const __CFDictionary **)(a1 + 96);
  if (result)
  {
    result = (const __CFDictionary *)CFDictionaryGetCount(result);
    if (result)
      return *(const __CFDictionary **)(a1 + 96);
  }
  return result;
}

void C3DRendererContextPushGroupMarker(uint64_t a1, const char *a2)
{
  glPushGroupMarkerEXT(0, a2);
}

void C3DRendererContextBumpTimeStamp(uint64_t a1)
{
  __CFDictionary *v2;

  v2 = *(__CFDictionary **)(a1 + 96);
  if (v2)
    CFDictionaryRemoveAllValues(v2);
  ++*(_DWORD *)(a1 + 56);
}

uint64_t kSCNMaterialPropertyTextureProviderSourceCallbackCreateTextureProxy(__C3DEngineContext *a1, __C3DTextureSampler *a2, const void *a3)
{
  uint64_t v4;
  __int128 v6[2];

  if (!a3)
    return 0;
  v6[0] = xmmword_1EA59FE58;
  v6[1] = *(_OWORD *)off_1EA59FE68;
  v4 = C3DTextureProxyCreate();
  C3DTextureProxySetCallbacks(v4, v6);
  C3DTextureProxySetSource(v4, a3);
  return v4;
}

uint64_t kSCNMaterialPropertyTextureProviderSourceCallbackIsOpaque(const void *a1)
{
  return 1;
}

uint64_t kSCNMaterialPropertyTextureProviderSourceCallbackIsPremultiplied(const void *a1)
{
  return 1;
}

uint64_t __renderToTexture(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v8[5];
  _QWORD v9[5];
  _QWORD v10[5];

  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = ___ZL17__renderToTexturePU45objcproto34SCNMaterialPropertyTextureProvider11objc_objectPU21objcproto10MTLTexture11objc_objectPU51objcproto40SCNMaterialPropertyTextureProviderHelper11objc_objectP19SCNMTLRenderContext_block_invoke;
  v10[3] = &unk_1EA59FE80;
  v10[4] = a4;
  v8[4] = a4;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___ZL17__renderToTexturePU45objcproto34SCNMaterialPropertyTextureProvider11objc_objectPU21objcproto10MTLTexture11objc_objectPU51objcproto40SCNMaterialPropertyTextureProviderHelper11objc_objectP19SCNMTLRenderContext_block_invoke_71;
  v9[3] = &unk_1EA59FEA8;
  v9[4] = a4;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = ___ZL17__renderToTexturePU45objcproto34SCNMaterialPropertyTextureProvider11objc_objectPU21objcproto10MTLTexture11objc_objectPU51objcproto40SCNMaterialPropertyTextureProviderHelper11objc_objectP19SCNMTLRenderContext_block_invoke_74;
  v8[3] = &unk_1EA59FED0;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    return objc_msgSend(a1, "renderToTexture:computeCommandHandler:blitCommandHandler:completionHandler:helper:", a2, v10, v9, v8, a3);
  else
    return objc_msgSend(a1, "renderToTexture:computeCommandHandler:blitCommandHandler:helper:", a2, v10, v9, a3);
}

uint64_t ___ZL17__renderToTexturePU45objcproto34SCNMaterialPropertyTextureProvider11objc_objectPU21objcproto10MTLTexture11objc_objectPU51objcproto40SCNMaterialPropertyTextureProviderHelper11objc_objectP19SCNMTLRenderContext_block_invoke(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a2)
  {
    v3 = (_QWORD *)-[SCNMTLRenderContext resourceComputeEncoder](*(_QWORD *)(result + 32));
    if (!v3[207])
    {
      v4 = scn_default_log();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
        ___ZL17__renderToTexturePU45objcproto34SCNMaterialPropertyTextureProvider11objc_objectPU21objcproto10MTLTexture11objc_objectPU51objcproto40SCNMaterialPropertyTextureProviderHelper11objc_objectP19SCNMTLRenderContext_block_invoke_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
    }
    bzero(v3, 0x678uLL);
    return (*(uint64_t (**)(uint64_t, _QWORD))(a2 + 16))(a2, v3[207]);
  }
  return result;
}

uint64_t ___ZL17__renderToTexturePU45objcproto34SCNMaterialPropertyTextureProvider11objc_objectPU21objcproto10MTLTexture11objc_objectPU51objcproto40SCNMaterialPropertyTextureProviderHelper11objc_objectP19SCNMTLRenderContext_block_invoke_71(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a2)
  {
    v3 = (_QWORD *)-[SCNMTLRenderContext resourceBlitEncoder](*(_QWORD *)(result + 32));
    if (!*v3)
    {
      v4 = scn_default_log();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
        ___ZL17__renderToTexturePU45objcproto34SCNMaterialPropertyTextureProvider11objc_objectPU21objcproto10MTLTexture11objc_objectPU51objcproto40SCNMaterialPropertyTextureProviderHelper11objc_objectP19SCNMTLRenderContext_block_invoke_71_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
    }
    return (*(uint64_t (**)(uint64_t, _QWORD))(a2 + 16))(a2, *v3);
  }
  return result;
}

uint64_t ___ZL17__renderToTexturePU45objcproto34SCNMaterialPropertyTextureProvider11objc_objectPU21objcproto10MTLTexture11objc_objectPU51objcproto40SCNMaterialPropertyTextureProviderHelper11objc_objectP19SCNMTLRenderContext_block_invoke_74(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a2)
  {
    v3 = -[SCNMTLRenderContext resourceComputeEncoder](*(_QWORD *)(result + 32));
    if (!*(_QWORD *)(v3 + 1656))
    {
      v4 = scn_default_log();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
        ___ZL17__renderToTexturePU45objcproto34SCNMaterialPropertyTextureProvider11objc_objectPU21objcproto10MTLTexture11objc_objectPU51objcproto40SCNMaterialPropertyTextureProviderHelper11objc_objectP19SCNMTLRenderContext_block_invoke_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
    }
    return objc_msgSend(*(id *)(v3 + 1664), "addCompletedHandler:", a2);
  }
  return result;
}

void C3DRendererContextSetGLContext(__n64 *a1, void *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  void *v13;
  const void *v14;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DRendererContextSetGLContext_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = (const void *)a1[20].n64_u64[0];
  if (v12 != a2)
  {
    if (v12)
    {
      C3DResourceManagerRegistryReleaseContext((uint64_t)a1, v12);
      v13 = (void *)a1[20].n64_u64[0];
      if (v13)
        C3DEAGLWrapperContextRelease(v13);
    }
    if (a2)
      C3DEAGLWrapperContextRetain(a2);
    a1[20].n64_u64[0] = (unint64_t)a2;
    __InitStateVarsIfNeeded(a1);
    v14 = (const void *)a1[20].n64_u64[0];
    if (v14)
      C3DResourceManagerRegistryRetainContext(v14);
  }
}

uint64_t C3DRendererContextGetGLContext(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DRendererContextSetGLContext_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 160);
}

void _C3DParticleManagerCFFinalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;

  v2 = (const void *)a1[3];
  if (v2)
  {
    CFRelease(v2);
    a1[3] = 0;
  }
  v3 = (const void *)a1[14];
  if (v3)
  {
    CFRelease(v3);
    a1[14] = 0;
  }
  v4 = (const void *)a1[5];
  if (v4)
  {
    CFRelease(v4);
    a1[5] = 0;
  }
  v5 = (const void *)a1[6];
  if (v5)
  {
    CFRelease(v5);
    a1[6] = 0;
  }
  v6 = (const void *)a1[7];
  if (v6)
  {
    CFRelease(v6);
    a1[7] = 0;
  }
  v7 = (const void *)a1[8];
  if (v7)
  {
    CFRelease(v7);
    a1[8] = 0;
  }
  v8 = (const void *)a1[6];
  if (v8)
  {
    CFRelease(v8);
    a1[6] = 0;
  }
  v9 = (const void *)a1[10];
  if (v9)
  {
    CFRelease(v9);
    a1[10] = 0;
  }
  v10 = (const void *)a1[11];
  if (v10)
  {
    CFRelease(v10);
    a1[11] = 0;
  }
  v11 = (const void *)a1[12];
  if (v11)
  {
    CFRelease(v11);
    a1[12] = 0;
  }
  v12 = (const void *)a1[13];
  if (v12)
  {
    CFRelease(v12);
    a1[13] = 0;
  }
}

CFStringRef _C3DParticleManagerCFCopyFormatDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DParticleManagerRef>"));
}

CFStringRef _C3DParticleManagerCFCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DParticleManagerRef>"));
}

_QWORD *C3DParticleManagerCreate(uint64_t a1)
{
  _QWORD *Instance;
  const __CFAllocator *v3;

  if (C3DParticleManagerGetTypeID_onceToken != -1)
    dispatch_once(&C3DParticleManagerGetTypeID_onceToken, &__block_literal_global_35);
  Instance = (_QWORD *)C3DTypeCreateInstance_(C3DParticleManagerGetTypeID_typeID, 0x68uLL);
  Instance[2] = a1;
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Instance[3] = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  Instance[14] = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  return Instance;
}

void C3DParticleManagerRegisterSystem(uint64_t a1, float32x4_t *a2)
{
  const __CFArray *ParticleSystems;
  const __CFArray *v5;
  CFIndex Count;
  CFIndex v7;
  CFIndex i;
  const void *ValueAtIndex;

  ParticleSystems = C3DNodeGetParticleSystems((uint64_t)a2);
  if (ParticleSystems)
  {
    v5 = ParticleSystems;
    Count = CFArrayGetCount(ParticleSystems);
    if (Count >= 1)
    {
      v7 = Count;
      for (i = 0; i != v7; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v5, i);
        C3DParticleManagerAddSystem(a1, a2, ValueAtIndex, 0);
      }
    }
  }
}

double C3DParticleManagerAddSystem(uint64_t a1, float32x4_t *a2, const void *a3, __int128 *a4)
{
  CFIndex Count;
  CFIndex v9;
  CFIndex v10;
  const void *ValueAtIndex;
  double result;

  if ((C3DParticleSystemGetIsLocal((uint64_t)a3) & 1) != 0)
    goto LABEL_8;
  Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 24));
  if (Count < 1)
    goto LABEL_8;
  v9 = Count;
  v10 = 0;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), v10);
    if ((const void *)C3DParticleSystemInstanceGetSystem((uint64_t)ValueAtIndex) == a3)
      break;
    if (v9 == ++v10)
      goto LABEL_8;
  }
  if (!ValueAtIndex)
  {
LABEL_8:
    ValueAtIndex = (const void *)C3DParticleSystemInstanceCreate((uint64_t)a2, a3, a1);
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 24), ValueAtIndex);
    CFRelease(ValueAtIndex);
  }
  *(_QWORD *)&result = C3DParticleSystemInstanceAddEmitter((uint64_t)ValueAtIndex, a4, a2).n128_u64[0];
  return result;
}

void C3DParticleManagerUnregisterSystem(uint64_t a1, uint64_t a2)
{
  if (C3DNodeGetParticleSystems(a2))
    C3DParticleManagerRemoveAllInstanceOfSystemsOnNode(a1, a2);
}

void C3DParticleManagerRemoveAllInstanceOfSystemsOnNode(uint64_t a1, uint64_t a2)
{
  CFIndex Count;
  CFIndex v5;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t Library;
  uint64_t System;
  BOOL v10;

  Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 24));
  if (Count >= 1)
  {
    v5 = Count;
    for (i = 0; i < v5; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), i);
      Library = C3DSceneSourceGetLibrary((uint64_t)ValueAtIndex);
      System = C3DParticleSystemInstanceGetSystem((uint64_t)ValueAtIndex);
      if (C3DParticleSystemGetIsLocal(System))
        v10 = Library == a2;
      else
        v10 = 0;
      if (v10)
      {
        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 24), i);
        --v5;
        --i;
      }
      else
      {
        if (Library == a2)
          C3DParticleSystemInstanceSetNode((uint64_t)ValueAtIndex, 0);
        C3DParticleSystemInstanceRemoveEmittersWithNode((uint64_t)ValueAtIndex, a2);
      }
    }
  }
}

void C3DParticleManagerRemoveSystem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFIndex Count;
  CFIndex v7;
  CFIndex v8;
  const void *ValueAtIndex;

  Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 24));
  if (Count >= 1)
  {
    v7 = Count;
    v8 = 0;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), v8);
      if (C3DSceneSourceGetLibrary((uint64_t)ValueAtIndex) == a2
        && C3DParticleSystemInstanceGetSystem((uint64_t)ValueAtIndex) == a3)
      {
        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 24), v8);
        --v7;
      }
      else
      {
        ++v8;
      }
    }
    while (v8 < v7);
  }
}

void C3DParticleManagerRemoveAllInstanceOfSystem(uint64_t a1, uint64_t a2)
{
  CFIndex Count;
  CFIndex v5;
  CFIndex v6;
  const void *ValueAtIndex;

  Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 24));
  if (Count >= 1)
  {
    v5 = Count;
    v6 = 0;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), v6);
      if (C3DParticleSystemInstanceGetSystem((uint64_t)ValueAtIndex) == a2)
      {
        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 24), v6);
        --v5;
      }
      else
      {
        ++v6;
      }
    }
    while (v6 < v5);
  }
}

void C3DParticleManagerResetAllInstanceOfSystem(uint64_t a1, uint64_t a2)
{
  CFIndex Count;
  CFIndex v5;
  CFIndex i;
  const void *ValueAtIndex;

  Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 24));
  if (Count >= 1)
  {
    v5 = Count;
    for (i = 0; i != v5; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), i);
      if (C3DParticleSystemInstanceGetSystem((uint64_t)ValueAtIndex) == a2)
        C3DParticleSystemInstanceReset((uint64_t)ValueAtIndex);
    }
  }
}

__CFArray *C3DParticleManagerGetParticleSystemsForNode(uint64_t a1, uint64_t a2)
{
  CFIndex Count;
  __CFArray *Mutable;
  CFIndex i;
  const void *ValueAtIndex;
  const void *System;

  Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 24));
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), i);
      if (C3DSceneSourceGetLibrary((uint64_t)ValueAtIndex) == a2)
      {
        System = (const void *)C3DParticleSystemInstanceGetSystem((uint64_t)ValueAtIndex);
        CFArrayAppendValue(Mutable, System);
      }
    }
  }
  return Mutable;
}

void C3DParticleManagerRemoveAllSystems(uint64_t a1)
{
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 24));
}

void __C3DParticleManagerRemoveActiveSystemInstance(uint64_t a1, const void *a2)
{
  CFIndex Count;
  CFIndex v5;
  CFIndex v6;

  Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 24));
  if (Count >= 1)
  {
    v5 = Count;
    v6 = 0;
    while (CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), v6) != a2)
    {
      if (v5 == ++v6)
        return;
    }
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 24), v6);
  }
}

void C3DParticleManagerUpdate(uint64_t a1, uint64_t a2, double a3)
{
  CFIndex Count;
  CFIndex v7;
  unint64_t v8;
  const void **v9;
  size_t v10;
  int v11;
  uint64_t *v12;
  uint64_t System;
  uint64_t Library;
  uint64_t v15;
  uint64_t v16;
  float32x4_t *v17;
  uint64_t SharedInstance;
  _QWORD v19[2];
  CFRange v20;

  v19[1] = *MEMORY[0x1E0C80C00];
  Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 24));
  if (Count)
  {
    v7 = Count;
    MEMORY[0x1E0C80A78](Count);
    v9 = (const void **)((char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
    if (v8 >= 0x200)
      v10 = 512;
    else
      v10 = v8;
    bzero((char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
    v20.location = 0;
    v20.length = v7;
    CFArrayGetValues(*(CFArrayRef *)(a1 + 24), v20, v9);
    if (v7 < 1)
    {
      LOBYTE(v11) = 0;
    }
    else
    {
      v11 = 0;
      do
      {
        v12 = (uint64_t *)*v9;
        C3DParticleSystemInstanceSync((uint64_t)*v9, a2);
        C3DParticleSystemInstanceUpdate((uint64_t)v12, a3);
        if (C3DSceneSourceGetStatus((uint64_t)v12) == 2)
        {
          System = C3DParticleSystemInstanceGetSystem((uint64_t)v12);
          if ((C3DParticleSystemGetLoops(System) & 1) == 0 && (C3DIsRunningInXcode() & 1) == 0)
          {
            Library = C3DSceneSourceGetLibrary((uint64_t)v12);
            v15 = C3DParticleSystemInstanceGetSystem((uint64_t)v12);
            SCNNodeRemoveDeadParticleInstance(Library, v15);
          }
          if ((C3DIsRunningInXcode() & 1) != 0)
          {
            if (C3DParticleSystemGetLoops(System))
            {
              v16 = C3DSceneSourceGetLibrary((uint64_t)v12);
              if (v16)
              {
                v17 = (float32x4_t *)v16;
                if (C3DNodeGetParticleSystems(v16))
                  C3DParticleManagerRemoveAllInstanceOfSystemsOnNode(a1, (uint64_t)v17);
                C3DParticleManagerRegisterSystem(a1, v17);
                C3DParticleSystemInstanceSetNode((uint64_t)v12, (uint64_t)v17);
              }
            }
          }
          else
          {
            __C3DParticleManagerRemoveActiveSystemInstance(a1, v12);
          }
        }
        else
        {
          v11 |= C3DParticleSystemGetSoftParticlesEnabled(v12[6]);
        }
        ++v9;
        --v7;
      }
      while (v7);
    }
    if (*(_BYTE *)(a1 + 32) != (v11 & 1))
    {
      SharedInstance = C3DNotificationCenterGetSharedInstance();
      C3DNotificationCenterPostNotification(SharedInstance, CFSTR("kC3DNotificationEngineContextInvalidatePasses"), *(const void **)(a1 + 16), 0, 1u);
      *(_BYTE *)(a1 + 32) = v11 & 1;
    }
  }
}

void C3DParticleManagerCull(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  int FrameStamp;
  CFIndex Count;
  CFIndex v12;
  CFIndex i;
  _QWORD *ValueAtIndex;
  __n128 WorldBoundingBox;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v22[6];
  float32x4_t v23;
  float32x4_t v24;

  FrameStamp = C3DSceneGetFrameStamp(*(_QWORD *)(a1 + 16));
  Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 24));
  if (Count >= 1)
  {
    v12 = Count;
    for (i = 0; i != v12; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), i);
      if (C3DParticleSystemInstanceGetParticlesCount((uint64_t)ValueAtIndex)
        && (!*(_BYTE *)(a2 + 4689) || C3DParticleSystemGetBlendMode(ValueAtIndex[6]) == 5))
      {
        v23 = 0u;
        v24 = 0u;
        WorldBoundingBox = C3DParticleSystemInstanceGetWorldBoundingBox((uint64_t)ValueAtIndex);
        v23 = (float32x4_t)WorldBoundingBox;
        v24 = v16;
        if (*(_BYTE *)(a2 + 4692))
          goto LABEL_8;
        v17 = *(float32x4_t *)(a2 + 96 * a4 + 64);
        v22[2] = *(float32x4_t *)(a2 + 96 * a4 + 48);
        v22[3] = v17;
        v18 = *(float32x4_t *)(a2 + 96 * a4 + 96);
        v22[4] = *(float32x4_t *)(a2 + 96 * a4 + 80);
        v22[5] = v18;
        v19 = *(float32x4_t *)(a2 + 96 * a4 + 32);
        v22[0] = *(float32x4_t *)(a2 + 96 * a4 + 16);
        v22[1] = v19;
        if (scn_frustum_classify_aabb(v22, (float32x4_t)WorldBoundingBox, v16) != 1)
LABEL_8:
          C3DParticleSystemInstancePushRendererElements((uint64_t)ValueAtIndex, (uint64_t *)a2, a3, FrameStamp, &v23, a4, a5, a6);
      }
    }
  }
}

uint64_t C3DParticleManagerGetSharedQuadsMeshElement(uint64_t a1, int a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  const void *v11;
  int v12;
  char v13;
  BOOL v14;
  int v15;
  size_t v16;
  const UInt8 *v17;
  unsigned int v18;
  int8x8_t *v19;
  int8x8_t v20;
  int v21;
  UInt8 *v22;
  int v23;
  UInt8 *v24;
  __int16 v25;
  __int16 v26;
  CFDataRef v27;
  const void *v28;
  CFTypeRef v29;

  v4 = *(_QWORD *)(a1 + 40);
  if (!v4 || C3DMeshElementGetPrimitiveCount(v4) < 2 * a2)
  {
    v5 = (a2 - 1) | ((a2 - 1) >> 1) | (((a2 - 1) | ((a2 - 1) >> 1)) >> 2);
    v6 = v5 | (v5 >> 4) | ((v5 | (v5 >> 4)) >> 8);
    v7 = v6 | HIWORD(v6);
    if ((v7 + 1) > 0x100)
      v8 = v7 + 1;
    else
      v8 = 256;
    v9 = 2 * v8;
    v10 = 4 * v8;
    v11 = (const void *)C3DMeshElementCreate();
    if ((4 * v8) > 0x10000)
      v12 = 4;
    else
      v12 = 2;
    if (v10 <= 0x10000)
      v13 = 1;
    else
      v13 = 2;
    v14 = v10 >= 0x101;
    if (v10 < 0x101)
      v15 = 1;
    else
      v15 = v12;
    if (!v14)
      v13 = 0;
    v16 = ((6 * v8) << v13);
    v17 = (const UInt8 *)C3DMallocWithName(v16);
    if (v15 == 1)
    {
      v21 = 0;
      v22 = (UInt8 *)v17;
      do
      {
        *v22 = v21;
        v22[1] = v21 | 1;
        v22[2] = v21 | 2;
        v22[3] = v21;
        v22[4] = v21 | 2;
        v22[5] = v21 | 3;
        v22 += 6;
        v21 += 4;
        --v8;
      }
      while (v8);
    }
    else if (v15 == 2)
    {
      v23 = 0;
      v24 = (UInt8 *)v17;
      do
      {
        *(_WORD *)v24 = v23;
        *((_WORD *)v24 + 1) = v23 | 1;
        v25 = v23 | 2;
        *((_WORD *)v24 + 2) = v23 | 2;
        *((_WORD *)v24 + 3) = v23;
        v26 = v23 | 3;
        v23 += 4;
        *((_WORD *)v24 + 4) = v25;
        *((_WORD *)v24 + 5) = v26;
        v24 += 12;
        --v8;
      }
      while (v8);
    }
    else
    {
      v18 = 0;
      v19 = (int8x8_t *)v17;
      do
      {
        v19->i32[0] = v18;
        v19->i32[1] = v18 + 1;
        v20 = vorr_s8((int8x8_t)vdup_n_s32(v18), (int8x8_t)0x300000002);
        v19[1].i32[0] = v20.i32[0];
        v19[1].i32[1] = v18;
        v19[2] = v20;
        v18 += 4;
        v19 += 3;
        --v8;
      }
      while (v8);
    }
    v27 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v17, v16, (CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
    C3DMeshElementSetPrimitives((uint64_t)v11, v9, v27, v15);
    CFRelease(v27);
    v28 = *(const void **)(a1 + 40);
    if (v28 != v11)
    {
      if (v28)
      {
        CFRelease(v28);
        *(_QWORD *)(a1 + 40) = 0;
      }
      if (v11)
        v29 = CFRetain(v11);
      else
        v29 = 0;
      *(_QWORD *)(a1 + 40) = v29;
    }
    CFRelease(v11);
  }
  return *(_QWORD *)(a1 + 40);
}

const void *C3DParticleManagerGetSharedPyramidQuadsMeshElement(uint64_t a1, int a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  const void *v11;
  int v12;
  char v13;
  BOOL v14;
  int v15;
  size_t v16;
  const UInt8 *v17;
  int v18;
  UInt8 *v19;
  int v20;
  int v21;
  UInt8 *v22;
  int v23;
  UInt8 *v24;
  __int16 v25;
  __int16 v26;
  CFDataRef v27;
  const void *v28;

  v4 = *(_QWORD *)(a1 + 56);
  if (v4 && C3DMeshElementGetPrimitiveCount(v4) >= 4 * a2)
    return *(const void **)(a1 + 56);
  v5 = (a2 - 1) | ((a2 - 1) >> 1) | (((a2 - 1) | ((a2 - 1) >> 1)) >> 2);
  v6 = v5 | (v5 >> 4) | ((v5 | (v5 >> 4)) >> 8);
  v7 = v6 | HIWORD(v6);
  if ((v7 + 1) > 0x100)
    v8 = v7 + 1;
  else
    v8 = 256;
  v9 = 4 * v8;
  v10 = 5 * v8;
  v11 = (const void *)C3DMeshElementCreate();
  if ((5 * v8) >= 0x10000)
    v12 = 4;
  else
    v12 = 2;
  if (v10 < 0x10000)
    v13 = 1;
  else
    v13 = 2;
  v14 = v10 >= 0x100;
  if (v10 < 0x100)
    v15 = 1;
  else
    v15 = v12;
  if (!v14)
    v13 = 0;
  v16 = ((12 * v8) << v13);
  v17 = (const UInt8 *)C3DMallocWithName(v16);
  if (v15 == 1)
  {
    v21 = 0;
    v22 = (UInt8 *)v17;
    do
    {
      *v22 = v21;
      v22[1] = v21 + 1;
      v22[2] = v21 + 4;
      v22[3] = v21 + 1;
      v22[4] = v21 + 2;
      v22[5] = v21 + 4;
      v22[6] = v21 + 2;
      v22[7] = v21 + 3;
      v22[8] = v21 + 4;
      v22[9] = v21 + 3;
      v22[10] = v21;
      v22[11] = v21 + 4;
      v22 += 12;
      v21 += 5;
      --v8;
    }
    while (v8);
  }
  else if (v15 == 2)
  {
    v23 = 0;
    v24 = (UInt8 *)v17;
    do
    {
      *(_WORD *)v24 = v23;
      *((_WORD *)v24 + 1) = v23 + 1;
      v25 = v23 + 4;
      *((_WORD *)v24 + 2) = v23 + 4;
      *((_WORD *)v24 + 3) = v23 + 1;
      *((_WORD *)v24 + 4) = v23 + 2;
      *((_WORD *)v24 + 5) = v23 + 4;
      *((_WORD *)v24 + 6) = v23 + 2;
      v26 = v23 + 3;
      *((_WORD *)v24 + 7) = v23 + 3;
      *((_WORD *)v24 + 8) = v23 + 4;
      *((_WORD *)v24 + 10) = v23;
      v23 += 5;
      *((_WORD *)v24 + 9) = v26;
      *((_WORD *)v24 + 11) = v25;
      v24 += 24;
      --v8;
    }
    while (v8);
  }
  else
  {
    v18 = 0;
    v19 = (UInt8 *)v17;
    do
    {
      *(_DWORD *)v19 = v18;
      *((_DWORD *)v19 + 1) = v18 + 1;
      v20 = v18 + 4;
      *((_DWORD *)v19 + 2) = v18 + 4;
      *((_DWORD *)v19 + 3) = v18 + 1;
      *((_DWORD *)v19 + 4) = v18 + 2;
      *((_DWORD *)v19 + 5) = v18 + 4;
      *((_DWORD *)v19 + 6) = v18 + 2;
      *((_DWORD *)v19 + 7) = v18 + 3;
      *((_DWORD *)v19 + 9) = v18 + 3;
      *((_DWORD *)v19 + 10) = v18;
      v18 += 5;
      *((_DWORD *)v19 + 8) = v20;
      *((_DWORD *)v19 + 11) = v20;
      v19 += 48;
      --v8;
    }
    while (v8);
  }
  v27 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v17, v16, (CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
  C3DMeshElementSetPrimitives((uint64_t)v11, v9, v27, v15);
  CFRelease(v27);
  v28 = *(const void **)(a1 + 56);
  if (v28 != v11)
  {
    if (v28)
    {
      CFRelease(v28);
      *(_QWORD *)(a1 + 56) = 0;
    }
    if (v11)
      v11 = CFRetain(v11);
    *(_QWORD *)(a1 + 56) = v11;
  }
  return v11;
}

uint64_t C3DParticleManagerGetSharedQuadMeshSource(uint64_t a1, int a2)
{
  uint64_t v2;
  CFDataRef v3;
  CFDataRef v4;
  uint64_t v5;
  __int128 v7;
  __int128 v8;
  unint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v2 = a1 + 80;
    if (!*(_QWORD *)(a1 + 80))
    {
      v7 = xmmword_1DD0098E0;
      v8 = unk_1DD0098F0;
      v9 = 0xBF800000BF800000;
      v3 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)&v7, 40);
      v4 = v3;
      v5 = 5;
LABEL_6:
      *(_QWORD *)v2 = C3DMeshSourceCreate(v3, 3, v5, 2, 1);
      CFRelease(v4);
    }
  }
  else
  {
    v2 = a1 + 64;
    if (!*(_QWORD *)(a1 + 64))
    {
      v7 = xmmword_1DD009908;
      v8 = unk_1DD009918;
      v3 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)&v7, 32);
      v4 = v3;
      v5 = 4;
      goto LABEL_6;
    }
  }
  return *(_QWORD *)v2;
}

uint64_t C3DParticleManagerGetSharedPyramidMeshElement(uint64_t a1)
{
  uint64_t v1;
  CFDataRef v3;
  UInt8 bytes[8];
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 88);
  if (!v1)
  {
    v6 = 17039364;
    *(_QWORD *)bytes = 0x300030200020100;
    v3 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], bytes, 12);
    v1 = C3DMeshElementCreate();
    C3DMeshElementInit(v1, 0, 4, v3, 1);
    CFRelease(v3);
    *(_QWORD *)(a1 + 88) = v1;
  }
  return v1;
}

uint64_t C3DParticleManagerGetSharedPyramidStereoMeshElement(uint64_t a1)
{
  uint64_t v1;
  CFDataRef v3;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 104);
  if (!v1)
  {
    v5 = xmmword_1DD009934;
    v6 = 0x609050908050807;
    v3 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)&v5, 24);
    v1 = C3DMeshElementCreate();
    C3DMeshElementInit(v1, 0, 4, v3, 1);
    CFRelease(v3);
    *(_QWORD *)(a1 + 104) = v1;
  }
  return v1;
}

uint64_t C3DParticleManagerGetSharedQuadsStereoMeshElement(uint64_t a1)
{
  uint64_t v1;
  CFDataRef v3;
  UInt8 bytes[8];
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
  {
    v6 = 67438340;
    *(_QWORD *)bytes = 0x706000103000302;
    v3 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], bytes, 12);
    v1 = C3DMeshElementCreate();
    C3DMeshElementInit(v1, 0, 3, v3, 1);
    CFRelease(v3);
    *(_QWORD *)(a1 + 48) = v1;
  }
  return v1;
}

uint64_t C3DParticleManagerGetSharedQuadStereoMeshSource(uint64_t a1, int a2)
{
  uint64_t v2;
  CFDataRef v3;
  CFDataRef v4;
  uint64_t v5;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v2 = a1 + 96;
    if (!*(_QWORD *)(a1 + 96))
    {
      v9 = xmmword_1DD009978;
      v10 = unk_1DD009988;
      v11 = xmmword_1DD009998;
      v7 = xmmword_1DD009958;
      v8 = unk_1DD009968;
      v3 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)&v7, 80);
      v4 = v3;
      v5 = 10;
LABEL_6:
      *(_QWORD *)v2 = C3DMeshSourceCreate(v3, 3, v5, 2, 1);
      CFRelease(v4);
    }
  }
  else
  {
    v2 = a1 + 72;
    if (!*(_QWORD *)(a1 + 72))
    {
      v7 = xmmword_1DD0099A8;
      v8 = unk_1DD0099B8;
      v9 = xmmword_1DD0099C8;
      v10 = unk_1DD0099D8;
      v3 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)&v7, 64);
      v4 = v3;
      v5 = 8;
      goto LABEL_6;
    }
  }
  return *(_QWORD *)v2;
}

_QWORD *C3DParticleManagerComputeTechniqueForSystem(uint64_t a1, __n128 *a2, char a3, uint64_t a4, int a5, int a6)
{
  uint64_t RenderContext;
  int RenderingMode;
  __CFString *v13;
  _QWORD *v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int BlackPassEnabled;
  BOOL v24;
  BOOL v26;
  int SoftParticlesEnabled;
  unsigned int v28;
  char v29;
  uint32x4_t v30;
  int IsLocal;
  const __CFAllocator *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  CFStringRef v47;
  id v48;
  const __CFString *v49;
  const __CFString *v50;
  const void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  const CFArrayCallBacks *v56;
  __CFArray *Mutable;
  __CFArray *v58;
  const __CFString *v59;
  int v60;
  NSObject *v61;
  CFStringRef v62;
  CFStringRef v63;
  CFStringRef v64;
  size_t v65;
  const void *v66;
  const void *v67;
  const void *v68;
  uint64_t v69;
  const void *v70;
  const void *v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  const void *v76;
  const void *v77;
  uint64_t v79;
  uint64_t v80;
  void *value;
  void *v82;
  int v83;
  _OWORD v84[2];
  _OWORD v85[2];
  char v86;
  char HasCubeMapTexture;
  unsigned int ImageSequenceAnimationMode;
  unsigned int EyeCount;
  char v90;
  BOOL v91;
  BOOL v92;
  BOOL v93;
  unsigned int OrientationMode;
  unsigned int BlendMode;
  BOOL HasTextureAnimation;
  BOOL v97;
  BOOL v98;
  char LightingEnabled;
  _BYTE v100[9];

  v100[0] = a3;
  RenderContext = C3DEngineContextGetRenderContext(a4);
  RenderingMode = C3DParticleSystemGetRenderingMode((uint64_t)a2);
  v13 = CFSTR("C3D-ParticleSystem_Trail");
  switch(RenderingMode)
  {
    case 0:
      v13 = CFSTR("C3D-ParticleSystem");
      goto LABEL_8;
    case 1:
      v13 = CFSTR("C3D-ParticleSystem_PointSprite");
      goto LABEL_8;
    case 2:
    case 3:
      goto LABEL_8;
    case 4:
      v15 = scn_default_log();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        C3DParticleManagerComputeTechniqueForSystem_cold_2(v15, v16, v17, v18, v19, v20, v21, v22);
      v13 = &stru_1EA5A6480;
LABEL_8:
      BlackPassEnabled = C3DParticleSystemGetBlackPassEnabled((uint64_t)a2);
      LightingEnabled = C3DParticleSystemGetLightingEnabled((uint64_t)a2);
      v98 = 0;
      if (C3DParticleSystemGetParticleColorController((uint64_t)a2))
        v24 = 1;
      else
        v24 = C3DParticleSystemGetParticleOpacityController((uint64_t)a2) != 0;
      v98 = v24;
      v97 = 0;
      v26 = C3DParticleSystemGetStretchFactor((uint64_t)a2) != 0.0 && RenderingMode == 0;
      v97 = v26;
      HasTextureAnimation = C3DParticleSystemHasTextureAnimation((uint64_t)a2);
      SoftParticlesEnabled = C3DParticleSystemGetSoftParticlesEnabled((uint64_t)a2);
      BlendMode = C3DParticleSystemGetBlendMode((uint64_t)a2);
      OrientationMode = C3DParticleSystemGetOrientationMode((uint64_t)a2);
      v93 = a5 == 2;
      v28 = a5 - 1;
      v92 = a5 == 1;
      v91 = a6 == 2;
      v90 = 0;
      if ((-[SCNMTLRenderContext enableARMode](RenderContext) & 1) != 0)
        v29 = 1;
      else
        v29 = -[SCNMTLRenderContext shouldDelegateARCompositing](RenderContext);
      v90 = v29;
      EyeCount = C3DEngineContextGetEyeCount(a4);
      v30 = (uint32x4_t)vmvnq_s8((int8x16_t)vceqzq_f32((float32x4_t)C3DParticleSystemGetOrientationDirection(a2)));
      v30.i32[3] = v30.i32[2];
      if ((vmaxvq_u32(v30) & 0x80000000) != 0)
        OrientationMode = 4;
      ImageSequenceAnimationMode = C3DParticleSystemGetImageSequenceAnimationMode((uint64_t)a2);
      HasCubeMapTexture = C3DParticleSystemHasCubeMapTexture((uint64_t)a2);
      IsLocal = C3DParticleSystemGetIsLocal((uint64_t)a2);
      v86 = IsLocal;
      v32 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      if (SoftParticlesEnabled)
        v33 = 68;
      else
        v33 = 45;
      if (IsLocal)
        v34 = 76;
      else
        v34 = 71;
      if (HasTextureAnimation)
        v35 = ImageSequenceAnimationMode;
      else
        v35 = 0;
      v80 = v33;
      v79 = v35;
      v36 = 65;
      if (!HasTextureAnimation)
        v36 = 45;
      v37 = 66;
      if (!BlackPassEnabled)
        v37 = 45;
      v38 = 70;
      if (!v100[0])
        v38 = 45;
      v39 = 75;
      if (!HasCubeMapTexture)
        v39 = 45;
      v40 = 83;
      if (!v97)
        v40 = 45;
      if (LightingEnabled)
        v41 = 76;
      else
        v41 = 45;
      v42 = 67;
      if (!v98)
        v42 = 45;
      v43 = 82;
      if (!v90)
        v43 = 45;
      v44 = 77;
      if (!v91)
        v44 = 45;
      v45 = 89;
      if (!v92)
        v45 = 95;
      v46 = 86;
      if (!v93)
        v46 = 45;
      v47 = CFStringCreateWithFormat(v32, 0, CFSTR("%@%1d%1d%c%c%c%c%c%c%c%c%c%c%c%1dO%1d%c%c"), v13, BlendMode, EyeCount, v46, v45, v44, v43, v42, v41, v40, v39, v38, v37, v36, v79, OrientationMode,
              v80,
              v34);
      v14 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 112), v47);
      if (v14)
        goto LABEL_148;
      if (RenderContext)
      {
        v48 = objc_alloc_init(MEMORY[0x1E0CC6AA0]);
        objc_msgSend(v48, "setConstantValue:type:withName:", &LightingEnabled, 53, CFSTR("enableLighting"));
        objc_msgSend(v48, "setConstantValue:type:withName:", &v98, 53, CFSTR("enableColorRamp"));
        objc_msgSend(v48, "setConstantValue:type:withName:", &HasCubeMapTexture, 53, CFSTR("enableCubeMap"));
        objc_msgSend(v48, "setConstantValue:type:withName:", &v97, 53, CFSTR("enableStretch"));
        objc_msgSend(v48, "setConstantValue:type:withName:", &HasTextureAnimation, 53, CFSTR("enableAnimation"));
        objc_msgSend(v48, "setConstantValue:type:withName:", v100, 53, CFSTR("enableFog"));
        objc_msgSend(v48, "setConstantValue:type:withName:", &v93, 53, CFSTR("enableMultipleViewport"));
        objc_msgSend(v48, "setConstantValue:type:withName:", &v92, 53, CFSTR("enableLayeredRendering"));
        objc_msgSend(v48, "setConstantValue:type:withName:", &v91, 53, CFSTR("useVertexAmplification"));
        objc_msgSend(v48, "setConstantValue:type:withName:", &EyeCount, 33, CFSTR("eyeCount"));
        objc_msgSend(v48, "setConstantValue:type:withName:", &v90, 53, CFSTR("ARMode"));
        objc_msgSend(v48, "setConstantValue:type:withName:", &v86, 53, CFSTR("isLocal"));
        objc_msgSend(v48, "setConstantValue:type:withName:", &OrientationMode, 33, CFSTR("orientation"));
        objc_msgSend(v48, "setConstantValue:type:withName:", &ImageSequenceAnimationMode, 33, CFSTR("animationMode"));
        objc_msgSend(v48, "setConstantValue:type:withName:", &BlendMode, 33, CFSTR("blendMode"));
        if (v28 >= 2)
          v49 = CFSTR("uberparticle_vert");
        else
          v49 = CFSTR("uberparticle_stereo_vert");
        if (HasCubeMapTexture)
          v50 = CFSTR("uberparticleCube_frag");
        else
          v50 = CFSTR("uberparticle_frag");
        v51 = (const void *)C3DFXMetalProgramCreateFromLibraryWithConstants(v49, v50, 0, v48, 0, 0);

        goto LABEL_86;
      }
      v83 = SoftParticlesEnabled;
      v52 = (void *)-[__CFString stringByAppendingString:](v13, "stringByAppendingString:", CFSTR(".vsh"));
      v53 = (void *)-[__CFString stringByAppendingString:](v13, "stringByAppendingString:", CFSTR(".fsh"));
      v54 = (void *)C3DGetTextResourceWithNameAllowingHotReload(v52);
      v55 = (void *)C3DGetTextResourceWithNameAllowingHotReload(v53);
      if (v54 && v55)
      {
        v82 = v55;
        v56 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
        Mutable = CFArrayCreateMutable(v32, 0, MEMORY[0x1E0C9B378]);
        v58 = CFArrayCreateMutable(v32, 0, v56);
        CFArrayAppendValue(Mutable, CFSTR("precision highp float;\n"));
        CFArrayAppendValue(v58, CFSTR("precision mediump float;\n"));
        if (LightingEnabled)
          CFArrayAppendValue(Mutable, CFSTR("#define ENABLE_LIGHTING"));
        if (v98)
          CFArrayAppendValue(Mutable, CFSTR("#define ENABLE_COLOR_RAMP"));
        if (HasCubeMapTexture)
        {
          CFArrayAppendValue(Mutable, CFSTR("#define ENABLE_CUBE_MAP"));
          CFArrayAppendValue(v58, CFSTR("#define ENABLE_CUBE_MAP"));
        }
        value = v54;
        if (v97)
        {
          v59 = CFSTR("#define ENABLE_STRETCH");
          v60 = v83;
        }
        else
        {
          v60 = v83;
          if (OrientationMode - 1 > 2)
            v59 = CFSTR("#define ENABLE_BILLBOARD_SCREEN");
          else
            v59 = off_1EA59FF18[OrientationMode - 1];
        }
        CFArrayAppendValue(Mutable, v59);
        if (v100[0])
        {
          CFArrayAppendValue(Mutable, CFSTR("#define ENABLE_FOG"));
          v60 = v83;
          CFArrayAppendValue(v58, CFSTR("#define ENABLE_FOG"));
        }
        if (HasTextureAnimation)
        {
          v62 = CFStringCreateWithFormat(v32, 0, CFSTR("#define ENABLE_ANIMATION %d"), ImageSequenceAnimationMode);
          CFArrayAppendValue(Mutable, v62);
          CFArrayAppendValue(v58, v62);
          v60 = v83;
          CFRelease(v62);
        }
        if (v60)
        {
          CFArrayAppendValue(Mutable, CFSTR("#define ENABLE_SOFT"));
          CFArrayAppendValue(v58, CFSTR("#define ENABLE_SOFT"));
        }
        CFArrayAppendValue(Mutable, value);
        v63 = CFStringCreateByCombiningStrings(v32, Mutable, CFSTR("\n"));
        CFRelease(Mutable);
        CFArrayAppendValue(v58, v82);
        v64 = CFStringCreateByCombiningStrings(v32, v58, CFSTR("\n"));
        CFRelease(v58);
        v51 = (const void *)C3DFXGLSLProgramCreateWithSources(v63, v64);
        CFRelease(v63);
        CFRelease(v64);
        SoftParticlesEnabled = v83;
LABEL_86:
        if (BlackPassEnabled)
          v65 = 2;
        else
          v65 = 1;
        v14 = (_QWORD *)C3DFXTechniqueCreateWithCapacity(v65);
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 112), v47, v14);
        CFRelease(v14);
        C3DFXProgramSetOpaque((uint64_t)v51, 0);
        C3DFXProgramSetClientProgram((uint64_t)v51, 0);
        memset(v85, 0, 28);
        C3DRasterizerStatesDescGetDefault(v85);
        BYTE9(v85[0]) = C3DParticleSystemGetWritesToDepthBuffer((uint64_t)a2);
        LODWORD(v85[0]) = 2;
        v84[0] = v85[0];
        *(_OWORD *)((char *)v84 + 12) = *(_OWORD *)((char *)v85 + 12);
        v66 = (const void *)C3DRasterizerStatesCreate((uint64_t)v84);
        v67 = 0;
        if (BlackPassEnabled)
        {
          v67 = (const void *)C3DFXPassCreate();
          C3DFXPassSetClearBehavior((uint64_t)v67, 0, 0, 0);
          C3DFXPassSetName((uint64_t)v67, CFSTR("BlackPass"));
          C3DFXPassSetInstallViewport((uint64_t)v67, 0);
          C3DFXPassSetDrawInstruction((uint64_t)v67, 1);
          C3DFXPassSetProgram((uint64_t)v67, v51);
          v68 = (const void *)C3DBlendStatesDefaultOverBlack();
          C3DFXPassSetBlendStates((uint64_t)v67, v68);
          C3DFXPassSetRasterizerStates((uint64_t)v67, v66);
          C3DFXTechniqueAppendPass(v14, v67);
          CFRelease(v67);
        }
        switch(BlendMode)
        {
          case 0u:
            v69 = C3DBlendStatesDefaultAdditive();
            goto LABEL_99;
          case 1u:
            v69 = C3DBlendStatesDefaultSubtract();
            goto LABEL_99;
          case 2u:
            v69 = C3DBlendStatesDefaultMultiplicative();
            goto LABEL_99;
          case 3u:
            v69 = C3DBlendStatesDefaultScreen();
            goto LABEL_99;
          case 4u:
            v69 = C3DBlendStatesDefaultOver();
            goto LABEL_99;
          case 5u:
            v69 = C3DBlendStatesDefaultReplace();
LABEL_99:
            v70 = (const void *)v69;
            break;
          default:
            v70 = 0;
            break;
        }
        v71 = (const void *)C3DFXPassCreate();
        C3DFXPassSetClearBehavior((uint64_t)v71, 0, 0, 0);
        C3DFXPassSetName((uint64_t)v71, v47);
        C3DFXPassSetInstallViewport((uint64_t)v71, 0);
        C3DFXPassSetDrawInstruction((uint64_t)v71, 1);
        C3DFXPassSetRasterizerStates((uint64_t)v71, v66);
        C3DFXPassSetBlendStates((uint64_t)v71, v70);
        C3DFXPassSetProgram((uint64_t)v71, v51);
        C3DRasterizerStatesRelease(v66);
        CFRelease(v51);
        C3DFXTechniqueAppendPass(v14, v71);
        CFRelease(v71);
        if (RenderContext)
        {
          if (!HasCubeMapTexture)
            goto LABEL_110;
        }
        else
        {
          C3DFXTechniqueDeclareSymbol((uint64_t)v14, CFSTR("viewTransform"), 11, 1u);
          C3DFXPassBindInputWithSymbol((uint64_t)v71, CFSTR("viewTransform"), CFSTR("viewTransform"));
          if (v67)
            C3DFXPassBindInputWithSymbol((uint64_t)v67, CFSTR("viewTransform"), CFSTR("viewTransform"));
          if (!HasCubeMapTexture)
          {
LABEL_110:
            if (LightingEnabled)
            {
              C3DFXTechniqueDeclareSymbol((uint64_t)v14, CFSTR("u_lightPosition0"), 9, 1u);
              C3DFXPassBindInputWithSymbol((uint64_t)v71, CFSTR("u_lightPosition0"), CFSTR("u_lightPosition0"));
              if (v67)
              {
                C3DFXPassBindInputWithSymbol((uint64_t)v67, CFSTR("u_lightPosition0"), CFSTR("u_lightPosition0"));
                C3DFXTechniqueDeclareSymbol((uint64_t)v14, CFSTR("u_lightColor0"), 13, 1u);
                C3DFXPassBindInputWithSymbol((uint64_t)v71, CFSTR("u_lightColor0"), CFSTR("u_lightColor0"));
                v72 = (uint64_t)v67;
              }
              else
              {
                C3DFXTechniqueDeclareSymbol((uint64_t)v14, CFSTR("u_lightColor0"), 13, 1u);
                v72 = (uint64_t)v71;
              }
              C3DFXPassBindInputWithSymbol(v72, CFSTR("u_lightColor0"), CFSTR("u_lightColor0"));
            }
            if (v98)
            {
              C3DFXTechniqueDeclareSymbol((uint64_t)v14, CFSTR("u_colorRamp"), 5, 1u);
              C3DFXPassBindInputWithSymbol((uint64_t)v71, CFSTR("u_colorRamp"), CFSTR("u_colorRamp"));
              if (v67)
                C3DFXPassBindInputWithSymbol((uint64_t)v67, CFSTR("u_colorRamp"), CFSTR("u_colorRamp"));
            }
            if (v97)
            {
              C3DFXTechniqueDeclareSymbol((uint64_t)v14, CFSTR("u_stretchFactor"), 1, 1u);
              C3DFXPassBindInputWithSymbol((uint64_t)v71, CFSTR("u_stretchFactor"), CFSTR("u_stretchFactor"));
              if (v67)
                C3DFXPassBindInputWithSymbol((uint64_t)v67, CFSTR("u_stretchFactor"), CFSTR("u_stretchFactor"));
            }
            if (HasTextureAnimation)
            {
              C3DFXTechniqueDeclareSymbol((uint64_t)v14, CFSTR("u_frameSize"), 10, 1u);
              C3DFXPassBindInputWithSymbol((uint64_t)v71, CFSTR("u_frameSize"), CFSTR("u_frameSize"));
              if (v67)
                C3DFXPassBindInputWithSymbol((uint64_t)v67, CFSTR("u_frameSize"), CFSTR("u_frameSize"));
            }
            if (RenderContext)
              v73 = 0;
            else
              v73 = SoftParticlesEnabled;
            if (v73 == 1)
            {
              C3DFXTechniqueDeclareSymbol((uint64_t)v14, CFSTR("u_softParameters"), 10, 1u);
              C3DFXPassBindInputWithSymbol((uint64_t)v71, CFSTR("u_softParameters"), CFSTR("u_softParameters"));
              if (v67)
              {
                C3DFXPassBindInputWithSymbol((uint64_t)v67, CFSTR("u_softParameters"), CFSTR("u_softParameters"));
                C3DFXPassBindInputWithSemantic((uint64_t)v71, CFSTR("u_invProj"), 16);
                C3DFXPassBindInputWithSemantic((uint64_t)v67, CFSTR("u_invProj"), 16);
                C3DFXPassBindInputWithSemantic((uint64_t)v71, CFSTR("u_depthSampler0"), 28);
                v74 = (uint64_t)v67;
              }
              else
              {
                C3DFXPassBindInputWithSemantic((uint64_t)v71, CFSTR("u_invProj"), 16);
                v74 = (uint64_t)v71;
              }
              C3DFXPassBindInputWithSemantic(v74, CFSTR("u_depthSampler0"), 28);
            }
            if (v100[0])
            {
              C3DFXTechniqueDeclareSymbol((uint64_t)v14, CFSTR("u_fogParameters"), 9, 1u);
              C3DFXPassBindInputWithSymbol((uint64_t)v71, CFSTR("u_fogParameters"), CFSTR("u_fogParameters"));
              if (!v67)
              {
                C3DFXTechniqueDeclareSymbol((uint64_t)v14, CFSTR("u_fogColor"), 13, 1u);
                C3DFXPassBindInputWithSymbol((uint64_t)v71, CFSTR("u_fogColor"), CFSTR("u_fogColor"));
                if (RenderContext)
                {
LABEL_141:
                  C3DFXTechniqueDeclareSymbol((uint64_t)v14, CFSTR("u_textureSampler0"), 5, 1u);
                  C3DFXPassBindInputWithSymbol((uint64_t)v71, CFSTR("u_textureSampler0"), CFSTR("u_textureSampler0"));
                  if (v67)
                    C3DFXPassBindInputWithSymbol((uint64_t)v67, CFSTR("u_textureSampler0"), CFSTR("u_textureSampler0"));
                  v76 = (const void *)C3DFXSamplerCreate();
                  C3DFXTechniqueSetValueForSymbol((uint64_t)v14, CFSTR("u_textureSampler0"), v76);
                  if (HasTextureAnimation)
                    v77 = (const void *)C3DTextureSamplerTrilinearRepeatNoAnisotropy();
                  else
                    v77 = (const void *)C3DTextureSamplerBilinearMipMapClampNoAnisotropy();
                  C3DFXSamplerSetTextureSampler((uint64_t)v76, v77);
                  CFRelease(v76);
                  C3DFXPassSetWillExecuteCallback((uint64_t)v71, (uint64_t)_willExecuteParticleSystemPass);
                  C3DFloorSetReflectionCategoryBitMask((uint64_t)v71, (uint64_t)_executeParticleSystemPass);
                  if (v67)
                  {
                    C3DFXPassSetWillExecuteCallback((uint64_t)v67, (uint64_t)_willExecuteParticleSystemPass);
                    C3DFloorSetReflectionCategoryBitMask((uint64_t)v67, (uint64_t)_executeParticleSystemPass);
                  }
                  goto LABEL_148;
                }
                v75 = (uint64_t)v71;
LABEL_140:
                C3DFXPassBindInputWithSemantic(v75, CFSTR("u_projectionTransform"), 10);
                goto LABEL_141;
              }
              C3DFXPassBindInputWithSymbol((uint64_t)v67, CFSTR("u_fogParameters"), CFSTR("u_fogParameters"));
              C3DFXTechniqueDeclareSymbol((uint64_t)v14, CFSTR("u_fogColor"), 13, 1u);
              C3DFXPassBindInputWithSymbol((uint64_t)v71, CFSTR("u_fogColor"), CFSTR("u_fogColor"));
              C3DFXPassBindInputWithSymbol((uint64_t)v67, CFSTR("u_fogColor"), CFSTR("u_fogColor"));
            }
            if (RenderContext)
              goto LABEL_141;
            C3DFXPassBindInputWithSemantic((uint64_t)v71, CFSTR("u_projectionTransform"), 10);
            if (!v67)
              goto LABEL_141;
            v75 = (uint64_t)v67;
            goto LABEL_140;
          }
          C3DFXTechniqueDeclareSymbol((uint64_t)v14, CFSTR("u_viewToCubeWorld"), 11, 1u);
          C3DFXPassBindInputWithSymbol((uint64_t)v71, CFSTR("u_viewToCubeWorld"), CFSTR("u_viewToCubeWorld"));
          if (v67)
            C3DFXPassBindInputWithSymbol((uint64_t)v67, CFSTR("u_viewToCubeWorld"), CFSTR("u_viewToCubeWorld"));
        }
        C3DFXTechniqueDeclareSymbol((uint64_t)v14, CFSTR("u_fresnelExponent"), 1, 1u);
        C3DFXPassBindInputWithSymbol((uint64_t)v71, CFSTR("u_fresnelExponent"), CFSTR("u_fresnelExponent"));
        if (v67)
          C3DFXPassBindInputWithSymbol((uint64_t)v67, CFSTR("u_fresnelExponent"), CFSTR("u_fresnelExponent"));
        goto LABEL_110;
      }
      v61 = scn_default_log();
      if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
        C3DParticleManagerComputeTechniqueForSystem_cold_1((uint64_t)v13, v61);
      v14 = 0;
LABEL_148:
      CFRelease(v47);
      return v14;
    default:
      return 0;
  }
}

CFTypeRef _willExecuteParticleSystemPass(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  __n128 *Scene;
  uint64_t v5;
  float32x4_t *v6;
  float32x4_t *v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float32x4_t v16;
  float32x4_t v17;
  int IsLocal;
  int v19;
  float32x4_t *WorldMatrix;
  const __CFDictionary *LightingSystem;
  uint64_t v22;
  uint64_t CategoryBitMask;
  uint64_t v24;
  float32x4_t v25;
  double v26;
  double v27;
  double v28;
  double v29;
  __n128 v30;
  float32x4_t *v31;
  float32x4_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  float PointOfViewScale;
  float32x4_t v38;
  const void *FogColor;
  __n128 Viewport;
  float32x4_t v46;
  const UInt8 *ColorRamp;
  int RenderingMode;
  unsigned int ImageSequenceRowCount;
  unsigned int ImageSequenceColumnCount;
  uint64x2_t v51;
  float32x4_t v53;
  float32x4_t v54;
  const void *ParticleTexture;
  uint64_t ValueForSymbol;
  float v58;
  float v59;
  int32x2_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  _QWORD v70[4];
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  void *v81;
  __int128 v82;
  uint64_t v83;
  float32x4_t *v84;
  uint64_t v85;
  __int128 v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  v2 = a1[8];
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 48);
  Scene = (__n128 *)C3DEngineContextGetScene(a1[3]);
  v5 = a1[1];
  v6 = (float32x4_t *)a1[2];
  v7 = (float32x4_t *)a1[4];
  if (!v7)
  {
    v8 = scn_default_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      _willExecuteParticleSystemPass_cold_1(v8, v9, v10, v11, v12, v13, v14, v15);
  }
  v16 = v7[62];
  v87 = v7[61];
  v88 = v16;
  v17 = v7[64];
  v89 = v7[63];
  v90 = v17;
  if (C3DEngineContextGetRenderContext(a1[3]))
  {
    if ((C3DParticleSystemHasCubeMapTexture(v3) & 1) == 0)
      goto LABEL_15;
LABEL_14:
    v61.i32[0] = 0;
    v61.f32[0] = C3DParticleSystemGetFresnelExponent(v3) * 0.5;
    C3DFXTechniqueSetValueForSymbol(v5, CFSTR("u_fresnelExponent"), &v61);
    goto LABEL_15;
  }
  v61 = v87;
  v62 = v88;
  v63 = v89;
  v64 = v90;
  IsLocal = C3DParticleSystemGetIsLocal(v3);
  if (v6)
    v19 = IsLocal;
  else
    v19 = 0;
  if (v19 == 1)
  {
    WorldMatrix = C3DNodeGetWorldMatrix(v6);
    C3DMatrix4x4Mult((uint64_t)WorldMatrix, &v61, &v61);
  }
  C3DFXTechniqueSetValueForSymbol(v5, CFSTR("viewTransform"), &v61);
  if ((C3DParticleSystemHasCubeMapTexture(v3) & 1) != 0)
  {
    v61 = v87;
    v62 = v88;
    v63 = v89;
    v64 = v90;
    C3DSceneComputeViewToCubemapMatrix(Scene, (uint64_t)&v61);
    C3DFXTechniqueSetValueForSymbol(v5, CFSTR("u_viewToCubeWorld"), &v61);
    goto LABEL_14;
  }
LABEL_15:
  if (C3DParticleSystemGetLightingEnabled(v3))
  {
    LightingSystem = (const __CFDictionary *)C3DSceneGetLightingSystem((uint64_t)Scene);
    v78 = 0;
    v79 = &v78;
    v80 = 0x3010000000;
    v81 = &unk_1DD0EA3D6;
    v82 = xmmword_1DD009A00;
    v83 = 0;
    v84 = (float32x4_t *)&v83;
    v85 = 0x3020000000;
    v86 = xmmword_1DD0099F0;
    if (C3DEngineContextIsClusteredShadingEnabled(a1[3]))
    {
      v22 = *(_QWORD *)(v2 + 8);
      if (v22)
        CategoryBitMask = C3DNodeGetCategoryBitMask(v22);
      else
        CategoryBitMask = -1;
      v33 = a1[3];
      v70[0] = MEMORY[0x1E0C809B0];
      v70[1] = 3221225472;
      v70[2] = ___willExecuteParticleSystemPass_block_invoke;
      v70[3] = &unk_1EA59FEF8;
      v71 = v87;
      v72 = v88;
      v73 = v89;
      v74 = v90;
      v75 = &v83;
      v76 = &v78;
      v77 = CategoryBitMask;
      C3DLightingSystemEnumerateGlobalLights(LightingSystem, v33, (uint64_t)v70);
      C3DFXTechniqueSetValueForSymbol(v5, CFSTR("u_lightPosition0"), &v84[2]);
      C3DFXTechniqueSetValueForSymbol(v5, CFSTR("u_lightColor0"), v79 + 4);
    }
    else
    {
      v69 = 0;
      v67 = 0u;
      v68 = 0u;
      v65 = 0u;
      v66 = 0u;
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      C3DLightingSystemGetLightingSetDesc((uint64_t)LightingSystem, v2 + 56, (unint64_t *)&v61);
      v24 = v61.i64[1];
      if (v61.i64[1])
      {
        if (C3DLightGetType(v61.i64[1]) == 1)
        {
          v31 = v84;
          v25 = (float32x4_t)vdupq_n_s32(0x47C35000u);
          v32 = vmulq_f32(*(float32x4_t *)(*((_QWORD *)&v65 + 1) + 32), v25);
        }
        else
        {
          v32 = *(float32x4_t *)(*((_QWORD *)&v65 + 1) + 16);
          v31 = v84;
        }
        v31[2] = v32;
        C3DLightGetColorModulatedByIntensity(v24, v32, v25, v26, v27, v28, v29, v30);
        v34 = v79;
        v79[4] = v35;
        v34[5] = v36;
      }
      C3DFXTechniqueSetValueForSymbol(v5, CFSTR("u_lightPosition0"), &v84[2]);
      C3DFXTechniqueSetValueForSymbol(v5, CFSTR("u_lightColor0"), v79 + 4);
    }
    _Block_object_dispose(&v83, 8);
    _Block_object_dispose(&v78, 8);
  }
  if (C3DParticleSystemHasFogSupport(v3))
  {
    PointOfViewScale = C3DEngineContextGetPointOfViewScale(a1[3]);
    *(__n64 *)v38.f32 = C3DSceneComputeFogParameters((uint64_t)Scene, PointOfViewScale);
    v59 = v38.f32[0];
    v61 = v38;
    FogColor = (const void *)C3DSceneGetFogColor((uint64_t)Scene);
    v61.f32[0] = -v59;
    C3DFXTechniqueSetValueForSymbol(v5, CFSTR("u_fogParameters"), &v61);
    C3DFXTechniqueSetValueForSymbol(v5, CFSTR("u_fogColor"), FogColor);
  }
  if (C3DParticleSystemGetSoftParticlesEnabled(v3))
  {
    Viewport = C3DEngineContextGetViewport((__n128 *)a1[3]);
    __asm { FMOV            V1.2S, #1.0 }
    Viewport.n128_u64[0] = (unint64_t)vdiv_f32(_D1, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)Viewport, (int8x16_t)Viewport, 8uLL));
    v46.i64[0] = 0x400000003F800000;
    v46.i64[1] = Viewport.n128_u64[0];
    v61 = v46;
    C3DFXTechniqueSetValueForSymbol(v5, CFSTR("u_softParameters"), &v61);
  }
  if (C3DParticleSystemGetParticleColorController(v3) || C3DParticleSystemGetParticleOpacityController(v3))
  {
    ColorRamp = C3DParticleSystemGetColorRamp(v3);
    C3DFXTechniqueSetValueForSymbol(v5, CFSTR("u_colorRamp"), ColorRamp);
  }
  RenderingMode = C3DParticleSystemGetRenderingMode(v3);
  if (C3DParticleSystemGetStretchFactor(v3) != 0.0 && !RenderingMode)
  {
    v61.i32[0] = C3DParticleSystemGetStretchFactor(v3);
    C3DFXTechniqueSetValueForSymbol(v5, CFSTR("u_stretchFactor"), &v61);
  }
  if (C3DParticleSystemHasTextureAnimation(v3))
  {
    ImageSequenceRowCount = C3DParticleSystemGetImageSequenceRowCount(v3);
    ImageSequenceColumnCount = C3DParticleSystemGetImageSequenceColumnCount(v3);
    v51.i64[0] = ImageSequenceRowCount;
    v51.i64[1] = ImageSequenceColumnCount;
    __asm { FMOV            V1.2D, #1.0 }
    v60 = (int32x2_t)vcvt_f32_f64(vdivq_f64(_Q1, vcvtq_f64_u64(v51)));
    *(int32x2_t *)v53.f32 = vrev64_s32(v60);
    v53.f32[2] = (float)ImageSequenceColumnCount;
    v58 = (float)(int)(ImageSequenceColumnCount * ImageSequenceRowCount);
    v53.f32[3] = v58;
    v61 = v53;
    if (C3DWasLinkedBeforeMajorOSYear2016())
    {
      *(int32x2_t *)v54.f32 = v60;
      v54.f32[2] = (float)ImageSequenceRowCount;
      v54.f32[3] = v58;
      v61 = v54;
    }
    C3DFXTechniqueSetValueForSymbol(v5, CFSTR("u_frameSize"), &v61);
  }
  ParticleTexture = (const void *)C3DParticleSystemGetParticleTexture(v3);
  if (!ParticleTexture)
    ParticleTexture = C3DImageGetDefault();
  ValueForSymbol = C3DFXTechniqueGetValueForSymbol(v5, CFSTR("u_textureSampler0"), 0);
  return C3DFXSamplerSetImage(ValueForSymbol, ParticleTexture);
}

void sub_1DCDB5BC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 208), 8);
  _Block_object_dispose((const void *)(v1 - 256), 8);
  _Unwind_Resume(a1);
}

double _executeParticleSystemPass(uint64_t a1)
{
  const void *v2;
  CFTypeID v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;

  v2 = *(const void **)(*(_QWORD *)(a1 + 64) + 48);
  v3 = CFGetTypeID(v2);
  if (v3 != C3DParticleSystemInstanceGetTypeID())
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      _executeParticleSystemPass_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(_QWORD *)&result = C3DParticleSystemInstanceDraw((uint64_t)v2, *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 64), *(_QWORD *)a1, *(unsigned __int8 *)(a1 + 80), *(unsigned __int8 *)(a1 + 81)).n128_u64[0];
  return result;
}

void C3DParticleManagerEnumerateInstancesWithLightEmission(uint64_t a1, uint64_t a2)
{
  CFIndex Count;
  CFIndex v5;
  CFIndex i;
  _QWORD *ValueAtIndex;
  _QWORD *v8;
  uint64_t v9;

  Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 24));
  if (Count >= 1)
  {
    v5 = Count;
    for (i = 0; i != v5; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), i);
      if (ValueAtIndex)
      {
        v8 = ValueAtIndex;
        v9 = ValueAtIndex[6];
        if (v9)
        {
          if (C3DParticleSystemGetLightEmissionRadiusFactor(v9) > 0.0)
            (*(void (**)(uint64_t, _QWORD *))(a2 + 16))(a2, v8);
        }
      }
    }
  }
}

uint64_t C3DParticleManagerGetUpdateQueue()
{
  return 0;
}

BOOL C3DParticleManagerNeedRedraw(uint64_t a1)
{
  return CFArrayGetCount(*(CFArrayRef *)(a1 + 24)) != 0;
}

void ___willExecuteParticleSystemPass_block_invoke(float32x4_t *a1, unsigned int a2, float32x4_t **a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  float32x4_t *WorldMatrix;
  uint64_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x2_t v15;
  float32x4_t v16;
  double v17;
  double v18;
  __n128 v19;
  int32x4_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x4_t *v23;
  float32x4_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  _OWORD v34[4];
  _OWORD v35[2];
  float32x4_t v36;
  float32x4_t v37;

  if (a2)
  {
    v7 = a2;
    while (1)
    {
      v8 = *a4;
      if ((a1[7].i64[0] & C3DLightGetCategoryBitMask(*a4)) != 0)
        break;
      ++a3;
      ++a4;
      if (!--v7)
        return;
    }
    v30 = a1[3];
    v32 = a1[2];
    v28 = a1[5];
    v29 = a1[4];
    WorldMatrix = C3DNodeGetWorldMatrix(*a3);
    v10 = 0;
    v11 = WorldMatrix[1];
    v12 = WorldMatrix[2];
    v13 = WorldMatrix[3];
    v34[0] = *WorldMatrix;
    v34[1] = v11;
    v34[2] = v12;
    v34[3] = v13;
    memset(v35, 0, sizeof(v35));
    v36 = 0u;
    v37 = 0u;
    do
    {
      v35[v10] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v32, COERCE_FLOAT(v34[v10])), v30, *(float32x2_t *)&v34[v10], 1), v29, (float32x4_t)v34[v10], 2), v28, (float32x4_t)v34[v10], 3);
      ++v10;
    }
    while (v10 != 4);
    v31 = v37;
    v33 = v36;
    if (C3DLightGetType(v8) == 1)
    {
      v16 = v33;
      v20 = (int32x4_t)vmulq_f32(v16, v16);
      v20.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v20, 2), vadd_f32(*(float32x2_t *)v20.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v20.i8, 1))).u32[0];
      v21 = vrsqrte_f32((float32x2_t)v20.u32[0]);
      v22 = vmul_f32(v21, vrsqrts_f32((float32x2_t)v20.u32[0], vmul_f32(v21, v21)));
      v15 = vmul_f32(v22, v22);
      *(float32x4_t *)(*(_QWORD *)(a1[6].i64[0] + 8) + 32) = vmulq_n_f32(v33, vmul_f32(v22, vrsqrts_f32((float32x2_t)v20.u32[0], v15)).f32[0]);
      v23 = *(float32x4_t **)(a1[6].i64[0] + 8);
      v14 = (float32x4_t)vdupq_n_s32(0x47C35000u);
      v24 = vmulq_f32(v23[2], v14);
    }
    else
    {
      v23 = *(float32x4_t **)(a1[6].i64[0] + 8);
      v24 = v31;
    }
    v23[2] = v24;
    C3DLightGetColorModulatedByIntensity(v8, v24, v14, *(double *)&v15, *(double *)v16.i64, v17, v18, v19);
    v25 = *(_QWORD *)(a1[6].i64[1] + 8);
    *(_QWORD *)(v25 + 32) = v26;
    *(_QWORD *)(v25 + 40) = v27;
  }
}

uint64_t C3DMeshSourceCreatedDeindexedCopy(const __C3DMeshSource *a1, unsigned int a2, unsigned int *a3)
{
  uint64_t Content;
  unint64_t v7;
  unint64_t v8;
  size_t v9;
  uint64_t v10;
  unint64_t v11;
  const UInt8 *v12;
  const UInt8 *v13;
  uint64_t v14;
  UInt8 *v15;
  unsigned int v16;
  CFDataRef v17;
  __int16 Semantic;
  uint64_t v19;

  Content = C3DMeshSourceGetContent((uint64_t)a1);
  v8 = v7;
  v9 = BYTE5(v7);
  v10 = a2;
  v11 = BYTE5(v7) * (unint64_t)a2;
  v12 = (const UInt8 *)malloc_type_malloc(v11, 0xC54B38F2uLL);
  v13 = v12;
  if (a2)
  {
    v14 = a2;
    v15 = (UInt8 *)v12;
    do
    {
      v16 = *a3++;
      memcpy(v15, (const void *)(Content + v9 * (unint64_t)v16), v9);
      v15 += v9;
      --v14;
    }
    while (v14);
  }
  v17 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v13, v11, (CFAllocatorRef)*MEMORY[0x1E0C9AE10]);
  Semantic = C3DMeshSourceGetSemantic((uint64_t)a1);
  v19 = C3DMeshSourceCreateWithData(Semantic, v17, BYTE6(v8), HIBYTE(v8), v10, v9, 0);
  CFRelease(v17);
  return v19;
}

uint64_t SCNMTLComputeCommandEncoder::setBuffers(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *i;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;

  if (a5)
  {
    v5 = 0;
    v6 = result + 8 * a4;
    for (i = (_QWORD *)(v6 + 248); ; ++i)
    {
      v8 = *(_QWORD *)(a2 + 8 * v5);
      v9 = *(_QWORD *)(a3 + 8 * v5);
      v10 = v5 + a4;
      if (*(_QWORD *)(v6 + 8 * v5) != v8)
        break;
      v11 = i;
      if (*(_QWORD *)(v6 + 8 * v5 + 248) != v9)
        goto LABEL_6;
LABEL_7:
      if (a5 == ++v5)
        return result;
    }
    *(_QWORD *)(v6 + 8 * v5) = v8;
    v11 = (_QWORD *)(result + 8 * v10 + 248);
LABEL_6:
    *v11 = v9;
    *(_QWORD *)(result + 8 * (v10 >> 6) + 1704) |= 1 << (a4 + v5);
    goto LABEL_7;
  }
  return result;
}

uint64_t C3DFXTechniqueCreateJittering()
{
  const void *v0;
  uint64_t v1;
  uint64_t PassNamed;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = (const void *)C3DDictionaryNamed(CFSTR("C3DFXJitteringPass.plist"));
  v1 = C3DFXTechniqueCreateWithDescription(v0, 0);
  PassNamed = C3DFXTechniqueGetPassNamed(v1, CFSTR("SceneKit_JitterCopyFirstFrame"));
  C3DFXPassSetInitializeCallback(PassNamed, (uint64_t)_initializeCopy);
  v3 = C3DFXTechniqueGetPassNamed(v1, CFSTR("SceneKit_JitterToEven"));
  C3DFXPassSetWillExecuteCallback(v3, (uint64_t)_willExecuteJittering);
  C3DFXPassSetInitializeCallback(v3, (uint64_t)_initialize);
  v4 = C3DFXTechniqueGetPassNamed(v1, CFSTR("SceneKit_JitterToOdd"));
  C3DFXPassSetWillExecuteCallback(v4, (uint64_t)_willExecuteJittering);
  C3DFXPassSetInitializeCallback(v4, (uint64_t)_initialize);
  v5 = C3DFXTechniqueGetPassNamed(v1, CFSTR("SceneKit_JitterResolve"));
  C3DFXPassSetWillExecuteCallback(v5, (uint64_t)_willExecuteJitteringResolve);
  C3DFXPassSetInitializeCallback(v5, (uint64_t)_initializeResolve);
  return v1;
}

void _initializeCopy(uint64_t *a1, int a2)
{
  const void *BuiltInProgramWithName;
  const void *v4;

  if (a2)
    BuiltInProgramWithName = (const void *)C3DFXGLSLProgramCreateBuiltInProgramWithName(CFSTR("C3D-Copy"));
  else
    BuiltInProgramWithName = (const void *)C3DFXMetalProgramCreateFromDefaultLibrary(CFSTR("Copy_vert"), CFSTR("Copy_frag"));
  v4 = BuiltInProgramWithName;
  C3DFXPassSetProgram(*a1, BuiltInProgramWithName);
  C3DFXProgramSetClientProgram((uint64_t)v4, *(unsigned __int8 *)(*a1 + 80));
  if (v4)
    CFRelease(v4);
}

float _willExecuteJittering(uint64_t a1)
{
  float result;
  float JitteringStep;

  JitteringStep = (float)C3DEngineContextGetJitteringStep(*(_QWORD *)(a1 + 24));
  C3DFXTechniqueSetValueForSymbol(*(_QWORD *)(a1 + 8), CFSTR("C3D-jitter-factor"), &JitteringStep);
  return result;
}

void _initialize(uint64_t *a1, int a2)
{
  const void *BuiltInProgramWithName;
  const void *v4;

  if (a2)
    BuiltInProgramWithName = (const void *)C3DFXGLSLProgramCreateBuiltInProgramWithName(CFSTR("C3D-IncrementalAverage"));
  else
    BuiltInProgramWithName = (const void *)C3DFXMetalProgramCreateFromDefaultLibrary(CFSTR("IncrementalAverage_vert"), CFSTR("IncrementalAverage_frag"));
  v4 = BuiltInProgramWithName;
  C3DFXPassSetProgram(*a1, BuiltInProgramWithName);
  C3DFXProgramSetClientProgram((uint64_t)v4, *(unsigned __int8 *)(*a1 + 80));
  if (v4)
    CFRelease(v4);
}

void _initializeResolve(uint64_t *a1, int a2)
{
  const void *BuiltInProgramWithName;
  const void *v4;

  if (a2)
    BuiltInProgramWithName = (const void *)C3DFXGLSLProgramCreateBuiltInProgramWithName(CFSTR("C3D-Copy"));
  else
    BuiltInProgramWithName = (const void *)C3DFXMetalProgramCreateFromDefaultLibrary(CFSTR("Copy_vert"), CFSTR("Copy_frag"));
  v4 = BuiltInProgramWithName;
  C3DFXPassSetProgram(*a1, BuiltInProgramWithName);
  C3DFXProgramSetClientProgram((uint64_t)v4, *(unsigned __int8 *)(*a1 + 80));
  if (v4)
    CFRelease(v4);
}

uint64_t C3DBufferObjectGetTypeID()
{
  if (C3DBufferObjectGetTypeID_onceToken != -1)
    dispatch_once(&C3DBufferObjectGetTypeID_onceToken, &__block_literal_global_37);
  return C3DBufferObjectGetTypeID_typeID;
}

CFStringRef _C3DBufferObjectCFCopyDebugDescription(unsigned int *a1)
{
  const __CFAllocator *v2;
  uint64_t ID;
  uint64_t v4;
  uint64_t v5;
  CFIndex v6;

  v2 = CFGetAllocator(a1);
  ID = C3DVRAMResourceGetID((uint64_t)a1);
  v4 = a1[14];
  v5 = a1[16];
  v6 = CFGetRetainCount(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DBufferObject vbo:%ld addr:%p lockCount:%d target:%d retainCount:%d>"), ID, a1, v4, v5, v6);
}

uint64_t C3DBufferObjectCreate(unsigned int a1, int a2, int a3, uint64_t a4)
{
  uint64_t Instance;

  if (C3DBufferObjectGetTypeID_onceToken != -1)
    dispatch_once(&C3DBufferObjectGetTypeID_onceToken, &__block_literal_global_37);
  Instance = C3DTypeCreateInstance_(C3DBufferObjectGetTypeID_typeID, 0x40uLL);
  *(_DWORD *)(Instance + 68) = a3;
  *(_QWORD *)(Instance + 40) = a4;
  C3DVRAMResourceSetID(Instance, a1);
  *(_DWORD *)(Instance + 64) = a2;
  return Instance;
}

uint64_t C3DBufferObjectGetBufferID(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DBufferObjectGetBufferID_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return C3DVRAMResourceGetID(a1);
}

uint64_t C3DBufferObjectGetTarget(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DBufferObjectGetBufferID_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(unsigned int *)(a1 + 64);
}

uint64_t C3DBufferObjectGetSize(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DBufferObjectGetBufferID_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(unsigned int *)(a1 + 68);
}

uint64_t (*C3DConvertGetConverter(int a1, int a2))(uint64_t result, int a2, uint64_t a3, int a4, unsigned int a5)
{
  uint64_t (*result)(uint64_t, int, uint64_t, int, unsigned int);
  void *v3;
  void *v4;
  BOOL v5;

  if (a1 <= 22)
  {
    switch(a1)
    {
      case 8:
        v3 = C3DConvert_short2n_to_float2;
        if (a2 != 40)
          v3 = 0;
        v4 = C3DConvert_ushort2n_to_float2;
        v5 = a2 == 36;
        break;
      case 9:
        v3 = C3DConvert_unorm10a2_to_float3;
        if (a2 != 24)
          v3 = 0;
        v4 = C3DConvert_snorm10a2_to_float3;
        v5 = a2 == 23;
        break;
      case 10:
        v3 = C3DConvert_char4n_to_float4;
        if (a2 != 28)
          v3 = 0;
        v4 = C3DConvert_uchar4n_to_float4;
        v5 = a2 == 27;
        break;
      default:
        return 0;
    }
LABEL_30:
    if (v5)
      return (uint64_t (*)(uint64_t, int, uint64_t, int, unsigned int))v4;
    else
      return (uint64_t (*)(uint64_t, int, uint64_t, int, unsigned int))v3;
  }
  else
  {
    switch(a1)
    {
      case 23:
        if (a2 != 9)
          return 0;
        return C3DConvert_float3_to_snorm10a2;
      case 24:
        if (a2 != 9)
          return 0;
        return C3DConvert_float3_to_unorm10a2;
      case 25:
      case 26:
        return 0;
      case 27:
        v3 = C3DConvert_float4_to_uchar4n;
        if (a2 != 10)
          v3 = 0;
        v4 = C3DConvert_float3_to_uchar4n;
        goto LABEL_23;
      case 28:
        v3 = C3DConvert_float4_to_char4n;
        if (a2 != 10)
          v3 = 0;
        v4 = C3DConvert_float3_to_char4n;
LABEL_23:
        v5 = a2 == 9;
        goto LABEL_30;
      default:
        if (a1 != 36)
        {
          if (a1 == 40 && a2 == 8)
            return C3DConvert_float2_to_short2n;
          return 0;
        }
        if (a2 != 8)
          return 0;
        result = C3DConvert_float2_to_ushort2n;
        break;
    }
  }
  return result;
}

uint64_t C3DConvert_float3_to_snorm10a2(uint64_t result, int a2, uint64_t a3, int a4, unsigned int a5)
{
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v14;
  float32x4_t v15;
  int8x16_t v16;

  if (a5)
  {
    v5 = 0;
    v6 = 0;
    v7 = a5;
    __asm
    {
      FMOV            V1.4S, #-1.0
      FMOV            V2.4S, #1.0
    }
    do
    {
      v14 = a3 + v5;
      v15.i64[0] = *(_QWORD *)v14;
      v15.i32[2] = *(_DWORD *)(v14 + 8);
      v15.i32[3] = 1.0;
      v16 = vandq_s8((int8x16_t)vcvtq_s32_f32(vmulq_f32(vminnmq_f32(vmaxnmq_f32(v15, _Q1), _Q2), (float32x4_t)xmmword_1DD009A80)), (int8x16_t)xmmword_1DD009A90);
      LODWORD(v14) = v16.i32[0] | (v16.i32[1] << 10);
      *(uint32x2_t *)v16.i8 = vshl_u32((uint32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL), (uint32x2_t)0x1E00000014);
      *(_DWORD *)(result + v6) = v14 | v16.i32[0] | v16.i32[1];
      v6 += a2;
      v5 += a4;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t C3DConvert_float3_to_uchar4n(uint64_t result, int a2, uint64_t a3, int a4, unsigned int a5)
{
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  float32x4_t v8;
  int8x16_t v9;
  uint64_t v10;
  float32x4_t v11;
  float32x4_t v12;
  int8x16_t v13;

  if (a5)
  {
    v5 = 0;
    v6 = 0;
    v7 = a5;
    v8 = (float32x4_t)vdupq_n_s32(0x437F0000u);
    v9.i64[0] = 0xFF000000FFLL;
    v9.i64[1] = 0xFF000000FFLL;
    do
    {
      v10 = a3 + v5;
      v11.i64[0] = *(_QWORD *)v10;
      v11.i64[1] = *(unsigned int *)(v10 + 8);
      v12.i64[0] = 0x3F0000003F000000;
      v12.i64[1] = 0x3F0000003F000000;
      v13 = vandq_s8((int8x16_t)vcvtq_s32_f32(vmlaq_f32(v12, v8, v11)), v9);
      LODWORD(v10) = v13.i32[0] | (v13.i32[1] << 8);
      *(uint32x2_t *)v13.i8 = vshl_u32((uint32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL), (uint32x2_t)0x1800000010);
      *(_DWORD *)(result + v6) = v10 | v13.i32[0] | v13.i32[1];
      v6 += a2;
      v5 += a4;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t C3DConvert_float4_to_uchar4n(uint64_t result, int a2, uint64_t a3, int a4, unsigned int a5)
{
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  float32x4_t v8;
  int8x16_t v9;
  float32x4_t v10;
  int8x16_t v11;
  __int32 v12;

  if (a5)
  {
    v5 = 0;
    v6 = 0;
    v7 = a5;
    v8 = (float32x4_t)vdupq_n_s32(0x437F0000u);
    v9.i64[0] = 0xFF000000FFLL;
    v9.i64[1] = 0xFF000000FFLL;
    do
    {
      v10.i64[0] = 0x3F0000003F000000;
      v10.i64[1] = 0x3F0000003F000000;
      v11 = vandq_s8((int8x16_t)vcvtq_s32_f32(vmlaq_f32(v10, v8, *(float32x4_t *)(a3 + v5))), v9);
      v12 = v11.i32[0] | (v11.i32[1] << 8);
      *(uint32x2_t *)v11.i8 = vshl_u32((uint32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL), (uint32x2_t)0x1800000010);
      *(_DWORD *)(result + v6) = v12 | v11.i32[0] | v11.i32[1];
      v6 += a2;
      v5 += a4;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t C3DConvert_float3_to_char4n(uint64_t result, int a2, uint64_t a3, int a4, unsigned int a5)
{
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  float32x4_t v13;
  int8x16_t v14;
  uint64_t v15;
  float32x4_t v16;
  int8x16_t v17;

  if (a5)
  {
    v5 = 0;
    v6 = 0;
    v7 = a5;
    __asm { FMOV            V0.4S, #-1.0 }
    v13 = (float32x4_t)vdupq_n_s32(0x42FF0000u);
    v14.i64[0] = 0xFF000000FFLL;
    v14.i64[1] = 0xFF000000FFLL;
    do
    {
      v15 = a3 + v5;
      v16.i64[0] = *(_QWORD *)v15;
      v16.i64[1] = *(unsigned int *)(v15 + 8);
      v17 = vandq_s8((int8x16_t)vcvtq_s32_f32(vmlaq_f32((float32x4_t)vandq_s8(_Q0, (int8x16_t)vcgezq_f32(v16)), v13, v16)), v14);
      LODWORD(v15) = v17.i32[0] | (v17.i32[1] << 8);
      *(uint32x2_t *)v17.i8 = vshl_u32((uint32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL), (uint32x2_t)0x1800000010);
      *(_DWORD *)(result + v6) = v15 | v17.i32[0] | v17.i32[1];
      v6 += a2;
      v5 += a4;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t C3DConvert_float4_to_char4n(uint64_t result, int a2, uint64_t a3, int a4, unsigned int a5)
{
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  float32x4_t v13;
  int8x16_t v14;
  int8x16_t v15;
  __int32 v16;

  if (a5)
  {
    v5 = 0;
    v6 = 0;
    v7 = a5;
    __asm { FMOV            V0.4S, #-1.0 }
    v13 = (float32x4_t)vdupq_n_s32(0x42FF0000u);
    v14.i64[0] = 0xFF000000FFLL;
    v14.i64[1] = 0xFF000000FFLL;
    do
    {
      v15 = vandq_s8((int8x16_t)vcvtq_s32_f32(vmlaq_f32((float32x4_t)vandq_s8(_Q0, (int8x16_t)vcgezq_f32(*(float32x4_t *)(a3 + v5))), v13, *(float32x4_t *)(a3 + v5))), v14);
      v16 = v15.i32[0] | (v15.i32[1] << 8);
      *(uint32x2_t *)v15.i8 = vshl_u32((uint32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL), (uint32x2_t)0x1800000010);
      *(_DWORD *)(result + v6) = v16 | v15.i32[0] | v15.i32[1];
      v6 += a2;
      v5 += a4;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t C3DConvert_float3_to_unorm10a2(uint64_t result, int a2, uint64_t a3, int a4, unsigned int a5)
{
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  float32x4_t v9;
  float32x4_t v10;
  int32x4_t v11;

  if (a5)
  {
    v5 = 0;
    v6 = 0;
    v7 = a5;
    do
    {
      v8 = a3 + v5;
      v9.i64[0] = *(_QWORD *)v8;
      v9.i32[2] = *(_DWORD *)(v8 + 8);
      v9.i32[3] = 1.0;
      v10.i64[0] = 0x3F0000003F000000;
      v10.i64[1] = 0x3F0000003F000000;
      v11 = vcvtq_s32_f32(vmlaq_f32(v10, (float32x4_t)xmmword_1DD009AA0, v9));
      v10.i32[0] = vmovn_s32(v11).u32[0];
      *(uint32x2_t *)v11.i8 = vshl_u32((uint32x2_t)vand_s8((int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL), (int8x8_t)0xFFFF0000FFFFLL), (uint32x2_t)0x1E00000014);
      *(_DWORD *)(result + v6) = v10.u16[0] | (v10.u16[1] << 10) | v11.i32[0] | v11.i32[1];
      v6 += a2;
      v5 += a4;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t C3DConvert_float2_to_ushort2n(uint64_t result, int a2, uint64_t a3, int a4, unsigned int a5)
{
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  float32x2_t v8;
  _WORD *v9;
  int32x2_t v10;

  if (a5)
  {
    v5 = 0;
    v6 = 0;
    v7 = a5;
    v8 = (float32x2_t)vdup_n_s32(0x46FFFE00u);
    do
    {
      v9 = (_WORD *)(result + v6);
      v10 = vcvt_s32_f32(vmul_f32(*(float32x2_t *)(a3 + v5), v8));
      *v9 = v10.i16[0];
      v9[1] = v10.i16[2];
      v6 += a2;
      v5 += a4;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t C3DConvert_float2_to_short2n(uint64_t result, int a2, uint64_t a3, int a4, unsigned int a5)
{
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  float32x2_t v8;
  _WORD *v9;
  int32x2_t v10;

  if (a5)
  {
    v5 = 0;
    v6 = 0;
    v7 = a5;
    v8 = (float32x2_t)vdup_n_s32(0x46FFFE00u);
    do
    {
      v9 = (_WORD *)(result + v6);
      v10 = vcvt_s32_f32(vmul_f32(*(float32x2_t *)(a3 + v5), v8));
      *v9 = v10.i16[0];
      v9[1] = v10.i16[2];
      v6 += a2;
      v5 += a4;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t C3DConvert_ushort2n_to_float2(uint64_t result, int a2, uint64_t a3, int a4, unsigned int a5)
{
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int32x2_t v8;
  float32x2_t v9;
  float32x2_t v10;
  __int16 *v11;
  int32x2_t v12;

  if (a5)
  {
    v5 = 0;
    v6 = 0;
    v7 = a5;
    v8 = vdup_n_s32(0x4B400000u);
    v9 = (float32x2_t)vdup_n_s32(0xCB400000);
    v10 = (float32x2_t)vdup_n_s32(0x38000100u);
    do
    {
      v11 = (__int16 *)(a3 + v5);
      v12.i32[0] = *v11;
      v12.i32[1] = v11[1];
      *(float32x2_t *)(result + v6) = vmul_f32(vadd_f32((float32x2_t)vadd_s32(v12, v8), v9), v10);
      v6 += a2;
      v5 += a4;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t C3DConvert_short2n_to_float2(uint64_t result, int a2, uint64_t a3, int a4, unsigned int a5)
{
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int32x2_t v8;
  float32x2_t v9;
  float32x2_t v10;
  __int16 *v11;
  int32x2_t v12;

  if (a5)
  {
    v5 = 0;
    v6 = 0;
    v7 = a5;
    v8 = vdup_n_s32(0x4B400000u);
    v9 = (float32x2_t)vdup_n_s32(0xCB400000);
    v10 = (float32x2_t)vdup_n_s32(0x38000100u);
    do
    {
      v11 = (__int16 *)(a3 + v5);
      v12.i32[0] = *v11;
      v12.i32[1] = v11[1];
      *(float32x2_t *)(result + v6) = vmul_f32(vadd_f32((float32x2_t)vadd_s32(v12, v8), v9), v10);
      v6 += a2;
      v5 += a4;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t C3DConvert_snorm10a2_to_float3(uint64_t result, int a2, uint64_t a3, int a4, unsigned int a5)
{
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  float32x4_t v8;
  const float *v9;
  uint32x4_t v10;
  float32x4_t v11;
  uint64_t v12;

  if (a5)
  {
    v5 = 0;
    v6 = 0;
    v7 = a5;
    v8 = (float32x4_t)vdupq_n_s32(0x3B004020u);
    do
    {
      v9 = (const float *)(a3 + v5);
      v10 = (uint32x4_t)vld1q_dup_f32(v9);
      v11 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v10, (uint32x4_t)xmmword_1DD009AB0), (int8x16_t)xmmword_1DD009A90)), v8);
      v12 = result + v6;
      *(_QWORD *)v12 = v11.i64[0];
      *(_DWORD *)(v12 + 8) = v11.i32[2];
      v6 += a2;
      v5 += a4;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t C3DConvert_unorm10a2_to_float3(uint64_t result, int a2, uint64_t a3, int a4, unsigned int a5)
{
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  float32x4_t v8;
  const float *v9;
  uint32x4_t v10;
  float32x4_t v11;
  uint64_t v12;

  if (a5)
  {
    v5 = 0;
    v6 = 0;
    v7 = a5;
    v8 = (float32x4_t)vdupq_n_s32(0x3A802008u);
    do
    {
      v9 = (const float *)(a3 + v5);
      v10 = (uint32x4_t)vld1q_dup_f32(v9);
      v11 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v10, (uint32x4_t)xmmword_1DD009AB0), (int8x16_t)xmmword_1DD009A90)), v8);
      v12 = result + v6;
      *(_QWORD *)v12 = v11.i64[0];
      *(_DWORD *)(v12 + 8) = v11.i32[2];
      v6 += a2;
      v5 += a4;
      --v7;
    }
    while (v7);
  }
  return result;
}

void C3DConvert_uchar4n_to_float4()
{
  NSObject *v0;

  v0 = scn_default_log();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
    C3DConvert_uchar4n_to_float4_cold_1();
}

void C3DConvert_char4n_to_float4()
{
  NSObject *v0;

  v0 = scn_default_log();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
    C3DConvert_uchar4n_to_float4_cold_1();
}

uint64_t C3DConvertIsConvertible(unsigned int a1, unsigned int a2)
{
  unsigned int IsFloatingValue;

  if (C3DBaseTypeIsFloatingValue(a1))
    IsFloatingValue = C3DBaseTypeIsFloatingValue(a2);
  else
    IsFloatingValue = 0;
  if (C3DConvertGetConverter(a1, a2))
    return 1;
  else
    return IsFloatingValue;
}

void C3DConvertBatch(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  unsigned __int16 v4;
  unsigned __int16 v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  uint64_t (*Converter)(uint64_t, int, uint64_t, int, unsigned int);
  float32x4_t v22;
  float v23;
  float v24;
  unsigned int v25;
  unsigned int v26;
  float32x4_t v27;

  v4 = a4;
  v6 = a2;
  v8 = a2 >> 16;
  v9 = HIDWORD(a2);
  v10 = a4 >> 16;
  if (HIDWORD(a2) != HIDWORD(a4))
  {
    v11 = scn_default_log();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
      C3DConvertBatch_cold_1(v11, v12, v13, v14, v15, v16, v17, v18);
  }
  v19 = (__int16)v8;
  v20 = (__int16)v10;
  Converter = C3DConvertGetConverter(v19, (__int16)v10);
  if (Converter)
  {
    Converter(a1, v6, a3, v4, v9);
  }
  else if (C3DBaseTypeIsFloatingValue(v19)
         && C3DBaseTypeIsFloatingValue((__int16)v10)
         && (_DWORD)v9)
  {
    v25 = 0;
    v26 = 0;
    do
    {
      *(double *)v27.i64 = C3DConvertFloatingTypeToFloat4(v20, (float *)(a3 + v25), v22, v23, v24);
      C3DConvertFloatingTypeFromFloat4(v19, a1 + v26, v27);
      v26 += v6;
      v25 += v4;
      --v9;
    }
    while (v9);
  }
}

double C3DConvertFloatingTypeToFloat4(int a1, float *a2, float32x4_t a3, float a4, float a5)
{
  __int16 v5;
  NSObject *v6;
  _BOOL4 v7;
  unsigned int v8;
  int v9;
  int v10;
  int v12;
  unsigned int v13;
  uint32x4_t v14;
  float32x4_t v15;
  uint32x4_t v16;
  uint32x4_t v17;
  int8x16_t v18;
  unsigned int v19;
  int32x4_t v20;
  float v26;
  float32x2_t v27;
  float32x4_t v28;
  int32x2_t v29;
  int16x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  unsigned int v33;
  int v34;
  int v35;
  BOOL v36;
  int v37;
  unsigned int v38;
  int v39;
  int v40;
  unsigned int v41;
  int v42;
  int v43;
  BOOL v44;
  int v45;
  unsigned int v46;
  int v47;
  uint32x2_t v48;
  uint32x2_t v49;

  v5 = a1;
  switch(a1)
  {
    case 1:
    case 7:
      a3.f32[0] = *a2;
      return *(double *)a3.i64;
    case 8:
      a3.i64[0] = *(_QWORD *)a2;
      return *(double *)a3.i64;
    case 9:
      a3.i64[0] = *(_QWORD *)a2;
      return *(double *)a3.i64;
    case 10:
      a3 = *(float32x4_t *)a2;
      return *(double *)a3.i64;
    case 15:
      v8 = *(unsigned __int16 *)a2;
      v9 = (v8 >> 10) & 0x1F;
      if (v9 == 31)
        v10 = 2139095040;
      else
        v10 = (v8 >> 10) & 0x1F;
      if (v9)
        _ZF = v9 == 31;
      else
        _ZF = 1;
      if (_ZF)
        v12 = v10;
      else
        v12 = (v9 << 23) + 939524096;
      v13 = v12 | (v8 << 16) & 0x80000000 | (v8 >> 7) & 7 | (8 * (v8 & 0x3FF)) & 0x1FFF | ((v8 & 0x3FF) << 13);
      goto LABEL_28;
    case 23:
      v14 = (uint32x4_t)vld1q_dup_f32(a2);
      a3 = vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v14, (uint32x4_t)xmmword_1DD009AB0), (int8x16_t)xmmword_1DD009A90));
      v15 = (float32x4_t)xmmword_1DD009AD0;
      goto LABEL_34;
    case 24:
      v16 = (uint32x4_t)vld1q_dup_f32(a2);
      a3 = vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v16, (uint32x4_t)xmmword_1DD009AB0), (int8x16_t)xmmword_1DD009A90));
      v15 = (float32x4_t)xmmword_1DD009AC0;
      goto LABEL_34;
    case 27:
      v17 = (uint32x4_t)vld1q_dup_f32(a2);
      v18.i64[0] = 0xFF000000FFLL;
      v18.i64[1] = 0xFF000000FFLL;
      a3 = vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v17, (uint32x4_t)xmmword_1DD008EA0), v18));
      v19 = 998277249;
      goto LABEL_33;
    case 28:
      *(uint32x2_t *)v20.i8 = vshl_u32((uint32x2_t)vdup_n_s32(*(_DWORD *)a2), (uint32x2_t)0x1000000018);
      v20.i32[2] = *(_DWORD *)a2 << 8;
      v20.i32[3] = *(__int32 *)a2;
      __asm { FMOV            V1.4S, #-1.0 }
      a3 = vmaxnmq_f32(vmulq_f32(vcvtq_f32_s32(vshrq_n_s32(v20, 0x18uLL)), (float32x4_t)vdupq_n_s32(0x3C010204u)), _Q1);
      __asm { FMOV            V1.4S, #1.0 }
      a3.i64[0] = vminnmq_f32(a3, _Q1).u64[0];
      return *(double *)a3.i64;
    case 35:
      a3.i16[0] = *(_WORD *)a2;
      a3.f32[0] = (float)a3.u32[0];
      v26 = 0.000015259;
      goto LABEL_27;
    case 36:
      a3.i16[0] = *(_WORD *)a2;
      v27.f32[0] = (float)a3.u32[0];
      LOWORD(a4) = *((_WORD *)a2 + 1);
      v27.f32[1] = (float)LODWORD(a4);
      *(float32x2_t *)a3.f32 = vmul_f32(v27, (float32x2_t)vdup_n_s32(0x37800080u));
      return *(double *)a3.i64;
    case 37:
      a3.i16[0] = *(_WORD *)a2;
      LOWORD(a4) = *((_WORD *)a2 + 1);
      LOWORD(a5) = *((_WORD *)a2 + 2);
      v28.i32[3] = 0;
      v28.f32[0] = (float)a3.u32[0];
      v28.f32[1] = (float)LODWORD(a4);
      v28.f32[2] = (float)LODWORD(a5);
      a3.i64[0] = vmulq_f32(v28, (float32x4_t)vdupq_n_s32(0x37800080u)).u64[0];
      return *(double *)a3.i64;
    case 38:
      a3 = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)a2));
      v19 = 931135616;
      goto LABEL_33;
    case 39:
      a3.f32[0] = (float)*(__int16 *)a2;
      v26 = 0.000030519;
LABEL_27:
      *(float *)&v13 = a3.f32[0] * v26;
LABEL_28:
      a3.i8[4] = 0;
      a3.i8[5] = 0;
      a3.i8[6] = 0;
      a3.i8[7] = 0;
      a3.i32[0] = v13;
      return *(double *)a3.i64;
    case 40:
      v29.i32[0] = *(__int16 *)a2;
      v29.i32[1] = *((__int16 *)a2 + 1);
      *(float32x2_t *)a3.f32 = vmul_f32(vadd_f32((float32x2_t)vadd_s32(v29, vdup_n_s32(0x4B400000u)), (float32x2_t)vdup_n_s32(0xCB400000)), (float32x2_t)vdup_n_s32(0x38000100u));
      return *(double *)a3.i64;
    case 41:
      v30.i32[0] = *(__int32 *)a2;
      v30.i32[1] = *((unsigned __int16 *)a2 + 2);
      v31 = (float32x4_t)vdupq_n_s32(0xCB400000);
      v32 = (float32x4_t)vaddw_s16(vdupq_n_s32(0x4B400000u), v30);
      goto LABEL_32;
    case 42:
      v31 = (float32x4_t)vdupq_n_s32(0xCB400000);
      v32 = (float32x4_t)vaddw_s16(vdupq_n_s32(0x4B400000u), *(int16x4_t *)a2);
LABEL_32:
      a3 = vaddq_f32(v32, v31);
      v19 = 939524352;
LABEL_33:
      v15 = (float32x4_t)vdupq_n_s32(v19);
LABEL_34:
      a3.i64[0] = vmulq_f32(a3, v15).u64[0];
      break;
    case 43:
      v33 = *(unsigned __int16 *)a2;
      v34 = (v33 >> 10) & 0x1F;
      if (v34 == 31)
        v35 = 2139095040;
      else
        v35 = (v33 >> 10) & 0x1F;
      if (v34)
        v36 = v34 == 31;
      else
        v36 = 1;
      if (v36)
        v37 = v35;
      else
        v37 = (v34 << 23) + 939524096;
      v38 = *((unsigned __int16 *)a2 + 1);
      v39 = (v38 >> 10) & 0x1F;
      if (v39 && v39 != 31)
      {
        v40 = (v39 << 23) + 939524096;
      }
      else if (v39 == 31)
      {
        v40 = 2139095040;
      }
      else
      {
        v40 = (v38 >> 10) & 0x1F;
      }
      v48.i32[0] = v33 & 0x3FF;
      v48.i32[1] = v38 & 0xFFFF03FF;
      *(int8x8_t *)a3.f32 = vorr_s8((int8x8_t)__PAIR64__(v40, v37), vorr_s8(vorr_s8(vand_s8((int8x8_t)vshl_n_s32((int32x2_t)__PAIR64__(v38, v33), 0x10uLL), (int8x8_t)0x8000000080000000), (int8x8_t)vshr_n_u32(v48, 7uLL)), (int8x8_t)vmul_s32((int32x2_t)v48, vdup_n_s32(0x2008u))));
      break;
    case 44:
      v41 = *(unsigned __int16 *)a2;
      v42 = (v41 >> 10) & 0x1F;
      if (v42 == 31)
        v43 = 2139095040;
      else
        v43 = (v41 >> 10) & 0x1F;
      if (v42)
        v44 = v42 == 31;
      else
        v44 = 1;
      if (v44)
        v45 = v43;
      else
        v45 = (v42 << 23) + 939524096;
      v46 = *((unsigned __int16 *)a2 + 1);
      v47 = (v46 >> 10) & 0x1F;
      if (v47 && v47 != 31)
      {
        v47 = (v47 << 23) + 939524096;
      }
      else if (v47 == 31)
      {
        v47 = 2139095040;
      }
      v49.i32[0] = v41 & 0x3FF;
      v49.i32[1] = v46 & 0xFFFF03FF;
      *(int8x8_t *)a3.f32 = vorr_s8((int8x8_t)__PAIR64__(v47, v45), vorr_s8(vorr_s8(vand_s8((int8x8_t)vshl_n_s32((int32x2_t)__PAIR64__(v46, v41), 0x10uLL), (int8x8_t)0x8000000080000000), (int8x8_t)vshr_n_u32(v49, 7uLL)), (int8x8_t)vmul_s32((int32x2_t)v49, vdup_n_s32(0x2008u))));
      break;
    case 45:
      *(double *)a3.i64 = unpack_half4_to_float((int16x4_t *)a2);
      break;
    default:
      v6 = scn_default_log();
      v7 = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
      a3.i16[0] = 0;
      a3.i8[2] = 0;
      a3.i8[3] = 0;
      a3.i8[4] = 0;
      a3.i8[5] = 0;
      a3.i8[6] = 0;
      a3.i8[7] = 0;
      if (v7)
      {
        C3DConvertFloatingTypeToFloat4_cold_1(v5);
        a3.i16[0] = 0;
        a3.i8[2] = 0;
        a3.i8[3] = 0;
        a3.i8[4] = 0;
        a3.i8[5] = 0;
        a3.i8[6] = 0;
        a3.i8[7] = 0;
      }
      break;
  }
  return *(double *)a3.i64;
}

void C3DConvertFloatingTypeFromFloat4(int a1, uint64_t a2, float32x4_t a3)
{
  __int16 v3;
  NSObject *v4;
  unsigned __int32 v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  __int16 v9;
  __int16 v10;
  unsigned __int32 v11;
  float32x4_t v17;
  int8x16_t v19;
  uint32x2_t v20;
  int v21;
  uint32x2_t v22;
  float32x4_t v23;
  int32x4_t v24;
  unsigned __int32 v25;
  uint32x2_t v26;
  float32x4_t v27;
  int8x16_t v28;
  int8x16_t v30;
  int8x16_t v31;
  int32x2_t v32;
  unsigned __int32 v33;
  float32x4_t v34;
  int32x4_t v35;
  float32x4_t v36;
  int32x4_t v37;
  int32x2_t v38;
  int16x4_t v39;
  unsigned __int32 v40;
  unsigned int v41;
  unsigned __int32 v42;
  unsigned int v43;
  unsigned __int32 v44;
  unsigned int v45;
  unsigned __int32 v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  __int16 v50;
  __int16 v51;
  unsigned __int32 v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  __int16 v56;
  __int16 v57;
  unsigned __int32 v58;
  unsigned __int32 v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  __int16 v63;
  __int16 v64;
  unsigned __int32 v65;
  unsigned __int32 v66;
  unsigned int v67;
  unsigned __int32 v68;
  unsigned int v69;
  unsigned __int32 v70;
  unsigned int v71;

  v3 = a1;
  switch(a1)
  {
    case 1:
    case 7:
      *(_DWORD *)a2 = a3.i32[0];
      return;
    case 8:
      *(_QWORD *)a2 = a3.i64[0];
      return;
    case 9:
      *(_QWORD *)a2 = a3.i64[0];
      *(_DWORD *)(a2 + 8) = a3.i32[2];
      return;
    case 10:
      *(float32x4_t *)a2 = a3;
      return;
    case 15:
      v5 = HIWORD(a3.i32[0]) & 0x8000;
      v6 = ((unsigned __int32)a3.i32[0] >> 23);
      v7 = v6 - 112;
      v8 = v6 - 113;
      v9 = v5 | 0x7BFF;
      if (v6 == 255)
        v9 = v5 | ((a3.i32[0] & 0x7FFFFF) != 0) | 0x7C00;
      if (v6 >= 0x71)
        v10 = v9;
      else
        v10 = a3.i16[1] & 0x8000;
      v11 = HIWORD(a3.i32[0]) & 0x8000 | ((unsigned __int32)a3.i32[0] >> 13) & 0x3FF | (v7 << 10);
      if (v8 > 0x1D)
        LOWORD(v11) = v10;
      goto LABEL_28;
    case 23:
      __asm { FMOV            V1.4S, #-1.0; jumptable 00000001DCDB99EC case 23 }
      v17 = vmaxnmq_f32(a3, _Q1);
      __asm { FMOV            V1.4S, #1.0 }
      v19 = vandq_s8((int8x16_t)vcvtq_s32_f32(vmulq_f32(vminnmq_f32(v17, _Q1), (float32x4_t)xmmword_1DD009A80)), (int8x16_t)xmmword_1DD009A90);
      v20 = (uint32x2_t)vextq_s8(v19, v19, 8uLL).u64[0];
      v21 = v19.i32[0] | (v19.i32[1] << 10);
      v22 = (uint32x2_t)0x1E00000014;
      goto LABEL_21;
    case 24:
      v23.i64[0] = 0x3F0000003F000000;
      v23.i64[1] = 0x3F0000003F000000;
      v24 = vcvtq_s32_f32(vmlaq_f32(v23, (float32x4_t)xmmword_1DD009AA0, a3));
      v25 = vmovn_s32(v24).u32[0];
      v21 = (unsigned __int16)v25 | (HIWORD(v25) << 10);
      v26 = vshl_u32((uint32x2_t)vand_s8((int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL), (int8x8_t)0xFFFF0000FFFFLL), (uint32x2_t)0x1E00000014);
      goto LABEL_22;
    case 27:
      v27.i64[0] = 0x3F0000003F000000;
      v27.i64[1] = 0x3F0000003F000000;
      v28 = (int8x16_t)vcvtq_s32_f32(vmlaq_f32(v27, (float32x4_t)vdupq_n_s32(0x437F0000u), a3));
      goto LABEL_20;
    case 28:
      __asm { FMOV            V2.4S, #-1.0 }
      v28 = (int8x16_t)vcvtq_s32_f32(vmlaq_f32((float32x4_t)vandq_s8(_Q2, (int8x16_t)vcgezq_f32(a3)), (float32x4_t)vdupq_n_s32(0x42FF0000u), a3));
LABEL_20:
      v30.i64[0] = 0xFF000000FFLL;
      v30.i64[1] = 0xFF000000FFLL;
      v31 = vandq_s8(v28, v30);
      v20 = (uint32x2_t)vextq_s8(v31, v31, 8uLL).u64[0];
      v21 = v31.i32[0] | (v31.i32[1] << 8);
      v22 = (uint32x2_t)0x1800000010;
LABEL_21:
      v26 = vshl_u32(v20, v22);
LABEL_22:
      *(_DWORD *)a2 = v21 | v26.i32[0] | v26.i32[1];
      return;
    case 35:
      v11 = (int)vmla_n_f32((float32x2_t)0x3F0000003F000000, (float32x2_t)vdup_n_s32(0x477FFF00u), a3.f32[0]).f32[0];
      goto LABEL_28;
    case 36:
      v32 = vcvt_s32_f32(vmla_f32((float32x2_t)0x3F0000003F000000, (float32x2_t)vdup_n_s32(0x477FFF00u), *(float32x2_t *)a3.f32));
      LOWORD(v33) = v32.i16[2];
      *(_WORD *)a2 = v32.i16[0];
      goto LABEL_57;
    case 37:
      v34.i64[0] = 0x3F0000003F000000;
      v34.i64[1] = 0x3F0000003F000000;
      v35 = vcvtq_s32_f32(vmlaq_f32(v34, (float32x4_t)vdupq_n_s32(0x477FFF00u), a3));
      goto LABEL_31;
    case 38:
      v36.i64[0] = 0x3F0000003F000000;
      v36.i64[1] = 0x3F0000003F000000;
      v37 = vcvtq_s32_f32(vmlaq_f32(v36, (float32x4_t)vdupq_n_s32(0x477FFF00u), a3));
      goto LABEL_33;
    case 39:
      v11 = (int)(float)(32767.0 * a3.f32[0]);
LABEL_28:
      *(_WORD *)a2 = v11;
      break;
    case 40:
      v38 = vcvt_s32_f32(vmul_f32(*(float32x2_t *)a3.f32, (float32x2_t)vdup_n_s32(0x46FFFE00u)));
      *(_WORD *)a2 = v38.i16[0];
      *(_WORD *)(a2 + 2) = v38.i16[2];
      break;
    case 41:
      v35 = vcvtq_s32_f32(vmulq_f32(a3, (float32x4_t)vdupq_n_s32(0x46FFFE00u)));
LABEL_31:
      v39 = vmovn_s32(v35);
      *(_DWORD *)a2 = v39.i32[0];
      *(_WORD *)(a2 + 4) = v39.i16[2];
      break;
    case 42:
      v37 = vcvtq_s32_f32(vmulq_f32(a3, (float32x4_t)vdupq_n_s32(0x46FFFE00u)));
LABEL_33:
      *(int16x4_t *)a2 = vmovn_s32(v37);
      break;
    case 43:
      v40 = HIWORD(a3.i32[0]) & 0x8000;
      v41 = ((unsigned __int32)a3.i32[0] >> 23);
      if (v41 - 113 > 0x1D)
      {
        if (v41 >= 0x71)
        {
          if (v41 == 255)
            LOWORD(v40) = a3.i16[1] & 0x8000 | ((a3.i32[0] & 0x7FFFFF) != 0) | 0x7C00;
          else
            LOWORD(v40) = v40 | 0x7BFF;
        }
      }
      else
      {
        v40 = HIWORD(a3.i32[0]) & 0x8000 | ((unsigned __int32)a3.i32[0] >> 13) & 0x3FF | ((v41 - 112) << 10);
      }
      *(_WORD *)a2 = v40;
      v46 = HIWORD(a3.i32[1]) & 0x8000;
      v47 = ((unsigned __int32)a3.i32[1] >> 23);
      v48 = v47 - 112;
      v49 = v47 - 113;
      v50 = v46 | 0x7BFF;
      if (v47 == 255)
        v50 = v46 | ((a3.i32[1] & 0x7FFFFF) != 0) | 0x7C00;
      if (v47 >= 0x71)
        v51 = v50;
      else
        v51 = a3.i16[3] & 0x8000;
      v33 = HIWORD(a3.i32[1]) & 0x8000 | ((unsigned __int32)a3.i32[1] >> 13) & 0x3FF | (v48 << 10);
      if (v49 > 0x1D)
        LOWORD(v33) = v51;
LABEL_57:
      *(_WORD *)(a2 + 2) = v33;
      break;
    case 44:
      v42 = HIWORD(a3.i32[0]) & 0x8000;
      v43 = ((unsigned __int32)a3.i32[0] >> 23);
      if (v43 - 113 > 0x1D)
      {
        if (v43 >= 0x71)
        {
          if (v43 == 255)
            LOWORD(v42) = a3.i16[1] & 0x8000 | ((a3.i32[0] & 0x7FFFFF) != 0) | 0x7C00;
          else
            LOWORD(v42) = v42 | 0x7BFF;
        }
      }
      else
      {
        v42 = HIWORD(a3.i32[0]) & 0x8000 | ((unsigned __int32)a3.i32[0] >> 13) & 0x3FF | ((v43 - 112) << 10);
      }
      *(_WORD *)a2 = v42;
      v52 = HIWORD(a3.i32[1]) & 0x8000;
      v53 = ((unsigned __int32)a3.i32[1] >> 23);
      v54 = v53 - 112;
      v55 = v53 - 113;
      v56 = v52 | 0x7BFF;
      if (v53 == 255)
        v56 = v52 | ((a3.i32[1] & 0x7FFFFF) != 0) | 0x7C00;
      if (v53 >= 0x71)
        v57 = v56;
      else
        v57 = a3.i16[3] & 0x8000;
      v58 = HIWORD(a3.i32[1]) & 0x8000 | ((unsigned __int32)a3.i32[1] >> 13) & 0x3FF | (v54 << 10);
      if (v55 > 0x1D)
        LOWORD(v58) = v57;
      *(_WORD *)(a2 + 2) = v58;
      v59 = HIWORD(a3.i32[2]) & 0x8000;
      v60 = ((unsigned __int32)a3.i32[2] >> 23);
      v61 = v60 - 112;
      v62 = v60 - 113;
      v63 = v59 | 0x7BFF;
      if (v60 == 255)
        v63 = v59 | ((a3.i32[2] & 0x7FFFFF) != 0) | 0x7C00;
      if (v60 >= 0x71)
        v64 = v63;
      else
        v64 = a3.i16[5] & 0x8000;
      v65 = HIWORD(a3.i32[2]) & 0x8000 | ((unsigned __int32)a3.i32[2] >> 13) & 0x3FF | (v61 << 10);
      if (v62 > 0x1D)
        LOWORD(v65) = v64;
      *(_WORD *)(a2 + 4) = v65;
      break;
    case 45:
      v44 = HIWORD(a3.i32[0]) & 0x8000;
      v45 = ((unsigned __int32)a3.i32[0] >> 23);
      if (v45 - 113 > 0x1D)
      {
        if (v45 >= 0x71)
        {
          if (v45 == 255)
            LOWORD(v44) = a3.i16[1] & 0x8000 | ((a3.i32[0] & 0x7FFFFF) != 0) | 0x7C00;
          else
            LOWORD(v44) = v44 | 0x7BFF;
        }
      }
      else
      {
        v44 = HIWORD(a3.i32[0]) & 0x8000 | ((unsigned __int32)a3.i32[0] >> 13) & 0x3FF | ((v45 - 112) << 10);
      }
      *(_WORD *)a2 = v44;
      v66 = HIWORD(a3.i32[1]) & 0x8000;
      v67 = ((unsigned __int32)a3.i32[1] >> 23);
      if (v67 - 113 > 0x1D)
      {
        if (v67 >= 0x71)
        {
          if (v67 == 255)
            LOWORD(v66) = a3.i16[3] & 0x8000 | ((a3.i32[1] & 0x7FFFFF) != 0) | 0x7C00;
          else
            LOWORD(v66) = v66 | 0x7BFF;
        }
      }
      else
      {
        v66 = HIWORD(a3.i32[1]) & 0x8000 | ((unsigned __int32)a3.i32[1] >> 13) & 0x3FF | ((v67 - 112) << 10);
      }
      *(_WORD *)(a2 + 2) = v66;
      v68 = HIWORD(a3.i32[2]) & 0x8000;
      v69 = ((unsigned __int32)a3.i32[2] >> 23);
      if (v69 - 113 > 0x1D)
      {
        if (v69 >= 0x71)
        {
          if (v69 == 255)
            LOWORD(v68) = a3.i16[5] & 0x8000 | ((a3.i32[2] & 0x7FFFFF) != 0) | 0x7C00;
          else
            LOWORD(v68) = v68 | 0x7BFF;
        }
      }
      else
      {
        v68 = HIWORD(a3.i32[2]) & 0x8000 | ((unsigned __int32)a3.i32[2] >> 13) & 0x3FF | ((v69 - 112) << 10);
      }
      *(_WORD *)(a2 + 4) = v68;
      v70 = HIWORD(a3.i32[3]) & 0x8000;
      v71 = ((unsigned __int32)a3.i32[3] >> 23);
      if (v71 - 113 > 0x1D)
      {
        if (v71 >= 0x71)
        {
          if (v71 == 255)
            LOWORD(v70) = a3.i16[7] & 0x8000 | ((a3.i32[3] & 0x7FFFFF) != 0) | 0x7C00;
          else
            LOWORD(v70) = v70 | 0x7BFF;
        }
      }
      else
      {
        v70 = HIWORD(a3.i32[3]) & 0x8000 | ((unsigned __int32)a3.i32[3] >> 13) & 0x3FF | ((v71 - 112) << 10);
      }
      *(_WORD *)(a2 + 6) = v70;
      break;
    default:
      v4 = scn_default_log();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        C3DConvertFloatingTypeToFloat4_cold_1(v3);
      break;
  }
}

double unpack_half4_to_float(int16x4_t *a1)
{
  unsigned int v1;
  int v2;
  int v3;
  BOOL v4;
  int v5;
  unsigned int v6;
  int v7;
  int v8;
  BOOL v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  uint32x4_t v16;
  int8x16_t v17;
  int8x16_t v18;
  double result;

  v1 = a1->u16[0];
  v2 = (v1 >> 10) & 0x1F;
  if (v2 == 31)
    v3 = 2139095040;
  else
    v3 = (v1 >> 10) & 0x1F;
  if (v2)
    v4 = v2 == 31;
  else
    v4 = 1;
  if (v4)
    v5 = v3;
  else
    v5 = (v2 << 23) + 939524096;
  v6 = a1->u16[1];
  v7 = (v6 >> 10) & 0x1F;
  if (v7 == 31)
    v8 = 2139095040;
  else
    v8 = (v6 >> 10) & 0x1F;
  if (v7)
    v9 = v7 == 31;
  else
    v9 = 1;
  if (v9)
    v10 = v8;
  else
    v10 = (v7 << 23) + 939524096;
  v11 = a1->u16[2];
  v12 = (v11 >> 10) & 0x1F;
  if (v12 && v12 != 31)
  {
    v13 = (v12 << 23) + 939524096;
  }
  else if (v12 == 31)
  {
    v13 = 2139095040;
  }
  else
  {
    v13 = (v11 >> 10) & 0x1F;
  }
  v14 = a1->u16[3];
  v15 = (v14 >> 10) & 0x1F;
  if (v15 && v15 != 31)
  {
    v15 = (v15 << 23) + 939524096;
  }
  else if (v15 == 31)
  {
    v15 = 2139095040;
  }
  v16.i32[0] = v1 & 0x3FF;
  v16.i32[1] = v6 & 0xFFFF03FF;
  v16.i32[2] = v11 & 0xFFFF03FF;
  v16.i32[3] = v14 & 0xFFFF03FF;
  v17.i64[0] = 0x8000000080000000;
  v17.i64[1] = 0x8000000080000000;
  v18.i64[0] = __PAIR64__(v10, v5);
  v18.i64[1] = __PAIR64__(v15, v13);
  *(_QWORD *)&result = vorrq_s8(vorrq_s8(v18, vorrq_s8(vandq_s8((int8x16_t)vmovl_s16(*a1), v17), (int8x16_t)vshrq_n_u32(v16, 7uLL))), (int8x16_t)vmull_u16((uint16x4_t)vmovn_s32((int32x4_t)v16), (uint16x4_t)vdup_n_s16(0x2008u))).u64[0];
  return result;
}

double (*C3DConvertGetReadToFloat4Function(int a1))()
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;

  if (a1 >= 46)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DConvertGetReadToFloat4Function_cold_2(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  v10 = a1 - 1;
  if (v10 < 0x2D && ((0x1FFC0CC043C1uLL >> v10) & 1) != 0)
    return (double (*)())off_1EA59FF98[v10];
  v11 = scn_default_log();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    C3DConvertFloatingTypeToFloat4_cold_1(a1);
  return scn_read_from_none;
}

float scn_read_from_float(uint64_t a1)
{
  return *(float *)a1;
}

float scn_read_from_C3DFloat(uint64_t a1)
{
  return *(float *)a1;
}

double scn_read_from_float2(uint64_t a1)
{
  return *(double *)a1;
}

double scn_read_from_float3(uint64_t a1)
{
  return *(double *)a1;
}

__n128 scn_read_from_float4(uint64_t a1)
{
  return *(__n128 *)a1;
}

double scn_read_from_char4n(unsigned int *a1)
{
  int32x4_t v1;
  float32x4_t v7;
  double result;

  *(uint32x2_t *)v1.i8 = vshl_u32((uint32x2_t)vdup_n_s32(*a1), (uint32x2_t)0x1000000018);
  v1.i32[2] = *a1 << 8;
  v1.i32[3] = *a1;
  __asm { FMOV            V1.4S, #-1.0 }
  v7 = vmaxnmq_f32(vmulq_f32(vcvtq_f32_s32(vshrq_n_s32(v1, 0x18uLL)), (float32x4_t)vdupq_n_s32(0x3C010204u)), _Q1);
  __asm { FMOV            V1.4S, #1.0 }
  *(_QWORD *)&result = vminnmq_f32(v7, _Q1).u64[0];
  return result;
}

double scn_read_from_uchar4n(const float *a1)
{
  uint32x4_t v1;
  int8x16_t v2;
  double result;

  v1 = (uint32x4_t)vld1q_dup_f32(a1);
  v2.i64[0] = 0xFF000000FFLL;
  v2.i64[1] = 0xFF000000FFLL;
  *(_QWORD *)&result = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v1, (uint32x4_t)xmmword_1DD008EA0), v2)), (float32x4_t)vdupq_n_s32(0x3B808081u)).u64[0];
  return result;
}

double scn_read_from_snorm10a2(const float *a1)
{
  uint32x4_t v1;
  double result;

  v1 = (uint32x4_t)vld1q_dup_f32(a1);
  *(_QWORD *)&result = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v1, (uint32x4_t)xmmword_1DD009AB0), (int8x16_t)xmmword_1DD009A90)), (float32x4_t)xmmword_1DD009AD0).u64[0];
  return result;
}

double scn_read_from_unorm10a2(const float *a1)
{
  uint32x4_t v1;
  double result;

  v1 = (uint32x4_t)vld1q_dup_f32(a1);
  *(_QWORD *)&result = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v1, (uint32x4_t)xmmword_1DD009AB0), (int8x16_t)xmmword_1DD009A90)), (float32x4_t)xmmword_1DD009AC0).u64[0];
  return result;
}

float scn_read_from_ushortn(_WORD *a1, float a2)
{
  LOWORD(a2) = *a1;
  return (float)LODWORD(a2) * 0.000015259;
}

float32x2_t scn_read_from_ushort2n(_WORD *a1, float a2, float a3)
{
  float32x2_t v3;

  LOWORD(a2) = *a1;
  v3.f32[0] = (float)LODWORD(a2);
  LOWORD(a3) = a1[1];
  v3.f32[1] = (float)LODWORD(a3);
  return vmul_f32(v3, (float32x2_t)vdup_n_s32(0x37800080u));
}

double scn_read_from_ushort3n(_WORD *a1, float a2, float a3, float a4)
{
  float32x4_t v4;
  double result;

  LOWORD(a2) = *a1;
  LOWORD(a3) = a1[1];
  LOWORD(a4) = a1[2];
  v4.i32[3] = 0;
  v4.f32[0] = (float)LODWORD(a2);
  v4.f32[1] = (float)LODWORD(a3);
  v4.f32[2] = (float)LODWORD(a4);
  *(_QWORD *)&result = vmulq_f32(v4, (float32x4_t)vdupq_n_s32(0x37800080u)).u64[0];
  return result;
}

double scn_read_from_ushort4n(uint16x4_t *a1)
{
  double result;

  *(_QWORD *)&result = vmulq_f32(vcvtq_f32_u32(vmovl_u16(*a1)), (float32x4_t)vdupq_n_s32(0x37800080u)).u64[0];
  return result;
}

float scn_read_from_shortn(__int16 *a1)
{
  return (float)*a1 * 0.000030519;
}

float32x2_t scn_read_from_short2n(__int16 *a1)
{
  int32x2_t v1;

  v1.i32[0] = *a1;
  v1.i32[1] = a1[1];
  return vmul_f32(vadd_f32((float32x2_t)vadd_s32(v1, vdup_n_s32(0x4B400000u)), (float32x2_t)vdup_n_s32(0xCB400000)), (float32x2_t)vdup_n_s32(0x38000100u));
}

double scn_read_from_short3n(uint64_t a1)
{
  int16x4_t v1;
  double result;

  v1.i32[0] = *(_DWORD *)a1;
  v1.i32[1] = *(unsigned __int16 *)(a1 + 4);
  *(_QWORD *)&result = vmulq_f32(vaddq_f32((float32x4_t)vaddw_s16(vdupq_n_s32(0x4B400000u), v1), (float32x4_t)vdupq_n_s32(0xCB400000)), (float32x4_t)vdupq_n_s32(0x38000100u)).u64[0];
  return result;
}

double scn_read_from_short4n(int16x4_t *a1)
{
  double result;

  *(_QWORD *)&result = vmulq_f32(vaddq_f32((float32x4_t)vaddw_s16(vdupq_n_s32(0x4B400000u), *a1), (float32x4_t)vdupq_n_s32(0xCB400000)), (float32x4_t)vdupq_n_s32(0x38000100u)).u64[0];
  return result;
}

float scn_read_from_half1(unsigned __int16 *a1)
{
  unsigned int v1;
  int v2;
  int v3;
  BOOL v4;
  int v5;
  float result;

  v1 = *a1;
  v2 = (v1 >> 10) & 0x1F;
  if (v2 == 31)
    v3 = 2139095040;
  else
    v3 = (v1 >> 10) & 0x1F;
  if (v2)
    v4 = v2 == 31;
  else
    v4 = 1;
  if (v4)
    v5 = v3;
  else
    v5 = (v2 << 23) + 939524096;
  LODWORD(result) = v5 | (v1 << 16) & 0x80000000 | (v1 >> 7) & 7 | (8 * (v1 & 0x3FF)) & 0x1FFF | ((v1 & 0x3FF) << 13);
  return result;
}

int8x8_t scn_read_from_half2(unsigned __int16 *a1)
{
  unsigned int v1;
  int v2;
  int v3;
  BOOL v4;
  int v5;
  unsigned int v6;
  int v7;
  int v8;
  BOOL v9;
  uint32x2_t v10;

  v1 = *a1;
  v2 = (v1 >> 10) & 0x1F;
  if (v2 == 31)
    v3 = 2139095040;
  else
    v3 = (v1 >> 10) & 0x1F;
  if (v2)
    v4 = v2 == 31;
  else
    v4 = 1;
  if (v4)
    v5 = v3;
  else
    v5 = (v2 << 23) + 939524096;
  v6 = a1[1];
  v7 = (v6 >> 10) & 0x1F;
  if (v7 == 31)
    v8 = 2139095040;
  else
    v8 = (v6 >> 10) & 0x1F;
  if (v7)
    v9 = v7 == 31;
  else
    v9 = 1;
  if (!v9)
    v8 = (v7 << 23) + 939524096;
  v10.i32[0] = v1 & 0x3FF;
  v10.i32[1] = v6 & 0xFFFF03FF;
  return vorr_s8((int8x8_t)__PAIR64__(v8, v5), vorr_s8(vorr_s8(vand_s8((int8x8_t)vshl_n_s32((int32x2_t)__PAIR64__(v6, v1), 0x10uLL), (int8x8_t)0x8000000080000000), (int8x8_t)vshr_n_u32(v10, 7uLL)), (int8x8_t)vmul_s32((int32x2_t)v10, vdup_n_s32(0x2008u))));
}

int8x8_t scn_read_from_half3(unsigned __int16 *a1)
{
  unsigned int v1;
  int v2;
  int v3;
  BOOL v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;
  BOOL v9;
  uint32x2_t v10;

  v1 = *a1;
  v2 = (v1 >> 10) & 0x1F;
  if (v2 == 31)
    v3 = 2139095040;
  else
    v3 = (v1 >> 10) & 0x1F;
  if (v2)
    v4 = v2 == 31;
  else
    v4 = 1;
  if (!v4)
    v3 = (v2 << 23) + 939524096;
  v5 = a1[1];
  v6 = (v5 >> 10) & 0x1F;
  if (v6 == 31)
    v7 = 2139095040;
  else
    v7 = (v5 >> 10) & 0x1F;
  v8 = (v6 << 23) + 939524096;
  if (v6)
    v9 = v6 == 31;
  else
    v9 = 1;
  if (v9)
    v8 = v7;
  v10.i32[0] = v1 & 0x3FF;
  v10.i32[1] = v5 & 0xFFFF03FF;
  return vorr_s8((int8x8_t)__PAIR64__(v8, v3), vorr_s8(vorr_s8(vand_s8((int8x8_t)vshl_n_s32((int32x2_t)__PAIR64__(v5, v1), 0x10uLL), (int8x8_t)0x8000000080000000), (int8x8_t)vshr_n_u32(v10, 7uLL)), (int8x8_t)vmul_s32((int32x2_t)v10, vdup_n_s32(0x2008u))));
}

double scn_read_from_none()
{
  return 0.0;
}

const __CFString *OUTLINED_FUNCTION_4_6(__int16 a1)
{
  return C3DBaseTypeStringDescription(a1);
}

void sub_1DCDBAB64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1DCDBB360(void *a1)
{
  objc_begin_catch(a1);
  objc_end_catch();
}

void _C3DFramebufferCFFinalize(uint64_t a1)
{
  C3DFramebufferCleanup(a1);
  CFRelease(*(CFTypeRef *)(a1 + 24));
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

CFStringRef _C3DFramebufferCFCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;
  char *v3;
  const void *Value;
  const __CFAllocator *v5;
  __CFString *v6;
  __CFString *v7;
  CFStringRef v8;

  Mutable = CFStringCreateMutable(0, 0);
  if (*(_QWORD *)(a1 + 32))
  {
    v3 = 0;
    do
    {
      Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), v3);
      if (Value)
        CFStringAppendFormat(Mutable, 0, CFSTR("slot%d: %@ "), v3, Value);
      ++v3;
    }
    while (v3 != (char *)6);
  }
  v5 = CFGetAllocator((CFTypeRef)a1);
  v6 = C3DRenderBufferFormatToString(*(unsigned __int8 *)(a1 + 48));
  v7 = C3DRenderBufferFormatToString(*(unsigned __int8 *)(a1 + 112));
  v8 = CFStringCreateWithFormat(v5, 0, CFSTR("<C3DFramebuffer %p: color=%@ - depth=%@ color-samples=%d depth-samples=%d renderTargets:%@>"), a1, v6, v7, *(unsigned __int8 *)(a1 + 49), *(unsigned __int8 *)(a1 + 113), Mutable);
  CFRelease(Mutable);
  return v8;
}

uint64_t C3DFramebufferCreate()
{
  uint64_t Instance;
  CFMutableDictionaryRef Mutable;
  uint64_t v2;

  if (C3DFramebufferGetTypeID_onceToken != -1)
    dispatch_once(&C3DFramebufferGetTypeID_onceToken, &__block_literal_global_39);
  Instance = C3DTypeCreateInstance_(C3DFramebufferGetTypeID_typeID, 0x80uLL);
  if (Instance)
  {
    *(_QWORD *)(Instance + 24) = CFDictionaryCreateMutable(0, 0, 0, 0);
    Mutable = CFDictionaryCreateMutable(0, 6, 0, MEMORY[0x1E0C9B3A0]);
    v2 = 0;
    *(_QWORD *)(Instance + 32) = Mutable;
    *(_BYTE *)(Instance + 120) = *(_BYTE *)(Instance + 120) & 0xF8 | 1;
    do
    {
      *(_BYTE *)(Instance + 49 + v2) = 1;
      v2 += 8;
    }
    while (v2 != 64);
    *(_BYTE *)(Instance + 113) = 1;
  }
  return Instance;
}

void C3DFramebufferSetFBO(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DFramebufferSetFBO_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(_DWORD *)(a1 + 16) = a2;
}

uint64_t C3DFramebufferGetFBO(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DFramebufferSetFBO_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(unsigned int *)(a1 + 16);
}

void C3DFramebufferAddRenderTarget(uint64_t a1, _DWORD *value, int a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (!a1)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      C3DFramebufferSetFBO_cold_1(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  ++value[18];
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), (const void *)a3, value);
}

double C3DFramebufferGetSize(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DFramebufferSetFBO_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(double *)(a1 + 40);
}

void C3DFramebufferSetSize(uint64_t a1, double a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DFramebufferSetFBO_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(double *)(a1 + 40) = a2;
}

void C3DFramebufferCleanup(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DFramebufferSetFBO_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  C3DFramebufferApplyToRenderTargets(a1, &__block_literal_global_5_1);
  CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(a1 + 32));
  *(_BYTE *)(a1 + 128) |= 2u;
}

void C3DFramebufferApplyToRenderTargets(uint64_t a1, void *context)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DFramebufferSetFBO_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 32), (CFDictionaryApplierFunction)_applyToRenderTargets, context);
}

void C3DFramebufferDescriptionSetSampleCount(uint64_t a1, unsigned int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  NSObject *v21;
  uint64_t v22;
  uint8_t v23[4];
  _DWORD v24[7];

  *(_QWORD *)&v24[5] = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DFramebufferDescriptionSetSampleCount_cold_3(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (a2 >= 2)
  {
    if ((*(_BYTE *)(a1 + 75) & 1) != 0)
    {
      v12 = scn_default_log();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
        C3DFramebufferDescriptionSetSampleCount_cold_2(v12, v13, v14, v15, v16, v17, v18, v19);
    }
    for (i = 0; i != 64; i += 8)
    {
      if ((*(_BYTE *)(a1 + 11 + i) & 1) != 0)
      {
        v21 = scn_default_log();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_FAULT))
          C3DFramebufferDescriptionSetSampleCount_cold_1(v23, v24, v21);
      }
    }
  }
  v22 = 0;
  *(_BYTE *)(a1 + 73) = a2;
  do
  {
    *(_BYTE *)(a1 + 9 + v22) = a2;
    v22 += 8;
  }
  while (v22 != 64);
}

void C3DFramebufferDescriptionSetViewportDependant(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DFramebufferDescriptionSetSampleCount_cold_3(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = 0;
  if (a2)
    v13 = 8;
  else
    v13 = 0;
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a1 + 80) & 0xF7 | v13;
  if (a2)
    v14 = 4;
  else
    v14 = 0;
  do
  {
    *(_BYTE *)(a1 + 11 + v12) = *(_BYTE *)(a1 + 11 + v12) & 0xFB | v14;
    v12 += 8;
  }
  while (v12 != 64);
  *(_BYTE *)(a1 + 75) = *(_BYTE *)(a1 + 75) & 0xFB | v14;
}

void C3DFramebufferSetSampleCount(uint64_t a1, unsigned int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DFramebufferSetFBO_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  C3DFramebufferDescriptionSetSampleCount(a1 + 40, a2);
}

uint64_t C3DFramebufferGetSampleCount(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DFramebufferSetFBO_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(unsigned __int8 *)(a1 + 49);
}

void C3DFramebufferAddRenderTargetDescription(uint64_t a1, int a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;

  if (!a1)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      C3DFramebufferSetFBO_cold_1(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  v14 = (const void *)C3DSceneSourcePerformConsistencyCheck(a3);
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 24), (const void *)a2, v14);
}

uint64_t C3DFramebufferGetRenderTargetDescriptions(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DFramebufferSetFBO_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 24);
}

const void *C3DFramebufferGetRenderTarget(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DFramebufferSetFBO_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  return CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), (const void *)a2);
}

const void *C3DFramebufferGetTextureWithSlot(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const void *result;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DFramebufferSetFBO_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  result = C3DFramebufferGetRenderTarget(a1, a2);
  if (result)
    return (const void *)C3DRenderTargetGetTexture((uint64_t)result);
  return result;
}

uint64_t _applyToRenderTargets(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t))(a3 + 16))(a3);
}

uint64_t C3DRenderBufferFormatFromString()
{
  const __CFString *v0;

  v0 = (const __CFString *)C3DStringLowercase();
  if (CFEqual(v0, CFSTR("rgba")))
    return 2;
  if (CFStringHasPrefix(v0, CFSTR("rgba")))
  {
    if (CFStringHasPrefix(v0, CFSTR("rgba8")))
    {
      if (CFEqual(v0, CFSTR("rgba8unorm")) || CFEqual(v0, CFSTR("rgba8")))
        return 28;
      if (CFEqual(v0, CFSTR("rgba8snorm")) || CFEqual(v0, CFSTR("rgba8s")))
        return 29;
      if (CFEqual(v0, CFSTR("rgba8uint")) || CFEqual(v0, CFSTR("rgba8ui")))
        return 30;
      if (CFEqual(v0, CFSTR("rgba8sint")) || CFEqual(v0, CFSTR("rgba8i")))
        return 31;
    }
    else if (CFStringHasPrefix(v0, CFSTR("rgba16")))
    {
      if (CFEqual(v0, CFSTR("rgba16unorm")) || CFEqual(v0, CFSTR("rgba16")))
        return 32;
      if (CFEqual(v0, CFSTR("rgba16snorm")) || CFEqual(v0, CFSTR("rgba16s")))
        return 33;
      if (CFEqual(v0, CFSTR("rgba16uint")) || CFEqual(v0, CFSTR("rgba16ui")))
        return 34;
      if (CFEqual(v0, CFSTR("rgba16sint")) || CFEqual(v0, CFSTR("rgba16i")))
        return 35;
      if (CFEqual(v0, CFSTR("rgba16float")) || CFEqual(v0, CFSTR("rgba16f")))
        return 36;
    }
    else if (CFStringHasPrefix(v0, CFSTR("rgba32")))
    {
      if (CFEqual(v0, CFSTR("rgba32uint")) || CFEqual(v0, CFSTR("rgba32ui")))
        return 37;
      if (CFEqual(v0, CFSTR("rgba32sint")) || CFEqual(v0, CFSTR("rgba32i")))
        return 38;
      if (CFEqual(v0, CFSTR("rgba32float")) || CFEqual(v0, CFSTR("rgba32f")))
        return 39;
    }
  }
  else if (CFStringHasPrefix(v0, CFSTR("rg")))
  {
    if (CFStringHasPrefix(v0, CFSTR("rg8")))
    {
      if (CFEqual(v0, CFSTR("rg8unorm")) || CFEqual(v0, CFSTR("rg8")))
        return 15;
      if (CFEqual(v0, CFSTR("rg8snorm")) || CFEqual(v0, CFSTR("rg8s")))
        return 16;
      if (CFEqual(v0, CFSTR("rg8uint")) || CFEqual(v0, CFSTR("rg8ui")))
        return 17;
      if (CFEqual(v0, CFSTR("rg8sint")) || CFEqual(v0, CFSTR("rg8i")))
        return 18;
    }
    else if (CFStringHasPrefix(v0, CFSTR("rg16")))
    {
      if (CFEqual(v0, CFSTR("rg16unorm")) || CFEqual(v0, CFSTR("rg16")))
        return 19;
      if (CFEqual(v0, CFSTR("rg16snorm")) || CFEqual(v0, CFSTR("rg16s")))
        return 20;
      if (CFEqual(v0, CFSTR("rg16uint")) || CFEqual(v0, CFSTR("rg16ui")))
        return 21;
      if (CFEqual(v0, CFSTR("rg16sint")) || CFEqual(v0, CFSTR("rg16i")))
        return 22;
      if (CFEqual(v0, CFSTR("rg16float")) || CFEqual(v0, CFSTR("rg16f")))
        return 23;
    }
    else if (CFStringHasPrefix(v0, CFSTR("rg32")))
    {
      if (CFEqual(v0, CFSTR("rg32uint")) || CFEqual(v0, CFSTR("rg32ui")))
        return 24;
      if (CFEqual(v0, CFSTR("rg32sint")) || CFEqual(v0, CFSTR("rg32i")))
        return 25;
      if (CFEqual(v0, CFSTR("rg32float")) || CFEqual(v0, CFSTR("rg32f")))
        return 26;
    }
  }
  else if (CFStringHasPrefix(v0, CFSTR("r")))
  {
    if (CFStringHasPrefix(v0, CFSTR("r8")))
    {
      if (CFEqual(v0, CFSTR("r8unorm")) || CFEqual(v0, CFSTR("r8")))
        return 3;
      if (CFEqual(v0, CFSTR("r8snorm")) || CFEqual(v0, CFSTR("r8s")))
        return 4;
      if (CFEqual(v0, CFSTR("r8uint")) || CFEqual(v0, CFSTR("r8ui")))
        return 5;
      if (CFEqual(v0, CFSTR("r8sint")) || CFEqual(v0, CFSTR("r8i")))
        return 6;
    }
    else if (CFStringHasPrefix(v0, CFSTR("r16")))
    {
      if (CFEqual(v0, CFSTR("r16unorm")) || CFEqual(v0, CFSTR("r16")))
        return 7;
      if (CFEqual(v0, CFSTR("r16snorm")) || CFEqual(v0, CFSTR("r16s")))
        return 8;
      if (CFEqual(v0, CFSTR("r16uint")) || CFEqual(v0, CFSTR("r16ui")))
        return 9;
      if (CFEqual(v0, CFSTR("r16sint")) || CFEqual(v0, CFSTR("r16i")))
        return 10;
      if (CFEqual(v0, CFSTR("r16float")) || CFEqual(v0, CFSTR("r16f")))
        return 11;
    }
    else if (CFStringHasPrefix(v0, CFSTR("r32")))
    {
      if (CFEqual(v0, CFSTR("r32uint")) || CFEqual(v0, CFSTR("r32ui")))
        return 12;
      if (CFEqual(v0, CFSTR("r32sint")) || CFEqual(v0, CFSTR("r32i")))
        return 13;
      if (CFEqual(v0, CFSTR("r32float")) || CFEqual(v0, CFSTR("r32f")))
        return 14;
    }
  }
  if (CFEqual(v0, CFSTR("bgra8unorm")) || CFEqual(v0, CFSTR("bgra8")))
    return 27;
  if (!CFStringHasPrefix(v0, CFSTR("depth")))
    goto LABEL_145;
  if (CFEqual(v0, CFSTR("depth16unorm")) || CFEqual(v0, CFSTR("depth16")))
    return 40;
  if (CFEqual(v0, CFSTR("depth24unorm")) || CFEqual(v0, CFSTR("depth24")))
    return 41;
  if (CFEqual(v0, CFSTR("depth32float")) || CFEqual(v0, CFSTR("depth32f")))
    return 42;
  if (CFEqual(v0, CFSTR("depth24unorm_stencil8")))
    return 44;
  if (CFEqual(v0, CFSTR("depth32float_stencil8")))
    return 45;
LABEL_145:
  if (CFEqual(v0, CFSTR("stencil8")))
    return 43;
  return 0;
}

__CFString *C3DRenderBufferFormatToString(int a1)
{
  if ((a1 - 1) > 0x2C)
    return 0;
  else
    return off_1EA5A0190[(char)(a1 - 1)];
}

uint64_t SCNMTLRenderCommandEncoder::drawPrimitives(SCNMTLRenderCommandEncoder *this, MTLPrimitiveType a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t var1_low;
  uint64_t v13;
  void *v14;

  SCNMTLRenderCommandEncoder::_bindPendingTextures(this);
  SCNMTLRenderCommandEncoder::applyChangedStates(this);
  var1_low = LODWORD(this->var14[0].var1);
  v13 = var1_low * a6;
  v14 = (void *)this->var24[1];
  if ((unint64_t)(var1_low * a5) <= 1 && v13 == 0)
    return objc_msgSend(v14, "drawPrimitives:vertexStart:vertexCount:", a2, a3, a4);
  if (v13)
    return objc_msgSend(v14, "drawPrimitives:vertexStart:vertexCount:instanceCount:baseInstance:", a2, a3, a4);
  return objc_msgSend(v14, "drawPrimitives:vertexStart:vertexCount:instanceCount:", a2, a3, a4);
}

__n128 __textureCoordinatesForCaptureDeviceImageProxy(__C3DImageProxy *a1, __n128 *a2)
{
  unsigned int InterfaceOrientation;
  unsigned int v5;
  __n128 Viewport;
  float32x2_t v14;
  float v15;
  __n128 result;
  float v17;
  __n128 v18;
  uint64x2_t v19;
  char v20;

  v20 = 0;
  v19 = 0uLL;
  C3DImageProxyGetCaptureDeviceInfo((uint64_t)a1, (uint64_t)&v20, (uint64_t)&v19.i64[1], (uint64_t)&v19);
  InterfaceOrientation = C3DEngineContextGetInterfaceOrientation((uint64_t)a2);
  v5 = InterfaceOrientation;
  if (!v20)
  {
    switch(InterfaceOrientation)
    {
      case 4u:
        _Q0.n128_u64[0] = 1065353216;
        goto LABEL_14;
      case 3u:
        _Q0.n128_u64[0] = 0x3F80000000000000;
LABEL_16:
        v18 = _Q0;
        __asm { FMOV            V0.2S, #1.0 }
        goto LABEL_19;
      case 2u:
        goto LABEL_11;
    }
LABEL_17:
    __asm { FMOV            V0.2S, #1.0 }
    goto LABEL_18;
  }
  if (InterfaceOrientation == 4)
    goto LABEL_17;
  if (InterfaceOrientation != 3)
  {
    if (InterfaceOrientation == 2)
    {
      _Q0.n128_u64[0] = 0x3F80000000000000;
LABEL_14:
      v18 = _Q0;
      __asm { FMOV            V0.2S, #1.0 }
      goto LABEL_19;
    }
    _Q0.n128_u64[0] = 1065353216;
    goto LABEL_16;
  }
LABEL_11:
  __asm { FMOV            V0.2S, #1.0 }
  _Q0.n128_u64[0] = 0;
LABEL_18:
  v18 = _Q0;
LABEL_19:
  Viewport = C3DEngineContextGetViewport(a2);
  Viewport.n128_u64[0] = vextq_s8((int8x16_t)Viewport, (int8x16_t)Viewport, 8uLL).u64[0];
  v14 = vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v5 < 3), 0x1FuLL)), (int8x8_t)vrev64_s32((int32x2_t)Viewport.n128_u64[0]), (int8x8_t)Viewport.n128_u64[0]), vcvt_f32_f64(vcvtq_f64_u64(v19)));
  if (v14.f32[0] <= v14.f32[1])
  {
    if (v14.f32[0] < v14.f32[1])
    {
      v17 = v14.f32[0] / v14.f32[1];
      result = v18;
      result.n128_f32[0] = (float)((float)(v18.n128_f32[0] + -0.5) * v17) + 0.5;
    }
    else
    {
      return v18;
    }
  }
  else
  {
    v15 = v14.f32[1] / v14.f32[0];
    result = v18;
    result.n128_f32[1] = (float)((float)(v18.n128_f32[1] + -0.5) * v15) + 0.5;
  }
  return result;
}

uint64_t SCNMTLRenderCommandEncoder::drawFullScreenQuad(SCNMTLRenderCommandEncoder *this)
{
  void *v2;

  SCNMTLRenderCommandEncoder::_bindPendingTextures(this);
  SCNMTLRenderCommandEncoder::applyChangedStates(this);
  v2 = (void *)this->var24[1];
  if (LODWORD(this->var14[0].var1) < 2)
    return objc_msgSend(v2, "drawPrimitives:vertexStart:vertexCount:", 4, 0, 4);
  else
    return objc_msgSend(v2, "drawPrimitives:vertexStart:vertexCount:instanceCount:", 4, 0, 4);
}

void SCNMTLRenderCommandEncoder::setVertexTexture(uint64_t a1, void *a2, unint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a2)
  {
    if ((objc_msgSend(a2, "conformsToProtocol:", &unk_1F040D6D0) & 1) == 0)
    {
      v6 = scn_default_log();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
        SCNMTLRenderCommandEncoder::setVertexTexture(v6, v7, v8, v9, v10, v11, v12, v13);
    }
  }
  v14 = a1 + 8 * a3;
  if (*(void **)(v14 + 576) != a2)
  {
    *(_QWORD *)(v14 + 576) = a2;
    *(_QWORD *)(a1 + 8 * (a3 >> 6) + 3408) |= 1 << a3;
  }
}

char *std::__hash_table<std::__hash_value_type<unsigned long long,SCNMTLLightSetData>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SCNMTLLightSetData>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SCNMTLLightSetData>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SCNMTLLightSetData>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  char *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (char *)*v10;
      if (*v10)
      {
        do
        {
          v12 = *((_QWORD *)v11 + 1);
          if (v12 == v7)
          {
            if (*((_QWORD *)v11 + 2) == v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = *(char **)v11;
        }
        while (v11);
      }
    }
  }
  v11 = (char *)operator new(0xB0uLL);
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = v7;
  *((_QWORD *)v11 + 2) = **a4;
  *((_QWORD *)v11 + 21) = 0;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 136) = 0u;
  *(_OWORD *)(v11 + 120) = 0u;
  *(_OWORD *)(v11 + 104) = 0u;
  *(_OWORD *)(v11 + 88) = 0u;
  *(_OWORD *)(v11 + 72) = 0u;
  *(_OWORD *)(v11 + 56) = 0u;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<unsigned long long,SCNMTLLightSetData>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SCNMTLLightSetData>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SCNMTLLightSetData>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SCNMTLLightSetData>>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *(_QWORD *)v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *(_QWORD *)v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*(_QWORD *)v11)
  {
    v21 = *(_QWORD *)(*(_QWORD *)v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_1DCDC3F54(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<unsigned long long,SCNMTLLightSetData>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SCNMTLLightSetData>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SCNMTLLightSetData>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SCNMTLLightSetData>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::__hash_value_type<unsigned long long,SCNMTLLightSetData>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SCNMTLLightSetData>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SCNMTLLightSetData>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SCNMTLLightSetData>>>::__do_rehash<true>(a1, prime);
  }
}

void std::__hash_table<std::__hash_value_type<unsigned long long,SCNMTLLightSetData>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SCNMTLLightSetData>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SCNMTLLightSetData>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SCNMTLLightSetData>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  unint64_t v12;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2)
              v12 %= a2;
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *v7 = *v11;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          v12 = v8;
LABEL_24:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void OUTLINED_FUNCTION_7_1(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 8u);
}

uint64_t OUTLINED_FUNCTION_9_0(id *a1)
{
  return objc_msgSend(*a1, "count");
}

void OUTLINED_FUNCTION_10_0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x1Cu);
}

uint64_t OUTLINED_FUNCTION_12_0()
{
  void *v0;

  return objc_msgSend(v0, "logs");
}

uint64_t OUTLINED_FUNCTION_13_0()
{
  void *v0;

  return objc_msgSend(v0, "error");
}

CFStringRef _C3DConstraintSliderCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DConstraintAcceleration>"));
}

CFStringRef _C3DConstraintSliderCFCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DConstraintAcceleration>"));
}

double __closestPointOnTriangle(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4)
{
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  unint64_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  double result;
  float v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float v24;
  float v25;
  float v26;
  float32x4_t v27;
  float32x4_t v28;
  float v29;
  float v30;

  v4 = vsubq_f32(a2, a1);
  v5 = vsubq_f32(a3, a1);
  v6 = vsubq_f32(a4, a1);
  v7 = vmulq_f32(v4, v6);
  v8 = vmulq_f32(v5, v6);
  v9 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), vaddq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1)));
  v10 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v8, 2), vaddq_f32(v8, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.f32, 1)));
  if (v9.f32[0] <= 0.0)
  {
    v11 = a1.i64[0];
    if (v10.f32[0] <= 0.0)
      return *(double *)&v11;
  }
  v12 = vsubq_f32(a4, a2);
  v13 = vmulq_f32(v4, v12);
  v14 = vmulq_f32(v5, v12);
  v15 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2), vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1)));
  v16 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 2), vaddq_f32(v14, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.f32, 1)));
  if (v15.f32[0] >= 0.0)
  {
    v11 = a2.i64[0];
    if ((vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgeq_f32(v15, v16))).u8[0] & 1) == 0)
      return *(double *)&v11;
  }
  v18 = (float)(v9.f32[0] * v16.f32[0]) - (float)(v15.f32[0] * v10.f32[0]);
  if (v15.f32[0] <= 0.0 && v9.f32[0] >= 0.0 && v18 <= 0.0)
  {
    *(_QWORD *)&result = vmlaq_n_f32(a1, v4, vdivq_f32(v9, vsubq_f32(v9, v15)).f32[0]).u64[0];
    return result;
  }
  v19 = vsubq_f32(a4, a3);
  v20 = vmulq_f32(v4, v19);
  v21 = vmulq_f32(v5, v19);
  v22 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 2), vaddq_f32(v20, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.f32, 1)));
  v23 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 2), vaddq_f32(v21, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 1)));
  if (v23.f32[0] >= 0.0)
  {
    v11 = a3.i64[0];
    if ((vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgeq_f32(v23, v22))).u8[0] & 1) == 0)
      return *(double *)&v11;
  }
  v24 = (float)(v22.f32[0] * v10.f32[0]) - (float)(v9.f32[0] * v23.f32[0]);
  if (v23.f32[0] <= 0.0 && v24 <= 0.0 && v10.f32[0] >= 0.0)
  {
    LODWORD(v25) = vdivq_f32(v10, vsubq_f32(v10, v23)).u32[0];
LABEL_20:
    *(_QWORD *)&result = vmlaq_n_f32(a1, v5, v25).u64[0];
    return result;
  }
  v26 = (float)(v15.f32[0] * v23.f32[0]) - (float)(v22.f32[0] * v16.f32[0]);
  if (v26 > 0.0 || (v27 = vsubq_f32(v16, v15), v27.f32[0] < 0.0) || (v28 = vsubq_f32(v22, v23), v28.f32[0] < 0.0))
  {
    v29 = 1.0 / (float)(v18 + (float)(v26 + v24));
    v30 = v24 * v29;
    v25 = v18 * v29;
    a1 = vmlaq_n_f32(a1, v4, v30);
    goto LABEL_20;
  }
  *(_QWORD *)&result = vmlaq_n_f32(a2, vsubq_f32(a3, a2), vdivq_f32(v27, vaddq_f32(v27, v28)).f32[0]).u64[0];
  return result;
}

void CheckPolygonContact(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, uint64_t a4, float a5, double a6)
{
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  int32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x2_t v20;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float v28;
  float32x4_t v29;
  BOOL v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float v35;
  float v36;
  float32x4_t v38;
  float v39;
  float32x4_t v40[3];
  float32x4_t v41;
  float32x4_t v42;

  v8 = *a1;
  v7 = a1[1];
  v9 = vsubq_f32(v7, *a1);
  v10 = a1[2];
  v11 = vsubq_f32(v10, *a1);
  v12 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v11, (int32x4_t)v11), (int8x16_t)v11, 0xCuLL), vnegq_f32(v9)), v11, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v9, (int32x4_t)v9), (int8x16_t)v9, 0xCuLL));
  v13 = (int32x4_t)vmulq_f32(v12, v12);
  v13.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v13.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v13, 2), *(float32x2_t *)v13.i8)).u32[0];
  *(float32x2_t *)v11.f32 = vrsqrte_f32((float32x2_t)v13.u32[0]);
  *(float32x2_t *)v11.f32 = vmul_f32(*(float32x2_t *)v11.f32, vrsqrts_f32((float32x2_t)v13.u32[0], vmul_f32(*(float32x2_t *)v11.f32, *(float32x2_t *)v11.f32)));
  v14 = vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v12, (int32x4_t)v12), (int8x16_t)v12, 0xCuLL), vmul_f32(*(float32x2_t *)v11.f32, vrsqrts_f32((float32x2_t)v13.u32[0], vmul_f32(*(float32x2_t *)v11.f32, *(float32x2_t *)v11.f32))).f32[0]);
  v15 = vmulq_f32(*a1, v14);
  v16 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 2), vaddq_f32(v15, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 1)));
  v17 = *a2;
  v18 = vmulq_f32(*a2, v14);
  v19 = vmulq_f32(v14, vnegq_f32(v14));
  v20 = (float32x2_t)vdivq_f32(vsubq_f32(v16, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 2), vaddq_f32(v18, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 1)))), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 2), vaddq_f32(v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 1)))).u64[0];
  if (v20.f32[0] >= 0.0)
  {
    if (v20.f32[0] <= *(float *)&a6)
    {
      v39 = *(float *)&a6;
      v29 = vmlsq_lane_f32(v17, v14, v20, 0);
    }
    else
    {
      v25 = vmlsq_lane_f32(v17, v14, *(float32x2_t *)&a6, 0);
      v26 = vmulq_f32(v14, v25);
      v27 = vmulq_f32(v14, *a3);
      v28 = (float)(v16.f32[0]
                  - vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v26, 2), vaddq_f32(v26, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 1))).f32[0])/ vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v27, 2), vaddq_f32(v27, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.f32, 1))).f32[0];
      if (v28 < 0.0)
        return;
      v39 = *(float *)&a6;
      v29 = vmlaq_n_f32(v25, *a3, v28);
    }
    v38 = v29;
    v42 = v29;
    v40[2] = v10;
    v41 = v29;
    v40[0] = v8;
    v40[1] = v7;
    v30 = C3DTriangle3ContainsPoint(v40, &v42);
    v31 = v38;
    if (!v30)
    {
      *(double *)v31.i64 = __closestPointOnTriangle(*a1, a1[1], a1[2], v42);
      v41 = v31;
    }
    v32 = vsubq_f32(*a2, v31);
    v33 = vmulq_f32(v32, v32);
    v33.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v33, 2), vaddq_f32(v33, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v33.f32, 1))).f32[0]);
    v34 = vmulq_f32(v32, vnegq_f32(*a3));
    v34.f32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v34, 2), vaddq_f32(v34, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v34.f32, 1))).f32[0];
    v35 = -(float)((float)((float)((float)-v34.f32[0] * v34.f32[0]) + (float)(v33.f32[0] * v33.f32[0]))
                 - (float)(v39 * v39));
    v36 = v34.f32[0] - sqrtf(v35);
    if (v35 < 0.0)
      v36 = -1.0;
    if (v36 >= 0.0 && v36 <= a5)
      (*(void (**)(uint64_t, float32x4_t *, float32x4_t *))(a4 + 16))(a4, a1, &v41);
  }
}

float32x4_t __slideWithinWorld(float32x4_t *a1, double a2, float32x4_t a3, float32x4_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v8;
  float32x4_t v11;
  float v12;
  float v13;
  float v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  int v28;
  float32x4_t v29;
  float v30;
  float32x4_t v31;
  int32x4_t v32;
  float32x2_t v33;
  float32x2_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  _QWORD v47[4];
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  float32x4_t *v56;
  float v57;
  int v58;
  _OWORD v59[2];
  uint64_t v60;
  uint64_t v61;
  float *v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  float32x4_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v8 = LODWORD(a2);
  v74 = *MEMORY[0x1E0C80C00];
  *(float *)&a2 = *(float *)&a2 + 0.001;
  v42 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a2, 0);
  while (1)
  {
    v11 = vmulq_f32(a4, a4);
    LODWORD(v12) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 2), vaddq_f32(v11, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 1))).u32[0];
    v13 = sqrtf(v12);
    if (v13 < 0.001)
      break;
    v65 = 0;
    v66 = &v65;
    v67 = 0x2000000000;
    v68 = 0;
    v61 = 0;
    v62 = (float *)&v61;
    v63 = 0x2000000000;
    v64 = 2139095039;
    v69 = 0;
    v70 = (float32x4_t *)&v69;
    v71 = 0x3000000000;
    v14 = v12;
    v15 = vrsqrte_f32((float32x2_t)LODWORD(v12));
    v16 = vmul_f32(v15, vrsqrts_f32((float32x2_t)LODWORD(v14), vmul_f32(v15, v15)));
    v17 = vmulq_n_f32(a4, vmul_f32(v16, vrsqrts_f32((float32x2_t)LODWORD(v14), vmul_f32(v16, v16))).f32[0]);
    v18 = vaddq_f32(a4, a3);
    v45 = a4;
    v19 = vsubq_f32(a3, v42);
    v20 = vsubq_f32(v18, v42);
    v19.i32[3] = 0;
    v20.i32[3] = 0;
    v21 = vminnmq_f32(v19, v20);
    v22 = vaddq_f32(v42, a3);
    v22.i32[3] = 0;
    v43 = v18;
    v23 = vaddq_f32(v42, v18);
    v23.i32[3] = 0;
    v24 = vmaxnmq_f32(v22, v23);
    v25.i64[0] = 0x3F0000003F000000;
    v25.i64[1] = 0x3F0000003F000000;
    v26 = vmulq_f32(vaddq_f32(v21, v24), v25);
    v26.i32[3] = 1.0;
    v27 = vmulq_f32(vsubq_f32(v24, v21), v25);
    v27.i32[3] = 0;
    v72 = 0;
    v73 = 0;
    a1[13] = v26;
    a1[14] = v27;
    a1[11].i64[0] = a1[10].i64[1];
    v60 = 0;
    memset(v59, 0, sizeof(v59));
    v47[0] = MEMORY[0x1E0C809B0];
    v47[1] = 0x40000000;
    v47[2] = ___Z18__slideWithinWorldP15__C3DConstraintP18__C3DEngineContextP18__C3DCullingSystemP9__C3DNodefDv3_fS7__block_invoke;
    v47[3] = &unk_1EA5A08C0;
    v48 = v26;
    v49 = v27;
    v55 = a7;
    v56 = a1;
    v50 = a3;
    v51 = v17;
    v44 = v17;
    v57 = v13;
    v58 = v8;
    v52 = &v65;
    v53 = &v61;
    v54 = &v69;
    v46 = a3;
    C3DCullingSystemQueryMake((uint64_t)v47, (uint64_t)v59);
    *(_QWORD *)&v59[0] = a1[10].i64[0];
    C3DCullingSystemAABBIntersect(a6);
    v28 = *((unsigned __int8 *)v66 + 24);
    if (*((_BYTE *)v66 + 24))
    {
      v29 = v70[2];
      v30 = v62[6];
      v31 = vsubq_f32(vmlaq_n_f32(v46, v44, v30), v29);
      v32 = (int32x4_t)vmulq_f32(v31, v31);
      v32.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v32, 2), vadd_f32(*(float32x2_t *)v32.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v32.i8, 1))).u32[0];
      v33 = vrsqrte_f32((float32x2_t)v32.u32[0]);
      v34 = vmul_f32(v33, vrsqrts_f32((float32x2_t)v32.u32[0], vmul_f32(v33, v33)));
      v35 = vmulq_n_f32(v31, vmul_f32(v34, vrsqrts_f32((float32x2_t)v32.u32[0], vmul_f32(v34, v34))).f32[0]);
      v36 = vmulq_f32(v29, v35);
      v37 = vmlaq_n_f32(v46, v44, v13 + -0.001);
      v38 = vmulq_f32(v37, v35);
      v39 = vmulq_f32(v35, v35);
      v45 = vsubq_f32(vmlaq_n_f32(v37, v35, (float)(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v36, 2), vaddq_f32(v36, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v36.f32, 1))).f32[0]- vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v38, 2), vaddq_f32(v38, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v38.f32, 1))).f32[0])/ vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v39, 2), vaddq_f32(v39, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v39.f32, 1))).f32[0]), v29);
      v46 = vmlaq_n_f32(v46, v44, v30 + -0.001);
    }
    else
    {
      v41 = v43;
    }
    _Block_object_dispose(&v69, 8);
    _Block_object_dispose(&v61, 8);
    _Block_object_dispose(&v65, 8);
    a4 = v45;
    a3 = v46;
    if (!v28)
      return v41;
  }
  return a3;
}

void ___Z18__slideWithinWorldP15__C3DConstraintP18__C3DEngineContextP18__C3DCullingSystemP9__C3DNodefDv3_fS7__block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  float32x2_t v5;
  float32x4_t *v6;
  uint64_t v7;
  __C3DGeometry *Geometry;
  __C3DMesh *RenderingMesh;
  float32x4_t *WorldMatrix;
  float32x4_t *v11;
  int8x16_t v12;
  BOOL v13;
  simd_float4x4 v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  int32x4_t v19;
  const __CFArray *ElementsCount;
  uint64_t v21;
  const void *PositionSource;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t ChannelForSourceWithSemanticAtIndex;
  uint64_t v27;
  CFIndex i;
  const void *ElementAtIndex;
  NSObject *v30;
  __int128 v31;
  int32x4_t v32;
  float32x4_t v33;
  uint64_t v34;
  uint64_t Content;
  _QWORD v38[4];
  __int128 v39;
  __int128 v40;
  __n128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  float32x4_t *v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  _OWORD v49[3];
  uint64_t v50;
  uint8_t buf[16];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  _QWORD v56[4];
  __int128 v57;
  simd_float4 v58;
  __int128 v59;
  uint64_t v60;
  float32x4_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint8_t v64[4];
  _QWORD v65[3];
  simd_float4x4 v66;

  *(_QWORD *)((char *)&v65[1] + 4) = *MEMORY[0x1E0C80C00];
  if (a3 >= 1)
  {
    v4 = 0;
    v5 = (float32x2_t)vdup_n_s32(0x3727C5ACu);
    do
    {
      v6 = *(float32x4_t **)(a2 + 8 * v4);
      v7 = *(_QWORD *)(a1 + 120);
      if (v6 != (float32x4_t *)v7 && !C3DNodeIsAncestor(*(_QWORD *)(a2 + 8 * v4), v7))
      {
        Geometry = (__C3DGeometry *)C3DNodeGetGeometry((uint64_t)v6);
        RenderingMesh = C3DGeometryGetRenderingMesh(Geometry);
        WorldMatrix = C3DNodeGetWorldMatrix(v6);
        v11 = WorldMatrix;
        v14.columns[0] = (simd_float4)*WorldMatrix;
        v14.columns[1] = (simd_float4)WorldMatrix[1];
        v14.columns[2] = (simd_float4)WorldMatrix[2];
        v12 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v14.columns[2], (int32x4_t)v14.columns[2]), (int8x16_t)v14.columns[2], 0xCuLL), vnegq_f32((float32x4_t)v14.columns[1])), (float32x4_t)v14.columns[2], (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v14.columns[1], (int32x4_t)v14.columns[1]), (int8x16_t)v14.columns[1], 0xCuLL));
        v14.columns[3] = (simd_float4)vmulq_f32(*WorldMatrix, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v12, (int32x4_t)v12), v12, 0xCuLL));
        v13 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14.columns[3], 2), vaddq_f32((float32x4_t)v14.columns[3], (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.columns[3].f32, 1))).f32[0] < 0.0;
        v14.columns[3].i32[0] = 1.0;
        if (v13)
          v14.columns[3].f32[0] = -1.0;
        v15 = vmulq_f32((float32x4_t)v14.columns[0], (float32x4_t)v14.columns[0]);
        v16 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 2), vaddq_f32(v15, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 1)));
        v16.f32[0] = sqrtf(v16.f32[0]);
        v17 = vmulq_f32((float32x4_t)v14.columns[1], (float32x4_t)v14.columns[1]);
        v18 = vmulq_f32((float32x4_t)v14.columns[2], (float32x4_t)v14.columns[2]);
        v16.i32[1] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v17, 2), vaddq_f32(v17, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 1))).f32[0]);
        v16.i32[2] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 2), vaddq_f32(v18, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 1))).f32[0]);
        v19 = (int32x4_t)vmulq_n_f32(v16, v14.columns[3].f32[0]);
        *(int32x2_t *)v19.i8 = vcgt_f32(v5, vabd_f32(*(float32x2_t *)v19.i8, (float32x2_t)vdup_laneq_s32(v19, 2)));
        if ((vpmin_u32(*(uint32x2_t *)v19.i8, *(uint32x2_t *)v19.i8).u32[0] & 0x80000000) != 0)
        {
          v14.columns[3] = (simd_float4)WorldMatrix[3];
          v66 = __invert_f4(v14);
          v32 = *(int32x4_t *)(a1 + 48);
          v66.columns[3] = (simd_float4)vaddq_f32((float32x4_t)v66.columns[3], vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32((float32x4_t)v66.columns[1], *(float32x2_t *)(a1 + 32), 1), (float32x4_t)v66.columns[0], COERCE_FLOAT(*(_OWORD *)(a1 + 32))), (float32x4_t)v66.columns[2], *(float32x4_t *)(a1 + 32), 2));
          v66.columns[3].i32[3] = 1.0;
          v33 = (float32x4_t)v32;
          v33.i32[1] = v32.i32[0];
          v33.i32[2] = v32.i32[0];
          v56[0] = MEMORY[0x1E0C809B0];
          v56[1] = 0x40000000;
          v56[2] = ___Z18__slideWithinWorldP15__C3DConstraintP18__C3DEngineContextP18__C3DCullingSystemP9__C3DNodefDv3_fS7__block_invoke_2;
          v56[3] = &unk_1EA5A0848;
          v34 = *(_QWORD *)(a1 + 128);
          v61 = v11;
          v62 = v34;
          v66.columns[1] = (simd_float4)vaddq_f32(vaddq_f32(vabsq_f32(vmulq_f32((float32x4_t)v66.columns[0], v33)), vabsq_f32(vmulq_f32((float32x4_t)v66.columns[1], (float32x4_t)vuzp2q_s32(vdupq_lane_s32(*(int32x2_t *)v32.i8, 1), v32)))), vabsq_f32(vmulq_f32((float32x4_t)v66.columns[2], (float32x4_t)vzip2q_s32(vtrn1q_s32(v32, v32), v32))));
          v66.columns[2] = *(simd_float4 *)(a1 + 80);
          v57 = *(_OWORD *)(a1 + 64);
          v58 = v66.columns[2];
          v63 = *(_QWORD *)(a1 + 136);
          v59 = *(_OWORD *)(a1 + 96);
          v60 = *(_QWORD *)(a1 + 112);
          C3DMeshQueryTrianglesIntersectingBox((uint64_t)RenderingMesh, (uint64_t)v56, (float32x4_t)v66.columns[3], (float32x4_t)v66.columns[1]);
        }
        else
        {
          ElementsCount = C3DMeshGetElementsCount((uint64_t)RenderingMesh);
          if (ElementsCount)
          {
            v21 = (uint64_t)ElementsCount;
            PositionSource = C3DMeshGetPositionSource((uint64_t)RenderingMesh, 0);
            if (C3DMeshSourceGetCount((uint64_t)PositionSource))
            {
              Content = C3DMeshSourceGetContent((uint64_t)PositionSource);
              v24 = v23;
              if ((v23 & 0xFF00000000) != 0x900000000)
              {
                v25 = scn_default_log();
                if (os_log_type_enabled(v25, OS_LOG_TYPE_FAULT))
                  ___Z18__slideWithinWorldP15__C3DConstraintP18__C3DEngineContextP18__C3DCullingSystemP9__C3DNodefDv3_fS7__block_invoke_cold_1(v64, v65, v25);
              }
              ChannelForSourceWithSemanticAtIndex = C3DMeshGetChannelForSourceWithSemanticAtIndex((uint64_t)RenderingMesh, 0, 0);
              if (v21 >= 1)
              {
                v27 = ChannelForSourceWithSemanticAtIndex;
                for (i = 0; i != v21; ++i)
                {
                  ElementAtIndex = C3DMeshGetElementAtIndex((uint64_t)RenderingMesh, i, 0);
                  v55 = 0;
                  v53 = 0u;
                  v54 = 0u;
                  v52 = 0u;
                  C3DMeshElementGetContent((uint64_t)ElementAtIndex, v27, (uint64_t)&v52);
                  if ((BYTE10(v53) & 0xFA) != 0)
                  {
                    v30 = scn_default_log();
                    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_WORD *)buf = 0;
                      _os_log_impl(&dword_1DCCB8000, v30, OS_LOG_TYPE_DEFAULT, "Warning: Slider can only process triangles.", buf, 2u);
                    }
                  }
                  else
                  {
                    v49[0] = v52;
                    v49[1] = v53;
                    v49[2] = v54;
                    v50 = v55;
                    v38[0] = MEMORY[0x1E0C809B0];
                    v38[1] = 0x40000000;
                    v38[2] = ___Z18__slideWithinWorldP15__C3DConstraintP18__C3DEngineContextP18__C3DCullingSystemP9__C3DNodefDv3_fS7__block_invoke_9;
                    v38[3] = &unk_1EA5A0898;
                    v47 = v24 - 1;
                    v44 = v24;
                    v45 = v11;
                    v46 = *(_QWORD *)(a1 + 128);
                    v31 = *(_OWORD *)(a1 + 80);
                    v39 = *(_OWORD *)(a1 + 64);
                    v40 = v31;
                    v48 = *(_QWORD *)(a1 + 136);
                    v41 = *(__n128 *)(a1 + 96);
                    v42 = *(_QWORD *)(a1 + 112);
                    v43 = Content;
                    C3DIndicesContentEnumeratePrimitives((uint64_t *)v49, (uint64_t)v38, v41);
                  }
                }
              }
            }
          }
        }
      }
      ++v4;
    }
    while (v4 != a3);
  }
}

uint64_t ___Z18__slideWithinWorldP15__C3DConstraintP18__C3DEngineContextP18__C3DCullingSystemP9__C3DNodefDv3_fS7__block_invoke_2(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v5;
  float32x4_t *v6;
  float32x4_t *v7;
  uint64_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t *v11;
  _QWORD *v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  unint64_t v17;
  float32x4_t *v18;
  float32x4_t v19;
  float32x4_t v20;
  _OWORD *f32;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  float32x4_t *v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t *v31;
  float32x4_t *v32;
  float32x4_t *v33;
  float32x4_t v34;
  float32x4_t v35;
  float v36;
  _QWORD v38[4];
  __int128 v39;
  uint64_t v40;
  _QWORD *v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;

  if (a3)
  {
    v5 = 0;
    v6 = (float32x4_t *)(a1 + 32);
    v7 = (float32x4_t *)(a1 + 48);
    v8 = a3;
    do
    {
      v9 = *(float32x4_t *)(a2 + 16 * (3 * v5 + 1));
      v10 = *(float32x4_t *)(a2 + 16 * (3 * v5 + 2));
      v42 = *(float32x4_t *)(a2 + 16 * (3 * v5));
      v43 = v9;
      v44 = v10;
      v11 = *(float32x4_t **)(a1 + 88);
      v12 = *(_QWORD **)(a1 + 96);
      v13 = v11[1];
      v14 = v11[2];
      v15 = v11[3];
      v42 = vaddq_f32(v15, vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v13, *(float32x2_t *)v42.f32, 1), *v11, v42.f32[0]), v14, v42, 2));
      v43 = vaddq_f32(v15, vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v13, *(float32x2_t *)v9.f32, 1), *v11, v9.f32[0]), v14, v9, 2));
      v16 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v11[1], *(float32x2_t *)v10.f32, 1), *v11, v10.f32[0]), v14, v10, 2);
      v44 = vaddq_f32(v15, v16);
      if (v12[16])
      {
        v18 = (float32x4_t *)v12[31];
        v17 = v12[32];
        if ((unint64_t)v18 >= v17)
        {
          v22 = v12[30];
          v23 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v18 - v22) >> 4);
          v24 = v23 + 1;
          if (v23 + 1 > 0x555555555555555)
            abort();
          v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - v22) >> 4);
          if (2 * v25 > v24)
            v24 = 2 * v25;
          if (v25 >= 0x2AAAAAAAAAAAAAALL)
            v26 = 0x555555555555555;
          else
            v26 = v24;
          if (v26)
            v27 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Triangle>>((uint64_t)(v12 + 32), v26);
          else
            v27 = 0;
          v28 = (float32x4_t *)&v27[48 * v23];
          v29 = v42;
          v16.i32[1] = v43.i32[1];
          v30 = v44;
          v28[1] = v43;
          v28[2] = v30;
          *v28 = v29;
          v32 = (float32x4_t *)v12[30];
          v31 = (float32x4_t *)v12[31];
          v33 = v28;
          if (v31 != v32)
          {
            do
            {
              v34 = v31[-3];
              v16 = v31[-2];
              v35 = v31[-1];
              v33[-2] = v16;
              v33[-1] = v35;
              v33[-3] = v34;
              v33 -= 3;
              v31 -= 3;
            }
            while (v31 != v32);
            v31 = (float32x4_t *)v12[30];
          }
          f32 = (_OWORD *)v28[3].f32;
          v12[30] = v33;
          v12[31] = v28 + 3;
          v12[32] = &v27[48 * v26];
          if (v31)
            operator delete(v31);
        }
        else
        {
          v19 = v42;
          v16.i32[1] = v43.i32[1];
          v20 = v44;
          v18[1] = v43;
          v18[2] = v20;
          *v18 = v19;
          f32 = (_OWORD *)v18[3].f32;
        }
        v12[31] = f32;
        v12 = *(_QWORD **)(a1 + 96);
      }
      v36 = *(float *)(a1 + 104);
      v16.i32[0] = *(_DWORD *)(a1 + 108);
      v38[0] = MEMORY[0x1E0C809B0];
      v38[1] = 0x40000000;
      v38[2] = ___Z18__slideWithinWorldP15__C3DConstraintP18__C3DEngineContextP18__C3DCullingSystemP9__C3DNodefDv3_fS7__block_invoke_3;
      v38[3] = &unk_1EA5A0820;
      v39 = *(_OWORD *)(a1 + 64);
      v40 = *(_QWORD *)(a1 + 80);
      v41 = v12;
      CheckPolygonContact(&v42, v6, v7, (uint64_t)v38, v36, *(double *)v16.i64);
      ++v5;
    }
    while (v5 != v8);
  }
  return 0;
}

void ___Z18__slideWithinWorldP15__C3DConstraintP18__C3DEngineContextP18__C3DCullingSystemP9__C3DNodefDv3_fS7__block_invoke_3(_QWORD *a1, __int128 *a2, _OWORD *a3, float a4)
{
  uint64_t v6;
  float v7;
  uint64_t v8;
  _QWORD *v9;
  _OWORD *v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  _OWORD *v14;
  float v15;
  float v16;
  _QWORD *v18;
  _OWORD *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  char *v37;
  char *v38;
  __int128 v39;
  __int128 v40;
  unint64_t v41;
  __int128 v42;
  __int128 v43;
  _OWORD *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  __int128 v53;
  __int128 v54;
  char *v55;
  char *v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  char *v61;
  __int128 v62;
  __int128 v63;

  v6 = *(_QWORD *)(a1[5] + 8);
  if (!*(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) || (v7 = *(float *)(v6 + 24), v7 > a4))
  {
    *(float *)(v6 + 24) = a4;
    *(_OWORD *)(*(_QWORD *)(a1[6] + 8) + 32) = *a3;
    *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = 1;
    v8 = a1[7];
    if (!*(_QWORD *)(v8 + 128))
      return;
    *(_QWORD *)(v8 + 248) -= 48;
    v9 = (_QWORD *)a1[7];
    v10 = (_OWORD *)v9[34];
    v11 = v9[35];
    if ((unint64_t)v10 >= v11)
    {
      v27 = v9[33];
      v28 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v10 - v27) >> 4);
      v29 = v28 + 1;
      if (v28 + 1 > 0x555555555555555)
        goto LABEL_55;
      v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v27) >> 4);
      if (2 * v30 > v29)
        v29 = 2 * v30;
      if (v30 >= 0x2AAAAAAAAAAAAAALL)
        v31 = 0x555555555555555;
      else
        v31 = v29;
      if (v31)
        v32 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Triangle>>((uint64_t)(v9 + 35), v31);
      else
        v32 = 0;
      v33 = &v32[48 * v28];
      v34 = &v32[48 * v31];
      v35 = *a2;
      v36 = a2[2];
      *((_OWORD *)v33 + 1) = a2[1];
      *((_OWORD *)v33 + 2) = v36;
      *(_OWORD *)v33 = v35;
      v14 = v33 + 48;
      v38 = (char *)v9[33];
      v37 = (char *)v9[34];
      if (v37 != v38)
      {
        do
        {
          v39 = *((_OWORD *)v37 - 3);
          v40 = *((_OWORD *)v37 - 1);
          *((_OWORD *)v33 - 2) = *((_OWORD *)v37 - 2);
          *((_OWORD *)v33 - 1) = v40;
          *((_OWORD *)v33 - 3) = v39;
          v33 -= 48;
          v37 -= 48;
        }
        while (v37 != v38);
        v37 = (char *)v9[33];
      }
      v9[33] = v33;
      v9[34] = v14;
      v9[35] = v34;
      if (v37)
        operator delete(v37);
    }
    else
    {
      v12 = *a2;
      v13 = a2[2];
      v10[1] = a2[1];
      v10[2] = v13;
      *v10 = v12;
      v14 = v10 + 3;
    }
    v9[34] = v14;
    v18 = (_QWORD *)a1[7];
    v19 = (_OWORD *)v18[22];
    v41 = v18[23];
    if ((unint64_t)v19 < v41)
      goto LABEL_34;
    v45 = v18[21];
    v46 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v19 - v45) >> 4);
    v47 = v46 + 1;
    if (v46 + 1 <= 0x555555555555555)
    {
      v48 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v41 - v45) >> 4);
      if (2 * v48 > v47)
        v47 = 2 * v48;
      if (v48 >= 0x2AAAAAAAAAAAAAALL)
        v49 = 0x555555555555555;
      else
        v49 = v47;
      if (v49)
        v50 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Triangle>>((uint64_t)(v18 + 23), v49);
      else
        v50 = 0;
      v51 = &v50[48 * v46];
      v52 = &v50[48 * v49];
      v53 = *a2;
      v54 = a2[2];
      *((_OWORD *)v51 + 1) = a2[1];
      *((_OWORD *)v51 + 2) = v54;
      *(_OWORD *)v51 = v53;
      v44 = v51 + 48;
      v56 = (char *)v18[21];
      v55 = (char *)v18[22];
      if (v55 == v56)
        goto LABEL_51;
      do
      {
        v57 = *((_OWORD *)v55 - 3);
        v58 = *((_OWORD *)v55 - 1);
        *((_OWORD *)v51 - 2) = *((_OWORD *)v55 - 2);
        *((_OWORD *)v51 - 1) = v58;
        *((_OWORD *)v51 - 3) = v57;
        v51 -= 48;
        v55 -= 48;
      }
      while (v55 != v56);
LABEL_50:
      v55 = (char *)v18[21];
LABEL_51:
      v18[21] = v51;
      v18[22] = v44;
      v18[23] = v52;
      if (v55)
        operator delete(v55);
      goto LABEL_53;
    }
LABEL_55:
    abort();
  }
  v15 = v7 + -0.001;
  v16 = v7 + 0.001;
  if (v15 < a4 && v16 > a4)
  {
    v18 = (_QWORD *)a1[7];
    v19 = (_OWORD *)v18[22];
    v20 = v18[23];
    if ((unint64_t)v19 < v20)
    {
LABEL_34:
      v42 = *a2;
      v43 = a2[2];
      v19[1] = a2[1];
      v19[2] = v43;
      *v19 = v42;
      v44 = v19 + 3;
LABEL_53:
      v18[22] = v44;
      return;
    }
    v21 = v18[21];
    v22 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v19 - v21) >> 4);
    v23 = v22 + 1;
    if (v22 + 1 <= 0x555555555555555)
    {
      v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - v21) >> 4);
      if (2 * v24 > v23)
        v23 = 2 * v24;
      if (v24 >= 0x2AAAAAAAAAAAAAALL)
        v25 = 0x555555555555555;
      else
        v25 = v23;
      if (v25)
        v26 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Triangle>>((uint64_t)(v18 + 23), v25);
      else
        v26 = 0;
      v51 = &v26[48 * v22];
      v52 = &v26[48 * v25];
      v59 = *a2;
      v60 = a2[2];
      *((_OWORD *)v51 + 1) = a2[1];
      *((_OWORD *)v51 + 2) = v60;
      *(_OWORD *)v51 = v59;
      v44 = v51 + 48;
      v61 = (char *)v18[21];
      v55 = (char *)v18[22];
      if (v55 == v61)
        goto LABEL_51;
      do
      {
        v62 = *((_OWORD *)v55 - 3);
        v63 = *((_OWORD *)v55 - 1);
        *((_OWORD *)v51 - 2) = *((_OWORD *)v55 - 2);
        *((_OWORD *)v51 - 1) = v63;
        *((_OWORD *)v51 - 3) = v62;
        v51 -= 48;
        v55 -= 48;
      }
      while (v55 != v61);
      goto LABEL_50;
    }
    goto LABEL_55;
  }
}

void ___Z18__slideWithinWorldP15__C3DConstraintP18__C3DEngineContextP18__C3DCullingSystemP9__C3DNodefDv3_fS7__block_invoke_9(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned int a4)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  float *v18;
  float v19;
  float v20;
  float v21;
  unsigned int v22;
  float *v23;
  float *v24;
  float v25;
  float v26;
  float v27;
  float32x4_t *v28;
  _QWORD *v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  unint64_t v36;
  float32x4_t *v37;
  float32x4_t v38;
  float32x4_t v39;
  _OWORD *f32;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  float32x4_t *v47;
  char *v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t *v51;
  float32x4_t *v52;
  float32x4_t v53;
  float32x4_t v54;
  float v55;
  _QWORD v56[4];
  __int128 v57;
  uint64_t v58;
  _QWORD *v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;

  if (a4 <= 2)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      ___Z18__slideWithinWorldP15__C3DConstraintP18__C3DEngineContextP18__C3DCullingSystemP9__C3DNodefDv3_fS7__block_invoke_9_cold_1(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  v14 = *(_QWORD *)(a1 + 88);
  v15 = *(unsigned __int8 *)(a1 + 101);
  v16 = *(_DWORD *)(a1 + 120);
  v17 = *a3;
  if (v16 < *a3)
    v17 = *(_DWORD *)(a1 + 120);
  v18 = (float *)(v14 + v17 * v15);
  v19 = *v18;
  v20 = v18[1];
  v21 = v18[2];
  if (v16 >= a3[1])
    v22 = a3[1];
  else
    v22 = *(_DWORD *)(a1 + 120);
  v23 = (float *)(v14 + v22 * v15);
  if (v16 >= a3[2])
    v16 = a3[2];
  v24 = (float *)(v14 + v16 * v15);
  v25 = *v24;
  v26 = v24[1];
  v27 = v24[2];
  v28 = *(float32x4_t **)(a1 + 104);
  v29 = *(_QWORD **)(a1 + 112);
  v30 = v28[1];
  v31 = v28[2];
  v32 = v28[3];
  v33 = vaddq_f32(v32, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(*v28, v19), v30, v20), v31, v21));
  v34 = vaddq_f32(v32, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(*v28, *v23), v30, v23[1]), v31, v23[2]));
  v35 = vaddq_f32(v32, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(*v28, v25), v30, v26), v31, v27));
  v60 = v33;
  v61 = v34;
  v62 = v35;
  if (v29[16])
  {
    v37 = (float32x4_t *)v29[31];
    v36 = v29[32];
    if ((unint64_t)v37 >= v36)
    {
      v41 = v29[30];
      v42 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v37 - v41) >> 4);
      v43 = v42 + 1;
      if (v42 + 1 > 0x555555555555555)
        abort();
      v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - v41) >> 4);
      if (2 * v44 > v43)
        v43 = 2 * v44;
      if (v44 >= 0x2AAAAAAAAAAAAAALL)
        v45 = 0x555555555555555;
      else
        v45 = v43;
      if (v45)
        v46 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Triangle>>((uint64_t)(v29 + 32), v45);
      else
        v46 = 0;
      v47 = (float32x4_t *)&v46[48 * v42];
      v48 = &v46[48 * v45];
      v49 = v60;
      v34.i32[1] = v61.i32[1];
      v50 = v62;
      v47[1] = v61;
      v47[2] = v50;
      *v47 = v49;
      f32 = (_OWORD *)v47[3].f32;
      v52 = (float32x4_t *)v29[30];
      v51 = (float32x4_t *)v29[31];
      if (v51 != v52)
      {
        do
        {
          v53 = v51[-3];
          v34 = v51[-2];
          v54 = v51[-1];
          v47[-2] = v34;
          v47[-1] = v54;
          v47[-3] = v53;
          v47 -= 3;
          v51 -= 3;
        }
        while (v51 != v52);
        v51 = (float32x4_t *)v29[30];
      }
      v29[30] = v47;
      v29[31] = f32;
      v29[32] = v48;
      if (v51)
        operator delete(v51);
    }
    else
    {
      v38 = v60;
      v34.i32[1] = v61.i32[1];
      v39 = v62;
      v37[1] = v61;
      v37[2] = v39;
      *v37 = v38;
      f32 = (_OWORD *)v37[3].f32;
    }
    v29[31] = f32;
    v29 = *(_QWORD **)(a1 + 112);
  }
  v55 = *(float *)(a1 + 124);
  v34.i32[0] = *(_DWORD *)(a1 + 128);
  v56[0] = MEMORY[0x1E0C809B0];
  v56[1] = 0x40000000;
  v56[2] = ___Z18__slideWithinWorldP15__C3DConstraintP18__C3DEngineContextP18__C3DCullingSystemP9__C3DNodefDv3_fS7__block_invoke_11;
  v56[3] = &unk_1EA5A0870;
  v57 = *(_OWORD *)(a1 + 64);
  v58 = *(_QWORD *)(a1 + 80);
  v59 = v29;
  CheckPolygonContact(&v60, (float32x4_t *)(a1 + 32), (float32x4_t *)(a1 + 48), (uint64_t)v56, v55, *(double *)v34.i64);
}

void ___Z18__slideWithinWorldP15__C3DConstraintP18__C3DEngineContextP18__C3DCullingSystemP9__C3DNodefDv3_fS7__block_invoke_11(_QWORD *a1, __int128 *a2, _OWORD *a3, float a4)
{
  uint64_t v6;
  float v7;
  uint64_t v8;
  _QWORD *v9;
  _OWORD *v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  _OWORD *v14;
  float v15;
  float v16;
  _QWORD *v18;
  _OWORD *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  char *v37;
  char *v38;
  __int128 v39;
  __int128 v40;
  unint64_t v41;
  __int128 v42;
  __int128 v43;
  _OWORD *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  __int128 v53;
  __int128 v54;
  char *v55;
  char *v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  char *v61;
  __int128 v62;
  __int128 v63;

  v6 = *(_QWORD *)(a1[5] + 8);
  if (!*(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) || (v7 = *(float *)(v6 + 24), v7 > a4))
  {
    *(float *)(v6 + 24) = a4;
    *(_OWORD *)(*(_QWORD *)(a1[6] + 8) + 32) = *a3;
    *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = 1;
    v8 = a1[7];
    if (!*(_QWORD *)(v8 + 128))
      return;
    *(_QWORD *)(v8 + 248) -= 48;
    v9 = (_QWORD *)a1[7];
    v10 = (_OWORD *)v9[34];
    v11 = v9[35];
    if ((unint64_t)v10 >= v11)
    {
      v27 = v9[33];
      v28 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v10 - v27) >> 4);
      v29 = v28 + 1;
      if (v28 + 1 > 0x555555555555555)
        goto LABEL_55;
      v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v27) >> 4);
      if (2 * v30 > v29)
        v29 = 2 * v30;
      if (v30 >= 0x2AAAAAAAAAAAAAALL)
        v31 = 0x555555555555555;
      else
        v31 = v29;
      if (v31)
        v32 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Triangle>>((uint64_t)(v9 + 35), v31);
      else
        v32 = 0;
      v33 = &v32[48 * v28];
      v34 = &v32[48 * v31];
      v35 = *a2;
      v36 = a2[2];
      *((_OWORD *)v33 + 1) = a2[1];
      *((_OWORD *)v33 + 2) = v36;
      *(_OWORD *)v33 = v35;
      v14 = v33 + 48;
      v38 = (char *)v9[33];
      v37 = (char *)v9[34];
      if (v37 != v38)
      {
        do
        {
          v39 = *((_OWORD *)v37 - 3);
          v40 = *((_OWORD *)v37 - 1);
          *((_OWORD *)v33 - 2) = *((_OWORD *)v37 - 2);
          *((_OWORD *)v33 - 1) = v40;
          *((_OWORD *)v33 - 3) = v39;
          v33 -= 48;
          v37 -= 48;
        }
        while (v37 != v38);
        v37 = (char *)v9[33];
      }
      v9[33] = v33;
      v9[34] = v14;
      v9[35] = v34;
      if (v37)
        operator delete(v37);
    }
    else
    {
      v12 = *a2;
      v13 = a2[2];
      v10[1] = a2[1];
      v10[2] = v13;
      *v10 = v12;
      v14 = v10 + 3;
    }
    v9[34] = v14;
    v18 = (_QWORD *)a1[7];
    v19 = (_OWORD *)v18[22];
    v41 = v18[23];
    if ((unint64_t)v19 < v41)
      goto LABEL_34;
    v45 = v18[21];
    v46 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v19 - v45) >> 4);
    v47 = v46 + 1;
    if (v46 + 1 <= 0x555555555555555)
    {
      v48 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v41 - v45) >> 4);
      if (2 * v48 > v47)
        v47 = 2 * v48;
      if (v48 >= 0x2AAAAAAAAAAAAAALL)
        v49 = 0x555555555555555;
      else
        v49 = v47;
      if (v49)
        v50 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Triangle>>((uint64_t)(v18 + 23), v49);
      else
        v50 = 0;
      v51 = &v50[48 * v46];
      v52 = &v50[48 * v49];
      v53 = *a2;
      v54 = a2[2];
      *((_OWORD *)v51 + 1) = a2[1];
      *((_OWORD *)v51 + 2) = v54;
      *(_OWORD *)v51 = v53;
      v44 = v51 + 48;
      v56 = (char *)v18[21];
      v55 = (char *)v18[22];
      if (v55 == v56)
        goto LABEL_51;
      do
      {
        v57 = *((_OWORD *)v55 - 3);
        v58 = *((_OWORD *)v55 - 1);
        *((_OWORD *)v51 - 2) = *((_OWORD *)v55 - 2);
        *((_OWORD *)v51 - 1) = v58;
        *((_OWORD *)v51 - 3) = v57;
        v51 -= 48;
        v55 -= 48;
      }
      while (v55 != v56);
LABEL_50:
      v55 = (char *)v18[21];
LABEL_51:
      v18[21] = v51;
      v18[22] = v44;
      v18[23] = v52;
      if (v55)
        operator delete(v55);
      goto LABEL_53;
    }
LABEL_55:
    abort();
  }
  v15 = v7 + -0.001;
  v16 = v7 + 0.001;
  if (v15 < a4 && v16 > a4)
  {
    v18 = (_QWORD *)a1[7];
    v19 = (_OWORD *)v18[22];
    v20 = v18[23];
    if ((unint64_t)v19 < v20)
    {
LABEL_34:
      v42 = *a2;
      v43 = a2[2];
      v19[1] = a2[1];
      v19[2] = v43;
      *v19 = v42;
      v44 = v19 + 3;
LABEL_53:
      v18[22] = v44;
      return;
    }
    v21 = v18[21];
    v22 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v19 - v21) >> 4);
    v23 = v22 + 1;
    if (v22 + 1 <= 0x555555555555555)
    {
      v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - v21) >> 4);
      if (2 * v24 > v23)
        v23 = 2 * v24;
      if (v24 >= 0x2AAAAAAAAAAAAAALL)
        v25 = 0x555555555555555;
      else
        v25 = v23;
      if (v25)
        v26 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Triangle>>((uint64_t)(v18 + 23), v25);
      else
        v26 = 0;
      v51 = &v26[48 * v22];
      v52 = &v26[48 * v25];
      v59 = *a2;
      v60 = a2[2];
      *((_OWORD *)v51 + 1) = a2[1];
      *((_OWORD *)v51 + 2) = v60;
      *(_OWORD *)v51 = v59;
      v44 = v51 + 48;
      v61 = (char *)v18[21];
      v55 = (char *)v18[22];
      if (v55 == v61)
        goto LABEL_51;
      do
      {
        v62 = *((_OWORD *)v55 - 3);
        v63 = *((_OWORD *)v55 - 1);
        *((_OWORD *)v51 - 2) = *((_OWORD *)v55 - 2);
        *((_OWORD *)v51 - 1) = v63;
        *((_OWORD *)v51 - 3) = v62;
        v51 -= 48;
        v55 -= 48;
      }
      while (v55 != v61);
      goto LABEL_50;
    }
    goto LABEL_55;
  }
}

uint64_t C3DConstraintApplySlider(uint64_t a1, uint64_t a2, float32x4_t *a3, uint64_t a4)
{
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float32x4_t *v15;
  uint64_t v16;
  float32x4_t *v17;
  uint64_t CullingSystem;
  float32x4_t *WorldMatrix;
  uint64_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  int8x16_t v24;
  float32x4_t v25;
  BOOL v26;
  float v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t *Parent;
  simd_float4x4 *v41;
  const void *Target;
  void *TargetAddress;
  size_t v44;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  simd_float4x4 v50;

  if (!a2)
  {
    v7 = scn_default_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
      C3DKeyframeControllerSetKeyframeAtIndex_cold_3(v7, v8, v9, v10, v11, v12, v13, v14);
  }
  v15 = *(float32x4_t **)(a2 + 16);
  v49.i32[2] = 0;
  v49.i64[0] = 0;
  C3DNodeGetWorldPosition(a3, (__n128 *)&v49);
  v16 = C3DGetScene(a3);
  if (v16)
  {
    v17 = *(float32x4_t **)(a2 + 56);
    CullingSystem = C3DSceneGetCullingSystem(v16);
    WorldMatrix = C3DNodeGetWorldMatrix(a3);
    v21 = *WorldMatrix;
    v22 = WorldMatrix[1];
    v23 = WorldMatrix[2];
    v24 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v23, (int32x4_t)v23), (int8x16_t)v23, 0xCuLL), vnegq_f32(v22)), v23, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v22, (int32x4_t)v22), (int8x16_t)v22, 0xCuLL));
    v25 = vmulq_f32(*WorldMatrix, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v24, (int32x4_t)v24), v24, 0xCuLL));
    v26 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2), vaddq_f32(v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 1))).f32[0] < 0.0;
    v27 = 1.0;
    v28 = vmulq_f32(v21, v21);
    v31 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v28, 2), vaddq_f32(v28, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v28.f32, 1)));
    v29 = vmulq_f32(v22, v22);
    v30 = vmulq_f32(v23, v23);
    v31.f32[0] = sqrtf(v31.f32[0]);
    v31.i32[1] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v29, 2), vaddq_f32(v29, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.f32, 1))).f32[0]);
    v31.i32[2] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v30, 2), vaddq_f32(v30, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v30.f32, 1))).f32[0]);
    if (v26)
      v27 = -1.0;
    v32 = vmulq_n_f32(v31, v27);
    v33 = v32.f32[2];
    if (v32.f32[0] >= v32.f32[2])
      v33 = v32.f32[0];
    v32.i32[0] = v32.i32[1];
    if (v33 >= v32.f32[1])
      v32.f32[0] = v33;
    v34 = v15[9];
    v35 = vsubq_f32(vaddq_f32(WorldMatrix[3], vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v22, *(float32x2_t *)v34.f32, 1), v21, v34.f32[0]), v23, v34, 2)), v49);
    v38 = *v17;
    v36 = vaddq_f32(*v17, v35);
    v46 = v35;
    v37 = vaddq_f32(v49, v35);
    v38.f32[0] = vmuls_lane_f32(v32.f32[0], v34, 3);
    v39 = v37;
    v39.i32[3] = v38.i32[0];
    v15[12] = v39;
    if (v15[8].i64[0])
    {
      v15[15].i64[1] = v15[15].i64[0];
      v15[17].i64[0] = v15[16].i64[1];
    }
    v47 = vsubq_f32(__slideWithinWorld(v15, *(double *)v38.i64, v36, vsubq_f32(v37, v36), v20, CullingSystem, (uint64_t)a3), v46);
    *v17 = v47;
    Parent = (float32x4_t *)C3DNodeGetParent((uint64_t)a3);
    if (Parent)
      v41 = (simd_float4x4 *)C3DNodeGetWorldMatrix(Parent);
    else
      v41 = (simd_float4x4 *)MEMORY[0x1E0C83FF0];
    v50 = __invert_f4(*v41);
    v48 = vaddq_f32((float32x4_t)v50.columns[3], vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32((float32x4_t)v50.columns[1], *(float32x2_t *)v47.f32, 1), (float32x4_t)v50.columns[0], v47.f32[0]), (float32x4_t)v50.columns[2], v47, 2));
    Target = (const void *)C3DModelTargetGetTarget(a4);
    TargetAddress = (void *)C3DModelTargetGetTargetAddress(a4);
    v44 = C3DSizeOfBaseType(9);
    C3DSetValue(Target, TargetAddress, &v48, v44, 6, 0);
  }
  return 1;
}

void C3DContraintSliderAppendDebugInfo(__C3DConstraint *a1, uint64_t a2)
{
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t *var3;
  float32x4_t *var4;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t *v11;
  __CFDictionary *v12;
  float32x4_t v13;
  float32x4_t v14;
  unint64_t var0;
  float32x4_t *var6;
  float32x4_t v17;
  float32x4_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  float32x4_t v24[4];

  v4 = *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 16);
  v5 = *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 32);
  v6 = *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 48);
  v24[0] = *(float32x4_t *)MEMORY[0x1E0C83FF0];
  v24[1] = v4;
  v24[2] = v5;
  v24[3] = v6;
  v23 = xmmword_1DD007880;
  C3DAuthoringEnvironmentAppendDebugBoundingSphere(a2, a1[1].var0.var6, (uint64_t)a1[1].var1, v24, &v23);
  v22 = xmmword_1DD0078A0;
  C3DAuthoringEnvironmentAppendDebugBoundingBox(a2, (float32x4_t *)&a1[1].var2, v24, (float *)&v22);
  var3 = (float32x4_t *)a1[1].var5.var3;
  var4 = (float32x4_t *)a1[1].var5.var4;
  v21 = xmmword_1DD007880;
  while (var3 != var4)
  {
    C3DAuthoringEnvironmentAppendDebugSegment(a2, 0, (float *)&v21, 0, *var3, var3[1]);
    C3DAuthoringEnvironmentAppendDebugSegment(a2, 0, (float *)&v21, 0, var3[1], var3[2]);
    v9 = var3[2];
    v10 = *var3;
    var3 += 3;
    C3DAuthoringEnvironmentAppendDebugSegment(a2, 0, (float *)&v21, 0, v9, v10);
  }
  v11 = (float32x4_t *)a1[1].var0.var3;
  v12 = a1[1].var0.var4;
  v20 = xmmword_1DD0078A0;
  while (v11 != (float32x4_t *)v12)
  {
    C3DAuthoringEnvironmentAppendDebugSegment(a2, 0, (float *)&v20, 0, *v11, v11[1]);
    C3DAuthoringEnvironmentAppendDebugSegment(a2, 0, (float *)&v20, 0, v11[1], v11[2]);
    v13 = v11[2];
    v14 = *v11;
    v11 += 3;
    C3DAuthoringEnvironmentAppendDebugSegment(a2, 0, (float *)&v20, 0, v13, v14);
  }
  var6 = (float32x4_t *)a1[1].var6;
  var0 = a1[2].var0.var0.var0;
  v19 = xmmword_1DD007E00;
  while (var6 != (float32x4_t *)var0)
  {
    C3DAuthoringEnvironmentAppendDebugSegment(a2, 0, (float *)&v19, 0, *var6, var6[1]);
    C3DAuthoringEnvironmentAppendDebugSegment(a2, 0, (float *)&v19, 0, var6[1], var6[2]);
    v17 = var6[2];
    v18 = *var6;
    var6 += 3;
    C3DAuthoringEnvironmentAppendDebugSegment(a2, 0, (float *)&v19, 0, v17, v18);
  }
}

uint64_t C3DConstraintSliderInit(uint64_t a1, uint64_t a2, float32x4_t *a3)
{
  __n128 *v4;
  __n128 v6;

  v6.n128_u32[2] = 0;
  v6.n128_u64[0] = 0;
  C3DNodeGetWorldPosition(a3, &v6);
  v4 = (__n128 *)malloc_type_calloc(1uLL, 0x10uLL, 0x1000040451B5BE8uLL);
  *(_QWORD *)(a2 + 56) = v4;
  *v4 = v6;
  return 1;
}

const __CFString *C3DConstraintSliderCopyTargetPath(__C3DConstraint *a1)
{
  return CFSTR("transform");
}

uint64_t C3DConstraintCreateSlider()
{
  uint64_t Instance;

  if (C3DConstraintSliderGetTypeID::onceToken != -1)
    dispatch_once(&C3DConstraintSliderGetTypeID::onceToken, &__block_literal_global_41);
  Instance = C3DTypeCreateInstance_(C3DConstraintSliderGetTypeID::typeID, 0x110uLL);
  C3DConstraintInit(Instance);
  *(_QWORD *)(Instance + 160) = -1;
  *(_DWORD *)(Instance + 156) = 1065353216;
  *(_QWORD *)(Instance + 80) = C3DConstraintSliderInit;
  *(_QWORD *)(Instance + 88) = C3DConstraintApplySlider;
  *(_QWORD *)(Instance + 96) = C3DConstraintSliderCopyTargetPath;
  *(_QWORD *)(Instance + 112) = C3DContraintSliderAppendDebugInfo;
  return Instance;
}

void C3DConstaintSliderSetCategoryBitMask(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DConstaintSliderSetCategoryBitMask_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(_QWORD *)(a1 + 160) = a2;
}

void C3DConstaintSliderSetRadius(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DConstaintSliderSetCategoryBitMask_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(float *)(a1 + 156) = a2;
}

__n128 C3DConstaintSliderSetOffset(__n128 *a1, __n128 result)
{
  NSObject *v3;
  _BOOL4 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;

  if (!a1)
  {
    v12 = result;
    v3 = scn_default_log();
    v4 = os_log_type_enabled(v3, OS_LOG_TYPE_FAULT);
    result = v12;
    if (v4)
    {
      C3DConstaintSliderSetCategoryBitMask_cold_1(v3, v5, v6, v7, v8, v9, v10, v11);
      result = v12;
    }
  }
  result.n128_u32[3] = a1[9].n128_u32[3];
  a1[9] = result;
  return result;
}

void _C3DConstraintAvoidOccluderCFFinalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;

  v2 = (const void *)a1[17];
  if (v2)
  {
    CFRelease(v2);
    a1[17] = 0;
  }
  v3 = (const void *)a1[18];
  if (v3)
  {
    CFRelease(v3);
    a1[18] = 0;
  }
  _C3DConstraintCFFinalize((uint64_t)a1);
}

CFStringRef _C3DConstraintAvoidOccluderCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  const __CFAllocator *v3;

  v3 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v3, 0, CFSTR("<C3DConstraintAvoidOccluder %p>"), a1);
}

CFStringRef _C3DConstraintAvoidOccluderCFCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DConstraintAvoidOccluder %p>"), a1);
}

CFTypeRef C3DConstraintAvoidOccluderSetDelegate(uint64_t a1, CFTypeRef cf)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef result;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DConstaintSliderSetCategoryBitMask_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  result = *(CFTypeRef *)(a1 + 144);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 144) = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *(_QWORD *)(a1 + 144) = result;
  }
  return result;
}

CFTypeRef C3DConstraintAvoidOccluderSetTarget(uint64_t a1, CFTypeRef cf)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef result;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DConstaintSliderSetCategoryBitMask_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  result = *(CFTypeRef *)(a1 + 136);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 136) = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *(_QWORD *)(a1 + 136) = result;
  }
  return result;
}

void C3DConstraintAvoidOccluderSetOffset(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DConstaintSliderSetCategoryBitMask_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = 0.0001;
  if (a2 >= 0.0001)
    v12 = a2;
  *(float *)(a1 + 168) = v12;
}

BOOL C3DConstraintApplyAvoidOccluder(uint64_t a1, uint64_t a2, float32x4_t *a3, uint64_t a4)
{
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t CullingSystem;
  uint64_t v17;
  float32x4_t *v18;
  _BOOL8 v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  const void *Target;
  void *TargetAddress;
  size_t v33;
  float32x4_t v35;
  float32x4_t v36;
  _QWORD v37[4];
  float32x4_t v38;
  float32x4_t v39;
  uint64_t *v40;
  uint64_t *v41;
  _QWORD *v42;
  uint64_t v43;
  float32x4_t *v44;
  _OWORD v45[2];
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  float *v52;
  uint64_t v53;
  int v54;
  float32x4_t v55;
  float32x4_t v56;
  _QWORD v57[4];
  uint64_t v58;
  unint64_t *v59;
  _BYTE v60[80];
  float32x4_t *v61;

  if (!a2)
  {
    v7 = scn_default_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
      C3DKeyframeControllerSetKeyframeAtIndex_cold_3(v7, v8, v9, v10, v11, v12, v13, v14);
  }
  v15 = C3DGetScene(a3);
  if (!v15)
    return 0;
  CullingSystem = C3DSceneGetCullingSystem(v15);
  v17 = *(_QWORD *)(a2 + 16);
  v18 = *(float32x4_t **)(v17 + 136);
  v61 = v18;
  v19 = v18 != 0;
  if (v18)
  {
    v20 = CullingSystem;
    v58 = 0xA00000000;
    v59 = (unint64_t *)v60;
    v57[0] = 0;
    v57[1] = v57;
    v57[2] = 0x2000000000;
    v57[3] = &v58;
    if (*(_BYTE *)(v17 + 152))
    {
      C3DAppendFlattenNodeHierarchy<C3D::Array<__C3DNode *,10u,C3D::MallocAllocator>>((uint64_t)&v58, (uint64_t)v18);
      C3DAppendFlattenNodeHierarchy<C3D::Array<__C3DNode *,10u,C3D::MallocAllocator>>((uint64_t)&v58, (uint64_t)a3);
    }
    else
    {
      C3D::Array<unsigned long long,32u,C3D::MallocAllocator>::push_back<unsigned long long const&>((uint64_t)&v58, &v61);
      *(_QWORD *)&v45[0] = a3;
      C3D::Array<unsigned long long,32u,C3D::MallocAllocator>::push_back<unsigned long long const&>((uint64_t)&v58, v45);
    }
    v21 = 126 - 2 * __clz(v58);
    if ((_DWORD)v58)
      v22 = v21;
    else
      v22 = 0;
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,__C3DNode **,false>((uint64_t)v59, &v59[v58], (uint64_t)v45, v22, 1);
    v56.i32[2] = 0;
    v56.i64[0] = 0;
    C3DNodeGetWorldPosition(a3, (__n128 *)&v56);
    v55.i32[2] = 0;
    v55.i64[0] = 0;
    C3DNodeGetWorldPosition(v61, (__n128 *)&v55);
    v23 = vsubq_f32(v56, v55);
    v24 = vmulq_f32(v23, v23);
    v24.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 2), vaddq_f32(v24, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.f32, 1))).u64[0];
    v24.f32[0] = sqrtf(v24.f32[0]);
    v25 = vdivq_f32(v23, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.f32, 0));
    __asm { FMOV            V2.4S, #1.0 }
    v35 = v25;
    v51 = 0;
    v52 = (float *)&v51;
    v53 = 0x2000000000;
    v54 = 2139095039;
    v47 = 0;
    v48 = &v47;
    v49 = 0x2000000000;
    v50 = 0;
    v46 = 0;
    memset(v45, 0, sizeof(v45));
    v37[0] = MEMORY[0x1E0C809B0];
    v37[1] = 0x40000000;
    v37[2] = ___Z31C3DConstraintApplyAvoidOccluderP18__C3DEngineContextP25__C3DConstraintControllerPKvP16__C3DModelTargetf_block_invoke;
    v37[3] = &unk_1EA5A0930;
    v40 = &v47;
    v41 = &v51;
    v38 = v55;
    v39 = v56;
    v42 = v57;
    v43 = v17;
    v44 = a3;
    C3DCullingSystemQueryMake((uint64_t)v37, (uint64_t)v45);
    *(_QWORD *)&v45[0] = *(_QWORD *)(v17 + 160);
    C3DCullingSystemRayIntersect(v20);
    if (*((_BYTE *)v48 + 24))
    {
      v36 = vmlaq_n_f32(v55, v35, v52[6] - *(float *)(v17 + 168));
      Target = (const void *)C3DModelTargetGetTarget(a4);
      TargetAddress = (void *)C3DModelTargetGetTargetAddress(a4);
      v33 = C3DSizeOfBaseType(9);
      C3DSetValue(Target, TargetAddress, &v36, v33, 6, 0);
    }
    _Block_object_dispose(&v47, 8);
    _Block_object_dispose(&v51, 8);
    _Block_object_dispose(v57, 8);
    if (v59 != (unint64_t *)v60)
      free(v59);
  }
  return v19;
}

uint64_t C3DAppendFlattenNodeHierarchy<C3D::Array<__C3DNode *,10u,C3D::MallocAllocator>>(uint64_t a1, uint64_t a2)
{
  _QWORD v4[5];
  uint64_t v5;

  v5 = a2;
  C3D::Array<unsigned long long,32u,C3D::MallocAllocator>::push_back<unsigned long long const&>(a1, &v5);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___Z29C3DAppendFlattenNodeHierarchyIN3C3D5ArrayIP9__C3DNodeLj10ENS0_15MallocAllocatorEEEEvRT_S3__block_invoke;
  v4[3] = &__block_descriptor_tmp_32;
  v4[4] = a1;
  return C3DNodeApplyHierarchy(v5, (uint64_t)v4);
}

void ___Z31C3DConstraintApplyAvoidOccluderP18__C3DEngineContextP25__C3DConstraintControllerPKvP16__C3DModelTargetf_block_invoke(int8x16_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  float32x4_t *v5;
  uint64_t v6;
  BOOL v7;
  float v8;
  float32x4_t *v9;
  unsigned int *v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t *v15;
  _QWORD *v16;
  unint64_t v17;
  __C3DGeometry *Geometry;
  float32x4_t *WorldMatrix;
  simd_float4x4 v20;
  int8x16_t v21;
  float32x4_t v22;
  float v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float v29;
  float v30;
  __C3DMesh *RenderingMesh;
  const __CFArray *ElementsCount;
  uint64_t v33;
  const void *PositionSource;
  uint64_t v35;
  uint64_t v36;
  uint64_t ChannelForSourceWithSemanticAtIndex;
  NSObject *v38;
  CFIndex v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  int32x4_t v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float v48;
  const void *ElementAtIndex;
  NSObject *v50;
  uint64_t v51;
  BOOL v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  uint64_t Content;
  _QWORD v65[4];
  float32x4_t v66;
  float32x4_t v67;
  __n128 v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  float v72;
  float v73;
  _OWORD v74[3];
  uint64_t v75;
  uint8_t buf[16];
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  uint8_t v81[4];
  _QWORD v82[3];
  simd_float4x4 v83;

  *(_QWORD *)((char *)&v82[1] + 4) = *MEMORY[0x1E0C80C00];
  if (a3 >= 1)
  {
    v3 = a3;
    v4 = a2;
    v5 = (float32x4_t *)a1;
    v6 = 0;
    v7 = *(_BYTE *)(*(_QWORD *)(a1[4].i64[0] + 8) + 24) != 0;
    v8 = *(float *)(*(_QWORD *)(a1[4].i64[1] + 8) + 24);
    do
    {
      v9 = *(float32x4_t **)(v4 + 8 * v6);
      v10 = *(unsigned int **)(*(_QWORD *)(v5[5].i64[0] + 8) + 24);
      v11 = *v10;
      if (!(_DWORD)v11)
        goto LABEL_11;
      v12 = (_QWORD *)*((_QWORD *)v10 + 1);
      v13 = &v12[v11];
      do
      {
        v14 = v11 >> 1;
        v15 = &v12[v11 >> 1];
        v17 = *v15;
        v16 = v15 + 1;
        v11 += ~(v11 >> 1);
        if (v17 < (unint64_t)v9)
          v12 = v16;
        else
          v11 = v14;
      }
      while (v11);
      if (v12 == v13 || (unint64_t)v9 < *v12)
      {
LABEL_11:
        Geometry = (__C3DGeometry *)C3DNodeGetGeometry(*(_QWORD *)(v4 + 8 * v6));
        WorldMatrix = C3DNodeGetWorldMatrix(v9);
        v20.columns[0] = (simd_float4)*WorldMatrix;
        v20.columns[1] = (simd_float4)WorldMatrix[1];
        v20.columns[2] = (simd_float4)WorldMatrix[2];
        v21 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v20.columns[2], (int32x4_t)v20.columns[2]), (int8x16_t)v20.columns[2], 0xCuLL), vnegq_f32((float32x4_t)v20.columns[1])), (float32x4_t)v20.columns[2], (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v20.columns[1], (int32x4_t)v20.columns[1]), (int8x16_t)v20.columns[1], 0xCuLL));
        v22 = vmulq_f32(*WorldMatrix, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v21, (int32x4_t)v21), v21, 0xCuLL));
        if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 2), vaddq_f32(v22, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 1))).f32[0] >= 0.0)v23 = 1.0;
        else
          v23 = -1.0;
        v24 = vmulq_f32((float32x4_t)v20.columns[0], (float32x4_t)v20.columns[0]);
        v25 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 2), vaddq_f32(v24, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.f32, 1)));
        v25.f32[0] = sqrtf(v25.f32[0]);
        v26 = vmulq_f32((float32x4_t)v20.columns[1], (float32x4_t)v20.columns[1]);
        v27 = vmulq_f32((float32x4_t)v20.columns[2], (float32x4_t)v20.columns[2]);
        v25.i32[1] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v26, 2), vaddq_f32(v26, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 1))).f32[0]);
        v25.i32[2] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v27, 2), vaddq_f32(v27, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.f32, 1))).f32[0]);
        v28 = vmulq_n_f32(v25, v23);
        v29 = v28.f32[2];
        if (v28.f32[0] >= v28.f32[2])
          v29 = v28.f32[0];
        if (v29 < v28.f32[1])
          v30 = v28.f32[1];
        else
          v30 = v29;
        v20.columns[3] = (simd_float4)WorldMatrix[3];
        v83 = __invert_f4(v20);
        v59 = (float32x4_t)v83.columns[2];
        v61 = (float32x4_t)v83.columns[0];
        v57 = (float32x4_t)v83.columns[1];
        v58 = (float32x4_t)v83.columns[3];
        v55 = v5[2];
        v56 = v5[3];
        RenderingMesh = C3DGeometryGetRenderingMesh(Geometry);
        ElementsCount = C3DMeshGetElementsCount((uint64_t)RenderingMesh);
        if (ElementsCount)
        {
          v33 = (uint64_t)ElementsCount;
          PositionSource = C3DMeshGetPositionSource((uint64_t)RenderingMesh, 0);
          if (C3DMeshSourceGetCount((uint64_t)PositionSource))
          {
            v54 = v7;
            Content = C3DMeshSourceGetContent((uint64_t)PositionSource);
            v36 = v35;
            ChannelForSourceWithSemanticAtIndex = C3DMeshGetChannelForSourceWithSemanticAtIndex((uint64_t)RenderingMesh, 0, 0);
            if ((v36 & 0xFF00000000) != 0x900000000)
            {
              v38 = scn_default_log();
              if (os_log_type_enabled(v38, OS_LOG_TYPE_FAULT))
                ___Z31C3DConstraintApplyAvoidOccluderP18__C3DEngineContextP25__C3DConstraintControllerPKvP16__C3DModelTargetf_block_invoke_cold_1(v81, v82, v38);
            }
            if (v33 >= 1)
            {
              v39 = 0;
              v40 = vaddq_f32(v58, vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v57, *(float32x2_t *)v55.f32, 1), v61, v55.f32[0]), v59, v55, 2));
              v41 = vaddq_f32(v58, vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v57, *(float32x2_t *)v56.f32, 1), v61, v56.f32[0]), v59, v56, 2));
              v42 = vsubq_f32(v41, v40);
              v43 = (int32x4_t)vmulq_f32(v42, v42);
              v43.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v43, 2), vadd_f32(*(float32x2_t *)v43.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v43.i8, 1))).u32[0];
              v44 = vrsqrte_f32((float32x2_t)v43.u32[0]);
              v45 = vmul_f32(v44, vrsqrts_f32((float32x2_t)v43.u32[0], vmul_f32(v44, v44)));
              v60 = vmulq_n_f32(v42, vmul_f32(v45, vrsqrts_f32((float32x2_t)v43.u32[0], vmul_f32(v45, v45))).f32[0]);
              v62 = v40;
              v46 = vsubq_f32(v40, v41);
              v47 = vmulq_f32(v46, v46);
              v48 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v47, 2), vaddq_f32(v47, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v47.f32, 1))).f32[0]);
              do
              {
                ElementAtIndex = C3DMeshGetElementAtIndex((uint64_t)RenderingMesh, v39, 0);
                v80 = 0;
                v78 = 0u;
                v79 = 0u;
                v77 = 0u;
                C3DMeshElementGetContent((uint64_t)ElementAtIndex, ChannelForSourceWithSemanticAtIndex, (uint64_t)&v77);
                if ((BYTE10(v78) & 0xFA) != 0)
                {
                  v50 = scn_default_log();
                  if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_impl(&dword_1DCCB8000, v50, OS_LOG_TYPE_DEFAULT, "Warning: Occluder can only process triangles.", buf, 2u);
                  }
                }
                else
                {
                  v74[0] = v77;
                  v74[1] = v78;
                  v74[2] = v79;
                  v75 = v80;
                  v65[0] = MEMORY[0x1E0C809B0];
                  v65[1] = 0x40000000;
                  v65[2] = ___Z31C3DConstraintApplyAvoidOccluderP18__C3DEngineContextP25__C3DConstraintControllerPKvP16__C3DModelTargetf_block_invoke_24;
                  v65[3] = &unk_1EA5A0908;
                  v69 = Content;
                  v70 = v36;
                  v71 = v36 - 1;
                  v66 = v62;
                  v67 = v60;
                  v72 = v48;
                  v73 = v30;
                  v68 = (__n128)vextq_s8(a1[4], a1[4], 8uLL);
                  C3DIndicesContentEnumeratePrimitives((uint64_t *)v74, (uint64_t)v65, v68);
                }
                ++v39;
              }
              while (v33 != v39);
            }
            v5 = (float32x4_t *)a1;
            v4 = a2;
            v3 = a3;
            if (*(float *)(*(_QWORD *)(a1[4].i64[1] + 8) + 24) < v8)
            {
              v51 = *(_QWORD *)(a1[5].i64[1] + 144);
              if (v51)
              {
                if ((C3DAvoidOccluderConstraintDelegateShouldAvoidOccluder(v51, (uint64_t)v9, a1[6].i64[0]) & 1) != 0)
                {
                  C3DAvoidOccluderConstraintDelegateDidAvoidOccluder(*(_QWORD *)(a1[5].i64[1] + 144), (uint64_t)v9, a1[6].i64[0]);
                }
                else
                {
                  *(_BYTE *)(*(_QWORD *)(a1[4].i64[0] + 8) + 24) = v54;
                  *(float *)(*(_QWORD *)(a1[4].i64[1] + 8) + 24) = v8;
                }
              }
            }
            v7 = *(_BYTE *)(*(_QWORD *)(a1[4].i64[0] + 8) + 24) != 0;
            v8 = *(float *)(*(_QWORD *)(a1[4].i64[1] + 8) + 24);
          }
        }
      }
      ++v6;
    }
    while (v6 != v3);
  }
}

float32_t ___Z31C3DConstraintApplyAvoidOccluderP18__C3DEngineContextP25__C3DConstraintControllerPKvP16__C3DModelTargetf_block_invoke_24(float32x4_t *a1, uint64_t a2, __int32 *a3, unsigned int a4)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned __int32 v16;
  __int32 v17;
  uint64_t v18;
  float32x4_t v19;
  __int32 v20;
  uint64_t v21;
  float32x4_t v22;
  uint64_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  int32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float v36;
  float v38;
  float32x4_t v39[3];
  float32x4_t v40;

  if (a4 <= 2)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      ___Z18__slideWithinWorldP15__C3DConstraintP18__C3DEngineContextP18__C3DCullingSystemP9__C3DNodefDv3_fS7__block_invoke_9_cold_1(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  v14 = a1[5].i64[0];
  v15 = a1[5].u8[13];
  v16 = a1[6].u32[0];
  v17 = *a3;
  if (v16 < *a3)
    v17 = a1[6].i32[0];
  v18 = v14 + (v17 * v15);
  v19.i64[0] = *(_QWORD *)v18;
  v19.i32[2] = *(_DWORD *)(v18 + 8);
  v19.i32[3] = 1.0;
  if (v16 >= a3[1])
    v20 = a3[1];
  else
    v20 = a1[6].i32[0];
  v21 = v14 + (v20 * v15);
  v22.i64[0] = *(_QWORD *)v21;
  v22.i32[2] = *(_DWORD *)(v21 + 8);
  v22.i32[3] = 1.0;
  if (v16 >= a3[2])
    v16 = a3[2];
  v23 = v14 + v16 * v15;
  v24.i64[0] = *(_QWORD *)v23;
  v24.i32[2] = *(_DWORD *)(v23 + 8);
  v24.i32[3] = 1.0;
  v25 = vsubq_f32(v22, v19);
  v26 = vsubq_f32(v24, v19);
  v27 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v26, (int32x4_t)v26), (int8x16_t)v26, 0xCuLL), vnegq_f32(v25)), v26, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v25, (int32x4_t)v25), (int8x16_t)v25, 0xCuLL));
  v28 = (int32x4_t)vmulq_f32(v27, v27);
  v28.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v28.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v28, 2), *(float32x2_t *)v28.i8)).u32[0];
  *(float32x2_t *)v26.f32 = vrsqrte_f32((float32x2_t)v28.u32[0]);
  *(float32x2_t *)v26.f32 = vmul_f32(*(float32x2_t *)v26.f32, vrsqrts_f32((float32x2_t)v28.u32[0], vmul_f32(*(float32x2_t *)v26.f32, *(float32x2_t *)v26.f32)));
  v29 = vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v27, (int32x4_t)v27), (int8x16_t)v27, 0xCuLL), vmul_f32(*(float32x2_t *)v26.f32, vrsqrts_f32((float32x2_t)v28.u32[0], vmul_f32(*(float32x2_t *)v26.f32, *(float32x2_t *)v26.f32))).f32[0]);
  v30 = vmulq_f32(v19, v29);
  v31 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v30, 2), vaddq_f32(v30, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v30.f32, 1)));
  v32 = a1[2];
  v33 = a1[3];
  v34 = vmulq_f32(v32, v29);
  v35 = vmulq_f32(v33, v29);
  v36 = vdivq_f32(vsubq_f32(v31, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v34, 2), vaddq_f32(v34, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v34.f32, 1)))), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v35, 2), vaddq_f32(v35, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v35.f32, 1)))).f32[0];
  if (v36 > 0.0 && v36 < a1[6].f32[1])
  {
    v40 = vmlaq_n_f32(v32, v33, v36);
    v39[0] = v19;
    v39[1] = v22;
    v39[2] = v24;
    v19.f32[0] = v36 * a1[6].f32[2];
    if (v19.f32[0] < *(float *)(*(_QWORD *)(a1[4].i64[0] + 8) + 24))
    {
      v38 = v36;
      if (C3DTriangle3ContainsPoint(v39, &v40))
      {
        *(_BYTE *)(*(_QWORD *)(a1[4].i64[1] + 8) + 24) = 1;
        v19.f32[0] = v38 * a1[6].f32[2];
        *(_DWORD *)(*(_QWORD *)(a1[4].i64[0] + 8) + 24) = v19.i32[0];
      }
    }
  }
  return v19.f32[0];
}

const __CFString *C3DConstraintAvoidOccluderCopyTargetPath(__C3DConstraint *a1)
{
  return CFSTR("transform");
}

uint64_t C3DConstraintCreateAvoidOccluder()
{
  uint64_t Instance;

  if (C3DConstraintAvoidOccluderGetTypeID::onceToken != -1)
    dispatch_once(&C3DConstraintAvoidOccluderGetTypeID::onceToken, &__block_literal_global_21_0);
  Instance = C3DTypeCreateInstance_(C3DConstraintAvoidOccluderGetTypeID::typeID, 0xA0uLL);
  C3DConstraintInit(Instance);
  *(_QWORD *)(Instance + 160) = 1;
  *(_DWORD *)(Instance + 168) = 925353388;
  *(_BYTE *)(Instance + 152) = 1;
  *(_QWORD *)(Instance + 88) = C3DConstraintApplyAvoidOccluder;
  *(_QWORD *)(Instance + 96) = C3DConstraintAvoidOccluderCopyTargetPath;
  return Instance;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<Triangle>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(48 * a2);
}

uint64_t ___Z29C3DAppendFlattenNodeHierarchyIN3C3D5ArrayIP9__C3DNodeLj10ENS0_15MallocAllocatorEEEEvRT_S3__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = a2;
  if (a2 && C3DNodeShouldBePutInCullingSystem(a2))
    C3D::Array<unsigned long long,32u,C3D::MallocAllocator>::push_back<unsigned long long const&>(*(_QWORD *)(a1 + 32), &v4);
  return 0;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,__C3DNode **,false>(uint64_t result, unint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  char v18;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  BOOL v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;

  v8 = (unint64_t *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v20 = *(a2 - 1);
        v21 = *v9;
        if (v20 < *v9)
        {
          *v9 = v20;
          *(a2 - 1) = v21;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,__C3DNode **>(v9, v9 + 1, a2 - 1);
      case 4uLL:
        return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,__C3DNode **>(v9, v9 + 1, v9 + 2, a2 - 1);
      case 5uLL:
        return std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,__C3DNode **>(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1);
      default:
        if (v12 > 191)
        {
          if (v11 == 1)
          {
            if (v9 != a2)
              return (uint64_t)std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,__C3DNode **,__C3DNode **>(v9, a2, a2, a3);
            return result;
          }
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x401)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,__C3DNode **>(&v9[v13 >> 1], v9, a2 - 1);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,__C3DNode **>(v9, &v9[v13 >> 1], a2 - 1);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,__C3DNode **>(v9 + 1, v15 - 1, a2 - 2);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,__C3DNode **>(v9 + 2, &v9[v14 + 1], a2 - 3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,__C3DNode **>(v15 - 1, v15, &v9[v14 + 1]);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (*(v9 - 1) >= *v9)
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,__C3DNode **,std::__less<void,void> &>(v9, (uint64_t *)a2);
            v9 = (unint64_t *)result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,__C3DNode **,std::__less<void,void> &>(v9, a2);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,__C3DNode **>(v9, v17);
          v9 = v17 + 1;
          result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,__C3DNode **>(v17 + 1, a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,__C3DNode **,false>(v8, v17, a3, -v11, a5 & 1);
            v9 = v17 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        v22 = v9 + 1;
        v24 = v9 == a2 || v22 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v24)
          {
            v25 = 0;
            v26 = v9;
            do
            {
              v28 = *v26;
              v27 = v26[1];
              v26 = v22;
              if (v27 < v28)
              {
                v29 = v25;
                while (1)
                {
                  *(unint64_t *)((char *)v9 + v29 + 8) = v28;
                  if (!v29)
                    break;
                  v28 = *(unint64_t *)((char *)v9 + v29 - 8);
                  v29 -= 8;
                  if (v27 >= v28)
                  {
                    v30 = (unint64_t *)((char *)v9 + v29 + 8);
                    goto LABEL_42;
                  }
                }
                v30 = v9;
LABEL_42:
                *v30 = v27;
              }
              v22 = v26 + 1;
              v25 += 8;
            }
            while (v26 + 1 != a2);
          }
        }
        else if (!v24)
        {
          do
          {
            v32 = *v8;
            v31 = v8[1];
            v8 = v22;
            if (v31 < v32)
            {
              do
              {
                *v22 = v32;
                v32 = *(v22 - 2);
                --v22;
              }
              while (v31 < v32);
              *v22 = v31;
            }
            v22 = v8 + 1;
          }
          while (v8 + 1 != a2);
        }
        return result;
    }
  }
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,__C3DNode **>(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v3 = *a2;
  v4 = *a1;
  v5 = *a3;
  if (*a2 < *a1)
  {
    if (v5 < v3)
    {
      *a1 = v5;
      *a3 = v4;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    if (*a3 >= v4)
      return 1;
    *a2 = *a3;
    *a3 = v4;
    return 2;
  }
  if (v5 < v3)
  {
    *a2 = v5;
    *a3 = v3;
    v6 = *a1;
    if (*a2 >= *a1)
      return 1;
    *a1 = *a2;
    *a2 = v6;
    return 2;
  }
  return 0;
}

unint64_t *std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,__C3DNode **,std::__less<void,void> &>(unint64_t *a1, uint64_t *a2)
{
  unint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v2 = *a1;
  if (*a1 >= *(a2 - 1))
  {
    v5 = (uint64_t *)(a1 + 1);
    do
    {
      v3 = (unint64_t *)v5;
      if (v5 >= a2)
        break;
      ++v5;
    }
    while (v2 >= *v3);
  }
  else
  {
    v3 = a1;
    do
    {
      v4 = v3[1];
      ++v3;
    }
    while (v2 >= v4);
  }
  if (v3 < (unint64_t *)a2)
  {
    do
      v6 = *--a2;
    while (v2 < v6);
  }
  if (v3 < (unint64_t *)a2)
  {
    v7 = *v3;
    v8 = *a2;
    do
    {
      *v3 = v8;
      *a2 = v7;
      do
      {
        v9 = v3[1];
        ++v3;
        v7 = v9;
      }
      while (v2 >= v9);
      do
      {
        v10 = *--a2;
        v8 = v10;
      }
      while (v2 < v10);
    }
    while (v3 < (unint64_t *)a2);
  }
  if (v3 - 1 != a1)
    *a1 = *(v3 - 1);
  *(v3 - 1) = v2;
  return v3;
}

unint64_t *std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,__C3DNode **,std::__less<void,void> &>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v2 = 0;
  v3 = *a1;
  do
    v4 = a1[++v2];
  while (v4 < v3);
  v5 = &a1[v2];
  v6 = &a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if (v5 >= a2)
        break;
      v8 = *--a2;
    }
    while (v8 >= v3);
  }
  else
  {
    do
      v7 = *--a2;
    while (v7 >= v3);
  }
  if (v5 < a2)
  {
    v9 = *a2;
    v10 = &a1[v2];
    v11 = a2;
    do
    {
      *v10 = v9;
      *v11 = v4;
      do
      {
        v12 = v10[1];
        ++v10;
        v4 = v12;
      }
      while (v12 < v3);
      do
      {
        v13 = *--v11;
        v9 = v13;
      }
      while (v13 >= v3);
    }
    while (v10 < v11);
    v6 = v10 - 1;
  }
  if (v6 != a1)
    *a1 = *v6;
  *v6 = v3;
  return v6;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,__C3DNode **>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (v6 < *a1)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,__C3DNode **>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,__C3DNode **>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,__C3DNode **>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,__C3DNode **>(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    if (*v9 < *v8)
    {
      v14 = v11;
      while (1)
      {
        *(unint64_t *)((char *)a1 + v14) = v13;
        v15 = v14 - 8;
        if (v14 == 8)
          break;
        v13 = *(unint64_t *)((char *)a1 + v14 - 16);
        v14 -= 8;
        if (v12 >= v13)
        {
          v16 = (unint64_t *)((char *)a1 + v15);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,__C3DNode **>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  uint64_t result;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,__C3DNode **>(a1, a2, a3);
  v9 = *a3;
  if (*a4 < *a3)
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = *a2;
    if (*a3 < *a2)
    {
      *a2 = *a3;
      *a3 = v10;
      v11 = *a1;
      if (*a2 < *a1)
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,__C3DNode **>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  uint64_t result;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,__C3DNode **>(a1, a2, a3, a4);
  v11 = *a4;
  if (*a5 < *a4)
  {
    *a4 = *a5;
    *a5 = v11;
    v12 = *a3;
    if (*a4 < *a3)
    {
      *a3 = *a4;
      *a4 = v12;
      v13 = *a2;
      if (*a3 < *a2)
      {
        *a2 = *a3;
        *a3 = v13;
        v14 = *a1;
        if (*a2 < *a1)
        {
          *a1 = *a2;
          *a2 = v14;
        }
      }
    }
  }
  return result;
}

unint64_t *std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,__C3DNode **,__C3DNode **>(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  unint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,__C3DNode **>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        v15 = *v14;
        if (*v14 < *a1)
        {
          *v14 = *a1;
          *a1 = v15;
          std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,__C3DNode **>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 9)
    {
      v16 = (unint64_t)v8 >> 3;
      do
      {
        v17 = 0;
        v18 = *a1;
        v19 = a1;
        do
        {
          v20 = &v19[v17 + 1];
          v21 = (2 * v17) | 1;
          v17 = 2 * v17 + 2;
          if (v17 >= v16)
          {
            v22 = *v20;
            v17 = v21;
          }
          else
          {
            v22 = *v20;
            if (*v20 >= v20[1])
            {
              v17 = v21;
            }
            else
            {
              v22 = v20[1];
              ++v20;
            }
          }
          *v19 = v22;
          v19 = v20;
        }
        while (v17 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        if (v20 == --v6)
        {
          *v20 = v18;
        }
        else
        {
          *v20 = *v6;
          *v6 = v18;
          v23 = (char *)v20 - (char *)a1 + 8;
          if (v23 >= 9)
          {
            v24 = (((unint64_t)v23 >> 3) - 2) >> 1;
            v25 = &a1[v24];
            v26 = *v25;
            v27 = *v20;
            if (*v25 < *v20)
            {
              do
              {
                *v20 = v26;
                v20 = v25;
                if (!v24)
                  break;
                v24 = (v24 - 1) >> 1;
                v25 = &a1[v24];
                v26 = *v25;
              }
              while (*v25 < v27);
              *v20 = v27;
            }
          }
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,__C3DNode **>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      v6 = v4 >> 2;
      v7 = (v4 >> 2) + 1;
      v8 = (unint64_t *)(result + 8 * v7);
      v9 = v6 + 2;
      if (v9 >= a3)
      {
        v10 = *v8;
      }
      else
      {
        v10 = *v8;
        if (*v8 < v8[1])
        {
          v10 = v8[1];
          ++v8;
          v7 = v9;
        }
      }
      v11 = *a4;
      if (v10 >= *a4)
      {
        do
        {
          *a4 = v10;
          a4 = v8;
          if (v5 < v7)
            break;
          v12 = (2 * v7) | 1;
          v8 = (unint64_t *)(result + 8 * v12);
          v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            v10 = *v8;
            v7 = v12;
          }
          else
          {
            v10 = *v8;
            if (*v8 >= v8[1])
            {
              v7 = v12;
            }
            else
            {
              v10 = v8[1];
              ++v8;
            }
          }
        }
        while (v10 >= v11);
        *a4 = v11;
      }
    }
  }
  return result;
}

uint64_t _loadPVRTC(uint64_t a1)
{
  NSObject *v2;
  const __CFData *Data;
  const __CFData *v4;
  const UInt8 *BytePtr;
  const UInt8 *v6;
  int v7;
  int v8;
  int v9;
  uint64_t TextureRawData;
  uint64_t v11;
  int v12;
  int v13;
  char v14;
  uint64_t v15;
  uint64_t URL;
  int v18;
  unsigned int v19;
  unsigned int v20;
  const UInt8 *v21;
  char v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  CFDataRef v31;
  const __CFData *v32;
  uint32x2_t v33;

  kdebug_trace();
  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      _loadKTX_cold_3(v2);
  }
  Data = (const __CFData *)C3DImageGetData(a1);
  if (Data)
  {
    v4 = Data;
    CFRetain(Data);
  }
  else
  {
    URL = C3DImageGetURL(a1);
    if (!URL || (v4 = (const __CFData *)C3DCreateDataWithContentOfURL(URL, 0)) == 0)
    {
      v15 = 0;
      goto LABEL_23;
    }
  }
  if (CFDataGetLength(v4) >= 52)
  {
    BytePtr = CFDataGetBytePtr(v4);
    if (*((_DWORD *)BytePtr + 11) == 559044176)
    {
      v6 = BytePtr;
      v7 = *((_DWORD *)BytePtr + 4);
      if ((v7 & 0xFE) == 0x18)
      {
        v8 = *((_DWORD *)BytePtr + 4);
        _C3DImageDeleteTextureRawDataIfNeeded(a1);
        v9 = v7 & 0x8000 | (*((_DWORD *)v6 + 10) != 0);
        v33 = *(uint32x2_t *)(v6 + 4);
        _C3DImageCreateTextureRawData(a1, 1, v9 != 0, COERCE_DOUBLE(vrev64_s32((int32x2_t)vcvt_f32_u32(v33))));
        TextureRawData = C3DImageGetTextureRawData(a1);
        v11 = TextureRawData;
        if (v8 == 24)
        {
          if (v9)
            v18 = 35843;
          else
            v18 = 35841;
          *(_DWORD *)(TextureRawData + 24) = v18;
          if (v9)
            v13 = 164;
          else
            v13 = 160;
          v14 = 8;
        }
        else
        {
          if (v8 != 25)
            goto LABEL_32;
          if (v9)
            v12 = 35842;
          else
            v12 = 35840;
          *(_DWORD *)(TextureRawData + 24) = v12;
          if (v9)
            v13 = 166;
          else
            v13 = 162;
          v14 = 4;
        }
        *(_DWORD *)(TextureRawData + 36) = v13;
        *(_BYTE *)(TextureRawData + 7) = v14;
        *(_BYTE *)(TextureRawData + 8) = 4;
LABEL_32:
        v19 = *((_DWORD *)v6 + 5);
        *(_BYTE *)(TextureRawData + 4) = *((_DWORD *)v6 + 6);
        v15 = 1;
        if (v19)
        {
          v32 = v4;
          v20 = 0;
          v21 = v6 + 52;
          if (v8 == 25)
            v22 = 2;
          else
            v22 = 1;
          v23 = v33.i32[0];
          v24 = v33.u32[1];
          do
          {
            v25 = *(unsigned __int8 *)(v11 + 7);
            v26 = *(unsigned __int8 *)(v11 + 8);
            v27 = v26 * v25;
            v28 = v23 / v26;
            v29 = v24 / v25;
            if (v29 <= 2)
              v29 = 2;
            if (v28 <= 2)
              v28 = 2;
            v30 = v29 * v28 * ((v27 << v22) >> 3);
            v31 = CFDataCreate(0, &v21[v20], v30);
            CFArrayAppendValue(*(CFMutableArrayRef *)(v11 + 40), v31);
            CFRelease(v31);
            v20 += v30;
            if (v24 <= 1)
              v24 = 1;
            else
              v24 >>= 1;
            if (v23 <= 1)
              v23 = 1;
            else
              v23 >>= 1;
          }
          while (v20 < v19);
          v15 = 1;
          v4 = v32;
        }
        goto LABEL_19;
      }
    }
  }
  v15 = 0;
LABEL_19:
  CFRelease(v4);
LABEL_23:
  kdebug_trace();
  return v15;
}

C3D::RenderPass *C3D::MBFinalBlurPass::MBFinalBlurPass(C3D::RenderPass *a1, C3D::RenderGraph *a2, C3D::Pass *a3, uint64_t a4)
{
  C3D::RenderPass *result;

  result = C3D::RenderPass::RenderPass(a1, a2, a3);
  *(_QWORD *)result = off_1EA599388;
  *((_QWORD *)result + 30) = a4;
  return result;
}

const char *C3D::MBFinalBlurPass::name(C3D::MBFinalBlurPass *this)
{
  return "MBFinalBlurPass";
}

double C3D::MBFinalBlurPass::setup(C3D::MBFinalBlurPass *this)
{
  C3D::MBFinalBlurPass *v1;
  uint64_t v2;
  C3D::Pass *v3;
  double result;
  __int128 v5;
  int v6;

  v1 = this;
  C3D::Pass::setInputCount(this, 3u);
  C3D::Pass::setOutputCount(v1, 1u);
  *(_QWORD *)(C3D::PassDescriptor::inputAtIndex((C3D::MBFinalBlurPass *)((char *)v1 + 32), 0) + 8) = "COLOR";
  *(_QWORD *)(C3D::PassDescriptor::inputAtIndex((C3D::MBFinalBlurPass *)((char *)v1 + 32), 1u) + 8) = "VELOCITY";
  *(_QWORD *)(C3D::PassDescriptor::inputAtIndex((C3D::MBFinalBlurPass *)((char *)v1 + 32), 2u) + 8) = "MB-TileMax";
  v2 = C3D::PassDescriptor::outputAtIndex((C3D::MBFinalBlurPass *)((char *)v1 + 32), 0);
  *(_QWORD *)(v2 + 8) = "COLOR";
  *(_BYTE *)(v2 + 65) = 0;
  do
  {
    v3 = v1;
    v1 = (C3D::MBFinalBlurPass *)*((_QWORD *)v1 + 1);
  }
  while (v1);
  C3D::Pass::parentColorDesc(v3, (uint64_t)&v5);
  result = *(double *)&v5;
  *(_OWORD *)(v2 + 16) = v5;
  *(_DWORD *)(v2 + 32) = v6;
  return result;
}

void C3D::MBFinalBlurPass::compile(C3D::MBFinalBlurPass *this)
{
  uint64_t RenderContext;
  void *v3;
  C3D::RenderGraphResourceManager *v4;
  C3D::PassDescriptor *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _OWORD v24[6];
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  RenderContext = C3DEngineContextGetRenderContext(*((_QWORD *)this + 2));
  v3 = (void *)-[SCNMTLRenderContext resourceManager](RenderContext);
  v4 = *(C3D::RenderGraphResourceManager **)(*((_QWORD *)this + 3) + 128);
  v5 = (C3D::MBFinalBlurPass *)((char *)this + 32);
  v6 = *(unsigned __int16 *)(C3D::PassDescriptor::outputAtIndex((C3D::MBFinalBlurPass *)((char *)this + 32), 0) + 28);
  v7 = 0xC6A4A7935BD1E995
     * ((*(uint64_t (**)(C3D::MBFinalBlurPass *))(*(_QWORD *)this + 64))(this) ^ 0x35253C9ADE8F4CA8 ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v6) ^ ((0xC6A4A7935BD1E995 * v6) >> 47))));
  v8 = (0xC6A4A7935BD1E995 * (v7 ^ (v7 >> 47))) ^ ((0xC6A4A7935BD1E995 * (v7 ^ (v7 >> 47))) >> 47);
  v9 = C3D::RenderGraphResourceManager::get(v4, v8);
  *((_QWORD *)this + 31) = v9;
  if (!v9)
  {
    v10 = operator new();
    *(_OWORD *)v10 = 0u;
    *(_OWORD *)(v10 + 16) = 0u;
    *(_QWORD *)(v10 + 24) = 0;
    *(_QWORD *)(v10 + 32) = 0;
    *(_QWORD *)v10 = &off_1EA59A2D8;
    *(_QWORD *)(v10 + 16) = 0;
    *((_QWORD *)this + 31) = v10;
    C3D::RenderGraphResourceManager::set((uint64_t)v4, v8, v10);
    v11 = *((_QWORD *)this + 31);
    memset(v24, 0, sizeof(v24));
    v25 = 0;
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    v33 = 0u;
    v34 = 0u;
    v35 = 0u;
    v36 = 0u;
    v37 = 0u;
    v38 = 0u;
    v39 = 0u;
    v40 = 0u;
    v41 = 0;
    v26 = objc_msgSend((id)-[SCNMTLResourceManager libraryManager]((uint64_t)v3), "frameworkLibrary");
    *(_QWORD *)&v27 = *(unsigned __int16 *)(C3D::PassDescriptor::outputAtIndex((C3D::MBFinalBlurPass *)((char *)this + 32), 0)+ 28);
    *((_QWORD *)&v38 + 1) = CFSTR("scn_draw_fullscreen_triangle_VR_pos_uv_uvNorm_vertex");
    *(_QWORD *)&v39 = CFSTR("scn_motionblur_blur");
    v12 = objc_msgSend(v3, "newRenderPipelineStateWithDesc:", v24);
    v13 = *(void **)(v11 + 16);
    if (v13 != (void *)v12)
    {
      v14 = v12;
      if (v13)

      *(_QWORD *)(v11 + 16) = v14;
    }
    v15 = *((_QWORD *)this + 31);
    *((_QWORD *)&v20 + 1) = objc_msgSend((id)-[SCNMTLResourceManager libraryManager]((uint64_t)v3), "frameworkLibrary", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0);
    *(_QWORD *)&v21 = *(unsigned __int16 *)(C3D::PassDescriptor::outputAtIndex(v5, 0) + 28);
    *((_QWORD *)&v22 + 1) = CFSTR("scn_draw_fullscreen_triangle_VR_pos_uv_uvNorm_vertex");
    *(_QWORD *)&v23 = CFSTR("scn_motionblur_blur_resize");
    v16 = objc_msgSend(v3, "newRenderPipelineStateWithDesc:", &v19);
    v17 = *(void **)(v15 + 24);
    if (v17 != (void *)v16)
    {
      v18 = v16;
      if (v17)

      *(_QWORD *)(v15 + 24) = v18;
    }
  }
}

uint64_t C3D::MBFinalBlurPass::execute(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  C3D::PassDescriptor *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  void **v11;
  void **v12;
  uint64_t result;
  __int128 v14;

  v3 = *a2;
  v14 = xmmword_1DD009440;
  v4 = (C3D::PassDescriptor *)(a1 + 4);
  v5 = C3D::PassDescriptor::outputAtIndex((C3D::PassDescriptor *)(a1 + 4), 0);
  v6 = a1[31];
  if (*(_DWORD *)(v6 + 32) == *(unsigned __int16 *)(v5 + 16)
    && (v7 = C3D::PassDescriptor::outputAtIndex(v4, 0),
        v6 = a1[31],
        *(_DWORD *)(v6 + 36) == *(unsigned __int16 *)(v7 + 18)))
  {
    v8 = v6 + 16;
  }
  else
  {
    v8 = v6 + 24;
  }
  v9 = objc_msgSend((id)C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(v8), "state", v14);
  if (*(_QWORD *)(v3 + 3376) != v9)
  {
    *(_QWORD *)(v3 + 3376) = v9;
    objc_msgSend(*(id *)(v3 + 3392), "setRenderPipelineState:", v9);
  }
  SCNMTLRenderCommandEncoder::setVertexBytes((SCNMTLRenderCommandEncoder *)v3, &v14, 0x10uLL, 0);
  SCNMTLRenderCommandEncoder::setFragmentBuffer(v3, *(_QWORD *)(a1[30] + 40), *(_QWORD *)(a1[30] + 48), 0);
  v10 = C3D::Pass::inputTextureAtIndex((C3D::Pass *)a1, 1u);
  SCNMTLRenderCommandEncoder::setFragmentTexture(v3, v10, 0);
  v11 = C3D::Pass::inputTextureAtIndex((C3D::Pass *)a1, 2u);
  SCNMTLRenderCommandEncoder::setFragmentTexture(v3, v11, 1uLL);
  v12 = C3D::Pass::inputTextureAtIndex((C3D::Pass *)a1, 0);
  SCNMTLRenderCommandEncoder::setFragmentTexture(v3, v12, 2uLL);
  SCNMTLRenderCommandEncoder::drawFullScreenTriangle((SCNMTLRenderCommandEncoder *)v3);
  *(_DWORD *)(a1[31] + 32) = *(unsigned __int16 *)(C3D::PassDescriptor::outputAtIndex(v4, 0) + 16);
  result = C3D::PassDescriptor::outputAtIndex(v4, 0);
  *(_DWORD *)(a1[31] + 36) = *(unsigned __int16 *)(result + 18);
  return result;
}

void C3D::MBFinalBlurPassResource::~MBFinalBlurPassResource(C3D::MBFinalBlurPassResource *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1EA59A2D8;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)

  v3 = (void *)*((_QWORD *)this + 2);
  if (v3)

}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1EA59A2D8;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)

  v3 = (void *)*((_QWORD *)this + 2);
  if (v3)

  JUMPOUT(0x1DF0D41C0);
}

uint64_t C3DDeformerStackCreate(uint64_t a1)
{
  uint64_t Instance;
  uint64_t v3;
  const void *v4;
  const void *Geometry;

  if (C3DDeformerStackGetTypeID_onceToken != -1)
    dispatch_once(&C3DDeformerStackGetTypeID_onceToken, &__block_literal_global_42);
  Instance = C3DTypeCreateInstance_(C3DDeformerStackGetTypeID_typeID, 0x30uLL);
  *(_QWORD *)(Instance + 16) = a1;
  v3 = *(_QWORD *)(Instance + 24);
  if (v3 != C3DNodeGetGeometry(a1))
  {
    v4 = *(const void **)(Instance + 24);
    if (v4)
    {
      CFRelease(v4);
      *(_QWORD *)(Instance + 24) = 0;
    }
    Geometry = (const void *)C3DNodeGetGeometry(a1);
    if (Geometry)
      Geometry = CFRetain(Geometry);
    *(_QWORD *)(Instance + 24) = Geometry;
  }
  return Instance;
}

uint64_t C3DDeformerStackCreateCopy(_QWORD *a1, uint64_t a2)
{
  uint64_t Instance;
  CFTypeRef v5;
  CFTypeRef v6;
  CFTypeRef v7;
  CFTypeRef v8;
  CFTypeRef v9;
  CFTypeRef v10;
  CFTypeRef v11;
  CFTypeRef v12;
  CFTypeRef v13;
  CFTypeRef v14;

  if (C3DDeformerStackGetTypeID_onceToken != -1)
    dispatch_once(&C3DDeformerStackGetTypeID_onceToken, &__block_literal_global_42);
  Instance = C3DTypeCreateInstance_(C3DDeformerStackGetTypeID_typeID, 0x30uLL);
  *(_QWORD *)(Instance + 16) = a2;
  v5 = *(CFTypeRef *)(Instance + 24);
  v6 = (CFTypeRef)a1[3];
  if (v5 != v6)
  {
    if (v5)
    {
      CFRelease(v5);
      *(_QWORD *)(Instance + 24) = 0;
      v6 = (CFTypeRef)a1[3];
    }
    if (v6)
      v6 = CFRetain(v6);
    *(_QWORD *)(Instance + 24) = v6;
  }
  v7 = *(CFTypeRef *)(Instance + 32);
  v8 = (CFTypeRef)a1[4];
  if (v7 != v8)
  {
    if (v7)
    {
      CFRelease(*(CFTypeRef *)(Instance + 32));
      *(_QWORD *)(Instance + 32) = 0;
      v8 = (CFTypeRef)a1[4];
    }
    if (v8)
      v8 = CFRetain(v8);
    *(_QWORD *)(Instance + 32) = v8;
  }
  v9 = *(CFTypeRef *)(Instance + 40);
  v10 = (CFTypeRef)a1[5];
  if (v9 != v10)
  {
    if (v9)
    {
      CFRelease(*(CFTypeRef *)(Instance + 40));
      *(_QWORD *)(Instance + 40) = 0;
      v10 = (CFTypeRef)a1[5];
    }
    if (v10)
      v10 = CFRetain(v10);
    *(_QWORD *)(Instance + 40) = v10;
  }
  v11 = *(CFTypeRef *)(Instance + 48);
  v12 = (CFTypeRef)a1[6];
  if (v11 != v12)
  {
    if (v11)
    {
      CFRelease(*(CFTypeRef *)(Instance + 48));
      *(_QWORD *)(Instance + 48) = 0;
      v12 = (CFTypeRef)a1[6];
    }
    if (v12)
      v12 = CFRetain(v12);
    *(_QWORD *)(Instance + 48) = v12;
  }
  v13 = *(CFTypeRef *)(Instance + 56);
  v14 = (CFTypeRef)a1[7];
  if (v13 != v14)
  {
    if (v13)
    {
      CFRelease(*(CFTypeRef *)(Instance + 56));
      *(_QWORD *)(Instance + 56) = 0;
      v14 = (CFTypeRef)a1[7];
    }
    if (v14)
      v14 = CFRetain(v14);
    *(_QWORD *)(Instance + 56) = v14;
  }
  return Instance;
}

BOOL C3DDeformerStackIsEmpty(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      _C3DStackCFFinalize_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return !a1[4] && !a1[5] && !a1[6] && a1[7] == 0;
}

BOOL C3DDeformerStackWantsGPU(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      _C3DStackCFFinalize_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  if (C3DDeformerStackIsEmpty((_QWORD *)a1))
    return 0;
  if (*(_QWORD *)(a1 + 32))
    return 1;
  v11 = *(_QWORD *)(a1 + 40);
  if (!v11)
    return 1;
  return C3DSkinnerGetEffectiveCalculationMode(v11, *(__C3DGeometry **)(a1 + 24)) == 2;
}

uint64_t C3DDeformerStackGetBaseGeometry(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      _C3DStackCFFinalize_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 24);
}

void C3DDeformerStackSetBaseGeometry(_QWORD *a1, __C3DGeometry *cf)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __C3DGeometry *v12;
  CFTypeRef v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t SharedInstance;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      _C3DStackCFFinalize_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = (__C3DGeometry *)a1[3];
  if (v12 != cf)
  {
    if (v12)
    {
      CFRelease(v12);
      a1[3] = 0;
    }
    if (cf)
      v13 = CFRetain(cf);
    else
      v13 = 0;
    a1[3] = v13;
    v14 = a1[4];
    if (v14)
      C3DMorpherSetBaseGeometry(v14, cf);
    v15 = a1[5];
    if (v15)
      C3DSkinnerInputGeometryDidChange(v15);
    SharedInstance = C3DNotificationCenterGetSharedInstance();
    C3DNotificationCenterPostNotification(SharedInstance, CFSTR("kC3DNotificationDeformerStackDidChange"), a1, 0, 1u);
  }
}

uint64_t C3DDeformerStackGetMorpher(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      _C3DStackCFFinalize_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 32);
}

void C3DDeformerStackSetMorpher(uint64_t a1, CFTypeRef cf)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef v12;
  uint64_t v13;
  uint64_t OverrideMaterial;
  uint64_t SharedInstance;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      _C3DStackCFFinalize_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = *(CFTypeRef *)(a1 + 32);
  if (v12 != cf)
  {
    if (v12)
    {
      CFRelease(v12);
      *(_QWORD *)(a1 + 32) = 0;
    }
    if (cf)
    {
      *(_QWORD *)(a1 + 32) = CFRetain(cf);
      C3DMorpherSetBaseGeometry((uint64_t)cf, *(__C3DGeometry **)(a1 + 24));
    }
    else
    {
      *(_QWORD *)(a1 + 32) = 0;
    }
    v13 = *(_QWORD *)(a1 + 40);
    if (v13)
    {
      C3DSkinnerInputGeometryDidChange(*(_QWORD *)(a1 + 40));
      OverrideMaterial = C3DGeometryGetOverrideMaterial(v13);
      if (OverrideMaterial)
        C3DSkinSetInfluencingMorpher(OverrideMaterial, cf);
    }
    SharedInstance = C3DNotificationCenterGetSharedInstance();
    C3DNotificationCenterPostNotification(SharedInstance, CFSTR("kC3DNotificationDeformerStackDidChange"), (const void *)a1, 0, 1u);
  }
}

uint64_t C3DDeformerStackGetSkinner(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      _C3DStackCFFinalize_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 40);
}

void C3DDeformerStackSetSkinner(_QWORD *a1, CFTypeRef cf)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef v12;
  const void *v13;
  uint64_t OverrideMaterial;
  uint64_t SharedInstance;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      _C3DStackCFFinalize_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = (CFTypeRef)a1[5];
  if (v12 != cf)
  {
    if (v12)
    {
      CFRelease(v12);
      a1[5] = 0;
    }
    if (cf)
    {
      a1[5] = CFRetain(cf);
      C3DSkinnerInputGeometryDidChange((uint64_t)cf);
      v13 = (const void *)a1[4];
      if (v13)
      {
        OverrideMaterial = C3DGeometryGetOverrideMaterial((uint64_t)cf);
        if (OverrideMaterial)
          C3DSkinSetInfluencingMorpher(OverrideMaterial, v13);
      }
    }
    else
    {
      a1[5] = 0;
    }
    SharedInstance = C3DNotificationCenterGetSharedInstance();
    C3DNotificationCenterPostNotification(SharedInstance, CFSTR("kC3DNotificationDeformerStackDidChange"), a1, 0, 1u);
  }
}

uint64_t C3DDeformerStackGetPostMorphingDeformers(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      _C3DStackCFFinalize_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 48);
}

void C3DDeformerStackSetPostMorphingDeformers(uint64_t *a1, const __CFArray *cf)
{
  const __CFArray *v2;
  const __CFArray *v4;
  CFTypeRef v5;
  uint64_t SharedInstance;

  v2 = cf;
  if (cf && !CFArrayGetCount(cf))
    v2 = 0;
  v4 = (const __CFArray *)a1[6];
  if (v4 != v2)
  {
    if (v4)
    {
      CFRelease(v4);
      a1[6] = 0;
    }
    if (v2)
      v5 = CFRetain(v2);
    else
      v5 = 0;
    a1[6] = (uint64_t)v5;
    SharedInstance = C3DNotificationCenterGetSharedInstance();
    C3DNotificationCenterPostNotification(SharedInstance, CFSTR("kC3DNotificationDeformerStackDidChange"), a1, 0, 1u);
    C3DNodeBoundingBoxDidUpdate(a1[2]);
  }
}

uint64_t C3DDeformerStackGetPostSkinningDeformers(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      _C3DStackCFFinalize_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 56);
}

void C3DDeformerStackSetPostSkinningDeformers(uint64_t *a1, const __CFArray *cf)
{
  const __CFArray *v2;
  const __CFArray *v4;
  CFTypeRef v5;
  uint64_t SharedInstance;

  v2 = cf;
  if (cf && !CFArrayGetCount(cf))
    v2 = 0;
  v4 = (const __CFArray *)a1[7];
  if (v4 != v2)
  {
    if (v4)
    {
      CFRelease(v4);
      a1[7] = 0;
    }
    if (v2)
      v5 = CFRetain(v2);
    else
      v5 = 0;
    a1[7] = (uint64_t)v5;
    SharedInstance = C3DNotificationCenterGetSharedInstance();
    C3DNotificationCenterPostNotification(SharedInstance, CFSTR("kC3DNotificationDeformerStackDidChange"), a1, 0, 1u);
    C3DNodeBoundingBoxDidUpdate(a1[2]);
  }
}

void C3DDeformerStackEnumerateDependencyStacks(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const __CFArray *v5;
  const __CFArray *v6;
  _QWORD v7[5];
  _QWORD v8[5];

  v4 = MEMORY[0x1E0C809B0];
  v5 = *(const __CFArray **)(a1 + 48);
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __C3DDeformerStackEnumerateDependencyStacks_block_invoke;
  v8[3] = &unk_1EA5A0978;
  v8[4] = a2;
  C3DCFArrayApplyBlock(v5, (uint64_t)v8);
  v6 = *(const __CFArray **)(a1 + 56);
  v7[0] = v4;
  v7[1] = 3221225472;
  v7[2] = __C3DDeformerStackEnumerateDependencyStacks_block_invoke_2;
  v7[3] = &unk_1EA5A0978;
  v7[4] = a2;
  C3DCFArrayApplyBlock(v6, (uint64_t)v7);
}

BOOL C3DDeformerStackGetLocalBoundingBox(uint64_t a1, uint64_t a2)
{
  const __CFArray *v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 v7;
  const __CFArray *v9;
  _QWORD v10[6];
  _QWORD v11[6];
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;

  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  v15 = 0;
  v4 = *(const __CFArray **)(a1 + 56);
  v5 = MEMORY[0x1E0C809B0];
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __C3DDeformerStackGetLocalBoundingBox_block_invoke;
  v11[3] = &unk_1EA5A09A0;
  v11[4] = &v12;
  v11[5] = a2;
  C3DCFArrayApplyBlock(v4, (uint64_t)v11);
  if (!*((_BYTE *)v13 + 24))
  {
    v6 = *(_QWORD *)(a1 + 40);
    if (!v6)
    {
      v9 = *(const __CFArray **)(a1 + 48);
      v10[0] = v5;
      v10[1] = 3221225472;
      v10[2] = __C3DDeformerStackGetLocalBoundingBox_block_invoke_2;
      v10[3] = &unk_1EA5A09A0;
      v10[4] = &v12;
      v10[5] = a2;
      C3DCFArrayApplyBlock(v9, (uint64_t)v10);
      v7 = *((_BYTE *)v13 + 24) != 0;
      goto LABEL_5;
    }
    C3DSkinnerGetBoundingBox(v6, *(float32x4_t **)(a1 + 16), a2);
  }
  v7 = 1;
LABEL_5:
  _Block_object_dispose(&v12, 8);
  return v7;
}

void sub_1DCDC8A1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void _C3DDeformerStackCFFinalize(_QWORD *a1)
{
  uint64_t SharedInstance;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;

  SharedInstance = C3DNotificationCenterGetSharedInstance();
  C3DNotificationCenterPostNotification(SharedInstance, CFSTR("kC3DNotificationDeformerStackWillDie"), a1, 0, 1u);
  v3 = (const void *)a1[3];
  if (v3)
  {
    CFRelease(v3);
    a1[3] = 0;
  }
  v4 = (const void *)a1[4];
  if (v4)
  {
    CFRelease(v4);
    a1[4] = 0;
  }
  v5 = (const void *)a1[5];
  if (v5)
  {
    CFRelease(v5);
    a1[5] = 0;
  }
  v6 = (const void *)a1[6];
  if (v6)
  {
    CFRelease(v6);
    a1[6] = 0;
  }
  v7 = (const void *)a1[7];
  if (v7)
  {
    CFRelease(v7);
    a1[7] = 0;
  }
}

CFStringRef _C3DDeformerStackCFCopyDebugDescription(_QWORD *a1)
{
  _BOOL4 IsEmpty;
  const __CFAllocator *v3;
  __CFString *Mutable;
  const __CFArray *v6;
  uint64_t v7;
  const __CFArray *v8;
  _QWORD v9[5];
  _QWORD v10[5];

  IsEmpty = C3DDeformerStackIsEmpty(a1);
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (IsEmpty)
    return CFStringCreateWithFormat(v3, 0, CFSTR("<C3DDeformerStack %p>"), a1);
  Mutable = CFStringCreateMutable(v3, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<C3DDeformerStack %p (geometry: %p)\n"), a1, a1[3]);
  if (a1[4])
    CFStringAppendFormat(Mutable, 0, CFSTR("  morpher: %p\n"), a1[4]);
  v6 = (const __CFArray *)a1[6];
  v7 = MEMORY[0x1E0C809B0];
  if (v6)
  {
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = ___C3DDeformerStackCFCopyDebugDescription_block_invoke;
    v10[3] = &__block_descriptor_40_e13_v24__0q8r_v16l;
    v10[4] = Mutable;
    C3DCFArrayApplyBlock(v6, (uint64_t)v10);
  }
  if (a1[5])
    CFStringAppendFormat(Mutable, 0, CFSTR("  skinner: %p\n"), a1[5]);
  v8 = (const __CFArray *)a1[7];
  if (v8)
  {
    v9[0] = v7;
    v9[1] = 3221225472;
    v9[2] = ___C3DDeformerStackCFCopyDebugDescription_block_invoke_2;
    v9[3] = &__block_descriptor_40_e13_v24__0q8r_v16l;
    v9[4] = Mutable;
    C3DCFArrayApplyBlock(v8, (uint64_t)v9);
  }
  CFStringAppend(Mutable, CFSTR(">"));
  return Mutable;
}

void C3D::BloomDownSamplePass::BloomDownSamplePass(C3D::CustomPass *a1, C3D::RenderGraph *a2, C3D::Pass *a3, uint64_t a4)
{
  _QWORD *v5;

  C3D::CustomPass::CustomPass(a1, a2, a3, 0);
  *v5 = off_1EA599AD8;
  v5[16] = a4;
}

const char *C3D::BloomDownSamplePass::name(C3D::BloomDownSamplePass *this)
{
  return "BloomDownSamplePass";
}

uint64_t C3D::BloomDownSamplePass::setup(C3D::BloomDownSamplePass *this)
{
  C3D::Pass *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v1 = this;
  C3D::Pass::setInputCount(this, 1u);
  C3D::Pass::setOutputCount(v1, 1u);
  v1 = (C3D::Pass *)((char *)v1 + 32);
  v2 = C3D::PassDescriptor::inputAtIndex(v1, 0);
  *(_WORD *)(v2 + 66) |= 4u;
  v3 = C3D::PassDescriptor::inputAtIndex(v1, 0);
  *(_WORD *)(v3 + 66) |= 0x80u;
  result = C3D::PassDescriptor::inputAtIndex(v1, 0);
  *(_WORD *)(result + 66) = *(_WORD *)(result + 66) & 0xFFFC | 1;
  return result;
}

void C3D::BloomDownSamplePass::compile(C3D::BloomDownSamplePass *this)
{
  uint64_t RenderContext;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  C3D::RenderGraphResourceManager *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _OWORD v14[6];
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  RenderContext = C3DEngineContextGetRenderContext(*((_QWORD *)this + 2));
  v3 = (void *)-[SCNMTLRenderContext resourceManager](RenderContext);
  v4 = objc_msgSend((id)-[SCNMTLResourceManager libraryManager]((uint64_t)v3), "frameworkLibrary");
  v5 = (*(uint64_t (**)(C3D::BloomDownSamplePass *))(*(_QWORD *)this + 64))(this);
  v6 = *(C3D::RenderGraphResourceManager **)(*((_QWORD *)this + 3) + 128);
  v7 = C3D::RenderGraphResourceManager::get(v6, v5);
  *((_QWORD *)this + 17) = v7;
  if (!v7)
  {
    v8 = (_QWORD *)operator new();
    v8[1] = 0;
    v8[2] = 0;
    *v8 = &off_1EA59A438;
    *((_QWORD *)this + 17) = v8;
    C3D::RenderGraphResourceManager::set((uint64_t)v6, v5, (uint64_t)v8);
    v9 = C3D::PassDescriptor::outputAtIndex((C3D::BloomDownSamplePass *)((char *)this + 32), 0);
    v10 = *((_QWORD *)this + 17);
    memset(v14, 0, sizeof(v14));
    v15 = 0;
    v17 = 0u;
    v18 = 0u;
    v19 = 0u;
    v20 = 0u;
    v21 = 0u;
    v22 = 0u;
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    v30 = 0u;
    v31 = 0;
    v16 = v4;
    *(_QWORD *)&v17 = *(unsigned __int16 *)(v9 + 28);
    *((_QWORD *)&v28 + 1) = CFSTR("scn_draw_fullscreen_triangle_vertex");
    *(_QWORD *)&v29 = CFSTR("scn_bloom_downsample");
    v11 = objc_msgSend(v3, "newRenderPipelineStateWithDesc:", v14);
    v12 = *(void **)(v10 + 16);
    if (v12 != (void *)v11)
    {
      v13 = v11;
      if (v12)

      *(_QWORD *)(v10 + 16) = v13;
    }
  }
}

void C3D::BloomDownSamplePass::execute(uint64_t *a1, void **a2)
{
  uint64_t RenderContext;
  uint64_t v4;
  uint64_t StackAllocator;
  char *Zero;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  int v10;
  int v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void **v15;
  id v16;

  v15 = a2;
  RenderContext = C3DEngineContextGetRenderContext(a1[2]);
  v4 = -[SCNMTLRenderContext frameConstantBufferPool](RenderContext);
  StackAllocator = C3DEngineContextGetStackAllocator(a1[2]);
  Zero = (char *)C3DStackAllocatorAllocateZero(StackAllocator, 0xD70uLL);
  v16 = objc_alloc_init(MEMORY[0x1E0CC6B50]);
  v7 = C3D::Pass::outputTextureAtIndex((C3D::Pass *)a1, 0);
  v8 = objc_msgSend(v7, "newTextureViewWithPixelFormat:textureType:levels:slices:", objc_msgSend(v7, "pixelFormat"), objc_msgSend(v7, "textureType"), 0, 1, 0, 1);
  v9 = (void *)v8;
  if (*(int *)(a1[16] + 24) < 2)
  {
    v12 = (void *)v8;
  }
  else
  {
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = (void *)objc_msgSend(v7, "newTextureViewWithPixelFormat:textureType:levels:slices:", objc_msgSend(v7, "pixelFormat", v15), objc_msgSend(v7, "textureType"), (v10 + 1), 1, 0, 1);
      objc_msgSend((id)objc_msgSend((id)objc_msgSend(v16, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setTexture:", v12);
      objc_msgSend((id)objc_msgSend((id)objc_msgSend(v16, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setResolveTexture:", 0);
      v13 = *v15;
      bzero(Zero, 0xD70uLL);
      *((_DWORD *)Zero + 16) = 1;
      Zero[72] = 1;
      *((_QWORD *)Zero + 423) = v13;
      *((_QWORD *)Zero + 424) = objc_msgSend(v13, "renderCommandEncoderWithDescriptor:", v16);
      *((_QWORD *)Zero + 425) = v4;
      *(_OWORD *)(Zero + 8) = 0u;
      *(_OWORD *)(Zero + 24) = 0u;
      v14 = objc_msgSend((id)C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(a1[17] + 16), "state");
      if (*((_QWORD *)Zero + 422) != v14)
      {
        *((_QWORD *)Zero + 422) = v14;
        objc_msgSend(*((id *)Zero + 424), "setRenderPipelineState:", v14);
      }
      SCNMTLRenderCommandEncoder::setFragmentTexture((uint64_t)Zero, v9, 0);
      SCNMTLRenderCommandEncoder::drawFullScreenTriangle((SCNMTLRenderCommandEncoder *)Zero);
      SCNMTLRenderCommandEncoder::endEncoding((SCNMTLRenderCommandEncoder *)Zero);

      v10 = ++v11;
      v9 = v12;
    }
    while (*(_DWORD *)(a1[16] + 24) - 1 > v11);
  }

}

void C3D::BloomDownSamplePassResource::~BloomDownSamplePassResource(C3D::BloomDownSamplePassResource *this)
{
  void *v1;

  *(_QWORD *)this = &off_1EA59A438;
  v1 = (void *)*((_QWORD *)this + 2);
  if (v1)

}

{
  void *v1;

  *(_QWORD *)this = &off_1EA59A438;
  v1 = (void *)*((_QWORD *)this + 2);
  if (v1)

  JUMPOUT(0x1DF0D41C0);
}

void __StoreTexture(uint64_t a1, void *key, uint64_t a3, const void *a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *Value;
  _BOOL8 v41;
  unsigned int ImageType;
  const void *v43;

  if (!a1 && (v8 = scn_default_log(), os_log_type_enabled(v8, OS_LOG_TYPE_FAULT)))
  {
    __StoreTexture_cold_4(v8, v9, v10, v11, v12, v13, v14, v15);
    if (key)
      goto LABEL_6;
  }
  else if (key)
  {
    goto LABEL_6;
  }
  v16 = scn_default_log();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
    C3DImageGetURL_cold_1(v16, v17, v18, v19, v20, v21, v22, v23);
LABEL_6:
  if (!a3 && (v24 = scn_default_log(), os_log_type_enabled(v24, OS_LOG_TYPE_FAULT)))
  {
    C3DTextureSamplerSetAnisotropy_cold_1(v24, v25, v26, v27, v28, v29, v30, v31);
    if (a4)
      goto LABEL_11;
  }
  else if (a4)
  {
    goto LABEL_11;
  }
  v32 = scn_default_log();
  if (os_log_type_enabled(v32, OS_LOG_TYPE_FAULT))
    C3DRendererContextApplyTextureSampler_cold_2(v32, v33, v34, v35, v36, v37, v38, v39);
LABEL_11:
  Value = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), key);
  if (!Value)
  {
    Value = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, MEMORY[0x1E0C9B3A0]);
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 16), key, Value);
    CFRelease(Value);
    if (a3)
      goto LABEL_13;
LABEL_15:
    v43 = 0;
    goto LABEL_16;
  }
  if (!a3)
    goto LABEL_15;
LABEL_13:
  v41 = C3DTextureSamplerUseMipmaps(a3);
  ImageType = C3DImageGetImageType((uint64_t)key);
  v43 = (const void *)((int)(2 * C3DEngineContextInferTextureTypeForImageTypeAndTextureSampler(ImageType)) | (unint64_t)v41);
LABEL_16:
  CFDictionarySetValue((CFMutableDictionaryRef)Value, v43, a4);
}

uint64_t _C3DResourceManagerCFFinalize(uint64_t a1)
{
  __CFNotificationCenter *LocalCenter;
  __CFNotificationCenter *v3;
  __CFNotificationCenter *v4;
  __CFNotificationCenter *v5;
  __CFNotificationCenter *v6;
  __CFNotificationCenter *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;

  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterRemoveObserver(LocalCenter, (const void *)a1, CFSTR("kC3DNotificationMeshSourceWillDie"), 0);
  v3 = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterRemoveObserver(v3, (const void *)a1, CFSTR("kC3DNotificationMeshElementWillDie"), 0);
  v4 = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterRemoveObserver(v4, (const void *)a1, CFSTR("kC3DNotificationImageWillDie"), 0);
  v5 = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterRemoveObserver(v5, (const void *)a1, CFSTR("kC3DNotificationImageProxyWillDie"), 0);
  v6 = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterRemoveObserver(v6, (const void *)a1, CFSTR("kC3DNotificationProgramWillDie"), 0);
  v7 = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterRemoveObserver(v7, (const void *)a1, CFSTR("kC3DNotificationMeshWillDie"), 0);
  C3DResourceManagerFlush(a1);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 88));
  v8 = *(const void **)(a1 + 40);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(a1 + 40) = 0;
  }
  v9 = *(const void **)(a1 + 48);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(a1 + 48) = 0;
  }
  v10 = *(const void **)(a1 + 56);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(a1 + 56) = 0;
  }
  v11 = *(const void **)(a1 + 32);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(a1 + 32) = 0;
  }
  v12 = *(const void **)(a1 + 16);
  if (v12)
  {
    CFRelease(v12);
    *(_QWORD *)(a1 + 16) = 0;
  }
  v13 = *(const void **)(a1 + 80);
  if (v13)
  {
    CFRelease(v13);
    *(_QWORD *)(a1 + 80) = 0;
  }
  v14 = *(const void **)(a1 + 24);
  if (v14)
  {
    CFRelease(v14);
    *(_QWORD *)(a1 + 24) = 0;
  }
  v15 = *(const void **)(a1 + 224);
  if (v15)
  {
    CFRelease(v15);
    *(_QWORD *)(a1 + 224) = 0;
  }
  v16 = *(const void **)(a1 + 232);
  if (v16)
  {
    CFRelease(v16);
    *(_QWORD *)(a1 + 232) = 0;
  }
  v17 = *(const void **)(a1 + 64);
  if (v17)
  {
    CFRelease(v17);
    *(_QWORD *)(a1 + 64) = 0;
  }
  dispatch_resume(*(dispatch_object_t *)(a1 + 216));
  dispatch_release(*(dispatch_object_t *)(a1 + 216));
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 88));
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 88));
  return pthread_mutex_destroy((pthread_mutex_t *)(a1 + 152));
}

CFStringRef _C3DResourceManagerCFCopyFormatDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DResourceManager>"));
}

CFStringRef _C3DResourceManagerCFCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DResourceManager>"));
}

uint64_t C3DResourceManagerCreate()
{
  uint64_t Instance;
  const __CFAllocator *v1;
  const CFDictionaryValueCallBacks *v2;
  const CFDictionaryKeyCallBacks *v3;
  NSObject *v4;
  __CFNotificationCenter *LocalCenter;
  __CFNotificationCenter *v6;
  __CFNotificationCenter *v7;
  __CFNotificationCenter *v8;
  __CFNotificationCenter *v9;
  __CFNotificationCenter *v10;
  pthread_mutexattr_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (C3DResourceManagerGetTypeID_onceToken != -1)
    dispatch_once(&C3DResourceManagerGetTypeID_onceToken, &__block_literal_global_43);
  Instance = C3DTypeCreateInstance_(C3DResourceManagerGetTypeID_typeID, 0xE0uLL);
  if (Instance)
  {
    v1 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v2 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
    *(_QWORD *)(Instance + 16) = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, MEMORY[0x1E0C9B3A0]);
    *(_QWORD *)(Instance + 32) = CFDictionaryCreateMutable(v1, 0, 0, v2);
    *(_QWORD *)(Instance + 24) = CFDictionaryCreateMutable(v1, 0, 0, v2);
    *(_DWORD *)(Instance + 72) = 0;
    *(_QWORD *)(Instance + 80) = C3DListCreate();
    *(_QWORD *)(Instance + 40) = CFDictionaryCreateMutable(v1, 0, 0, v2);
    *(_QWORD *)(Instance + 48) = CFDictionaryCreateMutable(v1, 0, 0, v2);
    *(_QWORD *)(Instance + 56) = CFDictionaryCreateMutable(v1, 0, 0, v2);
    v3 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
    *(_QWORD *)(Instance + 64) = CFDictionaryCreateMutable(v1, 0, MEMORY[0x1E0C9B390], v2);
    v12.__sig = 0;
    *(_QWORD *)v12.__opaque = 0;
    pthread_mutexattr_init(&v12);
    pthread_mutexattr_settype(&v12, 2);
    pthread_mutex_init((pthread_mutex_t *)(Instance + 88), &v12);
    pthread_mutex_init((pthread_mutex_t *)(Instance + 152), &v12);
    pthread_mutexattr_destroy(&v12);
    v4 = dispatch_queue_create("com.apple.scenekit.resourceManagerDeletionQueue", 0);
    *(_QWORD *)(Instance + 216) = v4;
    dispatch_suspend(v4);
    *(_QWORD *)(Instance + 224) = CFDictionaryCreateMutable(v1, 0, v3, v2);
    *(_QWORD *)(Instance + 232) = CFArrayCreateMutable(v1, 0, MEMORY[0x1E0C9B378]);
    LocalCenter = CFNotificationCenterGetLocalCenter();
    CFNotificationCenterAddObserver(LocalCenter, (const void *)Instance, (CFNotificationCallback)__MeshSourceWillDie, CFSTR("kC3DNotificationMeshSourceWillDie"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
    v6 = CFNotificationCenterGetLocalCenter();
    CFNotificationCenterAddObserver(v6, (const void *)Instance, (CFNotificationCallback)__MeshElementWillDie, CFSTR("kC3DNotificationMeshElementWillDie"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
    v7 = CFNotificationCenterGetLocalCenter();
    CFNotificationCenterAddObserver(v7, (const void *)Instance, (CFNotificationCallback)__ImageWillDie, CFSTR("kC3DNotificationImageWillDie"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
    v8 = CFNotificationCenterGetLocalCenter();
    CFNotificationCenterAddObserver(v8, (const void *)Instance, (CFNotificationCallback)__ImageProxyWillDie, CFSTR("kC3DNotificationImageProxyWillDie"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
    v9 = CFNotificationCenterGetLocalCenter();
    CFNotificationCenterAddObserver(v9, (const void *)Instance, (CFNotificationCallback)__ProgramWillDie, CFSTR("kC3DNotificationProgramWillDie"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
    v10 = CFNotificationCenterGetLocalCenter();
    CFNotificationCenterAddObserver(v10, (const void *)Instance, (CFNotificationCallback)__MeshWillDie, CFSTR("kC3DNotificationMeshWillDie"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  }
  return Instance;
}

uint64_t __MeshSourceWillDie(int a1, uint64_t a2, int a3, CFNumberRef number)
{
  void *valuePtr;

  valuePtr = 0;
  CFNumberGetValue(number, kCFNumberLongType, &valuePtr);
  return __EnqueueCommand(a2, CFSTR("kResourceManagerPendingMeshSourceRemoval"), valuePtr);
}

uint64_t __MeshElementWillDie(int a1, uint64_t a2, int a3, CFNumberRef number)
{
  void *valuePtr;

  valuePtr = 0;
  CFNumberGetValue(number, kCFNumberLongType, &valuePtr);
  return __EnqueueCommand(a2, CFSTR("kResourceManagerPendingMeshElementRemoval"), valuePtr);
}

uint64_t __ImageWillDie(int a1, uint64_t a2, int a3, CFNumberRef number)
{
  void *valuePtr;

  valuePtr = 0;
  CFNumberGetValue(number, kCFNumberLongType, &valuePtr);
  return __EnqueueCommand(a2, CFSTR("kResourceManagerPendingImageRemoval"), valuePtr);
}

uint64_t __ImageProxyWillDie(int a1, uint64_t a2, int a3, CFNumberRef number)
{
  void *valuePtr;

  valuePtr = 0;
  CFNumberGetValue(number, kCFNumberLongType, &valuePtr);
  return __EnqueueCommand(a2, CFSTR("kResourceManagerPendingImageProxyRemoval"), valuePtr);
}

uint64_t __ProgramWillDie(int a1, uint64_t a2, int a3, CFNumberRef number)
{
  void *valuePtr;

  valuePtr = 0;
  CFNumberGetValue(number, kCFNumberLongType, &valuePtr);
  return __EnqueueCommand(a2, CFSTR("kResourceManagerPendingProgramRemoval"), valuePtr);
}

uint64_t __MeshWillDie(int a1, uint64_t a2, int a3, CFNumberRef number)
{
  void *valuePtr;

  valuePtr = 0;
  CFNumberGetValue(number, kCFNumberLongType, &valuePtr);
  return __EnqueueCommand(a2, CFSTR("kResourceManagerPendingMeshRemoval"), valuePtr);
}

const __CFDictionary *__ResourceManagerGetTexture(uint64_t a1, void *key, const void *a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  unsigned int ImageType;
  const __CFDictionary *result;

  if (!a1 && (v6 = scn_default_log(), os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)))
  {
    __StoreTexture_cold_4(v6, v7, v8, v9, v10, v11, v12, v13);
    if (key)
      goto LABEL_6;
  }
  else if (key)
  {
    goto LABEL_6;
  }
  v14 = scn_default_log();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    C3DImageGetURL_cold_1(v14, v15, v16, v17, v18, v19, v20, v21);
LABEL_6:
  if (a3)
  {
    v22 = C3DTextureSamplerUseMipmaps((uint64_t)a3);
    ImageType = C3DImageGetImageType((uint64_t)key);
    a3 = (const void *)((int)(2 * C3DEngineContextInferTextureTypeForImageTypeAndTextureSampler(ImageType)) | (unint64_t)v22);
  }
  result = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), key);
  if (!result)
  {
    result = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), key);
    if (result)
      return (const __CFDictionary *)CFDictionaryGetValue(result, a3);
  }
  return result;
}

void __ResourceManagerDeleteTexture(uint64_t a1, const void *a2, const void *a3)
{
  _QWORD *Value;
  uint64_t Library;
  const void *v8;
  const void *AnyRendererContext;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __CFDictionary *v18;
  const void *v19;
  const __CFDictionary *v20;
  NSObject *v21;
  NSObject *v22;
  __CFDictionary *v23;
  NSObject *v24;
  double Size;

  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), a2);
  if (Value
    || (v20 = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), a2)) != 0
    && (Value = CFDictionaryGetValue(v20, a3)) != 0)
  {
    Library = C3DSceneSourceGetLibrary((uint64_t)Value);
    if (Library)
    {
      v8 = (const void *)Library;
      AnyRendererContext = __GetAnyRendererContext(a1);
      if (!AnyRendererContext)
      {
        v10 = scn_default_log();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
          C3DEngineContextRenderScene_cold_2(v10, v11, v12, v13, v14, v15, v16, v17);
      }
      C3DRendererContextDeleteTexture((uint64_t)AnyRendererContext, (uint64_t)Value);
      Size = C3DTextureGetSize((uint64_t)Value);
      if (C3DTextureIsAttachment((uint64_t)Value))
      {
        v18 = *(__CFDictionary **)(a1 + 24);
        v19 = v8;
      }
      else
      {
        v23 = (__CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), v8);
        *(_DWORD *)(a1 + 76) -= vcvts_n_u32_f32(vmul_lane_f32(*(float32x2_t *)&Size, *(float32x2_t *)&Size, 1).f32[0], 2uLL);
        C3DListRemoveLinkableObject(*(_QWORD **)(a1 + 80), Value);
        if (!v23)
        {
          v24 = scn_default_log();
          if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
            __ResourceManagerDeleteTexture_cold_3();
          return;
        }
        v18 = v23;
        v19 = a3;
      }
      CFDictionaryRemoveValue(v18, v19);
      return;
    }
    v22 = scn_default_log();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      __ResourceManagerDeleteTexture_cold_2();
  }
  else
  {
    v21 = scn_default_log();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      __ResourceManagerDeleteTexture_cold_1();
  }
}

float32x2_t *C3DResourceManagerMakeImageResident(uint64_t a1, void *key, const void *Default, float32x2_t *a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const __CFDictionary *Texture;
  float32x2_t *TextureWithImage;
  uint64_t CatalogTextureName;
  uint64_t v35;
  void *v36;
  unsigned int v37;
  NSObject *v38;
  double v39;
  double Size;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;

  if (!a1 && (v8 = scn_default_log(), os_log_type_enabled(v8, OS_LOG_TYPE_FAULT)))
  {
    __StoreTexture_cold_4(v8, v9, v10, v11, v12, v13, v14, v15);
    if (key)
      goto LABEL_6;
  }
  else if (key)
  {
    goto LABEL_6;
  }
  v16 = scn_default_log();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
    C3DImageGetURL_cold_1(v16, v17, v18, v19, v20, v21, v22, v23);
LABEL_6:
  if (a4 || (v24 = scn_default_log(), !os_log_type_enabled(v24, OS_LOG_TYPE_FAULT)))
  {
    if (Default)
      goto LABEL_10;
    goto LABEL_9;
  }
  C3DEngineContextRenderScene_cold_2(v24, v25, v26, v27, v28, v29, v30, v31);
  if (!Default)
LABEL_9:
    Default = (const void *)C3DTextureSamplerGetDefault();
LABEL_10:
  Texture = __ResourceManagerGetTexture(a1, key, Default);
  if (!Texture)
  {
    if (C3DImageIsCatalogTexture((uint64_t)key))
    {
      CatalogTextureName = C3DImageGetCatalogTextureName((uint64_t)key);
      v44 = 0;
      v35 = objc_msgSend(MEMORY[0x1E0CB3C90], "textureWithName:scaleFactor:bundle:options:error:", CatalogTextureName, SCNGetResourceBundle(), MEMORY[0x1E0C9AA70], &v44, 1.0);
      if (v35)
      {
        v36 = (void *)v35;
        TextureWithImage = (float32x2_t *)C3DTextureCreate();
        v37 = objc_msgSend(v36, "width");
        TextureWithImage[8] = vcvt_f32_u32((uint32x2_t)__PAIR64__(objc_msgSend(v36, "height"), v37));
        C3DTextureSetID((uint64_t)TextureWithImage, objc_msgSend(v36, "name"), objc_msgSend(v36, "target"));
        goto LABEL_20;
      }
      v38 = scn_default_log();
      if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
        C3DResourceManagerMakeImageResident_cold_1(CatalogTextureName, &v44, v38);
    }
    if (!C3DImageIsCubeMap((uint64_t)key))
    {
      Size = C3DImageGetSize((uint64_t)key);
      TextureWithImage = 0;
      if (*(float *)&Size == 0.0 || *((float *)&Size + 1) == 0.0)
        return TextureWithImage;
      v42 = *(_DWORD *)(a1 + 72);
      if (v42)
      {
        v43 = vcvts_n_u32_f32(*(float *)&Size * *((float *)&Size + 1), 2uLL);
        if (v42 >= v43 && *(_DWORD *)(a1 + 76) + v43 > v42)
        {
          while (1)
            ;
        }
      }
    }
    TextureWithImage = (float32x2_t *)C3DRendererContextCreateTextureWithImage(a4, (uint64_t)key, (uint64_t)Default);
    if (!TextureWithImage)
      return TextureWithImage;
LABEL_20:
    TextureWithImage[5] = (float32x2_t)key;
    v39 = C3DTextureGetSize((uint64_t)TextureWithImage);
    *(_DWORD *)(a1 + 76) += vcvts_n_u32_f32(vmul_lane_f32(*(float32x2_t *)&v39, *(float32x2_t *)&v39, 1).f32[0], 2uLL);
    C3DListAddLinkableObjectFirst(*(_QWORD **)(a1 + 80), TextureWithImage);
    __StoreTexture(a1, key, (uint64_t)Default, TextureWithImage);
    C3DImageReleaseBitmapCache((uint64_t)key);
    CFRelease(TextureWithImage);
    return TextureWithImage;
  }
  TextureWithImage = (float32x2_t *)Texture;
  if ((C3DTextureIsAttachment((uint64_t)Texture) & 1) == 0)
    C3DListMoveLinkableObjectFirst(*(_QWORD *)(a1 + 80), (uint64_t)TextureWithImage);
  return TextureWithImage;
}

BOOL __ResourceManagerIsImageResident(uint64_t a1, void *key)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (!a1 && (v4 = scn_default_log(), os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)))
  {
    __StoreTexture_cold_4(v4, v5, v6, v7, v8, v9, v10, v11);
    if (key)
      return CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 16), key)
          || CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 24), key) != 0;
  }
  else if (key)
  {
    return CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 16), key)
        || CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 24), key) != 0;
  }
  v12 = scn_default_log();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    C3DImageGetURL_cold_1(v12, v13, v14, v15, v16, v17, v18, v19);
  return CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 16), key)
      || CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 24), key) != 0;
}

void __ResourceManagerRemoveResidentImage(uint64_t a1, void *key)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const __CFDictionary *Value;
  const __CFDictionary *v21;
  CFIndex Count;
  CFIndex v23;
  const void **v24;
  uint64_t i;

  if (!a1 && (v4 = scn_default_log(), os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)))
  {
    __StoreTexture_cold_4(v4, v5, v6, v7, v8, v9, v10, v11);
    if (key)
      goto LABEL_6;
  }
  else if (key)
  {
    goto LABEL_6;
  }
  v12 = scn_default_log();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    C3DImageGetURL_cold_1(v12, v13, v14, v15, v16, v17, v18, v19);
LABEL_6:
  Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), key);
  if (Value)
  {
    v21 = Value;
    Count = CFDictionaryGetCount(Value);
    if (Count >= 1)
    {
      v23 = Count;
      v24 = (const void **)C3DMalloc(8 * Count);
      CFDictionaryGetKeysAndValues(v21, v24, 0);
      for (i = 0; i != v23; ++i)
        __ResourceManagerDeleteTexture(a1, key, v24[i]);
      free(v24);
    }
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 16), key);
  }
  if (CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), key))
    __ResourceManagerDeleteTexture(a1, key, 0);
}

_QWORD *C3DResourceManagerMakeImageProxyResident(uint64_t a1, void *key, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *Value;
  _BOOL8 v35;
  const void *v36;
  _QWORD *result;

  if (!a1 && (v10 = scn_default_log(), os_log_type_enabled(v10, OS_LOG_TYPE_FAULT)))
  {
    __StoreTexture_cold_4(v10, v11, v12, v13, v14, v15, v16, v17);
    if (key)
      goto LABEL_6;
  }
  else if (key)
  {
    goto LABEL_6;
  }
  v18 = scn_default_log();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_FAULT))
    C3DResourceManagerMakeImageProxyResident_cold_2(v18, v19, v20, v21, v22, v23, v24, v25);
LABEL_6:
  if (!a4)
  {
    v26 = scn_default_log();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_FAULT))
      C3DEngineContextRenderScene_cold_2(v26, v27, v28, v29, v30, v31, v32, v33);
  }
  Value = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), key);
  if (!Value)
  {
    Value = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, MEMORY[0x1E0C9B3A0]);
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), key, Value);
    CFRelease(Value);
  }
  v35 = C3DTextureSamplerGetMipFilter(a3) != 0;
  v36 = CFDictionaryGetValue((CFDictionaryRef)Value, (const void *)v35);
  if (!v36)
  {
    result = (_QWORD *)C3DImageProxyCreateTextureProxy((uint64_t)key, a3, a5);
    if (!result)
      return result;
    v36 = result;
    result[5] = key;
    CFDictionaryAddValue((CFMutableDictionaryRef)Value, (const void *)v35, result);
    CFRelease(v36);
  }
  return (_QWORD *)C3DTextureProxyGetOpenGLTexture((uint64_t)v36, a5, a3);
}

void __ResourceManagerRemoveResidentImageProxy(CFDictionaryRef *a1, void *key)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const __CFDictionary *Value;

  if (!a1 && (v4 = scn_default_log(), os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)))
  {
    __StoreTexture_cold_4(v4, v5, v6, v7, v8, v9, v10, v11);
    if (key)
      goto LABEL_6;
  }
  else if (key)
  {
    goto LABEL_6;
  }
  v12 = scn_default_log();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    C3DImageGetURL_cold_1(v12, v13, v14, v15, v16, v17, v18, v19);
LABEL_6:
  Value = (const __CFDictionary *)CFDictionaryGetValue(a1[4], key);
  if (Value)
  {
    CFDictionaryApplyFunction(Value, (CFDictionaryApplierFunction)__deleteTextureProxies, a1);
    CFDictionaryRemoveValue(a1[4], key);
  }
}

void _C3DRemoveTextureProxy(void *key, uint64_t a2, CFDictionaryRef **a3)
{
  __ResourceManagerRemoveResidentImageProxy(*a3, key);
}

const void *C3DResourceManagerMakeMeshSourceResident(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const void *Data;
  const void *v23;
  const void *Value;

  if (!a1 && (v6 = scn_default_log(), os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)))
  {
    __StoreTexture_cold_4(v6, v7, v8, v9, v10, v11, v12, v13);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v14 = scn_default_log();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    C3DMeshSourceCreateWithAccessor_cold_1(v14, v15, v16, v17, v18, v19, v20, v21);
LABEL_6:
  Data = (const void *)C3DMeshSourceGetData(a2);
  if (!Data)
    return 0;
  v23 = Data;
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), Data);
  if (!Value)
  {
    Value = (const void *)C3DRendererContextCreateBufferObjectForMeshSource(a3, a2);
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), v23, Value);
    CFRelease(Value);
  }
  return Value;
}

const void *C3DResourceManagerMakeMeshElementResident(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *SharedMeshElement;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const void *Value;

  SharedMeshElement = (const void *)C3DMeshElementGetSharedMeshElement(a2);
  if (!a1 && (v6 = scn_default_log(), os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)))
  {
    __StoreTexture_cold_4(v6, v7, v8, v9, v10, v11, v12, v13);
    if (SharedMeshElement)
      goto LABEL_6;
  }
  else if (SharedMeshElement)
  {
    goto LABEL_6;
  }
  v14 = scn_default_log();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    C3DResourceManagerMakeMeshElementResident_cold_1(v14, v15, v16, v17, v18, v19, v20, v21);
LABEL_6:
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 48), SharedMeshElement);
  if (!Value)
  {
    Value = (const void *)C3DRendererContextCreateBufferObjectForMeshElement(a3, (uint64_t)SharedMeshElement);
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 48), SharedMeshElement, Value);
    CFRelease(Value);
  }
  return Value;
}

void __ResourceManagerRemoveResidentMeshElement(uint64_t a1, void *key, _DWORD *a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const void *Value;

  if (!a1)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      __StoreTexture_cold_4(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 48), key);
  if (Value)
  {
    C3DRendererContextDeleteBufferObject(a3, (uint64_t)Value);
    if (CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 48), key))
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 48), key);
  }
}

void C3DResourceManagerSetGLSLProgramObjectForSourceHash(uint64_t a1, CFTypeRef cf, _QWORD *a3)
{
  a3[15] = cf;
  CFRetain(cf);
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 64), cf, a3);
}

_QWORD *C3DResourceManagerMakeProgramResident(uint64_t a1, void *key, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *Value;
  _QWORD *ProgramObjectForProgram;
  NSObject *v24;
  CFDictionaryRef *DefaultProgram;

  if (!a1 && (v6 = scn_default_log(), os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)))
  {
    __StoreTexture_cold_4(v6, v7, v8, v9, v10, v11, v12, v13);
    if (key)
      goto LABEL_6;
  }
  else if (key)
  {
    goto LABEL_6;
  }
  v14 = scn_default_log();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    C3DResourceManagerMakeProgramResident_cold_2(v14, v15, v16, v17, v18, v19, v20, v21);
LABEL_6:
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 56), key);
  if (!Value)
  {
    ProgramObjectForProgram = C3DRendererContextCreateProgramObjectForProgram(a3, a1, (CFDictionaryRef *)key);
    if (ProgramObjectForProgram)
    {
      Value = ProgramObjectForProgram;
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 56), key, ProgramObjectForProgram);
      CFRelease(Value);
      Value[5] = key;
    }
    else
    {
      v24 = scn_default_log();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        C3DResourceManagerMakeProgramResident_cold_1();
      DefaultProgram = (CFDictionaryRef *)C3DFXGLSLProgramGetDefaultProgram();
      Value = C3DRendererContextCreateProgramObjectForProgram(a3, a1, DefaultProgram);
      Value[5] = 0;
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 56), key, Value);
      CFRelease(Value);
    }
  }
  return Value;
}

void __ResourceManagerRemoveResidentProgram(uint64_t a1, void *key, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const void **Value;
  const void **v23;
  _QWORD v24[6];

  if (!a1 && (v6 = scn_default_log(), os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)))
  {
    __StoreTexture_cold_4(v6, v7, v8, v9, v10, v11, v12, v13);
    if (a3)
      goto LABEL_6;
  }
  else if (a3)
  {
    goto LABEL_6;
  }
  v14 = scn_default_log();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    C3DEngineContextRenderScene_cold_2(v14, v15, v16, v17, v18, v19, v20, v21);
LABEL_6:
  if (key)
  {
    Value = (const void **)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 56), key);
    if (Value)
    {
      v23 = Value;
      C3DFXGLSLProgramObjectDetachOfProgram((uint64_t)Value);
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 56), key);
      if (!*((_DWORD *)v23 + 16))
      {
        v24[0] = MEMORY[0x1E0C809B0];
        v24[1] = 3221225472;
        v24[2] = ____ResourceManagerRemoveResidentProgramObject_block_invoke;
        v24[3] = &__block_descriptor_48_e5_v8__0l;
        v24[4] = a3;
        v24[5] = v23;
        C3DRendererContextExecuteOnContext(a3, (uint64_t)v24);
        CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 64), v23[15]);
      }
    }
  }
}

void __ResourceManagerReleaseResidentVRAMResource(CFDictionaryRef *a1, CFTypeRef cf, _DWORD *a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  CFTypeID v30;
  void *Library;
  void *v32;
  void *v33;
  void *v34;
  void *v35;

  if (!a1 && (v6 = scn_default_log(), os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)))
  {
    __StoreTexture_cold_4(v6, v7, v8, v9, v10, v11, v12, v13);
    if (cf)
      goto LABEL_6;
  }
  else if (cf)
  {
    goto LABEL_6;
  }
  v14 = scn_default_log();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    __ResourceManagerReleaseResidentVRAMResource_cold_2(v14, v15, v16, v17, v18, v19, v20, v21);
LABEL_6:
  if (!a3)
  {
    v22 = scn_default_log();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_FAULT))
      C3DEngineContextRenderScene_cold_2(v22, v23, v24, v25, v26, v27, v28, v29);
  }
  v30 = CFGetTypeID(cf);
  if (v30 == C3DBufferObjectGetTypeID())
  {
    if (C3DBufferObjectGetTarget((uint64_t)cf))
    {
      if (C3DBufferObjectGetTarget((uint64_t)cf) == 1)
      {
        Library = (void *)C3DSceneSourceGetLibrary((uint64_t)cf);
        __ResourceManagerRemoveResidentMeshElement((uint64_t)a1, Library, a3);
      }
    }
    else
    {
      v34 = (void *)C3DSceneSourceGetLibrary((uint64_t)cf);
      __ResourceManagerRemoveResidentMeshSourceData((uint64_t)a1, v34, a3);
    }
  }
  else if (v30 == C3DTextureGetTypeID())
  {
    v32 = (void *)C3DSceneSourceGetLibrary((uint64_t)cf);
    __ResourceManagerRemoveResidentImage((uint64_t)a1, v32);
  }
  else if (v30 == C3DFXGLSLProgramObjectGetTypeID())
  {
    v33 = (void *)C3DSceneSourceGetLibrary((uint64_t)cf);
    __ResourceManagerRemoveResidentProgram((uint64_t)a1, v33, (uint64_t)a3);
  }
  else if (v30 == C3DImageProxyGetTypeID())
  {
    v35 = (void *)C3DSceneSourceGetLibrary((uint64_t)cf);
    __ResourceManagerRemoveResidentImageProxy(a1, v35);
  }
}

void C3DResourceManagerRemoveAllImages(CFDictionaryRef *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const __CFDictionary *Copy;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __StoreTexture_cold_4(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a1[2]);
  CFDictionaryApplyFunction(Copy, (CFDictionaryApplierFunction)__RemoveImageFromDic, a1);
  CFRelease(Copy);
}

void __RemoveImageFromDic(void *key, int a2, uint64_t a3)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (key)
  {
    __ResourceManagerRemoveResidentImage(a3, key);
  }
  else
  {
    v3 = scn_default_log();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT))
      C3DAnimationManagerAddAnimationPlayerForKey_cold_1(v3, v4, v5, v6, v7, v8, v9, v10);
  }
}

void C3DResourceManagerRemoveAllMeshSources(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const __CFDictionary *v10;
  const __CFDictionary *Copy;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __StoreTexture_cold_4(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  v10 = (const __CFDictionary *)a1[5];
  if (v10)
  {
    Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v10);
    CFDictionaryApplyFunction(Copy, (CFDictionaryApplierFunction)__RemoveVRAMResourceFromDic, a1);
    CFRelease(Copy);
  }
}

void C3DResourceManagerRemoveAllMeshElements(CFDictionaryRef *a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const __CFDictionary *v12;
  const __CFDictionary *Copy;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __StoreTexture_cold_4(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = a1[6];
  if (v12)
  {
    if (CFDictionaryGetCount(v12) >= 1)
    {
      C3DRendererContextBindMeshElement(a2, (uint64_t)a1, 0);
      Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a1[6]);
      CFDictionaryApplyFunction(Copy, (CFDictionaryApplierFunction)__RemoveVRAMResourceFromDic, a1);
      CFRelease(Copy);
    }
  }
}

void C3DResourceManagerRemoveAllPrograms(CFDictionaryRef *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const __CFDictionary *v10;
  CFIndex Count;
  CFAllocatorRef *v12;
  const __CFDictionary *Copy;
  const __CFDictionary *v14;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __StoreTexture_cold_4(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  v10 = a1[7];
  if (v10)
  {
    Count = CFDictionaryGetCount(v10);
    v12 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
    if (Count >= 1)
    {
      Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a1[7]);
      CFDictionaryApplyFunction(Copy, (CFDictionaryApplierFunction)__RemoveVRAMResourceFromDic, a1);
      CFRelease(Copy);
    }
    if (CFDictionaryGetCount(a1[7]) >= 1)
    {
      v14 = CFDictionaryCreateCopy(*v12, a1[8]);
      CFDictionaryApplyFunction(v14, (CFDictionaryApplierFunction)__RemoveVRAMResourceFromDic, a1);
      CFRelease(v14);
    }
  }
}

void C3DResourceManagerRemoveAllResources(CFDictionaryRef *a1, uint64_t a2)
{
  _QWORD context[3];

  context[2] = *MEMORY[0x1E0C80C00];
  C3DResourceManagerFlush((uint64_t)a1);
  C3DResourceManagerRemoveAllImages(a1);
  C3DResourceManagerRemoveAllMeshElements(a1, a2);
  C3DResourceManagerRemoveAllMeshSources(a1);
  C3DResourceManagerRemoveAllPrograms(a1);
  context[0] = a1;
  context[1] = a2;
  CFDictionaryApplyFunction(a1[4], (CFDictionaryApplierFunction)_C3DRemoveTextureProxy, context);
}

uint64_t C3DResourceManagerFlush(uint64_t a1)
{
  pthread_mutex_t *v2;
  dispatch_block_t v3;
  _QWORD block[5];

  v2 = (pthread_mutex_t *)(a1 + 88);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 88));
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 152));
  CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 224), (CFDictionaryApplierFunction)__HandleVRAMResourcesRemovalFromCommands, (void *)a1);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __C3DResourceManagerFlush_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = a1;
  v3 = dispatch_block_create(DISPATCH_BLOCK_INHERIT_QOS_CLASS, block);
  dispatch_async(*(dispatch_queue_t *)(a1 + 216), v3);
  dispatch_resume(*(dispatch_object_t *)(a1 + 216));
  dispatch_block_wait(v3, 0xFFFFFFFFFFFFFFFFLL);
  _Block_release(v3);
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 152));
  return pthread_mutex_unlock(v2);
}

void __HandleVRAMResourcesRemovalFromCommands(__CFString *a1, const __CFArray *a2, uint64_t a3)
{
  _DWORD *AnyRendererContext;
  CFIndex Count;
  CFIndex v7;
  CFIndex i;
  const void *ValueAtIndex;
  NSObject *v10;
  const void *v11;
  _QWORD v13[6];
  uint8_t buf[4];
  _DWORD v15[7];

  *(_QWORD *)&v15[5] = *MEMORY[0x1E0C80C00];
  AnyRendererContext = __GetAnyRendererContext(a3);
  Count = CFArrayGetCount(a2);
  if (Count >= 1)
  {
    v7 = Count;
    for (i = 0; i != v7; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a2, i);
      C3DVRAMResourceUnlock((uint64_t)ValueAtIndex);
      if (a1 == CFSTR("kResourceManagerPendingImageRemoval"))
      {
        C3DRendererContextDeleteTexture((uint64_t)AnyRendererContext, (uint64_t)ValueAtIndex);
      }
      else if (a1 == CFSTR("kResourceManagerPendingImageProxyRemoval"))
      {
        if (!ValueAtIndex)
        {
          v10 = scn_default_log();
          if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
            __HandleVRAMResourcesRemovalFromCommands_cold_1(buf, v15, v10);
        }
        if (!C3DVRAMResourceLockCount((uint64_t)ValueAtIndex) && *((_QWORD *)ValueAtIndex + 9))
        {
          v11 = __GetAnyRendererContext(a3);
          (*((void (**)(const void *, _QWORD))ValueAtIndex + 9))(v11, *((_QWORD *)ValueAtIndex + 12));
        }
      }
      else if (a1 == CFSTR("kResourceManagerPendingProgramRemoval"))
      {
        if (!*((_DWORD *)ValueAtIndex + 16))
        {
          v13[0] = MEMORY[0x1E0C809B0];
          v13[1] = 3221225472;
          v13[2] = ____ResourceManagerRemoveResidentProgramObject_block_invoke;
          v13[3] = &__block_descriptor_48_e5_v8__0l;
          v13[4] = AnyRendererContext;
          v13[5] = ValueAtIndex;
          C3DRendererContextExecuteOnContext((uint64_t)AnyRendererContext, (uint64_t)v13);
          CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a3 + 64), *((const void **)ValueAtIndex + 15));
        }
      }
      else if (a1 == CFSTR("kResourceManagerPendingMeshSourceRemoval")
             || a1 == CFSTR("kResourceManagerPendingMeshElementRemoval"))
      {
        C3DRendererContextDeleteBufferObject(AnyRendererContext, (uint64_t)ValueAtIndex);
      }
    }
  }
  CFArrayRemoveAllValues(a2);
}

uint64_t _C3DResourceManagerInstallRendererContext(uint64_t a1, const void *a2)
{
  pthread_mutex_t *v4;

  v4 = (pthread_mutex_t *)(a1 + 152);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 152));
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 232), a2);
  return pthread_mutex_unlock(v4);
}

uint64_t _C3DResourceManagerUninstallRendererContext(uint64_t a1, const void *a2)
{
  pthread_mutex_t *v4;
  CFIndex Count;
  CFIndex FirstIndexOfValue;
  CFIndex v7;
  NSObject *v8;
  CFRange v10;

  v4 = (pthread_mutex_t *)(a1 + 152);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 152));
  Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 232));
  v10.location = 0;
  v10.length = Count;
  FirstIndexOfValue = CFArrayGetFirstIndexOfValue(*(CFArrayRef *)(a1 + 232), v10, a2);
  if (FirstIndexOfValue == -1)
  {
    v8 = scn_default_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      _C3DResourceManagerUninstallRendererContext_cold_1();
  }
  else
  {
    v7 = FirstIndexOfValue;
    if (Count == 1)
      C3DResourceManagerRemoveAllResources((CFDictionaryRef *)a1, (uint64_t)a2);
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 232), v7);
  }
  return pthread_mutex_unlock(v4);
}

uint64_t C3DResourceManagerLockVRAMResourceAccess(uint64_t a1)
{
  return pthread_mutex_lock((pthread_mutex_t *)(a1 + 152));
}

uint64_t C3DResourceManagerUnlockVRAMResourceAccess(uint64_t a1)
{
  return pthread_mutex_unlock((pthread_mutex_t *)(a1 + 152));
}

const void *__GetAnyRendererContext(uint64_t a1)
{
  const void *result;

  result = (const void *)CFArrayGetCount(*(CFArrayRef *)(a1 + 232));
  if (result)
    return CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 232), 0);
  return result;
}

uint64_t __deleteTextureProxies(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  const void *AnyRendererContext;

  if (!a2)
  {
    v5 = scn_default_log();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
      __deleteTextureProxies_cold_1(v5, v6, v7, v8, v9, v10, v11, v12);
  }
  result = C3DVRAMResourceLockCount(a2);
  if (!result)
  {
    if (*(_QWORD *)(a2 + 72))
    {
      AnyRendererContext = __GetAnyRendererContext(a3);
      return (*(uint64_t (**)(const void *, _QWORD))(a2 + 72))(AnyRendererContext, *(_QWORD *)(a2 + 96));
    }
  }
  return result;
}

uint64_t __EnqueueCommand(uint64_t result, __CFString *a2, void *a3)
{
  uint64_t v5;
  _DWORD *AnyRendererContext;
  void *Value;
  const void *v8;
  const void *v9;
  __CFArray *Mutable;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const __CFDictionary *v19;
  const __CFDictionary *v20;
  CFIndex Count;
  CFIndex v22;
  const void **v23;
  uint64_t i;
  const void *v25;
  const void *v26;
  const __CFDictionary *v27;
  const __CFDictionary *v28;
  const void *v29;
  const void *v30;
  const __CFArray *v31;
  const void *v32;
  CFIndex v33;
  CFIndex v34;
  CFIndex j;
  const void *ValueAtIndex;
  const void *v37;
  const void *v38;
  _QWORD v39[2];
  CFRange v40;

  if (*(_QWORD *)(result + 224))
  {
    v5 = result;
    AnyRendererContext = __GetAnyRendererContext(result);
    pthread_mutex_lock((pthread_mutex_t *)(v5 + 88));
    Value = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(v5 + 224), a2);
    if (!Value)
    {
      Value = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(v5 + 224), a2, Value);
      CFRelease(Value);
    }
    if (a2 == CFSTR("kResourceManagerPendingImageRemoval"))
    {
      if (__ResourceManagerIsImageResident(v5, a3))
      {
        Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
        if (!a3)
        {
          v11 = scn_default_log();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
            C3DImageGetURL_cold_1(v11, v12, v13, v14, v15, v16, v17, v18);
        }
        v19 = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(v5 + 16), a3);
        if (v19)
        {
          v20 = v19;
          Count = CFDictionaryGetCount(v19);
          if (Count >= 1)
          {
            v22 = Count;
            v23 = (const void **)C3DMalloc(8 * Count);
            CFDictionaryGetKeysAndValues(v20, v23, 0);
            for (i = 0; i != v22; ++i)
            {
              v25 = v23[i];
              v26 = CFDictionaryGetValue(*(CFDictionaryRef *)(v5 + 24), a3);
              if (!v26)
              {
                v27 = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(v5 + 16), a3);
                if (!v27)
                  continue;
                v26 = CFDictionaryGetValue(v27, v25);
                if (!v26)
                  continue;
              }
              CFArrayAppendValue(Mutable, v26);
            }
            free(v23);
          }
        }
        v32 = CFDictionaryGetValue(*(CFDictionaryRef *)(v5 + 24), a3);
        if (v32)
          CFArrayAppendValue(Mutable, v32);
        if (Mutable)
        {
          v33 = CFArrayGetCount(Mutable);
          if (v33 >= 1)
          {
            v34 = v33;
            for (j = 0; j != v34; ++j)
            {
              ValueAtIndex = CFArrayGetValueAtIndex(Mutable, j);
              C3DVRAMResourceLock((uint64_t)ValueAtIndex);
              CFArrayAppendValue((CFMutableArrayRef)Value, ValueAtIndex);
            }
          }
          CFRelease(Mutable);
          __ResourceManagerRemoveResidentImage(v5, a3);
        }
      }
    }
    else if (a2 == CFSTR("kResourceManagerPendingImageProxyRemoval"))
    {
      v28 = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(v5 + 32), a3);
      if (v28)
        CFDictionaryApplyFunction(v28, (CFDictionaryApplierFunction)__lockAndAppendTextureProxyForRemoval, Value);
      __ResourceManagerRemoveResidentImageProxy((CFDictionaryRef *)v5, a3);
    }
    else if (a2 == CFSTR("kResourceManagerPendingProgramRemoval"))
    {
      v29 = CFDictionaryGetValue(*(CFDictionaryRef *)(v5 + 56), a3);
      if (v29 && AnyRendererContext)
      {
        v30 = v29;
        C3DVRAMResourceLock((uint64_t)v29);
        CFArrayAppendValue((CFMutableArrayRef)Value, v30);
        __ResourceManagerRemoveResidentProgram(v5, a3, (uint64_t)AnyRendererContext);
      }
    }
    else if (a2 == CFSTR("kResourceManagerPendingMeshRemoval"))
    {
      v39[0] = *(_QWORD *)(v5 + 216);
      v39[1] = a3;
      if (AnyRendererContext)
      {
        v31 = *(const __CFArray **)(v5 + 232);
        v40.length = CFArrayGetCount(v31);
        v40.location = 0;
        CFArrayApplyFunction(v31, v40, (CFArrayApplierFunction)__DeleteVertexArrayObject, v39);
      }
    }
    else if (a2 == CFSTR("kResourceManagerPendingMeshSourceRemoval"))
    {
      v37 = CFDictionaryGetValue(*(CFDictionaryRef *)(v5 + 40), a3);
      if (v37 && AnyRendererContext)
      {
        v38 = v37;
        C3DVRAMResourceLock((uint64_t)v37);
        CFArrayAppendValue((CFMutableArrayRef)Value, v38);
        __ResourceManagerRemoveResidentMeshSourceData(v5, a3, AnyRendererContext);
      }
    }
    else if (a2 == CFSTR("kResourceManagerPendingMeshElementRemoval"))
    {
      v8 = CFDictionaryGetValue(*(CFDictionaryRef *)(v5 + 48), a3);
      if (v8)
      {
        if (AnyRendererContext)
        {
          v9 = v8;
          C3DVRAMResourceLock((uint64_t)v8);
          CFArrayAppendValue((CFMutableArrayRef)Value, v9);
          __ResourceManagerRemoveResidentMeshElement(v5, a3, AnyRendererContext);
        }
      }
    }
    return pthread_mutex_unlock((pthread_mutex_t *)(v5 + 88));
  }
  return result;
}

void __lockAndAppendTextureProxyForRemoval(uint64_t a1, const void *a2, __CFArray *a3)
{
  C3DVRAMResourceLock((uint64_t)a2);
  CFArrayAppendValue(a3, a2);
}

void __DeleteVertexArrayObject(uint64_t a1, uint64_t a2)
{
  _C3DRendererContextMeshWillDie(a1, *(const void **)(a2 + 8), *(NSObject **)a2);
}

void __ResourceManagerRemoveResidentMeshSourceData(uint64_t a1, void *key, _DWORD *a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const void *Value;

  if (!a1 && (v6 = scn_default_log(), os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)))
  {
    __StoreTexture_cold_4(v6, v7, v8, v9, v10, v11, v12, v13);
    if (key)
      goto LABEL_6;
  }
  else if (key)
  {
    goto LABEL_6;
  }
  v14 = scn_default_log();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    __ResourceManagerRemoveResidentMeshSourceData_cold_2(v14, v15, v16, v17, v18, v19, v20, v21);
LABEL_6:
  if (!a3)
  {
    v22 = scn_default_log();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_FAULT))
      C3DEngineContextRenderScene_cold_2(v22, v23, v24, v25, v26, v27, v28, v29);
  }
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), key);
  if (Value)
  {
    C3DRendererContextDeleteBufferObject(a3, (uint64_t)Value);
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 40), key);
  }
}

void __RemoveVRAMResourceFromDic(uint64_t a1, const void *a2, CFDictionaryRef *a3)
{
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *AnyRendererContext;

  if (!a2)
  {
    v5 = scn_default_log();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
      __RemoveVRAMResourceFromDic_cold_1(v5, v6, v7, v8, v9, v10, v11, v12);
  }
  AnyRendererContext = __GetAnyRendererContext((uint64_t)a3);
  __ResourceManagerReleaseResidentVRAMResource(a3, a2, AnyRendererContext);
}

uint64_t C3DTextureGetTypeID()
{
  if (C3DTextureGetTypeID_onceToken != -1)
    dispatch_once(&C3DTextureGetTypeID_onceToken, &__block_literal_global_44);
  return C3DTextureGetTypeID_typeID;
}

void _C3DTextureCFFinalize(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 104);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 104) = 0;
  }
}

CFStringRef _C3DTextureCFCopyFormatDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DTexture>"));
}

CFStringRef _C3DTextureCFCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DTexture>"));
}

uint64_t C3DTextureCreate()
{
  uint64_t Instance;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (C3DTextureGetTypeID_onceToken != -1)
    dispatch_once(&C3DTextureGetTypeID_onceToken, &__block_literal_global_44);
  Instance = C3DTypeCreateInstance_(C3DTextureGetTypeID_typeID, 0x60uLL);
  if (!Instance)
  {
    v1 = scn_default_log();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_FAULT))
      C3DTextureCreate_cold_1(v1, v2, v3, v4, v5, v6, v7, v8);
  }
  *(_BYTE *)(Instance + 80) |= 1u;
  *(_BYTE *)(Instance + 60) = 0;
  return Instance;
}

double C3DTextureGetSize(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DRendererContextApplyTextureSampler_cold_2(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(double *)(a1 + 64);
}

uint64_t C3DTextureGetIOSurface(uint64_t a1)
{
  return *(_QWORD *)(a1 + 104);
}

void C3DTextureSetSize(uint64_t a1, double a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DRendererContextApplyTextureSampler_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(double *)(a1 + 64) = a2;
}

void C3DTextureSetOffset(uint64_t a1, double a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DRendererContextApplyTextureSampler_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(double *)(a1 + 72) = a2;
}

uint64_t C3DTextureGetID(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DRendererContextApplyTextureSampler_cold_2(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return C3DVRAMResourceGetID(a1);
}

void C3DTextureSetID(uint64_t a1, unsigned int a2, int a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (!a1)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      C3DRendererContextApplyTextureSampler_cold_2(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  C3DVRAMResourceSetID(a1, a2);
  *(_DWORD *)(a1 + 88) = a3;
}

void C3DTextureSetFormat(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DRendererContextApplyTextureSampler_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(_DWORD *)(a1 + 92) = a2;
}

void C3DTextureSetServerStorageSize(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DRendererContextApplyTextureSampler_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(_DWORD *)(a1 + 84) = a2;
}

uint64_t C3DTextureGetServerStorageSize(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DRendererContextApplyTextureSampler_cold_2(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(unsigned int *)(a1 + 84);
}

uint64_t C3DTextureGetTargetMode(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DRendererContextApplyTextureSampler_cold_2(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(unsigned int *)(a1 + 88);
}

uint64_t C3DTextureIsAttachment(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 60);
}

uint64_t C3DTextureHasAlpha(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DRendererContextApplyTextureSampler_cold_2(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return (*(unsigned __int8 *)(a1 + 80) >> 1) & 1;
}

void C3DTextureSetHasAlpha(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DRendererContextApplyTextureSampler_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (a2)
    v12 = 2;
  else
    v12 = 0;
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a1 + 80) & 0xFD | v12;
}

void C3D::SSAOMinMaxOffsetPass::SSAOMinMaxOffsetPass(C3D::ComputePass *a1, C3D::RenderGraph *a2, C3D::Pass *a3, uint64_t a4)
{
  _QWORD *v5;

  C3D::ComputePass::ComputePass(a1, a2, a3);
  *v5 = off_1EA599D58;
  v5[14] = 0;
  v5[15] = a4;
}

const char *C3D::SSAOMinMaxOffsetPass::name(C3D::SSAOMinMaxOffsetPass *this)
{
  return "SSAOMinMaxOffsetPass";
}

uint64_t C3D::SSAOMinMaxOffsetPass::setup(C3D::Pass ***this)
{
  uint64_t v2;
  C3D::PassDescriptor *v3;
  C3D::PassDescriptor *v4;
  uint64_t result;
  __int16 v6;

  C3D::Pass::setInputCount((C3D::Pass *)this, 1u);
  C3D::Pass::setOutputCount((C3D::Pass *)this, 1u);
  *(_QWORD *)(C3D::PassDescriptor::inputAtIndex((C3D::PassDescriptor *)(this + 4), 0) + 8) = "SSAO-DepthNormal";
  v2 = C3D::PassDescriptor::outputAtIndex((C3D::PassDescriptor *)(this + 4), 0);
  *(_QWORD *)(v2 + 8) = "SSAO-MinMaxOffset";
  *(_WORD *)(v2 + 28) = 13;
  v3 = (C3D::PassDescriptor *)C3D::Pass::descriptor(*this[15]);
  *(_WORD *)(v2 + 16) = *(unsigned __int16 *)(C3D::PassDescriptor::outputAtIndex(v3, 0) + 16)
                      / (unint64_t)this[15][2];
  v4 = (C3D::PassDescriptor *)C3D::Pass::descriptor(*this[15]);
  result = C3D::PassDescriptor::outputAtIndex(v4, 0);
  *(_WORD *)(v2 + 18) = *(unsigned __int16 *)(result + 18) / (unint64_t)this[15][2];
  if (*(_BYTE *)(v2 + 24) == 5)
    v6 = 6;
  else
    v6 = 1;
  *((_WORD *)this + 19) = v6;
  return result;
}

void C3D::SSAOMinMaxOffsetPass::compile(C3D::SSAOMinMaxOffsetPass *this)
{
  uint64_t RenderContext;
  void *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  C3D::RenderGraphResourceManager *v7;
  uint64_t v8;
  _QWORD *v9;
  id v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  RenderContext = C3DEngineContextGetRenderContext(*((_QWORD *)this + 2));
  v3 = (void *)-[SCNMTLRenderContext resourceManager](RenderContext);
  v4 = *(unsigned __int8 *)(*((_QWORD *)this + 15) + 24) | (2 * *(unsigned __int8 *)(*((_QWORD *)this + 15) + 25)) | (4 * *(_QWORD *)(*((_QWORD *)this + 15) + 16)) | (*(_QWORD *)(*((_QWORD *)this + 15) + 8) << 6);
  v5 = 0xC6A4A7935BD1E995
     * ((*(uint64_t (**)(C3D::SSAOMinMaxOffsetPass *))(*(_QWORD *)this + 64))(this) ^ 0x35253C9ADE8F4CA8 ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v4) ^ ((0xC6A4A7935BD1E995 * v4) >> 47))));
  v6 = (0xC6A4A7935BD1E995 * (v5 ^ (v5 >> 47))) ^ ((0xC6A4A7935BD1E995 * (v5 ^ (v5 >> 47))) >> 47);
  v7 = *(C3D::RenderGraphResourceManager **)(*((_QWORD *)this + 3) + 128);
  v8 = C3D::RenderGraphResourceManager::get(v7, v6);
  *((_QWORD *)this + 14) = v8;
  if (!v8)
  {
    v9 = (_QWORD *)operator new();
    *v9 = &off_1EA59A508;
    v9[1] = 0;
    v9[2] = 0;
    v9[3] = 0;
    *((_QWORD *)this + 14) = v9;
    C3D::RenderGraphResourceManager::set((uint64_t)v7, v6, (uint64_t)v9);
    v10 = objc_alloc_init(MEMORY[0x1E0CC6AA0]);
    v11 = *((_QWORD *)this + 14);
    v12 = *(void **)(v11 + 24);
    *(_QWORD *)(v11 + 24) = v10;
    if (v12)

    objc_msgSend((id)C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*((_QWORD *)this + 14) + 24), "setConstantValue:type:withName:", *((_QWORD *)this + 15) + 8, 29, CFSTR("SSAOSampleCount"));
    objc_msgSend((id)C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*((_QWORD *)this + 14) + 24), "setConstantValue:type:withName:", *((_QWORD *)this + 15) + 16, 29, CFSTR("SSAODownSample"));
    objc_msgSend((id)C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*((_QWORD *)this + 14) + 24), "setConstantValue:type:withName:", *((_QWORD *)this + 15) + 24, 53, CFSTR("SSAOCameraOrtho"));
    objc_msgSend((id)C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*((_QWORD *)this + 14) + 24), "setConstantValue:type:withName:", *((_QWORD *)this + 15) + 25, 53, CFSTR("SSAOVRRendering"));
    v13 = objc_msgSend(v3, "newComputePipelineStateWithFunctionName:constantValues:", CFSTR("scn_ssao_downsample"), C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*((_QWORD *)this + 14) + 24));
    v14 = *((_QWORD *)this + 14);
    v15 = *(void **)(v14 + 16);
    *(_QWORD *)(v14 + 16) = v13;
    if (v15)

  }
}

uint64_t C3D::SSAOMinMaxOffsetPass::execute(C3D::Pass *a1, SCNMTLComputeCommandEncoder **a2)
{
  SCNMTLComputeCommandEncoder *v3;
  void **v4;
  MTLTexture *v5;
  _QWORD *v6;
  uint64_t v7;
  MTLComputePipelineState *v8;

  v3 = *a2;
  v4 = C3D::Pass::inputTextureAtIndex(a1, 0);
  if ((void **)v3->_textures[0] != v4)
  {
    v3->_textures[0] = (MTLTexture *)v4;
    v3->_texturesToBind[0] |= 1uLL;
  }
  v5 = (MTLTexture *)C3D::Pass::outputTextureAtIndex(a1, 0);
  if (v3->_textures[1] != v5)
  {
    v3->_textures[1] = v5;
    v3->_texturesToBind[0] |= 2uLL;
  }
  v6 = C3D::Pass::outputTextureAtIndex(a1, 0);
  v7 = C3D::SmartPtr<SCNMTLComputePipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLComputePipeline *(*((_QWORD *)a1 + 14) + 16);
  v8 = (MTLComputePipelineState *)-[SCNMTLOpenSubdivComputeEvaluator computeEvaluator](v7);
  return SCNMTLComputeCommandEncoder::dispatchOnTexture2D(v3, v6, v8);
}

void C3D::SSAOMinMaxOffsetPassResource::~SSAOMinMaxOffsetPassResource(C3D::SSAOMinMaxOffsetPassResource *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1EA59A508;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)

  v3 = (void *)*((_QWORD *)this + 2);
  if (v3)

}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1EA59A508;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)

  v3 = (void *)*((_QWORD *)this + 2);
  if (v3)

  JUMPOUT(0x1DF0D41C0);
}

C3D::RenderPass *C3D::CompositeARPass::CompositeARPass(C3D::CompositeARPass *this, C3D::RenderGraph *a2, C3D::Pass *a3)
{
  C3D::RenderPass *result;

  result = C3D::RenderPass::RenderPass(this, a2, a3);
  *(_QWORD *)result = off_1EA599138;
  *((_QWORD *)result + 31) = 0;
  *((_QWORD *)result + 32) = 0;
  return result;
}

const char *C3D::CompositeARPass::name(C3D::CompositeARPass *this)
{
  return "CompositeARPass";
}

uint64_t C3D::CompositeARPass::setup(C3D::CompositeARPass *this)
{
  C3D::CompositeARPass *v1;
  uint64_t RenderContext;
  C3D::PassDescriptor *v3;
  unsigned int v4;
  C3D::CompositeARPass *v5;
  C3D::Pass *v6;
  uint64_t v7;
  uint64_t result;
  C3D::Pass *v9;
  uint64_t v10;
  __int128 v11;
  int v12;

  v1 = this;
  RenderContext = C3DEngineContextGetRenderContext(*((_QWORD *)this + 2));
  C3D::Pass::setInputCount(v1, 3u);
  v3 = (C3D::CompositeARPass *)((char *)v1 + 32);
  *(_QWORD *)(C3D::PassDescriptor::inputAtIndex((C3D::CompositeARPass *)((char *)v1 + 32), 0) + 8) = "COLOR";
  *(_QWORD *)(C3D::PassDescriptor::inputAtIndex((C3D::CompositeARPass *)((char *)v1 + 32), 1u) + 8) = "DEPTH";
  *(_BYTE *)(C3D::PassDescriptor::inputAtIndex((C3D::CompositeARPass *)((char *)v1 + 32), 1u) + 64) = 2;
  *(_QWORD *)(C3D::PassDescriptor::inputAtIndex((C3D::CompositeARPass *)((char *)v1 + 32), 2u) + 8) = "BACKGROUND";
  if (-[SCNMTLRenderContext shouldDelegateARCompositing](RenderContext))
    v4 = 2;
  else
    v4 = 1;
  C3D::Pass::setOutputCount(v1, v4);
  *(_QWORD *)(C3D::PassDescriptor::outputAtIndex((C3D::CompositeARPass *)((char *)v1 + 32), 0) + 8) = "COLOR";
  *(_BYTE *)(C3D::PassDescriptor::outputAtIndex((C3D::CompositeARPass *)((char *)v1 + 32), 0) + 65) = 0;
  v5 = v1;
  do
  {
    v6 = v5;
    v5 = (C3D::CompositeARPass *)*((_QWORD *)v5 + 1);
  }
  while (v5);
  C3D::Pass::parentColorDesc(v6, (uint64_t)&v11);
  v7 = C3D::PassDescriptor::outputAtIndex((C3D::CompositeARPass *)((char *)v1 + 32), 0);
  *(_OWORD *)(v7 + 16) = v11;
  *(_DWORD *)(v7 + 32) = v12;
  *(_BYTE *)(C3D::PassDescriptor::outputAtIndex((C3D::CompositeARPass *)((char *)v1 + 32), 0) + 31) = 0;
  result = -[SCNMTLRenderContext shouldDelegateARCompositing](RenderContext);
  if ((_DWORD)result)
  {
    *(_QWORD *)(C3D::PassDescriptor::outputAtIndex((C3D::CompositeARPass *)((char *)v1 + 32), 1u) + 8) = "DEPTH";
    *(_BYTE *)(C3D::PassDescriptor::outputAtIndex((C3D::CompositeARPass *)((char *)v1 + 32), 1u) + 64) = 2;
    do
    {
      v9 = v1;
      v1 = (C3D::CompositeARPass *)*((_QWORD *)v1 + 1);
    }
    while (v1);
    C3D::Pass::parentDepthDesc(v9, (uint64_t)&v11);
    v10 = C3D::PassDescriptor::outputAtIndex(v3, 1u);
    *(_OWORD *)(v10 + 16) = v11;
    *(_DWORD *)(v10 + 32) = v12;
    result = C3D::PassDescriptor::outputAtIndex(v3, 1u);
    *(_BYTE *)(result + 31) = 0;
  }
  return result;
}

void C3D::CompositeARPass::compile(C3D::CompositeARPass *this)
{
  uint64_t RenderContext;
  void *v3;
  float32x4_t *PointOfView;
  const __CFDictionary *Camera;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  C3D::RenderGraphResourceManager *v17;
  uint64_t v18;
  _QWORD *v19;
  id v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  char v40;
  char v41;
  char v42;
  char IsColored;

  RenderContext = C3DEngineContextGetRenderContext(*((_QWORD *)this + 2));
  v3 = (void *)-[SCNMTLRenderContext resourceManager](RenderContext);
  PointOfView = C3DEngineContextGetPointOfView(*((_QWORD *)this + 2));
  if (PointOfView)
  {
    Camera = C3DNodeGetCamera((uint64_t)PointOfView);
    *((_QWORD *)this + 32) = Camera;
    if (Camera)
    {
      if (!C3DEngineContextGetPreferredRenderMode(*((_QWORD *)this + 2)))
        *((_WORD *)this + 19) = C3DEngineContextGetEyeCount(*((_QWORD *)this + 2));
      *((_QWORD *)this + 31) = C3DCameraGetARGrainTexture(*((_QWORD *)this + 32));
      IsColored = C3DCameraGetGrainIsColored(*((_QWORD *)this + 32));
      v6 = *((_QWORD *)this + 31);
      if (v6)
        LOBYTE(v6) = C3DCameraGetGrainIntensity(*((_QWORD *)this + 32)) > 0.0;
      *((_BYTE *)this + 264) = v6;
      v7 = -[SCNMTLRenderContext reverseZ](RenderContext);
      v42 = v7;
      v8 = C3DEngineContextGetViewpointCoordinateSpace(*((_QWORD *)this + 2)) != 2;
      v41 = v8;
      v9 = -[SCNMTLRenderContext shouldDelegateARCompositing](RenderContext);
      v40 = v9;
      v10 = 4;
      if (!v7)
        v10 = 0;
      v11 = v10 | (2 * *((unsigned __int8 *)this + 264));
      v12 = C3D::PassDescriptor::outputAtIndex((C3D::CompositeARPass *)((char *)this + 32), 0);
      v13 = 2048;
      if (!v9)
        v13 = 0;
      v14 = v11 | (8 * *(unsigned __int16 *)(v12 + 28)) | (v8 << 10) | v13;
      v15 = 0xC6A4A7935BD1E995
          * ((*(uint64_t (**)(C3D::CompositeARPass *))(*(_QWORD *)this + 64))(this) ^ 0x35253C9ADE8F4CA8 ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v14) ^ ((0xC6A4A7935BD1E995 * v14) >> 47))));
      v16 = (0xC6A4A7935BD1E995 * (v15 ^ (v15 >> 47))) ^ ((0xC6A4A7935BD1E995 * (v15 ^ (v15 >> 47))) >> 47);
      v17 = *(C3D::RenderGraphResourceManager **)(*((_QWORD *)this + 3) + 128);
      v18 = C3D::RenderGraphResourceManager::get(v17, v16);
      *((_QWORD *)this + 30) = v18;
      if (!v18)
      {
        v19 = (_QWORD *)operator new();
        *v19 = &off_1EA59A208;
        v19[1] = 0;
        v19[3] = 0;
        v19[4] = 0;
        v19[2] = 0;
        *((_QWORD *)this + 30) = v19;
        C3D::RenderGraphResourceManager::set((uint64_t)v17, v16, (uint64_t)v19);
        v20 = objc_alloc_init(MEMORY[0x1E0CC6AA0]);
        v21 = *((_QWORD *)this + 30);
        v22 = *(void **)(v21 + 32);
        *(_QWORD *)(v21 + 32) = v20;
        if (v22)

        objc_msgSend((id)C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*((_QWORD *)this + 30) + 32), "setConstantValue:type:withName:", (char *)this + 264, 53, CFSTR("enableGrain"));
        objc_msgSend((id)C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*((_QWORD *)this + 30) + 32), "setConstantValue:type:withName:", &IsColored, 53, CFSTR("grainIsColored"));
        objc_msgSend((id)C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*((_QWORD *)this + 30) + 32), "setConstantValue:type:withName:", &v42, 53, CFSTR("reverseZ"));
        objc_msgSend((id)C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*((_QWORD *)this + 30) + 32), "setConstantValue:type:withName:", &v41, 53, CFSTR("renderWithViewpoints"));
        objc_msgSend((id)C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*((_QWORD *)this + 30) + 32), "setConstantValue:type:withName:", &v40, 53, CFSTR("shouldDelegateARCompositing"));
        v23 = *((_QWORD *)this + 30);
        *((_QWORD *)&v34 + 1) = objc_msgSend((id)-[SCNMTLResourceManager libraryManager]((uint64_t)v3), "frameworkLibrary", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0);
        *(_QWORD *)&v35 = *(unsigned __int16 *)(C3D::PassDescriptor::outputAtIndex((C3D::CompositeARPass *)((char *)this + 32), 0)+ 28);
        v24 = -[SCNMTLRenderContext shouldDelegateARCompositing](RenderContext);
        v25 = 0;
        if (v24)
          v25 = *(unsigned __int16 *)(C3D::PassDescriptor::outputAtIndex((C3D::CompositeARPass *)((char *)this + 32), 1u)+ 28);
        *(_QWORD *)&v36 = v25;
        *((_QWORD *)&v37 + 1) = C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*((_QWORD *)this + 30) + 32);
        *((_QWORD *)&v38 + 1) = CFSTR("scn_postprocess_AR_vertex");
        *(_QWORD *)&v39 = CFSTR("scn_postprocess_AR_fragment");
        v26 = objc_msgSend(v3, "newRenderPipelineStateWithDesc:", &v33);
        v27 = *(void **)(v23 + 16);
        if (v27 != (void *)v26)
        {
          v28 = v26;
          if (v27)

          *(_QWORD *)(v23 + 16) = v28;
        }
        v29 = (void *)objc_opt_new();
        objc_msgSend(v29, "setDepthWriteEnabled:", 1);
        objc_msgSend(v29, "setDepthCompareFunction:", 7);
        v30 = objc_msgSend((id)-[SCNMTLRenderContext device](RenderContext), "newDepthStencilStateWithDescriptor:", v29);

        v31 = *((_QWORD *)this + 30);
        v32 = *(void **)(v31 + 24);
        *(_QWORD *)(v31 + 24) = v30;
        if (v32)

      }
    }
  }
}

uint64_t C3D::CompositeARPass::execute(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  float v7;
  float GrainScale;
  float v9;
  BOOL v10;
  double v11;
  float v12;
  double v13;
  long double v14;
  long double v15;
  __int128 v16;
  uint64_t v17;
  __n128 ViewportAtIndex;
  int32x4_t v19;
  int32x4_t v20;
  void **v21;
  void **v22;
  void **v23;
  void *v24;
  int32x2_t v25;
  unsigned int v26;
  int32x4_t v27;
  float v28;
  int8x16_t v29;
  int32x4_t v30;
  float v31[4];
  __int128 v32;
  float ARGrainSlice;

  result = C3DEngineContextGetRenderContext(a1[2]);
  if (a1[32])
  {
    v5 = result;
    v6 = *(_QWORD *)a2;
    if (*((_BYTE *)a1 + 264))
    {
      v7 = floor(-[SCNMTLRenderContext renderTime](result) * 30.0);
      GrainScale = C3DCameraGetGrainScale(a1[32]);
      if (GrainScale <= 0.0039062)
        v9 = 1.0;
      else
        v9 = 0.0039062 / GrainScale;
      v10 = -[SCNMTLRenderContext contentScaleFactor](v5) <= 1.0;
      v11 = 2.0;
      if (!v10)
        v11 = 1.0;
      v12 = v11 * v9;
      v28 = v12;
      v31[0] = C3DCameraGetGrainIntensity(a1[32]);
      v13 = v7;
      v14 = sin(v13 * 0.01);
      *(float *)&v14 = fmin(v14 * 4242.0 - floor(v14 * 4242.0), 1.0);
      v26 = LODWORD(v14);
      v15 = sin(v13 * 0.1 + 0.05);
      *(float *)&v15 = fmin(v15 * 4242.0 - floor(v15 * 4242.0), 1.0);
      *(float *)&v16 = v28;
      *((float *)&v16 + 1) = v28;
      *((_QWORD *)&v16 + 1) = __PAIR64__(LODWORD(v15), v26);
      v32 = v16;
      ARGrainSlice = C3DCameraGetARGrainSlice(a1[32]);
    }
    v17 = objc_msgSend((id)C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(a1[30] + 16), "state");
    if (*(_QWORD *)(v6 + 3376) != v17)
    {
      *(_QWORD *)(v6 + 3376) = v17;
      objc_msgSend(*(id *)(v6 + 3392), "setRenderPipelineState:", v17);
    }
    v30 = (int32x4_t)xmmword_1DD009440;
    if (C3DEngineContextGetEyeCount(a1[2]) >= 2
      && !C3DEngineContextGetPreferredRenderMode(a1[2]))
    {
      ViewportAtIndex = C3DEngineContextGetViewportAtIndex(a1[2], *(unsigned __int16 *)(a2 + 16));
      v29 = vextq_s8((int8x16_t)ViewportAtIndex, (int8x16_t)ViewportAtIndex, 8uLL);
      v19 = *(int32x4_t *)(*(uint64_t (**)(_QWORD *))(*a1 + 88))(a1);
      v25 = (int32x2_t)vextq_s8(v29, v29, 8uLL).u64[0];
      *(float32x2_t *)v19.i8 = vdiv_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v29.i8, v25), (float32x2_t)vdup_laneq_s32(v19, 2));
      v27 = v19;
      v20 = *(int32x4_t *)(*(uint64_t (**)(_QWORD *))(*a1 + 88))(a1);
      *(float32x2_t *)v20.i8 = vdiv_f32((float32x2_t)vzip2_s32(*(int32x2_t *)v29.i8, v25), (float32x2_t)vdup_laneq_s32(v20, 3));
      v30 = vzip1q_s32(v27, v20);
    }
    if (-[SCNMTLRenderContext shouldDelegateARCompositing](v5))
      objc_msgSend(*(id *)(v6 + 3392), "setDepthStencilState:", C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(a1[30] + 24));
    SCNMTLRenderCommandEncoder::setVertexBytes((SCNMTLRenderCommandEncoder *)v6, &v30, 0x10uLL, 0);
    SCNMTLRenderCommandEncoder::setFragmentBytes((SCNMTLRenderCommandEncoder *)v6, v31, 0x30uLL, 0);
    v21 = C3D::Pass::inputTextureAtIndex((C3D::Pass *)a1, 0);
    SCNMTLRenderCommandEncoder::setFragmentTexture(v6, v21, 0);
    v22 = C3D::Pass::inputTextureAtIndex((C3D::Pass *)a1, 1u);
    SCNMTLRenderCommandEncoder::setFragmentTexture(v6, v22, 1uLL);
    if ((-[SCNMTLRenderContext shouldDelegateARCompositing](v5) & 1) == 0)
    {
      v23 = C3D::Pass::inputTextureAtIndex((C3D::Pass *)a1, 2u);
      SCNMTLRenderCommandEncoder::setFragmentTexture(v6, v23, 2uLL);
    }
    v24 = (void *)a1[31];
    if (v24)
      SCNMTLRenderCommandEncoder::setFragmentTexture(v6, v24, 3uLL);
    return SCNMTLRenderCommandEncoder::drawFullScreenTriangle((SCNMTLRenderCommandEncoder *)v6);
  }
  return result;
}

void C3D::CompositeARPassResource::~CompositeARPassResource(C3D::CompositeARPassResource *this)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_1EA59A208;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)

  v3 = (void *)*((_QWORD *)this + 3);
  if (v3)

  v4 = (void *)*((_QWORD *)this + 2);
  if (v4)

}

{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_1EA59A208;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)

  v3 = (void *)*((_QWORD *)this + 3);
  if (v3)

  v4 = (void *)*((_QWORD *)this + 2);
  if (v4)

  JUMPOUT(0x1DF0D41C0);
}

void sub_1DCDCCA7C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_1DCDCCBF0(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_1DCDCD6CC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

C3D::RenderPass *C3D::SSRBlurPass::SSRBlurPass(C3D::RenderPass *a1, C3D::RenderGraph *a2, C3D::Pass *a3, uint64_t a4, char a5)
{
  C3D::RenderPass *result;

  result = C3D::RenderPass::RenderPass(a1, a2, a3);
  *(_QWORD *)result = off_1EA598AE8;
  *((_BYTE *)result + 248) = a5;
  return result;
}

const char *C3D::SSRBlurPass::name(C3D::SSRBlurPass *this)
{
  if (*((_BYTE *)this + 248))
    return "SSRBlurPass-Y";
  else
    return "SSRBlurPass-X";
}

uint64_t C3D::SSRBlurPass::setup(C3D::SSRBlurPass *this)
{
  uint64_t v2;
  uint64_t result;

  C3D::Pass::setInputCount(this, 2u);
  *(_QWORD *)(C3D::PassDescriptor::inputAtIndex((C3D::SSRBlurPass *)((char *)this + 32), 0) + 8) = "SSR";
  v2 = C3D::PassDescriptor::inputAtIndex((C3D::SSRBlurPass *)((char *)this + 32), 0);
  *(_WORD *)(v2 + 66) |= 4u;
  *(_QWORD *)(C3D::PassDescriptor::inputAtIndex((C3D::SSRBlurPass *)((char *)this + 32), 1u) + 8) = "lobeFootprint";
  C3D::Pass::setOutputCount(this, 1u);
  result = C3D::PassDescriptor::outputAtIndex((C3D::SSRBlurPass *)((char *)this + 32), 0);
  *(_QWORD *)(result + 8) = "SSR";
  return result;
}

void C3D::SSRBlurPass::compile(C3D::SSRBlurPass *this)
{
  uint64_t RenderContext;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  C3D::RenderGraphResourceManager *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  _OWORD v18[6];
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  _OWORD v36[6];
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;

  RenderContext = C3DEngineContextGetRenderContext(*((_QWORD *)this + 2));
  v3 = (void *)-[SCNMTLRenderContext resourceManager](RenderContext);
  v4 = objc_msgSend((id)-[SCNMTLResourceManager libraryManager]((uint64_t)v3), "frameworkLibrary");
  v5 = (*(uint64_t (**)(C3D::SSRBlurPass *))(*(_QWORD *)this + 64))(this);
  v6 = *(C3D::RenderGraphResourceManager **)(*((_QWORD *)this + 3) + 128);
  v7 = C3D::RenderGraphResourceManager::get(v6, v5);
  *((_QWORD *)this + 30) = v7;
  if (!v7)
  {
    v8 = (_QWORD *)operator new();
    *v8 = &off_1EA599C88;
    v8[1] = 0;
    v8[2] = 0;
    v8[3] = 0;
    *((_QWORD *)this + 30) = v8;
    C3D::RenderGraphResourceManager::set((uint64_t)v6, v5, (uint64_t)v8);
    v9 = C3D::PassDescriptor::outputAtIndex((C3D::SSRBlurPass *)((char *)this + 32), 0);
    v10 = *((_QWORD *)this + 30);
    memset(v36, 0, sizeof(v36));
    v37 = 0;
    v39 = 0u;
    v40 = 0u;
    v41 = 0u;
    v42 = 0u;
    v43 = 0u;
    v44 = 0u;
    v45 = 0u;
    v46 = 0u;
    v47 = 0u;
    v48 = 0u;
    v49 = 0u;
    v50 = 0u;
    v51 = 0u;
    v52 = 0u;
    v53 = 0;
    v38 = v4;
    *(_QWORD *)&v39 = *(unsigned __int16 *)(v9 + 28);
    *((_QWORD *)&v50 + 1) = CFSTR("scn_draw_fullscreen_triangle_vertex");
    *(_QWORD *)&v51 = CFSTR("scn_ssr_blur_x");
    v11 = objc_msgSend(v3, "newRenderPipelineStateWithDesc:", v36);
    v12 = *(void **)(v10 + 16);
    if (v12 != (void *)v11)
    {
      v13 = v11;
      if (v12)

      *(_QWORD *)(v10 + 16) = v13;
    }
    v14 = *((_QWORD *)this + 30);
    memset(v18, 0, sizeof(v18));
    v19 = 0;
    v21 = 0u;
    v22 = 0u;
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    v33 = 0u;
    v34 = 0u;
    v35 = 0;
    v20 = v4;
    *(_QWORD *)&v21 = *(unsigned __int16 *)(v9 + 28);
    *((_QWORD *)&v32 + 1) = CFSTR("scn_draw_fullscreen_triangle_vertex");
    *(_QWORD *)&v33 = CFSTR("scn_ssr_blur_y");
    v15 = objc_msgSend(v3, "newRenderPipelineStateWithDesc:", v18);
    v16 = *(void **)(v14 + 24);
    if (v16 != (void *)v15)
    {
      v17 = v15;
      if (v16)

      *(_QWORD *)(v14 + 24) = v17;
    }
  }
}

uint64_t C3D::SSRBlurPass::execute(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  void **v8;

  v3 = *a2;
  v4 = *(_QWORD *)(a1 + 240);
  if (*(_BYTE *)(a1 + 248))
    v5 = v4 + 24;
  else
    v5 = v4 + 16;
  v6 = objc_msgSend((id)C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(v5), "state");
  if (*(_QWORD *)(v3 + 3376) != v6)
  {
    *(_QWORD *)(v3 + 3376) = v6;
    objc_msgSend(*(id *)(v3 + 3392), "setRenderPipelineState:");
  }
  v7 = C3D::Pass::inputTextureAtIndex((C3D::Pass *)a1, 0);
  SCNMTLRenderCommandEncoder::setFragmentTexture(v3, v7, 0);
  v8 = C3D::Pass::inputTextureAtIndex((C3D::Pass *)a1, 1u);
  SCNMTLRenderCommandEncoder::setFragmentTexture(v3, v8, 1uLL);
  return SCNMTLRenderCommandEncoder::drawFullScreenTriangle((SCNMTLRenderCommandEncoder *)v3);
}

void C3D::SSRBlurPassResource::~SSRBlurPassResource(C3D::SSRBlurPassResource *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1EA599C88;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)

  v3 = (void *)*((_QWORD *)this + 2);
  if (v3)

}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1EA599C88;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)

  v3 = (void *)*((_QWORD *)this + 2);
  if (v3)

  JUMPOUT(0x1DF0D41C0);
}

const char *C3D::CIFilterEffectColorPrefix(C3D *this)
{
  return "SceneKit-CI-effect-color-";
}

const char *C3D::CIFilterEffectDepthPrefix(C3D *this)
{
  return "SceneKit-CI-effect-depth-";
}

uint64_t C3D::CreateCIFilterQuadBlendTechnique(C3D *this, __C3DNode *a2, __C3DEngineContext *a3)
{
  uint64_t v5;
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  _QWORD *PassNamed;
  uint64_t Scene;
  uint64_t v12[11];
  _QWORD v13[8];

  v5 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@%p"), CFSTR("SceneKit-CI-effect-depth-"), this);
  v6 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@%p"), CFSTR("SceneKit-CI-effect-color-"), this);
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = ___ZN3C3D32CreateCIFilterQuadBlendTechniqueEP9__C3DNodeP18__C3DEngineContext_block_invoke;
  v13[3] = &unk_1EA5A0A58;
  v13[4] = &unk_1EA5FF6A8;
  v13[5] = v5;
  v13[6] = v6;
  v13[7] = this;
  v7 = (const void *)C3DJsonNamed(CFSTR("C3DFXCIFilterPassMetalRenderGraph.json"), (uint64_t)v13);
  v8 = C3DFXTechniqueCreateWithDescription(v7, (uint64_t)this);
  PassNamed = (_QWORD *)C3DFXTechniqueGetPassNamed(v8, (CFTypeRef)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@%p"), CFSTR("SceneKit_renderCIQuad"), this));
  C3DFXPassSetInitializeCallback((uint64_t)PassNamed, (uint64_t)C3D::_initializeRenderFilteredBuffer);
  C3DFXPassSetWillExecuteCallback((uint64_t)PassNamed, (uint64_t)C3D::_willRenderFilteredBuffer);
  C3DFloorSetReflectionCategoryBitMask((uint64_t)PassNamed, (uint64_t)C3D::_blendFilteredBuffer);
  v12[0] = (uint64_t)PassNamed;
  v12[1] = v8;
  v12[2] = (uint64_t)this;
  v12[3] = (uint64_t)a2;
  v12[4] = 0;
  v12[5] = 0;
  memset(&v12[7], 0, 32);
  v12[6] = 0xBFF0000000000000;
  C3DFXPassInitialize(v12, 0);
  Scene = C3DEngineContextGetScene((uint64_t)a2);
  C3DFXContextResolveNodeReferences(PassNamed, Scene);
  return v8;
}

uint64_t ___ZN3C3D32CreateCIFilterQuadBlendTechniqueEP9__C3DNodeP18__C3DEngineContext_block_invoke(_QWORD *a1, void *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v4 = (void *)a1[4];
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v11;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v11 != v7)
          objc_enumerationMutation(v4);
        a2 = (void *)objc_msgSend(a2, "stringByReplacingOccurrencesOfString:withString:", *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * i), objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@%p"), *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * i), a1[7]));
      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v6);
  }
  return objc_msgSend((id)objc_msgSend(a2, "stringByReplacingOccurrencesOfString:withString:", CFSTR("SceneKit-CI-effect-depth"), a1[5]), "stringByReplacingOccurrencesOfString:withString:", CFSTR("SceneKit-CI-effect-color"), a1[6]);
}

void C3D::_initializeRenderFilteredBuffer(uint64_t *a1)
{
  uint64_t Program;

  Program = C3DFXPassGetProgram(*a1);
  C3DFXProgramSetOpaque(Program, 0);
}

void C3D::_willRenderFilteredBuffer(uint64_t a1)
{
  uint64_t RenderGraph;
  uint64_t v3;
  uint64_t StackAllocator;
  float32x4_t **v5;
  uint64_t v6;
  float32x4_t *v7;
  const char *v8;
  uint64_t CullingContext;
  float32x4_t *WorldMatrix;
  float v11;
  float v12;
  float v13;
  uint64_t v14;
  float64x2_t v20;
  float v22;
  float32x4_t v23;
  float v24;
  float32x4_t v25[4];
  _OWORD v26[4];
  char v27[8];
  unsigned int v28;
  float32x4_t **v29;

  RenderGraph = C3DEngineContextGetRenderGraph(*(_QWORD *)(a1 + 24));
  v3 = *(_QWORD *)(RenderGraph + 120);
  StackAllocator = C3DEngineContextGetStackAllocator(*(_QWORD *)(a1 + 24));
  C3D::RenderGraph::getPredecessors(RenderGraph, v3, StackAllocator, (uint64_t)v27);
  if (v28)
  {
    v5 = v29;
    v6 = 8 * v28;
    while (1)
    {
      v7 = *v5;
      if ((*(uint64_t (**)(float32x4_t *))(*v5)->i64[0])(*v5))
      {
        v8 = (const char *)(*(uint64_t (**)(float32x4_t *))v7->i64[0])(v7);
        if (!strcmp(v8, C3D::kCIFilterPassName) && v7[10].i64[0] == *(_QWORD *)(a1 + 16))
          break;
      }
      ++v5;
      v6 -= 8;
      if (!v6)
        return;
    }
    CullingContext = C3D::DrawNodesPass::getCullingContext((C3D::DrawNodesPass *)v7[8].i64[0]);
    WorldMatrix = C3DNodeGetWorldMatrix(*(float32x4_t **)(a1 + 16));
    C3DMatrix4x4Mult((uint64_t)WorldMatrix, (float32x4_t *)(CullingContext + (*(_QWORD *)(a1 + 72) << 6) + 3088), v26);
    v25[0] = (float32x4_t)v26[0];
    v25[1] = (float32x4_t)v26[1];
    v25[2] = (float32x4_t)v26[2];
    v25[3] = (float32x4_t)v26[3];
    C3DVector3MultMatrix4x4(v25, (float32x4_t)0);
    v12 = fmax(*(double *)(CullingContext + 4752)/ (*(double *)(CullingContext + 4752) - *(double *)(CullingContext + 4744))- *(double *)(CullingContext + 4752)* *(double *)(CullingContext + 4744)/ (*(double *)(CullingContext + 4744) - *(double *)(CullingContext + 4752))/ v11, 0.0);
    v24 = v12;
    v13 = 0.0;
    if (C3DReverseZIsSupported())
    {
      v13 = 1.0;
      v24 = 1.0 - v12;
    }
    v14 = *(_QWORD *)(a1 + 16);
    C3DFXTechniqueSetValueForSymbol(*(_QWORD *)(a1 + 8), (void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@%p"), CFSTR("C3D-CIFilter_middleZ"), v14), &v24);
    __asm { FMOV            V3.2D, #0.5 }
    v20 = vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)(CullingContext + 4648)), _Q3);
    __asm { FMOV            V3.2D, #-1.0 }
    v23 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vaddq_f64(vdivq_f64(vcvtq_f64_f32(*(float32x2_t *)v7[9].f32), v20), _Q3)), vdivq_f64(vcvt_hight_f64_f32(v7[9]), v20));
    C3DFXTechniqueSetValueForSymbol(*(_QWORD *)(a1 + 8), (void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@%p"), CFSTR("C3D-CIFilter_extent"), v14), &v23);
    v22 = v13;
    C3DFXTechniqueSetValueForSymbol(*(_QWORD *)(a1 + 8), (void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@%p"), CFSTR("C3D-CIFilter_reverseZ"), v14), &v22);
  }
}

double C3D::_blendFilteredBuffer(uint64_t *a1)
{
  uint64_t v2;
  uint64_t Stats;
  double v4;
  uint64_t QuadMesh;
  uint64_t RenderContext;
  uint64_t v7;
  double result;

  v2 = a1[3];
  Stats = C3DEngineContextGetStats(v2);
  v4 = CACurrentMediaTime();
  QuadMesh = C3DEngineContextGetQuadMesh(v2);
  RenderContext = C3DEngineContextGetRenderContext(v2);
  *(_QWORD *)(a1[8] + 24) = QuadMesh;
  *(_QWORD *)(a1[8] + 48) = C3DMeshGetElementAtIndex(QuadMesh, 0, 1);
  -[SCNMTLRenderContext drawRenderElement:withPass:](RenderContext, a1[8], *a1);
  v7 = a1[8];
  *(_QWORD *)(v7 + 24) = 0;
  *(_QWORD *)(v7 + 48) = 0;
  result = *(double *)(Stats + 160) + CACurrentMediaTime() - v4;
  *(double *)(Stats + 160) = result;
  return result;
}

uint64_t C3DImageProxyGetTypeID()
{
  if (C3DImageProxyGetTypeID_onceToken != -1)
    dispatch_once(&C3DImageProxyGetTypeID_onceToken, &__block_literal_global_45);
  return C3DImageProxyGetTypeID_typeID;
}

void _C3DImageProxyCFFinalize(uint64_t a1)
{
  CFNumberRef v1;
  __CFNotificationCenter *LocalCenter;
  const void *v3;
  uint64_t valuePtr;

  valuePtr = a1;
  v1 = CFNumberCreate(0, kCFNumberLongType, &valuePtr);
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterPostNotification(LocalCenter, CFSTR("kC3DNotificationImageProxyWillDie"), v1, 0, 1u);
  CFRelease(v1);
  v3 = *(const void **)(valuePtr + 48);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(valuePtr + 48) = 0;
  }
}

CFStringRef _C3DImageProxyCFCopyFormatDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DImageProxy>"));
}

CFStringRef _C3DImageProxyCFCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DImageProxy>"));
}

uint64_t C3DImageProxyCreate(char a1)
{
  uint64_t Instance;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (C3DImageProxyGetTypeID_onceToken != -1)
    dispatch_once(&C3DImageProxyGetTypeID_onceToken, &__block_literal_global_45);
  Instance = C3DTypeCreateInstance_(C3DImageProxyGetTypeID_typeID, 0x30uLL);
  if (!Instance)
  {
    v3 = scn_default_log();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT))
      C3DTextureCreate_cold_1(v3, v4, v5, v6, v7, v8, v9, v10);
  }
  *(_BYTE *)(Instance + 56) = a1;
  return Instance;
}

uint64_t C3DImageProxyCreateTextureProxy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t Source;
  uint64_t result;

  if (!a1)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      C3DImageProxyCreateTextureProxy_cold_1(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 16);
  if (!v14)
    return 0;
  Source = C3DImageProxyGetSource(a1);
  result = v14(a3, a2, Source);
  if (result)
    *(_QWORD *)(result + 104) = a1;
  return result;
}

uint64_t C3DImageProxyGetSource(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DImageProxyCreateTextureProxy_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 48);
}

uint64_t C3DImageProxyIsOpaque(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t Source;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DImageProxyCreateTextureProxy_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  v10 = *(uint64_t (**)(uint64_t))(a1 + 24);
  if (!v10)
    return 1;
  Source = C3DImageProxyGetSource(a1);
  return v10(Source);
}

uint64_t C3DImageProxyIsPremultiplied(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t Source;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DImageProxyCreateTextureProxy_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  v10 = *(uint64_t (**)(uint64_t))(a1 + 32);
  if (!v10)
    return 1;
  Source = C3DImageProxyGetSource(a1);
  return v10(Source);
}

uint64_t C3DImageProxyGetCaptureDeviceInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t Source;

  if (!a1)
  {
    v8 = scn_default_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      C3DImageProxyCreateTextureProxy_cold_1(v8, v9, v10, v11, v12, v13, v14, v15);
  }
  if (!*(_QWORD *)(a1 + 40))
  {
    v16 = scn_default_log();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
      C3DImageProxyGetCaptureDeviceInfo_cold_1(v16, v17, v18, v19, v20, v21, v22, v23);
  }
  v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 40);
  Source = C3DImageProxyGetSource(a1);
  return v24(Source, a2, a3, a4);
}

uint64_t C3DImageProxyGetSourceType(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DImageProxyCreateTextureProxy_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(unsigned __int8 *)(a1 + 56);
}

CFTypeRef C3DImageProxySetSource(uint64_t a1, CFTypeRef cf, char a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  CFTypeRef result;

  if (!a1)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      C3DImageProxyCreateTextureProxy_cold_1(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  result = *(CFTypeRef *)(a1 + 48);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 48) = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *(_QWORD *)(a1 + 48) = result;
    *(_BYTE *)(a1 + 56) = a3;
  }
  return result;
}

__n128 C3DImageProxySetCallbacks(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 result;
  __int128 v13;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DImageProxyCreateTextureProxy_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  result = *(__n128 *)a2;
  v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 32) = v13;
  return result;
}

void _C3DTextureProxyCFFinalize(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 96);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 96) = 0;
  }
}

CFStringRef _C3DTextureProxyCFCopyFormatDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DTextureProxy>"));
}

CFStringRef _C3DTextureProxyCFCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DTextureProxy>"));
}

uint64_t C3DTextureProxyCreate()
{
  uint64_t Instance;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (C3DTextureProxyGetTypeID_onceToken != -1)
    dispatch_once(&C3DTextureProxyGetTypeID_onceToken, &__block_literal_global_7_0);
  Instance = C3DTypeCreateInstance_(C3DTextureProxyGetTypeID_typeID, 0x60uLL);
  if (!Instance)
  {
    v1 = scn_default_log();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_FAULT))
      C3DTextureCreate_cold_1(v1, v2, v3, v4, v5, v6, v7, v8);
  }
  return Instance;
}

uint64_t C3DTextureProxyGetOpenGLTexture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t Source;

  if (!a1)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      C3DTextureCreate_cold_1(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 64);
  if (!v14)
    return 0;
  Source = C3DTextureProxyGetSource(a1);
  return v14(a2, Source, a3);
}

uint64_t C3DTextureProxyGetSource(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __deleteTextureProxies_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 96);
}

uint64_t C3DTextureProxyGetMetalTexture(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t Source;

  if (!a1)
  {
    v8 = scn_default_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      C3DTextureCreate_cold_1(v8, v9, v10, v11, v12, v13, v14, v15);
  }
  v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 80);
  if (!v16)
    return 0;
  Source = C3DTextureProxyGetSource(a1);
  return v16(a2, Source, a3, a4);
}

void C3DTextureProxyRenderInCurrentContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t Source;

  if (!a1)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      __deleteTextureProxies_cold_1(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 88);
  if (v14)
  {
    Source = C3DTextureProxyGetSource(a1);
    v14(a2, Source, a3);
  }
}

CFTypeRef C3DTextureProxySetSource(uint64_t a1, CFTypeRef cf)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef result;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __deleteTextureProxies_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  result = *(CFTypeRef *)(a1 + 96);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 96) = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *(_QWORD *)(a1 + 96) = result;
  }
  return result;
}

void C3DTextureProxySetCallbacks(uint64_t a1, __int128 *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __deleteTextureProxies_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (a2)
  {
    v12 = *a2;
    *(_OWORD *)(a1 + 80) = a2[1];
  }
  else
  {
    v12 = 0uLL;
    *(_OWORD *)(a1 + 80) = 0u;
  }
  *(_OWORD *)(a1 + 64) = v12;
}

C3D::RenderPass *C3D::SSRCompositePass::SSRCompositePass(C3D::RenderPass *a1, C3D::RenderGraph *a2, C3D::Pass *a3, uint64_t a4)
{
  C3D::RenderPass *result;

  result = C3D::RenderPass::RenderPass(a1, a2, a3);
  *(_QWORD *)result = off_1EA599818;
  *((_QWORD *)result + 31) = a4;
  return result;
}

const char *C3D::SSRCompositePass::name(C3D::SSRCompositePass *this)
{
  return "SSRCompositePass";
}

double C3D::SSRCompositePass::setup(C3D::SSRCompositePass *this)
{
  uint64_t v2;
  double result;
  __int128 v4;
  int v5;

  C3D::Pass::setInputCount(this, 4u);
  C3D::Pass::setOutputCount(this, 1u);
  *(_QWORD *)(C3D::PassDescriptor::inputAtIndex((C3D::SSRCompositePass *)((char *)this + 32), 0) + 8) = "COLOR";
  *(_QWORD *)(C3D::PassDescriptor::inputAtIndex((C3D::SSRCompositePass *)((char *)this + 32), 1u) + 8) = "Radiance";
  *(_QWORD *)(C3D::PassDescriptor::inputAtIndex((C3D::SSRCompositePass *)((char *)this + 32), 2u) + 8) = "ReflectanceRoughness";
  *(_QWORD *)(C3D::PassDescriptor::inputAtIndex((C3D::SSRCompositePass *)((char *)this + 32), 3u) + 8) = "SSR";
  v2 = C3D::PassDescriptor::outputAtIndex((C3D::SSRCompositePass *)((char *)this + 32), 0);
  *(_QWORD *)(v2 + 8) = "COLOR";
  *(_BYTE *)(v2 + 65) = 0;
  C3D::Pass::parentColorDesc(this, (uint64_t)&v4);
  result = *(double *)&v4;
  *(_OWORD *)(v2 + 16) = v4;
  *(_DWORD *)(v2 + 32) = v5;
  *(_WORD *)(v2 + 66) &= 0xFFFCu;
  return result;
}

void C3D::SSRCompositePass::compile(C3D::SSRCompositePass *this)
{
  uint64_t RenderContext;
  void *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  C3D::RenderGraphResourceManager *v7;
  uint64_t v8;
  _QWORD *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _OWORD v17[6];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  id v31;
  uint64_t v32;
  const __CFString *v33;
  const __CFString *v34;
  __int128 v35;
  __int128 v36;

  RenderContext = C3DEngineContextGetRenderContext(*((_QWORD *)this + 2));
  v3 = (void *)-[SCNMTLRenderContext resourceManager](RenderContext);
  v4 = (*(uint64_t (**)(C3D::SSRCompositePass *))(*(_QWORD *)this + 64))(this);
  v5 = 0xC6A4A7935BD1E995
     * ((0xC6A4A7935BD1E995 * (v4 ^ 0x35253C9ADE8F4CA8)) ^ ((0xC6A4A7935BD1E995 * (v4 ^ 0x35253C9ADE8F4CA8)) >> 47));
  v6 = v5 ^ (v5 >> 47);
  v7 = *(C3D::RenderGraphResourceManager **)(*((_QWORD *)this + 3) + 128);
  v8 = C3D::RenderGraphResourceManager::get(v7, v6);
  *((_QWORD *)this + 30) = v8;
  if (!v8)
  {
    v9 = (_QWORD *)operator new();
    v9[1] = 0;
    v9[2] = 0;
    *v9 = &off_1EA59A398;
    *((_QWORD *)this + 30) = v9;
    C3D::RenderGraphResourceManager::set((uint64_t)v7, v6, (uint64_t)v9);
    v10 = objc_alloc_init(MEMORY[0x1E0CC6AA0]);
    objc_msgSend(v10, "setConstantValue:type:withName:", *((_QWORD *)this + 31) + 4, 29, CFSTR("SSRDownSample"));
    v11 = objc_msgSend((id)-[SCNMTLResourceManager libraryManager]((uint64_t)v3), "frameworkLibrary");
    v12 = *(unsigned __int16 *)(C3D::PassDescriptor::inputAtIndex((C3D::SSRCompositePass *)((char *)this + 32), 0) + 28);
    v13 = *((_QWORD *)this + 30);
    memset(v17, 0, sizeof(v17));
    v18 = 0;
    v19 = v11;
    v20 = v12;
    v30 = 0u;
    v29 = 0u;
    v28 = 0u;
    v27 = 0u;
    v26 = 0u;
    v25 = 0u;
    v24 = 0u;
    v23 = 0u;
    v22 = 0u;
    v21 = 0u;
    v31 = v10;
    v32 = 0;
    v33 = CFSTR("scn_draw_fullscreen_triangle_vertex");
    v34 = CFSTR("scn_ssr_composite_frag");
    v35 = 0u;
    v36 = 0u;
    v14 = objc_msgSend(v3, "newRenderPipelineStateWithDesc:", v17);
    v15 = *(void **)(v13 + 16);
    if (v15 != (void *)v14)
    {
      v16 = v14;
      if (v15)

      *(_QWORD *)(v13 + 16) = v16;
    }

  }
}

uint64_t C3D::SSRCompositePass::execute(C3D::Pass *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void **v6;
  void **v7;
  void **v8;

  v3 = *a2;
  v4 = objc_msgSend((id)C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*((_QWORD *)a1 + 30) + 16), "state");
  if (*(_QWORD *)(v3 + 3376) != v4)
  {
    *(_QWORD *)(v3 + 3376) = v4;
    objc_msgSend(*(id *)(v3 + 3392), "setRenderPipelineState:", v4);
  }
  v5 = C3D::Pass::inputTextureAtIndex(a1, 0);
  SCNMTLRenderCommandEncoder::setFragmentTexture(v3, v5, 0);
  v6 = C3D::Pass::inputTextureAtIndex(a1, 1u);
  SCNMTLRenderCommandEncoder::setFragmentTexture(v3, v6, 1uLL);
  v7 = C3D::Pass::inputTextureAtIndex(a1, 2u);
  SCNMTLRenderCommandEncoder::setFragmentTexture(v3, v7, 2uLL);
  v8 = C3D::Pass::inputTextureAtIndex(a1, 3u);
  SCNMTLRenderCommandEncoder::setFragmentTexture(v3, v8, 3uLL);
  return SCNMTLRenderCommandEncoder::drawFullScreenTriangle((SCNMTLRenderCommandEncoder *)v3);
}

void C3D::SSRCompositePassResource::~SSRCompositePassResource(C3D::SSRCompositePassResource *this)
{
  void *v1;

  *(_QWORD *)this = &off_1EA59A398;
  v1 = (void *)*((_QWORD *)this + 2);
  if (v1)

}

{
  void *v1;

  *(_QWORD *)this = &off_1EA59A398;
  v1 = (void *)*((_QWORD *)this + 2);
  if (v1)

  JUMPOUT(0x1DF0D41C0);
}

void _C3DEnginePipelineCFFinalize(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t SharedInstance;
  _BYTE *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DEngineContextRenderScene_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  SharedInstance = C3DNotificationCenterGetSharedInstance();
  C3DNotificationCenterRemoveObserver(SharedInstance, a1, CFSTR("kC3DNotificationNodeWillDie"), 0);
  v11 = (_BYTE *)a1[4];
  if (v11)
  {
    C3DEngineNotificationQueueStopObserving(v11);
    v12 = (const void *)a1[4];
    if (v12)
    {
      CFRelease(v12);
      a1[4] = 0;
    }
  }
  v13 = (const void *)a1[3];
  if (v13)
  {
    CFRelease(v13);
    a1[3] = 0;
  }
  v14 = (const void *)a1[5];
  if (v14)
  {
    CFRelease(v14);
    a1[5] = 0;
  }
  v15 = (const void *)a1[6];
  if (v15)
  {
    CFRelease(v15);
    a1[6] = 0;
  }
}

CFStringRef _C3DEnginePipelineCFCopyFormatDescription(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DEnginePipeline %p>"), a1);
}

CFStringRef _C3DEnginePipelineCFCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DEnginePipeline %p>"), a1);
}

void C3DEnginePipelineSyncNodeAttribute(uint64_t a1, _QWORD *a2, void *cf1, uint64_t a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t Attribute;
  char v25;
  char v26;
  NSObject *v27;
  int RenderableAttributeHash;
  uint64_t v29;
  uint64_t v30;

  if (!cf1)
  {
    v8 = scn_default_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      C3DEnginePipelineSyncNodeAttribute_cold_2(v8, v9, v10, v11, v12, v13, v14, v15);
    v16 = scn_default_log();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
      C3DEnginePipelineSyncNodeAttribute_cold_2(v16, v17, v18, v19, v20, v21, v22, v23);
  }
  if (CFEqual(cf1, CFSTR("kMeshKey"))
    || CFEqual(cf1, CFSTR("kCameraKey"))
    || CFEqual(cf1, CFSTR("kLightKey"))
    || CFEqual(cf1, CFSTR("kDeformerStackKey"))
    || CFEqual(cf1, CFSTR("rendererDelegate")))
  {
    CFRetain(a2);
    if (CFEqual(cf1, CFSTR("kMeshKey")))
      goto LABEL_22;
    Attribute = (uint64_t)C3DEntityGetAttribute((uint64_t)a2, cf1);
    if (!Attribute)
    {
      if (!CFEqual(cf1, CFSTR("kDeformerStackKey")))
      {
        if ((C3DNodeIsHidden((uint64_t)a2) & 1) != 0)
          goto LABEL_22;
        goto LABEL_21;
      }
      Attribute = C3DNodeGetDeformerStack((uint64_t)a2);
    }
    if ((C3DNodeIsHidden((uint64_t)a2) & 1) != 0)
    {
      if (!Attribute)
      {
LABEL_22:
        if (CFEqual(cf1, CFSTR("kMeshKey"))
          || CFEqual(cf1, CFSTR("rendererDelegate"))
          || CFEqual(cf1, CFSTR("kLightKey")))
        {
          if (CFEqual(cf1, CFSTR("kMeshKey")))
          {
            v25 = 0;
            v26 = 0;
          }
          else if (CFEqual(cf1, CFSTR("rendererDelegate")))
          {
            v25 = 1;
            v26 = 1;
          }
          else if (CFEqual(cf1, CFSTR("kLightKey")))
          {
            v25 = 0;
            v26 = 4;
          }
          else
          {
            v27 = scn_default_log();
            if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
              C3DEnginePipelineSyncNodeAttribute_cold_1((uint64_t)cf1, v27);
            v25 = 0;
            v26 = -1;
          }
          RenderableAttributeHash = C3DNodeGetRenderableAttributeHash((uint64_t)a2);
          if ((v25 & 1) != 0 || !RenderableAttributeHash || ((1 << v26) & RenderableAttributeHash) != 0)
          {
            v29 = *(_QWORD *)(a4 + 8);
            v30 = C3DGetScene(a2);
            if (v30 == C3DEngineContextGetScene(v29) && (C3DNodeIsHiddenOrIsHiddenByAncestor((uint64_t)a2) & 1) == 0)
              C3DEnginePipelineUpdateNode(a1, v29, (uint64_t)a2);
          }
        }
        CFRelease(a2);
        return;
      }
    }
    else if (Attribute)
    {
      C3DEnginePipelineAddNodeForKeyIfAbsent(a1, a2, cf1);
      goto LABEL_22;
    }
LABEL_21:
    C3DEnginePipelineRemoveNodeForKey(a1, a2, cf1);
    goto LABEL_22;
  }
}

void C3DEnginePipelineUpdateNode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t i;
  const void *ElementInSpanAtIndex;
  _WORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  const void *v16;
  int RenderableAttributeHash;

  v6 = *(unsigned int *)(a3 + 228);
  if ((_DWORD)v6)
  {
    for (i = 0; i != v6; ++i)
    {
      ElementInSpanAtIndex = (const void *)C3DRendererElementStoreGetElementInSpanAtIndex(*(_QWORD *)(a1 + 48), *(_QWORD *)(a3 + 224), i);
      __UntrackRendererElementsDependencies(a1, ElementInSpanAtIndex);
    }
  }
  v9 = *(_WORD **)(a3 + 232);
  if (v9)
  {
    v10 = (unsigned __int16)*v9;
    if (*v9)
    {
      v11 = 0;
      do
      {
        v12 = *(_QWORD *)(a3 + 232) + 12 * v11;
        v13 = *(unsigned int *)(v12 + 16);
        if ((_DWORD)v13)
        {
          v14 = 0;
          v15 = *(unsigned int *)(v12 + 12) | (unint64_t)(v13 << 32);
          do
          {
            v16 = (const void *)C3DRendererElementStoreGetElementInSpanAtIndex(*(_QWORD *)(a1 + 48), v15, v14);
            if (v16)
              __UntrackRendererElementsDependencies(a1, v16);
            ++v14;
          }
          while (v13 != v14);
        }
        ++v11;
      }
      while (v11 != v10);
    }
  }
  C3DRendererElementStoreDeallocateSpanForNode(a1, a3);
  if ((C3DNodeIsHidden(a3) & 1) == 0)
  {
    RenderableAttributeHash = C3DNodeGetRenderableAttributeHash(a3);
    if (RenderableAttributeHash)
      _C3DEnginePipelineAllocateAndTrackRendererElements(a1, a2, a3, RenderableAttributeHash);
  }
}

uint64_t C3DEnginePipelineInvalidateAllProgramHashCode(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
    return C3DSceneEnumerateEngineContexts(result, (uint64_t)&__block_literal_global_4);
  return result;
}

uint64_t __ResyncAllNodes(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  _QWORD v4[6];

  v2 = *a1;
  v1 = a1[1];
  result = C3DEngineContextGetScene(v1);
  if (result)
  {
    result = C3DSceneGetRootNode(result);
    if (result)
    {
      v4[0] = MEMORY[0x1E0C809B0];
      v4[1] = 3221225472;
      v4[2] = ____ResyncAllNodes_block_invoke;
      v4[3] = &__block_descriptor_48_e315_q16__0____C3DNode____C3DEntity____CFRuntimeBase_QAQ__v____CFString_____CFString_____CFDictionary_____C3DScene_q_____C3DNode_____C3DNode_____C3DNode_i____C3DMatrix4x4__16f__4_____4__________C3DMatrix4x4_BfQib1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b3b1______SS_I_________C3DGeometry_____C3DDeformerStack_f_____8l;
      v4[4] = v2;
      v4[5] = v1;
      return C3DNodeApplyHierarchy(result, (uint64_t)v4);
    }
  }
  return result;
}

void C3DEnginePipelineRemoveNodeFromRendering(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t i;
  const void *ElementInSpanAtIndex;
  _WORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  const void *v14;

  v4 = *(unsigned int *)(a2 + 228);
  if ((_DWORD)v4)
  {
    for (i = 0; i != v4; ++i)
    {
      ElementInSpanAtIndex = (const void *)C3DRendererElementStoreGetElementInSpanAtIndex(*(_QWORD *)(a1 + 48), *(_QWORD *)(a2 + 224), i);
      __UntrackRendererElementsDependencies(a1, ElementInSpanAtIndex);
    }
  }
  v7 = *(_WORD **)(a2 + 232);
  if (v7)
  {
    v8 = (unsigned __int16)*v7;
    if (*v7)
    {
      v9 = 0;
      do
      {
        v10 = *(_QWORD *)(a2 + 232) + 12 * v9;
        v11 = *(unsigned int *)(v10 + 16);
        if ((_DWORD)v11)
        {
          v12 = 0;
          v13 = *(unsigned int *)(v10 + 12) | (unint64_t)(v11 << 32);
          do
          {
            v14 = (const void *)C3DRendererElementStoreGetElementInSpanAtIndex(*(_QWORD *)(a1 + 48), v13, v12);
            if (v14)
              __UntrackRendererElementsDependencies(a1, v14);
            ++v12;
          }
          while (v11 != v12);
        }
        ++v9;
      }
      while (v9 != v8);
    }
  }
  __UntrackNodeDependencies(a1, (const void *)a2);
  C3DRendererElementStoreDeallocateSpanForNode(a1, a2);
}

uint64_t C3DEnginePipelineUpdateNodeRendererElements(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t ElementInSpanAtIndex;

  v3 = *(unsigned int *)(a2 + 228);
  if ((_DWORD)v3)
  {
    v5 = result;
    v6 = 0;
    v7 = *(_QWORD *)(result + 48);
    v8 = *(unsigned int *)(a2 + 224) | (unint64_t)(v3 << 32);
    do
    {
      ElementInSpanAtIndex = C3DRendererElementStoreGetElementInSpanAtIndex(v7, v8, v6);
      result = C3DEnginePipelineSyncRendererElement(v5, ElementInSpanAtIndex, a3);
      ++v6;
    }
    while (v3 != v6);
  }
  return result;
}

void __HandleGeometryDidChangeNotifications(uint64_t a1, __int16 a2, __int128 *a3)
{
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t RootNode;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v15 = *a3;
  if (a2 == 3 || (v5 = scn_default_log(), !os_log_type_enabled(v5, OS_LOG_TYPE_FAULT)))
  {
    if ((a2 & 0x400) == 0)
      goto LABEL_5;
    goto LABEL_4;
  }
  __HandleGeometryDidChangeNotifications_cold_1(v5, v6, v7, v8, v9, v10, v11, v12);
  if ((a2 & 0x400) != 0)
  {
LABEL_4:
    v16 = xmmword_1EA5A0B18;
    v17 = 0;
    *(_QWORD *)&v18 = v15;
    *((_QWORD *)&v18 + 1) = a1;
    RootNode = C3DSceneGetRootNode(*(_QWORD *)(v15 + 16));
    C3DNodeIterateTree(RootNode, (uint64_t (**)(uint64_t, uint64_t))&v16, 0, (uint64_t)&v18);
  }
LABEL_5:
  if ((a2 & 0x800) != 0)
  {
    v16 = xmmword_1EA5A0B30;
    v17 = 0;
    v18 = v15;
    v19 = a1;
    v14 = C3DSceneGetRootNode(*(_QWORD *)(v15 + 16));
    C3DNodeIterateTree(v14, (uint64_t (**)(uint64_t, uint64_t))&v16, 0, (uint64_t)&v18);
  }
}

uint64_t __InvalidateRendererElementsHashCodeForGeometry(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  if (C3DNodeGetGeometry(a1) == v4)
    C3DEnginePipelineUpdateNodeRendererElements(v3, a1, 3);
  return 0;
}

uint64_t __RebuildRendererElementsForGeometry(_DWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  if (C3DNodeGetGeometry((uint64_t)a1) == v5)
  {
    C3DEnginePipelineRemoveNodeFromRendering(v3, (uint64_t)a1);
    C3DEnginePipelineAddNodeToRendering(v3, v4, a1);
  }
  return 0;
}

void __HandleLightDidChangeNotifications(uint64_t a1, __int16 a2, __int128 *a3)
{
  __int128 v5;
  NSObject *v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t RootNode;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = *a3;
  if (a2 != 4
    && (v16 = *a3, v6 = scn_default_log(), v7 = os_log_type_enabled(v6, OS_LOG_TYPE_FAULT), v5 = v16, v7))
  {
    __HandleLightDidChangeNotifications_cold_1(v6, v8, v9, v10, v11, v12, v13, v14);
    v5 = v16;
    if ((a2 & 0x200) == 0)
      return;
  }
  else if ((a2 & 0x200) == 0)
  {
    return;
  }
  v17 = xmmword_1EA5A0B48;
  v18 = 0;
  v19 = v5;
  v20 = a1;
  RootNode = C3DSceneGetRootNode(*(_QWORD *)(v5 + 16));
  C3DNodeIterateTree(RootNode, (uint64_t (**)(uint64_t, uint64_t))&v17, 0, (uint64_t)&v19);
}

uint64_t __RebuildRendererElementsForLight(_DWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  const __CFDictionary *v5;

  v3 = *a2;
  v4 = a2[1];
  v5 = (const __CFDictionary *)a2[2];
  if (C3DNodeGetLight((uint64_t)a1) == v5)
  {
    C3DEnginePipelineRemoveNodeFromRendering(v3, (uint64_t)a1);
    C3DEnginePipelineAddNodeToRendering(v3, v4, a1);
  }
  return 0;
}

uint64_t __ResyncRendererElements(uint64_t a1, uint64_t a2)
{
  return C3DEnginePipelineSyncRendererElement(a2, a1, 16);
}

void __HandleNodeWillDieNotification(uint64_t a1, uint64_t a2, __CFString *a3, uint64_t a4)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const __CFDictionary *v14;
  _QWORD context[3];

  context[2] = *MEMORY[0x1E0C80C00];
  if (CFSTR("kC3DNotificationNodeWillDie") != a3)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      __HandleNodeWillDieNotification_cold_1(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  context[0] = a2;
  context[1] = a4;
  v14 = *(const __CFDictionary **)(a2 + 24);
  if (v14)
    CFDictionaryApplyFunction(v14, (CFDictionaryApplierFunction)__RemoveValueFromAttributesCachedList, context);
}

BOOL C3DEnginePipelineAddNodeForKeyIfAbsent(uint64_t a1, const void *a2, void *key)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const __CFSet *NodesForKey;
  int v31;

  if (!a1 && (v6 = scn_default_log(), os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)))
  {
    C3DEngineContextRenderScene_cold_1(v6, v7, v8, v9, v10, v11, v12, v13);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v14 = scn_default_log();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    C3DGeometryTrackNode_cold_2(v14, v15, v16, v17, v18, v19, v20, v21);
LABEL_6:
  if (!key)
  {
    v22 = scn_default_log();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_FAULT))
      C3DAnimationManagerAddAnimationPlayerForKey_cold_1(v22, v23, v24, v25, v26, v27, v28, v29);
  }
  NodesForKey = (const __CFSet *)__C3DEnginePipelineGetNodesForKey(a1, key, 1, 0);
  v31 = CFSetContainsValue(NodesForKey, a2);
  if (!v31)
    CFSetAddValue(NodesForKey, a2);
  return v31 == 0;
}

void __UntrackRendererElementsDependencies(uint64_t a1, const void *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const void *Material;
  const void *v13;
  __CFSet *Value;
  const __CFSet *v15;

  if (!a2)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      _C3DRendererElementSync_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  Material = (const void *)C3DRendererElementGetMaterial((uint64_t)a2);
  if (Material)
  {
    v13 = Material;
    Value = (__CFSet *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), Material);
    if (Value)
    {
      v15 = Value;
      CFSetRemoveValue(Value, a2);
      if (!CFSetGetCount(v15))
        CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 40), v13);
    }
  }
}

uint64_t __UntrackNodeDependencies(uint64_t a1, const void *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a2)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DGeometryTrackNode_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  C3DEnginePipelineRemoveNodeForKey(a1, a2, CFSTR("kCameraKey"));
  return C3DEnginePipelineRemoveNodeForKey(a1, a2, CFSTR("kDeformerStackKey"));
}

uint64_t C3DEnginePipelineRemoveNodeForKey(uint64_t a1, const void *a2, void *key)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  const __CFSet *v31;

  if (!a1 && (v6 = scn_default_log(), os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)))
  {
    C3DEngineContextRenderScene_cold_1(v6, v7, v8, v9, v10, v11, v12, v13);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v14 = scn_default_log();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    C3DGeometryTrackNode_cold_2(v14, v15, v16, v17, v18, v19, v20, v21);
LABEL_6:
  if (!key)
  {
    v22 = scn_default_log();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_FAULT))
      C3DAnimationManagerAddAnimationPlayerForKey_cold_1(v22, v23, v24, v25, v26, v27, v28, v29);
  }
  result = (uint64_t)__C3DEnginePipelineGetNodesForKey(a1, key, 0, 0);
  if (result)
  {
    v31 = (const __CFSet *)result;
    if (CFSetGetCount((CFSetRef)result) < 1)
    {
      return 0;
    }
    else
    {
      result = CFSetContainsValue(v31, a2);
      if ((_DWORD)result)
      {
        CFSetRemoveValue(v31, a2);
        return 1;
      }
    }
  }
  return result;
}

uint64_t __RemoveValueFromAttributesCachedList(void *key, uint64_t a2, uint64_t a3)
{
  return C3DEnginePipelineRemoveNodeForKey(*(_QWORD *)a3, *(const void **)(a3 + 8), key);
}

void C3DEnginePipelineRenderSubTree(_QWORD *a1, uint64_t a2)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t FXContext;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t Pass;
  uint64_t RendererElementState;
  uint64_t ProgramHashCodeStore;
  uint64_t v27;
  unsigned int Capacity;
  uint64_t v29;
  unint64_t LightingSystem;
  unsigned __int8 LightingSetProgramHashCodes;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t Element;
  float32x4_t *v36;
  __int16 v37;
  float32x4_t *WorldMatrix;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  uint64_t CategoryBitMask;
  unsigned __int8 v45;
  _QWORD *v46;
  unsigned int PreferredRenderMode;
  uint64_t ProgramHashCodeForRenderElement;
  _QWORD *v49;
  uint64_t Mesh;
  const void *MeshElement;
  __C3DGeometry *Geometry;
  uint64_t Material;
  uint64_t v54;
  uint64_t v55;
  const void *v56;
  double v57;
  _QWORD *ParticleManager;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  double v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int MaxDrawingCommand;
  unsigned int v69;
  double v70;
  uint64_t WarmUpAbortHandler;
  BOOL v72;
  unsigned int v73;
  unsigned int *v74;
  unsigned int v75;
  uint64_t v76;
  int ShowsAuthoringEnvironment;
  _BOOL4 v78;
  id AuthoringEnvironment;
  __n128 v80;
  uint64_t ControllerManager;
  uint64_t v82;
  unsigned int *v83;
  unsigned int v84;
  uint64_t v85;
  float32x4_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v90;
  void *SortSystem;
  uint64_t RendererContextGL;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t RenderContext;
  int InfiniteLightSet;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _BYTE *v104;
  uint64_t v105;
  uint64_t Stats;
  int v107;
  _BOOL4 IsClusteredShadingEnabled;
  unint64_t v109;
  _QWORD v110[5];
  float32x4_t v111;
  float32x4_t v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  uint64_t v117;
  float32x4_t v118;
  float32x4_t v119;
  int v120;
  float32x4_t v121;
  int32x4_t v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;
  _QWORD v128[4];

  v128[1] = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v3 = scn_default_log();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT))
      __ApplyMaterialDidChange_cold_1(v3, v4, v5, v6, v7, v8, v9, v10);
  }
  v11 = a1[1];
  v12 = a1[2];
  RenderContext = C3DEngineContextGetRenderContext(v11);
  FXContext = C3DEngineContextGetFXContext(v11);
  SortSystem = (void *)C3DEngineContextGetSortSystem(v11);
  v14 = *(unsigned __int8 *)(FXContext + 120);
  Stats = C3DEngineContextGetStats(v11);
  v15 = *(_QWORD *)(*a1 + 48);
  if (!v12)
  {
    v16 = scn_default_log();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
      C3DEnginePipelineRenderSubTree_cold_1(v16, v17, v18, v19, v20, v21, v22, v23);
  }
  Pass = C3DFXPassInstanceGetPass(v12);
  RendererContextGL = C3DEngineContextGetRendererContextGL(v11);
  v90 = v15;
  if (RendererContextGL && (RendererElementState = C3DEngineContextGetRendererElementState(v11)) != 0)
  {
    v101 = RendererElementState;
    C3DRendererElementStateBeginProcessing(RendererElementState, Pass, v11);
    v93 = 0;
  }
  else
  {
    v101 = 0;
    v93 = 1;
  }
  v104 = a1;
  v94 = Pass;
  v95 = FXContext;
  v96 = v11;
  v107 = C3DFXPassRequiresLighting(*(_QWORD *)(v12 + 4736));
  ProgramHashCodeStore = C3DEngineContextGetProgramHashCodeStore(*(_QWORD *)(v12 + 4816));
  v27 = *(_QWORD *)(*(_QWORD *)(v12 + 80) + 48);
  Capacity = C3DRendererElementStoreGetCapacity(v27);
  C3DProgramHashCodeStoreSetCapacity(ProgramHashCodeStore, Capacity);
  IsClusteredShadingEnabled = C3DEngineContextIsClusteredShadingEnabled(*(_QWORD *)(v12 + 4816));
  v29 = C3DEngineContextGetFXContext(*(_QWORD *)(v12 + 4816));
  LightingSystem = C3DSceneGetLightingSystem(*(_QWORD *)(v12 + 4808));
  v87 = v12 + 80;
  C3DLightingSystemBeginQueries(LightingSystem, v12 + 80 + ((unint64_t)*(unsigned __int8 *)(v29 + 120) << 6) + 3088, *(_QWORD *)(v12 + 4816));
  v127 = 0;
  v125 = 0u;
  v126 = 0u;
  v123 = 0u;
  v124 = 0u;
  v121 = 0u;
  v122 = 0u;
  C3DLightingSystemGetLightingContext(LightingSystem, *(_QWORD *)(v12 + 4816), (uint64_t)&v121);
  v128[0] = 0;
  v120 = 0;
  v98 = LightingSystem;
  InfiniteLightSet = C3DLightingSystemGetInfiniteLightSet(LightingSystem, v128, &v120);
  if (InfiniteLightSet)
  {
    C3DLightingSystemCheckLightingSetTextureUsage(LightingSystem, (uint64_t)v128);
    LightingSetProgramHashCodes = C3DLightingSystemGetLightingSetProgramHashCodes(LightingSystem, (uint64_t)v128, &v121.i32[1]);
    v121.i16[0] = (LightingSetProgramHashCodes << 7) | v121.i16[0] & 0x807F;
  }
  v88 = v14;
  v97 = v12 + 16 * v14;
  v32 = *(unsigned int *)(v97 + 5000);
  v105 = v12;
  if ((_DWORD)v32)
  {
    v33 = *(unsigned int **)(v97 + 4992);
    v102 = ProgramHashCodeStore;
    v103 = v27;
    do
    {
      v34 = *v33++;
      LightingSystem = LightingSystem & 0xFFFFFFFF00000000 | v34;
      Element = C3DRendererElementStoreGetElement(v27, LightingSystem);
      if (!C3DRendererElementIsRendererDelegate(Element))
      {
        v36 = *(float32x4_t **)(Element + 8);
        v37 = *(_WORD *)(Element + 72);
        if ((v37 & 0x40) != 0)
        {
          if (!IsClusteredShadingEnabled)
          {
            if ((InfiniteLightSet & 1) != 0)
            {
              *(_QWORD *)(Element + 56) = v128[0];
            }
            else
            {
              v111 = 0u;
              v112 = 0u;
              C3DNodeGetLocalBoundingBox((uint64_t)v36, &v111);
              WorldMatrix = C3DNodeGetWorldMatrix(v36);
              v118 = 0u;
              v119 = 0u;
              v39 = WorldMatrix[1];
              v40 = WorldMatrix[2];
              v41 = vaddq_f32(WorldMatrix[3], vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v39, *(float32x2_t *)v111.f32, 1), *WorldMatrix, v111.f32[0]), v40, v111, 2));
              v41.i32[3] = 1.0;
              v42 = v112;
              v42.i32[1] = v112.i32[0];
              v42.i32[2] = v112.i32[0];
              v43 = vaddq_f32(vaddq_f32(vabsq_f32(vmulq_f32(*WorldMatrix, v42)), vabsq_f32(vmulq_f32((float32x4_t)vuzp2q_s32(vdupq_lane_s32(*(int32x2_t *)v112.f32, 1), (int32x4_t)v112), v39))), vabsq_f32(vmulq_f32((float32x4_t)vzip2q_s32(vtrn1q_s32((int32x4_t)v112, (int32x4_t)v112), (int32x4_t)v112), v40)));
              v118 = v41;
              v119 = v43;
              CategoryBitMask = C3DNodeGetCategoryBitMask((uint64_t)v36);
              C3DLightingSystemQuery(v98, &v118, CategoryBitMask, (_QWORD *)(Element + 56));
              v45 = C3DLightingSystemGetLightingSetProgramHashCodes(v98, Element + 56, &v121.i32[1]);
              v121.i16[0] = (v45 << 7) | v121.i16[0] & 0x807F;
              v37 = *(_WORD *)(Element + 72);
            }
          }
          *(_WORD *)(Element + 72) = (8 * v121.i16[0]) & 0x380 | v37 & 0xFC7F;
        }
        v46 = (_QWORD *)C3DFXPassInstanceGetPass(v12);
        PreferredRenderMode = C3DEngineContextGetPreferredRenderMode(*(_QWORD *)(v12 + 4816));
        ProgramHashCodeForRenderElement = C3DProgramHashCodeStoreGetProgramHashCodeForRenderElement(ProgramHashCodeStore, (unsigned __int16 *)Element, v46, PreferredRenderMode);
        if (ProgramHashCodeForRenderElement)
        {
          if (v107)
          {
            if (!IsClusteredShadingEnabled)
              goto LABEL_29;
            v115 = v125;
            v116 = v126;
            v117 = v127;
            v111 = v121;
            v112 = (float32x4_t)v122;
            v113 = v123;
            v114 = v124;
            if (!C3DProgramHashCodeMatchLightHashCodesAndLightingContext(ProgramHashCodeForRenderElement, (unsigned __int16 *)&v111))goto LABEL_29;
          }
        }
        else
        {
          v49 = *(_QWORD **)(v12 + 4736);
          if (!v49 || !C3DFXPassGetOverridingProgramHashCode(0, v49, (unsigned __int16 *)Element))
          {
LABEL_29:
            Mesh = C3DRendererElementGetMesh(Element);
            MeshElement = C3DRendererElementGetMeshElement(Element);
            Geometry = (__C3DGeometry *)C3DRendererElementGetGeometry(Element);
            Material = C3DRendererElementGetMaterial(Element);
            v54 = *(_QWORD *)(Element + 8);
            if (v54)
            {
              if ((*(_BYTE *)(v54 + 221) & 0x10) != 0)
              {
                v55 = *(_QWORD *)(Element + 40);
                if (v55)
                  C3DFXTechniqueEnsureThatPassesShouldExecute(v55);
              }
            }
            v12 = v105;
            v109 = ((unint64_t)*(unsigned __int8 *)(v12 + 24) << 16) | ((unint64_t)((8
                                                                                                 * (*(_BYTE *)(v12 + 27) & 3)) & 0x9F | (*(unsigned __int16 *)(Element + 72) >> 11) & 7 | (32 * (*(_BYTE *)(v12 + 28) & 3u))) << 24) | C3DEngineContextGetCommonProfileConditioners(*(_QWORD *)(v105 + 4816)) | v109 & 0xFFFFFFFF00000000;
            v56 = (const void *)C3DProgramHashCodeCreate(v36, Geometry, Mesh, (uint64_t)MeshElement, &v121, Material, v109);
            ProgramHashCodeStore = v102;
            C3DProgramHashCodeStoreRegisterProgramForRendererElement(v102, (unsigned int *)Element, v56, *(_QWORD *)(v105 + 4736), 0);
            if (v56)
              CFRelease(v56);
            v27 = v103;
          }
        }
      }
      --v32;
    }
    while (v32);
  }
  if (C3DFXPassGetDrawInstruction(*(_QWORD *)v12) != 6)
  {
    v57 = CACurrentMediaTime();
    ParticleManager = C3DSceneGetParticleManager(*(_QWORD *)(v12 + 4808), 0);
    if (ParticleManager)
    {
      v59 = (uint64_t)ParticleManager;
      if ((C3DFXPassGetLayerMask(*(_QWORD *)v12) & 1) != 0)
        C3DParticleManagerCull(v59, v87, v96, v88, 0, 0);
    }
    *(double *)(Stats + 120) = *(double *)(Stats + 120) + CACurrentMediaTime() - v57;
  }
  if (v107)
  {
    v60 = C3DSceneGetLightingSystem(*(_QWORD *)(v12 + 4808));
    C3DLightingSystemEndQueries(v60);
  }
  v61 = *(unsigned int *)(v97 + 5000);
  v62 = *(_QWORD *)(v97 + 4992);
  v63 = CACurrentMediaTime();
  C3DSortSystemSyncKeys((uint64_t)SortSystem, v96, (unsigned int *)v62, v61, 0);
  C3DSortSystemSort(SortSystem, v96, (void *)v62, v61);
  *(double *)(Stats + 152) = *(double *)(Stats + 152) + CACurrentMediaTime() - v63;
  if (C3DEngineContextGetMaxDrawingCommand(v96))
  {
    v64 = C3DEngineContextGetStats(v96);
    v65 = C3DEngineContextGetMaxDrawingCommand(v96) + ~*(_DWORD *)(v64 + 12);
    if (v61 >= v65)
      v66 = v65;
    else
      v66 = v61;
    v67 = 0;
    if (C3DEngineContextGetIsolateMode(v96) && v64)
    {
      v61 = (v61 + *(_DWORD *)(v64 + 12) + 1);
      MaxDrawingCommand = C3DEngineContextGetMaxDrawingCommand(v96);
      v69 = v66 - 1;
      if (!v66)
        v69 = 0;
      if (v61 >= MaxDrawingCommand)
        v67 = v69;
      else
        v67 = 0;
    }
  }
  else
  {
    v67 = 0;
    v66 = v61;
  }
  v70 = CACurrentMediaTime();
  if (RenderContext)
  {
    v104[40] = v107;
    -[SCNMTLRenderContext processRendererElements:count:engineIterationContext:](RenderContext, v62, v66, (uint64_t)v104);
  }
  else
  {
    WarmUpAbortHandler = C3DEngineContextGetWarmUpAbortHandler(v96);
    v72 = v66 >= v67;
    v73 = v66 - v67;
    if (v73 != 0 && v72)
    {
      v61 = WarmUpAbortHandler;
      v74 = (unsigned int *)(v62 + 4 * v67);
      do
      {
        v75 = *v74++;
        v62 = v62 & 0xFFFFFFFF00000000 | v75;
        v76 = C3DRendererElementStoreGetElement(v90, v62);
        C3DRendererElementStateProcessRendererElement(v101, v76, (uint64_t)v104);
        if (v61 && ((*(uint64_t (**)(unint64_t))(v61 + 16))(v61) & 1) != 0)
          break;
        ++*(_DWORD *)(Stats + 12);
        --v73;
      }
      while (v73);
    }
  }
  *(double *)(Stats + 152) = *(double *)(Stats + 152) + CACurrentMediaTime() - v70;
  if (RendererContextGL)
    ShowsAuthoringEnvironment = C3DRendererContextGetShowsAuthoringEnvironment(RendererContextGL);
  else
    ShowsAuthoringEnvironment = 0;
  v78 = RenderContext;
  if (RenderContext)
    v78 = -[SCNMTLRenderContext showsAuthoringEnvironment](RenderContext);
  if (v78 | ShowsAuthoringEnvironment)
  {
    AuthoringEnvironment = C3DEngineContextGetAuthoringEnvironment(v96, 1);
    if (C3DAuthoringEnvironmentShouldDisplayConstraints((uint64_t)AuthoringEnvironment))
    {
      ControllerManager = C3DSceneGetControllerManager(*(_QWORD *)(*(_QWORD *)v104 + 16));
      C3DConstraintManagerAppendAuthoringInfo(ControllerManager, (uint64_t)AuthoringEnvironment);
    }
    if (*(_QWORD *)(v95 + 248) == v94)
    {
      v82 = *(unsigned int *)(v105 + 5000);
      if ((_DWORD)v82)
      {
        v83 = *(unsigned int **)(v105 + 4992);
        do
        {
          v84 = *v83++;
          v61 = v61 & 0xFFFFFFFF00000000 | v84;
          v85 = C3DRendererElementStoreGetElement(v90, v61);
          v86 = *(float32x4_t **)(v85 + 8);
          if (v86)
            C3DAuthoringEnvironmentAppendDebugNode((uint64_t)AuthoringEnvironment, v86, v85);
          --v82;
        }
        while (v82);
      }
      v110[0] = MEMORY[0x1E0C809B0];
      v110[1] = 3221225472;
      v110[2] = __C3DEnginePipelineRenderSubTree_block_invoke;
      v110[3] = &__block_descriptor_40_e315_q16__0____C3DNode____C3DEntity____CFRuntimeBase_QAQ__v____CFString_____CFString_____CFDictionary_____C3DScene_q_____C3DNode_____C3DNode_____C3DNode_i____C3DMatrix4x4__16f__4_____4__________C3DMatrix4x4_BfQib1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b3b1______SS_I_________C3DGeometry_____C3DDeformerStack_f_____8l;
      v110[4] = AuthoringEnvironment;
      C3DNodeApplyHierarchy(a2, (uint64_t)v110);
      C3DAuthoringEnvironmentDrawZbufferDependant((uint64_t)AuthoringEnvironment);
    }
    if (v105 == *(_QWORD *)(v95 + 256))
      C3DAuthoringEnvironmentDrawZbufferIndependant((uint64_t)AuthoringEnvironment, v80);
    C3DAuthoringEnvironmentDrawPending((uint64_t)AuthoringEnvironment);
  }
  if ((v93 & 1) == 0)
    C3DRendererElementStateEndProcessing(v101, v94, v96);
}

uint64_t C3DEnginePipelineInvalidateAllSkinnersTransfromTreeHandles(uint64_t result)
{
  *(_BYTE *)(result + 59) = 1;
  return result;
}

uint64_t C3DTriangle3PointAtIndex(uint64_t a1, unsigned int a2)
{
  return a1 + 16 * a2;
}

BOOL C3DTriangle3BarycentricCoordinates(_OWORD *a1, __int128 *a2, void *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _BOOL8 v7;
  NSObject *v8;
  uint8_t v10[8];
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  v4 = a1[1];
  v11 = *(_QWORD *)a1;
  v12 = DWORD2(v3);
  v13 = 1065353216;
  v14 = v4;
  v15 = DWORD2(v4);
  v16 = 1065353216;
  v5 = a1[2];
  v17 = *((_QWORD *)a1 + 4);
  v18 = DWORD2(v5);
  v19 = 1065353216;
  v6 = *a2;
  v20 = *(_QWORD *)a2;
  v21 = DWORD2(v6);
  v22 = 1065353216;
  v7 = C3DGaussianSolve((uint64_t)&v11, 4u, 3, a3);
  if (!v7)
  {
    v8 = scn_default_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_1DCCB8000, v8, OS_LOG_TYPE_DEFAULT, "Warning: C3DTriangle3BarycentricCoordinates: unable to solve the equation", v10, 2u);
    }
  }
  return v7;
}

BOOL C3DTriangle3ContainsPoint(float32x4_t *a1, float32x4_t *a2)
{
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  _BOOL8 result;
  float32x4_t v16;
  float v17;
  float32x4_t v18;
  float v19;
  float32x4_t v20;
  float v21;

  v2 = vsubq_f32(a1[1], *a1);
  v3 = vsubq_f32(a1[2], *a1);
  v4 = vsubq_f32(*a2, *a1);
  v5 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v3, (int32x4_t)v3), (int8x16_t)v3, 0xCuLL);
  v6 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v4, (int32x4_t)v4), (int8x16_t)v4, 0xCuLL);
  v7 = vnegq_f32(v3);
  v8 = vmlaq_f32(vmulq_f32(v6, v7), v4, v5);
  v9 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v2, (int32x4_t)v2), (int8x16_t)v2, 0xCuLL);
  v10 = vmulq_f32(vmlaq_f32(vmulq_f32(v9, v7), v2, v5), v8);
  if (vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2), v10)).f32[0] < 0.0)return 0;
  v11 = vnegq_f32(v2);
  v12 = vmlaq_f32(vmulq_f32(v6, v11), v4, v9);
  v13 = vmlaq_f32(vmulq_f32(v5, v11), v3, v9);
  v14 = vmulq_f32(v13, v12);
  if (vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 2), v14)).f32[0] < 0.0)return 0;
  result = 0;
  v16 = vmulq_f32(v13, v13);
  v17 = sqrtf(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2), v16)).f32[0]);
  v18 = vmulq_f32(v8, v8);
  v19 = sqrtf(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 2), v18)).f32[0])/ v17;
  if (v19 <= 1.0)
  {
    v20 = vmulq_f32(v12, v12);
    v21 = sqrtf(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 2), v20)).f32[0])/ v17;
    if (v21 <= 1.0)
      return (float)(v19 + v21) <= 1.0;
  }
  return result;
}

void C3D::BlitPass::BlitPass(C3D::BlitPass *this, C3D::RenderGraph *a2, C3D::Pass *a3)
{
  uint64_t v3;

  C3D::Pass::Pass(this, a2, a3);
  *(_QWORD *)v3 = &unk_1EA59A618;
  *(_DWORD *)(v3 + 32) = 4;
}

float compute_sh(uint64_t a1, unsigned int a2, int a3, int a4, uint64_t a5)
{
  double v6;
  uint64_t v7;
  unsigned int v8;
  double v9;
  float v10;
  float v11;
  uint64_t v19;
  float v20;
  uint64_t v21;
  float32x4_t v22;
  float32x2_t v23;
  float32x4_t v24;
  float32x2_t v25;
  float32x2_t v26;
  float32x4_t v27;
  double v29;
  float32x4_t v30;
  float *v31;
  float32x4_t *v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  int v36;
  __int128 *v37;
  __int128 v38;
  _OWORD v40[16];
  int v41;
  float32x2_t v42;
  float v43;
  uint64_t v44;
  float v45;
  float v46;
  float v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  LODWORD(v6) = 0;
  v7 = (a4 * a4);
  memset(v40, 0, sizeof(v40));
  if (a2)
  {
    v8 = 0;
    v9 = (float)a2;
    v6 = 1.0;
    v10 = 1.0 / v9 + -1.0;
    v11 = (1.0 - 1.0 / v9 + 1.0 - 1.0 / v9) / (v9 + -1.0);
    __asm
    {
      FMOV            V4.4S, #-1.0
      FMOV            V5.4S, #1.0
    }
    _S17 = 3.0;
    do
    {
      v19 = 0;
      v20 = v10 + (float)((float)v8 * v11);
      LODWORD(v21) = _Q4.i32[0];
      v22 = _Q5;
      do
      {
        *(float *)_Q24.i32 = v10 + (float)((float)v19 * v11);
        v23.f32[0] = *(float *)_Q24.i32;
        switch(a3)
        {
          case 0:
            v22.f32[1] = -v20;
            v24 = v22;
            v24.f32[2] = -*(float *)_Q24.i32;
            break;
          case 1:
            *((float *)&v21 + 1) = -v20;
            v24.i64[0] = v21;
            v24.i64[1] = _Q24.i64[0];
            break;
          case 2:
            v24 = _Q5;
            v24.f32[2] = v10 + (float)((float)v8 * v11);
            v24.i32[0] = _Q24.i32[0];
            break;
          case 3:
            v24 = _Q4;
            v24.f32[0] = v10 + (float)((float)v19 * v11);
            v24.f32[2] = -v20;
            break;
          case 4:
            v24.i64[1] = _Q5.i64[1];
            goto LABEL_11;
          case 5:
            *(float *)_Q24.i32 = -*(float *)_Q24.i32;
            v24.i64[1] = _Q4.i64[1];
LABEL_11:
            v24.i32[0] = _Q24.i32[0];
            v24.f32[1] = -v20;
            break;
          default:
            v24 = 0uLL;
            break;
        }
        if (a4 < 1)
          goto LABEL_17;
        v41 = 1049652929;
        if (a4 != 1)
        {
          _Q24 = (int32x4_t)vmulq_f32(v24, v24);
          _Q24.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(_Q24, 2), vadd_f32(*(float32x2_t *)_Q24.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)_Q24.i8, 1))).u32[0];
          v25 = vrsqrte_f32((float32x2_t)_Q24.u32[0]);
          v26 = vmul_f32(v25, vrsqrts_f32((float32x2_t)_Q24.u32[0], vmul_f32(v25, v25)));
          v27 = vmulq_n_f32(v24, vmul_f32(v26, vrsqrts_f32((float32x2_t)_Q24.u32[0], vmul_f32(v26, v26))).f32[0]);
          _Q24.i64[0] = vextq_s8((int8x16_t)v27, (int8x16_t)v27, 4uLL).u64[0];
          v42 = vmul_f32(*(float32x2_t *)_Q24.i8, (float32x2_t)0x3EFA2A2CBEFA2A2CLL);
          v43 = -0.4886 * v27.f32[0];
          if (a4 >= 3)
          {
            _Q25 = vmulq_f32(v27, v27);
            *(float32x2_t *)_Q24.i8 = vmul_f32(*(float32x2_t *)_Q24.i8, vmul_f32(*(float32x2_t *)v27.f32, (float32x2_t)0xBF8BD89D3F8BD89DLL));
            v44 = _Q24.i64[0];
            __asm { FMLA            S24, S17, V25.S[2] }
            v45 = *(float *)_Q24.i32 * 0.31539;
            v46 = vmuls_lane_f32(v27.f32[0] * -1.0925, v27, 2);
            v47 = 0.54627 * vsubq_f32(_Q25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q25.f32, 1)).f32[0];
          }
LABEL_17:
          if (!(_DWORD)v7)
            goto LABEL_20;
        }
        v23.f32[1] = v10 + (float)((float)v8 * v11);
        v29 = vaddv_f32(vmul_f32(v23, v23)) + 1.0;
        *(float *)&v29 = (float)(4.0 / (float)((float)a2 * (float)a2)) / (v29 * sqrt(v29));
        v30 = vmulq_n_f32(*(float32x4_t *)(a1 + 16 * (v8 * a2 + v19)), *(float *)&v29);
        v31 = (float *)&v41;
        v32 = (float32x4_t *)v40;
        v33 = (a4 * a4);
        do
        {
          v34 = *v31++;
          _Q24 = (int32x4_t)vmlaq_n_f32(*v32, v30, v34);
          *v32++ = (float32x4_t)_Q24;
          --v33;
        }
        while (v33);
LABEL_20:
        ++v19;
      }
      while (v19 != a2);
      ++v8;
    }
    while (v8 != a2);
  }
  if ((_DWORD)v7)
  {
    v35 = 0;
    v36 = 2 * v7;
    v37 = v40;
    do
    {
      v38 = *v37++;
      *(float *)(a5 + 4 * v35) = *(float *)(a5 + 4 * v35) + *(float *)&v38;
      *(float *)(a5 + 4 * (v7 + v35)) = *((float *)&v38 + 1)
                                                      + *(float *)(a5 + 4 * (v7 + v35));
      *(float *)&v6 = *((float *)&v38 + 2) + *(float *)(a5 + 4 * (v36 + v35));
      *(float *)(a5 + 4 * (v36 + v35++)) = *(float *)&v6;
    }
    while (v7 != v35);
  }
  return *(float *)&v6;
}

void convert_rgba8unorm_to_rgbaf32(char *a1, int a2, char *a3, int a4, int a5, unsigned int a6)
{
  uint64_t v11;
  uint64_t v12;
  float *v13;
  const float *v14;
  int v15;
  uint32x4_t v16;
  int8x16_t v17;
  float32x4_t v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float32x4_t v24;
  float32x4_t v25;

  if (a6)
  {
    v11 = 0;
    v24 = (float32x4_t)vdupq_n_s32(0x3B808081u);
    v12 = a6;
    do
    {
      if (a5)
      {
        v13 = (float *)&a1[(v11 * a2)];
        v14 = (const float *)&a3[(v11 * a4)];
        v15 = a5;
        do
        {
          v16 = (uint32x4_t)vld1q_dup_f32(v14);
          v17.i64[0] = 0xFF000000FFLL;
          v17.i64[1] = 0xFF000000FFLL;
          v18 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v16, (uint32x4_t)xmmword_1DD008EA0), v17)), v24);
          v25 = v18;
          if (v18.f32[0] <= 0.04045)
          {
            v20 = v18.f32[0] / 12.92;
          }
          else
          {
            v19 = powf((float)(v18.f32[0] + 0.055) / 1.055, 2.4);
            v18 = v25;
            v20 = v19;
          }
          if (v18.f32[1] <= 0.04045)
          {
            v22 = v18.f32[1] / 12.92;
          }
          else
          {
            v21 = powf((float)(v18.f32[1] + 0.055) / 1.055, 2.4);
            v18.i64[1] = v25.i64[1];
            v22 = v21;
          }
          if (v18.f32[2] <= 0.04045)
          {
            v23 = v18.f32[2] / 12.92;
          }
          else
          {
            v23 = powf((float)(v18.f32[2] + 0.055) / 1.055, 2.4);
            v18.i32[3] = v25.i32[3];
          }
          *v13 = v20;
          v13[1] = v22;
          v13[2] = v23;
          v13[3] = v18.f32[3];
          ++v14;
          v13 += 4;
          --v15;
        }
        while (v15);
      }
      ++v11;
    }
    while (v11 != v12);
  }
}

uint64_t convert_rgba16f_to_rgbaf32(uint64_t result, int a2, char *a3, int a4, int a5, unsigned int a6)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned __int16 *v9;
  int v10;
  unsigned int v11;
  int v12;
  BOOL v13;
  unsigned int v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  int v18;
  int v19;
  unsigned int v20;
  int v21;

  if (a6)
  {
    v6 = 0;
    v7 = a6;
    do
    {
      if (a5)
      {
        v8 = (unsigned int *)(result + (v6 * a2));
        v9 = (unsigned __int16 *)&a3[(v6 * a4)];
        v10 = a5;
        do
        {
          v11 = *v9;
          v12 = (v11 >> 10) & 0x1F;
          if (v12)
            v13 = v12 == 31;
          else
            v13 = 1;
          if (v13)
          {
            if (v12 == 31)
              v12 = 2139095040;
          }
          else
          {
            v12 = (v12 << 23) + 939524096;
          }
          v14 = v9[1];
          v15 = (v14 >> 10) & 0x1F;
          if (v15)
            v16 = v15 == 31;
          else
            v16 = 1;
          if (v16)
          {
            if (v15 == 31)
              v15 = 2139095040;
          }
          else
          {
            v15 = (v15 << 23) + 939524096;
          }
          v17 = v9[2];
          v18 = (v17 >> 10) & 0x1F;
          if (v18 && v18 != 31)
          {
            v19 = (v18 << 23) + 939524096;
          }
          else if (v18 == 31)
          {
            v19 = 2139095040;
          }
          else
          {
            v19 = (v17 >> 10) & 0x1F;
          }
          v20 = v9[3];
          v21 = (v20 >> 10) & 0x1F;
          if (v21 && v21 != 31)
          {
            v21 = (v21 << 23) + 939524096;
          }
          else if (v21 == 31)
          {
            v21 = 2139095040;
          }
          *v8 = v12 | (v11 << 16) & 0x80000000 | (v11 >> 7) & 7 | (8 * (v11 & 0x3FF)) & 0x1FFF | ((v11 & 0x3FF) << 13);
          v8[1] = v15 | (v14 << 16) & 0x80000000 | (v14 >> 7) & 7 | (8 * (v14 & 0x3FF)) & 0x1FFF | ((v14 & 0x3FF) << 13);
          v8[2] = v19 | (v17 << 16) & 0x80000000 | (v17 >> 7) & 7 | (8 * (v17 & 0x3FF)) & 0x1FFF | ((v17 & 0x3FF) << 13);
          v8[3] = v21 | (v20 << 16) & 0x80000000 | (v20 >> 7) & 7 | (8 * (v20 & 0x3FF)) & 0x1FFF | ((v20 & 0x3FF) << 13);
          v9 += 4;
          v8 += 4;
          --v10;
        }
        while (v10);
      }
      ++v6;
    }
    while (v6 != v7);
  }
  return result;
}

__n128 C3DRay3Make(_OWORD *a1, _OWORD *a2, __n128 *a3)
{
  __n128 result;

  *a1 = *a2;
  result = *a3;
  a1[1] = *a3;
  return result;
}

float32x4_t C3DRay3MakeWithSegment(float32x4_t *a1, float32x4_t *a2)
{
  float32x4_t v2;
  int32x4_t v3;
  float32x2_t v4;
  float32x2_t v5;
  float32x4_t result;

  *a1 = *a2;
  v2 = vsubq_f32(a2[1], *a2);
  v3 = (int32x4_t)vmulq_f32(v2, v2);
  v3.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v3, 2), vadd_f32(*(float32x2_t *)v3.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v3.i8, 1))).u32[0];
  v4 = vrsqrte_f32((float32x2_t)v3.u32[0]);
  v5 = vmul_f32(v4, vrsqrts_f32((float32x2_t)v3.u32[0], vmul_f32(v4, v4)));
  result = vmulq_n_f32(v2, vmul_f32(v5, vrsqrts_f32((float32x2_t)v3.u32[0], vmul_f32(v5, v5))).f32[0]);
  a1[1] = result;
  return result;
}

uint64_t C3DRay3Vector(uint64_t a1)
{
  return a1 + 16;
}

void C3DRendererContextSetTypedBytesUniformAtLocation(uint64_t a1, uint64_t location, int a3, float32x4_t *v, int a5)
{
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float32x4_t *v29;
  GLint v30;
  NSObject *v31;
  float v32;
  uint64_t i;
  int32x4_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (!a1 && (v10 = scn_default_log(), os_log_type_enabled(v10, OS_LOG_TYPE_FAULT)))
  {
    C3DEngineContextRenderScene_cold_2(v10, v11, v12, v13, v14, v15, v16, v17);
    if (a5)
      goto LABEL_6;
  }
  else if (a5)
  {
    goto LABEL_6;
  }
  v18 = scn_default_log();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_FAULT))
    C3DRendererContextSetMatrix4x4UniformAtLocation_cold_1(v18, v19, v20, v21, v22, v23, v24, v25);
LABEL_6:
  switch(a3)
  {
    case 1:
      v26 = a5;
      v27 = a1;
      v28 = location;
      v29 = v;
      goto LABEL_15;
    case 2:
      v30 = v->i32[0];
      goto LABEL_10;
    case 3:
      v30 = v->u8[0];
LABEL_10:
      C3DRendererContextSetIntUniformAtLocation(a1, location, v30);
      break;
    case 6:
      v32 = *(double *)v->i64;
      *(float *)v34.i32 = v32;
      v26 = a5;
      v29 = (float32x4_t *)&v34;
      v27 = a1;
      v28 = location;
LABEL_15:
      C3DRendererContextSetFloatUniformAtLocation(v27, v28, v29->f32, v26);
      break;
    case 8:
      C3DRendererContextSetVector2UniformAtLocation(a1, location, v->f32, a5);
      break;
    case 9:
      C3DRendererContextSetVector3UniformAtLocation(a1, location, v->f32, a5);
      break;
    case 10:
      C3DRendererContextSetVector4UniformAtLocation(a1, location, v->f32, a5);
      break;
    case 11:
      C3DRendererContextSetMatrix4x4UniformAtLocation(a1, location, v->f32, a5);
      break;
    case 13:
      C3DRendererContextSetColor4UniformAtLocation(a1, location, v, a5);
      break;
    case 18:
      *(int32x2_t *)v34.i8 = vcvt_s32_f32(*(float32x2_t *)v->f32);
      C3DRendererContextSetInt2UniformAtLocation(a1, location, v34.i32, a5);
      break;
    case 19:
      for (i = 0; i != 3; ++i)
        v34.i32[i] = (int)v->f32[i];
      C3DRendererContextSetInt3UniformAtLocation(a1, location, v34.i32, a5);
      break;
    case 20:
      v34 = vcvtq_s32_f32(*v);
      C3DRendererContextSetInt4UniformAtLocation(a1, location, v34.i32, a5);
      break;
    default:
      if ((C3DRendererContextSetTypedBytesUniformAtLocation_done & 1) == 0)
      {
        C3DRendererContextSetTypedBytesUniformAtLocation_done = 1;
        v31 = scn_default_log();
        if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
          C3DRendererContextSetTypedBytesUniformAtLocation_cold_1(a3, v31);
      }
      break;
  }
}

void C3DRendererContextSetValueUniformAtLocation(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int Type;
  unsigned __int16 v19;
  BOOL v20;
  __int16 v21;
  BOOL v22;
  int v23;
  float32x4_t *Bytes;
  NSObject *v25;

  if (!a3)
  {
    v10 = scn_default_log();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
      __RemoveVRAMResourceFromDic_cold_1(v10, v11, v12, v13, v14, v15, v16, v17);
  }
  Type = C3DValueGetType(a3);
  if (Type == a4)
  {
    v19 = a4;
LABEL_27:
    Bytes = (float32x4_t *)C3DValueGetBytes(a3);
    C3DRendererContextSetTypedBytesUniformAtLocation(a1, a2, (__int16)v19, Bytes, a5);
  }
  else
  {
    v19 = Type;
    switch(a4)
    {
      case 1:
        v20 = Type == 6;
        goto LABEL_17;
      case 2:
        if ((Type - 18) >= 3)
          v19 = Type;
        else
          v19 = a4;
        goto LABEL_26;
      case 6:
        if (Type == 1)
          LOWORD(a4) = 1;
        goto LABEL_26;
      case 8:
        v21 = Type - 9;
        goto LABEL_21;
      case 9:
        v22 = Type == 10;
        goto LABEL_23;
      case 10:
        v20 = Type == 13;
        goto LABEL_17;
      case 11:
      case 20:
        goto LABEL_26;
      case 13:
        v20 = Type == 10;
LABEL_17:
        if (v20)
          LOWORD(a4) = Type;
        goto LABEL_26;
      case 18:
        v21 = Type - 19;
LABEL_21:
        v22 = (v21 & 0xFFFE) == 0;
        goto LABEL_23;
      case 19:
        v22 = Type == 20;
LABEL_23:
        if (v22)
          v19 = a4;
        else
          v19 = Type;
LABEL_26:
        v23 = v19;
        v19 = a4;
        if (v23 == (unsigned __int16)a4)
          goto LABEL_27;
        if ((C3DRendererContextSetValueUniformAtLocation_done & 1) == 0)
        {
          C3DRendererContextSetValueUniformAtLocation_done = 1;
          v25 = scn_default_log();
          if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
            C3DRendererContextSetValueUniformAtLocation_cold_1(v25);
        }
        break;
      default:
        goto LABEL_27;
    }
  }
}

void _C3DFXProgramDelegateCFFinalize(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 48);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 48) = 0;
  }
}

CFStringRef _C3DFXProgramDelegateCFCopyFormatDescription(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DFXProgramDelegate %p>"), a1);
}

CFStringRef _C3DFXProgramDelegateCFCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DFXProgramDelegate %p>"), a1);
}

uint64_t C3DFXProgramDelegateCreate(_OWORD *a1, const void *a2)
{
  uint64_t Instance;
  __int128 v5;
  const void *v6;
  CFTypeRef v7;

  if (C3DFXProgramDelegateGetTypeID_onceToken != -1)
    dispatch_once(&C3DFXProgramDelegateGetTypeID_onceToken, &__block_literal_global_48);
  Instance = C3DTypeCreateInstance_(C3DFXProgramDelegateGetTypeID_typeID, 0x28uLL);
  v5 = a1[1];
  *(_OWORD *)(Instance + 16) = *a1;
  *(_OWORD *)(Instance + 32) = v5;
  v6 = *(const void **)(Instance + 48);
  if (v6 != a2)
  {
    if (v6)
    {
      CFRelease(v6);
      *(_QWORD *)(Instance + 48) = 0;
    }
    if (a2)
      v7 = CFRetain(a2);
    else
      v7 = 0;
    *(_QWORD *)(Instance + 48) = v7;
  }
  return Instance;
}

uint64_t C3DFXProgramDelegateGetUserInfo(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DFXProgramDelegateGetUserInfo_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 48);
}

uint64_t C3DFXProgramGetProfile(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DResourceManagerMakeProgramResident_cold_2(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(unsigned int *)(a1 + 64);
}

void C3DFXProgramSetProfile(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DResourceManagerMakeProgramResident_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(_DWORD *)(a1 + 64) = a2;
}

uint64_t C3DFXProgramDelegateGetCallbacks(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DFXProgramDelegateGetUserInfo_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return a1 + 16;
}

CFTypeRef C3DFXProgramSetDelegate(uint64_t a1, CFTypeRef cf)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef result;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DResourceManagerMakeProgramResident_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  result = *(CFTypeRef *)(a1 + 72);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 72) = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *(_QWORD *)(a1 + 72) = result;
  }
  return result;
}

uint64_t C3DFXProgramIsClientProgram(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DResourceManagerMakeProgramResident_cold_2(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return (*(unsigned __int8 *)(a1 + 68) >> 1) & 1;
}

void C3DFXProgramSetClientProgram(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DResourceManagerMakeProgramResident_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (a2)
    v12 = 2;
  else
    v12 = 0;
  *(_BYTE *)(a1 + 68) = *(_BYTE *)(a1 + 68) & 0xFD | v12;
}

void C3DFXProgramSetOpaque(uint64_t a1, char a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DResourceManagerMakeProgramResident_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(_BYTE *)(a1 + 68) = *(_BYTE *)(a1 + 68) & 0xFE | a2;
}

void SCNSetPerformanceStatisticsEnabled(int a1)
{
  if (SCNGetPerformanceStatisticsEnabled::onceToken != -1)
    dispatch_once(&SCNGetPerformanceStatisticsEnabled::onceToken, &__block_literal_global_49);
  {
    if (a1)
    {
      if (SCNInitializeForDebugging(void)::onceToken != -1)
        dispatch_once(&SCNInitializeForDebugging(void)::onceToken, &__block_literal_global_68);
    }
  }
}

float SCNConvertEngineStatsToPerformanceData(uint64_t a1, _BYTE *a2, int a3)
{
  double v3;
  float v4;
  _BYTE *v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float result;
  float *v10;

  *a2 = 2;
  v3 = *(double *)(a1 + 328);
  if (v3 == 0.0)
    v4 = 0.0;
  else
    v4 = 1.0 / v3;
  v5 = &a2[44 * a3];
  *((_DWORD *)v5 + 1) = *(_DWORD *)(a1 + 4);
  *((_DWORD *)v5 + 2) = vcvtas_u32_f32(v4);
  v6.f64[0] = *(float64_t *)(a1 + 96);
  v7.f64[0] = *(float64_t *)(a1 + 120);
  v7.f64[1] = *(double *)(a1 + 128) + *(double *)(a1 + 136) + *(double *)(a1 + 144);
  v6.f64[1] = *(float64_t *)(a1 + 112);
  v8.f64[0] = *(float64_t *)(a1 + 168);
  *(float32x4_t *)(v5 + 12) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v6), v7);
  v6.f64[0] = *(float64_t *)(a1 + 152);
  v8.f64[1] = *(float64_t *)(a1 + 184);
  v6.f64[1] = *(float64_t *)(a1 + 104);
  *(float32x4_t *)(v5 + 28) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v6), v8);
  *(float *)v6.f64 = *(double *)(a1 + 192);
  *((_DWORD *)v5 + 11) = LODWORD(v6.f64[0]);
  result = *(double *)(a1 + 288);
  v10 = (float *)&a2[8 * a3];
  v10[24] = result;
  v10[23] = *(float *)(a1 + 280);
  a2[1] = a3;
  return result;
}

void SCNPushPerformanceStatistics(uint64_t a1)
{
  SCNConvertEngineStatsToPerformanceData(a1, &_scnPerformanceData, (byte_1F03C75B5 & 1) == 0);
}

__n128 SCNGetPerformanceStatistics@<Q0>(_OWORD *a1@<X8>)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;

  v2 = unk_1F03C7604;
  a1[4] = xmmword_1F03C75F4;
  a1[5] = v2;
  *(_OWORD *)((char *)a1 + 92) = unk_1F03C7610;
  v3 = unk_1F03C75C4;
  *a1 = _scnPerformanceData;
  a1[1] = v3;
  v4 = unk_1F03C75E4;
  a1[2] = xmmword_1F03C75D4;
  a1[3] = v4;
  return result;
}

uint64_t SCNGetGraphicsPerformanceStatistics(void)
{
  double v0;
  io_registry_entry_t v1;
  mach_port_t v2;
  const __CFDictionary *v3;
  CFTypeRef CFProperty;
  uint64_t v5;
  io_iterator_t existing;

  v0 = CACurrentMediaTime();
  if (v0 - *(double *)&_graphicsPerformanceStatisticsDictionaryQueryTime > 1.0)
  {
    v1 = _accelerator;
    if (!_accelerator)
    {
      existing = 0;
      v2 = *MEMORY[0x1E0CBBAA8];
      v3 = IOServiceMatching("IOAcceleratorES");
      if (!IOServiceGetMatchingServices(v2, v3, &existing))
        _accelerator = IOIteratorNext(existing);
      IOObjectRelease(existing);
      v1 = _accelerator;
    }
    CFProperty = IORegistryEntryCreateCFProperty(v1, CFSTR("PerformanceStatistics"), (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
    if (CFProperty)
    {
      v5 = (uint64_t)CFProperty;
      if (_graphicsPerformanceStatisticsDictionary)
        CFRelease((CFTypeRef)_graphicsPerformanceStatisticsDictionary);
      _graphicsPerformanceStatisticsDictionary = v5;
    }
    _graphicsPerformanceStatisticsDictionaryQueryTime = *(_QWORD *)&v0;
  }
  return objc_msgSend((id)_graphicsPerformanceStatisticsDictionary, "copy");
}

uint64_t _SCNStartCollectingPerformanceStatisticsForPid(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t mapped_memory_cache_for_task;
  unsigned __int8 v8;
  char *v9;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  __n128 (*v14)(__n128 *, __n128 *);
  uint64_t (*v15)();
  void *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int *v20;

  v19 = a1;
  v1 = CSSymbolicatorCreateWithPid();
  v3 = v2;
  if ((CSIsNull() & 1) != 0)
    return 0;
  v11 = 0;
  v12 = &v11;
  v13 = 0x4012000000;
  v14 = __Block_byref_object_copy__4;
  v15 = __Block_byref_object_dispose__4;
  v18 = 0;
  v16 = &unk_1DD0EA3D6;
  v17 = 0;
  CSSymbolicatorForeachSymbolWithMangledNameAtTime();
  v5 = v12[6];
  v6 = v12[7];
  if (CSIsNull()
    || (CSSymbolicatorGetTask(), (mapped_memory_cache_for_task = create_mapped_memory_cache_for_task()) == 0))
  {
    CSRelease();
    v4 = 0;
  }
  else
  {
    {
      getPerfDataMappingByPID(void)::perfDataMappingByPID = 0u;
      unk_1F03C5F78 = 0u;
      dword_1F03C5F88 = 1065353216;
      __cxa_atexit((void (*)(void *))std::unordered_map<int,SCNPerformanceDataMapping>::~unordered_map[abi:nn180100], &getPerfDataMappingByPID(void)::perfDataMappingByPID, &dword_1DCCB8000);
    }
    v20 = &v19;
    v9 = std::__hash_table<std::__hash_value_type<int,SCNPerformanceDataMapping>,std::__unordered_map_hasher<int,std::__hash_value_type<int,SCNPerformanceDataMapping>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,SCNPerformanceDataMapping>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,SCNPerformanceDataMapping>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)&getPerfDataMappingByPID(void)::perfDataMappingByPID, &v19, (uint64_t)&std::piecewise_construct, &v20);
    *((_QWORD *)v9 + 3) = v1;
    *((_QWORD *)v9 + 4) = v3;
    *((_QWORD *)v9 + 5) = v5;
    *((_QWORD *)v9 + 6) = v6;
    v4 = 1;
    *((_QWORD *)v9 + 7) = mapped_memory_cache_for_task;
  }
  _Block_object_dispose(&v11, 8);
  return v4;
}

void sub_1DCDD2ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _SCNStopCollectingPerformanceStatisticsForPid(int a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  _QWORD v4[5];
  int v5;

  v5 = a1;
  {
    getPerfDataMappingByPID(void)::perfDataMappingByPID = 0u;
    unk_1F03C5F78 = 0u;
    dword_1F03C5F88 = 1065353216;
    __cxa_atexit((void (*)(void *))std::unordered_map<int,SCNPerformanceDataMapping>::~unordered_map[abi:nn180100], &getPerfDataMappingByPID(void)::perfDataMappingByPID, &dword_1DCCB8000);
  }
  std::unordered_map<int,SCNPerformanceDataMapping>::unordered_map((uint64_t)v4, (uint64_t)&getPerfDataMappingByPID(void)::perfDataMappingByPID);
  v2 = std::__hash_table<std::__hash_value_type<int,SCNPerformanceDataMapping>,std::__unordered_map_hasher<int,std::__hash_value_type<int,SCNPerformanceDataMapping>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,SCNPerformanceDataMapping>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,SCNPerformanceDataMapping>>>::find<int>(v4, &v5);
  if (v2)
  {
    destroy_mapped_memory_cache();
    v2[5] = 0;
    v2[6] = 0;
    v2[7] = 0;
    CSRelease();
    v2[3] = 0;
    v2[4] = 0;
    std::__hash_table<std::__hash_value_type<int,SCNPerformanceDataMapping>,std::__unordered_map_hasher<int,std::__hash_value_type<int,SCNPerformanceDataMapping>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,SCNPerformanceDataMapping>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,SCNPerformanceDataMapping>>>::erase(v4, v2);
  }
  std::__hash_table<std::__hash_value_type<unsigned long long,SCNMTLLightSetData>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SCNMTLLightSetData>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SCNMTLLightSetData>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SCNMTLLightSetData>>>::~__hash_table((uint64_t)v4);
  return 1;
}

void sub_1DCDD300C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,SCNMTLLightSetData>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SCNMTLLightSetData>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SCNMTLLightSetData>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SCNMTLLightSetData>>>::~__hash_table((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void *_SCNGetPerformanceStatisticsFromPerformanceData(unsigned __int8 *a1, int a2)
{
  void *v4;
  unsigned int *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  unsigned __int8 *v16;
  void *v17;
  void *v18;
  void *v19;

  v4 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v5 = (unsigned int *)&a1[44 * a2];
  objc_msgSend(v4, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v5[2]), CFSTR("scenekit.fps"));
  objc_msgSend(v4, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v5[1]), CFSTR("scenekit.primcnt"));
  LODWORD(v6) = v5[3];
  objc_msgSend(v4, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v6), CFSTR("scenekit.frmtime"));
  LODWORD(v7) = v5[4];
  objc_msgSend(v4, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v7), CFSTR("scenekit.phytime"));
  LODWORD(v8) = v5[5];
  objc_msgSend(v4, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v8), CFSTR("scenekit.prttime"));
  LODWORD(v9) = v5[6];
  objc_msgSend(v4, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v9), CFSTR("scenekit.animtime"));
  LODWORD(v10) = v5[9];
  objc_msgSend(v4, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v10), CFSTR("scenekit.clientTime"));
  LODWORD(v11) = v5[7];
  objc_msgSend(v4, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v11), CFSTR("scenekit.rendertime"));
  LODWORD(v12) = v5[8];
  objc_msgSend(v4, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v12), CFSTR("scenekit.consttime"));
  LODWORD(v13) = v5[10];
  objc_msgSend(v4, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v13), CFSTR("scenekit.cpuidletime"));
  LODWORD(v14) = v5[11];
  objc_msgSend(v4, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v14), CFSTR("scenekit.cawaittime"));
  if (*a1 < 2u)
  {
    objc_msgSend(v4, "setObject:forKeyedSubscript:", &unk_1EA5FF720, CFSTR("scenekit.shaderCompilationTime"));
    v18 = v4;
    v17 = &unk_1EA5FF720;
  }
  else
  {
    v16 = &a1[8 * a2];
    LODWORD(v15) = *((_DWORD *)v16 + 24);
    objc_msgSend(v4, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v15), CFSTR("scenekit.shaderCompilationTime"));
    v17 = (void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", *((unsigned int *)v16 + 23));
    v18 = v4;
  }
  objc_msgSend(v18, "setObject:forKeyedSubscript:", v17, CFSTR("scenekit.shaderGenerationCount"));
  v19 = (void *)SCNGetGraphicsPerformanceStatistics();
  objc_msgSend(v4, "setObject:forKeyedSubscript:", objc_msgSend(v19, "objectForKeyedSubscript:", CFSTR("Device Utilization %")), CFSTR("scenekit.deviceutil"));
  objc_msgSend(v4, "setObject:forKeyedSubscript:", objc_msgSend(v19, "objectForKeyedSubscript:", CFSTR("Renderer Utilization %")), CFSTR("scenekit.rendererutil"));
  objc_msgSend(v4, "setObject:forKeyedSubscript:", objc_msgSend(v19, "objectForKeyedSubscript:", CFSTR("Tiler Utilization %")), CFSTR("scenekit.tilerutil"));

  return v4;
}

uint64_t *_SCNGetPerformanceStatisticsForPid(int a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  _QWORD v4[5];
  int v5;

  v5 = a1;
  {
    getPerfDataMappingByPID(void)::perfDataMappingByPID = 0u;
    unk_1F03C5F78 = 0u;
    dword_1F03C5F88 = 1065353216;
    __cxa_atexit((void (*)(void *))std::unordered_map<int,SCNPerformanceDataMapping>::~unordered_map[abi:nn180100], &getPerfDataMappingByPID(void)::perfDataMappingByPID, &dword_1DCCB8000);
  }
  std::unordered_map<int,SCNPerformanceDataMapping>::unordered_map((uint64_t)v4, (uint64_t)&getPerfDataMappingByPID(void)::perfDataMappingByPID);
  v2 = std::__hash_table<std::__hash_value_type<int,SCNPerformanceDataMapping>,std::__unordered_map_hasher<int,std::__hash_value_type<int,SCNPerformanceDataMapping>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,SCNPerformanceDataMapping>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,SCNPerformanceDataMapping>>>::find<int>(v4, &v5);
  if (v2)
  {
    if (CSSymbolGetRange())
    {
      clear_mapped_memory();
      v2 = 0;
      mapped_memory_read();
    }
    else
    {
      v2 = 0;
    }
  }
  std::__hash_table<std::__hash_value_type<unsigned long long,SCNMTLLightSetData>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SCNMTLLightSetData>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SCNMTLLightSetData>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SCNMTLLightSetData>>>::~__hash_table((uint64_t)v4);
  return v2;
}

void sub_1DCDD33D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::__hash_table<std::__hash_value_type<unsigned long long,SCNMTLLightSetData>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SCNMTLLightSetData>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SCNMTLLightSetData>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SCNMTLLightSetData>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void *_SCNGetCollectedShadersForPid()
{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v11;
  void *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t);
  void *v21;
  _QWORD *v22;
  _QWORD v23[8];
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  CSSymbolicatorCreateWithPid();
  if ((CSIsNull() & 1) != 0)
  {
    v0 = &unk_1EA5FF740;
  }
  else
  {
    v23[0] = 0;
    v23[1] = v23;
    v23[2] = 0x4012000000;
    v23[3] = __Block_byref_object_copy__4;
    v23[4] = __Block_byref_object_dispose__4;
    v23[7] = 0;
    v23[5] = &unk_1DD0EA3D6;
    v23[6] = 0;
    v18 = MEMORY[0x1E0C809B0];
    v19 = 3221225472;
    v20 = ___ZL26_SCNGetDebuggingInfoForPidi_block_invoke;
    v21 = &unk_1EA5A0CB8;
    v22 = v23;
    CSSymbolicatorForeachSymbolWithMangledNameAtTime();
    if (CSIsNull())
    {
      CSRelease();
      v0 = &unk_1EA5FF768;
    }
    else
    {
      CSSymbolicatorGetTask();
      if (create_mapped_memory_cache_for_task())
      {
        if (CSSymbolGetRange())
        {
          clear_mapped_memory();
          v17 = 0;
          v0 = &unk_1EA5FF7E0;
          mapped_memory_read();
        }
        else
        {
          v0 = &unk_1EA5FF7B8;
        }
      }
      else
      {
        CSRelease();
        v0 = &unk_1EA5FF790;
      }
    }
    _Block_object_dispose(v23, 8);
  }
  v12 = v0;
  if (objc_msgSend(v0, "valueForKey:", CFSTR("containerPath")))
  {
    v1 = (void *)objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "temporaryDirectory"), "URLByAppendingPathComponent:", CFSTR("SceneKitShaderCache")), "path");
    v12 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v11 = (void *)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v2 = (void *)objc_msgSend(v11, "contentsOfDirectoryAtPath:error:", v1, 0);
    v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v13, v24, 16);
    if (v3)
    {
      v4 = *(_QWORD *)v14;
      do
      {
        for (i = 0; i != v3; ++i)
        {
          if (*(_QWORD *)v14 != v4)
            objc_enumerationMutation(v2);
          v6 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * i);
          if (objc_msgSend(v6, "hasPrefix:", CFSTR("commonProfile_")))
          {
            if (objc_msgSend((id)objc_msgSend(v6, "pathExtension"), "isEqualToString:", CFSTR("metal")))
            {
              v7 = objc_msgSend(v1, "stringByAppendingPathComponent:", v6);
              v8 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithContentsOfFile:encoding:error:", v7, 4, 0);
              v9 = objc_msgSend((id)objc_msgSend(v6, "substringFromIndex:", 14), "stringByDeletingPathExtension");
              if (v8)
              {
                if (v9)
                {
                  objc_msgSend(v12, "setValue:forKey:", v8, v9);
                  objc_msgSend(v11, "removeItemAtURL:error:", objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", v7), 0);
                }
              }
            }
          }
        }
        v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v13, v24, 16);
      }
      while (v3);
    }
  }
  return v12;
}

void sub_1DCDD37FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t SCNGetShaderCollectionOutputURL()
{
  return objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "temporaryDirectory"), "URLByAppendingPathComponent:", CFSTR("SceneKitShaderCache"));
}

CFTypeRef SCNSetShaderCollectionEnabled(CFTypeRef result)
{
  void *v1;
  void *v2;
  NSObject *v3;
  uint64_t v4;

  {
    if ((_DWORD)result)
    {
      v1 = (void *)objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "temporaryDirectory"), "URLByAppendingPathComponent:", CFSTR("SceneKitShaderCache"));
      v2 = (void *)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
      if (objc_msgSend(v2, "fileExistsAtPath:", objc_msgSend(v1, "path")))
        objc_msgSend(v2, "removeItemAtURL:error:", v1, 0);
      v4 = 0;
      if ((objc_msgSend(v2, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v1, 1, 0, &v4) & 1) == 0)
      {
        v3 = scn_default_log();
        if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
          SCNSetShaderCollectionEnabled_cold_1((uint64_t)v1, &v4, v3);
        v1 = 0;
      }
      return C3DSetShaderCompilationDirectory(v1);
    }
  }
  return result;
}

uint64_t ___ZL26_SCNGetDebuggingInfoForPidi_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;

  result = CSIsNull();
  if ((result & 1) == 0)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    *(_QWORD *)(v7 + 48) = a2;
    *(_QWORD *)(v7 + 56) = a3;
  }
  return result;
}

char *std::__hash_table<std::__hash_value_type<int,SCNPerformanceDataMapping>,std::__unordered_map_hasher<int,std::__hash_value_type<int,SCNPerformanceDataMapping>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,SCNPerformanceDataMapping>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,SCNPerformanceDataMapping>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  char *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (char *)*v10;
      if (*v10)
      {
        do
        {
          v12 = *((_QWORD *)v11 + 1);
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = *(char **)v11;
        }
        while (v11);
      }
    }
  }
  v11 = (char *)operator new(0x40uLL);
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((_QWORD *)v11 + 7) = 0;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<unsigned long long,SCNMTLLightSetData>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SCNMTLLightSetData>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SCNMTLLightSetData>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SCNMTLLightSetData>>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *(_QWORD *)v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *(_QWORD *)v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*(_QWORD *)v11)
  {
    v21 = *(_QWORD *)(*(_QWORD *)v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_1DCDD3BDC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<int,SCNPerformanceDataMapping>::unordered_map(uint64_t a1, uint64_t a2)
{
  int *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<unsigned long long,SCNMTLLightSetData>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SCNMTLLightSetData>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SCNMTLLightSetData>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SCNMTLLightSetData>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(int **)(a2 + 16); i; i = *(int **)i)
    std::__hash_table<std::__hash_value_type<int,SCNPerformanceDataMapping>,std::__unordered_map_hasher<int,std::__hash_value_type<int,SCNPerformanceDataMapping>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,SCNPerformanceDataMapping>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,SCNPerformanceDataMapping>>>::__emplace_unique_key_args<int,std::pair<int const,SCNPerformanceDataMapping> const&>(a1, i + 4, (_OWORD *)i + 1);
  return a1;
}

void sub_1DCDD3C4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<unsigned long long,SCNMTLLightSetData>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SCNMTLLightSetData>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SCNMTLLightSetData>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SCNMTLLightSetData>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<int,SCNPerformanceDataMapping>,std::__unordered_map_hasher<int,std::__hash_value_type<int,SCNPerformanceDataMapping>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,SCNPerformanceDataMapping>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,SCNPerformanceDataMapping>>>::__emplace_unique_key_args<int,std::pair<int const,SCNPerformanceDataMapping> const&>(uint64_t a1, int *a2, _OWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  __int128 v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x40uLL);
  *v10 = 0;
  v10[1] = v6;
  v12 = a3[1];
  *((_OWORD *)v10 + 1) = *a3;
  *((_OWORD *)v10 + 2) = v12;
  *((_OWORD *)v10 + 3) = a3[2];
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<unsigned long long,SCNMTLLightSetData>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SCNMTLLightSetData>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SCNMTLLightSetData>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SCNMTLLightSetData>>>::__rehash<true>(a1, v18);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v20)
  {
    *v10 = *v20;
LABEL_38:
    *v20 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v19 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v21 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7)
        v21 %= v7;
    }
    else
    {
      v21 &= v7 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_1DCDD3E70(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<int,SCNPerformanceDataMapping>,std::__unordered_map_hasher<int,std::__hash_value_type<int,SCNPerformanceDataMapping>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,SCNPerformanceDataMapping>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,SCNPerformanceDataMapping>>>::find<int>(_QWORD *a1, int *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (*(_QWORD *)&v2 <= v3)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  for (result = *v6; result; result = (uint64_t *)*result)
  {
    v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == (_DWORD)v3)
        return result;
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(_QWORD *)&v2)
          v8 %= *(_QWORD *)&v2;
      }
      else
      {
        v8 &= *(_QWORD *)&v2 - 1;
      }
      if (v8 != v5)
        return 0;
    }
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<int,SCNPerformanceDataMapping>,std::__unordered_map_hasher<int,std::__hash_value_type<int,SCNPerformanceDataMapping>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,SCNPerformanceDataMapping>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,SCNPerformanceDataMapping>>>::erase(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  void *v3;
  void *__p;

  v2 = *a2;
  std::__hash_table<std::__hash_value_type<int,SCNPerformanceDataMapping>,std::__unordered_map_hasher<int,std::__hash_value_type<int,SCNPerformanceDataMapping>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,SCNPerformanceDataMapping>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,SCNPerformanceDataMapping>>>::remove(a1, a2, (uint64_t)&__p);
  v3 = __p;
  __p = 0;
  if (v3)
    operator delete(v3);
  return v2;
}

_QWORD *std::__hash_table<std::__hash_value_type<int,SCNPerformanceDataMapping>,std::__unordered_map_hasher<int,std::__hash_value_type<int,SCNPerformanceDataMapping>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,SCNPerformanceDataMapping>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,SCNPerformanceDataMapping>>>::remove@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(_QWORD **)(*result + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2)
      goto LABEL_19;
    v9 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*result + 8 * v4) = 0;
  }
  v10 = *a2;
  if (*a2)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*result + 8 * v11) = v7;
      v10 = *a2;
    }
  }
  *v7 = v10;
  *a2 = 0;
  --result[3];
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = result + 2;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t C3DSerializeFloatAsNumber(void *cf, const void *a2, float a3)
{
  uint64_t result;
  const __CFAllocator *v6;
  const void *v7;
  float valuePtr;

  result = 0;
  valuePtr = a3;
  if (cf && a2)
  {
    v6 = CFGetAllocator(cf);
    result = (uint64_t)CFNumberCreate(v6, kCFNumberFloatType, &valuePtr);
    if (result)
    {
      v7 = (const void *)result;
      CFDictionarySetValue((CFMutableDictionaryRef)cf, a2, (const void *)result);
      CFRelease(v7);
      return 1;
    }
  }
  return result;
}

uint64_t _C3DInitNumberArrayWithPropertyList(const void *a1, char *a2, CFErrorRef *a3)
{
  char *v4;
  CFTypeID v6;
  CFIndex Count;
  CFIndex v8;
  CFIndex v9;
  const void *ValueAtIndex;
  CFTypeID v11;
  uint64_t result;
  NSObject *v13;
  CFErrorRef MalformedDocumentError;
  NSObject *v15;
  NSObject *v16;

  if (a1 && (v4 = a2) != 0)
  {
    v6 = CFGetTypeID(a1);
    if (v6 != CFArrayGetTypeID())
      return 1;
    Count = CFArrayGetCount((CFArrayRef)a1);
    if (Count < 1)
      return 1;
    v8 = Count;
    v9 = 0;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a1, v9);
      v11 = CFGetTypeID(ValueAtIndex);
      if (v11 != CFNumberGetTypeID())
        break;
      if (!CFNumberGetValue((CFNumberRef)ValueAtIndex, kCFNumberFloatType, v4))
      {
        v16 = scn_default_log();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          _C3DInitNumberArrayWithPropertyList_cold_2();
        goto LABEL_12;
      }
      v4 += 4;
      if (v8 == ++v9)
        return 1;
    }
    v15 = scn_default_log();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      _C3DInitNumberArrayWithPropertyList_cold_3();
  }
  else
  {
    v13 = scn_default_log();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      _C3DInitNumberArrayWithPropertyList_cold_1();
  }
LABEL_12:
  if (!a3 || *a3)
    return 0;
  MalformedDocumentError = C3DSceneSourceCreateMalformedDocumentError(0);
  result = 0;
  *a3 = MalformedDocumentError;
  return result;
}

__CFArray *_C3DCreatePropertyListFromBuffer(char *a1, uint64_t a2)
{
  char *v3;
  const __CFAllocator *v4;
  __CFArray *Mutable;
  CFNumberRef v6;

  if (!a1)
    return 0;
  v3 = a1;
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (a2 >= 1)
  {
    do
    {
      v6 = CFNumberCreate(v4, kCFNumberFloatType, v3);
      CFArrayAppendValue(Mutable, v6);
      CFRelease(v6);
      v3 += 4;
      --a2;
    }
    while (a2);
  }
  return Mutable;
}

CFDataRef C3DCreateSerializedDataFromC3DFloatBuffer(uint64_t a1, uint64_t a2)
{
  CFIndex v4;
  const UInt8 *v5;
  UInt8 *v6;
  uint64_t v7;
  CFDataRef v8;

  v4 = 4 * a2;
  v5 = (const UInt8 *)malloc_type_malloc(4 * a2, 0xDC03DFB5uLL);
  v6 = (UInt8 *)v5;
  if (a2 >= 1)
  {
    v7 = 0;
    do
    {
      *(_DWORD *)&v5[4 * v7] = bswap32(*(_DWORD *)(a1 + 4 * v7));
      ++v7;
    }
    while (a2 != v7);
    v8 = CFDataCreate(0, v5, v4);
    goto LABEL_6;
  }
  v8 = CFDataCreate(0, v5, v4);
  if (v6)
LABEL_6:
    free(v6);
  return v8;
}

const UInt8 *C3DInitC3DFloatArrayWithSerializedData(const __CFData *a1, uint64_t a2, _DWORD *a3)
{
  const UInt8 *result;
  unsigned int v6;

  result = CFDataGetBytePtr(a1);
  if (a2 >= 1)
  {
    do
    {
      v6 = *(_DWORD *)result;
      result += 4;
      *a3++ = bswap32(v6);
      --a2;
    }
    while (a2);
  }
  return result;
}

CFMutableDictionaryRef C3DCreatePropertyListFromDictionary(const void *a1, uint64_t a2, uint64_t a3)
{
  const __CFAllocator *v6;
  CFMutableDictionaryRef Mutable;
  _QWORD v9[4];

  v9[3] = *MEMORY[0x1E0C80C00];
  v6 = CFGetAllocator(a1);
  Mutable = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v9[0] = Mutable;
  v9[1] = a3;
  v9[2] = a2;
  CFDictionaryApplyFunction((CFDictionaryRef)a1, (CFDictionaryApplierFunction)_serializeDictionary, v9);
  return Mutable;
}

void _serializeDictionary(const void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  __CFDictionary *v7;
  CFTypeID v8;
  CFTypeID v9;
  const void *v10;
  const void *v11;
  uint64_t v12;

  v5 = *(_QWORD *)(a3 + 8);
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(__CFDictionary **)a3;
  v8 = CFGetTypeID(a1);
  if (v8 == CFStringGetTypeID())
  {
    v9 = CFGetTypeID(a2);
    if (C3DTypeConformsToProtocol(v9, 0))
    {
      v10 = (const void *)C3DCopyPropertyList(a2, v5, v6, 0);
      if (!v10)
        return;
LABEL_10:
      v11 = v10;
      CFDictionaryAddValue(v7, a1, v10);
      CFRelease(v11);
      return;
    }
    if (v9 == CFDictionaryGetTypeID())
    {
      v10 = (const void *)C3DCreatePropertyListFromDictionary(a2, v6, v5);
      if (v10)
        goto LABEL_10;
    }
    else if (v9 == CFDictionaryGetTypeID())
    {
      v10 = C3DCreatePropertyListFromArray((const __CFArray *)a2, v6, v5);
      if (v10)
        goto LABEL_10;
    }
    else
    {
      _serializableCFTypeIDs();
      v12 = 0;
      while (_serializableCFTypeIDs_serializableTypes[v12] != v9)
      {
        if (++v12 == 6)
          return;
      }
      CFDictionaryAddValue(v7, a1, a2);
    }
  }
}

CFMutableArrayRef C3DCreatePropertyListFromArray(const __CFArray *a1, uint64_t a2, uint64_t a3)
{
  CFMutableArrayRef Mutable;
  _QWORD v8[4];
  CFRange v9;

  v8[3] = *MEMORY[0x1E0C80C00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v8[0] = Mutable;
  v8[1] = a3;
  v8[2] = a2;
  v9.length = CFArrayGetCount(a1);
  v9.location = 0;
  CFArrayApplyFunction(a1, v9, (CFArrayApplierFunction)_serializeArray, v8);
  return Mutable;
}

void _serializeArray(const void *a1, uint64_t a2)
{
  __CFArray *v4;
  CFTypeID v5;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  const void *v9;
  uint64_t v10;

  v4 = *(__CFArray **)a2;
  v5 = CFGetTypeID(a1);
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  if (C3DTypeConformsToProtocol(v5, 0))
  {
    v8 = (const void *)C3DCopyPropertyList(a1, v6, v7, 0);
    if (!v8)
      return;
LABEL_9:
    v9 = v8;
    CFArrayAppendValue(v4, v8);
    CFRelease(v9);
    return;
  }
  if (v5 == CFDictionaryGetTypeID())
  {
    v8 = (const void *)C3DCreatePropertyListFromDictionary(a1, v7, v6);
    if (v8)
      goto LABEL_9;
  }
  else if (v5 == CFDictionaryGetTypeID())
  {
    v8 = (const void *)C3DCreatePropertyListFromArray(a1, v7, v6);
    if (v8)
      goto LABEL_9;
  }
  else
  {
    _serializableCFTypeIDs();
    v10 = 0;
    while (_serializableCFTypeIDs_serializableTypes[v10] != v5)
    {
      if (++v10 == 6)
        return;
    }
    CFArrayAppendValue(v4, a1);
  }
}

uint64_t C3DBaseTypeForCFNumberType(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;

  v1 = a1 - 5;
  if ((unint64_t)(a1 - 5) < 9 && ((0x19Du >> v1) & 1) != 0)
  {
    return (__int16)word_1DD029F6C[v1];
  }
  else
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      C3DBaseTypeForCFNumberType_cold_1();
    return 0;
  }
}

BOOL C3DConvertToPlatformIndependentData(char *__src, char *__dst, unint64_t a3, unint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  NSObject *v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  _BOOL8 result;
  NSObject *v59;
  uint8_t buf;
  _BYTE v61[15];

  if (a8 * a7 > a3)
  {
    v16 = scn_default_log();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
      C3DConvertToPlatformIndependentData_cold_4(v16, v17, v18, v19, v20, v21, v22, v23);
  }
  if (a9 * a7 > a4)
  {
    v24 = scn_default_log();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_FAULT))
      C3DConvertToPlatformIndependentData_cold_3(v24, v25, v26, v27, v28, v29, v30, v31);
  }
  if (a7 >= 1)
  {
    v32 = 0;
    v33 = a5 - 1;
    while (2)
    {
      switch(v33)
      {
        case 0:
          if (a6 >= 1)
          {
            v35 = 0;
            do
            {
              *(_DWORD *)&__dst[4 * (__int16)v35] = bswap32(*(_DWORD *)&__src[4 * (__int16)v35]);
              ++v35;
            }
            while (a6 > (__int16)v35);
          }
          goto LABEL_66;
        case 1:
          if (a6 >= 1)
          {
            v36 = 0;
            do
            {
              *(_DWORD *)&__dst[4 * (__int16)v36] = *(_DWORD *)&__src[4 * (__int16)v36];
              ++v36;
            }
            while (a6 > (__int16)v36);
          }
          goto LABEL_66;
        case 2:
        case 3:
        case 15:
          memcpy(__dst, __src, a6);
          goto LABEL_66;
        case 4:
          v37 = scn_default_log();
          if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
            C3DConvertToPlatformIndependentData_cold_2(&buf, v61, v37);
          goto LABEL_66;
        case 5:
          if (a6 >= 1)
          {
            v38 = 0;
            do
            {
              *(_QWORD *)&__dst[8 * (__int16)v38] = bswap64(*(_QWORD *)&__src[8 * (__int16)v38]);
              ++v38;
            }
            while (a6 > (__int16)v38);
          }
          goto LABEL_66;
        case 6:
          if (a6 >= 1)
          {
            v39 = 0;
            do
            {
              *(_DWORD *)&__dst[4 * (__int16)v39] = bswap32(*(_DWORD *)&__src[4 * (__int16)v39]);
              ++v39;
            }
            while (a6 > (__int16)v39);
          }
          goto LABEL_66;
        case 7:
          if (a6 >= 1)
          {
            v40 = 0;
            v41 = 0;
            do
            {
              *(int8x8_t *)&__dst[4 * (__int16)v41] = vrev32_s8(*(int8x8_t *)&__src[4 * (__int16)v41]);
              ++v40;
              v41 += 2;
            }
            while (a6 > (__int16)v40);
          }
          goto LABEL_66;
        case 8:
          if (a6 >= 1)
          {
            v42 = 0;
            v43 = 0;
            do
            {
              v44 = 4 * (__int16)v43;
              *(int8x8_t *)&__dst[v44] = vrev32_s8(*(int8x8_t *)&__src[v44]);
              *(_DWORD *)&__dst[v44 + 8] = bswap32(*(_DWORD *)&__src[v44 + 8]);
              ++v42;
              v43 += 3;
            }
            while (a6 > (__int16)v42);
          }
          goto LABEL_66;
        case 9:
          if (a6 >= 1)
          {
            v45 = 0;
            v46 = 0;
            do
            {
              *(int8x16_t *)&__dst[4 * (__int16)v45] = vrev32q_s8(*(int8x16_t *)&__src[4 * (__int16)v45]);
              ++v46;
              v45 += 4;
            }
            while (a6 > (__int16)v46);
          }
          goto LABEL_66;
        case 10:
          if (a6 >= 1)
          {
            v47 = 0;
            v48 = 0;
            do
            {
              v49 = 16 * v47;
              v50 = 16 * v47 + 16;
              if (v50 > (__int16)(16 * v47))
              {
                do
                {
                  *(_DWORD *)&__dst[4 * (__int16)v49] = bswap32(*(_DWORD *)&__src[4 * (__int16)v49]);
                  ++v49;
                }
                while (v50 > (__int16)v49);
              }
              v47 = (__int16)++v48;
            }
            while ((__int16)v48 < a6);
          }
          goto LABEL_66;
        case 11:
          if (a6 >= 1)
          {
            v51 = 0;
            v52 = 0;
            do
            {
              v53 = 9 * v51;
              v54 = v53 + 9;
              while (v54 > (__int16)v53)
              {
                *(_DWORD *)&__dst[4 * (__int16)v53] = bswap32(*(_DWORD *)&__src[4 * (__int16)v53]);
                LOWORD(v53) = v53 + 1;
              }
              v51 = (__int16)++v52;
            }
            while ((__int16)v52 < a6);
          }
          goto LABEL_66;
        case 12:
          if (a6 >= 1)
          {
            v55 = 0;
            v56 = 0;
            do
            {
              *(int8x16_t *)&__dst[4 * (__int16)v55] = vrev32q_s8(*(int8x16_t *)&__src[4 * (__int16)v55]);
              ++v56;
              v55 += 4;
            }
            while (a6 > (__int16)v56);
          }
          goto LABEL_66;
        case 13:
        case 16:
          if (a6 >= 1)
          {
            v34 = 0;
            do
            {
              *(_WORD *)&__dst[2 * (__int16)v34] = *(_WORD *)&__src[2 * (__int16)v34];
              ++v34;
            }
            while (a6 > (__int16)v34);
          }
          goto LABEL_66;
        case 14:
          if (a6 >= 1)
          {
            v57 = 0;
            do
            {
              *(_WORD *)&__dst[2 * (__int16)v57] = *(_WORD *)&__src[2 * (__int16)v57];
              ++v57;
            }
            while (a6 > (__int16)v57);
          }
          goto LABEL_66;
        case 22:
        case 23:
          *(_DWORD *)__dst = *(_DWORD *)__src;
LABEL_66:
          __dst += a9;
          __src += a8;
          if (++v32 == a7)
            return 1;
          continue;
        default:
          v59 = scn_default_log();
          result = os_log_type_enabled(v59, OS_LOG_TYPE_ERROR);
          if (result)
          {
            C3DConvertToPlatformIndependentData_cold_1();
            return 0;
          }
          return result;
      }
    }
  }
  return 1;
}

BOOL C3DConvertFromPlatformIndependentData(char *__src, char *__dst, unint64_t a3, unint64_t a4, unsigned int a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  NSObject *v9;
  _BOOL8 result;
  NSObject *v12;
  uint64_t v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  __int16 v32;
  uint64_t v33;
  int v34;
  char *v35;
  char *v36;
  __int16 v37;
  uint64_t v38;
  int v39;
  char *v40;
  char *v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  NSObject *v46;

  if (a8 * a7 <= a3)
  {
    if (a9 * a7 <= a4)
    {
      if (a7 >= 1)
      {
        if (a5 - 6 >= 0xF && (a5 > 0x18 || ((1 << a5) & 0x1800016) == 0))
        {
          v46 = scn_default_log();
          result = os_log_type_enabled(v46, OS_LOG_TYPE_ERROR);
          if (result)
          {
            C3DConvertFromPlatformIndependentData_cold_3();
            return 0;
          }
          return result;
        }
        v17 = 0;
        v18 = a5 - 1;
        do
        {
          switch(v18)
          {
            case 0u:
              if (a6 >= 1)
              {
                v28 = 0;
                do
                {
                  *(_DWORD *)&__dst[4 * (__int16)v28] = bswap32(*(_DWORD *)&__src[4 * (__int16)v28]);
                  ++v28;
                }
                while (a6 > (__int16)v28);
              }
              break;
            case 1u:
              if (a6 >= 1)
              {
                v29 = 0;
                do
                {
                  *(_DWORD *)&__dst[4 * (__int16)v29] = *(_DWORD *)&__src[4 * (__int16)v29];
                  ++v29;
                }
                while (a6 > (__int16)v29);
              }
              break;
            case 3u:
            case 0xFu:
              memcpy(__dst, __src, a6);
              break;
            case 5u:
              if (a6 >= 1)
              {
                v30 = 0;
                do
                {
                  *(_QWORD *)&__dst[8 * (__int16)v30] = bswap64(*(_QWORD *)&__src[8 * (__int16)v30]);
                  ++v30;
                }
                while (a6 > (__int16)v30);
              }
              break;
            case 6u:
              if (a6 >= 1)
              {
                v31 = 0;
                do
                {
                  *(_DWORD *)&__dst[4 * (__int16)v31] = bswap32(*(_DWORD *)&__src[4 * (__int16)v31]);
                  ++v31;
                }
                while (a6 > (__int16)v31);
              }
              break;
            case 7u:
            case 0x11u:
              if (a6 >= 1)
              {
                v19 = 0;
                v20 = 0;
                do
                {
                  *(_DWORD *)&__dst[4 * (__int16)v19] = bswap32(*(_DWORD *)&__src[4 * (__int16)v19]);
                  *(_DWORD *)&__dst[(4 * (__int16)v19) | 4] = bswap32(*(_DWORD *)&__src[(4 * (__int16)v19) | 4]);
                  ++v20;
                  v19 += 2;
                }
                while (a6 > (__int16)v20);
              }
              break;
            case 8u:
            case 0x12u:
              if (a6 >= 1)
              {
                v21 = 0;
                v22 = 0;
                do
                {
                  v23 = 4 * (__int16)v21;
                  *(_DWORD *)&__dst[v23] = bswap32(*(_DWORD *)&__src[v23]);
                  *(_DWORD *)&__dst[v23 + 4] = bswap32(*(_DWORD *)&__src[v23 + 4]);
                  *(_DWORD *)&__dst[v23 + 8] = bswap32(*(_DWORD *)&__src[v23 + 8]);
                  ++v22;
                  v21 += 3;
                }
                while (a6 > (__int16)v22);
              }
              break;
            case 9u:
            case 0x13u:
              if (a6 >= 1)
              {
                v24 = 0;
                v25 = 0;
                do
                {
                  v26 = 4 * (__int16)v24;
                  *(_DWORD *)&__dst[v26] = bswap32(*(_DWORD *)&__src[v26]);
                  *(_DWORD *)&__dst[v26 | 4] = bswap32(*(_DWORD *)&__src[v26 | 4]);
                  *(_DWORD *)&__dst[v26 | 8] = bswap32(*(_DWORD *)&__src[v26 | 8]);
                  *(_DWORD *)&__dst[v26 | 0xC] = bswap32(*(_DWORD *)&__src[v26 | 0xC]);
                  ++v25;
                  v24 += 4;
                }
                while (a6 > (__int16)v25);
              }
              break;
            case 0xAu:
              if (a6 >= 1)
              {
                v32 = 0;
                do
                {
                  v33 = 0;
                  v34 = 16 * v32;
                  v35 = &__src[4 * v34];
                  v36 = &__dst[4 * v34];
                  do
                  {
                    *(_DWORD *)&v36[v33] = bswap32(*(_DWORD *)&v35[v33]);
                    v33 += 4;
                  }
                  while (v33 != 64);
                  ++v32;
                }
                while (a6 > v32);
              }
              break;
            case 0xBu:
              if (a6 >= 1)
              {
                v37 = 0;
                do
                {
                  v38 = 0;
                  v39 = 9 * v37;
                  v40 = &__src[4 * v39];
                  v41 = &__dst[4 * v39];
                  do
                  {
                    *(_DWORD *)&v41[v38] = bswap32(*(_DWORD *)&v40[v38]);
                    v38 += 4;
                  }
                  while (v38 != 36);
                  ++v37;
                }
                while (a6 > v37);
              }
              break;
            case 0xCu:
              if (a6 >= 1)
              {
                v42 = 0;
                v43 = 0;
                do
                {
                  v44 = 4 * (__int16)v42;
                  *(_DWORD *)&__dst[v44] = bswap32(*(_DWORD *)&__src[v44]);
                  *(_DWORD *)&__dst[v44 | 4] = bswap32(*(_DWORD *)&__src[v44 | 4]);
                  *(_DWORD *)&__dst[v44 | 8] = bswap32(*(_DWORD *)&__src[v44 | 8]);
                  *(_DWORD *)&__dst[v44 | 0xC] = bswap32(*(_DWORD *)&__src[v44 | 0xC]);
                  ++v43;
                  v42 += 4;
                }
                while (a6 > (__int16)v43);
              }
              break;
            case 0xDu:
            case 0x10u:
              if (a6 >= 1)
              {
                v27 = 0;
                do
                {
                  *(_WORD *)&__dst[2 * (__int16)v27] = *(_WORD *)&__src[2 * (__int16)v27];
                  ++v27;
                }
                while (a6 > (__int16)v27);
              }
              break;
            case 0xEu:
              if (a6 >= 1)
              {
                v45 = 0;
                do
                {
                  *(_WORD *)&__dst[2 * (__int16)v45] = *(_WORD *)&__src[2 * (__int16)v45];
                  ++v45;
                }
                while (a6 > (__int16)v45);
              }
              break;
            default:
              *(_DWORD *)__dst = *(_DWORD *)__src;
              break;
          }
          __dst += a9;
          __src += a8;
          ++v17;
        }
        while (v17 != a7);
      }
      return 1;
    }
    v12 = scn_default_log();
    result = os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
    if (result)
    {
      C3DConvertFromPlatformIndependentData_cold_2();
      return 0;
    }
  }
  else
  {
    v9 = scn_default_log();
    result = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
    if (result)
    {
      C3DConvertFromPlatformIndependentData_cold_1();
      return 0;
    }
  }
  return result;
}

CFDataRef C3DCopyLittleEndianToHostRepresentationOfData(const __CFData *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  UInt8 *v9;
  char *BytePtr;
  CFIndex Length;
  uint64_t v12;
  uint64_t v13;

  v6 = C3DBaseTypeForCFNumberType(a2);
  v7 = C3DSizeOfBaseType(v6);
  if (a2)
  {
    v8 = v7 * a3;
    if (v7 * a3)
    {
      v9 = (UInt8 *)malloc_type_malloc(v7 * a3, 0x1869B659uLL);
      BytePtr = (char *)CFDataGetBytePtr(a1);
      Length = CFDataGetLength(a1);
      v12 = C3DSizeOfBaseType(v6);
      v13 = C3DSizeOfBaseType(v6);
      if (C3DConvertFromPlatformIndependentData(BytePtr, (char *)v9, Length, v8, v6, 1, a3, v12, v13))
        return CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v9, v8, (CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
      free(v9);
    }
  }
  return 0;
}

CFDataRef C3DCopyHostToLittleEndianRepresentationOfData(const __CFData *a1, uint64_t a2, uint64_t a3)
{
  CFIndex Length;
  int v7;
  uint64_t v8;
  unint64_t v9;
  UInt8 *v10;
  char *BytePtr;
  uint64_t v12;
  uint64_t v13;

  Length = CFDataGetLength(a1);
  v7 = C3DBaseTypeForCFNumberType(a2);
  v8 = C3DSizeOfBaseType(v7);
  if (a2)
  {
    v9 = v8 * a3;
    if (v8 * a3)
    {
      v10 = (UInt8 *)malloc_type_malloc(v8 * a3, 0x8F45E2BEuLL);
      BytePtr = (char *)CFDataGetBytePtr(a1);
      v12 = C3DSizeOfBaseType(v7);
      v13 = C3DSizeOfBaseType(v7);
      if (C3DConvertToPlatformIndependentData(BytePtr, (char *)v10, Length, v9, v7, 1, a3, v12, v13))
        return CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v10, v9, (CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
      free(v10);
    }
  }
  return 0;
}

uint64_t C3DBaseTypeArraySizeFromString(const __CFString *a1)
{
  CFRange v2;
  const __CFString *v3;
  uint64_t IntValue;
  CFRange v6;

  v2 = CFStringFind(a1, CFSTR("["), 4uLL);
  if (!v2.length)
    return 1;
  v6.length = CFStringGetLength(a1) - v2.location - 2;
  v6.location = v2.location + 1;
  v3 = CFStringCreateWithSubstring(0, a1, v6);
  IntValue = CFStringGetIntValue(v3);
  CFRelease(v3);
  return IntValue;
}

CFComparisonResult C3DBaseTypeFromGLSLString(const __CFString *a1)
{
  CFRange v2;
  const __CFString *v3;
  CFComparisonResult v4;
  CFRange v6;

  v2 = CFStringFind(a1, CFSTR("["), 4uLL);
  if (!v2.length)
    return __C3DBaseTypeFromGLSLString(a1);
  v6.length = v2.location;
  v6.location = 0;
  v3 = CFStringCreateWithSubstring(0, a1, v6);
  v4 = __C3DBaseTypeFromGLSLString(v3);
  CFRelease(v3);
  return v4;
}

CFComparisonResult __C3DBaseTypeFromGLSLString(const __CFString *a1)
{
  CFComparisonResult result;
  NSObject *v3;
  _BOOL4 v4;
  int v5;
  const __CFString *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (CFStringCompare(a1, CFSTR("int"), 0) == kCFCompareEqualTo
    || CFStringCompare(a1, CFSTR("BOOL"), 0) == kCFCompareEqualTo)
  {
    return 2;
  }
  if (CFStringCompare(a1, CFSTR("sampler1D"), 0) == kCFCompareEqualTo
    || CFStringCompare(a1, CFSTR("sampler2D"), 0) == kCFCompareEqualTo
    || CFStringCompare(a1, CFSTR("sampler3D"), 0) == kCFCompareEqualTo
    || CFStringCompare(a1, CFSTR("samplerCube"), 0) == kCFCompareEqualTo)
  {
    return 5;
  }
  if (CFStringCompare(a1, CFSTR("float"), 0) == kCFCompareEqualTo)
    return 1;
  if (CFStringCompare(a1, CFSTR("vec2"), 0) == kCFCompareEqualTo)
    return 8;
  if (CFStringCompare(a1, CFSTR("vec3"), 0) == kCFCompareEqualTo)
    return 9;
  if (CFStringCompare(a1, CFSTR("vec4"), 0) == kCFCompareEqualTo)
    return 10;
  if (CFStringCompare(a1, CFSTR("ivec2"), 0) == kCFCompareEqualTo)
    return 18;
  if (CFStringCompare(a1, CFSTR("ivec3"), 0) == kCFCompareEqualTo)
    return 19;
  if (CFStringCompare(a1, CFSTR("ivec4"), 0) == kCFCompareEqualTo)
    return 20;
  if (CFStringCompare(a1, CFSTR("mat4"), 0) == kCFCompareEqualTo
    || CFStringCompare(a1, CFSTR("mat44"), 0) == kCFCompareEqualTo)
  {
    return 11;
  }
  result = CFStringCompare(a1, CFSTR("none"), 0);
  if (result)
  {
    v3 = scn_default_log();
    v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
    result = kCFCompareEqualTo;
    if (v4)
    {
      v5 = 138412290;
      v6 = a1;
      _os_log_impl(&dword_1DCCB8000, v3, OS_LOG_TYPE_DEFAULT, "Warning: C3DBaseTypeFromGLSLString: unknown type name '%@'", (uint8_t *)&v5, 0xCu);
      return 0;
    }
  }
  return result;
}

CFComparisonResult C3DBaseTypeFromMetalOrGLSLString(const __CFString *a1)
{
  CFRange v2;
  const __CFString *v3;
  CFComparisonResult v4;
  CFRange v6;

  v2 = CFStringFind(a1, CFSTR("["), 4uLL);
  if (!v2.length)
    return __C3DBaseTypeFromMetalOrGLSLString(a1);
  v6.length = v2.location;
  v6.location = 0;
  v3 = CFStringCreateWithSubstring(0, a1, v6);
  v4 = __C3DBaseTypeFromMetalOrGLSLString(v3);
  CFRelease(v3);
  return v4;
}

CFComparisonResult __C3DBaseTypeFromMetalOrGLSLString(const __CFString *a1)
{
  CFComparisonResult result;
  NSObject *v3;
  _BOOL4 v4;
  int v5;
  const __CFString *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (CFStringCompare(a1, CFSTR("int"), 0) == kCFCompareEqualTo)
    return 2;
  if (CFStringCompare(a1, CFSTR("BOOL"), 0) == kCFCompareEqualTo)
    return 3;
  if (CFStringCompare(a1, CFSTR("texture1d"), 0) == kCFCompareEqualTo
    || CFStringCompare(a1, CFSTR("sampler1D"), 0) == kCFCompareEqualTo
    || CFStringCompare(a1, CFSTR("texture2d"), 0) == kCFCompareEqualTo
    || CFStringCompare(a1, CFSTR("sampler2D"), 0) == kCFCompareEqualTo
    || CFStringCompare(a1, CFSTR("texture3d"), 0) == kCFCompareEqualTo
    || CFStringCompare(a1, CFSTR("sampler3D"), 0) == kCFCompareEqualTo
    || CFStringCompare(a1, CFSTR("texturecube"), 0) == kCFCompareEqualTo
    || CFStringCompare(a1, CFSTR("samplerCube"), 0) == kCFCompareEqualTo)
  {
    return 5;
  }
  if (CFStringCompare(a1, CFSTR("float"), 0) == kCFCompareEqualTo)
    return 1;
  if (CFStringCompare(a1, CFSTR("float2"), 0) == kCFCompareEqualTo
    || CFStringCompare(a1, CFSTR("vec2"), 0) == kCFCompareEqualTo)
  {
    return 8;
  }
  if (CFStringCompare(a1, CFSTR("float3"), 0) == kCFCompareEqualTo
    || CFStringCompare(a1, CFSTR("vec3"), 0) == kCFCompareEqualTo)
  {
    return 9;
  }
  if (CFStringCompare(a1, CFSTR("float4"), 0) == kCFCompareEqualTo
    || CFStringCompare(a1, CFSTR("vec4"), 0) == kCFCompareEqualTo)
  {
    return 10;
  }
  if (CFStringCompare(a1, CFSTR("int2"), 0) == kCFCompareEqualTo
    || CFStringCompare(a1, CFSTR("ivec2"), 0) == kCFCompareEqualTo)
  {
    return 18;
  }
  if (CFStringCompare(a1, CFSTR("int3"), 0) == kCFCompareEqualTo
    || CFStringCompare(a1, CFSTR("ivec3"), 0) == kCFCompareEqualTo)
  {
    return 19;
  }
  if (CFStringCompare(a1, CFSTR("int4"), 0) == kCFCompareEqualTo
    || CFStringCompare(a1, CFSTR("ivec4"), 0) == kCFCompareEqualTo)
  {
    return 20;
  }
  if (CFStringCompare(a1, CFSTR("float4x4"), 0) == kCFCompareEqualTo
    || CFStringCompare(a1, CFSTR("mat4"), 0) == kCFCompareEqualTo
    || CFStringCompare(a1, CFSTR("mat44"), 0) == kCFCompareEqualTo)
  {
    return 11;
  }
  result = CFStringCompare(a1, CFSTR("none"), 0);
  if (result)
  {
    v3 = scn_default_log();
    v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
    result = kCFCompareEqualTo;
    if (v4)
    {
      v5 = 138412290;
      v6 = a1;
      _os_log_impl(&dword_1DCCB8000, v3, OS_LOG_TYPE_DEFAULT, "Warning: C3DBaseTypeFromMetalOrGLSLString: unknown type name '%@'", (uint8_t *)&v5, 0xCu);
      return 0;
    }
  }
  return result;
}

const __CFString *C3DBaseTypeStringDescription(int a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1 >= 46)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DSizeOfBaseType_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  else if (a1 <= 0x2D)
  {
    return __C3DBaseTypeStringDescriptionArray[(unsigned __int16)a1];
  }
  return CFSTR("unknown type");
}

uint64_t C3DBaseTypeGetComponentCount(unsigned int a1)
{
  NSObject *v1;

  if (a1 < 0x2E)
    return HIBYTE(__C3DBaseTypeDescArray[3 * (unsigned __int16)a1 + 1]);
  v1 = scn_default_log();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    C3DBaseTypeGetComponentType_cold_1();
  return 1;
}

uint64_t C3DBaseTypeGetBytesPerComponent(unsigned int a1)
{
  NSObject *v1;

  if (a1 < 0x2E)
    return LOBYTE(__C3DBaseTypeDescArray[3 * (unsigned __int16)a1 + 1]);
  v1 = scn_default_log();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    C3DBaseTypeGetComponentType_cold_1();
  return 0;
}

unint64_t C3DBaseTypeIsFloatingValue(unsigned int a1)
{
  NSObject *v1;
  unint64_t result;

  if (a1 < 0x2E)
    return (0x3FF819E0BFC2uLL >> a1) & 1;
  v1 = scn_default_log();
  result = os_log_type_enabled(v1, OS_LOG_TYPE_ERROR);
  if ((_DWORD)result)
  {
    C3DBaseTypeGetComponentType_cold_1();
    return 0;
  }
  return result;
}

BOOL C3DBaseTypeDescription(int a1, uint64_t *a2, uint64_t *a3, _BYTE *a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;

  if (a1 >= 46 && (v8 = scn_default_log(), os_log_type_enabled(v8, OS_LOG_TYPE_FAULT)))
  {
    C3DSizeOfBaseType_cold_1(v8, v9, v10, v11, v12, v13, v14, v15);
    if (a2)
      goto LABEL_4;
  }
  else if (a2)
  {
LABEL_4:
    if (a3 && a4)
      goto LABEL_8;
  }
  v16 = scn_default_log();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
    C3DBaseTypeDescription_cold_1(v16, v17, v18, v19, v20, v21, v22, v23);
LABEL_8:
  v24 = (unsigned __int8 *)&__C3DBaseTypeDescArray[3 * a1];
  v25 = v24[2];
  v26 = v24[3];
  LOBYTE(v24) = v24[4];
  *a2 = v25;
  *a3 = v26;
  *a4 = v24 & 1;
  return C3DBaseTypeFromDescription(*a2, v26, v24 & 1) == a1;
}

void C3DAddBaseType(uint64_t a1, float32x2_t *a2, float32x2_t *a3, float32x4_t *a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  NSObject *v40;
  NSObject *v41;

  if (!a2 && (v8 = scn_default_log(), os_log_type_enabled(v8, OS_LOG_TYPE_FAULT)))
  {
    C3DAddBaseType_cold_6(v8, v9, v10, v11, v12, v13, v14, v15);
    if (a3)
      goto LABEL_6;
  }
  else if (a3)
  {
    goto LABEL_6;
  }
  v16 = scn_default_log();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
    C3DAddBaseType_cold_5(v16, v17, v18, v19, v20, v21, v22, v23);
LABEL_6:
  if (!a4)
  {
    v24 = scn_default_log();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_FAULT))
      C3DAddBaseType_cold_4(v24, v25, v26, v27, v28, v29, v30, v31);
  }
  switch((int)a1)
  {
    case 1:
    case 7:
      a4->f32[0] = a2->f32[0] + a3->f32[0];
      break;
    case 2:
      a4->i32[0] = a3->i32[0] + a2->i32[0];
      break;
    case 3:
    case 4:
    case 5:
    case 12:
    case 16:
      v32 = scn_default_log();
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
        C3DAddBaseType_cold_2(a1, v32, v33, v34, v35, v36, v37, v38);
      break;
    case 6:
      v39 = *(double *)a2 + *(double *)a3;
      goto LABEL_20;
    case 8:
    case 18:
      v39 = COERCE_DOUBLE(vadd_f32(*a2, *a3));
LABEL_20:
      *(double *)a4->i64 = v39;
      break;
    case 9:
    case 10:
    case 19:
    case 20:
      *a4 = vaddq_f32(*(float32x4_t *)a2->f32, *(float32x4_t *)a3->f32);
      break;
    case 11:
      C3DMatrix4x4Add((float32x4_t *)a2, (float32x4_t *)a3, a4);
      break;
    case 13:
      C3DColor4Add((float *)a2, (float *)a3, a4->f32);
      break;
    case 14:
    case 17:
      a4->i16[0] = a3->i16[0] + a2->i16[0];
      break;
    case 15:
      v41 = scn_default_log();
      if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
        C3DAddBaseType_cold_3();
      break;
    default:
      v40 = scn_default_log();
      if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
        C3DAddBaseType_cold_1();
      break;
  }
}

void C3DConcatBaseType(uint64_t a1, float32x2_t *a2, float32x4_t *a3, float32x4_t *a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  if (!a2 && (v8 = scn_default_log(), os_log_type_enabled(v8, OS_LOG_TYPE_FAULT)))
  {
    C3DAddBaseType_cold_6(v8, v9, v10, v11, v12, v13, v14, v15);
    if (a3)
      goto LABEL_6;
  }
  else if (a3)
  {
    goto LABEL_6;
  }
  v16 = scn_default_log();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
    C3DAddBaseType_cold_5(v16, v17, v18, v19, v20, v21, v22, v23);
LABEL_6:
  if (!a4)
  {
    v24 = scn_default_log();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_FAULT))
      C3DAddBaseType_cold_4(v24, v25, v26, v27, v28, v29, v30, v31);
  }
  if ((_DWORD)a1 == 11)
    C3DMatrix4x4Mult((uint64_t)a2, a3, a4);
  else
    C3DAddBaseType(a1, a2, (float32x2_t *)a3, a4);
}

void C3DSubBaseType(uint64_t a1, float32x2_t *a2, float32x2_t *a3, float32x4_t *a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  NSObject *v40;
  NSObject *v41;

  if (!a2 && (v8 = scn_default_log(), os_log_type_enabled(v8, OS_LOG_TYPE_FAULT)))
  {
    C3DAddBaseType_cold_6(v8, v9, v10, v11, v12, v13, v14, v15);
    if (a3)
      goto LABEL_6;
  }
  else if (a3)
  {
    goto LABEL_6;
  }
  v16 = scn_default_log();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
    C3DAddBaseType_cold_5(v16, v17, v18, v19, v20, v21, v22, v23);
LABEL_6:
  if (!a4)
  {
    v24 = scn_default_log();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_FAULT))
      C3DAddBaseType_cold_4(v24, v25, v26, v27, v28, v29, v30, v31);
  }
  switch((int)a1)
  {
    case 1:
    case 7:
      a4->f32[0] = a2->f32[0] - a3->f32[0];
      break;
    case 2:
      a4->i32[0] = a2->i32[0] - a3->i32[0];
      break;
    case 3:
    case 4:
    case 5:
    case 12:
    case 16:
      v32 = scn_default_log();
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
        C3DSubBaseType_cold_2(a1, v32, v33, v34, v35, v36, v37, v38);
      break;
    case 6:
      v39 = *(double *)a2 - *(double *)a3;
      goto LABEL_20;
    case 8:
    case 18:
      v39 = COERCE_DOUBLE(vsub_f32(*a2, *a3));
LABEL_20:
      *(double *)a4->i64 = v39;
      break;
    case 9:
    case 10:
    case 19:
    case 20:
      *a4 = vsubq_f32(*(float32x4_t *)a2->f32, *(float32x4_t *)a3->f32);
      break;
    case 11:
      C3DMatrix4x4Sub((float32x4_t *)a2, (float32x4_t *)a3, a4);
      break;
    case 13:
      C3DColor4Sub((float *)a2, (float *)a3, a4->f32);
      break;
    case 14:
    case 17:
      a4->i16[0] = a2->i16[0] - a3->i16[0];
      break;
    case 15:
      v41 = scn_default_log();
      if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
        C3DSubBaseType_cold_3();
      break;
    default:
      v40 = scn_default_log();
      if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
        C3DSubBaseType_cold_1();
      break;
  }
}

uint64_t C3DGetByteCountDescriptionFromSize(uint64_t a1)
{
  return objc_msgSend(MEMORY[0x1E0CB34E8], "stringFromByteCount:countStyle:", a1, 3);
}

UInt8 *C3DCreateCStringFromStringWithEncoding(CFStringRef theString, CFStringEncoding a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFIndex Length;
  CFIndex MaximumSizeForEncoding;
  CFIndex v14;
  UInt8 *v15;
  NSObject *v16;
  CFRange v18;

  if (!theString)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DCreateCStringFromStringWithEncoding_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  Length = CFStringGetLength(theString);
  MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, a2);
  if ((MaximumSizeForEncoding & 0x8000000000000000) == 0)
  {
    v14 = MaximumSizeForEncoding + 1;
    v15 = (UInt8 *)malloc_type_calloc(MaximumSizeForEncoding + 1, 1uLL, 0x8347A507uLL);
    v18.location = 0;
    v18.length = Length;
    if (CFStringGetBytes(theString, v18, a2, 0x20u, 0, v15, v14, 0))
      return v15;
    free(v15);
  }
  v16 = scn_default_log();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    C3DCreateCStringFromStringWithEncoding_cold_1();
  return 0;
}

UInt8 *C3DCreateCStringFromString(const __CFString *a1)
{
  return C3DCreateCStringFromStringWithEncoding(a1, 0x600u);
}

id C3DCopyRelativeFromFileURL(void *a1, void *a2)
{
  return C3DCopyRelativeFromFolderURL((void *)objc_msgSend(a1, "URLByDeletingLastPathComponent"), a2);
}

id C3DCopyRelativeFromFolderURL(void *a1, void *a2)
{
  void *v3;
  __CFString *v4;
  void *v5;
  id v7;

  v3 = (void *)objc_msgSend(a1, "path");
  v7 = (id)objc_msgSend(a2, "path");
  if (v3)
  {
    v4 = &stru_1EA5A6480;
    while ((objc_msgSend(v3, "isEqualToString:", CFSTR("/")) & 1) == 0)
    {
      if (objc_msgSend(v7, "hasPrefix:", v3))
      {
        v5 = (void *)objc_msgSend(v7, "stringByReplacingCharactersInRange:withString:", 0, objc_msgSend(v3, "length"), &stru_1EA5A6480);
        if (objc_msgSend(v5, "characterAtIndex:", 0) == 47)
          v5 = (void *)objc_msgSend(v5, "substringFromIndex:", 1);
        v7 = (id)-[__CFString stringByAppendingPathComponent:](v4, "stringByAppendingPathComponent:", v5);
        return v7;
      }
      v3 = (void *)objc_msgSend(v3, "stringByDeletingLastPathComponent");
      v4 = (__CFString *)-[__CFString stringByAppendingPathComponent:](v4, "stringByAppendingPathComponent:", CFSTR(".."));
      if (!v3)
        return v7;
    }
  }
  return v7;
}

CFErrorRef C3DErrorCreate(CFIndex a1, void *a2, void *a3)
{
  void *v4;
  CFIndex v5;
  const __CFDictionary *v6;
  CFErrorRef v7;
  void *keys[2];
  void *values[3];

  values[2] = *(void **)MEMORY[0x1E0C80C00];
  values[0] = a2;
  values[1] = a3;
  v4 = (void *)*MEMORY[0x1E0C9AFF0];
  keys[0] = *(void **)MEMORY[0x1E0C9AFE0];
  keys[1] = v4;
  if (a3)
    v5 = 2;
  else
    v5 = 1;
  v6 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, v5, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v7 = CFErrorCreate(0, CFSTR("SCNKitErrorDomain"), a1, v6);
  CFRelease(v6);
  return v7;
}

uint64_t C3DMakePowerOfTwo(int a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = 1;
  do
  {
    v2 = v1;
    v1 = (2 * v1);
  }
  while ((int)v2 < a1);
  return v2;
}

double C3DParseVersionNumber(CFStringRef theString)
{
  const __CFArray *ArrayBySeparatingStrings;
  CFIndex v2;
  double v3;
  double v4;
  const __CFString *ValueAtIndex;
  NSObject *v6;
  uint8_t v8[16];

  if (theString)
  {
    ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(0, theString, CFSTR("."));
    if (CFArrayGetCount(ArrayBySeparatingStrings) < 1)
    {
      v3 = 0.0;
    }
    else
    {
      v2 = 0;
      v3 = 0.0;
      v4 = 1.0;
      do
      {
        ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, v2);
        v3 = v3 + (double)CFStringGetIntValue(ValueAtIndex) * v4;
        v4 = v4 / 100.0;
        ++v2;
      }
      while (v2 < CFArrayGetCount(ArrayBySeparatingStrings));
    }
    CFRelease(ArrayBySeparatingStrings);
  }
  else
  {
    v6 = scn_default_log();
    v3 = 0.0;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_1DCCB8000, v6, OS_LOG_TYPE_DEFAULT, "Warning: C3DParseVersionNumber - No version found", v8, 2u);
    }
  }
  return v3;
}

const char *SCNStringGetCString(const char *result)
{
  char *v1;

  if (result)
  {
    v1 = (char *)result;
    result = CFStringGetCStringPtr((CFStringRef)result, 0x600u);
    if (!result)
      return (const char *)objc_msgSend(v1, "UTF8String");
  }
  return result;
}

IOSurfaceRef SCNIOSurfaceCreateWithSize(double a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[6];
  _QWORD v11[7];

  v1 = (int)*(float *)&a1;
  v11[6] = *MEMORY[0x1E0C80C00];
  v2 = (int)*((float *)&a1 + 1);
  v10[0] = *MEMORY[0x1E0CBC1E0];
  v11[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", (int)*(float *)&a1);
  v10[1] = *MEMORY[0x1E0CBC008];
  v3 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v2);
  v4 = *MEMORY[0x1E0CBBF00];
  v11[1] = v3;
  v11[2] = &unk_1EA5FEEC8;
  v5 = *MEMORY[0x1E0CBBF08];
  v10[2] = v4;
  v10[3] = v5;
  v6 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", (4 * v1));
  v7 = *MEMORY[0x1E0CBC070];
  v11[3] = v6;
  v11[4] = &unk_1EA5FEEE0;
  v8 = *MEMORY[0x1E0CBBEE0];
  v10[4] = v7;
  v10[5] = v8;
  v11[5] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", (4 * v2 * v1));
  return IOSurfaceCreate((CFDictionaryRef)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v11, v10, 6));
}

uint64_t C3DIOSurfaceToTexImage(uint64_t a1, void *a2, unsigned int a3, int a4, double a5)
{
  uint64_t v6;

  if (a4 != 6408)
    C3DIOSurfaceToTexImage_cold_1();
  BYTE4(v6) = 0;
  LODWORD(v6) = 0;
  return objc_msgSend(a2, "texImageIOSurface:target:internalFormat:width:height:format:type:plane:invert:", a1, a3, 6408, (int)*(float *)&a5, (int)*((float *)&a5 + 1), 6408, 33639, v6);
}

CFURLRef C3DCopyResolvedURLFromFileURL(const __CFURL *a1)
{
  const __CFString *v2;
  const __CFString *v3;
  CFStringRef v4;
  const __CFString *v5;
  CFURLRef v6;
  Boolean v7;

  v2 = CFURLCopyFileSystemPath(a1, kCFURLPOSIXPathStyle);
  if (v2)
  {
    v3 = v2;
    v4 = C3DCopyResolvedPathFromPath(v2);
    if (v4)
    {
      v5 = v4;
      if (CFEqual(v3, v4))
      {
        v6 = 0;
      }
      else
      {
        v7 = CFURLHasDirectoryPath(a1);
        v6 = CFURLCreateWithFileSystemPath(0, v5, kCFURLPOSIXPathStyle, v7);
      }
      CFRelease(v5);
      CFRelease(v3);
      if (v6)
        return v6;
    }
    else
    {
      CFRelease(v3);
    }
  }
  return (CFURLRef)CFRetain(a1);
}

CFStringRef C3DCopyResolvedPathFromPath(const __CFString *a1)
{
  UInt8 *v1;
  CFStringRef v2;
  char cStr[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v1 = C3DCreateCStringFromStringWithEncoding(a1, 0x8000100u);
  realpath_DARWIN_EXTSN((const char *)v1, cStr);
  v2 = CFStringCreateWithCString(0, cStr, 0x8000100u);
  free(v1);
  return v2;
}

id C3DURLCreateCopyAppendingPathComponent(CFURLRef url, CFStringRef pathComponent)
{
  CFURLRef v2;
  void *v3;
  id v5;

  v2 = CFURLCreateCopyAppendingPathComponent((CFAllocatorRef)*MEMORY[0x1E0C9AE00], url, pathComponent, 0);
  v3 = (void *)-[__CFURL standardizedURL](v2, "standardizedURL");
  if (v2)
  {
    v5 = v3;
    CFRelease(v2);
    v3 = v5;
  }
  return v3;
}

uint64_t C3DStringNamed(void *a1)
{
  CFURLRef v1;
  NSObject *v3;

  v1 = C3DURLOfResourceNamed(a1);
  if (v1)
    return objc_msgSend(MEMORY[0x1E0CB3940], "stringWithContentsOfURL:encoding:error:", v1, 4, 0);
  v3 = scn_default_log();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    C3DStringNamed_cold_1();
  return 0;
}

CFURLRef C3DURLOfResourceNamed(void *a1)
{
  void *v2;
  const __CFString *v3;
  const __CFString *v4;
  const __CFString *v5;
  __CFBundle *BundleWithIdentifier;
  CFURLRef v7;
  __CFBundle *MainBundle;

  v2 = (void *)objc_msgSend(a1, "lastPathComponent");
  if ((objc_msgSend(a1, "isEqualToString:", v2) & 1) != 0)
    v3 = 0;
  else
    v3 = (const __CFString *)objc_msgSend(a1, "stringByDeletingLastPathComponent");
  v4 = (const __CFString *)objc_msgSend(a1, "pathExtension");
  v5 = (const __CFString *)objc_msgSend(v2, "stringByDeletingPathExtension");
  BundleWithIdentifier = CFBundleGetBundleWithIdentifier(CFSTR("com.apple.SceneKit"));
  v7 = CFBundleCopyResourceURL(BundleWithIdentifier, v5, v4, 0);
  if (!v7)
  {
    MainBundle = CFBundleGetMainBundle();
    v7 = CFBundleCopyResourceURL(MainBundle, v5, v4, v3);
  }
  return v7;
}

CFURLRef C3DCopyURLOfResourceNamed(void *a1)
{
  CFURLRef v1;
  CFURLRef v2;

  v1 = C3DURLOfResourceNamed(a1);
  v2 = v1;
  if (v1)
    CFRetain(v1);
  return v2;
}

uint64_t C3DURLIsInMainBundle(const __CFURL *a1)
{
  __CFBundle *MainBundle;
  uint64_t v3;
  __CFBundle *v4;
  const __CFURL *v5;
  const __CFURL *v6;
  __CFString *v7;
  __CFString *v8;
  __CFString *v9;
  CFRange v10;
  BOOL v11;
  uint64_t v12;
  UInt32 packageCreator[2];

  MainBundle = CFBundleGetMainBundle();
  v3 = 0;
  if (!a1)
    return v3;
  v4 = MainBundle;
  if (!MainBundle)
    return v3;
  *(_QWORD *)packageCreator = 0;
  CFBundleGetPackageInfo(MainBundle, &packageCreator[1], packageCreator);
  v3 = 0;
  if (packageCreator[1] != 1095782476)
    return v3;
  v5 = CFBundleCopyBundleURL(v4);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = (__CFString *)CFURLCopyPath(v5);
  v8 = (__CFString *)CFURLCopyPath(a1);
  v9 = v8;
  if (v7 && v8)
  {
    v10 = CFStringFind((CFStringRef)-[__CFString stringByStandardizingPath](v8, "stringByStandardizingPath"), (CFStringRef)-[__CFString stringByStandardizingPath](v7, "stringByStandardizingPath"), 1uLL);
    if (v10.location)
      v11 = 1;
    else
      v11 = v10.length <= 0;
    v12 = !v11;
    goto LABEL_15;
  }
  v12 = 0;
  v3 = 0;
  if (v7)
  {
LABEL_15:
    CFRelease(v7);
    v3 = v12;
  }
  if (v9)
    CFRelease(v9);
  CFRelease(v6);
  return v3;
}

uint64_t C3DDictionaryNamed(void *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t result;
  CFURLRef v5;
  NSObject *v6;
  uint64_t v7;

  v2 = (void *)C3DGetTextResourceWithNameAllowingHotReload(a1);
  if (!v2
    || (v3 = objc_msgSend(v2, "dataUsingEncoding:", 4),
        v7 = 0,
        (result = objc_msgSend(MEMORY[0x1E0CB38B0], "propertyListWithData:options:format:error:", v3, 0, &v7, 0)) == 0))
  {
    v5 = C3DURLOfResourceNamed(a1);
    if (v5)
    {
      return objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithContentsOfURL:", v5);
    }
    else
    {
      v6 = scn_default_log();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        C3DDictionaryNamed_cold_1();
      return 0;
    }
  }
  return result;
}

uint64_t C3DJsonNamed(void *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t result;
  NSObject *v8;
  CFURLRef v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  NSObject *v13;
  uint64_t v14;

  v14 = 0;
  v4 = (void *)C3DGetTextResourceWithNameAllowingHotReload(a1);
  if (v4)
  {
    v5 = v4;
    if (a2)
      v5 = (void *)(*(uint64_t (**)(uint64_t, void *))(a2 + 16))(a2, v4);
    v6 = objc_msgSend(v5, "dataUsingEncoding:", 4);
    result = objc_msgSend(MEMORY[0x1E0CB36D8], "JSONObjectWithData:options:error:", v6, 0, &v14);
    if (v14)
    {
      v8 = scn_default_log();
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        return 0;
LABEL_6:
      C3DJsonNamed_cold_2();
      return 0;
    }
    if (result)
      return result;
  }
  v9 = C3DURLOfResourceNamed(a1);
  if (!v9)
  {
    v13 = scn_default_log();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      C3DJsonNamed_cold_1();
    return 0;
  }
  v10 = (void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithContentsOfURL:encoding:error:", v9, 4, 0);
  if (a2)
    v10 = (void *)(*(uint64_t (**)(uint64_t, void *))(a2 + 16))(a2, v10);
  v11 = objc_msgSend(v10, "dataUsingEncoding:", 4);
  result = objc_msgSend(MEMORY[0x1E0CB36D8], "JSONObjectWithData:options:error:", v11, 0, &v14);
  if (v14)
  {
    v12 = scn_default_log();
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      return 0;
    goto LABEL_6;
  }
  return result;
}

BOOL C3DEAGLContextAreShared(void *a1, void *a2)
{
  uint64_t v3;

  v3 = objc_msgSend(a1, "sharegroup");
  return v3 == objc_msgSend(a2, "sharegroup");
}

uint64_t C3DPreserveOriginalTopologyDefaultValue()
{
  return C3DWasLinkedBeforeMajorOSYear2019() ^ 1;
}

uint64_t C3DPtrFromMTLBuffer(void *a1, _QWORD *a2)
{
  *a2 = objc_msgSend(a1, "length");
  return objc_msgSend(a1, "contents");
}

uint64_t C3DDataFromMTLBuffer(void *a1)
{
  NSObject *v2;

  if (objc_msgSend(a1, "storageMode") != 2)
    return objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytesNoCopy:length:freeWhenDone:", objc_msgSend(a1, "contents"), objc_msgSend(a1, "length"), 0);
  if ((C3DDataFromMTLBuffer_done & 1) == 0)
  {
    C3DDataFromMTLBuffer_done = 1;
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      C3DDataFromMTLBuffer_cold_1();
  }
  return 0;
}

uint64_t C3DASTCIsSupported()
{
  if (C3DMetalIsSupported_onceToken != -1)
    dispatch_once(&C3DMetalIsSupported_onceToken, &__block_literal_global_50);
  return kASTCIsSupported;
}

void _SCNSetLinearRenderingEnabled(int a1)
{
  NSObject *v2;
  BOOL v3;
  _DWORD v4[2];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (C3DLinearRenderingIsEnabled_onceToken != -1)
    dispatch_once(&C3DLinearRenderingIsEnabled_onceToken, &__block_literal_global_167);
  v2 = scn_default_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl(&dword_1DCCB8000, v2, OS_LOG_TYPE_INFO, "Info: linear rendering forced to %d", (uint8_t *)v4, 8u);
  }
  if (a1)
  {
    if (C3DMetalIsSupported_onceToken != -1)
      dispatch_once(&C3DMetalIsSupported_onceToken, &__block_literal_global_50);
    v3 = C3DMetalIsSupported_supported != 0;
  }
  else
  {
    v3 = 0;
  }
  _gC3DEnableLinearRendering = v3;
}

uint64_t C3DDeduceSphericalHarmonicsOrderFromDataLength(unint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DDeduceSphericalHarmonicsOrderFromDataLength_cold_2(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  v10 = sqrt((double)(a1 / 0xC));
  if (12 * (v10 * v10) != a1)
  {
    v11 = scn_default_log();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
      C3DDeduceSphericalHarmonicsOrderFromDataLength_cold_1();
  }
  return v10;
}

float C3DComputeGaussianProbability(float a1, float a2)
{
  return (float)(1.0 / (float)(a2 * 2.5066)) * expf((float)-(float)(a1 * a1) / (float)((float)(a2 + a2) * a2));
}

uint64_t C3DIsRunningInXcode()
{
  if (C3DIsRunningInXcode_onceToken != -1)
    dispatch_once(&C3DIsRunningInXcode_onceToken, &__block_literal_global_182);
  return C3DIsRunningInXcode_runningXcode;
}

uint64_t C3DIsRunningInSCNTool()
{
  if (C3DIsRunningInSCNTool_onceToken != -1)
    dispatch_once(&C3DIsRunningInSCNTool_onceToken, &__block_literal_global_185_0);
  return C3DIsRunningInSCNTool_runningSCNTool;
}

CFTypeRef C3DSetShaderCompilationDirectory(CFTypeRef cf)
{
  CFTypeRef result;

  result = (CFTypeRef)kShaderCompilationDirectory;
  if ((CFTypeRef)kShaderCompilationDirectory != cf)
  {
    if (kShaderCompilationDirectory)
    {
      CFRelease((CFTypeRef)kShaderCompilationDirectory);
      kShaderCompilationDirectory = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    kShaderCompilationDirectory = (uint64_t)result;
  }
  return result;
}

uint64_t C3DGetShaderCompilationDirectory()
{
  return kShaderCompilationDirectory;
}

CFTypeRef C3DSetShaderCacheLibraryURL(CFTypeRef cf)
{
  CFTypeRef result;

  result = (CFTypeRef)kShaderCacheLibraryURL;
  if ((CFTypeRef)kShaderCacheLibraryURL != cf)
  {
    if (kShaderCacheLibraryURL)
    {
      CFRelease((CFTypeRef)kShaderCacheLibraryURL);
      kShaderCacheLibraryURL = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    kShaderCacheLibraryURL = (uint64_t)result;
  }
  return result;
}

const __CFArray *C3DCreatePathFromComponents(const __CFArray *theArray)
{
  if (theArray)
    return (const __CFArray *)CFStringCreateByCombiningStrings(0, theArray, CFSTR("."));
  return theArray;
}

uint64_t C3DIsRunningInEditor()
{
  return gEditingMode;
}

uint64_t C3DSetIsRunningInEditor(uint64_t result)
{
  gEditingMode = result;
  return result;
}

__CFArray *C3DCFArrayCreateBySortingStringValues(CFArrayRef theArray)
{
  __CFArray *MutableCopy;
  CFRange v4;

  if (!theArray)
    return 0;
  MutableCopy = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, theArray);
  v4.length = CFArrayGetCount(theArray);
  v4.location = 0;
  CFArraySortValues(MutableCopy, v4, (CFComparatorFunction)_C3DCFArrayCreateBySortingStringValuesComparatorFunction, 0);
  return MutableCopy;
}

CFComparisonResult _C3DCFArrayCreateBySortingStringValuesComparatorFunction(const __CFString *a1, const __CFString *a2)
{
  return CFStringCompare(a1, a2, 0);
}

uint64_t C3DCFArrayGetSubarrayWithRange(void *a1, const char *a2, uint64_t a3)
{
  return objc_msgSend(a1, "subarrayWithRange:", a2, a3);
}

CFArrayRef C3DCFDictionaryCopyAllKeys(const __CFDictionary *a1)
{
  CFIndex Count;
  CFIndex v3;
  const void **v4;
  CFArrayRef v5;

  if (!a1)
    return CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, MEMORY[0x1E0C9B378]);
  Count = CFDictionaryGetCount(a1);
  if (!Count)
    return CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, MEMORY[0x1E0C9B378]);
  v3 = Count;
  v4 = (const void **)malloc_type_malloc(8 * Count, 0x80040B8603338uLL);
  CFDictionaryGetKeysAndValues(a1, v4, 0);
  v5 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v4, v3, MEMORY[0x1E0C9B378]);
  free(v4);
  return v5;
}

void C3DCFSetApplyBlock(const __CFSet *a1, uint64_t a2)
{
  uint64_t context;

  if (a1)
  {
    if (a2)
    {
      context = a2;
      CFSetApplyFunction(a1, (CFSetApplierFunction)_C3DCFSetApplyBlock, &context);
    }
  }
}

uint64_t _C3DCFSetApplyBlock(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)a2 + 16))();
}

void C3DCFDictionaryApplyBlock(const __CFDictionary *a1, uint64_t a2)
{
  uint64_t context;

  if (a1)
  {
    if (a2)
    {
      context = a2;
      CFDictionaryApplyFunction(a1, (CFDictionaryApplierFunction)_C3DCFDictionaryApplyBlock, &context);
    }
  }
}

uint64_t _C3DCFDictionaryApplyBlock(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))();
}

void C3DCFDictionaryApplyBlockBySortingStringKeys(const __CFDictionary *a1, uint64_t a2)
{
  const __CFArray *v4;
  __CFArray *v5;
  _QWORD v6[6];

  if (a1)
  {
    if (a2)
    {
      v4 = C3DCFDictionaryCopyAllKeys(a1);
      v5 = C3DCFArrayCreateBySortingStringValues(v4);
      CFRelease(v4);
      v6[0] = MEMORY[0x1E0C809B0];
      v6[1] = 3221225472;
      v6[2] = __C3DCFDictionaryApplyBlockBySortingStringKeys_block_invoke;
      v6[3] = &unk_1EA5A0F30;
      v6[4] = a2;
      v6[5] = a1;
      C3DCFArrayApplyBlock(v5, (uint64_t)v6);
      CFRelease(v5);
    }
  }
}

uint64_t C3DCFTypeIsDictionary()
{
  objc_opt_class();
  return objc_opt_isKindOfClass() & 1;
}

void _serializableCFTypeIDs()
{
  if (!_serializableCFTypeIDs_serializableTypes)
  {
    _serializableCFTypeIDs_serializableTypes = CFNumberGetTypeID();
    qword_1F03C5FE8 = CFDataGetTypeID();
    qword_1F03C5FF0 = CFStringGetTypeID();
    qword_1F03C5FF8 = CFDateGetTypeID();
    qword_1F03C6000 = CFArrayGetTypeID();
    qword_1F03C6008 = CFDictionaryGetTypeID();
  }
}

void OUTLINED_FUNCTION_4_7(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x12u);
}

double SCNNodeGetBoundingSphere(void *a1, uint64_t a2)
{
  uint64_t v4;
  double result;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t j;
  void *v17;
  uint64_t *v18;
  _QWORD *v19;
  unsigned int v20;
  char v21;
  CFTypeRef *v22;
  uint64_t v23;
  float32x4_t *v24;
  float32x4_t *WorldMatrix;
  float32x4_t v26;
  float32x4_t v27;
  float v28;
  const __CFArray *ParticleSystems;
  CFIndex Count;
  float32_t v31;
  float32x4_t v32;
  float32x4_t *v33;
  float32x4_t v34;
  float v35;
  uint64_t v37;
  float32x4_t *v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float v42;
  float32x4_t v43;
  float32_t v44;
  int v45;
  float32x4_t v46;
  double v47;
  __n128 v48;
  float32x4_t v49;
  uint64_t v50;
  float32x4_t *v51;
  _BYTE v52[160];
  _QWORD v53[4];
  _QWORD v54[6];
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  void *v60;
  _BYTE v61[80];
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  _OWORD v66[2];
  int v67;
  _QWORD v68[2];
  void (*v69)(uint64_t);
  void *v70;
  uint64_t v71;
  _BYTE v72[128];
  _BYTE v73[128];
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v4 = objc_msgSend(a1, "count");
  result = 0.0;
  if (v4)
  {
    v6 = (_QWORD *)objc_msgSend((id)objc_msgSend(a1, "firstObject", 0.0), "nodeRef");
    if (v6)
    {
      v7 = C3DGetScene(v6);
      result = 0.0;
      if (v7)
      {
        v8 = v7;
        C3DSceneLock(v7);
        v9 = MEMORY[0x1E0C809B0];
        v68[0] = MEMORY[0x1E0C809B0];
        v68[1] = 3221225472;
        v69 = (void (*)(uint64_t))__SCNNodeGetBoundingSphere_block_invoke;
        v70 = &__block_descriptor_40_e5_v8__0l;
        v71 = v8;
        memset(v66, 0, sizeof(v66));
        v67 = 1065353216;
        std::__hash_table<std::__hash_value_type<unsigned long long,SCNMTLLightSetData>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SCNMTLLightSetData>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SCNMTLLightSetData>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SCNMTLLightSetData>>>::__rehash<true>((uint64_t)v66, vcvtps_u32_f32((float)(unint64_t)objc_msgSend(a1, "count") / 1.0));
        v64 = 0u;
        v65 = 0u;
        v62 = 0u;
        v63 = 0u;
        v10 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v62, v73, 16);
        if (v10)
        {
          v11 = *(_QWORD *)v63;
          do
          {
            for (i = 0; i != v10; ++i)
            {
              if (*(_QWORD *)v63 != v11)
                objc_enumerationMutation(a1);
              v13 = *(void **)(*((_QWORD *)&v62 + 1) + 8 * i);
              v59 = objc_msgSend(v13, "nodeRef");
              v50 = (uint64_t)&v59;
              std::__hash_table<std::__hash_value_type<__C3DNode *,SCNNode *>,std::__unordered_map_hasher<__C3DNode *,std::__hash_value_type<__C3DNode *,SCNNode *>,std::hash<__C3DNode *>,std::equal_to<__C3DNode *>,true>,std::__unordered_map_equal<__C3DNode *,std::__hash_value_type<__C3DNode *,SCNNode *>,std::equal_to<__C3DNode *>,std::hash<__C3DNode *>,true>,std::allocator<std::__hash_value_type<__C3DNode *,SCNNode *>>>::__emplace_unique_key_args<__C3DNode *,std::piecewise_construct_t const&,std::tuple<__C3DNode *&&>,std::tuple<>>((uint64_t)v66, &v59, (uint64_t)&std::piecewise_construct, (_QWORD **)&v50)[3] = v13;
            }
            v10 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v62, v73, 16);
          }
          while (v10);
        }
        v59 = 0xA00000000;
        v60 = v61;
        v55 = 0u;
        v56 = 0u;
        v57 = 0u;
        v58 = 0u;
        v14 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v55, v72, 16, a2);
        if (v14)
        {
          v15 = *(_QWORD *)v56;
          do
          {
            for (j = 0; j != v14; ++j)
            {
              if (*(_QWORD *)v56 != v15)
                objc_enumerationMutation(a1);
              v17 = *(void **)(*((_QWORD *)&v55 + 1) + 8 * j);
              v50 = 0;
              v50 = objc_msgSend(v17, "nodeRef");
              v18 = std::__hash_table<std::__hash_value_type<__C3DNode *,SCNNode *>,std::__unordered_map_hasher<__C3DNode *,std::__hash_value_type<__C3DNode *,SCNNode *>,std::hash<__C3DNode *>,std::equal_to<__C3DNode *>,true>,std::__unordered_map_equal<__C3DNode *,std::__hash_value_type<__C3DNode *,SCNNode *>,std::equal_to<__C3DNode *>,std::hash<__C3DNode *>,true>,std::allocator<std::__hash_value_type<__C3DNode *,SCNNode *>>>::find<__C3DNode *>(v66, &v50);
              std::__hash_table<std::__hash_value_type<int,SCNPerformanceDataMapping>,std::__unordered_map_hasher<int,std::__hash_value_type<int,SCNPerformanceDataMapping>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,SCNPerformanceDataMapping>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,SCNPerformanceDataMapping>>>::erase(v66, v18);
              v19 = (_QWORD *)v50;
              v53[0] = v9;
              v53[1] = 3321888768;
              v53[2] = __SCNNodeGetBoundingSphere_block_invoke_2;
              v53[3] = &__block_descriptor_80_e8_32c115_ZTSNSt3__113unordered_mapIP9__C3DNodeP7SCNNodeNS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorINS_4pairIKS2_S4_EEEEEE_e20_q16__0____C3DNode__8l;
              std::unordered_map<__C3DNode *,SCNNode *>::unordered_map((uint64_t)v54, (uint64_t)v66);
              v54[5] = &v59;
              C3DNodeApplyHierarchySkippingHiddenNodes((uint64_t)v19, (uint64_t)v53);
              std::__hash_table<std::__hash_value_type<unsigned long long,SCNMTLLightSetData>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SCNMTLLightSetData>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SCNMTLLightSetData>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SCNMTLLightSetData>>>::~__hash_table((uint64_t)v54);
            }
            v14 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v55, v72, 16);
          }
          while (v14);
        }
        v50 = 0xA00000000;
        v51 = (float32x4_t *)v52;
        v20 = v59;
        if ((_DWORD)v59)
        {
          v21 = 0;
          v22 = (CFTypeRef *)v60;
          v23 = 8 * v59;
          v46 = 0u;
          do
          {
            v24 = (float32x4_t *)*v22;
            if ((C3DGetBoundingSphere(*v22, 0, (uint64_t)&v49) & 1) != 0)
            {
              WorldMatrix = C3DNodeGetWorldMatrix(v24);
              C3DSphereXFormMatrix4x4(&v49, WorldMatrix, (uint64_t)&v49);
              if ((v21 & 1) != 0
                && (v26 = vsubq_f32(v46, v49),
                    v27 = vmulq_f32(v26, v26),
                    v28 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v27, 2), vaddq_f32(v27, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.f32, 1))).f32[0]), (float)(v46.f32[3] + v28) >= v49.f32[3]))
              {
                if ((float)(v49.f32[3] + v28) > v46.f32[3])
                {
                  v31 = (float)((float)(v46.f32[3] + v49.f32[3]) + v28) * 0.5;
                  v32 = vmlaq_n_f32(v46, v26, (float)(v46.f32[3] - v31) / v28);
                  v32.f32[3] = v31;
                  v46 = v32;
                }
                v21 = 1;
              }
              else
              {
                v21 = 1;
                v46 = v49;
              }
            }
            else if ((v45 & 1) != 0 && (C3DNodeHasCamera((uint64_t)v24) & 1) != 0
                   || (v45 & 0x100) != 0 && (C3DNodeHasLight((uint64_t)v24) & 1) != 0
                   || (ParticleSystems = C3DNodeGetParticleSystems((uint64_t)v24)) != 0
                   && (Count = CFArrayGetCount(ParticleSystems), (v45 & 0x10000) != 0)
                   && Count > 0
                   || (v45 & 0x1000000) != 0 && !C3DNodeHasChildren((uint64_t)v24))
            {
              v48.n128_u32[2] = 0;
              v48.n128_u64[0] = 0;
              C3DNodeGetWorldPosition(v24, &v48);
              _ZN3C3D5ArrayIDv3_fLj10ENS_15MallocAllocatorEE9push_backIRS1_EEvOT_((uint64_t)&v50, &v48);
            }
            ++v22;
            v23 -= 8;
          }
          while (v23);
          v33 = v51;
          v20 = v50;
          v34 = v46;
        }
        else
        {
          v21 = 0;
          v34 = 0uLL;
          v33 = (float32x4_t *)v52;
        }
        v35 = v34.f32[3];
        if (v34.f32[3] >= 1.0 || v34.f32[3] <= 0.0)
          v35 = 1.0;
        if (v20)
        {
          v37 = 16 * v20;
          v38 = v33;
          do
          {
            v39 = *v38;
            v39.f32[3] = v35;
            if ((v21 & 1) != 0)
            {
              v40 = vsubq_f32(v34, *v38);
              v41 = vmulq_f32(v40, v40);
              v42 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v41, 2), vaddq_f32(v41, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v41.f32, 1))).f32[0]);
              if ((float)(v34.f32[3] + v42) >= v35)
              {
                if ((float)(v35 + v42) > v34.f32[3])
                {
                  v43 = vsubq_f32(v34, v39);
                  v44 = (float)((float)(v35 + v34.f32[3]) + v42) * 0.5;
                  v34 = vmlaq_n_f32(v34, v43, (float)(v34.f32[3] - v44) / v42);
                  v34.f32[3] = v44;
                }
                v39 = v34;
              }
            }
            ++v38;
            v21 = 1;
            v34 = v39;
            v37 -= 16;
          }
          while (v37);
        }
        else
        {
          v39.i64[0] = v34.i64[0];
        }
        v47 = *(double *)v39.i64;
        if (v33 != (float32x4_t *)v52)
          free(v33);
        if (v60 != v61)
          free(v60);
        std::__hash_table<std::__hash_value_type<unsigned long long,SCNMTLLightSetData>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SCNMTLLightSetData>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SCNMTLLightSetData>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SCNMTLLightSetData>>>::~__hash_table((uint64_t)v66);
        v69((uint64_t)v68);
        return v47;
      }
    }
    else
    {
      return 0.0;
    }
  }
  return result;
}

void sub_1DCDD79D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58)
{
  if (a58 != (void *)a10)
    free(a58);
  std::__hash_table<std::__hash_value_type<unsigned long long,SCNMTLLightSetData>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SCNMTLLightSetData>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SCNMTLLightSetData>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SCNMTLLightSetData>>>::~__hash_table((uint64_t)&STACK[0x220]);
  ((void (*)(unint64_t *))STACK[0x258])(&STACK[0x248]);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c115_ZTSNSt3__113unordered_mapIP9__C3DNodeP7SCNNodeNS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorINS_4pairIKS2_S4_EEEEEE(uint64_t a1, uint64_t a2)
{
  return std::unordered_map<__C3DNode *,SCNNode *>::unordered_map(a1 + 32, a2 + 32);
}

uint64_t __destroy_helper_block_e8_32c115_ZTSNSt3__113unordered_mapIP9__C3DNodeP7SCNNodeNS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorINS_4pairIKS2_S4_EEEEEE(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<unsigned long long,SCNMTLLightSetData>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SCNMTLLightSetData>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SCNMTLLightSetData>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SCNMTLLightSetData>>>::~__hash_table(a1 + 32);
}

__n128 _ZN3C3D5ArrayIDv3_fLj10ENS_15MallocAllocatorEE9push_backIRS1_EEvOT_(uint64_t a1, __n128 *a2)
{
  unsigned int v4;
  __n128 result;

  v4 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 + 1) > *(_DWORD *)(a1 + 4))
  {
    _ZN3C3D5ArrayIDv3_fLj10ENS_15MallocAllocatorEE14GrowCapacityByEjb((unsigned int *)a1, 1, 0);
    v4 = *(_DWORD *)a1;
  }
  result = *a2;
  *(__n128 *)(*(_QWORD *)(a1 + 8) + 16 * v4) = *a2;
  ++*(_DWORD *)a1;
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<__C3DNode *,SCNNode *>,std::__unordered_map_hasher<__C3DNode *,std::__hash_value_type<__C3DNode *,SCNNode *>,std::hash<__C3DNode *>,std::equal_to<__C3DNode *>,true>,std::__unordered_map_equal<__C3DNode *,std::__hash_value_type<__C3DNode *,SCNNode *>,std::equal_to<__C3DNode *>,std::hash<__C3DNode *>,true>,std::allocator<std::__hash_value_type<__C3DNode *,SCNNode *>>>::__emplace_unique_key_args<__C3DNode *,std::piecewise_construct_t const&,std::tuple<__C3DNode *&&>,std::tuple<>>(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD **v12;
  _QWORD *i;
  unint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      for (i = *v12; i; i = (_QWORD *)*i)
      {
        v14 = i[1];
        if (v14 == v9)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v14 >= v10)
              v14 %= v10;
          }
          else
          {
            v14 &= v10 - 1;
          }
          if (v14 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v9;
  i[2] = **a4;
  i[3] = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    v17 = 1;
    if (v10 >= 3)
      v17 = (v10 & (v10 - 1)) != 0;
    v18 = v17 | (2 * v10);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<unsigned long long,SCNMTLLightSetData>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SCNMTLLightSetData>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SCNMTLLightSetData>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SCNMTLLightSetData>>>::__rehash<true>(a1, v20);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *i = *v22;
LABEL_38:
    *v22 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v23 = *(_QWORD *)(*i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10)
        v23 %= v10;
    }
    else
    {
      v23 &= v10 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1DCDD7D5C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<__C3DNode *,SCNNode *>,std::__unordered_map_hasher<__C3DNode *,std::__hash_value_type<__C3DNode *,SCNNode *>,std::hash<__C3DNode *>,std::equal_to<__C3DNode *>,true>,std::__unordered_map_equal<__C3DNode *,std::__hash_value_type<__C3DNode *,SCNNode *>,std::equal_to<__C3DNode *>,std::hash<__C3DNode *>,true>,std::allocator<std::__hash_value_type<__C3DNode *,SCNNode *>>>::find<__C3DNode *>(_QWORD *a1, _QWORD *a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v4 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = v5 & (*(_QWORD *)&v2 - 1);
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    do
    {
      v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == *a2)
          return result;
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(_QWORD *)&v2)
            v10 %= *(_QWORD *)&v2;
        }
        else
        {
          v10 &= *(_QWORD *)&v2 - 1;
        }
        if (v10 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v4 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = v5 & (*(_QWORD *)&v2 - 1);
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    do
    {
      v10 = result[1];
      if (v5 == v10)
      {
        if (result[2] == *a2)
          return result;
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(_QWORD *)&v2)
            v10 %= *(_QWORD *)&v2;
        }
        else
        {
          v10 &= *(_QWORD *)&v2 - 1;
        }
        if (v10 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t std::unordered_map<__C3DNode *,SCNNode *>::unordered_map(uint64_t a1, uint64_t a2)
{
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<unsigned long long,SCNMTLLightSetData>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SCNMTLLightSetData>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SCNMTLLightSetData>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SCNMTLLightSetData>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    std::__hash_table<std::__hash_value_type<__C3DNode *,SCNNode *>,std::__unordered_map_hasher<__C3DNode *,std::__hash_value_type<__C3DNode *,SCNNode *>,std::hash<__C3DNode *>,std::equal_to<__C3DNode *>,true>,std::__unordered_map_equal<__C3DNode *,std::__hash_value_type<__C3DNode *,SCNNode *>,std::equal_to<__C3DNode *>,std::hash<__C3DNode *>,true>,std::allocator<std::__hash_value_type<__C3DNode *,SCNNode *>>>::__emplace_unique_key_args<__C3DNode *,std::pair<__C3DNode * const,SCNNode *> const&>(a1, i + 2, (_OWORD *)i + 1);
  return a1;
}

void sub_1DCDD7FA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<unsigned long long,SCNMTLLightSetData>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SCNMTLLightSetData>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SCNMTLLightSetData>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SCNMTLLightSetData>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<__C3DNode *,SCNNode *>,std::__unordered_map_hasher<__C3DNode *,std::__hash_value_type<__C3DNode *,SCNNode *>,std::hash<__C3DNode *>,std::equal_to<__C3DNode *>,true>,std::__unordered_map_equal<__C3DNode *,std::__hash_value_type<__C3DNode *,SCNNode *>,std::equal_to<__C3DNode *>,std::hash<__C3DNode *>,true>,std::allocator<std::__hash_value_type<__C3DNode *,SCNNode *>>>::__emplace_unique_key_args<__C3DNode *,std::pair<__C3DNode * const,SCNNode *> const&>(uint64_t a1, _QWORD *a2, _OWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v8;
  *((_OWORD *)i + 1) = *a3;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    v16 = 1;
    if (v9 >= 3)
      v16 = (v9 & (v9 - 1)) != 0;
    v17 = v16 | (2 * v9);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<unsigned long long,SCNMTLLightSetData>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SCNMTLLightSetData>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SCNMTLLightSetData>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SCNMTLLightSetData>>>::__rehash<true>(a1, v19);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v21)
  {
    *i = *v21;
LABEL_38:
    *v21 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9)
        v22 %= v9;
    }
    else
    {
      v22 &= v9 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1DCDD81F8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZN3C3D5ArrayIDv3_fLj10ENS_15MallocAllocatorEE14GrowCapacityByEjb(unsigned int *a1, int a2, int a3)
{
  unsigned int *v4;
  double v5;
  unsigned int v6;
  void *v7;

  v4 = (unsigned int *)*((_QWORD *)a1 + 1);
  v5 = 1.5;
  if (a3)
    v5 = 1.0;
  v6 = (v5 * (double)(a1[1] + a2));
  v7 = malloc_type_malloc(16 * v6, 0x74F3E194uLL);
  memcpy(v7, v4, 16 * *a1);
  *((_QWORD *)a1 + 1) = v7;
  a1[1] = v6;
  if (v4 != a1 + 4)
    free(v4);
}

void _C3DFXShaderCFFinalize(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 24);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 24) = 0;
  }
}

uint64_t C3DFXShaderCreate(int a1)
{
  uint64_t result;

  if (C3DFXShaderGetTypeID_onceToken != -1)
    dispatch_once(&C3DFXShaderGetTypeID_onceToken, &__block_literal_global_51);
  result = C3DTypeCreateInstance_(C3DFXShaderGetTypeID_typeID, 0x10uLL);
  if (result)
    *(_DWORD *)(result + 16) = a1;
  return result;
}

uint64_t C3DFXShaderGetStage(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DFXShaderGetStage_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(unsigned int *)(a1 + 16);
}

CFTypeRef C3DFXShaderSetSource(uint64_t a1, CFTypeRef cf)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef result;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DFXShaderGetStage_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  result = *(CFTypeRef *)(a1 + 24);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 24) = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *(_QWORD *)(a1 + 24) = result;
  }
  return result;
}

uint64_t C3DFXShaderGetSource(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DFXShaderGetSource_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 24);
}

CFStringRef _C3DFXShaderCFCopyFormatDescription(_QWORD *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DFXShader %@>"), a1[3]);
}

CFStringRef _C3DFXShaderCFCopyDebugDescription(_QWORD *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DFXShader %@>"), a1[3]);
}

__CFArray *_C3DFXShaderCopyInstanceVariables(uint64_t a1)
{
  __CFArray *Mutable;
  __CFDictionary *v3;
  CFNumberRef v4;
  CFNumberRef v5;
  CFNumberRef v6;
  __CFDictionary *v7;
  CFNumberRef v8;
  CFNumberRef v9;
  CFNumberRef v10;
  uint64_t v12;
  int v13;
  int valuePtr;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v3 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v13 = 2;
  valuePtr = 5;
  v12 = a1 + 24;
  v4 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v5 = CFNumberCreate(0, kCFNumberSInt32Type, &v13);
  v6 = CFNumberCreate(0, kCFNumberLongType, &v12);
  CFDictionarySetValue(v3, CFSTR("name"), CFSTR("source"));
  CFDictionarySetValue(v3, CFSTR("type"), v4);
  CFDictionarySetValue(v3, CFSTR("address"), v6);
  CFDictionarySetValue(v3, CFSTR("semantic"), v5);
  CFArrayAppendValue(Mutable, v3);
  CFRelease(v5);
  CFRelease(v3);
  CFRelease(v6);
  CFRelease(v4);
  v7 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v13 = 0;
  valuePtr = 2;
  v12 = a1 + 16;
  v8 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v9 = CFNumberCreate(0, kCFNumberSInt32Type, &v13);
  v10 = CFNumberCreate(0, kCFNumberLongType, &v12);
  CFDictionarySetValue(v7, CFSTR("name"), CFSTR("stage"));
  CFDictionarySetValue(v7, CFSTR("type"), v8);
  CFDictionarySetValue(v7, CFSTR("address"), v10);
  CFDictionarySetValue(v7, CFSTR("semantic"), v9);
  CFArrayAppendValue(Mutable, v7);
  CFRelease(v9);
  CFRelease(v7);
  CFRelease(v10);
  CFRelease(v8);
  return Mutable;
}

void _C3DLightProbesSystemCFFinalize(void **a1)
{
  free(a1[3]);
  free(a1[2]);
  __cleanupTetrahedronsData(a1);
}

CFStringRef _C3DLightProbesSystemCFCopyFormatDescription(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DLightProbesSystem %p>"), a1);
}

CFStringRef _C3DLightProbesSystemCFCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DLightProbesSystem %p>"), a1);
}

void _resizeProbesData(uint64_t a1, int a2)
{
  int v4;
  unsigned int v5;
  void *v6;
  void *v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_DWORD *)(a1 + 232);
  if (v4 == 2)
  {
    v5 = 48;
    goto LABEL_5;
  }
  if (v4 == 3)
  {
    v5 = 112;
LABEL_5:
    v6 = malloc_type_calloc((a2 + 4), v5, 0x5060DACBuLL);
    v7 = malloc_type_calloc((a2 + 4), 0x10uLL, 0x1000040451B5BE8uLL);
    if (*(_QWORD *)(a1 + 24))
    {
      if (!*(_DWORD *)(a1 + 36))
      {
        v8 = scn_default_log();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
          _resizeProbesData_cold_3(v8, v9, v10);
      }
      if (!*(_QWORD *)(a1 + 16))
      {
        v11 = scn_default_log();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
          _resizeProbesData_cold_2(v11, v12, v13);
      }
      memcpy(v6, *(const void **)(a1 + 24), (*(_DWORD *)(a1 + 36) + 4) * v5);
      free(*(void **)(a1 + 24));
      memcpy(v7, *(const void **)(a1 + 16), 16 * (*(_DWORD *)(a1 + 36) + 4));
      free(*(void **)(a1 + 16));
    }
    *(_QWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = v6;
    *(_DWORD *)(a1 + 36) = a2;
    return;
  }
  v14 = scn_default_log();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    _resizeProbesData_cold_1(v14, v15, v16);
}

void _computeTetrahedronMatrices(uint64_t a1)
{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float32x4_t v17;
  float v33;
  float32x4_t v56;
  float v61;
  float32x4_t v68;
  unsigned int v70;
  float32x4_t v72;
  float32x4_t v74;
  float32x4_t v75;
  simd_float3x3 v76;
  simd_float3x3 v77;

  v7 = *(unsigned int *)(a1 + 224);
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD *)(a1 + 16) + 64;
    v9 = *(_QWORD *)(a1 + 192);
    v10 = *(_QWORD *)(a1 + 64) + 32;
    v11 = (int *)(*(_QWORD *)(a1 + 48) + 8);
    do
    {
      v12 = v11[1];
      if ((_DWORD)v12 == 0x7FFFFFFF)
      {
        v13 = *(v11 - 2);
        v14 = *(v11 - 1);
        v15 = *v11;
        _Q3 = *(float32x4_t *)(v9 + 16 * v15);
        v17 = *(float32x4_t *)(v8 + 16 * v15);
        _Q7 = vsubq_f32(*(float32x4_t *)(v8 + 16 * v13), v17);
        _Q17 = vsubq_f32(*(float32x4_t *)(v9 + 16 * v13), _Q3);
        _Q16 = vsubq_f32(*(float32x4_t *)(v8 + 16 * v14), v17);
        _Q4 = vsubq_f32(*(float32x4_t *)(v9 + 16 * v14), _Q3);
        _S19 = _Q4.i32[2];
        _S20 = _Q4.i32[1];
        _Q22.f32[0] = vmuls_lane_f32(-_Q17.f32[2], *(float32x2_t *)_Q4.f32, 1);
        _S24 = vmuls_lane_f32(_Q4.f32[0], _Q17, 2);
        _S27 = vmuls_lane_f32(_Q17.f32[0], *(float32x2_t *)_Q4.f32, 1);
        __asm
        {
          FMLS            S26, S27, V3.S[2]
          FMLS            S26, S24, V3.S[1]
          FMLS            S26, S22, V3.S[0]
          FMLA            S22, S19, V17.S[1]
        }
        v33 = -_Q17.f32[0];
        __asm { FMLS            S24, S19, V17.S[0] }
        _Q22.i32[1] = _S24;
        _Q22.i32[2] = vmlas_n_f32((float)-_Q17.f32[1] * _Q4.f32[0], _Q4.f32[1], _Q17.f32[0]);
        _S24 = vmuls_lane_f32(_Q7.f32[0], *(float32x2_t *)_Q4.f32, 1);
        __asm { FMLS            S30, S24, V3.S[2] }
        _S24 = _Q16.f32[1];
        _S31 = vmuls_lane_f32(_Q17.f32[0], *(float32x2_t *)_Q16.f32, 1);
        __asm { FMLS            S30, S31, V3.S[2] }
        _S23 = (float)-_Q17.f32[1] * _Q16.f32[0];
        __asm { FMLS            S30, S23, V3.S[2] }
        _S31 = vmuls_lane_f32(_Q4.f32[0], _Q7, 2);
        __asm { FMLS            S30, S31, V3.S[1] }
        _S31 = vmuls_lane_f32(-_Q7.f32[2], *(float32x2_t *)_Q4.f32, 1);
        __asm { FMLS            S30, S31, V3.S[0] }
        _S31 = vmuls_lane_f32(_Q16.f32[0], _Q17, 2);
        __asm { FMLS            S30, S31, V3.S[1] }
        _Q21.f32[0] = vmuls_lane_f32(-_Q17.f32[2], *(float32x2_t *)_Q16.f32, 1);
        __asm { FMLS            S30, S21, V3.S[0] }
        _Q21.f32[0] = vmuls_lane_f32(-_Q7.f32[0], _Q4, 2);
        __asm { FMLS            S30, S21, V3.S[1] }
        _Q21.f32[0] = vmuls_lane_f32(_Q4.f32[2], *(float32x2_t *)_Q7.f32, 1);
        __asm { FMLS            S30, S21, V3.S[0] }
        _S9 = _Q16.i32[2];
        _S10 = vmuls_lane_f32(-_Q17.f32[0], _Q16, 2);
        __asm { FMLS            S30, S10, V3.S[1] }
        _S11 = vmuls_lane_f32(_Q17.f32[1], _Q16, 2);
        __asm { FMLS            S30, S11, V3.S[0] }
        v56 = vmulq_f32(v17, _Q22);
        _Q22.f32[3] = _S30
                    - vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v56, 2), vaddq_f32(v56, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v56.f32, 1))).f32[0];
        __asm
        {
          FMLA            S21, S9, V17.S[1]
          FMLS            S21, S24, V17.S[2]
          FMLS            S21, S20, V7.S[2]
          FMLS            S10, S19, V7.S[0]
          FMLA            S10, S4, V7.S[2]
          FMLA            S10, S16, V17.S[2]
          FMLS            S29, S16, V17.S[1]
        }
        _Q21.i32[1] = _S10;
        _Q21.i32[2] = _S29;
        _Q17.f32[0] = vmuls_lane_f32(_Q7.f32[0], *(float32x2_t *)_Q16.f32, 1);
        v61 = (float)-_Q7.f32[1] * _Q16.f32[0];
        __asm { FMLS            S18, S17, V3.S[2] }
        _Q17.f32[0] = vmuls_lane_f32(-_Q7.f32[0], _Q16, 2);
        __asm { FMLS            S18, S17, V3.S[1] }
        _Q17.f32[0] = vmuls_lane_f32(_Q7.f32[1], _Q16, 2);
        __asm { FMLS            S18, S17, V3.S[0] }
        _S20 = vmuls_lane_f32(_Q16.f32[0], _Q7, 2);
        __asm { FMLS            S18, S20, V3.S[1] }
        _Q16.f32[0] = vmuls_lane_f32(-_Q7.f32[2], *(float32x2_t *)_Q16.f32, 1);
        __asm { FMLS            S18, S16, V3.S[0] }
        v68 = vmulq_f32(v17, _Q21);
        _Q21.f32[3] = _S18
                    - vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v68, 2), vaddq_f32(v68, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v68.f32, 1))).f32[0];
        __asm
        {
          FMLS            S17, S24, V7.S[2]
          FMLS            S20, S9, V7.S[0]
        }
        *(float *)&v70 = vmlas_n_f32(v61, _S24, _Q7.f32[0]);
        v72.i64[0] = __PAIR64__(_S20, _Q17.u32[0]);
        v72.i64[1] = v70;
        _Q5 = vmulq_f32(v17, v72);
        v72.f32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)_Q5, 2), vaddq_f32(_Q5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q5.f32, 1))).f32[0];
        _Q5.f32[0] = vmuls_lane_f32(_Q17.f32[1], _Q4, 2);
        __asm { FMLS            S26, S5, V3.S[0] }
        _Q4.f32[0] = vmuls_lane_f32(v33, _Q4, 2);
        __asm { FMLS            S26, S4, V3.S[1] }
        if (fabsf(*(float *)_D26.i32) > 0.0001)
        {
          v74 = (float32x4_t)vdupq_lane_s32(_D26, 0);
          _Q22 = vdivq_f32(_Q22, v74);
          _Q21 = vdivq_f32(_Q21, v74);
          v72 = vdivq_f32(v72, v74);
        }
        *(float32x4_t *)(v10 - 32) = _Q22;
        *(float32x4_t *)(v10 - 16) = _Q21;
        *(float32x4_t *)v10 = v72;
      }
      else
      {
        v75 = *(float32x4_t *)(v8 + 16 * v12);
        v76.columns[0] = (simd_float3)vsubq_f32(*(float32x4_t *)(v8 + 16 * *(v11 - 2)), v75);
        v76.columns[1] = (simd_float3)vsubq_f32(*(float32x4_t *)(v8 + 16 * *(v11 - 1)), v75);
        v76.columns[2] = (simd_float3)vsubq_f32(*(float32x4_t *)(v8 + 16 * *v11), v75);
        v76.columns[0].i32[3] = HIDWORD(v1);
        v76.columns[1].i32[3] = HIDWORD(v3);
        v76.columns[2].i32[3] = HIDWORD(v2);
        v77 = __invert_f3(v76);
        *(_OWORD *)(v10 - 16) = 0u;
        *(_OWORD *)v10 = 0u;
        v77.columns[0].i32[3] = 0;
        v77.columns[1].i32[3] = *(_DWORD *)(v10 - 4);
        *(simd_float3 *)(v10 - 32) = v77.columns[0];
        *(simd_float3 *)(v10 - 16) = v77.columns[1];
        v77.columns[2].i32[3] = *(_DWORD *)(v10 + 12);
        *(simd_float3 *)v10 = v77.columns[2];
      }
      v10 += 48;
      v11 += 12;
      --v7;
    }
    while (v7);
  }
}

void _computeNeighbourIndexes(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  int v10;
  uint64_t Mutable;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  int v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t FirstIndex;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BOOL4 v46;
  _BOOL4 v47;
  BOOL v48;
  uint64_t IndexGreaterThanIndex;
  uint64_t v50;
  _DWORD *v51;
  int v52;
  NSObject *v53;
  unint64_t v54;
  unint64_t j;
  const void *v56;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint8_t v61[4];
  uint64_t v62;
  uint8_t v63[4];
  _DWORD v64[7];

  *(_QWORD *)&v64[5] = *MEMORY[0x1E0C80C00];
  v60 = malloc_type_calloc(8uLL, (*(_DWORD *)(a1 + 32) + 4), 0x370A01F5uLL);
  if (a2)
  {
    v3 = 0;
    v4 = *(_QWORD *)(a1 + 48);
    v58 = a2;
    v5 = v4 + 16;
    v6 = v60;
    do
    {
      v7 = 0;
      v8 = v4 + 48 * v3;
      v9 = &dword_1DD029FE8;
      do
      {
        *(_DWORD *)(v5 + v7) = -1;
        v10 = *(_DWORD *)(v8 + 4 * *(v9 - 2));
        if (v10 >= *(_DWORD *)(v8 + 4 * *(v9 - 1)))
          v10 = *(_DWORD *)(v8 + 4 * *(v9 - 1));
        if (v10 >= *(_DWORD *)(v8 + 4 * *v9))
          v10 = *(_DWORD *)(v8 + 4 * *v9);
        Mutable = v6[v10];
        if (!Mutable)
        {
          v12 = v10;
          Mutable = C3DIndexSetCreateMutable();
          v60[v12] = Mutable;
          v6 = v60;
        }
        v9 += 3;
        C3DIndexSetAddIndex(Mutable, v3);
        v7 += 4;
      }
      while (v7 != 16);
      ++v3;
      v5 += 48;
    }
    while (v3 != a2);
    for (i = 0; i != v58; ++i)
    {
      v14 = 0;
      v59 = v4 + 48 * i;
      do
      {
        v15 = v4 + 48 * i + 4 * v14;
        v17 = *(_DWORD *)(v15 + 16);
        v16 = (_DWORD *)(v15 + 16);
        if (v17 == -1)
        {
          v18 = &g_TetrahedronFaces[3 * v14];
          v19 = *(int *)(v59 + 4 * *v18);
          v20 = *(int *)(v59 + 4 * v18[1]);
          v21 = *(int *)(v59 + 4 * v18[2]);
          if (v19 >= v20)
            v22 = v20;
          else
            v22 = v19;
          if (v19 <= v20)
            v23 = v20;
          else
            v23 = v19;
          if (v22 >= v21)
            v24 = v21;
          else
            v24 = v22;
          if (v23 <= v21)
            v25 = v21;
          else
            v25 = v23;
          if (v24 != v20 && v25 != v20)
            v21 = v20;
          if (v24 == v19 || v25 == v19)
            v28 = v21;
          else
            v28 = v19;
          v29 = v60[v24];
          if (!v29)
          {
            v30 = scn_default_log();
            if (os_log_type_enabled(v30, OS_LOG_TYPE_FAULT))
              _computeNeighbourIndexes_cold_2(v63, v64, v30);
          }
          FirstIndex = C3DIndexSetGetFirstIndex(v29);
          if (FirstIndex != -1)
          {
            v32 = FirstIndex;
            v33 = -1;
            do
            {
              if (v32 == i)
              {
                v34 = -1;
              }
              else
              {
                v35 = 0;
                v36 = v4 + 48 * v32;
                v37 = &dword_1DD029FE8;
                do
                {
                  v38 = *(int *)(v36 + 4 * *(v37 - 2));
                  v39 = *(int *)(v36 + 4 * *(v37 - 1));
                  v40 = *(int *)(v36 + 4 * *v37);
                  if (v38 >= v39)
                    v41 = *(int *)(v36 + 4 * *(v37 - 1));
                  else
                    v41 = *(int *)(v36 + 4 * *(v37 - 2));
                  if (v38 <= v39)
                    v42 = *(int *)(v36 + 4 * *(v37 - 1));
                  else
                    v42 = *(int *)(v36 + 4 * *(v37 - 2));
                  if (v41 >= v40)
                    v41 = *(int *)(v36 + 4 * *v37);
                  if (v42 <= v40)
                    v42 = *(int *)(v36 + 4 * *v37);
                  if (v41 == v39 || v42 == v39)
                    v39 = *(int *)(v36 + 4 * *v37);
                  if (v41 == v38 || v42 == v38)
                    v38 = v39;
                  v46 = v41 == v24 && v38 == v28;
                  v47 = v42 == v25;
                  if (v46 && v47)
                    v34 = v32;
                  else
                    v34 = -1;
                  if (v46 && v47)
                    v33 = v35;
                  v48 = v34 != -1 || v35++ >= 3;
                  v37 += 3;
                }
                while (!v48);
              }
              IndexGreaterThanIndex = C3DIndexSetGetIndexGreaterThanIndex(v29, v32);
              if (v34 != -1)
                break;
              v32 = IndexGreaterThanIndex;
            }
            while (IndexGreaterThanIndex != -1);
            if (v34 != -1)
            {
              v50 = v4 + 48 * v34 + 4 * v33;
              v52 = *(_DWORD *)(v50 + 16);
              v51 = (_DWORD *)(v50 + 16);
              if (v52 != -1)
              {
                v53 = scn_default_log();
                if (os_log_type_enabled(v53, OS_LOG_TYPE_FAULT))
                  _computeNeighbourIndexes_cold_1(v61, &v62, v53);
              }
              *v16 = v34;
              *v51 = i;
            }
          }
        }
        ++v14;
      }
      while (v14 != 4);
    }
  }
  v54 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v54)
  {
    for (j = 0; j < v54; ++j)
    {
      v56 = (const void *)v60[j];
      if (v56)
      {
        CFRelease(v56);
        v60[j] = 0;
        v54 = *(unsigned int *)(a1 + 32);
      }
    }
  }
  free(v60);
}

void C3DLightProbesSystemSetProbesCount(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (*(_DWORD *)(a1 + 36) < a2)
      _resizeProbesData(a1, a2);
  }
  else
  {
    free(*(void **)(a1 + 24));
    *(_QWORD *)(a1 + 24) = 0;
    free(*(void **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    __cleanupTetrahedronsData((void **)a1);
    *(_DWORD *)(a1 + 36) = 0;
  }
  *(_DWORD *)(a1 + 32) = a2;
  *(_BYTE *)(a1 + 228) = 1;
}

void __cleanupTetrahedronsData(void **a1)
{
  free(a1[6]);
  a1[6] = 0;
  free(a1[8]);
  a1[8] = 0;
  free(a1[24]);
  a1[24] = 0;
}

void C3DLightProbesSystemSetProbeData(uint64_t a1, uint64_t a2, float32x4_t *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  const __CFData *IrradianceSH;
  const __CFData *v9;
  int v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  const UInt8 *BytePtr;
  const UInt8 *v15;
  const UInt8 *v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t v19;
  float32x2_t v20;
  uint64_t v21;
  float32x2_t v22;
  __int128 v23;
  uint64_t v24;
  _OWORD *v25;
  __int128 v26;
  _OWORD *v27;
  __int128 v28;
  float32x2_t v29;
  __int128 v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  _QWORD v39[3];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v38.n128_u32[2] = 0;
  v6 = a2 + 4;
  v38.n128_u64[0] = 0;
  C3DNodeGetWorldPosition(a3, &v38);
  *(__n128 *)(*(_QWORD *)(a1 + 16) + 16 * v6) = v38;
  v7 = *(unsigned int *)(a1 + 232);
  IrradianceSH = (const __CFData *)C3DLightGetIrradianceSH(a4);
  if (IrradianceSH)
  {
    v9 = IrradianceSH;
    v10 = v7 * v7;
    if (12 * v7 * (unint64_t)v7 != CFDataGetLength(IrradianceSH))
    {
      v11 = scn_default_log();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
        C3DLightProbesSystemSetProbeData_cold_2(v11, v12, v13);
    }
    BytePtr = CFDataGetBytePtr(v9);
    v15 = &BytePtr[4 * v10];
    v39[0] = BytePtr;
    v39[1] = v15;
    v16 = &BytePtr[8 * v10];
    v39[2] = v16;
    if ((_DWORD)v7 == 3)
    {
      v18 = 0;
      v19 = *(_QWORD *)(a1 + 24);
      v20 = (float32x2_t)vdup_n_s32(0xBEA6C6BC);
      do
      {
        v21 = v39[v18];
        v22.i32[0] = *(_DWORD *)(v21 + 12);
        v22.i32[1] = *(_DWORD *)(v21 + 4);
        *(float32x2_t *)&v23 = vmul_f32(v22, v20);
        *((float *)&v23 + 2) = *(float *)(v21 + 8) * 0.32573;
        *((float *)&v23 + 3) = (float)(*(float *)(v21 + 24) * -0.078848) + (float)(*(float *)v21 * 0.28209);
        *(&v40 + v18++) = v23;
      }
      while (v18 != 3);
      v24 = 0;
      v25 = (_OWORD *)(v19 + 112 * v6);
      v26 = v41;
      *v25 = v40;
      v25[1] = v26;
      v25[2] = v42;
      do
      {
        *(&v40 + v24) = (__int128)vmulq_f32(*(float32x4_t *)(v39[v24] + 16), (float32x4_t)xmmword_1DD029FA0);
        ++v24;
      }
      while (v24 != 3);
      v27 = (_OWORD *)(v19 + 112 * v6);
      v28 = v41;
      v27[3] = v40;
      v27[4] = v28;
      v27[5] = v42;
      v29.i32[0] = *((_DWORD *)BytePtr + 8);
      v29.i32[1] = *((_DWORD *)v15 + 8);
      *(float32x2_t *)&v30 = vmul_f32(v29, (float32x2_t)vdup_n_s32(0x3E0BD8A0u));
      *((_QWORD *)&v30 + 1) = __PAIR64__(1.0, *((float *)v16 + 8) * 0.13657);
      v27[6] = v30;
    }
    else if ((_DWORD)v7 == 2)
    {
      v17 = (_OWORD *)(*(_QWORD *)(a1 + 24) + 48 * v6);
      *v17 = *(_OWORD *)BytePtr;
      v17[1] = *(_OWORD *)v15;
      v17[2] = *(_OWORD *)v16;
    }
    else
    {
      v31 = scn_default_log();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
        C3DLightProbesSystemSetProbeData_cold_1(v7, v31, v32, v33, v34, v35, v36, v37);
    }
  }
}

void C3DLightProbesBeginQueries(uint64_t a1, uint64_t a2)
{
  size_t v2;
  _QWORD *v3;
  _BYTE *v4;
  float32x4_t v5;
  float32x4_t *v6;
  uint64_t v7;
  float32x4_t *v8;
  float32x4_t v9;
  float32x4_t *v10;
  uint64_t v11;
  float32x4_t v12;
  int32x2_t v13;
  float32x4_t v14;
  uint64_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float v19;
  uint64_t v20;
  float32x4_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  float32x4_t v29;
  uint64_t v30;
  float32x4_t *v31;
  float32x4_t v32;
  float32x4_t v33;
  uint64_t v34;
  unsigned int v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float32x4_t *v39;
  uint64_t v40;
  int *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  float32x4_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v62;
  unint64_t v64;
  uint64_t v65;
  _DWORD *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  _DWORD *v71;
  int v72;
  int v73;
  uint64_t v74;
  unsigned int v75;
  int v76;
  NSObject *v78;
  uint64_t v79;
  __int32 *v80;
  unsigned int v81;
  unsigned int v82;
  uint64_t v83;
  NSObject *v84;
  __int32 v85;
  _BYTE *v86;
  float32x4_t *v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  int v95;
  BOOL v96;
  unsigned int v97;
  NSObject *v98;
  __int128 *v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  _OWORD *f32;
  NSObject *v104;
  uint64_t v105;
  uint64_t v110;
  int *v111;
  float32x4_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  float32x4_t v116;
  uint64_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  int32x4_t v122;
  float32x2_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  uint64_t v127;
  int32x4_t v128;
  float32x4_t *v129;
  float32x4_t *v130;
  float32x4_t v131;
  float32x4_t v132;
  int32x2_t v133;
  unsigned int v134;
  float32x4_t *v135;
  float32x4_t v136;
  uint64_t v137;
  float32x4_t v138;
  float32x4_t *v140;
  uint64_t v141;
  uint64_t v142;
  unsigned int v143;
  _BYTE *v144;
  unsigned int v145;
  unsigned int v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  float32x4_t *v150;
  _QWORD *v151;
  float32x4_t *v152;
  uint64_t v153;
  uint64_t v154;
  _DWORD *v155;
  _DWORD *v156;
  unsigned int v157;
  uint8_t v158;
  char v159[15];
  uint8_t v160[4];
  uint64_t v161;
  uint8_t v162[4];
  uint64_t v163;
  uint8_t v164[4];
  _QWORD v165[3];

  *(_QWORD *)((char *)&v165[1] + 4) = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 240) = a2;
  *(_QWORD *)(a1 + 248) = 0;
  if (!*(_BYTE *)(a1 + 228))
    return;
  *(_BYTE *)(a1 + 228) = 0;
  if (*(_DWORD *)(a1 + 32) <= 3u)
  {
    *(_DWORD *)(a1 + 224) = 0;
    return;
  }
  __cleanupTetrahedronsData((void **)a1);
  v2 = (100 * *(_DWORD *)(a1 + 32) + 400);
  *(_QWORD *)(a1 + 48) = malloc_type_valloc(16 * (v2 + 2 * v2), 0x1000040EED21634uLL);
  *(_QWORD *)(a1 + 64) = malloc_type_valloc(16 * (v2 + 2 * v2), 0x1000040EED21634uLL);
  v3 = malloc_type_calloc(8uLL, v2, 0x3658D88AuLL);
  v156 = malloc_type_calloc(0xCuLL, v2, 0x2A900A42uLL);
  v149 = malloc_type_calloc(8uLL, v2, 0xE2410710uLL);
  v143 = v2;
  v4 = malloc_type_calloc(v2, 1uLL, 0x100004077774924uLL);
  v6 = *(float32x4_t **)(a1 + 48);
  v7 = *(unsigned int *)(a1 + 32);
  v147 = *(_QWORD *)(a1 + 16);
  if ((_DWORD)v7)
  {
    v8 = (float32x4_t *)(*(_QWORD *)(a1 + 16) + 64);
    v9 = 0uLL;
    v10 = v8;
    v11 = *(unsigned int *)(a1 + 32);
    do
    {
      v12 = *v10++;
      v13.i32[1] = v12.i32[1];
      v9 = vaddq_f32(v9, v12);
      --v11;
    }
    while (v11);
    *(float *)v13.i32 = (float)v7;
    v5 = (float32x4_t)vdupq_lane_s32(v13, 0);
    v14 = vdivq_f32(v9, v5);
    v5.i32[0] = 0;
    v15 = *(unsigned int *)(a1 + 32);
    do
    {
      v16 = *v8++;
      v17 = vsubq_f32(v14, v16);
      v18 = vmulq_f32(v17, v17);
      v19 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 2), vaddq_f32(v18, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 1))).f32[0];
      if (v5.f32[0] <= v19)
        v5.f32[0] = v19;
      --v15;
    }
    while (v15);
  }
  else
  {
    v14 = (float32x4_t)vdupq_n_s32(0x7FC00000u);
    v5.i32[0] = 0;
  }
  v20 = 0;
  v5.f32[0] = (float)(sqrtf(v5.f32[0]) * 9.0) / 2.4495;
  v21 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.f32, 0);
  do
  {
    *(float32x4_t *)(v147 + v20 * 16) = vmlaq_f32(v14, v21, (float32x4_t)g_TetrahedronVertices[v20]);
    ++v20;
  }
  while (v20 != 4);
  *v6 = (float32x4_t)xmmword_1DD029FB0;
  v144 = v4;
  *v4 = 1;
  if (!computeTetrahedronCircumsphereMatrix(v6, v147))
  {
    v22 = scn_default_log();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      C3DLightProbesBeginQueries_cold_5(v22, v23, v24);
  }
  if (!(_DWORD)v7)
  {
    v25 = 1;
    v27 = v147;
LABEL_147:
    v105 = 0;
    __asm { FMOV            V0.4S, #0.25 }
    do
    {
      v110 = 0;
      v111 = (int *)&v6[3 * v105];
      v112 = vmulq_f32(vaddq_f32(vaddq_f32(vaddq_f32(*(float32x4_t *)(v27 + 16 * *v111), *(float32x4_t *)(v27 + 16 * v111[1])), *(float32x4_t *)(v27 + 16 * v111[2])), *(float32x4_t *)(v27 + 16 * v111[3])), _Q0);
      do
      {
        v113 = g_TetrahedronFaces[v110];
        v114 = g_TetrahedronFaces[v110 + 1];
        v115 = v111[v113];
        v116 = *(float32x4_t *)(v27 + 16 * v115);
        v117 = v111[v114];
        v118 = vsubq_f32(*(float32x4_t *)(v27 + 16 * v117), v116);
        v119 = vsubq_f32(*(float32x4_t *)(v27 + 16 * v111[g_TetrahedronFaces[v110 + 2]]), v116);
        v120 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v119, (int32x4_t)v119), (int8x16_t)v119, 0xCuLL), vnegq_f32(v118)), v119, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v118, (int32x4_t)v118), (int8x16_t)v118, 0xCuLL));
        v121 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v120, (int32x4_t)v120), (int8x16_t)v120, 0xCuLL);
        v122 = (int32x4_t)vmulq_f32(v120, v120);
        v122.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v122.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v122, 2), *(float32x2_t *)v122.i8)).u32[0];
        v123 = vrsqrte_f32((float32x2_t)v122.u32[0]);
        v124 = vmulq_n_f32(v121, vmul_f32(v123, vrsqrts_f32((float32x2_t)v122.u32[0], vmul_f32(v123, v123))).f32[0]);
        v125 = vmulq_f32(v116, v124);
        v126 = vmulq_f32(v112, v124);
        if ((float)(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v126, 2), vaddq_f32(v126, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v126.f32, 1))).f32[0]- vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v125, 2), vaddq_f32(v125, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v125.f32, 1))).f32[0]) > 0.0)
        {
          v111[v113] = v117;
          v111[v114] = v115;
        }
        v110 += 3;
      }
      while (v110 != 12);
      ++v105;
    }
    while (v105 != v25);
    v127 = 0;
    v88 = 0;
    v128.i64[0] = 0x300000003;
    v128.i64[1] = 0x300000003;
    v129 = v6;
    do
    {
      if (v129->i32[0] >= 4 && v129->i32[1] >= 4 && v129->i32[2] >= 4 && v129->i32[3] >= 4)
      {
        if (v127 != v88)
        {
          v130 = &v6[3 * v88];
          v131 = *v129;
          v132 = v129[2];
          v130[1] = v129[1];
          v130[2] = v132;
          *v130 = v131;
        }
        v6[3 * v88] = (float32x4_t)vaddq_s32((int32x4_t)v6[3 * v88], v128);
        ++v88;
      }
      ++v127;
      v129 += 3;
    }
    while (v25 != v127);
    goto LABEL_162;
  }
  v142 = 0;
  v140 = v6 + 2;
  v25 = 1;
  v26 = v144;
  v27 = v147;
  v150 = v6;
  v151 = v3;
  v141 = v7;
  do
  {
    while (!v25)
    {
      v88 = 0;
      if (++v142 == v7)
        goto LABEL_162;
    }
    v28 = 0;
    v145 = 0;
    v146 = v25;
    v29 = *(float32x4_t *)(v27 + 16 * (v142 + 4));
    v30 = v25;
    v31 = v140;
    do
    {
      v32 = vsubq_f32(v29, *v31);
      v33 = vmulq_f32(v32, v32);
      if (COERCE_FLOAT(HIDWORD(*(unsigned __int128 *)v31)) + 0.00001 >= vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v33, 2), vaddq_f32(v33, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v33.f32, 1))).f32[0])
      {
        v3[v145] = v28;
        v26[v28] = 0;
        ++v145;
      }
      ++v28;
      v31 += 3;
    }
    while (v30 != v28);
    if (v145)
    {
      v34 = 0;
      v35 = 0;
      v36 = v145;
      do
      {
        v37 = 0;
        v148 = v34;
        v38 = v3[v34];
        v39 = &v6[3 * v38];
        v152 = v39;
        v153 = v38;
        do
        {
          v40 = 0;
          v41 = &g_TetrahedronFaces[3 * v37];
          v42 = v41[1];
          v43 = v39->i32[*v41];
          v44 = v39->i32[v42];
          v45 = v41[2];
          v46 = v39->i32[v45];
          if (v43 >= v44)
            v47 = v39->i32[v42];
          else
            v47 = v43;
          if (v43 <= v44)
            v48 = v39->i32[v42];
          else
            v48 = v43;
          if (v47 >= v46)
            v47 = v39->i32[v45];
          if (v48 <= v46)
            v48 = v39->i32[v45];
          if (v47 == v44 || v48 == v44)
            v44 = v39->i32[v45];
          if (v47 != v43 && v48 != v43)
            v44 = v43;
          v51 = 1;
          while (1)
          {
            v52 = v3[v40];
            if (v52 != v38)
              break;
LABEL_79:
            v51 = ++v40 < v36;
            if (v40 == v36)
              goto LABEL_82;
          }
          v53 = 0;
          v54 = &v6[3 * v52];
          while (1)
          {
            v55 = v54->i32[g_TetrahedronFaces[v53]];
            v56 = v54->i32[g_TetrahedronFaces[v53 + 1]];
            v57 = v54->i32[g_TetrahedronFaces[v53 + 2]];
            if (v55 >= v56)
              v58 = v54->i32[g_TetrahedronFaces[v53 + 1]];
            else
              v58 = v54->i32[g_TetrahedronFaces[v53]];
            if (v55 <= v56)
              v59 = v54->i32[g_TetrahedronFaces[v53 + 1]];
            else
              v59 = v54->i32[g_TetrahedronFaces[v53]];
            if (v58 >= v57)
              v58 = v54->i32[g_TetrahedronFaces[v53 + 2]];
            if (v59 <= v57)
              v59 = v54->i32[g_TetrahedronFaces[v53 + 2]];
            if (v58 != v56 && v59 != v56)
              v57 = v54->i32[g_TetrahedronFaces[v53 + 1]];
            if (v58 != v55 && v59 != v55)
              v57 = v54->i32[g_TetrahedronFaces[v53]];
            v62 = v58 == v47 && v57 == v44;
            if (v62 && v59 == v48)
              break;
            v53 += 3;
            if (v53 == 12)
              goto LABEL_79;
          }
          if (!v51)
          {
LABEL_82:
            v154 = v37;
            v64 = 0;
            v65 = v35;
            v66 = &v156[3 * v35];
            *v66 = v43;
            v66[1] = v39->i32[v42];
            v155 = v66;
            v66[2] = v39->i32[v45];
            v157 = v35;
            do
            {
              v67 = v64;
              if (v64 == 3)
                break;
              ++v64;
              v68 = v67 == 2 ? 0 : v67 + 1;
              if (v35)
              {
                v69 = 0;
                v70 = 0;
                v71 = v156;
                v72 = v155[v67];
                v73 = v155[v68];
                do
                {
                  v74 = 0;
                  v75 = 0;
                  do
                  {
                    v76 = v71[v74];
                    if (v76 == v72 || v76 == v73)
                      ++v75;
                    ++v74;
                  }
                  while (v74 != 3);
                  if (v75 >= 3)
                  {
                    v78 = scn_default_log();
                    if (os_log_type_enabled(v78, OS_LOG_TYPE_FAULT))
                      C3DLightProbesBeginQueries_cold_4(v164, v165, v78);
                  }
                  if (v75 == 2)
                    ++v70;
                  ++v69;
                  v71 += 3;
                }
                while (v69 != v65);
              }
              else
              {
                v70 = 0;
              }
              v35 = v157;
            }
            while (v70 < 2);
            if (v67 > 2)
              ++v35;
            v6 = v150;
            v3 = v151;
            v36 = v145;
            v39 = v152;
            v38 = v153;
            v37 = v154;
          }
          ++v37;
        }
        while (v37 != 4);
        v149[v148] = v38;
        v34 = v148 + 1;
      }
      while (v148 + 1 != v36);
      if (v35)
      {
        v79 = v35;
        v80 = v156 + 2;
        v26 = v144;
        v81 = v145;
        do
        {
          if (v81)
          {
            v82 = v81 - 1;
            v83 = v149[v81 - 1];
          }
          else
          {
            v83 = v146;
            if (v146 >= v143)
            {
              v84 = scn_default_log();
              if (os_log_type_enabled(v84, OS_LOG_TYPE_ERROR))
                C3DLightProbesBeginQueries_cold_3(&v158, v159, v84);
              v82 = 0;
              ++v146;
              v26 = v144;
            }
            else
            {
              v82 = 0;
              ++v146;
            }
          }
          v26[v83] = 1;
          v85 = *v80;
          v86 = v26;
          v87 = &v6[3 * v83];
          v87->i64[0] = *((_QWORD *)v80 - 1);
          v87->i32[2] = v85;
          v87->i32[3] = v142 + 4;
          if (computeTetrahedronCircumsphereMatrix(v87, v147))
          {
            v26 = v86;
            v81 = v82;
          }
          else
          {
            v86[v83] = 0;
            v149[v82] = v83;
            v81 = v82 + 1;
            v26 = v86;
          }
          v80 += 3;
          --v79;
          v27 = v147;
        }
        while (v79);
      }
      else
      {
        v26 = v144;
        v27 = v147;
        v81 = v145;
      }
      if (v81)
      {
        v89 = 0;
        v90 = v81;
        v91 = v146 - 1;
        do
        {
          v92 = v149[v89];
          v93 = v91;
          do
          {
            v94 = (int)v93;
            v95 = v26[v93--];
            if (v95)
              v96 = 0;
            else
              v96 = v92 < v94;
          }
          while (v96);
          v97 = --v146;
          if (v92 >= v94)
          {
            if (v97 > v92)
            {
              v104 = scn_default_log();
              if (os_log_type_enabled(v104, OS_LOG_TYPE_FAULT))
                C3DLightProbesBeginQueries_cold_2(v160, &v161, v104);
            }
          }
          else
          {
            if (!v95)
            {
              v98 = scn_default_log();
              if (os_log_type_enabled(v98, OS_LOG_TYPE_FAULT))
                C3DLightProbesBeginQueries_cold_1(v162, &v163, v98);
            }
            v99 = (__int128 *)&v6[3 * (int)v94];
            v100 = *v99;
            v101 = v99[1];
            v102 = v99[2];
            f32 = (_OWORD *)v6[3 * v92].f32;
            f32[1] = v101;
            f32[2] = v102;
            *f32 = v100;
            v144[v92] = 1;
            v144[v94] = 0;
          }
          ++v89;
          --v91;
          v26 = v144;
          v27 = v147;
        }
        while (v89 != v90);
      }
    }
    v7 = v141;
    ++v142;
    v25 = v146;
  }
  while (v142 != v141);
  if (v146)
    goto LABEL_147;
  v88 = 0;
LABEL_162:
  *(_DWORD *)(a1 + 224) = v88;
  _computeNeighbourIndexes(a1, v88);
  _computeTetrahedronMatrices(a1);
  v134 = *(_DWORD *)(a1 + 224);
  if (v134)
  {
    v135 = (float32x4_t *)(*(_QWORD *)(a1 + 48) + 32);
    v136 = 0uLL;
    v137 = *(unsigned int *)(a1 + 224);
    do
    {
      v138 = *v135;
      v135 += 3;
      v133.i32[1] = v138.i32[1];
      v136 = vaddq_f32(v136, v138);
      --v137;
    }
    while (v137);
  }
  else
  {
    v136 = 0uLL;
  }
  *(float *)v133.i32 = (float)v134;
  *(float32x4_t *)(a1 + 208) = vdivq_f32(v136, (float32x4_t)vdupq_lane_s32(v133, 0));
  free(v3);
  free(v156);
  free(v149);
  free(v144);
}

uint64_t C3DLightProbesEndQueries(uint64_t result)
{
  *(_QWORD *)(result + 240) = 0;
  return result;
}

void __cubicPolynomialRoot(float a1, float a2, float a3)
{
  float v3;
  float v4;
  float v5;
  float v6;
  double v7;
  float v8;
  float v9;
  float v10;

  v3 = (float)((float)((float)(a3 * -27.0) + (float)((float)(a1 * 9.0) * a2))
             + (float)((float)((float)(a1 * -2.0) * a1) * a1))
     / 54.0;
  v4 = (float)((float)((float)(a2 * 3.0) - (float)(a1 * a1)) / 9.0)
     * (float)((float)((float)((float)(a2 * 3.0) - (float)(a1 * a1)) / 9.0)
             * (float)((float)((float)(a2 * 3.0) - (float)(a1 * a1)) / 9.0));
  v5 = v4 + (float)(v3 * v3);
  if (v5 >= 0.0)
  {
    v10 = sqrtf(v5);
    cbrtf(v3 + v10);
    cbrtf(v3 - v10);
  }
  else
  {
    v6 = acosf(v3 / sqrtf(-v4));
    cosf(v6 / 3.0);
    v7 = v6;
    v8 = (v7 + 6.28318531) / 3.0;
    cosf(v8);
    v9 = (v7 + 12.5663706) / 3.0;
    cosf(v9);
  }
}

__n64 __triangleBarycentricCoords(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4)
{
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float v10;
  float32x4_t v11;
  float32x4_t v12;
  float v13;
  __n64 result;

  v4 = vsubq_f32(a2, a1);
  v5 = vsubq_f32(a3, a1);
  v6 = vsubq_f32(a4, a1);
  v7 = vmulq_f32(v4, v4);
  v7.i32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), vaddq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1))).u32[0];
  v8 = vmulq_f32(v4, v5);
  v9 = vmulq_f32(v5, v5);
  v8.f32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v8, 2), vaddq_f32(v8, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.f32, 1))).f32[0];
  LODWORD(v10) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2), vaddq_f32(v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1))).u32[0];
  v11 = vmulq_f32(v4, v6);
  v11.f32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 2), vaddq_f32(v11, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 1))).f32[0];
  v12 = vmulq_f32(v5, v6);
  v12.f32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2), vaddq_f32(v12, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 1))).f32[0];
  v5.f32[0] = -v8.f32[0];
  v8.f32[0] = vmlas_n_f32((float)-v8.f32[0] * v8.f32[0], v10, v7.f32[0]);
  v13 = vmlas_n_f32(v5.f32[0] * v12.f32[0], v11.f32[0], v10) / v8.f32[0];
  result.n64_f32[0] = (float)(1.0 - v13)
                    - (float)(vmlas_n_f32(v5.f32[0] * v11.f32[0], v12.f32[0], v7.f32[0]) / v8.f32[0]);
  result.n64_f32[1] = v13;
  return result;
}

BOOL __lookupTetrahedron(uint64_t a1, unsigned int *a2, float32x4_t *a3, int32x4_t a4, float a5)
{
  unsigned int v5;
  float32x4_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float32x4_t v16;
  uint64_t v17;
  float32x4_t v18;
  float32x4_t v19;
  int8x16_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float v24;
  float32x4_t v25;
  float32x4_t v26;
  float v27;
  uint64_t v28;
  unsigned int v29;
  NSObject *v31;
  _BOOL4 v32;
  uint64_t v33;
  uint64_t v34;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  uint64_t v42;
  float32x4_t v44;
  float32x4_t v45;

  v5 = *(_DWORD *)(a1 + 224);
  if (!v5)
    return 0;
  v7 = (float32x4_t)a4;
  v8 = *(_QWORD *)(a1 + 16) + 64;
  v9 = *(_QWORD *)(a1 + 48);
  v42 = *(_QWORD *)(a1 + 64);
  v10 = *(_QWORD *)(a1 + 192);
  v37 = (float32x4_t)vdupq_laneq_s32(a4, 2);
  v38 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a4.i8, 1);
  if (*a2 >= v5)
    v11 = 0;
  else
    v11 = *a2;
  v44 = (float32x4_t)vdupq_n_s32(0xB8D1B717);
  while (1)
  {
    v12 = (int *)(v9 + 48 * v11);
    v13 = v12[3];
    if ((_DWORD)v13 == 0x7FFFFFFF)
    {
      v15 = *v12;
      v14 = v12[1];
      v16 = *(float32x4_t *)(v8 + 16 * v15);
      v17 = v12[2];
      v18 = vsubq_f32(*(float32x4_t *)(v8 + 16 * v14), v16);
      v19 = vsubq_f32(*(float32x4_t *)(v8 + 16 * v17), v16);
      v20 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v19, (int32x4_t)v19), (int8x16_t)v19, 0xCuLL), vnegq_f32(v18)), v19, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v18, (int32x4_t)v18), (int8x16_t)v18, 0xCuLL));
      v21 = vmulq_f32(vsubq_f32(v7, v16), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v20, (int32x4_t)v20), v20, 0xCuLL));
      v22 = (float32x4_t)xmmword_1DD008490;
      if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 2), vaddq_f32(v21, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 1))).f32[0] >= 0.0)
      {
        v23 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(*(float32x4_t *)(v42 + 48 * v11), v7.f32[0]), v38, *(float32x4_t *)(v42 + 48 * v11 + 16)), v37, *(float32x4_t *)(v42 + 48 * v11 + 32));
        v39 = *(float32x4_t *)(v8 + 16 * v15);
        v40 = *(float32x4_t *)(v8 + 16 * v14);
        v41 = *(float32x4_t *)(v8 + 16 * v17);
        __cubicPolynomialRoot(v23.f32[0], v23.f32[1], v23.f32[2]);
        *(__n64 *)v25.f32 = __triangleBarycentricCoords(vmlaq_n_f32(v39, *(float32x4_t *)(v10 + 16 * v15), v24), vmlaq_n_f32(v40, *(float32x4_t *)(v10 + 16 * v14), v24), vmlaq_n_f32(v41, *(float32x4_t *)(v10 + 16 * v17), v24), (float32x4_t)a4);
        v7 = (float32x4_t)a4;
        v22 = v25;
        v22.i32[3] = 0;
      }
    }
    else
    {
      *(double *)v26.i64 = _barycentricCoords(*(float32x4_t *)(v42 + 48 * v11), *(float32x4_t *)(v42 + 48 * v11 + 16), *(float32x4_t *)(v42 + 48 * v11 + 32), *(float32x4_t *)(v8 + 16 * v13), v7);
      v7 = (float32x4_t)a4;
      v22 = v26;
    }
    if ((vminvq_u32((uint32x4_t)vcgtq_f32(v22, v44)) & 0x80000000) != 0)
    {
      *a3 = v22;
      *a2 = v11;
      return *(float *)(v9 + 48 * v11 + 44) >= a5;
    }
    v27 = v22.f32[1];
    v28 = v22.f32[1] < v22.f32[0];
    if (v22.f32[1] >= v22.f32[0])
      v27 = v22.f32[0];
    if (v22.f32[2] < v27)
    {
      v27 = v22.f32[2];
      v28 = 2;
    }
    if (v22.f32[3] < v27)
      v28 = 3;
    v29 = *(_DWORD *)(v9 + 48 * v11 + 4 * g_VertexFrontFaceIndex[v28] + 16);
    if (v29 == -1)
      break;
    v11 = v29;
    if (!--v5)
      return 0;
  }
  if (v11 == -1)
  {
    v45 = v22;
    v31 = scn_default_log();
    v32 = os_log_type_enabled(v31, OS_LOG_TYPE_FAULT);
    v22 = v45;
    if (v32)
    {
      __lookupTetrahedron_cold_1(v31, v33, v34);
      v22 = v45;
    }
  }
  *a3 = v22;
  *a2 = v11;
  return 1;
}

double _barycentricCoords(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5)
{
  float32x4_t v5;
  double result;

  v5 = vsubq_f32(a5, a4);
  *(_QWORD *)&result = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a1, v5.f32[0]), a2, *(float32x2_t *)v5.f32, 1), a3, v5, 2).u64[0];
  return result;
}

void __debugDrawQuery(_QWORD *a1, unsigned int a2, float32x4_t a3, float a4)
{
  uint64_t v5;
  int *v6;
  __int128 v8;

  v5 = a1[2] + 64;
  v6 = (int *)(a1[6] + 48 * a2);
  v8 = xmmword_1DD029FC0;
  *((float *)&v8 + 2) = 0.25098 * a4;
  C3DAuthoringEnvironmentAppendDebugSegment(a1[31], 0, (float *)&v8, 0, *(float32x4_t *)(v5 + 16 * *v6), a3);
  C3DAuthoringEnvironmentAppendDebugSegment(a1[31], 0, (float *)&v8, 0, *(float32x4_t *)(v5 + 16 * v6[1]), a3);
  C3DAuthoringEnvironmentAppendDebugSegment(a1[31], 0, (float *)&v8, 0, *(float32x4_t *)(v5 + 16 * v6[2]), a3);
  C3DAuthoringEnvironmentAppendDebugSegment(a1[31], 0, (float *)&v8, 0, *(float32x4_t *)(v5 + 16 * v6[3]), a3);
}

float32x4_t C3DLightProbesQuerySH2(uint64_t a1, unsigned int *a2, float32x4_t *a3, int32x4_t a4)
{
  NSObject *v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  int *v12;
  uint64_t v13;
  float32x4_t *v14;
  float32x4_t result;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t *v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t *v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t *v27;
  uint64_t v28;
  float32x4_t v29;
  int32x4_t v30;
  __n128 v31;

  if (!a2)
  {
    v30 = a4;
    v7 = scn_default_log();
    v8 = os_log_type_enabled(v7, OS_LOG_TYPE_FAULT);
    a4 = v30;
    if (v8)
    {
      C3DLightProbesQuerySH2_cold_1(v7, v9, v10);
      a4 = v30;
    }
  }
  v31 = 0uLL;
  v11 = __lookupTetrahedron(a1, a2, (float32x4_t *)&v31, a4, 0.0);
  v12 = (int *)(*(_QWORD *)(a1 + 48) + 48 * *a2);
  v13 = *(_QWORD *)(a1 + 24) + 192;
  if (v11)
  {
    v14 = (float32x4_t *)(v13 + 48 * *v12);
    result = (float32x4_t)v31;
    v16 = vmulq_n_f32(*v14, v31.n128_f32[0]);
    *a3 = v16;
    v17 = vmulq_n_f32(v14[1], result.f32[0]);
    a3[1] = v17;
    v18 = vmulq_n_f32(v14[2], result.f32[0]);
    a3[2] = v18;
    v19 = (float32x4_t *)(v13 + 48 * v12[1]);
    v20 = vmlaq_lane_f32(v16, *v19, *(float32x2_t *)result.f32, 1);
    *a3 = v20;
    v21 = vmlaq_lane_f32(v17, v19[1], *(float32x2_t *)result.f32, 1);
    a3[1] = v21;
    v22 = vmlaq_lane_f32(v18, v19[2], *(float32x2_t *)result.f32, 1);
    a3[2] = v22;
    v23 = (float32x4_t *)(v13 + 48 * v12[2]);
    v24 = vmlaq_laneq_f32(v20, *v23, result, 2);
    *a3 = v24;
    v25 = vmlaq_laneq_f32(v21, v23[1], result, 2);
    a3[1] = v25;
    v26 = vmlaq_laneq_f32(v22, v23[2], result, 2);
    a3[2] = v26;
    v27 = (float32x4_t *)(v13 + 48 * v12[3]);
    *a3 = vmlaq_laneq_f32(v24, *v27, result, 3);
    a3[1] = vmlaq_laneq_f32(v25, v27[1], result, 3);
    a3[2] = vmlaq_laneq_f32(v26, v27[2], result, 3);
  }
  else
  {
    v28 = v13 + 48 * *v12;
    result = *(float32x4_t *)v28;
    v29 = *(float32x4_t *)(v28 + 32);
    a3[1] = *(float32x4_t *)(v28 + 16);
    a3[2] = v29;
    *a3 = result;
  }
  return result;
}

float32x4_t C3DLightProbesQueryBoxSH3(_QWORD *a1, unsigned int *a2, float32x4_t *a3, int32x4_t a4, float32x4_t a5)
{
  NSObject *v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  int *v15;
  uint64_t v16;
  float32x4_t *v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t *v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t *v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t result;
  int v41;
  float32x4_t *v42;
  float32x4_t *v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  int32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;

  v49 = a4;
  if (!a2)
  {
    v48 = a5;
    v8 = scn_default_log();
    v9 = os_log_type_enabled(v8, OS_LOG_TYPE_FAULT);
    a5 = v48;
    a4 = v49;
    if (v9)
    {
      C3DLightProbesQuerySH2_cold_1(v8, v10, v11);
      a5 = v48;
      a4 = v49;
    }
  }
  v12 = vmulq_f32(a5, a5);
  v51 = 0uLL;
  if (__lookupTetrahedron((uint64_t)a1, a2, &v51, a4, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2), vaddq_f32(v12, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 1))).f32[0]))
  {
    v13 = v51;
    if (a1[31])
    {
      v14 = (float32x4_t)v49;
      v50 = v51;
      __debugDrawQuery(a1, *a2, v14, v51.f32[0]);
      v13 = v50;
    }
    v15 = (int *)(a1[6] + 48 * *a2);
    v16 = a1[3] + 448;
    v17 = (float32x4_t *)(v16 + 112 * *v15);
    v18 = vmulq_n_f32(*v17, v13.f32[0]);
    *a3 = v18;
    v19 = vmulq_n_f32(v17[1], v13.f32[0]);
    a3[1] = v19;
    v20 = vmulq_n_f32(v17[2], v13.f32[0]);
    a3[2] = v20;
    v21 = vmulq_n_f32(v17[3], v13.f32[0]);
    a3[3] = v21;
    v22 = vmulq_n_f32(v17[4], v13.f32[0]);
    a3[4] = v22;
    v23 = vmulq_n_f32(v17[5], v13.f32[0]);
    a3[5] = v23;
    v24 = vmulq_n_f32(v17[6], v13.f32[0]);
    a3[6] = v24;
    v25 = (float32x4_t *)(v16 + 112 * v15[1]);
    v26 = vmlaq_lane_f32(v18, *v25, *(float32x2_t *)v13.f32, 1);
    *a3 = v26;
    v27 = vmlaq_lane_f32(v19, v25[1], *(float32x2_t *)v13.f32, 1);
    a3[1] = v27;
    v28 = vmlaq_lane_f32(v20, v25[2], *(float32x2_t *)v13.f32, 1);
    a3[2] = v28;
    v29 = vmlaq_lane_f32(v21, v25[3], *(float32x2_t *)v13.f32, 1);
    a3[3] = v29;
    v30 = vmlaq_lane_f32(v22, v25[4], *(float32x2_t *)v13.f32, 1);
    a3[4] = v30;
    v31 = vmlaq_lane_f32(v23, v25[5], *(float32x2_t *)v13.f32, 1);
    a3[5] = v31;
    v32 = vmlaq_lane_f32(v24, v25[6], *(float32x2_t *)v13.f32, 1);
    a3[6] = v32;
    v33 = (float32x4_t *)(v16 + 112 * v15[2]);
    v34 = vmlaq_laneq_f32(v26, *v33, v13, 2);
    *a3 = v34;
    v35 = vmlaq_laneq_f32(v27, v33[1], v13, 2);
    a3[1] = v35;
    v36 = vmlaq_laneq_f32(v28, v33[2], v13, 2);
    a3[2] = v36;
    v37 = vmlaq_laneq_f32(v29, v33[3], v13, 2);
    a3[3] = v37;
    v38 = vmlaq_laneq_f32(v30, v33[4], v13, 2);
    a3[4] = v38;
    v39 = vmlaq_laneq_f32(v31, v33[5], v13, 2);
    a3[5] = v39;
    result = vmlaq_laneq_f32(v32, v33[6], v13, 2);
    a3[6] = result;
    v41 = v15[3];
    if (v41 <= 2147483645)
    {
      v42 = (float32x4_t *)(v16 + 112 * v41);
      *a3 = vmlaq_laneq_f32(v34, *v42, v13, 3);
      a3[1] = vmlaq_laneq_f32(v35, v42[1], v13, 3);
      a3[2] = vmlaq_laneq_f32(v36, v42[2], v13, 3);
      a3[3] = vmlaq_laneq_f32(v37, v42[3], v13, 3);
      a3[4] = vmlaq_laneq_f32(v38, v42[4], v13, 3);
      a3[5] = vmlaq_laneq_f32(v39, v42[5], v13, 3);
      result = vmlaq_laneq_f32(result, v42[6], v13, 3);
      a3[6] = result;
    }
  }
  else
  {
    v43 = (float32x4_t *)a1[3];
    v44 = v43[28];
    v45 = v43[30];
    a3[1] = v43[29];
    a3[2] = v45;
    *a3 = v44;
    result = v43[31];
    v46 = v43[32];
    v47 = v43[34];
    a3[5] = v43[33];
    a3[6] = v47;
    a3[3] = result;
    a3[4] = v46;
  }
  return result;
}

float32x4_t C3DLightProbesQuerySH3(_QWORD *a1, unsigned int *a2, float32x4_t *a3, int32x4_t a4)
{
  NSObject *v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  float32x4_t v11;
  float32x4_t v12;
  int *v13;
  uint64_t v14;
  float32x4_t *v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t *v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t *v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t result;
  int v39;
  float32x4_t *v40;
  float32x4_t *v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  int32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;

  v46 = a4;
  if (!a2)
  {
    v7 = scn_default_log();
    v8 = os_log_type_enabled(v7, OS_LOG_TYPE_FAULT);
    a4 = v46;
    if (v8)
    {
      C3DLightProbesQuerySH2_cold_1(v7, v9, v10);
      a4 = v46;
    }
  }
  v48 = 0uLL;
  if (__lookupTetrahedron((uint64_t)a1, a2, &v48, a4, 0.0))
  {
    v11 = v48;
    if (a1[31])
    {
      v12 = (float32x4_t)v46;
      v47 = v48;
      __debugDrawQuery(a1, *a2, v12, v48.f32[0]);
      v11 = v47;
    }
    v13 = (int *)(a1[6] + 48 * *a2);
    v14 = a1[3] + 448;
    v15 = (float32x4_t *)(v14 + 112 * *v13);
    v16 = vmulq_n_f32(*v15, v11.f32[0]);
    *a3 = v16;
    v17 = vmulq_n_f32(v15[1], v11.f32[0]);
    a3[1] = v17;
    v18 = vmulq_n_f32(v15[2], v11.f32[0]);
    a3[2] = v18;
    v19 = vmulq_n_f32(v15[3], v11.f32[0]);
    a3[3] = v19;
    v20 = vmulq_n_f32(v15[4], v11.f32[0]);
    a3[4] = v20;
    v21 = vmulq_n_f32(v15[5], v11.f32[0]);
    a3[5] = v21;
    v22 = vmulq_n_f32(v15[6], v11.f32[0]);
    a3[6] = v22;
    v23 = (float32x4_t *)(v14 + 112 * v13[1]);
    v24 = vmlaq_lane_f32(v16, *v23, *(float32x2_t *)v11.f32, 1);
    *a3 = v24;
    v25 = vmlaq_lane_f32(v17, v23[1], *(float32x2_t *)v11.f32, 1);
    a3[1] = v25;
    v26 = vmlaq_lane_f32(v18, v23[2], *(float32x2_t *)v11.f32, 1);
    a3[2] = v26;
    v27 = vmlaq_lane_f32(v19, v23[3], *(float32x2_t *)v11.f32, 1);
    a3[3] = v27;
    v28 = vmlaq_lane_f32(v20, v23[4], *(float32x2_t *)v11.f32, 1);
    a3[4] = v28;
    v29 = vmlaq_lane_f32(v21, v23[5], *(float32x2_t *)v11.f32, 1);
    a3[5] = v29;
    v30 = vmlaq_lane_f32(v22, v23[6], *(float32x2_t *)v11.f32, 1);
    a3[6] = v30;
    v31 = (float32x4_t *)(v14 + 112 * v13[2]);
    v32 = vmlaq_laneq_f32(v24, *v31, v11, 2);
    *a3 = v32;
    v33 = vmlaq_laneq_f32(v25, v31[1], v11, 2);
    a3[1] = v33;
    v34 = vmlaq_laneq_f32(v26, v31[2], v11, 2);
    a3[2] = v34;
    v35 = vmlaq_laneq_f32(v27, v31[3], v11, 2);
    a3[3] = v35;
    v36 = vmlaq_laneq_f32(v28, v31[4], v11, 2);
    a3[4] = v36;
    v37 = vmlaq_laneq_f32(v29, v31[5], v11, 2);
    a3[5] = v37;
    result = vmlaq_laneq_f32(v30, v31[6], v11, 2);
    a3[6] = result;
    v39 = v13[3];
    if (v39 <= 2147483645)
    {
      v40 = (float32x4_t *)(v14 + 112 * v39);
      *a3 = vmlaq_laneq_f32(v32, *v40, v11, 3);
      a3[1] = vmlaq_laneq_f32(v33, v40[1], v11, 3);
      a3[2] = vmlaq_laneq_f32(v34, v40[2], v11, 3);
      a3[3] = vmlaq_laneq_f32(v35, v40[3], v11, 3);
      a3[4] = vmlaq_laneq_f32(v36, v40[4], v11, 3);
      a3[5] = vmlaq_laneq_f32(v37, v40[5], v11, 3);
      result = vmlaq_laneq_f32(result, v40[6], v11, 3);
      a3[6] = result;
    }
  }
  else
  {
    v41 = (float32x4_t *)a1[3];
    v42 = v41[28];
    v43 = v41[30];
    a3[1] = v41[29];
    a3[2] = v43;
    *a3 = v42;
    result = v41[31];
    v44 = v41[32];
    v45 = v41[34];
    a3[5] = v41[33];
    a3[6] = v45;
    a3[3] = result;
    a3[4] = v44;
  }
  return result;
}

__n128 C3DLightProbesSetGlobalSH3(uint64_t a1, uint64_t a2, uint64_t a3, __n128 result)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float32x2_t v10;
  uint64_t v11;
  float32x2_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  float32x2_t v17;
  _QWORD v18[3];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 232) == 3)
  {
    if (a3 != 108)
    {
      v6 = scn_default_log();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
        C3DLightProbesSetGlobalSH3_cold_1(v6, v7, v8);
    }
    v9 = 0;
    v18[0] = a2;
    v18[1] = a2 + 36;
    v18[2] = a2 + 72;
    v10 = (float32x2_t)vdup_n_s32(0xBEA6C6BC);
    do
    {
      v11 = v18[v9];
      v12.i32[0] = *(_DWORD *)(v11 + 12);
      v12.i32[1] = *(_DWORD *)(v11 + 4);
      *(float32x2_t *)&v13 = vmul_f32(v12, v10);
      *((float *)&v13 + 2) = *(float *)(v11 + 8) * 0.32573;
      *((float *)&v13 + 3) = (float)(*(float *)(v11 + 24) * -0.078848) + (float)(*(float *)v11 * 0.28209);
      *(&v19 + v9++) = v13;
    }
    while (v9 != 3);
    v14 = 0;
    v15 = v20;
    *(_OWORD *)(a1 + 80) = v19;
    *(_OWORD *)(a1 + 96) = v15;
    *(_OWORD *)(a1 + 112) = v21;
    do
    {
      *(&v19 + v14) = (__int128)vmulq_f32(*(float32x4_t *)(v18[v14] + 16), (float32x4_t)xmmword_1DD029FA0);
      ++v14;
    }
    while (v14 != 3);
    v16 = v20;
    *(_OWORD *)(a1 + 128) = v19;
    *(_OWORD *)(a1 + 144) = v16;
    *(_OWORD *)(a1 + 160) = v21;
    v17.i32[0] = *(_DWORD *)(a2 + 32);
    v17.i32[1] = *(_DWORD *)(a2 + 68);
    result.n128_u64[0] = (unint64_t)vmul_f32(v17, (float32x2_t)vdup_n_s32(0x3E0BD8A0u));
    result.n128_f32[2] = *(float *)(a2 + 104) * 0.13657;
    result.n128_u32[3] = 1.0;
    *(__n128 *)(a1 + 176) = result;
  }
  return result;
}

uint64_t C3DLightProbesSystemGetSphericalHarmonicsOrder(uint64_t a1)
{
  return *(unsigned int *)(a1 + 232);
}

BOOL computeTetrahedronCircumsphereMatrix(float32x4_t *a1, uint64_t a2)
{
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  int8x16_t v6;
  double v7;
  int8x16_t v8;
  double v9;
  int8x16_t v10;
  float32x2_t v12;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v17;
  float64x2_t v18;
  double v25;
  float64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  float64x2_t v32;
  float32_t v33;
  float32x4_t v34;
  float32x4_t v36;
  float32x4_t v37;

  v2 = *(float32x4_t *)(a2 + 16 * a1->i32[0]);
  v3 = *(float32x4_t *)(a2 + 16 * a1->i32[1]);
  v4 = *(float32x4_t *)(a2 + 16 * a1->i32[2]);
  v5 = *(float32x4_t *)(a2 + 16 * a1->i32[3]);
  v6 = (int8x16_t)vsubq_f32(v3, v2);
  v7 = *(float *)v6.i32;
  v8 = (int8x16_t)vsubq_f32(v4, v2);
  v9 = *(float *)&v8.i32[1];
  v10 = (int8x16_t)vsubq_f32(v5, v2);
  _D20 = *(float *)&v10.i32[1];
  v12.i32[0] = vextq_s8(v8, v8, 8uLL).u32[0];
  v12.i32[1] = v8.i32[0];
  v8.i32[0] = vextq_s8(v10, v10, 8uLL).u32[0];
  v8.i32[1] = v10.i32[0];
  _Q5 = vcvtq_f64_f32((float32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 4uLL));
  v14 = vcvtq_f64_f32(*(float32x2_t *)v8.i8);
  v15 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v14.f64[0], 0);
  v15.f64[0] = _D20;
  _Q17 = vcvtq_f64_f32(v12);
  v17 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&_Q17.f64[0], 0);
  v17.f64[0] = v9;
  v18 = vmlaq_f64(vmulq_f64(_Q17, vnegq_f64(v15)), v14, v17);
  __asm
  {
    FMLA            D22, D20, V17.D[1]
    FMLA            D23, D22, V5.D[1]
  }
  v25 = fabs(_D23);
  if (v25 < 0.00001)
  {
    __asm { FMOV            V4.4S, #0.25 }
    v34 = vsubq_f32(vmulq_f32(vaddq_f32(vaddq_f32(vaddq_f32(v2, v3), v4), v5), _Q4), v2);
  }
  else
  {
    v26 = -_Q17.f64[1] * _Q5.f64[0] + v7 * v9;
    v27 = vmlad_n_f64(-(v7 * _D20), v14.f64[1], _Q5.f64[0]);
    v28 = vmlad_n_f64(_D20 * _D20 + v14.f64[1] * v14.f64[1], v14.f64[0], v14.f64[0]);
    v29 = vmlad_n_f64(v9 * v9 + _Q17.f64[1] * _Q17.f64[1], _Q17.f64[0], _Q17.f64[0]);
    v30 = vmulq_f64(_Q5, _Q5).f64[0] + v7 * v7 + _Q5.f64[1] * _Q5.f64[1];
    v31 = (v29 * v27 + v30 * _D22 + v28 * v26) * (0.5 / _D23);
    *(_QWORD *)&v32.f64[0] = vdupq_laneq_s64((int64x2_t)_Q5, 1).u64[0];
    v32.f64[1] = v7;
    v34 = (float32x4_t)vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(vmlaq_f64(vmulq_f64(vnegq_f64(_Q5), v14), v32, v15), v29), v18, v30), vmlaq_f64(vmulq_f64(v32, vnegq_f64(v17)), _Q17, _Q5), v28), 0.5 / _D23);
    *(float32x2_t *)v34.f32 = vcvt_f32_f64((float64x2_t)v34);
    v33 = v31;
    v34.f32[2] = v33;
  }
  v36 = vaddq_f32(v2, v34);
  v37 = vmulq_f32(v34, v34);
  v36.i32[3] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v37, 2), vaddq_f32(v37, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v37.f32, 1))).u32[0];
  a1[2] = v36;
  return v25 >= 0.00001;
}

void C3D::DOFFinalBlurPass::DOFFinalBlurPass(C3D::ComputePass *a1, C3D::RenderGraph *a2, C3D::Pass *a3, uint64_t a4)
{
  _QWORD *v5;

  C3D::ComputePass::ComputePass(a1, a2, a3);
  *v5 = off_1EA599588;
  v5[14] = a4;
}

const char *C3D::DOFFinalBlurPass::name(C3D::DOFFinalBlurPass *this)
{
  return "DOFFinalBlurPass";
}

double C3D::DOFFinalBlurPass::setup(C3D::DOFFinalBlurPass *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double result;

  C3D::Pass::setInputCount(this, 2u);
  C3D::Pass::setOutputCount(this, 1u);
  v2 = (*(uint64_t (**)(C3D::DOFFinalBlurPass *))(*(_QWORD *)this + 88))(this);
  v3 = C3D::PassDescriptor::inputAtIndex((C3D::DOFFinalBlurPass *)((char *)this + 32), 0);
  *(_QWORD *)(v3 + 8) = "DofColorCoC";
  *(_WORD *)(v3 + 16) = (int)fmax(*(float *)(v2 + 8) * 0.5 / **((float **)this + 14), 1.0);
  *(_WORD *)(v3 + 18) = (int)fmax(*(float *)(v2 + 12) * 0.5 / **((float **)this + 14), 1.0);
  *(_WORD *)(v3 + 28) = 115;
  v4 = C3D::PassDescriptor::inputAtIndex((C3D::DOFFinalBlurPass *)((char *)this + 32), 1u);
  *(_QWORD *)(v4 + 8) = "DOFCoCBlurred";
  *(_WORD *)(v4 + 16) = (int)fmax(*(float *)(v2 + 8) * 0.5 / **((float **)this + 14) * 0.25, 1.0);
  *(_WORD *)(v4 + 18) = (int)fmax(*(float *)(v2 + 12) * 0.5 / **((float **)this + 14) * 0.25, 1.0);
  v5 = C3D::PassDescriptor::outputAtIndex((C3D::DOFFinalBlurPass *)((char *)this + 32), 0);
  *(_QWORD *)(v5 + 8) = "DOF-Final";
  *(_WORD *)(v5 + 16) = (int)fmax(*(float *)(v2 + 8) * 0.5 / **((float **)this + 14), 1.0);
  result = fmax(*(float *)(v2 + 12) * 0.5 / **((float **)this + 14), 1.0);
  *(_WORD *)(v5 + 18) = (int)result;
  *(_WORD *)(v5 + 28) = 115;
  return result;
}

void C3D::DOFFinalBlurPass::compile(C3D::DOFFinalBlurPass *this)
{
  uint64_t RenderContext;
  void *v3;
  void *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  C3D::RenderGraphResourceManager *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  __int16 v23;

  RenderContext = C3DEngineContextGetRenderContext(*((_QWORD *)this + 2));
  v3 = (void *)-[SCNMTLRenderContext resourceManager](RenderContext);
  v4 = (void *)-[SCNMTLRenderContext device](RenderContext);
  v5 = (2 * *(_DWORD *)(*((_QWORD *)this + 14) + 4)) | (unint64_t)*(unsigned __int8 *)(*((_QWORD *)this + 14)
                                                                                              + 20);
  v6 = 0xC6A4A7935BD1E995
     * ((*(uint64_t (**)(C3D::DOFFinalBlurPass *))(*(_QWORD *)this + 64))(this) ^ 0x35253C9ADE8F4CA8 ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v5) ^ ((0xC6A4A7935BD1E995 * v5) >> 47))));
  v7 = (0xC6A4A7935BD1E995 * (v6 ^ (v6 >> 47))) ^ ((0xC6A4A7935BD1E995 * (v6 ^ (v6 >> 47))) >> 47);
  v8 = *(C3D::RenderGraphResourceManager **)(*((_QWORD *)this + 3) + 128);
  v9 = C3D::RenderGraphResourceManager::get(v8, v7);
  *((_QWORD *)this + 15) = v9;
  if (!v9)
  {
    v10 = operator new();
    *(_QWORD *)v10 = &off_1EA59A338;
    *(_QWORD *)(v10 + 8) = 0;
    *(_OWORD *)(v10 + 16) = 0u;
    *(_OWORD *)(v10 + 32) = 0u;
    *((_QWORD *)this + 15) = v10;
    C3D::RenderGraphResourceManager::set((uint64_t)v8, v7, v10);
    v23 = 0;
    v11 = objc_alloc_init(MEMORY[0x1E0CC6AA0]);
    v12 = *((_QWORD *)this + 15);
    v13 = *(void **)(v12 + 32);
    *(_QWORD *)(v12 + 32) = v11;
    if (v13)

    objc_msgSend((id)C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*((_QWORD *)this + 15) + 32), "setConstantValue:type:withName:", *((_QWORD *)this + 14) + 10, 53, CFSTR("enableBloom"));
    objc_msgSend((id)C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*((_QWORD *)this + 15) + 32), "setConstantValue:type:withName:", *((_QWORD *)this + 14) + 16, 53, CFSTR("enableVignetting"));
    objc_msgSend((id)C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*((_QWORD *)this + 15) + 32), "setConstantValue:type:withName:", *((_QWORD *)this + 14) + 17, 53, CFSTR("enableColorGrading"));
    objc_msgSend((id)C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*((_QWORD *)this + 15) + 32), "setConstantValue:type:withName:", *((_QWORD *)this + 14) + 14, 53, CFSTR("enableSaturation"));
    objc_msgSend((id)C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*((_QWORD *)this + 15) + 32), "setConstantValue:type:withName:", *((_QWORD *)this + 14) + 15, 53, CFSTR("enableContrast"));
    objc_msgSend((id)C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*((_QWORD *)this + 15) + 32), "setConstantValue:type:withName:", *((_QWORD *)this + 14) + 13, 53, CFSTR("enableColorFringe"));
    objc_msgSend((id)C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*((_QWORD *)this + 15) + 32), "setConstantValue:type:withName:", (char *)&v23 + 1, 53, CFSTR("enableDebug"));
    objc_msgSend((id)C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*((_QWORD *)this + 15) + 32), "setConstantValue:type:withName:", *((_QWORD *)this + 14) + 8, 53, CFSTR("enableExposure"));
    objc_msgSend((id)C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*((_QWORD *)this + 15) + 32), "setConstantValue:type:withName:", *((_QWORD *)this + 14) + 9, 53, CFSTR("enableFrameLuminanceAutoExposure"));
    objc_msgSend((id)C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*((_QWORD *)this + 15) + 32), "setConstantValue:type:withName:", &v23, 53, CFSTR("enableHistogramAutoExposure"));
    objc_msgSend((id)C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*((_QWORD *)this + 15) + 32), "setConstantValue:type:withName:", *((_QWORD *)this + 14) + 12, 53, CFSTR("enableDepthOfField"));
    objc_msgSend((id)C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*((_QWORD *)this + 15) + 32), "setConstantValue:type:withName:", *((_QWORD *)this + 14) + 4, 29, CFSTR("DOFSampleCount"));
    objc_msgSend((id)C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*((_QWORD *)this + 15) + 32), "setConstantValue:type:withName:", *((_QWORD *)this + 14) + 20, 53, CFSTR("enableVR"));
    objc_msgSend((id)C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*((_QWORD *)this + 15) + 32), "setConstantValue:type:withName:", *((_QWORD *)this + 14) + 22, 53, CFSTR("enableWhiteBalance"));
    v14 = objc_msgSend(v3, "newComputePipelineStateWithFunctionName:constantValues:", CFSTR("dof_blur"), C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*((_QWORD *)this + 15) + 32));
    v15 = *((_QWORD *)this + 15);
    v16 = *(void **)(v15 + 16);
    *(_QWORD *)(v15 + 16) = v14;
    if (v16)

    v17 = objc_msgSend(v3, "newComputePipelineStateWithFunctionName:constantValues:", CFSTR("dof_compute_kernel"), C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*((_QWORD *)this + 15) + 32));
    v18 = *((_QWORD *)this + 15);
    v19 = *(void **)(v18 + 24);
    *(_QWORD *)(v18 + 24) = v17;
    if (v19)

    v20 = objc_msgSend(v4, "newBufferWithLength:options:", 512, 32);
    v21 = *((_QWORD *)this + 15);
    v22 = *(void **)(v21 + 40);
    *(_QWORD *)(v21 + 40) = v20;
    if (v22)

  }
}

uint64_t C3D::DOFFinalBlurPass::execute(C3D::Pass *a1, SCNMTLComputeCommandEncoder **a2)
{
  SCNMTLComputeCommandEncoder *v3;
  uint64_t v4;
  unint64_t v5;
  MTLBuffer *v6;
  uint64_t v7;
  uint64_t v8;
  MTLComputePipelineState *v9;
  void **v10;
  void **v11;
  MTLTexture *v12;
  _QWORD *v13;
  uint64_t v14;
  MTLComputePipelineState *v15;

  v3 = *a2;
  v4 = *((_QWORD *)a1 + 14);
  v6 = *(MTLBuffer **)(v4 + 40);
  v5 = *(_QWORD *)(v4 + 48);
  if ((*a2)->_buffers[0] == v6)
  {
    if (v3->_offsets[0] == v5)
      goto LABEL_5;
  }
  else
  {
    v3->_buffers[0] = v6;
  }
  v3->_offsets[0] = v5;
  v3->_buffersToBind[0] |= 1uLL;
LABEL_5:
  v7 = C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*((_QWORD *)a1 + 15) + 40);
  if (v3->_buffers[1] == (MTLBuffer *)v7)
  {
    if (!v3->_offsets[1])
      goto LABEL_9;
  }
  else
  {
    v3->_buffers[1] = (MTLBuffer *)v7;
  }
  v3->_offsets[1] = 0;
  v3->_buffersToBind[0] |= 2uLL;
LABEL_9:
  v8 = C3D::SmartPtr<SCNMTLComputePipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLComputePipeline *(*((_QWORD *)a1 + 15) + 24);
  v9 = (MTLComputePipelineState *)-[SCNMTLOpenSubdivComputeEvaluator computeEvaluator](v8);
  SCNMTLComputeCommandEncoder::dispatchOne(v3, v9);
  v10 = C3D::Pass::inputTextureAtIndex(a1, 0);
  if ((void **)v3->_textures[0] != v10)
  {
    v3->_textures[0] = (MTLTexture *)v10;
    v3->_texturesToBind[0] |= 1uLL;
  }
  v11 = C3D::Pass::inputTextureAtIndex(a1, 1u);
  if ((void **)v3->_textures[1] != v11)
  {
    v3->_textures[1] = (MTLTexture *)v11;
    v3->_texturesToBind[0] |= 2uLL;
  }
  v12 = (MTLTexture *)C3D::Pass::outputTextureAtIndex(a1, 0);
  if (v3->_textures[2] != v12)
  {
    v3->_textures[2] = v12;
    v3->_texturesToBind[0] |= 4uLL;
  }
  v13 = C3D::Pass::outputTextureAtIndex(a1, 0);
  v14 = C3D::SmartPtr<SCNMTLComputePipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLComputePipeline *(*((_QWORD *)a1 + 15) + 16);
  v15 = (MTLComputePipelineState *)-[SCNMTLOpenSubdivComputeEvaluator computeEvaluator](v14);
  return SCNMTLComputeCommandEncoder::dispatchOnTexture2D(v3, v13, v15);
}

uint64_t SCNMTLComputeCommandEncoder::dispatchOne(SCNMTLComputeCommandEncoder *this, MTLComputePipelineState *a2)
{
  MTLComputeCommandEncoder *encoder;
  int64x2_t v5;
  uint64_t v6;
  int64x2_t v7;
  uint64_t v8;

  if (this->_computePipelineState != a2)
  {
    this->_computePipelineState = a2;
    -[MTLComputeCommandEncoder setComputePipelineState:](this->_encoder, "setComputePipelineState:", a2);
  }
  SCNMTLComputeCommandEncoder::_bindPendingTextures(this);
  SCNMTLComputeCommandEncoder::_bindPendingBuffers(this);
  encoder = this->_encoder;
  v7 = vdupq_n_s64(1uLL);
  v8 = 1;
  v5 = v7;
  v6 = 1;
  return -[MTLComputeCommandEncoder dispatchThreadgroups:threadsPerThreadgroup:](encoder, "dispatchThreadgroups:threadsPerThreadgroup:", &v7, &v5);
}

void C3D::DOFFinalBlurPassResource::~DOFFinalBlurPassResource(C3D::DOFFinalBlurPassResource *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *(_QWORD *)this = &off_1EA59A338;
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)

  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)

  v4 = (void *)*((_QWORD *)this + 3);
  if (v4)

  v5 = (void *)*((_QWORD *)this + 2);
  if (v5)

}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *(_QWORD *)this = &off_1EA59A338;
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)

  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)

  v4 = (void *)*((_QWORD *)this + 3);
  if (v4)

  v5 = (void *)*((_QWORD *)this + 2);
  if (v5)

  JUMPOUT(0x1DF0D41C0);
}

uint64_t C3DMaterialDefaultUVSetForProperty(int a1)
{
  if (a1 == 4)
    return -1;
  else
    return 0;
}

__CFString *C3DEffectCommonProfileNameForLightingModel(int a1)
{
  __CFString **v1;
  __CFString *result;

  switch(a1)
  {
    case 0:
      v1 = kC3DLightingModelConstant;
      goto LABEL_10;
    case 1:
      v1 = kC3DLightingModelLambert;
      goto LABEL_10;
    case 2:
      v1 = kC3DLightingModelPhong;
      goto LABEL_10;
    case 3:
      v1 = kC3DLightingModelBlinn;
      goto LABEL_10;
    case 4:
      v1 = kC3DLightingModelNone;
      goto LABEL_10;
    case 5:
      v1 = kC3DLightingModelPhysicallyBased;
      goto LABEL_10;
    case 6:
      v1 = kC3DLightingModelShadowOnly;
LABEL_10:
      result = *v1;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

CFComparisonResult C3DEffectCommonProfileLightingModelForName(const __CFString *a1)
{
  CFComparisonResult result;

  if (CFStringCompare(a1, CFSTR("physicallyBased"), 0) == kCFCompareEqualTo)
    return 5;
  result = CFStringCompare(a1, CFSTR("constant"), 0);
  if (result)
  {
    if (CFStringCompare(a1, CFSTR("lambert"), 0))
    {
      if (CFStringCompare(a1, CFSTR("phong"), 0))
      {
        if (CFStringCompare(a1, CFSTR("blinn"), 0))
        {
          if (CFStringCompare(a1, CFSTR("none"), 0))
          {
            if (CFStringCompare(a1, CFSTR("shadowOnly"), 0))
              return 0xFFFFFFFFLL;
            else
              return 6;
          }
          else
          {
            return 4;
          }
        }
        else
        {
          return 3;
        }
      }
      else
      {
        return 2;
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

void C3DEffectCommonProfileSetColor(uint64_t a1, int a2, float *a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t EffectSlot;

  if (!a1)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      C3DEnginePipelineGetRenderComponentsForRenderPass_cold_2(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  EffectSlot = C3DEffectCommonProfileGetEffectSlot(a1, a2, 1);
  if (EffectSlot)
    C3DEffectSlotSetColor(EffectSlot, a3);
}

void C3DEffectCommonProfileSetImage(uint64_t a1, int a2, const void *a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t EffectSlot;

  if (!a1)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      C3DEnginePipelineGetRenderComponentsForRenderPass_cold_2(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  EffectSlot = C3DEffectCommonProfileGetEffectSlot(a1, a2, a3 != 0);
  if (EffectSlot)
    C3DEffectSlotSetImage(EffectSlot, a3);
}

uint64_t C3DEffectCommonProfileUVSetIsSet(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DEnginePipelineGetRenderComponentsForRenderPass_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  result = C3DEffectCommonProfileGetEffectSlot(a1, a2, 0);
  if (result)
    return *(_DWORD *)(result + 76) != -2;
  return result;
}

void C3DEffectCommonProfileSetUVSet(uint64_t a1, int a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t EffectSlot;

  if (!a1)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      C3DEnginePipelineGetRenderComponentsForRenderPass_cold_2(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  EffectSlot = C3DEffectCommonProfileGetEffectSlot(a1, a2, a3 != -1);
  if (EffectSlot)
  {
    if (*(_DWORD *)(EffectSlot + 76) != a3)
    {
      *(_DWORD *)(EffectSlot + 76) = a3;
      __PostParentDidChangeNotification(EffectSlot, 0, 0);
    }
  }
}

uint64_t C3DEffectCommonProfileGetTextureSampler(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DEnginePipelineGetRenderComponentsForRenderPass_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  result = C3DEffectCommonProfileGetEffectSlot(a1, a2, 0);
  if (result)
    return *(_QWORD *)(result + 56);
  return result;
}

void C3DEffectCommonProfileSetTextureSampler(uint64_t a1, int a2, const void *a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t EffectSlot;

  if (!a1)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      C3DEnginePipelineGetRenderComponentsForRenderPass_cold_2(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  EffectSlot = C3DEffectCommonProfileGetEffectSlot(a1, a2, a3 != 0);
  if (EffectSlot)
    C3DEffectSlotSetTextureSampler(EffectSlot, a3);
}

CFTypeRef _C3DEffectCommonProfileSetTextureForTextureProxy(uint64_t a1, int a2, const void *a3)
{
  CFTypeRef result;

  result = (CFTypeRef)C3DEffectCommonProfileGetEffectSlot(a1, a2, a3 != 0);
  if (result)
    return C3DEffectSlotSetTextureFromImageProxy((uint64_t)result, a3);
  return result;
}

CFTypeRef C3DEffectSlotSetTextureFromImageProxy(uint64_t a1, CFTypeRef cf)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef result;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DRendererContextExecuteSlotTextureProxy_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  result = *(CFTypeRef *)(a1 + 32);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 32) = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *(_QWORD *)(a1 + 32) = result;
  }
  return result;
}

void C3DEffectCommonProfileSetTexture(uint64_t a1, int a2, const void *a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t EffectSlot;

  if (!a1)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      C3DEnginePipelineGetRenderComponentsForRenderPass_cold_2(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  EffectSlot = C3DEffectCommonProfileGetEffectSlot(a1, a2, a3 != 0);
  if (EffectSlot)
  {
    C3DEffectSlotSetTexture(EffectSlot, a3);
    *(_WORD *)(a1 + 194) &= ~0x80u;
    __PostCommonProfileDidChangeNotification(a1);
  }
}

void C3DEffectCommonProfileSetMTLTexture(uint64_t a1, int a2, const void *a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t EffectSlot;

  if (!a1)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      C3DEnginePipelineGetRenderComponentsForRenderPass_cold_2(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  EffectSlot = C3DEffectCommonProfileGetEffectSlot(a1, a2, a3 != 0);
  if (EffectSlot)
  {
    C3DEffectSlotSetMTLTexture(EffectSlot, a3);
    *(_WORD *)(a1 + 194) &= ~0x80u;
    __PostCommonProfileDidChangeNotification(a1);
  }
}

uint64_t C3DEffectCommonProfileGetImageProxy(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DEnginePipelineGetRenderComponentsForRenderPass_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  result = C3DEffectCommonProfileGetEffectSlot(a1, a2, 0);
  if (result)
  {
    if (*(_BYTE *)(result + 48) == 2)
      return *(_QWORD *)(result + 40);
    else
      return 0;
  }
  return result;
}

void C3DEffectCommonProfileSetAvoidsOverLighting(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DEnginePipelineGetRenderComponentsForRenderPass_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = *(_WORD *)(a1 + 194);
  if (((((v12 & 1) == 0) ^ a2) & 1) == 0)
  {
    *(_WORD *)(a1 + 194) = v12 & 0xFFFE | a2;
    __PostCommonProfileDidChangeNotification(a1);
  }
}

void C3DEffectCommonProfileSetPerPixelLit(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DEnginePipelineGetRenderComponentsForRenderPass_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(unsigned __int8 *)(a1 + 192) != a2)
  {
    *(_BYTE *)(a1 + 192) = a2;
    *(_WORD *)(a1 + 194) |= 2u;
    __PostCommonProfileDidChangeNotification(a1);
  }
}

void C3DEffectCommonProfileSetEnableLockAmbientWithDiffuse(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DEnginePipelineGetRenderComponentsForRenderPass_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(unsigned __int8 *)(a1 + 193) != a2)
  {
    *(_BYTE *)(a1 + 193) = a2;
    __PostCommonProfileDidChangeNotification(a1);
  }
}

BOOL C3DEffectCommonProfileIsUsingSelfIllumination(uint64_t a1)
{
  float *Color;

  if ((C3DEffectCommonProfileContainsContentForEffectProperty(a1, 9) & 1) != 0)
    return 1;
  Color = (float *)C3DEffectCommonProfileGetColor(a1, 9);
  return !C3DColor4IsBlack(Color);
}

void C3DEffectCommonProfileSetSelfIlluminationOcclusion(uint64_t a1, float a2)
{
  if (*(float *)(a1 + 176) != a2)
  {
    *(float *)(a1 + 176) = a2;
    C3DMaterialTouchValueStorageModificationCount(*(_QWORD *)(a1 + 16));
  }
}

uint64_t C3DEffectCommonProfileIsUsingMappingChannel(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t EffectSlot;
  int v14;
  unsigned int v15;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DEnginePipelineGetRenderComponentsForRenderPass_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = 0;
  while (1)
  {
    EffectSlot = C3DEffectCommonProfileGetEffectSlot(a1, (char)v12, 0);
    if (EffectSlot)
    {
      v14 = *(_DWORD *)(EffectSlot + 76);
      if (v14 == -2)
      {
        if (*(_BYTE *)(EffectSlot + 50) == 4)
          v14 = -1;
        else
          v14 = 0;
      }
      if (v14 == a2)
        break;
    }
    v15 = v12++;
    if (v15 >= 0xF)
      return 0;
  }
  return 1;
}

BOOL C3DEffectSlotIsValid(uint64_t a1)
{
  float *v3;

  if ((*(_WORD *)(a1 + 48) & 0x200) != 0)
    return 0;
  if (C3DEffectSlotHasImageOrTexture(a1))
    return 1;
  v3 = (float *)C3DEffectCommonProfileDefaultColorForEffectProperty(*(char *)(a1 + 50));
  return !C3DColor4IsEqualToColor4((float *)(a1 + 16), v3);
}

uint64_t C3DEffectSlotGetColorIfApplicable(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DRendererContextExecuteSlotTextureProxy_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  if ((*(_WORD *)(a1 + 48) & 0x200) != 0)
    return 0;
  if (*(_QWORD *)(a1 + 40))
    return 0;
  return a1 + 16;
}

uint64_t C3DEffectSlotGetImageTransform(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DRendererContextExecuteSlotTextureProxy_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 64);
}

