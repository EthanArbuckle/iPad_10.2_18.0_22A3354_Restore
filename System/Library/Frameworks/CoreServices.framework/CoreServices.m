id _LSRecordLog()
{
  if (_LSRecordLog_onceToken != -1)
    dispatch_once(&_LSRecordLog_onceToken, &__block_literal_global_21);
  return (id)_LSRecordLog_log;
}

void sub_1828834EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t ___ZNK14LaunchServices15LocalizedString23getDefaultValueUnsafelyEP11_LSDatabase_block_invoke(uint64_t result, int a2, int a3, _BYTE *a4)
{
  uint64_t v4;

  if (*(_DWORD *)(result + 40) == a3)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8);
    *(_DWORD *)(v4 + 48) = a2;
    *(_BYTE *)(v4 + 52) = 1;
    *a4 = 1;
  }
  return result;
}

void sub_1828837B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828838C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182883C10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182883D00(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_recursive_lock_unlock();
  objc_exception_rethrow();
}

void sub_182883D18(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_182883D98(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_182883FB8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t __LSRECORD_GETTER__<unsigned long long>(void *a1, LSRecord *a2, const char *a3)
{
  LaunchServices::Record *v5;
  objc_selector *v6;
  _QWORD *CachedPropertyValue;
  char v8;
  uint64_t v9;
  NSObject *v10;
  LaunchServices::Record *v11;
  LaunchServices::Record *v12;
  uint64_t v13;
  char *v14;
  LaunchServices::Record *v15;
  uint64_t Unit;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*MethodImplementation)(LaunchServices::Record *, const char *, char *, uint64_t, uint64_t, uint64_t);
  objc_selector *v20;
  objc_object *v21;
  int v23;
  const char *Name;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  LaunchServices::Record *v28;
  __int16 v29;
  const char *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  os_unfair_recursive_lock_lock_with_options();
  CachedPropertyValue = LaunchServices::Record::getCachedPropertyValue(v5, a2, v6);
  if (v8)
  {
    v9 = objc_msgSend(CachedPropertyValue, "unsignedLongLongValue");
  }
  else
  {
    _LSRecordLog();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      v23 = 136446978;
      Name = sel_getName(a3);
      v25 = 2114;
      v26 = objc_opt_class();
      v27 = 2048;
      v28 = v5;
      v29 = 2082;
      v30 = sel_getName((SEL)a2);
      _os_log_impl(&dword_182882000, v10, OS_LOG_TYPE_DEBUG, "Invoking selector %{public}s on <%{public}@ %p> to get the value for property %{public}s", (uint8_t *)&v23, 0x2Au);
    }

    v11 = v5;
    v12 = v11;
    v14 = (char *)v11 + 16;
    v13 = *((_QWORD *)v11 + 2);
    if ((*((_BYTE *)v11 + 31) & 0x40) == 0 && !v13)
      __LSRECORD_IS_CRASHING_DUE_TO_A_CALLER_BUG__((uint64_t)v11, (const char *)a2);
    if (v13)
    {
      v15 = v11;
      Unit = CSStoreGetUnit();
      v17 = *((unsigned __int16 *)v15 + 14);
      v18 = *((unsigned int *)v15 + 6);
      MethodImplementation = (uint64_t (*)(LaunchServices::Record *, const char *, char *, uint64_t, uint64_t, uint64_t))object_getMethodImplementation();
      v9 = MethodImplementation(v15, a3, v14, v17, v18, Unit);

    }
    else
    {
      v9 = 0;
    }

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", v9);
    v20 = (objc_selector *)objc_claimAutoreleasedReturnValue();
    LaunchServices::Record::setCachedPropertyValue(v12, a2, v20, v21);

  }
  os_unfair_recursive_lock_unlock();

  return v9;
}

void sub_182884248(_Unwind_Exception *exception_object, int a2)
{
  void *v2;

  if (a2)
  {

    objc_begin_catch(exception_object);
    os_unfair_recursive_lock_unlock();
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_1828842B0(_Unwind_Exception *a1)
{
  void *v1;

  objc_end_catch();

  _Unwind_Resume(a1);
}

void sub_1828842C4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_18288443C()
{
  __break(1u);
}

void sub_182884470(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

uint64_t __LSRECORD_GETTER__<unsigned int>(void *a1, LSRecord *a2, const char *a3)
{
  LaunchServices::Record *v5;
  objc_selector *v6;
  _QWORD *CachedPropertyValue;
  char v8;
  uint64_t v9;
  NSObject *v10;
  LaunchServices::Record *v11;
  LaunchServices::Record *v12;
  uint64_t v13;
  char *v14;
  LaunchServices::Record *v15;
  uint64_t Unit;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*MethodImplementation)(LaunchServices::Record *, const char *, char *, uint64_t, uint64_t, uint64_t);
  objc_selector *v20;
  objc_object *v21;
  int v23;
  const char *Name;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  LaunchServices::Record *v28;
  __int16 v29;
  const char *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  os_unfair_recursive_lock_lock_with_options();
  CachedPropertyValue = LaunchServices::Record::getCachedPropertyValue(v5, a2, v6);
  if (v8)
  {
    v9 = objc_msgSend(CachedPropertyValue, "unsignedIntValue");
  }
  else
  {
    _LSRecordLog();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      v23 = 136446978;
      Name = sel_getName(a3);
      v25 = 2114;
      v26 = objc_opt_class();
      v27 = 2048;
      v28 = v5;
      v29 = 2082;
      v30 = sel_getName((SEL)a2);
      _os_log_impl(&dword_182882000, v10, OS_LOG_TYPE_DEBUG, "Invoking selector %{public}s on <%{public}@ %p> to get the value for property %{public}s", (uint8_t *)&v23, 0x2Au);
    }

    v11 = v5;
    v12 = v11;
    v14 = (char *)v11 + 16;
    v13 = *((_QWORD *)v11 + 2);
    if ((*((_BYTE *)v11 + 31) & 0x40) == 0 && !v13)
      __LSRECORD_IS_CRASHING_DUE_TO_A_CALLER_BUG__((uint64_t)v11, (const char *)a2);
    if (v13)
    {
      v15 = v11;
      Unit = CSStoreGetUnit();
      v17 = *((unsigned __int16 *)v15 + 14);
      v18 = *((unsigned int *)v15 + 6);
      MethodImplementation = (uint64_t (*)(LaunchServices::Record *, const char *, char *, uint64_t, uint64_t, uint64_t))object_getMethodImplementation();
      v9 = MethodImplementation(v15, a3, v14, v17, v18, Unit);

    }
    else
    {
      v9 = 0;
    }

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v9);
    v20 = (objc_selector *)objc_claimAutoreleasedReturnValue();
    LaunchServices::Record::setCachedPropertyValue(v12, a2, v20, v21);

  }
  os_unfair_recursive_lock_unlock();

  return v9;
}

void sub_1828846C8(_Unwind_Exception *exception_object, int a2)
{
  void *v2;

  if (a2)
  {

    objc_begin_catch(exception_object);
    os_unfair_recursive_lock_unlock();
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_182884730(_Unwind_Exception *a1)
{
  void *v1;

  objc_end_catch();

  _Unwind_Resume(a1);
}

void sub_182884744(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

BOOL __LSRECORD_GETTER__<BOOL>(void *a1, LSRecord *a2, const char *a3)
{
  LaunchServices::Record *v5;
  objc_selector *v6;
  _QWORD *CachedPropertyValue;
  char v8;
  uint64_t v9;
  NSObject *v10;
  LaunchServices::Record *v11;
  LaunchServices::Record *v12;
  uint64_t v13;
  char *v14;
  LaunchServices::Record *v15;
  uint64_t Unit;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*MethodImplementation)(LaunchServices::Record *, const char *, char *, uint64_t, uint64_t, uint64_t);
  objc_selector *v20;
  objc_object *v21;
  int v23;
  const char *Name;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  LaunchServices::Record *v28;
  __int16 v29;
  const char *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  os_unfair_recursive_lock_lock_with_options();
  CachedPropertyValue = LaunchServices::Record::getCachedPropertyValue(v5, a2, v6);
  if (v8)
  {
    if ((_QWORD *)*MEMORY[0x1E0C9AE50] == CachedPropertyValue)
    {
      LODWORD(v9) = 1;
    }
    else if ((_QWORD *)*MEMORY[0x1E0C9AE40] == CachedPropertyValue)
    {
      LODWORD(v9) = 0;
    }
    else
    {
      LODWORD(v9) = objc_msgSend(CachedPropertyValue, "BOOLValue");
    }
  }
  else
  {
    _LSRecordLog();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      v23 = 136446978;
      Name = sel_getName(a3);
      v25 = 2114;
      v26 = objc_opt_class();
      v27 = 2048;
      v28 = v5;
      v29 = 2082;
      v30 = sel_getName((SEL)a2);
      _os_log_impl(&dword_182882000, v10, OS_LOG_TYPE_DEBUG, "Invoking selector %{public}s on <%{public}@ %p> to get the value for property %{public}s", (uint8_t *)&v23, 0x2Au);
    }

    v11 = v5;
    v12 = v11;
    v14 = (char *)v11 + 16;
    v13 = *((_QWORD *)v11 + 2);
    if ((*((_BYTE *)v11 + 31) & 0x40) == 0 && !v13)
      __LSRECORD_IS_CRASHING_DUE_TO_A_CALLER_BUG__((uint64_t)v11, (const char *)a2);
    if (v13)
    {
      v15 = v11;
      Unit = CSStoreGetUnit();
      v17 = *((unsigned __int16 *)v15 + 14);
      v18 = *((unsigned int *)v15 + 6);
      MethodImplementation = (uint64_t (*)(LaunchServices::Record *, const char *, char *, uint64_t, uint64_t, uint64_t))object_getMethodImplementation();
      v9 = MethodImplementation(v15, a3, v14, v17, v18, Unit);

    }
    else
    {
      v9 = 0;
    }

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v9);
    v20 = (objc_selector *)objc_claimAutoreleasedReturnValue();
    LaunchServices::Record::setCachedPropertyValue(v12, a2, v20, v21);

  }
  os_unfair_recursive_lock_unlock();

  return (_DWORD)v9 != 0;
}

void sub_1828849D0(_Unwind_Exception *exception_object, int a2)
{
  void *v2;

  if (a2)
  {

    objc_begin_catch(exception_object);
    os_unfair_recursive_lock_unlock();
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_182884A38(_Unwind_Exception *a1)
{
  void *v1;

  objc_end_catch();

  _Unwind_Resume(a1);
}

void sub_182884A4C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

id LaunchServices::LocalizedString::getAllUnsafeLocalizations(LaunchServices::LocalizedString *this, _LSDatabase *a2, NSString *a3, BOOL *a4, BOOL *a5)
{
  _LSDatabase *v9;
  uint64_t v10;
  void *v11;
  unint64_t v12;
  void *v13;
  void *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  const __CFString *v21;
  void *v22;
  NSString *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  const __CFString *v37;
  uint64_t v38;
  void *v40;
  void *v41;
  void *context;
  void *v43;
  NSString *v44;
  _LSDatabase *v45;
  LaunchServices::LocalizedString *v46;
  void *v47;
  void *v48;
  void *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _BYTE v54[128];
  const __CFString *v55;
  _QWORD v56[3];

  v56[1] = *MEMORY[0x1E0C80C00];
  v9 = a2;
  v44 = a3;
  v45 = v9;
  if (v9)
  {
    if (!a4)
      goto LABEL_4;
    goto LABEL_3;
  }
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSDictionary<NSString *,NSString *> *LaunchServices::LocalizedString::getAllUnsafeLocalizations(_LSDatabase *__strong _Nonnull, NSString *__strong _Nullable, BOOL * _Nullable, BOOL * _Nullable) const");
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v40, "handleFailureInFunction:file:lineNumber:description:", v41, CFSTR("LSLocalizedString.mm"), 308, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("db != nil"));

  if (a4)
LABEL_3:
    *a4 = *((_BYTE *)this + 8) & 1;
LABEL_4:
  if (a5)
    *a5 = (*((_BYTE *)this + 8) & 2) != 0;
  if ((*((_BYTE *)this + 8) & 2) != 0)
  {
    v48 = (void *)_CSStringCopyCFString();
    if (v48)
    {
      if (objc_msgSend((id)__LSDefaultsGetSharedInstance(), "markLocalizationsStoredInDatabase"))
      {
        if ((*((_BYTE *)this + 8) & 1) != 0)
          v21 = CFSTR("✴️");
        else
          v21 = CFSTR("🔂");
        objc_msgSend(v48, "stringByAppendingString:", v21);
        v22 = (void *)objc_claimAutoreleasedReturnValue();

      }
      else
      {
        v22 = v48;
      }
      v55 = CFSTR("LSDefaultLocalizedValue");
      v56[0] = v22;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v56, &v55, 1);
      v11 = (void *)objc_claimAutoreleasedReturnValue();

      goto LABEL_64;
    }
LABEL_28:
    v11 = 0;
    goto LABEL_64;
  }
  if (!*(_DWORD *)this || !*((_DWORD *)this + 1))
    goto LABEL_28;
  _LSDatabaseGetStringArray(v9);
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  _LSDatabaseGetStringArrayWithNullValues((uint64_t)v9, *((unsigned int *)this + 1), 0);
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v47, "count");
  v11 = 0;
  if (v47 && v43)
  {
    v12 = v10;
    if (v10 != objc_msgSend(v43, "count"))
      goto LABEL_62;
    v13 = (void *)MEMORY[0x186DAE7A0]();
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", objc_msgSend(v47, "count"));
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    if (v14)
    {
      if (v12)
      {
        v15 = 0;
        v16 = 0;
LABEL_15:
        v17 = v16;
        do
        {
          objc_msgSend(v47, "objectAtIndexedSubscript:", v17);
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v43, "pointerAtIndex:", v17);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          v20 = v19;
          if (!v18 || !v19)
          {

            v16 = v17 + 1;
            v15 = 1;
            if (v12 - 1 != v17)
              goto LABEL_15;
            goto LABEL_32;
          }
          objc_msgSend(v14, "setObject:forKeyedSubscript:", v19, v18);

          ++v17;
        }
        while (v12 != v17);
        if ((v15 & 1) == 0)
          goto LABEL_41;
LABEL_32:
        v23 = v44;
        if (v23
          || (objc_msgSend(v14, "objectForKeyedSubscript:", CFSTR("LSDefaultLocalizedValue")),
              (v23 = (NSString *)objc_claimAutoreleasedReturnValue()) != 0))
        {
          v24 = 0;
          if (v12 <= 1)
            v25 = 1;
          else
            v25 = v12;
          do
          {
            objc_msgSend(v47, "objectAtIndexedSubscript:", v24);
            v26 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v14, "objectForKeyedSubscript:", v26);
            v27 = (void *)objc_claimAutoreleasedReturnValue();

            if (!v27)
              objc_msgSend(v14, "setObject:forKeyedSubscript:", v23, v26);

            ++v24;
          }
          while (v25 != v24);

        }
      }
LABEL_41:
      v49 = (void *)objc_msgSend(v14, "copy");
    }
    else
    {
      v49 = 0;
    }

    objc_autoreleasePoolPop(v13);
    if (v49)
    {
      if (objc_msgSend((id)__LSDefaultsGetSharedInstance(), "markLocalizationsStoredInDatabase"))
      {
        context = (void *)MEMORY[0x186DAE7A0]();
        objc_msgSend(v49, "objectForKeyedSubscript:", CFSTR("LSDefaultLocalizedValue"));
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        v46 = this;
        objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v52 = 0u;
        v53 = 0u;
        v50 = 0u;
        v51 = 0u;
        v29 = v47;
        v30 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v50, v54, 16);
        if (v30)
        {
          v31 = *(_QWORD *)v51;
          do
          {
            for (i = 0; i != v30; ++i)
            {
              if (*(_QWORD *)v51 != v31)
                objc_enumerationMutation(v29);
              v33 = *(void **)(*((_QWORD *)&v50 + 1) + 8 * i);
              if (objc_msgSend(v33, "isEqual:", CFSTR("LSDefaultLocalizedValue")))
              {
                objc_msgSend(v28, "stringByAppendingString:", CFSTR("*️⃣"));
                v34 = (void *)objc_claimAutoreleasedReturnValue();
              }
              else
              {
                objc_msgSend(v49, "objectForKeyedSubscript:", v33);
                v35 = (void *)objc_claimAutoreleasedReturnValue();
                v36 = v35;
                if (v35)
                {
                  if ((*((_BYTE *)v46 + 8) & 2) != 0)
                    v37 = CFSTR("🔂");
                  else
                    v37 = CFSTR("❇️");
                  objc_msgSend(v35, "stringByAppendingString:", v37);
                  v38 = objc_claimAutoreleasedReturnValue();
                }
                else
                {
                  objc_msgSend(v28, "stringByAppendingString:", CFSTR("🔴"));
                  v38 = objc_claimAutoreleasedReturnValue();
                }
                v34 = (void *)v38;

              }
              objc_msgSend(v11, "setObject:forKeyedSubscript:", v34, v33);

            }
            v30 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v50, v54, 16);
          }
          while (v30);
        }

        objc_autoreleasePoolPop(context);
      }
      else
      {
        v11 = v49;
      }
    }
    else
    {
LABEL_62:
      v11 = 0;
    }
  }

LABEL_64:
  return v11;
}

void sub_182884FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

objc_selector *__LSRECORD_GETTER__<objc_object * {__strong}>(void *a1, LSRecord *a2, const char *a3)
{
  LaunchServices::Record *v5;
  objc_selector *v6;
  _QWORD *CachedPropertyValue;
  char v8;
  objc_selector *v9;
  NSObject *v10;
  LaunchServices::Record *v11;
  LaunchServices::Record *v12;
  uint64_t v13;
  char *v14;
  LaunchServices::Record *v15;
  uint64_t Unit;
  uint64_t v17;
  uint64_t v18;
  void (*MethodImplementation)(LaunchServices::Record *, const char *, char *, uint64_t, uint64_t, uint64_t);
  objc_object *v20;
  int v22;
  const char *Name;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  LaunchServices::Record *v27;
  __int16 v28;
  const char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  os_unfair_recursive_lock_lock_with_options();
  CachedPropertyValue = LaunchServices::Record::getCachedPropertyValue(v5, a2, v6);
  if (v8)
  {
    v9 = CachedPropertyValue;
  }
  else
  {
    _LSRecordLog();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      v22 = 136446978;
      Name = sel_getName(a3);
      v24 = 2114;
      v25 = objc_opt_class();
      v26 = 2048;
      v27 = v5;
      v28 = 2082;
      v29 = sel_getName((SEL)a2);
      _os_log_impl(&dword_182882000, v10, OS_LOG_TYPE_DEBUG, "Invoking selector %{public}s on <%{public}@ %p> to get the value for property %{public}s", (uint8_t *)&v22, 0x2Au);
    }

    v11 = v5;
    v12 = v11;
    v14 = (char *)v11 + 16;
    v13 = *((_QWORD *)v11 + 2);
    if ((*((_BYTE *)v11 + 31) & 0x40) == 0 && !v13)
      __LSRECORD_IS_CRASHING_DUE_TO_A_CALLER_BUG__((uint64_t)v11, (const char *)a2);
    if (v13)
    {
      v15 = v11;
      Unit = CSStoreGetUnit();
      v17 = *((unsigned __int16 *)v15 + 14);
      v18 = *((unsigned int *)v15 + 6);
      MethodImplementation = (void (*)(LaunchServices::Record *, const char *, char *, uint64_t, uint64_t, uint64_t))object_getMethodImplementation();
      MethodImplementation(v15, a3, v14, v17, v18, Unit);
      v9 = (objc_selector *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v9 = 0;
    }

    LaunchServices::Record::setCachedPropertyValue(v12, a2, v9, v20);
  }
  os_unfair_recursive_lock_unlock();

  return v9;
}

void sub_182885324(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    os_unfair_recursive_lock_unlock();
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_182885388(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  objc_end_catch();

  _Unwind_Resume(a1);
}

void sub_1828853A0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

_QWORD *LaunchServices::Record::getCachedPropertyValue(LaunchServices::Record *this, LSRecord *a2, objc_selector *a3)
{
  _QWORD *result;
  LSRecord *v4;

  v4 = a2;
  result = (_QWORD *)*((_QWORD *)this + 1);
  if (result)
  {
    result = std::__hash_table<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::__unordered_map_hasher<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::hash<_opaque_pthread_t *>,std::equal_to<_opaque_pthread_t *>,true>,std::__unordered_map_equal<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::equal_to<_opaque_pthread_t *>,std::hash<_opaque_pthread_t *>,true>,std::allocator<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>>>::find<_opaque_pthread_t *>(result, &v4);
    if (result)
      return (_QWORD *)result[3];
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::__unordered_map_hasher<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::hash<_opaque_pthread_t *>,std::equal_to<_opaque_pthread_t *>,true>,std::__unordered_map_equal<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::equal_to<_opaque_pthread_t *>,std::hash<_opaque_pthread_t *>,true>,std::allocator<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>>>::find<_opaque_pthread_t *>(_QWORD *a1, _QWORD *a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v4 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = v5 & (*(_QWORD *)&v2 - 1);
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    do
    {
      v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == *a2)
          return result;
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(_QWORD *)&v2)
            v10 %= *(_QWORD *)&v2;
        }
        else
        {
          v10 &= *(_QWORD *)&v2 - 1;
        }
        if (v10 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

_QWORD *LaunchServices::Record::setCachedPropertyValue(LaunchServices::Record *this, LSRecord *a2, objc_selector *a3, objc_object *a4)
{
  uint64_t v5;
  id v7;
  LSRecord *v8;

  v7 = a3;
  v8 = a2;
  v5 = *((_QWORD *)this + 1);
  if (!v5)
  {
    v5 = operator new();
    *(_OWORD *)v5 = 0u;
    *(_OWORD *)(v5 + 16) = 0u;
    *(_DWORD *)(v5 + 32) = 1065353216;
    *((_QWORD *)this + 1) = v5;
  }
  return std::__hash_table<std::__hash_value_type<objc_selector *,objc_object * {__strong}>,std::__unordered_map_hasher<objc_selector *,std::__hash_value_type<objc_selector *,objc_object * {__strong}>,std::hash<objc_selector *>,std::equal_to<objc_selector *>,true>,std::__unordered_map_equal<objc_selector *,std::__hash_value_type<objc_selector *,objc_object * {__strong}>,std::equal_to<objc_selector *>,std::hash<objc_selector *>,true>,std::allocator<std::__hash_value_type<objc_selector *,objc_object * {__strong}>>>::__emplace_unique_key_args<objc_selector *,objc_selector *&,objc_object * const {__strong}&>(v5, &v8, &v8, &v7);
}

_QWORD *std::__hash_table<std::__hash_value_type<objc_selector *,objc_object * {__strong}>,std::__unordered_map_hasher<objc_selector *,std::__hash_value_type<objc_selector *,objc_object * {__strong}>,std::hash<objc_selector *>,std::equal_to<objc_selector *>,true>,std::__unordered_map_equal<objc_selector *,std::__hash_value_type<objc_selector *,objc_object * {__strong}>,std::equal_to<objc_selector *>,std::hash<objc_selector *>,true>,std::allocator<std::__hash_value_type<objc_selector *,objc_object * {__strong}>>>::__emplace_unique_key_args<objc_selector *,objc_selector *&,objc_object * const {__strong}&>(uint64_t a1, _QWORD *a2, _QWORD *a3, id *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  _QWORD **v13;
  _QWORD *i;
  unint64_t v15;
  _QWORD *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v8 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v9 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v8 >> 47) ^ v8);
  v10 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = v10 & (v11 - 1);
    }
    v13 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      for (i = *v13; i; i = (_QWORD *)*i)
      {
        v15 = i[1];
        if (v15 == v10)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v12.u32[0] > 1uLL)
          {
            if (v15 >= v11)
              v15 %= v11;
          }
          else
          {
            v15 &= v11 - 1;
          }
          if (v15 != v4)
            break;
        }
      }
    }
  }
  v16 = (_QWORD *)(a1 + 16);
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v10;
  i[2] = *a3;
  i[3] = *a4;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v24)
  {
    *i = *v24;
LABEL_38:
    *v24 = i;
    goto LABEL_39;
  }
  *i = *v16;
  *v16 = i;
  *(_QWORD *)(v23 + 8 * v4) = v16;
  if (*i)
  {
    v25 = *(_QWORD *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v25 >= v11)
        v25 %= v11;
    }
    else
    {
      v25 &= v11 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1828857C4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,void *>>>::operator()[abi:nn180100](v2, v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__do_rehash<true>(a1, prime);
  }
}

void std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  unint64_t v12;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2)
              v12 %= a2;
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *v7 = *v11;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          v12 = v8;
LABEL_24:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void _LSDatabaseGetCacheGUIDBytes(uint64_t a1, unsigned __int8 *a2)
{
  _OWORD v3[13];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  memset(v3, 0, sizeof(v3));
  _LSDatabaseGetHeader(v3);
  uuid_copy(a2, (const unsigned __int8 *)&v3[11] + 8);
}

__n128 _LSDatabaseGetHeader@<Q0>(_OWORD *a1@<X8>)
{
  NSObject *v3;
  __n128 result;
  uint8_t v5[12];
  int v6;

  v6 = 0;
  CSStoreGetHeader();
  _LSDatabaseGetLog();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_182882000, v3, OS_LOG_TYPE_DEFAULT, "Failed to read DB header, generating new one", v5, 2u);
  }

  result.n128_u64[0] = 0;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

void _LSPersistentIdentifierDataMake(uint64_t *a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_DWORD *)(a4 + 4) = a3;
  *(_DWORD *)(a4 + 8) = a2;
  _LSDatabaseGetCacheGUIDBytes(*a1, (unsigned __int8 *)(a4 + 12));
}

void sub_182885D00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __LSRECORD_GETTER__<unsigned char>(void *a1, LSRecord *a2, const char *a3)
{
  LaunchServices::Record *v5;
  objc_selector *v6;
  _QWORD *CachedPropertyValue;
  char v8;
  uint64_t v9;
  NSObject *v10;
  LaunchServices::Record *v11;
  LaunchServices::Record *v12;
  uint64_t v13;
  char *v14;
  LaunchServices::Record *v15;
  uint64_t Unit;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*MethodImplementation)(LaunchServices::Record *, const char *, char *, uint64_t, uint64_t, uint64_t);
  objc_selector *v20;
  objc_object *v21;
  int v23;
  const char *Name;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  LaunchServices::Record *v28;
  __int16 v29;
  const char *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  os_unfair_recursive_lock_lock_with_options();
  CachedPropertyValue = LaunchServices::Record::getCachedPropertyValue(v5, a2, v6);
  if (v8)
  {
    v9 = objc_msgSend(CachedPropertyValue, "unsignedCharValue");
  }
  else
  {
    _LSRecordLog();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      v23 = 136446978;
      Name = sel_getName(a3);
      v25 = 2114;
      v26 = objc_opt_class();
      v27 = 2048;
      v28 = v5;
      v29 = 2082;
      v30 = sel_getName((SEL)a2);
      _os_log_impl(&dword_182882000, v10, OS_LOG_TYPE_DEBUG, "Invoking selector %{public}s on <%{public}@ %p> to get the value for property %{public}s", (uint8_t *)&v23, 0x2Au);
    }

    v11 = v5;
    v12 = v11;
    v14 = (char *)v11 + 16;
    v13 = *((_QWORD *)v11 + 2);
    if ((*((_BYTE *)v11 + 31) & 0x40) == 0 && !v13)
      __LSRECORD_IS_CRASHING_DUE_TO_A_CALLER_BUG__((uint64_t)v11, (const char *)a2);
    if (v13)
    {
      v15 = v11;
      Unit = CSStoreGetUnit();
      v17 = *((unsigned __int16 *)v15 + 14);
      v18 = *((unsigned int *)v15 + 6);
      MethodImplementation = (uint64_t (*)(LaunchServices::Record *, const char *, char *, uint64_t, uint64_t, uint64_t))object_getMethodImplementation();
      v9 = MethodImplementation(v15, a3, v14, v17, v18, Unit);

    }
    else
    {
      v9 = 0;
    }

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedChar:", v9);
    v20 = (objc_selector *)objc_claimAutoreleasedReturnValue();
    LaunchServices::Record::setCachedPropertyValue(v12, a2, v20, v21);

  }
  os_unfair_recursive_lock_unlock();

  return v9;
}

void sub_182885F40(_Unwind_Exception *exception_object, int a2)
{
  void *v2;

  if (a2)
  {

    objc_begin_catch(exception_object);
    os_unfair_recursive_lock_unlock();
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_182885FA8(_Unwind_Exception *a1)
{
  void *v1;

  objc_end_catch();

  _Unwind_Resume(a1);
}

void sub_182885FBC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_182886080(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182886280(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id LaunchServices::LocalizedString::getBundleLocs(LaunchServices::LocalizedString *this, _LSDatabase *a2)
{
  _LSDatabase *v3;
  _LSDatabase *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = v3;
  if ((*((_BYTE *)this + 8) & 2) != 0)
  {
    v6 = _CSStringCopyCFString();
    v7 = (void *)v6;
    if (v6)
    {
      v9[0] = v6;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v9, 1);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v5 = 0;
    }

  }
  else
  {
    _LSDatabaseGetStringArray(v3);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v5;
}

void sub_1828863A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1828864D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__deallocate_node(a1, *(id **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__deallocate_node(uint64_t a1, id *a2)
{
  id *v2;
  id *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (id *)*v2;

      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t LaunchServices::LocalizedString::Get(LaunchServices::LocalizedString *this, _LSDatabase *a2)
{
  LaunchServices::LocalizedString *v2;
  uint64_t Unit;
  void *v5;
  void *v6;

  v2 = this;
  if (!v2)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "static const LocalizedString *LaunchServices::LocalizedString::Get(_LSDatabase *__strong _Nonnull, _LSLocalizedStringID)");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("LSLocalizedString.mm"), 154, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("db != nil"));

  }
  Unit = CSStoreGetUnit();

  return Unit;
}

void sub_1828866F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id _LSDatabaseGetStringArrayWithNullValues(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  void *v4;
  id v6;

  objc_msgSend(MEMORY[0x1E0CB3868], "strongObjectsPointerArray");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (a3)
    *a3 = 0;
  v6 = v4;
  _CSArrayEnumerateAllValues();

  return v6;
}

void sub_1828867D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_182886AA8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  __break(1u);
}

void sub_182886B10(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_182886BF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_182886F54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v2;

  _Unwind_Resume(a1);
}

id _LSPlistDataGetDictionary(void *a1, uint64_t a2)
{
  void *v4;
  void *v5;

  v4 = (void *)MEMORY[0x186DAE7A0]();
  -[_LSPlistHint completeDictionary](a2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v5)
  {
    _LSPlistRestore(a1);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[_LSPlistHint setCompleteDictionary:](a2, v5);
  }
  objc_autoreleasePoolPop(v4);
  return v5;
}

void sub_182887008(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id _LSPlistRestore(void *a1)
{
  NSData *v1;
  NSData *v2;
  void *v3;
  void *v4;
  void *v5;
  id Transformed;
  void *v7;
  BOOL v9;

  v1 = a1;
  if (v1)
  {
    v2 = v1;
    v3 = (void *)MEMORY[0x186DAE7A0]();
    v9 = 0;
    _LSPlistGetSubdataForFCF(v2, &v9);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0CB38B0], "propertyListWithData:options:format:error:", v4, 0, 0, 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (v5 && _NSIsNSDictionary())
    {
      if (v9)
        Transformed = (id)_LSPlistCreateTransformed(v5, (uint64_t)_LSPlistRestoreString, 0);
      else
        Transformed = v5;
      v7 = Transformed;
    }
    else
    {
      v7 = 0;
    }

    objc_autoreleasePoolPop(v3);
  }
  else
  {
    v4 = 0;
    v7 = 0;
  }

  return v7;
}

void sub_182887150(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_182887248(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18288737C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t __LSRECORD_GETTER__<unsigned long>(void *a1, LSRecord *a2, const char *a3)
{
  LaunchServices::Record *v5;
  objc_selector *v6;
  _QWORD *CachedPropertyValue;
  char v8;
  uint64_t v9;
  NSObject *v10;
  LaunchServices::Record *v11;
  LaunchServices::Record *v12;
  uint64_t v13;
  char *v14;
  LaunchServices::Record *v15;
  uint64_t Unit;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*MethodImplementation)(LaunchServices::Record *, const char *, char *, uint64_t, uint64_t, uint64_t);
  objc_selector *v20;
  objc_object *v21;
  int v23;
  const char *Name;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  LaunchServices::Record *v28;
  __int16 v29;
  const char *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  os_unfair_recursive_lock_lock_with_options();
  CachedPropertyValue = LaunchServices::Record::getCachedPropertyValue(v5, a2, v6);
  if (v8)
  {
    v9 = objc_msgSend(CachedPropertyValue, "unsignedLongValue");
  }
  else
  {
    _LSRecordLog();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      v23 = 136446978;
      Name = sel_getName(a3);
      v25 = 2114;
      v26 = objc_opt_class();
      v27 = 2048;
      v28 = v5;
      v29 = 2082;
      v30 = sel_getName((SEL)a2);
      _os_log_impl(&dword_182882000, v10, OS_LOG_TYPE_DEBUG, "Invoking selector %{public}s on <%{public}@ %p> to get the value for property %{public}s", (uint8_t *)&v23, 0x2Au);
    }

    v11 = v5;
    v12 = v11;
    v14 = (char *)v11 + 16;
    v13 = *((_QWORD *)v11 + 2);
    if ((*((_BYTE *)v11 + 31) & 0x40) == 0 && !v13)
      __LSRECORD_IS_CRASHING_DUE_TO_A_CALLER_BUG__((uint64_t)v11, (const char *)a2);
    if (v13)
    {
      v15 = v11;
      Unit = CSStoreGetUnit();
      v17 = *((unsigned __int16 *)v15 + 14);
      v18 = *((unsigned int *)v15 + 6);
      MethodImplementation = (uint64_t (*)(LaunchServices::Record *, const char *, char *, uint64_t, uint64_t, uint64_t))object_getMethodImplementation();
      v9 = MethodImplementation(v15, a3, v14, v17, v18, Unit);

    }
    else
    {
      v9 = 0;
    }

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v9);
    v20 = (objc_selector *)objc_claimAutoreleasedReturnValue();
    LaunchServices::Record::setCachedPropertyValue(v12, a2, v20, v21);

  }
  os_unfair_recursive_lock_unlock();

  return v9;
}

void sub_1828875E0(_Unwind_Exception *exception_object, int a2)
{
  void *v2;

  if (a2)
  {

    objc_begin_catch(exception_object);
    os_unfair_recursive_lock_unlock();
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_182887648(_Unwind_Exception *a1)
{
  void *v1;

  objc_end_catch();

  _Unwind_Resume(a1);
}

void sub_18288765C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_182887774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_18288784C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1828878FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828879BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);

  _Unwind_Resume(a1);
}

void sub_182887D1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_182887F4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18288828C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  void *v15;
  void *v16;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_182888364(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1828884A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182888534(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828886D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  v2 = v1;

  _Unwind_Resume(a1);
}

void sub_1828887B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id _LSBundleGetPreferredLaunchArchitecture(void *a1, int a2)
{
  id v3;
  uint64_t v4;
  const __CFArray *v5;
  const __CFArray *v6;
  void *v7;

  v3 = a1;
  v4 = _LSBundleGet(v3, a2);
  v5 = _LSBundleCopyArchitecturesValidOnCurrentSystem(v3, a2);
  v6 = v5;
  v7 = 0;
  if (v4 && v5)
  {
    if (-[__CFArray count](v5, "count"))
    {
      -[__CFArray objectAtIndexedSubscript:](v6, "objectAtIndexedSubscript:", 0);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v7 = 0;
    }
  }

  return v7;
}

void sub_182888868(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_182888A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void sub_182888B74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182888BDC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182888C68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182888F3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_182888FFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828890C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_18288915C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182889578(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_182889720(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_182889934(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_182889A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

uint64_t _UTTypeSearchConformsToTypesWithBlock(uint64_t a1, int a2, uint64_t a3, _DWORD *a4, uint64_t a5)
{
  return _UTTypeSearchConformsToTypesCommon(a1, a2, a3, (uint64_t)_UTTypeSearchConformsToTypesWithBlock::$_0::__invoke, a5, a4);
}

id _UTTypeGetIconNames(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v3 = a1;
  v4 = 0;
  if (v3 && a2)
  {
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = 0;
    v6 = a2 + 28;
    do
    {
      if (!*(_DWORD *)(v6 + v5))
        break;
      v7 = (void *)_CSStringCopyCFString();
      if (v7)
        objc_msgSend(v4, "addObject:", v7);
      v5 += 4;

    }
    while (v5 != 32);
  }

  return v4;
}

void sub_182889B10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id _UTTypeGetIconName(void *a1, uint64_t a2)
{
  id v3;
  void *v4;

  v3 = a1;
  v4 = 0;
  if (v3 && a2)
  {
    if (*(_DWORD *)(a2 + 60))
      v4 = (void *)_CSStringCopyCFString();
    else
      v4 = 0;
  }

  return v4;
}

void sub_182889BA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id _UTTypeGetGlyphName(void *a1, uint64_t a2)
{
  id v3;
  void *v4;

  v3 = a1;
  v4 = 0;
  if (v3 && a2)
  {
    if (*(_DWORD *)(a2 + 64))
      v4 = (void *)_CSStringCopyCFString();
    else
      v4 = 0;
  }

  return v4;
}

void sub_182889C1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182889CC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182889DD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_182889FC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18288A060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

char *std::__hash_table<std::__hash_value_type<void const*,std::vector<std::pair<objc_selector *,void (*)(objc_object *,objc_selector *)>>>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,std::vector<std::pair<objc_selector *,void (*)(objc_object *,objc_selector *)>>>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,std::vector<std::pair<objc_selector *,void (*)(objc_object *,objc_selector *)>>>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,std::vector<std::pair<objc_selector *,void (*)(objc_object *,objc_selector *)>>>>>::__emplace_unique_key_args<void const*,void const*,std::vector<std::pair<objc_selector *,void (*)(objc_object *,objc_selector *)>>>(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  void **v13;
  char *v14;
  unint64_t v15;
  _QWORD *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v8 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v9 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v8 >> 47) ^ v8);
  v10 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = v10 & (v11 - 1);
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = (char *)*v13;
      if (*v13)
      {
        do
        {
          v15 = *((_QWORD *)v14 + 1);
          if (v15 == v10)
          {
            if (*((_QWORD *)v14 + 2) == *a2)
              return v14;
          }
          else
          {
            if (v12.u32[0] > 1uLL)
            {
              if (v15 >= v11)
                v15 %= v11;
            }
            else
            {
              v15 &= v11 - 1;
            }
            if (v15 != v4)
              break;
          }
          v14 = *(char **)v14;
        }
        while (v14);
      }
    }
  }
  v16 = (_QWORD *)(a1 + 16);
  v14 = (char *)operator new(0x30uLL);
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v10;
  *((_QWORD *)v14 + 2) = *a3;
  *(_OWORD *)(v14 + 24) = *(_OWORD *)a4;
  *((_QWORD *)v14 + 5) = *(_QWORD *)(a4 + 16);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v24)
  {
    *(_QWORD *)v14 = *v24;
LABEL_38:
    *v24 = v14;
    goto LABEL_39;
  }
  *(_QWORD *)v14 = *v16;
  *v16 = v14;
  *(_QWORD *)(v23 + 8 * v4) = v16;
  if (*(_QWORD *)v14)
  {
    v25 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v25 >= v11)
        v25 %= v11;
    }
    else
    {
      v25 &= v11 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_18288A49C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<void const*,std::vector<std::pair<objc_selector *,void (*)(objc_object *,objc_selector *)>>>,void *>>>::operator()[abi:nn180100](v11, v10);
  _Unwind_Resume(a1);
}

void ___ZL25_LSPlistCreateTransformedP12NSDictionaryIP8NSStringP11objc_objectEPFS1_S1_PbES6__block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  id v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  char v37;

  v5 = a2;
  v6 = a3;
  (*(void (**)(id, uint64_t))(a1 + 48))(v5, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v34 = 0;
  v35 = &v34;
  v36 = 0x2020000000;
  v37 = 0;
  if (_NSIsNSArray())
  {
    v30 = 0;
    v31 = &v30;
    v32 = 0x2020000000;
    v33 = 0;
    v10 = MEMORY[0x1E0C809B0];
    v23 = MEMORY[0x1E0C809B0];
    v24 = 3221225472;
    v25 = ___ZL30_LSPlistCreateTransformedValueP11objc_objectPFP8NSStringS2_PbES3__block_invoke;
    v26 = &unk_1E1044838;
    v28 = &v30;
    v29 = v8;
    v27 = &v34;
    objc_msgSend(v6, "enumerateObjectsUsingBlock:", &v23);
    if (*((_BYTE *)v31 + 24))
    {
      v16 = v10;
      v17 = 3221225472;
      v18 = ___ZL30_LSPlistCreateTransformedValueP11objc_objectPFP8NSStringS2_PbES3__block_invoke_2;
      v19 = &unk_1E1044860;
      v21 = &v34;
      v22 = v8;
      v11 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v6, "count"));
      v20 = v11;
      objc_msgSend(v6, "enumerateObjectsUsingBlock:", &v16);
      v12 = objc_msgSend(v11, "copy", v16, v17, v18, v19);
LABEL_7:
      v14 = (id)v12;

      goto LABEL_9;
    }
    goto LABEL_8;
  }
  if (_NSIsNSDictionary())
  {
    v30 = 0;
    v31 = &v30;
    v32 = 0x2020000000;
    v33 = 0;
    v13 = MEMORY[0x1E0C809B0];
    v23 = MEMORY[0x1E0C809B0];
    v24 = 3221225472;
    v25 = ___ZL30_LSPlistCreateTransformedValueP11objc_objectPFP8NSStringS2_PbES3__block_invoke_3;
    v26 = &unk_1E1044888;
    v28 = &v30;
    v29 = v8;
    v27 = &v34;
    objc_msgSend(v6, "enumerateKeysAndObjectsUsingBlock:", &v23);
    if (*((_BYTE *)v31 + 24))
    {
      v16 = v13;
      v17 = 3221225472;
      v18 = ___ZL30_LSPlistCreateTransformedValueP11objc_objectPFP8NSStringS2_PbES3__block_invoke_4;
      v19 = &unk_1E1044810;
      v21 = &v34;
      v22 = v8;
      v11 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", objc_msgSend(v6, "count"));
      v20 = v11;
      objc_msgSend(v6, "enumerateKeysAndObjectsUsingBlock:", &v16);
      v12 = objc_msgSend(v11, "copy", v16, v17, v18, v19);
      goto LABEL_7;
    }
LABEL_8:
    v14 = 0;
LABEL_9:
    _Block_object_dispose(&v30, 8);
    if (v14)
      goto LABEL_11;
  }
  v14 = v6;
LABEL_11:
  if (*(_BYTE *)(v9 + 24))
    v15 = 1;
  else
    v15 = *((_BYTE *)v35 + 24) != 0;
  *(_BYTE *)(v9 + 24) = v15;
  _Block_object_dispose(&v34, 8);

  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v14, v7);
}

void sub_18288A7E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  va_list va;

  va_start(va, a15);

  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v18 - 112), 8);

  _Unwind_Resume(a1);
}

void sub_18288A8D0(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;
  void *v2;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_18288A9C8(_Unwind_Exception *a1)
{
  void *v1;
  os_unfair_lock_s *v2;
  void *v3;

  os_unfair_lock_unlock(v2);
  _Unwind_Resume(a1);
}

id _LSPlistDataGetValueForKey(NSData *a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v6;
  void *v7;
  uint64_t v9;

  v3 = 0;
  v9 = a2;
  if (a1 && a2)
  {
    v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E60]), "initWithObjects:count:", &v9, 1);
    _LSPlistDataGetValuesForKeys(a1, v6, a3);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "objectForKeyedSubscript:", v9);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v3;
}

void sub_18288AA7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18288AB20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _LSBundleCopyOrCheckNode(void *a1, unsigned int a2, int a3, int a4, void **a5)
{
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  void *v15;
  uint64_t v16;
  id v17;
  void *v18;
  NSObject *v19;
  NSObject *v20;
  BOOL v21;
  id v22;
  NSObject *v23;
  BOOL v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  id v30;
  void *v31;
  id v32;
  id v34;
  id v35;
  id v36;
  __int16 v37;
  uint8_t buf[4];
  const char *v39;
  __int16 v40;
  _WORD v41[9];

  *(_QWORD *)&v41[5] = *MEMORY[0x1E0C80C00];
  v9 = a1;
  v37 = 0;
  if (a5)
  {
    v10 = *a5;
    *a5 = 0;

  }
  v11 = _LSBundleGet(v9, a2);
  if (v11 && (v12 = *(unsigned int *)(v11 + 4), (v13 = _LSContainerGet()) != 0))
  {
    v14 = _LSContainerCheckState(v9, v12, v13, (_BYTE *)&v37 + 1, 0);
    if (!a4 || (v15 = 0, v16 = 4294967261, !v14) && HIBYTE(v37) == 1)
    {
      v36 = 0;
      _LSBundleCreateNode(v9, a2, a4 != 0, (BOOL *)&v37, &v36);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = v36;
      v18 = v17;
      if (v15)
      {
        v16 = 0;
      }
      else
      {
        v16 = _LSGetOSStatusFromNSError(v17);
        _LSDefaultLog();
        v19 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315650;
          v39 = "_LSBundleCopyOrCheckNode";
          v40 = 1026;
          *(_DWORD *)v41 = a2;
          v41[2] = 1024;
          *(_DWORD *)&v41[3] = v16;
          _os_log_impl(&dword_182882000, v19, OS_LOG_TYPE_DEFAULT, "%s: cached node not found, _LSBundleCreateNode for bundleID %{public}u returned %d", buf, 0x18u);
        }

      }
      if (a4 && !(_DWORD)v16 && (_BYTE)v37)
      {
        _LSDefaultLog();
        v20 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315394;
          v39 = "_LSBundleCopyOrCheckNode";
          v40 = 2112;
          *(_QWORD *)v41 = v15;
          _os_log_impl(&dword_182882000, v20, OS_LOG_TYPE_DEFAULT, "%s: cached node not found, registering new node %@", buf, 0x16u);
        }

        v35 = 0;
        v21 = _LSRegisterBundleNode(0, v15, 1u, 0, &v35);
        v22 = v35;
        if (!v21)
        {
          _LSDefaultLog();
          v23 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
            _LSBundleCopyOrCheckNode((uint64_t)v15, (uint64_t)v22, v23);

        }
      }

      if (v15)
        v24 = a5 != 0;
      else
        v24 = 0;
      if (v24)
      {
        if (a3)
        {
          v25 = (void *)_CSStringCopyCFString();
          v26 = _CSStringCopyCFString();
          v27 = (void *)v26;
          v16 = 4294957797;
          if (v25 && v26)
          {
            objc_msgSend(v25, "stringByAppendingString:", v26);
            v28 = (void *)objc_claimAutoreleasedReturnValue();
            if (v28)
            {
              v34 = 0;
              objc_msgSend(v15, "childNodeWithRelativePath:flags:error:", v28, 1, &v34);
              v29 = objc_claimAutoreleasedReturnValue();
              v30 = v34;
              v31 = *a5;
              *a5 = (void *)v29;

              if (*a5)
                v16 = 0;
              else
                v16 = _LSGetOSStatusFromNSError(v30);

            }
            else
            {
              v16 = 4294967255;
            }

          }
        }
        else
        {
          v32 = v15;
          v25 = *a5;
          *a5 = v32;
        }

      }
    }
  }
  else
  {
    v15 = 0;
    v16 = 4294956479;
  }

  return v16;
}

void sub_18288AEBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

uint64_t _LSContainerCheckState(void *a1, uint64_t a2, uint64_t Unit, _BYTE *a4, _QWORD *a5)
{
  id v9;
  uint64_t v10;
  __int128 v11;
  __int128 v13;
  int v14;

  v9 = a1;
  v10 = 4294967246;
  if (v9 && (_DWORD)a2)
  {
    if (!Unit)
    {
      Unit = CSStoreGetUnit();
      if (!Unit)
      {
        v10 = 4294967261;
        goto LABEL_14;
      }
    }
    if (*(_BYTE *)(Unit + 2))
    {
      v11 = *(_OWORD *)Unit;
      v14 = *(_DWORD *)(Unit + 16);
      v13 = v11;
    }
    else
    {
      v10 = _LSUpdateContainerState(v9, a2, (uint64_t)&v13);
      if ((_DWORD)v10)
        goto LABEL_14;
    }
    if (a4)
      *a4 = BYTE2(v13);
    v10 = 0;
    if (a5)
      *a5 = *(_QWORD *)((char *)&v13 + 4);
  }
LABEL_14:

  return v10;
}

void sub_18288B130(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _LSContainerGet()
{
  return CSStoreGetUnit();
}

BOOL _LSGetNSErrorFromOSStatusImpl(int a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  void *v7;
  void *v8;
  NSObject *v9;
  id v10;

  if (a1 && a2)
  {
    v6 = (a1 - 100000);
    if (v6 > 0x3E7)
    {
      if ((a1 + 3278) > 0x4E)
      {
        v7 = (void *)*MEMORY[0x1E0CB2F90];
        v6 = a1;
      }
      else
      {
        v7 = (void *)*MEMORY[0x1E0CB2FE0];
        v6 = (-3200 - a1);
      }
    }
    else
    {
      v7 = (void *)*MEMORY[0x1E0CB2FE0];
    }
    _LSMakeNSErrorImpl(v7, v6, a3, a4, 0);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    _LSErrorLog();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      _LSGetNSErrorFromOSStatusImpl_cold_1();

    v10 = objc_retainAutorelease(v8);
    *a2 = v10;

  }
  return a1 == 0;
}

uint64_t _LSAliasMatchesPath_NoIO(void *a1, int a2, void *a3, uint64_t a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  v7 = a1;
  v8 = a3;
  v9 = v8;
  if (v7)
  {
    if (v8)
      goto LABEL_3;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "BOOL _LSAliasMatchesPath_NoIO(__strong LSDatabaseRef, LSAliasID, NSString *__strong, LSAliasPathMatchType)");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "handleFailureInFunction:file:lineNumber:description:", v15, CFSTR("LSAlias.mm"), 235, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("inDB != nil"));

    if (v9)
      goto LABEL_3;
  }
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "BOOL _LSAliasMatchesPath_NoIO(__strong LSDatabaseRef, LSAliasID, NSString *__strong, LSAliasPathMatchType)");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "handleFailureInFunction:file:lineNumber:description:", v17, CFSTR("LSAlias.mm"), 236, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("inPath != nil"));

LABEL_3:
  _LSAliasGet(v7, a2);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = v10;
  if (v10)
    v12 = _LSAliasDataMatchesPath_NoIO(v10, v9, a4);
  else
    v12 = 0;

  return v12;
}

void sub_18288B3BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t _LSAliasDataMatchesPath_NoIO(void *a1, void *a2, uint64_t a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  v5 = a1;
  v6 = a2;
  v7 = v6;
  if (v5)
  {
    if (v6)
      goto LABEL_3;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "BOOL _LSAliasDataMatchesPath_NoIO(NSData *__strong, NSString *__strong, LSAliasPathMatchType)");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "handleFailureInFunction:file:lineNumber:description:", v18, CFSTR("LSUtils.mm"), 783, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("inAlias != nil"));

    if (v7)
      goto LABEL_3;
  }
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "BOOL _LSAliasDataMatchesPath_NoIO(NSData *__strong, NSString *__strong, LSAliasPathMatchType)");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "handleFailureInFunction:file:lineNumber:description:", v20, CFSTR("LSUtils.mm"), 784, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("inPath != nil"));

LABEL_3:
  v8 = (void *)MEMORY[0x186DAE7A0]();
  +[FSNode pathForBookmarkData:error:](FSNode, "pathForBookmarkData:error:", v5, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v9)
    goto LABEL_9;
  if (!a3)
  {
    while ((objc_msgSend(v7, "hasSuffix:", CFSTR("/")) & 1) != 0)
    {
      objc_msgSend(v7, "stringByReplacingCharactersInRange:withString:", objc_msgSend(v7, "length") - 1, 1, &stru_1E10473A0);
      v14 = objc_claimAutoreleasedReturnValue();

      v7 = (void *)v14;
    }
    while (objc_msgSend(v9, "hasSuffix:", CFSTR("/")))
    {
      objc_msgSend(v9, "stringByReplacingCharactersInRange:withString:", objc_msgSend(v9, "length") - 1, 1, &stru_1E10473A0);
      v15 = objc_claimAutoreleasedReturnValue();

      v9 = (void *)v15;
    }
  }
  v10 = v9;
  v11 = v7;
  switch(a3)
  {
    case 2:
LABEL_15:
      v12 = objc_msgSend(v10, "hasPrefix:", v11);
      goto LABEL_16;
    case 1:
      v10 = v7;
      v11 = v9;
      goto LABEL_15;
    case 0:
      v12 = objc_msgSend(v7, "isEqual:", v9);
LABEL_16:
      v13 = v12;
      goto LABEL_17;
  }
LABEL_9:
  v13 = 0;
LABEL_17:

  objc_autoreleasePoolPop(v8);
  return v13;
}

void sub_18288B65C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18288B84C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id _LSBundleCreateNode(void *a1, unsigned int a2, int a3, BOOL *a4, _QWORD *a5)
{
  id v9;
  void *v10;
  id v11;
  int *v12;
  int *v13;
  void *v14;
  void *v15;
  BOOL v16;
  void *v17;
  int *v18;
  BOOL v19;
  uint64_t v20;
  int v21;
  void *v22;
  BOOL v24;

  v9 = a1;
  v10 = v9;
  v24 = 0;
  if (a3)
  {
    v11 = v9;
    v12 = (int *)_LSBundleGet(v11, a2);
    v13 = v12;
    if (v12 && (_LSAliasGetPath(v11, *v12), (v14 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
    {
      v15 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E98]), "initFileURLWithPath:isDirectory:", v14, (v13[46] >> 3) & 1);
      v16 = +[FSNode canReadMetadataOfURL:fromSandboxWithAuditToken:](FSNode, "canReadMetadataOfURL:fromSandboxWithAuditToken:", v15, 0);

      if (!v16)
      {
        if (a5)
        {
          _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], -43, (uint64_t)"_LSBundleCreateNode", 1594, 0);
          v17 = 0;
          *a5 = (id)objc_claimAutoreleasedReturnValue();
          goto LABEL_20;
        }
LABEL_19:
        v17 = 0;
        goto LABEL_20;
      }
    }
    else
    {

    }
  }
  v18 = (int *)_LSBundleGet(v10, a2);
  v17 = _LSAliasCopyResolvedNode(v10, *v18, 0, (uint64_t)&v24, a5);
  if (!v17)
  {
    v20 = _LSContainerGet();
    if (!v20)
      goto LABEL_19;
    v21 = *(_DWORD *)(v20 + 12);
    if (!v21)
      goto LABEL_19;
    v22 = _LSAliasCopyResolvedNode(v10, v21, 0, (uint64_t)&v24, a5);
    if (!v22)
      goto LABEL_19;
    v17 = _LSAliasCopyResolvedNode(v10, *v18, v22, (uint64_t)&v24, a5);
    if (!v17)
    {

      goto LABEL_20;
    }

  }
  v19 = v24;
  if (a3 && !v24)
  {
    v19 = _LSNodeHasChanged(v17, (uint64_t)v10, a2, (uint64_t)v18, 0) != 0;
    v24 = v19;
  }
  if (a4)
    *a4 = v19;
LABEL_20:

  return v17;
}

void sub_18288BA80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void *_LSAliasCopyResolvedNode(void *a1, int a2, void *a3, uint64_t a4, _QWORD *a5)
{
  id v9;
  void *v10;
  id v11;
  void *v12;
  id v13;

  v9 = a3;
  _LSAliasGet(a1, a2);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (v10)
  {
    v11 = -[FSNode initByResolvingBookmarkData:relativeToNode:bookmarkDataIsStale:error:]([FSNode alloc], "initByResolvingBookmarkData:relativeToNode:bookmarkDataIsStale:error:", v10, v9, a4, a5);
    v12 = v11;
    if (v11)
      v13 = v11;

  }
  else if (a5)
  {
    _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], -9499, (uint64_t)"_LSAliasCopyResolvedNode", 301, 0);
    v12 = 0;
    *a5 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v12 = 0;
  }

  return v12;
}

void sub_18288BBA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18288BD84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18288BEE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18288C2AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id _LSDatabaseGetStringArray(void *a1)
{
  id v1;
  void *v2;
  id v3;
  id v5;
  id v6;

  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", _CSArrayGetCount());
  v5 = v1;
  v6 = v2;
  _CSArrayEnumerateAllValues();
  v3 = v6;

  return v3;
}

void sub_18288C3F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

id _LSPlistDataGetValuesForKeys(NSData *a1, void *a2, uint64_t a3)
{
  _BOOL4 v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t j;
  void *v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t k;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSString *v29;
  NSString *v30;
  void *v31;
  void *v32;
  void *v33;
  id v34;
  id v35;
  void *Transformed;
  id v37;
  NSObject *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *context;
  id v48;
  id v50;
  id obj;
  void *v53;
  _QWORD v54[5];
  BOOL v55;
  BOOL v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  BOOL v61;
  id v62;
  _BYTE v63[128];
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v50 = a2;
  v48 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", objc_msgSend(v50, "count"));
  if (a1 && v50)
  {
    context = (void *)MEMORY[0x186DAE7A0]();
    v56 = 0;
    _LSPlistDataIsBinary(a1, &v56);
    if (!a3)
    {
      v11 = v50;
      goto LABEL_19;
    }
    v3 = v56;
    -[_LSPlistHint completeDictionary](a3);
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    if (v53)
    {
      v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", objc_msgSend(v50, "count"));
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v5 = v50;
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v57, v63, 16);
      if (v6)
      {
        v7 = *(_QWORD *)v58;
        do
        {
          for (i = 0; i != v6; ++i)
          {
            if (*(_QWORD *)v58 != v7)
              objc_enumerationMutation(v5);
            v9 = *(_QWORD *)(*((_QWORD *)&v57 + 1) + 8 * i);
            objc_msgSend(v53, "objectForKeyedSubscript:", v9);
            v10 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v4, "setObject:forKeyedSubscript:", v10, v9);

          }
          v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v57, v63, 16);
        }
        while (v6);
      }

      v11 = 0;
      v12 = 0;
      goto LABEL_13;
    }
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    obj = v50;
    v12 = 0;
    v4 = 0;
    v26 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v57, v63, 16);
    if (!v26)
    {
LABEL_60:

      if (objc_msgSend(v12, "count"))
      {
        v33 = (void *)objc_msgSend(obj, "mutableCopy");
        v11 = v33;
        if (v12)
          objc_msgSend(v33, "minusSet:", v12);
        if (!v3)
          objc_msgSend(v11, "intersectSet:", *(_QWORD *)(a3 + 8));
      }
      else
      {
        v11 = obj;
      }
LABEL_13:

      if (v4)
        objc_msgSend(v48, "addEntriesFromDictionary:", v4);

      if (!v11)
        goto LABEL_23;
LABEL_19:
      if (!objc_msgSend(v11, "count"))
      {
LABEL_23:
        v13 = 0;
LABEL_81:

        objc_autoreleasePoolPop(context);
        goto LABEL_82;
      }
      if (_NSIsNSString())
      {
        if (objc_msgSend(v11, "containsString:", CFSTR(":")))
        {
LABEL_76:
          v41 = (void *)MEMORY[0x186DAE7A0]();
          _LSPlistRestore(a1);
          v42 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v11, "allObjects");
          v43 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v42, "dictionaryWithValuesForKeys:", v43);
          v13 = (id)objc_claimAutoreleasedReturnValue();

          objc_autoreleasePoolPop(v41);
          _LSDefaultLog();
          v38 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
          {
            objc_msgSend(v11, "allObjects");
            v44 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v44, "componentsJoinedByString:", CFSTR(", "));
            v45 = (void *)objc_claimAutoreleasedReturnValue();
            _LSPlistDataGetValuesForKeys_cold_1(v45, (uint64_t)v63, v38, v44);
          }
LABEL_78:

          if (v13)
          {
            objc_msgSend(v48, "addEntriesFromDictionary:", v13);
            if (a3)
            {
              v54[0] = MEMORY[0x1E0C809B0];
              v54[1] = 3221225472;
              v54[2] = ___LSPlistDataGetValuesForKeys_block_invoke;
              v54[3] = &unk_1E10447C8;
              v55 = v56;
              v54[4] = a3;
              objc_msgSend(v13, "enumerateKeysAndObjectsUsingBlock:", v54);
            }
          }
          goto LABEL_81;
        }
      }
      else if ((_NSIsNSSet() & 1) != 0)
      {
        v59 = 0u;
        v60 = 0u;
        v57 = 0u;
        v58 = 0u;
        v14 = v11;
        v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v57, v63, 16);
        if (v15)
        {
          v16 = *(_QWORD *)v58;
          while (2)
          {
            for (j = 0; j != v15; ++j)
            {
              if (*(_QWORD *)v58 != v16)
                objc_enumerationMutation(v14);
              if ((objc_msgSend(*(id *)(*((_QWORD *)&v57 + 1) + 8 * j), "containsString:", CFSTR(":")) & 1) != 0)
              {

                goto LABEL_76;
              }
            }
            v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v57, v63, 16);
            if (v15)
              continue;
            break;
          }
        }

      }
      v62 = 0;
      v61 = 0;
      _LSPlistGetSubdataForFCF(a1, &v61);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      if (v61)
      {
        v19 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E20]), "initWithCapacity:", objc_msgSend(v11, "count"));
        v59 = 0u;
        v60 = 0u;
        v57 = 0u;
        v58 = 0u;
        v20 = v11;
        v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v57, v63, 16);
        if (v21)
        {
          v22 = *(_QWORD *)v58;
          do
          {
            for (k = 0; k != v21; ++k)
            {
              if (*(_QWORD *)v58 != v22)
                objc_enumerationMutation(v20);
              _LSPlistCompactString(*(NSString **)(*((_QWORD *)&v57 + 1) + 8 * k), 0);
              v24 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v19, "addObject:", v24);

            }
            v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v57, v63, 16);
          }
          while (v21);
        }

        v25 = v19;
      }
      else
      {
        v25 = 0;
      }
      if (_CFPropertyListCreateFiltered() && (_NSIsNSDictionary() & 1) == 0)
      {
        v34 = v62;
        v62 = 0;

      }
      v35 = v62;
      if (v62 && v61)
      {
        Transformed = (void *)_LSPlistCreateTransformed(v62, (uint64_t)_LSPlistRestoreString, 0);
        v37 = v62;
        v62 = Transformed;

        v35 = v62;
      }
      v13 = v35;

      _LSDefaultLog();
      v38 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
      {
        objc_msgSend(v11, "allObjects");
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v39, "componentsJoinedByString:", CFSTR(", "));
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        _LSPlistDataGetValuesForKeys_cold_2(v40, (uint64_t)v63, v38, v39);
      }
      goto LABEL_78;
    }
    v27 = *(_QWORD *)v58;
LABEL_45:
    v28 = 0;
    while (1)
    {
      if (*(_QWORD *)v58 != v27)
        objc_enumerationMutation(obj);
      v29 = (NSString *)*(id *)(*((_QWORD *)&v57 + 1) + 8 * v28);
      v30 = v29;
      v31 = v29;
      if (v3)
      {
        _LSPlistCompactString(v29, 0);
        v31 = (void *)objc_claimAutoreleasedReturnValue();

      }
      -[_LSPlistHint cachedValueForKey:](a3, (uint64_t)v31);
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      if (v32)
        break;
      if ((objc_msgSend(*(id *)(a3 + 8), "containsObject:", v31) & 1) == 0)
        goto LABEL_55;
LABEL_58:

      if (v26 == ++v28)
      {
        v26 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v57, v63, 16);
        if (!v26)
          goto LABEL_60;
        goto LABEL_45;
      }
    }
    if (!v4)
      v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", objc_msgSend(obj, "count"));
    objc_msgSend(v4, "setObject:forKeyedSubscript:", v32, v30);
LABEL_55:
    if (!v12)
      v12 = objc_alloc_init(MEMORY[0x1E0C99E20]);
    objc_msgSend(v12, "addObject:", v30);
    goto LABEL_58;
  }
  v11 = v50;
LABEL_82:

  return v48;
}

void sub_18288CBB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_18288CDCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

NSString *_LSPlistCompactString(NSString *a1, BOOL *a2)
{
  NSUInteger v4;
  void *v5;
  unint64_t v6;
  NSString *v7;
  void *v8;
  uint64_t v9;

  v4 = -[NSString length](a1, "length");
  if (!a1)
    goto LABEL_14;
  if (!v4)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithCharacters:length:", &_LSPlistEscapeCharacter, 1);
    v7 = (NSString *)objc_claimAutoreleasedReturnValue();
    if (v7)
      goto LABEL_10;
LABEL_14:
    v7 = a1;
    return v7;
  }
  if (-[NSString characterAtIndex:](a1, "characterAtIndex:", 0) == 8
    || _LSPlistLookUpIndexOfCompactedString(a1) != 0x7FFFFFFFFFFFFFFFLL)
  {
    objc_msgSend(MEMORY[0x1E0CB37A0], "stringWithCapacity:", -[NSString length](a1, "length") + 1);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithCharacters:length:", &_LSPlistEscapeCharacter, 1);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "appendString:", v8);

    objc_msgSend(v5, "appendString:", a1);
    v9 = objc_msgSend(v5, "copy");
  }
  else
  {
    _LSPlistGetCommonStrings();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "indexOfObject:", a1);
    if (v6 == 0x7FFFFFFFFFFFFFFFLL)
    {
      v7 = 0;
      goto LABEL_9;
    }
    _LSPlistLookUpCompactedStringByIndex(v6);
    v9 = objc_claimAutoreleasedReturnValue();
  }
  v7 = (NSString *)v9;
LABEL_9:

  if (!v7)
    goto LABEL_14;
LABEL_10:
  if (a2 && v7 != a1)
    *a2 = 1;
  return v7;
}

void sub_18288CF2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id _LSPlistGetCommonStrings(void)
{
  if (_LSPlistGetCommonStrings(void)::once != -1)
    dispatch_once(&_LSPlistGetCommonStrings(void)::once, &__block_literal_global_26);
  return (id)_LSPlistGetCommonStrings(void)::result;
}

NSString *_LSPlistRestoreString(NSString *a1, BOOL *a2)
{
  NSUInteger v4;
  NSString *v5;
  uint64_t v6;
  unint64_t v7;
  void *v8;

  v4 = -[NSString length](a1, "length");
  if (!a1 || !v4)
    goto LABEL_14;
  if (-[NSString characterAtIndex:](a1, "characterAtIndex:", 0) == 8)
  {
    -[NSString substringFromIndex:](a1, "substringFromIndex:", 1);
    v5 = (NSString *)objc_claimAutoreleasedReturnValue();
    if (!v5)
    {
LABEL_14:
      v5 = a1;
      return v5;
    }
  }
  else
  {
    v6 = _LSPlistLookUpIndexOfCompactedString(a1);
    if (v6 == 0x7FFFFFFFFFFFFFFFLL)
      goto LABEL_14;
    v7 = v6;
    _LSPlistGetCommonStrings();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if (v7 >= objc_msgSend(v8, "count"))
    {
      v5 = 0;
    }
    else
    {
      objc_msgSend(v8, "objectAtIndexedSubscript:", v7);
      v5 = (NSString *)objc_claimAutoreleasedReturnValue();
    }

    if (!v5)
      goto LABEL_14;
  }
  if (a2 && v5 != a1)
    *a2 = 1;
  return v5;
}

void sub_18288D068(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _LSPlistLookUpIndexOfCompactedString(NSString *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;

  if (_LSPlistLookUpIndexOfCompactedString(NSString *)::once != -1)
    dispatch_once(&_LSPlistLookUpIndexOfCompactedString(NSString *)::once, &__block_literal_global_55);
  objc_msgSend((id)_LSPlistLookUpIndexOfCompactedString(NSString *)::indexes, "objectForKeyedSubscript:", a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (v2)
    v4 = objc_msgSend(v2, "unsignedIntegerValue");
  else
    v4 = 0x7FFFFFFFFFFFFFFFLL;

  return v4;
}

void sub_18288D0F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id _LSPlistLookUpCompactedStringByIndex(unint64_t a1)
{
  void *v2;

  if (_LSPlistLookUpCompactedStringByIndex(unsigned long)::once != -1)
    dispatch_once(&_LSPlistLookUpCompactedStringByIndex(unsigned long)::once, &__block_literal_global_543_0);
  if (objc_msgSend((id)_LSPlistLookUpCompactedStringByIndex(unsigned long)::strings, "count") <= a1)
  {
    v2 = 0;
  }
  else
  {
    objc_msgSend((id)_LSPlistLookUpCompactedStringByIndex(unsigned long)::strings, "objectAtIndexedSubscript:", a1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  return v2;
}

id _LSPlistGet(uint64_t a1, unsigned int a2)
{
  void *DataWithUnitNoCopy;
  NSObject *v5;
  int v7;
  void *v8;
  __int16 v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  DataWithUnitNoCopy = 0;
  v13 = *MEMORY[0x1E0C80C00];
  if (a1 && a2)
  {
    DataWithUnitNoCopy = (void *)_CSStoreCreateDataWithUnitNoCopy();
    _LSDefaultLog();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      v7 = 134218496;
      v8 = DataWithUnitNoCopy;
      v9 = 2048;
      v10 = a2;
      v11 = 2048;
      v12 = a1;
      _os_log_debug_impl(&dword_182882000, v5, OS_LOG_TYPE_DEBUG, "Got plist data %p for unit %llx from database %p", (uint8_t *)&v7, 0x20u);
    }

  }
  return DataWithUnitNoCopy;
}

void sub_18288D2B4(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

id _LSDefaultLog()
{
  if (_LSDefaultLog_onceToken != -1)
    dispatch_once(&_LSDefaultLog_onceToken, &__block_literal_global_50);
  return (id)_LSDefaultLog_log;
}

void sub_18288D358(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18288D3F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

NSData *_LSPlistGetSubdataForFCF(NSData *a1, BOOL *a2)
{
  id v4;
  NSData *v5;
  NSData *v6;
  BOOL v8;

  v8 = 0;
  _LSPlistDataIsBinary(a1, &v8);
  if (!v8)
  {
    v6 = a1;
    if (!a2)
      return v6;
    goto LABEL_3;
  }
  v4 = objc_alloc(MEMORY[0x1E0C99D50]);
  v5 = objc_retainAutorelease(a1);
  v6 = (NSData *)objc_msgSend(v4, "initWithBytesNoCopy:length:freeWhenDone:", -[NSData bytes](v5, "bytes") + 4, -[NSData length](v5, "length") - 4, 0);
  if (a2)
LABEL_3:
    *a2 = v8;
  return v6;
}

void sub_18288D580(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

NSUInteger _LSPlistDataIsBinary(NSData *a1, BOOL *a2)
{
  NSUInteger result;
  BOOL v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  result = -[NSData length](a1, "length");
  if (result < 0xA)
  {
    v6 = 0;
    if (!a2)
      return result;
    goto LABEL_11;
  }
  result = -[NSData getBytes:length:](a1, "getBytes:length:", &v7, 10);
  v6 = v7 == 0x696C706268636E6CLL && v8 == 29811;
  if (a2)
LABEL_11:
    *a2 = v6;
  return result;
}

id _LSAliasGet(void *a1, int a2)
{
  id v3;
  void *Unit;
  void *v5;
  NSObject *v6;
  uint8_t buf[4];
  void *v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (a2)
  {
    Unit = (void *)CSStoreGetUnit();
    if (Unit)
    {
      v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytesNoCopy:length:freeWhenDone:", Unit, 0, 0);
      Unit = v5;
      if (v5)
      {
        if (objc_msgSend(v5, "length"))
        {
          _LSDefaultLog();
          v6 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218496;
            v9 = Unit;
            v10 = 2048;
            v11 = objc_msgSend(Unit, "length");
            v12 = 2048;
            v13 = 0;
            _os_log_error_impl(&dword_182882000, v6, OS_LOG_TYPE_ERROR, "bad alias at %p, size %ld, CSStore size %lu\n", buf, 0x20u);
          }
          goto LABEL_11;
        }
        if ((unint64_t)objc_msgSend(Unit, "length") > 0x2000)
        {
          _LSDefaultLog();
          v6 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
            _LSAliasGet_cold_1((uint64_t)Unit, buf, objc_msgSend(Unit, "length"), v6);
LABEL_11:

        }
      }
    }
  }
  else
  {
    Unit = 0;
  }

  return Unit;
}

void sub_18288D7E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void ___ZN14LaunchServices17BindingEvaluationL22addBundlesInBindingMapERNS0_5StateE14LSBindingMapIDj_block_invoke(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int v3;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v3 = a3 & 0xFFFFFFFC;
  if ((a3 & 0xFFFFFFFC) != 0)
  {
    v5 = _LSBundleGet(***(void ****)(a1 + 32), a3 & 0xFFFFFFFC);
    if (v5)
    {
      v14 = 0u;
      v15 = 0u;
      v12 = 0u;
      v13 = 0u;
      v11 = 0u;
      *(_QWORD *)&v10 = v3;
      *((_QWORD *)&v10 + 1) = v5;
      v6 = *(_QWORD *)(a1 + 32);
      if (LaunchServices::BindingEvaluation::gIsReasonTrackingEnabled || (*(_BYTE *)(v6 + 118) & 2) != 0)
      {
        _LSDatabaseGetBindingMapDebugName(**(_QWORD **)v6, *(_DWORD *)(a1 + 40));
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(CFSTR("Bundle in binding map "), "stringByAppendingString:", v7, v10, v11, (_QWORD)v12);
        v8 = objc_claimAutoreleasedReturnValue();
        v9 = (void *)*((_QWORD *)&v12 + 1);
        *((_QWORD *)&v12 + 1) = v8;

        v6 = *(_QWORD *)(a1 + 32);
      }
      LaunchServices::BindingEvaluation::pushBackBinding((LaunchServices::BindingEvaluation *)v6, (uint64_t *)(v6 + 176), (LaunchServices::BindingEvaluation::State *)&v10);

    }
  }
}

void sub_18288D958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  void *v9;

  LaunchServices::BindingEvaluation::ExtendedBinding::~ExtendedBinding(&a9);
  _Unwind_Resume(a1);
}

uint64_t _LSBundleGet(void *a1, int a2)
{
  _QWORD *v3;
  uint64_t Unit;
  NSObject *v5;
  uint64_t v6;
  _DWORD v8[2];
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  Unit = 0;
  if (v3)
  {
    if (a2)
    {
      Unit = CSStoreGetUnit();
      if (!Unit)
      {
        _LSRegistrationLog();
        v5 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        {
          v6 = v3[1];
          v8[0] = 67240451;
          v8[1] = a2;
          v9 = 2113;
          v10 = v6;
          _os_log_impl(&dword_182882000, v5, OS_LOG_TYPE_ERROR, "Failed to get unit %{public}d from store %{private}@", (uint8_t *)v8, 0x12u);
        }

        Unit = 0;
      }
    }
  }

  return Unit;
}

void sub_18288DA90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *_LSPlistDataGetHint(void *a1)
{
  NSData *v1;
  NSObject *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  _LSPlistHint *v7;
  _QWORD *v8;
  BOOL v10;

  v1 = a1;
  _LSDefaultLog();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    _LSPlistDataGetHint_cold_1((uint64_t)v1, v2, v3);

  if (v1)
  {
    v4 = (void *)MEMORY[0x186DAE7A0]();
    v10 = 0;
    _LSPlistGetSubdataForFCF(v1, &v10);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    v6 = (void *)_CFPropertyListCopyTopLevelKeys();
    if (v6)
    {
      v7 = [_LSPlistHint alloc];
      v8 = -[_LSPlistHint initWithKeys:compacted:](v7, v6, v10);
    }
    else
    {
      v8 = 0;
    }

    objc_autoreleasePoolPop(v4);
  }
  else
  {
    v8 = 0;
    v5 = 0;
  }

  return v8;
}

void sub_18288DB98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18288DC64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _LSPlistCreateTransformed(void *a1, uint64_t a2, BOOL *a3)
{
  void *v6;
  id v7;
  uint64_t v8;
  BOOL v9;
  _QWORD v11[4];
  id v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  char v18;

  v15 = 0;
  v16 = &v15;
  v17 = 0x2020000000;
  v18 = 0;
  v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", objc_msgSend(a1, "count"));
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = ___ZL25_LSPlistCreateTransformedP12NSDictionaryIP8NSStringP11objc_objectEPFS1_S1_PbES6__block_invoke;
  v11[3] = &unk_1E1044810;
  v13 = &v15;
  v14 = a2;
  v7 = v6;
  v12 = v7;
  objc_msgSend(a1, "enumerateKeysAndObjectsUsingBlock:", v11);
  v8 = objc_msgSend(v7, "copy");

  if (a3)
  {
    v9 = *a3 || *((_BYTE *)v16 + 24) != 0;
    *a3 = v9;
  }
  _Block_object_dispose(&v15, 8);
  return v8;
}

void sub_18288DD80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  va_list va;

  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18288DF0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL _LSBundleFindWithInfoAndNo_IOFilter(uint64_t a1, NSString *a2, void *a3, int a4, _OWORD *a5, int a6, int a7, void *a8, void *a9, _DWORD *a10, _QWORD *a11, _QWORD *a12)
{
  LaunchServices::BindingEvaluator *v18;
  id v19;
  id v20;
  __int128 v21;
  _DWORD *v22;
  _BOOL8 v23;
  void *v25;
  _QWORD v26[4];
  id v27;
  uint64_t v28;
  const __CFString *v29;
  _OWORD v30[2];
  void *__p;
  void *v32;
  _DWORD *v33;
  id v34;
  id v35;
  char v36;
  _BYTE v37[168];
  char v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v18 = a3;
  v19 = a8;
  v20 = a9;
  v37[0] = 0;
  v38 = 0;
  if (a4)
  {
    if (!a12)
    {
LABEL_19:
      v23 = 0;
      goto LABEL_20;
    }
    _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], -4, (uint64_t)"_LSBundleFindWithInfoAndNo_IOFilter", 773, 0);
    *a12 = (id)objc_claimAutoreleasedReturnValue();
  }
  else if (v18 || (_DWORD)a2 && (_DWORD)a2 != 1061109567)
  {
    v21 = a5[1];
    v30[0] = *a5;
    v30[1] = v21;
    LaunchServices::BindingEvaluator::CreateWithBundleInfo(v18, 0, a2, 0, v30, (uint64_t)&__p);
    std::optional<LaunchServices::BindingEvaluator>::operator=[abi:nn180100]<LaunchServices::BindingEvaluator,void>((LaunchServices::BindingEvaluator *)v37, (const LaunchServices::BindingEvaluator *)&__p);
    LaunchServices::BindingEvaluator::~BindingEvaluator((LaunchServices::BindingEvaluator *)&__p);
  }
  else if (a12)
  {
    v28 = *MEMORY[0x1E0CB2938];
    v29 = CFSTR("inBundleID || inHFSCreator");
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v29, &v28, 1);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], -50, (uint64_t)"_LSBundleFindWithInfoAndNo_IOFilter", 779, v25);
    *a12 = (id)objc_claimAutoreleasedReturnValue();

  }
  if (!v38)
    goto LABEL_19;
  LaunchServices::BindingEvaluator::setLimit((uint64_t)v37, 1uLL);
  LaunchServices::BindingEvaluator::setOptions((uint64_t)v37, a7);
  v22 = operator new(4uLL);
  __p = v22;
  *v22 = a6;
  v32 = v22 + 1;
  v33 = v22 + 1;
  LaunchServices::BindingEvaluator::setAllowedBundleClasses((uint64_t)v37, (uint64_t)&__p);
  if (__p)
  {
    v32 = __p;
    operator delete(__p);
  }
  if (v20)
  {
    v26[0] = MEMORY[0x1E0C809B0];
    v26[1] = 3221225472;
    v26[2] = ___LSBundleFindWithInfoAndNo_IOFilter_block_invoke;
    v26[3] = &unk_1E1041B40;
    v27 = v20;
    LaunchServices::BindingEvaluator::setFilter((uint64_t)v37, v19, v26);

  }
  LaunchServices::BindingEvaluator::getBestBinding((LaunchServices::BindingEvaluator *)v37, (uint64_t *)&__p);
  v23 = v36 != 0;
  if (v36)
  {
    if (a10)
      *a10 = (_DWORD)__p;
    if (a11)
      *a11 = v32;

  }
  if (v38)
    LaunchServices::BindingEvaluator::~BindingEvaluator((LaunchServices::BindingEvaluator *)v37);
LABEL_20:

  return v23;
}

void sub_18288E5AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a64;
  void *v64;
  void *v65;
  void *v66;
  void *v67;

  if (a64)
    LaunchServices::BindingEvaluator::~BindingEvaluator((LaunchServices::BindingEvaluator *)&a43);

  _Unwind_Resume(a1);
}

void LaunchServices::BindingEvaluator::~BindingEvaluator(id *this)
{
  NSObject *v2;
  NSString *v3;
  id v4;
  uint8_t buf[4];
  id *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  _LSBindingLog();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    v6 = this;
    _os_log_impl(&dword_182882000, v2, OS_LOG_TYPE_DEBUG, "BindingEvaluator::~BindingEvaluator(%p)", buf, 0xCu);
  }

  LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)CFSTR("Destroying binding evaluator %p"), v3, this);
  v4 = this[14];
  if (v4)
  {
    this[15] = v4;
    operator delete(v4);
  }

}

void sub_18288E748(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 112);
  if (v3)
  {
    *(_QWORD *)(v1 + 120) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(a1);
}

uint64_t *LaunchServices::BindingEvaluator::getBestBinding@<X0>(LaunchServices::BindingEvaluator *a1@<X0>, uint64_t *a2@<X8>)
{
  return LaunchServices::BindingEvaluator::getBestBinding(a2, a1);
}

void LaunchServices::BindingEvaluator::getBestBinding(uint64_t *__return_ptr a1@<X8>, LaunchServices::BindingEvaluator *a2@<X0>, LSContext *a3@<X1>, void **a4@<X2>, _QWORD *a5@<X3>)
{
  uint64_t v9;
  void *v10;
  id **v11;
  NSObject *v12;
  _LSBindingForLog *v13;
  _LSBindingForLog *v14;
  NSString *v15;
  id **v16[4];
  _BYTE buf[12];
  __int16 v18;
  _LSBindingForLog *v19;
  uint64_t v20;
  id v21[21];
  id v22[13];

  v22[12] = *(id *)MEMORY[0x1E0C80C00];
  *(_BYTE *)a1 = 0;
  *((_BYTE *)a1 + 48) = 0;
  LaunchServices::BindingEvaluation::State::State((LaunchServices::BindingEvaluation::State *)&v20, a3, a2);
  if (a4)
  {
    LaunchServices::BindingEvaluation::State::getTypeRecord((LaunchServices::BindingEvaluation::State *)&v20);
    v9 = objc_claimAutoreleasedReturnValue();
    v10 = *a4;
    *a4 = (void *)v9;

  }
  v21[12] = (id)1;
  LaunchServices::BindingEvaluation::runEvaluator(&v20, a5, (uint64_t *)v16);
  v11 = v16[0];
  if (v16[0] != v16[1])
  {
    _LSBindingLog();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      v13 = -[_LSBindingForLog initWithState:binding:]([_LSBindingForLog alloc], "initWithState:binding:", &v20, v11);
      *(_DWORD *)buf = 134349315;
      *(_QWORD *)&buf[4] = a2;
      v18 = 2113;
      v19 = v13;
      _os_log_impl(&dword_182882000, v12, OS_LOG_TYPE_DEBUG, "Best binding found for evaluator %{public}p: %{private}@", buf, 0x16u);

    }
    v14 = -[_LSBindingForLog initWithState:binding:]([_LSBindingForLog alloc], "initWithState:binding:", &v20, v11);
    LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)CFSTR("Best binding found for evaluator %p: %@"), v15, a2, v14);

    std::optional<LSBinding>::operator=[abi:nn180100]<LaunchServices::BindingEvaluation::ExtendedBinding const&,void>((uint64_t)a1, (uint64_t)v11);
  }
  *(_QWORD *)buf = v16;
  std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__destroy_vector::operator()[abi:nn180100]((id ***)buf);

  v16[0] = (id **)v22;
  std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__destroy_vector::operator()[abi:nn180100](v16);
  LaunchServices::BindingEvaluator::~BindingEvaluator(v21);
}

void sub_18288E9A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  void *v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id **v11;
  va_list va1;
  uint64_t v13;
  uint64_t v14;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, id **);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);

  va_copy((va_list)v11, va);
  std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__destroy_vector::operator()[abi:nn180100]((id ***)va1);
  LaunchServices::BindingEvaluation::State::~State((id *)va2);
  std::__optional_destruct_base<LSBinding,false>::~__optional_destruct_base[abi:nn180100](v3);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t LaunchServices::BindingEvaluation::isBindingOK_NoIO(LaunchServices::BindingEvaluation *this, LaunchServices::BindingEvaluation::State *a2, const LaunchServices::BindingEvaluation::ExtendedBinding *a3)
{
  uint64_t result;
  void *v6;
  uint64_t (**v7)(_QWORD, _QWORD, _QWORD);
  _LSBindingForLog *v8;
  NSString *v9;
  _LSBindingForLog *v10;
  NSString *v11;
  uint64_t v12;
  const char *v13;
  NSString *v14;
  _DWORD *v15;
  _DWORD *v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  _LSBindingForLog *v20;
  NSString *v21;
  uint64_t v22;
  int v23;
  _DWORD *v24;
  _DWORD *v25;
  _LSBindingForLog *v26;
  NSString *v27;
  NSString *v28;
  _DWORD *v29;
  _DWORD *v30;
  NSString *v31;
  uint64_t v32;
  const char *v33;
  NSString *v34;
  _LSBindingForLog *v35;
  NSString *v36;
  _OWORD v37[2];
  _OWORD v38[2];
  _OWORD v39[2];
  _OWORD v40[2];
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)a2 + 91))
  {
    v6 = (void *)*((_QWORD *)this + 21);
    v7 = (uint64_t (**)(_QWORD, _QWORD, _QWORD))MEMORY[0x186DAE9BC](*((_QWORD *)this + 20));

    if (v7
      && (((uint64_t (**)(_QWORD, _QWORD, LaunchServices::BindingEvaluation::State *))v7)[2](v7, *(_QWORD *)this, a2) & 1) == 0)
    {
      v12 = objc_msgSend(objc_retainAutorelease(v6), "UTF8String");
      if (v12)
        v13 = (const char *)v12;
      else
        v13 = "caller-supplied no-I/O filter";
      v8 = -[_LSBindingForLog initWithState:binding:]([_LSBindingForLog alloc], "initWithState:binding:", this, a2);
      LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)CFSTR("%s: %@ FILTERED"), v14, v13, v8);
      goto LABEL_15;
    }
    if ((*((_BYTE *)this + 117) & 0x80) != 0)
    {
      result = 1;
LABEL_17:
      *((_WORD *)a2 + 45) = result | 0x100;
      return result;
    }
    if (_LSBundleDataGetUnsupportedFormatFlag())
    {
      v8 = -[_LSBindingForLog initWithState:binding:]([_LSBindingForLog alloc], "initWithState:binding:", this, a2);
      LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)CFSTR("%s: %@ FILTERED"), v9, "unsupported format", v8);
LABEL_15:

LABEL_16:
      result = 0;
      goto LABEL_17;
    }
    v16 = (_DWORD *)*((_QWORD *)this + 15);
    v15 = (_DWORD *)*((_QWORD *)this + 16);
    if (v16 != v15)
    {
      while (*v16 != *(_DWORD *)(*((_QWORD *)a2 + 1) + 168))
      {
        if (++v16 == v15)
        {
          v16 = (_DWORD *)*((_QWORD *)this + 16);
          break;
        }
      }
      if (v15 == v16)
      {
        v8 = -[_LSBindingForLog initWithState:binding:]([_LSBindingForLog alloc], "initWithState:binding:", this, a2);
        LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)CFSTR("%s: %@ FILTERED"), v28, "disallowed bundle class", v8);
        goto LABEL_15;
      }
    }
    v17 = *(_OWORD *)((char *)this + 72);
    v41 = *(_OWORD *)((char *)this + 56);
    v42 = v17;
    v40[0] = v41;
    v40[1] = v17;
    memset(v39, 0, sizeof(v39));
    if (_LSVersionNumberCompare(v40, v39))
    {
      v38[0] = v41;
      v38[1] = v42;
      v18 = *((_QWORD *)a2 + 1);
      v19 = *(_OWORD *)(v18 + 44);
      v37[0] = *(_OWORD *)(v18 + 28);
      v37[1] = v19;
      if (_LSVersionNumberCompare(v38, v37))
      {
        v20 = -[_LSBindingForLog initWithState:binding:]([_LSBindingForLog alloc], "initWithState:binding:", this, a2);
        LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)CFSTR("%s: %@ FILTERED"), v21, "version does not match", v20);

        goto LABEL_16;
      }
    }
    v22 = *((_QWORD *)a2 + 1);
    v23 = *(_DWORD *)(v22 + 168);
    if (v23 == 16)
    {
      v30 = (_DWORD *)*((_QWORD *)this + 15);
      v29 = (_DWORD *)*((_QWORD *)this + 16);
      if (v30 == v29)
        goto LABEL_40;
      while (*v30 != 14)
      {
        if (++v30 == v29)
        {
          v30 = (_DWORD *)*((_QWORD *)this + 16);
          break;
        }
      }
      if (v29 == v30)
      {
LABEL_40:
        v26 = -[_LSBindingForLog initWithState:binding:]([_LSBindingForLog alloc], "initWithState:binding:", this, a2);
        LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)CFSTR("%s: %@ FILTERED"), v31, "remote placeholder", v26);
        goto LABEL_50;
      }
    }
    else if (v23 == 14)
    {
      v25 = (_DWORD *)*((_QWORD *)this + 15);
      v24 = (_DWORD *)*((_QWORD *)this + 16);
      if (v25 == v24)
        goto LABEL_33;
      while (*v25 != 14)
      {
        if (++v25 == v24)
        {
          v25 = (_DWORD *)*((_QWORD *)this + 16);
          break;
        }
      }
      if (v24 == v25)
      {
LABEL_33:
        v26 = -[_LSBindingForLog initWithState:binding:]([_LSBindingForLog alloc], "initWithState:binding:", this, a2);
        LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)CFSTR("%s: %@ FILTERED"), v27, "system placeholder", v26);
LABEL_50:

        goto LABEL_16;
      }
    }
    else if (((*(_DWORD *)(v22 + 172) >> 18) & 1) != (*((_DWORD *)this + 29) & 0x400u) >> 10)
    {
      if ((*((_DWORD *)this + 29) & 0x400) != 0)
        v33 = "placeholder";
      else
        v33 = "not placeholder";
      v26 = -[_LSBindingForLog initWithState:binding:]([_LSBindingForLog alloc], "initWithState:binding:", this, a2);
      LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)CFSTR("%s: %@ FILTERED"), v34, v33, v26);
      goto LABEL_50;
    }
    if ((*((_BYTE *)this + 117) & 0x10) != 0 || (v32 = *((_QWORD *)a2 + 3)) == 0 || *(_WORD *)(v32 + 12))
    {
      result = LaunchServices::BindingEvaluation::checkApplicationIdentifier(this, (uint64_t)a2);
      goto LABEL_17;
    }
    v35 = -[_LSBindingForLog initWithState:binding:]([_LSBindingForLog alloc], "initWithState:binding:", this, a2);
    LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)CFSTR("%s: %@ FILTERED"), v36, "handler rank 'none'", v35);

    goto LABEL_16;
  }
  if (*((_BYTE *)a2 + 90))
    return 1;
  v10 = -[_LSBindingForLog initWithState:binding:]([_LSBindingForLog alloc], "initWithState:binding:", this, a2);
  LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)CFSTR("%s: %@ FILTERED"), v11, "(no-I/O) previously found to be not-OK", v10);

  return *((_BYTE *)a2 + 90) != 0;
}

void sub_18288EF24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::find<unsigned int>(_QWORD *a1, unsigned int *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (*(_QWORD *)&v2 <= v3)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (v2.i32[0] - 1) & v3;
  }
  v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  for (result = *v6; result; result = (uint64_t *)*result)
  {
    v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == (_DWORD)v3)
        return result;
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(_QWORD *)&v2)
          v8 %= *(_QWORD *)&v2;
      }
      else
      {
        v8 &= *(_QWORD *)&v2 - 1;
      }
      if (v8 != v5)
        return 0;
    }
  }
  return result;
}

uint64_t _LSBundleDataGetUnsupportedFormatFlag()
{
  return 0;
}

void LaunchServices::BindingEvaluation::addBundles(LaunchServices::BindingEvaluation *this, LaunchServices::BindingEvaluation::State *a2)
{
  const __CFString *v3;
  int StringForCFString;
  const __CFString *v5;
  int v6;
  NSObject *v7;
  unint64_t v8;
  NSString *v9;
  uint8_t buf[4];
  unint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = (const __CFString *)*((_QWORD *)this + 5);
  if (v3)
  {
    StringForCFString = _LSDatabaseGetStringForCFString(**(void ***)this, v3, 0);
    LaunchServices::BindingEvaluation::addBundlesInBindingMap((uint64_t)this, 6, StringForCFString);
  }
  v5 = (const __CFString *)*((_QWORD *)this + 6);
  if (v5)
  {
    v6 = _LSDatabaseGetStringForCFString(**(void ***)this, v5, 1);
    LaunchServices::BindingEvaluation::addBundlesInBindingMap((uint64_t)this, 7, v6);
  }
  _LSBindingLog();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 23) - *((_QWORD *)this + 22)) >> 5);
    *(_DWORD *)buf = 134217984;
    v11 = v8;
    _os_log_impl(&dword_182882000, v7, OS_LOG_TYPE_DEBUG, "%llu bindings found", buf, 0xCu);
  }

  LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)CFSTR("%llu bindings found"), v9, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 23) - *((_QWORD *)this + 22)) >> 5));
}

uint64_t _LSDatabaseGetStringForCFString(void *a1, const __CFString *a2, int a3)
{
  id v5;
  CFTypeID v6;
  CFIndex Length;
  uint64_t v8;
  _QWORD v10[21];

  v10[20] = *MEMORY[0x1E0C80C00];
  v5 = a1;
  if (!a2 || (v6 = CFGetTypeID(a2), v6 != CFStringGetTypeID()))
  {
    XCFBufInit((uint64_t)v10);
    goto LABEL_6;
  }
  Length = CFStringGetLength(a2);
  if (!XCFBufInitWithCFStringRange((uint64_t)v10, a2, 0, Length, a3))
  {
LABEL_6:
    v8 = 0;
    goto LABEL_7;
  }
  v8 = _CSGetStringForCharacters();
  XCFBufDestroy((uint64_t)v10);
LABEL_7:

  return v8;
}

void sub_18288F23C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void XCFBufDestroy(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 16);
  if (v2)
    free(v2);
  *(_BYTE *)(a1 + 28) = 0;
  *(_QWORD *)a1 = a1 + 28;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 127;
  *(_QWORD *)(a1 + 16) = 0;
}

uint64_t XCFBufInitWithCFStringRange(uint64_t a1, const __CFString *a2, CFIndex a3, CFIndex a4, int a5)
{
  uint64_t result;
  CFTypeID TypeID;
  uint64_t v12;
  UInt8 *v13;
  CFIndex v14;
  CFIndex Bytes;
  uint64_t v16;
  _BYTE *v17;
  int v18;
  void *v19;
  CFIndex maxBufLen;
  CFRange v21;
  CFRange v22;
  CFRange v23;

  result = 0;
  *(_BYTE *)(a1 + 28) = 0;
  maxBufLen = 0;
  *(_QWORD *)a1 = a1 + 28;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 127;
  *(_QWORD *)(a1 + 16) = 0;
  if (a2 && a3 != -1)
  {
    TypeID = CFStringGetTypeID();
    if (TypeID != CFGetTypeID(a2))
      return 0;
    if (!a4)
      return 1;
    v21.location = a3;
    v21.length = a4;
    if (a4 == CFStringGetBytes(a2, v21, 0x8000100u, 0, 0, *(UInt8 **)a1, 127, &maxBufLen))
    {
      v12 = maxBufLen;
      *(_DWORD *)(a1 + 8) = maxBufLen;
LABEL_11:
      *(_BYTE *)(*(_QWORD *)a1 + v12) = 0;
      if (a5)
      {
        v16 = *(unsigned int *)(a1 + 8);
        if ((_DWORD)v16)
        {
          v17 = *(_BYTE **)a1;
          do
          {
            v18 = *v17;
            if ((v18 - 65) <= 0x19)
              *v17 = v18 + 32;
            ++v17;
            --v16;
          }
          while (v16);
        }
      }
      return 1;
    }
    v22.location = a3;
    v22.length = a4;
    if (CFStringGetBytes(a2, v22, 0x8000100u, 0, 0, 0, 0, &maxBufLen) >= 1)
    {
      v13 = (UInt8 *)malloc_type_malloc(maxBufLen + 1, 0xAE5AA1C7uLL);
      *(_QWORD *)(a1 + 16) = v13;
      *(_QWORD *)a1 = v13;
      v14 = maxBufLen;
      *(_DWORD *)(a1 + 24) = maxBufLen;
      v23.location = a3;
      v23.length = a4;
      Bytes = CFStringGetBytes(a2, v23, 0x8000100u, 0, 0, v13, v14, &maxBufLen);
      LODWORD(v12) = maxBufLen;
      *(_DWORD *)(a1 + 8) = maxBufLen;
      if (Bytes)
      {
        v12 = v12;
        goto LABEL_11;
      }
    }
    v19 = *(void **)(a1 + 16);
    if (v19)
      free(v19);
    result = 0;
    *(_QWORD *)a1 = a1 + 28;
    *(_DWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 24) = 127;
    *(_QWORD *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 28) = 0;
  }
  return result;
}

uint64_t LaunchServices::BindingEvaluation::addBundlesInBindingMap(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;

  if (a3)
    return _LSDatabaseEnumeratingBindingMap();
  return result;
}

uint64_t _LSDatabaseEnumeratingBindingMap()
{
  return _CSStringBindingEnumerate();
}

void LaunchServices::BindingEvaluation::runEvaluator(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t BindingMemoryResource;
  NSObject *v6;
  void **v7;
  NSString *v8;
  NSObject *v9;
  NSString *v10;
  NSObject *v11;
  NSString *v12;
  void (*v13)(LaunchServices::BindingEvaluation *);
  void *v14;
  int IsDenylistedForBinding;
  BOOL v16;
  NSObject *v17;
  NSString *v18;
  NSObject *v19;
  NSString *v20;
  NSObject *v21;
  NSString *v22;
  void *v23;
  const LaunchServices::BindingEvaluation::State *v24;
  const __CFString *v25;
  NSObject *v26;
  NSString *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  LaunchServices::BindingEvaluator *v38;
  NSObject *v39;
  _LSBindingForLog *v40;
  _LSBindingForLog *v41;
  _LSBindingForLog *v42;
  _LSBindingForLog *v43;
  NSString *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _LSBindingForLog *v49;
  NSString *v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  void *v63;
  _LSBindingForLog *v64;
  NSString *v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  const LaunchServices::BindingEvaluation::State *TypeApplication;
  const __CFString *v71;
  NSObject *v72;
  uint64_t v73;
  NSString *v74;
  int v76;
  _BYTE v77[12];
  __int16 v78;
  _LSBindingForLog *v79;
  uint8_t buf[16];
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  BindingMemoryResource = LaunchServices::BindingEvaluation::getBindingMemoryResource((LaunchServices::BindingEvaluation *)a1);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  a3[3] = BindingMemoryResource;
  _LSBindingLog();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a1 + 1;
    _os_log_impl(&dword_182882000, v6, OS_LOG_TYPE_DEBUG, "Running evaluator %p", buf, 0xCu);
  }

  v7 = (void **)(a1 + 1);
  LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)CFSTR("Running evaluator %p"), v8, a1 + 1);
  if (*((_BYTE *)a1 + 96))
    goto LABEL_4;
  v14 = (void *)a1[27];
  if (!v14)
    goto LABEL_4;
  if ((*((_BYTE *)a1 + 117) & 2) != 0)
  {
    v16 = 0;
    IsDenylistedForBinding = 0;
  }
  else
  {
    IsDenylistedForBinding = _UTTypeIsDenylistedForBinding(v14);
    v16 = a1[27] == 0;
    if ((IsDenylistedForBinding & 1) != 0)
      goto LABEL_81;
  }
  if (!v16)
  {
    if ((*((_BYTE *)a1 + 117) & 8) != 0)
      goto LABEL_4;
    TypeApplication = (const LaunchServices::BindingEvaluation::State *)_UTTypeGetTypeApplication(*(_LSDatabase **)*a1);
    IsDenylistedForBinding = LaunchServices::BindingEvaluation::conformsTo((void ***)a1, TypeApplication, CFSTR("com.apple.application"), v71);
  }
LABEL_81:
  if (IsDenylistedForBinding)
  {
    _LSBindingLog();
    v72 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v72, OS_LOG_TYPE_DEBUG))
    {
      v73 = a1[27];
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v73;
      _os_log_impl(&dword_182882000, v72, OS_LOG_TYPE_DEBUG, "Denylisted type: %@", buf, 0xCu);
    }

    LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)CFSTR("Denylisted type: %@"), v74, a1[27]);
    goto LABEL_22;
  }
LABEL_4:
  *((_BYTE *)a1 + 208) = 1;
  _LSBindingLog();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_182882000, v9, OS_LOG_TYPE_DEBUG, "Adding user preferences", buf, 2u);
  }

  LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)CFSTR("Adding user preferences"), v10);
  LaunchServices::BindingEvaluation::addAndEvaluate(a1, (void (*)(LaunchServices::BindingEvaluation *))LaunchServices::BindingEvaluation::addUserPreferences, (uint64_t)a3);
  *((_BYTE *)a1 + 208) = 0;
  if (*((_BYTE *)a1 + 96))
  {
    _LSBindingLog();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_182882000, v11, OS_LOG_TYPE_DEBUG, "Adding and sorting bundles", buf, 2u);
    }

    LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)CFSTR("Adding and sorting bundles"), v12);
    v13 = (void (*)(LaunchServices::BindingEvaluation *))LaunchServices::BindingEvaluation::addBundles;
  }
  else
  {
    _LSBindingLog();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_182882000, v17, OS_LOG_TYPE_DEBUG, "Adding and sorting claims", buf, 2u);
    }

    LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)CFSTR("Adding and sorting claims"), v18);
    LaunchServices::BindingEvaluation::addAndEvaluate(a1, (void (*)(LaunchServices::BindingEvaluation *))LaunchServices::BindingEvaluation::addClaims, (uint64_t)a3);
    _LSBindingLog();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_182882000, v19, OS_LOG_TYPE_DEBUG, "Adding and sorting alternate UTI claims", buf, 2u);
    }

    LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)CFSTR("Adding and sorting alternate UTI claims"), v20);
    LaunchServices::BindingEvaluation::addAndEvaluate(a1, (void (*)(LaunchServices::BindingEvaluation *))LaunchServices::BindingEvaluation::addAlternateUTIClaims, (uint64_t)a3);
    _LSBindingLog();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_182882000, v21, OS_LOG_TYPE_DEBUG, "Adding and sorting parent UTI claims", buf, 2u);
    }

    LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)CFSTR("Adding and sorting parent UTI claims"), v22);
    v13 = (void (*)(LaunchServices::BindingEvaluation *))LaunchServices::BindingEvaluation::addParentUTIClaims;
  }
  LaunchServices::BindingEvaluation::addAndEvaluate(a1, v13, (uint64_t)a3);
LABEL_22:
  if (*a3 == a3[1] && !*((_BYTE *)a1 + 96))
  {
    v23 = *v7;
    if (*v7)
    {
      v24 = (const LaunchServices::BindingEvaluation::State *)_UTTypeGetTypeApplication(*(_LSDatabase **)*a1);
      if (LaunchServices::BindingEvaluation::conformsTo((void ***)a1, v24, CFSTR("com.apple.application"), v25))
      {
        _LSBindingLog();
        v26 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138412290;
          *(_QWORD *)&buf[4] = v23;
          _os_log_impl(&dword_182882000, v26, OS_LOG_TYPE_DEBUG, "Binding application %@ to itself", buf, 0xCu);
        }

        LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)CFSTR("Binding application %@ to itself"), v27, v23);
        v76 = 0;
        *(_QWORD *)v77 = 0;
        if (!_LSBundleFindWithNode(*a1, v23, &v76, v77))
        {
          v84 = 0u;
          v85 = 0u;
          v82 = 0u;
          v83 = 0u;
          *(_DWORD *)&buf[4] = 0;
          v81 = 0u;
          *(_DWORD *)buf = v76;
          *(_QWORD *)&buf[8] = *(_QWORD *)v77;
          objc_storeStrong((id *)&v84, v23);
          if (LaunchServices::BindingEvaluation::gIsReasonTrackingEnabled || (*((_BYTE *)a1 + 118) & 2) != 0)
          {
            v28 = (void *)*((_QWORD *)&v82 + 1);
            *((_QWORD *)&v82 + 1) = CFSTR("Application bound to self");

          }
          LaunchServices::BindingEvaluation::pushBackBinding((LaunchServices::BindingEvaluation *)a1, a3, (LaunchServices::BindingEvaluation::State *)buf);

        }
      }
    }
  }
  v30 = *a3;
  v29 = a3[1];
  v31 = 0xAAAAAAAAAAAAAAABLL * ((v29 - *a3) >> 5);
  v32 = a1[13];
  if (v31 > v32)
  {
    std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::erase((uint64_t)a3, v30 + 96 * v32, v29);
    v30 = *a3;
    v29 = a3[1];
    v31 = 0xAAAAAAAAAAAAAAABLL * ((v29 - *a3) >> 5);
  }
  if (v31 >= 2)
  {
    v33 = *(_QWORD *)(v30 + 24);
    if (v33)
    {
      if ((*(_BYTE *)(v33 + 8) & 2) != 0)
        std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::erase((uint64_t)a3, v30 + 96, v29);
    }
  }
  if ((*((_DWORD *)a1 + 29) & 0x80200) != 0)
  {
    if ((v34 & 1) == 0
    {
      LaunchServices::BindingEvaluation::runEvaluator(LaunchServices::BindingEvaluation::State &,NSError * {__autoreleasing}*)::options = 77998;
    }
    v36 = *a3;
    v35 = a3[1];
    if (*a3 != v35)
    {
      do
      {
        if (!*(_QWORD *)(v36 + 24))
        {
          *(_DWORD *)buf = 0;
          *(_QWORD *)&buf[8] = 0;
          LODWORD(v81) = 0;
          v82 = 0uLL;
          *((_QWORD *)&v81 + 1) = 0;
          v37 = *a1;
          v38 = (LaunchServices::BindingEvaluator *)(id)a1[2];
          LODWORD(v37) = _LSGetBindingForNodeOrSchemeOrUTI(v37, 0, v38, (LaunchServices::BindingEvaluator *)a1[27], *(_DWORD *)v36, -1, 0, LaunchServices::BindingEvaluation::runEvaluator(LaunchServices::BindingEvaluation::State &,NSError * {__autoreleasing}*)::options, (uint64_t)buf) == 0;

          if ((_DWORD)v37)
          {
            _LSBindingLog();
            v39 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
            {
              v40 = -[_LSBindingForLog initWithState:binding:]([_LSBindingForLog alloc], "initWithState:binding:", a1, v36);
              v41 = -[_LSBindingForLog initWithState:binding:]([_LSBindingForLog alloc], "initWithState:binding:", a1, buf);
              *(_DWORD *)v77 = 138412546;
              *(_QWORD *)&v77[4] = v40;
              v78 = 2112;
              v79 = v41;
              _os_log_impl(&dword_182882000, v39, OS_LOG_TYPE_DEBUG, "Had claimless binding %@, but found a claim-based binding %@ to substitute", v77, 0x16u);

            }
            v42 = -[_LSBindingForLog initWithState:binding:]([_LSBindingForLog alloc], "initWithState:binding:", a1, v36);
            v43 = -[_LSBindingForLog initWithState:binding:]([_LSBindingForLog alloc], "initWithState:binding:", a1, buf);
            LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)CFSTR("Had claimless binding %@, but found a claim-based binding %@ to substitute"), v44, v42, v43);

            *(_DWORD *)(v36 + 16) = v81;
            *(_QWORD *)(v36 + 24) = *((_QWORD *)&v81 + 1);
          }

        }
        v36 += 96;
      }
      while (v36 != v35);
    }
  }
  v46 = *a3;
  v45 = a3[1];
  if ((*((_BYTE *)a1 + 117) & 2) != 0)
  {
    if (v46 == v45)
      goto LABEL_65;
    while (1)
    {
      v47 = *(_QWORD *)(v46 + 24);
      if (!v47 || !*(_DWORD *)(v47 + 28))
        break;
      v46 += 96;
      if (v46 == v45)
      {
        v48 = a3[1];
        goto LABEL_66;
      }
    }
    v49 = -[_LSBindingForLog initWithState:binding:]([_LSBindingForLog alloc], "initWithState:binding:", a1, v46);
    LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)CFSTR("%s: %@ FILTERED"), v50, "no icon (required one)", v49);

    v48 = v45;
    if (v46 == v45)
      goto LABEL_66;
    v51 = v46 + 96;
    if (v46 + 96 == v45)
    {
LABEL_65:
      v48 = v46;
    }
    else
    {
      v48 = v46;
      do
      {
        if ((*((_BYTE *)a1 + 117) & 2) == 0 || (v52 = *(_QWORD *)(v51 + 24)) != 0 && *(_DWORD *)(v52 + 28))
        {
          v53 = *(_OWORD *)(v51 + 16);
          *(_OWORD *)v48 = *(_OWORD *)v51;
          *(_OWORD *)(v48 + 16) = v53;
          v54 = *(_QWORD *)(v51 + 32);
          *(_QWORD *)(v51 + 32) = 0;
          v55 = *(void **)(v48 + 32);
          *(_QWORD *)(v48 + 32) = v54;

          v56 = *(_QWORD *)(v51 + 40);
          *(_QWORD *)(v51 + 40) = 0;
          v57 = *(void **)(v48 + 40);
          *(_QWORD *)(v48 + 40) = v56;

          *(_WORD *)(v48 + 48) = *(_WORD *)(v51 + 48);
          v58 = *(_QWORD *)(v51 + 56);
          *(_QWORD *)(v51 + 56) = 0;
          v59 = *(void **)(v48 + 56);
          *(_QWORD *)(v48 + 56) = v58;

          v60 = *(_QWORD *)(v51 + 64);
          *(_QWORD *)(v51 + 64) = 0;
          v61 = *(void **)(v48 + 64);
          *(_QWORD *)(v48 + 64) = v60;

          *(_BYTE *)(v48 + 72) = *(_BYTE *)(v51 + 72);
          v62 = *(_QWORD *)(v51 + 80);
          *(_QWORD *)(v51 + 80) = 0;
          v63 = *(void **)(v48 + 80);
          *(_QWORD *)(v48 + 80) = v62;

          *(_DWORD *)(v48 + 88) = *(_DWORD *)(v51 + 88);
          v48 += 96;
        }
        else
        {
          v64 = -[_LSBindingForLog initWithState:binding:]([_LSBindingForLog alloc], "initWithState:binding:", a1, v51);
          LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)CFSTR("%s: %@ FILTERED"), v65, "no icon (required one)", v64);

        }
        v51 += 96;
      }
      while (v51 != v45);
    }
LABEL_66:
    std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::erase((uint64_t)a3, v48, a3[1]);
    v46 = *a3;
    v45 = a3[1];
  }
  if (v46 != v45)
    return;
  v66 = *((_DWORD *)a1 + 56);
  if (v66 == _UTTypeGetTypeWindowsExecutable(*(_LSDatabase **)*a1))
  {
    if (!a2)
      return;
    v67 = 1731;
    v68 = -10661;
    goto LABEL_75;
  }
  _LSBindingLog();
  v69 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v69, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_182882000, v69, OS_LOG_TYPE_DEBUG, "Unable to bind to an executable or application, returning kLSApplicationNotFoundErr.", buf, 2u);
  }

  if (a2)
  {
    v67 = 1734;
    v68 = -10814;
LABEL_75:
    _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], v68, (uint64_t)"runEvaluator", v67, 0);
    *a2 = (id)objc_claimAutoreleasedReturnValue();
  }
}

void sub_18288FED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  LaunchServices::BindingEvaluation::ExtendedBinding::~ExtendedBinding((id *)va);
  std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__destroy_vector::operator()[abi:nn180100]((id ***)va);
  _Unwind_Resume(a1);
}

void LaunchServices::BindingEvaluation::logToFile(LaunchServices::BindingEvaluation *this, NSString *a2, ...)
{
  void *v2;
  void *v3;
  uint64_t v4;
  size_t __size;
  uint64_t v6;
  uint64_t i;
  va_list v8;
  _BYTE __ptr[512];
  uint64_t v10;
  va_list va;

  va_start(va, a2);
  v10 = *MEMORY[0x1E0C80C00];
  if (this && LaunchServices::BindingEvaluation::logFile)
  {
    va_copy(v8, va);
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:arguments:", this, va);
    v3 = v2;
    if (v2)
    {
      v4 = objc_msgSend(v2, "length");
      v6 = 0;
      for (i = v4; i; v4 = i)
      {
        __size = 0;
        if ((objc_msgSend(v3, "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:", __ptr, 512, &__size, 4, 0, v6, v4, &v6) & 1) == 0)break;
        fwrite(__ptr, __size, 1uLL, (FILE *)LaunchServices::BindingEvaluation::logFile);
        fputc(10, (FILE *)LaunchServices::BindingEvaluation::logFile);
      }
    }

  }
}

void sub_1828900AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id _LSBindingLog()
{
  if (_LSBindingLog_once != -1)
    dispatch_once(&_LSBindingLog_once, &__block_literal_global_27);
  return (id)_LSBindingLog_result;
}

void LaunchServices::BindingEvaluation::addUserPreferences(LaunchServices::BindingEvaluation *this, LaunchServices::BindingEvaluation::State *a2)
{
  const __CFString *v3;
  int TagForContentType;
  uint64_t HandlerPref;
  NSObject *v6;
  NSString *v7;
  const __CFString *v8;
  int StringForCFString;
  LSHandlerPref *v10;
  NSObject *v11;
  NSString *v12;
  LaunchServices::BindingEvaluator *v13;
  LaunchServices::BindingEvaluator *v14;
  id v15;
  const __CFString *v16;
  NSObject *v17;
  NSString *v18;
  NSObject *v19;
  unint64_t v20;
  NSString *v21;
  unsigned int v22;
  uint64_t v23;
  id v24;
  id v25;
  char v26;
  LSVersionNumber v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _OWORD v32[2];
  uint8_t buf[4];
  unint64_t v34;
  int v35;
  LSVersionNumber v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if ((*((_BYTE *)this + 116) & 4) != 0)
  {
    _LSBindingLog();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_182882000, v6, OS_LOG_TYPE_DEBUG, "Skipping weak binding due to options", buf, 2u);
    }

    LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)CFSTR("Skipping weak binding due to options"), v7);
    goto LABEL_36;
  }
  v3 = (const __CFString *)*((_QWORD *)this + 27);
  if (v3)
  {
    *(_DWORD *)buf = 0;
    TagForContentType = LSHandlerPref::GetTagForContentType(**(void ***)this, v3, (int *)buf);
    if (!TagForContentType)
    {
LABEL_27:
      _LSBindingLog();
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_182882000, v17, OS_LOG_TYPE_DEBUG, "Adding weak binding", buf, 2u);
      }

      LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)CFSTR("Adding weak binding"), v18);
      goto LABEL_36;
    }
    HandlerPref = LSHandlerPref::GetHandlerPref(**(void ***)this, TagForContentType, *(int *)buf, 0);
  }
  else
  {
    v8 = (const __CFString *)*((_QWORD *)this + 2);
    if (!v8)
      goto LABEL_27;
    StringForCFString = _LSDatabaseGetStringForCFString(**(void ***)this, v8, 1);
    if (!StringForCFString)
      goto LABEL_27;
    HandlerPref = LSHandlerPref::GetHandlerPref(**(void ***)this, StringForCFString, 5, 0);
  }
  v10 = (LSHandlerPref *)HandlerPref;
  if (!HandlerPref)
    goto LABEL_27;
  _LSBindingLog();
  v11 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_182882000, v11, OS_LOG_TYPE_DEBUG, "Adding weak binding", buf, 2u);
  }

  LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)CFSTR("Adding weak binding"), v12);
  memset(&v36, 0, sizeof(v36));
  if (LSHandlerPref::roleHandler(v10, *((_DWORD *)this + 28), &v36))
  {
    v13 = (LaunchServices::BindingEvaluator *)_CSStringCopyCFString();
    v14 = v13;
    if (!v13)
    {
LABEL_35:

      goto LABEL_36;
    }
    LOBYTE(v22) = 0;
    v26 = 0;
    memset(&v36, 0, sizeof(v36));
    memset(v32, 0, sizeof(v32));
    LaunchServices::BindingEvaluator::CreateWithBundleInfo(v13, 0, 0, 0, v32, (uint64_t)buf);
    v35 = 128;
    LaunchServices::BindingEvaluator::getBestBinding((uint64_t *)&v27, (LaunchServices::BindingEvaluator *)buf);
    std::__optional_storage_base<LSBinding,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<LSBinding,false>>((uint64_t)&v22, (uint64_t)&v27);
    if ((_BYTE)v29)
    {

    }
    v27 = v36;
    v37 = kLSVersionNumberNull;
    v38 = *(_OWORD *)algn_1829FAD90;
    if (_LSVersionNumberCompare(&v27, &v37))
    {
      if (v26)
        goto LABEL_23;
      v37 = kLSVersionNumberNull;
      v38 = *(_OWORD *)algn_1829FAD90;
      LaunchServices::BindingEvaluator::CreateWithBundleInfo(v14, 0, 0, 0, &v37, (uint64_t)&v27);
      LaunchServices::BindingEvaluator::operator=((uint64_t)buf, (uint64_t)&v27);
      LaunchServices::BindingEvaluator::~BindingEvaluator((id *)&v27);
      v35 = 128;
      LaunchServices::BindingEvaluator::getBestBinding((uint64_t *)&v27, (LaunchServices::BindingEvaluator *)buf);
      std::__optional_storage_base<LSBinding,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<LSBinding,false>>((uint64_t)&v22, (uint64_t)&v27);
      if ((_BYTE)v29)
      {

      }
    }
    if (!v26)
    {
LABEL_33:
      LaunchServices::BindingEvaluator::~BindingEvaluator((id *)buf);
      if (v26)
      {

      }
      goto LABEL_35;
    }
LABEL_23:
    v31 = 0u;
    v29 = 0u;
    v30 = 0u;
    *(_OWORD *)&v27._opaque[16] = 0u;
    v28 = 0u;
    *(_QWORD *)v27._opaque = v22;
    *(_QWORD *)&v27._opaque[8] = v23;
    if (LaunchServices::BindingEvaluation::gIsReasonTrackingEnabled || (*((_BYTE *)this + 118) & 2) != 0)
    {
      if (v25)
      {
        v15 = objc_alloc(MEMORY[0x1E0CB3940]);
        v16 = (const __CFString *)objc_msgSend(v15, "initWithFormat:", CFSTR("Weak Binding (%@)"), v25);
      }
      else
      {
        v16 = CFSTR("Weak Binding");
      }
      *((_QWORD *)&v28 + 1) = v16;
    }
    LaunchServices::BindingEvaluation::pushBackBinding(this, (uint64_t *)this + 22, (LaunchServices::BindingEvaluation::State *)&v27);

    goto LABEL_33;
  }
LABEL_36:
  _LSBindingLog();
  v19 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
  {
    v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 23) - *((_QWORD *)this + 22)) >> 5);
    *(_DWORD *)buf = 134217984;
    v34 = v20;
    _os_log_impl(&dword_182882000, v19, OS_LOG_TYPE_DEBUG, "%llu bindings found", buf, 0xCu);
  }

  LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)CFSTR("%llu bindings found"), v21, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 23) - *((_QWORD *)this + 22)) >> 5));
}

void sub_1828905B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,id a43)
{
  void *v43;

  LaunchServices::BindingEvaluator::~BindingEvaluator(&a43);
  if (a16)
  {

  }
  _Unwind_Resume(a1);
}

LaunchServices::BindingEvaluation::State *LaunchServices::BindingEvaluation::State::State(LaunchServices::BindingEvaluation::State *this, LSContext *a2, const LaunchServices::BindingEvaluator *a3)
{
  _QWORD *v5;
  const LaunchServices::BindingEvaluator *v6;
  LaunchServices::BindingEvaluator *v7;
  uint64_t BindingMemoryResource;
  CFStringRef *v9;
  LaunchServices::BindingEvaluator *v10;
  NSObject *v11;
  NSString *v12;
  void *v13;
  id v14;
  LaunchServices::BindingEvaluator *v15;
  NSObject *v16;
  NSString *v17;
  NSObject *v18;
  NSString *v19;
  id v21;
  uint8_t buf[4];
  LaunchServices::BindingEvaluator *v23;
  __int16 v24;
  id v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = a2;
  v5 = (_QWORD *)((char *)this + 176);
  v6 = (LaunchServices::BindingEvaluation::State *)((char *)this + 8);
  v7 = LaunchServices::BindingEvaluator::BindingEvaluator((LaunchServices::BindingEvaluation::State *)((char *)this + 8), a3);
  BindingMemoryResource = LaunchServices::BindingEvaluation::getBindingMemoryResource(v7);
  *v5 = 0;
  v5[1] = 0;
  v5[2] = 0;
  *((_QWORD *)this + 27) = 0;
  v9 = (CFStringRef *)((char *)this + 216);
  *((_QWORD *)this + 25) = BindingMemoryResource;
  *((_DWORD *)this + 56) = 0;
  *((_QWORD *)this + 29) = 0;
  *((_BYTE *)this + 208) = 0;
  *((_BYTE *)this + 240) = 0;
  *((_QWORD *)this + 31) = 0;
  *((_WORD *)this + 128) = 0;
  *((_QWORD *)this + 33) = 0;
  v10 = (LaunchServices::BindingEvaluator *)*((_QWORD *)this + 1);
  if (-[LaunchServices::BindingEvaluator isSideFault](v10, "isSideFault"))
  {
    _LSBindingLog();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      v23 = v10;
      _os_log_impl(&dword_182882000, v11, OS_LOG_TYPE_DEBUG, "Node %@ was an iCloud Drive fault file. Substituting binding evaluator.", buf, 0xCu);
    }

    LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)CFSTR("Node %@ was an iCloud Drive fault file. Substituting binding evaluator."), v12, v10);
    v21 = 0;
    +[UTTypeRecord _typeRecordWithContext:forPromiseAtNode:error:](UTTypeRecord, "_typeRecordWithContext:forPromiseAtNode:error:", a2, v10, &v21);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = v21;
    if (v13)
    {
      objc_msgSend(v13, "identifier");
      v15 = (LaunchServices::BindingEvaluator *)objc_claimAutoreleasedReturnValue();
      _LSBindingLog();
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412290;
        v23 = v15;
        _os_log_impl(&dword_182882000, v16, OS_LOG_TYPE_DEBUG, "iCloud Drive fault file looks like it has UTI %@.", buf, 0xCu);
      }

      LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)CFSTR("iCloud Drive fault file looks like it has UTI %@."), v17, v15);
      LaunchServices::BindingEvaluator::CreateWithUTI(v15, *((NSString **)this + 4), (LaunchServices::BindingEvaluator *)buf);
      LaunchServices::BindingEvaluator::setAllPropertiesFromBindingEvaluator((LaunchServices::BindingEvaluator *)buf, v6);
      LaunchServices::BindingEvaluator::operator=((uint64_t)v6, (uint64_t)buf);
      LaunchServices::BindingEvaluator::~BindingEvaluator((id *)buf);

    }
    else
    {
      _LSBindingLog();
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412546;
        v23 = v10;
        v24 = 2112;
        v25 = v14;
        _os_log_impl(&dword_182882000, v18, OS_LOG_TYPE_DEBUG, "Node %@ was an iCloud Drive fault file, but we couldn't figure out its type: %@", buf, 0x16u);
      }

      LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)CFSTR("Node %@ was an iCloud Drive fault file, but we couldn't figure out its type: %@"), v19, v10, v14);
    }

  }
  LaunchServices::BindingEvaluation::calculateUTI(*(LSContext **)this, (uint64_t)v6, (id *)this + 27, (unint64_t)this + 224, (unint64_t)this + 232);
  if (!*((_QWORD *)this + 29) && *v9)
    *((_BYTE *)this + 240) = UTTypeIsDynamic(*v9) != 0;
  return this;
}

void sub_182890904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  id *v5;
  id *v6;
  void *v7;
  void *v8;
  va_list va;

  va_start(va, a5);

  std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__destroy_vector::operator()[abi:nn180100]((id ***)va);
  LaunchServices::BindingEvaluator::~BindingEvaluator(v5);
  _Unwind_Resume(a1);
}

LaunchServices::BindingEvaluator *LaunchServices::BindingEvaluator::BindingEvaluator(LaunchServices::BindingEvaluator *this, const LaunchServices::BindingEvaluator *a2)
{
  __int128 v4;
  uint64_t v5;

  *(_QWORD *)this = *(id *)a2;
  *((_QWORD *)this + 1) = *((id *)a2 + 1);
  *((_QWORD *)this + 2) = *((id *)a2 + 2);
  *((_QWORD *)this + 3) = *((id *)a2 + 3);
  *((_QWORD *)this + 4) = *((id *)a2 + 4);
  *((_QWORD *)this + 5) = *((id *)a2 + 5);
  v4 = *((_OWORD *)a2 + 4);
  *((_OWORD *)this + 3) = *((_OWORD *)a2 + 3);
  *((_OWORD *)this + 4) = v4;
  *((_QWORD *)this + 10) = *((id *)a2 + 10);
  v5 = *((_QWORD *)a2 + 13);
  *(_OWORD *)((char *)this + 88) = *(_OWORD *)((char *)a2 + 88);
  *((_QWORD *)this + 13) = v5;
  std::vector<LSBundleClass>::vector((std::vector<unsigned int> *)((char *)this + 112), (const std::vector<unsigned int> *)((char *)a2 + 112));
  *((_QWORD *)this + 17) = MEMORY[0x186DAE9BC](*((_QWORD *)a2 + 17));
  *((_QWORD *)this + 18) = *((id *)a2 + 18);
  *((_QWORD *)this + 19) = MEMORY[0x186DAE9BC](*((_QWORD *)a2 + 19));
  *((_QWORD *)this + 20) = *((id *)a2 + 20);
  return this;
}

void sub_182890A54(_Unwind_Exception *a1)
{
  id *v1;

  _Unwind_Resume(a1);
}

std::vector<unsigned int> *__cdecl std::vector<LSBundleClass>::vector(std::vector<unsigned int> *this, const std::vector<unsigned int> *__x)
{
  unsigned int *end;
  std::vector<unsigned int>::pointer begin;
  int64_t v5;
  std::vector<unsigned int>::pointer v6;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  begin = __x->__begin_;
  end = __x->__end_;
  v5 = (char *)end - (char *)__x->__begin_;
  if (end != __x->__begin_)
  {
    std::vector<unsigned int>::__vallocate[abi:nn180100](this, v5 >> 2);
    v6 = this->__end_;
    memmove(v6, begin, v5);
    this->__end_ = (std::vector<unsigned int>::pointer)((char *)v6 + v5);
  }
  return this;
}

void LaunchServices::BindingEvaluation::calculateUTI(LSContext *a1, uint64_t a2, id *a3, unint64_t a4, unint64_t a5)
{
  __CFString *v10;
  void *active;
  NSObject *v12;
  NSString *v13;
  void *v14;
  void *v15;
  NSString *v16;
  __CFString *v17;
  id buf;
  void *v19;
  id v20;
  char v21;
  char v22;
  id v23[2];
  int v24;

  v24 = 0;
  v10 = (__CFString *)*(id *)(a2 + 16);
  if (v10)
  {
    if (a4 | a5)
      active = (void *)_UTGetActiveTypeForCFStringIdentifier(a1->db, v10, &v24);
    else
      active = 0;
  }
  else
  {
    active = *(void **)a2;
    if (*(_QWORD *)a2)
    {
      _LSBindingLog();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_182882000, v12, OS_LOG_TYPE_DEBUG, "Calculating UTI because we don't have it yet", (uint8_t *)&buf, 2u);
      }

      LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)CFSTR("Calculating UTI because we don't have it yet"), v13);
      LaunchServices::TypeEvaluator::TypeEvaluator(v23, active);
      if ((*(_BYTE *)(a2 + 108) & 0x10) != 0)
        LaunchServices::TypeEvaluator::setSniffIfNeeded((LaunchServices::TypeEvaluator *)v23, 1);
      LaunchServices::TypeEvaluator::evaluateType((uint64_t)v23, (void **)&a1->db, 0, (uint64_t)&buf);
      if (v22)
      {
        if (v21)
        {
          objc_msgSend(active, "nameWithError:", 0);
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          LaunchServices::TypeEvaluator::Result::getTypeIdentifier(&buf, a1);
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)CFSTR("Calculated UTI of file %@ was %@, but sniffed something better: %@"), v16, v14, 0, v15);

        }
        active = v19;
        if (v19)
        {
          v24 = (int)buf;
          v17 = (__CFString *)_CSStringCopyCFString();
        }
        else
        {
          v17 = (__CFString *)v20;
        }
        v10 = v17;
        if (v22)

      }
      else
      {
        v10 = 0;
        active = 0;
      }

    }
    else
    {
      v10 = 0;
    }
  }
  if (a3)
    objc_storeStrong(a3, v10);
  if (a4)
    *(_DWORD *)a4 = v24;
  if (a5)
    *(_QWORD *)a5 = active;

}

void sub_182890CF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, char a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;

  if (a17)
  _Unwind_Resume(a1);
}

uint64_t LaunchServices::BindingEvaluator::setOptions(uint64_t this, int a2)
{
  *(_DWORD *)(this + 108) = a2;
  return this;
}

uint64_t LaunchServices::BindingEvaluation::isBindingOK(LaunchServices::BindingEvaluation *this, LaunchServices::BindingEvaluation::State *a2, const LaunchServices::BindingEvaluation::ExtendedBinding *a3)
{
  uint64_t result;
  void *v6;
  uint64_t (**v7)(_QWORD, _QWORD, _QWORD);
  const LaunchServices::BindingEvaluation::ExtendedBinding *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  BOOL v23;
  _LSBindingForLog *v24;
  id *v25;
  unsigned int v26;
  _LSBindingForLog *v27;
  NSString *v28;
  _LSBindingForLog *v29;
  NSString *v30;
  uint64_t v31;
  const char *v32;
  _LSBindingForLog *v33;
  NSString *v34;
  NSString *v35;
  id v36;
  uint64_t v37;
  _LSBindingForLog *v38;
  NSString *v39;
  uint64_t v40;
  _LSBindingForLog *v41;
  NSString *v42;
  _LSBindingForLog *v43;
  NSString *v44;
  void *v45;
  id obj;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _BYTE v51[128];
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)a2 + 89))
  {
    v6 = (void *)*((_QWORD *)this + 19);
    v7 = (uint64_t (**)(_QWORD, _QWORD, _QWORD))MEMORY[0x186DAE9BC](*((_QWORD *)this + 18));

    if (v7
      && (((uint64_t (**)(_QWORD, _QWORD, LaunchServices::BindingEvaluation::State *))v7)[2](v7, *(_QWORD *)this, a2) & 1) == 0)
    {
      v31 = objc_msgSend(objc_retainAutorelease(v6), "UTF8String");
      if (v31)
        v32 = (const char *)v31;
      else
        v32 = "caller-supplied filter";
      v33 = -[_LSBindingForLog initWithState:binding:]([_LSBindingForLog alloc], "initWithState:binding:", this, a2);
      LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)CFSTR("%s: %@ FILTERED"), v34, v32, v33);

      goto LABEL_43;
    }
    result = LaunchServices::BindingEvaluation::isBindingOK_NoIO(this, a2, v8);
    if (!(_DWORD)result)
    {
LABEL_52:
      *((_WORD *)a2 + 44) = result | 0x100;
      *((_WORD *)a2 + 45) = result | 0x100;
      return result;
    }
    if ((*((_BYTE *)this + 117) & 0x80) == 0)
    {
      if (*((_QWORD *)a2 + 3))
      {
        _LSDatabaseGetStringArray(**(void ***)this);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v45 = v9;
        v10 = v9;
        if (v9)
        {
          v11 = objc_msgSend(v9, "count");
          v10 = v45;
          if (v11)
          {
            if (!*((_QWORD *)this + 33))
            {
              objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
              v12 = objc_claimAutoreleasedReturnValue();
              v13 = (void *)*((_QWORD *)this + 33);
              *((_QWORD *)this + 33) = v12;

            }
            v49 = 0u;
            v50 = 0u;
            v47 = 0u;
            v48 = 0u;
            obj = v45;
            v14 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v47, v51, 16);
            if (v14)
            {
              v15 = *(_QWORD *)v48;
              do
              {
                for (i = 0; i != v14; ++i)
                {
                  if (*(_QWORD *)v48 != v15)
                    objc_enumerationMutation(obj);
                  v17 = *(_QWORD *)(*((_QWORD *)&v47 + 1) + 8 * i);
                  objc_msgSend(*((id *)this + 33), "objectForKeyedSubscript:", v17);
                  v18 = (void *)objc_claimAutoreleasedReturnValue();
                  if (v18)
                    goto LABEL_19;
                  v19 = (void *)MGCopyAnswer();
                  if (!v19 || (objc_opt_respondsToSelector() & 1) == 0)
                  {

                    v18 = 0;
                    goto LABEL_26;
                  }
                  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", objc_msgSend(v19, "BOOLValue"));
                  v18 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(*((id *)this + 33), "setObject:forKeyedSubscript:", v18, v17);

                  if (v18)
                  {
LABEL_19:
                    if ((objc_msgSend(v18, "BOOLValue") & 1) == 0)
                    {
                      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("missing capability %@"), v17);
                      v36 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
                      v37 = objc_msgSend(v36, "UTF8String");
                      v38 = -[_LSBindingForLog initWithState:binding:]([_LSBindingForLog alloc], "initWithState:binding:", this, a2);
                      LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)CFSTR("%s: %@ FILTERED"), v39, v37, v38);

                      goto LABEL_43;
                    }
                  }
LABEL_26:

                }
                v14 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v47, v51, 16);
              }
              while (v14);
            }

            v10 = v45;
          }
        }

      }
      if (!*((_BYTE *)this + 96) || *((_BYTE *)this + 97))
      {
        v20 = *((_QWORD *)a2 + 3);
        if (!v20 || (*(_BYTE *)(v20 + 9) & 1) == 0)
        {
          +[LSApplicationRestrictionsManager sharedInstance]();
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", *(_QWORD *)(*((_QWORD *)a2 + 1) + 416));
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          v23 = -[LSApplicationRestrictionsManager isRatingAllowed:](v21, v22);

          if (!v23)
          {
            v24 = -[_LSBindingForLog initWithState:binding:]([_LSBindingForLog alloc], "initWithState:binding:", this, a2);
            LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)CFSTR("%s: %@ FILTERED"), v35, "restricted due to rating", v24);
            goto LABEL_45;
          }
          if (*(_DWORD *)(*((_QWORD *)a2 + 1) + 12))
          {
            v24 = (_LSBindingForLog *)_CSStringCopyCFString();
            +[LSApplicationRestrictionsManager sharedInstance]();
            v25 = (id *)objc_claimAutoreleasedReturnValue();
            v26 = -[LSApplicationRestrictionsManager isApplicationRestricted:checkFlags:](v25, v24, *(_QWORD *)(*((_QWORD *)a2 + 1) + 172));

            if (v26)
            {
              v27 = -[_LSBindingForLog initWithState:binding:]([_LSBindingForLog alloc], "initWithState:binding:", this, a2);
              LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)CFSTR("%s: %@ FILTERED"), v28, "restricted by Managed Configuration", v27);

LABEL_45:
LABEL_43:
              result = 0;
              goto LABEL_52;
            }

          }
        }
      }
      if (!LaunchServices::BindingEvaluation::BindingEligibilityChecker::checkBindingIsEligibile((LaunchServices::BindingEvaluation::BindingEligibilityChecker *)&LaunchServices::BindingEvaluation::BindingEligibilityChecker::shared(void)::checker, this, a2))
      {
        v41 = -[_LSBindingForLog initWithState:binding:]([_LSBindingForLog alloc], "initWithState:binding:", this, a2);
        LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)CFSTR("%s: %@ FILTERED"), v42, "not eligible", v41);

        goto LABEL_43;
      }
      if (*((_QWORD *)a2 + 3))
      {
        v40 = *((_QWORD *)a2 + 1);
        if (v40)
        {
          if (((*(unsigned __int16 *)(v40 + 189) | (*(unsigned __int8 *)(v40 + 191) << 16)) & 0x80000) != 0)
          {
            v43 = -[_LSBindingForLog initWithState:binding:]([_LSBindingForLog alloc], "initWithState:binding:", this, a2);
            LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)CFSTR("%s: %@ FILTERED"), v44, "hidden by app protection", v43);

            goto LABEL_43;
          }
        }
      }
    }
    result = 1;
    goto LABEL_52;
  }
  if (*((_BYTE *)a2 + 88))
    return 1;
  v29 = -[_LSBindingForLog initWithState:binding:]([_LSBindingForLog alloc], "initWithState:binding:", this, a2);
  LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)CFSTR("%s: %@ FILTERED"), v30, "previously found to be not-OK", v29);

  return *((_BYTE *)a2 + 88) != 0;
}

void sub_1828912E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t LaunchServices::BindingEvaluator::setLimit(uint64_t this, unint64_t a2)
{
  uint64_t v2;

  v2 = 1024;
  if (a2 < 0x400)
    v2 = a2;
  *(_QWORD *)(this + 96) = v2;
  return this;
}

_QWORD *std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int &>(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_1828915E0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t LaunchServices::BindingEvaluation::checkApplicationIdentifier(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  _LSBindingForLog *v9;
  NSString *v10;
  NSString *v11;

  v2 = a1[11];
  if (v2)
  {
    +[_LSLazyPropertyList lazyPropertyListWithContext:unit:](_LSLazyPropertyList, "lazyPropertyListWithContext:unit:", *a1, *(unsigned int *)(*(_QWORD *)(a2 + 8) + 140));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "_applicationIdentifier");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = v6;
    if (v6)
    {
      if ((objc_msgSend(v6, "isEqual:", v2) & 1) != 0)
      {
        v8 = 1;
LABEL_9:

        return v8;
      }
      v9 = -[_LSBindingForLog initWithState:binding:]([_LSBindingForLog alloc], "initWithState:binding:", a1, a2);
      LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)CFSTR("%s: %@ FILTERED"), v11, "app ID", v9);
    }
    else
    {
      v9 = -[_LSBindingForLog initWithState:binding:]([_LSBindingForLog alloc], "initWithState:binding:", a1, a2);
      LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)CFSTR("%s: %@ FILTERED"), v10, "no app ID", v9);
    }

    v8 = 0;
    goto LABEL_9;
  }
  return 1;
}

void sub_182891704(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

BOOL evaluateBundleNoIOCommon(LSContext *a1, uint64_t a2, const LSBundleData *a3)
{
  _BOOL8 result;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((a3 & 1) == 0)
    return 1;
  if (a2 && (*(_BYTE *)(a2 + 164) & 1) != 0)
    return 1;
  v5 = _LSEnumeratorLog;
  result = os_log_type_enabled((os_log_t)_LSEnumeratorLog, OS_LOG_TYPE_DEBUG);
  if (result)
  {
    evaluateBundleNoIOCommon((uint64_t)a1, v5, v6, v7, v8, v9, v10, v11);
    return 0;
  }
  return result;
}

void LaunchServices::BindingEvaluation::addAlternateUTIClaims(void ***this, LaunchServices::BindingEvaluation::State *a2)
{
  __CFString *v3;
  const __CFString *v4;
  const LaunchServices::BindingEvaluation::State *TypePackage;
  const LaunchServices::BindingEvaluation::State *TypeData;
  const __CFString *v7;
  const __CFString *v8;
  NSObject *v9;
  void **v10;
  __CFString *v11;
  NSObject *v12;
  NSString *v13;
  __CFString *v14;
  NSObject *v15;
  NSObject *v16;
  int v17;
  _BOOL4 v18;
  void **v19;
  NSString *v20;
  void *v21;
  void **v22;
  NSString *v23;
  _QWORD v24[6];
  int v25;
  uint8_t buf[4];
  void **v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if ((*((_BYTE *)this + 118) & 4) != 0)
  {
    _LSBindingLog();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_182882000, v12, OS_LOG_TYPE_DEBUG, "Skipping alternate UTI claims due to options", buf, 2u);
    }

    v14 = CFSTR("Skipping alternate UTI claims due to options");
    goto LABEL_18;
  }
  if (!this[27])
  {
    _LSBindingLog();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_182882000, v16, OS_LOG_TYPE_DEBUG, "Skipping alternate UTI claims (no UTI!)", buf, 2u);
    }

    v14 = CFSTR("Skipping alternate UTI claims (no UTI!)");
    goto LABEL_18;
  }
  v3 = (__CFString *)LaunchServices::BindingEvaluation::State::getExtension((LaunchServices::BindingEvaluation::State *)this);
  if (!v3 || (v4 = v3, !-[__CFString length](v3, "length")))
  {
    _LSBindingLog();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_182882000, v15, OS_LOG_TYPE_DEBUG, "Skipping alternate UTI claims (no path extension)", buf, 2u);
    }

    v14 = CFSTR("Skipping alternate UTI claims (no path extension)");
LABEL_18:
    LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)v14, v13);
    return;
  }
  TypePackage = (const LaunchServices::BindingEvaluation::State *)_UTTypeGetTypePackage((_LSDatabase *)**this);
  TypeData = (const LaunchServices::BindingEvaluation::State *)_UTTypeGetTypeData((_LSDatabase *)**this);
  if (LaunchServices::BindingEvaluation::conformsTo(this, TypePackage, CFSTR("com.apple.package"), v7))
  {
    _LSBindingLog();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      v10 = this[27];
      *(_DWORD *)buf = 138412290;
      v27 = v10;
      _os_log_impl(&dword_182882000, v9, OS_LOG_TYPE_DEBUG, "Base type of UTI %@ was com.apple.package; looking for alternate UTI claims",
        buf,
        0xCu);
    }
    v11 = CFSTR("Base type of UTI %@ was com.apple.package; looking for alternate UTI claims");
LABEL_24:

    LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)v11, v20, this[27]);
    if ((_DWORD)TypePackage)
    {
      v21 = **this;
      v24[0] = MEMORY[0x1E0C809B0];
      v24[1] = 3221225472;
      v24[2] = ___ZN14LaunchServices17BindingEvaluationL21addAlternateUTIClaimsERNS0_5StateE_block_invoke;
      v24[3] = &__block_descriptor_52_e41_v32__0I8I12r____IIIIiII_8I_IIIIIIII_16_24lu40l8;
      v25 = (int)TypePackage;
      v24[4] = this;
      v24[5] = v4;
      _UTEnumerateTypesForTag(v21, CFSTR("public.filename-extension"), v4, v24);
    }
    return;
  }
  v17 = LaunchServices::BindingEvaluation::conformsTo(this, TypeData, CFSTR("public.data"), v8);
  _LSBindingLog();
  v9 = objc_claimAutoreleasedReturnValue();
  v18 = os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG);
  if (v17)
  {
    if (v18)
    {
      v19 = this[27];
      *(_DWORD *)buf = 138412290;
      v27 = v19;
      _os_log_impl(&dword_182882000, v9, OS_LOG_TYPE_DEBUG, "Base type of UTI %@ was public.data; looking for alternate UTI claims",
        buf,
        0xCu);
    }
    v11 = CFSTR("Base type of UTI %@ was public.data; looking for alternate UTI claims");
    LODWORD(TypePackage) = (_DWORD)TypeData;
    goto LABEL_24;
  }
  if (v18)
  {
    v22 = this[27];
    *(_DWORD *)buf = 138412290;
    v27 = v22;
    _os_log_impl(&dword_182882000, v9, OS_LOG_TYPE_DEBUG, "Base type of UTI %@ was not public.data or com.apple.package; skipping alternate UTI claims",
      buf,
      0xCu);
  }

  LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)CFSTR("Base type of UTI %@ was not public.data or com.apple.package; skipping alternate UTI claims"),
    v23,
    this[27]);
}

void ___ZL30_LSPlistCreateTransformedValueP11objc_objectPFP8NSStringS2_PbES3__block_invoke_3(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  void *v8;
  void *v9;

  (*(void (**)(void *, uint64_t))(a1 + 48))(a2, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (v8 != a2
    || _NSIsNSString()
    && ((*(void (**)(void *, uint64_t))(a1 + 48))(a3, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24),
        v9 = (void *)objc_claimAutoreleasedReturnValue(),
        v9,
        v9 != a3))
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
    *a4 = 1;
  }
}

void ___ZL36_LSPlistLookUpIndexOfCompactedStringP8NSString_block_invoke()
{
  unint64_t i;
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;

  objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", 256);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  for (i = 0; i != 256; ++i)
  {
    _LSPlistLookUpCompactedStringByIndex(i);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    if (v1)
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", i);
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "setObject:forKeyedSubscript:", v2, v1);

    }
  }
  v3 = objc_msgSend(v5, "copy");
  v4 = (void *)_LSPlistLookUpIndexOfCompactedString(NSString *)::indexes;
  _LSPlistLookUpIndexOfCompactedString(NSString *)::indexes = v3;

}

void sub_182892260(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1828922C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZL30_LSPlistCreateTransformedValueP11objc_objectPFP8NSStringS2_PbES3__block_invoke(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v7;

  if (_NSIsNSString())
  {
    (*(void (**)(void *, uint64_t))(a1 + 48))(a2, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (v7 != a2)
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
      *a4 = 1;
    }

  }
}

void sub_182892460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_182892644(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t _LSContextInit(id *a1)
{
  _DWORD *IsCurrentThreadInLSContextInitReference;
  void *v3;
  id v4;
  uint64_t v5;
  _DWORD *v6;
  id v8;

  IsCurrentThreadInLSContextInitReference = getIsCurrentThreadInLSContextInitReference();
  ++*IsCurrentThreadInLSContextInitReference;
  +[_LSDServiceDomain defaultServiceDomain]();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = 0;
  LOBYTE(a1) = _LSContextInitCommon(a1, v3, 0, &v8);
  v4 = v8;

  if ((a1 & 1) != 0)
    v5 = 0;
  else
    v5 = _LSGetOSStatusFromNSError(v4);
  v6 = getIsCurrentThreadInLSContextInitReference();
  --*v6;

  return v5;
}

void sub_182892720(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182892AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  void *v27;
  void *v28;
  uint64_t v29;

  _Block_object_dispose((const void *)(v29 - 160), 8);
  _Block_object_dispose(&a23, 8);
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a27);

  _Unwind_Resume(a1);
}

uint64_t LaunchServices::Database::Context::_get(LaunchServices::Database::Context *this, _LSDServiceDomain *a2, uint64_t a3)
{
  _LSDServiceDomain *v5;
  uint64_t v6;
  void *v7;
  int v8;
  id v9;
  id v10;
  id v12;

  v5 = a2;
  v6 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
  {
    if (*((_QWORD *)this + 3))
    {
      v6 = 0;
    }
    else
    {
      v7 = (void *)MEMORY[0x186DAE7A0]();
      v12 = 0;
      v8 = _LSContextInitWithOptions((char *)this + 8, v5, a3, &v12);
      v9 = v12;
      v10 = v12;
      if (v8)
      {
        *(_QWORD *)this = (char *)this + 8;
        *((_BYTE *)this + 16) = 1;
      }
      else
      {
        objc_storeStrong((id *)this + 3, v9);
      }

      objc_autoreleasePoolPop(v7);
      v6 = *(_QWORD *)this;
    }
  }

  return v6;
}

void sub_182892CA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _LSContextInitCommon(id *a1, void *a2, char a3, _QWORD *a4)
{
  id v7;
  _DWORD *IsCurrentThreadInLSContextInitReference;
  void *v9;
  unint64_t v10;
  id *v11;
  id *v12;
  id v13;
  id v14;
  BOOL v15;
  id v16;
  uint64_t v17;
  _LSDServiceDomain *v18;
  void *v19;
  _LSDServiceDomain *v20;
  _QWORD *v21;
  _QWORD *v22;
  unsigned __int8 v23;
  unint64_t v24;
  _LSDServiceDomain *v25;
  void *v26;
  void *v27;
  void *v28;
  BOOL v29;
  _LSDatabase *v30;
  _BOOL4 v31;
  LSSessionKey v32;
  NSObject *v33;
  id *v34;
  LSSessionKey v35;
  LSSessionKey v36;
  unsigned int *v37;
  int v38;
  void *v39;
  void *v40;
  id v41;
  LSSessionKey v42;
  uint64_t v43;
  int v44;
  unsigned __int8 v45;
  void *v46;
  NSObject *v47;
  _BOOL4 v48;
  void *v49;
  void *v50;
  id v51;
  char v52;
  id v53;
  NSObject *v54;
  void *v55;
  id v56;
  NSObject *v57;
  id v58;
  dispatch_time_t v59;
  _DWORD *v60;
  pid_t v62;
  void *v63;
  void *v64;
  id v65;
  unint64_t v66;
  _QWORD *v67;
  id v68;
  id v69;
  CFTypeRef cf;
  id location;
  void *v72;
  void **v73;
  uint64_t v74;
  char v75;
  unsigned int v76;
  id obj;
  id *p_obj;
  uint64_t v79;
  int v80;
  _OWORD block[2];
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;

  v93 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  IsCurrentThreadInLSContextInitReference = getIsCurrentThreadInLSContextInitReference();
  ++*IsCurrentThreadInLSContextInitReference;
  __LAUNCH_SERVICES_IS_GENERATING_A_SANDBOX_EXCEPTION_BECAUSE_THIS_PROCESS_MAY_NOT_MAP_THE_DATABASE__();
  __LAUNCH_SERVICES_IS_ABORTING_BECAUSE_THIS_PROCESS_MAY_NOT_MAP_THE_DATABASE__();
  *a1 = 0;
  if (objc_msgSend((id)__LSDefaultsGetSharedInstance(), "isServer"))
  {
    v68 = 0;
    v9 = (void *)_LSServer_CopyLocalDatabase(&v68);
    if (!v9)
    {
      v10 = _LSServer_SelfSessionKey();
      v11 = _LSDatabaseCreateFromPersistentStore(7, 0, &v68);
      v12 = v11;
      if (!v11)
      {
        v9 = 0;
        if ((a3 & 4) == 0)
        {
LABEL_7:
          if (v9)
            objc_storeStrong(a1, v9);
          v15 = v9 == 0;

          v16 = v68;
          if (!v15)
            goto LABEL_10;
          goto LABEL_67;
        }
LABEL_6:
        v14 = _LSDatabaseCreateSnapshot(v9, &v68);

        v9 = v14;
        goto LABEL_7;
      }
      _LSSetLocalDatabase(v11);
      v13 = _LSCopyLocalDatabase(v10, &v68);

      v9 = v13;
    }
    if ((a3 & 4) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
  v18 = (_LSDServiceDomain *)v7;
  location = 0;
  v19 = (void *)-[_LSDServiceDomain resolvedSessionKey]((uint64_t)v18);
  if ((os_unfair_recursive_lock_trylock() & 1) == 0)
  {
    if ((a3 & 1) != 0)
    {
      v67 = a4;
      v20 = v18;
      v21 = availabilityStateForServiceDomain(v20);
      v22 = v21;
      v23 = atomic_load((unsigned __int8 *)v21);
      if ((v23 & 1) != 0)
      {

        goto LABEL_25;
      }
      v24 = atomic_load(v21 + 1);
      os_unfair_lock_lock((os_unfair_lock_t)v21 + 4);
      if (v24 == v22[1])
      {
        v66 = v24;
        v25 = v20;
        v26 = (void *)objc_opt_class();
        _LSDServiceGetXPCConnection(v26, (uint64_t)v25);
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v27, "synchronousRemoteObjectProxyWithErrorHandler:", &__block_literal_global_268);
        v28 = (void *)objc_claimAutoreleasedReturnValue();

        obj = 0;
        p_obj = &obj;
        v79 = 0x2020000000;
        v80 = 0;
        v72 = 0;
        v73 = &v72;
        v74 = 0x2020000000;
        v75 = 0;
        *(_QWORD *)&block[0] = MEMORY[0x1E0C809B0];
        *((_QWORD *)&block[0] + 1) = 3221225472;
        *(_QWORD *)&block[1] = ___ZL34LSCheckDatabaseAvailableWithServerP17_LSDServiceDomain_block_invoke_269;
        *((_QWORD *)&block[1] + 1) = &unk_1E1042AE8;
        *(_QWORD *)&v82 = &obj;
        *((_QWORD *)&v82 + 1) = &v72;
        objc_msgSend(v28, "getServerStatusWithCompletionHandler:", block);
        if (*((_BYTE *)v73 + 24))
        {
          v29 = ((_DWORD)p_obj[3] & 0x80) == 0;
          _Block_object_dispose(&v72, 8);
          _Block_object_dispose(&obj, 8);

          a4 = v67;
          if (v29)
          {
            atomic_store(1u, (unsigned __int8 *)v22);
            atomic_store(v66 + 1, v22 + 1);
            os_unfair_lock_unlock((os_unfair_lock_t)v22 + 4);

            goto LABEL_25;
          }
        }
        else
        {
          _Block_object_dispose(&v72, 8);
          _Block_object_dispose(&obj, 8);

          a4 = v67;
        }
        atomic_store(v66 + 1, v22 + 1);
        os_unfair_lock_unlock((os_unfair_lock_t)v22 + 4);

      }
      else
      {
        v45 = *(_BYTE *)v22;
        os_unfair_lock_unlock((os_unfair_lock_t)v22 + 4);

        if ((v45 & 1) != 0)
          goto LABEL_25;
      }
      obj = (id)*MEMORY[0x1E0CB2938];
      *(_QWORD *)&block[0] = CFSTR("Database not availabile yet");
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", block, &obj, 1);
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2FE0], 36, (uint64_t)"_LSContextInitClient", 2986, v50);
      v64 = (void *)objc_claimAutoreleasedReturnValue();
      v65 = location;
      location = v64;

      goto LABEL_56;
    }
LABEL_25:
    os_unfair_recursive_lock_lock_with_options();
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)&gSessionLock);
  obj = location;
  v30 = (_LSDatabase *)_LSCopyLocalDatabase((unint64_t)v19, &obj);
  objc_storeStrong(&location, obj);
  if (v30)
  {
    v31 = _LSDatabaseNeedsUpdate(v30);
    if ((a3 & 2) == 0 && !v31)
    {
      os_unfair_recursive_lock_unlock();
LABEL_62:
      objc_storeStrong(a1, v30);
      v51 = 0;
      v52 = 1;
      goto LABEL_66;
    }
  }
  else
  {
    v32 = (LSSessionKey)v19;
    _LSDatabaseNotificationCheck(v32);
  }
  _LSDatabaseGetLog();
  v33 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
  {
    v62 = getpid();
    v63 = (void *)_LSSessionKeyCopyDescription((unint64_t)v19);
    LODWORD(block[0]) = 134218498;
    *(_QWORD *)((char *)block + 4) = v62;
    WORD6(block[0]) = 2112;
    *(_QWORD *)((char *)block + 14) = v63;
    WORD3(block[1]) = 2048;
    *((_QWORD *)&block[1] + 1) = v30;
    _os_log_debug_impl(&dword_182882000, v33, OS_LOG_TYPE_DEBUG, "LS DB needs to be mapped into process %llu for session %@ (existing DB @ %p).", (uint8_t *)block, 0x20u);

  }
  v72 = 0;
  cf = 0;
  if (objc_msgSend((id)__LSDefaultsGetSharedInstance(), "hasServer")
    && (cf = 0, _LSCopyServerStore(v18, a3, &v72, &cf, &location)))
  {
    v69 = location;
    v34 = _LSDatabaseCreate(v72, v19, cf, &v69);
    objc_storeStrong(&location, v69);

    v30 = (_LSDatabase *)v34;
    if (v34)
    {
      v35 = (LSSessionKey)v34[206];
      if (objc_msgSend((id)__LSDefaultsGetSharedInstance(), "hasServer"))
      {
        os_unfair_recursive_lock_lock_with_options();
        v36 = v35;
        v37 = (unsigned int *)(_LSGetSession(v36) + 12);
        v38 = atomic_load(v37);
        if (!notify_is_valid_token(v38))
        {
          objc_msgSend((id)__LSDefaultsGetSharedInstance(), "databaseUpdateNotificationNameForSessionKey:", v35);
          v39 = (void *)objc_claimAutoreleasedReturnValue();
          _LSGetDispatchTokenQueue();
          v40 = (void *)objc_claimAutoreleasedReturnValue();
          *(_QWORD *)&block[0] = MEMORY[0x1E0C809B0];
          *((_QWORD *)&block[0] + 1) = 3221225472;
          *(_QWORD *)&block[1] = ___ZL31_LSDatabaseNotificationRegister12LSSessionKey_block_invoke;
          *((_QWORD *)&block[1] + 1) = &unk_1E103FAD8;
          v41 = v39;
          *(_QWORD *)&v82 = v41;
          *((LSSessionKey *)&v82 + 1) = v35;
          LaunchServices::notifyd::NotifyToken::RegisterDispatch(v41, v40, block, &v76);
          LaunchServices::notifyd::NotifyToken::operator=((LaunchServices::notifyd::NotifyToken *)v37, (LaunchServices::notifyd::NotifyToken *)&v76);
          LaunchServices::notifyd::NotifyToken::~NotifyToken((LaunchServices::notifyd::NotifyToken *)&v76);

        }
        os_unfair_recursive_lock_unlock();
      }
      v42 = (LSSessionKey)v19;
      v43 = _LSGetSession(v42);
      *(_BYTE *)(v43 + 20) |= 4u;
      v44 = 1;
    }
    else
    {
      v44 = 0;
    }
    atomic_store(1u, (unsigned __int8 *)availabilityStateForServiceDomain(v18));
    if (v44)
      goto LABEL_57;
  }
  else
  {
    v44 = 0;
  }
  if (!location)
  {
    _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], -10813, (uint64_t)"_LSContextInitClient", 3080, 0);
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    v47 = location;
    location = v46;
LABEL_48:

    goto LABEL_49;
  }
LABEL_57:
  if (v44 && v30)
  {
    _LSSetLocalDatabase(v30);
    v91 = 0u;
    v92 = 0u;
    v89 = 0u;
    v90 = 0u;
    v87 = 0u;
    v88 = 0u;
    v85 = 0u;
    v86 = 0u;
    v83 = 0u;
    v84 = 0u;
    v82 = 0u;
    memset(block, 0, sizeof(block));
    _LSDatabaseGetHeader(block);
    _LSDatabaseGetLog();
    v47 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
      _LSContextInitCommon();
    goto LABEL_48;
  }
LABEL_49:
  if (cf)
    CFRelease(cf);

  os_unfair_recursive_lock_unlock();
  if (v30)
    v48 = 0;
  else
    v48 = v44 != 0;
  if (v48)
  {
    _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], -10813, (uint64_t)"_LSContextInitClient", 3094, 0);
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    v50 = location;
    location = v49;
LABEL_56:

    v30 = 0;
    goto LABEL_63;
  }
  if (v44)
    goto LABEL_62;
LABEL_63:
  v53 = *a1;
  *a1 = 0;

  _LSDatabaseGetLog();
  v54 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
    _LSContextInitCommon();

  v51 = objc_retainAutorelease(location);
  v52 = 0;
LABEL_66:

  v16 = v51;
  if ((v52 & 1) != 0)
  {
LABEL_10:
    if (_LSDatabaseGetNoServerLock::once != -1)
      dispatch_once(&_LSDatabaseGetNoServerLock::once, &__block_literal_global_83);
    if (_LSDatabaseGetNoServerLock::result)
      pthread_mutex_lock((pthread_mutex_t *)_LSDatabaseGetNoServerLock::result);
    v17 = 1;
    goto LABEL_74;
  }
LABEL_67:
  v55 = (void *)MEMORY[0x186DAE7A0]();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("_LSContextInitReturningError() failed with error %@"), v16);
  v56 = (id)objc_claimAutoreleasedReturnValue();
  if (_LSLoggingQueue(void)::onceToken != -1)
    dispatch_once(&_LSLoggingQueue(void)::onceToken, &__block_literal_global_216);
  v57 = _LSLoggingQueue(void)::logQueue;
  *(_QWORD *)&block[0] = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block[0] + 1) = 3221225472;
  *(_QWORD *)&block[1] = ___ZL18_LSSetCrashMessageP8NSString_block_invoke_0;
  *((_QWORD *)&block[1] + 1) = &unk_1E10418C8;
  *(_QWORD *)&v82 = v56;
  v58 = v56;
  dispatch_sync(v57, block);

  v59 = dispatch_time(0, 2000000000);
  if (_LSLoggingQueue(void)::onceToken != -1)
    dispatch_once(&_LSLoggingQueue(void)::onceToken, &__block_literal_global_216);
  dispatch_after(v59, (dispatch_queue_t)_LSLoggingQueue(void)::logQueue, &__block_literal_global_273);

  objc_autoreleasePoolPop(v55);
  if (a4)
  {
    v16 = objc_retainAutorelease(v16);
    v17 = 0;
    *a4 = v16;
  }
  else
  {
    v17 = 0;
  }
LABEL_74:
  v60 = getIsCurrentThreadInLSContextInitReference();
  --*v60;

  return v17;
}

void sub_182893604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, os_unfair_lock_t lock, uint64_t a13, uint64_t a14, uint64_t a15, CFTypeRef cf, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,char a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34)
{
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;

  LaunchServices::notifyd::NotifyToken::~NotifyToken((LaunchServices::notifyd::NotifyToken *)&a23);

  if (cf)
    CFRelease(cf);

  _Unwind_Resume(a1);
}

void *getIsCurrentThreadInLSContextInitReference(void)
{
  void *v0;

  if (getIsCurrentThreadInLSContextInitReference(void)::once != -1)
    dispatch_once(&getIsCurrentThreadInLSContextInitReference(void)::once, &__block_literal_global_274);
  v0 = pthread_getspecific(getIsCurrentThreadInLSContextInitReference(void)::key);
  if (!v0)
  {
    v0 = malloc_type_calloc(1uLL, 4uLL, 0x100004052888210uLL);
    pthread_setspecific(getIsCurrentThreadInLSContextInitReference(void)::key, v0);
  }
  return v0;
}

void sub_182893934(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __LSDefaultsGetSharedInstance()
{
  if (__LSDefaultsGetSharedInstance_onceToken != -1)
    dispatch_once(&__LSDefaultsGetSharedInstance_onceToken, &__block_literal_global_26);
  return __LSDefaultsGetSharedInstance_sharedInstance;
}

id _LSCopyLocalDatabase(unint64_t a1, _QWORD *a2)
{
  LSSessionKey v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  id v8;
  id v9;
  NSObject *v10;
  id v12;
  id v13;
  void *v14;
  int v15;
  id v16;
  __int16 v17;
  id v18;
  __int16 v19;
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  os_unfair_recursive_lock_lock_with_options();
  v4 = (LSSessionKey)a1;
  v5 = _LSGetSession(v4);
  if (!*(_QWORD *)(v5 + 24))
  {
    if (a2)
    {
      _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], -10813, (uint64_t)"_LSCopyLocalDatabase", 799, 0);
      v9 = (id)objc_claimAutoreleasedReturnValue();
LABEL_13:
      v8 = 0;
      *a2 = v9;
      goto LABEL_15;
    }
LABEL_14:
    v8 = 0;
    goto LABEL_15;
  }
  v6 = v5;
  v7 = *(_QWORD *)(*(_QWORD *)(v5 + 24) + 1648);
  if ((v7 & 0x100000000) == 0)
  {
    if ((a1 & 0x100000000) == 0 && (_DWORD)v7 == (_DWORD)a1)
      goto LABEL_5;
LABEL_9:
    _LSDatabaseGetLog();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
    {
      v12 = *(id *)(v6 + 24);
      v13 = (id)_LSSessionKeyCopyDescription(a1);
      v14 = (void *)_LSSessionKeyCopyDescription(v7);
      v15 = 138543874;
      v16 = v12;
      v17 = 2112;
      v18 = v13;
      v19 = 2112;
      v20 = v14;
      _os_log_fault_impl(&dword_182882000, v10, OS_LOG_TYPE_FAULT, "session key of database %{public}@ was expected to be %@, but was %@!", (uint8_t *)&v15, 0x20u);

    }
    if (a2)
    {
      _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], -10817, (uint64_t)"_LSCopyLocalDatabase", 794, 0);
      v9 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_13;
    }
    goto LABEL_14;
  }
  if ((a1 & 0x100000000) == 0)
    goto LABEL_9;
LABEL_5:
  v8 = *(id *)(v5 + 24);
LABEL_15:
  os_unfair_recursive_lock_unlock();
  return v8;
}

void sub_182893B78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t _LSGetSession(LSSessionKey a1)
{
  uint64_t v1;
  uint64_t v2;
  LSSessionKey v4;
  LSSessionKey *v5;

  v4 = a1;
  v1 = _LSGetSessions();
  v5 = &v4;
  v2 = std::__hash_table<std::__hash_value_type<LSSessionKey,LSSession *>,std::__unordered_map_hasher<LSSessionKey,std::__hash_value_type<LSSessionKey,LSSession *>,LSSessionKeyHasher,LSSessionKeyComparator,true>,std::__unordered_map_equal<LSSessionKey,std::__hash_value_type<LSSessionKey,LSSession *>,LSSessionKeyComparator,LSSessionKeyHasher,true>,std::allocator<std::__hash_value_type<LSSessionKey,LSSession *>>>::__emplace_unique_key_args<LSSessionKey,std::piecewise_construct_t const&,std::tuple<LSSessionKey const&>,std::tuple<>>(v1, (unsigned int *)&v4, (uint64_t)&std::piecewise_construct, (_QWORD **)&v5)[3];
  if (!v2)
  {
    v2 = operator new();
    *(_OWORD *)v2 = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
    *(_QWORD *)(v2 + 12) = -1;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    v5 = &v4;
    std::__hash_table<std::__hash_value_type<LSSessionKey,LSSession *>,std::__unordered_map_hasher<LSSessionKey,std::__hash_value_type<LSSessionKey,LSSession *>,LSSessionKeyHasher,LSSessionKeyComparator,true>,std::__unordered_map_equal<LSSessionKey,std::__hash_value_type<LSSessionKey,LSSession *>,LSSessionKeyComparator,LSSessionKeyHasher,true>,std::allocator<std::__hash_value_type<LSSessionKey,LSSession *>>>::__emplace_unique_key_args<LSSessionKey,std::piecewise_construct_t const&,std::tuple<LSSessionKey const&>,std::tuple<>>(v1, (unsigned int *)&v4, (uint64_t)&std::piecewise_construct, (_QWORD **)&v5)[3] = v2;
  }
  return v2;
}

_QWORD *std::__hash_table<std::__hash_value_type<LSSessionKey,LSSession *>,std::__unordered_map_hasher<LSSessionKey,std::__hash_value_type<LSSessionKey,LSSession *>,LSSessionKeyHasher,LSSessionKeyComparator,true>,std::__unordered_map_equal<LSSessionKey,std::__hash_value_type<LSSessionKey,LSSession *>,LSSessionKeyComparator,LSSessionKeyHasher,true>,std::allocator<std::__hash_value_type<LSSessionKey,LSSession *>>>::__emplace_unique_key_args<LSSessionKey,std::piecewise_construct_t const&,std::tuple<LSSessionKey const&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  if (*((_BYTE *)a2 + 4))
    v7 = 1;
  else
    v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = v7;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        v12 = *(_QWORD *)a2;
        do
        {
          v13 = v11[1];
          if (v13 == v7)
          {
            v14 = v11[2];
            if ((v14 & 0x100000000) != 0)
            {
              if ((v12 & 0x100000000) != 0)
                return v11;
            }
            else if ((v12 & 0x100000000) == 0 && (_DWORD)v14 == (_DWORD)v12)
            {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v13 >= v8)
                v13 %= v8;
            }
            else
            {
              v13 &= v8 - 1;
            }
            if (v13 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x20uLL);
  *v11 = 0;
  v11[1] = v7;
  v11[2] = **a4;
  v11[3] = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__rehash<true>(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *v11 = *v22;
LABEL_46:
    *v22 = v11;
    goto LABEL_47;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    v23 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8)
        v23 %= v8;
    }
    else
    {
      v23 &= v8 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_46;
  }
LABEL_47:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_182893E8C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _LSGetSessions(void)
{
  if (_LSSessionInitMemoryWarningListener(void)::once != -1)
    dispatch_once(&_LSSessionInitMemoryWarningListener(void)::once, &__block_literal_global_158);
  if (_LSGetSessions(void)::once != -1)
    dispatch_once(&_LSGetSessions(void)::once, &__block_literal_global_157);
  return _LSGetSessions(void)::sessions;
}

uint64_t __LAUNCH_SERVICES_IS_GENERATING_A_SANDBOX_EXCEPTION_BECAUSE_THIS_PROCESS_MAY_NOT_MAP_THE_DATABASE__()
{
  uint64_t result;

  result = _LSCurrentProcessMayMapDatabase();
  if (!(_DWORD)result)
    return __LAUNCH_SERVICES_IS_GENERATING_A_SANDBOX_EXCEPTION__("forbidden-map-ls-database");
  return result;
}

uint64_t __LAUNCH_SERVICES_IS_ABORTING_BECAUSE_THIS_PROCESS_MAY_NOT_MAP_THE_DATABASE__()
{
  uint64_t result;

  result = _LSCurrentProcessMayMapDatabase();
  if (!(_DWORD)result)
  {
    result = objc_msgSend((id)__LSDefaultsGetSharedInstance(), "abortIfMayNotMapDatabase");
    if ((_DWORD)result)
      abort();
  }
  return result;
}

uint64_t _LSCurrentProcessMayMapDatabase()
{
  unsigned __int8 v0;

  if (_LSCurrentProcessMayMapDatabase::once != -1)
    dispatch_once(&_LSCurrentProcessMayMapDatabase::once, &__block_literal_global_114);
  v0 = atomic_load(mayMapDatabase);
  return v0 & 1;
}

BOOL _LSDatabaseNeedsUpdate(_LSDatabase *a1)
{
  _LSDatabase *v1;
  _BOOL8 v2;
  LSSessionKey sessionKey;

  v1 = a1;
  if ((*((_BYTE *)v1 + 1664) & 6) != 0)
  {
    v2 = 0;
  }
  else
  {
    os_unfair_recursive_lock_lock_with_options();
    if ((*((_BYTE *)v1 + 1664) & 1) != 0)
    {
      v2 = 1;
    }
    else
    {
      sessionKey = v1->sessionKey;
      v2 = _LSDatabaseNotificationCheck(sessionKey);
      *((_BYTE *)v1 + 1664) = *((_BYTE *)v1 + 1664) & 0xFE | v2;
    }
    os_unfair_recursive_lock_unlock();
  }

  return v2;
}

void sub_182894104(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL _LSDatabaseNotificationCheck(LSSessionKey a1)
{
  LSSessionKey v2;
  unsigned int *v3;
  int v4;
  LaunchServices::notifyd::NotifyToken *v5;
  int v6;
  unint64_t v7;
  _BOOL8 v9;
  unsigned int v11;

  os_unfair_recursive_lock_lock_with_options();
  v2 = a1;
  v3 = (unsigned int *)(_LSGetSession(v2) + 16);
  v4 = atomic_load(v3);
  if (!notify_is_valid_token(v4))
  {
    objc_msgSend((id)__LSDefaultsGetSharedInstance(), "databaseUpdateNotificationNameForSessionKey:", a1);
    v5 = (LaunchServices::notifyd::NotifyToken *)objc_claimAutoreleasedReturnValue();
    LaunchServices::notifyd::NotifyToken::RegisterCheck(v5, &v11);
    LaunchServices::notifyd::NotifyToken::operator=((LaunchServices::notifyd::NotifyToken *)v3, (LaunchServices::notifyd::NotifyToken *)&v11);
    LaunchServices::notifyd::NotifyToken::~NotifyToken((LaunchServices::notifyd::NotifyToken *)&v11);

  }
  if ((objc_msgSend((id)__LSDefaultsGetSharedInstance(), "hasServer") & 1) != 0
    || objc_msgSend((id)__LSDefaultsGetSharedInstance(), "isServer"))
  {
    v6 = atomic_load(v3);
    if (notify_is_valid_token(v6))
    {
      v7 = LaunchServices::notifyd::NotifyToken::checkValue((LaunchServices::notifyd::NotifyToken *)v3);
      v9 = (v7 & 0xFF00000000) == 0 || (_DWORD)v7 != 0;
    }
    else
    {
      v9 = 1;
    }
  }
  else
  {
    v9 = 0;
  }
  os_unfair_recursive_lock_unlock();
  return v9;
}

void sub_1828941EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11)
{
  void *v11;

  LaunchServices::notifyd::NotifyToken::~NotifyToken((LaunchServices::notifyd::NotifyToken *)&a11);

  _Unwind_Resume(a1);
}

unint64_t LaunchServices::notifyd::NotifyToken::checkValue(LaunchServices::notifyd::NotifyToken *this)
{
  int v1;
  uint32_t v2;
  uint64_t v3;
  int check;

  check = 0;
  v1 = atomic_load((unsigned int *)this);
  v2 = notify_check(v1, &check);
  if (v2)
    v3 = 0;
  else
    v3 = check;
  return v3 | ((unint64_t)(v2 == 0) << 32);
}

uint64_t _LSContextDestroy(void **a1)
{
  void *v1;
  uint64_t result;

  v1 = *a1;
  *a1 = 0;

  if (_LSDatabaseGetNoServerLock::once != -1)
    dispatch_once(&_LSDatabaseGetNoServerLock::once, &__block_literal_global_83);
  result = _LSDatabaseGetNoServerLock::result;
  if (_LSDatabaseGetNoServerLock::result)
    return pthread_mutex_unlock((pthread_mutex_t *)_LSDatabaseGetNoServerLock::result);
  return result;
}

void sub_1828943F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1828944E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_182894634(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t _LSGetPlugin(uint64_t a1, int a2)
{
  if (a1 && a2)
    return CSStoreGetUnit();
  else
    return 0;
}

void LaunchServices::BindingEvaluator::setFilter(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;

  v5 = objc_msgSend(a3, "copy");
  v6 = *(void **)(a1 + 136);
  *(_QWORD *)(a1 + 136) = v5;

  v7 = objc_msgSend(a2, "copy");
  v8 = *(void **)(a1 + 144);
  *(_QWORD *)(a1 + 144) = v7;

}

void sub_1828949A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,id a31)
{
  void *v31;

  _Block_object_dispose(&a20, 8);

  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

uint64_t __LSRECORD_IS_PERFORMING_IO_FOR_A_CALLER__(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

void sub_182894D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;
  void *v26;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

__n128 LaunchServices::BindingEvaluator::CreateWithBundleInfo@<Q0>(LaunchServices::BindingEvaluator *this@<X0>, NSString *a2@<X1>, NSString *a3@<X2>, LSVersionNumber *a4@<X4>, _OWORD *a5@<X3>, uint64_t a6@<X8>)
{
  char v6;
  unsigned int v8;
  NSObject *v12;
  __CFString *v13;
  __int128 v14;
  void *v15;
  __CFString *v16;
  __int128 v17;
  void *v18;
  NSString *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  __n128 result;
  __int128 v25;
  _OWORD v26[2];
  _OWORD v27[2];
  uint8_t buf[4];
  LaunchServices::BindingEvaluator *v29;
  __int16 v30;
  NSString *v31;
  __int16 v32;
  __CFString *v33;
  __int16 v34;
  void *v35;
  uint64_t v36;

  v6 = (char)a4;
  v8 = a3;
  v36 = *MEMORY[0x1E0C80C00];
  LaunchServices::BindingEvaluator::BindingEvaluator((LaunchServices::BindingEvaluator *)a6);
  _LSBindingLog();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    v13 = (id)_LSCopyStringForOSType(v8);
    v14 = a5[1];
    v27[0] = *a5;
    v27[1] = v14;
    _LSVersionNumberGetStringRepresentation(v27);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138478595;
    v29 = this;
    v30 = 2113;
    v31 = a2;
    v32 = 2114;
    v33 = v13;
    v34 = 2114;
    v35 = v15;
    _os_log_impl(&dword_182882000, v12, OS_LOG_TYPE_DEBUG, "BindingEvaluator::CreateWithBundleInfo(ID=%{private}@, name=%{private}@, CC=%{public}@, vers=%{public}@)", buf, 0x2Au);

  }
  v16 = (__CFString *)_LSCopyStringForOSType(v8);
  v17 = a5[1];
  v26[0] = *a5;
  v26[1] = v17;
  _LSVersionNumberGetStringRepresentation(v26);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)CFSTR("Creating binding evaluator for bundle info: ID=%@, name=%@, CC=%@, vers=%@"), v19, this, a2, v16, v18);

  v20 = -[LaunchServices::BindingEvaluator copy](this, "copy");
  v21 = *(void **)(a6 + 32);
  *(_QWORD *)(a6 + 32) = v20;

  v22 = -[NSString copy](a2, "copy");
  v23 = *(void **)(a6 + 40);
  *(_QWORD *)(a6 + 40) = v22;

  result = *(__n128 *)a5;
  v25 = a5[1];
  *(_OWORD *)(a6 + 48) = *a5;
  *(_OWORD *)(a6 + 64) = v25;
  *(_BYTE *)(a6 + 88) = 1;
  *(_BYTE *)(a6 + 89) = v6;
  return result;
}

void sub_182894FB4(_Unwind_Exception *a1)
{
  id *v1;
  void *v2;
  void *v3;

  LaunchServices::BindingEvaluator::~BindingEvaluator(v1);
  _Unwind_Resume(a1);
}

CFStringRef _LSVersionNumberGetStringRepresentation(_OWORD *a1)
{
  __int128 v1;
  _OWORD v3[2];

  v1 = a1[1];
  v3[0] = *a1;
  v3[1] = v1;
  return (id)LaunchServices::VersionNumber::copyStringRepresentation((LaunchServices::VersionNumber *)v3);
}

CFStringRef LaunchServices::VersionNumber::copyStringRepresentation(LaunchServices::VersionNumber *this)
{
  _QWORD *v2;
  const char *p_p;
  CFStringRef v4;
  void *__p;
  char v7;
  _QWORD v8[11];
  char v9;
  uint64_t v10;

  if (!*(_QWORD *)this && !*((_QWORD *)this + 1) && !*((_QWORD *)this + 2))
    return 0;
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v8);
  v2 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v2, (uint64_t)".", 1);
  std::ostream::operator<<();
  if (*((_QWORD *)this + 2))
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v8, (uint64_t)".", 1);
    std::ostream::operator<<();
  }
  std::stringbuf::str();
  if (v7 >= 0)
    p_p = (const char *)&__p;
  else
    p_p = (const char *)__p;
  v4 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], p_p, 0x8000100u);
  if (v7 < 0)
    operator delete(__p);
  v8[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v8 + *(_QWORD *)(v8[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v8[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v9 < 0)
    operator delete((void *)v8[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x186DADED0](&v10);
  return v4;
}

void sub_182895188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

LaunchServices::BindingEvaluator *LaunchServices::BindingEvaluator::BindingEvaluator(LaunchServices::BindingEvaluator *this)
{
  _DWORD *v2;

  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 3) = kLSVersionNumberNull;
  *((_OWORD *)this + 4) = *(_OWORD *)algn_1829FAD90;
  *((_QWORD *)this + 10) = 0;
  *((_WORD *)this + 44) = 0;
  *((_QWORD *)this + 12) = 32;
  *((_DWORD *)this + 26) = 14;
  *(_QWORD *)((char *)this + 108) = 0;
  *(_QWORD *)((char *)this + 124) = 0;
  *(_QWORD *)((char *)this + 116) = 0;
  *((_DWORD *)this + 33) = 0;
  v2 = operator new(4uLL);
  *((_QWORD *)this + 14) = v2;
  *v2++ = 2;
  *((_QWORD *)this + 15) = v2;
  *((_QWORD *)this + 16) = v2;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  return this;
}

void sub_182895248(_Unwind_Exception *a1)
{
  id *v1;

  _Unwind_Resume(a1);
}

CFStringRef _LSCopyStringForOSType(unsigned int a1)
{
  unsigned int v1;
  UInt8 bytes[4];

  if (a1)
    v1 = a1;
  else
    v1 = 1061109567;
  *(_DWORD *)bytes = bswap32(v1);
  return CFStringCreateWithBytes(0, bytes, 4, 0, 0);
}

uint64_t _LSDatabaseContextGetCurrentContext(LaunchServices::DatabaseContext *a1)
{
  return *LaunchServices::DatabaseContext::getPerThreadStateReference(a1);
}

_QWORD *LaunchServices::DatabaseContext::getPerThreadStateReference(LaunchServices::DatabaseContext *this)
{
  _QWORD *v1;

  if (LaunchServices::DatabaseContext::getPerThreadStateReference(void)::once != -1)
    dispatch_once(&LaunchServices::DatabaseContext::getPerThreadStateReference(void)::once, &__block_literal_global_74);
  v1 = pthread_getspecific(LaunchServices::DatabaseContext::getPerThreadStateReference(void)::key);
  if (!v1)
  {
    v1 = (_QWORD *)operator new();
    *v1 = 0;
    v1[1] = 0;
    *((_BYTE *)v1 + 16) = 0;
    v1[3] = 0;
    v1[4] = 0;
    *((_BYTE *)v1 + 40) = 0;
    pthread_setspecific(LaunchServices::DatabaseContext::getPerThreadStateReference(void)::key, v1);
  }
  return v1;
}

void sub_182895698(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _LSFindBundleWithInfo_NoIOFiltered(void *a1, unint64_t a2, void *a3, int a4, const void *a5, uint64_t a6, void *a7, void *a8, _QWORD *a9)
{
  id v16;
  BOOL v17;
  CFErrorRef v18;
  FSNode *v19;
  int v20;
  _BOOL4 v21;
  char v23;
  char v24;
  _BOOL4 v25;
  id v26;
  BOOL v27;
  id v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v33;
  id v34;
  void *v35;
  void *v36;
  id v37;
  _QWORD v38[4];
  id v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  void *v43;
  id v44;
  id v45;
  id v46;
  id v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  int v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v37 = a7;
  v16 = a8;
  v52 = 0;
  v53 = &v52;
  v54 = 0x2020000000;
  v55 = 0;
  v48 = 0;
  v49 = &v48;
  v50 = 0x2020000000;
  v51 = 0;
  if (!a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "LSBundleID _LSFindBundleWithInfo_NoIOFiltered(LSContext * _Nonnull, LSBundleType, CFStringRef _Nullable, Boolean, CFURLRef _Nullable, UInt64, NSString *__strong _Nullable, BOOL (^__strong _Nullable)(LSContext *, LSBundleID, const LSBundleData *), NSError *__autoreleasing * _Nullable)");
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v35, "handleFailureInFunction:file:lineNumber:description:", v36, CFSTR("LSBundleProxy.m"), 130, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("inContext != NULL"));

  }
  if (a3)
  {
    if (a2 == 7)
    {
      v56 = kLSVersionNumberNull;
      v57 = *(_OWORD *)algn_1829FAD90;
      v17 = _LSBundleFindWithInfoAndNo_IOFilter((uint64_t)a1, 0, a3, a4 != 0, &v56, 14, 1152, v37, v16, (_DWORD *)v53 + 6, 0, a9);
      *((_BYTE *)v49 + 24) = v17;
      goto LABEL_39;
    }
    if (a2 >= 2)
    {
      v26 = 0;
      if (!*((_BYTE *)v49 + 24))
      {
LABEL_20:
        if (a2 == 3 || !a2)
        {
          v46 = v26;
          v56 = kLSVersionNumberNull;
          v57 = *(_OWORD *)algn_1829FAD90;
          v27 = _LSBundleFindWithInfoAndNo_IOFilter((uint64_t)a1, 0, a3, a4 != 0, &v56, 2, 1152, v37, v16, (_DWORD *)v53 + 6, 0, &v46);
          v28 = v46;

          *((_BYTE *)v49 + 24) = v27;
          v26 = v28;
          if (v27)
            goto LABEL_28;
        }
        if ((a2 | 8) == 8)
        {
          v45 = v26;
          v56 = kLSVersionNumberNull;
          v57 = *(_OWORD *)algn_1829FAD90;
          v29 = _LSBundleFindWithInfoAndNo_IOFilter((uint64_t)a1, 0, a3, a4 != 0, &v56, 16, 32896, v37, v16, (_DWORD *)v53 + 6, 0, &v45);
          v28 = v45;

          *((_BYTE *)v49 + 24) = v29;
          if (v29)
            goto LABEL_28;
        }
        else
        {
          v28 = v26;
        }
        if (a2 != 5 && a2)
          goto LABEL_47;
        v44 = v28;
        v56 = kLSVersionNumberNull;
        v57 = *(_OWORD *)algn_1829FAD90;
        v33 = _LSBundleFindWithInfoAndNo_IOFilter((uint64_t)a1, 0, a3, a4 != 0, &v56, 13, 128, v37, v16, (_DWORD *)v53 + 6, 0, &v44);
        v34 = v44;

        *((_BYTE *)v49 + 24) = v33;
        v28 = v34;
        if (!v33)
        {
LABEL_47:
          if (!v28)
          {
            _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], -10814, (uint64_t)"_LSFindBundleWithInfo_NoIOFiltered", 166, 0);
            v28 = (id)objc_claimAutoreleasedReturnValue();
          }
        }
        goto LABEL_28;
      }
    }
    else
    {
      v47 = 0;
      v56 = kLSVersionNumberNull;
      v57 = *(_OWORD *)algn_1829FAD90;
      v25 = _LSBundleFindWithInfoAndNo_IOFilter((uint64_t)a1, 0, a3, a4 != 0, &v56, 2, 128, v37, v16, (_DWORD *)v53 + 6, 0, &v47);
      v26 = v47;
      *((_BYTE *)v49 + 24) = v25;
      if (!v25)
        goto LABEL_20;
    }
    v28 = v26;
LABEL_28:
    if (a9)
      *a9 = objc_retainAutorelease(v28);

    goto LABEL_39;
  }
  if (a5)
  {
    v18 = _LSCreateResolvedURL(a5);
    v19 = -[FSNode initWithURL:flags:error:]([FSNode alloc], "initWithURL:flags:error:", v18, 0, a9);
    if (v19)
    {
      *(_QWORD *)&v56 = 0;
      v20 = _LSBundleFindWithNode((uint64_t)a1, v19, (_DWORD *)v53 + 6, &v56);
      v21 = _LSGetNSErrorFromOSStatusImpl(v20, a9, (uint64_t)"_LSFindBundleWithInfo_NoIOFiltered", 178);
      *((_BYTE *)v49 + 24) = v21;
      if (v16 && v21)
      {
        v23 = (*((uint64_t (**)(id, void *, _QWORD, _QWORD))v16 + 2))(v16, a1, *((unsigned int *)v53 + 6), v56);
        *((_BYTE *)v49 + 24) = v23;
        v24 = a9 ? v23 : 1;
        if ((v24 & 1) == 0)
        {
          _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], -10814, (uint64_t)"_LSFindBundleWithInfo_NoIOFiltered", 185, 0);
          *a9 = (id)objc_claimAutoreleasedReturnValue();
        }
      }
    }

  }
  else if (a6)
  {
    if (a2 == 5)
      v30 = 13;
    else
      v30 = 2;
    v38[0] = MEMORY[0x1E0C809B0];
    v38[1] = 3221225472;
    v38[2] = ___LSFindBundleWithInfo_NoIOFiltered_block_invoke;
    v38[3] = &unk_1E1041DA0;
    v42 = a6;
    v39 = v16;
    v40 = &v52;
    v43 = a1;
    v41 = &v48;
    _LSEnumerateViableBundlesOfClass(a1, v30, v38);
    if (a9 && !*((_BYTE *)v49 + 24))
    {
      _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], -10814, (uint64_t)"_LSFindBundleWithInfo_NoIOFiltered", 203, 0);
      *a9 = (id)objc_claimAutoreleasedReturnValue();
    }

  }
LABEL_39:
  if (*((_BYTE *)v49 + 24))
  {
    v31 = *((unsigned int *)v53 + 6);
  }
  else
  {
    v31 = 0;
    *((_DWORD *)v53 + 6) = 0;
  }
  _Block_object_dispose(&v48, 8);
  _Block_object_dispose(&v52, 8);

  return v31;
}

void sub_182895C94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

void sub_182895D40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_182895E40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

CFErrorRef _LSCreateResolvedURL(const void *a1)
{
  int v2;
  const __CFAllocator *v3;
  const __CFAllocator *v4;
  const __CFString *v5;
  int *v6;
  CFErrorRef v7;
  NSObject *v8;
  const __CFAllocator *v9;
  NSObject *v10;
  const __CFString *v12;
  const __CFString *v13;
  __int128 v14;
  uint64_t v15;
  _OWORD v16[65];
  UInt8 buffer[1024];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (!CFURLGetFileSystemRepresentation((CFURLRef)a1, 1u, buffer, 1024))
  {
    v9 = CFGetAllocator(a1);
    v7 = CFErrorCreate(v9, (CFErrorDomain)*MEMORY[0x1E0C9AFB8], 4, 0);
    _LSDefaultLog();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      _LSCreateResolvedURL_cold_2();
    goto LABEL_7;
  }
  v15 = 0;
  v14 = xmmword_1829FAA08;
  memset(v16, 0, 512);
  v2 = getattrlist((const char *)buffer, &v14, v16, 0x40CuLL, 0x21u);
  v3 = CFGetAllocator(a1);
  v4 = v3;
  if (v2)
  {
    v5 = (const __CFString *)*MEMORY[0x1E0C9AFD0];
    v6 = __error();
    v7 = CFErrorCreate(v4, v5, *v6, 0);
    _LSDefaultLog();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      _LSCreateResolvedURL_cold_3();
LABEL_7:

    goto LABEL_8;
  }
  v12 = CFStringCreateWithFileSystemRepresentation(v3, (const char *)v16 + SDWORD1(v16[0]) + 4);
  if (v12)
  {
    v13 = v12;
    v7 = CFURLCreateWithFileSystemPath((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v12, kCFURLPOSIXPathStyle, 1u);
    CFRelease(v13);
    if (v7)
      return v7;
  }
  else
  {
    v7 = 0;
  }
LABEL_8:
  _LSDefaultLog();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    _LSCreateResolvedURL_cold_1();

  if (v7)
    CFRelease(v7);
  return (CFErrorRef)CFRetain(a1);
}

void LaunchServices::notifyd::NotifyToken::~NotifyToken(LaunchServices::notifyd::NotifyToken *this)
{
  int v2;
  int v3;

  v2 = atomic_load((unsigned int *)this);
  if (notify_is_valid_token(v2))
  {
    v3 = atomic_load((unsigned int *)this);
    notify_cancel(v3);
  }
}

void LaunchServices::notifyd::NotifyToken::RegisterDispatch(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, unsigned int *a4@<X8>)
{
  id v7;
  NSObject *v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t);
  void *v17;
  id v18;
  int out_token;

  v7 = a1;
  v8 = a2;
  v9 = a3;
  *a4 = -1;
  v10 = (void *)MEMORY[0x186DAE7A0]();
  out_token = -1;
  v14 = MEMORY[0x1E0C809B0];
  v15 = 3221225472;
  v16 = ___ZN14LaunchServices7notifyd11NotifyToken16RegisterDispatchEP8NSStringPU28objcproto17OS_dispatch_queue8NSObjectU13block_pointerFvvE_block_invoke;
  v17 = &unk_1E10445B0;
  v11 = v9;
  v18 = v11;
  v12 = (void *)MEMORY[0x186DAE9BC](&v14);
  v13 = objc_retainAutorelease(v7);
  if (!notify_register_dispatch((const char *)objc_msgSend(v13, "UTF8String", v14, v15, v16, v17), &out_token, v8, v12))
    atomic_store(out_token, a4);

  objc_autoreleasePoolPop(v10);
}

void sub_18289621C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  void *v13;
  LaunchServices::notifyd::NotifyToken *v14;
  void *v15;
  void *v16;

  LaunchServices::notifyd::NotifyToken::~NotifyToken(v14);

  _Unwind_Resume(a1);
}

void LaunchServices::notifyd::NotifyToken::RegisterCheck(LaunchServices::notifyd::NotifyToken *this@<X0>, unsigned int *a2@<X8>)
{
  LaunchServices::notifyd::NotifyToken *v4;
  void *v5;
  LaunchServices::notifyd::NotifyToken *v6;
  int out_token;

  v4 = this;
  *a2 = -1;
  v5 = (void *)MEMORY[0x186DAE7A0]();
  out_token = -1;
  v6 = objc_retainAutorelease(v4);
  if (!notify_register_check((const char *)-[LaunchServices::notifyd::NotifyToken UTF8String](v6, "UTF8String"), &out_token))atomic_store(out_token, a2);
  objc_autoreleasePoolPop(v5);

}

void sub_1828962C8(_Unwind_Exception *a1)
{
  LaunchServices::notifyd::NotifyToken *v1;
  void *v2;

  LaunchServices::notifyd::NotifyToken::~NotifyToken(v1);

  _Unwind_Resume(a1);
}

id _LSGetDispatchTokenQueue(void)
{
  if (_LSGetDispatchTokenQueue(void)::once != -1)
    dispatch_once(&_LSGetDispatchTokenQueue(void)::once, &__block_literal_global_275);
  return (id)_LSGetDispatchTokenQueue(void)::result;
}

void sub_182896670(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_182896738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_18289683C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828968A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_182896BC4()
{
  __break(1u);
}

void sub_182896BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  objc_end_catch();

  _Unwind_Resume(a1);
}

uint64_t __LSRECORD_IS_CONSTRUCTING_A_COMPATIBILITY_OBJECT__(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

void ___ZZ31__LSRecord_compatibilityObject_ENK3__0clEP9LSContextjjPKv_block_invoke(uint64_t a1)
{
  uint64_t v2;
  void **v3;
  void *v4;

  objc_msgSend(**(id **)(a1 + 40), "_compatibilityObjectWithContext:tableID:unitID:unitBytes:", *(_QWORD *)(a1 + 48), *(unsigned int *)(a1 + 64), *(unsigned int *)(a1 + 68), *(_QWORD *)(a1 + 56));
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(void ***)(a1 + 32);
  v4 = *v3;
  *v3 = (void *)v2;

}

void sub_182896CEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182896DE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_182897198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,id a46)
{
  _Block_object_dispose(&a36, 8);
  _Block_object_dispose(&a40, 8);

  _Unwind_Resume(a1);
}

void sub_18289736C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_182897688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

void sub_182897768(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828977AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828977F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828978A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_182897948(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828979F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL _XCFStringEqualCaseInsensitive(const __CFString *a1, const __CFString *a2)
{
  return CFStringCompare(a1, a2, 1uLL) == kCFCompareEqualTo;
}

Boolean UTTypeEqual(CFStringRef inUTI1, CFStringRef inUTI2)
{
  Boolean v2;

  if (inUTI1 && inUTI1 == inUTI2)
    return 1;
  v2 = 0;
  if (inUTI1 && inUTI2)
    return _XCFStringEqualCaseInsensitive(inUTI1, inUTI2);
  return v2;
}

uint64_t _LSDatabaseGetSequenceNumber()
{
  _OWORD v1[11];
  __int128 v2;
  __int128 v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v2 = 0u;
  v3 = 0u;
  memset(v1, 0, sizeof(v1));
  _LSDatabaseGetHeader(v1);
  return v2;
}

id _LSDatabaseGetCacheGUID()
{
  _OWORD v1[13];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  memset(v1, 0, sizeof(v1));
  _LSDatabaseGetHeader(v1);
  return (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDBytes:", (char *)&v1[11] + 8);
}

void sub_182898778(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18289880C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1828988FC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  __break(1u);
}

void sub_182898934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  objc_end_catch();

  _Unwind_Resume(a1);
}

BOOL _LSDatabaseContextGetDetachProxyObjects(LaunchServices::DatabaseContext *a1)
{
  return *((_BYTE *)LaunchServices::DatabaseContext::getPerThreadStateReference(a1) + 40) == 0;
}

void sub_182898C28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

id _LSDBEnumeratorGetNextObject(uint64_t a1)
{
  _LSDServiceDomain *v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  NSObject *v8;
  int v9;
  id v10;
  uint64_t v11;
  int v12;
  id v13;
  _LSDServiceDomain *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  void *v18;
  void *v19;
  id v20;
  __int128 v22;
  id v23;
  uint8_t buf[4];
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v23 = 0;
  if ((*(_BYTE *)(a1 + 80) & 1) != 0)
    goto LABEL_21;
  +[_LSDServiceDomain defaultServiceDomain]();
  v2 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
  v3 = LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)(a1 + 32), v2, 0);

  if (!v3)
  {
    +[_LSDServiceDomain defaultServiceDomain]();
    v14 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
    v15 = LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)(a1 + 32), v14, 0);

    if (v15)
      v16 = 0;
    else
      v16 = *(id *)(a1 + 56);
    _LSEnumeratorFireErrorHandler((unsigned __int8 *)a1, v16);

LABEL_21:
    if ((*(_BYTE *)(a1 + 80) & 1) != 0)
    {
      v13 = 0;
    }
    else
    {
      *(_BYTE *)(a1 + 80) |= 1u;
      *(_QWORD *)(a1 + 64) = -1;
      v17 = a1 + 32;
      if (*(_QWORD *)v17 && *(_BYTE *)(v17 + 16))
        _LSContextDestroy(*(void ***)v17);
      v18 = *(void **)(v17 + 8);
      *(_QWORD *)v17 = 0;
      *(_QWORD *)(v17 + 8) = 0;

      *(_BYTE *)(v17 + 16) = 0;
      v19 = *(void **)(v17 + 24);
      *(_QWORD *)(v17 + 24) = 0;

      v13 = v23;
    }
    goto LABEL_27;
  }
  if (!_LSDBEnumeratorPrepareIfNeeded(a1))
    goto LABEL_21;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)&v4 = 138478083;
  v22 = v4;
  do
  {
    v7 = (void *)MEMORY[0x186DAE7A0]();
    v8 = _LSEnumeratorLog;
    if (os_log_type_enabled((os_log_t)_LSEnumeratorLog, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = v22;
      v25 = a1;
      v26 = 2048;
      v27 = v6;
      _os_log_debug_impl(&dword_182882000, v8, OS_LOG_TYPE_DEBUG, "Enumerator %{private}@ iteration %llu", buf, 0x16u);
    }
    v9 = objc_msgSend((id)a1, "_getObject:atIndex:context:", &v23, v6, v3, v22);
    if (v23 && v5 && ((*(uint64_t (**)(uint64_t))(v5 + 16))(v5) & 1) == 0)
    {
      v10 = v23;
      v23 = 0;

    }
    objc_autoreleasePoolPop(v7);
    v11 = v6 + 1;
    v12 = (v6 != -1) & ~((uint64_t)((unint64_t)(v6 == -1) << 63) >> 63 != (v6 == -1));
    v13 = v23;
    if (v23)
      v12 = 0;
    ++v6;
  }
  while ((v12 & v9 & 1) != 0);
  *(_QWORD *)(a1 + 64) = v11;
  if (!v13)
    goto LABEL_21;
LABEL_27:
  v20 = v13;

  return v20;
}

void sub_182898FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_18289929C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18289940C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t _LSDBEnumeratorPrepareIfNeeded(uint64_t a1)
{
  void *v2;
  _LSDServiceDomain *v3;
  uint64_t v4;
  int v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  void *v9;
  _LSDServiceDomain *v10;
  uint64_t v11;
  void *v13;
  void *v14;
  id v15;
  _BYTE v16[24];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(a1 + 80) & 2) == 0)
  {
    *(_BYTE *)(a1 + 80) |= 2u;
    if (*(_QWORD *)(a1 + 64))
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "BOOL _LSDBEnumeratorPrepareIfNeeded(_LSDBEnumerator *const __strong _Nonnull)");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "handleFailureInFunction:file:lineNumber:description:", v14, CFSTR("LSEnumerator.mm"), 226, CFSTR("Need to prepare after first iteration. This should not be possible."));

    }
    v2 = (void *)MEMORY[0x186DAE7A0]();
    +[_LSDServiceDomain defaultServiceDomain]();
    v3 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
    v4 = LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)(a1 + 32), v3, 0);

    if (v4)
    {
      v15 = 0;
      v5 = objc_msgSend((id)a1, "_prepareWithContext:error:", v4, &v15);
      v6 = v15;
      v7 = _LSEnumeratorLog;
      if (v5)
      {
        if (os_log_type_enabled((os_log_t)_LSEnumeratorLog, OS_LOG_TYPE_DEBUG))
          _LSDBEnumeratorPrepareIfNeeded_cold_2(a1, v7);
        *(_BYTE *)(a1 + 80) |= 4u;
      }
      else
      {
        if (os_log_type_enabled((os_log_t)_LSEnumeratorLog, OS_LOG_TYPE_ERROR))
          _LSDBEnumeratorPrepareIfNeeded_cold_3();
        _LSEnumeratorFireErrorHandler((unsigned __int8 *)a1, v6);
      }
    }
    else
    {
      v8 = (id)_LSEnumeratorLog;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        LaunchServices::Database::Context::error((id *)(a1 + 32));
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        _LSDBEnumeratorPrepareIfNeeded_cold_1(a1, v9, (uint64_t)v16, v8);
      }

      +[_LSDServiceDomain defaultServiceDomain]();
      v10 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
      v11 = LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)(a1 + 32), v10, 0);

      if (v11)
        v6 = 0;
      else
        v6 = *(id *)(a1 + 56);
      _LSEnumeratorFireErrorHandler((unsigned __int8 *)a1, v6);
    }

    objc_autoreleasePoolPop(v2);
  }
  return (*(unsigned __int8 *)(a1 + 80) >> 2) & 1;
}

void sub_1828996A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_182899784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_182899918(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182899EA0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _LSGetExtensionPointData(uint64_t a1, int a2)
{
  if (a1 && a2)
    return CSStoreGetUnit();
  else
    return 0;
}

void sub_18289A260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void __Block_byref_object_dispose_(uint64_t a1)
{

}

void __Block_byref_object_dispose__0(uint64_t a1)
{

}

void __Block_byref_object_dispose__1(uint64_t a1)
{

}

uint64_t __Block_byref_object_dispose__2(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>>>::~__hash_table(a1 + 48);
}

void __Block_byref_object_dispose__3(uint64_t a1)
{

}

void __Block_byref_object_dispose__4(uint64_t a1)
{

}

{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void __Block_byref_object_dispose__5(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 48);
  std::vector<LSApplicationRecord * {__strong}>::__destroy_vector::operator()[abi:nn180100](&v1);
}

void __Block_byref_object_dispose__6(uint64_t a1)
{
  id **v2;

  v2 = (id **)(a1 + 224);
  std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__destroy_vector::operator()[abi:nn180100](&v2);
  LaunchServices::BindingEvaluator::~BindingEvaluator((id *)(a1 + 56));
}

void __Block_byref_object_dispose__7(uint64_t a1)
{
  LaunchServices::DumpWriter::~DumpWriter((id *)(a1 + 48));
}

{

}

void __Block_byref_object_dispose__8(uint64_t a1)
{

}

void __Block_byref_object_dispose__9(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void __Block_byref_object_dispose__10(uint64_t a1)
{

}

void __Block_byref_object_dispose__12(uint64_t a1)
{

}

void __Block_byref_object_dispose__13(uint64_t a1)
{

}

{
  const void *v2;

  v2 = *(const void **)(a1 + 48);
  if (v2)
    CFRelease(v2);
  *(_QWORD *)(a1 + 48) = 0;
}

void __Block_byref_object_dispose__14(uint64_t a1)
{

}

void __Block_byref_object_dispose__15(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void __Block_byref_object_dispose__16(uint64_t a1)
{

}

void __Block_byref_object_dispose__17(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void __Block_byref_object_dispose__18(uint64_t a1)
{

}

void __Block_byref_object_dispose__19(uint64_t a1)
{

}

void __Block_byref_object_dispose__20(uint64_t a1)
{

}

void __Block_byref_object_dispose__21(uint64_t a1)
{

}

{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void __Block_byref_object_dispose__22(uint64_t a1)
{

}

void __Block_byref_object_dispose__23(uint64_t a1)
{

}

{

}

void __Block_byref_object_dispose__24(uint64_t a1)
{

}

uint64_t __Block_byref_object_dispose__25(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>>>::~__hash_table(a1 + 48);
}

void __Block_byref_object_dispose__26(uint64_t a1)
{

}

void __Block_byref_object_dispose__27(uint64_t a1)
{
  LaunchServices::DumpWriter::~DumpWriter((id *)(a1 + 48));
}

void __Block_byref_object_dispose__28(uint64_t a1)
{

}

void __Block_byref_object_dispose__29(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 48);
  std::vector<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier>::__destroy_vector::operator()[abi:nn180100](&v1);
}

void __Block_byref_object_dispose__32(uint64_t a1)
{

}

void __Block_byref_object_dispose__33(uint64_t a1)
{

}

void __Block_byref_object_dispose__34(uint64_t a1)
{

}

void __Block_byref_object_dispose__35(uint64_t a1)
{

}

{
  LaunchServices::DumpWriter::~DumpWriter((id *)(a1 + 48));
}

void __Block_byref_object_dispose__36(uint64_t a1)
{

}

void __Block_byref_object_dispose__37(uint64_t a1)
{

}

void __Block_byref_object_dispose__38(uint64_t a1)
{

}

void __Block_byref_object_dispose__39(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void __Block_byref_object_dispose__40(uint64_t a1)
{

}

{

}

void __Block_byref_object_dispose__41(uint64_t a1)
{

}

{

}

void __Block_byref_object_dispose__42(uint64_t a1)
{

}

void __Block_byref_object_dispose__43(uint64_t a1)
{

}

void __Block_byref_object_dispose__44(uint64_t a1)
{

}

void __Block_byref_object_dispose__45(uint64_t a1)
{

}

void __Block_byref_object_dispose__46(uint64_t a1)
{

}

void __Block_byref_object_dispose__47(uint64_t a1)
{

}

void __Block_byref_object_dispose__48(uint64_t a1)
{

}

void __Block_byref_object_dispose__49(uint64_t a1)
{

}

void __Block_byref_object_dispose__50(uint64_t a1)
{

}

uint64_t __Block_byref_object_dispose__51(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>>>::~__hash_table(a1 + 48);
}

void __Block_byref_object_dispose__52(uint64_t a1)
{

}

void __Block_byref_object_dispose__53(uint64_t a1)
{

}

void sub_18289A824(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__1(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__2(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>>>::__hash_table(a1 + 48, (uint64_t *)(a2 + 48));
}

uint64_t __Block_byref_object_copy__3(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

__n128 __Block_byref_object_copy__5(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

__n128 __Block_byref_object_copy__6(__n128 *a1, __n128 *a2)
{
  unint64_t v4;
  __n128 result;
  unint64_t v6;
  unint64_t v7;

  a1[3].n128_u64[0] = a2[3].n128_u64[0];
  LaunchServices::BindingEvaluator::BindingEvaluator((LaunchServices::BindingEvaluator *)&a1[3].n128_i8[8], (const LaunchServices::BindingEvaluator *)&a2[3].n128_i8[8]);
  a1[14].n128_u64[0] = 0;
  a1[14].n128_u64[1] = 0;
  a1[15].n128_u64[0] = 0;
  a1[15].n128_u64[1] = a2[15].n128_u64[1];
  a1[14] = a2[14];
  a1[15].n128_u64[0] = a2[15].n128_u64[0];
  a2[14].n128_u64[1] = 0;
  a2[15].n128_u64[0] = 0;
  a2[14].n128_u64[0] = 0;
  a1[16].n128_u8[0] = a2[16].n128_u8[0];
  v4 = a2[16].n128_u64[1];
  a2[16].n128_u64[1] = 0;
  a1[16].n128_u64[1] = v4;
  result = a2[17];
  a1[18].n128_u8[0] = a2[18].n128_u8[0];
  a1[17] = result;
  v6 = a2[18].n128_u64[1];
  a2[18].n128_u64[1] = 0;
  a1[18].n128_u64[1] = v6;
  a1[19].n128_u16[0] = a2[19].n128_u16[0];
  v7 = a2[19].n128_u64[1];
  a2[19].n128_u64[1] = 0;
  a1[19].n128_u64[1] = v7;
  return result;
}

id __Block_byref_object_copy__7(uint64_t a1, uint64_t a2)
{
  id result;

  CSStore2::AttributedStringWriter::AttributedStringWriter((CSStore2::AttributedStringWriter *)(a1 + 48), (const CSStore2::AttributedStringWriter *)(a2 + 48));
  *(_QWORD *)(a1 + 48) = &off_1E103E010;
  result = *(id *)(a2 + 304);
  *(_QWORD *)(a1 + 304) = result;
  return result;
}

uint64_t __Block_byref_object_copy__8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

__n128 __Block_byref_object_copy__9(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

uint64_t __Block_byref_object_copy__10(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void *__Block_byref_object_copy__11(uint64_t a1, uint64_t a2)
{
  return memcpy((void *)(a1 + 48), (const void *)(a2 + 48), 0x230uLL);
}

uint64_t __Block_byref_object_copy__12(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__13(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__14(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

__n128 __Block_byref_object_copy__15(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

uint64_t __Block_byref_object_copy__16(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

__n128 __Block_byref_object_copy__17(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

uint64_t __Block_byref_object_copy__18(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__19(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__20(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__21(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__22(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__23(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__24(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__25(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = a2[6];
  a2[6] = 0;
  *(_QWORD *)(result + 48) = v2;
  *(_QWORD *)(result + 56) = a2[7];
  a2[7] = 0;
  v5 = a2[8];
  v3 = a2 + 8;
  v4 = v5;
  *(_QWORD *)(result + 64) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 72) = v6;
  *(_DWORD *)(result + 80) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 56);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 64;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t __Block_byref_object_copy__26(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

id __Block_byref_object_copy__27(uint64_t a1, uint64_t a2)
{
  id result;

  CSStore2::AttributedStringWriter::AttributedStringWriter((CSStore2::AttributedStringWriter *)(a1 + 48), (const CSStore2::AttributedStringWriter *)(a2 + 48));
  *(_QWORD *)(a1 + 48) = &off_1E103E010;
  result = *(id *)(a2 + 304);
  *(_QWORD *)(a1 + 304) = result;
  return result;
}

uint64_t __Block_byref_object_copy__28(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

__n128 __Block_byref_object_copy__29(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

uint64_t __Block_byref_object_copy__30(uint64_t result, uint64_t a2)
{
  int v2;

  v2 = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(result + 52) = *(_BYTE *)(a2 + 52);
  *(_DWORD *)(result + 48) = v2;
  return result;
}

uint64_t __Block_byref_object_copy__31(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(result + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(result + 48) = v2;
  return result;
}

uint64_t __Block_byref_object_copy__32(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__33(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 48) = v2;
  return result;
}

uint64_t __Block_byref_object_copy__34(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__35(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__36(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 48) = v2;
  return result;
}

uint64_t __Block_byref_object_copy__37(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__38(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 48) = v2;
  return result;
}

__n128 __Block_byref_object_copy__39(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

uint64_t __Block_byref_object_copy__40(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__41(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__42(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__43(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__44(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__45(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__46(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__47(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__48(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__49(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__50(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__51(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>>>::__hash_table(a1 + 48, (uint64_t *)(a2 + 48));
}

uint64_t __Block_byref_object_copy__52(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__53(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_18289AFBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18289B2A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;
  void *v11;

  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a9);
  _Unwind_Resume(a1);
}

void sub_18289B530(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

unsigned __int8 *_LSCheckRecordPISizeAndVersionReturningPIInnerBytes(void *a1, _QWORD *a2)
{
  unsigned __int8 *v4;
  uint64_t v5;
  unsigned __int8 *v6;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  _QWORD v15[2];

  v15[1] = *MEMORY[0x1E0C80C00];
  if ((unint64_t)objc_msgSend(a1, "length") < 0x1C)
  {
    v12 = *MEMORY[0x1E0CB2938];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("data length %zu is too short"), objc_msgSend(a1, "length"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = v8;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v13, &v12, 1);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], -10810, (uint64_t)"_LSCheckRecordPISizeAndVersionReturningPIInnerBytes", 225, v9);
    v10 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v4 = (unsigned __int8 *)objc_msgSend(objc_retainAutorelease(a1), "bytes");
    v5 = *v4;
    if ((_DWORD)v5 == _LSPersistentIdentifierVersion)
    {
      v6 = v4;
      v7 = 0;
      goto LABEL_9;
    }
    v14 = *MEMORY[0x1E0CB2938];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("identifier version %d is unknown"), v5);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v15[0] = v8;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v15, &v14, 1);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], -10650, (uint64_t)"_LSCheckRecordPISizeAndVersionReturningPIInnerBytes", 222, v9);
    v10 = objc_claimAutoreleasedReturnValue();
  }
  v7 = (id)v10;

  if (a2)
  {
    v7 = objc_retainAutorelease(v7);
    v6 = 0;
    *a2 = v7;
  }
  else
  {
    v6 = 0;
  }
LABEL_9:

  return v6;
}

void sub_18289B740(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18289B880(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

objc_object *_LSDServiceReplaceObject(objc_object *a1)
{
  objc_object *v1;
  id v2;
  void *v3;
  uint64_t v4;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0
    && (-[objc_object isMemberOfClass:](v1, "isMemberOfClass:", objc_opt_class()) & 1) == 0)
  {
    v2 = objc_alloc(MEMORY[0x1E0C99E98]);
    -[objc_object absoluteString](v1, "absoluteString");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v2, "initWithString:", v3);

    v1 = (objc_object *)v4;
  }
  return v1;
}

void sub_18289B938(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void *_LSCopyHandlerRankStringFromNumericHandlerRank(uint64_t a1)
{
  void *result;

  switch((int)a1)
  {
    case 0:
      result = (void *)CFRetain(CFSTR("None"));
      break;
    case 1:
      result = (void *)CFRetain(CFSTR("Alternate"));
      break;
    case 2:
      result = (void *)CFRetain(CFSTR("Default"));
      break;
    case 3:
      result = (void *)CFRetain(CFSTR("Owner"));
      break;
    default:
      result = (void *)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("# (%i)"), a1);
      break;
  }
  return result;
}

void sub_18289BBF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

CFStringRef UTTypeCreatePreferredIdentifierForTag(CFStringRef inTagClass, CFStringRef inTag, CFStringRef inConformingToUTI)
{
  const __CFString *v3;
  void *v7;
  void *v8;
  void *v9;

  v3 = 0;
  if (inTagClass && inTag)
  {
    v7 = (void *)MEMORY[0x186DAE7A0]();
    +[UTTypeRecord typeRecordWithTag:ofClass:conformingToIdentifier:](UTTypeRecord, "typeRecordWithTag:ofClass:conformingToIdentifier:", inTag, inTagClass, inConformingToUTI);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = v8;
    if (v8)
    {
      objc_msgSend(v8, "identifier");
      v3 = (const __CFString *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v3 = 0;
    }

    objc_autoreleasePoolPop(v7);
  }
  return v3;
}

void sub_18289BCA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18289BED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, void *a18)
{

  _Unwind_Resume(a1);
}

void sub_18289C0DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18289C290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_18289C398(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18289C654(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18289C930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_18289CD30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18289CFE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18289D11C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);

  _Unwind_Resume(a1);
}

void sub_18289D1BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id postprocessLocalizedNameishStringFromStringRecord(LSBundleRecord *a1, NSString *a2)
{
  NSString *v3;
  void *v4;
  uint64_t v5;

  v3 = a2;
  v4 = v3;
  if (!v3 || !-[NSString length](v3, "length"))
  {
    -[LSBundleRecord _fallbackLocalizedName](a1, "_fallbackLocalizedName");
    v5 = objc_claimAutoreleasedReturnValue();

    v4 = (void *)v5;
  }
  return v4;
}

void sub_18289D23C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18289D2F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_18289D448(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);

  _Unwind_Resume(a1);
}

void sub_18289D544(void *a1)
{
  void *v1;

  objc_begin_catch(a1);
  os_unfair_recursive_lock_unlock();
  objc_exception_rethrow();
}

void sub_18289D568(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18289D5D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

NSString *_LSDNCReplaceForbiddenCharacters(NSString *a1, char a2)
{
  NSString *v3;
  void *v4;
  id v5;
  NSString *v6;
  void *v7;
  NSString *v8;
  NSString *v9;
  NSString *v10;
  _QWORD v12[4];
  id v13;
  NSString *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  void (*v20)(uint64_t);
  id v21;

  v3 = a1;
  _LSDNCGetForbiddenCharacters(a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = 0;
  v17 = &v16;
  v18 = 0x3032000000;
  v19 = __Block_byref_object_copy__20;
  v20 = __Block_byref_object_dispose__20;
  v21 = 0;
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = ___ZL32_LSDNCReplaceForbiddenCharactersP8NSStringj_block_invoke;
  v12[3] = &unk_1E1043398;
  v5 = v4;
  v13 = v5;
  v15 = &v16;
  v6 = v3;
  v14 = v6;
  _LSDNCWithInlineBuffer(v6, v12);
  v7 = (void *)v17[5];
  v8 = v6;
  if (v7)
  {
    v8 = v7;

  }
  v9 = v14;
  v10 = v8;

  _Block_object_dispose(&v16, 8);
  return v10;
}

void sub_18289D708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;
  void *v23;

  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

id _LSDNCGetForbiddenCharacters(char a1)
{
  uint64_t *v2;

  if (_LSDNCGetForbiddenCharacters::once != -1)
    dispatch_once(&_LSDNCGetForbiddenCharacters::once, &__block_literal_global_144_0);
  v2 = &_LSDNCGetForbiddenCharacters::forbiddenWithNewlines;
  if ((a1 & 1) != 0)
    v2 = &_LSDNCGetForbiddenCharacters::forbiddenWithoutNewlines;
  return (id)*v2;
}

id _LSDNCBalanceBiDiControlCharacters(NSString *a1)
{
  NSString *v1;
  NSString *v2;
  NSString *v3;
  void *v4;
  _QWORD v6[6];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v11 = 0;
    v12 = &v11;
    v13 = 0x2020000000;
    v14 = 0;
    v7 = 0;
    v8 = &v7;
    v9 = 0x2020000000;
    v10 = 0;
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = ___ZL34_LSDNCBalanceBiDiControlCharactersP8NSString_block_invoke;
    v6[3] = &unk_1E10433E0;
    v6[4] = &v11;
    v6[5] = &v7;
    _LSDNCWithInlineBuffer(v1, v6);
    _LSDNCBalanceBiDiControlCharacterInString(8236, v2, v12[3]);
    v3 = (NSString *)objc_claimAutoreleasedReturnValue();

    _LSDNCBalanceBiDiControlCharacterInString(8297, v3, v8[3]);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    _Block_object_dispose(&v7, 8);
    _Block_object_dispose(&v11, 8);
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

void sub_18289D8B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  void *v8;
  uint64_t v9;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);

  _Unwind_Resume(a1);
}

void _LSDNCWithInlineBuffer(void *a1, void *a2)
{
  __CFString *v3;
  void (**v4)(id, _BYTE *, uint64_t);
  uint64_t v5;
  const char *CStringPtr;
  _BYTE v7[128];
  __CFString *v8;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = a1;
  v4 = a2;
  v5 = -[__CFString length](v3, "length");
  v8 = v3;
  v11 = 0;
  v12 = v5;
  if (CFStringGetCharactersPtr(v3))
    CStringPtr = 0;
  else
    CStringPtr = CFStringGetCStringPtr(v3, 0x600u);
  v13 = 0;
  v14 = 0;
  v10 = CStringPtr;
  v4[2](v4, v7, v5);

}

void sub_18289D978(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

NSString *_LSDNCBalanceBiDiControlCharacterInString(__int16 a1, NSString *a2, uint64_t a3)
{
  NSString *v4;
  NSString *v5;
  NSString *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v14;

  v14 = a1;
  v4 = a2;
  v5 = v4;
  v6 = v4;
  if (a3)
  {
    v7 = (void *)-[NSString mutableCopy](v4, "mutableCopy");
    v6 = v5;
    if (v7)
    {
      if (a3 <= 0)
      {
        do
          objc_msgSend(v7, "appendCharacters:length:", &v14, 1);
        while (!__CFADD__(a3++, 1));
      }
      else
      {
        v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithCharacters:length:", &v14, 1);
        v9 = a3 + 1;
        do
        {
          v11 = objc_msgSend(v7, "rangeOfString:options:", v8, 4);
          if (v11 != 0x7FFFFFFFFFFFFFFFLL)
            objc_msgSend(v7, "deleteCharactersInRange:", v11, v10);
          --v9;
        }
        while (v9 > 1);

      }
      v6 = (NSString *)objc_msgSend(v7, "copy");

    }
  }

  return v6;
}

void sub_18289DA8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t ___ZL32_LSDNCReplaceForbiddenCharactersP8NSStringj_block_invoke(uint64_t result, CFStringInlineBuffer *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  CFIndex v7;
  uint64_t v8;
  uint64_t v9;
  CFIndex v10;
  const UniChar *directUniCharBuffer;
  UniChar v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *directCStringBuffer;
  CFIndex bufferedRangeStart;
  uint64_t v19;
  uint64_t v20;
  CFIndex v21;
  CFIndex v22;
  CFIndex length;
  CFRange v24;

  if (a3)
  {
    v5 = result;
    v6 = 0;
    v7 = 0;
    v8 = 64;
    do
    {
      if ((unint64_t)v7 >= 4)
        v9 = 4;
      else
        v9 = v7;
      if (v7 < 0 || (v10 = a2->rangeToBuffer.length, v10 <= v7))
      {
        v12 = 0;
      }
      else
      {
        directUniCharBuffer = a2->directUniCharBuffer;
        if (directUniCharBuffer)
        {
          v12 = directUniCharBuffer[v7 + a2->rangeToBuffer.location];
        }
        else
        {
          directCStringBuffer = a2->directCStringBuffer;
          if (directCStringBuffer)
          {
            v12 = directCStringBuffer[a2->rangeToBuffer.location + v7];
          }
          else
          {
            if (a2->bufferedRangeEnd <= v7 || (bufferedRangeStart = a2->bufferedRangeStart, bufferedRangeStart > v7))
            {
              v19 = -v9;
              v20 = v9 + v6;
              v21 = v8 - v9;
              v22 = v7 + v19;
              length = v22 + 64;
              if (v22 + 64 >= v10)
                length = a2->rangeToBuffer.length;
              a2->bufferedRangeStart = v22;
              a2->bufferedRangeEnd = length;
              if (v10 >= v21)
                v10 = v21;
              v24.length = v10 + v20;
              v24.location = v22 + a2->rangeToBuffer.location;
              CFStringGetCharacters(a2->theString, v24, a2->buffer);
              bufferedRangeStart = a2->bufferedRangeStart;
            }
            v12 = a2->buffer[v7 - bufferedRangeStart];
          }
        }
      }
      result = _LSDNCCharacterSetContainsCharacterFromInlineBuffer(*(NSCharacterSet **)(v5 + 32), v12, a2, v7);
      if ((_DWORD)result)
      {
        v13 = *(void **)(*(_QWORD *)(*(_QWORD *)(v5 + 48) + 8) + 40);
        if (!v13)
        {
          v14 = objc_msgSend(*(id *)(v5 + 40), "mutableCopy");
          v15 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8);
          v16 = *(void **)(v15 + 40);
          *(_QWORD *)(v15 + 40) = v14;

          v13 = *(void **)(*(_QWORD *)(*(_QWORD *)(v5 + 48) + 8) + 40);
        }
        result = objc_msgSend(v13, "replaceCharactersInRange:withCharacters:length:", v7, 1, &_LSDisplayNameConstructorForbiddenCharacterSubstitute, 1);
      }
      ++v7;
      --v6;
      ++v8;
    }
    while (a3 != v7);
  }
  return result;
}

uint64_t _LSDNCCharacterSetContainsCharacterFromInlineBuffer(NSCharacterSet *a1, uint64_t a2, CFStringInlineBuffer *a3, uint64_t a4)
{
  NSCharacterSet *v7;
  uint64_t v8;
  int64_t v9;
  CFIndex length;
  const UniChar *directUniCharBuffer;
  UniChar v12;
  const char *directCStringBuffer;
  CFIndex bufferedRangeStart;
  CFIndex v15;
  void *v16;
  void *v17;
  CFRange v19;

  v7 = a1;
  if (!-[NSCharacterSet characterIsMember:](v7, "characterIsMember:", a2))
  {
    if ((a2 & 0xF800 | 0x400) != 0xDC00)
    {
      v8 = 0;
      goto LABEL_23;
    }
    if (a4 == 0x7FFFFFFFFFFFFFFFLL)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "BOOL _LSDNCCharacterSetContainsCharacterFromInlineBuffer(NSCharacterSet *__strong, unichar, CFStringInlineBuffer *, CFIndex)");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "handleFailureInFunction:file:lineNumber:description:", v17, CFSTR("LSDisplayNameConstructor.mm"), 1704, CFSTR("Insanely long string for display name"));

    }
    else if (a4 >= -1)
    {
      v9 = a4 + 1;
      length = a3->rangeToBuffer.length;
      if (length > a4 + 1)
      {
        directUniCharBuffer = a3->directUniCharBuffer;
        if (directUniCharBuffer)
        {
          v12 = directUniCharBuffer[a3->rangeToBuffer.location + v9];
        }
        else
        {
          directCStringBuffer = a3->directCStringBuffer;
          if (directCStringBuffer)
          {
            v12 = directCStringBuffer[a3->rangeToBuffer.location + v9];
          }
          else
          {
            if (a3->bufferedRangeEnd <= v9 || (bufferedRangeStart = a3->bufferedRangeStart, bufferedRangeStart > v9))
            {
              v15 = a4 - 3;
              if ((unint64_t)v9 < 4)
                v15 = 0;
              if (v15 + 64 < length)
                length = v15 + 64;
              a3->bufferedRangeStart = v15;
              a3->bufferedRangeEnd = length;
              v19.location = a3->rangeToBuffer.location + v15;
              v19.length = length - v15;
              CFStringGetCharacters(a3->theString, v19, a3->buffer);
              bufferedRangeStart = a3->bufferedRangeStart;
            }
            v12 = a3->buffer[v9 - bufferedRangeStart];
          }
        }
        goto LABEL_22;
      }
    }
    v12 = 0;
LABEL_22:
    v8 = -[NSCharacterSet longCharacterIsMember:](v7, "longCharacterIsMember:", ((_DWORD)a2 << 10) + v12 - 56613888);
    goto LABEL_23;
  }
  v8 = 1;
LABEL_23:

  return v8;
}

void sub_18289DDE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void ___ZL34_LSDNCBalanceBiDiControlCharactersP8NSString_block_invoke(uint64_t a1, UniChar *buffer, uint64_t a3)
{
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  UniChar v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  int64_t v19;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  CFRange v25;

  if (a3)
  {
    v6 = 0;
    v7 = 0;
    v8 = 64;
    do
    {
      if ((unint64_t)v7 >= 4)
        v9 = 4;
      else
        v9 = v7;
      if (v7 < 0)
        goto LABEL_35;
      v10 = *((_QWORD *)buffer + 20);
      if (v10 <= v7)
        goto LABEL_35;
      v11 = *((_QWORD *)buffer + 17);
      if (v11)
      {
        v12 = *(_WORD *)(v11 + 2 * (v7 + *((_QWORD *)buffer + 19)));
      }
      else
      {
        v13 = *((_QWORD *)buffer + 18);
        if (v13)
        {
          v12 = *(char *)(v13 + *((_QWORD *)buffer + 19) + v7);
        }
        else
        {
          if (*((_QWORD *)buffer + 22) <= v7 || (v14 = *((_QWORD *)buffer + 21), v14 > v7))
          {
            v15 = -v9;
            v16 = v9 + v6;
            v17 = v8 - v9;
            v18 = v7 + v15;
            v19 = v18 + 64;
            if (v18 + 64 >= v10)
              v19 = *((_QWORD *)buffer + 20);
            *((_QWORD *)buffer + 21) = v18;
            *((_QWORD *)buffer + 22) = v19;
            if (v10 >= v17)
              v10 = v17;
            v25.length = v10 + v16;
            v25.location = v18 + *((_QWORD *)buffer + 19);
            CFStringGetCharacters(*((CFStringRef *)buffer + 16), v25, buffer);
            v14 = *((_QWORD *)buffer + 21);
          }
          v12 = buffer[v7 - v14];
        }
      }
      if (v12 > 0x2065u)
      {
        if (v12 - 8294 < 3)
        {
          v21 = *(_QWORD *)(a1 + 40);
LABEL_28:
          v22 = (_QWORD *)(*(_QWORD *)(v21 + 8) + 24);
          v23 = -1;
          goto LABEL_34;
        }
        if (v12 == 8297)
        {
          v24 = *(_QWORD *)(a1 + 40);
LABEL_33:
          v22 = (_QWORD *)(*(_QWORD *)(v24 + 8) + 24);
          v23 = 1;
LABEL_34:
          *v22 += v23;
        }
      }
      else
      {
        if (v12 - 8234 < 2 || v12 - 8237 < 2)
        {
          v21 = *(_QWORD *)(a1 + 32);
          goto LABEL_28;
        }
        if (v12 == 8236)
        {
          v24 = *(_QWORD *)(a1 + 32);
          goto LABEL_33;
        }
      }
LABEL_35:
      ++v7;
      --v6;
      ++v8;
    }
    while (a3 != v7);
  }
}

NSObject *LaunchServices::LocalizedString::localizeUnsafely(uint64_t a1, void *a2, void *a3)
{
  id v5;
  const __CFArray *v6;
  CFArrayRef v7;
  const __CFArray *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const __CFArray *v12;
  NSObject *v13;
  unint64_t v14;
  int ValueAtIndex;
  NSObject *v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  const __CFString *v20;
  uint64_t v21;
  void *v23;
  void *v24;
  void *context;
  const __CFArray *prefArray;
  const __CFArray *v27;
  uint64_t v28;
  void *v29;
  uint8_t v30;
  char v31[15];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint8_t buf[4];
  unint64_t v37;
  __int16 v38;
  const __CFArray *v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  _BYTE v44[128];
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  prefArray = a3;
  v29 = v5;
  if (!v5)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *LaunchServices::LocalizedString::localizeUnsafely(_LSDatabase *__strong _Nonnull, NSArray<NSString *> *__strong _Nullable) const");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "handleFailureInFunction:file:lineNumber:description:", v24, CFSTR("LSLocalizedString.mm"), 163, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("db != nil"));

  }
  context = (void *)MEMORY[0x186DAE7A0]();
  if ((*(_BYTE *)(a1 + 8) & 2) != 0)
  {
    v19 = _CSStringCopyCFString();
    if ((*(_BYTE *)(a1 + 8) & 1) != 0)
      v20 = CFSTR("✴️");
    else
      v20 = CFSTR("🔂");
    v13 = v19;
  }
  else
  {
    if (!*(_DWORD *)a1 || (v28 = *(unsigned int *)(a1 + 4), !(_DWORD)v28))
    {
      v13 = 0;
      goto LABEL_47;
    }
    if (!prefArray)
    {
      objc_msgSend((id)__LSDefaultsGetSharedInstance(), "preferredLocalizations");
      prefArray = (const __CFArray *)objc_claimAutoreleasedReturnValue();
    }
    _LSDatabaseGetStringArray(v5);
    v6 = (const __CFArray *)objc_claimAutoreleasedReturnValue();
    v7 = 0;
    if (prefArray && v6)
      v7 = CFBundleCopyLocalizationsForPreferences(v6, prefArray);
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v8 = v7;
    v27 = v8;
    v9 = -[__CFArray countByEnumeratingWithState:objects:count:](v8, "countByEnumeratingWithState:objects:count:", &v32, v44, 16);
    if (v9)
    {
      v10 = *(_QWORD *)v33;
      do
      {
        v11 = 0;
        do
        {
          if (*(_QWORD *)v33 != v10)
            objc_enumerationMutation(v8);
          v12 = *(const __CFArray **)(*((_QWORD *)&v32 + 1) + 8 * v11);
          if (-[__CFArray isEqual:](v12, "isEqual:", CFSTR("LSDefaultLocalizedValue")))
          {
            _LSDefaultLog();
            v13 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
              LaunchServices::LocalizedString::localizeUnsafely(&v30, v31, v13);
          }
          else
          {
            v14 = -[__CFArray indexOfObject:](v6, "indexOfObject:", v12);
            if (v14 == 0x7FFFFFFFFFFFFFFFLL || v14 >= -[__CFArray count](v6, "count"))
            {
              _LSDefaultLog();
              v13 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 138543618;
                v37 = (unint64_t)v12;
                v38 = 2114;
                v39 = v6;
                _os_log_debug_impl(&dword_182882000, v13, OS_LOG_TYPE_DEBUG, "Unexpected: localization %{public}@ was not found in bundle localizations list %{public}@", buf, 0x16u);
              }
            }
            else
            {
              ValueAtIndex = _CSArrayGetValueAtIndex();
              v16 = _CSStringCopyCFString();
              v13 = v16;
              v8 = v27;
              if (v16)
              {
                if (-[NSObject length](v16, "length"))
                {

                  goto LABEL_41;
                }
              }
              else
              {
                if (!ValueAtIndex)
                  goto LABEL_33;
                _LSDefaultLog();
                v17 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 134218754;
                  v37 = v14;
                  v38 = 2114;
                  v39 = v12;
                  v40 = 2048;
                  v41 = v28;
                  v42 = 2048;
                  v43 = v28;
                  _os_log_debug_impl(&dword_182882000, v17, OS_LOG_TYPE_DEBUG, "Unexpected: could not get value #%lu (key %{public}@) from localized name array %llu(%llx)", buf, 0x2Au);
                }

              }
            }
          }

          ++v11;
        }
        while (v9 != v11);
        v18 = -[__CFArray countByEnumeratingWithState:objects:count:](v8, "countByEnumeratingWithState:objects:count:", &v32, v44, 16);
        v9 = v18;
      }
      while (v18);
    }
LABEL_33:

    if (-[__CFArray count](v8, "count")
      && -[__CFArray indexOfObject:](v6, "indexOfObject:", CFSTR("LSDefaultLocalizedValue")) != 0x7FFFFFFFFFFFFFFFLL)
    {
      _LSDatabaseGetNSStringFromArray(v29);
      v13 = objc_claimAutoreleasedReturnValue();
      v20 = CFSTR("🔴");
    }
    else
    {
      v13 = 0;
LABEL_41:
      v20 = CFSTR("❇️");
    }

  }
  if (v13 && objc_msgSend((id)__LSDefaultsGetSharedInstance(), "markLocalizationsStoredInDatabase"))
  {
    -[NSObject stringByAppendingString:](v13, "stringByAppendingString:", v20);
    v21 = objc_claimAutoreleasedReturnValue();

    v13 = v21;
  }
LABEL_47:
  objc_autoreleasePoolPop(context);

  return v13;
}

void sub_18289E4D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19)
{
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

id _LSDatabaseGetNSStringFromArray(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  _CSArrayGetValueAtIndex();
  v2 = (void *)_CSStringCopyCFString();

  return v2;
}

void sub_18289E6FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18289E77C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

id LaunchServices::LocalizedString::getDefaultValueUnsafely(LaunchServices::LocalizedString *this, _LSDatabase *a2)
{
  _LSDatabase *v3;
  void *v4;
  void *v5;
  const __CFString *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  uint64_t (*v17)();
  uint64_t v18;
  char v19;
  char v20;

  v3 = a2;
  if (!v3)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *LaunchServices::LocalizedString::getDefaultValueUnsafely(_LSDatabase *__strong _Nonnull) const");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "handleFailureInFunction:file:lineNumber:description:", v12, CFSTR("LSLocalizedString.mm"), 265, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("db != nil"));

  }
  v4 = (void *)MEMORY[0x186DAE7A0]();
  if ((*((_BYTE *)this + 8) & 2) != 0)
  {
    v7 = _CSStringCopyCFString();
    if ((*((_BYTE *)this + 8) & 1) != 0)
      v6 = CFSTR("✴️");
    else
      v6 = CFSTR("🔂");
    v5 = (void *)v7;
  }
  else
  {
    if (!*(_DWORD *)this
      || !*((_DWORD *)this + 1)
      || !_LSDatabaseGetStringForCFString(v3, CFSTR("LSDefaultLocalizedValue"), 0))
    {
      v5 = 0;
      goto LABEL_20;
    }
    v13 = 0;
    v14 = &v13;
    v15 = 0x3812000000;
    v16 = __Block_byref_object_copy__30;
    v17 = __Block_byref_object_dispose__30;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    _CSArrayEnumerateAllValues();
    if (*((_BYTE *)v14 + 52))
    {
      _LSDatabaseGetNSStringFromArray(v3);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = CFSTR("🔴");
    }
    else
    {
      v5 = 0;
      v6 = 0;
    }
    _Block_object_dispose(&v13, 8);
  }
  if (v5)
    v8 = v6 == 0;
  else
    v8 = 1;
  if (!v8 && objc_msgSend((id)__LSDefaultsGetSharedInstance(), "markLocalizationsStoredInDatabase"))
  {
    objc_msgSend(v5, "stringByAppendingString:", v6);
    v9 = objc_claimAutoreleasedReturnValue();

    v5 = (void *)v9;
  }
LABEL_20:
  objc_autoreleasePoolPop(v4);

  return v5;
}

void sub_18289EA18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18289EC88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

uint64_t _UTGetActiveTypeForCFStringIdentifier(void *a1, const __CFString *a2, _DWORD *a3)
{
  id v5;
  int StringForCFString;
  uint64_t active;

  v5 = a1;
  StringForCFString = _LSDatabaseGetStringForCFString(v5, a2, 1);
  if (StringForCFString)
    active = _UTGetActiveTypeForIdentifier(v5, StringForCFString, a3);
  else
    active = 0;

  return active;
}

void sub_18289EE1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

const __CFString *_UTTypeIdentifierIsDynamic(const __CFString *result)
{
  const __CFString *v1;
  CFRange v2;

  if (result)
  {
    v1 = result;
    if (CFStringGetLength(result) < 5)
    {
      return 0;
    }
    else
    {
      v2.location = 0;
      v2.length = 4;
      return (const __CFString *)(CFStringCompareWithOptions(v1, CFSTR("dyn."), v2, 1uLL) == kCFCompareEqualTo);
    }
  }
  return result;
}

void sub_18289F254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  void *v28;
  void *v29;

  _Block_object_dispose(&a17, 8);

  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

void sub_18289F428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

void sub_18289F628(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18289F6EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t LaunchServices::URLPropertyProvider::copyValues(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4, _QWORD **a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v10;

  if (a6 < 1)
    return 1;
  v6 = a6;
  do
  {
    v10 = MEMORY[0x186DAD924](a2, **a5, a4);
    if (!(_DWORD)v10)
      break;
    if (*a4)
      CFRetain(*a4);
    ++a4;
    ++a5;
    --v6;
  }
  while (v6);
  return v10;
}

void ___ZL36_LSPlistLookUpCompactedStringByIndexm_block_invoke()
{
  void *v0;
  unint64_t i;
  _BYTE *v2;
  unint64_t v3;
  BOOL v4;
  void *v5;
  uint64_t v6;
  void *v7;
  _OWORD v8[4];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", 256);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  for (i = 0; i != 256; ++i)
  {
    v2 = v8;
    v3 = i;
    memset(v8, 0, sizeof(v8));
    do
    {
      *v2++ = _ZZZL36_LSPlistLookUpCompactedStringByIndexmEUb_E12characterSet[v3 & 0x3F];
      v4 = v3 > 0x3F;
      v3 >>= 6;
    }
    while (v4);
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v8);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "addObject:", v5);

  }
  v6 = objc_msgSend(v0, "copy");
  v7 = (void *)_LSPlistLookUpCompactedStringByIndex(unsigned long)::strings;
  _LSPlistLookUpCompactedStringByIndex(unsigned long)::strings = v6;

}

void sub_18289F8C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_18289FB7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18289FCE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<objc_selector *,objc_object * {__strong}>,std::__unordered_map_hasher<objc_selector *,std::__hash_value_type<objc_selector *,objc_object * {__strong}>,std::hash<objc_selector *>,std::equal_to<objc_selector *>,true>,std::__unordered_map_equal<objc_selector *,std::__hash_value_type<objc_selector *,objc_object * {__strong}>,std::equal_to<objc_selector *>,std::hash<objc_selector *>,true>,std::allocator<std::__hash_value_type<objc_selector *,objc_object * {__strong}>>>::__emplace_unique_key_args<objc_selector *,objc_selector *,decltype(nullptr)>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  v14 = (_QWORD *)(a1 + 16);
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v8;
  i[2] = *a3;
  i[3] = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__rehash<true>(a1, v20);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *i = *v22;
LABEL_38:
    *v22 = i;
    goto LABEL_39;
  }
  *i = *v14;
  *v14 = i;
  *(_QWORD *)(v21 + 8 * v3) = v14;
  if (*i)
  {
    v23 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9)
        v23 %= v9;
    }
    else
    {
      v23 &= v9 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1828A003C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,void *>>>::operator()[abi:nn180100](v2, v1);
  _Unwind_Resume(a1);
}

void sub_1828A0278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1828A0320(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1828A037C(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void __LSRECORD_GETTER__<LSVersionNumber>(void *a1@<X0>, LSRecord *a2@<X1>, const char *a3@<X2>, _OWORD *a4@<X8>)
{
  LaunchServices::Record *v7;
  objc_selector *v8;
  _QWORD *CachedPropertyValue;
  char v10;
  NSObject *v11;
  LaunchServices::Record *v12;
  LaunchServices::Record *v13;
  uint64_t v14;
  char *v15;
  LaunchServices::Record *v16;
  uint64_t Unit;
  uint64_t v18;
  uint64_t v19;
  void (*MethodImplementation)(_BYTE *__return_ptr, LaunchServices::Record *, const char *, char *, uint64_t, uint64_t, uint64_t);
  __int128 v21;
  objc_selector *v22;
  objc_object *v23;
  _BYTE v24[32];
  __int16 v25;
  const char *Name;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  *a4 = 0u;
  a4[1] = 0u;
  os_unfair_recursive_lock_lock_with_options();
  CachedPropertyValue = LaunchServices::Record::getCachedPropertyValue(v7, a2, v8);
  if (v10)
  {
    objc_msgSend(CachedPropertyValue, "getBytes:length:", a4, 32);
  }
  else
  {
    _LSRecordLog();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)v24 = 136446978;
      *(_QWORD *)&v24[4] = sel_getName(a3);
      *(_WORD *)&v24[12] = 2114;
      *(_QWORD *)&v24[14] = objc_opt_class();
      *(_WORD *)&v24[22] = 2048;
      *(_QWORD *)&v24[24] = v7;
      v25 = 2082;
      Name = sel_getName((SEL)a2);
      _os_log_impl(&dword_182882000, v11, OS_LOG_TYPE_DEBUG, "Invoking selector %{public}s on <%{public}@ %p> to get the value for property %{public}s", v24, 0x2Au);
    }

    v12 = v7;
    v13 = v12;
    v15 = (char *)v12 + 16;
    v14 = *((_QWORD *)v12 + 2);
    if ((*((_BYTE *)v12 + 31) & 0x40) == 0 && !v14)
      __LSRECORD_IS_CRASHING_DUE_TO_A_CALLER_BUG__((uint64_t)v12, (const char *)a2);
    if (v14)
    {
      v16 = v12;
      Unit = CSStoreGetUnit();
      v18 = *((unsigned __int16 *)v16 + 14);
      v19 = *((unsigned int *)v16 + 6);
      MethodImplementation = (void (*)(_BYTE *__return_ptr, LaunchServices::Record *, const char *, char *, uint64_t, uint64_t, uint64_t))object_getMethodImplementation();
      MethodImplementation(v24, v16, a3, v15, v18, v19, Unit);
      v21 = *(_OWORD *)&v24[16];
      *a4 = *(_OWORD *)v24;
      a4[1] = v21;

    }
    v22 = (objc_selector *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", a4, 32);
    LaunchServices::Record::setCachedPropertyValue(v13, a2, v22, v23);

  }
  os_unfair_recursive_lock_unlock();

}

void sub_1828A0894(_Unwind_Exception *exception_object, int a2)
{
  void *v2;

  if (a2)
  {

    objc_begin_catch(exception_object);
    os_unfair_recursive_lock_unlock();
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_1828A08FC(_Unwind_Exception *a1)
{
  void *v1;

  objc_end_catch();

  _Unwind_Resume(a1);
}

void sub_1828A0910(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1828A0A00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{

  _Unwind_Resume(a1);
}

uint64_t __LSRECORD_GETTER__<LSBundleMoreFlags>(void *a1, LSRecord *a2, const char *a3)
{
  LaunchServices::Record *v5;
  objc_selector *v6;
  _QWORD *CachedPropertyValue;
  char v8;
  NSObject *v9;
  LaunchServices::Record *v10;
  LaunchServices::Record *v11;
  uint64_t v12;
  char *v13;
  LaunchServices::Record *v14;
  uint64_t Unit;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*MethodImplementation)(LaunchServices::Record *, const char *, char *, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  objc_selector *v20;
  objc_object *v21;
  int v22;
  int v23;
  unsigned __int16 v25;
  unsigned __int8 v26;
  uint8_t buf[4];
  const char *Name;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  LaunchServices::Record *v32;
  __int16 v33;
  const char *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v25 = 0;
  v26 = 0;
  os_unfair_recursive_lock_lock_with_options();
  CachedPropertyValue = LaunchServices::Record::getCachedPropertyValue(v5, a2, v6);
  if (v8)
  {
    objc_msgSend(CachedPropertyValue, "getBytes:length:", &v25, 3);
  }
  else
  {
    _LSRecordLog();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446978;
      Name = sel_getName(a3);
      v29 = 2114;
      v30 = objc_opt_class();
      v31 = 2048;
      v32 = v5;
      v33 = 2082;
      v34 = sel_getName((SEL)a2);
      _os_log_impl(&dword_182882000, v9, OS_LOG_TYPE_DEBUG, "Invoking selector %{public}s on <%{public}@ %p> to get the value for property %{public}s", buf, 0x2Au);
    }

    v10 = v5;
    v11 = v10;
    v13 = (char *)v10 + 16;
    v12 = *((_QWORD *)v10 + 2);
    if ((*((_BYTE *)v10 + 31) & 0x40) == 0 && !v12)
      __LSRECORD_IS_CRASHING_DUE_TO_A_CALLER_BUG__((uint64_t)v10, (const char *)a2);
    if (v12)
    {
      v14 = v10;
      Unit = CSStoreGetUnit();
      v16 = *((unsigned __int16 *)v14 + 14);
      v17 = *((unsigned int *)v14 + 6);
      MethodImplementation = (uint64_t (*)(LaunchServices::Record *, const char *, char *, uint64_t, uint64_t, uint64_t))object_getMethodImplementation();
      v19 = MethodImplementation(v14, a3, v13, v16, v17, Unit);
      v25 = v19;
      v26 = BYTE2(v19);

    }
    v20 = (objc_selector *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", &v25, 3);
    LaunchServices::Record::setCachedPropertyValue(v11, a2, v20, v21);

  }
  os_unfair_recursive_lock_unlock();

  v22 = v26;
  v23 = v25;

  return v23 | (v22 << 16);
}

void sub_1828A0C74(_Unwind_Exception *exception_object, int a2)
{
  void *v2;

  if (a2)
  {

    objc_begin_catch(exception_object);
    os_unfair_recursive_lock_unlock();
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_1828A0CDC(_Unwind_Exception *a1)
{
  void *v1;

  objc_end_catch();

  _Unwind_Resume(a1);
}

void sub_1828A0CF0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t __LSRECORD_GETTER__<LSBundleBaseFlags>(void *a1, LSRecord *a2, const char *a3)
{
  LaunchServices::Record *v5;
  objc_selector *v6;
  _QWORD *CachedPropertyValue;
  char v8;
  NSObject *v9;
  LaunchServices::Record *v10;
  LaunchServices::Record *v11;
  uint64_t v12;
  char *v13;
  LaunchServices::Record *v14;
  uint64_t Unit;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*MethodImplementation)(LaunchServices::Record *, const char *, char *, uint64_t, uint64_t, uint64_t);
  objc_selector *v19;
  objc_object *v20;
  uint64_t v21;
  unsigned __int8 v23;
  uint8_t buf[4];
  const char *Name;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  LaunchServices::Record *v29;
  __int16 v30;
  const char *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v23 = 0;
  os_unfair_recursive_lock_lock_with_options();
  CachedPropertyValue = LaunchServices::Record::getCachedPropertyValue(v5, a2, v6);
  if (v8)
  {
    objc_msgSend(CachedPropertyValue, "getBytes:length:", &v23, 1);
  }
  else
  {
    _LSRecordLog();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446978;
      Name = sel_getName(a3);
      v26 = 2114;
      v27 = objc_opt_class();
      v28 = 2048;
      v29 = v5;
      v30 = 2082;
      v31 = sel_getName((SEL)a2);
      _os_log_impl(&dword_182882000, v9, OS_LOG_TYPE_DEBUG, "Invoking selector %{public}s on <%{public}@ %p> to get the value for property %{public}s", buf, 0x2Au);
    }

    v10 = v5;
    v11 = v10;
    v13 = (char *)v10 + 16;
    v12 = *((_QWORD *)v10 + 2);
    if ((*((_BYTE *)v10 + 31) & 0x40) == 0 && !v12)
      __LSRECORD_IS_CRASHING_DUE_TO_A_CALLER_BUG__((uint64_t)v10, (const char *)a2);
    if (v12)
    {
      v14 = v10;
      Unit = CSStoreGetUnit();
      v16 = *((unsigned __int16 *)v14 + 14);
      v17 = *((unsigned int *)v14 + 6);
      MethodImplementation = (uint64_t (*)(LaunchServices::Record *, const char *, char *, uint64_t, uint64_t, uint64_t))object_getMethodImplementation();
      v23 = MethodImplementation(v14, a3, v13, v16, v17, Unit);

    }
    v19 = (objc_selector *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", &v23, 1);
    LaunchServices::Record::setCachedPropertyValue(v11, a2, v19, v20);

  }
  os_unfair_recursive_lock_unlock();

  v21 = v23;
  return v21;
}

void sub_1828A0F78(_Unwind_Exception *exception_object, int a2)
{
  void *v2;

  if (a2)
  {

    objc_begin_catch(exception_object);
    os_unfair_recursive_lock_unlock();
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_1828A0FE0(_Unwind_Exception *a1)
{
  void *v1;

  objc_end_catch();

  _Unwind_Resume(a1);
}

void sub_1828A0FF4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1828A10F8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void _LSEnumerateExtensionPoints(void *a1, uint64_t a2)
{
  id v3;
  id v4;
  _QWORD *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t);
  void *v10;
  id v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, _QWORD *);
  uint64_t (*v17)(uint64_t);
  _OWORD v18[2];
  uint64_t v19;
  int v20;

  v3 = a1;
  v13 = 0;
  v14 = &v13;
  v15 = 0x5812000000;
  v16 = __Block_byref_object_copy__25;
  v17 = __Block_byref_object_dispose__25;
  memset(v18, 0, sizeof(v18));
  v19 = 0;
  v20 = 1065353216;
  v7 = MEMORY[0x1E0C809B0];
  v8 = 3221225472;
  v9 = ___LSEnumerateExtensionPoints_block_invoke;
  v10 = &unk_1E1041B68;
  v4 = v3;
  v11 = v4;
  v12 = &v13;
  _CSStringBindingEnumerateAllBindings();
  v6 = 0;
  v5 = v14 + 8;
  do
  {
    v5 = (_QWORD *)*v5;
    if (!v5)
      break;
    (*(void (**)(uint64_t, _QWORD, _QWORD, char *))(a2 + 16))(a2, *((unsigned int *)v5 + 6), v5[2], &v6);
  }
  while (!v6);

  _Block_object_dispose(&v13, 8);
  std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>>>::~__hash_table((uint64_t)v18 + 8);

}

void sub_1828A1248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, ...)
{
  uint64_t v8;
  void *v9;
  va_list va;

  va_start(va, a8);

  _Block_object_dispose(va, 8);
  std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>>>::~__hash_table(v8);

  _Unwind_Resume(a1);
}

void sub_1828A1594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

void sub_1828A17A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1828A19A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1828A2454(_Unwind_Exception *a1)
{
  void *v1;
  os_unfair_lock_s *v2;

  os_unfair_lock_unlock(v2);

  _Unwind_Resume(a1);
}

void sub_1828A2910(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t _LSIsArrayWithValuesOfClasses(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a2;
  v4 = a1;
  v5 = objc_opt_class();
  v6 = _LSIsSequenceOfClassWithValuesOfClasses(v4, v5, v3);

  return v6;
}

uint64_t _LSIsSequenceOfClassWithValuesOfClasses(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a3;
  if (v5 && (!a2 || (objc_opt_isKindOfClass() & 1) != 0))
  {
    if (v6)
    {
      v16 = 0u;
      v17 = 0u;
      v14 = 0u;
      v15 = 0u;
      v7 = v5;
      v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      if (v8)
      {
        v9 = v8;
        v10 = *(_QWORD *)v15;
        while (2)
        {
          v11 = 0;
          do
          {
            if (*(_QWORD *)v15 != v10)
              objc_enumerationMutation(v7);
            if (!_LSIsKindOfClasses(*(void **)(*((_QWORD *)&v14 + 1) + 8 * v11), v6))
            {
              v12 = 0;
              goto LABEL_16;
            }
            ++v11;
          }
          while (v9 != v11);
          v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
          if (v9)
            continue;
          break;
        }
      }
      v12 = 1;
LABEL_16:

    }
    else
    {
      v12 = 1;
    }
  }
  else
  {
    v12 = 0;
  }

  return v12;
}

void sub_1828A2DB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1828A2E54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828A3578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  _Block_object_dispose(&a37, 8);
  _Unwind_Resume(a1);
}

uint64_t _LSVersionNumberCompare(_QWORD *a1, _QWORD *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  if (*a1 > *a2)
    return 1;
  if (*a1 < *a2)
    return -1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = a2[1];
  v6 = a2[2];
  v7 = v4 > v6;
  if (v4 >= v6)
    v8 = 0;
  else
    v8 = -1;
  if (v7)
    v8 = 1;
  v9 = v3 > v5;
  if (v3 >= v5)
    v10 = v8;
  else
    v10 = -1;
  if (v9)
    return 1;
  else
    return v10;
}

uint64_t _LSPluginGetSDKDictionaryDataUnit(void *a1, int a2, uint64_t a3)
{
  id v5;
  void *v6;
  uint64_t v8;
  int v9;

  v5 = a1;
  v6 = v5;
  if (a3 || (a3 = _LSGetPlugin((uint64_t)v5, a2)) != 0)
  {
    v9 = 0;
    v8 = 0;
    if (_LSExtensionPointFindWithStringID(v6, *(unsigned int *)(a3 + 180), *(unsigned int *)(a3 + 20), 0, &v9, &v8))a3 = 0;
    else
      a3 = *(unsigned int *)(v8 + 48);
  }

  return a3;
}

void sub_1828A3704(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _LSBundleDataGetRegTime(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

void sub_1828A3870(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828A3B88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828A3FE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t _LSIsKindOfClasses(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char isKindOfClass;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v4 = a2;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v20;
    while (2)
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v20 != v7)
          objc_enumerationMutation(v4);
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {

          isKindOfClass = 1;
          goto LABEL_15;
        }
        ++v8;
      }
      while (v6 != v8);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
      if (v6)
        continue;
      break;
    }
  }

  if (_LSClassListContainsBundleRecord(v4))
  {
    _LSDefaultLog();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      _LSIsKindOfClasses_cold_1(v9, v10, v11, v12, v13, v14, v15, v16);

    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();
  }
  else
  {
    isKindOfClass = 0;
  }
LABEL_15:

  return isKindOfClass & 1;
}

uint64_t _LSClassListContainsBundleRecord(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  __objc2_class *v5;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v1 = a1;
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v2)
  {
    v3 = *(_QWORD *)v9;
    while (2)
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v9 != v3)
          objc_enumerationMutation(v1);
        v5 = *(__objc2_class **)(*((_QWORD *)&v8 + 1) + 8 * i);
        if (v5 == LSRecord || v5 == LSBundleRecord)
        {
          v2 = 1;
          goto LABEL_14;
        }
      }
      v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      if (v2)
        continue;
      break;
    }
  }
LABEL_14:

  return v2;
}

uint64_t _LSIsDictionaryWithKeysAndValuesOfClasses(void *a1, void *a2, void *a3)
{
  id v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD v11[4];
  id v12;
  id v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  char v18;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  v15 = 0;
  v16 = &v15;
  v17 = 0x2020000000;
  v18 = 1;
  if (!v5)
  {
    v8 = &v18;
LABEL_7:
    *v8 = 0;
    goto LABEL_8;
  }
  if ((_NSIsNSDictionary() & 1) == 0)
  {
    v8 = (char *)(v16 + 3);
    goto LABEL_7;
  }
  if (v6 | v7)
  {
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = ___LSIsDictionaryWithKeysAndValuesOfClasses_block_invoke;
    v11[3] = &unk_1E1045960;
    v12 = (id)v6;
    v13 = (id)v7;
    v14 = &v15;
    objc_msgSend(v5, "enumerateKeysAndObjectsUsingBlock:", v11);

  }
LABEL_8:
  v9 = *((unsigned __int8 *)v16 + 24);
  _Block_object_dispose(&v15, 8);

  return v9;
}

void sub_1828A47BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1828A4A40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1828A4C40(void *exc_buf)
{
  objc_begin_catch(exc_buf);
  os_unfair_recursive_lock_unlock();
  objc_exception_rethrow();
}

void sub_1828A4C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  objc_end_catch();

  _Unwind_Resume(a1);
}

void sub_1828A4E3C(void *a1)
{
  void *v1;
  void *v2;

  objc_begin_catch(a1);
  os_unfair_recursive_lock_unlock();
  objc_exception_rethrow();
}

void sub_1828A4E9C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_1828A4F20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id LaunchServices::Record::getNullPlaceholder(LaunchServices::Record *this)
{
  if (LaunchServices::Record::getNullPlaceholder(void)::once != -1)
    dispatch_once(&LaunchServices::Record::getNullPlaceholder(void)::once, &__block_literal_global_208);
  return (id)LaunchServices::Record::getNullPlaceholder(void)::result;
}

uint64_t LaunchServices::Record::checkForExfiltrationRisk(LaunchServices::Record *this, NSCoder *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;

  if (LaunchServices::Record::checkForExfiltrationRisk(NSCoder *)::once != -1)
    dispatch_once(&LaunchServices::Record::checkForExfiltrationRisk(NSCoder *)::once, &__block_literal_global_200_0);
  if ((LaunchServices::Record::checkForExfiltrationRisk(NSCoder *)::isSafeToSendData & 1) != 0)
    return 0;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    return 0;
  -[LaunchServices::Record connection](this, "connection");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "_xpcConnection");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (_LSXPCConnectionMayMapDatabase(v4) || _LSIsXPCConnectionPlatformBinary(v4))
  {
    v5 = 0;
  }
  else
  {
    __LAUNCH_SERVICES_CLIENT_MAY_BE_EXFILTRATING_PRIVACY_SENSITIVE_INFORMATION__();
    v5 = 1;
  }

  return v5;
}

void sub_1828A508C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id XNSGetPropertyListClasses()
{
  if (XNSGetPropertyListClasses_once != -1)
    dispatch_once(&XNSGetPropertyListClasses_once, &__block_literal_global_14);
  return (id)XNSGetPropertyListClasses_result;
}

void sub_1828A54DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828A5570(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828A5604(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828A5698(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828A572C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828A589C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1828A5DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void LaunchServices::TypeEvaluation::runEvaluator(void **a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  int v9;
  void *v10;
  uint64_t active;
  int v12;
  void *v13;
  id v14;
  const __CFString *v15;
  int v16;
  int v17;
  uint64_t v18;
  int TypeVolume;
  _LSDatabase *v20;
  int TypeAVCHDCollection;
  __CFString *v22;
  __CFString *v23;
  __CFString *DynamicIdentifierForTag;
  void *v25;
  int v26;
  void *v27;
  void *v28;
  int v29;
  uint64_t v30;
  int v31;
  void *v32;
  __CFString *v33;
  void *v34;
  int v35;
  int TypeUnixExecutable;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  void *v41;
  int v42;
  id v43;
  int v44;
  void *v45;
  BOOL v46;
  void *v47;
  const __CFString *v48;
  int TypeData;
  uint64_t ActiveIdentifierForTag;
  int v51;
  const void *v52;
  __CFString *v53;
  uint64_t v54;
  void *v55;
  void *v56;
  int v57[2];
  id v58;
  __int16 v59;
  int TypeDirectory;
  id v61;
  __CFString *v62;
  id v63;
  const __CFString *v64;
  uint64_t v65;
  id v66;
  char v67;
  char v68;
  _QWORD v69[2];
  _QWORD v70[2];
  CFTypeRef v71[3];

  v71[2] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  *(_BYTE *)a4 = 0;
  *(_BYTE *)(a4 + 32) = 0;
  v62 = 0;
  if (objc_msgSend(*(id *)a2, "getCachedResourceValueIfPresent:forKey:error:", &v62, *MEMORY[0x1E0C99AD0], 0))
  {
    if (_UTTypeIdentifierIsDynamic(v62))
    {
      v8 = -[__CFString copy](v62, "copy");
      v9 = *(unsigned __int8 *)(a4 + 32);
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      if (v9)
      {
        v10 = *(void **)(a4 + 16);
        *(_QWORD *)(a4 + 16) = v8;

LABEL_11:
        *(_BYTE *)(a4 + 24) = 0;
        goto LABEL_12;
      }
      *(_QWORD *)(a4 + 16) = v8;
    }
    else
    {
      LODWORD(v64) = 0;
      active = _UTGetActiveTypeForCFStringIdentifier(*a1, v62, &v64);
      if (!active)
        goto LABEL_12;
      v12 = *(unsigned __int8 *)(a4 + 32);
      *(_DWORD *)a4 = (_DWORD)v64;
      *(_QWORD *)(a4 + 8) = active;
      if (v12)
      {
        v13 = *(void **)(a4 + 16);
        *(_QWORD *)(a4 + 16) = 0;

        goto LABEL_11;
      }
      *(_QWORD *)(a4 + 16) = 0;
    }
    *(_BYTE *)(a4 + 32) = 1;
    goto LABEL_11;
  }
LABEL_12:
  if (!*(_BYTE *)(a4 + 32))
  {
    v14 = *(id *)a2;
    v59 = 256;
    TypeDirectory = 0;
    v61 = 0;
    *(_QWORD *)v57 = a1;
    v58 = 0;
    objc_storeStrong(&v58, v14);
    if (TypeDirectory)
      goto LABEL_14;
    LOBYTE(v59) = 0;
    if (objc_msgSend(v58, "isVolume"))
    {
      TypeVolume = _UTTypeGetTypeVolume(**(_LSDatabase ***)v57);
LABEL_21:
      TypeDirectory = TypeVolume;
      goto LABEL_83;
    }
    if (objc_msgSend(v58, "isDirectory"))
    {
      LOBYTE(v63) = 0;
      if (_LSNodeIsPackageIgnoringTypeDeclarations(*(LSContext **)v57, v58, &v63))
      {
        v20 = **(_LSDatabase ***)v57;
        if ((_BYTE)v63)
          TypeAVCHDCollection = _UTTypeGetTypeAVCHDCollection(v20);
        else
          TypeAVCHDCollection = _UTTypeGetTypePackage(v20);
        TypeDirectory = TypeAVCHDCollection;
        LOBYTE(v59) = (_BYTE)v63 == 0;
      }
      else
      {
        TypeDirectory = _UTTypeGetTypeDirectory(**(_LSDatabase ***)v57);
        HIBYTE(v59) = 0;
        LaunchServices::TypeEvaluation::State::getExtension((LaunchServices::TypeEvaluation::State *)v57);
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        LOBYTE(v59) = v34 != 0;

      }
      goto LABEL_82;
    }
    if (objc_msgSend(v58, "isSymbolicLink"))
    {
      TypeVolume = _UTTypeGetTypeSymbolicLink(**(_LSDatabase ***)v57);
      goto LABEL_21;
    }
    if (objc_msgSend(v58, "isAliasFile"))
    {
      TypeVolume = _UTTypeGetTypeAliasFile(**(_LSDatabase ***)v57);
      goto LABEL_21;
    }
    if (objc_msgSend(v58, "isRegularFile"))
    {
      TypeVolume = _UTTypeGetTypeData(**(_LSDatabase ***)v57);
      TypeDirectory = TypeVolume;
      LOBYTE(v59) = 1;
      goto LABEL_83;
    }
    v63 = 0;
    v52 = (const void *)*MEMORY[0x1E0C99968];
    if (!objc_msgSend(v58, "getResourceValue:forKey:options:error:", &v63, *MEMORY[0x1E0C99968], 1, a3))
    {
LABEL_118:

LABEL_82:
      TypeVolume = TypeDirectory;
LABEL_83:
      if (a3 && !TypeVolume)
      {
        if (*a3)
          goto LABEL_88;
        _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], -10813, (uint64_t)"resolveBaseType", 381, 0);
        v43 = (id)objc_claimAutoreleasedReturnValue();
LABEL_77:
        *a3 = v43;
LABEL_88:
        v42 = *(unsigned __int8 *)(a4 + 32);
        goto LABEL_89;
      }
      if (!TypeVolume)
        goto LABEL_88;
LABEL_14:
      if (!(_BYTE)v59)
        goto LABEL_39;
      LOBYTE(v64) = 0;
      v68 = 0;
      v15 = (const __CFString *)LaunchServices::TypeEvaluation::State::getExtension((LaunchServices::TypeEvaluation::State *)v57);
      v16 = TypeDirectory;
      if (v15)
      {
        LODWORD(v71[0]) = 0;
        if (_UTTypeGetActiveIdentifierForTag(**(void ***)v57, CFSTR("public.filename-extension"), v15, TypeDirectory, (uint64_t)v71))
        {
          v17 = (int)v71[0];
          if (LODWORD(v71[0]))
          {
            v18 = _UTTypeGet();
            LODWORD(v64) = v17;
            v65 = v18;
            v66 = 0;
            v68 = 1;
            v67 = 0;
            goto LABEL_37;
          }
        }
        v16 = TypeDirectory;
      }
      if (!v16 || !(_BYTE)v59 || !HIBYTE(v59))
      {
LABEL_37:
        std::__optional_storage_base<LaunchServices::TypeEvaluator::Result,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<LaunchServices::TypeEvaluator::Result,false>>(a4, (uint64_t)&v64);
        if (v68)

LABEL_39:
        if (*(_BYTE *)(a4 + 32))
          goto LABEL_74;
        LODWORD(v64) = 0;
        v26 = TypeDirectory;
        if (v26 == _UTTypeGetTypeData(**(_LSDatabase ***)v57))
        {
          objc_msgSend(v58, "nameWithError:", 0);
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          v28 = v27;
          if (v27)
          {
            if (!objc_msgSend(v27, "caseInsensitiveCompare:", CFSTR("makefile"))
              || !objc_msgSend(v28, "caseInsensitiveCompare:", CFSTR("gnumakefile")))
            {
              _UTGetActiveTypeForCFStringIdentifier(**(void ***)v57, CFSTR("public.make-source"), &v64);
            }
            if (LaunchServices::TypeEvaluation::gnitsFileNames(void)::once != -1)
              dispatch_once(&LaunchServices::TypeEvaluation::gnitsFileNames(void)::once, &__block_literal_global_37_1);
            if (objc_msgSend((id)LaunchServices::TypeEvaluation::gnitsFileNames(void)::result, "containsObject:", v28, *(_QWORD *)v57))_UTGetActiveTypeForCFStringIdentifier(**(void ***)v57, CFSTR("public.plain-text"), &v64);
          }

          v29 = (int)v64;
          if ((_DWORD)v64)
          {
            v30 = _UTTypeGet();
            v31 = *(unsigned __int8 *)(a4 + 32);
            *(_DWORD *)a4 = v29;
            *(_QWORD *)(a4 + 8) = v30;
            if (v31)
            {
              v32 = *(void **)(a4 + 16);
              *(_QWORD *)(a4 + 16) = 0;

            }
            else
            {
              *(_QWORD *)(a4 + 16) = 0;
              *(_BYTE *)(a4 + 32) = 1;
            }
            *(_BYTE *)(a4 + 24) = 0;
          }
        }
        if (*(_BYTE *)(a4 + 32))
          goto LABEL_74;
        v35 = TypeDirectory;
        if (v35 == _UTTypeGetTypeData(**(_LSDatabase ***)v57))
        {
          if (objc_msgSend(v58, "isExecutable"))
          {
            TypeUnixExecutable = _UTTypeGetTypeUnixExecutable(**(_LSDatabase ***)v57);
            goto LABEL_68;
          }
        }
        else
        {
          v37 = TypeDirectory;
          if (v37 == _UTTypeGetTypeDirectory(**(_LSDatabase ***)v57))
          {
            TypeUnixExecutable = _UTTypeGetTypeFolder(**(_LSDatabase ***)v57);
LABEL_68:
            v38 = TypeUnixExecutable;
            if (TypeUnixExecutable)
              goto LABEL_70;
          }
        }
        v38 = TypeDirectory;
        if (!TypeDirectory)
        {
LABEL_74:
          v42 = *(unsigned __int8 *)(a4 + 32);
          if (!a3 || *(_BYTE *)(a4 + 32))
          {
LABEL_89:
            if (!v42
              || !*(_BYTE *)(a2 + 8)
              || (v44 = *(_DWORD *)a4,
                  LOBYTE(v64) = 0,
                  v68 = 0,
                  _UTTypeGetTypeData(**(_LSDatabase ***)v57) != v44))
            {
LABEL_103:

              goto LABEL_104;
            }
            v71[0] = 0;
            objc_msgSend(v58, "URL");
            v45 = (void *)objc_claimAutoreleasedReturnValue();
            v71[0] = 0;
            if (_LSCopySniffedExtensionAndTypeIdentifierForURL())
            {
              v46 = v71[0] == 0;

              if (!v46)
              {
                LODWORD(v70[0]) = 0;
                v47 = **(void ***)v57;
                v48 = (const __CFString *)v71[0];
                TypeData = _UTTypeGetTypeData(**(_LSDatabase ***)v57);
                ActiveIdentifierForTag = _UTTypeGetActiveIdentifierForTag(v47, CFSTR("public.filename-extension"), v48, TypeData, (uint64_t)v70);
                if (ActiveIdentifierForTag)
                {
                  LODWORD(v64) = v70[0];
                  v65 = ActiveIdentifierForTag;
                  v66 = 0;
                  v51 = 1;
                  v68 = 1;
                  v67 = 1;
LABEL_98:
                  if (v71[0])
                    CFRelease(v71[0]);
                  if (v51)
                  {
                    std::__optional_storage_base<LaunchServices::TypeEvaluator::Result,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<LaunchServices::TypeEvaluator::Result,false>>(a4, (uint64_t)&v64);
                    if (v68)

                  }
                  goto LABEL_103;
                }
              }
            }
            else
            {

            }
            v51 = 0;
            goto LABEL_98;
          }
          _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], -10813, (uint64_t)"runEvaluator", 274, 0);
          v43 = (id)objc_claimAutoreleasedReturnValue();
          goto LABEL_77;
        }
LABEL_70:
        v39 = _UTTypeGet();
        v40 = *(unsigned __int8 *)(a4 + 32);
        *(_DWORD *)a4 = v38;
        *(_QWORD *)(a4 + 8) = v39;
        if (v40)
        {
          v41 = *(void **)(a4 + 16);
          *(_QWORD *)(a4 + 16) = 0;

        }
        else
        {
          *(_QWORD *)(a4 + 16) = 0;
          *(_BYTE *)(a4 + 32) = 1;
        }
        *(_BYTE *)(a4 + 24) = 0;
        goto LABEL_74;
      }
      v22 = (__CFString *)LaunchServices::TypeEvaluation::State::getExtension((LaunchServices::TypeEvaluation::State *)v57);
      if (v22)
      {
        if (!_UTExtensionLooksLikeAppendedRandomness(**(void ***)v57, v22))
        {
          v23 = CFSTR("public.filename-extension");
          v22 = v22;
          if (v23)
          {
            if (_UTTypeGet())
              v33 = (__CFString *)_CSStringCopyCFString();
            else
              v33 = 0;
            DynamicIdentifierForTag = (__CFString *)_UTTypeCreateDynamicIdentifierForTag(*(void ***)v57, v23, v22, v33);

LABEL_35:
            if (DynamicIdentifierForTag)
            {
              v25 = (void *)-[__CFString copy](DynamicIdentifierForTag, "copy");
              LODWORD(v64) = 0;
              v65 = 0;
              v66 = v25;
              v68 = 1;
              v67 = 0;

            }
            goto LABEL_37;
          }
LABEL_34:
          DynamicIdentifierForTag = 0;
          goto LABEL_35;
        }
        v22 = 0;
      }
      v23 = 0;
      goto LABEL_34;
    }
    if (LaunchServices::TypeEvaluation::resolveBaseType(LaunchServices::TypeEvaluation::State &,NSError * {__autoreleasing}*)::once != -1)
      dispatch_once(&LaunchServices::TypeEvaluation::resolveBaseType(LaunchServices::TypeEvaluation::State &,NSError * {__autoreleasing}*)::once, &__block_literal_global_79);
    objc_msgSend((id)LaunchServices::TypeEvaluation::resolveBaseType(LaunchServices::TypeEvaluation::State &,NSError * {__autoreleasing}*)::posixUTIs, "objectForKeyedSubscript:", v63, *(_QWORD *)v57);
    v53 = (__CFString *)objc_claimAutoreleasedReturnValue();
    if (v53)
    {
      v54 = _UTGetActiveTypeForCFStringIdentifier(**(void ***)v57, v53, &TypeDirectory);
      if (!a3 || v54)
        goto LABEL_117;
      v71[0] = *(CFTypeRef *)MEMORY[0x1E0CB2938];
      v71[1] = v52;
      v64 = CFSTR("File system object has an unknown POSIX type.");
      v65 = (uint64_t)v63;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v64, v71, 2);
      v55 = (void *)objc_claimAutoreleasedReturnValue();
      _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], -10815, (uint64_t)"resolveBaseType", 366, v55);
      v56 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      if (!a3)
      {
LABEL_117:

        goto LABEL_118;
      }
      v69[0] = *MEMORY[0x1E0CB2938];
      v69[1] = v52;
      v70[0] = CFSTR("File system object has an unknown POSIX type.");
      v70[1] = v63;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v70, v69, 2);
      v55 = (void *)objc_claimAutoreleasedReturnValue();
      _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], -10815, (uint64_t)"resolveBaseType", 371, v55);
      v56 = (void *)objc_claimAutoreleasedReturnValue();
    }
    *a3 = v56;

    goto LABEL_117;
  }
LABEL_104:

}

void sub_1828A6758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, void *a13, void *a14)
{
  uint64_t v14;
  void *v15;
  void *v16;

  if (*(_BYTE *)(v14 + 32))
  _Unwind_Resume(a1);
}

void sub_1828A6904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t _UTTypeGet()
{
  return CSStoreGetUnit();
}

void sub_1828A69E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t _LSExtensionPointFindWithStringID(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, _QWORD *a6)
{
  id v8;
  int v9;
  void *v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint8_t buf[4];
  void *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v19 = 0;
  v20 = &v19;
  v21 = 0x2020000000;
  v22 = 0;
  v15 = 0;
  v16 = &v15;
  v17 = 0x2020000000;
  v18 = 0;
  v8 = a1;
  _LSDatabaseEnumeratingBindingMap();
  v9 = *((_DWORD *)v20 + 6);
  if (!v9)
  {
    v10 = (void *)_CSStringCopyCFString();
    _LSDefaultLog();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v24 = v10;
      _os_log_impl(&dword_182882000, v11, OS_LOG_TYPE_DEFAULT, "Extension point %@ not in the binding map, scanning all extension points", buf, 0xCu);
    }

    _CSStoreEnumerateUnits();
    v9 = *((_DWORD *)v20 + 6);
    if (!v9)
      goto LABEL_10;
  }
  v12 = v16[3];
  if (v12)
  {
    if (a5)
      *a5 = v9;
    v13 = 0;
    if (a6)
      *a6 = v12;
  }
  else
  {
LABEL_10:
    v13 = 4294956482;
  }

  _Block_object_dispose(&v15, 8);
  _Block_object_dispose(&v19, 8);

  return v13;
}

void sub_1828A6CB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  void *v29;
  void *v30;

  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a29, 8);

  _Unwind_Resume(a1);
}

uint64_t _LSClaimGet()
{
  return CSStoreGetUnit();
}

uint64_t _UTTypeGetCachedType(_LSDatabase *a1, const __CFString *a2, unsigned int *a3)
{
  _LSDatabase *v5;
  _LSDatabase *v6;
  uint64_t v7;

  v5 = a1;
  v6 = v5;
  v7 = *a3;
  if (!(_DWORD)v7)
  {
    _UTGetActiveTypeForCFStringIdentifier(v5, a2, a3);
    v7 = *a3;
  }

  return v7;
}

void sub_1828A6D84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _LSNodeIsPackageCommon(LSContext *a1, void *a2, int a3, _BYTE *a4)
{
  id v7;
  void *v8;
  uint64_t v9;
  __CFString *v11;
  __CFString *v12;
  char v13;

  v7 = a2;
  v8 = v7;
  if (a4)
    *a4 = 0;
  if (objc_msgSend(v7, "isDirectory") && (objc_msgSend(v8, "isVolume") & 1) == 0)
  {
    if ((objc_msgSend(v8, "hasPackageBit") & 1) != 0)
    {
      v9 = 1;
    }
    else
    {
      objc_msgSend(v8, "extensionWithError:", 0);
      v11 = (__CFString *)objc_claimAutoreleasedReturnValue();
      v12 = v11;
      if (v11)
      {
        if (a1
          && -[__CFString length](v11, "length")
          && (_LSIsPackageExtension(a1, a3, v12)
           || (objc_msgSend(v8, "getHFSType:creator:error:", 0, 0, 0) & 1) != 0))
        {
          v9 = 1;
        }
        else
        {
          v9 = objc_msgSend(v8, "isAVCHDCollection");
          v13 = v9 ^ 1;
          if (!a4)
            v13 = 1;
          if ((v13 & 1) == 0)
          {
            v9 = 1;
            *a4 = 1;
          }
        }
      }
      else
      {
        v9 = 0;
      }

    }
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

void sub_1828A6EA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _LSGetBundleClassForNode(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  __CFString *v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  const char *CStringPtr;
  uint64_t v11;
  void *v12;
  void *v13;
  __CFString *v14;
  __CFString *v15;
  uint64_t v16;
  int v17;
  int v19;
  int v20[32];
  __CFString *v21;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;

  v3 = a2;
  if ((objc_msgSend(v3, "isVolume") & 1) == 0
    && ((objc_msgSend(v3, "isDirectory") & 1) != 0 || (objc_msgSend(v3, "isResolvable") & 1) == 0))
  {
    v28 = 0;
    objc_msgSend(v3, "extensionWithError:", &v28);
    v5 = (__CFString *)objc_claimAutoreleasedReturnValue();
    v6 = v28;
    v7 = v6;
    if (!v5 && _LSGetOSStatusFromNSError(v6))
      goto LABEL_37;
    v8 = -[__CFString length](v5, "length");
    v9 = v8;
    if (!v8)
    {
LABEL_31:
      if (!objc_msgSend(v3, "isDirectory"))
        goto LABEL_42;
      v17 = objc_msgSend(v3, "hasPackageBit") ^ 1;
      if (v9)
        LOBYTE(v17) = 0;
      if ((v17 & 1) == 0)
      {
LABEL_42:
        v20[0] = 0;
        if (objc_msgSend(v3, "getHFSType:creator:error:", v20, 0, 0))
        {
          v4 = _LSGetBundleClassForHFSType(v20[0]);
LABEL_38:

          goto LABEL_39;
        }
      }
LABEL_37:
      v4 = 0;
      goto LABEL_38;
    }
    v21 = v5;
    v24 = 0;
    v25 = v8;
    if (CFStringGetCharactersPtr(v5))
      CStringPtr = 0;
    else
      CStringPtr = CFStringGetCStringPtr(v5, 0x600u);
    v23 = CStringPtr;
    v26 = 0;
    v27 = 0;
    v11 = _LSGetBundleClassForExtensionInlineBuffer((uint64_t)v20);
    v4 = v11;
    if ((_DWORD)v11)
    {
      if ((_DWORD)v11 == 1)
      {
        objc_msgSend(v3, "pathWithError:", 0);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = v12;
        if (v12
          && !objc_msgSend(v12, "caseInsensitiveCompare:", CFSTR("/System/Library/CoreServices/MobileCoreTypes.bundle")))
        {

          v4 = 11;
        }
        else
        {

          v4 = 1;
        }
      }
      goto LABEL_38;
    }
    if (objc_msgSend(v3, "isDirectory"))
    {
      if (a1 && _LSIsKnownExtensionInlineBuffer(a1, (uint64_t)v20))
        goto LABEL_37;
      goto LABEL_31;
    }
    v19 = 1061109567;
    if (a1)
    {
      v14 = v5;
      v15 = v14;
      if (v5 && -[__CFString length](v14, "length") == 3)
      {
        v16 = -[__CFString caseInsensitiveCompare:](v15, "caseInsensitiveCompare:", CFSTR("exe"));

        if (!v16)
          goto LABEL_28;
      }
      else
      {

      }
      if (_LSIsKnownExtensionInlineBuffer(a1, (uint64_t)v20))
        goto LABEL_37;
    }
LABEL_28:
    if (!objc_msgSend(v3, "getHFSType:creator:error:", &v19, 0, 0) || v19 == 1061109567 || !v19)
      goto LABEL_37;
    goto LABEL_31;
  }
  v4 = 0;
LABEL_39:

  return v4;
}

void sub_1828A712C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t _FSNodeGetSimpleBoolValue(FSNode *a1, NSString *a2, uint64_t a3, uint64_t a4)
{
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  id v14;

  if (a1)
  {
    if (a2)
      goto LABEL_3;
LABEL_9:
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "BOOL _FSNodeGetSimpleBoolValue(FSNode *const __strong, const __strong NSURLResourceKey, CFURLResourcePropertyFlags, CFURLVolumePropertyFlags)");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", v11, CFSTR("FSUtils.mm"), 657, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("inKey != nil"));

    if (!a1)
      goto LABEL_10;
    goto LABEL_4;
  }
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "BOOL _FSNodeGetSimpleBoolValue(FSNode *const __strong, const __strong NSURLResourceKey, CFURLResourcePropertyFlags, CFURLVolumePropertyFlags)");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "handleFailureInFunction:file:lineNumber:description:", v9, CFSTR("FSUtils.mm"), 656, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("inNode != nil"));

  if (!a2)
    goto LABEL_9;
LABEL_3:
  if (!a1)
    goto LABEL_10;
LABEL_4:
  if (a4 | a3 && (*((_BYTE *)a1 + 24) & 8) != 0 && __CFURLResourceInfoPtr())
  {
    v14 = 0;
    MEMORY[0x186DAD90C]();
  }
LABEL_10:
  v14 = 0;
  if (-[FSNode getResourceValue:forKey:options:error:](a1, "getResourceValue:forKey:options:error:", &v14, a2, 1, 0))
  {
    v12 = objc_msgSend(v14, "BOOLValue");
  }
  else
  {
    v12 = 0;
  }

  return v12;
}

void sub_1828A73B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t _LSGetBundleClassForExtensionInlineBuffer(uint64_t a1)
{
  uint64_t result;
  const __CFString *v3;
  CFRange v4;
  const __CFString *v5;
  BOOL v6;
  unsigned int v7;
  const __CFString *v8;
  const __CFString *v9;
  CFRange v10;
  CFRange v11;
  CFRange v12;
  CFRange v13;
  CFRange v14;
  CFRange v15;
  CFRange v16;
  CFRange v17;
  CFRange v18;
  CFRange v19;

  result = 0;
  switch(*(_QWORD *)(a1 + 160))
  {
    case 3:
      v11.location = *(_QWORD *)(a1 + 152);
      v11.length = 3;
      if (CFStringCompareWithOptions(*(CFStringRef *)(a1 + 128), CFSTR("app"), v11, 0))
      {
        v3 = *(const __CFString **)(a1 + 128);
        v4 = *(CFRange *)(a1 + 152);
        v5 = CFSTR("xpc");
        goto LABEL_7;
      }
      return 2;
    case 4:
      v12.location = *(_QWORD *)(a1 + 152);
      v12.length = 4;
      if (CFStringCompareWithOptions(*(CFStringRef *)(a1 + 128), CFSTR("wdgt"), v12, 0))
      {
        v6 = CFStringCompareWithOptions(*(CFStringRef *)(a1 + 128), CFSTR("dext"), *(CFRange *)(a1 + 152), 0) == kCFCompareEqualTo;
        v7 = 15;
        goto LABEL_19;
      }
      return 6;
    case 5:
      v3 = *(const __CFString **)(a1 + 128);
      v4.location = *(_QWORD *)(a1 + 152);
      v5 = CFSTR("appex");
      v4.length = 5;
LABEL_7:
      v6 = CFStringCompareWithOptions(v3, v5, v4, 0) == kCFCompareEqualTo;
      v7 = 12;
      goto LABEL_19;
    case 6:
      v13.location = *(_QWORD *)(a1 + 152);
      v13.length = 6;
      if (CFStringCompareWithOptions(*(CFStringRef *)(a1 + 128), CFSTR("bundle"), v13, 0))
      {
        v6 = CFStringCompareWithOptions(*(CFStringRef *)(a1 + 128), CFSTR("action"), *(CFRange *)(a1 + 152), 0) == kCFCompareEqualTo;
        v7 = 5;
        goto LABEL_19;
      }
      result = 1;
      break;
    case 7:
      v8 = *(const __CFString **)(a1 + 128);
      v10.location = *(_QWORD *)(a1 + 152);
      v9 = CFSTR("service");
      v10.length = 7;
      return 2 * (CFStringCompareWithOptions(v8, v9, v10, 0) == kCFCompareEqualTo);
    case 8:
      v14.location = *(_QWORD *)(a1 + 152);
      v14.length = 8;
      v6 = CFStringCompareWithOptions(*(CFStringRef *)(a1 + 128), CFSTR("prefpane"), v14, 0) == kCFCompareEqualTo;
      v7 = 9;
      goto LABEL_19;
    case 9:
      v15.location = *(_QWORD *)(a1 + 152);
      v15.length = 9;
      if (CFStringCompareWithOptions(*(CFStringRef *)(a1 + 128), CFSTR("framework"), v15, 0))
      {
        v6 = CFStringCompareWithOptions(*(CFStringRef *)(a1 + 128), CFSTR("vpnplugin"), *(CFRange *)(a1 + 152), 0) == kCFCompareEqualTo;
        v7 = 13;
LABEL_19:
        if (v6)
          result = v7;
        else
          result = 0;
      }
      else
      {
        result = 3;
      }
      break;
    case 0xALL:
      v16.location = *(_QWORD *)(a1 + 152);
      v16.length = 10;
      return 4
           * (CFStringCompareWithOptions(*(CFStringRef *)(a1 + 128), CFSTR("mdimporter"), v16, 0) == kCFCompareEqualTo);
    case 0xBLL:
      v17.location = *(_QWORD *)(a1 + 152);
      v17.length = 11;
      if (CFStringCompareWithOptions(*(CFStringRef *)(a1 + 128), CFSTR("qlgenerator"), v17, 0) == kCFCompareEqualTo)
        return 7;
      v8 = *(const __CFString **)(a1 + 128);
      v10 = *(CFRange *)(a1 + 152);
      v9 = CFSTR("placeholder");
      return 2 * (CFStringCompareWithOptions(v8, v9, v10, 0) == kCFCompareEqualTo);
    case 0xCLL:
      v18.location = *(_QWORD *)(a1 + 152);
      v18.length = 12;
      v6 = CFStringCompareWithOptions(*(CFStringRef *)(a1 + 128), CFSTR("cannedsearch"), v18, 0) == kCFCompareEqualTo;
      v7 = 10;
      goto LABEL_19;
    case 0xFLL:
      v19.location = *(_QWORD *)(a1 + 152);
      v19.length = 15;
      if (CFStringCompareWithOptions(*(CFStringRef *)(a1 + 128), CFSTR("systemextension"), v19, 0))
        return 0;
      else
        return 15;
    default:
      return result;
  }
  return result;
}

void sub_1828A7864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

uint64_t _LSBundleFindWithNode(uint64_t a1, void *a2, _DWORD *a3, _QWORD *a4)
{
  id v7;
  NSString *v8;
  id v9;
  void *v10;
  int v11;
  id v12;
  void *v13;
  uint64_t v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  id v20;
  NSObject *v21;
  id v22;
  id v24[5];
  id v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31[6];
  char v32;
  _QWORD v33[4];
  id v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  char v51;
  _OWORD v52[2];
  _BYTE v53[168];
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v48 = 0;
  v49 = &v48;
  v50 = 0x2020000000;
  v51 = 0;
  v44 = 0;
  v45 = &v44;
  v46 = 0x2020000000;
  v47 = 0;
  v40 = 0;
  v41 = &v40;
  v42 = 0x2020000000;
  v43 = 0;
  v38 = 0;
  v39 = 0;
  objc_msgSend(v7, "nameWithError:", &v38);
  v8 = (NSString *)objc_claimAutoreleasedReturnValue();
  v9 = v38;
  v10 = v9;
  if (v8)
  {

  }
  else
  {
    v14 = _LSGetOSStatusFromNSError(v9);

    if ((_DWORD)v14)
      goto LABEL_9;
  }
  v37 = 0;
  v11 = objc_msgSend(v7, "getVolumeIdentifier:error:", &v39, &v37);
  v12 = v37;
  v13 = v12;
  if (v11)
  {

  }
  else
  {
    v14 = _LSGetOSStatusFromNSError(v12);

    if ((_DWORD)v14)
      goto LABEL_9;
  }
  if (!*((_BYTE *)v49 + 24))
  {
    memset(v52, 0, sizeof(v52));
    LaunchServices::BindingEvaluator::CreateWithBundleInfo(0, v8, 0, 0, v52, (uint64_t)v53);
    v19 = (void *)MEMORY[0x1E0C809B0];
    v33[0] = MEMORY[0x1E0C809B0];
    v33[1] = 3221225472;
    v33[2] = ___LSBundleFindWithNode_block_invoke;
    v33[3] = &unk_1E1041AC8;
    v35 = a1;
    v20 = v7;
    v34 = v20;
    v36 = v39;
    LaunchServices::BindingEvaluator::setFilter((uint64_t)v53, CFSTR("bundle unit matches input node"), v33);
    LaunchServices::BindingEvaluator::setOptions((uint64_t)v53, 32910);
    LaunchServices::BindingEvaluator::getBestBinding((LaunchServices::BindingEvaluator *)v53, v31);
    if (v32)
    {
      *((_DWORD *)v45 + 6) = v31[0];
      v41[3] = v31[1];
      *((_BYTE *)v49 + 24) = 1;
    }
    else
    {
      _LSDefaultLog();
      v21 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
        _LSBundleFindWithNode_cold_1((uint64_t)v20, v21);

      v24[1] = v19;
      v24[2] = (id)3221225472;
      v24[3] = ___LSBundleFindWithNode_block_invoke_91;
      v24[4] = &unk_1E1041AF0;
      v26 = &v44;
      v27 = &v40;
      v29 = a1;
      v22 = v20;
      v30 = v39;
      v25 = v22;
      v28 = &v48;
      _CSStoreEnumerateUnits();

    }
    if (v32)
    {

    }
    LaunchServices::BindingEvaluator::~BindingEvaluator((LaunchServices::BindingEvaluator *)v53);
    v15 = 0;
    goto LABEL_23;
  }
  v14 = 0;
LABEL_9:
  if (*((_BYTE *)v49 + 24))
  {
    v15 = 0;
    goto LABEL_24;
  }
  v24[0] = 0;
  objc_msgSend(v7, "pathWithError:", v24);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = v24[0];
  v18 = v17;
  if (v16)
  {

  }
  else
  {
    v14 = _LSGetOSStatusFromNSError(v17);

    if ((_DWORD)v14)
    {
      v15 = 0;
      goto LABEL_30;
    }
  }
  v15 = v16;
  _CSStoreEnumerateUnits();

LABEL_23:
  v14 = 0;
LABEL_24:
  if (*((_BYTE *)v49 + 24))
  {
    if (a3)
      *a3 = *((_DWORD *)v45 + 6);
    if (a4)
      *a4 = v41[3];
  }
  else
  {
    v14 = 4294957797;
  }
LABEL_30:

  _Block_object_dispose(&v40, 8);
  _Block_object_dispose(&v44, 8);
  _Block_object_dispose(&v48, 8);

  return v14;
}

void sub_1828A7CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,id a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  void *v63;
  void *v64;

  std::__optional_destruct_base<LSBinding,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&a30);
  LaunchServices::BindingEvaluator::~BindingEvaluator((LaunchServices::BindingEvaluator *)&a63);

  _Block_object_dispose(&a47, 8);
  _Block_object_dispose(&a51, 8);
  _Block_object_dispose(&a55, 8);

  _Unwind_Resume(a1);
}

void sub_1828A7F28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1828A8024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1828A80C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

uint64_t _UTTypeGetActiveIdentifierForTag(void *a1, const __CFString *a2, const __CFString *a3, int a4, uint64_t a5)
{
  id v9;
  void *v10;
  uint64_t v11;
  _QWORD v13[4];
  id v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;

  v9 = a1;
  v10 = v9;
  v11 = 0;
  v18 = 0;
  v19 = &v18;
  v20 = 0x2020000000;
  v21 = 0;
  if (v9 && a2 && a3)
  {
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = ___UTTypeGetActiveIdentifierForTag_block_invoke;
    v13[3] = &unk_1E1046150;
    v17 = a4;
    v14 = v9;
    v15 = &v18;
    v16 = a5;
    _UTEnumerateTypesForTag(v14, a2, a3, v13);

    v11 = v19[3];
  }
  _Block_object_dispose(&v18, 8);

  return v11;
}

void sub_1828A81C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  va_list va;

  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _UTEnumerateTypesForTag(void *a1, const __CFString *a2, const __CFString *a3, void *a4)
{
  id v7;
  int StringForCFString;
  int BindingMapIndex;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  id v12;

  v10 = a1;
  v7 = a4;
  if (v10)
  {
    if (a2)
    {
      if (a3)
      {
        if (v7)
        {
          StringForCFString = _LSDatabaseGetStringForCFString(v10, a2, 1);
          if (StringForCFString)
          {
            BindingMapIndex = _LSDatabaseFindBindingMapIndex((uint64_t)v10, StringForCFString);
            if (BindingMapIndex != -1)
            {
              if (_LSDatabaseGetStringForCFString(v10, a3, v10[104 * BindingMapIndex + 236]))
              {
                v11 = v10;
                v12 = v7;
                _LSDatabaseEnumeratingBindingMap();

              }
            }
          }
        }
      }
    }
  }

}

void sub_1828A8308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t _LSDatabaseFindBindingMapIndex(uint64_t a1, int a2)
{
  uint64_t result;
  int *v4;
  int v5;

  result = 0;
  v4 = (int *)(a1 + 232);
  while (1)
  {
    v5 = *v4;
    v4 += 26;
    if (v5 == a2)
      break;
    if (++result == 14)
      return 0xFFFFFFFFLL;
  }
  return result;
}

id LaunchServices::TypeEvaluation::State::getExtension(LaunchServices::TypeEvaluation::State *this)
{
  void *v1;
  uint64_t v3;
  void *v4;
  void *v5;

  v1 = (void *)*((_QWORD *)this + 3);
  if (v1
    || (objc_msgSend(*((id *)this + 1), "extensionWithError:", 0),
        v3 = objc_claimAutoreleasedReturnValue(),
        v4 = (void *)*((_QWORD *)this + 3),
        *((_QWORD *)this + 3) = v3,
        v4,
        (v1 = (void *)*((_QWORD *)this + 3)) != 0))
  {
    if (objc_msgSend(v1, "length"))
      v5 = v1;
    else
      v5 = 0;
  }
  else
  {
    v5 = 0;
  }
  return v5;
}

BOOL _LSIsPackageExtension(LSContext *a1, int a2, CFStringRef theString)
{
  CFIndex Length;
  const __CFString *v7;
  _BOOL8 v8;
  int v9;
  BOOL v10;
  _LSDatabase *db;
  int TypePackage;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  char v17;

  if (!theString)
    goto LABEL_9;
  Length = CFStringGetLength(theString);
  switch(Length)
  {
    case 3:
      v7 = CFSTR("app");
      goto LABEL_8;
    case 11:
      v7 = CFSTR("placeholder");
LABEL_8:
      v8 = 1;
      if (CFStringCompare(theString, v7, 1uLL) == kCFCompareEqualTo)
        return v8;
      break;
    case 7:
      v7 = CFSTR("service");
      goto LABEL_8;
  }
LABEL_9:
  v14 = 0;
  v15 = &v14;
  v16 = 0x2020000000;
  v17 = 0;
  if (_LSDatabaseGetStringForCFString(a1->db, theString, 1))
    _LSDatabaseEnumeratingBindingMap();
  v9 = *((unsigned __int8 *)v15 + 24);
  _Block_object_dispose(&v14, 8);
  v10 = v9 == 0;
  v8 = v9 != 0;
  v10 = !v10 || a2 == 0;
  if (!v10)
  {
    db = a1->db;
    TypePackage = _UTTypeGetTypePackage(db);
    return _UTTypeGetActiveIdentifierForTag(db, CFSTR("public.filename-extension"), theString, TypePackage, 0) != 0;
  }
  return v8;
}

void sub_1828A8550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1828A879C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t _UTTypeGetTypeData(_LSDatabase *a1)
{
  return _UTTypeGetCachedType(a1, CFSTR("public.data"), (unsigned int *)a1->schema._cache + 74);
}

void sub_1828A88E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1828A8A90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1828A8B98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t _LSNodeIsPackage(LSContext *a1, void *a2, _BYTE *a3)
{
  return _LSNodeIsPackageCommon(a1, a2, 1, a3);
}

void sub_1828A8D08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1828A8F78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1828A9064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);

  _Unwind_Resume(a1);
}

void _LSBundleDisplayNameContextEnumerate(void *a1)
{
  void (**v1)(id, _QWORD, const __CFString *, void *, char *);
  void *v2;
  char v3;

  v1 = a1;
  v3 = 0;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithCapacity:", 128);
  objc_msgSend(v2, "appendString:", *MEMORY[0x1E0C9AAC8]);
  objc_msgSend(v2, "appendString:", CFSTR("#"));
  objc_msgSend(v2, "appendString:", CFSTR("Car"));
  v1[2](v1, 0, CFSTR("Car"), v2, &v3);

}

void sub_1828A9128(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828A9218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1828A93B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL _LSIsKnownExtensionInlineBuffer(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  _QWORD v4[21];

  v2 = 0;
  v4[20] = *MEMORY[0x1E0C80C00];
  if (a1 && a2)
  {
    if (*(uint64_t *)(a2 + 160) >= 1 && XCFBufInitWithCFStringInlineBuffer((uint64_t)v4, a2, 1))
    {
      v2 = CSStringBindingFindStringAndBindings() == 0;
      XCFBufDestroy((uint64_t)v4);
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t XCFBufInitWithCFStringInlineBuffer(uint64_t a1, uint64_t a2, int a3)
{
  unsigned __int8 *v3;
  uint64_t v4;
  int v5;

  if (*(_QWORD *)(a2 + 144))
  {
    *(_DWORD *)(a1 + 24) = 127;
    *(_QWORD *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 28) = 0;
    v3 = (unsigned __int8 *)(*(_QWORD *)(a2 + 144) + *(_QWORD *)(a2 + 152));
    *(_QWORD *)a1 = v3;
    v4 = *(_QWORD *)(a2 + 160);
    *(_DWORD *)(a1 + 8) = v4;
    if (!a3 || !(_DWORD)v4)
      return 1;
    v4 = v4;
    while (1)
    {
      v5 = *v3++;
      if ((v5 - 65) <= 0x19)
        break;
      if (!--v4)
        return 1;
    }
  }
  return XCFBufInitWithCFStringRange(a1, *(const __CFString **)(a2 + 128), *(_QWORD *)(a2 + 152), *(_QWORD *)(a2 + 160), a3);
}

id _LSGetBRDisplayNameForContainerNode(void *a1, void *a2)
{
  id v3;
  id v4;
  const __CFString *v5;
  __CFString *v6;
  void *v7;
  uint64_t *v8;
  uint64_t (*v9)(const __CFURL *, const __CFString *);
  uint64_t v10;
  uint64_t *v11;
  char v12;
  void *v13;
  id v14;
  _QWORD v16[6];
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  void (*v21)(uint64_t);
  id v22;

  v3 = a1;
  v4 = a2;
  v17 = 0;
  v18 = &v17;
  v19 = 0x3032000000;
  v20 = __Block_byref_object_copy__8;
  v21 = __Block_byref_object_dispose__8;
  v22 = 0;
  if (v3 && objc_msgSend(v3, "isDirectory"))
  {
    objc_msgSend(v3, "nameWithError:", 0);
    v5 = (const __CFString *)objc_claimAutoreleasedReturnValue();
    v6 = (__CFString *)v5;
    if (v5
      && (CFStringFind(v5, CFSTR("~"), 0).location != -1
       || CFStringCompare(v6, CFSTR("Desktop"), 0) == kCFCompareEqualTo
       || CFStringCompare(v6, CFSTR("Documents"), 0) == kCFCompareEqualTo))
    {
      objc_msgSend(v3, "URL");
      v7 = (void *)objc_claimAutoreleasedReturnValue();

      if (v4)
      {
        v16[0] = MEMORY[0x1E0C809B0];
        v16[1] = 3221225472;
        v16[2] = ___LSGetBRDisplayNameForContainerNode_block_invoke;
        v16[3] = &unk_1E1041A78;
        v16[4] = &v17;
        v16[5] = v7;
        objc_msgSend(v4, "enumerateObjectsUsingBlock:", v16);
      }
      v8 = v18;
      if (!v18[5])
      {
        v9 = softLinkBRCopyDisplayNameForContainerAtURL;
        if (softLinkBRCopyDisplayNameForContainerAtURL)
        {
          v10 = softLinkBRCopyDisplayNameForContainerAtURL((const __CFURL *)v7, 0);
          v8 = v18;
          v9 = (uint64_t (*)(const __CFURL *, const __CFString *))v18[5];
        }
        else
        {
          v10 = 0;
        }
        v8[5] = v10;

      }
    }

  }
  v11 = v18;
  if (v18[5])
  {
    v12 = _NSIsNSString();
    v11 = v18;
    if ((v12 & 1) == 0)
    {
      v13 = (void *)v18[5];
      v18[5] = 0;

      v11 = v18;
    }
  }
  v14 = (id)v11[5];
  _Block_object_dispose(&v17, 8);

  return v14;
}

void sub_1828A96C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  void *v20;
  void *v21;
  void *v22;

  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

uint64_t _LSNodeIsPackageIgnoringTypeDeclarations(LSContext *a1, void *a2, _BYTE *a3)
{
  return _LSNodeIsPackageCommon(a1, a2, 0, a3);
}

uint64_t _UTTypeGetTypeDirectory(_LSDatabase *a1)
{
  return _UTTypeGetCachedType(a1, CFSTR("public.directory"), (unsigned int *)a1->schema._cache + 79);
}

uint64_t _UTTypeGetTypePackage(_LSDatabase *a1)
{
  return _UTTypeGetCachedType(a1, CFSTR("com.apple.package"), (unsigned int *)a1->schema._cache + 76);
}

void sub_1828A9820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t _UTTypeGetTypeFolder(_LSDatabase *a1)
{
  return _UTTypeGetCachedType(a1, CFSTR("public.folder"), (unsigned int *)a1->schema._cache + 75);
}

uint64_t _LSGetBundleClassForHFSType(int a1)
{
  uint64_t result;

  result = 2;
  if (a1 <= 1128547669)
  {
    if ((a1 - 1095782467) <= 9 && ((1 << (a1 - 67)) & 0x207) != 0)
      return result;
    return a1 == 1112425548;
  }
  if (a1 <= 1634758756)
  {
    if (a1 == 1128547670)
      return result;
    if (a1 == 1179473739)
      return 3;
    return 0;
  }
  if (a1 != 1634758757 && a1 != 1667523958 && a1 != 1684433260)
    return 0;
  return result;
}

void sub_1828A99F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1828A9ADC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1828A9C60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t (*initBRCopyDisplayNameForContainerAtURL(const __CFURL *a1, const __CFString *a2))(const __CFURL *, const __CFString *)
{
  void *v4;
  uint64_t (*result)(const __CFURL *, const __CFString *);

  v4 = (void *)CloudDocsLibrary(void)::frameworkLibrary;
  if (!CloudDocsLibrary(void)::frameworkLibrary)
  {
    v4 = dlopen("/System/Library/PrivateFrameworks/CloudDocs.framework/CloudDocs", 2);
    CloudDocsLibrary(void)::frameworkLibrary = (uint64_t)v4;
  }
  result = (uint64_t (*)(const __CFURL *, const __CFString *))dlsym(v4, "BRCopyDisplayNameForContainerAtURL");
  softLinkBRCopyDisplayNameForContainerAtURL = result;
  if (result)
    return (uint64_t (*)(const __CFURL *, const __CFString *))result(a1, a2);
  return result;
}

uint64_t UTTypeCopyParentIdentifiers(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;

  if (!a1)
    return 0;
  v2 = (void *)MEMORY[0x186DAE7A0]();
  +[UTTypeRecord typeRecordWithIdentifier:](UTTypeRecord, "typeRecordWithIdentifier:", a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3)
  {
    objc_msgSend(v3, "parentTypeIdentifiers");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v5;
    if (v5)
    {
      objc_msgSend(v5, "array");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = objc_msgSend(v7, "copy");

    }
    else
    {
      v8 = 0;
    }

  }
  else
  {
    v8 = 0;
  }

  objc_autoreleasePoolPop(v2);
  return v8;
}

void sub_1828A9F00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1828AA104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void ___ZL35_LSSessionInitMemoryWarningListenerv_block_invoke_2()
{
  void *v0;
  _QWORD *i;
  uint64_t v2;
  id v3;
  void *v4;

  v0 = (void *)MEMORY[0x186DAE7A0]();
  os_unfair_recursive_lock_lock_with_options();
  for (i = *(_QWORD **)(_LSGetSessions() + 16); i; i = (_QWORD *)*i)
  {
    v2 = i[3];
    if (v2)
    {
      v3 = *(id *)(v2 + 24);
      v4 = v3;
      if (v3)
        _LSSchemaClearLocalizedCaches((uint64_t)v3 + 16);

    }
  }
  os_unfair_recursive_lock_unlock();
  objc_autoreleasePoolPop(v0);
}

void sub_1828AA1C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void _LSSchemaClearLocalizedCaches(uint64_t a1)
{
  _LSSchemaCacheWrite(a1, &__block_literal_global_65);
}

void sub_1828AA278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

Boolean UTTypeIsDynamic(CFStringRef inUTI)
{
  const __CFString *v1;

  if (inUTI)
  {
    v1 = inUTI;
    LODWORD(inUTI) = _UTTypeIdentifierIsValid(inUTI);
    if ((_DWORD)inUTI)
      LOBYTE(inUTI) = _UTTypeIdentifierIsDynamic(v1) != 0;
  }
  return inUTI;
}

Boolean UTTypeConformsTo(CFStringRef inUTI, CFStringRef inConformsToUTI)
{
  Boolean v2;
  uint64_t v6;
  void *v7;

  v2 = 0;
  if (inUTI && inConformsToUTI)
  {
    if (inUTI == inConformsToUTI || _XCFStringEqualCaseInsensitive(inUTI, inConformsToUTI))
    {
      return 1;
    }
    else if (_LSCurrentProcessMayMapDatabase()
           && _UTTypeIdentifierIsDeclarable(inUTI)
           && _UTTypeIdentifierIsDeclarable(inConformsToUTI))
    {
      v7 = 0;
      if (_LSContextInit(&v7))
      {
        v2 = 0;
      }
      else
      {
        v6 = 0;
        if (_UTGetActiveTypeForCFStringIdentifier(v7, inUTI, (_DWORD *)&v6 + 1)
          && _UTGetActiveTypeForCFStringIdentifier(v7, inConformsToUTI, &v6))
        {
          v2 = _UTTypeConformsTo(v7, SHIDWORD(v6), v6);
        }
        else
        {
          v2 = 0;
        }
        _LSContextDestroy(&v7);
      }

    }
    else
    {
      return +[UTTypeRecord _typeIdentifier:conformsToTypeIdentifier:](UTTypeRecord, "_typeIdentifier:conformsToTypeIdentifier:", inUTI, inConformsToUTI);
    }
  }
  return v2;
}

void sub_1828AA3E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

BOOL _UTTypeIdentifierIsDeclarable(const __CFString *a1)
{
  return !_UTTypeIdentifierIsDynamic(a1) && _UTTypeIdentifierIsValid(a1);
}

BOOL _UTTypeIdentifierIsValid(CFStringRef theString)
{
  const __CFString *v1;
  CFIndex Length;
  CFIndex v3;
  const UniChar *CharactersPtr;
  const char *CStringPtr;
  uint64_t v6;
  int v7;
  CFIndex v8;
  uint64_t v9;
  UniChar v10;
  int v11;
  CFIndex v12;
  CFIndex v13;
  uint64_t v14;
  CFIndex v15;
  UniChar v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  UniChar v22[64];
  CFStringRef theStringa;
  const UniChar *v24;
  const char *v25;
  uint64_t v26;
  CFIndex v27;
  uint64_t v28;
  uint64_t v29;
  CFRange v30;
  CFRange v31;
  CFRange v32;

  v1 = theString;
  if (theString)
  {
    Length = CFStringGetLength(theString);
    if (Length >= 3)
    {
      v3 = Length;
      theStringa = v1;
      v26 = 0;
      v27 = Length;
      CharactersPtr = CFStringGetCharactersPtr(v1);
      CStringPtr = 0;
      v24 = CharactersPtr;
      if (!CharactersPtr)
        CStringPtr = CFStringGetCStringPtr(v1, 0x600u);
      v6 = 0;
      LOBYTE(v1) = 0;
      v7 = 0;
      v28 = 0;
      v29 = 0;
      v25 = CStringPtr;
      while (1)
      {
        v8 = v7;
        if (v7 < 0 || (v9 = v27, v27 <= v7))
        {
          v10 = 0;
        }
        else if (v24)
        {
          v10 = v24[v26 + v7];
        }
        else if (v25)
        {
          v10 = v25[v26 + v7];
        }
        else
        {
          if (v29 <= v7 || v6 > v7)
          {
            v17 = v7 - 4;
            if (v7 < 4)
              v17 = 0;
            if (v17 + 64 < v27)
              v9 = v17 + 64;
            v28 = v17;
            v29 = v9;
            v31.location = v26 + v17;
            v31.length = v9 - v17;
            CFStringGetCharacters(theStringa, v31, v22);
            v6 = v28;
          }
          v10 = v22[v7 - v6];
        }
        if ((unsigned __int16)(v10 - 58) <= 0xFFF5u && (unsigned __int16)((v10 & 0xFFDF) - 91) < 0xFFE6u)
          goto LABEL_69;
        v11 = v7 + 1;
        v12 = v7 + 1;
        if (v3 <= v12)
          goto LABEL_40;
        while (1)
        {
          if (v7 < -1 || (v13 = v27, v27 <= v12))
          {
            v10 = 0;
LABEL_19:
            if (v10 != 45 && (unsigned __int16)(v10 - 58) < 0xFFF6u)
              goto LABEL_69;
            goto LABEL_34;
          }
          if (v24)
          {
            v10 = v24[v12 + v26];
          }
          else if (v25)
          {
            v10 = v25[v26 + v12];
          }
          else
          {
            if (v29 <= v12 || v6 > v12)
            {
              v14 = v12 - 4;
              if ((v12 & 0xFFFFFFFC) == 0)
                v14 = 0;
              if (v14 + 64 < v27)
                v13 = v14 + 64;
              v28 = v14;
              v29 = v13;
              v30.location = v26 + v14;
              v30.length = v13 - v14;
              CFStringGetCharacters(theStringa, v30, v22);
              v6 = v28;
            }
            v10 = v22[v12 - v6];
          }
          if (v10 == 46)
            break;
          if ((unsigned __int16)((v10 & 0xFFDF) - 91) <= 0xFFE5u)
            goto LABEL_19;
LABEL_34:
          ++v12;
          ++v7;
          if (v3 <= v12)
            goto LABEL_39;
        }
        v10 = 46;
LABEL_39:
        v8 = v7;
        v11 = v12;
LABEL_40:
        if ((v7 & 0x80000000) == 0)
        {
          v15 = v27;
          if (v27 > v8)
          {
            if (v24)
            {
              v16 = v24[v26 + v8];
            }
            else if (v25)
            {
              v16 = v25[v26 + v8];
            }
            else
            {
              if (v29 <= v8 || v6 > v8)
              {
                v18 = v8 - 4;
                if (v7 < 4)
                  v18 = 0;
                if (v18 + 64 < v27)
                  v15 = v18 + 64;
                v28 = v18;
                v29 = v15;
                v32.location = v26 + v18;
                v32.length = v15 - v18;
                CFStringGetCharacters(theStringa, v32, v22);
                v6 = v28;
              }
              v16 = v22[v8 - v6];
            }
            if (v16 == 45)
              goto LABEL_69;
          }
        }
        if (v10 == 46 && v3 - 1 > v12)
        {
          LOBYTE(v1) = 1;
          v7 += 2;
        }
        else
        {
          v7 = v11;
        }
        if (v3 <= v7)
        {
          v19 = 1;
          goto LABEL_70;
        }
      }
    }
    LOBYTE(v1) = 0;
  }
LABEL_69:
  v19 = 0;
LABEL_70:
  if ((_BYTE)v1)
    v20 = v19 == 0;
  else
    v20 = 1;
  return !v20;
}

void sub_1828AA8CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1828AAA20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1828AAAEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _LSRetryForConnectionInterrupted(void *a1)
{
  void (**v1)(_QWORD);
  void *v2;
  int v3;
  void *v4;
  BOOL IsXPCConnectionInterrupted;
  BOOL v7;

  v1 = a1;
  v2 = 0;
  v3 = 9;
  do
  {
    v1[2](v1);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    IsXPCConnectionInterrupted = _LSNSErrorIsXPCConnectionInterrupted(v4);
    v7 = v3-- != 0 && IsXPCConnectionInterrupted;
    v2 = v4;
  }
  while (v7);

  return v4;
}

void sub_1828AAB70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL _LSNSErrorIsXPCConnectionInterrupted(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  _BOOL8 v4;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    objc_msgSend(v1, "domain");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v3, "isEqual:", *MEMORY[0x1E0CB28A8]))
      v4 = objc_msgSend(v2, "code") == 4097;
    else
      v4 = 0;

  }
  else
  {
    v4 = 0;
  }

  return v4;
}

void sub_1828AAC04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828AAD3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1828AAE8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;

  v27 = v26;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1828AAF60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void (**_LSDServiceGetXPCProxyForServiceClass(void *a1, uint64_t a2, int a3, void (**a4)(_QWORD, _QWORD)))(_QWORD, _QWORD)
{
  void *v6;
  void *v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  _LSDServiceGetXPCConnection(a1, a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v6)
  {
    if (a3)
      objc_msgSend(v6, "synchronousRemoteObjectProxyWithErrorHandler:", a4);
    else
      objc_msgSend(v6, "remoteObjectProxyWithErrorHandler:", a4);
    a4 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
  }
  else if (a4)
  {
    _LSDefaultLog();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      _LSDServiceGetXPCProxyForServiceClass_cold_1(v8, v9, v10, v11, v12, v13, v14, v15);

    _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], -10822, (uint64_t)"_LSDServiceGetXPCProxyForServiceClass", 481, 0);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *))a4)[2](a4, v16);

    a4 = 0;
  }

  return a4;
}

void sub_1828AB050(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1828AB104(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1828AB210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1828AB328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  void *v26;

  _Block_object_dispose(&a21, 8);
  _Unwind_Resume(a1);
}

void sub_1828AB414(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828AB4C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void _LSEnumerateClaimedTypes(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;

  v5 = a3;
  v14 = v5;
  if (a1)
  {
    if (a2)
      goto LABEL_3;
LABEL_9:
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _LSEnumerateClaimedTypes(LSContext * _Nonnull, const LSClaimData * _Nonnull, void (^__strong _Nonnull)(NSString *__strong))");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", v11, CFSTR("LSClaimedTypes.mm"), 138, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("inClaimData != NULL"));

    if (v14)
      goto LABEL_4;
LABEL_10:
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _LSEnumerateClaimedTypes(LSContext * _Nonnull, const LSClaimData * _Nonnull, void (^__strong _Nonnull)(NSString *__strong))");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "handleFailureInFunction:file:lineNumber:description:", v13, CFSTR("LSClaimedTypes.mm"), 139, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("inBlock != nil"));

    goto LABEL_4;
  }
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _LSEnumerateClaimedTypes(LSContext * _Nonnull, const LSClaimData * _Nonnull, void (^__strong _Nonnull)(NSString *__strong))");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "handleFailureInFunction:file:lineNumber:description:", v9, CFSTR("LSClaimedTypes.mm"), 137, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("inContext != NULL"));

  v5 = v14;
  if (!a2)
    goto LABEL_9;
LABEL_3:
  if (!v5)
    goto LABEL_10;
LABEL_4:
  if ((*(_BYTE *)(a2 + 8) & 0x20) != 0)
  {
    v7 = *(unsigned int *)(a2 + 68);
    if ((_DWORD)v7)
      _LSEnumerateTypesInBindingList(a1, v7, v6, v14);
  }

}

void sub_1828AB684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void _LSEnumerateTypesInBindingList(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6;
  void *v7;
  uint64_t v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  _QWORD v16[4];
  id v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD v20[3];
  char v21;

  v6 = a4;
  if (a1)
  {
    if ((_DWORD)a2)
      goto LABEL_3;
LABEL_6:
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _LSEnumerateTypesInBindingList(LSContext * _Nonnull, LSBindingListID, const LSClaimData * _Nullable, void (^__strong _Nonnull)(NSString *__strong))");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "handleFailureInFunction:file:lineNumber:description:", v13, CFSTR("LSClaimedTypes.mm"), 69, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("inBindingList != kCSStoreNullID"));

    if (v6)
      goto LABEL_4;
LABEL_7:
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _LSEnumerateTypesInBindingList(LSContext * _Nonnull, LSBindingListID, const LSClaimData * _Nullable, void (^__strong _Nonnull)(NSString *__strong))");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "handleFailureInFunction:file:lineNumber:description:", v15, CFSTR("LSClaimedTypes.mm"), 70, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("inBlock != nil"));

    goto LABEL_4;
  }
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _LSEnumerateTypesInBindingList(LSContext * _Nonnull, LSBindingListID, const LSClaimData * _Nullable, void (^__strong _Nonnull)(NSString *__strong))");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", v11, CFSTR("LSClaimedTypes.mm"), 68, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("inContext != NULL"));

  if (!(_DWORD)a2)
    goto LABEL_6;
LABEL_3:
  if (!v6)
    goto LABEL_7;
LABEL_4:
  v7 = *(void **)a1;
  v8 = *(unsigned int *)(*(_QWORD *)a1 + 232);
  v20[0] = 0;
  v20[1] = v20;
  v20[2] = 0x2020000000;
  v21 = 0;
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = ___LSEnumerateTypesInBindingList_block_invoke;
  v16[3] = &unk_1E1042360;
  v18 = v20;
  v19 = a1;
  v9 = v6;
  v17 = v9;
  _LSBindingListEnumerateEntryWithClass(v7, a2, v8, v16);

  _Block_object_dispose(v20, 8);
}

void sub_1828AB8E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t _UTGetLocalizedDescription(void *a1, int a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  unsigned int v7;

  v3 = a1;
  v7 = 0;
  v4 = (void *)MEMORY[0x186DAE7A0]();
  _UTTypeSearchConformsToTypesCommon((uint64_t)v3, a2, 32, (uint64_t)_UTGetLocalizedDescriptionImpl, (uint64_t)&v7, 0);
  objc_autoreleasePoolPop(v4);
  v5 = v7;

  return v5;
}

void sub_1828AB9FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZL32_UTTypeSearchConformingTypesCoreP14UTTypeSearchPB_block_invoke(uint64_t result, uint64_t a2, int a3, _BYTE *a4)
{
  unsigned int v4;
  uint64_t v7;
  uint64_t v8;

  v4 = a3 & 0xFFFFFFFC;
  if ((~a3 & 3) == 0 && v4 != 0)
  {
    v7 = result;
    result = CSStoreGetUnit();
    if (result)
    {
      if ((*(_BYTE *)(result + 8) & 1) != 0)
      {
        v8 = *(_QWORD *)(v7 + 48);
        *(_DWORD *)(v8 + 56) = v4;
        *(_QWORD *)(v8 + 64) = result;
        result = _UTTypeSearchConformingTypesCore(*(_QWORD *)(v7 + 48));
        if ((_DWORD)result)
        {
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v7 + 40) + 8) + 24) = 1;
          *a4 = 1;
        }
      }
    }
  }
  return result;
}

void sub_1828ABB68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

uint64_t _UTTypeSearchConformingTypesCommon(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  id v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD v15[2];
  int v16;
  id v17;
  uint64_t v18;
  int v19;
  uint64_t Unit;
  uint64_t v21;
  int v22;
  uint64_t v23;

  v11 = a1;
  memset(v15, 0, sizeof(v15));
  v16 = 1065353216;
  v17 = v11;
  v18 = a5;
  v19 = a2;
  Unit = CSStoreGetUnit();
  v21 = a4;
  v22 = 0;
  v12 = 32;
  if (a3 >= 0)
    v12 = a3;
  v23 = v12;
  if (_UTTypeSearchConformingTypesCore((uint64_t)v15))
  {
    if (a6)
      *a6 = v19;
    v13 = Unit;
  }
  else
  {
    v13 = 0;
  }
  std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>>>::~__hash_table((uint64_t)v15);

  return v13;
}

void sub_1828ABC68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>>>::~__hash_table((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t _UTTypeSearchConformingTypesCore(uint64_t a1)
{
  unsigned int *v2;
  uint64_t v3;
  id v4;
  int v5;
  uint64_t v6;
  id v7;
  id v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char v13;

  v10 = 0;
  v11 = &v10;
  v12 = 0x2020000000;
  v13 = 0;
  v2 = (unsigned int *)(a1 + 56);
  if (std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::find<unsigned int>((_QWORD *)a1, (unsigned int *)(a1 + 56)))
  {
    v3 = 0;
  }
  else
  {
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int &>(a1, v2, v2);
    *(_QWORD *)(a1 + 72) = *(unsigned int *)(a1 + 88);
    if ((*(unsigned int (**)(uint64_t))(a1 + 80))(a1 + 40))
    {
      v3 = 1;
    }
    else
    {
      if (*(_QWORD *)(a1 + 96) > (uint64_t)*(unsigned int *)(a1 + 88))
      {
        v4 = *(id *)(a1 + 40);
        v5 = *(_DWORD *)(a1 + 56);
        v6 = *(_QWORD *)(a1 + 64);
        ++*(_DWORD *)(a1 + 88);
        v9 = v4;
        v7 = v4;
        _LSDatabaseEnumeratingBindingMap();
        --*(_DWORD *)(a1 + 88);
        *(_DWORD *)(a1 + 56) = v5;
        *(_QWORD *)(a1 + 64) = v6;

      }
      v3 = *((unsigned __int8 *)v11 + 24);
    }
  }
  _Block_object_dispose(&v10, 8);
  return v3;
}

void sub_1828ABDCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  va_list va;

  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1828ABE7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t _UTTypeSearchConformingTypesWithBlock(void *a1, int a2, uint64_t a3, _DWORD *a4, uint64_t a5)
{
  return _UTTypeSearchConformingTypesCommon(a1, a2, a3, (uint64_t)_UTTypeSearchConformingTypesWithBlock::$_0::__invoke, a5, a4);
}

void sub_1828ABFB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void _LSEnumerateClaimedSchemes(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  _QWORD v19[4];
  id v20;
  uint64_t v21;

  v5 = a3;
  if (a1)
  {
    if (a2)
      goto LABEL_3;
LABEL_9:
    v17 = v5;
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _LSEnumerateClaimedSchemes(LSContext * _Nonnull, const LSClaimData * _Nonnull, void (^__strong _Nonnull)(NSString *__strong))");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "handleFailureInFunction:file:lineNumber:description:", v12, CFSTR("LSClaimedTypes.mm"), 156, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("inClaimData != NULL"));

    v5 = v17;
    if (v17)
      goto LABEL_4;
LABEL_10:
    v18 = v5;
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _LSEnumerateClaimedSchemes(LSContext * _Nonnull, const LSClaimData * _Nonnull, void (^__strong _Nonnull)(NSString *__strong))");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "handleFailureInFunction:file:lineNumber:description:", v14, CFSTR("LSClaimedTypes.mm"), 157, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("inBlock != nil"));

    v5 = v18;
    goto LABEL_4;
  }
  v16 = v5;
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _LSEnumerateClaimedSchemes(LSContext * _Nonnull, const LSClaimData * _Nonnull, void (^__strong _Nonnull)(NSString *__strong))");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "handleFailureInFunction:file:lineNumber:description:", v10, CFSTR("LSClaimedTypes.mm"), 155, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("inContext != NULL"));

  v5 = v16;
  if (!a2)
    goto LABEL_9;
LABEL_3:
  if (!v5)
    goto LABEL_10;
LABEL_4:
  if ((*(_BYTE *)(a2 + 8) & 0x40) != 0)
  {
    v6 = *(unsigned int *)(a2 + 68);
    if ((_DWORD)v6)
    {
      v7 = *(void **)a1;
      v8 = *(unsigned int *)(*(_QWORD *)a1 + 752);
      v19[1] = 3221225472;
      v19[2] = ___LSEnumerateClaimedSchemes_block_invoke;
      v19[3] = &unk_1E1042388;
      v21 = a1;
      v15 = v5;
      v19[0] = MEMORY[0x1E0C809B0];
      v20 = v5;
      _LSBindingListEnumerateEntryWithClass(v7, v6, v8, v19);

      v5 = v15;
    }
  }

}

void sub_1828AC1DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t _UTTypeConformsTo(void *a1, int a2, unsigned int a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  _QWORD v11[5];
  int v12;
  unsigned int v13;
  _QWORD v14[6];
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  char v24;

  v5 = a1;
  v6 = v5;
  v21 = 0;
  v22 = &v21;
  v23 = 0x2020000000;
  v24 = 0;
  if (a2 == a3)
  {
    v7 = 1;
    v24 = 1;
  }
  else
  {
    v17 = 0;
    v18 = &v17;
    v19 = 0x2020000000;
    v20 = 0;
    v8 = MEMORY[0x1E0C809B0];
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = ___UTTypeConformsTo_block_invoke;
    v14[3] = &unk_1E1046178;
    v15 = a2;
    v16 = a3;
    v14[4] = &v21;
    v14[5] = &v17;
    _LSSchemaCacheRead((uint64_t)v5 + 16, v14);
    if (!*((_BYTE *)v18 + 24))
    {
      v9 = _UTTypeSearchConformsToTypesCommon((uint64_t)v6, a2, 32, (uint64_t)_UTTypeSearchEqual, a3, 0) != 0;
      *((_BYTE *)v22 + 24) = v9;
      v11[0] = v8;
      v11[1] = 3221225472;
      v11[2] = ___UTTypeConformsTo_block_invoke_2;
      v11[3] = &unk_1E10461A0;
      v12 = a2;
      v13 = a3;
      v11[4] = &v21;
      _LSSchemaCacheWrite((uint64_t)v6 + 16, v11);
    }
    _Block_object_dispose(&v17, 8);
    v7 = *((unsigned __int8 *)v22 + 24);
  }
  _Block_object_dispose(&v21, 8);

  return v7;
}

void sub_1828AC394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  void *v15;
  uint64_t v16;
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v16 - 96), 8);

  _Unwind_Resume(a1);
}

uint64_t _UTTypeSearchConformsToTypesCommon(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  uint64_t Unit;
  uint64_t v13;
  uint64_t v14;
  _OWORD v16[2];
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;

  Unit = CSStoreGetUnit();
  if (!Unit)
    return 0;
  memset(v16, 0, sizeof(v16));
  v17 = 1065353216;
  v18 = a1;
  v19 = a5;
  v20 = a2;
  v21 = Unit;
  v22 = a4;
  v23 = 0;
  v13 = 32;
  if (a3 >= 0)
    v13 = a3;
  v24 = v13;
  if (!_UTTypeSearchConformsToTypesCore((uint64_t)v16))
  {
    std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>>>::~__hash_table((uint64_t)v16);
    return 0;
  }
  if (a6)
    *a6 = v20;
  v14 = v21;
  std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>>>::~__hash_table((uint64_t)v16);
  return v14;
}

void sub_1828AC4A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>>>::~__hash_table((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ___ZL32_UTTypeSearchConformsToTypesCoreP14UTTypeSearchPB_block_invoke(uint64_t a1, uint64_t a2, int a3, _BYTE *a4)
{
  uint64_t result;

  *(_QWORD *)(*(_QWORD *)(a1 + 48) + 64) = _UTGetActiveTypeForIdentifier(*(void **)(a1 + 32), a3, (_DWORD *)(*(_QWORD *)(a1 + 48) + 56));
  result = *(_QWORD *)(a1 + 48);
  if (*(_QWORD *)(result + 64))
  {
    result = _UTTypeSearchConformsToTypesCore();
    if ((_DWORD)result)
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
      *a4 = 1;
    }
  }
  return result;
}

uint64_t _UTTypeSearchConformsToTypesCore(uint64_t a1)
{
  unsigned int *v2;
  uint64_t v3;
  unsigned int *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  _QWORD v11[4];
  unsigned int *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  char v18;

  v2 = (unsigned int *)(a1 + 56);
  if (std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::find<unsigned int>((_QWORD *)a1, (unsigned int *)(a1 + 56)))
  {
    return 0;
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int &>(a1, v2, v2);
  *(_QWORD *)(a1 + 72) = *(unsigned int *)(a1 + 88);
  if ((*(unsigned int (**)(uint64_t))(a1 + 80))(a1 + 40))
    return 1;
  if (!*(_DWORD *)(*(_QWORD *)(a1 + 64) + 84) || *(_QWORD *)(a1 + 96) <= (uint64_t)*(unsigned int *)(a1 + 88))
    return 0;
  v5 = (unsigned int *)*(id *)(a1 + 40);
  v6 = *(_DWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 64);
  ++*(_DWORD *)(a1 + 88);
  v8 = v5[58];
  v15 = 0;
  v16 = &v15;
  v17 = 0x2020000000;
  v18 = 0;
  v9 = *(unsigned int *)(v7 + 84);
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = ___ZL32_UTTypeSearchConformsToTypesCoreP14UTTypeSearchPB_block_invoke;
  v11[3] = &unk_1E1040268;
  v14 = a1;
  v10 = v5;
  v12 = v10;
  v13 = &v15;
  _LSBindingListEnumerateEntryWithClass(v10, v9, v8, v11);
  if (*((_BYTE *)v16 + 24))
  {

    _Block_object_dispose(&v15, 8);
    v3 = 1;
  }
  else
  {
    --*(_DWORD *)(a1 + 88);
    *(_DWORD *)(a1 + 56) = v6;
    *(_QWORD *)(a1 + 64) = v7;

    _Block_object_dispose(&v15, 8);
    v3 = 0;
  }

  return v3;
}

void sub_1828AC6B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  va_list va;

  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _UTGetActiveTypeForIdentifier(void *a1, int a2, _DWORD *a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  _QWORD v11[5];
  int v12;
  _QWORD v13[6];
  _QWORD v14[4];
  id v15;
  uint64_t *v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;

  v5 = a1;
  v6 = v5;
  v23 = 0;
  v24 = &v23;
  v25 = 0x2020000000;
  v26 = 0;
  v19 = 0;
  v20 = &v19;
  v21 = 0x2020000000;
  v22 = 0;
  if (v5 && a2)
  {
    v7 = MEMORY[0x1E0C809B0];
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = ___UTGetActiveTypeForIdentifier_block_invoke;
    v14[3] = &unk_1E1046088;
    v18 = a2;
    v16 = &v19;
    v17 = &v23;
    v8 = v5;
    v15 = v8;
    _LSSchemaCacheRead((uint64_t)v6 + 16, v14);
    if (!*((_DWORD *)v20 + 6) || !v24[3])
    {
      v13[0] = v7;
      v13[1] = 3221225472;
      v13[2] = ___UTGetActiveTypeForIdentifier_block_invoke_2;
      v13[3] = &unk_1E10460B0;
      v13[4] = &v19;
      v13[5] = &v23;
      _UTEnumerateTypesForIdentifier(v8, a2, v13);
      if (*((_DWORD *)v20 + 6))
      {
        v11[0] = v7;
        v11[1] = 3221225472;
        v11[2] = ___UTGetActiveTypeForIdentifier_block_invoke_3;
        v11[3] = &unk_1E10460D8;
        v12 = a2;
        v11[4] = &v19;
        _LSSchemaCacheWrite((uint64_t)v8 + 16, v11);
      }
    }

  }
  if (a3)
    *a3 = *((_DWORD *)v20 + 6);
  v9 = v24[3];
  _Block_object_dispose(&v19, 8);
  _Block_object_dispose(&v23, 8);

  return v9;
}

void sub_1828AC890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  void *v25;
  uint64_t v26;

  _Block_object_dispose((const void *)(v26 - 144), 8);
  _Block_object_dispose((const void *)(v26 - 112), 8);

  _Unwind_Resume(a1);
}

void _LSSchemaCacheRead(uint64_t a1, void *a2)
{
  pthread_rwlock_t *v3;
  void (**v4)(id, pthread_rwlock_t *);

  v4 = a2;
  if (a1)
  {
    if (v4)
    {
      v3 = *(pthread_rwlock_t **)(a1 + 1616);
      if (v3)
      {
        pthread_rwlock_rdlock(v3);
        v4[2](v4, v3);
        pthread_rwlock_unlock(v3);
      }
    }
  }

}

void sub_1828AC928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void _LSBindingListEnumerateEntryWithClass(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  void (**v6)(id, uint64_t, _QWORD, char *);
  uint64_t EntryWithClass;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char v11;

  v6 = a4;
  EntryWithClass = _LSBindingListGetEntryWithClass(a1);
  v8 = EntryWithClass;
  if (EntryWithClass)
  {
    v9 = *(unsigned int *)(EntryWithClass + 4);
    v11 = 0;
    if ((_DWORD)v9)
    {
      v10 = 2;
      do
      {
        v6[2](v6, a3, *(unsigned int *)(v8 + 4 * v10), &v11);
        if (v10 - 1 >= v9)
          break;
        ++v10;
      }
      while (!v11);
    }
  }

}

void sub_1828ACA5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _LSBindingListGetEntryWithClass(void *a1)
{
  id v1;

  v1 = a1;
  CSStoreGetUnit();

  return 0;
}

void sub_1828ACB5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828ACBC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1828ACC3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1828ACCDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

BOOL _UTGetLocalizedDescriptionImpl(uint64_t a1)
{
  int *v2;
  int v3;

  v2 = *(int **)(a1 + 8);
  if (LaunchServices::LocalizedString::Get(*(LaunchServices::LocalizedString **)a1, (_LSDatabase *)*(unsigned int *)(*(_QWORD *)(a1 + 24) + 24)))
  {
    v3 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 24);
    *v2 = v3;
  }
  else
  {
    v3 = *v2;
  }
  return v3 != 0;
}

BOOL _UTTypeSearchEqual(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16) == *(_QWORD *)(a1 + 8);
}

void sub_1828ACE18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void _LSSchemaCacheWrite(uint64_t a1, void *a2)
{
  pthread_rwlock_t *v3;
  void (**v4)(id, pthread_rwlock_t *);

  v4 = a2;
  if (a1)
  {
    if (v4)
    {
      v3 = *(pthread_rwlock_t **)(a1 + 1616);
      if (v3)
      {
        pthread_rwlock_wrlock(v3);
        v4[2](v4, v3);
        pthread_rwlock_unlock(v3);
      }
    }
  }

}

void sub_1828ACE9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,unsigned int const&,unsigned int &>(uint64_t a1, unsigned int *a2, _DWORD *a3, int *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  _QWORD *v12;
  unint64_t v13;
  int v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v8 = *a2;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v9 <= v8)
        v4 = v8 % v9;
    }
    else
    {
      v4 = ((_DWORD)v9 - 1) & v8;
    }
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (*((_DWORD *)v12 + 4) == (_DWORD)v8)
              return v12;
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9)
                v13 %= v9;
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
  v12 = operator new(0x18uLL);
  *v12 = 0;
  v12[1] = v8;
  v14 = *a4;
  *((_DWORD *)v12 + 4) = *a3;
  *((_DWORD *)v12 + 5) = v14;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__rehash<true>(a1, v20);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v8)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = ((_DWORD)v9 - 1) & v8;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *v12 = *v22;
LABEL_38:
    *v22 = v12;
    goto LABEL_39;
  }
  *v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*v12)
  {
    v23 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9)
        v23 %= v9;
    }
    else
    {
      v23 &= v9 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_1828AD0E8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void _UTEnumerateTypesForIdentifier(void *a1, int a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;

  v6 = a1;
  v5 = a3;
  if (v6 && a2 && v5)
  {
    v7 = v6;
    v8 = v5;
    _LSDatabaseEnumeratingBindingMap();

  }
}

void sub_1828AD1C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,BOOL>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,BOOL>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x18uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((_BYTE *)v11 + 20) = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    v21 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_1828AD478(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t **v10;
  uint64_t *i;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD v24[2];
  char v25;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (uint64_t *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (*((_DWORD *)i + 4) == (_DWORD)v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = a1 + 16;
  v14 = (char *)operator new(0x40uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v7;
  *((_DWORD *)v14 + 4) = **a4;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *((_DWORD *)v14 + 14) = 1065353216;
  v25 = 1;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__rehash<true>(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *(_QWORD *)v24[0] = *v21;
    *v21 = v24[0];
  }
  else
  {
    *(_QWORD *)v24[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v13;
    if (*(_QWORD *)v24[0])
    {
      v22 = *(_QWORD *)(*(_QWORD *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8)
          v22 %= v8;
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v24[0];
    }
  }
  i = (uint64_t *)v24[0];
  v24[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,void *>>>>::reset[abi:nn180100]((uint64_t)v24, 0);
  return i;
}

void sub_1828AD6E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,void *>>>>::reset[abi:nn180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void ___ZN14LaunchServices10DMFSupportL15getAllBundleIDsEv_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;
  id v5;

  if ((*(_BYTE *)(a3 + 177) & 4) == 0)
  {
    v4 = *(_DWORD *)(a3 + 348);
    if (!v4 || v4 != *(_DWORD *)(a1 + 48))
    {
      v5 = (id)_CSStringCopyCFString();
      if (v5)
        objc_msgSend(*(id *)(a1 + 32), "addObject:", v5);

    }
  }
}

void sub_1828AD7A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id __LAUNCH_SERVICES_IS_GETTING_ENTITLEMENTS_FROM_THE_KERNEL__(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  const void *bytes_ptr;
  void *v7;
  void *v8;
  id v9;
  NSObject *v10;
  const char *v11;
  uint64_t v12;
  id v14;
  uint8_t buf[4];
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = (void *)xpc_copy_entitlements_data_for_token();
  v3 = v2;
  if (v2 && object_getClass(v2) == (Class)MEMORY[0x1E0C812E8])
  {
    v5 = objc_alloc(MEMORY[0x1E0C99D50]);
    bytes_ptr = xpc_data_get_bytes_ptr(v3);
    v7 = (void *)objc_msgSend(v5, "initWithBytesNoCopy:length:freeWhenDone:", bytes_ptr, xpc_data_get_length(v3), 0);
    if (!v7)
    {
      v4 = 0;
LABEL_16:

      goto LABEL_17;
    }
    v14 = 0;
    objc_msgSend(MEMORY[0x1E0CB38B0], "propertyListWithData:options:format:error:", v7, 0, 0, &v14);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = v14;
    if (v8)
    {
      if (_NSIsNSDictionary())
      {
        +[_LSLazyPropertyList lazyPropertyListWithPropertyList:]((uint64_t)_LSLazyPropertyList, v8);
        v4 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_15:

        goto LABEL_16;
      }
      _LSRecordLog();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        v12 = objc_opt_class();
        *(_DWORD *)buf = 138412546;
        v16 = a1;
        v17 = 2114;
        v18 = v12;
        v11 = "Entitlements for audit-token-based bundle record %@ were of type %{public}@ instead of NSDictionary. Please file a radar.";
        goto LABEL_13;
      }
    }
    else
    {
      _LSRecordLog();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412546;
        v16 = a1;
        v17 = 2112;
        v18 = (uint64_t)v9;
        v11 = "Error reading entitlements from data blob for audit-token-based bundle record %@: %@";
LABEL_13:
        _os_log_impl(&dword_182882000, v10, OS_LOG_TYPE_ERROR, v11, buf, 0x16u);
      }
    }

    v4 = 0;
    goto LABEL_15;
  }
  v4 = 0;
LABEL_17:

  return v4;
}

void sub_1828AD9C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1828ADBC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828ADC9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1828ADE28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1828ADF58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828AE0E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t LaunchServices::Database::Context::operator=(uint64_t a1, uint64_t a2)
{
  void **v4;
  void *v5;
  void *v6;
  id *v7;

  v4 = *(void ***)a1;
  if (v4 && *(_BYTE *)(a1 + 16))
    _LSContextDestroy(v4);
  v5 = *(void **)(a1 + 8);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;

  v6 = *(void **)(a1 + 24);
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;

  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a1 = a1 + 8;
    if (*(_BYTE *)(a2 + 16))
    {
      v7 = (id *)(a2 + 8);
    }
    else
    {
      v7 = *(id **)a2;
      if (!*(_QWORD *)a2)
      {
LABEL_9:
        *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
        goto LABEL_10;
      }
    }
    objc_storeStrong((id *)(a1 + 8), *v7);
    goto LABEL_9;
  }
LABEL_10:
  objc_storeStrong((id *)(a1 + 24), *(id *)(a2 + 24));
  return a1;
}

void sub_1828AE28C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _UTTypeGetBundleBaseData(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v3 = a1;
  v4 = v3;
  v5 = *(_DWORD *)(a2 + 20);
  if ((*(_BYTE *)(a2 + 9) & 0x20) != 0)
    v6 = _LSGetPlugin((uint64_t)v3, v5);
  else
    v6 = _LSBundleGet(v3, v5);
  v7 = v6;

  return v7;
}

void sub_1828AE2EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828AE594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  void *v14;
  uint64_t v15;
  va_list va;

  va_start(va, a13);

  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)va);
  _Block_object_dispose((const void *)(v15 - 96), 8);

  _Unwind_Resume(a1);
}

id fallbackDynamicOrBaseTypeRecord(LSContext *a1, const __CFString *a2, __CFString *inUTI, __CFString *a4)
{
  id v8;
  __CFString *DynamicIdentifierForTag;

  if (!a4
    || !-[__CFString isEqual:](inUTI, "isEqual:", CFSTR("public.filename-extension"))
    || !_UTExtensionLooksLikeAppendedRandomness(a1->db, a2)
    || (-[__CFString isEqualToString:](a4, "isEqualToString:", CFSTR("public.data")) & 1) == 0
    && (-[__CFString isEqualToString:](a4, "isEqualToString:", CFSTR("public.folder")) & 1) == 0
    && !-[__CFString isEqualToString:](a4, "isEqualToString:", CFSTR("public.directory"))
    || (+[UTTypeRecord _typeRecordWithContext:identifier:allowUndeclared:](UTTypeRecord, "_typeRecordWithContext:identifier:allowUndeclared:", a1, a4, 0), (v8 = (id)objc_claimAutoreleasedReturnValue()) == 0))
  {
    DynamicIdentifierForTag = (__CFString *)_UTTypeCreateDynamicIdentifierForTag((void **)&a1->db, inUTI, a2, a4);
    if (DynamicIdentifierForTag)
      v8 = -[_UTDynamicTypeRecord _initWithContext:dynamicUTI:]([_UTDynamicTypeRecord alloc], "_initWithContext:dynamicUTI:", a1, DynamicIdentifierForTag);
    else
      v8 = 0;

  }
  return v8;
}

void sub_1828AE73C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828AE7E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

CFStringRef _UTTypeCreateDynamicIdentifierForTag(void **a1, CFStringRef inUTI, const __CFString *a3, const __CFString *a4)
{
  CFStringRef result;
  unsigned int TypeCaseInsensitiveText;
  int v10;
  int v11;
  int v12;

  result = 0;
  if (inUTI && a3)
  {
    if (a1)
    {
      v12 = 0;
      if (!_UTGetActiveTypeForCFStringIdentifier(*a1, inUTI, &v12))
      {
        v11 = 0;
        return _UTTypeCreateDynamicIdentifierForTagCommon(inUTI, a3, a4, v11);
      }
      TypeCaseInsensitiveText = _UTTypeGetTypeCaseInsensitiveText((_LSDatabase *)*a1);
      v10 = _UTTypeConformsTo(*a1, v12, TypeCaseInsensitiveText);
    }
    else
    {
      v10 = UTTypeConformsTo(inUTI, CFSTR("public.case-insensitive-text"));
    }
    v11 = v10;
    return _UTTypeCreateDynamicIdentifierForTagCommon(inUTI, a3, a4, v11);
  }
  return result;
}

CFStringRef _UTTypeCreateDynamicIdentifierForTagCommon(const __CFString *a1, const __CFString *a2, const __CFString *a3, int a4)
{
  CFStringRef DynamicIdentifierForFileInfo;
  CFTypeID v9;
  CFIndex Length;
  int v11;
  CFTypeID v12;
  CFIndex v13;
  int v14;
  CFTypeID v15;
  CFIndex v16;
  _OWORD v18[10];
  _OWORD v19[10];
  _OWORD v20[10];
  uint64_t v21;

  DynamicIdentifierForFileInfo = 0;
  v21 = *MEMORY[0x1E0C80C00];
  if (a1 && a2)
  {
    memset(v20, 0, sizeof(v20));
    v9 = CFGetTypeID(a1);
    if (v9 == CFStringGetTypeID())
    {
      Length = CFStringGetLength(a1);
      v11 = XCFBufInitWithCFStringRange((uint64_t)v20, a1, 0, Length, 1);
    }
    else
    {
      XCFBufInit((uint64_t)v20);
      v11 = 0;
    }
    memset(v19, 0, sizeof(v19));
    v12 = CFGetTypeID(a2);
    if (v12 == CFStringGetTypeID())
    {
      v13 = CFStringGetLength(a2);
      v14 = XCFBufInitWithCFStringRange((uint64_t)v19, a2, 0, v13, a4);
      if (v11 && v14)
      {
        memset(v18, 0, sizeof(v18));
        if (a3)
        {
          v15 = CFGetTypeID(a3);
          if (v15 == CFStringGetTypeID())
          {
            v16 = CFStringGetLength(a3);
            if (XCFBufInitWithCFStringRange((uint64_t)v18, a3, 0, v16, 1))
            {
              DynamicIdentifierForFileInfo = _UTTypeCreateDynamicIdentifierForFileInfo((uint64_t)v19, (uint64_t)v20, (uint64_t)v18, 1);
              XCFBufDestroy((uint64_t)v18);
LABEL_21:
              XCFBufDestroy((uint64_t)v19);
LABEL_22:
              XCFBufDestroy((uint64_t)v20);
              return DynamicIdentifierForFileInfo;
            }
          }
          else
          {
            XCFBufInit((uint64_t)v18);
          }
          DynamicIdentifierForFileInfo = 0;
          goto LABEL_21;
        }
        DynamicIdentifierForFileInfo = _UTTypeCreateDynamicIdentifierForFileInfo((uint64_t)v19, (uint64_t)v20, 0, 0);
        goto LABEL_21;
      }
      if (v14)
        XCFBufDestroy((uint64_t)v19);
    }
    else
    {
      XCFBufInit((uint64_t)v19);
    }
    DynamicIdentifierForFileInfo = 0;
    if (!v11)
      return DynamicIdentifierForFileInfo;
    goto LABEL_22;
  }
  return DynamicIdentifierForFileInfo;
}

uint64_t _UTTypeGetTypeCaseInsensitiveText(_LSDatabase *a1)
{
  return _UTTypeGetCachedType(a1, CFSTR("public.case-insensitive-text"), (unsigned int *)a1->schema._cache + 81);
}

uint64_t _UTDynamicGetPedigree(uint64_t a1, __CFString *a2)
{
  id v2;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, __CFString *);
  void *v12;
  id v13;
  uint64_t v14;

  v2 = 0;
  if (a1 && a2)
  {
    v5 = objc_alloc_init(MEMORY[0x1E0C99E20]);
    if (v5)
    {
      v6 = (void *)-[__CFString copy](a2, "copy");
      objc_msgSend(v5, "addObject:", v6);

      v9 = MEMORY[0x1E0C809B0];
      v10 = 3221225472;
      v11 = ___UTDynamicGetPedigree_block_invoke;
      v12 = &unk_1E1045A28;
      v14 = a1;
      v2 = v5;
      v13 = v2;
      _UTDynamicEnumerateParentIdentifiers(a2, (uint64_t)&v9);

    }
    else
    {
      v2 = 0;
    }
  }
  v7 = objc_msgSend(v2, "copy", v9, v10, v11, v12);

  return v7;
}

void sub_1828AEBB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

uint64_t _UTDynamicEnumerateParentIdentifiers(const __CFString *a1, uint64_t a2)
{
  _QWORD v3[5];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = ___UTDynamicEnumerateParentIdentifiers_block_invoke;
  v3[3] = &unk_1E1045A00;
  v3[4] = a2;
  return _UTDynamicValuesSearch(0, a1, 1, (uint64_t)&kUTTypeConformsToKeyChars, (uint64_t (*)(uint64_t *))_UTDynamicValuesSearchWithBlock::$_0::__invoke, (uint64_t)v3);
}

uint64_t _UTDynamicValuesSearch(uint64_t a1, const __CFString *a2, int a3, uint64_t a4, uint64_t (*a5)(uint64_t *), uint64_t a6)
{
  CFTypeID v12;
  CFIndex Length;
  int v14;
  _BOOL4 v15;
  unsigned __int8 *i;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  unsigned int v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  int v22;
  unsigned __int8 *v23;
  unsigned __int8 v25;
  int v26;
  unsigned __int8 *v27;
  unsigned __int8 *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  int v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  int v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  char *v46;
  uint64_t v47;
  int v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  XCFBufInit((uint64_t)&v42);
  if (a2 && (v12 = CFGetTypeID(a2), v12 == CFStringGetTypeID()))
  {
    Length = CFStringGetLength(a2);
    XCFBufInitWithCFStringRange((uint64_t)&v44, a2, 0, Length, 0);
  }
  else
  {
    XCFBufInit((uint64_t)&v44);
  }
  if (v45 >= 5 && *(_BYTE *)(v44 + 4) == 97)
  {
    v14 = _UTBase32DecodedLength(v45 - 5);
    XCFBufAddCapacity(&v42, v14);
    v15 = _UTBase32Decode(v44 + 5, v45 - 5, v42);
    v42[v14] = 0;
    v43 = v14;
    XCFBufDestroy((uint64_t)&v44);
    if (v15)
    {
      v51 = a6;
      i = v42;
      v44 = a1;
      v46 = (char *)v42;
      if (v42)
      {
        while (1)
        {
          v17 = v42;
          v18 = &v42[v43];
          if (i - v42 == v43)
          {
            v19 = 0;
            goto LABEL_24;
          }
          v20 = i;
          v21 = i;
          while (1)
          {
            v22 = *v21;
            if (v22 == 61)
              break;
            if (v21 + 1 == v18)
              v23 = v21;
            else
              v23 = v21 + 1;
            if (v22 == 92 && v17 != 0)
              v21 = v23;
            v25 = *v21++;
            *v20++ = v25;
            if (v21 == v18)
            {
              v40 = 0;
              LODWORD(v47) = 0;
              v46 = 0;
              goto LABEL_79;
            }
          }
          v19 = (_DWORD)v21 - (_DWORD)i;
          for (i = v21; ; i = v29 + 1)
          {
LABEL_24:
            if (i == v18)
            {
              i = 0;
              goto LABEL_38;
            }
            v26 = *i;
            if (v26 == 58)
              break;
            if (i + 1 == v18)
              v27 = i;
            else
              v27 = i + 1;
            if (v26 != 92 || v17 == 0)
              v29 = i;
            else
              v29 = v27;
          }
          ++i;
LABEL_38:
          LODWORD(v47) = v19;
          if (v19)
          {
            v30 = v46;
            if (*v46 == 63)
            {
              v45 = 1;
              v30 = ++v46;
              LODWORD(v47) = --v19;
            }
            else
            {
              v45 = 2;
            }
            v49 = &v30[v19 + 1];
            v31 = _UTDebreviateTerm(&v46);
            v46 = v31;
            v47 = v32;
            if (!a3 || v45 == a3)
            {
              if (!a4)
                goto LABEL_52;
              v40 = 0;
              if (*(_DWORD *)(a4 + 8) != (_DWORD)v32 || !v31)
                goto LABEL_45;
              if (!strncmp(*(const char **)a4, v31, v32))
              {
LABEL_52:
                v48 = 0;
                v33 = (int)v49;
                if (v49)
                {
                  do
                  {
                    if (v43 <= v33 - (int)v42)
                    {
                      v38 = 0;
                      v40 = 0;
                      LODWORD(v50) = 0;
                    }
                    else
                    {
                      v34 = &v42[v33 - (_DWORD)v42];
                      if (v33 - (_DWORD)v42 != (unint64_t)v43)
                      {
                        v35 = &v42[v43];
                        v36 = &v42[v33 - (_DWORD)v42];
                        do
                        {
                          v37 = *v36;
                          if (v37 == 92)
                          {
                            if (v36 + 1 != v35)
                              ++v36;
                            LOBYTE(v37) = *v36;
                          }
                          else if (v37 == 44 || v37 == 58)
                          {
                            if (v37 == 58)
                              v38 = 0;
                            else
                              v38 = (char *)(v36 + 1);
                            goto LABEL_69;
                          }
                          ++v36;
                          *v34++ = v37;
                        }
                        while (v36 != v35);
                      }
                      v38 = 0;
LABEL_69:
                      LODWORD(v50) = (_DWORD)v34 - v33;
                      if ((_DWORD)v34 == v33)
                      {
                        v40 = 0;
                      }
                      else
                      {
                        if (v45 == 1)
                        {
                          v49 = _UTDebreviateTerm(&v49);
                          v50 = v39;
                        }
                        v40 = a5(&v44);
                      }
                    }
                    v49 = v38;
                    ++v48;
                    if (!v38)
                      break;
                    v33 = (int)v38;
                  }
                  while (!(_DWORD)v40);
                  goto LABEL_45;
                }
              }
            }
          }
          v40 = 0;
LABEL_45:
          v46 = (char *)i;
          if (!i || (_DWORD)v40)
            goto LABEL_79;
        }
      }
    }
  }
  else
  {
    XCFBufDestroy((uint64_t)&v44);
  }
  v40 = 0;
LABEL_79:
  XCFBufDestroy((uint64_t)&v42);
  return v40;
}

char *_UTDebreviateTerm(_DWORD *a1)
{
  char *v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  char __str;
  __int16 v8;

  if (!a1)
    return 0;
  v2 = *(char **)a1;
  if (!*(_QWORD *)a1)
    return v2;
  v3 = a1[2];
  if (!v3)
    return 0;
  if (v3 <= 2)
  {
    v8 = 0;
    __str = *v2;
    if (v3 == 2)
      LOBYTE(v8) = v2[1];
    *__error() = 0;
    v4 = strtoul(&__str, 0, 16);
    if (!v4 && *__error())
      return *(char **)a1;
    v5 = 0xFFFFFFFFLL;
    if (v4 < 0xFFFFFFFF)
      v5 = v4;
    if (v5 > 0x15)
    {
      return *(char **)a1;
    }
    else
    {
      v2 = (&builtins)[v5];
      strlen(v2);
    }
  }
  return v2;
}

BOOL _UTBase32Decode(uint64_t a1, unsigned int a2, _BYTE *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a1;
  v5 = a1 + a2;
  v6 = a2 & 7;
  if (v5 - v6 != a1)
  {
    v7 = a2 - v6;
    while (_UTBase32DecodeDatum(v4, 8, a3))
    {
      v4 += 8;
      a3 += 5;
      v7 -= 8;
      if (!v7)
      {
        v4 = v5 - v6;
        break;
      }
    }
  }
  if ((_DWORD)v6 && _UTBase32DecodeDatum(v4, v6, a3))
    v4 = v5;
  return v4 == v5;
}

uint64_t _UTBase32DecodeDatum(uint64_t a1, int a2, _BYTE *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  _QWORD v20[2];

  v3 = 0;
  v20[1] = *MEMORY[0x1E0C80C00];
  if (a1 && (a2 - 1) <= 7)
  {
    v4 = 0;
    v20[0] = 0;
    do
    {
      v5 = decoder[*(char *)(a1 + v4)];
      if (v5 < 0)
        return 0;
      *((_BYTE *)v20 + v4++) = v5;
    }
    while (a2 != v4);
    switch(a2)
    {
      case 2:
        *a3 = (BYTE1(v20[0]) >> 2) | (8 * LOBYTE(v20[0]));
        break;
      case 4:
        v6 = BYTE1(v20[0]);
        *a3 = (BYTE1(v20[0]) >> 2) | (8 * LOBYTE(v20[0]));
        a3[1] = (2 * BYTE2(v20[0])) | (v6 << 6) | (BYTE3(v20[0]) >> 4);
        break;
      case 5:
        v7 = BYTE1(v20[0]);
        *a3 = (BYTE1(v20[0]) >> 2) | (8 * LOBYTE(v20[0]));
        v8 = (2 * BYTE2(v20[0])) | (v7 << 6);
        v9 = BYTE3(v20[0]);
        a3[1] = v8 | (BYTE3(v20[0]) >> 4);
        a3[2] = (BYTE4(v20[0]) >> 1) | (16 * v9);
        break;
      case 7:
        v10 = BYTE1(v20[0]);
        *a3 = (BYTE1(v20[0]) >> 2) | (8 * LOBYTE(v20[0]));
        v11 = (2 * BYTE2(v20[0])) | (v10 << 6);
        v12 = BYTE3(v20[0]);
        a3[1] = v11 | (BYTE3(v20[0]) >> 4);
        v13 = BYTE4(v20[0]);
        a3[2] = (BYTE4(v20[0]) >> 1) | (16 * v12);
        a3[3] = (4 * BYTE5(v20[0])) | (v13 << 7) | (BYTE6(v20[0]) >> 3);
        break;
      case 8:
        v14 = BYTE1(v20[0]);
        *a3 = (BYTE1(v20[0]) >> 2) | (8 * LOBYTE(v20[0]));
        v15 = (2 * BYTE2(v20[0])) | (v14 << 6);
        v16 = BYTE3(v20[0]);
        a3[1] = v15 | (BYTE3(v20[0]) >> 4);
        v17 = BYTE4(v20[0]);
        a3[2] = (BYTE4(v20[0]) >> 1) | (16 * v16);
        v18 = BYTE6(v20[0]);
        a3[3] = (4 * BYTE5(v20[0])) | (v17 << 7) | (BYTE6(v20[0]) >> 3);
        a3[4] = HIBYTE(v20[0]) | (32 * v18);
        break;
      default:
        return 1;
    }
    return 1;
  }
  return v3;
}

uint64_t _UTBase32DecodedLength(unsigned int a1)
{
  return 5 * (a1 >> 3) + decodedRemainderLen[a1 & 7];
}

uint64_t _UTDynamicValuesSearchWithBlock::$_0::__invoke(uint64_t a1)
{
  void (**v2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v3;
  unsigned __int8 v5;

  v2 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))MEMORY[0x186DAE9BC](*(_QWORD *)(a1 + 56));
  v5 = 0;
  ((void (**)(_QWORD, _QWORD, uint64_t, _QWORD, uint64_t, unsigned __int8 *))v2)[2](v2, *(unsigned int *)(a1 + 8), a1 + 16, *(unsigned int *)(a1 + 32), a1 + 40, &v5);
  v3 = v5;

  return v3;
}

void sub_1828AF410(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828AF490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

CFStringRef _UTTypeCreateDynamicIdentifierForFileInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _DWORD *v9;
  void *v10;
  unsigned int v11;
  CFStringRef v12;
  unsigned __int8 *v13;
  unsigned int v14;
  int v15;
  unsigned __int8 *v17;
  unsigned int v18;
  _BYTE *v19;
  unsigned int v20;
  _OWORD v21[10];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (!a2 || a4)
  {
    XCFBufInit((uint64_t)&v17);
    if (a4)
    {
      XCFBufAppend(&v17, "?0=", 3u);
      v8 = 0;
      v9 = (_DWORD *)(a3 + 8);
      do
      {
        if (v8)
          XCFBufAppend(&v17, ",", 1u);
        v10 = (void *)*((_QWORD *)v9 - 1);
        v11 = *v9;
        v9 += 4;
        XCFBufInitWithBytes((uint64_t)&v19, v10, v11, 0);
        _UTAbbreviateTerm(&v19);
        _UTAppendCharactersAddingEscapes(&v17, v19, v20);
        XCFBufDestroy((uint64_t)&v19);
        ++v8;
      }
      while (a4 != v8);
    }
  }
  else
  {
    if (*(_QWORD *)a2)
      CFStringGetLength(CFSTR("public.filename-extension"));
    XCFBufInit((uint64_t)&v17);
  }
  if (a1)
  {
    if (v18)
      XCFBufAppend(&v17, ":", 1u);
    XCFBufInitWithBytes((uint64_t)&v19, *(void **)a2, *(unsigned int *)(a2 + 8), 0);
    _UTAbbreviateTerm(&v19);
    _UTAppendCharactersAddingEscapes(&v17, v19, v20);
    XCFBufDestroy((uint64_t)&v19);
    XCFBufAppend(&v17, "=", 1u);
    _UTAppendCharactersAddingEscapes(&v17, *(_BYTE **)a1, *(_DWORD *)(a1 + 8));
  }
  v12 = 0;
  v13 = v17;
  if (v17)
  {
    v14 = v18;
    if (v18)
    {
      memset(v21, 0, sizeof(v21));
      XCFBufInit((uint64_t)v21);
      XCFBufAppend(v21, "dyn.a", 5u);
      v15 = _UTBase32EncodedLength(v14);
      XCFBufAddCapacity(v21, v15);
      _UTBase32Encode(v13, v14, (_BYTE *)(*(_QWORD *)&v21[0] + DWORD2(v21[0])));
      DWORD2(v21[0]) += v15;
      *(_BYTE *)(*(_QWORD *)&v21[0] + DWORD2(v21[0])) = 0;
      v12 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(const UInt8 **)&v21[0], DWORD2(v21[0]), 0x8000100u, 0);
      XCFBufDestroy((uint64_t)v21);
    }
  }
  XCFBufDestroy((uint64_t)&v17);
  return v12;
}

void *XCFBufAppend(_DWORD *a1, const void *a2, unsigned int a3)
{
  void *result;
  unsigned int v7;

  XCFBufAddCapacity(a1, a3);
  result = memcpy((void *)(*(_QWORD *)a1 + a1[2]), a2, a3);
  v7 = a1[2] + a3;
  a1[2] = v7;
  *(_BYTE *)(*(_QWORD *)a1 + v7) = 0;
  return result;
}

_DWORD *XCFBufAddCapacity(_DWORD *result, int a2)
{
  unsigned int v2;
  unsigned int v3;
  _DWORD *v4;
  unsigned int v5;
  unsigned int v6;
  void *v7;
  void *v8;

  v2 = result[2] + a2;
  v3 = result[6];
  if (v2 > v3)
  {
    v4 = result;
    v5 = (2 * v3) | 1;
    if (v2 <= v5)
      v6 = v5;
    else
      v6 = result[2] + a2;
    v7 = *(void **)result;
    if (v7 == *((void **)v4 + 2))
    {
      result = malloc_type_realloc(v7, v6 + 1, 0xDF88A665uLL);
      *((_QWORD *)v4 + 2) = result;
    }
    else
    {
      v8 = malloc_type_malloc(v6 + 1, 0xC970C799uLL);
      *((_QWORD *)v4 + 2) = v8;
      memcpy(v8, *(const void **)v4, v4[2]);
      result = (_DWORD *)*((_QWORD *)v4 + 2);
    }
    *(_QWORD *)v4 = result;
    v4[6] = v6;
  }
  return result;
}

_DWORD *_UTAppendCharactersAddingEscapes(_DWORD *a1, _BYTE *a2, unsigned int a3)
{
  _DWORD *result;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;

  result = XCFBufAddCapacity(a1, 2 * a3);
  v7 = *(_QWORD *)a1;
  v8 = a1[2];
  if (a3)
  {
    v9 = (_BYTE *)(v7 + v8);
    v10 = a3;
    do
    {
      v11 = (char)*a2;
      if ((v11 - 44) <= 0x30 && ((1 << (*a2 - 44)) & 0x1000000024001) != 0 || v11 == 0)
      {
        *v9++ = 92;
        ++a1[2];
        LOBYTE(v11) = *a2;
      }
      *v9++ = v11;
      v8 = (a1[2] + 1);
      a1[2] = v8;
      ++a2;
      --v10;
    }
    while (v10);
    v7 = *(_QWORD *)a1;
  }
  *(_BYTE *)(v7 + v8) = 0;
  return result;
}

_DWORD *_UTAbbreviateTerm(_DWORD *result)
{
  size_t v1;
  _DWORD *v2;
  uint64_t v3;
  char *v4;
  const char *v5;
  int v6;

  v1 = result[2];
  if (v1 >= 3)
  {
    v2 = result;
    v3 = 0;
    v4 = *(char **)result;
    while (1)
    {
      v5 = (&builtins)[v3];
      result = (_DWORD *)strncmp(v5, v4, v1);
      if (!(_DWORD)result && !v5[v1])
        break;
      if (++v3 == 22)
        return result;
    }
    if ((v3 & 0xFFFFFFF0) != 0)
    {
      *v4 = a0123456789abcd_0[v3 >> 4];
      *(_BYTE *)(*(_QWORD *)v2 + 1) = a0123456789abcd_0[v3 & 0xF];
      *(_BYTE *)(*(_QWORD *)v2 + 2) = 0;
      v6 = 2;
    }
    else
    {
      *v4 = a0123456789abcd_0[v3];
      v6 = 1;
    }
    v2[2] = v6;
  }
  return result;
}

uint64_t XCFBufInitWithBytes(uint64_t a1, void *__src, size_t __len, int a4)
{
  uint64_t result;
  unsigned int v7;
  uint64_t v9;
  _BYTE *v10;
  int v11;

  *(_BYTE *)(a1 + 28) = 0;
  result = a1 + 28;
  *(_QWORD *)a1 = result;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 127;
  *(_QWORD *)(a1 + 16) = 0;
  if (!(_DWORD)__len)
    return 0;
  v7 = __len;
  if (__len >= 0x80)
  {
    result = (uint64_t)malloc_type_malloc((__len + 1), 0xA5D49628uLL);
    if (!result)
      return result;
    *(_QWORD *)(a1 + 16) = result;
    *(_QWORD *)a1 = result;
    *(_DWORD *)(a1 + 24) = v7;
  }
  v9 = v7;
  memmove((void *)result, __src, v7);
  *(_BYTE *)(*(_QWORD *)a1 + v7) = 0;
  *(_DWORD *)(a1 + 8) = v7;
  if (a4)
  {
    v10 = *(_BYTE **)a1;
    do
    {
      v11 = *v10;
      if ((v11 - 65) <= 0x19)
        *v10 = v11 + 32;
      ++v10;
      --v9;
    }
    while (v9);
  }
  return 1;
}

uint64_t _UTBase32EncodedLength(unsigned int a1)
{
  return encodedRemainderLen[a1 % 5] + 8 * (a1 / 5);
}

unsigned __int8 *_UTBase32Encode(unsigned __int8 *result, unsigned int a2, _BYTE *a3)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;

  v4 = result;
  v5 = &result[a2];
  v6 = a2 % 5;
  if (&v5[-v6] > result)
  {
    do
    {
      result = _UTBase32EncodeDatum(v4, 5, a3);
      v4 += 5;
      a3 += 8;
    }
    while (v4 < &v5[-v6]);
  }
  if ((_DWORD)v6)
    return _UTBase32EncodeDatum(v4, v6, a3);
  return result;
}

unsigned __int8 *_UTBase32EncodeDatum(unsigned __int8 *result, int a2, _BYTE *a3)
{
  uint64_t v3;
  uint64_t v4;

  switch(a2)
  {
    case 1:
      *a3 = encoder[(unint64_t)*result >> 3];
      v3 = 4 * (*result & 7);
      v4 = 1;
      goto LABEL_7;
    case 2:
      *a3 = encoder[(unint64_t)*result >> 3];
      a3[1] = encoder[((unint64_t)result[1] >> 6) & 0xFFFFFFFFFFFFFFE3 | (4 * (*result & 7))];
      a3[2] = encoder[((unint64_t)result[1] >> 1) & 0x1F];
      v3 = 16 * (result[1] & 1);
      v4 = 3;
      goto LABEL_7;
    case 3:
      *a3 = encoder[(unint64_t)*result >> 3];
      a3[1] = encoder[((unint64_t)result[1] >> 6) & 0xFFFFFFFFFFFFFFE3 | (4 * (*result & 7))];
      a3[2] = encoder[((unint64_t)result[1] >> 1) & 0x1F];
      a3[3] = encoder[((unint64_t)result[2] >> 4) & 0xFFFFFFFFFFFFFFEFLL | (16 * (result[1] & 1))];
      v3 = 2 * (result[2] & 0xF);
      v4 = 4;
      goto LABEL_7;
    case 4:
      *a3 = encoder[(unint64_t)*result >> 3];
      a3[1] = encoder[((unint64_t)result[1] >> 6) & 0xFFFFFFFFFFFFFFE3 | (4 * (*result & 7))];
      a3[2] = encoder[((unint64_t)result[1] >> 1) & 0x1F];
      a3[3] = encoder[((unint64_t)result[2] >> 4) & 0xFFFFFFFFFFFFFFEFLL | (16 * (result[1] & 1))];
      a3[4] = encoder[((unint64_t)result[3] >> 7) & 0xFFFFFFFFFFFFFFE1 | (2 * (result[2] & 0xF))];
      a3[5] = encoder[((unint64_t)result[3] >> 2) & 0x1F];
      v3 = 8 * (result[3] & 3);
      v4 = 6;
      goto LABEL_7;
    case 5:
      *a3 = encoder[(unint64_t)*result >> 3];
      a3[1] = encoder[((unint64_t)result[1] >> 6) & 0xFFFFFFFFFFFFFFE3 | (4 * (*result & 7))];
      a3[2] = encoder[((unint64_t)result[1] >> 1) & 0x1F];
      a3[3] = encoder[((unint64_t)result[2] >> 4) & 0xFFFFFFFFFFFFFFEFLL | (16 * (result[1] & 1))];
      a3[4] = encoder[((unint64_t)result[3] >> 7) & 0xFFFFFFFFFFFFFFE1 | (2 * (result[2] & 0xF))];
      a3[5] = encoder[((unint64_t)result[3] >> 2) & 0x1F];
      a3[6] = encoder[((unint64_t)result[4] >> 5) & 0xFFFFFFFFFFFFFFE7 | (8 * (result[3] & 3))];
      v3 = result[4] & 0x1F;
      v4 = 7;
LABEL_7:
      a3[v4] = encoder[v3];
      break;
    default:
      return result;
  }
  return result;
}

void sub_1828B0038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1828B023C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1828B0654(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1828B0928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{

  _Unwind_Resume(a1);
}

void sub_1828B0D38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t _LSContextInitReturningError(id *a1, _QWORD *a2)
{
  void *v4;
  uint64_t inited;

  +[_LSDServiceDomain defaultServiceDomain]();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  inited = _LSContextInitCommon(a1, v4, 0, a2);

  return inited;
}

void sub_1828B0DA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZL23findPluginDataInContextP9LSContextP6NSUUIDP6FSNodeP8NSStringbjPjPU15__autoreleasingP7NSError_block_invoke(uint64_t a1)
{
  void *v2;
  __CFString *v3;
  char v4;
  const __CFString *v5;
  void *v6;
  int v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  id obj;

  v2 = **(void ***)(a1 + 72);
  objc_msgSend(*(id *)(a1 + 32), "UUIDString");
  v3 = (__CFString *)objc_claimAutoreleasedReturnValue();
  v4 = *(_BYTE *)(a1 + 92);
  v5 = *(const __CFString **)(a1 + 40);
  v6 = *(void **)(a1 + 48);
  v7 = *(_DWORD *)(a1 + 88);
  v8 = *(_DWORD **)(a1 + 80);
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  obj = *(id *)(v9 + 40);
  v10 = _LSPluginFindWithPlatformInfo(v2, v3, v5, v4 | 3u, v6, v7, v8, &obj);
  objc_storeStrong((id *)(v9 + 40), obj);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = v10;

}

void sub_1828B0F9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _LSPluginFindWithPlatformInfo(void *a1, const __CFString *a2, const __CFString *a3, char a4, void *a5, int a6, _DWORD *a7, _QWORD *a8)
{
  id v13;
  id v14;
  CFTypeID v15;
  CFIndex Length;
  CFTypeID v17;
  CFIndex v18;
  __CFString *v19;
  id *v20;
  id v21;
  int v22;
  uint64_t v23;
  int v24;
  __CFString *v25;
  __CFString *v26;
  __CFString *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  void *v32;
  void *v33;
  id v36;
  __CFString *v37;
  uint64_t *v38;
  uint64_t *v39;
  int v40;
  BOOL v41;
  int v42;
  uint64_t v43;
  _QWORD v44[5];
  id v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  int v61;
  _QWORD v62[3];
  _QWORD v63[7];
  _QWORD v64[6];
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  int v85;
  int v86;
  int v87;
  BOOL v88;
  BOOL v89;
  char v90;
  _OWORD v91[10];
  _OWORD v92[10];
  uint64_t v93;

  v93 = *MEMORY[0x1E0C80C00];
  v13 = a1;
  v14 = a5;
  v58 = 0;
  v59 = &v58;
  v60 = 0x2020000000;
  v61 = 0;
  v54 = 0;
  v55 = &v54;
  v56 = 0x2020000000;
  v57 = 0;
  v50 = 0;
  v51 = &v50;
  v52 = 0x2020000000;
  v53 = 0;
  v46 = 0;
  v47 = &v46;
  v48 = 0x2020000000;
  v49 = 0;
  v44[0] = 0;
  v44[1] = v44;
  v44[2] = 0x3032000000;
  v44[3] = __Block_byref_object_copy__34;
  v44[4] = __Block_byref_object_dispose__34;
  v45 = 0;
  if (!v13)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "const LSPluginData *_LSPluginFindWithPlatformInfo(__strong LSDatabaseRef, CFStringRef, CFStringRef, LSPluginFindOptions, FSNode *__strong, dyld_platform_t, LSPluginID *, NSError *__autoreleasing *)");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v32, "handleFailureInFunction:file:lineNumber:description:", v33, CFSTR("LSPluginBundle.mm"), 555, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("inDB != NULL"));

  }
  if (a2 && (v15 = CFGetTypeID(a2), v15 == CFStringGetTypeID()))
  {
    Length = CFStringGetLength(a2);
    XCFBufInitWithCFStringRange((uint64_t)v92, a2, 0, Length, 0);
  }
  else
  {
    XCFBufInit((uint64_t)v92);
  }
  if (a3 && (v17 = CFGetTypeID(a3), v17 == CFStringGetTypeID()))
  {
    v18 = CFStringGetLength(a3);
    XCFBufInitWithCFStringRange((uint64_t)v91, a3, 0, v18, 0);
  }
  else
  {
    XCFBufInit((uint64_t)v91);
  }
  if (v14)
  {
    objc_msgSend(v14, "pathWithError:", 0);
    v19 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v19 = 0;
  }
  v43 = 0;
  v42 = 0;
  if (DWORD2(v91[0]))
    CSStringBindingFindStringAndBindings();
  if (DWORD2(v92[0]))
    CSStringBindingFindStringAndBindings();
  if (v19)
  {
    v40 = a6;
    v36 = v13;
    v41 = (a4 & 4) != 0;
    v37 = v19;
    v38 = &v50;
    v39 = &v46;
    _CSStoreEnumerateUnits();

    v20 = &v36;
  }
  else
  {
    v63[3] = MEMORY[0x1E0C809B0];
    v63[4] = 3221225472;
    v63[5] = ___LSPluginFindWithPlatformInfo_block_invoke_2;
    v63[6] = &unk_1E1044900;
    v21 = v13;
    v85 = a6;
    v71 = v91[6];
    v72 = v91[7];
    v73 = v91[8];
    v74 = v91[9];
    v67 = v91[2];
    v68 = v91[3];
    v69 = v91[4];
    v70 = v91[5];
    v65 = v91[0];
    v66 = v91[1];
    v81 = v92[6];
    v82 = v92[7];
    v83 = v92[8];
    v84 = v92[9];
    v77 = v92[2];
    v78 = v92[3];
    v79 = v92[4];
    v80 = v92[5];
    v75 = v92[0];
    v76 = v92[1];
    v86 = v42;
    v87 = v43;
    v88 = (a4 & 2) != 0;
    v64[0] = v21;
    v64[1] = v44;
    v89 = (a4 & 4) != 0;
    v90 = a4 & 1;
    v64[2] = &v58;
    v64[3] = &v54;
    v64[4] = &v50;
    v64[5] = &v46;
    _CSArrayEnumerateAllValues();
    v20 = (id *)v64;
    if ((a4 & 1) != 0)
    {
      v22 = *((_DWORD *)v59 + 6);
      if (v22)
      {
        v23 = v55[3];
        if (v23)
        {
          *((_DWORD *)v51 + 6) = v22;
          v47[3] = v23;
        }
      }
    }
  }

  v24 = *((_DWORD *)v51 + 6);
  if (v24)
  {
    if (a7)
      *a7 = v24;
  }
  else
  {
    v25 = CFSTR("UNKNOWN");
    if (v19)
      v25 = v19;
    if (a2)
      v25 = (__CFString *)a2;
    if (a3)
      v25 = (__CFString *)a3;
    v26 = v25;
    v27 = v26;
    if (a8)
    {
      v62[0] = *MEMORY[0x1E0CB2938];
      v62[1] = CFSTR("SK");
      v63[0] = CFSTR("Unable to find this application extension record in the Launch Services database.");
      v63[1] = v26;
      v62[2] = CFSTR("IS");
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", objc_msgSend((id)__LSDefaultsGetSharedInstance(), "isServer"));
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      v63[2] = v28;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v63, v62, 3);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], -10814, (uint64_t)"_LSPluginFindWithPlatformInfo", 691, v29);
      *a8 = (id)objc_claimAutoreleasedReturnValue();

    }
  }
  XCFBufDestroy((uint64_t)v92);
  XCFBufDestroy((uint64_t)v91);
  v30 = v47[3];

  _Block_object_dispose(v44, 8);
  _Block_object_dispose(&v46, 8);
  _Block_object_dispose(&v50, 8);
  _Block_object_dispose(&v54, 8);
  _Block_object_dispose(&v58, 8);

  return v30;
}

void sub_1828B1568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  void *v43;
  void *v44;
  void *v45;
  void *v46;

  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose(&a39, 8);
  _Block_object_dispose(&a43, 8);

  _Unwind_Resume(a1);
}

id _LSMakeNSErrorImpl(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  NSObject *v15;
  void *v16;
  int v18;
  id v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v9 = a1;
  v10 = a5;
  v11 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v12 = v11;
  if (v10)
    objc_msgSend(v11, "addEntriesFromDictionary:", v10);
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a3);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "setObject:forKeyedSubscript:", v13, CFSTR("_LSFunction"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a4);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "setObject:forKeyedSubscript:", v14, CFSTR("_LSLine"));

  _LSErrorLog();
  v15 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
  {
    v18 = 138544130;
    v19 = v9;
    v20 = 2048;
    v21 = a2;
    v22 = 2082;
    v23 = a3;
    v24 = 1024;
    v25 = a4;
    _os_log_debug_impl(&dword_182882000, v15, OS_LOG_TYPE_DEBUG, "Constructing NSError %{public}@/%li at %{public}s:%i", (uint8_t *)&v18, 0x26u);
  }

  v16 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", v9, a2, v12);
  return v16;
}

void sub_1828B17F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

id _LSErrorLog(void)
{
  if (_LSErrorLog(void)::once != -1)
    dispatch_once(&_LSErrorLog(void)::once, &__block_literal_global_39);
  return (id)_LSErrorLog(void)::result;
}

uint64_t XCFBufInit(uint64_t result)
{
  *(_BYTE *)(result + 28) = 0;
  *(_QWORD *)result = result + 28;
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 24) = 127;
  *(_QWORD *)(result + 16) = 0;
  return result;
}

uint64_t _LSBundleMatchesNode(void *a1, int a2, uint64_t a3, void *a4, uint64_t a5)
{
  id v9;
  id v10;
  void *v11;
  uint64_t v12;

  v9 = a1;
  v10 = a4;
  v11 = v10;
  v12 = 0;
  if (a2 && a3 && v10)
    v12 = _LSAliasAndInodeOnContainerMatchesNode(v9, *(_DWORD *)a3, 0, *(unsigned int *)(a3 + 4), v10, a5);

  return v12;
}

void sub_1828B1944(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t _LSAliasAndInodeOnContainerMatchesNode(void *a1, int a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  id v11;
  id v12;
  uint64_t Unit;
  BOOL v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v18;
  char v19;

  v11 = a1;
  v12 = a5;
  Unit = CSStoreGetUnit();
  if (Unit
    && ((v19 = 0, v18 = 0, !_LSContainerCheckState(v11, a4, Unit, &v19, &v18))
      ? (v14 = v19 == 1)
      : (v14 = 0),
        v14 ? (v15 = v18 == a6) : (v15 = 0),
        v15))
  {
    v16 = _LSAliasCompareToNode(v11, a2, a6, a3, v12);
  }
  else
  {
    v16 = 0;
  }

  return v16;
}

void sub_1828B1A48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t _LSAliasCompareToNode(void *a1, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;

  v7 = a5;
  _LSAliasGet(a1, a2);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (v8)
    v10 = _LSAliasMatchesNode(v8, v7);
  else
    v10 = 0;

  return v10;
}

void sub_1828B1ACC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t _LSAliasMatchesNode(void *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v3 = a1;
  v4 = (void *)MEMORY[0x186DAE7A0]();
  objc_msgSend(a2, "canonicalPathWithError:", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  v7 = 0;
  if (v3 && v5)
    v7 = _LSAliasDataMatchesPath_NoIO(v3, v5, 0);

  objc_autoreleasePoolPop(v4);
  return v7;
}

void sub_1828B1B64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1828B1D6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828B1E5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  _Unwind_Resume(exception_object);
}

uint64_t _UTTypeGetPedigreeInternal(uint64_t *a1, int a2)
{
  id v4;
  void *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t);
  void *v13;
  id v14;
  uint64_t *v15;

  v4 = objc_alloc_init(MEMORY[0x1E0C99E20]);
  v5 = (void *)_CSStringCopyCFString();
  if (v5)
    objc_msgSend(v4, "addObject:", v5);

  v6 = *a1;
  v10 = MEMORY[0x1E0C809B0];
  v11 = 3221225472;
  v12 = ___UTTypeGetPedigreeInternal_block_invoke;
  v13 = &unk_1E1046218;
  v15 = a1;
  v7 = v4;
  v14 = v7;
  _UTTypeSearchConformsToTypesCommon(v6, a2, -1, (uint64_t)_UTTypeSearchConformsToTypesWithBlock::$_0::__invoke, (uint64_t)&v10, 0);
  v8 = objc_msgSend(v7, "copy", v10, v11, v12, v13);

  return v8;
}

void sub_1828B1FD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL _UTExtensionLooksLikeAppendedRandomness(void *a1, CFStringRef theString)
{
  CFIndex Length;
  unint64_t v5;
  uint64_t v6;
  UniChar *v7;
  UniChar *v8;
  unint64_t v9;
  _BOOL8 v11;
  int v13;
  const __CFString *v15;
  UniChar v16[128];
  CFRange v17;

  if (!theString)
    return 0;
  Length = CFStringGetLength(theString);
  if ((unint64_t)(Length - 12) > 0x74)
    return 0;
  v5 = Length;
  v17.location = 0;
  v17.length = Length;
  CFStringGetCharacters(theString, v17, v16);
  v6 = 0;
  v7 = &v16[v5];
  v8 = v7;
  do
  {
    if (v16[v6] == 45)
      v8 = &v16[v6];
    ++v6;
  }
  while (v5 != v6);
  v9 = v7 - v8;
  if ((unint64_t)((char *)v7 - (char *)v8 - 3) > 0x28 || v5 <= v9)
    return 0;
  while (++v8 != v7)
  {
    v13 = *v8;
    if ((v13 - 48) >= 0xA && (v13 & 0xFFFFFFDF) - 65 > 0x19)
    {
      if (v8 != v7)
        return 0;
      break;
    }
  }
  v15 = CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v16, v5 - v9);
  v11 = _UTTypeGetActiveIdentifierForTag(a1, CFSTR("public.filename-extension"), v15, 0, 0) != 0;
  CFRelease(v15);
  return v11;
}

void sub_1828B2394(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;
  void *v2;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

id _LSPlistHintCopy(void *a1)
{
  return (id)objc_msgSend(a1, "copy");
}

void sub_1828B2664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  void *v20;
  void *v21;
  void *v22;

  v22 = v21;

  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void sub_1828B27CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828B291C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1828B2BA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828B2E28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1828B30B8(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    os_unfair_lock_unlock((os_unfair_lock_t)&currentLock);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_1828B3100(uint64_t a1, int a2)
{
  if (a2)
    objc_terminate();
  JUMPOUT(0x1828B30C4);
}

uint64_t _LSGetDMFPolicy(LaunchServices::DMFSupport *a1, NSString *a2)
{
  void *v2;
  void *v3;
  uint64_t v4;

  LaunchServices::DMFSupport::getCachedPolicy(a1, a2);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (v2)
    v4 = objc_msgSend(v2, "integerValue");
  else
    v4 = 0;

  return v4;
}

void sub_1828B31BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id LaunchServices::DMFSupport::getCachedPolicy(LaunchServices::DMFSupport *this, NSString *a2)
{
  LaunchServices::DMFSupport *v2;
  id v3;
  void *v4;

  v2 = this;
  v3 = LaunchServices::DMFSupport::getMonitor((LaunchServices::DMFSupport *)1);
  if (v2)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&LaunchServices::DMFSupport::allPoliciesLock);
    objc_msgSend((id)LaunchServices::DMFSupport::allPolicies, "objectForKeyedSubscript:", v2);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    os_unfair_lock_unlock((os_unfair_lock_t)&LaunchServices::DMFSupport::allPoliciesLock);
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

void sub_1828B3240(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id LaunchServices::DMFSupport::getMonitor(LaunchServices::DMFSupport *this)
{
  uint64_t *v1;

  if ((_DWORD)this)
  {
    if (LaunchServices::DMFSupport::getMonitor(BOOL)::once != -1)
      dispatch_once(&LaunchServices::DMFSupport::getMonitor(BOOL)::once, &__block_literal_global_12);
    v1 = &LaunchServices::DMFSupport::getMonitor(BOOL)::cachingMonitor;
  }
  else
  {
    if (LaunchServices::DMFSupport::getMonitor(BOOL)::once != -1)
      dispatch_once(&LaunchServices::DMFSupport::getMonitor(BOOL)::once, &__block_literal_global_15);
    v1 = &LaunchServices::DMFSupport::getMonitor(BOOL)::nonCachingMonitor;
  }
  return (id)*v1;
}

void sub_1828B3408(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1828B35B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828B36B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<objc_selector *,objc_object * {__strong}>,std::__unordered_map_hasher<objc_selector *,std::__hash_value_type<objc_selector *,objc_object * {__strong}>,std::hash<objc_selector *>,std::equal_to<objc_selector *>,true>,std::__unordered_map_equal<objc_selector *,std::__hash_value_type<objc_selector *,objc_object * {__strong}>,std::equal_to<objc_selector *>,std::hash<objc_selector *>,true>,std::allocator<std::__hash_value_type<objc_selector *,objc_object * {__strong}>>>::__erase_unique<objc_selector *>(_QWORD *a1, _QWORD *a2)
{
  uint64_t *result;

  result = std::__hash_table<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::__unordered_map_hasher<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::hash<_opaque_pthread_t *>,std::equal_to<_opaque_pthread_t *>,true>,std::__unordered_map_equal<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::equal_to<_opaque_pthread_t *>,std::hash<_opaque_pthread_t *>,true>,std::allocator<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>>>::find<_opaque_pthread_t *>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<objc_selector *,objc_object * {__strong}>,std::__unordered_map_hasher<objc_selector *,std::__hash_value_type<objc_selector *,objc_object * {__strong}>,std::hash<objc_selector *>,std::equal_to<objc_selector *>,true>,std::__unordered_map_equal<objc_selector *,std::__hash_value_type<objc_selector *,objc_object * {__strong}>,std::equal_to<objc_selector *>,std::hash<objc_selector *>,true>,std::allocator<std::__hash_value_type<objc_selector *,objc_object * {__strong}>>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<objc_selector *,objc_object * {__strong}>,std::__unordered_map_hasher<objc_selector *,std::__hash_value_type<objc_selector *,objc_object * {__strong}>,std::hash<objc_selector *>,std::equal_to<objc_selector *>,true>,std::__unordered_map_equal<objc_selector *,std::__hash_value_type<objc_selector *,objc_object * {__strong}>,std::equal_to<objc_selector *>,std::hash<objc_selector *>,true>,std::allocator<std::__hash_value_type<objc_selector *,objc_object * {__strong}>>>::erase(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  id *v3;
  void *__p;
  char v6;

  v2 = *a2;
  std::__hash_table<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::__unordered_map_hasher<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::hash<_opaque_pthread_t *>,std::equal_to<_opaque_pthread_t *>,true>,std::__unordered_map_equal<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::equal_to<_opaque_pthread_t *>,std::hash<_opaque_pthread_t *>,true>,std::allocator<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>>>::remove(a1, a2, (uint64_t)&__p);
  v3 = (id *)__p;
  __p = 0;
  if (v3)
  {
    if (v6)

    operator delete(v3);
  }
  return v2;
}

_QWORD *std::__hash_table<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::__unordered_map_hasher<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::hash<_opaque_pthread_t *>,std::equal_to<_opaque_pthread_t *>,true>,std::__unordered_map_equal<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::equal_to<_opaque_pthread_t *>,std::hash<_opaque_pthread_t *>,true>,std::allocator<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>>>::remove@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(_QWORD **)(*result + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2)
      goto LABEL_19;
    v9 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*result + 8 * v4) = 0;
  }
  v10 = *a2;
  if (*a2)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*result + 8 * v11) = v7;
      v10 = *a2;
    }
  }
  *v7 = v10;
  *a2 = 0;
  --result[3];
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = result + 2;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1828B3B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  va_list va;

  va_start(va, a5);
  v13 = v12;

  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)va);
  _Unwind_Resume(a1);
}

void sub_1828B3C34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1828B3E34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1828B3E8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828B3F2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828B3FB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828B41D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  va_list va;

  va_start(va, a3);

  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)va);
  _Unwind_Resume(a1);
}

uint64_t findPluginDataInContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, _QWORD *a8)
{
  char v9;
  uint64_t v10;
  _QWORD v12[11];
  int v13;
  char v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t);
  void (*v23)(uint64_t);
  id v24;

  v19 = 0;
  v20 = &v19;
  v21 = 0x3032000000;
  v22 = __Block_byref_object_copy__0;
  v23 = __Block_byref_object_dispose__0;
  v24 = 0;
  v15 = 0;
  v16 = &v15;
  v17 = 0x2020000000;
  v18 = 0;
  if (a5)
    v9 = 4;
  else
    v9 = 0;
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = ___ZL23findPluginDataInContextP9LSContextP6NSUUIDP6FSNodeP8NSStringbjPjPU15__autoreleasingP7NSError_block_invoke;
  v12[3] = &unk_1E103FBD8;
  v12[4] = a2;
  v12[5] = a4;
  v14 = v9;
  v12[6] = a3;
  v12[7] = &v15;
  v13 = a6;
  v12[9] = a1;
  v12[10] = a7;
  v12[8] = &v19;
  __LSRECORD_IS_PERFORMING_IO_FOR_A_CALLER__((uint64_t)v12);
  if (a8)
    *a8 = objc_retainAutorelease((id)v20[5]);
  v10 = v16[3];
  _Block_object_dispose(&v15, 8);
  _Block_object_dispose(&v19, 8);

  return v10;
}

void sub_1828B4328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 64), 8);

  _Unwind_Resume(a1);
}

void sub_1828B4444(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828B467C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1828B4790(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828B492C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1828B4C38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1828B528C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,id a42)
{
  void *v42;
  uint64_t v43;

  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a37, 8);

  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)(v43 - 256));
  _Block_object_dispose((const void *)(v43 - 224), 8);

  _Unwind_Resume(a1);
}

uint64_t _LSGetAuditTokenForSelf()
{
  if (_LSGetAuditTokenForSelf::once != -1)
    dispatch_once(&_LSGetAuditTokenForSelf::once, &__block_literal_global_115);
  return _LSGetAuditTokenForSelf::result;
}

uint64_t _LSGetPIDFromToken(_OWORD *a1)
{
  __int128 v1;
  audit_token_t atoken;
  pid_t pidp;

  pidp = 0;
  v1 = a1[1];
  *(_OWORD *)atoken.val = *a1;
  *(_OWORD *)&atoken.val[4] = v1;
  audit_token_to_au32(&atoken, 0, 0, 0, 0, 0, &pidp, 0, 0);
  return pidp;
}

void sub_1828B55FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32)
{
  void *v32;

  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a27, 8);

  _Unwind_Resume(a1);
}

void LaunchServices::Record::storeWeakSharedRecord(void *a1, id *a2)
{
  id v3;

  v3 = a1;
  objc_storeWeak(a2, v3);
  if (v3)
  {
    objc_msgSend(v3, "_setShared:", 1);
    CFAutorelease(v3);
  }

}

void sub_1828B5698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZL30_LSPlistCreateTransformedValueP11objc_objectPFP8NSStringS2_PbES3__block_invoke_2(uint64_t a1, void *a2)
{
  int v3;
  id v4;
  uint64_t v5;
  id v6;
  id v7;

  v6 = a2;
  v3 = _NSIsNSString();
  v4 = v6;
  if (v3)
  {
    (*(void (**)(id, uint64_t))(a1 + 48))(v6, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
    v5 = objc_claimAutoreleasedReturnValue();

    v4 = (id)v5;
  }
  v7 = v4;
  objc_msgSend(*(id *)(a1 + 32), "addObject:");

}

void sub_1828B574C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1828B5950(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1828B5A54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828B5DDC(_Unwind_Exception *a1)
{
  void *v1;
  const void *v2;
  void *v3;

  if (v2)
    CFRelease(v2);

  _Unwind_Resume(a1);
}

void _LSContextObserveChange(void **a1)
{
  pthread_mutex_t *v2;

  if (_LSDatabaseGetNoServerLock::once == -1)
  {
    if (!a1)
      return;
  }
  else
  {
    dispatch_once(&_LSDatabaseGetNoServerLock::once, &__block_literal_global_83);
    if (!a1)
      return;
  }
  if (*a1)
  {
    v2 = (pthread_mutex_t *)_LSDatabaseGetNoServerLock::result;
    *((_BYTE *)*a1 + 1664) |= 4u;
    if (v2)
    {
      pthread_mutex_lock(v2);
      _LSSetLocalDatabase(*a1);
      _LSSetCurrentProcessMayMapDatabase(1);
      pthread_mutex_unlock(v2);
    }
    else
    {
      _LSSetLocalDatabase(*a1);
      _LSSetCurrentProcessMayMapDatabase(1);
    }
  }
}

void _LSSetLocalDatabase(void *a1)
{
  LSSessionKey sessionKey;
  LSSession *v2;
  _LSDatabase *v3;

  v3 = a1;
  os_unfair_recursive_lock_lock_with_options();
  sessionKey = v3->sessionKey;
  v2 = (LSSession *)_LSGetSession(sessionKey);
  LSSession::setDatabase(v2, v3);
  os_unfair_recursive_lock_unlock();

}

void sub_1828B5F54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void LSSession::setDatabase(LSSession *this, _LSDatabase *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  void (**v6)(_QWORD, _QWORD, _QWORD, _QWORD);
  void *v7;
  _QWORD *i;
  void *v9;
  _LSDatabase *v10;

  v10 = a2;
  objc_storeStrong((id *)this + 3, a2);
  v4 = (_QWORD *)*((_QWORD *)this + 4);
  v5 = (_QWORD *)*((_QWORD *)this + 5);
  if (v4 != v5)
  {
    do
    {
      v6 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD))MEMORY[0x186DAE9BC](*v4);
      v7 = (void *)MEMORY[0x186DAE7A0]();
      v6[2](v6, 0, 0, 0);
      objc_autoreleasePoolPop(v7);

      ++v4;
    }
    while (v4 != v5);
    v4 = (_QWORD *)*((_QWORD *)this + 4);
    for (i = (_QWORD *)*((_QWORD *)this + 5); i != v4; --i)
    {
      v9 = (void *)*(i - 1);

    }
  }
  *((_QWORD *)this + 5) = v4;
  std::vector<void({block_pointer} {__strong})(BOOL,_LSDatabase *,NSError *),std::allocator<void({block_pointer} {__strong})(BOOL,_LSDatabase *,NSError *)>>::shrink_to_fit((char **)this + 4);

}

void sub_1828B6030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t std::vector<void({block_pointer} {__strong})(BOOL,_LSDatabase *,NSError *),std::allocator<void({block_pointer} {__strong})(BOOL,_LSDatabase *,NSError *)>>::shrink_to_fit(char **a1)
{
  uint64_t result;
  char *v3;
  char *v4;
  char *v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  _QWORD v16[2];
  uint64_t v17;
  char *v18;
  uint64_t v19;

  v3 = a1[2];
  result = (uint64_t)(a1 + 2);
  v4 = *a1;
  v5 = a1[1];
  v6 = (v5 - *a1) >> 3;
  if (v6 < (v3 - *a1) >> 3)
  {
    v19 = result;
    if (v5 == v4)
    {
      v11 = 0;
      v9 = 8 * v6;
    }
    else
    {
      v7 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<os_eligibility_answer_t>>(result, v6);
      v4 = *a1;
      v8 = a1[1];
      v9 = (uint64_t)&v7[8 * v6];
      v11 = &v7[8 * v10];
      v17 = v9;
      v18 = v11;
      if (v8 != v4)
      {
        v12 = &v7[8 * v6];
        do
        {
          v13 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          *(_QWORD *)v8 = 0;
          *((_QWORD *)v12 - 1) = v13;
          v12 -= 8;
        }
        while (v8 != v4);
        v14 = *a1;
        v4 = a1[1];
        v9 = v17;
        v11 = v18;
        goto LABEL_9;
      }
    }
    v14 = v4;
    v12 = (char *)v9;
LABEL_9:
    *a1 = v12;
    a1[1] = (char *)v9;
    v15 = a1[2];
    a1[2] = v11;
    v17 = (uint64_t)v4;
    v18 = v15;
    v16[0] = v14;
    v16[1] = v14;
    return std::__split_buffer<LSApplicationRecord * {__strong}>::~__split_buffer((uint64_t)v16);
  }
  return result;
}

void _LSSetCurrentProcessMayMapDatabase(int a1)
{
  if (_LSCurrentProcessMayMapDatabase::once != -1)
    dispatch_once(&_LSCurrentProcessMayMapDatabase::once, &__block_literal_global_114);
  atomic_load(mayMapDatabase);
  atomic_store(a1 != 0, mayMapDatabase);
}

id LaunchServices::DatabaseContext::getLog(LaunchServices::DatabaseContext *this)
{
  if (LaunchServices::DatabaseContext::getLog(void)::once != -1)
    dispatch_once(&LaunchServices::DatabaseContext::getLog(void)::once, &__block_literal_global_78);
  return (id)LaunchServices::DatabaseContext::getLog(void)::result;
}

void sub_1828B6668(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1828B6750(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id XNSArrayByMappingBlock(void *a1, void *a2)
{
  id v3;
  void (**v4)(id, _QWORD);
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v3, "count"));
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v6 = v3;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v7)
  {
    v8 = *(_QWORD *)v13;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v13 != v8)
          objc_enumerationMutation(v6);
        v4[2](v4, *(_QWORD *)(*((_QWORD *)&v12 + 1) + 8 * v9));
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "addObject:", v10, (_QWORD)v12);

        ++v9;
      }
      while (v7 != v9);
      v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v7);
  }

  return v5;
}

void sub_1828B68C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1828B6A08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

id computeIdentityBookmark(LSApplicationRecord *a1)
{
  LSApplicationRecord *v1;
  void *v2;

  v1 = a1;
  -[LSBundleRecord bundleIdentifier](v1, "bundleIdentifier");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  -[LSBundleRecord URL](v1, "URL");

  return v2;
}

void sub_1828B6A94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id computeIdentityString(NSString *a1, NSURL *a2, _LSPersonaWithAttributes *a3)
{
  NSString *v4;
  NSURL *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  __CFString *v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v22;

  v4 = a1;
  v5 = a2;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("{\"v\":%d,"), 2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    -[_LSDatabase store]((uint64_t)v5);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "stringByAppendingFormat:", CFSTR("\"p\":\"%@\", \"pt\": %lu, "), v7, -[_LSPersonaWithAttributes personaType]((uint64_t)v5));
    v8 = objc_claimAutoreleasedReturnValue();

    v6 = (void *)v8;
  }
  if (v4)
  {
    v22 = 0;
    objc_msgSend(MEMORY[0x1E0CB36D8], "dataWithJSONObject:options:error:", v4, 4, &v22);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = v22;
    if (v9)
    {
      v11 = (__CFString *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithData:encoding:", v9, 4);
    }
    else
    {
      _LSDefaultLog();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        computeIdentityString((uint64_t)v10, v12, v13, v14, v15, v16, v17, v18);

      v11 = CFSTR("\"<ERROR>\"");
    }
    objc_msgSend(v6, "stringByAppendingFormat:", CFSTR("\"b\":%@"), v11);
    v19 = objc_claimAutoreleasedReturnValue();

    v6 = (void *)v19;
  }
  else
  {
    v10 = 0;
  }
  objc_msgSend(v6, "stringByAppendingString:", CFSTR("}"));
  v20 = (void *)objc_claimAutoreleasedReturnValue();

  return v20;
}

void sub_1828B6C54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

id computeIdentityString(LSApplicationRecord *a1, _LSPersonaWithAttributes *a2)
{
  LSApplicationRecord *v3;
  _LSPersonaWithAttributes *v4;
  NSString *v5;
  void *v6;
  _LSPersonaWithAttributes *v7;
  void *v8;

  v3 = a1;
  v4 = a2;
  -[LSBundleRecord bundleIdentifier](v3, "bundleIdentifier");
  v5 = (NSString *)objc_claimAutoreleasedReturnValue();
  -[LSBundleRecord URL](v3, "URL");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  computeIdentityString(v5, (NSURL *)v4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

void sub_1828B6D38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1828B6E20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1828B7078(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828B71D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1828B73F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id _LSShouldFetchContainersFromContainermanagerForPersona(void *a1, int a2, BOOL *a3)
{
  id v5;
  BOOL v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  NSObject *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  uint64_t v17;
  _QWORD v18[2];

  v18[1] = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = 0;
  if (objc_msgSend(v5, "count") == 1 && (a2 & 1) == 0)
  {
    objc_msgSend(v5, "firstObject");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = -[_LSPersonaWithAttributes personaType]((uint64_t)v7);

    v6 = (unint64_t)(v8 - 3) < 0xFFFFFFFFFFFFFFFELL;
  }
  if ((unint64_t)objc_msgSend(v5, "count") <= 1 && !a2)
  {
    v9 = 0;
    if (!a3)
      goto LABEL_21;
    goto LABEL_20;
  }
  objc_msgSend((Class)getUMUserManagerClass[0](), "sharedManager");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "currentPersona");
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (a2
    && ((objc_msgSend(v11, "isDefaultPersona") & 1) != 0 || objc_msgSend(v11, "isSystemPersona"))
    && objc_msgSend(v5, "count") == 1)
  {
    _LSDefaultLog();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      _LSShouldFetchContainersFromContainermanagerForPersona_cold_2(v12);

    if (_os_feature_enabled_impl())
    {
      _LSDefaultLog();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
        _LSShouldFetchContainersFromContainermanagerForPersona_cold_1(v13);

      v14 = (void *)*MEMORY[0x1E0CB2F90];
      v17 = *MEMORY[0x1E0CB2938];
      v18[0] = CFSTR("Unable to find this application extension record in the Launch Services database.");
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v18, &v17, 1);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      _LSMakeNSErrorImpl(v14, -50, (uint64_t)"_LSShouldFetchContainersFromContainermanagerForPersona", 311, v15);
      v9 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v9 = 0;
    }
    v6 = 0;
  }
  else
  {
    v9 = 0;
    v6 = 1;
  }

  if (a3)
LABEL_20:
    *a3 = v6;
LABEL_21:

  return v9;
}

void sub_1828B77D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _LSCopyRationalizedGroupContainerURLDict(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  _QWORD v7[4];
  id v8;

  v1 = a1;
  v2 = v1;
  if (!v1)
    goto LABEL_3;
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", objc_msgSend(v1, "count"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = ___LSCopyRationalizedGroupContainerURLDict_block_invoke;
  v7[3] = &unk_1E10425F8;
  v8 = v3;
  v4 = v3;
  objc_msgSend(v2, "enumerateKeysAndObjectsUsingBlock:", v7);
  v5 = objc_msgSend(v4, "copy");

  if (!v5)
LABEL_3:
    v5 = MEMORY[0x1E0C9AA70];

  return v5;
}

void sub_1828B7950(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id _LSCopyRationalizedEnvironmentVariablesDict(void *a1)
{
  id v1;
  void *v2;
  id v3;
  _QWORD v5[4];
  id v6;

  v1 = a1;
  if (!v1)
    goto LABEL_3;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = ___LSCopyRationalizedEnvironmentVariablesDict_block_invoke;
  v5[3] = &unk_1E10425F8;
  v3 = v2;
  v6 = v3;
  objc_msgSend(v1, "enumerateKeysAndObjectsUsingBlock:", v5);

  if (!v3)
LABEL_3:
    v3 = (id)MEMORY[0x1E0C9AA70];

  return v3;
}

id *_LSDatabaseCreate(void *a1, void *a2, const void *a3, _QWORD *a4)
{
  id v7;
  void *v8;
  const void *v9;
  id *v10;

  v7 = a1;
  if (objc_msgSend((id)__LSDefaultsGetSharedInstance(), "isServer"))
  {
    _LSServer_DatabaseExecutionContext();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = (const void *)-[LSDBExecutionContext rawWriteAccessContextForDBInit]((uint64_t)v8);

  }
  else
  {
    v9 = 0;
  }
  v10 = _LSDatabaseCreateWithAccessContext(v7, a2, a3, v9, a4);

  return v10;
}

void sub_1828B7AF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id *_LSDatabaseCreateWithAccessContext(void *a1, void *a2, const void *a3, const void *a4, _QWORD *a5)
{
  id *v10;
  id *v11;
  uint64_t MutableCopy;
  NSObject *v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  _BOOL4 v20;
  id v21;
  unsigned int *Header;
  unsigned int *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  BOOL v28;
  id v29;
  int v30;
  _BOOL4 v31;
  id v32;
  unint64_t v33;
  id *v34;
  char *v35;
  void *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  BOOL v40;
  int v41;
  BOOL v43;
  char v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  void *v48;
  NSObject *v49;
  NSObject *v50;
  void *v52;
  CFTypeRef cf;
  id v54;
  id location;
  id v56;
  id v57;
  id v58;
  id v59;
  uint64_t v60;
  const __CFString *v61;
  _QWORD v62[2];
  _QWORD v63[2];
  _QWORD v64[2];
  _QWORD v65[2];
  _QWORD v66[2];
  const __CFString *v67;
  void *v68;
  _OWORD v69[13];
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v54 = a1;
  location = 0;
  if (!a3)
  {
    v60 = *MEMORY[0x1E0CB2938];
    v61 = CFSTR("inStore");
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v61, &v60, 1);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], -50, (uint64_t)"_LSDatabaseCreateWithAccessContext", 1346, v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = location;
    location = v15;

    goto LABEL_48;
  }
  cf = a4;
  v10 = -[_LSDatabase _init]([_LSDatabase alloc], "_init");
  v11 = v10;
  if (!v10)
  {
    _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], -41, (uint64_t)"_LSDatabaseCreateWithAccessContext", 1341, 0);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = location;
    location = v17;

    if (a5)
    {
LABEL_49:
      v11 = 0;
      *a5 = objc_retainAutorelease(location);
      goto LABEL_50;
    }
    goto LABEL_10;
  }
  objc_storeStrong(v10 + 205, a1);
  v11[206] = a2;
  if (objc_msgSend((id)__LSDefaultsGetSharedInstance(), "isServer"))
  {
    MutableCopy = CSStoreCreateMutableCopy();
    v11[1] = (id)MutableCopy;
    if (!MutableCopy)
    {
      _LSDatabaseGetLog();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        _LSDatabaseCreateWithAccessContext_cold_1();

      goto LABEL_48;
    }
  }
  else
  {
    MutableCopy = (uint64_t)CFRetain(a3);
    v11[1] = (id)MutableCopy;
    if (!MutableCopy)
    {
      _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], -50, (uint64_t)"_LSSchemaConfigureForStore", 468, 0);
      v32 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_40;
    }
  }
  v19 = location;
  v59 = 0;
  v20 = _LSSchemaConfigureTable(MutableCopy, (uint64_t)CFSTR("DB Header"), (_DWORD *)v11 + 4, &v59);
  v21 = v59;
  if (v20)
  {
    LODWORD(v68) = 0;
    Header = (unsigned int *)CSStoreGetHeader();
    v23 = Header;
    if (!Header)
    {
      _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], -10817, (uint64_t)"_LSSchemaConfigureForStore", 507, &unk_1E1075A40);
      v32 = (id)objc_claimAutoreleasedReturnValue();
LABEL_39:

      goto LABEL_40;
    }
    if ((_DWORD)v68 == 208)
    {
      v24 = *Header;
      if (v24 != objc_msgSend((id)__LSDefaultsGetSharedInstance(), "currentSchemaVersion"))
      {
        v64[0] = CFSTR("WrongSchemaVersion");
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", *v23);
        v45 = objc_claimAutoreleasedReturnValue();
        v64[1] = CFSTR("CurrentSchemaVersion");
        v65[0] = v45;
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", objc_msgSend((id)__LSDefaultsGetSharedInstance(), "currentSchemaVersion"));
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        v65[1] = v46;
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v65, v64, 2);
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], -10817, (uint64_t)"_LSSchemaConfigureForStore", 487, v48);
        v32 = (id)objc_claimAutoreleasedReturnValue();

        v21 = v48;
        goto LABEL_38;
      }
      if (v23[1] == 208)
      {
        v25 = 0;
        while (1)
        {
          v26 = *(uint64_t *)((char *)&kLSTableInfo + v25);
          v27 = (_DWORD *)(*(char **)((char *)&kLSTableInfo + v25 + 8) + (_QWORD)(v11 + 2));
          v58 = v21;
          v28 = _LSSchemaConfigureTable(MutableCopy, v26, v27, &v58);
          v29 = v58;

          v21 = v29;
          if (!v28)
            goto LABEL_32;
          v25 += 16;
          if (v25 == 192)
          {
            v30 = CSBindableKeyMapInit();
            v57 = v29;
            v31 = _LSGetNSErrorFromOSStatusImpl(v30, &v57, (uint64_t)"_LSSchemaConfigureForStore", 524);
            v32 = v57;

            if (v31)
            {
              v33 = 0;
              v34 = v11 + 17;
              v35 = &byte_1E1042678;
              v52 = (void *)*MEMORY[0x1E0CB2F90];
              v36 = v32;
              do
              {
                v56 = v36;
                v37 = *((_QWORD *)v35 - 1);
                if (!v37 || (strlen(*((const char **)v35 - 1)), _CSGetStringForCharacters()))
                {
                  v41 = CSStringBindingStoreInit();
                  v40 = _LSGetNSErrorFromOSStatusImpl(v41, &v56, (uint64_t)"_LSSchemaConfigureBindingMap", 452);
                }
                else
                {
                  v67 = CFSTR("BindingClassName");
                  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v37);
                  v38 = (void *)objc_claimAutoreleasedReturnValue();
                  v68 = v38;
                  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v68, &v67, 1);
                  v39 = (void *)objc_claimAutoreleasedReturnValue();
                  _LSMakeNSErrorImpl(v52, -10817, (uint64_t)"_LSSchemaConfigureBindingMap", 447, v39);
                  v56 = (id)objc_claimAutoreleasedReturnValue();

                  v40 = 0;
                }
                v32 = v56;

                v43 = v33++ < 0xD && v40;
                v35 += 32;
                v34 += 13;
                v36 = v32;
              }
              while (v43);
              if (v40)
              {
                v44 = 1;
                goto LABEL_41;
              }
            }
            goto LABEL_40;
          }
        }
      }
      v62[0] = CFSTR("WrongHeaderLength");
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:");
      v45 = objc_claimAutoreleasedReturnValue();
      v62[1] = CFSTR("ExpectedHeaderLength");
      v63[0] = v45;
      v63[1] = &unk_1E1075690;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v63, v62, 2);
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], -10817, (uint64_t)"_LSSchemaConfigureForStore", 491, v46);
      v47 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v66[0] = CFSTR("WrongHeaderLength");
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:");
      v45 = objc_claimAutoreleasedReturnValue();
      v66[1] = CFSTR("ExpectedHeaderLength");
      *(_QWORD *)&v69[0] = v45;
      *((_QWORD *)&v69[0] + 1) = &unk_1E1075690;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v69, v66, 2);
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], -10817, (uint64_t)"_LSSchemaConfigureForStore", 483, v46);
      v47 = objc_claimAutoreleasedReturnValue();
    }
    v32 = (id)v47;
LABEL_38:

    v21 = (id)v45;
    goto LABEL_39;
  }
LABEL_32:
  v32 = v21;
LABEL_40:
  v32 = objc_retainAutorelease(v32);
  v44 = 0;
  v19 = v32;
LABEL_41:

  objc_storeStrong(&location, v19);
  if ((v44 & 1) == 0)
  {
    _LSDatabaseGetLog();
    v50 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
      _LSDatabaseCreateWithAccessContext_cold_3();

LABEL_48:
    if (a5)
      goto LABEL_49;
LABEL_10:
    v11 = 0;
    goto LABEL_50;
  }
  -[_LSDatabase setAccessContext:](v11, cf);
  _LSDatabaseGetLog();
  v49 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
  {
    memset(v69, 0, sizeof(v69));
    _LSDatabaseGetHeader(v69);
    _LSDatabaseCreateWithAccessContext_cold_2((uint64_t)v69, (uint64_t)v66, v49);
  }

LABEL_50:
  return v11;
}

void sub_1828B8274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

BOOL _LSSchemaConfigureTable(uint64_t a1, uint64_t a2, _DWORD *a3, _QWORD *a4)
{
  int TableWithName;
  int v8;
  void *v9;
  const __CFString *v11;
  _QWORD v12[2];

  v12[1] = *MEMORY[0x1E0C80C00];
  TableWithName = _CSStoreGetTableWithName();
  v8 = TableWithName;
  if (TableWithName)
  {
    *a3 = TableWithName;
  }
  else if (a4)
  {
    v11 = CFSTR("TableName");
    v12[0] = a2;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v12, &v11, 1);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], -9499, (uint64_t)"_LSSchemaConfigureTable", 430, v9);
    *a4 = (id)objc_claimAutoreleasedReturnValue();

  }
  return v8 != 0;
}

void sub_1828B8430(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id _LSDatabaseGetLog()
{
  if (_LSDatabaseGetLog_once != -1)
    dispatch_once(&_LSDatabaseGetLog_once, &__block_literal_global_17_0);
  return (id)_LSDatabaseGetLog_result;
}

void sub_1828B8578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1828B85F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t CSBindableKeyMapInit()
{
  return CSMapInit();
}

void sub_1828B8748(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = v2;
  MEMORY[0x186DADEF4](v3, 0x10A0C40C7812EA0);

  _Unwind_Resume(a1);
}

void _LSSchemaCache::_LSSchemaCache(_LSSchemaCache *this)
{
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *((_DWORD *)this + 58) = 1065353216;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_DWORD *)this + 68) = 1065353216;
  pthread_rwlock_init((pthread_rwlock_t *)this, 0);
  *(_OWORD *)((char *)this + 324) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
}

void sub_1828B87EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>>>::~__hash_table(v2);
  std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

id UMUserManagerFunction()
{
  return (id)classUMUserManager;
}

id UMUserManagerFunction_0()
{
  return (id)classUMUserManager_0;
}

void _LSShouldFetchContainersFromContainermanagerForPersona_cold_2(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl(&dword_182882000, log, OS_LOG_TYPE_ERROR, "No active persona/ system persona detected for system persona app", v1, 2u);
}

void sub_1828B89D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1828B8A94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1828B8BD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id _LSValidationTokenComputeHMAC(NSData *a1, NSData *a2)
{
  NSData *v3;
  NSData *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  const void *v10;
  size_t v11;
  id v12;
  __int128 v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  _LSAssertRunningInServer((uint64_t)"NSData *_LSValidationTokenComputeHMAC(NSData *__strong, NSData *__strong)");
  objc_msgSend((id)__LSDefaultsGetSharedInstance(), "HMACSecret");
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = (void *)v5;
  v7 = 0;
  if (v4 && v3 && v5)
  {
    v8 = (void *)-[NSData mutableCopy](v3, "mutableCopy");
    objc_msgSend(v8, "appendData:", v4);
    v9 = objc_retainAutorelease(v6);
    v10 = (const void *)objc_msgSend(v9, "bytes", 0, 0, 0, 0, 0, 0, 0, 0);
    v11 = objc_msgSend(v9, "length");
    v12 = objc_retainAutorelease(v8);
    CCHmac(4u, v10, v11, (const void *)objc_msgSend(v12, "bytes"), objc_msgSend(v12, "length"), &v14);
    objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", &v14, 64);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v7;
}

void sub_1828B8D44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

id _LSLazyLoadObjectOnQueue(uint64_t a1, void *a2, void *a3)
{
  NSObject *v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  _QWORD v15[4];
  id v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD block[6];
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  void (*v24)(uint64_t);
  id v25;

  v5 = a2;
  v6 = a3;
  v20 = 0;
  v21 = &v20;
  v22 = 0x3032000000;
  v23 = __Block_byref_object_copy__19;
  v24 = __Block_byref_object_dispose__19;
  v25 = 0;
  if (!a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "id _LSLazyLoadObjectOnQueue(__strong id volatile *, __strong dispatch_queue_t _Nonnull, NS_NOESCAPE _LSLazyLoadGenerator __strong)");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "handleFailureInFunction:file:lineNumber:description:", v12, CFSTR("LSDispatchUtils.mm"), 164, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("ioAddress != NULL"));

    if (v5)
      goto LABEL_3;
LABEL_8:
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "id _LSLazyLoadObjectOnQueue(__strong id volatile *, __strong dispatch_queue_t _Nonnull, NS_NOESCAPE _LSLazyLoadGenerator __strong)");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "handleFailureInFunction:file:lineNumber:description:", v14, CFSTR("LSDispatchUtils.mm"), 165, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("inQueue != NULL"));

    goto LABEL_3;
  }
  if (!v5)
    goto LABEL_8;
LABEL_3:
  v7 = MEMORY[0x1E0C809B0];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___LSLazyLoadObjectOnQueue_block_invoke;
  block[3] = &unk_1E1043230;
  block[4] = &v20;
  block[5] = a1;
  dispatch_sync(v5, block);
  v8 = (void *)v21[5];
  if (v6 && !v8)
  {
    v15[0] = v7;
    v15[1] = 3221225472;
    v15[2] = ___LSLazyLoadObjectOnQueue_block_invoke_2;
    v15[3] = &unk_1E1043258;
    v18 = a1;
    v16 = v6;
    v17 = &v20;
    dispatch_barrier_sync(v5, v15);

    v8 = (void *)v21[5];
  }
  v9 = v8;
  _Block_object_dispose(&v20, 8);

  return v9;
}

void sub_1828B8F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  void *v28;
  void *v29;
  void *v30;
  void *v31;

  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

uint64_t _LSCopyDataContainerURLFromContainermanager(void *a1, uint64_t a2, unsigned int a3)
{
  id v5;
  NSObject *v6;
  id v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  _BYTE v13[12];
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  _LSDefaultLog();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v13 = 138412802;
    *(_QWORD *)&v13[4] = v5;
    v14 = 2048;
    v15 = a2;
    v16 = 2048;
    v17 = a3;
    _os_log_impl(&dword_182882000, v6, OS_LOG_TYPE_DEFAULT, "querying MCM for container for %@, class %llx, platform %lu", v13, 0x20u);
  }

  *(_QWORD *)v13 = 1;
  v7 = objc_retainAutorelease(v5);
  objc_msgSend(v7, "UTF8String");
  v8 = container_create_or_lookup_path_for_platform();
  if (v8)
  {
    v9 = (void *)v8;
    v10 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99E98]), "initFileURLWithFileSystemRepresentation:isDirectory:relativeToURL:", v8, 1, 0);
    free(v9);
  }
  else
  {
    _LSDefaultLog();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      _LSCopyDataContainerURLFromContainermanager_cold_1();

    v10 = 0;
  }

  return v10;
}

void sub_1828B927C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _LSFindBundleWithInfo(void *a1, unint64_t a2, void *a3, int a4, const void *a5, uint64_t a6, _QWORD *a7)
{
  return _LSFindBundleWithInfo_NoIOFiltered(a1, a2, a3, a4, a5, a6, 0, 0, a7);
}

void sub_1828B95D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v14;
  va_list va;

  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v14 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_1828B97AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1828B9884(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1828B9AF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1828BA15C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

id LaunchServices::URLOverrides::getLog(LaunchServices::URLOverrides *this)
{
  if (LaunchServices::URLOverrides::getLog(void)::once != -1)
    dispatch_once(&LaunchServices::URLOverrides::getLog(void)::once, &__block_literal_global_73);
  return (id)LaunchServices::URLOverrides::getLog(void)::result;
}

LaunchServices::URLOverrides::State *LaunchServices::URLOverrides::State::State(LaunchServices::URLOverrides::State *this, NSURLComponents *a2, char a3)
{
  NSURLComponents *v5;
  BOOL *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  BOOL v10;
  int v11;
  BOOL v12;
  NSURLComponents *v13;
  double v14;
  double v15;
  uint64_t v16;
  NSObject *v17;
  void *v18;
  NSObject *v19;
  uint64_t v20;
  void *v21;
  double v22;
  void *v23;
  void *v24;
  void *v25;
  char v26;
  int v27;

  v5 = a2;
  *(_QWORD *)this = v5;
  *((_BYTE *)this + 8) = a3;
  *(_DWORD *)((char *)this + 9) = 0;
  v6 = (BOOL *)this + 9;
  *((_BYTE *)this + 13) = 0;
  -[NSURLComponents scheme](v5, "scheme");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (v7)
  {
    v9 = objc_msgSend(v7, "caseInsensitiveCompare:", CFSTR("http"));
    *v6 = v9 == 0;
    if (v9)
    {
      v10 = objc_msgSend(v8, "caseInsensitiveCompare:", CFSTR("https")) == 0;
      v11 = *v6;
    }
    else
    {
      v10 = 0;
      v11 = 1;
    }
    v12 = 0;
    *((_BYTE *)this + 10) = v10;
    if (!v11 && !v10)
      v12 = objc_msgSend(v8, "caseInsensitiveCompare:", CFSTR("itms")) == 0;
    *((_BYTE *)this + 11) = v12;
  }

  if (*v6 || *((_BYTE *)this + 10))
  {
    v13 = v5;
    pthread_mutex_lock(&LaunchServices::URLOverrides::checkForiCloudHost(NSURLComponents *)::lock);
    if (!LaunchServices::URLOverrides::checkForiCloudHost(NSURLComponents *)::cachedICloudHosts
      || (v14 = *(double *)&LaunchServices::URLOverrides::checkForiCloudHost(NSURLComponents *)::nextFetchTime,
          objc_msgSend(MEMORY[0x1E0C99D68], "timeIntervalSinceReferenceDate"),
          v14 < v15))
    {
      v16 = objc_msgSend((id)__LSDefaultsGetSharedInstance(), "isServer");
      if ((v16 & 1) != 0 || (v16 = objc_msgSend((id)__LSDefaultsGetSharedInstance(), "hasServer"), (v16 & 1) == 0))
      {
        LaunchServices::URLOverrides::getLog((LaunchServices::URLOverrides *)v16);
        v19 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
          LaunchServices::URLOverrides::State::State();

        _LSServer_GetiCloudHostNames();
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v20 = objc_msgSend(v18, "copy");
        v21 = (void *)LaunchServices::URLOverrides::checkForiCloudHost(NSURLComponents *)::cachedICloudHosts;
        LaunchServices::URLOverrides::checkForiCloudHost(NSURLComponents *)::cachedICloudHosts = v20;

      }
      else
      {
        LaunchServices::URLOverrides::getLog((LaunchServices::URLOverrides *)v16);
        v17 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
          LaunchServices::URLOverrides::State::State();

        +[_LSDService synchronousXPCProxyWithErrorHandler:]((uint64_t)_LSDOpenService, 0);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "getiCloudHostNamesWithCompletionHandler:", &__block_literal_global_192);
      }

      objc_msgSend(MEMORY[0x1E0C99D68], "timeIntervalSinceReferenceDate");
      *(double *)&LaunchServices::URLOverrides::checkForiCloudHost(NSURLComponents *)::nextFetchTime = v22 + 86400.0;
    }
    v23 = (void *)objc_msgSend((id)LaunchServices::URLOverrides::checkForiCloudHost(NSURLComponents *)::cachedICloudHosts, "copy");
    pthread_mutex_unlock(&LaunchServices::URLOverrides::checkForiCloudHost(NSURLComponents *)::lock);
    -[NSURLComponents host](v13, "host");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "lowercaseString");
    v25 = (void *)objc_claimAutoreleasedReturnValue();

    if (v25)
      v26 = objc_msgSend(v23, "containsObject:", v25);
    else
      v26 = 0;

    *((_BYTE *)this + 12) = v26;
  }
  v27 = objc_msgSend((id)__LSDefaultsGetSharedInstance(), "isInXCTestRigInsecure");
  if (!LaunchServices::URLOverrides::gUseMacOverrides)
    v27 = 0;
  if (v27 == 1)
    *((_BYTE *)this + 13) = objc_msgSend((id)LaunchServices::URLOverrides::gUseMacOverrides, "BOOLValue");

  return this;
}

void sub_1828BA52C(_Unwind_Exception *a1)
{
  id *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1828BA6F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v3;

  _Unwind_Resume(a1);
}

void sub_1828BA9D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t _LSMakeVersionNumber@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  a4[3] = 0;
  return result;
}

void sub_1828BACE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1828BAFA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1828BB2A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t LaunchServices::BindingEvaluator::getOptions(LaunchServices::BindingEvaluator *this)
{
  return *((unsigned int *)this + 27);
}

void LaunchServices::BindingEvaluator::CreateWithApplicationIdentifier(LaunchServices::BindingEvaluator *this@<X0>, NSString *a2@<X1>, uint64_t a3@<X8>)
{
  char v3;
  NSString *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  void *v12;

  v3 = (char)a2;
  LaunchServices::BindingEvaluator::BindingEvaluator((LaunchServices::BindingEvaluator *)a3);
  LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)CFSTR("Creating binding evaluator for application identifier %@"), v6, this);
  v11 = 0;
  v12 = 0;
  _LSSplitApplicationIdentifier(this, &v12, &v11);
  v7 = objc_msgSend(v11, "copy");
  v8 = *(void **)(a3 + 32);
  *(_QWORD *)(a3 + 32) = v7;

  if (v12)
  {
    v9 = -[LaunchServices::BindingEvaluator copy](this, "copy");
    v10 = *(void **)(a3 + 80);
    *(_QWORD *)(a3 + 80) = v9;

  }
  *(_BYTE *)(a3 + 88) = 1;
  *(_BYTE *)(a3 + 89) = v3;

}

void sub_1828BB3E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  id *v12;

  LaunchServices::BindingEvaluator::~BindingEvaluator(v12);
  _Unwind_Resume(a1);
}

void _LSSplitApplicationIdentifier(void *a1, void **a2, id *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;

  v13 = a1;
  if (a2)
  {
    v6 = *a2;
    *a2 = 0;

  }
  if (a3)
    objc_storeStrong(a3, a1);
  if ((unint64_t)objc_msgSend(v13, "length") >= 0xC && objc_msgSend(v13, "rangeOfString:", CFSTR(".")) == 10)
  {
    v8 = v7;
    if (a2)
    {
      objc_msgSend(v13, "substringToIndex:", 10);
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = *a2;
      *a2 = (void *)v9;

    }
    if (a3)
    {
      objc_msgSend(v13, "substringFromIndex:", v8 + 10);
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = *a3;
      *a3 = (id)v11;

    }
  }

}

void sub_1828BB4D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t _LSLogAppRecordInitsForDataSeparation()
{
  if (_LSLogAppRecordInitsForDataSeparation::onceToken != -1)
    dispatch_once(&_LSLogAppRecordInitsForDataSeparation::onceToken, &__block_literal_global_4);
  return _LSLogAppRecordInitsForDataSeparation::result;
}

void sub_1828BB774(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1828BB85C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  LaunchServices::BindingEvaluator *v11;

  if (__p)
    operator delete(__p);
  LaunchServices::BindingEvaluator::~BindingEvaluator(v11);
  _Unwind_Resume(a1);
}

char *LaunchServices::BindingEvaluator::setAllowedBundleClasses(uint64_t a1, uint64_t a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v6;
  char *v7;
  char *result;
  unint64_t v9;

  v3 = *(char **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (v3 == (char *)v4)
  {
LABEL_5:
    v6 = v4;
  }
  else
  {
    v6 = (uint64_t)v3;
    v7 = v3;
    while (*(_DWORD *)v7)
    {
      v7 += 4;
      v6 += 4;
      if (v7 == (char *)v4)
        goto LABEL_5;
    }
  }
  result = (char *)(a1 + 112);
  if (v4 != v6)
  {
    v3 = 0;
    v4 = 0;
    v9 = 0;
    return std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>(result, v3, v4, v9);
  }
  if (result != (char *)a2)
  {
    v9 = (v4 - (uint64_t)v3) >> 2;
    return std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>(result, v3, v4, v9);
  }
  return result;
}

void LaunchServices::BindingEvaluator::CreateWithURLScheme(LaunchServices::BindingEvaluator *this@<X0>, id *a2@<X8>)
{
  NSObject *v5;
  NSString *v6;
  uint8_t buf[4];
  LaunchServices::BindingEvaluator *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  LaunchServices::BindingEvaluator::BindingEvaluator((LaunchServices::BindingEvaluator *)a2);
  _LSBindingLog();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138477827;
    v8 = this;
    _os_log_impl(&dword_182882000, v5, OS_LOG_TYPE_DEBUG, "BindingEvaluator::CreateWithURLScheme(%{private}@)", buf, 0xCu);
  }

  LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)CFSTR("Creating binding evaluator for URL scheme %@"), v6, this);
  objc_storeStrong(a2 + 1, this);
}

void sub_1828BB9C4(_Unwind_Exception *a1)
{
  id *v1;

  LaunchServices::BindingEvaluator::~BindingEvaluator(v1);
  _Unwind_Resume(a1);
}

void sub_1828BBC4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

_DWORD *_LSBindingListGetEntryAtIndex(void *a1, uint64_t a2, unsigned int a3)
{
  id v4;
  unsigned int *Unit;
  _DWORD *i;

  v4 = a1;
  Unit = (unsigned int *)CSStoreGetUnit();
  if (*Unit <= a3)
  {
    i = 0;
  }
  else
  {
    for (i = Unit + 1; a3; --a3)
      i += i[1] + 2;
  }

  return i;
}

void sub_1828BBD54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

unsigned int *_LSBindingListGetEntryCount()
{
  unsigned int *result;

  result = (unsigned int *)CSStoreGetUnit();
  if (result)
    return (unsigned int *)*result;
  return result;
}

_LSEmptyPropertyList *_LSLazyPropertyListGetSharedEmptyPropertyList()
{
  return +[_LSEmptyPropertyList sharedInstance](_LSEmptyPropertyList, "sharedInstance");
}

uint64_t _LSDatabaseIsMutable()
{
  return _CSStoreIsMutable();
}

void sub_1828BC0D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t _LSXPCConnectionMayMapDatabase(void *a1)
{
  id v1;
  uint64_t MayMapDatabase;
  uint64_t v4;

  v1 = a1;
  if (v1)
  {
    xpc_connection_get_audit_token();
    MayMapDatabase = _LSAuditTokenMayMapDatabase((uint64_t)&v4);
  }
  else
  {
    MayMapDatabase = 0;
  }

  return MayMapDatabase;
}

void sub_1828BC354(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828BC6B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1828BC76C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

const __CFArray *_LSBundleCopyArchitecturesValidOnCurrentSystem(void *a1, int a2)
{
  _LSDatabase *v3;
  uint64_t v4;
  void *v5;
  const __CFArray *v6;
  int v7;
  _LSPlistHint *v8;
  void *v9;
  const __CFArray *MutableCopy;
  CFIndex Count;
  unint64_t i;
  const void *ValueAtIndex;
  int v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _OWORD v20[2];
  _OWORD v21[2];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = _LSBundleGet(v3, a2);
  if (v4)
  {
    v5 = (void *)MEMORY[0x186DAE7A0]();
    v6 = (const __CFArray *)_LSBundleCopyArchitectures_Common(v4);
    if (v6)
    {
      v18 = 0u;
      v19 = 0u;
      _LSGetCurrentSystemVersion(&v18);
      v7 = _LSGetCPUType();
      _LSPlistGetValueForKey(v3, *(_DWORD *)(v4 + 136), CFSTR("LSMinimumSystemVersionByArchitecture"), v8);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      if (v9 && (_NSIsNSDictionary() & 1) == 0)
      {

        v9 = 0;
      }
      MutableCopy = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v6);
      CFRelease(v6);
      Count = CFArrayGetCount(MutableCopy);
      if (Count >= 1)
      {
        for (i = Count + 1; i > 1; --i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(MutableCopy, i - 2);
          if (!v9
            || (v16 = 0u,
                v17 = 0u,
                _LSGetVersionForArchitecture((const __CFDictionary *)v9, ValueAtIndex, &v16),
                v21[0] = v16,
                v21[1] = v17,
                v20[0] = v18,
                v20[1] = v19,
                _LSVersionNumberCompare(v21, v20) != 1))
          {
            if (!CFEqual(ValueAtIndex, CFSTR("ppc")) && !CFEqual(ValueAtIndex, CFSTR("ppc64")))
            {
              switch(v7)
              {
                case 12:
                  if (CFEqual(ValueAtIndex, CFSTR("armv6")))
                    continue;
                  v14 = CFEqual(ValueAtIndex, CFSTR("armv7"));
                  goto LABEL_25;
                case 16777228:
                  if (CFEqual(ValueAtIndex, CFSTR("armv6")) || CFEqual(ValueAtIndex, CFSTR("armv7")))
                    continue;
                  v14 = CFEqual(ValueAtIndex, CFSTR("arm64"));
LABEL_25:
                  if (v14)
                    continue;
                  break;
                case 16777223:
                  if (CFEqual(ValueAtIndex, CFSTR("i386")))
                    continue;
                  v14 = CFEqual(ValueAtIndex, CFSTR("x86_64"));
                  goto LABEL_25;
              }
            }
          }
          CFArrayRemoveValueAtIndex(MutableCopy, i - 2);
        }
      }

    }
    else
    {
      MutableCopy = 0;
    }
    objc_autoreleasePoolPop(v5);
  }
  else
  {
    MutableCopy = 0;
  }

  return MutableCopy;
}

void sub_1828BCA2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1828BCABC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id _LSPlistGetValueForKey(_LSDatabase *a1, unsigned int a2, NSString *a3, _LSPlistHint *a4)
{
  NSString *v6;
  NSData *v7;
  void *v8;

  v6 = a3;
  _LSPlistGet((uint64_t)a1, a2);
  v7 = (NSData *)objc_claimAutoreleasedReturnValue();
  _LSPlistDataGetValueForKey(v7, (uint64_t)v6, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

{
  NSString *v6;
  NSData *v7;
  void *v8;

  v6 = a3;
  _LSPlistGet((uint64_t)a1, a2);
  v7 = (NSData *)objc_claimAutoreleasedReturnValue();
  _LSPlistDataGetValueForKey(v7, (uint64_t)v6, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

void sub_1828BCB30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1828BCBB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

double _LSGetCurrentSystemVersion@<D0>(_OWORD *a1@<X8>)
{
  double result;
  __int128 v3;

  if (_LSGetCurrentSystemIOSSupportAndBuildVersions(LSVersionNumber *,LSVersionNumber *,__CFString const**,LSVersionNumber *,__CFString const**)::once != -1)
    dispatch_once(&_LSGetCurrentSystemIOSSupportAndBuildVersions(LSVersionNumber *,LSVersionNumber *,__CFString const**,LSVersionNumber *,__CFString const**)::once, &__block_literal_global_76);
  result = *(double *)&_LSGetCurrentSystemIOSSupportAndBuildVersions(LSVersionNumber *,LSVersionNumber *,__CFString const**,LSVersionNumber *,__CFString const**)::cachedSystemVersion;
  v3 = unk_1ECD29E60;
  *a1 = _LSGetCurrentSystemIOSSupportAndBuildVersions(LSVersionNumber *,LSVersionNumber *,__CFString const**,LSVersionNumber *,__CFString const**)::cachedSystemVersion;
  a1[1] = v3;
  return result;
}

id _LSBundleCopyArchitectures_Common(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  int *v7;
  int *i;
  int v9;
  const __CFString *v10;
  unsigned int v11;
  _QWORD v13[5];
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  __n128 (*v17)(__n128 *, __n128 *);
  void (*v18)(uint64_t);
  const char *v19;
  void *__p;
  void *v21;
  uint64_t v22;

  v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v14 = 0;
  v15 = &v14;
  v16 = 0x4812000000;
  v17 = __Block_byref_object_copy__9;
  v18 = __Block_byref_object_dispose__9;
  v19 = "";
  __p = 0;
  v21 = 0;
  v22 = 0;
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = ___ZL33_LSBundleCopyArchitectures_CommonPK12LSBundleDataP7NSArrayIP8NSStringE_block_invoke;
  v13[3] = &unk_1E1041C30;
  v13[4] = &v14;
  _LSEnumerateSliceMask(*(_WORD *)(a1 + 156), v13);
  v3 = v15[6];
  v4 = (uint64_t *)v15[7];
  v5 = 126 - 2 * __clz(((uint64_t)v4 - v3) >> 3);
  if (v4 == (uint64_t *)v3)
    v6 = 0;
  else
    v6 = v5;
  std::__introsort<std::_ClassicAlgPolicy,_LSBundleCopyArchitectures_Common(LSBundleData const*,NSArray<NSString *> *)::$_0 &,LSSliceData *,false>(v3, v4, v6, 1);
  v7 = (int *)v15[6];
  for (i = (int *)v15[7]; v7 != i; v7 += 2)
  {
    v9 = *v7;
    if (*v7 > 16777222)
    {
      switch(v9)
      {
        case 16777223:
          v10 = CFSTR("x86_64");
          goto LABEL_20;
        case 16777234:
          v10 = CFSTR("ppc64");
          goto LABEL_20;
        case 16777228:
          v10 = CFSTR("arm64");
          goto LABEL_20;
      }
    }
    else
    {
      switch(v9)
      {
        case 7:
          v10 = CFSTR("i386");
          goto LABEL_20;
        case 12:
          v11 = v7[1] - 6;
          if (v11 > 0xA || ((0x779u >> v11) & 1) == 0)
            continue;
          v10 = off_1E1041D18[v11];
          goto LABEL_20;
        case 18:
          v10 = CFSTR("ppc");
LABEL_20:
          objc_msgSend(v2, "addObject:", v10);
          break;
      }
    }
  }
  _Block_object_dispose(&v14, 8);
  if (__p)
  {
    v21 = __p;
    operator delete(__p);
  }
  return v2;
}

void sub_1828BCE24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  void *v21;

  _Block_object_dispose(&a14, 8);
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void _LSEnumerateSliceMask(unsigned __int16 a1, void *a2)
{
  void (**v3)(id, _QWORD, char *);
  __int16 *v4;
  BOOL v5;
  char v6;

  v3 = a2;
  v6 = 0;
  v4 = &_LSEnumerateSliceMask::flagsToTypes;
  do
  {
    while (((unsigned __int16)*v4 & a1) == 0)
    {
      v4 += 6;
      if (v4 == (__int16 *)&unk_1829FA9FC)
        goto LABEL_10;
    }
    v3[2](v3, *(_QWORD *)(v4 + 2), &v6);
    v4 += 6;
    if (v6)
      v5 = 1;
    else
      v5 = v4 == (__int16 *)&unk_1829FA9FC;
  }
  while (!v5);
LABEL_10:

}

void sub_1828BCEE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZL33_LSBundleCopyArchitectures_CommonPK12LSBundleDataP7NSArrayIP8NSStringE_block_invoke(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v3 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  v4 = (_QWORD *)v3[7];
  v5 = v3[8];
  if ((unint64_t)v4 >= v5)
  {
    v7 = v3[6];
    v8 = ((uint64_t)v4 - v7) >> 3;
    if ((unint64_t)(v8 + 1) >> 61)
      abort();
    v9 = v5 - v7;
    v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1))
      v10 = v8 + 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<os_eligibility_answer_t>>((uint64_t)(v3 + 8), v11);
    else
      v12 = 0;
    v13 = &v12[8 * v8];
    v14 = &v12[8 * v11];
    *(_QWORD *)v13 = a2;
    v6 = v13 + 8;
    v16 = (char *)v3[6];
    v15 = (char *)v3[7];
    if (v15 != v16)
    {
      do
      {
        v17 = *((_QWORD *)v15 - 1);
        v15 -= 8;
        *((_QWORD *)v13 - 1) = v17;
        v13 -= 8;
      }
      while (v15 != v16);
      v15 = (char *)v3[6];
    }
    v3[6] = v13;
    v3[7] = v6;
    v3[8] = v14;
    if (v15)
      operator delete(v15);
  }
  else
  {
    *v4 = a2;
    v6 = v4 + 1;
  }
  v3[7] = v6;
}

uint64_t _LSGetCPUType()
{
  if (_LSGetCPUType::once != -1)
    dispatch_once(&_LSGetCPUType::once, &__block_literal_global_37_0);
  return _LSGetCPUType::type;
}

void LSDBHeader::GetCurrentBuildVersion(_QWORD *a1@<X8>)
{
  void *v3;
  uint64_t v4;
  const char *v5;
  id v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  _LSGetCurrentSystemBuildVersionString();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    v6 = v3;
    v4 = objc_msgSend(objc_retainAutorelease(v3), "UTF8String");
    if (v4)
      v5 = (const char *)v4;
    else
      v5 = "";
    MEMORY[0x186DADE1C](a1, v5);
    v3 = v6;
  }

}

void sub_1828BD078(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

uint64_t _LSAuditTokenMayMapDatabase(uint64_t result)
{
  const audit_token_t *v1;
  BOOL v2;

  if (result)
  {
    v1 = (const audit_token_t *)result;
    v2 = 0;
    _LSIsAuditTokenSandboxed(result, 0, &v2);
    return !v2
        || _LSCheckEntitlementForAuditTokenWithDefault(v1, CFSTR("com.apple.private.coreservices.canmaplsdatabase"), 0);
  }
  return result;
}

void _LSIsAuditTokenSandboxed(uint64_t a1, _BYTE *a2, BOOL *a3)
{
  int v5;
  int v6;
  NSObject *v7;

  if (!a1)
    return;
  v5 = sandbox_check_by_audit_token();
  if (v5 < 0)
  {
    if (objc_msgSend((id)__LSDefaultsGetSharedInstance(), "isServer"))
    {
      v6 = *__error();
      _LSDefaultLog();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
        _LSIsAuditTokenSandboxed_cold_1(v6, v7);

    }
  }
  else if (!v5)
  {
    if (a2)
      *a2 = 0;
    if (a3)
      *a3 = 0;
    return;
  }
  if (a2)
    *a2 = 1;
  if (a3)
    *a3 = sandbox_container_path_for_audit_token() == 0;
}

BOOL _LSCheckEntitlementForAuditToken(const audit_token_t *a1, __CFString *a2)
{
  return _LSCheckEntitlementForAuditTokenWithDefault(a1, a2, 0);
}

id _LSCopyEntitlementValueForAuditToken(const audit_token_t *a1, __CFString *a2)
{
  void *v2;
  void *v4;
  __CFString *v5;
  void *v7;
  void *v8;

  v2 = 0;
  if (a1 && a2)
  {
    v4 = (void *)MEMORY[0x186DAE7A0]();
    v5 = objc_retainAutorelease(a2);
    if (!-[__CFString UTF8String](v5, "UTF8String"))
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "xpc_object_t _LSCopyEntitlementValueForAuditToken(const audit_token_t *, CFStringRef)");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "handleFailureInFunction:file:lineNumber:description:", v8, CFSTR("LSEntitlements.mm"), 1084, CFSTR("Couldn't get C string from entitlement name '%@'"), v5);

    }
    v2 = (void *)xpc_copy_entitlement_for_token();
    objc_autoreleasePoolPop(v4);
  }
  return v2;
}

void sub_1828BD300(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t _LSGetCurrentSystemBuildVersionString()
{
  if (_LSGetCurrentSystemIOSSupportAndBuildVersions(LSVersionNumber *,LSVersionNumber *,__CFString const**,LSVersionNumber *,__CFString const**)::once != -1)
    dispatch_once(&_LSGetCurrentSystemIOSSupportAndBuildVersions(LSVersionNumber *,LSVersionNumber *,__CFString const**,LSVersionNumber *,__CFString const**)::once, &__block_literal_global_76);
  return _LSGetCurrentSystemIOSSupportAndBuildVersions(LSVersionNumber *,LSVersionNumber *,__CFString const**,LSVersionNumber *,__CFString const**)::cachedBuildVersion;
}

void sub_1828BD570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1828BD688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, ...)
{
  void *v9;
  va_list va;

  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _LSExtensionsLog()
{
  if (_LSExtensionsLog_onceToken != -1)
    dispatch_once(&_LSExtensionsLog_onceToken, &__block_literal_global_5_0);
  return (id)_LSExtensionsLog_log;
}

void sub_1828BD77C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828BD938(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL _LSBundleCouldBeSelectedForActivityContinuation(void *a1, int a2, uint64_t a3, void *a4)
{
  id v7;
  id v8;
  _BOOL8 v9;
  uint64_t v10;
  _BOOL4 v11;
  void *v12;
  void *v13;
  void *v14;
  id *v15;
  unsigned int v16;
  NSObject *v17;
  int v19;
  void *v20;
  __int16 v21;
  id v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a4;
  v9 = 0;
  if (v7 && a2 && a3)
  {
    v10 = *(_QWORD *)(a3 + 172);
    v11 = (_LSBundleDataGetUnsupportedFormatFlag() & 0x400000) == 0;
    v9 = (v10 & 0x80) == 0 && v11;
    v12 = (void *)_CSStringCopyCFString();
    +[LSApplicationRestrictionsManager sharedInstance]();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", *(_QWORD *)(a3 + 416));
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    if (-[LSApplicationRestrictionsManager isRatingAllowed:](v13, v14))
    {
      +[LSApplicationRestrictionsManager sharedInstance]();
      v15 = (id *)objc_claimAutoreleasedReturnValue();
      v16 = -[LSApplicationRestrictionsManager isApplicationRestricted:checkFlags:](v15, v12, *(_QWORD *)(a3 + 172));

      if (!v16)
      {
LABEL_14:

        goto LABEL_15;
      }
    }
    else
    {

    }
    _LSDefaultLog();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      v19 = 138412546;
      v20 = v12;
      v21 = 2112;
      v22 = v8;
      _os_log_impl(&dword_182882000, v17, OS_LOG_TYPE_DEFAULT, "%@ is currently restricted and cannot be returned for activity type %@.", (uint8_t *)&v19, 0x16u);
    }

    v9 = 0;
    goto LABEL_14;
  }
LABEL_15:

  return v9;
}

void sub_1828BDCC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

BOOL _LSPluginCheckExtensionPoint(void *a1, unsigned int a2, uint64_t a3, _QWORD *a4)
{
  _LSDatabase *v7;
  int v8;
  _BOOL8 v9;
  id v10;
  NSObject *v11;
  void *v13;
  id v14;
  uint8_t buf[4];
  void *v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  id v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = _LSExtensionPointFindWithStringID(v7, *(unsigned int *)(a3 + 180), *(unsigned int *)(a3 + 20), 0, 0, 0);
  v14 = 0;
  v9 = _LSGetNSErrorFromOSStatusImpl(v8, &v14, (uint64_t)"_LSPluginCheckExtensionPoint", 1005);
  v10 = v14;
  if (!v9)
  {
    if ((*(_BYTE *)(a3 + 164) & 1) != 0
      && objc_msgSend((id)__LSDefaultsGetSharedInstance(), "isAppleInternal"))
    {
      _LSDefaultLog();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        _LSDatabaseGetNSStringFromString(v7);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138478339;
        v16 = v13;
        v17 = 2048;
        v18 = a2;
        v19 = 2112;
        v20 = v10;
        _os_log_error_impl(&dword_182882000, v11, OS_LOG_TYPE_ERROR, "Plugin %{private}@ (0x%llx) has a bad extension point identifier specified in its Info.plist: %@", buf, 0x20u);

      }
    }
    if (a4)
      *a4 = objc_retainAutorelease(v10);
  }

  return v9;
}

void sub_1828BE0CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t _LSPluginIsValid(void *a1, unsigned int a2, uint64_t a3, void *a4, char a5, const __CFString **a6)
{
  _LSDatabase *v11;
  uint64_t (**v12)(id, _QWORD, void *);
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  const __CFString *v20;
  NSObject *v21;
  int v23;
  void *v24;
  _BOOL4 v25;
  void *v26;
  void *v27;
  _LSPlistHint *v28;
  void *v29;
  void *v30;
  int v31;
  unsigned int *v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  int v39;
  void *v40;
  uint64_t v41;
  void *v42;
  void *v43;
  void *v44;
  NSObject *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  void *v49;
  NSObject *v50;
  uint64_t v51;
  void *v52;
  void *v53;
  id *v54;
  unsigned int v55;
  id v56;
  id v57;
  uint64_t v58;
  id v59;
  id v60;
  char v61;
  uint8_t buf[4];
  uint64_t v63;
  __int16 v64;
  id v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v11 = a1;
  v12 = a4;
  v61 = 0;
  if (!a3)
  {
    if (!a6)
      goto LABEL_15;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = CFSTR("No plugin data pointer");
LABEL_20:
    *a6 = v20;
    goto LABEL_21;
  }
  if (!*(_DWORD *)(a3 + 4))
  {
    if (a6)
      *a6 = CFSTR("No container set for plugin");
    _LSDefaultLog();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_182882000, v21, OS_LOG_TYPE_DEFAULT, "ERROR: No container set for plugin", buf, 2u);
    }

    goto LABEL_15;
  }
  v13 = _LSContainerGet();
  if (!v13)
  {
    if (!a6)
      goto LABEL_15;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = CFSTR("No container data for plugin");
    goto LABEL_20;
  }
  v14 = _LSContainerCheckState(v11, *(unsigned int *)(a3 + 4), v13, &v61, 0);
  if (!(_DWORD)v14)
  {
    if (v61 != 1)
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Container state is %i"), v61);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = v26;
      if (a6)
        *a6 = (const __CFString *)objc_retainAutorelease(v26);
      goto LABEL_7;
    }
    v23 = *(_DWORD *)(a3 + 168);
    v17 = (void *)_CSStringCopyCFString();
    if (_LSIsNewsWidgetBundleIdentifier(v17))
    {
      +[LSApplicationRestrictionsManager sharedInstance]();
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = -[LSApplicationRestrictionsManager isAppExtensionRestricted:]((_BOOL8)v24, v17);

      if (v25)
      {
        if (!a6)
          goto LABEL_16;
        v18 = 0;
        v19 = 0;
        v20 = CFSTR("News app extension is restricted");
        goto LABEL_20;
      }
    }
    else
    {
      if ((v23 & 8) != 0)
      {
        if (!a6)
          goto LABEL_16;
        v18 = 0;
        v19 = 0;
        v20 = CFSTR("Has override");
        goto LABEL_20;
      }
      if ((*(_BYTE *)(a3 + 164) & 2) != 0)
      {
        if (!a6)
          goto LABEL_16;
        v18 = 0;
        v19 = 0;
        v20 = CFSTR("Requires GC");
        goto LABEL_20;
      }
      if (v12)
      {
        _LSDatabaseGetNSStringFromString(v11);
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        _LSPlistGetDictionary(v11, *(_DWORD *)(a3 + 140), v28);
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        if (v27)
          v30 = v27;
        else
          v30 = v17;
        if ((((uint64_t (**)(id, void *, void *))v12)[2](v12, v30, v29) & 1) == 0)
        {
          if (a6)
            *a6 = CFSTR("Rejected by filter block");

          goto LABEL_16;
        }

      }
      v32 = (unsigned int *)(a3 + 224);
      v31 = *(_DWORD *)(a3 + 224);
      if (v31)
      {
        v33 = _LSBundleGet(v11, v31);
        v34 = v33;
        if (!v33)
        {
          _LSDefaultLog();
          v35 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
            _LSPluginIsValid_cold_1(a2, (unsigned int *)(a3 + 224), v35);

          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Invalid parent app %llx"), *v32);
          v36 = (void *)objc_claimAutoreleasedReturnValue();
          v37 = v36;
          if (a6)
            *a6 = (const __CFString *)objc_retainAutorelease(v36);

          goto LABEL_16;
        }
        v58 = *(_QWORD *)(v33 + 172);
        _LSDatabaseGetNSStringFromString(v11);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        if (_LSBundleDataIsInUnsupportedLocation((uint64_t)v11, v34))
        {
          if (!a6)
            goto LABEL_17;
          v19 = 0;
          v20 = CFSTR("Parent app is in an unsupported location");
          goto LABEL_20;
        }
        if ((v58 & 0x40000) != 0)
        {
          if (!a6)
            goto LABEL_17;
          v19 = 0;
          v20 = CFSTR("Parent app is a placeholder");
          goto LABEL_20;
        }
        if ((a5 & 1) == 0 && (v58 & 0x400000000000) != 0)
        {
          if (!a6)
            goto LABEL_17;
          v19 = 0;
          v20 = CFSTR("Parent app has a parallel placeholder");
          goto LABEL_20;
        }
        v38 = *(unsigned int *)(a3 + 20);
        if ((v38 | 2) != 2 && dyld_get_base_platform() != 2)
        {
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Plugin invalid plugin platform %d on platform %d"), v38, 2);
          v43 = (void *)objc_claimAutoreleasedReturnValue();
          v44 = v43;
          if (a6)
            *a6 = (const __CFString *)objc_retainAutorelease(v43);

          goto LABEL_17;
        }
        v39 = *(_DWORD *)(v34 + 180);
        if ((v39 & 0x2000000) != 0)
        {
          +[LSEligibilityPredicateEvaluator sharedCachingEligibilityPredicateEvaluator](LSEligibilityPredicateEvaluator, "sharedCachingEligibilityPredicateEvaluator");
          v40 = (void *)objc_claimAutoreleasedReturnValue();
          v41 = *v32;
          v60 = 0;
          objc_msgSend(v40, "evaluateBundle:bundleData:database:error:", v41, v34, v11, &v60);
          v42 = (void *)objc_claimAutoreleasedReturnValue();
          v56 = v60;
          if (v42)
          {
            if ((objc_msgSend(v42, "BOOLValue") & 1) == 0)
            {
              if (a6)
                *a6 = CFSTR("Parent app is ineligible");

              goto LABEL_17;
            }
          }
          else
          {
            _LSBindingLog();
            v45 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
            {
              v46 = *v32;
              *(_DWORD *)buf = 134218242;
              v63 = v46;
              v64 = 2112;
              v65 = v56;
              _os_log_impl(&dword_182882000, v45, OS_LOG_TYPE_ERROR, "Couldn't check eligibility of parent app %llx: %@", buf, 0x16u);
            }

          }
          v39 = *(_DWORD *)(v34 + 180);
        }
        if ((v39 & 0x4000000) != 0)
        {
          +[LSFeatureFlagPredicateEvaluator defaultEvaluator](LSFeatureFlagPredicateEvaluator, "defaultEvaluator");
          v47 = (void *)objc_claimAutoreleasedReturnValue();
          v48 = *v32;
          v59 = 0;
          objc_msgSend(v47, "evaluateBundle:bundleData:database:error:", v48, v34, v11, &v59);
          v49 = (void *)objc_claimAutoreleasedReturnValue();
          v57 = v59;
          if (v49)
          {
            if ((objc_msgSend(v49, "BOOLValue") & 1) == 0)
            {
              if (a6)
                *a6 = CFSTR("Parent app is disabled by feature flag");

              goto LABEL_17;
            }
          }
          else
          {
            _LSBindingLog();
            v50 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
            {
              v51 = *v32;
              *(_DWORD *)buf = 134218242;
              v63 = v51;
              v64 = 2112;
              v65 = v57;
              _os_log_impl(&dword_182882000, v50, OS_LOG_TYPE_ERROR, "Couldn't check feature flag of parent app %llx: %@", buf, 0x16u);
            }

          }
        }
        if ((v58 & 0x40000000000) == 0)
        {
          +[LSApplicationRestrictionsManager sharedInstance]();
          v52 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", *(_QWORD *)(v34 + 416));
          v53 = (void *)objc_claimAutoreleasedReturnValue();
          if (-[LSApplicationRestrictionsManager isRatingAllowed:](v52, v53))
          {
            +[LSApplicationRestrictionsManager sharedInstance]();
            v54 = (id *)objc_claimAutoreleasedReturnValue();
            v55 = -[LSApplicationRestrictionsManager isApplicationRestricted:](v54, v18);

            if (!v55)
              goto LABEL_44;
          }
          else
          {

          }
          if (!a6)
            goto LABEL_17;
          v19 = 0;
          v20 = CFSTR("Blocked by ManagedConfiguration");
          goto LABEL_20;
        }
LABEL_44:
        v19 = 1;
        goto LABEL_21;
      }
    }
    v18 = 0;
    goto LABEL_44;
  }
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("_LSContainerCheckState() returned %i"), v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = v15;
  if (a6)
    *a6 = (const __CFString *)objc_retainAutorelease(v15);
LABEL_7:

LABEL_15:
  v17 = 0;
LABEL_16:
  v18 = 0;
LABEL_17:
  v19 = 0;
LABEL_21:

  return v19;
}

void sub_1828BE7F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

BOOL _LSIsNewsWidgetBundleIdentifier(void *a1)
{
  id v1;
  void *v2;
  _BOOL8 v3;

  v1 = a1;
  v2 = v1;
  if (v1)
    v3 = objc_msgSend(v1, "caseInsensitiveCompare:", CFSTR("com.apple.news.widget")) == 0;
  else
    v3 = 0;

  return v3;
}

void sub_1828BE96C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828BEDF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1828BF144(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL isFeatureAllowed(void *a1)
{
  id v1;
  void *v2;
  int v3;

  v1 = a1;
  getSharedMCProfileConnection();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "effectiveBoolValueForSetting:", v1);

  return v3 != 2;
}

id getSharedMCProfileConnection()
{
  void *v0;
  NSObject *v1;

  objc_msgSend((Class)getMCProfileConnectionClass[0](), "sharedConnection");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v0)
  {
    _LSDefaultLog();
    v1 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
      getSharedMCProfileConnection_cold_1();

  }
  return v0;
}

id MCProfileConnectionFunction()
{
  return (id)classMCProfileConnection;
}

uint64_t MCFeatureSystemAppRemovalAllowedFunction()
{
  return constantMCFeatureSystemAppRemovalAllowed;
}

uint64_t computeIsApplicationRestrictedWithMCStateProvider(void *a1, void *a2, int a3)
{
  id v5;
  id v6;
  void *v7;
  int v8;
  void *v9;
  char v10;
  uint64_t v11;
  void *v12;

  v5 = a1;
  v6 = a2;
  if (!ManagedConfigurationLibrary_frameworkLibrary)
  {
    ManagedConfigurationLibrary_frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/ManagedConfiguration.framework/ManagedConfiguration", 2);
    if (!ManagedConfigurationLibrary_frameworkLibrary)
      goto LABEL_10;
  }
  if (objc_msgSend(v5, "isAllowlistEnabled"))
  {
    objc_msgSend(v5, "allowlistedBundleIDs");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "containsObject:", v6);

    if (!v8)
      goto LABEL_6;
  }
  objc_msgSend(v5, "restrictedBundleIDs");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "containsObject:", v6);

  if ((v10 & 1) != 0
    || a3 && _LSIsNewsBundleIdentifier(v6) && (v12 = (void *)getMCFeatureNewsAllowed[0](), !isFeatureAllowed(v12)))
  {
LABEL_6:
    v11 = 1;
  }
  else
  {
LABEL_10:
    v11 = 0;
  }

  return v11;
}

BOOL _LSIsNewsBundleIdentifier(void *a1)
{
  id v1;
  void *v2;
  _BOOL8 v3;

  v1 = a1;
  v2 = v1;
  if (v1)
    v3 = objc_msgSend(v1, "caseInsensitiveCompare:", CFSTR("com.apple.news")) == 0;
  else
    v3 = 0;

  return v3;
}

void sub_1828BF51C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id _LSLazyLoadObjectWithLock(id *a1, os_unfair_lock_s *a2, void *a3)
{
  void (**v5)(_QWORD);
  id v6;
  id v7;

  v5 = a3;
  os_unfair_lock_lock(a2);
  v6 = *a1;
  if (!v6)
  {
    v5[2](v5);
    v6 = (id)objc_claimAutoreleasedReturnValue();
    v7 = *a1;
    *a1 = v6;

  }
  os_unfair_lock_unlock(a2);

  return v6;
}

void sub_1828BF61C(_Unwind_Exception *a1)
{
  void *v1;
  os_unfair_lock_s *v2;

  os_unfair_lock_unlock(v2);

  _Unwind_Resume(a1);
}

void ___ZN14LaunchServices10DMFSupportL23addKnownPoliciesToCacheEP12NSDictionaryIP8NSStringP8NSNumberEb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;

  v6 = a2;
  v5 = a3;
  if (!objc_msgSend(v5, "integerValue"))
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", 0, v6);

}

void sub_1828BF718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t kTCCServiceUserTrackingFunction(void)
{
  return constantkTCCServiceUserTracking;
}

uint64_t MCFeatureIdentifierForAdvertisingAllowedFunction()
{
  return constantMCFeatureIdentifierForAdvertisingAllowed;
}

id ATTrackingEnforcementManagerFunction()
{
  return (id)classATTrackingEnforcementManager;
}

id _LSDatabaseGetNSStringFromString(_LSDatabase *a1)
{
  return (id)_CSStringCopyCFString();
}

BOOL _LSBundleDataIsInUnsupportedLocation(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 172);
  _LSContainerGet();
  return (v2 & 0x1000000040) != 0;
}

uint64_t MCFeatureNewsAllowedFunction()
{
  return constantMCFeatureNewsAllowed;
}

Class initMCProfileConnection()
{
  Class result;

  if (!ManagedConfigurationLibrary_frameworkLibrary)
    ManagedConfigurationLibrary_frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/ManagedConfiguration.framework/ManagedConfiguration", 2);
  result = objc_getClass("MCProfileConnection");
  classMCProfileConnection = (uint64_t)result;
  getMCProfileConnectionClass[0] = (uint64_t (*)())MCProfileConnectionFunction;
  return result;
}

uint64_t initMCFeatureMaximumAppsRating()
{
  void *v0;
  uint64_t result;

  v0 = (void *)ManagedConfigurationLibrary_frameworkLibrary;
  if (!ManagedConfigurationLibrary_frameworkLibrary)
  {
    v0 = dlopen("/System/Library/PrivateFrameworks/ManagedConfiguration.framework/ManagedConfiguration", 2);
    ManagedConfigurationLibrary_frameworkLibrary = (uint64_t)v0;
  }
  result = *(_QWORD *)dlsym(v0, "MCFeatureMaximumAppsRating");
  constantMCFeatureMaximumAppsRating = result;
  getMCFeatureMaximumAppsRating[0] = MCFeatureMaximumAppsRatingFunction;
  return result;
}

uint64_t initMCFeatureSystemAppRemovalAllowed()
{
  void *v0;
  uint64_t result;

  v0 = (void *)ManagedConfigurationLibrary_frameworkLibrary;
  if (!ManagedConfigurationLibrary_frameworkLibrary)
  {
    v0 = dlopen("/System/Library/PrivateFrameworks/ManagedConfiguration.framework/ManagedConfiguration", 2);
    ManagedConfigurationLibrary_frameworkLibrary = (uint64_t)v0;
  }
  result = *(_QWORD *)dlsym(v0, "MCFeatureSystemAppRemovalAllowed");
  constantMCFeatureSystemAppRemovalAllowed = result;
  getMCFeatureSystemAppRemovalAllowed[0] = MCFeatureSystemAppRemovalAllowedFunction;
  return result;
}

uint64_t ___ZL28_LSIsClaimedPackageExtensionP9LSContextPK10__CFString_block_invoke(uint64_t result, uint64_t a2, int a3, _BYTE *a4)
{
  uint64_t v6;

  if ((a3 & 3) == 2 && (a3 & 0xFFFFFFFC) != 0)
  {
    v6 = result;
    result = _LSClaimGet();
    if (result)
    {
      if ((*(_BYTE *)(result + 8) & 8) != 0)
      {
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 8) + 24) = 1;
        *a4 = 1;
      }
    }
  }
  return result;
}

uint64_t LaunchServices::URLPropertyProvider::prepareValues(void *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void **a7)
{
  void *v11;
  id v12;
  char *v13;
  void *v14;
  char v15;
  FSMimicPopulator *v16;
  id *p_obj;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  FSMimicPopulator *v24;
  uint64_t (*v25)(FSMimicPopulator *, uint64_t, uint64_t, _BYTE *, id *);
  char v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  id *v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  void *v36;
  uint64_t *v37;
  uint64_t v38;
  int v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  uint64_t v45;
  void *v47;
  id v48;
  id *v49;
  const void *v50;
  id v51;
  id v54;
  id v55;
  _QWORD v56[7];
  void (*v57[5])(_QWORD, _QWORD);
  _QWORD v58[5];
  id v59;
  id obj;
  void **v61[4];
  id v62;
  uint64_t v63;
  _BYTE v64[16];
  id v65;
  char v66;
  id v67;
  void **v68;
  id v69;
  char v70;
  id v71;
  id v72;
  id location;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  char v77;

  v74 = 0;
  v75 = &v74;
  v76 = 0x2020000000;
  v77 = 1;
  location = 0;
  v11 = (void *)MEMORY[0x186DAE7A0]();
  v72 = 0;
  v71 = 0;
  v68 = 0;
  v69 = 0;
  v70 = 0;
  v64[0] = 0;
  v66 = 0;
  v67 = 0;
  v63 = 0;
  if (objc_msgSend((id)__LSDefaultsGetSharedInstance(), "isServer"))
  {
    v62 = 0;
    objc_msgSend(a1, "getResourceValue:forKey:error:", &v62, CFSTR("_LSMimicKey"), 0);
    v12 = v62;
  }
  else
  {
    v12 = 0;
  }
  v61[0] = &v72;
  v61[1] = &location;
  v61[2] = a7;
  v61[3] = (void **)a1;
  v50 = a1;
  v13 = getenv("LS_FORCE_URL_PROPERTY_PREP_OOP");
  if (!v13)
  {
    if (!_LSCurrentProcessMayMapDatabase())
      goto LABEL_6;
LABEL_31:
    v16 = 0;
    goto LABEL_43;
  }
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v14, "BOOLValue");

  if ((v15 & 1) == 0)
    goto LABEL_31;
LABEL_6:
  v47 = v11;
  v48 = v12;
  if (a5 >= 1)
  {
    v51 = 0;
    v16 = 0;
    p_obj = &obj;
    if (!a7)
      p_obj = 0;
    v49 = p_obj;
    v18 = a3;
    v19 = a4;
    v20 = a5;
    while (1)
    {
      if (!*((_BYTE *)v75 + 24))
        goto LABEL_33;
      v21 = *v19;
      if (*(_QWORD *)(*v19 + 24))
      {
        v22 = *v18;
        if (!MEMORY[0x186DAD924](a2, *v18, &v63))
          break;
      }
LABEL_27:
      ++v19;
      ++v18;
      if (!--v20)
        goto LABEL_33;
    }
    if (v51)
    {
      if (v16)
      {
LABEL_15:
        v16 = v16;
        goto LABEL_21;
      }
    }
    else
    {
      v51 = objc_alloc_init(MEMORY[0x1E0C99E20]);
      if (v16)
        goto LABEL_15;
    }
    LaunchServices::URLPropertyProvider::prepareValues(__CFURL const*,__FileCache *,__CFString const* const*,void const**,long,void const*,__CFError **)::$_0::operator()(v61);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    if (v23)
      v24 = -[FSMimicPopulator initWithNode:]([FSMimicPopulator alloc], "initWithNode:", v23);
    else
      v24 = 0;

    v16 = v24;
    if (!v16)
    {
      *((_BYTE *)v75 + 24) = 0;
LABEL_26:

      goto LABEL_27;
    }
LABEL_21:
    v25 = *(uint64_t (**)(FSMimicPopulator *, uint64_t, uint64_t, _BYTE *, id *))(v21 + 24);
    if (a7)
      obj = location;
    v26 = v25(v16, a2, v22, v64, v49);
    if (a7)
      objc_storeStrong(&location, obj);
    *((_BYTE *)v75 + 24) = v26;
    objc_msgSend(v51, "addObject:", v22, v47);
    goto LABEL_26;
  }
  v16 = 0;
  v51 = 0;
LABEL_33:
  v12 = v48;
  if (*((_BYTE *)v75 + 24))
  {
    v11 = v47;
    if (objc_msgSend(v51, "count"))
    {
      v58[0] = 0;
      v58[1] = v58;
      v58[2] = 0x3032000000;
      v58[3] = __Block_byref_object_copy__48;
      v58[4] = __Block_byref_object_dispose__48;
      v59 = 0;
      v27 = MEMORY[0x1E0C809B0];
      v57[0] = (void (*)(_QWORD, _QWORD))MEMORY[0x1E0C809B0];
      v57[1] = (void (*)(_QWORD, _QWORD))3221225472;
      v57[2] = (void (*)(_QWORD, _QWORD))___ZN14LaunchServices19URLPropertyProviderL13prepareValuesEPK7__CFURLP11__FileCachePKPK10__CFStringPPKvlSC_PP9__CFError_block_invoke;
      v57[3] = (void (*)(_QWORD, _QWORD))&unk_1E103FB88;
      v57[4] = (void (*)(_QWORD, _QWORD))v58;
      +[_LSDService synchronousXPCProxyWithErrorHandler:]((uint64_t)_LSDReadService, v57);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v16)
      {
        LaunchServices::URLPropertyProvider::prepareValues(__CFURL const*,__FileCache *,__CFString const* const*,void const**,long,void const*,__CFError **)::$_0::operator()(v61);
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        if (v29)
          v16 = -[FSMimicPopulator initWithNode:]([FSMimicPopulator alloc], "initWithNode:", v29);
        else
          v16 = 0;

      }
      v16 = v16;
      -[FSMimicPopulator mimic](v16, "mimic");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend((id)__LSDefaultsGetSharedInstance(), "preferredLocalizations");
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      v56[0] = v27;
      v56[1] = 3221225472;
      v56[2] = ___ZN14LaunchServices19URLPropertyProviderL13prepareValuesEPK7__CFURLP11__FileCachePKPK10__CFStringPPKvlSC_PP9__CFError_block_invoke_2;
      v56[3] = &unk_1E1045858;
      v56[4] = &v74;
      v56[5] = v58;
      v56[6] = a2;
      objc_msgSend(v28, "getResourceValuesForKeys:mimic:preferredLocalizations:completionHandler:", v51, v30, v31, v56);

      _Block_object_dispose(v58, 8);
    }
  }
  else
  {
    v11 = v47;
  }

LABEL_43:
  if (a5 >= 1)
  {
    if (a7)
      v32 = &v55;
    else
      v32 = 0;
    do
    {
      if (!*((_BYTE *)v75 + 24))
        break;
      v33 = *a4;
      if (*(_QWORD *)(*a4 + 16))
      {
        v34 = *a3;
        if (!MEMORY[0x186DAD924](a2, *a3, &v63))
        {
          v35 = v12;
          if (v12)
          {
            v36 = v35;
            v37 = v75;
          }
          else
          {
            LaunchServices::URLPropertyProvider::prepareValues(__CFURL const*,__FileCache *,__CFString const* const*,void const**,long,void const*,__CFError **)::$_0::operator()(v61);
            v38 = objc_claimAutoreleasedReturnValue();
            v37 = v75;
            if (v38)
            {
              v36 = (void *)v38;
            }
            else
            {
              v36 = 0;
              *((_BYTE *)v75 + 24) = 0;
            }
          }
          if (*((_BYTE *)v37 + 24))
          {
            if (a7)
              v55 = location;
            v39 = (*(uint64_t (**)(void ***, void *, uint64_t, uint64_t, _BYTE *, id *))(v33 + 16))(&v68, v36, a2, v34, v64, v32);
            if (a7)
              objc_storeStrong(&location, v55);
            if (!v39)
              *((_BYTE *)v75 + 24) = 0;
          }

        }
      }
      ++a4;
      ++a3;
      --a5;
    }
    while (a5);
  }
  v40 = v72;
  v41 = v72;
  if (v41 && os_unfair_lock_trylock((os_unfair_lock_t)&LaunchServices::URLPropertyProvider::reusableNodeLock))
  {
    if (!LaunchServices::URLPropertyProvider::reusableNode)
    {
      objc_msgSend(v41, "prepareForReuse");
      objc_storeStrong((id *)&LaunchServices::URLPropertyProvider::reusableNode, v40);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)&LaunchServices::URLPropertyProvider::reusableNodeLock);
  }

  v42 = v72;
  v72 = 0;

  if (a7 && !*((_BYTE *)v75 + 24))
  {
    v54 = location;
    LaunchServices::URLPropertyProvider::normalizeError(v50, 0, &v54);
    objc_storeStrong(&location, v54);
    *a7 = location;
  }

  if (v66)
  if (v68 && v70)
    _LSContextDestroy(v68);
  v43 = v69;
  v68 = 0;
  v69 = 0;

  v70 = 0;
  v44 = v71;
  v71 = 0;

  objc_autoreleasePoolPop(v11);
  v45 = *((unsigned __int8 *)v75 + 24);

  _Block_object_dispose(&v74, 8);
  return v45;
}

void sub_1828C02B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,id a35)
{
  void *v35;
  uint64_t v36;

  _Block_object_dispose(&a30, 8);
  LaunchServices::URLPropertyProvider::State::~State((id *)(v36 - 240));
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)(v36 - 192));

  _Block_object_dispose((const void *)(v36 - 136), 8);
  _Unwind_Resume(a1);
}

id LaunchServices::URLPropertyProvider::prepareValues(__CFURL const*,__FileCache *,__CFString const* const*,void const**,long,void const*,__CFError **)::$_0::operator()(void ***a1)
{
  void *v2;
  void **v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  FSNode *v10;
  void **v11;
  id *v12;
  uint64_t v13;
  void *v14;
  id obj;

  v2 = **a1;
  if (v2)
    return v2;
  v3 = a1[3];
  if (os_unfair_lock_trylock((os_unfair_lock_t)&LaunchServices::URLPropertyProvider::reusableNodeLock))
  {
    if (LaunchServices::URLPropertyProvider::reusableNode)
    {
      v4 = (id)LaunchServices::URLPropertyProvider::reusableNode;
      v5 = (void *)LaunchServices::URLPropertyProvider::reusableNode;
      LaunchServices::URLPropertyProvider::reusableNode = 0;

      os_unfair_lock_unlock((os_unfair_lock_t)&LaunchServices::URLPropertyProvider::reusableNodeLock);
      v6 = (void *)objc_msgSend(v4, "initWithURL:flags:error:", v3, 64, 0);
      v7 = v6;
      if (v6)
        v8 = v6;

      goto LABEL_9;
    }
    os_unfair_lock_unlock((os_unfair_lock_t)&LaunchServices::URLPropertyProvider::reusableNodeLock);
  }
  v7 = 0;
LABEL_9:
  v9 = **a1;
  **a1 = v7;

  v2 = **a1;
  if (!v2)
  {
    v10 = [FSNode alloc];
    v11 = a1[3];
    if (a1[2] && (v12 = a1[1]) != 0)
    {
      obj = *v12;
      v13 = -[FSNode initWithURL:flags:error:](v10, "initWithURL:flags:error:", v11, 64, &obj);
      objc_storeStrong(v12, obj);
    }
    else
    {
      v13 = -[FSNode initWithURL:flags:error:](v10, "initWithURL:flags:error:", v11, 64, 0);
    }
    v14 = **a1;
    **a1 = (void *)v13;

    v2 = **a1;
  }
  return v2;
}

void sub_1828C05BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t LaunchServices::URLPropertyProvider::prepareTypeIdentifierAndObjectValue(id *a1, uint64_t a2, uint64_t a3, const void *a4, uint64_t a5, _QWORD *a6)
{
  _LSDServiceDomain *v12;
  LSContext *v13;
  uint64_t v14;
  _LSDServiceDomain *v15;
  uint64_t v16;
  id v17;
  void *v18;
  uint64_t v19;
  LaunchServices::URLPropertyProvider *v20;
  id UTTypeClass;
  void *v22;
  void *v23;
  void *v24;
  uint64_t result;
  _BYTE v26[16];
  id v27;
  char v28;
  id v29[2];

  +[_LSDServiceDomain defaultServiceDomain]();
  v12 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
  v13 = (LSContext *)LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)a1, v12, 0);

  if (!v13)
  {
    if (a6)
    {
      +[_LSDServiceDomain defaultServiceDomain]();
      v15 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
      v16 = LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)a1, v15, 0);

      if (v16)
        v17 = 0;
      else
        v17 = objc_retainAutorelease(a1[3]);
      result = 0;
      *a6 = v17;
      return result;
    }
    return 0;
  }
  if (!*(_BYTE *)(a5 + 32))
  {
LABEL_11:
    LaunchServices::TypeEvaluator::TypeEvaluator(v29, a2);
    LaunchServices::TypeEvaluator::evaluateType((uint64_t)v29, (void **)&v13->db, a6, (uint64_t)v26);
    std::__optional_storage_base<LaunchServices::TypeEvaluator::Result,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<LaunchServices::TypeEvaluator::Result,false>>(a5, (uint64_t)v26);
    if (v28)

    if (*(_BYTE *)(a5 + 32))
      goto LABEL_14;
    return 0;
  }
  v14 = _UTTypeGet();
  *(_QWORD *)(a5 + 8) = v14;
  if (!v14)
  {
    if (*(_BYTE *)(a5 + 32))
    {

      *(_BYTE *)(a5 + 32) = 0;
    }
    goto LABEL_11;
  }
  if (!*(_BYTE *)(a5 + 32))
    goto LABEL_11;
LABEL_14:
  LaunchServices::TypeEvaluator::Result::getTypeIdentifier((id *)a5, v13);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = *MEMORY[0x1E0C9AC10];
  v20 = (LaunchServices::URLPropertyProvider *)CFEqual(a4, (CFTypeRef)*MEMORY[0x1E0C9AC10]);
  if ((_DWORD)v20)
  {
    UTTypeClass = LaunchServices::URLPropertyProvider::getUTTypeClass(v20);
    if (UTTypeClass)
    {
      v22 = UTTypeClass;
      if (!*(_DWORD *)a5
        || (objc_msgSend(UTTypeClass, "_constantTypeForURLPropertyProviderWithIdentifier:", v18),
            (v23 = (void *)objc_claimAutoreleasedReturnValue()) == 0))
      {
        LaunchServices::TypeEvaluator::Result::getTypeRecord((LaunchServices::TypeEvaluator::Result *)a5, v13);
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v22, "_typeForURLPropertyProviderWithTypeRecord:", v24);
        v23 = (void *)objc_claimAutoreleasedReturnValue();

      }
      MEMORY[0x186DAD930](a3, v19, v23);

    }
  }
  MEMORY[0x186DAD930](a3, *MEMORY[0x1E0C9B5E0], v18);

  return 1;
}

void sub_1828C0848(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t LaunchServices::TypeEvaluator::TypeEvaluator(uint64_t a1, void *a2)
{
  id v3;
  void *v5;
  void *v6;

  v3 = a2;
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = 0;
  if (!v3)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "LaunchServices::TypeEvaluator::TypeEvaluator(const __strong id<FSNodePropertyProviding> _Nonnull)");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("UTTypeEvaluator.mm"), 97, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("node != nil"));

  }
  return a1;
}

void sub_1828C0944(_Unwind_Exception *a1)
{
  id *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id LaunchServices::URLPropertyProvider::getUTTypeClass(LaunchServices::URLPropertyProvider *this)
{
  if (LaunchServices::URLPropertyProvider::getUTTypeClass(void)::once != -1)
    dispatch_once(&LaunchServices::URLPropertyProvider::getUTTypeClass(void)::once, &__block_literal_global_9_1);
  return (id)LaunchServices::URLPropertyProvider::getUTTypeClass(void)::result;
}

id LaunchServices::TypeEvaluator::Result::getTypeIdentifier(id *this, LSContext *a2)
{
  id v2;

  if (this[1])
    v2 = (id)_CSStringCopyCFString();
  else
    v2 = this[2];
  return v2;
}

void LaunchServices::TypeEvaluator::evaluateType(uint64_t a1@<X0>, void **a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  LaunchServices::TypeEvaluation::runEvaluator(a2, a1, a3, a4);
}

uint64_t LaunchServices::URLPropertyProvider::prepareIsPackageValue(id *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  _LSDServiceDomain *v10;
  LSContext *v11;
  int IsPackage;
  _QWORD *v13;
  uint64_t result;
  _LSDServiceDomain *v15;
  uint64_t v16;
  id v17;

  +[_LSDServiceDomain defaultServiceDomain]();
  v10 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
  v11 = (LSContext *)LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)a1, v10, 0);

  if (v11)
  {
    IsPackage = _LSNodeIsPackage(v11, a2, 0);
    v13 = (_QWORD *)MEMORY[0x1E0C9AE50];
    if (!IsPackage)
      v13 = (_QWORD *)MEMORY[0x1E0C9AE40];
    MEMORY[0x186DAD930](a3, *MEMORY[0x1E0C9B508], *v13);
    return 1;
  }
  else if (a6)
  {
    +[_LSDServiceDomain defaultServiceDomain]();
    v15 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
    v16 = LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)a1, v15, 0);

    if (v16)
      v17 = 0;
    else
      v17 = objc_retainAutorelease(a1[3]);
    result = 0;
    *a6 = v17;
  }
  else
  {
    return 0;
  }
  return result;
}

void sub_1828C0B10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t LaunchServices::URLPropertyProvider::prepareIsApplicationValue(id *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  int v10;
  _LSDServiceDomain *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t result;
  _LSDServiceDomain *v15;
  uint64_t v16;
  id v17;

  v10 = _LSGetBundleClassForNode(0, a2);
  if (v10 != 2)
  {
LABEL_4:
    v13 = (_QWORD *)MEMORY[0x1E0C9AE50];
    if (v10 != 2)
      v13 = (_QWORD *)MEMORY[0x1E0C9AE40];
    MEMORY[0x186DAD930](a3, *MEMORY[0x1E0C9B4D8], *v13);
    return 1;
  }
  +[_LSDServiceDomain defaultServiceDomain]();
  v11 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
  v12 = LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)a1, v11, 0);

  if (v12)
  {
    v10 = _LSGetBundleClassForNode(v12, a2);
    goto LABEL_4;
  }
  if (!a6)
    return 0;
  +[_LSDServiceDomain defaultServiceDomain]();
  v15 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
  v16 = LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)a1, v15, 0);

  if (v16)
    v17 = 0;
  else
    v17 = objc_retainAutorelease(a1[3]);
  result = 0;
  *a6 = v17;
  return result;
}

void sub_1828C0C3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t LaunchServices::URLPropertyProvider::prepareCanSetHiddenExtensionValue(LaunchServices::Database::Context *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v8;
  _LSDServiceDomain *v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;

  LaunchServices::URLPropertyProvider::getDisplayNameConstructor((uint64_t)a1, a2, a5, a6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v8)
  {
    +[_LSDServiceDomain defaultServiceDomain]();
    v9 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
    v10 = LaunchServices::Database::Context::_get(a1, v9, 0);

    v11 = objc_msgSend(v8, "canSetExtensionHiddenWithContext:", v10);
    v12 = (_QWORD *)MEMORY[0x1E0C9AE40];
    if (v11)
      v12 = (_QWORD *)MEMORY[0x1E0C9AE50];
    MEMORY[0x186DAD930](a3, *MEMORY[0x1E0C9ABF8], *v12);
  }
  else
  {
    MEMORY[0x186DAD930](a3, *MEMORY[0x1E0C9ABF8], *MEMORY[0x1E0C9AE40]);
  }

  return 1;
}

void sub_1828C0D24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828C0E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

uint64_t LaunchServices::URLPropertyProvider::prepareLocalizedNameValue(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  int v19;
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (_LSContextIsCurrentThreadInitializing())
  {
    _LSDefaultLog();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      objc_msgSend(a2, "URL");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      LaunchServices::URLPropertyProvider::prepareLocalizedNameValue(v12, (uint8_t *)&v19, v11);
    }
  }
  else
  {
    if (LaunchServices::URLPropertyProvider::shouldAvoidLocalizingNameBecauseIsInLightweightSystemSession(void)::onceToken != -1)
      dispatch_once(&LaunchServices::URLPropertyProvider::shouldAvoidLocalizingNameBecauseIsInLightweightSystemSession(void)::onceToken, &__block_literal_global_24);
    if (LaunchServices::URLPropertyProvider::shouldAvoidLocalizingNameBecauseIsInLightweightSystemSession(void)::result != 1)
    {
      LaunchServices::URLPropertyProvider::getDisplayNameConstructor(a1, (uint64_t)a2, a5, a6);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = v16;
      if (v16)
      {
        objc_msgSend(v16, "unlocalizedNameWithContextIfNeeded:", a1);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v14 = 0;
      }

      if (v14)
        goto LABEL_10;
LABEL_15:
      v15 = 0;
      goto LABEL_16;
    }
    _LSDefaultLog();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend(a2, "URL");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = 138477827;
      v20 = v13;
      _os_log_impl(&dword_182882000, v11, OS_LOG_TYPE_DEFAULT, "Not localizing name for %{private}@ because we are in the system session, which has no user preferences.", (uint8_t *)&v19, 0xCu);

    }
  }

  objc_msgSend(a2, "nameWithError:", a6);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v14)
    goto LABEL_15;
LABEL_10:
  MEMORY[0x186DAD930](a3, *MEMORY[0x1E0C9B580], v14);
  v15 = 1;
LABEL_16:

  return v15;
}

void sub_1828C1004(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id LaunchServices::URLPropertyProvider::getDisplayNameConstructor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id *v7;
  id v8;
  void *v9;

  v7 = (id *)(a3 + 40);
  v8 = objc_retainAutorelease(*(id *)(a3 + 40));
  if (!v8)
  {
    +[_LSDisplayNameConstructor displayNameConstructorWithContextIfNeeded:node:error:](_LSDisplayNameConstructor, "displayNameConstructorWithContextIfNeeded:node:error:", a1, a2, a4);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = v9;
    if (v8)
      objc_storeStrong(v7, v9);
  }
  return v8;
}

void ___ZN14LaunchServices19URLPropertyProviderL35prepareLocalizedNameDictionaryValueERNS_8Database7ContextEPU34objcproto23FSNodePropertyProviding11objc_objectP11__FileCachePK10__CFStringPNS0_5StateEPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;

  v10 = a2;
  v5 = a3;
  v6 = (void *)MEMORY[0x186DAE7A0]();
  objc_msgSend(v5, "unlocalizedNameWithContextIfNeeded:asIfShowingAllExtensions:", *(_QWORD *)(a1 + 48), MEMORY[0x1E0C9AAB0]);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "unlocalizedNameWithContextIfNeeded:asIfShowingAllExtensions:", *(_QWORD *)(a1 + 48), MEMORY[0x1E0C9AAA0]);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v7, "isEqual:", v8))
  {
    v9 = v7;

    v8 = v9;
  }
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v7, v10);
  objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v8, v10);

  objc_autoreleasePoolPop(v6);
}

void sub_1828C119C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1828C12B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1828C144C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1828C15E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828C1700(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1828C1790(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828C186C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

void _LSDNCWithCharacters(void *a1, void *a2)
{
  __CFString *v3;
  void (**v4)(id, const UniChar *, unint64_t);
  unint64_t v5;
  const UniChar *CharactersPtr;
  char *v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v3 = a1;
  v4 = a2;
  v5 = -[__CFString length](v3, "length");
  CharactersPtr = CFStringGetCharactersPtr(v3);
  if (CharactersPtr)
  {
    v4[2](v4, CharactersPtr, v5);
  }
  else if (v5 > 0xFF)
  {
    __p = 0;
    v9 = 0;
    v10 = 0;
    std::vector<unsigned short>::__vallocate[abi:nn180100](&__p, v5);
    v7 = (char *)v9;
    bzero(v9, 2 * v5);
    v9 = &v7[2 * v5];
    -[__CFString getCharacters:range:](v3, "getCharacters:range:", __p, 0, v5);
    v4[2](v4, (const UniChar *)__p, v5);
    if (__p)
    {
      v9 = __p;
      operator delete(__p);
    }
  }
  else
  {
    -[__CFString getCharacters:range:](v3, "getCharacters:range:", &__p, 0, v5);
    v4[2](v4, (const UniChar *)&__p, v5);
  }

}

void sub_1828C199C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

BOOL _LSContextIsCurrentThreadInitializing()
{
  return *(_DWORD *)getIsCurrentThreadInLSContextInitReference() != 0;
}

uint64_t LaunchServices::URLPropertyProvider::prepareApplicationFlags(id *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  _LSDServiceDomain *v10;
  LSContext *v11;
  int v12;
  BOOL v13;
  unsigned int clas;
  BOOL v15;
  int v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _LSDServiceDomain *v24;
  uint64_t v25;
  id v26;
  uint64_t result;
  id v28;
  LSBundleData *v29;

  +[_LSDServiceDomain defaultServiceDomain]();
  v10 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
  v11 = (LSContext *)LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)a1, v10, 0);

  if (!v11)
  {
    if (a6)
    {
      +[_LSDServiceDomain defaultServiceDomain]();
      v24 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
      v25 = LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)a1, v24, 0);

      if (v25)
      {
        v26 = 0;
LABEL_29:
        result = 0;
        *a6 = v26;
        return result;
      }
      v28 = objc_retainAutorelease(a1[3]);
LABEL_28:
      v26 = v28;
      goto LABEL_29;
    }
    return 0;
  }
  v29 = 0;
  v12 = _LSFindOrFindOrRegisterBundleNode(v11, a2, 0, 0x2000000u, 0, 0, &v29);
  if (v12)
    v13 = v12 == -10811;
  else
    v13 = 1;
  if (!v13)
  {
    if (a6)
    {
      _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], v12, (uint64_t)"prepareApplicationFlags", 994, 0);
      v28 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_28;
    }
    return 0;
  }
  if (!v29
    || ((clas = v29->_clas, v15 = clas > 0x10, v16 = (1 << clas) & 0x14004, !v15) ? (v17 = v16 == 0) : (v17 = 1), v17))
  {
    MEMORY[0x186DAD930](a3, *MEMORY[0x1E0C9ABD0], 0);
    v22 = *MEMORY[0x1E0C9ABC8];
    v23 = a3;
    v21 = 0;
  }
  else
  {
    v18 = *MEMORY[0x1E0C9AE50];
    v19 = *MEMORY[0x1E0C9AE40];
    if ((*(_QWORD *)(&v29->_clas + 1) & 0x40000) != 0)
      v20 = *MEMORY[0x1E0C9AE50];
    else
      v20 = *MEMORY[0x1E0C9AE40];
    MEMORY[0x186DAD930](a3, *MEMORY[0x1E0C9ABD0], v20);
    if ((*(_QWORD *)(&v29->_clas + 1) & 0x200000) != 0)
      v21 = v18;
    else
      v21 = v19;
    v22 = *MEMORY[0x1E0C9ABC8];
    v23 = a3;
  }
  MEMORY[0x186DAD930](v23, v22, v21);
  return 1;
}

void sub_1828C1C5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _LSFindOrFindOrRegisterBundleNode(LSContext *a1, void *a2, unsigned int *a3, unsigned int a4, FSNode *a5, unsigned int *a6, LSBundleData **a7)
{
  id v13;
  uint64_t v14;
  uint64_t v15;

  v13 = a2;
  if (objc_msgSend(v13, "canIssueIO"))
    v14 = _LSFindOrRegisterBundleNode(a1, v13, a3, a4, a5, a6, a7);
  else
    v14 = _LSBundleFindWithNode((uint64_t)a1, v13, a6, a7);
  v15 = v14;

  return v15;
}

void sub_1828C1D0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _LSFindOrRegisterBundleNode(LSContext *a1, void *a2, unsigned int *a3, unsigned int a4, FSNode *a5, unsigned int *a6, LSBundleData **a7)
{
  FSNode *v11;
  FSNode *v12;
  void *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  uint64_t v18;
  _BOOL4 v19;
  int v20;
  BOOL v21;
  id v22;
  uint64_t v23;
  _BOOL4 v24;
  void *v25;
  unsigned int v26;
  CFArrayRef v27;
  id v28;
  BOOL v29;
  id v30;
  void *v31;
  int v32;
  CFIndex Count;
  CFIndex i;
  void *v35;
  const void *ValueAtIndex;
  CFTypeID v37;
  BOOL v38;
  id v39;
  void *v40;
  unsigned int Generation;
  int v42;
  id v43;
  NSObject *v44;
  unsigned int v45;
  uint64_t v46;
  NSObject *v47;
  NSObject *v48;
  void *v49;
  __CFBundle *v50;
  CFURLRef v51;
  FSNode *v52;
  unsigned int v53;
  NSObject *v54;
  unsigned int v55;
  LSBundleData *v56;
  NSObject *v57;
  unint64_t v59;
  uint64_t v62;
  unsigned int v63;
  id v64;
  id v65;
  id v66;
  id v67;
  char v68;
  CFArrayRef theArray;
  id v70;
  unsigned int v71;
  LSBundleData *v72;
  unsigned int v73;
  _BYTE buf[12];
  __int16 v75;
  uint64_t v76;
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  v11 = a2;
  v12 = v11;
  v13 = 0;
  v73 = 0;
  v72 = 0;
  v71 = 0;
  theArray = 0;
  v70 = 0;
  v14 = 4294967246;
  v68 = 0;
  if (!a1 || !v11)
    goto LABEL_120;
  if (a3)
    v15 = *a3;
  else
    v15 = _LSGetBundleClassForNode((uint64_t)a1, v11);
  if (v15 == 11)
    v16 = a4 | 0x10000000;
  else
    v16 = a4;
  v17 = v15 > 0x10 || ((1 << v15) & 0x16804) == 0;
  if (v17 && (v16 & 0x10000000) == 0)
  {
    v20 = 0;
    v13 = 0;
    v14 = 4294956485;
    if ((v16 & 0x4000000) == 0)
      goto LABEL_103;
    goto LABEL_43;
  }
  v18 = _LSBundleFindWithNode((uint64_t)a1, v12, &v73, &v72);
  v14 = v18;
  if ((_DWORD)v18 == -9499)
  {
    v19 = 1;
  }
  else
  {
    if ((_DWORD)v18)
    {
      v13 = 0;
      goto LABEL_120;
    }
    v19 = _LSBundleNeedsRegistration(a1, v12, v16, v73, v72) != 0;
  }
  v13 = 0;
  v20 = 0;
  if (!a5 || !v19)
  {
LABEL_42:
    if ((v16 & 0x4000000) == 0)
      goto LABEL_103;
    goto LABEL_43;
  }
  if (!a1->db)
  {
    v13 = 0;
    v14 = 4294956479;
    goto LABEL_120;
  }
  v67 = 0;
  v21 = _LSContainerFindOrRegisterWithNode((id *)&a1->db, v12, v16, &v71, 0, &v70, &v67);
  v22 = v67;
  v13 = v22;
  if (!v21)
  {
    v14 = _LSGetOSStatusFromNSError(v22);
    if ((_DWORD)v14)
      goto LABEL_120;
  }
  v73 = 0;
  v72 = 0;
  v23 = _LSBundleFindWithNode((uint64_t)a1, v12, &v73, &v72);
  v14 = v23;
  if ((_DWORD)v23 == -9499)
  {
    v24 = 1;
  }
  else
  {
    if ((_DWORD)v23)
      goto LABEL_120;
    v24 = _LSBundleNeedsRegistration(a1, v12, v16, v73, v72) != 0;
  }
  if (!v72)
  {
    if (v24)
    {
      v59 = 0;
      goto LABEL_37;
    }
    goto LABEL_41;
  }
  if (!v24)
  {
LABEL_41:
    v20 = 0;
    goto LABEL_42;
  }
  v59 = *(_QWORD *)&v72->_maxSystemVersion._opaque[28];
  if ((*(_BYTE *)(&v72->_clas + 1) & 0x80) == 0)
    v16 |= 2u;
LABEL_37:
  v25 = (void *)MEMORY[0x186DAE7A0]();
  v26 = v71;
  v27 = theArray;
  v28 = v70;
  theArray = 0;
  if (v27)
    CFRelease(v27);
  v66 = 0;
  v29 = _LSRegisterBundleNode(a1, v26, v28, v12, v16, a5, &theArray, (const __CFArray **)&v68, (const __CFURL *)&v73, &v66);
  v30 = v66;
  v31 = v30;
  if (v29)
    v14 = 0;
  else
    v14 = _LSGetOSStatusFromNSError(v30);

  objc_autoreleasePoolPop(v25);
  if (!(_DWORD)v14)
  {
    if (theArray && (Count = CFArrayGetCount(theArray), Count >= 1))
    {
      for (i = 0; i != Count; ++i)
      {
        v35 = (void *)MEMORY[0x186DAE7A0]();
        LODWORD(v62) = 0;
        *(_QWORD *)buf = 0;
        if (!theArray
          || (ValueAtIndex = CFArrayGetValueAtIndex(theArray, i), v37 = CFURLGetTypeID(), ValueAtIndex)
          && v37
          && CFGetTypeID(ValueAtIndex) != v37)
        {
          ValueAtIndex = 0;
        }
        if (v68)
          v16 |= 6u;
        else
          v16 = v16 & 0xFFFFFFF9 | 4;
        v14 = FSNodeCreateWithURL((uint64_t)ValueAtIndex, 0, (id *)buf);
        if (!(_DWORD)v14)
        {
          v65 = 0;
          v38 = _LSRegisterBundleNode(a1, v71, v70, *(void **)buf, v16, a5, 0, 0, (const __CFURL *)&v62, &v65);
          v39 = v65;
          v40 = v39;
          if (v38)
            v14 = 0;
          else
            v14 = _LSGetOSStatusFromNSError(v39);

        }
        objc_autoreleasePoolPop(v35);
      }
    }
    else
    {
      v14 = 0;
    }
    if ((v16 & 0x3000000) == 0x2000000)
    {
      -[_LSDatabase store]((uint64_t)a1->db);
      Generation = CSStoreGetGeneration();
      v64 = 0;
      v42 = _LSContextUpdate((void **)&a1->db, 1, &v64);
      v43 = v64;
      if (v42)
      {
        _LSRegistrationLog();
        v44 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
        {
          -[_LSDatabase store]((uint64_t)a1->db);
          v45 = CSStoreGetGeneration();
          *(_DWORD *)buf = 134218240;
          *(_QWORD *)&buf[4] = Generation;
          v75 = 2048;
          v76 = v45;
          _os_log_impl(&dword_182882000, v44, OS_LOG_TYPE_DEFAULT, "LSFORBN: Caller wants reinitialization, updated store from generation %lu to %lu", buf, 0x16u);
        }

      }
      else
      {
        _LSRegistrationLog();
        v47 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_182882000, v47, OS_LOG_TYPE_ERROR, "LSFORBN: couldn't update context as asked", buf, 2u);
        }

        v14 = _LSGetOSStatusFromNSError(v43);
        if ((_DWORD)v14)
        {

          goto LABEL_120;
        }
      }
      v72 = (LSBundleData *)_LSBundleGet(a1->db, v73);
      if (!v72)
      {
        v63 = 0;
        v62 = 0;
        if (_LSBundleFindWithNode((uint64_t)a1, v12, &v63, &v62))
        {
          _LSRegistrationLog();
          v48 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134217984;
            *(_QWORD *)&buf[4] = v73;
            _os_log_impl(&dword_182882000, v48, OS_LOG_TYPE_ERROR, "Couldn't refind bundle unit after registering %llx", buf, 0xCu);
          }

        }
        else if (*(_QWORD *)(v62 + 272) > v59)
        {
          _LSRegistrationLog();
          v54 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(_QWORD *)&buf[4] = v73;
            v75 = 2048;
            v76 = v63;
            _os_log_impl(&dword_182882000, v54, OS_LOG_TYPE_ERROR, "After registering bundle unit %llx and reinitializing context, couldn't find it, but did find bundle unit %llx on refetch-by-node; using that",
              buf,
              0x16u);
          }

          v73 = v63;
          v72 = (LSBundleData *)v62;
        }
      }

      v14 = 0;
    }
    else
    {
      v72 = 0;
    }
    v20 = 1;
    if ((v16 & 0x4000000) == 0)
    {
LABEL_103:
      if ((_DWORD)v14 && (_DWORD)v14 != -10654)
        goto LABEL_120;
      v55 = v73;
      v56 = v72;
      if ((_DWORD)v14 || !v73 || v72)
      {
        if ((_DWORD)v14)
          goto LABEL_116;
      }
      else
      {
        v56 = (LSBundleData *)_LSBundleGet(a1->db, v73);
        v72 = v56;
        v55 = v73;
      }
      if (!v55)
        goto LABEL_123;
      if (((v20 ^ 1 | ((v16 & 0x2000000) >> 25)) & 1) == 0)
      {
        _LSDefaultLog();
        v57 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG))
          _LSFindOrRegisterBundleNode_cold_1((uint64_t *)&v72, v16, v57);

        goto LABEL_116;
      }
      if (!v56)
      {
LABEL_123:
        v14 = 4294956482;
        goto LABEL_120;
      }
LABEL_116:
      if (a6)
        *a6 = v73;
      if (a7)
        *a7 = v72;
      goto LABEL_120;
    }
LABEL_43:
    if (!v73)
      goto LABEL_128;
    if (v72)
    {
      v32 = *((_BYTE *)&v72->_clas + 5) & 1;
    }
    else
    {
      *(_QWORD *)buf = 0;
      if (_LSContextInit((id *)buf))
      {
        v32 = 0;
      }
      else
      {
        v46 = _LSBundleGet(*(void **)buf, v73);
        v72 = (LSBundleData *)v46;
        if (v46)
        {
          v32 = *(_BYTE *)(v46 + 173) & 1;
          v72 = 0;
        }
        else
        {
          v32 = 0;
        }
        _LSContextDestroy((void **)buf);
      }

    }
    if (v32)
    {
LABEL_128:
      -[FSNode URL](v12, "URL");
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      v50 = (__CFBundle *)_CFBundleCreateWithExecutableURLIfLooksLikeBundle();

      if (v50)
      {
        v51 = CFBundleCopyBundleURL(v50);
        if (v51)
        {
          v52 = -[FSNode initWithURL:flags:error:]([FSNode alloc], "initWithURL:flags:error:", v51, 0, 0);
          if (v52)
          {
            v53 = _LSFindOrRegisterBundleNode(a1, v52, 0, v16 & 0xFBFFFFFF, 0, &v73, &v72);
            if (v53)
              v14 = v53;
            else
              v14 = 4294956642;
          }

          CFRelease(v51);
        }
        CFRelease(v50);
      }
    }
    goto LABEL_103;
  }
LABEL_120:

  if (theArray)
    CFRelease(theArray);

  return v14;
}

void sub_1828C2574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,CFTypeRef cf,void *a23)
{
  void *v23;
  void *v24;
  void *v25;

  if (cf)
    CFRelease(cf);

  _Unwind_Resume(a1);
}

id LaunchServices::TypeEvaluator::Result::getTypeRecord(LaunchServices::TypeEvaluator::Result *this, LSContext *a2)
{
  id v2;

  if (*(_DWORD *)this)
    v2 = -[LSRecord _initWithContext:tableID:unitID:]([_UTDeclaredTypeRecord alloc], "_initWithContext:tableID:unitID:", a2, a2->db->schema.utypeTable, *(unsigned int *)this);
  else
    v2 = -[_UTDynamicTypeRecord _initWithContext:dynamicUTI:]([_UTDynamicTypeRecord alloc], "_initWithContext:dynamicUTI:", a2, *((_QWORD *)this + 2));
  return v2;
}

void sub_1828C2754(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1828C2824(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _LSBundleNeedsRegistration(LSContext *a1, FSNode *a2, int a3, unsigned int a4, const LSBundleData *a5)
{
  FSNode *v9;
  uint64_t v10;
  FSNode *v11;
  int HasChanged;
  BOOL v14;
  uint64_t v15;
  NSObject *v16;
  int v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v9 = a2;
  v11 = v9;
  if (v9)
  {
    HasChanged = _LSNodeHasChanged(v9, v10, a4, (uint64_t)a5, 0);
    v14 = (a3 & 0x40000000) == 0 || HasChanged == 0;
    if ((a3 & 1) != 0 || !v14)
      goto LABEL_14;
  }
  else if ((a3 & 1) != 0)
  {
    goto LABEL_14;
  }
  if ((-[_LSDatabase isSeeded]((uint64_t)a1->db) & 1) != 0)
  {
    v15 = 0;
    goto LABEL_17;
  }
LABEL_14:
  getNeedsRegistrationLog();
  v16 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    v18 = 134217984;
    v19 = a4;
    _os_log_impl(&dword_182882000, v16, OS_LOG_TYPE_DEFAULT, "bundle 0x%llx needs registration", (uint8_t *)&v18, 0xCu);
  }

  v15 = 1;
LABEL_17:

  return v15;
}

void sub_1828C2964(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _LSNodeHasChanged(void *a1, uint64_t a2, unsigned int a3, uint64_t a4, _BYTE *a5)
{
  id v8;
  int v9;
  char v10;
  double v11;
  uint64_t v12;
  NSObject *v13;
  void *v14;
  void *v15;
  double v17;
  uint8_t buf[4];
  uint64_t v19;
  __int16 v20;
  void *v21;
  __int16 v22;
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v8 = a1;
  v17 = 0.0;
  v9 = objc_msgSend(v8, "getContentModificationDate:error:", &v17, 0);
  v10 = v9;
  if (v9)
  {
    v11 = v17;
    if (_LSBundleDataGetModTime(a4) == (int)v11)
    {
      v12 = 0;
      if (!a5)
        goto LABEL_11;
      goto LABEL_10;
    }
    getNeedsRegistrationLog();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", (double)(int)_LSBundleDataGetModTime(a4));
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", v17);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 134218498;
      v19 = a3;
      v20 = 2114;
      v21 = v14;
      v22 = 2114;
      v23 = v15;
      _os_log_impl(&dword_182882000, v13, OS_LOG_TYPE_DEFAULT, "bundle 0x%llx mod date changed from %{public}@ to %{public}@", buf, 0x20u);

    }
  }
  else
  {
    getNeedsRegistrationLog();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      v19 = a3;
      _os_log_impl(&dword_182882000, v13, OS_LOG_TYPE_DEFAULT, "bundle 0x%llx does not appear to exist anymore", buf, 0xCu);
    }
  }

  v12 = 1;
  if (a5)
LABEL_10:
    *a5 = v10;
LABEL_11:

  return v12;
}

void sub_1828C2B48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t _LSBundleDataGetModTime(uint64_t a1)
{
  return *(unsigned int *)(a1 + 196);
}

uint64_t _FSNodeGetTimestampValue(void *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v6;
  char v7;
  id v8;
  uint64_t v9;
  void *v10;
  id v12[2];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (*MEMORY[0x1E0C998E8] == a2 || *MEMORY[0x1E0C998D8] == a2 || *MEMORY[0x1E0C998C0] == a2)
  {
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    *(_OWORD *)v12 = 0u;
    v13 = 0u;
    objc_msgSend(a1, "URL");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = _CFURLCopyResourcePropertyValuesAndFlags() != 0;

    if ((_DWORD)v6)
    {
      if (a3)
        *a3 = 0;
    }
    else if (a4)
    {
      *a4 = objc_retainAutorelease(0);
    }

  }
  else
  {
    v12[0] = 0;
    v6 = objc_msgSend(a1, "getResourceValue:forKey:options:error:", v12, a2, 3, a4);
    v7 = v6 ^ 1;
    v8 = v12[0];
    if (!a3)
      v7 = 1;
    if ((v7 & 1) == 0)
    {
      if (v12[0])
      {
        objc_msgSend(v12[0], "timeIntervalSinceReferenceDate");
        *a3 = v9;
        v8 = v12[0];
      }
      else
      {
        *a3 = 0;
      }
    }

  }
  return v6;
}

void sub_1828C2D30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{

  _Unwind_Resume(a1);
}

uint64_t LaunchServices::URLPropertyProvider::prepareVolumeLocalizedNameValue(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  void *v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v21;
  uint64_t v22;
  _QWORD v23[2];

  v23[1] = *MEMORY[0x1E0C80C00];
  if ((objc_msgSend(a2, "canIssueIO") & 1) != 0)
  {
    objc_msgSend(a2, "volumeNodeWithFlags:error:", 16, a6);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = v9;
    if (v9)
    {
      v21 = 0;
      v11 = objc_msgSend(v9, "getResourceValue:forKey:options:error:", &v21, *MEMORY[0x1E0C99A70], 3, a6);
      if ((_DWORD)v11)
        MEMORY[0x186DAD930](a3, *MEMORY[0x1E0C9B700], v21);

    }
    else
    {
      v11 = 0;
    }
  }
  else
  {
    _LSDefaultLog();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      LaunchServices::URLPropertyProvider::prepareVolumeLocalizedNameValue(v12, v13, v14, v15, v16, v17, v18, v19);

    if (!a6)
      return 0;
    v22 = *MEMORY[0x1E0CB2938];
    v23[0] = CFSTR("can't provide with mimic");
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v23, &v22, 1);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], -50, (uint64_t)"prepareVolumeLocalizedNameValue", 860, v10);
    v11 = 0;
    *a6 = (id)objc_claimAutoreleasedReturnValue();
  }

  return v11;
}

void sub_1828C2EF8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828C2FA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

uint64_t LaunchServices::URLPropertyProvider::prepareIsApplicationMimic(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return _LSPrepareMimicForBundleClass(a1, a5);
}

uint64_t _LSPrepareMimicForBundleClass(void *a1, uint64_t a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  v3 = a1;
  if (_LSPrepareMimicForIsPackage(v3, a2))
  {
    v8[0] = sel_isResolvable;
    v8[1] = sel_pathWithError_;
    v8[2] = sel_getInodeNumber_error_;
    v4 = v3;
    v5 = 0;
    LOBYTE(v6) = 1;
    do
    {
      if ((_BYTE)v6)
        v6 = objc_msgSend(v4, "populateSimpleSelector:error:", v8[v5], a2);
      else
        v6 = 0;
      ++v5;
    }
    while (v5 != 3);

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

void sub_1828C307C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _LSPrepareMimicForIsPackage(void *a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  _QWORD v8[5];

  v8[0] = sel_isDirectory;
  v8[1] = sel_isVolume;
  v8[2] = sel_hasPackageBit;
  v8[3] = sel_extensionWithError_;
  v8[4] = sel_isAVCHDCollection;
  v3 = a1;
  v4 = 0;
  LOBYTE(v5) = 1;
  do
  {
    while (!(_BYTE)v5)
    {
      if (++v4 == 5)
      {

        goto LABEL_10;
      }
      LOBYTE(v5) = 0;
    }
    v5 = objc_msgSend(v3, "populateSimpleSelector:error:", v8[v4++], a2);
  }
  while (v4 != 5);

  if (v5)
  {
    v6 = objc_msgSend(v3, "populateHFSTypeAndCreatorWithError:", a2);
    goto LABEL_11;
  }
LABEL_10:
  v6 = 0;
LABEL_11:

  return v6;
}

void sub_1828C3184(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828C34B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t categorizeSelector(objc_selector *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  objc_class *v6;
  objc_method *InstanceMethod;
  char *v8;
  unsigned int NumberOfArguments;
  uint64_t v10;
  char *v12;
  _QWORD v13[2];
  const char *v14;
  SEL aSelector;

  v14 = (const char *)a1;
  os_unfair_lock_lock((os_unfair_lock_t)&categorizeSelector(objc_selector *)::categoryCacheMutex);
  v1 = categorizeSelector(objc_selector *)::categoryCache;
  if (!categorizeSelector(objc_selector *)::categoryCache)
  {
    v1 = operator new();
    *(_OWORD *)v1 = 0u;
    *(_OWORD *)(v1 + 16) = 0u;
    *(_DWORD *)(v1 + 32) = 1065353216;
    categorizeSelector(objc_selector *)::categoryCache = v1;
  }
  v2 = std::__hash_table<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::__unordered_map_hasher<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::hash<_opaque_pthread_t *>,std::equal_to<_opaque_pthread_t *>,true>,std::__unordered_map_equal<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::equal_to<_opaque_pthread_t *>,std::hash<_opaque_pthread_t *>,true>,std::allocator<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>>>::find<_opaque_pthread_t *>((_QWORD *)v1, &v14);
  if (!v2)
  {
    v3 = categorizeSelector(objc_selector *)::categoryCache;
    aSelector = v14;
    if (_lock_categorizeSelectorWithRuntime(objc_selector *)::onceToken != -1)
      dispatch_once(&_lock_categorizeSelectorWithRuntime(objc_selector *)::onceToken, &__block_literal_global_231);
    if (std::__hash_table<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::__unordered_map_hasher<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::hash<_opaque_pthread_t *>,std::equal_to<_opaque_pthread_t *>,true>,std::__unordered_map_equal<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::equal_to<_opaque_pthread_t *>,std::hash<_opaque_pthread_t *>,true>,std::allocator<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>>>::find<_opaque_pthread_t *>((_QWORD *)_lock_categorizeSelectorWithRuntime(objc_selector *)::knownExceptions, &aSelector))
    {
      v4 = 5;
    }
    else
    {
      NSStringFromSelector(aSelector);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = (objc_class *)objc_opt_class();
      InstanceMethod = class_getInstanceMethod(v6, aSelector);
      v8 = method_copyReturnType(InstanceMethod);
      NumberOfArguments = method_getNumberOfArguments(InstanceMethod);
      if (!strcmp(v8, "B") && NumberOfArguments == 2)
      {
        v4 = 0;
      }
      else if (!strcmp(v8, "@")
             && NumberOfArguments == 3
             && (objc_msgSend(v5, "hasSuffix:", CFSTR("WithError:")) & 1) != 0)
      {
        v4 = 1;
      }
      else
      {
        v4 = 6;
        if (!strcmp(v8, "B") && NumberOfArguments == 4)
        {
          if (objc_msgSend(v5, "hasSuffix:", CFSTR(":error:")))
          {
            v12 = method_copyArgumentType(InstanceMethod, 2u);
            if (!strcmp(v12, "^I"))
            {
              v4 = 2;
            }
            else if (!strcmp(v12, "^Q"))
            {
              v4 = 3;
            }
            else if (!strcmp(v12, "^d"))
            {
              v4 = 4;
            }
            else
            {
              v4 = 6;
            }
            if (v12)
              free(v12);
          }
          else
          {
            v4 = 6;
          }
        }
      }
      if (v8)
        free(v8);

    }
    v13[0] = v14;
    v13[1] = v4;
    v2 = std::__hash_table<std::__hash_value_type<objc_selector *,FSSelectorCategory>,std::__unordered_map_hasher<objc_selector *,std::__hash_value_type<objc_selector *,FSSelectorCategory>,std::hash<objc_selector *>,std::equal_to<objc_selector *>,true>,std::__unordered_map_equal<objc_selector *,std::__hash_value_type<objc_selector *,FSSelectorCategory>,std::equal_to<objc_selector *>,std::hash<objc_selector *>,true>,std::allocator<std::__hash_value_type<objc_selector *,FSSelectorCategory>>>::__emplace_unique_key_args<objc_selector *,std::pair<objc_selector *,FSSelectorCategory>>(v3, v13, v13);
  }
  v10 = v2[3];
  os_unfair_lock_unlock((os_unfair_lock_t)&categorizeSelector(objc_selector *)::categoryCacheMutex);
  return v10;
}

void sub_1828C37B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  if (v2)
    free(v2);

  os_unfair_lock_unlock((os_unfair_lock_t)&categorizeSelector(objc_selector *)::categoryCacheMutex);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<objc_selector *,FSSelectorCategory>,std::__unordered_map_hasher<objc_selector *,std::__hash_value_type<objc_selector *,FSSelectorCategory>,std::hash<objc_selector *>,std::equal_to<objc_selector *>,true>,std::__unordered_map_equal<objc_selector *,std::__hash_value_type<objc_selector *,FSSelectorCategory>,std::equal_to<objc_selector *>,std::hash<objc_selector *>,true>,std::allocator<std::__hash_value_type<objc_selector *,FSSelectorCategory>>>::__emplace_unique_key_args<objc_selector *,std::pair<objc_selector *,FSSelectorCategory>>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v8;
  v14 = a3[1];
  i[2] = *a3;
  i[3] = v14;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__rehash<true>(a1, v20);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *i = *v22;
LABEL_38:
    *v22 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v21 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v23 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9)
        v23 %= v9;
    }
    else
    {
      v23 &= v9 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1828C3A38(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1828C3AA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1828C3B18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828C3B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void LaunchServices::BindingEvaluation::addParentUTIClaims(LaunchServices::BindingEvaluation *this, LaunchServices::BindingEvaluation::State *a2)
{
  int v3;
  NSObject *v4;
  NSString *v5;
  __CFString *v6;
  NSObject *v7;
  NSObject *v8;
  unint64_t v9;
  NSString *v10;
  NSObject *v11;
  unint64_t v12;
  NSString *v13;
  const __CFString *v14;
  NSObject *v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD v18[5];
  uint8_t buf[4];
  unint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if ((*((_BYTE *)this + 117) & 1) != 0)
  {
    _LSBindingLog();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_182882000, v7, OS_LOG_TYPE_DEBUG, "Skipping parent UTI claims due to options", buf, 2u);
    }

    v6 = CFSTR("Skipping parent UTI claims due to options");
  }
  else
  {
    v3 = *((_DWORD *)this + 56);
    if (v3 == _UTTypeGetTypeWindowsExecutable(**(_LSDatabase ***)this))
    {
      _LSBindingLog();
      v4 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_182882000, v4, OS_LOG_TYPE_DEBUG, "Skipping parent UTI claims because the type is a Windows executable", buf, 2u);
      }

      v6 = CFSTR("Skipping parent UTI claims because the type is a Windows executable");
    }
    else
    {
      if (*((_QWORD *)this + 29))
      {
        _LSBindingLog();
        v8 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
        {
          v9 = *((_QWORD *)this + 27);
          *(_DWORD *)buf = 138412290;
          v20 = v9;
          _os_log_impl(&dword_182882000, v8, OS_LOG_TYPE_DEBUG, "Adding claims for parent UTIs of %@", buf, 0xCu);
        }

        LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)CFSTR("Adding claims for parent UTIs of %@"), v10, *((_QWORD *)this + 27));
        _UTTypeSearchConformsToTypes(**(_QWORD **)this, *((_DWORD *)this + 56), (uint64_t)LaunchServices::BindingEvaluation::searchParentUTIsForClaims, (uint64_t)this, 0);
      }
      else if (*((_BYTE *)this + 240))
      {
        _LSBindingLog();
        v11 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
        {
          v12 = *((_QWORD *)this + 27);
          *(_DWORD *)buf = 138412290;
          v20 = v12;
          _os_log_impl(&dword_182882000, v11, OS_LOG_TYPE_DEBUG, "Adding claims for parent UTIs of dynamic %@", buf, 0xCu);
        }

        LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)CFSTR("Adding claims for parent UTIs of dynamic %@"), v13, *((_QWORD *)this + 27));
        v14 = (const __CFString *)*((_QWORD *)this + 27);
        v18[0] = MEMORY[0x1E0C809B0];
        v18[1] = 3221225472;
        v18[2] = ___ZN14LaunchServices17BindingEvaluationL18addParentUTIClaimsERNS0_5StateE_block_invoke;
        v18[3] = &__block_descriptor_40_e22_v24__0__NSString_8_B16l;
        v18[4] = this;
        _UTDynamicEnumerateParentIdentifiers(v14, (uint64_t)v18);
      }
      _LSBindingLog();
      v15 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 23) - *((_QWORD *)this + 22)) >> 5);
        *(_DWORD *)buf = 134217984;
        v20 = v16;
        _os_log_impl(&dword_182882000, v15, OS_LOG_TYPE_DEBUG, "%llu bindings found", buf, 0xCu);
      }

      v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 23) - *((_QWORD *)this + 22)) >> 5);
      v6 = CFSTR("%llu bindings found");
    }
  }
  LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)v6, v5, v17);
}

uint64_t _UTTypeGetTypeWindowsExecutable(_LSDatabase *a1)
{
  return _UTTypeGetCachedType(a1, CFSTR("com.microsoft.windows-executable"), (unsigned int *)a1->schema._cache + 72);
}

void sub_1828C4194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, id a17)
{
  id *v17;
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a17);
  _Unwind_Resume(a1);
}

void sub_1828C4480(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828C471C(_Unwind_Exception *a1)
{
  void *v1;
  os_unfair_lock_s *v2;
  void *v3;

  os_unfair_lock_unlock(v2);
  _Unwind_Resume(a1);
}

id workspaceObserverInterface()
{
  if (workspaceObserverInterface_onceToken != -1)
    dispatch_once(&workspaceObserverInterface_onceToken, &__block_literal_global_74_1);
  return (id)workspaceObserverInterface_interface;
}

id installProgressInterface()
{
  if (installProgressInterface_onceToken != -1)
    dispatch_once(&installProgressInterface_onceToken, &__block_literal_global_44);
  return (id)installProgressInterface_interface;
}

void sub_1828C4DC8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t shouldConnectToLSD(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_opt_respondsToSelector() & 1) != 0
    || (objc_opt_respondsToSelector() & 1) != 0
    || (objc_opt_respondsToSelector() & 1) != 0
    || (objc_opt_respondsToSelector() & 1) != 0
    || (objc_opt_respondsToSelector() & 1) != 0
    || (objc_opt_respondsToSelector() & 1) != 0
    || (objc_opt_respondsToSelector() & 1) != 0
    || (objc_opt_respondsToSelector() & 1) != 0
    || (objc_opt_respondsToSelector() & 1) != 0
    || (objc_opt_respondsToSelector() & 1) != 0)
  {
    v2 = 1;
  }
  else
  {
    v2 = objc_opt_respondsToSelector() & 1;
  }

  return v2;
}

void performWithLSAWDistributedNotificationNameBasedOnObserverConformance(void *a1, void (*a2)(const __CFString *))
{
  id v3;

  v3 = a1;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    a2(CFSTR("com.lsinstallprogress.appcontrols.cancel"));
  if ((objc_opt_respondsToSelector() & 1) != 0)
    a2(CFSTR("com.lsinstallprogress.appcontrols.pause"));
  if ((objc_opt_respondsToSelector() & 1) != 0)
    a2(CFSTR("com.lsinstallprogress.appcontrols.prioritize"));
  if ((objc_opt_respondsToSelector() & 1) != 0)
    a2(CFSTR("com.lsinstallprogress.appcontrols.resume"));
  if ((objc_opt_respondsToSelector() & 1) != 0)
    a2(CFSTR("com.lsinstallprogress.networkusagechanged"));
  if ((objc_opt_respondsToSelector() & 1) != 0)
    a2(CFSTR("com.apple.LaunchServices.pluginsregistered"));
  if ((objc_opt_respondsToSelector() & 1) != 0)
    a2(CFSTR("com.apple.LaunchServices.pluginsunregistered"));
  if ((objc_opt_respondsToSelector() & 1) != 0)
    a2(CFSTR("com.apple.LaunchServices.pluginswillberemoved"));
  if ((objc_opt_respondsToSelector() & 1) != 0)
    a2(CFSTR("com.apple.LaunchServices.applicationStateChanged"));

}

void mutateSubscriberCountForNotificationName(const __CFString *a1, void *a2)
{
  uint64_t (**v3)(id, uint64_t);
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  __CFNotificationCenter *DistributedCenter;
  NSObject *v11;
  __CFNotificationCenter *v12;
  void *v13;
  void *v14;
  int v15;
  const __CFString *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (mutateSubscriberCountForNotificationName_onceToken != -1)
    dispatch_once(&mutateSubscriberCountForNotificationName_onceToken, &__block_literal_global_151);
  os_unfair_lock_lock((os_unfair_lock_t)&mutateSubscriberCountForNotificationName_notificationCountLock);
  objc_msgSend((id)mutateSubscriberCountForNotificationName_notificationSubscriberCounts, "objectForKey:", a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v4;
  if (v4)
    v6 = objc_msgSend(v4, "unsignedIntValue");
  else
    v6 = 0;
  v7 = v3[2](v3, v6);
  v8 = v7;
  if ((_DWORD)v6 != (_DWORD)v7)
  {
    if ((_DWORD)v6)
    {
      if (!(_DWORD)v7)
      {
        _LSInstallLog();
        v9 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          v15 = 138412290;
          v16 = a1;
          _os_log_impl(&dword_182882000, v9, OS_LOG_TYPE_DEFAULT, "unregistering for distributed notification %@ in this process", (uint8_t *)&v15, 0xCu);
        }

        DistributedCenter = CFNotificationCenterGetDistributedCenter();
        CFNotificationCenterRemoveObserver(DistributedCenter, +[LSApplicationWorkspace defaultWorkspace](LSApplicationWorkspace, "defaultWorkspace"), a1, 0);
      }
    }
    else
    {
      _LSInstallLog();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        v15 = 138412290;
        v16 = a1;
        _os_log_impl(&dword_182882000, v11, OS_LOG_TYPE_DEFAULT, "registering for distributed notification %@ in this process", (uint8_t *)&v15, 0xCu);
      }

      v12 = CFNotificationCenterGetDistributedCenter();
      CFNotificationCenterAddObserver(v12, +[LSApplicationWorkspace defaultWorkspace](LSApplicationWorkspace, "defaultWorkspace"), (CFNotificationCallback)LSApplicationWorkspaceNotificationCallback, a1, 0, CFNotificationSuspensionBehaviorDeliverImmediately);
    }
  }
  v13 = (void *)mutateSubscriberCountForNotificationName_notificationSubscriberCounts;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v8);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "setObject:forKey:", v14, a1);

  os_unfair_lock_unlock((os_unfair_lock_t)&mutateSubscriberCountForNotificationName_notificationCountLock);
}

uint64_t __subscribeToLSAWDistributedNotification_block_invoke(uint64_t a1, int a2)
{
  return (a2 + 1);
}

void sub_1828C52D8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1828C53F8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1828C54F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _LSInstallLog()
{
  if (_LSInstallLog_onceToken != -1)
    dispatch_once(&_LSInstallLog_onceToken, &__block_literal_global_7);
  return (id)_LSInstallLog_log;
}

void sub_1828C5B14(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id _LSProgressLog()
{
  if (_LSProgressLog_onceToken != -1)
    dispatch_once(&_LSProgressLog_onceToken, &__block_literal_global_9_0);
  return (id)_LSProgressLog_log;
}

void sub_1828C5DB4(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  objc_sync_exit(v1);
  _Block_object_dispose((const void *)(v2 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t _LSCheckMachPortAccessForAuditToken(uint64_t a1, void *a2)
{
  _BOOL8 v2;
  void *v5;

  v2 = 0;
  if (a1 && a2)
  {
    if (_LSGetAuditTokenForSelf::once != -1)
      dispatch_once(&_LSGetAuditTokenForSelf::once, &__block_literal_global_115);
    if (_LSGetAuditTokenForSelf::result == a1 && !_LSIsCurrentProcessSandboxed(0))
    {
      return 1;
    }
    else
    {
      v5 = (void *)MEMORY[0x186DAE7A0]();
      objc_msgSend(objc_retainAutorelease(a2), "UTF8String");
      v2 = sandbox_check_by_audit_token() == 0;
      objc_autoreleasePoolPop(v5);
    }
  }
  return v2;
}

uint64_t _LSIsCurrentProcessSandboxed(_BYTE *a1)
{
  __int16 v3;

  v3 = 0;
  if (objc_msgSend((id)__LSDefaultsGetSharedInstance(), "isServer"))
  {
    v3 = 0;
    if (!a1)
      return HIBYTE(v3);
    goto LABEL_10;
  }
  if (_LSCheckCurrentProcessSandboxEveryTime(void)::once != -1)
    dispatch_once(&_LSCheckCurrentProcessSandboxEveryTime(void)::once, &__block_literal_global_128);
  if (_LSCheckCurrentProcessSandboxEveryTime(void)::result)
  {
    if (_LSGetAuditTokenForSelf::once != -1)
      dispatch_once(&_LSGetAuditTokenForSelf::once, &__block_literal_global_115);
    _LSIsAuditTokenSandboxed(_LSGetAuditTokenForSelf::result, (_BYTE *)&v3 + 1, (BOOL *)&v3);
    if (a1)
LABEL_10:
      *a1 = v3;
  }
  else
  {
    if (_LSIsCurrentProcessSandboxed::once != -1)
      dispatch_once(&_LSIsCurrentProcessSandboxed::once, &__block_literal_global_116);
    HIBYTE(v3) = _LSIsCurrentProcessSandboxed::sSandbox;
    LOBYTE(v3) = _LSIsCurrentProcessSandboxed::sAppSandbox;
    if (a1)
      goto LABEL_10;
  }
  return HIBYTE(v3);
}

void sub_1828C609C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1828C614C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828C61B4(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

id _LSDServiceGetXPCConnection(void *a1, uint64_t a2)
{
  id v4;
  void *v5;
  id v6;
  void *v7;
  void *v9;
  void *v10;
  _QWORD v11[5];
  id v12;
  void *v13;
  __int128 v14;
  uint64_t v15;
  id v16;
  __int128 v17;
  uint64_t v18;
  id v19;

  if ((void *)objc_opt_class() == a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSXPCConnection *_LSDServiceGetXPCConnection(__unsafe_unretained Class _Nonnull, _LSDServiceDomain *const __strong _Nonnull)");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "handleFailureInFunction:file:lineNumber:description:", v10, CFSTR("LSDService.mm"), 406, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("self != [_LSDService class]"));

  }
  if (_LSDServiceGetXPCConnection::once != -1)
    dispatch_once(&_LSDServiceGetXPCConnection::once, &__block_literal_global_42);
  -[_LSDServiceDomain connectionConfigurationStateForServiceClass:](a2, a1, (uint64_t)&v17);
  v4 = v19;
  v5 = (void *)_LSDServiceGetXPCConnection::serverConnections;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3321888768;
  v11[2] = ___LSDServiceGetXPCConnection_block_invoke_2;
  v11[3] = &unk_1E103E370;
  v11[4] = a2;
  v13 = a1;
  v14 = v17;
  v15 = v18;
  v6 = v4;
  v16 = v6;
  v12 = v6;
  LaunchServices::_LSLazyLoadObjectForKeyWithLock(v5, v6, (os_unfair_lock_s *)&_LSDServiceGetXPCConnection::serverConnectionsLock, v11);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

void sub_1828C6348(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id LaunchServices::_LSLazyLoadObjectForKeyWithLock(void *a1, void *a2, os_unfair_lock_s *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  void (**v11)(_QWORD);
  void *v12;

  v7 = a1;
  v8 = a2;
  v9 = v7;
  v10 = v8;
  v11 = a4;
  os_unfair_lock_lock(a3);
  objc_msgSend(v9, "objectForKey:", v10);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v12)
  {
    v11[2](v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "setObject:forKey:", v12, v10);
  }
  os_unfair_lock_unlock(a3);

  return v12;
}

void sub_1828C6454(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  os_unfair_lock_s *v3;
  void *v4;
  void *v5;

  os_unfair_lock_unlock(v3);

  _Unwind_Resume(a1);
}

void ___ZL30_LSPlistCreateTransformedValueP11objc_objectPFP8NSStringS2_PbES3__block_invoke_4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  id v8;

  v5 = a2;
  v6 = a3;
  (*(void (**)(id, uint64_t))(a1 + 48))(v5, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  v8 = (id)objc_claimAutoreleasedReturnValue();

  if (_NSIsNSString())
  {
    (*(void (**)(id, uint64_t))(a1 + 48))(v6, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
    v7 = objc_claimAutoreleasedReturnValue();

    v6 = (id)v7;
  }
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKey:", v6, v8);

}

void sub_1828C652C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1828C6728(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828C69D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1828C6B7C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_1828C6D64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location, id a16)
{
  void *v16;
  void *v17;
  void *v18;
  id *v19;
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a16);

  _Unwind_Resume(a1);
}

void sub_1828C6F60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

void sub_1828C757C(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1828C764C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828C7728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

uint64_t LaunchServices::BindingEvaluation::compareBindings(LaunchServices::BindingEvaluation *this, LaunchServices::BindingEvaluation::State *a2, const LaunchServices::BindingEvaluation::ExtendedBinding *a3, const LaunchServices::BindingEvaluation::ExtendedBinding *a4)
{
  int v7;
  const LaunchServices::BindingEvaluation::ExtendedBinding *v8;
  uint64_t v9;
  _BOOL4 v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  _BOOL4 v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  BOOL v25;
  _BOOL4 v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  char v34;
  void *v35;
  uint64_t v36;
  void *v37;
  BOOL v38;
  uint64_t v39;
  void *v40;
  const LaunchServices::BindingEvaluation::ExtendedBinding *v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  char v45;
  _OWORD v47[2];
  _OWORD v48[2];
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  if ((*((_BYTE *)this + 116) & 0x40) == 0
    || (v7 = LaunchServices::BindingEvaluation::compareVendors((uint64_t)a2, (uint64_t)a3),
        LaunchServices::BindingEvaluation::logComparison((uint64_t)this, (uint64_t)a2, (uint64_t)a3, (uint64_t)"vendor (prioritized is-Apple check)", v7), !v7)&& (v7 = LaunchServices::BindingEvaluation::compareBundleClass((uint64_t)a2, (uint64_t)a3), LaunchServices::BindingEvaluation::logComparison((uint64_t)this, (uint64_t)a2, (uint64_t)a3, (uint64_t)"system placeholder (prioritized is-Apple check)", v7), !v7))
  {
    if ((*((_BYTE *)a2 + 49) != 0) == (*((_BYTE *)a3 + 49) == 0))
    {
      v7 = 0;
    }
    else
    {
      v9 = *((_QWORD *)a2 + 3);
      if (v9)
        v10 = (*(_BYTE *)(v9 + 8) & 1) == 0;
      else
        v10 = 1;
      v11 = *((_QWORD *)a3 + 3);
      if (v11)
        LODWORD(v11) = *(_BYTE *)(v11 + 8) & 1;
      v12 = v10 | v11;
      v13 = (int)((v10 & v11) << 31) >> 31;
      if (v12 == 1)
        v7 = v13;
      else
        v7 = 1;
    }
    LaunchServices::BindingEvaluation::logComparison((uint64_t)this, (uint64_t)a2, (uint64_t)a3, (uint64_t)"Apple default", v7);
    if (!v7)
    {
      v14 = *((_QWORD *)a2 + 3);
      if (!v14
        || !*((_QWORD *)a3 + 3)
        || ((v15 = !_LSClaimFlagsAreWildcard(*(_DWORD *)(v14 + 8)),
             v16 = _LSClaimFlagsAreWildcard(*(_DWORD *)(*((_QWORD *)a3 + 3) + 8)),
             (v15 & v16) != 0)
          ? (LOBYTE(v7) = 1)
          : (LOBYTE(v7) = -1),
            v15 != v16))
      {
        LOBYTE(v7) = 0;
      }
      LaunchServices::BindingEvaluation::logComparison((uint64_t)this, (uint64_t)a2, (uint64_t)a3, (uint64_t)"wildcard", (char)v7);
    }
  }
  if (!(_BYTE)v7)
  {
    v17 = *((_QWORD *)a2 + 3);
    if (v17)
    {
      v18 = *((_QWORD *)a3 + 3);
      if (v18)
      {
        v19 = *(__int16 *)(v17 + 12);
        v20 = *(__int16 *)(v18 + 12);
        if (v19 > v20)
        {
          LOBYTE(v7) = 1;
LABEL_32:
          LaunchServices::BindingEvaluation::logComparison((uint64_t)this, (uint64_t)a2, (uint64_t)a3, (uint64_t)"handler rank", (char)v7);
          goto LABEL_33;
        }
        if (v19 < v20)
        {
          LOBYTE(v7) = -1;
          goto LABEL_32;
        }
      }
    }
    LOBYTE(v7) = 0;
    goto LABEL_32;
  }
LABEL_33:
  if (!(_BYTE)v7)
  {
    if (*((_BYTE *)a3 + 48))
      v21 = *((_BYTE *)a2 + 48) != 0;
    else
      v21 = 1;
    v22 = v21 - 1;
    if (*((_BYTE *)a2 + 48) != 0 && *((_BYTE *)a3 + 48) == 0)
      v7 = 1;
    else
      v7 = v22;
    LaunchServices::BindingEvaluation::logComparison((uint64_t)this, (uint64_t)a2, (uint64_t)a3, (uint64_t)"legacy claim", v7);
  }
  if (!(_BYTE)v7)
  {
    v23 = LaunchServices::BindingEvaluation::compareDirectoryClasses(LaunchServices::BindingEvaluation::State &,LaunchServices::BindingEvaluation::ExtendedBinding const&,LaunchServices::BindingEvaluation::ExtendedBinding const&)::priority[*(unsigned __int8 *)(*((_QWORD *)a2 + 1) + 148)];
    v24 = LaunchServices::BindingEvaluation::compareDirectoryClasses(LaunchServices::BindingEvaluation::State &,LaunchServices::BindingEvaluation::ExtendedBinding const&,LaunchServices::BindingEvaluation::ExtendedBinding const&)::priority[*(unsigned __int8 *)(*((_QWORD *)a3 + 1) + 148)];
    v25 = v23 >= v24;
    v26 = v23 > v24;
    if (v25)
      v7 = v26;
    else
      v7 = -1;
    LaunchServices::BindingEvaluation::logComparison((uint64_t)this, (uint64_t)a2, (uint64_t)a3, (uint64_t)"dir class", v7);
  }
  if ((*((_BYTE *)this + 116) & 0x40) == 0)
  {
    if (!(_BYTE)v7)
    {
      v27 = LaunchServices::BindingEvaluation::compareVendors((uint64_t)a2, (uint64_t)a3);
      LOBYTE(v7) = v27;
      LaunchServices::BindingEvaluation::logComparison((uint64_t)this, (uint64_t)a2, (uint64_t)a3, (uint64_t)"is Apple", v27);
    }
    if (!(_BYTE)v7)
    {
      v28 = LaunchServices::BindingEvaluation::compareBundleClass((uint64_t)a2, (uint64_t)a3);
      LOBYTE(v7) = v28;
      LaunchServices::BindingEvaluation::logComparison((uint64_t)this, (uint64_t)a2, (uint64_t)a3, (uint64_t)"system placeholder", v28);
    }
  }
  if (!(_BYTE)v7)
  {
    v29 = *((_QWORD *)a2 + 1);
    v30 = *((_QWORD *)a3 + 1);
    if (*(_DWORD *)(v29 + 300) == *(_DWORD *)(v30 + 300))
    {
      v31 = *(_OWORD *)(v29 + 44);
      v48[0] = *(_OWORD *)(v29 + 28);
      v48[1] = v31;
      v32 = *(_OWORD *)(v30 + 44);
      v47[0] = *(_OWORD *)(v30 + 28);
      v47[1] = v32;
      v33 = _LSVersionNumberCompare(v48, v47);
      if (v33 == -1)
        v34 = -1;
      else
        v34 = 0;
      if (v33 == 1)
        LOBYTE(v7) = 1;
      else
        LOBYTE(v7) = v34;
    }
    else
    {
      LOBYTE(v7) = 0;
    }
    LaunchServices::BindingEvaluation::logComparison((uint64_t)this, (uint64_t)a2, (uint64_t)a3, (uint64_t)"bundle version", (char)v7);
  }
  if (!(_BYTE)v7)
  {
    v35 = (void *)_CSStringCopyCFString();
    v36 = _CSStringCopyCFString();
    v37 = (void *)v36;
    if (v35)
      v38 = v36 == 0;
    else
      v38 = 1;
    if (v38)
    {
      LOBYTE(v7) = 0;
    }
    else
    {
      v39 = objc_msgSend(v35, "compare:", v36);
      if (v39 == -1)
        LOBYTE(v7) = -1;
      else
        LOBYTE(v7) = v39 == 1;
    }

    LaunchServices::BindingEvaluation::logComparison((uint64_t)this, (uint64_t)a2, (uint64_t)a3, (uint64_t)"desperation (bundle ID)", (char)v7);
  }
  if (!(_BYTE)v7)
  {
    LaunchServices::BindingEvaluation::getBindingPath((void ***)this, a2, v8);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    LaunchServices::BindingEvaluation::getBindingPath((void ***)this, a3, v41);
    v42 = objc_claimAutoreleasedReturnValue();
    v43 = (void *)v42;
    LOBYTE(v7) = 0;
    if (v40 && v42)
    {
      v44 = objc_msgSend(v40, "caseInsensitiveCompare:", v42);
      if (v44 == 1)
        v45 = -1;
      else
        v45 = 0;
      if (v44 == -1)
        LOBYTE(v7) = 1;
      else
        LOBYTE(v7) = v45;
    }

    LaunchServices::BindingEvaluation::logComparison((uint64_t)this, (uint64_t)a2, (uint64_t)a3, (uint64_t)"last resort", (char)v7);
  }
  return (char)v7;
}

void sub_1828C7D94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void LaunchServices::BindingEvaluation::logComparison(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  char v5;
  uint64_t v10;
  _LSBindingForLog *v11;
  _LSBindingForLog *v12;
  NSString *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;

  v5 = a5;
  switch(a5)
  {
    case -1:
      v10 = 60;
      break;
    case 0:
      return;
    case 1:
      v10 = 62;
      break;
    default:
      v10 = 63;
      break;
  }
  v11 = -[_LSBindingForLog initWithState:binding:]([_LSBindingForLog alloc], "initWithState:binding:", a1, a2);
  v12 = -[_LSBindingForLog initWithState:binding:]([_LSBindingForLog alloc], "initWithState:binding:", a1, a3);
  LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)CFSTR("%s: %@ %c %@"), v13, a4, v11, v10, v12);

  if (LaunchServices::BindingEvaluation::gIsReasonTrackingEnabled || (*(_BYTE *)(a1 + 118) & 2) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a4);
    v14 = objc_claimAutoreleasedReturnValue();
    v15 = *(void **)(a2 + 80);
    *(_QWORD *)(a2 + 80) = v14;

    *(_BYTE *)(a2 + 72) = v5;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a4);
    v16 = objc_claimAutoreleasedReturnValue();
    v17 = *(void **)(a3 + 80);
    *(_QWORD *)(a3 + 80) = v16;

    *(_BYTE *)(a3 + 72) = -v5;
  }
}

void sub_1828C7EE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t LaunchServices::BindingEvaluation::compareVendors(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2 && (*(_BYTE *)(v2 + 164) & 1) != 0)
  {
    v5 = *(_QWORD *)(a2 + 8);
    return !v5 || (*(_BYTE *)(v5 + 164) & 1) == 0;
  }
  v3 = *(_QWORD *)(a2 + 8);
  if (!v3 || (*(_BYTE *)(v3 + 164) & 1) == 0)
    return 0;
  return -1;
}

uint64_t LaunchServices::BindingEvaluation::compareBundleClass(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;

  v2 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 168);
  v3 = *(_DWORD *)(*(_QWORD *)(a2 + 8) + 168);
  if (v2 == 16 && v3 != 16)
    return -1;
  if (v2 != 16 && v3 == 16)
    return 1;
  if (v2 != 14 || v3 == 14)
    return v2 != 14 && v3 == 14;
  else
    return -1;
}

void sub_1828C8094(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1828C8174(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZL45_LSGetCurrentSystemIOSSupportAndBuildVersionsP15LSVersionNumberS0_PPK10__CFStringS0_S4__block_invoke()
{
  const __CFDictionary *v0;
  const __CFDictionary *v1;
  const void **v2;
  const void **v3;
  __CFString *Value;
  const __CFString *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  __CFString *v10;
  const __CFString *v11;
  id v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFDictionary *)_CFCopySystemVersionPlatformDictionary();
  v1 = v0;
  v2 = (const void **)MEMORY[0x1E0C9ABB0];
  v3 = (const void **)MEMORY[0x1E0C9AB90];
  if (v0)
  {
    Value = (__CFString *)CFDictionaryGetValue(v0, (const void *)*MEMORY[0x1E0C9ABB0]);
    if (Value)
    {
      _LSGetVersionFromString(Value, &v13);
      _LSGetCurrentSystemIOSSupportAndBuildVersions(LSVersionNumber *,LSVersionNumber *,__CFString const**,LSVersionNumber *,__CFString const**)::cachedSystemVersion = v13;
      unk_1ECD29E60 = v14;
    }
    v5 = (const __CFString *)CFDictionaryGetValue(v1, *v3);
    if (v5)
      _LSGetCurrentSystemIOSSupportAndBuildVersions(LSVersionNumber *,LSVersionNumber *,__CFString const**,LSVersionNumber *,__CFString const**)::cachedBuildVersion = (uint64_t)CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v5);
  }
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "contentsAtPath:", CFSTR("/private/preboot/Cryptexes/OS/SystemVersion.plist"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v7)
  {
    v12 = 0;
    objc_msgSend(MEMORY[0x1E0CB38B0], "propertyListWithData:options:format:error:", v7, 0, 0, &v12);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = v12;
    if (v8)
    {
      v10 = (__CFString *)CFDictionaryGetValue(v1, *v2);
      if (v10)
      {
        _LSGetVersionFromString(v10, &v13);
        _LSGetCurrentSystemIOSSupportAndBuildVersions(LSVersionNumber *,LSVersionNumber *,__CFString const**,LSVersionNumber *,__CFString const**)::cachedCryptexVersion = v13;
        unk_1EDCCD0C0 = v14;
      }
      v11 = (const __CFString *)CFDictionaryGetValue(v1, *v3);
      if (v11)
        _LSGetCurrentSystemIOSSupportAndBuildVersions(LSVersionNumber *,LSVersionNumber *,__CFString const**,LSVersionNumber *,__CFString const**)::cachedCryptexBuildVersion = (uint64_t)CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v11);
    }

  }
  if (v1)
    CFRelease(v1);
}

void sub_1828C85F8(_Unwind_Exception *a1)
{
  const void *v1;
  void *v2;
  void *v3;
  void *v4;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(a1);
}

void _LSGetVersionFromString(__CFString *a1@<X0>, _OWORD *a2@<X8>)
{
  void *v4;
  uint64_t v5;
  char buffer[1024];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  *a2 = 0u;
  a2[1] = 0u;
  if (a1)
  {
    if (CFStringGetCString(a1, buffer, 1024, 0x8000100u))
    {
      LaunchServices::VersionNumber::FromCString((uint64_t)buffer, a2);
    }
    else
    {
      v4 = (void *)MEMORY[0x186DAE7A0]();
      v5 = -[__CFString UTF8String](objc_retainAutorelease(a1), "UTF8String");
      if (v5)
        LaunchServices::VersionNumber::FromCString(v5, a2);
      objc_autoreleasePoolPop(v4);
    }
  }
}

uint64_t LaunchServices::VersionNumber::FromCString@<X0>(uint64_t this@<X0>, _OWORD *a2@<X8>)
{
  char *v3;
  int v4;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  uint64_t *v8;
  char v9;
  uint64_t v10;
  int v11;
  _QWORD v12[4];

  v12[3] = *MEMORY[0x1E0C80C00];
  *a2 = 0u;
  a2[1] = 0u;
  if (this)
  {
    v3 = (char *)(this - 1);
    do
    {
      v4 = *++v3;
      v5 = v4 - 48;
      if (v4)
        v6 = v5 > 9;
      else
        v6 = 0;
    }
    while (v6);
    v7 = 0;
    v12[0] = a2;
    v12[1] = (char *)a2 + 8;
    v12[2] = a2 + 1;
    do
    {
      v8 = (uint64_t *)v12[v7];
      v9 = *v3;
      if (*v3)
      {
        v10 = 0;
        ++v3;
        while (v9 != 46)
        {
          if ((v9 - 48) >= 0xAu)
          {
            *v8 = v10;
            return this;
          }
          v10 = (v9 - 48) + 10 * v10;
          v11 = *v3++;
          v9 = v11;
          if (!v11)
          {
            --v3;
            break;
          }
        }
      }
      else
      {
        v10 = 0;
      }
      *v8 = v10;
      ++v7;
    }
    while (v7 != 3);
  }
  return this;
}

void _LSRegisterFilePropertyProvider()
{
  char *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  char *__p;
  char *v13;
  char *v14;

  __p = 0;
  v13 = 0;
  v14 = 0;
  if (getPropertyTable(void)::onceToken != -1)
    dispatch_once(&getPropertyTable(void)::onceToken, &__block_literal_global_12_0);
  v0 = 0;
  v1 = *(_QWORD **)(LaunchServices::URLPropertyProvider::propertyTable + 8);
  v2 = *(_QWORD **)LaunchServices::URLPropertyProvider::propertyTable;
  do
  {
    if (v0 >= v14)
    {
      v3 = (v0 - __p) >> 3;
      if ((unint64_t)(v3 + 1) >> 61)
        abort();
      v4 = (v14 - __p) >> 2;
      if (v4 <= v3 + 1)
        v4 = v3 + 1;
      if ((unint64_t)(v14 - __p) >= 0x7FFFFFFFFFFFFFF8)
        v5 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v5 = v4;
      if (v5)
        v6 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<os_eligibility_answer_t>>((uint64_t)&v14, v5);
      else
        v6 = 0;
      v7 = &v6[8 * v3];
      *(_QWORD *)v7 = *v2;
      v0 = v7 + 8;
      v8 = v13;
      if (v13 != __p)
      {
        do
        {
          v9 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          *((_QWORD *)v7 - 1) = v9;
          v7 -= 8;
        }
        while (v8 != __p);
        v8 = __p;
      }
      __p = v7;
      v14 = &v6[8 * v5];
      if (v8)
        operator delete(v8);
    }
    else
    {
      *(_QWORD *)v0 = *v2;
      v0 += 8;
    }
    v13 = v0;
    v2 += 7;
  }
  while (v2 != v1);
  MEMORY[0x186DAD96C](LaunchServices::URLPropertyProvider::kLSPropertyProviderCallbacks, 0);
  v10 = *(_QWORD **)LaunchServices::URLPropertyProvider::propertyTable;
  v11 = *(_QWORD **)(LaunchServices::URLPropertyProvider::propertyTable + 8);
  while (v10 != v11)
  {
    MEMORY[0x186DAD978](*v10, v10[1], v10[5], v10[6], v10);
    v10 += 7;
  }
  if (__p)
    operator delete(__p);
}

void sub_1828C8B0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

Class initUMUserManager()
{
  Class result;

  if (!UserManagementLibrary_frameworkLibrary)
    UserManagementLibrary_frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/UserManagement.framework/UserManagement", 2);
  result = objc_getClass("UMUserManager");
  classUMUserManager = (uint64_t)result;
  getUMUserManagerClass[0] = (uint64_t (*)())UMUserManagerFunction;
  return result;
}

Class initUMUserManager_0()
{
  Class result;

  if (!UserManagementLibrary_frameworkLibrary_0)
    UserManagementLibrary_frameworkLibrary_0 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/UserManagement.framework/UserManagement", 2);
  result = objc_getClass("UMUserManager");
  classUMUserManager_0 = (uint64_t)result;
  getUMUserManagerClass_0 = (uint64_t (*)())UMUserManagerFunction_0;
  return result;
}

void sub_1828C8F4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1828C916C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1828C93A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1828C99B8(_Unwind_Exception *a1, uint64_t a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  void *v17;
  void *v18;
  va_list va;

  va_start(va, a17);

  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)va);
  _Unwind_Resume(a1);
}

void sub_1828C9C88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id UMUserManagerFunction(void)
{
  return (id)classUMUserManager;
}

{
  return (id)classUMUserManager;
}

{
  return (id)classUMUserManager;
}

void sub_1828C9E08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id UMUserPersonaFunction(void)
{
  return (id)classUMUserPersona;
}

uint64_t _LSCopyBundleURLForXPCConnection(void *a1, int a2)
{
  id v3;
  uint64_t v4;
  __int128 v6;

  v3 = a1;
  if (v3)
  {
    xpc_connection_get_audit_token();
    v4 = _LSCopyBundleURLForAuditToken(&v6, a2);
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

void sub_1828C9EB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828C9F34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t _LSCopyBundleURLForAuditToken(_OWORD *a1, int a2)
{
  pid_t v3;
  __int128 v4;
  uint64_t v5;
  CFURLRef v6;
  CFURLRef v7;
  const __CFURL *v8;
  const __CFURL *v9;
  const __CFString *v10;
  const __CFString *v11;
  audit_token_t atoken;
  pid_t pidp;

  if (!a1)
    return 0;
  if (a2 != 1)
    goto LABEL_6;
  if ((objc_msgSend((id)__LSDefaultsGetSharedInstance(), "isServer") & 1) != 0)
    goto LABEL_6;
  v3 = getpid();
  pidp = 0;
  v4 = a1[1];
  *(_OWORD *)atoken.val = *a1;
  *(_OWORD *)&atoken.val[4] = v4;
  audit_token_to_au32(&atoken, 0, 0, 0, 0, 0, &pidp, 0, 0);
  if (v3 != pidp || (_LSGetMainBundleURL(), (v5 = objc_claimAutoreleasedReturnValue()) == 0))
  {
LABEL_6:
    v6 = _LSCopyExecutableURLForAuditToken();
    if (v6)
    {
      v7 = v6;
      v8 = (const __CFURL *)_CFBundleCopyBundleURLForExecutableURL();
      v9 = v8;
      if (v8)
      {
        v10 = CFURLCopyPathExtension(v8);
        v11 = v10;
        if (v10)
        {
          if (CFStringGetLength(v10) <= 0)
          {
            CFRelease(v11);
          }
          else
          {
            v5 = (uint64_t)CFRetain(v9);
            CFRelease(v11);
            if (v5)
              goto LABEL_15;
          }
        }
      }
      v5 = (uint64_t)CFRetain(v7);
      if (!v9)
      {
LABEL_16:
        CFRelease(v7);
        return v5;
      }
LABEL_15:
      CFRelease(v9);
      goto LABEL_16;
    }
    return 0;
  }
  return v5;
}

void sub_1828CA074(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;
  const void *v3;

  CFRelease(v3);
  CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

id _LSGetMainBundleURL()
{
  if (_LSGetMainBundleURL::once != -1)
    dispatch_once(&_LSGetMainBundleURL::once, &__block_literal_global_26_0);
  return (id)_LSGetMainBundleURL::result;
}

CFURLRef _LSCopyExecutableURLForAuditToken()
{
  _OWORD *v0;
  __int128 v1;
  const __CFAllocator *v2;
  const __CFString *v3;
  CFURLRef v4;
  audit_token_t v6;
  char buffer[4096];
  uint64_t v8;

  v0 = (_OWORD *)MEMORY[0x1E0C80A78]();
  v8 = *MEMORY[0x1E0C80C00];
  if (!v0)
    return 0;
  v1 = v0[1];
  *(_OWORD *)v6.val = *v0;
  *(_OWORD *)&v6.val[4] = v1;
  if (proc_pidpath_audittoken(&v6, buffer, 0x1000u) < 1)
    return 0;
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v3 = CFStringCreateWithFileSystemRepresentation((CFAllocatorRef)*MEMORY[0x1E0C9AE00], buffer);
  if (!v3)
    return 0;
  v4 = CFURLCreateWithFileSystemPath(v2, v3, kCFURLPOSIXPathStyle, 0);
  CFRelease(v3);
  return v4;
}

void sub_1828CA1D0(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1828CA374(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828CA450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

uint64_t _LSServer_CopyLocalDatabase(_QWORD *a1)
{
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  _LSServer_DatabaseExecutionContext();
  v2 = (os_unfair_lock_s *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (v2)
  {
    -[LSDBExecutionContext assertActiveForThisThread](v2);
    -[LSDBExecutionContext getPerThreadDatabaseWithError:](v3, a1);
    v4 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v5 = _LSServer_SelfSessionKey();
    v4 = (uint64_t)_LSCopyLocalDatabase(v5, a1);
  }
  v6 = v4;

  return v6;
}

void sub_1828CA4D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id _LSServer_DatabaseExecutionContext()
{
  void *v0;
  void *v2;
  void *v3;

  v0 = (void *)sharedContext;
  if (!sharedContext)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "LSDBExecutionContext *_LSServer_DatabaseExecutionContext()");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("LSDatabase.mm"), 268, CFSTR("no execution context in server?"));

    v0 = (void *)sharedContext;
  }
  return v0;
}

void sub_1828CA578(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1828CA600(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1828CA658(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1828CA710(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828CA954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;
  os_unfair_lock_s *v24;
  os_unfair_lock_s *v25;
  void *v26;

  os_unfair_lock_unlock(v24);
  os_unfair_lock_unlock(v25);

  _Unwind_Resume(a1);
}

id LaunchServices::PerThreadContext::getDatabase(id *a1, _QWORD *a2)
{
  id v4;

  LaunchServices::PerThreadContext::initialize((LaunchServices::PerThreadContext *)a1);
  v4 = *a1;
  if (a2 && !v4)
  {
    *a2 = objc_retainAutorelease(a1[1]);
    v4 = *a1;
  }
  return v4;
}

void LaunchServices::PerThreadContext::initialize(LaunchServices::PerThreadContext *this)
{
  unint64_t v2;
  id v3;
  id v4;
  void *v5;
  void *v6;
  id v7;

  if (!*((_BYTE *)this + 17))
  {
    v2 = _LSServer_SelfSessionKey();
    v7 = 0;
    v3 = _LSCopyLocalDatabase(v2, &v7);
    v4 = v7;
    v5 = *(void **)this;
    *(_QWORD *)this = v3;

    v6 = (void *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v4;

    *((_BYTE *)this + 17) = 1;
  }
}

uint64_t _LSServer_SelfSessionKey()
{
  _LSAssertRunningInServer((uint64_t)"LSSessionKey _LSServer_SelfSessionKey()");
  if ((objc_msgSend((id)__LSDefaultsGetSharedInstance(), "isLightweightSystemServer") & 1) != 0)
    return 0x100000000;
  else
    return _CFGetEUID();
}

void _LSAssertRunningInServer(uint64_t a1)
{
  void *v2;
  id v3;

  if ((objc_msgSend((id)__LSDefaultsGetSharedInstance(), "isServer") & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _LSAssertRunningInServer(const char *)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("LSUtils.mm"), 1086, CFSTR("Must call %s from within the Launch Services daemon."), a1);

  }
}

void sub_1828CAB4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1828CACB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::__unordered_map_hasher<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::hash<_opaque_pthread_t *>,std::equal_to<_opaque_pthread_t *>,true>,std::__unordered_map_equal<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::equal_to<_opaque_pthread_t *>,std::hash<_opaque_pthread_t *>,true>,std::allocator<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>>>::__emplace_unique_key_args<_opaque_pthread_t *,std::piecewise_construct_t const&,std::tuple<_opaque_pthread_t *&&>,std::tuple<std::shared_ptr<LaunchServices::PerThreadContext>&&>>(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD **a4, uint64_t *a5)
{
  unint64_t v5;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD v29[2];
  char v30;

  v9 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v10 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v9 >> 47) ^ v9);
  v11 = 0x9DDFEA08EB382D69 * (v10 ^ (v10 >> 47));
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v5 = 0x9DDFEA08EB382D69 * (v10 ^ (v10 >> 47));
      if (v11 >= v12)
        v5 = v11 % v12;
    }
    else
    {
      v5 = v11 & (v12 - 1);
    }
    v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
    if (v14)
    {
      v15 = (_QWORD *)*v14;
      if (*v14)
      {
        do
        {
          v16 = v15[1];
          if (v16 == v11)
          {
            if (v15[2] == *a2)
              return v15;
          }
          else
          {
            if (v13.u32[0] > 1uLL)
            {
              if (v16 >= v12)
                v16 %= v12;
            }
            else
            {
              v16 &= v12 - 1;
            }
            if (v16 != v5)
              break;
          }
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
    }
  }
  v17 = a1 + 16;
  v18 = (char *)operator new(0x28uLL);
  v29[0] = v18;
  v29[1] = a1 + 16;
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = v11;
  v19 = *a5;
  *((_QWORD *)v18 + 2) = **a4;
  *(_OWORD *)(v18 + 24) = *(_OWORD *)v19;
  *(_QWORD *)v19 = 0;
  *(_QWORD *)(v19 + 8) = 0;
  v30 = 1;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v12 || (float)(v21 * (float)v12) < v20)
  {
    v22 = 1;
    if (v12 >= 3)
      v22 = (v12 & (v12 - 1)) != 0;
    v23 = v22 | (2 * v12);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__rehash<true>(a1, v25);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v5 = v11 % v12;
      else
        v5 = v11;
    }
    else
    {
      v5 = (v12 - 1) & v11;
    }
  }
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v26)
  {
    *(_QWORD *)v29[0] = *v26;
    *v26 = v29[0];
  }
  else
  {
    *(_QWORD *)v29[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v29[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v5) = v17;
    if (*(_QWORD *)v29[0])
    {
      v27 = *(_QWORD *)(*(_QWORD *)v29[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v27 >= v12)
          v27 %= v12;
      }
      else
      {
        v27 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v27) = v29[0];
    }
  }
  v15 = (_QWORD *)v29[0];
  v29[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,void *>>>>::reset[abi:nn180100]((uint64_t)v29, 0);
  return v15;
}

void sub_1828CAF64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,void *>>>>::reset[abi:nn180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void LaunchServices::PerThreadContext::releaseDatabase(LaunchServices::PerThreadContext *this)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = *(void **)this;
  *(_QWORD *)this = 0;

  if (!*((_QWORD *)this + 1))
  {
    _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], -10813, (uint64_t)"releaseDatabase", 60, MEMORY[0x1E0C9AA70]);
    v3 = objc_claimAutoreleasedReturnValue();
    v4 = (void *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v3;

  }
}

uint64_t std::__hash_table<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::__unordered_map_hasher<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::hash<_opaque_pthread_t *>,std::equal_to<_opaque_pthread_t *>,true>,std::__unordered_map_equal<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::equal_to<_opaque_pthread_t *>,std::hash<_opaque_pthread_t *>,true>,std::allocator<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>>>::__erase_unique<_opaque_pthread_t *>(_QWORD *a1, _QWORD *a2)
{
  uint64_t result;
  _BYTE v4[24];

  result = (uint64_t)std::__hash_table<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::__unordered_map_hasher<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::hash<_opaque_pthread_t *>,std::equal_to<_opaque_pthread_t *>,true>,std::__unordered_map_equal<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::equal_to<_opaque_pthread_t *>,std::hash<_opaque_pthread_t *>,true>,std::allocator<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>>>::find<_opaque_pthread_t *>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::__unordered_map_hasher<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::hash<_opaque_pthread_t *>,std::equal_to<_opaque_pthread_t *>,true>,std::__unordered_map_equal<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::equal_to<_opaque_pthread_t *>,std::hash<_opaque_pthread_t *>,true>,std::allocator<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>>>::remove(a1, (_QWORD *)result, (uint64_t)v4);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,void *>>>>::reset[abi:nn180100]((uint64_t)v4, 0);
    return 1;
  }
  return result;
}

void std::__shared_ptr_emplace<LaunchServices::PerThreadContext>::__on_zero_shared(uint64_t a1)
{

}

void sub_1828CB15C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t _LSCheckEntitlementForXPCConnection(void *a1, void *a2)
{
  _xpc_connection_s *v3;
  _xpc_connection_s *v4;
  uint64_t v5;
  NSObject *v6;
  int v8;
  uint64_t pid;
  __int16 v10;
  void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!_LSCheckEntitlementForXPCConnectionQuiet(v3, a2))
  {
    _LSDefaultLog();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v8 = 134218242;
      pid = xpc_connection_get_pid(v4);
      v10 = 2114;
      v11 = a2;
      _os_log_impl(&dword_182882000, v6, OS_LOG_TYPE_DEFAULT, "Connection from process %llu does not have the required entitlement %{public}@", (uint8_t *)&v8, 0x16u);
    }

    goto LABEL_7;
  }
  v5 = 1;
LABEL_8:

  return v5;
}

void sub_1828CB26C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL _LSCheckEntitlementForXPCConnectionQuiet(void *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  _BOOL8 v7;

  v3 = a1;
  v4 = v3;
  if (v3)
  {
    _LSCopyEntitlementValueForXPCConnection(v3, a2);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v5;
    if (v5)
      v7 = _LSGetBooleanValueForEntitlementValue(v5, 0);
    else
      v7 = 0;

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void sub_1828CB308(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id _LSCopyEntitlementValueForXPCConnection(void *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  void *v8;
  void *v9;

  v3 = a1;
  v4 = 0;
  if (v3 && a2)
  {
    v5 = (void *)MEMORY[0x186DAE7A0]();
    v6 = objc_retainAutorelease(a2);
    if (!objc_msgSend(v6, "UTF8String"))
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "xpc_object_t _LSCopyEntitlementValueForXPCConnection(__strong xpc_connection_t, CFStringRef)");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "handleFailureInFunction:file:lineNumber:description:", v9, CFSTR("LSEntitlements.mm"), 1067, CFSTR("Couldn't get C string from entitlement name '%@'"), v6);

    }
    v4 = (void *)xpc_connection_copy_entitlement_value();
    objc_autoreleasePoolPop(v5);
  }

  return v4;
}

void sub_1828CB40C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1828CB800(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v4;

  _Unwind_Resume(a1);
}

void sub_1828CB994(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void _LSServer_GetServerStoreForConnectionWithCompletionHandler(void *a1, void *a2)
{
  id v3;
  void (**v4)(id, uint64_t, void *, _QWORD);
  os_unfair_lock_s *v5;
  void *v6;
  int MayMapDatabase;
  _QWORD *v8;
  id v9;
  NSObject *v10;
  void *v11;
  NSObject *v12;
  id v13;
  uint64_t v14;
  void *v15;
  int v16;
  _QWORD v17[4];
  id v18;
  id v19;
  uint8_t buf[4];
  _QWORD *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  id v25;
  uint64_t v26;
  _QWORD v27[2];

  v27[1] = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  _LSAssertRunningInServer((uint64_t)"void _LSServer_GetServerStoreForConnectionWithCompletionHandler(NSXPCConnection *__s"
                                    "trong, void (^__strong)(__strong id, FSNode *__strong, NSError *__strong))");
  _LSServer_DatabaseExecutionContext();
  v5 = (os_unfair_lock_s *)objc_claimAutoreleasedReturnValue();
  -[LSDBExecutionContext assertActiveForThisThread](v5);

  objc_msgSend(v3, "_xpcConnection");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  MayMapDatabase = _LSXPCConnectionMayMapDatabase(v6);

  if (MayMapDatabase)
  {
    v19 = 0;
    v8 = (_QWORD *)_LSServer_CopyLocalDatabase(&v19);
    v9 = v19;
    if (v8 && (-[_LSDatabase isSeeded]((uint64_t)v8) & 1) != 0)
      goto LABEL_7;
    _LSDefaultLog();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v16 = -[_LSDatabase isSeeded]((uint64_t)v8);
      *(_DWORD *)buf = 138412802;
      v21 = v8;
      v22 = 1024;
      v23 = v16;
      v24 = 2114;
      v25 = v9;
      _os_log_error_impl(&dword_182882000, v10, OS_LOG_TYPE_ERROR, "_LSServer_CopyLocalDatabase returned db %@ (seeded? %d) error %{public}@", buf, 0x1Cu);
    }

    v11 = (void *)os_transaction_create();
    _LSServer_GetIOQueue();
    v12 = objc_claimAutoreleasedReturnValue();
    v17[0] = MEMORY[0x1E0C809B0];
    v17[1] = 3221225472;
    v17[2] = ___LSServer_GetServerStoreForConnectionWithCompletionHandler_block_invoke;
    v17[3] = &unk_1E10418C8;
    v18 = v11;
    v13 = v11;
    dispatch_async(v12, v17);

    if (v8)
    {
LABEL_7:
      v14 = v8[1];
      _LSDatabaseGetNode((uint64_t)v8);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v4[2](v4, v14, v15, 0);

    }
    else
    {
      ((void (**)(id, uint64_t, void *, id))v4)[2](v4, 0, 0, v9);
    }
  }
  else
  {
    v26 = *MEMORY[0x1E0CB2938];
    v27[0] = CFSTR("process may not map database");
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v27, &v26, 1);
    v9 = (id)objc_claimAutoreleasedReturnValue();
    _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], -54, (uint64_t)"_LSServer_GetServerStoreForConnectionWithCompletionHandler", 68, v9);
    v8 = (_QWORD *)objc_claimAutoreleasedReturnValue();
    ((void (**)(id, uint64_t, void *, _QWORD *))v4)[2](v4, 0, 0, v8);
  }

}

void sub_1828CBC9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

id _LSDatabaseGetNode(uint64_t a1)
{
  return *(id *)(a1 + 1640);
}

uint64_t _LSDatabaseGetSessionStatus()
{
  LSSessionKey v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  void *v4;
  int v5;
  id v6;
  void *v7;
  int v8;

  os_unfair_recursive_lock_lock_with_options();
  v0 = (LSSessionKey)_LSServer_SelfSessionKey();
  v1 = _LSGetSession(v0);
  v2 = ((*(_BYTE *)(v1 + 20) & 2) << 9) | ((*(_BYTE *)(v1 + 20) & 1) << 7);
  v3 = *(id *)(v1 + 24);
  if (v3)
  {
    v4 = v3;
    v5 = -[_LSDatabase isSeedingComplete](*(_QWORD *)(v1 + 24));

    if (v5)
      v2 = v2;
    else
      v2 = v2 | 0x200;
  }
  v6 = *(id *)(v1 + 24);
  if (v6)
  {
    v7 = v6;
    v8 = -[_LSDatabase isSeeded](*(_QWORD *)(v1 + 24));

    if (v8)
      v2 = v2 | 0x100;
    else
      v2 = v2;
  }
  os_unfair_recursive_lock_unlock();
  return v2;
}

void sub_1828CBDE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828CBF40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)_LSDatabase;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void _LSSchemaCache::~_LSSchemaCache(_LSSchemaCache *this)
{
  pthread_rwlock_destroy((pthread_rwlock_t *)this);
  std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>>>::~__hash_table((uint64_t)this + 240);
  std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>>>::~__hash_table((uint64_t)this + 200);
}

void sub_1828CBFA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>>>::~__hash_table(v1 + 240);
  std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>>>::~__hash_table(v1 + 200);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>>>::~__hash_table((uint64_t)(v2 + 3));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

id *_LSDatabaseCreateSystemContentDatabaseFromPersistentStore(_QWORD *a1)
{
  FSNode *v2;
  void *v3;
  FSNode *v4;
  const void *v5;
  void *v6;
  id *v7;

  v2 = [FSNode alloc];
  objc_msgSend((id)__LSDefaultsGetSharedInstance(), "systemContentDatabaseStoreFileURL");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = -[FSNode initWithURL:flags:error:](v2, "initWithURL:flags:error:", v3, 0, a1);

  if (v4 && (v5 = (const void *)_LSCreateStoreWithFileContents(v4, a1)) != 0)
  {
    v6 = (void *)_LSServer_SelfSessionKey();
    v7 = _LSDatabaseCreateWithAccessContext(v4, v6, v5, 0, a1);
    CFRelease(v5);
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void sub_1828CC0E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _LSCreateStoreWithFileContents(void *a1, _QWORD *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  id v9;

  v3 = a1;
  v4 = v3;
  v9 = 0;
  if (!v3)
  {
    _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], -50, (uint64_t)"_LSCreateStoreWithFileContents", 555, 0);
    v9 = (id)objc_claimAutoreleasedReturnValue();
    if (!a2)
    {
LABEL_6:
      v6 = 0;
      goto LABEL_9;
    }
LABEL_8:
    v6 = 0;
    *a2 = objc_retainAutorelease(v9);
    goto LABEL_9;
  }
  objc_msgSend(v3, "URL");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = _CSStoreCreateWithURL();

  if (!v6)
  {
    _LSDatabaseGetLog();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      _LSCreateStoreWithFileContents();

    if (!a2)
      goto LABEL_6;
    goto LABEL_8;
  }
LABEL_9:

  return v6;
}

void sub_1828CC1F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1828CC338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t _LSPluginFindWithInfo(void *a1, const __CFString *a2, const __CFString *a3, char a4, void *a5, _DWORD *a6, _QWORD *a7)
{
  return _LSPluginFindWithPlatformInfo(a1, a2, a3, a4, a5, 0, a6, a7);
}

CFURLRef _LSCopyExecutableURLForXPCConnection(void *a1)
{
  id v1;
  CFURLRef v2;

  v1 = a1;
  if (v1)
  {
    xpc_connection_get_audit_token();
    v2 = _LSCopyExecutableURLForAuditToken();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

void sub_1828CC3C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

LaunchServices::notifyd::NotifyToken *LaunchServices::notifyd::NotifyToken::operator=(LaunchServices::notifyd::NotifyToken *a1, LaunchServices::notifyd::NotifyToken *a2)
{
  LaunchServices::notifyd::NotifyToken::_moveFrom(a1, a2);
  return a1;
}

uint64_t LaunchServices::notifyd::NotifyToken::_moveFrom(LaunchServices::notifyd::NotifyToken *this, LaunchServices::notifyd::NotifyToken *a2)
{
  int v4;
  uint64_t result;
  unsigned int v6;

  do
    v4 = __ldaxr((unsigned int *)this);
  while (__stlxr(0xFFFFFFFF, (unsigned int *)this));
  result = notify_is_valid_token(v4);
  if ((_DWORD)result)
    result = notify_cancel(v4);
  do
    v6 = __ldaxr((unsigned int *)a2);
  while (__stlxr(0xFFFFFFFF, (unsigned int *)a2));
  atomic_store(v6, (unsigned int *)this);
  return result;
}

uint64_t _LSVersionNumberGetMajorComponent(uint64_t a1)
{
  return *(_QWORD *)a1;
}

void sub_1828CC5A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void __installProgressInterface_block_invoke()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;

  v0 = (void *)MEMORY[0x1E0C99E60];
  v1 = objc_opt_class();
  objc_msgSend(v0, "setWithObjects:", v1, objc_opt_class(), 0);
  v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EDCE7358);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)installProgressInterface_interface;
  installProgressInterface_interface = v2;

  objc_msgSend((id)installProgressInterface_interface, "setClass:forSelector:argumentIndex:ofReply:", objc_opt_class(), sel_createInstallProgressForApplication_withPhase_andPublishingString_reply_, 0, 0);
  objc_msgSend((id)installProgressInterface_interface, "setClass:forSelector:argumentIndex:ofReply:", objc_opt_class(), sel_createInstallProgressForApplication_withPhase_andPublishingString_reply_, 2, 0);
  objc_msgSend((id)installProgressInterface_interface, "setClasses:forSelector:argumentIndex:ofReply:", v8, sel_sendNotification_forApplications_withPlugins_, 1, 0);
  objc_msgSend((id)installProgressInterface_interface, "setClass:forSelector:argumentIndex:ofReply:", objc_opt_class(), sel_sendNotification_forApplicationWithBundleIdentifier_completion_, 1, 0);
  objc_msgSend((id)installProgressInterface_interface, "setClass:forSelector:argumentIndex:ofReply:", objc_opt_class(), sel_sendNotification_forApplicationWithBundleIdentifier_completion_, 0, 1);
  v4 = (void *)installProgressInterface_interface;
  v5 = (void *)MEMORY[0x1E0C99E60];
  v6 = objc_opt_class();
  objc_msgSend(v5, "setWithObjects:", v6, objc_opt_class(), 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setClasses:forSelector:argumentIndex:ofReply:", v7, sel_setProgressProportionsByPhase_forInstallOfApplicationWithIdentifier_completion_, 0, 0);

  objc_msgSend((id)installProgressInterface_interface, "setClass:forSelector:argumentIndex:ofReply:", objc_opt_class(), sel_setProgressProportionsByPhase_forInstallOfApplicationWithIdentifier_completion_, 1, 0);
  objc_msgSend((id)installProgressInterface_interface, "setClass:forSelector:argumentIndex:ofReply:", objc_opt_class(), sel_setProgressProportionsByPhase_forInstallOfApplicationWithIdentifier_completion_, 0, 1);

}

void sub_1828CC9D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828CD018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

void __workspaceObserverInterface_block_invoke()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;

  objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EDCDA848);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)workspaceObserverInterface_interface;
  workspaceObserverInterface_interface = v0;

  v2 = (void *)MEMORY[0x1E0C99E60];
  v3 = objc_opt_class();
  v4 = objc_opt_class();
  v5 = objc_opt_class();
  objc_msgSend(v2, "setWithObjects:", v3, v4, v5, objc_opt_class(), 0);
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend((id)workspaceObserverInterface_interface, "setClasses:forSelector:argumentIndex:ofReply:", v6, sel_applicationInstallsDidStart_, 0, 0);
  objc_msgSend((id)workspaceObserverInterface_interface, "setClasses:forSelector:argumentIndex:ofReply:", v6, sel_applicationInstallsDidChange_, 0, 0);
  objc_msgSend((id)workspaceObserverInterface_interface, "setClasses:forSelector:argumentIndex:ofReply:", v6, sel_applicationInstallsDidUpdateIcon_, 0, 0);
  objc_msgSend((id)workspaceObserverInterface_interface, "setClasses:forSelector:argumentIndex:ofReply:", v6, sel_applicationsWillInstall_, 0, 0);
  objc_msgSend((id)workspaceObserverInterface_interface, "setClasses:forSelector:argumentIndex:ofReply:", v6, sel_applicationsDidInstall_, 0, 0);
  objc_msgSend((id)workspaceObserverInterface_interface, "setClasses:forSelector:argumentIndex:ofReply:", v6, sel_pluginsDidInstall_, 0, 0);
  objc_msgSend((id)workspaceObserverInterface_interface, "setClasses:forSelector:argumentIndex:ofReply:", v6, sel_applicationsWillUninstall_, 0, 0);
  objc_msgSend((id)workspaceObserverInterface_interface, "setClasses:forSelector:argumentIndex:ofReply:", v6, sel_pluginsWillUninstall_, 0, 0);
  objc_msgSend((id)workspaceObserverInterface_interface, "setClasses:forSelector:argumentIndex:ofReply:", v6, sel_applicationsDidUninstall_, 0, 0);
  objc_msgSend((id)workspaceObserverInterface_interface, "setClasses:forSelector:argumentIndex:ofReply:", v6, sel_pluginsDidUninstall_, 0, 0);
  objc_msgSend((id)workspaceObserverInterface_interface, "setClasses:forSelector:argumentIndex:ofReply:", v6, sel_applicationsDidFailToInstall_, 0, 0);
  objc_msgSend((id)workspaceObserverInterface_interface, "setClasses:forSelector:argumentIndex:ofReply:", v6, sel_applicationsDidFailToUninstall_, 0, 0);
  objc_msgSend((id)workspaceObserverInterface_interface, "setClasses:forSelector:argumentIndex:ofReply:", v6, sel_applicationStateDidChange_, 0, 0);
  objc_msgSend((id)workspaceObserverInterface_interface, "setClasses:forSelector:argumentIndex:ofReply:", v6, sel_applicationIconDidChange_, 0, 0);
  objc_msgSend((id)workspaceObserverInterface_interface, "setClasses:forSelector:argumentIndex:ofReply:", v6, sel_applicationInstallsArePrioritized_arePaused_, 0, 0);
  objc_msgSend((id)workspaceObserverInterface_interface, "setClasses:forSelector:argumentIndex:ofReply:", v6, sel_applicationInstallsArePrioritized_arePaused_, 1, 0);
  objc_msgSend((id)workspaceObserverInterface_interface, "setClasses:forSelector:argumentIndex:ofReply:", v6, sel_applicationInstallsDidPause_, 0, 0);
  objc_msgSend((id)workspaceObserverInterface_interface, "setClasses:forSelector:argumentIndex:ofReply:", v6, sel_applicationInstallsDidResume_, 0, 0);
  objc_msgSend((id)workspaceObserverInterface_interface, "setClasses:forSelector:argumentIndex:ofReply:", v6, sel_applicationInstallsDidCancel_, 0, 0);
  objc_msgSend((id)workspaceObserverInterface_interface, "setClasses:forSelector:argumentIndex:ofReply:", v6, sel_applicationInstallsDidPrioritize_, 0, 0);
  objc_msgSend((id)workspaceObserverInterface_interface, "setClasses:forSelector:argumentIndex:ofReply:", v6, sel_applicationsDidChangePersonas_, 0, 0);

}

void sub_1828CE45C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id _FSNodeGetClasses()
{
  void *v0;

  objc_msgSend((id)__LSDefaultsGetSharedInstance(), "classesWithNameForXCTests:", "FSNode");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v0)
  {
    objc_msgSend(MEMORY[0x1E0C99E60], "setWithObject:", objc_opt_class());
    v0 = (void *)objc_claimAutoreleasedReturnValue();
  }
  return v0;
}

id _LSGetURLPropertyClasses()
{
  void *v0;
  void *v1;
  void *v2;
  LaunchServices::URLPropertyProvider *v3;
  id UTTypeClass;
  uint64_t v5;
  _QWORD v7[5];

  v7[4] = *MEMORY[0x1E0C80C00];
  XNSGetPropertyListClasses();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = objc_opt_class();
  v7[1] = objc_opt_class();
  v7[2] = objc_opt_class();
  v7[3] = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v7, 4);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setByAddingObjectsFromArray:", v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  UTTypeClass = LaunchServices::URLPropertyProvider::getUTTypeClass(v3);
  if (UTTypeClass)
  {
    objc_msgSend(v2, "setByAddingObject:", UTTypeClass);
    v5 = objc_claimAutoreleasedReturnValue();

    v2 = (void *)v5;
  }
  return v2;
}

void sub_1828CE6F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id _LSOpenResourceOperationDelegateGetXPCInterface()
{
  if (_LSOpenResourceOperationDelegateGetXPCInterface::once != -1)
    dispatch_once(&_LSOpenResourceOperationDelegateGetXPCInterface::once, &__block_literal_global_53);
  return (id)_LSOpenResourceOperationDelegateGetXPCInterface::result;
}

id _LSGetFrontBoardOptionsDictionaryClasses()
{
  if (_LSGetFrontBoardOptionsDictionaryClasses_once != -1)
    dispatch_once(&_LSGetFrontBoardOptionsDictionaryClasses_once, &__block_literal_global_20);
  return (id)_LSGetFrontBoardOptionsDictionaryClasses_result;
}

uint64_t ___ZN14LaunchServices15DatabaseContextL26getPerThreadStateReferenceEv_block_invoke()
{
  return pthread_key_create((pthread_key_t *)&LaunchServices::DatabaseContext::getPerThreadStateReference(void)::key, (void (__cdecl *)(void *))_ZZZN14LaunchServices15DatabaseContextL26getPerThreadStateReferenceEvEUb_EN3__08__invokeEPv);
}

void sub_1828CEA78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id *std::vector<LSRecord * {__weak}>::erase(uint64_t a1, id *a2, id *a3)
{
  id *v5;
  id *v6;
  id *v7;
  char v9;

  if (a2 != a3)
  {
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<LSRecord * {__weak}*,LSRecord * {__weak}*,LSRecord * {__weak}*>((int)&v9, a3, *(id **)(a1 + 8), a2);
    v6 = v5;
    v7 = *(id **)(a1 + 8);
    if (v7 != v5)
    {
      do
        objc_destroyWeak(--v7);
      while (v7 != v6);
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  return a2;
}

id *std::vector<LSRecord * {__weak}>::__swap_out_circular_buffer(id **a1, _QWORD *a2, id *from)
{
  id *v3;
  id *v6;
  id *v7;
  id *v8;
  id *v9;
  id *v10;
  id *v11;
  id *v12;
  id *v13;
  id *v14;

  v3 = from;
  v6 = (id *)a2[1];
  v7 = *a1;
  v8 = v6;
  if (*a1 != from)
  {
    v9 = from;
    v8 = (id *)a2[1];
    do
      objc_moveWeak(--v8, --v9);
    while (v9 != v7);
  }
  a2[1] = v8;
  v10 = a1[1];
  v11 = (id *)a2[2];
  if (v10 != v3)
  {
    do
      objc_moveWeak(v11++, v3++);
    while (v3 != v10);
    v8 = (id *)a2[1];
  }
  a2[2] = v11;
  v12 = *a1;
  *a1 = v8;
  a2[1] = v12;
  v13 = a1[1];
  a1[1] = (id *)a2[2];
  a2[2] = v13;
  v14 = a1[2];
  a1[2] = (id *)a2[3];
  a2[3] = v14;
  *a2 = a2[1];
  return v6;
}

uint64_t std::__split_buffer<LSRecord * {__weak}>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    objc_destroyWeak((id *)(i - 8));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t ___ZL42getIsCurrentThreadInLSContextInitReferencev_block_invoke()
{
  return pthread_key_create((pthread_key_t *)&getIsCurrentThreadInLSContextInitReference(void)::key, (void (__cdecl *)(void *))MEMORY[0x1E0C834A8]);
}

void __create_d2f_port_source_block_invoke(uint64_t a1)
{
  receive_and_dispatch_rcv_msg(*(_DWORD *)(a1 + 32));
}

double ___ZL27_FSNodeInfoLifetimeAbsolutev_block_invoke()
{
  uint64_t v0;
  double result;

  v0 = _LSGetMachTimebase();
  result = 5000000000.0 / ((double)v0 / (double)HIDWORD(v0));
  _FSNodeInfoLifetimeAbsolute(void)::nodeInfoLifetimeAbsolute = (unint64_t)result;
  return result;
}

uint64_t _LSGetMachTimebase()
{
  if (_LSGetMachTimebase::once != -1)
    dispatch_once(&_LSGetMachTimebase::once, &__block_literal_global_98);
  return _LSGetMachTimebase::info;
}

void ___ZL28_LSDNCGetForbiddenCharactersj_block_invoke()
{
  void *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;

  v6 = objc_alloc_init(MEMORY[0x1E0CB3780]);
  objc_msgSend(v6, "addCharactersInRange:", 0, 1);
  objc_msgSend(MEMORY[0x1E0CB3500], "illegalCharacterSet");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "formUnionWithCharacterSet:", v0);

  v1 = objc_msgSend(v6, "copy");
  v2 = (void *)_LSDNCGetForbiddenCharacters::forbiddenWithoutNewlines;
  _LSDNCGetForbiddenCharacters::forbiddenWithoutNewlines = v1;

  objc_msgSend(MEMORY[0x1E0CB3500], "newlineCharacterSet");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "formUnionWithCharacterSet:", v3);

  v4 = objc_msgSend(v6, "copy");
  v5 = (void *)_LSDNCGetForbiddenCharacters::forbiddenWithNewlines;
  _LSDNCGetForbiddenCharacters::forbiddenWithNewlines = v4;

}

void sub_1828CEEB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  v11 = v10;

  _Unwind_Resume(a1);
}

void ___ZL30_LSDNCGetBiDiControlCharactersv_block_invoke()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;

  v0 = objc_alloc_init(MEMORY[0x1E0CB3780]);
  v1 = 0;
  v4 = v0;
  do
  {
    objc_msgSend(v0, "addCharactersInRange:", (unsigned __int16)_LSBiDiControlCharacters[v1++], 1);
    v0 = v4;
  }
  while (v1 != 12);
  v2 = objc_msgSend(v4, "copy");
  v3 = (void *)_LSDNCGetBiDiControlCharacters(void)::result;
  _LSDNCGetBiDiControlCharacters(void)::result = v2;

}

void sub_1828CEF4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void std::vector<std::pair<objc_selector *,void (*)(objc_object *,objc_selector *)>>::shrink_to_fit(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _BYTE *v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  v2 = a1 + 16;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(char **)a1;
  v5 = *(_BYTE **)(a1 + 8);
  v6 = (v5 - v4) >> 4;
  if (v6 < (v3 - (uint64_t)v4) >> 4)
  {
    if (v5 == v4)
    {
      v11 = 0;
      v9 = 16 * v6;
    }
    else
    {
      v7 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<unsigned int,NSUUID * {__strong}>>>(v2, v6);
      v4 = *(char **)a1;
      v8 = *(char **)(a1 + 8);
      v9 = (uint64_t)&v7[16 * v6];
      v11 = &v7[16 * v10];
      if (v8 != *(char **)a1)
      {
        v12 = v9;
        do
        {
          *(_OWORD *)(v12 - 16) = *((_OWORD *)v8 - 1);
          v12 -= 16;
          v8 -= 16;
        }
        while (v8 != v4);
        v4 = *(char **)a1;
        goto LABEL_9;
      }
    }
    v12 = v9;
LABEL_9:
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v11;
    if (v4)
      operator delete(v4);
  }
}

void sub_1828CF2F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id a29)
{
  void *v29;

  _Block_object_dispose(&a24, 8);
  _Unwind_Resume(a1);
}

void sub_1828CF3AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

double ___ZL14_LSGetSessionsv_block_invoke()
{
  uint64_t v0;
  double result;

  v0 = operator new();
  result = 0.0;
  *(_OWORD *)v0 = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_DWORD *)(v0 + 32) = 1065353216;
  _LSGetSessions(void)::sessions = v0;
  return result;
}

void ___ZN14LaunchServices13PropertyListsL27filterValueFromPropertyListEP11objc_objectP10objc_classS4__block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;

  v6 = a2;
  v5 = a3;
  if ((objc_opt_isKindOfClass() & 1) != 0)
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v5, v6);

}

void sub_1828CFB3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void ___ZL11_LSErrorLogv_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.launchservices", "error");
  v1 = (void *)_LSErrorLog(void)::result;
  _LSErrorLog(void)::result = (uint64_t)v0;

}

id _UTDynamicGetFirstTag(const __CFString *a1, const __CFString *cf)
{
  CFTypeID v4;
  CFIndex Length;
  id v6;
  _QWORD v8[5];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  void (*v13)(uint64_t);
  id v14;
  _BYTE v15[160];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v9 = 0;
  v10 = &v9;
  v11 = 0x3032000000;
  v12 = __Block_byref_object_copy__50;
  v13 = __Block_byref_object_dispose__50;
  v14 = 0;
  if (cf && (v4 = CFGetTypeID(cf), v4 == CFStringGetTypeID()))
  {
    Length = CFStringGetLength(cf);
    if (XCFBufInitWithCFStringRange((uint64_t)v15, cf, 0, Length, 1))
    {
      v8[0] = MEMORY[0x1E0C809B0];
      v8[1] = 3221225472;
      v8[2] = ___UTDynamicGetFirstTag_block_invoke;
      v8[3] = &unk_1E1045988;
      v8[4] = &v9;
      _UTDynamicValuesSearch(0, a1, 2, (uint64_t)v15, (uint64_t (*)(uint64_t *))_UTDynamicValuesSearchWithBlock::$_0::__invoke, (uint64_t)v8);
      XCFBufDestroy((uint64_t)v15);
    }
  }
  else
  {
    XCFBufInit((uint64_t)v15);
  }
  v6 = (id)v10[5];
  _Block_object_dispose(&v9, 8);

  return v6;
}

void sub_1828CFD60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id a19)
{
  _Block_object_dispose(&a14, 8);

  _Unwind_Resume(a1);
}

void sub_1828D01FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1828D03D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828D05B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1828D08D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1828D0D14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1828D1084(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828D11BC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

double ___Z33availabilityStateForServiceDomainP17_LSDServiceDomain_block_invoke()
{
  uint64_t v0;
  double result;

  v0 = operator new();
  result = 0.0;
  *(_OWORD *)v0 = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_DWORD *)(v0 + 32) = 1065353216;
  availabilityStateForServiceDomain(_LSDServiceDomain *)::sessionQuickAvailabilityMap = v0;
  return result;
}

void ___ZL35_LSSessionInitMemoryWarningListenerv_block_invoke()
{
  dispatch_source_t v0;
  void *v1;

  v0 = dispatch_source_create(MEMORY[0x1E0C80DA8], 0, 6uLL, 0);
  v1 = (void *)_LSSessionInitMemoryWarningListener(void)::memPressureSource;
  _LSSessionInitMemoryWarningListener(void)::memPressureSource = (uint64_t)v0;

  dispatch_source_set_event_handler((dispatch_source_t)_LSSessionInitMemoryWarningListener(void)::memPressureSource, &__block_literal_global_159);
  dispatch_resume((dispatch_object_t)_LSSessionInitMemoryWarningListener(void)::memPressureSource);
}

void sub_1828D1598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  void *v6;
  void *v7;
  va_list va;

  va_start(va, a5);

  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)va);
  _Unwind_Resume(a1);
}

uint64_t _LSBundleFindWithInfo(uint64_t a1, NSString *a2, void *a3, int a4, _OWORD *a5, int a6, int a7, _DWORD *a8, _QWORD *a9)
{
  __int128 v9;
  BOOL v10;
  id v11;
  void *v12;
  uint64_t v13;
  id v15;
  _OWORD v16[2];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v9 = a5[1];
  v16[0] = *a5;
  v16[1] = v9;
  v15 = 0;
  v10 = _LSBundleFindWithInfoAndNo_IOFilter(a1, a2, a3, a4 != 0, v16, a6, a7, 0, 0, a8, a9, &v15);
  v11 = v15;
  v12 = v11;
  if (v10)
    v13 = 0;
  else
    v13 = _LSGetOSStatusFromNSError(v11);

  return v13;
}

void sub_1828D1704(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828D1794(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828D183C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

id _LSDataSeparationLog()
{
  if (_LSDataSeparationLog_onceToken != -1)
    dispatch_once(&_LSDataSeparationLog_onceToken, &__block_literal_global_15_0);
  return (id)_LSDataSeparationLog_log;
}

id _LSBundleGetDisplayNameForNodeWithUnregisteredBundleType(void **a1, void *a2, void *a3, _QWORD *a4)
{
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v25;
  id v26;

  v7 = a2;
  v8 = a3;
  if (!_LSBundleNodeHasUnregisteredPersonality(a1, v7, v8, 0))
  {
    v10 = 0;
    v15 = 0;
    goto LABEL_25;
  }
  v26 = 0;
  objc_msgSend(v7, "bundleInfoDictionaryWithError:", &v26);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = (uint64_t)v26;
  if (v9)
  {
    v11 = objc_opt_class();
    v12 = *MEMORY[0x1E0C9AAC8];
    objc_msgSend(v9, "objectForKey:", *MEMORY[0x1E0C9AAC8]);
    v13 = objc_claimAutoreleasedReturnValue();
    v14 = (void *)v13;
    if (v11 && v13)
    {
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        v15 = 0;
        v16 = v14;
        v17 = (id)v10;
        goto LABEL_22;
      }
LABEL_9:
      v25 = (id)v10;
      objc_msgSend(v7, "nameWithError:", &v25);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = v25;

      if (v18)
      {
        objc_msgSend(v18, "stringByDeletingPathExtension");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        v20 = v19;
        if (v19 && !objc_msgSend(v19, "caseInsensitiveCompare:", v14))
        {
          _LSBundleGetLocalizer(*a1, 0, 0, v7);
          v16 = (void *)objc_claimAutoreleasedReturnValue();
        }
        else
        {
          v16 = 0;
        }

        if (!v16)
        {
          v15 = 0;
LABEL_23:
          v10 = (uint64_t)v17;
          goto LABEL_24;
        }
        objc_msgSend(v7, "URL");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v21, "ls_preferredLocalizations");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "localizedStringWithString:preferredLocalizations:", v12, v22);
        v23 = (void *)objc_claimAutoreleasedReturnValue();

        if (v23)
        {
          objc_msgSend(v23, "stringByAppendingPathExtension:", v8);
          v15 = objc_claimAutoreleasedReturnValue();

        }
        else
        {
          v15 = 0;
        }

      }
      else
      {
        v15 = 0;
        v16 = v14;
      }
LABEL_22:

      goto LABEL_23;
    }
    if (v13)
      goto LABEL_9;
  }
  v15 = 0;
LABEL_24:

LABEL_25:
  if (!(v15 | v10))
  {
    _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], -10813, (uint64_t)"_LSBundleGetDisplayNameForNodeWithUnregisteredBundleType", 2086, 0);
    v10 = objc_claimAutoreleasedReturnValue();
  }
  if (a4 && !v15)
    *a4 = objc_retainAutorelease((id)v10);

  return (id)v15;
}

void sub_1828D1C20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

uint64_t _LSBundleNodeHasUnregisteredPersonality(void **a1, void *a2, void *a3, int *a4)
{
  id v7;
  id v8;
  void *v9;
  int v10;
  int v11;
  uint64_t HasUnregisteredPersonality;
  uint64_t v13;
  unsigned int TypeLocalizableNameBundle;
  int v16;
  id v17[2];
  CFStringRef inUTI;

  v7 = a2;
  v8 = a3;
  v9 = v8;
  if (a4)
  {
    v10 = *a4;
  }
  else
  {
    if (v8)
      v11 = _LSGetBundleClassForExtensionNSString(v8);
    else
      v11 = _LSGetBundleClassForNode((uint64_t)a1, v7);
    v10 = v11;
  }
  HasUnregisteredPersonality = _LSBundleClassHasUnregisteredPersonality(v10);
  v13 = HasUnregisteredPersonality;
  if (!v10 && !(_DWORD)HasUnregisteredPersonality)
  {
    inUTI = 0;
    if (objc_msgSend(v7, "getCachedResourceValueIfPresent:forKey:error:", &inUTI, *MEMORY[0x1E0C99AD0], 0))
    {
      v13 = UTTypeConformsTo(inUTI, CFSTR("com.apple.localizable-name-bundle"));
    }
    else
    {
      LaunchServices::TypeEvaluator::TypeEvaluator(v17, v7);
      v16 = 0;
      if (LaunchServices::TypeEvaluator::getTypeUnit((uint64_t)v17, a1, &v16, 0)
        && (TypeLocalizableNameBundle = _UTTypeGetTypeLocalizableNameBundle((_LSDatabase *)*a1)) != 0)
      {
        v13 = _UTTypeConformsTo(*a1, v16, TypeLocalizableNameBundle);
      }
      else
      {
        v13 = 0;
      }

    }
  }

  return v13;
}

void sub_1828D1DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

uint64_t LaunchServices::TypeEvaluator::getTypeUnit(uint64_t a1, void **a2, _DWORD *a3, _QWORD *a4)
{
  uint64_t v6;
  int v8;
  uint64_t v9;
  id v10;
  char v11;

  LaunchServices::TypeEvaluation::runEvaluator(a2, a1, a4, (uint64_t)&v8);
  if (!v11)
    return 0;
  if (a3)
    *a3 = v8;
  v6 = v9;
  if (!a4
    || v9
    || (_LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], -9499, (uint64_t)"getTypeUnit", 139, 0),
        v6 = 0,
        *a4 = (id)objc_claimAutoreleasedReturnValue(),
        v11))
  {

  }
  return v6;
}

void sub_1828D1EC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, char a14)
{
  if (a14)

  _Unwind_Resume(exception_object);
}

uint64_t _UTTypeGetTypeLocalizableNameBundle(_LSDatabase *a1)
{
  return _UTTypeGetCachedType(a1, CFSTR("com.apple.localizable-name-bundle"), (unsigned int *)a1->schema._cache + 73);
}

uint64_t _LSGetBundleClassForExtensionNSString(void *a1)
{
  __CFString *v1;
  const char *CStringPtr;
  uint64_t v3;
  _BYTE v5[128];
  __CFString *v6;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = a1;
  v6 = v1;
  v9 = 0;
  v10 = -[__CFString length](v1, "length");
  if (CFStringGetCharactersPtr(v1))
    CStringPtr = 0;
  else
    CStringPtr = CFStringGetCStringPtr(v1, 0x600u);
  v11 = 0;
  v12 = 0;
  v8 = CStringPtr;
  v3 = _LSGetBundleClassForExtensionInlineBuffer((uint64_t)v5);

  return v3;
}

void sub_1828D1F74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _LSBundleClassHasUnregisteredPersonality(int a1)
{
  char v1;

  if ((a1 - 9) >= 7)
    v1 = 0;
  else
    v1 = 0x1000001000101uLL >> (8 * (a1 - 9));
  return v1 & 1;
}

void ___ZL24_LSGetDispatchTokenQueuev_block_invoke()
{
  dispatch_queue_t v0;
  void *v1;
  NSObject *v2;

  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v2 = objc_claimAutoreleasedReturnValue();
  v0 = dispatch_queue_create("LS database changed notification queue", v2);
  v1 = (void *)_LSGetDispatchTokenQueue(void)::result;
  _LSGetDispatchTokenQueue(void)::result = (uint64_t)v0;

}

void sub_1828D20DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1828D21B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1;

  _Unwind_Resume(a1);
}

void sub_1828D2434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1828D2574(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1828D2744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void ___ZN14LaunchServices15DatabaseContextL6getLogEv_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.launchservices", "db-spi");
  v1 = (void *)LaunchServices::DatabaseContext::getLog(void)::result;
  LaunchServices::DatabaseContext::getLog(void)::result = (uint64_t)v0;

}

void sub_1828D2844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id getXPCObjectForNodeAndStore(FSNode *a1, const __CSStore *a2)
{
  xpc_object_t v3;
  id v4;
  NSObject *v5;
  uint64_t v6;
  void *v7;
  NSObject *v8;
  pid_t v9;
  CFTypeRef cf;
  id v12;
  char string[1024];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = xpc_dictionary_create(0, 0, 0);
  v12 = 0;
  LODWORD(a1) = -[FSNode getFileSystemRepresentation:error:](a1, "getFileSystemRepresentation:error:", string, &v12);
  v4 = v12;
  if ((_DWORD)a1)
  {
    xpc_dictionary_set_string(v3, "path", string);
  }
  else
  {
    _LSDefaultLog();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      getXPCObjectForNodeAndStore((uint64_t)v4, v5, v6);

  }
  cf = 0;
  _CSStoreCreateXPCRepresentation();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7)
  {
    xpc_dictionary_set_value(v3, "store", v7);
  }
  else
  {
    _LSDefaultLog();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      getXPCObjectForNodeAndStore((id *)&cf, v8);

  }
  v9 = getpid();
  xpc_dictionary_set_uint64(v3, "insecureProcessID", v9);
  if (cf)
    CFRelease(cf);

  return v3;
}

void sub_1828D29C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  void *v10;
  void *v11;
  void *v12;

  if (cf)
    CFRelease(cf);

  _Unwind_Resume(a1);
}

void sub_1828D2AB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN14LaunchServices6RecordL18getNullPlaceholderEv_block_invoke()
{
  __LSRECORD_NULL_PLACEHOLDER__ *v0;
  void *v1;

  v0 = objc_alloc_init(__LSRECORD_NULL_PLACEHOLDER__);
  v1 = (void *)LaunchServices::Record::getNullPlaceholder(void)::result;
  LaunchServices::Record::getNullPlaceholder(void)::result = (uint64_t)v0;

}

void ___ZL27_LSBundleRecordMaybeLogInitP6FSNodeP8NSString_block_invoke()
{
  NSObject *v0;
  _BOOL4 v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  int v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;

  _LSPrivacyLog();
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = os_log_type_enabled(v0, OS_LOG_TYPE_INFO);

  if (v1)
  {
    objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "bundleURL");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "lastPathComponent");
    v10 = (id)objc_claimAutoreleasedReturnValue();

    if ((objc_msgSend(v10, "hasSuffix:", CFSTR(".app")) & 1) != 0
      || objc_msgSend(v10, "hasSuffix:", CFSTR(".appex")))
    {
      objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "bundleIdentifier");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_msgSend(v5, "hasPrefix:", CFSTR("com.apple."));

      if (v6)
      {
        objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "bundleIdentifier");
        v8 = objc_claimAutoreleasedReturnValue();
        v9 = (void *)_LSBundleRecordMaybeLogInit(FSNode *,NSString *)::myBundleIDIfEnabledAndFirstParty;
        _LSBundleRecordMaybeLogInit(FSNode *,NSString *)::myBundleIDIfEnabledAndFirstParty = v8;

      }
    }

  }
}

void sub_1828D2CC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

id _LSPrivacyLog()
{
  if (_LSPrivacyLog_onceToken != -1)
    dispatch_once(&_LSPrivacyLog_onceToken, &__block_literal_global_13_0);
  return (id)_LSPrivacyLog_log;
}

void sub_1828D2E0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828D2E88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828D3184(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id _LSDecodeURLPropertyDictionary(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  _QWORD v7[4];
  id v8;

  v1 = a1;
  objc_msgSend(v1, "objectForKeyedSubscript:", *MEMORY[0x1E0C9AC10]);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  if (v2)
  {
    v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = ___LSDecodeURLPropertyDictionary_block_invoke;
    v7[3] = &unk_1E1042020;
    v4 = v3;
    v8 = v4;
    objc_msgSend(v1, "enumerateKeysAndObjectsUsingBlock:", v7);
    v5 = objc_msgSend(v4, "copy");

    v1 = (id)v5;
  }
  return v1;
}

void sub_1828D32EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1828D39EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;

  _Unwind_Resume(a1);
}

uint64_t _LSDNCGetBundleClass(id *a1, void *a2, int a3, _DWORD *a4, _QWORD *a5)
{
  id v9;
  _LSDServiceDomain *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  _LSDServiceDomain *v15;
  uint64_t v16;
  id v17;

  v9 = a2;
  if (!a3)
  {
    v12 = _LSGetBundleClassForNode(0, v9);
    goto LABEL_5;
  }
  +[_LSDServiceDomain defaultServiceDomain]();
  v10 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
  v11 = LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)a1, v10, 0);

  if (v11)
  {
    v12 = _LSGetBundleClassForNode(v11, v9);
LABEL_5:
    *a4 = v12;
    v13 = 1;
    goto LABEL_6;
  }
  if (a5)
  {
    +[_LSDServiceDomain defaultServiceDomain]();
    v15 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
    v16 = LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)a1, v15, 0);

    if (v16)
      v17 = 0;
    else
      v17 = objc_retainAutorelease(a1[3]);
    v13 = 0;
    *a5 = v17;
  }
  else
  {
    v13 = 0;
  }
LABEL_6:

  return v13;
}

void sub_1828D3BE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id _LSGetBRDisplayNameForSideFaultFileNode(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;

  v1 = a1;
  v2 = v1;
  if (!v1)
    goto LABEL_7;
  if (!objc_msgSend(v1, "isSideFault"))
    goto LABEL_7;
  objc_msgSend(v2, "URL");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (!softLinkBRCopyRepresentedFileNameForFaultFileURL)
    goto LABEL_7;
  v4 = (void *)softLinkBRCopyRepresentedFileNameForFaultFileURL((const __CFURL *)v3);
  if (v4 && (_NSIsNSString() & 1) == 0)
  {

LABEL_7:
    v4 = 0;
  }

  return v4;
}

void sub_1828D3C94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id _LSBundleGetLocalizedNameDictionary(void *a1, uint64_t a2, void *a3, void *a4)
{
  _LSDatabase *v7;
  id v8;
  id v9;
  uint64_t v10;
  _LSDatabase *v11;
  LaunchServices::LocalizedString *v12;
  uint64_t v13;
  NSObject *v14;
  void *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  id v19;

  v7 = a1;
  v8 = a3;
  v9 = a4;
  v10 = _LSBundleGet(v7, a2);
  v11 = (_LSDatabase *)*(unsigned int *)(v10 + 112);
  if (!(_DWORD)v11)
    v11 = (_LSDatabase *)*(unsigned int *)(v10 + 104);
  v12 = (LaunchServices::LocalizedString *)LaunchServices::LocalizedString::Get((LaunchServices::LocalizedString *)v7, v11);
  if (v12)
  {
    LaunchServices::LocalizedString::getAllUnsafeLocalizations(v12, v7, 0, 0, 0);
    v13 = objc_claimAutoreleasedReturnValue();
    if (v13)
    {
      _LSDefaultLog();
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        _LSBundleGetShortDescription(v7, a2);
        objc_claimAutoreleasedReturnValue();
        _LSBundleGetLocalizedNameDictionary_cold_2();
      }

      v15 = (void *)v13;
      goto LABEL_11;
    }
  }
  _LSDefaultLog();
  v16 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    _LSBundleGetShortDescription(v7, a2);
    objc_claimAutoreleasedReturnValue();
    _LSBundleGetLocalizedNameDictionary_cold_1();
  }

  v15 = (void *)_LSBundleCopyStringDictionaryForKey(v7, a2, v8, *MEMORY[0x1E0C9AAC8], (uint64_t)v9);
  if (v15)
  {
LABEL_11:
    if (objc_msgSend(v15, "count") != 1)
      goto LABEL_16;
  }
  v17 = (void *)_LSBundleCopyStringDictionaryForKey(v7, a2, v8, *MEMORY[0x1E0C9AE88], (uint64_t)v9);
  v18 = v17;
  if (v17 && (unint64_t)objc_msgSend(v17, "count") >= 2)
  {
    v19 = v18;

    v15 = v19;
  }

LABEL_16:
  return v15;
}

void sub_1828D3E9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1828D42B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

void sub_1828D4624(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t _LSIsSetWithValuesOfClass(void *a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v6;

  v3 = a1;
  v6 = a2;
  if (a2)
    a2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E60]), "initWithObjects:count:", &v6, 1);
  v4 = _LSIsSetWithValuesOfClasses(v3, a2);

  return v4;
}

uint64_t _LSIsSetWithValuesOfClasses(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a2;
  v4 = a1;
  v5 = objc_opt_class();
  v6 = _LSIsSequenceOfClassWithValuesOfClasses(v4, v5, v3);

  return v6;
}

void sub_1828D48B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1828D4D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,id a38)
{
  void *v38;
  void *v39;
  void *v40;
  void *v41;

  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a33, 8);

  _Unwind_Resume(a1);
}

void sub_1828D4FB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828D51BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1828D5434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1828D5640(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1828D5930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

uint64_t LaunchServices::URLPropertyProvider::prepareLocalizedNameDictionaryValue(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  void *v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, void *, void *);
  void *v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[2];

  v41[1] = *MEMORY[0x1E0C80C00];
  if ((objc_msgSend(a2, "canIssueIO") & 1) != 0)
  {
    +[_LSDisplayNameConstructor displayNameConstructorsWithContextIfNeeded:node:error:](_LSDisplayNameConstructor, "displayNameConstructorsWithContextIfNeeded:node:error:", a1, a2, a6);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v10)
    {
      v18 = 0;
      goto LABEL_12;
    }
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v12 = objc_claimAutoreleasedReturnValue();
    v13 = (void *)v12;
    if (v11)
    {
      if (v12)
      {
LABEL_5:
        v33 = MEMORY[0x1E0C809B0];
        v34 = 3221225472;
        v35 = ___ZN14LaunchServices19URLPropertyProviderL35prepareLocalizedNameDictionaryValueERNS_8Database7ContextEPU34objcproto23FSNodePropertyProviding11objc_objectP11__FileCachePK10__CFStringPNS0_5StateEPU15__autoreleasingP7NSError_block_invoke;
        v36 = &unk_1E10457F0;
        v39 = a1;
        v14 = v11;
        v37 = v14;
        v15 = v13;
        v38 = v15;
        objc_msgSend(v10, "enumerateKeysAndObjectsUsingBlock:", &v33);
        v16 = (void *)objc_msgSend(v14, "copy", v33, v34, v35, v36);
        MEMORY[0x186DAD930](a3, *MEMORY[0x1E0C9AD08], v16);

        v17 = (void *)objc_msgSend(v15, "copy");
        MEMORY[0x186DAD930](a3, *MEMORY[0x1E0C9AD10], v17);

        v18 = 1;
LABEL_12:

        return v18;
      }
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Boolean LaunchServices::prepareLocalizedNameDictionaryValue(Context &, __unsafe_unretained id<FSNodePropertyProviding>, _CFURLFileCacheRef, CFStringRef, State *, NSError *__autoreleasing *)");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v29, "handleFailureInFunction:file:lineNumber:description:", v30, CFSTR("LSURLPropertyProvider.mm"), 828, CFSTR("Failed to create localized name dictionary."));

      if (v13)
        goto LABEL_5;
    }
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Boolean LaunchServices::prepareLocalizedNameDictionaryValue(Context &, __unsafe_unretained id<FSNodePropertyProviding>, _CFURLFileCacheRef, CFStringRef, State *, NSError *__autoreleasing *)");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "handleFailureInFunction:file:lineNumber:description:", v32, CFSTR("LSURLPropertyProvider.mm"), 829, CFSTR("Failed to create localized name dictionary."));

    goto LABEL_5;
  }
  _LSDefaultLog();
  v19 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    LaunchServices::URLPropertyProvider::prepareLocalizedNameDictionaryValue(v19, v20, v21, v22, v23, v24, v25, v26);

  if (a6)
  {
    v40 = *MEMORY[0x1E0CB2938];
    v41[0] = CFSTR("can't provide with mimic");
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v41, &v40, 1);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], -50, (uint64_t)"prepareLocalizedNameDictionaryValue", 817, v27);
    *a6 = (id)objc_claimAutoreleasedReturnValue();

  }
  return 0;
}

void sub_1828D5CD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

id _LSURLPropertyProviderAllKeys()
{
  if (_LSURLPropertyProviderAllKeys::onceToken != -1)
    dispatch_once(&_LSURLPropertyProviderAllKeys::onceToken, &__block_literal_global_74);
  return (id)_LSURLPropertyProviderAllKeys::result;
}

BOOL _LSURLPropertiesNeedReplacement(void *a1)
{
  void *v1;
  _BOOL8 v2;

  objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0C9AC10]);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = v1 != 0;

  return v2;
}

id _LSResolveRemoteURLPropertiesWithMimic(void *a1, void *a2, void *a3, uint64_t a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;

  v7 = a1;
  v8 = a2;
  v9 = a3;
  objc_msgSend(v7, "URL");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "ls_setPreferredLocalizations:", v8);
  objc_msgSend(v10, "setTemporaryResourceValue:forKey:", v7, CFSTR("_LSMimicKey"));
  objc_msgSend(v9, "allObjects");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "resourceValuesForKeys:error:", v11, a4);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v10, "removeCachedResourceValueForKey:", CFSTR("_LSMimicKey"));
  return v12;
}

void sub_1828D5EA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1828D5F38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1828D6000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1828D608C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

unsigned int *_FSEventStreamRetainAndReturnSelf(unsigned int *a1)
{
  unsigned int v2;
  NSObject *v3;

  if (a1)
  {
    do
      v2 = __ldaxr(a1);
    while (__stlxr(v2 + 1, a1));
  }
  else
  {
    v3 = fsevent_default_log();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      _FSEventStreamRetainAndReturnSelf_cold_1();
  }
  return a1;
}

void ***_ZZZN14LaunchServices15DatabaseContextL26getPerThreadStateReferenceEvEUb_EN3__08__invokeEPv(void ***result)
{
  void ***v1;
  void **v2;
  void **v3;
  void **v4;

  if (result)
  {
    v1 = result;
    v2 = *result;
    if (v2 && *((_BYTE *)v1 + 16))
      _LSContextDestroy(v2);
    v3 = v1[1];
    *v1 = 0;
    v1[1] = 0;

    *((_BYTE *)v1 + 16) = 0;
    v4 = v1[3];
    v1[3] = 0;

    JUMPOUT(0x186DADEF4);
  }
  return result;
}

void sub_1828D6378(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

void sub_1828D64CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *availabilityStateForServiceDomain(_LSDServiceDomain *a1)
{
  _LSDServiceDomain *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t *v6;

  v1 = a1;
  if (availabilityStateForServiceDomain(_LSDServiceDomain *)::onceToken != -1)
    dispatch_once(&availabilityStateForServiceDomain(_LSDServiceDomain *)::onceToken, &__block_literal_global_21);
  os_unfair_lock_lock((os_unfair_lock_t)&availabilityStateForServiceDomain(_LSDServiceDomain *)::m);
  v2 = availabilityStateForServiceDomain(_LSDServiceDomain *)::sessionQuickAvailabilityMap;
  v5 = -[_LSDServiceDomain resolvedSessionKey]((uint64_t)v1);
  v6 = &v5;
  v3 = std::__hash_table<std::__hash_value_type<LSSessionKey,LSQuickSessionAvailabilityState>,std::__unordered_map_hasher<LSSessionKey,std::__hash_value_type<LSSessionKey,LSQuickSessionAvailabilityState>,LSSessionKeyHasher,LSSessionKeyComparator,true>,std::__unordered_map_equal<LSSessionKey,std::__hash_value_type<LSSessionKey,LSQuickSessionAvailabilityState>,LSSessionKeyComparator,LSSessionKeyHasher,true>,std::allocator<std::__hash_value_type<LSSessionKey,LSQuickSessionAvailabilityState>>>::__emplace_unique_key_args<LSSessionKey,std::piecewise_construct_t const&,std::tuple<LSSessionKey&&>,std::tuple<>>(v2, (unsigned int *)&v5, (uint64_t)&std::piecewise_construct, &v6)+ 3;
  os_unfair_lock_unlock((os_unfair_lock_t)&availabilityStateForServiceDomain(_LSDServiceDomain *)::m);

  return v3;
}

void sub_1828D65E4(_Unwind_Exception *a1)
{
  void *v1;

  os_unfair_lock_unlock((os_unfair_lock_t)&availabilityStateForServiceDomain(_LSDServiceDomain *)::m);

  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<LSSessionKey,LSQuickSessionAvailabilityState>,std::__unordered_map_hasher<LSSessionKey,std::__hash_value_type<LSSessionKey,LSQuickSessionAvailabilityState>,LSSessionKeyHasher,LSSessionKeyComparator,true>,std::__unordered_map_equal<LSSessionKey,std::__hash_value_type<LSSessionKey,LSQuickSessionAvailabilityState>,LSSessionKeyComparator,LSSessionKeyHasher,true>,std::allocator<std::__hash_value_type<LSSessionKey,LSQuickSessionAvailabilityState>>>::__emplace_unique_key_args<LSSessionKey,std::piecewise_construct_t const&,std::tuple<LSSessionKey&&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  if (*((_BYTE *)a2 + 4))
    v7 = 1;
  else
    v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = v7;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        v12 = *(_QWORD *)a2;
        do
        {
          v13 = v11[1];
          if (v13 == v7)
          {
            v14 = v11[2];
            if ((v14 & 0x100000000) != 0)
            {
              if ((v12 & 0x100000000) != 0)
                return v11;
            }
            else if ((v12 & 0x100000000) == 0 && (_DWORD)v14 == (_DWORD)v12)
            {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v13 >= v8)
                v13 %= v8;
            }
            else
            {
              v13 &= v8 - 1;
            }
            if (v13 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x30uLL);
  *v11 = 0;
  v11[1] = v7;
  v15 = **a4;
  v11[4] = 0;
  v11[5] = 0;
  v11[2] = v15;
  v11[3] = 0;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v8 || (float)(v17 * (float)v8) < v16)
  {
    v18 = 1;
    if (v8 >= 3)
      v18 = (v8 & (v8 - 1)) != 0;
    v19 = v18 | (2 * v8);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__rehash<true>(a1, v21);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *v11 = *v23;
LABEL_46:
    *v23 = v11;
    goto LABEL_47;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v22 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    v24 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v24 >= v8)
        v24 %= v8;
    }
    else
    {
      v24 &= v8 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_46;
  }
LABEL_47:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_1828D6830(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1828D6A6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v7 = v6;

  _Unwind_Resume(a1);
}

void __mutateSubscriberCountForNotificationName_block_invoke()
{
  id v0;
  void *v1;

  v0 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v1 = (void *)mutateSubscriberCountForNotificationName_notificationSubscriberCounts;
  mutateSubscriberCountForNotificationName_notificationSubscriberCounts = (uint64_t)v0;

}

void ___ZN14LaunchServices10DMFSupportL10getMonitorEb_block_invoke(LaunchServices::DMFSupport *a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_msgSend(objc_alloc((Class)LaunchServices::DMFSupport::getDMFApplicationPolicyMonitorClass(a1)), "initWithPolicyChangeHandler:", &__block_literal_global_13);
  v2 = (void *)LaunchServices::DMFSupport::getMonitor(BOOL)::cachingMonitor;
  LaunchServices::DMFSupport::getMonitor(BOOL)::cachingMonitor = v1;

  LaunchServices::DMFSupport::reloadAllPolicies((void *)LaunchServices::DMFSupport::getMonitor(BOOL)::cachingMonitor);
}

Class LaunchServices::DMFSupport::initDMFApplicationPolicyMonitor(LaunchServices::DMFSupport *this)
{
  Class result;

  if (!LaunchServices::DMFSupport::DeviceManagementLibrary(void)::frameworkLibrary)
    LaunchServices::DMFSupport::DeviceManagementLibrary(void)::frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/DeviceManagement.framework/DeviceManagement", 2);
  result = objc_getClass("DMFApplicationPolicyMonitor");
  LaunchServices::DMFSupport::classDMFApplicationPolicyMonitor = (uint64_t)result;
  LaunchServices::DMFSupport::getDMFApplicationPolicyMonitorClass = (uint64_t (*)(LaunchServices::DMFSupport *__hidden))LaunchServices::DMFSupport::DMFApplicationPolicyMonitorFunction;
  return result;
}

void sub_1828D6EFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

id _LSEncodeURLPropertyDictionary(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  _QWORD v7[4];
  id v8;

  v1 = a1;
  objc_msgSend(v1, "objectForKeyedSubscript:", *MEMORY[0x1E0C9AC10]);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  if (v2)
  {
    v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = ___LSEncodeURLPropertyDictionary_block_invoke;
    v7[3] = &unk_1E1042020;
    v4 = v3;
    v8 = v4;
    objc_msgSend(v1, "enumerateKeysAndObjectsUsingBlock:", v7);
    v5 = objc_msgSend(v4, "copy");

    v1 = (id)v5;
  }
  return v1;
}

void sub_1828D6FF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1828D7168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

id LaunchServices::URLOverrides::getURLOverrideCommon(LaunchServices::URLOverrides *this, NSURL *a2)
{
  LaunchServices::URLOverrides *v3;
  LaunchServices::URLOverrides *v4;
  NSObject *p_super;
  uint64_t v6;
  LaunchServices::URLOverrides *v7;
  void *v8;
  _LSURLOverride *v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  _QWORD v15[4];
  LaunchServices::URLOverrides *v16;
  uint64_t *v17;
  void (*v18[4])(_QWORD, _QWORD);
  NSObject *v19;
  uint64_t v20;
  id *v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  void (*v24)(uint64_t);
  id v25;

  v3 = this;
  v20 = 0;
  v21 = (id *)&v20;
  v22 = 0x3032000000;
  v23 = __Block_byref_object_copy__47;
  v24 = __Block_byref_object_dispose__47;
  v25 = 0;
  v4 = (LaunchServices::URLOverrides *)_os_feature_enabled_impl();
  if ((_DWORD)v4)
  {
    LaunchServices::URLOverrides::getLog(v4);
    p_super = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(p_super, OS_LOG_TYPE_DEBUG))
      -[_LSURLOverride initWithOriginalURL:checkingForAvailableApplications:].cold.3();
  }
  else if (_LSCurrentProcessMayMapDatabase()
         && (objc_msgSend((id)__LSDefaultsGetSharedInstance(), "isServer") & 1) == 0)
  {
    v9 = -[_LSURLOverride initWithOriginalURL:]([_LSURLOverride alloc], "initWithOriginalURL:", v3);
    p_super = &v9->super;
    if (v9)
    {
      -[_LSURLOverride overrideURL](v9, "overrideURL");
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = v21[5];
      v21[5] = (id)v10;

    }
  }
  else
  {
    v6 = MEMORY[0x1E0C809B0];
    v18[0] = (void (*)(_QWORD, _QWORD))MEMORY[0x1E0C809B0];
    v18[1] = (void (*)(_QWORD, _QWORD))3221225472;
    v18[2] = (void (*)(_QWORD, _QWORD))___ZN14LaunchServices12URLOverridesL20getURLOverrideCommonEP5NSURL_block_invoke;
    v18[3] = (void (*)(_QWORD, _QWORD))&unk_1E10400E0;
    v7 = v3;
    v19 = v7;
    +[_LSDService synchronousXPCProxyWithErrorHandler:]((uint64_t)_LSDOpenService, v18);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v15[0] = v6;
    v15[1] = 3221225472;
    v15[2] = ___ZN14LaunchServices12URLOverridesL20getURLOverrideCommonEP5NSURL_block_invoke_180;
    v15[3] = &unk_1E1045788;
    v17 = &v20;
    v16 = v7;
    objc_msgSend(v8, "getURLOverrideForURL:completionHandler:", v16, v15);

    p_super = v19;
  }

  v12 = v21[5];
  if (!v12)
  {
    objc_storeStrong(v21 + 5, this);
    v12 = v21[5];
  }
  v13 = v12;
  _Block_object_dispose(&v20, 8);

  return v13;
}

void sub_1828D7434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  void *v26;
  void *v27;

  _Block_object_dispose(&a21, 8);
  _Unwind_Resume(a1);
}

void sub_1828D7D58(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZL35_lock_categorizeSelectorWithRuntimeP13objc_selector_block_invoke()
{
  uint64_t v0;
  uint64_t result;
  _QWORD v2[6];

  v2[5] = *MEMORY[0x1E0C80C00];
  v0 = operator new();
  v2[0] = sel_canIssueIO;
  v2[1] = sel_URL;
  v2[2] = sel_getResourceValue_forKey_options_error_;
  v2[3] = sel_getHFSType_creator_error_;
  v2[4] = sel_childNodeWithRelativePathExists_;
  result = std::unordered_set<objc_selector *>::unordered_set(v0, v2, 5);
  _lock_categorizeSelectorWithRuntime(objc_selector *)::knownExceptions = v0;
  return result;
}

void sub_1828D7E1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DADEF4](v1, 0x10A0C408EF24B1CLL);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<objc_selector *>::unordered_set(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 8 * a3;
    do
    {
      std::__hash_table<objc_selector *,std::hash<objc_selector *>,std::equal_to<objc_selector *>,std::allocator<objc_selector *>>::__emplace_unique_key_args<objc_selector *,objc_selector * const&>(a1, a2, a2);
      ++a2;
      v5 -= 8;
    }
    while (v5);
  }
  return a1;
}

void sub_1828D7EA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<objc_selector *,std::hash<objc_selector *>,std::equal_to<objc_selector *>,std::allocator<objc_selector *>>::__emplace_unique_key_args<objc_selector *,objc_selector * const&>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x18uLL);
  *i = 0;
  i[1] = v8;
  i[2] = *a3;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    v16 = 1;
    if (v9 >= 3)
      v16 = (v9 & (v9 - 1)) != 0;
    v17 = v16 | (2 * v9);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__rehash<true>(a1, v19);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v21)
  {
    *i = *v21;
LABEL_38:
    *v21 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9)
        v22 %= v9;
    }
    else
    {
      v22 &= v9 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1828D80F0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t initMCEffectiveSettingsChangedNotification()
{
  void *v0;
  uint64_t result;

  v0 = (void *)ManagedConfigurationLibrary_frameworkLibrary;
  if (!ManagedConfigurationLibrary_frameworkLibrary)
  {
    v0 = dlopen("/System/Library/PrivateFrameworks/ManagedConfiguration.framework/ManagedConfiguration", 2);
    ManagedConfigurationLibrary_frameworkLibrary = (uint64_t)v0;
  }
  result = *(_QWORD *)dlsym(v0, "MCEffectiveSettingsChangedNotification");
  constantMCEffectiveSettingsChangedNotification = result;
  getMCEffectiveSettingsChangedNotification[0] = MCEffectiveSettingsChangedNotificationFunction;
  return result;
}

void ___ZN14LaunchServices12URLOverridesL6getLogEv_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.launchservices", "urloverrides");
  v1 = (void *)LaunchServices::URLOverrides::getLog(void)::result;
  LaunchServices::URLOverrides::getLog(void)::result = (uint64_t)v0;

}

void ___ZL12getEPFromLSDP8NSStringjPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a3);
}

BOOL _LSCopyServerStore(void *a1, char a2, void **a3, _QWORD *a4, id *a5)
{
  __int128 v6;
  int v7;
  int v8;
  _LSDServiceDomain *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  uint64_t v16;
  NSObject *v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  id v24;
  id v25;
  id v26;
  void *v27;
  NSObject *v28;
  int v29;
  _BOOL4 v30;
  void *v31;
  _BOOL4 v32;
  void *v33;
  _BOOL4 v34;
  uint64_t v35;
  void *v36;
  void *v37;
  _BOOL4 v38;
  NSObject *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v44;
  __int128 v48;
  void *v49;
  useconds_t v50;
  uint64_t v51;
  uint64_t v52;
  id v54;
  uint8_t buf[8];
  uint64_t v58;
  uint64_t (*v59)(uint64_t);
  void *v60;
  id v61;
  _QWORD v62[4];
  id v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t (*v67)(uint64_t, uint64_t);
  void (*v68)(uint64_t);
  id v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t (*v77)(uint64_t, uint64_t);
  void (*v78)(uint64_t);
  id v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t (*v83)(uint64_t, uint64_t);
  void (*v84)(uint64_t);
  id v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t (*v89)(uint64_t, uint64_t);
  void (*v90)(uint64_t);
  id v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  char v95;
  uint8_t v96[4];
  uint64_t v97;
  __int16 v98;
  uint64_t v99;
  __int16 v100;
  uint64_t v101;
  uint8_t v102[8];
  uint64_t v103;
  void (*v104)(_QWORD *, void *, void *, void *, char, void *);
  void *v105;
  uint64_t *v106;
  uint64_t *v107;
  uint64_t *v108;
  uint64_t *v109;
  uint64_t *v110;
  uint64_t *v111;
  uint64_t v112;

  v112 = *MEMORY[0x1E0C80C00];
  v54 = a1;
  v7 = 0;
  if (sLastCallToMapDatabaseFailed)
    v8 = 0;
  else
    v8 = 100000;
  v50 = v8;
  v49 = (void *)*MEMORY[0x1E0CB2FE0];
  v51 = *MEMORY[0x1E0CB28A8];
  v52 = *MEMORY[0x1E0CB2F90];
  *(_QWORD *)&v6 = 138478339;
  v48 = v6;
  while (1)
  {
    v9 = (_LSDServiceDomain *)v54;
    v92 = 0;
    v93 = &v92;
    v94 = 0x2020000000;
    v95 = 0;
    v86 = 0;
    v87 = &v86;
    v88 = 0x3032000000;
    v89 = __Block_byref_object_copy__24;
    v90 = __Block_byref_object_dispose__24;
    v91 = 0;
    v80 = 0;
    v81 = &v80;
    v82 = 0x3032000000;
    v83 = __Block_byref_object_copy__24;
    v84 = __Block_byref_object_dispose__24;
    v85 = 0;
    v74 = 0;
    v75 = &v74;
    v76 = 0x3032000000;
    v77 = __Block_byref_object_copy__24;
    v78 = __Block_byref_object_dispose__24;
    v79 = 0;
    v70 = 0;
    v71 = &v70;
    v72 = 0x2020000000;
    v73 = 0;
    v64 = 0;
    v65 = &v64;
    v66 = 0x3032000000;
    v67 = __Block_byref_object_copy__24;
    v68 = __Block_byref_object_dispose__24;
    v69 = 0;
    v10 = (void *)MEMORY[0x186DAE7A0]();
    *(_QWORD *)v102 = MEMORY[0x1E0C809B0];
    v103 = 3221225472;
    v104 = ___LSCopyStoreFromServer_block_invoke;
    v105 = &unk_1E1043D60;
    v106 = &v86;
    v107 = &v80;
    v108 = &v74;
    v109 = &v70;
    v110 = &v64;
    v111 = &v92;
    v11 = (void *)MEMORY[0x186DAE9BC](v102);
    v12 = (void *)objc_opt_class();
    _LSDServiceGetXPCConnection(v12, (uint64_t)v9);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v62[0] = MEMORY[0x1E0C809B0];
    v62[1] = 3221225472;
    v62[2] = ___LSCopyStoreFromServer_block_invoke_2;
    v62[3] = &unk_1E1040A40;
    v14 = v11;
    v63 = v14;
    objc_msgSend(v13, "synchronousRemoteObjectProxyWithErrorHandler:", v62);
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v15, "getServerStoreNonBlockingWithCompletionHandler:", v14);
    v16 = v75[5];
    if (!*((_BYTE *)v93 + 24) && (a2 & 1) == 0 && v16)
    {
      _LSDefaultLog();
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_182882000, v17, OS_LOG_TYPE_DEFAULT, "Database was seeding; client will retry and block. This is not an error.",
          buf,
          2u);
      }

      LSResetDatabaseKnownAvailable(v9);
      v18 = objc_alloc(MEMORY[0x1E0CB3B38]);
      v19 = (void *)objc_msgSend(v18, "initWithListenerEndpoint:", v75[5]);
      LSDatabaseBlockingFetchInterface();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "setRemoteObjectInterface:", v20);

      objc_msgSend(v19, "synchronousRemoteObjectProxyWithErrorHandler:", &__block_literal_global_36);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "resume");
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      v58 = 3221225472;
      v59 = ___LSCopyStoreFromServer_block_invoke_54;
      v60 = &unk_1E1043D88;
      v61 = v14;
      v22 = (void *)MEMORY[0x186DAE9BC](buf);
      if (_LSCopyStoreFromServer_onceToken != -1)
        dispatch_once(&_LSCopyStoreFromServer_onceToken, &__block_literal_global_58_0);
      if (objc_msgSend(MEMORY[0x1E0CB3978], "isMainThread", v48))
      {
        if (*((_BYTE *)v71 + 24))
          __LAUNCH_SERVICES_IS_WAITING_ON_THE_MAIN_QUEUE_DUE_TO_A_MANUAL_REBUILD__(v21, (uint64_t)v22);
        else
          __LAUNCH_SERVICES_WAS_ASKED_TO_PERFORM_BLOCKING_IO_ON_THE_MAIN_QUEUE__(v21, (uint64_t)v22);
      }
      else if (*((_BYTE *)v71 + 24))
      {
        __LAUNCH_SERVICES_IS_RESEEDING_ITS_DATABASE_DUE_TO_A_MANUAL_REBUILD_AND_MAY_BLOCK__(v21, (uint64_t)v22);
      }
      else
      {
        __LAUNCH_SERVICES_IS_RESEEDING_ITS_DATABASE_AND_MAY_BLOCK__(v21, (uint64_t)v22);
      }
      objc_msgSend(v19, "invalidate");

      goto LABEL_23;
    }
    if ((a2 & 1) != 0 && v16)
    {
      _LSMakeNSErrorImpl(v49, 36, (uint64_t)"_LSCopyStoreFromServer", 458, 0);
      v23 = objc_claimAutoreleasedReturnValue();
      v19 = (void *)v65[5];
      v65[5] = v23;
LABEL_23:

    }
    objc_autoreleasePoolPop(v10);
    if (!*((_BYTE *)v93 + 24))
    {
      _LSDefaultLog();
      v28 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        v40 = v87[5];
        v41 = v81[5];
        v42 = v65[5];
        *(_DWORD *)v96 = v48;
        v97 = v40;
        v98 = 2113;
        v99 = v41;
        v100 = 2114;
        v101 = v42;
        _os_log_error_impl(&dword_182882000, v28, OS_LOG_TYPE_ERROR, "LaunchServices: store %{private}@ or url %{private}@ was nil: %{public}@", v96, 0x20u);
      }

      v26 = (id)v65[5];
      v27 = 0;
      goto LABEL_32;
    }
    if (a4)
    {
      v24 = (id)v87[5];
      _CSStoreSetMutable();
      *a4 = v24;
    }
    if (a3)
    {
      v25 = (id)v81[5];
      v26 = 0;
      v27 = *a3;
      *a3 = v25;
LABEL_32:

      goto LABEL_34;
    }
    v26 = 0;
LABEL_34:
    v29 = *((unsigned __int8 *)v93 + 24);
    v30 = *((_BYTE *)v93 + 24) != 0;
    _Block_object_dispose(&v64, 8);

    _Block_object_dispose(&v70, 8);
    _Block_object_dispose(&v74, 8);

    _Block_object_dispose(&v80, 8);
    _Block_object_dispose(&v86, 8);

    _Block_object_dispose(&v92, 8);
    if (v30)
    {
      sLastCallToMapDatabaseFailed = 0;
      goto LABEL_70;
    }
    if (a5)
      objc_storeStrong(a5, v26);
    sLastCallToMapDatabaseFailed = 1;
    objc_msgSend(v26, "domain", v48);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v31, "isEqual:", v52) && objc_msgSend(v26, "code") == -54)
    {
      v32 = _LSCurrentProcessMayMapDatabase() == 0;

      if (v32)
      {
        _LSDefaultLog();
        v44 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
          _LSCopyServerStore_cold_1();
        goto LABEL_69;
      }
    }
    else
    {

    }
    if ((a2 & 1) != 0)
    {
      objc_msgSend(v26, "domain");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_msgSend(v33, "isEqual:", v49) & 1) != 0)
      {
        v34 = objc_msgSend(v26, "code") == 36;

        if (v34)
        {
          _LSDefaultLog();
          v44 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
            _LSCopyServerStore_cold_4();
          goto LABEL_69;
        }
      }
      else
      {

      }
    }
    if (!v7)
    {
      v35 = _LSGetAuditTokenForSelf();
      v36 = (void *)objc_opt_class();
      if (!_LSCheckLSDServiceAccessForAuditToken(v35, v36))
        break;
    }
    objc_msgSend(v26, "domain");
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v37, "isEqual:", v51))
    {
      v38 = objc_msgSend(v26, "code") == 4099;

      if (v38)
      {
        _LSDefaultLog();
        v44 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
          _LSCopyServerStore_cold_3();
        goto LABEL_69;
      }
    }
    else
    {

    }
    _LSDefaultLog();
    v39 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v102 = 67109120;
      *(_DWORD *)&v102[4] = v7;
      _os_log_error_impl(&dword_182882000, v39, OS_LOG_TYPE_ERROR, "LaunchServices: Database mapping failed, retries = %d", v102, 8u);
    }

    usleep(v50);
    if (++v7 == 10)
      goto LABEL_71;
  }
  _LSDefaultLog();
  v44 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
    _LSCopyServerStore_cold_2();
LABEL_69:

LABEL_70:
LABEL_71:

  return v29 != 0;
}

void sub_1828D8D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose(&a37, 8);
  _Block_object_dispose(&a41, 8);
  _Block_object_dispose(&a47, 8);
  _Block_object_dispose(&a53, 8);
  _Block_object_dispose(&a59, 8);
  _Unwind_Resume(a1);
}

id init_ISIconDataForResourceProxy(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;

  v5 = a1;
  v6 = (void *)IconServicesLibrary_frameworkLibrary;
  if (!IconServicesLibrary_frameworkLibrary)
  {
    v6 = dlopen("/System/Library/PrivateFrameworks/IconServices.framework/IconServices", 2);
    IconServicesLibrary_frameworkLibrary = (uint64_t)v6;
  }
  softLink_ISIconDataForResourceProxy[0] = (uint64_t (*)())dlsym(v6, "_ISIconDataForResourceProxy");
  ((void (*)(id, uint64_t, uint64_t))softLink_ISIconDataForResourceProxy[0])(v5, a2, a3);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

{
  id v5;
  void *v6;
  void *v7;

  v5 = a1;
  v6 = (void *)IconServicesLibrary(void)::frameworkLibrary;
  if (!IconServicesLibrary(void)::frameworkLibrary)
  {
    v6 = dlopen("/System/Library/PrivateFrameworks/IconServices.framework/IconServices", 2);
    IconServicesLibrary(void)::frameworkLibrary = (uint64_t)v6;
  }
  softLink_ISIconDataForResourceProxy = (uint64_t (*)())dlsym(v6, "_ISIconDataForResourceProxy");
  ((void (*)(id, uint64_t, uint64_t))softLink_ISIconDataForResourceProxy)(v5, a2, a3);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

id init_ISIconDataForResourceProxy_0(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;

  v5 = a1;
  v6 = (void *)IconServicesLibrary_frameworkLibrary_2;
  if (!IconServicesLibrary_frameworkLibrary_2)
  {
    v6 = dlopen("/System/Library/PrivateFrameworks/IconServices.framework/IconServices", 2);
    IconServicesLibrary_frameworkLibrary_2 = (uint64_t)v6;
  }
  softLink_ISIconDataForResourceProxy_0[0] = (uint64_t (*)())dlsym(v6, "_ISIconDataForResourceProxy");
  ((void (*)(id, uint64_t, uint64_t))softLink_ISIconDataForResourceProxy_0[0])(v5, a2, a3);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

id init_ISIconDataForResourceProxy_1(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;

  v5 = a1;
  v6 = (void *)IconServicesLibrary_frameworkLibrary_3;
  if (!IconServicesLibrary_frameworkLibrary_3)
  {
    v6 = dlopen("/System/Library/PrivateFrameworks/IconServices.framework/IconServices", 2);
    IconServicesLibrary_frameworkLibrary_3 = (uint64_t)v6;
  }
  softLink_ISIconDataForResourceProxy_1 = (uint64_t (*)())dlsym(v6, "_ISIconDataForResourceProxy");
  ((void (*)(id, uint64_t, uint64_t))softLink_ISIconDataForResourceProxy_1)(v5, a2, a3);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

void sub_1828D90F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void LaunchServices::BindingEvaluation::addClaims(LaunchServices::BindingEvaluation *this, LaunchServices::BindingEvaluation::State *a2)
{
  uint64_t v3;
  id v4;
  __CFString *v5;
  __CFString *v6;
  int StringForCFString;
  NSObject *v8;
  NSString *v9;
  const __CFString *v10;
  int v11;
  NSObject *v12;
  NSString *v13;
  _BOOL4 v14;
  NSObject *v15;
  _BOOL4 v16;
  NSString *v17;
  void *v18;
  uint64_t v19;
  NSString *v20;
  NSObject *v21;
  unint64_t v22;
  NSString *v23;
  _QWORD v24[3];
  int v25;
  _QWORD v26[3];
  int v27;
  __int128 buf;
  void *v29;
  void *v30;
  LaunchServices::BindingEvaluation *v31;
  _QWORD *v32;
  LaunchServices::BindingEvaluation *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)this + 29);
  if (v3)
    LaunchServices::BindingEvaluation::addClaimsInBindingMap((uint64_t **)this, 0, *(_DWORD *)(v3 + 12));
  if (LaunchServices::BindingEvaluation::State::shouldBindToTagClaims(this))
  {
    v4 = *((id *)this + 1);
    if (v4)
    {

      goto LABEL_6;
    }
    if (!*((_QWORD *)this + 27))
    {
LABEL_6:
      if (*((_QWORD *)this + 1))
      {
        LaunchServices::BindingEvaluation::State::getExtension(this);
        v5 = (__CFString *)objc_claimAutoreleasedReturnValue();
        v6 = v5;
        if (v5 && -[__CFString length](v5, "length"))
        {
          StringForCFString = _LSDatabaseGetStringForCFString(**(void ***)this, v6, 1);
          LaunchServices::BindingEvaluation::addClaimsInBindingMap((uint64_t **)this, 1u, StringForCFString);
        }

      }
      goto LABEL_14;
    }
    v26[0] = 0;
    v26[1] = v26;
    v26[2] = 0x2020000000;
    v27 = 0;
    v24[0] = 0;
    v24[1] = v24;
    v24[2] = 0x2020000000;
    v25 = -1;
    *(_QWORD *)&buf = MEMORY[0x1E0C809B0];
    *((_QWORD *)&buf + 1) = 3221225472;
    v29 = ___ZN14LaunchServices17BindingEvaluationL27addExtensionAndOSTypeClaimsERNS0_5StateE_block_invoke;
    v30 = &unk_1E1041930;
    v31 = (LaunchServices::BindingEvaluation *)v26;
    v32 = v24;
    v33 = this;
    v18 = (void *)MEMORY[0x186DAE9BC](&buf);
    v19 = *((_QWORD *)this + 29);
    if (v19)
    {
      _LSBindingListEnumerate(**(void ***)this, *(unsigned int *)(v19 + 80), v18);
    }
    else if (*((_BYTE *)this + 240))
    {
      _UTDynamicEnumerateTagsFoundInDatabase(**(_QWORD **)this, *((const __CFString **)this + 27), (uint64_t)v18);
    }

    _Block_object_dispose(v24, 8);
    _Block_object_dispose(v26, 8);
  }
  else
  {
    _LSBindingLog();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_182882000, v8, OS_LOG_TYPE_DEBUG, "Skipping tag claims because the item is not a regular file or package and any UTI has no tags", (uint8_t *)&buf, 2u);
    }

    LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)CFSTR("Skipping tag claims because the item is not a regular file or package and any UTI has no tags"), v9);
  }
LABEL_14:
  if (!*((_QWORD *)this + 1))
  {
    v10 = (const __CFString *)*((_QWORD *)this + 2);
    if (v10)
    {
      v11 = _LSDatabaseGetStringForCFString(**(void ***)this, v10, 1);
      LaunchServices::BindingEvaluation::addClaimsInBindingMap((uint64_t **)this, 5u, v11);
    }
  }
  if ((*((_BYTE *)this + 117) & 0x20) != 0)
  {
    v14 = *((_QWORD *)this + 27) == 0;
    _LSBindingLog();
    v15 = objc_claimAutoreleasedReturnValue();
    v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG);
    if (v14)
    {
      if (v16)
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_182882000, v15, OS_LOG_TYPE_DEBUG, "Skipping wildcard document claims because we are not binding to a UTI", (uint8_t *)&buf, 2u);
      }

      LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)CFSTR("Skipping wildcard document claims because we are not binding to a UTI"), v20);
    }
    else
    {
      if (v16)
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_182882000, v15, OS_LOG_TYPE_DEBUG, "Adding wildcard document claims from all applications", (uint8_t *)&buf, 2u);
      }

      LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)CFSTR("Adding wildcard document claims from all applications"), v17);
      *(_QWORD *)&buf = MEMORY[0x1E0C809B0];
      *((_QWORD *)&buf + 1) = 3221225472;
      v29 = ___ZN14LaunchServices17BindingEvaluationL17addWildcardClaimsERNS0_5StateE_block_invoke;
      v30 = &__block_descriptor_40_e19_v32__0I8r_v12I20_24l;
      v31 = this;
      _CSStoreEnumerateUnits();
    }
  }
  else
  {
    _LSBindingLog();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_182882000, v12, OS_LOG_TYPE_DEBUG, "Skipping legacy wildcard document claims", (uint8_t *)&buf, 2u);
    }

    LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)CFSTR("Skipping legacy wildcard document claims"), v13);
  }
  _LSBindingLog();
  v21 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
  {
    v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 23) - *((_QWORD *)this + 22)) >> 5);
    LODWORD(buf) = 134217984;
    *(_QWORD *)((char *)&buf + 4) = v22;
    _os_log_impl(&dword_182882000, v21, OS_LOG_TYPE_DEBUG, "%llu bindings found", (uint8_t *)&buf, 0xCu);
  }

  LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)CFSTR("%llu bindings found"), v23, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 23) - *((_QWORD *)this + 22)) >> 5));
}

void sub_1828D9534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);

  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

BOOL LaunchServices::BindingEvaluation::State::shouldBindToTagClaims(LaunchServices::BindingEvaluation::State *this)
{
  const LaunchServices::BindingEvaluation::State *TypeData;
  const __CFString *v3;
  int v4;
  _LSDatabase *v5;
  const LaunchServices::BindingEvaluation::State *TypeResolvable;
  const __CFString *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  const LaunchServices::BindingEvaluation::State *TypeDirectory;
  const __CFString *v15;
  const LaunchServices::BindingEvaluation::State *TypePackage;
  const __CFString *v17;
  const LaunchServices::BindingEvaluation::State *TypeAVCHDCollection;
  const __CFString *v19;
  int IsAVCHDCollection;
  NSObject *v21;
  const char *v22;
  NSString *v23;
  const char *v24;
  void *TagSpecification;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;
  __int16 v37;
  _BOOL4 v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 257))
    return *((_BYTE *)this + 256) != 0;
  if (!*((_QWORD *)this + 29) && !*((_BYTE *)this + 240))
  {
    v9 = (void *)*((_QWORD *)this + 1);
    if (!v9)
    {
      v13 = 0;
      goto LABEL_12;
    }
    if (objc_msgSend(*((id *)this + 1), "isRegularFile"))
    {
      v8 = objc_msgSend(v9, "isResolvable");
      goto LABEL_6;
    }
    if (_LSNodeIsPackage(*(LSContext **)this, v9, 0))
    {
      IsAVCHDCollection = _LSNodeIsAVCHDCollection(v9);
      v13 = 0;
      v9 = 0;
      v12 = 0;
      v11 = IsAVCHDCollection != 0;
      goto LABEL_21;
    }
    goto LABEL_11;
  }
  TypeData = (const LaunchServices::BindingEvaluation::State *)_UTTypeGetTypeData(**(_LSDatabase ***)this);
  v4 = LaunchServices::BindingEvaluation::conformsTo((void ***)this, TypeData, CFSTR("public.data"), v3);
  v5 = **(_LSDatabase ***)this;
  if (v4)
  {
    TypeResolvable = (const LaunchServices::BindingEvaluation::State *)_UTTypeGetTypeResolvable(v5);
    v8 = LaunchServices::BindingEvaluation::conformsTo((void ***)this, TypeResolvable, CFSTR("com.apple.resolvable"), v7);
LABEL_6:
    v9 = (void *)v8;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 1;
    goto LABEL_22;
  }
  TypeDirectory = (const LaunchServices::BindingEvaluation::State *)_UTTypeGetTypeDirectory(v5);
  if (LaunchServices::BindingEvaluation::conformsTo((void ***)this, TypeDirectory, CFSTR("public.directory"), v15))
  {
    TypePackage = (const LaunchServices::BindingEvaluation::State *)_UTTypeGetTypePackage(**(_LSDatabase ***)this);
    if (LaunchServices::BindingEvaluation::conformsTo((void ***)this, TypePackage, CFSTR("com.apple.package"), v17))
    {
      TypeAVCHDCollection = (const LaunchServices::BindingEvaluation::State *)_UTTypeGetTypeAVCHDCollection(**(_LSDatabase ***)this);
      v11 = LaunchServices::BindingEvaluation::conformsTo((void ***)this, TypeAVCHDCollection, CFSTR("public.avchd-collection"), v19);
      v13 = 0;
      v9 = 0;
      v12 = 0;
LABEL_21:
      v10 = 1;
      goto LABEL_22;
    }
    goto LABEL_11;
  }
  if (*((_QWORD *)this + 1))
  {
LABEL_11:
    v13 = 0;
    v9 = 0;
LABEL_12:
    v10 = 0;
    v11 = 0;
    v12 = 0;
    goto LABEL_22;
  }
  if (*((_QWORD *)this + 29))
  {
    v13 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = _LSBindingListGetEntryCount() != 0;
  }
  else
  {
    TagSpecification = (void *)_UTDynamicGetTagSpecification(*((const __CFString **)this + 27));
    v12 = TagSpecification != 0;

    v13 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
  }
LABEL_22:
  *((_WORD *)this + 128) = v12 | ~(((unsigned __int16)v9 | ~(_WORD)v13) & (v11 | ~(_WORD)v10)) | 0x100;
  _LSBindingLog();
  v21 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
  {
    if (*((_BYTE *)this + 256))
      v22 = "";
    else
      v22 = " NOT";
    *(_DWORD *)buf = 136447490;
    v28 = v22;
    v29 = 1024;
    v30 = v13;
    v31 = 1024;
    v32 = (int)v9;
    v33 = 1024;
    v34 = v10;
    v35 = 1024;
    v36 = v11;
    v37 = 1024;
    v38 = v12;
    _os_log_impl(&dword_182882000, v21, OS_LOG_TYPE_DEBUG, "Will%{public}s bind to tag claims (regular file? %i; resolvable? %i; package? %i; AVCHD? %i; tagged UTI? %i)",
      buf,
      0x2Au);
  }

  if (*((_BYTE *)this + 256))
    v24 = "";
  else
    v24 = " NOT";
  LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)CFSTR("Will%s bind to tag claims (regular file? %i; resolvable? %i; package? %i; AVCHD? %i; tagged UTI? %i)"),
    v23,
    v24,
    v13,
    v9,
    v10,
    v11,
    v12);
  if (!*((_BYTE *)this + 257))
    return 1;
  return *((_BYTE *)this + 256) != 0;
}

uint64_t **LaunchServices::BindingEvaluation::addClaimsInBindingMap(uint64_t **result, unsigned int a2, int a3)
{
  void *v3;
  void *v4;
  NSString *v5;

  if (a3)
  {
    _LSDatabaseGetBindingMapDebugName(**result, a2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = (void *)_CSStringCopyCFString();
    LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)CFSTR("Adding claims for %@ \"%@\""), v5, v3, v4);

    return (uint64_t **)_LSDatabaseEnumeratingBindingMap();
  }
  return result;
}

void sub_1828D9990(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

__CFString *_LSDatabaseGetBindingMapDebugName(uint64_t a1, unsigned int a2)
{
  __CFString *v2;
  uint64_t v3;

  if (a2 > 0xD)
  {
    v2 = CFSTR("unknown");
  }
  else
  {
    v2 = (__CFString *)*((id *)&kLSBindingInfo + 4 * a2);
    if (-[__CFString hasSuffix:](v2, "hasSuffix:", CFSTR("Binding")))
    {
      -[__CFString substringToIndex:](v2, "substringToIndex:", -[__CFString length](v2, "length") - objc_msgSend(CFSTR("Binding"), "length"));
      v3 = objc_claimAutoreleasedReturnValue();

      v2 = (__CFString *)v3;
    }
  }
  return v2;
}

void sub_1828D9A38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN14LaunchServices10DMFSupportL6getLogEv_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.launchservices", "dmfsupport");
  v1 = (void *)LaunchServices::DMFSupport::getLog(void)::result;
  LaunchServices::DMFSupport::getLog(void)::result = (uint64_t)v0;

}

Class initUISPasteSharingToken()
{
  Class result;

  if (!UIKitServicesLibrary_frameworkLibrary)
    UIKitServicesLibrary_frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/UIKitServices.framework/UIKitServices", 2);
  result = objc_getClass("UISPasteSharingToken");
  classUISPasteSharingToken = (uint64_t)result;
  getUISPasteSharingTokenClass = (uint64_t (*)())UISPasteSharingTokenFunction;
  return result;
}

Class initUISClickAttribution()
{
  Class result;

  if (!UIKitServicesLibrary_frameworkLibrary)
    UIKitServicesLibrary_frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/UIKitServices.framework/UIKitServices", 2);
  result = objc_getClass("UISClickAttribution");
  classUISClickAttribution = (uint64_t)result;
  getUISClickAttributionClass[0] = (uint64_t (*)())UISClickAttributionFunction;
  return result;
}

Class initBSServiceConnectionEndpoint()
{
  Class result;

  if (!BoardServicesLibrary_frameworkLibrary)
    BoardServicesLibrary_frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/BoardServices.framework/BoardServices", 2);
  result = objc_getClass("BSServiceConnectionEndpoint");
  classBSServiceConnectionEndpoint = (uint64_t)result;
  getBSServiceConnectionEndpointClass[0] = (uint64_t (*)())BSServiceConnectionEndpointFunction;
  return result;
}

void sub_1828D9DE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN14LaunchServices6RecordL25detachRecordsOnMainThreadEPKP8LSRecordm_block_invoke()
{
  void **v0;
  id *v1;
  id *v2;
  id *v3;
  id WeakRetained;
  id v5;
  void **v6;

  v0 = (void **)LaunchServices::Record::detachRecordsOnMainThread(LSRecord * const*,unsigned long)::detachPool;
  v1 = *(id **)LaunchServices::Record::detachRecordsOnMainThread(LSRecord * const*,unsigned long)::detachPool;
  v2 = *(id **)(LaunchServices::Record::detachRecordsOnMainThread(LSRecord * const*,unsigned long)::detachPool + 8);
  if (*(id **)LaunchServices::Record::detachRecordsOnMainThread(LSRecord * const*,unsigned long)::detachPool == v2)
    goto LABEL_6;
  v3 = *(id **)LaunchServices::Record::detachRecordsOnMainThread(LSRecord * const*,unsigned long)::detachPool;
  do
  {
    WeakRetained = objc_loadWeakRetained(v3);
    objc_msgSend(WeakRetained, "_resolveAllProperties");

    ++v3;
  }
  while (v3 != v2);
  do
  {
    v5 = objc_loadWeakRetained(v1);
    objc_msgSend(v5, "detach");

    ++v1;
  }
  while (v1 != v2);
  v0 = (void **)LaunchServices::Record::detachRecordsOnMainThread(LSRecord * const*,unsigned long)::detachPool;
  if (LaunchServices::Record::detachRecordsOnMainThread(LSRecord * const*,unsigned long)::detachPool)
  {
LABEL_6:
    v6 = v0;
    std::vector<LSRecord * {__weak}>::__destroy_vector::operator()[abi:nn180100](&v6);
    MEMORY[0x186DADEF4](v0, 0x80C40D6874129);
  }
  LaunchServices::Record::detachRecordsOnMainThread(LSRecord * const*,unsigned long)::detachPool = 0;
  LaunchServices::Record::detachRecordsOnMainThread(LSRecord * const*,unsigned long)::nilScanIndex = 0;
}

void sub_1828D9EB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN14LaunchServices19URLPropertyProviderL60shouldAvoidLocalizingNameBecauseIsInLightweightSystemSessionEv_block_invoke()
{
  uint64_t result;

  result = _os_feature_enabled_impl();
  if ((result & 1) == 0)
  {
    result = xpc_user_sessions_enabled();
    if ((_DWORD)result)
    {
      result = xpc_user_sessions_get_session_uid();
      if (!(_DWORD)result)
        LaunchServices::URLPropertyProvider::shouldAvoidLocalizingNameBecauseIsInLightweightSystemSession(void)::result = 1;
    }
  }
  return result;
}

Boolean FSEventStreamStart(FSEventStreamRef streamRef)
{
  NSObject *v2;
  _BOOL4 v3;
  NSObject *v4;
  int v5;
  __CFFileDescriptor *v6;
  NSObject *v7;
  NSObject *v8;
  __CFMachPort *v9;
  NSObject *v10;
  CFMachPortContext context;

  if (!streamRef)
  {
    v4 = fsevent_default_log();
    v3 = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
    if (!v3)
      return v3;
    FSEventStreamStart_cold_1();
    goto LABEL_20;
  }
  if (*((_BYTE *)streamRef + 188))
  {
    v2 = fsevent_default_log();
    v3 = os_log_type_enabled(v2, OS_LOG_TYPE_ERROR);
    if (!v3)
      return v3;
    FSEventStreamStart_cold_3();
    goto LABEL_20;
  }
  if (!*((_QWORD *)streamRef + 27) && !*((_QWORD *)streamRef + 45))
  {
    v8 = fsevent_default_log();
    v3 = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    if (!v3)
      return v3;
    FSEventStreamStart_cold_2();
    goto LABEL_20;
  }
  v5 = *((_DWORD *)streamRef + 46);
  if ((v5 & 4) != 0 && !*((_QWORD *)streamRef + 54) && !*((_QWORD *)streamRef + 52) && !*((_QWORD *)streamRef + 53))
  {
LABEL_20:
    LOBYTE(v3) = 0;
    return v3;
  }
  if (!*((_DWORD *)streamRef + 49))
  {
    if (!register_with_server((uint64_t)streamRef, (uint64_t)"FSEventStreamStart", *((_DWORD *)streamRef + 48), *((_DWORD *)streamRef + 16), *((_DWORD *)streamRef + 18), *((const void ***)streamRef + 10), *((_QWORD *)streamRef + 21), *((_QWORD *)streamRef + 22), v5, (_DWORD *)streamRef + 49))
    {
      *((_BYTE *)streamRef + 188) = 1;
      if (*((_QWORD *)streamRef + 27))
      {
        context.version = 0;
        context.info = streamRef;
        context.retain = (const void *(__cdecl *)(const void *))_FSEventStreamRetainAndReturnSelf;
        context.release = (void (__cdecl *)(const void *))FSEventStreamRelease;
        context.copyDescription = (CFStringRef (__cdecl *)(const void *))FSEventStreamCopyDescription;
        v9 = CFMachPortCreateWithPort(0, *((_DWORD *)streamRef + 49), (CFMachPortCallBack)FSEventsClientPortCallback, &context, 0);
        *((_QWORD *)streamRef + 26) = v9;
        CFMachPortSetInvalidationCallBack(v9, (CFMachPortInvalidationCallBack)server_gone_callback);
      }
      else
      {
        v10 = *((_QWORD *)streamRef + 45);
        if (v10)
        {
          resume_source(v10, (int *)streamRef + 92);
          if (create_f2d_private_port_source((uint64_t)streamRef))
            resume_source(*((NSObject **)streamRef + 47), (int *)streamRef + 96);
        }
      }
      goto LABEL_14;
    }
    goto LABEL_20;
  }
LABEL_14:
  v6 = (__CFFileDescriptor *)*((_QWORD *)streamRef + 52);
  if (v6)
    CFFileDescriptorEnableCallBacks(v6, 1uLL);
  v7 = *((_QWORD *)streamRef + 54);
  if (v7)
    resume_source(v7, (int *)streamRef + 110);
  LOBYTE(v3) = 1;
  return v3;
}

void resume_source(NSObject *a1, int *a2)
{
  int v3;

  if (a1)
  {
    v3 = *a2;
    if (*a2)
    {
      if (v3 == 2)
      {
        dispatch_resume(a1);
      }
      else if (v3 == 1)
      {
        dispatch_activate(a1);
      }
      *a2 = 3;
    }
  }
}

uint64_t register_with_server(uint64_t a1, uint64_t a2, int a3, int a4, int a5, const void **a6, uint64_t a7, uint64_t a8, int a9, _DWORD *a10)
{
  uint64_t v17;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  const char **v24;
  _DWORD *v25;
  const char *v26;
  int v27;
  NSObject *v28;
  NSObject *v29;
  int v30;
  char *v31;
  int v32;
  _DWORD *v33;
  int *v34;
  int v35;
  int v36;
  const void *v37;
  int v38;
  NSObject *v39;
  uint64_t v40;
  int v41;
  size_t v42;
  const char **v43;
  uint64_t v44;
  const char *v45;
  NSObject *v46;
  _DWORD *v47;
  uint64_t v48;
  _DWORD *v49;
  char *v50;
  uint64_t v51;
  int v52;
  char *v53;
  uint64_t v54;
  size_t v55;
  int v56;
  NSObject *v57;
  NSObject *v58;
  NSObject *v59;
  char *v60;
  _DWORD *v61;
  uint64_t v62;
  int v63;
  int v64;
  int v65;
  uint64_t v66;
  _DWORD *v67;

  v17 = FSEvents_connect();
  if ((_DWORD)v17)
    return v17;
  v66 = a7;
  v19 = malloc_type_malloc(4 * a5, 0x100004052888210uLL);
  if (v19)
  {
    v20 = v19;
    v67 = malloc_type_malloc(4 * a5, 0x100004052888210uLL);
    if (v67)
    {
      v62 = a8;
      v65 = a3;
      v63 = a4;
      v21 = a5;
      if (a5 < 1)
      {
        v22 = 0;
      }
      else
      {
        v22 = 0;
        v23 = a5;
        v24 = (const char **)a6;
        v25 = v20;
        do
        {
          v26 = *v24++;
          v27 = strlen(v26);
          *v25++ = v27;
          v22 += v27;
          --v23;
        }
        while (v23);
      }
      v30 = v22 + a5;
      v31 = (char *)malloc_type_malloc(v22 + a5, 0x6D242494uLL);
      if (!v31)
      {
        v46 = fsevent_default_log();
        if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
          register_with_server_cold_3();
        v40 = 0;
        v47 = 0;
        v17 = 4294967293;
        goto LABEL_49;
      }
      v64 = v30;
      v61 = v20;
      v32 = 0;
      if (a5 >= 1)
      {
        v33 = v67;
        v34 = v20;
        do
        {
          *v33++ = v32;
          v35 = *v34++;
          v36 = v35 + 1;
          v37 = *a6++;
          memcpy(&v31[v32], v37, v36);
          v32 += v36;
          --v21;
        }
        while (v21);
      }
      v38 = v64;
      if (v32 != v64)
      {
        v39 = fsevent_default_log();
        if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
          register_with_server_cold_7();
      }
      v40 = *(_QWORD *)(a1 + 96);
      v41 = v65;
      if (v40)
      {
        if (v40 < 1)
        {
          v42 = 0;
          v20 = v61;
        }
        else
        {
          v42 = 0;
          v43 = (const char **)(a1 + 104);
          v44 = *(_QWORD *)(a1 + 96);
          v20 = v61;
          do
          {
            v45 = *v43++;
            v42 += strlen(v45) + 1;
            --v44;
          }
          while (v44);
        }
        v49 = malloc_type_malloc(4 * v40, 0x100004052888210uLL);
        if (!v49)
        {
          v57 = fsevent_default_log();
          if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
            register_with_server_cold_5();
          v40 = 0;
          v47 = 0;
          v17 = 4294967292;
          goto LABEL_49;
        }
        v47 = v49;
        v50 = (char *)malloc_type_malloc(v42, 0x1CED7B04uLL);
        if (!v50)
        {
          v58 = fsevent_default_log();
          if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
            register_with_server_cold_6();
          v40 = 0;
          v17 = 4294967291;
          goto LABEL_49;
        }
        v40 = (uint64_t)v50;
        v48 = *(_QWORD *)(a1 + 96);
        if (v48 < 1)
        {
          v38 = v64;
        }
        else
        {
          v60 = v31;
          v51 = 0;
          v52 = 0;
          v53 = v50;
          v54 = a1 + 104;
          do
          {
            v47[v51] = v52;
            v55 = strlen(*(const char **)(v54 + 8 * v51));
            v56 = v55 + 1;
            memcpy(&v53[v52], *(const void **)(v54 + 8 * v51), v55 + 1);
            v52 += v56;
            ++v51;
            v48 = *(_QWORD *)(a1 + 96);
          }
          while (v48 > v51);
          v20 = v61;
          v41 = v65;
          v38 = v64;
          v40 = (uint64_t)v53;
          v31 = v60;
        }
      }
      else
      {
        LODWORD(v48) = 0;
        LODWORD(v42) = 0;
        v47 = 0;
        v20 = v61;
      }
      v17 = f2d_register_rpc(FSEvents_f2d_public_port, v41, v63, a5, (uint64_t)v67, a5, (uint64_t)v31, v38, v48, (uint64_t)v47, v48, v40, v42, v62, a9, v66, a10);
      if ((_DWORD)v17)
      {
        v59 = fsevent_default_log();
        if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
          register_with_server_cold_4();
      }
LABEL_49:
      free(v20);
      free(v67);
      if (v31)
        free(v31);
      if (v47)
        free(v47);
      if (v40)
        free((void *)v40);
      return v17;
    }
    v29 = fsevent_default_log();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      register_with_server_cold_2();
    free(v20);
    return 4294967294;
  }
  else
  {
    v28 = fsevent_default_log();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      register_with_server_cold_1();
    return 0xFFFFFFFFLL;
  }
}

uint64_t f2d_register_rpc(int a1, int a2, int a3, int a4, uint64_t a5, int a6, uint64_t a7, int a8, int a9, uint64_t a10, int a11, uint64_t a12, int a13, uint64_t a14, int a15, uint64_t a16, _DWORD *a17)
{
  mach_port_name_t special_reply_port;
  uint64_t v19;
  uint64_t v20;
  _BYTE msg[36];
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)&msg[20] = 0u;
  *(_OWORD *)&msg[4] = 0u;
  *(_DWORD *)&msg[24] = 5;
  *(_DWORD *)&msg[28] = a2;
  v23 = 1310720;
  v24 = a5;
  v25 = 16777472;
  v26 = 4 * a6;
  v27 = a7;
  v28 = 16777472;
  v29 = a8;
  v30 = a10;
  v31 = 16777472;
  v32 = 4 * a11;
  v33 = a12;
  v34 = 16777472;
  v35 = a13;
  v36 = *MEMORY[0x1E0C804E8];
  v37 = a3;
  v38 = a4;
  v39 = a6;
  v40 = a8;
  v41 = a9;
  v42 = a11;
  v43 = a13;
  v44 = a14;
  v45 = a15;
  v46 = a16;
  special_reply_port = mig_get_special_reply_port();
  *(_DWORD *)&msg[8] = a1;
  *(_DWORD *)&msg[12] = special_reply_port;
  *(_DWORD *)msg = -2147478253;
  *(_QWORD *)&msg[16] = 0x101D000000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
    special_reply_port = *(_DWORD *)&msg[12];
  }
  v19 = mach_msg((mach_msg_header_t *)msg, 3162115, 0xA0u, 0x30u, special_reply_port, 0, 0);
  v20 = v19;
  if ((v19 - 268435458) > 0xE || ((1 << (v19 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v19)
    {
      if (*(_DWORD *)&msg[20] == 71)
      {
        v20 = 4294966988;
      }
      else if (*(_DWORD *)&msg[20] == 66100)
      {
        if ((*(_DWORD *)msg & 0x80000000) == 0)
        {
          if (*(_DWORD *)&msg[4] == 36)
          {
            v20 = 4294966996;
            if (*(_DWORD *)&msg[32])
            {
              if (*(_DWORD *)&msg[8])
                v20 = 4294966996;
              else
                v20 = *(unsigned int *)&msg[32];
            }
          }
          else
          {
            v20 = 4294966996;
          }
          goto LABEL_23;
        }
        v20 = 4294966996;
        if (*(_DWORD *)&msg[24] == 1 && *(_DWORD *)&msg[4] == 40 && !*(_DWORD *)&msg[8] && HIWORD(v23) << 16 == 1114112)
        {
          v20 = 0;
          *a17 = *(_DWORD *)&msg[28];
          return v20;
        }
      }
      else
      {
        v20 = 4294966995;
      }
LABEL_23:
      mach_msg_destroy((mach_msg_header_t *)msg);
      return v20;
    }
    mig_dealloc_special_reply_port();
  }
  return v20;
}

BOOL create_f2d_private_port_source(uint64_t a1)
{
  uintptr_t v2;
  NSObject *v3;
  uint64_t v4;
  _QWORD v6[6];
  int v7;
  _QWORD handler[5];

  v2 = *(unsigned int *)(a1 + 196);
  v3 = dispatch_source_create(MEMORY[0x1E0C80DA0], v2, 1uLL, *(dispatch_queue_t *)(a1 + 352));
  if (v3)
  {
    FSEventStreamRetain((FSEventStreamRef)a1);
    dispatch_set_qos_class_fallback();
    v4 = MEMORY[0x1E0C809B0];
    handler[0] = MEMORY[0x1E0C809B0];
    handler[1] = 0x40000000;
    handler[2] = __create_f2d_private_port_source_block_invoke;
    handler[3] = &__block_descriptor_tmp_52;
    handler[4] = a1;
    dispatch_source_set_event_handler(v3, handler);
    v6[0] = v4;
    v6[1] = 0x40000000;
    v6[2] = __create_f2d_private_port_source_block_invoke_2;
    v6[3] = &__block_descriptor_tmp_53;
    v7 = v2;
    v6[4] = v3;
    v6[5] = a1;
    dispatch_source_set_cancel_handler(v3, v6);
    *(_QWORD *)(a1 + 376) = v3;
    *(_DWORD *)(a1 + 384) = 1;
  }
  return v3 != 0;
}

uint64_t FSEvents_connect()
{
  uint64_t v0;
  NSObject *v1;

  pthread_mutex_lock(&FSEvents_f2d_public_port_mutex);
  if (FSEvents_f2d_public_port)
  {
    pthread_mutex_unlock(&FSEvents_f2d_public_port_mutex);
    return 0;
  }
  else
  {
    v0 = bootstrap_look_up2();
    pthread_mutex_unlock(&FSEvents_f2d_public_port_mutex);
    if ((_DWORD)v0)
    {
      v1 = fsevent_default_log();
      if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
        FSEvents_connect_cold_1();
    }
  }
  return v0;
}

void FSEventStreamSetDispatchQueue(FSEventStreamRef streamRef, dispatch_queue_t q)
{
  int v4;
  dispatch_source_t v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  const __CFAllocator *v19;
  CFNumberRef v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[6];
  int v30;
  _QWORD handler[5];
  int v32;

  if (streamRef)
  {
    if (q)
    {
      if (!*((_DWORD *)streamRef + 48))
      {
        if (allocate_d2f_port((uint64_t)"FSEventStreamSetDispatchQueue", (uint64_t)streamRef))
        {
          v18 = fsevent_default_log();
          if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
            FSEventStreamSetDispatchQueue_cold_4();
          return;
        }
        pthread_mutex_lock(&FSEvents_streamDict_mutex);
        v19 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        if (!FSEvents_streamDict)
          FSEvents_streamDict = (uint64_t)CFDictionaryCreateMutable(v19, 0, MEMORY[0x1E0C9B390], 0);
        v20 = CFNumberCreate(v19, kCFNumberIntType, (char *)streamRef + 192);
        CFDictionaryAddValue((CFMutableDictionaryRef)FSEvents_streamDict, v20, streamRef);
        pthread_mutex_unlock(&FSEvents_streamDict_mutex);
        CFRelease(v20);
      }
      pthread_mutex_init((pthread_mutex_t *)((char *)streamRef + 240), 0);
      pthread_cond_init((pthread_cond_t *)((char *)streamRef + 304), 0);
      dispatch_retain(q);
      *((_QWORD *)streamRef + 44) = q;
      if (create_d2f_port_source((uint64_t)streamRef))
      {
        if ((*((_BYTE *)streamRef + 184) & 4) == 0)
          return;
        v4 = *((_DWORD *)streamRef + 102);
        v5 = dispatch_source_create(MEMORY[0x1E0C80DB8], v4, 0, *((dispatch_queue_t *)streamRef + 44));
        if (v5)
        {
          v6 = v5;
          dispatch_set_qos_class_fallback();
          FSEventStreamRetain(streamRef);
          v7 = MEMORY[0x1E0C809B0];
          handler[0] = MEMORY[0x1E0C809B0];
          handler[1] = 0x40000000;
          handler[2] = __FSEventStreamSetDispatchQueue_block_invoke;
          handler[3] = &__block_descriptor_tmp_0;
          handler[4] = streamRef;
          v32 = v4;
          dispatch_source_set_event_handler(v6, handler);
          v29[0] = v7;
          v29[1] = 0x40000000;
          v29[2] = __FSEventStreamSetDispatchQueue_block_invoke_2;
          v29[3] = &__block_descriptor_tmp_22;
          v30 = v4;
          v29[4] = v6;
          v29[5] = streamRef;
          dispatch_source_set_cancel_handler(v6, v29);
          *((_QWORD *)streamRef + 54) = v6;
          *((_DWORD *)streamRef + 110) = 1;
          return;
        }
        v21 = fsevent_default_log();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
          FSEventStreamSetDispatchQueue_cold_2(v21, v22, v23, v24, v25, v26, v27, v28);
      }
      else
      {
        v10 = fsevent_default_log();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          FSEventStreamSetDispatchQueue_cold_3(v10, v11, v12, v13, v14, v15, v16, v17);
      }
      if (*((_QWORD *)streamRef + 54))
      {
        cancel_source((NSObject **)streamRef + 54, (int *)streamRef + 110);
        *((_DWORD *)streamRef + 102) = -1;
      }
      if (*((_QWORD *)streamRef + 45))
      {
        cancel_source((NSObject **)streamRef + 45, (int *)streamRef + 92);
        *((_DWORD *)streamRef + 48) = 0;
      }
    }
    else
    {
      if (*((_QWORD *)streamRef + 45))
      {
        cancel_source((NSObject **)streamRef + 45, (int *)streamRef + 92);
        *((_DWORD *)streamRef + 48) = 0;
      }
      if (*((_QWORD *)streamRef + 47))
      {
        cancel_source((NSObject **)streamRef + 47, (int *)streamRef + 96);
        *((_DWORD *)streamRef + 49) = 0;
      }
      if ((*((_BYTE *)streamRef + 184) & 4) != 0 && *((_QWORD *)streamRef + 54))
      {
        cancel_source((NSObject **)streamRef + 54, (int *)streamRef + 110);
        *((_DWORD *)streamRef + 102) = -1;
      }
      v9 = *((_QWORD *)streamRef + 44);
      if (v9)
      {
        dispatch_release(v9);
        *((_QWORD *)streamRef + 44) = 0;
      }
    }
  }
  else
  {
    v8 = fsevent_default_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      FSEventStreamSetDispatchQueue_cold_1();
  }
}

BOOL create_d2f_port_source(uint64_t a1)
{
  uintptr_t v2;
  NSObject *v3;
  uint64_t v4;
  _QWORD v6[6];
  int v7;
  _QWORD handler[4];
  int v9;

  v2 = *(unsigned int *)(a1 + 192);
  v3 = dispatch_source_create(MEMORY[0x1E0C80D98], v2, 0, *(dispatch_queue_t *)(a1 + 352));
  if (v3)
  {
    FSEventStreamRetain((FSEventStreamRef)a1);
    dispatch_set_qos_class_fallback();
    v4 = MEMORY[0x1E0C809B0];
    handler[0] = MEMORY[0x1E0C809B0];
    handler[1] = 0x40000000;
    handler[2] = __create_d2f_port_source_block_invoke;
    handler[3] = &__block_descriptor_tmp_64;
    v9 = v2;
    dispatch_source_set_event_handler(v3, handler);
    v6[0] = v4;
    v6[1] = 0x40000000;
    v6[2] = __create_d2f_port_source_block_invoke_2;
    v6[3] = &__block_descriptor_tmp_65;
    v7 = v2;
    v6[4] = v3;
    v6[5] = a1;
    dispatch_source_set_cancel_handler(v3, v6);
    *(_QWORD *)(a1 + 360) = v3;
    *(_DWORD *)(a1 + 368) = 1;
  }
  return v3 != 0;
}

void receive_and_dispatch_rcv_msg(mach_port_name_t a1)
{
  uint64_t v2;
  uint64_t v3;
  mach_msg_header_t *v4;
  uint64_t v5;
  _DWORD *v6;
  mach_msg_return_t v7;
  mach_msg_size_t v8;
  mach_msg_header_t *v9;
  NSObject *v10;
  NSObject *v11;
  _QWORD v12[2];

  v12[1] = *MEMORY[0x1E0C80C00];
  v2 = *MEMORY[0x1E0C85AD8];
  v3 = ((uint64_t (*)(void))MEMORY[0x1E0C80A78])();
  v4 = (mach_msg_header_t *)((char *)v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v3);
  v6 = (_DWORD *)((char *)v12 - v5);
  v7 = mach_msg(v4, 50331910, 0, v2, a1, 0, 0);
  if (!v7)
  {
LABEL_8:
    v9 = (mach_msg_header_t *)((char *)v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
    goto LABEL_9;
  }
  if (v7 != 268451844)
  {
    v11 = fsevent_default_log();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      receive_and_dispatch_rcv_msg_cold_1();
    goto LABEL_8;
  }
  v8 = v4->msgh_size + 68;
  v9 = (mach_msg_header_t *)malloc_type_malloc(v8, 0x34984651uLL);
  if (mach_msg(v9, 262, 0, v8, a1, 0, 0))
  {
    v10 = fsevent_default_log();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      receive_and_dispatch_rcv_msg_cold_2();
  }
LABEL_9:
  *v6 = 0;
  v6[1] = v2;
  FSEventsD2F_server(v9, (uint64_t)v6);
  if (v9 != v4)
    free(v9);
}

uint64_t FSEventsD2F_server(_DWORD *a1, uint64_t a2)
{
  unsigned int v2;
  int v3;
  uint64_t result;

  v2 = a1[2];
  *(_DWORD *)a2 = *a1 & 0x1F;
  *(_DWORD *)(a2 + 4) = 36;
  v3 = a1[5] + 100;
  *(_QWORD *)(a2 + 8) = v2;
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 20) = v3;
  if (a1[5] == 67000)
  {
    _Xcallback_rpc((uint64_t)a1, a2);
    return 1;
  }
  else
  {
    result = 0;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
    *(_DWORD *)(a2 + 32) = -303;
  }
  return result;
}

void _Xcallback_rpc(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  int v5;
  int v6;

  if ((*(_DWORD *)a1 & 0x80000000) != 0 && *(_DWORD *)(a1 + 24) == 4 && *(_DWORD *)(a1 + 4) == 120)
  {
    if (*(_BYTE *)(a1 + 39) == 1 && *(_BYTE *)(a1 + 55) == 1 && *(_BYTE *)(a1 + 71) == 1 && *(_BYTE *)(a1 + 87) == 1)
    {
      v3 = *(_DWORD *)(a1 + 40) >> 2;
      if (v3 == *(_DWORD *)(a1 + 104))
      {
        v4 = *(_DWORD *)(a1 + 56) >> 2;
        if (v4 == *(_DWORD *)(a1 + 108))
        {
          v5 = *(_DWORD *)(a1 + 72) >> 3;
          if (v5 == *(_DWORD *)(a1 + 112) && *(_DWORD *)(a1 + 88) == *(_DWORD *)(a1 + 116))
          {
            *(_DWORD *)(a2 + 32) = implementation_callback_rpc(*(_DWORD *)(a1 + 12), *(unsigned int *)(a1 + 100), *(_QWORD *)(a1 + 28), v3, *(_BYTE **)(a1 + 44), v4, *(__CFArray **)(a1 + 60), v5, *(char **)(a1 + 76), *(_DWORD *)(a1 + 88));
            mig_deallocate(*(_QWORD *)(a1 + 76), *(unsigned int *)(a1 + 88));
            *(_QWORD *)(a1 + 76) = 0;
            *(_DWORD *)(a1 + 88) = 0;
            mig_deallocate(*(_QWORD *)(a1 + 60), *(unsigned int *)(a1 + 72));
            *(_QWORD *)(a1 + 60) = 0;
            *(_DWORD *)(a1 + 72) = 0;
            mig_deallocate(*(_QWORD *)(a1 + 44), *(unsigned int *)(a1 + 56));
            *(_QWORD *)(a1 + 44) = 0;
            *(_DWORD *)(a1 + 56) = 0;
            mig_deallocate(*(_QWORD *)(a1 + 28), *(unsigned int *)(a1 + 40));
            *(_QWORD *)(a1 + 28) = 0;
            *(_DWORD *)(a1 + 40) = 0;
            return;
          }
        }
      }
    }
    v6 = -300;
  }
  else
  {
    v6 = -304;
  }
  *(_DWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
}

uint64_t implementation_callback_rpc(int a1, uint64_t a2, uint64_t a3, int a4, _BYTE *a5, int a6, __CFArray *a7, int a8, char *a9, int a10)
{
  uint64_t v15;
  NSObject *v16;
  NSObject *v17;
  NSObject *v18;
  const __CFAllocator *v19;
  CFNumberRef v20;
  CFNumberRef v21;
  char *Value;
  uint64_t v23;
  size_t v24;
  int v25;
  unsigned int v26;
  int v27;
  int v28;
  int8x16_t v29;
  int8x8_t v30;
  unsigned __int32 v31;
  int v32;
  int v33;
  int v34;
  _QWORD *v35;
  NSObject *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _DWORD *v53;
  __int128 v54;
  _DWORD *v55;
  _DWORD *v56;
  _DWORD *v57;
  _QWORD *v58;
  __int128 v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  unsigned int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  const char **v69;
  unsigned int v70;
  NSObject *v71;
  _BOOL4 v72;
  uint64_t v73;
  const char *v74;
  uint64_t v75;
  int v76;
  int v77;
  int v78;
  uint64_t v79;
  int v80;
  int v81;
  int v82;
  int v83;
  NSObject *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  NSObject *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __CFArray *v101;
  CFArrayRef v102;
  const void **v103;
  NSObject *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  int *v113;
  const char **v114;
  _DWORD *v115;
  size_t v116;
  unsigned int v117;
  NSObject *v118;
  _BOOL4 v119;
  uint64_t v120;
  const char *v121;
  int v122;
  int v123;
  int v124;
  uint64_t v125;
  int v126;
  int v127;
  int v128;
  int v129;
  NSObject *v130;
  NSObject *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  NSObject *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unsigned int v149;
  uint64_t v150;
  int v151;
  CFMutableArrayRef Mutable;
  __int128 v153;
  CFIndex v154;
  const char *v155;
  int v156;
  const char *v157;
  CFStringRef v158;
  CFStringRef v159;
  CFNumberRef v160;
  CFNumberRef v161;
  NSObject *v162;
  CFNumberRef v163;
  CFNumberRef v164;
  NSObject *v165;
  const void **v166;
  uint64_t v167;
  const char *v168;
  CFStringRef v169;
  CFArrayRef v170;
  int v171;
  uint64_t v172;
  size_t v173;
  size_t v174;
  __CFDictionary *v175;
  _DWORD *v176;
  const char **v177;
  const char *v178;
  const char *v179;
  NSObject *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  NSObject *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  NSObject *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  NSObject *v204;
  NSObject *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  CFTypeRef *v213;
  __int128 v215;
  size_t v216;
  uint64_t v217;
  int *v218;
  int64_t v219;
  __int128 v220;
  CFAllocatorRef v221;
  os_log_t v222;
  _DWORD *v223;
  CFMutableArrayRef v224;
  __int128 v225;
  _QWORD *v226;
  const char **v227;
  _DWORD *v228;
  char *v229;
  __CFDictionary *v230;
  int valuePtr;
  uint8_t v232[4];
  int v233;
  uint8_t v234[4];
  int v235;
  uint8_t buf[4];
  const char *v237;
  __int16 v238;
  const char *v239;
  uint64_t v240;

  v15 = a2;
  v240 = *MEMORY[0x1E0C80C00];
  valuePtr = a1;
  if ((_DWORD)a2 != a4)
  {
    v16 = fsevent_default_log();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      implementation_callback_rpc_cold_18();
  }
  if ((_DWORD)v15 != a6)
  {
    v17 = fsevent_default_log();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      implementation_callback_rpc_cold_17();
  }
  if ((_DWORD)v15 == a8 || (v18 = fsevent_default_log(), !os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)))
  {
    if ((_DWORD)v15)
      goto LABEL_10;
LABEL_89:
    v104 = fsevent_default_log();
    if (os_log_type_enabled(v104, OS_LOG_TYPE_ERROR))
      implementation_callback_rpc_cold_1(v104, v105, v106, v107, v108, v109, v110, v111);
    return 4294967278;
  }
  implementation_callback_rpc_cold_16();
  if (!(_DWORD)v15)
    goto LABEL_89;
LABEL_10:
  v19 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v20 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
  if (!v20)
  {
    v36 = fsevent_default_log();
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
      implementation_callback_rpc_cold_2(v36, v37, v38, v39, v40, v41, v42, v43);
    return 4294967279;
  }
  v21 = v20;
  pthread_mutex_lock(&FSEvents_streamDict_mutex);
  Value = (char *)CFDictionaryGetValue((CFDictionaryRef)FSEvents_streamDict, v21);
  pthread_mutex_unlock(&FSEvents_streamDict_mutex);
  CFRelease(v21);
  if (!Value)
  {
    v45 = fsevent_default_log();
    if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
      implementation_callback_rpc_cold_3(v45, v46, v47, v48, v49, v50, v51, v52);
    return 4294967286;
  }
  *(_QWORD *)&v225 = a3;
  v23 = 0;
  LODWORD(v24) = 0;
  v25 = 0;
  LODWORD(v230) = a10;
  v229 = a9;
  do
  {
    v26 = *(_DWORD *)&a5[v23];
    v27 = (v26 >> 29) | 4;
    if ((v26 & 0x80000000) == 0)
      v27 = (v26 >> 29) & 3;
    v28 = (v26 << 8) & 0x1000;
    if ((v26 & 0x20) != 0)
      v28 = 4096;
    v29 = vandq_s8((int8x16_t)vshlq_u32((uint32x4_t)vdupq_n_s32(v26), (uint32x4_t)xmmword_1829FA5D0), (int8x16_t)xmmword_1829FA5E0);
    v30 = vorr_s8(*(int8x8_t *)v29.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL));
    v31 = v30.i32[0] | v26 & 0x100000 | v30.i32[1] | (v26 >> 4) & 0x40000 | (((v26 >> 19) & 1) << 21) | (v26 << 8) & 0x400F00 | v28 | v27;
    if ((v26 & 0x40) != 0)
      v31 |= 0xA000u;
    v32 = (v26 << 6) & 0x8000;
    if ((v26 & 0x400) != 0)
      v32 = 0x8000;
    *(_DWORD *)&a5[v23] = (v26 >> 2) & 0x80000 | (((v26 >> 8) & 1) << 14) | (((v26 >> 7) & 1) << 8) | v32 | v31;
    if ((v31 & 6) != 0)
    {
      v33 = *((_DWORD *)Value + 18);
      v25 = 1;
    }
    else
    {
      v33 = 1;
    }
    v24 = (v33 + v24);
    v23 += 4;
  }
  while (4 * v15 != v23);
  v34 = *((_DWORD *)Value + 46);
  if ((v34 & 0x40) != 0)
  {
    v35 = malloc_type_calloc(v24, 8uLL, 0x100004000313F17uLL);
    if ((*((_DWORD *)Value + 46) & 0x100) != 0)
      goto LABEL_27;
LABEL_35:
    v228 = 0;
    goto LABEL_36;
  }
  v35 = 0;
  if ((v34 & 0x100) == 0)
    goto LABEL_35;
LABEL_27:
  v228 = malloc_type_calloc(v24, 4uLL, 0x100004052888210uLL);
LABEL_36:
  if ((_DWORD)v15 == 1 && (*a5 & 0x10) != 0)
  {
    if (!Value[190])
      return 0;
    Value[190] = 0;
  }
  if (!Value[188])
    return 4294966297;
  v227 = (const char **)malloc_type_malloc(8 * v24, 0x10040436913F5uLL);
  if (!v227)
  {
    v84 = fsevent_default_log();
    if (os_log_type_enabled(v84, OS_LOG_TYPE_ERROR))
      implementation_callback_rpc_cold_4(v84, v85, v86, v87, v88, v89, v90, v91);
    v92 = 0;
    v44 = 4294967285;
    goto LABEL_227;
  }
  v219 = v15;
  v53 = malloc_type_calloc(v24, 4uLL, 0x100004052888210uLL);
  v223 = v53;
  if (!v53)
  {
    v93 = fsevent_default_log();
    if (os_log_type_enabled(v93, OS_LOG_TYPE_ERROR))
      implementation_callback_rpc_cold_5(v93, v94, v95, v96, v97, v98, v99, v100);
    v60 = 0;
    v57 = 0;
    v101 = 0;
    v102 = 0;
    v103 = 0;
    v44 = 4294967285;
    goto LABEL_210;
  }
  v55 = v53;
  v224 = a7;
  if (!v25)
  {
    v216 = 8 * v24;
    if (!(_DWORD)v24)
    {
      v57 = a5;
      v60 = v224;
      goto LABEL_133;
    }
    v217 = v15;
    v221 = v19;
    LODWORD(v218) = 0;
    v112 = v35;
    v113 = (int *)(v225 + 4);
    *(_QWORD *)&v54 = 136315394;
    v225 = v54;
    v114 = v227;
    v115 = v228;
    v116 = v24;
    v226 = v112;
    v117 = v230;
    while (1)
    {
      if (*(v113 - 1) >= v117)
      {
        v118 = fsevent_default_log();
        v119 = os_log_type_enabled(v118, OS_LOG_TYPE_ERROR);
        v117 = v230;
        if (v119)
        {
          *(_DWORD *)buf = v225;
          v237 = "implementation_callback_rpc";
          v238 = 2080;
          v239 = "path_offsets[i] < paths_blobCnt";
          _os_log_error_impl(&dword_182882000, v118, OS_LOG_TYPE_ERROR, "%s(): failed assertion '%s'\n", buf, 0x16u);
          v117 = v230;
        }
      }
      v120 = *(v113 - 1);
      if (v120 >= v117)
        v121 = "ERROR: failed assertion: path_offsets[i] < paths_blobCnt";
      else
        v121 = &v229[v120];
      *v114 = v121;
      if (v226)
      {
        v122 = strlen(v121);
        v117 = v230;
        v123 = (int)v230;
        if ((_DWORD)v24 != 1)
        {
          v123 = (int)v230;
          if ((_DWORD)v116 != 1)
            v123 = *v113;
        }
        v124 = v120 + v122 + 1;
        if (v124 == v123)
        {
          v125 = 0;
        }
        else
        {
          if (v124 + 8 > (unint64_t)v123)
            goto LABEL_110;
          v125 = *(_QWORD *)&v229[v124];
        }
        *v112 = v125;
      }
LABEL_110:
      if (v228)
      {
        v126 = strlen(v121);
        v117 = v230;
        v127 = (int)v230;
        if ((_DWORD)v24 != 1)
        {
          v127 = (int)v230;
          if ((_DWORD)v116 != 1)
            v127 = *v113;
        }
        v128 = v120 + v126 + 9;
        if (v128 == v127)
        {
          v129 = 0;
LABEL_118:
          *v115 = v129;
          goto LABEL_119;
        }
        if (v128 + 4 <= (unint64_t)v127)
        {
          v129 = *(_DWORD *)&v229[v128];
          goto LABEL_118;
        }
      }
LABEL_119:
      ++v115;
      ++v112;
      ++v113;
      ++v114;
      if (!--v116)
      {
        v57 = a5;
        v55 = v223;
        v60 = v224;
LABEL_128:
        v25 = (int)v218;
        v35 = v226;
        v19 = v221;
        LODWORD(v15) = v217;
        goto LABEL_133;
      }
    }
  }
  v56 = malloc_type_malloc(4 * v24, 0x100004052888210uLL);
  if (!v56)
  {
    v131 = fsevent_default_log();
    if (os_log_type_enabled(v131, OS_LOG_TYPE_ERROR))
      implementation_callback_rpc_cold_13(v131, v132, v133, v134, v135, v136, v137, v138);
    v60 = 0;
    v57 = 0;
    v101 = 0;
    v102 = 0;
    v103 = 0;
    v44 = 4294967281;
    goto LABEL_210;
  }
  v57 = v56;
  v216 = 8 * v24;
  v58 = malloc_type_malloc(v216, 0x100004000313F17uLL);
  if (!v58)
  {
    v139 = fsevent_default_log();
    if (os_log_type_enabled(v139, OS_LOG_TYPE_ERROR))
      implementation_callback_rpc_cold_14(v139, v140, v141, v142, v143, v144, v145, v146);
    v60 = 0;
    v101 = 0;
    v102 = 0;
    v103 = 0;
    v44 = 4294967280;
    goto LABEL_210;
  }
  v60 = v58;
  v221 = v19;
  v226 = v35;
  LODWORD(v218) = v25;
  v61 = v15;
  v62 = 0;
  v63 = 0;
  v217 = v61;
  if (v61 <= 1)
    v64 = 1;
  else
    v64 = v61;
  *(_QWORD *)&v59 = 136315394;
  v215 = v59;
  v65 = v230;
  *(_QWORD *)&v220 = v64;
  do
  {
    v66 = *(_DWORD *)&a5[4 * v62];
    v67 = *((_QWORD *)v224 + v62);
    if ((v66 & 6) == 0)
    {
      v70 = *(_DWORD *)(v225 + 4 * v62);
      LODWORD(v222) = v63;
      if (v70 >= v65)
      {
        v71 = fsevent_default_log();
        v72 = os_log_type_enabled(v71, OS_LOG_TYPE_ERROR);
        v63 = v222;
        v65 = v230;
        if (v72)
        {
          *(_DWORD *)buf = v215;
          v237 = "implementation_callback_rpc";
          v238 = 2080;
          v239 = "path_offsets[i] < paths_blobCnt";
          _os_log_error_impl(&dword_182882000, v71, OS_LOG_TYPE_ERROR, "%s(): failed assertion '%s'\n", buf, 0x16u);
          v63 = v222;
          v65 = v230;
        }
      }
      v73 = *(unsigned int *)(v225 + 4 * v62);
      v74 = &v229[v73];
      if (v73 >= v65)
        v74 = "ERROR: failed assertion: path_offsets[i] < paths_blobCnt";
      v75 = v63;
      v227[v63] = v74;
      if (v226)
      {
        v76 = strlen(v227[v62]);
        v65 = v230;
        v77 = (int)v230;
        if ((_DWORD)v24 != 1)
        {
          v77 = (int)v230;
          if (v62 != v24)
            v77 = *(_DWORD *)(v225 + 4 * v62 + 4);
        }
        v78 = v73 + v76 + 1;
        v63 = v222;
        if (v78 == v77)
        {
          v79 = 0;
        }
        else
        {
          if (v78 + 8 > (unint64_t)v77)
            goto LABEL_69;
          v79 = *(_QWORD *)&v229[v78];
        }
        v226[v75] = v79;
      }
LABEL_69:
      if (v228)
      {
        v80 = strlen(v227[v62]);
        v65 = v230;
        v81 = (int)v230;
        if ((_DWORD)v24 != 1)
        {
          v81 = (int)v230;
          if (v62 != v24)
            v81 = *(_DWORD *)(v225 + 4 * v62 + 4);
        }
        v82 = v73 + v80 + 9;
        v63 = v222;
        if (v82 == v81)
        {
          v83 = 0;
LABEL_77:
          v228[v75] = v83;
          goto LABEL_78;
        }
        if (v82 + 4 <= (unint64_t)v81)
        {
          v83 = *(_DWORD *)&v229[v82];
          goto LABEL_77;
        }
      }
LABEL_78:
      v57[v75] = v66;
      v60[v75] = v67;
      ++v63;
      v55 = v223;
      v64 = v220;
      goto LABEL_79;
    }
    if (*((uint64_t *)Value + 9) >= 1)
    {
      v68 = 0;
      v69 = v227;
      do
      {
        (&v69[v63])[v68] = *(const char **)(*((_QWORD *)Value + 10) + 8 * v68);
        v55[v63 + v68] = *(_DWORD *)(*((_QWORD *)Value + 11) + 4 * v68);
        v57[v63 + v68] = v66 | 1;
        v60[v63 + v68++] = v67;
      }
      while (*((_QWORD *)Value + 9) > v68);
      v63 += v68;
    }
LABEL_79:
    ++v62;
  }
  while (v62 != v64);
  if (v63 == (_DWORD)v24)
    goto LABEL_128;
  v130 = fsevent_default_log();
  v25 = (int)v218;
  v35 = v226;
  LODWORD(v15) = v217;
  if (os_log_type_enabled(v130, OS_LOG_TYPE_ERROR))
    implementation_callback_rpc_cold_15();
  v55 = v223;
  v19 = v221;
LABEL_133:
  v147 = 0;
  v148 = *((_QWORD *)Value + 21);
  if (v148 == -1)
    v148 = 0;
  if (v15 <= 1)
    v149 = 1;
  else
    v149 = v15;
  v150 = 8 * v149;
  do
  {
    if (v60[v147 / 8] > v148)
      v148 = v60[v147 / 8];
    v147 += 8;
  }
  while (v150 != v147);
  *((_QWORD *)Value + 21) = v148;
  v151 = *((_DWORD *)Value + 46);
  if ((v151 & 0x40) != 0)
  {
    Mutable = CFArrayCreateMutable(v19, v219, MEMORY[0x1E0C9B378]);
    if (Mutable)
    {
      v101 = Mutable;
      if (!(_DWORD)v24)
      {
LABEL_175:
        v103 = 0;
        v102 = 0;
        goto LABEL_176;
      }
      v221 = v19;
      v154 = 0;
      v219 = (int64_t)&v235;
      v218 = &v233;
      *(_QWORD *)&v153 = 136315394;
      v220 = v153;
      v229 = (char *)v35;
      v224 = Mutable;
      *(_QWORD *)&v225 = v228;
      v226 = v35;
      while (1)
      {
        v155 = v227[v154];
        v156 = v223[v154];
        v230 = CFDictionaryCreateMutable(v221, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (!v230)
          break;
        v157 = caller_path(v155, v156);
        v158 = CFStringCreateWithFileSystemRepresentation(v221, v157);
        if (v158)
        {
          v159 = v158;
          CFDictionaryAddValue(v230, CFSTR("path"), v158);
          CFRelease(v159);
          v35 = v226;
          v101 = v224;
        }
        else
        {
          v222 = (os_log_t)fsevent_default_log();
          v35 = v226;
          v101 = v224;
          if (os_log_type_enabled(v222, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = v220;
            v237 = "implementation_callback_rpc";
            v238 = 2080;
            v239 = v157;
            _os_log_error_impl(&dword_182882000, v222, OS_LOG_TYPE_ERROR, "%s: ERROR: CFStringCreateWithFileSystemRepresentation('%s') failed", buf, 0x16u);
          }
        }
        if ((*(_DWORD *)&a5[4 * v154] & 0x77FF00) != 0)
        {
          if (v35 && *(_QWORD *)v229)
          {
            v160 = CFNumberCreate(v221, kCFNumberSInt64Type, v229);
            if (v160)
            {
              v161 = v160;
              CFDictionaryAddValue(v230, CFSTR("fileID"), v160);
              CFRelease(v161);
            }
            else
            {
              v162 = fsevent_default_log();
              if (os_log_type_enabled(v162, OS_LOG_TYPE_ERROR))
                implementation_callback_rpc_cold_11(v234, (_QWORD *)v219, v162);
            }
          }
          if (v228 && *(_DWORD *)v225)
          {
            v163 = CFNumberCreate(v221, kCFNumberSInt32Type, (const void *)v225);
            if (v163)
            {
              v164 = v163;
              CFDictionaryAddValue(v230, CFSTR("docID"), v163);
              CFRelease(v164);
            }
            else
            {
              v165 = fsevent_default_log();
              if (os_log_type_enabled(v165, OS_LOG_TYPE_ERROR))
                implementation_callback_rpc_cold_11(v232, v218, v165);
            }
          }
        }
        CFArraySetValueAtIndex(v101, v154, v230);
        CFRelease(v230);
        ++v154;
        *(_QWORD *)&v225 = v225 + 4;
        v229 += 8;
        if (v24 == v154)
          goto LABEL_175;
      }
      v188 = fsevent_default_log();
      if (os_log_type_enabled(v188, OS_LOG_TYPE_ERROR))
        implementation_callback_rpc_cold_10(v188, v189, v190, v191, v192, v193, v194, v195);
      v102 = 0;
      v103 = 0;
      v44 = 4294967281;
      v35 = v226;
      v101 = v224;
      goto LABEL_210;
    }
    v180 = fsevent_default_log();
    if (os_log_type_enabled(v180, OS_LOG_TYPE_ERROR))
      implementation_callback_rpc_cold_9(v180, v181, v182, v183, v184, v185, v186, v187);
    v101 = 0;
    v102 = 0;
    v103 = 0;
LABEL_191:
    v44 = 4294967282;
    goto LABEL_210;
  }
  if ((v151 & 1) != 0)
  {
    v166 = (const void **)malloc_type_calloc(v24, 8uLL, 0x6004044C4A2DFuLL);
    if (!v166)
    {
      v196 = fsevent_default_log();
      if (os_log_type_enabled(v196, OS_LOG_TYPE_ERROR))
        implementation_callback_rpc_cold_6(v196, v197, v198, v199, v200, v201, v202, v203);
      v101 = 0;
      v102 = 0;
      v103 = 0;
      v44 = 4294967284;
      goto LABEL_210;
    }
    v103 = v166;
    v226 = v35;
    if ((_DWORD)v24)
    {
      v167 = 0;
      while (1)
      {
        v168 = caller_path(v227[v167], v55[v167]);
        v169 = CFStringCreateWithFileSystemRepresentation(v19, v168);
        if (!v169)
          break;
        v103[v167++] = v169;
        if (v24 == v167)
          goto LABEL_173;
      }
      v204 = fsevent_default_log();
      if (os_log_type_enabled(v204, OS_LOG_TYPE_ERROR))
        implementation_callback_rpc_cold_8();
      v101 = 0;
      v102 = 0;
      v44 = 4294967283;
      v35 = v226;
      goto LABEL_210;
    }
LABEL_173:
    v170 = CFArrayCreate(v19, v103, v24, MEMORY[0x1E0C9B378]);
    if (v170)
    {
      v102 = v170;
      v101 = 0;
      v35 = v226;
      goto LABEL_176;
    }
    v205 = fsevent_default_log();
    v35 = v226;
    if (os_log_type_enabled(v205, OS_LOG_TYPE_ERROR))
      implementation_callback_rpc_cold_7(v205, v206, v207, v208, v209, v210, v211, v212);
    v101 = 0;
    v102 = 0;
    goto LABEL_191;
  }
  v103 = 0;
  v102 = 0;
  v101 = 0;
LABEL_176:
  if (*((_QWORD *)Value + 2) && Value[188] && !Value[189])
  {
    FSEventStreamRetain((FSEventStreamRef)Value);
    v171 = *((_DWORD *)Value + 46);
    if ((v171 & 0x40) != 0)
    {
      (*((void (**)(char *, _QWORD, size_t, __CFArray *, _DWORD *, _QWORD *))Value + 2))(Value, *((_QWORD *)Value + 4), v24, v101, v57, v60);
    }
    else if ((v171 & 1) != 0)
    {
      (*((void (**)(char *, _QWORD, size_t, CFArrayRef, _DWORD *, _QWORD *))Value + 2))(Value, *((_QWORD *)Value + 4), v24, v102, v57, v60);
    }
    else
    {
      v224 = v101;
      v226 = v35;
      LODWORD(v218) = v25;
      v229 = (char *)&v215;
      MEMORY[0x1E0C80A78]();
      if (v216 >= 0x200)
        v173 = 512;
      else
        v173 = v216;
      v230 = (__CFDictionary *)((char *)&v215 - ((v172 + 15) & 0xFFFFFFFF0));
      bzero(v230, v173);
      if ((_DWORD)v24)
      {
        v174 = v24;
        v175 = v230;
        v176 = v223;
        v177 = v227;
        do
        {
          v179 = *v177++;
          v178 = v179;
          LODWORD(v179) = *v176++;
          *(_QWORD *)v175 = caller_path(v178, (char)v179);
          v175 = (__CFDictionary *)((char *)v175 + 8);
          --v174;
        }
        while (v174);
      }
      (*((void (**)(char *, _QWORD, size_t, __CFDictionary *, _DWORD *, _QWORD *))Value + 2))(Value, *((_QWORD *)Value + 4), v24, v230, v57, v60);
      v25 = (int)v218;
      v35 = v226;
      v101 = v224;
    }
    if (*((_QWORD *)Value + 45))
    {
      pthread_mutex_lock((pthread_mutex_t *)(Value + 240));
      pthread_cond_signal((pthread_cond_t *)(Value + 304));
      pthread_mutex_unlock((pthread_mutex_t *)(Value + 240));
    }
    FSEventStreamRelease((FSEventStreamRef)Value);
  }
  v44 = 0;
LABEL_210:
  free(v227);
  if (v57 && v25)
    free(v57);
  if (v60 && v25)
    free(v60);
  if (v103)
  {
    if ((_DWORD)v24)
    {
      v213 = v103;
      do
      {
        if (!*v213)
          break;
        CFRelease(*v213++);
        --v24;
      }
      while (v24);
    }
    free(v103);
  }
  if (v102)
    CFRelease(v102);
  if (v101)
    CFRelease(v101);
  v92 = v223;
LABEL_227:
  if (v35)
    free(v35);
  free(v92);
  return v44;
}

void FSEventStreamRelease(FSEventStreamRef streamRef)
{
  unsigned int v1;
  BOOL v2;
  signed int v3;
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (streamRef)
  {
    do
    {
      v1 = __ldaxr((unsigned int *)streamRef);
      v2 = __OFSUB__(v1, 1);
      v3 = v1 - 1;
    }
    while (__stlxr(v3, (unsigned int *)streamRef));
    if ((v3 < 0) ^ v2 | (v3 == 0))
    {
      if ((*(_DWORD *)streamRef & 0x80000000) != 0)
      {
        v5 = fsevent_default_log();
        if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
          FSEventStreamRelease_cold_2(v5, v6, v7, v8, v9, v10, v11, v12);
      }
      else
      {
        _FSEventStreamDeallocate((char *)streamRef);
      }
    }
  }
  else
  {
    v4 = fsevent_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      FSEventStreamRelease_cold_1();
  }
}

const char *caller_path(const char *a1, char a2)
{
  const char *v2;

  v2 = a1;
  if (!(a2 & 3 | strncmp(a1, "/System/Volumes/Data/", 0x15uLL)))
  {
    if (!strncmp(v2 + 20, "/Device/", 8uLL))
      v2 += 27;
    else
      v2 += 20;
  }
  return v2;
}

void cffd_callback(__CFFileDescriptor *a1, int a2, FSEventStreamRef streamRef)
{
  CFFileDescriptorNativeDescriptor NativeDescriptor;

  FSEventStreamRetain(streamRef);
  NativeDescriptor = CFFileDescriptorGetNativeDescriptor(a1);
  process_dir_events(NativeDescriptor, streamRef);
  if (*(int *)streamRef >= 2 && *((_BYTE *)streamRef + 188))
    CFFileDescriptorEnableCallBacks(a1, 1uLL);
  FSEventStreamRelease(streamRef);
}

void FSEventStreamRetain(FSEventStreamRef streamRef)
{
  unsigned int v1;
  NSObject *v2;

  if (streamRef)
  {
    do
      v1 = __ldaxr((unsigned int *)streamRef);
    while (__stlxr(v1 + 1, (unsigned int *)streamRef));
  }
  else
  {
    v2 = fsevent_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      FSEventStreamRetain_cold_1();
  }
}

void process_dir_events(int a1, _QWORD *a2)
{
  kevent *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t i;
  int64_t udata;
  uint64_t v10;
  int v11;
  int *v12;
  const char *v13;
  char **v14;
  uint32_t fflags;
  NSObject *v16;
  int v17;
  uint8_t *p_buf;
  NSObject *v19;
  const char *v20;
  uint32_t v21;
  NSObject *v22;
  NSObject *v23;
  NSObject *v24;
  char *v25;
  uint64_t v26;
  dev_t v27;
  __darwin_time_t v28;
  NSObject *v29;
  NSObject *v30;
  char *v31;
  NSObject *v32;
  char *v33;
  NSObject *v34;
  char *v35;
  char *v36;
  char *v37;
  int v38;
  NSObject *v39;
  dev_t v40;
  timespec timeout;
  uint8_t v42[4];
  const char *v43;
  __int16 v44;
  char *v45;
  stat buf;
  char __s1[1024];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v5 = a2[49];
  v4 = (kevent *)a2[50];
  v6 = a2[9];
  timeout.tv_sec = 0;
  timeout.tv_nsec = 0;
  v40 = v6;
  v7 = kevent(a1, 0, 0, v4, v6, &timeout);
  if ((v7 & 0x80000000) != 0)
  {
    v38 = *__error();
    v39 = fsevent_default_log();
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
      process_dir_events_cold_1(v38);
  }
  else if (v7)
  {
    for (i = v7; i; --i)
    {
      if ((int)v4->udata < 0)
        udata = (uint64_t)v4->udata & 0x7FFFFFFF;
      else
        udata = (int64_t)v4->udata;
      if (udata < 0
        || udata >= v40
        || (v10 = v5 + 32 * udata, v12 = (int *)(v10 + 4), v11 = *(_DWORD *)(v10 + 4), v11 < 0)
        || (v14 = (char **)(v10 + 24), (v13 = *(const char **)(v10 + 24)) == 0))
      {
        v22 = fsevent_default_log();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          if (udata >= v40)
          {
            v28 = 0;
            v27 = -1;
          }
          else
          {
            v26 = v5 + 32 * udata;
            v27 = *(_DWORD *)(v26 + 4);
            v28 = *(_QWORD *)(v26 + 24);
          }
          buf.st_dev = 136316162;
          *(_QWORD *)&buf.st_mode = "process_dir_events";
          WORD2(buf.st_ino) = 2048;
          *(__darwin_ino64_t *)((char *)&buf.st_ino + 6) = udata;
          HIWORD(buf.st_gid) = 1024;
          buf.st_rdev = v40;
          *((_WORD *)&buf.st_rdev + 2) = 1024;
          *(dev_t *)((char *)&buf.st_rdev + 6) = v27;
          WORD1(buf.st_atimespec.tv_sec) = 2048;
          *(__darwin_time_t *)((char *)&buf.st_atimespec.tv_sec + 4) = v28;
          p_buf = (uint8_t *)&buf;
          v19 = v22;
          v20 = "%s: index in event (%ld) not valid (%d max; fdtbl %d name %p)";
          v21 = 44;
          goto LABEL_39;
        }
      }
      else
      {
        if ((*(_BYTE *)v10 & 1) != 0)
        {
          if (watch_path("process_dir_events", a1, v13, (uint64_t)v4, v5 + 32 * udata, udata))
          {
            v23 = fsevent_default_log();
            if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
            {
              v36 = *v14;
              buf.st_dev = 136315394;
              *(_QWORD *)&buf.st_mode = "process_dir_events";
              WORD2(buf.st_ino) = 2080;
              *(__darwin_ino64_t *)((char *)&buf.st_ino + 6) = (__darwin_ino64_t)v36;
              _os_log_error_impl(&dword_182882000, v23, OS_LOG_TYPE_ERROR, "%s: creation: watch_path() failed for '%s'", (uint8_t *)&buf, 0x16u);
            }
          }
          if ((*(_BYTE *)v10 & 1) != 0)
            goto LABEL_17;
          root_dir_event_callback((uint64_t)a2, udata, 32);
          if ((*(_BYTE *)v10 & 8) == 0)
            goto LABEL_17;
          if (!watch_all_parents((uint64_t)"process_dir_events", a1, *v14, v5 + 32 * udata, udata))
            goto LABEL_17;
          v24 = fsevent_default_log();
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
            goto LABEL_17;
          v25 = *v14;
          buf.st_dev = 136315394;
          *(_QWORD *)&buf.st_mode = "process_dir_events";
          WORD2(buf.st_ino) = 2080;
          *(__darwin_ino64_t *)((char *)&buf.st_ino + 6) = (__darwin_ino64_t)v25;
          p_buf = (uint8_t *)&buf;
          v19 = v24;
          v20 = "%s: creation: watch_all_parents() failed for '%s'";
LABEL_51:
          v21 = 22;
          goto LABEL_39;
        }
        fflags = v4->fflags;
        if ((fflags & 0x22) == 0)
        {
          if ((fflags & 1) == 0)
            goto LABEL_17;
          root_dir_event_callback((uint64_t)a2, udata, 32);
          if (watch_path("process_dir_events", a1, *v14, (uint64_t)v4, v5 + 32 * udata, udata))
          {
            v29 = fsevent_default_log();
            if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
            {
              v37 = *v14;
              buf.st_dev = 136315394;
              *(_QWORD *)&buf.st_mode = "process_dir_events";
              WORD2(buf.st_ino) = 2080;
              *(__darwin_ino64_t *)((char *)&buf.st_ino + 6) = (__darwin_ino64_t)v37;
              _os_log_error_impl(&dword_182882000, v29, OS_LOG_TYPE_ERROR, "%s: delete: watch_path() failed for '%s'", (uint8_t *)&buf, 0x16u);
            }
          }
          if ((*(_BYTE *)v10 & 8) == 0)
            goto LABEL_17;
          if (!watch_all_parents((uint64_t)"process_dir_events", a1, *v14, v5 + 32 * udata, udata))
            goto LABEL_17;
          v30 = fsevent_default_log();
          if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
            goto LABEL_17;
          v31 = *v14;
          buf.st_dev = 136315394;
          *(_QWORD *)&buf.st_mode = "process_dir_events";
          WORD2(buf.st_ino) = 2080;
          *(__darwin_ino64_t *)((char *)&buf.st_ino + 6) = (__darwin_ino64_t)v31;
          p_buf = (uint8_t *)&buf;
          v19 = v30;
          v20 = "%s: delete: watch_all_parents() failed for '%s'";
          goto LABEL_51;
        }
        memset(&buf, 0, sizeof(buf));
        if (!fcntl(v11, 50, __s1))
        {
          if (!strcmp(__s1, *v14) && !lstat(__s1, &buf))
            goto LABEL_17;
          root_dir_event_callback((uint64_t)a2, udata, 32);
          if ((*(_BYTE *)v10 & 4) != 0)
          {
            free(*v14);
            *v14 = strdup(__s1);
          }
          else if (watch_path("process_dir_events", a1, *v14, (uint64_t)v4, v5 + 32 * udata, udata))
          {
            v32 = fsevent_default_log();
            if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
            {
              v33 = *v14;
              *(_DWORD *)v42 = 136315394;
              v43 = "process_dir_events";
              v44 = 2080;
              v45 = v33;
              _os_log_error_impl(&dword_182882000, v32, OS_LOG_TYPE_ERROR, "%s: rename: watch_path() failed for '%s'", v42, 0x16u);
            }
          }
          if ((*(_BYTE *)v10 & 8) == 0)
            goto LABEL_17;
          if (!watch_all_parents((uint64_t)"process_dir_events", a1, *v14, v5 + 32 * udata, udata))
            goto LABEL_17;
          v34 = fsevent_default_log();
          if (!os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
            goto LABEL_17;
          v35 = *v14;
          *(_DWORD *)v42 = 136315394;
          v43 = "process_dir_events";
          v44 = 2080;
          v45 = v35;
          p_buf = v42;
          v19 = v34;
          v20 = "%s: rename: watch_all_parents() failed for '%s'";
          goto LABEL_51;
        }
        v16 = fsevent_default_log();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
          v17 = *v12;
          *(_DWORD *)v42 = 136315394;
          v43 = "process_dir_events";
          v44 = 1024;
          LODWORD(v45) = v17;
          p_buf = v42;
          v19 = v16;
          v20 = "%s: failed to get the new path for fd %d";
          v21 = 18;
LABEL_39:
          _os_log_error_impl(&dword_182882000, v19, OS_LOG_TYPE_ERROR, v20, p_buf, v21);
        }
      }
LABEL_17:
      ++v4;
    }
  }
}

uint64_t watch_path(const char *a1, int a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v10;
  int v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  NSObject *v21;
  uint64_t v22;
  NSObject *v23;
  int v24;
  NSObject *v25;
  int *v26;
  char *v27;
  int *v28;
  char *v29;
  NSObject *v30;
  NSObject *v32;
  NSObject *v33;
  NSObject *v34;
  char *v36;
  uint64_t v37;
  int v38;
  stat v41;
  stat v42;
  uint8_t buf[4];
  const char *v44;
  __int16 v45;
  char *p_s;
  __int16 v47;
  int v48;
  __int16 v49;
  _BYTE v50[10];
  _QWORD v51[124];
  char __s;
  char v53;
  char v54[1024];
  uint64_t v55;

  v10 = 0;
  v55 = *MEMORY[0x1E0C80C00];
  memset(&v42, 0, sizeof(v42));
  v11 = -1;
  memset(&v41, 0, sizeof(v41));
  v12 = 1;
  v13 = 1;
  v14 = 0xFFFFFFFFLL;
  while (1)
  {
    v15 = v10;
    v10 = v12;
    realpath_DARWIN_EXTSN(a3, &__s);
    if (v53)
    {
      v16 = 0;
      while (1)
      {
        v17 = open(&__s, 0x8000);
        if ((v17 & 0x80000000) == 0)
          break;
        __error();
        my_dirname(&__s, v54);
        realpath_DARWIN_EXTSN(v54, &__s);
        ++v16;
        if (!v53)
          goto LABEL_8;
      }
      v11 = v17;
LABEL_11:
      v14 = 0;
      goto LABEL_12;
    }
    v16 = 0;
    if (v11 < 0)
    {
LABEL_8:
      v11 = open(&__s, 0x8000);
      if (v11 < 0)
      {
        v30 = fsevent_default_log();
        if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
          watch_path_cold_2();
        __error();
        v32 = fsevent_default_log();
        if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
          watch_path_cold_1();
        v14 = *__error();
        goto LABEL_45;
      }
      goto LABEL_11;
    }
LABEL_12:
    fcntl(v11, 2, 1);
    if (v13 || (v18 = open(&__s, 0), v18 < 0))
    {
      v20 = v15;
    }
    else
    {
      v19 = v18;
      fstat(v11, &v42);
      fstat(v19, &v41);
      close(v19);
      close(v11);
      if (v42.st_ino == v41.st_ino)
      {
        v33 = fsevent_default_log();
        if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
          watch_path_cold_3();
        v11 = -1;
        goto LABEL_45;
      }
      v20 = v15;
      v11 = -1;
    }
    *(_QWORD *)a4 = v11;
    *(_QWORD *)(a4 + 8) = 0x270021FFFCLL;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)(a4 + 24) = a6;
    v14 = kevent(a2, (const kevent *)a4, 1, 0, 0, 0);
    if ((v14 & 0x80000000) != 0)
    {
      v21 = fsevent_default_log();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        v37 = *(_QWORD *)(a5 + 24);
        v26 = __error();
        v27 = strerror(*v26);
        *(_DWORD *)buf = 136316162;
        v44 = a1;
        v45 = 2080;
        p_s = "watch_path";
        v47 = 1024;
        v48 = v11;
        v49 = 2080;
        *(_QWORD *)v50 = v37;
        *(_WORD *)&v50[8] = 2080;
        v51[0] = v27;
        _os_log_error_impl(&dword_182882000, v21, OS_LOG_TYPE_ERROR, "%s: %s: error trying to add kqueue for fd %d (%s; %s)",
          buf,
          0x30u);
      }
    }
    v22 = *(unsigned int *)(a5 + 4);
    if ((v22 & 0x80000000) == 0)
    {
      *(_QWORD *)a4 = v22;
      *(_QWORD *)(a4 + 8) = 0x270002FFFCLL;
      *(_QWORD *)(a4 + 16) = 0;
      *(_QWORD *)(a4 + 24) = a6;
      v14 = kevent(a2, (const kevent *)a4, 1, 0, 0, 0);
      if ((v14 & 0x80000000) != 0)
      {
        v23 = fsevent_default_log();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        {
          v38 = *(_DWORD *)(a5 + 4);
          v28 = __error();
          v29 = strerror(*v28);
          *(_DWORD *)buf = 136315906;
          v44 = a1;
          v45 = 2080;
          p_s = "watch_path";
          v47 = 1024;
          v48 = v38;
          v49 = 2080;
          *(_QWORD *)v50 = v29;
          _os_log_error_impl(&dword_182882000, v23, OS_LOG_TYPE_ERROR, "%s: %s: error removing fd %d from kqueue (%s)", buf, 0x26u);
        }
      }
      close(*(_DWORD *)(a5 + 4));
    }
    *(_DWORD *)a5 = *(_DWORD *)a5 & 0xFFFFFFFE | (v16 != 0);
    *(_DWORD *)(a5 + 4) = v11;
    v24 = open(&__s, 0);
    if (v24 < 0)
      break;
    fstat(v11, &v42);
    fstat(v24, &v41);
    close(v24);
    if (v42.st_ino == v41.st_ino)
      goto LABEL_39;
    v25 = fsevent_default_log();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v44 = "watch_path";
      v45 = 2080;
      p_s = &__s;
      _os_log_error_impl(&dword_182882000, v25, OS_LOG_TYPE_ERROR, "%s: watching path(%s) renamed while registering watchroot", buf, 0x16u);
    }
LABEL_30:
    v13 = v24 >= 0;
    v12 = v10 + 1;
    if (v10 == 1000)
    {
      v10 = 1001;
      goto LABEL_45;
    }
  }
  if ((*(_DWORD *)a5 & 5) != 4)
    goto LABEL_30;
  if (!fcntl(*(_DWORD *)(a5 + 4), 50, buf))
  {
    free(*(void **)(a5 + 24));
    *(_QWORD *)(a5 + 24) = strdup((const char *)buf);
  }
LABEL_39:
  if (v20 <= 0x3E6 && (v11 & 0x80000000) == 0)
    return 0;
LABEL_45:
  v34 = fsevent_default_log();
  if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
  {
    v36 = strerror(v14);
    *(_DWORD *)buf = 136316418;
    v44 = "watch_path";
    v45 = 2080;
    p_s = (char *)a3;
    v47 = 1024;
    v48 = v11;
    v49 = 1024;
    *(_DWORD *)v50 = v10;
    *(_WORD *)&v50[4] = 1024;
    *(_DWORD *)&v50[6] = v14;
    LOWORD(v51[0]) = 2080;
    *(_QWORD *)((char *)v51 + 2) = v36;
    _os_log_error_impl(&dword_182882000, v34, OS_LOG_TYPE_ERROR, "%s: watching path (%s) fd(%d) retry (%d) failed (%d):(%s)", buf, 0x32u);
  }
  return v14;
}

char *my_dirname(char *__s, char *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;

  if (__s && *__s && (v4 = strrchr(__s, 47)) != 0)
  {
    if (v4 > __s)
    {
      while (*v4 == 47)
      {
        if (--v4 <= __s)
        {
          v4 = __s;
          break;
        }
      }
    }
    v5 = v4 - __s;
    if (v4 - __s > 1023)
    {
      strncpy(a2, __s, 0x3FFuLL);
      a2[1023] = 0;
    }
    else
    {
      v6 = v5 + 1;
      strncpy(a2, __s, v5 + 1);
      a2[v6] = 0;
    }
  }
  else
  {
    strcpy(a2, "./");
  }
  return a2;
}

uint64_t allocate_d2f_port(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  NSObject *v3;

  v2 = mach_port_allocate(*MEMORY[0x1E0C83DA0], 1u, (mach_port_name_t *)(a2 + 192));
  if ((_DWORD)v2)
  {
    v3 = fsevent_default_log();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      allocate_d2f_port_cold_1();
  }
  return v2;
}

void sub_1828DD438(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v4;

  v4 = v1;

  _Unwind_Resume(a1);
}

void sub_1828DD648(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1828DD73C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___ZN14LaunchServices19URLPropertyProviderL13prepareValuesEPK7__CFURLP11__FileCachePKPK10__CFStringPPKvlSC_PP9__CFError_block_invoke_3(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  id v8;

  v8 = a2;
  v5 = a3;
  v6 = v5;
  if (*(_BYTE *)(a1 + 40))
  {
    _LSReplaceURLPropertyValueForDecoding(v5);
    v7 = objc_claimAutoreleasedReturnValue();

    v6 = (void *)v7;
  }
  MEMORY[0x186DAD930](*(_QWORD *)(a1 + 32), v8, v6);

}

void sub_1828DD7C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

CFStringRef UTTypeCopyPreferredTagWithClass(CFStringRef inUTI, CFStringRef inTagClass)
{
  const __CFArray *v2;
  const __CFArray *v3;
  const void *ValueAtIndex;
  const __CFString *v5;

  v2 = UTTypeCopyAllTagsWithClass(inUTI, inTagClass);
  if (!v2)
    return 0;
  v3 = v2;
  if (CFArrayGetCount(v2) < 1)
  {
    v5 = 0;
  }
  else
  {
    ValueAtIndex = CFArrayGetValueAtIndex(v3, 0);
    v5 = (const __CFString *)CFRetain(ValueAtIndex);
  }
  CFRelease(v3);
  return v5;
}

CFArrayRef UTTypeCopyAllTagsWithClass(CFStringRef inUTI, CFStringRef inTagClass)
{
  void *v2;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  id v10;

  v2 = 0;
  if (inUTI && inTagClass)
  {
    v5 = (void *)MEMORY[0x186DAE7A0]();
    +[UTTypeRecord typeRecordWithIdentifier:](UTTypeRecord, "typeRecordWithIdentifier:", inUTI);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = v6;
    if (v6)
    {
      objc_msgSend(v6, "tagSpecification");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = objc_opt_class();
      objc_msgSend(v8, "objectForKey:ofClass:valuesOfClass:", inTagClass, v9, objc_opt_class());
      v2 = (void *)objc_claimAutoreleasedReturnValue();

      if (v2)
        v10 = v2;

    }
    else
    {
      v2 = 0;
    }

    objc_autoreleasePoolPop(v5);
  }
  return (CFArrayRef)v2;
}

void sub_1828DD910(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828DD988(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _UTDynamicGetTagSpecification(const __CFString *a1)
{
  id v1;
  uint64_t v2;
  _QWORD v4[5];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  void (*v9)(uint64_t);
  id v10;

  v5 = 0;
  v6 = &v5;
  v7 = 0x3032000000;
  v8 = __Block_byref_object_copy__50;
  v9 = __Block_byref_object_dispose__50;
  v10 = 0;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = ___UTDynamicGetTagSpecification_block_invoke;
  v4[3] = &unk_1E1045988;
  v4[4] = &v5;
  _UTDynamicValuesSearch(0, a1, 2, 0, (uint64_t (*)(uint64_t *))_UTDynamicValuesSearchWithBlock::$_0::__invoke, (uint64_t)v4);
  if (objc_msgSend((id)v6[5], "count"))
  {
    v1 = objc_alloc(MEMORY[0x1E0C99D80]);
    v2 = objc_msgSend(v1, "initWithDictionary:copyItems:", v6[5], 1);
  }
  else
  {
    v2 = 0;
  }
  _Block_object_dispose(&v5, 8);

  return v2;
}

void sub_1828DDA84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

void ___ZL24_LSPlistGetCommonStringsv_block_invoke()
{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  NSObject *v5;
  id v6;
  void *v7;

  v0 = (void *)MEMORY[0x186DAE7A0]();
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "addObject:", CFSTR("UISupportedInterfaceOrientations"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.security.exception.mach-lookup.global-name"));
  objc_msgSend(v1, "addObject:", CFSTR("UIInterfaceOrientationLandscapeRight"));
  objc_msgSend(v1, "addObject:", CFSTR("UIInterfaceOrientationPortrait"));
  objc_msgSend(v1, "addObject:", CFSTR("CFBundleInfoDictionaryVersion"));
  objc_msgSend(v1, "addObject:", CFSTR("UIInterfaceOrientationLandscapeLeft"));
  objc_msgSend(v1, "addObject:", CFSTR("CFBundleSupportedPlatforms"));
  objc_msgSend(v1, "addObject:", CFSTR("CFBundleShortVersionString"));
  objc_msgSend(v1, "addObject:", CFSTR("CFBundleDevelopmentRegion"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.private.security.container-required"));
  objc_msgSend(v1, "addObject:", CFSTR("CFBundleNumericVersion"));
  objc_msgSend(v1, "addObject:", CFSTR("BuildMachineOSBuild"));
  objc_msgSend(v1, "addObject:", CFSTR("CFBundlePackageType"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.springboard.opensensitiveurl"));
  objc_msgSend(v1, "addObject:", CFSTR("CFBundleExecutable"));
  objc_msgSend(v1, "addObject:", CFSTR("CFBundleIdentifier"));
  objc_msgSend(v1, "addObject:", CFSTR("UIRequiredDeviceCapabilities"));
  objc_msgSend(v1, "addObject:", CFSTR("UIViewControllerBasedStatusBarAppearance"));
  objc_msgSend(v1, "addObject:", CFSTR("DTPlatformVersion"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.security.exception.files.home-relative-path.read-write"));
  objc_msgSend(v1, "addObject:", CFSTR("MinimumOSVersion"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.UIKit.vends-view-services"));
  objc_msgSend(v1, "addObject:", CFSTR("CFBundleSignature"));
  objc_msgSend(v1, "addObject:", CFSTR("CFBundleVersion"));
  objc_msgSend(v1, "addObject:", CFSTR("DTPlatformBuild"));
  objc_msgSend(v1, "addObject:", CFSTR("CanInheritApplicationStateFromOtherProcesses"));
  objc_msgSend(v1, "addObject:", CFSTR("LSRequiresIPhoneOS"));
  objc_msgSend(v1, "addObject:", CFSTR("DTPlatformName"));
  objc_msgSend(v1, "addObject:", CFSTR("UIDeviceFamily"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.private.tcc.allow"));
  objc_msgSend(v1, "addObject:", CFSTR("CFBundleDisplayName"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.private.coreservices.canmaplsdatabase"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.security.exception.shared-preference.read-write"));
  objc_msgSend(v1, "addObject:", CFSTR("DTXcodeBuild"));
  objc_msgSend(v1, "addObject:", CFSTR("UIViewServiceUsesNSXPCConnection"));
  objc_msgSend(v1, "addObject:", CFSTR("UILaunchStoryboardName"));
  objc_msgSend(v1, "addObject:", CFSTR("UIInterfaceOrientationPortraitUpsideDown"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.itunesstored.private"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.accounts.appleaccount.fullaccess"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.private.accounts.allaccounts"));
  objc_msgSend(v1, "addObject:", CFSTR("CFBundleName"));
  objc_msgSend(v1, "addObject:", CFSTR("DTCompiler"));
  objc_msgSend(v1, "addObject:", CFSTR("DTSDKBuild"));
  objc_msgSend(v1, "addObject:", CFSTR("keychain-access-groups"));
  objc_msgSend(v1, "addObject:", CFSTR("CFBundlePrimaryIcon"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.locationd.effective_bundle"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.Contacts.database-allow"));
  objc_msgSend(v1, "addObject:", CFSTR("DTSDKName"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.security.exception.files.absolute-path.read-write"));
  objc_msgSend(v1, "addObject:", CFSTR("kTCCServiceAddressBook"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.CommCenter.fine-grained"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.coremedia.allow-protected-content-playback"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.springboard.openurlinbackground"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.private.canModifyAppLinkPermissions"));
  objc_msgSend(v1, "addObject:", CFSTR("iPhoneOS"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.frontboard.launchapplications"));
  objc_msgSend(v1, "addObject:", CFSTR("application-identifier"));
  objc_msgSend(v1, "addObject:", CFSTR("SBMatchingApplicationGenres"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.private.tcc.allow.overridable"));
  objc_msgSend(v1, "addObject:", CFSTR("UIBackgroundModes"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.security.exception.files.absolute-path.read-only"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.security.exception.files.home-relative-path.read-only"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.private.appleaccount.app-hidden-from-icloud-settings"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.telephonyutilities.callservicesdaemon.callprovidermanager"));
  objc_msgSend(v1, "addObject:", CFSTR("DTXcode"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.QuartzCore.secure-mode"));
  objc_msgSend(v1, "addObject:", CFSTR("platform-application"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.private.corerecents"));
  objc_msgSend(v1, "addObject:", CFSTR("CFBundleIcons"));
  objc_msgSend(v1, "addObject:", CFSTR("NSLocationWhenInUseUsageDescription"));
  objc_msgSend(v1, "addObject:", CFSTR("kTCCServicePhotos"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.wifi.manager-access"));
  objc_msgSend(v1, "addObject:", CFSTR("CFBundleURLTypes"));
  objc_msgSend(v1, "addObject:", CFSTR("UIApplicationSystemWindowsSecureKey"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.telephonyutilities.callservicesd"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.private.MobileGestalt.AllowedProtectedKeys"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.private.canGetAppLinkInfo"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.managedconfiguration.profiled-access"));
  objc_msgSend(v1, "addObject:", CFSTR("SBMachServices"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.coreaudio.allow-amr-decode"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.telephonyutilities.callservicesdaemon.callstatecontroller"));
  objc_msgSend(v1, "addObject:", CFSTR("SBAppTags"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.authkit.client.internal"));
  objc_msgSend(v1, "addObject:", CFSTR("kTCCServiceCamera"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.SystemConfiguration.SCPreferences-write-access"));
  objc_msgSend(v1, "addObject:", CFSTR("UIRequiresFullScreen"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.private.suggestions.contacts"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.developer.icloud-services"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.authkit.client.private"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.developer.icloud-container-identifiers"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.coreduetd.allow"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.developer.ubiquity-kvstore-identifier"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.private.coreservices.canopenactivity"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.springboard.activateRemoteAlert"));
  objc_msgSend(v1, "addObject:", CFSTR("NSUserActivityTypes"));
  objc_msgSend(v1, "addObject:", CFSTR("kTCCServiceMediaLibrary"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.accounts.appleidauthentication.defaultaccess"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.developer.icloud-container-environment"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.private.assets.accessible-asset-types"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.private.imcore.imremoteurlconnection"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.springboard.launchapplications"));
  objc_msgSend(v1, "addObject:", CFSTR("CAProcessCanAccessGPU"));
  objc_msgSend(v1, "addObject:", CFSTR("kTCCServiceMicrophone"));
  objc_msgSend(v1, "addObject:", CFSTR("_LSSupportsRemoval"));
  objc_msgSend(v1, "addObject:", CFSTR("UIApplicationShortcutItems"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.private.suggestions"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.springboard.shortcutitems.customimage"));
  objc_msgSend(v1, "addObject:", CFSTR("SBUninstallIconOverrideStringsFile"));
  objc_msgSend(v1, "addObject:", CFSTR("kTCCServiceCalendar"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.private.persona.read"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.mobile.deleted.AllowFreeSpace"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.SystemConfiguration.SCDynamicStore-write-access"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.springboard.allowallcallurls"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.security.exception.shared-preference.read-only"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.security.application-groups"));
  objc_msgSend(v1, "addObject:", CFSTR("SBIsLaunchableDuringSetup"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.private.webinspector.allow-remote-inspection"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.locationd.usage_oracle"));
  objc_msgSend(v1, "addObject:", CFSTR("CFBundleAllowMixedLocalizations"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.private.game-center.bypass-authentication"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.avfoundation.allow-still-image-capture-shutter-sound-manipulation"));
  objc_msgSend(v1, "addObject:", CFSTR("hidden"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.mobilemail.mailservices"));
  objc_msgSend(v1, "addObject:", CFSTR("armv7"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.coretelephony.Identity.get"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.private.healthkit.medicaliddata"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.coreduetd.people"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.private.hsa-authentication-processing"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.private.mobileinstall.upgrade-enabled"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.private.corespotlight.internal"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.springboard.appbackgroundstyle"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.private.subscriptionservice.internal"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.private.bmk.allow"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.security.exception.iokit-user-client-class"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.private.lockdown.finegrained-get"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.private.mobileinstall.allowedSPI"));
  objc_msgSend(v1, "addObject:", CFSTR("CoreSpotlightContinuation"));
  objc_msgSend(v1, "addObject:", CFSTR("CoreSpotlightActions"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.accounts.facebook.defaultaccess"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.developer.pass-type-identifiers"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.locationd.authorizeapplications"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.private.network.socket-delegate"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.QuartzCore.global-capture"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.media.ringtones.read-only"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.managedconfiguration.profiled.configurationprofiles"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.coremedia.allow-mpeg4streaming"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.private.cloudkit.systemService"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.springboard.openurlswhenlocked"));
  objc_msgSend(v1, "addObject:", CFSTR("SBIconVisibilitySetByAppPreference"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.private.launchservices.suppresscustomschemeprompt"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.private.corespotlight.search.internal"));
  objc_msgSend(v1, "addObject:", CFSTR("/private/var/containers/Shared/SystemGroup/systemgroup.com.apple.lsd.iconscache/Library/Caches/com.apple.IconsCache/"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.developer.healthkit"));
  objc_msgSend(v1, "addObject:", CFSTR("CFBundleDocumentTypes"));
  objc_msgSend(v1, "addObject:", CFSTR("aps-connection-initiate"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.private.communicationsfilter"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.private.social.facebook.like"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.keystore.device"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.springboard.activateawayviewplugins"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.springboard.statusbarstyleoverrides"));
  objc_msgSend(v1, "addObject:", CFSTR("fairplay-client"));
  objc_msgSend(v1, "addObject:", CFSTR("UIStatusBarStyle"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.security.system-groups"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.visualvoicemail.client"));
  objc_msgSend(v1, "addObject:", CFSTR("UIMainStoryboardFile"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.certificates"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.videoconference.allow-conferencing"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.appstored.xpc.updates"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.private.externalaccessory.showallaccessories"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.private.librarian.container-proxy"));
  objc_msgSend(v1, "addObject:", CFSTR("*.pass.com.apple.itunes.storecredit"));
  objc_msgSend(v1, "addObject:", CFSTR("access-call-providers"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.hsa-authentication-server"));
  objc_msgSend(v1, "addObject:", CFSTR("NSPrincipalClass"));
  objc_msgSend(v1, "addObject:", CFSTR("UTExportedTypeDeclarations"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.assistant.dictation.prerecorded"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.private.game-center"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.safari.credit-cards"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.CoreRoutine.LocationOfInterest"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.developer.ubiquity-container-identifiers"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.private.allow-explicit-graphics-priority"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.seld.tsmmanager"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.springboard.wallpaperAnimationSuspension"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.icloud.fmfd.access"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.nanosystemsettings"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.backboardd.launchapplications"));
  objc_msgSend(v1, "addObject:", CFSTR("SKRespectApplicationUserInterfaceLayoutDirection"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.nfcd.hwmanager"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.private.healthkit.authorization_bypass"));
  objc_msgSend(v1, "addObject:", CFSTR("SBAppUsesLocalNotifications"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.private.ids.messaging.urgent-priority"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.private.ids.messaging"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.private.persona.write"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.security.temporary-exception.mach-lookup.global-name"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.companionappd.connect.allow"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.icloud.findmydeviced.access"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.mediastream.mstreamd-access"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.private.security.no-sandbox"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.private.hid.client.service-protected"));
  objc_msgSend(v1, "addObject:", CFSTR("unboundedTaskCompletion"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.TextInput.rdt.me"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.identities"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.private.alloy.passbook.provisioning"));
  objc_msgSend(v1, "addObject:", CFSTR("kTCCServiceReminders"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.backboardd.hostCanRequireTouchesFromHostedContent"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.launchservices.receivereferrerrurl"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.private.accounts.customaccesssinfo"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.radios.plist"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.locationd.prompt_behavior"));
  objc_msgSend(v1, "addObject:", CFSTR("/Library/Preferences/com.apple.mobilephone.speeddial.plist"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.avfoundation.allow-shallow-depth-of-field-effect"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.excludes-extensions"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.private.ubiquity-additional-kvstore-identifiers"));
  objc_msgSend(v1, "addObject:", CFSTR("UIStatusBarHidden"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.familycircle.agent"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.icloud.fmfd"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.mobile.keybagd.xpc"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.payment.all-access"));
  objc_msgSend(v1, "addObject:", CFSTR("UIApplicationShortcutItemsVersion"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.bulletinboard.utilities"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.notificationcenter.widgetcontrollerhascontent"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.private.cloudkit.setEnvironment"));
  objc_msgSend(v1, "addObject:", CFSTR("UIApplicationShortcutWidget"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.private.healthkit"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.cards.all-access"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.managedconfiguration.profiled"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.springboard.activateassistant"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.keystore.stash.access"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.routined.registration"));
  objc_msgSend(v1, "addObject:", CFSTR("SBStarkCapable"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.mobilesafari"));
  objc_msgSend(v1, "addObject:", CFSTR("/Media/PhotoData/"));
  objc_msgSend(v1, "addObject:", CFSTR("UIBackgroundStyle"));
  objc_msgSend(v1, "addObject:", CFSTR("/private/var/mobile/Library/Preferences/com.apple.restrictionspassword.plist"));
  objc_msgSend(v1, "addObject:", CFSTR("DataProtectionClass"));
  objc_msgSend(v1, "addObject:", CFSTR("SBIconVisibilityDefaultVisible"));
  objc_msgSend(v1, "addObject:", CFSTR("UIStatusBarTintParameters"));
  objc_msgSend(v1, "addObject:", CFSTR("/private/var/containers/Shared/SystemGroup/systemgroup.com.apple.configurationprofiles/Library/ConfigurationProfiles/CloudConfigurationDetails.plist"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.intents.extension.discovery"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.private.healthkit.authorization_manager"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.passes.add-silently"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.private.tcc.manager"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.developer.extension-host.photo-editing"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.homekit.private-spi-access"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.nano.nanoregistry.pairunpairobliterate"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.private.suggestions.events"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.springboard.allowIconVisibilityChanges"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.private.ids.idquery-cache"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.private.ind.client"));
  objc_msgSend(v1, "addObject:", CFSTR("continuous"));
  objc_msgSend(v1, "addObject:", CFSTR("/private/var/containers/Shared/SystemGroup/systemgroup.com.apple.configurationprofiles/Library/ConfigurationProfiles/MDMAppManagement.plist"));
  objc_msgSend(v1, "addObject:", CFSTR("SBLaunchSuspendedAlways"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.private.can-load-any-content-blocker"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.springboard.setWantsLockButtonEvents"));
  objc_msgSend(v1, "addObject:", CFSTR("com.apple.NPKCompanionAgent.client"));
  objc_msgSend(v1, "addObject:", CFSTR("seatbelt-profiles"));
  objc_msgSend(v1, "addObject:", CFSTR("/private/var/containers/Shared/SystemGroup/systemgroup.com.apple.configurationprofiles/Library/ConfigurationProfiles/UserSettings.plist"));
  v2 = (void *)objc_msgSend(v1, "copy");

  objc_autoreleasePoolPop(v0);
  if (v2)
  {
    v3 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99E40]), "initWithArray:", v2);
    v4 = (void *)_LSPlistGetCommonStrings(void)::result;
    _LSPlistGetCommonStrings(void)::result = v3;

  }
  if (!_LSPlistGetCommonStrings(void)::result)
  {
    _LSDefaultLog();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      ___ZL24_LSPlistGetCommonStringsv_block_invoke_cold_1(v5);

    v6 = objc_alloc_init(MEMORY[0x1E0C99E40]);
    v7 = (void *)_LSPlistGetCommonStrings(void)::result;
    _LSPlistGetCommonStrings(void)::result = (uint64_t)v6;

  }
}

void sub_1828DEB78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN14LaunchServices10DMFSupportL17reloadAllPoliciesEP27DMFApplicationPolicyMonitor_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4;
  LaunchServices::DMFSupport *v5;
  NSObject *v6;
  NSObject *v7;

  v4 = a2;
  v5 = a3;
  LaunchServices::DMFSupport::getLog(v5);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v4)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      ___ZN14LaunchServices10DMFSupportL17reloadAllPoliciesEP27DMFApplicationPolicyMonitor_block_invoke_cold_2();

    LaunchServices::DMFSupport::addKnownPoliciesToCache(v4, 1);
  }
  else
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      ___ZN14LaunchServices10DMFSupportL17reloadAllPoliciesEP27DMFApplicationPolicyMonitor_block_invoke_cold_1();

  }
}

void sub_1828DEC64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void LaunchServices::DMFSupport::addKnownPoliciesToCache(void *a1, int a2)
{
  void *v3;
  uint64_t v4;
  id v5;
  id v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  NSObject *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  uint64_t v24;
  void *v25;
  _BOOL4 v26;
  NSObject *v27;
  _LSDServiceDomain *v28;
  uint64_t v29;
  LaunchServices::DMFSupport *v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t j;
  void *v35;
  NSObject *v36;
  id v37;
  id v38;
  id v39;
  void *v40;
  id v41;
  _QWORD v42[4];
  id v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  void **v48;
  id v49;
  char v50;
  id v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  _QWORD v56[4];
  id v57;
  NSObject *v58;
  _BYTE v59[128];
  _BYTE v60[128];
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v39 = a1;
  v3 = (void *)objc_msgSend(v39, "mutableCopy");
  v4 = MEMORY[0x1E0C809B0];
  v42[0] = MEMORY[0x1E0C809B0];
  v42[1] = 3221225472;
  v42[2] = ___ZN14LaunchServices10DMFSupportL23addKnownPoliciesToCacheEP12NSDictionaryIP8NSStringP8NSNumberEb_block_invoke;
  v42[3] = &unk_1E10434D0;
  v5 = v3;
  v43 = v5;
  objc_msgSend(v39, "enumerateKeysAndObjectsUsingBlock:", v42);
  v6 = v5;
  os_unfair_lock_lock((os_unfair_lock_t)&LaunchServices::DMFSupport::allPoliciesLock);
  v7 = (void *)objc_msgSend((id)LaunchServices::DMFSupport::allPolicies, "copy");
  v8 = v7;
  if (a2)
  {
    v9 = objc_msgSend(v6, "copy");
    v10 = (void *)LaunchServices::DMFSupport::allPolicies;
    LaunchServices::DMFSupport::allPolicies = v9;
  }
  else
  {
    v11 = (void *)objc_msgSend(v7, "mutableCopy");
    v12 = v11;
    if (v11)
      v13 = v11;
    else
      v13 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v10 = v13;

    objc_msgSend(v10, "addEntriesFromDictionary:", v6);
    v14 = objc_msgSend(v10, "copy");
    v15 = (void *)LaunchServices::DMFSupport::allPolicies;
    LaunchServices::DMFSupport::allPolicies = v14;

  }
  os_unfair_lock_unlock((os_unfair_lock_t)&LaunchServices::DMFSupport::allPoliciesLock);
  v16 = v8;
  v41 = v6;
  LaunchServices::DMFSupport::getNotificationCenter(0);
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  if (v40)
  {
    objc_msgSend(MEMORY[0x1E0C99E20], "set", v6, v5);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v56[0] = v4;
    v56[1] = 3221225472;
    v56[2] = ___ZN14LaunchServices10DMFSupportL16postNotificationEP12NSDictionaryIP8NSStringP8NSNumberES7__block_invoke;
    v56[3] = &unk_1E1042198;
    v18 = v41;
    v57 = v18;
    v19 = v17;
    v58 = v19;
    objc_msgSend(v16, "enumerateKeysAndObjectsUsingBlock:", v56);
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v20 = v18;
    v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v52, v60, 16);
    if (v21)
    {
      v22 = *(_QWORD *)v53;
      do
      {
        for (i = 0; i != v21; ++i)
        {
          if (*(_QWORD *)v53 != v22)
            objc_enumerationMutation(v20);
          v24 = *(_QWORD *)(*((_QWORD *)&v52 + 1) + 8 * i);
          objc_msgSend(v16, "objectForKeyedSubscript:", v24);
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v26 = v25 == 0;

          if (v26)
            -[NSObject addObject:](v19, "addObject:", v24);
        }
        v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v52, v60, 16);
      }
      while (v21);
    }

    if (-[NSObject count](v19, "count"))
    {
      objc_msgSend(MEMORY[0x1E0C99DE8], "array");
      v27 = objc_claimAutoreleasedReturnValue();
      v51 = 0;
      v48 = 0;
      v49 = 0;
      v50 = 0;
      +[_LSDServiceDomain defaultServiceDomain]();
      v28 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
      v29 = LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)&v48, v28, 0);

      if (v29)
      {
        v46 = 0u;
        v47 = 0u;
        v44 = 0u;
        v45 = 0u;
        v31 = v19;
        v32 = -[NSObject countByEnumeratingWithState:objects:count:](v31, "countByEnumeratingWithState:objects:count:", &v44, v59, 16);
        if (v32)
        {
          v33 = *(_QWORD *)v45;
          do
          {
            for (j = 0; j != v32; ++j)
            {
              if (*(_QWORD *)v45 != v33)
                objc_enumerationMutation(v31);
              +[LSApplicationProxy applicationProxyForIdentifier:withContext:](LSApplicationProxy, "applicationProxyForIdentifier:withContext:", *(_QWORD *)(*((_QWORD *)&v44 + 1) + 8 * j), v29);
              v35 = (void *)objc_claimAutoreleasedReturnValue();
              if (v35)
                -[NSObject addObject:](v27, "addObject:", v35);

            }
            v32 = -[NSObject countByEnumeratingWithState:objects:count:](v31, "countByEnumeratingWithState:objects:count:", &v44, v59, 16);
          }
          while (v32);
        }

      }
      LaunchServices::DMFSupport::getLog(v30);
      v36 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
        LaunchServices::DMFSupport::addKnownPoliciesToCache();

      objc_msgSend(v40, "postNotificationName:object:", CFSTR("com.apple.launchservices.private._LSDMFPolicyDidChangeNotification"), v27);
      if (v48 && v50)
        _LSContextDestroy(v48);
      v37 = v49;
      v48 = 0;
      v49 = 0;

      v50 = 0;
      v38 = v51;
      v51 = 0;

    }
    else
    {
      LaunchServices::DMFSupport::getLog(0);
      v27 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
        LaunchServices::DMFSupport::addKnownPoliciesToCache();
    }

  }
  else
  {
    LaunchServices::DMFSupport::getLog(0);
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      LaunchServices::DMFSupport::addKnownPoliciesToCache();
  }

}

void sub_1828DF144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,void *a30)
{
  void *v30;

  _Unwind_Resume(a1);
}

id LaunchServices::DMFSupport::getNotificationCenter(LaunchServices::DMFSupport *this)
{
  int v1;
  void *v2;
  BOOL v3;
  id v4;
  id v5;
  void *v6;
  id v7;

  v1 = (int)this;
  os_unfair_lock_lock(&LaunchServices::DMFSupport::getNotificationCenter(BOOL)::lock);
  v2 = (void *)LaunchServices::DMFSupport::getNotificationCenter(BOOL)::center;
  if (LaunchServices::DMFSupport::getNotificationCenter(BOOL)::center)
    v3 = 1;
  else
    v3 = v1 == 0;
  if (!v3)
  {
    v4 = LaunchServices::DMFSupport::getMonitor((LaunchServices::DMFSupport *)1);
    v5 = objc_alloc_init(MEMORY[0x1E0CB37D0]);
    v6 = (void *)LaunchServices::DMFSupport::getNotificationCenter(BOOL)::center;
    LaunchServices::DMFSupport::getNotificationCenter(BOOL)::center = (uint64_t)v5;

    v2 = (void *)LaunchServices::DMFSupport::getNotificationCenter(BOOL)::center;
  }
  v7 = v2;
  os_unfair_lock_unlock(&LaunchServices::DMFSupport::getNotificationCenter(BOOL)::lock);
  return v7;
}

void LaunchServices::DMFSupport::reloadAllPolicies(void *a1)
{
  id v1;
  void *v2;
  _LSDServiceDomain *v3;
  void **v4;
  LaunchServices::DMFSupport *v5;
  int StringForCFString;
  NSObject *v7;
  void *v8;
  id v9;
  id v10;
  LaunchServices::DMFSupport *v11;
  NSObject *v12;
  uint64_t v13;
  _LSDServiceDomain *v14;
  uint64_t v15;
  id v16;
  void **v17;
  id v18;
  char v19;
  id v20;
  __int128 buf;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  void *v23;
  NSObject *v24;
  void **v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(MEMORY[0x1E0C99E20], "set");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  +[_LSDServiceDomain defaultServiceDomain]();
  v3 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
  v4 = (void **)LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)&v17, v3, 0);

  if (v4)
  {
    StringForCFString = _LSDatabaseGetStringForCFString(*v4, CFSTR("Hidden"), 0);
    *(_QWORD *)&buf = MEMORY[0x1E0C809B0];
    *((_QWORD *)&buf + 1) = 3221225472;
    v22 = ___ZN14LaunchServices10DMFSupportL15getAllBundleIDsEv_block_invoke;
    v23 = &unk_1E10434A8;
    v26 = StringForCFString;
    v25 = v4;
    v24 = v2;
    _LSEnumerateViableBundlesOfClass(v4, 2, &buf);
    v7 = v24;
  }
  else
  {
    LaunchServices::DMFSupport::getLog(v5);
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      +[_LSDServiceDomain defaultServiceDomain]();
      v14 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
      v15 = LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)&v17, v14, 0);

      if (v15)
        v16 = 0;
      else
        v16 = v20;
      LODWORD(buf) = 138543362;
      *(_QWORD *)((char *)&buf + 4) = v16;
      _os_log_error_impl(&dword_182882000, v7, OS_LOG_TYPE_ERROR, "Failed to get database context: %{public}@", (uint8_t *)&buf, 0xCu);

    }
  }

  objc_msgSend(v2, "allObjects");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v17 && v19)
    _LSContextDestroy(v17);
  v9 = v18;
  v17 = 0;
  v18 = 0;

  v19 = 0;
  v10 = v20;
  v20 = 0;

  LaunchServices::DMFSupport::getLog(v11);
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    v13 = objc_msgSend(v8, "count");
    LODWORD(buf) = 134283521;
    *(_QWORD *)((char *)&buf + 4) = v13;
    _os_log_impl(&dword_182882000, v12, OS_LOG_TYPE_INFO, "reloading all DMF policies for %{private}zu identifiers", (uint8_t *)&buf, 0xCu);
  }

  objc_msgSend(v1, "requestPoliciesForBundleIdentifiers:completionHandler:", v8, &__block_literal_global_18);
}

void sub_1828DF5A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a9);
  _Unwind_Resume(a1);
}

id LaunchServices::DMFSupport::getLog(LaunchServices::DMFSupport *this)
{
  if (LaunchServices::DMFSupport::getLog(void)::once != -1)
    dispatch_once(&LaunchServices::DMFSupport::getLog(void)::once, &__block_literal_global_9);
  return (id)LaunchServices::DMFSupport::getLog(void)::result;
}

void sub_1828DF84C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  void *v10;
  void *v11;
  va_list va;

  va_start(va, a9);

  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)va);
  _Unwind_Resume(a1);
}

uint64_t _LSEnumerateViableBundlesOfClass(void *a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  uint64_t v6;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  v4 = a3;
  v5 = v4;
  if (a1)
  {
    if (v4)
      goto LABEL_3;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "OSStatus _LSEnumerateViableBundlesOfClass(LSContext *, LSBundleClass, void (^__strong)(LSBundleID, const LSBundleData *, Boolean *))");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "handleFailureInFunction:file:lineNumber:description:", v9, CFSTR("LSBundle.mm"), 2594, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("inContext != NULL"));

    if (v5)
      goto LABEL_3;
  }
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "OSStatus _LSEnumerateViableBundlesOfClass(LSContext *, LSBundleClass, void (^__strong)(LSBundleID, const LSBundleData *, Boolean *))");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", v11, CFSTR("LSBundle.mm"), 2595, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("inSearchBlock != nil"));

LABEL_3:
  v6 = _LSCheckAllContainerStates(a1);
  if (!(_DWORD)v6)
  {
    v12 = v5;
    _CSStoreEnumerateUnits();

  }
  return v6;
}

void sub_1828DFA64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t _LSCheckAllContainerStates(void *a1)
{
  char v2;
  id v3;
  void *v4;
  uint64_t v5;
  id v7[7];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v11 = 0;
  v7[1] = (id)MEMORY[0x1E0C809B0];
  v7[2] = (id)3221225472;
  v7[3] = ___LSCheckAllContainerStates_block_invoke;
  v7[4] = &unk_1E10424C8;
  v7[5] = &v8;
  v7[6] = a1;
  _CSStoreEnumerateUnits();
  if (*((_BYTE *)v9 + 24))
  {
    v7[0] = 0;
    v2 = _LSContextUpdate((void **)a1, 1, v7);
    v3 = v7[0];
    v4 = v3;
    if ((v2 & 1) != 0)
      v5 = 0;
    else
      v5 = _LSGetOSStatusFromNSError(v3);

  }
  else
  {
    v5 = 0;
  }
  _Block_object_dispose(&v8, 8);
  return v5;
}

void sub_1828DFBA8(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  _Block_object_dispose((const void *)(v2 - 48), 8);
  _Unwind_Resume(a1);
}

void ___ZN14LaunchServices19URLPropertyProviderL13prepareValuesEPK7__CFURLP11__FileCachePKPK10__CFStringPPKvlSC_PP9__CFError_block_invoke_2(_QWORD *a1, void *a2, void *a3, void *a4)
{
  unint64_t v7;
  id v8;
  uint64_t v9;
  void *v10;
  BOOL v11;
  unint64_t v12;
  _QWORD v13[5];
  _QWORD v14[5];
  BOOL v15;

  v12 = a2;
  v7 = a3;
  v8 = a4;
  if (v12 | v7)
  {
    v9 = MEMORY[0x1E0C809B0];
    if (v12)
    {
      objc_msgSend((id)v12, "objectForKeyedSubscript:", *MEMORY[0x1E0C9AC10]);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = v10 != 0;

      v14[0] = v9;
      v14[1] = 3221225472;
      v14[2] = ___ZN14LaunchServices19URLPropertyProviderL13prepareValuesEPK7__CFURLP11__FileCachePKPK10__CFStringPPKvlSC_PP9__CFError_block_invoke_3;
      v14[3] = &__block_descriptor_41_e25_v32__0__NSString_8_16_B24l;
      v15 = v11;
      v14[4] = a1[6];
      objc_msgSend((id)v12, "enumerateKeysAndObjectsUsingBlock:", v14);
    }
    v13[0] = v9;
    v13[1] = 3221225472;
    v13[2] = ___ZN14LaunchServices19URLPropertyProviderL13prepareValuesEPK7__CFURLP11__FileCachePKPK10__CFStringPPKvlSC_PP9__CFError_block_invoke_4;
    v13[3] = &__block_descriptor_40_e22_v24__0__NSString_8_B16l;
    v13[4] = a1[6];
    objc_msgSend((id)v7, "enumerateObjectsUsingBlock:", v13, v12);
    *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = 1;
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = 0;
    objc_storeStrong((id *)(*(_QWORD *)(a1[5] + 8) + 40), a4);
  }

}

void sub_1828DFD0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  void *v9;
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1828E0208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  void *v24;

  _Unwind_Resume(a1);
}

uint64_t _LSBundleCompareForActivityContinuationSuitability(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  int MayBeOnNetwork;
  __int128 v7;
  uint64_t v8;
  int StringForCFString;
  int RegTime;
  int v11;
  void *v13;
  void *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  if (!a2 || !a3)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSComparisonResult _LSBundleCompareForActivityContinuationSuitability(__strong LSDatabaseRef, const LSBundleData *, const LSBundleData *)");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "handleFailureInFunction:file:lineNumber:description:", v14, CFSTR("LSBundleUserActivitySupport.mm"), 245, CFSTR("unexpected NULL bundle data"));

  }
  MayBeOnNetwork = _LSBundleDataMayBeOnNetwork(v5, a2);
  if ((MayBeOnNetwork != 0) == (_LSBundleDataMayBeOnNetwork(v5, a3) == 0))
  {
    if (MayBeOnNetwork)
      v8 = 1;
    else
      v8 = -1;
    goto LABEL_20;
  }
  if (*(_DWORD *)(a2 + 300) == *(_DWORD *)(a3 + 300))
  {
    v17 = *(_OWORD *)(a2 + 28);
    v18 = *(_OWORD *)(a2 + 44);
    v15 = *(_OWORD *)(a3 + 28);
    v16 = *(_OWORD *)(a3 + 44);
    v21 = v17;
    v22 = v18;
    v7 = *(_OWORD *)(a3 + 44);
    v19 = *(_OWORD *)(a3 + 28);
    v20 = v7;
    if (_LSVersionNumberCompare(&v21, &v19) != 1)
    {
      v21 = v17;
      v22 = v18;
      v19 = v15;
      v20 = v16;
      if (_LSVersionNumberCompare(&v21, &v19) == -1)
        goto LABEL_16;
      goto LABEL_15;
    }
LABEL_13:
    v8 = -1;
    goto LABEL_20;
  }
  StringForCFString = _LSDatabaseGetStringForCFString(v5, CFSTR("com.apple.mobilephone"), 1);
  if (StringForCFString)
  {
    if (*(_DWORD *)(a2 + 300) != StringForCFString)
    {
      if (*(_DWORD *)(a3 + 300) == StringForCFString)
      {
LABEL_16:
        v8 = 1;
        goto LABEL_20;
      }
      goto LABEL_15;
    }
    goto LABEL_13;
  }
LABEL_15:
  RegTime = _LSBundleDataGetRegTime(a2);
  v11 = _LSBundleDataGetRegTime(a3);
  if (RegTime < v11)
    goto LABEL_16;
  if (RegTime <= v11)
    v8 = 0;
  else
    v8 = -1;
LABEL_20:

  return v8;
}

void sub_1828E0E24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t _LSBundleDataMayBeOnNetwork(void *a1, uint64_t a2)
{
  id v3;
  _WORD *v4;

  v3 = a1;
  if (a2)
    a2 = *(_DWORD *)(a2 + 4) && (v4 = (_WORD *)_LSContainerGet()) != 0 && (*v4 & 1) == 0;

  return a2;
}

void sub_1828E0EC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

FSEventStreamRef FSEventStreamCreate(CFAllocatorRef allocator, FSEventStreamCallback callback, FSEventStreamContext *context, CFArrayRef pathsToWatch, FSEventStreamEventId sinceWhen, CFTimeInterval latency, FSEventStreamCreateFlags flags)
{
  return (FSEventStreamRef)_FSEventStreamCreate("FSEventStreamCreate", allocator, (uint64_t)callback, (__int128 *)&context->version, 0, pathsToWatch, sinceWhen, (unint64_t)(latency * 1000000.0), flags);
}

char *_FSEventStreamCreate(const char *a1, const __CFAllocator *Default, uint64_t a3, __int128 *a4, int a5, CFArrayRef theArray, uint64_t a7, uint64_t a8, int a9)
{
  NSObject *v9;
  CFIndex Count;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  void (*v20)(_QWORD);
  void *v21;
  CFIndex i;
  const __CFString *ValueAtIndex;
  CFTypeID TypeID;
  int v25;
  int v26;
  int v27;
  statfs *v28;
  statfs *v29;
  unsigned int v30;
  char *v31;
  uint64_t v32;
  statfs *v33;
  size_t v34;
  char *v35;
  uint64_t v38;
  CFIndex v39;
  int v40;
  _DWORD *v41;
  int v42;
  int v43;
  NSObject *v44;
  int v45;
  const char *f_mntonname;
  size_t v47;
  char *v48;
  NSObject *v49;
  NSObject *v50;
  int v51;
  void *v52;
  void *v53;
  NSObject *v54;
  NSObject *v55;
  NSObject *v56;
  NSObject *v57;
  NSObject *v58;
  NSObject *v59;
  int v60;
  NSObject *v61;
  char *v63;
  char __s[4];
  const char *v68;
  __int16 v69;
  const char *v70;
  __int16 v71;
  char *v72;
  __int16 v73;
  _BYTE v74[14];
  __int16 v75;
  int v76;
  __int16 v77;
  char *v78;
  char __s1[782];
  char buffer[8];
  _QWORD v81[129];

  v81[127] = *MEMORY[0x1E0C80C00];
  if ((a9 & 0x41) == 0x40)
  {
    v9 = fsevent_default_log();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      _FSEventStreamCreate_cold_1();
    return 0;
  }
  Count = CFArrayGetCount(theArray);
  if ((const __CFAllocator *)*MEMORY[0x1E0C9AE00] == Default)
    Default = CFAllocatorGetDefault();
  v16 = (char *)CFAllocatorAllocate(Default, 456, 0);
  if (!v16)
  {
    v49 = fsevent_default_log();
    if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
      _FSEventStreamCreate_cold_2((uint64_t)a1, v49);
    return 0;
  }
  v17 = v16;
  *((_QWORD *)v16 + 56) = 0;
  *((_OWORD *)v16 + 26) = 0u;
  *((_OWORD *)v16 + 27) = 0u;
  *((_OWORD *)v16 + 24) = 0u;
  *((_OWORD *)v16 + 25) = 0u;
  *((_OWORD *)v16 + 22) = 0u;
  *((_OWORD *)v16 + 23) = 0u;
  *((_OWORD *)v16 + 20) = 0u;
  *((_OWORD *)v16 + 21) = 0u;
  *((_OWORD *)v16 + 18) = 0u;
  *((_OWORD *)v16 + 19) = 0u;
  *((_OWORD *)v16 + 16) = 0u;
  *((_OWORD *)v16 + 17) = 0u;
  *((_OWORD *)v16 + 14) = 0u;
  *((_OWORD *)v16 + 15) = 0u;
  *((_OWORD *)v16 + 12) = 0u;
  *((_OWORD *)v16 + 13) = 0u;
  *((_OWORD *)v16 + 10) = 0u;
  *((_OWORD *)v16 + 11) = 0u;
  *((_OWORD *)v16 + 8) = 0u;
  *((_OWORD *)v16 + 9) = 0u;
  *((_OWORD *)v16 + 6) = 0u;
  *((_OWORD *)v16 + 7) = 0u;
  *((_OWORD *)v16 + 4) = 0u;
  *((_OWORD *)v16 + 5) = 0u;
  *((_OWORD *)v16 + 2) = 0u;
  *((_OWORD *)v16 + 3) = 0u;
  *(_OWORD *)v16 = 0u;
  *((_OWORD *)v16 + 1) = 0u;
  *((_QWORD *)v16 + 1) = Default;
  CFRetain(Default);
  *((_QWORD *)v17 + 2) = a3;
  if (a4)
  {
    v18 = *a4;
    v19 = a4[1];
    *((_QWORD *)v17 + 7) = *((_QWORD *)a4 + 4);
    *(_OWORD *)(v17 + 40) = v19;
    *(_OWORD *)(v17 + 24) = v18;
  }
  v20 = (void (*)(_QWORD))*((_QWORD *)v17 + 5);
  if (v20)
    v20(*((_QWORD *)v17 + 4));
  *((_DWORD *)v17 + 16) = a5;
  *((_QWORD *)v17 + 9) = Count;
  *((_QWORD *)v17 + 10) = CFAllocatorAllocate(Default, 8 * Count, 0);
  *((_QWORD *)v17 + 11) = CFAllocatorAllocate(Default, 4 * Count, 0);
  v21 = (void *)*((_QWORD *)v17 + 10);
  if (!v21)
  {
    v50 = fsevent_default_log();
    if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
      _FSEventStreamCreate_cold_3((uint64_t)a1);
    goto LABEL_89;
  }
  bzero(v21, 8 * Count);
  bzero(*((void **)v17 + 11), 4 * Count);
  if ((a9 & 4) == 0)
  {
    *((_DWORD *)v17 + 102) = -1;
    goto LABEL_14;
  }
  v51 = kqueue();
  *((_DWORD *)v17 + 102) = v51;
  if (v51 < 0)
  {
    v54 = fsevent_default_log();
    if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
      _FSEventStreamCreate_cold_7();
    goto LABEL_89;
  }
  v52 = CFAllocatorAllocate(Default, 32 * Count, 0);
  *((_QWORD *)v17 + 49) = v52;
  if (!v52)
  {
    v55 = fsevent_default_log();
    if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
      _FSEventStreamCreate_cold_8((uint64_t)a1);
    goto LABEL_89;
  }
  bzero(v52, 32 * Count);
  v53 = CFAllocatorAllocate(Default, 32 * Count, 0);
  *((_QWORD *)v17 + 50) = v53;
  if (!v53)
  {
    v59 = fsevent_default_log();
    if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
      _FSEventStreamCreate_cold_9((uint64_t)a1);
LABEL_89:
    _FSEventStreamDeallocate(v17);
    return 0;
  }
  bzero(v53, 32 * Count);
LABEL_14:
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
    {
      ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, i);
      TypeID = CFStringGetTypeID();
      if (TypeID != CFGetTypeID(ValueAtIndex))
      {
        v56 = fsevent_default_log();
        if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
          _FSEventStreamCreate_cold_6(i, (uint64_t)a1);
        goto LABEL_89;
      }
      if (!CFStringGetFileSystemRepresentation(ValueAtIndex, buffer, 1024))
      {
        v57 = fsevent_default_log();
        if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
          _FSEventStreamCreate_cold_4();
        goto LABEL_89;
      }
      if (a5)
      {
        v25 = 1000;
        while (1)
        {
          v26 = getfsstat(0, 0, 2);
          if (v26 < 0)
            goto LABEL_33;
          v27 = 2168 * (v26 + 1);
          v28 = (statfs *)malloc_type_malloc(2168 * (v26 + 1), 0xD7006919uLL);
          if (!v28)
            goto LABEL_33;
          v29 = v28;
          v30 = getfsstat(v28, v27, 2);
          if ((v30 & 0x80000000) == 0)
            break;
          free(v29);
          if (!--v25)
            goto LABEL_33;
        }
        if (!v30)
        {
LABEL_33:
          v31 = buffer;
          __strlcpy_chk();
LABEL_34:
          *(_DWORD *)(*((_QWORD *)v17 + 11) + 4 * i) |= 2u;
          goto LABEL_35;
        }
        v32 = 0;
        while (1)
        {
          v33 = &v29[v32];
          if (v29[v32].f_fsid.val[0] == a5)
            break;
          if (v30 == ++v32)
          {
            v31 = buffer;
            __strlcpy_chk();
LABEL_64:
            free(v29);
            goto LABEL_34;
          }
        }
        f_mntonname = v33->f_mntonname;
        snprintf(__s, 0x400uLL, "%s/%s", v33->f_mntonname, buffer);
        if (realpath_DARWIN_EXTSN(__s, __s1))
        {
          v47 = strlen(f_mntonname);
          if (__s1[v47] == 47)
            v31 = &__s1[v47 + 1];
          else
            v31 = &__s1[v47];
          goto LABEL_64;
        }
        free(v29);
      }
      else
      {
        v31 = __s1;
        if (fsevent_realpath(buffer, __s1))
          goto LABEL_35;
      }
      if (buffer[0] == 47)
      {
        v31 = buffer;
        __strlcpy_chk();
      }
      else
      {
        v31 = __s1;
        getcwd(__s1, 0x400uLL);
        __strlcat_chk();
        __strlcat_chk();
      }
LABEL_35:
      v34 = (int)(strlen(v31) + 1);
      *(_QWORD *)(*((_QWORD *)v17 + 10) + 8 * i) = CFAllocatorAllocate(Default, v34, 0);
      v35 = *(char **)(*((_QWORD *)v17 + 10) + 8 * i);
      if (!v35)
      {
        v58 = fsevent_default_log();
        if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
          _FSEventStreamCreate_cold_5((uint64_t)a1);
        goto LABEL_89;
      }
      strlcpy(v35, v31, v34);
      if (*(_QWORD *)buffer == 0x2F6D65747379532FLL
        && v81[0] == 0x2F73656D756C6F56
        && *(_QWORD *)((char *)v81 + 5) == 0x2F617461442F7365)
      {
        *(_DWORD *)(*((_QWORD *)v17 + 11) + 4 * i) |= 1u;
        if ((a9 & 4) == 0)
          continue;
      }
      else if ((a9 & 4) == 0)
      {
        continue;
      }
      v38 = *((_QWORD *)v17 + 49);
      v39 = v38 + 32 * i;
      *(_DWORD *)(v39 + 4) = -1;
      if (!*((_DWORD *)v17 + 16) || __s1[0] == 47)
      {
        *(_QWORD *)(v39 + 24) = strdup(__s1);
      }
      else
      {
        if (!realpath_DARWIN_EXTSN(*(const char **)(*((_QWORD *)v17 + 10) + 8 * i), __s))
        {
          getcwd(__s, 0x400uLL);
          v40 = strlen(__s);
          __s[v40] = 47;
          strlcpy(&__s[v40 + 1], *(const char **)(*((_QWORD *)v17 + 10) + 8 * i), 1024 - (v40 + 1));
        }
        *(_QWORD *)(*((_QWORD *)v17 + 49) + 32 * i + 24) = strdup(__s);
        v38 = *((_QWORD *)v17 + 49);
      }
      v41 = (_DWORD *)(v38 + 32 * i);
      *v41 = 8;
      v42 = watch_path(a1, *((_DWORD *)v17 + 102), __s1, *((_QWORD *)v17 + 50) + 32 * i, (uint64_t)v41, i);
      if (v42)
      {
        v43 = v42;
        v44 = fsevent_default_log();
        if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
        {
          v48 = strerror(v43);
          *(_DWORD *)__s = 136316674;
          v68 = a1;
          v69 = 2080;
          v70 = "_FSEventStreamCreate";
          v71 = 2080;
          v72 = v31;
          v73 = 2080;
          *(_QWORD *)v74 = __s1;
          *(_WORD *)&v74[8] = 1024;
          *(_DWORD *)&v74[10] = i;
          v75 = 1024;
          v76 = v43;
          v77 = 2080;
          v78 = v48;
          _os_log_error_impl(&dword_182882000, v44, OS_LOG_TYPE_ERROR, "%s: %s: ERROR: watch_path() failed for srcPath='%s' resolvedPath='%s' index=%d (%d):(%s)", (uint8_t *)__s, 0x40u);
        }
        if ((v43 - 23) < 2)
          goto LABEL_89;
      }
      v45 = watch_all_parents((uint64_t)a1, *((_DWORD *)v17 + 102), __s1, *((_QWORD *)v17 + 49) + 32 * i, i);
      if (v45)
      {
        v60 = v45;
        v61 = fsevent_default_log();
        if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
        {
          v63 = strerror(v60);
          *(_DWORD *)__s = 136316162;
          v68 = a1;
          v69 = 2080;
          v70 = "_FSEventStreamCreate";
          v71 = 2080;
          v72 = v31;
          v73 = 1024;
          *(_DWORD *)v74 = v60;
          *(_WORD *)&v74[4] = 2080;
          *(_QWORD *)&v74[6] = v63;
          _os_log_error_impl(&dword_182882000, v61, OS_LOG_TYPE_ERROR, "%s: %s: ERROR: watch_all_parents() failed for '%s' (%d):(%s)", (uint8_t *)__s, 0x30u);
        }
        goto LABEL_89;
      }
    }
  }
  *((_QWORD *)v17 + 21) = a7;
  *((_QWORD *)v17 + 22) = a8;
  *((_DWORD *)v17 + 46) = a9;
  v17[188] = 0;
  v17[190] = a7 != -1;
  *((_QWORD *)v17 + 27) = 0;
  *((_QWORD *)v17 + 45) = 0;
  *((_QWORD *)v17 + 54) = 0;
  *((_QWORD *)v17 + 24) = 0;
  *((_QWORD *)v17 + 25) = 0;
  *(_DWORD *)v17 = 1;
  return v17;
}

Boolean FSEventStreamSetExclusionPaths(FSEventStreamRef streamRef, CFArrayRef pathsToExclude)
{
  Boolean result;
  CFIndex Count;
  CFIndex v6;
  const __CFString *ValueAtIndex;
  CFTypeID TypeID;
  char __s1[1024];
  char buffer[1024];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)streamRef + 188))
    return 0;
  Count = CFArrayGetCount(pathsToExclude);
  *((_QWORD *)streamRef + 12) = Count;
  if (Count && Count <= 8)
  {
    if (Count >= 1)
    {
      v6 = 0;
      while (1)
      {
        ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(pathsToExclude, v6);
        TypeID = CFStringGetTypeID();
        if (TypeID != CFGetTypeID(ValueAtIndex) || !CFStringGetFileSystemRepresentation(ValueAtIndex, buffer, 1024))
          break;
        if (*((_DWORD *)streamRef + 16) || !fsevent_realpath(buffer, __s1))
          __strlcpy_chk();
        *((_QWORD *)streamRef + v6++ + 13) = strdup(__s1);
        if (*((_QWORD *)streamRef + 12) <= v6)
          return 1;
      }
      return 0;
    }
    return 1;
  }
  else
  {
    result = 0;
    *((_QWORD *)streamRef + 12) = 0;
  }
  return result;
}

char *fsevent_realpath(const char *a1, char *a2)
{
  __int128 v4;
  int v5;
  int v6;
  _OWORD v7[66];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v4 = xmmword_1829FA5F4;
  memset(v7, 0, 512);
  v5 = 0;
  v6 = 32;
  DWORD1(v4) = 0x80000000;
  if (getattrlist(a1, &v4, v7, 0x420uLL, 0x20u) == -1)
    return 0;
  if (!a2)
    return (char *)&v7[1] + SDWORD2(v7[1]) + 8;
  strlcpy(a2, (const char *)&v7[1] + SDWORD2(v7[1]) + 8, 0x400uLL);
  return a2;
}

uint64_t LaunchServices::URLPropertyProvider::prepareIsPackageMimic(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return _LSPrepareMimicForIsPackage(a1, a5);
}

void sub_1828E1B28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

CFDictionaryRef UTTypeCopyDeclaration(CFStringRef inUTI)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  const __CFDictionary *v6;

  if (!inUTI || !_UTTypeIdentifierIsDeclarable(inUTI))
    return 0;
  v2 = (void *)MEMORY[0x186DAE7A0]();
  +[UTTypeRecord typeRecordWithIdentifier:](UTTypeRecord, "typeRecordWithIdentifier:", inUTI);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3)
  {
    objc_msgSend(v3, "declaration");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "_expensiveDictionaryRepresentation");
    v6 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v6 = 0;
  }

  objc_autoreleasePoolPop(v2);
  return v6;
}

void sub_1828E1BCC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1828E1C50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828E1E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  void *v12;
  uint64_t v13;
  va_list va;

  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 160), 8);

  _Block_object_dispose((const void *)(v13 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1828E20FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30)
{
  void *v30;

  _Block_object_dispose(&a25, 8);
  _Unwind_Resume(a1);
}

void sub_1828E2378(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1828E252C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1828E2618(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1828E26FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t MDTCopierGetTypeID()
{
  while (!__ldxr((unsigned int *)&__gMDTCopierTypeInitialized))
  {
    if (!__stxr(1u, (unsigned int *)&__gMDTCopierTypeInitialized))
    {
      __gMDTCopierTypeID = _CFRuntimeRegisterClass();
      pthread_mutex_init(&__gMDTCopierLock, 0);
      __gMDTCopierPorts = (uint64_t)CFDictionaryCreateMutable(0, 0, 0, MEMORY[0x1E0C9B3A0]);
      return __gMDTCopierTypeID;
    }
  }
  __clrex();
  return __gMDTCopierTypeID;
}

uint64_t _status(unsigned int a1, uint64_t a2, const UInt8 *a3, unsigned int a4)
{
  const void *Value;
  const __CFData *v8;
  const __CFData *v9;
  const __CFData *v10;
  const __CFDictionary *v11;
  uint64_t v12;

  pthread_mutex_lock(&__gMDTCopierLock);
  Value = CFDictionaryGetValue((CFDictionaryRef)__gMDTCopierPorts, (const void *)a1);
  pthread_mutex_unlock(&__gMDTCopierLock);
  if (Value)
  {
    if (a4)
    {
      v8 = CFDataCreateWithBytesNoCopy(0, a3, a4, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
      if (v8 && (v9 = v8, v10 = __MDTUnserializePropertyList(v8), CFRelease(v9), v10))
      {
        *((_QWORD *)Value + 11) = __MDTCreateURLFromPropertyList(v10);
        v11 = __MDTCreateErrorFromPropertyList(v10);
      }
      else
      {
        v11 = CFErrorCreate(0, (CFErrorDomain)*MEMORY[0x1E0C9AFD0], 5, 0);
        v10 = 0;
      }
      *((_QWORD *)Value + 12) = v11;
    }
    else
    {
      v10 = 0;
      v11 = (const __CFDictionary *)*((_QWORD *)Value + 12);
    }
    if (v11)
      v12 = 3;
    else
      v12 = 1;
    (*((void (**)(const void *, uint64_t, _QWORD))Value + 2))(Value, v12, *((_QWORD *)Value + 11));
    if (v10)
      CFRelease(v10);
  }
  return 0;
}

CFMachPortRef *MDTCreateCopierWithSandboxExtensionAndReturnError(const __CFAllocator *a1, const __CFURL *a2, const __CFURL *a3, const __CFString *a4, const __CFString *a5, __CFMachPort *a6, __CFMachPort *a7, __CFMachPort *a8, CFErrorRef *a9)
{
  CFMachPortRef *Instance;
  CFMachPortRef *v18;
  ipc_space_t *v19;
  kern_return_t v20;
  kern_return_t v21;
  kern_return_t v22;
  kern_return_t inserted;
  __CFMachPort *v24;
  int v25;
  mach_port_t Port;
  int v27;
  CFURLRef v28;
  CFURLRef v29;
  CFStringRef v30;
  CFStringRef Copy;
  kern_return_t v32;
  __CFDictionary *v33;
  mach_port_t v34;
  const __CFString *v36;
  const __CFString *v37;
  CFIndex v38;
  int v39;
  CFErrorRef v40;
  CFIndex v41;
  const __CFString *v42;
  const __CFString *v43;
  int v44;
  CFMachPortRef v45;
  CFMachPortRef v46;
  CFMachPortRef v47;
  CFMachPortRef v48;
  CFMachPortRef v49;
  CFMachPortContext v50;
  int v51;
  mach_port_t special_port[2];
  mach_port_t sp[2];

  *(_QWORD *)special_port = 0;
  *(_QWORD *)sp = 0;
  v51 = 0;
  if (!a2)
  {
    v36 = (const __CFString *)*MEMORY[0x1E0C9AFD0];
    v37 = CFSTR("NULL source URL");
    v38 = 22;
    v39 = 341;
LABEL_27:
    v40 = MDTCreateError(v36, v38, v39, (uint64_t)v37);
    goto LABEL_53;
  }
  if (!a3)
  {
    v36 = (const __CFString *)*MEMORY[0x1E0C9AFD0];
    v37 = CFSTR("NULL destination URL");
    v38 = 22;
    v39 = 342;
    goto LABEL_27;
  }
  if (!a7)
  {
    v36 = (const __CFString *)*MEMORY[0x1E0C9AFD0];
    v37 = CFSTR("NULL callback");
    v38 = 22;
    v39 = 343;
    goto LABEL_27;
  }
  MDTCopierGetTypeID();
  Instance = (CFMachPortRef *)_CFRuntimeCreateInstance();
  if (!Instance)
  {
    v36 = (const __CFString *)*MEMORY[0x1E0C9AFD0];
    v37 = CFSTR("Could not create CF instance");
    v38 = 12;
    v39 = 348;
    goto LABEL_27;
  }
  v18 = Instance;
  *((_OWORD *)Instance + 5) = 0u;
  *((_OWORD *)Instance + 6) = 0u;
  *((_OWORD *)Instance + 3) = 0u;
  *((_OWORD *)Instance + 4) = 0u;
  *((_OWORD *)Instance + 1) = 0u;
  *((_OWORD *)Instance + 2) = 0u;
  v19 = (ipc_space_t *)MEMORY[0x1E0C83DA0];
  v20 = task_get_special_port(*MEMORY[0x1E0C83DA0], 4, &special_port[1]);
  if (v20)
  {
    v41 = v20;
    v42 = CFSTR("Could not get bootstrap port");
    v43 = (const __CFString *)*MEMORY[0x1E0C9AFC0];
    v44 = 354;
  }
  else if (special_port[1])
  {
    v21 = bootstrap_look_up(special_port[1], "com.apple.mdt", &sp[1]);
    if (v21)
    {
      v41 = v21;
      v42 = CFSTR("Could not look up MDT service");
      v43 = (const __CFString *)*MEMORY[0x1E0C9AFC0];
      v44 = 360;
    }
    else if (sp[1])
    {
      v50.version = 0;
      memset(&v50.retain, 0, 24);
      v50.info = v18;
      v22 = mach_port_allocate(*v19, 1u, sp);
      if (v22)
      {
        v41 = v22;
        v42 = CFSTR("Could not allocate port receive right");
        v43 = (const __CFString *)*MEMORY[0x1E0C9AFC0];
        v44 = 374;
      }
      else
      {
        inserted = mach_port_insert_right(*v19, sp[0], sp[0], 0x14u);
        if (inserted)
        {
          v41 = inserted;
          v42 = CFSTR("Could not insert send right");
          v43 = (const __CFString *)*MEMORY[0x1E0C9AFC0];
          v44 = 377;
        }
        else
        {
          v24 = CFMachPortCreateWithPort(a1, sp[0], (CFMachPortCallBack)__MDTCopierMachCallback, &v50, 0);
          v18[6] = v24;
          if (v24)
          {
            v25 = sp[1];
            Port = CFMachPortGetPort(v24);
            v27 = MDT_create_session(v25, Port, (_DWORD *)v18 + 10, &v51);
            if (v27)
            {
              v41 = v27;
              v42 = CFSTR("Could not create MDT session");
              v43 = (const __CFString *)*MEMORY[0x1E0C9AFC0];
              v44 = 389;
            }
            else
            {
              v28 = CFURLCopyAbsoluteURL(a2);
              v18[7] = v28;
              if (v28)
              {
                v29 = CFURLCopyAbsoluteURL(a3);
                v18[8] = v29;
                if (v29)
                {
                  if (a4 && (v30 = CFStringCreateCopy(0, a4), (v18[9] = (CFMachPortRef)v30) == 0))
                  {
                    v43 = (const __CFString *)*MEMORY[0x1E0C9AFD0];
                    v42 = CFSTR("Could not copy unique ID");
                    v41 = 12;
                    v44 = 403;
                  }
                  else if (a5 && (Copy = CFStringCreateCopy(0, a5), (v18[10] = (CFMachPortRef)Copy) == 0))
                  {
                    v43 = (const __CFString *)*MEMORY[0x1E0C9AFD0];
                    v42 = CFSTR("Could not copy sandbox extension");
                    v41 = 12;
                    v44 = 410;
                  }
                  else
                  {
                    v32 = mach_port_request_notification(*v19, sp[0], 70, 1u, sp[0], 0x15u, special_port);
                    if (v32)
                    {
                      v41 = v32;
                      v42 = CFSTR("Could not request port notification");
                      v43 = (const __CFString *)*MEMORY[0x1E0C9AFC0];
                      v44 = 418;
                    }
                    else
                    {
                      if (!special_port[0])
                      {
                        v18[2] = a7;
                        v18[3] = a8;
                        v18[13] = a6;
                        pthread_mutex_lock(&__gMDTCopierLock);
                        v33 = (__CFDictionary *)__gMDTCopierPorts;
                        v34 = CFMachPortGetPort(v18[6]);
                        CFDictionarySetValue(v33, (const void *)v34, v18);
                        pthread_mutex_unlock(&__gMDTCopierLock);
                        return v18;
                      }
                      v43 = (const __CFString *)*MEMORY[0x1E0C9AFD0];
                      v42 = CFSTR("Could not request port notification");
                      v41 = 12;
                      v44 = 420;
                    }
                  }
                }
                else
                {
                  v43 = (const __CFString *)*MEMORY[0x1E0C9AFD0];
                  v42 = CFSTR("Could not copy destination URL");
                  v41 = 12;
                  v44 = 397;
                }
              }
              else
              {
                v43 = (const __CFString *)*MEMORY[0x1E0C9AFD0];
                v42 = CFSTR("Could not copy source URL");
                v41 = 12;
                v44 = 393;
              }
            }
          }
          else
          {
            v43 = (const __CFString *)*MEMORY[0x1E0C9AFD0];
            v42 = CFSTR("Could not create CFMachPort");
            v41 = 12;
            v44 = 381;
          }
        }
      }
    }
    else
    {
      v43 = (const __CFString *)*MEMORY[0x1E0C9AFD0];
      v42 = CFSTR("Could not look up MDT service");
      v41 = 12;
      v44 = 362;
    }
  }
  else
  {
    v43 = (const __CFString *)*MEMORY[0x1E0C9AFD0];
    v42 = CFSTR("Could not get bootstrap port");
    v41 = 12;
    v44 = 356;
  }
  v40 = MDTCreateError(v43, v41, v44, (uint64_t)v42);
  v45 = v18[7];
  if (v45)
    CFRelease(v45);
  v46 = v18[8];
  if (v46)
    CFRelease(v46);
  v47 = v18[9];
  if (v47)
    CFRelease(v47);
  v48 = v18[10];
  if (v48)
    CFRelease(v48);
  v49 = v18[6];
  if (v49)
    CFRelease(v49);
  CFRelease(v18);
LABEL_53:
  if (a9)
  {
    v18 = 0;
    *a9 = v40;
  }
  else
  {
    if (v40)
      CFRelease(v40);
    return 0;
  }
  return v18;
}

CFErrorRef MDTCreateError(const __CFString *a1, CFIndex a2, int a3, uint64_t a4)
{
  CFErrorRef v7;
  int valuePtr;
  void *userInfoValues;
  CFTypeRef cf;
  uint64_t v12;
  void *userInfoKeys[4];

  userInfoKeys[3] = *(void **)MEMORY[0x1E0C80C00];
  valuePtr = a3;
  userInfoKeys[0] = CFSTR("MobileDataTransitErrorFile");
  userInfoKeys[1] = CFSTR("MobileDataTransitErrorLine");
  userInfoKeys[2] = *(void **)MEMORY[0x1E0C9AFB0];
  userInfoValues = CFSTR("/Library/Caches/com.apple.xbs/Sources/MobileDataTransit/Client.c");
  cf = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  v12 = a4;
  v7 = CFErrorCreateWithUserInfoKeysAndValues(0, a1, a2, (const void *const *)userInfoKeys, (const void *const *)&userInfoValues, 3);
  if (cf)
    CFRelease(cf);
  return v7;
}

void __MDTCopierMachCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v5;
  CFErrorRef v7;
  _OWORD v8[4];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  memset(v8, 0, 60);
  v5 = *(_DWORD *)(a2 + 20);
  if ((v5 - 78) <= 0xFFFFFFF1)
  {
    MDTR_server(a2, (uint64_t)v8);
    v5 = *(_DWORD *)(a2 + 20);
  }
  if (v5 == 72 || v5 == 70)
  {
    MDTCopierInvalidate(a4);
    v7 = CFErrorCreate(0, (CFErrorDomain)*MEMORY[0x1E0C9AFD0], 57, 0);
    *(_QWORD *)(a4 + 96) = v7;
    (*(void (**)(uint64_t, uint64_t, _QWORD, CFErrorRef, _QWORD))(a4 + 16))(a4, 3, 0, v7, *(_QWORD *)(a4 + 24));
  }
}

__CFRunLoopSource *MDTCopierScheduleWithRunLoop(uint64_t a1, __CFRunLoop *a2, const __CFString *a3)
{
  const __CFAllocator *v6;
  __CFRunLoopSource *result;

  if (!*(_QWORD *)(a1 + 32))
  {
    v6 = CFGetAllocator((CFTypeRef)a1);
    result = CFMachPortCreateRunLoopSource(v6, *(CFMachPortRef *)(a1 + 48), 0);
    *(_QWORD *)(a1 + 32) = result;
    if (!result)
      return result;
    CFRunLoopAddSource(a2, result, a3);
  }
  return (__CFRunLoopSource *)1;
}

void MDTCopierUnscheduleFromRunLoop(uint64_t a1, CFRunLoopRef rl, const __CFString *a3)
{
  __CFRunLoopSource *v3;

  v3 = *(__CFRunLoopSource **)(a1 + 32);
  if (v3)
    CFRunLoopRemoveSource(rl, v3, a3);
}

BOOL MDTCopierStart(uint64_t a1)
{
  const __CFURL *v2;
  const __CFURL *v3;
  uint64_t v4;
  char *v5;
  char *v6;
  int v7;

  v2 = copyCStringPath(*(const __CFURL **)(a1 + 56));
  v3 = copyCStringPath(*(const __CFURL **)(a1 + 64));
  v4 = *(_QWORD *)(a1 + 72);
  if (v4)
    v5 = copyCString(*(const __CFString **)(a1 + 72));
  else
    v5 = "";
  v6 = copyCString(*(const __CFString **)(a1 + 80));
  v7 = MDT_start(*(unsigned int *)(a1 + 40));
  CFAllocatorDeallocate(0, v2);
  CFAllocatorDeallocate(0, v3);
  if (v4)
    CFAllocatorDeallocate(0, v5);
  if (v6)
    CFAllocatorDeallocate(0, v6);
  return v7 == 0;
}

const __CFURL *copyCStringPath(const __CFURL *result)
{
  const __CFString *v1;
  char *v2;

  if (result)
  {
    v1 = CFURLCopyFileSystemPath(result, kCFURLPOSIXPathStyle);
    v2 = copyCString(v1);
    CFRelease(v1);
    return (const __CFURL *)v2;
  }
  return result;
}

char *copyCString(const __CFString *a1)
{
  CFIndex Length;
  CFIndex v3;
  char *v4;

  if (!a1)
    return 0;
  Length = CFStringGetLength(a1);
  v3 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
  v4 = (char *)CFAllocatorAllocate(0, v3, 0);
  CFStringGetCString(a1, v4, v3, 0x8000100u);
  return v4;
}

void MDTCopierInvalidate(uint64_t a1)
{
  __CFRunLoopSource *v2;
  mach_port_name_t v3;
  __CFMachPort *v4;

  v2 = *(__CFRunLoopSource **)(a1 + 32);
  if (v2)
    CFRunLoopSourceInvalidate(v2);
  v3 = *(_DWORD *)(a1 + 40);
  if (v3)
  {
    mach_port_deallocate(*MEMORY[0x1E0C83DA0], v3);
    *(_DWORD *)(a1 + 40) = 0;
  }
  v4 = *(__CFMachPort **)(a1 + 48);
  if (v4)
    CFMachPortInvalidate(v4);
}

void __MDTCopierFinalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;

  MDTCopierInvalidate((uint64_t)a1);
  v2 = (const void *)a1[4];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[6];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[7];
  if (v4)
    CFRelease(v4);
  v5 = (const void *)a1[8];
  if (v5)
    CFRelease(v5);
  v6 = (const void *)a1[9];
  if (v6)
    CFRelease(v6);
  v7 = (const void *)a1[10];
  if (v7)
    CFRelease(v7);
  v8 = (const void *)a1[11];
  if (v8)
    CFRelease(v8);
  v9 = (const void *)a1[12];
  if (v9)
    CFRelease(v9);
}

__CFString *__MDTCopierCopyDescription(_QWORD *a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;

  v2 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v2, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<MDTCopier %p [%p]> {\n"), a1, v2);
  CFStringAppendFormat(Mutable, 0, CFSTR("RunLoopSource: %p"), a1[4]);
  CFStringAppendFormat(Mutable, 0, CFSTR("Source: %@"), a1[7]);
  CFStringAppendFormat(Mutable, 0, CFSTR("Dest: %@"), a1[8]);
  CFStringAppendFormat(Mutable, 0, CFSTR("}"));
  return Mutable;
}

const __CFDictionary *__MDTCreateErrorFromPropertyList(const __CFDictionary *result)
{
  const __CFDictionary *v1;
  const __CFString *Value;
  const __CFNumber *v3;
  const __CFDictionary *v4;
  CFIndex valuePtr;

  if (result)
  {
    v1 = result;
    Value = (const __CFString *)CFDictionaryGetValue(result, CFSTR("Domain"));
    v3 = (const __CFNumber *)CFDictionaryGetValue(v1, CFSTR("Code"));
    v4 = (const __CFDictionary *)CFDictionaryGetValue(v1, CFSTR("UserInfo"));
    result = 0;
    valuePtr = 0;
    if (Value)
    {
      if (v3)
      {
        CFNumberGetValue(v3, kCFNumberLongType, &valuePtr);
        return CFErrorCreate(0, Value, valuePtr, v4);
      }
    }
  }
  return result;
}

CFURLRef __MDTCreateURLFromPropertyList(const __CFDictionary *a1)
{
  const __CFString *Value;

  if (a1 && (Value = (const __CFString *)CFDictionaryGetValue(a1, CFSTR("URL"))) != 0)
    return CFURLCreateWithString(0, Value, 0);
  else
    return 0;
}

const __CFData *__MDTUnserializePropertyList(CFDataRef theData)
{
  const __CFData *v1;
  const UInt8 *BytePtr;
  CFIndex Length;
  __CFReadStream *v4;
  __CFReadStream *v5;
  CFIndex v6;
  CFPropertyListFormat format;

  v1 = theData;
  if (theData)
  {
    BytePtr = CFDataGetBytePtr(theData);
    Length = CFDataGetLength(v1);
    v4 = CFReadStreamCreateWithBytesNoCopy(0, BytePtr, Length, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
    if (v4)
    {
      v5 = v4;
      format = 0;
      CFReadStreamOpen(v4);
      v6 = CFDataGetLength(v1);
      v1 = (const __CFData *)CFPropertyListCreateWithStream(0, v5, v6, 0, &format, 0);
      CFReadStreamClose(v5);
      CFRelease(v5);
    }
    else
    {
      return 0;
    }
  }
  return v1;
}

uint64_t MDT_create_session(int a1, int a2, _DWORD *a3, _DWORD *a4)
{
  mach_port_name_t reply_port;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _BYTE msg[36];
  __int128 v13;
  uint64_t v14;

  *(_OWORD *)&msg[20] = 0u;
  v13 = 0u;
  v14 = 0;
  *(_DWORD *)&msg[4] = 0;
  *(_DWORD *)&msg[24] = 1;
  *(_DWORD *)&msg[28] = a2;
  LODWORD(v13) = 1114112;
  reply_port = mig_get_reply_port();
  *(_DWORD *)&msg[8] = a1;
  *(_DWORD *)&msg[12] = reply_port;
  *(_DWORD *)msg = -2147478253;
  *(_QWORD *)&msg[16] = 0x38E38E3900000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
    reply_port = *(_DWORD *)&msg[12];
  }
  v8 = mach_msg((mach_msg_header_t *)msg, 3, 0x28u, 0x3Cu, reply_port, 0, 0);
  v9 = v8;
  if ((v8 - 268435458) <= 0xE && ((1 << (v8 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(*(mach_port_t *)&msg[12]);
  }
  else
  {
    if (!(_DWORD)v8)
    {
      if (*(_DWORD *)&msg[20] == 71)
      {
        v9 = 4294966988;
      }
      else if (*(_DWORD *)&msg[20] == 954437277)
      {
        if ((*(_DWORD *)msg & 0x80000000) != 0)
        {
          v9 = 4294966996;
          if (*(_DWORD *)&msg[24] == 1
            && *(_DWORD *)&msg[4] == 52
            && !*(_DWORD *)&msg[8]
            && WORD1(v13) << 16 == 1114112)
          {
            v9 = 0;
            v10 = HIDWORD(v13);
            *a3 = *(_DWORD *)&msg[28];
            *a4 = v10;
            return v9;
          }
        }
        else if (*(_DWORD *)&msg[4] == 36)
        {
          v9 = 4294966996;
          if (*(_DWORD *)&msg[32])
          {
            if (*(_DWORD *)&msg[8])
              v9 = 4294966996;
            else
              v9 = *(unsigned int *)&msg[32];
          }
        }
        else
        {
          v9 = 4294966996;
        }
      }
      else
      {
        v9 = 4294966995;
      }
      mach_msg_destroy((mach_msg_header_t *)msg);
      return v9;
    }
    mig_dealloc_reply_port(*(mach_port_t *)&msg[12]);
  }
  return v9;
}

uint64_t MDT_start(uint64_t a1)
{
  unsigned int v1;
  const char *v2;
  int v3;
  int v4;
  const char *v5;
  const char *v6;
  int v7;
  int v8;
  const char *v9;
  const char *v10;
  const char *v11;
  const char *v12;
  unsigned int v13;
  uint64_t (*v14)(_QWORD, _QWORD, _QWORD);
  int v15;
  uint64_t v16;
  char *v17;
  char *v18;
  int v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  int v29;
  uint64_t v30;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _OWORD v35[257];
  uint64_t v36;

  v1 = MEMORY[0x1E0C80A78](a1);
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v13 = v1;
  v36 = *MEMORY[0x1E0C80C00];
  v34 = 0u;
  memset(v35, 0, 464);
  v32 = 0u;
  v33 = 0u;
  *((_QWORD *)&v33 + 1) = *MEMORY[0x1E0C804E8];
  v14 = MEMORY[0x1E0C84128];
  if (MEMORY[0x1E0C84128])
    v15 = mig_strncpy_zerofill((char *)&v34 + 8, v2, 1024);
  else
    v15 = mig_strncpy((char *)&v34 + 8, v2, 1024);
  LODWORD(v34) = 0;
  DWORD1(v34) = v15;
  v16 = (v15 + 3) & 0xFFFFFFFC;
  v17 = (char *)&v32 + v16 - 1024;
  v18 = (char *)v35 + v16;
  if (v14)
    v19 = mig_strncpy_zerofill(v18, v12, 1024);
  else
    v19 = mig_strncpy(v18, v12, 1024);
  *((_DWORD *)v17 + 267) = v19;
  *((_DWORD *)v17 + 266) = 0;
  v20 = (v19 + 3) & 0xFFFFFFFC;
  v21 = &v17[v20];
  v22 = (uint64_t)&v17[v20 - 1024];
  v23 = v21 + 1080;
  if (v14)
    v24 = mig_strncpy_zerofill(v23, v10, 1024);
  else
    v24 = mig_strncpy(v23, v10, 1024);
  *(_DWORD *)(v22 + 2100) = v24;
  *(_DWORD *)(v22 + 2096) = 0;
  v25 = (v24 + 3) & 0xFFFFFFFC;
  v26 = v22 + v25;
  v27 = v22 + v25 - 1024;
  *(_DWORD *)(v26 + 2104) = v8;
  v28 = (char *)(v26 + 2116);
  if (v14)
    v29 = mig_strncpy_zerofill(v28, v6, 1024);
  else
    v29 = mig_strncpy(v28, v6, 1024);
  *(_DWORD *)(v27 + 3136) = v29;
  *(_DWORD *)(v27 + 3132) = 0;
  v30 = (v29 + 3) & 0xFFFFFFFC;
  *(_DWORD *)(v27 + v30 + 3140) = v4;
  LODWORD(v32) = 19;
  *((_QWORD *)&v32 + 1) = v13;
  *(_QWORD *)&v33 = 0x38E38E3B00000000;
  if (MEMORY[0x1E0C85B60])
    voucher_mach_msg_set((mach_msg_header_t *)&v32);
  return mach_msg((mach_msg_header_t *)&v32, 1, v16 + v20 + v25 + v30 + 72, 0, 0, 0, 0);
}

uint64_t MDTR_server(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  unsigned int v5;
  uint64_t result;
  int v7;

  v2 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)a2 = *(_DWORD *)a1 & 0x1F;
  *(_DWORD *)(a2 + 4) = 36;
  v3 = *(_DWORD *)(a1 + 20) + 100;
  *(_DWORD *)(a2 + 8) = v2;
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 20) = v3;
  if (*(_DWORD *)(a1 + 20) != 954437178)
  {
    result = 0;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
    *(_DWORD *)(a2 + 32) = -303;
    return result;
  }
  if ((*(_DWORD *)a1 & 0x80000000) == 0 || *(_DWORD *)(a1 + 24) != 1 || *(_DWORD *)(a1 + 4) != 60)
  {
    v7 = -304;
LABEL_10:
    *(_DWORD *)(a2 + 32) = v7;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
    return 1;
  }
  if (*(_BYTE *)(a1 + 39) != 1 || (v5 = *(_DWORD *)(a1 + 40), v5 != *(_DWORD *)(a1 + 56)))
  {
    v7 = -300;
    goto LABEL_10;
  }
  *(_DWORD *)(a2 + 32) = _status(*(_DWORD *)(a1 + 12), *(unsigned int *)(a1 + 52), *(const UInt8 **)(a1 + 28), v5);
  mig_deallocate(*(_QWORD *)(a1 + 28), *(unsigned int *)(a1 + 40));
  *(_QWORD *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  return 1;
}

uint64_t fsevent_default_log()
{
  if (fsevent_default_log_once != -1)
    dispatch_once(&fsevent_default_log_once, &__block_literal_global);
  return fsevent_default_log_logger;
}

os_log_t __fsevent_default_log_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.fsevents", "client");
  fsevent_default_log_logger = (uint64_t)result;
  return result;
}

CFStringRef FSEventStreamCopyDescription(ConstFSEventStreamRef streamRef)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  int v14;
  const __CFString *v15;
  NSObject *v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (!streamRef)
  {
    v17 = fsevent_default_log();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      FSEventStreamCopyDescription_cold_1();
    return 0;
  }
  v2 = (char *)malloc_type_malloc((*((_DWORD *)streamRef + 18) << 10) + 1024, 0x9B632473uLL);
  if (!v2)
  {
    v18 = fsevent_default_log();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      FSEventStreamCopyDescription_cold_2(v18, v19, v20, v21, v22, v23, v24, v25);
    return 0;
  }
  v3 = v2;
  v4 = &v2[sprintf(v2, "FSEventStreamRef @ %p:\n", streamRef)];
  v5 = &v4[sprintf(v4, "   allocator = %p\n", *((const void **)streamRef + 1))];
  v6 = &v5[sprintf(v5, "   callback = %p\n", *((const void **)streamRef + 2))];
  v7 = &v6[sprintf(v6, "   context = {%lu, %p, %p, %p, %p}\n", *((_QWORD *)streamRef + 3), *((const void **)streamRef + 4), *((const void **)streamRef + 5), *((const void **)streamRef + 6), *((const void **)streamRef + 7))];
  v8 = &v7[sprintf(v7, "   numPathsToWatch = %lu\n", *((_QWORD *)streamRef + 9))];
  v9 = &v8[sprintf(v8, "   pathsToWatch = %p\n", *((const void **)streamRef + 10))];
  if (*((uint64_t *)streamRef + 9) >= 1)
  {
    v10 = 0;
    do
    {
      v9 += sprintf(v9, "        pathsToWatch[%d] = '%s'\n", v10, *(const char **)(*((_QWORD *)streamRef + 10) + 8 * v10));
      ++v10;
    }
    while (*((_QWORD *)streamRef + 9) > v10);
  }
  v11 = &v9[sprintf(v9, "   latestEventId = %lld\n", *((_QWORD *)streamRef + 21))];
  v12 = &v11[sprintf(v11, "   latency = %llu (microseconds)\n", *((_QWORD *)streamRef + 22))];
  v13 = &v12[sprintf(v12, "   flags = 0x%08x\n", *((_DWORD *)streamRef + 46))];
  v14 = sprintf(v13, "\trunLoop = %p\n", *((const void **)streamRef + 28));
  sprintf(&v13[v14], "\trunLoopMode = %p\n", *((const void **)streamRef + 29));
  v15 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v3, 0x8000100u);
  free(v3);
  return v15;
}

void FSEventsClientPortCallback()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = fsevent_default_log();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
    FSEventsClientPortCallback_cold_1(v0, v1, v2, v3, v4, v5, v6, v7);
}

uint64_t server_gone_callback(uint64_t a1, uint64_t a2)
{
  return server_gone_StreamRef_callback(a2);
}

void FSEventStreamStop(FSEventStreamRef streamRef)
{
  NSObject *v2;
  uint64_t v3;
  __CFMachPort *v4;
  __CFFileDescriptor *v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;

  if (streamRef)
  {
    if (*((_BYTE *)streamRef + 188))
    {
      if (*((_DWORD *)streamRef + 49))
      {
        v2 = *((_QWORD *)streamRef + 45);
        if (v2 && *((_DWORD *)streamRef + 92) == 3)
        {
          dispatch_suspend(v2);
          *((_DWORD *)streamRef + 92) = 2;
        }
        v3 = *((_QWORD *)streamRef + 47);
        if (v3)
        {
          cancel_source((NSObject **)streamRef + 47, (int *)streamRef + 96);
          *((_DWORD *)streamRef + 49) = 0;
        }
        v4 = (__CFMachPort *)*((_QWORD *)streamRef + 26);
        if (v4)
        {
          CFMachPortSetInvalidationCallBack(v4, 0);
          CFMachPortInvalidate(*((CFMachPortRef *)streamRef + 26));
          CFRelease(*((CFTypeRef *)streamRef + 26));
          *((_QWORD *)streamRef + 26) = 0;
        }
        if (!v3)
        {
          dispose_f2d_private_port(*((_DWORD *)streamRef + 49));
          *((_DWORD *)streamRef + 49) = 0;
        }
        v5 = (__CFFileDescriptor *)*((_QWORD *)streamRef + 52);
        if (v5)
          CFFileDescriptorDisableCallBacks(v5, 1uLL);
        v6 = *((_QWORD *)streamRef + 54);
        if (v6)
        {
          if (*((_DWORD *)streamRef + 110) == 3)
          {
            dispatch_suspend(v6);
            *((_DWORD *)streamRef + 110) = 2;
          }
        }
        *((_BYTE *)streamRef + 188) = 0;
      }
      else
      {
        v8 = fsevent_default_log();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
          FSEventStreamStop_cold_2();
      }
    }
  }
  else
  {
    v7 = fsevent_default_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      FSEventStreamStop_cold_1();
  }
}

void dispose_f2d_private_port(mach_port_name_t a1)
{
  NSObject *v2;
  kern_return_t v3;
  mach_error_t v4;
  NSObject *v5;

  if (a1)
  {
    if (f2d_unregister_rpc(a1))
    {
      v2 = fsevent_default_log();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
        dispose_f2d_private_port_cold_2();
    }
    else
    {
      v3 = mach_port_deallocate(*MEMORY[0x1E0C83DA0], a1);
      if (v3)
      {
        v4 = v3;
        v5 = fsevent_default_log();
        if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
          dispose_f2d_private_port_cold_1(v4);
      }
    }
  }
}

FSEventStreamEventId FSEventStreamGetLatestEventId(ConstFSEventStreamRef streamRef)
{
  NSObject *v2;

  if (streamRef)
    return *((_QWORD *)streamRef + 21);
  v2 = fsevent_default_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    FSEventStreamGetLatestEventId_cold_1();
  return 0;
}

dev_t FSEventStreamGetDeviceBeingWatched(ConstFSEventStreamRef streamRef)
{
  dev_t result;
  NSObject *v2;

  if (streamRef)
    return *((_DWORD *)streamRef + 16);
  v2 = fsevent_default_log();
  result = os_log_type_enabled(v2, OS_LOG_TYPE_ERROR);
  if (result)
  {
    FSEventStreamGetDeviceBeingWatched_cold_1();
    return 0;
  }
  return result;
}

CFArrayRef FSEventStreamCopyPathsBeingWatched(ConstFSEventStreamRef streamRef)
{
  const void **v2;
  const void **v3;
  CFIndex v4;
  const __CFAllocator *v5;
  uint64_t v6;
  CFStringRef v7;
  CFArrayRef v8;
  const __CFArray *v9;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const void *v30;

  if (!streamRef)
  {
    v11 = fsevent_default_log();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      FSEventStreamCopyPathsBeingWatched_cold_1();
    return 0;
  }
  v2 = (const void **)malloc_type_calloc(*((_QWORD *)streamRef + 9), 8uLL, 0x6004044C4A2DFuLL);
  if (!v2)
  {
    v12 = fsevent_default_log();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      FSEventStreamCopyPathsBeingWatched_cold_2(v12, v13, v14, v15, v16, v17, v18, v19);
    return 0;
  }
  v3 = v2;
  v4 = *((_QWORD *)streamRef + 9);
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (v4 >= 1)
  {
    v6 = 0;
    while (1)
    {
      v7 = CFStringCreateWithFileSystemRepresentation(v5, *(const char **)(*((_QWORD *)streamRef + 10) + 8 * v6));
      if (!v7)
        break;
      v3[v6++] = v7;
      v4 = *((_QWORD *)streamRef + 9);
      if (v4 <= v6)
        goto LABEL_7;
    }
    v20 = fsevent_default_log();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      FSEventStreamCopyPathsBeingWatched_cold_3((_QWORD *)streamRef + 10, v6, v20);
    goto LABEL_20;
  }
LABEL_7:
  v8 = CFArrayCreate(v5, v3, v4, MEMORY[0x1E0C9B378]);
  if (!v8)
  {
    v21 = fsevent_default_log();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      FSEventStreamCopyPathsBeingWatched_cold_4(v21, v22, v23, v24, v25, v26, v27, v28);
LABEL_20:
    if (*((uint64_t *)streamRef + 9) >= 1)
    {
      v29 = 0;
      do
      {
        v30 = v3[v29];
        if (!v30)
          break;
        CFRelease(v30);
        ++v29;
      }
      while (*((_QWORD *)streamRef + 9) > v29);
    }
    free(v3);
    return 0;
  }
  v9 = v8;
  if (*((uint64_t *)streamRef + 9) >= 1)
  {
    v10 = 0;
    do
      CFRelease(v3[v10++]);
    while (*((_QWORD *)streamRef + 9) > v10);
  }
  free(v3);
  return v9;
}

FSEventStreamRef FSEventStreamCreateRelativeToDevice(CFAllocatorRef allocator, FSEventStreamCallback callback, FSEventStreamContext *context, dev_t deviceToWatch, CFArrayRef pathsToWatchRelativeToDevice, FSEventStreamEventId sinceWhen, CFTimeInterval latency, FSEventStreamCreateFlags flags)
{
  NSObject *v9;

  if (deviceToWatch > 0)
    return (FSEventStreamRef)_FSEventStreamCreate("FSEventStreamCreateRelativeToDevice", allocator, (uint64_t)callback, (__int128 *)&context->version, deviceToWatch, pathsToWatchRelativeToDevice, sinceWhen, (unint64_t)(latency * 1000000.0), flags);
  v9 = fsevent_default_log();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    FSEventStreamCreateRelativeToDevice_cold_1();
  return 0;
}

void _FSEventStreamDeallocate(char *ptr)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  const __CFAllocator *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t i;
  void *v21;
  NSObject *v22;
  void (*v23)(_QWORD);

  if (ptr)
  {
    if (*(_DWORD *)ptr)
    {
      v2 = fsevent_default_log();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
        _FSEventStreamDeallocate_cold_4();
    }
    else
    {
      if (ptr[188])
      {
        v4 = fsevent_default_log();
        if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
          _FSEventStreamDeallocate_cold_3();
      }
      if (*((_QWORD *)ptr + 27) || *((_QWORD *)ptr + 45))
      {
        v5 = fsevent_default_log();
        if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
          _FSEventStreamDeallocate_cold_2();
      }
      v6 = (const __CFAllocator *)*((_QWORD *)ptr + 1);
      if (v6)
      {
        v7 = (void *)*((_QWORD *)ptr + 10);
        if (v7)
        {
          v8 = *((_QWORD *)ptr + 9);
          *((_QWORD *)ptr + 9) = 0;
          if ((int)v8 >= 1)
          {
            v9 = 0;
            v10 = v8;
            do
            {
              v11 = *(void **)(*((_QWORD *)ptr + 10) + 8 * v9);
              if (v11)
                CFAllocatorDeallocate(v6, v11);
              v12 = *((_QWORD *)ptr + 49);
              if (v12)
              {
                v13 = *(void **)(v12 + 32 * v9 + 24);
                if (v13)
                {
                  free(v13);
                  v12 = *((_QWORD *)ptr + 49);
                }
                v14 = v12 + 32 * v9;
                v15 = *(void **)(v14 + 16);
                if (v15)
                {
                  if (*(int *)(v14 + 8) >= 1)
                  {
                    v16 = 0;
                    do
                    {
                      close(*(_DWORD *)(*(_QWORD *)(v12 + 32 * v9 + 16) + 4 * v16++));
                      v12 = *((_QWORD *)ptr + 49);
                      v17 = v12 + 32 * v9;
                    }
                    while (v16 < *(int *)(v17 + 8));
                    v15 = *(void **)(v17 + 16);
                  }
                  free(v15);
                  v12 = *((_QWORD *)ptr + 49);
                }
                close(*(_DWORD *)(v12 + 32 * v9 + 4));
              }
              ++v9;
            }
            while (v9 != v10);
            v7 = (void *)*((_QWORD *)ptr + 10);
          }
          CFAllocatorDeallocate(v6, v7);
          CFAllocatorDeallocate(v6, *((void **)ptr + 11));
          v18 = (void *)*((_QWORD *)ptr + 49);
          if (v18)
            CFAllocatorDeallocate(v6, v18);
          v19 = (void *)*((_QWORD *)ptr + 50);
          if (v19)
            CFAllocatorDeallocate(v6, v19);
        }
        for (i = 104; i != 168; i += 8)
        {
          v21 = *(void **)&ptr[i];
          if (v21)
          {
            free(v21);
            *(_QWORD *)&ptr[i] = 0;
          }
        }
        *((_QWORD *)ptr + 12) = 0;
        v22 = *((_QWORD *)ptr + 44);
        if (v22)
          dispatch_release(v22);
        v23 = (void (*)(_QWORD))*((_QWORD *)ptr + 6);
        if (v23)
          v23(*((_QWORD *)ptr + 4));
        *((_QWORD *)ptr + 56) = 0;
        *((_OWORD *)ptr + 26) = 0u;
        *((_OWORD *)ptr + 27) = 0u;
        *((_OWORD *)ptr + 24) = 0u;
        *((_OWORD *)ptr + 25) = 0u;
        *((_OWORD *)ptr + 22) = 0u;
        *((_OWORD *)ptr + 23) = 0u;
        *((_OWORD *)ptr + 20) = 0u;
        *((_OWORD *)ptr + 21) = 0u;
        *((_OWORD *)ptr + 18) = 0u;
        *((_OWORD *)ptr + 19) = 0u;
        *((_OWORD *)ptr + 16) = 0u;
        *((_OWORD *)ptr + 17) = 0u;
        *((_OWORD *)ptr + 14) = 0u;
        *((_OWORD *)ptr + 15) = 0u;
        *((_OWORD *)ptr + 12) = 0u;
        *((_OWORD *)ptr + 13) = 0u;
        *((_OWORD *)ptr + 10) = 0u;
        *((_OWORD *)ptr + 11) = 0u;
        *((_OWORD *)ptr + 8) = 0u;
        *((_OWORD *)ptr + 9) = 0u;
        *((_OWORD *)ptr + 6) = 0u;
        *((_OWORD *)ptr + 7) = 0u;
        *((_OWORD *)ptr + 4) = 0u;
        *((_OWORD *)ptr + 5) = 0u;
        *((_OWORD *)ptr + 2) = 0u;
        *((_OWORD *)ptr + 3) = 0u;
        *(_OWORD *)ptr = 0u;
        *((_OWORD *)ptr + 1) = 0u;
        CFAllocatorDeallocate(v6, ptr);
        CFRelease(v6);
      }
    }
  }
  else
  {
    v3 = fsevent_default_log();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      _FSEventStreamDeallocate_cold_1();
  }
}

void FSEventStreamScheduleWithRunLoop(FSEventStreamRef streamRef, CFRunLoopRef runLoop, CFStringRef runLoopMode)
{
  mach_port_name_t *v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  __CFFileDescriptor *v11;
  __CFRunLoopSource *RunLoopSource;
  const __CFAllocator *v13;
  CFNumberRef v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  CFFileDescriptorContext context;

  if (streamRef)
  {
    if (runLoop)
    {
      v6 = (mach_port_name_t *)((char *)streamRef + 192);
      if (*((_DWORD *)streamRef + 48))
      {
LABEL_4:
        if (_createAndAddRunLoopSource((int)"FSEventStreamScheduleWithRunLoop", (uint64_t)streamRef, runLoop, runLoopMode))
        {
          v7 = fsevent_default_log();
          if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
            FSEventStreamScheduleWithRunLoop_cold_5();
          mach_port_deallocate(*MEMORY[0x1E0C83DA0], *v6);
          *v6 = 0;
        }
        else
        {
          *((_QWORD *)streamRef + 28) = CFRetain(runLoop);
          *((_QWORD *)streamRef + 29) = CFStringCreateCopy(0, runLoopMode);
          if ((*((_BYTE *)streamRef + 184) & 4) != 0)
          {
            context.version = 0;
            context.info = streamRef;
            context.retain = (void *(__cdecl *)(void *))_FSEventStreamRetainAndReturnSelf;
            context.release = (void (__cdecl *)(void *))FSEventStreamRelease;
            context.copyDescription = (CFStringRef (__cdecl *)(void *))FSEventStreamCopyDescription;
            v11 = CFFileDescriptorCreate(0, *((_DWORD *)streamRef + 102), 1u, (CFFileDescriptorCallBack)cffd_callback, &context);
            *((_QWORD *)streamRef + 52) = v11;
            if (v11)
            {
              RunLoopSource = CFFileDescriptorCreateRunLoopSource(0, v11, 0);
              *((_QWORD *)streamRef + 53) = RunLoopSource;
              if (RunLoopSource)
              {
                CFRunLoopAddSource(runLoop, RunLoopSource, (CFRunLoopMode)*MEMORY[0x1E0C9B280]);
              }
              else
              {
                v23 = fsevent_default_log();
                if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
                  FSEventStreamScheduleWithRunLoop_cold_4(v23, v24, v25, v26, v27, v28, v29, v30);
                CFFileDescriptorInvalidate(*((CFFileDescriptorRef *)streamRef + 52));
                CFRelease(*((CFTypeRef *)streamRef + 52));
                *((_QWORD *)streamRef + 52) = 0;
              }
            }
            else
            {
              v15 = fsevent_default_log();
              if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
                FSEventStreamScheduleWithRunLoop_cold_3(v15, v16, v17, v18, v19, v20, v21, v22);
            }
          }
        }
        return;
      }
      if (!allocate_d2f_port((uint64_t)"FSEventStreamScheduleWithRunLoop", (uint64_t)streamRef))
      {
        pthread_mutex_lock(&FSEvents_streamDict_mutex);
        v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        if (!FSEvents_streamDict)
          FSEvents_streamDict = (uint64_t)CFDictionaryCreateMutable(v13, 0, MEMORY[0x1E0C9B390], 0);
        v14 = CFNumberCreate(v13, kCFNumberIntType, v6);
        CFDictionaryAddValue((CFMutableDictionaryRef)FSEvents_streamDict, v14, streamRef);
        pthread_mutex_unlock(&FSEvents_streamDict_mutex);
        CFRelease(v14);
        goto LABEL_4;
      }
      v10 = fsevent_default_log();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        FSEventStreamScheduleWithRunLoop_cold_6();
    }
    else
    {
      v9 = fsevent_default_log();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        FSEventStreamScheduleWithRunLoop_cold_2();
    }
  }
  else
  {
    v8 = fsevent_default_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      FSEventStreamScheduleWithRunLoop_cold_1();
  }
}

uint64_t _createAndAddRunLoopSource(int a1, uint64_t a2, CFRunLoopRef rl, CFRunLoopMode mode)
{
  mach_port_t v5;
  __CFRunLoopSource *v8;
  NSObject *v9;
  NSObject *v10;
  __CFMachPort *v11;
  CFRunLoopSourceRef RunLoopSource;
  NSObject *v14;
  NSObject *v15;
  CFMachPortContext v16;

  v5 = *(_DWORD *)(a2 + 192);
  if (!v5)
  {
    v10 = fsevent_default_log();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      _createAndAddRunLoopSource_cold_1();
    return 5;
  }
  if (*(_QWORD *)(a2 + 200))
  {
    v8 = *(__CFRunLoopSource **)(a2 + 216);
    if (!v8)
    {
      v9 = fsevent_default_log();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        _createAndAddRunLoopSource_cold_4();
      return 5;
    }
LABEL_11:
    CFRunLoopAddSource(rl, v8, mode);
    return 0;
  }
  memset(&v16, 0, sizeof(v16));
  v11 = CFMachPortCreateWithPort(0, v5, (CFMachPortCallBack)FSEventsClientProcessMessageCallback, &v16, 0);
  *(_QWORD *)(a2 + 200) = v11;
  if (v11)
  {
    RunLoopSource = CFMachPortCreateRunLoopSource((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v11, 0);
    *(_QWORD *)(a2 + 216) = RunLoopSource;
    if (RunLoopSource)
    {
      v8 = RunLoopSource;
      goto LABEL_11;
    }
    v15 = fsevent_default_log();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      _createAndAddRunLoopSource_cold_3();
    CFMachPortInvalidate(*(CFMachPortRef *)(a2 + 200));
    CFRelease(*(CFTypeRef *)(a2 + 200));
    *(_QWORD *)(a2 + 200) = 0;
  }
  else
  {
    v14 = fsevent_default_log();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      _createAndAddRunLoopSource_cold_2();
  }
  mach_port_deallocate(*MEMORY[0x1E0C83DA0], *(_DWORD *)(a2 + 196));
  *(_DWORD *)(a2 + 196) = 0;
  return 5;
}

void FSEventStreamUnscheduleFromRunLoop(FSEventStreamRef streamRef, CFRunLoopRef runLoop, CFStringRef runLoopMode)
{
  __CFRunLoopSource *v5;
  __CFRunLoopSource *v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;

  if (streamRef)
  {
    if (runLoop)
    {
      v5 = (__CFRunLoopSource *)*((_QWORD *)streamRef + 27);
      if (v5)
      {
        CFRunLoopRemoveSource(runLoop, v5, runLoopMode);
        v7 = (__CFRunLoopSource *)*((_QWORD *)streamRef + 53);
        if (v7)
          CFRunLoopRemoveSource(runLoop, v7, runLoopMode);
        _FSEventStreamUnscheduleFromRunLoops((uint64_t)streamRef);
      }
      else
      {
        v10 = fsevent_default_log();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          FSEventStreamUnscheduleFromRunLoop_cold_3();
      }
    }
    else
    {
      v9 = fsevent_default_log();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        FSEventStreamUnscheduleFromRunLoop_cold_2();
    }
  }
  else
  {
    v8 = fsevent_default_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      FSEventStreamUnscheduleFromRunLoop_cold_1();
  }
}

void _FSEventStreamUnscheduleFromRunLoops(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 224);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 224) = 0;
  }
  v3 = *(const void **)(a1 + 232);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 232) = 0;
  }
}

FSEventStreamEventId FSEventStreamFlushAsync(FSEventStreamRef streamRef)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  FSEventStreamEventId v5;

  v5 = 0;
  if (streamRef)
  {
    if (*((_BYTE *)streamRef + 188))
    {
      if (*((_QWORD *)streamRef + 25))
      {
        if (f2d_flush_rpc(*((_DWORD *)streamRef + 49), &v5))
        {
          v1 = fsevent_default_log();
          if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
            FSEventStreamFlushAsync_cold_3();
        }
      }
    }
    else
    {
      v3 = fsevent_default_log();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
        FSEventStreamFlushAsync_cold_2();
    }
  }
  else
  {
    v2 = fsevent_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      FSEventStreamFlushAsync_cold_1();
  }
  return v5;
}

void FSEventStreamFlushSync(FSEventStreamRef streamRef)
{
  __CFRunLoop *v2;
  __CFRunLoopSource *v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  __CFRunLoop *v12;
  uint64_t v13;
  uint64_t v14;

  v14 = 0;
  if (streamRef)
  {
    if (*((_BYTE *)streamRef + 188))
    {
      if (*((_QWORD *)streamRef + 25) || *((_QWORD *)streamRef + 45))
      {
        v2 = (__CFRunLoop *)*((_QWORD *)streamRef + 28);
        if (v2 || *((_QWORD *)streamRef + 45))
        {
          v3 = (__CFRunLoopSource *)*((_QWORD *)streamRef + 27);
          if (v3 || *((_QWORD *)streamRef + 45))
          {
            if (v2)
            {
              CFRunLoopAddSource(v2, v3, CFSTR("com.apple.FSEvents"));
              v13 = 0;
              while (*((_BYTE *)streamRef + 190)
                   && !_runRunLoopOnceForFlushSync((uint64_t)"FSEventStreamFlushSync:1", (uint64_t)streamRef, (int *)&v13 + 1, &v13));
            }
            else
            {
              pthread_mutex_lock((pthread_mutex_t *)((char *)streamRef + 240));
              while (*((_BYTE *)streamRef + 190))
              {
                if (pthread_cond_wait((pthread_cond_t *)((char *)streamRef + 304), (pthread_mutex_t *)((char *)streamRef + 240)))
                {
                  v6 = fsevent_default_log();
                  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
                    FSEventStreamFlushSync_cold_8();
                  break;
                }
              }
              pthread_mutex_unlock((pthread_mutex_t *)((char *)streamRef + 240));
            }
            if (f2d_flush_rpc(*((_DWORD *)streamRef + 49), &v14))
            {
              v7 = fsevent_default_log();
              if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
                FSEventStreamFlushSync_cold_7();
            }
            if (!v14)
              goto LABEL_46;
            if (v14 > 0)
            {
              *((_QWORD *)streamRef + 56) = v14;
              v13 = 0;
              if (*((_QWORD *)streamRef + 28))
              {
                while (*((_QWORD *)streamRef + 21) < *((_QWORD *)streamRef + 56)
                     && !_runRunLoopOnceForFlushSync((uint64_t)"FSEventStreamFlushSync:2", (uint64_t)streamRef, (int *)&v13 + 1, &v13));
              }
              else
              {
                pthread_mutex_lock((pthread_mutex_t *)((char *)streamRef + 240));
                while (*((_QWORD *)streamRef + 21) < *((_QWORD *)streamRef + 56))
                {
                  if (pthread_cond_wait((pthread_cond_t *)((char *)streamRef + 304), (pthread_mutex_t *)((char *)streamRef + 240)))
                  {
                    v11 = fsevent_default_log();
                    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
                      FSEventStreamFlushSync_cold_5();
                    break;
                  }
                }
                pthread_mutex_unlock((pthread_mutex_t *)((char *)streamRef + 240));
              }
              *((_QWORD *)streamRef + 56) = 0;
LABEL_46:
              v12 = (__CFRunLoop *)*((_QWORD *)streamRef + 28);
              if (v12)
                CFRunLoopRemoveSource(v12, *((CFRunLoopSourceRef *)streamRef + 27), CFSTR("com.apple.FSEvents"));
              return;
            }
            v8 = fsevent_default_log();
            if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
              FSEventStreamFlushSync_cold_6();
          }
          else
          {
            v10 = fsevent_default_log();
            if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
              FSEventStreamFlushSync_cold_4();
          }
        }
        else
        {
          v9 = fsevent_default_log();
          if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
            FSEventStreamFlushSync_cold_3();
        }
      }
    }
    else
    {
      v5 = fsevent_default_log();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        FSEventStreamFlushAsync_cold_2();
    }
  }
  else
  {
    v4 = fsevent_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      FSEventStreamFlushSync_cold_1();
  }
}

uint64_t _runRunLoopOnceForFlushSync(uint64_t a1, uint64_t a2, int *a3, _DWORD *a4)
{
  __int32 v8;
  uint64_t result;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  int v13;
  NSObject *v14;
  double v15;
  int v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  double v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v8 = CFRunLoopRunInMode(CFSTR("com.apple.FSEvents"), 5.0, 1u) - 1;
  result = 0;
  switch(v8)
  {
    case 0:
      v10 = fsevent_default_log();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        _runRunLoopOnceForFlushSync_cold_1();
      return 1;
    case 1:
      v12 = fsevent_default_log();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        _runRunLoopOnceForFlushSync_cold_2();
      return 1;
    case 2:
      v13 = *a3;
      if ((*a3 & ~(-1 << *a4)) == 0)
      {
        v14 = fsevent_default_log();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          v15 = (double)(*a3 + 1) * 5.0;
          v16 = 136316162;
          v17 = a1;
          v18 = 2048;
          v19 = a2;
          v20 = 2080;
          v21 = "The run loop timed out.";
          v22 = 1024;
          v23 = 3;
          v24 = 2048;
          v25 = v15;
          _os_log_error_impl(&dword_182882000, v14, OS_LOG_TYPE_ERROR, "%s(streamRef = %p): WARNING: CFRunLoopRunInMode() => %s (%d) (%.2f seconds)", (uint8_t *)&v16, 0x30u);
        }
        ++*a4;
        v13 = *a3;
      }
      result = 0;
      *a3 = v13 + 1;
      return result;
    case 3:
      return result;
    default:
      v11 = fsevent_default_log();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        v16 = 136315906;
        v17 = a1;
        v18 = 2048;
        v19 = a2;
        v20 = 2080;
        v21 = "UNKNOWN";
        v22 = 1024;
        v23 = 0;
        _os_log_error_impl(&dword_182882000, v11, OS_LOG_TYPE_ERROR, "%s(streamRef = %p): ERROR: CFRunLoopRunInMode() => %s (%d)", (uint8_t *)&v16, 0x26u);
      }
      return 1;
  }
}

void FSEventStreamInvalidate(FSEventStreamRef streamRef)
{
  NSObject *v2;
  CFNumberRef v3;
  __CFMachPort *v4;
  __CFMachPort *v5;
  const void *v6;
  NSObject *v7;
  __CFFileDescriptor *v8;
  const void *v9;
  NSObject *v10;

  if (streamRef)
  {
    if (*((_QWORD *)streamRef + 27) || *((_QWORD *)streamRef + 45))
    {
      if (*((_BYTE *)streamRef + 188))
      {
        v2 = fsevent_default_log();
        if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
          FSEventStreamInvalidate_cold_3();
      }
      *((_BYTE *)streamRef + 189) = 1;
      _FSEventStreamUnscheduleFromRunLoops((uint64_t)streamRef);
      v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, (char *)streamRef + 192);
      pthread_mutex_lock(&FSEvents_streamDict_mutex);
      CFDictionaryRemoveValue((CFMutableDictionaryRef)FSEvents_streamDict, v3);
      pthread_mutex_unlock(&FSEvents_streamDict_mutex);
      CFRelease(v3);
      v4 = (__CFMachPort *)*((_QWORD *)streamRef + 25);
      if (v4)
      {
        CFMachPortInvalidate(v4);
        CFRelease(*((CFTypeRef *)streamRef + 25));
        *((_QWORD *)streamRef + 25) = 0;
        v5 = (__CFMachPort *)*((_QWORD *)streamRef + 26);
        if (v5)
        {
          CFMachPortSetInvalidationCallBack(v5, 0);
          CFRelease(*((CFTypeRef *)streamRef + 26));
          *((_QWORD *)streamRef + 26) = 0;
        }
        v6 = (const void *)*((_QWORD *)streamRef + 27);
        if (v6)
        {
          CFRelease(v6);
          *((_QWORD *)streamRef + 27) = 0;
        }
      }
      if (*((_QWORD *)streamRef + 45))
        cancel_source((NSObject **)streamRef + 45, (int *)streamRef + 92);
      else
        dispose_d2f_port(*((_DWORD *)streamRef + 48));
      *((_DWORD *)streamRef + 48) = 0;
      if (*((_QWORD *)streamRef + 47))
      {
        cancel_source((NSObject **)streamRef + 47, (int *)streamRef + 96);
        *((_DWORD *)streamRef + 49) = 0;
      }
      if ((*((_BYTE *)streamRef + 184) & 4) != 0)
      {
        v8 = (__CFFileDescriptor *)*((_QWORD *)streamRef + 52);
        if (v8)
        {
          CFFileDescriptorInvalidate(v8);
          CFRelease(*((CFTypeRef *)streamRef + 52));
          *((_QWORD *)streamRef + 52) = 0;
          v9 = (const void *)*((_QWORD *)streamRef + 53);
          if (v9)
          {
            CFRelease(v9);
            *((_QWORD *)streamRef + 53) = 0;
          }
        }
        if (*((_QWORD *)streamRef + 54))
        {
          cancel_source((NSObject **)streamRef + 54, (int *)streamRef + 110);
          *((_DWORD *)streamRef + 102) = -1;
        }
      }
    }
    else
    {
      v10 = fsevent_default_log();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        FSEventStreamInvalidate_cold_2();
    }
  }
  else
  {
    v7 = fsevent_default_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      FSEventStreamInvalidate_cold_1();
  }
}

void dispose_d2f_port(mach_port_name_t name)
{
  kern_return_t v1;
  mach_error_t v2;
  NSObject *v3;

  if (name)
  {
    v1 = mach_port_mod_refs(*MEMORY[0x1E0C83DA0], name, 1u, -1);
    if (v1)
    {
      v2 = v1;
      v3 = fsevent_default_log();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
        dispose_d2f_port_cold_1(v2);
    }
  }
}

FSEventStreamEventId FSEventsGetCurrentEventId(void)
{
  int v0;
  FSEventStreamEventId result;
  FSEventStreamEventId v2;

  v2 = 0;
  v0 = FSEvents_connect();
  result = 0;
  if (!v0)
  {
    f2d_get_current_event_id_rpc(FSEvents_f2d_public_port, &v2);
    return v2;
  }
  return result;
}

CFUUIDRef FSEventsCopyUUIDForDevice(dev_t dev)
{
  NSObject *v2;
  const __CFUUID *v3;
  const __CFString *v6;
  const __CFString *v7;
  _OWORD v8[2];
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (dev <= 0)
  {
    v2 = fsevent_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      FSEventsCopyUUIDForDevice_cold_1();
  }
  if (FSEvents_connect())
    return 0;
  v9 = 0;
  memset(v8, 0, sizeof(v8));
  f2d_get_server_uuid_rpc(FSEvents_f2d_public_port, dev, (uint64_t)v8);
  if (LODWORD(v8[0]) == 1429032782 && *(_DWORD *)((char *)v8 + 3) == 1145656661)
    return 0;
  v6 = CFStringCreateWithBytes(0, (const UInt8 *)v8, 36, 0x600u, 0);
  if (!v6)
    return 0;
  v7 = v6;
  v3 = CFUUIDCreateFromString(0, v6);
  CFRelease(v7);
  return v3;
}

FSEventStreamEventId FSEventsGetLastEventIdForDeviceBeforeTime(dev_t dev, CFAbsoluteTime time)
{
  int v4;
  FSEventStreamEventId result;
  FSEventStreamEventId v6;

  v6 = 0;
  v4 = FSEvents_connect();
  result = 0;
  if (!v4)
  {
    f2d_get_last_event_for_device_before_time_rpc(FSEvents_f2d_public_port, dev, (unint64_t)time, &v6);
    return v6;
  }
  return result;
}

Boolean FSEventsPurgeEventsForDeviceUpToEventId(dev_t dev, FSEventStreamEventId eventId)
{
  int v4;
  _BOOL4 v5;
  int v6;
  unsigned int v7;
  int v8;
  statfs *v9;
  statfs *v10;
  unsigned int v11;
  uint64_t v12;
  char *f_mntonname;
  NSObject *v14;
  int v16;
  char v17[1024];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v16 = 0;
  v4 = FSEvents_connect();
  LOBYTE(v5) = 0;
  if (!v4)
  {
    v17[0] = 0;
    v6 = getfsstat(0, 0, 2);
    if ((v6 & 0x80000000) == 0)
    {
      v7 = v6;
      v8 = 2168 * v6;
      v9 = (statfs *)malloc_type_malloc(2168 * v6, 0x1156268uLL);
      if (v9)
      {
        v10 = v9;
        v11 = getfsstat(v9, v8, 2);
        if ((v11 & 0x80000000) == 0)
        {
          v12 = v11 >= v7 ? v7 : v11;
          if ((_DWORD)v12)
          {
            f_mntonname = v10->f_mntonname;
            while (*((_DWORD *)f_mntonname - 10) != dev)
            {
              f_mntonname += 2168;
              if (!--v12)
                goto LABEL_14;
            }
            __strlcpy_chk();
          }
        }
LABEL_14:
        free(v10);
      }
    }
    syslog(2, "dev %d (%s) : purging events up to event id %lld", dev, v17, eventId);
    if (f2d_purge_events_for_device_up_to_event_id_rpc(FSEvents_f2d_public_port, dev, eventId, &v16))
    {
      v14 = fsevent_default_log();
      v5 = os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
      if (v5)
      {
        FSEventsPurgeEventsForDeviceUpToEventId_cold_1();
        LOBYTE(v5) = 0;
      }
    }
    else
    {
      LOBYTE(v5) = v16 == 0;
    }
  }
  return v5;
}

void FSEventStreamShow(ConstFSEventStreamRef streamRef)
{
  FILE **v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (FILE **)MEMORY[0x1E0C80C10];
  fprintf((FILE *)*MEMORY[0x1E0C80C10], "FSEventStreamRef @ %p:\n", streamRef);
  if (streamRef)
  {
    fprintf(*v2, "   allocator = %p\n", *((const void **)streamRef + 1));
    fprintf(*v2, "   callback = %p\n", *((const void **)streamRef + 2));
    fprintf(*v2, "   f2d_private_port = 0x%x\n", *((_DWORD *)streamRef + 49));
    fprintf(*v2, "   context = {%lu, %p, %p, %p, %p}\n", *((_QWORD *)streamRef + 3), *((const void **)streamRef + 4), *((const void **)streamRef + 5), *((const void **)streamRef + 6), *((const void **)streamRef + 7));
    fprintf(*v2, "   numPathsToWatch = %lu\n", *((_QWORD *)streamRef + 9));
    fprintf(*v2, "   pathsToWatch = %p\n", *((const void **)streamRef + 10));
    if (*((uint64_t *)streamRef + 9) >= 1)
    {
      v3 = 0;
      do
      {
        fprintf(*v2, "        pathsToWatch[%d] = '%s'\n", v3, *(const char **)(*((_QWORD *)streamRef + 10) + 8 * v3));
        ++v3;
      }
      while (*((_QWORD *)streamRef + 9) > v3);
    }
    fprintf(*v2, "   numPathsToExclude = %lu\n", *((_QWORD *)streamRef + 12));
    if (*((uint64_t *)streamRef + 12) >= 1)
    {
      v4 = 0;
      do
      {
        fprintf(*v2, "        pathsToExclude[%d] = '%s'\n", v4, *((const char **)streamRef + v4 + 13));
        ++v4;
      }
      while (*((_QWORD *)streamRef + 12) > v4);
    }
    fprintf(*v2, "   latestEventId = %lld\n", *((_QWORD *)streamRef + 21));
    fprintf(*v2, "   latency = %llu (microseconds)\n", *((_QWORD *)streamRef + 22));
    fprintf(*v2, "   flags = 0x%08x\n", *((_DWORD *)streamRef + 46));
    fprintf(*v2, "   runLoop = %p\n", *((const void **)streamRef + 28));
    fprintf(*v2, "   runLoopMode = %p\n", *((const void **)streamRef + 29));
  }
}

void server_gone_StreamRef_callback(uint64_t a1)
{
  const __CFAllocator *v2;
  mach_port_name_t *v3;
  CFNumberRef v4;
  ipc_space_t *v5;
  uint64_t v6;
  uint64_t v7;
  __CFRunLoopSource *v8;
  __CFMachPort *v9;
  __CFMachPort *v10;
  NSObject *v11;
  NSObject *v12;
  int *v13;
  int v14;
  int v15;
  NSObject *v16;
  CFNumberRef v17;
  __CFMachPort *v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  CFMachPortContext context;

  if (a1 && !*(_BYTE *)(a1 + 189) && (*(_QWORD *)(a1 + 360) || *(_QWORD *)(a1 + 224)))
  {
    v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v3 = (mach_port_name_t *)(a1 + 192);
    v4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, (const void *)(a1 + 192));
    pthread_mutex_lock(&FSEvents_streamDict_mutex);
    CFDictionaryRemoveValue((CFMutableDictionaryRef)FSEvents_streamDict, v4);
    pthread_mutex_unlock(&FSEvents_streamDict_mutex);
    CFRelease(v4);
    pthread_mutex_lock(&FSEvents_f2d_public_port_mutex);
    v5 = (ipc_space_t *)MEMORY[0x1E0C83DA0];
    mach_port_deallocate(*MEMORY[0x1E0C83DA0], FSEvents_f2d_public_port);
    FSEvents_f2d_public_port = 0;
    pthread_mutex_unlock(&FSEvents_f2d_public_port_mutex);
    v6 = *(_QWORD *)(a1 + 360);
    if (v6)
    {
      cancel_source((NSObject **)(a1 + 360), (int *)(a1 + 368));
      *(_DWORD *)(a1 + 192) = 0;
    }
    v7 = *(_QWORD *)(a1 + 376);
    if (v7)
    {
      cancel_source((NSObject **)(a1 + 376), (int *)(a1 + 384));
      *(_DWORD *)(a1 + 196) = 0;
    }
    v8 = *(__CFRunLoopSource **)(a1 + 216);
    if (v8)
    {
      CFRunLoopRemoveSource(*(CFRunLoopRef *)(a1 + 224), v8, *(CFRunLoopMode *)(a1 + 232));
      CFRelease(*(CFTypeRef *)(a1 + 216));
      *(_QWORD *)(a1 + 216) = 0;
    }
    v9 = *(__CFMachPort **)(a1 + 208);
    if (v9)
    {
      CFMachPortSetInvalidationCallBack(v9, 0);
      CFMachPortInvalidate(*(CFMachPortRef *)(a1 + 208));
      CFRelease(*(CFTypeRef *)(a1 + 208));
      *(_QWORD *)(a1 + 208) = 0;
    }
    if (!v7)
    {
      mach_port_deallocate(*v5, *(_DWORD *)(a1 + 196));
      *(_DWORD *)(a1 + 196) = 0;
    }
    v10 = *(__CFMachPort **)(a1 + 200);
    if (v10)
    {
      CFMachPortInvalidate(v10);
      CFRelease(*(CFTypeRef *)(a1 + 200));
      *(_QWORD *)(a1 + 200) = 0;
    }
    if (!v6)
    {
      dispose_d2f_port(*v3);
      *v3 = 0;
    }
    if (FSEvents_connect())
    {
      v11 = fsevent_default_log();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        server_gone_StreamRef_callback_cold_4();
    }
    else if (allocate_d2f_port((uint64_t)"server_gone_StreamRef_callback", a1))
    {
      v12 = fsevent_default_log();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        server_gone_StreamRef_callback_cold_3();
    }
    else
    {
      v13 = (int *)(a1 + 196);
      v14 = register_with_server(a1, (uint64_t)"server_gone_StreamRef_callback", *(_DWORD *)(a1 + 192), *(_DWORD *)(a1 + 64), *(_DWORD *)(a1 + 72), *(const void ***)(a1 + 80), -1, *(_QWORD *)(a1 + 176), *(_DWORD *)(a1 + 184), (_DWORD *)(a1 + 196));
      if (v14)
      {
        v15 = v14;
        v16 = fsevent_default_log();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          server_gone_StreamRef_callback_cold_2(v13, v15, v16);
      }
      else
      {
        v17 = CFNumberCreate(v2, kCFNumberIntType, (const void *)(a1 + 192));
        pthread_mutex_lock(&FSEvents_streamDict_mutex);
        CFDictionaryAddValue((CFMutableDictionaryRef)FSEvents_streamDict, v17, (const void *)a1);
        pthread_mutex_unlock(&FSEvents_streamDict_mutex);
        CFRelease(v17);
        if (v6)
        {
          if (create_d2f_port_source(a1))
            resume_source(*(NSObject **)(a1 + 360), (int *)(a1 + 368));
          if (create_f2d_private_port_source(a1))
            resume_source(*(NSObject **)(a1 + 376), (int *)(a1 + 384));
        }
        else if (*(_QWORD *)(a1 + 224))
        {
          context.version = 0;
          context.info = (void *)a1;
          context.retain = (const void *(__cdecl *)(const void *))_FSEventStreamRetainAndReturnSelf;
          context.release = (void (__cdecl *)(const void *))FSEventStreamRelease;
          context.copyDescription = (CFStringRef (__cdecl *)(const void *))FSEventStreamCopyDescription;
          v18 = CFMachPortCreateWithPort(0, *(_DWORD *)(a1 + 196), (CFMachPortCallBack)FSEventsClientPortCallback, &context, 0);
          *(_QWORD *)(a1 + 208) = v18;
          if (v18)
          {
            CFMachPortSetInvalidationCallBack(v18, (CFMachPortInvalidationCallBack)server_gone_callback);
            _createAndAddRunLoopSource((int)"server_gone_StreamRef_callback", a1, *(CFRunLoopRef *)(a1 + 224), *(CFRunLoopMode *)(a1 + 232));
          }
          else
          {
            v19 = fsevent_default_log();
            if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
              server_gone_StreamRef_callback_cold_1(v19, v20, v21, v22, v23, v24, v25, v26);
          }
        }
        FSEventStreamRetain((FSEventStreamRef)a1);
        if (*(uint64_t *)(a1 + 72) >= 1)
        {
          v27 = 0;
          do
            root_dir_event_callback(a1, v27++, 5);
          while (*(_QWORD *)(a1 + 72) > v27);
        }
        FSEventStreamRelease((FSEventStreamRef)a1);
      }
    }
  }
}

void root_dir_event_callback(uint64_t a1, int a2, int a3)
{
  void (*v3)(uint64_t, _QWORD, uint64_t, const char **, int *, _QWORD *);
  const char *v6;
  int v7;
  const __CFAllocator *v8;
  __CFString *v9;
  __CFString *v10;
  CFArrayRef v11;
  CFArrayRef v12;
  const __CFAllocator *v13;
  CFArrayRef v14;
  CFArrayRef v15;
  CFTypeRef v16;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  CFTypeRef cf;
  int v37;
  const char *v38;
  void *values;
  void *keys;
  _QWORD v41[2];

  v41[1] = *MEMORY[0x1E0C80C00];
  v3 = *(void (**)(uint64_t, _QWORD, uint64_t, const char **, int *, _QWORD *))(a1 + 16);
  if (!v3)
    return;
  v6 = caller_path(*(const char **)(*(_QWORD *)(a1 + 80) + 8 * a2), *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * a2));
  v38 = v6;
  v37 = a3;
  v41[0] = 0;
  v7 = *(_DWORD *)(a1 + 184);
  if ((v7 & 0x40) != 0)
  {
    v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v9 = (__CFString *)CFStringCreateWithFileSystemRepresentation((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v6);
    if (v9)
    {
      v10 = v9;
      values = v9;
      keys = CFSTR("path");
      cf = CFDictionaryCreate(v8, (const void **)&keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (cf)
      {
        v11 = CFArrayCreate(v8, &cf, 1, MEMORY[0x1E0C9B378]);
        if (v11)
        {
          v12 = v11;
          (*(void (**)(uint64_t, _QWORD, uint64_t, CFArrayRef, int *, _QWORD *))(a1 + 16))(a1, *(_QWORD *)(a1 + 32), 1, v11, &v37, v41);
          CFRelease(v12);
        }
        else
        {
          v20 = fsevent_default_log();
          if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
            root_dir_event_callback_cold_2(v20, v21, v22, v23, v24, v25, v26, v27);
        }
        CFRelease(cf);
      }
      else
      {
        v18 = fsevent_default_log();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          root_dir_event_callback_cold_4();
      }
      v16 = v10;
      goto LABEL_22;
    }
    v17 = fsevent_default_log();
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      return;
LABEL_13:
    root_dir_event_callback_cold_1();
    return;
  }
  if ((v7 & 1) == 0)
  {
    v3(a1, *(_QWORD *)(a1 + 32), 1, &v38, &v37, v41);
    return;
  }
  v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  cf = CFStringCreateWithFileSystemRepresentation((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v6);
  if (!cf)
  {
    v19 = fsevent_default_log();
    if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      return;
    goto LABEL_13;
  }
  v14 = CFArrayCreate(v13, &cf, 1, MEMORY[0x1E0C9B378]);
  if (v14)
  {
    v15 = v14;
    (*(void (**)(uint64_t, _QWORD, uint64_t, CFArrayRef, int *, _QWORD *))(a1 + 16))(a1, *(_QWORD *)(a1 + 32), 1, v14, &v37, v41);
    CFRelease(v15);
    v16 = cf;
LABEL_22:
    CFRelease(v16);
    return;
  }
  v28 = fsevent_default_log();
  if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    root_dir_event_callback_cold_2(v28, v29, v30, v31, v32, v33, v34, v35);
}

void __create_f2d_private_port_source_block_invoke(uint64_t a1)
{
  server_gone_StreamRef_callback(*(_QWORD *)(a1 + 32));
}

void __create_f2d_private_port_source_block_invoke_2(uint64_t a1)
{
  dispose_f2d_private_port(*(_DWORD *)(a1 + 48));
  dispatch_release(*(dispatch_object_t *)(a1 + 32));
  FSEventStreamRelease(*(FSEventStreamRef *)(a1 + 40));
}

void cancel_source(NSObject **a1, int *a2)
{
  NSObject *v4;

  v4 = *a1;
  if (v4)
  {
    dispatch_source_cancel(v4);
    resume_source(*a1, a2);
    *a1 = 0;
  }
  *a2 = 0;
}

uint64_t watch_all_parents(uint64_t a1, int kq, char *__s, uint64_t a4, uint64_t a5)
{
  void *v10;
  int v11;
  uint64_t i;
  char *v13;
  int v14;
  int v15;
  int v16;
  NSObject *v17;
  uint64_t result;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  NSObject *v23;
  int v24;
  int *v25;
  char *v26;
  kevent changelist;
  uint8_t buf[4];
  uint64_t v29;
  __int16 v30;
  const char *v31;
  __int16 v32;
  int v33;
  __int16 v34;
  char *v35;
  __int16 v36;
  char *v37;
  char __sa[1024];
  char v39[1024];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  memset(&changelist, 0, sizeof(changelist));
  v10 = *(void **)(a4 + 16);
  if (v10)
  {
    v11 = *(_DWORD *)(a4 + 8);
    if (v11 >= 1)
    {
      for (i = 0; i < v11; ++i)
      {
        if ((*(_DWORD *)(*(_QWORD *)(a4 + 16) + 4 * i) & 0x80000000) == 0)
        {
          changelist.ident = *(unsigned int *)(*(_QWORD *)(a4 + 16) + 4 * i);
          *(_QWORD *)&changelist.filter = 0x200002FFFCLL;
          changelist.data = 0;
          changelist.udata = (void *)(a5 | 0x80000000);
          kevent(kq, &changelist, 1, 0, 0, 0);
          close(*(_DWORD *)(*(_QWORD *)(a4 + 16) + 4 * i));
          v11 = *(_DWORD *)(a4 + 8);
        }
      }
      v10 = *(void **)(a4 + 16);
    }
    free(v10);
    *(_QWORD *)(a4 + 16) = 0;
    *(_DWORD *)(a4 + 8) = 0;
  }
  if (__s && *__s)
  {
    my_dirname(__s, __sa);
    v13 = v39;
    realpath_DARWIN_EXTSN(__sa, v39);
    v14 = 0;
    do
    {
      while (1)
      {
        v16 = *v13++;
        v15 = v16;
        if (v16 != 47)
          break;
        ++v14;
      }
    }
    while (v15);
    v19 = malloc_type_malloc(4 * v14, 0x100004052888210uLL);
    *(_QWORD *)(a4 + 16) = v19;
    if (v19)
    {
      v20 = 0;
      v21 = v14;
      *(_DWORD *)(a4 + 8) = v14;
      do
      {
        v22 = open(v39, 0x8000);
        *(_DWORD *)(*(_QWORD *)(a4 + 16) + 4 * v20) = v22;
        if ((v22 & 0x80000000) == 0)
        {
          fcntl(v22, 2, 1);
          changelist.ident = *(int *)(*(_QWORD *)(a4 + 16) + 4 * v20);
          *(_QWORD *)&changelist.filter = 0x200021FFFCLL;
          changelist.data = 0;
          changelist.udata = (void *)(a5 | 0x80000000);
          if (kevent(kq, &changelist, 1, 0, 0, 0) < 0)
          {
            v23 = fsevent_default_log();
            if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
            {
              v24 = *(_DWORD *)(*(_QWORD *)(a4 + 16) + 4 * v20);
              v25 = __error();
              v26 = strerror(*v25);
              *(_DWORD *)buf = 136316162;
              v29 = a1;
              v30 = 2080;
              v31 = "watch_all_parents";
              v32 = 1024;
              v33 = v24;
              v34 = 2080;
              v35 = v39;
              v36 = 2080;
              v37 = v26;
              _os_log_error_impl(&dword_182882000, v23, OS_LOG_TYPE_ERROR, "%s: %s: error trying to add kqueue for fd %d (%s; %s)",
                buf,
                0x30u);
            }
          }
        }
        __strcpy_chk();
        my_dirname(__sa, v39);
        result = 0;
        ++v20;
      }
      while (v20 < v21 && v39[1]);
    }
    else
    {
      return 12;
    }
  }
  else
  {
    v17 = fsevent_default_log();
    result = os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
    if ((_DWORD)result)
    {
      watch_all_parents_cold_1();
      return 0;
    }
  }
  return result;
}

uint64_t FSEventsClientProcessMessageCallback(uint64_t a1)
{
  _DWORD *v1;
  _BYTE v3[16384];
  uint64_t v4;

  MEMORY[0x1E0C80A78](a1);
  v4 = *MEMORY[0x1E0C80C00];
  return FSEventsD2F_server(v1, (uint64_t)v3);
}

void __create_d2f_port_source_block_invoke_2(uint64_t a1)
{
  dispose_d2f_port(*(_DWORD *)(a1 + 48));
  dispatch_release(*(dispatch_object_t *)(a1 + 32));
  FSEventStreamRelease(*(FSEventStreamRef *)(a1 + 40));
}

void OUTLINED_FUNCTION_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

void OUTLINED_FUNCTION_3(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_5(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

void OUTLINED_FUNCTION_6(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x1Cu);
}

void OUTLINED_FUNCTION_8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x12u);
}

void OUTLINED_FUNCTION_9(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x1Cu);
}

void OUTLINED_FUNCTION_14(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x26u);
}

void OUTLINED_FUNCTION_15(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x20u);
}

void OUTLINED_FUNCTION_20(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

char *OUTLINED_FUNCTION_24(int a1, mach_error_t error_value, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return mach_error_string(error_value);
}

char *OUTLINED_FUNCTION_25@<X0>(mach_error_t error_value@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 24) = a2;
  return mach_error_string(error_value);
}

void OUTLINED_FUNCTION_26(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x18u);
}

void OUTLINED_FUNCTION_27(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x30u);
}

void OUTLINED_FUNCTION_28(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x22u);
}

void FSEventStreamStart_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_182882000, v0, v1, "%s(): failed assertion '%s'\n", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_1();
}

void FSEventStreamStart_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_182882000, v0, v1, "%s(): failed assertion: %s\n", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_1();
}

void FSEventStreamStart_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_182882000, v0, v1, "%s(): failed assertion: %s\n", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_1();
}

void register_with_server_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0(&dword_182882000, v0, v1, "%s: %s: ERROR: array_of_path_lengths = malloc() failed", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_1();
}

void register_with_server_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0(&dword_182882000, v0, v1, "%s: %s: ERROR: array_of_path_offsets = malloc() failed", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_1();
}

void register_with_server_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0(&dword_182882000, v0, v1, "%s: %s: ERROR: paths_blob = malloc() failed", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_1();
}

void register_with_server_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  int v2;
  mach_error_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  _BYTE v11[24];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_24(v2, v3, v4, v5, v6, v7, v8, v9, *(uint64_t *)v11, *(uint64_t *)&v11[8], *(uint64_t *)&v11[16], v12, v13, v14);
  *(_DWORD *)v11 = 136315906;
  *(_QWORD *)&v11[4] = v1;
  OUTLINED_FUNCTION_4();
  *(_QWORD *)&v11[14] = "register_with_server";
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_14(&dword_182882000, v0, v10, "%s: %s: ERROR: f2d_register_rpc() => %s (%d)", v11);
  OUTLINED_FUNCTION_10();
}

void register_with_server_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_8(&dword_182882000, v0, v1, "%s:%d Insufficient Memory", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_1();
}

void register_with_server_cold_6()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_8(&dword_182882000, v0, v1, "%s:%d Insufficient Memory", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_1();
}

void register_with_server_cold_7()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_182882000, v0, v1, "%s(): failed assertion '%s'\n", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_1();
}

void _FSEventStreamRetainAndReturnSelf_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_182882000, v0, v1, "%s(): failed assertion '%s'\n", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_1();
}

void FSEventStreamRelease_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_182882000, v0, v1, "%s(): failed assertion '%s'\n", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_1();
}

void FSEventStreamRelease_cold_2(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_3(&dword_182882000, a1, a3, "%s: ERROR: over-released FSEventStreamRef", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

void FSEventStreamCopyDescription_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_182882000, v0, v1, "%s(): failed assertion '%s'\n", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_1();
}

void FSEventStreamCopyDescription_cold_2(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_3(&dword_182882000, a1, a3, "%s: ERROR: cStr = malloc() failed", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

void FSEventsClientPortCallback_cold_1(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_20(&dword_182882000, a1, a3, "FSEventsClientPortCallback should NOT be called!\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_33();
}

void FSEventStreamStop_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_182882000, v0, v1, "%s(): failed assertion '%s'\n", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_1();
}

void FSEventStreamStop_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_182882000, v0, v1, "%s(): failed assertion '%s'\n", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_1();
}

void dispose_f2d_private_port_cold_1(mach_error_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  mach_error_string(a1);
  OUTLINED_FUNCTION_18();
  OUTLINED_FUNCTION_28(&dword_182882000, v1, v2, "%s: ERROR: mach_port_deallocate(port = 0x%x) => %s (%d)", v3, v4, v5, v6, 2u);
  OUTLINED_FUNCTION_10();
}

void dispose_f2d_private_port_cold_2()
{
  mach_error_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_25(v0, *MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_6(&dword_182882000, v1, v2, "%s: ERROR: f2d_unregister_rpc() => %s (%d)", v3, v4, v5, v6, 2u);
  OUTLINED_FUNCTION_13();
}

void implementation_callback_rpc_cold_1(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_3(&dword_182882000, a1, a3, "FSEvents: %s: WARNING: num_paths == 0", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

void implementation_callback_rpc_cold_2(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_3(&dword_182882000, a1, a3, "%s: ERROR: CFNumberCreate() => NULL", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

void implementation_callback_rpc_cold_3(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_3(&dword_182882000, a1, a3, "%s: ERROR: CFDictionaryGetValue(FSEvents_streamDict, cfPortNumber) => NULL", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

void implementation_callback_rpc_cold_4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_3(&dword_182882000, a1, a3, "%s: ERROR: eventPaths = malloc() failed", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

void implementation_callback_rpc_cold_5(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_3(&dword_182882000, a1, a3, "%s: ERROR: pathFlags = malloc() failed", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

void implementation_callback_rpc_cold_6(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_3(&dword_182882000, a1, a3, "%s: ERROR: cfStringRef_eventPaths = calloc() failed", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

void implementation_callback_rpc_cold_7(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_3(&dword_182882000, a1, a3, "%s: ERROR: CFArrayCreate() failed", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

void implementation_callback_rpc_cold_8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_0(&dword_182882000, v0, v1, "%s: ERROR: CFStringCreateWithFileSystemRepresentation('%s') failed", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_1();
}

void implementation_callback_rpc_cold_9(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_3(&dword_182882000, a1, a3, "%s: ERROR: CFArrayCreateMutable() => NULL\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

void implementation_callback_rpc_cold_10(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_3(&dword_182882000, a1, a3, "%s: ERROR: CFDictionaryCreateMutable() => NULL\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

void implementation_callback_rpc_cold_11(uint8_t *a1, _QWORD *a2, NSObject *a3)
{
  *(_DWORD *)a1 = 136315138;
  *a2 = "implementation_callback_rpc";
  OUTLINED_FUNCTION_5(&dword_182882000, a3, (uint64_t)a3, "%s: ERROR: CFNumberCreate() => NULL\n", a1);
}

void implementation_callback_rpc_cold_13(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_3(&dword_182882000, a1, a3, "%s: ERROR: eventFlags = malloc() failed", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

void implementation_callback_rpc_cold_14(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_3(&dword_182882000, a1, a3, "%s: ERROR: eventIds = malloc() failed", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

void implementation_callback_rpc_cold_15()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_182882000, v0, v1, "%s(): failed assertion '%s'\n", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_1();
}

void implementation_callback_rpc_cold_16()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_182882000, v0, v1, "%s(): failed assertion '%s'\n", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_1();
}

void implementation_callback_rpc_cold_17()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_182882000, v0, v1, "%s(): failed assertion '%s'\n", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_1();
}

void implementation_callback_rpc_cold_18()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_182882000, v0, v1, "%s(): failed assertion '%s'\n", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_1();
}

void FSEventStreamRetain_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_182882000, v0, v1, "%s(): failed assertion '%s'\n", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_1();
}

void FSEventStreamGetLatestEventId_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_182882000, v0, v1, "%s(): failed assertion '%s'\n", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_1();
}

void FSEventStreamGetDeviceBeingWatched_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_182882000, v0, v1, "%s(): failed assertion '%s'\n", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_1();
}

void FSEventStreamCopyPathsBeingWatched_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_182882000, v0, v1, "%s(): failed assertion '%s'\n", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_1();
}

void FSEventStreamCopyPathsBeingWatched_cold_2(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_3(&dword_182882000, a1, a3, "%s: ERROR: calloc() failed", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

void FSEventStreamCopyPathsBeingWatched_cold_3(_QWORD *a1, uint64_t a2, os_log_t log)
{
  uint64_t v3;
  int v4;
  const char *v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(*a1 + 8 * a2);
  v4 = 136315394;
  v5 = "FSEventStreamCopyPathsBeingWatched";
  v6 = 2080;
  v7 = v3;
  _os_log_error_impl(&dword_182882000, log, OS_LOG_TYPE_ERROR, "%s: ERROR: CFStringCreateWithFileSystemRepresentation('%s') failed", (uint8_t *)&v4, 0x16u);
  OUTLINED_FUNCTION_1();
}

void FSEventStreamCopyPathsBeingWatched_cold_4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_3(&dword_182882000, a1, a3, "%s: ERROR: CFArrayCreate() failed", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

void _FSEventStreamCreate_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0(&dword_182882000, v0, v1, "%s: %s: ERROR: parameter error kFSEventStreamCreateFlagUseCFTypes requires  kFSEventStreamCreateFlagUseExtendedData", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_1();
}

void _FSEventStreamCreate_cold_2(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = 136315650;
  v3 = a1;
  v4 = 2080;
  v5 = "_FSEventStreamCreate";
  v6 = 2048;
  v7 = 456;
  _os_log_error_impl(&dword_182882000, a2, OS_LOG_TYPE_ERROR, "%s: %s: ERROR: could not allocate %lu bytes for FSEventStream", (uint8_t *)&v2, 0x20u);
  OUTLINED_FUNCTION_16();
}

void _FSEventStreamCreate_cold_3(uint64_t a1)
{
  uint64_t v1;
  os_log_t v2;
  __int128 v3;
  uint64_t v4;

  LODWORD(v3) = 136315650;
  *(_QWORD *)((char *)&v3 + 4) = a1;
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_22();
  OUTLINED_FUNCTION_15(&dword_182882000, v1, v2, "%s: %s: ERROR: could not allocate %lu bytes for array of path strings", (const char *)v3, DWORD2(v3), v4);
  OUTLINED_FUNCTION_16();
}

void _FSEventStreamCreate_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0(&dword_182882000, v0, v1, "%s: %s: ERROR: CFStringGetCString() failed", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_1();
}

void _FSEventStreamCreate_cold_5(uint64_t a1)
{
  int v1;
  NSObject *v2;
  int v3;
  uint64_t v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = 136315650;
  v4 = a1;
  OUTLINED_FUNCTION_4();
  v5 = "_FSEventStreamCreate";
  v6 = 1024;
  v7 = v1;
  OUTLINED_FUNCTION_9(&dword_182882000, v2, (uint64_t)v2, "%s: %s: ERROR: could not allocate %d bytes for path string (2)", (uint8_t *)&v3);
  OUTLINED_FUNCTION_16();
}

void _FSEventStreamCreate_cold_6(uint64_t a1, uint64_t a2)
{
  int v2;
  NSObject *v3;
  int v4;
  uint64_t v5;
  const char *v6;
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v4 = 136315650;
  v5 = a2;
  OUTLINED_FUNCTION_4();
  v6 = "_FSEventStreamCreate";
  v7 = 1024;
  v8 = v2;
  OUTLINED_FUNCTION_9(&dword_182882000, v3, (uint64_t)v3, "%s: %s: ERROR: (CFStringGetTypeID() != CFGetTypeID(cfStringRef)) (i = %d)\n", (uint8_t *)&v4);
  OUTLINED_FUNCTION_16();
}

void _FSEventStreamCreate_cold_7()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0(&dword_182882000, v0, v1, "%s: %s: ERROR: could not open kqueue ", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_1();
}

void _FSEventStreamCreate_cold_8(uint64_t a1)
{
  uint64_t v1;
  os_log_t v2;
  __int128 v3;
  uint64_t v4;

  LODWORD(v3) = 136315650;
  *(_QWORD *)((char *)&v3 + 4) = a1;
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_22();
  OUTLINED_FUNCTION_15(&dword_182882000, v1, v2, "%s: %s: ERROR: could not allocate %lu bytes for array of dir_info structs", (const char *)v3, DWORD2(v3), v4);
  OUTLINED_FUNCTION_16();
}

void _FSEventStreamCreate_cold_9(uint64_t a1)
{
  uint64_t v1;
  os_log_t v2;
  __int128 v3;
  uint64_t v4;

  LODWORD(v3) = 136315650;
  *(_QWORD *)((char *)&v3 + 4) = a1;
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_22();
  OUTLINED_FUNCTION_15(&dword_182882000, v1, v2, "%s: %s: ERROR: could not allocate %lu bytes for array of kevents", (const char *)v3, DWORD2(v3), v4);
  OUTLINED_FUNCTION_16();
}

void FSEventStreamCreateRelativeToDevice_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_182882000, v0, v1, "%s(): failed assertion '%s'\n", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_1();
}

void _FSEventStreamDeallocate_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_182882000, v0, v1, "%s(): failed assertion '%s'\n", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_1();
}

void _FSEventStreamDeallocate_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_182882000, v0, v1, "%s(): failed assertion: %s\n", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_1();
}

void _FSEventStreamDeallocate_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_182882000, v0, v1, "%s(): failed assertion: %s\n", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_1();
}

void _FSEventStreamDeallocate_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_182882000, v0, v1, "%s(): failed assertion '%s'\n", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_1();
}

void FSEventStreamScheduleWithRunLoop_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_182882000, v0, v1, "%s(): failed assertion '%s'\n", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_1();
}

void FSEventStreamScheduleWithRunLoop_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_182882000, v0, v1, "%s(): failed assertion '%s'\n", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_1();
}

void FSEventStreamScheduleWithRunLoop_cold_3(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_3(&dword_182882000, a1, a3, "%s: failed to create the cffd", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

void FSEventStreamScheduleWithRunLoop_cold_4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_3(&dword_182882000, a1, a3, "%s: failed to create the cffd run loop source!", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

void FSEventStreamScheduleWithRunLoop_cold_5()
{
  mach_error_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_25(v0, *MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_6(&dword_182882000, v1, v2, "%s: ERROR: _createAndAddRunLoopSource(...) => %s (%d)", v3, v4, v5, v6, 2u);
  OUTLINED_FUNCTION_13();
}

void FSEventStreamScheduleWithRunLoop_cold_6()
{
  mach_error_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_25(v0, *MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_6(&dword_182882000, v1, v2, "%s: ERROR: allocate_d2f_port(...) => %s (%d)", v3, v4, v5, v6, 2u);
  OUTLINED_FUNCTION_13();
}

void allocate_d2f_port_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  int v2;
  mach_error_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  _BYTE v11[24];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_24(v2, v3, v4, v5, v6, v7, v8, v9, *(uint64_t *)v11, *(uint64_t *)&v11[8], *(uint64_t *)&v11[16], v12, v13, v14);
  *(_DWORD *)v11 = 136315906;
  *(_QWORD *)&v11[4] = v1;
  OUTLINED_FUNCTION_4();
  *(_QWORD *)&v11[14] = "allocate_d2f_port";
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_14(&dword_182882000, v0, v10, "%s: %s: ERROR: mach_port_allocate() => %s (%d)", v11);
  OUTLINED_FUNCTION_10();
}

void _createAndAddRunLoopSource_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_182882000, v0, v1, "%s(): failed assertion '%s'\n", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_1();
}

void _createAndAddRunLoopSource_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0(&dword_182882000, v0, v1, "%s: %s: ERROR: CFMachPortCreateWithPort() => NULL", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_1();
}

void _createAndAddRunLoopSource_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0(&dword_182882000, v0, v1, "%s: %s: ERROR: CFMachPortCreateRunLoopSource() => NULL", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_1();
}

void _createAndAddRunLoopSource_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_182882000, v0, v1, "%s(): failed assertion '%s'\n", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_1();
}

void FSEventStreamUnscheduleFromRunLoop_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_182882000, v0, v1, "%s(): failed assertion '%s'\n", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_1();
}

void FSEventStreamUnscheduleFromRunLoop_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_182882000, v0, v1, "%s(): failed assertion '%s'\n", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_1();
}

void FSEventStreamUnscheduleFromRunLoop_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_182882000, v0, v1, "%s(): failed assertion: %s\n", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_1();
}

void FSEventStreamSetDispatchQueue_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_182882000, v0, v1, "%s(): failed assertion '%s'\n", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_1();
}

void FSEventStreamSetDispatchQueue_cold_2(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_20(&dword_182882000, a1, a3, "Failed to create a kq event source for the WatchRoot flag.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_33();
}

void FSEventStreamSetDispatchQueue_cold_3(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_3(&dword_182882000, a1, a3, "%s: ERROR: create_d2f_port_source() failed", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

void FSEventStreamSetDispatchQueue_cold_4()
{
  mach_error_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_25(v0, *MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_6(&dword_182882000, v1, v2, "%s: ERROR: allocate_d2f_port(...) => %s (%d)", v3, v4, v5, v6, 2u);
  OUTLINED_FUNCTION_13();
}

void process_dir_events_cold_1(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  strerror(a1);
  OUTLINED_FUNCTION_6(&dword_182882000, v1, v2, "%s: kevent returned %d (%s)", v3, v4, v5, v6, 2u);
  OUTLINED_FUNCTION_13();
}

void FSEventStreamFlushAsync_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_182882000, v0, v1, "%s(): failed assertion '%s'\n", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_1();
}

void FSEventStreamFlushAsync_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_182882000, v0, v1, "%s(): failed assertion: %s\n", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_1();
}

void FSEventStreamFlushAsync_cold_3()
{
  mach_error_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_25(v0, *MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_6(&dword_182882000, v1, v2, "%s: ERROR: f2d_flush_rpc() => %s (%d)", v3, v4, v5, v6, 2u);
  OUTLINED_FUNCTION_13();
}

void FSEventStreamFlushSync_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_182882000, v0, v1, "%s(): failed assertion '%s'\n", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_1();
}

void FSEventStreamFlushSync_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_182882000, v0, v1, "%s(): failed assertion '%s'\n", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_1();
}

void FSEventStreamFlushSync_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_182882000, v0, v1, "%s(): failed assertion '%s'\n", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_1();
}

void FSEventStreamFlushSync_cold_5()
{
  __int16 v0;
  int v1;
  NSObject *v2;
  uint64_t v3;
  _WORD v4[10];
  int v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)v4 = 136315650;
  OUTLINED_FUNCTION_23();
  *(_DWORD *)&v4[7] = 3370;
  v4[9] = v0;
  v5 = v1;
  OUTLINED_FUNCTION_26(&dword_182882000, v2, v3, "%s:%d: error waiting on the dispatch_cond (%d)\n", (uint8_t *)v4);
  OUTLINED_FUNCTION_1();
}

void FSEventStreamFlushSync_cold_6()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_182882000, v0, v1, "%s(): failed assertion '%s'\n", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_1();
}

void FSEventStreamFlushSync_cold_7()
{
  NSObject *v0;
  uint64_t v1;
  int v2;
  mach_error_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  _BYTE v11[24];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_24(v2, v3, v4, v5, v6, v7, v8, v9, *(uint64_t *)v11, *(uint64_t *)&v11[8], *(uint64_t *)&v11[16], v12, v13, v14);
  *(_DWORD *)v11 = 136315906;
  *(_QWORD *)&v11[4] = "FSEventStreamFlushSync";
  *(_WORD *)&v11[12] = 2048;
  *(_QWORD *)&v11[14] = v1;
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_14(&dword_182882000, v0, v10, "%s(streamRef = %p): ERROR: f2d_flush_rpc() => %s (%d)", v11);
  OUTLINED_FUNCTION_10();
}

void FSEventStreamFlushSync_cold_8()
{
  __int16 v0;
  int v1;
  NSObject *v2;
  uint64_t v3;
  _WORD v4[10];
  int v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)v4 = 136315650;
  OUTLINED_FUNCTION_23();
  *(_DWORD *)&v4[7] = 3329;
  v4[9] = v0;
  v5 = v1;
  OUTLINED_FUNCTION_26(&dword_182882000, v2, v3, "%s:%d: error waiting on the dispatch_cond (%d)\n", (uint8_t *)v4);
  OUTLINED_FUNCTION_1();
}

void _runRunLoopOnceForFlushSync_cold_1()
{
  NSObject *v0;
  uint8_t v1[34];
  int v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_29();
  OUTLINED_FUNCTION_32();
  v2 = 1;
  OUTLINED_FUNCTION_14(&dword_182882000, v0, (uint64_t)v0, "%s(streamRef = %p): ERROR: CFRunLoopRunInMode() => %s (%d)", v1);
  OUTLINED_FUNCTION_16();
}

void _runRunLoopOnceForFlushSync_cold_2()
{
  NSObject *v0;
  uint8_t v1[34];
  int v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_29();
  OUTLINED_FUNCTION_32();
  v2 = 2;
  OUTLINED_FUNCTION_14(&dword_182882000, v0, (uint64_t)v0, "%s(streamRef = %p): ERROR: CFRunLoopRunInMode() => %s (%d)", v1);
  OUTLINED_FUNCTION_16();
}

void FSEventStreamInvalidate_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_182882000, v0, v1, "%s(): failed assertion '%s'\n", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_1();
}

void FSEventStreamInvalidate_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_182882000, v0, v1, "%s(): failed assertion: %s\n", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_1();
}

void FSEventStreamInvalidate_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_182882000, v0, v1, "%s(): failed assertion: %s\n", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_1();
}

void dispose_d2f_port_cold_1(mach_error_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  mach_error_string(a1);
  OUTLINED_FUNCTION_18();
  OUTLINED_FUNCTION_28(&dword_182882000, v1, v2, "%s: ERROR: mach_port_mod_refs(port = 0x%x, MACH_PORT_RIGHT_RECEIVE, -1) => %s (%d)", v3, v4, v5, v6, 2u);
  OUTLINED_FUNCTION_10();
}

void FSEvents_connect_cold_1()
{
  kern_return_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_21();
  bootstrap_strerror(v0);
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_6(&dword_182882000, v1, v2, "%s: ERROR: FSEvents_connect() => %s (%d)", v3, v4, v5, v6, 2u);
  OUTLINED_FUNCTION_10();
}

void FSEventsCopyUUIDForDevice_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_182882000, v0, v1, "%s(): failed assertion '%s'\n", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_1();
}

void FSEventsPurgeEventsForDeviceUpToEventId_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_12();
  OUTLINED_FUNCTION_8(&dword_182882000, v0, v1, "%s: f2d_purge_events_for_device_up_to_event_id_rpc() failed: %d", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_1();
}

void server_gone_StreamRef_callback_cold_1(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_20(&dword_182882000, a1, a3, "server_gone_callback: failed to create the clientmachportref!\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_33();
}

void server_gone_StreamRef_callback_cold_2(int *a1, int a2, NSObject *a3)
{
  int v3;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  v4 = 136315650;
  v5 = "server_gone_StreamRef_callback";
  v6 = 1024;
  v7 = a2;
  v8 = 1024;
  v9 = v3;
  OUTLINED_FUNCTION_26(&dword_182882000, a3, (uint64_t)a3, "%s: re-registering with server failed and returned %d (f2d port %u)", (uint8_t *)&v4);
  OUTLINED_FUNCTION_1();
}

void server_gone_StreamRef_callback_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_12();
  OUTLINED_FUNCTION_8(&dword_182882000, v0, v1, "%s: re-allocating d2f port failed and returned %d", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_1();
}

void server_gone_StreamRef_callback_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_12();
  OUTLINED_FUNCTION_8(&dword_182882000, v0, v1, "%s: failed to reconnect to server! (kr 0x%x)", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_1();
}

void root_dir_event_callback_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_0(&dword_182882000, v0, v1, "%s: ERROR: CFStringCreateWithFileSystemRepresentation('%s') failed", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_1();
}

void root_dir_event_callback_cold_2(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_3(&dword_182882000, a1, a3, "%s: ERROR: CFArrayCreate() failed", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

void root_dir_event_callback_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_0(&dword_182882000, v0, v1, "%s: ERROR: CFDictionaryCreate('%s') failed", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_1();
}

void watch_path_cold_1()
{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  __error();
  v0 = __error();
  strerror(*v0);
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_27(&dword_182882000, v1, v2, "%s: %s:2: open('%s', O_RDONLY) failed <3>, errno = %d (%s)", v3, v4, v5, v6, 2u);
  OUTLINED_FUNCTION_30();
}

void watch_path_cold_2()
{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  __error();
  v0 = __error();
  strerror(*v0);
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_27(&dword_182882000, v1, v2, "%s: %s:2: open('%s', O_RDONLY) failed <2>, errno = %d (%s)", v3, v4, v5, v6, 2u);
  OUTLINED_FUNCTION_30();
}

void watch_path_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_0(&dword_182882000, v0, v1, "%s: watching path(%s) renamed and revalidated after watchroot registration", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_1();
}

void watch_all_parents_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0(&dword_182882000, v0, v1, "%s: %s: empty watchpath", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_1();
}

void receive_and_dispatch_rcv_msg_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_12();
  OUTLINED_FUNCTION_8(&dword_182882000, v0, v1, "%s: mach_msg <2> - err (%d)", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_1();
}

void receive_and_dispatch_rcv_msg_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_12();
  OUTLINED_FUNCTION_8(&dword_182882000, v0, v1, "%s: mach_msg <1> - err (%d)", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_1();
}

uint64_t f2d_flush_rpc(int a1, _QWORD *a2)
{
  mach_port_name_t special_reply_port;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  _BYTE msg[36];
  __int128 v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v10 = 0u;
  *(_OWORD *)&msg[20] = 0u;
  *(_DWORD *)&msg[4] = 0;
  special_reply_port = mig_get_special_reply_port();
  *(_DWORD *)&msg[8] = a1;
  *(_DWORD *)&msg[12] = special_reply_port;
  *(_DWORD *)msg = 5395;
  *(_QWORD *)&msg[16] = 0x101D100000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
    special_reply_port = *(_DWORD *)&msg[12];
  }
  v5 = mach_msg((mach_msg_header_t *)msg, 3162115, 0x18u, 0x34u, special_reply_port, 0, 0);
  v6 = v5;
  if ((v5 - 268435458) > 0xE || ((1 << (v5 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v5)
    {
      if (*(_DWORD *)&msg[20] == 71)
      {
        v6 = 4294966988;
      }
      else if (*(_DWORD *)&msg[20] == 66101)
      {
        if ((*(_DWORD *)msg & 0x80000000) == 0)
        {
          if (*(_DWORD *)&msg[4] == 44)
          {
            if (!*(_DWORD *)&msg[8])
            {
              v6 = *(unsigned int *)&msg[32];
              if (!*(_DWORD *)&msg[32])
              {
                *a2 = v10;
                return v6;
              }
              goto LABEL_22;
            }
          }
          else if (*(_DWORD *)&msg[4] == 36)
          {
            if (*(_DWORD *)&msg[8])
              v7 = 1;
            else
              v7 = *(_DWORD *)&msg[32] == 0;
            if (v7)
              v6 = 4294966996;
            else
              v6 = *(unsigned int *)&msg[32];
            goto LABEL_22;
          }
        }
        v6 = 4294966996;
      }
      else
      {
        v6 = 4294966995;
      }
LABEL_22:
      mach_msg_destroy((mach_msg_header_t *)msg);
      return v6;
    }
    mig_dealloc_special_reply_port();
  }
  return v6;
}

uint64_t f2d_get_server_uuid_rpc(int a1, int a2, uint64_t a3)
{
  mach_port_name_t special_reply_port;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  __int128 v10;
  _BYTE msg[36];
  __int128 v12;
  _BYTE v13[28];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)&msg[20] = 0u;
  memset(v13, 0, sizeof(v13));
  v12 = 0u;
  *(_OWORD *)&msg[4] = 0u;
  *(_QWORD *)&msg[24] = *MEMORY[0x1E0C804E8];
  *(_DWORD *)&msg[32] = a2;
  special_reply_port = mig_get_special_reply_port();
  *(_DWORD *)&msg[8] = a1;
  *(_DWORD *)&msg[12] = special_reply_port;
  *(_DWORD *)msg = 5395;
  *(_QWORD *)&msg[16] = 0x101D200000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
    special_reply_port = *(_DWORD *)&msg[12];
  }
  v6 = mach_msg((mach_msg_header_t *)msg, 3162115, 0x24u, 0x50u, special_reply_port, 0, 0);
  v7 = v6;
  if ((v6 - 268435458) > 0xE || ((1 << (v6 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v6)
    {
      if (*(_DWORD *)&msg[20] == 71)
      {
        v7 = 4294966988;
      }
      else if (*(_DWORD *)&msg[20] == 66102)
      {
        if ((*(_DWORD *)msg & 0x80000000) == 0)
        {
          if (*(_DWORD *)&msg[4] == 72)
          {
            if (!*(_DWORD *)&msg[8])
            {
              v7 = *(unsigned int *)&msg[32];
              if (!*(_DWORD *)&msg[32])
              {
                v10 = *(_OWORD *)v13;
                *(_OWORD *)a3 = v12;
                *(_OWORD *)(a3 + 16) = v10;
                *(_DWORD *)(a3 + 32) = *(_DWORD *)&v13[16];
                return v7;
              }
              goto LABEL_22;
            }
          }
          else if (*(_DWORD *)&msg[4] == 36)
          {
            if (*(_DWORD *)&msg[8])
              v8 = 1;
            else
              v8 = *(_DWORD *)&msg[32] == 0;
            if (v8)
              v7 = 4294966996;
            else
              v7 = *(unsigned int *)&msg[32];
            goto LABEL_22;
          }
        }
        v7 = 4294966996;
      }
      else
      {
        v7 = 4294966995;
      }
LABEL_22:
      mach_msg_destroy((mach_msg_header_t *)msg);
      return v7;
    }
    mig_dealloc_special_reply_port();
  }
  return v7;
}

uint64_t f2d_get_current_event_id_rpc(int a1, _QWORD *a2)
{
  mach_port_name_t special_reply_port;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  _BYTE msg[36];
  __int128 v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v10 = 0u;
  *(_OWORD *)&msg[20] = 0u;
  *(_DWORD *)&msg[4] = 0;
  special_reply_port = mig_get_special_reply_port();
  *(_DWORD *)&msg[8] = a1;
  *(_DWORD *)&msg[12] = special_reply_port;
  *(_DWORD *)msg = 5395;
  *(_QWORD *)&msg[16] = 0x101D300000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
    special_reply_port = *(_DWORD *)&msg[12];
  }
  v5 = mach_msg((mach_msg_header_t *)msg, 3162115, 0x18u, 0x34u, special_reply_port, 0, 0);
  v6 = v5;
  if ((v5 - 268435458) > 0xE || ((1 << (v5 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v5)
    {
      if (*(_DWORD *)&msg[20] == 71)
      {
        v6 = 4294966988;
      }
      else if (*(_DWORD *)&msg[20] == 66103)
      {
        if ((*(_DWORD *)msg & 0x80000000) == 0)
        {
          if (*(_DWORD *)&msg[4] == 44)
          {
            if (!*(_DWORD *)&msg[8])
            {
              v6 = *(unsigned int *)&msg[32];
              if (!*(_DWORD *)&msg[32])
              {
                *a2 = v10;
                return v6;
              }
              goto LABEL_22;
            }
          }
          else if (*(_DWORD *)&msg[4] == 36)
          {
            if (*(_DWORD *)&msg[8])
              v7 = 1;
            else
              v7 = *(_DWORD *)&msg[32] == 0;
            if (v7)
              v6 = 4294966996;
            else
              v6 = *(unsigned int *)&msg[32];
            goto LABEL_22;
          }
        }
        v6 = 4294966996;
      }
      else
      {
        v6 = 4294966995;
      }
LABEL_22:
      mach_msg_destroy((mach_msg_header_t *)msg);
      return v6;
    }
    mig_dealloc_special_reply_port();
  }
  return v6;
}

uint64_t f2d_get_last_event_for_device_before_time_rpc(int a1, int a2, uint64_t a3, _QWORD *a4)
{
  mach_port_name_t special_reply_port;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  _BYTE msg[36];
  __int128 v12;

  *(_OWORD *)&msg[20] = 0u;
  v12 = 0u;
  *(_OWORD *)&msg[4] = 0u;
  *(_QWORD *)&msg[24] = *MEMORY[0x1E0C804E8];
  *(_DWORD *)&msg[32] = a2;
  *(_QWORD *)&v12 = a3;
  special_reply_port = mig_get_special_reply_port();
  *(_DWORD *)&msg[8] = a1;
  *(_DWORD *)&msg[12] = special_reply_port;
  *(_DWORD *)msg = 5395;
  *(_QWORD *)&msg[16] = 0x101D400000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
    special_reply_port = *(_DWORD *)&msg[12];
  }
  v7 = mach_msg((mach_msg_header_t *)msg, 3162115, 0x2Cu, 0x34u, special_reply_port, 0, 0);
  v8 = v7;
  if ((v7 - 268435458) > 0xE || ((1 << (v7 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v7)
    {
      if (*(_DWORD *)&msg[20] == 71)
      {
        v8 = 4294966988;
      }
      else if (*(_DWORD *)&msg[20] == 66104)
      {
        if ((*(_DWORD *)msg & 0x80000000) == 0)
        {
          if (*(_DWORD *)&msg[4] == 44)
          {
            if (!*(_DWORD *)&msg[8])
            {
              v8 = *(unsigned int *)&msg[32];
              if (!*(_DWORD *)&msg[32])
              {
                *a4 = v12;
                return v8;
              }
              goto LABEL_22;
            }
          }
          else if (*(_DWORD *)&msg[4] == 36)
          {
            if (*(_DWORD *)&msg[8])
              v9 = 1;
            else
              v9 = *(_DWORD *)&msg[32] == 0;
            if (v9)
              v8 = 4294966996;
            else
              v8 = *(unsigned int *)&msg[32];
            goto LABEL_22;
          }
        }
        v8 = 4294966996;
      }
      else
      {
        v8 = 4294966995;
      }
LABEL_22:
      mach_msg_destroy((mach_msg_header_t *)msg);
      return v8;
    }
    mig_dealloc_special_reply_port();
  }
  return v8;
}

uint64_t f2d_purge_events_for_device_up_to_event_id_rpc(int a1, int a2, uint64_t a3, _DWORD *a4)
{
  mach_port_name_t special_reply_port;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v11;
  _BYTE rcv_name[44];

  memset(&rcv_name[16], 0, 28);
  *(_OWORD *)rcv_name = 0u;
  *(_QWORD *)&rcv_name[20] = *MEMORY[0x1E0C804E8];
  *(_DWORD *)&rcv_name[28] = a2;
  *(_QWORD *)&rcv_name[32] = a3;
  special_reply_port = mig_get_special_reply_port();
  *(_DWORD *)&rcv_name[4] = a1;
  *(_DWORD *)&rcv_name[8] = special_reply_port;
  v11 = 5395;
  *(_QWORD *)&rcv_name[12] = 0x101D500000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set((mach_msg_header_t *)&v11);
    special_reply_port = *(_DWORD *)&rcv_name[8];
  }
  v7 = mach_msg((mach_msg_header_t *)&v11, 3162115, 0x2Cu, 0x30u, special_reply_port, 0, 0);
  v8 = v7;
  if ((v7 - 268435458) > 0xE || ((1 << (v7 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v7)
    {
      if (*(_DWORD *)&rcv_name[16] == 71)
      {
        v8 = 4294966988;
      }
      else if (*(_DWORD *)&rcv_name[16] == 66105)
      {
        if ((v11 & 0x80000000) == 0)
        {
          if (*(_DWORD *)rcv_name == 40)
          {
            if (!*(_DWORD *)&rcv_name[4])
            {
              v8 = *(unsigned int *)&rcv_name[28];
              if (!*(_DWORD *)&rcv_name[28])
              {
                *a4 = *(_DWORD *)&rcv_name[32];
                return v8;
              }
              goto LABEL_22;
            }
          }
          else if (*(_DWORD *)rcv_name == 36)
          {
            if (*(_DWORD *)&rcv_name[4])
              v9 = 1;
            else
              v9 = *(_DWORD *)&rcv_name[28] == 0;
            if (v9)
              v8 = 4294966996;
            else
              v8 = *(unsigned int *)&rcv_name[28];
            goto LABEL_22;
          }
        }
        v8 = 4294966996;
      }
      else
      {
        v8 = 4294966995;
      }
LABEL_22:
      mach_msg_destroy((mach_msg_header_t *)&v11);
      return v8;
    }
    mig_dealloc_special_reply_port();
  }
  return v8;
}

uint64_t f2d_unregister_rpc(int a1)
{
  mach_port_name_t special_reply_port;
  uint64_t v3;
  uint64_t v4;
  _BYTE msg[36];
  uint64_t v7;

  v7 = 0;
  *(_OWORD *)&msg[20] = 0u;
  *(_DWORD *)&msg[4] = 0;
  special_reply_port = mig_get_special_reply_port();
  *(_DWORD *)&msg[8] = a1;
  *(_DWORD *)&msg[12] = special_reply_port;
  *(_DWORD *)msg = 5395;
  *(_QWORD *)&msg[16] = 0x101D600000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
    special_reply_port = *(_DWORD *)&msg[12];
  }
  v3 = mach_msg((mach_msg_header_t *)msg, 3162115, 0x18u, 0x2Cu, special_reply_port, 0, 0);
  v4 = v3;
  if ((v3 - 268435458) > 0xE || ((1 << (v3 - 2)) & 0x4003) == 0)
  {
    if ((_DWORD)v3)
    {
      mig_dealloc_special_reply_port();
      return v4;
    }
    if (*(_DWORD *)&msg[20] == 71)
    {
      v4 = 4294966988;
    }
    else if (*(_DWORD *)&msg[20] == 66106)
    {
      v4 = 4294966996;
      if ((*(_DWORD *)msg & 0x80000000) == 0 && *(_DWORD *)&msg[4] == 36 && !*(_DWORD *)&msg[8])
      {
        v4 = *(unsigned int *)&msg[32];
        if (!*(_DWORD *)&msg[32])
          return v4;
      }
    }
    else
    {
      v4 = 4294966995;
    }
    mach_msg_destroy((mach_msg_header_t *)msg);
  }
  return v4;
}

CFTypeRef _XCFRetain(int a1, CFTypeRef cf)
{
  void *v4;
  void *v5;

  if (!cf)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "const void *_XCFRetain(CFAllocatorRef, const void *)");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("CFUtils.m"), 26, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("ptr != NULL"));

  }
  return CFRetain(cf);
}

void _XCFRelease(int a1, CFTypeRef cf)
{
  void *v3;
  void *v4;

  if (!cf)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _XCFRelease(CFAllocatorRef, const void *)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("CFUtils.m"), 37, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("ptr != NULL"));

  }
  CFRelease(cf);
}

uint64_t _XCFStringHashCaseInsensitive(const __CFString *a1)
{
  const char *CStringPtr;
  unsigned __int8 *v3;
  unsigned int v4;
  CFTypeID v6;
  CFIndex Length;
  uint64_t v8;
  NSObject *v9;
  __int128 v10;
  void *v11[2];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  CStringPtr = CFStringGetCStringPtr(a1, 0x8000100u);
  if (CStringPtr)
  {
    v3 = (unsigned __int8 *)CStringPtr;
    v4 = strlen(CStringPtr);
    return _XCFHash8BitCaseInsensitive(v3, v4);
  }
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  *(_OWORD *)v11 = 0u;
  if (!a1 || (v6 = CFGetTypeID(a1), v6 != CFStringGetTypeID()))
  {
    *(_QWORD *)&v10 = (char *)&v11[1] + 4;
    DWORD2(v10) = 0;
    LODWORD(v11[1]) = 127;
    v11[0] = 0;
    BYTE4(v11[1]) = 0;
    goto LABEL_9;
  }
  Length = CFStringGetLength(a1);
  if (!XCFBufInitWithCFStringRange((uint64_t)&v10, a1, 0, Length, 0))
  {
LABEL_9:
    _LSDefaultLog();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      _XCFStringHashCaseInsensitive_cold_1(v9);

    return 0;
  }
  v8 = _XCFHash8BitCaseInsensitive((unsigned __int8 *)v10, DWORD2(v10));
  if (v11[0])
    free(v11[0]);
  return v8;
}

CFArrayRef XCFArrayCreateWithSet(const __CFAllocator *a1, CFSetRef theSet, const CFArrayCallBacks *a3)
{
  unint64_t Count;
  CFIndex v7;
  const void **v8;
  CFArrayRef v9;
  _OWORD v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  Count = CFSetGetCount(theSet);
  v7 = Count;
  v8 = (const void **)v11;
  if (Count >= 0x101)
    v8 = (const void **)malloc_type_malloc(8 * Count, 0x80040B8603338uLL);
  memset(v11, 0, 512);
  CFSetGetValues(theSet, v8);
  v9 = CFArrayCreate(a1, v8, v7, a3);
  if (v8 != (const void **)v11)
    free(v8);
  return v9;
}

CFSetRef XCFSetCreateWithArray(const __CFAllocator *a1, CFArrayRef theArray, const CFSetCallBacks *a3)
{
  unint64_t Count;
  CFIndex v7;
  const void **v8;
  CFSetRef v9;
  _OWORD v11[128];
  uint64_t v12;
  CFRange v13;

  v12 = *MEMORY[0x1E0C80C00];
  Count = CFArrayGetCount(theArray);
  v7 = Count;
  v8 = (const void **)v11;
  if (Count >= 0x101)
    v8 = (const void **)malloc_type_malloc(8 * Count, 0x80040B8603338uLL);
  memset(v11, 0, 512);
  v13.location = 0;
  v13.length = v7;
  CFArrayGetValues(theArray, v13, v8);
  v9 = CFSetCreate(a1, v8, v7, a3);
  if (v8 != (const void **)v11)
    free(v8);
  return v9;
}

CFNumberRef XCFNumberCreateWithHFSTypeAndCreatorCodes(unsigned int a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t valuePtr;

  if (a2 == 1061109567)
    v2 = 0;
  else
    v2 = a2;
  if (a1 == 1061109567)
    v3 = 0;
  else
    v3 = a1;
  valuePtr = v3 | (v2 << 32);
  return CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, &valuePtr);
}

const __CFNumber *XCFNumberGetHFSTypeAndCreatorCodes(const __CFNumber *result, int *a2, int *a3)
{
  int v5;
  int v6;
  uint64_t valuePtr;

  if (result)
  {
    valuePtr = 0;
    result = (const __CFNumber *)CFNumberGetValue(result, kCFNumberSInt64Type, &valuePtr);
    if (a2)
    {
      v5 = valuePtr;
      if (!(_DWORD)valuePtr)
        v5 = 1061109567;
      *a2 = v5;
    }
    if (a3)
    {
      v6 = HIDWORD(valuePtr);
      if (!HIDWORD(valuePtr))
        v6 = 1061109567;
      *a3 = v6;
    }
  }
  return result;
}

CFURLRef XCFBundleCopyFolderURL(__CFBundle *a1, const __CFString *a2)
{
  CFURLRef result;
  const __CFURL *v5;
  const __CFAllocator *v6;
  CFURLRef v7;

  result = CFBundleCopySupportFilesDirectoryURL(a1);
  if (result)
  {
    v5 = result;
    v6 = CFGetAllocator(a1);
    v7 = CFURLCreateWithString(v6, a2, v5);
    CFRelease(v5);
    return v7;
  }
  return result;
}

CFStringRef XCFURLCopyRelativeFileSystemPath(const __CFURL *a1, const __CFURL *a2, CFURLPathStyle a3)
{
  const __CFURL *v6;
  CFStringRef Copy;
  const __CFString *v8;
  const __CFURL *v9;
  int v10;
  const __CFString *v11;
  CFIndex Length;
  CFIndex v13;
  const __CFString *v14;
  CFIndex v15;
  const __CFAllocator *v17;
  const __CFString *v18;
  const __CFAllocator *v19;
  __CFString *MutableCopy;
  const __CFString *v21;
  CFRange v22;
  CFRange v23;

  v6 = CFURLCopyAbsoluteURL(a1);
  Copy = (CFStringRef)v6;
  if (v6)
  {
    v8 = CFURLCopyFileSystemPath(v6, a3);
    CFRelease(Copy);
    if (v8)
    {
      v9 = CFURLCopyAbsoluteURL(a2);
      Copy = (CFStringRef)v9;
      if (v9)
      {
        v10 = CFURLHasDirectoryPath(v9);
        v11 = CFURLCopyFileSystemPath((CFURLRef)Copy, a3);
        CFRelease(Copy);
        Length = CFStringGetLength(v8);
        v13 = CFStringGetLength(v11);
        if (Length <= v13)
        {
          v15 = v13;
          v22.location = 0;
          v22.length = Length;
          Copy = 0;
          if (CFStringCompareWithOptions(v11, v8, v22, 0) == kCFCompareEqualTo)
          {
            if (v15 > Length && CFStringGetCharacterAtIndex(v11, Length) == 47)
              ++Length;
            v17 = CFGetAllocator(a1);
            v23.length = v15 - Length;
            v23.location = Length;
            v18 = CFStringCreateWithSubstring(v17, v11, v23);
            Copy = v18;
            if (v10)
            {
              if (!CFStringHasSuffix(v18, CFSTR("/")))
              {
                v19 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
                MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, Copy);
                if (MutableCopy)
                {
                  v21 = MutableCopy;
                  CFStringAppend(MutableCopy, CFSTR("/"));
                  CFRelease(Copy);
                  Copy = CFStringCreateCopy(v19, v21);
                  CFRelease(v21);
                }
              }
            }
          }
        }
        else
        {
          Copy = 0;
        }
        CFRelease(v8);
        v14 = v11;
      }
      else
      {
        v14 = v8;
      }
      CFRelease(v14);
    }
    else
    {
      return 0;
    }
  }
  return Copy;
}

void XCFURLEnumerate(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7;
  void (**v8)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v9;
  const void *v10;
  uint64_t v11;
  NSObject *v12;
  void *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  uint64_t v20;
  char v21;
  uint8_t buf[4];
  uint64_t v23;
  __int16 v24;
  id v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v7 = a4;
  v8 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v7;
  if (a1)
  {
    if (v7)
      goto LABEL_3;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void XCFURLEnumerate(CFURLRef, CFURLEnumeratorOptions, CFArrayRef, void (^__strong)(CFURLEnumeratorRef, CFURLRef, CFErrorRef, Boolean *))");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "handleFailureInFunction:file:lineNumber:description:", v16, CFSTR("CFUtils.m"), 732, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("inURL != nil"));

    if (v8)
      goto LABEL_3;
  }
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void XCFURLEnumerate(CFURLRef, CFURLEnumeratorOptions, CFArrayRef, void (^__strong)(CFURLEnumeratorRef, CFURLRef, CFErrorRef, Boolean *))");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "handleFailureInFunction:file:lineNumber:description:", v18, CFSTR("CFUtils.m"), 733, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("inBlock != nil"));

LABEL_3:
  v9 = MEMORY[0x186DAD570](*MEMORY[0x1E0C9AE00], a1, a2, a3);
  if (v9)
  {
    v10 = (const void *)v9;
    v21 = 0;
    do
    {
      v19 = 0;
      v20 = 0;
      v11 = MEMORY[0x186DAD57C](v10, &v20, &v19);
      switch(v11)
      {
        case 1:
          ((void (**)(_QWORD, const void *, uint64_t, _QWORD, char *))v8)[2](v8, v10, v20, 0, &v21);
          break;
        case 2:
          v21 = 1;
          break;
        case 3:
          _LSDefaultLog();
          v12 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138478083;
            v23 = a1;
            v24 = 2114;
            v25 = v19;
            _os_log_error_impl(&dword_182882000, v12, OS_LOG_TYPE_ERROR, "Error (non-fatal) enumerating %{private}@: %{public}@", buf, 0x16u);
          }

          ((void (**)(_QWORD, const void *, _QWORD, id, char *))v8)[2](v8, v10, 0, v19, &v21);
          break;
        case 4:
          break;
        default:
          v13 = (void *)v11;
          _LSDefaultLog();
          v14 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 138478083;
            v23 = a1;
            v24 = 2048;
            v25 = v13;
            _os_log_debug_impl(&dword_182882000, v14, OS_LOG_TYPE_DEBUG, "Unexpected CFURLEnumeratorResult when enumerating %{private}@: %lli", buf, 0x16u);
          }

          break;
      }

    }
    while (!v21);
    CFRelease(v10);
  }

}

uint64_t _XCFHash8BitCaseInsensitive(unsigned __int8 *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v6;

  if (a2 < 0x81)
  {
    if (a2)
    {
      v5 = a2;
      v3 = a2;
      do
      {
        v6 = *a1++;
        v3 = 17 * v3 + (v6 & 0xFFFFFFDF);
        --v5;
      }
      while (v5);
    }
    else
    {
      v3 = 0;
    }
  }
  else
  {
    v2 = 0;
    v3 = a2;
    do
      v3 = 17 * v3 + (a1[v2++] & 0xDF);
    while (v2 != 64);
    v4 = -64;
    do
      v3 = 17 * v3 + (a1[a2 + v4++] & 0xDF);
    while (v4);
  }
  return (v3 << (a2 & 7)) + v3;
}

id BSServiceConnectionEndpointFunction()
{
  return (id)classBSServiceConnectionEndpoint;
}

id UISClickAttributionFunction()
{
  return (id)classUISClickAttribution;
}

id UISPasteSharingTokenFunction()
{
  return (id)classUISPasteSharingToken;
}

uint64_t CSBindableKeyMapAddTable()
{
  return CSMapAddMapTable();
}

uint64_t _CSBindableKeyMapGetHashForUnit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t CSBindableKeyMapNextKey()
{
  unsigned int *Header;
  uint64_t v1;

  Header = (unsigned int *)CSMapGetHeader();
  if (!Header)
    return 0;
  v1 = *Header;
  CSMapWriteToHeader();
  return v1;
}

id fileSystemRealPath(void *a1, _QWORD *a2)
{
  void *v4;
  id v5;
  char *v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  id v11;

  if (!a1 || !objc_msgSend(a1, "length"))
  {
    if (a2)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], -43, 0);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_8:
      v10 = 0;
LABEL_13:
      v11 = objc_retainAutorelease(v9);
      *a2 = v11;
      goto LABEL_16;
    }
LABEL_15:
    v11 = 0;
    v10 = 0;
    goto LABEL_16;
  }
  v4 = operator new(0x400uLL);
  bzero(v4, 0x400uLL);
  v5 = objc_retainAutorelease(a1);
  v6 = realpath_DARWIN_EXTSN((const char *)objc_msgSend(v5, "UTF8String"), (char *)v4);
  if (!v6)
  {
    if (a2)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2FE0], *__error(), 0);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      operator delete(v4);
      goto LABEL_8;
    }
    operator delete(v4);
    goto LABEL_15;
  }
  v7 = objc_retainAutorelease(v5);
  if (!strcmp(v6, (const char *)objc_msgSend(v7, "UTF8String")))
  {
    v8 = v7;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v6);
    v8 = (id)objc_claimAutoreleasedReturnValue();
  }
  v10 = v8;
  operator delete(v4);
  v9 = 0;
  v11 = 0;
  if (a2)
    goto LABEL_13;
LABEL_16:

  return v10;
}

void sub_1828EAACC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t FSNodeCreateWithURL(uint64_t a1, uint64_t a2, id *a3)
{
  uint64_t v3;
  FSNode *v5;
  id v6;
  void *v7;
  id v9;

  v3 = 4294967246;
  if (a1 && a3)
  {
    v9 = 0;
    v5 = -[FSNode initWithURL:flags:error:]([FSNode alloc], "initWithURL:flags:error:", a1, a2, &v9);
    v6 = v9;
    v7 = v6;
    if (v5)
    {
      objc_storeStrong(a3, v5);
      v3 = 0;
    }
    else
    {
      v3 = _LSGetOSStatusFromNSError(v6);
    }

  }
  return v3;
}

void sub_1828EAB80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828EACDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1828EAD8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1828EB03C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1828EB198(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1828EB394(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1828EB4C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828EB62C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;

  _Unwind_Resume(a1);
}

void sub_1828EB6AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1828EB7A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1828EBA0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828EBAA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1828EBBDC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828EBD84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1828EBE68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828EBEF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1828EBF8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1828EC04C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828EC130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1828EC1FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1828EC2C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1828EC394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1828EC5B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  void *v18;
  uint64_t i;

  for (i = 8; i != -8; i -= 8)
  _Unwind_Resume(a1);
}

uint64_t _FSNodeGetNonFictionalDeviceNumber(FSNode *a1)
{
  BOOL v1;
  id v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  id v7;
  int v8;

  v8 = 0;
  v7 = 0;
  v1 = -[FSNode getDeviceNumber:error:](a1, "getDeviceNumber:error:", &v8, &v7);
  v2 = v7;
  if (v1)
  {
    v3 = v8;
  }
  else
  {
    _LSDefaultLog();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      _FSNodeGetNonFictionalDeviceNumber((uint64_t)v2, v4, v5);

    v3 = 0;
  }

  return v3;
}

void sub_1828EC69C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828EC74C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1828EC860(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828EC980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1828ECB94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  const void *v10;
  void *v11;
  void *v12;
  void *v13;

  CFRelease(v10);
  _Unwind_Resume(a1);
}

void sub_1828ECC70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1828ECE40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828ECFA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828ED080(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828ED0EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828ED158(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828ED1FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828ED268(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828ED2D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828ED340(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828ED3E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828ED798(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1828EDA40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828EDBF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828EDD70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828EDE0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _LSAliasAdd(void *a1, void *a2, _QWORD *a3)
{
  _QWORD *v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v12;
  _QWORD v13[2];

  v13[1] = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = v6;
  if (v5 && v6 && v5[1])
  {
    objc_msgSend(v6, "length");
    objc_msgSend(objc_retainAutorelease(v7), "bytes");
    v8 = CSStoreAllocUnitWithData();
    v9 = v8;
    if (a3 && !(_DWORD)v8)
    {
      _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], -9493, (uint64_t)"_LSAliasAdd", 27, 0);
      v9 = 0;
      *a3 = (id)objc_claimAutoreleasedReturnValue();
    }
  }
  else
  {
    if (a3)
    {
      v12 = *MEMORY[0x1E0CB2938];
      v13[0] = CFSTR("invalid input parameters");
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v13, &v12, 1);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], -50, (uint64_t)"_LSAliasAdd", 31, v10);
      *a3 = (id)objc_claimAutoreleasedReturnValue();

    }
    v9 = 0;
  }

  return v9;
}

void sub_1828EDFF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t _LSAliasAddNode(void *a1, void *a2, _QWORD *a3)
{
  _QWORD *v5;
  id v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v12;
  _QWORD v13[2];

  v13[1] = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = v6;
  if (v5 && v6 && v5[1])
  {
    objc_msgSend(v6, "bookmarkDataRelativeToNode:error:", 0, a3);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if (v8)
      v9 = _LSAliasAdd(v5, v8, a3);
    else
      v9 = 4294956486;

  }
  else
  {
    if (a3)
    {
      v12 = *MEMORY[0x1E0CB2938];
      v13[0] = CFSTR("invalid input parameters");
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v13, &v12, 1);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], -50, (uint64_t)"_LSAliasAddNode", 54, v10);
      *a3 = (id)objc_claimAutoreleasedReturnValue();

    }
    v9 = 4294956486;
  }

  return v9;
}

void sub_1828EE160(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t _LSAliasAddURL(void *a1, void *a2, _QWORD *a3)
{
  _QWORD *v5;
  id v6;
  void *v7;
  FSNode *v8;
  uint64_t v9;
  void *v10;
  uint64_t v12;
  _QWORD v13[2];

  v13[1] = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = v6;
  if (v5 && v6 && v5[1] && objc_msgSend(v6, "isFileURL"))
  {
    v8 = -[FSNode initWithURL:flags:error:]([FSNode alloc], "initWithURL:flags:error:", v7, 0, a3);
    if (v8)
      v9 = _LSAliasAddNode(v5, v8, a3);
    else
      v9 = 4294956486;

  }
  else
  {
    if (a3)
    {
      v12 = *MEMORY[0x1E0CB2938];
      v13[0] = CFSTR("invalid input parameters");
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v13, &v12, 1);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], -50, (uint64_t)"_LSAliasAddURL", 78, v10);
      *a3 = (id)objc_claimAutoreleasedReturnValue();

    }
    v9 = 4294956486;
  }

  return v9;
}

void sub_1828EE2F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t _LSAliasRemove(void *a1, int a2)
{
  id v3;
  void *v4;
  uint64_t v5;

  v3 = a1;
  v4 = v3;
  v5 = 4294967246;
  if (v3 && a2 && *((_QWORD *)v3 + 1))
  {
    CSStoreFreeUnit();
    v5 = 0;
  }

  return v5;
}

void sub_1828EE3A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id _LSAliasGetName(void *a1, int a2)
{
  void *v2;
  void *v3;

  _LSAliasGet(a1, a2);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (v2)
  {
    +[FSNode nameForBookmarkData:error:](FSNode, "nameForBookmarkData:error:", v2, 0);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v3 = 0;
  }

  return v3;
}

void sub_1828EE404(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id _LSAliasGetPath(void *a1, int a2)
{
  void *v2;
  void *v3;

  _LSAliasGet(a1, a2);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (v2)
  {
    +[FSNode pathForBookmarkData:error:](FSNode, "pathForBookmarkData:error:", v2, 0);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v3 = 0;
  }

  return v3;
}

void sub_1828EE468(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void _LSAliasGetVisualizationFunctions(id (**a1)(void **this, LSContext *a2, int a3)@<X8>)
{
  *a1 = LaunchServices::Aliases::getSummary;
  a1[1] = (id (*)(void **, LSContext *, int))LaunchServices::Aliases::display;
  a1[2] = (id (*)(void **, LSContext *, int))LaunchServices::Aliases::copyBindingForVisualization;
}

id LaunchServices::Aliases::getSummary(void **this, LSContext *a2, int a3)
{
  return _LSAliasGetPath(*this, a3);
}

BOOL LaunchServices::Aliases::display(void **a1, uint64_t a2, int a3, CSStore2::AttributedStringWriter *a4)
{
  void *v5;
  NSString *v6;
  NSURL *v7;
  NSString *v8;
  unsigned int v9;
  NSAttributedString *v10;
  NSAttributedString *v11;
  uint64_t v12;
  unsigned int v14;

  _LSAliasGet(*a1, a3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    +[FSNode pathForBookmarkData:error:](FSNode, "pathForBookmarkData:error:", v5, 0);
    v6 = (NSString *)objc_claimAutoreleasedReturnValue();
    if (v6)
    {
      v7 = (NSURL *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E98]), "initFileURLWithPath:isDirectory:", v6, 0);
      CSStore2::AttributedStringWriter::link(a4, v7, v6);
      v8 = (NSString *)objc_claimAutoreleasedReturnValue();
      CSStore2::AttributedStringWriter::string(a4, CFSTR("path"), v8);

      CSStore2::AttributedStringWriter::separator(a4, 45, 0);
    }

    v14 = 0;
    if ((unint64_t)objc_msgSend(v5, "length") >= 5
      && (objc_msgSend(v5, "getBytes:length:", &v14, 4), v9 = v14, v14 = bswap32(v14), v9 == 1802465122)
      && (v10 = (NSAttributedString *)MEMORY[0x186DAD8AC](v5)) != 0)
    {
      v11 = (NSAttributedString *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3778]), "initWithString:", v10);
      v12 = -[NSAttributedString length](v11, "length");
      -[NSAttributedString addAttribute:value:range:](v11, "addAttribute:value:range:", *MEMORY[0x1E0D18D40], MEMORY[0x1E0C9AAB0], 0, v12);
      CSStore2::AttributedStringWriter::attributedString(a4, v11);

    }
    else
    {
      v10 = (NSAttributedString *)_CSStoreCopyDebugDescriptionOfUnit();
      CSStore2::AttributedStringWriter::attributedString(a4, v10);
    }

  }
  return v5 != 0;
}

void sub_1828EE684(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t LaunchServices::Aliases::copyBindingForVisualization(LaunchServices::Aliases *this, LSContext *a2)
{
  return 0;
}

void sub_1828EEC10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1828EF088(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void LaunchServices::EligibilityPredicateEvaluation::Predicate::parse_dictionary(void *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  int v8;
  uint64_t i;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t j;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t *v27;
  uint64_t v28;
  void *v29;
  char *v30;
  uint64_t *v31;
  void *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  int v36;
  id v39;
  uint64_t v40;
  uint64_t v41;
  id obj;
  uint64_t *v43;
  char *v44;
  char *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  void *__p;
  char *v51;
  char *v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  const __CFString *v62;
  _BYTE v63[128];
  _BYTE v64[128];
  uint64_t v65;
  const __CFString *v66;
  uint64_t v67;
  _QWORD v68[4];

  v68[1] = *MEMORY[0x1E0C80C00];
  v39 = a1;
  if ((_NSIsNSDictionary() & 1) == 0)
  {
    if (a2)
    {
      v67 = *MEMORY[0x1E0CB2938];
      v68[0] = CFSTR("Predicate was not a dictionary");
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v68, &v67, 1);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], -50, (uint64_t)"parse_dictionary", 86, v6);
      *a2 = (id)objc_claimAutoreleasedReturnValue();

    }
    goto LABEL_50;
  }
  v3 = objc_opt_class();
  objc_msgSend(v39, "objectForKey:", CFSTR("Conditions"));
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = (void *)v4;
  if (v3 && v4)
  {
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {

      goto LABEL_48;
    }
  }
  else if (!v4)
  {
LABEL_48:
    if (a2)
    {
      v65 = *MEMORY[0x1E0CB2938];
      v66 = CFSTR("Predicate key Conditions was not a dictionary");
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v66, &v65, 1);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2FE0], 79, (uint64_t)"parse_dictionary", 92, v29);
      *a2 = (id)objc_claimAutoreleasedReturnValue();

    }
LABEL_50:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 24) = 0;
    goto LABEL_67;
  }
  v59 = 0;
  v60 = 0;
  v58 = (uint64_t *)&v59;
  v54 = 0u;
  v55 = 0u;
  v56 = 0u;
  v57 = 0u;
  obj = v5;
  v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v54, v64, 16);
  if (v7)
  {
    v41 = *(_QWORD *)v55;
    v8 = 1;
    while (2)
    {
      v40 = v7;
      for (i = 0; i != v40; ++i)
      {
        if (*(_QWORD *)v55 != v41)
          objc_enumerationMutation(obj);
        v10 = *(void **)(*((_QWORD *)&v54 + 1) + 8 * i);
        if ((_NSIsNSString() & 1) == 0)
          goto LABEL_56;
        v53 = 0;
        v53 = objc_msgSend(v10, "longLongValue");
        objc_msgSend(obj, "objectForKey:", v10);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        if ((_NSIsNSArray() & 1) == 0)
        {

LABEL_56:
LABEL_57:
          if (a2)
          {
            v61 = *MEMORY[0x1E0CB2938];
            v62 = CFSTR("Predicate conditions was not a stringifiedNumber->[number] map");
            objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v62, &v61, 1);
            v32 = (void *)objc_claimAutoreleasedReturnValue();
            _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2FE0], 79, (uint64_t)"parse_dictionary", 122, v32);
            *a2 = (id)objc_claimAutoreleasedReturnValue();

          }
          *(_BYTE *)a3 = 0;
          *(_BYTE *)(a3 + 24) = 0;
          goto LABEL_66;
        }
        __p = 0;
        v51 = 0;
        v52 = 0;
        v46 = 0u;
        v47 = 0u;
        v48 = 0u;
        v49 = 0u;
        v12 = v11;
        v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v46, v63, 16);
        if (v13)
        {
          v36 = v8;
          v14 = *(_QWORD *)v47;
          while (2)
          {
            for (j = 0; j != v13; ++j)
            {
              if (*(_QWORD *)v47 != v14)
                objc_enumerationMutation(v12);
              v16 = *(void **)(*((_QWORD *)&v46 + 1) + 8 * j);
              if ((_NSIsNSNumber() & 1) == 0)
              {
                v8 = 0;
                goto LABEL_42;
              }
              v17 = objc_msgSend(v16, "unsignedLongLongValue");
              v18 = v17;
              v19 = v51;
              if (v51 >= v52)
              {
                v21 = (char *)__p;
                v22 = (v51 - (_BYTE *)__p) >> 3;
                v23 = v22 + 1;
                if ((unint64_t)(v22 + 1) >> 61)
                  abort();
                v24 = v52 - (_BYTE *)__p;
                if ((v52 - (_BYTE *)__p) >> 2 > v23)
                  v23 = v24 >> 2;
                if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
                  v25 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v25 = v23;
                if (v25)
                {
                  v26 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<os_eligibility_answer_t>>((uint64_t)&v52, v25);
                  v21 = (char *)__p;
                  v19 = v51;
                }
                else
                {
                  v26 = 0;
                }
                v27 = (uint64_t *)&v26[8 * v22];
                *v27 = v18;
                v20 = (char *)(v27 + 1);
                while (v19 != v21)
                {
                  v28 = *((_QWORD *)v19 - 1);
                  v19 -= 8;
                  *--v27 = v28;
                }
                __p = v27;
                v51 = v20;
                v52 = &v26[8 * v25];
                if (v21)
                  operator delete(v21);
              }
              else
              {
                *(_QWORD *)v51 = v17;
                v20 = v19 + 8;
              }
              v51 = v20;
            }
            v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v46, v63, 16);
            if (v13)
              continue;
            break;
          }
          v8 = v36;
        }
LABEL_42:

        std::__tree<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::__map_value_compare<os_eligibility_domain_t,std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::less<os_eligibility_domain_t>,true>,std::allocator<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>>>::__emplace_unique_key_args<os_eligibility_domain_t,os_eligibility_domain_t&,std::vector<os_eligibility_answer_t>>(&v58, (unint64_t *)&v53, &v53, (uint64_t)&__p);
        if (__p)
        {
          v51 = (char *)__p;
          operator delete(__p);
        }

      }
      v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v54, v64, 16);
      if (v7)
        continue;
      break;
    }

    if ((v8 & 1) == 0)
      goto LABEL_57;
  }
  else
  {

  }
  v31 = v58;
  v30 = v59;
  v43 = v58;
  v44 = v59;
  v45 = v60;
  if (v60)
  {
    *((_QWORD *)v59 + 2) = &v44;
    v58 = (uint64_t *)&v59;
    v59 = 0;
    v60 = 0;
    __p = v31;
    v51 = v30;
    v52 = v45;
    if (v45)
    {
      *((_QWORD *)v30 + 2) = &v51;
      v43 = (uint64_t *)&v44;
      v44 = 0;
      v45 = 0;
      goto LABEL_62;
    }
  }
  else
  {
    v43 = (uint64_t *)&v44;
    v51 = v59;
    v52 = 0;
  }
  __p = &v51;
  v31 = (uint64_t *)&v51;
LABEL_62:
  *(_QWORD *)a3 = v31;
  *(_QWORD *)(a3 + 8) = v30;
  v33 = a3 + 8;
  v34 = v52;
  *(_QWORD *)(a3 + 16) = v52;
  if (v34)
  {
    v35 = 0;
    *((_QWORD *)v30 + 2) = v33;
    __p = &v51;
    v51 = 0;
    v52 = 0;
  }
  else
  {
    *(_QWORD *)a3 = v33;
    v35 = v51;
  }
  *(_BYTE *)(a3 + 24) = 1;
  std::__tree<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::__map_value_compare<os_eligibility_domain_t,std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::less<os_eligibility_domain_t>,true>,std::allocator<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>>>::destroy((uint64_t)&__p, v35);
  std::__tree<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::__map_value_compare<os_eligibility_domain_t,std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::less<os_eligibility_domain_t>,true>,std::allocator<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>>>::destroy((uint64_t)&v43, v44);
LABEL_66:
  std::__tree<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::__map_value_compare<os_eligibility_domain_t,std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::less<os_eligibility_domain_t>,true>,std::allocator<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>>>::destroy((uint64_t)&v58, v59);

LABEL_67:
}

void sub_1828EF67C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,_QWORD *a42)
{

  std::__tree<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::__map_value_compare<os_eligibility_domain_t,std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::less<os_eligibility_domain_t>,true>,std::allocator<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>>>::destroy((uint64_t)&a41, a42);
  _Unwind_Resume(a1);
}

uint64_t LaunchServices::DelayedInitable<LaunchServices::EligibilityPredicateEvaluation::Predicate>::emplace<LaunchServices::EligibilityPredicateEvaluation::Predicate>(uint64_t a1, _QWORD *a2)
{
  void *v5;
  void *v6;

  if (*(_BYTE *)(a1 + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void LaunchServices::DelayedInitable<LaunchServices::Predicate>::emplace(Args &&...) [T = LaunchServices::Predicate, Args = <LaunchServices::Predicate>]");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("LSObjCPlusPlusHelpers.hpp"), 34, CFSTR("can't re-emplace a DelayedInitable"));

  }
  return std::optional<LaunchServices::EligibilityPredicateEvaluation::Predicate>::emplace[abi:nn180100]<LaunchServices::EligibilityPredicateEvaluation::Predicate,void>(a1, a2);
}

void sub_1828EF7E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t LaunchServices::EligibilityPredicateEvaluation::Predicate::evaluate(_QWORD *a1, void *a2, uint64_t a3)
{
  id v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  int v17;
  int v18;

  v5 = a2;
  v8 = (_QWORD *)*a1;
  v6 = a1 + 1;
  v7 = v8;
  if (v8 == v6)
  {
LABEL_14:
    v17 = 1;
    v18 = 1;
  }
  else
  {
    while (1)
    {
      objc_msgSend(v5, "eligibilityForDomain:error:", v7[4], a3);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = v9;
      if (!v9)
      {
        v18 = 0;
        goto LABEL_17;
      }
      v11 = (_QWORD *)v7[5];
      v12 = (_QWORD *)v7[6];
      v13 = objc_msgSend(v9, "unsignedLongLongValue");
      if (v11 != v12)
      {
        while (*v11 != v13)
        {
          if (++v11 == v12)
          {
            v11 = v12;
            break;
          }
        }
      }
      if (v11 == (_QWORD *)v7[6])
        break;

      v14 = (_QWORD *)v7[1];
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (_QWORD *)v7[2];
          v16 = *v15 == (_QWORD)v7;
          v7 = v15;
        }
        while (!v16);
      }
      v7 = v15;
      if (v15 == v6)
        goto LABEL_14;
    }
    v18 = 1;
LABEL_17:

    v17 = 0;
  }

  return v17 | (v18 << 8);
}

void sub_1828EF958(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1828EFA04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t LaunchServices::EligibilityPredicateEvaluation::Predicate::to_string(LaunchServices::EligibilityPredicateEvaluation::Predicate *this)
{
  char *v2;
  char *v3;
  char *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char *v9;
  char *v10;
  BOOL v11;
  _QWORD v13[11];
  char v14;
  uint64_t v15;

  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v13);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)"EligibilityPredicate {", 22);
  v4 = *(char **)this;
  v2 = (char *)this + 8;
  v3 = v4;
  if (v4 != v2)
  {
    v5 = 1;
    do
    {
      if ((v5 & 1) == 0)
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)", ", 2);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)": [", 3);
      v6 = *((_QWORD *)v3 + 5);
      v7 = *((_QWORD *)v3 + 6);
      if (v6 != v7)
      {
        v8 = 1;
        do
        {
          if ((v8 & 1) == 0)
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)", ", 2);
          std::ostream::operator<<();
          v8 = 0;
          v6 += 8;
        }
        while (v6 != v7);
      }
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)"]", 1);
      v9 = (char *)*((_QWORD *)v3 + 1);
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = *(char **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (char *)*((_QWORD *)v3 + 2);
          v11 = *(_QWORD *)v10 == (_QWORD)v3;
          v3 = v10;
        }
        while (!v11);
      }
      v5 = 0;
      v3 = v10;
    }
    while (v10 != v2);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)"}", 1);
  std::stringbuf::str();
  v13[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v13 + *(_QWORD *)(v13[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v13[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v14 < 0)
    operator delete((void *)v13[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x186DADED0](&v15);
}

void sub_1828EFBF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1828EFCAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<os_eligibility_answer_t>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(8 * a2);
}

void std::__throw_bad_array_new_length[abi:nn180100]()
{
  abort();
}

uint64_t **std::__tree<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::__map_value_compare<os_eligibility_domain_t,std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::less<os_eligibility_domain_t>,true>,std::allocator<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>>>::__emplace_unique_key_args<os_eligibility_domain_t,os_eligibility_domain_t&,std::vector<os_eligibility_answer_t>>(uint64_t **a1, unint64_t *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t **v10;
  unint64_t v11;
  char *v12;

  v8 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    v9 = *a2;
    while (1)
    {
      while (1)
      {
        v10 = (uint64_t **)v7;
        v11 = v7[4];
        if (v9 >= v11)
          break;
        v7 = *v10;
        v8 = v10;
        if (!*v10)
          goto LABEL_10;
      }
      if (v11 >= v9)
        break;
      v7 = v10[1];
      if (!v7)
      {
        v8 = v10 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v10 = a1 + 1;
LABEL_10:
    v12 = (char *)operator new(0x40uLL);
    *((_QWORD *)v12 + 4) = *a3;
    *(_OWORD *)(v12 + 40) = *(_OWORD *)a4;
    *((_QWORD *)v12 + 7) = *(_QWORD *)(a4 + 16);
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)a4 = 0;
    std::__tree<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::__map_value_compare<os_eligibility_domain_t,std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::less<os_eligibility_domain_t>,true>,std::allocator<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>>>::__insert_node_at(a1, (uint64_t)v10, v8, (uint64_t *)v12);
    return (uint64_t **)v12;
  }
  return v10;
}

uint64_t *std::__tree<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::__map_value_compare<os_eligibility_domain_t,std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::less<os_eligibility_domain_t>,true>,std::allocator<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void std::__tree<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::__map_value_compare<os_eligibility_domain_t,std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::less<os_eligibility_domain_t>,true>,std::allocator<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  void *v4;

  if (a2)
  {
    std::__tree<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::__map_value_compare<os_eligibility_domain_t,std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::less<os_eligibility_domain_t>,true>,std::allocator<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::__map_value_compare<os_eligibility_domain_t,std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::less<os_eligibility_domain_t>,true>,std::allocator<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>>>::destroy(a1, a2[1]);
    v4 = (void *)a2[5];
    if (v4)
    {
      a2[6] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

uint64_t std::ostringstream::basic_ostringstream[abi:nn180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;

  v2 = MEMORY[0x1E0DE4FE0];
  v3 = MEMORY[0x1E0DE4FE0] + 64;
  *(_QWORD *)(a1 + 112) = MEMORY[0x1E0DE4FE0] + 64;
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + *(_QWORD *)(v4 - 24)) = v5;
  v6 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 112) = v3;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_1828F0100(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x186DADED0](v1);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F60];
  v3 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x186DADED0](a1 + 112);
  return a1;
}

_QWORD *std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x186DADE34](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x1E0DE4A90]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!std::__pad_and_output[abi:nn180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x186DADE40](v13);
  return a1;
}

void sub_1828F02B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  MEMORY[0x186DADE40](&a10);
  _Unwind_Resume(a1);
}

uint64_t std::__pad_and_output[abi:nn180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if (v12 >= 1)
    {
      std::string::basic_string[abi:nn180100](__p, v12, __c);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (v18 < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v15) == v15)
      *(_QWORD *)(a5 + 24) = 0;
    else
      return 0;
  }
  return v6;
}

void sub_1828F03FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::basic_string[abi:nn180100](_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

uint64_t std::optional<LaunchServices::EligibilityPredicateEvaluation::Predicate>::emplace[abi:nn180100]<LaunchServices::EligibilityPredicateEvaluation::Predicate,void>(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 24))
  {
    std::__tree<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::__map_value_compare<os_eligibility_domain_t,std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::less<os_eligibility_domain_t>,true>,std::allocator<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>>>::destroy(a1, *(_QWORD **)(a1 + 8));
    *(_BYTE *)(a1 + 24) = 0;
  }
  *(_QWORD *)a1 = *a2;
  v4 = a2 + 1;
  v5 = a2[1];
  *(_QWORD *)(a1 + 8) = v5;
  v6 = a1 + 8;
  v7 = a2[2];
  *(_QWORD *)(a1 + 16) = v7;
  if (v7)
  {
    *(_QWORD *)(v5 + 16) = v6;
    *a2 = v4;
    *v4 = 0;
    a2[2] = 0;
  }
  else
  {
    *(_QWORD *)a1 = v6;
  }
  *(_BYTE *)(a1 + 24) = 1;
  return a1;
}

void sub_1828F056C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828F05B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void LaunchServices::Database::Context::~Context(LaunchServices::Database::Context *this)
{
  void **v2;
  void *v3;
  void *v4;

  v2 = *(void ***)this;
  if (v2 && *((_BYTE *)this + 16))
    _LSContextDestroy(v2);
  v3 = (void *)*((_QWORD *)this + 1);
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;

  *((_BYTE *)this + 16) = 0;
  v4 = (void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;

}

void sub_1828F0620(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

void sub_1828F0D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  void *v53;
  void *v54;
  uint64_t v55;

  std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::~__hash_table((uint64_t)&a53);
  *(_QWORD *)(v55 - 256) = &a46;
  std::vector<std::pair<unsigned int,NSUUID * {__strong}>>::__destroy_vector::operator()[abi:nn180100]((void ***)(v55 - 256));

  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a49);
  _Unwind_Resume(a1);
}

void sub_1828F0F70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828F0FB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828F1000(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828F1048(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828F108C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828F11A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1828F134C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1828F1470(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828F14EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::vector<std::pair<unsigned int,NSUUID * {__strong}>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  id *v2;
  id *v4;
  void *v5;
  id *v6;

  v1 = *a1;
  v2 = (id *)**a1;
  if (v2)
  {
    v4 = (id *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 2;

        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<unsigned int,NSUUID * {__strong}>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(16 * a2);
}

uint64_t std::__split_buffer<std::pair<unsigned int,NSUUID * {__strong}>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;

  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int,LSApplicationRecord * {__strong}>>(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v12 = (_QWORD *)(a1 + 16);
  v10 = operator new(0x20uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *(_DWORD *)a3;
  v13 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  v10[3] = v13;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__rehash<true>(a1, v19);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v21)
  {
    *v10 = *v21;
LABEL_38:
    *v21 = v10;
    goto LABEL_39;
  }
  *v10 = *v12;
  *v12 = v10;
  *(_QWORD *)(v20 + 8 * v3) = v12;
  if (*v10)
  {
    v22 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v22 >= v7)
        v22 %= v7;
    }
    else
    {
      v22 &= v7 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_1828F186C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,void *>>>::operator()[abi:nn180100](v2, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,void *>>>::operator()[abi:nn180100](uint64_t a1, id *a2)
{
  if (*(_BYTE *)(a1 + 8))
  {

  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

void sub_1828F19B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1828F1AB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1828F1B38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1828F1BE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1828F1E68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  void *v20;
  void *v21;

  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a17);
  _Unwind_Resume(a1);
}

void sub_1828F1F20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1828F2058(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828F21A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828F2498(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1828F2620(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1828F277C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v7 = v5;

  _Unwind_Resume(a1);
}

void sub_1828F2940(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1828F2B78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1828F2CDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1828F2E34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1828F3024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1828F30F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

Class initUMUserPersonaAttributes(void)
{
  Class result;

  if (!UserManagementLibrary(void)::frameworkLibrary)
    UserManagementLibrary(void)::frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/UserManagement.framework/UserManagement", 2);
  result = objc_getClass("UMUserPersonaAttributes");
  classUMUserPersonaAttributes = (uint64_t)result;
  getUMUserPersonaAttributesClass = (uint64_t (*)(void))UMUserPersonaAttributesFunction;
  return result;
}

{
  Class result;

  if (!UserManagementLibrary(void)::frameworkLibrary)
    UserManagementLibrary(void)::frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/UserManagement.framework/UserManagement", 2);
  result = objc_getClass("UMUserPersonaAttributes");
  classUMUserPersonaAttributes = (uint64_t)result;
  getUMUserPersonaAttributesClass = (uint64_t (*)(void))UMUserPersonaAttributesFunction;
  return result;
}

id UMUserPersonaAttributesFunction(void)
{
  return (id)classUMUserPersonaAttributes;
}

{
  return (id)classUMUserPersonaAttributes;
}

void OUTLINED_FUNCTION_0_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 2u);
}

void sub_1828F3200(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828F32B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void _LSAppsAnalyticsStartListening()
{
  NSObject *v0;
  void *v1;
  int64_t v2;
  const char *v3;
  xpc_object_t xdict;
  uint8_t buf[16];

  _LSAssertRunningInServer((uint64_t)"void _LSAppsAnalyticsStartListening()");
  if (objc_msgSend((id)__LSDefaultsGetSharedInstance(), "isUserServer")
    && (objc_msgSend((id)__LSDefaultsGetSharedInstance(), "isLightweightSystemServer") & 1) == 0
    && (CoreAnalyticsLibrary(void)::frameworkLibrary
     || (CoreAnalyticsLibrary(void)::frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/CoreAnalytics.framework/CoreAnalytics", 2)) != 0))
  {
    xdict = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_string(xdict, (const char *)*MEMORY[0x1E0C80878], (const char *)*MEMORY[0x1E0C80888]);
    v1 = (void *)CFPreferencesCopyValue(CFSTR("LSDefaultAppsReportingInterval"), (CFStringRef)*MEMORY[0x1E0C9B228], (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B230]);
    if (v1 && _NSIsNSNumber())
    {
      v2 = objc_msgSend(v1, "unsignedLongLongValue");
      v3 = (const char *)*MEMORY[0x1E0C807A8];
    }
    else
    {
      v3 = (const char *)*MEMORY[0x1E0C807A8];
      v2 = *MEMORY[0x1E0C807E8];
    }
    xpc_dictionary_set_int64(xdict, v3, v2);
    xpc_activity_register("com.apple.launchservices.systemapps.analytics", xdict, &__block_literal_global_2);

  }
  else
  {
    _LSDefaultLog();
    v0 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_182882000, v0, OS_LOG_TYPE_DEFAULT, "CoreAnalytics library is not available.", buf, 2u);
    }

  }
}

void sub_1828F3458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1828F360C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void _LSNoteSystemAppInstallOrUninstall(uint64_t a1, unsigned int a2)
{
  __CFString *v3;

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("com.apple.LaunchServices.systemAppRemoval.%@"), a1);
  v3 = (__CFString *)objc_claimAutoreleasedReturnValue();
  softLinkADClientAddValueForScalarKey(v3, a2);

}

void sub_1828F36A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

BOOL ___ZN14LaunchServices13AppsAnalyticsL14handleActivityEPU24objcproto13OS_xpc_object8NSObject_block_invoke(uint64_t a1)
{
  NSObject *v1;
  NSObject *v2;
  _LSDServiceDomain *v3;
  LaunchServices::AppsAnalytics *v4;
  id v5;
  NSString *v6;
  uint64_t v7;
  NSString *v8;
  NSObject *v9;
  _LSDServiceDomain *v10;
  uint64_t v11;
  id v12;
  LSApplicationRecord *v13;
  void *v14;
  uint64_t v15;
  LSApplicationRecord *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  void *v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t j;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t k;
  void *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  void *v37;
  BOOL v38;
  void *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  int v45;
  void *v46;
  id v47;
  id v48;
  void *v50;
  void *v51;
  id obj;
  NSObject *v54;
  id v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  void **v68;
  id v69;
  char v70;
  id v71;
  _BYTE v72[128];
  uint8_t v73[128];
  uint8_t buf[4];
  id v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  _LSDefaultLog();
  v1 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_182882000, v1, OS_LOG_TYPE_DEFAULT, "Capturing default apps analytics.", buf, 2u);
  }

  _LSDefaultLog();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_182882000, v2, OS_LOG_TYPE_DEFAULT, "Fetching current apps analytics state", buf, 2u);
  }

  v71 = 0;
  v68 = 0;
  v69 = 0;
  v70 = 0;
  +[_LSDServiceDomain defaultServiceDomain]();
  v3 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
  v4 = (LaunchServices::AppsAnalytics *)LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)&v68, v3, 0);

  if (v4)
  {
    v5 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    LaunchServices::AppsAnalytics::getBundleIdentifierToHandleURLScheme(v4, (LSContext *)CFSTR("https"), v6);
    v7 = objc_claimAutoreleasedReturnValue();
    if (v7)
    {
      objc_msgSend(v5, "setObject:forKeyedSubscript:", v7, CFSTR("webbrowser"), v7);
    }
    else
    {
      v13 = -[LSApplicationRecord initWithBundleIdentifier:allowPlaceholder:error:]([LSApplicationRecord alloc], "initWithBundleIdentifier:allowPlaceholder:error:", CFSTR("com.apple.mobilesafari"), 0, 0, 0);
      if (v13)
        objc_msgSend(CFSTR("com.apple.mobilesafari"), "stringByAppendingString:", CFSTR(" - restricted"));
      else
        objc_msgSend(CFSTR("com.apple.mobilesafari"), "stringByAppendingString:", CFSTR(" - deleted"));
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "setObject:forKeyedSubscript:", v14, CFSTR("webbrowser"));

    }
    LaunchServices::AppsAnalytics::getBundleIdentifierToHandleURLScheme(v4, (LSContext *)CFSTR("mailto"), v8);
    v15 = objc_claimAutoreleasedReturnValue();
    v51 = (void *)v15;
    if (v15)
    {
      objc_msgSend(v5, "setObject:forKeyedSubscript:", v15, CFSTR("mailclient"));
    }
    else
    {
      v16 = -[LSApplicationRecord initWithBundleIdentifier:allowPlaceholder:error:]([LSApplicationRecord alloc], "initWithBundleIdentifier:allowPlaceholder:error:", CFSTR("com.apple.mobilemail"), 0, 0);
      if (v16)
        objc_msgSend(CFSTR("com.apple.mobilemail"), "stringByAppendingString:", CFSTR(" - restricted"));
      else
        objc_msgSend(CFSTR("com.apple.mobilemail"), "stringByAppendingString:", CFSTR(" - deleted"));
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "setObject:forKeyedSubscript:", v17, CFSTR("mailclient"));

    }
    softLinkAnalyticsSendEvent(CFSTR("com.apple.LaunchServices.DefaultApps"), v5);
    v54 = objc_alloc_init(MEMORY[0x1E0C99E08]);

    v55 = objc_alloc_init(MEMORY[0x1E0C99E20]);
    v66 = 0u;
    v67 = 0u;
    v64 = 0u;
    v65 = 0u;
    +[LSApplicationRecord enumeratorWithOptions:](LSApplicationRecord, "enumeratorWithOptions:", 0);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v64, buf, 16);
    if (v19)
    {
      v20 = *(_QWORD *)v65;
      do
      {
        for (i = 0; i != v19; ++i)
        {
          if (*(_QWORD *)v65 != v20)
            objc_enumerationMutation(v18);
          objc_msgSend(*(id *)(*((_QWORD *)&v64 + 1) + 8 * i), "bundleIdentifier");
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v55, "addObject:", v22);

        }
        v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v64, buf, 16);
      }
      while (v19);
    }

    v23 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v62 = 0u;
    v63 = 0u;
    v60 = 0u;
    v61 = 0u;
    +[LSApplicationRecord enumeratorWithOptions:](LSApplicationRecord, "enumeratorWithOptions:", 64);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v60, v73, 16);
    if (v25)
    {
      v26 = *(_QWORD *)v61;
      do
      {
        for (j = 0; j != v25; ++j)
        {
          if (*(_QWORD *)v61 != v26)
            objc_enumerationMutation(v24);
          v28 = *(void **)(*((_QWORD *)&v60 + 1) + 8 * j);
          objc_msgSend(v28, "bundleIdentifier");
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v23, "setObject:forKeyedSubscript:", v28, v29);

        }
        v25 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v60, v73, 16);
      }
      while (v25);
    }

    v58 = 0u;
    v59 = 0u;
    v56 = 0u;
    v57 = 0u;
    +[LSApplicationRecord systemPlaceholderEnumerator](LSApplicationRecord, "systemPlaceholderEnumerator");
    obj = (id)objc_claimAutoreleasedReturnValue();
    v30 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v56, v72, 16);
    if (v30)
    {
      v31 = *(_QWORD *)v57;
      do
      {
        for (k = 0; k != v30; ++k)
        {
          if (*(_QWORD *)v57 != v31)
            objc_enumerationMutation(obj);
          v33 = *(void **)(*((_QWORD *)&v56 + 1) + 8 * k);
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 2);
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v33, "bundleIdentifier");
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          if ((objc_msgSend(v55, "containsObject:", v35) & 1) != 0)
          {
            v36 = 1;
          }
          else
          {
            objc_msgSend(v23, "objectForKeyedSubscript:", v35);
            v37 = (void *)objc_claimAutoreleasedReturnValue();
            v38 = v37 == 0;

            if (v38)
              goto LABEL_46;
            objc_msgSend(v23, "objectForKeyedSubscript:", v35);
            v39 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v39, "applicationState");
            v40 = (void *)objc_claimAutoreleasedReturnValue();
            v41 = objc_msgSend(v40, "installType");

            if ((unint64_t)(v41 - 7) >= 3)
              goto LABEL_46;
            v36 = dword_1829FA700[v41 - 7];
          }
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v36);
          v42 = objc_claimAutoreleasedReturnValue();

          v34 = (void *)v42;
LABEL_46:
          objc_msgSend(v35, "componentsSeparatedByString:", CFSTR("."));
          v43 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v43, "lastObject");
          v44 = (void *)objc_claimAutoreleasedReturnValue();
          v45 = objc_msgSend(v44, "isEqualToString:", CFSTR("watchkitapp"));

          if (v45)
            objc_msgSend(v43, "objectAtIndex:", objc_msgSend(v43, "count") - 2);
          else
            objc_msgSend(v43, "lastObject");
          v46 = (void *)objc_claimAutoreleasedReturnValue();
          -[NSObject setObject:forKeyedSubscript:](v54, "setObject:forKeyedSubscript:", v34, v46);

        }
        v30 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v56, v72, 16);
      }
      while (v30);
    }

    softLinkAnalyticsSendEvent(CFSTR("com.apple.LaunchServices.SystemApplicationInstallStatusV2"), v54);
    v9 = v54;
  }
  else
  {
    _LSDefaultLog();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      +[_LSDServiceDomain defaultServiceDomain]();
      v10 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
      v11 = LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)&v68, v10, 0);

      if (v11)
        v12 = 0;
      else
        v12 = v71;
      *(_DWORD *)buf = 138412290;
      v75 = v12;
      _os_log_error_impl(&dword_182882000, v9, OS_LOG_TYPE_ERROR, "Error getting LS database during analytics: %@", buf, 0xCu);

    }
  }

  if (v68 && v70)
    _LSContextDestroy(v68);
  v47 = v69;
  v68 = 0;
  v69 = 0;

  v70 = 0;
  v48 = v71;
  v71 = 0;

  return xpc_activity_set_state(*(xpc_activity_t *)(a1 + 32), 5);
}

void sub_1828F3E44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  void *v39;
  void *v40;
  void *v41;

  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a39);
  _Unwind_Resume(a1);
}

id LaunchServices::AppsAnalytics::getBundleIdentifierToHandleURLScheme(LaunchServices::AppsAnalytics *this, LSContext *a2, NSString *a3)
{
  int v3;
  LSContext *v4;
  BOOL v5;
  NSObject *v6;
  void *v7;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  id v13;
  id v14;
  uint8_t buf[4];
  LSContext *v16;
  uint64_t v17;

  v3 = (int)this;
  v17 = *MEMORY[0x1E0C80C00];
  v4 = a2;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v13 = 0;
  v14 = 0;
  v12 = 0;
  if (_LSGetBindingForNodeOrSchemeOrUTI(v3, 0, (LaunchServices::BindingEvaluator *)v4, 0, 0, 14, 0, 0, (uint64_t)&v9))v5 = 1;
  else
    v5 = v10 == 0;
  if (v5)
  {
    _LSDefaultLog();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v16 = v4;
      _os_log_impl(&dword_182882000, v6, OS_LOG_TYPE_INFO, "No default app found for scheme %@, not including in analytics.", buf, 0xCu);
    }

    v7 = 0;
  }
  else
  {
    v7 = (void *)_CSStringCopyCFString();
  }

  return v7;
}

void sub_1828F4144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;

  _Unwind_Resume(a1);
}

void initAnalyticsSendEvent(void *a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t (*v5)();
  id v6;

  v6 = a1;
  v3 = a2;
  v4 = (void *)CoreAnalyticsLibrary(void)::frameworkLibrary;
  if (!CoreAnalyticsLibrary(void)::frameworkLibrary)
  {
    v4 = dlopen("/System/Library/PrivateFrameworks/CoreAnalytics.framework/CoreAnalytics", 2);
    CoreAnalyticsLibrary(void)::frameworkLibrary = (uint64_t)v4;
  }
  v5 = (uint64_t (*)())dlsym(v4, "AnalyticsSendEvent");
  softLinkAnalyticsSendEvent = v5;
  if (v5)
    ((void (*)(id, id))v5)(v6, v3);

}

{
  id v3;
  void *v4;
  uint64_t (*v5)();
  id v6;

  v6 = a1;
  v3 = a2;
  v4 = (void *)CoreAnalyticsLibrary_frameworkLibrary;
  if (!CoreAnalyticsLibrary_frameworkLibrary)
  {
    v4 = dlopen("/System/Library/PrivateFrameworks/CoreAnalytics.framework/CoreAnalytics", 2);
    CoreAnalyticsLibrary_frameworkLibrary = (uint64_t)v4;
  }
  v5 = (uint64_t (*)())dlsym(v4, "AnalyticsSendEvent");
  softLinkAnalyticsSendEvent[0] = v5;
  if (v5)
    ((void (*)(id, id))v5)(v6, v3);

}

void sub_1828F41F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t initADClientAddValueForScalarKey(const __CFString *a1, uint64_t a2)
{
  void *v4;

  v4 = (void *)AggregateDictionaryLibrary(void)::frameworkLibrary;
  if (!AggregateDictionaryLibrary(void)::frameworkLibrary)
  {
    v4 = dlopen("/System/Library/PrivateFrameworks/AggregateDictionary.framework/AggregateDictionary", 2);
    AggregateDictionaryLibrary(void)::frameworkLibrary = (uint64_t)v4;
  }
  softLinkADClientAddValueForScalarKey = (uint64_t (*)(const __CFString *, uint64_t))dlsym(v4, "ADClientAddValueForScalarKey");
  return softLinkADClientAddValueForScalarKey(a1, a2);
}

uint64_t __Block_byref_object_copy__6(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 48) = v2;
  return result;
}

id init_ISPrimaryIconDataForApplicationProxy(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;

  v5 = a1;
  v6 = (void *)IconServicesLibrary_frameworkLibrary;
  if (!IconServicesLibrary_frameworkLibrary)
  {
    v6 = dlopen("/System/Library/PrivateFrameworks/IconServices.framework/IconServices", 2);
    IconServicesLibrary_frameworkLibrary = (uint64_t)v6;
  }
  softLink_ISPrimaryIconDataForApplicationProxy = (uint64_t (*)())dlsym(v6, "_ISPrimaryIconDataForApplicationProxy");
  ((void (*)(id, uint64_t, uint64_t))softLink_ISPrimaryIconDataForApplicationProxy)(v5, a2, a3);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

void sub_1828F5C6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828F5ED4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1828F5FF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_1828F608C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828F6148(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828F6418(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(4 * a2);
}

char *std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 2)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62)
      abort();
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<unsigned int>::__vallocate[abi:nn180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 2;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

char *std::vector<unsigned int>::__vallocate[abi:nn180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    abort();
  result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void OUTLINED_FUNCTION_0_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

void sub_1828F6730(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828F692C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1828F6BA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828F7074(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)(v2 - 176));
  _Unwind_Resume(a1);
}

void sub_1828F7264(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828F7364(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828F74B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828F7538(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828F7690(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1828F7A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1828F7C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  void *v28;
  uint64_t v29;

  _Block_object_dispose(&a23, 8);
  _Block_object_dispose((const void *)(v29 - 112), 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__110(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__111(uint64_t a1)
{

}

void sub_1828F80B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,CFTypeRef cf)
{
  void *v23;
  void *v24;
  void *v25;

  if (cf)
    CFRelease(cf);
  _Unwind_Resume(a1);
}

void sub_1828F82A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828F839C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828F84FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;

  v27 = v26;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1828F8610(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828F867C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1828F8880(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);

  _Unwind_Resume(a1);
}

void sub_1828F8988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1828F8A30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1828F8DEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__623(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__624(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_1828F9340(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828F94C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1828F954C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1828F95E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828F96AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828F9710(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828F9774(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828F98DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1828F9AC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828F9E20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1828FA07C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828FA1D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t _LSApplicationRecordPersistentIdentifierGetSequenceNumberInternal(void *a1)
{
  void *v3;
  void *v4;

  if ((unint64_t)objc_msgSend(a1, "length") <= 0x23)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "uint64_t _LSApplicationRecordPersistentIdentifierGetSequenceNumberInternal(const __strong LSPersistentIdentifier _Nonnull)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("LSApplicationRecord.mm"), 2912, CFSTR("persistent identifier of length %zu is too short to extract sequence number!"), objc_msgSend(a1, "length"));

  }
  return *(_QWORD *)(objc_msgSend(objc_retainAutorelease(a1), "bytes") + 28);
}

void sub_1828FA348(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828FA398(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828FA47C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828FA5A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828FA624(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1828FA704(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828FA834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  uint64_t v28;

  _Block_object_dispose(&a23, 8);

  _Block_object_dispose((const void *)(v28 - 64), 8);
  _Unwind_Resume(a1);
}

id _LSGetApplicationExtensionDiagnosticDescriptionForBundle(uint64_t a1, unsigned int a2)
{
  id v3;

  v3 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithFormat:", CFSTR("plugins for bundle %llx:"), a2);
  _CSArrayEnumerateAllValues();

  return v3;
}

void sub_1828FA98C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1828FAB3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a9);
  _Unwind_Resume(a1);
}

void ___ZL11_LSIconsLogv_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.launchservices", "icons");
  v1 = (void *)_LSIconsLog(void)::log;
  _LSIconsLog(void)::log = (uint64_t)v0;

}

uint64_t initMobileInstallationCopyAppMetadata(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  uint64_t v5;

  v3 = a1;
  v4 = (void *)MobileInstallationLibrary(void)::frameworkLibrary;
  if (!MobileInstallationLibrary(void)::frameworkLibrary)
  {
    v4 = dlopen("/System/Library/PrivateFrameworks/MobileInstallation.framework/MobileInstallation", 2);
    MobileInstallationLibrary(void)::frameworkLibrary = (uint64_t)v4;
  }
  softLinkMobileInstallationCopyAppMetadata[0] = (uint64_t (*)())dlsym(v4, "MobileInstallationCopyAppMetadata");
  v5 = ((uint64_t (*)(id, uint64_t))softLinkMobileInstallationCopyAppMetadata[0])(v3, a2);

  return v5;
}

void sub_1828FAC30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZL56_LSGetApplicationExtensionDiagnosticDescriptionForBundleP9LSContextjPK12LSBundleDataPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void *v5;
  void *v6;
  id v7;
  void *v8;
  id v9;

  objc_msgSend(*(id *)(a1 + 32), "appendFormat:", CFSTR("\nplugin unit %llx"), a3);
  if (_LSGetPlugin(**(_QWORD **)(a1 + 40), a3))
  {
    v5 = (void *)_CSStringCopyCFString();
    v6 = v5;
    if (v5)
      v7 = v5;
    else
      v7 = (id)_CSStringCopyCFString();
    v9 = v7;

    v8 = (void *)_CSStringCopyCFString();
    objc_msgSend(*(id *)(a1 + 32), "appendFormat:", CFSTR(" with bundleID \"%@\" is for EPID \"%@\""), v9, v8);

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "appendFormat:", CFSTR(" was not found in the database!"));
  }
}

void sub_1828FADB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>>>::__emplace_unique_key_args<unsigned int,unsigned int &,LSApplicationRecordUpdateAvailability>(uint64_t a1, unsigned int *a2, _DWORD *a3, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  _QWORD *v12;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v8 = *a2;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v9 <= v8)
        v4 = v8 % v9;
    }
    else
    {
      v4 = ((_DWORD)v9 - 1) & v8;
    }
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (*((_DWORD *)v12 + 4) == (_DWORD)v8)
              return v12;
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9)
                v13 %= v9;
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
  v12 = operator new(0x20uLL);
  *v12 = 0;
  v12[1] = v8;
  *((_DWORD *)v12 + 4) = *a3;
  v12[3] = *a4;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    v16 = 1;
    if (v9 >= 3)
      v16 = (v9 & (v9 - 1)) != 0;
    v17 = v16 | (2 * v9);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__rehash<true>(a1, v19);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v8)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = ((_DWORD)v9 - 1) & v8;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *v12 = *v21;
LABEL_38:
    *v21 = v12;
    goto LABEL_39;
  }
  *v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v20 + 8 * v4) = a1 + 16;
  if (*v12)
  {
    v22 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9)
        v22 %= v9;
    }
    else
    {
      v22 &= v9 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_1828FAFF0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>>>::__hash_table(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)result = v2;
  *(_QWORD *)(result + 8) = a2[1];
  a2[1] = 0;
  v5 = a2[2];
  v3 = a2 + 2;
  v4 = v5;
  *(_QWORD *)(result + 16) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 24) = v6;
  *(_DWORD *)(result + 32) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 16;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,+[LSApplicationRecord(UserActivity) applicationRecordsForUserActivityType:limit:error:]::$_0 &,std::pair<unsigned int,LSBundleData const*> *,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void ****a6)
{
  uint64_t result;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;

  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,+[LSApplicationRecord(UserActivity) applicationRecordsForUserActivityType:limit:error:]::$_0 &,std::pair<unsigned int,LSBundleData const*> *>(a1, a2, a3, a4, a6);
  result = _LSBundleCompareForActivityContinuationSuitability(***a6, *(_QWORD *)(a5 + 8), *(_QWORD *)(a4 + 8));
  if (result == -1)
  {
    v13 = *(_DWORD *)a4;
    *(_DWORD *)a4 = *(_DWORD *)a5;
    *(_DWORD *)a5 = v13;
    v14 = *(_QWORD *)(a4 + 8);
    *(_QWORD *)(a4 + 8) = *(_QWORD *)(a5 + 8);
    *(_QWORD *)(a5 + 8) = v14;
    result = _LSBundleCompareForActivityContinuationSuitability(***a6, *(_QWORD *)(a4 + 8), *(_QWORD *)(a3 + 8));
    if (result == -1)
    {
      v15 = *(_DWORD *)a3;
      *(_DWORD *)a3 = *(_DWORD *)a4;
      *(_DWORD *)a4 = v15;
      v16 = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = *(_QWORD *)(a4 + 8);
      *(_QWORD *)(a4 + 8) = v16;
      result = _LSBundleCompareForActivityContinuationSuitability(***a6, *(_QWORD *)(a3 + 8), *(_QWORD *)(a2 + 8));
      if (result == -1)
      {
        v17 = *(_DWORD *)a2;
        *(_DWORD *)a2 = *(_DWORD *)a3;
        *(_DWORD *)a3 = v17;
        v18 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
        *(_QWORD *)(a3 + 8) = v18;
        result = _LSBundleCompareForActivityContinuationSuitability(***a6, *(_QWORD *)(a2 + 8), *(_QWORD *)(a1 + 8));
        if (result == -1)
        {
          v19 = *(_DWORD *)a1;
          *(_DWORD *)a1 = *(_DWORD *)a2;
          *(_DWORD *)a2 = v19;
          v20 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
          *(_QWORD *)(a2 + 8) = v20;
        }
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,+[LSApplicationRecord(UserActivity) applicationRecordsForUserActivityType:limit:error:]::$_0 &,std::pair<unsigned int,LSBundleData const*> *>(int *a1, int *a2, int *a3, void ****a4)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t result;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;

  v8 = (uint64_t *)(a2 + 2);
  v9 = (uint64_t *)(a1 + 2);
  v10 = _LSBundleCompareForActivityContinuationSuitability(***a4, *((_QWORD *)a2 + 1), *((_QWORD *)a1 + 1));
  result = _LSBundleCompareForActivityContinuationSuitability(***a4, *((_QWORD *)a3 + 1), *v8);
  if (v10 == -1)
  {
    v15 = *a1;
    if (result == -1)
    {
      *a1 = *a3;
      *a3 = v15;
    }
    else
    {
      *a1 = *a2;
      *a2 = v15;
      v16 = *((_QWORD *)a1 + 1);
      *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = v16;
      result = _LSBundleCompareForActivityContinuationSuitability(***a4, *((_QWORD *)a3 + 1), v16);
      if (result != -1)
        return result;
      v17 = *a2;
      *a2 = *a3;
      *a3 = v17;
      v9 = v8;
    }
    v8 = (uint64_t *)(a3 + 2);
    goto LABEL_10;
  }
  if (result == -1)
  {
    v12 = *a2;
    *a2 = *a3;
    *a3 = v12;
    v13 = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = *((_QWORD *)a3 + 1);
    *((_QWORD *)a3 + 1) = v13;
    result = _LSBundleCompareForActivityContinuationSuitability(***a4, *((_QWORD *)a2 + 1), *v9);
    if (result == -1)
    {
      v14 = *a1;
      *a1 = *a2;
      *a2 = v14;
LABEL_10:
      v18 = *v9;
      *v9 = *v8;
      *v8 = v18;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,+[LSApplicationRecord(UserActivity) applicationRecordsForUserActivityType:limit:error:]::$_0 &,std::pair<unsigned int,LSBundleData const*> *>(uint64_t a1, uint64_t a2, void ****a3)
{
  uint64_t v6;
  _BOOL8 result;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = (a2 - a1) >> 4;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (_LSBundleCompareForActivityContinuationSuitability(***a3, *(_QWORD *)(a2 - 8), *(_QWORD *)(a1 + 8)) == -1)
      {
        v8 = *(_DWORD *)a1;
        *(_DWORD *)a1 = *(_DWORD *)(a2 - 16);
        *(_DWORD *)(a2 - 16) = v8;
        v9 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,+[LSApplicationRecord(UserActivity) applicationRecordsForUserActivityType:limit:error:]::$_0 &,std::pair<unsigned int,LSBundleData const*> *>((int *)a1, (int *)(a1 + 16), (int *)(a2 - 16), a3);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,+[LSApplicationRecord(UserActivity) applicationRecordsForUserActivityType:limit:error:]::$_0 &,std::pair<unsigned int,LSBundleData const*> *>(a1, a1 + 16, a1 + 32, a2 - 16, a3);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,+[LSApplicationRecord(UserActivity) applicationRecordsForUserActivityType:limit:error:]::$_0 &,std::pair<unsigned int,LSBundleData const*> *,0>(a1, a1 + 16, a1 + 32, a1 + 48, a2 - 16, a3);
      return 1;
    default:
      v10 = a1 + 32;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,+[LSApplicationRecord(UserActivity) applicationRecordsForUserActivityType:limit:error:]::$_0 &,std::pair<unsigned int,LSBundleData const*> *>((int *)a1, (int *)(a1 + 16), (int *)(a1 + 32), a3);
      v11 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    if (_LSBundleCompareForActivityContinuationSuitability(***a3, *(_QWORD *)(v11 + 8), *(_QWORD *)(v10 + 8)) == -1)
    {
      v14 = *(_DWORD *)v11;
      v15 = *(_QWORD *)(v11 + 8);
      v16 = v12;
      while (1)
      {
        v17 = a1 + v16;
        *(_DWORD *)(v17 + 48) = *(_DWORD *)(a1 + v16 + 32);
        *(_QWORD *)(v17 + 56) = *(_QWORD *)(a1 + v16 + 40);
        if (v16 == -32)
          break;
        v16 -= 16;
        if (_LSBundleCompareForActivityContinuationSuitability(***a3, v15, *(_QWORD *)(v17 + 24)) != -1)
        {
          v18 = a1 + v16 + 48;
          goto LABEL_12;
        }
      }
      v18 = a1;
LABEL_12:
      *(_DWORD *)v18 = v14;
      *(_QWORD *)(v18 + 8) = v15;
      if (++v13 == 8)
        return v11 + 16 == a2;
    }
    v10 = v11;
    v12 += 16;
    v11 += 16;
    if (v11 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,+[LSApplicationRecord(UserActivity) applicationRecordsForUserActivityType:limit:error:]::$_0 &,std::pair<unsigned int,LSBundleData const*> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void ****a5)
{
  uint64_t result;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,+[LSApplicationRecord(UserActivity) applicationRecordsForUserActivityType:limit:error:]::$_0 &,std::pair<unsigned int,LSBundleData const*> *>((int *)a1, (int *)a2, (int *)a3, a5);
  result = _LSBundleCompareForActivityContinuationSuitability(***a5, *(_QWORD *)(a4 + 8), *(_QWORD *)(a3 + 8));
  if (result == -1)
  {
    v11 = *(_DWORD *)a3;
    *(_DWORD *)a3 = *(_DWORD *)a4;
    *(_DWORD *)a4 = v11;
    v12 = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = *(_QWORD *)(a4 + 8);
    *(_QWORD *)(a4 + 8) = v12;
    result = _LSBundleCompareForActivityContinuationSuitability(***a5, *(_QWORD *)(a3 + 8), *(_QWORD *)(a2 + 8));
    if (result == -1)
    {
      v13 = *(_DWORD *)a2;
      *(_DWORD *)a2 = *(_DWORD *)a3;
      *(_DWORD *)a3 = v13;
      v14 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = v14;
      result = _LSBundleCompareForActivityContinuationSuitability(***a5, *(_QWORD *)(a2 + 8), *(_QWORD *)(a1 + 8));
      if (result == -1)
      {
        v15 = *(_DWORD *)a1;
        *(_DWORD *)a1 = *(_DWORD *)a2;
        *(_DWORD *)a2 = v15;
        v16 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = v16;
      }
    }
  }
  return result;
}

void OUTLINED_FUNCTION_1_0(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x16u);
}

void OUTLINED_FUNCTION_2_0(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x16u);
}

void LSNoteFirstBootForRestrictions()
{
  NSObject *v0;
  const __CFString *v1;
  const __CFString *v2;
  NSObject *v3;
  uint8_t v4[16];
  uint8_t buf[16];

  _LSDefaultLog();
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_182882000, v0, OS_LOG_TYPE_DEFAULT, "Clearing important app restriction state for boot", buf, 2u);
  }

  v1 = (const __CFString *)*MEMORY[0x1E0C9B260];
  v2 = (const __CFString *)*MEMORY[0x1E0C9B230];
  CFPreferencesSetValue(CFSTR("LSLastSeenImportantAppRestrictionStateKey"), 0, CFSTR("com.apple.lsd.restrictionhardening"), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B230]);
  if (!CFPreferencesSynchronize(CFSTR("com.apple.lsd.restrictionhardening"), v1, v2))
  {
    _LSDefaultLog();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_182882000, v3, OS_LOG_TYPE_DEFAULT, "error synchronizing after clearing app restriction state!", v4, 2u);
    }

  }
}

void _applicationStateChangedCallback(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  id v4;

  v4 = a2;
  objc_msgSend(v4, "_MCRestrictionManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "invalidateSettings");

  objc_msgSend(v4, "_MCRestrictionManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "invalidateRestrictions");

  objc_msgSend(v4, "clearAllValues");
}

void sub_1828FBD68(void *a1)
{
  os_unfair_lock_s *v1;

  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_1828FBD7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  objc_end_catch();
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id computeImportantBundleRestrictionState(void *a1)
{
  id v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  const __CFString *v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = CFSTR("com.apple.news");
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v18, 1, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v14, v19, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v15;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v15 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * i);
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", computeIsApplicationRestrictedWithMCStateProvider(v1, v8, 1));
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v2, "setObject:forKeyedSubscript:", v9, v8);

      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v14, v19, 16);
    }
    while (v5);
  }

  v10 = (void *)MEMORY[0x1E0CB37E8];
  v11 = (void *)getMCFeatureNewsTodayAllowed[0]();
  objc_msgSend(v10, "numberWithInt:", !isFeatureAllowed(v11));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v12, CFSTR("com.apple.news.widget"));

  return v2;
}

void saveImportantBundleRestrictionState(void *a1)
{
  id v1;
  NSObject *v2;
  const __CFString *v3;
  const __CFString *v4;
  NSObject *v5;
  int v6;
  id v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  _LSDefaultLog();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v6 = 138543362;
    v7 = v1;
    _os_log_impl(&dword_182882000, v2, OS_LOG_TYPE_DEFAULT, "saving important bundle restriction state %{public}@", (uint8_t *)&v6, 0xCu);
  }

  v3 = (const __CFString *)*MEMORY[0x1E0C9B260];
  v4 = (const __CFString *)*MEMORY[0x1E0C9B230];
  CFPreferencesSetValue(CFSTR("LSLastSeenImportantAppRestrictionStateKey"), v1, CFSTR("com.apple.lsd.restrictionhardening"), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B230]);
  if (!CFPreferencesSynchronize(CFSTR("com.apple.lsd.restrictionhardening"), v3, v4))
  {
    _LSDefaultLog();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v6) = 0;
      _os_log_impl(&dword_182882000, v5, OS_LOG_TYPE_DEFAULT, "error synchronizing after setting app restriction state!", (uint8_t *)&v6, 2u);
    }

  }
}

void sub_1828FC68C(void *a1)
{
  os_unfair_lock_s *v1;

  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_1828FC6A0(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_1828FC930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{

  _Unwind_Resume(a1);
}

void sub_1828FCC88(void *a1)
{
  os_unfair_lock_s *v1;

  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_1828FCC9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  objc_end_catch();
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1828FD4AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;

  _Block_object_dispose(&a35, 8);
  _Block_object_dispose((const void *)(v35 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_1828FD784(void *a1)
{
  os_unfair_lock_s *v1;

  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_1828FD798(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

uint64_t MCEffectiveSettingsChangedNotificationFunction()
{
  return constantMCEffectiveSettingsChangedNotification;
}

Class initMCRestrictionManager()
{
  Class result;

  if (!ManagedConfigurationLibrary_frameworkLibrary)
    ManagedConfigurationLibrary_frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/ManagedConfiguration.framework/ManagedConfiguration", 2);
  result = objc_getClass("MCRestrictionManager");
  classMCRestrictionManager = (uint64_t)result;
  getMCRestrictionManagerClass[0] = (uint64_t (*)())MCRestrictionManagerFunction;
  return result;
}

id MCRestrictionManagerFunction()
{
  return (id)classMCRestrictionManager;
}

uint64_t MCFeatureMaximumAppsRatingFunction()
{
  return constantMCFeatureMaximumAppsRating;
}

uint64_t initMCFeatureRemovedSystemAppBundleIDs()
{
  void *v0;
  uint64_t result;

  v0 = (void *)ManagedConfigurationLibrary_frameworkLibrary;
  if (!ManagedConfigurationLibrary_frameworkLibrary)
  {
    v0 = dlopen("/System/Library/PrivateFrameworks/ManagedConfiguration.framework/ManagedConfiguration", 2);
    ManagedConfigurationLibrary_frameworkLibrary = (uint64_t)v0;
  }
  result = *(_QWORD *)dlsym(v0, "MCFeatureRemovedSystemAppBundleIDs");
  constantMCFeatureRemovedSystemAppBundleIDs = result;
  getMCFeatureRemovedSystemAppBundleIDs[0] = MCFeatureRemovedSystemAppBundleIDsFunction;
  return result;
}

uint64_t MCFeatureRemovedSystemAppBundleIDsFunction()
{
  return constantMCFeatureRemovedSystemAppBundleIDs;
}

uint64_t initMCFeatureNewsAllowed()
{
  void *v0;
  uint64_t result;

  v0 = (void *)ManagedConfigurationLibrary_frameworkLibrary;
  if (!ManagedConfigurationLibrary_frameworkLibrary)
  {
    v0 = dlopen("/System/Library/PrivateFrameworks/ManagedConfiguration.framework/ManagedConfiguration", 2);
    ManagedConfigurationLibrary_frameworkLibrary = (uint64_t)v0;
  }
  result = *(_QWORD *)dlsym(v0, "MCFeatureNewsAllowed");
  constantMCFeatureNewsAllowed = result;
  getMCFeatureNewsAllowed[0] = MCFeatureNewsAllowedFunction;
  return result;
}

uint64_t initMCFeatureNewsTodayAllowed()
{
  void *v0;
  uint64_t result;

  v0 = (void *)ManagedConfigurationLibrary_frameworkLibrary;
  if (!ManagedConfigurationLibrary_frameworkLibrary)
  {
    v0 = dlopen("/System/Library/PrivateFrameworks/ManagedConfiguration.framework/ManagedConfiguration", 2);
    ManagedConfigurationLibrary_frameworkLibrary = (uint64_t)v0;
  }
  result = *(_QWORD *)dlsym(v0, "MCFeatureNewsTodayAllowed");
  constantMCFeatureNewsTodayAllowed = result;
  getMCFeatureNewsTodayAllowed[0] = MCFeatureNewsTodayAllowedFunction;
  return result;
}

uint64_t MCFeatureNewsTodayAllowedFunction()
{
  return constantMCFeatureNewsTodayAllowed;
}

uint64_t initMCFeatureIdentifierForAdvertisingAllowed()
{
  void *v0;
  uint64_t result;

  v0 = (void *)ManagedConfigurationLibrary_frameworkLibrary;
  if (!ManagedConfigurationLibrary_frameworkLibrary)
  {
    v0 = dlopen("/System/Library/PrivateFrameworks/ManagedConfiguration.framework/ManagedConfiguration", 2);
    ManagedConfigurationLibrary_frameworkLibrary = (uint64_t)v0;
  }
  result = *(_QWORD *)dlsym(v0, "MCFeatureIdentifierForAdvertisingAllowed");
  constantMCFeatureIdentifierForAdvertisingAllowed = result;
  getMCFeatureIdentifierForAdvertisingAllowed[0] = MCFeatureIdentifierForAdvertisingAllowedFunction;
  return result;
}

uint64_t initMCFeatureLimitAdTrackingForced()
{
  void *v0;
  uint64_t result;

  v0 = (void *)ManagedConfigurationLibrary_frameworkLibrary;
  if (!ManagedConfigurationLibrary_frameworkLibrary)
  {
    v0 = dlopen("/System/Library/PrivateFrameworks/ManagedConfiguration.framework/ManagedConfiguration", 2);
    ManagedConfigurationLibrary_frameworkLibrary = (uint64_t)v0;
  }
  result = *(_QWORD *)dlsym(v0, "MCFeatureLimitAdTrackingForced");
  constantMCFeatureLimitAdTrackingForced = result;
  getMCFeatureLimitAdTrackingForced[0] = MCFeatureLimitAdTrackingForcedFunction;
  return result;
}

uint64_t MCFeatureLimitAdTrackingForcedFunction()
{
  return constantMCFeatureLimitAdTrackingForced;
}

void OUTLINED_FUNCTION_4_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x16u);
}

void sub_1828FE770(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1828FE860(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;
  void *v2;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1828FEA80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *a14)
{
  void *v14;
  os_unfair_lock_s *v15;
  os_unfair_lock_s *v16;
  void *v17;

  os_unfair_lock_unlock(v16);

  a14 = &a11;
  std::vector<std::shared_ptr<LaunchServices::PerThreadContext>>::__destroy_vector::operator()[abi:nn180100]((void ***)&a14);
  os_unfair_lock_unlock(v15);

  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<LaunchServices::PerThreadContext>>::push_back[abi:nn180100](char **a1, __int128 *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  int64x2_t v26;
  char *v27;
  uint64_t v28;
  int64x2_t v29;
  char *v30;
  uint64_t v31;

  v6 = (unint64_t)a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v12 = (v7 - *a1) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      abort();
    v14 = v5 - (_QWORD)*a1;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    v31 = result;
    v16 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<unsigned int,NSUUID * {__strong}>>>(result, v15);
    v18 = &v16[16 * v12];
    v19 = *a2;
    *(_OWORD *)v18 = *a2;
    if (*((_QWORD *)&v19 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v23 = *a1;
    v22 = a1[1];
    if (v22 == *a1)
    {
      v26 = vdupq_n_s64((unint64_t)v22);
      v24 = &v16[16 * v12];
    }
    else
    {
      v24 = &v16[16 * v12];
      do
      {
        v25 = *((_OWORD *)v22 - 1);
        v22 -= 16;
        *((_OWORD *)v24 - 1) = v25;
        v24 -= 16;
        *(_QWORD *)v22 = 0;
        *((_QWORD *)v22 + 1) = 0;
      }
      while (v22 != v23);
      v26 = *(int64x2_t *)a1;
    }
    v11 = v18 + 16;
    *a1 = v24;
    a1[1] = v18 + 16;
    v29 = v26;
    v27 = a1[2];
    a1[2] = &v16[16 * v17];
    v30 = v27;
    v28 = v26.i64[0];
    result = std::__split_buffer<std::shared_ptr<LaunchServices::PerThreadContext>>::~__split_buffer((uint64_t)&v28);
  }
  else
  {
    *(_QWORD *)v7 = *(_QWORD *)a2;
    v8 = *((_QWORD *)a2 + 1);
    *((_QWORD *)v7 + 1) = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = v7 + 16;
  }
  a1[1] = v11;
  return result;
}

void sub_1828FECD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  os_unfair_lock_s *v10;
  os_unfair_lock_s *v11;

  os_unfair_lock_unlock(v11);
  os_unfair_lock_unlock(v10);

  _Unwind_Resume(a1);
}

void sub_1828FEE2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  os_unfair_lock_s *v10;
  void *v11;

  os_unfair_lock_unlock(v10);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<LaunchServices::PerThreadContext>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E103E030;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<LaunchServices::PerThreadContext>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E103E030;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x186DADEF4);
}

uint64_t std::shared_ptr<LaunchServices::PerThreadContext>::~shared_ptr[abi:nn180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,void *>>>>::reset[abi:nn180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::shared_ptr<LaunchServices::PerThreadContext>::~shared_ptr[abi:nn180100]((uint64_t)v2 + 24);
    operator delete(v2);
  }
}

void std::vector<std::shared_ptr<LaunchServices::PerThreadContext>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::shared_ptr<LaunchServices::PerThreadContext>::~shared_ptr[abi:nn180100](v4 - 16);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__split_buffer<std::shared_ptr<LaunchServices::PerThreadContext>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    std::shared_ptr<LaunchServices::PerThreadContext>::~shared_ptr[abi:nn180100](i - 16);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::__unordered_map_hasher<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::hash<_opaque_pthread_t *>,std::equal_to<_opaque_pthread_t *>,true>,std::__unordered_map_equal<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::equal_to<_opaque_pthread_t *>,std::hash<_opaque_pthread_t *>,true>,std::allocator<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::__unordered_map_hasher<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::hash<_opaque_pthread_t *>,std::equal_to<_opaque_pthread_t *>,true>,std::__unordered_map_equal<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::equal_to<_opaque_pthread_t *>,std::hash<_opaque_pthread_t *>,true>,std::allocator<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::__unordered_map_hasher<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::hash<_opaque_pthread_t *>,std::equal_to<_opaque_pthread_t *>,true>,std::__unordered_map_equal<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::equal_to<_opaque_pthread_t *>,std::hash<_opaque_pthread_t *>,true>,std::allocator<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::shared_ptr<LaunchServices::PerThreadContext>::~shared_ptr[abi:nn180100]((uint64_t)(v2 + 3));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void _LSServer_RefreshContentInFrameworkAtURL(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  NSObject *v8;
  _QWORD v9[4];
  id v10;
  id v11;
  id v12;
  id v13;

  v3 = a1;
  v4 = a2;
  _LSAssertRunningInServer((uint64_t)"void _LSServer_RefreshContentInFrameworkAtURL(NSURL *__strong, void (^__strong)(NSError *__strong))");
  v13 = 0;
  ((void (*)(void *, void *, uint64_t))softLinkMobileInstallationCopyFrameworkInfoForLaunchServices[0])(v3, 0, (uint64_t)&v13);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v13;
  if (v5)
  {
    _LSServer_DatabaseExecutionContext();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = ___LSServer_RefreshContentInFrameworkAtURL_block_invoke;
    v9[3] = &unk_1E10406E8;
    v10 = v3;
    v11 = v5;
    v12 = v4;
    -[LSDBExecutionContext syncWrite:]((uint64_t)v7, v9);

  }
  else
  {
    _LSInstallLog();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      _LSServer_RefreshContentInFrameworkAtURL_cold_1();

    (*((void (**)(id, id))v4 + 2))(v4, v6);
  }

}

void sub_1828FF82C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31)
{

  _Unwind_Resume(a1);
}

id __copy_helper_block_e8_40n6_8_8_s0(uint64_t a1, uint64_t a2)
{
  id result;

  result = *(id *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_40n4_8_s0(uint64_t a1)
{

}

void _registerMIPluginDictionary(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  const void *Unique;
  id v13;
  NSObject *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  _QWORD block[4];
  id v29;
  void *v30;
  _QWORD v31[2];

  v31[1] = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  kdebug_trace();
  objc_msgSend(v3, "objectForKey:", *MEMORY[0x1E0C9AE78]);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)objc_msgSend(v3, "mutableCopy");
  objc_msgSend(v3, "objectForKey:", CFSTR("Entitlements"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "objectForKey:", CFSTR("com.apple.developer.replace-plugin"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v8)
    objc_msgSend(v4, "addObject:", v8);
  if (objc_msgSend(v4, "containsObject:", v5))
    objc_msgSend(v6, "setObject:forKey:", MEMORY[0x1E0C9AAB0], CFSTR("LSHasOverride"));
  v9 = objc_alloc(MEMORY[0x1E0C99E98]);
  objc_msgSend(v3, "objectForKey:", CFSTR("Path"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = (void *)objc_msgSend(v9, "initFileURLWithPath:isDirectory:", v10, 1);

  Unique = (const void *)_CFBundleCreateUnique();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("LaunchServices: registering extension %@"));
  v13 = (id)objc_claimAutoreleasedReturnValue();
  v27 = v7;
  if (_LSLoggingQueue_onceToken != -1)
    dispatch_once(&_LSLoggingQueue_onceToken, &__block_literal_global_905);
  v14 = _LSLoggingQueue_logQueue;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___LSSetCrashMessage_block_invoke;
  block[3] = &unk_1E1040478;
  v29 = v13;
  v15 = v13;
  dispatch_sync(v14, block);

  _LSLogStepStart(4, 0, v5, CFSTR("registering app extension"), v16, v17, v18, v19, (uint64_t)v5);
  v30 = v5;
  v31[0] = v6;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v31, &v30, 1);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = _LSRegisterPluginWithInfo(v11, v20);

  _LSLogStepFinished(4, v21 == 0, v5, CFSTR("registered app extension"), v22, v23, v24, v25, v26);
  if (Unique)
    CFRelease(Unique);
  kdebug_trace();

}

uint64_t _LSUnregisterAppWithBundleIDUsingContext(void *a1, unsigned int a2, void **a3, int *a4)
{
  _BOOL4 v7;
  _BOOL4 v8;
  _BOOL4 v9;
  NSObject *v10;
  const __CFString *v11;
  _BOOL4 v12;
  int v13;
  NSObject *v14;
  const __CFString *v15;
  uint64_t v16;
  NSObject *v17;
  void *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  NSObject *v25;
  NSObject *v26;
  NSObject *v27;
  void *v28;
  NSObject *v29;
  void *v30;
  NSObject *v31;
  void *v32;
  int v35;
  void *v36;
  int v37;
  _QWORD v38[5];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint8_t buf[32];
  int v43;
  __int16 v44;
  int v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v7 = (a2 & 1) == 0;
  v8 = (a2 & 2) == 0;
  v40 = 0;
  v41 = 0;
  v39 = 0;
  memset(buf, 0, sizeof(buf));
  v9 = _LSBundleFindWithInfoAndNo_IOFilter((uint64_t)a3, 0, a1, 0, buf, 2, 1152, 0, 0, &v41, &v39, 0);
  _LSInstallLog();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    if (v9)
      v11 = CFSTR("Found");
    else
      v11 = CFSTR("No");
    *(_DWORD *)buf = 138412546;
    *(_QWORD *)&buf[4] = v11;
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = a1;
    _os_log_impl(&dword_182882000, v10, OS_LOG_TYPE_DEFAULT, "%@ placeholder to remove for %@", buf, 0x16u);
  }

  memset(buf, 0, sizeof(buf));
  if (_LSBundleFindWithInfoAndNo_IOFilter((uint64_t)a3, 0, a1, 0, buf, 2, 128, 0, 0, (_DWORD *)&v41 + 1, &v40, 0))
  {
    v12 = 1;
  }
  else
  {
    memset(buf, 0, sizeof(buf));
    v12 = _LSBundleFindWithInfoAndNo_IOFilter((uint64_t)a3, 0, a1, 0, buf, 13, 128, 0, 0, (_DWORD *)&v41 + 1, &v40, 0);
  }
  v13 = a2 & v8;
  _LSInstallLog();
  v14 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    if (v12)
      v15 = CFSTR("Found");
    else
      v15 = CFSTR("No");
    *(_DWORD *)buf = 138412546;
    *(_QWORD *)&buf[4] = v15;
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = a1;
    _os_log_impl(&dword_182882000, v14, OS_LOG_TYPE_DEFAULT, "%@ app to remove for %@", buf, 0x16u);
  }

  if ((v13 & v9 & v12) == 1)
  {
    v16 = _LSUnregisterBundle(a3, v41, 0);
    _LSInstallLog();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", (_DWORD)v16 == 0);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412546;
      *(_QWORD *)&buf[4] = a1;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v18;
      _os_log_impl(&dword_182882000, v17, OS_LOG_TYPE_DEFAULT, "_LSUnregisterBundle(%@) returned %@ for placeholder only", buf, 0x16u);

    }
    v19 = 0;
    v20 = 10;
  }
  else if (v12 || v9)
  {
    v21 = v7 & (a2 >> 1);
    v22 = (a2 >> 2) & 1;
    v23 = !v9;
    v19 = v21 ^ 1 | !v9;
    v37 = v22;
    if (v19 != 1)
      goto LABEL_30;
    +[_LSDDeviceIdentifierService clearIdentifiersForUninstallationWithContext:bundleUnit:bundleData:](_LSDDeviceIdentifierService, "clearIdentifiersForUninstallationWithContext:bundleUnit:bundleData:", a3, HIDWORD(v41), v40);
    v38[0] = MEMORY[0x1E0C809B0];
    v38[1] = 3221225472;
    v38[2] = ___LSUnregisterAppWithBundleIDUsingContext_block_invoke;
    v38[3] = &__block_descriptor_40_e20_v20__0B8__NSError_12l;
    v38[4] = a1;
    _LSHandlerPrefRemoveAllWithBundleID(a1, v38);
    v24 = v22 ? 0 : v21 ^ 1;
    if ((v24 & v9) == 1)
    {
      v35 = _LSUnregisterBundle(a3, v41, 0);
      _LSInstallLog();
      v25 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v35 == 0);
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412546;
        *(_QWORD *)&buf[4] = a1;
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = v36;
        _os_log_impl(&dword_182882000, v25, OS_LOG_TYPE_DEFAULT, "_LSUnregisterBundle(%@) returned %@ for placeholder", buf, 0x16u);

      }
      v20 = 9;
    }
    else
    {
LABEL_30:
      v20 = 0;
    }
    if ((v12 & (v13 ^ 1)) == 1)
    {
      v16 = _LSUnregisterBundle(a3, HIDWORD(v41), 0);
      _LSInstallLog();
      v27 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", (_DWORD)v16 == 0);
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412546;
        *(_QWORD *)&buf[4] = a1;
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = v28;
        _os_log_impl(&dword_182882000, v27, OS_LOG_TYPE_DEFAULT, "_LSUnregisterBundle(%@) returned %@ for app", buf, 0x16u);

      }
      if (v21 ^ 1 | v23)
        v20 = 8;
      else
        v20 = 5;
    }
    else
    {
      _LSInstallLog();
      v29 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138413570;
        *(_QWORD *)&buf[4] = a1;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v12;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v9;
        *(_WORD *)&buf[24] = 1024;
        *(_DWORD *)&buf[26] = v21;
        *(_WORD *)&buf[30] = 1024;
        v43 = v13;
        v44 = 1024;
        v45 = v37;
        _os_log_impl(&dword_182882000, v29, OS_LOG_TYPE_DEFAULT, "no bundles to remove for %@ (found app: %d placeholder: %d app only: %d placeholder only: %d placeholder only if parallel: %d)", buf, 0x2Au);
      }

      v16 = 0;
    }
  }
  else
  {
    _LSInstallLog();
    v26 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = a1;
      _os_log_impl(&dword_182882000, v26, OS_LOG_TYPE_DEFAULT, "No bundles to remove for %@", buf, 0xCu);
    }

    v19 = 0;
    v16 = 0;
    v20 = 0;
  }
  v30 = (void *)MEMORY[0x186DAE7A0]();
  _LSInstallLog();
  v31 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = a1;
    _os_log_impl(&dword_182882000, v31, OS_LOG_TYPE_DEFAULT, "Clearing icon cache entries for %@", buf, 0xCu);
  }

  if ((IconServicesLibrary_frameworkLibrary_0
     || (IconServicesLibrary_frameworkLibrary_0 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/IconServices.framework/IconServices", 2)) != 0)&& (objc_msgSend((id)__LSDefaultsGetSharedInstance(), "isLightweightSystemServer") & 1) == 0)
  {
    ((void (*)(void *))softLink_ISInvalidateCacheEntriesForBundleIdentifier[0])(a1);
    if (v19)
    {
      if (objc_msgSend((id)__LSDefaultsGetSharedInstance(), "isServer"))
      {
        +[LSAltIconManager sharedInstance](LSAltIconManager, "sharedInstance");
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v32, "clearAlternateNameForBundleIdentifier:validationDictionary:", a1, 0);

      }
    }
  }
  objc_autoreleasePoolPop(v30);
  if (a4)
    *a4 = v20;
  return v16;
}

uint64_t _LSUnregisterAppWithBundleID(void **a1, void *a2, unsigned int a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFString *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v29;
  void *v30;

  v12 = CFSTR(" (placeholder only)");
  if ((a3 & 3) != 1)
    v12 = &stru_1E10473A0;
  v30 = 0;
  _LSLogStepStart(6, 0, a2, CFSTR("Beginning _LSUnregisterAppWithBundleID%@%@%@"), a5, a6, a7, a8, (uint64_t)v12);
  if (a1)
  {
    if (a2)
    {
LABEL_5:
      v17 = _LSUnregisterAppWithBundleIDUsingContext(a2, a3, a1, a4);
      goto LABEL_11;
    }
  }
  else
  {
    v17 = _LSContextInit(&v30);
    if ((_DWORD)v17)
      goto LABEL_14;
    a1 = &v30;
    if (a2)
      goto LABEL_5;
  }
  _LSDefaultLog();
  v18 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    _LSUnregisterAppWithBundleID_cold_2(v18, v19, v20, v21, v22, v23, v24, v25);

  v17 = 4294967246;
LABEL_11:
  if (a1 == &v30)
    _LSContextDestroy(&v30);
  if (!(_DWORD)v17)
  {
    v27 = 1;
    goto LABEL_18;
  }
LABEL_14:
  _LSDefaultLog();
  v26 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    _LSUnregisterAppWithBundleID_cold_1();

  v27 = 0;
LABEL_18:
  _LSLogStepFinished(6, v27, a2, CFSTR("Finished _LSUnregisterAppWithBundleID"), v13, v14, v15, v16, v29);

  return v17;
}

void sub_182900510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

void _LSLogStepStart(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v11;
  objc_class *v12;
  id v13;

  v11 = a3;
  if (a4)
  {
    v12 = (objc_class *)MEMORY[0x1E0CB3940];
    v13 = a4;
    a4 = (void *)objc_msgSend([v12 alloc], "initWithFormat:arguments:", v13, &a9);

  }
  objc_msgSend((Class)getAITransactionLogClass[0](), "logStep:byParty:phase:success:forBundleID:description:", a1, 5, 1, 1, v11, a4);

}

void _LSLogStepFinished(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v12;
  objc_class *v13;
  id v14;

  v12 = a3;
  if (a4)
  {
    v13 = (objc_class *)MEMORY[0x1E0CB3940];
    v14 = a4;
    a4 = (void *)objc_msgSend([v13 alloc], "initWithFormat:arguments:", v14, &a9);

  }
  objc_msgSend((Class)getAITransactionLogClass[0](), "logStep:byParty:phase:success:forBundleID:description:", a1, 5, 2, a2, v12, a4);

}

void _LSInvokeMIForShimmedInstall(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  NSObject *v9;
  id v10;
  id v11;
  id v12;
  _QWORD block[4];
  id v14;
  id v15;
  id v16;
  uint8_t buf[4];
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  _LSInstallLog();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v18 = v5;
    _os_log_impl(&dword_182882000, v8, OS_LOG_TYPE_DEFAULT, "Processing install of %@... later.", buf, 0xCu);
  }

  getShimInvokeQueue();
  v9 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___LSInvokeMIForShimmedInstall_block_invoke;
  block[3] = &unk_1E1040738;
  v14 = v5;
  v15 = v6;
  v16 = v7;
  v10 = v7;
  v11 = v6;
  v12 = v5;
  dispatch_async(v9, block);

}

id getShimInvokeQueue()
{
  if (getShimInvokeQueue_onceToken != -1)
    dispatch_once(&getShimInvokeQueue_onceToken, &__block_literal_global_860);
  return (id)getShimInvokeQueue_queue;
}

void _LSInvokeMIForShimmedUninstall(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  NSObject *v9;
  id v10;
  id v11;
  id v12;
  _QWORD block[4];
  id v14;
  id v15;
  id v16;
  uint8_t buf[4];
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  _LSInstallLog();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v18 = v5;
    _os_log_impl(&dword_182882000, v8, OS_LOG_TYPE_DEFAULT, "Processing uninstall of %@... later.", buf, 0xCu);
  }

  getShimInvokeQueue();
  v9 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___LSInvokeMIForShimmedUninstall_block_invoke;
  block[3] = &unk_1E1040738;
  v14 = v5;
  v15 = v6;
  v16 = v7;
  v10 = v7;
  v11 = v6;
  v12 = v5;
  dispatch_async(v9, block);

}

void sub_182900F30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_182901560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void LSApplicationWorkspaceNotificationCallback(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  const char *v14;
  id v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  id v24;

  if ((objc_msgSend(a3, "isEqualToString:", CFSTR("com.lsinstallprogress.appcontrols.cancel")) & 1) != 0
    || (objc_msgSend(a3, "isEqualToString:", CFSTR("com.lsinstallprogress.appcontrols.pause")) & 1) != 0
    || (objc_msgSend(a3, "isEqualToString:", CFSTR("com.lsinstallprogress.appcontrols.prioritize")) & 1) != 0
    || (objc_msgSend(a3, "isEqualToString:", CFSTR("com.lsinstallprogress.appcontrols.resume")) & 1) != 0
    || objc_msgSend(a3, "isEqualToString:", CFSTR("com.lsinstallprogress.networkusagechanged")))
  {
    v8 = a5;
    v9 = a3;
    objc_msgSend(a2, "remoteObserver");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = MEMORY[0x1E0C809B0];
    v19 = 3221225472;
    v20 = __LSApplicationWorkspaceObserverCallback_block_invoke;
    v21 = &unk_1E1041398;
    v22 = v9;
    v23 = v8;
    v24 = v10;
    v11 = v9;
    v12 = v8;
    v13 = v10;
    v14 = "com.apple.launchservices.LSApplicationWorkspaceObserverCallback";
LABEL_7:
    dispatchAsyncToCallbackQueueWithTransaction((uint64_t)v14, &v18);

    return;
  }
  if ((objc_msgSend(a3, "isEqualToString:", CFSTR("com.apple.LaunchServices.pluginsregistered")) & 1) != 0
    || (objc_msgSend(a3, "isEqualToString:", CFSTR("com.apple.LaunchServices.pluginsunregistered")) & 1) != 0
    || objc_msgSend(a3, "isEqualToString:", CFSTR("com.apple.LaunchServices.pluginswillberemoved")))
  {
    v15 = a5;
    v16 = a3;
    objc_msgSend(a2, "remoteObserver");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = MEMORY[0x1E0C809B0];
    v19 = 3221225472;
    v20 = __LSApplicationWorkspacePluginsChangedCallback_block_invoke;
    v21 = &unk_1E1041398;
    v22 = v16;
    v23 = v15;
    v24 = v17;
    v11 = v16;
    v12 = v15;
    v13 = v17;
    v14 = "com.apple.launchservices.LSApplicationWorkspacePluginsChangedCallback";
    goto LABEL_7;
  }
  if (objc_msgSend(a3, "isEqualToString:", CFSTR("com.apple.LaunchServices.applicationStateChanged")))
    LSApplicationStateChangedCallback(a2, (uint64_t)a3, a5);
}

void sub_182901B08(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void unsubscribeFromLSAWDistributedNotification(const __CFString *a1)
{
  _QWORD v1[5];

  v1[0] = MEMORY[0x1E0C809B0];
  v1[1] = 3221225472;
  v1[2] = __unsubscribeFromLSAWDistributedNotification_block_invoke;
  v1[3] = &__block_descriptor_40_e8_I12__0I8l;
  v1[4] = a1;
  mutateSubscriberCountForNotificationName(a1, v1);
}

void sub_182901E2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_182902034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t getFileHandleForOpeningResource(void *a1, void *a2, void *a3, _QWORD *a4, _QWORD *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  _QWORD v27[2];

  v27[1] = *MEMORY[0x1E0C80C00];
  v9 = a1;
  v10 = a2;
  v11 = a3;
  v12 = v10;
  if ((objc_msgSend(v9, "isFileURL") & 1) == 0)
  {

    goto LABEL_13;
  }
  v13 = objc_opt_class();
  objc_msgSend(v11, "objectForKey:", CFSTR("FileProviderString"));
  v14 = objc_claimAutoreleasedReturnValue();
  v15 = (void *)v14;
  if (v13 && v14)
  {
    if ((objc_opt_isKindOfClass() & 1) != 0)
      goto LABEL_12;

  }
  else if (v14)
  {
    goto LABEL_12;
  }
  v16 = objc_opt_class();
  objc_msgSend(v12, "objectForKey:", CFSTR("FileProviderString"));
  v17 = objc_claimAutoreleasedReturnValue();
  v15 = (void *)v17;
  if (v16 && v17 && (objc_opt_isKindOfClass() & 1) == 0)
  {

    v15 = 0;
  }
LABEL_12:

  if (v15)
  {
LABEL_13:
    v18 = 0;
    if (a4)
    {
LABEL_14:
      v18 = objc_retainAutorelease(v18);
      v19 = 0;
      *a4 = v18;
LABEL_18:
      v21 = 1;
      goto LABEL_19;
    }
LABEL_17:
    v19 = 0;
    goto LABEL_18;
  }
  v20 = open((const char *)objc_msgSend(objc_retainAutorelease(v9), "fileSystemRepresentation"), 0);
  if ((v20 & 0x80000000) == 0)
  {
    v18 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3608]), "initWithFileDescriptor:closeOnDealloc:", v20, 1);
    if (a4)
      goto LABEL_14;
    goto LABEL_17;
  }
  v23 = (void *)*MEMORY[0x1E0CB2FE0];
  v24 = *__error();
  v26 = *MEMORY[0x1E0CB2938];
  v27[0] = CFSTR("open(2) failed when opening resource to open");
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v27, &v26, 1);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  _LSMakeNSErrorImpl(v23, v24, (uint64_t)"getFileHandleForOpeningResource", 1856, v25);
  v19 = (id)objc_claimAutoreleasedReturnValue();

  if (a5)
  {
    v19 = objc_retainAutorelease(v19);
    v18 = 0;
    v21 = 0;
    *a5 = v19;
  }
  else
  {
    v18 = 0;
    v21 = 0;
  }
LABEL_19:

  return v21;
}

void sub_1829034CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void _LSCommonOpenApplicationWithBundleIdentifier(void *a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  uint64_t v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  _QWORD v20[4];
  id v21;
  void (*v22[4])(_QWORD, _QWORD);
  id v23;

  v9 = a1;
  v10 = a2;
  v11 = a3;
  v12 = a5;
  if (!v10)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _LSCommonOpenApplicationWithBundleIdentifier(LSApplicationWorkspace *__strong, NSString *__strong, _LSOpenConfiguration *__strong, BOOL, void (^__strong)(BOOL, NSError *__strong))");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "handleFailureInFunction:file:lineNumber:description:", v19, CFSTR("LSApplicationWorkspace.m"), 2167, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("bundleIdentifier != nil"));

  }
  objc_msgSend(v9, "optionsFromOpenConfiguration:", v11);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = MEMORY[0x1E0C809B0];
  v22[0] = (void (*)(_QWORD, _QWORD))MEMORY[0x1E0C809B0];
  v22[1] = (void (*)(_QWORD, _QWORD))3221225472;
  v22[2] = (void (*)(_QWORD, _QWORD))___LSCommonOpenApplicationWithBundleIdentifier_block_invoke;
  v22[3] = (void (*)(_QWORD, _QWORD))&unk_1E1040A40;
  v15 = v12;
  v23 = v15;
  +[_LSDService XPCProxyWithErrorHandler:]((uint64_t)_LSDOpenService, v22);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v20[0] = v14;
  v20[1] = 3221225472;
  v20[2] = ___LSCommonOpenApplicationWithBundleIdentifier_block_invoke_2;
  v20[3] = &unk_1E1041448;
  v21 = v15;
  v17 = v15;
  objc_msgSend(v16, "openApplicationWithIdentifier:options:useClientProcessHandle:completionHandler:", v10, v13, a4, v20);

}

void enumeratePluginsMatchingQuery(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;

  v3 = a2;
  v4 = a1;
  +[_LSQueryContext defaultContext](_LSQueryContext, "defaultContext");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __enumeratePluginsMatchingQuery_block_invoke;
  v7[3] = &unk_1E1040BF8;
  v8 = v3;
  v6 = v3;
  objc_msgSend(v5, "enumerateResolvedResultsOfQuery:withBlock:", v4, v7);

}

id mapBundleIdentifiersToUUIDs(int a1, void *a2, _QWORD *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  _QWORD v14[6];
  char v15;
  void (*v16[5])(_QWORD, _QWORD);
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  void (*v21)(uint64_t);
  id v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t);
  void (*v27)(uint64_t);
  id v28;

  v5 = a2;
  v23 = 0;
  v24 = &v23;
  v25 = 0x3032000000;
  v26 = __Block_byref_object_copy__4;
  v27 = __Block_byref_object_dispose__4;
  v28 = 0;
  v17 = 0;
  v18 = &v17;
  v19 = 0x3032000000;
  v20 = __Block_byref_object_copy__4;
  v21 = __Block_byref_object_dispose__4;
  v22 = 0;
  v6 = MEMORY[0x1E0C809B0];
  v16[0] = (void (*)(_QWORD, _QWORD))MEMORY[0x1E0C809B0];
  v16[1] = (void (*)(_QWORD, _QWORD))3221225472;
  v16[2] = (void (*)(_QWORD, _QWORD))__mapBundleIdentifiersToUUIDs_block_invoke;
  v16[3] = (void (*)(_QWORD, _QWORD))&unk_1E10407A0;
  v16[4] = (void (*)(_QWORD, _QWORD))&v17;
  +[_LSDService synchronousXPCProxyWithErrorHandler:]((uint64_t)_LSDReadService, v16);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v7;
  v14[0] = v6;
  if (a1)
    v9 = 0;
  else
    v9 = v5;
  v14[1] = 3221225472;
  if (a1)
    v10 = v5;
  else
    v10 = 0;
  v14[2] = __mapBundleIdentifiersToUUIDs_block_invoke_2;
  v14[3] = &unk_1E1041490;
  v15 = a1;
  v14[4] = &v23;
  v14[5] = &v17;
  objc_msgSend(v7, "mapBundleIdentifiers:orMachOUUIDs:completionHandler:", v9, v10, v14);
  v11 = (void *)v24[5];
  if (a3 && !v11)
  {
    *a3 = objc_retainAutorelease((id)v18[5]);
    v11 = (void *)v24[5];
  }
  v12 = v11;

  _Block_object_dispose(&v17, 8);
  _Block_object_dispose(&v23, 8);

  return v12;
}

void sub_1829046E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1829049EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;

  _Block_object_dispose(&a22, 8);
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose((const void *)(v28 - 152), 8);
  _Unwind_Resume(a1);
}

id serviceDomainForRequestContext(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v1 = a1;
  +[_LSDServiceDomain defaultServiceDomain]();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "targetUserID");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    objc_msgSend(v1, "targetUserID");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "intValue");

    if ((_DWORD)v5)
    {
      v6 = -[_LSDServiceDomain initWithUID:]([_LSDServiceDomain alloc], v5);
    }
    else
    {
      +[_LSDServiceDomain systemSessionDomain]();
      v6 = objc_claimAutoreleasedReturnValue();
    }
    v7 = (void *)v6;

    v2 = v7;
  }

  return v2;
}

void handleSaveObserverBehavior(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  uint64_t v12;
  id v13;
  id v14;
  void *v15;
  NSObject *v16;
  void *v17;
  _QWORD v18[4];
  id v19;
  id v20;
  _QWORD v21[4];
  id v22;
  id v23;

  v7 = a1;
  v8 = a2;
  v9 = a3;
  v10 = a4;
  v11 = v10;
  if (v7)
  {
    if (v10)
    {
      objc_msgSend(v7, "operationWithUUID:didFailToSaveWithError:", v9, v10);
    }
    else if (v8)
    {
      v12 = MEMORY[0x1E0C809B0];
      v21[0] = MEMORY[0x1E0C809B0];
      v21[1] = 3221225472;
      v21[2] = __handleSaveObserverBehavior_block_invoke;
      v21[3] = &unk_1E10414B8;
      v13 = v7;
      v22 = v13;
      v14 = v9;
      v23 = v14;
      objc_msgSend(v8, "remoteObjectProxyWithErrorHandler:", v21);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v18[0] = v12;
      v18[1] = 3221225472;
      v18[2] = __handleSaveObserverBehavior_block_invoke_2;
      v18[3] = &unk_1E10414E0;
      v19 = v13;
      v20 = v14;
      objc_msgSend(v15, "waitForResult:", v18);

    }
    else
    {
      _LSInstallLog();
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
        handleSaveObserverBehavior_cold_1();

      _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], -10810, (uint64_t)"handleSaveObserverBehavior", 2460, 0);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "operationWithUUID:didFailToSaveWithError:", v9, v17);

    }
  }

}

void sub_18290516C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;

  _Block_object_dispose(&a22, 8);
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose((const void *)(v28 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_1829054AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;

  _Block_object_dispose(&a22, 8);
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose((const void *)(v28 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_1829057AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1829059F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_182906098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_182906358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_182906590(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1829067C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_182906A88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t registerApplicationWithDictionary(void *a1, unsigned int a2)
{
  FSNode *v3;
  void *v4;
  int v5;
  void *v6;
  int v7;
  void *v8;
  void *v9;
  const __CFString *v10;
  const __CFString *v11;
  id v12;
  NSObject *v13;
  id v14;
  void *v15;
  uint64_t v16;
  void *v17;
  char v18;
  LSBundleData *v20;
  unsigned int v21;
  id v22;
  LSContext v23;
  _QWORD block[4];
  id v25;

  v3 = a1;
  kdebug_trace();
  v22 = 0;
  v23.db = 0;
  v21 = 0;
  v20 = 0;
  -[FSNode objectForKey:](v3, "objectForKey:", CFSTR("IsPlaceholder"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "BOOLValue");

  -[FSNode objectForKey:](v3, "objectForKey:", CFSTR("IsParallelPlaceholder"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "BOOLValue");

  -[FSNode objectForKey:](v3, "objectForKey:", *MEMORY[0x1E0C9AE78]);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[FSNode objectForKey:](v3, "objectForKey:", CFSTR("Path"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9)
  {
    v10 = &stru_1E10473A0;
    if (v7)
      v10 = CFSTR("(parallel)");
    v11 = CFSTR("app bundle");
    if (v5)
      v11 = CFSTR("placeholder");
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("LaunchServices: registering %@%@ for %@"), v10, v11, v8);
    v12 = (id)objc_claimAutoreleasedReturnValue();
    if (_LSLoggingQueue_onceToken != -1)
      dispatch_once(&_LSLoggingQueue_onceToken, &__block_literal_global_905);
    v13 = _LSLoggingQueue_logQueue;
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = ___LSSetCrashMessage_block_invoke;
    block[3] = &unk_1E1040478;
    v25 = v12;
    v14 = v12;
    dispatch_sync(v13, block);

    v15 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E98]), "initFileURLWithPath:isDirectory:", v9, 1);
    v16 = FSNodeCreateWithURL((uint64_t)v15, 0, &v22);

    if (!(_DWORD)v16)
    {
      v16 = _LSContextInit((id *)&v23.db);
      if (!(_DWORD)v16)
      {
        v16 = _LSFindOrRegisterBundleNode(&v23, v22, 0, (((a2 >> 30) & 1) == 0) | a2 | 0x2000000, v3, &v21, &v20);
        if (!(_DWORD)v16)
        {
          if ((objc_msgSend((id)__LSDefaultsGetSharedInstance(), "isLightweightSystemServer") & 1) == 0)
          {
            -[FSNode objectForKeyedSubscript:](v3, "objectForKeyedSubscript:", CFSTR("IsPlaceholder"));
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            v18 = objc_msgSend(v17, "BOOLValue");

            if ((v18 & 1) == 0)
              +[_LSDDeviceIdentifierService generateIdentifiersForInstallationWithContext:bundleUnit:bundleData:](_LSDDeviceIdentifierService, "generateIdentifiersForInstallationWithContext:bundleUnit:bundleData:", &v23, v21, v20);
          }
          if (_LSLoggingQueue_onceToken != -1)
            dispatch_once(&_LSLoggingQueue_onceToken, &__block_literal_global_905);
          dispatch_sync((dispatch_queue_t)_LSLoggingQueue_logQueue, &__block_literal_global_904);
        }
        _LSContextDestroy((void **)&v23.db);
      }
    }
  }
  else
  {
    v16 = 4294967246;
  }
  kdebug_trace();

  return v16;
}

void sub_182906F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{

  _Unwind_Resume(a1);
}

void sub_18290729C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

void sub_1829074DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_182907780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;

  _Block_object_dispose(&a26, 8);
  _Block_object_dispose(&a32, 8);
  _Block_object_dispose((const void *)(v32 - 136), 8);
  _Unwind_Resume(a1);
}

uint64_t _updatePlaceholderInstallType(void *a1, void *a2, uint64_t a3, _QWORD *a4)
{
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  id v22;
  const __CFString *v23;
  _QWORD v24[2];

  v24[1] = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a2;
  v9 = v8;
  if (a3
    && (((void (*)(void *, uint64_t, uint64_t, void *, uint64_t))softLinkMobileInstallationUpdatePlaceholderMetadata[0])(v8, a3, 0, 0, 0), (v10 = objc_claimAutoreleasedReturnValue()) != 0))
  {
    v11 = (id)v10;
    _LSInstallLog();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      -[LSApplicationWorkspace updatePlaceholderMetadataForApp:installType:failure:underlyingError:source:outError:].cold.1();

    v17 = 0;
  }
  else
  {
    v23 = CFSTR("LSInstallType");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a3);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v24[0] = v18;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v24, &v23, 1);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = 0;
    v17 = objc_msgSend(v7, "updateRecordForApp:withSINF:iTunesMetadata:placeholderMetadata:sendNotification:operationUUID:outSaveToken:error:", v9, 0, 0, v19, 1, v20, 0, &v22);
    v11 = v22;

    _LSContextInvalidate();
  }
  _LSLogStepFinished(11, v17, v9, CFSTR("Updated Placeholder install type with error %@"), v13, v14, v15, v16, (uint64_t)v11);
  if (a4)
    *a4 = objc_retainAutorelease(v11);

  return v17;
}

BOOL _LSUnregisterPluginsAtURL(void *a1, _QWORD *a2)
{
  const __CFURL *v3;
  int inited;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  int v12;
  int v13;
  void *v14;
  _BOOL8 v15;
  uint64_t v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  id v22;
  void *v23;
  uint64_t v24;
  const __CFString *v25;
  _BYTE v26[128];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (v3)
  {
    v22 = 0;
    v23 = 0;
    inited = _LSContextInitReturningError(&v23, &v22);
    v5 = v22;
    if (!inited)
    {
      v13 = 0;
      goto LABEL_23;
    }
    v6 = (void *)_LSCopyPluginsWithURL((uint64_t)&v23, v3);
    v7 = v6;
    if (v6)
    {
      if (!objc_msgSend(v6, "count"))
      {
        v13 = 1;
LABEL_22:
        _LSContextDestroy(&v23);

LABEL_23:
        v15 = v13 != 0;
        if (!a2)
          goto LABEL_26;
        goto LABEL_24;
      }
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      objc_msgSend(MEMORY[0x1E0C99E60], "setWithArray:", v7, 0);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v18, v26, 16);
      if (v9)
      {
        v10 = *(_QWORD *)v19;
        while (2)
        {
          for (i = 0; i != v9; ++i)
          {
            if (*(_QWORD *)v19 != v10)
              objc_enumerationMutation(v8);
            v12 = _LSUnregisterPlugin(&v23, objc_msgSend(*(id *)(*((_QWORD *)&v18 + 1) + 8 * i), "unsignedLongLongValue"));
            if (v12)
            {
              _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], v12, (uint64_t)"_LSUnregisterPluginsAtURL", 505, 0);
              v16 = objc_claimAutoreleasedReturnValue();

              v13 = 0;
              v5 = (id)v16;
              goto LABEL_21;
            }
          }
          v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v18, v26, 16);
          v13 = 1;
          if (v9)
            continue;
          break;
        }
      }
      else
      {
        v13 = 0;
      }
    }
    else
    {
      _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], -10814, (uint64_t)"_LSUnregisterPluginsAtURL", 512, 0);
      v13 = 0;
      v8 = v5;
      v5 = (id)objc_claimAutoreleasedReturnValue();
    }
LABEL_21:

    goto LABEL_22;
  }
  v24 = *MEMORY[0x1E0CB2938];
  v25 = CFSTR("invalid plugin URL");
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v25, &v24, 1);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], -50, (uint64_t)"_LSUnregisterPluginsAtURL", 519, v14);
  v5 = (id)objc_claimAutoreleasedReturnValue();

  v15 = 0;
  if (!a2)
    goto LABEL_26;
LABEL_24:
  if (!v15)
    *a2 = objc_retainAutorelease(v5);
LABEL_26:

  return v15;
}

void sub_182908538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{

  _Unwind_Resume(a1);
}

uint64_t _LSRegisterPluginWithInfo(void *a1, void *a2)
{
  const __CFURL *v3;
  FSNode *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  const void *v8;
  void *v9;
  unsigned int v10;
  id v11;
  BOOL v12;
  id v13;
  void *v14;
  id v16;
  id v17;
  LSContext v18;

  v3 = a1;
  v4 = a2;
  v5 = (void *)MEMORY[0x186DAE7A0]();
  v17 = 0;
  v18.db = 0;
  if (v3)
  {
    v6 = _LSContextInit((id *)&v18.db);
    if ((_DWORD)v6)
    {
      v11 = 0;
    }
    else
    {
      v7 = (void *)_LSCopyPluginsWithURL((uint64_t)&v18, v3);
      v8 = v7;
      if (v7)
      {
        objc_msgSend(v7, "objectAtIndex:", 0);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v10 = objc_msgSend(v9, "unsignedLongLongValue");
        CFRelease(v8);

      }
      else
      {
        v10 = 0;
      }
      v6 = FSNodeCreateWithURL((uint64_t)v3, 0, &v17);
      v11 = v17;
      if (!(_DWORD)v6)
      {
        v16 = 0;
        v12 = _LSRegisterPluginNode(&v18, v17, v4, 0, v10, &v16);
        v13 = v16;
        v14 = v13;
        if (v12)
          v6 = 0;
        else
          v6 = _LSGetOSStatusFromNSError(v13);

        _LSContextDestroy((void **)&v18.db);
        v11 = v17;
      }
    }
  }
  else
  {
    v11 = 0;
    v6 = 4294967246;
  }

  objc_autoreleasePoolPop(v5);
  return v6;
}

void sub_1829086C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_1829088B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_182908C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_182908D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_182908EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18290909C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_182909990(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_182909C38(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_182909DFC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18290A06C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18290A7AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

uint64_t _LSServer_UpdateDatabaseWithInfo(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  const __CFString *v13;
  void *v14;
  LSBundleRecordUpdater *v15;
  LSBundleRecordUpdater *v16;
  _BOOL4 v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v36;
  uint8_t buf[4];
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  void *v44;
  uint64_t v45;

  v8 = a5;
  v45 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v13 = CFSTR("sinfData");
  }
  else if (a3)
  {
    v13 = CFSTR("iTunesData");
  }
  else
  {
    v13 = CFSTR("placeholderMetadata");
    if (!a4)
      v13 = CFSTR("bumping sequence number");
  }
  _LSLogStepStart(11, 0, a1, CFSTR("Updating bundle record for app (%@)"), a5, a6, a7, a8, (uint64_t)v13);
  v14 = (void *)MEMORY[0x186DAE7A0]();
  v15 = -[LSBundleRecordUpdater initWithBundleIdentifier:preferPlaceholder:]([LSBundleRecordUpdater alloc], "initWithBundleIdentifier:preferPlaceholder:", a1, a4 != 0);
  if (v15)
  {
    v16 = v15;
    if (!v8
      && !-[LSBundleRecordUpdater checkNeedsUpdateForiTunesMetadata:SINFo:placeholderMetadata:](v15, "checkNeedsUpdateForiTunesMetadata:SINFo:placeholderMetadata:", a3, a2, a4))
    {
      _LSDefaultLog();
      v30 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138413058;
        v38 = a2;
        v39 = 2112;
        v40 = a3;
        v41 = 2112;
        v42 = a4;
        v43 = 2112;
        v44 = a1;
        _os_log_impl(&dword_182882000, v30, OS_LOG_TYPE_DEFAULT, "Updating database with %@ %@ %@ for %@: did not actually need an update, and it was not forced, so skipping", buf, 0x2Au);
      }

      objc_autoreleasePoolPop(v14);
      _LSLogStepFinished(11, 1, a1, CFSTR("Updated bundle record%@"), v31, v32, v33, v34, (uint64_t)CFSTR(" (skipped)"));
      return 0;
    }
    -[LSBundleRecordUpdater parseSINFDictionary:](v16, "parseSINFDictionary:", a2);
    -[LSBundleRecordUpdater parseiTunesMetadata:](v16, "parseiTunesMetadata:", a3);
    -[LSBundleRecordUpdater parsePlaceholderMetadata:](v16, "parsePlaceholderMetadata:", a4);
    v36 = 0;
    v17 = -[LSBundleRecordUpdater updateBundleRecord:](v16, "updateBundleRecord:", &v36);
    v18 = v36;

    objc_autoreleasePoolPop(v14);
    if (v17)
    {
      _LSArmSaveTimer(1);
      _LSLogStepFinished(11, 1, a1, CFSTR("Updated bundle record%@"), v19, v20, v21, v22, (uint64_t)&stru_1E10473A0);

      return 0;
    }
  }
  else
  {
    _LSDefaultLog();
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      _LSServer_UpdateDatabaseWithInfo_cold_2();

    _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], -10814, (uint64_t)"_LSServer_UpdateDatabaseWithInfo", 6085, 0);
    v18 = (id)objc_claimAutoreleasedReturnValue();
    objc_autoreleasePoolPop(v14);
  }
  _LSDefaultLog();
  v24 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    _LSServer_UpdateDatabaseWithInfo_cold_1((uint64_t)a1);

  _LSLogStepFinished(11, 0, a1, CFSTR("Updated bundle record%@"), v25, v26, v27, v28, (uint64_t)&stru_1E10473A0);
  v29 = _LSGetOSStatusFromNSError(v18);

  return v29;
}

void _LSLogStepAsync(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v12;
  objc_class *v13;
  id v14;

  v12 = a3;
  if (a4)
  {
    v13 = (objc_class *)MEMORY[0x1E0CB3940];
    v14 = a4;
    a4 = (void *)objc_msgSend([v13 alloc], "initWithFormat:arguments:", v14, &a9);

  }
  objc_msgSend((Class)getAITransactionLogClass[0](), "logStep:byParty:phase:success:forBundleID:description:", a1, 5, 3, a2, v12, a4);

}

void sub_18290C460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_18290C824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_18290DDE0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void dispatchAsyncToCallbackQueueWithTransaction(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  NSObject *v4;
  id v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v2 = a2;
  v3 = (void *)os_transaction_create();
  +[LSApplicationWorkspace callbackQueue](LSApplicationWorkspace, "callbackQueue");
  v4 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __dispatchAsyncToCallbackQueueWithTransaction_block_invoke;
  v7[3] = &unk_1E1041548;
  v8 = v3;
  v9 = v2;
  v5 = v3;
  v6 = v2;
  dispatch_async(v4, v7);

}

id filterProxiesForHelperPlaceholders(void *a1)
{
  id v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  int v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v13;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v13 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * i);
        objc_msgSend(v8, "correspondingApplicationRecord", (_QWORD)v12);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v10 = objc_msgSend(v9, "isWebAppPlaceholder");

        if (v10)
          objc_msgSend(v2, "addObject:", v8);
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v5);
  }

  return v2;
}

void _LSServer_ExecuteSyncWithQuiescedInstallationActivity(void *a1)
{
  id v1;
  os_unfair_lock_s *RegisterInstallResultsLock;
  id v3;
  _QWORD *v4;
  _QWORD v5[2];
  void (*v6)(uint64_t);
  void *v7;
  id v8;

  v1 = a1;
  RegisterInstallResultsLock = (os_unfair_lock_s *)_LSDatabaseGetRegisterInstallResultsLock();
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v6 = ___LSServer_ExecuteSyncWithQuiescedInstallationActivity_block_invoke;
  v7 = &unk_1E1041300;
  v3 = v1;
  v8 = v3;
  v4 = v5;
  os_unfair_lock_lock(RegisterInstallResultsLock);
  v6((uint64_t)v4);
  os_unfair_lock_unlock(RegisterInstallResultsLock);

}

void sub_1829104BC(void *a1)
{
  os_unfair_lock_s *v1;

  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_1829104D0(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_1829109D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

BOOL _LSServer_PerformExternalRebuildRegistration(void *a1, _QWORD *a2)
{
  id v3;
  void *v4;
  void *v5;
  NSObject *v6;
  NSObject *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  _QWORD v12[2];

  v12[1] = *MEMORY[0x1E0C80C00];
  v3 = a1;
  +[LSDatabaseRebuildContext currentRebuildContextIfExists]();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v4)
  {
    _LSInstallLog();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      _LSServer_PerformExternalRebuildRegistration_cold_1();

    _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2FE0], 94, (uint64_t)"_LSServer_PerformExternalRebuildRegistration", 5265, 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (!a2)
      goto LABEL_9;
LABEL_8:
    *a2 = objc_retainAutorelease(v5);
    goto LABEL_9;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    -[LSDatabaseRebuildContext registerItems:]((uint64_t)v4, v3);
    v5 = 0;
    if (!a2)
      goto LABEL_9;
    goto LABEL_8;
  }
  _LSInstallLog();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    _LSServer_PerformExternalRebuildRegistration_cold_2((uint64_t)v3, v8);

  v9 = (void *)*MEMORY[0x1E0CB2F90];
  v11 = *MEMORY[0x1E0CB2938];
  v12[0] = CFSTR("bad registration input");
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v12, &v11, 1);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  _LSMakeNSErrorImpl(v9, -50, (uint64_t)"_LSServer_PerformExternalRebuildRegistration", 5261, v10);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (a2)
    goto LABEL_8;
LABEL_9:

  return v5 == 0;
}

void _LSServer_NoteMigratorRunningInMigration()
{
  uint64_t v0;
  void *v1;
  NSObject *v2;

  +[LSDatabaseRebuildContext currentRebuildContextIfExists]();
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)v0;
  if (v0)
  {
    -[LSRebuildStatisticsGatherer setMigratorRunning:](*(_QWORD *)(v0 + 8), 1);
  }
  else
  {
    _LSInstallLog();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      _LSServer_NoteMigratorRunningInMigration_cold_1();

  }
}

uint64_t _LSServer_LSEnumerateAndRegisterAllCryptexContent()
{
  LSRebuildStatisticsGatherer *v0;
  LSRebuildStatisticsGatherer *v1;
  uint64_t v2;
  _QWORD v4[4];
  LSRebuildStatisticsGatherer *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2020000000;
  v10 = 0;
  v0 = objc_alloc_init(LSRebuildStatisticsGatherer);
  -[LSRebuildStatisticsGatherer setOnlyCryptexContent:]((uint64_t)v0, 1);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = ___LSServer_LSEnumerateAndRegisterAllCryptexContent_block_invoke;
  v4[3] = &unk_1E10410F8;
  v1 = v0;
  v5 = v1;
  v6 = &v7;
  +[LSDatabaseRebuildContext withStatsGatherer:runWithRebuildContext:]((uint64_t)LSDatabaseRebuildContext, v1, v4);
  -[LSRebuildStatisticsGatherer submitAnalytics]((uint64_t)v1);
  v2 = *((unsigned __int8 *)v8 + 24);

  _Block_object_dispose(&v7, 8);
  return v2;
}

void sub_182910D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _LSServer_LSEnumerateAndRegisterAllCryptexContentWithContext(void *a1)
{
  id v1;
  NSObject *v2;
  void *v3;
  id v4;
  char v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  id v9;
  _QWORD v10[4];
  id v11;
  uint8_t buf[16];

  v1 = a1;
  _LSInstallLog();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_182882000, v2, OS_LOG_TYPE_DEFAULT, "calling into InstalledContentLibrary to register cryptex content", buf, 2u);
  }

  objc_msgSend(MEMORY[0x1E0D3AD40], "defaultWorkspace");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = ___LSServer_LSEnumerateAndRegisterAllCryptexContentWithContext_block_invoke;
  v10[3] = &unk_1E1041120;
  v4 = v1;
  v11 = v4;
  v9 = 0;
  v5 = objc_msgSend(v3, "enumerateCryptexContentWithBlock:error:", v10, &v9);
  v6 = v9;

  if ((v5 & 1) == 0)
  {
    _LSInstallLog();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      _LSServer_LSEnumerateAndRegisterAllCryptexContentWithContext_cold_1();

    -[LSDatabaseRebuildContext noteRebuildError:]((uint64_t)v4, v6);
  }
  _LSInstallLog();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_182882000, v8, OS_LOG_TYPE_DEFAULT, "finished enumerating cryptex content.", buf, 2u);
  }

}

uint64_t _LSServer_LSEnumerateAndRegisterAllBundles(void *a1, __int16 a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  BOOL v7;
  char v8;
  LSRebuildStatisticsGatherer *v9;
  LSRebuildStatisticsGatherer *v10;
  uint64_t v11;
  _QWORD v13[4];
  LSRebuildStatisticsGatherer *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  char v19;

  v3 = a1;
  v16 = 0;
  v17 = &v16;
  v18 = 0x2020000000;
  v19 = 0;
  v4 = objc_opt_class();
  objc_msgSend(v3, "objectForKey:", CFSTR("UserRequestedAppDBRebuild"));
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = (void *)v5;
  if (v4)
    v7 = v5 == 0;
  else
    v7 = 1;
  if (!v7 && (objc_opt_isKindOfClass() & 1) == 0)
  {

    v6 = 0;
  }
  v8 = objc_msgSend(v6, "BOOLValue");

  v9 = objc_alloc_init(LSRebuildStatisticsGatherer);
  -[LSRebuildStatisticsGatherer setIsUserRequested:]((uint64_t)v9, v8);
  -[LSRebuildStatisticsGatherer setRebuildReasonFlags:]((uint64_t)v9, a2);
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = ___LSServer_LSEnumerateAndRegisterAllBundles_block_invoke;
  v13[3] = &unk_1E1041198;
  v10 = v9;
  v14 = v10;
  v15 = &v16;
  -[LSRebuildStatisticsGatherer performRebuild:]((uint64_t)v10, v13);
  -[LSRebuildStatisticsGatherer submitAnalytics]((uint64_t)v10);
  v11 = *((unsigned __int8 *)v17 + 24);

  _Block_object_dispose(&v16, 8);
  return v11;
}

void sub_182911120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_182911538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  _Block_object_dispose(&a17, 8);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 112), 8);
  _Unwind_Resume(a1);
}

void _LSServer_LSRegisterICLItem(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  const __CFString *v8;
  void *v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  objc_msgSend(v3, "legacyRecordDictionary");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("ApplicationType"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v6)
  {
    v7 = (void *)objc_msgSend(v5, "mutableCopy");
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v8 = CFSTR("PluginKitPlugin");
    }
    else
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
LABEL_8:

        goto LABEL_9;
      }
      v8 = CFSTR("Framework");
    }
    objc_msgSend(v7, "setObject:forKeyedSubscript:", v8, CFSTR("ApplicationType"));
    goto LABEL_8;
  }
  v7 = v5;
LABEL_9:
  v10[0] = v7;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v10, 1);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[LSDatabaseRebuildContext registerItems:]((uint64_t)v4, v9);

}

void sub_182911978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_182911A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

uint64_t _LSServer_RebuildApplicationDatabases(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  int v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  id v34;
  id v35;
  id v36;
  NSObject *v37;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[4];
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  _QWORD *v47;
  char v48;
  _QWORD v49[4];
  id v50;
  _QWORD *v51;
  uint64_t *v52;
  char v53;
  char v54;
  _QWORD v55[5];
  id v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  char v60;
  const __CFString *v61;
  _QWORD v62[3];

  v62[1] = *MEMORY[0x1E0C80C00];
  v7 = MEMORY[0x186DAF208]();
  v8 = (void *)MEMORY[0x186DAE7A0](v7);
  _LSLogStepStart(9, 0, 0, CFSTR("Force rebuilding LaunchServices database"), v9, v10, v11, v12, v39);
  v57 = 0;
  v58 = &v57;
  v59 = 0x2020000000;
  v60 = 0;
  v55[0] = 0;
  v55[1] = v55;
  v55[2] = 0x3032000000;
  v55[3] = __Block_byref_object_copy__4;
  v55[4] = __Block_byref_object_dispose__4;
  v56 = 0;
  v13 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  _LSServer_DatabaseExecutionContext();
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = MEMORY[0x1E0C809B0];
  v49[0] = MEMORY[0x1E0C809B0];
  v49[1] = 3221225472;
  v49[2] = ___LSServer_RebuildApplicationDatabases_block_invoke;
  v49[3] = &unk_1E10411E8;
  v53 = a4;
  v51 = v55;
  v52 = &v57;
  v16 = v13;
  v50 = v16;
  v54 = a5;
  -[LSDBExecutionContext syncWrite:]((uint64_t)v14, v49);

  if (*((_BYTE *)v58 + 24))
  {
    objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", 0);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", 0);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", 0);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", 0);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v61 = CFSTR("UserRequestedAppDBRebuild");
    v62[0] = MEMORY[0x1E0C9AAB0];
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v62, &v61, 1);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = _LSServer_LSEnumerateAndRegisterAllBundles(v25, 0);
    v27 = v26;
    _LSLogStepFinished(9, v26 != 0, 0, CFSTR("Finished rebuilding LaunchServices database"), v28, v29, v30, v31, v40);
    _LSServer_DatabaseExecutionContext();
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    v41[0] = v15;
    v41[1] = 3221225472;
    v41[2] = ___LSServer_RebuildApplicationDatabases_block_invoke_3;
    v41[3] = &unk_1E1041238;
    v47 = v55;
    v48 = v27;
    v42 = v16;
    v33 = v21;
    v43 = v33;
    v34 = v23;
    v44 = v34;
    v35 = v22;
    v45 = v35;
    v36 = v24;
    v46 = v36;
    -[LSDBExecutionContext syncWrite:]((uint64_t)v32, v41);

  }
  else
  {
    _LSLogStepFinished(9, 0, 0, CFSTR("Skipping rebuild"), v17, v18, v19, v20, v40);
  }
  _LSDatabaseGetSeedingGroup();
  v37 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v37);

  _Block_object_dispose(v55, 8);
  _Block_object_dispose(&v57, 8);
  objc_autoreleasePoolPop(v8);
  MEMORY[0x186DAF214]();
  return 1;
}

void sub_18291218C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 160), 8);
  _Unwind_Resume(a1);
}

void enumeratePlaceholderAndInstalledApplicationRecords(void *a1)
{
  void (**v1)(id, _QWORD, char *);
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char v20;
  _BYTE v21[128];
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v20 = 0;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  +[LSApplicationRecord enumeratorWithOptions:](LSApplicationRecord, "enumeratorWithOptions:", 64);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v16, v22, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v17;
LABEL_3:
    v6 = 0;
    while (1)
    {
      if (*(_QWORD *)v17 != v5)
        objc_enumerationMutation(v2);
      v1[2](v1, *(_QWORD *)(*((_QWORD *)&v16 + 1) + 8 * v6), &v20);
      if (v20)
        break;
      if (v4 == ++v6)
      {
        v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v16, v22, 16);
        if (v4)
          goto LABEL_3;
        break;
      }
    }
  }

  if (!v20)
  {
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    +[LSApplicationRecord enumeratorWithOptions:](LSApplicationRecord, "enumeratorWithOptions:", 0, 0);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v12, v21, 16);
    if (v8)
    {
      v9 = v8;
      v10 = *(_QWORD *)v13;
LABEL_12:
      v11 = 0;
      while (1)
      {
        if (*(_QWORD *)v13 != v10)
          objc_enumerationMutation(v7);
        v1[2](v1, *(_QWORD *)(*((_QWORD *)&v12 + 1) + 8 * v11), &v20);
        if (v20)
          break;
        if (v9 == ++v11)
        {
          v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v12, v21, 16);
          if (v9)
            goto LABEL_12;
          break;
        }
      }
    }

  }
}

id allAppexRecords()
{
  void *v0;
  void *v1;

  +[LSApplicationExtensionRecord enumeratorWithOptions:](LSApplicationExtensionRecord, "enumeratorWithOptions:", 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "allObjects");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

void _LSServer_SyncWithMobileInstallation(void *a1)
{
  id v1;
  NSObject *v2;
  os_unfair_lock_s *v3;
  signed __int8 v4;
  NSObject *v5;
  NSObject *v6;
  _QWORD v7[4];
  id v8;
  uint8_t buf[16];

  v1 = a1;
  _LSDatabaseGetMobileInstallSyncupGroup();
  v2 = objc_claimAutoreleasedReturnValue();
  dispatch_group_enter(v2);

  _LSServer_DatabaseExecutionContext();
  v3 = (os_unfair_lock_s *)objc_claimAutoreleasedReturnValue();
  -[LSDBExecutionContext assertNotActiveForThisThread](v3);

  do
    v4 = __ldaxr((unsigned __int8 *)&sMISyncFlag);
  while (__stlxr(v4 | 0x80, (unsigned __int8 *)&sMISyncFlag));
  if ((v4 & 0x80000000) == 0)
  {
    _LSInstallLog();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_182882000, v5, OS_LOG_TYPE_DEFAULT, "Syncing with MobileInstallation once in-flight installation activity is quiesced", buf, 2u);
    }

    MEMORY[0x186DAF208]();
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = ___LSServer_SyncWithMobileInstallation_block_invoke;
    v7[3] = &unk_1E1041300;
    v8 = v1;
    _LSServer_ExecuteSyncWithQuiescedInstallationActivity(v7);

  }
  _LSDatabaseGetMobileInstallSyncupGroup();
  v6 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v6);

}

void sub_1829131B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_182913788(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__807(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = MEMORY[0x186DAE9BC](*(_QWORD *)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__808(uint64_t a1)
{

}

void sub_182913984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

id _getBlockToUpdateBundleRecordFromMIAndNotifyIfChanged(uint64_t *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  NSObject *v11;
  void *v12;
  int v13;
  NSObject *v14;
  const __CFString *v15;
  NSObject *v16;
  void *v17;
  _QWORD v19[4];
  NSObject *v20;
  id v21;
  id v22;
  uint64_t v23;
  unsigned int v24;
  id v25;
  uint8_t buf[4];
  id v27;
  __int16 v28;
  id v29;
  __int16 v30;
  const __CFString *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  v25 = 0;
  _LSDefaultLog();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    v27 = v7;
    v28 = 2112;
    v29 = v8;
    _os_log_impl(&dword_182882000, v10, OS_LOG_TYPE_DEFAULT, "Checking if %@ needs to be registered at %@", buf, 0x16u);
  }

  if (FSNodeCreateWithURL((uint64_t)v8, 0, &v25))
  {
    _LSDefaultLog();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      _getBlockToUpdateBundleRecordFromMIAndNotifyIfChanged_cold_1();

    v12 = 0;
  }
  else
  {
    v24 = 0;
    v23 = 0;
    v13 = _LSBundleFindWithNode((uint64_t)a1, v25, &v24, &v23);
    if (v13 || _LSNodeHasChanged(v25, *a1, v24, v23, 0))
    {
      _LSDefaultLog();
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        v15 = CFSTR("missing");
        *(_DWORD *)buf = 138412802;
        v27 = v8;
        v28 = 2112;
        if (!v13)
          v15 = CFSTR("stale");
        v29 = v7;
        v30 = 2112;
        v31 = v15;
        _os_log_impl(&dword_182882000, v14, OS_LOG_TYPE_DEFAULT, "Registering %@ (%@) because its record is %@", buf, 0x20u);
      }

      v19[0] = MEMORY[0x1E0C809B0];
      v19[1] = 3221225472;
      v19[2] = ___getBlockToUpdateBundleRecordFromMIAndNotifyIfChanged_block_invoke;
      v19[3] = &unk_1E1041398;
      v20 = v8;
      v21 = v9;
      v22 = v7;
      v12 = (void *)MEMORY[0x186DAE9BC](v19);

      v16 = v20;
    }
    else
    {
      _LSDefaultLog();
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v27 = v8;
        _os_log_impl(&dword_182882000, v16, OS_LOG_TYPE_DEFAULT, "Skipping %@ because its record is up-to-date", buf, 0xCu);
      }
      v12 = 0;
    }

  }
  v17 = (void *)MEMORY[0x186DAE9BC](v12);

  return v17;
}

void sub_182914048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1829144D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  _Block_object_dispose(&a33, 8);

  _Unwind_Resume(a1);
}

void sub_182914604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void _LSServer_NoteTerminationRequestForMISync()
{
  unsigned int v0;
  int v1;
  NSObject *v2;
  NSObject *v3;
  _DWORD v4[2];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  while (1)
  {
    v0 = __ldaxr((unsigned int *)&sMISyncFlag);
    if (v0 != 128)
      break;
    if (!__stlxr(0x80u, (unsigned int *)&sMISyncFlag))
    {
      v1 = 1;
      goto LABEL_6;
    }
  }
  v1 = 0;
  __clrex();
LABEL_6:
  _LSDefaultLog();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (v1)
  {
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      _LSServer_NoteTerminationRequestForMISync_cold_1();

    _LSDatabaseSetSyncInterrupted();
  }
  else
  {
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      v4[0] = 67109120;
      v4[1] = sMISyncFlag;
      _os_log_impl(&dword_182882000, v3, OS_LOG_TYPE_DEFAULT, "MI sync was not running, %d.", (uint8_t *)v4, 8u);
    }

  }
}

id initMobileInstallationCopyFrameworkInfoForLaunchServices(void *a1, void *a2, uint64_t a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;

  v5 = a1;
  v6 = a2;
  v7 = (void *)MobileInstallationLibrary_frameworkLibrary;
  if (!MobileInstallationLibrary_frameworkLibrary)
  {
    v7 = dlopen("/System/Library/PrivateFrameworks/MobileInstallation.framework/MobileInstallation", 2);
    MobileInstallationLibrary_frameworkLibrary = (uint64_t)v7;
  }
  softLinkMobileInstallationCopyFrameworkInfoForLaunchServices[0] = (uint64_t (*)())dlsym(v7, "MobileInstallationCopyFrameworkInfoForLaunchServices");
  ((void (*)(id, id, uint64_t))softLinkMobileInstallationCopyFrameworkInfoForLaunchServices[0])(v5, v6, a3);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

void ___registerExtensionPointsFromMIFrameworkDictionary_block_invoke(uint64_t a1, void *a2, void *a3)
{
  __CFString *v5;
  const __CFDictionary *v6;
  id v7;
  NSObject *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t active_platform;
  NSObject *v15;
  _BOOL8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE block[24];
  __int128 v24;
  const __CFDictionary *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("LaunchServices: registering extension point %@"));
  v7 = (id)objc_claimAutoreleasedReturnValue();
  if (_LSLoggingQueue_onceToken != -1)
    dispatch_once(&_LSLoggingQueue_onceToken, &__block_literal_global_905);
  v8 = _LSLoggingQueue_logQueue;
  *(_QWORD *)block = MEMORY[0x1E0C809B0];
  *(_QWORD *)&block[8] = 3221225472;
  *(_QWORD *)&block[16] = ___LSSetCrashMessage_block_invoke;
  *(_QWORD *)&v24 = &unk_1E1040478;
  *((_QWORD *)&v24 + 1) = v7;
  v9 = v7;
  dispatch_sync(v8, block);

  _LSLogStepStart(4, 0, v5, CFSTR("registering extension point"), v10, v11, v12, v13, (uint64_t)v5);
  active_platform = dyld_get_active_platform();
  _LSExtensionsLog();
  v15 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
  {
    v21 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)block = 136316162;
    *(_QWORD *)&block[4] = "void _registerExtensionPointsFromMIFrameworkDictionary(NSDictionary<NSString *,id> *__strong)_block_invoke";
    *(_WORD *)&block[12] = 2112;
    *(_QWORD *)&block[14] = v5;
    *(_WORD *)&block[22] = 1024;
    LODWORD(v24) = active_platform;
    WORD2(v24) = 2112;
    *(_QWORD *)((char *)&v24 + 6) = v21;
    HIWORD(v24) = 2112;
    v25 = v6;
    _os_log_debug_impl(&dword_182882000, v15, OS_LOG_TYPE_DEBUG, "%s Registering extension point with identifier '%@' platform: %d url '%@' SDK Dictionary: %@", block, 0x30u);
  }

  v16 = _LSRegisterExtensionPoint(0, 0, v5, active_platform, v6, *(void **)(a1 + 32)) == 0;
  _LSLogStepFinished(4, v16, v5, CFSTR("registered extension point"), v17, v18, v19, v20, v22);

}

void init_ISInvalidateCacheEntriesForBundleIdentifier(void *a1)
{
  void *v1;
  id v2;

  v2 = a1;
  v1 = (void *)IconServicesLibrary_frameworkLibrary_0;
  if (!IconServicesLibrary_frameworkLibrary_0)
  {
    v1 = dlopen("/System/Library/PrivateFrameworks/IconServices.framework/IconServices", 2);
    IconServicesLibrary_frameworkLibrary_0 = (uint64_t)v1;
  }
  softLink_ISInvalidateCacheEntriesForBundleIdentifier[0] = (uint64_t (*)())dlsym(v1, "_ISInvalidateCacheEntriesForBundleIdentifier");
  ((void (*)(id))softLink_ISInvalidateCacheEntriesForBundleIdentifier[0])(v2);

}

Class initAITransactionLog()
{
  Class result;

  if (!MobileInstallationLibrary_frameworkLibrary)
    MobileInstallationLibrary_frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/MobileInstallation.framework/MobileInstallation", 2);
  result = objc_getClass("AITransactionLog");
  classAITransactionLog = (uint64_t)result;
  getAITransactionLogClass[0] = (uint64_t (*)())AITransactionLogFunction;
  return result;
}

id AITransactionLogFunction()
{
  return (id)classAITransactionLog;
}

void __getShimInvokeQueue_block_invoke()
{
  dispatch_queue_t v0;
  void *v1;
  NSObject *v2;

  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v2 = objc_claimAutoreleasedReturnValue();
  v0 = dispatch_queue_create("com.apple.LaunchServices.InstallationShimInvoke", v2);
  v1 = (void *)getShimInvokeQueue_queue;
  getShimInvokeQueue_queue = (uint64_t)v0;

}

Class initMIInstallOptions()
{
  Class result;

  if (!MobileInstallationLibrary_frameworkLibrary)
    MobileInstallationLibrary_frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/MobileInstallation.framework/MobileInstallation", 2);
  result = objc_getClass("MIInstallOptions");
  classMIInstallOptions = (uint64_t)result;
  getMIInstallOptionsClass[0] = (uint64_t (*)())MIInstallOptionsFunction;
  return result;
}

id MIInstallOptionsFunction()
{
  return (id)classMIInstallOptions;
}

uint64_t initMobileInstallationInstallForInstallCoordinationWithError(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  id v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  uint64_t v20;

  v15 = a1;
  v16 = a3;
  v17 = a4;
  v18 = a8;
  v19 = (void *)MobileInstallationLibrary_frameworkLibrary;
  if (!MobileInstallationLibrary_frameworkLibrary)
  {
    v19 = dlopen("/System/Library/PrivateFrameworks/MobileInstallation.framework/MobileInstallation", 2);
    MobileInstallationLibrary_frameworkLibrary = (uint64_t)v19;
  }
  softLinkMobileInstallationInstallForInstallCoordinationWithError[0] = (uint64_t (*)())dlsym(v19, "MobileInstallationInstallForInstallCoordinationWithError");
  v20 = ((uint64_t (*)(id, uint64_t, id, id, uint64_t, uint64_t, uint64_t, id))softLinkMobileInstallationInstallForInstallCoordinationWithError[0])(v15, a2, v16, v17, a5, a6, a7, v18);

  return v20;
}

id initMobileInstallationUninstallForInstallCoordinationWithError(void *a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  void *v14;

  v9 = a1;
  v10 = a2;
  v11 = a3;
  v12 = a5;
  v13 = (void *)MobileInstallationLibrary_frameworkLibrary;
  if (!MobileInstallationLibrary_frameworkLibrary)
  {
    v13 = dlopen("/System/Library/PrivateFrameworks/MobileInstallation.framework/MobileInstallation", 2);
    MobileInstallationLibrary_frameworkLibrary = (uint64_t)v13;
  }
  softLinkMobileInstallationUninstallForInstallCoordinationWithError[0] = (uint64_t (*)())dlsym(v13, "MobileInstallationUninstallForInstallCoordinationWithError");
  ((void (*)(id, id, id, uint64_t, id))softLinkMobileInstallationUninstallForInstallCoordinationWithError[0])(v9, v10, v11, a4, v12);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  return v14;
}

void LSApplicationStateChangedCallback(void *a1, uint64_t a2, void *a3)
{
  NSObject *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;

  _LSDefaultLog();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    LSApplicationStateChangedCallback_cold_1();

  objc_msgSend(a1, "remoteObserver");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = a3;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __LSApplicationStateChangedCallback_block_invoke;
  v10[3] = &unk_1E103FCC8;
  v11 = v7;
  v12 = v6;
  v8 = v6;
  v9 = v7;
  dispatchAsyncToCallbackQueueWithTransaction((uint64_t)"com.apple.launchservices.LSApplicationStateChangedCallback", v10);

}

uint64_t __unsubscribeFromLSAWDistributedNotification_block_invoke(uint64_t a1, int a2)
{
  NSObject *v3;

  if (a2)
    return (a2 - 1);
  _LSDefaultLog();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT))
    __unsubscribeFromLSAWDistributedNotification_block_invoke_cold_1();

  return 0;
}

uint64_t initUISOpenApplicationOptionClickAttribution()
{
  void *v0;
  uint64_t result;

  v0 = (void *)UIKitServicesLibrary_frameworkLibrary_0;
  if (!UIKitServicesLibrary_frameworkLibrary_0)
  {
    v0 = dlopen("/System/Library/PrivateFrameworks/UIKitServices.framework/UIKitServices", 2);
    UIKitServicesLibrary_frameworkLibrary_0 = (uint64_t)v0;
  }
  result = *(_QWORD *)dlsym(v0, "UISOpenApplicationOptionClickAttribution");
  constantUISOpenApplicationOptionClickAttribution = result;
  getUISOpenApplicationOptionClickAttribution[0] = UISOpenApplicationOptionClickAttributionFunction;
  return result;
}

uint64_t UISOpenApplicationOptionClickAttributionFunction()
{
  return constantUISOpenApplicationOptionClickAttribution;
}

uint64_t initUISOpenApplicationOptionPasteSharingToken()
{
  void *v0;
  uint64_t result;

  v0 = (void *)UIKitServicesLibrary_frameworkLibrary_0;
  if (!UIKitServicesLibrary_frameworkLibrary_0)
  {
    v0 = dlopen("/System/Library/PrivateFrameworks/UIKitServices.framework/UIKitServices", 2);
    UIKitServicesLibrary_frameworkLibrary_0 = (uint64_t)v0;
  }
  result = *(_QWORD *)dlsym(v0, "UISOpenApplicationOptionPasteSharingToken");
  constantUISOpenApplicationOptionPasteSharingToken = result;
  getUISOpenApplicationOptionPasteSharingToken[0] = UISOpenApplicationOptionPasteSharingTokenFunction;
  return result;
}

uint64_t UISOpenApplicationOptionPasteSharingTokenFunction()
{
  return constantUISOpenApplicationOptionPasteSharingToken;
}

void __pluginQueryFault_block_invoke()
{
  NSObject *v0;

  _LSPluginFaultLog();
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT))
    __pluginQueryFault_block_invoke_cold_1();

}

void __enumeratePluginsMatchingQuery_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  id v8;

  v8 = a2;
  v5 = a3;
  v6 = (void *)MEMORY[0x186DAE7A0]();
  if (v8)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  else
  {
    v7 = v5;
    if (!v7)
    {
      _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], -10810, (uint64_t)"enumeratePluginsMatchingQuery_block_invoke", 320, 0);
      v7 = (id)objc_claimAutoreleasedReturnValue();
    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

  }
  objc_autoreleasePoolPop(v6);

}

void __mapBundleIdentifiersToUUIDs_block_invoke(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

void __mapBundleIdentifiersToUUIDs_block_invoke_2(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  BOOL v14;
  uint64_t v15;
  id v16;
  void *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t i;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  id v29;
  id v30;

  v30 = a2;
  v7 = a3;
  v8 = a4;
  if (*(_BYTE *)(a1 + 48))
    v9 = v30;
  else
    v9 = v7;
  v10 = v9;
  if (*(_BYTE *)(a1 + 48))
    v11 = v7;
  else
    v11 = v30;
  v12 = v11;
  v13 = v12;
  if (v10)
    v14 = v12 == 0;
  else
    v14 = 1;
  if (v14)
  {
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v16 = v8;
    v17 = *(void **)(v15 + 40);
    *(_QWORD *)(v15 + 40) = v16;
  }
  else
  {
    v29 = v8;
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = objc_msgSend(v10, "count");
    v19 = objc_msgSend(v13, "count");
    if (v18 >= v19)
      v20 = v19;
    else
      v20 = v18;
    if (v20)
    {
      for (i = 0; i != v20; ++i)
      {
        objc_msgSend(v10, "objectAtIndexedSubscript:", i);
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "objectForKeyedSubscript:", v22);
        v23 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v23)
        {
          objc_msgSend(MEMORY[0x1E0C99E20], "set");
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v10, "objectAtIndexedSubscript:", i);
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v17, "setObject:forKeyedSubscript:", v23, v24);

        }
        objc_msgSend(v13, "objectAtIndexedSubscript:", i);
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v23, "addObject:", v25);

      }
    }
    v26 = objc_msgSend(v17, "copy");
    v27 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v28 = *(void **)(v27 + 40);
    *(_QWORD *)(v27 + 40) = v26;

    v8 = v29;
  }

}

uint64_t __handleSaveObserverBehavior_block_invoke(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "operationWithUUID:didFailToSaveWithError:", *(_QWORD *)(a1 + 40), a2);
}

uint64_t __handleSaveObserverBehavior_block_invoke_2(uint64_t a1, int a2, uint64_t a3)
{
  void *v5;
  uint64_t v6;

  v5 = *(void **)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  if (a2)
    return objc_msgSend(v5, "operationWithUUIDWasSaved:", v6, a3);
  else
    return objc_msgSend(v5, "operationWithUUID:didFailToSaveWithError:", v6, a3);
}

void _LSSetCrashReporterMessage(void *a1)
{
  id v1;
  void *v2;
  char *v3;
  NSObject *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  void *v8;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = strdup((const char *)objc_msgSend(objc_retainAutorelease(v1), "UTF8String"));
    _LSDefaultLog();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      _LSSetCrashReporterMessage_cold_1();

  }
  else
  {
    v3 = 0;
  }
  v5 = _LSSetCrashReporterMessage_messagePtr;
  while (1)
  {
    v6 = __ldxr((unint64_t *)&_LSSetCrashReporterMessage_messagePtr);
    if (v6 != v5)
      break;
    if (!__stxr((unint64_t)v3, (unint64_t *)&_LSSetCrashReporterMessage_messagePtr))
    {
      v7 = 1;
      goto LABEL_11;
    }
  }
  v7 = 0;
  __clrex();
LABEL_11:
  if (v7)
    v8 = (void *)v5;
  else
    v8 = v3;
  free(v8);
  qword_1ECD29C28 = _LSSetCrashReporterMessage_messagePtr;

}

uint64_t initMobileInstallationUpdatePlaceholderMetadata(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  id v9;
  id v10;
  void *v11;
  uint64_t v12;

  v9 = a1;
  v10 = a4;
  v11 = (void *)MobileInstallationLibrary_frameworkLibrary;
  if (!MobileInstallationLibrary_frameworkLibrary)
  {
    v11 = dlopen("/System/Library/PrivateFrameworks/MobileInstallation.framework/MobileInstallation", 2);
    MobileInstallationLibrary_frameworkLibrary = (uint64_t)v11;
  }
  softLinkMobileInstallationUpdatePlaceholderMetadata[0] = (uint64_t (*)())dlsym(v11, "MobileInstallationUpdatePlaceholderMetadata");
  v12 = ((uint64_t (*)(id, uint64_t, uint64_t, id, uint64_t))softLinkMobileInstallationUpdatePlaceholderMetadata[0])(v9, a2, a3, v10, a5);

  return v12;
}

uint64_t __dispatchAsyncToCallbackQueueWithTransaction_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void __registerSingleMIDict_block_invoke(void **a1)
{
  NSObject *v2;
  id v3;
  void *v4;
  void *v5;
  const void *Unique;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;

  _LSDatabaseGetSeedingGroup();
  v2 = objc_claimAutoreleasedReturnValue();
  dispatch_group_enter(v2);

  if (a1[4] && (objc_msgSend(a1[5], "isEqualToString:", CFSTR("Framework")) & 1) == 0)
  {
    if (objc_msgSend(a1[5], "isEqualToString:", CFSTR("PluginKitPlugin")))
    {
      _registerMIPluginDictionary(a1[4], a1[6]);
    }
    else if ((objc_msgSend(a1[5], "isEqualToString:", CFSTR("CoreServices")) & 1) != 0
           || (objc_msgSend(a1[5], "isEqualToString:", CFSTR("Internal")) & 1) != 0
           || (objc_msgSend(a1[5], "isEqualToString:", CFSTR("User")) & 1) != 0
           || (objc_msgSend(a1[5], "isEqualToString:", CFSTR("System")) & 1) != 0
           || (objc_msgSend(a1[5], "isEqualToString:", CFSTR("SystemAppPlaceholder")) & 1) != 0
           || objc_msgSend(a1[5], "isEqualToString:", CFSTR("VPNPlugin")))
    {
      v3 = objc_alloc(MEMORY[0x1E0C99E98]);
      objc_msgSend(a1[4], "objectForKey:", CFSTR("Path"));
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = (void *)objc_msgSend(v3, "initFileURLWithPath:isDirectory:", v4, 1);

      Unique = (const void *)_CFBundleCreateUnique();
      _LSLogStepStart(4, 0, a1[7], CFSTR("registering app bundle"), v7, v8, v9, v10, v28);
      v11 = registerApplicationWithDictionary(a1[4], 0x21u) == 0;
      _LSLogStepFinished(4, v11, a1[7], CFSTR("registered app bundle"), v12, v13, v14, v15, v29);
      if (Unique)
        CFRelease(Unique);
      objc_msgSend(a1[4], "objectForKeyedSubscript:", CFSTR("ParallelPlaceholderPath"));
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      if (v16)
      {
        v17 = (void *)objc_msgSend(a1[4], "mutableCopy");
        v18 = MEMORY[0x1E0C9AAB0];
        objc_msgSend(v17, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], CFSTR("IsPlaceholder"));
        objc_msgSend(v17, "setObject:forKeyedSubscript:", v16, CFSTR("Path"));
        objc_msgSend(v17, "setObject:forKeyedSubscript:", v18, CFSTR("IsParallelPlaceholder"));
        _LSLogStepStart(4, 0, a1[7], CFSTR("registering parallel placeholder"), v19, v20, v21, v22, v30);
        v23 = registerApplicationWithDictionary(v17, 0x21u) == 0;
        _LSLogStepFinished(4, v23, a1[7], CFSTR("registered parallel placeholder"), v24, v25, v26, v27, v31);

      }
    }
  }
  if (_LSLoggingQueue_onceToken != -1)
    dispatch_once(&_LSLoggingQueue_onceToken, &__block_literal_global_905);
  dispatch_sync((dispatch_queue_t)_LSLoggingQueue_logQueue, &__block_literal_global_904);
  _LSDatabaseGetSeedingGroup();
  v32 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v32);

}

uint64_t initMobileInstallationEnumerateAllInstalledItemDictionaries(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  uint64_t v6;

  v3 = a1;
  v4 = a2;
  v5 = (void *)MobileInstallationLibrary_frameworkLibrary;
  if (!MobileInstallationLibrary_frameworkLibrary)
  {
    v5 = dlopen("/System/Library/PrivateFrameworks/MobileInstallation.framework/MobileInstallation", 2);
    MobileInstallationLibrary_frameworkLibrary = (uint64_t)v5;
  }
  softLinkMobileInstallationEnumerateAllInstalledItemDictionaries[0] = (uint64_t (*)())dlsym(v5, "MobileInstallationEnumerateAllInstalledItemDictionaries");
  v6 = ((uint64_t (*)(id, id))softLinkMobileInstallationEnumerateAllInstalledItemDictionaries[0])(v3, v4);

  return v6;
}

{
  id v3;
  id v4;
  void *v5;
  uint64_t v6;

  v3 = a1;
  v4 = a2;
  v5 = (void *)MobileInstallationLibrary(void)::frameworkLibrary;
  if (!MobileInstallationLibrary(void)::frameworkLibrary)
  {
    v5 = dlopen("/System/Library/PrivateFrameworks/MobileInstallation.framework/MobileInstallation", 2);
    MobileInstallationLibrary(void)::frameworkLibrary = (uint64_t)v5;
  }
  softLinkMobileInstallationEnumerateAllInstalledItemDictionaries[0] = (uint64_t (*)())dlsym(v5, "MobileInstallationEnumerateAllInstalledItemDictionaries");
  v6 = ((uint64_t (*)(id, id))softLinkMobileInstallationEnumerateAllInstalledItemDictionaries[0])(v3, v4);

  return v6;
}

void ___getBlockToUpdateBundleRecordFromMIAndNotifyIfChanged_block_invoke(uint64_t a1)
{
  const void *Unique;
  int v3;
  int v4;
  NSObject *v5;
  void *v6;
  uint64_t v7;
  NSObject *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint8_t buf[4];
  _BYTE v17[28];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  Unique = (const void *)_CFBundleCreateUnique();
  v3 = registerApplicationWithDictionary(*(void **)(a1 + 40), 0x40000000u);
  if (v3)
  {
    v4 = v3;
    _LSDefaultLog();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v11 = *(_QWORD *)(a1 + 32);
      v12 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)v17 = v4;
      *(_WORD *)&v17[4] = 2112;
      *(_QWORD *)&v17[6] = v11;
      *(_WORD *)&v17[14] = 2112;
      *(_QWORD *)&v17[16] = v12;
      _os_log_error_impl(&dword_182882000, v5, OS_LOG_TYPE_ERROR, "registerApplicationWithDictionary returned error %d for %@ (%@)", buf, 0x1Cu);
    }

  }
  +[LSApplicationProxy applicationProxyForBundleURL:](LSApplicationProxy, "applicationProxyForBundleURL:", *(_QWORD *)(a1 + 32));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v6, "isInstalled") & 1) != 0)
  {
    v7 = 7;
  }
  else if ((objc_msgSend(v6, "isPlaceholder") & 1) != 0)
  {
    v7 = 1;
  }
  else
  {
    _LSProgressLog();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v13 = *(_QWORD *)(a1 + 32);
      v14 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 138412802;
      *(_QWORD *)v17 = v6;
      *(_WORD *)&v17[8] = 2112;
      *(_QWORD *)&v17[10] = v13;
      *(_WORD *)&v17[18] = 2112;
      *(_QWORD *)&v17[20] = v14;
      _os_log_error_impl(&dword_182882000, v8, OS_LOG_TYPE_ERROR, "Got app proxy %@ for %@ (%@), not sending any notification", buf, 0x20u);
    }

    v7 = 0;
  }
  +[_LSInstallProgressService sharedInstance](_LSInstallProgressService, "sharedInstance");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = v6;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v15, 1);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "sendNotification:forAppProxies:Plugins:completion:", v7, v10, 0, 0);

  if (Unique)
    CFRelease(Unique);

}

void ___getBlockToUpdatePluginRecordFromMIAndNotifyIfChanged_block_invoke(uint64_t a1)
{
  _QWORD *v2;
  const void *Unique;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  int v13;
  NSObject *v14;
  void *v15;
  void *v16;
  NSObject *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  void *v25;
  __int16 v26;
  void *v27;
  NSObject *v28;
  void *v29;
  _QWORD v30[2];

  v30[1] = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)(a1 + 32);
  Unique = (const void *)_CFBundleCreateUnique();
  v5 = *(void **)(a1 + 40);
  v4 = a1 + 40;
  _LSLogStepStart(4, 0, v5, CFSTR("registering app extension"), v6, v7, v8, v9, v23);
  v10 = (void *)*v2;
  v11 = *(_QWORD *)(v4 + 8);
  v29 = *(void **)v4;
  v30[0] = v11;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v30, &v29, 1);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = _LSRegisterPluginWithInfo(v10, v12);

  if (v13)
  {
    _LSDefaultLog();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      v15 = (void *)*v2;
      v16 = *(void **)v4;
      LODWORD(v23) = 67109634;
      HIDWORD(v23) = v13;
      v24 = 2112;
      v25 = v15;
      v26 = 2112;
      v27 = v16;
      _os_log_error_impl(&dword_182882000, v14, OS_LOG_TYPE_ERROR, "_LSRegisterPluginWithInfo returned error %d for %@ (%@)", (uint8_t *)&v23, 0x1Cu);
    }
  }
  else
  {
    +[LSPlugInKitProxy pluginKitProxyForURL:](LSPlugInKitProxy, "pluginKitProxyForURL:", *v2);
    v14 = objc_claimAutoreleasedReturnValue();
    if (v14)
    {
      +[_LSInstallProgressService sharedInstance](_LSInstallProgressService, "sharedInstance");
      v17 = objc_claimAutoreleasedReturnValue();
      v28 = v14;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v28, 1);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      -[NSObject sendNotification:ForPlugins:](v17, "sendNotification:ForPlugins:", CFSTR("com.apple.LaunchServices.pluginsregistered"), v18);

    }
    else
    {
      _LSDefaultLog();
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        ___getBlockToUpdatePluginRecordFromMIAndNotifyIfChanged_block_invoke_cold_1();
    }

  }
  _LSLogStepFinished(4, v13 == 0, *(void **)v4, CFSTR("registered app extension"), v19, v20, v21, v22, v23);
  if (Unique)
    CFRelease(Unique);
}

uint64_t __Block_byref_object_copy__935(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 48) = v2;
  return result;
}

void __Block_byref_object_dispose__936(uint64_t a1)
{

}

void ___uninstallMIBundlesNotInSet_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  _LSEnumeratedBundleInfo *v8;
  _QWORD *v9;
  id v10;

  v3 = *(_DWORD *)(a3 + 168);
  if (v3 == 13 || v3 == 2)
  {
    v10 = (id)_CSStringCopyCFString();
    v8 = -[_LSEnumeratedBundleInfo initWithBundleID:isPlaceholder:]([_LSEnumeratedBundleInfo alloc], "initWithBundleID:isPlaceholder:", v10, (*(_QWORD *)(a3 + 172) >> 18) & 1);
    if ((objc_msgSend(*(id *)(a1 + 32), "containsObject:", v8) & 1) == 0)
    {
      v9 = -[_LSAppToUnregister initWithContext:bundleUnit:bundleData:]([_LSAppToUnregister alloc], *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 48, a2, a3);
      objc_msgSend(*(id *)(a1 + 40), "addObject:", v9);

    }
  }
}

void OUTLINED_FUNCTION_4_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_15_0(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

void OUTLINED_FUNCTION_17_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x12u);
}

const char *OUTLINED_FUNCTION_21_0()
{
  const char *v0;

  return sel_getName(v0);
}

void sub_182916CC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_182916E0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_182916EB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_182916F98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_182917020(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_182917184(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_182917248(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18291732C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_182917440(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_18291752C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1829175E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_182917748(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_182917A28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_182917AC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_182917C14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_182917C94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_182917F20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_182917FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_182918168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_1829182A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182918384(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_182918458(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182918534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1829186A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v3;

  _Unwind_Resume(a1);
}

void sub_1829188A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_182918AFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_182918CB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1829190BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_182919580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _Unwind_Exception *exception_object, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

void sub_182919864(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_182919B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_182919CF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_182919EEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_18291A0A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18291A130(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18291A194(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18291A218(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18291A378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_18291A460(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18291A5CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18291A6E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18291AAB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,void *a42)
{
  void *v42;

  _Unwind_Resume(a1);
}

void sub_18291AC1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18291AC9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18291AD68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18291ADEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_18291AE60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18291AFF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_18291B16C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18291B208(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18291B358(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18291B4B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18291B558(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18291B608(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id __copy_helper_atomic_property_(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  id result;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  result = *(id *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void sub_18291B768(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18291BA8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;

  std::__optional_destruct_base<LSBinding,false>::~__optional_destruct_base[abi:nn180100](v3);
  _Unwind_Resume(a1);
}

uint64_t std::optional<LSBinding>::operator=[abi:nn180100]<LSBinding,void>(uint64_t a1, uint64_t a2)
{
  int v4;
  __int128 v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  __int128 v10;

  v4 = *(unsigned __int8 *)(a1 + 48);
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v5;
  if (v4)
  {
    v6 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a2 + 32) = 0;
    v7 = *(void **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v6;

    v8 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a2 + 40) = 0;
    v9 = *(void **)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v8;

  }
  else
  {
    v10 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    *(_OWORD *)(a1 + 32) = v10;
    *(_BYTE *)(a1 + 48) = 1;
  }
  return a1;
}

void sub_18291BCA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18291BF44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_18291C254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void **a36)
{
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;

  _Block_object_dispose(&a27, 8);
  a36 = a10;
  std::vector<LSApplicationRecord * {__strong}>::__destroy_vector::operator()[abi:nn180100](&a36);

  _Unwind_Resume(a1);
}

void sub_18291C404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

char *std::vector<LSApplicationRecord * {__strong}>::emplace_back<LSApplicationRecord * {__strong}&>(char **a1, id *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  int64x2_t v19;
  char *v20;
  uint64_t v22;
  int64x2_t v23;
  char *v24;
  uint64_t v25;

  v6 = (unint64_t)a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = (v7 - *a1) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      abort();
    v10 = v5 - (_QWORD)*a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v25 = v4;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<os_eligibility_answer_t>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    v24 = v15;
    *(_QWORD *)v14 = *a2;
    v8 = v14 + 8;
    v23.i64[1] = (uint64_t)(v14 + 8);
    v17 = *a1;
    v16 = a1[1];
    if (v16 == *a1)
    {
      v19 = vdupq_n_s64((unint64_t)v16);
    }
    else
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *(_QWORD *)v16 = 0;
        *((_QWORD *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      v19 = *(int64x2_t *)a1;
      v8 = (char *)v23.i64[1];
      v15 = v24;
    }
    *a1 = v14;
    a1[1] = v8;
    v23 = v19;
    v20 = a1[2];
    a1[2] = v15;
    v24 = v20;
    v22 = v19.i64[0];
    std::__split_buffer<LSApplicationRecord * {__strong}>::~__split_buffer((uint64_t)&v22);
  }
  else
  {
    *(_QWORD *)v7 = *a2;
    v8 = v7 + 8;
  }
  a1[1] = v8;
  return v8 - 8;
}

void sub_18291C59C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18291C904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;

  _Block_object_dispose((const void *)(v25 - 152), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__126(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__127(uint64_t a1)
{

}

void sub_18291CAA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

__n128 std::__optional_storage_base<LSBinding,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<LSBinding,false>>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  __n128 result;
  __int128 v10;

  if (*(unsigned __int8 *)(a1 + 48) == *(unsigned __int8 *)(a2 + 48))
  {
    if (*(_BYTE *)(a1 + 48))
    {
      v4 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v4;
      v5 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a2 + 32) = 0;
      v6 = *(void **)(a1 + 32);
      *(_QWORD *)(a1 + 32) = v5;

      v7 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a2 + 40) = 0;
      v8 = *(void **)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v7;

    }
  }
  else if (*(_BYTE *)(a1 + 48))
  {
    std::__optional_destruct_base<LSBinding,false>::reset[abi:nn180100](a1);
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v10;
    result = *(__n128 *)(a2 + 32);
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    *(__n128 *)(a1 + 32) = result;
    *(_BYTE *)(a1 + 48) = 1;
  }
  return result;
}

void std::__optional_destruct_base<LSBinding,false>::reset[abi:nn180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
  {

    *(_BYTE *)(a1 + 48) = 0;
  }
}

uint64_t std::__optional_destruct_base<LSBinding,false>::~__optional_destruct_base[abi:nn180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
  {

  }
  return a1;
}

void std::__throw_bad_optional_access[abi:nn180100]()
{
  void ***v0;

  std::__libcpp_verbose_abort("bad_optional_access was thrown in -fno-exceptions mode");
  std::vector<LSApplicationRecord * {__strong}>::__destroy_vector::operator()[abi:nn180100](v0);
}

void std::vector<LSApplicationRecord * {__strong}>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 1);
        v4 -= 8;

      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__split_buffer<LSApplicationRecord * {__strong}>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;

  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void _LSWriteApplicationPlaceholderToURL(void *a1, void *a2, uint64_t a3, void *a4)
{
  id v7;
  int v8;
  int v9;
  id v10;
  id v11;
  NSObject *v12;
  id v13;
  id v14;
  id v15;
  _QWORD v16[4];
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  _QWORD v21[2];

  v21[1] = *MEMORY[0x1E0C80C00];
  v7 = a4;
  if (a1)
  {
    v8 = _CFURLIsFileURL();
    if (a2)
    {
      if (v8)
      {
        v9 = _CFURLIsFileURL();
        if (v7)
        {
          if (!a3 && v9)
          {
            v10 = a1;
            v11 = a2;
            if (_LSGetPlaceholderQueue(void)::once != -1)
              dispatch_once(&_LSGetPlaceholderQueue(void)::once, &__block_literal_global_9);
            v12 = _LSGetPlaceholderQueue(void)::result;
            v16[0] = MEMORY[0x1E0C809B0];
            v16[1] = 3221225472;
            v16[2] = ___LSWriteApplicationPlaceholderToURL_block_invoke;
            v16[3] = &unk_1E10401F0;
            v17 = v10;
            v18 = v11;
            v19 = v7;
            v13 = v11;
            v14 = v10;
            dispatch_async(v12, v16);

            goto LABEL_12;
          }
        }
      }
    }
  }
  if (v7)
  {
    v20 = *MEMORY[0x1E0CB2938];
    v21[0] = CFSTR("invalid input parameters");
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v21, &v20, 1);
    v14 = (id)objc_claimAutoreleasedReturnValue();
    v15 = _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], -50, (uint64_t)"_LSWriteApplicationPlaceholderToURL", 69, v14);
    (*((void (**)(id, _QWORD, id))v7 + 2))(v7, 0, v15);
LABEL_12:

  }
}

void sub_18291CE94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18291CF94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

uint64_t _LSWriteBundlePlaceholderToURLInternal(id *a1, NSURL *a2, NSURL *a3)
{
  NSURL *v4;
  NSURL *v5;
  uint64_t v6;
  FSNode *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  char v18;
  id v19;
  id v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  char v33;
  id v34;
  NSObject *v35;
  __CFBundle *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t i;
  void *v40;
  FSNode *v41;
  NSString *v42;
  FSNode *v43;
  NSString *v44;
  const __CFSet *v45;
  void *v46;
  const __CFSet *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t j;
  LSBundleData *v51;
  _LSDServiceDomain *v52;
  id *v53;
  id v54;
  id v55;
  _LSDServiceDomain *v56;
  id *v57;
  _LSDatabase *v58;
  _LSPlistHint *v59;
  _LSDatabase *v60;
  unsigned int entitlements;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  uint64_t v67;
  void *v68;
  _BOOL4 v69;
  id v70;
  void *v71;
  const std::__fs::filesystem::path *v72;
  std::error_code *v73;
  int v74;
  int *v75;
  _LSDServiceDomain *v76;
  uint64_t v77;
  int v78;
  void *v79;
  id v80;
  void *v81;
  BOOL v82;
  _LSDServiceDomain *v83;
  id *v84;
  id v85;
  _LSDServiceDomain *v86;
  LSContext *v87;
  NSObject *v88;
  _LSDServiceDomain *v89;
  void **v90;
  void *v91;
  uint64_t v92;
  id v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  uint64_t v99;
  NSURL *v101;
  NSURL *v102;
  const __CFArray *obj;
  FSNode *v104;
  __CFBundle *cf;
  id v106;
  _QWORD v107[4];
  char *v108;
  uint64_t v109;
  uint64_t v110;
  void (*v111)(uint64_t, uint64_t, int);
  void *v112;
  id v113;
  FSNode *v114;
  std::__fs::filesystem::path *p_path;
  _QWORD *v116;
  id *v117;
  _QWORD v118[3];
  char v119;
  uint64_t v120;
  uint64_t v121;
  void (*v122)(uint64_t);
  void *v123;
  const __CFSet *v124;
  FSNode *v125;
  CFTypeRef v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  id v135;
  id v136;
  id v137;
  id v138;
  id v139;
  int v140;
  LSBundleData *v141;
  unsigned int v142;
  id v143;
  id v144;
  id v145;
  std::__fs::filesystem::path path;
  char v147;
  _BYTE v148[128];
  _BYTE v149[128];
  uint64_t v150;

  v150 = *MEMORY[0x1E0C80C00];
  v4 = a2;
  v5 = a3;
  v101 = v4;
  v102 = v5;
  if (v4)
  {
    if (v5)
      goto LABEL_3;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v95 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "OSStatus _LSWriteBundlePlaceholderToURLInternal(Context &, NSURL *__strong, NSURL *__strong)");
    v96 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v95, "handleFailureInFunction:file:lineNumber:description:", v96, CFSTR("LSAppPlaceholders.mm"), 92, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("inSrcURL != nil"));

    if (v102)
      goto LABEL_3;
  }
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v97 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "OSStatus _LSWriteBundlePlaceholderToURLInternal(Context &, NSURL *__strong, NSURL *__strong)");
  v98 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v97, "handleFailureInFunction:file:lineNumber:description:", v98, CFSTR("LSAppPlaceholders.mm"), 93, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("inDestURL != nil"));

LABEL_3:
  v145 = 0;
  v6 = FSNodeCreateWithURL((uint64_t)v4, 1, &v145);
  if ((_DWORD)v6)
  {
LABEL_4:
    v7 = 0;
LABEL_9:
    v99 = 0;
    v142 = 0;
    v141 = 0;
    v140 = 0;
    goto LABEL_10;
  }
  if ((objc_msgSend(v145, "isDirectory") & 1) == 0)
  {
    v7 = 0;
    v6 = 4294965889;
    goto LABEL_9;
  }
  path.__pn_.__r_.__value_.__r.__words[0] = 0;
  -[NSURL URLByDeletingLastPathComponent](v102, "URLByDeletingLastPathComponent");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = FSNodeCreateWithURL((uint64_t)v8, 1, (id *)&path.__pn_.__r_.__value_.__l.__data_);

  if ((_DWORD)v6)
  {

    goto LABEL_4;
  }
  v20 = objc_alloc_init(MEMORY[0x1E0CB3620]);
  objc_msgSend(path.__pn_.__r_.__value_.__l.__data_, "URL");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v144 = 0;
  objc_msgSend(v20, "URLForDirectory:inDomain:appropriateForURL:create:error:", 99, 1, v21, 1, &v144);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = v144;

  if (v22)
  {
    v143 = v23;
    v104 = -[FSNode initWithURL:flags:error:]([FSNode alloc], "initWithURL:flags:error:", v22, 8, &v143);
    v24 = v143;

    if (v104)
    {
      v6 = 0;
      goto LABEL_104;
    }
    v23 = v24;
  }
  v6 = _LSGetOSStatusFromNSError(v23);
  v104 = 0;
  v24 = v23;
LABEL_104:

  if ((_DWORD)v6)
  {
    v7 = v104;
    goto LABEL_9;
  }
  v6 = LaunchServices::Database::Context::status(a1);
  v99 = 0;
  v142 = 0;
  v141 = 0;
  v140 = 0;
  v7 = v104;
  if ((_DWORD)v6)
    goto LABEL_10;
  +[_LSDServiceDomain defaultServiceDomain]();
  v76 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
  v77 = LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)a1, v76, 0);

  v7 = v104;
  v78 = _LSGetBundleClassForNode(v77, v145);
  if (v78 != 2)
  {
    if (v78 != 12)
    {
      v6 = 4294956485;
      goto LABEL_30;
    }
    v139 = 0;
    objc_msgSend(v145, "extensionWithError:", &v139);
    v79 = (void *)objc_claimAutoreleasedReturnValue();
    v80 = v139;
    v81 = v80;
    if (v79)
    {
      v82 = objc_msgSend(v79, "caseInsensitiveCompare:", CFSTR("appex")) == 0;

      if (!v82)
      {
        v6 = 4294956485;
        goto LABEL_29;
      }
    }
    else
    {
      v6 = _LSGetOSStatusFromNSError(v80);

      if ((_DWORD)v6)
      {
        v99 = 0;
LABEL_128:
        v7 = v104;
        goto LABEL_10;
      }
    }
    +[_LSDServiceDomain defaultServiceDomain]();
    v89 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
    v90 = (void **)LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)a1, v89, 0);

    v91 = *v90;
    v138 = 0;
    v92 = _LSPluginFindWithInfo(v91, 0, 0, 0, v145, &v140, &v138);
    v93 = v138;
    v94 = v93;
    v99 = v92;
    if (v92)
      v6 = 0;
    else
      v6 = _LSGetOSStatusFromNSError(v93);

    goto LABEL_128;
  }
  +[_LSDServiceDomain defaultServiceDomain]();
  v86 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
  v87 = (LSContext *)LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)a1, v86, 0);

  v7 = v104;
  v6 = _LSFindOrRegisterBundleNode(v87, v145, 0, 0x2000000u, 0, &v142, &v141);
  if ((_DWORD)v6 == -9499)
  {
    _LSDefaultLog();
    v88 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v88, OS_LOG_TYPE_INFO))
    {
      LODWORD(path.__pn_.__r_.__value_.__l.__data_) = 138477827;
      *(std::string::size_type *)((char *)path.__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)v145;
      _os_log_impl(&dword_182882000, v88, OS_LOG_TYPE_INFO, "Unable to find or register bundle for node %{private}@, so returning kLSApplicationNotFoundErr.", (uint8_t *)&path, 0xCu);
    }

    v99 = 0;
    v6 = 4294956482;
    v7 = v104;
    goto LABEL_12;
  }
  v99 = 0;
LABEL_10:
  if ((_DWORD)v6 && (_DWORD)v6 != -10814)
    goto LABEL_30;
LABEL_12:
  v137 = 0;
  v104 = v7;
  objc_msgSend(v145, "bundleInfoDictionaryWithError:", &v137);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = v137;
  v11 = v10;
  if (v9)
  {
    v12 = (void *)objc_msgSend(v9, "mutableCopy");
    v13 = v12;
    if (v12)
    {
      objc_msgSend(v12, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], CFSTR("IsPlaceholder"));
      objc_msgSend(v13, "setObject:forKeyedSubscript:", &unk_1E1075168, CFSTR("LSInstallType"));
      objc_msgSend(v13, "removeObjectForKey:", CFSTR("CFBundleInfoPlistURL"));
      objc_msgSend(v13, "removeObjectForKey:", CFSTR("CFBundleRawInfoPlistURL"));
      objc_msgSend(MEMORY[0x1E0CB38B0], "dataWithPropertyList:format:options:error:", v13, 200, 0, 0);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      if (v14)
      {
        -[FSNode childNodeWithRelativePath:flags:error:](v7, "childNodeWithRelativePath:flags:error:", CFSTR("Info.plist"), 0, 0);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = v15;
        if (v15)
        {
          objc_msgSend(v15, "URL");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          v136 = 0;
          v18 = objc_msgSend(v14, "writeToURL:options:error:", v17, 1, &v136);
          v19 = v136;

          if ((v18 & 1) != 0)
            v6 = 0;
          else
            v6 = _LSGetOSStatusFromNSError(v19);

        }
      }

    }
    else
    {
      v6 = 4294967255;
    }

  }
  else
  {
    v6 = _LSGetOSStatusFromNSError(v10);
  }

  if ((_DWORD)v6)
    goto LABEL_29;
  objc_msgSend(v145, "URL");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "URLByDeletingLastPathComponent");
  v27 = (void *)objc_claimAutoreleasedReturnValue();

  if (v27
    && (v28 = (id)_LSCopyiTunesMetadataDictionaryForAppContainerURL((CFURLRef)v27), v28, v28))
  {
    objc_msgSend(MEMORY[0x1E0CB38B0], "dataWithPropertyList:format:options:error:", v28, 200, 0, 0);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    if (v29)
    {
      -[FSNode childNodeWithRelativePath:flags:error:](v104, "childNodeWithRelativePath:flags:error:", CFSTR("iTunesMetadata.plist"), 0, 0);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      v31 = v30;
      if (v30)
      {
        objc_msgSend(v30, "URL");
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        v135 = 0;
        v33 = objc_msgSend(v29, "writeToURL:options:error:", v32, 1, &v135);
        v34 = v135;

        if ((v33 & 1) != 0)
          v6 = 0;
        else
          v6 = _LSGetOSStatusFromNSError(v34);

      }
      else
      {
        v6 = 0;
      }

    }
    else
    {
      v6 = 0;
    }

    if ((_DWORD)v6)
      goto LABEL_29;
  }
  else
  {
    _LSDefaultLog();
    v35 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      _LSWriteBundlePlaceholderToURLInternal((uint64_t)v101, v35);

  }
  v36 = (__CFBundle *)objc_msgSend(v145, "copyCFBundleWithError:", 0);
  if (v36)
  {
    cf = v36;
    v133 = 0u;
    v134 = 0u;
    v131 = 0u;
    v132 = 0u;
    obj = CFBundleCopyBundleLocalizations(v36);
    v37 = -[__CFArray countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v131, v149, 16);
    if (v37)
    {
      v38 = *(_QWORD *)v132;
      do
      {
        for (i = 0; i != v37; ++i)
        {
          if (*(_QWORD *)v132 != v38)
            objc_enumerationMutation(obj);
          v40 = *(void **)(*((_QWORD *)&v131 + 1) + 8 * i);
          v41 = v104;
          objc_msgSend(v40, "stringByAppendingPathExtension:", CFSTR("lproj"));
          v42 = (NSString *)objc_claimAutoreleasedReturnValue();
          _LSCreatePlaceholderSubfolder(v41, v42);
          v43 = (FSNode *)objc_claimAutoreleasedReturnValue();

          if (v43)
          {
            objc_msgSend(CFSTR("InfoPlist"), "stringByAppendingPathExtension:", CFSTR("strings"));
            v44 = (NSString *)objc_claimAutoreleasedReturnValue();
            _LSCopyResourceFileToPlaceholder(cf, v43, (NSString *)v40, v44);

          }
        }
        v37 = -[__CFArray countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v131, v149, 16);
      }
      while (v37);
    }

    if (IconServicesLibrary(void)::frameworkLibrary
      || (IconServicesLibrary(void)::frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/IconServices.framework/IconServices", 2)) != 0)
    {
      objc_msgSend(MEMORY[0x1E0C99E60], "setWithObjects:", CFSTR("CFBundlePrimaryIcon"), CFSTR("CFBundleAlternateIcons"), 0);
      v45 = (const __CFSet *)objc_claimAutoreleasedReturnValue();
      if (softLinkLICopyIconPathsFromBundleForStyles)
        v46 = (void *)softLinkLICopyIconPathsFromBundleForStyles(cf, v45);
      else
        v46 = 0;
      v129 = 0u;
      v130 = 0u;
      v127 = 0u;
      v128 = 0u;
      v47 = v46;
      v48 = -[__CFSet countByEnumeratingWithState:objects:count:](v47, "countByEnumeratingWithState:objects:count:", &v127, v148, 16);
      if (v48)
      {
        v49 = *(_QWORD *)v128;
        do
        {
          for (j = 0; j != v48; ++j)
          {
            if (*(_QWORD *)v128 != v49)
              objc_enumerationMutation(v47);
            _LSCopyResourceURLToPlaceholder(cf, v104, *(NSURL **)(*((_QWORD *)&v127 + 1) + 8 * j));
          }
          v48 = -[__CFSet countByEnumeratingWithState:objects:count:](v47, "countByEnumeratingWithState:objects:count:", &v127, v148, 16);
        }
        while (v48);
      }

      _LSCopyResourceFileToPlaceholder(cf, v104, 0, CFSTR("Assets.car"));
    }
    else
    {
      if (!v141)
        goto LABEL_68;
      +[_LSDServiceDomain defaultServiceDomain]();
      v83 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
      v84 = (id *)LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)a1, v83, 0);

      v85 = *v84;
      v120 = MEMORY[0x1E0C809B0];
      v121 = 3321888768;
      v122 = ___ZL38_LSWriteBundlePlaceholderToURLInternalRN14LaunchServices8Database7ContextEP5NSURLS4__block_invoke;
      v123 = &unk_1E103E308;
      v45 = (const __CFSet *)v85;
      v124 = v45;
      CFRetain(cf);
      v125 = v104;
      _CSArrayEnumerateAllValues();

      CFRelease(cf);
      v126 = 0;
      v47 = v45;
    }

LABEL_68:
    CFRelease(cf);
  }
  v51 = v141;
  if (v141)
  {
    if (!v141->iconFileNames)
      goto LABEL_73;
    +[_LSDServiceDomain defaultServiceDomain]();
    v52 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
    v53 = (id *)LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)a1, v52, 0);

    v54 = *v53;
    path.__pn_.__r_.__value_.__r.__words[0] = 0;
    path.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)&path;
    path.__pn_.__r_.__value_.__r.__words[2] = 0x2020000000;
    v147 = 0;
    v118[0] = 0;
    v118[1] = v118;
    v118[2] = 0x2020000000;
    v119 = 0;
    v109 = MEMORY[0x1E0C809B0];
    v110 = 3221225472;
    v111 = ___ZL38_LSWriteBundlePlaceholderToURLInternalRN14LaunchServices8Database7ContextEP5NSURLS4__block_invoke_43;
    v112 = &unk_1E1041768;
    v113 = v54;
    p_path = &path;
    v116 = v118;
    v114 = v104;
    v117 = a1;
    v55 = v54;
    _CSArrayEnumerateAllValues();

    _Block_object_dispose(v118, 8);
    _Block_object_dispose(&path, 8);
    v51 = v141;
  }
  if (!v51)
  {
LABEL_74:
    if (!v99 || !*(_DWORD *)(v99 + 140))
      goto LABEL_87;
    goto LABEL_76;
  }
LABEL_73:
  if (!v51->base.entitlements)
    goto LABEL_74;
LABEL_76:
  +[_LSDServiceDomain defaultServiceDomain]();
  v56 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
  v57 = (id *)LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)a1, v56, 0);

  v58 = (_LSDatabase *)*v57;
  v60 = v58;
  if (v141 && (entitlements = v141->base.entitlements) != 0 || v99 && (entitlements = *(_DWORD *)(v99 + 140)) != 0)
  {
    _LSPlistGetDictionary(v58, entitlements, v59);
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    if (v62)
    {
      objc_msgSend(MEMORY[0x1E0CB38B0], "dataWithPropertyList:format:options:error:", v62, 200, 0, 0);
      v63 = (void *)objc_claimAutoreleasedReturnValue();
      if (v63)
      {
        -[FSNode childNodeWithRelativePath:flags:error:](v104, "childNodeWithRelativePath:flags:error:", CFSTR("PlaceholderEntitlements.plist"), 0, 0);
        v64 = (void *)objc_claimAutoreleasedReturnValue();
        v65 = v64;
        if (v64)
        {
          objc_msgSend(v64, "URL");
          v66 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v63, "writeToURL:atomically:", v66, 1);

        }
      }

    }
  }

LABEL_87:
  path.__pn_.__r_.__value_.__r.__words[0] = 0;
  v67 = *MEMORY[0x1E0C99990];
  if (objc_msgSend(v145, "getResourceValue:forKey:options:error:", &path, *MEMORY[0x1E0C99990], 1, 0))
  {
    -[FSNode URL](v104, "URL");
    v68 = (void *)objc_claimAutoreleasedReturnValue();
    v107[0] = MEMORY[0x1E0C809B0];
    v107[1] = 3221225472;
    v107[2] = ___ZL38_LSWriteBundlePlaceholderToURLInternalRN14LaunchServices8Database7ContextEP5NSURLS4__block_invoke_2;
    v107[3] = &unk_1E1041790;
    v108 = path.__pn_.__r_.__value_.__l.__data_;
    XCFURLEnumerate((uint64_t)v68, 1, 0, v107);

    -[FSNode setResourceValue:forKey:options:error:](v104, "setResourceValue:forKey:options:error:", path.__pn_.__r_.__value_.__r.__words[0], v67, 3, 0);
  }

  -[FSNode setResourceValue:forKey:options:error:](v104, "setResourceValue:forKey:options:error:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0C99A00], 3, 0);
  v106 = 0;
  v69 = -[FSNode getFileSystemRepresentation:error:](v104, "getFileSystemRepresentation:error:", &path, &v106);
  v70 = v106;
  v71 = v70;
  if (!v69)
  {
    v6 = _LSGetOSStatusFromNSError(v70);

    if (!(_DWORD)v6)
      goto LABEL_92;
LABEL_29:
    v7 = v104;
    goto LABEL_30;
  }

LABEL_92:
  v7 = v104;
  v72 = -[NSURL fileSystemRepresentation](objc_retainAutorelease(v102), "fileSystemRepresentation");
  rename(&path, v72, v73);
  if (!v74)
  {
    v6 = 0;
    goto LABEL_34;
  }
  v75 = __error();
  v6 = _LSGetOSStatusFromPOSIXErrorCode(*v75);
LABEL_30:
  if (v7
    && (_DWORD)v6
    && -[FSNode getFileSystemRepresentation:error:](v7, "getFileSystemRepresentation:error:", &path, 0))
  {
    removefile((const char *)&path, 0, 1u);
  }
LABEL_34:

  return v6;
}

void sub_18291DE70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _Unwind_Exception *exception_objecta, void *a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void ___ZL22_LSGetPlaceholderQueuev_block_invoke()
{
  dispatch_queue_t v0;
  void *v1;
  NSObject *v2;

  dispatch_queue_attr_make_with_autorelease_frequency(MEMORY[0x1E0C80D50], DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v2 = objc_claimAutoreleasedReturnValue();
  v0 = dispatch_queue_create("com.apple.launchservices.app-placeholders", v2);
  v1 = (void *)_LSGetPlaceholderQueue(void)::result;
  _LSGetPlaceholderQueue(void)::result = (uint64_t)v0;

}

uint64_t LaunchServices::Database::Context::status(id *this)
{
  _LSDServiceDomain *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;

  +[_LSDServiceDomain defaultServiceDomain]();
  v2 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
  v3 = LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)this, v2, 0);

  if (v3)
  {
    v4 = 0;
  }
  else
  {
    v6 = this[3];
    v4 = v6;
    if (v6)
    {
      v5 = _LSGetOSStatusFromNSError(v6);
      goto LABEL_6;
    }
  }
  v5 = 0;
LABEL_6:

  return v5;
}

void sub_18291E2B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void _LSCopyResourceFileToPlaceholder(__CFBundle *a1, FSNode *a2, NSString *a3, NSString *a4)
{
  __CFString *v7;
  __CFString *v8;
  NSURL *v9;
  CFURLRef v10;
  FSNode *v11;

  v11 = a2;
  v7 = a3;
  v8 = a4;
  if (a1 && v11 && v8)
  {
    if (v7)
    {
      v9 = (NSURL *)CFBundleCopyResourceURLForLocalization(a1, v8, 0, 0, v7);
      if (!v9)
        goto LABEL_9;
    }
    else
    {
      v10 = CFBundleCopyBundleURL(a1);
      -[__CFURL URLByAppendingPathComponent:isDirectory:](v10, "URLByAppendingPathComponent:isDirectory:", v8, 0);
      v9 = (NSURL *)objc_claimAutoreleasedReturnValue();

      if (!v9)
      {
LABEL_9:

        goto LABEL_10;
      }
    }
    _LSCopyResourceURLToPlaceholder(a1, v11, v9);
    goto LABEL_9;
  }
LABEL_10:

}

void sub_18291E3A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void _LSCopyResourceURLToPlaceholder(__CFBundle *a1, FSNode *a2, NSURL *a3)
{
  FSNode *v5;
  NSURL *v6;
  NSURL *v7;
  _BOOL4 v8;
  id v9;
  void *v10;
  _BOOL4 v11;
  void *v12;
  void *v13;
  id v14;
  char to[1024];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (a1 && v5 && v6)
  {
    v14 = 0;
    v8 = -[NSURL getResourceValue:forKey:error:](v6, "getResourceValue:forKey:error:", &v14, *MEMORY[0x1E0C99A18], 0);
    v9 = v14;
    v10 = v9;
    if (v9)
      v11 = v8;
    else
      v11 = 0;
    if (v11 && objc_msgSend(v9, "BOOLValue"))
    {
      -[NSURL lastPathComponent](v7, "lastPathComponent");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      -[FSNode childNodeWithRelativePath:flags:error:](v5, "childNodeWithRelativePath:flags:error:", v12, 0, 0);
      v13 = (void *)objc_claimAutoreleasedReturnValue();

      if (v13 && objc_msgSend(v13, "getFileSystemRepresentation:error:", to, 0))
        copyfile(-[NSURL fileSystemRepresentation](objc_retainAutorelease(v7), "fileSystemRepresentation"), to, 0, 8u);

    }
  }

}

void sub_18291E518(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void ___ZL38_LSWriteBundlePlaceholderToURLInternalRN14LaunchServices8Database7ContextEP5NSURLS4__block_invoke(uint64_t a1)
{
  NSString *v2;

  v2 = (NSString *)_CSStringCopyCFString();
  if (v2)
    _LSCopyResourceFileToPlaceholder(*(__CFBundle **)(a1 + 48), *(FSNode **)(a1 + 40), 0, v2);

}

void sub_18291E5B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_ea8_48c31_ZTS10CFReleaserIP10__CFBundleE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_ea8_48c31_ZTS10CFReleaserIP10__CFBundleE(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 48);
  if (v2)
    CFRelease(v2);
  *(_QWORD *)(a1 + 48) = 0;
}

void ___ZL38_LSWriteBundlePlaceholderToURLInternalRN14LaunchServices8Database7ContextEP5NSURLS4__block_invoke_43(uint64_t a1, uint64_t a2, int a3)
{
  int *v4;
  void *v5;
  NSURL *v6;
  void *v7;
  uint64_t v8;
  _BYTE *v9;
  __CFString *v10;
  int v11;
  void *v12;
  void *v13;
  void *v14;
  NSURL *v15;
  id v16;

  v4 = (int *)_LSGetPlugin(*(_QWORD *)(a1 + 32), a3);
  if (v4 && *v4)
  {
    v5 = _LSAliasCopyResolvedNode(*(void **)(a1 + 32), *v4, 0, 0, 0);
    if (v5)
    {
      v16 = v5;
      objc_msgSend(v5, "URL");
      v6 = (NSURL *)objc_claimAutoreleasedReturnValue();
      -[NSURL lastPathComponent](v6, "lastPathComponent");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = objc_msgSend(v7, "caseInsensitiveCompare:", CFSTR("PlugIns"));

      if (v8)
      {
        v9 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
        v10 = CFSTR("Extensions");
      }
      else
      {
        v9 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
        v10 = CFSTR("PlugIns");
      }
      v11 = *v9;
      *v9 = 1;
      if (!v11)
      {
        _LSCreatePlaceholderSubfolder(*(FSNode **)(a1 + 40), &v10->isa);

      }
      objc_msgSend(*(id *)(a1 + 40), "URL");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "URLByAppendingPathComponent:isDirectory:", v10, 1);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      -[NSURL lastPathComponent](v6, "lastPathComponent");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "URLByAppendingPathComponent:isDirectory:", v14, 1);
      v15 = (NSURL *)objc_claimAutoreleasedReturnValue();

      if (v6)
      {
        if (v15)
          _LSWriteBundlePlaceholderToURLInternal(*(LaunchServices::Database::Context **)(a1 + 64), v6, v15);
      }

      v5 = v16;
    }

  }
}

void sub_18291E788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_18291E7DC()
{
  JUMPOUT(0x18291E7CCLL);
}

id _LSCreatePlaceholderSubfolder(FSNode *a1, NSString *a2)
{
  FSNode *v3;
  NSString *v4;
  NSString *v5;
  id v6;
  void *v7;
  void *v8;
  char v10[1024];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  v6 = 0;
  if (v3 && v4)
  {
    -[FSNode childNodeWithRelativePath:flags:error:](v3, "childNodeWithRelativePath:flags:error:", v4, 8, 0);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = v7;
    if (v7
      && objc_msgSend(v7, "getFileSystemRepresentation:error:", v10, 0)
      && (!mkdir(v10, 0x1C0u) || *__error() == 17))
    {
      v6 = v8;
    }
    else
    {
      v6 = 0;
    }

  }
  return v6;
}

void sub_18291E8D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id _LSPlistGetDictionary(_LSDatabase *a1, unsigned int a2, _LSPlistHint *a3)
{
  void *v3;
  void *v4;

  _LSPlistGet((uint64_t)a1, a2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  _LSPlistDataGetDictionary(v3, 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

{
  void *v3;
  void *v4;

  _LSPlistGet((uint64_t)a1, a2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  _LSPlistDataGetDictionary(v3, 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

{
  void *v3;
  void *v4;

  _LSPlistGet((uint64_t)a1, a2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  _LSPlistDataGetDictionary(v3, 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

void sub_18291E938(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZL38_LSWriteBundlePlaceholderToURLInternalRN14LaunchServices8Database7ContextEP5NSURLS4__block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  FSNode *v4;

  if (a3)
  {
    v4 = -[FSNode initWithURL:flags:error:]([FSNode alloc], "initWithURL:flags:error:", a3, 0, 0);
    if (v4)
      -[FSNode setResourceValue:forKey:options:error:](v4, "setResourceValue:forKey:options:error:", *(_QWORD *)(a1 + 32), *MEMORY[0x1E0C99990], 3, 0);

  }
}

void sub_18291E9CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t (*initLICopyIconPathsFromBundleForStyles(__CFBundle *a1, const __CFSet *a2))(__CFBundle *, const __CFSet *)
{
  void *v4;
  uint64_t (*result)(__CFBundle *, const __CFSet *);

  v4 = (void *)MobileIconsLibrary(void)::frameworkLibrary;
  if (!MobileIconsLibrary(void)::frameworkLibrary)
  {
    v4 = dlopen("/System/Library/PrivateFrameworks/MobileIcons.framework/MobileIcons", 2);
    MobileIconsLibrary(void)::frameworkLibrary = (uint64_t)v4;
  }
  result = (uint64_t (*)(__CFBundle *, const __CFSet *))dlsym(v4, "LICopyIconPathsFromBundleForStyles");
  softLinkLICopyIconPathsFromBundleForStyles = result;
  if (result)
    return (uint64_t (*)(__CFBundle *, const __CFSet *))result(a1, a2);
  return result;
}

void sub_18291EC04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_18291ECDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18291EE28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

id _LSAppRemovalServiceXPCInterface()
{
  if (_LSAppRemovalServiceXPCInterface_onceToken != -1)
    dispatch_once(&_LSAppRemovalServiceXPCInterface_onceToken, &__block_literal_global_11);
  return (id)_LSAppRemovalServiceXPCInterface_interface;
}

void _LSServer_DisplayRemovedAppPrompt(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  LSApplicationRecord *v13;
  id *v14;
  void *v15;
  unsigned int v16;
  LSApplicationRecord *v17;
  id v18;
  LSApplicationRecord *v19;
  void *v20;
  void *v21;
  int v22;
  NSObject *v23;
  void *v24;
  LaunchServices::BindingEvaluator *v25;
  int v26;
  uint64_t v27;
  void *v28;
  id v29;
  void *v30;
  void *v31;
  id v32;
  id v33;
  id v34;
  LSApplicationRecord *v35;
  _QWORD v36[4];
  id v37;
  id v38;
  id v39;
  id v40;
  __int128 *p_buf;
  id v42;
  uint64_t v43;
  _QWORD v44[2];
  _QWORD v45[2];
  __int128 buf;
  uint64_t v47;
  uint64_t v48;
  id v49;
  id v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  _LSAssertRunningInServer((uint64_t)"void _LSServer_DisplayRemovedAppPrompt(LSContext * _Nonnull, NSString *__strong _Nul"
                                    "lable, NSURL *__strong _Nullable, void (^__strong _Nonnull)(BOOL, NSError *__strong))");
  v42 = 0;
  v10 = v7;
  v11 = v8;
  v12 = v11;
  if (v10)
  {
    v13 = -[LSApplicationRecord initWithBundleIdentifierOfSystemPlaceholder:error:]([LSApplicationRecord alloc], "initWithBundleIdentifierOfSystemPlaceholder:error:", v10, &v42);
  }
  else
  {
    if (objc_msgSend(v11, "isFileURL"))
    {
      v45[0] = *MEMORY[0x1E0CB2938];
      *(_QWORD *)&buf = CFSTR("The app restoration prompt is not available for file URLs.");
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &buf, v45, 1);
      v17 = (LSApplicationRecord *)objc_claimAutoreleasedReturnValue();
      _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], -50, (uint64_t)"_LSGetPlaceholderRecordForRemovedAppPrompt", 88, v17);
      v18 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_18;
    }
    if (!v12)
    {
      v45[0] = *MEMORY[0x1E0CB2938];
      *(_QWORD *)&buf = CFSTR("Either bundleID or resourceURL must be specified to present an app restoration prompt.");
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &buf, v45, 1);
      v17 = (LSApplicationRecord *)objc_claimAutoreleasedReturnValue();
      _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], -50, (uint64_t)"_LSGetPlaceholderRecordForRemovedAppPrompt", 106, v17);
      v18 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_18;
    }
    LODWORD(buf) = 0;
    *((_QWORD *)&buf + 1) = 0;
    LODWORD(v47) = 0;
    v49 = 0;
    v50 = 0;
    v48 = 0;
    LODWORD(v43) = 14;
    objc_msgSend(v12, "scheme");
    v25 = (LaunchServices::BindingEvaluator *)objc_claimAutoreleasedReturnValue();
    v26 = _LSGetBindingForNodeOrSchemeOrUTI(a1, 0, v25, 0, 0, -1, (int *)&v43, 0, (uint64_t)&buf);

    if (v26)
    {
      v27 = *MEMORY[0x1E0CB3308];
      v44[0] = *MEMORY[0x1E0CB2938];
      v44[1] = v27;
      v45[0] = CFSTR("Failed to find an application that could open the specified URL.");
      v45[1] = v12;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v45, v44, 2);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], v26, (uint64_t)"_LSGetPlaceholderRecordForRemovedAppPrompt", 101, v28);
      v42 = (id)objc_claimAutoreleasedReturnValue();

      v13 = 0;
    }
    else
    {
      v35 = [LSApplicationRecord alloc];
      v13 = -[LSApplicationRecord _initWithContext:bundleID:bundleData:error:](v35, "_initWithContext:bundleID:bundleData:error:", a1, buf, *((_QWORD *)&buf + 1), &v42);
    }

  }
  if (!v13)
    goto LABEL_20;
  +[LSApplicationRestrictionsManager sharedInstance]();
  v14 = (id *)objc_claimAutoreleasedReturnValue();
  -[LSBundleRecord bundleIdentifier](v13, "bundleIdentifier");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = -[LSApplicationRestrictionsManager isApplicationRestricted:](v14, v15);

  if (!v16)
  {
    v19 = [LSApplicationRecord alloc];
    -[LSBundleRecord bundleIdentifier](v13, "bundleIdentifier");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = -[LSApplicationRecord initWithBundleIdentifier:allowPlaceholder:error:](v19, "initWithBundleIdentifier:allowPlaceholder:error:", v20, 1, 0);

    if (v17)
    {
      -[LSApplicationRecord applicationState](v17, "applicationState");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = objc_msgSend(v21, "isDowngraded");

      if (v22)
      {
        _LSDefaultLog();
        v23 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
        {
          -[LSBundleRecord bundleIdentifier](v13, "bundleIdentifier");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          LODWORD(buf) = 138412290;
          *(_QWORD *)((char *)&buf + 4) = v24;
          _os_log_impl(&dword_182882000, v23, OS_LOG_TYPE_INFO, "Application %@ exists as an offloaded placeholder.", (uint8_t *)&buf, 0xCu);

        }
      }
      else
      {

        v43 = *MEMORY[0x1E0CB2938];
        *(_QWORD *)&buf = CFSTR("The specified application is currently installed or installing.");
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &buf, &v43, 1);
        v23 = objc_claimAutoreleasedReturnValue();
        _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], -50, (uint64_t)"_LSGetPlaceholderRecordForRemovedAppPrompt", 126, v23);
        v13 = 0;
        v42 = (id)objc_claimAutoreleasedReturnValue();
      }

    }
    goto LABEL_19;
  }

  v43 = *MEMORY[0x1E0CB2938];
  *(_QWORD *)&buf = CFSTR("The specified application is restricted, so the system cannot prompt to reinstall it.");
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &buf, &v43, 1);
  v17 = (LSApplicationRecord *)objc_claimAutoreleasedReturnValue();
  _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], -54, (uint64_t)"_LSGetPlaceholderRecordForRemovedAppPrompt", 112, v17);
  v18 = (id)objc_claimAutoreleasedReturnValue();
LABEL_18:
  v13 = 0;
  v42 = v18;
LABEL_19:

LABEL_20:
  v29 = v42;
  if (v13)
  {
    -[LSBundleRecord localizedName](v13, "localizedName");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    -[LSBundleRecord bundleIdentifier](v13, "bundleIdentifier");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    *(_QWORD *)&buf = 0;
    *((_QWORD *)&buf + 1) = &buf;
    v47 = 0x2020000000;
    v48 = 0;
    if (_LSGetAppRemovalPromptQueue(void)::once != -1)
      dispatch_once(&_LSGetAppRemovalPromptQueue(void)::once, &__block_literal_global_12);
    v32 = (id)_LSGetAppRemovalPromptQueue(void)::result;
    v36[0] = MEMORY[0x1E0C809B0];
    v36[1] = 3221225472;
    v36[2] = ___LSServer_DisplayRemovedAppPrompt_block_invoke;
    v36[3] = &unk_1E10417B8;
    v33 = v30;
    p_buf = &buf;
    v37 = v33;
    v38 = v31;
    v39 = v12;
    v40 = v9;
    v34 = v31;
    _LSAskForScreenUnlock(v32, v36);

    _Block_object_dispose(&buf, 8);
  }
  else
  {
    (*((void (**)(id, _QWORD, id))v9 + 2))(v9, 0, v29);
  }

}

void sub_18291F528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_18291FCB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,void *a28)
{
  void *v28;
  const void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;

  CFRelease(v29);
  _Unwind_Resume(a1);
}

void ___ZL27_LSGetAppRemovalPromptQueuev_block_invoke()
{
  dispatch_queue_t v0;
  void *v1;
  NSObject *v2;

  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v2 = objc_claimAutoreleasedReturnValue();
  v0 = dispatch_queue_create("LS app removal prompt queue", v2);
  v1 = (void *)_LSGetAppRemovalPromptQueue(void)::result;
  _LSGetAppRemovalPromptQueue(void)::result = (uint64_t)v0;

}

__CFString *_LSGetAppRemovalPromptStringForKey(NSString *a1, NSString *a2)
{
  NSString *v3;
  __CFString *v4;
  __CFBundle *v5;
  __CFString *v6;

  v3 = a1;
  v4 = a2;
  v5 = (__CFBundle *)_LSGetBundle();
  v6 = (__CFString *)CFBundleCopyLocalizedString(v5, v4, v4, CFSTR("AppRemoval"));
  if (!v6)
    v6 = v3;

  return v6;
}

void sub_18291FEE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___ZL26_LSDisplayRemovedAppPromptP20__CFUserNotificationP8NSStringP5NSURL18LSAppRestoreSourceU13block_pointerFvbP7NSErrorE_block_invoke(uint64_t a1)
{
  _LSSpringBoardCall *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  v2 = objc_alloc_init(_LSSpringBoardCall);
  -[_LSSpringBoardCall setBundleIdentifier:](v2, "setBundleIdentifier:", CFSTR("com.apple.AppStore"));
  v3 = getFBSOpenApplicationOptionKeyPayloadURL[0]();
  v4 = *(_QWORD *)(a1 + 32);
  v6 = v3;
  v7[0] = v4;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v7, &v6, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[_LSSpringBoardCall setLaunchOptions:](v2, "setLaunchOptions:", v5);

  -[_LSSpringBoardCall setClientXPCConnection:](v2, "setClientXPCConnection:", 0);
  -[_LSSpringBoardCall setCallCompletionHandlerWhenFullyComplete:](v2, "setCallCompletionHandlerWhenFullyComplete:", 1);
  -[_LSSpringBoardCall callWithCompletionHandler:](v2, "callWithCompletionHandler:", *(_QWORD *)(a1 + 40));

}

void sub_18291FFDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t initFBSOpenApplicationOptionKeyPayloadURL(void)
{
  void *v0;
  uint64_t result;

  v0 = (void *)FrontBoardServicesLibrary(void)::frameworkLibrary;
  if (!FrontBoardServicesLibrary(void)::frameworkLibrary)
  {
    v0 = dlopen("/System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices", 2);
    FrontBoardServicesLibrary(void)::frameworkLibrary = (uint64_t)v0;
  }
  result = *(_QWORD *)dlsym(v0, "FBSOpenApplicationOptionKeyPayloadURL");
  constantFBSOpenApplicationOptionKeyPayloadURL = result;
  getFBSOpenApplicationOptionKeyPayloadURL[0] = FBSOpenApplicationOptionKeyPayloadURLFunction;
  return result;
}

{
  void *v0;
  uint64_t result;

  v0 = (void *)FrontBoardServicesLibrary(void)::frameworkLibrary;
  if (!FrontBoardServicesLibrary(void)::frameworkLibrary)
  {
    v0 = dlopen("/System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices", 2);
    FrontBoardServicesLibrary(void)::frameworkLibrary = (uint64_t)v0;
  }
  result = *(_QWORD *)dlsym(v0, "FBSOpenApplicationOptionKeyPayloadURL");
  constantFBSOpenApplicationOptionKeyPayloadURL = result;
  getFBSOpenApplicationOptionKeyPayloadURL = FBSOpenApplicationOptionKeyPayloadURLFunction;
  return result;
}

{
  void *v0;
  uint64_t result;

  v0 = (void *)FrontBoardServicesLibrary(void)::frameworkLibrary;
  if (!FrontBoardServicesLibrary(void)::frameworkLibrary)
  {
    v0 = dlopen("/System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices", 2);
    FrontBoardServicesLibrary(void)::frameworkLibrary = (uint64_t)v0;
  }
  result = *(_QWORD *)dlsym(v0, "FBSOpenApplicationOptionKeyPayloadURL");
  constantFBSOpenApplicationOptionKeyPayloadURL = result;
  getFBSOpenApplicationOptionKeyPayloadURL = FBSOpenApplicationOptionKeyPayloadURLFunction;
  return result;
}

uint64_t FBSOpenApplicationOptionKeyPayloadURLFunction(void)
{
  return constantFBSOpenApplicationOptionKeyPayloadURL;
}

{
  return constantFBSOpenApplicationOptionKeyPayloadURL;
}

{
  return constantFBSOpenApplicationOptionKeyPayloadURL;
}

Class initATTrackingEnforcementManager()
{
  Class result;

  if (!AppTrackingTransparencyLibrary_frameworkLibrary)
    AppTrackingTransparencyLibrary_frameworkLibrary = (uint64_t)dlopen("/System/Library/Frameworks/AppTrackingTransparency.framework/AppTrackingTransparency", 2);
  result = objc_getClass("ATTrackingEnforcementManager");
  classATTrackingEnforcementManager = (uint64_t)result;
  getATTrackingEnforcementManagerClass[0] = (uint64_t (*)())ATTrackingEnforcementManagerFunction;
  return result;
}

uint64_t _LSAudioUnitURLOpen(NSURL *a1)
{
  return softLinkAudioUnitURLOpen((const __CFURL *)a1);
}

uint64_t (*initAudioUnitURLOpen(const __CFURL *a1))(const __CFURL *)
{
  void *v2;
  uint64_t (*result)(const __CFURL *);

  v2 = (void *)AudioToolboxLibrary(void)::frameworkLibrary;
  if (!AudioToolboxLibrary(void)::frameworkLibrary)
  {
    v2 = dlopen("/System/Library/Frameworks/AudioToolbox.framework/AudioToolbox", 2);
    AudioToolboxLibrary(void)::frameworkLibrary = (uint64_t)v2;
  }
  result = (uint64_t (*)(const __CFURL *))dlsym(v2, "AudioUnitURLOpen");
  softLinkAudioUnitURLOpen = result;
  if (result)
    return (uint64_t (*)(const __CFURL *))result(a1);
  return result;
}

uint64_t _LSBindableComparePriority(void *a1, char a2, char a3)
{
  id v5;
  unsigned int v6;
  _DWORD *v7;
  uint64_t v8;
  _DWORD *v9;
  char v10;
  uint64_t v11;
  char v12;

  v5 = a1;
  v6 = a2 & 3;
  if (v6 == (a3 & 3))
  {
    if (v6 == 3)
    {
      v7 = (_DWORD *)_UTTypeGet();
      v11 = _UTTypeGet();
      v9 = (_DWORD *)v11;
      if (v7 && v11)
      {
LABEL_10:
        v10 = _UTTypeComparePriority(v5, v7, v5, v9);
        goto LABEL_18;
      }
    }
    else
    {
      if ((a2 & 3) != 0)
      {
        v10 = 0;
        goto LABEL_18;
      }
      v7 = (_DWORD *)_UTTypeGet();
      v8 = _UTTypeGet();
      v9 = (_DWORD *)v8;
      if (v7 && v8)
        goto LABEL_10;
    }
    if (v9)
      v12 = -1;
    else
      v12 = 0;
    if (v7)
      v10 = 1;
    else
      v10 = v12;
  }
  else
  {
    v10 = v6 < (a3 & 3u);
  }
LABEL_18:

  return v10;
}

void sub_182920240(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _LSBindableActivate(void *a1, int a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  id v7;
  void *v8;
  void **v9;
  uint64_t v10;
  int v11;
  int v12;

  v3 = a1;
  v12 = a2;
  if (a2)
  {
    if (_CSStringBindingGetBindings())
    {
      v8 = 0;
      v9 = &v8;
      v10 = 0x2020000000;
      v11 = -1;
      v7 = v3;
      _CSArrayEnumerateAllValues();
      if (*((_DWORD *)v9 + 6) == -1)
      {
        _CSArrayAppendValue();
      }
      else if (_CSArrayGetValueAtIndex() != a2)
      {
        _CSArrayInsertValueAtIndex();
      }

      _Block_object_dispose(&v8, 8);
      v4 = 0;
    }
    else
    {
      v8 = 0;
      if (_CSArrayCreate())
        v5 = CSMapSetValue();
      else
        v5 = _LSGetOSStatusFromNSError(v8);
      v4 = v5;

    }
  }
  else
  {
    v4 = 4294967246;
  }

  return v4;
}

void sub_182920448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  void *v10;
  va_list va;

  va_start(va, a10);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _LSBindableSetGeneration(void *a1, int a2, int a3)
{
  id v5;
  uint64_t v6;
  id v7;

  v5 = a1;
  v6 = a2 & 0xFFFFFFFC;
  v7 = v5;
  if ((a2 & 3) != 0)
  {
    if ((a2 & 3) == 2)
      _LSClaimSetGeneration((uint64_t)v5, v6, a3);
  }
  else
  {
    _UTTypeSetGeneration((uint64_t)v5, v6, a3);
  }

}

void sub_18292058C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t _LSBindableDeactivate(void *a1, int a2)
{
  id v3;
  uint64_t v4;
  id v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;

  v3 = a1;
  if (a2)
  {
    if (_CSStringBindingGetBindings())
    {
      v7 = 0;
      v8 = &v7;
      v9 = 0x2020000000;
      v10 = -1;
      v6 = v3;
      _CSArrayEnumerateAllValues();
      if (*((_DWORD *)v8 + 6) != -1)
      {
        if (_CSArrayGetCount() == 1)
        {
          v4 = CSMapRemoveValue();
          if ((_DWORD)v4)
          {
LABEL_11:

            _Block_object_dispose(&v7, 8);
            goto LABEL_12;
          }
          _CSArrayDispose();
        }
        else
        {
          _CSArrayRemoveValueAtIndex();
        }
      }
      v4 = 0;
      goto LABEL_11;
    }
    v4 = 4294957797;
  }
  else
  {
    v4 = 4294967246;
  }
LABEL_12:

  return v4;
}

void sub_18292074C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  va_list va;

  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _LSBindingMapGetVisualizationFunctions(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = LaunchServices::BindingMaps::display;
  a1[2] = 0;
}

BOOL LaunchServices::BindingMaps::display(uint64_t *a1, int a2)
{
  int BindingMapIndexWithTargetTable;

  BindingMapIndexWithTargetTable = _LSDatabaseFindBindingMapIndexWithTargetTable(*a1, a2);
  if (BindingMapIndexWithTargetTable != -1)
  {
    _LSDatabaseFindBindingMapTargetTable((void *)*a1, BindingMapIndexWithTargetTable);
    _CSStringBindingEnumerateAllBindings();
  }
  return BindingMapIndexWithTargetTable != -1;
}

void ___ZN14LaunchServices11BindingMapsL7displayEP9LSContextjjPNS_10DumpWriterE_block_invoke(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  NSString *v5;
  NSArray *v6;

  v4 = _CSStringCopyCFString();
  if (!v4)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("unknown bindable key string (0x%llx):"), a2);
    v4 = objc_claimAutoreleasedReturnValue();
  }
  v5 = (NSString *)v4;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v6 = (NSArray *)(id)objc_claimAutoreleasedReturnValue();
  _CSArrayEnumerateAllValues();
  CSStore2::AttributedStringWriter::array(*(CSStore2::AttributedStringWriter **)(a1 + 40), v5, v6);

}

void sub_1829209E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void ___ZN14LaunchServices11BindingMapsL7displayEP9LSContextjjPNS_10DumpWriterE_block_invoke_2(uint64_t a1, int a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;

  v3 = a3;
  v5 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v5 != *(_DWORD *)(**(_QWORD **)(a1 + 40) + 20)
    && (_DWORD)v5 != *(_DWORD *)(**(_QWORD **)(a1 + 40) + 1604)
    && (_DWORD)v5 != *(_DWORD *)(**(_QWORD **)(a1 + 40) + 1608))
  {
    __asm { BR              X11 }
  }
  CSStore2::AttributedStringWriter::link(*(CSStore2::AttributedStringWriter **)(a1 + 48), v5, a3, 0);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = *(void **)(a1 + 32);
  v9 = (id)v6;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@ (0x%llx)"), v6, v3);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v8);

}

void sub_182920CAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void LaunchServices::BindingEvaluator::CreateWithURL(LaunchServices::BindingEvaluator *this@<X0>, FSNode **a2@<X8>)
{
  NSObject *v5;
  NSString *v6;
  FSNode *v7;
  FSNode *v8;
  FSNode *v9;
  uint64_t v10;
  FSNode *v11;
  FSNode *v12;
  uint64_t v13;
  FSNode *v14;
  uint8_t buf[4];
  LaunchServices::BindingEvaluator *v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  LaunchServices::BindingEvaluator::BindingEvaluator((LaunchServices::BindingEvaluator *)a2);
  _LSBindingLog();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138478083;
    v16 = this;
    v17 = 1024;
    v18 = -[LaunchServices::BindingEvaluator isFileURL](this, "isFileURL");
    _os_log_impl(&dword_182882000, v5, OS_LOG_TYPE_DEBUG, "BindingEvaluator::CreateWithURL(%{private}@) isFileURL=%{BOOL}d", buf, 0x12u);
  }

  LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)CFSTR("Creating binding evaluator for URL %@"), v6, this);
  if (-[LaunchServices::BindingEvaluator isFileURL](this, "isFileURL"))
  {
    v7 = -[FSNode initWithURL:flags:error:]([FSNode alloc], "initWithURL:flags:error:", this, 0, 0);
    v8 = *a2;
    *a2 = v7;

    v9 = a2[1];
    a2[1] = (FSNode *)CFSTR("file");

    -[FSNode nameWithError:](*a2, "nameWithError:", 0);
    v10 = objc_claimAutoreleasedReturnValue();
    v11 = a2[3];
    a2[3] = (FSNode *)v10;
  }
  else
  {
    v12 = (FSNode *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3998]), "initWithURL:resolvingAgainstBaseURL:", this, 0);
    v11 = v12;
    if (v12)
    {
      -[FSNode scheme](v12, "scheme");
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = a2[1];
      a2[1] = (FSNode *)v13;

    }
  }

}

void sub_182920E6C(_Unwind_Exception *a1)
{
  id *v1;
  void *v2;

  LaunchServices::BindingEvaluator::~BindingEvaluator(v1);
  _Unwind_Resume(a1);
}

void LaunchServices::BindingEvaluator::CreateWithNode(void *a1@<X0>, LaunchServices::BindingEvaluator *a2@<X8>)
{
  NSObject *v4;
  NSString *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint8_t buf[4];
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  LaunchServices::BindingEvaluator::BindingEvaluator(a2);
  _LSBindingLog();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138477827;
    v10 = a1;
    _os_log_impl(&dword_182882000, v4, OS_LOG_TYPE_DEBUG, "BindingEvaluator::CreateWithNode(%{private}@)", buf, 0xCu);
  }

  LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)CFSTR("Creating binding evaluator for FSNode %@"), v5, a1);
  objc_storeStrong((id *)a2, a1);
  v6 = (void *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = CFSTR("file");

  objc_msgSend(a1, "nameWithError:", 0);
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = (void *)*((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;

}

void sub_182920FAC(_Unwind_Exception *a1)
{
  id *v1;

  LaunchServices::BindingEvaluator::~BindingEvaluator(v1);
  _Unwind_Resume(a1);
}

void LaunchServices::BindingEvaluator::CreateWithUTI(LaunchServices::BindingEvaluator *this@<X0>, NSString *a2@<X1>, LaunchServices::BindingEvaluator *a3@<X8>)
{
  NSObject *v7;
  NSString *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint8_t buf[4];
  LaunchServices::BindingEvaluator *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  LaunchServices::BindingEvaluator::BindingEvaluator(a3);
  _LSBindingLog();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138543362;
    v14 = this;
    _os_log_impl(&dword_182882000, v7, OS_LOG_TYPE_DEBUG, "BindingEvaluator::CreateWithUTI(%{public}@)", buf, 0xCu);
  }

  LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)CFSTR("Creating binding evaluator for UTI %@"), v8, this);
  v9 = -[LaunchServices::BindingEvaluator copy](this, "copy");
  v10 = (void *)*((_QWORD *)a3 + 2);
  *((_QWORD *)a3 + 2) = v9;

  v11 = -[NSString copy](a2, "copy");
  v12 = (void *)*((_QWORD *)a3 + 3);
  *((_QWORD *)a3 + 3) = v11;

}

void sub_1829210BC(_Unwind_Exception *a1)
{
  id *v1;

  LaunchServices::BindingEvaluator::~BindingEvaluator(v1);
  _Unwind_Resume(a1);
}

uint64_t LaunchServices::BindingEvaluator::ContentTypeBindingAllowsOverride(LSContext *this, LSContext *a2, NSString *a3)
{
  int v3;
  _BOOL4 v6;
  NSObject *v7;
  uint64_t v8;
  int v10;
  LSContext *v11;
  __int16 v12;
  int v13;
  uint64_t v14;
  id v15;
  id v16;
  char v17;
  id v18[13];
  int v19;
  int v20;
  uint64_t v21;

  v3 = (int)a3;
  v21 = *MEMORY[0x1E0C80C00];
  LaunchServices::BindingEvaluator::CreateWithUTI((LaunchServices::BindingEvaluator *)a2, 0, (LaunchServices::BindingEvaluator *)v18);
  v19 = v3;
  v20 = 142;
  LaunchServices::BindingEvaluator::getBestBinding((uint64_t *)&v10, (LaunchServices::BindingEvaluator *)v18, this, 0, 0);
  if (v17)
  {
    if (v14)
    {
      v6 = (*(_DWORD *)(v14 + 8) & 2) == 0;

      if (!v6)
      {
        _LSDefaultLog();
        v7 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          v10 = 138543618;
          v11 = a2;
          v12 = 1026;
          v13 = v3;
          _os_log_impl(&dword_182882000, v7, OS_LOG_TYPE_DEFAULT, "Override not allowed for content type %{public}@, roles 0x%{public}x", (uint8_t *)&v10, 0x12u);
        }
        v8 = 0;
        goto LABEL_11;
      }
    }
    else
    {

    }
  }
  _LSDefaultLog();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    LaunchServices::BindingEvaluator::ContentTypeBindingAllowsOverride((uint64_t)a2, v3, v7);
  v8 = 1;
LABEL_11:

  LaunchServices::BindingEvaluator::~BindingEvaluator(v18);
  return v8;
}

void sub_18292125C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  LaunchServices::BindingEvaluator::~BindingEvaluator((id *)va);
  _Unwind_Resume(a1);
}

uint64_t LaunchServices::BindingEvaluator::PrepareMimicForBinding(void *a1, uint64_t a2)
{
  uint64_t result;
  void *v5;
  int v6;

  result = LaunchServices::TypeEvaluator::PrepareMimicForTypeEvaluation(a1, a2);
  if ((_DWORD)result)
  {
    result = _LSPrepareMimicForBundleLookup(a1, a2);
    if ((_DWORD)result)
    {
      result = objc_msgSend(a1, "populateSimpleSelector:error:", sel_isSideFault, a2);
      if ((_DWORD)result)
      {
        objc_msgSend(a1, "mimic");
        v5 = (void *)objc_claimAutoreleasedReturnValue();
        v6 = objc_msgSend(v5, "isSideFault");

        if (v6)
          return objc_msgSend(a1, "populateSimpleSelector:error:", sel_sideFaultResourceValuesWithError_, a2);
        else
          return 1;
      }
    }
  }
  return result;
}

void sub_182921314(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id LaunchServices::BindingEvaluator::getCalculatedUTI(LaunchServices::BindingEvaluator *this, LSContext *a2)
{
  id v2;
  id v4;

  v4 = 0;
  LaunchServices::BindingEvaluation::calculateUTI(a2, (uint64_t)this, &v4, 0, 0);
  v2 = v4;

  return v2;
}

void sub_182921378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void LaunchServices::BindingEvaluator::setFilter_NoIO(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;

  v5 = objc_msgSend(a3, "copy");
  v6 = *(void **)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v5;

  v7 = objc_msgSend(a2, "copy");
  v8 = *(void **)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v7;

}

void LaunchServices::BindingEvaluator::setAllPropertiesFromBindingEvaluator(LaunchServices::BindingEvaluator *this, const LaunchServices::BindingEvaluator *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;

  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  if (this != a2)
    std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>((char *)this + 112, *((char **)a2 + 14), *((_QWORD *)a2 + 15), (uint64_t)(*((_QWORD *)a2 + 15) - *((_QWORD *)a2 + 14)) >> 2);
  v4 = MEMORY[0x186DAE9BC](*((_QWORD *)a2 + 17));
  v5 = (void *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = v4;

  objc_storeStrong((id *)this + 18, *((id *)a2 + 18));
  v6 = MEMORY[0x186DAE9BC](*((_QWORD *)a2 + 19));
  v7 = (void *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = v6;

  objc_storeStrong((id *)this + 20, *((id *)a2 + 20));
}

void LaunchServices::BindingEvaluator::evaluateBindings(LaunchServices::BindingEvaluator *a1@<X0>, LSContext *a2@<X1>, _QWORD *a3@<X2>, uint64_t *a4@<X8>)
{
  LaunchServices::BindingEvaluator::evaluateBindings(a1, a2, 0, a3, a4);
}

void LaunchServices::BindingEvaluator::evaluateBindings(LaunchServices::BindingEvaluator *a1@<X0>, LSContext *a2@<X1>, void **a3@<X2>, _QWORD *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  __CFString *v16;
  id **v17;
  id **v18;
  id ***v19;
  uint64_t v20;
  id v21;
  id v22[13];

  v22[12] = *(id *)MEMORY[0x1E0C80C00];
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  LaunchServices::BindingEvaluation::State::State((LaunchServices::BindingEvaluation::State *)&v20, a2, a1);
  if (a3)
  {
    LaunchServices::BindingEvaluation::State::getTypeRecord((LaunchServices::BindingEvaluation::State *)&v20);
    v9 = objc_claimAutoreleasedReturnValue();
    v10 = *a3;
    *a3 = (void *)v9;

  }
  LaunchServices::BindingEvaluation::runEvaluator(&v20, a4, (uint64_t *)&v17);
  if (v17 != v18)
  {
    std::vector<LSBinding>::reserve(a5, 0xAAAAAAAAAAAAAAABLL * (((char *)v18 - (char *)v17) >> 5));
    std::vector<LSBinding>::__insert_with_size[abi:nn180100]<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding *>,std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding *>>(a5, *a5, (uint64_t)v17, (uint64_t)v18, 0xAAAAAAAAAAAAAAABLL * (((char *)v18 - (char *)v17) >> 5));
    if ((LaunchServices::BindingEvaluation::gIsReasonTrackingEnabled || (*((_BYTE *)a1 + 110) & 2) != 0) && v18 != v17)
    {
      v11 = 0;
      if ((unint64_t)(((char *)v18 - (char *)v17) / 96) <= 1)
        v12 = 1;
      else
        v12 = ((char *)v18 - (char *)v17) / 96;
      v13 = 40;
      do
      {
        LaunchServices::BindingEvaluation::getReasonFromBinding((uint64_t)&v17[v11]);
        v14 = objc_claimAutoreleasedReturnValue();
        v15 = (void *)v14;
        if (v14)
          v16 = (__CFString *)v14;
        else
          v16 = &stru_1E10473A0;
        objc_storeStrong((id *)(*a5 + v13), v16);

        v11 += 12;
        v13 += 48;
        --v12;
      }
      while (v12);
    }
  }
  v19 = &v17;
  std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__destroy_vector::operator()[abi:nn180100]((id ***)&v19);

  v17 = (id **)v22;
  std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__destroy_vector::operator()[abi:nn180100](&v17);
  LaunchServices::BindingEvaluator::~BindingEvaluator(&v21);
}

void sub_18292162C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id **a13, void **a14)
{
  a13 = (id **)&a9;
  std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__destroy_vector::operator()[abi:nn180100](&a13);
  LaunchServices::BindingEvaluation::State::~State((id *)&a14);
  std::vector<LSBinding>::__destroy_vector::operator()[abi:nn180100](&a14);
  _Unwind_Resume(a1);
}

id LaunchServices::BindingEvaluation::State::getTypeRecord(LaunchServices::BindingEvaluation::State *this)
{
  id v1;

  if (*((_BYTE *)this + 240))
  {
    v1 = -[_UTDynamicTypeRecord _initWithContext:dynamicUTI:]([_UTDynamicTypeRecord alloc], "_initWithContext:dynamicUTI:", *(_QWORD *)this, *((_QWORD *)this + 27));
  }
  else if (*((_DWORD *)this + 56))
  {
    v1 = -[LSRecord _initWithContext:tableID:unitID:]([_UTDeclaredTypeRecord alloc], "_initWithContext:tableID:unitID:");
  }
  else
  {
    v1 = 0;
  }
  return v1;
}

uint64_t std::vector<LSBinding>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0x555555555555556)
      abort();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:nn180100]<std::allocator<LSBinding>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 48 * v6;
    std::vector<LSBinding>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<LSBinding>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_182921798(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<LSBinding>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

id LaunchServices::BindingEvaluation::getReasonFromBinding(uint64_t a1)
{
  uint64_t v1;
  const char *v2;
  int v3;
  const char *v4;
  id v5;

  v1 = *(_QWORD *)(a1 + 80);
  if (v1)
  {
    v2 = "?";
    v3 = *(unsigned __int8 *)(a1 + 72);
    if (v3 == 1)
      v2 = "beat next";
    if (v3 == 255)
      v4 = "lost to prev";
    else
      v4 = v2;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@ (%s because %@)"), *(_QWORD *)(a1 + 40), v4, v1);
    v5 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v5 = *(id *)(a1 + 40);
  }
  return v5;
}

void LaunchServices::BindingEvaluation::State::~State(id *this)
{
  id **v2;

  v2 = (id **)(this + 22);
  std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__destroy_vector::operator()[abi:nn180100](&v2);
  LaunchServices::BindingEvaluator::~BindingEvaluator(this + 1);
}

id LaunchServices::getLocalizedKindStringWithEvaluator(void **a1, void *a2, const LaunchServices::BindingEvaluator *a3, _QWORD *a4)
{
  id v7;
  _LSDServiceDomain *v8;
  LSContext *v9;
  LaunchServices::BindingEvaluation::ExtendedBinding *v10;
  void *KindStringFromState;
  void *v12;
  _LSDServiceDomain *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  NSString *v17;
  NSString *v18;
  LaunchServices::CanonicalString *v19;
  NSString *v20;
  _LSDisplayNameConstructor *v21;
  LaunchServices::BindingEvaluation::State *v22;
  id v23;
  id v24;
  id v25;
  _OWORD v27[2];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  char v32;
  void **v33;
  id v34;
  char v35;
  id v36;
  LaunchServices::CanonicalString **v37;
  id v38[13];
  int v39;
  int v40;
  id v41[13];

  v41[12] = *(id *)MEMORY[0x1E0C80C00];
  v7 = a2;
  v33 = a1;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  +[_LSDServiceDomain defaultServiceDomain]();
  v8 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
  v9 = (LSContext *)LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)&v33, v8, 0);

  if (v9)
  {
    LaunchServices::BindingEvaluation::State::State((LaunchServices::BindingEvaluation::State *)&v37, v9, a3);
    v38[12] = (id)1;
    v40 |= 0x1508Au;
    v39 = 15;
    v32 = 0;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    memset(v27, 0, sizeof(v27));
    KindStringFromState = (void *)LaunchServices::BindingEvaluation::getKindStringFromState((LaunchServices::BindingEvaluation *)&v37, (LaunchServices::BindingEvaluation::State *)&v32, (BOOL *)v27, v10);
    if (KindStringFromState)
    {
      if (!v7)
      {
        if (*(_QWORD *)a3)
        {
          objc_msgSend(*(id *)a3, "URL");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "ls_preferredLocalizations");
          v7 = (id)objc_claimAutoreleasedReturnValue();

        }
        else
        {
          v7 = 0;
        }
      }
      if (v32)
      {
        LaunchServices::BindingEvaluation::getBoundDisplayNameConstructorsForKindString(&v37, (unsigned int *)v27, (uint64_t)v7, 0);
        v16 = objc_claimAutoreleasedReturnValue();
        v18 = (NSString *)v16;
        if (v32)
        {
          if (v16)
          {
            v19 = (LaunchServices::CanonicalString *)LaunchServices::CanonicalString::Find(*v37, (_LSDatabase *)CFSTR("%@ Document"), v17);
            if (v19)
              KindStringFromState = (void *)LaunchServices::CanonicalString::getLocalizedString(v19);
          }
        }
        v20 = v18;
      }
      else
      {
        v20 = 0;
      }
      LaunchServices::LocalizedString::localizeUnsafely((uint64_t)KindStringFromState, *v37, v7);
      v22 = (LaunchServices::BindingEvaluation::State *)objc_claimAutoreleasedReturnValue();
      if (v22)
      {
        LaunchServices::BindingEvaluation::formatAndSanitizeKindString((LaunchServices::BindingEvaluation *)&v37, v22, v20, v21);
        KindStringFromState = (void *)objc_claimAutoreleasedReturnValue();

      }
      else if (a4)
      {
        _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], -10813, (uint64_t)"getLocalizedKindStringWithEvaluator", 1035, 0);
        KindStringFromState = 0;
        *a4 = (id)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        KindStringFromState = 0;
      }

    }
    *(_QWORD *)&v27[0] = v41;
    std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__destroy_vector::operator()[abi:nn180100]((id ***)v27);
    LaunchServices::BindingEvaluator::~BindingEvaluator(v38);
  }
  else if (a4)
  {
    +[_LSDServiceDomain defaultServiceDomain]();
    v13 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
    v14 = LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)&v33, v13, 0);

    if (v14)
      v15 = 0;
    else
      v15 = objc_retainAutorelease(v36);
    KindStringFromState = 0;
    *a4 = v15;
  }
  else
  {
    KindStringFromState = 0;
  }
  v23 = KindStringFromState;
  if (v33 && v35)
    _LSContextDestroy(v33);
  v24 = v34;
  v33 = 0;
  v34 = 0;

  v35 = 0;
  v25 = v36;
  v36 = 0;

  return v23;
}

void sub_182921BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  void *v28;

  LaunchServices::BindingEvaluation::ExtendedBinding::~ExtendedBinding(&a9);
  LaunchServices::BindingEvaluation::State::~State(&a28);
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a23);

  _Unwind_Resume(a1);
}

id LaunchServices::BindingEvaluator::getLocalizedKindString(const LaunchServices::BindingEvaluator *a1, void **a2, void *a3, _QWORD *a4)
{
  LaunchServices::getLocalizedKindStringWithEvaluator(a2, a3, a1, a4);
  return (id)objc_claimAutoreleasedReturnValue();
}

id LaunchServices::BindingEvaluator::getLocalizedKindStringDictionary(const LaunchServices::BindingEvaluator *a1, void **a2, _QWORD *a3)
{
  _LSDServiceDomain *v5;
  LSContext *v6;
  uint64_t *v7;
  LaunchServices::BindingEvaluation *v8;
  int v9;
  LaunchServices::BindingEvaluation::ExtendedBinding *v10;
  LaunchServices::LocalizedString *KindStringFromState;
  void *v12;
  _LSDServiceDomain *v13;
  uint64_t v14;
  id v15;
  id v16;
  void *v17;
  NSString *v18;
  void *v19;
  LaunchServices::CanonicalString *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  id v24;
  id v25;
  id v26;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, LaunchServices::BindingEvaluation::State *);
  void *v31;
  id v32;
  id v33;
  id v34;
  id v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t, uint64_t);
  void (*v42)(uint64_t);
  id v43;
  BOOL v44[16];
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  char v50;
  void **v51;
  id v52;
  char v53;
  id v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  __n128 (*v58)(__n128 *, __n128 *);
  void (*v59)(uint64_t);
  const char *v60;
  uint64_t v61;
  id v62;
  id v63[13];

  v63[12] = *(id *)MEMORY[0x1E0C80C00];
  v51 = a2;
  v52 = 0;
  v53 = 0;
  v54 = 0;
  +[_LSDServiceDomain defaultServiceDomain]();
  v5 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
  v6 = (LSContext *)LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)&v51, v5, 0);

  if (v6)
  {
    v55 = 0;
    v56 = &v55;
    v57 = 0x14012000000;
    v58 = __Block_byref_object_copy__6;
    v59 = __Block_byref_object_dispose__6;
    v60 = " 5#0%3$0\"2";
    LaunchServices::BindingEvaluation::State::State((LaunchServices::BindingEvaluation::State *)&v61, v6, a1);
    v7 = v56;
    v8 = (LaunchServices::BindingEvaluation *)(v56 + 6);
    v56[19] = 1;
    v9 = *((_DWORD *)v7 + 41) | 0x1508A;
    *((_DWORD *)v7 + 40) = 15;
    *((_DWORD *)v7 + 41) = v9;
    v50 = 0;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    *(_OWORD *)v44 = 0u;
    v45 = 0u;
    KindStringFromState = (LaunchServices::LocalizedString *)LaunchServices::BindingEvaluation::getKindStringFromState(v8, (LaunchServices::BindingEvaluation::State *)&v50, v44, v10);
    if (KindStringFromState)
    {
      if (v50)
      {
        LaunchServices::BindingEvaluation::getBoundDisplayNameConstructorsForKindString((_QWORD **)v56 + 6, (unsigned int *)v44, 0, 1);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v12 = 0;
      }
      objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("LSDefaultLocalizedValue"));
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "allKeys");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      if (v50)
      {
        if (v17)
        {
          v20 = (LaunchServices::CanonicalString *)LaunchServices::CanonicalString::Find(*(LaunchServices::CanonicalString **)v56[6], (_LSDatabase *)CFSTR("%@ Document"), v18);
          if (v20)
            KindStringFromState = (LaunchServices::LocalizedString *)LaunchServices::CanonicalString::getLocalizedString(v20);
        }
      }
      LaunchServices::LocalizedString::getAllUnsafeLocalizations(KindStringFromState, *(_LSDatabase **)v56[6], 0, 0, 0);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      if (v21)
      {
        v38 = 0;
        v39 = &v38;
        v40 = 0x3032000000;
        v41 = __Block_byref_object_copy__22;
        v42 = __Block_byref_object_dispose__23;
        v43 = 0;
        v28 = MEMORY[0x1E0C809B0];
        v29 = 3221225472;
        v30 = ___ZNK14LaunchServices16BindingEvaluator32getLocalizedKindStringDictionaryEP9LSContextPU15__autoreleasingP7NSError_block_invoke;
        v31 = &unk_1E1041878;
        v32 = v12;
        v33 = v19;
        v34 = v17;
        v36 = &v55;
        v37 = &v38;
        v16 = v21;
        v35 = v16;
        objc_msgSend(v16, "enumerateKeysAndObjectsUsingBlock:", &v28);
        v22 = (void *)v39[5];
        if (v22)
        {
          v23 = objc_msgSend(v22, "copy", v28, v29, v30, v31, v32, v33, v34);

          v16 = (id)v23;
        }

        _Block_object_dispose(&v38, 8);
      }
      else if (a3)
      {
        _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], -10813, (uint64_t)"getLocalizedKindStringDictionary", 1134, 0);
        v16 = 0;
        *a3 = (id)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v16 = 0;
      }

    }
    else if (a3)
    {
      _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], -10813, (uint64_t)"getLocalizedKindStringDictionary", 1137, 0);
      v16 = 0;
      *a3 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v16 = 0;
    }

    _Block_object_dispose(&v55, 8);
    *(_QWORD *)v44 = v63;
    std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__destroy_vector::operator()[abi:nn180100]((id ***)v44);
    LaunchServices::BindingEvaluator::~BindingEvaluator(&v62);
  }
  else if (a3)
  {
    +[_LSDServiceDomain defaultServiceDomain]();
    v13 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
    v14 = LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)&v51, v13, 0);

    if (v14)
      v15 = 0;
    else
      v15 = objc_retainAutorelease(v54);
    v16 = 0;
    *a3 = v15;
  }
  else
  {
    v16 = 0;
  }
  v24 = v16;
  if (v51 && v53)
    _LSContextDestroy(v51);
  v25 = v52;
  v51 = 0;
  v52 = 0;

  v53 = 0;
  v26 = v54;
  v54 = 0;

  return v24;
}

void sub_18292213C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24,id a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  id *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;

  _Block_object_dispose(&a19, 8);
  LaunchServices::BindingEvaluation::ExtendedBinding::~ExtendedBinding(&a25);
  _Block_object_dispose(&a44, 8);
  LaunchServices::BindingEvaluation::State::~State(v44);
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a39);
  _Unwind_Resume(a1);
}

uint64_t LaunchServices::BindingEvaluation::getKindStringFromState(LaunchServices::BindingEvaluation *this, LaunchServices::BindingEvaluation::State *a2, BOOL *a3, LaunchServices::BindingEvaluation::ExtendedBinding *a4)
{
  __CFString *v7;
  const LaunchServices::BindingEvaluation::State *TypeResolvable;
  const __CFString *v9;
  const LaunchServices::BindingEvaluation::State *TypeVolume;
  const __CFString *v11;
  const LaunchServices::BindingEvaluation::State *TypeApplication;
  const __CFString *v13;
  void *v14;
  __CFString *v15;
  int v16;
  const LaunchServices::BindingEvaluation::State *TypePackage;
  const __CFString *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t LocalizedString;
  const LaunchServices::BindingEvaluation::State *TypeDirectory;
  const __CFString *v24;
  const LaunchServices::BindingEvaluation::State *TypeUnixExecutable;
  const __CFString *v26;
  int v27;
  char v28;
  __CFString *v29;
  NSString *v30;
  BOOL v31;
  int v32;
  NSObject *v33;
  LaunchServices::CanonicalString *v34;
  NSObject *v35;
  __int128 v36;
  NSObject *v37;
  int v39;
  uint64_t v40;
  _LSDatabase *v41;
  void *v42;
  void *v43;
  uint64_t v44[4];
  __int128 v45;
  __int128 v46;
  id obj[2];
  id v48[2];
  id v49[2];
  id v50[2];
  id **v51;

  *(_OWORD *)v49 = 0u;
  *(_OWORD *)v50 = 0u;
  *(_OWORD *)obj = 0u;
  *(_OWORD *)v48 = 0u;
  v45 = 0u;
  v46 = 0u;
  if (*((_BYTE *)this + 96))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler", a3, a4);
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "const LocalizedString *LaunchServices::getKindStringFromState(State &, BOOL *, ExtendedBinding *)");
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v42, "handleFailureInFunction:file:lineNumber:description:", v43, CFSTR("LSBindingEvaluator.mm"), 1937, CFSTR("Attempted to get a kind string when performing bundle lookup."));

  }
  if (!*((_DWORD *)this + 56) && !*((_BYTE *)this + 240))
  {
    v7 = 0;
LABEL_35:

LABEL_36:
    v31 = 0;
    goto LABEL_37;
  }
  TypeResolvable = (const LaunchServices::BindingEvaluation::State *)_UTTypeGetTypeResolvable(**(_LSDatabase ***)this);
  if ((LaunchServices::BindingEvaluation::conformsTo((void ***)this, TypeResolvable, CFSTR("com.apple.resolvable"), v9) & 1) != 0)
  {
    v7 = CFSTR("Alias");
    goto LABEL_35;
  }
  TypeVolume = (const LaunchServices::BindingEvaluation::State *)_UTTypeGetTypeVolume(**(_LSDatabase ***)this);
  if ((LaunchServices::BindingEvaluation::conformsTo((void ***)this, TypeVolume, CFSTR("public.volume"), v11) & 1) != 0)
  {
    v7 = CFSTR("Volume");
    goto LABEL_35;
  }
  TypeApplication = (const LaunchServices::BindingEvaluation::State *)_UTTypeGetTypeApplication(**(_LSDatabase ***)this);
  if (LaunchServices::BindingEvaluation::conformsTo((void ***)this, TypeApplication, CFSTR("com.apple.application"), v13))
  {
    v14 = (void *)*((_QWORD *)this + 1);
    v15 = CFSTR("Application");
    if (v14)
    {
      LODWORD(v51) = 0;
      v44[0] = 0;
      v16 = _LSBundleFindWithNode(*(_QWORD *)this, v14, &v51, v44);
      if (v44[0])
      {
        if ((*(_QWORD *)(v44[0] + 172) & 0x200000) != 0)
          v15 = CFSTR("Beta Application");
      }
      else
      {
        v32 = v16;
        _LSDefaultLog();
        v33 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
          LaunchServices::BindingEvaluation::getKindStringFromState((uint64_t)v14, v32, v33);

        v15 = CFSTR("Application");
      }
    }
    v7 = v15;
    goto LABEL_35;
  }
  TypePackage = (const LaunchServices::BindingEvaluation::State *)_UTTypeGetTypePackage(**(_LSDatabase ***)this);
  if ((LaunchServices::BindingEvaluation::conformsTo((void ***)this, TypePackage, CFSTR("com.apple.package"), v18) & 1) != 0)
  {
    v7 = CFSTR("Package");
    goto LABEL_18;
  }
  TypeDirectory = (const LaunchServices::BindingEvaluation::State *)_UTTypeGetTypeDirectory(**(_LSDatabase ***)this);
  if ((LaunchServices::BindingEvaluation::conformsTo((void ***)this, TypeDirectory, CFSTR("public.directory"), v24) & 1) != 0)
  {
    v7 = CFSTR("Folder");
    goto LABEL_35;
  }
  TypeUnixExecutable = (const LaunchServices::BindingEvaluation::State *)_UTTypeGetTypeUnixExecutable(**(_LSDatabase ***)this);
  v27 = LaunchServices::BindingEvaluation::conformsTo((void ***)this, TypeUnixExecutable, CFSTR("public.unix-executable"), v26);
  v28 = v27;
  v7 = CFSTR("Document");
  if (v27)
    v29 = CFSTR("Unix Executable File");
  else
    v29 = CFSTR("Document");

  if ((v28 & 1) == 0)
  {
LABEL_18:
    LaunchServices::BindingEvaluation::runEvaluator((uint64_t *)this, 0, v44);
    v19 = v44[0];
    if (v44[0] == v44[1])
    {
      v21 = 0;
    }
    else
    {
      v20 = *(_OWORD *)(v44[0] + 16);
      v45 = *(_OWORD *)v44[0];
      v46 = v20;
      obj[0] = *(id *)(v44[0] + 32);
      obj[1] = *(id *)(v19 + 40);
      LOWORD(v48[0]) = *(_WORD *)(v19 + 48);
      v48[1] = *(id *)(v19 + 56);
      v49[0] = *(id *)(v19 + 64);
      LOBYTE(v49[1]) = *(_BYTE *)(v19 + 72);
      v50[0] = *(id *)(v19 + 80);
      LODWORD(v50[1]) = *(_DWORD *)(v19 + 88);
      v21 = *((_QWORD *)&v46 + 1);
      if ((_DWORD)v46)
      {
        if (*((_QWORD *)&v46 + 1))
        {
          if (!_LSClaimFlagsAreWildcard(*(_DWORD *)(*((_QWORD *)&v46 + 1) + 8)))
          {
            LocalizedString = LaunchServices::LocalizedString::Get(**(LaunchServices::LocalizedString ***)this, (_LSDatabase *)*(unsigned int *)(v21 + 20));
            if (LocalizedString)
            {
              v51 = (id **)v44;
              std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__destroy_vector::operator()[abi:nn180100](&v51);
              goto LABEL_62;
            }
          }
        }
      }
    }
    v39 = *((_DWORD *)this + 56);
    if (v39
      && (v40 = *((_QWORD *)this + 29)) != 0
      && (*(_BYTE *)(v40 + 9) & 2) == 0
      && v39 != _UTTypeGetTypeApplication(**(_LSDatabase ***)this))
    {
      v41 = (_LSDatabase *)_UTGetLocalizedDescription(**(void ***)this, *((_DWORD *)this + 56));
      LocalizedString = LaunchServices::LocalizedString::Get(**(LaunchServices::LocalizedString ***)this, v41);
      v51 = (id **)v44;
      std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__destroy_vector::operator()[abi:nn180100](&v51);
      if (LocalizedString)
      {
LABEL_62:
        v31 = 0;
        if (a2)
          goto LABEL_43;
        goto LABEL_44;
      }
    }
    else
    {
      v51 = (id **)v44;
      std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__destroy_vector::operator()[abi:nn180100](&v51);
    }
    if (*((_QWORD *)&v45 + 1))
    {
      if (v21)
        v31 = !_LSClaimFlagsAreWildcard(*(_DWORD *)(v21 + 8));
      else
        v31 = 1;
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  v31 = 0;
  v7 = CFSTR("Unix Executable File");
LABEL_37:
  v34 = (LaunchServices::CanonicalString *)LaunchServices::CanonicalString::Find(**(LaunchServices::CanonicalString ***)this, (_LSDatabase *)v7, v30);
  if (v34)
  {
    LocalizedString = LaunchServices::CanonicalString::getLocalizedString(v34);
    if (!a2)
      goto LABEL_44;
LABEL_43:
    *(_BYTE *)a2 = v31;
    goto LABEL_44;
  }
  _LSDefaultLog();
  v35 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    LaunchServices::BindingEvaluation::getKindStringFromState((uint64_t)v7, v35);

  LocalizedString = 0;
  if (a2)
    goto LABEL_43;
LABEL_44:
  if (a3)
  {
    v36 = v46;
    *(_OWORD *)a3 = v45;
    *((_OWORD *)a3 + 1) = v36;
    objc_storeStrong((id *)a3 + 4, obj[0]);
    objc_storeStrong((id *)a3 + 5, obj[1]);
    *((_WORD *)a3 + 24) = v48[0];
    objc_storeStrong((id *)a3 + 7, v48[1]);
    objc_storeStrong((id *)a3 + 8, v49[0]);
    a3[72] = (BOOL)v49[1];
    objc_storeStrong((id *)a3 + 10, v50[0]);
    *((_DWORD *)a3 + 22) = v50[1];
  }
  if (!LocalizedString)
  {
    _LSDefaultLog();
    v37 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
      LaunchServices::BindingEvaluation::getKindStringFromState(v37);

  }
  return LocalizedString;
}

void sub_18292275C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  void *v6;
  va_list va;

  va_start(va, a5);

  LaunchServices::BindingEvaluation::ExtendedBinding::~ExtendedBinding((id *)va);
  _Unwind_Resume(a1);
}

id LaunchServices::BindingEvaluation::getBoundDisplayNameConstructorsForKindString(_QWORD **a1, unsigned int *a2, uint64_t a3, int a4)
{
  id *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  id obj;

  v8 = (id *)(a2 + 16);
  if (!*((_QWORD *)a2 + 8))
  {
    obj = 0;
    _LSBundleCopyNode(**a1, *a2, 0, 0, &obj);
    objc_storeStrong(v8, obj);

  }
  v13 = *(_DWORD *)(*((_QWORD *)a2 + 1) + 168);
  v9 = *a1;
  v10 = *a2;
  v11 = *((_QWORD *)a2 + 8);
  if (a4)
    +[_LSDisplayNameConstructor displayNameConstructorsWithContext:bundle:bundleClass:node:error:](_LSDisplayNameConstructor, "displayNameConstructorsWithContext:bundle:bundleClass:node:error:", v9, v10, &v13, v11, 0);
  else
    +[_LSDisplayNameConstructor displayNameConstructorWithContext:bundle:bundleClass:node:preferredLocalizations:error:](_LSDisplayNameConstructor, "displayNameConstructorWithContext:bundle:bundleClass:node:preferredLocalizations:error:", v9, v10, &v13, v11, a3, 0);
  return (id)objc_claimAutoreleasedReturnValue();
}

void sub_182922880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void ___ZNK14LaunchServices16BindingEvaluator32getLocalizedKindStringDictionaryEP9LSContextPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, uint64_t a2, LaunchServices::BindingEvaluation::State *a3)
{
  void *v6;
  _LSDisplayNameConstructor *v7;
  NSString *v8;
  const __CFArray *v9;
  CFArrayRef v10;
  void *v11;
  uint64_t v12;
  LaunchServices::BindingEvaluation::State *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  _QWORD v18[2];

  v18[1] = *MEMORY[0x1E0C80C00];
  v6 = *(void **)(a1 + 32);
  if (v6)
  {
    objc_msgSend(v6, "objectForKeyedSubscript:", a2);
    v8 = (NSString *)objc_claimAutoreleasedReturnValue();
    if (v8)
      goto LABEL_9;
    if ((unint64_t)objc_msgSend(*(id *)(a1 + 32), "count") >= 2)
    {
      v9 = *(const __CFArray **)(a1 + 40);
      v18[0] = a2;
      v10 = CFBundleCopyLocalizationsForPreferences(v9, (CFArrayRef)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v18, 1));
      -[__CFArray firstObject](v10, "firstObject");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      if (v11)
      {
        objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v11);
        v12 = objc_claimAutoreleasedReturnValue();

        v8 = (NSString *)v12;
        if (v12)
          goto LABEL_9;
      }
      else
      {

      }
    }
  }
  v8 = (NSString *)*(id *)(a1 + 48);
LABEL_9:
  LaunchServices::BindingEvaluation::formatAndSanitizeKindString((LaunchServices::BindingEvaluation *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 48), a3, v8, v7);
  v13 = (LaunchServices::BindingEvaluation::State *)objc_claimAutoreleasedReturnValue();
  if (v13 != a3)
  {
    v14 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40);
    if (!v14)
    {
      v15 = objc_msgSend(*(id *)(a1 + 56), "mutableCopy");
      v16 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
      v17 = *(void **)(v16 + 40);
      *(_QWORD *)(v16 + 40) = v15;

      v14 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40);
    }
    objc_msgSend(v14, "setObject:forKeyedSubscript:", v13, a2);
  }

}

void sub_182922A28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id LaunchServices::BindingEvaluation::formatAndSanitizeKindString(LaunchServices::BindingEvaluation *this, LaunchServices::BindingEvaluation::State *a2, NSString *a3, _LSDisplayNameConstructor *a4)
{
  void *v5;
  uint64_t v6;
  LaunchServices::BindingEvaluation::State *v7;
  void *v8;
  void *v9;

  if (a3)
  {
    -[NSString unlocalizedNameWithContext:](a3, "unlocalizedNameWithContext:", *(_QWORD *)this, a4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", a2, v5);
    v6 = objc_claimAutoreleasedReturnValue();

    v7 = (LaunchServices::BindingEvaluation::State *)v6;
  }
  else
  {
    v7 = a2;
  }
  _LSBalanceBiDiControlCharacters(v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  _LSReplaceForbiddenCharacters(v8, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  return v9;
}

void sub_182922B08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void LaunchServices::BindingEvaluation::ExtendedBinding::~ExtendedBinding(id *this)
{

}

uint64_t std::optional<LSBinding>::operator=[abi:nn180100]<LaunchServices::BindingEvaluation::ExtendedBinding const&,void>(uint64_t a1, uint64_t a2)
{
  int v4;
  __int128 v5;

  v4 = *(unsigned __int8 *)(a1 + 48);
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v5;
  if (v4)
  {
    objc_storeStrong((id *)(a1 + 32), *(id *)(a2 + 32));
    objc_storeStrong((id *)(a1 + 40), *(id *)(a2 + 40));
  }
  else
  {
    *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = *(id *)(a2 + 40);
    *(_BYTE *)(a1 + 48) = 1;
  }
  return a1;
}

uint64_t LaunchServices::BindingEvaluator::compareBindings(LaunchServices::BindingEvaluator *this, LSContext *a2, const LSBinding *a3, const LSBinding *a4)
{
  const LaunchServices::BindingEvaluation::ExtendedBinding *v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[8];
  id v22;
  id v23[13];

  v23[12] = *(id *)MEMORY[0x1E0C80C00];
  LaunchServices::BindingEvaluation::State::State((LaunchServices::BindingEvaluation::State *)v21, a2, this);
  v15 = 0u;
  v16 = 0u;
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  LODWORD(v16) = a3->claim;
  *((_QWORD *)&v16 + 1) = a3->claimData;
  LODWORD(v15) = a3->bundle;
  *((_QWORD *)&v15 + 1) = a3->bundleData;
  v9 = 0u;
  v10 = 0u;
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  LODWORD(v10) = a4->claim;
  *((_QWORD *)&v10 + 1) = a4->claimData;
  LODWORD(v9) = a4->bundle;
  *((_QWORD *)&v9 + 1) = a4->bundleData;
  v7 = LaunchServices::BindingEvaluation::compareBindings((LaunchServices::BindingEvaluation *)v21, (LaunchServices::BindingEvaluation::State *)&v15, (const LaunchServices::BindingEvaluation::ExtendedBinding *)&v9, v6);

  *(_QWORD *)&v15 = v23;
  std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__destroy_vector::operator()[abi:nn180100]((id ***)&v15);
  LaunchServices::BindingEvaluator::~BindingEvaluator(&v22);
  return v7;
}

void sub_182922D34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,id a34)
{
  LaunchServices::BindingEvaluation::ExtendedBinding::~ExtendedBinding((id *)&a9);
  LaunchServices::BindingEvaluation::ExtendedBinding::~ExtendedBinding(&a21);
  LaunchServices::BindingEvaluation::State::~State(&a34);
  _Unwind_Resume(a1);
}

uint64_t LaunchServices::BindingEvaluator::compareBundles(LaunchServices::BindingEvaluator *this, LSContext *a2, unsigned int a3, LSBundleData *a4, unsigned int a5, LSBundleData *a6)
{
  LSBinding v7;
  LSBinding v8;

  v8.claim = 0;
  memset(&v8.claimData, 0, 24);
  v8.bundle = a3;
  v8.bundleData = a4;
  v7.claim = 0;
  memset(&v7.claimData, 0, 24);
  v7.bundle = a5;
  v7.bundleData = a6;
  return LaunchServices::BindingEvaluator::compareBindings(this, a2, &v8, &v7);
}

BOOL LaunchServices::BindingEvaluator::IsBundleWithFlagsEligibleToBindAsBrowser(LaunchServices::BindingEvaluator *this, LSBundleMoreFlags a2)
{
  LaunchServices::EligibilityCache *v3;

  if ((this & 1) == 0)
    return 0;
  if ((this & 0x20000) == 0)
    return 1;
  v3 = (LaunchServices::EligibilityCache *)LaunchServices::EligibilityCache::shared(this);
  return LaunchServices::EligibilityCache::getEligibilityGatedBrowsersCanBind(v3);
}

uint64_t _LSBindingSetReasonTrackingEnabled(uint64_t result)
{
  LaunchServices::BindingEvaluation::gIsReasonTrackingEnabled = result;
  return result;
}

uint64_t _LSBindingSetLogFile(uint64_t result)
{
  LaunchServices::BindingEvaluation::logFile = result;
  return result;
}

uint64_t _LSGetBindingForNodeOrSchemeOrUTI(int a1, void *a2, LaunchServices::BindingEvaluator *this, LaunchServices::BindingEvaluator *a4, int a5, int a6, int *a7, int a8, uint64_t a9)
{
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  int v18;
  _DWORD *v19;
  id v20;
  void *v21;
  __int128 v22;
  _QWORD v24[4];
  int v25;
  void *__p[2];
  __int128 v27;
  id obj;
  id v29;
  char v30;
  id v31[13];
  int v32;
  int v33;
  void *v34;
  void *v35;
  char v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  LOBYTE(v31[0]) = 0;
  v36 = 0;
  if (a2)
  {
    LaunchServices::BindingEvaluator::CreateWithNode(a2, (LaunchServices::BindingEvaluator *)__p);
    std::optional<LaunchServices::BindingEvaluator>::operator=[abi:nn180100]<LaunchServices::BindingEvaluator,void>((LaunchServices::BindingEvaluator *)v31, (const LaunchServices::BindingEvaluator *)__p);
LABEL_7:
    LaunchServices::BindingEvaluator::~BindingEvaluator(__p);
    v13 = 4294956486;
    goto LABEL_8;
  }
  if (this)
  {
    LaunchServices::BindingEvaluator::CreateWithURLScheme(this, __p);
    std::optional<LaunchServices::BindingEvaluator>::operator=[abi:nn180100]<LaunchServices::BindingEvaluator,void>((LaunchServices::BindingEvaluator *)v31, (const LaunchServices::BindingEvaluator *)__p);
    goto LABEL_7;
  }
  if (a4)
  {
    LaunchServices::BindingEvaluator::CreateWithUTI(a4, 0, (LaunchServices::BindingEvaluator *)__p);
    std::optional<LaunchServices::BindingEvaluator>::operator=[abi:nn180100]<LaunchServices::BindingEvaluator,void>((LaunchServices::BindingEvaluator *)v31, (const LaunchServices::BindingEvaluator *)__p);
    goto LABEL_7;
  }
  v13 = 4294967246;
LABEL_8:
  if (!v36)
    return v13;
  v32 = a6;
  if (a5)
  {
    v24[0] = MEMORY[0x1E0C809B0];
    v24[1] = 3221225472;
    v24[2] = ___LSGetBindingForNodeOrSchemeOrUTI_block_invoke;
    v24[3] = &__block_descriptor_36_e60_B24__0__LSContext___8r__LSBinding_I__LSBundleData_I_______16l;
    v25 = a5;
    v14 = objc_msgSend(v24, "copy");
    v15 = v34;
    v34 = (void *)v14;

    v16 = objc_msgSend(CFSTR("bundle unit"), "copy");
    v17 = v35;
    v35 = (void *)v16;

  }
  v33 = a8;
  if (a7)
  {
    v18 = *a7;
    v19 = operator new(4uLL);
    __p[0] = v19;
    *v19 = v18;
    __p[1] = v19 + 1;
    *(_QWORD *)&v27 = v19 + 1;
    LaunchServices::BindingEvaluator::setAllowedBundleClasses((uint64_t)v31, (uint64_t)__p);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  LaunchServices::BindingEvaluator::getBestBinding((uint64_t *)__p, (LaunchServices::BindingEvaluator *)v31);
  v20 = 0;
  v21 = v20;
  if (v30)
  {
    if (!a9)
    {
      v13 = 0;
      goto LABEL_21;
    }
    v22 = v27;
    *(_OWORD *)a9 = *(_OWORD *)__p;
    *(_OWORD *)(a9 + 16) = v22;
    objc_storeStrong((id *)(a9 + 32), obj);
    objc_storeStrong((id *)(a9 + 40), v29);
    v13 = 0;
  }
  else
  {
    v13 = _LSGetOSStatusFromNSError(v20);
  }
  if (v30)
  {
LABEL_21:

  }
  if (v36)
    LaunchServices::BindingEvaluator::~BindingEvaluator(v31);
  return v13;
}

void sub_182923034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,id a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  LaunchServices::BindingEvaluator::~BindingEvaluator(&__p);
  if (a57)
    LaunchServices::BindingEvaluator::~BindingEvaluator(&a36);
  _Unwind_Resume(a1);
}

LaunchServices::BindingEvaluator *std::optional<LaunchServices::BindingEvaluator>::operator=[abi:nn180100]<LaunchServices::BindingEvaluator,void>(LaunchServices::BindingEvaluator *this, const LaunchServices::BindingEvaluator *a2)
{
  if (*((_BYTE *)this + 168))
  {
    LaunchServices::BindingEvaluator::operator=((uint64_t)this, (uint64_t)a2);
  }
  else
  {
    LaunchServices::BindingEvaluator::BindingEvaluator(this, a2);
    *((_BYTE *)this + 168) = 1;
  }
  return this;
}

__CFString *LaunchServices::BindingEvaluation::State::getExtension(LaunchServices::BindingEvaluation::State *this)
{
  __CFString *v2;
  void *v3;
  const __CFString *v4;
  NSObject *v5;
  NSString *v6;
  void *v7;
  void *v8;
  __CFString *v9;
  NSObject *v10;
  NSString *v11;
  const __CFString **v12;
  void *v13;
  uint8_t buf[4];
  const __CFString *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = (__CFString *)*((_QWORD *)this + 31);
  if (!v2)
  {
    v3 = (void *)*((_QWORD *)this + 1);
    if (v3)
    {
      objc_msgSend(v3, "extensionWithError:", 0);
      v4 = (const __CFString *)objc_claimAutoreleasedReturnValue();
      if (v4)
      {
        _LSBindingLog();
        v5 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138477827;
          v16 = v4;
          _os_log_impl(&dword_182882000, v5, OS_LOG_TYPE_DEBUG, "Got extension \".%{private}@\" from file URL.", buf, 0xCu);
        }

        LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)CFSTR("Got extension \".%@\" from file URL."), v6, v4);
      }
    }
    else
    {
      v7 = (void *)*((_QWORD *)this + 4);
      if (v7)
      {
        objc_msgSend(v7, "pathExtension");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "lowercaseString");
        v9 = (__CFString *)objc_claimAutoreleasedReturnValue();

        if (v9)
        {
          _LSBindingLog();
          v10 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 138477827;
            v16 = v9;
            _os_log_impl(&dword_182882000, v10, OS_LOG_TYPE_DEBUG, "Got extension \".%{private}@\" from caller-supplied filename. This is less accurate than passing a file URL.", buf, 0xCu);
          }

          LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)CFSTR("Got extension \".%@\" from caller-supplied filename. This is less accurate than passing a file URL."), v11, v9);
          v4 = v9;
        }
        else
        {
          v4 = &stru_1E10473A0;
        }

      }
      else
      {
        v4 = &stru_1E10473A0;
      }
    }
    v13 = (void *)*((_QWORD *)this + 31);
    v12 = (const __CFString **)((char *)this + 248);
    *v12 = v4;

    v2 = (__CFString *)*v12;
  }
  return v2;
}

void sub_1829232B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t LaunchServices::BindingEvaluation::conformsTo(void ***this, const LaunchServices::BindingEvaluation::State *a2, CFStringRef inConformsToUTI, const __CFString *a4)
{
  unsigned int v5;
  int v7;
  void *v8;
  uint64_t result;
  int v10;
  unsigned int v11;

  v5 = a2;
  v11 = a2;
  v7 = *((_DWORD *)this + 56);
  if (v7)
  {
    v8 = **this;
    if (!v5)
    {
      result = _UTGetActiveTypeForCFStringIdentifier(v8, inConformsToUTI, &v11);
      if (!result)
        return result;
      v8 = **this;
      v7 = *((_DWORD *)this + 56);
      v5 = v11;
    }
    v10 = _UTTypeConformsTo(v8, v7, v5);
  }
  else
  {
    if (!*((_BYTE *)this + 240))
      return 0;
    v10 = UTTypeConformsTo((CFStringRef)this[27], inConformsToUTI);
  }
  return v10 != 0;
}

uint64_t LaunchServices::BindingEvaluation::getBindingMemoryResource(LaunchServices::BindingEvaluation *this)
{
  if (LaunchServices::BindingEvaluation::getLocalAllocatorInfo(void)::onceToken != -1)
    dispatch_once(&LaunchServices::BindingEvaluation::getLocalAllocatorInfo(void)::onceToken, &__block_literal_global_243);
  return std::pmr::get_default_resource(this);
}

void sub_182923494(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t LaunchServices::BindingEvaluator::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;

  objc_storeStrong((id *)a1, *(id *)a2);
  objc_storeStrong((id *)(a1 + 8), *(id *)(a2 + 8));
  objc_storeStrong((id *)(a1 + 16), *(id *)(a2 + 16));
  objc_storeStrong((id *)(a1 + 24), *(id *)(a2 + 24));
  objc_storeStrong((id *)(a1 + 32), *(id *)(a2 + 32));
  objc_storeStrong((id *)(a1 + 40), *(id *)(a2 + 40));
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  objc_storeStrong((id *)(a1 + 80), *(id *)(a2 + 80));
  v5 = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v5;
  if (a1 != a2)
    std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>((char *)(a1 + 112), *(char **)(a2 + 112), *(_QWORD *)(a2 + 120), (uint64_t)(*(_QWORD *)(a2 + 120) - *(_QWORD *)(a2 + 112)) >> 2);
  v6 = MEMORY[0x186DAE9BC](*(_QWORD *)(a2 + 136));
  v7 = *(void **)(a1 + 136);
  *(_QWORD *)(a1 + 136) = v6;

  objc_storeStrong((id *)(a1 + 144), *(id *)(a2 + 144));
  v8 = MEMORY[0x186DAE9BC](*(_QWORD *)(a2 + 152));
  v9 = *(void **)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v8;

  objc_storeStrong((id *)(a1 + 160), *(id *)(a2 + 160));
  return a1;
}

uint64_t *LaunchServices::BindingEvaluation::addAndEvaluate(uint64_t *result, void (*a2)(LaunchServices::BindingEvaluation *), uint64_t a3)
{
  id *v4;
  id *v5;
  uint64_t v6;
  uint64_t *v7;
  LaunchServices::BindingEvaluation::State *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 *v12;
  LaunchServices::BindingEvaluation::State *i;
  void *v14;
  const LaunchServices::BindingEvaluation::ExtendedBinding *v15;
  int v16;
  const LaunchServices::BindingEvaluation::ExtendedBinding *v17;
  char isBindingOK;
  LaunchServices::BindingEvaluation *v19;
  const LaunchServices::BindingEvaluation::ExtendedBinding *v20;
  char v21;
  int64_t v22;
  uint64_t v23;
  LaunchServices::BindingEvaluation::State *v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const LaunchServices::BindingEvaluation::ExtendedBinding *v31;
  int v32;
  const LaunchServices::BindingEvaluation::ExtendedBinding *v33;
  int v34;
  const LaunchServices::BindingEvaluation::ExtendedBinding *v35;
  char v36;
  __int128 v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  void *v47;
  __int128 v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  uint64_t v64;
  void *v65;
  unint64_t v66;
  LaunchServices::BindingEvaluation::State *v67;
  const LaunchServices::BindingEvaluation::ExtendedBinding *v68;
  int v69;
  const LaunchServices::BindingEvaluation::ExtendedBinding *v70;
  int v71;
  __int128 v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  LaunchServices::BindingEvaluation *v78;
  const LaunchServices::BindingEvaluation::ExtendedBinding *v79;
  char v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  void *v84;
  LaunchServices::BindingEvaluation *v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  void *v97;
  void *v98;
  const LaunchServices::BindingEvaluation::ExtendedBinding *v99;
  int v100;
  const LaunchServices::BindingEvaluation::ExtendedBinding *v101;
  char v102;
  const LaunchServices::BindingEvaluation::ExtendedBinding *v103;
  char v104;
  __int128 v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  void *v113;
  id v114;
  void *v115;
  unint64_t v117;
  NSObject *v118;
  uint64_t v119;
  NSString *v120;
  uint64_t v121;
  size_t v122;
  unsigned int *v123;
  unsigned int *v124;
  unsigned int *j;
  unsigned int *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  const LaunchServices::BindingEvaluation::ExtendedBinding *v130;
  LaunchServices::BindingEvaluation *v131;
  LaunchServices::BindingEvaluation::State *v132;
  LaunchServices::BindingEvaluation::State *v133;
  const LaunchServices::BindingEvaluation::ExtendedBinding *v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  NSString *v139;
  unint64_t v140;
  uint64_t *v142;
  int v143;
  char v144;
  __int16 v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  LaunchServices::BindingEvaluation::State *v151;
  LaunchServices::BindingEvaluation::State *v152;
  LaunchServices::BindingEvaluation *v153;
  LaunchServices::BindingEvaluation *v154;
  __int128 v155;
  __int128 v156;
  char v157;
  char v158;
  uint8_t buf[16];
  __int128 v160;
  __int128 v161;
  __int16 v162;
  __int128 v163;
  char v164;
  id v165;
  int v166;
  uint64_t v167;

  v167 = *MEMORY[0x1E0C80C00];
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 5) < result[13])
  {
    v153 = (LaunchServices::BindingEvaluation *)result;
    v4 = (id *)result[22];
    v142 = result + 22;
    v5 = (id *)result[23];
    if (v5 != v4)
    {
      v6 = (uint64_t)(result + 25);
      do
      {
        v5 -= 12;
        std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>::destroy[abi:nn180100]<LaunchServices::BindingEvaluation::ExtendedBinding>(v6, v5);
      }
      while (v5 != v4);
    }
    *((_QWORD *)v153 + 23) = v4;
    a2(v153);
    v7 = v142;
    LaunchServices::BindingEvaluation::ensureBundlePointersInBindings(v142);
    if (!*((_BYTE *)v153 + 208))
    {
      v8 = (LaunchServices::BindingEvaluation::State *)*((_QWORD *)v153 + 23);
      v152 = (LaunchServices::BindingEvaluation::State *)*((_QWORD *)v153 + 22);
      v140 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v152) >> 5);
      if (*((_QWORD *)v153 + 13) >= v140)
        v9 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v152) >> 5);
      else
        v9 = *((_QWORD *)v153 + 13);
      v154 = v153;
      if (v9)
      {
        if (v9 >= 2)
        {
          v10 = (unint64_t)(v9 - 2) >> 1;
          v11 = v10 + 1;
          v12 = (__int128 *)((char *)v152 + 96 * v10);
          do
          {
            std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,LaunchServices::BindingEvaluation::sort(LaunchServices::BindingEvaluation::State &)::$_0 &,std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding *>>((uint64_t)v152, &v154, v9, v12);
            v12 -= 6;
            --v11;
          }
          while (v11);
        }
        v151 = (LaunchServices::BindingEvaluation::State *)((char *)v152 + 96 * v9);
        if (v151 != v8)
        {
          for (i = (LaunchServices::BindingEvaluation::State *)((char *)v152 + 96 * v9);
                i != v8;
                i = (LaunchServices::BindingEvaluation::State *)((char *)i + 96))
          {
            v14 = (void *)MEMORY[0x186DAE7A0]();
            v16 = LaunchServices::BindingEvaluation::compareBindings(v153, i, v152, v15);
            if (v16 == -1)
            {
              v19 = v153;
              if (!LaunchServices::BindingEvaluation::isBindingOK(v153, i, v17))
                goto LABEL_23;
            }
            else
            {
              if (v16 == 1)
              {
                isBindingOK = LaunchServices::BindingEvaluation::isBindingOK(v153, i, v17);
                objc_autoreleasePoolPop(v14);
                if ((isBindingOK & 1) == 0)
                  continue;
LABEL_21:
                std::swap[abi:nn180100]<LaunchServices::BindingEvaluation::ExtendedBinding>((__int128 *)i, (__int128 *)v152);
                std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,LaunchServices::BindingEvaluation::sort(LaunchServices::BindingEvaluation::State &)::$_0 &,std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding *>>((uint64_t)v152, &v154, v9, (__int128 *)v152);
                continue;
              }
              v19 = v153;
              if ((LaunchServices::BindingEvaluation::isBindingOK(v153, i, v17) & 1) == 0)
              {
LABEL_23:
                objc_autoreleasePoolPop(v14);
                continue;
              }
            }
            v21 = LaunchServices::BindingEvaluation::isBindingOK(v19, v152, v20);
            objc_autoreleasePoolPop(v14);
            if ((v21 & 1) == 0)
              goto LABEL_21;
          }
        }
        if (v9 >= 2)
        {
          v22 = 96 * v9 / 0x60uLL;
          do
          {
            v23 = 0;
            v24 = v151;
            v25 = (uint64_t)v152;
            v155 = *(_OWORD *)v152;
            v156 = *((_OWORD *)v152 + 1);
            v146 = *((_QWORD *)v152 + 4);
            v147 = *((_QWORD *)v152 + 5);
            *((_OWORD *)v152 + 2) = 0u;
            v26 = *((_WORD *)v152 + 24);
            v148 = *((_QWORD *)v152 + 7);
            v149 = *((_QWORD *)v152 + 8);
            *(_OWORD *)((char *)v152 + 56) = 0u;
            v144 = *((_BYTE *)v152 + 72);
            v145 = v26;
            v150 = *((_QWORD *)v152 + 10);
            *((_QWORD *)v152 + 10) = 0;
            v143 = *((_DWORD *)v152 + 22);
            do
            {
              v27 = v25 + 96 * v23 + 96;
              v28 = 2 * v23;
              v23 = (2 * v23) | 1;
              v29 = v28 + 2;
              if (v28 + 2 >= v22)
                goto LABEL_39;
              v30 = (void *)MEMORY[0x186DAE7A0]();
              v32 = LaunchServices::BindingEvaluation::compareBindings(v154, (LaunchServices::BindingEvaluation::State *)v27, (const LaunchServices::BindingEvaluation::ExtendedBinding *)(v27 + 96), v31);
              if (v32 == -1)
              {
                if (LaunchServices::BindingEvaluation::isBindingOK(v154, (LaunchServices::BindingEvaluation::State *)v27, v33))goto LABEL_36;
LABEL_38:
                objc_autoreleasePoolPop(v30);
                goto LABEL_39;
              }
              if (v32 != 1)
              {
                if (LaunchServices::BindingEvaluation::isBindingOK(v154, (LaunchServices::BindingEvaluation::State *)v27, v33))
                {
LABEL_36:
                  v36 = LaunchServices::BindingEvaluation::isBindingOK(v154, (LaunchServices::BindingEvaluation::State *)(v27 + 96), v35);
                  objc_autoreleasePoolPop(v30);
                  if ((v36 & 1) != 0)
                    goto LABEL_39;
LABEL_37:
                  v27 += 96;
                  v23 = v29;
                  goto LABEL_39;
                }
                goto LABEL_38;
              }
              v34 = LaunchServices::BindingEvaluation::isBindingOK(v154, (LaunchServices::BindingEvaluation::State *)v27, v33);
              objc_autoreleasePoolPop(v30);
              if (v34)
                goto LABEL_37;
LABEL_39:
              v37 = *(_OWORD *)(v27 + 16);
              *(_OWORD *)v25 = *(_OWORD *)v27;
              *(_OWORD *)(v25 + 16) = v37;
              v38 = *(_QWORD *)(v27 + 32);
              *(_QWORD *)(v27 + 32) = 0;
              v39 = *(void **)(v25 + 32);
              *(_QWORD *)(v25 + 32) = v38;

              v40 = *(_QWORD *)(v27 + 40);
              *(_QWORD *)(v27 + 40) = 0;
              v41 = *(void **)(v25 + 40);
              *(_QWORD *)(v25 + 40) = v40;

              *(_WORD *)(v25 + 48) = *(_WORD *)(v27 + 48);
              v42 = *(_QWORD *)(v27 + 56);
              *(_QWORD *)(v27 + 56) = 0;
              v43 = *(void **)(v25 + 56);
              *(_QWORD *)(v25 + 56) = v42;

              v44 = *(_QWORD *)(v27 + 64);
              *(_QWORD *)(v27 + 64) = 0;
              v45 = *(void **)(v25 + 64);
              *(_QWORD *)(v25 + 64) = v44;

              *(_BYTE *)(v25 + 72) = *(_BYTE *)(v27 + 72);
              v46 = *(_QWORD *)(v27 + 80);
              *(_QWORD *)(v27 + 80) = 0;
              v47 = *(void **)(v25 + 80);
              *(_QWORD *)(v25 + 80) = v46;

              *(_DWORD *)(v25 + 88) = *(_DWORD *)(v27 + 88);
              v25 = v27;
            }
            while (v23 <= (uint64_t)((unint64_t)(v22 - 2) >> 1));
            v151 = (LaunchServices::BindingEvaluation::State *)((char *)v151 - 96);
            if ((LaunchServices::BindingEvaluation::State *)v27 == (LaunchServices::BindingEvaluation::State *)((char *)v24 - 96))
            {
              v72 = v156;
              *(_OWORD *)v27 = v155;
              *(_OWORD *)(v27 + 16) = v72;
              v73 = *(void **)(v27 + 32);
              *(_QWORD *)(v27 + 32) = v146;

              v74 = *(void **)(v27 + 40);
              *(_QWORD *)(v27 + 40) = v147;

              *(_WORD *)(v27 + 48) = v145;
              v75 = *(void **)(v27 + 56);
              *(_QWORD *)(v27 + 56) = v148;

              v76 = *(void **)(v27 + 64);
              *(_QWORD *)(v27 + 64) = v149;

              *(_BYTE *)(v27 + 72) = v144;
              v77 = *(void **)(v27 + 80);
              *(_QWORD *)(v27 + 80) = v150;

              *(_DWORD *)(v27 + 88) = v143;
              continue;
            }
            v48 = *((_OWORD *)v24 - 5);
            *(_OWORD *)v27 = *((_OWORD *)v24 - 6);
            *(_OWORD *)(v27 + 16) = v48;
            v49 = *((_QWORD *)v24 - 8);
            *((_QWORD *)v24 - 8) = 0;
            v50 = *(void **)(v27 + 32);
            *(_QWORD *)(v27 + 32) = v49;

            v51 = *((_QWORD *)v24 - 7);
            *((_QWORD *)v24 - 7) = 0;
            v52 = *(void **)(v27 + 40);
            *(_QWORD *)(v27 + 40) = v51;

            *(_WORD *)(v27 + 48) = *((_WORD *)v24 - 24);
            v53 = *((_QWORD *)v24 - 5);
            *((_QWORD *)v24 - 5) = 0;
            v54 = *(void **)(v27 + 56);
            *(_QWORD *)(v27 + 56) = v53;

            v55 = *((_QWORD *)v24 - 4);
            *((_QWORD *)v24 - 4) = 0;
            v56 = *(void **)(v27 + 64);
            *(_QWORD *)(v27 + 64) = v55;

            v57 = *((_QWORD *)v24 - 2);
            *(_BYTE *)(v27 + 72) = *((_BYTE *)v24 - 24);
            *((_QWORD *)v24 - 2) = 0;
            v58 = *(void **)(v27 + 80);
            *(_QWORD *)(v27 + 80) = v57;

            *(_DWORD *)(v27 + 88) = *((_DWORD *)v24 - 2);
            *(_OWORD *)v151 = v155;
            *((_OWORD *)v151 + 1) = v156;
            v59 = (void *)*((_QWORD *)v24 - 8);
            *((_QWORD *)v24 - 8) = v146;

            v60 = (void *)*((_QWORD *)v24 - 7);
            *((_QWORD *)v24 - 7) = v147;

            *((_WORD *)v24 - 24) = v145;
            v61 = (void *)*((_QWORD *)v24 - 5);
            *((_QWORD *)v24 - 5) = v148;

            v62 = (void *)*((_QWORD *)v24 - 4);
            *((_QWORD *)v24 - 4) = v149;

            *((_BYTE *)v24 - 24) = v144;
            v63 = (void *)*((_QWORD *)v24 - 2);
            *((_QWORD *)v24 - 2) = v150;

            *((_DWORD *)v24 - 2) = v143;
            v64 = v27 + 96 - (_QWORD)v152;
            if (v64 < 97)
              continue;
            v65 = (void *)MEMORY[0x186DAE7A0]();
            v66 = (v64 / 0x60uLL - 2) >> 1;
            v67 = (LaunchServices::BindingEvaluation::State *)((char *)v152 + 96 * v66);
            v69 = LaunchServices::BindingEvaluation::compareBindings(v154, v67, (const LaunchServices::BindingEvaluation::ExtendedBinding *)v27, v68);
            if (v69 == -1)
            {
              v78 = v154;
              if (LaunchServices::BindingEvaluation::isBindingOK(v154, v67, v70))
              {
LABEL_50:
                v80 = LaunchServices::BindingEvaluation::isBindingOK(v78, (LaunchServices::BindingEvaluation::State *)v27, v79);
                objc_autoreleasePoolPop(v65);
                if ((v80 & 1) != 0)
                  continue;
LABEL_51:
                v81 = *(_OWORD *)(v27 + 16);
                *(_OWORD *)buf = *(_OWORD *)v27;
                v160 = v81;
                v82 = *(_OWORD *)(v27 + 32);
                *(_OWORD *)(v27 + 32) = 0u;
                v161 = v82;
                v162 = *(_WORD *)(v27 + 48);
                v83 = *(_OWORD *)(v27 + 56);
                *(_OWORD *)(v27 + 56) = 0u;
                v163 = v83;
                v164 = *(_BYTE *)(v27 + 72);
                v84 = *(void **)(v27 + 80);
                *(_QWORD *)(v27 + 80) = 0;
                v165 = v84;
                v166 = *(_DWORD *)(v27 + 88);
                v85 = v154;
                while (1)
                {
                  v86 = (uint64_t)v67;
                  v87 = *((_OWORD *)v67 + 1);
                  *(_OWORD *)v27 = *(_OWORD *)v67;
                  *(_OWORD *)(v27 + 16) = v87;
                  v88 = *((_QWORD *)v67 + 4);
                  *((_QWORD *)v67 + 4) = 0;
                  v89 = *(void **)(v27 + 32);
                  *(_QWORD *)(v27 + 32) = v88;

                  v90 = *((_QWORD *)v67 + 5);
                  *((_QWORD *)v67 + 5) = 0;
                  v91 = *(void **)(v27 + 40);
                  *(_QWORD *)(v27 + 40) = v90;

                  *(_WORD *)(v27 + 48) = *((_WORD *)v67 + 24);
                  v92 = *((_QWORD *)v67 + 7);
                  *((_QWORD *)v67 + 7) = 0;
                  v93 = *(void **)(v27 + 56);
                  *(_QWORD *)(v27 + 56) = v92;

                  v94 = *((_QWORD *)v67 + 8);
                  *((_QWORD *)v67 + 8) = 0;
                  v95 = *(void **)(v27 + 64);
                  *(_QWORD *)(v27 + 64) = v94;

                  *(_BYTE *)(v27 + 72) = *((_BYTE *)v67 + 72);
                  v96 = *((_QWORD *)v67 + 10);
                  *((_QWORD *)v67 + 10) = 0;
                  v97 = *(void **)(v27 + 80);
                  *(_QWORD *)(v27 + 80) = v96;

                  *(_DWORD *)(v27 + 88) = *((_DWORD *)v67 + 22);
                  if (!v66)
                  {
LABEL_64:
                    v105 = v160;
                    *(_OWORD *)v86 = *(_OWORD *)buf;
                    *(_OWORD *)(v86 + 16) = v105;
                    v106 = v161;
                    *(_QWORD *)&v161 = 0;
                    v107 = *(void **)(v86 + 32);
                    *(_QWORD *)(v86 + 32) = v106;

                    v108 = *((_QWORD *)&v161 + 1);
                    *((_QWORD *)&v161 + 1) = 0;
                    v109 = *(void **)(v86 + 40);
                    *(_QWORD *)(v86 + 40) = v108;

                    *(_WORD *)(v86 + 48) = v162;
                    v110 = v163;
                    *(_QWORD *)&v163 = 0;
                    v111 = *(void **)(v86 + 56);
                    *(_QWORD *)(v86 + 56) = v110;

                    v112 = *((_QWORD *)&v163 + 1);
                    *((_QWORD *)&v163 + 1) = 0;
                    v113 = *(void **)(v86 + 64);
                    *(_QWORD *)(v86 + 64) = v112;

                    *(_BYTE *)(v86 + 72) = v164;
                    v114 = v165;
                    v165 = 0;
                    v115 = *(void **)(v86 + 80);
                    *(_QWORD *)(v86 + 80) = v114;

                    *(_DWORD *)(v86 + 88) = v166;
                    goto LABEL_65;
                  }
                  v98 = (void *)MEMORY[0x186DAE7A0]();
                  v66 = (v66 - 1) >> 1;
                  v67 = (LaunchServices::BindingEvaluation::State *)((char *)v152 + 96 * v66);
                  v100 = LaunchServices::BindingEvaluation::compareBindings(v85, v67, (const LaunchServices::BindingEvaluation::ExtendedBinding *)buf, v99);
                  if (v100 == -1)
                  {
                    if (!LaunchServices::BindingEvaluation::isBindingOK(v85, v67, v101))
                      goto LABEL_63;
                  }
                  else
                  {
                    if (v100 == 1)
                    {
                      v102 = LaunchServices::BindingEvaluation::isBindingOK(v85, v67, v101);
                      objc_autoreleasePoolPop(v98);
                      v27 = v86;
                      if ((v102 & 1) == 0)
                        goto LABEL_64;
                      continue;
                    }
                    if (!LaunchServices::BindingEvaluation::isBindingOK(v85, v67, v101))
                    {
LABEL_63:
                      objc_autoreleasePoolPop(v98);
                      goto LABEL_64;
                    }
                  }
                  v104 = LaunchServices::BindingEvaluation::isBindingOK(v85, (LaunchServices::BindingEvaluation::State *)buf, v103);
                  objc_autoreleasePoolPop(v98);
                  v27 = v86;
                  if ((v104 & 1) != 0)
                    goto LABEL_64;
                }
              }
LABEL_62:
              objc_autoreleasePoolPop(v65);
              continue;
            }
            if (v69 != 1)
            {
              v78 = v154;
              if (LaunchServices::BindingEvaluation::isBindingOK(v154, v67, v70))
                goto LABEL_50;
              goto LABEL_62;
            }
            v71 = LaunchServices::BindingEvaluation::isBindingOK(v154, v67, v70);
            objc_autoreleasePoolPop(v65);
            if (v71)
              goto LABEL_51;
LABEL_65:
            ;
          }
          while (v22-- > 2);
        }
      }
      v117 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v153 + 23) - *((_QWORD *)v153 + 22)) >> 5);
      v7 = v142;
      if (v117 != v140)
      {
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("binding count unexpectedly changed from %zu to %zu; please file a bug and relate to rdar://126722263"),
          v140,
          v117);
        v139 = (NSString *)objc_claimAutoreleasedReturnValue();
        _LSSetCrashMessage(v139);
        abort();
      }
    }
    LaunchServices::BindingEvaluation::ensureBundlePointersInBindings(v7);
    _LSBindingLog();
    v118 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v118, OS_LOG_TYPE_DEBUG))
    {
      v119 = *((_QWORD *)v153 + 13);
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v119;
      _os_log_impl(&dword_182882000, v118, OS_LOG_TYPE_DEBUG, "Truncating a list of bindings to max %lu known-good ones.", buf, 0xCu);
    }

    LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)CFSTR("Truncating a list of bindings to max %lu known-good ones."), v120, *((_QWORD *)v153 + 13));
    v121 = *(_QWORD *)(a3 + 24);
    v155 = 0uLL;
    *(_QWORD *)&v156 = 0;
    *((_QWORD *)&v156 + 1) = v121;
    std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::reserve((uint64_t *)&v155, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v153 + 23) - *((_QWORD *)v153 + 22)) >> 5));
    v122 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 5);
    v154 = *(LaunchServices::BindingEvaluation **)(a3 + 24);
    std::unordered_set<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::pmr::polymorphic_allocator<unsigned int>>::unordered_set((unint64_t)buf, v122, (uint64_t)&v158, (uint64_t)&v157, (uint64_t *)&v154);
    v124 = *(unsigned int **)a3;
    v123 = *(unsigned int **)(a3 + 8);
    while (v124 != v123)
    {
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::pmr::polymorphic_allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((unint64_t)buf, v124, v124);
      v124 += 24;
    }
    v126 = (unsigned int *)*((_QWORD *)v153 + 22);
    for (j = (unsigned int *)*((_QWORD *)v153 + 23); v126 != j; v126 += 24)
    {
      if (!std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::find<unsigned int>(buf, v126))
      {
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::pmr::polymorphic_allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((unint64_t)buf, v126, v126);
        v127 = *((_QWORD *)&v155 + 1);
        if (*((_QWORD *)&v155 + 1) >= (unint64_t)v156)
        {
          v128 = std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__push_back_slow_path<LaunchServices::BindingEvaluation::ExtendedBinding const&>((uint64_t *)&v155, (uint64_t)v126);
        }
        else
        {
          std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>::construct[abi:nn180100]<LaunchServices::BindingEvaluation::ExtendedBinding,LaunchServices::BindingEvaluation::ExtendedBinding const&>((uint64_t)&v156 + 8, *((uint64_t *)&v155 + 1), (uint64_t)v126);
          v128 = v127 + 96;
        }
        *((_QWORD *)&v155 + 1) = v128;
      }
    }
    std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__move_assign((uint64_t)v142, (uint64_t *)&v155);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::pmr::polymorphic_allocator<unsigned int>>::~__hash_table((uint64_t *)buf);
    *(_QWORD *)buf = &v155;
    std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__destroy_vector::operator()[abi:nn180100]((id ***)buf);
    v129 = *(_QWORD *)(a3 + 24);
    memset(buf, 0, sizeof(buf));
    *(_QWORD *)&v160 = 0;
    *((_QWORD *)&v160 + 1) = v129;
    std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::reserve((uint64_t *)buf, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v153 + 23) - *((_QWORD *)v153 + 22)) >> 5));
    v131 = v153;
    v133 = (LaunchServices::BindingEvaluation::State *)*((_QWORD *)v153 + 22);
    v132 = (LaunchServices::BindingEvaluation::State *)*((_QWORD *)v153 + 23);
    if (v133 != v132)
    {
      do
      {
        if (LaunchServices::BindingEvaluation::isBindingOK(v131, v133, v130))
          LaunchServices::BindingEvaluation::pushBackBinding(v153, (uint64_t *)buf, v133);
        v131 = v153;
        v133 = (LaunchServices::BindingEvaluation::State *)((char *)v133 + 96);
      }
      while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 5) < *((_QWORD *)v153 + 13)
           && v133 != v132);
    }
    std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__move_assign((uint64_t)v142, (uint64_t *)buf);
    *(_QWORD *)&v155 = buf;
    std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__destroy_vector::operator()[abi:nn180100]((id ***)&v155);
    LaunchServices::BindingEvaluation::ensureBundlePointersInBindings(v142);
    if (!*((_BYTE *)v153 + 208)
      && (LaunchServices::BindingEvaluation::gIsReasonTrackingEnabled || (*((_BYTE *)v153 + 118) & 2) != 0))
    {
      v136 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v153 + 23) - *((_QWORD *)v153 + 22)) >> 5);
      if (v136 >= 2)
      {
        v137 = v136 - 1;
        v138 = 96;
        do
        {
          LaunchServices::BindingEvaluation::compareBindings(v153, (LaunchServices::BindingEvaluation::State *)(*((_QWORD *)v153 + 22) + v138 - 96), (const LaunchServices::BindingEvaluation::ExtendedBinding *)(*((_QWORD *)v153 + 22) + v138), v135);
          v138 += 96;
          --v137;
        }
        while (v137);
      }
    }
    return (uint64_t *)std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding*>,std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding*>>((uint64_t *)a3, *(_QWORD *)(a3 + 8), *((_QWORD *)v153 + 22), *((_QWORD *)v153 + 23), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v153 + 23) - *((_QWORD *)v153 + 22)) >> 5));
  }
  return result;
}

void sub_182924288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,id **a33)
{
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::pmr::polymorphic_allocator<unsigned int>>::~__hash_table((uint64_t *)&a33);
  a33 = (id **)&a27;
  std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__destroy_vector::operator()[abi:nn180100](&a33);
  _Unwind_Resume(a1);
}

void LaunchServices::BindingEvaluation::pushBackBinding(LaunchServices::BindingEvaluation *a1, uint64_t *a2, LaunchServices::BindingEvaluation::State *a3)
{
  NSObject *v6;
  _LSBindingForLog *v7;
  uint64_t v8;
  _LSBindingForLog *v9;
  NSString *v10;
  unint64_t v11;
  uint64_t v12;
  NSObject *v13;
  _LSBindingForLog *v14;
  uint8_t buf[4];
  _LSBindingForLog *v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)a3 + 1))
  {
    if (LaunchServices::BindingEvaluation::isBindingOK_NoIO(a1, a3, a3))
    {
      _LSBindingLog();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        v7 = -[_LSBindingForLog initWithState:binding:]([_LSBindingForLog alloc], "initWithState:binding:", a1, a3);
        v8 = *((_QWORD *)a3 + 5);
        *(_DWORD *)buf = 138543618;
        v16 = v7;
        v17 = 2114;
        v18 = v8;
        _os_log_impl(&dword_182882000, v6, OS_LOG_TYPE_DEBUG, "+++ %{public}@ %{public}@", buf, 0x16u);

      }
      v9 = -[_LSBindingForLog initWithState:binding:]([_LSBindingForLog alloc], "initWithState:binding:", a1, a3);
      LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)CFSTR("+++ %@ %@"), v10, v9, *((_QWORD *)a3 + 5));

      v11 = a2[1];
      if (v11 >= a2[2])
      {
        v12 = std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__push_back_slow_path<LaunchServices::BindingEvaluation::ExtendedBinding const&>(a2, (uint64_t)a3);
      }
      else
      {
        std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>::construct[abi:nn180100]<LaunchServices::BindingEvaluation::ExtendedBinding,LaunchServices::BindingEvaluation::ExtendedBinding const&>((uint64_t)(a2 + 3), a2[1], (uint64_t)a3);
        v12 = v11 + 96;
        a2[1] = v11 + 96;
      }
      a2[1] = v12;
    }
  }
  else
  {
    _LSBindingLog();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
    {
      v14 = (_LSBindingForLog *)*(unsigned int *)a3;
      *(_DWORD *)buf = 134217984;
      v16 = v14;
      _os_log_impl(&dword_182882000, v13, OS_LOG_TYPE_FAULT, "pushing back binding for unit %llu that had no bundle data pointer!?", buf, 0xCu);
    }

  }
}

void sub_182924528(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::erase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id *v5;
  id *v6;
  id *v7;
  char v9;

  if (a2 != a3)
  {
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::move_iterator<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding *>>,std::move_iterator<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding *>>,LaunchServices::BindingEvaluation::ExtendedBinding *>((uint64_t)&v9, a3, *(_QWORD *)(a1 + 8), a2);
    v6 = v5;
    v7 = *(id **)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        v7 -= 12;
        std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>::destroy[abi:nn180100]<LaunchServices::BindingEvaluation::ExtendedBinding>(a1 + 24, v7);
      }
      while (v7 != v6);
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  return a2;
}

uint64_t *LaunchServices::BindingEvaluation::ensureBundlePointersInBindings(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSString *v4;

  v1 = *result;
  v2 = result[1];
  if (*result != v2)
  {
    v3 = 0;
    do
    {
      if (!*(_QWORD *)(v1 + v3 + 8))
      {
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("bundle data for bundle %llx was nil; binding %zu of %zu; please file a bug and relate to rdar://126722263"),
          *(unsigned int *)(v1 + v3),
          0xAAAAAAAAAAAAAAABLL * (v3 >> 5),
          0xAAAAAAAAAAAAAAABLL * ((v2 - v1) >> 5));
        v4 = (NSString *)objc_claimAutoreleasedReturnValue();
        _LSSetCrashMessage(v4);
        abort();
      }
      v3 += 96;
    }
    while (v1 + v3 != v2);
  }
  return result;
}

void sub_182924680(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>::destroy[abi:nn180100]<LaunchServices::BindingEvaluation::ExtendedBinding>(uint64_t a1, id *a2)
{

}

void _LSSetCrashMessage(NSString *a1)
{
  NSString *v1;
  NSObject *v2;
  NSString *v3;
  _QWORD block[4];
  NSString *v5;

  v1 = a1;
  if (_LSLoggingQueue(void)::onceToken != -1)
    dispatch_once(&_LSLoggingQueue(void)::onceToken, &__block_literal_global_13);
  v2 = _LSLoggingQueue(void)::logQueue;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZL18_LSSetCrashMessageP8NSString_block_invoke;
  block[3] = &unk_1E10418C8;
  v5 = v1;
  v3 = v1;
  dispatch_sync(v2, block);

}

void ___ZL18_LSSetCrashMessageP8NSString_block_invoke(uint64_t a1)
{
  id v1;
  void *v2;
  char *v3;
  NSObject *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  void *v8;

  v1 = *(id *)(a1 + 32);
  v2 = v1;
  if (v1)
  {
    v3 = strdup((const char *)objc_msgSend(objc_retainAutorelease(v1), "UTF8String"));
    _LSDefaultLog();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      ___ZL18_LSSetCrashMessageP8NSString_block_invoke_cold_1((uint64_t)v3, v4);

  }
  else
  {
    v3 = 0;
  }
  v5 = _LSSetCrashReporterMessage(NSString *)::messagePtr;
  while (1)
  {
    v6 = __ldxr((unint64_t *)&_LSSetCrashReporterMessage(NSString *)::messagePtr);
    if (v6 != v5)
      break;
    if (!__stxr((unint64_t)v3, (unint64_t *)&_LSSetCrashReporterMessage(NSString *)::messagePtr))
    {
      v7 = 1;
      goto LABEL_11;
    }
  }
  v7 = 0;
  __clrex();
LABEL_11:
  if (v7)
    v8 = (void *)v5;
  else
    v8 = v3;
  free(v8);
  qword_1ECD29C28 = _LSSetCrashReporterMessage(NSString *)::messagePtr;

}

void sub_182924844(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZL15_LSLoggingQueuev_block_invoke()
{
  dispatch_queue_t v0;
  void *v1;
  NSObject *v2;

  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v2 = objc_claimAutoreleasedReturnValue();
  v0 = dispatch_queue_create("com.apple.launchservices.logging", v2);
  v1 = (void *)_LSLoggingQueue(void)::logQueue;
  _LSLoggingQueue(void)::logQueue = (uint64_t)v0;

}

void std::swap[abi:nn180100]<LaunchServices::BindingEvaluation::ExtendedBinding>(__int128 *a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  __int128 v28;
  __int128 v29;

  v28 = *a1;
  v29 = a1[1];
  v5 = *((_QWORD *)a1 + 4);
  v4 = *((_QWORD *)a1 + 5);
  a1[2] = 0u;
  v6 = *((_WORD *)a1 + 24);
  v8 = *((_QWORD *)a1 + 7);
  v7 = *((_QWORD *)a1 + 8);
  *(__int128 *)((char *)a1 + 56) = 0u;
  v9 = *((_BYTE *)a1 + 72);
  v10 = *((_QWORD *)a1 + 10);
  *((_QWORD *)a1 + 10) = 0;
  v11 = *((_DWORD *)a1 + 22);
  v12 = a2[1];
  *a1 = *a2;
  a1[1] = v12;
  v13 = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = 0;
  v14 = (void *)*((_QWORD *)a1 + 4);
  *((_QWORD *)a1 + 4) = v13;

  v15 = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = 0;
  v16 = (void *)*((_QWORD *)a1 + 5);
  *((_QWORD *)a1 + 5) = v15;

  *((_WORD *)a1 + 24) = *((_WORD *)a2 + 24);
  v17 = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = 0;
  v18 = (void *)*((_QWORD *)a1 + 7);
  *((_QWORD *)a1 + 7) = v17;

  v19 = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = 0;
  v20 = (void *)*((_QWORD *)a1 + 8);
  *((_QWORD *)a1 + 8) = v19;

  *((_BYTE *)a1 + 72) = *((_BYTE *)a2 + 72);
  v21 = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = 0;
  v22 = (void *)*((_QWORD *)a1 + 10);
  *((_QWORD *)a1 + 10) = v21;

  *((_DWORD *)a1 + 22) = *((_DWORD *)a2 + 22);
  *a2 = v28;
  a2[1] = v29;
  v23 = (void *)*((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v5;

  v24 = (void *)*((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v4;

  *((_WORD *)a2 + 24) = v6;
  v25 = (void *)*((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v8;

  v26 = (void *)*((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v7;

  *((_BYTE *)a2 + 72) = v9;
  v27 = (void *)*((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v10;

  *((_DWORD *)a2 + 22) = v11;
}

uint64_t LaunchServices::BindingEvaluation::sort(LaunchServices::BindingEvaluation::State &)::$_0::operator()(LaunchServices::BindingEvaluation **a1, LaunchServices::BindingEvaluation::State *a2, const LaunchServices::BindingEvaluation::ExtendedBinding *a3)
{
  void *v6;
  const LaunchServices::BindingEvaluation::ExtendedBinding *v7;
  int v8;
  const LaunchServices::BindingEvaluation::ExtendedBinding *v9;
  uint64_t isBindingOK;
  const LaunchServices::BindingEvaluation::ExtendedBinding *v11;

  v6 = (void *)MEMORY[0x186DAE7A0]();
  v8 = LaunchServices::BindingEvaluation::compareBindings(*a1, a2, a3, v7);
  if (v8 == -1 || v8 != 1)
  {
    if (LaunchServices::BindingEvaluation::isBindingOK(*a1, a2, v9))
      isBindingOK = LaunchServices::BindingEvaluation::isBindingOK(*a1, a3, v11) ^ 1;
    else
      isBindingOK = 0;
  }
  else
  {
    isBindingOK = LaunchServices::BindingEvaluation::isBindingOK(*a1, a2, v9);
  }
  objc_autoreleasePoolPop(v6);
  return isBindingOK;
}

void std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,LaunchServices::BindingEvaluation::sort(LaunchServices::BindingEvaluation::State &)::$_0 &,std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding *>>(uint64_t a1, LaunchServices::BindingEvaluation **a2, uint64_t a3, __int128 *a4)
{
  unint64_t v4;
  __int128 *v5;
  uint64_t v7;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  void *v16;
  __int128 *v17;
  __int128 v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  void *v38;
  id v39;
  void *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int16 v44;
  __int128 v45;
  char v46;
  id v47;
  int v48;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - a1) >> 5)))
    {
      v10 = (0x5555555555555556 * (((uint64_t)a4 - a1) >> 5)) | 1;
      v11 = (__int128 *)(a1 + 96 * v10);
      v12 = 0x5555555555555556 * (((uint64_t)a4 - a1) >> 5) + 2;
      if (v12 < a3
        && LaunchServices::BindingEvaluation::sort(LaunchServices::BindingEvaluation::State &)::$_0::operator()(a2, (LaunchServices::BindingEvaluation::State *)(a1 + 96 * v10), (const LaunchServices::BindingEvaluation::ExtendedBinding *)(v11 + 6)))
      {
        v11 += 6;
        v10 = v12;
      }
      if ((LaunchServices::BindingEvaluation::sort(LaunchServices::BindingEvaluation::State &)::$_0::operator()(a2, (LaunchServices::BindingEvaluation::State *)v11, (const LaunchServices::BindingEvaluation::ExtendedBinding *)v5) & 1) == 0)
      {
        v13 = v5[1];
        v41 = *v5;
        v42 = v13;
        v14 = v5[2];
        v5[2] = 0u;
        v43 = v14;
        v44 = *((_WORD *)v5 + 24);
        v15 = *(__int128 *)((char *)v5 + 56);
        *(__int128 *)((char *)v5 + 56) = 0u;
        v46 = *((_BYTE *)v5 + 72);
        v16 = (void *)*((_QWORD *)v5 + 10);
        *((_QWORD *)v5 + 10) = 0;
        v47 = v16;
        v48 = *((_DWORD *)v5 + 22);
        v45 = v15;
        do
        {
          v17 = v5;
          v5 = v11;
          v18 = v11[1];
          *v17 = *v11;
          v17[1] = v18;
          v19 = *((_QWORD *)v11 + 4);
          *((_QWORD *)v11 + 4) = 0;
          v20 = (void *)*((_QWORD *)v17 + 4);
          *((_QWORD *)v17 + 4) = v19;

          v21 = *((_QWORD *)v11 + 5);
          *((_QWORD *)v11 + 5) = 0;
          v22 = (void *)*((_QWORD *)v17 + 5);
          *((_QWORD *)v17 + 5) = v21;

          *((_WORD *)v17 + 24) = *((_WORD *)v11 + 24);
          v23 = *((_QWORD *)v11 + 7);
          *((_QWORD *)v11 + 7) = 0;
          v24 = (void *)*((_QWORD *)v17 + 7);
          *((_QWORD *)v17 + 7) = v23;

          v25 = *((_QWORD *)v11 + 8);
          *((_QWORD *)v11 + 8) = 0;
          v26 = (void *)*((_QWORD *)v17 + 8);
          *((_QWORD *)v17 + 8) = v25;

          *((_BYTE *)v17 + 72) = *((_BYTE *)v11 + 72);
          v27 = *((_QWORD *)v11 + 10);
          *((_QWORD *)v11 + 10) = 0;
          v28 = (void *)*((_QWORD *)v17 + 10);
          *((_QWORD *)v17 + 10) = v27;

          *((_DWORD *)v17 + 22) = *((_DWORD *)v11 + 22);
          if (v7 < v10)
            break;
          v29 = (2 * v10) | 1;
          v11 = (__int128 *)(a1 + 96 * v29);
          v10 = 2 * v10 + 2;
          if (v10 >= a3)
          {
            v10 = v29;
          }
          else if (LaunchServices::BindingEvaluation::sort(LaunchServices::BindingEvaluation::State &)::$_0::operator()(a2, (LaunchServices::BindingEvaluation::State *)(a1 + 96 * v29), (const LaunchServices::BindingEvaluation::ExtendedBinding *)(v11 + 6)))
          {
            v11 += 6;
          }
          else
          {
            v10 = v29;
          }
        }
        while (!LaunchServices::BindingEvaluation::sort(LaunchServices::BindingEvaluation::State &)::$_0::operator()(a2, (LaunchServices::BindingEvaluation::State *)v11, (const LaunchServices::BindingEvaluation::ExtendedBinding *)&v41));
        v30 = v42;
        *v5 = v41;
        v5[1] = v30;
        v31 = v43;
        *(_QWORD *)&v43 = 0;
        v32 = (void *)*((_QWORD *)v5 + 4);
        *((_QWORD *)v5 + 4) = v31;

        v33 = *((_QWORD *)&v43 + 1);
        *((_QWORD *)&v43 + 1) = 0;
        v34 = (void *)*((_QWORD *)v5 + 5);
        *((_QWORD *)v5 + 5) = v33;

        *((_WORD *)v5 + 24) = v44;
        v35 = v45;
        *(_QWORD *)&v45 = 0;
        v36 = (void *)*((_QWORD *)v5 + 7);
        *((_QWORD *)v5 + 7) = v35;

        v37 = *((_QWORD *)&v45 + 1);
        *((_QWORD *)&v45 + 1) = 0;
        v38 = (void *)*((_QWORD *)v5 + 8);
        *((_QWORD *)v5 + 8) = v37;

        *((_BYTE *)v5 + 72) = v46;
        v39 = v47;
        v47 = 0;
        v40 = (void *)*((_QWORD *)v5 + 10);
        *((_QWORD *)v5 + 10) = v39;

        *((_DWORD *)v5 + 22) = v48;
      }
    }
  }
}

void sub_182924D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  LaunchServices::BindingEvaluation::ExtendedBinding::~ExtendedBinding(&a9);
  _Unwind_Resume(a1);
}

BOOL LaunchServices::BindingEvaluation::BindingEligibilityChecker::checkBindingIsEligibile(LaunchServices::BindingEvaluation::BindingEligibilityChecker *this, const LaunchServices::BindingEvaluation::State *a2, const LaunchServices::BindingEvaluation::ExtendedBinding *a3)
{
  uint64_t v5;
  int v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  NSObject *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  NSObject *v22;
  uint64_t v23;
  LaunchServices::EligibilityCache *v24;
  id v25;
  id v26;
  uint8_t buf[4];
  uint64_t v28;
  __int16 v29;
  id v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)a2 + 96) || (*((_BYTE *)a2 + 118) & 1) != 0)
    return 1;
  v5 = *((_QWORD *)a3 + 1);
  v6 = *(_DWORD *)(v5 + 180);
  if ((v6 & 0x2000000) != 0)
  {
    +[LSEligibilityPredicateEvaluator sharedCachingEligibilityPredicateEvaluator](LSEligibilityPredicateEvaluator, "sharedCachingEligibilityPredicateEvaluator");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = *(unsigned int *)a3;
    v9 = *((_QWORD *)a3 + 1);
    v10 = **(_QWORD **)a2;
    v26 = 0;
    objc_msgSend(v7, "evaluateBundle:bundleData:database:error:", v8, v9, v10, &v26);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = v26;
    if (v11)
    {
      if ((objc_msgSend(v11, "BOOLValue") & 1) == 0)
      {

        return 0;
      }
    }
    else
    {
      _LSBindingLog();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        v14 = *(unsigned int *)a3;
        *(_DWORD *)buf = 134218242;
        v28 = v14;
        v29 = 2112;
        v30 = v12;
        _os_log_impl(&dword_182882000, v13, OS_LOG_TYPE_ERROR, "Couldn't check eligibility of %llx: %@", buf, 0x16u);
      }

    }
    v5 = *((_QWORD *)a3 + 1);
    v6 = *(_DWORD *)(v5 + 180);
  }
  if ((v6 & 0x4000000) != 0)
  {
    +[LSFeatureFlagPredicateEvaluator defaultEvaluator](LSFeatureFlagPredicateEvaluator, "defaultEvaluator");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = *(unsigned int *)a3;
    v17 = *((_QWORD *)a3 + 1);
    v18 = **(_QWORD **)a2;
    v25 = 0;
    objc_msgSend(v15, "evaluateBundle:bundleData:database:error:", v16, v17, v18, &v25);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = v25;
    if (v19)
    {
      if ((objc_msgSend(v19, "BOOLValue") & 1) == 0)
      {

        return 0;
      }
    }
    else
    {
      _LSBindingLog();
      v22 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        v23 = *(unsigned int *)a3;
        *(_DWORD *)buf = 134218242;
        v28 = v23;
        v29 = 2112;
        v30 = v20;
        _os_log_impl(&dword_182882000, v22, OS_LOG_TYPE_ERROR, "Couldn't check eligibility of %llx: %@", buf, 0x16u);
      }

    }
    v5 = *((_QWORD *)a3 + 1);
  }
  if (((*(unsigned __int16 *)(v5 + 189) | (*(unsigned __int8 *)(v5 + 191) << 16)) & 0x20000) == 0)
    return 1;
  v24 = (LaunchServices::EligibilityCache *)LaunchServices::EligibilityCache::shared(this);
  return LaunchServices::EligibilityCache::getEligibilityGatedBrowsersCanBind(v24);
}

void sub_182924FB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t *std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::reserve(uint64_t *result, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[5];

  if (0xAAAAAAAAAAAAAAABLL * ((result[2] - *result) >> 5) < a2)
  {
    if (a2 >= 0x2AAAAAAAAAAAAABLL)
      abort();
    v2 = result;
    v3 = result[1] - *result;
    v5[4] = result + 3;
    v5[0] = std::__allocate_at_least[abi:nn180100]<std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>(result + 3, a2);
    v5[1] = v5[0] + v3;
    v5[2] = v5[0] + v3;
    v5[3] = v5[0] + 96 * v4;
    std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__swap_out_circular_buffer(v2, v5);
    return std::__split_buffer<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding> &>::~__split_buffer(v5);
  }
  return result;
}

void sub_182925090(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding> &>::~__split_buffer((uint64_t *)va);
  _Unwind_Resume(a1);
}

unint64_t std::unordered_set<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::pmr::polymorphic_allocator<unsigned int>>::unordered_set(unint64_t a1, size_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *a5;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v6;
  v7 = *a5;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 1065353216;
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::pmr::polymorphic_allocator<unsigned int>>::__rehash<true>(a1, a2);
  return a1;
}

void sub_1829250E8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::pmr::polymorphic_allocator<unsigned int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::pmr::polymorphic_allocator<unsigned int>>::__rehash<true>(unint64_t result, size_t __n)
{
  uint64_t v2;
  unint64_t v3;
  int8x8_t v4;
  uint8x8_t v5;
  uint64_t v6;

  v2 = result;
  if (__n == 1)
  {
    v3 = 2;
  }
  else
  {
    v3 = __n;
    if ((__n & (__n - 1)) != 0)
    {
      result = std::__next_prime(__n);
      v3 = result;
    }
  }
  v4 = *(int8x8_t *)(v2 + 8);
  if (v3 > *(_QWORD *)&v4)
    return std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::pmr::polymorphic_allocator<unsigned int>>::__do_rehash<true>(v2, v3);
  if (v3 < *(_QWORD *)&v4)
  {
    result = vcvtps_u32_f32((float)*(unint64_t *)(v2 + 40) / *(float *)(v2 + 48));
    if (*(_QWORD *)&v4 < 3uLL || (v5 = (uint8x8_t)vcnt_s8(v4), v5.i16[0] = vaddlv_u8(v5), v5.u32[0] > 1uLL))
    {
      result = std::__next_prime(result);
    }
    else
    {
      v6 = 1 << -(char)__clz(result - 1);
      if (result >= 2)
        result = v6;
    }
    if (v3 <= result)
      v3 = result;
    if (v3 < *(_QWORD *)&v4)
      return std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::pmr::polymorphic_allocator<unsigned int>>::__do_rehash<true>(v2, v3);
  }
  return result;
}

uint64_t std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::pmr::polymorphic_allocator<unsigned int>>::__do_rehash<true>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;

  v2 = result;
  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    result = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(result + 16) + 16))(*(_QWORD *)(result + 16), 8 * a2, 8);
    v4 = *(_QWORD *)v2;
    *(_QWORD *)v2 = result;
    if (v4)
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v2 + 16) + 24))(*(_QWORD *)(v2 + 16), v4, 8 * *(_QWORD *)(v2 + 8), 8);
    v5 = 0;
    *(_QWORD *)(v2 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)v2 + 8 * v5++) = 0;
    while (a2 != v5);
    v6 = *(_QWORD **)(v2 + 24);
    if (v6)
    {
      v7 = v6[1];
      v8 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v8.i16[0] = vaddlv_u8(v8);
      if (v8.u32[0] > 1uLL)
      {
        if (v7 >= a2)
          v7 %= a2;
      }
      else
      {
        v7 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)v2 + 8 * v7) = v2 + 24;
      v10 = (_QWORD *)*v6;
      if (*v6)
      {
        do
        {
          v11 = v10[1];
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= a2)
              v11 %= a2;
          }
          else
          {
            v11 &= a2 - 1;
          }
          if (v11 != v7)
          {
            if (!*(_QWORD *)(*(_QWORD *)v2 + 8 * v11))
            {
              *(_QWORD *)(*(_QWORD *)v2 + 8 * v11) = v6;
              goto LABEL_24;
            }
            *v6 = *v10;
            *v10 = **(_QWORD **)(*(_QWORD *)v2 + 8 * v11);
            **(_QWORD **)(*(_QWORD *)v2 + 8 * v11) = v10;
            v10 = v6;
          }
          v11 = v7;
LABEL_24:
          v6 = v10;
          v10 = (_QWORD *)*v10;
          v7 = v11;
        }
        while (v10);
      }
    }
  }
  else
  {
    v9 = *(_QWORD *)result;
    *(_QWORD *)result = 0;
    if (v9)
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(result + 16) + 24))(*(_QWORD *)(result + 16), v9, 8 * *(_QWORD *)(result + 8), 8);
    *(_QWORD *)(v2 + 8) = 0;
  }
  return result;
}

uint64_t *std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::pmr::polymorphic_allocator<unsigned int>>::~__hash_table(uint64_t *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)a1[3];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      (*(void (**)(uint64_t))(*(_QWORD *)a1[4] + 24))(a1[4]);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *a1;
  *a1 = 0;
  if (v4)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[2] + 24))(a1[2], v4, 8 * a1[1], 8);
  return a1;
}

uint64_t std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::pmr::polymorphic_allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>(unint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t *v9;
  uint64_t i;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t *v18;
  unint64_t v19;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
    v9 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = *(_QWORD *)i)
      {
        v11 = *(_QWORD *)(i + 8);
        if (v11 == v6)
        {
          if (*(_DWORD *)(i + 16) == (_DWORD)v6)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), 24, 8);
  *(_QWORD *)i = 0;
  *(_QWORD *)(i + 8) = v6;
  *(_DWORD *)(i + 16) = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 40) + 1);
  v13 = *(float *)(a1 + 48);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::pmr::polymorphic_allocator<unsigned int>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v18 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v3);
  if (v18)
  {
    *(_QWORD *)i = *v18;
LABEL_38:
    *v18 = i;
    goto LABEL_39;
  }
  *(_QWORD *)i = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = i;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 24;
  if (*(_QWORD *)i)
  {
    v19 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v19 >= v7)
        v19 %= v7;
    }
    else
    {
      v19 &= v7 - 1;
    }
    v18 = (uint64_t *)(*(_QWORD *)a1 + 8 * v19);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 40);
  return i;
}

void sub_1829255F0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v1 + 32) + 24))(*(_QWORD *)(v1 + 32), v2, 24, 8);
  _Unwind_Resume(a1);
}

uint64_t std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__push_back_slow_path<LaunchServices::BindingEvaluation::ExtendedBinding const&>(uint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  v3 = v2 + 1;
  if (v2 + 1 > 0x2AAAAAAAAAAAAAALL)
    abort();
  v6 = (uint64_t)(a1 + 3);
  if (0x5555555555555556 * ((a1[2] - *a1) >> 5) > v3)
    v3 = 0x5555555555555556 * ((a1[2] - *a1) >> 5);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 5) >= 0x155555555555555)
    v7 = 0x2AAAAAAAAAAAAAALL;
  else
    v7 = v3;
  v15 = a1 + 3;
  if (v7)
    v8 = std::__allocate_at_least[abi:nn180100]<std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>(a1 + 3, v7);
  else
    v8 = 0;
  v11 = v8;
  v12 = v8 + 96 * v2;
  v14 = v8 + 96 * v7;
  std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>::construct[abi:nn180100]<LaunchServices::BindingEvaluation::ExtendedBinding,LaunchServices::BindingEvaluation::ExtendedBinding const&>(v6, v12, a2);
  v13 = v12 + 96;
  std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__swap_out_circular_buffer(a1, &v11);
  v9 = a1[1];
  std::__split_buffer<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding> &>::~__split_buffer(&v11);
  return v9;
}

void sub_18292570C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding> &>::~__split_buffer((uint64_t *)va);
  _Unwind_Resume(a1);
}

id std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>::construct[abi:nn180100]<LaunchServices::BindingEvaluation::ExtendedBinding,LaunchServices::BindingEvaluation::ExtendedBinding const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  id result;

  v5 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 32) = *(id *)(a3 + 32);
  *(_QWORD *)(a2 + 40) = *(id *)(a3 + 40);
  *(_WORD *)(a2 + 48) = *(_WORD *)(a3 + 48);
  *(_QWORD *)(a2 + 56) = *(id *)(a3 + 56);
  *(_QWORD *)(a2 + 64) = *(id *)(a3 + 64);
  *(_BYTE *)(a2 + 72) = *(_BYTE *)(a3 + 72);
  result = *(id *)(a3 + 80);
  *(_QWORD *)(a2 + 80) = result;
  *(_DWORD *)(a2 + 88) = *(_DWORD *)(a3 + 88);
  return result;
}

uint64_t std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:nn180100]<std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>,std::reverse_iterator<LaunchServices::BindingEvaluation::ExtendedBinding*>,std::reverse_iterator<LaunchServices::BindingEvaluation::ExtendedBinding*>,std::reverse_iterator<LaunchServices::BindingEvaluation::ExtendedBinding*>>((uint64_t)(a1 + 3), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__allocate_at_least[abi:nn180100]<std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>(_QWORD *a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)*a1 + 16))(*a1, 96 * a2, 8);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:nn180100]<std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>,std::reverse_iterator<LaunchServices::BindingEvaluation::ExtendedBinding*>,std::reverse_iterator<LaunchServices::BindingEvaluation::ExtendedBinding*>,std::reverse_iterator<LaunchServices::BindingEvaluation::ExtendedBinding*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  result = a6;
  if (a3 != a5)
  {
    v8 = 0;
    do
    {
      v9 = a7 + v8;
      v10 = a3 + v8;
      v11 = *(_OWORD *)(a3 + v8 - 80);
      *(_OWORD *)(v9 - 96) = *(_OWORD *)(a3 + v8 - 96);
      *(_OWORD *)(v9 - 80) = v11;
      v12 = *(_OWORD *)(a3 + v8 - 64);
      *(_OWORD *)(v10 - 64) = 0uLL;
      *(_OWORD *)(v9 - 64) = v12;
      *(_WORD *)(v9 - 48) = *(_WORD *)(a3 + v8 - 48);
      v13 = *(_OWORD *)(a3 + v8 - 40);
      *(_OWORD *)(v10 - 40) = 0uLL;
      *(_OWORD *)(v9 - 40) = v13;
      *(_BYTE *)(v9 - 24) = *(_BYTE *)(a3 + v8 - 24);
      v14 = *(_QWORD *)(a3 + v8 - 16);
      *(_QWORD *)(v10 - 16) = 0;
      *(_QWORD *)(v9 - 16) = v14;
      *(_DWORD *)(v9 - 8) = *(_DWORD *)(a3 + v8 - 8);
      v8 -= 96;
    }
    while (a3 + v8 != a5);
  }
  return result;
}

_QWORD *std::__split_buffer<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding> &>::~__split_buffer(_QWORD *a1)
{
  std::__split_buffer<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding> &>::clear[abi:nn180100](a1);
  if (*a1)
    (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)a1[4] + 24))(*(_QWORD *)a1[4], *a1, a1[3] - *a1, 8);
  return a1;
}

void std::__split_buffer<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding> &>::clear[abi:nn180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 96;
    std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>::destroy[abi:nn180100]<LaunchServices::BindingEvaluation::ExtendedBinding>(v4, (id *)(i - 96));
  }
}

void std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 24);
  if (v4 == a2[3] || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4) & 1) != 0)
  {
    std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__vdeallocate((id **)a1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = a2[2];
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__assign_with_size[abi:nn180100]<std::move_iterator<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding*>>,std::move_iterator<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding*>>>(a1, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 5));
  }
}

void std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__assign_with_size[abi:nn180100]<std::move_iterator<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding*>>,std::move_iterator<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding*>>>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  id *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id *v13;
  id *v14;
  id *v15;
  char v16;
  char v17;

  v8 = *(id **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 5) < a4)
  {
    std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__vdeallocate((id **)a1);
    if (a4 > 0x2AAAAAAAAAAAAAALL)
      abort();
    v9 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 5);
    if (v9 <= a4)
      v9 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 5) >= 0x155555555555555)
      v10 = 0x2AAAAAAAAAAAAAALL;
    else
      v10 = v9;
    std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__vallocate[abi:nn180100]((uint64_t *)a1, v10);
    v11 = std::__uninitialized_allocator_copy_impl[abi:nn180100]<std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>,std::move_iterator<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding*>>,std::move_iterator<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding*>>,LaunchServices::BindingEvaluation::ExtendedBinding*>(a1 + 24, a2, a3, *(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v8) >> 5) < a4)
  {
    v12 = a2 + 32 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v8) >> 5);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::move_iterator<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding *>>,std::move_iterator<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding *>>,LaunchServices::BindingEvaluation::ExtendedBinding *>((uint64_t)&v16, a2, v12, (uint64_t)v8);
    v11 = std::__uninitialized_allocator_copy_impl[abi:nn180100]<std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>,std::move_iterator<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding*>>,std::move_iterator<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding*>>,LaunchServices::BindingEvaluation::ExtendedBinding*>(a1 + 24, v12, a3, *(_QWORD *)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v11;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::move_iterator<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding *>>,std::move_iterator<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding *>>,LaunchServices::BindingEvaluation::ExtendedBinding *>((uint64_t)&v17, a2, a3, (uint64_t)v8);
  v14 = v13;
  v15 = *(id **)(a1 + 8);
  if (v15 != v13)
  {
    do
    {
      v15 -= 12;
      std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>::destroy[abi:nn180100]<LaunchServices::BindingEvaluation::ExtendedBinding>(a1 + 24, v15);
    }
    while (v15 != v14);
  }
  *(_QWORD *)(a1 + 8) = v14;
}

void sub_182925B60(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_182925B68(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

id **std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__vdeallocate(id **result)
{
  id *v1;
  id **v2;
  id *v3;
  id *v4;

  v1 = *result;
  if (*result)
  {
    v2 = result;
    v3 = result[1];
    v4 = *result;
    if (v3 != v1)
    {
      do
      {
        v3 -= 12;
        std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>::destroy[abi:nn180100]<LaunchServices::BindingEvaluation::ExtendedBinding>((uint64_t)(v2 + 3), v3);
      }
      while (v3 != v1);
      v4 = *v2;
    }
    v2[1] = v1;
    result = (id **)(*((uint64_t (**)(id *, id *, int64_t, uint64_t))*v2[3] + 3))(v2[3], v4, (char *)v2[2] - (char *)v4, 8);
    *v2 = 0;
    v2[1] = 0;
    v2[2] = 0;
  }
  return result;
}

uint64_t std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__vallocate[abi:nn180100](uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  if (a2 >= 0x2AAAAAAAAAAAAABLL)
    abort();
  result = std::__allocate_at_least[abi:nn180100]<std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>(a1 + 3, a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = result + 96 * v4;
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:nn180100]<std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>,std::move_iterator<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding*>>,std::move_iterator<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding*>>,LaunchServices::BindingEvaluation::ExtendedBinding*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  for (result = a4; a2 != a3; a2 += 96)
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)result = *(_OWORD *)a2;
    *(_OWORD *)(result + 16) = v5;
    v6 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a2 + 32) = 0uLL;
    *(_OWORD *)(result + 32) = v6;
    *(_WORD *)(result + 48) = *(_WORD *)(a2 + 48);
    v7 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a2 + 56) = 0uLL;
    *(_OWORD *)(result + 56) = v7;
    *(_BYTE *)(result + 72) = *(_BYTE *)(a2 + 72);
    v8 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a2 + 80) = 0;
    *(_QWORD *)(result + 80) = v8;
    *(_DWORD *)(result + 88) = *(_DWORD *)(a2 + 88);
    result += 96;
  }
  return result;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::move_iterator<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding *>>,std::move_iterator<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding *>>,LaunchServices::BindingEvaluation::ExtendedBinding *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    v7 = *(_OWORD *)(v5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)v5;
    *(_OWORD *)(a4 + 16) = v7;
    v8 = *(_QWORD *)(v5 + 32);
    *(_QWORD *)(v5 + 32) = 0;
    v9 = *(void **)(a4 + 32);
    *(_QWORD *)(a4 + 32) = v8;

    v10 = *(_QWORD *)(v5 + 40);
    *(_QWORD *)(v5 + 40) = 0;
    v11 = *(void **)(a4 + 40);
    *(_QWORD *)(a4 + 40) = v10;

    *(_WORD *)(a4 + 48) = *(_WORD *)(v5 + 48);
    v12 = *(_QWORD *)(v5 + 56);
    *(_QWORD *)(v5 + 56) = 0;
    v13 = *(void **)(a4 + 56);
    *(_QWORD *)(a4 + 56) = v12;

    v14 = *(_QWORD *)(v5 + 64);
    *(_QWORD *)(v5 + 64) = 0;
    v15 = *(void **)(a4 + 64);
    *(_QWORD *)(a4 + 64) = v14;

    *(_BYTE *)(a4 + 72) = *(_BYTE *)(v5 + 72);
    v16 = *(_QWORD *)(v5 + 80);
    *(_QWORD *)(v5 + 80) = 0;
    v17 = *(void **)(a4 + 80);
    *(_QWORD *)(a4 + 80) = v16;

    *(_DWORD *)(a4 + 88) = *(_DWORD *)(v5 + 88);
    a4 += 96;
    v5 += 96;
  }
  while (v5 != v6);
  return v6;
}

uint64_t std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding*>,std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding*>>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v26[2];
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;

  v5 = a2;
  if (a5 >= 1)
  {
    v7 = a3;
    v10 = a1[1];
    v9 = a1[2];
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - v10) >> 5)) >= a5)
    {
      v19 = v10 - a2;
      if (a5 <= (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - a2) >> 5)))
      {
        v20 = a3 + 96 * a5;
      }
      else
      {
        v20 = a3 + 32 * ((uint64_t)(v10 - a2) >> 5);
        std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__construct_at_end<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding*>,std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding*>>(a1, v20, a4);
        if (v19 < 1)
          return v5;
      }
      std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__move_range((uint64_t)a1, v5, v10, v5 + 96 * a5);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<LaunchServices::BindingEvaluation::ExtendedBinding *,LaunchServices::BindingEvaluation::ExtendedBinding *,LaunchServices::BindingEvaluation::ExtendedBinding *>((uint64_t)v26, v7, v20, v5);
    }
    else
    {
      v11 = *a1;
      v12 = a5 - 0x5555555555555555 * ((uint64_t)(v10 - *a1) >> 5);
      if (v12 > 0x2AAAAAAAAAAAAAALL)
        abort();
      v13 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v11) >> 5);
      v14 = a1 + 3;
      v15 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v11) >> 5);
      v16 = 2 * v15;
      if (2 * v15 <= v12)
        v16 = v12;
      if (v15 >= 0x155555555555555)
        v17 = 0x2AAAAAAAAAAAAAALL;
      else
        v17 = v16;
      v29 = a1 + 3;
      if (v17)
        v18 = std::__allocate_at_least[abi:nn180100]<std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>(v14, v17);
      else
        v18 = 0;
      v21 = v18 + 96 * v13;
      v26[0] = v18;
      v26[1] = v21;
      v27 = v21;
      v28 = v18 + 96 * v17;
      v22 = 3 * a5;
      v23 = v21 + 96 * a5;
      v24 = 32 * v22;
      do
      {
        std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>::construct[abi:nn180100]<LaunchServices::BindingEvaluation::ExtendedBinding,LaunchServices::BindingEvaluation::ExtendedBinding const&>((uint64_t)v29, v21, v7);
        v21 += 96;
        v7 += 96;
        v24 -= 96;
      }
      while (v24);
      v27 = v23;
      v5 = std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__swap_out_circular_buffer(a1, v26, v5);
      std::__split_buffer<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding> &>::~__split_buffer(v26);
    }
  }
  return v5;
}

void sub_182925F3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding> &>::~__split_buffer((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__construct_at_end<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding*>,std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding*>>(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v7;

  v3 = result;
  v4 = result[1];
  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      result = std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>::construct[abi:nn180100]<LaunchServices::BindingEvaluation::ExtendedBinding,LaunchServices::BindingEvaluation::ExtendedBinding const&>((uint64_t)(v3 + 3), v4 + v7, a2 + v7);
      v7 += 96;
    }
    while (a2 + v7 != a3);
    v4 += v7;
  }
  v3[1] = v4;
  return result;
}

void sub_182925FCC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  char v15;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = a2 + v6 - a4;
  v8 = v6;
  if (v7 < a3)
  {
    v9 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    do
    {
      v10 = *(_OWORD *)(v9 + 16);
      *(_OWORD *)v8 = *(_OWORD *)v9;
      *(_OWORD *)(v8 + 16) = v10;
      v11 = *(_OWORD *)(v9 + 32);
      *(_OWORD *)(v9 + 32) = 0uLL;
      *(_OWORD *)(v8 + 32) = v11;
      *(_WORD *)(v8 + 48) = *(_WORD *)(v9 + 48);
      v12 = *(_OWORD *)(v9 + 56);
      *(_OWORD *)(v9 + 56) = 0uLL;
      *(_OWORD *)(v8 + 56) = v12;
      *(_BYTE *)(v8 + 72) = *(_BYTE *)(v9 + 72);
      v13 = *(_QWORD *)(v9 + 80);
      *(_QWORD *)(v9 + 80) = 0;
      *(_QWORD *)(v8 + 80) = v13;
      *(_DWORD *)(v8 + 88) = *(_DWORD *)(v9 + 88);
      v8 += 96;
      v9 += 96;
    }
    while (v9 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<LaunchServices::BindingEvaluation::ExtendedBinding *,LaunchServices::BindingEvaluation::ExtendedBinding *,LaunchServices::BindingEvaluation::ExtendedBinding *>((uint64_t)&v15, a2, v7, v6);
}

uint64_t std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = (uint64_t)(a1 + 3);
  std::__uninitialized_allocator_move_if_noexcept[abi:nn180100]<std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>,std::reverse_iterator<LaunchServices::BindingEvaluation::ExtendedBinding*>,std::reverse_iterator<LaunchServices::BindingEvaluation::ExtendedBinding*>,std::reverse_iterator<LaunchServices::BindingEvaluation::ExtendedBinding*>>((uint64_t)(a1 + 3), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_copy_impl[abi:nn180100]<std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>,std::move_iterator<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding*>>,std::move_iterator<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding*>>,LaunchServices::BindingEvaluation::ExtendedBinding*>(v7, a3, a1[1], a2[2]);
  v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<LaunchServices::BindingEvaluation::ExtendedBinding *,LaunchServices::BindingEvaluation::ExtendedBinding *,LaunchServices::BindingEvaluation::ExtendedBinding *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;

  if (a3 != a2)
  {
    v7 = 0;
    do
    {
      v8 = a3 + v7;
      v9 = a4 + v7;
      v10 = *(_OWORD *)(a3 + v7 - 80);
      *(_OWORD *)(v9 - 96) = *(_OWORD *)(a3 + v7 - 96);
      *(_OWORD *)(v9 - 80) = v10;
      v11 = *(_QWORD *)(a3 + v7 - 64);
      *(_QWORD *)(a3 + v7 - 64) = 0;
      v12 = *(void **)(a4 + v7 - 64);
      *(_QWORD *)(v9 - 64) = v11;

      v13 = *(_QWORD *)(a3 + v7 - 56);
      *(_QWORD *)(v8 - 56) = 0;
      v14 = *(void **)(a4 + v7 - 56);
      *(_QWORD *)(v9 - 56) = v13;

      *(_WORD *)(v9 - 48) = *(_WORD *)(a3 + v7 - 48);
      v15 = *(_QWORD *)(a3 + v7 - 40);
      *(_QWORD *)(v8 - 40) = 0;
      v16 = *(void **)(a4 + v7 - 40);
      *(_QWORD *)(v9 - 40) = v15;

      v17 = *(_QWORD *)(a3 + v7 - 32);
      *(_QWORD *)(v8 - 32) = 0;
      v18 = *(void **)(a4 + v7 - 32);
      *(_QWORD *)(v9 - 32) = v17;

      *(_BYTE *)(v9 - 24) = *(_BYTE *)(a3 + v7 - 24);
      v19 = *(_QWORD *)(a3 + v7 - 16);
      *(_QWORD *)(v8 - 16) = 0;
      v20 = *(void **)(a4 + v7 - 16);
      *(_QWORD *)(v9 - 16) = v19;

      *(_DWORD *)(v9 - 8) = *(_DWORD *)(a3 + v7 - 8);
      v7 -= 96;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<LaunchServices::BindingEvaluation::ExtendedBinding *,LaunchServices::BindingEvaluation::ExtendedBinding *,LaunchServices::BindingEvaluation::ExtendedBinding *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    v7 = *(_OWORD *)(v5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)v5;
    *(_OWORD *)(a4 + 16) = v7;
    objc_storeStrong((id *)(a4 + 32), *(id *)(v5 + 32));
    objc_storeStrong((id *)(a4 + 40), *(id *)(v5 + 40));
    *(_WORD *)(a4 + 48) = *(_WORD *)(v5 + 48);
    objc_storeStrong((id *)(a4 + 56), *(id *)(v5 + 56));
    objc_storeStrong((id *)(a4 + 64), *(id *)(v5 + 64));
    *(_BYTE *)(a4 + 72) = *(_BYTE *)(v5 + 72);
    objc_storeStrong((id *)(a4 + 80), *(id *)(v5 + 80));
    *(_WORD *)(a4 + 88) = *(_WORD *)(v5 + 88);
    *(_WORD *)(a4 + 90) = *(_WORD *)(v5 + 90);
    a4 += 96;
    v5 += 96;
  }
  while (v5 != v6);
  return v6;
}

void ___ZN14LaunchServices17BindingEvaluationL21addClaimsInBindingMapERNS0_5StateE14LSBindingMapIDjb_block_invoke(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int v3;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  __CFString *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v3 = a3 & 0xFFFFFFFC;
  if ((a3 & 3) == 2 && v3 != 0)
  {
    v6 = _LSClaimGet();
    if (v6)
    {
      v7 = v6;
      v8 = *(_DWORD *)(v6 + 16);
      if (v8)
      {
        v9 = _LSBundleGet(***(void ****)(a1 + 32), v8);
        if (v9)
        {
          v17 = 0u;
          v18 = 0u;
          v15 = 0u;
          v16 = 0u;
          v13 = 0u;
          *(_QWORD *)&v14 = v3;
          *((_QWORD *)&v14 + 1) = v7;
          LODWORD(v13) = *(_DWORD *)(v7 + 16);
          *((_QWORD *)&v13 + 1) = v9;
          v10 = *(_QWORD *)(a1 + 32);
          if (LaunchServices::BindingEvaluation::gIsReasonTrackingEnabled || (*(_BYTE *)(v10 + 118) & 2) != 0)
          {
            _LSDatabaseGetBindingMapDebugName(**(_QWORD **)v10, *(_DWORD *)(a1 + 40));
            v11 = (void *)objc_claimAutoreleasedReturnValue();
            if (*(_BYTE *)(a1 + 44))
              v12 = CFSTR("Parent of claim in binding map ");
            else
              v12 = CFSTR("Claim in binding map ");

            -[__CFString stringByAppendingString:](v12, "stringByAppendingString:", v11, v13, v14, (_QWORD)v15);
            *((_QWORD *)&v15 + 1) = objc_claimAutoreleasedReturnValue();

            v10 = *(_QWORD *)(a1 + 32);
          }
          LOBYTE(v16) = *(_DWORD *)(a1 + 40) == 0;
          BYTE1(v16) = *(_BYTE *)(a1 + 44);
          LaunchServices::BindingEvaluation::pushBackBinding((LaunchServices::BindingEvaluation *)v10, (uint64_t *)(v10 + 176), (LaunchServices::BindingEvaluation::State *)&v13);

        }
      }
    }
  }
}

void sub_18292642C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  void *v9;

  LaunchServices::BindingEvaluation::ExtendedBinding::~ExtendedBinding(&a9);
  _Unwind_Resume(a1);
}

uint64_t ___ZN14LaunchServices17BindingEvaluationL17addWildcardClaimsERNS0_5StateE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if ((*(_BYTE *)(a3 + 175) & 0x10) != 0)
    return _CSArrayEnumerateAllValues();
  return result;
}

void ___ZN14LaunchServices17BindingEvaluationL17addWildcardClaimsERNS0_5StateE_block_invoke_2(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v5 = _LSClaimGet();
  if (v5 && (*(_BYTE *)(v5 + 8) & 0x10) != 0)
  {
    v7 = 0u;
    v8 = 0u;
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    LODWORD(v7) = *(_DWORD *)(a1 + 48);
    *((_QWORD *)&v7 + 1) = *(_QWORD *)(a1 + 40);
    LODWORD(v8) = a3;
    *((_QWORD *)&v8 + 1) = v5;
    if (LaunchServices::BindingEvaluation::gIsReasonTrackingEnabled
      || (v6 = *(_QWORD *)(a1 + 32), (*(_BYTE *)(v6 + 118) & 2) != 0))
    {
      *((_QWORD *)&v9 + 1) = CFSTR("Wildcard document claim");
      v6 = *(_QWORD *)(a1 + 32);
    }
    LaunchServices::BindingEvaluation::pushBackBinding((LaunchServices::BindingEvaluation *)v6, (uint64_t *)(v6 + 176), (LaunchServices::BindingEvaluation::State *)&v7);

  }
}

void sub_182926620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  LaunchServices::BindingEvaluation::ExtendedBinding::~ExtendedBinding(&a9);
  _Unwind_Resume(a1);
}

void sub_182926768(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t LaunchServices::BindingEvaluation::searchParentUTIsForClaims(uint64_t a1)
{
  LaunchServices::BindingEvaluation::addClaimsForParentUTI(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 24));
  return 0;
}

uint64_t ___ZN14LaunchServices17BindingEvaluationL18addParentUTIClaimsERNS0_5StateE_block_invoke(uint64_t a1, const __CFString *a2)
{
  uint64_t result;
  int v4;

  v4 = 0;
  result = _UTGetActiveTypeForCFStringIdentifier(***(void ****)(a1 + 32), a2, &v4);
  if (result)
  {
    LaunchServices::BindingEvaluation::addClaimsForParentUTI(*(_QWORD *)(a1 + 32), result);
    return _UTTypeSearchConformsToTypes(***(_QWORD ***)(a1 + 32), v4, (uint64_t)LaunchServices::BindingEvaluation::searchParentUTIsForClaims, *(_QWORD *)(a1 + 32), 0);
  }
  return result;
}

void LaunchServices::BindingEvaluation::addClaimsForParentUTI(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  void *v3;
  void *v4;
  NSString *v5;
  uint8_t buf[4];
  void *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(a2 + 9) & 2) == 0 || (*(_BYTE *)(a1 + 116) & 0x20) != 0)
  {
    LaunchServices::BindingEvaluation::addClaimsInBindingMap((uint64_t **)a1, 0, *(_DWORD *)(a2 + 12));
  }
  else
  {
    _LSBindingLog();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      v3 = (void *)_CSStringCopyCFString();
      *(_DWORD *)buf = 138412290;
      v7 = v3;
      _os_log_impl(&dword_182882000, v2, OS_LOG_TYPE_DEBUG, "Skipping parent UTI claim for %@ due to options (wildcard UTIs not requested)", buf, 0xCu);

    }
    v4 = (void *)_CSStringCopyCFString();
    LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)CFSTR("Skipping parent UTI claim for %@ due to options (wildcard UTIs not requested)"), v5, v4);

  }
}

void sub_18292696C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id LaunchServices::BindingEvaluation::getBindingPath(void ***this, LaunchServices::BindingEvaluation::State *a2, const LaunchServices::BindingEvaluation::ExtendedBinding *a3)
{
  id v5;
  uint64_t v6;
  void *v7;

  v5 = *((id *)a2 + 7);
  if (!v5)
  {
    _LSAliasGetPath(**this, **((_DWORD **)a2 + 1));
    v6 = objc_claimAutoreleasedReturnValue();
    v7 = (void *)*((_QWORD *)a2 + 7);
    *((_QWORD *)a2 + 7) = v6;

    v5 = *((id *)a2 + 7);
  }
  return v5;
}

void std::vector<LSBinding>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<LSBinding>::__base_destruct_at_end[abi:nn180100]((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

void std::vector<LSBinding>::__base_destruct_at_end[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;

  for (i = *(_QWORD *)(a1 + 8); i != a2; i -= 48)
  {

  }
  *(_QWORD *)(a1 + 8) = a2;
}

id ***std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__destroy_vector::operator()[abi:nn180100](id ***result)
{
  id **v1;
  id *v2;
  id *v3;
  id *v4;
  id **v5;
  id ***v6;

  v1 = *result;
  v2 = **result;
  if (v2)
  {
    v3 = v1[1];
    v4 = **result;
    v5 = *result;
    if (v3 != v2)
    {
      v6 = result;
      do
      {
        v3 -= 12;
        std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>::destroy[abi:nn180100]<LaunchServices::BindingEvaluation::ExtendedBinding>((uint64_t)(v1 + 3), v3);
      }
      while (v3 != v2);
      v5 = *v6;
      v4 = **v6;
    }
    v1[1] = v2;
    return (id ***)(*((uint64_t (**)(id *, id *, int64_t, uint64_t))*v5[3] + 3))(v5[3], v4, (char *)v5[2] - (char *)v4, 8);
  }
  return result;
}

uint64_t *std::vector<LSBinding>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 == *result)
  {
    v5 = a2[1];
  }
  else
  {
    do
    {
      v5 = v4 - 48;
      v6 = *(_OWORD *)(v3 - 32);
      *(_OWORD *)(v4 - 48) = *(_OWORD *)(v3 - 48);
      *(_OWORD *)(v4 - 32) = v6;
      v7 = *(_OWORD *)(v3 - 16);
      *(_QWORD *)(v3 - 16) = 0;
      *(_QWORD *)(v3 - 8) = 0;
      *(_OWORD *)(v4 - 16) = v7;
      v3 -= 48;
      v4 -= 48;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  v8 = *result;
  *result = v5;
  a2[1] = v8;
  v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<LSBinding>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(48 * a2);
}

uint64_t std::__split_buffer<LSBinding>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<LSBinding>::__destruct_at_end[abi:nn180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<LSBinding>::__destruct_at_end[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;

  for (i = *(_QWORD *)(a1 + 16); i != a2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 48;

  }
}

uint64_t std::vector<LSBinding>::__insert_with_size[abi:nn180100]<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding *>,std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding *>>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;

  v5 = a2;
  if (a5 >= 1)
  {
    v11 = a1[2];
    v9 = (uint64_t)(a1 + 2);
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v12) >> 4)) >= a5)
    {
      v20 = v12 - a2;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - a2) >> 4)) >= a5)
      {
        v21 = a3 + 96 * a5;
      }
      else
      {
        v21 = a3 + 32 * ((uint64_t)(v12 - a2) >> 4);
        a1[1] = std::__uninitialized_allocator_copy_impl[abi:nn180100]<std::allocator<LSBinding>,LaunchServices::BindingEvaluation::ExtendedBinding *,LaunchServices::BindingEvaluation::ExtendedBinding *,LSBinding*>(v9, v21, a4, *(_QWORD *)(v9 - 8));
        if (v20 < 1)
          return v5;
      }
      std::vector<LSBinding>::__move_range((uint64_t)a1, v5, v12, v5 + 48 * a5);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<LaunchServices::BindingEvaluation::ExtendedBinding *,LaunchServices::BindingEvaluation::ExtendedBinding *,LSBinding *>((uint64_t)&v23, a3, v21, v5);
    }
    else
    {
      v13 = *a1;
      v14 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - *a1) >> 4);
      if (v14 > 0x555555555555555)
        abort();
      v15 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v13) >> 4);
      v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v13) >> 4);
      v17 = 2 * v16;
      if (2 * v16 <= v14)
        v17 = v14;
      if (v16 >= 0x2AAAAAAAAAAAAAALL)
        v18 = 0x555555555555555;
      else
        v18 = v17;
      v27 = v9;
      if (v18)
        v19 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<LSBinding>>(v9, v18);
      else
        v19 = 0;
      v23 = v19;
      v24 = &v19[48 * v15];
      v25 = v24;
      v26 = &v19[48 * v18];
      std::__split_buffer<LSBinding>::__construct_at_end_with_size<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding *>>(&v23, a3, a5);
      v5 = std::vector<LSBinding>::__swap_out_circular_buffer(a1, &v23, v5);
      std::__split_buffer<LSBinding>::~__split_buffer((uint64_t)&v23);
    }
  }
  return v5;
}

void sub_182926E10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<LSBinding>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  _OWORD *v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  char v13;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = a2 + v6 - a4;
  v8 = (_OWORD *)v6;
  if (v7 < a3)
  {
    v9 = v7;
    v8 = *(_OWORD **)(a1 + 8);
    do
    {
      v10 = *(_OWORD *)(v9 + 16);
      *v8 = *(_OWORD *)v9;
      v8[1] = v10;
      v11 = *(_OWORD *)(v9 + 32);
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = 0;
      v8[2] = v11;
      v8 += 3;
      v9 += 48;
    }
    while (v9 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<LSBinding *,LSBinding *,LSBinding *>((uint64_t)&v13, a2, v7, v6);
}

_QWORD *std::__split_buffer<LSBinding>::__construct_at_end_with_size<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding *>>(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  __int128 v7;

  v3 = result;
  v4 = result[2];
  if (a3)
  {
    v6 = v4 + 48 * a3;
    do
    {
      v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)v4 = *(_OWORD *)a2;
      *(_OWORD *)(v4 + 16) = v7;
      *(_QWORD *)(v4 + 32) = *(id *)(a2 + 32);
      result = *(id *)(a2 + 40);
      *(_QWORD *)(v4 + 40) = result;
      v4 += 48;
      a2 += 96;
    }
    while (v4 != v6);
    v4 = v6;
  }
  v3[2] = v4;
  return result;
}

uint64_t std::vector<LSBinding>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  result = a2[1];
  v5 = *a1;
  v6 = result;
  if (*a1 != a3)
  {
    v7 = a3;
    v8 = a2[1];
    do
    {
      v6 = v8 - 48;
      v9 = *(_OWORD *)(v7 - 32);
      *(_OWORD *)(v8 - 48) = *(_OWORD *)(v7 - 48);
      *(_OWORD *)(v8 - 32) = v9;
      v10 = *(_OWORD *)(v7 - 16);
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      *(_OWORD *)(v8 - 16) = v10;
      v7 -= 48;
      v8 -= 48;
    }
    while (v7 != v5);
  }
  a2[1] = v6;
  v11 = a1[1];
  v12 = (_OWORD *)a2[2];
  if (v11 != a3)
  {
    do
    {
      v13 = *(_OWORD *)(a3 + 16);
      *v12 = *(_OWORD *)a3;
      v12[1] = v13;
      v14 = *(_OWORD *)(a3 + 32);
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 40) = 0;
      v12[2] = v14;
      v12 += 3;
      a3 += 48;
    }
    while (a3 != v11);
    v6 = a2[1];
  }
  a2[2] = v12;
  v15 = *a1;
  *a1 = v6;
  a2[1] = v15;
  v16 = a1[1];
  a1[1] = a2[2];
  a2[2] = v16;
  v17 = a1[2];
  a1[2] = a2[3];
  a2[3] = v17;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:nn180100]<std::allocator<LSBinding>,LaunchServices::BindingEvaluation::ExtendedBinding *,LaunchServices::BindingEvaluation::ExtendedBinding *,LSBinding*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  __int128 v7;

  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      v7 = *(_OWORD *)(v6 + 16);
      *(_OWORD *)a4 = *(_OWORD *)v6;
      *(_OWORD *)(a4 + 16) = v7;
      *(_QWORD *)(a4 + 32) = *(id *)(v6 + 32);
      *(_QWORD *)(a4 + 40) = *(id *)(v6 + 40);
      a4 += 48;
      v6 += 96;
    }
    while (v6 != a3);
  }
  return a4;
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<LSBinding *,LSBinding *,LSBinding *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;

  if (a3 != a2)
  {
    v7 = a3;
    do
    {
      v8 = *(_OWORD *)(v7 - 32);
      *(_OWORD *)(a4 - 48) = *(_OWORD *)(v7 - 48);
      *(_OWORD *)(a4 - 32) = v8;
      v9 = *(_QWORD *)(v7 - 16);
      *(_QWORD *)(v7 - 16) = 0;
      v10 = *(void **)(a4 - 16);
      *(_QWORD *)(a4 - 16) = v9;

      v11 = *(_QWORD *)(v7 - 8);
      *(_QWORD *)(v7 - 8) = 0;
      v12 = *(void **)(a4 - 8);
      *(_QWORD *)(a4 - 8) = v11;

      a4 -= 48;
      v7 -= 48;
    }
    while (v7 != a2);
  }
  return a3;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<LaunchServices::BindingEvaluation::ExtendedBinding *,LaunchServices::BindingEvaluation::ExtendedBinding *,LSBinding *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    v7 = *(_OWORD *)(v5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)v5;
    *(_OWORD *)(a4 + 16) = v7;
    objc_storeStrong((id *)(a4 + 32), *(id *)(v5 + 32));
    objc_storeStrong((id *)(a4 + 40), *(id *)(v5 + 40));
    a4 += 48;
    v5 += 96;
  }
  while (v5 != v6);
  return v6;
}

double _LSBindingListBufferInit(uint64_t a1, _QWORD *a2)
{
  double result;

  *(_QWORD *)&result = 8184;
  *a2 = 8184;
  return result;
}

uint64_t _LSBindingListBufferAppend(void *a1, unsigned int *a2, unsigned int a3, unsigned int a4)
{
  id v7;
  unsigned int *v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;

  v7 = a1;
  v8 = a2 + 2;
  v9 = a2[1];
  if (!v9)
  {
LABEL_6:
    v11 = 0;
LABEL_20:
    v16 = *a2;
    if (v16 >= 0xC)
    {
      a2[1] = v9 + 1;
      memmove(v8 + 3, v8, (char *)a2 - (char *)v8 - v16 + 0x2000);
      *v8 = a3;
      _CSStringRetain();
      v8[1] = 1;
      v8[2] = a4;
      _CSStringRetain();
      *a2 -= 12;
      v11 = 1;
    }
    goto LABEL_22;
  }
  v10 = 0;
  while (1)
  {
    if (*v8 > a3)
    {
      v11 = 0;
      goto LABEL_18;
    }
    if (*v8 == a3)
      break;
    v8 += v8[1] + 2;
    if (v9 == ++v10)
      goto LABEL_6;
  }
  v12 = v8[1];
  if ((_DWORD)v12)
  {
    v13 = 0;
    while (v8[v13 + 2] != a4)
    {
      if (v12 == ++v13)
      {
        v11 = 0;
        goto LABEL_16;
      }
    }
    v11 = 1;
  }
  else
  {
    LODWORD(v13) = 0;
    v11 = 0;
  }
  if ((_DWORD)v13 == (_DWORD)v12)
  {
LABEL_16:
    v14 = *a2;
    if (v14 < 4)
      goto LABEL_22;
    v8[1] = v12 + 1;
    v15 = &v8[v12 + 2];
    memmove(&v8[(v12 + 1) + 2], v15, (char *)a2 - (char *)v15 - v14 + 0x2000);
    *v15 = a4;
    _CSStringRetain();
    v9 = a2[1];
    *a2 -= 4;
    v11 = 1;
  }
LABEL_18:
  if (v9 == v10 || *v8 != a3)
    goto LABEL_20;
LABEL_22:

  return v11;
}

void sub_182927310(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL _LSBindingListBufferAppendNSString(void *a1, unsigned int *a2, unsigned int a3, void *a4, int a5)
{
  id v9;
  __CFString *v10;
  unsigned int StringForCFString;
  _BOOL8 v12;

  v9 = a1;
  v10 = a4;
  StringForCFString = _LSDatabaseCreateStringForCFString(v9, v10, a5);
  if (StringForCFString)
  {
    v12 = _LSBindingListBufferAppend(v9, a2, a3, StringForCFString) != 0;
    _CSStringRelease();
  }
  else
  {
    v12 = 1;
  }

  return v12;
}

void sub_1829273C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

double _LSBindingListBufferReset(void *a1, uint64_t a2)
{
  double result;

  _LSBindingListDataReleaseContents(a1, (unsigned int *)(a2 + 4));
  *(_QWORD *)&result = 8184;
  *(_QWORD *)a2 = 8184;
  return result;
}

void _LSBindingListDataReleaseContents(void *a1, unsigned int *a2)
{
  unsigned int v3;
  _DWORD *v4;
  unint64_t v5;
  unint64_t v6;
  id v7;

  v7 = a1;
  if (*a2)
  {
    v3 = 0;
    v4 = a2 + 1;
    do
    {
      _CSStringRelease();
      if (v4[1])
      {
        v5 = 0;
        do
        {
          _CSStringRelease();
          ++v5;
          v6 = v4[1];
        }
        while (v5 < v6);
      }
      else
      {
        v6 = 0;
      }
      v4 += v6 + 2;
      ++v3;
    }
    while (v3 < *a2);
  }

}

void sub_1829274CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t _LSBindingListCreate(void *a1, _DWORD *a2, _DWORD *a3)
{
  id v5;
  _DWORD *v6;
  int v7;
  uint64_t v8;

  v5 = a1;
  v6 = a2 + 1;
  if (a2[1])
  {
    v7 = CSStoreAllocUnitWithData();
    *a3 = v7;
    if (v7)
    {
      v8 = 0;
    }
    else
    {
      _LSBindingListDataReleaseContents(v5, a2 + 1);
      v8 = 4294957803;
    }
    *a2 = 8184;
  }
  else
  {
    v8 = 0;
    v6 = a3;
  }
  *v6 = 0;

  return v8;
}

void sub_1829275A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void _LSBindingListDestroy()
{
  id v0;

  v0 = (id)MEMORY[0x1E0C80A78]();
  if (CSStoreGetUnit())
  {
    CSStoreGetUnit();
    CSStoreFreeUnit();
  }
  else
  {
    puts("_LSBindingListDestroy: binding list not found");
  }

}

void sub_1829276B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _LSBindingListValidate(void *a1, uint64_t a2, const char **a3)
{
  id v5;
  _DWORD *Unit;
  int v7;
  const char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v5 = a1;
  if (!(_DWORD)a2)
  {
    v8 = 0;
    if (!a3)
      goto LABEL_23;
    goto LABEL_22;
  }
  Unit = (_DWORD *)CSStoreGetUnit();
  a2 = (uint64_t)bindingListDataHasValidLength(Unit, 0);
  if (!(_DWORD)a2)
  {
    v8 = "Invalid length";
    if (!a3)
      goto LABEL_23;
    goto LABEL_22;
  }
  if (!*Unit)
  {
    v8 = 0;
    a2 = 1;
    if (!a3)
      goto LABEL_23;
    goto LABEL_22;
  }
  v7 = 0;
  v8 = "Bad class string";
  v9 = (unint64_t)(Unit + 1);
  while (1)
  {
    if (v9 < (unint64_t)(Unit + 1) || v9 >= (unint64_t)Unit)
    {
      v8 = 0;
      goto LABEL_21;
    }
    if (!_CSStringIsValid())
      goto LABEL_21;
    if (*(_DWORD *)(v9 + 4))
      break;
    v11 = 0;
LABEL_14:
    v9 += 4 * v11 + 8;
    if (++v7 >= *Unit)
    {
      v8 = 0;
      a2 = 1;
      goto LABEL_21;
    }
  }
  v10 = 0;
  while (_CSStringIsValid())
  {
    ++v10;
    v11 = *(unsigned int *)(v9 + 4);
    if (v10 >= v11)
      goto LABEL_14;
  }
  v8 = "Bad binding string";
LABEL_21:
  if (a3)
LABEL_22:
    *a3 = v8;
LABEL_23:

  return a2;
}

void sub_182927860(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_DWORD *bindingListDataHasValidLength(_DWORD *result, unsigned int a2)
{
  char *v2;
  int v3;
  char *v4;
  int v5;
  char *v6;
  uint64_t v7;

  if (result)
  {
    if (a2 < 4)
    {
      return 0;
    }
    else
    {
      v2 = (char *)(result + 1);
      v3 = *result;
      if (*result)
      {
        v4 = (char *)result + a2;
        v5 = 4;
        v6 = (char *)(result + 1);
        while (1)
        {
          result = 0;
          if (v6 < v2 || v6 >= v4)
            break;
          v7 = *((unsigned int *)v6 + 1);
          v5 += 4 * v7 + 8;
          v6 += 4 * v7 + 8;
          if (!--v3)
            return (_DWORD *)(v5 == a2);
        }
      }
      else
      {
        v5 = 4;
        return (_DWORD *)(v5 == a2);
      }
    }
  }
  return result;
}

uint64_t _LSBindingListActivate()
{
  void *v0;
  int v1;
  int v2;
  id v3;
  _DWORD *Unit;
  int v5;
  uint64_t v6;
  int *v7;
  int BindingMapIndex;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int __dst;
  int v14;

  v0 = (void *)MEMORY[0x1E0C80A78]();
  v2 = v1;
  v3 = v0;
  Unit = (_DWORD *)CSStoreGetUnit();
  if (Unit)
  {
    if (bindingListDataHasValidLength(Unit, 0))
    {
      if (__dst)
      {
        v5 = 0;
        v6 = 0;
        v7 = &v14;
        do
        {
          BindingMapIndex = _LSDatabaseFindBindingMapIndex((uint64_t)v3, *v7);
          v9 = v7[1];
          if (BindingMapIndex << 16 != -65536 && v7[1])
          {
            v10 = 0;
            do
            {
              v11 = _LSBindableActivate(v3, v2);
              ++v10;
              v9 = v7[1];
            }
            while (v10 < v9);
            v6 = v11;
          }
          v7 += v9 + 2;
          ++v5;
        }
        while (v5 != __dst);
      }
      else
      {
        v6 = 0;
      }
    }
    else
    {
      v6 = 4294957799;
    }
  }
  else
  {
    v6 = 4294957797;
  }

  return v6;
}

void sub_182927A68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _LSBindingListDeactivate()
{
  void *v0;
  int v1;
  int v2;
  id v3;
  _DWORD *Unit;
  int v5;
  uint64_t v6;
  int *v7;
  int BindingMapIndex;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int __dst;
  int v14;

  v0 = (void *)MEMORY[0x1E0C80A78]();
  v2 = v1;
  v3 = v0;
  Unit = (_DWORD *)CSStoreGetUnit();
  if (Unit)
  {
    if (bindingListDataHasValidLength(Unit, 0))
    {
      if (__dst)
      {
        v5 = 0;
        v6 = 0;
        v7 = &v14;
        do
        {
          BindingMapIndex = _LSDatabaseFindBindingMapIndex((uint64_t)v3, *v7);
          v9 = v7[1];
          if (BindingMapIndex << 16 != -65536 && v7[1])
          {
            v10 = 0;
            do
            {
              v11 = _LSBindableDeactivate(v3, v2);
              ++v10;
              v9 = v7[1];
            }
            while (v10 < v9);
            v6 = v11;
          }
          v7 += v9 + 2;
          ++v5;
        }
        while (v5 != __dst);
      }
      else
      {
        v6 = 0;
      }
    }
    else
    {
      v6 = 4294957799;
    }
  }
  else
  {
    v6 = 4294957797;
  }

  return v6;
}

void sub_182927BEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void _LSBindingListEnumerate(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  unsigned int *Unit;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unint64_t v10;
  unint64_t v11;
  char v12;

  v4 = a1;
  v5 = a3;
  Unit = (unsigned int *)CSStoreGetUnit();
  v7 = Unit;
  if (Unit)
  {
    v12 = 0;
    if (*Unit)
    {
      v8 = 0;
      v9 = Unit + 1;
      do
      {
        v10 = 0;
        while (1)
        {
          v11 = v9[1];
          if (v10 >= v11)
            break;
          (*((void (**)(id, _QWORD, _QWORD, char *))v5 + 2))(v5, *v9, v9[v10++ + 2], &v12);
          if (v12)
            goto LABEL_9;
        }
        v9 += v11 + 2;
        ++v8;
      }
      while (v8 < *v7);
    }
  }
LABEL_9:

}

void sub_182927CF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void _LSBindingListGetVisualizationFunctions(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = LaunchServices::BindingLists::display;
  a1[2] = 0;
}

uint64_t LaunchServices::BindingLists::display(void **this, LSContext *a2, uint64_t a3, void *a4, LaunchServices::DumpWriter *a5)
{
  NSMutableAttributedString *v6;
  void *v7;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  id (*v12)(uint64_t, uint64_t);
  void (*v13)(uint64_t);
  uint64_t v14;
  id v15[39];
  const char *v16;

  if ((_DWORD)a3)
  {
    v16 = 0;
    if (!_LSBindingListValidate(*this, a3, &v16))
    {
      v15[33] = (id)MEMORY[0x1E0C809B0];
      v15[34] = (id)3221225472;
      v15[35] = ___ZN14LaunchServices12BindingListsL7displayEP9LSContextjjPNS_10DumpWriterE_block_invoke;
      v15[36] = &__block_descriptor_48_e5_v8__0l;
      v15[37] = a4;
      v15[38] = (id)v16;
      CSStore2::AttributedStringWriter::withWarningColors();
    }
    _CSStoreGetStringTable();
    v6 = (NSMutableAttributedString *)objc_alloc_init(MEMORY[0x1E0CB3778]);
    v9 = 0;
    v10 = &v9;
    v11 = 0x13812000000;
    v12 = __Block_byref_object_copy__7;
    v13 = __Block_byref_object_dispose__7;
    v14 = 256;
    LaunchServices::DumpWriter::DumpWriter((LaunchServices::DumpWriter *)v15, v6);
    CSStore2::AttributedStringWriter::getVisualizer((CSStore2::AttributedStringWriter *)a4);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::setVisualizer();

    CSStore2::AttributedStringWriter::setInsertsNewlines((CSStore2::AttributedStringWriter *)(v10 + 6));
    CSStore2::AttributedStringWriter::withReferenceToUnit();
    CSStore2::AttributedStringWriter::attributedString((CSStore2::AttributedStringWriter *)a4, &v6->super);
    _Block_object_dispose(&v9, 8);
    LaunchServices::DumpWriter::~DumpWriter(v15);

  }
  return 1;
}

void sub_182927EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  void *v10;
  id *v11;
  void *v12;
  va_list va;

  va_start(va, a10);

  _Block_object_dispose(va, 8);
  LaunchServices::DumpWriter::~DumpWriter(v11);

  _Unwind_Resume(a1);
}

uint64_t ___ZN14LaunchServices12BindingListsL7displayEP9LSContextjjPNS_10DumpWriterE_block_invoke(uint64_t a1)
{
  return CSStore2::AttributedStringWriter::format(*(CSStore2::AttributedStringWriter **)(a1 + 32), 0, CFSTR("*** Invalid binding list (%s) ***"), *(_QWORD *)(a1 + 40));
}

void ___ZN14LaunchServices12BindingListsL7displayEP9LSContextjjPNS_10DumpWriterE_block_invoke_6(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  void *v3;
  _QWORD v4[8];
  __int128 v5;
  int v6;
  _QWORD v7[3];
  char v8;
  _QWORD v9[3];
  int v10;
  _QWORD v11[3];
  int v12;

  v11[0] = 0;
  v11[1] = v11;
  v11[2] = 0x2020000000;
  v12 = 0;
  v9[0] = 0;
  v9[1] = v9;
  v9[2] = 0x2020000000;
  v10 = -1;
  v7[0] = 0;
  v7[1] = v7;
  v7[2] = 0x2020000000;
  v8 = 1;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = ___ZN14LaunchServices12BindingListsL7displayEP9LSContextjjPNS_10DumpWriterE_block_invoke_2;
  v4[3] = &unk_1E1041A28;
  v1 = *(unsigned int *)(a1 + 56);
  v6 = *(_DWORD *)(a1 + 60);
  v4[4] = *(_QWORD *)(a1 + 32);
  v4[5] = v7;
  v4[6] = v11;
  v4[7] = v9;
  v2 = *(_OWORD *)(a1 + 40);
  v3 = **(void ***)(a1 + 40);
  v5 = v2;
  _LSBindingListEnumerate(v3, v1, v4);
  _Block_object_dispose(v7, 8);
  _Block_object_dispose(v9, 8);
  _Block_object_dispose(v11, 8);
}

void sub_182928028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 80), 8);
  _Block_object_dispose((const void *)(v13 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN14LaunchServices12BindingListsL7displayEP9LSContextjjPNS_10DumpWriterE_block_invoke_2()
{
  return CSStore2::AttributedStringWriter::withReferenceToUnit();
}

void ___ZN14LaunchServices12BindingListsL7displayEP9LSContextjjPNS_10DumpWriterE_block_invoke_3(uint64_t a1)
{
  uint64_t v2;
  NSString *v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t active;
  uint64_t v8;
  CSStore2::AttributedStringWriter *v9;
  NSString *v10;
  unsigned int v11;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (*(_BYTE *)(v2 + 24))
    *(_BYTE *)(v2 + 24) = 0;
  else
    CSStore2::AttributedStringWriter::string((CSStore2::AttributedStringWriter *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48), CFSTR(", "));
  v3 = (NSString *)_CSStringCopyCFString();
  if (v3)
  {
    v4 = *(_DWORD *)(a1 + 84);
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    if (v4 != *(_DWORD *)(v5 + 24))
    {
      *(_DWORD *)(v5 + 24) = v4;
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = _LSDatabaseFindBindingMapIndex(**(_QWORD **)(a1 + 64), *(_DWORD *)(a1 + 84));
    }
    v6 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
    if (v6)
    {
      if (v6 == 1)
      {
        CSStore2::AttributedStringWriter::format((CSStore2::AttributedStringWriter *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48), 0, CFSTR(".%@"), v3);
      }
      else if (v6 == 5)
      {
        CSStore2::AttributedStringWriter::format((CSStore2::AttributedStringWriter *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48), 0, CFSTR("%@:"), v3);
      }
      else
      {
        CSStore2::AttributedStringWriter::string((CSStore2::AttributedStringWriter *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48), v3);
      }
    }
    else
    {
      v11 = 0;
      active = _UTGetActiveTypeForIdentifier(**(void ***)(a1 + 64), *(_DWORD *)(a1 + 80), &v11);
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v9 = (CSStore2::AttributedStringWriter *)(v8 + 48);
      if (active)
      {
        CSStore2::AttributedStringWriter::link(v9, *(unsigned int *)(**(_QWORD **)(a1 + 64) + 32), v11, v3);
        v10 = (NSString *)objc_claimAutoreleasedReturnValue();
        CSStore2::AttributedStringWriter::string(v9, v10);

      }
      else
      {
        CSStore2::AttributedStringWriter::string((CSStore2::AttributedStringWriter *)(v8 + 48), v3);
      }
    }
  }
  else
  {
    CSStore2::AttributedStringWriter::withWarningColors();
  }

}

void sub_1829282C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

uint64_t ___ZN14LaunchServices12BindingListsL7displayEP9LSContextjjPNS_10DumpWriterE_block_invoke_4(uint64_t a1)
{
  return CSStore2::AttributedStringWriter::format((CSStore2::AttributedStringWriter *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48), 0, CFSTR("0x%llx"), *(unsigned int *)(a1 + 40));
}

void sub_1829285B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t (*initBRCopyRepresentedFileNameForFaultFileURL(const __CFURL *a1))(const __CFURL *)
{
  void *v2;
  uint64_t (*result)(const __CFURL *);

  v2 = (void *)CloudDocsLibrary(void)::frameworkLibrary;
  if (!CloudDocsLibrary(void)::frameworkLibrary)
  {
    v2 = dlopen("/System/Library/PrivateFrameworks/CloudDocs.framework/CloudDocs", 2);
    CloudDocsLibrary(void)::frameworkLibrary = (uint64_t)v2;
  }
  result = (uint64_t (*)(const __CFURL *))dlsym(v2, "BRCopyRepresentedFileNameForFaultFileURL");
  softLinkBRCopyRepresentedFileNameForFaultFileURL = result;
  if (result)
    return (uint64_t (*)(const __CFURL *))result(a1);
  return result;
}

uint64_t _LSSliceMaskWriteDescription(CSStore2::AttributedStringWriter *a1)
{
  CSStore2::AttributedStringWriter::beginFlags(a1, CFSTR("slices"));
  CSStore2::AttributedStringWriter::flag();
  CSStore2::AttributedStringWriter::flag();
  CSStore2::AttributedStringWriter::flag();
  CSStore2::AttributedStringWriter::flag();
  CSStore2::AttributedStringWriter::flag();
  CSStore2::AttributedStringWriter::flag();
  CSStore2::AttributedStringWriter::flag();
  CSStore2::AttributedStringWriter::flag();
  CSStore2::AttributedStringWriter::flag();
  CSStore2::AttributedStringWriter::flag();
  CSStore2::AttributedStringWriter::flag();
  CSStore2::AttributedStringWriter::flag();
  CSStore2::AttributedStringWriter::flag();
  CSStore2::AttributedStringWriter::flag();
  CSStore2::AttributedStringWriter::flag();
  CSStore2::AttributedStringWriter::flag();
  return CSStore2::AttributedStringWriter::endFlags(a1);
}

uint64_t _LSBundleDisplayNameContextGetIndex(void *a1)
{
  id v1;
  id v2;
  uint64_t v3;
  _QWORD v5[4];
  id v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  v1 = a1;
  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v11 = -1;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = ___LSBundleDisplayNameContextGetIndex_block_invoke;
  v5[3] = &unk_1E1041AA0;
  v6 = v1;
  v7 = &v8;
  v2 = v1;
  _LSBundleDisplayNameContextEnumerate(v5);
  v3 = v9[3];

  _Block_object_dispose(&v8, 8);
  return v3;
}

void sub_18292890C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _LSBundleBaseFlagsWriteDescription(CSStore2::AttributedStringWriter *a1)
{
  CSStore2::AttributedStringWriter::beginBitfieldFlags(a1, CFSTR("base flags"));
  CSStore2::AttributedStringWriter::flag();
  CSStore2::AttributedStringWriter::flag();
  CSStore2::AttributedStringWriter::flag();
  CSStore2::AttributedStringWriter::flag();
  CSStore2::AttributedStringWriter::flag();
  return CSStore2::AttributedStringWriter::endFlags(a1);
}

__CFString *_LSBundleClassGetName(unsigned int a1)
{
  if (a1 < 0x11)
    return off_1E1041C90[a1];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("0x%llx"), a1);
  return (__CFString *)(id)objc_claimAutoreleasedReturnValue();
}

uint64_t _LSBundleDataSetModTime(uint64_t result, int a2)
{
  *(_DWORD *)(result + 196) = a2;
  return result;
}

uint64_t _LSBundleDataSetRegTime(uint64_t result, int a2)
{
  *(_DWORD *)(result + 24) = a2;
  return result;
}

uint64_t _LSPrepareMimicForBundleLookup(void *a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  char v7;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;

  v3 = a1;
  v4 = _LSPrepareMimicForBundleClass(v3, a2);
  if ((_DWORD)v4)
  {
    v9 = sel_nameWithError_;
    v10 = sel_getVolumeIdentifier_error_;
    v11 = sel_getCreationDate_error_;
    v12 = sel_getFileIdentifier_error_;
    v13 = sel_canonicalPathWithError_;
    v14 = sel_getInodeNumber_error_;
    v5 = v3;
    v6 = 0;
    v7 = 1;
    do
    {
      if (v7)
        v7 = objc_msgSend(v5, "populateSimpleSelector:error:", (&v9)[v6], a2, v9, v10, v11, v12, v13, v14);
      else
        v7 = 0;
      ++v6;
    }
    while (v6 != 6);

  }
  return v4;
}

void sub_182928CCC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _LSBundleDataIsIncomplete(void *a1, uint64_t a2)
{
  _LSDatabase *v3;
  _LSDatabase *v4;
  uint64_t v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  _LSDatabase *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char v14;
  uint8_t buf[4];
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  v11 = 0;
  v12 = &v11;
  v13 = 0x2020000000;
  v14 = 0;
  if (v3 && a2)
  {
    v5 = *(_QWORD *)(a2 + 172);
    if ((v5 & 0x20000000000200) != 0)
    {
      if ((v5 & 0x2000000000) != 0 && (*(_BYTE *)(a2 + 164) & 1) != 0 && *(_BYTE *)(a2 + 148) == 2)
      {
        _LSDefaultLog();
        v6 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          _LSDatabaseGetNSStringFromString(v4);
          v7 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v16 = v7;
          _os_log_impl(&dword_182882000, v6, OS_LOG_TYPE_INFO, "Ignoring first-party applet %{public}@ in /Library during incompleteness check", buf, 0xCu);

        }
      }
      else
      {
        v14 = 1;
      }
    }
    else
    {
      v10 = v3;
      _CSArrayEnumerateAllValues();

    }
  }
  v8 = *((unsigned __int8 *)v12 + 24);
  _Block_object_dispose(&v11, 8);

  return v8;
}

void sub_182928E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  void *v8;
  va_list va;

  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_182928FF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _LSBundleAdd(void *a1, uint64_t a2, _DWORD *a3)
{
  _LSDatabase *v4;
  _LSDatabase *v5;
  int v6;
  uint64_t v7;

  v4 = a1;
  v5 = v4;
  if (v4 && v4->store)
  {
    v6 = CSStoreAllocUnitWithData();
    if (v6)
    {
      -[_LSDatabase setApplicationsChanged:](v5, 1);
      v7 = 0;
      if (a3)
        *a3 = v6;
    }
    else
    {
      v7 = 4294957803;
    }
  }
  else
  {
    v7 = 4294967246;
  }

  return v7;
}

void sub_1829290AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id _LSBundleGetRegistrationNotification(void *a1, int a2, char a3, uint64_t a4)
{
  id v7;
  uint64_t v8;
  const __CFAllocator *v9;
  __CFDictionary *Mutable;
  CFArrayRef v11;
  const void *v12;
  uint64_t v13;
  const void *v14;
  const void *v15;
  void *v16;
  void *values;

  v7 = a1;
  v8 = _LSBundleGet(v7, a2);
  if (!v8)
  {

    Mutable = 0;
LABEL_16:
    v16 = 0;
    goto LABEL_17;
  }
  v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  values = (void *)_CSStringCopyCFString();
  if (values)
  {
    v11 = CFArrayCreate(v9, (const void **)&values, 1, MEMORY[0x1E0C9B378]);
    if (v11)
    {
      CFDictionaryAddValue(Mutable, CFSTR("bundleIDs"), v11);
      CFRelease(v11);
    }
    CFRelease(values);
  }
  v12 = (const void *)_CSStringCopyCFString();
  if (v12)
  {
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0C9AAC8], v12);
    CFRelease(v12);
  }
  v13 = *(_QWORD *)(v8 + 172);
  v14 = (const void *)*MEMORY[0x1E0C9AE50];
  if ((v13 & 0x40000) != 0)
    v15 = (const void *)*MEMORY[0x1E0C9AE50];
  else
    v15 = (const void *)*MEMORY[0x1E0C9AE40];
  CFDictionaryAddValue(Mutable, CFSTR("isPlaceholder"), v15);
  if ((a3 & 1) != 0)
    CFDictionaryAddValue(Mutable, CFSTR("isForcedUpdate"), v14);

  if (!Mutable)
    goto LABEL_16;
  v16 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37C0]), "initWithName:object:userInfo:", a4, 0, Mutable);
LABEL_17:

  return v16;
}

void sub_182929274(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _LSBundleRemove(void *a1, int a2, int a3)
{
  _LSDatabase *v4;
  const void *v5;
  uint64_t v6;
  _LSDatabase *v7;
  CFMutableDictionaryRef Mutable;
  _LSDatabase *v9;
  _LSDatabase *v10;
  _LSDatabase *v13;
  _LSDatabase *v14;
  _LSDatabase *v15;
  _LSDatabase *v16;
  _LSDatabase *v17;
  _QWORD v18[4];
  _LSDatabase *v19;
  _BYTE v20[560];
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, int, uint64_t, uint64_t, _BYTE *);
  void *v24;
  _LSDatabase *v25;
  _BYTE v26[560];
  _LSDatabase *__dst[72];

  __dst[70] = *(_LSDatabase **)MEMORY[0x1E0C80C00];
  v4 = a1;
  v5 = (const void *)_LSBundleGet(v4, a2);
  memcpy(__dst, v5, 0x230uLL);
  -[_LSDatabase setApplicationsChanged:](v4, 1);
  v6 = MEMORY[0x1E0C809B0];
  if ((HIDWORD(__dst[21]) & 0x40000) != 0)
  {
    v17 = v4;
    _LSDatabaseEnumeratingBindingMap();

  }
  else
  {
    v7 = objc_retainAutorelease(v4);
    -[_LSDatabase schema]((uint64_t)v7);
    v21 = v6;
    v22 = 3221225472;
    v23 = ___LSBundleRemove_block_invoke_2;
    v24 = &unk_1E1041B90;
    memcpy(v26, __dst, sizeof(v26));
    v25 = v7;
    _CSStoreEnumerateUnits();

  }
  _LSDatabaseDisposeStringArray(v4, (int)__dst[58]);
  if (HIDWORD(__dst[58]))
  {
    v16 = v4;
    _CSArrayEnumerateAllValues();
    _CSArrayDispose();

  }
  if (LODWORD(__dst[59]))
  {
    v15 = v4;
    _CSArrayEnumerateAllValues();
    _CSArrayDispose();

  }
  if (HIDWORD(__dst[59]))
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v14 = v4;
    _CSArrayEnumerateAllValues();
    _CSArrayDispose();

  }
  else
  {
    Mutable = 0;
  }
  if (HIDWORD(__dst[60]))
  {
    v13 = v4;
    _CSArrayEnumerateAllValues();
    _CSArrayDispose();

  }
  _LSBindableDeactivate(v4, a2);
  _LSBindableDeactivate(v4, a2);
  if (HIDWORD(__dst[12]))
    _LSBindableDeactivate(v4, a2);
  if (LODWORD(__dst[61]))
  {
    _LSBundleDeactivateBindingsForUserActivityTypes(v4, a2, (uint64_t)__dst);
    _CSArrayDispose();
  }
  if (LODWORD(__dst[69]))
    _LSBindableDeactivate(v4, a2);
  _CSStringRelease();
  _CSStringRelease();
  _CSStringRelease();
  _CSStringRelease();
  _CSStringRelease();
  _CSStringRelease();
  _CSStringRelease();
  _CSStringRelease();
  _CSStringRelease();
  _CSStringRelease();
  _CSStringRelease();
  _CSStringRelease();
  _CSStringRelease();
  _CSStringRelease();
  _CSStringRelease();
  _CSStringRelease();
  _LSDatabaseDisposeStringArray(v4, (int)__dst[60]);
  _CSStringRelease();
  _CSStringRelease();
  _CSStringRelease();
  _CSStringRelease();
  _LSPlistRemove((uint64_t)v4, (int)__dst[55]);
  _CSStringRelease();
  _CSStringRelease();
  _LSDatabaseDisposeStringArray(v4, (int)__dst[38]);
  _LSDatabaseDisposeStringArray(v4, SHIDWORD(__dst[38]));
  _LSDatabaseDisposeStringArray(v4, (int)__dst[66]);
  _LSDatabaseDisposeStringArray(v4, (int)__dst[57]);
  _LSDatabaseDisposeStringArray(v4, SHIDWORD(__dst[61]));
  _LSDatabaseDisposeStringArray(v4, SHIDWORD(__dst[11]));
  _CSStringRelease();
  _CSStringRelease();
  _CSArrayDispose();
  _LSPlistRemove((uint64_t)v4, SHIDWORD(__dst[56]));
  _LSPlistRemove((uint64_t)v4, (int)__dst[17]);
  _LSPlistRemove((uint64_t)v4, SHIDWORD(__dst[17]));
  _LSPlistRemove((uint64_t)v4, (int)__dst[18]);
  _LSPlistRemove((uint64_t)v4, (int)__dst[64]);
  _LSPlistRemove((uint64_t)v4, (int)__dst[19]);
  _LSPlistRemove((uint64_t)v4, SHIDWORD(__dst[67]));
  _CSStringRelease();
  _CSStringRelease();
  _LSDatabaseDisposeStringArray(v4, (int)__dst[62]);
  _LSDatabaseDisposeStringArray(v4, SHIDWORD(__dst[62]));
  LaunchServices::LocalizedString::Remove((LaunchServices::LocalizedString *)v4, (_LSDatabase *)LODWORD(__dst[14]));
  LaunchServices::LocalizedString::Remove((LaunchServices::LocalizedString *)v4, (_LSDatabase *)LODWORD(__dst[13]));
  LaunchServices::LocalizedString::Remove((LaunchServices::LocalizedString *)v4, (_LSDatabase *)HIDWORD(__dst[14]));
  LaunchServices::LocalizedString::Remove((LaunchServices::LocalizedString *)v4, (_LSDatabase *)LODWORD(__dst[15]));
  v18[0] = v6;
  v18[1] = 3221225472;
  v18[2] = ___LSBundleRemove_block_invoke_5;
  v18[3] = &unk_1E1041BE0;
  v9 = v4;
  v19 = v9;
  memcpy(v20, __dst, sizeof(v20));
  _LSBundleDisplayNameContextEnumerate(v18);
  if (LODWORD(__dst[0]))
    _LSAliasRemove(v9, (int)__dst[0]);
  if (LODWORD(__dst[63]))
    _LSAliasRemove(v9, (int)__dst[63]);
  if (LODWORD(__dst[12]))
    _LSAliasRemove(v9, (int)__dst[12]);
  _LSDatabaseDisposeStringArray(v9, (int)__dst[65]);
  _CSArrayDispose();
  v10 = v9;
  _CSArrayEnumerateAllValues();
  _CSArrayDispose();
  _LSPlistRemove((uint64_t)v10, SHIDWORD(__dst[68]));
  CSStoreFreeUnit();
  if (a3 || Mutable)
  {
    _LSDatabaseCommit((uint64_t)v10);
    if (Mutable)
    {
      LSPluginSendNotification(v10, (uint64_t)CFSTR("com.apple.LaunchServices.pluginsunregistered"), Mutable);
      CFRelease(Mutable);
    }
  }

  return 0;
}

void sub_182929A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42)
{
  void *v42;

  _Unwind_Resume(a1);
}

uint64_t _LSBundleSetFlags()
{
  return _CSStoreWriteToUnit();
}

uint64_t _LSBundleSetMoreFlags()
{
  return _CSStoreWriteToUnit();
}

void _LSBundleSetSpecialApplicationTypes(void *a1, unsigned int a2, char a3, int a4)
{
  id v7;
  uint64_t v8;
  _LSDatabase *v9;
  uint64_t v10;
  uint64_t v11;
  _LSPlistHint *v12;
  NSObject *v13;
  uint64_t v14;
  __int16 v15;
  _LSPlistHint *v16;
  _BOOL4 v17;
  __int16 v18;
  uint64_t v19;
  _LSDatabase *v20;
  uint8_t buf[568];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = _LSBundleGet(v7, a2);
  if (v8)
  {
    v9 = (_LSDatabase *)v7;
    v20 = v9;
    v10 = *(_QWORD *)(v8 + 172);
    if ((v10 & 0x40000) != 0)
    {
      _LSDefaultLog();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = a2;
        _os_log_impl(&dword_182882000, v13, OS_LOG_TYPE_INFO, "Bundle 0x%llx is a placeholder, so it cannot be the default web browser or mail client.", buf, 0xCu);
      }
      goto LABEL_13;
    }
    if (*(_DWORD *)(v8 + 168) != 2)
    {
      _LSDefaultLog();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = a2;
        _os_log_impl(&dword_182882000, v13, OS_LOG_TYPE_INFO, "Bundle 0x%llx is not an application, so it cannot be the default web browser or mail client.", buf, 0xCu);
      }
      goto LABEL_13;
    }
    v11 = (uint64_t)v9;
    _LSContainerGet();
    if ((v10 & 0x1000000040) != 0)
    {
      _LSDefaultLog();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = a2;
        _os_log_impl(&dword_182882000, v13, OS_LOG_TYPE_INFO, "Bundle 0x%llx is in an unsupported location, so it cannot be the default web browser or mail client.", buf, 0xCu);
      }
LABEL_13:

LABEL_14:
      goto LABEL_15;
    }
    if ((a3 & 1) != 0
      || (_LSPlistGetValueForKey(v20, *(_DWORD *)(v8 + 140), CFSTR("com.apple.developer.web-browser"), v12),
          (v10 = objc_claimAutoreleasedReturnValue()) != 0))
    {
      v14 = 14;
      if (_LSCanBundleHandleNodeOrSchemeOrUTI((int)&v20, a2, 0, (LaunchServices::BindingEvaluator *)CFSTR("https"), 0, 14))v15 = _LSCanBundleHandleNodeOrSchemeOrUTI((int)&v20, a2, 0, (LaunchServices::BindingEvaluator *)CFSTR("http"), 0, 14) != 0;
      else
        v15 = 0;
      if ((a3 & 1) != 0)
        goto LABEL_25;
    }
    else
    {
      v15 = 0;
    }

    _LSPlistGetValueForKey(v20, *(_DWORD *)(v8 + 140), CFSTR("com.apple.developer.mail-client"), v16);
    v14 = objc_claimAutoreleasedReturnValue();
    if (!v14)
    {
      v17 = 0;
LABEL_28:

LABEL_29:
      if ((v15 & 1) != 0 || v17)
      {
        memcpy(buf, (const void *)v8, 0x230uLL);
        if (v17)
          v18 = 2;
        else
          v18 = 0;
        *(_WORD *)&buf[189] = v18 | v15 | *(_WORD *)&buf[189] & 0xFFFC;
        if (a4)
        {
          v19 = _LSDatabaseGetSequenceNumber() + 1;
          *(_QWORD *)&buf[272] = v19;
          *(_DWORD *)&buf[532] = (int)CFAbsoluteTimeGetCurrent();
          _LSDatabaseSetSequenceNumber(v11, v19);
        }
        _CSStoreWriteToUnit();
      }
      goto LABEL_14;
    }
LABEL_25:
    v17 = _LSCanBundleHandleNodeOrSchemeOrUTI((int)&v20, a2, 0, (LaunchServices::BindingEvaluator *)CFSTR("mailto"), 0, 14) != 0;
    if ((a3 & 1) != 0)
      goto LABEL_29;
    goto LABEL_28;
  }
LABEL_15:

}

void sub_18292A1D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

_LSStringLocalizer *_LSBundleGetLocalizer(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  _LSStringLocalizer *v11;
  _LSStringLocalizer *v12;
  void *v13;
  _LSStringLocalizer *v14;

  v7 = a1;
  v8 = a4;
  v9 = (void *)MEMORY[0x186DAE7A0]();
  if (!(_DWORD)a2 || (v10 = _LSBundleGet(v7, a2)) == 0)
  {
    if (v8 && objc_msgSend(v8, "isDirectory"))
    {
      v12 = [_LSStringLocalizer alloc];
      objc_msgSend(v8, "URL");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = -[_LSStringLocalizer initWithBundleURL:stringsFile:](v12, "initWithBundleURL:stringsFile:", v13, CFSTR("InfoPlist"));

      goto LABEL_13;
    }
LABEL_10:
    v14 = 0;
    goto LABEL_13;
  }
  if ((*(_BYTE *)(v10 + 184) & 8) == 0)
    goto LABEL_10;
  if ((_DWORD)a3 || *(_DWORD *)(v10 + 168) != 11)
  {
    v11 = -[_LSStringLocalizer initWithDatabase:bundleUnit:delegate:]([_LSStringLocalizer alloc], "initWithDatabase:bundleUnit:delegate:", v7, a2, a3);
  }
  else
  {
    +[_LSStringLocalizer coreTypesLocalizer](_LSStringLocalizer, "coreTypesLocalizer");
    v11 = (_LSStringLocalizer *)objc_claimAutoreleasedReturnValue();
  }
  v14 = v11;
LABEL_13:
  objc_autoreleasePoolPop(v9);

  return v14;
}

void sub_18292A350(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

NSObject *_LSBundleGetLocalizedName(void *a1, uint64_t a2, void *a3, void *a4, void *a5, char a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t Index;
  uint64_t v18;
  uint64_t v19;
  _LSDatabase *v20;
  NSObject *v21;
  NSObject *v22;
  NSObject *v23;
  NSObject *v24;
  NSObject *v25;
  void *v26;
  unint64_t v27;
  NSObject *v28;

  v11 = a1;
  v12 = a3;
  v13 = a4;
  v14 = a5;
  v15 = _LSBundleGet(v11, a2);
  v16 = v15;
  if (v12)
  {
    Index = _LSBundleDisplayNameContextGetIndex(v12);
    v18 = Index;
    if (Index == -1)
      goto LABEL_12;
    v19 = LaunchServices::LocalizedString::Get((LaunchServices::LocalizedString *)v11, (_LSDatabase *)*(unsigned int *)(v16 + 4 * Index + 516));
    if (!v19)
      goto LABEL_12;
  }
  else
  {
    if ((a6 & 1) != 0 || (v20 = (_LSDatabase *)*(unsigned int *)(v15 + 112), !(_DWORD)v20))
      v20 = (_LSDatabase *)*(unsigned int *)(v15 + 104);
    v19 = LaunchServices::LocalizedString::Get((LaunchServices::LocalizedString *)v11, v20);
    v18 = -1;
    if (!v19)
      goto LABEL_12;
  }
  LaunchServices::LocalizedString::localizeUnsafely(v19, v11, v14);
  v21 = objc_claimAutoreleasedReturnValue();
  if (v21)
  {
    _LSDefaultLog();
    v22 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
    {
      _LSBundleGetShortDescription(v11, a2);
      objc_claimAutoreleasedReturnValue();
      _LSBundleGetLocalizedName_cold_2();
    }
    goto LABEL_26;
  }
LABEL_12:
  _LSDefaultLog();
  v23 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
  {
    _LSBundleGetShortDescription(v11, a2);
    objc_claimAutoreleasedReturnValue();
    _LSBundleGetLocalizedName_cold_1();
  }

  if (v18 == -1)
  {
    _LSBundleGetLocalizer(v11, a2, 0, v13);
    v25 = objc_claimAutoreleasedReturnValue();
    v22 = v25;
    if (!v25)
    {
LABEL_33:
      v24 = 0;
LABEL_35:

      goto LABEL_36;
    }
    if (v12)
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@#%@"), *MEMORY[0x1E0C9AAC8], v12);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      -[NSObject localizedStringWithString:preferredLocalizations:](v22, "localizedStringWithString:preferredLocalizations:", v26, v14);
      v21 = objc_claimAutoreleasedReturnValue();

      if (!v21)
        goto LABEL_33;
    }
    else if ((a6 & 1) != 0
           || (-[NSObject localizedStringWithString:preferredLocalizations:](v25, "localizedStringWithString:preferredLocalizations:", *MEMORY[0x1E0C9AAC8], v14), (v21 = objc_claimAutoreleasedReturnValue()) == 0))
    {
      -[NSObject localizedStringWithString:preferredLocalizations:](v22, "localizedStringWithString:preferredLocalizations:", *MEMORY[0x1E0C9AE88], v14);
      v21 = objc_claimAutoreleasedReturnValue();
      if (!v21)
        goto LABEL_33;
    }
    if (objc_msgSend((id)__LSDefaultsGetSharedInstance(), "markLocalizationsStoredInDatabase"))
    {
      -[NSObject stringByAppendingString:](v21, "stringByAppendingString:", CFSTR("🔥"));
      v24 = objc_claimAutoreleasedReturnValue();

      v21 = v24;
      if (!v24)
        goto LABEL_36;
      goto LABEL_27;
    }
LABEL_26:

LABEL_27:
    v27 = -[NSObject length](v21, "length");
    v24 = 0;
    if (v27 <= 0x400 && v27)
    {
      objc_msgSend(v13, "extensionWithError:", 0);
      v28 = objc_claimAutoreleasedReturnValue();
      v22 = v28;
      if (v28 && -[NSObject length](v28, "length"))
      {
        -[NSObject stringByAppendingPathExtension:](v21, "stringByAppendingPathExtension:", v22);
        v24 = objc_claimAutoreleasedReturnValue();

      }
      else
      {
        v24 = v21;
      }
    }
    else
    {
      v22 = v21;
    }
    goto LABEL_35;
  }
  v24 = 0;
LABEL_36:

  return v24;
}

void sub_18292A69C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

id _LSBundleGetShortDescription(void *a1, int a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a1;
  v4 = _LSBundleGet(v3, a2);
  v5 = v4;
  if (v4)
  {
    v6 = LaunchServices::LocalizedString::Get((LaunchServices::LocalizedString *)v3, (_LSDatabase *)*(unsigned int *)(v4 + 112));
    if (v6)
    {
      LaunchServices::LocalizedString::localizeUnsafely(v6, v3, 0);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v7 = 0;
    }
    v8 = LaunchServices::LocalizedString::Get((LaunchServices::LocalizedString *)v3, (_LSDatabase *)*(unsigned int *)(v5 + 104));
    if (v8)
    {
      LaunchServices::LocalizedString::localizeUnsafely(v8, v3, 0);
      v9 = objc_claimAutoreleasedReturnValue();

      v7 = (void *)v9;
    }
    if (!v7)
    {
      v7 = (void *)_CSStringCopyCFString();
      if (!v7)
      {
        v7 = (void *)_CSStringCopyCFString();
        if (!v7)
        {
          _LSAliasGetName(v3, *(_DWORD *)v5);
          v7 = (void *)objc_claimAutoreleasedReturnValue();
        }
      }
    }
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void sub_18292A828(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t _LSBundleCopyStringDictionaryForKey(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;

  v10 = (void *)MEMORY[0x186DAE7A0]();
  _LSBundleGetLocalizer(a1, a2, 0, a3);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = v11;
  if (v11)
  {
    objc_msgSend(v11, "localizedStringDictionaryWithString:defaultValue:", a4, a5);
    v13 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v13 = 0;
  }

  objc_autoreleasePoolPop(v10);
  return v13;
}

void sub_18292A8DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _LSBundleInfoPlistKeyIsCommon(void *a1)
{
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (_LSBundleInfoPlistKeyIsCommon::once != -1)
    dispatch_once(&_LSBundleInfoPlistKeyIsCommon::once, &__block_literal_global_14);
  if ((objc_msgSend((id)_LSBundleInfoPlistKeyIsCommon::explicitlyIgnoredKeys, "containsObject:", a1) & 1) != 0)
    return 0;
  if ((objc_msgSend((id)_LSBundleInfoPlistKeyIsCommon::explicitlyIncludedKeys, "containsObject:", a1) & 1) != 0)
    return 1;
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v3 = (id)_LSBundleInfoPlistKeyIsCommon::prefixes;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v9;
    while (2)
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v9 != v5)
          objc_enumerationMutation(v3);
        if ((objc_msgSend(a1, "hasPrefix:", *(_QWORD *)(*((_QWORD *)&v8 + 1) + 8 * i), (_QWORD)v8) & 1) != 0)
        {
          v2 = 1;
          goto LABEL_17;
        }
      }
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      if (v4)
        continue;
      break;
    }
  }
  v2 = 0;
LABEL_17:

  return v2;
}

void sub_18292AA54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18292ABEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _LSBundleCopyArchitecturesAvailable(void *a1, int a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;

  v3 = a1;
  v4 = v3;
  v5 = 0;
  if (v3)
  {
    if (a2)
    {
      v5 = _LSBundleGet(v3, a2);
      if (v5)
      {
        v6 = (void *)MEMORY[0x186DAE7A0]();
        v5 = (uint64_t)_LSBundleCopyArchitectures_Common(v5);
        objc_autoreleasePoolPop(v6);
      }
    }
  }

  return v5;
}

void sub_18292AC78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

__CFString *_LSGetDescriptionForPersonaType(unint64_t a1)
{
  __CFString *v1;

  if (a1 >= 5)
    v1 = (__CFString *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("InvalidType(%lu)"), a1);
  else
    v1 = off_1E1041D70[a1];
  return v1;
}

void _LSBundleGetVisualizationFunctions(id (**a1)(void **this, LSContext *a2, int a3)@<X8>)
{
  *a1 = LaunchServices::Bundles::getSummary;
  a1[1] = (id (*)(void **, LSContext *, int))LaunchServices::Bundles::display;
  a1[2] = (id (*)(void **, LSContext *, int))LaunchServices::Bundles::copyBindingForVisualization;
}

id LaunchServices::Bundles::getSummary(void **this, LSContext *a2, int a3)
{
  return _LSBundleGetShortDescription(*this, a3);
}

BOOL LaunchServices::Bundles::display(void **this, LSContext *a2, unsigned int a3, CSStore2::AttributedStringWriter *a4, LaunchServices::DumpWriter *a5)
{
  uint64_t v7;
  NSNumber *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  char v13;
  id v14;
  uint64_t v15;
  NSString *v16;
  uint64_t v17;
  NSString *v18;
  NSNumber *v19;
  NSNumber *v20;
  NSNumber *v21;
  NSNumber *v22;
  NSNumber *v23;
  NSNumber *v24;
  NSNumber *v25;
  NSNumber *v26;
  NSNumber *v27;
  NSString *v28;
  NSString *v29;
  NSString *v30;
  NSNumber *v31;
  NSNumber *v32;
  NSNumber *v33;
  NSNumber *v34;
  int v35;
  NSString *v36;
  int v37;
  NSString *v38;
  CSStore2::AttributedStringWriter *v39;
  __int128 v40;
  NSString *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  NSNumber *v48;
  NSArray *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t i;
  __CFString *v54;
  CFStringRef v55;
  __CFString *v56;
  __CFString *v57;
  uint64_t v58;
  CFStringRef v59;
  uint64_t v60;
  NSArray *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t j;
  id v66;
  void *v67;
  void *v68;
  int v69;
  NSArray *v70;
  void *context;
  void *v73;
  void *v74;
  NSArray *v75;
  NSArray *v76;
  unsigned int *v77;
  __CFString *inTagClass;
  CSStore2::AttributedStringWriter *v79;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t (*v91)(uint64_t);
  void *v92;
  CSStore2::AttributedStringWriter *v93;
  void **v94;
  uint64_t v95;
  uint64_t v96;
  void (*v97)(uint64_t, uint64_t, unsigned int);
  void *v98;
  NSArray *v99;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(uint64_t);
  void *v103;
  CSStore2::AttributedStringWriter *v104;
  unsigned int *v105;
  unsigned int v106;
  unsigned int v107;
  _QWORD v108[11];
  NSArray *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t (*v112)(uint64_t);
  void *v113;
  id v114;
  CSStore2::AttributedStringWriter *v115;
  id v116;
  id v117;
  _BYTE v118[128];
  _BYTE v119[128];
  LSVersionNumber v120;
  LSVersionNumber v121;
  LSVersionNumber v122;
  LSVersionNumber v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;

  v128 = *MEMORY[0x1E0C80C00];
  v7 = _LSBundleGet(*this, a3);
  if (v7)
  {
    v79 = a4;
    v77 = (unsigned int *)v7;
    if (*(_BYTE *)(v7 + 508) != 11)
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedChar:");
      v8 = (NSNumber *)objc_claimAutoreleasedReturnValue();
      CSStore2::AttributedStringWriter::number(v79, CFSTR("revision"), v8);

    }
    v9 = *this;
    v117 = 0;
    _LSBundleCreateNode(v9, a3, 0, 0, &v117);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = v117;
    v12 = v11;
    v74 = v10;
    if (!v10
      || (v116 = v11,
          v13 = objc_msgSend(v10, "checkResourceIsReachableAndReturnError:", &v116),
          v14 = v116,
          v12,
          v12 = v14,
          (v13 & 1) == 0))
    {
      v110 = MEMORY[0x1E0C809B0];
      v111 = 3221225472;
      v112 = ___ZN14LaunchServices7BundlesL7displayEP9LSContextjjPNS_10DumpWriterE_block_invoke;
      v113 = &unk_1E103FAD8;
      v115 = v79;
      v14 = v12;
      v114 = v14;
      CSStore2::AttributedStringWriter::withWarningColors();

    }
    v15 = v77[42];
    _LSBundleClassGetName(v77[42]);
    v73 = (void *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::format(v79, CFSTR("class"), CFSTR("%@ (0x%llx)"), v73, v15);
    CSStore2::AttributedStringWriter::link(v79, *((unsigned int *)*this + 399), v77[1], 0);
    v16 = (NSString *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::string(v79, CFSTR("container"), v16);

    v17 = _LSContainerGet();
    if (v17)
    {
      _LSContainerStateGetDescription(*(char *)(v17 + 2));
      v18 = (NSString *)objc_claimAutoreleasedReturnValue();
      CSStore2::AttributedStringWriter::string(v79, CFSTR("mount state"), v18);

    }
    CSStore2::AttributedStringWriter::stringArray(v79, CFSTR("Driver Extensions"));
    if (*((_QWORD *)v77 + 35))
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:");
      v19 = (NSNumber *)objc_claimAutoreleasedReturnValue();
      CSStore2::AttributedStringWriter::number(v79, CFSTR("Compatibility"), v19);

    }
    if (*((_QWORD *)v77 + 42))
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:");
      v20 = (NSNumber *)objc_claimAutoreleasedReturnValue();
      CSStore2::AttributedStringWriter::number(v79, CFSTR("InstallFailure"), v20);

    }
    CSStore2::AttributedStringWriter::stringArray(v79, CFSTR("Mach-O UUIDs"));
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v76 = (NSArray *)objc_claimAutoreleasedReturnValue();
    if (v77[74])
    {
      v108[7] = MEMORY[0x1E0C809B0];
      v108[8] = 3221225472;
      v108[9] = ___ZN14LaunchServices7BundlesL7displayEP9LSContextjjPNS_10DumpWriterE_block_invoke_2;
      v108[10] = &unk_1E103FD40;
      v109 = v76;
      _CSArrayEnumerateAllValues();

    }
    CSStore2::AttributedStringWriter::array(v79, CFSTR("Device Family"), v76);
    CSStore2::AttributedStringWriter::stringArray(v79, CFSTR("Counterparts"));
    CSStore2::AttributedStringWriter::stringArray(v79, CFSTR("EquivalentIDs"));
    CSStore2::AttributedStringWriter::stringArray(v79, CFSTR("App Clip Parents"));
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", *((_QWORD *)v77 + 34));
    v21 = (NSNumber *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::number(v79, CFSTR("sequenceNum"), v21);

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", *((_QWORD *)v77 + 36));
    v22 = (NSNumber *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::number(v79, CFSTR("itemID"), v22);

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", *((_QWORD *)v77 + 47));
    v23 = (NSNumber *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::number(v79, CFSTR("FamilyID"), v23);

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", *((_QWORD *)v77 + 45));
    v24 = (NSNumber *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::number(v79, CFSTR("PurchaserID"), v24);

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", *((_QWORD *)v77 + 46));
    v25 = (NSNumber *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::number(v79, CFSTR("DownloaderID"), v25);

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", *((_QWORD *)v77 + 44));
    v26 = (NSNumber *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::number(v79, CFSTR("staticSize"), v26);

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v77[83]);
    v27 = (NSNumber *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::number(v79, CFSTR("installType"), v27);

    CSStore2::AttributedStringWriter::link(v79, *((unsigned int *)*this + 400), v77[126], 0);
    v28 = (NSString *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::string(v79, CFSTR("appContainer"), v28);

    CSStore2::AttributedStringWriter::link(v79, *((unsigned int *)*this + 400), v77[24], 0);
    v29 = (NSString *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::string(v79, CFSTR("dataContainer"), v29);

    CSStore2::AttributedStringWriter::link(v79, *((unsigned int *)*this + 400), *v77, 0);
    v30 = (NSString *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::string(v79, CFSTR("path"), v30);

    LaunchServices::DumpWriter::directoryClass((uint64_t)v79, CFSTR("directory"), *((unsigned __int8 *)v77 + 148));
    CSStore2::AttributedStringWriter::string(v79, CFSTR("name"));
    CSStore2::AttributedStringWriter::string(v79, CFSTR("displayName"));
    CSStore2::AttributedStringWriter::childUnit(v79, CFSTR("localizedNames"));
    CSStore2::AttributedStringWriter::childUnit(v79, CFSTR("localizedShortNames"));
    CSStore2::AttributedStringWriter::childUnit(v79, CFSTR("localizedMicrophoneUsage"));
    CSStore2::AttributedStringWriter::childUnit(v79, CFSTR("localizedIdentityUsageDescription"));
    v108[0] = MEMORY[0x1E0C809B0];
    v108[1] = 3221225472;
    v108[2] = ___ZN14LaunchServices7BundlesL7displayEP9LSContextjjPNS_10DumpWriterE_block_invoke_3;
    v108[3] = &__block_descriptor_56_e37_v40__0q8__NSString_16__NSString_24_32l;
    v108[4] = v79;
    v108[5] = this;
    v108[6] = v77;
    _LSBundleDisplayNameContextEnumerate(v108);
    CSStore2::AttributedStringWriter::string(v79, CFSTR("itemName"));
    CSStore2::AttributedStringWriter::string(v79, CFSTR("teamID"));
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", *(_QWORD *)(v77 + 97));
    v31 = (NSNumber *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::number(v79, CFSTR("storeFront"), v31);

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", *(_QWORD *)(v77 + 99));
    v32 = (NSNumber *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::number(v79, CFSTR("versionID"), v32);

    CSStore2::AttributedStringWriter::string(v79, CFSTR("sourceAppBundleID"));
    CSStore2::AttributedStringWriter::string(v79, CFSTR("ratingLabel"));
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", *((_QWORD *)v77 + 52));
    v33 = (NSNumber *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::number(v79, CFSTR("ratingRank"), v33);

    CSStore2::AttributedStringWriter::string(v79, CFSTR("genre"));
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", *(_QWORD *)(v77 + 107));
    v34 = (NSNumber *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::number(v79, CFSTR("genreID"), v34);

    CSStore2::AttributedStringWriter::childUnit(v79, CFSTR("distributorInfo"));
    v107 = 0;
    v35 = v77[78];
    if (v35 && (_UTGetActiveTypeForIdentifier(*this, v35, &v107), v107))
    {
      CSStore2::AttributedStringWriter::link(v79, *((unsigned int *)*this + 8), v107, 0);
      v36 = (NSString *)objc_claimAutoreleasedReturnValue();
      CSStore2::AttributedStringWriter::string(v79, CFSTR("category"), v36);

    }
    else
    {
      CSStore2::AttributedStringWriter::string(v79, CFSTR("category"));
    }
    v106 = 0;
    v37 = v77[79];
    if (v37 && (_UTGetActiveTypeForIdentifier(*this, v37, &v106), v106))
    {
      CSStore2::AttributedStringWriter::link(v79, *((unsigned int *)*this + 8), v106, 0);
      v38 = (NSString *)objc_claimAutoreleasedReturnValue();
      CSStore2::AttributedStringWriter::string(v79, CFSTR("2ry category"), v38);

      v39 = v79;
    }
    else
    {
      v39 = v79;
      CSStore2::AttributedStringWriter::string(v79, CFSTR("2ry category"));
    }
    CSStore2::AttributedStringWriter::string(v39, CFSTR("identifier"));
    if (v77[3] != v77[75])
      CSStore2::AttributedStringWriter::string(v39, CFSTR("canonical id"));
    CSStore2::AttributedStringWriter::string(v39, CFSTR("vendor"));
    CSStore2::AttributedStringWriter::string(v39, CFSTR("type"));
    v40 = *(_OWORD *)(v77 + 11);
    *(_OWORD *)v123._opaque = *(_OWORD *)(v77 + 7);
    *(_OWORD *)&v123._opaque[16] = v40;
    LaunchServices::DumpWriter::version(v39, CFSTR("version"), &v123);
    CSStore2::AttributedStringWriter::string(v39, CFSTR("versionString"));
    CSStore2::AttributedStringWriter::string(v39, CFSTR("displayVersion"));
    CSStore2::AttributedStringWriter::string(v39, CFSTR("codeInfoID"));
    CSStore2::AttributedStringWriter::string(v39, CFSTR("signerOrg"));
    CSStore2::AttributedStringWriter::string(v39, CFSTR("signer identity"));
    CSStore2::AttributedStringWriter::string(v39, CFSTR("appVariant"));
    CSStore2::AttributedStringWriter::string(v39, CFSTR("managementDeclarationID"));
    CSStore2::AttributedStringWriter::timestamp(v39, CFSTR("mod date"), (double)(int)v77[49]);
    CSStore2::AttributedStringWriter::timestamp(v39, CFSTR("reg date"), (double)(int)v77[6]);
    CSStore2::AttributedStringWriter::timestamp(v39, CFSTR("rec mod date"), (double)(int)v77[133]);
    if (*((_BYTE *)v77 + 509))
    {
      v100 = MEMORY[0x1E0C809B0];
      v101 = 3221225472;
      v102 = ___ZN14LaunchServices7BundlesL7displayEP9LSContextjjPNS_10DumpWriterE_block_invoke_4;
      v103 = &__block_descriptor_48_e5_v8__0l;
      v104 = v39;
      v105 = v77;
      CSStore2::AttributedStringWriter::withWarningColors();
    }
    CSStore2::AttributedStringWriter::beginFlags(v39, CFSTR("bundle flags"));
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LODWORD(v126) = 16711680;
    BYTE4(v126) = 1;
    CSStore2::AttributedStringWriter::flag();
    LODWORD(v126) = 16711680;
    BYTE4(v126) = 1;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LODWORD(v126) = 16711680;
    BYTE4(v126) = 1;
    CSStore2::AttributedStringWriter::flag();
    LODWORD(v126) = 16711680;
    BYTE4(v126) = 1;
    CSStore2::AttributedStringWriter::flag();
    LODWORD(v126) = 16711680;
    BYTE4(v126) = 1;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LODWORD(v126) = 16711680;
    BYTE4(v126) = 1;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::missingFlag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LODWORD(v126) = 12566272;
    BYTE4(v126) = 1;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LODWORD(v126) = 16711680;
    BYTE4(v126) = 1;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LODWORD(v126) = 16711680;
    BYTE4(v126) = 1;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LODWORD(v126) = 16711680;
    BYTE4(v126) = 1;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LODWORD(v126) = 16711680;
    BYTE4(v126) = 1;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::endFlags(v39);
    CSStore2::AttributedStringWriter::beginBitfieldFlags(v39, CFSTR("more flags"));
    LODWORD(v126) = 8028671;
    BYTE4(v126) = 1;
    CSStore2::AttributedStringWriter::flag();
    LODWORD(v126) = 14124031;
    BYTE4(v126) = 1;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LODWORD(v126) = 16727808;
    BYTE4(v126) = 1;
    CSStore2::AttributedStringWriter::flag();
    LODWORD(v126) = 16727808;
    BYTE4(v126) = 1;
    CSStore2::AttributedStringWriter::flag();
    LODWORD(v126) = 5213952;
    BYTE4(v126) = 1;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LODWORD(v126) = 16711680;
    BYTE4(v126) = 1;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LODWORD(v126) = 16711680;
    BYTE4(v126) = 1;
    CSStore2::AttributedStringWriter::flag();
    LODWORD(v126) = 16711680;
    BYTE4(v126) = 1;
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::endFlags(v39);
    if ((v77[45] & 0x10000) != 0)
    {
      if (v77[118])
        _CSArrayGetCount();
      if (v77[117])
        _CSArrayGetCount();
    }
    CSStore2::AttributedStringWriter::beginFlags(v79, CFSTR("plist flags"));
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::endFlags(v79);
    CSStore2::AttributedStringWriter::beginFlags(v79, CFSTR("icon flags"));
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::endFlags(v79);
    _LSSliceMaskWriteDescription(v79);
    CSStore2::AttributedStringWriter::beginFlags(v79, CFSTR("item flags"));
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LODWORD(v126) = 16711680;
    BYTE4(v126) = 1;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LODWORD(v126) = 16711680;
    BYTE4(v126) = 1;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LODWORD(v126) = 16711680;
    BYTE4(v126) = 1;
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::endFlags(v79);
    _LSBundleBaseFlagsWriteDescription(v79);
    if (*((_BYTE *)v77 + 149))
    {
      _LSProfileValidationStateGetVisualizationDescription(*((unsigned __int8 *)v77 + 149));
      v41 = (NSString *)objc_claimAutoreleasedReturnValue();
      CSStore2::AttributedStringWriter::string(v79, CFSTR("validation"), v41);

    }
    LaunchServices::DumpWriter::platform(v79, CFSTR("platform"), v77[5]);
    CSStore2::AttributedStringWriter::string(v79, CFSTR("iconName"));
    CSStore2::AttributedStringWriter::string(v79, CFSTR("alternate primary icon"));
    if (v77[113])
      CSStore2::AttributedStringWriter::childUnit(v79, CFSTR("iconDict"));
    CSStore2::AttributedStringWriter::stringArray(v79, CFSTR("icons"));
    CSStore2::AttributedStringWriter::string(v79, CFSTR("executable"));
    v42 = *(_OWORD *)(v77 + 55);
    v126 = *(_OWORD *)(v77 + 51);
    v127 = v42;
    v124 = kLSVersionNumberNull;
    v125 = *(_OWORD *)algn_1829FAD90;
    if (_LSVersionNumberCompare(&v126, &v124))
    {
      v43 = *(_OWORD *)(v77 + 55);
      *(_OWORD *)v122._opaque = *(_OWORD *)(v77 + 51);
      *(_OWORD *)&v122._opaque[16] = v43;
      LaunchServices::DumpWriter::version(v79, CFSTR("min version"), &v122);
      LaunchServices::DumpWriter::platform(v79, CFSTR("min version platform"), v77[50]);
    }
    v44 = *(_OWORD *)(v77 + 63);
    v126 = *(_OWORD *)(v77 + 59);
    v127 = v44;
    v124 = kLSVersionNumberNull;
    v125 = *(_OWORD *)algn_1829FAD90;
    if (_LSVersionNumberCompare(&v126, &v124))
    {
      v45 = *(_OWORD *)(v77 + 63);
      *(_OWORD *)v121._opaque = *(_OWORD *)(v77 + 59);
      *(_OWORD *)&v121._opaque[16] = v45;
      LaunchServices::DumpWriter::version(v79, CFSTR("max version"), &v121);
    }
    v46 = *(_OWORD *)(v77 + 19);
    v126 = *(_OWORD *)(v77 + 15);
    v127 = v46;
    v124 = kLSVersionNumberNull;
    v125 = *(_OWORD *)algn_1829FAD90;
    if (_LSVersionNumberCompare(&v126, &v124))
    {
      v47 = *(_OWORD *)(v77 + 19);
      *(_OWORD *)v120._opaque = *(_OWORD *)(v77 + 15);
      *(_OWORD *)&v120._opaque[16] = v47;
      LaunchServices::DumpWriter::version(v79, CFSTR("execSDK ver"), &v120);
    }
    CSStore2::AttributedStringWriter::string(v79, CFSTR("App Store tools build version"));
    CSStore2::AttributedStringWriter::stringArray(v79, CFSTR("personas"));
    v75 = (NSArray *)objc_alloc_init(MEMORY[0x1E0C99DE8]);
    if (v77[131])
    {
      v95 = MEMORY[0x1E0C809B0];
      v96 = 3221225472;
      v97 = ___ZN14LaunchServices7BundlesL7displayEP9LSContextjjPNS_10DumpWriterE_block_invoke_5;
      v98 = &unk_1E103FD40;
      v99 = v75;
      _CSArrayEnumerateAllValues();

    }
    CSStore2::AttributedStringWriter::array(v79, CFSTR("personaTypes"), v75);
    CSStore2::AttributedStringWriter::childUnit(v79, CFSTR("infoDictionary"));
    CSStore2::AttributedStringWriter::string(v79, CFSTR("library"));
    CSStore2::AttributedStringWriter::stringArray(v79, CFSTR("library items"));
    CSStore2::AttributedStringWriter::stringArray(v79, CFSTR("queriable schemes"));
    CSStore2::AttributedStringWriter::stringArray(v79, CFSTR("BGPermittedIDs"));
    CSStore2::AttributedStringWriter::stringArray(v79, CFSTR("CarPlay URL Schemes"));
    CSStore2::AttributedStringWriter::stringArray(v79, CFSTR("activityTypes"));
    CSStore2::AttributedStringWriter::childUnit(v79, CFSTR("MI Install IDs"));
    v89 = MEMORY[0x1E0C809B0];
    v90 = 3221225472;
    v91 = ___ZN14LaunchServices7BundlesL7displayEP9LSContextjjPNS_10DumpWriterE_block_invoke_6;
    v92 = &__block_descriptor_48_e14_v24__0I8I12_16l;
    v93 = v79;
    v94 = this;
    _CSArrayEnumerateAllValues();
    CSStore2::AttributedStringWriter::string(v79, CFSTR("management domain"));
    CSStore2::AttributedStringWriter::string(v79, CFSTR("linked parent bundleID"));
    CSStore2::AttributedStringWriter::childUnit(v79, CFSTR("stashed app info"));
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v77[40]);
    v48 = (NSNumber *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::number(v79, CFSTR("code signature version"), v48);

    if (v77[42] == 2)
    {
      context = (void *)MEMORY[0x186DAE7A0]();
      objc_msgSend(MEMORY[0x1E0C99DE8], "array");
      v49 = (NSArray *)objc_claimAutoreleasedReturnValue();
      v87 = 0u;
      v88 = 0u;
      v85 = 0u;
      v86 = 0u;
      _LSGetAllClaimedTypesOrSchemesForBundleID((uint64_t)this, (uint64_t)v77, 14, 1);
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      v51 = objc_msgSend(v50, "countByEnumeratingWithState:objects:count:", &v85, v119, 16);
      if (v51)
      {
        v52 = *(_QWORD *)v86;
        do
        {
          for (i = 0; i != v51; ++i)
          {
            if (*(_QWORD *)v86 != v52)
              objc_enumerationMutation(v50);
            v54 = (__CFString *)*(id *)(*((_QWORD *)&v85 + 1) + 8 * i);
            if (UTTypeIsDynamic(v54))
            {
              v55 = UTTypeCopyPreferredTagWithClass(v54, CFSTR("public.filename-extension"));
              v56 = (__CFString *)v55;
              if (v55)
              {
                -[__CFString stringByAppendingFormat:](v54, "stringByAppendingFormat:", CFSTR(" (.%@)"), v55);
                v57 = v54;
                v54 = (__CFString *)objc_claimAutoreleasedReturnValue();
              }
              else
              {
                v59 = UTTypeCopyPreferredTagWithClass(v54, CFSTR("public.mime-type"));
                v57 = (__CFString *)v59;
                if (v59)
                {
                  -[__CFString stringByAppendingFormat:](v54, "stringByAppendingFormat:", CFSTR(" (MIME %@)"), v59);
                  v60 = objc_claimAutoreleasedReturnValue();

                  v54 = (__CFString *)v60;
                }
              }

            }
            else
            {
              LODWORD(v126) = 0;
              if (_UTGetActiveTypeForCFStringIdentifier(*this, v54, &v126))
              {
                CSStore2::AttributedStringWriter::link(v79, *((unsigned int *)*this + 8), v126, &v54->isa);
                v58 = objc_claimAutoreleasedReturnValue();

                v54 = (__CFString *)v58;
              }
            }
            -[NSArray addObject:](v49, "addObject:", v54);

          }
          v51 = objc_msgSend(v50, "countByEnumeratingWithState:objects:count:", &v85, v119, 16);
        }
        while (v51);
      }

      -[NSArray sortUsingSelector:](v49, "sortUsingSelector:", sel_caseInsensitiveCompare_);
      CSStore2::AttributedStringWriter::array(v79, CFSTR("claimed UTIs"), v49);

      objc_autoreleasePoolPop(context);
      inTagClass = (__CFString *)MEMORY[0x186DAE7A0]();
      objc_msgSend(MEMORY[0x1E0C99DE8], "array");
      v61 = (NSArray *)objc_claimAutoreleasedReturnValue();
      v83 = 0u;
      v84 = 0u;
      v81 = 0u;
      v82 = 0u;
      _LSGetAllClaimedTypesOrSchemesForBundleID((uint64_t)this, (uint64_t)v77, 14, 0);
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      v63 = objc_msgSend(v62, "countByEnumeratingWithState:objects:count:", &v81, v118, 16);
      if (v63)
      {
        v64 = *(_QWORD *)v82;
        do
        {
          for (j = 0; j != v63; ++j)
          {
            if (*(_QWORD *)v82 != v64)
              objc_enumerationMutation(v62);
            v66 = *(id *)(*((_QWORD *)&v81 + 1) + 8 * j);
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@:"), v66);
            v67 = (void *)objc_claimAutoreleasedReturnValue();

            -[NSArray addObject:](v61, "addObject:", v67);
          }
          v63 = objc_msgSend(v62, "countByEnumeratingWithState:objects:count:", &v81, v118, 16);
        }
        while (v63);
      }

      -[NSArray sortUsingSelector:](v61, "sortUsingSelector:", sel_caseInsensitiveCompare_);
      CSStore2::AttributedStringWriter::array(v79, CFSTR("claimed schemes"), v61);

      objc_autoreleasePoolPop(inTagClass);
    }
    v68 = (void *)MEMORY[0x186DAE7A0]();
    if (v74)
    {
      if (objc_msgSend((id)__LSDefaultsGetSharedInstance(), "isServer"))
      {
        *(_QWORD *)&v126 = 0;
        if (objc_msgSend(v74, "getContentModificationDate:error:", &v126, 0))
        {
          v69 = v77[49];
          if (v69 != (int)*(double *)&v126)
          {
            CSStore2::AttributedStringWriter::timestamp(v79, CFSTR("bundleModDate"), (double)v69);
            CSStore2::AttributedStringWriter::timestamp(v79, CFSTR("NodeModDate"), *(double *)&v126);
          }
        }
      }
    }
    objc_autoreleasePoolPop(v68);
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v70 = (NSArray *)(id)objc_claimAutoreleasedReturnValue();
    _CSArrayEnumerateAllValues();
    CSStore2::AttributedStringWriter::array(v79, CFSTR("plugin Identifiers"), v70);
    if (v77[35])
      CSStore2::AttributedStringWriter::childUnit(v79, CFSTR("entitlements"));
    if (v77[36])
      CSStore2::AttributedStringWriter::childUnit(v79, CFSTR("group ctrs"));
    if (v77[128])
      CSStore2::AttributedStringWriter::childUnit(v79, CFSTR("environment"));
    if (v77[38])
      CSStore2::AttributedStringWriter::childUnit(v79, CFSTR("Intents"));
    if (v77[118])
      _CSArrayEnumerateAllValues();
    if (v77[117])
      _CSArrayEnumerateAllValues();

    v7 = (uint64_t)v77;
  }
  return v7 != 0;
}

void sub_18292D340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16)
{

  _Unwind_Resume(a1);
}

uint64_t LaunchServices::Bundles::copyBindingForVisualization(LaunchServices::Bundles *this, LSContext *a2)
{
  return 0;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,_LSBundleCopyArchitectures_Common(LSBundleData const*,NSArray<NSString *> *)::$_0 &,LSSliceData *,false>(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  int *v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  BOOL v27;
  int v28;
  int *v29;
  int *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t *v40;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  _QWORD *v48;
  int64_t v49;
  int64_t v50;
  int64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t *v59;
  uint64_t v60;
  unsigned int v61;
  BOOL v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  int *v71;
  int *v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t v82;
  unint64_t v83;
  int *v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t *v89;
  BOOL v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  unsigned int v94;
  uint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t *v99;
  int64_t v100;
  uint64_t v101;
  unsigned int v103;
  uint64_t *v104;
  int *v105;

  v105 = (int *)result;
LABEL_2:
  v99 = a2 - 1;
  v6 = v105;
  while (2)
  {
    v7 = (uint64_t *)v6;
    v8 = (char *)a2 - (char *)v6;
    v9 = ((char *)a2 - (char *)v6) >> 3;
    v105 = (int *)v7;
    switch(v9)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v37 = *(a2 - 1);
        v38 = *v7;
        v39 = _LSScoreCPUType(v37);
        result = _LSScoreCPUType(v38);
        if (v39 < result)
        {
          *v7 = v37;
          *(a2 - 1) = v38;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,_LSBundleCopyArchitectures_Common(LSBundleData const*,NSArray<NSString *> *)::$_0 &,LSSliceData *>(v7, v7 + 1, v99);
      case 4uLL:
        return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,_LSBundleCopyArchitectures_Common(LSBundleData const*,NSArray<NSString *> *)::$_0 &,LSSliceData *>(v7, v7 + 1, v7 + 2, v99);
      case 5uLL:
        return std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,_LSBundleCopyArchitectures_Common(LSBundleData const*,NSArray<NSString *> *)::$_0 &,LSSliceData *,0>(v7, v7 + 1, v7 + 2, v7 + 3, v99);
      default:
        if (v8 <= 191)
        {
          v40 = v7 + 1;
          v42 = v7 == a2 || v40 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v42)
            {
              v43 = 0;
              do
              {
                v45 = *v7;
                v44 = v7[1];
                v7 = v40;
                v46 = _LSScoreCPUType(v44);
                result = _LSScoreCPUType(v45);
                if (v46 < result)
                {
                  v47 = v43;
                  while (1)
                  {
                    *(_QWORD *)((char *)v105 + v47 + 8) = v45;
                    if (!v47)
                      break;
                    v45 = *(_QWORD *)((char *)v105 + v47 - 8);
                    result = _LSScoreCPUType(v45);
                    v47 -= 8;
                    if (v46 >= result)
                    {
                      v48 = (_QWORD *)((char *)v105 + v47 + 8);
                      goto LABEL_76;
                    }
                  }
                  v48 = v105;
LABEL_76:
                  *v48 = v44;
                }
                v40 = v7 + 1;
                v43 += 8;
              }
              while (v7 + 1 != a2);
            }
          }
          else if (!v42)
          {
            do
            {
              v92 = *(_QWORD *)v105;
              v91 = *((_QWORD *)v105 + 1);
              v93 = v40;
              v94 = _LSScoreCPUType(v91);
              result = _LSScoreCPUType(v92);
              if (v94 < result)
              {
                v95 = v93;
                do
                {
                  *v95 = v92;
                  v92 = *(v95 - 2);
                  result = _LSScoreCPUType(v92);
                  --v95;
                }
                while (v94 < result);
                *v95 = v91;
              }
              v105 = (int *)v93;
              v40 = v93 + 1;
            }
            while (v93 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v7 != a2)
          {
            v96 = v8;
            v49 = (v9 - 2) >> 1;
            v50 = v49;
            v98 = v9;
            do
            {
              v51 = v50;
              if (v49 >= v50)
              {
                v52 = (2 * v50) | 1;
                v53 = &v7[v52];
                v54 = 2 * v50 + 2;
                v55 = *v53;
                v100 = v50;
                if (v54 < (uint64_t)v9)
                {
                  v56 = v53[1];
                  v57 = _LSScoreCPUType(v55);
                  v58 = _LSScoreCPUType(v56);
                  if (v57 < v58)
                    v55 = v56;
                  v7 = (uint64_t *)v105;
                  if (v57 < v58)
                  {
                    ++v53;
                    v52 = v54;
                  }
                }
                v59 = &v7[v51];
                v60 = *v59;
                v61 = _LSScoreCPUType(v55);
                result = _LSScoreCPUType(v60);
                v103 = result;
                v62 = v61 >= result;
                v7 = (uint64_t *)v105;
                if (v62)
                {
                  v97 = v60;
                  do
                  {
                    v63 = v53;
                    *v59 = v55;
                    if (v49 < v52)
                      break;
                    v64 = (2 * v52) | 1;
                    v53 = &v7[v64];
                    v65 = 2 * v52 + 2;
                    v55 = *v53;
                    if (v65 < (uint64_t)v9)
                    {
                      v66 = v53[1];
                      v67 = _LSScoreCPUType(*v53);
                      v68 = _LSScoreCPUType(v66);
                      if (v67 < v68)
                        v55 = v66;
                      v7 = (uint64_t *)v105;
                      if (v67 < v68)
                        ++v53;
                      v9 = v98;
                      if (v67 < v68)
                        v64 = v65;
                    }
                    result = _LSScoreCPUType(v55);
                    v59 = v63;
                    v52 = v64;
                  }
                  while (result >= v103);
                  *v63 = v97;
                  v51 = v100;
                }
              }
              v50 = v51 - 1;
            }
            while (v51);
            v69 = v96 >> 3;
            do
            {
              v70 = 0;
              v71 = v105;
              v101 = *(_QWORD *)v105;
              v104 = a2;
              do
              {
                v72 = &v71[2 * v70];
                v75 = *((_QWORD *)v72 + 1);
                v73 = (uint64_t *)(v72 + 2);
                v74 = v75;
                v76 = (2 * v70) | 1;
                v77 = 2 * v70 + 2;
                if (v77 < v69)
                {
                  v78 = v73[1];
                  v79 = _LSScoreCPUType(v74);
                  result = _LSScoreCPUType(v78);
                  if (v79 < result)
                  {
                    v74 = v78;
                    ++v73;
                    v76 = v77;
                  }
                }
                *(_QWORD *)v71 = v74;
                v71 = (int *)v73;
                v70 = v76;
              }
              while (v76 <= (uint64_t)((unint64_t)(v69 - 2) >> 1));
              v80 = v104 - 1;
              if (v73 == v104 - 1)
              {
                v81 = v104 - 1;
                *v73 = v101;
              }
              else
              {
                *v73 = *v80;
                v81 = v104 - 1;
                *v80 = v101;
                v82 = (char *)v73 - (char *)v105 + 8;
                if (v82 >= 9)
                {
                  v83 = (((unint64_t)v82 >> 3) - 2) >> 1;
                  v84 = &v105[2 * v83];
                  v85 = *(_QWORD *)v84;
                  v86 = *v73;
                  v87 = _LSScoreCPUType(*(_QWORD *)v84);
                  result = _LSScoreCPUType(v86);
                  if (v87 < result)
                  {
                    v88 = result;
                    do
                    {
                      v89 = (uint64_t *)v84;
                      *v73 = v85;
                      if (!v83)
                        break;
                      v83 = (v83 - 1) >> 1;
                      v84 = &v105[2 * v83];
                      v85 = *(_QWORD *)v84;
                      result = _LSScoreCPUType(*(_QWORD *)v84);
                      v73 = v89;
                    }
                    while (result < v88);
                    *v89 = v86;
                  }
                }
              }
              v90 = v69-- <= 2;
              a2 = v81;
            }
            while (!v90);
          }
          return result;
        }
        v10 = &v7[v9 >> 1];
        if ((unint64_t)v8 < 0x401)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,_LSBundleCopyArchitectures_Common(LSBundleData const*,NSArray<NSString *> *)::$_0 &,LSSliceData *>(&v7[v9 >> 1], v7, v99);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,_LSBundleCopyArchitectures_Common(LSBundleData const*,NSArray<NSString *> *)::$_0 &,LSSliceData *>(v7, &v7[v9 >> 1], v99);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,_LSBundleCopyArchitectures_Common(LSBundleData const*,NSArray<NSString *> *)::$_0 &,LSSliceData *>(v7 + 1, v10 - 1, a2 - 2);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,_LSBundleCopyArchitectures_Common(LSBundleData const*,NSArray<NSString *> *)::$_0 &,LSSliceData *>(v7 + 2, &v7[(v9 >> 1) + 1], a2 - 3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,_LSBundleCopyArchitectures_Common(LSBundleData const*,NSArray<NSString *> *)::$_0 &,LSSliceData *>(v10 - 1, &v7[v9 >> 1], &v7[(v9 >> 1) + 1]);
          v11 = *v7;
          *v7 = *v10;
          *v10 = v11;
        }
        --a3;
        v12 = *v7;
        if ((a4 & 1) == 0)
        {
          v14 = _LSScoreCPUType(*((_DWORD *)v7 - 2));
          v13 = _LSScoreCPUType(v12);
          if (v14 < v13)
            goto LABEL_12;
          result = _LSScoreCPUType(*(_DWORD *)v99);
          if (v13 >= result)
          {
            v29 = (int *)(v7 + 1);
            do
            {
              v6 = v29;
              if (v29 >= (int *)a2)
                break;
              v29 += 2;
              result = _LSScoreCPUType(*v6);
            }
            while (v13 >= result);
          }
          else
          {
            v6 = (int *)v7;
            do
            {
              v28 = v6[2];
              v6 += 2;
              result = _LSScoreCPUType(v28);
            }
            while (v13 >= result);
          }
          v30 = (int *)a2;
          if (v6 < (int *)a2)
          {
            v30 = (int *)a2;
            do
            {
              v31 = *(v30 - 2);
              v30 -= 2;
              result = _LSScoreCPUType(v31);
            }
            while (v13 < result);
          }
          if (v6 < v30)
          {
            v32 = *(_QWORD *)v6;
            v33 = *(_QWORD *)v30;
            do
            {
              *(_QWORD *)v6 = v33;
              *(_QWORD *)v30 = v32;
              do
              {
                v34 = *((_QWORD *)v6 + 1);
                v6 += 2;
                v32 = v34;
              }
              while (v13 >= _LSScoreCPUType(v34));
              do
              {
                v35 = *((_QWORD *)v30 - 1);
                v30 -= 2;
                v33 = v35;
                result = _LSScoreCPUType(v35);
              }
              while (v13 < result);
            }
            while (v6 < v30);
          }
          v36 = (uint64_t *)(v6 - 2);
          if (v6 - 2 != (int *)v7)
            *v7 = *v36;
          a4 = 0;
          *v36 = v12;
          continue;
        }
        v13 = _LSScoreCPUType(*v7);
LABEL_12:
        v15 = 0;
        do
          v16 = v7[++v15];
        while (_LSScoreCPUType(v16) < v13);
        v17 = &v7[v15];
        v18 = a2;
        if (v15 == 1)
        {
          v18 = a2;
          do
          {
            if (v17 >= v18)
              break;
            v20 = *((_DWORD *)v18-- - 2);
          }
          while (_LSScoreCPUType(v20) >= v13);
        }
        else
        {
          do
            v19 = *((_DWORD *)v18-- - 2);
          while (_LSScoreCPUType(v19) >= v13);
        }
        if (v17 >= v18)
        {
          v26 = v17 - 1;
        }
        else
        {
          v21 = *v18;
          v22 = &v7[v15];
          v23 = v18;
          do
          {
            *v22 = v21;
            *v23 = v16;
            do
            {
              v24 = v22[1];
              ++v22;
              v16 = v24;
            }
            while (_LSScoreCPUType(v24) < v13);
            do
            {
              v25 = *--v23;
              v21 = v25;
            }
            while (_LSScoreCPUType(v25) >= v13);
          }
          while (v22 < v23);
          v26 = v22 - 1;
          v7 = (uint64_t *)v105;
        }
        if (v26 != v7)
          *v7 = *v26;
        *v26 = v12;
        if (v17 < v18)
        {
LABEL_33:
          result = std::__introsort<std::_ClassicAlgPolicy,_LSBundleCopyArchitectures_Common(LSBundleData const*,NSArray<NSString *> *)::$_0 &,LSSliceData *,false>(v7, v26, a3, a4 & 1);
          a4 = 0;
          v6 = (int *)(v26 + 1);
          continue;
        }
        v27 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,_LSBundleCopyArchitectures_Common(LSBundleData const*,NSArray<NSString *> *)::$_0 &,LSSliceData *>(v7, v26);
        v6 = (int *)(v26 + 1);
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,_LSBundleCopyArchitectures_Common(LSBundleData const*,NSArray<NSString *> *)::$_0 &,LSSliceData *>(v26 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v27)
            continue;
          goto LABEL_33;
        }
        a2 = v26;
        if (!v27)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,_LSBundleCopyArchitectures_Common(LSBundleData const*,NSArray<NSString *> *)::$_0 &,LSSliceData *,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;

  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,_LSBundleCopyArchitectures_Common(LSBundleData const*,NSArray<NSString *> *)::$_0 &,LSSliceData *>(a1, a2, a3, a4);
  v10 = *a5;
  v11 = *a4;
  v12 = _LSScoreCPUType(*a5);
  result = _LSScoreCPUType(v11);
  if (v12 < result)
  {
    *a4 = v10;
    *a5 = v11;
    v14 = *a4;
    v15 = *a3;
    v16 = _LSScoreCPUType(*a4);
    result = _LSScoreCPUType(v15);
    if (v16 < result)
    {
      *a3 = v14;
      *a4 = v15;
      v17 = *a3;
      v18 = *a2;
      v19 = _LSScoreCPUType(*a3);
      result = _LSScoreCPUType(v18);
      if (v19 < result)
      {
        *a2 = v17;
        *a3 = v18;
        v20 = *a2;
        v21 = *a1;
        v22 = _LSScoreCPUType(*a2);
        result = _LSScoreCPUType(v21);
        if (v22 < result)
        {
          *a1 = v20;
          *a2 = v21;
        }
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,_LSBundleCopyArchitectures_Common(LSBundleData const*,NSArray<NSString *> *)::$_0 &,LSSliceData *>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;

  v6 = *a2;
  v7 = *a1;
  v8 = _LSScoreCPUType(*a2);
  v9 = _LSScoreCPUType(v7);
  v10 = *a3;
  result = _LSScoreCPUType(*a3);
  if (v8 >= v9)
  {
    if (result < v8)
    {
      *a2 = v10;
      *a3 = v6;
      v12 = *a2;
      v13 = *a1;
      v14 = _LSScoreCPUType(*a2);
      result = _LSScoreCPUType(v13);
      if (v14 < result)
      {
        *a1 = v12;
        *a2 = v13;
      }
    }
  }
  else
  {
    if (result >= v8)
    {
      *a1 = v6;
      *a2 = v7;
      v15 = *a3;
      result = _LSScoreCPUType(*a3);
      if (result >= v9)
        return result;
      *a2 = v15;
    }
    else
    {
      *a1 = v10;
    }
    *a3 = v7;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,_LSBundleCopyArchitectures_Common(LSBundleData const*,NSArray<NSString *> *)::$_0 &,LSSliceData *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t *v19;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      v8 = _LSScoreCPUType(v6);
      if (v8 < _LSScoreCPUType(v7))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,_LSBundleCopyArchitectures_Common(LSBundleData const*,NSArray<NSString *> *)::$_0 &,LSSliceData *>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,_LSBundleCopyArchitectures_Common(LSBundleData const*,NSArray<NSString *> *)::$_0 &,LSSliceData *>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,_LSBundleCopyArchitectures_Common(LSBundleData const*,NSArray<NSString *> *)::$_0 &,LSSliceData *,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v9 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,_LSBundleCopyArchitectures_Common(LSBundleData const*,NSArray<NSString *> *)::$_0 &,LSSliceData *>(a1, a1 + 1, a1 + 2);
      v10 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v11 = 0;
      v12 = 24;
      break;
  }
  while (1)
  {
    v13 = *v10;
    v14 = *v9;
    v15 = _LSScoreCPUType(*v10);
    if (v15 < _LSScoreCPUType(v14))
    {
      v16 = v12;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v16) = v14;
        v17 = v16 - 8;
        if (v16 == 8)
          break;
        v14 = *(uint64_t *)((char *)a1 + v16 - 16);
        v18 = _LSScoreCPUType(v14);
        v16 = v17;
        if (v15 >= v18)
        {
          v19 = (uint64_t *)((char *)a1 + v17);
          goto LABEL_12;
        }
      }
      v19 = a1;
LABEL_12:
      *v19 = v13;
      if (++v11 == 8)
        return v10 + 1 == a2;
    }
    v9 = v10;
    v12 += 8;
    if (++v10 == a2)
      return 1;
  }
}

uint64_t _LSScoreCPUType(int a1)
{
  int v1;
  int v2;
  unsigned int v3;
  unsigned int v4;

  if (a1 == 16777228)
    v1 = 1;
  else
    v1 = -1;
  if (a1 == 16777234)
    v2 = 4;
  else
    v2 = v1;
  if (a1 == 16777223)
    v3 = 2;
  else
    v3 = v2;
  if (a1 == 18)
    v4 = 5;
  else
    v4 = -1;
  if (a1 == 12)
    v4 = 6;
  if (a1 == 7)
    v4 = 3;
  if (a1 <= 16777222)
    return v4;
  else
    return v3;
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,_LSBundleCopyArchitectures_Common(LSBundleData const*,NSArray<NSString *> *)::$_0 &,LSSliceData *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,_LSBundleCopyArchitectures_Common(LSBundleData const*,NSArray<NSString *> *)::$_0 &,LSSliceData *>(a1, a2, a3);
  v8 = *a4;
  v9 = *a3;
  v10 = _LSScoreCPUType(*a4);
  result = _LSScoreCPUType(v9);
  if (v10 < result)
  {
    *a3 = v8;
    *a4 = v9;
    v12 = *a3;
    v13 = *a2;
    v14 = _LSScoreCPUType(*a3);
    result = _LSScoreCPUType(v13);
    if (v14 < result)
    {
      *a2 = v12;
      *a3 = v13;
      v15 = *a2;
      v16 = *a1;
      v17 = _LSScoreCPUType(*a2);
      result = _LSScoreCPUType(v16);
      if (v17 < result)
      {
        *a1 = v15;
        *a2 = v16;
      }
    }
  }
  return result;
}

uint64_t ___ZN14LaunchServices7BundlesL7displayEP9LSContextjjPNS_10DumpWriterE_block_invoke(uint64_t a1)
{
  return CSStore2::AttributedStringWriter::format(*(CSStore2::AttributedStringWriter **)(a1 + 40), 0, CFSTR("Bundle node not found on disk: %@"), *(_QWORD *)(a1 + 32));
}

void ___ZN14LaunchServices7BundlesL7displayEP9LSContextjjPNS_10DumpWriterE_block_invoke_2(uint64_t a1)
{
  void *v1;
  id v2;

  v1 = *(void **)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "addObject:");

}

void sub_18292E320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN14LaunchServices7BundlesL7displayEP9LSContextjjPNS_10DumpWriterE_block_invoke_3(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSString *v4;

  v4 = (NSString *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("localizedNames#%@"), a3);
  CSStore2::AttributedStringWriter::childUnit(*(CSStore2::AttributedStringWriter **)(a1 + 32), v4);

}

void sub_18292E3BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN14LaunchServices7BundlesL7displayEP9LSContextjjPNS_10DumpWriterE_block_invoke_4(uint64_t a1)
{
  CSStore2::AttributedStringWriter *v1;
  NSNumber *v2;

  v1 = *(CSStore2::AttributedStringWriter **)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedChar:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 509));
  v2 = (NSNumber *)objc_claimAutoreleasedReturnValue();
  CSStore2::AttributedStringWriter::number(v1, CFSTR("retries"), v2);

}

void sub_18292E424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN14LaunchServices7BundlesL7displayEP9LSContextjjPNS_10DumpWriterE_block_invoke_5(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void *v3;
  id v4;

  v3 = *(void **)(a1 + 32);
  _LSGetDescriptionForPersonaType(a3);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "addObject:");

}

void sub_18292E47C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t ___ZN14LaunchServices7BundlesL7displayEP9LSContextjjPNS_10DumpWriterE_block_invoke_6(uint64_t a1)
{
  return CSStore2::AttributedStringWriter::childUnit(*(CSStore2::AttributedStringWriter **)(a1 + 32), CFSTR("supportedGameController"));
}

void ___ZN14LaunchServices7BundlesL7displayEP9LSContextjjPNS_10DumpWriterE_block_invoke_7(uint64_t a1, uint64_t a2, int a3)
{
  id v4;

  if (_LSGetPlugin(**(_QWORD **)(a1 + 40), a3))
  {
    v4 = (id)_CSStringCopyCFString();
    if (v4)
      objc_msgSend(*(id *)(a1 + 32), "addObject:", v4);

  }
}

void sub_18292E540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t ___ZN14LaunchServices7BundlesL7displayEP9LSContextjjPNS_10DumpWriterE_block_invoke_8(uint64_t a1)
{
  return CSStore2::AttributedStringWriter::childUnit(*(CSStore2::AttributedStringWriter **)(a1 + 32));
}

uint64_t ___ZN14LaunchServices7BundlesL7displayEP9LSContextjjPNS_10DumpWriterE_block_invoke_9(uint64_t a1)
{
  uint64_t result;

  result = _LSClaimGet();
  if (result)
    return CSStore2::AttributedStringWriter::childUnit(*(CSStore2::AttributedStringWriter **)(a1 + 40));
  return result;
}

uint64_t OUTLINED_FUNCTION_0_2(uint64_t result, unsigned int a2, uint64_t a3, float a4)
{
  *(float *)a3 = a4;
  *(_QWORD *)(a3 + 4) = result;
  *(_WORD *)(a3 + 12) = 2048;
  *(_QWORD *)(a3 + 14) = a2;
  return result;
}

void OUTLINED_FUNCTION_1_1(void *a1@<X0>, const char *a2@<X3>, uint8_t *a3@<X4>, NSObject *a4@<X8>)
{
  _os_log_debug_impl(a1, a4, OS_LOG_TYPE_DEBUG, a2, a3, 0x16u);
}

void sub_18292F068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_18292FB78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18292FC20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18292FDBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18292FE98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18292FF30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18293002C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void yieldAppsMatchingSearch(void *a1, void *a2)
{
  id v3;
  id v4;
  _LSDServiceDomain *v5;
  void *v6;
  id v7;
  int v8;
  void *v9;
  id v10;
  _LSDServiceDomain *v11;
  uint64_t v12;
  id v13;
  id v14;
  _QWORD v15[4];
  id v16;
  id v17;
  void *v18;
  void **v19;
  id v20;
  char v21;
  id v22;

  v3 = a1;
  v4 = a2;
  v22 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  +[_LSDServiceDomain defaultServiceDomain]();
  v5 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)&v19, v5, 0);

  if (v6)
  {
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = ___ZL23yieldAppsMatchingSearchU13block_pointerFbP14_LSQueryResultP7NSErrorEU13block_pointerFbP11_LSDatabasejPK12LSBundleDataE_block_invoke;
    v15[3] = &unk_1E1041EA0;
    v16 = v4;
    v18 = v6;
    v7 = v3;
    v17 = v7;
    v8 = _LSEnumerateViableBundlesOfClass(v6, 2, v15);
    if (v8)
    {
      _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], v8, (uint64_t)"yieldAppsMatchingSearch", 659, 0);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      (*((void (**)(id, _QWORD, void *))v7 + 2))(v7, 0, v9);

    }
    v10 = v16;
  }
  else
  {
    +[_LSDServiceDomain defaultServiceDomain]();
    v11 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
    v12 = LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)&v19, v11, 0);

    if (v12)
      v10 = 0;
    else
      v10 = v22;
    (*((void (**)(id, _QWORD, id))v3 + 2))(v3, 0, v10);
  }

  if (v19 && v21)
    _LSContextDestroy(v19);
  v13 = v20;
  v19 = 0;
  v20 = 0;

  v21 = 0;
  v14 = v22;
  v22 = 0;

}

void sub_182930220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  void *v10;
  void *v11;
  va_list va;

  va_start(va, a9);

  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)va);
  _Unwind_Resume(a1);
}

void sub_1829302F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1829303D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1829304B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18293054C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_182930640(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182930754(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_182930858(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182930910(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1829309A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_182930C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;
  void *v11;

  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a9);
  _Unwind_Resume(a1);
}

void sub_182930D90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_182930ED0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_182930F84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18293101C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1829310E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___ZL23yieldAppsMatchingSearchU13block_pointerFbP14_LSQueryResultP7NSErrorEU13block_pointerFbP11_LSDatabasejPK12LSBundleDataE_block_invoke(_QWORD *a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  void *v8;
  void *v9;

  v8 = (void *)MEMORY[0x186DAE7A0]();
  if (*(_DWORD *)(a3 + 12) && (*(unsigned int (**)(void))(a1[4] + 16))())
  {
    +[LSApplicationProxy applicationProxyWithBundleUnitID:withContext:](LSApplicationProxy, "applicationProxyWithBundleUnitID:withContext:", a2, a1[6]);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (v9)
      *a4 = (*(uint64_t (**)(void))(a1[5] + 16))() ^ 1;

  }
  objc_autoreleasePoolPop(v8);
}

void sub_1829311C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18293150C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1829315D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1829316B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1829317C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182931888(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_182931914(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_182931994(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_182931A9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182931BB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182931C84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182931CE8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182932124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  void *v27;

  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a27);
  _Unwind_Resume(a1);
}

void sub_1829324C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

void sub_1829327D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_182932838(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_1_2(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_fault_impl(a1, log, OS_LOG_TYPE_FAULT, a4, (uint8_t *)va, 0x16u);
}

uint64_t OUTLINED_FUNCTION_4_2()
{
  return NSRequestConcreteImplementation();
}

void sub_182932BE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_182932EF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_182933128(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_182933BBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_182933C70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_182933D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_182933E64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_182933F9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_182934008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_182934370(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

BOOL _LSIconDictionarySupportsAlternateIcons(NSDictionary *a1)
{
  void *v2;
  void *v3;
  _BOOL8 v4;

  v2 = (void *)MEMORY[0x186DAE7A0]();
  -[NSDictionary objectForKey:](a1, "objectForKey:", CFSTR("CFBundleAlternateIcons"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (_NSIsNSArray() & 1) != 0 || _NSIsNSDictionary();

  objc_autoreleasePoolPop(v2);
  return v4;
}

void sub_182934490(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18293455C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_182934690(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1829348C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_182934ADC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1829367E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17)
{
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_182936CB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_182936D68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_182937BF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_182937F60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1829382D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_18293A21C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  void *v24;

  _Unwind_Resume(a1);
}

void std::vector<unsigned int>::reserve(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  std::__compressed_pair<unsigned int *> *p_end_cap;
  unsigned int *value;
  int64_t v5;
  char *v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int *v9;
  std::vector<unsigned int>::pointer begin;
  unsigned int *end;
  unsigned int *v12;
  unsigned int v13;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  if (__n > value - this->__begin_)
  {
    if (__n >> 62)
      abort();
    v5 = (char *)this->__end_ - (char *)this->__begin_;
    v6 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>((uint64_t)p_end_cap, __n);
    v7 = (unsigned int *)&v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    v9 = (unsigned int *)&v6[4 * v8];
    begin = this->__begin_;
    end = this->__end_;
    v12 = v7;
    if (end != this->__begin_)
    {
      v12 = v7;
      do
      {
        v13 = *--end;
        *--v12 = v13;
      }
      while (end != begin);
    }
    this->__begin_ = v12;
    this->__end_ = v7;
    this->__end_cap_.__value_ = v9;
    if (begin)
      operator delete(begin);
  }
}

void sub_18293A568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_18293A658(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18293ADDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{

  _Unwind_Resume(a1);
}

Class initEXEnumerator(void)
{
  Class result;

  if (!ExtensionFoundationLibrary(void)::frameworkLibrary)
    ExtensionFoundationLibrary(void)::frameworkLibrary = (uint64_t)dlopen("/System/Library/Frameworks/ExtensionFoundation.framework/ExtensionFoundation", 2);
  result = objc_getClass("EXEnumerator");
  classEXEnumerator = (uint64_t)result;
  getEXEnumeratorClass = (uint64_t (*)(void))EXEnumeratorFunction;
  return result;
}

{
  Class result;

  if (!ExtensionFoundationLibrary(void)::frameworkLibrary)
    ExtensionFoundationLibrary(void)::frameworkLibrary = (uint64_t)dlopen("/System/Library/Frameworks/ExtensionFoundation.framework/ExtensionFoundation", 2);
  result = objc_getClass("EXEnumerator");
  classEXEnumerator = (uint64_t)result;
  getEXEnumeratorClass = (uint64_t (*)(void))EXEnumeratorFunction;
  return result;
}

id EXEnumeratorFunction(void)
{
  return (id)classEXEnumerator;
}

{
  return (id)classEXEnumerator;
}

void init_ISInvalidateCacheEntriesForBundleIdentifier(NSString *a1)
{
  void *v1;
  NSString *v2;

  v2 = a1;
  v1 = (void *)IconServicesLibrary(void)::frameworkLibrary;
  if (!IconServicesLibrary(void)::frameworkLibrary)
  {
    v1 = dlopen("/System/Library/PrivateFrameworks/IconServices.framework/IconServices", 2);
    IconServicesLibrary(void)::frameworkLibrary = (uint64_t)v1;
  }
  softLink_ISInvalidateCacheEntriesForBundleIdentifier = (uint64_t (*)(NSString *))dlsym(v1, "_ISInvalidateCacheEntriesForBundleIdentifier");
  softLink_ISInvalidateCacheEntriesForBundleIdentifier(v2);

}

{
  void *v1;
  NSString *v2;

  v2 = a1;
  v1 = (void *)IconServicesLibrary(void)::frameworkLibrary;
  if (!IconServicesLibrary(void)::frameworkLibrary)
  {
    v1 = dlopen("/System/Library/PrivateFrameworks/IconServices.framework/IconServices", 2);
    IconServicesLibrary(void)::frameworkLibrary = (uint64_t)v1;
  }
  softLink_ISInvalidateCacheEntriesForBundleIdentifier = (uint64_t (*)(NSString *))dlsym(v1, "_ISInvalidateCacheEntriesForBundleIdentifier");
  softLink_ISInvalidateCacheEntriesForBundleIdentifier(v2);

}

{
  void *v1;
  NSString *v2;

  v2 = a1;
  v1 = (void *)IconServicesLibrary(void)::frameworkLibrary;
  if (!IconServicesLibrary(void)::frameworkLibrary)
  {
    v1 = dlopen("/System/Library/PrivateFrameworks/IconServices.framework/IconServices", 2);
    IconServicesLibrary(void)::frameworkLibrary = (uint64_t)v1;
  }
  softLink_ISInvalidateCacheEntriesForBundleIdentifier = (uint64_t (*)(NSString *))dlsym(v1, "_ISInvalidateCacheEntriesForBundleIdentifier");
  softLink_ISInvalidateCacheEntriesForBundleIdentifier(v2);

}

void sub_18293BCB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18293BD78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18293BFE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_18293C098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)LSBundleRecordUpdater;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void sub_18293C6F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, void *a15, id a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_18293C90C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_18293C9B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18293CDD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  void *v23;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_18293CF3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_18293D014(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18293D86C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{

  _Unwind_Resume(a1);
}

const __CFSet *_LSBundleActivateBindingsForUserActivityTypes(void *a1, int a2, uint64_t a3)
{
  id v5;
  void *v6;
  const __CFSet *v7;
  id v9;
  int v10;

  v5 = a1;
  v6 = v5;
  v7 = (const __CFSet *)4294967246;
  if (v5)
  {
    if (a2)
    {
      if (a3)
      {
        v7 = _LSBundleCopyUserActivityTypes(v5, a2, a3);
        if (v7)
        {
          v9 = v6;
          v10 = a2;
          CFSetApplyFunction(v7, (CFSetApplierFunction)_LSBundleActivateBindingForUserActivityType, &v9);
          CFRelease(v7);

          v7 = 0;
        }
      }
    }
  }

  return v7;
}

void sub_18293DEA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

CFSetRef _LSBundleCopyUserActivityTypes(void *a1, int a2, uint64_t a3)
{
  id v5;
  CFSetRef Copy;
  const __CFAllocator *v7;
  const __CFSet *Mutable;
  id v10;

  v5 = a1;
  Copy = 0;
  if (v5 && a2 && a3)
  {
    if (*(_DWORD *)(a3 + 488)
      && (v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00],
          (Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B3B0])) != 0))
    {
      v10 = v5;
      _CSArrayEnumerateAllValues();
      Copy = CFSetCreateCopy(v7, Mutable);
      CFRelease(Mutable);

    }
    else
    {
      Copy = 0;
    }
  }

  return Copy;
}

void sub_18293DFC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

const __CFString *_LSBundleActivateBindingForUserActivityType(const __CFString *result, void *a2)
{
  if (result && a2)
  {
    result = (const __CFString *)_LSDatabaseCreateStringForCFString(*(void **)a2, result, 0);
    if ((_DWORD)result)
    {
      _LSBindableActivate(*(void **)a2, *((_DWORD *)a2 + 2));
      return (const __CFString *)_CSStringRelease();
    }
  }
  return result;
}

const __CFSet *_LSBundleDeactivateBindingsForUserActivityTypes(void *a1, int a2, uint64_t a3)
{
  id v5;
  void *v6;
  const __CFSet *v7;
  id v9;
  int v10;

  v5 = a1;
  v6 = v5;
  v7 = (const __CFSet *)4294967246;
  if (v5)
  {
    if (a2)
    {
      if (a3)
      {
        v7 = _LSBundleCopyUserActivityTypes(v5, a2, a3);
        if (v7)
        {
          v9 = v6;
          v10 = a2;
          CFSetApplyFunction(v7, (CFSetApplierFunction)_LSBundleDeactivateBindingForUserActivityType, &v9);
          CFRelease(v7);

          v7 = 0;
        }
      }
    }
  }

  return v7;
}

void sub_18293E100(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

const __CFString *_LSBundleDeactivateBindingForUserActivityType(const __CFString *result, void *a2)
{
  if (result && a2)
  {
    result = (const __CFString *)_LSDatabaseGetStringForCFString(*(void **)a2, result, 0);
    if ((_DWORD)result)
      return (const __CFString *)_LSBindableDeactivate(*(void **)a2, *((_DWORD *)a2 + 2));
  }
  return result;
}

CFSetRef _LSBundleCopyUserActivityDomainNames(uint64_t a1, int a2, uint64_t a3)
{
  CFSetRef Copy;
  uint64_t v4;
  const void *v5;
  const __CFArray *v6;
  const __CFArray *v7;
  const __CFAllocator *v8;
  CFIndex Count;
  CFMutableSetRef Mutable;
  __CFSet *v11;
  CFIndex v12;
  uint64_t v13;
  const void *ValueAtIndex;

  Copy = 0;
  if (a1 && a2 && a3)
  {
    v4 = _CSStringCopyCFString();
    if (v4)
    {
      v5 = (const void *)v4;
      v6 = (const __CFArray *)_LSCopyUserActivityDomainNamesForBundleID(v4);
      if (v6)
      {
        v7 = v6;
        v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        Count = CFArrayGetCount(v6);
        Mutable = CFSetCreateMutable(v8, Count, MEMORY[0x1E0C9B3B0]);
        if (Mutable)
        {
          v11 = Mutable;
          v12 = CFArrayGetCount(v7);
          if (v12 >= 1)
          {
            v13 = v12 + 1;
            do
            {
              ValueAtIndex = CFArrayGetValueAtIndex(v7, v13 - 2);
              CFSetAddValue(v11, ValueAtIndex);
              --v13;
            }
            while (v13 > 1);
          }
          Copy = CFSetCreateCopy(v8, v11);
          CFRelease(v11);
        }
        else
        {
          Copy = 0;
        }
        CFRelease(v7);
      }
      else
      {
        Copy = 0;
      }
      CFRelease(v5);
    }
    else
    {
      return 0;
    }
  }
  return Copy;
}

void sub_18293E3C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18293E484(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t _LSGetSchemeType(NSString *a1)
{
  NSString *v1;
  _LSDServiceDomain *v2;
  LSContext *v3;
  NSString *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void **v15;
  id v16;
  char v17;
  id v18;
  uint64_t v19[3];
  void **v20;
  _BYTE v21[168];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (!v1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_LSURLSchemeType _LSGetSchemeType(NSString *__strong)");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "handleFailureInFunction:file:lineNumber:description:", v12, CFSTR("LSCanOpenURLManager.mm"), 734, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("scheme != nil"));

  }
  v18 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  +[_LSDServiceDomain defaultServiceDomain]();
  v2 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
  v3 = (LSContext *)LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)&v15, v2, 0);

  if (v3)
  {
    v4 = v1;
    if (!v1)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_LSURLSchemeType _LSGetSchemeType(LSContext *, NSString *__strong)");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "handleFailureInFunction:file:lineNumber:description:", v14, CFSTR("LSCanOpenURLManager.mm"), 708, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("scheme != nil"));

    }
    +[_LSCanOpenURLManager bindingEvaluatorForScheme:](_LSCanOpenURLManager, "bindingEvaluatorForScheme:", v4);
    LaunchServices::BindingEvaluator::evaluateBindings((LaunchServices::BindingEvaluator *)v21, v3, 0, v19);
    v5 = v19[0];
    v6 = -1;
    while (v5 != v19[1])
    {
      v7 = *(_QWORD *)(v5 + 24);
      if (v7)
      {
        if ((*(_BYTE *)(v7 + 8) & 0x80) != 0)
        {
          v6 = 1;
          break;
        }
        v6 = 0;
      }
      v5 += 48;
    }
    v20 = (void **)v19;
    std::vector<LSBinding>::__destroy_vector::operator()[abi:nn180100](&v20);
    LaunchServices::BindingEvaluator::~BindingEvaluator((LaunchServices::BindingEvaluator *)v21);

  }
  else
  {
    v6 = -1;
  }
  if (v15 && v17)
    _LSContextDestroy(v15);
  v8 = v16;
  v15 = 0;
  v16 = 0;

  v17 = 0;
  v9 = v18;
  v18 = 0;

  return v6;
}

void sub_18293E6F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  va_list va;

  va_start(va, a3);

  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)va);
  _Unwind_Resume(a1);
}

void sub_18293E864(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18293E904(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18293EB84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_18293ED48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18293F258(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18293F334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18293F418(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18293F4A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18293F580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_18293FB94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, char *a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  void *v34;
  void *v35;
  void *v36;

  a20 = &a24;
  std::vector<LSBinding>::__destroy_vector::operator()[abi:nn180100]((void ***)&a20);

  LaunchServices::BindingEvaluator::~BindingEvaluator((LaunchServices::BindingEvaluator *)&a34);
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a27);

  _Unwind_Resume(a1);
}

void sub_18293FD44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18293FDFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t _LSNumericHandlerRankFromHandlerRankString(const __CFString *a1)
{
  uint64_t v2;

  if (!a1 || CFStringCompare(a1, CFSTR("None"), 1uLL) == kCFCompareEqualTo)
    return 0;
  v2 = 1;
  if (CFStringCompare(a1, CFSTR("Alternate"), 1uLL))
  {
    if (CFStringCompare(a1, CFSTR("Default"), 1uLL))
    {
      if (CFStringCompare(a1, CFSTR("Owner"), 1uLL))
        return 0;
      else
        return 3;
    }
    else
    {
      return 2;
    }
  }
  return v2;
}

CFSetRef _LSCopyAllHandlerRankStrings()
{
  _OWORD v1[2];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  v1[0] = xmmword_1E1042338;
  v1[1] = *(_OWORD *)off_1E1042348;
  return CFSetCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)v1, 4, MEMORY[0x1E0C9B3B0]);
}

BOOL _LSClaimFlagsAreWildcard(__int16 a1)
{
  return (a1 & 0x410) != 0;
}

uint64_t _LSClaimAdd(void *a1, uint64_t a2, _DWORD *a3)
{
  _LSDatabase *v5;
  _LSDatabase *v6;
  uint64_t v7;
  int v8;
  void *v9;
  int v10;

  v5 = a1;
  v6 = v5;
  v7 = 4294967246;
  if (v5 && a2 && v5->store)
  {
    v8 = CSStoreAllocUnitWithData();
    if (v8 && CSStoreGetUnit())
    {
      CSBindableKeyMapNextKey();
      v9 = (void *)MEMORY[0x186DAE7A0]();
      if (_CSStoreWriteToUnit())
        v7 = 0;
      else
        v7 = _LSGetOSStatusFromNSError(0);

      objc_autoreleasePoolPop(v9);
      if (!(_DWORD)v7)
      {
        CSMapSetValue();
        v10 = *(_DWORD *)(a2 + 8);
        if ((v10 & 0x20) != 0)
        {
          -[_LSDatabase setDocumentTypesChanged:](v6, 1);
          v10 = *(_DWORD *)(a2 + 8);
        }
        if ((v10 & 0x40) != 0)
          -[_LSDatabase setURLTypesChanged:](v6, 1);
        v7 = 0;
        if (a3)
          *a3 = v8;
      }
    }
    else
    {
      v7 = 4294957803;
    }
  }

  return v7;
}

void sub_18294011C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _LSClaimRemove(void *a1)
{
  _LSDatabase *v1;
  _DWORD *Unit;
  int v3;
  uint64_t i;
  uint64_t v5;

  v1 = a1;
  Unit = (_DWORD *)CSStoreGetUnit();
  if (Unit)
  {
    CSMapRemoveValue();
    v3 = Unit[2];
    if ((v3 & 0x20) != 0)
    {
      -[_LSDatabase setDocumentTypesChanged:](v1, 1);
      v3 = Unit[2];
    }
    if ((v3 & 0x40) != 0)
      -[_LSDatabase setURLTypesChanged:](v1, 1);
    LaunchServices::LocalizedString::Remove((LaunchServices::LocalizedString *)v1, (_LSDatabase *)Unit[5]);
    for (i = 0; i != 8 && Unit[i + 7]; ++i)
      _CSStringRelease();
    _CSStringRelease();
    _LSDatabaseDisposeStringArray(v1, Unit[6]);
    if (Unit[17])
    {
      v5 = _LSBindingListDeactivate();
      _LSBindingListDestroy();
    }
    else
    {
      v5 = 0;
    }
    CSStoreFreeUnit();
  }
  else
  {
    v5 = 4294957797;
  }

  return v5;
}

void sub_1829402A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _LSClaimSetGeneration(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;

  result = CSStoreGetUnit();
  if (result)
    *(_DWORD *)(result + 4) = a3;
  return result;
}

void _LSClaimGetVisualizationFunctions(unsigned int *(**a1)(LaunchServices::LocalizedString **this, LSContext *a2)@<X8>)
{
  *a1 = LaunchServices::Claims::getSummary;
  a1[1] = (unsigned int *(*)(LaunchServices::LocalizedString **, LSContext *))LaunchServices::Claims::display;
  a1[2] = (unsigned int *(*)(LaunchServices::LocalizedString **, LSContext *))LaunchServices::Claims::copyBindingForVisualization;
}

unsigned int *LaunchServices::Claims::getSummary(LaunchServices::LocalizedString **this, LSContext *a2)
{
  unsigned int *Unit;

  Unit = (unsigned int *)CSStoreGetUnit();
  if (Unit)
  {
    Unit = (unsigned int *)LaunchServices::LocalizedString::Get(*this, (_LSDatabase *)Unit[5]);
    if (Unit)
    {
      LaunchServices::LocalizedString::localizeUnsafely((uint64_t)Unit, *this, 0);
      Unit = (unsigned int *)objc_claimAutoreleasedReturnValue();
    }
  }
  return Unit;
}

BOOL LaunchServices::Claims::display(uint64_t a1, uint64_t a2, uint64_t a3, CSStore2::AttributedStringWriter *a4)
{
  uint64_t Unit;
  NSString *v7;
  NSString *v8;

  Unit = CSStoreGetUnit();
  if (Unit)
  {
    CSStore2::AttributedStringWriter::childUnit(a4, CFSTR("localizedNames"));
    v7 = (NSString *)_LSCopyHandlerRankStringFromNumericHandlerRank(*(__int16 *)(Unit + 12));
    CSStore2::AttributedStringWriter::string(a4, CFSTR("rank"), v7);
    CSStore2::AttributedStringWriter::link(a4, *(unsigned int *)(*(_QWORD *)a1 + 20), *(unsigned int *)(Unit + 16), 0);
    v8 = (NSString *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::string(a4, CFSTR("bundle"), v8);

    CSStore2::AttributedStringWriter::stringArray(a4, CFSTR("reqCaps"));
    CSStore2::AttributedStringWriter::beginFlags(a4, CFSTR("flags"));
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::endFlags(a4);
    CSStore2::AttributedStringWriter::beginFlags(a4, CFSTR("roles"));
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::endFlags(a4);
    CSStore2::AttributedStringWriter::stringArray(a4, CFSTR("iconFiles"), (const unsigned int *)(Unit + 28));
    CSStore2::AttributedStringWriter::string(a4, CFSTR("iconName"));
    CSStore2::AttributedStringWriter::string(a4, CFSTR("delegate"));
    CSStore2::AttributedStringWriter::childUnit(a4, CFSTR("bindings"));

  }
  return Unit != 0;
}

void sub_1829407DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t LaunchServices::Claims::copyBindingForVisualization(LaunchServices::Claims *this, LSContext *a2)
{
  return 0;
}

void _LSEnumerateAllClaimedTypesOrSchemesForBundleID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;

  v7 = a5;
  if (a1)
  {
    if (a2)
      goto LABEL_3;
LABEL_6:
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _LSEnumerateAllClaimedTypesOrSchemesForBundleID(LSContext * _Nonnull, const LSBundleData * _Nonnull, LSRolesMask, BOOL, void (^__strong _Nonnull)(NSString *__strong, const LSClaimData *))");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", v11, CFSTR("LSClaimedTypes.mm"), 183, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("inBundleData != NULL"));

    if (v7)
      goto LABEL_4;
LABEL_7:
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _LSEnumerateAllClaimedTypesOrSchemesForBundleID(LSContext * _Nonnull, const LSBundleData * _Nonnull, LSRolesMask, BOOL, void (^__strong _Nonnull)(NSString *__strong, const LSClaimData *))");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "handleFailureInFunction:file:lineNumber:description:", v13, CFSTR("LSClaimedTypes.mm"), 184, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("inBlock != nil"));

    goto LABEL_4;
  }
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _LSEnumerateAllClaimedTypesOrSchemesForBundleID(LSContext * _Nonnull, const LSBundleData * _Nonnull, LSRolesMask, BOOL, void (^__strong _Nonnull)(NSString *__strong, const LSClaimData *))");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "handleFailureInFunction:file:lineNumber:description:", v9, CFSTR("LSClaimedTypes.mm"), 182, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("inContext != NULL"));

  if (!a2)
    goto LABEL_6;
LABEL_3:
  if (!v7)
    goto LABEL_7;
LABEL_4:
  v14 = v7;
  _CSArrayEnumerateAllValues();

}

void sub_182940A0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_182940B84(_Unwind_Exception *a1)
{
  id *v1;

  _Unwind_Resume(a1);
}

id _LSGetAllClaimedTypesOrSchemesForBundleID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v8;
  void *v9;
  id v10;
  void *v11;
  _QWORD v13[4];
  id v14;

  v8 = (void *)MEMORY[0x186DAE7A0]();
  objc_msgSend(MEMORY[0x1E0C99E20], "set");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = ___LSGetAllClaimedTypesOrSchemesForBundleID_block_invoke;
  v13[3] = &unk_1E1042400;
  v10 = v9;
  v14 = v10;
  _LSEnumerateAllClaimedTypesOrSchemesForBundleID(a1, a2, a3, a4, v13);
  v11 = (void *)objc_msgSend(v10, "copy");

  objc_autoreleasePoolPop(v8);
  return v11;
}

void sub_182940C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_182940CE8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182940D38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182940DFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182940E90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  LaunchServices::BindingEvaluator::~BindingEvaluator((LaunchServices::BindingEvaluator *)&a9);
  _Unwind_Resume(a1);
}

void sub_182940F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  LaunchServices::BindingEvaluator::~BindingEvaluator((LaunchServices::BindingEvaluator *)&a9);
  _Unwind_Resume(a1);
}

void sub_182940FDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  LaunchServices::BindingEvaluator::~BindingEvaluator((LaunchServices::BindingEvaluator *)&a9);
  _Unwind_Resume(a1);
}

void sub_182941088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  LaunchServices::BindingEvaluator::~BindingEvaluator((LaunchServices::BindingEvaluator *)&a9);
  _Unwind_Resume(a1);
}

void sub_1829414B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1829416F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);

  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)va);
  _Unwind_Resume(a1);
}

void sub_182941928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  va_list va;

  va_start(va, a11);

  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)va);
  _Unwind_Resume(a1);
}

void sub_182941AFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_182941BC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_182941CC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182941D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  LaunchServices::BindingEvaluator::~BindingEvaluator((LaunchServices::BindingEvaluator *)&a9);
  _Unwind_Resume(a1);
}

uint64_t CreateBindingEvaluatorWithConfiguration@<X0>(LSClaimBindingConfiguration *a1@<X0>, LaunchServices::BindingEvaluator *a2@<X8>)
{
  LaunchServices::BindingEvaluator *v4;
  __int16 v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;
  uint64_t result;
  int Options;
  void *__p;
  char *v22;
  char *v23;

  -[LSClaimBindingConfiguration typeIdentifier](a1, "typeIdentifier");
  v4 = (LaunchServices::BindingEvaluator *)objc_claimAutoreleasedReturnValue();
  LaunchServices::BindingEvaluator::CreateWithUTI(v4, 0, a2);

  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v5 = -[LSClaimBindingConfiguration bundleClassMask](a1, "bundleClassMask");
    v6 = 0;
    __p = 0;
    v22 = 0;
    v23 = 0;
    if ((v5 & 4) != 0)
    {
      v7 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>((uint64_t)&v23, 1uLL);
      *(_DWORD *)v7 = 2;
      v6 = v7 + 4;
      __p = v7;
      v23 = &v7[4 * v8];
      v22 = v7 + 4;
    }
    if ((v5 & 0x800) != 0)
    {
      if (v6 >= v23)
      {
        v10 = (char *)__p;
        v11 = (v6 - (_BYTE *)__p) >> 2;
        v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 62)
          abort();
        v13 = v23 - (_BYTE *)__p;
        if ((v23 - (_BYTE *)__p) >> 1 > v12)
          v12 = v13 >> 1;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
          v14 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v14 = v12;
        if (v14)
        {
          v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>((uint64_t)&v23, v14);
          v10 = (char *)__p;
          v6 = v22;
        }
        else
        {
          v15 = 0;
        }
        v16 = &v15[4 * v11];
        v17 = &v15[4 * v14];
        *(_DWORD *)v16 = 11;
        v9 = v16 + 4;
        while (v6 != v10)
        {
          v18 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *((_DWORD *)v16 - 1) = v18;
          v16 -= 4;
        }
        __p = v16;
        v22 = v9;
        v23 = v17;
        if (v10)
          operator delete(v10);
      }
      else
      {
        *(_DWORD *)v6 = 11;
        v9 = v6 + 4;
      }
      v22 = v9;
    }
    LaunchServices::BindingEvaluator::setAllowedBundleClasses((uint64_t)a2, (uint64_t)&__p);
    if (__p)
    {
      v22 = (char *)__p;
      operator delete(__p);
    }
  }
  result = -[LSClaimBindingConfiguration addClaimRecordIfMissing](a1, "addClaimRecordIfMissing");
  if ((_DWORD)result)
  {
    Options = LaunchServices::BindingEvaluator::getOptions(a2);
    return LaunchServices::BindingEvaluator::setOptions((uint64_t)a2, Options | 0x80000u);
  }
  return result;
}

void sub_182941F78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  LaunchServices::BindingEvaluator *v11;

  if (__p)
    operator delete(__p);
  LaunchServices::BindingEvaluator::~BindingEvaluator(v11);
  _Unwind_Resume(a1);
}

void sub_182942040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  LaunchServices::BindingEvaluator::~BindingEvaluator((LaunchServices::BindingEvaluator *)&a9);
  _Unwind_Resume(a1);
}

__CFString *_LSContainerStateGetDescription(int a1)
{
  uint64_t v1;

  v1 = a1 + 1;
  if (v1 < 3)
    return off_1E10425B0[v1];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("? (%llu)"), a1);
  return (__CFString *)(id)objc_claimAutoreleasedReturnValue();
}

void _LSContainerSetMounted(void *a1, unsigned int a2, uint64_t a3)
{
  id v5;
  uint64_t Unit;
  void *v7;
  NSObject *v8;
  uint8_t buf[4];
  uint64_t v10;
  __int16 v11;
  void *v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  Unit = CSStoreGetUnit();
  if (Unit)
  {
    _LSAliasGetPath(v5, *(_DWORD *)(Unit + 12));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    _LSDefaultLog();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134218499;
      v10 = a2;
      v11 = 2113;
      v12 = v7;
      v13 = 2048;
      v14 = a3;
      _os_log_impl(&dword_182882000, v8, OS_LOG_TYPE_INFO, "Updating state of volume %llx %{private}@ to mounted with volume ID %llu", buf, 0x20u);
    }

    _CSStoreWriteToUnit();
  }

}

void sub_182942234(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL _LSContainerFindOrRegisterWithNode(id *a1, void *a2, int a3, _DWORD *a4, uint64_t *a5, id *a6, _QWORD *a7)
{
  id v13;
  void *v14;
  _BOOL4 v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  void (*v20)(uint64_t);
  id v21;
  id *v22;
  uint64_t v23;
  BOOL v24;
  int v25;
  char v26;
  void *v27;
  _BOOL8 v28;
  uint64_t *v30;
  void *v31;
  void *v32;
  __int16 v33;
  id *v34;
  id v35;
  _QWORD v36[7];
  BOOL v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  int v41;
  __int16 v42;
  void *v43;
  id obj;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t (*v51)(uint64_t, uint64_t, unsigned __int16 *, uint64_t, _BYTE *);
  void *v52;
  void (*v53)(uint64_t);
  id v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  __int16 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t (*v62)(uint64_t, uint64_t);
  void (*v63)(uint64_t);
  id v64;
  id v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  __int16 v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD v80[3];

  v80[1] = *MEMORY[0x1E0C80C00];
  v13 = a2;
  v14 = v13;
  v45 = 0;
  v46 = &v45;
  v47 = 0x2020000000;
  v48 = 0;
  if (a1 && v13 && *a1)
  {
    v43 = 0;
    obj = 0;
    v42 = 0;
    v38 = 0;
    v39 = &v38;
    v40 = 0x2020000000;
    v41 = 0;
    v15 = _LSCreateContainerNodesAndFlagsForNode(v13, &obj, &v43, &v42, a7);
    *((_BYTE *)v46 + 24) = v15;
    if (v15)
    {
      v34 = a6;
      v17 = v43;
      v16 = obj;
      v33 = v42;
      v30 = v39;
      v18 = *a1;
      v19 = v16;
      v35 = v17;
      v78 = 0;
      v74 = 0;
      v75 = &v74;
      v76 = 0x2020000000;
      v77 = 0;
      v70 = 0;
      v71 = &v70;
      v72 = 0x2020000000;
      v73 = 0;
      v31 = v18;
      v32 = v19;
      if ((objc_msgSend(v19, "getVolumeIdentifier:error:", &v78, 0) & 1) != 0)
      {
        v59 = MEMORY[0x1E0C809B0];
        v60 = 3221225472;
        v61 = (uint64_t)___ZL33_LSContainerFindWithNodesAndFlagsP11_LSDatabaseP6FSNodeS2_tPjPPK15LSContainerData_block_invoke;
        v62 = (uint64_t (*)(uint64_t, uint64_t))&unk_1E10424F0;
        v69 = v33;
        v68 = v78;
        v20 = (void (*)(uint64_t))v18;
        v63 = v20;
        v21 = v19;
        v64 = v21;
        v65 = v35;
        v66 = &v74;
        v67 = &v70;
        _CSStoreEnumerateUnits();

        v22 = v34;
        v23 = v71[3];
        if (v23)
          goto LABEL_8;
        v49 = MEMORY[0x1E0C809B0];
        v50 = 3221225472;
        v51 = ___ZL33_LSContainerFindWithNodesAndFlagsP11_LSDatabaseP6FSNodeS2_tPjPPK15LSContainerData_block_invoke_2;
        v52 = &unk_1E1042518;
        v58 = v33;
        v53 = v20;
        v55 = &v74;
        v56 = &v70;
        v57 = v78;
        v54 = v21;
        _CSStoreEnumerateUnits();

        v22 = v34;
        v23 = v71[3];
        if (v23)
LABEL_8:
          *((_DWORD *)v30 + 6) = *((_DWORD *)v75 + 6);
      }
      else
      {
        v23 = v71[3];
        v22 = v34;
      }
      v24 = v23 != 0;
      _Block_object_dispose(&v70, 8);
      _Block_object_dispose(&v74, 8);

      *((_BYTE *)v46 + 24) = v24;
      if (v24)
        goto LABEL_17;
      v59 = 0;
      v60 = (uint64_t)&v59;
      v61 = 0x3032000000;
      v62 = __Block_byref_object_copy__13;
      v63 = __Block_byref_object_dispose__13;
      v64 = 0;
      v36[0] = MEMORY[0x1E0C809B0];
      v36[1] = 3221225472;
      v36[2] = ___LSContainerFindOrRegisterWithNode_block_invoke;
      v36[3] = &unk_1E1042450;
      v36[4] = &v38;
      v36[5] = &v45;
      v37 = a7 != 0;
      v36[6] = &v59;
      _LSContainerAddWithNode((uint64_t)a1, v14, 1, v36);
      v25 = *((unsigned __int8 *)v46 + 24);
      if (a7 && !*((_BYTE *)v46 + 24))
      {
        *a7 = objc_retainAutorelease(*(id *)(v60 + 40));
        v25 = *((unsigned __int8 *)v46 + 24);
      }
      if ((a3 & 0x3000000) == 0x2000000 && v25)
      {
        v26 = _LSContextUpdate(a1, 1, a7);
        *((_BYTE *)v46 + 24) = v26;
      }
      _Block_object_dispose(&v59, 8);

      if (*((_BYTE *)v46 + 24))
      {
LABEL_17:
        if (a4)
          *a4 = *((_DWORD *)v39 + 6);
        if (a5)
          *a5 = CSStoreGetUnit();
        if (v22)
          objc_storeStrong(v22, obj);
      }
    }
    _Block_object_dispose(&v38, 8);

  }
  else if (a7)
  {
    v79 = *MEMORY[0x1E0CB2938];
    v80[0] = CFSTR("invalid input parameters");
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v80, &v79, 1);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], -50, (uint64_t)"_LSContainerFindOrRegisterWithNode", 366, v27);
    *a7 = (id)objc_claimAutoreleasedReturnValue();

  }
  v28 = *((_BYTE *)v46 + 24) != 0;
  _Block_object_dispose(&v45, 8);

  return v28;
}

void sub_1829427A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id a29,id a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,id a39,id a40)
{
  void *v40;
  uint64_t v41;

  _Block_object_dispose((const void *)(v41 - 200), 8);
  _Block_object_dispose((const void *)(v41 - 168), 8);

  _Block_object_dispose(&a24, 8);
  _Block_object_dispose(&a31, 8);

  _Unwind_Resume(a1);
}

BOOL _LSCreateContainerNodesAndFlagsForNode(void *a1, void **a2, void **a3, _WORD *a4, _QWORD *a5)
{
  id v9;
  void *v10;
  void *v11;
  _BOOL8 v12;
  void *v13;
  char v14;
  __int16 v15;
  void *v16;
  FSNode *v17;
  void *v18;
  void *v19;
  void *v20;
  __int16 v21;
  void *v22;
  void *v23;
  uint64_t v25;
  _QWORD v26[2];

  v26[1] = *MEMORY[0x1E0C80C00];
  v9 = a1;
  v10 = v9;
  if (v9)
  {
    objc_msgSend(v9, "volumeNodeWithFlags:error:", 0, a5);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = v11 != 0;
    if (v11)
    {
      +[FSNode rootVolumeNode](FSNode, "rootVolumeNode");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = objc_msgSend(v11, "isEqual:", v13);

      if ((v14 & 1) != 0)
      {
        v15 = 18;
      }
      else
      {
        +[FSNode prebootVolumeNode](FSNode, "prebootVolumeNode");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "isEqual:", v18);

        v15 = 16;
      }
      if (objc_msgSend(v11, "isOnDiskImage"))
      {
        if (a3)
        {
          objc_msgSend(v11, "diskImageURLWithFlags:error:", 1, 0);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          v20 = v19;
          if (v19 && objc_msgSend(v19, "isFileURL"))
            v17 = -[FSNode initWithURL:flags:error:]([FSNode alloc], "initWithURL:flags:error:", v20, 0, 0);
          else
            v17 = 0;

        }
        else
        {
          v17 = 0;
        }
        v15 |= 4u;
      }
      else
      {
        v17 = 0;
      }
      v21 = objc_msgSend(v11, "isOnLocalVolume");
      if (a2)
      {
        v22 = *a2;
        *a2 = v11;

        v11 = 0;
      }
      if (a3)
      {
        v23 = *a3;
        *a3 = v17;

        v17 = 0;
      }
      if (a4)
        *a4 = v15 | v21;
    }
    else
    {
      v17 = 0;
    }

  }
  else
  {
    if (a5)
    {
      v25 = *MEMORY[0x1E0CB2938];
      v26[0] = CFSTR("inNode");
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v26, &v25, 1);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], -50, (uint64_t)"_LSCreateContainerNodesAndFlagsForNode", 206, v16);
      *a5 = (id)objc_claimAutoreleasedReturnValue();

    }
    v12 = 0;
  }

  return v12;
}

void sub_182942AD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void _LSContainerAddWithNode(uint64_t a1, void *a2, int a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  void (**v10)(_QWORD, _QWORD);
  uint64_t v11;
  uint64_t v12;
  void *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void (*v19[5])(_QWORD, _QWORD);
  void (*v20[5])(_QWORD, _QWORD);
  _QWORD v21[4];
  id v22;
  id v23;
  uint64_t v24;
  char v25;

  v7 = a2;
  v8 = a4;
  v9 = (void *)MEMORY[0x186DAE7A0]();
  if ((objc_msgSend((id)__LSDefaultsGetSharedInstance(), "isServer") & 1) != 0
    || (objc_msgSend((id)__LSDefaultsGetSharedInstance(), "hasServer") & 1) == 0)
  {
    MEMORY[0x186DAF208]();
    v21[0] = MEMORY[0x1E0C809B0];
    v21[1] = 3221225472;
    v21[2] = ___LSContainerAddWithNode_block_invoke;
    v21[3] = &unk_1E1042478;
    v22 = v7;
    v24 = a1;
    v25 = a3;
    v23 = v8;
    v12 = MEMORY[0x186DAE9BC](v21);
    v13 = (void *)v12;
    if (a3)
    {
      (*(void (**)(uint64_t))(v12 + 16))(v12);
    }
    else
    {
      if (a1)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _LSContainerAddWithNode(LSContext *, FSNode *__strong, Boolean, void (^__strong)(LSContainerID, NSError *__strong))");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "handleFailureInFunction:file:lineNumber:description:", v18, CFSTR("LSContainer.mm"), 617, CFSTR("if asyncing _LSContainerAddWithNode it cannot use a caller's context"));

      }
      _LSServer_GetIOQueue();
      v14 = objc_claimAutoreleasedReturnValue();
      dispatch_async(v14, v13);

    }
    v15 = v22;
  }
  else
  {
    if (a3)
    {
      v20[0] = (void (*)(_QWORD, _QWORD))MEMORY[0x1E0C809B0];
      v20[1] = (void (*)(_QWORD, _QWORD))3221225472;
      v20[2] = (void (*)(_QWORD, _QWORD))___LSContainerAddWithNode_block_invoke_18;
      v20[3] = (void (*)(_QWORD, _QWORD))&unk_1E103FE08;
      v10 = v20;
      v20[4] = (void (*)(_QWORD, _QWORD))v8;
      +[_LSDService synchronousXPCProxyWithErrorHandler:]((uint64_t)_LSDModifyService, v20);
      v11 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v19[0] = (void (*)(_QWORD, _QWORD))MEMORY[0x1E0C809B0];
      v19[1] = (void (*)(_QWORD, _QWORD))3221225472;
      v19[2] = (void (*)(_QWORD, _QWORD))___LSContainerAddWithNode_block_invoke_2;
      v19[3] = (void (*)(_QWORD, _QWORD))&unk_1E103FE08;
      v10 = v19;
      v19[4] = (void (*)(_QWORD, _QWORD))v8;
      +[_LSDService XPCProxyWithErrorHandler:]((uint64_t)_LSDModifyService, v19);
      v11 = objc_claimAutoreleasedReturnValue();
    }
    v15 = (void *)v11;

    objc_msgSend(v7, "URL");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "registerContainerURL:completionHandler:", v16, v8);

  }
  objc_autoreleasePoolPop(v9);

}

void sub_182942D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;

  _Unwind_Resume(a1);
}

BOOL _LSContainerDataNeedsUpdate(uint64_t a1)
{
  return *(_BYTE *)(a1 + 2) == 0;
}

void sub_182943278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,void *a34,void *a35,void *a36)
{
  void *v36;
  void *v37;
  void *v38;
  void *v39;

  _Unwind_Resume(a1);
}

uint64_t _LSContainerAdd(void *a1, uint64_t a2, _DWORD *a3)
{
  id v4;
  void *v5;
  int v6;
  uint64_t v7;

  v4 = a1;
  v5 = v4;
  if (v4 && *((_QWORD *)v4 + 1))
  {
    v6 = CSStoreAllocUnitWithData();
    if (v6)
    {
      v7 = 0;
      if (a3)
        *a3 = v6;
    }
    else
    {
      v7 = 4294957803;
    }
  }
  else
  {
    v7 = 4294967246;
  }

  return v7;
}

void sub_1829433FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _LSContainerRemove(uint64_t *a1, int a2)
{
  uint64_t result;
  unsigned int *v5;
  unsigned int *v6;
  int *v7;
  int *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  __n128 (*v12)(__n128 *, __n128 *);
  void (*v13)(uint64_t);
  const char *v14;
  void *__p;
  void *v16;
  uint64_t v17;

  result = -[_LSDatabase accessContext](*a1);
  if (result)
    result = _CSStoreAccessContextAssertWriting();
  if (a2)
  {
    result = CSStoreGetUnit();
    if (result)
    {
      v9 = 0;
      v10 = &v9;
      v11 = 0x4812000000;
      v12 = __Block_byref_object_copy__20;
      v13 = __Block_byref_object_dispose__21;
      v14 = "";
      __p = 0;
      v16 = 0;
      v17 = 0;
      _CSStoreEnumerateUnits();
      v5 = (unsigned int *)v10[6];
      v6 = (unsigned int *)v10[7];
      while (v5 != v6)
        _LSUnregisterBundle((void **)a1, *v5++, 0);
      _Block_object_dispose(&v9, 8);
      if (__p)
      {
        v16 = __p;
        operator delete(__p);
      }
      v9 = 0;
      v10 = &v9;
      v11 = 0x4812000000;
      v12 = __Block_byref_object_copy__20;
      v13 = __Block_byref_object_dispose__21;
      v14 = "";
      __p = 0;
      v16 = 0;
      v17 = 0;
      _CSStoreEnumerateUnits();
      v7 = (int *)v10[6];
      v8 = (int *)v10[7];
      while (v7 != v8)
        _LSPluginRemove((void *)*a1, *v7++);
      _Block_object_dispose(&v9, 8);
      if (__p)
      {
        v16 = __p;
        operator delete(__p);
      }
      return CSStoreFreeUnit();
    }
  }
  return result;
}

void sub_182943634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  _Block_object_dispose(&a21, 8);
  if (__p)
  {
    a28 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__20(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

uint64_t _LSContainerSet(void *a1, uint64_t a2, uint64_t a3)
{
  id v4;
  void *v5;
  void *v6;

  v4 = a1;
  v5 = v4;
  if (v4 && a3 && *((_QWORD *)v4 + 1))
  {
    _CSStoreWriteToUnit();
    v6 = 0;
  }
  else
  {
    _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], -50, (uint64_t)"_LSContainerSet", 737, 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return 1;
}

void sub_182943940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void _LSContainerGetVisualizationFunctions(int *(**a1)(void **this, LSContext *a2)@<X8>)
{
  *a1 = LaunchServices::Containers::getSummary;
  a1[1] = (int *(*)(void **, LSContext *))LaunchServices::Containers::display;
  a1[2] = (int *(*)(void **, LSContext *))LaunchServices::Containers::copyBindingForVisualization;
}

int *LaunchServices::Containers::getSummary(void **this, LSContext *a2)
{
  int *Unit;

  Unit = (int *)CSStoreGetUnit();
  if (Unit)
  {
    _LSAliasGetPath(*this, Unit[3]);
    Unit = (int *)objc_claimAutoreleasedReturnValue();
  }
  return Unit;
}

BOOL LaunchServices::Containers::display(uint64_t a1, uint64_t a2, uint64_t a3, CSStore2::AttributedStringWriter *a4)
{
  uint64_t Unit;
  uint64_t v7;
  NSString *v8;
  uint64_t v9;
  NSString *v10;
  NSString *v11;
  NSNumber *v12;

  Unit = CSStoreGetUnit();
  v7 = Unit;
  if (Unit)
  {
    CSStore2::AttributedStringWriter::link(a4, *(unsigned int *)(*(_QWORD *)a1 + 1600), *(unsigned int *)(Unit + 12), 0);
    v8 = (NSString *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::string(a4, CFSTR("path"), v8);

    v9 = *(unsigned int *)(v7 + 16);
    if ((_DWORD)v9)
    {
      CSStore2::AttributedStringWriter::link(a4, *(unsigned int *)(*(_QWORD *)a1 + 1600), v9, 0);
      v10 = (NSString *)objc_claimAutoreleasedReturnValue();
      CSStore2::AttributedStringWriter::string(a4, CFSTR("disk image"), v10);

    }
    CSStore2::AttributedStringWriter::beginFlags(a4, CFSTR("flags"));
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::missingFlag();
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::endFlags(a4);
    _LSContainerStateGetDescription(*(char *)(v7 + 2));
    v11 = (NSString *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::string(a4, CFSTR("state"), v11);
    if (*(_BYTE *)(v7 + 2) == 1)
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", *(_QWORD *)(v7 + 4));
      v12 = (NSNumber *)objc_claimAutoreleasedReturnValue();
      CSStore2::AttributedStringWriter::number(a4, CFSTR("volume"), v12);

    }
    else
    {
      CSStore2::AttributedStringWriter::string(a4, CFSTR("volume"), &stru_1E10473A0);
    }

  }
  return v7 != 0;
}

void sub_182943C24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t LaunchServices::Containers::copyBindingForVisualization(LaunchServices::Containers *this, LSContext *a2)
{
  return 0;
}

uint64_t ___ZL33_LSContainerFindWithNodesAndFlagsP11_LSDatabaseP6FSNodeS2_tPjPPK15LSContainerData_block_invoke(uint64_t result, int a2, unsigned __int16 *a3, uint64_t a4, _BYTE *a5)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  int v11;
  void *v12;

  v5 = *a3;
  if (v5 != *(unsigned __int16 *)(result + 80))
    return result;
  if (*((_BYTE *)a3 + 2) != 1)
    return result;
  v7 = result;
  v8 = *(_QWORD *)(result + 72);
  if (v8 != *(_QWORD *)(a3 + 2))
    return result;
  if ((v5 & 2) != 0)
  {
LABEL_9:
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 56) + 8) + 24) = a2;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 64) + 8) + 24) = a3;
    *a5 = 1;
    return result;
  }
  result = _LSAliasCompareToNode(*(void **)(result + 32), *((_DWORD *)a3 + 3), v8, 0, *(void **)(result + 40));
  if (!(_DWORD)result)
    return result;
  v11 = *((_DWORD *)a3 + 4);
  v12 = *(void **)(v7 + 48);
  if (!v11)
  {
    if (v12)
      return result;
    goto LABEL_9;
  }
  if (v12)
  {
    result = _LSAliasCompareToNode(*(void **)(v7 + 32), v11, 0, 0, v12);
    if ((_DWORD)result)
      goto LABEL_9;
  }
  return result;
}

uint64_t ___ZL33_LSContainerFindWithNodesAndFlagsP11_LSDatabaseP6FSNodeS2_tPjPPK15LSContainerData_block_invoke_2(uint64_t result, uint64_t a2, unsigned __int16 *a3, uint64_t a4, _BYTE *a5)
{
  int v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  char v11;

  if (*a3 == *(unsigned __int16 *)(result + 72))
  {
    v7 = a2;
    v8 = result;
    v11 = 0;
    v10 = 0;
    result = _LSContainerCheckState(*(void **)(result + 32), a2, (uint64_t)a3, &v11, &v10);
    if ((_DWORD)result)
      v9 = 0;
    else
      v9 = v11 == 1;
    if (v9 && v10 == *(_QWORD *)(v8 + 64))
    {
      if ((*a3 & 2) != 0
        || (result = _LSAliasCompareToNode(*(void **)(v8 + 32), *((_DWORD *)a3 + 3), v10, 0, *(void **)(v8 + 40)),
            (_DWORD)result))
      {
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 48) + 8) + 24) = v7;
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 56) + 8) + 24) = a3;
        *a5 = 1;
      }
    }
  }
  return result;
}

void ___ZL15_LSContainerAddP9LSContextP6FSNodeP6NSDataS2_S4_tyhU13block_pointerFvjP7NSErrorE_block_invoke(uint64_t a1)
{
  _LSDServiceDomain *v2;
  void **v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  unsigned int v22;
  NSObject *v23;
  uint64_t v24;
  _LSDServiceDomain *v25;
  uint64_t v26;
  id v27;
  id v28;
  id v29;
  NSObject *v30;
  void *v31;
  void *v32;
  int v33;
  id v34;
  id v35;
  void *v36;
  void *v37;
  int v38;
  uint64_t v39;
  void *v40;
  int v41;
  NSObject *v42;
  uint64_t v43;
  uint64_t v44;
  _WORD v45[2];
  uint64_t v46;
  int v47;
  int v48;
  id v49;
  id v50[5];
  id v51;
  _BYTE *v52;
  uint64_t *v53;
  void **v54;
  __int16 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t (*v58)(uint64_t, int, unsigned __int16 *, uint64_t, _BYTE *);
  void *v59;
  uint64_t *v60;
  uint64_t v61;
  __int16 v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  int v66;
  void **v67;
  id v68;
  char v69;
  id v70;
  _BYTE buf[24];
  id v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v67 = *(void ***)(a1 + 64);
  v68 = 0;
  v69 = 0;
  v70 = 0;
  +[_LSDServiceDomain defaultServiceDomain]();
  v2 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
  v3 = (void **)LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)&v67, v2, 0);

  if (!v3)
  {
    v24 = *(_QWORD *)(a1 + 56);
    +[_LSDServiceDomain defaultServiceDomain]();
    v25 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
    v26 = LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)&v67, v25, 0);

    if (v26)
      v27 = 0;
    else
      v27 = v70;
    (*(void (**)(uint64_t, _QWORD, id))(v24 + 16))(v24, 0, v27);

    goto LABEL_19;
  }
  v63 = 0;
  v64 = &v63;
  v65 = 0x2020000000;
  v66 = 0;
  _LSDefaultLog();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    ___ZL15_LSContainerAddP9LSContextP6FSNodeP6NSDataS2_S4_tyhU13block_pointerFvjP7NSErrorE_block_invoke_cold_4(a1, v4, v5, v6, v7, v8, v9, v10);

  v11 = (void *)MEMORY[0x1E0C809B0];
  v56 = MEMORY[0x1E0C809B0];
  v57 = 3221225472;
  v58 = ___ZL15_LSContainerAddP9LSContextP6FSNodeP6NSDataS2_S4_tyhU13block_pointerFvjP7NSErrorE_block_invoke_27;
  v13 = (uint64_t *)(a1 + 72);
  v12 = *(_QWORD *)(a1 + 72);
  v62 = *(_WORD *)(a1 + 80);
  v59 = &unk_1E1042540;
  v60 = &v63;
  v61 = v12;
  _CSStoreEnumerateUnits();
  if (*((_DWORD *)v64 + 6))
    goto LABEL_11;
  _LSDefaultLog();
  v14 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    ___ZL15_LSContainerAddP9LSContextP6FSNodeP6NSDataS2_S4_tyhU13block_pointerFvjP7NSErrorE_block_invoke_cold_3(a1, v14, v15, v16, v17, v18, v19, v20);

  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x2020000000;
  v72 = 0;
  v50[1] = v11;
  v21 = *(void **)(a1 + 32);
  v50[3] = ___ZL15_LSContainerAddP9LSContextP6FSNodeP6NSDataS2_S4_tyhU13block_pointerFvjP7NSErrorE_block_invoke_28;
  v50[4] = &unk_1E1042568;
  v55 = *(_WORD *)(a1 + 80);
  v50[2] = (id)3221225472;
  v52 = buf;
  v54 = v3;
  v51 = v21;
  v53 = &v63;
  _CSStoreEnumerateUnits();
  v22 = *((_DWORD *)v64 + 6);
  if (v22 && *(_QWORD *)(*(_QWORD *)&buf[8] + 24))
    _LSContainerSetMounted(*v3, v22, *v13);

  _Block_object_dispose(buf, 8);
  if (*((_DWORD *)v64 + 6))
  {
LABEL_11:
    _LSDefaultLog();
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
      ___ZL15_LSContainerAddP9LSContextP6FSNodeP6NSDataS2_S4_tyhU13block_pointerFvjP7NSErrorE_block_invoke_cold_2();

    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
    goto LABEL_14;
  }
  _LSDefaultLog();
  v30 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
    ___ZL15_LSContainerAddP9LSContextP6FSNodeP6NSDataS2_S4_tyhU13block_pointerFvjP7NSErrorE_block_invoke_cold_1();

  v31 = *(void **)(a1 + 40);
  if (v31)
  {
    v32 = *v3;
    v50[0] = 0;
    v33 = _LSAliasAdd(v32, v31, v50);
    v34 = v50[0];
    v35 = v34;
    if (!v33)
    {
LABEL_38:
      _LSDefaultLog();
      v42 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
      {
        v43 = *(_QWORD *)(a1 + 32);
        v44 = *v13;
        *(_DWORD *)buf = 138478339;
        *(_QWORD *)&buf[4] = v43;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v44;
        *(_WORD *)&buf[22] = 2114;
        v72 = v35;
        _os_log_error_impl(&dword_182882000, v42, OS_LOG_TYPE_ERROR, "Error adding database record for volume %{private}@ with volume ID %llu: %{public}@", buf, 0x20u);
      }

      v34 = v35;
      (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
      goto LABEL_42;
    }
  }
  else
  {
    v34 = 0;
    v33 = 0;
  }
  v36 = *(void **)(a1 + 48);
  if (v36)
  {
    v37 = *v3;
    v49 = v34;
    v38 = _LSAliasAdd(v37, v36, &v49);
    v35 = v49;

    v34 = v35;
    if (!v38)
    {
LABEL_36:
      if (v33)
        _LSAliasRemove(*v3, v33);
      goto LABEL_38;
    }
  }
  else
  {
    v38 = 0;
  }
  v39 = *(_QWORD *)(a1 + 72);
  v40 = *v3;
  v45[0] = *(_WORD *)(a1 + 80);
  v45[1] = 0;
  v46 = v39;
  v47 = v33;
  v48 = v38;
  v41 = _LSContainerAdd(v40, (uint64_t)v45, (_DWORD *)v64 + 6);
  if (v41)
  {
    _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], v41, (uint64_t)"_LSContainerAdd_block_invoke", 520, 0);
    v35 = (id)objc_claimAutoreleasedReturnValue();

    if (v38)
      _LSAliasRemove(*v3, v38);
    goto LABEL_36;
  }
  _LSContainerSetMounted(*v3, *((_DWORD *)v64 + 6), *v13);
  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
LABEL_42:

LABEL_14:
  _Block_object_dispose(&v63, 8);
LABEL_19:
  MEMORY[0x186DAF214]();
  if (v67 && v69)
    _LSContextDestroy(v67);
  v28 = v68;
  v67 = 0;
  v68 = 0;

  v69 = 0;
  v29 = v70;
  v70 = 0;

}

void sub_182944338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  void *v31;
  uint64_t v32;

  _Block_object_dispose(&a31, 8);
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)(v32 - 176));
  _Unwind_Resume(a1);
}

uint64_t ___ZL15_LSContainerAddP9LSContextP6FSNodeP6NSDataS2_S4_tyhU13block_pointerFvjP7NSErrorE_block_invoke_27(uint64_t result, int a2, unsigned __int16 *a3, uint64_t a4, _BYTE *a5)
{
  if (*a3 == *(unsigned __int16 *)(result + 48)
    && *((_BYTE *)a3 + 2) == 1
    && *(_QWORD *)(result + 40) == *(_QWORD *)(a3 + 2))
  {
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a2;
    *a5 = 1;
  }
  return result;
}

uint64_t ___ZL15_LSContainerAddP9LSContextP6FSNodeP6NSDataS2_S4_tyhU13block_pointerFvjP7NSErrorE_block_invoke_28(uint64_t result, int a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  unsigned __int16 *v5;
  uint64_t v8;

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = a3;
  v5 = *(unsigned __int16 **)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24);
  if (*v5 == *(unsigned __int16 *)(result + 64))
  {
    v8 = result;
    result = _LSAliasCompareToNode(**(void ***)(result + 56), *((_DWORD *)v5 + 3), *(_QWORD *)(v5 + 2), 0, *(void **)(result + 32));
    if ((_DWORD)result)
    {
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 48) + 8) + 24) = a2;
      *a5 = 1;
    }
  }
  return result;
}

uint64_t ___ZL15_LSContainerAddP9LSContextP6FSNodeP6NSDataS2_S4_tyhU13block_pointerFvjP7NSErrorE_block_invoke_30(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void *_LSCopyGroupContainerIdentifiersFromEntitlements(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  size_t count;
  void *v7;
  size_t i;
  void *v9;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;

  v3 = a2;
  objc_msgSend(objc_retainAutorelease(a1), "UTF8String");
  v13 = MEMORY[0x1E0C809B0];
  v4 = v3;
  v14 = v4;
  v5 = (void *)container_entitlements_copy_container_identifiers();
  if (object_getClass(v5) != (Class)MEMORY[0x1E0C812C8])
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSSet<NSString *> * _Nonnull _LSCopyGroupContainerIdentifiersFromEntitlements(NSString *__strong _Nonnull, LSPropertyList *__strong _Nonnull)");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "handleFailureInFunction:file:lineNumber:description:", v12, CFSTR("LSContainerHelpers.m"), 152, CFSTR("Returned XPC object %@ was not an array, cannot continue"), v5, v13, 3221225472, ___LSCopyGroupContainerIdentifiersFromEntitlements_block_invoke, &unk_1E10425D0, v4);

  }
  count = xpc_array_get_count(v5);
  v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E20]), "initWithCapacity:", count);
  if (count)
  {
    for (i = 0; i != count; ++i)
    {
      v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithUTF8String:", xpc_array_get_string(v5, i));
      if (v9)
        objc_msgSend(v7, "addObject:", v9);

    }
  }

  return v7;
}

id _LSCopyGroupContainerURLSFromContainermanager(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  id v13;
  void *v14;
  void *v15;
  NSObject *v16;
  id v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v23 = 1;
  v1 = objc_retainAutorelease(a1);
  objc_msgSend(v1, "UTF8String");
  v2 = (void *)container_create_or_lookup_app_group_paths_for_platform();
  if (v2)
  {
    v18 = v1;
    v3 = (void *)_CFXPCCreateCFObjectFromXPCObject();
    v4 = objc_alloc(MEMORY[0x1E0C99E08]);
    objc_msgSend(v3, "allKeys");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = (id)objc_msgSend(v4, "initWithCapacity:", objc_msgSend(v5, "count"));

    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v7 = v3;
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v19, v24, 16);
    if (v8)
    {
      v9 = v8;
      v10 = *(_QWORD *)v20;
      do
      {
        for (i = 0; i != v9; ++i)
        {
          if (*(_QWORD *)v20 != v10)
            objc_enumerationMutation(v7);
          v12 = *(_QWORD *)(*((_QWORD *)&v19 + 1) + 8 * i);
          v13 = objc_alloc(MEMORY[0x1E0C99E98]);
          objc_msgSend(v7, "objectForKeyedSubscript:", v12);
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          v15 = (void *)objc_msgSend(v13, "initFileURLWithPath:isDirectory:", v14, 1);
          objc_msgSend(v6, "setObject:forKeyedSubscript:", v15, v12);

        }
        v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v19, v24, 16);
      }
      while (v9);
    }

    v1 = v18;
  }
  else
  {
    _LSDefaultLog();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      _LSCopyGroupContainerURLSFromContainermanager_cold_1();

    v6 = objc_alloc_init(MEMORY[0x1E0C99D80]);
  }

  return v6;
}

uint64_t _LSCopyEnvironmentVariablesFromContainermanager(void *a1, void *a2, unsigned int a3)
{
  id v5;
  NSObject *v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  NSObject *v17;
  void *v18;
  _QWORD v20[4];
  _QWORD v21[4];
  uint8_t buf[4];
  id v23;
  __int16 v24;
  void *v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  _LSDefaultLog();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412802;
    v23 = v5;
    v24 = 2048;
    v25 = a2;
    v26 = 2048;
    v27 = a3;
    _os_log_impl(&dword_182882000, v6, OS_LOG_TYPE_DEFAULT, "querying MCM for environment for %@, class %llx, platform %lu", buf, 0x20u);
  }

  v7 = objc_retainAutorelease(v5);
  objc_msgSend(v7, "UTF8String");
  v8 = container_create_or_lookup_path_for_platform();
  if (!v8)
  {
    _LSDefaultLog();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      _LSCopyEnvironmentVariablesFromContainermanager_cold_1();

    goto LABEL_14;
  }
  v9 = (void *)v8;
  v10 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E98]), "initFileURLWithFileSystemRepresentation:isDirectory:relativeToURL:", v8, 1, 0);
  objc_msgSend(v10, "URLByAppendingPathComponent:isDirectory:", CFSTR("tmp"), 1);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "path");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "path");
  v13 = objc_claimAutoreleasedReturnValue();
  v14 = (void *)v13;
  if (v12 && v13)
  {
    v20[0] = CFSTR("HOME");
    v20[1] = CFSTR("CFFIXED_USER_HOME");
    v21[0] = v13;
    v21[1] = v13;
    v20[2] = CFSTR("TMPDIR");
    v20[3] = CFSTR("_DYLD_CLOSURE_HOME");
    v21[2] = v12;
    v21[3] = v13;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v21, v20, 4);
    v15 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    _LSDefaultLog();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend(v11, "path");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412546;
      v23 = v18;
      v24 = 2112;
      v25 = v14;
      _os_log_impl(&dword_182882000, v17, OS_LOG_TYPE_DEFAULT, "Error creating env variables-tempURL: %@, containerPath: %@", buf, 0x16u);

    }
    v15 = 0;
  }
  free(v9);

  if (!v15)
LABEL_14:
    v15 = MEMORY[0x1E0C9AA70];

  return v15;
}

void OUTLINED_FUNCTION_1_3(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x20u);
}

uint64_t OUTLINED_FUNCTION_2_2()
{
  return container_get_error_description();
}

void _LSGetNodeTypeCreatorInfo(uint64_t a1, void *a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  id v9;
  uint64_t v10;
  uint64_t v11;

  v9 = a2;
  if (a3 && *(_QWORD *)a3)
  {
    *a4 = *(_DWORD *)(*(_QWORD *)a3 + 192);
LABEL_9:
    *a5 = 0;
    goto LABEL_10;
  }
  if (a1
    && _LSGetBundleClassForNode(a1, v9) == 2
    && (v11 = 0, !_LSBundleFindWithNode(a1, v9, 0, &v11)))
  {
    v10 = v11;
    *a4 = *(_DWORD *)(v11 + 192);
    *a5 = 0;
    if (a3)
      *(_QWORD *)a3 = v10;
  }
  else if ((objc_msgSend(v9, "getHFSType:creator:error:", a4, a5, 0) & 1) == 0)
  {
    *a4 = 0;
    goto LABEL_9;
  }
LABEL_10:

}

void sub_182944CF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _LSNodeIsAVCHDCollection(void *a1)
{
  return objc_msgSend(a1, "isAVCHDCollection");
}

uint64_t _LSGetValidApplicationCategoryTypeSet()
{
  _LSDServiceDomain *v0;
  void **v1;
  const __CFAllocator *v2;
  CFMutableSetRef Mutable;
  void *v4;
  int v5;
  void *v6;
  NSObject *v7;
  void *v8;
  id *v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  void *v12;
  void *v13;
  _QWORD v14[5];
  void **v15;
  id *v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  void (*v19)(uint64_t);
  id v20;
  _QWORD v21[5];
  CFTypeRef cf;
  int v23;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  const __CFString *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_lock((os_unfair_lock_t)&_LSGetValidApplicationCategoryTypeSet::lock);
  if (_LSGetValidApplicationCategoryTypeSet::categoryTypeSet)
    goto LABEL_24;
  if (!_LSCurrentProcessMayMapDatabase())
  {
    +[_LSDService synchronousXPCProxyWithErrorHandler:]((uint64_t)_LSDReadService, __block_literal_global_20);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = 0;
    v16 = (id *)&v15;
    v17 = 0x3032000000;
    v18 = __Block_byref_object_copy__14;
    v19 = __Block_byref_object_dispose__14;
    v20 = 0;
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = ___LSGetValidApplicationCategoryTypeSet_block_invoke_54;
    v14[3] = &unk_1E1042620;
    v14[4] = &v15;
    objc_msgSend(v6, "getApplicationCategoryIdentifiersSetWithCompletionHandler:", v14);
    _LSGetValidApplicationCategoryTypeSet::categoryTypeSet = objc_msgSend(v16[5], "copy");
    _Block_object_dispose(&v15, 8);

    goto LABEL_24;
  }
  v18 = 0;
  v15 = 0;
  v16 = 0;
  LOBYTE(v17) = 0;
  +[_LSDServiceDomain defaultServiceDomain]();
  v0 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
  v1 = (void **)LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)&v15, v0, 0);

  if (v1)
  {
    v23 = 0;
    if (_UTGetActiveTypeForCFStringIdentifier(*v1, CFSTR("public.app-category"), &v23))
    {
      v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, (const CFSetCallBacks *)&kXCFCaseInsensitiveStringSetCallBacks);
      if (!Mutable)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CFSetRef _LSGetValidApplicationCategoryTypeSet()");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "handleFailureInFunction:file:lineNumber:description:", v13, CFSTR("LSCore.mm"), 943, CFSTR("Failed to allocate CFMutableSet for category types."));

      }
      v4 = *v1;
      v5 = v23;
      v21[0] = MEMORY[0x1E0C809B0];
      v21[1] = 3321888768;
      v21[2] = ___LSGetValidApplicationCategoryTypeSet_block_invoke;
      v21[3] = &__block_descriptor_48_ea8_40c27_ZTS10CFReleaserIP7__CFSetE_e41_v36__0I8r____IIIIiII_8I_IIIIIIII_12q20_28l;
      v21[4] = v1;
      cf = Mutable;
      if (Mutable)
        CFRetain(Mutable);
      _UTTypeSearchConformingTypesWithBlock(v4, v5, -1, 0, (uint64_t)v21);
      CFSetRemoveValue(Mutable, CFSTR("public.app-category"));
      _LSGetValidApplicationCategoryTypeSet::categoryTypeSet = (uint64_t)CFSetCreateCopy(v2, Mutable);
      if (cf)
        CFRelease(cf);
      if (Mutable)
        CFRelease(Mutable);
      goto LABEL_20;
    }
    _LSDefaultLog();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      v25 = "CFSetRef _LSGetValidApplicationCategoryTypeSet()";
      v26 = 2114;
      v27 = CFSTR("public.app-category");
      _os_log_impl(&dword_182882000, v7, OS_LOG_TYPE_DEFAULT, "%{public}s: unable to get info for type \"%{public}@\"", buf, 0x16u);
    }
  }
  else
  {
    _LSDefaultLog();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      LaunchServices::Database::Context::error((id *)&v15);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      _LSGetValidApplicationCategoryTypeSet_cold_1(v8, buf, v7);
    }
  }

LABEL_20:
  if (v15 && (_BYTE)v17)
    _LSContextDestroy(v15);
  v9 = v16;
  v15 = 0;
  v16 = 0;

  LOBYTE(v17) = 0;
  v10 = v18;
  v18 = 0;

LABEL_24:
  os_unfair_lock_unlock((os_unfair_lock_t)&_LSGetValidApplicationCategoryTypeSet::lock);
  return _LSGetValidApplicationCategoryTypeSet::categoryTypeSet;
}

void sub_1829450C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,CFTypeRef cf)
{
  void *v27;
  void *v28;

  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a15);
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_ea8_40c27_ZTS10CFReleaserIP7__CFSetE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_ea8_40c27_ZTS10CFReleaserIP7__CFSetE(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 40);
  if (v2)
    CFRelease(v2);
  *(_QWORD *)(a1 + 40) = 0;
}

id LaunchServices::Database::Context::error(id *this)
{
  _LSDServiceDomain *v2;
  uint64_t v3;
  id v4;

  +[_LSDServiceDomain defaultServiceDomain]();
  v2 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
  v3 = LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)this, v2, 0);

  if (v3)
    v4 = 0;
  else
    v4 = this[3];
  return v4;
}

void sub_18294528C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1829452EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18294537C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _LSCopyApplicationCategoriesForNodeWithDefaultIdentifierProvider(void *a1, _QWORD *a2, void *a3)
{
  id v5;
  void (**v6)(id, id, id *);
  const __CFURL *v7;
  void *v8;
  id v9;
  const __CFArray *v10;
  const __CFArray *v11;
  const __CFSet *valid;
  CFIndex Count;
  __CFArray *MutableCopy;
  const __CFAllocator *v15;
  unint64_t v16;
  const void *ValueAtIndex;
  CFArrayRef Copy;
  uint64_t v19;
  id v21;
  CFBooleanRef propertyValueTypeRefPtr;

  v5 = a1;
  v6 = a3;
  propertyValueTypeRefPtr = 0;
  v7 = (const __CFURL *)objc_msgSend(v5, "URL");
  if (!CFURLCopyResourcePropertyForKey(v7, (CFStringRef)*MEMORY[0x1E0C9B4D8], &propertyValueTypeRefPtr, 0))
  {
    v19 = 4294967253;
    goto LABEL_25;
  }
  if (!propertyValueTypeRefPtr || !CFBooleanGetValue(propertyValueTypeRefPtr))
  {
    v19 = 4294956485;
    goto LABEL_25;
  }
  v21 = 0;
  v6[2](v6, v5, &v21);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v21;
  v10 = v8;
  v11 = v10;
  if (v10)
  {

  }
  else
  {
    v19 = _LSGetOSStatusFromNSError(v9);

    if ((_DWORD)v19 == -1427)
    {
      v19 = 0;
      *a2 = CFArrayCreate(0, 0, 0, MEMORY[0x1E0C9B378]);
      goto LABEL_25;
    }
    if ((_DWORD)v19)
      goto LABEL_25;
  }
  valid = (const __CFSet *)_LSGetValidApplicationCategoryTypeSet();
  if (valid)
  {
    Count = CFArrayGetCount(v11);
    if (Count >= 1)
    {
      MutableCopy = 0;
      v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v16 = Count + 1;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v11, v16 - 2);
        if (!CFSetContainsValue(valid, ValueAtIndex))
        {
          if (!MutableCopy)
            MutableCopy = CFArrayCreateMutableCopy(v15, 0, v11);
          CFArrayRemoveValueAtIndex(MutableCopy, v16 - 2);
        }
        --v16;
      }
      while (v16 > 1);
      if (MutableCopy)
      {
        Copy = CFArrayCreateCopy(v15, MutableCopy);
        if (v11)
          CFRelease(v11);
        CFRelease(MutableCopy);
        if (!Copy)
          goto LABEL_18;
LABEL_20:
        *a2 = CFRetain(Copy);
        CFRelease(Copy);
        v19 = 0;
        goto LABEL_25;
      }
    }
  }
  Copy = v11;
  if (v11)
    goto LABEL_20;
LABEL_18:
  v19 = 0;
  *a2 = 0;
LABEL_25:

  return v19;
}

void sub_1829455A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  const void *v3;
  const void *v4;

  CFRelease(v4);
  if (v3)
    CFRelease(v3);

  _Unwind_Resume(a1);
}

uint64_t _LSCopyInfoForNode(LSContext *a1, void *a2, int a3, int *a4)
{
  id v7;
  uint64_t v8;
  __CFString *v9;
  id v10;
  void *v11;
  CFRange v12;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  int v18;
  int v19;
  int v20;
  LSBundleData *v21;
  unsigned int v22;
  int v23;
  int v24;
  BOOL v26;
  LSBundleData *v27;
  unsigned int plistContentFlags;
  int v29;
  const __CFURL *v30;
  const __CFDictionary *v31;
  id v32[2];
  int v33;
  uint64_t v34;
  id v35;
  id v36;
  _DWORD v37[2];
  id v38;
  LSBundleData *v39;
  void *v40;
  CFRange range;

  v7 = a2;
  v39 = 0;
  v40 = 0;
  *((_QWORD *)a4 + 1) = 0;
  *(_QWORD *)a4 = 0;
  a4[4] = 0;
  if (!a1 && a3 != 64)
  {
    v8 = _LSContextInit(&v40);
    if ((_DWORD)v8)
    {
      v9 = 0;
      goto LABEL_23;
    }
    a1 = (LSContext *)&v40;
  }
  v38 = 0;
  objc_msgSend(v7, "nameWithError:", &v38);
  v9 = (__CFString *)objc_claimAutoreleasedReturnValue();
  v10 = v38;
  v11 = v10;
  if (v9)
  {

  }
  else
  {
    v8 = _LSGetOSStatusFromNSError(v10);

    if ((_DWORD)v8)
      goto LABEL_21;
  }
  _CFGetPathExtensionRangesFromPathComponent();
  if ((a3 & 1) != 0)
  {
    v12.location = range.location;
    if (range.location != -1)
    {
      v12.length = range.length;
      if (range.length >= 1)
        *(_QWORD *)(a4 + 3) = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v9, v12);
    }
  }
  if (objc_msgSend(v7, "isHidden"))
    *a4 |= 0x40u;
  if ((a3 & 0x54) != 0)
  {
    v32[0] = 0;
    if (objc_msgSend(v7, "getResourceValue:forKey:options:error:", v32, *MEMORY[0x1E0C999B0], 1, 0)
      && objc_msgSend(v32[0], "BOOLValue"))
    {
      *a4 |= 0x100000u;
    }

  }
  if (a3 == 64)
    goto LABEL_20;
  v14 = _LSGetBundleClassForNode((uint64_t)a1, v7);
  v15 = v14;
  if (v14)
    v16 = v14 == 3;
  else
    v16 = 1;
  v17 = !v16;
  if (!objc_msgSend(v7, "isDirectory"))
  {
    if (objc_msgSend(v7, "isSymbolicLink"))
    {
      v19 = *a4 | 0x30;
      goto LABEL_64;
    }
    if (objc_msgSend(v7, "isAliasFile"))
    {
      v23 = *a4;
      v24 = 17;
    }
    else
    {
      v23 = *a4;
      if (v15 != 2)
      {
        v19 = v23 | 1;
LABEL_64:
        *a4 = v19;
        memset(v37, 63, sizeof(v37));
        objc_msgSend(v7, "getHFSType:creator:error:", &v37[1], v37, 0);
        if ((a3 & 0x14) != 0 && (*(_BYTE *)a4 & 0x10) == 0 && objc_msgSend(v7, "isExecutable"))
        {
          v26 = (v37[1] == 1061109567 || v37[1] == 0) && range.length == 0;
          if (v26 || v15)
          {
            *a4 |= 0x2000u;
          }
          else
          {
            LODWORD(v32[0]) = 0;
            v32[1] = 0;
            v33 = 0;
            v35 = 0;
            v36 = 0;
            v34 = 0;
            if (_LSGetBindingForNodeOrSchemeOrUTI((int)a1, v7, 0, 0, 0, -1, 0, 2, (uint64_t)v32)
              || !v34)
            {
              *a4 |= 0x2000u;
            }

          }
        }
        if ((a3 & 2) != 0)
        {
          a4[1] = v37[1];
          a4[2] = v37[0];
        }
        if ((a3 & 0x18) != 0 && (*a4 & 4) != 0)
        {
          v27 = v39;
          if (a1 && !v39)
          {
            _LSFindOrRegisterBundleNode(a1, v7, 0, (a1 == (LSContext *)&v40) << 25, 0, 0, &v39);
            v27 = v39;
          }
          if (v27)
          {
            plistContentFlags = v27->_plistContentFlags;
            *a4 |= (_LSBundleDataGetUnsupportedFormatFlag() | plistContentFlags) & 0x600F80;
            v29 = _LSGetItemInfoArchFlagsForBundle(v39);
          }
          else
          {
            v29 = 0x400000;
          }
          *a4 |= v29;
        }
        goto LABEL_20;
      }
      v24 = 5;
    }
    v19 = v23 | v24;
    goto LABEL_64;
  }
  *a4 |= 8u;
  if (objc_msgSend(v7, "isVolume"))
  {
    if ((a3 & 0x14) != 0)
    {
      v8 = 0;
      v18 = *a4 | 0x1000;
LABEL_34:
      *a4 = v18;
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if ((a3 & 0x3E) == 0)
    goto LABEL_20;
  if (_LSNodeIsPackageCommon(a1, v7, 1, 0))
    *a4 |= 2u;
  if ((a3 & 2) != 0 && (*(_BYTE *)a4 & 2) != 0)
  {
    if (v39)
      v20 = 0;
    else
      v20 = v17;
    if (a1 && v20)
      _LSFindOrRegisterBundleNode(a1, v7, 0, (a1 == (LSContext *)&v40) << 25, 0, 0, &v39);
    _LSGetNodeTypeCreatorInfo((uint64_t)a1, v7, (uint64_t)&v39, a4 + 1, a4 + 2);
  }
  if ((a3 & 0x3C) == 0)
    goto LABEL_20;
  v8 = 0;
  if ((*a4 & 2) != 0 && v15 == 2)
  {
    *a4 |= 4u;
    if ((a3 & 0x18) != 0)
    {
      v21 = v39;
      if (a1 && !v39)
      {
        _LSFindOrRegisterBundleNode(a1, v7, 0, (a1 == (LSContext *)&v40) << 25, 0, 0, &v39);
        v21 = v39;
      }
      if (v21)
      {
        v22 = v21->_plistContentFlags;
        *a4 |= (_LSBundleDataGetUnsupportedFormatFlag() | v22) & 0x600F80;
        v8 = 0;
        v18 = *a4 | _LSGetItemInfoArchFlagsForBundle(v39);
        goto LABEL_34;
      }
      objc_msgSend(v7, "URL");
      v30 = (const __CFURL *)objc_claimAutoreleasedReturnValue();
      v31 = CFBundleCopyInfoDictionaryInDirectory(v30);

      *a4 |= _LSGetApplicationFlagsFromPlist(v31, v7, 1, 0, 0, 0);
      if (v31)
        CFRelease(v31);
    }
LABEL_20:
    v8 = 0;
  }
LABEL_21:
  if (v40)
    _LSContextDestroy(&v40);
LABEL_23:

  return v8;
}

void sub_182945B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

uint64_t _LSGetItemInfoArchFlagsForBundle(const LSBundleData *a1)
{
  uint64_t v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v7 = 0;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = ___ZL32_LSGetItemInfoArchFlagsForBundlePK12LSBundleData_block_invoke;
  v3[3] = &unk_1E1041C30;
  v3[4] = &v4;
  _LSEnumerateSliceMask(a1->base._sliceMask, v3);
  v1 = *((unsigned int *)v5 + 6);
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_182945C60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _LSGetApplicationFlagsFromPlist(const __CFDictionary *a1, void *a2, int a3, int a4, int a5, _BYTE *a6)
{
  id v11;
  CFTypeID TypeID;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;

  v11 = a2;
  if (a1)
  {
    TypeID = CFDictionaryGetTypeID();
    if (TypeID == CFGetTypeID(a1))
    {
      if (CFDictionaryGetCount(a1))
      {
        if (_LSGetBooleanFromDict(a1, CFSTR("LSRequiresClassic")))
        {
          v13 = 256;
        }
        else if (_LSGetBooleanFromDict(a1, CFSTR("LSRequiresCarbon")))
        {
          v13 = 128;
        }
        else if (_LSGetBooleanFromDict(a1, CFSTR("LSPrefersCarbon")))
        {
          v13 = 640;
        }
        else if (_LSGetBooleanFromDict(a1, CFSTR("LSPrefersClassic")))
        {
          v13 = 1152;
        }
        else if (a4)
        {
          v13 = 640;
        }
        else
        {
          v13 = 128;
        }
        if (CFDictionaryContainsKey(a1, CFSTR("AMCustomServiceTypes")))
          v15 = v13 | 0x20000;
        else
          v15 = v13;
        if (!a6)
          goto LABEL_16;
LABEL_15:
        *a6 = 0;
        goto LABEL_16;
      }
    }
  }
  if (a5)
    v14 = 256;
  else
    v14 = 128;
  if (a3)
    v14 = 0;
  if (a4)
    v15 = 640;
  else
    v15 = v14;
  if (a6)
    goto LABEL_15;
LABEL_16:

  return v15;
}

void sub_182945DC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL _LSGetItemInfoFlagsForNode(LSContext *a1, void *a2, _DWORD *a3, _QWORD *a4)
{
  id v7;
  int v8;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  _QWORD v14[2];
  int v15;

  v7 = a2;
  if (v7)
  {
    if (a3)
      goto LABEL_3;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "BOOL _LSGetItemInfoFlagsForNode(LSContext *, FSNode *__strong, LSItemInfoFlags *, NSError *__autoreleasing *)");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", v11, CFSTR("LSCore.mm"), 1530, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("inNode != nil"));

    if (a3)
      goto LABEL_3;
  }
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "BOOL _LSGetItemInfoFlagsForNode(LSContext *, FSNode *__strong, LSItemInfoFlags *, NSError *__autoreleasing *)");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "handleFailureInFunction:file:lineNumber:description:", v13, CFSTR("LSCore.mm"), 1531, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("outFlags != NULL"));

LABEL_3:
  v14[0] = 0;
  v14[1] = 0;
  v15 = 0;
  v8 = _LSCopyInfoForNode(a1, v7, 4, (int *)v14);
  if (v8)
  {
    if (a4)
    {
      _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], v8, (uint64_t)"_LSGetItemInfoFlagsForNode", 1539, 0);
      *a4 = (id)objc_claimAutoreleasedReturnValue();
    }
  }
  else
  {
    *a3 = v14[0];
  }

  return v8 == 0;
}

void sub_182945F64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t _LSCanBundleHandleNodeOrSchemeOrUTI(int a1, int a2, void *a3, LaunchServices::BindingEvaluator *this, LaunchServices::BindingEvaluator *a5, int a6)
{
  uint64_t v7;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  id v13;
  id v14;

  v9 = 0;
  v10 = 0;
  v11 = 0;
  v13 = 0;
  v14 = 0;
  v12 = 0;
  if (_LSGetBindingForNodeOrSchemeOrUTI(a1, a3, this, a5, a2, a6, 0, 80046, (uint64_t)&v9))
  {
    v7 = 0;
  }
  else if (v11)
  {
    v7 = 1;
  }
  else
  {
    v7 = 0;
    if (a3 && v10)
      v7 = (*(_DWORD *)(v10 + 172) >> 28) & 1;
  }

  return v7;
}

void sub_182946064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{

  _Unwind_Resume(a1);
}

uint64_t _LSCopySniffedExtensionAndTypeIdentifierForURL()
{
  const void *v0;

  v0 = (const void *)_CFBundleCopyFileTypeForFileURL();
  if (v0)
    CFRelease(v0);
  return 0;
}

__CFSet *_LSCopyPackageExtensions(LSContext *a1)
{
  _LSDatabase *v2;
  __CFSet *Mutable;
  const __CFArray *v4;
  const __CFArray *v5;
  CFIndex Count;
  CFIndex v7;
  const __CFString *ValueAtIndex;
  const void *v9;

  v2 = a1->db;
  Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B3B0]);
  if (Mutable)
  {
    v4 = (const __CFArray *)CSStringBindingCopyCFStrings();
    v5 = v4;
    if (v4)
    {
      Count = CFArrayGetCount(v4);
      if (Count >= 1)
      {
        v7 = 0;
        do
        {
          ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v5, v7);
          if (_LSIsPackageExtension(a1, 1, ValueAtIndex))
          {
            v9 = CFArrayGetValueAtIndex(v5, v7);
            CFSetAddValue(Mutable, v9);
          }
          ++v7;
        }
        while (Count != v7);
      }
      CFRelease(v5);
    }
    if (CFSetGetCount(Mutable) < 1)
    {
      CFRelease(Mutable);
      Mutable = 0;
    }
    else
    {
      CFSetAddValue(Mutable, CFSTR("app"));
      CFSetAddValue(Mutable, CFSTR("service"));
    }
  }

  return Mutable;
}

void sub_1829461D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void _LSSetKernelPackageExtensions()
{
  const __CFArray *v0;
  const __CFArray *v1;
  CFIndex Count;
  CFIndex v3;
  CFIndex v4;
  CFIndex i;
  const __CFString *ValueAtIndex;
  CFIndex Bytes;
  CFIndex v8;
  CFIndex v9;
  void *v10;
  void *v11;
  CFIndex v12;
  char *v13;
  const __CFString *v14;
  CFIndex usedBufLen;
  int v16;
  int v17;
  CFRange v18;

  v0 = _LSCopyPackageExtensionsUnion();
  if (v0)
  {
    v1 = v0;
    Count = CFArrayGetCount(v0);
    if (Count >= 1)
    {
      v3 = Count;
      pthread_rwlock_wrlock(&packageExtensionsLock);
      if (lastPackageExtensions)
        CFRelease((CFTypeRef)lastPackageExtensions);
      lastPackageExtensions = (uint64_t)CFRetain(v1);
      pthread_rwlock_unlock(&packageExtensionsLock);
      v4 = 0;
      for (i = 0; i != v3; ++i)
      {
        usedBufLen = 0;
        ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v1, i);
        v18.length = CFStringGetLength(ValueAtIndex);
        v18.location = 0;
        Bytes = CFStringGetBytes(ValueAtIndex, v18, 0x8000100u, 0, 0, 0, 0, &usedBufLen);
        v8 = usedBufLen;
        if (usedBufLen <= v4)
          v8 = v4;
        if (Bytes)
          v4 = v8;
      }
      v9 = v4 + 1;
      v10 = malloc_type_malloc((v4 + 1) * v3, 0xC7446644uLL);
      if (v10)
      {
        v11 = v10;
        v12 = 0;
        v13 = (char *)v10;
        while (1)
        {
          v14 = (const __CFString *)CFArrayGetValueAtIndex(v1, v12);
          if (!CFStringGetCString(v14, v13, v9, 0x8000100u))
            break;
          ++v12;
          v13 += v9;
          if (v3 == v12)
          {
            usedBufLen = (CFIndex)v11;
            v16 = v3;
            v17 = v9;
            fsctl("/", 0x80104102uLL, &usedBufLen, 0);
            break;
          }
        }
        free(v11);
      }
    }
    CFRelease(v1);
  }
}

CFArrayRef _LSCopyPackageExtensionsUnion(void)
{
  CFArrayRef v0;
  __CFSet *v1;
  LSContext v3;

  v3.db = 0;
  if (_LSContextInit((id *)&v3.db))
  {
    v0 = 0;
  }
  else
  {
    v1 = _LSCopyPackageExtensions(&v3);
    if (v1)
    {
      v0 = XCFArrayCreateWithSet((const __CFAllocator *)*MEMORY[0x1E0C9AE00], v1, MEMORY[0x1E0C9B378]);
      CFRelease(v1);
    }
    else
    {
      v0 = 0;
    }
    _LSContextDestroy((void **)&v3.db);
  }

  return v0;
}

void sub_1829463F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

CFArrayRef _LSCopyKernelPackageExtensionsAsLSD()
{
  CFTypeRef v1;

  if (pthread_rwlock_tryrdlock(&packageExtensionsLock))
    return _LSCopyPackageExtensionsUnion();
  if (!lastPackageExtensions)
  {
    pthread_rwlock_unlock(&packageExtensionsLock);
    return _LSCopyPackageExtensionsUnion();
  }
  v1 = CFRetain((CFTypeRef)lastPackageExtensions);
  pthread_rwlock_unlock(&packageExtensionsLock);
  if (!v1)
    return _LSCopyPackageExtensionsUnion();
  return (CFArrayRef)v1;
}

uint64_t ___ZL32_LSGetItemInfoArchFlagsForBundlePK12LSBundleData_block_invoke(uint64_t result, int a2)
{
  int v2;

  if (a2 > 16777222)
  {
    if (a2 == 16777223)
    {
      v2 = 0x10000000;
    }
    else
    {
      if (a2 != 16777234)
        return result;
      v2 = 0x8000000;
    }
  }
  else if (a2 == 7)
  {
    v2 = 0x4000000;
  }
  else
  {
    if (a2 != 18)
      return result;
    v2 = 0x2000000;
  }
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) |= v2;
  return result;
}

void _LSServer_SetDatabaseExecutionContext(id obj)
{
  objc_storeStrong((id *)&sharedContext, obj);
}

uint64_t _LSSetLocalDatabaseIfNewer(void *a1)
{
  id v1;
  _LSDatabase *v2;
  LSSessionKey sessionKey;
  id *v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  int v9;
  unint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v16;
  void *v17;
  id v18;
  __CFString *v19;
  _BYTE v20[32];
  uint8_t buf[32];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v2 = a1;
  os_unfair_recursive_lock_lock_with_options();
  sessionKey = v2->sessionKey;
  v4 = (id *)_LSGetSession(sessionKey);
  v5 = v4[3];
  if (!v5)
    goto LABEL_7;
  v6 = v5;
  v7 = v4[3];
  _LSDatabaseGetCacheGUID();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  _LSDatabaseGetCacheGUID();
  v1 = (id)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "isEqual:", v1);

  if (!v9)
  {
LABEL_7:
    _LSDatabaseGetLog();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      _LSDatabaseGetCacheGUID();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = v4[3];
      if (v18)
      {
        v1 = v4[3];
        _LSDatabaseGetCacheGUID();
        v19 = (__CFString *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v19 = CFSTR("(no db)");
      }
      *(_DWORD *)buf = 138412546;
      *(_QWORD *)&buf[4] = v17;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v19;
      _os_log_debug_impl(&dword_182882000, v14, OS_LOG_TYPE_DEBUG, "Database with GUID %@ does not match existing database GUID %@", buf, 0x16u);
      if (v18)
      {

      }
    }
    goto LABEL_8;
  }
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v22 = 0u;
  memset(buf, 0, sizeof(buf));
  _LSDatabaseGetHeader(buf);
  v10 = v31;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v22 = 0u;
  memset(buf, 0, sizeof(buf));
  _LSDatabaseGetHeader(buf);
  if (v10 <= (unint64_t)v31)
  {
    _LSDatabaseGetLog();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      v23 = 0u;
      v24 = 0u;
      v22 = 0u;
      memset(buf, 0, sizeof(buf));
      _LSDatabaseGetHeader(buf);
      v16 = v31;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      v23 = 0u;
      v24 = 0u;
      v22 = 0u;
      memset(buf, 0, sizeof(buf));
      _LSDatabaseGetHeader(buf);
      _LSSetLocalDatabaseIfNewer_cold_2((uint64_t)buf, (uint64_t)v20, v16);
    }
LABEL_8:

    v13 = 0;
    goto LABEL_9;
  }
  _LSDatabaseGetLog();
  v11 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v22 = 0u;
    memset(buf, 0, sizeof(buf));
    _LSDatabaseGetHeader(buf);
    v12 = v31;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v22 = 0u;
    memset(buf, 0, sizeof(buf));
    _LSDatabaseGetHeader(buf);
    _LSSetLocalDatabaseIfNewer_cold_1((uint64_t)buf, (uint64_t)v20, v12);
  }

  LSSession::setDatabase((LSSession *)v4, v2);
  v13 = 1;
LABEL_9:
  os_unfair_recursive_lock_unlock();

  return v13;
}

void sub_18294687C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_182946900(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1829469D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void _LSDatabaseSetSequenceNumber(uint64_t a1, uint64_t a2)
{
  _OWORD v4[11];
  __int128 v5;
  __int128 v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5 = 0u;
  v6 = 0u;
  memset(v4, 0, sizeof(v4));
  _LSDatabaseGetHeader(v4);
  *(_QWORD *)&v5 = a2;
  _LSDatabaseSetHeader(a1);
}

void _LSDatabaseSetHeader(uint64_t a1)
{
  NSObject *v1;

  if (a1)
  {
    if (!_CSStoreWriteToHeader())
    {
      _LSDatabaseGetLog();
      v1 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
        _LSDatabaseSetHeader();

    }
  }
}

void sub_182946B50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

uint64_t _LSDatabaseSessionSetSeedingInProgress(char a1)
{
  LSSessionKey v2;
  uint64_t v3;

  os_unfair_recursive_lock_lock_with_options();
  v2 = (LSSessionKey)_LSServer_SelfSessionKey();
  v3 = _LSGetSession(v2);
  *(_BYTE *)(v3 + 20) = *(_BYTE *)(v3 + 20) & 0xFE | a1;
  return os_unfair_recursive_lock_unlock();
}

uint64_t _LSDatabaseSessionSetSeedingDueToManualRebuild(int a1)
{
  LSSessionKey v2;
  uint64_t v3;
  char v4;

  os_unfair_recursive_lock_lock_with_options();
  v2 = (LSSessionKey)_LSServer_SelfSessionKey();
  v3 = _LSGetSession(v2);
  if (a1)
    v4 = 2;
  else
    v4 = 0;
  *(_BYTE *)(v3 + 20) = *(_BYTE *)(v3 + 20) & 0xFD | v4;
  return os_unfair_recursive_lock_unlock();
}

uint64_t _LSDatabaseGetSessionKey(uint64_t a1)
{
  return *(_QWORD *)(a1 + 1648);
}

void sub_182946EC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a40 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void LSDBHeader::GetCurrentModelCode(_QWORD *a1@<X8>)
{
  void *v3;
  void *v4;
  void *v5;
  id v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", 2);
  v4 = (void *)MGCopyAnswer();
  if (v4)
    objc_msgSend(v3, "addObject:", v4);

  v5 = (void *)MGCopyAnswer();
  if (v5)
    objc_msgSend(v3, "addObject:", v5);

  objc_msgSend(v3, "componentsJoinedByString:", CFSTR("/"));
  v6 = (id)objc_claimAutoreleasedReturnValue();
  if (v6)
    MEMORY[0x186DADE1C](a1, objc_msgSend(objc_retainAutorelease(v6), "UTF8String"));

}

void sub_182946FE0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

void LSDBHeader::GetCurrentCryptexVersion(_QWORD *a1@<X8>)
{
  void *v3;
  uint64_t v4;
  const char *v5;
  id v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  _LSGetCurrentCryptexBuildVersionString();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    v6 = v3;
    v4 = objc_msgSend(objc_retainAutorelease(v3), "UTF8String");
    if (v4)
      v5 = (const char *)v4;
    else
      v5 = "";
    MEMORY[0x186DADE1C](a1, v5);
    v3 = v6;
  }

}

void sub_182947090(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

void _LSDatabaseSetHeaderFlag(_LSDatabase *a1, int a2, int a3)
{
  _LSDatabase *v5;
  int v6;
  _OWORD v7[5];
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  memset(v7, 0, sizeof(v7));
  _LSDatabaseGetHeader(v7);
  if (a3)
    v6 = DWORD2(v8) | a2;
  else
    v6 = DWORD2(v8) & ~a2;
  DWORD2(v8) = v6;
  _LSDatabaseSetHeader((uint64_t)v5);

}

void sub_182947278(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id _LSDatabaseGetSeededSystemVersion()
{
  uint64_t v0;
  __CFString *v1;
  void *v2;
  void **v3;
  void *v4;
  void *__p[2];
  char v7;
  _OWORD v8[2];
  _OWORD v9[6];
  char v10[120];
  char __dst[8];
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  memset(v10, 0, 112);
  memset(v9, 0, sizeof(v9));
  _LSDatabaseGetHeader(v9);
  v8[0] = *(_OWORD *)((char *)v9 + 8);
  v8[1] = *(_OWORD *)((char *)&v9[1] + 8);
  _LSVersionNumberGetStringRepresentation(v8);
  v0 = objc_claimAutoreleasedReturnValue();
  if (v0)
    v1 = (__CFString *)v0;
  else
    v1 = CFSTR("?");
  v2 = (void *)MEMORY[0x1E0CB3940];
  *(_QWORD *)__dst = 0;
  v12 = 0;
  strlcpy(__dst, v10, 0x10uLL);
  std::string::basic_string[abi:nn180100]<0>(__p, __dst);
  if (v7 >= 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  objc_msgSend(v2, "stringWithFormat:", CFSTR("%@ (%s)"), v1, v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7 < 0)
    operator delete(__p[0]);

  return v4;
}

void sub_1829473AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  if (a17 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

id _LSDatabaseGetSeededCryptexVersion(_LSDatabase *a1)
{
  uint64_t v1;
  __CFString *v2;
  void *v3;
  void **v4;
  void *v5;
  void *__p[2];
  char v8;
  _OWORD v9[2];
  _OWORD v10[13];
  char __dst[8];
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  memset(v10, 0, sizeof(v10));
  _LSDatabaseGetHeader(v10);
  v9[0] = *(_OWORD *)((char *)&v10[2] + 8);
  v9[1] = *(_OWORD *)((char *)&v10[3] + 8);
  _LSVersionNumberGetStringRepresentation(v9);
  v1 = objc_claimAutoreleasedReturnValue();
  if (v1)
    v2 = (__CFString *)v1;
  else
    v2 = CFSTR("?");
  v3 = (void *)MEMORY[0x1E0CB3940];
  *(_QWORD *)__dst = 0;
  v12 = 0;
  strlcpy(__dst, (const char *)&v10[4] + 8, 0x10uLL);
  std::string::basic_string[abi:nn180100]<0>(__p, __dst);
  if (v8 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  objc_msgSend(v3, "stringWithFormat:", CFSTR("%@ (%s)"), v2, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v8 < 0)
    operator delete(__p[0]);

  return v5;
}

void sub_1829474F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  if (a17 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

id _LSDatabaseGetSeededModelCode()
{
  unint64_t v0;
  unsigned __int8 v1;
  void **v2;
  void *v3;
  void *__p[2];
  unsigned __int8 v6;
  _OWORD v7[7];
  char v8[96];
  _OWORD __dst[4];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  memset(v8, 0, sizeof(v8));
  memset(v7, 0, sizeof(v7));
  _LSDatabaseGetHeader(v7);
  memset(__dst, 0, sizeof(__dst));
  strlcpy((char *)__dst, v8, 0x40uLL);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)__dst);
  v0 = v6;
  v1 = v6;
  if ((v6 & 0x80u) != 0)
    v0 = (unint64_t)__p[1];
  if (!v0)
  {
    MEMORY[0x186DADE1C](__p, "?");
    v1 = v6;
  }
  if ((v1 & 0x80u) == 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if ((char)v6 < 0)
    operator delete(__p[0]);
  return v3;
}

void sub_18294763C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id *_LSDatabaseCreateFromPersistentStore(char a1, _WORD *a2, _QWORD *a3)
{
  void *v6;
  void *v7;
  int v8;
  NSObject *v9;
  void *v10;
  id *v11;
  id v12;
  void *v13;
  id *v14;
  id v15;
  NSObject *v16;
  NSObject *v17;
  void *v18;
  id v20;
  __int16 v21;
  id v22;
  __int16 v23;

  v23 = 0;
  v6 = (void *)MEMORY[0x186DAE7A0]();
  objc_msgSend((id)__LSDefaultsGetSharedInstance(), "dbRecoveryFileURL");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = _LSDatabaseRecoveryFileExists(v7);

  if (v8)
  {
    _LSDatabaseGetLog();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      _LSDatabaseCreateFromPersistentStore_cold_3();

    v10 = 0;
    v23 = 4;
    if ((a1 & 4) == 0)
    {
LABEL_5:
      v11 = 0;
      v12 = v10;
      goto LABEL_15;
    }
  }
  else
  {
    objc_msgSend((id)__LSDefaultsGetSharedInstance(), "dbRecoveryFileURL");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    _LSDatabaseCreateRecoveryFile(v13);

    v22 = 0;
    v14 = _LSDatabaseCreateFromPersistentStoreIgnoringRecoveryFile(a1, 0, &v23, &v22);
    v15 = v22;
    v10 = v15;
    if (v14)
    {
      v12 = v15;
      v11 = v14;
      goto LABEL_15;
    }
    _LSDatabaseGetLog();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      _LSDatabaseCreateFromPersistentStore_cold_2();

    if ((a1 & 4) == 0)
      goto LABEL_5;
  }
  v21 = 0;
  v20 = v10;
  v11 = _LSDatabaseCreateFromPersistentStoreIgnoringRecoveryFile(a1, 1, &v21, &v20);
  v12 = v20;

  v23 |= v21;
  if (!v11)
  {
    _LSDatabaseGetLog();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      _LSDatabaseCreateFromPersistentStore_cold_1();

  }
LABEL_15:
  objc_msgSend((id)__LSDefaultsGetSharedInstance(), "dbRecoveryFileURL");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  _LSDatabaseDeleteRecoveryFile(v18);

  objc_autoreleasePoolPop(v6);
  if (v11)
  {
    if (a2)
      *a2 = v23;
  }
  else if (a3)
  {
    *a3 = objc_retainAutorelease(v12);
  }

  return v11;
}

void sub_1829478C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _LSDatabaseRecoveryFileExists(void *a1)
{
  uint64_t result;
  char v2[1024];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  result = objc_msgSend(a1, "getFileSystemRepresentation:maxLength:", v2, 1024);
  if ((_DWORD)result)
    return access(v2, 0) == 0;
  return result;
}

void _LSDatabaseCreateRecoveryFile(void *a1)
{
  int v1;
  int v2;
  BOOL v3;
  NSObject *v4;
  NSObject *v5;
  int *v6;
  _BOOL4 v7;
  NSObject *v8;
  int *v9;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  char *v13;
  char v14[1024];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend(a1, "getFileSystemRepresentation:maxLength:", v14, 1024))
  {
    v1 = open_dprotected_np(v14, 2561, 4, 0, 436);
    v2 = v1;
    if (v1 < 0)
    {
      v7 = *__error() == 17;
      _LSDatabaseGetLog();
      v8 = objc_claimAutoreleasedReturnValue();
      v5 = v8;
      if (v7)
      {
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
          _LSDatabaseCreateRecoveryFile_cold_2();
      }
      else if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      {
        v9 = __error();
        _LSDatabaseCreateRecoveryFile_cold_3((uint64_t)v14, v9, buf, v5);
      }
    }
    else
    {
      v3 = close(v1) == 0;
      _LSDatabaseGetLog();
      v4 = objc_claimAutoreleasedReturnValue();
      v5 = v4;
      if (v3)
      {
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446466;
          v11 = "void _LSDatabaseCreateRecoveryFile(NSURL *__strong)";
          v12 = 2082;
          v13 = v14;
          _os_log_impl(&dword_182882000, v5, OS_LOG_TYPE_DEFAULT, "%{public}s: Successfully created recovery file %{public}s", buf, 0x16u);
        }
      }
      else if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      {
        v6 = __error();
        _LSDatabaseCreateRecoveryFile_cold_1(v6, buf, v2, v5);
      }
    }

  }
}

void sub_182947B0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id *_LSDatabaseCreateFromPersistentStoreIgnoringRecoveryFile(char a1, int a2, __int16 *a3, _QWORD *a4)
{
  void *v8;
  void *v9;
  NSObject *v10;
  __int16 v11;
  char v12;
  id *v13;
  const void *v14;
  id v15;
  void *v16;
  id v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  NSObject *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  _BOOL4 v25;
  BOOL v26;
  id *v27;
  id *v28;
  id v30;
  id v31;
  id v32;
  id *v33;
  uint8_t buf[4];
  id *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v33 = 0;
  _LSGetStoreNode();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (a2)
  {
    if ((a1 & 4) == 0)
    {
      _LSDatabaseGetLog();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        _LSDatabaseCreateFromPersistentStoreIgnoringRecoveryFile();

      _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], -50, (uint64_t)"_LSDatabaseCreateFromPersistentStoreIgnoringRecoveryFile", 1868, 0);
      v11 = 64;
      v12 = 1;
      v13 = 0;
      v14 = 0;
      v15 = (id)objc_claimAutoreleasedReturnValue();
      if (!a4)
      {
LABEL_45:
        v17 = v15;
        if (!a3)
          goto LABEL_47;
        goto LABEL_46;
      }
      goto LABEL_42;
    }
    v32 = 0;
    v14 = _LSCreateEmptyStore(&v32);
    v15 = v32;
    if (v14)
    {
      v11 = 1;
      goto LABEL_11;
    }
    _LSDatabaseGetLog();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      _LSDatabaseCreateFromPersistentStoreIgnoringRecoveryFile();

    v13 = 0;
    v14 = 0;
    v11 = 64;
LABEL_41:
    v12 = 1;
    if (!a4)
      goto LABEL_45;
    goto LABEL_42;
  }
  v31 = 0;
  v14 = (const void *)_LSCreateStoreWithFileContents(v8, &v31);
  v15 = v31;
  if (!v14)
  {
    _LSDatabaseGetLog();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      _LSDatabaseCreateFromPersistentStoreIgnoringRecoveryFile();

    if (_LSGetOSStatusFromNSError(v15) == -43)
    {
      v13 = 0;
      v14 = 0;
      v11 = 8;
      goto LABEL_41;
    }
    v15 = v15;
    objc_msgSend(v15, "domain");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = *MEMORY[0x1E0CB2F90];
    if ((objc_msgSend(v22, "isEqualToString:", *MEMORY[0x1E0CB2F90]) & 1) != 0)
    {
      if (objc_msgSend(v15, "code") == -9496)
      {

LABEL_40:
        v13 = 0;
        v14 = 0;
        v11 = 16;
        goto LABEL_41;
      }
      v26 = objc_msgSend(v15, "code") == -9489;

      if (v26)
        goto LABEL_40;
    }
    else
    {

    }
    v15 = v15;
    objc_msgSend(v15, "domain");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v24, "isEqualToString:", v23) & 1) != 0)
    {
      v25 = objc_msgSend(v15, "code") == -9493;

      v13 = 0;
      v14 = 0;
      if (v25)
        v11 = 128;
      else
        v11 = 256;
    }
    else
    {

      v13 = 0;
      v14 = 0;
      v11 = 256;
    }
    goto LABEL_41;
  }
  v11 = 0;
LABEL_11:
  v16 = (void *)_LSServer_SelfSessionKey();
  v30 = v15;
  v13 = _LSDatabaseCreate(v9, v16, v14, &v30);
  v17 = v30;

  v33 = v13;
  if (v13)
  {
    if ((a1 & 2) == 0)
    {
      v12 = 0;
      if (!a3)
        goto LABEL_47;
LABEL_46:
      *a3 = v11;
      goto LABEL_47;
    }
    _LSDatabaseGetLog();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138543362;
      v35 = v13;
      _os_log_impl(&dword_182882000, v20, OS_LOG_TYPE_INFO, "Cleaning new database object %{public}@", buf, 0xCu);
    }

    _LSDatabaseClean((id *)&v33);
    v12 = 0;
    v13 = v33;
  }
  else
  {
    _LSDatabaseGetLog();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      _LSDatabaseCreateFromPersistentStoreIgnoringRecoveryFile();

    v13 = 0;
    v12 = 0;
    v11 |= 0x20u;
  }
  v15 = v17;
  if (!a4)
    goto LABEL_45;
LABEL_42:
  if (v13)
    goto LABEL_45;
  v17 = objc_retainAutorelease(v15);
  v13 = 0;
  *a4 = v17;
  if (a3)
    goto LABEL_46;
LABEL_47:
  v27 = v13;
  v28 = v27;
  if ((v12 & 1) == 0)
  {
    CFRelease(v14);
    v28 = v33;
  }

  return v27;
}

void sub_182947F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void _LSDatabaseDeleteRecoveryFile(void *a1)
{
  id v1;
  std::error_code *v2;
  NSObject *v3;
  int *v4;
  int v5;
  std::__fs::filesystem::path *p_p;
  std::__fs::filesystem::path __p;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (objc_msgSend(v1, "getFileSystemRepresentation:maxLength:", &__p, 1024))
  {
    if (remove(&__p, v2) && *__error() != 2)
    {
      _LSDatabaseGetLog();
      v3 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT))
      {
        v4 = __error();
        _LSDatabaseDeleteRecoveryFile_cold_1((uint64_t)&__p, v4, (uint8_t *)&v5, v3);
      }
    }
    else
    {
      _LSDatabaseGetLog();
      v3 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        v5 = 136446210;
        p_p = &__p;
        _os_log_impl(&dword_182882000, v3, OS_LOG_TYPE_DEFAULT, "Successfully removed recovery file %{public}s", (uint8_t *)&v5, 0xCu);
      }
    }

  }
}

void sub_1829480E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_BYTE *_LSDatabaseCreateCleanForTesting(_QWORD *a1)
{
  _BYTE *result;
  const void *v3;
  unsigned int v4;
  id *v5;
  id *v6;

  result = _LSCreateEmptyStore(a1);
  if (result)
  {
    v3 = result;
    v4 = _CFGetEUID();
    v5 = _LSDatabaseCreate(0, (void *)v4, v3, a1);
    v6 = v5;
    CFRelease(v3);
    if (v5)
    {
      *((_BYTE *)v5 + 1664) |= 2u;
      _LSDatabaseClean((id *)&v6);
      result = v6;
      *((_BYTE *)v6 + 1664) |= 2u;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_182948194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

CFTypeRef _LSCreateEmptyStore(_QWORD *a1)
{
  const void *Mutable;
  uint64_t v3;
  int v4;
  uint64_t i;
  uint64_t v6;
  int v7;
  const char **v8;
  unint64_t v9;
  const char *v10;
  CFTypeRef v11;
  void *v12;
  void *v13;
  id v15;
  const __CFString *v16;
  void *v17;
  const __CFString *v18;
  uint64_t v19;
  _OWORD v20[13];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v15 = 0;
  Mutable = (const void *)CSStoreCreateMutable();
  if (!Mutable)
  {
    v11 = 0;
    if (!a1)
      goto LABEL_25;
    goto LABEL_23;
  }
  memset(v20, 0, sizeof(v20));
  if (_CSStoreAddTable())
  {
    LSDBHeader::reset((LSDBHeader *)v20);
    if (_CSStoreWriteToHeader())
    {
      v3 = 0;
      while (_CSStoreAddTable())
      {
        v3 += 16;
        if (v3 == 192)
        {
          v4 = CSBindableKeyMapAddTable();
          if (v4)
          {
            _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], v4, (uint64_t)"_LSCreateEmptyStore", 595, 0);
            v12 = 0;
            v15 = (id)objc_claimAutoreleasedReturnValue();
          }
          else
          {
            for (i = 0; i != 448; i += 32)
            {
              v6 = *(_QWORD *)((char *)&kLSBindingInfo + i);
              v7 = CSStringBindingStoreAddTable();
              if (v7)
              {
                v18 = CFSTR("Table");
                v19 = v6;
                objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v19, &v18, 1);
                v12 = (void *)objc_claimAutoreleasedReturnValue();
                _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], v7, (uint64_t)"_LSCreateEmptyStore", 601, v12);
                v15 = (id)objc_claimAutoreleasedReturnValue();

                goto LABEL_20;
              }
            }
            v8 = (const char **)&off_1E1042670;
            v9 = -6;
            while (1)
            {
              if (v9 >= 8)
              {
                v10 = *v8;
                strlen(*v8);
                if (!_CSGetConstStringForCharacters())
                  break;
              }
              v8 += 4;
              if (++v9 == 8)
              {
                v11 = CFRetain(Mutable);
                goto LABEL_22;
              }
            }
            v16 = CFSTR("BindingClass");
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v10);
            v12 = (void *)objc_claimAutoreleasedReturnValue();
            v17 = v12;
            objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v17, &v16, 1);
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], -10817, (uint64_t)"_LSCreateEmptyStore", 609, v13);
            v15 = (id)objc_claimAutoreleasedReturnValue();

          }
LABEL_20:

          break;
        }
      }
    }
  }
  v11 = 0;
LABEL_22:
  CFRelease(Mutable);
  if (a1)
  {
LABEL_23:
    if (!v11)
    {
      v11 = 0;
      *a1 = objc_retainAutorelease(v15);
    }
  }
LABEL_25:

  return v11;
}

void sub_1829484C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  const void *v10;
  void *v11;
  void *v12;

  CFRelease(v10);
  _Unwind_Resume(a1);
}

void _LSDatabaseClean(id *a1)
{
  NSObject *v2;
  int v3;
  FSNode *v4;
  NSObject *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  __CFString *v10;
  uint64_t v11;
  const __CFDictionary *v12;
  void *v13;
  FSNode *v14;
  FSNode *v15;
  id v16;
  NSObject *v17;
  NSObject *v18;
  NSString *v19;
  int v20;
  NSObject *v21;
  NSObject *v22;
  NSObject *v23;
  LSHandlerPref *v24;
  const __CFArray *v25;
  _LSDatabase *v26;
  NSObject *v27;
  id v28;
  NSObject *v29;
  void *v30;
  NSObject *v31;
  id v32;
  id v33;
  id v34;
  id v35;
  NSObject *v36;
  uint64_t v37;
  void *v38;
  id *location;
  void *v40;
  id obj;
  uint64_t v42;
  id v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(uint64_t, uint64_t, __int128 *);
  void *v51;
  id v52;
  id v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE v58[128];
  const __CFString *v59;
  const __CFString *v60;
  uint8_t v61[4];
  uint64_t v62;
  __int16 v63;
  void *v64;
  _BYTE buf[24];
  void *v66;
  id v67;
  uint64_t *v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  kdebug_trace();
  location = a1;
  v53 = *a1;
  v48 = MEMORY[0x1E0C809B0];
  v49 = 3321888768;
  v50 = ___ZL16_LSDatabaseCleanPU8__strongP11_LSDatabase_block_invoke;
  v51 = &__block_descriptor_40_ea8_32c14_ZTS9LSContext_e19_v32__0I8r_v12I20_24l;
  v52 = v53;
  _CSStoreEnumerateUnits();
  _LSDatabaseGetLog();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_182882000, v2, OS_LOG_TYPE_DEFAULT, "Registering CoreTypes bundle", buf, 2u);
  }

  v59 = CFSTR("ApplicationType");
  v60 = CFSTR("Hidden");
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v60, &v59, 1);
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = -[_LSDatabase isSeeded]((uint64_t)v53);
  v4 = -[FSNode initWithFileSystemRepresentation:flags:error:]([FSNode alloc], "initWithFileSystemRepresentation:flags:error:", "/System/Library/CoreServices/MobileCoreTypes.bundle", 0, 0);
  if (v4 && _LSFindOrRegisterBundleNode(&v53, v4, 0, v3 ^ 1 | 0x11000000u, v40, 0, 0))
  {
    _LSDatabaseGetLog();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      _LSDatabaseClean();

  }
  _LSDatabaseGetLog();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_182882000, v6, OS_LOG_TYPE_DEFAULT, "Registering extension points", buf, 2u);
  }

  objc_msgSend((id)getEXEnumeratorClass(), "extensionPointDefinitionEnumerator");
  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  obj = (id)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v44, v58, 16);
  if (v7)
  {
    v42 = *(_QWORD *)v45;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v45 != v42)
          objc_enumerationMutation(obj);
        v9 = *(void **)(*((_QWORD *)&v44 + 1) + 8 * i);
        objc_msgSend(v9, "identifier");
        v10 = (__CFString *)objc_claimAutoreleasedReturnValue();
        v11 = objc_msgSend(v9, "platform");
        objc_msgSend(v9, "SDKDictionary");
        v12 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "url");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = [FSNode alloc];
        v43 = 0;
        v15 = -[FSNode initWithURL:flags:error:](v14, "initWithURL:flags:error:", v13, 8, &v43);
        v16 = v43;
        if (!v15)
        {
          _LSDatabaseGetLog();
          v17 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138543618;
            *(_QWORD *)&buf[4] = v13;
            *(_WORD *)&buf[12] = 2114;
            *(_QWORD *)&buf[14] = v16;
            _os_log_error_impl(&dword_182882000, v17, OS_LOG_TYPE_ERROR, "Failed to create node for framework %{public}@: %{public}@", buf, 0x16u);
          }

        }
        _LSExtensionsLog();
        v18 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "void _LSDatabaseClean(LSDatabaseHandle)";
          *(_WORD *)&buf[12] = 2112;
          *(_QWORD *)&buf[14] = v9;
          _os_log_debug_impl(&dword_182882000, v18, OS_LOG_TYPE_DEBUG, "%s Registering extension point '%@'", buf, 0x16u);
        }

        if ((objc_msgSend((id)__LSDefaultsGetSharedInstance(), "isServer") & 1) != 0
          || -[FSNode canReadFromSandboxWithAuditToken:](v15, "canReadFromSandboxWithAuditToken:", 0))
        {
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("registering extension point %@ at URL %@"), v10, v13, location);
          v19 = (NSString *)objc_claimAutoreleasedReturnValue();
          LSCrashMessage::LSCrashMessage((LSCrashMessage *)&v54, v19);

          v20 = _LSRegisterFrameworkExtensionPointIfNecessary(v53, 0, v10, v11, v12, v13);
          if (v20)
          {
            _LSDatabaseGetLog();
            v21 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218242;
              *(_QWORD *)&buf[4] = v20;
              *(_WORD *)&buf[12] = 2114;
              *(_QWORD *)&buf[14] = v13;
              _os_log_error_impl(&dword_182882000, v21, OS_LOG_TYPE_ERROR, "Error %ld registering extension points inside framework %{public}@", buf, 0x16u);
            }

          }
          LSCrashMessage::~LSCrashMessage((LSCrashMessage *)&v54);
        }

      }
      v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v44, v58, 16);
    }
    while (v7);
  }

  _LSDatabaseGetLog();
  v22 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_182882000, v22, OS_LOG_TYPE_DEFAULT, "Done reregistering extension points", buf, 2u);
  }

  _LSDatabaseGetLog();
  v23 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_182882000, v23, OS_LOG_TYPE_DEFAULT, "Loading handler preferences", buf, 2u);
  }

  v24 = (LSHandlerPref *)v53;
  if (v53)
    _LSDatabaseSetHeaderFlag((_LSDatabase *)v53, 1, 0);
  v26 = (_LSDatabase *)LSHandlerPref::CopyHandlers(v24);
  if (v26)
  {
    LSHandlerPref::Load((LSHandlerPref *)v53, v26, v25);
    if (v53)
      _LSDatabaseSetHeaderFlag((_LSDatabase *)v53, 1, 1);
    CFRelease(v26);
  }
  _LSDatabaseGetLog();
  v27 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_182882000, v27, OS_LOG_TYPE_DEFAULT, "Registering canonical names", buf, 2u);
  }

  v28 = v53;
  _LSDatabaseGetLog();
  v29 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_182882000, v29, OS_LOG_TYPE_DEFAULT, "Registering canonical names", buf, 2u);
  }

  v30 = (void *)MEMORY[0x186DAE7A0]();
  _LSDatabaseGetLog();
  v31 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_182882000, v31, OS_LOG_TYPE_DEFAULT, "Registering framework bundle localized strings", buf, 2u);
  }

  v32 = +[_LSStringLocalizer newFrameworkBundleLocalizer](_LSStringLocalizer, "newFrameworkBundleLocalizer");
  v33 = v28;
  v34 = v32;
  v54 = 0;
  v55 = &v54;
  v56 = 0x2020000000;
  v57 = 0;
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  *(_QWORD *)&buf[8] = 3221225472;
  *(_QWORD *)&buf[16] = ___ZL52_LSDatabaseRegisterCanonicalNamesFromStringLocalizerP11_LSDatabaseP18_LSStringLocalizer_block_invoke;
  v66 = &unk_1E1042A28;
  v35 = v33;
  v67 = v35;
  v68 = &v54;
  objc_msgSend(v34, "enumerateLocalizedStringsUsingBlock:", buf);
  if (v55[3])
  {
    _LSDatabaseGetLog();
    v36 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
    {
      v37 = v55[3];
      objc_msgSend(v34, "debugDescription");
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)v61 = 134218242;
      v62 = v37;
      v63 = 2114;
      v64 = v38;
      _os_log_impl(&dword_182882000, v36, OS_LOG_TYPE_DEFAULT, "Registered %llu new canonical strings from string localizer %{public}@", v61, 0x16u);

    }
  }

  _Block_object_dispose(&v54, 8);
  objc_autoreleasePoolPop(v30);

  if ((objc_msgSend((id)__LSDefaultsGetSharedInstance(), "hasServer") & 1) == 0
    && (objc_msgSend((id)__LSDefaultsGetSharedInstance(), "isServer") & 1) == 0)
  {
    -[_LSDatabase setSeeded:]((uint64_t)v53, 1);
  }
  objc_storeStrong(location, v53);
  kdebug_trace();

}

void sub_182948DA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,void *a36,char a37)
{
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  uint64_t v41;

  _Block_object_dispose(&a37, 8);
  _Unwind_Resume(a1);
}

void _LSDatabaseCommit(uint64_t a1)
{
  LaunchServices::notifyd::NotifyToken *v1;
  NSObject *v2;
  NSString *v3;

  objc_msgSend((id)__LSDefaultsGetSharedInstance(), "databaseUpdateNotificationNameForSessionKey:", *(_QWORD *)(a1 + 1648));
  v1 = (LaunchServices::notifyd::NotifyToken *)objc_claimAutoreleasedReturnValue();
  _LSDatabaseGetLog();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    _LSDatabaseCommit_cold_1();

  LaunchServices::notifyd::NotifyToken::Post(v1, v3);
}

void sub_182948FE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

time_t LSDBHeader::reset(LSDBHeader *this)
{
  void **v2;
  void **v3;
  void **v4;
  time_t result;
  void *__p[2];
  char v7;

  *(_DWORD *)this = objc_msgSend((id)__LSDefaultsGetSharedInstance(), "currentSchemaVersion");
  *((_DWORD *)this + 1) = 208;
  *(_OWORD *)((char *)this + 8) = kLSVersionNumberNull;
  *(_OWORD *)((char *)this + 24) = *(_OWORD *)algn_1829FAD90;
  *((_QWORD *)this + 11) = 0;
  std::string::basic_string[abi:nn180100]<0>(__p, "");
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  if (v7 >= 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  strlcpy((char *)this + 96, (const char *)v2, 0x10uLL);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "");
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  if (v7 >= 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  strlcpy((char *)this + 72, (const char *)v3, 0x10uLL);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "");
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 8) = 0u;
  if (v7 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  strlcpy((char *)this + 112, (const char *)v4, 0x40uLL);
  if (v7 < 0)
    operator delete(__p[0]);
  *((_QWORD *)this + 22) = 0;
  uuid_generate_random((unsigned __int8 *)this + 184);
  result = time(0);
  *((_QWORD *)this + 25) = result;
  return result;
}

void sub_182949130(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL _LSDatabaseSaveSystemContentDatabase(void *a1, _QWORD *a2)
{
  id v3;
  void *v4;
  id SnapshotAgainstAccessContext;
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  _LSDatabase *v11;
  int *v12;
  int *i;
  int *v14;
  int *v15;
  _BOOL8 v16;
  char v17;
  _QWORD *v19;
  id v20;
  void *v21;
  id v22[5];
  _LSDatabase *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t, _DWORD *);
  void *v29;
  id v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  __n128 (*v36)(__n128 *, __n128 *);
  void (*v37)(uint64_t);
  const char *v38;
  void *__p;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  __n128 (*v45)(__n128 *, __n128 *);
  void (*v46)(uint64_t);
  const char *v47;
  void *v48;
  void *v49;
  uint64_t v50;

  v3 = a1;
  v4 = (void *)MEMORY[0x186DAE7A0]();
  v22[0] = 0;
  SnapshotAgainstAccessContext = _LSDatabaseCreateSnapshotAgainstAccessContext(v3, 0, v22);
  v6 = v22[0];
  v7 = v6;
  if (SnapshotAgainstAccessContext)
  {
    v20 = v3;
    v21 = v6;
    v19 = a2;
    v8 = SnapshotAgainstAccessContext;
    v42 = 0;
    v43 = &v42;
    v44 = 0x4812000000;
    v45 = __Block_byref_object_copy__15;
    v46 = __Block_byref_object_dispose__15;
    v47 = "";
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v33 = 0;
    v34 = &v33;
    v35 = 0x4812000000;
    v36 = __Block_byref_object_copy__15;
    v37 = __Block_byref_object_dispose__15;
    v38 = "";
    __p = 0;
    v40 = 0;
    v41 = 0;
    v9 = (void *)MEMORY[0x1E0C809B0];
    v26 = MEMORY[0x1E0C809B0];
    v27 = 3221225472;
    v28 = ___ZL41_LSSystemContentDatabaseSanitizeForExportP11_LSDatabase_block_invoke;
    v29 = &unk_1E1042A50;
    v31 = &v42;
    v10 = v8;
    v30 = v10;
    v32 = &v33;
    _CSStoreEnumerateUnits();
    v22[1] = v9;
    v22[2] = (id)3221225472;
    v22[3] = ___ZL41_LSSystemContentDatabaseSanitizeForExportP11_LSDatabase_block_invoke_2;
    v22[4] = &unk_1E1042A50;
    v24 = &v42;
    v11 = (_LSDatabase *)v10;
    v23 = v11;
    v25 = &v33;
    _CSStoreEnumerateUnits();
    v12 = (int *)v43[6];
    for (i = (int *)v43[7]; v12 != i; ++v12)
      _LSAliasRemove(v11, *v12);
    v14 = (int *)v34[6];
    v15 = (int *)v34[7];
    while (v14 != v15)
      _LSPlistRemove((uint64_t)v11, *v14++);

    _Block_object_dispose(&v33, 8);
    if (__p)
    {
      v40 = __p;
      operator delete(__p);
    }
    _Block_object_dispose(&v42, 8);
    a2 = v19;
    if (v48)
    {
      v49 = v48;
      operator delete(v48);
    }

    -[_LSDatabase setSeeded:]((uint64_t)v11, 1);
    _LSDatabaseSetHeaderFlag(v11, 2, 0);
    objc_msgSend((id)__LSDefaultsGetSharedInstance(), "systemContentDatabaseStoreFileURL");
    _LSDatabaseGetFileResourceProperties();
    v16 = _CSStoreWriteToURL() != 0;

    v7 = 0;
    v3 = v20;
  }
  else
  {
    v16 = 0;
  }

  objc_autoreleasePoolPop(v4);
  if (a2)
    v17 = v16;
  else
    v17 = 1;
  if ((v17 & 1) == 0)
    *a2 = objc_retainAutorelease(v7);

  return v16;
}

void sub_182949424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35)
{
  void *v35;
  uint64_t v36;
  void *v38;

  _Block_object_dispose(&a28, 8);
  if (__p)
  {
    a35 = (uint64_t)__p;
    operator delete(__p);
  }
  _Block_object_dispose((const void *)(v36 - 176), 8);
  v38 = *(void **)(v36 - 128);
  if (v38)
  {
    *(_QWORD *)(v36 - 120) = v38;
    operator delete(v38);
  }

  _Unwind_Resume(a1);
}

id _LSDatabaseGetFileResourceProperties(void)
{
  void *v0;
  __CFFileSecurity *v1;
  mode_t v2;

  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  if (v0)
  {
    v1 = CFFileSecurityCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
    if (v1)
    {
      v2 = objc_msgSend((id)__LSDefaultsGetSharedInstance(), "databaseStoreFileMode");
      CFFileSecuritySetMode(v1, v2);
      objc_msgSend(v0, "setObject:forKeyedSubscript:", v1, *MEMORY[0x1E0C99990]);
      CFRelease(v1);
    }
    objc_msgSend(v0, "setObject:forKeyedSubscript:", *MEMORY[0x1E0C99940], *MEMORY[0x1E0C99938]);
  }
  return v0;
}

void sub_182949570(_Unwind_Exception *a1)
{
  void *v1;
  const void *v2;

  CFRelease(v2);

  _Unwind_Resume(a1);
}

uint64_t _LSDatabaseFindBindingMapIndexWithTargetTable(uint64_t a1, int a2)
{
  uint64_t result;
  int *v4;
  int v5;

  result = 0;
  v4 = (int *)(a1 + 136);
  while (1)
  {
    v5 = *v4;
    v4 += 26;
    if (v5 == a2)
      break;
    if (++result == 14)
      return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t _LSDatabaseFindBindingMapTargetTable(void *a1, int a2)
{
  char *v3;
  uint64_t v4;

  v3 = a1;
  if (a2 > 13 || (unint64_t)(a2 - 6) > 7)
    v4 = 0;
  else
    v4 = *(unsigned int *)&v3[*((_QWORD *)&kLSBindingInfo + 4 * a2 + 3) + 16];

  return v4;
}

uint64_t _LSDatabaseCreateStringForCFString(void *a1, const __CFString *a2, int a3)
{
  id v5;
  CFTypeID v6;
  CFIndex Length;
  uint64_t v8;
  _QWORD v10[21];

  v10[20] = *MEMORY[0x1E0C80C00];
  v5 = a1;
  if (!a2 || (v6 = CFGetTypeID(a2), v6 != CFStringGetTypeID()))
  {
    XCFBufInit((uint64_t)v10);
    goto LABEL_6;
  }
  Length = CFStringGetLength(a2);
  if (!XCFBufInitWithCFStringRange((uint64_t)v10, a2, 0, Length, a3))
  {
LABEL_6:
    v8 = 0;
    goto LABEL_7;
  }
  v8 = _CSCopyStringForCharacters();
  XCFBufDestroy((uint64_t)v10);
LABEL_7:

  return v8;
}

void sub_1829496FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _LSDatabaseCreateStringArray(void *a1, void *a2, int a3, _BYTE *a4)
{
  id v7;
  id v8;
  uint64_t StringArrayCommon;

  v7 = a1;
  v8 = a2;
  StringArrayCommon = _LSDatabaseCreateStringArrayCommon(v7, v8, objc_msgSend(v8, "count"), 0, a3, a4);

  return StringArrayCommon;
}

void sub_182949780(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t _LSDatabaseCreateStringArrayCommon(void *a1, void *a2, std::vector<unsigned int>::size_type a3, int a4, int a5, _BYTE *a6)
{
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  const __CFString *v14;
  BOOL v15;
  unsigned int StringForCFString;
  unsigned int v17;
  std::vector<unsigned int>::pointer end;
  unsigned int *v19;
  std::vector<unsigned int>::pointer v20;
  unsigned int *v21;
  std::vector<unsigned int>::pointer v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  char *v27;
  NSObject *v28;
  unsigned int *v29;
  unsigned int v30;
  NSObject *v31;
  std::vector<unsigned int>::pointer begin;
  int64_t v33;
  unint64_t v34;
  int64_t v35;
  unint64_t v36;
  char *v37;
  unsigned int *v38;
  unsigned int v39;
  objc_class *v40;
  void *v41;
  uint64_t v42;
  NSObject *v43;
  id v45;
  id v47;
  uint8_t v48;
  _BYTE v49[15];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  std::vector<unsigned int> v54;
  uint8_t buf[4];
  int64_t v56;
  __int16 v57;
  void *v58;
  _BYTE v59[128];
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v47 = a1;
  v45 = a2;
  if (a6)
    *a6 = 0;
  memset(&v54, 0, sizeof(v54));
  std::vector<unsigned int>::reserve(&v54, a3);
  v52 = 0u;
  v53 = 0u;
  v50 = 0u;
  v51 = 0u;
  v10 = v45;
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v50, v59, 16);
  if (v11)
  {
    v12 = *(_QWORD *)v51;
    do
    {
      for (i = 0; i != v11; ++i)
      {
        if (*(_QWORD *)v51 != v12)
          objc_enumerationMutation(v10);
        v14 = *(const __CFString **)(*((_QWORD *)&v50 + 1) + 8 * i);
        if (v14)
          v15 = 1;
        else
          v15 = a4 == 0;
        if (v15)
        {
          if (!_NSIsNSString())
          {
            if (a6)
              *a6 = 1;
            _LSDatabaseGetLog();
            v28 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
            {
              v40 = (objc_class *)objc_opt_class();
              NSStringFromClass(v40);
              v41 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138478083;
              v56 = (int64_t)v14;
              v57 = 2114;
              v58 = v41;
              _os_log_debug_impl(&dword_182882000, v28, OS_LOG_TYPE_DEBUG, "Expected %{private}@ to be a string, but instead it was a %{public}@", buf, 0x16u);

            }
            goto LABEL_31;
          }
          StringForCFString = _LSDatabaseCreateStringForCFString(v47, v14, a5);
          v17 = StringForCFString;
          if (!StringForCFString)
          {
            if (a6)
              *a6 = 1;
            _LSDatabaseGetLog();
            v28 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138477827;
              v56 = (int64_t)v14;
              _os_log_error_impl(&dword_182882000, v28, OS_LOG_TYPE_ERROR, "Could not create a CSString for CFString %{private}@", buf, 0xCu);
            }
LABEL_31:

            continue;
          }
          end = v54.__end_;
          if (v54.__end_ >= v54.__end_cap_.__value_)
          {
            begin = v54.__begin_;
            v33 = v54.__end_ - v54.__begin_;
            v34 = v33 + 1;
            if ((unint64_t)(v33 + 1) >> 62)
              abort();
            v35 = (char *)v54.__end_cap_.__value_ - (char *)v54.__begin_;
            if (((char *)v54.__end_cap_.__value_ - (char *)v54.__begin_) >> 1 > v34)
              v34 = v35 >> 1;
            if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL)
              v36 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v36 = v34;
            if (v36)
            {
              v37 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>((uint64_t)&v54.__end_cap_, v36);
              begin = v54.__begin_;
              end = v54.__end_;
            }
            else
            {
              v37 = 0;
            }
            v38 = (unsigned int *)&v37[4 * v33];
            *v38 = v17;
            v19 = v38 + 1;
            while (end != begin)
            {
              v39 = *--end;
              *--v38 = v39;
            }
            v54.__begin_ = v38;
            v54.__end_ = v19;
            v54.__end_cap_.__value_ = (unsigned int *)&v37[4 * v36];
            if (begin)
              operator delete(begin);
          }
          else
          {
            *v54.__end_ = StringForCFString;
            v19 = end + 1;
          }
          v54.__end_ = v19;
        }
        else
        {
          v20 = v54.__end_;
          if (v54.__end_ >= v54.__end_cap_.__value_)
          {
            v22 = v54.__begin_;
            v23 = v54.__end_ - v54.__begin_;
            v24 = v23 + 1;
            if ((unint64_t)(v23 + 1) >> 62)
              abort();
            v25 = (char *)v54.__end_cap_.__value_ - (char *)v54.__begin_;
            if (((char *)v54.__end_cap_.__value_ - (char *)v54.__begin_) >> 1 > v24)
              v24 = v25 >> 1;
            if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
              v26 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v26 = v24;
            if (v26)
            {
              v27 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>((uint64_t)&v54.__end_cap_, v26);
              v22 = v54.__begin_;
              v20 = v54.__end_;
            }
            else
            {
              v27 = 0;
            }
            v29 = (unsigned int *)&v27[4 * v23];
            *v29 = 0;
            v21 = v29 + 1;
            while (v20 != v22)
            {
              v30 = *--v20;
              *--v29 = v30;
            }
            v54.__begin_ = v29;
            v54.__end_ = v21;
            v54.__end_cap_.__value_ = (unsigned int *)&v27[4 * v26];
            if (v22)
              operator delete(v22);
          }
          else
          {
            *v54.__end_ = 0;
            v21 = v20 + 1;
          }
          v54.__end_ = v21;
          _LSDatabaseGetLog();
          v31 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
            _LSDatabaseCreateStringArrayCommon(&v48, v49, v31);

        }
      }
      v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v50, v59, 16);
    }
    while (v11);
  }

  v42 = _CSArrayCreate();
  if (!(_DWORD)v42)
  {
    _LSDatabaseGetLog();
    v43 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218242;
      v56 = v54.__end_ - v54.__begin_;
      v57 = 2114;
      v58 = 0;
      _os_log_error_impl(&dword_182882000, v43, OS_LOG_TYPE_ERROR, "Failed to create CSArray with %zu elements: %{public}@", buf, 0x16u);
    }

  }
  if (v54.__begin_)
  {
    v54.__end_ = v54.__begin_;
    operator delete(v54.__begin_);
  }

  return v42;
}

void sub_182949C5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t _LSDatabaseCreateStringArrayWithNullValues(void *a1, void *a2, int a3, _BYTE *a4)
{
  id v7;
  id v8;
  uint64_t StringArrayCommon;

  v7 = a1;
  v8 = a2;
  StringArrayCommon = _LSDatabaseCreateStringArrayCommon(v7, v8, objc_msgSend(v8, "count"), 1, a3, a4);

  return StringArrayCommon;
}

void sub_182949D4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void _LSDatabaseDisposeStringArray(void *a1, int a2)
{
  id v3;
  id v4;
  id v5;

  v3 = a1;
  if (a2)
  {
    v4 = v3;
    v5 = v3;
    _CSArrayEnumerateAllValues();
    _CSArrayDispose();

    v3 = v4;
  }

}

void sub_182949DFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

id _LSDatabaseCreateSnapshot(void *a1, _QWORD *a2)
{
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  id SnapshotAgainstAccessContext;

  v3 = a1;
  v4 = v3;
  if (v3)
    v5 = v3[207];
  else
    v5 = 0;
  SnapshotAgainstAccessContext = _LSDatabaseCreateSnapshotAgainstAccessContext(v3, v5, a2);

  return SnapshotAgainstAccessContext;
}

void sub_182949E74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _LSDatabaseSetMutable()
{
  return _CSStoreSetMutable();
}

unsigned __int8 *LSResetDatabaseKnownAvailable(_LSDServiceDomain *a1)
{
  unsigned __int8 *result;

  result = (unsigned __int8 *)availabilityStateForServiceDomain(a1);
  atomic_store(0, result);
  return result;
}

uint64_t __LAUNCH_SERVICES_IS_GENERATING_A_SANDBOX_EXCEPTION_BECAUSE_THIS_PROCESS_IS_USING_INSECURE_SPI__()
{
  uint64_t result;

  result = _LSCurrentProcessMayMapDatabase();
  if ((_DWORD)result)
    return __LAUNCH_SERVICES_IS_GENERATING_A_SANDBOX_EXCEPTION__("forbidden-ls-deprecated-symbol");
  return result;
}

uint64_t __LAUNCH_SERVICES_IS_GENERATING_A_SANDBOX_EXCEPTION__(const char *a1)
{
  uint64_t result;

  result = objc_msgSend((id)__LSDefaultsGetSharedInstance(), "issueSandboxExceptionsIfMayNotMapDatabase");
  if ((_DWORD)result)
  {
    _LSGetAuditTokenForSelf();
    return sandbox_check_by_audit_token();
  }
  return result;
}

void __LAUNCH_SERVICES_IS_FAULTING_BECAUSE_THIS_PROCESS_IS_USING_VERY_EXPENSIVE_SPI__()
{
  NSObject *v0;
  uint8_t v1[16];

  _LSDefaultLog();
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)v1 = 0;
    _os_log_fault_impl(&dword_182882000, v0, OS_LOG_TYPE_FAULT, "This process is not entitled to map the LS database. It is using SPI that is very expensive, causing many megabytes of memory to be dirtied in both the client (this process) and the database server. This will become a hard abort soon.", v1, 2u);
  }

}

void _LSContextInvalidate()
{
  NSObject *v0;
  unint64_t v1;
  LSSessionKey v2;
  void *v3;
  _QWORD v4[4];

  v4[3] = *MEMORY[0x1E0C80C00];
  if (objc_msgSend((id)__LSDefaultsGetSharedInstance(), "isServer"))
  {
    _LSDatabaseGetLog();
    v0 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_DEBUG))
      _LSContextInvalidate_cold_1();
  }
  else
  {
    v1 = _CFGetEUID();
    v2 = (LSSessionKey)v1;
    _LSReleaseLocalDatabase(v2);
    _LSDatabaseGetLog();
    v0 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_DEBUG))
    {
      v3 = (void *)_LSSessionKeyCopyDescription(v1);
      _LSContextInvalidate_cold_2(v3, (uint64_t)v4, v0);
    }
  }

}

void sub_18294A038(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL _LSContextInitWithPath(id *a1, uint64_t a2, _QWORD *a3)
{
  FSNode *v6;
  FSNode *v7;
  const void *v8;
  id *v9;
  _BOOL8 v10;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  if (!a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "BOOL _LSContextInitWithPath(LSContext *, const char *, NSError *__autoreleasing *)");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "handleFailureInFunction:file:lineNumber:description:", v13, CFSTR("LSDatabase.mm"), 3272, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("ioContext != NULL"));

    if (a2)
      goto LABEL_3;
LABEL_11:
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "BOOL _LSContextInitWithPath(LSContext *, const char *, NSError *__autoreleasing *)");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "handleFailureInFunction:file:lineNumber:description:", v15, CFSTR("LSDatabase.mm"), 3273, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("inPath != NULL"));

    goto LABEL_3;
  }
  if (!a2)
    goto LABEL_11;
LABEL_3:
  *a1 = 0;
  v6 = -[FSNode initWithFileSystemRepresentation:flags:error:]([FSNode alloc], "initWithFileSystemRepresentation:flags:error:", a2, 0, a3);
  v7 = v6;
  if (v6 && (v8 = (const void *)_LSCreateStoreWithFileContents(v6, a3)) != 0)
  {
    v9 = _LSDatabaseCreate(v7, (void *)0xFFFFFFFELL, v8, a3);
    v10 = v9 != 0;
    if (v9)
      objc_storeStrong(a1, v9);

    CFRelease(v8);
  }
  else
  {
    v10 = 0;
  }

  return v10;
}

void sub_18294A1EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t _LSContextUpdate(void **a1, int a2, _QWORD *a3)
{
  LSSessionKey v5;
  void *v7;
  LSSessionKey v8;

  if (a2
    && (objc_msgSend((id)__LSDefaultsGetSharedInstance(), "isServer") & 1) == 0
    && objc_msgSend((id)__LSDefaultsGetSharedInstance(), "hasServer"))
  {
    if (a1 && *a1)
    {
      v5 = (LSSessionKey)*((_QWORD *)*a1 + 206);
      _LSReleaseLocalDatabase(v5);
LABEL_9:
      _LSContextDestroy(a1);
      return _LSContextInitReturningError(a1, a3);
    }
    +[_LSDServiceDomain defaultServiceDomain]();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = (LSSessionKey)-[_LSDServiceDomain resolvedSessionKey]((uint64_t)v7);
    _LSReleaseLocalDatabase(v8);

    if (a1)
      goto LABEL_9;
  }
  else if (a1 && _LSDatabaseNeedsUpdate((_LSDatabase *)*a1))
  {
    goto LABEL_9;
  }
  return 1;
}

void sub_18294A2D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _LSReleaseLocalDatabase(LSSessionKey a1)
{
  LSSessionKey v2;
  id *v3;
  id v4;
  char v5;
  NSObject *v6;
  int v8;
  const char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  os_unfair_recursive_lock_lock_with_options();
  v2 = a1;
  v3 = (id *)_LSGetSession(v2);
  v4 = v3[3];
  if (v4 && (v5 = *((_BYTE *)v3[3] + 1664), v4, (v5 & 4) != 0))
  {
    _LSDatabaseGetLog();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v8 = 136446210;
      v9 = "void _LSReleaseLocalDatabase(LSSessionKey)";
      _os_log_impl(&dword_182882000, v6, OS_LOG_TYPE_INFO, "Ignoring call to %{public}s because the database was pushed by another process.", (uint8_t *)&v8, 0xCu);
    }

  }
  else
  {
    LSSession::setDatabase((LSSession *)v3, 0);
  }
  return os_unfair_recursive_lock_unlock();
}

uint64_t _LSDatabaseGetNoServerLock()
{
  if (_LSDatabaseGetNoServerLock::once != -1)
    dispatch_once(&_LSDatabaseGetNoServerLock::once, &__block_literal_global_83);
  return _LSDatabaseGetNoServerLock::result;
}

_LSChangeObserver *_LSContextAddChangeObserver(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  _LSChangeObserver *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  NSObject *v13;
  void *v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  _LSChangeObserver *v19;
  id v20;
  NSObject *v21;
  _LSChangeObserver *v22;
  _LSChangeObserver *v23;
  _LSChangeObserver *v24;
  id v26;
  void *v27;
  _QWORD block[4];
  _LSChangeObserver *v29;
  _QWORD v30[4];
  _LSChangeObserver *v31;
  id v32;
  uint8_t buf[4];
  id v34;
  __int16 v35;
  id v36;
  __int16 v37;
  void *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = objc_alloc_init(_LSChangeObserver);
  v8 = *(unsigned int *)(*(_QWORD *)a1 + 1648);
  v9 = *(unsigned int *)(*(_QWORD *)a1 + 1652);
  v10 = -[_LSDServiceDomain resolvedSessionKey]((uint64_t)v5);
  v11 = v10;
  v12 = v8 | (v9 << 32);
  if ((v9 & 1) != 0)
  {
    if ((v10 & 0x100000000) != 0)
      goto LABEL_9;
  }
  else if ((v10 & 0x100000000) == 0 && (_DWORD)v8 == (_DWORD)v10)
  {
    goto LABEL_9;
  }
  _LSDefaultLog();
  v13 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
  {
    v26 = (id)_LSSessionKeyCopyDescription(v12);
    v27 = (void *)_LSSessionKeyCopyDescription(v11);
    *(_DWORD *)buf = 138412802;
    v34 = v26;
    v35 = 2112;
    v36 = v5;
    v37 = 2112;
    v38 = v27;
    _os_log_fault_impl(&dword_182882000, v13, OS_LOG_TYPE_FAULT, "Adding change observer for context with session key %@ but service domain %@ implied session key %@", buf, 0x20u);

  }
LABEL_9:
  objc_msgSend((id)__LSDefaultsGetSharedInstance(), "databaseUpdateNotificationNameForSessionKey:", v12);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = MEMORY[0x186DAE9BC](v6);
  v16 = v7->block;
  v7->block = (id)v15;

  v7->uid = v8;
  _LSGetDispatchTokenQueue();
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = MEMORY[0x1E0C809B0];
  v30[0] = MEMORY[0x1E0C809B0];
  v30[1] = 3221225472;
  v30[2] = ___LSContextAddChangeObserver_block_invoke;
  v30[3] = &unk_1E10422C8;
  v19 = v7;
  v31 = v19;
  v20 = v5;
  v32 = v20;
  LaunchServices::notifyd::NotifyToken::RegisterDispatch(v14, v17, v30, (unsigned int *)buf);
  LaunchServices::notifyd::NotifyToken::operator=((LaunchServices::notifyd::NotifyToken *)&v19->notifyToken, (LaunchServices::notifyd::NotifyToken *)buf);
  LaunchServices::notifyd::NotifyToken::~NotifyToken((LaunchServices::notifyd::NotifyToken *)buf);

  _LSGetDispatchTokenQueue();
  v21 = objc_claimAutoreleasedReturnValue();
  block[0] = v18;
  block[1] = 3221225472;
  block[2] = ___LSContextAddChangeObserver_block_invoke_3;
  block[3] = &unk_1E10418C8;
  v22 = v19;
  v29 = v22;
  dispatch_barrier_async(v21, block);

  v23 = v29;
  v24 = v22;

  return v24;
}

void sub_18294A6A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_18294A7D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_18294A89C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

void _LSContextRemoveChangeObserver(void *a1)
{
  id v1;
  NSObject *v2;
  _QWORD v3[4];
  id v4;
  id v5;

  v1 = a1;
  if (v1)
  {
    _LSGetDispatchTokenQueue();
    v2 = objc_claimAutoreleasedReturnValue();
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = ___LSContextRemoveChangeObserver_block_invoke;
    v3[3] = &unk_1E10422C8;
    v4 = v1;
    v5 = v4;
    dispatch_barrier_async(v2, v3);

  }
}

void _LSContextReleaseObservedChange(LSSessionKey **a1)
{
  pthread_mutex_t *v2;
  LSSessionKey v3;
  uint64_t v4;
  int MayMapDatabase;
  LSSessionKey v6;
  uint64_t v7;
  int v8;

  if (_LSDatabaseGetNoServerLock::once == -1)
  {
    if (!a1)
      return;
  }
  else
  {
    dispatch_once(&_LSDatabaseGetNoServerLock::once, &__block_literal_global_83);
    if (!a1)
      return;
  }
  if (*a1)
  {
    v2 = (pthread_mutex_t *)_LSDatabaseGetNoServerLock::result;
    if (_LSDatabaseGetNoServerLock::result)
    {
      pthread_mutex_lock((pthread_mutex_t *)_LSDatabaseGetNoServerLock::result);
      v3 = (*a1)[206];
      _LSReleaseLocalDatabaseEvenIfForced(v3);
      v4 = _LSGetAuditTokenForSelf();
      MayMapDatabase = _LSAuditTokenMayMapDatabase(v4);
      _LSSetCurrentProcessMayMapDatabase(MayMapDatabase);
      pthread_mutex_unlock(v2);
    }
    else
    {
      v6 = (*a1)[206];
      _LSReleaseLocalDatabaseEvenIfForced(v6);
      v7 = _LSGetAuditTokenForSelf();
      v8 = _LSAuditTokenMayMapDatabase(v7);
      _LSSetCurrentProcessMayMapDatabase(v8);
    }
  }
}

uint64_t _LSReleaseLocalDatabaseEvenIfForced(LSSessionKey a1)
{
  LSSessionKey v2;
  LSSession *v3;

  os_unfair_recursive_lock_lock_with_options();
  v2 = a1;
  v3 = (LSSession *)_LSGetSession(v2);
  LSSession::setDatabase(v3, 0);
  return os_unfair_recursive_lock_unlock();
}

uint64_t _LSDatabaseSentinelGet()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  pthread_mutex_lock(&sentinelLock);
  v0 = sentinelCount;
  pthread_mutex_unlock(&sentinelLock);
  if (v0)
    return 1;
  objc_msgSend((id)__LSDefaultsGetSharedInstance(), "dbSentinelFileURL");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = _LSDatabaseRecoveryFileExists(v2);

  return v1;
}

void sub_18294AB44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void _LSDatabaseSentinelIncrement()
{
  uint64_t v0;
  NSObject *v1;
  id v2;

  pthread_mutex_lock(&sentinelLock);
  v0 = sentinelCount;
  if (sentinelCount == -1)
  {
    _LSDatabaseGetLog();
    v1 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
      _LSDatabaseSentinelIncrement_cold_1();

    abort();
  }
  ++sentinelCount;
  pthread_mutex_unlock(&sentinelLock);
  if (!v0)
  {
    objc_msgSend((id)__LSDefaultsGetSharedInstance(), "dbSentinelFileURL");
    v2 = (id)objc_claimAutoreleasedReturnValue();
    _LSDatabaseCreateRecoveryFile(v2);

  }
}

void sub_18294ABF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t _LSDatabaseSentinelDecrement()
{
  NSObject *v1;

  pthread_mutex_lock(&sentinelLock);
  if (!sentinelCount)
  {
    _LSDatabaseGetLog();
    v1 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
      _LSDatabaseSentinelDecrement_cold_1();

    abort();
  }
  --sentinelCount;
  return pthread_mutex_unlock(&sentinelLock);
}

void _LSDatabaseSentinelFlush()
{
  uint64_t v0;
  id v1;

  pthread_mutex_lock(&sentinelLock);
  v0 = sentinelCount;
  pthread_mutex_unlock(&sentinelLock);
  if (!v0)
  {
    objc_msgSend((id)__LSDefaultsGetSharedInstance(), "dbSentinelFileURL");
    v1 = (id)objc_claimAutoreleasedReturnValue();
    _LSDatabaseDeleteRecoveryFile(v1);

  }
}

void sub_18294ACE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t _LSDatabaseGetSyncInterrupted()
{
  void *v0;
  uint64_t v1;

  objc_msgSend((id)__LSDefaultsGetSharedInstance(), "dbSyncInterruptedFileURL");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = _LSDatabaseRecoveryFileExists(v0);

  return v1;
}

void sub_18294AD2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void _LSDatabaseSetSyncInterrupted()
{
  id v0;

  objc_msgSend((id)__LSDefaultsGetSharedInstance(), "dbSyncInterruptedFileURL");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  _LSDatabaseCreateRecoveryFile(v0);

}

void sub_18294AD74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void _LSDatabaseClearSyncInterrupted()
{
  id v0;

  objc_msgSend((id)__LSDefaultsGetSharedInstance(), "dbSyncInterruptedFileURL");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  _LSDatabaseDeleteRecoveryFile(v0);

}

void sub_18294ADC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id _LSDatabaseGetMobileInstallSyncupGroup()
{
  if (objc_msgSend((id)__LSDefaultsGetSharedInstance(), "isServer")
    && _LSDatabaseGetMobileInstallSyncupGroup::onceToken != -1)
  {
    dispatch_once(&_LSDatabaseGetMobileInstallSyncupGroup::onceToken, &__block_literal_global_84);
  }
  return (id)_LSDatabaseGetMobileInstallSyncupGroup::syncupGroup;
}

id _LSDatabaseGetSeedingGroup()
{
  if (objc_msgSend((id)__LSDefaultsGetSharedInstance(), "isServer")
    && _LSDatabaseGetSeedingGroup::once != -1)
  {
    dispatch_once(&_LSDatabaseGetSeedingGroup::once, &__block_literal_global_85);
  }
  return (id)_LSDatabaseGetSeedingGroup::seedingGroup;
}

id _LSDatabaseGetInstallingGroup()
{
  if (objc_msgSend((id)__LSDefaultsGetSharedInstance(), "isServer")
    && _LSDatabaseGetInstallingGroup::once != -1)
  {
    dispatch_once(&_LSDatabaseGetInstallingGroup::once, &__block_literal_global_86);
  }
  return (id)_LSDatabaseGetInstallingGroup::installingGroup;
}

void *_LSDatabaseGetRegisterInstallResultsLock()
{
  return &_LSDatabaseGetRegisterInstallResultsLock::lock;
}

void _LSArmSaveTimerWithObserver(char a1, void *a2)
{
  double v3;
  id v4;

  v4 = a2;
  objc_msgSend((id)__LSDefaultsGetSharedInstance(), "databaseSaveInterval");
  _LSArmSaveTimerWithTimeout(a1, v4, v3);

}

void sub_18294AF68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void _LSArmSaveTimerWithTimeout(char a1, void *a2, double a3)
{
  id v5;
  LSSessionKey v6;
  int64x2_t *v7;
  int64x2_t *v8;
  id *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  _QWORD v13[4];
  id *v14;
  id v15;
  _QWORD v16[5];

  v5 = a2;
  if (objc_msgSend((id)__LSDefaultsGetSharedInstance(), "isServer")
    && (objc_msgSend((id)__LSDefaultsGetSharedInstance(), "isInSyncBubble") & 1) == 0)
  {
    os_unfair_recursive_lock_lock_with_options();
    v6 = (LSSessionKey)_LSServer_SelfSessionKey();
    v7 = (int64x2_t *)_LSGetSession(v6);
    v8 = v7;
    v7->i8[0] |= a1;
    if (v5)
      LSSession::addSaveObserver(v7, v5);
    if ((v8[1].i8[4] & 1) == 0)
    {
      _LSServer_DatabaseExecutionContext();
      v9 = (id *)objc_claimAutoreleasedReturnValue();
      v10 = MEMORY[0x1E0C809B0];
      v16[0] = MEMORY[0x1E0C809B0];
      v16[1] = 3221225472;
      v16[2] = ___ZL26_LSArmSaveTimerWithTimeouthdU13block_pointerFvbP11_LSDatabaseP7NSErrorE_block_invoke;
      v16[3] = &__block_descriptor_40_e5_v8__0l;
      v16[4] = v8;
      v11 = (void *)MEMORY[0x186DAE9BC](v16);
      -[LSDBExecutionContext maintenanceQueue](v9);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13[0] = v10;
      v13[1] = 3221225472;
      v13[2] = ___ZL26_LSArmSaveTimerWithTimeouthdU13block_pointerFvbP11_LSDatabaseP7NSErrorE_block_invoke_277;
      v13[3] = &unk_1E10405C0;
      v14 = v9;
      v15 = v11;
      _LSDispatchCoalescedAfterDelay(&v8->u8[8], v12, v13, a3);

    }
    os_unfair_recursive_lock_unlock();
  }

}

void sub_18294B120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void _LSArmSaveTimer(char a1)
{
  _LSArmSaveTimerWithObserver(a1, 0);
}

void _LSSaveImmediately(char a1)
{
  _LSArmSaveTimerWithTimeout(a1, 0, NAN);
}

void _LSResetServer()
{
  CFTypeRef v0;
  id v1;
  void *v2;
  void *v3;
  id *v4;
  id v5;
  void *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  id v11;
  int v12;
  id v13;
  uint64_t v14;
  id v15;

  if (objc_msgSend((id)__LSDefaultsGetSharedInstance(), "hasServer")
    && (objc_msgSend((id)__LSDefaultsGetSharedInstance(), "isServer") & 1) == 0)
  {
    v8 = (void *)MEMORY[0x186DAE7A0]();
    +[_LSDService synchronousXPCProxyWithErrorHandler:]((uint64_t)_LSDModifyService, __block_literal_global_89);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "resetServerStoreWithCompletionHandler:", &__block_literal_global_92);

    objc_autoreleasePoolPop(v8);
  }
  else
  {
    v15 = 0;
    v0 = _LSCreateEmptyStore(&v15);
    v1 = v15;
    if (v0)
    {
      _LSGetStoreNode();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = (void *)_LSServer_SelfSessionKey();
      v13 = v1;
      v4 = _LSDatabaseCreate(v2, v3, v0, &v13);
      v5 = v13;

      v14 = (uint64_t)v4;
      if (v4)
      {
        if (objc_msgSend((id)__LSDefaultsGetSharedInstance(), "isServer"))
        {
          _LSServer_DatabaseExecutionContext();
          v6 = (void *)objc_claimAutoreleasedReturnValue();
          -[LSDBExecutionContext setServerDatabase:]((uint64_t)v6, v4);

        }
        else
        {
          _LSSetLocalDatabase(v4);
        }
        _LSDatabaseClean((id *)&v14);
        v12 = objc_msgSend((id)__LSDefaultsGetSharedInstance(), "isServer");
        v11 = (id)v14;
        if (v12)
          _LSDatabaseCommit(v14);
      }
      else
      {
        _LSDatabaseGetLog();
        v10 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          _LSResetServer_cold_2();

        v11 = 0;
      }

      CFRelease(v0);
    }
    else
    {
      _LSDatabaseGetLog();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        _LSResetServer_cold_1();

      v5 = v1;
    }

  }
}

void sub_18294B344(_Unwind_Exception *a1)
{
  const void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_18294B3F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18294B45C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id _LSGetStoreNode(void)
{
  if (_LSGetStoreNode(void)::once != -1)
    dispatch_once(&_LSGetStoreNode(void)::once, &__block_literal_global_294);
  return (id)_LSGetStoreNode(void)::result;
}

void _LSDatabaseDisplayHeader(CSStore2::AttributedStringWriter *a1, void *a2, _BYTE *a3)
{
  id *v5;
  _LSDatabase *v6;
  __int16 v7;
  double v8;
  const __CFString *v9;
  NSString *v10;
  NSString *v11;
  NSString *v12;
  void *v13;
  void *v14;
  NSString *v15;
  double v16;
  NSNumber *v17;
  id *v18;
  void *v19;
  double v20;
  NSString *v21;
  id v22;
  NSURL *v23;
  NSString *v24;
  NSString *v25;
  __CFBundle *v26;
  __CFBundle *v27;
  CFStringRef *v28;
  NSURL *v29;
  void *v30;
  NSString *v31;
  NSString *v32;
  NSString *v33;
  void *v34;
  void *v35;
  NSURL *v36;
  void *v37;
  NSString *v38;
  NSString *v39;
  NSAttributedString *v40;
  NSAttributedString *v41;
  NSString *v42;
  NSString *v43;
  NSString *v44;
  _LSDatabase *v45;
  id *v46;
  id *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  if (a3)
    *a3 = 1;
  CSStore2::AttributedStringWriter::string(a1, CFSTR("Checking data integrity..."));
  if (_CSStoreValidate())
  {
    v47 = v5;
    _CSStoreEnumerateUnits();
    v46 = v47;
    _CSStoreEnumerateUnits();
    v6 = v46;
    v45 = v6;
    _CSStoreEnumerateUnits();
    CSStore2::AttributedStringWriter::string(a1, CFSTR("...done."));
    v7 = _LSGetStatus();
    if ((v7 & 0x80) != 0)
      CSStore2::AttributedStringWriter::withTextColor();
    if ((v7 & 0x100) != 0)
      CSStore2::AttributedStringWriter::withTextColor();
    if ((v7 & 0x200) != 0)
      CSStore2::AttributedStringWriter::withTextColor();
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v48 = 0u;
    *(_QWORD *)&v8 = _LSDatabaseGetHeader(&v48).n128_u64[0];
    if ((BYTE8(v53) & 1) != 0)
      v9 = CFSTR("are");
    else
      v9 = CFSTR("are NOT");
    CSStore2::AttributedStringWriter::format(a1, CFSTR("Status"), CFSTR("Preferences %@ loaded."), v8, v9);
    _LSDatabaseGetSeededSystemVersion();
    v10 = (NSString *)objc_claimAutoreleasedReturnValue();
    v43 = v10;
    if (v10)
      CSStore2::AttributedStringWriter::string(a1, CFSTR("Seeded System Version"), v10);
    _LSDatabaseGetSeededCryptexVersion(v6);
    v11 = (NSString *)objc_claimAutoreleasedReturnValue();
    v42 = v11;
    if (v11)
      CSStore2::AttributedStringWriter::string(a1, CFSTR("Seeded Cryptex Version"), v11);
    _LSDatabaseGetSeededModelCode();
    v12 = (NSString *)objc_claimAutoreleasedReturnValue();
    v44 = v12;
    if (v12)
      CSStore2::AttributedStringWriter::string(a1, CFSTR("Seeded Model Code"), v12);
    _LSDatabaseGetCacheGUID();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = v13;
    if (v13)
    {
      objc_msgSend(v13, "UUIDString");
      v15 = (NSString *)objc_claimAutoreleasedReturnValue();
      CSStore2::AttributedStringWriter::string(a1, CFSTR("CacheGUID"), v15);

    }
    else
    {
      CSStore2::AttributedStringWriter::withWarningColors();
    }
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v48 = 0u;
    *(_QWORD *)&v16 = _LSDatabaseGetHeader(&v48).n128_u64[0];
    if ((_QWORD)v59)
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", v16);
      v17 = (NSNumber *)objc_claimAutoreleasedReturnValue();
      CSStore2::AttributedStringWriter::number(a1, CFSTR("CacheSequenceNum"), v17);

    }
    else
    {
      CSStore2::AttributedStringWriter::withWarningColors();
    }
    v18 = v6;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v48 = 0u;
    _LSDatabaseGetHeader(&v48);
    if (*((_QWORD *)&v60 + 1))
    {
      objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSince1970:", (double)*((uint64_t *)&v60 + 1));
      v19 = (void *)objc_claimAutoreleasedReturnValue();

      if (v19)
      {
        objc_msgSend(v19, "timeIntervalSinceReferenceDate");
        CSStore2::AttributedStringWriter::timestamp(a1, CFSTR("Date Initialized"), v20);
      }
    }
    else
    {

      v19 = 0;
    }
    objc_msgSend(v18[205], "pathWithError:", 0);
    v21 = (NSString *)objc_claimAutoreleasedReturnValue();
    if (v21)
    {
      v22 = v18[205];
      objc_msgSend(v22, "URL");
      v23 = (NSURL *)objc_claimAutoreleasedReturnValue();
      CSStore2::AttributedStringWriter::link(a1, v23, v21);
      v24 = (NSString *)objc_claimAutoreleasedReturnValue();
      CSStore2::AttributedStringWriter::string(a1, CFSTR("Path"), v24);

    }
    else
    {
      CSStore2::AttributedStringWriter::withWarningColors();
    }
    objc_msgSend(v18, "description");
    v25 = (NSString *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::string(a1, CFSTR("DB Object"), v25);

    v26 = (__CFBundle *)_LSGetBundle();
    v27 = v26;
    v28 = (CFStringRef *)MEMORY[0x1E0C9AE90];
    if (v26)
    {
      v29 = (NSURL *)CFBundleCopyBundleURL(v26);
      CFBundleGetValueForInfoDictionaryKey(v27, *v28);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      -[NSURL path](v29, "path");
      v31 = (NSString *)objc_claimAutoreleasedReturnValue();
      CSStore2::AttributedStringWriter::link(a1, v29, v31);
      v32 = (NSString *)objc_claimAutoreleasedReturnValue();
      if (v30)
        CSStore2::AttributedStringWriter::format(a1, CFSTR("DB Bundle"), CFSTR("%@ (v %@)"), v32, v30);
      else
        CSStore2::AttributedStringWriter::string(a1, CFSTR("DB Bundle"), v32);

    }
    objc_msgSend(v5[1], "description");
    v33 = (NSString *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::string(a1, CFSTR("Store Object"), v33);

    objc_msgSend(MEMORY[0x1E0CB34D0], "bundleForClass:", _CSStoreGetXPCClass());
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    v35 = v34;
    if (v34)
    {
      objc_msgSend(v34, "bundleURL");
      v36 = (NSURL *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v35, "objectForInfoDictionaryKey:", *v28);
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      -[NSURL path](v36, "path");
      v38 = (NSString *)objc_claimAutoreleasedReturnValue();
      CSStore2::AttributedStringWriter::link(a1, v36, v38);
      v39 = (NSString *)objc_claimAutoreleasedReturnValue();
      if (v37)
        CSStore2::AttributedStringWriter::format(a1, CFSTR("Store Bundle"), CFSTR("%@ (v %@)"), v39, v37);
      else
        CSStore2::AttributedStringWriter::string(a1, CFSTR("Store Bundle"), v39);

    }
    v40 = (NSAttributedString *)_CSStoreCopyDebugDescriptionOfBytesInRange();
    CSStore2::AttributedStringWriter::attributedString(a1, v40);

    v41 = (NSAttributedString *)_CSStoreCopyMemoryStatistics();
    CSStore2::AttributedStringWriter::attributedString(a1, v41);

  }
  else
  {
    CSStore2::AttributedStringWriter::string(a1, CFSTR("Data integrity check failed."));
    if (a3)
      *a3 = 0;
  }

}

void sub_18294BC64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61)
{
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;

  _Unwind_Resume(a1);
}

uint64_t ___ZL16_LSDatabaseCleanPU8__strongP11_LSDatabase_block_invoke(uint64_t a1, uint64_t a2, __int128 *a3)
{
  void *v5;
  FSNode *v6;
  FSNode *v7;
  BOOL v8;
  uint64_t v10;
  __int128 v11;
  int v12;

  v11 = *a3;
  v12 = *((_DWORD *)a3 + 4);
  v10 = 0;
  _LSAliasGetPath(*(void **)(a1 + 32), SHIDWORD(v11));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    v6 = -[FSNode initWithPath:flags:error:]([FSNode alloc], "initWithPath:flags:error:", v5, 0, 0);
    v7 = v6;
    if (v6)
      v8 = -[FSNode getVolumeIdentifier:error:](v6, "getVolumeIdentifier:error:", &v10, 0);
    else
      v8 = 0;

  }
  else
  {
    v8 = 0;
  }

  *(_QWORD *)((char *)&v11 + 4) = v10;
  BYTE2(v11) = v8;
  return _LSContainerSet(*(void **)(a1 + 32), a2, (uint64_t)&v11);
}

void sub_18294C2A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id __copy_helper_block_ea8_32c14_ZTS9LSContext(uint64_t a1, uint64_t a2)
{
  id result;

  result = *(id *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_ea8_32c14_ZTS9LSContext(uint64_t a1)
{

}

void LSCrashMessage::LSCrashMessage(LSCrashMessage *this, NSString *a2)
{
  NSString *v2;
  NSObject *v3;
  NSString *v4;
  _QWORD block[4];
  NSString *v6;

  v2 = a2;
  if (_LSLoggingQueue(void)::onceToken != -1)
    dispatch_once(&_LSLoggingQueue(void)::onceToken, &__block_literal_global_216);
  v3 = _LSLoggingQueue(void)::logQueue;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZL18_LSSetCrashMessageP8NSString_block_invoke_0;
  block[3] = &unk_1E10418C8;
  v6 = v2;
  v4 = v2;
  dispatch_sync(v3, block);

}

void ___ZL18_LSSetCrashMessageP8NSString_block_invoke_0(uint64_t a1)
{
  _LSSetCrashReporterMessage(*(NSString **)(a1 + 32));
}

void _LSSetCrashReporterMessage(NSString *a1)
{
  NSString *v1;
  NSString *v2;
  char *v3;
  NSObject *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  void *v8;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = strdup(-[NSString UTF8String](objc_retainAutorelease(v1), "UTF8String"));
    _LSDefaultLog();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      _LSSetCrashReporterMessage();

  }
  else
  {
    v3 = 0;
  }
  v5 = _LSSetCrashReporterMessage(NSString *)::messagePtr;
  while (1)
  {
    v6 = __ldxr((unint64_t *)&_LSSetCrashReporterMessage(NSString *)::messagePtr);
    if (v6 != v5)
      break;
    if (!__stxr((unint64_t)v3, (unint64_t *)&_LSSetCrashReporterMessage(NSString *)::messagePtr))
    {
      v7 = 1;
      goto LABEL_11;
    }
  }
  v7 = 0;
  __clrex();
LABEL_11:
  if (v7)
    v8 = (void *)v5;
  else
    v8 = v3;
  free(v8);
  qword_1ECD29C28 = _LSSetCrashReporterMessage(NSString *)::messagePtr;

}

void sub_18294C4EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZL15_LSLoggingQueuev_block_invoke_0()
{
  dispatch_queue_t v0;
  void *v1;
  NSObject *v2;

  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v2 = objc_claimAutoreleasedReturnValue();
  v0 = dispatch_queue_create("com.apple.launchservices.logging", v2);
  v1 = (void *)_LSLoggingQueue(void)::logQueue;
  _LSLoggingQueue(void)::logQueue = (uint64_t)v0;

}

void LSCrashMessage::~LSCrashMessage(LSCrashMessage *this)
{
  _QWORD block[4];
  id v2;

  if (_LSLoggingQueue(void)::onceToken != -1)
    dispatch_once(&_LSLoggingQueue(void)::onceToken, &__block_literal_global_216);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZL18_LSSetCrashMessageP8NSString_block_invoke_0;
  block[3] = &unk_1E10418C8;
  v2 = 0;
  dispatch_sync((dispatch_queue_t)_LSLoggingQueue(void)::logQueue, block);

}

void ___ZL52_LSDatabaseRegisterCanonicalNamesFromStringLocalizerP11_LSDatabaseP18_LSStringLocalizer_block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  _LSDatabase *v7;
  id v8;
  id v9;
  NSString *v10;
  NSObject *v11;
  int v12;
  _LSDatabase *v13;
  __int16 v14;
  id v15;
  __int16 v16;
  id v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (!LaunchServices::CanonicalString::Find(*(LaunchServices::CanonicalString **)(a1 + 32), v7, v10))
  {
    if (LaunchServices::CanonicalString::Add(*(void **)(a1 + 32), v7, v8))
    {
      ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
    }
    else
    {
      _LSDatabaseGetLog();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        v12 = 138543874;
        v13 = v7;
        v14 = 2114;
        v15 = v8;
        v16 = 2114;
        v17 = v9;
        _os_log_error_impl(&dword_182882000, v11, OS_LOG_TYPE_ERROR, "Failed to add canonical string %{public}@, localizations %{public}@, missingLocalizations %{public}@", (uint8_t *)&v12, 0x20u);
      }

    }
  }

}

void sub_18294C710(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t ___ZL41_LSSystemContentDatabaseSanitizeForExportP11_LSDatabase_block_invoke(uint64_t result, uint64_t a2, _DWORD *a3)
{
  uint64_t v4;
  int v5;
  _QWORD *v6;
  char *v7;
  unint64_t v8;
  _DWORD *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;
  int v19;
  _QWORD *v20;
  char *v21;
  unint64_t v22;
  _DWORD *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  int v32;
  int v33;
  _QWORD *v34;
  char *v35;
  unint64_t v36;
  _DWORD *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  int v46;

  v4 = result;
  v5 = a3[24];
  if (v5)
  {
    v6 = *(_QWORD **)(*(_QWORD *)(result + 40) + 8);
    v7 = (char *)v6[7];
    v8 = v6[8];
    if ((unint64_t)v7 >= v8)
    {
      v10 = (char *)v6[6];
      v11 = (v7 - v10) >> 2;
      v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 62)
        goto LABEL_56;
      v13 = v8 - (_QWORD)v10;
      if (v13 >> 1 > v12)
        v12 = v13 >> 1;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
        v14 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>((uint64_t)(v6 + 8), v14);
        v10 = (char *)v6[6];
        v7 = (char *)v6[7];
        v5 = a3[24];
      }
      else
      {
        v15 = 0;
      }
      v16 = &v15[4 * v11];
      v17 = &v15[4 * v14];
      *(_DWORD *)v16 = v5;
      v9 = v16 + 4;
      while (v7 != v10)
      {
        v18 = *((_DWORD *)v7 - 1);
        v7 -= 4;
        *((_DWORD *)v16 - 1) = v18;
        v16 -= 4;
      }
      v6[6] = v16;
      v6[7] = v9;
      v6[8] = v17;
      if (v10)
        operator delete(v10);
    }
    else
    {
      *(_DWORD *)v7 = v5;
      v9 = v7 + 4;
    }
    v6[7] = v9;
    result = _CSStoreWriteToUnit();
  }
  v19 = a3[36];
  if (v19)
  {
    v20 = *(_QWORD **)(*(_QWORD *)(v4 + 48) + 8);
    v21 = (char *)v20[7];
    v22 = v20[8];
    if ((unint64_t)v21 >= v22)
    {
      v24 = (char *)v20[6];
      v25 = (v21 - v24) >> 2;
      v26 = v25 + 1;
      if ((unint64_t)(v25 + 1) >> 62)
        goto LABEL_56;
      v27 = v22 - (_QWORD)v24;
      if (v27 >> 1 > v26)
        v26 = v27 >> 1;
      if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL)
        v28 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v28 = v26;
      if (v28)
      {
        v29 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>((uint64_t)(v20 + 8), v28);
        v24 = (char *)v20[6];
        v21 = (char *)v20[7];
        v19 = a3[36];
      }
      else
      {
        v29 = 0;
      }
      v30 = &v29[4 * v25];
      v31 = &v29[4 * v28];
      *(_DWORD *)v30 = v19;
      v23 = v30 + 4;
      while (v21 != v24)
      {
        v32 = *((_DWORD *)v21 - 1);
        v21 -= 4;
        *((_DWORD *)v30 - 1) = v32;
        v30 -= 4;
      }
      v20[6] = v30;
      v20[7] = v23;
      v20[8] = v31;
      if (v24)
        operator delete(v24);
    }
    else
    {
      *(_DWORD *)v21 = v19;
      v23 = v21 + 4;
    }
    v20[7] = v23;
    result = _CSStoreWriteToUnit();
  }
  v33 = a3[128];
  if (v33)
  {
    v34 = *(_QWORD **)(*(_QWORD *)(v4 + 48) + 8);
    v35 = (char *)v34[7];
    v36 = v34[8];
    if ((unint64_t)v35 < v36)
    {
      *(_DWORD *)v35 = v33;
      v37 = v35 + 4;
LABEL_55:
      v34[7] = v37;
      return _CSStoreWriteToUnit();
    }
    v38 = (char *)v34[6];
    v39 = (v35 - v38) >> 2;
    v40 = v39 + 1;
    if (!((unint64_t)(v39 + 1) >> 62))
    {
      v41 = v36 - (_QWORD)v38;
      if (v41 >> 1 > v40)
        v40 = v41 >> 1;
      if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL)
        v42 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v42 = v40;
      if (v42)
      {
        v43 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>((uint64_t)(v34 + 8), v42);
        v38 = (char *)v34[6];
        v35 = (char *)v34[7];
        v33 = a3[128];
      }
      else
      {
        v43 = 0;
      }
      v44 = &v43[4 * v39];
      v45 = &v43[4 * v42];
      *(_DWORD *)v44 = v33;
      v37 = v44 + 4;
      while (v35 != v38)
      {
        v46 = *((_DWORD *)v35 - 1);
        v35 -= 4;
        *((_DWORD *)v44 - 1) = v46;
        v44 -= 4;
      }
      v34[6] = v44;
      v34[7] = v37;
      v34[8] = v45;
      if (v38)
        operator delete(v38);
      goto LABEL_55;
    }
LABEL_56:
    abort();
  }
  return result;
}

uint64_t ___ZL41_LSSystemContentDatabaseSanitizeForExportP11_LSDatabase_block_invoke_2(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  _QWORD *v6;
  char *v7;
  unint64_t v8;
  _DWORD *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;
  int v19;
  _QWORD *v20;
  char *v21;
  unint64_t v22;
  _DWORD *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  int v32;

  v4 = result;
  v5 = *(_DWORD *)(a3 + 96);
  if (v5)
  {
    v6 = *(_QWORD **)(*(_QWORD *)(result + 40) + 8);
    v7 = (char *)v6[7];
    v8 = v6[8];
    if ((unint64_t)v7 >= v8)
    {
      v10 = (char *)v6[6];
      v11 = (v7 - v10) >> 2;
      v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 62)
        goto LABEL_38;
      v13 = v8 - (_QWORD)v10;
      if (v13 >> 1 > v12)
        v12 = v13 >> 1;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
        v14 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>((uint64_t)(v6 + 8), v14);
        v10 = (char *)v6[6];
        v7 = (char *)v6[7];
        v5 = *(_DWORD *)(a3 + 96);
      }
      else
      {
        v15 = 0;
      }
      v16 = &v15[4 * v11];
      v17 = &v15[4 * v14];
      *(_DWORD *)v16 = v5;
      v9 = v16 + 4;
      while (v7 != v10)
      {
        v18 = *((_DWORD *)v7 - 1);
        v7 -= 4;
        *((_DWORD *)v16 - 1) = v18;
        v16 -= 4;
      }
      v6[6] = v16;
      v6[7] = v9;
      v6[8] = v17;
      if (v10)
        operator delete(v10);
    }
    else
    {
      *(_DWORD *)v7 = v5;
      v9 = v7 + 4;
    }
    v6[7] = v9;
    result = _CSStoreWriteToUnit();
  }
  v19 = *(_DWORD *)(a3 + 144);
  if (v19)
  {
    v20 = *(_QWORD **)(*(_QWORD *)(v4 + 48) + 8);
    v21 = (char *)v20[7];
    v22 = v20[8];
    if ((unint64_t)v21 < v22)
    {
      *(_DWORD *)v21 = v19;
      v23 = v21 + 4;
LABEL_37:
      v20[7] = v23;
      return _CSStoreWriteToUnit();
    }
    v24 = (char *)v20[6];
    v25 = (v21 - v24) >> 2;
    v26 = v25 + 1;
    if (!((unint64_t)(v25 + 1) >> 62))
    {
      v27 = v22 - (_QWORD)v24;
      if (v27 >> 1 > v26)
        v26 = v27 >> 1;
      if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL)
        v28 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v28 = v26;
      if (v28)
      {
        v29 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>((uint64_t)(v20 + 8), v28);
        v24 = (char *)v20[6];
        v21 = (char *)v20[7];
        v19 = *(_DWORD *)(a3 + 144);
      }
      else
      {
        v29 = 0;
      }
      v30 = &v29[4 * v25];
      v31 = &v29[4 * v28];
      *(_DWORD *)v30 = v19;
      v23 = v30 + 4;
      while (v21 != v24)
      {
        v32 = *((_DWORD *)v21 - 1);
        v21 -= 4;
        *((_DWORD *)v30 - 1) = v32;
        v30 -= 4;
      }
      v20[6] = v30;
      v20[7] = v23;
      v20[8] = v31;
      if (v24)
        operator delete(v24);
      goto LABEL_37;
    }
LABEL_38:
    abort();
  }
  return result;
}

id _LSDatabaseCreateSnapshotAgainstAccessContext(void *a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void (**v9)(_QWORD);
  NSObject *v10;
  id v11;
  void *v13;
  void *v14;
  void (**v15)(_QWORD);
  _QWORD v16[4];
  id v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t);
  void (*v25)(uint64_t);
  id v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t);
  void (*v31)(uint64_t);
  id v32;

  v27 = 0;
  v28 = &v27;
  v29 = 0x3032000000;
  v30 = __Block_byref_object_copy__258;
  v31 = __Block_byref_object_dispose__259;
  v32 = 0;
  v21 = 0;
  v22 = &v21;
  v23 = 0x3032000000;
  v24 = __Block_byref_object_copy__258;
  v25 = __Block_byref_object_dispose__259;
  v26 = 0;
  v5 = objc_retainAutorelease(a1);
  if (v5)
  {
    v6 = v5[1];
    v7 = v5[207];
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = ___ZL45_LSDatabaseCreateSnapshotAgainstAccessContextP11_LSDatabaseP22__CSStoreAccessContextPU15__autoreleasingP7NSError_block_invoke;
  v16[3] = &unk_1E1042A78;
  v20 = v6;
  v18 = &v21;
  v8 = v5;
  v17 = v8;
  v19 = &v27;
  v9 = (void (**)(_QWORD))MEMORY[0x186DAE9BC](v16);
  if (a2)
  {
    if (v7 && v7 != a2)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_LSDatabase *_LSDatabaseCreateSnapshotAgainstAccessContext(_LSDatabase *__strong, CSStoreAccessContextRef, NSError *__autoreleasing *)");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "handleFailureInFunction:file:lineNumber:description:", v14, CFSTR("LSDatabase.mm"), 2763, CFSTR("provided a snapshot queue but it was not equal to the queue in the db to snapshot"));

    }
    v15 = v9;
    _CSStoreAccessContextAccessForRead();

  }
  else
  {
    if (v7)
      _CSStoreAccessContextAssertReading();
    v9[2](v9);
  }
  if (!v28[5])
  {
    _LSDatabaseGetLog();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      _LSDatabaseCreateSnapshotAgainstAccessContext();

    if (a3)
      *a3 = objc_retainAutorelease((id)v22[5]);
  }
  v11 = (id)v28[5];

  _Block_object_dispose(&v21, 8);
  _Block_object_dispose(&v27, 8);

  return v11;
}

void sub_18294CEA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;

  _Block_object_dispose(&a23, 8);
  _Block_object_dispose((const void *)(v32 - 144), 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__258(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__259(uint64_t a1)
{

}

void ___ZL45_LSDatabaseCreateSnapshotAgainstAccessContextP11_LSDatabaseP22__CSStoreAccessContextPU15__autoreleasingP7NSError_block_invoke(_QWORD *a1)
{
  uint64_t MutableCopy;
  const void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  const void *v7;
  uint64_t v8;
  id *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id obj;

  if (a1[7])
  {
    MutableCopy = CSStoreCreateMutableCopy();
    if (MutableCopy)
    {
      v3 = (const void *)MutableCopy;
      v4 = a1[4];
      v5 = *(void **)(v4 + 1648);
      v6 = *(id *)(v4 + 1640);
      v7 = (const void *)a1[7];
      v8 = *(_QWORD *)(a1[5] + 8);
      obj = *(id *)(v8 + 40);
      v9 = _LSDatabaseCreateWithAccessContext(v6, v5, v7, 0, &obj);
      objc_storeStrong((id *)(v8 + 40), obj);
      v10 = *(_QWORD *)(a1[6] + 8);
      v11 = *(void **)(v10 + 40);
      *(_QWORD *)(v10 + 40) = v9;

      CFRelease(v3);
    }
  }
  else
  {
    _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], -50, (uint64_t)"_LSDatabaseCreateSnapshotAgainstAccessContext_block_invoke", 2757, 0);
    v12 = objc_claimAutoreleasedReturnValue();
    v13 = *(_QWORD *)(a1[5] + 8);
    v14 = *(void **)(v13 + 40);
    *(_QWORD *)(v13 + 40) = v12;

  }
}

void sub_18294D03C(_Unwind_Exception *a1)
{
  const void *v1;
  void *v2;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZL45_LSDatabaseCreateSnapshotAgainstAccessContextP11_LSDatabaseP22__CSStoreAccessContextPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void ___ZL34LSCheckDatabaseAvailableWithServerP17_LSDServiceDomain_block_invoke(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  id v4;
  id v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  _LSDatabaseGetLog();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    v4 = v2;
    v5 = objc_alloc(MEMORY[0x1E0CB3940]);
    objc_msgSend(v4, "domain");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v4, "code");
    objc_msgSend(v4, "userInfo");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = (void *)objc_msgSend(v5, "initWithFormat:", CFSTR("(Error domain %@ code %llu, ui: %@)"), v6, v7, v8);

    *(_DWORD *)buf = 136315394;
    v11 = "LSCheckDatabaseAvailableWithServer_block_invoke";
    v12 = 2112;
    v13 = v9;
    _os_log_error_impl(&dword_182882000, v3, OS_LOG_TYPE_ERROR, "%s: Error on proxy: %@", buf, 0x16u);

  }
}

void sub_18294D1A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

uint64_t ___ZL34LSCheckDatabaseAvailableWithServerP17_LSDServiceDomain_block_invoke_269(uint64_t result, int a2)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a2;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = 1;
  return result;
}

uint64_t ___ZL31_LSDatabaseNotificationRegister12LSSessionKey_block_invoke(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  void *v4;
  LSSessionKey v5;
  LSSessionKey v6;
  uint64_t v7;
  int v9;
  uint64_t v10;
  __int16 v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  _LSDatabaseGetLog();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = (void *)_LSSessionKeyCopyDescription(*(_QWORD *)(a1 + 40));
    v9 = 138543618;
    v10 = v3;
    v11 = 2112;
    v12 = v4;
    _os_log_impl(&dword_182882000, v2, OS_LOG_TYPE_DEFAULT, "NotifyToken::RegisterDispatch(%{public}@) fired for session key %@", (uint8_t *)&v9, 0x16u);

  }
  v5 = *(LSSessionKey *)(a1 + 40);
  _LSReleaseLocalDatabase(v5);
  os_unfair_recursive_lock_lock_with_options();
  v6 = *(LSSessionKey *)(a1 + 40);
  v7 = _LSGetSession(v6);
  LaunchServices::notifyd::NotifyToken::cancel((LaunchServices::notifyd::NotifyToken *)(v7 + 12));
  return os_unfair_recursive_lock_unlock();
}

void sub_18294D300(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZL30_LSClearCrashMessageAfterDelayi_block_invoke()
{
  uint64_t v0;
  unint64_t v1;
  int v2;
  void *v3;

  v0 = _LSSetCrashReporterMessage(NSString *)::messagePtr;
  while (1)
  {
    v1 = __ldxr((unint64_t *)&_LSSetCrashReporterMessage(NSString *)::messagePtr);
    if (v1 != v0)
      break;
    if (!__stxr(0, (unint64_t *)&_LSSetCrashReporterMessage(NSString *)::messagePtr))
    {
      v2 = 1;
      goto LABEL_6;
    }
  }
  v2 = 0;
  __clrex();
LABEL_6:
  if (v2)
    v3 = (void *)v0;
  else
    v3 = 0;
  free(v3);
  qword_1ECD29C28 = _LSSetCrashReporterMessage(NSString *)::messagePtr;
}

void LSSession::addSaveObserver(int64x2_t *a1, void *a2)
{
  id v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  char *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  int64x2_t v19;
  uint64_t v20;
  uint64_t v21;
  int64x2_t v22;
  char *v23;
  int64x2_t *v24;

  v3 = a2;
  v4 = objc_msgSend(v3, "copy");
  v5 = a1[3].u64[0];
  v6 = (uint64_t *)a1[2].i64[1];
  if ((unint64_t)v6 >= v5)
  {
    v8 = a1[2].i64[0];
    v9 = ((uint64_t)v6 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      abort();
    v10 = v5 - v8;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v24 = a1 + 3;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<os_eligibility_answer_t>>((uint64_t)a1[3].i64, v12);
    else
      v13 = 0;
    v14 = (uint64_t *)&v13[8 * v9];
    v15 = &v13[8 * v12];
    v23 = v15;
    *v14 = v4;
    v7 = v14 + 1;
    v22.i64[1] = (uint64_t)(v14 + 1);
    v17 = (_QWORD *)a1[2].i64[0];
    v16 = (_QWORD *)a1[2].i64[1];
    if (v16 == v17)
    {
      v19 = vdupq_n_s64((unint64_t)v16);
    }
    else
    {
      do
      {
        v18 = *--v16;
        *v16 = 0;
        *--v14 = v18;
      }
      while (v16 != v17);
      v19 = a1[2];
      v7 = (_QWORD *)v22.i64[1];
      v15 = v23;
    }
    a1[2].i64[0] = (uint64_t)v14;
    a1[2].i64[1] = (uint64_t)v7;
    v22 = v19;
    v20 = a1[3].i64[0];
    a1[3].i64[0] = (uint64_t)v15;
    v23 = (char *)v20;
    v21 = v19.i64[0];
    std::__split_buffer<LSApplicationRecord * {__strong}>::~__split_buffer((uint64_t)&v21);
  }
  else
  {
    *v6 = v4;
    v7 = v6 + 1;
  }
  a1[2].i64[1] = (uint64_t)v7;

}

void sub_18294D498(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___ZL26_LSArmSaveTimerWithTimeouthdU13block_pointerFvbP11_LSDatabaseP7NSErrorE_block_invoke(uint64_t a1)
{
  id v2;
  char *v3;
  char v4;
  void **v5;
  char *v6;
  __int128 v7;
  uint64_t v8;
  void *v9;
  unint64_t *v10;
  _LSDatabase *v11;
  unint64_t *v12;
  int v13;
  unint64_t *v14;
  __CFNotificationCenter *DarwinNotifyCenter;
  __CFNotificationCenter *v16;
  __CFNotificationCenter *v17;
  __CFNotificationCenter *v18;
  void *v19;
  unint64_t *v20;
  __CFNotificationCenter *v21;
  int v22;
  id v23;
  int v24;
  unint64_t *v25;
  id v26;
  NSObject *v27;
  void *v28;
  NSObject *v29;
  void *v30;
  int v31;
  NSObject *v32;
  void *v33;
  id v34;
  NSObject *v35;
  _QWORD *i;
  _QWORD *v37;
  void (**v38)(_QWORD, _QWORD, _QWORD, _QWORD);
  void *v39;
  id v40;
  void *v41;
  int v42;
  uint64_t v43;
  void *v44;
  const void *v45;
  int v46;
  NSObject *v47;
  id v48;
  unint64_t *v49;
  uint64_t v50;
  void *v51;
  id v52;
  NSObject *v53;
  __int128 v54;
  uint64_t v55;
  unsigned __int8 v56;
  id v57;
  void **v58[3];
  uint8_t v59[8];
  uint8_t buf[32];
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v56 = 0;
  memset(&v58[1], 0, 11);
  v54 = 0uLL;
  v55 = 0;
  os_unfair_recursive_lock_lock_with_options();
  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24))
    v2 = *(id *)(*(_QWORD *)(a1 + 32) + 24);
  else
    v2 = 0;
  v3 = *(char **)(a1 + 32);
  v56 = *v3;
  v4 = v3[11];
  v5 = *(void ***)(v3 + 1);
  LOWORD(v58[2]) = *(_WORD *)(v3 + 9);
  v58[1] = v5;
  BYTE2(v58[2]) = v4;
  if (*v3)
    *v3 = 0;
  v7 = *((_OWORD *)v3 + 2);
  v6 = v3 + 32;
  *(_OWORD *)buf = v7;
  *(_QWORD *)&buf[16] = *((_QWORD *)v6 + 2);
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  std::vector<void({block_pointer} {__strong})(BOOL,_LSDatabase *,NSError *),std::allocator<void({block_pointer} {__strong})(BOOL,_LSDatabase *,NSError *)>>::shrink_to_fit((char **)v6);
  std::vector<void({block_pointer} {__strong})(BOOL,_LSDatabase *,NSError *),std::allocator<void({block_pointer} {__strong})(BOOL,_LSDatabase *,NSError *)>>::__vdeallocate((void **)&v54);
  v54 = *(_OWORD *)buf;
  v55 = *(_QWORD *)&buf[16];
  memset(buf, 0, 24);
  *(_QWORD *)v59 = buf;
  std::vector<LSApplicationRecord * {__strong}>::__destroy_vector::operator()[abi:nn180100]((void ***)v59);
  v8 = os_unfair_recursive_lock_unlock();
  if (v2)
  {
    v9 = (void *)MEMORY[0x186DAE7A0](v8);
    v10 = (unint64_t *)v2;
    v12 = v10;
    v13 = (v56 >> 1) & 1 | v56;
    if ((v56 >> 1) & 1 | v56 & 1)
    {
      v14 = v10;
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      v66 = 0u;
      v67 = 0u;
      v64 = 0u;
      v65 = 0u;
      v62 = 0u;
      v63 = 0u;
      v61 = 0u;
      memset(buf, 0, sizeof(buf));
      _LSDatabaseGetHeader(buf);
      if ((DWORD2(v64) & 0x1000000) != 0)
      {
        DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
        CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("com.apple.LaunchServices.ApplicationsChanged"), 0, 0, 1u);
      }
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      v66 = 0u;
      v67 = 0u;
      v64 = 0u;
      v65 = 0u;
      v62 = 0u;
      v63 = 0u;
      v61 = 0u;
      memset(buf, 0, sizeof(buf));
      _LSDatabaseGetHeader(buf);
      if ((DWORD2(v64) & 0x2000000) != 0)
      {
        v16 = CFNotificationCenterGetDarwinNotifyCenter();
        CFNotificationCenterPostNotification(v16, CFSTR("com.apple.LaunchServices.DocumentTypesChanged"), 0, 0, 1u);
      }
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      v66 = 0u;
      v67 = 0u;
      v64 = 0u;
      v65 = 0u;
      v62 = 0u;
      v63 = 0u;
      v61 = 0u;
      memset(buf, 0, sizeof(buf));
      _LSDatabaseGetHeader(buf);
      if ((DWORD2(v64) & 0x4000000) != 0)
      {
        v17 = CFNotificationCenterGetDarwinNotifyCenter();
        CFNotificationCenterPostNotification(v17, CFSTR("com.apple.LaunchServices.URLTypesChanged"), 0, 0, 1u);
      }
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      v66 = 0u;
      v67 = 0u;
      v64 = 0u;
      v65 = 0u;
      v62 = 0u;
      v63 = 0u;
      v61 = 0u;
      memset(buf, 0, sizeof(buf));
      _LSDatabaseGetHeader(buf);
      if ((DWORD2(v64) & 0x8000000) != 0)
      {
        v18 = CFNotificationCenterGetDarwinNotifyCenter();
        CFNotificationCenterPostNotification(v18, CFSTR("com.apple.LaunchServices.TypeDeclarationsChanged"), 0, 0, 1u);
      }
      _LSServer_DatabaseExecutionContext();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      *(_QWORD *)&buf[8] = 3221225472;
      *(_QWORD *)&buf[16] = ___ZL34_LSDatabasePostChangeNotificationsP11_LSDatabase_block_invoke;
      *(_QWORD *)&buf[24] = &unk_1E103FC48;
      v20 = v14;
      *(_QWORD *)&v61 = v20;
      -[LSDBExecutionContext performAsyncWrite:]((uint64_t)v19, buf);

      v21 = CFNotificationCenterGetDarwinNotifyCenter();
      CFNotificationCenterPostNotificationWithOptions(v21, CFSTR("com.apple.LaunchServices.DatabaseChange"), 0, 0, 0);

    }
    if ((v13 & 4) != 0)
    {
      *(_DWORD *)buf = -1163005939;
      v22 = *((_DWORD *)v12 + 412);
      if (_LSGetConsoleOwnerUID((uid_t *)buf))
      {
        if (*(_DWORD *)buf != v22)
          goto LABEL_23;
      }
      else if (v22)
      {
        goto LABEL_23;
      }
      _LSSetKernelPackageExtensions();
    }
LABEL_23:
    if ((v13 & 1) == 0)
    {
      v23 = 0;
      v24 = 1;
LABEL_37:
      if ((v13 & 2) != 0 && v24)
      {
        v31 = LSHandlerPref::Save((LSHandlerPref *)v12, v11);
        if (v31)
        {
          _LSDatabaseGetLog();
          v32 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
          {
            v33 = (void *)_LSSessionKeyCopyDescription(v12[206]);
            ___ZL26_LSArmSaveTimerWithTimeouthdU13block_pointerFvbP11_LSDatabaseP7NSErrorE_block_invoke_cold_2(v33, v59, v31, v32);
          }

          _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], v31, (uint64_t)"_LSSessionSave", 916, 0);
          v23 = (id)objc_claimAutoreleasedReturnValue();
          LOBYTE(v24) = 0;
        }
        else
        {
          LOBYTE(v24) = 1;
        }
      }

      v34 = v23;
      if ((v24 & 1) == 0)
      {
        _LSDatabaseGetLog();
        v35 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
          ___ZL26_LSArmSaveTimerWithTimeouthdU13block_pointerFvbP11_LSDatabaseP7NSErrorE_block_invoke_cold_1();

      }
      v37 = (_QWORD *)*((_QWORD *)&v54 + 1);
      for (i = (_QWORD *)v54; i != v37; ++i)
      {
        v38 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD))MEMORY[0x186DAE9BC](*i);
        v39 = (void *)MEMORY[0x186DAE7A0]();
        ((void (**)(_QWORD, uint64_t, unint64_t *, id))v38)[2](v38, 1, v12, v34);
        objc_autoreleasePoolPop(v39);

      }
      objc_autoreleasePoolPop(v9);
      goto LABEL_52;
    }
    v57 = 0;
    v25 = v12;
    if (!objc_msgSend((id)__LSDefaultsGetSharedInstance(), "isServer")
      || objc_msgSend((id)__LSDefaultsGetSharedInstance(), "isInSyncBubble"))
    {
      _LSDatabaseCommit((uint64_t)v25);
LABEL_28:
      v24 = 1;
LABEL_29:

      v26 = v57;
      if (v24)
      {
        _LSDatabaseGetLog();
        v27 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
        {
          v28 = (void *)_LSSessionKeyCopyDescription(v25[206]);
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "_LSSessionSave";
          *(_WORD *)&buf[12] = 2112;
          *(_QWORD *)&buf[14] = v28;
          _os_log_impl(&dword_182882000, v27, OS_LOG_TYPE_DEFAULT, "%{public}s: saved database for session %@", buf, 0x16u);

        }
        v23 = 0;
      }
      else
      {
        _LSDatabaseGetLog();
        v29 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
        {
          v30 = (void *)_LSSessionKeyCopyDescription(v25[206]);
          ___ZL26_LSArmSaveTimerWithTimeouthdU13block_pointerFvbP11_LSDatabaseP7NSErrorE_block_invoke_cold_3(v30, (uint64_t)v26, buf, v29);
        }

        v23 = objc_retainAutorelease(v26);
      }

      goto LABEL_37;
    }
    v40 = (id)v25[205];
    objc_msgSend(v40, "pathWithError:", &v57);
    v41 = (void *)objc_claimAutoreleasedReturnValue();

    if (v41)
    {
      v42 = _CSStoreValidate();
      if (!v42)
      {
        objc_msgSend(v41, "stringByAppendingString:", CFSTR("_corrupt"));
        v43 = objc_claimAutoreleasedReturnValue();

        v41 = (void *)v43;
      }
      v44 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E98]), "initFileURLWithPath:isDirectory:", v41, 0);
      if (v44)
      {
        *(_QWORD *)buf = 0;
        _LSDatabaseGetFileResourceProperties();
        v45 = *(const void **)buf;
        *(_QWORD *)buf = 0;
        if (v45)
          CFRelease(v45);
        v46 = _CSStoreWriteToURL();
        if (v46)
        {
          _LSDatabaseSentinelFlush();
          if (!v42)
          {
            _LSDatabaseGetLog();
            v47 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
              ___ZL26_LSArmSaveTimerWithTimeouthdU13block_pointerFvbP11_LSDatabaseP7NSErrorE_block_invoke_cold_5();

          }
          v48 = 0;
        }
        else
        {
          v48 = *(id *)buf;
        }
        if (*(_QWORD *)buf)
          CFRelease(*(CFTypeRef *)buf);
        if (v46)
        {

          v49 = v25;
          if ((-[_LSDatabase isSeeded]((uint64_t)v49) & 1) != 0)
          {
            MEMORY[0x186DAF208]();
            v70 = 0u;
            v71 = 0u;
            v68 = 0u;
            v69 = 0u;
            v66 = 0u;
            v67 = 0u;
            v64 = 0u;
            v65 = 0u;
            v62 = 0u;
            v63 = 0u;
            v61 = 0u;
            memset(buf, 0, sizeof(buf));
            _LSDatabaseGetHeader(buf);
            v50 = v70;
            _LSServer_DatabaseExecutionContext();
            v51 = (void *)objc_claimAutoreleasedReturnValue();
            *(_QWORD *)buf = MEMORY[0x1E0C809B0];
            *(_QWORD *)&buf[8] = 3221225472;
            *(_QWORD *)&buf[16] = ___ZL16_LSDatabaseRemapP11_LSDatabaseU13block_pointerFvbP7NSErrorP8NSStringE_block_invoke;
            *(_QWORD *)&buf[24] = &unk_1E103FDE0;
            *(_QWORD *)&v62 = v50;
            *(_QWORD *)&v61 = v49;
            *((_QWORD *)&v61 + 1) = &__block_literal_global_293;
            -[LSDBExecutionContext performAsyncWrite:]((uint64_t)v51, buf);

          }
          goto LABEL_28;
        }
      }
      else
      {
        _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], -37, (uint64_t)"_LSDatabaseSave", 2438, 0);
        v48 = (id)objc_claimAutoreleasedReturnValue();
      }
      v52 = objc_retainAutorelease(v48);
      v57 = v52;
      _LSDatabaseGetLog();
      v53 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v53, OS_LOG_TYPE_FAULT))
        ___ZL26_LSArmSaveTimerWithTimeouthdU13block_pointerFvbP11_LSDatabaseP7NSErrorE_block_invoke_cold_4();

    }
    v24 = 0;
    goto LABEL_29;
  }
LABEL_52:
  v58[0] = (void **)&v54;
  std::vector<LSApplicationRecord * {__strong}>::__destroy_vector::operator()[abi:nn180100](v58);

}

void sub_18294DCA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,CFTypeRef cf,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  if (cf)
    CFRelease(cf);

  a14 = &a9;
  std::vector<LSApplicationRecord * {__strong}>::__destroy_vector::operator()[abi:nn180100]((void ***)&a14);

  _Unwind_Resume(a1);
}

void ___ZL26_LSArmSaveTimerWithTimeouthdU13block_pointerFvbP11_LSDatabaseP7NSErrorE_block_invoke_277(uint64_t a1)
{
  os_unfair_lock_s *v1;
  _QWORD v2[4];
  id v3;

  v2[0] = MEMORY[0x1E0C809B0];
  v2[1] = 3221225472;
  v2[2] = ___ZL26_LSArmSaveTimerWithTimeouthdU13block_pointerFvbP11_LSDatabaseP7NSErrorE_block_invoke_2;
  v2[3] = &unk_1E1041740;
  v1 = *(os_unfair_lock_s **)(a1 + 32);
  v3 = *(id *)(a1 + 40);
  -[LSDBExecutionContext syncRead:](v1, v2);

}

void sub_18294DE4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

uint64_t ___ZL26_LSArmSaveTimerWithTimeouthdU13block_pointerFvbP11_LSDatabaseP7NSErrorE_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void std::vector<void({block_pointer} {__strong})(BOOL,_LSDatabase *,NSError *),std::allocator<void({block_pointer} {__strong})(BOOL,_LSDatabase *,NSError *)>>::__vdeallocate(void **a1)
{
  char *v1;
  char *v3;
  void *v4;
  void *v5;

  v1 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 1);
        v3 -= 8;

      }
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void ___ZL34_LSDatabasePostChangeNotificationsP11_LSDatabase_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  _LSDServiceDomain *v7;
  _LSDatabase **v8;
  _LSDatabase *v9;
  NSObject *v10;
  _LSDatabase *v11;
  _LSDatabase *v12;
  _LSDatabase *v13;
  id v14;
  id v15;
  _LSDServiceDomain *v16;
  uint64_t v17;
  id v18;
  void **v19;
  id v20;
  char v21;
  id v22;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  id v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v22 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  +[_LSDServiceDomain defaultServiceDomain]();
  v7 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
  v8 = (_LSDatabase **)LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)&v19, v7, 0);

  if (!v8)
  {
    _LSDefaultLog();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      +[_LSDServiceDomain defaultServiceDomain]();
      v16 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
      v17 = LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)&v19, v16, 0);

      if (v17)
        v18 = 0;
      else
        v18 = v22;
      *(_DWORD *)buf = 136315394;
      v24 = "_LSDatabasePostChangeNotifications_block_invoke";
      v25 = 2112;
      v26 = v18;
      _os_log_error_impl(&dword_182882000, v10, OS_LOG_TYPE_ERROR, "could not connect to database in %s: %@", buf, 0x16u);

    }
    goto LABEL_6;
  }
  v9 = *v8;
  if (*v8 != *(_LSDatabase **)(a1 + 32))
  {
    _LSDefaultLog();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_182882000, v10, OS_LOG_TYPE_DEFAULT, "database was reset, not clearing change notification flags.", buf, 2u);
    }
LABEL_6:

    goto LABEL_12;
  }
  if (v9)
  {
    _LSDatabaseSetHeaderFlag(v9, 0x1000000, 0);
    v11 = *(_LSDatabase **)(a1 + 32);
    if (v11)
    {
      _LSDatabaseSetHeaderFlag(v11, 0x2000000, 0);
      v12 = *(_LSDatabase **)(a1 + 32);
      if (v12)
      {
        _LSDatabaseSetHeaderFlag(v12, 0x4000000, 0);
        v13 = *(_LSDatabase **)(a1 + 32);
        if (v13)
          _LSDatabaseSetHeaderFlag(v13, 0x8000000, 0);
      }
    }
  }
LABEL_12:
  if (v19 && v21)
    _LSContextDestroy(v19);
  v14 = v20;
  v19 = 0;
  v20 = 0;

  v21 = 0;
  v15 = v22;
  v22 = 0;

}

void sub_18294E120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a9);
  _Unwind_Resume(a1);
}

void ___ZL16_LSDatabaseRemapP11_LSDatabaseU13block_pointerFvbP7NSErrorP8NSStringE_block_invoke(uint64_t a1)
{
  LSSessionKey v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  id v6;
  id v7;
  void *v8;
  const void *v9;
  id v10;
  void *v11;
  void *v12;
  const void *v13;
  NSObject *v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  NSObject *v19;
  NSObject *v20;
  id *v21;
  id v22;
  void *v23;
  NSObject *v24;
  id v25;
  id v26;
  uint8_t buf[16];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  os_unfair_recursive_lock_lock_with_options();
  v2 = (LSSessionKey)_LSServer_SelfSessionKey();
  v3 = _LSGetSession(v2);
  if (!*(_QWORD *)(v3 + 24))
  {
    os_unfair_recursive_lock_unlock();
    goto LABEL_9;
  }
  v4 = (uint64_t *)(v3 + 24);
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  *(_OWORD *)buf = 0u;
  _LSDatabaseGetHeader(buf);
  v5 = v38;
  LODWORD(v4) = -[_LSDatabase isSeeded](*v4);
  os_unfair_recursive_lock_unlock();
  if (!(_DWORD)v4 || *(_QWORD *)(a1 + 48) != v5)
  {
LABEL_9:
    gSkippedRemap = 1;
    _LSDatabaseGetLog();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "_LSDatabaseRemap_block_invoke";
      _os_log_impl(&dword_182882000, v14, OS_LOG_TYPE_DEFAULT, "%{public}s Skipping database remap because there are unsaved local changes", buf, 0xCu);
    }
LABEL_11:
    v17 = 0;
    goto LABEL_12;
  }
  v6 = *(id *)(a1 + 32);
  v7 = *((id *)v6 + 205);
  v8 = v7;
  if (v7)
  {
    *(_QWORD *)buf = 0;
    v9 = (const void *)_LSCreateStoreWithFileContents(v7, buf);
    v10 = *(id *)buf;
    v11 = v10;
    if (v9)
    {
      v12 = (void *)*((_QWORD *)v6 + 206);
      v13 = (const void *)*((_QWORD *)v6 + 207);
      v26 = v10;
      v14 = _LSDatabaseCreateWithAccessContext(v8, v12, v9, v13, &v26);
      v15 = v26;

      CFRelease(v9);
      if (v14)
      {
        _LSSchemaTransferCache((uint64_t)v6 + 16, (uint64_t)&v14[2]);
        -[_LSDatabase setAccessContext:](v14, *((CFTypeRef *)v6 + 207));

        v16 = 0;
        goto LABEL_18;
      }
      v11 = v15;
    }
  }
  else
  {
    _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], -50, (uint64_t)"_LSDatabaseCreateByRemappingDatabase", 1424, 0);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
  }

  _LSDatabaseGetLog();
  v19 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    ___ZL16_LSDatabaseRemapP11_LSDatabaseU13block_pointerFvbP7NSErrorP8NSStringE_block_invoke_cold_3();

  v16 = objc_retainAutorelease(v11);
  v14 = 0;
  v15 = v16;
LABEL_18:

  v17 = v16;
  if (!v14)
  {
    _LSDatabaseGetLog();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      ___ZL16_LSDatabaseRemapP11_LSDatabaseU13block_pointerFvbP7NSErrorP8NSStringE_block_invoke_cold_2();

    v25 = v17;
    v21 = _LSDatabaseCreateFromPersistentStore(7, 0, &v25);
    v22 = v25;

    if (!v21)
    {
      _LSDatabaseGetLog();
      v24 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        ___ZL16_LSDatabaseRemapP11_LSDatabaseU13block_pointerFvbP7NSErrorP8NSStringE_block_invoke_cold_1();
      v14 = 0;
      goto LABEL_31;
    }
    v17 = v22;
    v14 = v21;
  }
  if (-[_LSDatabase isSeeded]((uint64_t)v14))
  {

    _LSServer_DatabaseExecutionContext();
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    -[LSDBExecutionContext setServerDatabase:]((uint64_t)v23, v14);

    _LSDatabaseCommit((uint64_t)v14);
    if (gSkippedRemap == 1)
    {
      gSkippedRemap = 0;
      _LSDatabaseGetLog();
      v24 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "_LSDatabaseRemap_block_invoke";
        _os_log_impl(&dword_182882000, v24, OS_LOG_TYPE_DEFAULT, "%{public}s remapped the database after skipping a previous remap", buf, 0xCu);
      }
      v22 = 0;
LABEL_31:

      v17 = v22;
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_12:

  v18 = (*(uint64_t (**)(_QWORD, BOOL, id, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), v17 == 0, v17, 0);
  MEMORY[0x186DAF214](v18);

}

void sub_18294E578(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZL15_LSGetStoreNodev_block_invoke()
{
  void *v0;
  void *v1;
  FSNode *v2;
  void *v3;

  v0 = (void *)MEMORY[0x186DAE7A0]();
  objc_msgSend((id)__LSDefaultsGetSharedInstance(), "databaseStoreFileURL");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if (v1)
  {
    v2 = -[FSNode initWithURL:flags:error:]([FSNode alloc], "initWithURL:flags:error:", v1, 0, 0);
    v3 = (void *)_LSGetStoreNode(void)::result;
    _LSGetStoreNode(void)::result = (uint64_t)v2;

  }
  objc_autoreleasePoolPop(v0);
}

void sub_18294E670(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *std::string::basic_string[abi:nn180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void OUTLINED_FUNCTION_4_3(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0xCu);
}

void OUTLINED_FUNCTION_8_0(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

void OUTLINED_FUNCTION_10_0(float a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(float *)a3 = a1;
  *(_QWORD *)(a3 + 4) = a4;
  *(_WORD *)(a3 + 12) = 2048;
  *(_QWORD *)(a3 + 14) = v4;
}

void OUTLINED_FUNCTION_11_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 2u);
}

id getAppProtectionServiceQueue(void)
{
  if (getAppProtectionServiceQueue(void)::sOnce != -1)
    dispatch_once(&getAppProtectionServiceQueue(void)::sOnce, &__block_literal_global_22);
  return (id)getAppProtectionServiceQueue(void)::sQueue;
}

void ___Z28getAppProtectionServiceQueuev_block_invoke()
{
  dispatch_queue_t v0;
  void *v1;
  NSObject *v2;

  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v2 = objc_claimAutoreleasedReturnValue();
  v0 = dispatch_queue_create("appProtectionServiceQueue", v2);
  v1 = (void *)getAppProtectionServiceQueue(void)::sQueue;
  getAppProtectionServiceQueue(void)::sQueue = (uint64_t)v0;

}

void sub_18294EA50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18294EB24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18294EBCC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18294EEA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void computeAddedAndRemovedBundleIDs(_QWORD *a1, _QWORD *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  id v16;
  id v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = a4;
  objc_msgSend(MEMORY[0x1E0C99E20], "setWithArray:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_alloc_init(MEMORY[0x1E0C99E20]);
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v11 = v7;
  v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
  if (v12)
  {
    v13 = *(_QWORD *)v19;
    do
    {
      for (i = 0; i != v12; ++i)
      {
        if (*(_QWORD *)v19 != v13)
          objc_enumerationMutation(v11);
        v15 = *(_QWORD *)(*((_QWORD *)&v18 + 1) + 8 * i);
        objc_msgSend(v9, "removeObject:", v15);
        if ((objc_msgSend(v8, "containsObject:", v15) & 1) == 0)
          objc_msgSend(v10, "addObject:", v15);
      }
      v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
    }
    while (v12);
  }

  v16 = objc_retainAutorelease(v9);
  *a1 = v16;
  v17 = objc_retainAutorelease(v10);
  *a2 = v17;

}

void sub_18294F0CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void notifyLSObservers(void *a1, void *a2, char a3, _QWORD *a4)
{
  id v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  _QWORD v12[4];
  id v13;
  id v14;
  uint64_t *v15;
  char v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  void (*v21)(uint64_t);
  id v22;

  v7 = a1;
  v8 = a2;
  +[LSDBExecutionContext sharedServerInstance]();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = 0;
  v18 = &v17;
  v19 = 0x3032000000;
  v20 = __Block_byref_object_copy__16;
  v21 = __Block_byref_object_dispose__16;
  v22 = 0;
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = ___ZL17notifyLSObserversP5NSSetS0_bPU15__autoreleasingP7NSError_block_invoke;
  v12[3] = &unk_1E1042BF8;
  v10 = v7;
  v13 = v10;
  v16 = a3;
  v11 = v8;
  v14 = v11;
  v15 = &v17;
  -[LSDBExecutionContext syncWrite:]((uint64_t)v9, v12);
  *a4 = objc_retainAutorelease((id)v18[5]);

  _Block_object_dispose(&v17, 8);
}

void sub_18294F238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;
  void *v23;
  void *v24;

  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_18294F508(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_18294F7E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_18294F938(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18294F9E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18294FA5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_18294FADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_18294FBEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_18294FDA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18294FE60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18294FED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_18294FF60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18294FFD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1829502FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

void ___ZL17notifyLSObserversP5NSSetS0_bPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  LaunchServices::DatabaseContext *v6;
  _LSDServiceDomain *v7;
  LSContext *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t j;
  id v17;
  id v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  void **CurrentContext;
  id v28;
  char v29;
  id v30;
  _BYTE v31[128];
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  CurrentContext = (void **)_LSDatabaseContextGetCurrentContext(v6);
  v28 = 0;
  v29 = 0;
  v30 = 0;
  +[_LSDServiceDomain defaultServiceDomain]();
  v7 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
  v8 = (LSContext *)LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)&CurrentContext, v7, 0);

  if (v8)
  {
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v9 = *(id *)(a1 + 32);
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v23, v32, 16);
    if (v10)
    {
      v11 = *(_QWORD *)v24;
      do
      {
        for (i = 0; i != v10; ++i)
        {
          if (*(_QWORD *)v24 != v11)
            objc_enumerationMutation(v9);
          updateProtectedBundleFlag(v8, *(NSString **)(*((_QWORD *)&v23 + 1) + 8 * i));
        }
        v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v23, v32, 16);
      }
      while (v10);
    }

    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v13 = *(id *)(a1 + 40);
    v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v19, v31, 16);
    if (v14)
    {
      v15 = *(_QWORD *)v20;
      do
      {
        for (j = 0; j != v14; ++j)
        {
          if (*(_QWORD *)v20 != v15)
            objc_enumerationMutation(v13);
          updateProtectedBundleFlag(v8, *(NSString **)(*((_QWORD *)&v19 + 1) + 8 * j));
        }
        v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v19, v31, 16);
      }
      while (v14);
    }

    _LSArmSaveTimer(1);
    _LSDatabaseCommit((uint64_t)v8->db);
    if (v6)
      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), a3);
  }
  if (CurrentContext && v29)
    _LSContextDestroy(CurrentContext);
  v17 = v28;
  CurrentContext = 0;
  v28 = 0;

  v29 = 0;
  v18 = v30;
  v30 = 0;

}

void sub_182950590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,void *a28)
{

  _Unwind_Resume(a1);
}

void updateProtectedBundleFlag(LSContext *a1, NSString *a2)
{
  NSString *v2;
  NSString *v3;

  v3 = a2;
  v2 = v3;
  _CSStoreEnumerateUnits();

}

void sub_1829506C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

uint64_t ___ZL25updateProtectedBundleFlagP9LSContextP8NSStringbb_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = _CSGetStringForCFString();
  if ((_DWORD)result)
  {
    if (*(_DWORD *)(a3 + 12) == (_DWORD)result)
      return _LSBundleSetMoreFlags();
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_5_0(uint64_t result, uint64_t a2, uint64_t a3, float a4)
{
  *(float *)result = a4;
  *(_QWORD *)(result + 4) = a2;
  *(_WORD *)(result + 12) = 2048;
  *(_QWORD *)(result + 14) = a3;
  return result;
}

void sub_182950830(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1829508DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_182950B98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182950DB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182950F34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1829510B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZL47dispatchEnumerateAndRegisterWithDiagnosticFramet_block_invoke()
{
  LaunchServices::DomainEvaluators::ServerDomainEvaluator::~ServerDomainEvaluator((LaunchServices::DomainEvaluators::ServerDomainEvaluator *)__LAUNCH_SERVICES_IS_REBUILDING_THE_DATABASE_BECAUSE_CREATION_FROM_STORE_FAILED__);
  LaunchServices::DomainEvaluators::ServerDomainEvaluator::~ServerDomainEvaluator((LaunchServices::DomainEvaluators::ServerDomainEvaluator *)__LAUNCH_SERVICES_IS_REBUILDING_THE_DATABASE_BECAUSE_IT_WAS_CORRUPT__);
  LaunchServices::DomainEvaluators::ServerDomainEvaluator::~ServerDomainEvaluator((LaunchServices::DomainEvaluators::ServerDomainEvaluator *)__LAUNCH_SERVICES_IS_REBUILDING_THE_DATABASE_BECAUSE_IT_DID_NOT_EXIST__);
  LaunchServices::DomainEvaluators::ServerDomainEvaluator::~ServerDomainEvaluator((LaunchServices::DomainEvaluators::ServerDomainEvaluator *)__LAUNCH_SERVICES_IS_REBUILDING_THE_DATABASE_BECAUSE_A_RECOVERY_FILE_EXISTED__);
  LaunchServices::DomainEvaluators::ServerDomainEvaluator::~ServerDomainEvaluator((LaunchServices::DomainEvaluators::ServerDomainEvaluator *)__LAUNCH_SERVICES_IS_REBUILDING_THE_DATABASE_BECAUSE_ALLOC_FAILED_DURING_STORE_CREATION__);
  LaunchServices::DomainEvaluators::ServerDomainEvaluator::~ServerDomainEvaluator((LaunchServices::DomainEvaluators::ServerDomainEvaluator *)__LAUNCH_SERVICES_IS_REBUILDING_THE_DATABASE_BECAUSE_STORE_CREATION_FAILED_UNEXPECTEDLY__);
  LaunchServices::DomainEvaluators::ServerDomainEvaluator::~ServerDomainEvaluator((LaunchServices::DomainEvaluators::ServerDomainEvaluator *)__LAUNCH_SERVICES_IS_REBUILDING_THE_DATABASE_BECAUSE_CREATION_FROM_FRESH_FAILED__);
  LaunchServices::DomainEvaluators::ServerDomainEvaluator::~ServerDomainEvaluator((LaunchServices::DomainEvaluators::ServerDomainEvaluator *)__LAUNCH_SERVICES_IS_REBUILDING_THE_DATABASE_BECAUSE_THE_DATABASE_WAS_CREATED_FRESH__);
  LaunchServices::DomainEvaluators::ServerDomainEvaluator::~ServerDomainEvaluator((LaunchServices::DomainEvaluators::ServerDomainEvaluator *)__LAUNCH_SERVICES_IS_REBUILDING_THE_DATABASE_UNEXPECTEDLY__);
}

uint64_t __LAUNCH_SERVICES_IS_REBUILDING_THE_DATABASE_BECAUSE_CREATION_FROM_STORE_FAILED__(__int16 a1)
{
  return _LSServer_LSEnumerateAndRegisterAllBundles(0, a1);
}

uint64_t __LAUNCH_SERVICES_IS_REBUILDING_THE_DATABASE_BECAUSE_IT_WAS_CORRUPT__(__int16 a1)
{
  return _LSServer_LSEnumerateAndRegisterAllBundles(0, a1);
}

uint64_t __LAUNCH_SERVICES_IS_REBUILDING_THE_DATABASE_BECAUSE_IT_DID_NOT_EXIST__(__int16 a1)
{
  return _LSServer_LSEnumerateAndRegisterAllBundles(0, a1);
}

uint64_t __LAUNCH_SERVICES_IS_REBUILDING_THE_DATABASE_BECAUSE_A_RECOVERY_FILE_EXISTED__(__int16 a1)
{
  return _LSServer_LSEnumerateAndRegisterAllBundles(0, a1);
}

uint64_t __LAUNCH_SERVICES_IS_REBUILDING_THE_DATABASE_BECAUSE_ALLOC_FAILED_DURING_STORE_CREATION__(__int16 a1)
{
  return _LSServer_LSEnumerateAndRegisterAllBundles(0, a1);
}

uint64_t __LAUNCH_SERVICES_IS_REBUILDING_THE_DATABASE_BECAUSE_STORE_CREATION_FAILED_UNEXPECTEDLY__(__int16 a1)
{
  return _LSServer_LSEnumerateAndRegisterAllBundles(0, a1);
}

uint64_t __LAUNCH_SERVICES_IS_REBUILDING_THE_DATABASE_BECAUSE_CREATION_FROM_FRESH_FAILED__(__int16 a1)
{
  return _LSServer_LSEnumerateAndRegisterAllBundles(0, a1);
}

uint64_t __LAUNCH_SERVICES_IS_REBUILDING_THE_DATABASE_BECAUSE_THE_DATABASE_WAS_CREATED_FRESH__(__int16 a1)
{
  return _LSServer_LSEnumerateAndRegisterAllBundles(0, a1);
}

uint64_t __LAUNCH_SERVICES_IS_REBUILDING_THE_DATABASE_UNEXPECTEDLY__(__int16 a1)
{
  return _LSServer_LSEnumerateAndRegisterAllBundles(0, a1);
}

void *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unsigned __int8 *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  void **v14;
  void *i;
  unint64_t v16;
  _QWORD *v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  _BYTE v28[8];
  uint64_t v29;
  char v30;

  v5 = (unsigned __int8 *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t)v28, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v14)
    {
      for (i = *v14; i; i = *(void **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:nn180100](a1 + 32, (unsigned __int8 *)i + 16, v5) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v3)
            break;
        }
      }
    }
  }
  v17 = (_QWORD *)(a1 + 16);
  i = operator new(0x28uLL);
  v29 = a1 + 16;
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v10;
  *((_OWORD *)i + 1) = *(_OWORD *)a3;
  *((_QWORD *)i + 4) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v30 = 1;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v11 || (float)(v19 * (float)v11) < v18)
  {
    v20 = 1;
    if (v11 >= 3)
      v20 = (v11 & (v11 - 1)) != 0;
    v21 = v20 | (2 * v11);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__rehash<true>(a1, v23);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v3 = v10 % v11;
      else
        v3 = v10;
    }
    else
    {
      v3 = (v11 - 1) & v10;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v25)
  {
    *(_QWORD *)i = *v25;
LABEL_41:
    *v25 = i;
    goto LABEL_42;
  }
  *(_QWORD *)i = *v17;
  *v17 = i;
  *(_QWORD *)(v24 + 8 * v3) = v17;
  if (*(_QWORD *)i)
  {
    v26 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v26 >= v11)
        v26 %= v11;
    }
    else
    {
      v26 &= v11 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_41;
  }
LABEL_42:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1829514C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:nn180100](v11, v10);
  _Unwind_Resume(a1);
}

uint64_t std::equal_to<std::string>::operator()[abi:nn180100](uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v14;
  uint64_t result;

  v3 = a3;
  v4 = a2[23];
  if ((v4 & 0x80u) == 0)
    v5 = a2[23];
  else
    v5 = *((_QWORD *)a2 + 1);
  v6 = a3[23];
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *((_QWORD *)a3 + 1);
  if (v5 != v6)
    return 0;
  if (v7 < 0)
    v3 = *(unsigned __int8 **)a3;
  if ((v4 & 0x80) != 0)
    return memcmp(*(const void **)a2, v3, *((_QWORD *)a2 + 1)) == 0;
  if (!a2[23])
    return 1;
  v8 = v4 - 1;
  do
  {
    v10 = *a2++;
    v9 = v10;
    v12 = *v3++;
    v11 = v12;
    v14 = v8-- != 0;
    result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;

  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      v11 = v7 + v9;
      v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      v14 = v8 + a3 + v7 + v4;
      v15 = v14 + v5;
      v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      v18 = v17 + v6 + v9;
      v19 = __ROR8__(v18, 44);
      v20 = v18 + v10;
      v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      v23 = *a2;
      v22 = a2 + 4;
      v24 = v23 - 0x4B6D499041670D8DLL * v5;
      v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v26 = *(v22 - 3);
        v27 = v24 + v15 + v11 + v26;
        v28 = v22[2];
        v29 = v22[3];
        v30 = v22[1];
        v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        v31 = v13 + v20;
        v32 = *(v22 - 2);
        v33 = *(v22 - 1);
        v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        v35 = v34 + v20 + v33;
        v36 = v34 + v26 + v32;
        v15 = v36 + v33;
        v37 = __ROR8__(v36, 44) + v34;
        v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        v16 = v37 + __ROR8__(v35 + v38, 21);
        v39 = v24 + v21 + *v22;
        v20 = v39 + v30 + v28 + v29;
        v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        v13 = v38;
        v25 += 64;
      }
      while (v25);
      v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:nn180100](a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:nn180100](a2, a3);
  }
  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:nn180100](a2, a3);
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:nn180100](_DWORD *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if (a2 < 9)
  {
    if (a2 < 4)
    {
      result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    v3 = *(_QWORD *)((char *)a1 + a2 - 8);
    v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:nn180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = a1[1];
  v3 = 0xB492B66FBE98F273 * *a1;
  v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8);
  v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(_QWORD *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:nn180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)((char *)a1 + a2 - 16);
  v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  v5 = a1[2];
  v4 = a1[3];
  v6 = __ROR8__(v3 + v4, 52);
  v7 = v3 + a1[1];
  v8 = __ROR8__(v7, 7);
  v9 = v7 + v5;
  v10 = *(_QWORD *)((char *)a1 + a2 - 32) + v5;
  v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  v12 = *(_QWORD *)((char *)a1 + a2 - 24) + v10 + v2;
  v13 = 0xC3A5C85C97CB3127 * (v12 + *(_QWORD *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:nn180100](uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 39) < 0)
      operator delete(__p[2]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void sub_182951A60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _LSDatabaseContextStartAccessing(const unsigned int *a1, uint64_t a2, _QWORD *a3)
{
  LaunchServices::DatabaseContext *v5;
  uint64_t started;

  uidPointerToDomain(a1);
  v5 = (LaunchServices::DatabaseContext *)objc_claimAutoreleasedReturnValue();
  started = _LSDatabaseContextStartAccessingWithDomain(v5, a2, a3);

  return started;
}

void sub_182951AC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void _LSDatabaseContextStopAccessing(LaunchServices::DatabaseContext *a1)
{
  LaunchServices::DatabaseContext *PerThreadStateReference;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  PerThreadStateReference = (LaunchServices::DatabaseContext *)LaunchServices::DatabaseContext::getPerThreadStateReference(a1);
  LaunchServices::DatabaseContext::getLog(PerThreadStateReference);
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    _LSDatabaseContextStopAccessing_cold_1((uint64_t)PerThreadStateReference, v2);

  v3 = *((_QWORD *)PerThreadStateReference + 4);
  if (v3 <= 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _LSDatabaseContextStopAccessing()");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "handleFailureInFunction:file:lineNumber:description:", v8, CFSTR("LSDatabaseContext.mm"), 220, CFSTR("Called +stopAccessing when not accessing the database. This is a bug in the Launch Services client."));

    v3 = *((_QWORD *)PerThreadStateReference + 4);
  }
  v4 = v3 - 1;
  *((_QWORD *)PerThreadStateReference + 4) = v4;
  if (!v4)
  {
    if (*(_QWORD *)PerThreadStateReference)
    {
      if (*((_BYTE *)PerThreadStateReference + 16))
        _LSContextDestroy(*(void ***)PerThreadStateReference);
    }
    v5 = (void *)*((_QWORD *)PerThreadStateReference + 1);
    *(_QWORD *)PerThreadStateReference = 0;
    *((_QWORD *)PerThreadStateReference + 1) = 0;

    *((_BYTE *)PerThreadStateReference + 16) = 0;
    v6 = (void *)*((_QWORD *)PerThreadStateReference + 3);
    *((_QWORD *)PerThreadStateReference + 3) = 0;

  }
}

void sub_182951C40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t _LSDatabaseContextStartAccessingWithDomain(LaunchServices::DatabaseContext *a1, uint64_t a2, _QWORD *a3)
{
  LaunchServices::DatabaseContext *PerThreadStateReference;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t SessionKey;
  BOOL v12;
  char v13;
  int v14;
  int v15;
  int v16;
  const audit_token_t *v17;
  uint64_t result;
  void *v19;
  _LSDServiceDomain *v20;
  uint64_t v21;
  id v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  const __CFString *v30;
  uint64_t v31;
  const __CFString *v32;
  uint64_t v33;
  _QWORD v34[2];

  v34[1] = *MEMORY[0x1E0C80C00];
  PerThreadStateReference = (LaunchServices::DatabaseContext *)LaunchServices::DatabaseContext::getPerThreadStateReference(a1);
  LaunchServices::DatabaseContext::getLog(PerThreadStateReference);
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    _LSDatabaseContextStartAccessingWithDomain_cold_1((uint64_t)PerThreadStateReference, a2, v7);

  v8 = *((_QWORD *)PerThreadStateReference + 4);
  if (v8 == 0x7FFFFFFFFFFFFFFFLL)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "BOOL _LSDatabaseContextStartAccessingWithDomain(_LSDServiceDomain *const __strong _Nonnull, LSDatabaseContextAccessOptions, NSError *__autoreleasing * _Nullable)");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "handleFailureInFunction:file:lineNumber:description:", v28, CFSTR("LSDatabaseContext.mm"), 164, CFSTR("Called +startAccessingReturningError: a ludicrous number of times without calling +stopAccessing. This is likely a bug in the Launch Services client."));

    v8 = *((_QWORD *)PerThreadStateReference + 4);
  }
  if (v8 < 1)
  {
    v15 = -[_LSDServiceDomain resolvedDomainUID]((uint64_t)a1);
    v16 = objc_msgSend((id)__LSDefaultsGetSharedInstance(), "proxyUIDForCurrentEffectiveUID");
    if (v15
      && v16 != v15
      && v16
      && (v17 = (const audit_token_t *)_LSGetAuditTokenForSelf(),
          !_LSCheckEntitlementForAuditToken(v17, CFSTR("com.apple.private.xpc.launchd.per-user-lookup"))))
    {
      if (a3)
      {
        v29 = *MEMORY[0x1E0CB2938];
        v30 = CFSTR("This process is not privileged enough to access XPC services on another user account.");
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v30, &v29, 1);
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2FE0], 13, (uint64_t)"_LSDatabaseContextStartAccessingWithDomain", 187, v24);
        *a3 = (id)objc_claimAutoreleasedReturnValue();

      }
    }
    else
    {
      if (LaunchServices::Database::Context::_get(PerThreadStateReference, (_LSDServiceDomain *)a1, a2))
      {
        result = 1;
        *((_QWORD *)PerThreadStateReference + 4) = 1;
        return result;
      }
      if (a3)
      {
        +[_LSDServiceDomain defaultServiceDomain]();
        v20 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
        v21 = LaunchServices::Database::Context::_get(PerThreadStateReference, v20, 0);

        if (v21)
          v22 = 0;
        else
          v22 = objc_retainAutorelease(*((id *)PerThreadStateReference + 3));
        *a3 = v22;
      }
      if (*(_QWORD *)PerThreadStateReference && *((_BYTE *)PerThreadStateReference + 16))
        _LSContextDestroy(*(void ***)PerThreadStateReference);
      v25 = (void *)*((_QWORD *)PerThreadStateReference + 1);
      *(_QWORD *)PerThreadStateReference = 0;
      *((_QWORD *)PerThreadStateReference + 1) = 0;

      *((_BYTE *)PerThreadStateReference + 16) = 0;
      v26 = (void *)*((_QWORD *)PerThreadStateReference + 3);
      *((_QWORD *)PerThreadStateReference + 3) = 0;

    }
    return 0;
  }
  if ((a2 & 2) != 0)
  {
    if (a3)
    {
      v33 = *MEMORY[0x1E0CB2938];
      v34[0] = CFSTR("LSDatabaseContextAccessOptionAlwaysUpdate cannot be specified while the database is already being accessed.");
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v34, &v33, 1);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2FE0], 16, (uint64_t)"_LSDatabaseContextStartAccessingWithDomain", 171, v19);
      *a3 = (id)objc_claimAutoreleasedReturnValue();

    }
    return 0;
  }
  v9 = -[_LSDServiceDomain resolvedSessionKey]((uint64_t)a1);
  if (*(_QWORD *)PerThreadStateReference)
  {
    v10 = v9;
    SessionKey = _LSDatabaseGetSessionKey(**(_QWORD **)PerThreadStateReference);
    if ((v10 & 0x100000000) != 0)
    {
      if ((SessionKey & 0x100000000) != 0)
        goto LABEL_36;
    }
    else
    {
      v12 = (SessionKey & 0x100000000) == 0 && (_DWORD)v10 == (_DWORD)SessionKey;
      v13 = v12;
      if (!v12 && ((SessionKey | v10) & 0x100000000) == 0)
      {
        v14 = objc_msgSend((id)__LSDefaultsGetSharedInstance(), "proxyUIDForUID:", SessionKey);
        if (v14 == objc_msgSend((id)__LSDefaultsGetSharedInstance(), "proxyUIDForUID:", v10))
          goto LABEL_36;
        goto LABEL_31;
      }
      if ((v13 & 1) != 0)
      {
LABEL_36:
        ++*((_QWORD *)PerThreadStateReference + 4);
        return 1;
      }
    }
  }
LABEL_31:
  if (a3)
  {
    v31 = *MEMORY[0x1E0CB2938];
    v32 = CFSTR("LSDatabaseContext cannot take a user ID while the database is already being accessed.");
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v32, &v31, 1);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2FE0], 56, (uint64_t)"_LSDatabaseContextStartAccessingWithDomain", 175, v23);
    *a3 = (id)objc_claimAutoreleasedReturnValue();

  }
  return 0;
}

void sub_18295211C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id uidPointerToDomain(const unsigned int *a1)
{
  void *v1;

  if (a1)
  {
    v1 = (void *)-[_LSDServiceDomain initWithUID:]([_LSDServiceDomain alloc], *a1);
  }
  else
  {
    +[_LSDServiceDomain defaultServiceDomain]();
    v1 = (void *)objc_claimAutoreleasedReturnValue();
  }
  return v1;
}

void _LSDatabaseContextAccessWithDomainUsingBlock(LaunchServices::DatabaseContext *a1, uint64_t a2, uint64_t a3)
{
  uint64_t started;
  id v5;
  LaunchServices::DatabaseContext *v6;
  id v7;

  v7 = 0;
  started = _LSDatabaseContextStartAccessingWithDomain(a1, a2, &v7);
  v5 = v7;
  v6 = (LaunchServices::DatabaseContext *)(*(uint64_t (**)(uint64_t, uint64_t, id))(a3 + 16))(a3, started, v5);
  if ((_DWORD)started)
    _LSDatabaseContextStopAccessing(v6);

}

void sub_182952208(_Unwind_Exception *a1)
{
  void *v1;
  char v2;

  if ((v2 & 1) != 0)
    objc_end_catch();

  _Unwind_Resume(a1);
}

void _LSDatabaseContextAccessUsingBlock(const unsigned int *a1, uint64_t a2, uint64_t a3)
{
  LaunchServices::DatabaseContext *v5;

  uidPointerToDomain(a1);
  v5 = (LaunchServices::DatabaseContext *)objc_claimAutoreleasedReturnValue();
  _LSDatabaseContextAccessWithDomainUsingBlock(v5, a2, a3);

}

void sub_18295228C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void _LSDatabaseContextAccessContextUsingBlock(LaunchServices::DatabaseContext *a1, uint64_t a2)
{
  _QWORD *PerThreadStateReference;
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void **v11;
  id v12;
  char v13;
  id v14;

  PerThreadStateReference = LaunchServices::DatabaseContext::getPerThreadStateReference(a1);
  if ((uint64_t)PerThreadStateReference[4] >= 1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _LSDatabaseContextAccessContextUsingBlock(LSContext * _Nonnull, void (^const __strong _Nonnull)())");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "handleFailureInFunction:file:lineNumber:description:", v10, CFSTR("LSDatabaseContext.mm"), 251, CFSTR("Already accessing a database context when asked to access one explicitly. The results of this operation are undefined."));

  }
  v11 = (void **)a1;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  LaunchServices::Database::Context::operator=((uint64_t)PerThreadStateReference, (uint64_t)&v11);
  if (v11 && v13)
    _LSContextDestroy(v11);
  v5 = v12;
  v11 = 0;
  v12 = 0;

  v13 = 0;
  v6 = v14;
  v14 = 0;

  PerThreadStateReference[4] = 1;
  (*(void (**)(uint64_t))(a2 + 16))(a2);
  PerThreadStateReference[4] = 0;
  if (*PerThreadStateReference && *((_BYTE *)PerThreadStateReference + 16))
    _LSContextDestroy((void **)*PerThreadStateReference);
  v7 = (void *)PerThreadStateReference[1];
  *PerThreadStateReference = 0;
  PerThreadStateReference[1] = 0;

  *((_BYTE *)PerThreadStateReference + 16) = 0;
  v8 = (void *)PerThreadStateReference[3];
  PerThreadStateReference[3] = 0;

}

void sub_1829523E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *_LSDatabaseContextSetDetachProxyObjects(LaunchServices::DatabaseContext *a1)
{
  char v1;
  _QWORD *result;

  v1 = a1 ^ 1;
  result = LaunchServices::DatabaseContext::getPerThreadStateReference(a1);
  *((_BYTE *)result + 40) = v1;
  return result;
}

void sub_18295259C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, void *a18)
{

  _Unwind_Resume(a1);
}

void sub_182952680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_182952760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_182952850(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id systemIfExistsElseDefaultServiceDomain(void)
{
  void *v0;

  if (xpc_user_sessions_enabled() && _os_feature_enabled_impl())
  {
    +[_LSDServiceDomain systemSessionDomain]();
    v0 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    +[_LSDServiceDomain defaultServiceDomain]();
    v0 = (void *)objc_claimAutoreleasedReturnValue();
  }
  return v0;
}

void sub_1829528F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_182952950(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1829529A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void *_LSContextCreateVisualizer(id *a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  int CatalogTable;
  int v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  int v17;
  _QWORD *v18;
  uint64_t i;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  NSObject *v34;
  _BOOL4 v35;
  unsigned int *v36;
  unsigned int *j;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  id v43;
  void *v44;
  void *v45;
  void *v46;
  NSObject *v47;
  void *v48;
  id v49;
  void *v50;
  void *v52;
  _QWORD v53[4];
  NSObject *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  _BYTE v60[7];
  _QWORD v61[7];
  char v62;
  uint64_t v63;
  _BYTE v64[7];
  unsigned int v65;
  _QWORD v66[4];
  int v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t, int, void *);
  void *v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t (*v77)(uint64_t, uint64_t);
  uint64_t (*v78)(uint64_t);
  _BYTE v79[32];
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  __n128 (*v85)(__n128 *, __n128 *);
  void (*v86)(uint64_t);
  const char *v87;
  void *__p;
  char *v89;
  unint64_t v90;
  __int128 v91;
  void (*v92)(uint64_t, unsigned int, uint64_t);
  void *v93;
  _BYTE v94[47];
  _DWORD *v95[6];

  v95[3] = *(_DWORD **)MEMORY[0x1E0C80C00];
  v52 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D18B90]), "initWithStore:", *((_QWORD *)*a1 + 1));
  v2 = operator new();
  *(_QWORD *)v2 = *a1;
  v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytesNoCopy:length:deallocator:", v2, 8, &__block_literal_global_25);
  objc_msgSend(v52, "userInfo");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setObject:forKeyedSubscript:", v3, CFSTR("Context"));

  v82 = 0;
  v83 = &v82;
  v84 = 0x4812000000;
  v85 = __Block_byref_object_copy__17;
  v86 = __Block_byref_object_dispose__17;
  v87 = "";
  __p = 0;
  v89 = 0;
  v90 = 0;
  v74 = 0;
  v75 = &v74;
  v76 = 0x5812000000;
  v77 = __Block_byref_object_copy__11;
  v78 = __Block_byref_object_dispose__12;
  memset(v79, 0, sizeof(v79));
  v80 = 0;
  v81 = 1065353216;
  CatalogTable = _CSStoreGetCatalogTable();
  v6 = CatalogTable;
  v7 = v89;
  if ((unint64_t)v89 >= v90)
  {
    v9 = (char *)__p;
    v10 = (v89 - (_BYTE *)__p) >> 2;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 62)
      abort();
    v12 = v90 - (_QWORD)__p;
    if ((uint64_t)(v90 - (_QWORD)__p) >> 1 > v11)
      v11 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>((uint64_t)&v90, v13);
      v9 = (char *)__p;
      v7 = v89;
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v10];
    v16 = &v14[4 * v13];
    *(_DWORD *)v15 = v6;
    v8 = v15 + 4;
    while (v7 != v9)
    {
      v17 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v15 - 1) = v17;
      v15 -= 4;
    }
    __p = v15;
    v89 = v8;
    v90 = (unint64_t)v16;
    if (v9)
      operator delete(v9);
  }
  else
  {
    *(_DWORD *)v89 = CatalogTable;
    v8 = v7 + 4;
  }
  v89 = v8;
  v68 = MEMORY[0x1E0C809B0];
  v69 = 3221225472;
  v70 = ___LSContextCreateVisualizer_block_invoke_13;
  v71 = &unk_1E1042D48;
  v72 = &v82;
  v73 = &v74;
  _CSStoreEnumerateTables();
  memset(v66, 0, sizeof(v66));
  v67 = 1065353216;
  std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__rehash<true>((uint64_t)v66, 0x80uLL);
  LODWORD(v95[0]) = _CSStoreGetCatalogTable();
  *(_QWORD *)&v91 = v95;
  v18 = std::__hash_table<std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t)v66, (unsigned int *)v95, (uint64_t)&std::piecewise_construct, (_DWORD **)&v91);
  v18[3] = 0;
  v18[4] = LaunchServices::DatabaseVisualization::writeTableDescription;
  v18[5] = 0;
  for (i = 120; i != 1576; i += 104)
  {
    v20 = *(_QWORD *)v2;
    _LSBindingMapGetVisualizationFunctions(&v91);
    v95[0] = (_DWORD *)(v20 + 16 + i);
    v21 = std::__hash_table<std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t)v66, v95[0], (uint64_t)&std::piecewise_construct, v95);
    *(_OWORD *)(v21 + 3) = v91;
    v21[5] = v92;
  }
  _LSBundleGetVisualizationFunctions((id (**)(void **, LSContext *, int))&v91);
  v95[0] = (_DWORD *)(*(_QWORD *)v2 + 20);
  v22 = std::__hash_table<std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t)v66, v95[0], (uint64_t)&std::piecewise_construct, v95);
  *(_OWORD *)(v22 + 3) = v91;
  v22[5] = v92;
  _LSAliasGetVisualizationFunctions((id (**)(void **, LSContext *, int))&v91);
  v95[0] = (_DWORD *)(*(_QWORD *)v2 + 1600);
  v23 = std::__hash_table<std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t)v66, v95[0], (uint64_t)&std::piecewise_construct, v95);
  *(_OWORD *)(v23 + 3) = v91;
  v23[5] = v92;
  _UTTypeGetVisualizationFunctions((id (**)(LaunchServices::UTIs *, LSContext *))&v91);
  v95[0] = (_DWORD *)(*(_QWORD *)v2 + 32);
  v24 = std::__hash_table<std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t)v66, v95[0], (uint64_t)&std::piecewise_construct, v95);
  *(_OWORD *)(v24 + 3) = v91;
  v24[5] = v92;
  _LSPlistGetVisualizationFunctions(&v91);
  v95[0] = (_DWORD *)(*(_QWORD *)v2 + 1616);
  v25 = std::__hash_table<std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t)v66, v95[0], (uint64_t)&std::piecewise_construct, v95);
  *(_OWORD *)(v25 + 3) = v91;
  v25[5] = v92;
  _LSClaimGetVisualizationFunctions((unsigned int *(**)(LaunchServices::LocalizedString **, LSContext *))&v91);
  v95[0] = (_DWORD *)(*(_QWORD *)v2 + 24);
  v26 = std::__hash_table<std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t)v66, v95[0], (uint64_t)&std::piecewise_construct, v95);
  *(_OWORD *)(v26 + 3) = v91;
  v26[5] = v92;
  LSHandlerPref::GetVisualizationFunctions((id (**)(LSHandlerPref **, LSContext *, _LSDatabase *))&v91);
  v95[0] = (_DWORD *)(*(_QWORD *)v2 + 1592);
  v27 = std::__hash_table<std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t)v66, v95[0], (uint64_t)&std::piecewise_construct, v95);
  *(_OWORD *)(v27 + 3) = v91;
  v27[5] = v92;
  _LSContainerGetVisualizationFunctions((int *(**)(void **, LSContext *))&v91);
  v95[0] = (_DWORD *)(*(_QWORD *)v2 + 1596);
  v28 = std::__hash_table<std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t)v66, v95[0], (uint64_t)&std::piecewise_construct, v95);
  *(_OWORD *)(v28 + 3) = v91;
  v28[5] = v92;
  _LSExtensionPointGetVisualizationFunctions((id (**)(LaunchServices::ExtensionPoints *, LSContext *, int))&v91);
  v95[0] = (_DWORD *)(*(_QWORD *)v2 + 1608);
  v29 = std::__hash_table<std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t)v66, v95[0], (uint64_t)&std::piecewise_construct, v95);
  *(_OWORD *)(v29 + 3) = v91;
  v29[5] = v92;
  _LSPluginGetVisualizationFunctions((unsigned int *(**)(LaunchServices::Plugins *, LSContext *, int))&v91);
  v95[0] = (_DWORD *)(*(_QWORD *)v2 + 1604);
  v30 = std::__hash_table<std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t)v66, v95[0], (uint64_t)&std::piecewise_construct, v95);
  *(_OWORD *)(v30 + 3) = v91;
  v30[5] = v92;
  _LSBindingListGetVisualizationFunctions(&v91);
  v95[0] = (_DWORD *)(*(_QWORD *)v2 + 1612);
  v31 = std::__hash_table<std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t)v66, v95[0], (uint64_t)&std::piecewise_construct, v95);
  *(_OWORD *)(v31 + 3) = v91;
  v31[5] = v92;
  LaunchServices::LocalizedString::GetVisualizationFunctions((id (**)(LaunchServices::LocalizedString **, LSContext *, _LSDatabase *))&v91);
  v95[0] = (_DWORD *)(*(_QWORD *)v2 + 1620);
  v32 = std::__hash_table<std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t)v66, v95[0], (uint64_t)&std::piecewise_construct, v95);
  *(_OWORD *)(v32 + 3) = v91;
  v32[5] = v92;
  LaunchServices::CanonicalString::GetVisualizationFunctions((id (**)(LaunchServices::CanonicalString **, LSContext *, _LSDatabase *))&v91);
  v95[0] = (_DWORD *)(*(_QWORD *)v2 + 1624);
  v33 = std::__hash_table<std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t)v66, v95[0], (uint64_t)&std::piecewise_construct, v95);
  *(_OWORD *)(v33 + 3) = v91;
  v33[5] = v92;
  _LSDefaultLog();
  v34 = objc_claimAutoreleasedReturnValue();
  v35 = os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG);

  if (v35)
  {
    *(_QWORD *)&v91 = MEMORY[0x1E0C809B0];
    *((_QWORD *)&v91 + 1) = 3321888768;
    v92 = ___ZN14LaunchServices21DatabaseVisualizationL14getAllHandlersEP9LSContext_block_invoke;
    v93 = &__block_descriptor_72_ea8_32c130_ZTSNSt3__113unordered_mapIj38_LSDatabaseTableVisualizationFunctionsNS_4hashIjEENS_8equal_toIjEENS_9allocatorINS_4pairIKjS1_EEEEEE_e35_v40__0I8____CFString__12r_v20I28_32l;
    std::unordered_map<unsigned int,_LSDatabaseTableVisualizationFunctions>::unordered_map((uint64_t)v94, (uint64_t)v66);
    _CSStoreEnumerateTables();
    std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>>>::~__hash_table((uint64_t)v94);
  }
  v36 = (unsigned int *)v83[6];
  for (j = (unsigned int *)v83[7]; v36 != j; ++v36)
  {
    v65 = *v36;
    v38 = std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::find<unsigned int>(v66, &v65);
    if (v38)
    {
      v40 = v38[3];
      v39 = v38[4];
      v41 = v38[5];
      v42 = v65;
      if (v42 == _CSStoreGetCatalogTable()
        || (_LSBindingMapGetVisualizationFunctions(&v91), v39 == *((_QWORD *)&v91 + 1)))
      {
        v47 = 0;
      }
      else
      {
        *(_QWORD *)&v91 = &v65;
        v43 = (id)std::__hash_table<std::__hash_value_type<unsigned int,NSString * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,NSString * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,NSString * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,NSString * {__strong}>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)(v75 + 6), &v65, (uint64_t)&std::piecewise_construct, (_DWORD **)&v91)[3];
        v44 = v43;
        if (v43)
        {
          v45 = (void *)MEMORY[0x1E0CB3940];
          objc_msgSend(v43, "lowercaseString");
          v46 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v45, "stringWithFormat:", CFSTR("%@ id"), v46);
          v47 = objc_claimAutoreleasedReturnValue();

        }
        else
        {
          v47 = CFSTR("id");
        }

      }
      v49 = objc_alloc_init(MEMORY[0x1E0D18B98]);
      v50 = v49;
      if (v40)
      {
        v61[0] = MEMORY[0x1E0C809B0];
        v61[1] = 3221225472;
        v61[2] = ___LSContextCreateVisualizer_block_invoke_20;
        v61[3] = &__block_descriptor_72_e39___NSString_24__0___CSVisualizer_8I16I20l;
        v61[4] = v40;
        v61[5] = v39;
        v61[6] = v41;
        v62 = 1;
        v63 = v2;
        objc_msgSend(v49, "setGetSummary:", v61);
      }
      if (v39)
      {
        v53[0] = MEMORY[0x1E0C809B0];
        v53[1] = 3221225472;
        v53[2] = ___LSContextCreateVisualizer_block_invoke_2;
        v53[3] = &unk_1E1042D90;
        v55 = v2;
        v54 = v47;
        v56 = v40;
        v57 = v39;
        v58 = v41;
        v59 = 1;
        *(_DWORD *)v60 = *(_DWORD *)v64;
        *(_DWORD *)&v60[3] = *(_DWORD *)&v64[3];
        objc_msgSend(v50, "setGetDescription:", v53);

      }
      objc_msgSend(v52, "setFunctions:forTable:", v50, v65);

    }
    else
    {
      _LSDefaultLog();
      v47 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
      {
        v48 = (void *)_CSStoreCopyTableName();
        _LSContextCreateVisualizer_cold_1(v48, (uint8_t *)v95, (_DWORD **)((char *)v95 + 4), v47);
      }
    }

  }
  std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>>>::~__hash_table((uint64_t)v66);
  _Block_object_dispose(&v74, 8);
  std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::~__hash_table((uint64_t)&v79[8]);
  _Block_object_dispose(&v82, 8);
  if (__p)
  {
    v89 = (char *)__p;
    operator delete(__p);
  }
  return v52;
}

void sub_182953370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  uint64_t a65;
  uint64_t v65;

  std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>>>::~__hash_table(v65);
  std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>>>::~__hash_table((uint64_t)&a35);
  _Block_object_dispose(&a47, 8);
  std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::~__hash_table(a11);
  _Block_object_dispose(&a58, 8);
  if (__p)
  {
    a65 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__11(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>>>::__hash_table(a1 + 48, (uint64_t *)(a2 + 48));
}

uint64_t __Block_byref_object_dispose__12(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::~__hash_table(a1 + 48);
}

void sub_1829537A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  void *v4;
  va_list va;

  va_start(va, a2);

  LaunchServices::DumpWriter::~DumpWriter((id *)va);
  _Unwind_Resume(a1);
}

void _LSServer_BeginProvidingVisualizationArchives()
{
  void *v0;
  id v1;

  _LSAssertRunningInServer((uint64_t)"void _LSServer_BeginProvidingVisualizationArchives()");
  if (objc_msgSend((id)__LSDefaultsGetSharedInstance(), "isAppleInternal"))
  {
    if (_LSServer_BeginProvidingVisualizationArchives::onceToken != -1)
      dispatch_once(&_LSServer_BeginProvidingVisualizationArchives::onceToken, &__block_literal_global_35);
    v0 = (void *)MEMORY[0x1E0D18B88];
    objc_msgSend((id)__LSDefaultsGetSharedInstance(), "serviceNameForConnectionType:", 9);
    v1 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "beginProvidingVisualizationArchivesWithMachServiceName:queue:creatingVisualizersWithBlock:");

  }
}

void sub_182953898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1829539B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  void *v20;

  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__39(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_182953B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  const void *v5;
  void *v6;
  va_list va;

  va_start(va, a3);

  CFRelease(v5);
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)va);

  _Unwind_Resume(a1);
}

uint64_t _LSDisplayHumanReadableData(uint64_t *a1, FILE *a2, void *a3, void *a4, void *a5, uint64_t a6, _QWORD *a7)
{
  id v12;
  int CatalogTable;
  BOOL v14;
  void *Visualizer;
  void *v17;
  void *v18;
  void *v19;
  std::vector<unsigned int>::pointer end;
  unsigned int *begin;
  uint64_t v22;
  NSMutableAttributedString *v24;
  _BOOL4 v25;
  void *v26;
  void *v27;
  id v28;
  id v30;
  id v31;
  id v32;
  id v33;
  std::vector<unsigned int> v34;
  id v35[3];
  char v36;

  v12 = a3;
  v28 = a4;
  v30 = a5;
  CatalogTable = _CSStoreGetCatalogTable();
  if (LaunchServices::DatabaseVisualization::shouldDumpTable(a1, v12, CatalogTable, a6))
    v14 = v30 == 0;
  else
    v14 = 0;
  if (!v14 || (a6 & 0x12) != 0)
    goto LABEL_8;
  v24 = (NSMutableAttributedString *)objc_alloc_init(MEMORY[0x1E0CB3778]);
  if (!v24)
    goto LABEL_8;
  LaunchServices::DumpWriter::DumpWriter((LaunchServices::DumpWriter *)v35, (_LSDatabase *)*a1, v24);
  LOBYTE(v34.__begin_) = 0;
  _LSDatabaseDisplayHeader((CSStore2::AttributedStringWriter *)v35, (void *)*a1, &v34);
  v25 = LOBYTE(v34.__begin_) || _LSGetNSErrorFromOSStatusImpl(-10817, a7, (uint64_t)"_LSDisplayHumanReadableData", 267);
  -[NSMutableAttributedString cs_writeToFileHandle:](v24, "cs_writeToFileHandle:", a2);
  fputc(10, a2);
  LaunchServices::DumpWriter::~DumpWriter(v35);

  if (!v25)
  {
    v22 = 0;
  }
  else
  {
LABEL_8:
    if ((a6 & 2) != 0)
      Visualizer = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D18B90]), "initWithStore:useStandardTableFunctions:", *(_QWORD *)(*a1 + 8), 0);
    else
      Visualizer = _LSContextCreateVisualizer((id *)a1);
    v17 = Visualizer;
    if (!Visualizer)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "BOOL _LSDisplayHumanReadableData(LSContext * _Nonnull, FILE * _Nonnull, NSSet<NSString *> *__strong _Nullable, NSSet<NSString *> *__strong _Nullable, NSPredicate *__strong _Nullable, _LSDisplayDataOptions, NSError *__autoreleasing * _Nullable)");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v26, "handleFailureInFunction:file:lineNumber:description:", v27, CFSTR("LSDatabaseVisualization.mm"), 289, CFSTR("Failed to create database visualizer."));

    }
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a6);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "userInfo");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "setObject:forKeyedSubscript:", v18, CFSTR("Options"));

    v35[0] = 0;
    v35[1] = v35;
    v35[2] = (id)0x2020000000;
    v36 = 1;
    if ((a6 & 0x10) != 0)
      fputc(91, a2);
    LaunchServices::DatabaseVisualization::getTablesToDisplay(a1, v12, a6, &v34);
    begin = v34.__begin_;
    end = v34.__end_;
    if (v34.__begin_ != v34.__end_)
    {
      do
      {
        v31 = v17;
        v32 = v28;
        v33 = v30;
        _CSStoreEnumerateUnits();

        ++begin;
      }
      while (begin != end);
      begin = v34.__begin_;
    }
    if (begin)
    {
      v34.__end_ = begin;
      operator delete(begin);
    }
    if ((a6 & 0x10) != 0)
      fputc(93, a2);
    _Block_object_dispose(v35, 8);

    v22 = 1;
  }

  return v22;
}

void sub_182953F64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,char a27)
{
  void *v27;
  void *v28;
  void *v29;

  _Unwind_Resume(a1);
}

uint64_t LaunchServices::DatabaseVisualization::shouldDumpTable(uint64_t *a1, void *a2, int a3, char a4)
{
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  int ArrayTable;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  int v16;
  BOOL v17;

  v7 = a2;
  v8 = v7;
  if (v7)
  {
    if ((objc_msgSend(v7, "containsObject:", CFSTR("*")) & 1) != 0)
    {
      v9 = 1;
    }
    else
    {
      v10 = (void *)_CSStoreCopyTableName();
      v9 = objc_msgSend(v8, "containsObject:", v10);

    }
    goto LABEL_9;
  }
  if (_CSStoreGetStringTable() == a3 || *(_DWORD *)(*a1 + 1612) == a3 || *(_DWORD *)(*a1 + 40) == a3)
  {
LABEL_7:
    v9 = 0;
    goto LABEL_9;
  }
  ArrayTable = _CSStoreGetArrayTable();
  if ((a4 & 1) != 0 || ArrayTable == a3)
  {
    if (ArrayTable == a3)
      goto LABEL_7;
    v13 = *a1;
  }
  else
  {
    v13 = *a1;
    if (*(_DWORD *)(*a1 + 1600) == a3)
      goto LABEL_7;
  }
  v14 = (_DWORD *)(v13 + 16);
  if (v14[400] == a3 || v14[401] == a3 || v14[402] == a3)
    goto LABEL_7;
  v15 = 30;
  do
  {
    v16 = v14[v15];
    v9 = v16 != a3;
    if (v16 == a3)
      break;
    v17 = v15 == 368;
    v15 += 26;
  }
  while (!v17);
LABEL_9:

  return v9;
}

void sub_1829541D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void LaunchServices::DatabaseVisualization::getTablesToDisplay(uint64_t *a1@<X0>, void *a2@<X1>, char a3@<W2>, std::vector<unsigned int> *a4@<X8>)
{
  id v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  const std::vector<unsigned int> *v11;
  char *end;
  unsigned int *value;
  unsigned int *v14;
  std::vector<unsigned int>::pointer begin;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  int *v21;
  int v22;
  id v23;
  uint64_t v25;
  const std::vector<unsigned int> *v26;
  uint64_t v27;
  __n128 (*v28)(__n128 *, __n128 *);
  void (*v29)(uint64_t);
  const char *v30;
  void *__p;
  void *v32;
  uint64_t v33;
  _DWORD v34[2];
  uint64_t v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v6 = a2;
  v7 = 0;
  v25 = 0;
  v26 = (const std::vector<unsigned int> *)&v25;
  v27 = 0x4812000000;
  v28 = __Block_byref_object_copy__17;
  v29 = __Block_byref_object_dispose__17;
  v30 = "";
  __p = 0;
  v32 = 0;
  v33 = 0;
  v8 = *a1 + 16;
  v9 = *(_DWORD *)(*a1 + 1596);
  v34[0] = *(_DWORD *)(*a1 + 20);
  v34[1] = v9;
  v35 = *(_QWORD *)(v8 + 1588);
  v36 = *(_DWORD *)(v8 + 1576);
  do
  {
    v10 = v34[v7];
    if (LaunchServices::DatabaseVisualization::shouldDumpTable(a1, v6, v10, a3))
    {
      v11 = v26;
      end = (char *)v26[2].__end_;
      value = v26[2].__end_cap_.__value_;
      if (end >= (char *)value)
      {
        begin = v26[2].__begin_;
        v16 = (end - (char *)begin) >> 2;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 62)
          abort();
        v18 = (char *)value - (char *)begin;
        if (v18 >> 1 > v17)
          v17 = v18 >> 1;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
          v19 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19)
        {
          v20 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>((uint64_t)&v26[2].__end_cap_, v19);
          begin = v11[2].__begin_;
          end = (char *)v11[2].__end_;
        }
        else
        {
          v20 = 0;
        }
        v21 = (int *)&v20[4 * v16];
        *v21 = v10;
        v14 = (unsigned int *)(v21 + 1);
        while (end != (char *)begin)
        {
          v22 = *((_DWORD *)end - 1);
          end -= 4;
          *--v21 = v22;
        }
        v11[2].__begin_ = (std::vector<unsigned int>::pointer)v21;
        v11[2].__end_ = v14;
        v11[2].__end_cap_.__value_ = (unsigned int *)&v20[4 * v19];
        if (begin)
          operator delete(begin);
      }
      else
      {
        *(_DWORD *)end = v10;
        v14 = (unsigned int *)(end + 4);
      }
      v11[2].__end_ = v14;
    }
    ++v7;
  }
  while (v7 != 5);
  v23 = v6;
  _CSStoreEnumerateTables();
  std::vector<LSBundleClass>::vector(a4, v26 + 2);

  _Block_object_dispose(&v25, 8);
  if (__p)
  {
    v32 = __p;
    operator delete(__p);
  }

}

void sub_18295445C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  void *v26;

  _Block_object_dispose(&a19, 8);
  if (__p)
  {
    a26 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_182954A3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34)
{
  void *v34;

  _Unwind_Resume(a1);
}

BOOL _LSDisplayMachineReadableData(id *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6)
{
  id v11;
  id v12;
  void *Visualizer;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  unsigned int *begin;
  std::vector<unsigned int>::pointer end;
  void *v22;
  void *v23;
  std::vector<unsigned int> v24;

  v11 = a3;
  v12 = a4;
  if ((a5 & 2) != 0)
    Visualizer = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D18B90]), "initWithStore:useStandardTableFunctions:", *((_QWORD *)*a1 + 1), 0);
  else
    Visualizer = _LSContextCreateVisualizer(a1);
  v14 = Visualizer;
  if (!Visualizer)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "BOOL _LSDisplayMachineReadableData(LSContext * _Nonnull, FILE * _Nonnull, NSSet<NSString *> *__strong _Nullable, NSPredicate *__strong _Nullable, _LSDisplayDataOptions, NSError *__autoreleasing * _Nullable)");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "handleFailureInFunction:file:lineNumber:description:", v23, CFSTR("LSDatabaseVisualization.mm"), 326, CFSTR("Failed to create database visualizer."));

  }
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a5);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "userInfo");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "setObject:forKeyedSubscript:", v15, CFSTR("Options"));

  v17 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D18B88]), "initWithVisualizer:fileHandle:closeWhenDone:error:", v14, a2, 0, a6);
  v18 = v17;
  if (v17)
  {
    objc_msgSend(v17, "setUnitDescriptionPredicate:", v12);
    LaunchServices::DatabaseVisualization::getTablesToDisplay((uint64_t *)a1, v11, a5, &v24);
    begin = v24.__begin_;
    end = v24.__end_;
    if (v24.__begin_ != v24.__end_)
    {
      do
        objc_msgSend(v18, "writeAllUnitsInTable:block:", *begin++, 0);
      while (begin != end);
      begin = v24.__begin_;
    }
    if (begin)
    {
      v24.__end_ = begin;
      operator delete(begin);
    }
    objc_msgSend(v18, "finishWriting");
  }

  return v18 != 0;
}

void sub_182954D68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

BOOL _LSDisplayHumanReadableCopyOfMachineReadableData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  return _LSGetNSErrorFromOSStatusImpl(-4, a7, (uint64_t)"_LSDisplayHumanReadableCopyOfMachineReadableData", 511);
}

uint64_t LaunchServices::DatabaseVisualization::writeTableDescription(void **this, LSContext *a2, int a3, CSStore2::AttributedStringWriter *a4, LaunchServices::DumpWriter *a5)
{
  _DWORD *v6;
  uint64_t v7;
  NSAttributedString *v9;

  v6 = (char *)*this + 16;
  if (*v6 == a3)
  {
    _LSDatabaseDisplayHeader(a4, *this, 0);
  }
  else
  {
    if (*((_DWORD *)*this + 10) != a3)
    {
      v7 = 30;
      while (v6[v7] != a3)
      {
        v7 += 26;
        if (v7 == 394)
          return 0;
      }
    }
    v9 = (NSAttributedString *)_CSMapCopyDebugDescription();
    CSStore2::AttributedStringWriter::attributedString(a4, v9);

  }
  return 1;
}

void sub_182954ED8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN14LaunchServices21DatabaseVisualizationL14getAllHandlersEP9LSContext_block_invoke(uint64_t a1, unsigned int a2, uint64_t a3)
{
  NSObject *v4;
  uint64_t v5;
  unsigned int v6;

  v6 = a2;
  if (!std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::find<unsigned int>((_QWORD *)(a1 + 32), &v6))
  {
    _LSDefaultLog();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      ___ZN14LaunchServices21DatabaseVisualizationL14getAllHandlersEP9LSContext_block_invoke_cold_1(a3, v4, v5);

  }
}

uint64_t __copy_helper_block_ea8_32c130_ZTSNSt3__113unordered_mapIj38_LSDatabaseTableVisualizationFunctionsNS_4hashIjEENS_8equal_toIjEENS_9allocatorINS_4pairIKjS1_EEEEEE(uint64_t a1, uint64_t a2)
{
  return std::unordered_map<unsigned int,_LSDatabaseTableVisualizationFunctions>::unordered_map(a1 + 32, a2 + 32);
}

uint64_t __destroy_helper_block_ea8_32c130_ZTSNSt3__113unordered_mapIj38_LSDatabaseTableVisualizationFunctionsNS_4hashIjEENS_8equal_toIjEENS_9allocatorINS_4pairIKjS1_EEEEEE(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>>>::~__hash_table(a1 + 32);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x30uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  v11[4] = 0;
  v11[5] = 0;
  v11[3] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    v21 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_182955178(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<unsigned int,_LSDatabaseTableVisualizationFunctions>::unordered_map(uint64_t a1, uint64_t a2)
{
  unsigned int *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned int **)(a2 + 16); i; i = *(unsigned int **)i)
    std::__hash_table<std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,_LSDatabaseTableVisualizationFunctions> const&>(a1, i + 4, (_OWORD *)i + 1);
  return a1;
}

void sub_1829551E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,_LSDatabaseTableVisualizationFunctions> const&>(uint64_t a1, unsigned int *a2, _OWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  __int128 v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v6;
  v12 = a3[1];
  *((_OWORD *)v10 + 1) = *a3;
  *((_OWORD *)v10 + 2) = v12;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__rehash<true>(a1, v18);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v20)
  {
    *v10 = *v20;
LABEL_38:
    *v20 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v19 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v21 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7)
        v21 %= v7;
    }
    else
    {
      v21 &= v7 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_182955408(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void ___ZN14LaunchServices21DatabaseVisualizationL18getTablesToDisplayEP9LSContextP5NSSetIP8NSStringEj_block_invoke(uint64_t a1, int a2)
{
  _DWORD *v4;
  _DWORD *v5;
  _QWORD *v6;
  int *v7;
  unint64_t v8;
  _DWORD *v9;
  int *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  int *v16;
  char *v17;
  int v18;

  v5 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48);
  v4 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 56);
  while (v5 != v4)
  {
    if (*v5 == a2)
      goto LABEL_6;
    ++v5;
  }
  v5 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 56);
LABEL_6:
  if (v4 == v5
    && LaunchServices::DatabaseVisualization::shouldDumpTable(*(uint64_t **)(a1 + 48), *(void **)(a1 + 32), a2, *(_DWORD *)(a1 + 56)))
  {
    v6 = *(_QWORD **)(*(_QWORD *)(a1 + 40) + 8);
    v7 = (int *)v6[7];
    v8 = v6[8];
    if ((unint64_t)v7 >= v8)
    {
      v10 = (int *)v6[6];
      v11 = v7 - v10;
      v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 62)
        abort();
      v13 = v8 - (_QWORD)v10;
      if (v13 >> 1 > v12)
        v12 = v13 >> 1;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
        v14 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>((uint64_t)(v6 + 8), v14);
        v10 = (int *)v6[6];
        v7 = (int *)v6[7];
      }
      else
      {
        v15 = 0;
      }
      v16 = (int *)&v15[4 * v11];
      v17 = &v15[4 * v14];
      *v16 = a2;
      v9 = v16 + 1;
      while (v7 != v10)
      {
        v18 = *--v7;
        *--v16 = v18;
      }
      v6[6] = v16;
      v6[7] = v9;
      v6[8] = v17;
      if (v10)
        operator delete(v10);
    }
    else
    {
      *v7 = a2;
      v9 = v7 + 1;
    }
    v6[7] = v9;
  }
}

__n128 __Block_byref_object_copy__54(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__55(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void ___ZN14LaunchServices21DatabaseVisualizationL20writeUnitDescriptionEP7__sFILEjjP18NSAttributedStringP5NSSetIP8NSStringEP11NSPredicatejPb_block_invoke(uint64_t a1, void *a2, NSUInteger a3, NSUInteger a4, void *a5, NSUInteger a6, NSUInteger a7, _BYTE *a8)
{
  id v15;
  NSRange v16;
  _QWORD *v17;
  NSRange *v18;
  unint64_t v19;
  NSRange *v20;
  NSRange *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  NSRange *v27;
  char *v28;
  id v29;
  NSRange v30;
  NSRange v31;

  v29 = a2;
  v15 = a5;
  if (objc_msgSend(*(id *)(a1 + 32), "containsObject:", v29))
  {
    v30.location = a3;
    v30.length = a4;
    v31.location = a6;
    v31.length = a7;
    v16 = NSUnionRange(v30, v31);
    v17 = *(_QWORD **)(*(_QWORD *)(a1 + 40) + 8);
    v18 = (NSRange *)v17[7];
    v19 = v17[8];
    if ((unint64_t)v18 >= v19)
    {
      v21 = (NSRange *)v17[6];
      v22 = v18 - v21;
      v23 = v22 + 1;
      if ((unint64_t)(v22 + 1) >> 60)
        abort();
      v24 = v19 - (_QWORD)v21;
      if (v24 >> 3 > v23)
        v23 = v24 >> 3;
      if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0)
        v25 = 0xFFFFFFFFFFFFFFFLL;
      else
        v25 = v23;
      if (v25)
      {
        v26 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<unsigned int,NSUUID * {__strong}>>>((uint64_t)(v17 + 8), v25);
        v21 = (NSRange *)v17[6];
        v18 = (NSRange *)v17[7];
      }
      else
      {
        v26 = 0;
      }
      v27 = (NSRange *)&v26[16 * v22];
      v28 = &v26[16 * v25];
      *v27 = v16;
      v20 = v27 + 1;
      if (v18 != v21)
      {
        do
        {
          v27[-1] = v18[-1];
          --v27;
          --v18;
        }
        while (v18 != v21);
        v21 = (NSRange *)v17[6];
      }
      v17[6] = v27;
      v17[7] = v20;
      v17[8] = v28;
      if (v21)
        operator delete(v21);
    }
    else
    {
      *v18 = v16;
      v20 = v18 + 1;
    }
    v17[7] = v20;
    if (*(_QWORD *)(a1 + 48) == 1)
      *a8 = 1;
  }

}

void sub_1829556FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void ___ZN14LaunchServices21DatabaseVisualizationL34getPropertyListFromUnitDescriptionEjjP18NSAttributedStringP5NSSetIP8NSStringE_block_invoke(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, _BYTE *a8)
{
  id v11;
  void *v12;
  void *v13;
  id v14;

  v14 = a2;
  v11 = a5;
  v12 = *(void **)(a1 + 32);
  if (!v12 || objc_msgSend(v12, "containsObject:", v14))
  {
    objc_msgSend(v11, "string");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v13, v14);

    if ((unint64_t)objc_msgSend(*(id *)(a1 + 40), "count") >= *(_QWORD *)(a1 + 48))
      *a8 = 1;
  }

}

void sub_1829557B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,NSString * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,NSString * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,NSString * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,NSString * {__strong}>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  v11 = operator new(0x20uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  v11[3] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__rehash<true>(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *v11 = *v21;
LABEL_38:
    *v21 = v11;
    goto LABEL_39;
  }
  *v11 = *v13;
  *v13 = v11;
  *(_QWORD *)(v20 + 8 * v4) = v13;
  if (*v11)
  {
    v22 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_182955A10(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,void *>>>::operator()[abi:nn180100](v2, v1);
  _Unwind_Resume(a1);
}

void sub_182955ADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_182955C44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_182955CE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_182955DB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_182955E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_182955EFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1829560C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v7 = v3;

  _Unwind_Resume(a1);
}

void sub_182956314(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1829564F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t initba_is_process_extension(audit_token_t *a1)
{
  void *v2;

  v2 = (void *)BASupportLibrary(void)::libLibrary;
  if (!BASupportLibrary(void)::libLibrary)
  {
    v2 = dlopen("/usr/lib/libBASupport.dylib", 2);
    BASupportLibrary(void)::libLibrary = (uint64_t)v2;
  }
  softLinkba_is_process_extension = (uint64_t (*)(audit_token_t *))dlsym(v2, "ba_is_process_extension");
  return softLinkba_is_process_extension(a1);
}

uint64_t initTCCAccessPreflightWithAuditToken(const __CFString *a1, audit_token_t *a2, const __CFDictionary *a3)
{
  void *v6;
  __int128 v7;
  _OWORD v9[2];

  v6 = (void *)TCCLibrary(void)::frameworkLibrary;
  if (!TCCLibrary(void)::frameworkLibrary)
  {
    v6 = dlopen("/System/Library/PrivateFrameworks/TCC.framework/TCC", 2);
    TCCLibrary(void)::frameworkLibrary = (uint64_t)v6;
  }
  softLinkTCCAccessPreflightWithAuditToken = (uint64_t (*)(const __CFString *, audit_token_t *__struct_ptr, const __CFDictionary *))dlsym(v6, "TCCAccessPreflightWithAuditToken");
  v7 = *(_OWORD *)&a2->val[4];
  v9[0] = *(_OWORD *)a2->val;
  v9[1] = v7;
  return softLinkTCCAccessPreflightWithAuditToken(a1, (audit_token_t *)v9, a3);
}

uint64_t initkTCCServiceUserTracking(void)
{
  void *v0;
  uint64_t result;

  v0 = (void *)TCCLibrary(void)::frameworkLibrary;
  if (!TCCLibrary(void)::frameworkLibrary)
  {
    v0 = dlopen("/System/Library/PrivateFrameworks/TCC.framework/TCC", 2);
    TCCLibrary(void)::frameworkLibrary = (uint64_t)v0;
  }
  result = *(_QWORD *)dlsym(v0, "kTCCServiceUserTracking");
  constantkTCCServiceUserTracking = result;
  getkTCCServiceUserTracking = kTCCServiceUserTrackingFunction;
  return result;
}

Class initUMUserManager(void)
{
  Class result;

  if (!UserManagementLibrary(void)::frameworkLibrary)
    UserManagementLibrary(void)::frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/UserManagement.framework/UserManagement", 2);
  result = objc_getClass("UMUserManager");
  classUMUserManager = (uint64_t)result;
  getUMUserManagerClass = (uint64_t (*)(void))UMUserManagerFunction;
  return result;
}

{
  Class result;

  if (!UserManagementLibrary(void)::frameworkLibrary)
    UserManagementLibrary(void)::frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/UserManagement.framework/UserManagement", 2);
  result = objc_getClass("UMUserManager");
  classUMUserManager = (uint64_t)result;
  getUMUserManagerClass = (uint64_t (*)(void))UMUserManagerFunction;
  return result;
}

{
  Class result;

  if (!UserManagementLibrary(void)::frameworkLibrary)
    UserManagementLibrary(void)::frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/UserManagement.framework/UserManagement", 2);
  result = objc_getClass("UMUserManager");
  classUMUserManager = (uint64_t)result;
  getUMUserManagerClass = (uint64_t (*)(void))UMUserManagerFunction;
  return result;
}

uint64_t __LAUNCH_SERVICES_IS_GENERATING_A_SANDBOX_EXCEPTION_BECAUSE_THIS_PROCESS_IS_USING_PRIVATE_SYMBOLS__()
{
  uint64_t result;

  if (__LSDefaultsGetSharedInstance_onceToken != -1)
    dispatch_once(&__LSDefaultsGetSharedInstance_onceToken, &__block_literal_global_26);
  result = objc_msgSend((id)__LSDefaultsGetSharedInstance_sharedInstance, "issueSandboxExceptionsIfMayNotMapDatabase");
  if ((_DWORD)result)
  {
    _LSGetAuditTokenForSelf();
    return sandbox_check_by_audit_token();
  }
  return result;
}

id _LSDefaultsBaseSystemContainerURL()
{
  char *v0;
  uint64_t v1;
  void *v2;
  uint64_t error_description;
  NSObject *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  const __CFString *v13;
  void *v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v0 = getenv("LS_DATABASE_DIR");
  if (!v0)
  {
    v15 = 0;
    v12 = 1;
    v1 = container_system_path_for_identifier();
    if (!v1)
    {
      error_description = container_get_error_description();
      _LSDefaultLog();
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        _LSDefaultsBaseSystemContainerURL_cold_1(&v12, error_description, v5);

      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Error getting container url (%s)! Cannot continue."), error_description);
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = (void *)MEMORY[0x1E0C99DA0];
      v8 = *MEMORY[0x1E0C99768];
      v13 = CFSTR("LSContainerErrorNumber");
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", v12);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = v9;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v14, &v13, 1);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "exceptionWithName:reason:userInfo:", v8, v6, v10);
      v11 = (id)objc_claimAutoreleasedReturnValue();

      objc_exception_throw(v11);
    }
    v2 = (void *)v1;
    v0 = &v15;
    __strlcpy_chk();
    free(v2);
  }
  return (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E98]), "initFileURLWithFileSystemRepresentation:isDirectory:relativeToURL:", v0, 1, 0);
}

uint64_t emitSandboxExceptionAndMaybeAbortForSneakyURLUsage()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  _LSDefaultLog();
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
    emitSandboxExceptionAndMaybeAbortForSneakyURLUsage_cold_1(v0, v1, v2, v3, v4, v5, v6, v7);

  return __LAUNCH_SERVICES_IS_GENERATING_A_SANDBOX_EXCEPTION_BECAUSE_THIS_PROCESS_IS_USING_PRIVATE_SYMBOLS__();
}

void OUTLINED_FUNCTION_3_4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0x16u);
}

void OUTLINED_FUNCTION_4_5(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x20u);
}

void sub_182957BC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182957D40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_182957E10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_182957F90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1829580D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_18295821C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18295839C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_18295855C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_182958740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_182958B44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

id _LSPerUserEntropyURL(void)
{
  void *v0;
  void *v1;

  objc_msgSend((id)__LSDefaultsGetSharedInstance(), "userContainerURL");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "URLByAppendingPathComponent:isDirectory:", CFSTR("com.apple.LaunchServices.DeviceIdentifierEntropy"), 0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

void sub_182958C2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182958DC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

Class initUMUserPersona(void)
{
  Class result;

  if (!UserManagementLibrary(void)::frameworkLibrary)
    UserManagementLibrary(void)::frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/UserManagement.framework/UserManagement", 2);
  result = objc_getClass("UMUserPersona");
  classUMUserPersona = (uint64_t)result;
  getUMUserPersonaClass = (uint64_t (*)(void))UMUserPersonaFunction;
  return result;
}

uint64_t initMKBDeviceUnlockedSinceBoot(void)
{
  void *v0;

  v0 = (void *)MobileKeyBagLibrary(void)::frameworkLibrary;
  if (!MobileKeyBagLibrary(void)::frameworkLibrary)
  {
    v0 = dlopen("/System/Library/PrivateFrameworks/MobileKeyBag.framework/MobileKeyBag", 2);
    MobileKeyBagLibrary(void)::frameworkLibrary = (uint64_t)v0;
  }
  softLinkMKBDeviceUnlockedSinceBoot = (uint64_t (*)(void))dlsym(v0, "MKBDeviceUnlockedSinceBoot");
  return softLinkMKBDeviceUnlockedSinceBoot();
}

void sub_182959730(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182959808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

void sub_182959884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_182959974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

void sub_1829599F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_182959AE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

void sub_182959B5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_182959C4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

void sub_182959CC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_182959DBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_182959E98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

void sub_182959F38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

void sub_18295A1E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18295A2E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_18295A5A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18295A7D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_18295A920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18295ABCC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18295AD14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_18295ADE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_18295B050(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_18295B210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  void *v28;
  uint64_t v29;

  _Block_object_dispose(&a23, 8);
  _Block_object_dispose((const void *)(v29 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_18295B320(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18295B4B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t initMobileInstallationCopyDiskUsageForLaunchServices(const void *a1, const __CFDictionary *a2)
{
  void *v4;

  v4 = (void *)MobileInstallationLibrary(void)::frameworkLibrary;
  if (!MobileInstallationLibrary(void)::frameworkLibrary)
  {
    v4 = dlopen("/System/Library/PrivateFrameworks/MobileInstallation.framework/MobileInstallation", 2);
    MobileInstallationLibrary(void)::frameworkLibrary = (uint64_t)v4;
  }
  softLinkMobileInstallationCopyDiskUsageForLaunchServices = (uint64_t (*)(const void *, const __CFDictionary *))dlsym(v4, "MobileInstallationCopyDiskUsageForLaunchServices");
  return softLinkMobileInstallationCopyDiskUsageForLaunchServices(a1, a2);
}

uint64_t _LSDispatchCoalescedAfterDelay(unsigned __int8 *a1, void *a2, void *a3, double a4)
{
  NSObject *v7;
  id v8;
  signed __int8 v9;
  dispatch_time_t v10;
  uint64_t v11;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  _QWORD block[4];
  id v22;
  unsigned __int8 *v23;

  v7 = a2;
  v8 = a3;
  if (a1)
  {
    if (v7)
      goto LABEL_3;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Boolean _LSDispatchCoalescedAfterDelay(volatile int32_t * _Nonnull, __strong dispatch_queue_t _Nonnull, NSTimeInterval, __strong dispatch_block_t _Nonnull)");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "handleFailureInFunction:file:lineNumber:description:", v18, CFSTR("LSDispatchUtils.mm"), 30, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("ioCoalescingFlag != NULL"));

    if (v7)
      goto LABEL_3;
  }
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Boolean _LSDispatchCoalescedAfterDelay(volatile int32_t * _Nonnull, __strong dispatch_queue_t _Nonnull, NSTimeInterval, __strong dispatch_block_t _Nonnull)");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "handleFailureInFunction:file:lineNumber:description:", v20, CFSTR("LSDispatchUtils.mm"), 31, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("inQueue != NULL"));

LABEL_3:
  if ((*(_QWORD *)&a4 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Boolean _LSDispatchCoalescedAfterDelay(volatile int32_t * _Nonnull, __strong dispatch_queue_t _Nonnull, NSTimeInterval, __strong dispatch_block_t _Nonnull)");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "handleFailureInFunction:file:lineNumber:description:", v14, CFSTR("LSDispatchUtils.mm"), 32, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("!isinf( inMaxDelay) && !isnan( inMaxDelay)"));

    if (v8)
      goto LABEL_5;
  }
  else if (v8)
  {
    goto LABEL_5;
  }
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Boolean _LSDispatchCoalescedAfterDelay(volatile int32_t * _Nonnull, __strong dispatch_queue_t _Nonnull, NSTimeInterval, __strong dispatch_block_t _Nonnull)");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "handleFailureInFunction:file:lineNumber:description:", v16, CFSTR("LSDispatchUtils.mm"), 33, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("inBlock != NULL"));

  do
LABEL_5:
    v9 = __ldaxr(a1);
  while (__stlxr(v9 | 0x80, a1));
  if (v9 < 0)
  {
    v11 = 0;
  }
  else
  {
    MEMORY[0x186DAF208]();
    v10 = dispatch_time(0, (uint64_t)(a4 * 1000000000.0));
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = ___LSDispatchCoalescedAfterDelay_block_invoke;
    block[3] = &unk_1E10431E0;
    v22 = v8;
    v23 = a1;
    dispatch_after(v10, v7, block);

    v11 = 1;
  }

  return v11;
}

void sub_18295B7FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

_LSDispatchWithTimeoutResult *_LSDispatchWithTimeout(void *a1, void *a2, double a3)
{
  id v5;
  _LSDispatchWithTimeoutResult *v6;
  void *v9;
  id v10;
  dispatch_semaphore_t v11;
  _LSDispatchWithTimeoutResult *v12;
  id v13;
  NSObject *v14;
  uint64_t v15;
  id v16;
  _LSDispatchWithTimeoutResult *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  NSObject *v22;
  dispatch_time_t v23;
  void *v24;
  void *v25;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  NSObject *v37;
  void (**v38)(_QWORD, _QWORD);
  _QWORD block[4];
  void (**v40)(_QWORD, _QWORD);
  id v41;
  _QWORD v42[4];
  id v43;
  _LSDispatchWithTimeoutResult *v44;
  NSObject *v45;

  v37 = a1;
  v5 = a2;
  v38 = (void (**)(_QWORD, _QWORD))v5;
  v6 = objc_alloc_init(_LSDispatchWithTimeoutResult);
  if ((*(uint64_t *)&a3 <= -1 || ((*(_QWORD *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
    && (unint64_t)(*(_QWORD *)&a3 - 1) >= 0xFFFFFFFFFFFFFLL)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_LSDispatchWithTimeoutResult *_LSDispatchWithTimeout(NSTimeInterval, __strong dispatch_queue_t _Nullable, __strong _LSDispatchWithTimeoutWorkBlock _Nonnull)");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "handleFailureInFunction:file:lineNumber:description:", v28, CFSTR("LSDispatchUtils.mm"), 113, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("!isnan( timeout) && !isinf( timeout) && timeout > 0.0"));

    if (v5)
      goto LABEL_9;
  }
  else if (v5)
  {
    goto LABEL_9;
  }
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_LSDispatchWithTimeoutResult *_LSDispatchWithTimeout(NSTimeInterval, __strong dispatch_queue_t _Nullable, __strong _LSDispatchWithTimeoutWorkBlock _Nonnull)");
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v29, "handleFailureInFunction:file:lineNumber:description:", v30, CFSTR("LSDispatchUtils.mm"), 114, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("workBlock != nil"));

LABEL_9:
  v9 = (void *)MEMORY[0x186DAE7A0]();
  v10 = objc_alloc_init(MEMORY[0x1E0CB3740]);
  v11 = dispatch_semaphore_create(0);
  v12 = v6;
  v13 = v10;
  v14 = v11;
  if (v12)
  {
    if (v13)
      goto LABEL_11;
LABEL_25:
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_LSDispatchWithTimeoutCompletionHandler _LSGetDispatchWithTimeoutCompletionHandler(_LSDispatchWithTimeoutResult *__strong, __strong id<NSLocking>, __strong dispatch_semaphore_t)");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v33, "handleFailureInFunction:file:lineNumber:description:", v34, CFSTR("LSDispatchUtils.mm"), 69, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("lock != nil"));

    if (v14)
      goto LABEL_12;
    goto LABEL_26;
  }
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_LSDispatchWithTimeoutCompletionHandler _LSGetDispatchWithTimeoutCompletionHandler(_LSDispatchWithTimeoutResult *__strong, __strong id<NSLocking>, __strong dispatch_semaphore_t)");
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v31, "handleFailureInFunction:file:lineNumber:description:", v32, CFSTR("LSDispatchUtils.mm"), 68, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("resultStruct != nil"));

  if (!v13)
    goto LABEL_25;
LABEL_11:
  if (v14)
    goto LABEL_12;
LABEL_26:
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_LSDispatchWithTimeoutCompletionHandler _LSGetDispatchWithTimeoutCompletionHandler(_LSDispatchWithTimeoutResult *__strong, __strong id<NSLocking>, __strong dispatch_semaphore_t)");
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v35, "handleFailureInFunction:file:lineNumber:description:", v36, CFSTR("LSDispatchUtils.mm"), 70, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("sem != NULL"));

LABEL_12:
  v15 = MEMORY[0x1E0C809B0];
  v42[0] = MEMORY[0x1E0C809B0];
  v42[1] = 3221225472;
  v42[2] = ___ZL42_LSGetDispatchWithTimeoutCompletionHandlerP28_LSDispatchWithTimeoutResultPU19objcproto9NSLocking11objc_objectPU32objcproto21OS_dispatch_semaphore8NSObject_block_invoke;
  v42[3] = &unk_1E10432A8;
  v16 = v13;
  v43 = v16;
  v17 = v12;
  v44 = v17;
  v18 = v14;
  v45 = v18;
  v19 = (void *)MEMORY[0x186DAE9BC](v42);
  v20 = (void *)objc_msgSend(v19, "copy");

  v21 = (void *)MEMORY[0x186DAE9BC](v20);
  if (v37)
  {
    block[0] = v15;
    block[1] = 3221225472;
    block[2] = ___LSDispatchWithTimeout_block_invoke;
    block[3] = &unk_1E1043208;
    v40 = v38;
    v41 = v21;
    dispatch_async(v37, block);

    v22 = v37;
  }
  else
  {
    v22 = 0;
    ((void (**)(_QWORD, void *))v38)[2](v38, v21);
  }
  v23 = dispatch_time(0, (uint64_t)(a3 * 1000000000.0));
  if (dispatch_semaphore_wait(v18, v23))
  {
    objc_msgSend(v16, "lock");
    -[_LSDispatchWithTimeoutResult result](v17, "result");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v24)
    {
      -[_LSDispatchWithTimeoutResult error](v17, "error");
      v25 = (void *)objc_claimAutoreleasedReturnValue();

      if (v25)
        goto LABEL_19;
      _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2FE0], 60, (uint64_t)"_LSDispatchWithTimeout", 147, 0);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      -[_LSDispatchWithTimeoutResult setError:](v17, "setError:", v24);
    }

LABEL_19:
    objc_msgSend(v16, "unlock");
  }

  objc_autoreleasePoolPop(v9);
  return v17;
}

void sub_18295BDB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

id _LSLazyLoadObjectForKey(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  NSObject *v9;
  id v10;
  uint64_t v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  _QWORD v23[4];
  id v24;
  id v25;
  id v26;
  uint64_t *v27;
  _QWORD block[4];
  id v29;
  id v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t);
  void (*v36)(uint64_t);
  id v37;

  v7 = a1;
  v8 = a2;
  v9 = a3;
  v10 = a4;
  v32 = 0;
  v33 = &v32;
  v34 = 0x3032000000;
  v35 = __Block_byref_object_copy__19;
  v36 = __Block_byref_object_dispose__19;
  v37 = 0;
  if (v7)
  {
    if (v8)
      goto LABEL_3;
LABEL_9:
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "id _LSLazyLoadObjectForKey(NSMutableDictionary *__strong _Nonnull, __strong id _Nonnull, __strong dispatch_queue_t _Nonnull, NS_NOESCAPE _LSLazyLoadGenerator __strong)");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "handleFailureInFunction:file:lineNumber:description:", v20, CFSTR("LSDispatchUtils.mm"), 195, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("inKey != nil"));

    if (v9)
      goto LABEL_4;
LABEL_10:
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "id _LSLazyLoadObjectForKey(NSMutableDictionary *__strong _Nonnull, __strong id _Nonnull, __strong dispatch_queue_t _Nonnull, NS_NOESCAPE _LSLazyLoadGenerator __strong)");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "handleFailureInFunction:file:lineNumber:description:", v22, CFSTR("LSDispatchUtils.mm"), 196, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("inQueue != NULL"));

    goto LABEL_4;
  }
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "id _LSLazyLoadObjectForKey(NSMutableDictionary *__strong _Nonnull, __strong id _Nonnull, __strong dispatch_queue_t _Nonnull, NS_NOESCAPE _LSLazyLoadGenerator __strong)");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "handleFailureInFunction:file:lineNumber:description:", v18, CFSTR("LSDispatchUtils.mm"), 194, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("ioDictionary != nil"));

  if (!v8)
    goto LABEL_9;
LABEL_3:
  if (!v9)
    goto LABEL_10;
LABEL_4:
  v11 = MEMORY[0x1E0C809B0];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___LSLazyLoadObjectForKey_block_invoke;
  block[3] = &unk_1E10422F0;
  v31 = &v32;
  v12 = v7;
  v29 = v12;
  v13 = v8;
  v30 = v13;
  dispatch_sync(v9, block);
  v14 = (void *)v33[5];
  if (v10 && !v14)
  {
    v23[0] = v11;
    v23[1] = 3221225472;
    v23[2] = ___LSLazyLoadObjectForKey_block_invoke_2;
    v23[3] = &unk_1E1043280;
    v24 = v12;
    v25 = v13;
    v26 = v10;
    v27 = &v32;
    dispatch_barrier_sync(v9, v23);

    v14 = (void *)v33[5];
  }
  v15 = v14;

  _Block_object_dispose(&v32, 8);
  return v15;
}

void sub_18295C1EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30)
{
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;

  v36 = v34;

  _Block_object_dispose(&a25, 8);
  _Unwind_Resume(a1);
}

void sub_18295C2FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZL42_LSGetDispatchWithTimeoutCompletionHandlerP28_LSDispatchWithTimeoutResultPU19objcproto9NSLocking11objc_objectPU32objcproto21OS_dispatch_semaphore8NSObject_block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  void *v6;
  void *v7;
  unint64_t v8;

  v8 = a2;
  v5 = a3;
  objc_msgSend(*(id *)(a1 + 32), "lock");
  objc_msgSend(*(id *)(a1 + 40), "result");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6)
  {

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "error");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v7)
    {
      if (!(v8 | v5))
      {
        _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], -10810, (uint64_t)"_LSGetDispatchWithTimeoutCompletionHandler_block_invoke", 84, 0);
        v5 = objc_claimAutoreleasedReturnValue();
      }
      objc_msgSend(*(id *)(a1 + 40), "setResult:", v8);
      objc_msgSend(*(id *)(a1 + 40), "setError:", v5);
    }
  }
  objc_msgSend(*(id *)(a1 + 32), "unlock");
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));

}

void sub_18295C3F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_18295C424(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18295C4BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_18295C590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_18295C770(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18295C848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18295C918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_18295CA28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_18295CB10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_18295CC04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_18295CD24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id XNSDictionaryObjectForKeyOfClass(NSDictionary *a1, objc_object *a2, objc_class *a3)
{
  uint64_t v4;
  void *v5;

  -[NSDictionary objectForKey:](a1, "objectForKey:", a2);
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = (void *)v4;
  if (a3 && v4 && (objc_opt_isKindOfClass() & 1) == 0)
  {

    v5 = 0;
  }
  return v5;
}

void sub_18295CD94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18295CEA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  uint64_t v20;

  _Block_object_dispose(&a15, 8);

  _Block_object_dispose((const void *)(v20 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_18295D100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  void *v10;

  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::vector<int>::resize(std::vector<int> *this, std::vector<int>::size_type __sz)
{
  std::vector<int>::size_type v2;

  v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2)
      this->__end_ = &this->__begin_[__sz];
  }
  else
  {
    std::vector<int>::__append(this, __sz - v2);
  }
}

void sub_18295D26C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  void *v20;

  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

void sub_18295D5BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

char *std::vector<unsigned short>::__vallocate[abi:nn180100](_QWORD *a1, uint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 < 0)
    abort();
  result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned short>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[2 * v4];
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned short>>(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(2 * a2);
}

void std::vector<int>::__append(std::vector<int> *this, std::vector<int>::size_type __n)
{
  std::__compressed_pair<int *> *p_end_cap;
  int *v5;
  int *value;
  int *end;
  std::vector<int>::pointer begin;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  int *v16;
  int *v17;
  int v18;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v5 = value;
  end = p_end_cap[-1].__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(p_end_cap[-1].__value_, 4 * __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    begin = this->__begin_;
    v9 = (char *)end - (char *)this->__begin_;
    v10 = __n + (v9 >> 2);
    if (v10 >> 62)
      abort();
    v11 = v9 >> 2;
    v12 = (char *)v5 - (char *)begin;
    if (v12 >> 1 > v10)
      v10 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>((uint64_t)p_end_cap, v13);
      begin = this->__begin_;
      end = this->__end_;
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v11];
    v16 = (int *)&v14[4 * v13];
    bzero(v15, 4 * __n);
    v17 = (int *)&v15[4 * __n];
    while (end != begin)
    {
      v18 = *--end;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    this->__begin_ = (std::vector<int>::pointer)v15;
    this->__end_ = v17;
    this->__end_cap_.__value_ = v16;
    if (begin)
      operator delete(begin);
  }
}

id _LSGetDMFPolicyNoCache(void *a1, _QWORD *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v7[4];
  id v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  void (*v15)(uint64_t);
  id v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  void (*v21)(uint64_t);
  id v22;

  v3 = a1;
  v4 = v3;
  v17 = 0;
  v18 = &v17;
  v19 = 0x3032000000;
  v20 = __Block_byref_object_copy__21;
  v21 = __Block_byref_object_dispose__21;
  v22 = &unk_1E1075720;
  v11 = 0;
  v12 = &v11;
  v13 = 0x3032000000;
  v14 = __Block_byref_object_copy__21;
  v15 = __Block_byref_object_dispose__21;
  v16 = 0;
  if (v3)
  {
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = ___LSGetDMFPolicyNoCache_block_invoke;
    v7[3] = &unk_1E1043408;
    v8 = v3;
    v9 = &v11;
    v10 = &v17;
    LaunchServices::DMFSupport::getPolicyWithCompletionHandler((uint64_t)v8, 0, v7);

  }
  if (a2)
    *a2 = objc_retainAutorelease((id)v12[5]);
  v5 = (id)v18[5];
  _Block_object_dispose(&v11, 8);

  _Block_object_dispose(&v17, 8);
  return v5;
}

void sub_18295DE2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;
  uint64_t v23;

  _Block_object_dispose(&a17, 8);
  _Block_object_dispose((const void *)(v23 - 96), 8);

  _Unwind_Resume(a1);
}

void LaunchServices::DMFSupport::getPolicyWithCompletionHandler(uint64_t a1, unsigned int a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  _QWORD v8[4];
  id v9;

  v5 = a3;
  objc_msgSend(MEMORY[0x1E0C99E60], "setWithObject:", a1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = ___ZN14LaunchServices10DMFSupportL30getPolicyWithCompletionHandlerEP8NSStringhU13block_pointerFvP8NSNumberP7NSErrorE_block_invoke;
  v8[3] = &unk_1E1043458;
  v7 = v5;
  v9 = v7;
  LaunchServices::DMFSupport::getPoliciesWithCompletionHandler(v6, a2, v8);

}

void sub_18295DF14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void _LSGetDMFPolicyWithCompletionHandler(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _QWORD v5[4];
  id v6;

  v3 = a2;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = ___LSGetDMFPolicyWithCompletionHandler_block_invoke;
  v5[3] = &unk_1E1043430;
  v6 = v3;
  v4 = v3;
  LaunchServices::DMFSupport::getPolicyWithCompletionHandler(a1, 3u, v5);

}

void sub_18295E074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_18295E0D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void LaunchServices::DMFSupport::getPoliciesWithCompletionHandler(void *a1, unsigned int a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSString *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  LaunchServices::DMFSupport *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  LaunchServices::DMFSupport *v16;
  NSObject *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  id v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t j;
  uint64_t v34;
  void *v35;
  _BOOL4 v36;
  void (**v37)(id, _QWORD, void *);
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  id v42;
  _QWORD v43[4];
  void (**v44)(id, _QWORD, void *);
  char v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  const __CFString *v51;
  uint8_t v52[128];
  uint8_t buf[4];
  uint64_t v54;
  __int16 v55;
  int v56;
  _BYTE v57[128];
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v37 = a3;
  if (!v5)
  {
    v50 = *MEMORY[0x1E0CB2938];
    v51 = CFSTR("bundleIDs");
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v51, &v50, 1);
    v6 = (id)objc_claimAutoreleasedReturnValue();
    _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], -50, (uint64_t)"getPoliciesWithCompletionHandler", 314, v6);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v37[2](v37, 0, v15);
LABEL_35:

    goto LABEL_36;
  }
  v6 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  if ((a2 & 1) != 0)
  {
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v7 = v5;
    v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v46, v57, 16);
    if (v9)
    {
      v10 = *(_QWORD *)v47;
      do
      {
        for (i = 0; i != v9; ++i)
        {
          if (*(_QWORD *)v47 != v10)
            objc_enumerationMutation(v7);
          v12 = *(LaunchServices::DMFSupport **)(*((_QWORD *)&v46 + 1) + 8 * i);
          LaunchServices::DMFSupport::getCachedPolicy(v12, v8);
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          if (v13)
            objc_msgSend(v6, "setObject:forKeyedSubscript:", v13, v12);

        }
        v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v46, v57, 16);
      }
      while (v9);
    }

  }
  v14 = objc_msgSend(v6, "count");
  if (v14 != objc_msgSend(v5, "count"))
  {
    LaunchServices::DMFSupport::getMonitor((LaunchServices::DMFSupport *)(a2 & 1));
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    if (v15)
    {
      v43[0] = MEMORY[0x1E0C809B0];
      v43[1] = 3221225472;
      v43[2] = ___ZN14LaunchServices10DMFSupportL32getPoliciesWithCompletionHandlerEP5NSSetIP8NSStringEhU13block_pointerFvP12NSDictionaryIS3_P8NSNumberEP7NSErrorE_block_invoke;
      v43[3] = &unk_1E10434F8;
      v45 = a2 & 1;
      v44 = v37;
      v16 = (LaunchServices::DMFSupport *)MEMORY[0x186DAE9BC](v43);
      LaunchServices::DMFSupport::getLog(v16);
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        v18 = objc_msgSend(v5, "count");
        *(_DWORD *)buf = 134283777;
        v54 = v18;
        v55 = 1024;
        v56 = (a2 >> 1) & 1;
        _os_log_impl(&dword_182882000, v17, OS_LOG_TYPE_INFO, "requesting DMF policies for %{private}zu identifiers, async? %d", buf, 0x12u);
      }

      objc_msgSend(v5, "allObjects");
      if ((a2 & 2) != 0)
      {
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "requestPoliciesForBundleIdentifiers:completionHandler:", v20, v16);
      }
      else
      {
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        v42 = 0;
        objc_msgSend(v15, "requestPoliciesForBundleIdentifiers:withError:", v19, &v42);
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        v21 = v42;

        (*((void (**)(LaunchServices::DMFSupport *, void *, id))v16 + 2))(v16, v20, v21);
      }

    }
    else
    {
      LaunchServices::DMFSupport::getLog(0);
      v22 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        LaunchServices::DMFSupport::getPoliciesWithCompletionHandler(v22, v23, v24, v25, v26, v27, v28, v29);

      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v30 = v5;
      v31 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v38, v52, 16);
      if (v31)
      {
        v32 = *(_QWORD *)v39;
        do
        {
          for (j = 0; j != v31; ++j)
          {
            if (*(_QWORD *)v39 != v32)
              objc_enumerationMutation(v30);
            v34 = *(_QWORD *)(*((_QWORD *)&v38 + 1) + 8 * j);
            objc_msgSend(v6, "objectForKeyedSubscript:", v34);
            v35 = (void *)objc_claimAutoreleasedReturnValue();
            v36 = v35 == 0;

            if (v36)
              objc_msgSend(v6, "setObject:forKeyedSubscript:", &unk_1E1075720, v34);
          }
          v31 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v38, v52, 16);
        }
        while (v31);
      }

      ((void (**)(id, id, void *))v37)[2](v37, v6, 0);
    }
    goto LABEL_35;
  }
  ((void (**)(id, id, void *))v37)[2](v37, v6, 0);
LABEL_36:

}

void sub_18295E544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  _Unwind_Resume(a1);
}

id _LSGetDMFNotificationCenter()
{
  return LaunchServices::DMFSupport::getNotificationCenter((LaunchServices::DMFSupport *)1);
}

void ___ZN14LaunchServices10DMFSupportL10getMonitorEb_block_invoke_2(LaunchServices::DMFSupport *a1)
{
  NSObject *v1;
  int v2;
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  LaunchServices::DMFSupport::getLog(a1);
  v1 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    v2 = 136315138;
    v3 = "getMonitor_block_invoke_2";
    _os_log_impl(&dword_182882000, v1, OS_LOG_TYPE_DEFAULT, "%s: DMF policies changed.", (uint8_t *)&v2, 0xCu);
  }

  LaunchServices::DMFSupport::reloadAllPolicies((void *)LaunchServices::DMFSupport::getMonitor(BOOL)::cachingMonitor);
}

void ___ZN14LaunchServices10DMFSupportL10getMonitorEb_block_invoke_14(LaunchServices::DMFSupport *a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_msgSend(objc_alloc((Class)LaunchServices::DMFSupport::getDMFApplicationPolicyMonitorClass(a1)), "initWithPolicyChangeHandler:", 0);
  v2 = (void *)LaunchServices::DMFSupport::getMonitor(BOOL)::nonCachingMonitor;
  LaunchServices::DMFSupport::getMonitor(BOOL)::nonCachingMonitor = v1;

}

id LaunchServices::DMFSupport::DMFApplicationPolicyMonitorFunction(LaunchServices::DMFSupport *this)
{
  return (id)LaunchServices::DMFSupport::classDMFApplicationPolicyMonitor;
}

void ___ZN14LaunchServices10DMFSupportL16postNotificationEP12NSDictionaryIP8NSStringP8NSNumberES7__block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  id v8;

  v8 = a2;
  v5 = a3;
  objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v8);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (!v6 || (objc_msgSend(v6, "isEqualToNumber:", v5) & 1) == 0)
    objc_msgSend(*(id *)(a1 + 40), "addObject:", v8);

}

void sub_18295E798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void ___ZN14LaunchServices10DMFSupportL30getPolicyWithCompletionHandlerEP8NSStringhU13block_pointerFvP8NSNumberP7NSErrorE_block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;

  v8 = a3;
  v5 = *(_QWORD *)(a1 + 32);
  objc_msgSend(a2, "allValues");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "firstObject");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, void *, id))(v5 + 16))(v5, v7, v8);

}

void sub_18295E834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void ___ZN14LaunchServices10DMFSupportL32getPoliciesWithCompletionHandlerEP5NSSetIP8NSStringEhU13block_pointerFvP12NSDictionaryIS3_P8NSNumberEP7NSErrorE_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  LaunchServices::DMFSupport *v6;
  NSObject *v7;
  NSObject *v8;

  v5 = a2;
  v6 = a3;
  LaunchServices::DMFSupport::getLog(v6);
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (v5)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      ___ZN14LaunchServices10DMFSupportL32getPoliciesWithCompletionHandlerEP5NSSetIP8NSStringEhU13block_pointerFvP12NSDictionaryIS3_P8NSNumberEP7NSErrorE_block_invoke_cold_2();

    if (*(_BYTE *)(a1 + 40))
      LaunchServices::DMFSupport::addKnownPoliciesToCache(v5, 0);
  }
  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      ___ZN14LaunchServices10DMFSupportL32getPoliciesWithCompletionHandlerEP5NSSetIP8NSStringEhU13block_pointerFvP12NSDictionaryIS3_P8NSNumberEP7NSErrorE_block_invoke_cold_1();

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_18295E91C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

void sub_18295EB74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18295ECDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18295EFE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_18295F118(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18295F230(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18295F2D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18295F33C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18295F42C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18295F578(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18295F6A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18295F794(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18295F880(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18295F96C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18295FA58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18295FB44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18295FC30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18295FD1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18295FE08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18295FEF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18295FFE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1829600A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182960214(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1829603A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18296052C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182960620(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t getFailableNumericFromBaseProperties<unsigned long long>(void *a1, void *a2, const char *a3, _QWORD *a4, _QWORD *a5)
{
  id v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  BOOL v15;
  char isKindOfClass;
  uint64_t v17;
  void *v18;
  uint64_t v20;
  _QWORD v21[2];

  v21[1] = *MEMORY[0x1E0C80C00];
  v9 = a1;
  v10 = a2;
  NSStringFromSelector(a3);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_opt_class();
  objc_msgSend(v10, "objectForKey:", v11);
  v13 = objc_claimAutoreleasedReturnValue();
  v14 = (void *)v13;
  if (v12)
    v15 = v13 == 0;
  else
    v15 = 1;
  if (v15)
  {
    if (v13)
    {
LABEL_9:
      *a4 = objc_msgSend(v14, "unsignedLongLongValue");
      v17 = 1;
      goto LABEL_13;
    }
  }
  else
  {
    isKindOfClass = objc_opt_isKindOfClass();
    if ((isKindOfClass & 1) != 0)
      goto LABEL_9;

  }
  objc_msgSend(v9, "askedForMissingSelector:", a3);
  if (!a5)
  {
    v17 = 0;
    goto LABEL_14;
  }
  v20 = *MEMORY[0x1E0CB2938];
  v21[0] = v11;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v21, &v20, 1);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2FE0], 5, (uint64_t)"getFailableNumericFromBaseProperties", 284, v18);
  v17 = 0;
  *a5 = (id)objc_claimAutoreleasedReturnValue();
  v14 = v18;
LABEL_13:

LABEL_14:
  return v17;
}

void sub_1829607EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1829608FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1829609E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_182960AD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_182960BC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t getFailableNumericFromBaseProperties<double>(void *a1, void *a2, const char *a3, _QWORD *a4, _QWORD *a5)
{
  id v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  BOOL v15;
  char isKindOfClass;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v21;
  _QWORD v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  v9 = a1;
  v10 = a2;
  NSStringFromSelector(a3);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_opt_class();
  objc_msgSend(v10, "objectForKey:", v11);
  v13 = objc_claimAutoreleasedReturnValue();
  v14 = (void *)v13;
  if (v12)
    v15 = v13 == 0;
  else
    v15 = 1;
  if (v15)
  {
    if (v13)
    {
LABEL_9:
      objc_msgSend(v14, "doubleValue");
      *a4 = v17;
      v18 = 1;
      goto LABEL_13;
    }
  }
  else
  {
    isKindOfClass = objc_opt_isKindOfClass();
    if ((isKindOfClass & 1) != 0)
      goto LABEL_9;

  }
  objc_msgSend(v9, "askedForMissingSelector:", a3);
  if (!a5)
  {
    v18 = 0;
    goto LABEL_14;
  }
  v21 = *MEMORY[0x1E0CB2938];
  v22[0] = v11;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v22, &v21, 1);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2FE0], 5, (uint64_t)"getFailableNumericFromBaseProperties", 284, v19);
  v18 = 0;
  *a5 = (id)objc_claimAutoreleasedReturnValue();
  v14 = v19;
LABEL_13:

LABEL_14:
  return v18;
}

void sub_182960D8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_182961048(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_182961260(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_182961378(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_182961464(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1829615EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1829617C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1829618A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_182961908(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_5(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, a5, 0xCu);
}

void sub_1829627DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

id pendingSaveTokenInterface(void)
{
  if (pendingSaveTokenInterface(void)::onceToken != -1)
    dispatch_once(&pendingSaveTokenInterface(void)::onceToken, &__block_literal_global_273_0);
  return (id)pendingSaveTokenInterface(void)::result;
}

void sub_182962984(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182962A28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182962B74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_182962D44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1829630DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, void *a18, uint64_t a19, void *a20,uint64_t a21,void *a22,uint64_t a23,CFTypeRef a24,uint64_t a25,CFTypeRef cf,char a27)
{
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;

  if (cf)
    CFRelease(cf);

  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_1829634F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef cf)
{
  void *v11;
  void *v12;
  void *v13;

  if (cf)
    CFRelease(cf);

  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_ea8_112c30_ZTS10CFReleaserIPK9__CFArrayE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a2 + 112);
  *(_QWORD *)(a1 + 112) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_ea8_112c30_ZTS10CFReleaserIPK9__CFArrayE(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 112);
  if (v2)
    CFRelease(v2);
  *(_QWORD *)(a1 + 112) = 0;
}

void sub_1829638A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_182963980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_182963B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;
  void *v11;

  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a9);
  _Unwind_Resume(a1);
}

void sub_182963D90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_182963E90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_182964098(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v2;

  _Unwind_Resume(a1);
}

void sub_1829642B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  void *v6;
  void *v7;
  va_list va;

  va_start(va, a5);

  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)va);
  _Unwind_Resume(a1);
}

void sub_182964594(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1829646BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_182964874(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_182964974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_182964B44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_182964D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_182964EC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18296506C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1829651DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_18296531C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1829654EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1829656AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;

  _Unwind_Resume(a1);
}

void sub_182965850(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1829659E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v3;

  _Unwind_Resume(a1);
}

void sub_182965B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_182965C84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_182965D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_182965F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;
  void *v23;
  uint64_t v24;

  _Block_object_dispose(&a17, 8);
  _Block_object_dispose((const void *)(v24 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_18296608C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1829662AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_182966564(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_182966740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  void *v26;
  uint64_t v27;

  _Block_object_dispose(&a21, 8);
  _Block_object_dispose((const void *)(v27 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_18296689C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182966958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_182966A58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_182966AE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_182966F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;

  _Unwind_Resume(a1);
}

void sub_182967290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void sub_18296743C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1829675AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_182967908(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_182967A44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_182967AD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_182967C08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

void sub_1829683C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,id a50)
{
  void *v50;

  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a41);
  _Block_object_dispose(&a45, 8);

  _Unwind_Resume(a1);
}

void sub_1829685D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_182968738(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_182968850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_182968B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_182968C40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_182968E40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1829690A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1829692B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_182969470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;
  void *v11;

  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a9);
  _Unwind_Resume(a1);
}

void sub_1829698D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,id a35)
{
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  uint64_t v40;

  _Block_object_dispose(&a30, 8);
  _Block_object_dispose((const void *)(v40 - 168), 8);

  _Unwind_Resume(a1);
}

void sub_182969B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a9);
  _Unwind_Resume(a1);
}

void sub_182969EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id a29)
{
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  uint64_t v33;

  _Block_object_dispose(&a24, 8);
  _Block_object_dispose((const void *)(v33 - 120), 8);

  _Unwind_Resume(a1);
}

void sub_18296A194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  va_list va;

  va_start(va, a3);
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)va);

  _Unwind_Resume(a1);
}

void sub_18296A2E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_18296A43C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_18296A5B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18296A80C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void _LSDoWithLock(os_unfair_lock_s *a1, void *a2)
{
  void (**v3)(void);

  v3 = a2;
  os_unfair_lock_lock(a1);
  v3[2]();
  os_unfair_lock_unlock(a1);

}

void sub_18296A8D8(void *a1)
{
  os_unfair_lock_s *v1;

  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_18296A8EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  objc_end_catch();

  _Unwind_Resume(a1);
}

void sub_18296ABDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_18296AD10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18296AE78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

void sub_18296B07C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  v18 = v16;

  _Unwind_Resume(a1);
}

void sub_18296B144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_18296B464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30)
{
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;

  v37 = v35;

  _Block_object_dispose(&a19, 8);
  _Block_object_dispose(&a25, 8);

  _Unwind_Resume(a1);
}

void sub_18296B9D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  void *v29;
  void *v30;
  void *v31;

  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a29);
  _Unwind_Resume(a1);
}

void sub_18296BBDC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18296BD1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

uint64_t ___ZL25pendingSaveTokenInterfacev_block_invoke()
{
  uint64_t v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EDCE5870);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)pendingSaveTokenInterface(void)::result;
  pendingSaveTokenInterface(void)::result = v0;

  return objc_msgSend((id)pendingSaveTokenInterface(void)::result, "setClass:forSelector:argumentIndex:ofReply:", objc_opt_class(), sel_waitForResult_, 1, 1);
}

void sub_18296BE8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18296BF40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18296BFE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18296C1A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18296C564(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_18296C670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_18296C8F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_18296CA50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18296CBCC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18296CCA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18296CE28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_18296D1C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  LaunchServices::BindingEvaluator *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  LaunchServices::BindingEvaluator::~BindingEvaluator((LaunchServices::BindingEvaluator *)&a9);

  if (*((_BYTE *)v9 + 168))
    LaunchServices::BindingEvaluator::~BindingEvaluator(v9);
  _Unwind_Resume(a1);
}

void sub_18296D7B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,id a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,id a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a71;
  char a72;
  void *v72;
  void *v73;
  void *v74;
  LaunchServices::BindingEvaluator *v75;
  void *v76;
  void *v77;
  void *v78;

  if (a71)
    LaunchServices::BindingEvaluator::~BindingEvaluator(v75);

  _Block_object_dispose(&a16, 8);
  _Block_object_dispose(&a22, 8);

  if (LOBYTE(STACK[0x2A0]))
    LaunchServices::BindingEvaluator::~BindingEvaluator((LaunchServices::BindingEvaluator *)&a72);
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a29);

  objc_sync_exit(v72);
  _Block_object_dispose(&a36, 8);

  _Unwind_Resume(a1);
}

void sub_18296DD1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  va_list va;

  va_start(va, a2);

  std::__optional_destruct_base<LSBinding,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

LaunchServices::BindingEvaluator *__copy_helper_block_ea8_64c59_ZTSNSt3__18optionalIN14LaunchServices16BindingEvaluatorEEE(uint64_t a1, uint64_t a2)
{
  return std::__optional_copy_base<LaunchServices::BindingEvaluator,false>::__optional_copy_base[abi:nn180100]((LaunchServices::BindingEvaluator *)(a1 + 64), (const LaunchServices::BindingEvaluator *)(a2 + 64));
}

void __destroy_helper_block_ea8_64c59_ZTSNSt3__18optionalIN14LaunchServices16BindingEvaluatorEEE(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 232))
    LaunchServices::BindingEvaluator::~BindingEvaluator((LaunchServices::BindingEvaluator *)(a1 + 64));
}

void sub_18296DE50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18296E168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

void sub_18296E378(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18296E6AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

uint64_t std::remove_if[abi:nn180100]<std::__wrap_iter<LSBinding *>,BOOL({block_pointer} {__strong})(LSBinding const&)>(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t (**v5)(id, _QWORD);
  uint64_t i;
  __int128 v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;

  v5 = a3;
  if (a1 != a2)
  {
    while ((v5[2](v5, a1) & 1) == 0)
    {
      a1 += 48;
      if (a1 == a2)
        goto LABEL_11;
    }
  }
  if (a1 == a2)
  {
LABEL_11:
    a1 = a2;
  }
  else
  {
    for (i = a1 + 48; i != a2; i += 48)
    {
      if ((v5[2](v5, i) & 1) == 0)
      {
        v7 = *(_OWORD *)(i + 16);
        *(_OWORD *)a1 = *(_OWORD *)i;
        *(_OWORD *)(a1 + 16) = v7;
        v8 = *(_QWORD *)(i + 32);
        *(_QWORD *)(i + 32) = 0;
        v9 = *(void **)(a1 + 32);
        *(_QWORD *)(a1 + 32) = v8;

        v10 = *(_QWORD *)(i + 40);
        *(_QWORD *)(i + 40) = 0;
        v11 = *(void **)(a1 + 40);
        *(_QWORD *)(a1 + 40) = v10;

        a1 += 48;
      }
    }
  }

  return a1;
}

void sub_18296E840(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18296E8BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t std::vector<LSBinding>::erase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  char v7;

  if (a2 != a3)
  {
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<LSBinding *,LSBinding *,LSBinding *>((uint64_t)&v7, a3, *(_QWORD *)(a1 + 8), a2);
    std::vector<LSBinding>::__base_destruct_at_end[abi:nn180100](a1, v5);
  }
  return a2;
}

void sub_18296EE28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  void *v31;

  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a31);

  _Unwind_Resume(a1);
}

void sub_18296F0D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_18296F1C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18296F2A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_18296F3B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

LaunchServices::BindingEvaluator *std::__optional_copy_base<LaunchServices::BindingEvaluator,false>::__optional_copy_base[abi:nn180100](LaunchServices::BindingEvaluator *this, const LaunchServices::BindingEvaluator *a2)
{
  *(_BYTE *)this = 0;
  *((_BYTE *)this + 168) = 0;
  if (*((_BYTE *)a2 + 168))
  {
    LaunchServices::BindingEvaluator::BindingEvaluator(this, a2);
    *((_BYTE *)this + 168) = 1;
  }
  return this;
}

void sub_18296F4B0(_Unwind_Exception *exception_object)
{
  LaunchServices::BindingEvaluator *v1;

  if (*((_BYTE *)v1 + 168))
    LaunchServices::BindingEvaluator::~BindingEvaluator(v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<LSBinding *,LSBinding *,LSBinding *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    v7 = *(_OWORD *)(v5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)v5;
    *(_OWORD *)(a4 + 16) = v7;
    v8 = *(_QWORD *)(v5 + 32);
    *(_QWORD *)(v5 + 32) = 0;
    v9 = *(void **)(a4 + 32);
    *(_QWORD *)(a4 + 32) = v8;

    v10 = *(_QWORD *)(v5 + 40);
    *(_QWORD *)(v5 + 40) = 0;
    v11 = *(void **)(a4 + 40);
    *(_QWORD *)(a4 + 40) = v10;

    a4 += 48;
    v5 += 48;
  }
  while (v5 != v6);
  return v6;
}

void sub_18296F5D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18296F68C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18296F9D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_18296FCA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_182970144(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_182970568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  v19 = v17;

  _Unwind_Resume(a1);
}

void sub_1829706B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182970708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_182970A44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_182970D78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v4;

  _Unwind_Resume(a1);
}

void sub_182971010(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_18297181C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1829718DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void __LAUNCH_SERVICES_IS_WAITING_FOR_THE_DATABASE_TO_FINISH_SEEDING__(void)
{
  NSObject *v0;

  _LSDatabaseGetSeedingGroup();
  v0 = objc_claimAutoreleasedReturnValue();
  dispatch_group_wait(v0, 0xFFFFFFFFFFFFFFFFLL);

}

void sub_182971968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_182971A38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  const void *v10;

  CFRelease(v10);

  _Unwind_Resume(a1);
}

void sub_182971B4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_182971BF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182971D0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v4;

  _Unwind_Resume(a1);
}

void sub_182971DC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  v11 = v10;

  _Unwind_Resume(a1);
}

void sub_182971EA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_182971F5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_182972000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1829720BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_182972194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_182972278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_182972364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_182972430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_182972588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_18297264C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_182972908(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v4;

  _Unwind_Resume(a1);
}

void sub_182972B5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, CFTypeRef a11)
{
  void *v11;
  void *v12;

  if (cf)
    CFRelease(cf);
  if (a11)
    CFRelease(a11);

  _Unwind_Resume(a1);
}

void sub_182972C50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_182973314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  void *a69;
  void *a70;
  void *a71;

  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&STACK[0x200]);
  _Unwind_Resume(a1);
}

void sub_18297352C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18297360C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{

  _Unwind_Resume(a1);
}

void sub_1829736F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{

  _Unwind_Resume(a1);
}

void sub_182973840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1829738CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_182973CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  void *v29;

  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a29);
  _Unwind_Resume(a1);
}

void sub_182973E44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_182973EC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_182973FEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_182974098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1829742A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18297435C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1829745C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_182974708(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void configureUIDForUserSession(NSXPCConnection *a1)
{
  id v1;

  -[NSXPCConnection _xpcConnection](a1, "_xpcConnection");
  v1 = (id)objc_claimAutoreleasedReturnValue();
  xpc_connection_set_target_user_session_uid();

}

void sub_1829748C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void _LSDServiceStartAllServices()
{
  _LSAssertRunningInServer((uint64_t)"void _LSDServiceStartAllServices()");
  if (_LSDServiceStartAllServices::once != -1)
    dispatch_once(&_LSDServiceStartAllServices::once, &__block_literal_global_20_1);
}

void sub_182974C1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_182974E80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_182974F64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18297502C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock((os_unfair_lock_t)&_LSDServiceGetXPCConnection::serverConnectionsLock);
  _Unwind_Resume(a1);
}

id __copy_helper_block_ea8_56c41_ZTS35ServiceConnectionConfigurationState(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  id result;

  v3 = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v3;
  result = *(id *)(a2 + 80);
  *(_QWORD *)(a1 + 80) = result;
  return result;
}

void __destroy_helper_block_ea8_56c41_ZTS35ServiceConnectionConfigurationState(uint64_t a1)
{

}

void sub_182975108(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

dispatch_block_t _LSServer_MakeServiceFloorBlock(void *a1)
{
  qos_class_t v2;
  dispatch_qos_class_t v3;

  v2 = qos_class_self();
  if (v2 <= QOS_CLASS_DEFAULT)
    v3 = QOS_CLASS_DEFAULT;
  else
    v3 = v2;
  return dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ASSIGN_CURRENT, v3, 0, a1);
}

void sub_182975250(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1829752DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182975368(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_2_3(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, a5, 0x16u);
}

LaunchServices::DumpWriter *LaunchServices::DumpWriter::DumpWriter(LaunchServices::DumpWriter *this, _LSDatabase *a2, NSMutableAttributedString *a3)
{
  _LSDatabase *v5;

  v5 = a2;
  CSStore2::AttributedStringWriter::AttributedStringWriter(this, v5->store, a3);
  *(_QWORD *)this = &off_1E103E010;
  *((_QWORD *)this + 32) = v5;
  return this;
}

void sub_182975400(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *LaunchServices::DumpWriter::DumpWriter(LaunchServices::DumpWriter *this, NSMutableAttributedString *a2)
{
  _QWORD *result;

  result = (_QWORD *)CSStore2::AttributedStringWriter::AttributedStringWriter(this, 0, a2);
  *result = &off_1E103E010;
  result[32] = 0;
  return result;
}

void LaunchServices::DumpWriter::~DumpWriter(id *this)
{
  *this = &off_1E103E010;

  CSStore2::AttributedStringWriter::~AttributedStringWriter((CSStore2::AttributedStringWriter *)this);
}

{
  *this = &off_1E103E010;

  CSStore2::AttributedStringWriter::~AttributedStringWriter((CSStore2::AttributedStringWriter *)this);
  JUMPOUT(0x186DADEF4);
}

void LaunchServices::DumpWriter::platform(LaunchServices::DumpWriter *this, NSString *a2, uint64_t a3)
{
  __CFString *v5;
  void *v6;
  NSString *v7;
  NSNumber *v8;
  NSString *v9;
  NSNumber *v10;
  __CFString *v11;

  v9 = a2;
  if ((_DWORD)a3)
  {
    if ((_DWORD)a3 != 6)
    {
      if (dyld_is_simulator_platform())
      {
        v5 = (__CFString *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("simulator (%llu)"), dyld_get_base_platform());
        if (v5)
          goto LABEL_10;
      }
      else if (dyld_get_active_platform() == (_DWORD)a3)
      {
        v5 = CFSTR("native");
        goto LABEL_10;
      }
      v7 = v9;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a3);
      v8 = (NSNumber *)objc_claimAutoreleasedReturnValue();
      CSStore2::AttributedStringWriter::number(this, v7, v8);
      goto LABEL_11;
    }
    v5 = CFSTR("Mac Catalyst");
  }
  else
  {
    v5 = CFSTR("#");
  }
LABEL_10:
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = v9;
  v11 = v5;
  v7 = v5;
  CSStore2::AttributedStringWriter::withAppliedAttribute();

  v8 = v10;
LABEL_11:

}

void sub_182975658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

uint64_t ___ZN14LaunchServices10DumpWriter8platformEP8NSStringj_block_invoke(uint64_t a1)
{
  return CSStore2::AttributedStringWriter::string(*(CSStore2::AttributedStringWriter **)(a1 + 48), *(NSString **)(a1 + 32), *(NSString **)(a1 + 40));
}

void LaunchServices::DumpWriter::directoryClass(uint64_t a1, void *a2, uint64_t a3)
{
  id v4;
  __CFString *v5;
  void *v6;
  id v7;
  __CFString *v8;

  v4 = a2;
  if (a3 < 9 && ((0x1FDu >> a3) & 1) != 0)
  {
    v5 = off_1E1043CE8[(char)a3];
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Other (%llu)"), a3);
    v5 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedChar:", a3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v4;
  v8 = v5;
  CSStore2::AttributedStringWriter::withAppliedAttribute();

}

void sub_1829757D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17)
{
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

uint64_t ___ZN14LaunchServices10DumpWriter14directoryClassEP8NSString16LSDirectoryClass_block_invoke(uint64_t a1)
{
  return CSStore2::AttributedStringWriter::string(*(CSStore2::AttributedStringWriter **)(a1 + 48), *(NSString **)(a1 + 32), *(NSString **)(a1 + 40));
}

void LaunchServices::DumpWriter::version(LaunchServices::DumpWriter *this, NSString *a2, LSVersionNumber *a3)
{
  NSString *v5;
  __int128 v6;
  __int128 v7;
  void *v8;
  void *v9;
  void *v10;
  _OWORD v11[2];
  _OWORD v12[2];
  _OWORD v13[2];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = *(_OWORD *)&a3->_opaque[16];
  v13[0] = *(_OWORD *)a3->_opaque;
  v13[1] = v6;
  memset(v12, 0, sizeof(v12));
  if (_LSVersionNumberCompare(v13, v12))
  {
    v7 = *(_OWORD *)&a3->_opaque[16];
    v11[0] = *(_OWORD *)a3->_opaque;
    v11[1] = v7;
    _LSVersionNumberGetStringRepresentation(v11);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytesNoCopy:length:freeWhenDone:", a3, 32, 0);
    objc_msgSend(v9, "description");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::format(this, v5, CFSTR("%@ (%@)"), v8, v10);

  }
  else
  {
    CSStore2::AttributedStringWriter::string(this, v5, &stru_1E10473A0.isa);
  }

}

void sub_18297592C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t _LSSetDatabaseIsSeeded(int a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  _QWORD v7[5];
  void (*v8[5])(_QWORD, _QWORD);
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;

  v9 = 0;
  v10 = &v9;
  v11 = 0x2020000000;
  v12 = 0;
  v2 = (void *)MEMORY[0x186DAE7A0]();
  v3 = MEMORY[0x1E0C809B0];
  v8[0] = (void (*)(_QWORD, _QWORD))MEMORY[0x1E0C809B0];
  v8[1] = (void (*)(_QWORD, _QWORD))3221225472;
  v8[2] = (void (*)(_QWORD, _QWORD))___LSSetDatabaseIsSeeded_block_invoke;
  v8[3] = (void (*)(_QWORD, _QWORD))&unk_1E10407A0;
  v8[4] = (void (*)(_QWORD, _QWORD))&v9;
  +[_LSDService synchronousXPCProxyWithErrorHandler:]((uint64_t)_LSDModifyService, v8);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = v3;
  v7[1] = 3221225472;
  v7[2] = ___LSSetDatabaseIsSeeded_block_invoke_2;
  v7[3] = &unk_1E10409B0;
  v7[4] = &v9;
  objc_msgSend(v4, "setDatabaseIsSeeded:completionHandler:", a1 != 0, v7);

  objc_autoreleasePoolPop(v2);
  v5 = *((unsigned int *)v10 + 6);
  _Block_object_dispose(&v9, 8);
  return v5;
}

void sub_182975D1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _LSRegisterItemInfo(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  id v13;
  id v14;
  id v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  _QWORD v23[8];
  void (*v24[5])(_QWORD, _QWORD);
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int v28;

  v13 = a1;
  v14 = a2;
  v15 = a3;
  v25 = 0;
  v26 = &v25;
  v27 = 0x2020000000;
  v28 = 0;
  v16 = (void *)MEMORY[0x186DAE7A0]();
  v17 = MEMORY[0x1E0C809B0];
  v24[0] = (void (*)(_QWORD, _QWORD))MEMORY[0x1E0C809B0];
  v24[1] = (void (*)(_QWORD, _QWORD))3221225472;
  v24[2] = (void (*)(_QWORD, _QWORD))___LSRegisterItemInfo_block_invoke;
  v24[3] = (void (*)(_QWORD, _QWORD))&unk_1E10407A0;
  v24[4] = (void (*)(_QWORD, _QWORD))&v25;
  +[_LSDService synchronousXPCProxyWithErrorHandler:]((uint64_t)_LSDModifyService, v24);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v23[0] = v17;
  v23[1] = 3221225472;
  v23[2] = ___LSRegisterItemInfo_block_invoke_2;
  v23[3] = &unk_1E1043D38;
  v23[4] = &v25;
  v23[5] = a6;
  v23[6] = a7;
  v23[7] = a8;
  objc_msgSend(v18, "registerItemInfo:alias:diskImageAlias:bundleURL:installationPlist:completionHandler:", v13, v14, v15, a4, a5, v23);

  objc_autoreleasePoolPop(v16);
  v19 = *((unsigned int *)v26 + 6);
  _Block_object_dispose(&v25, 8);

  return v19;
}

void sub_182975EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _LSRegisterExtensionPointClient(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD v13[5];
  void (*v14[5])(_QWORD, _QWORD);
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;

  v15 = 0;
  v16 = &v15;
  v17 = 0x2020000000;
  v18 = 0;
  v8 = (void *)MEMORY[0x186DAE7A0]();
  v9 = MEMORY[0x1E0C809B0];
  v14[0] = (void (*)(_QWORD, _QWORD))MEMORY[0x1E0C809B0];
  v14[1] = (void (*)(_QWORD, _QWORD))3221225472;
  v14[2] = (void (*)(_QWORD, _QWORD))___LSRegisterExtensionPointClient_block_invoke;
  v14[3] = (void (*)(_QWORD, _QWORD))&unk_1E10407A0;
  v14[4] = (void (*)(_QWORD, _QWORD))&v15;
  +[_LSDService synchronousXPCProxyWithErrorHandler:]((uint64_t)_LSDModifyService, v14);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v13[0] = v9;
  v13[1] = 3221225472;
  v13[2] = ___LSRegisterExtensionPointClient_block_invoke_2;
  v13[3] = &unk_1E10409B0;
  v13[4] = &v15;
  objc_msgSend(v10, "registerExtensionPoint:platform:declaringURL:withInfo:completionHandler:", a1, a2, a4, a3, v13);

  objc_autoreleasePoolPop(v8);
  v11 = *((unsigned int *)v16 + 6);
  _Block_object_dispose(&v15, 8);
  return v11;
}

void sub_18297611C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _LSUnregisterExtensionPointClient(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD v13[5];
  void (*v14[5])(_QWORD, _QWORD);
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;

  v15 = 0;
  v16 = &v15;
  v17 = 0x2020000000;
  v18 = 0;
  v8 = (void *)MEMORY[0x186DAE7A0]();
  v9 = MEMORY[0x1E0C809B0];
  v14[0] = (void (*)(_QWORD, _QWORD))MEMORY[0x1E0C809B0];
  v14[1] = (void (*)(_QWORD, _QWORD))3221225472;
  v14[2] = (void (*)(_QWORD, _QWORD))___LSUnregisterExtensionPointClient_block_invoke;
  v14[3] = (void (*)(_QWORD, _QWORD))&unk_1E10407A0;
  v14[4] = (void (*)(_QWORD, _QWORD))&v15;
  +[_LSDService synchronousXPCProxyWithErrorHandler:]((uint64_t)_LSDModifyService, v14);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v13[0] = v9;
  v13[1] = 3221225472;
  v13[2] = ___LSUnregisterExtensionPointClient_block_invoke_2;
  v13[3] = &unk_1E10409B0;
  v13[4] = &v15;
  objc_msgSend(v10, "unregisterExtensionPoint:platform:withVersion:parentBundleUnit:completionHandler:", a1, a2, a3, a4, v13);

  objc_autoreleasePoolPop(v8);
  v11 = *((unsigned int *)v16 + 6);
  _Block_object_dispose(&v15, 8);
  return v11;
}

void sub_1829762B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _LSSetSchemeHandler(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  void *v6;
  const audit_token_t *v7;
  uint64_t v8;
  void *v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v13[5];
  void (*v14[5])(_QWORD, _QWORD);
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  _OWORD v19[2];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v15 = 0;
  v16 = &v15;
  v17 = 0x2020000000;
  v18 = 0;
  v6 = (void *)MEMORY[0x186DAE7A0]();
  if (_LSBundleDataGetUnsupportedFormatFlag()
    && (v7 = (const audit_token_t *)_LSGetAuditTokenForSelf(),
        !_LSCheckEntitlementForChangingDefaultHandler(v7, a1, 0)))
  {
    *((_DWORD *)v16 + 6) = -10822;
  }
  else
  {
    v8 = MEMORY[0x1E0C809B0];
    v14[0] = (void (*)(_QWORD, _QWORD))MEMORY[0x1E0C809B0];
    v14[1] = (void (*)(_QWORD, _QWORD))3221225472;
    v14[2] = (void (*)(_QWORD, _QWORD))___LSSetSchemeHandler_block_invoke;
    v14[3] = (void (*)(_QWORD, _QWORD))&unk_1E10407A0;
    v14[4] = (void (*)(_QWORD, _QWORD))&v15;
    +[_LSDService synchronousXPCProxyWithErrorHandler:]((uint64_t)_LSDModifyService, v14);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v13[0] = v8;
    v13[1] = 3221225472;
    v13[2] = ___LSSetSchemeHandler_block_invoke_2;
    v13[3] = &unk_1E10409B0;
    v13[4] = &v15;
    v10 = a3[1];
    v19[0] = *a3;
    v19[1] = v10;
    objc_msgSend(v9, "setHandler:version:forURLScheme:completionHandler:", a2, v19, a1, v13);

  }
  objc_autoreleasePoolPop(v6);
  v11 = *((unsigned int *)v16 + 6);
  _Block_object_dispose(&v15, 8);
  return v11;
}

void sub_1829764B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _LSRemoveSchemeHandler(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  _QWORD v7[5];
  void (*v8[5])(_QWORD, _QWORD);
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;

  v9 = 0;
  v10 = &v9;
  v11 = 0x2020000000;
  v12 = 0;
  v2 = (void *)MEMORY[0x186DAE7A0]();
  v3 = MEMORY[0x1E0C809B0];
  v8[0] = (void (*)(_QWORD, _QWORD))MEMORY[0x1E0C809B0];
  v8[1] = (void (*)(_QWORD, _QWORD))3221225472;
  v8[2] = (void (*)(_QWORD, _QWORD))___LSRemoveSchemeHandler_block_invoke;
  v8[3] = (void (*)(_QWORD, _QWORD))&unk_1E10407A0;
  v8[4] = (void (*)(_QWORD, _QWORD))&v9;
  +[_LSDService synchronousXPCProxyWithErrorHandler:]((uint64_t)_LSDModifyService, v8);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = v3;
  v7[1] = 3221225472;
  v7[2] = ___LSRemoveSchemeHandler_block_invoke_2;
  v7[3] = &unk_1E10409B0;
  v7[4] = &v9;
  objc_msgSend(v4, "removeHandlerForURLScheme:completionHandler:", a1, v7);

  objc_autoreleasePoolPop(v2);
  v5 = *((unsigned int *)v10 + 6);
  _Block_object_dispose(&v9, 8);
  return v5;
}

void sub_182976654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _LSSyncWithMobileInstallation()
{
  void *v0;
  void *v1;

  v0 = (void *)MEMORY[0x186DAE7A0]();
  +[_LSDService XPCProxyWithErrorHandler:]((uint64_t)_LSDModifyService, 0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "synchronizeWithMobileInstallation");

  objc_autoreleasePoolPop(v0);
}

uint64_t __LAUNCH_SERVICES_IS_WAITING_ON_THE_MAIN_QUEUE_DUE_TO_A_MANUAL_REBUILD__(void *a1, uint64_t a2)
{
  return objc_msgSend(a1, "getServerStoreBlockingWithCompletionHandler:", a2);
}

uint64_t __LAUNCH_SERVICES_WAS_ASKED_TO_PERFORM_BLOCKING_IO_ON_THE_MAIN_QUEUE__(void *a1, uint64_t a2)
{
  return objc_msgSend(a1, "getServerStoreBlockingWithCompletionHandler:", a2);
}

uint64_t __LAUNCH_SERVICES_IS_RESEEDING_ITS_DATABASE_DUE_TO_A_MANUAL_REBUILD_AND_MAY_BLOCK__(void *a1, uint64_t a2)
{
  return objc_msgSend(a1, "getServerStoreBlockingWithCompletionHandler:", a2);
}

uint64_t __LAUNCH_SERVICES_IS_RESEEDING_ITS_DATABASE_AND_MAY_BLOCK__(void *a1, uint64_t a2)
{
  return objc_msgSend(a1, "getServerStoreBlockingWithCompletionHandler:", a2);
}

uint64_t _LSCheckEntitlementForChangingDefaultHandler(const audit_token_t *a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  uint64_t v6;

  _LSCopyEntitlementValueForAuditToken(a1, CFSTR("com.apple.private.launchservices.changedefaulthandlers"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = _LSCheckEntitlementValueForChangingDefaultHandler(v5, a2, a3);

  return v6;
}

void sub_1829768B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _LSCheckEntitlementValueForChangingDefaultHandler(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  void *v6;
  uint64_t v7;

  v5 = a1;
  v6 = v5;
  if (a2 || !a3)
  {
    if (a2 | a3)
      v7 = _LSCheckEntitlementValueForSchemeOrTypeMatch(v5, a2, a3);
    else
      v7 = 0;
  }
  else
  {
    v7 = 1;
  }

  return v7;
}

void sub_182976930(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _LSCheckXPCConnectionEntitlementForChangingDefaultHandler(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  void *v6;
  uint64_t v7;

  v5 = a1;
  xpc_connection_get_audit_token();
  _LSCopyEntitlementValueForXPCConnection(v5, CFSTR("com.apple.private.launchservices.changedefaulthandlers"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = _LSCheckEntitlementValueForChangingDefaultHandler(v6, a2, a3);

  return v7;
}

void sub_1829769B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL _LSGetBooleanValueForEntitlementValue(void *a1, _BOOL8 value)
{
  id v3;
  void *v4;
  Class Class;
  BOOL v6;
  uint64_t v7;

  v3 = a1;
  v4 = v3;
  if (v3)
  {
    Class = object_getClass(v3);
    if (Class == (Class)MEMORY[0x1E0C812D0])
    {
      value = xpc_BOOL_get_value(v4);
      goto LABEL_14;
    }
    if (Class == (Class)MEMORY[0x1E0C81328])
    {
      v7 = xpc_int64_get_value(v4);
    }
    else
    {
      if (Class != (Class)MEMORY[0x1E0C81398])
      {
        if (Class != (Class)MEMORY[0x1E0C81300])
          goto LABEL_14;
        v6 = (uint64_t)xpc_double_get_value(v4) == 0;
        goto LABEL_11;
      }
      v7 = xpc_uint64_get_value(v4);
    }
    v6 = v7 == 0;
LABEL_11:
    value = !v6;
  }
LABEL_14:

  return value;
}

void sub_182976A8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL _LSCheckEntitlementForAuditTokenWithDefault(const audit_token_t *a1, __CFString *a2, _BOOL8 a3)
{
  void *v4;
  void *v5;

  if (a1)
  {
    _LSCopyEntitlementValueForAuditToken(a1, a2);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = v4;
    if (v4)
      a3 = _LSGetBooleanValueForEntitlementValue(v4, a3);

  }
  return a3;
}

void sub_182976AE8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _LSCheckEntitlementForNSXPCConnection(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  pid_t v8;
  audit_token_t v10;
  uint8_t buf[4];
  uint64_t v12;
  __int16 v13;
  id v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (v3)
  {
    objc_msgSend(v3, "valueForEntitlement:", v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (v5)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        if (objc_msgSend(v5, "compare:options:", CFSTR("YES"), 1) && !objc_msgSend(v5, "intValue"))
          goto LABEL_11;
      }
      else
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0 || !objc_msgSend(v5, "integerValue"))
          goto LABEL_11;
      }
      v6 = 1;
LABEL_14:

      goto LABEL_15;
    }
LABEL_11:
    _LSDefaultLog();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend(v3, "auditToken");
      v8 = audit_token_to_pid(&v10);
      *(_DWORD *)buf = 134218242;
      v12 = v8;
      v13 = 2114;
      v14 = v4;
      _os_log_impl(&dword_182882000, v7, OS_LOG_TYPE_DEFAULT, "Connection from process %llu does not have the required entitlement %{public}@", buf, 0x16u);
    }

    v6 = 0;
    goto LABEL_14;
  }
  v6 = 0;
LABEL_15:

  return v6;
}

void sub_182976C88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t _LSCheckMIAllowedSPIForXPCConnection(void *a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  _QWORD v11[6];
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;

  v3 = a1;
  v4 = v3;
  v5 = 0;
  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  v15 = 0;
  if (v3 && a2)
  {
    _LSCopyEntitlementValueForXPCConnection(v3, CFSTR("com.apple.private.mobileinstall.allowedSPI"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = v6;
    if (v6 && object_getClass(v6) == (Class)MEMORY[0x1E0C812C8])
    {
      v8 = (void *)MEMORY[0x186DAE7A0]();
      v9 = objc_msgSend(objc_retainAutorelease(a2), "UTF8String");
      v11[0] = MEMORY[0x1E0C809B0];
      v11[1] = 3221225472;
      v11[2] = ___LSCheckMIAllowedSPIForXPCConnection_block_invoke;
      v11[3] = &unk_1E1043EA8;
      v11[4] = &v12;
      v11[5] = v9;
      xpc_array_apply(v7, v11);
      objc_autoreleasePoolPop(v8);
    }

    v5 = *((unsigned __int8 *)v13 + 24);
  }
  _Block_object_dispose(&v12, 8);

  return v5;
}

void sub_182976DC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  void *v8;
  va_list va;

  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_182976E74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _LSCheckOpenSensitiveURLForXPCConnection(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  BOOL v8;
  _QWORD v10[6];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char v14;

  v3 = a1;
  v4 = v3;
  v5 = 0;
  v11 = 0;
  v12 = &v11;
  v13 = 0x2020000000;
  v14 = 0;
  if (v3 && a2)
  {
    _LSCopyEntitlementValueForXPCConnection(v3, CFSTR("com.apple.springboard.opensensitiveurl"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = v6;
    if (v6)
    {
      if (object_getClass(v6) == (Class)MEMORY[0x1E0C812C8])
      {
        v10[0] = MEMORY[0x1E0C809B0];
        v10[1] = 3221225472;
        v10[2] = ___LSCheckOpenSensitiveURLForXPCConnection_block_invoke;
        v10[3] = &unk_1E1043EA8;
        v10[4] = &v11;
        v10[5] = a2;
        xpc_array_apply(v7, v10);
      }
      else
      {
        v8 = _LSGetBooleanValueForEntitlementValue(v7, 0);
        *((_BYTE *)v12 + 24) = v8;
      }
    }

    v5 = *((unsigned __int8 *)v12 + 24);
  }
  _Block_object_dispose(&v11, 8);

  return v5;
}

void sub_182976F88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

void sub_182977034(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t _LSCheckLSDServiceAccessForAuditToken(uint64_t a1, void *a2)
{
  void *v4;
  uint64_t v5;
  void *v6;

  v4 = (void *)MEMORY[0x186DAE7A0]();
  if (_LSCheckLSDServiceAccessForAuditToken::once != -1)
    dispatch_once(&_LSCheckLSDServiceAccessForAuditToken::once, &__block_literal_global_37);
  v5 = 0;
  if (a1 && a2)
  {
    if (_LSCheckLSDServiceAccessForAuditToken::lsdServiceClass && !objc_msgSend(a2, "isSubclassOfClass:"))
    {
      v5 = 0;
    }
    else
    {
      objc_msgSend((id)__LSDefaultsGetSharedInstance(), "serviceNameForConnectionType:", objc_msgSend(a2, "connectionType"));
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = _LSCheckMachPortAccessForAuditToken(a1, v6);

    }
  }
  objc_autoreleasePoolPop(v4);
  return v5;
}

void sub_18297711C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_OWORD *_LSIsAuditTokenPlatformBinary(_OWORD *result)
{
  __int128 v1;
  audit_token_t atoken;
  pid_t pidp;

  if (result)
  {
    pidp = 0;
    v1 = result[1];
    *(_OWORD *)atoken.val = *result;
    *(_OWORD *)&atoken.val[4] = v1;
    audit_token_to_au32(&atoken, 0, 0, 0, 0, 0, &pidp, 0, 0);
    if (csops_audittoken())
      return 0;
    else
      return 0;
  }
  return result;
}

_OWORD *_LSIsXPCConnectionPlatformBinary(void *a1)
{
  id v1;
  _OWORD *v2;
  __int128 v4;

  v1 = a1;
  if (v1)
  {
    xpc_connection_get_audit_token();
    v2 = _LSIsAuditTokenPlatformBinary(&v4);
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

void sub_182977228(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

CFTypeRef _LSCopyBundleIdentifierForAuditToken(uint64_t a1, int a2)
{
  void *v4;
  void *v5;
  pid_t v6;
  __int128 v7;
  CFBundleRef MainBundle;
  __CFBundle *Unique;
  const void *v10;
  CFStringRef Identifier;
  CFTypeRef v12;
  void *v13;
  audit_token_t atoken;
  pid_t pidp;

  if (a1)
  {
    _LSCopyEntitlementValueForAuditToken((const audit_token_t *)a1, CFSTR("application-identifier"));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = v4;
    if (v4 && object_getClass(v4) == (Class)MEMORY[0x1E0C81390])
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", xpc_string_get_string_ptr(v5));
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_QWORD *)atoken.val = 0;
      _LSSplitApplicationIdentifier(v13, 0, (id *)&atoken);
      if (*(_QWORD *)atoken.val)
      {
        v12 = *(id *)atoken.val;

LABEL_17:
        return v12;
      }

    }
    v6 = getpid();
    pidp = 0;
    v7 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)atoken.val = *(_OWORD *)a1;
    *(_OWORD *)&atoken.val[4] = v7;
    audit_token_to_au32(&atoken, 0, 0, 0, 0, 0, &pidp, 0, 0);
    if (v6 == pidp
      && (MainBundle = CFBundleGetMainBundle()) != 0
      && (Unique = (__CFBundle *)CFRetain(MainBundle)) != 0
      || (v10 = (const void *)_LSCopyBundleURLForAuditToken((_OWORD *)a1, a2)) != 0
      && (Unique = (__CFBundle *)_CFBundleCreateUnique(), CFRelease(v10), Unique))
    {
      Identifier = CFBundleGetIdentifier(Unique);
      if (Identifier)
        v12 = CFRetain(Identifier);
      else
        v12 = 0;
      CFRelease(Unique);
    }
    else
    {
      v12 = 0;
    }
    goto LABEL_17;
  }
  return 0;
}

void sub_1829773C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

unint64_t _LSBundleIdentifierIsWebBrowser(unint64_t result)
{
  const void *v1;

  if (result)
  {
    v1 = (const void *)result;
    return CFEqual((CFTypeRef)result, CFSTR("com.apple.mobilesafari")) || CFEqual(v1, CFSTR("com.apple.Safari")) != 0;
  }
  return result;
}

uint64_t _LSXPCConnectionCanSuppressCustomSchemePrompt(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;

  v3 = a1;
  v4 = v3;
  v5 = 0;
  if (v3 && a2)
  {
    _LSCopyEntitlementValueForXPCConnection(v3, CFSTR("com.apple.private.launchservices.suppresscustomschemeprompt"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = _LSCheckEntitlementValueForSchemeOrTypeMatch(v6, a2, 0);

  }
  return v5;
}

void sub_1829774D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t _LSCheckEntitlementValueForSchemeOrTypeMatch(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  uint64_t v6;
  void (**v7)(_QWORD, _QWORD);
  uint64_t v8;
  _QWORD applier[4];
  void (**v11)(_QWORD, _QWORD);
  uint64_t *v12;
  uint64_t *v13;
  _QWORD v14[8];
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  char v22;

  v5 = a1;
  if (v5 && a2 | a3)
  {
    v19 = 0;
    v20 = &v19;
    v21 = 0x2020000000;
    v22 = 0;
    v15 = 0;
    v16 = &v15;
    v17 = 0x2020000000;
    v18 = 0;
    v6 = MEMORY[0x1E0C809B0];
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = ___ZL44_LSCheckEntitlementValueForSchemeOrTypeMatchPU24objcproto13OS_xpc_object8NSObjectPK10__CFStringS4__block_invoke;
    v14[3] = &unk_1E1043EF0;
    v14[4] = &v19;
    v14[5] = &v15;
    v14[6] = a2;
    v14[7] = a3;
    v7 = (void (**)(_QWORD, _QWORD))MEMORY[0x186DAE9BC](v14);
    if (object_getClass(v5) == (Class)MEMORY[0x1E0C812C8])
    {
      applier[0] = v6;
      applier[1] = 3221225472;
      applier[2] = ___ZL44_LSCheckEntitlementValueForSchemeOrTypeMatchPU24objcproto13OS_xpc_object8NSObjectPK10__CFStringS4__block_invoke_2;
      applier[3] = &unk_1E1043F18;
      v11 = v7;
      v12 = &v19;
      v13 = &v15;
      xpc_array_apply(v5, applier);

      if (!a2)
        goto LABEL_11;
    }
    else
    {
      if (object_getClass(v5) == (Class)MEMORY[0x1E0C81390])
        ((void (**)(_QWORD, id))v7)[2](v7, v5);
      if (!a2)
      {
LABEL_11:
        if (!a3 || *((_BYTE *)v16 + 24))
        {
          v8 = 1;
LABEL_15:

          _Block_object_dispose(&v15, 8);
          _Block_object_dispose(&v19, 8);
          goto LABEL_16;
        }
LABEL_14:
        v8 = 0;
        goto LABEL_15;
      }
    }
    if (!*((_BYTE *)v20 + 24))
      goto LABEL_14;
    goto LABEL_11;
  }
  v8 = 0;
LABEL_16:

  return v8;
}

void sub_182977690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  void *v17;
  void *v18;
  uint64_t v19;
  va_list va;

  va_start(va, a17);

  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v19 - 96), 8);

  _Unwind_Resume(a1);
}

BOOL _LSCurrentProcessCanAccessManagedSettings()
{
  void *v0;
  _BOOL8 v1;

  if (_LSGetAuditTokenForSelf::once != -1)
    dispatch_once(&_LSGetAuditTokenForSelf::once, &__block_literal_global_115);
  _LSCopyEntitlementValueForAuditToken((const audit_token_t *)_LSGetAuditTokenForSelf::result, CFSTR("com.apple.private.managed-settings.effective-read"));
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = _LSGetBooleanValueForEntitlementValue(v0, 0);

  return v1;
}

void sub_18297773C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL _LSAuditTokensAreEqual(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3];
}

uint64_t _LSGetConsoleOwnerUID(uid_t *a1)
{
  stat v3;

  if (lstat("/dev/console", &v3))
    return 0;
  if (a1)
    *a1 = v3.st_uid;
  return 1;
}

CFTypeRef _LSCopyBundleIdentifierForXPCConnection(void *a1, int a2)
{
  id v3;
  CFTypeRef v4;
  uint64_t v6;

  v3 = a1;
  xpc_connection_get_audit_token();
  v4 = _LSCopyBundleIdentifierForAuditToken((uint64_t)&v6, a2);

  return v4;
}

void sub_182977810(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZL44_LSCheckEntitlementValueForSchemeOrTypeMatchPU24objcproto13OS_xpc_object8NSObjectPK10__CFStringS4__block_invoke(_QWORD *a1, void *a2)
{
  const char *string_ptr;
  CFStringRef v4;
  const __CFString *v5;
  const __CFString *v6;
  const __CFString *v7;
  id v8;

  v8 = a2;
  string_ptr = xpc_string_get_string_ptr(v8);
  v4 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], string_ptr, 0x8000100u);
  v5 = v4;
  if (v4)
  {
    if (CFEqual(v4, CFSTR("*")))
    {
      *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = 1;
    }
    else
    {
      v6 = (const __CFString *)a1[6];
      if (v6 && CFStringCompare(v6, v5, 1uLL) == kCFCompareEqualTo)
        *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = 1;
      v7 = (const __CFString *)a1[7];
      if (!v7 || !UTTypeEqual(v7, v5))
        goto LABEL_5;
    }
    *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = 1;
LABEL_5:
    CFRelease(v5);
  }

}

void sub_1829778F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  const void *v10;

  CFRelease(v10);

  _Unwind_Resume(a1);
}

BOOL ___ZL44_LSCheckEntitlementValueForSchemeOrTypeMatchPU24objcproto13OS_xpc_object8NSObjectPK10__CFStringS4__block_invoke_2(_QWORD *a1, uint64_t a2, void *a3)
{
  id v4;
  _BOOL8 v5;

  v4 = a3;
  if (object_getClass(v4) == (Class)MEMORY[0x1E0C81390])
    (*(void (**)(void))(a1[4] + 16))();
  if (*(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24))
    v5 = *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) == 0;
  else
    v5 = 1;

  return v5;
}

void sub_182977994(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1829779BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182977AB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182977BBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182977C80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182977DE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182977F14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182977FD8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void _LSEnumeratorFireErrorHandler(unsigned __int8 *a1, void *a2)
{
  id v3;
  unsigned __int8 *v4;
  unsigned __int8 v5;
  void (**v6)(_QWORD, _QWORD);
  void *v7;
  void *v8;
  uint64_t v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = a1 + 16;
  do
    v5 = __ldaxr(v4);
  while (__stlxr(1u, v4));
  if ((v5 & 1) == 0)
  {
    if (os_log_type_enabled((os_log_t)_LSEnumeratorLog, OS_LOG_TYPE_ERROR))
      _LSEnumeratorFireErrorHandler_cold_1();
    objc_msgSend(a1, "errorHandler");
    v6 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    if (v6)
    {
      v7 = (void *)MEMORY[0x186DAE7A0]();
      if (!v3)
      {
        v9 = *MEMORY[0x1E0CB2938];
        v10[0] = CFSTR("Fallback for nil error in enumerator error handler");
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v10, &v9, 1);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], -10810, (uint64_t)"_LSEnumeratorFireErrorHandler", 178, v8);
        v3 = (id)objc_claimAutoreleasedReturnValue();

      }
      ((void (**)(_QWORD, id))v6)[2](v6, v3);
      objc_autoreleasePoolPop(v7);
    }

  }
}

void sub_182978158(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1829781FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182978270(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18297834C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _LSGetOSStatusFromPOSIXErrorCode(uint64_t a1)
{
  int v1;
  uint64_t v2;
  NSObject *v3;
  int *v5;
  _DWORD v6[2];
  __int16 v7;
  char *v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v1 = a1;
  v11 = *MEMORY[0x1E0C80C00];
  v2 = a1;
  if ((int)a1 < -1)
    goto LABEL_6;
  if ((a1 - 107) <= 0x37)
  {
    if ((_DWORD)a1 == 125)
      v2 = 4294966686;
    else
      v2 = 4294956486;
    goto LABEL_6;
  }
  if ((int)a1 > 44)
  {
    if ((int)a1 > 68)
    {
      if ((_DWORD)a1 == 69)
      {
LABEL_21:
        v2 = 4294967262;
        goto LABEL_6;
      }
      if ((_DWORD)a1 != 78)
      {
        if ((_DWORD)a1 == 80)
        {
LABEL_20:
          v2 = 4294962296;
          goto LABEL_6;
        }
        goto LABEL_25;
      }
    }
    else if ((_DWORD)a1 != 45)
    {
      if ((_DWORD)a1 == 63)
      {
        v2 = 4294967259;
        goto LABEL_6;
      }
      if ((_DWORD)a1 == 66)
      {
LABEL_16:
        v2 = 4294967249;
        goto LABEL_6;
      }
LABEL_25:
      v2 = 4294967260;
      goto LABEL_6;
    }
    v2 = 4294967292;
    goto LABEL_6;
  }
  v2 = a1;
  switch((int)a1)
  {
    case -1:
      if (*__error() == -1)
        goto LABEL_25;
      v5 = __error();
      v2 = _LSGetOSStatusFromPOSIXErrorCode(*v5);
      break;
    case 0:
      break;
    case 1:
      v2 = 4294967242;
      break;
    case 2:
      v2 = 4294967253;
      break;
    case 9:
      v2 = 4294967245;
      break;
    case 12:
    case 23:
      v2 = 4294967255;
      break;
    case 13:
      goto LABEL_20;
    case 16:
      goto LABEL_16;
    case 17:
      v2 = 4294967248;
      break;
    case 20:
      v2 = 4294967176;
      break;
    case 22:
      v2 = 4294967246;
      break;
    case 24:
      v2 = 4294967254;
      break;
    case 28:
      goto LABEL_21;
    case 30:
      v2 = 4294967235;
      break;
    default:
      goto LABEL_25;
  }
LABEL_6:
  _LSErrorLog();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    v6[0] = 67109634;
    v6[1] = v1;
    v7 = 2082;
    v8 = strerror(v1);
    v9 = 2048;
    v10 = (int)v2;
    _os_log_debug_impl(&dword_182882000, v3, OS_LOG_TYPE_DEBUG, "Converted POSIX error %i (%{public}s) to OSStatus %li", (uint8_t *)v6, 0x1Cu);
  }

  return v2;
}

void sub_182978574(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _LSGetOSStatusFromNSError(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  _BOOL4 v23;
  void *v24;
  NSObject *v25;
  NSObject *v26;
  int v28;
  void *v29;
  __int16 v30;
  NSObject *v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  void *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    v4 = 4294956486;
    goto LABEL_31;
  }
  objc_msgSend(v1, "domain");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v2, "code");
  objc_msgSend(v2, "userInfo");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v3, "isEqual:", *MEMORY[0x1E0CB2F90]))
  {
    if (!objc_msgSend(v3, "isEqual:", *MEMORY[0x1E0CB2FE0]))
    {
      if ((unint64_t)(v4 - 4096) > 0x80)
      {
        if (v4 == 4 && (objc_msgSend(v3, "isEqual:", *MEMORY[0x1E0CB28A8]) & 1) != 0)
        {
          v4 = 4294967253;
          goto LABEL_22;
        }
      }
      else if (objc_msgSend(v3, "isEqual:", *MEMORY[0x1E0CB28A8]))
      {
        _LSErrorLog();
        v6 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
          _LSGetOSStatusFromNSError_cold_2((uint64_t)v2, v6, v7, v8, v9, v10, v11, v12);

        v4 = 4294956474;
        goto LABEL_22;
      }
      objc_msgSend(v5, "objectForKeyedSubscript:", *MEMORY[0x1E0CB3388]);
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = (void *)v13;
      if (v13 && (void *)v13 != v2 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
      {
        v4 = _LSGetOSStatusFromNSError(v14);
      }
      else
      {
        _LSErrorLog();
        v15 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
          _LSGetOSStatusFromNSError_cold_3((uint64_t)v2, v15, v16, v17, v18, v19, v20, v21);

        v4 = 4294956486;
      }

      goto LABEL_22;
    }
    v4 = _LSGetOSStatusFromPOSIXErrorCode(v4);
  }
LABEL_22:
  _LSErrorLog();
  v22 = objc_claimAutoreleasedReturnValue();
  v23 = os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG);

  if (v23)
  {
    objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("_LSFunction"));
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    if (v24)
    {
      objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("_LSLine"));
      v25 = objc_claimAutoreleasedReturnValue();
      _LSErrorLog();
      v26 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
      {
        v28 = 138544130;
        v29 = v24;
        v30 = 2114;
        v31 = v25;
        v32 = 2048;
        v33 = (int)v4;
        v34 = 2114;
        v35 = v2;
        _os_log_debug_impl(&dword_182882000, v26, OS_LOG_TYPE_DEBUG, "Launch Services constructed an error at %{public}@:%{public}@, translating to OSStatus %li: %{public}@", (uint8_t *)&v28, 0x2Au);
      }

    }
    else
    {
      _LSErrorLog();
      v25 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
        _LSGetOSStatusFromNSError_cold_1();
    }

  }
LABEL_31:

  return v4;
}

void sub_182978884(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void _LSParseLoadCommands()
{
  int v0;
  _BYTE *v1;
  _BYTE *v2;
  __CFDictionary *v3;
  __CFDictionary *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  id v8;
  id v9;
  uint64_t v10;
  size_t v11;
  ssize_t v12;
  uint32_t magic;
  int v14;
  int v15;
  mach_header *v16;
  unsigned int v17;
  uint64_t cputype;
  unsigned int *p_cpusubtype;
  unsigned int *v20;
  unsigned int v21;
  const mach_header *v22;
  mach_header *v23;
  mach_header *v24;
  uint64_t v25;
  CFStringRef v26;
  CFNumberRef v27;
  _QWORD v28[3];
  int v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  int v37;
  _OWORD v38[2];
  __int128 v39;
  __int128 v40;
  mach_header v41;
  uint64_t v42;

  v0 = MEMORY[0x1E0C80A78]();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v7 = v0;
  v42 = *MEMORY[0x1E0C80C00];
  v9 = v8;
  lseek(v7, 0, 0);
  if ((unint64_t)v6 >= 0x2000)
    v10 = 0x2000;
  else
    v10 = v6;
  if (v6 <= 0)
    v11 = 0x2000;
  else
    v11 = v10;
  v12 = read(v7, &v41, v11);
  if (v12 < 28)
  {
    v15 = handleWeirdHeaderTypes((unsigned __int8 *)&v41, v12, v4, v9);
    if (v2 && !v15)
      *v2 = 1;
    goto LABEL_53;
  }
  magic = v41.magic;
  if ((int)v41.magic <= -805638659)
  {
    if (v41.magic != -1095041334 && v41.magic != -889275714)
    {
      v14 = -822415874;
LABEL_42:
      if (v41.magic == v14)
      {
        CFDictionaryAddValue(v4, CFSTR("LSExecutableFormat"), CFSTR("LSExecutableMachOFormat"));
        appendSliceForCPUTypeSubtype(v9, bswap32(v41.cputype), bswap32(v41.cpusubtype));
        v16 = &v41;
        goto LABEL_44;
      }
      handleWeirdHeaderTypes((unsigned __int8 *)&v41, v12, v4, v9);
      goto LABEL_53;
    }
    CFDictionaryAddValue(v4, CFSTR("LSExecutableFormat"), CFSTR("LSExecutableMachOFormat"));
    v17 = bswap32(v41.cputype);
    if (magic == -1095041334)
      cputype = v17;
    else
      cputype = v41.cputype;
    if (!(_DWORD)cputype)
      goto LABEL_53;
    v16 = 0;
    p_cpusubtype = (unsigned int *)&v41.cpusubtype;
    v20 = (unsigned int *)((char *)&v39 + v12 + 12);
    while (1)
    {
      if (p_cpusubtype > v20)
      {
LABEL_39:
        if (!v16)
          goto LABEL_53;
LABEL_44:
        v34 = 0;
        v35 = &v34;
        v36 = 0x2020000000;
        v37 = 0;
        v30 = 0;
        v31 = &v30;
        v32 = 0x2020000000;
        v33 = 0;
        v28[0] = 0;
        v28[1] = v28;
        v28[2] = 0x2020000000;
        v29 = 0;
        dyld_get_active_platform();
        dyld_get_image_versions();
        v25 = *((unsigned int *)v31 + 6);
        if ((_DWORD)v25)
        {
          v39 = 0u;
          v40 = 0u;
          _LSMakeVersionNumberFromDYLDVersion(v25, &v39);
          v38[0] = v39;
          v38[1] = v40;
          v26 = _LSVersionNumberCopyStringRepresentation(v38);
          if (v26)
          {
            CFDictionarySetValue(v4, CFSTR("LSExecutableSDKVersion"), v26);
            CFRelease(v26);
          }
        }
        if (*((_DWORD *)v35 + 6))
        {
          v27 = CFNumberCreate(0, kCFNumberSInt32Type, v35 + 3);
          if (v27)
          {
            CFDictionarySetValue(v4, CFSTR("LSExecutablePlatformKey"), v27);
            CFRelease(v27);
          }
        }
        if (v16 != &v41)
          free(v16);
        _Block_object_dispose(v28, 8);
        _Block_object_dispose(&v30, 8);
        _Block_object_dispose(&v34, 8);
        goto LABEL_53;
      }
      v21 = p_cpusubtype[2];
      if (magic == -889275714)
      {
        appendSliceForCPUTypeSubtype(v9, *p_cpusubtype, p_cpusubtype[1]);
      }
      else
      {
        appendSliceForCPUTypeSubtype(v9, bswap32(*p_cpusubtype), bswap32(p_cpusubtype[1]));
        v21 = bswap32(v21);
      }
      v22 = (const mach_header *)mallocMachHeader(v7, v21);
      v23 = (mach_header *)v22;
      if (v22)
      {
        if ((v22->magic & 0xFFFFFFFE) == 0xFEEDFACE)
          addUUID(v22, v4);
        if (v16)
        {
          if ((v16->magic & 0xFFFFFFFE) == 0xFEEDFACE)
          {
            v24 = v23;
            if (v16 == v23)
              goto LABEL_38;
          }
          else
          {
            v24 = v16;
            v16 = v23;
          }
          free(v24);
        }
        else
        {
          v16 = v23;
        }
      }
LABEL_38:
      p_cpusubtype += 5;
      if (!--cputype)
        goto LABEL_39;
    }
  }
  if (v41.magic + 17958194 >= 2)
  {
    v14 = -805638658;
    goto LABEL_42;
  }
  CFDictionaryAddValue(v4, CFSTR("LSExecutableFormat"), CFSTR("LSExecutableMachOFormat"));
  appendSliceForCPUTypeSubtype(v9, v41.cputype, v41.cpusubtype);
  v16 = &v41;
  if (machHeaderSize(&v41) <= (unint64_t)v12 || (v16 = (mach_header *)mallocMachHeader(v7, 0)) != 0)
  {
    addUUID(v16, v4);
    goto LABEL_44;
  }
LABEL_53:

}

void sub_182978D5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void appendSliceForCPUTypeSubtype(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  NSObject *v6;
  LSSliceInfo *v7;
  NSObject *v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  if (!v5)
    goto LABEL_16;
  if ((int)a2 > 16777222)
  {
    if (((a2 - 16777223) > 0xB || ((1 << (a2 - 7)) & 0x821) == 0) && (_DWORD)a2 != 33554444)
    {
LABEL_10:
      _LSDefaultLog();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        v9 = 134218240;
        v10 = (int)a2;
        v11 = 2048;
        v12 = (int)a3;
        _os_log_impl(&dword_182882000, v6, OS_LOG_TYPE_DEFAULT, "LaunchServices: CPU type %lu (subtype %lu) not recognized", (uint8_t *)&v9, 0x16u);
      }

      goto LABEL_16;
    }
LABEL_15:
    v7 = -[LSSliceInfo initWithType:subtype:]([LSSliceInfo alloc], "initWithType:subtype:", a2, a3);
    objc_msgSend(v5, "addObject:", v7);

    goto LABEL_16;
  }
  if ((_DWORD)a2 == 7)
    goto LABEL_15;
  if ((_DWORD)a2 != 12)
  {
    if ((_DWORD)a2 != 18)
      goto LABEL_10;
    goto LABEL_15;
  }
  if (a3 <= 0x10 && ((1 << a3) & 0x1DE40) != 0)
    goto LABEL_15;
  _LSDefaultLog();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = 134217984;
    v10 = (int)a3;
    _os_log_impl(&dword_182882000, v8, OS_LOG_TYPE_DEFAULT, "LaunchServices: ARM CPU subtype %lu not recognized", (uint8_t *)&v9, 0xCu);
  }

LABEL_16:
}

void sub_182978F98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t machHeaderSize(const mach_header *a1)
{
  uint64_t result;
  uint32_t magic;
  uint64_t sizeofcmds;
  uint64_t v5;

  result = 0;
  magic = a1->magic;
  if ((int)a1->magic <= -17958195)
  {
    if (magic != -822415874)
    {
      if (magic == -805638658)
      {
        sizeofcmds = bswap32(a1->sizeofcmds);
        return sizeofcmds + 32;
      }
      return result;
    }
    v5 = bswap32(a1->sizeofcmds);
    return v5 + 28;
  }
  if (magic == -17958193)
  {
    sizeofcmds = a1->sizeofcmds;
    return sizeofcmds + 32;
  }
  if (magic == -17958194)
  {
    v5 = a1->sizeofcmds;
    return v5 + 28;
  }
  return result;
}

void *mallocMachHeader(int a1, off_t a2)
{
  size_t v4;
  ssize_t v5;
  void *v6;
  mach_header __buf;

  if (pread(a1, &__buf, 0x1CuLL, a2) != 28)
    return 0;
  v4 = machHeaderSize(&__buf);
  if (!v4)
    return 0;
  v5 = v4;
  v6 = malloc_type_malloc(v4, 0x2E4897F8uLL);
  if (v6 && pread(a1, v6, v5, a2) < v5)
  {
    free(v6);
    return 0;
  }
  return v6;
}

void addUUID(const mach_header *a1, __CFDictionary *a2)
{
  uint64_t ncmds;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  const unsigned __int8 *v8;
  uint64_t i;
  uint64_t v10;
  const __CFAllocator *v12;
  CFStringRef v13;
  CFStringRef v14;
  const __CFArray *Value;
  const __CFArray *v16;
  CFTypeID v17;
  CFIndex Count;
  __CFArray *MutableCopy;
  __CFArray *v20;
  _BYTE v21[37];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  ncmds = a1->ncmds;
  v5 = machHeaderSize(a1);
  if (a1->magic == -17958194)
  {
    v6 = 28;
    if (!(_DWORD)ncmds)
      return;
  }
  else
  {
    if (a1->magic != -17958193)
      return;
    v6 = 32;
    if (!(_DWORD)ncmds)
      return;
  }
  v7 = (char *)a1 + v5;
  v8 = (const unsigned __int8 *)a1 + v6;
  for (i = ncmds - 1; ; --i)
  {
    if (v8 + 8 >= (const unsigned __int8 *)v7)
      return;
    v10 = *((unsigned int *)v8 + 1);
    if (*(_DWORD *)v8 == 27)
      break;
    v8 += v10;
    if (v8 >= (const unsigned __int8 *)v7 || i == 0)
      return;
  }
  if (&v8[v10] < (const unsigned __int8 *)v7)
  {
    memset(v21, 0, sizeof(v21));
    uuid_unparse_upper(v8 + 8, v21);
    v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v13 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v21, 0x8000100u);
    if (v13)
    {
      v14 = v13;
      if (CFDictionaryContainsKey(a2, CFSTR("MachOUUIDs")))
      {
        Value = (const __CFArray *)CFDictionaryGetValue(a2, CFSTR("MachOUUIDs"));
        if (!Value || (v16 = Value, v17 = CFGetTypeID(Value), v17 != CFArrayGetTypeID()))
        {
LABEL_24:
          CFRelease(v14);
          return;
        }
        Count = CFArrayGetCount(v16);
        MutableCopy = CFArrayCreateMutableCopy(v12, Count + 1, v16);
      }
      else
      {
        MutableCopy = CFArrayCreateMutable(v12, 1, MEMORY[0x1E0C9B378]);
      }
      v20 = MutableCopy;
      if (MutableCopy)
      {
        CFArrayAppendValue(MutableCopy, v14);
        CFDictionarySetValue(a2, CFSTR("MachOUUIDs"), v20);
        CFRelease(v20);
      }
      goto LABEL_24;
    }
  }
}

uint64_t handleWeirdHeaderTypes(unsigned __int8 *a1, unint64_t a2, __CFDictionary *a3, void *a4)
{
  id v7;
  uint64_t v8;
  int v9;

  v7 = a4;
  v8 = 0;
  if (a1 && a3)
  {
    if (a2 < 4)
    {
      if (a2 < 2)
        goto LABEL_16;
      v9 = *a1;
    }
    else
    {
      v9 = *a1;
      if (v9 == 74)
      {
        if (a1[1] == 111 && a1[2] == 121 && a1[3] == 33)
        {
          CFDictionaryAddValue(a3, CFSTR("LSExecutableFormat"), CFSTR("LSExecutableCFMFormat"));
          if (v7)
            appendSliceForCPUTypeSubtype(v7, 18, 0);
          goto LABEL_15;
        }
        goto LABEL_16;
      }
    }
    if (v9 == 35 && a1[1] == 33)
    {
      CFDictionaryAddValue(a3, CFSTR("LSExecutableFormat"), CFSTR("LSExecutable#!Format"));
LABEL_15:
      v8 = 1;
      goto LABEL_17;
    }
LABEL_16:
    v8 = 0;
  }
LABEL_17:

  return v8;
}

void sub_1829793B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void _LSAddExecutableFormatInfo()
{
  void *v0;
  __CFDictionary *v1;
  __CFDictionary *v2;
  int v3;
  int v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  int v10;
  int v11;
  int v12;
  int v13;
  size_t v14;
  id v15;
  const __CFString *Value;
  CFTypeID TypeID;
  uint64_t v18;
  char v19;
  char v20[1024];
  _BYTE __buf[8192];
  uint64_t v22;

  v0 = (void *)MEMORY[0x1E0C80A78]();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v22 = *MEMORY[0x1E0C80C00];
  v7 = v0;
  v8 = v6;
  v19 = 0;
  v9 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v10 = _LSGetBundleClassForHFSType(v4);
  if (v4 == 1095782476 || v10 != 2)
  {
    if (objc_msgSend(v7, "getFileSystemRepresentation:error:", v20, 0))
    {
      v18 = 0;
      v11 = open(v20, 0, 511);
      if (v11 < 0 || ((v12 = objc_msgSend(v7, "getLength:error:", &v18, 0), v18) ? (v13 = v12) : (v13 = 0), v13 != 1))
      {
        v19 = 1;
        CFDictionaryAddValue(v2, CFSTR("_LSNoExecutableInfo"), (const void *)*MEMORY[0x1E0C9AE50]);
        if (v11 < 0)
          goto LABEL_23;
      }
      else
      {
        fcntl(v11, 48, 1);
        _LSParseLoadCommands();
        if (v18 >= 0x2000)
          v14 = 0x2000;
        else
          v14 = v18;
        if (pread(v11, __buf, v14, 0) >= 28)
        {
          v15 = v8;
          if (v2
            && (Value = (const __CFString *)CFDictionaryGetValue(v2, CFSTR("DTPlatformName"))) != 0
            && (TypeID = CFStringGetTypeID(), TypeID == CFGetTypeID(Value))
            && (CFStringCompare(Value, CFSTR("iphonesimulator"), 1uLL) == kCFCompareEqualTo
             || CFStringCompare(Value, CFSTR("appletvsimulator"), 1uLL) == kCFCompareEqualTo
             || CFStringCompare(Value, CFSTR("watchsimulator"), 1uLL) == kCFCompareEqualTo))
          {

            CFDictionaryAddValue(v2, CFSTR("_LSRequiresIPhoneSimulator"), (const void *)*MEMORY[0x1E0C9AE50]);
          }
          else
          {

          }
        }
      }
      close(v11);
    }
  }
  else
  {
    CFDictionaryAddValue(v2, CFSTR("LSExecutableFormat"), CFSTR("LSExecutableCFMFormat"));
    appendSliceForCPUTypeSubtype(v9, 18, 0);
  }
LABEL_23:
  CFDictionaryAddValue(v2, CFSTR("_LSSliceInfosKey"), v9);

}

void sub_1829796A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t _LSExtensionPointAdd(void *a1, _DWORD *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  uint8_t v9[16];
  uint8_t buf[16];

  v3 = a1;
  v4 = v3;
  if (!v3 || !*((_QWORD *)v3 + 1))
  {
LABEL_12:
    v5 = 0;
    goto LABEL_13;
  }
  *a2 = (int)CFAbsoluteTimeGetCurrent();
  v5 = CSStoreAllocUnitWithData();
  if (!(_DWORD)v5)
  {
    _LSDefaultLog();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_182882000, v7, OS_LOG_TYPE_DEFAULT, "Failed to allocate store unit with extension point data", v9, 2u);
    }

    goto LABEL_12;
  }
  if (_LSBindableActivate(v4, v5))
  {
    _LSDefaultLog();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_182882000, v6, OS_LOG_TYPE_DEFAULT, "Failed to activate binding for extension point data, this extension point will not be found", buf, 2u);
    }

  }
  _LSDatabaseCommit((uint64_t)v4);
LABEL_13:

  return v5;
}

void sub_182979830(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _LSExtensionPointComparePriority_BindableComparitor(void *a1, int a2, int a3)
{
  id v5;
  const LSExtensionPointData *v6;
  _LSDatabase *v7;
  uint64_t v8;

  v5 = a1;
  v6 = (const LSExtensionPointData *)_LSGetExtensionPointData((uint64_t)v5, a2);
  v7 = (_LSDatabase *)_LSGetExtensionPointData((uint64_t)v5, a3);
  v8 = _LSExtensionPointComparePriority(v7, v6, (const LSExtensionPointData *)v7);

  return v8;
}

void sub_1829798AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void _LSExtensionPointRemove(void *a1, int a2)
{
  uint64_t Unit;
  int v4;
  _QWORD *v5;

  v5 = a1;
  if (v5 && a2 && v5[1])
  {
    Unit = CSStoreGetUnit();
    if (Unit)
    {
      _LSBindableDeactivate(v5, a2);
      _CSStringRelease();
      _CSStringRelease();
      _LSPlistRemove((uint64_t)v5, *(_DWORD *)(Unit + 48));
      v4 = *(_DWORD *)(Unit + 52);
      if (v4)
        _LSAliasRemove(v5, v4);
      CSStoreFreeUnit();
    }
    _LSDatabaseCommit((uint64_t)v5);
  }

}

void sub_1829799CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t _LSExtensionPointComparePriority(_LSDatabase *a1, const LSExtensionPointData *a2, const LSExtensionPointData *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  char v7;
  _OWORD v9[2];
  _OWORD v10[2];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (a2 == a3)
    return 0;
  if (!a2)
    return -1;
  if (!a3)
    return 1;
  v3 = *(_OWORD *)&a2->var2._opaque[16];
  v13 = *(_OWORD *)a2->var2._opaque;
  v14 = v3;
  v4 = *(_OWORD *)&a3->var2._opaque[16];
  v11 = *(_OWORD *)a3->var2._opaque;
  v12 = v4;
  v5 = *(_OWORD *)&a2->var2._opaque[16];
  v17 = *(_OWORD *)a2->var2._opaque;
  v18 = v5;
  v15 = kLSVersionNumberNull;
  v16 = *(_OWORD *)algn_1829FAD90;
  if (!_LSVersionNumberCompare(&v17, &v15))
    return -1;
  v17 = v11;
  v18 = v12;
  v15 = kLSVersionNumberNull;
  v16 = *(_OWORD *)algn_1829FAD90;
  if (!_LSVersionNumberCompare(&v17, &v15))
    return 1;
  v10[0] = v13;
  v10[1] = v14;
  v9[0] = v11;
  v9[1] = v12;
  v6 = _LSVersionNumberCompare(v10, v9);
  v7 = v6 == 1;
  if (v6 == -1)
    return -1;
  return v7;
}

uint64_t _LSExtensionPointFindWithIdentifier(void *a1, const __CFString *a2, uint64_t a3, uint64_t a4, _DWORD *a5, _QWORD *a6)
{
  id v11;
  uint64_t StringForCFString;
  uint64_t v13;

  v11 = a1;
  StringForCFString = _LSDatabaseGetStringForCFString(v11, a2, 0);
  v13 = _LSExtensionPointFindWithStringID(v11, StringForCFString, a3, a4, a5, a6);

  return v13;
}

void sub_182979B64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _LSExtensionPointUnregisterUnderFrameworkURL(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  int *v7;
  int *v8;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  __n128 (*v13)(__n128 *, __n128 *);
  void (*v14)(uint64_t);
  const char *v15;
  void *__p;
  void *v17;
  uint64_t v18;

  v3 = a1;
  v4 = a2;
  v10 = 0;
  v11 = &v10;
  v12 = 0x4812000000;
  v13 = __Block_byref_object_copy__3;
  v14 = __Block_byref_object_dispose__4;
  v15 = "";
  __p = 0;
  v17 = 0;
  v18 = 0;
  v5 = v3;
  v6 = v4;
  _CSStoreEnumerateUnits();
  v7 = (int *)v11[6];
  v8 = (int *)v11[7];
  while (v7 != v8)
    _LSExtensionPointRemove(v5, *v7++);

  _Block_object_dispose(&v10, 8);
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }

  return 0;
}

void sub_182979D80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  void *v23;
  void *v24;

  _Block_object_dispose(&a16, 8);
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__3(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_182979F20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void _LSExtensionPointGetVisualizationFunctions(id (**a1)(LaunchServices::ExtensionPoints *this, LSContext *a2, int a3)@<X8>)
{
  *a1 = LaunchServices::ExtensionPoints::getSummary;
  a1[1] = (id (*)(LaunchServices::ExtensionPoints *, LSContext *, int))LaunchServices::ExtensionPoints::display;
  a1[2] = 0;
}

id LaunchServices::ExtensionPoints::getSummary(LaunchServices::ExtensionPoints *this, LSContext *a2, int a3)
{
  void *v3;

  v3 = (void *)_LSGetExtensionPointData(*(_QWORD *)this, a3);
  if (v3)
  {
    v3 = (void *)_CSStringCopyCFString();
    if (!v3)
      v3 = (void *)_CSStringCopyCFString();
  }
  return v3;
}

BOOL LaunchServices::ExtensionPoints::display(LaunchServices::ExtensionPoints *this, LSContext *a2, int a3, CSStore2::AttributedStringWriter *a4, LaunchServices::DumpWriter *a5)
{
  int *v7;
  int v8;
  const __CFString *v9;
  __CFString *v10;
  NSString *v11;
  int v12;
  __CFString *v13;
  NSString *v14;
  int v15;
  const __CFString *v16;
  __CFString *v17;
  NSString *v18;

  v7 = (int *)_LSGetExtensionPointData(*(_QWORD *)this, a3);
  if (v7)
  {
    CSStore2::AttributedStringWriter::string(a4, CFSTR("Extension Point ID"));
    LaunchServices::DumpWriter::platform(a4, CFSTR("Platform"), v7[11]);
    v8 = v7[15];
    v9 = CFSTR("internal");
    if (v8 == 1)
      v9 = CFSTR("public");
    if (v8 == 2)
      v10 = CFSTR("3rd party");
    else
      v10 = (__CFString *)v9;
    v11 = v10;
    CSStore2::AttributedStringWriter::string(a4, CFSTR("Type"), v11);

    CSStore2::AttributedStringWriter::string(a4, CFSTR("Name"));
    v12 = v7[14];
    if (v12)
    {
      CSStore2::AttributedStringWriter::link(a4, *(unsigned int *)(*(_QWORD *)this + 20), v7[14], 0);
      v13 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v13 = CFSTR("no parent provided");
    }
    CSStore2::AttributedStringWriter::string(a4, CFSTR("Parent Bundle ID"), &v13->isa);
    if (v12)

    CSStore2::AttributedStringWriter::link(a4, *(unsigned int *)(*(_QWORD *)this + 1600), v7[13], 0);
    v14 = (NSString *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::string(a4, CFSTR("declaringFramework"), v14);

    v15 = v7[16];
    v16 = CFSTR("deny");
    if (v15 == 2)
      v16 = CFSTR("prompt-host-personality");
    if (v15 == 1)
      v17 = CFSTR("prompt-container-personality");
    else
      v17 = (__CFString *)v16;
    v18 = v17;
    CSStore2::AttributedStringWriter::string(a4, CFSTR("TCC Policy"), v18);

    CSStore2::AttributedStringWriter::timestamp(a4, CFSTR("reg date"), (double)*v7);
    CSStore2::AttributedStringWriter::beginFlags(a4, CFSTR("extension point flags"));
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::endFlags(a4);
    CSStore2::AttributedStringWriter::childUnit(a4, CFSTR("SDKDict"));
  }
  return v7 != 0;
}

void sub_18297A1F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_7(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 8u);
}

void sub_18297A554(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18297A5E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_18297A788(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18297A858(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18297A8D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18297A950(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18297A9B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18297AA04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18297AA7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18297AC48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_18297AD20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18297AE00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18297AF2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZL12getEPFromLSDP8NSStringjPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

uint64_t LSInit(int a1)
{
  uint64_t result;
  __int16 v2;
  NSObject *v3;
  NSObject *v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (a1 == 1)
    return 4294967292;
  v2 = a1;
  if ((a1 & 0x400) == 0 || (result = _LSValidateDatabase(0), !(_DWORD)result))
  {
    if ((v2 & 0x20) != 0)
    {
      gLogRegistrationErrors = 1;
      if ((v2 & 0x40) == 0)
      {
LABEL_7:
        if ((v2 & 0x10) == 0)
          goto LABEL_8;
        goto LABEL_12;
      }
    }
    else if ((v2 & 0x40) == 0)
    {
      goto LABEL_7;
    }
    objc_msgSend((id)__LSDefaultsGetSharedInstance(), "setHasServer:", 0);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 0x100) == 0)
        goto LABEL_16;
      goto LABEL_13;
    }
LABEL_12:
    _LSResetServer();
    if ((v2 & 0x100) == 0)
    {
LABEL_16:
      if ((v2 & 0x80) != 0)
      {
        _LSDefaultLog();
        v4 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          v5 = _CFGetEUID();
          v6 = 134217984;
          v7 = v5;
          _os_log_impl(&dword_182882000, v4, OS_LOG_TYPE_DEFAULT, "LaunchServices: Completed database seeding for uid %lli", (uint8_t *)&v6, 0xCu);
        }

        _LSSetDatabaseIsSeeded(1);
      }
      return 0;
    }
LABEL_13:
    _LSDefaultLog();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v6 = 134217984;
      v7 = _CFGetEUID();
      _os_log_impl(&dword_182882000, v3, OS_LOG_TYPE_DEFAULT, "LaunchServices: Begin database seeding for uid %lli", (uint8_t *)&v6, 0xCu);
    }

    _LSSetDatabaseIsSeeded(0);
    goto LABEL_16;
  }
  return result;
}

void sub_18297B150(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

OSStatus LSRegisterURL(CFURLRef inURL, Boolean inUpdate)
{
  int v2;
  void *v4;
  id v5;
  void *v6;
  OSStatus v7;
  id v9;

  v2 = inUpdate;
  v4 = (void *)MEMORY[0x186DAE7A0]();
  v9 = 0;
  LOBYTE(inURL) = _LSRegisterBundleURL(0, inURL, (v2 != 0) | 0x8000000, 0, &v9);
  v5 = v9;
  v6 = v5;
  if ((inURL & 1) != 0)
    v7 = 0;
  else
    v7 = _LSGetOSStatusFromNSError(v5);

  objc_autoreleasePoolPop(v4);
  return v7;
}

void sub_18297B20C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _LSGetStatus()
{
  void *v0;
  void *v1;
  uint64_t v2;
  _QWORD v4[5];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v8 = 0;
  v0 = (void *)MEMORY[0x186DAE7A0]();
  +[_LSDService synchronousXPCProxyWithErrorHandler:]((uint64_t)_LSDReadService, 0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = ___LSGetStatus_block_invoke;
  v4[3] = &unk_1E10440C8;
  v4[4] = &v5;
  objc_msgSend(v1, "getServerStatusWithCompletionHandler:", v4);

  objc_autoreleasePoolPop(v0);
  v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_18297B2D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _LSValidateDatabase(const char *a1)
{
  BOOL v1;
  id v2;
  void *v3;
  uint64_t v4;
  id v6;
  void *v7;

  v7 = 0;
  if (a1)
  {
    v6 = 0;
    v1 = _LSContextInitWithPath(&v7, (uint64_t)a1, &v6);
    v2 = v6;
    v3 = v2;
    if (v1)
      v4 = 0;
    else
      v4 = _LSGetOSStatusFromNSError(v2);

  }
  else
  {
    v4 = _LSContextInit(&v7);
  }
  if (!(_DWORD)v4)
  {
    if (_CSStoreValidate())
      v4 = 0;
    else
      v4 = 4294957805;
    _LSContextDestroy(&v7);
  }

  return v4;
}

void sub_18297B3D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

__CFSet *_LSCreatePackageExtensionsArray(const __CFAllocator *a1)
{
  __CFSet *v2;
  LSContext v4;

  v4.db = 0;
  if (_LSContextInit((id *)&v4.db))
  {
    v2 = 0;
  }
  else
  {
    v2 = _LSCreatePackageExtensionsArrayForContext(a1, &v4);
    _LSContextDestroy((void **)&v4.db);
  }

  return v2;
}

void sub_18297B450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

__CFSet *_LSCreatePackageExtensionsArrayForContext(const __CFAllocator *a1, LSContext *a2)
{
  __CFSet *result;
  __CFSet *v4;
  CFArrayRef v5;

  result = _LSCopyPackageExtensions(a2);
  if (result)
  {
    v4 = result;
    v5 = XCFArrayCreateWithSet(a1, result, MEMORY[0x1E0C9B378]);
    CFRelease(v4);
    return v5;
  }
  return result;
}

uint64_t _LSUnregisterPluginsInDirectory(const __CFURL *a1)
{
  uint64_t v2;
  const __CFArray *v3;
  const __CFArray *v4;
  CFIndex Count;
  CFIndex v6;
  void *ValueAtIndex;
  void *v9;

  v9 = 0;
  v2 = _LSContextInit(&v9);
  if (!(_DWORD)v2)
  {
    if (a1 && (v3 = (const __CFArray *)_LSCopyPluginsWithURL((uint64_t)&v9, a1), (v4 = v3) != 0))
    {
      Count = CFArrayGetCount(v3);
      if (Count < 1)
      {
        v2 = 0;
      }
      else
      {
        v6 = 0;
        v2 = 0;
        do
        {
          ValueAtIndex = (void *)CFArrayGetValueAtIndex(v4, v6);
          if (ValueAtIndex)
            v2 = _LSUnregisterPlugin(&v9, objc_msgSend(ValueAtIndex, "unsignedLongLongValue"));
          ++v6;
        }
        while (Count != v6);
      }
      CFRelease(v4);
    }
    else
    {
      v2 = 0;
    }
    _LSContextDestroy(&v9);
  }

  return v2;
}

void sub_18297B588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

uint64_t _LSSetDefaultWebBrowserWithBundleIdentifierAndVersion(uint64_t a1, __CFString *a2)
{
  const audit_token_t *v4;
  int v5;
  int v6;
  uint64_t result;
  _OWORD v8[2];
  _OWORD v9[2];
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v4 = (const audit_token_t *)_LSGetAuditTokenForSelf();
  v5 = _LSCheckEntitlementForChangingDefaultHandler(v4, (uint64_t)CFSTR("http"), 0);
  v6 = v5;
  if (a1)
  {
    v10 = 0u;
    v11 = 0u;
    if (a2)
    {
      _LSGetVersionFromString(a2, &v10);
      if (!v6)
        return 4294967242;
      goto LABEL_9;
    }
    v10 = kLSVersionNumberNull;
    v11 = *(_OWORD *)algn_1829FAD90;
    if (v5)
    {
LABEL_9:
      v9[0] = v10;
      v9[1] = v11;
      result = _LSSetSchemeHandler((uint64_t)CFSTR("http"), a1, v9);
      if (!(_DWORD)result)
      {
        v8[0] = v10;
        v8[1] = v11;
        return _LSSetSchemeHandler((uint64_t)CFSTR("https"), a1, v8);
      }
      return result;
    }
    return 4294967242;
  }
  if (!v5)
    return 4294967242;
  result = _LSRemoveSchemeHandler((uint64_t)CFSTR("http"));
  if (!(_DWORD)result)
    return _LSRemoveSchemeHandler((uint64_t)CFSTR("https"));
  return result;
}

const __CFData *_LSAdvertisementBytesKind(const __CFData *result)
{
  const __CFData *v1;
  char *v2;

  if (result)
  {
    v1 = result;
    if (CFDataGetLength(result) >= 7)
    {
      v2 = (char *)&loc_18297B734 + 4 * byte_1829FAB40[*CFDataGetBytePtr(v1) >> 6];
      __asm { BR              X10 }
    }
    return 0;
  }
  return result;
}

void sub_18297B79C()
{
  JUMPOUT(0x18297B790);
}

void sub_18297B7A4()
{
  JUMPOUT(0x18297B790);
}

uint64_t _LSDebugAdvertismentValue(const __CFData *a1)
{
  return CFDataGetBytePtr(a1)[6];
}

CFStringRef _LSCreateDatabaseLookupStringFromHashedBytesForAdvertising(const __CFData *a1)
{
  char *v2;
  int v3;
  const __CFString *v4;
  const __CFString *v5;
  const __CFAllocator *v6;
  CFStringRef result;
  int v8;

  if (!a1 || CFDataGetLength(a1) < 7)
    return 0;
  switch((unint64_t)_LSAdvertisementBytesKind(a1))
  {
    case 1uLL:
      v2 = "ua-";
      return createDatabaseStringFromHashedBytes(v2, a1);
    case 2uLL:
      v2 = "dns-";
      return createDatabaseStringFromHashedBytes(v2, a1);
    case 3uLL:
      v3 = CFDataGetBytePtr(a1)[6];
      v4 = CFSTR("com.apple.NowPlaying");
      if (v3 != 1)
        v4 = 0;
      if (v3 == 2)
        v5 = CFSTR("com.apple.Siri");
      else
        v5 = v4;
      if (!v5)
        return 0;
      v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      goto LABEL_20;
    case 4uLL:
      v2 = "pv-";
      return createDatabaseStringFromHashedBytes(v2, a1);
    case 5uLL:
      v8 = CFDataGetBytePtr(a1)[5] & 0xC0;
      if (v8 == 64)
      {
        v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        v5 = CFSTR("com.apple.private.handoff.pong");
      }
      else
      {
        if (v8 != 128)
          return 0;
        v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        v5 = CFSTR("com.apple.private.handoff.ping");
      }
LABEL_20:
      result = CFStringCreateCopy(v6, v5);
      break;
    default:
      return 0;
  }
  return result;
}

CFStringRef createDatabaseStringFromHashedBytes(char *a1, CFDataRef theData)
{
  const UInt8 *BytePtr;
  char *v5;
  uint64_t i;
  std::string *v7;
  CFIndex size;
  CFStringRef v9;
  std::string v11;

  if ((unint64_t)CFDataGetLength(theData) < 7)
    return 0;
  BytePtr = CFDataGetBytePtr(theData);
  if (a1)
    v5 = a1;
  else
    v5 = "";
  std::string::basic_string[abi:nn180100]<0>(&v11, v5);
  for (i = 0; i != 7; ++i)
  {
    std::string::push_back(&v11, a0123456789abcd[(unint64_t)BytePtr[i] >> 4]);
    std::string::push_back(&v11, a0123456789abcd[BytePtr[i] & 0xF]);
  }
  if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = &v11;
  else
    v7 = (std::string *)v11.__r_.__value_.__r.__words[0];
  if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v11.__r_.__value_.__r.__words[2]);
  else
    size = v11.__r_.__value_.__l.__size_;
  v9 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)v7, size, 0x8000100u, 0);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return v9;
}

void sub_18297B9F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

CFDataRef _LSCreateHashedBytesForAdvertisingFromString(uint64_t a1, CFStringRef theString)
{
  CFStringRef Copy;
  const __CFAllocator *v4;
  CFMutableStringRef MutableCopy;
  const __CFLocale *System;
  size_t v7;
  uint64_t i;
  _BYTE *v9;
  CFDataRef v10;
  char v11;
  char v12;
  char v13;
  int v14;
  char v15;
  char v16;
  _OWORD v18[4];
  char buffer[1024];
  uint64_t v20;

  Copy = theString;
  v20 = *MEMORY[0x1E0C80C00];
  if (a1 == 2 && theString)
  {
    v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, theString);
    System = CFLocaleGetSystem();
    CFStringLowercase(MutableCopy, System);
    Copy = CFStringCreateCopy(v4, MutableCopy);
    CFRelease(MutableCopy);
    if (!Copy)
      return 0;
  }
  else
  {
    if (!theString)
      return 0;
    CFRetain(theString);
  }
  if (CFStringGetCString(Copy, buffer, 1024, 0x8000100u) && (v7 = strlen(buffer), v7 - 1 <= 0x7FFFFFFD))
  {
    memset(v18, 0, sizeof(v18));
    CC_SHA512(buffer, v7, (unsigned __int8 *)v18);
    for (i = 7; i != 64; ++i)
    {
      v9 = (_BYTE *)((unint64_t)v18 | (i
                                                             - 7
                                                             * ((((i
                                                                                  - ((unsigned __int16)(37 * i) >> 8)) >> 1)
                                                               + ((37 * i) >> 8)) >> 2)));
      *v9 ^= *((_BYTE *)v18 + i);
    }
    switch(a1)
    {
      case 0:
        *(_DWORD *)((char *)v18 + 3) = 0;
        LODWORD(v18[0]) = 0;
        goto LABEL_32;
      case 1:
        v11 = v18[0];
        v12 = 0x80;
        goto LABEL_17;
      case 2:
        v11 = v18[0];
        v12 = 64;
LABEL_17:
        LOBYTE(v18[0]) = v12 & 0xC0 | v11 & 0x3F;
        goto LABEL_32;
      case 3:
        *(_DWORD *)((char *)v18 + 3) = 0;
        LODWORD(v18[0]) = 0;
        if (CFEqual(Copy, CFSTR("com.apple.Siri")))
        {
          v13 = 2;
        }
        else if (CFEqual(Copy, CFSTR("com.apple.NowPlaying")))
        {
          v13 = 1;
        }
        else if (CFEqual(Copy, CFSTR("com.apple.fetchsamplepayload")))
        {
          v13 = -1;
        }
        else
        {
          v13 = 0;
        }
        BYTE6(v18[0]) = v13;
        goto LABEL_32;
      case 4:
        LOBYTE(v18[0]) |= 0xC0u;
        goto LABEL_32;
      case 5:
        *(_DWORD *)((char *)v18 + 3) = 0;
        LODWORD(v18[0]) = 0;
        v14 = rand();
        BYTE6(v18[0]) = v14 + v14 / 255;
        if (CFEqual(Copy, CFSTR("com.apple.private.handoff.ping")))
        {
          v15 = BYTE5(v18[0]);
          v16 = 0x80;
        }
        else
        {
          if (!CFEqual(Copy, CFSTR("com.apple.private.handoff.pong")))
            goto LABEL_32;
          v15 = BYTE5(v18[0]);
          v16 = 64;
        }
        BYTE5(v18[0]) = v16 & 0xC0 | v15 & 0x3F;
LABEL_32:
        v10 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)v18, 7);
        break;
      default:
        goto LABEL_32;
    }
  }
  else
  {
    v10 = 0;
  }
  CFRelease(Copy);
  return v10;
}

uint64_t _LSCompareHashedBytesFromAdvertisingStrings(CFDataRef theData, const __CFData *a2)
{
  uint64_t result;
  unsigned int *BytePtr;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  result = -1;
  if (theData && a2)
  {
    if (CFDataGetLength(theData) < 7 || CFDataGetLength(a2) < 7)
    {
      return -1;
    }
    else
    {
      BytePtr = (unsigned int *)CFDataGetBytePtr(theData);
      v6 = (unsigned int *)CFDataGetBytePtr(a2);
      v7 = bswap32(*BytePtr);
      v8 = bswap32(*v6);
      if (v7 == v8
        && (v7 = bswap32(*(unsigned int *)((char *)BytePtr + 3)),
            v8 = bswap32(*(unsigned int *)((char *)v6 + 3)),
            v7 == v8))
      {
        return 0;
      }
      else if (v7 < v8)
      {
        return -1;
      }
      else
      {
        return 1;
      }
    }
  }
  return result;
}

CFStringRef _LSCopyAdvertisementStringForTeamIdentifierAndActivityType(const __CFAllocator *a1, const __CFString *a2, CFStringRef theString)
{
  const __CFString *v6;
  CFRange v8;

  if (!theString)
    return 0;
  v8.length = CFStringGetLength(theString);
  v8.location = 0;
  if (!CFStringFindWithOptions(theString, CFSTR("."), v8, 0, 0)
    && (CFStringHasPrefix(theString, CFSTR("NS"))
     || CFStringHasPrefix(theString, CFSTR("IN"))
     || CFEqual(theString, CFSTR("TVUserActivityTypeBrowsingChannelGuide"))))
  {
    return (CFStringRef)CFRetain(theString);
  }
  v6 = &stru_1E10473A0;
  if (a2)
  {
    if (!CFEqual(a2, CFSTR("0000000000")))
      v6 = a2;
  }
  return CFStringCreateWithFormat(a1, 0, CFSTR("%@:%@"), v6, theString);
}

uint64_t _LSCopyClaimedActivityIdentifiersAndDomains(_QWORD *a1, _QWORD *a2)
{
  _LSDServiceDomain *v4;
  void *v5;
  const __CFAllocator *v6;
  CFMutableSetRef Mutable;
  CFMutableSetRef v8;
  __CFArray *v9;
  uint64_t i;
  CFStringRef v11;
  CFArrayRef Copy;
  void *v13;
  uint64_t v14;
  void *v15;
  const __CFArray *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t j;
  id v20;
  id v21;
  CFTypeRef v22;
  CFTypeRef v23;
  const void *v24;
  const void *v25;
  uint64_t v26;
  _QWORD v28[7];
  void (*v29[5])(_QWORD, _QWORD);
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _QWORD v34[7];
  void **v35;
  id v36;
  char v37;
  id v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  int v50;
  _BYTE v51[128];
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v47 = 0;
  v48 = &v47;
  v49 = 0x2020000000;
  v50 = -10810;
  v43 = 0;
  v44 = &v43;
  v45 = 0x2020000000;
  v46 = 0;
  v39 = 0;
  v40 = &v39;
  v41 = 0x2020000000;
  v42 = 0;
  if (_LSCurrentProcessMayMapDatabase())
  {
    v38 = 0;
    v35 = 0;
    v36 = 0;
    v37 = 0;
    +[_LSDServiceDomain defaultServiceDomain]();
    v4 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
    v5 = (void *)LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)&v35, v4, 0);

    if (v5)
    {
      v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B3B0]);
      v44[3] = (uint64_t)Mutable;
      v8 = CFSetCreateMutable(v6, 0, MEMORY[0x1E0C9B3B0]);
      v40[3] = (uint64_t)v8;
      if (v44[3] && v8)
      {
        v34[0] = MEMORY[0x1E0C809B0];
        v34[1] = 3221225472;
        v34[2] = ___LSCopyClaimedActivityIdentifiersAndDomains_block_invoke;
        v34[3] = &unk_1E1044118;
        v34[4] = &v43;
        v34[5] = &v39;
        v34[6] = v5;
        _LSEnumerateViableBundlesOfClass(v5, 2, v34);
        v9 = CFArrayCreateMutable(v6, 0, MEMORY[0x1E0C9B378]);
        if (v9)
        {
          for (i = 0; i != 4; ++i)
          {
            v11 = _LSCopyAdvertisementStringForTeamIdentifierAndActivityType(v6, 0, off_1E1044188[i]);
            if (v11)
            {
              CFArrayAppendValue(v9, v11);
              CFRelease(v11);
            }
          }
          Copy = CFArrayCreateCopy(v6, v9);
          CFRelease(v9);
        }
        else
        {
          Copy = 0;
        }
        v32 = 0u;
        v33 = 0u;
        v30 = 0u;
        v31 = 0u;
        v16 = Copy;
        v17 = -[__CFArray countByEnumeratingWithState:objects:count:](v16, "countByEnumeratingWithState:objects:count:", &v30, v51, 16);
        if (v17)
        {
          v18 = *(_QWORD *)v31;
          do
          {
            for (j = 0; j != v17; ++j)
            {
              if (*(_QWORD *)v31 != v18)
                objc_enumerationMutation(v16);
              CFSetAddValue((CFMutableSetRef)v44[3], *(const void **)(*((_QWORD *)&v30 + 1) + 8 * j));
            }
            v17 = -[__CFArray countByEnumeratingWithState:objects:count:](v16, "countByEnumeratingWithState:objects:count:", &v30, v51, 16);
          }
          while (v17);
        }

      }
      else
      {
        *((_DWORD *)v48 + 6) = -41;
      }
    }
    if (v35 && v37)
      _LSContextDestroy(v35);
    v20 = v36;
    v35 = 0;
    v36 = 0;

    v37 = 0;
    v21 = v38;
    v38 = 0;

  }
  else
  {
    v13 = (void *)MEMORY[0x186DAE7A0]();
    v14 = MEMORY[0x1E0C809B0];
    v29[0] = (void (*)(_QWORD, _QWORD))MEMORY[0x1E0C809B0];
    v29[1] = (void (*)(_QWORD, _QWORD))3221225472;
    v29[2] = (void (*)(_QWORD, _QWORD))___LSCopyClaimedActivityIdentifiersAndDomains_block_invoke_2;
    v29[3] = (void (*)(_QWORD, _QWORD))&unk_1E103FB88;
    v29[4] = (void (*)(_QWORD, _QWORD))&v47;
    +[_LSDService synchronousXPCProxyWithErrorHandler:]((uint64_t)_LSDReadService, v29);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v28[0] = v14;
    v28[1] = 3221225472;
    v28[2] = ___LSCopyClaimedActivityIdentifiersAndDomains_block_invoke_3;
    v28[3] = &unk_1E1044140;
    v28[4] = &v43;
    v28[5] = &v39;
    v28[6] = &v47;
    objc_msgSend(v15, "getAllUserActivityTypesAndDomainNamesWithCompletionHandler:", v28);

    objc_autoreleasePoolPop(v13);
  }
  if (!*((_DWORD *)v48 + 6))
  {
    if (a1)
    {
      v22 = (CFTypeRef)v44[3];
      if (v22)
        v22 = CFRetain(v22);
      *a1 = v22;
    }
    if (a2)
    {
      v23 = (CFTypeRef)v40[3];
      if (v23)
        v23 = CFRetain(v23);
      *a2 = v23;
    }
  }
  v24 = (const void *)v44[3];
  if (v24)
    CFRelease(v24);
  v25 = (const void *)v40[3];
  if (v25)
    CFRelease(v25);
  v26 = *((unsigned int *)v48 + 6);
  _Block_object_dispose(&v39, 8);
  _Block_object_dispose(&v43, 8);
  _Block_object_dispose(&v47, 8);
  return v26;
}

void sub_18297C2C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  void *v46;
  uint64_t v47;

  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a37);
  _Block_object_dispose(&a42, 8);
  _Block_object_dispose(&a46, 8);
  _Block_object_dispose((const void *)(v47 - 248), 8);
  _Unwind_Resume(a1);
}

void sub_18297C520(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18297C5A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18297C66C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t _LSCopyUserActivityDomainNamesForBundleID(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  NSObject *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  id v24;
  _BYTE v25[128];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (!a1 || !_LSIsSWCAvailable())
    return 0;
  v2 = objc_alloc((Class)_LSSWCServiceSpecifierClass());
  _LSSWCServiceTypeActivityContinuation();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void *)objc_msgSend(v2, "initWithServiceType:applicationIdentifier:domain:", v3, a1, 0);

  v24 = 0;
  objc_msgSend((id)_LSSWCServiceDetailsClass(), "serviceDetailsWithServiceSpecifier:error:", v4, &v24);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v24;
  v19 = v6;
  if (v5)
  {
    v7 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v8 = v5;
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v20, v25, 16);
    if (v9)
    {
      v10 = *(_QWORD *)v21;
      do
      {
        for (i = 0; i != v9; ++i)
        {
          if (*(_QWORD *)v21 != v10)
            objc_enumerationMutation(v8);
          v12 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * i);
          if (objc_msgSend(v12, "isApproved"))
          {
            objc_msgSend(v12, "serviceSpecifier");
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v13, "domain");
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v14, "lowercaseString");
            v15 = (void *)objc_claimAutoreleasedReturnValue();

            if (objc_msgSend(v15, "length"))
              -[NSObject addObject:](v7, "addObject:", v15);

          }
        }
        v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v20, v25, 16);
      }
      while (v9);
    }

    v16 = -[NSObject copy](v7, "copy");
  }
  else
  {
    v17 = (uint64_t)v6;
    _LSDefaultLog();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      _LSCopyUserActivityDomainNamesForBundleID_cold_1(v17, v7);
    v16 = 0;
  }

  return v16;
}

void sub_18297C8AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

CFArrayRef _LSCopyActivityTypesClaimedHashedAdvertisingStrings(uint64_t a1, const __CFString *a2, const __CFDictionary *a3, const __CFDictionary *a4)
{
  const __CFAllocator *v8;
  __CFSet *Mutable;
  const __CFString *v10;
  const __CFString *v11;
  const __CFArray *Value;
  const __CFArray *v13;
  CFTypeID TypeID;
  CFIndex v15;
  const __CFString *ValueAtIndex;
  const __CFString *v17;
  CFTypeID v18;
  const __CFString *v19;
  const __CFString *v20;
  const __CFArray *v21;
  const __CFArray *v22;
  CFTypeID v23;
  CFIndex Count;
  CFIndex v25;
  CFIndex i;
  const __CFDictionary *v27;
  const __CFDictionary *v28;
  CFTypeID v29;
  const __CFString *v30;
  const __CFString *v31;
  CFTypeID v32;
  const __CFString *v33;
  const __CFString *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  __CFString *v45;
  CFIndex v46;
  const void **v47;
  CFArrayRef v48;
  CFIndex v49;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _BYTE v55[128];
  _OWORD v56[64];
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B3B0]);
  if (a1)
  {
    v10 = &stru_1E10473A0;
    if (a2)
      v10 = a2;
    v11 = CFStringCreateWithFormat(v8, 0, CFSTR("%@#%@:%@"), CFSTR("NOTIFICATION"), v10, a1);
    appendStringAndHashedBytesOfType(Mutable, 4, v11);
    CFRelease(v11);
  }
  if (a3)
  {
    Value = (const __CFArray *)CFDictionaryGetValue(a3, CFSTR("NSUserActivityTypes"));
    if (Value)
    {
      v13 = Value;
      TypeID = CFArrayGetTypeID();
      if (TypeID == CFGetTypeID(v13) && CFArrayGetCount(v13) >= 1)
      {
        v15 = 0;
        do
        {
          ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v13, v15);
          if (ValueAtIndex)
          {
            v17 = ValueAtIndex;
            v18 = CFStringGetTypeID();
            if (v18 == CFGetTypeID(v17))
            {
              v19 = _LSCopyAdvertisementStringForTeamIdentifierAndActivityType(v8, a2, v17);
              if (v19)
              {
                v20 = v19;
                appendStringAndHashedBytesOfType(Mutable, 1, v19);
                CFRelease(v20);
              }
            }
          }
          ++v15;
        }
        while (v15 < CFArrayGetCount(v13));
      }
    }
    v21 = (const __CFArray *)CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E0C9AAD0]);
    if (v21)
    {
      v22 = v21;
      v23 = CFArrayGetTypeID();
      if (v23 == CFGetTypeID(v22))
      {
        Count = CFArrayGetCount(v22);
        if (Count >= 1)
        {
          v25 = Count;
          for (i = 0; i != v25; ++i)
          {
            v27 = (const __CFDictionary *)CFArrayGetValueAtIndex(v22, i);
            if (v27)
            {
              v28 = v27;
              v29 = CFDictionaryGetTypeID();
              if (v29 == CFGetTypeID(v28))
              {
                v30 = (const __CFString *)CFDictionaryGetValue(v28, CFSTR("NSUbiquitousDocumentUserActivityType"));
                if (v30)
                {
                  v31 = v30;
                  v32 = CFStringGetTypeID();
                  if (v32 == CFGetTypeID(v31))
                  {
                    v33 = _LSCopyAdvertisementStringForTeamIdentifierAndActivityType(v8, a2, v31);
                    if (v33)
                    {
                      v34 = v33;
                      appendStringAndHashedBytesOfType(Mutable, 1, v33);
                      CFRelease(v34);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (a4 && _LSIsSWCAvailable())
  {
    v35 = (void *)MEMORY[0x186DAE7A0]();
    CFDictionaryGetValue(a4, CFSTR("com.apple.developer.associated-domains"));
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    if (v36)
    {
      v37 = (void *)_LSSWCServiceSpecifierClass();
      _LSSWCServiceTypeActivityContinuation();
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v37, "serviceSpecifiersWithEntitlementValue:serviceType:error:", v36, v38, 0);
      v39 = (void *)objc_claimAutoreleasedReturnValue();

      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      v40 = v39;
      v41 = objc_msgSend(v40, "countByEnumeratingWithState:objects:count:", &v51, v55, 16);
      if (v41)
      {
        v42 = *(_QWORD *)v52;
        do
        {
          v43 = 0;
          do
          {
            if (*(_QWORD *)v52 != v42)
              objc_enumerationMutation(v40);
            objc_msgSend(*(id *)(*((_QWORD *)&v51 + 1) + 8 * v43), "domain");
            v44 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v44, "lowercaseString");
            v45 = (__CFString *)objc_claimAutoreleasedReturnValue();

            appendStringAndHashedBytesOfType(Mutable, 2, v45);
            ++v43;
          }
          while (v41 != v43);
          v41 = objc_msgSend(v40, "countByEnumeratingWithState:objects:count:", &v51, v55, 16);
        }
        while (v41);
      }

    }
    objc_autoreleasePoolPop(v35);
  }
  if (!Mutable)
    return 0;
  if (CFSetGetCount(Mutable) < 1)
  {
    v48 = 0;
  }
  else
  {
    if (CFSetGetCount(Mutable))
    {
      v46 = CFSetGetCount(Mutable);
      v47 = (const void **)malloc_type_malloc(8 * v46, 0xC0040B8AA526DuLL);
    }
    else
    {
      v47 = (const void **)v56;
    }
    memset(v56, 0, 512);
    CFSetGetValues(Mutable, v47);
    v49 = CFSetGetCount(Mutable);
    v48 = CFArrayCreate(v8, v47, v49, MEMORY[0x1E0C9B378]);
    if (v47 != (const void **)v56)
      free(v47);
  }
  CFRelease(Mutable);
  return v48;
}

void sub_18297CDDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void appendStringAndHashedBytesOfType(__CFSet *a1, uint64_t a2, CFStringRef theString)
{
  const __CFData *v5;
  const __CFData *v6;
  CFStringRef v7;
  CFStringRef v8;

  v5 = _LSCreateHashedBytesForAdvertisingFromString(a2, theString);
  if (v5)
  {
    v6 = v5;
    v7 = _LSCreateDatabaseLookupStringFromHashedBytesForAdvertising(v5);
    if (v7)
    {
      v8 = v7;
      CFSetAddValue(a1, theString);
      CFSetAddValue(a1, v8);
      CFRelease(v8);
    }
    CFRelease(v6);
  }
}

uint64_t _LSDatabaseCopyURLForUser(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x186DAE7A0]();
  objc_msgSend((id)__LSDefaultsGetSharedInstance(), "databaseStoreFileURLWithUID:", a1);
  v3 = objc_claimAutoreleasedReturnValue();
  objc_autoreleasePoolPop(v2);
  return v3;
}

BOOL _LSDisplayData(FILE *a1, const char *a2, unsigned int *a3, void *a4, CFArrayRef theArray, void *a6, uint64_t a7, _QWORD *a8)
{
  void *v12;
  id v16;
  void *v17;
  void *v18;
  int v19;
  FILE *v20;
  FILE *v21;
  _BOOL8 v22;
  id v23;
  uint64_t v24;
  BOOL v25;
  void *v26;
  int v27;
  id *v28;
  uint64_t v29;
  id v30;
  NSMutableAttributedString *v31;
  char v32;
  int *v34;
  id v35;
  void *v36[6];
  id v37[33];
  id v38;
  id v39;
  id v40;
  id v41;
  id v42[2];

  v12 = a4;
  if (a4)
    v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E60]), "initWithArray:", a4);
  if (theArray)
    theArray = XCFSetCreateWithArray((const __CFAllocator *)*MEMORY[0x1E0C9AE00], theArray, (const CFSetCallBacks *)&kXCFCaseInsensitiveStringSetCallBacks);
  v16 = a6;
  if (!a2)
  {
    v36[0] = 0;
    if (a3)
    {
      v24 = -[_LSDServiceDomain initWithUID:]([_LSDServiceDomain alloc], *a3);
    }
    else
    {
      +[_LSDServiceDomain defaultServiceDomain]();
      v24 = objc_claimAutoreleasedReturnValue();
    }
    v26 = (void *)v24;
    v40 = 0;
    v27 = _LSContextInitWithOptions(v36, v24, 0, &v40);
    v23 = v40;

    if (!v27)
      goto LABEL_13;
    goto LABEL_16;
  }
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a2);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "lowercaseString");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = objc_msgSend(v18, "hasSuffix:", CFSTR(".csstoredump"));

  if (!v19)
  {
    v36[0] = 0;
    v41 = 0;
    v25 = _LSContextInitWithPath(v36, (uint64_t)a2, &v41);
    v23 = v41;
    if (!v25)
    {
LABEL_13:
      v22 = 0;
      goto LABEL_20;
    }
LABEL_16:
    if ((a7 & 1) != 0)
    {
      v39 = v23;
      v28 = &v39;
      v29 = _LSDisplayMachineReadableData(v36, (uint64_t)a1, v12, v16, a7, (uint64_t)&v39);
    }
    else
    {
      v38 = v23;
      v28 = &v38;
      v29 = _LSDisplayHumanReadableData((uint64_t *)v36, a1, v12, theArray, v16, a7, &v38);
    }
    v22 = v29;
    v30 = *v28;

    v23 = v30;
    _LSContextDestroy(v36);
LABEL_20:

    if ((a7 & 4) == 0)
      goto LABEL_25;
    goto LABEL_21;
  }
  v20 = fopen(a2, "rb");
  v21 = v20;
  if (v20)
  {
    v42[0] = 0;
    v22 = _LSDisplayHumanReadableCopyOfMachineReadableData((uint64_t)v20, (uint64_t)a1, (uint64_t)v12, (uint64_t)theArray, (uint64_t)v16, a7, v42);
    v23 = v42[0];
    fclose(v21);
    if ((a7 & 4) == 0)
      goto LABEL_25;
  }
  else
  {
    v34 = __error();
    _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2FE0], *v34, (uint64_t)"_LSDisplayData", 2566, 0);
    v23 = (id)objc_claimAutoreleasedReturnValue();
    v22 = 0;
    if ((a7 & 4) == 0)
      goto LABEL_25;
  }
LABEL_21:
  if (!v22)
  {
    v31 = (NSMutableAttributedString *)objc_alloc_init(MEMORY[0x1E0CB3778]);
    if (v31)
    {
      v36[0] = 0;
      v36[1] = v36;
      v36[2] = (void *)0x13812000000;
      v36[3] = __Block_byref_object_copy__27;
      v36[4] = __Block_byref_object_dispose__27;
      v36[5] = (void *)256;
      LaunchServices::DumpWriter::DumpWriter((LaunchServices::DumpWriter *)v37, v31);
      v35 = v23;
      CSStore2::AttributedStringWriter::withWarningColors();
      -[NSMutableAttributedString cs_writeToFileHandle:](v31, "cs_writeToFileHandle:", *MEMORY[0x1E0C80C10]);

      _Block_object_dispose(v36, 8);
      LaunchServices::DumpWriter::~DumpWriter(v37);
    }

  }
LABEL_25:
  if (a8)
    v32 = v22;
  else
    v32 = 1;
  if ((v32 & 1) == 0)
    *a8 = v23;

  return v22;
}

void sub_18297D290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_18297D7F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void ___ZL22initActivationObserverv_block_invoke()
{
  __CFNotificationCenter *DarwinNotifyCenter;
  const __CFString *v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (getkNotificationActivationStateChanged())
  {
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    v1 = (const __CFString *)getkNotificationActivationStateChanged();
    CFNotificationCenterAddObserver(DarwinNotifyCenter, 0, (CFNotificationCallback)handleActivationStateChanged, v1, 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  }
  else
  {
    _LSDefaultLog();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      ___ZL22initActivationObserverv_block_invoke_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);

  }
}

uint64_t handleActivationStateChanged(__CFNotificationCenter *a1, void *a2, const __CFString *a3, const void *a4, const __CFDictionary *a5)
{
  return +[LSHRNSupport invalidateCache](LSHRNSupport, "invalidateCache", a3, a4, a5);
}

uint64_t initkNotificationActivationStateChanged(void)
{
  void *v0;
  uint64_t result;

  v0 = (void *)MobileActivationLibrary(void)::frameworkLibrary;
  if (!MobileActivationLibrary(void)::frameworkLibrary)
  {
    v0 = dlopen("/System/Library/PrivateFrameworks/MobileActivation.framework/MobileActivation", 2);
    MobileActivationLibrary(void)::frameworkLibrary = (uint64_t)v0;
  }
  result = *(_QWORD *)dlsym(v0, "kNotificationActivationStateChanged");
  constantkNotificationActivationStateChanged = result;
  getkNotificationActivationStateChanged = kNotificationActivationStateChangedFunction;
  return result;
}

uint64_t kNotificationActivationStateChangedFunction(void)
{
  return constantkNotificationActivationStateChanged;
}

uint64_t (*initMAECopyActivationRecordWithError(uint64_t a1))()
{
  void *v2;
  uint64_t (*v3)();

  v2 = (void *)MobileActivationLibrary(void)::frameworkLibrary;
  if (!MobileActivationLibrary(void)::frameworkLibrary)
  {
    v2 = dlopen("/System/Library/PrivateFrameworks/MobileActivation.framework/MobileActivation", 2);
    MobileActivationLibrary(void)::frameworkLibrary = (uint64_t)v2;
  }
  v3 = (uint64_t (*)())dlsym(v2, "MAECopyActivationRecordWithError");
  softLinkMAECopyActivationRecordWithError[0] = v3;
  if (v3)
  {
    ((void (*)(uint64_t))v3)(a1);
    v3 = (uint64_t (*)())objc_claimAutoreleasedReturnValue();
  }
  return v3;
}

uint64_t _LSValidateEntitlementsOfConnectionForVanillaInstall(void *a1, void *a2, _QWORD *a3)
{
  void *v3;
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  char v11;
  void *v12;
  int v13;
  void *v14;
  void *v15;
  void *v16;
  int v17;
  uint64_t v18;

  v6 = a1;
  v7 = a2;
  objc_msgSend(v6, "_xpcConnection");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = _LSCheckMIAllowedSPIForXPCConnection(v8, CFSTR("InstallForLaunchServices"));

  if (!(_DWORD)v9)
  {
    _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2FE0], 1, (uint64_t)"_LSValidateEntitlementsOfConnectionForVanillaInstall", 47, &unk_1E1075AB8);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    goto LABEL_15;
  }
  objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("VerifyForMigrator"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "BOOLValue");
  if ((v11 & 1) != 0
    || (objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("SkipBlacklist")),
        v3 = (void *)objc_claimAutoreleasedReturnValue(),
        (objc_msgSend(v3, "BOOLValue") & 1) != 0))
  {
    objc_msgSend(v6, "_xpcConnection");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = _LSCheckMIAllowedSPIForXPCConnection(v12, CFSTR("InstallForDataMigrator"));

    if ((v11 & 1) == 0)
    if (!v13)
    {
      _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2FE0], 1, (uint64_t)"_LSValidateEntitlementsOfConnectionForVanillaInstall", 37, &unk_1E1075A68);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = 0;
      goto LABEL_11;
    }
  }
  else
  {

  }
  v14 = 0;
  v9 = 1;
LABEL_11:
  objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("AllowInstallLocalProvisioned"));
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v15, "BOOLValue") & 1) != 0)
  {
    objc_msgSend(v6, "_xpcConnection");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = _LSCheckMIAllowedSPIForXPCConnection(v16, CFSTR("InstallLocalProvisioned"));

    if (!v17)
    {
      _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2FE0], 1, (uint64_t)"_LSValidateEntitlementsOfConnectionForVanillaInstall", 43, &unk_1E1075A90);
      v18 = objc_claimAutoreleasedReturnValue();

      v9 = 0;
      v14 = (void *)v18;
    }
  }
  else
  {

  }
LABEL_15:
  if (a3 && (v9 & 1) == 0)
    *a3 = objc_retainAutorelease(v14);

  return v9;
}

BOOL _LSValidateEntitlementsOfConnectionForUninstall(void *a1, uint64_t a2, _QWORD *a3)
{
  void *v4;
  int v5;
  id v6;

  objc_msgSend(a1, "_xpcConnection");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = _LSCheckMIAllowedSPIForXPCConnection(v4, CFSTR("UninstallForLaunchServices"));

  if (v5)
  {
    v6 = 0;
  }
  else
  {
    _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2FE0], 1, (uint64_t)"_LSValidateEntitlementsOfConnectionForUninstall", 63, &unk_1E1075AE0);
    v6 = (id)objc_claimAutoreleasedReturnValue();
    if (a3)
    {
      v6 = objc_retainAutorelease(v6);
      *a3 = v6;
    }
  }

  return v5 != 0;
}

id installationInterface()
{
  if (installationInterface_once != -1)
    dispatch_once(&installationInterface_once, &__block_literal_global_42);
  return (id)installationInterface_interface;
}

void __installationInterface_block_invoke()
{
  uint64_t v0;
  void *v1;
  id v2;

  XNSGetPropertyListClasses();
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EDCDF808);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)installationInterface_interface;
  installationInterface_interface = v0;

  objc_msgSend((id)installationInterface_interface, "setClass:forSelector:argumentIndex:ofReply:", objc_opt_class(), sel_performShimmedInstallOfArtifact_options_completion_, 0, 0);
  objc_msgSend((id)installationInterface_interface, "setClasses:forSelector:argumentIndex:ofReply:", v2, sel_performShimmedInstallOfArtifact_options_completion_, 1, 0);
  objc_msgSend((id)installationInterface_interface, "setClass:forSelector:argumentIndex:ofReply:", objc_opt_class(), sel_performShimmedInstallOfArtifact_options_completion_, 1, 1);
  objc_msgSend((id)installationInterface_interface, "setClass:forSelector:argumentIndex:ofReply:", objc_opt_class(), sel_performShimmedUninstallOfApplicationWithIdentifier_options_completion_, 0, 0);
  objc_msgSend((id)installationInterface_interface, "setClasses:forSelector:argumentIndex:ofReply:", v2, sel_performShimmedUninstallOfApplicationWithIdentifier_options_completion_, 1, 0);
  objc_msgSend((id)installationInterface_interface, "setClass:forSelector:argumentIndex:ofReply:", objc_opt_class(), sel_performShimmedUninstallOfApplicationWithIdentifier_options_completion_, 1, 1);

}

void OUTLINED_FUNCTION_3_5(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0x12u);
}

void sub_18297ED80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18297EE2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18297EF50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18297F16C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21)
{
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;

  LaunchServices::notifyd::NotifyToken::~NotifyToken((LaunchServices::notifyd::NotifyToken *)(v24 - 84));

  _Unwind_Resume(a1);
}

void sub_18297F324(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18297F540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18297F648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)_LSInProcessSettingsStore;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_18297F764(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18297F860(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18297F8DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18297F99C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18297FE50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18297FFD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182980164(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_182980344(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1829804AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182980568(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1829806B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1829807E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18298087C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182980990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)_LSClientSettingsStore;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_182980A68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_182980B74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_182980C40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182980CC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182980F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  void *v29;
  uint64_t v30;

  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v30 - 200), 8);

  _Block_object_dispose((const void *)(v30 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_1829810C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182981168(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182981390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;

  _Block_object_dispose(&a28, 8);
  _Block_object_dispose((const void *)(v28 - 160), 8);

  _Block_object_dispose((const void *)(v28 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1829814F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182981594(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id ___ZL29pluginKitUserElectionStoreURLv_block_invoke()
{
  uint64_t v0;
  void *v1;
  void *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v6;

  v6 = 1;
  v0 = container_create_or_lookup_path_for_current_user();
  if (v0)
  {
    v1 = (void *)v0;
    objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithFileSystemRepresentation:isDirectory:relativeToURL:", v0, 1, 0);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    free(v1);
  }
  else
  {
    _LSExtensionsLog();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT))
      ___ZL29pluginKitUserElectionStoreURLv_block_invoke_cold_1(&v6, v3, v4);

    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99768], CFSTR("unable to locate user container: error %llu"), v6);
    v2 = 0;
  }
  return v2;
}

void ___ZL29pluginKitUserElectionStoreURLv_block_invoke_223(uint64_t a1)
{
  void *v2;
  void *v3;
  int v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  char v9;
  id v10;
  NSObject *v11;
  uint64_t v12;
  void *v13;
  NSObject *v14;
  void *v15;
  id v16;
  _BYTE v17[24];
  uint64_t v18;
  _QWORD v19[2];

  v19[1] = *MEMORY[0x1E0C80C00];
  v18 = *MEMORY[0x1E0CB2AA8];
  v19[0] = &unk_1E1075768;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v19, &v18, 1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (getUMUserManagerClass()
    && (objc_msgSend((id)getUMUserManagerClass(), "sharedManager"),
        v3 = (void *)objc_claimAutoreleasedReturnValue(),
        v4 = objc_msgSend(v3, "isMultiUser"),
        v3,
        v4))
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", CFSTR("/var/db/PlugInKit-Annotations"));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }
  v6 = v5;
  objc_msgSend(v5, "URLByAppendingPathComponent:", CFSTR("com.apple.pluginkit/"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = 0;
  v9 = objc_msgSend(v8, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v7, 1, v2, &v16);
  v10 = v16;

  if ((v9 & 1) == 0)
  {
    _LSExtensionsLog();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      ___ZL29pluginKitUserElectionStoreURLv_block_invoke_223_cold_2();

  }
  objc_msgSend(v7, "URLByAppendingPathComponent:", CFSTR("Annotations"));
  v12 = objc_claimAutoreleasedReturnValue();
  v13 = (void *)pluginKitUserElectionStoreURL(void)::annotations;
  pluginKitUserElectionStoreURL(void)::annotations = v12;

  _LSExtensionsLog();
  v14 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
  {
    objc_msgSend((id)pluginKitUserElectionStoreURL(void)::annotations, "path");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    ___ZL29pluginKitUserElectionStoreURLv_block_invoke_223_cold_1(v15, (uint64_t)v17);
  }

}

void sub_1829818EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_5_2(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x12u);
}

uint64_t OUTLINED_FUNCTION_12_1(uint64_t result, uint64_t a2, float a3)
{
  *(float *)a2 = a3;
  *(_QWORD *)(a2 + 4) = result;
  return result;
}

void sub_182981B60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void LaunchServices::FeatureFlagPredicateEvaluation::Predicate::parse_dictionary(void *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  id v5;
  void **v6;
  void *v7;
  uint64_t *v8;
  uint64_t v9;
  __int128 v10;
  void ***v11;
  void **v12;
  __int128 v13;
  _QWORD v14[3];
  _QWORD v15[3];
  _QWORD v16[3];
  _QWORD v17[3];
  _QWORD v18[7];
  void **v19;
  void ***v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t);
  void (*v23)(uint64_t);
  id v24;
  void **v25;
  void ***v26;
  uint64_t v27;
  __n128 (*v28)(__n128 *, __n128 *);
  void (*v29)(uint64_t);
  const char *v30;
  _QWORD v31[3];
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  __n128 (*v35)(__n128 *, __n128 *);
  void (*v36)(uint64_t);
  const char *v37;
  _QWORD v38[3];
  void **v39;
  uint64_t v40;
  _QWORD v41[2];

  v41[1] = *MEMORY[0x1E0C80C00];
  v5 = a1;
  if ((_NSIsNSDictionary() & 1) != 0)
  {
    v32 = 0;
    v33 = &v32;
    v34 = 0x4812000000;
    v35 = __Block_byref_object_copy__29;
    v36 = __Block_byref_object_dispose__29;
    v37 = "";
    memset(v38, 0, sizeof(v38));
    v25 = 0;
    v26 = &v25;
    v27 = 0x4812000000;
    v28 = __Block_byref_object_copy__29;
    v29 = __Block_byref_object_dispose__29;
    v30 = "";
    memset(v31, 0, sizeof(v31));
    v19 = 0;
    v20 = &v19;
    v21 = 0x3032000000;
    v22 = __Block_byref_object_copy__71;
    v23 = __Block_byref_object_dispose__72;
    v24 = 0;
    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 3221225472;
    v18[2] = ___ZN14LaunchServices30FeatureFlagPredicateEvaluation9Predicate16parse_dictionaryEP12NSDictionaryPU15__autoreleasingP7NSError_block_invoke;
    v18[3] = &unk_1E1044368;
    v18[4] = &v19;
    v18[5] = &v32;
    v18[6] = &v25;
    objc_msgSend(v5, "enumerateKeysAndObjectsUsingBlock:", v18);
    v6 = v20[5];
    if (v6)
    {
      if (a2)
        *a2 = objc_retainAutorelease(v6);
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 48) = 0;
    }
    else
    {
      v8 = v33;
      v9 = v33[8];
      v10 = *((_OWORD *)v33 + 3);
      v33[7] = 0;
      v8[8] = 0;
      v8[6] = 0;
      v11 = v26;
      v12 = v26[8];
      v13 = *((_OWORD *)v26 + 3);
      v26[7] = 0;
      v11[8] = 0;
      v11[6] = 0;
      memset(v15, 0, sizeof(v15));
      memset(v14, 0, sizeof(v14));
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v9;
      v16[0] = 0;
      v16[1] = 0;
      *(_OWORD *)(a3 + 24) = v13;
      *(_QWORD *)(a3 + 40) = v12;
      v16[2] = 0;
      memset(v17, 0, sizeof(v17));
      *(_BYTE *)(a3 + 48) = 1;
      v39 = (void **)v17;
      std::vector<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier>::__destroy_vector::operator()[abi:nn180100](&v39);
      v39 = (void **)v16;
      std::vector<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier>::__destroy_vector::operator()[abi:nn180100](&v39);
      v39 = (void **)v14;
      std::vector<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier>::__destroy_vector::operator()[abi:nn180100](&v39);
      v39 = (void **)v15;
      std::vector<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier>::__destroy_vector::operator()[abi:nn180100](&v39);
    }
    _Block_object_dispose(&v19, 8);

    _Block_object_dispose(&v25, 8);
    v19 = (void **)v31;
    std::vector<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier>::__destroy_vector::operator()[abi:nn180100](&v19);
    _Block_object_dispose(&v32, 8);
    v25 = (void **)v38;
    std::vector<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier>::__destroy_vector::operator()[abi:nn180100](&v25);
  }
  else
  {
    if (a2)
    {
      v40 = *MEMORY[0x1E0CB2938];
      v41[0] = CFSTR("Predicate was not a dictionary");
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v41, &v40, 1);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], -50, (uint64_t)"parse_dictionary", 106, v7);
      *a2 = (id)objc_claimAutoreleasedReturnValue();

    }
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 48) = 0;
  }

}

void sub_182981E40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t LaunchServices::DelayedInitable<LaunchServices::FeatureFlagPredicateEvaluation::Predicate>::emplace<LaunchServices::FeatureFlagPredicateEvaluation::Predicate>(uint64_t a1, uint64_t a2)
{
  void *v5;
  void *v6;

  if (*(_BYTE *)(a1 + 48))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void LaunchServices::DelayedInitable<LaunchServices::Predicate>::emplace(Args &&...) [T = LaunchServices::Predicate, Args = <LaunchServices::Predicate>]");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("LSObjCPlusPlusHelpers.hpp"), 34, CFSTR("can't re-emplace a DelayedInitable"));

  }
  return std::optional<LaunchServices::FeatureFlagPredicateEvaluation::Predicate>::emplace[abi:nn180100]<LaunchServices::FeatureFlagPredicateEvaluation::Predicate,void>(a1, a2);
}

void sub_182981F44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t LaunchServices::FeatureFlagPredicateEvaluation::Predicate::evaluate(uint64_t **a1, void *a2)
{
  id v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;

  v3 = a2;
  v4 = *a1;
  v5 = a1[1];
  while (v4 != v5)
  {
    if (*((char *)v4 + 47) >= 0)
      v6 = (uint64_t)(v4 + 3);
    else
      v6 = v4[3];
    if (*((char *)v4 + 23) >= 0)
      v7 = v4;
    else
      v7 = (uint64_t *)*v4;
    if ((objc_msgSend(v3, "isFeature:enabledInDomain:", v6, v7) & 1) == 0)
    {
      v15 = 0;
      goto LABEL_26;
    }
    v4 += 6;
  }
  v8 = a1[3];
  v9 = a1[4];
  if (v8 == v9)
  {
    v15 = 1;
  }
  else
  {
    v10 = v8 + 3;
    do
    {
      if (*((char *)v10 + 23) >= 0)
        v11 = v10;
      else
        v11 = (uint64_t *)*v10;
      if (*((char *)v10 - 1) >= 0)
        v12 = (uint64_t)(v10 - 3);
      else
        v12 = *(v10 - 3);
      v13 = objc_msgSend(v3, "isFeature:enabledInDomain:", v11, v12);
      if (v10 + 3 == v9)
        v14 = 1;
      else
        v14 = v13;
      v10 += 6;
    }
    while (v14 != 1);
    v15 = v13 ^ 1u;
  }
LABEL_26:

  return v15;
}

void sub_18298204C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1829820E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1829821B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__71(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__72(uint64_t a1)
{

}

void ___ZN14LaunchServices30FeatureFlagPredicateEvaluation9Predicate16parse_dictionaryEP12NSDictionaryPU15__autoreleasingP7NSError_block_invoke(_QWORD *a1, void *a2, void *a3, _BYTE *a4)
{
  LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier *v7;
  id v8;
  double v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  __int128 v23[3];
  char v24;
  uint64_t v25;
  const __CFString *v26;
  uint64_t v27;
  const __CFString *v28;
  uint64_t v29;
  _QWORD v30[2];

  v30[1] = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  if ((_NSIsNSString() & 1) == 0)
  {
    v29 = *MEMORY[0x1E0CB2938];
    v30[0] = CFSTR("Predicate key not a feature flag");
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v30, &v29, 1);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], -50, (uint64_t)"parse_dictionary_block_invoke", 114, v11);
    v12 = objc_claimAutoreleasedReturnValue();
    v13 = *(_QWORD *)(a1[4] + 8);
    v14 = *(void **)(v13 + 40);
    *(_QWORD *)(v13 + 40) = v12;

LABEL_8:
    *a4 = 1;
    goto LABEL_13;
  }
  if ((objc_opt_respondsToSelector() & 1) == 0)
  {
    v27 = *MEMORY[0x1E0CB2938];
    v28 = CFSTR("bad requirement value");
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v28, &v27, 1);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], -50, (uint64_t)"parse_dictionary_block_invoke", 119, v15);
    v16 = objc_claimAutoreleasedReturnValue();
    v17 = *(_QWORD *)(a1[4] + 8);
    v18 = *(void **)(v17 + 40);
    *(_QWORD *)(v17 + 40) = v16;

    goto LABEL_8;
  }
  v9 = LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier::from_nsstring(v7, (uint64_t)v23);
  if (v24)
  {
    if (objc_msgSend(v8, "BOOLValue", v9))
      v10 = a1[5];
    else
      v10 = a1[6];
    std::vector<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier>::emplace_back<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier>((char **)(*(_QWORD *)(v10 + 8) + 48), v23);
  }
  else
  {
    v25 = *MEMORY[0x1E0CB2938];
    v26 = CFSTR("Predicate key unparseable");
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v26, &v25, 1, v9);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2F90], -50, (uint64_t)"parse_dictionary_block_invoke", 125, v19);
    v20 = objc_claimAutoreleasedReturnValue();
    v21 = *(_QWORD *)(a1[4] + 8);
    v22 = *(void **)(v21 + 40);
    *(_QWORD *)(v21 + 40) = v20;

    *a4 = 1;
  }
  std::__optional_destruct_base<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v23);
LABEL_13:

}

void sub_182982454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;
  void *v11;

  std::__optional_destruct_base<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

double LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier::from_nsstring@<D0>(LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier *this@<X0>, uint64_t a2@<X8>)
{
  const char *v4;
  double result;
  char *v6;
  size_t v7;
  char *v8;
  char *v9;
  char *v10;
  size_t v11;
  BOOL v12;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;

  v4 = (const char *)-[LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier UTF8String](objc_retainAutorelease(this), "UTF8String");
  if (!v4)
    goto LABEL_13;
  v6 = (char *)v4;
  v7 = strlen(v4);
  v8 = &v6[v7];
  v9 = (char *)memchr(v6, 47, v7);
  v10 = v9 ? v9 : &v6[v7];
  v11 = v10 - v6;
  v12 = v10 == v6 || v11 == v7;
  if (v12 || v10 == v8 - 1)
  {
LABEL_13:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
  }
  else
  {
    LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier::FeatureFlagSpecifier(&v14, v6, v11, v10 + 1, v8 - (v10 + 1));
    *(_OWORD *)a2 = v14;
    *(_QWORD *)(a2 + 16) = v15;
    result = *(double *)&v16;
    *(_OWORD *)(a2 + 24) = v16;
    *(_QWORD *)(a2 + 40) = v17;
    *(_BYTE *)(a2 + 48) = 1;
  }
  return result;
}

char *std::vector<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier>::emplace_back<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier>(char **a1, __int128 *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  int64x2_t v24;
  char *v25;
  uint64_t v27;
  int64x2_t v28;
  char *v29;
  uint64_t v30;

  v6 = (unint64_t)a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (_QWORD)*a1) >> 4);
    v12 = v11 + 1;
    if (v11 + 1 > 0x555555555555555)
      abort();
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (_QWORD)*a1) >> 4);
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0x2AAAAAAAAAAAAAALL)
      v14 = 0x555555555555555;
    else
      v14 = v12;
    v30 = v4;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<LSBinding>>(v4, v14);
    else
      v15 = 0;
    v16 = &v15[48 * v11];
    v17 = *a2;
    *((_QWORD *)v16 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v16 = v17;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v18 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)v16 + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(v16 + 24) = v18;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    v20 = *a1;
    v19 = (unint64_t)a1[1];
    if ((char *)v19 == *a1)
    {
      v24 = vdupq_n_s64(v19);
      v21 = &v15[48 * v11];
    }
    else
    {
      v21 = &v15[48 * v11];
      do
      {
        v22 = *(_OWORD *)(v19 - 48);
        *((_QWORD *)v21 - 4) = *(_QWORD *)(v19 - 32);
        *((_OWORD *)v21 - 3) = v22;
        *(_QWORD *)(v19 - 40) = 0;
        *(_QWORD *)(v19 - 32) = 0;
        *(_QWORD *)(v19 - 48) = 0;
        v23 = *(_OWORD *)(v19 - 24);
        *((_QWORD *)v21 - 1) = *(_QWORD *)(v19 - 8);
        *(_OWORD *)(v21 - 24) = v23;
        v21 -= 48;
        *(_QWORD *)(v19 - 16) = 0;
        *(_QWORD *)(v19 - 8) = 0;
        *(_QWORD *)(v19 - 24) = 0;
        v19 -= 48;
      }
      while ((char *)v19 != v20);
      v24 = *(int64x2_t *)a1;
    }
    v10 = v16 + 48;
    *a1 = v21;
    a1[1] = v16 + 48;
    v28 = v24;
    v25 = a1[2];
    a1[2] = &v15[48 * v14];
    v29 = v25;
    v27 = v24.i64[0];
    std::__split_buffer<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier>::~__split_buffer((void **)&v27);
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v7 = v8;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v9 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(v7 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(v7 + 24) = v9;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    v10 = (char *)(v7 + 48);
  }
  a1[1] = v10;
  return v10 - 48;
}

void std::vector<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::allocator<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier>::destroy[abi:nn180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier>::destroy[abi:nn180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 47) < 0)
    operator delete(*(void **)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

_QWORD *LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier::FeatureFlagSpecifier(_QWORD *__dst, void *__src, size_t __len, void *a4, size_t a5)
{
  void *v10;
  size_t v11;
  size_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;

  if (__len > 0x7FFFFFFFFFFFFFF7)
    abort();
  if (__len >= 0x17)
  {
    v11 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v11 = __len | 7;
    v12 = v11 + 1;
    v10 = operator new(v11 + 1);
    __dst[1] = __len;
    __dst[2] = v12 | 0x8000000000000000;
    *__dst = v10;
    goto LABEL_8;
  }
  *((_BYTE *)__dst + 23) = __len;
  v10 = __dst;
  if (__len)
LABEL_8:
    memmove(v10, __src, __len);
  *((_BYTE *)v10 + __len) = 0;
  if (a5 > 0x7FFFFFFFFFFFFFF7)
    abort();
  if (a5 >= 0x17)
  {
    v14 = (a5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a5 | 7) != 0x17)
      v14 = a5 | 7;
    v15 = v14 + 1;
    v13 = (char *)operator new(v14 + 1);
    __dst[4] = a5;
    __dst[5] = v15 | 0x8000000000000000;
    __dst[3] = v13;
  }
  else
  {
    v13 = (char *)(__dst + 3);
    *((_BYTE *)__dst + 47) = a5;
    if (!a5)
      goto LABEL_17;
  }
  memmove(v13, a4, a5);
LABEL_17:
  v13[a5] = 0;
  return __dst;
}

void sub_182982908(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void **std::__split_buffer<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier>::~__split_buffer(void **a1)
{
  std::__split_buffer<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier>::clear[abi:nn180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier>::clear[abi:nn180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 48;
    std::allocator<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier>::destroy[abi:nn180100](v4, i - 48);
  }
}

uint64_t std::__optional_destruct_base<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier,false>::~__optional_destruct_base[abi:nn180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
  {
    if (*(char *)(a1 + 47) < 0)
      operator delete(*(void **)(a1 + 24));
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__optional_destruct_base<LaunchServices::FeatureFlagPredicateEvaluation::Predicate,false>::~__optional_destruct_base[abi:nn180100](uint64_t a1)
{
  void **v3;

  if (*(_BYTE *)(a1 + 48))
  {
    v3 = (void **)(a1 + 24);
    std::vector<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier>::__destroy_vector::operator()[abi:nn180100](&v3);
    v3 = (void **)a1;
    std::vector<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier>::__destroy_vector::operator()[abi:nn180100](&v3);
  }
  return a1;
}

uint64_t std::optional<LaunchServices::FeatureFlagPredicateEvaluation::Predicate>::emplace[abi:nn180100]<LaunchServices::FeatureFlagPredicateEvaluation::Predicate,void>(uint64_t a1, uint64_t a2)
{
  std::__optional_destruct_base<LaunchServices::FeatureFlagPredicateEvaluation::Predicate,false>::reset[abi:nn180100](a1);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 1;
  return a1;
}

void std::__optional_destruct_base<LaunchServices::FeatureFlagPredicateEvaluation::Predicate,false>::reset[abi:nn180100](uint64_t a1)
{
  void **v2;

  if (*(_BYTE *)(a1 + 48))
  {
    v2 = (void **)(a1 + 24);
    std::vector<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier>::__destroy_vector::operator()[abi:nn180100](&v2);
    v2 = (void **)a1;
    std::vector<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier>::__destroy_vector::operator()[abi:nn180100](&v2);
    *(_BYTE *)(a1 + 48) = 0;
  }
}

void sub_182982B0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182982C40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_182982CFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_182982ED8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18298321C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_182983330(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1829833A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1829834D0(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_182983590(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1829836F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182983874(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_182983988(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182983A1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_182983AC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

unint64_t LaunchServices::LocalizedString::Create(void *a1, void *a2, uint64_t a3)
{
  id v5;
  id v6;
  unsigned __int8 v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  void *v17;
  id v18;
  id v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t j;
  void *v25;
  id v26;
  __CFString *v27;
  int StringForCFString;
  int v29;
  void *v30;
  char v31;
  BOOL v32;
  int v34;
  _BOOL4 v35;
  unint64_t v36;
  void *v38;
  _LSDatabase *v39;
  void *v40;
  id obj;
  __int16 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  unint64_t v51;
  unsigned int v52;
  _BYTE v53[128];
  _BYTE v54[128];
  _QWORD v55[4];

  v55[1] = *MEMORY[0x1E0C80C00];
  v39 = a1;
  v5 = a2;
  v6 = (id)a3;
  v52 = 0;
  v51 = 0;
  v40 = v6;
  if (!v5 || (v6 = (id)objc_msgSend(v5, "count"), !v40))
  {
    if (!v6)
    {
      v7 = 0;
      goto LABEL_62;
    }
  }
  a3 = MEMORY[0x186DAE7A0](v6);
  objc_msgSend(v5, "allKeys");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (v8)
  {
    if ((objc_msgSend(v8, "containsObject:", CFSTR("LSDefaultLocalizedValue")) & 1) != 0)
    {
      v38 = v9;
    }
    else
    {
      objc_msgSend(v9, "arrayByAddingObject:", CFSTR("LSDefaultLocalizedValue"));
      v10 = objc_claimAutoreleasedReturnValue();

      v38 = (void *)v10;
    }
  }
  else
  {
    v55[0] = CFSTR("LSDefaultLocalizedValue");
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v55, 1);
    v38 = (void *)objc_claimAutoreleasedReturnValue();
  }
  objc_autoreleasePoolPop((void *)a3);
  v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3868]), "initWithOptions:", 0);
  +[_LSStringLocalizer missingLocalizationPlaceholder](_LSStringLocalizer, "missingLocalizationPlaceholder");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = 0;
  v7 = 0;
  if (!v38 || !v11)
    goto LABEL_61;
  v49 = 0u;
  v50 = 0u;
  v47 = 0u;
  v48 = 0u;
  obj = v38;
  v14 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v47, v54, 16);
  if (!v14)
    goto LABEL_25;
  v15 = *(_QWORD *)v48;
  do
  {
    for (i = 0; i != v14; ++i)
    {
      if (*(_QWORD *)v48 != v15)
        objc_enumerationMutation(obj);
      v17 = *(void **)(*((_QWORD *)&v47 + 1) + 8 * i);
      objc_msgSend(v5, "objectForKeyedSubscript:", v17);
      v18 = (id)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v18, "isEqual:", v12))
      {

      }
      else if (v18)
      {
        goto LABEL_23;
      }
      if (objc_msgSend(v17, "isEqual:", CFSTR("LSDefaultLocalizedValue")))
        v18 = v40;
      else
        v18 = 0;
LABEL_23:
      objc_msgSend(v11, "addPointer:", v18);

    }
    v14 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v47, v54, 16);
  }
  while (v14);
LABEL_25:

  v19 = objc_alloc(MEMORY[0x1E0C99E20]);
  v20 = (void *)objc_msgSend(v19, "initWithCapacity:", objc_msgSend(v11, "count"));
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v21 = v11;
  v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v43, v53, 16);
  if (v22)
  {
    v23 = *(_QWORD *)v44;
    do
    {
      for (j = 0; j != v22; ++j)
      {
        if (*(_QWORD *)v44 != v23)
          objc_enumerationMutation(v21);
        v25 = *(void **)(*((_QWORD *)&v43 + 1) + 8 * j);
        v26 = v25;
        if (!v25)
        {
          objc_msgSend(MEMORY[0x1E0C99E38], "null");
          v19 = (id)objc_claimAutoreleasedReturnValue();
          v26 = v19;
        }
        objc_msgSend(v20, "addObject:", v26);
        if (!v25)

      }
      v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v43, v53, 16);
    }
    while (v22);
  }

  v42 = 0;
  if (objc_msgSend(v20, "count") == 1 && objc_msgSend(obj, "count") && objc_msgSend(v21, "count"))
  {
    objc_msgSend(obj, "objectAtIndexedSubscript:", 0);
    v27 = (__CFString *)objc_claimAutoreleasedReturnValue();
    StringForCFString = _LSDatabaseCreateStringForCFString(v39, v27, 0);
    LODWORD(v51) = StringForCFString;

    v29 = _LSDatabaseCreateStringForCFString(v39, (const __CFString *)objc_msgSend(v21, "pointerAtIndex:", 0), 0);
    HIDWORD(v51) = v29;
    LOBYTE(v52) = v52 | 2;
  }
  else
  {
    StringForCFString = _LSDatabaseCreateStringArray(v39, obj, 0, (_BYTE *)&v42 + 1);
    LODWORD(v51) = StringForCFString;
    v29 = _LSDatabaseCreateStringArrayWithNullValues(v39, v21, 0, &v42);
    HIDWORD(v51) = v29;
  }
  if (objc_msgSend(obj, "count") == 1)
  {
    objc_msgSend(obj, "objectAtIndexedSubscript:", 0);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    v31 = objc_msgSend(v30, "isEqual:", CFSTR("LSDefaultLocalizedValue"));
    LOBYTE(v52) = v52 & 0xFE | v31;

  }
  else
  {
    LOBYTE(v52) = v52 & 0xFE;
  }
  if (StringForCFString)
    v32 = v29 == 0;
  else
    v32 = 1;
  v34 = !v32 && HIBYTE(v42) == 0;
  v35 = (_BYTE)v42 == 0;
  v36 = v51;
  if ((v34 & v35) != 0)
    v7 = v51;
  else
    v7 = 0;
  if ((v34 & v35) != 0)
    v13 = v52 | 0x100000000;
  else
    v13 = 0;

  a3 = v36 >> 8;
LABEL_61:

  if ((v13 & 0x100000000) == 0)
LABEL_62:
    LaunchServices::LocalizedString::dispose((LaunchServices::LocalizedString *)&v51, v39);

  return v7 | (unint64_t)(a3 << 8);
}

void sub_182984018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void LaunchServices::LocalizedString::dispose(LaunchServices::LocalizedString *this, _LSDatabase *a2)
{
  _LSDatabase *v3;
  _LSDatabase *v4;

  v3 = a2;
  v4 = v3;
  if ((*((_BYTE *)this + 8) & 2) != 0)
  {
    _CSStringRelease();
    _CSStringRelease();
  }
  else
  {
    _LSDatabaseDisposeStringArray(v3, *(_DWORD *)this);
    _LSDatabaseDisposeStringArray(v4, *((_DWORD *)this + 1));
  }

}

void sub_18298415C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t LaunchServices::LocalizedString::Add(void *a1, void *a2, void *a3)
{
  _LSDatabase *v5;
  id v6;
  id v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v12;
  void *v13;
  unint64_t v14;
  int v15;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (!v5)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "static _LSLocalizedStringID LaunchServices::LocalizedString::Add(_LSDatabase *__strong _Nonnull, NSDictionary<NSString *,NSString *> *__strong _Nonnull, NSString *__strong _Nullable)");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "handleFailureInFunction:file:lineNumber:description:", v13, CFSTR("LSLocalizedString.mm"), 124, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("db != nil"));

  }
  v8 = LaunchServices::LocalizedString::Create(v5, v6, (uint64_t)v7);
  if ((v9 & 0xFF00000000) != 0)
  {
    v14 = v8;
    v15 = v9;
    v10 = CSStoreAllocUnitWithData();
    if (!(_DWORD)v10)
      LaunchServices::LocalizedString::dispose((LaunchServices::LocalizedString *)&v14, v5);
  }
  else
  {
    v10 = 0;
  }

  return v10;
}

void sub_1829842A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void LaunchServices::LocalizedString::Remove(LaunchServices::LocalizedString *this, _LSDatabase *a2)
{
  LaunchServices::LocalizedString *v3;
  LaunchServices::LocalizedString *v4;
  void *v5;
  void *v6;
  _LSDatabase *v7;

  v3 = this;
  v7 = (_LSDatabase *)v3;
  if (!v3)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "static void LaunchServices::LocalizedString::Remove(_LSDatabase *__strong _Nonnull, _LSLocalizedStringID)");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("LSLocalizedString.mm"), 143, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("db != nil"));

    v3 = 0;
  }
  v4 = (LaunchServices::LocalizedString *)LaunchServices::LocalizedString::Get(v3, a2);
  if (v4)
  {
    LaunchServices::LocalizedString::dispose(v4, v7);
    CSStoreFreeUnit();
  }

}

void sub_1829843D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void LaunchServices::LocalizedString::GetVisualizationFunctions(id (**a1)(LaunchServices::LocalizedString **this, LSContext *a2, _LSDatabase *a3)@<X8>)
{
  *a1 = LaunchServices::Localization::getSummaryOfLocalizedString;
  a1[1] = (id (*)(LaunchServices::LocalizedString **, LSContext *, _LSDatabase *))LaunchServices::Localization::displayLocalizedString;
  a1[2] = 0;
}

id LaunchServices::Localization::getSummaryOfLocalizedString(LaunchServices::LocalizedString **this, LSContext *a2, _LSDatabase *a3)
{
  void *v4;

  v4 = (void *)LaunchServices::LocalizedString::Get(*this, a3);
  if (v4)
  {
    LaunchServices::LocalizedString::localizeUnsafely((uint64_t)v4, *this, 0);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  return v4;
}

BOOL LaunchServices::Localization::displayLocalizedString(LaunchServices::LocalizedString **this, LSContext *a2, _LSDatabase *a3, CSStore2::AttributedStringWriter *a4, LaunchServices::DumpWriter *a5)
{
  BOOL *v7;
  LSContext *v8;
  NSArray *v9;
  NSNumber *v10;
  NSNumber *v11;
  BOOL v13[2];

  v8 = (LSContext *)LaunchServices::LocalizedString::Get(*this, a3);
  if (v8)
  {
    *(_WORD *)v13 = 0;
    LaunchServices::Localization::getLocalizedValuesForDisplay((_LSDatabase **)this, v8, (const LaunchServices::LocalizedString *)&v13[1], v13, v7);
    v9 = (NSArray *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v13[1]);
    v10 = (NSNumber *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::number(a4, CFSTR("default only"), v10);

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v13[0]);
    v11 = (NSNumber *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::number(a4, CFSTR("all values equal"), v11);

    CSStore2::AttributedStringWriter::array(a4, v9);
  }
  return v8 != 0;
}

void sub_182984538(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void LaunchServices::CanonicalString::Create(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, _BYTE *a4@<X8>)
{
  __CFString *v7;
  id v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  _LSDatabase *v15;
  __int128 v16;

  v15 = a1;
  v7 = a2;
  v8 = a3;
  *a4 = 0;
  a4[16] = 0;
  if (!v15)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "static std::optional<CanonicalString> LaunchServices::CanonicalString::Create(_LSDatabase *__strong _Nonnull, NSString *__strong _Nonnull, NSDictionary<NSString *,NSString *> *__strong _Nonnull)");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "handleFailureInFunction:file:lineNumber:description:", v12, CFSTR("LSLocalizedString.mm"), 429, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("db != nil"));

    if (v7)
      goto LABEL_3;
LABEL_11:
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "static std::optional<CanonicalString> LaunchServices::CanonicalString::Create(_LSDatabase *__strong _Nonnull, NSString *__strong _Nonnull, NSDictionary<NSString *,NSString *> *__strong _Nonnull)");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "handleFailureInFunction:file:lineNumber:description:", v14, CFSTR("LSLocalizedString.mm"), 430, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("canonical != nil"));

    goto LABEL_3;
  }
  if (!v7)
    goto LABEL_11;
LABEL_3:
  v16 = 0uLL;
  if (v8
    && objc_msgSend(v8, "count")
    && (LODWORD(v16) = _LSDatabaseCreateStringForCFString(v15, v7, 0), (_DWORD)v16)
    && (v9 = LaunchServices::LocalizedString::Create(v15, v8, (uint64_t)v7), (v10 & 0xFF00000000) != 0))
  {
    *(_QWORD *)((char *)&v16 + 4) = v9;
    HIDWORD(v16) = v10;
    *(_OWORD *)a4 = v16;
    a4[16] = 1;
  }
  else
  {
    LaunchServices::CanonicalString::dispose((LaunchServices::CanonicalString *)&v16, v15);
  }

}

void sub_182984710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void LaunchServices::CanonicalString::dispose(LaunchServices::CanonicalString *this, _LSDatabase *a2)
{
  _LSDatabase *v3;

  v3 = a2;
  _CSStringRelease();
  LaunchServices::LocalizedString::dispose((LaunchServices::CanonicalString *)((char *)this + 4), v3);

}

void sub_1829847A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t LaunchServices::CanonicalString::Add(void *a1, void *a2, void *a3)
{
  _LSDatabase *v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  __int128 v14;
  __int128 v15;
  char v16;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (v5)
  {
    if (v6)
      goto LABEL_3;
LABEL_9:
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "static _LSCanonicalStringID LaunchServices::CanonicalString::Add(_LSDatabase *__strong _Nonnull, NSString *__strong _Nonnull, NSDictionary<NSString *,NSString *> *__strong _Nonnull)");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "handleFailureInFunction:file:lineNumber:description:", v12, CFSTR("LSLocalizedString.mm"), 464, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("canonical != nil"));

    if (v7)
      goto LABEL_4;
LABEL_10:
    v8 = 0;
    goto LABEL_11;
  }
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "static _LSCanonicalStringID LaunchServices::CanonicalString::Add(_LSDatabase *__strong _Nonnull, NSString *__strong _Nonnull, NSDictionary<NSString *,NSString *> *__strong _Nonnull)");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "handleFailureInFunction:file:lineNumber:description:", v10, CFSTR("LSLocalizedString.mm"), 463, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("db != nil"));

  if (!v6)
    goto LABEL_9;
LABEL_3:
  if (!v7)
    goto LABEL_10;
LABEL_4:
  if (!objc_msgSend(v7, "count"))
    goto LABEL_10;
  LaunchServices::CanonicalString::Create(v5, v6, v7, &v15);
  if (!v16)
    goto LABEL_10;
  v14 = v15;
  v8 = CSStoreAllocUnitWithData();
  if (!(_DWORD)v8)
    LaunchServices::CanonicalString::dispose((LaunchServices::CanonicalString *)&v14, v5);
LABEL_11:

  return v8;
}

void sub_182984974(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v4;

  _Unwind_Resume(a1);
}

uint64_t LaunchServices::CanonicalString::Get(LaunchServices::CanonicalString *this, _LSDatabase *a2)
{
  LaunchServices::CanonicalString *v2;
  uint64_t Unit;
  void *v5;
  void *v6;

  v2 = this;
  if (!v2)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "static const CanonicalString *LaunchServices::CanonicalString::Get(_LSDatabase *__strong _Nonnull, _LSCanonicalStringID)");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("LSLocalizedString.mm"), 495, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("db != nil"));

  }
  Unit = CSStoreGetUnit();

  return Unit;
}

void sub_182984A94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t LaunchServices::CanonicalString::Find(LaunchServices::CanonicalString *this, _LSDatabase *a2, NSString *a3)
{
  LaunchServices::CanonicalString *v4;
  _LSDatabase *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  v4 = this;
  v5 = a2;
  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v11 = 0;
  if (_LSDatabaseGetStringForCFString(v4, (const __CFString *)v5, 0))
    _CSStoreEnumerateUnits();
  v6 = v9[3];
  _Block_object_dispose(&v8, 8);

  return v6;
}

void sub_182984BAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  void *v8;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t ___ZN14LaunchServices15CanonicalString4FindEP11_LSDatabaseP8NSString_block_invoke(uint64_t result, uint64_t a2, _DWORD *a3, uint64_t a4, _BYTE *a5)
{
  if (*a3 == *(_DWORD *)(result + 40))
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a3;
    *a5 = 1;
  }
  return result;
}

uint64_t LaunchServices::CanonicalString::getLocalizedString(LaunchServices::CanonicalString *this)
{
  return (uint64_t)this + 4;
}

void LaunchServices::CanonicalString::GetVisualizationFunctions(id (**a1)(LaunchServices::CanonicalString **this, LSContext *a2, _LSDatabase *a3)@<X8>)
{
  *a1 = LaunchServices::Localization::getSummaryOfCanonicalString;
  a1[1] = (id (*)(LaunchServices::CanonicalString **, LSContext *, _LSDatabase *))LaunchServices::Localization::displayCanonicalString;
  a1[2] = 0;
}

id LaunchServices::Localization::getSummaryOfCanonicalString(LaunchServices::CanonicalString **this, LSContext *a2, _LSDatabase *a3)
{
  void *v3;

  v3 = (void *)LaunchServices::CanonicalString::Get(*this, a3);
  if (v3)
    v3 = (void *)_CSStringCopyCFString();
  return v3;
}

BOOL LaunchServices::Localization::displayCanonicalString(LaunchServices::CanonicalString **this, LSContext *a2, _LSDatabase *a3, CSStore2::AttributedStringWriter *a4, LaunchServices::DumpWriter *a5)
{
  uint64_t v7;
  NSString *v8;
  BOOL *v9;
  NSArray *v10;

  v7 = LaunchServices::CanonicalString::Get(*this, a3);
  if (v7)
  {
    v8 = (NSString *)_CSStringCopyCFString();
    CSStore2::AttributedStringWriter::string(a4, CFSTR("canonical"), v8);
    LaunchServices::Localization::getLocalizedValuesForDisplay((_LSDatabase **)this, (LSContext *)(v7 + 4), 0, 0, v9);
    v10 = (NSArray *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::array(a4, CFSTR("localized"), v10);

  }
  return v7 != 0;
}

void sub_182984D10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id LaunchServices::Localization::getLocalizedValuesForDisplay(_LSDatabase **this, LSContext *a2, const LaunchServices::LocalizedString *a3, BOOL *a4, BOOL *a5)
{
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t i;
  void *v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t j;
  void *v26;
  NSString *v27;
  NSString *v28;
  NSMutableAttributedString *v29;
  void *context;
  _LSDatabase **v32;
  id obj;
  id obja;
  id v35;
  NSString *v36;
  NSString *v37;
  NSString *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  id (*v50)(uint64_t, uint64_t);
  void (*v51)(uint64_t);
  uint64_t v52;
  id v53[33];
  _BYTE v54[128];
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v35 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v9 = MEMORY[0x186DAE7A0]();
  +[_LSStringLocalizer missingLocalizationPlaceholder](_LSStringLocalizer, "missingLocalizationPlaceholder");
  context = (void *)v9;
  v32 = this;
  v36 = (NSString *)objc_claimAutoreleasedReturnValue();
  LaunchServices::LocalizedString::getAllUnsafeLocalizations((LaunchServices::LocalizedString *)a2, *this, v36, (BOOL *)a3, a4);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = v10;
  if (!v10)
    goto LABEL_34;
  objc_msgSend(v10, "allValues");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3550]), "initWithArray:", obj);
  v13 = v12;
  if (v12)
  {
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v14 = v12;
    v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v43, &v47, 16);
    if (v15)
    {
      v16 = 0;
      v17 = 0;
      v18 = *(_QWORD *)v44;
      do
      {
        for (i = 0; i != v15; ++i)
        {
          if (*(_QWORD *)v44 != v18)
            objc_enumerationMutation(v14);
          v20 = *(void **)(*((_QWORD *)&v43 + 1) + 8 * i);
          if (objc_msgSend(v14, "countForObject:", v20) == 1)
          {
            v21 = v20;

            ++v16;
            v17 = v21;
          }
        }
        v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v43, &v47, 16);
      }
      while (v15);

      if (v16 == 1 && objc_msgSend(v14, "count") != 1)
        goto LABEL_18;
    }
    else
    {

      v17 = 0;
    }

  }
  v17 = 0;
LABEL_18:

  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  objc_msgSend(v11, "allKeys");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "sortedArrayUsingSelector:", sel_caseInsensitiveCompare_);
  obja = (id)objc_claimAutoreleasedReturnValue();

  v23 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v39, v54, 16);
  if (v23)
  {
    v24 = *(_QWORD *)v40;
    do
    {
      for (j = 0; j != v23; ++j)
      {
        if (*(_QWORD *)v40 != v24)
          objc_enumerationMutation(obja);
        v26 = *(void **)(*((_QWORD *)&v39 + 1) + 8 * j);
        objc_msgSend(v11, "objectForKeyedSubscript:", v26);
        v27 = (NSString *)objc_claimAutoreleasedReturnValue();
        v28 = v27;
        if (v27)
        {
          if (-[NSString isEqual:](v27, "isEqual:", v17))
          {
            v29 = (NSMutableAttributedString *)objc_alloc_init(MEMORY[0x1E0CB3778]);
            v47 = 0;
            v48 = &v47;
            v49 = 0x13812000000;
            v50 = __Block_byref_object_copy__34;
            v51 = __Block_byref_object_dispose__35;
            v52 = 256;
            LaunchServices::DumpWriter::DumpWriter((LaunchServices::DumpWriter *)v53, *v32, v29);
            CSStore2::AttributedStringWriter::setInsertsNewlines((CSStore2::AttributedStringWriter *)(v48 + 6));
            v37 = v28;
            v38 = v36;
            CSStore2::AttributedStringWriter::withTextAndBackgroundColor();
            objc_msgSend(v35, "addObject:", v29);

            _Block_object_dispose(&v47, 8);
            LaunchServices::DumpWriter::~DumpWriter(v53);
          }
          else
          {
            v29 = (NSMutableAttributedString *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithCapacity:", objc_msgSend(v26, "length") + -[NSString length](v28, "length") + 7);
            -[NSMutableAttributedString appendString:](v29, "appendString:", CFSTR("\""));
            -[NSMutableAttributedString appendString:](v29, "appendString:", v26);
            if (v28 == v36)
            {
              -[NSMutableAttributedString appendString:](v29, "appendString:", CFSTR("\" = ?"));
            }
            else
            {
              -[NSMutableAttributedString appendString:](v29, "appendString:", CFSTR("\" = \""));
              -[NSMutableAttributedString appendString:](v29, "appendString:", v28);
              -[NSMutableAttributedString appendString:](v29, "appendString:", CFSTR("\""));
            }
            objc_msgSend(v35, "addObject:", v29);
          }

        }
      }
      v23 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v39, v54, 16);
    }
    while (v23);
  }

LABEL_34:
  objc_autoreleasePoolPop(context);
  return v35;
}

void sub_1829851EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

id __Block_byref_object_copy__34(uint64_t a1, uint64_t a2)
{
  id result;

  CSStore2::AttributedStringWriter::AttributedStringWriter((CSStore2::AttributedStringWriter *)(a1 + 48), (const CSStore2::AttributedStringWriter *)(a2 + 48));
  *(_QWORD *)(a1 + 48) = &off_1E103E010;
  result = *(id *)(a2 + 304);
  *(_QWORD *)(a1 + 304) = result;
  return result;
}

uint64_t ___ZN14LaunchServices12LocalizationL28getLocalizedValuesForDisplayEP9LSContextPKNS_15LocalizedStringEPbS6__block_invoke(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  CSStore2::AttributedStringWriter *v4;

  v1 = a1[4];
  v2 = a1[5];
  v3 = a1[6];
  v4 = (CSStore2::AttributedStringWriter *)(*(_QWORD *)(a1[7] + 8) + 48);
  if (v1 == v2)
    return CSStore2::AttributedStringWriter::format(v4, 0, CFSTR("\"%@\" = ?"), v3);
  else
    return CSStore2::AttributedStringWriter::format(v4, 0, CFSTR("\"%@\" = \"%@\""), v3, v1);
}

void sub_182985454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)_LSEligibilityListenerNotificationToken;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void LaunchServices::EligibilityCache::removeEligibilityChangedListener(os_unfair_lock_s *this, objc_object *a2)
{
  objc_object *v3;
  objc_object *v4;

  v3 = a2;
  os_unfair_lock_lock(this);

  v4 = v3;
  std::__tree<std::__value_type<unsigned long,void({block_pointer} {__strong})(void)>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void({block_pointer} {__strong})(void)>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void({block_pointer} {__strong})(void)>>>::__erase_unique<unsigned long>((uint64_t)&this[8], (unint64_t *)&v4);
  os_unfair_lock_unlock(this);
}

void sub_1829854D4(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

BOOL _LSServer_AcquiesceToDeputizationForDomain(uint64_t a1)
{
  _LSAssertRunningInServer((uint64_t)"BOOL _LSServer_AcquiesceToDeputizationForDomain(os_eligibility_domain_t)");
  return a1 == 4;
}

id LaunchServices::EligibilityCache::getNotifyStateQueue(LaunchServices::EligibilityCache *this)
{
  if (LaunchServices::EligibilityCache::getNotifyStateQueue(void)::onceToken != -1)
    dispatch_once(&LaunchServices::EligibilityCache::getNotifyStateQueue(void)::onceToken, &__block_literal_global_47);
  return (id)LaunchServices::EligibilityCache::getNotifyStateQueue(void)::result;
}

void ___ZN14LaunchServices16EligibilityCache19getNotifyStateQueueEv_block_invoke()
{
  dispatch_queue_t v0;
  void *v1;
  NSObject *v2;

  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v2 = objc_claimAutoreleasedReturnValue();
  v0 = dispatch_queue_create("com.apple.launchservices.eligibilitycache", v2);
  v1 = (void *)LaunchServices::EligibilityCache::getNotifyStateQueue(void)::result;
  LaunchServices::EligibilityCache::getNotifyStateQueue(void)::result = (uint64_t)v0;

}

id LaunchServices::EligibilityCache::getCallbackQueue(LaunchServices::EligibilityCache *this)
{
  if (LaunchServices::EligibilityCache::getCallbackQueue(void)::onceToken != -1)
    dispatch_once(&LaunchServices::EligibilityCache::getCallbackQueue(void)::onceToken, &__block_literal_global_8);
  return (id)LaunchServices::EligibilityCache::getCallbackQueue(void)::result;
}

void ___ZN14LaunchServices16EligibilityCache16getCallbackQueueEv_block_invoke()
{
  dispatch_queue_t v0;
  void *v1;
  NSObject *v2;

  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v2 = objc_claimAutoreleasedReturnValue();
  v0 = dispatch_queue_create("com.apple.launchservices.eligibilitycache.callbacks", v2);
  v1 = (void *)LaunchServices::EligibilityCache::getCallbackQueue(void)::result;
  LaunchServices::EligibilityCache::getCallbackQueue(void)::result = (uint64_t)v0;

}

void LaunchServices::EligibilityCache::ensureNotificationListener(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  NSObject *v4;
  uint8_t v5[16];
  _QWORD v6[6];

  if (!*(_BYTE *)(a1 + 80))
  {
    v2 = a1 + 64;
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = ___ZN14LaunchServices16EligibilityCache26ensureNotificationListenerERKNSt3__110lock_guardINS_17unfair_lock_mutexEEE_block_invoke;
    v6[3] = &__block_descriptor_48_e5_v8__0l;
    v6[4] = a1;
    v6[5] = a1;
    v3 = (void *)MEMORY[0x186DAE9BC](v6);
    std::__optional_destruct_base<LaunchServices::EligibilityCache::NotifyState,false>::reset[abi:nn180100](v2);
    LaunchServices::EligibilityCache::NotifyState::NotifyState(v2, v3);
    *(_BYTE *)(a1 + 80) = 1;

    _LSDefaultLog();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_182882000, v4, OS_LOG_TYPE_DEFAULT, "registered eligibility notification listener", v5, 2u);
    }

  }
}

void sub_182985710(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN14LaunchServices16EligibilityCache26ensureNotificationListenerERKNSt3__110lock_guardINS_17unfair_lock_mutexEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  os_unfair_lock_s *v4;
  _QWORD *v5;
  _QWORD *v6;
  LaunchServices::EligibilityCache *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  NSObject *v12;
  _QWORD block[4];
  _QWORD v14[3];
  uint8_t buf[8];
  uint64_t *v16;
  uint64_t v17;
  uint8_t *v18;

  v2 = *(_QWORD *)(a1 + 32);
  _LSDefaultLog();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_182882000, v3, OS_LOG_TYPE_DEFAULT, "eligibility changed for cache", buf, 2u);
  }

  v4 = *(os_unfair_lock_s **)(a1 + 40);
  os_unfair_lock_lock(v4);
  v6 = *(_QWORD **)(v2 + 16);
  v5 = (_QWORD *)(v2 + 16);
  std::__tree<std::__value_type<os_eligibility_domain_t,os_eligibility_answer_t>,std::__map_value_compare<os_eligibility_domain_t,std::__value_type<os_eligibility_domain_t,os_eligibility_answer_t>,std::less<os_eligibility_domain_t>,true>,std::allocator<std::__value_type<os_eligibility_domain_t,os_eligibility_answer_t>>>::destroy((uint64_t)(v5 - 1), v6);
  *(v5 - 1) = v5;
  *v5 = 0;
  v5[1] = 0;
  *(_QWORD *)buf = 0;
  v16 = 0;
  v17 = 0;
  v8 = (_QWORD *)v5[2];
  if (v8 != v5 + 3)
  {
    do
    {
      v7 = (LaunchServices::EligibilityCache *)std::vector<void({block_pointer} {__strong})(void),std::allocator<void({block_pointer} {__strong})(void)>>::push_back[abi:nn180100]((char **)buf, v8 + 5);
      v9 = (_QWORD *)v8[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (_QWORD *)v8[2];
          v11 = *v10 == (_QWORD)v8;
          v8 = v10;
        }
        while (!v11);
      }
      v8 = v10;
    }
    while (v10 != v5 + 3);
  }
  LaunchServices::EligibilityCache::getCallbackQueue(v7);
  v12 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3321888768;
  block[2] = ___ZN14LaunchServices16EligibilityCache26ensureNotificationListenerERKNSt3__110lock_guardINS_17unfair_lock_mutexEEE_block_invoke_10;
  block[3] = &__block_descriptor_56_ea8_32c70_ZTSNSt3__16vectorIU8__strongU13block_pointerFvvENS_9allocatorIS3_EEEE_e5_v8__0l;
  memset(v14, 0, sizeof(v14));
  std::vector<void({block_pointer} {__strong})(void),std::allocator<void({block_pointer} {__strong})(void)>>::__init_with_size[abi:nn180100]<void({block_pointer} {__strong}*)(void),void({block_pointer} {__strong}*)(void)>((char *)v14, *(uint64_t **)buf, v16, ((uint64_t)v16 - *(_QWORD *)buf) >> 3);
  dispatch_async(v12, block);

  v18 = (uint8_t *)v14;
  std::vector<LSApplicationRecord * {__strong}>::__destroy_vector::operator()[abi:nn180100]((void ***)&v18);
  v18 = buf;
  std::vector<LSApplicationRecord * {__strong}>::__destroy_vector::operator()[abi:nn180100]((void ***)&v18);
  os_unfair_lock_unlock(v4);
}

void sub_1829858A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  os_unfair_lock_s *v17;
  void *v18;
  uint64_t v19;

  *(_QWORD *)(v19 - 40) = &a17;
  std::vector<LSApplicationRecord * {__strong}>::__destroy_vector::operator()[abi:nn180100]((void ***)(v19 - 40));
  os_unfair_lock_unlock(v17);
  _Unwind_Resume(a1);
}

uint64_t std::vector<void({block_pointer} {__strong})(void),std::allocator<void({block_pointer} {__strong})(void)>>::push_back[abi:nn180100](char **a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t result;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  int64x2_t v20;
  char *v21;
  uint64_t v22;
  int64x2_t v23;
  char *v24;
  uint64_t v25;

  v6 = (unint64_t)a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(uint64_t **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v10 = ((char *)v7 - *a1) >> 3;
    if ((unint64_t)(v10 + 1) >> 61)
      abort();
    v11 = v5 - (_QWORD)*a1;
    v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v25 = v4;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<os_eligibility_answer_t>>(v4, v13);
    else
      v14 = 0;
    v15 = &v14[8 * v10];
    v16 = &v14[8 * v13];
    v24 = v16;
    *(_QWORD *)v15 = MEMORY[0x186DAE9BC](*a2);
    v9 = v15 + 8;
    v23.i64[1] = (uint64_t)(v15 + 8);
    v18 = *a1;
    v17 = a1[1];
    if (v17 == *a1)
    {
      v20 = vdupq_n_s64((unint64_t)v17);
    }
    else
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *(_QWORD *)v17 = 0;
        *((_QWORD *)v15 - 1) = v19;
        v15 -= 8;
      }
      while (v17 != v18);
      v20 = *(int64x2_t *)a1;
      v9 = (char *)v23.i64[1];
      v16 = v24;
    }
    *a1 = v15;
    a1[1] = v9;
    v23 = v20;
    v21 = a1[2];
    a1[2] = v16;
    v24 = v21;
    v22 = v20.i64[0];
    result = std::__split_buffer<LSApplicationRecord * {__strong}>::~__split_buffer((uint64_t)&v22);
  }
  else
  {
    result = MEMORY[0x186DAE9BC](*a2);
    *v7 = result;
    v9 = (char *)(v7 + 1);
  }
  a1[1] = v9;
  return result;
}

void ___ZN14LaunchServices16EligibilityCache26ensureNotificationListenerERKNSt3__110lock_guardINS_17unfair_lock_mutexEEE_block_invoke_10(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  void (**v3)(void);

  v1 = *(_QWORD **)(a1 + 32);
  v2 = *(_QWORD **)(a1 + 40);
  while (v1 != v2)
  {
    v3 = (void (**)(void))MEMORY[0x186DAE9BC](*v1);
    v3[2]();

    ++v1;
  }
}

void sub_182985A38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

char *__copy_helper_block_ea8_32c70_ZTSNSt3__16vectorIU8__strongU13block_pointerFvvENS_9allocatorIS3_EEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v2 = a1 + 32;
  *(_QWORD *)(v2 + 16) = 0;
  return std::vector<void({block_pointer} {__strong})(void),std::allocator<void({block_pointer} {__strong})(void)>>::__init_with_size[abi:nn180100]<void({block_pointer} {__strong}*)(void),void({block_pointer} {__strong}*)(void)>((char *)v2, *(uint64_t **)(a2 + 32), *(uint64_t **)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3);
}

void __destroy_helper_block_ea8_32c70_ZTSNSt3__16vectorIU8__strongU13block_pointerFvvENS_9allocatorIS3_EEEE(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 32);
  std::vector<LSApplicationRecord * {__strong}>::__destroy_vector::operator()[abi:nn180100](&v1);
}

BOOL LaunchServices::EligibilityCache::refreshAnswerForDomain(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  id v11;
  NSObject *v12;
  __int128 v14;
  id v15;

  LaunchServices::EligibilityCache::ensureNotificationListener(a1);
  v7 = *(_QWORD *)(a1 + 56);
  v15 = 0;
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, id *))(*(_QWORD *)v7 + 16))(v7, a3, &v15);
  v10 = v9;
  v11 = v15;
  if (v10)
  {
    *(_QWORD *)&v14 = a3;
    *((_QWORD *)&v14 + 1) = v8;
    std::__tree<std::__value_type<os_eligibility_domain_t,os_eligibility_answer_t>,std::__map_value_compare<os_eligibility_domain_t,std::__value_type<os_eligibility_domain_t,os_eligibility_answer_t>,std::less<os_eligibility_domain_t>,true>,std::allocator<std::__value_type<os_eligibility_domain_t,os_eligibility_answer_t>>>::__emplace_unique_key_args<os_eligibility_domain_t,std::pair<os_eligibility_domain_t,os_eligibility_answer_t>>((uint64_t **)(a1 + 8), (unint64_t *)&v14, &v14);
  }
  else
  {
    _LSDefaultLog();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      LaunchServices::EligibilityCache::refreshAnswerForDomain((uint64_t)v11, a3, v12);

    if (a4)
      *a4 = objc_retainAutorelease(v11);
  }

  return v10 != 0;
}

void sub_182985B6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL LaunchServices::EligibilityCache::getEligibilityGatedBrowsersCanBind(LaunchServices::EligibilityCache *this)
{
  unint64_t v1;
  char v2;
  char v3;
  id v4;
  NSObject *v5;
  _BOOL8 v6;
  NSObject *v7;
  id v9;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v9 = 0;
  v1 = LaunchServices::EligibilityCache::cachedAnswerForDomain((uint64_t)this, 4uLL, &v9);
  v3 = v2;
  v4 = v9;
  if (v3)
  {
    if (v1 != 2 && v1 != 4)
    {
      _LSDefaultLog();
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        v11 = "interpretEligibilityAnswerForBrowserDomain";
        v12 = 1024;
        v13 = v1;
        _os_log_impl(&dword_182882000, v5, OS_LOG_TYPE_DEFAULT, "%s: currently not eligible for gated browser (answer %d)", buf, 0x12u);
      }

    }
    v6 = v1 == 4;
  }
  else
  {
    _LSDefaultLog();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      LaunchServices::EligibilityCache::getEligibilityGatedBrowsersCanBind((uint64_t)v4, v7);

    v6 = 0;
  }

  return v6;
}

void sub_182985CB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

unint64_t LaunchServices::EligibilityCache::cachedAnswerForDomain(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  BOOL v11;
  _QWORD *v12;
  _BOOL4 refreshed;
  id v14;
  void *v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  BOOL v19;
  _QWORD *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  id v26;

  os_unfair_lock_lock((os_unfair_lock_t)a1);
  v8 = (_QWORD *)(a1 + 16);
  v7 = *(_QWORD **)(a1 + 16);
  if (!v7)
    goto LABEL_12;
  v9 = (_QWORD *)(a1 + 16);
  do
  {
    v10 = v7[4];
    v11 = v10 >= a2;
    if (v10 >= a2)
      v12 = v7;
    else
      v12 = v7 + 1;
    if (v11)
      v9 = v7;
    v7 = (_QWORD *)*v12;
  }
  while (*v12);
  if (v9 != v8 && v9[4] <= a2)
  {
    v23 = v9[5];
    v24 = v23 & 0xFFFFFFFFFFFFFF00;
  }
  else
  {
LABEL_12:
    v26 = 0;
    refreshed = LaunchServices::EligibilityCache::refreshAnswerForDomain(a1, v6, a2, &v26);
    v14 = v26;
    v15 = v14;
    if (refreshed)
    {
      v16 = (_QWORD *)*v8;
      if (!*v8)
        goto LABEL_24;
      v17 = (_QWORD *)(a1 + 16);
      do
      {
        v18 = v16[4];
        v19 = v18 >= a2;
        if (v18 >= a2)
          v20 = v16;
        else
          v20 = v16 + 1;
        if (v19)
          v17 = v16;
        v16 = (_QWORD *)*v20;
      }
      while (*v20);
      if (v17 == v8 || v17[4] > a2)
      {
LABEL_24:
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "std::optional<os_eligibility_answer_t> LaunchServices::EligibilityCache::cachedAnswerForDomain(os_eligibility_domain_t, NSError *__autoreleasing * _Nullable)");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v21, "handleFailureInFunction:file:lineNumber:description:", v22, CFSTR("LSEligibility.mm"), 208, CFSTR("Didn't find domain %llu in domain cache after refreshing successfully"), a2);

        v17 = (_QWORD *)(a1 + 16);
      }
      v23 = v17[5];
      v24 = v23 & 0xFFFFFFFFFFFFFF00;
    }
    else
    {
      LOBYTE(v23) = 0;
      v24 = 0;
      if (a3)
        *a3 = objc_retainAutorelease(v14);
    }

  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
  return v24 & 0xFFFFFFFFFFFFFF00 | v23;
}

void sub_182985E7C(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;
  void *v2;
  void *v3;
  void *v4;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

_LSEligibilityListenerNotificationToken *LaunchServices::EligibilityCache::addEligibilityChangedListener(uint64_t a1, void *a2)
{
  id v3;
  _LSEligibilityListenerNotificationToken *v4;
  _LSEligibilityListenerNotificationToken *v6;
  id v7;

  v3 = a2;
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  LaunchServices::EligibilityCache::ensureNotificationListener(a1);
  v4 = -[_LSEligibilityListenerNotificationToken initWithEligibilityCache:]([_LSEligibilityListenerNotificationToken alloc], "initWithEligibilityCache:", a1);
  v6 = v4;
  v7 = (id)objc_msgSend(v3, "copy");
  std::__tree<std::__value_type<unsigned long,void({block_pointer} {__strong})(void)>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void({block_pointer} {__strong})(void)>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void({block_pointer} {__strong})(void)>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long,objc_object * {__strong}>>((uint64_t **)(a1 + 32), (unint64_t *)&v6, (uint64_t *)&v6);

  os_unfair_lock_unlock((os_unfair_lock_t)a1);
  return v4;
}

void sub_182985F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  os_unfair_lock_s *v11;
  void *v12;

  os_unfair_lock_unlock(v11);
  _Unwind_Resume(a1);
}

uint64_t LaunchServices::EligibilityCache::shared(LaunchServices::EligibilityCache *this)
{
  if (LaunchServices::EligibilityCache::shared(void)::onceToken != -1)
    dispatch_once(&LaunchServices::EligibilityCache::shared(void)::onceToken, &__block_literal_global_18_0);
  return LaunchServices::EligibilityCache::shared(void)::result;
}

uint64_t ___ZN14LaunchServices16EligibilityCache6sharedEv_block_invoke()
{
  _QWORD *v0;
  _QWORD *v1;
  char *v2;
  uint64_t result;

  if ((objc_msgSend((id)__LSDefaultsGetSharedInstance(), "isServer") & 1) != 0
    || (objc_msgSend((id)__LSDefaultsGetSharedInstance(), "hasServer") & 1) == 0)
  {
    v0 = (_QWORD *)operator new();
    v1 = v0;
  }
  else
  {
    v0 = (_QWORD *)operator new();
    v1 = v0;
  }
  *v0 = v2 + 16;
  result = operator new();
  *(_DWORD *)result = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 8) = result + 16;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = result + 40;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = v1;
  *(_BYTE *)(result + 64) = 0;
  *(_BYTE *)(result + 80) = 0;
  LaunchServices::EligibilityCache::shared(void)::result = result;
  return result;
}

void sub_18298608C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<os_eligibility_domain_t,os_eligibility_answer_t>,std::__map_value_compare<os_eligibility_domain_t,std::__value_type<os_eligibility_domain_t,os_eligibility_answer_t>,std::less<os_eligibility_domain_t>,true>,std::allocator<std::__value_type<os_eligibility_domain_t,os_eligibility_answer_t>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<os_eligibility_domain_t,os_eligibility_answer_t>,std::__map_value_compare<os_eligibility_domain_t,std::__value_type<os_eligibility_domain_t,os_eligibility_answer_t>,std::less<os_eligibility_domain_t>,true>,std::allocator<std::__value_type<os_eligibility_domain_t,os_eligibility_answer_t>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<os_eligibility_domain_t,os_eligibility_answer_t>,std::__map_value_compare<os_eligibility_domain_t,std::__value_type<os_eligibility_domain_t,os_eligibility_answer_t>,std::less<os_eligibility_domain_t>,true>,std::allocator<std::__value_type<os_eligibility_domain_t,os_eligibility_answer_t>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

char *std::vector<void({block_pointer} {__strong})(void),std::allocator<void({block_pointer} {__strong})(void)>>::__init_with_size[abi:nn180100]<void({block_pointer} {__strong}*)(void),void({block_pointer} {__strong}*)(void)>(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  char *v6;
  char **v7;
  uint64_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<void({block_pointer} {__strong})(void),std::allocator<void({block_pointer} {__strong})(void)>>::__vallocate[abi:nn180100](result, a4);
    v7 = (char **)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      result = (char *)MEMORY[0x186DAE9BC](v8);
      *v7++ = result;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

char *std::vector<void({block_pointer} {__strong})(void),std::allocator<void({block_pointer} {__strong})(void)>>::__vallocate[abi:nn180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    abort();
  result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<os_eligibility_answer_t>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void std::__optional_destruct_base<LaunchServices::EligibilityCache::NotifyState,false>::reset[abi:nn180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 16))
  {
    LaunchServices::notifyd::NotifyToken::~NotifyToken((LaunchServices::notifyd::NotifyToken *)(a1 + 8));

    *(_BYTE *)(a1 + 16) = 0;
  }
}

uint64_t LaunchServices::EligibilityCache::NotifyState::NotifyState(uint64_t a1, void *a2)
{
  LaunchServices::EligibilityCache *v3;
  void *v4;

  v3 = a2;
  LaunchServices::EligibilityCache::getNotifyStateQueue(v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_QWORD *)a1 = v4;
  LaunchServices::notifyd::NotifyToken::RegisterDispatch(CFSTR("com.apple.os-eligibility-domain.change"), v4, v3, (unsigned int *)(a1 + 8));

  return a1;
}

void sub_18298620C(_Unwind_Exception *a1)
{
  id *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<os_eligibility_domain_t,os_eligibility_answer_t>,std::__map_value_compare<os_eligibility_domain_t,std::__value_type<os_eligibility_domain_t,os_eligibility_answer_t>,std::less<os_eligibility_domain_t>,true>,std::allocator<std::__value_type<os_eligibility_domain_t,os_eligibility_answer_t>>>::__emplace_unique_key_args<os_eligibility_domain_t,std::pair<os_eligibility_domain_t,os_eligibility_answer_t>>(uint64_t **a1, unint64_t *a2, _OWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v10 + 2) = *a3;
    std::__tree<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::__map_value_compare<os_eligibility_domain_t,std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::less<os_eligibility_domain_t>,true>,std::allocator<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t *std::__tree<std::__value_type<unsigned long,void({block_pointer} {__strong})(void)>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void({block_pointer} {__strong})(void)>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void({block_pointer} {__strong})(void)>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long,objc_object * {__strong}>>(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x30uLL);
    v11 = *a3;
    v12 = a3[1];
    a3[1] = 0;
    v10[4] = v11;
    v10[5] = v12;
    std::__tree<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::__map_value_compare<os_eligibility_domain_t,std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::less<os_eligibility_domain_t>,true>,std::allocator<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

uint64_t std::__tree<std::__value_type<unsigned long,void({block_pointer} {__strong})(void)>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void({block_pointer} {__strong})(void)>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void({block_pointer} {__strong})(void)>>>::__erase_unique<unsigned long>(uint64_t a1, unint64_t *a2)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;

  v2 = *(_QWORD **)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = a1 + 8;
  do
  {
    v5 = v2[4];
    v6 = v5 >= v3;
    if (v5 >= v3)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (v6)
      v4 = (uint64_t)v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(_QWORD *)(v4 + 32))
    return 0;
  std::__tree<std::__value_type<unsigned long,void({block_pointer} {__strong})(void)>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void({block_pointer} {__strong})(void)>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void({block_pointer} {__strong})(void)>>>::erase((uint64_t **)a1, v4);
  return 1;
}

uint64_t *std::__tree<std::__value_type<unsigned long,void({block_pointer} {__strong})(void)>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void({block_pointer} {__strong})(void)>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void({block_pointer} {__strong})(void)>>>::erase(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;

  v3 = std::__tree<std::__value_type<unsigned long,void({block_pointer} {__strong})(void)>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void({block_pointer} {__strong})(void)>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void({block_pointer} {__strong})(void)>>>::__remove_node_pointer(a1, (uint64_t *)a2);

  operator delete((void *)a2);
  return v3;
}

uint64_t *std::__tree<std::__value_type<unsigned long,void({block_pointer} {__strong})(void)>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void({block_pointer} {__strong})(void)>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void({block_pointer} {__strong})(void)>>>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  BOOL v5;
  uint64_t *v6;

  v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      v3 = v2;
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    v4 = a2;
    do
    {
      v3 = (uint64_t *)v4[2];
      v5 = *v3 == (_QWORD)v4;
      v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2)
    *a1 = v3;
  v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v6, a2);
  return v3;
}

uint64_t *std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_7;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (v2)
  {
LABEL_7:
    v5 = 0;
    *(_QWORD *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  v5 = 1;
LABEL_8:
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 == v3)
  {
    *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      v7 = 0;
      result = (uint64_t *)v2;
    }
    else
    {
      v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
  }
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v12 = v7[2];
    if (*(uint64_t **)v12 == v7)
      break;
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *(_BYTE *)(v12 + 24) = 0;
      v13 = *(uint64_t **)(v12 + 8);
      v14 = *v13;
      *(_QWORD *)(v12 + 8) = *v13;
      if (v14)
        *(_QWORD *)(v14 + 16) = v12;
      v13[2] = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v13;
      *v13 = v12;
      *(_QWORD *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7)
        result = v7;
      v7 = *(uint64_t **)(*v7 + 8);
    }
    v15 = (_QWORD *)*v7;
    if (*v7 && !*((_BYTE *)v15 + 24))
    {
      v16 = (uint64_t *)v7[1];
      if (!v16)
        goto LABEL_56;
LABEL_55:
      if (*((_BYTE *)v16 + 24))
      {
LABEL_56:
        *((_BYTE *)v15 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v22 = v15[1];
        *v7 = v22;
        if (v22)
          *(_QWORD *)(v22 + 16) = v7;
        v15[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        v16 = v7;
      }
      else
      {
        v15 = v7;
      }
      v23 = v15[2];
      *((_BYTE *)v15 + 24) = *(_BYTE *)(v23 + 24);
      *(_BYTE *)(v23 + 24) = 1;
      *((_BYTE *)v16 + 24) = 1;
      v24 = *(uint64_t **)(v23 + 8);
      v25 = *v24;
      *(_QWORD *)(v23 + 8) = *v24;
      if (v25)
        *(_QWORD *)(v25 + 16) = v23;
      v24[2] = *(_QWORD *)(v23 + 16);
      *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
      *v24 = v23;
      goto LABEL_72;
    }
    v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24))
      goto LABEL_55;
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      v17 = result;
LABEL_53:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v17 + 24))
      goto LABEL_53;
LABEL_49:
    v7 = *(uint64_t **)(v17[2] + 8 * (*(_QWORD *)v17[2] == (_QWORD)v17));
  }
  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *(_BYTE *)(v12 + 24) = 0;
    v18 = v7[1];
    *(_QWORD *)v12 = v18;
    if (v18)
      *(_QWORD *)(v18 + 16) = v12;
    v7[2] = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(_QWORD *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12)
      result = v7;
    v7 = *(uint64_t **)v12;
  }
  v19 = (_QWORD *)*v7;
  if (*v7 && !*((_BYTE *)v19 + 24))
    goto LABEL_68;
  v20 = (uint64_t *)v7[1];
  if (!v20 || *((_BYTE *)v20 + 24))
  {
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24))
      v21 = v17 == result;
    else
      v21 = 1;
    if (v21)
      goto LABEL_53;
    goto LABEL_49;
  }
  if (v19 && !*((_BYTE *)v19 + 24))
  {
LABEL_68:
    v20 = v7;
  }
  else
  {
    *((_BYTE *)v20 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v26 = *v20;
    v7[1] = *v20;
    if (v26)
      *(_QWORD *)(v26 + 16) = v7;
    v20[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v20;
    *v20 = (uint64_t)v7;
    v7[2] = (uint64_t)v20;
    v19 = v7;
  }
  v23 = v20[2];
  *((_BYTE *)v20 + 24) = *(_BYTE *)(v23 + 24);
  *(_BYTE *)(v23 + 24) = 1;
  *((_BYTE *)v19 + 24) = 1;
  v24 = *(uint64_t **)v23;
  v27 = *(_QWORD *)(*(_QWORD *)v23 + 8);
  *(_QWORD *)v23 = v27;
  if (v27)
    *(_QWORD *)(v27 + 16) = v23;
  v24[2] = *(_QWORD *)(v23 + 16);
  *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(_QWORD *)(v23 + 16) = v24;
  return result;
}

void LaunchServices::DomainEvaluators::ServerDomainEvaluator::~ServerDomainEvaluator(LaunchServices::DomainEvaluators::ServerDomainEvaluator *this)
{
  JUMPOUT(0x186DADEF4);
}

uint64_t LaunchServices::DomainEvaluators::ServerDomainEvaluator::eligibilityForDomain(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  int domain_answer;

  _LSAssertRunningInServer((uint64_t)"virtual std::optional<os_eligibility_answer_t> LaunchServices::ServerDomainEvaluator"
                                    "::eligibilityForDomain(os_eligibility_domain_t, NSError *__autoreleasing *)");
  domain_answer = os_eligibility_get_domain_answer();
  if (domain_answer && a3)
  {
    _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2FE0], domain_answer, (uint64_t)"eligibilityForDomain", 94, 0);
    *a3 = (id)objc_claimAutoreleasedReturnValue();
  }
  return 0;
}

uint64_t LaunchServices::DomainEvaluators::ClientDomainEvaluator::eligibilityForDomain(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD v10[6];
  void (*v11[5])(_QWORD, _QWORD);
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  void (*v16)(uint64_t);
  id v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t);
  uint64_t (*v22)();
  uint64_t v23;
  char v24;
  char v25;

  v18 = 0;
  v19 = &v18;
  v20 = 0x4012000000;
  v21 = __Block_byref_object_copy__31;
  v22 = __Block_byref_object_dispose__31;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v12 = 0;
  v13 = &v12;
  v14 = 0x3032000000;
  v15 = __Block_byref_object_copy__22_0;
  v16 = __Block_byref_object_dispose__23_0;
  v17 = 0;
  v5 = MEMORY[0x1E0C809B0];
  v11[0] = (void (*)(_QWORD, _QWORD))MEMORY[0x1E0C809B0];
  v11[1] = (void (*)(_QWORD, _QWORD))3221225472;
  v11[2] = (void (*)(_QWORD, _QWORD))___ZN14LaunchServices16DomainEvaluators21ClientDomainEvaluator20eligibilityForDomainE23os_eligibility_domain_tPU15__autoreleasingP7NSError_block_invoke;
  v11[3] = (void (*)(_QWORD, _QWORD))&unk_1E103FB88;
  v11[4] = (void (*)(_QWORD, _QWORD))&v12;
  +[_LSDService synchronousXPCProxyWithErrorHandler:]((uint64_t)_LSDReadService, v11);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v10[0] = v5;
  v10[1] = 3221225472;
  v10[2] = ___ZN14LaunchServices16DomainEvaluators21ClientDomainEvaluator20eligibilityForDomainE23os_eligibility_domain_tPU15__autoreleasingP7NSError_block_invoke_2;
  v10[3] = &unk_1E1044408;
  v10[4] = &v18;
  v10[5] = &v12;
  objc_msgSend(v6, "getEligibilityAnswerForDomain:withCompletionHandler:", a2, v10);

  v7 = v19;
  if (a3 && !*((_BYTE *)v19 + 56))
  {
    *a3 = objc_retainAutorelease((id)v13[5]);
    v7 = v19;
  }
  v8 = v7[6];
  _Block_object_dispose(&v12, 8);

  _Block_object_dispose(&v18, 8);
  return v8;
}

void sub_182986A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26,char a27)
{
  void *v27;

  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__22_0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__23_0(uint64_t a1)
{

}

void ___ZN14LaunchServices16DomainEvaluators21ClientDomainEvaluator20eligibilityForDomainE23os_eligibility_domain_tPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

void ___ZN14LaunchServices16DomainEvaluators21ClientDomainEvaluator20eligibilityForDomainE23os_eligibility_domain_tPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;

  v10 = a2;
  v5 = a3;
  if (v10)
  {
    v6 = objc_msgSend(v10, "unsignedLongLongValue");
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    *(_QWORD *)(v7 + 48) = v6;
    *(_BYTE *)(v7 + 56) = 1;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v9 = *(void **)(v8 + 40);
  *(_QWORD *)(v8 + 40) = v5;

}

void sub_182986B40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t timeWorkBlock(void *a1)
{
  void (**v1)(_QWORD);
  uint64_t v2;

  v1 = a1;
  v2 = mach_absolute_time();
  v1[2](v1);

  return mach_absolute_time() - v2;
}

void sub_1829875BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_18298763C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1829876BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_182987750(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double ___ZL78_LSGetDefaultPreferredLocalizationsWithFallbackForImproperlyLocalizedProcessesv_block_invoke()
{
  NSObject *v0;
  uint64_t v1;
  double result;

  _LSDefaultLog();
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
    ___ZL78_LSGetDefaultPreferredLocalizationsWithFallbackForImproperlyLocalizedProcessesv_block_invoke_cold_1(v0);

  v1 = _LSGetMachTimebase();
  result = 1.0e10 / ((double)v1 / (double)HIDWORD(v1));
  _LSGetDefaultPreferredLocalizationsWithFallbackForImproperlyLocalizedProcesses(void)::maxCacheTimeAbsolute = (unint64_t)result;
  return result;
}

void ___ZL78_LSGetDefaultPreferredLocalizationsWithFallbackForImproperlyLocalizedProcessesv_block_invoke_43(uint64_t a1, void *a2, void *a3)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a3);
}

id _LSOpenLog()
{
  if (_LSOpenLog_once != -1)
    dispatch_once(&_LSOpenLog_once, &__block_literal_global_19);
  return (id)_LSOpenLog_result;
}

id _LSRegistrationLog()
{
  if (_LSRegistrationLog_onceToken != -1)
    dispatch_once(&_LSRegistrationLog_onceToken, &__block_literal_global_23);
  return (id)_LSRegistrationLog_log;
}

id _LSAppProtectionLog()
{
  if (_LSAppProtectionLog_once != -1)
    dispatch_once(&_LSAppProtectionLog_once, &__block_literal_global_29_0);
  return (id)_LSAppProtectionLog_result;
}

id _LSPluginFaultLog()
{
  if (_LSPluginFaultLog_once != -1)
    dispatch_once(&_LSPluginFaultLog_once, &__block_literal_global_33_0);
  return (id)_LSPluginFaultLog_result;
}

id loggableURL(void *a1)
{
  id v1;
  int v2;
  void *v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;

  v1 = a1;
  v2 = objc_msgSend(v1, "isFileURL");
  v3 = (void *)MEMORY[0x1E0CB3940];
  if (v2)
  {
    v4 = objc_retainAutorelease(v1);
    v5 = objc_msgSend(v4, "fileSystemRepresentation");

    objc_msgSend(v3, "stringWithUTF8String:", v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    objc_msgSend(v1, "scheme");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v3, "stringWithFormat:", CFSTR("%@:..."), v7);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v6;
}

id _LSGetInboxURLForBundleIdentifier(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  int v5;
  void *v6;
  void *v7;

  v1 = a1;
  +[LSApplicationProxy applicationProxyForIdentifier:](LSApplicationProxy, "applicationProxyForIdentifier:", v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "containerURL");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    objc_msgSend(v3, "path");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "isEqual:", CFSTR("/var/mobile"));

    if (v5)
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Library/Application Support/Containers/%@/Documents/Inbox/"), v1);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "URLByAppendingPathComponent:isDirectory:", v6, 1);
      v7 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      objc_msgSend(v3, "URLByAppendingPathComponent:isDirectory:", CFSTR("Documents/Inbox/"), 1);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
    }
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void sub_182987E94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void _LSCopyOrMoveFileResource(void *a1, void *a2, void *a3, void *a4, char a5, void *a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  void *v22;
  void *v23;
  _QWORD v24[4];
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  char v30;

  v11 = a1;
  v12 = a2;
  v13 = a3;
  v14 = a4;
  v15 = a6;
  _LSAssertRunningInServer((uint64_t)"void _LSCopyOrMoveFileResource(NSURL *__strong, NSFileHandle *__strong, NSString *__"
                                    "strong, NSURL *__strong, BOOL, void (^__strong)(NSURL *__strong, NSError *__strong))");
  if (!v15)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _LSCopyOrMoveFileResource(NSURL *__strong, NSFileHandle *__strong, NSString *__strong, NSURL *__strong, BOOL, void (^__strong)(NSURL *__strong, NSError *__strong))");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "handleFailureInFunction:file:lineNumber:description:", v23, CFSTR("LSMobileDataTransitSupport.mm"), 371, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("completionHandler != nil"));

  }
  MEMORY[0x186DAF208]();
  v16 = (void *)MEMORY[0x1E0CB3978];
  v24[0] = MEMORY[0x1E0C809B0];
  v24[1] = 3221225472;
  v24[2] = ___LSCopyOrMoveFileResource_block_invoke;
  v24[3] = &unk_1E1044578;
  v17 = v11;
  v25 = v17;
  v30 = a5;
  v18 = v12;
  v26 = v18;
  v19 = v14;
  v27 = v19;
  v20 = v13;
  v28 = v20;
  v21 = v15;
  v29 = v21;
  objc_msgSend(v16, "detachNewThreadWithBlock:", v24);

}

void sub_182988094(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v8 = v3;
  v9 = v2;
  v10 = v1;

  _Unwind_Resume(a1);
}

void sub_182988AE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, void *a18, uint64_t a19, void *a20,char a21,CFTypeRef cf)
{
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;

  if (a21)
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(a1);
}

void _LSCopierCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v8;
  NSObject *v9;
  __CFRunLoop *Current;

  v8 = a5;
  objc_msgSend(v8, "setCallbackType:", a2);
  if ((_DWORD)a2 == 1)
    goto LABEL_9;
  if ((_DWORD)a2 == 2)
  {
LABEL_8:
    a3 = 0;
LABEL_9:
    objc_msgSend(v8, "setDestURL:", a3);
    a4 = 0;
    goto LABEL_10;
  }
  if ((_DWORD)a2 != 3)
  {
    _LSDefaultLog();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      _LSCopierCallback(a2, v9);

    goto LABEL_8;
  }
  objc_msgSend(v8, "setDestURL:", 0);
LABEL_10:
  objc_msgSend(v8, "setError:", a4);
  Current = CFRunLoopGetCurrent();
  CFRunLoopStop(Current);

}

void sub_182988D70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void copyProvidedResourceToStagingContainerRegularFile(void *a1@<X0>, void *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  int v17;
  void *v18;
  void *v19;
  id v20;
  int v21;
  int *v22;
  _QWORD *v23;
  id v24;
  id v25;
  uint64_t v26;
  _QWORD v27[2];

  v27[1] = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a2;
  *a4 = 0;
  +[LSOpenStagingDirectoryManager sharedServerInstance](LSOpenStagingDirectoryManager, "sharedServerInstance");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "mainDataVolumeStagingURLWithError:", a3);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "UUIDString");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "URLByAppendingPathComponent:isDirectory:", v12, 1);
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    getFileProtectionValueForFileHandle(v8, a3);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v14)
      goto LABEL_13;
    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = *MEMORY[0x1E0C99938];
    v27[0] = v14;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v27, &v26, 1);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = objc_msgSend(v15, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v13, 0, v16, a3);

    if (!v17)
      goto LABEL_13;
    objc_msgSend(v7, "lastPathComponent");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "URLByAppendingPathComponent:", v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();

    v20 = objc_retainAutorelease(v19);
    v21 = open((const char *)objc_msgSend(v20, "fileSystemRepresentation"), 16777729, 420);
    if (v21 < 0 || fcopyfile(objc_msgSend(v8, "fileDescriptor"), v21, 0, 0xFu))
    {
      if (a3)
      {
        v22 = __error();
        _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2FE0], *v22, (uint64_t)"copyProvidedResourceToStagingContainerRegularFile", 277, 0);
        *a3 = (id)objc_claimAutoreleasedReturnValue();
      }
      if (v21 < 0)
        goto LABEL_12;
    }
    else
    {
      v23 = (_QWORD *)operator new();
      v24 = v13;
      v25 = v20;
      *v23 = &off_1E103DFE0;
      v23[1] = v25;
      v23[2] = v24;
      *a4 = v23;
    }
    close(v21);
LABEL_12:

LABEL_13:
  }

}

void sub_18298902C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  _QWORD *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  *v3 = 0;
  _Unwind_Resume(a1);
}

id getFileProtectionValueForFileHandle(void *a1, _QWORD *a2)
{
  id v3;
  int *v4;
  id v5;
  id *v6;
  uint64_t v8;
  _QWORD v9[3];

  v3 = a1;
  v9[1] = 0;
  v9[2] = 0;
  v9[0] = 0x4000000000000005;
  if (fgetattrlist(objc_msgSend(v3, "fileDescriptor"), v9, &v8, 8uLL, 1u))
  {
    if (a2)
    {
      v4 = __error();
      _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2FE0], *v4, (uint64_t)"getFileProtectionValueForFileHandle", 140, 0);
      v5 = 0;
      *a2 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v5 = 0;
    }
  }
  else
  {
    switch(HIDWORD(v8))
    {
      case 1:
        v6 = (id *)MEMORY[0x1E0C99918];
        break;
      case 2:
        v6 = (id *)MEMORY[0x1E0C99920];
        break;
      case 3:
        v6 = (id *)MEMORY[0x1E0C99928];
        break;
      default:
        v6 = (id *)MEMORY[0x1E0C99940];
        break;
    }
    v5 = *v6;
  }

  return v5;
}

void sub_182989208(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void `anonymous namespace'::StagedFileResource::~StagedFileResource(_anonymous_namespace_::StagedFileResource *this)
{
  void *v2;
  uint64_t *v3;
  void *v4;
  uint64_t v5;
  char v6;
  id v7;
  NSObject *v8;
  id v9;

  *(_QWORD *)this = &off_1E103DFE0;
  v3 = (uint64_t *)((char *)this + 16);
  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {
    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = *v3;
    v9 = 0;
    v6 = objc_msgSend(v4, "removeItemAtURL:error:", v5, &v9);
    v7 = v9;

    if ((v6 & 1) == 0)
    {
      _LSDefaultLog();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))

    }
    v2 = (void *)*v3;
  }

}

{
  JUMPOUT(0x186DADEF4);
}

void sub_1829892E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  _Unwind_Resume(a1);
}

void `anonymous namespace'::StagedFileResource::sandboxExtensionForTransfer(uint64_t a1@<X0>, _QWORD *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  char v8;
  void *v9;
  int *v10;

  objc_msgSend(*(id *)(a1 + 16), "fileSystemRepresentation");
  v5 = sandbox_extension_issue_file();
  if (!v5)
  {
    if (a2)
    {
      v9 = (void *)*MEMORY[0x1E0CB2FE0];
      v10 = __error();
      _LSMakeNSErrorImpl(v9, *v10, (uint64_t)"sandboxExtensionForContainer", 209, 0);
      *a2 = (id)objc_claimAutoreleasedReturnValue();
    }
    goto LABEL_6;
  }
  v6 = (void *)v5;
  v7 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithUTF8String:", v5);
  free(v6);
  if (!v7)
  {
LABEL_6:
    v8 = 0;
    *a3 = 0;
    goto LABEL_7;
  }
  *(_QWORD *)a3 = v7;
  v8 = 1;
LABEL_7:
  a3[8] = v8;
}

uint64_t `anonymous namespace'::StagedFileResource::shouldMoveToInbox(_anonymous_namespace_::StagedFileResource *this)
{
  return 1;
}

void `anonymous namespace'::FileResource::~FileResource(id *this)
{

}

{

  JUMPOUT(0x186DADEF4);
}

void `anonymous namespace'::FileResource::sandboxExtensionForTransfer(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
}

uint64_t `anonymous namespace'::FileResource::shouldMoveToInbox(_anonymous_namespace_::FileResource *this)
{
  return 0;
}

void std::__optional_storage_base<NSString * {__strong},false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<NSString * {__strong},false>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  id v4;
  uint64_t v5;

  if (*(unsigned __int8 *)(a1 + 8) == *((unsigned __int8 *)a2 + 8))
  {
    if (*(_BYTE *)(a1 + 8))
    {
      v3 = *a2;
      *a2 = 0;
      v4 = *(id *)a1;
      *(_QWORD *)a1 = v3;

    }
  }
  else if (*(_BYTE *)(a1 + 8))
  {

    *(_BYTE *)(a1 + 8) = 0;
  }
  else
  {
    v5 = *a2;
    *a2 = 0;
    *(_QWORD *)a1 = v5;
    *(_BYTE *)(a1 + 8) = 1;
  }
}

void sub_1829895CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id makeStagingDirectoryURLInContainer(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  int v7;
  id v8;
  id v9;
  void *v10;
  BOOL v11;
  NSObject *v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  char v18;
  id v19;
  NSObject *v20;
  id v21;
  const char *v22;
  id v23;
  int v24;
  NSObject *v25;
  NSObject *v26;
  _QWORD v28[4];
  NSObject *v29;
  id v30;
  id v31;
  id v32;
  uint8_t buf[4];
  id v34;
  __int16 v35;
  id v36;
  __int16 v37;
  int v38;
  _QWORD v39[2];
  _QWORD v40[3];

  v40[2] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = *MEMORY[0x1E0CB2AC0];
  v3 = *MEMORY[0x1E0C999D8];
  v39[0] = *MEMORY[0x1E0CB2AD8];
  v39[1] = v3;
  v40[0] = v2;
  v40[1] = MEMORY[0x1E0C9AAB0];
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v40, v39, 2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "URLByAppendingPathComponent:", CFSTR("OpenOperationStaging"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v32 = 0;
  v7 = objc_msgSend(v6, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v5, 0, v4, &v32);
  v8 = v32;

  if (v7)
  {
    v9 = v5;
    goto LABEL_24;
  }
  objc_msgSend(v8, "domain");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v10, "isEqualToString:", *MEMORY[0x1E0CB28A8]))
  {

    goto LABEL_7;
  }
  v11 = objc_msgSend(v8, "code") == 516;

  if (!v11)
  {
LABEL_7:
    _LSDefaultLog();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      makeStagingDirectoryURLInContainer((uint64_t)v5, (uint64_t)v8, v12);

  }
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v31 = 0;
  objc_msgSend(v13, "URLForDirectory:inDomain:appropriateForURL:create:error:", 99, 1, v5, 1, &v31);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = v31;

  if (v14)
  {
    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "path");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v30 = v15;
    v18 = objc_msgSend(v16, "setAttributes:ofItemAtPath:error:", v4, v17, &v30);
    v19 = v30;

    if ((v18 & 1) == 0)
    {
      _LSDefaultLog();
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        makeStagingDirectoryURLInContainer();

    }
    v21 = objc_retainAutorelease(v14);
    v22 = (const char *)objc_msgSend(v21, "fileSystemRepresentation");
    v23 = objc_retainAutorelease(v5);
    if (renamex_np(v22, (const char *)objc_msgSend(v23, "fileSystemRepresentation"), 2u))
    {
      v24 = *__error();
      _LSDefaultLog();
      v25 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543874;
        v34 = v23;
        v35 = 2114;
        v36 = v21;
        v37 = 1024;
        v38 = v24;
        _os_log_error_impl(&dword_182882000, v25, OS_LOG_TYPE_ERROR, "could not swap old (%{public}@) and new (%{public}@) staging directories: %{darwin.errno}d", buf, 0x1Cu);
      }
      v9 = 0;
    }
    else
    {
      dispatch_get_global_queue(-32768, 0);
      v26 = objc_claimAutoreleasedReturnValue();
      v28[0] = MEMORY[0x1E0C809B0];
      v28[1] = 3221225472;
      v28[2] = ___ZL34makeStagingDirectoryURLInContainerP5NSURLPU15__autoreleasingP7NSError_block_invoke;
      v28[3] = &unk_1E10418C8;
      v29 = v21;
      dispatch_async(v26, v28);

      v9 = v23;
      v25 = v29;
    }
  }
  else
  {
    _LSDefaultLog();
    v25 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      makeStagingDirectoryURLInContainer((uint64_t)v15, v25);
    v9 = 0;
    v19 = v15;
  }

LABEL_24:
  return v9;
}

void sub_1829899C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_182989DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  LaunchServices::OpenStaging::StagingDirectoryInfo *v13;
  void *v14;
  void *v15;

  if (*((_BYTE *)v13 + 24))
    LaunchServices::OpenStaging::StagingDirectoryInfo::~StagingDirectoryInfo(v13);

  _Unwind_Resume(a1);
}

LaunchServices::OpenStaging::StagingDirectoryInfo *std::optional<LaunchServices::OpenStaging::StagingDirectoryInfo>::emplace[abi:nn180100]<NSString * {__strong}&,FSNode * {__strong}&,long long &,void>(LaunchServices::OpenStaging::StagingDirectoryInfo *this, void **a2, void **a3, uint64_t *a4)
{
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;
  id v12;

  if (*((_BYTE *)this + 24))
  {
    LaunchServices::OpenStaging::StagingDirectoryInfo::~StagingDirectoryInfo(this);
    *((_BYTE *)this + 24) = 0;
  }
  v8 = *a2;
  v9 = *a3;
  v10 = *a4;
  v11 = v8;
  v12 = v9;
  *(_QWORD *)this = v11;
  *((_QWORD *)this + 1) = v12;
  *((_DWORD *)this + 4) = v10;
  *((_BYTE *)this + 24) = 1;
  return this;
}

void sub_18298A030(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18298A144(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18298A374(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18298A64C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_18298A6B0()
{
  JUMPOUT(0x18298A6A4);
}

void sub_18298A7A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18298AD74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20)
{

  _Unwind_Resume(a1);
}

_QWORD *std::unordered_map<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>::insert_or_assign[abi:nn180100]<LaunchServices::OpenStaging::StagingDirectoryInfo>(uint64_t a1, unint64_t *a2, LaunchServices::OpenStaging::StagingDirectoryInfo *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  char v6;

  v4 = std::__hash_table<std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>>>::__emplace_unique_key_args<unsigned long long,unsigned long long &,LaunchServices::OpenStaging::StagingDirectoryInfo>(a1, a2, a2, a3);
  v5 = v4;
  if (!v6)
    LaunchServices::OpenStaging::StagingDirectoryInfo::swap((LaunchServices::OpenStaging::StagingDirectoryInfo *)(v4 + 3), a3);
  return v5;
}

void sub_18298AF40(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_18298B0AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_18298B194(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18298B2BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZL34makeStagingDirectoryURLInContainerP5NSURLPU15__autoreleasingP7NSError_block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  char v4;
  id v5;
  NSObject *v6;
  id v7;

  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(a1 + 32);
  v7 = 0;
  v4 = objc_msgSend(v2, "removeItemAtURL:error:", v3, &v7);
  v5 = v7;

  if ((v4 & 1) == 0)
  {
    _LSDefaultLog();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      ___ZL34makeStagingDirectoryURLInContainerP5NSURLPU15__autoreleasingP7NSError_block_invoke_cold_1();

  }
}

void sub_18298B3CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void LaunchServices::OpenStaging::StagingDirectoryInfo::~StagingDirectoryInfo(LaunchServices::OpenStaging::StagingDirectoryInfo *this)
{
  if (*((_DWORD *)this + 4) != -1)
    sandbox_extension_release();

}

void sub_18298B428(_Unwind_Exception *a1)
{
  id *v1;

  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>>>::__emplace_unique_key_args<unsigned long long,unsigned long long &,LaunchServices::OpenStaging::StagingDirectoryInfo>(uint64_t a1, unint64_t *a2, _QWORD *a3, LaunchServices::OpenStaging::StagingDirectoryInfo *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v25[2];
  char v26;

  v8 = *a2;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      v12 = (_QWORD *)*v11;
      if (*v11)
      {
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == v8)
              return v12;
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9)
                v13 %= v9;
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
  v14 = a1 + 16;
  v15 = operator new(0x30uLL);
  v25[0] = (uint64_t)v15;
  v25[1] = a1 + 16;
  *v15 = 0;
  v15[1] = v8;
  v15[2] = *a3;
  v15[4] = 0;
  *((_DWORD *)v15 + 10) = -1;
  v15[3] = 0;
  LaunchServices::OpenStaging::StagingDirectoryInfo::swap((LaunchServices::OpenStaging::StagingDirectoryInfo *)(v15 + 3), a4);
  v26 = 1;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    v18 = 1;
    if (v9 >= 3)
      v18 = (v9 & (v9 - 1)) != 0;
    v19 = v18 | (2 * v9);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__rehash<true>(a1, v21);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v14;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v23 >= v9)
          v23 %= v9;
      }
      else
      {
        v23 &= v9 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  v12 = (_QWORD *)v25[0];
  v25[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>,void *>>>>::reset[abi:nn180100](v25, 0);
  return v12;
}

void sub_18298B6A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>,void *>>>>::reset[abi:nn180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void LaunchServices::OpenStaging::StagingDirectoryInfo::swap(LaunchServices::OpenStaging::StagingDirectoryInfo *this, LaunchServices::OpenStaging::StagingDirectoryInfo *a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  int v12;

  v4 = *(void **)this;
  *(_QWORD *)this = 0;
  v5 = *(void **)a2;
  *(_QWORD *)a2 = 0;
  v6 = *(void **)this;
  *(_QWORD *)this = v5;

  v7 = *(void **)a2;
  *(_QWORD *)a2 = v4;

  v8 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  v9 = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  v10 = (void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v9;

  v11 = (void *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v8;

  v12 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>,void *>>>>::reset[abi:nn180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
      LaunchServices::OpenStaging::StagingDirectoryInfo::~StagingDirectoryInfo((LaunchServices::OpenStaging::StagingDirectoryInfo *)(v2 + 24));
    operator delete((void *)v2);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>>>::find<unsigned long long>(_QWORD *a1, unint64_t *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(_QWORD **)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  result = (_QWORD *)*v6;
  if (*v6)
  {
    do
    {
      v8 = result[1];
      if (v8 == v3)
      {
        if (result[2] == v3)
          return result;
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(_QWORD *)&v2)
            v8 %= *(_QWORD *)&v2;
        }
        else
        {
          v8 &= *(_QWORD *)&v2 - 1;
        }
        if (v8 != v5)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      LaunchServices::OpenStaging::StagingDirectoryInfo::~StagingDirectoryInfo((LaunchServices::OpenStaging::StagingDirectoryInfo *)(v2 + 3));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t LaunchServices::notifyd::NotifyToken::cancel(LaunchServices::notifyd::NotifyToken *this)
{
  int v1;
  uint64_t result;

  do
    v1 = __ldaxr((unsigned int *)this);
  while (__stlxr(0xFFFFFFFF, (unsigned int *)this));
  result = notify_is_valid_token(v1);
  if ((_DWORD)result)
    return notify_cancel(v1);
  return result;
}

void ___ZN14LaunchServices7notifyd11NotifyToken16RegisterDispatchEP8NSStringPU28objcproto17OS_dispatch_queue8NSObjectU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  void *v2;

  v2 = (void *)MEMORY[0x186DAE7A0]();
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  objc_autoreleasePoolPop(v2);
}

void LaunchServices::notifyd::NotifyToken::Post(LaunchServices::notifyd::NotifyToken *this, NSString *a2)
{
  LaunchServices::notifyd::NotifyToken *v2;
  void *v3;
  LaunchServices::notifyd::NotifyToken *v4;

  v2 = this;
  v3 = (void *)MEMORY[0x186DAE7A0]();
  v4 = objc_retainAutorelease(v2);
  notify_post((const char *)-[LaunchServices::notifyd::NotifyToken UTF8String](v4, "UTF8String"));
  objc_autoreleasePoolPop(v3);

}

void sub_18298B978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t LaunchServices::notifyd::NotifyToken::getState(LaunchServices::notifyd::NotifyToken *this)
{
  int v1;
  uint64_t state64;

  state64 = 0;
  v1 = atomic_load((unsigned int *)this);
  if (notify_get_state(v1, &state64))
    return 0;
  else
    return state64;
}

uint64_t LaunchServices::notifyd::NotifyToken::setState(LaunchServices::notifyd::NotifyToken *this, uint64_t a2)
{
  int v2;

  v2 = atomic_load((unsigned int *)this);
  return notify_set_state(v2, a2);
}

void sub_18298BA6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)LSObserver;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_18298BB8C(void *a1)
{
  void *v1;

  objc_begin_catch(a1);
  os_unfair_recursive_lock_unlock();
  objc_exception_rethrow();
}

void sub_18298BBB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  objc_end_catch();

  _Unwind_Resume(a1);
}

void sub_18298BCB4(void *a1)
{
  void *v1;

  objc_begin_catch(a1);
  os_unfair_recursive_lock_unlock();
  objc_exception_rethrow();
}

void sub_18298BCE0(_Unwind_Exception *a1)
{
  void *v1;

  objc_end_catch();

  _Unwind_Resume(a1);
}

void sub_18298BD90(void *a1)
{
  void *v1;

  objc_begin_catch(a1);
  os_unfair_recursive_lock_unlock();
  objc_exception_rethrow();
}

void sub_18298BDBC(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18298BE68(void *a1)
{
  void *v1;

  objc_begin_catch(a1);
  os_unfair_recursive_lock_unlock();
  objc_exception_rethrow();
}

void sub_18298BE94(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18298C180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  void *v22;
  void *v23;
  id *v24;
  void *v25;
  id *v26;
  uint64_t v27;

  objc_destroyWeak(v26);
  objc_destroyWeak(v24);

  objc_destroyWeak((id *)(v27 - 96));
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a17);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_18298C38C(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  void *v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_18298C490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_18298C5EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18298C754(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18298C838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18298C9E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

Class initBSServiceConnectionEndpoint(void)
{
  Class result;

  if (!BoardServicesLibrary(void)::frameworkLibrary)
    BoardServicesLibrary(void)::frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/BoardServices.framework/BoardServices", 2);
  result = objc_getClass("BSServiceConnectionEndpoint");
  classBSServiceConnectionEndpoint = (uint64_t)result;
  getBSServiceConnectionEndpointClass = (uint64_t (*)(void))BSServiceConnectionEndpointFunction;
  return result;
}

{
  Class result;

  if (!BoardServicesLibrary(void)::frameworkLibrary)
    BoardServicesLibrary(void)::frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/BoardServices.framework/BoardServices", 2);
  result = objc_getClass("BSServiceConnectionEndpoint");
  classBSServiceConnectionEndpoint = (uint64_t)result;
  getBSServiceConnectionEndpointClass = (uint64_t (*)(void))BSServiceConnectionEndpointFunction;
  return result;
}

id BSServiceConnectionEndpointFunction(void)
{
  return (id)classBSServiceConnectionEndpoint;
}

{
  return (id)classBSServiceConnectionEndpoint;
}

Class initUISClickAttribution(void)
{
  Class result;

  if (!UIKitServicesLibrary(void)::frameworkLibrary)
    UIKitServicesLibrary(void)::frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/UIKitServices.framework/UIKitServices", 2);
  result = objc_getClass("UISClickAttribution");
  classUISClickAttribution = (uint64_t)result;
  getUISClickAttributionClass = (uint64_t (*)(void))UISClickAttributionFunction;
  return result;
}

id UISClickAttributionFunction(void)
{
  return (id)classUISClickAttribution;
}

Class initUISPasteSharingToken(void)
{
  Class result;

  if (!UIKitServicesLibrary(void)::frameworkLibrary)
    UIKitServicesLibrary(void)::frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/UIKitServices.framework/UIKitServices", 2);
  result = objc_getClass("UISPasteSharingToken");
  classUISPasteSharingToken = (uint64_t)result;
  getUISPasteSharingTokenClass = (uint64_t (*)(void))UISPasteSharingTokenFunction;
  return result;
}

id UISPasteSharingTokenFunction(void)
{
  return (id)classUISPasteSharingToken;
}

id LSDatabaseBlockingFetchInterface()
{
  if (LSDatabaseBlockingFetchInterface_onceToken != -1)
    dispatch_once(&LSDatabaseBlockingFetchInterface_onceToken, &__block_literal_global_52);
  return (id)LSDatabaseBlockingFetchInterface_result;
}

void sub_18298D028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void __LAUNCH_SERVICES_CLIENTS_ARE_WAITING_FOR_THE_DATABASE_TO_FINISH_SEEDING__()
{
  NSObject *v0;

  _LSDatabaseGetSeedingGroup();
  v0 = objc_claimAutoreleasedReturnValue();
  dispatch_group_wait(v0, 0xFFFFFFFFFFFFFFFFLL);

}

void __LAUNCH_SERVICES_CLIENTS_ARE_WAITING_FOR_A_MANUAL_DATABASE_REBUILD_TO_COMPLETE__()
{
  NSObject *v0;

  _LSDatabaseGetSeedingGroup();
  v0 = objc_claimAutoreleasedReturnValue();
  dispatch_group_wait(v0, 0xFFFFFFFFFFFFFFFFLL);

}

void sub_18298D354(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18298D3E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18298D478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_18298D548(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void __LAUNCH_SERVICES_IS_BEING_USED_SYNCHRONOUSLY_ON_THE_MAIN_THREAD_OF_THE_SHELL_APP_AND_WILL_DEADLOCK__()
{
  const char *v0;
  NSObject *v1;
  int v2;
  const char *v3;
  __int16 v4;
  const char *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v0 = getprogname();
  _LSDefaultLog();
  v1 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_FAULT))
  {
    v2 = 136446466;
    v3 = v0;
    v4 = 2082;
    v5 = v0;
    _os_log_fault_impl(&dword_182882000, v1, OS_LOG_TYPE_FAULT, "This Launch Services API is synchronous and makes an XPC call to %{public}s. It will always deadlock when used within %{public}s. You must use asynchronous API instead to avoid a deadlock and subsequent panic. This is a bug in Launch Services' client.", (uint8_t *)&v2, 0x16u);
  }

}

void _LSFaultIfRunningOnMainThreadOfShellApp()
{
  if (pthread_main_np())
  {
    if (objc_msgSend((id)__LSDefaultsGetSharedInstance(), "isAppleInternal"))
    {
      if (FrontBoardServicesLibrary(void)::frameworkLibrary
        || (FrontBoardServicesLibrary(void)::frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices", 2)) != 0)
      {
        if (objc_msgSend((id)getFBSOpenApplicationServiceClass(), "currentProcessServicesDefaultShellEndpoint"))__LAUNCH_SERVICES_IS_BEING_USED_SYNCHRONOUSLY_ON_THE_MAIN_THREAD_OF_THE_SHELL_APP_AND_WILL_DEADLOCK__();
      }
    }
  }
}

void _LSServer_PerformOpenOperation(void *a1, void *a2, void *a3, char a4, __int128 *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11)
{
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  __int128 v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  void *v37;
  id v38;
  id v39;
  void *v40;
  void *v41;
  id v42;
  id v43;
  id v44;
  id v45;
  _QWORD v46[4];
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  __int128 v56;
  __int128 v57;
  char v58;
  __int128 v59;
  __int128 v60;
  _QWORD v61[4];
  id v62;

  v45 = a1;
  v18 = a2;
  v19 = a3;
  v44 = a6;
  v43 = a7;
  v42 = a8;
  v20 = a9;
  v21 = a10;
  v22 = a11;
  v41 = v20;
  v37 = (void *)MEMORY[0x186DAE9BC]();
  MEMORY[0x186DAF208]();
  v23 = MEMORY[0x1E0C809B0];
  v61[0] = MEMORY[0x1E0C809B0];
  v61[1] = 3221225472;
  v61[2] = ___LSServer_PerformOpenOperation_block_invoke;
  v61[3] = &unk_1E103FE30;
  v39 = v37;
  v62 = v39;
  v40 = (void *)MEMORY[0x186DAE9BC](v61);

  v59 = 0u;
  v60 = 0u;
  if (a5)
  {
    v24 = a5[1];
    v59 = *a5;
    v60 = v24;
    v25 = v44;
    v26 = v45;
    v28 = v42;
    v27 = v43;
  }
  else
  {
    v25 = v44;
    v26 = v45;
    v28 = v42;
    v27 = v43;
    if (v21)
      objc_msgSend(v21, "auditToken");
  }
  v46[0] = v23;
  v46[1] = 3221225472;
  v46[2] = ___LSServer_PerformOpenOperation_block_invoke_72;
  v46[3] = &unk_1E1044698;
  v29 = v19;
  v47 = v29;
  v38 = v26;
  v48 = v38;
  v30 = v28;
  v49 = v30;
  v31 = v21;
  v50 = v31;
  v58 = a4;
  v56 = v59;
  v57 = v60;
  v32 = v40;
  v55 = v32;
  v33 = v18;
  v51 = v33;
  v34 = v25;
  v52 = v34;
  v35 = v27;
  v53 = v35;
  v36 = v41;
  v54 = v36;
  _LSAsyncOpenContext(v46);

}

void sub_18298D938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;

  _Unwind_Resume(a1);
}

void sub_18298DACC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void _LSAsyncOpenContext(void *a1)
{
  id v1;
  NSObject *v2;
  id v3;
  _QWORD block[4];
  id v5;

  v1 = a1;
  if (_LSOpenOperationGetQueue(void)::once != -1)
    dispatch_once(&_LSOpenOperationGetQueue(void)::once, &__block_literal_global_92_0);
  v2 = _LSOpenOperationGetQueue(void)::result;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZL19_LSAsyncOpenContextU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E1043AB0;
  v5 = v1;
  v3 = v1;
  dispatch_async(v2, block);

}

void sub_18298E41C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29,void *a30,char a31)
{
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;

  if (a31)
  _Unwind_Resume(a1);
}

void _LSOpenOperationPerform(void *a1, void *a2, void *a3, int a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10)
{
  id v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  int v20;
  NSURL *v21;
  char v22;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  int v34;
  void *v35;
  int v36;
  uint64_t v37;
  NSObject *v38;
  void *v39;
  void *v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  int v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  _BOOL4 v67;
  id v68;
  id v69;
  id v70;
  void *v71;
  void *v72;
  BOOL v73;
  void *v74;
  char v75;
  NSObject *v76;
  id v77;
  id v78;
  void *v79;
  uint64_t v80;
  char v81;
  void **v82;
  void *v83;
  void **v84;
  void *v85;
  int v86;
  NSObject *v87;
  void *v88;
  NSObject *v89;
  void *v90;
  int v91;
  uint64_t v92;
  void *v93;
  __CFString *v94;
  __CFString *v95;
  _LSURLOverride *v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  int v105;
  void *v106;
  int v107;
  void *v108;
  void *v109;
  NSObject *v110;
  NSObject *v111;
  uint64_t v112;
  id v113;
  id v114;
  id v115;
  FSNode *v116;
  FSNode *v117;
  id v118;
  _LSDServiceDomain *v119;
  void **v120;
  FSNode *v121;
  void *v122;
  NSObject *v123;
  NSObject *v124;
  NSObject *v125;
  NSObject *v126;
  _LSDServiceDomain *v127;
  uint64_t v128;
  id v129;
  NSObject *v130;
  void *v131;
  NSObject *v132;
  void *v133;
  id v134;
  id v135;
  void *v136;
  void *v137;
  NSObject *v138;
  void *v139;
  void *v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  void *v147;
  void *v148;
  void *v149;
  __CFString *v150;
  __CFString *v151;
  BOOL v152;
  uint64_t v153;
  uint64_t v154;
  void *v155;
  uint64_t v156;
  _LSSpringBoardCall *v157;
  int v158;
  NSObject *v159;
  void *v160;
  void *v161;
  __CFString *v162;
  int StringForCFString;
  void *v164;
  void *v165;
  void *v166;
  void *v167;
  void *v168;
  void *v169;
  void *v170;
  void *context;
  void *contexta;
  char v173;
  id v174;
  id v175;
  _BOOL4 v176;
  id v177;
  unsigned int v178;
  NSData *v179;
  void *v180;
  uint64_t v181;
  void *v182;
  id v184;
  char v185;
  __CFString *v186;
  unsigned int v187;
  id v188;
  id v189;
  id v190;
  id v191;
  id v192;
  void *v193;
  void (**v194)(id, _QWORD, void *);
  id v195;
  id v196;
  id v197;
  void *v198;
  _QWORD v199[4];
  id v200;
  id v201;
  id v202;
  id v203;
  id v204;
  void (**v205)(id, _QWORD, void *);
  int v206;
  id v207;
  id v208[2];
  void **v209;
  id v210;
  char v211;
  id v212;
  id v213;
  uint8_t v214[8];
  uint64_t v215;
  void (*v216)(uint64_t, int, void *);
  void *v217;
  id v218;
  _OWORD v219[2];
  _BYTE v220[32];
  id v221;
  id v222;
  uint8_t buf[32];
  id v224;
  id v225;
  uint64_t v226;

  v226 = *MEMORY[0x1E0C80C00];
  v16 = a1;
  v189 = a2;
  v197 = a3;
  v190 = a5;
  v192 = a6;
  v195 = a7;
  v191 = a8;
  v196 = a9;
  v193 = v16;
  v194 = a10;
  _LSAssertRunningInServer((uint64_t)"void _LSOpenOperationPerform(NSURL *__strong, NSFileHandle *__strong, NSString *__st"
                                    "rong, BOOL, NSString *__strong, NSDictionary<NSString *,id> *__strong, NSDictionary<"
                                    "NSString *,id> *__strong, __strong id<LSOpenResourceOperationDelegate>, NSXPCConnect"
                                    "ion *__strong, __strong _LSDOpenServiceCompletionHandler)");
  if (v16)
  {
    if (objc_msgSend(v16, "isFileURL"))
    {
      +[LSApplicationProxy applicationProxyForIdentifier:](LSApplicationProxy, "applicationProxyForIdentifier:", v197);
      v180 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = objc_opt_class();
      objc_msgSend(v195, "objectForKey:", CFSTR("FileProviderString"));
      v18 = objc_claimAutoreleasedReturnValue();
      v19 = (void *)v18;
      if (v17 && v18)
      {
        if ((objc_opt_isKindOfClass() & 1) != 0)
          goto LABEL_35;

      }
      else if (v18)
      {
        goto LABEL_35;
      }
      v28 = objc_opt_class();
      objc_msgSend(v192, "objectForKey:", CFSTR("FileProviderString"));
      v29 = objc_claimAutoreleasedReturnValue();
      v30 = (void *)v29;
      if (v28 && v29 && (objc_opt_isKindOfClass() & 1) == 0)
      {

        v19 = 0;
      }
      else
      {
        v19 = v30;
      }
LABEL_35:
      v46 = objc_opt_class();
      objc_msgSend(v195, "objectForKey:", CFSTR("RequireOpenInPlace"));
      v47 = objc_claimAutoreleasedReturnValue();
      v48 = (void *)v47;
      if (v46 && v47 && (objc_opt_isKindOfClass() & 1) == 0)
      {

        v48 = 0;
      }
      v49 = objc_msgSend(v48, "BOOLValue");

      if ((v49 & 1) != 0)
      {
        v187 = 1;
      }
      else
      {
        v50 = objc_opt_class();
        objc_msgSend(v192, "objectForKey:", CFSTR("RequireOpenInPlace"));
        v51 = objc_claimAutoreleasedReturnValue();
        v52 = (void *)v51;
        if (v50 && v51 && (objc_opt_isKindOfClass() & 1) == 0)
        {

          v52 = 0;
        }
        v187 = objc_msgSend(v52, "BOOLValue");

      }
      v53 = objc_opt_class();
      objc_msgSend(v195, "objectForKey:", CFSTR("LSMoveDocumentOnOpen"));
      v54 = objc_claimAutoreleasedReturnValue();
      v55 = (void *)v54;
      if (v53 && v54 && (objc_opt_isKindOfClass() & 1) == 0)
      {

        v55 = 0;
      }
      v56 = objc_msgSend(v55, "BOOLValue");

      if ((v56 & 1) != 0)
        goto LABEL_56;
      v57 = objc_opt_class();
      objc_msgSend(v192, "objectForKey:", CFSTR("LSMoveDocumentOnOpen"));
      v58 = objc_claimAutoreleasedReturnValue();
      v59 = (void *)v58;
      if (v57 && v58 && (objc_opt_isKindOfClass() & 1) == 0)
      {

        v59 = 0;
      }
      v60 = objc_msgSend(v59, "BOOLValue");

      if (v60)
      {
LABEL_56:
        objc_msgSend(v196, "_xpcConnection");
        v61 = (void *)objc_claimAutoreleasedReturnValue();
        v173 = _LSCheckEntitlementForXPCConnection(v61, CFSTR("com.apple.launchservices.MoveDocumentOnOpen")) != 0;

        if (v19)
        {
LABEL_57:
          v176 = 0;
          goto LABEL_63;
        }
      }
      else
      {
        v173 = 0;
        if (v19)
          goto LABEL_57;
      }
      objc_msgSend(v180, "dataContainerURL");
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      if (v62)
      {
        objc_msgSend(v16, "absoluteString");
        v63 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v62, "absoluteString");
        v64 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v63, "rangeOfString:options:", v64, 8);
        v66 = v65;

        v67 = v66 == 0;
      }
      else
      {
        v67 = 1;
      }
      v176 = v67;

LABEL_63:
      if (v187 && (objc_msgSend(v180, "supportsOpenInPlace") & 1) == 0)
      {
        _LSDefaultLog();
        v87 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v87, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412546;
          *(_QWORD *)&buf[4] = v16;
          *(_WORD *)&buf[12] = 2112;
          *(_QWORD *)&buf[14] = v197;
          _os_log_impl(&dword_182882000, v87, OS_LOG_TYPE_DEFAULT, "Document %@ requires open-in-place but target (%@) does not support it.", buf, 0x16u);
        }

        _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2FE0], 45, (uint64_t)"_LSOpenOperationPerform", 421, 0);
        v88 = (void *)objc_claimAutoreleasedReturnValue();
        v194[2](v194, 0, v88);

        goto LABEL_174;
      }
      v68 = v196;
      v69 = v180;
      v70 = v16;
      if (v68)
      {
        if (v69)
          goto LABEL_67;
      }
      else
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v165 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "BOOL _LSCheckIfXPCConnectionCanReadDocument(NSXPCConnection *__strong, LSApplicationProxy *__strong, NSURL *__strong, NSError *__autoreleasing *)");
        v166 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v165, "handleFailureInFunction:file:lineNumber:description:", v166, CFSTR("LSOpenOperation.mm"), 1028, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("clientXPCConnection != nil"));

        if (v69)
          goto LABEL_67;
      }
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v167 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "BOOL _LSCheckIfXPCConnectionCanReadDocument(NSXPCConnection *__strong, LSApplicationProxy *__strong, NSURL *__strong, NSError *__autoreleasing *)");
      v168 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v167, "handleFailureInFunction:file:lineNumber:description:", v168, CFSTR("LSOpenOperation.mm"), 1029, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("targetApp != nil"));

LABEL_67:
      v71 = (void *)MEMORY[0x186DAE7A0]();
      memset(buf, 0, sizeof(buf));
      if (v68)
        objc_msgSend(v68, "auditToken");
      if (+[FSNode canReadURL:fromSandboxWithAuditToken:](FSNode, "canReadURL:fromSandboxWithAuditToken:", v70, buf)|| (v72 = (void *)_CFURLCopyPromiseURLOfLogicalURL()) != 0&& (v73 = +[FSNode canReadURL:fromSandboxWithAuditToken:](FSNode, "canReadURL:fromSandboxWithAuditToken:", v72, buf), v72, v73))
      {
        v74 = 0;
        v75 = 1;
      }
      else
      {
        _LSDefaultLog();
        v76 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)v220 = 67109635;
          *(_DWORD *)&v220[4] = objc_msgSend(v68, "processIdentifier");
          *(_WORD *)&v220[8] = 2113;
          *(_QWORD *)&v220[10] = v70;
          *(_WORD *)&v220[18] = 2113;
          *(_QWORD *)&v220[20] = v69;
          _os_log_impl(&dword_182882000, v76, OS_LOG_TYPE_DEFAULT, "pid %i does not have read access to document %{private}@ in order to open it in target %{private}@.", v220, 0x1Cu);
        }

        _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2FE0], 1, (uint64_t)"_LSCheckIfXPCConnectionCanReadDocument", 1057, 0);
        v74 = (void *)objc_claimAutoreleasedReturnValue();
        v75 = 0;
      }
      objc_autoreleasePoolPop(v71);
      if ((v75 & 1) != 0)
        v77 = 0;
      else
        v77 = objc_retainAutorelease(v74);

      v78 = v77;
      v79 = v78;
      if ((v75 & 1) == 0)
      {
        v194[2](v194, 0, v78);

        goto LABEL_174;
      }

      v174 = v69;
      v177 = v70;
      if (!v69)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v169 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "BOOL _LSCheckIfApplicationCanOpenUSBOrSMBDocument(LSApplicationProxy *__strong, NSURL *__strong, NSError *__autoreleasing *)");
        v170 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v169, "handleFailureInFunction:file:lineNumber:description:", v170, CFSTR("LSOpenOperation.mm"), 1074, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("targetApp != nil"));

      }
      context = (void *)MEMORY[0x186DAE7A0]();
      *(_QWORD *)v214 = 0;
      v80 = *MEMORY[0x1E0C99C00];
      v81 = objc_msgSend(v177, "getResourceValue:forKey:error:", v214, *MEMORY[0x1E0C99C00], 0);
      v82 = (void **)*(id *)v214;
      if ((v81 & 1) == 0)
      {
        v83 = (void *)_CFURLCopyPromiseURLOfLogicalURL();
        v209 = 0;
        objc_msgSend(v83, "getResourceValue:forKey:error:", &v209, v80, 0);
        v84 = v209;

        v82 = v84;
      }
      if (v82 && (objc_msgSend(v82, "BOOLValue") & 1) == 0)
      {
        _LSDefaultLog();
        v89 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v89, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138478083;
          *(_QWORD *)&buf[4] = v177;
          *(_WORD *)&buf[12] = 2113;
          *(_QWORD *)&buf[14] = v174;
          _os_log_impl(&dword_182882000, v89, OS_LOG_TYPE_INFO, "Document %{private}@ is on USB/SMB. Checking if application %{private}@ can open such documents.", buf, 0x16u);
        }

        objc_msgSend(v174, "platform");
        v90 = (void *)objc_claimAutoreleasedReturnValue();
        v91 = objc_msgSend(v90, "unsignedIntegerValue");

        objc_msgSend(v174, "sdkVersion");
        v92 = objc_claimAutoreleasedReturnValue();
        v93 = (void *)v92;
        v94 = CFSTR("1.0");
        if (v92)
          v94 = (__CFString *)v92;
        v95 = v94;

        if ((v91 - 11) >= 2)
        {
          +[LSApplicationWorkspace defaultWorkspace](LSApplicationWorkspace, "defaultWorkspace");
          v109 = (void *)objc_claimAutoreleasedReturnValue();
          v86 = objc_msgSend(v109, "isVersion:greaterThanOrEqualToVersion:", v95, CFSTR("13.0"));

          if (v86)
          {
            _LSDefaultLog();
            v110 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v110, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138478083;
              *(_QWORD *)&buf[4] = v174;
              *(_WORD *)&buf[12] = 2114;
              *(_QWORD *)&buf[14] = v95;
              _os_log_impl(&dword_182882000, v110, OS_LOG_TYPE_INFO, "Application %{private}@ was linked against SDK %{public}@ and so can open documents on USB/SMB.", buf, 0x16u);
            }
            v85 = 0;
          }
          else
          {
            _LSDefaultLog();
            v111 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v111, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138478083;
              *(_QWORD *)&buf[4] = v174;
              *(_WORD *)&buf[12] = 2114;
              *(_QWORD *)&buf[14] = v95;
              _os_log_impl(&dword_182882000, v111, OS_LOG_TYPE_DEFAULT, "Application %{private}@ was linked against SDK %{public}@ and so CANNOT open documents on USB/SMB.", buf, 0x16u);
            }

            v112 = *MEMORY[0x1E0CB2938];
            *(_QWORD *)v220 = CFSTR("SDKVersion");
            *(_QWORD *)&v220[8] = v112;
            *(_QWORD *)buf = v95;
            *(_QWORD *)&buf[8] = CFSTR("SDK too old to support SMB/USB documents (iOS 13.0 required.)");
            objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", buf, v220, 2);
            v110 = objc_claimAutoreleasedReturnValue();
            _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2FE0], 45, (uint64_t)"_LSCheckIfApplicationCanOpenUSBOrSMBDocument", 1100, v110);
            v85 = (void *)objc_claimAutoreleasedReturnValue();
          }

        }
        else
        {
          v85 = 0;
          v86 = 1;
        }

      }
      else
      {
        v85 = 0;
        v86 = 1;
      }

      objc_autoreleasePoolPop(context);
      if ((v86 & 1) != 0)
        v113 = 0;
      else
        v113 = objc_retainAutorelease(v85);

      v114 = v113;
      if ((v86 & 1) == 0)
        v194[2](v194, 0, v114);

      if (((v69 != 0) & v86 & a4) != 1)
      {
        if (!v86)
          goto LABEL_174;
        goto LABEL_166;
      }
      if (!objc_msgSend(v177, "isFileURL"))
      {
LABEL_166:
        if (!v176)
        {
          _LSDefaultLog();
          v138 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v138, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412546;
            *(_QWORD *)&buf[4] = v177;
            *(_WORD *)&buf[12] = 2112;
            *(_QWORD *)&buf[14] = v197;
            _os_log_impl(&dword_182882000, v138, OS_LOG_TYPE_DEFAULT, "Not copying %@ to Inbox for %@", buf, 0x16u);
          }

          v21 = (NSURL *)v177;
          v22 = 0;
          goto LABEL_175;
        }
        _LSGetInboxURLForBundleIdentifier(v197);
        v136 = (void *)objc_claimAutoreleasedReturnValue();
        if (v136)
        {
          v199[0] = MEMORY[0x1E0C809B0];
          v199[1] = 3221225472;
          v199[2] = ___ZL23_LSOpenOperationPerformP5NSURLP12NSFileHandleP8NSStringbS4_P12NSDictionaryIS4_P11objc_objectES9_PU42objcproto31LSOpenResourceOperationDelegate11objc_objectP15NSXPCConnectionU13block_pointerFvbP7NSErrorE_block_invoke;
          v199[3] = &unk_1E1044730;
          v200 = v191;
          v201 = v68;
          v202 = v195;
          v203 = v192;
          v204 = v197;
          v205 = v194;
          _LSCopyOrMoveFileResource(v177, v189, v190, v136, v173, v199);

          v137 = v200;
        }
        else
        {
          _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2FE0], 45, (uint64_t)"_LSOpenOperationPerform", 460, 0);
          v137 = (void *)objc_claimAutoreleasedReturnValue();
          v194[2](v194, 0, v137);
        }

LABEL_174:
        v21 = 0;
        v22 = 1;
LABEL_175:

        LOBYTE(v16) = 0;
        v20 = 0;
        goto LABEL_176;
      }
      v184 = v174;
      v115 = v177;
      v116 = [FSNode alloc];
      v213 = 0;
      v117 = -[FSNode initWithURL:flags:error:](v116, "initWithURL:flags:error:", v115, 0, &v213);
      v118 = v213;
      if (!v117)
      {
        _LSDefaultLog();
        v125 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v125, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138478083;
          *(_QWORD *)&buf[4] = v115;
          *(_WORD *)&buf[12] = 2114;
          *(_QWORD *)&buf[14] = v118;
          _os_log_impl(&dword_182882000, v125, OS_LOG_TYPE_DEFAULT, "Could not create node for resource URL %{private}@ for default handler update: %{public}@", buf, 0x16u);
        }

        goto LABEL_165;
      }
      v212 = 0;
      v209 = 0;
      v210 = 0;
      v211 = 0;
      +[_LSDServiceDomain defaultServiceDomain]();
      v119 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
      v120 = (void **)LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)&v209, v119, 0);

      if (!v120)
      {
        _LSDefaultLog();
        v126 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v126, OS_LOG_TYPE_DEFAULT))
        {
          +[_LSDServiceDomain defaultServiceDomain]();
          v127 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
          v128 = LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)&v209, v127, 0);

          if (v128)
            v129 = 0;
          else
            v129 = v212;
          *(_DWORD *)buf = 138543362;
          *(_QWORD *)&buf[4] = v129;
          _os_log_impl(&dword_182882000, v126, OS_LOG_TYPE_DEFAULT, "Could not create database context for default handler update: %{public}@", buf, 0xCu);

        }
        v175 = v118;
        goto LABEL_161;
      }
      LaunchServices::TypeEvaluator::TypeEvaluator(v208, v117);
      LaunchServices::TypeEvaluator::getTypeIdentifier((uint64_t)v208, v120, 0);
      contexta = (void *)objc_claimAutoreleasedReturnValue();
      if (!contexta)
      {
        _LSDefaultLog();
        v123 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v123, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138478083;
          *(_QWORD *)&buf[4] = v117;
          *(_WORD *)&buf[12] = 2114;
          *(_QWORD *)&buf[14] = v118;
          _os_log_impl(&dword_182882000, v123, OS_LOG_TYPE_DEFAULT, "Could not get UTI for node %{private}@ for default handler update: %{public}@", buf, 0x16u);
        }
        v175 = v118;
        goto LABEL_157;
      }
      v121 = [FSNode alloc];
      objc_msgSend(v184, "bundleURL");
      v122 = (void *)objc_claimAutoreleasedReturnValue();
      v207 = v118;
      v123 = -[FSNode initWithURL:flags:error:](v121, "initWithURL:flags:error:", v122, 0, &v207);
      v175 = v207;

      if (!v123)
      {
        _LSDefaultLog();
        v130 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v130, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138478083;
          *(_QWORD *)&buf[4] = v184;
          *(_WORD *)&buf[12] = 2114;
          *(_QWORD *)&buf[14] = v175;
          _os_log_impl(&dword_182882000, v130, OS_LOG_TYPE_DEFAULT, "Could not get node for app %{private}@: %{public}@", buf, 0x16u);
        }

        v123 = 0;
        goto LABEL_157;
      }
      v206 = 0;
      if (_LSBundleFindWithNode((uint64_t)v120, v123, &v206, 0))
      {
        _LSDefaultLog();
        v124 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v124, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138477827;
          *(_QWORD *)&buf[4] = v184;
          _os_log_impl(&dword_182882000, v124, OS_LOG_TYPE_DEFAULT, "Could not get unit for app %{private}@", buf, 0xCu);
        }

        goto LABEL_157;
      }
      *(_DWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      *(_DWORD *)&buf[16] = 0;
      v224 = 0;
      v225 = 0;
      *(_QWORD *)&buf[24] = 0;
      if (!_LSGetBindingForNodeOrSchemeOrUTI((int)v120, 0, 0, (LaunchServices::BindingEvaluator *)contexta, v206, 14, 0, 12320, (uint64_t)buf)&& *(_QWORD *)&buf[24])
      {
        if (_LSClaimFlagsAreWildcard(*(_DWORD *)(*(_QWORD *)&buf[24] + 8)))
        {
          _LSDefaultLog();
          v159 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v159, OS_LOG_TYPE_INFO))
          {
            objc_msgSend(v184, "bundleIdentifier");
            v160 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)v220 = 138478083;
            *(_QWORD *)&v220[4] = v160;
            *(_WORD *)&v220[12] = 2113;
            *(_QWORD *)&v220[14] = v117;
            _os_log_impl(&dword_182882000, v159, OS_LOG_TYPE_INFO, "App %{private}@ claims %{private}@ via a wildcard UTI, so won't set default handler.", v220, 0x16u);

          }
LABEL_239:

LABEL_156:
LABEL_157:

LABEL_161:
          if (v209 && v211)
            _LSContextDestroy(v209);
          v134 = v210;
          v209 = 0;
          v210 = 0;

          v211 = 0;
          v135 = v212;
          v212 = 0;

          v118 = v175;
LABEL_165:

          goto LABEL_166;
        }
        if (*(_QWORD *)&buf[24] && !*(_WORD *)(*(_QWORD *)&buf[24] + 12))
        {
          _LSDefaultLog();
          v159 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v159, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)v220 = 138478083;
            *(_QWORD *)&v220[4] = v115;
            *(_WORD *)&v220[12] = 2113;
            *(_QWORD *)&v220[14] = v175;
            _os_log_impl(&dword_182882000, v159, OS_LOG_TYPE_INFO, "App %{private}@'s claim for resource URL %{private}@ has a handler rank of None. Will skip weak default handler.", v220, 0x16u);
          }
          goto LABEL_239;
        }
      }
      *(_DWORD *)v220 = 0;
      *(_QWORD *)&v220[8] = 0;
      *(_DWORD *)&v220[16] = 0;
      v221 = 0;
      v222 = 0;
      *(_QWORD *)&v220[24] = 0;
      v131 = v184;
      if (!_LSGetBindingForNodeOrSchemeOrUTI((int)v120, 0, 0, (LaunchServices::BindingEvaluator *)contexta, 0, 14, 0, 12320, (uint64_t)v220)&& (v161 = *v120, objc_msgSend(v184, "bundleIdentifier"), v162 = (__CFString *)objc_claimAutoreleasedReturnValue(), StringForCFString = _LSDatabaseGetStringForCFString(v161, v162, 0), v162, v131 = v184, *(_QWORD *)&v220[8])&& *(_DWORD *)(*(_QWORD *)&v220[8] + 12) == StringForCFString)
      {
        _LSDefaultLog();
        v132 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v132, OS_LOG_TYPE_DEBUG))
        {
          objc_msgSend(v184, "bundleIdentifier");
          v164 = (void *)objc_claimAutoreleasedReturnValue();
          _LSOpenOperationPerform((uint64_t)v117, v164, v214, v132);
        }
      }
      else
      {
        MEMORY[0x186DAF208]();
        +[_LSDService XPCProxyWithErrorHandler:]((uint64_t)_LSDModifyService, __block_literal_global_125);
        v132 = objc_claimAutoreleasedReturnValue();
        objc_msgSend(v131, "bundleIdentifier");
        v133 = (void *)objc_claimAutoreleasedReturnValue();
        memset(v219, 0, sizeof(v219));
        *(_QWORD *)v214 = MEMORY[0x1E0C809B0];
        v215 = 3221225472;
        v216 = ___ZL23_LSUpdateDefaultHandlerP18LSApplicationProxyP5NSURL_block_invoke_126;
        v217 = &unk_1E1044778;
        v218 = v131;
        -[NSObject setHandler:version:roles:forContentType:completionHandler:](v132, "setHandler:version:roles:forContentType:completionHandler:", v133, v219, 0xFFFFFFFFLL, contexta, v214);

      }
      goto LABEL_156;
    }
    objc_msgSend(v16, "scheme");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = objc_msgSend(v23, "caseInsensitiveCompare:", CFSTR("search"));

    if (v24)
    {
      objc_msgSend(v16, "scheme");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      v26 = objc_msgSend(v25, "caseInsensitiveCompare:", CFSTR("com-apple-audiounit"));

      if (!v26)
      {
        v21 = (NSURL *)v16;
        _LSAudioUnitURLOpen(v21);
        v194[2](v194, 1, 0);
        v20 = 0;
        LOBYTE(v16) = 0;
        v19 = 0;
        v187 = 0;
        v40 = v197;
        v41 = v197 != 0;
LABEL_179:
        v22 = 1;
        goto LABEL_180;
      }
      +[LSApplicationWorkspace defaultWorkspace](LSApplicationWorkspace, "defaultWorkspace");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      if ((a4 & 1) != 0)
      {
        v21 = (NSURL *)v16;
        LOBYTE(v16) = 0;
      }
      else
      {
        v42 = objc_opt_class();
        objc_msgSend(v195, "objectForKey:", CFSTR("NoOverrides"));
        v43 = objc_claimAutoreleasedReturnValue();
        v44 = (void *)v43;
        if (v42 && v43 && (objc_opt_isKindOfClass() & 1) == 0)
        {

          v44 = 0;
        }
        LOBYTE(v16) = objc_msgSend(v44, "BOOLValue");

        if ((v16 & 1) != 0)
        {
          v45 = 0;
        }
        else
        {
          v96 = -[_LSURLOverride initWithOriginalURL:]([_LSURLOverride alloc], "initWithOriginalURL:", v193);
          -[_LSURLOverride overrideURL](v96, "overrideURL");
          v45 = (void *)objc_claimAutoreleasedReturnValue();

        }
        v97 = v193;
        if (v45)
          v97 = v45;
        v21 = v97;

      }
      if (!v197)
      {
        objc_msgSend(v27, "applicationForOpeningResource:", v21);
        v98 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v98, "bundleIdentifier");
        v197 = (id)objc_claimAutoreleasedReturnValue();

      }
      -[NSURL scheme](v21, "scheme");
      v99 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v99)
        goto LABEL_111;
      +[_LSCanOpenURLManager sharedManager](_LSCanOpenURLManager, "sharedManager");
      v100 = (void *)objc_claimAutoreleasedReturnValue();
      v101 = objc_msgSend(v100, "schemeTypeOfScheme:", v99);

      if (v101 != 1)
        goto LABEL_111;
      v102 = objc_opt_class();
      objc_msgSend(v195, "objectForKey:", CFSTR("LSOpenSensitiveURLOption"));
      v103 = objc_claimAutoreleasedReturnValue();
      v104 = (void *)v103;
      if (v102 && v103 && (objc_opt_isKindOfClass() & 1) == 0)
      {

        v104 = 0;
      }
      v105 = objc_msgSend(v104, "BOOLValue");

      if (!v105
        || (objc_msgSend(v196, "_xpcConnection"),
            v106 = (void *)objc_claimAutoreleasedReturnValue(),
            v107 = _LSCheckOpenSensitiveURLForXPCConnection(v106, (uint64_t)-[NSURL absoluteString](v21, "absoluteString")), v106, !v107))
      {
        _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2FE0], 1, (uint64_t)"_LSOpenOperationPerform", 553, 0);
        v108 = (void *)objc_claimAutoreleasedReturnValue();
        v194[2](v194, 0, v108);

        v22 = 1;
      }
      else
      {
LABEL_111:
        v22 = 0;
      }

      v187 = 0;
      v19 = 0;
      v20 = 1;
    }
    else
    {
      v31 = objc_opt_class();
      objc_msgSend(v195, "objectForKey:", CFSTR("LSOpenSensitiveURLOption"));
      v32 = objc_claimAutoreleasedReturnValue();
      v33 = (void *)v32;
      if (v31 && v32 && (objc_opt_isKindOfClass() & 1) == 0)
      {

        v33 = 0;
      }
      v34 = objc_msgSend(v33, "BOOLValue");

      if (!v34
        || (objc_msgSend(v196, "_xpcConnection"),
            v35 = (void *)objc_claimAutoreleasedReturnValue(),
            v36 = _LSCheckOpenSensitiveURLForXPCConnection(v35, objc_msgSend(v16, "absoluteString")),
            v35,
            !v36))
      {
        _LSDefaultLog();
        v38 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_182882000, v38, OS_LOG_TYPE_DEFAULT, "The 'search:' scheme requires the com.apple.springboard.opensensitiveurl entitlement", buf, 2u);
        }

        _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2FE0], 1, (uint64_t)"_LSOpenOperationPerform", 511, 0);
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        v194[2](v194, 0, v39);

        v21 = 0;
        LOBYTE(v16) = 0;
        v19 = 0;
        v187 = 0;
        v40 = v197;
        v41 = v197 != 0;
        v20 = 1;
        goto LABEL_179;
      }
      objc_msgSend(v16, "host");
      v37 = objc_claimAutoreleasedReturnValue();

      v21 = (NSURL *)v16;
      v187 = 0;
      v19 = 0;
      LOBYTE(v16) = 0;
      v22 = 0;
      v20 = 1;
      v197 = (id)v37;
    }
  }
  else
  {
    v187 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
  }
LABEL_176:
  v40 = v197;
  v41 = v197 != 0;
  if ((v22 & 1) == 0 && !v197)
  {
    _LSMakeNSErrorImpl((void *)*MEMORY[0x1E0CB2FE0], 45, (uint64_t)"_LSOpenOperationPerform", 563, 0);
    v139 = (void *)objc_claimAutoreleasedReturnValue();
    v194[2](v194, 0, v139);

    v41 = 0;
    v40 = 0;
    goto LABEL_179;
  }
LABEL_180:
  v198 = v40;
  _LSSchemeApprovalRememberForBouncebackCheck(v196, v40);
  if ((v22 & 1) != 0)
    goto LABEL_225;
  _LSGetOptionsDictionaryContainingSourceApplication(v196, 0, v21, 0, 0, 0, 0, v195);
  v140 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithDictionary:", v192);
  v141 = (void *)objc_claimAutoreleasedReturnValue();
  if (v21)
    objc_msgSend(v140, "setObject:forKeyedSubscript:", v21, getFBSOpenApplicationOptionKeyPayloadURL());
  if (v20)
  {
    v142 = objc_opt_class();
    objc_msgSend(v140, "objectForKey:", CFSTR("ReferrerURL"));
    v143 = objc_claimAutoreleasedReturnValue();
    v144 = (void *)v143;
    if (v142 && v143)
    {
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {

        v144 = 0;
        goto LABEL_206;
      }
    }
    else if (!v143)
    {
LABEL_206:
      if ((v16 & 1) != 0 && _LSBundleIdentifierIsWebBrowser((unint64_t)v198))
        objc_msgSend(v141, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], CFSTR("NoOverrides"));
      objc_msgSend(v140, "removeObjectForKey:", CFSTR("NoOverrides"));
      if (objc_msgSend(v141, "count"))
        objc_msgSend(v140, "setObject:forKeyedSubscript:", v141, getFBSOpenApplicationOptionKeyPayloadAnnotation());

      goto LABEL_212;
    }
    v188 = v198;
    v150 = CFSTR("com.apple.launchservices.receivereferrerrurl");
    v151 = v150;
    if (v150)
      v152 = v41;
    else
      v152 = 0;
    if (v152)
    {
      *(_QWORD *)v220 = 0;
      if (_LSContextInit((id *)v220))
      {

      }
      else
      {
        LODWORD(v219[0]) = 0;
        v209 = 0;
        memset(buf, 0, sizeof(buf));
        if (_LSBundleFindWithInfo((uint64_t)v220, 0, v188, 0, buf, 0, 128, v219, &v209))
        {
          v185 = 0;
        }
        else
        {
          v181 = *(_QWORD *)v220;
          v178 = *((_DWORD *)v209 + 35);
          v186 = v151;
          _LSPlistGet(v181, v178);
          v179 = (NSData *)objc_claimAutoreleasedReturnValue();
          _LSPlistDataGetValueForKey(v179, (uint64_t)v186, 0);
          v182 = (void *)objc_claimAutoreleasedReturnValue();

          if (v182 && (objc_opt_respondsToSelector() & 1) != 0)
            v185 = objc_msgSend(v182, "BOOLValue");
          else
            v185 = 0;

        }
        _LSContextDestroy((void **)v220);

        if ((v185 & 1) != 0)
          objc_msgSend(v141, "setObject:forKeyedSubscript:", v144, CFSTR("ReferrerURL"));
      }
    }
    else
    {

    }
    objc_msgSend(v140, "removeObjectForKey:", CFSTR("ReferrerURL"));
    goto LABEL_206;
  }
  if (v19)
  {
    v145 = objc_opt_class();
    objc_msgSend(v140, "objectForKey:", CFSTR("__PayloadOptions"));
    v146 = objc_claimAutoreleasedReturnValue();
    v147 = (void *)v146;
    if (v145 && v146 && (objc_opt_isKindOfClass() & 1) == 0)
    {

      v147 = 0;
    }
    v148 = (void *)objc_msgSend(v147, "mutableCopy");

    objc_msgSend(v148, "setObject:forKeyedSubscript:", v19, CFSTR("FileProviderString"));
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v187);
    v149 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v148, "setObject:forKeyedSubscript:", v149, CFSTR("RequireOpenInPlace"));

    objc_msgSend(v140, "setObject:forKeyedSubscript:", v148, CFSTR("__PayloadOptions"));
    objc_msgSend(v140, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], getFBSOpenApplicationOptionKeyDocumentOpen4LS());
    objc_msgSend(v141, "removeObjectForKey:", CFSTR("FileProviderString"));
    objc_msgSend(v141, "removeObjectForKey:", CFSTR("RequireOpenInPlace"));

  }
  if (objc_msgSend(v141, "count"))
    objc_msgSend(v140, "setObject:forKeyedSubscript:", v141, getFBSOpenApplicationOptionKeyPayloadAnnotation());
  objc_msgSend(v140, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAA0], getFBSOpenApplicationOptionKeyActivateSuspended());
LABEL_212:
  v153 = objc_opt_class();
  objc_msgSend(v140, "objectForKey:", CFSTR("LSBlockUntilComplete"));
  v154 = objc_claimAutoreleasedReturnValue();
  v155 = (void *)v154;
  if (v153 && v154)
  {
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {

      v155 = 0;
LABEL_218:
      v156 = 0;
      goto LABEL_219;
    }
  }
  else if (!v154)
  {
    goto LABEL_218;
  }
  v156 = objc_msgSend(v155, "BOOLValue");
  objc_msgSend(v140, "removeObjectForKey:", CFSTR("LSBlockUntilComplete"));
LABEL_219:

  v157 = objc_alloc_init(_LSSpringBoardCall);
  -[_LSSpringBoardCall setBundleIdentifier:](v157, "setBundleIdentifier:", v198);
  -[_LSSpringBoardCall setLaunchOptions:](v157, "setLaunchOptions:", v140);
  if (v19)
    v158 = 1;
  else
    v158 = v20;
  if (v158 == 1)
    -[_LSSpringBoardCall setClientXPCConnection:](v157, "setClientXPCConnection:", v196);
  -[_LSSpringBoardCall setCallCompletionHandlerWhenFullyComplete:](v157, "setCallCompletionHandlerWhenFullyComplete:", v156);
  -[_LSSpringBoardCall callWithCompletionHandler:](v157, "callWithCompletionHandler:", v194);

LABEL_225:
}

