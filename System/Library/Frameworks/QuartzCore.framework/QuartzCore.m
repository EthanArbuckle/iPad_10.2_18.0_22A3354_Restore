uint64_t CA::compare_contexts(CA *this, const void *a2, const void *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t result;

  v3 = *(_QWORD *)this;
  v4 = *(_DWORD *)(*(_QWORD *)this + 140);
  v5 = *(_DWORD *)(*(_QWORD *)a2 + 140);
  result = (v5 - v4);
  if (v5 == v4)
    return (*(_DWORD *)(*(_QWORD *)a2 + 8) - *(_DWORD *)(v3 + 8));
  return result;
}

unint64_t compare_sel(_BYTE *a1, _BYTE *a2)
{
  return (unint64_t)(a1 - a2) >> 3;
}

uint64_t compareInfo(_DWORD *a1, _DWORD *a2)
{
  return (*a1 - *a2);
}

CATransform3D *__cdecl CATransform3DConcat(CATransform3D *__return_ptr retstr, CATransform3D *a, CATransform3D *b)
{
  const double *v3;
  CATransform3D *result;

  *(_OWORD *)&retstr->m41 = 0u;
  *(_OWORD *)&retstr->m43 = 0u;
  *(_OWORD *)&retstr->m31 = 0u;
  *(_OWORD *)&retstr->m33 = 0u;
  *(_OWORD *)&retstr->m21 = 0u;
  *(_OWORD *)&retstr->m23 = 0u;
  *(_OWORD *)&retstr->m11 = 0u;
  *(_OWORD *)&retstr->m13 = 0u;
  CA::Mat4Impl::mat4_concat((float64x2_t *)retstr, &a->m11, &b->m11, v3);
  return result;
}

CATransform3D *__cdecl CATransform3DMakeRotation(CATransform3D *__return_ptr retstr, CGFloat angle, CGFloat x, CGFloat y, CGFloat z)
{
  double *v5;
  CATransform3D *result;

  *(_OWORD *)&retstr->m41 = 0u;
  *(_OWORD *)&retstr->m43 = 0u;
  *(_OWORD *)&retstr->m31 = 0u;
  *(_OWORD *)&retstr->m33 = 0u;
  *(_OWORD *)&retstr->m21 = 0u;
  *(_OWORD *)&retstr->m23 = 0u;
  *(_OWORD *)&retstr->m11 = 0u;
  *(_OWORD *)&retstr->m13 = 0u;
  CA::Mat4Impl::mat4_set_rotation((CA::Mat4Impl *)retstr, v5, angle, x, y, z);
  return result;
}

uint64_t CA::Render::Texture::image_format(CA::Render::Texture *this)
{
  return 0xFFFFFFFFLL;
}

uint64_t CA::Render::Updater::TransformOp::copy(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  BOOL is_2d_affine;
  const double *v6;

  v3 = x_heap_malloc_small_(a2, 0xB8uLL);
  v4 = v3;
  if (v3)
  {
    is_2d_affine = 1;
    *(_WORD *)(v3 + 16) = 1;
    *(_BYTE *)(v3 + 18) = 0;
    *(_QWORD *)v3 = &off_1E1599238;
    CA::Transform::operator=(v3 + 24, a1 + 24);
    if ((*(_BYTE *)(a1 + 168) & 0x10) != 0)
      is_2d_affine = CA::Mat4Impl::mat4_is_2d_affine((CA::Mat4Impl *)(a1 + 24), v6);
    *(_BYTE *)(v4 + 176) = is_2d_affine;
  }
  return v4;
}

BOOL CA::Mat4Impl::mat4_is_2d_affine(CA::Mat4Impl *this, const double *a2)
{
  return fabs(*((double *)this + 3)) < 0.000001
      && fabs(*((double *)this + 7)) < 0.000001
      && fabs(*((double *)this + 8)) < 0.000001
      && fabs(*((double *)this + 9)) < 0.000001
      && fabs(*((double *)this + 11)) < 0.000001
      && fabs(*((double *)this + 15) + -1.0) < 0.000001;
}

void CA::OGL::MetalContext::draw(CA::OGL::Context *this, uint64_t a2, unsigned int a3, unsigned int a4, char *a5, size_t a6, unsigned int a7, int a8, int a9, unsigned __int16 *a10, _QWORD *a11, uint64_t a12)
{
  uint64_t v12;
  CA::OGL::Context *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  _BYTE *v25;
  int v26;
  int v27;
  float v29;
  BOOL v30;
  __int16 v31;
  uint64_t v32;
  char v33;
  char v34;
  __int16 v35;
  unsigned int v36;
  int v37;
  int v38;
  __int16 v39;
  int v40;
  int v41;
  uint64_t v42;
  __int16 v43;
  __int16 v45;
  __int16 v46;
  __int16 v47;
  __int16 v48;
  __int16 v49;
  unint64_t v50;
  CA::OGL::MetalContext::FragmentShader::Spec **v51;
  __int16 v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  CA::OGL::MetalContext::FragmentShader::Spec **v58;
  int v59;
  CA::OGL::MetalContext *v60;
  unint64_t v61;
  CA::OGL::MetalContext::FragmentShader::Spec **v62;
  uint64_t v63;
  char v64;
  int v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  char v70;
  uint64_t v71;
  unsigned int v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  char NumberOfComponents;
  unint64_t v79;
  unint64_t v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  __int16 v84;
  unsigned int v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  _BYTE *v89;
  CA::OGL::MetalContext::FragmentShader::Spec **v90;
  int v91;
  int v92;
  int v93;
  BOOL v94;
  int v95;
  BOOL v96;
  int v97;
  _QWORD *v99;
  const CA::OGL::MetalContext::FragmentShader::Spec *v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  _DWORD *v104;
  const char *v105;
  _BOOL4 v106;
  CA::OGL::MetalContext::Pipeline *v107;
  uint64_t v110;
  uint64_t v111;
  int32x2_t *v112;
  int32x2_t v113;
  char v114;
  int32x2_t v115;
  int v116;
  int v117;
  int v118;
  int32x2_t v119;
  unsigned int v120;
  int32x2_t v121;
  int32x2_t v122;
  _BOOL4 v124;
  __int128 v125;
  __int128 v126;
  void (*v127)(uint64_t, char *, _DWORD *);
  uint64_t v128;
  unsigned int v129;
  _OWORD *v130;
  _BYTE *v131;
  uint64_t v132;
  int v133;
  char *v134;
  uint64_t v135;
  char v136;
  unsigned int *v137;
  char v138;
  _DWORD *v139;
  uint64_t v140;
  float v141;
  uint64_t v142;
  const float *v143;
  float32x2_t v144;
  float32x2_t v145;
  uint64_t v146;
  __int128 v147;
  unint64_t v148;
  uint64_t v149;
  float v150;
  unint64_t v151;
  uint64_t v152;
  float32x4_t v153;
  __int16 v161;
  unint64_t v162;
  float v163;
  float v164;
  float v165;
  char v166;
  uint64_t v167;
  uint64_t v168;
  char v169;
  char v175;
  float v176;
  float v177;
  char v178;
  uint64_t v179;
  char v180;
  int v186;
  int v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  float32x2_t v191;
  char v192;
  uint64_t v193;
  char v194;
  unint64_t v200;
  unint64_t v201;
  unsigned int *v202;
  unsigned int v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  float v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  float v211;
  __int16 v212;
  __int16 v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v222;
  _BYTE *v223;
  unsigned int v224;
  float *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  char *v229;
  unint64_t v230;
  uint64_t v231;
  float *v232;
  uint64_t v233;
  char v234;
  uint64_t v235;
  char *v236;
  unint64_t v237;
  __int16 *v238;
  uint64_t v239;
  int v245;
  unint64_t v246;
  unint64_t v247;
  int *v248;
  int v249;
  void *v250;
  uint64_t v251;
  uint64_t v252;
  char v253;
  uint64_t v254;
  char v255;
  uint64_t v256;
  uint64_t v257;
  unsigned __int8 v258;
  unsigned __int8 v259;
  BOOL v260;
  char *v261;
  char *v262;
  unint64_t v263;
  unint64_t v269;
  unint64_t v270;
  int v271;
  int v272;
  BOOL v273;
  uint64_t v274;
  unint64_t v276;
  unsigned int v277;
  unsigned int v278;
  void *v279;
  uint64_t v280;
  uint64_t v281;
  char v282;
  char *v283;
  uint64_t v284;
  uint64_t v285;
  _DWORD *v286;
  uint64_t v287;
  unint64_t v293;
  uint64_t v294;
  uint64_t v295;
  __int128 *v296;
  unint64_t v297;
  char **v298;
  unsigned int v299;
  char **v300;
  unint64_t v301;
  unsigned int *v302;
  uint64_t v303;
  uint64_t v304;
  int v305;
  unint64_t v306;
  unint64_t v307;
  uint64_t *v308;
  uint64_t v309;
  int v310;
  uint64_t v311;
  _QWORD *v312;
  uint64_t v313;
  void *v314;
  void *v315;
  BOOL v316;
  __int16 v317;
  int v318;
  uint64_t v320;
  int v321;
  BOOL v322;
  uint64_t v323;
  int v324;
  uint64_t v325;
  __int16 v326;
  uint64_t v327;
  unint64_t v328;
  char *v329;
  char *v330;
  unint64_t v331;
  int8x16_t v332;
  uint64_t v333;
  uint64_t v334;
  BOOL v335;
  unint64_t v336;
  int8x16_t v337;
  uint64_t v338;
  uint64_t v339;
  BOOL v340;
  int v341;
  unint64_t v342;
  unint64_t v343;
  char *v344;
  uint64_t v345;
  unint64_t v346;
  uint64_t v347;
  unint64_t v348;
  unint64_t v349;
  unint64_t v350;
  char *v351;
  int8x16_t v352;
  int8x16_t v353;
  int v354;
  unint64_t v355;
  char *v356;
  uint64_t v357;
  unsigned int v358;
  float32x2_t v359;
  uint64_t v360;
  char *v361;
  char v362;
  uint64_t v363;
  uint64_t v364;
  unint64_t v365;
  float v366;
  unsigned int v367;
  int v368;
  __int16 v369;
  const CA::OGL::MetalContext::FragmentShader::Spec *v370;
  uint64_t v371;
  __int16 v372;
  int v373;
  int v374;
  unint64_t v375;
  unsigned int v376;
  unsigned int v377;
  unint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  unsigned int *v383;
  unint64_t v384;
  BOOL v385;
  int v386;
  int v387;
  BOOL v388;
  int v389;
  BOOL v390;
  int v391;
  uint64_t v399;
  unint64_t v400;
  unint64_t v401;
  unint64_t v402;
  unsigned int *v403;
  unsigned int v404;
  int v405;
  int v406;
  int v407;
  unsigned int v408;
  unsigned int v409;
  int v410;
  _DWORD *v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  unint64_t v415;
  float *v416;
  const void *v417;
  int v418;
  int v419;
  char v420;
  int v421;
  float32x4_t *v422;
  const float *v423;
  float32x4_t v424;
  float32x4_t v425;
  float32x4_t v426;
  float *v427;
  uint64_t v428;
  _QWORD *v429;
  uint64_t v430;
  uint64_t v431;
  BOOL v432;
  BOOL v433;
  int v435;
  uint64_t v436;
  __int128 v437;
  unsigned __int16 *v438;
  uint64_t v439;
  float64x2_t *v440;
  int v441;
  _QWORD *v442;
  unsigned int *v443;
  uint64_t v444;
  unsigned int v445;
  char *v446;
  uint64_t v447;
  unsigned int v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  size_t v453;
  uint64_t v454;
  int v455;
  int v456;
  unsigned int v457;
  unsigned int v458;
  void *buffer;
  _BOOL4 v461;
  CA::OGL::MetalContext::Pipeline *v462;
  uint64_t v463;
  NSString *v464;
  uint64_t pipeline_state;
  unint64_t v466;
  malloc_zone_t *malloc_zone;
  CA::OGL::MetalContext::Pipeline *v468;
  os_signpost_id_t v470;
  NSString *v471;
  malloc_zone_t *v472;
  CA::OGL::MetalContext::Pipeline *v473;
  _QWORD *v474;
  _QWORD *v475;
  CA::OGL::MetalContext::Pipeline *v476;
  malloc_zone_t *v477;
  CA::OGL::MetalContext::Pipeline *v478;
  unint64_t v479;
  void *v481;
  uint64_t v482;
  CA::OGL::MetalContext *v483;
  os_signpost_id_t v484;
  unint64_t v485;
  char *v487;
  os_signpost_id_t v489;
  NSObject *v490;
  char *v491;
  unsigned int v492;
  int v493;
  unsigned int v494;
  size_t v495;
  char *__src;
  uint64_t v497;
  uint64_t v499;
  unsigned int v500;
  char *v501;
  char *v502;
  unsigned int *v503;
  int32x2_t v504;
  uint64_t v505;
  int32x2_t v506;
  uint64_t *v507;
  CA::OGL::MetalContext *v508;
  unsigned int v509;
  _QWORD v510[3];
  _QWORD *v511;
  __int128 v512;
  __int128 v513;
  CA::OGL::MetalContext::FragmentShader::Spec *v514[2];
  __int128 v515;
  __int128 v516;
  __int128 v517;
  __int128 v518;
  __int128 v519;
  uint64_t v520;
  _DWORD buf[8];
  __int128 v522;
  __int128 v523;
  __int128 v524;
  __int128 v525;
  uint64_t v526;

  v526 = *MEMORY[0x1E0C80C00];
  v12 = *((_QWORD *)this + 31);
  if (!v12)
    __assert_rtn("draw", "ogl-metal.mm", 7927, "current_metal_surface () != nullptr");
  v19 = this;
  if (*((_QWORD *)this + 32) != v12 || *((_DWORD *)this + 61) != ((*(unsigned __int8 *)(v12 + 72) >> 1) & 0x1F))
    CA::OGL::Context::prepare_destination_(this);
  if ((*((_WORD *)v19 + 408) & 0x200) != 0)
  {
    v20 = *((_QWORD *)v19 + 22);
    if (v20)
    {
      *((_WORD *)v19 + 408) &= ~0x200u;
    }
  }
  if (!CA::OGL::MetalContext::start_render_encoder(v19))
    return;
  v21 = *((_QWORD *)v19 + 31);
  if ((*(_BYTE *)(v21 + 69) & 8) != 0 && (*(_WORD *)(v21 + 75) & 0x20) != 0)
  {
    CA::OGL::MetalContext::clear_memoryless_texture_(v19);
    v21 = *((_QWORD *)v19 + 31);
  }
  *(_OWORD *)v514 = 0u;
  v515 = 0u;
  if (*(_QWORD *)(v21 + 200))
    v22 = *(_QWORD *)(v21 + 200);
  else
    v22 = v21;
  v23 = (unsigned __int8 *)*((_QWORD *)v19 + 2);
  v24 = v23[16];
  v25 = &CA::OGL::MetalContext::texture_function_info[-v24];
  v26 = CA::OGL::MetalContext::texture_function_info[8 * v24 - v24] & 0x3F;
  if (a2)
    v27 = a2 == 1;
  else
    v27 = 2;
  _ZF = (CA::OGL::MetalContext::texture_function_info[8 * v24 - v24] & 0x3F) != 0 || v21 == 0;
  if (_ZF || ((v29 = *(float *)(v21 + 64), v29 != 0.0) ? (v30 = v29 == 1.0) : (v30 = 1), v30))
    v31 = 0;
  else
    v31 = (*((float *)v19 + 722) != 1.0) << 10;
  v32 = v24 & 0x7F;
  BYTE6(v514[1]) = v24 & 0x7F;
  if (v23[480])
  {
    v33 = v23[480];
    if ((*(_WORD *)&v25[8 * v24 + 5] & 8) == 0)
    {
      v33 = 58;
      if ((v23[481] & 1) != 0)
      {
        if (v23[480] == 1)
          v33 = 58;
        else
          v33 = v23[480];
      }
    }
  }
  else
  {
    v33 = 0;
  }
  HIBYTE(v514[1]) = v33 & 0x3F;
  v34 = (8 * v27) & 0x9F | (32 * (*(_BYTE *)(v22 + 232) & 3));
  LOBYTE(v515) = v34;
  if (((0x20000010388001uLL >> v26) & ((v23[481] & 2) >> 1)) != 0)
    v35 = 8;
  else
    v35 = 0;
  v36 = *((_DWORD *)v19 + 669);
  v37 = (v36 >> 6) & 0x20;
  v38 = (v36 >> 14) & 0x10;
  v39 = v37 | v38 | v35;
  *(_WORD *)((char *)&v515 + 1) = v39;
  v40 = *(_DWORD *)(v22 + 120);
  v41 = (16 * *(_DWORD *)(v22 + 68)) & 0x20000 | ((*(_WORD *)(v22 + 214) != 0) << 16);
  WORD4(v515) = v40 & 0x3FF | 0xE800;
  BYTE10(v515) = BYTE2(v41);
  v508 = v19;
  __src = a5;
  v497 = a2;
  v493 = a8;
  v494 = a4;
  v495 = a6;
  v492 = a7;
  if (v26)
  {
    if (v27)
      __assert_rtn("get_pipeline_spec", "ogl-metal.mm", 5651, "layout == VertexLayout_Surface");
    if (((0x7F70FF3FFC7FFFFuLL >> v26) & 1) != 0)
    {
      if ((*(_WORD *)&v25[8 * v24 + 5] & 0x10) == 0 && *(_WORD *)(v21 + 212))
        __assert_rtn("get_pipeline_spec", "ogl-metal.mm", 5659, "surf->backing_attachment == 0");
    }
    else
    {
      *(_WORD *)((char *)&v515 + 1) = *(_WORD *)(v21 + 212) & 3 | v39;
    }
    if (CA::OGL::tex_image_count[v32])
    {
      v50 = 0;
      v51 = v514;
      do
      {
        v52 = *((_WORD *)v51 + 2);
        v53 = *(_DWORD *)v51 | 0xE000;
        *((_BYTE *)v51 + 6) = *((_BYTE *)v51 + 6);
        *((_WORD *)v51 + 2) = v52;
        *(_DWORD *)v51 = v53;
        v51 = (CA::OGL::MetalContext::FragmentShader::Spec **)((char *)v51 + 7);
        ++v50;
      }
      while (v50 < CA::OGL::tex_image_count[BYTE6(v514[1]) & 0x7F]);
    }
    CA::OGL::MetalContext::Pipeline::Spec::lift_blend_function((uint64_t)v514);
    if ((HIBYTE(v514[1]) & 0x3F) != 0x3A)
      __assert_rtn("get_pipeline_spec", "ogl-metal.mm", 5668, "spec.fragment.blend_function == OGL_BLEND_NONE");
    *(_DWORD *)((char *)&v515 + 3) = 0;
    v54 = (16 * *(unsigned __int16 *)((char *)&v515 + 1)) & 0x100 | (((*(unsigned __int16 *)((char *)&v515 + 1) >> 2) & 1) << 7);
    if ((BYTE1(v515) & 4) == 0)
    {
      v55 = BYTE6(v514[1]) & 0x7F;
      *(_WORD *)((char *)&v515 + 5) = v54 | (uint64_t)CA::OGL::MetalContext::fragment_shader_type_info[2 * (CA::OGL::MetalContext::texture_function_info[8 * v55 - v55] & 0x3F) + 1] & 0x1F | (32 * ((v515 >> 3) & 3));
      v56 = CA::OGL::tex_image_count[v55];
      if (CA::OGL::tex_image_count[v55])
      {
        v57 = (char *)&v515 + 3;
        v58 = v514;
        do
        {
          v59 = *(_DWORD *)v58;
          v58 = (CA::OGL::MetalContext::FragmentShader::Spec **)((char *)v58 + 7);
          *v57 = *v57 & 0xFC | byte_184755BDC[v59 & 0x3F] & 3;
          ++v57;
          --v56;
        }
        while (v56);
      }
      goto LABEL_100;
    }
LABEL_99:
    *(_WORD *)((char *)&v515 + 5) = v54;
    v19 = v508;
    goto LABEL_100;
  }
  LOBYTE(v515) = (*((unsigned __int16 *)v19 + 408) >> 12) & 7 | v34;
  v42 = *(_QWORD *)(v21 + 120);
  v43 = (unint64_t)(v42 - 550) < 6;
  if (v42 == 125 || v42 == 115)
    v45 = 128;
  else
    v45 = 0;
  v46 = v45 | (v43 << 6) | *(_WORD *)(v21 + 212) & 3 | v39;
  v47 = (v23[307] != 0) << 8;
  v48 = v31 | ((v23[305] != 0) << 9);
  if (v38)
  {
    if (CADeviceUseCIF10::once != -1)
      dispatch_once(&CADeviceUseCIF10::once, &__block_literal_global_9735);
    v49 = CADeviceUseCIF10::enable_cif10 << 11;
  }
  else
  {
    v49 = 2048;
  }
  v60 = v508;
  *(_WORD *)((char *)&v515 + 1) = (*((_WORD *)v508 + 244) << 11) & 0x3000 | v48 | v49 | v46 | v47;
  if (CA::OGL::tex_image_count[v32])
  {
    v61 = 0;
    v62 = v514;
    do
    {
      v63 = *((_QWORD *)v60 + 2);
      v64 = *(_BYTE *)(v63 + v61 + 17);
      v65 = *((unsigned __int8 *)v62 + 6);
      v66 = *((unsigned __int16 *)v62 + 2) | (v65 << 16);
      v67 = *(_DWORD *)v62 & 0xFFFF1E00 | (unint64_t)(v66 << 32) | v64 & 0x3F | ((unint64_t)(*(_BYTE *)(v63 + v61 + 19) & 7) << 6);
      v68 = v67 | 0xE000;
      *((_BYTE *)v62 + 6) = v65;
      *((_WORD *)v62 + 2) = v66;
      *(_DWORD *)v62 = v67 | 0xE000;
      if (((0x42000FFE00uLL >> v64) & 1) != 0)
      {
        v69 = 0;
      }
      else
      {
        v69 = *(_QWORD *)(v63 + 8 * CA::OGL::state_image_texture_unit(v63, v61) + 176) & 0xFFFFFFFFFFFFFFFCLL;
        if (v69)
        {
          v70 = 0;
          v68 = v67 | ((unint64_t)(*(_BYTE *)(v69 + 125) & 7) << 13);
          *((_BYTE *)v62 + 6) = BYTE6(v67);
          *((_WORD *)v62 + 2) = WORD2(v67);
          *(_DWORD *)v62 = v68;
          goto LABEL_71;
        }
      }
      v70 = 1;
LABEL_71:
      v71 = *(_QWORD *)(v63 + 8 * v61 + 40);
      if (v71)
      {
        v72 = *(_DWORD *)(v71 + 36);
        v505 = (v72 >> 10) & 0x1F;
        v73 = v68 & 0xFFFC00000000FFFFLL | (v72 << 19) & 0xF80000 | (v72 << 19) & 0x1F000000 | (v505 << 29);
        v74 = (v72 >> 15) & 0x1F;
        v75 = (v72 >> 20) & 0x1F;
        v76 = (v72 >> 25) & 0x1F;
        v77 = v70;
        NumberOfComponents = CGColorSpaceGetNumberOfComponents(*(CGColorSpaceRef *)(v71 + 16));
        v70 = v77;
        v79 = v73 | (v74 << 34) | (v75 << 39) | (v76 << 44);
        v80 = v79 | ((unint64_t)(*(_DWORD *)(v71 + 36) >> 31) << 49);
        *((_WORD *)v62 + 2) = WORD2(v79);
        *(_DWORD *)v62 = v73 | ((NumberOfComponents & 7) << 16);
        *((_BYTE *)v62 + 6) = BYTE6(v80);
        if ((v72 & 0x1F) <= 0x14 && ((1 << (v72 & 0x1F)) & 0x148000) != 0)
          goto LABEL_74;
        if ((v86 = (v72 >> 5) & 0x1F, v86 <= 0x14) && ((1 << v86) & 0x148000) != 0
          || v505 <= 0x14 && ((1 << ((v72 >> 10) & 0x1F)) & 0x148000) != 0
          || v74 <= 0x14 && ((1 << ((v72 >> 15) & 0x1F)) & 0x148000) != 0
          || v75 <= 0x14 && ((1 << ((v72 >> 20) & 0x1F)) & 0x148000) != 0
          || v76 <= 0x14 && ((1 << ((v72 >> 25) & 0x1F)) & 0x148000) != 0)
        {
LABEL_74:
          *(_WORD *)((char *)&v515 + 1) |= 0x800u;
        }
      }
      if ((v70 & 1) != 0)
      {
        LOBYTE(v81) = 0;
      }
      else
      {
        v82 = *(_DWORD *)(v69 + 52);
        v83 = HIWORD(v82) & 0xF;
        v81 = (v82 >> 20) & 0xF;
        if (v83 > v81)
          LOBYTE(v81) = v83;
        if ((v81 & 0xFC) == 0)
          LOBYTE(v81) = 0;
      }
      v60 = v508;
      v84 = *((_WORD *)v62 + 2);
      v85 = *(_DWORD *)v62 & 0xFFFFE1FF | (v81 << 9);
      *((_BYTE *)v62 + 6) = *((_BYTE *)v62 + 6);
      *((_WORD *)v62 + 2) = v84;
      *(_DWORD *)v62 = v85;
      v62 = (CA::OGL::MetalContext::FragmentShader::Spec **)((char *)v62 + 7);
      ++v61;
    }
    while (v61 < CA::OGL::tex_image_count[BYTE6(v514[1]) & 0x7F]);
  }
  CA::OGL::MetalContext::Pipeline::Spec::lift_blend_function((uint64_t)v514);
  *(_DWORD *)((char *)&v515 + 3) = 0;
  v54 = (16 * *(unsigned __int16 *)((char *)&v515 + 1)) & 0x100 | (((*(unsigned __int16 *)((char *)&v515 + 1) >> 2) & 1) << 7);
  if ((BYTE1(v515) & 4) != 0)
    goto LABEL_99;
  v87 = BYTE6(v514[1]) & 0x7F;
  *(_WORD *)((char *)&v515 + 5) = v54 | (uint64_t)CA::OGL::MetalContext::fragment_shader_type_info[2
                                                                                                * (CA::OGL::MetalContext::texture_function_info[8 * v87 - v87] & 0x3F)
                                                                                                + 1] & 0x1F | (32 * ((v515 >> 3) & 3));
  v88 = CA::OGL::tex_image_count[v87];
  v19 = v508;
  if (CA::OGL::tex_image_count[v87])
  {
    v89 = (char *)&v515 + 3;
    v90 = v514;
    do
    {
      v91 = *(_DWORD *)v90;
      v90 = (CA::OGL::MetalContext::FragmentShader::Spec **)((char *)v90 + 7);
      *v89 = *v89 & 0xFC | byte_184755BDC[v91 & 0x3F] & 3;
      ++v89;
      --v88;
    }
    while (v88);
  }
LABEL_100:
  v512 = 0u;
  v513 = 0u;
  v92 = *((_DWORD *)v19 + 104);
  v93 = *((_DWORD *)v19 + 723);
  if ((v92 & 0x40000) != 0)
  {
    v95 = 0;
LABEL_109:
    v96 = 0;
    memset(buf, 0, sizeof(buf));
    goto LABEL_114;
  }
  if (byte_1ECDC6AA6)
    v94 = 1;
  else
    v94 = byte_1ECDC6AA7 == 0;
  v95 = !v94;
  if ((v92 & 0x80000) == 0 && byte_1ECDC6AA6)
    goto LABEL_109;
  v95 |= (v92 & 0x80000u) >> 19;
  v97 = CA::OGL::MetalContext::texture_function_info[8 * (BYTE6(v514[1]) & 0x7F) - (BYTE6(v514[1]) & 0x7F)] & 0x3F;
  v96 = v97 == 0;
  memset(buf, 0, sizeof(buf));
  if (v95 == 1 && v97 == 0)
  {
    v461 = 0;
    v462 = 0;
    v518 = 0uLL;
    v519 = 0uLL;
    v95 = 1;
    goto LABEL_678;
  }
LABEL_114:
  v99 = std::__hash_table<std::__hash_value_type<CA::OGL::MetalContext::Pipeline::Spec,CA::OGL::MetalContext::Pipeline*>,std::__unordered_map_hasher<CA::OGL::MetalContext::Pipeline::Spec,std::__hash_value_type<CA::OGL::MetalContext::Pipeline::Spec,CA::OGL::MetalContext::Pipeline*>,CA::OGL::MetalContext::StructHasher<CA::OGL::MetalContext::Pipeline::Spec>,std::equal_to<CA::OGL::MetalContext::Pipeline::Spec>,true>,std::__unordered_map_equal<CA::OGL::MetalContext::Pipeline::Spec,std::__hash_value_type<CA::OGL::MetalContext::Pipeline::Spec,CA::OGL::MetalContext::Pipeline*>,std::equal_to<CA::OGL::MetalContext::Pipeline::Spec>,CA::OGL::MetalContext::StructHasher<CA::OGL::MetalContext::Pipeline::Spec>,true>,std::allocator<std::__hash_value_type<CA::OGL::MetalContext::Pipeline::Spec,CA::OGL::MetalContext::Pipeline*>>>::find<CA::OGL::MetalContext::Pipeline::Spec>((_QWORD *)v19 + 257, v514);
  v106 = v99 == 0;
  if (!v99)
  {
    if (v92 & 0x400000 | v93 & 8)
    {
      v463 = mach_continuous_time();
      v464 = (NSString *)CA::OGL::MetalContext::Pipeline::Spec::name((CA::OGL::MetalContext::Pipeline::Spec *)v514);
      pipeline_state = CA::OGL::MetalContext::load_pipeline_state(v508, v464);
      if (pipeline_state)
      {
        v466 = pipeline_state;
        malloc_zone = (malloc_zone_t *)get_malloc_zone();
        v468 = (CA::OGL::MetalContext::Pipeline *)malloc_type_zone_malloc(malloc_zone, 0x18uLL, 0x8BB15036uLL);
        v107 = v468;
        if (v468)
        {
          *(_QWORD *)v468 = 0;
          *((_QWORD *)v468 + 1) = 0;
          *((_WORD *)v468 + 8) = 256;
        }
        std::__hash_table<std::__hash_value_type<CA::OGL::MetalContext::Pipeline::Spec,CA::OGL::MetalContext::Pipeline*>,std::__unordered_map_hasher<CA::OGL::MetalContext::Pipeline::Spec,std::__hash_value_type<CA::OGL::MetalContext::Pipeline::Spec,CA::OGL::MetalContext::Pipeline*>,CA::OGL::MetalContext::StructHasher<CA::OGL::MetalContext::Pipeline::Spec>,std::equal_to<CA::OGL::MetalContext::Pipeline::Spec>,true>,std::__unordered_map_equal<CA::OGL::MetalContext::Pipeline::Spec,std::__hash_value_type<CA::OGL::MetalContext::Pipeline::Spec,CA::OGL::MetalContext::Pipeline*>,std::equal_to<CA::OGL::MetalContext::Pipeline::Spec>,CA::OGL::MetalContext::StructHasher<CA::OGL::MetalContext::Pipeline::Spec>,true>,std::allocator<std::__hash_value_type<CA::OGL::MetalContext::Pipeline::Spec,CA::OGL::MetalContext::Pipeline*>>>::__emplace_unique_key_args<CA::OGL::MetalContext::Pipeline::Spec,std::piecewise_construct_t const&,std::tuple<CA::OGL::MetalContext::Pipeline::Spec const&>,std::tuple<>>((float *)v19 + 514, v514, v514)[6] = v468;
        if (atomic_load((unint64_t *)v107))
          __assert_rtn("set_pipeline_state", "ogl-metal.mm", 1431, "!is_complete ()");
        atomic_store(v466, (unint64_t *)v107);
        v470 = CA::OGL::MetalContext::begin_new_render_pipeline((CA::OGL::MetalContext *)v464, (NSString *)1, v463);
        CA::OGL::MetalContext::end_new_render_pipeline(v508, v470, (char *)0x24, 1);
        v512 = *(_OWORD *)v514;
        v513 = v515;
        v19 = v508;
        goto LABEL_119;
      }
    }
    v472 = (malloc_zone_t *)get_malloc_zone();
    v473 = (CA::OGL::MetalContext::Pipeline *)malloc_type_zone_malloc(v472, 0x18uLL, 0x8BB15036uLL);
    v107 = v473;
    if (v473)
    {
      *(_QWORD *)v473 = 0;
      *((_QWORD *)v473 + 1) = 0;
      *((_WORD *)v473 + 8) = 256;
    }
    std::__hash_table<std::__hash_value_type<CA::OGL::MetalContext::Pipeline::Spec,CA::OGL::MetalContext::Pipeline*>,std::__unordered_map_hasher<CA::OGL::MetalContext::Pipeline::Spec,std::__hash_value_type<CA::OGL::MetalContext::Pipeline::Spec,CA::OGL::MetalContext::Pipeline*>,CA::OGL::MetalContext::StructHasher<CA::OGL::MetalContext::Pipeline::Spec>,std::equal_to<CA::OGL::MetalContext::Pipeline::Spec>,true>,std::__unordered_map_equal<CA::OGL::MetalContext::Pipeline::Spec,std::__hash_value_type<CA::OGL::MetalContext::Pipeline::Spec,CA::OGL::MetalContext::Pipeline*>,std::equal_to<CA::OGL::MetalContext::Pipeline::Spec>,CA::OGL::MetalContext::StructHasher<CA::OGL::MetalContext::Pipeline::Spec>,true>,std::allocator<std::__hash_value_type<CA::OGL::MetalContext::Pipeline::Spec,CA::OGL::MetalContext::Pipeline*>>>::__emplace_unique_key_args<CA::OGL::MetalContext::Pipeline::Spec,std::piecewise_construct_t const&,std::tuple<CA::OGL::MetalContext::Pipeline::Spec const&>,std::tuple<>>((float *)v19 + 514, v514, v514)[6] = v473;
    *(_OWORD *)buf = *(_OWORD *)v514;
    *(_OWORD *)&buf[4] = v515;
    v19 = v508;
    goto LABEL_676;
  }
  v107 = (CA::OGL::MetalContext::Pipeline *)v99[6];
  if (!atomic_load((unint64_t *)v107))
  {
LABEL_676:
    v518 = 0u;
    v519 = 0u;
    if (!v96)
    {
      v462 = 0;
      v516 = 0uLL;
      v517 = 0uLL;
      v512 = *(_OWORD *)v514;
      v513 = v515;
LABEL_697:
      if (!atomic_load((unint64_t *)v107))
      {
        v481 = (void *)MEMORY[0x1E0CB3940];
        v482 = CA::OGL::MetalContext::Pipeline::Spec::encode_segment((CA::OGL::MetalContext::Pipeline::Spec *)&v512);
        v483 = (CA::OGL::MetalContext *)objc_msgSend(v481, "stringWithFormat:", CFSTR("%@_%@"), v482, CA::OGL::MetalContext::FragmentShader::Spec::name((CA::OGL::MetalContext::FragmentShader::Spec *)&v512));
        v509 = 32;
        v484 = CA::OGL::MetalContext::begin_new_render_pipeline(v483, (NSString *)1, 0);
        if (v106)
        {
          v485 = CA::OGL::MetalContext::create_pipeline_state((uint64_t)v508, (CA::OGL::MetalContext::Pipeline::Spec *)&v512, &v509, 0);
          if (atomic_load((unint64_t *)v107))
            __assert_rtn("set_pipeline_state", "ogl-metal.mm", 1431, "!is_complete ()");
          atomic_store(v485, (unint64_t *)v107);
          v487 = (char *)v509;
        }
        else
        {
          CA::OGL::MetalContext::Pipeline::wait_for_completion(v107);
          v487 = (char *)(v509 | 8);
        }
        CA::OGL::MetalContext::end_new_render_pipeline(v508, v484, v487, 0);
        v19 = v508;
        ++*((_DWORD *)v508 + 175);
      }
      if (v462)
        CA::OGL::MetalContext::dispatch_async_pipeline((dispatch_queue_t *)v19, (const CA::OGL::MetalContext::Pipeline::Spec *)&v516, v462, 0);
      if (!atomic_load((unint64_t *)v107))
        __assert_rtn("get_pipeline", "ogl-metal.mm", 6957, "pipeline && pipeline->is_complete ()");
      goto LABEL_119;
    }
    v461 = v106;
    v462 = v107;
LABEL_678:
    CA::OGL::MetalContext::Pipeline::Spec::get_generic((uint64_t)&v518, (uint64_t)v514);
    v19 = v508;
    v474 = std::__hash_table<std::__hash_value_type<CA::OGL::MetalContext::Pipeline::Spec,CA::OGL::MetalContext::Pipeline*>,std::__unordered_map_hasher<CA::OGL::MetalContext::Pipeline::Spec,std::__hash_value_type<CA::OGL::MetalContext::Pipeline::Spec,CA::OGL::MetalContext::Pipeline*>,CA::OGL::MetalContext::StructHasher<CA::OGL::MetalContext::Pipeline::Spec>,std::equal_to<CA::OGL::MetalContext::Pipeline::Spec>,true>,std::__unordered_map_equal<CA::OGL::MetalContext::Pipeline::Spec,std::__hash_value_type<CA::OGL::MetalContext::Pipeline::Spec,CA::OGL::MetalContext::Pipeline*>,std::equal_to<CA::OGL::MetalContext::Pipeline::Spec>,CA::OGL::MetalContext::StructHasher<CA::OGL::MetalContext::Pipeline::Spec>,true>,std::allocator<std::__hash_value_type<CA::OGL::MetalContext::Pipeline::Spec,CA::OGL::MetalContext::Pipeline*>>>::find<CA::OGL::MetalContext::Pipeline::Spec>((_QWORD *)v508 + 257, &v518);
    v475 = v474;
    v106 = v474 == 0;
    if (v474)
    {
      v476 = (CA::OGL::MetalContext::Pipeline *)v474[6];
    }
    else
    {
      v477 = (malloc_zone_t *)get_malloc_zone();
      v478 = (CA::OGL::MetalContext::Pipeline *)malloc_type_zone_malloc(v477, 0x18uLL, 0x8BB15036uLL);
      v476 = v478;
      if (v478)
      {
        *(_QWORD *)v478 = 0;
        *((_QWORD *)v478 + 1) = 0;
        *((_WORD *)v478 + 8) = 256;
      }
      std::__hash_table<std::__hash_value_type<CA::OGL::MetalContext::Pipeline::Spec,CA::OGL::MetalContext::Pipeline*>,std::__unordered_map_hasher<CA::OGL::MetalContext::Pipeline::Spec,std::__hash_value_type<CA::OGL::MetalContext::Pipeline::Spec,CA::OGL::MetalContext::Pipeline*>,CA::OGL::MetalContext::StructHasher<CA::OGL::MetalContext::Pipeline::Spec>,std::equal_to<CA::OGL::MetalContext::Pipeline::Spec>,true>,std::__unordered_map_equal<CA::OGL::MetalContext::Pipeline::Spec,std::__hash_value_type<CA::OGL::MetalContext::Pipeline::Spec,CA::OGL::MetalContext::Pipeline*>,std::equal_to<CA::OGL::MetalContext::Pipeline::Spec>,CA::OGL::MetalContext::StructHasher<CA::OGL::MetalContext::Pipeline::Spec>,true>,std::allocator<std::__hash_value_type<CA::OGL::MetalContext::Pipeline::Spec,CA::OGL::MetalContext::Pipeline*>>>::__emplace_unique_key_args<CA::OGL::MetalContext::Pipeline::Spec,std::piecewise_construct_t const&,std::tuple<CA::OGL::MetalContext::Pipeline::Spec const&>,std::tuple<>>((float *)v508 + 514, &v518, &v518)[6] = v478;
      v19 = v508;
    }
    v516 = 0u;
    v517 = 0u;
    if (v476 && ((v479 = atomic_load((unint64_t *)v476)) != 0 || v95 && *((_BYTE *)v476 + 17)))
    {
      CA::OGL::MetalContext::Pipeline::Spec::push_blend_function((uint64_t)v514);
      v512 = v518;
      v513 = v519;
      if (v461)
      {
        v516 = *(_OWORD *)buf;
        v517 = *(_OWORD *)&buf[4];
      }
      else
      {
        v462 = 0;
      }
      v107 = v476;
      v19 = v508;
    }
    else
    {
      v512 = *(_OWORD *)v514;
      v513 = v515;
      if (v475)
      {
        v107 = v462;
        v106 = v461;
        v462 = 0;
      }
      else
      {
        v516 = v518;
        v517 = v519;
        v107 = v462;
        v106 = v461;
        v462 = v476;
      }
    }
    goto LABEL_697;
  }
  if (*((_BYTE *)v107 + 16))
  {
    v471 = (NSString *)CA::OGL::MetalContext::Pipeline::Spec::name((CA::OGL::MetalContext::Pipeline::Spec *)v514);
    v19 = v508;
    CA::OGL::MetalContext::emit_new_render_pipeline(v508, v471);
    *((_BYTE *)v107 + 16) = 0;
  }
  v512 = *(_OWORD *)v514;
  v513 = v515;
LABEL_119:
  if (!atomic_load((unint64_t *)v107))
    return;
  v110 = atomic_load((unint64_t *)v107);
  if (*((_QWORD *)v19 + 414) != v110)
  {
    *((_QWORD *)v19 + 414) = v110;
    (*((void (**)(_QWORD, char *))v19 + 370))(*((_QWORD *)v19 + 367), sel_setRenderPipelineState_);
    v19 = v508;
  }
  v111 = *((_QWORD *)v19 + 31);
  v112 = *(_QWORD *)(v111 + 200) ? *(int32x2_t **)(v111 + 200) : (int32x2_t *)*((_QWORD *)v19 + 31);
  v113 = v112[23];
  v114 = *((_BYTE *)v19 + 64);
  if (v114)
  {
    v115 = *(int32x2_t *)((char *)v19 + 40);
    v116 = *((_DWORD *)v19 + 9);
    if ((v112[29].i16[0] & 0x200) != 0)
    {
      v116 = v113.i32[1] - (v116 + v115.i32[1]);
      v117 = v112[4].i32[1];
    }
    else
    {
      v117 = -v112[4].i32[1];
    }
    v118 = v117 + v116;
    if ((v112[29].i16[0] & 0x400) != 0)
    {
      v119.i32[0] = v112[5].i32[1] - v115.i32[1] - v118;
      v119.i32[1] = *((_DWORD *)v19 + 8) - v112[4].i32[0];
      v115 = vrev64_s32(v115);
    }
    else
    {
      v119.i32[0] = *((_DWORD *)v19 + 8) - v112[4].i32[0];
      v119.i32[1] = v118;
    }
    v122 = vmin_s32(v113, vadd_s32(v115, v119));
    v121 = vmax_s32(v119, 0);
    v113 = vsub_s32(v122, v121);
  }
  else
  {
    v120 = (*(unsigned __int8 *)(v111 + 72) >> 1) & 0x1F;
    if (v120)
      v113 = vmax_s32(vshl_s32(v113, vneg_s32(vdup_n_s32(v120))), (int32x2_t)0x100000001);
    v121 = 0;
  }
  v124 = v113.i32[0] > 0 && v113.i32[1] > 0;
  if (*(_QWORD *)&v121 != *((_QWORD *)v19 + 6) || *(_QWORD *)&v113 != *((_QWORD *)v19 + 7))
  {
    if (v124)
    {
      v504 = v121;
      v506 = v113;
      *(_QWORD *)&v125 = v121.u32[0];
      *((_QWORD *)&v125 + 1) = v121.u32[1];
      v126 = v125;
      v127 = (void (*)(uint64_t, char *, _DWORD *))*((_QWORD *)v19 + 373);
      v128 = *((_QWORD *)v19 + 367);
      *(_QWORD *)&v125 = v113.u32[0];
      *((_QWORD *)&v125 + 1) = v113.u32[1];
      *(_OWORD *)buf = v126;
      *(_OWORD *)&buf[4] = v125;
      v127(v128, sel_setScissorRect_, buf);
      v19 = v508;
      v114 = *((_BYTE *)v508 + 64);
      v121 = v504;
      v113 = v506;
    }
    *((int32x2_t *)v19 + 6) = v121;
    *((int32x2_t *)v19 + 7) = v113;
    *((_DWORD *)v19 + 812) |= 0x40u;
  }
  *((_BYTE *)v19 + 65) = *((_BYTE *)v19 + 65) & 0xFE | v114;
  if (!v124)
    return;
  v129 = *(unsigned __int16 *)((char *)&v513 + 1);
  if ((BYTE1(v513) & 4) != 0)
  {
    v130 = CA::OGL::MetalBufferPool::alloc_fragment_arg(*((_QWORD *)v19 + 499), 0, 0x34u, 4u);
    v19 = v508;
    if (v130)
    {
      CA::OGL::MetalContext::FragmentShader::Spec::get_config((uint64_t)buf, (int *)v514);
      *v130 = *(_OWORD *)buf;
      v130[1] = *(_OWORD *)&buf[4];
      v130[2] = v522;
      *((_BYTE *)v130 + 48) = v523;
    }
  }
  v131 = (char *)v19 + 3408;
  v132 = BYTE6(v514[1]) & 0x7F;
  if ((CA::OGL::MetalContext::texture_function_info[8 * v132 - v132] & 0x3F) != 0)
  {
    v133 = 0;
    v134 = (char *)v19 + 3408;
    goto LABEL_247;
  }
  v101 = 0;
  v100 = 0;
  v105 = (const char *)&v518;
  v524 = 0u;
  v525 = 0u;
  v522 = 0u;
  v523 = 0u;
  memset(buf, 0, sizeof(buf));
  v135 = *((_QWORD *)v19 + 2);
  v136 = BYTE1(v515);
  v137 = *(unsigned int **)(v135 + 360);
  LOBYTE(v110) = 1;
  do
  {
    v138 = v110;
    v139 = &buf[12 * v101];
    if (v137)
    {
      if ((v136 & 4) != 0
        || (v102 = CA::OGL::tex_image_count[v132], v101 < v102)
        && (LOBYTE(v104) = 8 * v101,
            v103 = CA::OGL::MetalContext::image_function_info[*(_DWORD *)((_BYTE *)&v514[v101] - v101) & 0x3F],
            (v103 & 1) != 0))
      {
        v140 = *v137;
        if ((v140 - 1) >= 4)
          __assert_rtn("encode_uniform_image_arg", "ogl-metal.mm", 8599, "rs->op >= RenderState::distance_fill && rs->op <= RenderState::distance_outer_stroke");
        if (*((_BYTE *)v137 + 4))
          v141 = -1.0;
        else
          v141 = 1.0;
        *(float *)v139 = v141;
        v139[1] = v137[4];
        if ((_DWORD)v140 == 1)
        {
          v139[2] = v137[2];
          v139[3] = 0;
        }
        else
        {
          v518 = 0uLL;
          HIDWORD(v519) = (unsigned __int128)0 >> 96;
          v520 = 0x3F80000000000000;
          *(_QWORD *)&v519 = 0x3F000000BF000000;
          DWORD2(v519) = -1082130432;
          v143 = (const float *)(v137 + 2);
          v144 = vld1_dup_f32(v143);
          v145 = vmla_n_f32(v144, *(float32x2_t *)((char *)&v518 + 8 * v140), *((float *)v137 + 3));
          *((float32x2_t *)v139 + 1) = v145;
          if (v145.f32[1] < v145.f32[0])
          {
            v139[2] = v145.i32[1];
            v139[3] = v145.i32[0];
          }
        }
        goto LABEL_176;
      }
    }
    else
    {
      v102 = CA::OGL::tex_image_count[v132];
    }
    if (v101 >= v102)
      goto LABEL_177;
    v103 = 8 * v101;
    v102 = CA::OGL::MetalContext::image_function_info[*(_DWORD *)((_BYTE *)&v514[v101] - v101) & 0x3F];
    if ((v102 & 0x10) != 0)
    {
      *(_OWORD *)v139 = *(_OWORD *)(v135 + 48 * v101 + 416);
      if ((v102 & 0x20) == 0)
        goto LABEL_176;
      goto LABEL_175;
    }
    if ((v102 & 0x20) != 0)
    {
      *(_OWORD *)v139 = *(_OWORD *)(v135 + 48 * v101 + 416);
LABEL_175:
      v146 = v135 + 48 * v101;
      v147 = *(_OWORD *)(v146 + 400);
      *((_OWORD *)v139 + 1) = *(_OWORD *)(v146 + 384);
      *((_OWORD *)v139 + 2) = v147;
      goto LABEL_176;
    }
    if ((v102 & 0x40) == 0)
      goto LABEL_177;
    v142 = v135 + 48 * v101;
    *(_OWORD *)v139 = *(_OWORD *)(v142 + 384);
    *(_OWORD *)(v139 + 3) = *(_OWORD *)(v142 + 396);
LABEL_176:
    v100 = (const CA::OGL::MetalContext::FragmentShader::Spec *)buf;
LABEL_177:
    v110 = 0;
    v101 = 1;
  }
  while ((v138 & 1) != 0);
  v148 = ((unint64_t)v19 + 3423) & 0xFFFFFFFFFFFFFFF0;
  if (v100)
  {
    v149 = 0;
    v133 = 0;
    do
    {
      v150 = *(float *)((char *)v100 + v149);
      if (*(float *)(v148 + v149) != v150)
      {
        *(float *)(v148 + v149) = v150;
        v133 = 1;
      }
      v149 += 4;
    }
    while (v149 != 96);
  }
  else
  {
    v133 = 0;
  }
  if ((CA::OGL::MetalContext::blend_function_info[HIBYTE(v514[1]) & 0x3F] & 2) != 0)
  {
    v152 = 0;
    v153 = vcvtq_f32_f16(*(float16x4_t *)(v135 + 296));
    *(float32x4_t *)buf = vcvtq_f32_f16(*(float16x4_t *)(v135 + 288));
    *(float32x4_t *)&buf[4] = v153;
    v151 = (v148 + 103) & 0xFFFFFFFFFFFFFFF0;
    do
    {
      _S0 = buf[v152];
      __asm { FCVT            H0, S0 }
      _H1 = *(_WORD *)(v151 + 2 * v152);
      __asm
      {
        FCVT            S1, H1
        FCVT            S2, H0
      }
      if (_S1 != _S2)
      {
        *(_WORD *)(v151 + 2 * v152) = _H0;
        v133 = 1;
      }
      ++v152;
    }
    while (v152 != 8);
  }
  else
  {
    v151 = (v148 + 103) & 0xFFFFFFFFFFFFFFF0;
  }
  v161 = *(_WORD *)((char *)&v515 + 1);
  if ((*(_WORD *)((_BYTE *)&v515 + 1) & 0x200) != 0)
  {
    v175 = *(_BYTE *)(v135 + 305);
    v176 = 1.0;
    v177 = 1.0;
    if ((v175 & 1) != 0)
    {
      v177 = *(float *)(v135 + 312);
      if ((*(_BYTE *)(v135 + 306) & 1) == 0)
        v177 = powf(v177, 1.0 / *((float *)v508 + 38));
    }
    *(float *)buf = v177;
    if ((v175 & 2) != 0)
    {
      v176 = *(float *)(v135 + 316);
      if ((*(_BYTE *)(v135 + 306) & 2) == 0)
        v176 = powf(*(float *)(v135 + 316), 1.0 / *((float *)v508 + 38));
    }
    v178 = 0;
    v179 = 0;
    *(float *)&buf[1] = v176;
    v162 = (v151 + 17) & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v180 = v178;
      _S0 = buf[v179];
      __asm { FCVT            H0, S0 }
      _H1 = *(_WORD *)(v162 + 2 * v179);
      __asm
      {
        FCVT            S1, H1
        FCVT            S2, H0
      }
      if (_S1 != _S2)
      {
        *(_WORD *)(v162 + 2 * v179) = _H0;
        v133 = 1;
      }
      v178 = 1;
      v179 = 1;
    }
    while ((v180 & 1) == 0);
    v161 = *(_WORD *)((char *)&v515 + 1);
    v19 = v508;
    if ((*(_WORD *)((_BYTE *)&v515 + 1) & 0x400) == 0)
      goto LABEL_210;
LABEL_193:
    v163 = fmaxf(*((float *)v19 + 722), 0.000001);
    v164 = 1.0 / *((float *)v19 + 38);
    buf[0] = powf(v163, v164);
    v165 = powf(1.0 / v163, v164);
    v166 = 0;
    v167 = 0;
    *(float *)&buf[1] = v165;
    v168 = v162 | 4;
    do
    {
      v169 = v166;
      _S0 = buf[v167];
      __asm { FCVT            H0, S0 }
      _H1 = *(_WORD *)(v168 + 2 * v167);
      __asm
      {
        FCVT            S1, H1
        FCVT            S2, H0
      }
      if (_S1 != _S2)
      {
        *(_WORD *)(v168 + 2 * v167) = _H0;
        v133 = 1;
      }
      v166 = 1;
      v167 = 1;
    }
    while ((v169 & 1) == 0);
    v161 = *(_WORD *)((char *)&v515 + 1);
    if ((*(_WORD *)((_BYTE *)&v515 + 1) & 0x100) != 0)
    {
LABEL_211:
      v186 = *(unsigned __int8 *)(v135 + 307);
      if (*(unsigned __int8 *)(v168 + 4) != v186)
      {
        *(_BYTE *)(v168 + 4) = v186;
        v161 = *(_WORD *)((char *)&v515 + 1);
        v133 = 1;
      }
    }
  }
  else
  {
    v162 = (v151 + 17) & 0xFFFFFFFFFFFFFFF0;
    if ((*(_WORD *)((_BYTE *)&v515 + 1) & 0x400) != 0)
      goto LABEL_193;
LABEL_210:
    v168 = v162 | 4;
    if ((v161 & 0x100) != 0)
      goto LABEL_211;
  }
  if ((v161 & 0x200) != 0)
  {
    v187 = *(unsigned __int8 *)(*((_QWORD *)v19 + 2) + 306);
    if (*(unsigned __int8 *)(v168 + 5) != v187)
    {
      *(_BYTE *)(v168 + 5) = v187;
      v133 = 1;
    }
  }
  *(_QWORD *)buf = 0x3F80000000000000;
  v188 = BYTE6(v514[1]) & 0x7F;
  if ((*(_WORD *)&CA::OGL::MetalContext::texture_function_info[8 * v188 - v188 + 5] & 4) == 0
    && (CA::OGL::MetalContext::blend_function_info[HIBYTE(v514[1]) & 0x3F] & 2) == 0)
  {
    v189 = (v168 + 9) & 0xFFFFFFFFFFFFFFFCLL;
    goto LABEL_228;
  }
  v190 = *(_QWORD *)(*((_QWORD *)v19 + 31) + 120);
  if (v190 == 125 || v190 == 115)
  {
    v191 = (float32x2_t)0x7F800000FF800000;
    goto LABEL_222;
  }
  if ((unint64_t)(v190 - 550) > 5)
  {
    v359 = (float32x2_t)0x3F80000000000000;
  }
  else
  {
    v359 = (float32x2_t)0x3FA00000BF400000;
    *(_QWORD *)buf = 0x3FA00000BF400000;
  }
  if ((*(_WORD *)((_BYTE *)&v515 + 1) & 0x400) != 0)
  {
    v191 = vmul_n_f32(v359, powf(1.0 / fmaxf(*((float *)v19 + 722), 0.000001), 1.0 / *((float *)v19 + 38)));
LABEL_222:
    *(float32x2_t *)buf = v191;
  }
  v192 = 0;
  v193 = 0;
  v189 = (v168 + 9) & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v194 = v192;
    _S0 = buf[v193];
    __asm { FCVT            H0, S0 }
    _H1 = *(_WORD *)(v189 + 2 * v193);
    __asm
    {
      FCVT            S1, H1
      FCVT            S2, H0
    }
    if (_S1 != _S2)
    {
      *(_WORD *)(v189 + 2 * v193) = _H0;
      v133 = 1;
    }
    v192 = 1;
    v193 = 1;
  }
  while ((v194 & 1) == 0);
  v188 = BYTE6(v514[1]) & 0x7F;
LABEL_228:
  v200 = CA::OGL::tex_image_count[v188];
  if (v200)
  {
    if ((CA::OGL::MetalContext::texture_filter_info[((unint64_t)LODWORD(v514[0]) >> 9) & 0xF] & 1) == 0)
    {
      v201 = 0;
      v202 = (unsigned int *)((char *)v514 + 7);
      while (v200 - 1 != v201)
      {
        v203 = *v202;
        v202 = (unsigned int *)((char *)v202 + 7);
        ++v201;
        if ((CA::OGL::MetalContext::texture_filter_info[((unint64_t)v203 >> 9) & 0xF] & 1) != 0)
        {
          if (v201 >= v200)
            goto LABEL_239;
          goto LABEL_234;
        }
      }
      goto LABEL_239;
    }
LABEL_234:
    v204 = 0;
    v205 = *((_QWORD *)v19 + 2) + 320;
    v206 = (v189 + 19) & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v207 = *(float *)(v205 + v204);
      if (*(float *)(v206 + v204) != v207)
      {
        *(float *)(v206 + v204) = v207;
        v133 = 1;
      }
      v204 += 4;
    }
    while (v204 != 32);
  }
  else
  {
LABEL_239:
    v206 = (v189 + 19) & 0xFFFFFFFFFFFFFFF0;
  }
  if ((CA::OGL::MetalContext::coord_function_info[((unint64_t)LODWORD(v514[0]) >> 6) & 7] & 1) != 0)
  {
    v209 = 0;
    v210 = *((_QWORD *)v19 + 2) + 368;
    v208 = (v206 + 47) & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v211 = *(float *)(v210 + v209);
      if (*(float *)(v208 + v209) != v211)
      {
        *(float *)(v208 + v209) = v211;
        v133 = 1;
      }
      v209 += 4;
    }
    while (v209 != 16);
  }
  else
  {
    v208 = (v206 + 47) & 0xFFFFFFFFFFFFFFF0;
  }
  v134 = (char *)(v208 + 16);
  v132 = BYTE6(v514[1]) & 0x7F;
LABEL_247:
  v212 = CA::OGL::MetalContext::blend_function_info[HIBYTE(v514[1]) & 0x3F];
  v213 = *(_WORD *)&CA::OGL::MetalContext::texture_function_info[8 * v132 - v132 + 5];
  if ((v212 & 4) != 0)
  {
    if ((v213 & 1) != 0 || (CA::OGL::MetalContext::texture_function_info[8 * v132 - v132 + 1] & 0x78) != 0)
      __assert_rtn("encode_uniform_function_args", "ogl-metal.mm", 8858, "!tex_info.arg && tex_info.layout.fields[0].count == 0");
    v132 = 20;
  }
  else if ((v213 & 1) != 0)
  {
    v214 = 0;
    v215 = *((_QWORD *)v19 + 2) + 24;
    v216 = (unint64_t)(v134 + 7) & 0xFFFFFFFFFFFFFFF8;
    do
    {
      _S0 = *(_DWORD *)(v215 + 4 * v214);
      __asm { FCVT            H0, S0 }
      _H1 = *(_WORD *)(v216 + 2 * v214);
      __asm
      {
        FCVT            S1, H1
        FCVT            S2, H0
      }
      if (_S1 != _S2)
      {
        *(_WORD *)(v216 + 2 * v214) = _H0;
        v133 = 1;
      }
      ++v214;
    }
    while (v214 != 4);
    v134 = (char *)(v216 + 8);
    goto LABEL_282;
  }
  v222 = 0;
  v223 = &CA::OGL::MetalContext::texture_function_info[8 * v132 - v132 + 1];
  do
  {
    v224 = v223[v222];
    if ((v224 & 0x78) == 0)
      break;
    v225 = (v212 & 4) != 0 ? *(float **)(*((_QWORD *)v19 + 2) + 280) : (float *)((char *)v19 + 80 * v222 + 2208);
    v226 = v224 & 7;
    v227 = ((v224 >> 3) & 0xF) * (v224 & 7);
    if ((v224 & 0x80) != 0)
    {
      v235 = 2 * v226 - 1;
      v236 = &v134[v235];
      v237 = (unint64_t)v236 / (2 * v226) * 2 * v226;
      v231 = (unint64_t)v236 & (-2 * v226);
      if ((v235 & (2 * v226)) != 0)
        v231 = v237;
      if ((_DWORD)v227 && v225)
      {
        v238 = (__int16 *)v231;
        v239 = ((v224 >> 3) & 0xF) * (v224 & 7);
        do
        {
          _S0 = *v225;
          __asm { FCVT            H0, S0 }
          _H1 = *v238;
          __asm
          {
            FCVT            S1, H1
            FCVT            S2, H0
          }
          if (_S1 != _S2)
          {
            *v238 = _H0;
            v133 = 1;
          }
          ++v238;
          ++v225;
          --v239;
        }
        while (v239);
      }
      v234 = 1;
    }
    else
    {
      v228 = 4 * v226 - 1;
      v229 = &v134[v228];
      v230 = (unint64_t)v229 / (4 * v226) * 4 * v226;
      v231 = (unint64_t)v229 & (-4 * v226);
      if ((v228 & (4 * v226)) != 0)
        v231 = v230;
      if ((_DWORD)v227 && v225)
      {
        v232 = (float *)v231;
        v233 = ((v224 >> 3) & 0xF) * (v224 & 7);
        do
        {
          if (*v232 != *v225)
          {
            *v232 = *v225;
            v133 = 1;
          }
          ++v232;
          ++v225;
          --v233;
        }
        while (v233);
      }
      v234 = 2;
    }
    v134 = (char *)(v231 + (v227 << v234));
    ++v222;
  }
  while (v222 != 4);
LABEL_282:
  if ((unint64_t)(v134 - v131) >= 0xE1)
    __assert_rtn("encode_fragment_uniforms", "ogl-metal.mm", 8566, "uintptr_t (dst) - uintptr_t (_encoded.frag_uniform) <= uniform_size");
  if (v133 || (*((_BYTE *)v19 + 3360) & 2) == 0)
  {
    v245 = CA::OGL::MetalBufferPool::encode_fragment_arg(*((CA::OGL::MetalBufferPool **)v19 + 499), 1, v131, 0xE0u, 0x10u);
    v19 = v508;
    if (v245)
    {
      *((_BYTE *)v508 + 3360) |= 2u;
      goto LABEL_287;
    }
    return;
  }
LABEL_287:
  if ((v129 & 4) != 0)
  {
LABEL_294:
    if (*((unsigned __int16 *)v19 + 1848) != *(unsigned __int16 *)(*((_QWORD *)v19 + 2) + 60))
    {
      v250 = CA::OGL::MetalBufferPool::alloc_fragment_arg(*((_QWORD *)v19 + 499), 3, 0x30u, 8u);
      v19 = v508;
      if (!v250)
        return;
      v251 = 0;
      v252 = *((_QWORD *)v508 + 2);
      v253 = 1;
      do
      {
        v254 = 0;
        v255 = v253;
        v256 = v252 + v251;
        v257 = *(unsigned __int8 *)(v252 + v251 + 60);
        LODWORD(v256) = *(unsigned __int8 *)(v256 + 62);
        v258 = v257 - 1;
        _ZF = (_DWORD)v256 == 0;
        v259 = v256 - 1;
        v260 = _ZF || v257 == 0;
        v261 = (char *)&CA::OGL::ycbcr_matrices + 48 * v257;
        v262 = (char *)&CA::OGL::ycbcr_matrix_book + 96 * v258 + 48 * v259;
        if (v260)
          v262 = v261;
        v263 = ((unint64_t)v250 + 7) & 0xFFFFFFFFFFFFFFF8;
        do
        {
          _S0 = *(_DWORD *)&v262[4 * v254];
          __asm { FCVT            H0, S0 }
          _H1 = *(_WORD *)(v263 + 2 * v254);
          __asm
          {
            FCVT            S1, H1
            FCVT            S2, H0
          }
          if (_S1 != _S2)
            *(_WORD *)(v263 + 2 * v254) = _H0;
          ++v254;
        }
        while (v254 != 12);
        v253 = 0;
        v250 = (void *)(v263 + 24);
        v251 = 1;
      }
      while ((v255 & 1) != 0);
    }
    goto LABEL_307;
  }
  v246 = CA::OGL::tex_image_count[BYTE14(v512) & 0x7F];
  if (CA::OGL::tex_image_count[BYTE14(v512) & 0x7F])
  {
    if ((CA::OGL::MetalContext::image_function_info[v512 & 0x3F] & 2) != 0)
      goto LABEL_294;
    v247 = 0;
    v248 = (int *)((char *)&v512 + 7);
    do
    {
      if (v246 - 1 == v247)
        goto LABEL_307;
      v249 = *v248;
      v248 = (int *)((char *)v248 + 7);
      ++v247;
    }
    while ((CA::OGL::MetalContext::image_function_info[v249 & 0x3F] & 2) == 0);
    if (v247 < v246)
      goto LABEL_294;
LABEL_307:
    if ((v129 & 4) != 0)
    {
LABEL_310:
      v270 = CA::OGL::tex_image_count[BYTE6(v514[1]) & 0x7F];
      if (*((_DWORD *)v19 + 936) == -1)
      {
        v273 = (_DWORD)v270 == 0;
      }
      else
      {
        v271 = (*((unsigned __int8 *)v19 + 3360) >> 4) & 1;
        v272 = (v129 >> 11) & 1;
        v273 = (_DWORD)v270 == 0;
        LOBYTE(v274) = v272 != v271;
        if (v272 == v271 && (_DWORD)v270 != 0)
        {
          v276 = 0;
          do
          {
            v274 = *(_QWORD *)(*((_QWORD *)v19 + 2) + 40 + 8 * v276);
            if (v274)
              LOBYTE(v274) = *(_DWORD *)(v274 + 8) != *((_DWORD *)v19 + v276 + 936);
            if ((v274 & 1) != 0)
              break;
            ++v276;
          }
          while (v276 < v270);
        }
        if ((v274 & 1) == 0)
          goto LABEL_353;
      }
      if ((v129 & 0x800) != 0)
        v277 = 1344;
      else
        v277 = 672;
      if ((v129 & 0x800) != 0)
        v278 = 16;
      else
        v278 = 8;
      v279 = CA::OGL::MetalBufferPool::alloc_fragment_arg(*((_QWORD *)v19 + 499), 4, v277, v278);
      v19 = v508;
      if (!v279)
        return;
      if (!v273)
      {
        v280 = 0;
        v281 = *((_QWORD *)v508 + 2);
        v282 = 3;
        if ((v129 & 0x800) != 0)
          v282 = 4;
        do
        {
          v283 = (char *)v508 + 4 * v280;
          *((_DWORD *)v283 + 936) = 0;
          v284 = *(_QWORD *)(v281 + 8 * v280 + 40);
          if (v284)
          {
            v285 = 0;
            v286 = v283 + 3744;
            v100 = *(const CA::OGL::MetalContext::FragmentShader::Spec **)(v284 + 48);
            v110 = *(unsigned int *)(v284 + 36);
            do
            {
              v287 = (v110 >> (5 * v285)) & 0x1FLL;
              v102 = (unint64_t)v279 + ((42 * v280) << v282) + ((7 * v285) << v282);
              v101 = 4 * CA::ColorProgram::kOpcodeParamCount[v287];
              LODWORD(v104) = v100 != 0;
              v103 = v104 & (0x1FE7FEuLL >> v287);
              if ((v129 & 0x800) != 0)
              {
                if ((_DWORD)v103)
                {
                  v102 = (v102 + 15) & 0xFFFFFFFFFFFFFFF0;
                  v103 = v101;
                  v104 = v100;
                  do
                  {
                    if (*(float *)v102 != *(float *)v104)
                      *(_DWORD *)v102 = *v104;
                    v102 += 4;
                    ++v104;
                    --v103;
                  }
                  while (v103);
                }
              }
              else if ((_DWORD)v103)
              {
                v102 = (v102 + 7) & 0xFFFFFFFFFFFFFFF8;
                v103 = (unint64_t)v100;
                v104 = (_DWORD *)v101;
                do
                {
                  _S0 = *(_DWORD *)v103;
                  __asm { FCVT            H0, S0 }
                  _H1 = *(_WORD *)v102;
                  __asm
                  {
                    FCVT            S1, H1
                    FCVT            S2, H0
                  }
                  if (_S1 != _S2)
                    *(_WORD *)v102 = _H0;
                  v102 += 2;
                  v103 += 4;
                  v104 = (_DWORD *)((char *)v104 - 1);
                }
                while (v104);
              }
              v100 = (const CA::OGL::MetalContext::FragmentShader::Spec *)((char *)v100 + 4 * v101);
              ++v285;
            }
            while (v285 != 6);
            *v286 = *(_DWORD *)(v284 + 8);
          }
          ++v280;
        }
        while (v280 != v270);
      }
      if (v270 <= 1)
      {
        do
        {
          v293 = v270;
          *((_DWORD *)v508 + v270 + 936) = 0;
          v270 = 1;
        }
        while (!v293);
      }
      *((_BYTE *)v508 + 3360) = (v129 >> 7) & 0x10 | *((_BYTE *)v508 + 3360) & 0xEF;
LABEL_353:
      if ((v129 & 4) == 0)
        goto LABEL_354;
      v499 = 2;
      goto LABEL_363;
    }
  }
  v269 = CA::OGL::tex_image_count[BYTE14(v512) & 0x7F];
  if (CA::OGL::tex_image_count[BYTE14(v512) & 0x7F])
  {
    if (((v512 | ((unint64_t)(WORD2(v512) | (BYTE6(v512) << 16)) << 32)) & 0x1FFFFFFF80000) == 0)
    {
      v355 = 0;
      v356 = (char *)&v512 + 7;
      do
      {
        if (v269 - 1 == v355)
          goto LABEL_353;
        v357 = *((unsigned __int16 *)v356 + 2) | (v356[6] << 16);
        v358 = *(_DWORD *)v356;
        v356 += 7;
        ++v355;
      }
      while (((v358 | (unint64_t)(v357 << 32)) & 0x1FFFFFFF80000) == 0);
      if (v355 >= v269)
        goto LABEL_353;
    }
    goto LABEL_310;
  }
LABEL_354:
  v499 = CA::OGL::tex_image_count[BYTE14(v512) & 0x7F];
  if (CA::OGL::tex_image_count[BYTE14(v512) & 0x7F])
  {
LABEL_363:
    v297 = 0;
    v298 = &selRef_preferredModeForUUID_;
    v299 = 3;
    v300 = &selRef_preferredModeForUUID_;
    while (1)
    {
      v301 = 0;
      v302 = (unsigned int *)((char *)&v512 + 8 * v297 - v297);
      v503 = (unsigned int *)((char *)v514 + 7 * v297);
      v507 = (uint64_t *)((char *)v19 + 8 * v297 + 3880);
      v501 = v298[41];
      v502 = v300[42];
      v500 = v299;
      do
      {
        if ((BYTE1(v513) & 4) == 0
          && (v297 >= CA::OGL::tex_image_count[BYTE14(v512) & 0x7F]
           || v301 >= CA::OGL::image_plane_count[*v302 & 0x3FLL]
           || (*v302 & 0x8000) == 0))
        {
          goto LABEL_432;
        }
        v303 = *((_QWORD *)v19 + 2);
        v304 = *(_QWORD *)(v303
                         + 8 * (v301 + CA::OGL::state_image_texture_unit(v303, v297))
                         + 176);
        if ((BYTE1(v515) & 4) == 0
          && (CA::OGL::tex_image_count[BYTE6(v514[1]) & 0x7F] <= v297
           || v301 >= CA::OGL::image_plane_count[*v503 & 0x3FLL]
           || (*v503 & 0x8000) == 0))
        {
          v305 = CA::OGL::MetalContext::encode_placeholder_texture((uint64_t)v19, v299);
          v19 = v508;
          v300 = &selRef_preferredModeForUUID_;
          if (!v305)
            return;
          if (!v301)
          {
            v110 = *((_QWORD *)v508 + 360);
            if (!v110)
            {
              v110 = objc_msgSend(*((id *)v508 + 363), "newSamplerStateWithDescriptor:", (id)objc_opt_new());
              v19 = v508;
              *((_QWORD *)v508 + 360) = v110;
              v300 = &selRef_preferredModeForUUID_;
              if (!v110)
                return;
            }
            if (*v507 != v110)
            {
              *v507 = v110;
              (*((void (**)(_QWORD, char *))v19 + 372))(*((_QWORD *)v19 + 367), v502);
LABEL_431:
              v19 = v508;
              v300 = &selRef_preferredModeForUUID_;
              goto LABEL_432;
            }
          }
          goto LABEL_432;
        }
        v306 = v304 & 0xFFFFFFFFFFFFFFFCLL;
        v300 = &selRef_preferredModeForUUID_;
        if ((v304 & 0xFFFFFFFFFFFFFFFCLL) == 0)
          return;
        v307 = v306 + 8 * (v304 & 3);
        v309 = *(_QWORD *)(v307 + 64);
        v308 = (uint64_t *)(v307 + 64);
        if (!v309)
          return;
        v310 = *(unsigned __int16 *)(v306 + 123);
        if ((v310 & 8) == 0)
        {
          v311 = 0;
          goto LABEL_420;
        }
        v312 = (_QWORD *)*((_QWORD *)v19 + 336);
        if (!v312)
        {
          v312 = malloc_type_calloc(8uLL, 0x100uLL, 0xF625CA05uLL);
          v19 = v508;
          *((_QWORD *)v508 + 336) = v312;
          v310 = *(unsigned __int8 *)(v306 + 123);
          v300 = &selRef_preferredModeForUUID_;
        }
        v313 = (8 * v310) & 0x80 | ((v310 & 1) << 6) | (*(_DWORD *)(v306 + 52) >> 18) & 0xC | HIWORD(*(_DWORD *)(v306 + 52)) & 3 | (16 * ((*(unsigned __int8 *)(v306 + 58) >> 3) & 3u));
        v311 = v312[v313];
        if (!v311)
        {
          v314 = (void *)objc_opt_new();
          v315 = v314;
          if ((*((_BYTE *)v508 + 2677) & 4) != 0)
          {
            v317 = *(_WORD *)(v306 + 123);
            v316 = (v317 & 0x10) == 0 && (v317 & 1) == 0;
          }
          else
          {
            v316 = 0;
          }
          v318 = *(_WORD *)(v306 + 54) & 0xF;
          if ((*(_WORD *)(v306 + 54) & 0xF) == 0 || v318 == 8)
          {
            v320 = 0;
          }
          else if (v318 == 3 && v316)
          {
            v320 = 2;
          }
          else
          {
            v320 = 1;
          }
          objc_msgSend(v314, "setMinFilter:", v320);
          v321 = (*(_DWORD *)(v306 + 52) >> 20) & 0xF;
          if (v321)
            v322 = v321 == 8;
          else
            v322 = 1;
          if (v322)
          {
            v323 = 0;
          }
          else if (v321 == 3 && v316)
          {
            v323 = 2;
          }
          else
          {
            v323 = 1;
          }
          objc_msgSend(v315, "setMagFilter:", v323);
          v324 = (*(unsigned __int8 *)(v306 + 58) >> 3) & 3;
          if (v324 == 3)
          {
            x_log_crash("Invalid TextureEdgeMode 0x%x", 3);
            abort();
          }
          v325 = (2 * v324);
          objc_msgSend(v315, "setTAddressMode:", v325);
          objc_msgSend(v315, "setSAddressMode:", v325);
          v326 = *(_WORD *)(v306 + 123);
          if ((v326 & 1) != 0)
          {
            v327 = *(_WORD *)(v306 + 54) & 0xF;
            if ((_DWORD)v327 == 2)
              goto LABEL_416;
            if ((_DWORD)v327 == 7)
            {
              v327 = 1;
LABEL_416:
              objc_msgSend(v315, "setMipFilter:", v327);
              v326 = *(_WORD *)(v306 + 123);
            }
          }
          if ((v326 & 0x10) != 0)
            objc_msgSend(v315, "setMaxAnisotropy:", 8);
          v311 = objc_msgSend(*((id *)v508 + 363), "newSamplerStateWithDescriptor:", v315);

          v19 = v508;
          *(_QWORD *)(*((_QWORD *)v508 + 336) + 8 * v313) = v311;
          v300 = &selRef_preferredModeForUUID_;
        }
LABEL_420:
        v328 = atomic_load((unint64_t *)v19 + 497);
        *(_QWORD *)(v306 + 112) = v328;
        if ((*(_WORD *)(v306 + 123) & 0x20) != 0)
        {
          if (v301)
            __assert_rtn("encode_image_plane", "ogl-metal.mm", 9023, "plane == 0");
          v110 = *v308;
          v330 = (char *)v19 + 8 * v299;
          if (*((_QWORD *)v330 + 470) != *v308 || *v507 != v311)
          {
            *((_QWORD *)v330 + 470) = v110;
            *v507 = v311;
            objc_msgSend(*((id *)v19 + 367), "setFragmentTexture:atTextureIndex:samplerState:atSamplerIndex:");
            goto LABEL_431;
          }
        }
        else
        {
          v110 = *v308;
          v329 = (char *)v19 + 8 * v299;
          if (*((_QWORD *)v329 + 470) != *v308)
          {
            *((_QWORD *)v329 + 470) = v110;
            (*((void (**)(_QWORD, char *))v19 + 371))(*((_QWORD *)v19 + 367), v501);
            v19 = v508;
            v300 = &selRef_preferredModeForUUID_;
          }
          if (!v301 && v311 && *v507 != v311)
          {
            *v507 = v311;
            (*((void (**)(_QWORD, char *, uint64_t, _QWORD))v19 + 372))(*((_QWORD *)v19 + 367), v502, v311, v297);
            goto LABEL_431;
          }
        }
LABEL_432:
        ++v301;
        v299 += 2;
      }
      while (v301 != 3);
      if ((BYTE1(v513) & 4) != 0
        || (v331 = *v302 | ((unint64_t)(*((unsigned __int16 *)v302 + 2) | (*((unsigned __int8 *)v302 + 6) << 16)) << 32),
            v332 = (int8x16_t)vdupq_n_s64(v331),
            (vmaxv_u16((uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64((int64x2_t)vandq_s8(v332, (int8x16_t)xmmword_18474E4F0), (int64x2_t)xmmword_18474E510), (int32x4_t)vceqq_s64((int64x2_t)vandq_s8(v332, (int8x16_t)xmmword_18474E500), (int64x2_t)xmmword_18474E520)))) & 1) != 0)|| ((v333 = v331 & 0xF8000000000, v334 = v331 & 0x1F00000000000, v333 != 0x38000000000)? (v335 = v334 == 0x700000000000): (v335 = 1), v335))
      {
        v101 = (v297 + 10);
        if ((BYTE1(v515) & 4) != 0
          || (v336 = *v503 | ((unint64_t)(*((unsigned __int16 *)v503 + 2) | (*((unsigned __int8 *)v503 + 6) << 16)) << 32),
              v337 = (int8x16_t)vdupq_n_s64(v336),
              (vmaxv_u16((uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64((int64x2_t)vandq_s8(v337, (int8x16_t)xmmword_18474E4F0), (int64x2_t)xmmword_18474E510), (int32x4_t)vceqq_s64((int64x2_t)vandq_s8(v337, (int8x16_t)xmmword_18474E500), (int64x2_t)xmmword_18474E520)))) & 1) != 0)|| ((v338 = v336 & 0xF8000000000, v339 = v336 & 0x1F00000000000, v338 != 0x38000000000)? (v340 = v339 == 0x700000000000): (v340 = 1), v340))
        {
          v342 = *(_QWORD *)(*((_QWORD *)v19 + 2)
                           + 8 * *(unsigned __int8 *)(*((_QWORD *)v19 + 2) + v297 + 56)
                           + 176) & 0xFFFFFFFFFFFFFFFCLL;
          v343 = atomic_load((unint64_t *)v19 + 497);
          *(_QWORD *)(v342 + 112) = v343;
          v110 = *(_QWORD *)(v342 + 64);
          v344 = (char *)v19 + 8 * v101;
          if (*((_QWORD *)v344 + 470) != v110)
          {
            *((_QWORD *)v344 + 470) = v110;
            (*((void (**)(_QWORD, char *))v19 + 371))(*((_QWORD *)v19 + 367), sel_setFragmentTexture_atIndex_);
            v19 = v508;
            v300 = &selRef_preferredModeForUUID_;
          }
        }
        else
        {
          v341 = CA::OGL::MetalContext::encode_placeholder_texture((uint64_t)v19, (int)v297 + 10);
          v19 = v508;
          v300 = &selRef_preferredModeForUUID_;
          if (!v341)
            return;
        }
        if ((BYTE1(v513) & 4) == 0)
          goto LABEL_452;
        goto LABEL_458;
      }
      if ((BYTE1(v513) & 4) != 0)
        goto LABEL_458;
LABEL_452:
      v345 = *v302;
      if (((v345 >> 19) & 0x1F) - 8 < 3
        || (BYTE3(v345) & 0x1F) - 8 < 3u
        || (v346 = v345 | ((unint64_t)(*((unsigned __int16 *)v302 + 2) | (*((unsigned __int8 *)v302 + 6) << 16)) << 32),
            ((v346 >> 29) & 0x1F) - 8 < 3)
        || ((v346 >> 34) & 0x1F) - 8 < 3
        || ((v346 >> 39) & 0x1F) - 8 < 3
        || ((v346 >> 44) & 0x1F) - 8 < 3
        || (v352 = (int8x16_t)vdupq_n_s64(v346),
            (vmaxv_u16((uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64((int64x2_t)vandq_s8(v352, (int8x16_t)xmmword_18474E4F0), (int64x2_t)xmmword_18474E530), (int32x4_t)vceqq_s64((int64x2_t)vandq_s8(v352, (int8x16_t)xmmword_18474E500), (int64x2_t)xmmword_18474E540)))) & 1) != 0)|| (v346 & 0xF8000000000) == 0x98000000000|| (v346 & 0x1F00000000000) == 0x1300000000000)
      {
LABEL_458:
        v101 = (v297 + 12);
        if ((BYTE1(v515) & 4) != 0
          || (v347 = *v503, ((v347 >> 19) & 0x1F) - 8 < 3)
          || (BYTE3(v347) & 0x1F) - 8 < 3u
          || (v348 = v347 | ((unint64_t)(*((unsigned __int16 *)v503 + 2) | (*((unsigned __int8 *)v503 + 6) << 16)) << 32),
              ((v348 >> 29) & 0x1F) - 8 < 3)
          || ((v348 >> 34) & 0x1F) - 8 < 3
          || ((v348 >> 39) & 0x1F) - 8 < 3
          || ((v348 >> 44) & 0x1F) - 8 < 3
          || (v353 = (int8x16_t)vdupq_n_s64(v348),
              (vmaxv_u16((uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64((int64x2_t)vandq_s8(v353, (int8x16_t)xmmword_18474E4F0), (int64x2_t)xmmword_18474E530), (int32x4_t)vceqq_s64((int64x2_t)vandq_s8(v353, (int8x16_t)xmmword_18474E500), (int64x2_t)xmmword_18474E540)))) & 1) != 0)|| (v348 & 0xF8000000000) == 0x98000000000|| (v348 & 0x1F00000000000) == 0x1300000000000)
        {
          v349 = *(_QWORD *)(*((_QWORD *)v19 + 2)
                           + 8 * *(unsigned __int8 *)(*((_QWORD *)v19 + 2) + v297 + 58)
                           + 176) & 0xFFFFFFFFFFFFFFFCLL;
          v350 = atomic_load((unint64_t *)v19 + 497);
          *(_QWORD *)(v349 + 112) = v350;
          v110 = *(_QWORD *)(v349 + 64);
          v351 = (char *)v19 + 8 * v101;
          if (*((_QWORD *)v351 + 470) != v110)
          {
            *((_QWORD *)v351 + 470) = v110;
            (*((void (**)(_QWORD, char *))v19 + 371))(*((_QWORD *)v19 + 367), sel_setFragmentTexture_atIndex_);
            v19 = v508;
            v300 = &selRef_preferredModeForUUID_;
          }
        }
        else
        {
          v354 = CA::OGL::MetalContext::encode_placeholder_cube((uint64_t)v19, (int)v297 + 12);
          v19 = v508;
          v300 = &selRef_preferredModeForUUID_;
          if (!v354)
            return;
        }
      }
      ++v297;
      v299 = v500 + 1;
      v298 = &selRef_preferredModeForUUID_;
      if (v297 == v499)
      {
        if ((BYTE1(v513) & 4) != 0)
          goto LABEL_489;
        goto LABEL_356;
      }
    }
  }
  if ((v129 & 4) != 0)
    goto LABEL_489;
LABEL_356:
  v294 = BYTE14(v512) & 0x7F;
  if ((*(_WORD *)&CA::OGL::MetalContext::texture_function_info[8 * v294 - v294 + 5] & 0x20) == 0)
  {
    v295 = CA::OGL::tex_image_count[v294];
    if (v295)
    {
      v296 = &v512;
      while (((0x42000FFE00uLL >> *(_DWORD *)v296) & 1) != 0)
      {
        v296 = (__int128 *)((char *)v296 + 7);
        if (!--v295)
          goto LABEL_502;
      }
LABEL_489:
      v360 = CA::OGL::tex_image_count[BYTE6(v514[1]) & 0x7F];
      v361 = (char *)v19 + 3752;
      v362 = 0;
      if (CA::OGL::tex_image_count[BYTE6(v514[1]) & 0x7F])
      {
        v363 = 0;
        v364 = *((_QWORD *)v19 + 2);
        do
        {
          v365 = *(_QWORD *)(v364 + 8 * CA::OGL::state_image_texture_unit(v364, v363) + 176) & 0xFFFFFFFFFFFFFFFCLL;
          if (v365)
          {
            v366 = *(float *)(v365 + 48);
            if (*(float *)&v361[4 * v363] != v366)
            {
              *(float *)&v361[4 * v363] = v366;
              v362 = 1;
            }
          }
          ++v363;
        }
        while (v360 != v363);
      }
      if ((v362 & 1) != 0)
      {
        if ((BYTE1(v515) & 4) != 0)
          v367 = 8;
        else
          v367 = 4 * v360;
        v368 = CA::OGL::MetalBufferPool::encode_fragment_arg(*((CA::OGL::MetalBufferPool **)v19 + 499), 2, (char *)v19 + 3752, v367, 4u);
        v19 = v508;
        if (!v368)
          return;
        if (v360 <= 1)
          *((_DWORD *)v508 + v360 + 938) = 2143289344;
      }
    }
  }
LABEL_502:
  v369 = *(_WORD *)((char *)&v513 + 1);
  if ((BYTE1(v513) & 0xC) == 0
    || CA::OGL::MetalContext::encode_noise_texture(v19, (uint64_t)v100, v110, v101, v102, (const unsigned __int8 *)v103, (BOOL)v104, v105)&& (v19 = v508, CA::OGL::MetalContext::encode_noise_scale(v508, v370)))
  {
    v371 = BYTE14(v512) & 0x7F;
    v372 = *(_WORD *)&CA::OGL::MetalContext::texture_function_info[8 * v371 - v371 + 5];
    if ((v372 & 0x40) == 0 || (v373 = CA::OGL::MetalContext::encode_edr_resolve(v19, v100), v19 = v508, v373))
    {
      if (!(v369 & 0x204 | v372 & 0x80))
      {
        v375 = CA::OGL::tex_image_count[v371];
        if (!CA::OGL::tex_image_count[v371])
          goto LABEL_548;
        v376 = (v512 >> 19) & 0x1F;
        if (v376 != 11)
        {
          v377 = BYTE3(v512) & 0x1F;
          if (v377 != 11)
          {
            v378 = v512 | ((unint64_t)(WORD2(v512) | (BYTE6(v512) << 16)) << 32);
            v379 = (v378 >> 29) & 0x7FFFFFF;
            v380 = (v378 >> 34) & 0x3FFFFF;
            v381 = (v378 >> 39) & 0x1FFFF;
            v382 = (v378 >> 44) & 0xFFF;
            v383 = (unsigned int *)((char *)&v512 + 7);
            v384 = 1;
            v385 = 1;
            do
            {
              v386 = v379 & 0x1F;
              v387 = v380 & 0x1F;
              v388 = v386 == 11 || v387 == 11;
              v389 = v381 & 0x1F;
              v390 = v388 || v389 == 11;
              v391 = v382 & 0x1F;
              if (v390
                || v391 == 12
                || v389 == 12
                || v387 == 12
                || v386 == 12
                || v377 == 12
                || v391 == 11
                || v376 == 12)
              {
                break;
              }
              v385 = v384 < v375;
              if (v375 == v384)
                break;
              v399 = *v383;
              v376 = (v399 >> 19) & 0x1F;
              if (v376 == 11)
                break;
              v400 = v399 | ((unint64_t)(*((unsigned __int16 *)v383 + 2) | (*((unsigned __int8 *)v383 + 6) << 16)) << 32);
              v382 = (v400 >> 44) & 0xFFF;
              v381 = (v400 >> 39) & 0x1FFFF;
              v380 = (v400 >> 34) & 0x3FFFFF;
              v379 = (v400 >> 29) & 0x7FFFFFF;
              v377 = BYTE3(v399) & 0x1F;
              v383 = (unsigned int *)((char *)v383 + 7);
              ++v384;
            }
            while (v377 != 11);
            if (!v385)
              goto LABEL_548;
          }
        }
      }
      v374 = CA::OGL::MetalContext::encode_gamma_luts(v19);
      v19 = v508;
      if (v374)
      {
LABEL_548:
        if ((v369 & 4) != 0)
          goto LABEL_553;
        v401 = CA::OGL::tex_image_count[v371];
        if (!CA::OGL::tex_image_count[v371])
          goto LABEL_554;
        if ((CA::OGL::MetalContext::texture_filter_info[((unint64_t)v512 >> 9) & 0xF] & 2) != 0)
        {
LABEL_553:
          v405 = CA::OGL::MetalContext::encode_asg77_weights(v19, v100);
          v19 = v508;
          if (!v405)
            return;
        }
        else
        {
          v402 = 0;
          v403 = (unsigned int *)((char *)&v512 + 7);
          while (v401 - 1 != v402)
          {
            v404 = *v403;
            v403 = (unsigned int *)((char *)v403 + 7);
            ++v402;
            if ((CA::OGL::MetalContext::texture_filter_info[((unint64_t)v404 >> 9) & 0xF] & 2) != 0)
            {
              if (v402 >= v401)
                break;
              goto LABEL_553;
            }
          }
        }
LABEL_554:
        v406 = v369 & 4;
        if (v406 | v372 & 0x100)
        {
          CA::OGL::MetalContext::encode_fragment_data(*((_QWORD *)v19 + 499), a12);
          v19 = v508;
        }
        if (v406 | v372 & 0x200)
        {
          v407 = CA::OGL::MetalContext::encode_lut_texture(v19, (const CA::OGL::MetalContext::FragmentShader::Spec *)BYTE6(v514[1]), SBYTE1(v515));
          v19 = v508;
          if (!v407)
            return;
        }
        if ((v369 & 4) != 0)
          v408 = 2;
        else
          v408 = CA::OGL::tex_image_count[BYTE6(v514[1]) & 0x7F];
        v409 = *(unsigned __int16 *)((char *)&v513 + 5);
        if ((BYTE5(v513) & 0x80) != 0)
        {
          v411 = CA::OGL::MetalBufferPool::alloc_vertex_arg(*((_QWORD *)v19 + 499), 0, 4u, 4u);
          v19 = v508;
          if (v411)
            *v411 = BYTE3(v515) & 3 | ((BYTE4(v515) & 3) << 8) | (((*(unsigned __int16 *)((char *)&v515 + 5) >> 5) & 3) << 16);
        }
        else
        {
          LOBYTE(v410) = 0;
          if ((BYTE5(v513) & 0x60) != 0 || (*(_WORD *)((_BYTE *)&v513 + 3) & 0x303) == 0)
            goto LABEL_580;
        }
        if (v408)
        {
          v412 = 0;
          v413 = 0;
          v414 = *((_QWORD *)v19 + 2);
          do
          {
            *(_OWORD *)((char *)v19 + v412 + 2528) = *(_OWORD *)(v414 + v412 + 96);
            if (((0x42000FFE00uLL >> *(_BYTE *)(v414 + v413 + 17)) & 1) == 0)
            {
              v415 = *(_QWORD *)(v414 + 8 * CA::OGL::state_image_texture_unit(v414, v413) + 176) & 0xFFFFFFFFFFFFFFFCLL;
              if (v415)
              {
                if ((*(_WORD *)(v415 + 123) & 0x100) != 0)
                {
                  v416 = (float *)((char *)v19 + v412);
                  v416[633] = -*(float *)((char *)v19 + v412 + 2532);
                  v416[635] = 1.0 - *(float *)((char *)v19 + v412 + 2540);
                }
              }
            }
            ++v413;
            v412 += 16;
          }
          while (v408 != v413);
        }
        if (v408 > 1 || (*((_BYTE *)v19 + 3360) & 1) == 0 || memcmp((char *)v19 + 3328, (char *)v19 + 2528, 16 * v408))
        {
          v417 = (char *)v19 + 2528;
          v418 = CA::OGL::MetalBufferPool::encode_vertex_arg(*((CA::OGL::MetalBufferPool **)v19 + 499), 3, (char *)v19 + 2528, 16 * v408, 0x10u);
          v19 = v508;
          if (!v418)
            return;
          memcpy((char *)v508 + 3328, v417, 16 * v408);
          *((_BYTE *)v508 + 3360) = *((_BYTE *)v508 + 3360) & 0xFE | v408 & 1;
        }
        v410 = (v409 >> 7) & 1;
LABEL_580:
        if ((v410 & 1) != 0 || ((0x27F90uLL >> (v409 & 0x1F)) & 1) != 0)
        {
          v419 = BYTE5(v515) & 0x1F;
          if ((vminvq_u32((uint32x4_t)vceqq_f32(*((float32x4_t *)v19 + 211), *((float32x4_t *)v19 + 138))) & 0x80000000) == 0
            || v419 == 7
            && (vminvq_u32((uint32x4_t)vceqq_f32(*((float32x4_t *)v19 + 212), *((float32x4_t *)v19 + 139))) & 0x80000000) == 0)
          {
            v420 = (char)CA::OGL::MetalContext::vertex_shader_type_info[3 * (BYTE5(v515) & 0x1F) + 2];
            v421 = CA::OGL::MetalBufferPool::encode_vertex_arg(*((CA::OGL::MetalBufferPool **)v19 + 499), 5, (char *)v19 + 2208, 4 * (v420 & 0xFu), 4 * (v420 & 0xFu));
            v19 = v508;
            if (!v421)
              return;
            if (((0x5806FuLL >> v419) & 1) != 0)
            {
              *((_DWORD *)v508 + 844) = 2143289344;
            }
            else
            {
              *((_OWORD *)v508 + 211) = *((_OWORD *)v508 + 138);
              if (v419 == 7)
                *((_OWORD *)v508 + 212) = *((_OWORD *)v508 + 139);
            }
          }
        }
        if (*((_DWORD *)v19 + 830) != *((_DWORD *)v19 + 60) || a11)
        {
          v422 = (float32x4_t *)CA::OGL::MetalBufferPool::alloc_vertex_arg(*((_QWORD *)v19 + 499), 2, 0x40u, 0x10u);
          v19 = v508;
          if (!v422)
            return;
          if (a11 || (v427 = (float *)*((_QWORD *)v508 + 100)) == 0)
          {
            v424 = *(float32x4_t *)((char *)v508 + 2136);
            v425 = *(float32x4_t *)((char *)v508 + 2152);
            v426 = *(float32x4_t *)((char *)v508 + 2184);
            v422[2] = *(float32x4_t *)((char *)v508 + 2168);
            v422[3] = v426;
            *v422 = v424;
            v422[1] = v425;
          }
          else
          {
            CA::Mat4Impl::mat4_concat(v422, v427, (const double *)v508 + 267, v423);
          }
          *((_DWORD *)v508 + 830) = *((_DWORD *)v508 + 60);
        }
        if ((v409 & 0x80) != 0 || (v409 & 0x60) == 0 && (*(_WORD *)((_BYTE *)&v513 + 3) & 0x202) != 0)
        {
          v428 = *((_QWORD *)v19 + 2);
          v430 = *(_QWORD *)(v428 + 64);
          v431 = *(_QWORD *)(v428 + 72);
          v429 = (_QWORD *)(v428 + 64);
          v432 = *((_QWORD *)v19 + 464) == v430 && *((_QWORD *)v19 + 465) == v431;
          v433 = v432 && *((_QWORD *)v19 + 466) == v429[2];
          if (!v433 || *((_QWORD *)v19 + 467) != v429[3])
          {
            v435 = CA::OGL::MetalBufferPool::encode_vertex_arg(*((CA::OGL::MetalBufferPool **)v19 + 499), 4, v429, 0x20u, 0x10u);
            v19 = v508;
            if (!v435)
              return;
            v436 = *((_QWORD *)v508 + 2);
            v437 = *(_OWORD *)(v436 + 80);
            *((_OWORD *)v508 + 232) = *(_OWORD *)(v436 + 64);
            *((_OWORD *)v508 + 233) = v437;
          }
        }
        v438 = a10;
        if (a11)
        {
          if (v497 == 3)
            v439 = 1;
          else
            v439 = 2;
          v440 = (float64x2_t *)*((_QWORD *)v19 + 100);
          v510[0] = &off_1E159A320;
          v510[1] = v19;
          v511 = v510;
          v441 = CA::OGL::clip_primitives(v439, a3, (uint64_t)a10, (uint64_t)__src, 0, a11, v440, 0, 0, (uint64_t)v510, 1u);
          v442 = v511;
          if (v511 == v510)
          {
            v444 = 4;
            v442 = v510;
            v443 = (unsigned int *)v508;
          }
          else
          {
            v443 = (unsigned int *)v508;
            if (!v511)
            {
LABEL_630:
              if (!v441)
                return;
              ++v443[60];
              goto LABEL_656;
            }
            v444 = 5;
          }
          (*(void (**)(void))(*v442 + 8 * v444))();
          goto LABEL_630;
        }
        if (v495)
        {
          v445 = a9 + v493;
          if (a10 && v497 == 3 && v445 > a3)
          {
            v446 = (char *)CA::OGL::MetalBufferPool::alloc_vertex_arg(*((_QWORD *)v19 + 499), 1, v495 * a3, 0x10u);
            if (!v446)
              return;
            if (a3)
            {
              v447 = a3;
              do
              {
                v448 = *v438++;
                memcpy(v446, &__src[v448 * v495], v495);
                v446 += v495;
                --v447;
              }
              while (v447);
            }
            goto LABEL_654;
          }
          if (!CA::OGL::MetalBufferPool::encode_vertex_arg(*((CA::OGL::MetalBufferPool **)v19 + 499), 1, __src, v445 * v495, v492))return;
        }
        else
        {
          v449 = *((_QWORD *)v19 + 499);
          v450 = *((_QWORD *)__src + 4);
          v451 = *(_QWORD *)(v449 + 192);
          if (*(_QWORD *)(v449 + 72) == v450)
          {
            (*(void (**)(uint64_t, char *, _QWORD, uint64_t))(v449 + 216))(v451, sel_setVertexBufferOffset_atIndex_, *((unsigned int *)__src + 10), 1);
          }
          else
          {
            (*(void (**)(uint64_t, char *, _QWORD, _QWORD, uint64_t))(v449 + 200))(v451, sel_setVertexBuffer_offset_atIndex_, *((_QWORD *)__src + 4), *((unsigned int *)__src + 10), 1);
            *(_QWORD *)(v449 + 72) = v450;
          }
        }
        if (!a10)
        {
LABEL_654:
          (*((void (**)(_QWORD, char *, uint64_t, _QWORD, _QWORD, _QWORD))v508 + 374))(*((_QWORD *)v508 + 367), sel_drawPrimitives_vertexStart_vertexCount_instanceCount_, v497, 0, a3, v494);
          goto LABEL_655;
        }
        if (v494 != 1)
          __assert_rtn("encode_draw", "ogl-metal.mm", 9483, "instance_count == 1");
        v452 = *((_QWORD *)v508 + 499);
        v453 = 2 * a3;
        v454 = *(_QWORD *)(v452 + 8);
        if (v454)
        {
          if (*(_DWORD *)(v452 + 44) <= 4u)
            v455 = 4;
          else
            v455 = *(_DWORD *)(v452 + 44);
          v456 = *(_DWORD *)(v452 + 24);
          v457 = *(_DWORD *)(v452 + 28);
          v458 = (v455 + v456 - 1) & -v455;
          _CF = v457 != v458 && v457 >= v458 + v453;
          if (_CF || !v456)
          {
LABEL_653:
            memcpy((void *)(*(_QWORD *)(v452 + 32) + v458), a10, v453);
            *(_DWORD *)(v452 + 24) = v458 + v453;
            (*(void (**)(_QWORD, char *, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(v452 + 232))(*(_QWORD *)(v452 + 192), sel_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset_, v497, a3, 0, *(_QWORD *)(v452 + 8), v458);
LABEL_655:
            v443 = (unsigned int *)v508;
LABEL_656:
            ++v443[172];
            if (v406)
              ++v443[176];
            if (BYTE3(xmmword_1ECDC6AF0))
            {
              v489 = v443[53];
              if ((_DWORD)v489)
              {
                v490 = CA::OGL::MetalContext::_metal_trace_log;
                if (os_signpost_enabled((os_log_t)CA::OGL::MetalContext::_metal_trace_log))
                {
                  v491 = CA::OGL::MetalContext::TextureFunction_codes[BYTE6(v514[1]) & 0x7F];
                  buf[0] = 136446466;
                  *(_QWORD *)&buf[1] = v491;
                  LOWORD(buf[3]) = 1026;
                  *(_DWORD *)((char *)&buf[3] + 2) = a3;
                  _os_signpost_emit_with_name_impl(&dword_184457000, v490, OS_SIGNPOST_EVENT, v489, "Draw", "ID is update texture_function=%{public,name=texture_function}s draw_count=%{public,name=draw_count}d", (uint8_t *)buf, 0x12u);
                }
              }
            }
            CA::OGL::Context::marked_destination((CA::OGL::Context *)v443);
            return;
          }
          CA::OGL::MetalBufferPool::retire_metal_buffer(*((_QWORD *)v508 + 499), v454);
          *(_QWORD *)(v452 + 8) = 0;
          *(_QWORD *)(v452 + 24) = 0;
          *(_QWORD *)(v452 + 32) = 0;
        }
        buffer = CA::OGL::MetalBufferPool::allocate_buffer((os_unfair_lock_s *)v452, v453);
        *(_QWORD *)(v452 + 8) = buffer;
        if (!buffer)
          return;
        ++*(_DWORD *)(v452 + 40);
        *(_QWORD *)(v452 + 32) = objc_msgSend(buffer, "contents");
        v458 = 0;
        *(_DWORD *)(v452 + 28) = objc_msgSend(*(id *)(v452 + 8), "length");
        goto LABEL_653;
      }
    }
  }
}

uint64_t CA::OGL::state_image_texture_unit(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  _BOOL4 v7;
  int v8;
  int v9;
  int v10;

  if (!a2)
    return 0;
  v2 = result;
  v3 = 0;
  LODWORD(result) = 0;
  do
  {
    result = result + CA::OGL::image_plane_count[*(unsigned __int8 *)(v2 + v3 + 17)];
    v4 = *(_QWORD *)(v2 + 8 * v3 + 40);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 80);
      v6 = v5 == 0;
      v7 = v5 != 0;
      v8 = *(_DWORD *)(v4 + 56);
      if (v6)
        v9 = 1;
      else
        v9 = 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7;
      result = (v10 + result);
    }
    ++v3;
  }
  while (a2 != v3);
  return result;
}

uint64_t CA::OGL::MetalBufferPool::encode_vertex_arg(CA::OGL::MetalBufferPool *this, uint64_t a2, const void *__src, unsigned int a4, unsigned int a5)
{
  uint64_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  _QWORD *v16;
  uint64_t result;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;

  if ((a5 & (a5 - 1)) != 0)
    __assert_rtn("get_buffer", "ogl-metal.mm", 3133, "x_power_of_two (alignment)");
  v9 = *((_QWORD *)this + 1);
  if (v9)
  {
    v10 = *((_DWORD *)this + 11);
    if (v10 <= a5)
      v10 = a5;
    v11 = *((_DWORD *)this + 6);
    v12 = *((_DWORD *)this + 7);
    v13 = (v10 + v11 - 1) & -v10;
    if (v12 != v13 && v12 >= v13 + a4 || v11 == 0)
      goto LABEL_15;
    v16 = (_QWORD *)((char *)this + 24);
    CA::OGL::MetalBufferPool::retire_metal_buffer((uint64_t)this, v9);
    *((_QWORD *)this + 1) = 0;
    *v16 = 0;
    *((_QWORD *)this + 4) = 0;
  }
  result = (uint64_t)CA::OGL::MetalBufferPool::allocate_buffer((os_unfair_lock_s *)this, a4);
  *((_QWORD *)this + 1) = result;
  if (!result)
    return result;
  ++*((_DWORD *)this + 10);
  *((_QWORD *)this + 4) = objc_msgSend((id)result, "contents");
  v13 = 0;
  *((_DWORD *)this + 7) = objc_msgSend(*((id *)this + 1), "length");
LABEL_15:
  if (__src)
    memcpy((void *)(*((_QWORD *)this + 4) + v13), __src, a4);
  *((_DWORD *)this + 6) = v13 + a4;
  v18 = *((_QWORD *)this + 1);
  v19 = (char *)this + 8 * a2;
  v21 = *((_QWORD *)v19 + 8);
  v20 = v19 + 64;
  v22 = *((_QWORD *)this + 24);
  if (v21 == v18)
  {
    (*((void (**)(uint64_t, char *, _QWORD, uint64_t))this + 27))(v22, sel_setVertexBufferOffset_atIndex_, v13, a2);
  }
  else
  {
    (*((void (**)(uint64_t, char *, _QWORD, _QWORD, uint64_t))this + 25))(v22, sel_setVertexBuffer_offset_atIndex_, *((_QWORD *)this + 1), v13, a2);
    *v20 = v18;
  }
  return 1;
}

uint64_t CA::OGL::MetalContext::start_render_encoder(CA::OGL::MetalContext *this)
{
  uint64_t v2;
  char *v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  unsigned int v9;
  unsigned int v10;
  _BOOL4 v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  BOOL v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  id v26;
  uint64_t v27;
  __int16 v28;
  int v29;
  uint64_t v30;
  int v31;
  const __CFString *v32;
  double v33;
  double v34;
  double v35;
  double v36;
  CA::Render::Object *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v42;
  char *v43;
  char v44;
  uint8_t buf[8];
  uint64_t v46;

  LOBYTE(v2) = 0;
  v46 = *MEMORY[0x1E0C80C00];
  v43 = sel_drawPrimitives_vertexStart_vertexCount_instanceCount_;
  v3 = (char *)this + 3912;
  for (i = *((_QWORD *)this + 367); ; i = 0)
  {
    if (i && (v5 = *((_QWORD *)this + 493)) != 0 && *(unsigned __int16 *)(v5 + 216) != *(unsigned __int16 *)(v5 + 214))
    {
      LODWORD(v6) = 1;
    }
    else
    {
      v6 = *((_QWORD *)this + 2);
      if (v6)
        LODWORD(v6) = (*(unsigned __int8 *)(v6 + 481) >> 2) & 1;
    }
    v7 = *((_QWORD *)this + 31);
    v8 = (_DWORD *)*((_QWORD *)this + 499);
    v9 = (*((_WORD *)this + 408) & 1) != 0 ? 2 : 8;
    v10 = v8[10];
    if (v10 <= v9)
    {
      if (v10 != v9)
        goto LABEL_17;
      v11 = v8[6] > (v8[7] - (v8[7] >> 4));
    }
    else
    {
      v11 = 1;
    }
    if (((!v11 | v6) & 1) == 0)
    {
      CA::OGL::MetalContext::flush(this, 0);
      i = *((_QWORD *)this + 367);
    }
LABEL_17:
    if (i)
      return 1;
    v44 = v2;
    v12 = *((_QWORD *)this + 493);
    if (v12)
      v13 = *(_QWORD *)(v7 + 200) == v12;
    else
      v13 = 0;
    if (v13)
      v14 = *((_QWORD *)this + 493);
    else
      v14 = v7;
    v15 = *(unsigned __int16 *)(v14 + 75);
    if ((v15 & 0x20) != 0)
      v16 = 2;
    else
      v16 = (v15 >> 7) & 1;
    if ((__int16)(*(_WORD *)(v7 + 232) << 12) >= 1)
    {
      v17 = 0;
      do
      {
        v18 = *((_QWORD *)this + 31);
        if (v18)
          v18 = ((unint64_t)*(unsigned __int8 *)(v18 + 72) >> 1) & 0x1F;
        v19 = *(unsigned __int16 *)(v7 + 214);
        v20 = ((1 << v17) & v19) == 0;
        if (((1 << v17) & v19) != 0)
          v21 = 0;
        else
          v21 = v16;
        if (v20)
          v22 = v18;
        else
          v22 = 0;
        if (((v17 == 2) & ((*(_DWORD *)(v7 + 68) & 0x2000u) >> 13)) != 0)
          v23 = 2;
        else
          v23 = v21;
        v24 = *(void **)&v3[8 * v17];
        objc_msgSend(v24, "setLoadAction:", v23, v43);
        objc_msgSend(v24, "setLevel:", v22);
        ++v17;
      }
      while (v17 < *(unsigned __int16 *)(v7 + 232) << 28 >> 28);
    }
    objc_msgSend(*((id *)this + 488), "setFineGrainedBackgroundVisibilityEnabled:", *(_WORD *)(v7 + 214) != 0);
    CA::OGL::MetalContext::stop_encoders(this);
    if (!CA::OGL::MetalContext::start_command_buffer(this, *((_QWORD *)this + 380), v25))
      return 0;
    v26 = (id)objc_msgSend(*((id *)this + 366), "renderCommandEncoderWithDescriptor:", *((_QWORD *)this + 488));
    *((_QWORD *)this + 367) = v26;
    if (!v26)
      break;
    if (BYTE3(xmmword_1ECDC6AF0))
    {
      v27 = mach_continuous_time();
      v26 = (id)*((_QWORD *)this + 367);
    }
    else
    {
      v27 = 0;
    }
    *((_QWORD *)this + 382) = v27;
    ++*((_DWORD *)this + 724);
    *((_QWORD *)this + 370) = objc_msgSend(v26, "methodForSelector:", sel_setRenderPipelineState_, v43);
    *((_QWORD *)this + 371) = objc_msgSend(*((id *)this + 367), "methodForSelector:", sel_setFragmentTexture_atIndex_);
    *((_QWORD *)this + 372) = objc_msgSend(*((id *)this + 367), "methodForSelector:", sel_setFragmentSamplerState_atIndex_);
    *((_QWORD *)this + 373) = objc_msgSend(*((id *)this + 367), "methodForSelector:", sel_setScissorRect_);
    *((_QWORD *)this + 374) = objc_msgSend(*((id *)this + 367), "methodForSelector:", v43);
    CA::OGL::MetalBufferPool::set_encoder(*((_QWORD *)this + 499), *((objc_object **)this + 367));
    v28 = *(_WORD *)(v7 + 75);
    *(_WORD *)(v7 + 75) = v28 | 0x80;
    v29 = *(_DWORD *)(v7 + 68);
    if ((v28 & 0x20) != 0 && (v29 & 0x800) == 0)
    {
      *(_WORD *)(v7 + 75) = v28 & 0xFF1F | 0xC0;
      *(_QWORD *)(v7 + 192) = *(_QWORD *)(v7 + 184);
    }
    if ((v29 & 0x40) != 0)
      *(_WORD *)(v7 + 232) |= 0x100u;
    v30 = *((_QWORD *)this + 101);
    if (v30)
    {
      v31 = *(_DWORD *)(v30 + 300) & 0x1FFFF;
      *((_DWORD *)this + 766) = v31;
      *((_QWORD *)this + 384) = 0;
      *((_DWORD *)this + 770) = 0;
      if (BYTE3(xmmword_1ECDC6AF0))
      {
        v37 = *(CA::Render::Object **)(v30 + 24);
        if (v37)
          *((_QWORD *)this + 384) = CA::Render::Object::render_id(v37);
        v38 = *(_QWORD *)(v30 + 16);
        if (v38)
        {
          v39 = *(_QWORD *)(v38 + 40);
          if (v39)
          {
            v40 = *(_QWORD *)(v39 + 24);
            if (v40)
              LODWORD(v40) = *(_DWORD *)(v40 + 16);
            *((_DWORD *)this + 770) = v40;
          }
        }
      }
      if (v31)
        v32 = CFSTR("com.apple.coreanimation.offscreen-encoder");
      else
        v32 = CFSTR("com.apple.coreanimation.assembly-encoder");
    }
    else
    {
      *((_DWORD *)this + 766) = 0;
      *((_QWORD *)this + 384) = 0;
      v32 = CFSTR("com.apple.coreanimation.assembly-encoder");
      *((_DWORD *)this + 770) = 0;
    }
    objc_msgSend(*((id *)this + 367), "setLabel:", v32);
    CA::OGL::MetalContext::update_encoder_state((uint64_t)this, v7, 0, v33, v34, v35, v36);
    if ((v44 & 1) != 0)
      return 1;
    if ((_DWORD)v16 != 1)
    {
      CA::OGL::Context::marked_destination(this);
      if ((v15 & 0x20) != 0)
        *(_WORD *)(v7 + 75) |= 0x40u;
    }
    v2 = 1;
    if (*((_QWORD *)this + 367))
      return v2;
  }
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v42 = x_log_category_ogl_metal;
    if (os_log_type_enabled((os_log_t)x_log_category_ogl_metal, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_184457000, v42, OS_LOG_TYPE_ERROR, "Unable to start render command encoder\n", buf, 2u);
    }
  }
  return 0;
}

void CA::OGL::Context::marked_destination(CA::OGL::Context *this)
{
  uint64_t v1;
  BOOL v2;
  _OWORD v3[3];
  __int128 v4;
  __int128 v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  *((_WORD *)this + 408) |= 0x880u;
  v1 = *((_QWORD *)this + 31);
  if (v1)
  {
    CA::OGL::Context::marked_surface((uint64_t)this, v1);
  }
  else
  {
    if (*((_DWORD *)this + 111))
      v2 = BYTE1(xmmword_1ECDC6A70) == 0;
    else
      v2 = 1;
    if (!v2)
    {
      v4 = 0u;
      v5 = 0u;
      memset(v3, 0, 32);
      v3[2] = *(_OWORD *)((char *)this + 184);
      v4 = 0uLL;
      *(_QWORD *)&v5 = 0;
      BYTE8(v5) = 1;
      *(_WORD *)((char *)&v5 + 11) = 128;
      CA::OGL::export_surface((uint64_t)this, (uint64_t)v3, "dest");
    }
  }
}

void CA::OGL::Context::marked_surface(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  BOOL v3;

  *(_WORD *)(a2 + 75) = *(_WORD *)(a2 + 75) & 0xFF3F | 0x80;
  v2 = *(_QWORD *)(a1 + 200);
  if (v2)
    *(_DWORD *)(a2 + 4) = *(_DWORD *)(v2 + 248);
  if (*(_DWORD *)(a1 + 444))
    v3 = BYTE1(xmmword_1ECDC6A70) == 0;
  else
    v3 = 1;
  if (!v3)
    CA::OGL::export_surface(a1, a2, "surf");
}

_QWORD *std::__hash_table<std::__hash_value_type<CA::OGL::MetalContext::Pipeline::Spec,CA::OGL::MetalContext::Pipeline*>,std::__unordered_map_hasher<CA::OGL::MetalContext::Pipeline::Spec,std::__hash_value_type<CA::OGL::MetalContext::Pipeline::Spec,CA::OGL::MetalContext::Pipeline*>,CA::OGL::MetalContext::StructHasher<CA::OGL::MetalContext::Pipeline::Spec>,std::equal_to<CA::OGL::MetalContext::Pipeline::Spec>,true>,std::__unordered_map_equal<CA::OGL::MetalContext::Pipeline::Spec,std::__hash_value_type<CA::OGL::MetalContext::Pipeline::Spec,CA::OGL::MetalContext::Pipeline*>,std::equal_to<CA::OGL::MetalContext::Pipeline::Spec>,CA::OGL::MetalContext::StructHasher<CA::OGL::MetalContext::Pipeline::Spec>,true>,std::allocator<std::__hash_value_type<CA::OGL::MetalContext::Pipeline::Spec,CA::OGL::MetalContext::Pipeline*>>>::find<CA::OGL::MetalContext::Pipeline::Spec>(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *i;
  unint64_t v9;

  v4 = CA::OGL::MetalContext::StructHasher<CA::OGL::MetalContext::Pipeline::Spec>::operator()((uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v7 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v7 = (*(_QWORD *)&v5 - 1) & v4;
  }
  i = *(_QWORD **)(*a1 + 8 * v7);
  if (i)
  {
    for (i = (_QWORD *)*i; i; i = (_QWORD *)*i)
    {
      v9 = i[1];
      if (v9 == v4)
      {
        if (i[2] == *a2 && i[3] == a2[1] && i[4] == a2[2] && i[5] == a2[3])
          return i;
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v9 >= *(_QWORD *)&v5)
            v9 %= *(_QWORD *)&v5;
        }
        else
        {
          v9 &= *(_QWORD *)&v5 - 1;
        }
        if (v9 != v7)
          return 0;
      }
    }
  }
  return i;
}

unint64_t CA::OGL::MetalContext::StructHasher<CA::OGL::MetalContext::Pipeline::Spec>::operator()(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = 0;
  v2 = 0xB492B66FBE98F273;
  do
  {
    v2 = 5
       * __ROR8__((461845907* ((0xCBE41013C0000000 * *(_QWORD *)(a1 + v1)) | ((0x9AE16A3B2F90404FLL * *(_QWORD *)(a1 + v1)) >> 34))) ^ v2, 38)+ 3864292196;
    v1 += 8;
  }
  while (v1 != 32);
  v3 = (0xBF58476D1CE4E5B9 * (v2 ^ (v2 >> 30) ^ 0x20)) ^ ((0xBF58476D1CE4E5B9 * (v2 ^ (v2 >> 30) ^ 0x20)) >> 27);
  return (0x94D049BB133111EBLL * v3) ^ ((0x94D049BB133111EBLL * v3) >> 31);
}

uint64_t CA::OGL::MetalContext::Pipeline::Spec::lift_blend_function(uint64_t this)
{
  __int16 v1;
  __int16 v2;
  int v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;

  v1 = *(_WORD *)(this + 17);
  if ((v1 & 4) != 0)
    __assert_rtn("lift_blend_function", "ogl-metal.mm", 5765, "!fragment.generic");
  v2 = *(unsigned __int8 *)(this + 15);
  v3 = v2 & 0x3F;
  if (v3 == 3 || v3 == 58)
    goto LABEL_4;
  v6 = *(_WORD *)(this + 24) & 0x3FF;
  if ((*(_WORD *)(this + 17) & 0x440) == 0 && v3 == 56 && (_DWORD)v6 != 115 && (_DWORD)v6 != 125)
  {
    v2 = v2 & 0xC0 | 0xC;
    *(_BYTE *)(this + 15) = v2;
  }
  if ((v6 != 125 && v6 != 115 || (CA::OGL::MetalContext::blend_function_info[v2 & 0x3F] & 0x10) == 0)
    && (v2 & 0x3Eu) <= 0x19)
  {
    if ((v1 & 0x400) != 0)
    {
      v7 = v2 & 0x3F;
      if (v7 == 12 || (CA::OGL::MetalContext::blend_function_info[v2 & 0x3F] & 8) != 0)
        return this;
    }
    else if (v6 == 115 || v6 == 125)
    {
      v7 = v2 & 0x3F;
      if (v7 == 12)
        return this;
    }
    else
    {
      v7 = v2 & 0x3F;
    }
    if (v7 && ((*(_BYTE *)(this + 16) & 7) == 0 || (CA::OGL::MetalContext::blend_function_info[v7] & 1) == 0))
    {
LABEL_4:
      if ((*(_WORD *)&CA::OGL::MetalContext::texture_function_info[8 * (*(_BYTE *)(this + 14) & 0x7F)
                                                                  - (*(_BYTE *)(this + 14) & 0x7F)
                                                                  + 5] & 8) == 0)
      {
        v4 = *(unsigned __int16 *)(this + 24);
        this += 24;
        v5 = v4 & 0xFFFF03FF | (*(unsigned __int8 *)(this + 2) << 16);
        *(_WORD *)this = v4 & 0x3FF | (v2 << 10);
        *(_BYTE *)(this + 2) = BYTE2(v5);
        *(_BYTE *)(this - 9) = v2 & 0xC0 | 0x3A;
      }
    }
  }
  return this;
}

void *CA::OGL::MetalBufferPool::alloc_vertex_arg(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v13 = 0;
  v6 = CA::OGL::MetalBufferPool::alloc_bytes((CA::OGL::MetalBufferPool *)a1, a3, a4, 0, &v13);
  if (v6)
  {
    v7 = *(_QWORD *)(a1 + 8);
    v8 = a1 + 8 * a2;
    v10 = *(_QWORD *)(v8 + 64);
    v9 = (_QWORD *)(v8 + 64);
    v11 = *(_QWORD *)(a1 + 192);
    if (v10 == v7)
    {
      (*(void (**)(uint64_t, char *, _QWORD, uint64_t))(a1 + 216))(v11, sel_setVertexBufferOffset_atIndex_, v13, a2);
    }
    else
    {
      (*(void (**)(uint64_t, char *, _QWORD, _QWORD, uint64_t))(a1 + 200))(v11, sel_setVertexBuffer_offset_atIndex_, *(_QWORD *)(a1 + 8), v13, a2);
      *v9 = v7;
    }
  }
  return v6;
}

double CA::OGL::MetalContext::update_encoder_state(uint64_t a1, uint64_t a2, int a3, double a4, double a5, double a6, double a7)
{
  void *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  double v15;
  char v16;
  double result;
  _QWORD v18[4];
  __int128 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v9 = *(void **)(a1 + 2936);
  if (v9)
  {
    v18[0] = 0;
    v18[1] = 0;
    v10 = 28;
    if ((*(_WORD *)(a2 + 232) & 0x400) == 0)
      v10 = 24;
    v11 = *(_DWORD *)(a2 + v10);
    v12 = *(_QWORD *)(a1 + 248);
    if (v12)
    {
      v13 = *(unsigned __int8 *)(v12 + 72) >> 1;
      LOBYTE(v12) = v13 & 0x1F;
      v11 >>= v13;
    }
    v14 = 24;
    if ((*(_WORD *)(a2 + 232) & 0x400) == 0)
      v14 = 28;
    v15 = (double)(*(int *)(a2 + v14) >> v12);
    *(double *)&v18[2] = (double)v11;
    *(double *)&v18[3] = v15;
    v19 = xmmword_18474DF50;
    objc_msgSend(v9, "setViewport:", v18);
    *(_DWORD *)(a1 + 3248) |= 2u;
  }
  if ((a3 & 4) != 0)
  {
    objc_msgSend(*(id *)(a1 + 2936), "setFrontFacingWinding:", 0);
    if ((a3 & 8) == 0)
    {
LABEL_11:
      if ((a3 & 0x20) == 0)
        goto LABEL_12;
      goto LABEL_20;
    }
  }
  else if ((a3 & 8) == 0)
  {
    goto LABEL_11;
  }
  objc_msgSend(*(id *)(a1 + 2936), "setCullMode:", 0);
  if ((a3 & 0x20) == 0)
  {
LABEL_12:
    if ((a3 & 0x80) == 0)
      goto LABEL_13;
    goto LABEL_21;
  }
LABEL_20:
  LODWORD(a4) = 0;
  LODWORD(a5) = 1.0;
  LODWORD(a6) = 0;
  objc_msgSend(*(id *)(a1 + 2936), "setDepthBias:slopeScale:clamp:", a4, a5, a6);
  if ((a3 & 0x80) == 0)
  {
LABEL_13:
    if ((a3 & 0x100) == 0)
      goto LABEL_14;
    goto LABEL_22;
  }
LABEL_21:
  objc_msgSend(*(id *)(a1 + 2936), "setTriangleFillMode:", 0);
  if ((a3 & 0x100) == 0)
  {
LABEL_14:
    if ((a3 & 0x200) == 0)
      goto LABEL_15;
LABEL_23:
    objc_msgSend(*(id *)(a1 + 2936), "setDepthStencilState:", *(_QWORD *)(a1 + 3936));
    if ((a3 & 0x400) == 0)
      goto LABEL_17;
    goto LABEL_16;
  }
LABEL_22:
  LODWORD(a4) = 0;
  LODWORD(a5) = 0;
  LODWORD(a6) = 0;
  LODWORD(a7) = 0;
  objc_msgSend(*(id *)(a1 + 2936), "setBlendColorRed:green:blue:alpha:", a4, a5, a6, a7);
  if ((a3 & 0x200) != 0)
    goto LABEL_23;
LABEL_15:
  if ((a3 & 0x400) != 0)
LABEL_16:
    objc_msgSend(*(id *)(a1 + 2936), "setVisibilityResultMode:offset:", 0, 0);
LABEL_17:
  *(_DWORD *)(a1 + 3248) |= a3;
  *(_DWORD *)(a1 + 3320) = -1;
  *(_QWORD *)(a1 + 3312) = 0;
  v16 = *(_BYTE *)(a1 + 3360);
  *(_DWORD *)(a1 + 3376) = 2143289344;
  *(_DWORD *)(a1 + 3752) = 2143289344;
  *(_QWORD *)(a1 + 3364) = 0x7FC000007FC00000;
  *(_BYTE *)(a1 + 3696) = 9;
  *(_DWORD *)(a1 + 3712) = 2143289344;
  *(_QWORD *)(a1 + 3744) = -1;
  result = 0.0;
  *(_OWORD *)(a1 + 3760) = 0u;
  *(_OWORD *)(a1 + 3776) = 0u;
  *(_OWORD *)(a1 + 3792) = 0u;
  *(_OWORD *)(a1 + 3808) = 0u;
  *(_OWORD *)(a1 + 3824) = 0u;
  *(_OWORD *)(a1 + 3840) = 0u;
  *(_OWORD *)(a1 + 3856) = 0u;
  *(_OWORD *)(a1 + 3872) = 0u;
  *(_QWORD *)(a1 + 3888) = 0;
  *(_BYTE *)(a1 + 3360) = v16 & 0xE0;
  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a1 + 65) & 0xFE | ((a3 & 0x40) != 0);
  *(_DWORD *)(a1 + 48) = -1;
  return result;
}

uint64_t CA::OGL::MetalContext::encode_placeholder_texture(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a1 + 2864);
  if (!v4)
  {
    v5 = (void *)objc_msgSend(*(id *)(a1 + 2904), "newTextureWithDescriptor:", objc_msgSend(MEMORY[0x1E0CC6BB0], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", 80, 1, 1, 0));
    *(_QWORD *)(a1 + 2864) = v5;
    objc_msgSend(v5, "setLabel:", CFSTR("com.apple.coreanimation.placeholder-texture"));
    v4 = *(_QWORD *)(a1 + 2864);
    if (!v4)
      return 0;
  }
  v6 = a1 + 8 * a2;
  if (*(_QWORD *)(v6 + 3760) != v4)
  {
    *(_QWORD *)(v6 + 3760) = v4;
    (*(void (**)(_QWORD, char *))(a1 + 2968))(*(_QWORD *)(a1 + 2936), sel_setFragmentTexture_atIndex_);
  }
  return 1;
}

float64x2_t CA::Mat4Impl::mat4_concat(float32x4_t *this, float *a2, const double *a3, const float *a4)
{
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float32x4_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t result;

  v4 = *(float64x2_t *)(a2 + 4);
  v6 = *(float64x2_t *)(a2 + 8);
  v5 = *(float64x2_t *)(a2 + 12);
  v8 = *(float64x2_t *)(a2 + 16);
  v7 = *(float64x2_t *)(a2 + 20);
  v10 = *(float64x2_t *)(a2 + 24);
  v9 = *(float64x2_t *)(a2 + 28);
  v11 = *(float32x4_t *)(a3 + 2);
  v12 = vcvt_hight_f64_f32(*(float32x4_t *)a3);
  v13 = vcvtq_f64_f32(*(float32x2_t *)a3);
  v14 = vmulq_n_f64(v13, *(double *)a2);
  v15 = vmulq_n_f64(v12, *(double *)a2);
  v16 = vmulq_n_f64(v13, v6.f64[0]);
  v17 = vmulq_n_f64(v12, v6.f64[0]);
  v18 = vmulq_n_f64(v13, v8.f64[0]);
  v19 = vmulq_n_f64(v12, v8.f64[0]);
  v20 = vmulq_n_f64(v13, v10.f64[0]);
  v21 = vmulq_n_f64(v12, v10.f64[0]);
  v22 = vcvt_hight_f64_f32(v11);
  v23 = vcvtq_f64_f32(*(float32x2_t *)v11.f32);
  v24 = vmlaq_laneq_f64(v16, v23, v6, 1);
  v25 = vmlaq_laneq_f64(v17, v22, v6, 1);
  v26 = vmlaq_laneq_f64(v18, v23, v8, 1);
  v27 = vmlaq_laneq_f64(v19, v22, v8, 1);
  v28 = *(float32x4_t *)(a3 + 4);
  v29 = *(float32x4_t *)(a3 + 6);
  v30 = vcvt_hight_f64_f32(v28);
  v31 = vcvtq_f64_f32(*(float32x2_t *)v28.f32);
  v32 = vmlaq_n_f64(vmlaq_laneq_f64(v14, v23, *(float64x2_t *)a2, 1), v31, v4.f64[0]);
  v33 = vmlaq_n_f64(v24, v31, v5.f64[0]);
  v34 = vmlaq_n_f64(v26, v31, v7.f64[0]);
  v35 = vmlaq_n_f64(vmlaq_laneq_f64(v20, v23, v10, 1), v31, v9.f64[0]);
  v36 = vcvt_hight_f64_f32(v29);
  v37 = vcvtq_f64_f32(*(float32x2_t *)v29.f32);
  result = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v21, v22, v10, 1), v30, v9.f64[0]), v36, v9, 1);
  *this = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmlaq_laneq_f64(v32, v37, v4, 1)), vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v15, v22, *(float64x2_t *)a2, 1), v30, v4.f64[0]), v36, v4, 1));
  this[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmlaq_laneq_f64(v33, v37, v5, 1)), vmlaq_laneq_f64(vmlaq_n_f64(v25, v30, v5.f64[0]), v36, v5, 1));
  this[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmlaq_laneq_f64(v34, v37, v7, 1)), vmlaq_laneq_f64(vmlaq_n_f64(v27, v30, v7.f64[0]), v36, v7, 1));
  this[3] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmlaq_laneq_f64(v35, v37, v9, 1)), result);
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<CA::OGL::MetalContext::Pipeline::Spec,CA::OGL::MetalContext::Pipeline*>,std::__unordered_map_hasher<CA::OGL::MetalContext::Pipeline::Spec,std::__hash_value_type<CA::OGL::MetalContext::Pipeline::Spec,CA::OGL::MetalContext::Pipeline*>,CA::OGL::MetalContext::StructHasher<CA::OGL::MetalContext::Pipeline::Spec>,std::equal_to<CA::OGL::MetalContext::Pipeline::Spec>,true>,std::__unordered_map_equal<CA::OGL::MetalContext::Pipeline::Spec,std::__hash_value_type<CA::OGL::MetalContext::Pipeline::Spec,CA::OGL::MetalContext::Pipeline*>,std::equal_to<CA::OGL::MetalContext::Pipeline::Spec>,CA::OGL::MetalContext::StructHasher<CA::OGL::MetalContext::Pipeline::Spec>,true>,std::allocator<std::__hash_value_type<CA::OGL::MetalContext::Pipeline::Spec,CA::OGL::MetalContext::Pipeline*>>>::__emplace_unique_key_args<CA::OGL::MetalContext::Pipeline::Spec,std::piecewise_construct_t const&,std::tuple<CA::OGL::MetalContext::Pipeline::Spec const&>,std::tuple<>>(float *a1, _QWORD *a2, _OWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  __int128 v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  int8x8_t prime;
  void *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint8x8_t v29;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  unint64_t v37;
  _QWORD *v39;

  v6 = CA::OGL::MetalContext::StructHasher<CA::OGL::MetalContext::Pipeline::Spec>::operator()((uint64_t)a2);
  v7 = v6;
  v8 = *((_QWORD *)a1 + 1);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v10 = v6;
      if (v6 >= v8)
        v10 = v6 % v8;
    }
    else
    {
      v10 = (v8 - 1) & v6;
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v10);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v6)
        {
          if (i[2] == *a2 && i[3] == a2[1] && i[4] == a2[2] && i[5] == a2[3])
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v13 >= v8)
              v13 %= v8;
          }
          else
          {
            v13 &= v8 - 1;
          }
          if (v13 != v10)
            break;
        }
      }
    }
  }
  else
  {
    v10 = 0;
  }
  i = operator new(0x38uLL);
  *i = 0;
  i[1] = v7;
  v17 = a3[1];
  *((_OWORD *)i + 1) = *a3;
  *((_OWORD *)i + 2) = v17;
  i[6] = 0;
  v18 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v19 = a1[8];
  if (!v8 || (float)(v19 * (float)v8) < v18)
  {
    v20 = 1;
    if (v8 >= 3)
      v20 = (v8 & (v8 - 1)) != 0;
    v21 = v20 | (2 * v8);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      prime = (int8x8_t)v22;
    else
      prime = (int8x8_t)v21;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v8 = *((_QWORD *)a1 + 1);
    }
    if (*(_QWORD *)&prime > v8)
      goto LABEL_40;
    if (*(_QWORD *)&prime < v8)
    {
      v30 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v8 < 3 || (v31 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        v30 = std::__next_prime(v30);
      }
      else
      {
        v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2)
          v30 = v32;
      }
      if (*(_QWORD *)&prime <= v30)
        prime = (int8x8_t)v30;
      if (*(_QWORD *)&prime >= v8)
      {
        v8 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_40:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v24 = operator new(8 * *(_QWORD *)&prime);
          v25 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v24;
          if (v25)
            operator delete(v25);
          v26 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v26++) = 0;
          while (*(_QWORD *)&prime != v26);
          v27 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v27)
          {
            v28 = v27[1];
            v29 = (uint8x8_t)vcnt_s8(prime);
            v29.i16[0] = vaddlv_u8(v29);
            if (v29.u32[0] > 1uLL)
            {
              if (v28 >= *(_QWORD *)&prime)
                v28 %= *(_QWORD *)&prime;
            }
            else
            {
              v28 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = a1 + 4;
            v33 = (_QWORD *)*v27;
            if (*v27)
            {
              do
              {
                v34 = v33[1];
                if (v29.u32[0] > 1uLL)
                {
                  if (v34 >= *(_QWORD *)&prime)
                    v34 %= *(_QWORD *)&prime;
                }
                else
                {
                  v34 &= *(_QWORD *)&prime - 1;
                }
                if (v34 != v28)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v34))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v34) = v27;
                    goto LABEL_65;
                  }
                  *v27 = *v33;
                  *v33 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v34);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v34) = v33;
                  v33 = v27;
                }
                v34 = v28;
LABEL_65:
                v27 = v33;
                v33 = (_QWORD *)*v33;
                v28 = v34;
              }
              while (v33);
            }
          }
          v8 = (unint64_t)prime;
          goto LABEL_69;
        }
        v39 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v39)
          operator delete(v39);
        v8 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_69:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v10 = v7 % v8;
      else
        v10 = v7;
    }
    else
    {
      v10 = (v8 - 1) & v7;
    }
  }
  v35 = *(_QWORD **)a1;
  v36 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
  if (v36)
  {
    *i = *v36;
LABEL_82:
    *v36 = i;
    goto LABEL_83;
  }
  *i = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = i;
  v35[v10] = a1 + 4;
  if (*i)
  {
    v37 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v37 >= v8)
        v37 %= v8;
    }
    else
    {
      v37 &= v8 - 1;
    }
    v36 = (_QWORD *)(*(_QWORD *)a1 + 8 * v37);
    goto LABEL_82;
  }
LABEL_83:
  ++*((_QWORD *)a1 + 3);
  return i;
}

void sub_18445DC0C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t CA::OGL::MetalContext::Pipeline::Spec::get_generic(uint64_t result, uint64_t a2)
{
  char v2;
  __int16 v3;
  __int16 v4;
  int v5;

  *(_OWORD *)result = 0u;
  *(_OWORD *)(result + 16) = 0u;
  if ((CA::OGL::MetalContext::texture_function_info[8 * (*(_BYTE *)(a2 + 14) & 0x7F) - (*(_BYTE *)(a2 + 14) & 0x7F)] & 0x3F) != 0)
    __assert_rtn("get_generic", "ogl-metal.mm", 6013, "texture_function_info[texture_function].is_fixed ()");
  v2 = *(_BYTE *)(a2 + 16) & 0x60;
  v3 = *(_WORD *)(a2 + 17) & 0x30 | 0x804;
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 7) = 0;
  *(_BYTE *)(result + 15) = 58;
  *(_BYTE *)(result + 16) = v2;
  *(_WORD *)(result + 17) = v3;
  v4 = *(_WORD *)(a2 + 21);
  if ((v4 & 0x1F) != 0)
    __assert_rtn("get_generic", "ogl-metal.mm", 6249, "type == VertexShader::Type_Fixed");
  *(_DWORD *)(result + 19) = ((v4 & 0x11F) << 16) | 0x800000;
  *(_BYTE *)(result + 23) = 0;
  v5 = *(unsigned __int16 *)(a2 + 24) | (*(unsigned __int8 *)(a2 + 26) << 16);
  *(_BYTE *)(result + 26) = BYTE2(v5) & 3;
  *(_WORD *)(result + 24) = v5 & 0x3FF | 0xE800;
  return result;
}

uint64_t CA::OGL::MetalContext::encode_placeholder_cube(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 2872);
  if (!v4)
  {
    v5 = (void *)objc_msgSend(MEMORY[0x1E0CC6BB0], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", 80, 1, 1, 0);
    objc_msgSend(v5, "setTextureType:", 7);
    v6 = (void *)objc_msgSend(*(id *)(a1 + 2904), "newTextureWithDescriptor:", v5);
    *(_QWORD *)(a1 + 2872) = v6;
    objc_msgSend(v6, "setLabel:", CFSTR("com.apple.coreanimation.placeholder-cube"));
    v4 = *(_QWORD *)(a1 + 2872);
    if (!v4)
      return 0;
  }
  v7 = a1 + 8 * a2;
  if (*(_QWORD *)(v7 + 3760) != v4)
  {
    *(_QWORD *)(v7 + 3760) = v4;
    (*(void (**)(_QWORD, char *))(a1 + 2968))(*(_QWORD *)(a1 + 2936), sel_setFragmentTexture_atIndex_);
  }
  return 1;
}

void *CA::OGL::MetalContext::encode_fragment_data(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *result;

  if (!a2)
    return CA::OGL::MetalBufferPool::alloc_fragment_arg(a1, 9, 4u, 4u);
  v3 = *(_QWORD *)(a2 + 32);
  v4 = *(unsigned int *)(a2 + 40);
  v6 = *(_QWORD *)(a1 + 184);
  v5 = *(_QWORD *)(a1 + 192);
  if (v6 == v3)
    return (void *)(*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(a1 + 224))(v5, sel_setFragmentBufferOffset_atIndex_, v4, 9);
  result = (void *)(*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t, uint64_t))(a1 + 208))(v5, sel_setFragmentBuffer_offset_atIndex_, v3, v4, 9);
  *(_QWORD *)(a1 + 184) = v3;
  return result;
}

uint64_t CA::OGL::MetalContext::Pipeline::Spec::push_blend_function(uint64_t this)
{
  unsigned int v1;
  char v2;
  int v3;

  v1 = *(unsigned __int16 *)(this + 24);
  if (v1 >> 10 != 58)
  {
    v2 = *(_BYTE *)(this + 15);
    if ((v2 & 0x3F) != 0x3A)
      __assert_rtn("push_blend_function", "ogl-metal.mm", 5837, "fragment.blend_function == OGL_BLEND_NONE");
    v3 = *(unsigned __int8 *)(this + 26);
    *(_BYTE *)(this + 15) = v2 & 0xC0 | (v1 >> 10);
    *(_BYTE *)(this + 26) = (v1 & 0xFFFF03FF | (v3 << 16)) >> 16;
    *(_WORD *)(this + 24) = v1 & 0x3FF | 0xE800;
  }
  return this;
}

uint64_t CA::OGL::MetalContext::encode_lut_texture(CA::OGL::MetalContext *this, const CA::OGL::MetalContext::FragmentShader::Spec *a2, char a3)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if ((a3 & 4) == 0
    && (*(_WORD *)&CA::OGL::MetalContext::texture_function_info[8 * (a2 & 0x7F)
                                                              - (a2 & 0x7F)
                                                              + 5] & 0x200) == 0)
  {
    return CA::OGL::MetalContext::encode_placeholder_cube((uint64_t)this, 0xEu);
  }
  v4 = *(_QWORD *)(*((_QWORD *)this + 2) + 8 * *(unsigned __int8 *)(*((_QWORD *)this + 2) + 308) + 176) & 0xFFFFFFFFFFFFFFFCLL;
  v5 = atomic_load((unint64_t *)this + 497);
  *(_QWORD *)(v4 + 112) = v5;
  v6 = *(_QWORD *)(v4 + 64);
  if (*((_QWORD *)this + 484) != v6)
  {
    *((_QWORD *)this + 484) = v6;
    (*((void (**)(_QWORD, char *))this + 371))(*((_QWORD *)this + 367), sel_setFragmentTexture_atIndex_);
  }
  return 1;
}

void CA::OGL::MetalContext::dispatch_async_pipeline(dispatch_queue_t *this, const CA::OGL::MetalContext::Pipeline::Spec *a2, CA::OGL::MetalContext::Pipeline *a3, char a4)
{
  __int128 v6;
  dispatch_block_t v7;
  _QWORD v8[5];
  __int128 v9;
  __int128 v10;
  CA::OGL::MetalContext::Pipeline *v11;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v6 = *((_OWORD *)a2 + 1);
  v9 = *(_OWORD *)a2;
  v10 = v6;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3321888768;
  v8[2] = ___ZN2CA3OGL12MetalContext23dispatch_async_pipelineERKNS1_8Pipeline4SpecEPS2_b_block_invoke;
  v8[3] = &__block_descriptor_81_e8_40c41_ZTSN2CA3OGL12MetalContext8Pipeline4SpecE_e5_v8__0l;
  v8[4] = this;
  v12 = a4;
  v11 = a3;
  v7 = dispatch_block_create(DISPATCH_BLOCK_DETACHED, v8);
  *((_QWORD *)a3 + 1) = v7;
  dispatch_async(this[262], v7);
}

void sub_18445E15C(_Unwind_Exception *a1)
{
  CA::Transaction *v1;

  CA::Transaction::unlock(v1);
  _Unwind_Resume(a1);
}

void CA::Layer::setter(CA::Transaction *a1, const void *a2, const CGAffineTransform *a3, double *a4)
{
  CA::Transaction *v8;
  int v9;
  uint64_t v10;
  int a_low;
  int v12;
  const void *v13;
  double a;
  double v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  Class isa;
  double v26;
  __int128 v27;
  BOOL v28;
  objc_object *String;
  objc_object **v30;
  char *v31;
  CA::AttrList *v32;
  malloc_zone_t *malloc_zone;
  _OWORD v34[8];
  objc_object v35[2];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGAffineTransform v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  CGRect v52;

  v51 = *MEMORY[0x1E0C80C00];
  v8 = CA::Transaction::ensure_compat(a1);
  v9 = *((_DWORD *)v8 + 25);
  *((_DWORD *)v8 + 25) = v9 + 1;
  if (!v9)
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Transaction::transaction_lock);
  v49 = 0u;
  v50 = 0u;
  v47 = 0u;
  v48 = 0u;
  v46 = 0u;
  memset(&v45, 0, sizeof(v45));
  v10 = *((_QWORD *)a1 + 9);
  if (!v10 || (CA::AttrList::get(v10, (int)a2, a3, (CA::Mat4Impl *)&v45) & 1) == 0)
    CA::Layer::default_value((id *)a1, a2, a3, (uint64_t)&v45);
  switch((int)a3)
  {
    case 1:
    case 4:
    case 5:
    case 13:
    case 14:
    case 15:
    case 16:
      if (*(_QWORD *)&v45.a != *(_QWORD *)a4)
        goto LABEL_55;
      goto LABEL_58;
    case 2:
    case 3:
      v13 = *(const void **)a4;
      if (*(_QWORD *)&v45.a != *(_QWORD *)a4 && (!*(_QWORD *)&v45.a || !v13 || !CFEqual(*(CFTypeRef *)&v45.a, v13)))
        goto LABEL_55;
      goto LABEL_58;
    case 6:
    case 7:
    case 8:
      a_low = LOBYTE(v45.a);
      v12 = *(unsigned __int8 *)a4;
      goto LABEL_17;
    case 9:
    case 10:
      a_low = LOWORD(v45.a);
      v12 = *(unsigned __int16 *)a4;
      goto LABEL_17;
    case 11:
    case 12:
      a_low = LODWORD(v45.a);
      v12 = *(_DWORD *)a4;
LABEL_17:
      if (a_low == v12)
        goto LABEL_58;
      goto LABEL_55;
    case 17:
      if (*(float *)&v45.a != *(float *)a4)
        goto LABEL_55;
      goto LABEL_58;
    case 18:
      a = v45.a;
      v16 = *a4;
      goto LABEL_28;
    case 19:
    case 20:
      if (v45.a != *a4 || v45.b != a4[1])
        goto LABEL_55;
      goto LABEL_58;
    case 21:
      v52.origin = *(CGPoint *)&v45.a;
      v52.size = *(CGSize *)&v45.c;
      if (CGRectEqualToRect(v52, *(CGRect *)a4))
        goto LABEL_58;
      goto LABEL_55;
    case 22:
      v39 = v47;
      v40 = v48;
      v41 = v49;
      v42 = v50;
      *(_OWORD *)&v35[0].isa = *(_OWORD *)&v45.a;
      v36 = *(_OWORD *)&v45.c;
      v37 = *(_OWORD *)&v45.tx;
      v38 = v46;
      v17 = *(_OWORD *)a4;
      v18 = *((_OWORD *)a4 + 1);
      v19 = *((_OWORD *)a4 + 3);
      v34[2] = *((_OWORD *)a4 + 2);
      v34[3] = v19;
      v34[0] = v17;
      v34[1] = v18;
      v20 = *((_OWORD *)a4 + 4);
      v21 = *((_OWORD *)a4 + 5);
      v22 = *((_OWORD *)a4 + 7);
      v34[6] = *((_OWORD *)a4 + 6);
      v34[7] = v22;
      v34[4] = v20;
      v34[5] = v21;
      if (v45.a != *(double *)v34)
        goto LABEL_55;
      v23 = 1;
      break;
    case 23:
      t1 = v45;
      v27 = *((_OWORD *)a4 + 1);
      *(_OWORD *)&t2.a = *(_OWORD *)a4;
      *(_OWORD *)&t2.c = v27;
      *(_OWORD *)&t2.tx = *((_OWORD *)a4 + 2);
      if (CGAffineTransformEqualToTransform(&t1, &t2))
        goto LABEL_58;
      goto LABEL_55;
    case 24:
      v28 = v45.a == *a4 && v45.b == a4[1];
      if (!v28 || v45.c != a4[2])
        goto LABEL_55;
      goto LABEL_58;
    case 25:
      if (*(double *)&v46 != a4[6]
        || *((double *)&v46 + 1) != a4[7]
        || v45.tx != a4[4]
        || v45.ty != a4[5]
        || v45.a != *a4
        || v45.b != a4[1]
        || v45.c != a4[2])
      {
        goto LABEL_55;
      }
      a = v45.d;
      v16 = a4[3];
LABEL_28:
      if (a != v16)
        goto LABEL_55;
      goto LABEL_58;
    default:
      goto LABEL_55;
  }
  while (v23 != 16)
  {
    v24 = v23;
    isa = v35[v23].isa;
    v26 = *((double *)v34 + v23++);
    if (*(double *)&isa != v26)
    {
      if ((unint64_t)(v24 - 1) <= 0xE)
      {
LABEL_55:
        v35[0].isa = 0;
        String = (objc_object *)CAAtomGetString(a2);
        CA::Layer::begin_change(a1, v8, String, v35, v30);
        v31 = CA::Layer::writable_state(a1, v8);
        v32 = (CA::AttrList *)*((_QWORD *)v31 + 4);
        if (!v32)
        {
          malloc_zone = (malloc_zone_t *)get_malloc_zone();
          v32 = (CA::AttrList *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x10uLL, 0x743898A5uLL);
        }
        *((_QWORD *)v31 + 4) = CA::AttrList::set(v32, a2, (int)a3, (unsigned __int8 *)a4);
        CA::Layer::end_change((id *)a1, v8, (int)a2, String, (objc_object *)v35[0].isa);
      }
      break;
    }
  }
LABEL_58:
  CA::Transaction::unlock(v8);
}

void sub_18445E520(_Unwind_Exception *a1)
{
  CA::Transaction *v1;

  CA::Transaction::unlock(v1);
  _Unwind_Resume(a1);
}

void CA::Layer::getter(CA::Transaction *a1, unsigned int a2, const CGAffineTransform *a3, id *a4)
{
  CA::Transaction *v8;
  int v9;
  uint64_t v10;
  id v11;

  v8 = CA::Transaction::ensure_compat(a1);
  v9 = *((_DWORD *)v8 + 25);
  *((_DWORD *)v8 + 25) = v9 + 1;
  if (!v9)
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Transaction::transaction_lock);
  v10 = *((_QWORD *)a1 + 9);
  if (v10 && CA::AttrList::get(v10, a2, a3, (CA::Mat4Impl *)a4))
  {
    if ((a3 & 0xFFFFFFFE) == 2)
      v11 = objc_retainAutorelease(*a4);
  }
  else
  {
    CA::Layer::default_value((id *)a1, a2, a3, (uint64_t)a4);
  }
  CA::Transaction::unlock(v8);
}

void sub_18445E5E0(_Unwind_Exception *a1)
{
  CA::Transaction *v1;

  CA::Transaction::unlock(v1);
  _Unwind_Resume(a1);
}

CA::Transaction *CA::Transaction::ensure_compat(CA::Transaction *this)
{
  CA::Transaction *v1;

  v1 = *(CA::Transaction **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 576);
  if (!v1)
    v1 = (CA::Transaction *)CA::Transaction::create(this);
  if ((*((_BYTE *)v1 + 116) & 0x10) != 0 && !**((_DWORD **)v1 + 13))
    CA::Transaction::ensure_implicit(v1, 1);
  return v1;
}

uint64_t CAObject_defaultValueForAtom(objc_class *a1, int a2, const CGAffineTransform *a3, uint64_t a4)
{
  uint64_t result;
  _QWORD *v8;
  __int128 *v9;
  __int128 v10;
  __int128 v11;

  result = classDescription(a1);
  if (result)
  {
    v8 = (_QWORD *)result;
    while (1)
    {
      result = v8[(a2 & 7) + 6];
      if (result)
      {
        result = CA::AttrList::get(result, a2, a3, (CA::Mat4Impl *)a4);
        if ((result & 1) != 0)
          break;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_6;
    }
  }
  else
  {
LABEL_6:
    switch((int)a3)
    {
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 13:
      case 14:
      case 15:
      case 16:
      case 18:
        *(_QWORD *)a4 = 0;
        return result;
      case 6:
      case 7:
      case 8:
        *(_BYTE *)a4 = 0;
        return result;
      case 9:
      case 10:
        *(_WORD *)a4 = 0;
        return result;
      case 11:
      case 12:
      case 17:
        *(_DWORD *)a4 = 0;
        return result;
      case 19:
        v9 = (__int128 *)MEMORY[0x1E0C9D538];
        goto LABEL_13;
      case 20:
        v9 = (__int128 *)MEMORY[0x1E0C9D820];
LABEL_13:
        v10 = *v9;
        goto LABEL_20;
      case 21:
        v10 = *MEMORY[0x1E0C9D628];
        v11 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
        goto LABEL_17;
      case 22:
        *(CATransform3D *)a4 = CATransform3DIdentity;
        return result;
      case 23:
        v10 = *MEMORY[0x1E0C9BAA8];
        v11 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
        *(_OWORD *)(a4 + 32) = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 32);
LABEL_17:
        *(_OWORD *)(a4 + 16) = v11;
        goto LABEL_20;
      case 24:
        *(_QWORD *)a4 = 0;
        *(_QWORD *)(a4 + 8) = 0;
        *(_QWORD *)(a4 + 16) = 0;
        return result;
      case 25:
        v10 = 0uLL;
        *(_OWORD *)(a4 + 32) = 0u;
        *(_OWORD *)(a4 + 48) = 0u;
        *(_OWORD *)(a4 + 16) = 0u;
LABEL_20:
        *(_OWORD *)a4 = v10;
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t CA::AttrList::get(uint64_t result, int a2, const CGAffineTransform *a3, CA::Mat4Impl *this)
{
  unsigned int v5;
  double v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  id Weak;
  __int128 *v11;
  __int128 v12;
  __int128 v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 *v21;
  __int128 v22;
  __int128 *v23;
  __int128 *v24;
  BOOL v25;
  float v26;
  int v27;

  while (1)
  {
    result = *(_QWORD *)result;
    if (!result)
      return result;
    v5 = *(_DWORD *)(result + 8);
    if ((v5 & 0xFFFFFF) == a2)
    {
      if (!this)
        return 1;
      switch(HIBYTE(v5) & 0x7F)
      {
        case 1:
          if (((_DWORD)a3 - 1) > 3)
            goto LABEL_40;
          v8 = **(_QWORD **)(result + 16);
          goto LABEL_21;
        case 2:
        case 3:
          if (((_DWORD)a3 - 1) > 3)
            goto LABEL_40;
          goto LABEL_20;
        case 4:
          if (((_DWORD)a3 - 1) > 3)
            goto LABEL_40;
          v9 = *(_QWORD *)(result + 16);
          if (*(_BYTE *)(v9 + 8))
            Weak = objc_loadWeak((id *)v9);
          else
            Weak = *(id *)v9;
          *(_QWORD *)this = Weak;
          return 1;
        case 5:
          if ((_DWORD)a3 != 5)
            goto LABEL_40;
LABEL_20:
          v8 = *(_QWORD *)(result + 16);
LABEL_21:
          *(_QWORD *)this = v8;
          return 1;
        case 6:
        case 7:
        case 8:
        case 9:
        case 0xA:
        case 0xB:
        case 0xC:
        case 0xD:
        case 0xE:
          switch((int)a3)
          {
            case 6:
              goto LABEL_41;
            case 7:
            case 8:
              goto LABEL_6;
            case 9:
            case 10:
              goto LABEL_10;
            case 11:
            case 12:
              goto LABEL_13;
            case 13:
            case 14:
            case 15:
            case 16:
              goto LABEL_20;
            case 17:
              v26 = (float)*(uint64_t *)(result + 16);
              goto LABEL_47;
            case 18:
              v6 = (double)*(uint64_t *)(result + 16);
              goto LABEL_49;
            default:
              goto LABEL_40;
          }
        case 0xF:
        case 0x10:
          switch((int)a3)
          {
            case 6:
LABEL_41:
              v25 = *(_QWORD *)(result + 16) == 0;
              goto LABEL_42;
            case 7:
            case 8:
LABEL_6:
              *(_BYTE *)this = *(_QWORD *)(result + 16);
              return 1;
            case 9:
            case 10:
LABEL_10:
              *(_WORD *)this = *(_QWORD *)(result + 16);
              return 1;
            case 11:
            case 12:
LABEL_13:
              *(_DWORD *)this = *(_QWORD *)(result + 16);
              return 1;
            case 13:
            case 14:
            case 15:
            case 16:
              goto LABEL_20;
            case 17:
              v26 = (float)*(unint64_t *)(result + 16);
              goto LABEL_47;
            case 18:
              v6 = (double)*(unint64_t *)(result + 16);
              goto LABEL_49;
            default:
              goto LABEL_40;
          }
        case 0x11:
        case 0x12:
          v6 = *(double *)(result + 16);
          switch((int)a3)
          {
            case 6:
              v25 = v6 == 0.0;
LABEL_42:
              LOBYTE(v7) = !v25;
              goto LABEL_45;
            case 7:
            case 8:
              v7 = (int)v6;
LABEL_45:
              *(_BYTE *)this = v7;
              return 1;
            case 9:
            case 10:
              *(_WORD *)this = (int)v6;
              return 1;
            case 11:
              v27 = (int)v6;
              goto LABEL_61;
            case 12:
              v27 = v6;
LABEL_61:
              *(_DWORD *)this = v27;
              break;
            case 13:
            case 15:
              v8 = (uint64_t)v6;
              goto LABEL_21;
            case 14:
            case 16:
              v8 = (unint64_t)v6;
              goto LABEL_21;
            case 17:
              v26 = v6;
LABEL_47:
              *(float *)this = v26;
              return 1;
            case 18:
LABEL_49:
              *(double *)this = v6;
              return 1;
            default:
              goto LABEL_40;
          }
          return 1;
        case 0x13:
          if ((_DWORD)a3 != 19)
            goto LABEL_40;
          goto LABEL_32;
        case 0x14:
          if ((_DWORD)a3 != 20)
            goto LABEL_40;
LABEL_32:
          v12 = *(_OWORD *)*(_QWORD *)(result + 16);
          goto LABEL_39;
        case 0x15:
          if ((_DWORD)a3 != 21)
            goto LABEL_40;
          v11 = *(__int128 **)(result + 16);
          v12 = *v11;
          v13 = v11[1];
          goto LABEL_36;
        case 0x16:
          if ((_DWORD)a3 == 23)
          {
            CA::Mat4Impl::mat4_set_transform(this, *(double **)(result + 16), a3);
            return 1;
          }
          if ((_DWORD)a3 == 22)
          {
            v14 = *(_OWORD **)(result + 16);
            v15 = v14[1];
            v16 = v14[2];
            v17 = v14[3];
            *(_OWORD *)this = *v14;
            *((_OWORD *)this + 1) = v15;
            *((_OWORD *)this + 2) = v16;
            *((_OWORD *)this + 3) = v17;
            v18 = v14[5];
            v19 = v14[6];
            v20 = v14[7];
            *((_OWORD *)this + 4) = v14[4];
            *((_OWORD *)this + 5) = v18;
            *((_OWORD *)this + 6) = v19;
            *((_OWORD *)this + 7) = v20;
            return 1;
          }
LABEL_40:
          result = 0;
          break;
        case 0x17:
          if ((_DWORD)a3 != 23)
            goto LABEL_40;
          v23 = *(__int128 **)(result + 16);
          v12 = *v23;
          v13 = v23[1];
          v22 = v23[2];
          goto LABEL_35;
        case 0x18:
          if ((_DWORD)a3 != 24)
            goto LABEL_40;
          v24 = *(__int128 **)(result + 16);
          v12 = *v24;
          *((_QWORD *)this + 2) = *((_QWORD *)v24 + 2);
          goto LABEL_39;
        case 0x19:
          if ((_DWORD)a3 != 25)
            goto LABEL_40;
          v21 = *(__int128 **)(result + 16);
          v12 = *v21;
          v13 = v21[1];
          v22 = v21[2];
          *((_OWORD *)this + 3) = v21[3];
LABEL_35:
          *((_OWORD *)this + 2) = v22;
LABEL_36:
          *((_OWORD *)this + 1) = v13;
LABEL_39:
          *(_OWORD *)this = v12;
          return 1;
        default:
          goto LABEL_40;
      }
      return result;
    }
  }
}

uint64_t classDescription(objc_class *a1)
{
  unint64_t StatusReg;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x1E0C80C00];
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v3 = *(_QWORD *)(StatusReg + 584);
  if (!v3 || *(objc_class **)(v3 + 8) != a1)
  {
    pthread_mutex_lock(&class_table_lock);
    if (!class_table)
    {
      v4 = (int *)x_hash_table_new_(0, 0, 0, 0, 0, 0);
      class_table = (uint64_t)v4;
      v5 = objc_opt_class();
      hash_table_modify(v4, v5, 0, 0);
      pthread_key_init_np();
      v6 = getenv("CA_LOG_CLASS_DESCRIPTIONS");
      if (v6)
        log_class_descriptions = atoi(v6) != 0;
    }
    v9[0] = 0;
    v7 = x_hash_table_lookup(class_table, (uint64_t)a1, v9);
    if (!v9[0])
      v7 = (uint64_t)classDescription_locked(a1);
    v3 = v7;
    *(_QWORD *)(StatusReg + 584) = v7;
    pthread_mutex_unlock(&class_table_lock);
  }
  return v3;
}

void sub_18445EB8C(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&class_table_lock);
  _Unwind_Resume(a1);
}

double CA::Layer::default_value(id *this, unsigned int a2, const CGAffineTransform *a3, uint64_t a4)
{
  objc_class *Class;
  double result;
  objc_object *v10[2];

  v10[1] = *(objc_object **)MEMORY[0x1E0C80C00];
  if (a2 != 534 && ((_DWORD)this[7] & 0x100) != 0)
  {
    v10[0] = 0;
    if (CA::Layer::style_value((CA::Layer *)this, a2, v10))
      return CAValueObjCUnbox(v10[0], (int)a3, a4);
  }
  Class = object_getClass(this[2]);
  CAObject_defaultValueForAtom(Class, a2, a3, a4);
  return result;
}

void CA::Layer::set_position(double *a1, uint64_t a2)
{
  objc_object **v4;
  CA::Transaction *v5;
  int v6;
  char *v7;
  char *v8;
  objc_object v9[2];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v5 = CA::Transaction::ensure_compat((CA::Transaction *)a1);
  v6 = *((_DWORD *)v5 + 25);
  *((_DWORD *)v5 + 25) = v6 + 1;
  if (!v6)
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Transaction::transaction_lock);
  if (a1[10] == *(double *)a2 && a1[11] == *(double *)(a2 + 8))
  {
    v7 = (char *)(a1 + 5);
  }
  else
  {
    v9[0].isa = 0;
    CA::Layer::begin_change((CA::Layer *)a1, v5, CFSTR("position"), v9, v4);
    v7 = CA::Layer::writable_state((CA::Layer *)a1, v5);
    *(_OWORD *)(v7 + 40) = *(_OWORD *)a2;
    CA::Layer::end_change((id *)a1, v5, 429, (objc_object *)CFSTR("position"), (objc_object *)v9[0].isa);
  }
  if ((v7[18] & 4) == 0)
  {
    v8 = CA::Layer::writable_state((CA::Layer *)a1, v5);
    *((_DWORD *)v8 + 4) |= 0x40000u;
  }
  CA::Transaction::unlock(v5);
}

void sub_18445EEDC(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void CA::Layer::set_bit(CA::Transaction *a1, unsigned int a2, int a3, int a4, int a5, unint64_t a6, uint64_t a7)
{
  CA::Transaction *v13;
  int v14;
  char *v15;
  unsigned int v16;
  int v17;
  objc_object *String;
  objc_object **v19;
  char *v20;
  int v21;
  _QWORD *v22;
  unsigned int v23;
  int v24;
  int v25;
  char *v26;
  objc_object v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v13 = CA::Transaction::ensure_compat(a1);
  v14 = *((_DWORD *)v13 + 25);
  *((_DWORD *)v13 + 25) = v14 + 1;
  if (!v14)
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Transaction::transaction_lock);
  v15 = (char *)a1 + 40;
  v16 = a3 >> 5;
  v17 = 1 << a3;
  if (((*((_DWORD *)a1 + (a3 >> 5) + 11) & (1 << a3)) != 0) != a5)
  {
    v28.isa = 0;
    String = (objc_object *)CAAtomGetString(a2);
    CA::Layer::begin_change(a1, v13, String, &v28, v19);
    v15 = CA::Layer::writable_state(a1, v13);
    v20 = &v15[4 * v16];
    if (a5)
      v21 = *((_DWORD *)v20 + 1) | v17;
    else
      v21 = *((_DWORD *)v20 + 1) & ~v17;
    *((_DWORD *)v20 + 1) = v21;
    if (a7 & 1 | a6)
    {
      v22 = (_QWORD *)((char *)a1 + (a7 >> 1));
      if ((a7 & 1) != 0)
        a6 = *(_QWORD *)(*v22 + a6);
      ((void (*)(_QWORD *, CA::Transaction *))a6)(v22, v13);
    }
    CA::Layer::end_change((id *)a1, v13, a2, String, (objc_object *)v28.isa);
  }
  v23 = a4 >> 5;
  v24 = *(_DWORD *)&v15[4 * (a4 >> 5) + 4];
  v25 = 1 << a4;
  if ((v24 & v25) == 0)
  {
    v26 = CA::Layer::writable_state(a1, v13);
    *(_DWORD *)&v26[4 * v23 + 4] |= v25;
  }
  CA::Transaction::unlock(v13);
}

void sub_18445F09C(_Unwind_Exception *a1)
{
  CA::Transaction *v1;

  CA::Transaction::unlock(v1);
  _Unwind_Resume(a1);
}

void CA::Layer::end_change(id *this, CA::Transaction *a2, int a3, objc_object *a4, objc_object *a5)
{
  CA::Layer::property_did_change(this, a2, a3);
  if ((*((_DWORD *)this + 1) & 0x60000) != 0)
  {
    if (!a5)
      return;
    goto LABEL_3;
  }
  objc_msgSend(this[2], "didChangeValueForKey:", a4);
  if (a5)
LABEL_3:
    -[objc_object runActionForKey:object:arguments:](a5, "runActionForKey:object:arguments:", a4, this[2], 0);
}

void CA::Layer::property_did_change(id *this, CA::Transaction *a2, int a3)
{
  int v6;
  __CFString *v7;
  int v8;
  BOOL v9;
  __int128 v10;
  __int128 v11;
  int v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  int v23;
  id v24;
  const __CFString *String;
  float v26;
  double v27;
  __CFString *v28;
  const __CFString *v29;
  int v30;
  BOOL v31;
  __int128 v32;
  __int128 v33;
  unsigned int v37;
  void *v38;
  __CFString *v39;
  BOOL v40;
  int v41;
  BOOL v42;
  __int128 v43;
  __int128 v44;
  int v48;
  uint64_t v49;
  unsigned int *v50;
  unsigned int v51;
  int v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  double v64;
  const char *v65;
  NSObject *v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  const void *v74;
  unsigned int *v75;
  unsigned int *v76;
  void *v77;
  unsigned int v78;
  unsigned int v79;
  malloc_zone_t *malloc_zone;
  objc_class *v81;
  objc_class *v82;
  const void *v83;
  CFTypeID v84;
  uint64_t v85;
  CA::Transaction *v86;
  const char *v87;
  uint64_t v88;
  char *v89;
  CGAffineTransform v90;
  float v91;
  double v92;
  __int128 v93;
  __int128 v94;
  CGAffineTransform v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  _BYTE buf[12];
  __int16 v105;
  const char *v106;
  __int16 v107;
  uint64_t v108;
  uint64_t v109;

  v109 = *MEMORY[0x1E0C80C00];
  v89 = CA::Layer::writable_state((CA::Layer *)this, a2);
  v102 = 0u;
  v103 = 0u;
  v100 = 0u;
  v101 = 0u;
  v98 = 0u;
  v99 = 0u;
  v96 = 0u;
  v97 = 0u;
  v94 = 0u;
  memset(&v95, 0, sizeof(v95));
  v93 = 0u;
  v92 = 0.0;
  v6 = 0x8000;
  v91 = 0.0;
  v7 = &stru_1E15B0530;
  v8 = byte_1ECDC6A6F;
  if (a3 <= 250)
  {
    if (a3 <= 116)
    {
      if (a3 > 51)
      {
        switch(a3)
        {
          case '4':
          case '5':
          case '@':
          case 'A':
          case 'C':
            goto LABEL_76;
          case '6':
            v6 = 1024;
            goto LABEL_76;
          case '7':
            goto LABEL_104;
          case '8':
          case '9':
          case ':':
          case ';':
          case '<':
          case '=':
          case '>':
          case '?':
          case 'D':
          case 'E':
          case 'F':
          case 'G':
            goto LABEL_172;
          case 'B':
            goto LABEL_75;
          case 'H':
            v16 = 0;
            v17 = 96;
            goto LABEL_109;
          default:
            if (a3 != 111)
              goto LABEL_172;
            v6 = 2048;
            break;
        }
        goto LABEL_76;
      }
      switch(a3)
      {
        case 10:
        case 12:
        case 14:
        case 15:
        case 16:
          goto LABEL_76;
        case 11:
          goto LABEL_91;
        case 13:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
          goto LABEL_172;
        case 25:
          if (!byte_1ECDC6A6F)
            goto LABEL_108;
          objc_msgSend(this[2], "anchorPoint");
          v20 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR(" to (%f, %f)"), v18, v19);
          break;
        case 26:
          CA::Layer::getter((CA::Transaction *)this, 0x1Au, (const CGAffineTransform *)0x12, (id *)&v92);
          v27 = v92;
          *((_DWORD *)v89 + 4) = *((_DWORD *)v89 + 4) & 0xFFFFFFDF | (32 * (v92 != 0.0));
          if (!v8)
            goto LABEL_108;
          v20 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR(" to %f"), *(_QWORD *)&v27);
          break;
        default:
          if (a3 == 47)
            goto LABEL_104;
          goto LABEL_172;
      }
      v7 = (__CFString *)v20;
      goto LABEL_108;
    }
    if (a3 <= 186)
    {
      switch(a3)
      {
        case 117:
          goto LABEL_119;
        case 118:
        case 120:
        case 122:
        case 123:
        case 129:
        case 130:
        case 131:
        case 143:
        case 144:
        case 146:
        case 147:
        case 162:
        case 177:
        case 182:
          goto LABEL_76;
        case 119:
          v9 = byte_1ECDC6A6F == 0;
          CA::Layer::getter((CA::Transaction *)this, 0x77u, (const CGAffineTransform *)0x15, (id *)&v93);
          v10 = v93;
          v11 = v94;
          if (*((double *)&v94 + 1) == 1.0
            && *(double *)&v94 == 1.0
            && *((double *)&v93 + 1) == 0.0
            && *(double *)&v93 == 0.0)
          {
            v15 = 0;
          }
          else
          {
            v15 = 0x40000000;
          }
          *((_DWORD *)v89 + 3) = *((_DWORD *)v89 + 3) & 0xBFFFFFFF | v15;
          if (!v9)
            v7 = (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR(" to (%f, %f, %f, %f)"), v10, v11);
          v6 = 0x20000;
          goto LABEL_76;
        case 121:
          *((_DWORD *)v89 + 4) |= 0x200u;
LABEL_119:
          v6 = 1;
          goto LABEL_76;
        case 132:
          goto LABEL_137;
        case 133:
          v31 = byte_1ECDC6A6F == 0;
          CA::Layer::getter((CA::Transaction *)this, 0x85u, (const CGAffineTransform *)0x15, (id *)&v93);
          v32 = v93;
          v33 = v94;
          if (*((double *)&v94 + 1) == 1.0
            && *(double *)&v94 == 1.0
            && *((double *)&v93 + 1) == 0.0
            && *(double *)&v93 == 0.0)
          {
            v37 = 0;
          }
          else
          {
            v37 = 0x80000000;
          }
          *((_DWORD *)v89 + 3) = v37 & 0x80000000 | *((_DWORD *)v89 + 3) & 0x7FFFFFFF;
          if (!v31)
            v7 = (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR(" to (%f, %f, %f, %f)"), v32, v33);
          v6 = 256;
          goto LABEL_76;
        case 134:
          if (byte_1ECDC6A6F)
          {
            objc_msgSend(this[2], "contentsScale");
            v92 = *(double *)&v38;
            v7 = (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR(" to %f"), v38);
          }
LABEL_137:
          v6 = 16;
          goto LABEL_76;
        case 135:
          v39 = (__CFString *)objc_msgSend(this[2], "contentsScaling");
          if (v39 != CFSTR("stretch")
            && (v39 == CFSTR("repeat")
             || -[__CFString isEqualToString:](v39, "isEqualToString:", CFSTR("repeat"))))
          {
            CA::Layer::prevent_subtextures((CFTypeID)this);
          }
          goto LABEL_76;
        case 136:
          goto LABEL_91;
        case 137:
          v40 = byte_1ECDC6A6F == 0;
          CA::Layer::getter((CA::Transaction *)this, 0x89u, (const CGAffineTransform *)0x17, (id *)&v95);
          v90 = v95;
          if (CGAffineTransformIsIdentity(&v90))
            v41 = 0;
          else
            v41 = 2;
          *((_DWORD *)v89 + 4) = *((_DWORD *)v89 + 4) & 0xFFFFFFFD | v41;
          if (!v40)
            v7 = (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR(" to [%f %f %f %f %f %f]"), *(_OWORD *)&v95.a, *(_OWORD *)&v95.c, *(_OWORD *)&v95.tx);
          v6 = 128;
          goto LABEL_76;
        case 141:
          goto LABEL_162;
        case 142:
          v42 = byte_1ECDC6A6F == 0;
          CA::Layer::getter((CA::Transaction *)this, 0x8Eu, (const CGAffineTransform *)0x15, (id *)&v93);
          v43 = v93;
          v44 = v94;
          if (*((double *)&v94 + 1) == 0.0
            && *(double *)&v94 == 0.0
            && *((double *)&v93 + 1) == 0.5
            && *(double *)&v93 == 0.5)
          {
            v48 = 0;
          }
          else
          {
            v48 = 4;
          }
          *((_DWORD *)v89 + 4) = *((_DWORD *)v89 + 4) & 0xFFFFFFFB | v48;
          if (!v42)
            v7 = (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR(" to (%f, %f, %f, %f)"), v43, v44);
LABEL_162:
          v6 = 0x80000;
          break;
        case 145:
          *((_DWORD *)v89 + 4) |= 0x1000000u;
          goto LABEL_76;
        case 163:
          v6 = 0;
          *((_DWORD *)v89 + 3) |= 0x1000000u;
          goto LABEL_173;
        default:
          goto LABEL_172;
      }
      goto LABEL_76;
    }
    if (a3 <= 223)
    {
      if (a3 > 218)
      {
        if (a3 == 219)
          goto LABEL_104;
        if (a3 != 222)
          goto LABEL_172;
        v6 = 512;
      }
      else
      {
        if (a3 == 187)
          goto LABEL_104;
        if (a3 != 190)
          goto LABEL_172;
      }
      goto LABEL_76;
    }
    if (a3 <= 240)
    {
      if (a3 != 224)
      {
        if (a3 != 239)
          goto LABEL_172;
        v6 = 0x400000;
        goto LABEL_76;
      }
      goto LABEL_108;
    }
    if (a3 == 241)
      goto LABEL_76;
    if (a3 == 243)
      goto LABEL_108;
LABEL_172:
    v6 = 0;
LABEL_173:
    v17 = 0;
    v16 = 1;
    goto LABEL_195;
  }
  if (a3 <= 465)
  {
    if (a3 > 387)
    {
      if (a3 > 428)
      {
        switch(a3)
        {
          case 433:
          case 445:
          case 446:
          case 447:
            goto LABEL_76;
          case 434:
          case 436:
          case 437:
          case 438:
          case 439:
          case 441:
          case 442:
          case 443:
          case 444:
            goto LABEL_172;
          case 435:
            v6 = 0x4000;
            goto LABEL_76;
          case 440:
            goto LABEL_75;
          default:
            if ((a3 - 458) < 2)
              goto LABEL_104;
            if (a3 != 429)
              goto LABEL_172;
            goto LABEL_100;
        }
      }
      if (a3 == 388)
      {
        v16 = 0;
        v17 = 0;
        goto LABEL_195;
      }
      if (a3 != 400)
      {
        if (a3 != 402)
          goto LABEL_172;
        goto LABEL_76;
      }
      CA::Layer::getter((CA::Transaction *)this, 0x190u, (const CGAffineTransform *)0x11, (id *)&v91);
      v26 = v91;
      *((_DWORD *)v89 + 3) = *((_DWORD *)v89 + 3) & 0xF7FFFFFF | ((v91 != 1.0) << 27);
      if (v8)
      {
        v22 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR(" to %f"), v26);
        goto LABEL_99;
      }
    }
    else
    {
      if (a3 > 354)
      {
        switch(a3)
        {
          case 367:
            goto LABEL_95;
          case 368:
          case 381:
            goto LABEL_76;
          case 369:
            goto LABEL_137;
          case 370:
          case 371:
          case 372:
          case 373:
          case 374:
          case 375:
          case 376:
          case 378:
          case 379:
            goto LABEL_172;
          case 377:
            v6 = 0x40000;
            goto LABEL_76;
          case 380:
            v28 = (__CFString *)objc_msgSend(this[2], "minificationFilter");
            if (v28 != CFSTR("linear"))
            {
              v29 = v28;
              if (CAInternAtom(v28, 0) == 332)
                CA::Layer::ensure_mipmaps((CFTypeID)this);
              v30 = CAInternAtom(v29, 0);
              if (v30 == 563 || v30 == 332)
                CA::Layer::prevent_subtextures((CFTypeID)this);
              v7 = &stru_1E15B0530;
            }
            goto LABEL_76;
          default:
            if (a3 != 355 && a3 != 364)
              goto LABEL_172;
            goto LABEL_76;
        }
      }
      if (a3 > 264)
      {
        if (a3 != 265)
        {
          if (a3 == 325)
          {
LABEL_95:
            v6 = 4;
          }
          else
          {
            if (a3 != 326)
              goto LABEL_172;
LABEL_75:
            v6 = 0x2000;
          }
        }
        goto LABEL_76;
      }
      if ((a3 - 254) < 2)
        goto LABEL_76;
      if (a3 != 251)
      {
        if (a3 != 260)
          goto LABEL_172;
        v6 = 0x100000;
        goto LABEL_76;
      }
    }
LABEL_100:
    v16 = 0;
    v17 = 0;
    v6 = 8;
    goto LABEL_195;
  }
  if (a3 <= 533)
  {
    switch(a3)
    {
      case 490:
      case 491:
      case 492:
      case 493:
      case 494:
      case 495:
      case 505:
        goto LABEL_75;
      case 496:
      case 500:
      case 501:
      case 502:
      case 503:
      case 504:
      case 507:
      case 508:
      case 509:
      case 510:
      case 511:
      case 512:
      case 513:
      case 514:
        goto LABEL_172;
      case 497:
      case 498:
      case 499:
        goto LABEL_76;
      case 506:
        goto LABEL_108;
      case 515:
        goto LABEL_104;
      default:
        if ((a3 - 466) < 4)
          goto LABEL_75;
        if (a3 != 482)
          goto LABEL_172;
        goto LABEL_76;
    }
  }
  if (a3 <= 556)
  {
    if (a3 <= 546)
    {
      if (a3 == 534)
      {
        *((_DWORD *)v89 + 4) |= 0x100u;
        CA::Layer::fetch_defaults((CA::Layer *)this);
        v16 = 0;
        v17 = 0;
        v6 = 0x1FFFFF;
        goto LABEL_195;
      }
      if (a3 != 535)
      {
        if (a3 == 536)
        {
          v16 = 0;
          v17 = 32;
          v6 = 2;
          goto LABEL_195;
        }
        goto LABEL_172;
      }
      CA::Layer::getter((CA::Transaction *)this, 0x217u, (const CGAffineTransform *)0x16, (id *)&v96);
      v49 = v96;
      if (*(double *)&v96 == 1.0)
      {
        v57 = 1;
        do
        {
          if (v57 == 16)
          {
            v50 = (unsigned int *)(v89 + 12);
            v51 = *((_DWORD *)v89 + 3) & 0xDFFFFFFF;
            goto LABEL_185;
          }
          v58 = v57;
          v59 = *((double *)&v96 + v57);
          v60 = *(&CATransform3DIdentity.m11 + v57++);
        }
        while (v59 == v60);
        v50 = (unsigned int *)(v89 + 12);
        v51 = *((_DWORD *)v89 + 3) & 0xDFFFFFFF;
        if ((unint64_t)(v58 - 1) < 0xF)
          goto LABEL_168;
LABEL_185:
        v52 = 0;
      }
      else
      {
        v50 = (unsigned int *)(v89 + 12);
        v51 = *((_DWORD *)v89 + 3) & 0xDFFFFFFF;
LABEL_168:
        v52 = 0x20000000;
      }
      *v50 = v51 | v52;
      if (v8)
      {
        v7 = (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR(" to [%f %f %f %f; %f %f %f %f; %f %f %f %f; %f %f %f %f]"),
                             v49,
                             *((_QWORD *)&v96 + 1),
                             v97,
                             v98,
                             v99,
                             v100,
                             v101,
                             v102,
                             v103);
        v16 = 0;
        v17 = 0;
        v6 = 64;
        goto LABEL_195;
      }
      v16 = 0;
      v17 = 0;
      v6 = 64;
LABEL_194:
      v7 = &stru_1E15B0530;
      goto LABEL_195;
    }
    if ((a3 - 551) >= 2)
    {
      if (a3 != 547)
        goto LABEL_172;
LABEL_104:
      *((_DWORD *)v89 + 4) |= 0x80u;
      CAMediaTimingInvalidate((uint64_t)this[2]);
      v16 = 0;
      v17 = 0;
      v6 = 4096;
      goto LABEL_195;
    }
LABEL_76:
    v23 = *((_DWORD *)this + 1);
    if ((v23 & 0x10000) != 0)
    {
      v24 = this[2];
      String = CAAtomGetString(a3);
      NSLog(CFSTR("%@ - changing property %@ in transform-only layer, will have no effect"), v24, String);
    }
    v17 = 0;
    v16 = 0;
    if (!v8)
      goto LABEL_206;
    goto LABEL_196;
  }
  if (a3 <= 570)
  {
    if (a3 == 557)
    {
      CA::Layer::getter((CA::Transaction *)this, 0x22Du, (const CGAffineTransform *)0x16, (id *)&v96);
      v53 = v96;
      if (*(double *)&v96 == 1.0)
      {
        v61 = 1;
        do
        {
          if (v61 == 16)
          {
            v54 = (unsigned int *)(v89 + 12);
            v55 = *((_DWORD *)v89 + 3) & 0xEFFFFFFF;
            goto LABEL_190;
          }
          v62 = v61;
          v63 = *((double *)&v96 + v61);
          v64 = *(&CATransform3DIdentity.m11 + v61++);
        }
        while (v63 == v64);
        v54 = (unsigned int *)(v89 + 12);
        v55 = *((_DWORD *)v89 + 3) & 0xEFFFFFFF;
        if ((unint64_t)(v62 - 1) < 0xF)
          goto LABEL_171;
LABEL_190:
        v56 = 0;
      }
      else
      {
        v54 = (unsigned int *)(v89 + 12);
        v55 = *((_DWORD *)v89 + 3) & 0xEFFFFFFF;
LABEL_171:
        v56 = 0x10000000;
      }
      v17 = 64;
      *v54 = v55 | v56;
      if (v8)
      {
        v7 = (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR(" to [%f %f %f %f; %f %f %f %f; %f %f %f %f; %f %f %f %f]"),
                             v53,
                             *((_QWORD *)&v96 + 1),
                             v97,
                             v98,
                             v99,
                             v100,
                             v101,
                             v102,
                             v103);
        v16 = 0;
        v6 = 32;
        goto LABEL_195;
      }
      v16 = 0;
      v6 = 32;
      goto LABEL_194;
    }
    if (a3 == 562)
    {
LABEL_91:
      objc_msgSend(this[2], "setContentsChanged");
      goto LABEL_76;
    }
    goto LABEL_172;
  }
  if (a3 != 571)
  {
    if (a3 == 591)
      goto LABEL_76;
    if (a3 != 604)
      goto LABEL_172;
    CA::Layer::getter((CA::Transaction *)this, 0x25Cu, (const CGAffineTransform *)0x12, (id *)&v92);
    v21 = v92;
    *((_DWORD *)v89 + 4) = *((_DWORD *)v89 + 4) & 0xFFFFFFBF | ((v92 != 0.0) << 6);
    if (v8)
    {
      v22 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR(" to %f"), *(_QWORD *)&v21);
LABEL_99:
      v7 = (__CFString *)v22;
      goto LABEL_100;
    }
    goto LABEL_100;
  }
LABEL_108:
  v16 = 0;
  v17 = 0;
LABEL_109:
  v6 = 16;
LABEL_195:
  v23 = *((_DWORD *)this + 1);
  if (v8)
  {
LABEL_196:
    if (x_log_hook_p())
    {
      if ((v16 & 1) != 0)
        v65 = "NOT";
      else
        v65 = (const char *)-[__CFString UTF8String]((id)CAAtomGetString(a3), "UTF8String");
      v87 = v65;
      v88 = -[__CFString UTF8String](v7, "UTF8String");
      v86 = a2;
      x_log_();
    }
    else
    {
      v66 = x_log_category_api;
      if (os_log_type_enabled((os_log_t)x_log_category_api, OS_LOG_TYPE_DEFAULT))
      {
        if ((v16 & 1) != 0)
          v67 = "NOT";
        else
          v67 = (const char *)-[__CFString UTF8String]((id)CAAtomGetString(a3), "UTF8String");
        v68 = -[__CFString UTF8String](v7, "UTF8String");
        *(_DWORD *)buf = 134218498;
        *(_QWORD *)&buf[4] = a2;
        v105 = 2080;
        v106 = v67;
        v107 = 2080;
        v108 = v68;
        _os_log_impl(&dword_184457000, v66, OS_LOG_TYPE_DEFAULT, "Transaction (%p) property %s changed %s", buf, 0x20u);
      }
    }
  }
LABEL_206:
  if ((v23 & 0x60000) != 0)
    return;
  if ((v16 & 1) != 0)
  {
    v69 = *((unsigned int *)a2 + 24);
    if ((v69 & 0x80000000) != 0 || !*((_DWORD *)this + v69 + 68))
      CA::Layer::thread_flags_((CA::Layer *)this, a2);
  }
  else
  {
    if ((v6 & 1) != 0)
      v70 = 1032;
    else
      v70 = 8;
    *((_DWORD *)this + 10) |= v6 & 0x7FFFFE;
    CA::Layer::mark((CA::Layer *)this, a2, v70, 16);
  }
  if ((v6 & 2) != 0)
  {
    v71 = *(_QWORD *)(*((_QWORD *)a2 + 13) + 216);
    if (v71)
    {
      v72 = x_hash_table_lookup(v71, (uint64_t)this, 0);
      if (v72)
      {
        v73 = *(_QWORD *)(v72 + 16);
        v74 = *(const void **)(v73 + 24);
        if (v74)
        {
          CA::Transaction::release_object(a2, v74);
          *(_QWORD *)(v73 + 24) = 0;
        }
      }
    }
  }
  if ((v17 & 0x40) != 0)
  {
    v75 = CA::Layer::retain_parent((CA::Layer *)this, a2);
    *(_QWORD *)buf = v75;
    if (v75)
    {
      v76 = v75;
      if (!CA::Layer::layout_is_active((CA::Layer *)v75, a2, 1))
      {
        v77 = (void *)*((_QWORD *)v76 + 2);
        if (objc_msgSend(v77, "needsLayoutOnGeometryChange"))
          objc_msgSend(v77, "setNeedsLayout");
      }
LABEL_225:
      v78 = *v76;
      if (*v76)
      {
        do
        {
          v79 = __ldaxr(v76);
          if (v79 != v78)
          {
            __clrex();
            goto LABEL_225;
          }
        }
        while (__stlxr(v78 - 1, v76));
        if (v78 == 1)
        {
          CA::Layer::destroy((CA::Layer *)v76);
          CA::Layer::~Layer((CA::AttrList **)v76);
          malloc_zone = (malloc_zone_t *)get_malloc_zone();
          malloc_zone_free(malloc_zone, v76);
        }
      }
    }
  }
  if ((v89[17] & 8) != 0 && (v81 = (objc_class *)objc_opt_class(), (CAObject_needsLayoutForKey(v81, a3) & 1) != 0)
    || (v17 & 0x20) != 0 && objc_msgSend(this[2], "needsLayoutOnGeometryChange"))
  {
    if ((CA::Layer::layout_is_active((CA::Layer *)this, a2, 1) & 1) == 0)
      objc_msgSend(this[2], "setNeedsLayout");
  }
  if ((v89[17] & 4) != 0)
  {
    v82 = (objc_class *)objc_opt_class();
    if ((CAObject_needsDisplayForKey(v82, a3) & 1) != 0)
      goto LABEL_248;
  }
  if (a3 == 72)
  {
    if (!objc_msgSend(this[2], "needsDisplayOnBoundsChange"))
      return;
    goto LABEL_248;
  }
  if (a3 == 124)
  {
    v83 = (const void *)*((_QWORD *)v89 + 13);
    if (v83)
    {
      v84 = CFGetTypeID(v83);
      v85 = CABackingStoreGetTypeID::type;
      if (!CABackingStoreGetTypeID::type)
      {
        v85 = _CFRuntimeRegisterClass();
        CABackingStoreGetTypeID::type = v85;
      }
      if (v84 == v85)
LABEL_248:
        objc_msgSend(this[2], "setNeedsDisplay", v86, v87, v88);
    }
  }
}

void sub_18445FF3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  X::Ref<CA::Layer>::~Ref((unsigned int **)(v1 - 144));
  _Unwind_Resume(a1);
}

char *CA::Layer::writable_state(CA::Layer *this, CA::Transaction *a2)
{
  int v3;
  CFTypeRef v4;
  CA::AttrList *v5;
  CA::AttrList *v6;
  uint64_t v7;
  char *v8;
  id *v9;
  id Weak;
  _BOOL4 v11;
  uint64_t i;
  __int128 v13;

  v3 = *((_DWORD *)this + 1);
  if ((v3 & 0x100000) != 0)
    return (char *)this + 40;
  if (*((_QWORD *)this + 32))
    CA::Transaction::release_object(a2, *((CFTypeRef *)this + 32));
  v4 = (CFTypeRef)*((_QWORD *)this + 18);
  if (v4)
    v4 = CFRetain(v4);
  *((_QWORD *)this + 32) = v4;
  v5 = (CA::AttrList *)*((_QWORD *)this + 23);
  if (v5)
    CA::AttrList::free(v5, a2);
  v6 = (CA::AttrList *)*((_QWORD *)this + 9);
  if (v6)
  {
    v7 = *((_QWORD *)v6 + 1) & 7;
    if ((_DWORD)v7 == 7)
      v6 = (CA::AttrList *)CA::AttrList::copy_(v6);
    else
      *((_QWORD *)v6 + 1) = *((_QWORD *)v6 + 1) & 0xFFFFFFFFFFFFFFF8 | (v7 + 1);
  }
  v8 = (char *)this + 40;
  *((_QWORD *)this + 23) = v6;
  if ((*((_BYTE *)this + 55) & 1) != 0)
  {
    v9 = (id *)((char *)this + 128);
    if (*((_BYTE *)this + 136))
    {
      Weak = objc_loadWeak(v9);
      v11 = *((_BYTE *)this + 136) != 0;
    }
    else
    {
      v11 = 0;
      Weak = *v9;
    }
    X::WeakDetails::Ptr::set((id *)this + 30, Weak, v11);
    *((_DWORD *)this + 13) &= ~0x1000000u;
  }
  for (i = 0; i != 24; i += 4)
    *(_DWORD *)((char *)this + i + 156) = *(_DWORD *)((char *)this + i + 44);
  *((_DWORD *)this + 38) = *((_DWORD *)this + 10);
  v13 = *((_OWORD *)this + 6);
  *((_OWORD *)this + 12) = *((_OWORD *)this + 5);
  *((_OWORD *)this + 13) = v13;
  *((_OWORD *)this + 14) = *((_OWORD *)this + 7);
  *((_DWORD *)this + 1) = v3 | 0x100000;
  return v8;
}

void CA::Layer::mark(CA::Layer *this, CA::Transaction *a2, int a3, int a4)
{
  uint64_t v8;
  char *v9;
  int v10;
  int *v11;
  int v12;
  unsigned int v13;
  CA::Layer *v14;
  unsigned int *v15;
  uint64_t v22;
  char *v23;
  int v24;
  int *v25;
  unsigned int v26;
  unsigned int v27;
  malloc_zone_t *v28;
  int v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int *v32;
  int v33;
  unsigned int v34;
  malloc_zone_t *v35;
  unsigned int *v36;
  unsigned int v37;
  int v38;
  malloc_zone_t *malloc_zone;
  unsigned int v40;
  unsigned int v41;
  malloc_zone_t *v42;
  unsigned int *v43;
  unsigned int *v44;

  v8 = *((unsigned int *)a2 + 24);
  if ((v8 & 0x80000000) != 0 || (v9 = (char *)this + 4 * v8, (v10 = *((_DWORD *)v9 + 68)) == 0))
  {
    v11 = CA::Layer::thread_flags_(this, a2);
    v10 = *v11;
  }
  else
  {
    v11 = (int *)(v9 + 272);
  }
  if ((a3 & ~v10) == 0)
    return;
  *v11 = v10 | a3;
  while (1)
  {
    v12 = *(_DWORD *)this;
    if (!*(_DWORD *)this)
      break;
    while (1)
    {
      v13 = __ldaxr((unsigned int *)this);
      if (v13 != v12)
        break;
      if (!__stlxr(v12 + 1, (unsigned int *)this))
      {
        v14 = this;
        goto LABEL_12;
      }
    }
    __clrex();
  }
  v14 = 0;
LABEL_12:
  v44 = (unsigned int *)v14;
  v15 = CA::Layer::retain_parent(this, a2);
  v43 = v15;
  if (v15)
  {
    _X22 = (CA::Layer *)v15;
    do
    {
      while (1)
      {
        __asm { PRFM            #0, [X22,#0x110] }
        v22 = *((unsigned int *)a2 + 24);
        if ((v22 & 0x80000000) != 0 || (v23 = (char *)_X22 + 4 * v22, (v24 = *((_DWORD *)v23 + 68)) == 0))
        {
          v25 = CA::Layer::thread_flags_(_X22, a2);
          v24 = *v25;
        }
        else
        {
          v25 = (int *)(v23 + 272);
        }
        if ((a4 & ~v24) == 0)
        {
LABEL_56:
          v38 = *(_DWORD *)_X22;
          if (*(_DWORD *)_X22)
          {
            do
            {
              v37 = __ldaxr((unsigned int *)_X22);
              if (v37 != v38)
              {
                __clrex();
                goto LABEL_56;
              }
            }
            while (__stlxr(v38 - 1, (unsigned int *)_X22));
            if (v38 == 1)
            {
              CA::Layer::destroy(_X22);
              CA::Layer::~Layer((CA::AttrList **)_X22);
              malloc_zone = (malloc_zone_t *)get_malloc_zone();
              malloc_zone_free(malloc_zone, _X22);
            }
          }
LABEL_60:
          v36 = v44;
          if (v44)
            goto LABEL_61;
          return;
        }
        *v25 = v24 | a4;
        if (v44 != (unsigned int *)_X22)
          break;
        v43 = CA::Layer::retain_parent(_X22, a2);
LABEL_39:
        v33 = *(_DWORD *)_X22;
        if (*(_DWORD *)_X22)
        {
          do
          {
            v34 = __ldaxr((unsigned int *)_X22);
            if (v34 != v33)
            {
              __clrex();
              goto LABEL_39;
            }
          }
          while (__stlxr(v33 - 1, (unsigned int *)_X22));
          if (v33 == 1)
          {
            CA::Layer::destroy(_X22);
            CA::Layer::~Layer((CA::AttrList **)_X22);
            v35 = (malloc_zone_t *)get_malloc_zone();
            malloc_zone_free(v35, _X22);
          }
        }
        _X22 = (CA::Layer *)v43;
        if (!v43)
          goto LABEL_49;
      }
      if (v44)
      {
LABEL_21:
        v26 = *v44;
        if (*v44)
        {
          do
          {
            v27 = __ldaxr(v44);
            if (v27 != v26)
            {
              __clrex();
              goto LABEL_21;
            }
          }
          while (__stlxr(v26 - 1, v44));
          if (v26 == 1)
          {
            CA::Layer::destroy((CA::Layer *)v44);
            CA::Layer::~Layer((CA::AttrList **)v44);
            v28 = (malloc_zone_t *)get_malloc_zone();
            malloc_zone_free(v28, v44);
          }
        }
        _X22 = (CA::Layer *)v43;
        if (!v43)
        {
          v31 = 0;
          goto LABEL_38;
        }
      }
      while (1)
      {
        v29 = *(_DWORD *)_X22;
        if (!*(_DWORD *)_X22)
          break;
        while (1)
        {
          v30 = __ldaxr((unsigned int *)_X22);
          if (v30 != v29)
            break;
          if (!__stlxr(v29 + 1, (unsigned int *)_X22))
            goto LABEL_37;
        }
        __clrex();
      }
      _X22 = 0;
LABEL_37:
      v31 = (unsigned int *)_X22;
      _X22 = (CA::Layer *)v43;
LABEL_38:
      v44 = v31;
      v32 = CA::Layer::retain_parent(_X22, a2);
      v43 = v32;
      if (_X22)
        goto LABEL_39;
      _X22 = (CA::Layer *)v32;
    }
    while (v32);
  }
LABEL_49:
  if ((a3 & 8) == 0)
    goto LABEL_60;
  v36 = v44;
  if (v44[67])
  {
    CA::Transaction::add_root(a2, (CA::Layer *)v44);
    goto LABEL_60;
  }
LABEL_61:
  v40 = *v36;
  if (*v36)
  {
    do
    {
      v41 = __ldaxr(v36);
      if (v41 != v40)
      {
        __clrex();
        goto LABEL_61;
      }
    }
    while (__stlxr(v40 - 1, v36));
    if (v40 == 1)
    {
      CA::Layer::destroy((CA::Layer *)v36);
      CA::Layer::~Layer((CA::AttrList **)v36);
      v42 = (malloc_zone_t *)get_malloc_zone();
      malloc_zone_free(v42, v36);
    }
  }
}

void sub_1844603C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  unsigned int *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, unsigned int *);
  X::Ref<CA::Layer>::~Ref((unsigned int **)va);
  X::Ref<CA::Layer>::~Ref((unsigned int **)va1);
  _Unwind_Resume(a1);
}

void sub_18446061C(_Unwind_Exception *a1)
{
  CA::Transaction *v1;

  CA::Transaction::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t CA::Layer::invalidate_layout(uint64_t this)
{
  uint64_t **v1;

  v1 = *(uint64_t ***)(this + 72);
  if (v1)
  {
    while (1)
    {
      v1 = (uint64_t **)*v1;
      if (!v1)
        break;
      if (((_DWORD)v1[1] & 0xFFFFFF) == 0x1F7)
        return objc_msgSend(*(id *)(this + 16), "setSizeRequisition:", *MEMORY[0x1E0C9D820], *(double *)(MEMORY[0x1E0C9D820] + 8));
    }
  }
  return this;
}

CA::AttrList *CA::AttrList::set(CA::AttrList *this, const void *a2, int a3, unsigned __int8 *a4)
{
  int v6;
  CA::AttrList *v7;
  int v8;
  CA::AttrList *v9;
  void **v10;
  int v11;
  char v12;
  _QWORD *v13;
  void **v14;
  malloc_zone_t *v15;
  _DWORD *v16;
  malloc_zone_t *malloc_zone;
  unint64_t v18;
  _QWORD *v19;
  __int128 v20;
  const void *v21;
  const void *v22;
  uint64_t v23;
  void *v24;
  const void *v25;
  id v26;
  id v27;
  double v28;
  _OWORD *v29;
  __int128 v30;
  __int128 v31;
  _OWORD *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;

  v6 = (int)a2;
  v7 = this;
  v8 = *((_DWORD *)this + 2) & 7;
  if (v8)
  {
    do
    {
      v9 = (CA::AttrList *)CA::AttrList::copy_(v7);
      *((_QWORD *)v7 + 1) = *((_QWORD *)v7 + 1) & 0xFFFFFFFFFFFFFFF8 | (v8 - 1);
      v7 = v9;
      v8 = *((_DWORD *)v9 + 2) & 7;
    }
    while (v8);
  }
  else
  {
    v9 = this;
  }
  v10 = *(void ***)v9;
  if (!*(_QWORD *)v9)
  {
LABEL_14:
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v10 = (void **)malloc_type_zone_malloc(malloc_zone, 0x18uLL, 0x8BB15036uLL);
    *((_DWORD *)v10 + 2) = v6 & 0xFFFFFF;
    v10[2] = 0;
    *v10 = *(void **)v9;
    *(_QWORD *)v9 = v10;
    goto LABEL_15;
  }
  v11 = *((_DWORD *)v10 + 2);
  if ((v11 & 0xFFFFFF) != v6)
  {
    v12 = 0;
    v14 = *(void ***)v9;
    while (1)
    {
      v10 = (void **)*v14;
      if (!*v14)
        goto LABEL_14;
      v12 |= v11 < 0;
      v11 = *((_DWORD *)v10 + 2);
      v13 = v14;
      v14 = (void **)*v14;
      if ((v11 & 0xFFFFFF) == v6)
        goto LABEL_11;
    }
  }
  v12 = 0;
  v13 = v9;
LABEL_11:
  if ((v12 & 1) != 0 || v11 < 0)
  {
    v15 = (malloc_zone_t *)get_malloc_zone();
    v16 = malloc_type_zone_malloc(v15, 0x18uLL, 0x8BB15036uLL);
    v16[2] = v6 & 0xFFFFFF;
    *((_QWORD *)v16 + 2) = 0;
    *v13 = *v10;
    *(_QWORD *)v16 = *(_QWORD *)v9;
    *(_QWORD *)v9 = v16;
    CA::AttrList::splice_shared_node((uint64_t)v9, v10);
    v10 = (void **)v16;
  }
LABEL_15:
  if ((*((_BYTE *)v10 + 11) & 0x7F) != a3)
  {
    CA::AttrList::Node::free_memory((CA::AttrList::Node *)v10, a2);
    CA::AttrList::Node::alloc_memory(v10, a3);
  }
  switch(a3)
  {
    case 1:
      *(_QWORD *)v10[2] = *(_QWORD *)a4;
      return v9;
    case 2:
      v21 = *(const void **)a4;
      v22 = v10[2];
      if (v22 != v21)
      {
        if (v22)
          CA::Transaction::cf_release(v22, a2);
        if (v21)
          v23 = (uint64_t)CFRetain(v21);
        else
          v23 = 0;
        goto LABEL_55;
      }
      return v9;
    case 3:
      v24 = *(void **)a4;
      v25 = v10[2];
      if (v25 != v24)
      {
        if (v25)
          CA::Transaction::cf_release(v25, a2);
        v23 = CAValueCopyPointer(v24);
        goto LABEL_55;
      }
      return v9;
    case 4:
      X::WeakDetails::Ptr::set((id *)v10[2], *(id *)a4, 1);
      return v9;
    case 5:
      v26 = *(id *)a4;
      v27 = v10[2];
      if (v26 != v27)
      {
        if (v27)
          _Block_release(v27);
        if (v26)
        {
          v23 = (uint64_t)_Block_copy(v26);
LABEL_55:
          v10[2] = (void *)v23;
        }
        else
        {
          v10[2] = 0;
        }
      }
      return v9;
    case 6:
    case 8:
      v18 = *a4;
      goto LABEL_42;
    case 7:
      v18 = (char)*a4;
      goto LABEL_42;
    case 9:
      v18 = *(__int16 *)a4;
      goto LABEL_42;
    case 10:
      v18 = *(unsigned __int16 *)a4;
      goto LABEL_42;
    case 11:
      v18 = *(int *)a4;
      goto LABEL_42;
    case 12:
      v18 = *(unsigned int *)a4;
      goto LABEL_42;
    case 13:
    case 14:
    case 15:
    case 16:
      v18 = *(_QWORD *)a4;
LABEL_42:
      v10[2] = (void *)v18;
      return v9;
    case 17:
      v28 = *(float *)a4;
      goto LABEL_45;
    case 18:
      v28 = *(double *)a4;
LABEL_45:
      *((double *)v10 + 2) = v28;
      return v9;
    case 19:
    case 20:
      v19 = v10[2];
      v20 = *(_OWORD *)a4;
      goto LABEL_50;
    case 21:
      v29 = v10[2];
      v30 = *(_OWORD *)a4;
      v31 = *((_OWORD *)a4 + 1);
      goto LABEL_53;
    case 22:
      v32 = v10[2];
      v33 = *((_OWORD *)a4 + 1);
      v34 = *((_OWORD *)a4 + 2);
      v35 = *((_OWORD *)a4 + 3);
      *v32 = *(_OWORD *)a4;
      v32[1] = v33;
      v32[2] = v34;
      v32[3] = v35;
      v36 = *((_OWORD *)a4 + 5);
      v37 = *((_OWORD *)a4 + 6);
      v38 = *((_OWORD *)a4 + 7);
      v32[4] = *((_OWORD *)a4 + 4);
      v32[5] = v36;
      v32[6] = v37;
      v32[7] = v38;
      return v9;
    case 23:
      v29 = v10[2];
      v30 = *(_OWORD *)a4;
      v31 = *((_OWORD *)a4 + 1);
      v39 = *((_OWORD *)a4 + 2);
      goto LABEL_52;
    case 24:
      v19 = v10[2];
      v20 = *(_OWORD *)a4;
      v19[2] = *((_QWORD *)a4 + 2);
LABEL_50:
      *(_OWORD *)v19 = v20;
      break;
    case 25:
      v29 = v10[2];
      v30 = *(_OWORD *)a4;
      v31 = *((_OWORD *)a4 + 1);
      v39 = *((_OWORD *)a4 + 2);
      v29[3] = *((_OWORD *)a4 + 3);
LABEL_52:
      v29[2] = v39;
LABEL_53:
      *v29 = v30;
      v29[1] = v31;
      break;
    default:
      return v9;
  }
  return v9;
}

void CA::AttrList::Node::free_memory(CA::AttrList::Node *this, const void *a2)
{
  _BYTE *v3;
  malloc_zone_t *malloc_zone;
  const void *v5;
  const void *v6;

  switch(*((_BYTE *)this + 11) & 0x7F)
  {
    case 1:
      v3 = (_BYTE *)*((_QWORD *)this + 2);
      if (v3)
        goto LABEL_3;
      break;
    case 2:
    case 3:
      v5 = (const void *)*((_QWORD *)this + 2);
      if (v5)
        CA::Transaction::cf_release(v5, a2);
      break;
    case 4:
      v3 = (_BYTE *)*((_QWORD *)this + 2);
      if (v3)
      {
        if (*(_QWORD *)v3)
        {
          if (v3[8])
            objc_storeWeakOrNil(*((id **)this + 2), 0);
          else
            *(_QWORD *)v3 = 0;
        }
        goto LABEL_3;
      }
      break;
    case 5:
      v6 = (const void *)*((_QWORD *)this + 2);
      if (v6)
        _Block_release(v6);
      break;
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
      v3 = (_BYTE *)*((_QWORD *)this + 2);
LABEL_3:
      malloc_zone = (malloc_zone_t *)get_malloc_zone();
      malloc_zone_free(malloc_zone, v3);
      break;
    default:
      break;
  }
  *((_DWORD *)this + 2) &= 0x80FFFFFF;
}

_BYTE *CA::AttrList::Node::alloc_memory(_BYTE *result, int a2)
{
  char v2;
  _BYTE *v3;
  malloc_zone_t *malloc_zone;
  size_t v5;
  malloc_zone_t *v6;
  malloc_zone_t *v7;

  v2 = a2;
  v3 = result;
  switch(a2)
  {
    case 19:
    case 20:
      malloc_zone = (malloc_zone_t *)get_malloc_zone();
      v5 = 16;
      goto LABEL_12;
    case 21:
      malloc_zone = (malloc_zone_t *)get_malloc_zone();
      v5 = 32;
      goto LABEL_12;
    case 22:
      malloc_zone = (malloc_zone_t *)get_malloc_zone();
      v5 = 128;
      goto LABEL_12;
    case 23:
      malloc_zone = (malloc_zone_t *)get_malloc_zone();
      v5 = 48;
      goto LABEL_12;
    case 24:
      malloc_zone = (malloc_zone_t *)get_malloc_zone();
      v5 = 24;
      goto LABEL_12;
    case 25:
      malloc_zone = (malloc_zone_t *)get_malloc_zone();
      v5 = 64;
LABEL_12:
      result = malloc_type_zone_malloc(malloc_zone, v5, 0x8BB15036uLL);
      goto LABEL_13;
    default:
      if (a2 == 4)
      {
        v7 = (malloc_zone_t *)get_malloc_zone();
        result = malloc_type_zone_malloc(v7, 0x10uLL, 0x8BB15036uLL);
        if (result)
        {
          *(_QWORD *)result = 0;
          result[8] = 0;
        }
      }
      else
      {
        if (a2 != 1)
          goto LABEL_14;
        v6 = (malloc_zone_t *)get_malloc_zone();
        result = malloc_type_zone_malloc(v6, 8uLL, 0x8BB15036uLL);
        if (result)
          *(_QWORD *)result = 0;
      }
LABEL_13:
      *((_QWORD *)v3 + 2) = result;
LABEL_14:
      *((_DWORD *)v3 + 2) = *((_DWORD *)v3 + 2) & 0x80FFFFFF | ((v2 & 0x7F) << 24);
      return result;
  }
}

uint64_t CA::Layer::layout_is_active(CA::Layer *this, CA::Transaction *a2, int a3)
{
  uint64_t v6;
  char *v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t result;
  unsigned int **v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  malloc_zone_t *malloc_zone;
  unsigned int v18;
  int v19;
  malloc_zone_t *v20;
  unsigned int *v21;

  v6 = *((unsigned int *)a2 + 24);
  if ((v6 & 0x80000000) != 0 || (v7 = (char *)this + 4 * v6, !*((_DWORD *)v7 + 68)))
  {
    v8 = CA::Layer::thread_flags_(this, a2);
    if (!a3)
      goto LABEL_7;
  }
  else
  {
    v8 = v7 + 272;
    if (!a3)
      goto LABEL_7;
  }
  if ((*(_BYTE *)v8 & 0x20) != 0)
    return 1;
LABEL_7:
  v9 = *((_QWORD *)a2 + 9);
  if (v9)
  {
    if (*(_BYTE *)(v9 + 32))
    {
      if ((*(_BYTE *)v8 & 0x80) != 0)
        return 1;
    }
    else
    {
      while (1)
      {
        v11 = *(unsigned int ***)(v9 + 16);
        if (v11)
          break;
LABEL_16:
        result = 0;
        v9 = *(_QWORD *)(v9 + 8);
        if (!v9)
          return result;
      }
      v12 = *(unsigned int **)(v9 + 24);
      while (*v11 != (unsigned int *)this)
      {
        if (*v11 != v12)
        {
          v11 = (unsigned int **)v11[1];
          if (v11)
            continue;
        }
        goto LABEL_16;
      }
LABEL_18:
      v13 = *v12;
      if (*v12)
      {
        do
        {
          v14 = __ldaxr(v12);
          if (v14 != v13)
          {
            __clrex();
            goto LABEL_18;
          }
        }
        while (__stlxr(v13 + 1, v12));
        while (v12 != (unsigned int *)this)
        {
          v21 = CA::Layer::retain_parent((CA::Layer *)v12, a2);
LABEL_25:
          v15 = *v12;
          if (*v12)
          {
            do
            {
              v16 = __ldaxr(v12);
              if (v16 != v15)
              {
                __clrex();
                goto LABEL_25;
              }
            }
            while (__stlxr(v15 - 1, v12));
            if (v15 == 1)
            {
              CA::Layer::destroy((CA::Layer *)v12);
              CA::Layer::~Layer((CA::AttrList **)v12);
              malloc_zone = (malloc_zone_t *)get_malloc_zone();
              malloc_zone_free(malloc_zone, v12);
            }
          }
          v12 = v21;
          if (!v21)
            return 0;
        }
LABEL_38:
        v19 = *(_DWORD *)this;
        if (*(_DWORD *)this)
        {
          do
          {
            v18 = __ldaxr((unsigned int *)this);
            if (v18 != v19)
            {
              __clrex();
              goto LABEL_38;
            }
          }
          while (__stlxr(v19 - 1, (unsigned int *)this));
          if (v19 == 1)
          {
            CA::Layer::destroy(this);
            CA::Layer::~Layer((CA::AttrList **)this);
            v20 = (malloc_zone_t *)get_malloc_zone();
            malloc_zone_free(v20, this);
          }
        }
        return 1;
      }
    }
  }
  return 0;
}

void sub_184460D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int *a9)
{
  X::Ref<CA::Layer>::~Ref(&a9);
  _Unwind_Resume(a1);
}

void CA::Layer::mark_visible(CA::Layer *this, CA::Transaction *a2, _BOOL8 a3)
{
  int v3;
  unsigned int v7;
  int v8;
  void *v9;
  BOOL v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  malloc_zone_t *malloc_zone;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const void *v23;
  uint64_t v24;
  CFTypeID v25;
  uint64_t v26;
  __int16 v27;
  char v28;
  CGColorSpace *v29;
  const __CFString *v30;
  char *v31;
  void *v32;

  v3 = *((_DWORD *)this + 13);
  if (a3 == (v3 & 0x100000u) >> 20)
    return;
  v7 = v3 & 0xFFEFFFFF;
  if (a3)
    v8 = 0x100000;
  else
    v8 = 0;
  *((_DWORD *)this + 13) = v7 | v8;
  if (*((_QWORD *)this + 35))
  {
    if (a3)
    {
      if (non_visible_animating_layers)
        CFSetRemoveValue((CFMutableSetRef)non_visible_animating_layers, this);
    }
    else
    {
      add_non_visible_animating_layer(this);
    }
    CA::Layer::mark(this, a2, 2099208, 2064);
    if (!**((_DWORD **)a2 + 13))
      CA::Transaction::ensure_implicit(a2, 1);
  }
  v9 = (void *)*((_QWORD *)this + 2);
  if (objc_msgSend(v9, "_defersDidBecomeVisiblePostCommit"))
  {
    v11 = *((_QWORD *)a2 + 10);
    if (v11)
    {
      while (*(CA::Layer **)v11 != this)
      {
        v11 = *(_QWORD *)(v11 + 8);
        if (!v11)
          goto LABEL_21;
      }
    }
    else
    {
LABEL_21:
      while (1)
      {
        v13 = *(_DWORD *)this;
        if (!*(_DWORD *)this)
          break;
        while (1)
        {
          v12 = __ldaxr((unsigned int *)this);
          if (v12 != v13)
            break;
          if (!__stlxr(v13 + 1, (unsigned int *)this))
            goto LABEL_22;
        }
        __clrex();
      }
LABEL_22:
      v14 = *((_QWORD *)a2 + 10);
      malloc_zone = (malloc_zone_t *)get_malloc_zone();
      v16 = malloc_type_zone_malloc(malloc_zone, 0x10uLL, 0x8BB15036uLL);
      *v16 = this;
      v16[1] = v14;
      *((_QWORD *)a2 + 10) = v16;
    }
  }
  else
  {
    objc_msgSend(v9, "layerDidBecomeVisible:", a3);
  }
  v17 = (_QWORD *)*((_QWORD *)this + 3);
  if (v17)
  {
    v18 = v17 + 1;
    v19 = v17[2];
    if (v19 == 1)
    {
      if (!v17[3])
      {
        do
        {
LABEL_30:
          v20 = *v18++;
          CA::Layer::mark_visible(*(CA::Layer **)(v20 + 16), a2, a3, v10);
          --v19;
        }
        while (v19);
        goto LABEL_31;
      }
    }
    else if (!v19)
    {
      goto LABEL_31;
    }
    v18 = (uint64_t *)*v18;
    goto LABEL_30;
  }
LABEL_31:
  v21 = *((_QWORD *)this + 4);
  if (v21)
    CA::Layer::mark_visible(*(CA::Layer **)(v21 + 16), a2, a3, v10);
  v22 = (void *)*((_QWORD *)this + 2);
  if (v22)
  {
    v23 = (const void *)objc_msgSend(*((id *)this + 2), "contents");
    if (v23)
    {
      v24 = (uint64_t)v23;
      v25 = CFGetTypeID(v23);
      v26 = CABackingStoreGetTypeID::type;
      if (!CABackingStoreGetTypeID::type)
      {
        v26 = _CFRuntimeRegisterClass();
        CABackingStoreGetTypeID::type = v26;
      }
      if (v25 == v26)
      {
        v27 = *(_WORD *)(v24 + 492);
        v28 = CABackingStoreSetVolatile(v24, a3 ^ 1);
        if (!a3 || (v28 & 1) != 0)
        {
          if (!a3 || (v27 & 0x100) != 0)
            CA::Layer::mark(this, a2, 1032, 16);
        }
        else
        {
          objc_msgSend(v22, "setNeedsDisplay");
        }
        if (a3)
        {
          v29 = (CGColorSpace *)objc_msgSend(*((id *)this + 2), "_retainColorSpace");
          if (CABackingStoreSetColorSpace(v24, v29))
            objc_msgSend(v22, "setNeedsDisplay");
          CGColorSpaceRelease(v29);
        }
      }
      else if (v25 == CGImageGetTypeID() && a3)
      {
        objc_msgSend(v22, "setContentsChanged");
      }
    }
  }
  if (a3)
    v30 = CFSTR("onOrderIn");
  else
    v30 = CFSTR("onOrderOut");
  v31 = (char *)a2 + 88;
  while (1)
  {
    v31 = *(char **)v31;
    if (!v31)
      break;
    if ((v31[28] & 1) != 0)
    {
      if ((v31[24] & 1) != 0)
        return;
      break;
    }
  }
  v32 = (void *)objc_msgSend(v9, "actionForKey:", v30);
  if (v32)
    objc_msgSend(v32, "runActionForKey:object:arguments:", v30, v9, 0);
}

void CA::Layer::begin_change(CA::Layer *this, CA::Transaction *a2, void *a3, objc_object *a4, objc_object **a5)
{
  void *v9;
  char *v10;
  objc_class *v11;
  NSObject *v12;
  uint64_t v13;
  Class v14;
  CA::Transaction *v15;
  CA::Layer *v16;
  uint64_t v17;
  Class isa;
  uint8_t buf[4];
  CA::Transaction *v20;
  __int16 v21;
  CA::Layer *v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  Class v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (!**((_DWORD **)a2 + 13))
    CA::Transaction::ensure_implicit(a2, 1);
  if (byte_1ECDC6A6F)
  {
    if (x_log_hook_p())
    {
      v17 = objc_msgSend(a3, "UTF8String");
      isa = a4->isa;
      v15 = a2;
      v16 = this;
      x_log_();
    }
    else
    {
      v12 = x_log_category_api;
      if (os_log_type_enabled((os_log_t)x_log_category_api, OS_LOG_TYPE_DEFAULT))
      {
        v13 = objc_msgSend(a3, "UTF8String");
        v14 = a4->isa;
        *(_DWORD *)buf = 134218754;
        v20 = a2;
        v21 = 2048;
        v22 = this;
        v23 = 2080;
        v24 = v13;
        v25 = 2048;
        v26 = v14;
        _os_log_impl(&dword_184457000, v12, OS_LOG_TYPE_DEFAULT, "Began transaction (%p) change on layer %p for %s, %p", buf, 0x2Au);
      }
    }
  }
  if ((*((_DWORD *)this + 1) & 0x8000) != 0)
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("CALayerReadOnly"), CFSTR("attempting to modify read-only layer %@"), a5, *((_QWORD *)this + 2));
  if ((*((_DWORD *)this + 1) & 0x60000) != 0)
  {
    a4->isa = 0;
  }
  else
  {
    v9 = (void *)*((_QWORD *)this + 2);
    v10 = (char *)a2 + 88;
    do
    {
      v10 = *(char **)v10;
      if (!v10)
        goto LABEL_12;
    }
    while ((v10[28] & 1) == 0);
    if ((v10[24] & 1) == 0)
    {
LABEL_12:
      v11 = (objc_class *)objc_msgSend(v9, "actionForKey:", a3, a4, a5, v15, v16, v17, isa);
      goto LABEL_14;
    }
    v11 = 0;
LABEL_14:
    a4->isa = v11;
    objc_msgSend(v9, "willChangeValueForKey:", a3, v15);
  }
}

void sub_184461408(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void CA::Transaction::release_object(CA::Transaction *this, CFTypeRef cf)
{
  uint64_t v4;
  malloc_zone_t *malloc_zone;
  _QWORD *v6;

  if (*((_DWORD *)this + 25))
  {
    v4 = *((_QWORD *)this + 4);
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v6 = malloc_type_zone_malloc(malloc_zone, 0x10uLL, 0x8BB15036uLL);
    *v6 = cf;
    v6[1] = v4;
    *((_QWORD *)this + 4) = v6;
  }
  else
  {
    CFRelease(cf);
  }
}

CALayer *CA::Layer::superlayer(CA::Layer *this, CA::Transaction *a2)
{
  int v4;
  int v5;
  CA::Layer *v6;
  CA::Layer *v7;
  CALayer *v8;

  v4 = *((_DWORD *)this + 1) & 0x60000;
  v5 = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v5 + 1;
  if (!v5)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Transaction::transaction_lock);
    if (v4)
      goto LABEL_3;
LABEL_8:
    v7 = (CA::Layer *)*((_QWORD *)this + 1);
    if (v7)
      goto LABEL_9;
LABEL_10:
    v8 = 0;
    goto LABEL_11;
  }
  if (!v4)
    goto LABEL_8;
LABEL_3:
  v6 = CA::Layer::model_layer(this, a2);
  if (!v6)
    goto LABEL_10;
  v7 = (CA::Layer *)*((_QWORD *)v6 + 1);
  if (!v7)
    goto LABEL_10;
  if (v4 != 0x20000)
  {
LABEL_9:
    v8 = (CALayer *)*((_QWORD *)v7 + 2);
    goto LABEL_11;
  }
  v8 = CA::Layer::presentation_layer(v7, (CA::Transaction::Shared **)a2);
LABEL_11:
  CA::Transaction::unlock(a2);
  return v8;
}

void sub_184461634(_Unwind_Exception *a1)
{
  CA::Transaction *v1;

  CA::Transaction::unlock(v1);
  _Unwind_Resume(a1);
}

_DWORD *CA::Layer::thread_flags_(CA::Layer *this, CA::Transaction *a2)
{
  int v4;
  uint64_t v5;
  char *v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  int v28;
  unsigned int *v29;
  CA::Layer *v30;
  uint64_t v31;
  char *v32;
  int v33;
  int *v34;
  int v35;
  unsigned int v36;
  malloc_zone_t *malloc_zone;
  unsigned int v38;
  int v39;
  malloc_zone_t *v40;
  unsigned int *v42;

  if (!**((_DWORD **)a2 + 13))
    CA::Transaction::ensure_implicit(a2, 1);
  v4 = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v4 + 1;
  if (!v4)
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Transaction::transaction_lock);
  v5 = *((unsigned int *)a2 + 24);
  if ((v5 & 0x80000000) != 0)
  {
    v8 = x_hash_table_lookup(*(_QWORD *)a2, (uint64_t)this, 0);
    if (v8)
    {
      v7 = (_DWORD *)v8;
      goto LABEL_10;
    }
  }
  else
  {
    v6 = (char *)this + 4 * v5;
    if (*((_DWORD *)v6 + 68))
    {
      v7 = v6 + 272;
LABEL_10:
      CA::Transaction::unlock(a2);
      return v7;
    }
  }
  v9 = *((_QWORD *)this + 2);
  if (v9 && (v10 = *((_QWORD *)a2 + 13), CALayerRetain(v9)))
  {
    while (1)
    {
      v11 = *(_DWORD *)this;
      if (!*(_DWORD *)this)
        break;
      while (1)
      {
        v12 = __ldaxr((unsigned int *)this);
        if (v12 != v11)
          break;
        if (!__stlxr(v11 + 1, (unsigned int *)this))
          goto LABEL_19;
      }
      __clrex();
    }
LABEL_19:
    v13 = *((unsigned int *)a2 + 24);
    if ((v13 & 0x80000000) != 0)
    {
      v14 = *(uint64_t **)(v10 + 128);
      v15 = v14[2];
      v16 = v15 >= 8;
      v17 = v15 - 8;
      if (v16)
      {
        v7 = (_DWORD *)v14[1];
        v14[1] = (uint64_t)(v7 + 2);
        v14[2] = v17;
      }
      else
      {
        v7 = (_DWORD *)x_heap_malloc_small_(v14, 8uLL);
      }
      hash_table_modify(*(int **)a2, (uint64_t)this, (uint64_t)v7, 0);
    }
    else
    {
      v7 = (_DWORD *)((char *)this + 4 * v13 + 272);
    }
    v18 = *(uint64_t **)(v10 + 128);
    v19 = v18[2];
    v20 = v19 - 16;
    if (v19 >= 0x10)
    {
      v21 = (_QWORD *)v18[1];
      v18[1] = (uint64_t)(v21 + 2);
      v18[2] = v20;
    }
    else
    {
      v21 = (_QWORD *)x_heap_malloc_small_(v18, 0x10uLL);
    }
    v22 = *(_QWORD *)(v10 + 208);
    *v21 = this;
    v21[1] = v22;
    *(_QWORD *)(v10 + 208) = v21;
    CA::Transaction::unlock(a2);
    v23 = (unsigned int *)((char *)this + 4);
    if ((*((_BYTE *)a2 + 116) & 4) != 0)
    {
      *v7 = *v23 & 0xFBDFF480 | 1;
    }
    else
    {
      while (1)
      {
        v24 = *v23;
        v25 = *v23 & 0xFFFFFED7;
        if ((v24 & 0xFFFFFED7) == v24)
          break;
        while (1)
        {
          v26 = __ldaxr(v23);
          if (v26 != v24)
            break;
          if (!__stlxr(v25, v23))
            goto LABEL_35;
        }
        __clrex();
      }
LABEL_35:
      *v7 = v24 | 1;
      if ((v24 & 0x18) != 0)
        v27 = (4 * ((v24 & 6) != 0)) | 0x10;
      else
        v27 = 4 * ((v24 & 6) != 0);
      if ((v24 & 0x60) != 0)
        v27 |= 0x40u;
      if ((v24 & 0x300) != 0)
        v28 = v27 | 0x200;
      else
        v28 = v27;
      v29 = CA::Layer::retain_parent(this, a2);
      if (v29)
      {
        v30 = (CA::Layer *)v29;
        while (1)
        {
          v31 = *((unsigned int *)a2 + 24);
          if ((v31 & 0x80000000) != 0 || (v32 = (char *)v30 + 4 * v31, (v33 = *((_DWORD *)v32 + 68)) == 0))
          {
            v34 = (int *)CA::Layer::thread_flags_(v30, a2);
            v33 = *v34;
          }
          else
          {
            v34 = (int *)(v32 + 272);
          }
          if ((v28 & ~v33) == 0)
            break;
          *v34 = v33 | v28;
          v42 = CA::Layer::retain_parent(v30, a2);
LABEL_51:
          v35 = *(_DWORD *)v30;
          if (*(_DWORD *)v30)
          {
            do
            {
              v36 = __ldaxr((unsigned int *)v30);
              if (v36 != v35)
              {
                __clrex();
                goto LABEL_51;
              }
            }
            while (__stlxr(v35 - 1, (unsigned int *)v30));
            if (v35 == 1)
            {
              CA::Layer::destroy(v30);
              CA::Layer::~Layer((CA::AttrList **)v30);
              malloc_zone = (malloc_zone_t *)get_malloc_zone();
              malloc_zone_free(malloc_zone, v30);
            }
          }
          v30 = (CA::Layer *)v42;
          if (!v42)
            return v7;
        }
LABEL_64:
        v39 = *(_DWORD *)v30;
        if (*(_DWORD *)v30)
        {
          do
          {
            v38 = __ldaxr((unsigned int *)v30);
            if (v38 != v39)
            {
              __clrex();
              goto LABEL_64;
            }
          }
          while (__stlxr(v39 - 1, (unsigned int *)v30));
          if (v39 == 1)
          {
            CA::Layer::destroy(v30);
            CA::Layer::~Layer((CA::AttrList **)v30);
            v40 = (malloc_zone_t *)get_malloc_zone();
            malloc_zone_free(v40, v30);
          }
        }
      }
    }
  }
  else
  {
    CA::Transaction::unlock(a2);
    return (_DWORD *)((char *)this + 4);
  }
  return v7;
}

void sub_1844619A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int *a9)
{
  X::Ref<CA::Layer>::~Ref(&a9);
  _Unwind_Resume(a1);
}

unsigned int *CA::Layer::retain_parent(CA::Layer *this, CA::Transaction *a2)
{
  int v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v4 = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v4 + 1;
  if (!v4)
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Transaction::transaction_lock);
  v5 = (unsigned int *)*((_QWORD *)this + 1);
  if (v5)
  {
    while (1)
    {
      v6 = *v5;
      if (!*v5)
        break;
      while (1)
      {
        v7 = __ldaxr(v5);
        if (v7 != v6)
          break;
        if (!__stlxr(v6 + 1, v5))
          goto LABEL_10;
      }
      __clrex();
    }
    v5 = 0;
  }
LABEL_10:
  CA::Transaction::unlock(a2);
  return v5;
}

CA::Transaction *CALayerGetSuperlayer(CA::Transaction *a1)
{
  CA::Transaction *v1;
  CA::Transaction *v2;
  int v3;
  uint64_t v4;

  v1 = a1;
  if (a1)
  {
    v2 = *(CA::Transaction **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 576);
    if (!v2)
      v2 = (CA::Transaction *)CA::Transaction::create(a1);
    v3 = *((_DWORD *)v2 + 25);
    *((_DWORD *)v2 + 25) = v3 + 1;
    if (!v3)
      os_unfair_lock_lock((os_unfair_lock_t)&CA::Transaction::transaction_lock);
    v4 = *(_QWORD *)(*((_QWORD *)v1 + 2) + 8);
    if (v4)
      v1 = *(CA::Transaction **)(v4 + 16);
    else
      v1 = 0;
    CA::Transaction::unlock(v2);
  }
  return v1;
}

void CA::Transaction::unlock(CA::Transaction *this)
{
  int v1;
  int v3;
  _QWORD *v4;

  v1 = *((_DWORD *)this + 25);
  if (v1)
  {
    v3 = v1 - 1;
    *((_DWORD *)this + 25) = v3;
    if (!v3)
    {
      os_unfair_lock_unlock((os_unfair_lock_t)&CA::Transaction::transaction_lock);
      v4 = (_QWORD *)*((_QWORD *)this + 4);
      if (v4)
      {
        *((_QWORD *)this + 4) = 0;
        CA::release_objects(v4);
      }
    }
  }
}

uint64_t CALayerRetain(uint64_t a1)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  v1 = a1;
  v2 = (unsigned int *)(a1 + 8);
LABEL_2:
  v3 = *v2;
  if (*v2 - 1 > 0xFFFFFFFD)
    return 0;
  do
  {
    v4 = __ldaxr(v2);
    if (v4 != v3)
    {
      __clrex();
      goto LABEL_2;
    }
  }
  while (__stlxr(v3 + 1, v2));
  if (*MEMORY[0x1E0C9A980])
    NSRecordAllocationEvent();
  return v1;
}

void sub_184461D34(_Unwind_Exception *a1)
{
  CA::Transaction *v1;

  CA::Transaction::unlock(v1);
  _Unwind_Resume(a1);
}

void CA::Transaction::cf_release(CFTypeRef cf, const void *a2)
{
  CA::Transaction *v3;

  v3 = *(CA::Transaction **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 576);
  if (v3)
    CA::Transaction::release_object(v3, cf);
  else
    CFRelease(cf);
}

uint64_t CAValueCopyPointer(void *a1)
{
  if ((objc_opt_respondsToSelector() & 1) != 0)
    return objc_msgSend(a1, "copy");
  if (a1)
    CFRetain(a1);
  return (uint64_t)a1;
}

void CA::release_objects(_QWORD *a1)
{
  _QWORD *v1;
  CFTypeRef *v2;
  _QWORD *v3;

  v1 = a1;
  v2 = (CFTypeRef *)a1;
  do
  {
    CFRelease(*v2);
    v2 = (CFTypeRef *)v2[1];
  }
  while (v2);
  if (v1)
  {
    do
    {
      v3 = (_QWORD *)v1[1];
      free(v1);
      v1 = v3;
    }
    while (v3);
  }
}

uint64_t CA::AttrList::splice_shared_node(uint64_t result, _DWORD *a2)
{
  int v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = a2[2];
  if (v2 < 0)
  {
    a2[2] = v2 & 0x7FFFFFFF;
    if (*(_QWORD *)a2)
    {
      *(_DWORD *)(*(_QWORD *)a2 + 8) |= 0x80000000;
    }
    else
    {
      v4 = *(_QWORD *)(result + 8);
      *(_QWORD *)(result + 8) = v4 & 7;
      *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFF8) + 8) &= 7uLL;
    }
  }
  else
  {
    v3 = (_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF8);
    *(_QWORD *)a2 = *v3;
    *v3 = a2;
  }
  return result;
}

void sub_184462000(_Unwind_Exception *a1)
{
  CA::Transaction *v1;

  CA::Transaction::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1844622E4(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(&_all_backdrops_lock);
  _Unwind_Resume(a1);
}

uint64_t CABackingStoreInvalidate(uint64_t a1, uint64_t a2)
{
  pthread_mutex_t *v4;
  __int16 v5;

  v4 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  if (a2)
  {
    if (!*(_QWORD *)(a1 + 440))
      *(_QWORD *)(a1 + 440) = CGSBoundingShapeCreate();
    CGSBoundingShapeAddRect();
    v5 = *(_WORD *)(a1 + 492) & 0xFDFF;
  }
  else
  {
    v5 = *(_WORD *)(a1 + 492) & 0xF9FF | 0x400;
  }
  *(_WORD *)(a1 + 492) = v5;
  return pthread_mutex_unlock(v4);
}

uint64_t CABackingStoreSetVolatile(uint64_t a1, uint64_t a2)
{
  pthread_mutex_t *v4;
  __int16 v5;
  __int16 v6;
  __int16 v7;
  uint64_t i;
  __int16 v9;
  uint64_t v10;
  CA::Render::Shmem *v12;
  os_unfair_lock_s *v13;

  v4 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  v5 = *(_WORD *)(a1 + 492);
  if (((((v5 & 0x100) == 0) ^ a2) & 1) != 0)
    goto LABEL_11;
  if ((_DWORD)a2)
    v6 = 256;
  else
    v6 = 0;
  v7 = v5 & 0xFEFF | v6;
  *(_WORD *)(a1 + 492) = v7;
  if ((_DWORD)a2)
  {
    for (i = 0; i != 216; i += 72)
      *(_QWORD *)(a1 + 232 + i) = 0;
    *(_QWORD *)(a1 + 472) = 0;
    v9 = v7 & 0xFF00 | 6;
    goto LABEL_9;
  }
  v10 = *(_QWORD *)(a1 + 400);
  if (*(_BYTE *)(v10 + 65))
  {
LABEL_11:
    a2 = 1;
    goto LABEL_12;
  }
  v12 = *(CA::Render::Shmem **)(v10 + 16);
  if (v12)
  {
    if ((CA::Render::Shmem::set_volatile(v12, 0, 0) & 1) != 0)
      goto LABEL_11;
  }
  else
  {
    v13 = *(os_unfair_lock_s **)(v10 + 24);
    if (!v13)
    {
      a2 = 0;
      goto LABEL_12;
    }
    if ((CA::CG::AccelDrawable::set_volatile(v13, 0) & 1) != 0)
      goto LABEL_11;
  }
  CABackingStoreReleaseImages((CABackingStore *)a1);
  CABackingStoreDeleteBuffer((_QWORD *)v10);
  v9 = *(_WORD *)(a1 + 492) & 0xF9FF | 0x400;
LABEL_9:
  *(_WORD *)(a1 + 492) = v9;
LABEL_12:
  pthread_mutex_unlock(v4);
  return a2;
}

CFTypeID CA::Layer::prevent_subtextures(CFTypeID this)
{
  CFTypeID v1;
  CFTypeID v2;

  if ((*(_BYTE *)(this + 54) & 0x40) == 0)
  {
    v1 = this;
    this = objc_msgSend(*(id *)(this + 16), "contents");
    if (this)
    {
      v2 = CFGetTypeID((CFTypeRef)this);
      this = CGImageGetTypeID();
      if (v2 == this)
        return objc_msgSend(*(id *)(v1 + 16), "setContentsChanged");
    }
  }
  return this;
}

void CA::Render::Updater::prepare_transform_layers(uint64_t a1, CA::Render::LayerNode *a2)
{
  CA::Render::LayerNode *v2;
  uint64_t v5;
  CA::Render::LayerNode *v6;
  int32x2_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int32x2_t *v13;
  int32x2_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;

  v2 = (CA::Render::LayerNode *)*((_QWORD *)a2 + 1);
  if (v2 != a2)
  {
    do
    {
      v5 = *(_QWORD *)v2;
      v6 = (CA::Render::LayerNode *)*((_QWORD *)v2 + 1);
      *(_QWORD *)(v5 + 8) = v6;
      *(_QWORD *)v6 = v5;
      *(_QWORD *)v2 = v2;
      *((_QWORD *)v2 + 1) = v2;
      if ((*(_DWORD *)(*(_QWORD *)a1 + 1064) & 4) == 0 && (*((_BYTE *)v2 + 27) & 4) == 0)
      {
        v7 = *(int32x2_t **)(*((_QWORD *)v2 + 4) + 144);
        if (v7)
        {
          v8 = (unint64_t)v7[12];
          if ((v8 & 0x3C) != 0)
          {
            CA::Render::Updater::update_handle(*(CA::Render::Updater **)a1, v7, *(CA::Render::Handle **)(a1 + 16), (CA::Render::Context *)*(unsigned int *)(a1 + 8));
            v9 = *((_QWORD *)v2 + 4);
            v10 = *(_QWORD *)(v9 + 104);
            if ((*(_BYTE *)(v9 + 13) & 0x20) != 0)
            {
              if (v10)
              {
                v14 = *(int32x2_t **)(v10 + 144);
                if (v14)
                  CA::BoundsImpl::Union(v7 + 14, v14[14], v14[15]);
              }
            }
            else if (v10)
            {
              v11 = *(unsigned int *)(v10 + 16);
              if ((_DWORD)v11)
              {
                v12 = v10 + 24;
                do
                {
                  if (*(_QWORD *)v12)
                  {
                    v13 = *(int32x2_t **)(*(_QWORD *)v12 + 144);
                    if (v13)
                      CA::BoundsImpl::Union(v7 + 14, v13[14], v13[15]);
                  }
                  v12 += 8;
                  --v11;
                }
                while (v11);
              }
            }
            v8 = (unint64_t)v7[12];
            v15 = v8 | 4;
            if ((v8 & 0x300) == 0)
              v15 = (uint64_t)v7[12];
            v16 = *(_QWORD *)&v7[12] & 0x300 | v15 & 0x100;
            v17 = v15 | ((unint64_t)(v15 & 0x100) >> 5);
            if (v16)
              v8 = v17;
            v7[11] = 0;
          }
          v7[12] = (int32x2_t)(v8 & 0xFFFFFFFFFFFFFFFDLL);
        }
      }
      *((_QWORD *)v2 + 11) = 0;
      v18 = (unsigned int *)((char *)v2 + 16);
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
        CA::Render::LayerNode::delete_node(v2, a2);
      v2 = v6;
    }
    while (v6 != a2);
  }
}

void CA::Render::Updater::update_handle(CA::Render::Updater *this, int32x2_t *a2, CA::Render::Handle *a3, CA::Render::Context *a4)
{
  __int32 v4;
  int32x2_t v6;

  if (a2[10].i32[0] != (_DWORD)a4)
  {
    v4 = (int)a4;
    v6 = a2[12];
    if ((v6.i8[0] & 1) != 0)
    {
      a2[12] = (int32x2_t)(*(_QWORD *)&v6 & 0xFFFFFFFFFFFFFFFELL);
      CA::Render::Context::invalidate(a3, a2 + 14, a3);
      CA::Render::Update::invalidate_backdrops(this, (const CA::Bounds *)&a2[14], 0, 0xFFFFFFFF);
      v6 = a2[12];
    }
    a2[10].i32[0] = v4;
    a2[12] = (int32x2_t)(*(_QWORD *)&v6 & 0xFBF83E000E3FFF83);
    a2[13] = v6;
    a2[14] = 0;
    a2[15] = 0;
  }
}

void CA::Render::LayerNode::delete_node(CA::Render::LayerNode *this, CA::Render::LayerNode *a2)
{
  CA::Render::LayerNode *v2;
  _QWORD *v3;
  CA::Render::LayerNode *v4;
  CA::Render::LayerNode *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  CA::Shape *v24;
  CA::Shape *v25;
  CA::Shape *v26;
  CA::Shape *v27;
  _QWORD *v28;
  _QWORD *v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  _QWORD *v47;
  _QWORD *v48;
  CA::Render::LayerNode *v49;
  __int128 v50;
  unint64_t v51;
  malloc_zone_t *malloc_zone;
  uint64_t v53;
  _QWORD *v54;

  v2 = this;
  v3 = 0;
  v4 = 0;
  *((_QWORD *)this + 11) = 0;
  do
  {
    v5 = v2;
    v6 = (unsigned int *)*((_QWORD *)v2 + 11);
    v7 = (unsigned int *)*((_QWORD *)v2 + 13);
    if (v7 != (unsigned int *)((char *)v2 + 96))
    {
      do
      {
        v8 = (unsigned int *)*((_QWORD *)v7 + 1);
        if (v8 == v7)
          break;
        *((_QWORD *)v7 + 11) = 0;
        v9 = *(_QWORD *)v7;
        *(_QWORD *)(v9 + 8) = v8;
        *(_QWORD *)v8 = v9;
        *(_QWORD *)v7 = v7;
        *((_QWORD *)v7 + 1) = v7;
        v10 = v7 + 4;
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
        {
          *((_QWORD *)v7 + 11) = v6;
          v6 = v7;
        }
        v7 = v8;
      }
      while (v8 != (unsigned int *)((char *)v2 + 96));
    }
    v13 = (unsigned int *)*((_QWORD *)v2 + 16);
    if (!v13)
      goto LABEL_14;
    *((_QWORD *)v13 + 11) = 0;
    v14 = v13 + 4;
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (v16)
LABEL_14:
      v13 = v6;
    else
      *((_QWORD *)v13 + 11) = v6;
    v2 = (CA::Render::LayerNode *)*((_QWORD *)v2 + 17);
    if (!v2)
      goto LABEL_20;
    *((_QWORD *)v2 + 11) = 0;
    v17 = (unsigned int *)((char *)v2 + 16);
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (v19)
LABEL_20:
      v2 = (CA::Render::LayerNode *)v13;
    else
      *((_QWORD *)v2 + 11) = v13;
    v20 = (unsigned int *)*((_QWORD *)v5 + 6);
    if (v20)
    {
      v21 = v20 + 2;
      do
      {
        v22 = __ldaxr(v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v21));
      if (!v23)
        (*(void (**)(unsigned int *, CA::Render::LayerNode *))(*(_QWORD *)v20 + 16))(v20, a2);
    }
    v24 = (CA::Shape *)*((_QWORD *)v5 + 26);
    if (v24)
      CA::Shape::unref(v24);
    v25 = (CA::Shape *)*((_QWORD *)v5 + 27);
    if (v25)
      CA::Shape::unref(v25);
    v26 = (CA::Shape *)*((_QWORD *)v5 + 28);
    if (v26)
      CA::Shape::unref(v26);
    v27 = (CA::Shape *)*((_QWORD *)v5 + 29);
    if (v27)
      CA::Shape::unref(v27);
    v28 = (_QWORD *)*((_QWORD *)v5 + 7);
    if (v28)
    {
      *v28 = v3;
      v3 = (_QWORD *)*((_QWORD *)v5 + 7);
    }
    v29 = (_QWORD *)*((_QWORD *)v5 + 18);
    if (v29)
    {
      *v29 = v3;
      v3 = (_QWORD *)*((_QWORD *)v5 + 18);
    }
    v30 = (unsigned int *)*((_QWORD *)v5 + 4);
    if (v30)
    {
      v31 = v30 + 2;
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
        (*(void (**)(unsigned int *, CA::Render::LayerNode *))(*(_QWORD *)v30 + 16))(v30, a2);
    }
    v34 = (unsigned int *)*((_QWORD *)v5 + 15);
    if (v34)
    {
      v35 = v34 + 2;
      do
      {
        v36 = __ldaxr(v35);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, v35));
      if (!v37)
        (*(void (**)(unsigned int *, CA::Render::LayerNode *))(*(_QWORD *)v34 + 16))(v34, a2);
    }
    v38 = *((_QWORD *)v5 + 5);
    if (v38)
      *(_QWORD *)(v38 + 40) = 0;
    v39 = (unsigned int *)*((_QWORD *)v5 + 32);
    if (v39)
    {
      v40 = v39 + 2;
      do
      {
        v41 = __ldaxr(v40);
        v42 = v41 - 1;
      }
      while (__stlxr(v42, v40));
      if (!v42)
        (*(void (**)(unsigned int *, CA::Render::LayerNode *))(*(_QWORD *)v39 + 16))(v39, a2);
    }
    v43 = (unsigned int *)*((_QWORD *)v5 + 33);
    if (v43)
    {
      v44 = v43 + 2;
      do
      {
        v45 = __ldaxr(v44);
        v46 = v45 - 1;
      }
      while (__stlxr(v46, v44));
      if (!v46)
        (*(void (**)(unsigned int *, CA::Render::LayerNode *))(*(_QWORD *)v43 + 16))(v43, a2);
    }
    v47 = (_QWORD *)*((_QWORD *)v5 + 19);
    if (v47)
    {
      do
      {
        v48 = (_QWORD *)*v47;
        free(v47);
        v47 = v48;
      }
      while (v48);
    }
    *((_QWORD *)v5 + 11) = v4;
    v4 = v5;
  }
  while (v2);
  do
  {
    while (1)
    {
      v49 = v5;
      v5 = (CA::Render::LayerNode *)*((_QWORD *)v5 + 11);
      *(_QWORD *)&v50 = 0x2222222222222222;
      *((_QWORD *)&v50 + 1) = 0x2222222222222222;
      *(_OWORD *)v49 = v50;
      *((_OWORD *)v49 + 1) = v50;
      *((_OWORD *)v49 + 2) = v50;
      *((_OWORD *)v49 + 3) = v50;
      *((_OWORD *)v49 + 6) = v50;
      *((_OWORD *)v49 + 7) = v50;
      *((_OWORD *)v49 + 8) = v50;
      *((_OWORD *)v49 + 9) = v50;
      *((_OWORD *)v49 + 10) = v50;
      *((_OWORD *)v49 + 11) = v50;
      *((_OWORD *)v49 + 12) = v50;
      *((_OWORD *)v49 + 13) = v50;
      *((_OWORD *)v49 + 14) = v50;
      *((_OWORD *)v49 + 15) = v50;
      *((_OWORD *)v49 + 16) = v50;
      *((_QWORD *)v49 + 34) = 0x2222222222222222;
      *((_OWORD *)v49 + 4) = v50;
      *((_OWORD *)v49 + 5) = v50;
      if (CA::Render::LayerNodeAllocator::_data <= (unint64_t)v49)
      {
        v51 = 0xAF8AF8AF8AF8AF8BLL * (((uint64_t)v49 - CA::Render::LayerNodeAllocator::_data) >> 3);
        if (v51 < 0x1000)
          break;
      }
      malloc_zone = (malloc_zone_t *)get_malloc_zone();
      malloc_zone_free(malloc_zone, v49);
      if (!v5)
        goto LABEL_68;
    }
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::LayerNodeAllocator::_lock);
    v53 = CA::Render::LayerNodeAllocator::_free_offsets_count++;
    *(_WORD *)(CA::Render::LayerNodeAllocator::_free_offsets + 2 * v53) = v51;
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::LayerNodeAllocator::_lock);
  }
  while (v5);
LABEL_68:
  if (v3)
  {
    do
    {
      v54 = (_QWORD *)*v3;
      free(v3);
      v3 = v54;
    }
    while (v54);
  }
}

void CA::shape_intersect(CA::Shape **this, CA::Shape **a2, const CA::Bounds *a3)
{
  CA::Shape *v4;
  uint64_t v5;

  v4 = *this;
  if ((*this & 1) != 0)
  {
    if (v4 == (CA::Shape *)1)
      return;
    goto LABEL_5;
  }
  if (*((_DWORD *)v4 + 1) != 6)
  {
LABEL_5:
    v5 = CA::Shape::intersect(*this, (const CA::Bounds *)a2);
    CA::Shape::unref(v4);
    *this = (CA::Shape *)v5;
  }
}

uint64_t CA::Shape::intersect(CA::Shape *this, const CA::Bounds *a2)
{
  BOOL v3;
  char v4;
  uint64_t result;
  _OWORD v6[3];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if ((this & 1) != 0)
    v3 = this == (CA::Shape *)1;
  else
    v3 = *((_DWORD *)this + 1) == 6;
  v4 = v3;
  result = 1;
  if ((v4 & 1) == 0 && *((_DWORD *)a2 + 2))
  {
    if (*((_DWORD *)a2 + 3))
    {
      memset(v6, 0, sizeof(v6));
      CA::Shape::operator=((uint64_t)v6, a2);
      return CA::Shape::intersect((uint64_t)this, (uint64_t)v6);
    }
  }
  return result;
}

void CA::Render::Update::invalidate_backdrops(CA::Render::Update *this, const CA::Bounds *a2, CA::Render::BackdropState *a3, unsigned int a4)
{
  int v4;
  int32x2_t *v6;
  __int32 v10;
  _QWORD *v11;
  uint64_t v12;
  os_unfair_lock_s *v13;
  const CA::Bounds *v14;
  const CA::Bounds *v15;
  uint64_t v16;
  int32x2_t v17;
  uint64_t v18;
  __int128 v19;
  int v20;
  uint32x2_t v21;
  unsigned __int32 v22;
  int32x2_t v23;
  int32x2_t v24;
  uint32x2_t v25;
  int32x2_t v26;
  int32x2_t v27;
  int32x2_t v28;
  int32x2_t v29;
  uint32x2_t v30;
  __int128 v31;
  int v32;
  int v33;
  float v34;
  float v35;
  int v36;
  unsigned int v37;
  signed int v38;
  CA::Shape **v40;
  CA::Shape *v41;
  CA::Shape *v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v4 = *((_DWORD *)a2 + 2);
  if (v4 >= *((_DWORD *)a2 + 3))
    v4 = *((_DWORD *)a2 + 3);
  if (v4 >= 1)
  {
    v6 = (int32x2_t *)*((_QWORD *)this + 63);
    if (v6)
    {
      while (1)
      {
        v10 = v6[12].i32[0];
        if ((v10 & 0x40000000) != 0 && (v10 & 0xFFFFFFFu) <= a4)
          goto LABEL_44;
        v11 = *(_QWORD **)(*(_QWORD *)&v6[1] + 256);
        v12 = v11[5];
        v13 = (os_unfair_lock_s *)(v12 + 40);
        os_unfair_lock_lock((os_unfair_lock_t)(v12 + 40));
        v16 = *(_QWORD *)(v12 + 480);
        v17 = v6[2];
        v18 = *(_QWORD *)(*(_QWORD *)&v17 + 16);
        if (v16 == v18)
        {
          if ((v6[12].i8[3] & 0x20) != 0)
          {
            v44 = 0uLL;
            CA::Shape::get_bounds(v16, (int *)&v44);
            *(_OWORD *)v6[3].i8 = v44;
          }
          goto LABEL_43;
        }
        if (!a3 || *((_QWORD *)a3 + 5) != v12)
        {
          v19 = *(_OWORD *)a2;
          v43 = v19;
          v20 = DWORD2(v19);
          v21 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *(int32x2_t *)((char *)&v19 + 8));
          v22 = vpmax_u32(v21, v21).u32[0];
          v23 = (int32x2_t)v19;
          if ((v22 & 0x80000000) != 0)
          {
            v32 = HIDWORD(v19);
          }
          else
          {
            v24 = (int32x2_t)v11[7];
            v25 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v24);
            if ((vpmax_u32(v25, v25).u32[0] & 0x80000000) != 0
              || (v26 = (int32x2_t)v11[6],
                  v27 = vadd_s32(*(int32x2_t *)&v19, *(int32x2_t *)((char *)&v19 + 8)),
                  v28 = vmax_s32(*(int32x2_t *)&v19, v26),
                  v29 = vsub_s32(vmin_s32(v27, vadd_s32(v26, v24)), v28),
                  v30 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v29),
                  (vpmax_u32(v30, v30).u32[0] & 0x80000000) != 0))
            {
              v32 = 0;
              v20 = 0;
              *((_QWORD *)&v43 + 1) = 0;
            }
            else
            {
              *(int32x2_t *)&v31 = v28;
              *((int32x2_t *)&v31 + 1) = v29;
              v43 = v31;
              v20 = v29.i32[0];
              v32 = v29.i32[1];
              v23 = v28;
            }
          }
          v33 = v20 >= v32 ? v32 : v20;
          if (v33 >= 1)
            break;
        }
LABEL_43:
        os_unfair_lock_unlock(v13);
LABEL_44:
        v6 = (int32x2_t *)*v6;
        if (!v6)
          return;
      }
      v34 = *(float *)(v12 + 60);
      v35 = 0.0;
      if (v34 != 1.0)
        v35 = ceilf(0.5 / v34);
      if (v20 <= v32)
        v36 = v32;
      else
        v36 = v20;
      if (v36 <= 1073741822)
      {
        v37 = (int)(float)-v35;
        *(int32x2_t *)&v43 = vadd_s32(v23, vdup_n_s32(v37));
        v38 = v32 - 2 * v37;
        DWORD2(v43) = v20 - 2 * v37;
        HIDWORD(v43) = v38;
        if (SDWORD2(v43) < 1 || v38 <= 0)
          *((_QWORD *)&v43 + 1) = 0;
      }
      if ((v6[12].i8[3] & 0x20) != 0)
      {
        CA::BoundsImpl::Union(v6 + 3, *(int32x2_t *)&v43, *(int32x2_t *)((char *)&v43 + 8));
        v17 = v6[2];
        v18 = *(_QWORD *)(*(_QWORD *)&v17 + 16);
      }
      v40 = (CA::Shape **)(*(_QWORD *)&v17 + 16);
      if (v18)
      {
        CA::shape_union((CA::Shape **)(*(_QWORD *)&v17 + 16), (CA::Shape **)&v43, v15);
        v41 = *v40;
        if ((*v40 & 1) != 0 || *((int *)v41 + 1) < 65)
          goto LABEL_42;
        v44 = 0uLL;
        CA::Shape::get_bounds((uint64_t)v41, (int *)&v44);
        CA::Shape::unref(*v40);
        v42 = (CA::Shape *)&v44;
      }
      else
      {
        v42 = (CA::Shape *)&v43;
      }
      *v40 = (CA::Shape *)CA::Shape::new_shape(v42, v14);
LABEL_42:
      goto LABEL_43;
    }
  }
}

uint64_t CA::BoundsImpl::intersect(int32x2_t *a1, int32x2_t a2, int32x2_t a3)
{
  int32x2_t v3;
  uint32x2_t v4;
  uint32x2_t v5;
  int32x2_t v6;
  __int128 v7;
  int32x2_t v8;
  uint32x2_t v9;
  uint64_t v10;

  v3 = a1[1];
  v4 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v3);
  if ((vpmax_u32(v4, v4).u32[0] & 0x80000000) != 0)
    return 0;
  v5 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, a3);
  if ((vpmax_u32(v5, v5).u32[0] & 0x80000000) != 0
    || (v6 = vadd_s32(a2, a3),
        *(int32x2_t *)&v7 = vmax_s32(*a1, a2),
        v8 = vsub_s32(vmin_s32(vadd_s32(*a1, v3), v6), *(int32x2_t *)&v7),
        v9 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v8),
        (vpmax_u32(v9, v9).u32[0] & 0x80000000) != 0))
  {
    v10 = 0;
    a1[1] = 0;
  }
  else
  {
    *((int32x2_t *)&v7 + 1) = v8;
    *(_OWORD *)a1->i8 = v7;
    return 1;
  }
  return v10;
}

void CA::shape_union(CA::Shape **this, CA::Shape **a2, const CA::Bounds *a3)
{
  CA::Shape *v5;
  const CA::Bounds *v6;
  unint64_t v7;

  v5 = *this;
  if ((*this & 1) != 0)
  {
    if (v5 == (CA::Shape *)1)
      goto LABEL_3;
LABEL_5:
    v7 = CA::Shape::Union(*this, (const CA::Bounds *)a2);
    CA::Shape::unref(v5);
    goto LABEL_6;
  }
  if (*((_DWORD *)v5 + 1) != 6)
    goto LABEL_5;
LABEL_3:
  CA::Shape::unref(*this);
  v7 = CA::Shape::new_shape((CA::Shape *)a2, v6);
LABEL_6:
  *this = (CA::Shape *)v7;
}

unint64_t CA::Shape::new_shape(CA::Shape *this, const CA::Bounds *a2)
{
  uint64_t v2;
  int v3;
  unint64_t result;
  malloc_zone_t *malloc_zone;

  v2 = *((unsigned int *)this + 2);
  v3 = *((_DWORD *)this + 3);
  if ((int)v2 < 1 || v3 < 1)
    return 1;
  if (!((v3 | v2) >> 15)
    && *(_QWORD *)this == __PAIR64__((__int16)*((_DWORD *)this + 1), (__int16)*(_DWORD *)this))
  {
    return ((unint64_t)*(unsigned int *)this << 48) | ((unint64_t)(unsigned __int16)*((_DWORD *)this + 1) << 32) | (v2 << 17) | (4 * (v3 & 0x7FFF)) | 1;
  }
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  result = (unint64_t)malloc_type_zone_malloc(malloc_zone, 0x30uLL, 0x8BB15036uLL);
  if (result)
  {
    result = CA::Shape::operator=(result, this);
    *(_DWORD *)result = 1;
    *(_DWORD *)(result + 8) = 12;
  }
  return result;
}

unint64_t CA::Shape::Union(CA::Shape *this, const CA::Bounds *a2)
{
  BOOL v3;
  _OWORD v5[3];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)a2 + 2))
    v3 = *((_DWORD *)a2 + 3) == 0;
  else
    v3 = 1;
  if (v3)
    return CA::Shape::ref((unint64_t)this, a2);
  if ((this & 1) != 0)
  {
    if (this == (CA::Shape *)1)
      return CA::Shape::new_shape(a2, a2);
  }
  else if (*((_DWORD *)this + 1) == 6)
  {
    return CA::Shape::new_shape(a2, a2);
  }
  memset(v5, 0, sizeof(v5));
  CA::Shape::operator=((uint64_t)v5, a2);
  return CA::Shape::Union((uint64_t)this, (uint64_t)v5);
}

void CA::OGL::render_layers(CA::OGL *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  os_signpost_id_t v22;
  NSObject *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint8_t buf[4];
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v2 = a2;
    v4 = *(_QWORD *)a1;
    while (1)
    {
      v5 = *(_QWORD *)(v2 + 104);
      *(_QWORD *)(v4 + 808) = v2;
      *(_WORD *)(v4 + 816) &= ~0x800u;
      if (BYTE3(xmmword_1ECDC6AF0))
        v6 = mach_continuous_time();
      else
        v6 = 0;
      if (byte_1ECDC6A61)
        *(_DWORD *)(v5 + 220) = *(_DWORD *)(v5 + 220) & 0xFFF1FFFF | 0xA0000;
      v7 = *(_QWORD *)(v2 + 112);
      v8 = v7 != 0;
      if (v7)
      {
        v9 = *(_QWORD *)(v4 + 256);
        if (v9 != *(_QWORD *)(v4 + 248))
          goto LABEL_9;
        if (v9)
          LODWORD(v9) = (*(unsigned __int8 *)(v9 + 72) >> 1) & 0x1F;
        if (*(_DWORD *)(v4 + 244) != (_DWORD)v9)
LABEL_9:
          CA::OGL::Context::prepare_destination_((CA::OGL::Context *)v4);
        if ((*(_WORD *)(v4 + 816) & 0x200) != 0)
        {
          v10 = *(_QWORD *)(v4 + 176);
          if (v10)
          {
            *(_WORD *)(v4 + 816) &= ~0x200u;
          }
        }
        *(_QWORD *)(*(_QWORD *)(v2 + 112) + 224) = *(_QWORD *)(v4 + 248);
      }
      if ((*(_WORD *)(v2 + 40) & 8) != 0)
      {
        v11 = *(_QWORD *)(v4 + 256);
        if (v11 != *(_QWORD *)(v4 + 248))
          goto LABEL_19;
        if (v11)
          LODWORD(v11) = (*(unsigned __int8 *)(v11 + 72) >> 1) & 0x1F;
        if (*(_DWORD *)(v4 + 244) != (_DWORD)v11)
LABEL_19:
          CA::OGL::Context::prepare_destination_((CA::OGL::Context *)v4);
        if ((*(_WORD *)(v4 + 816) & 0x200) != 0)
        {
          v12 = *(_QWORD *)(v4 + 176);
          if (v12)
          {
            *(_WORD *)(v4 + 816) &= ~0x200u;
          }
        }
        CA::OGL::capture_backdrop(a1, (const CA::Bounds *)v2);
        if (byte_1ECDC6A6B)
          *(_DWORD *)(v5 + 220) = *(_DWORD *)(v5 + 220) & 0xFFF1FFFF | 0xA0000;
        v8 = 1;
      }
      CA::OGL::ImagingNode::render(v5, 0, 0);
      v13 = *(_QWORD *)(v2 + 112);
      if (v13)
        *(_QWORD *)(v13 + 224) = 0;
      v14 = *(_QWORD *)(*(_QWORD *)(v2 + 24) + 144);
      if (!v14)
        goto LABEL_43;
      v15 = *(unsigned __int16 *)(v2 + 298);
      v16 = *(_DWORD *)(v2 + 300);
      v17 = v16 & 0x1FFFF;
      if (*(_WORD *)(v2 + 298) || v17)
        goto LABEL_36;
      if (*(_DWORD *)(v14 + 92) >> 28)
        break;
LABEL_43:
      if (v6 && (v8 || (*(_WORD *)(v4 + 816) & 0x800) != 0))
      {
        if (CA::OGL::trace_log(void)::once != -1)
          dispatch_once(&CA::OGL::trace_log(void)::once, &__block_literal_global_22);
        v22 = *(unsigned int *)(*((_QWORD *)a1 + 1) + 248);
        if ((_DWORD)v22)
        {
          v23 = CA::OGL::trace_log(void)::log;
          if (os_signpost_enabled((os_log_t)CA::OGL::trace_log(void)::log))
          {
            v24 = *(_QWORD *)(v2 + 24);
            if (v24)
            {
              v24 = *(_QWORD *)(v24 + 120);
              if (v24)
              {
                v25 = *(_DWORD *)(v24 + 24);
                v24 += 28;
                if (!v25)
                  v24 = 0;
              }
            }
            *(_DWORD *)buf = 136446466;
            v28 = v24;
            v29 = 2050;
            v30 = v6;
            _os_signpost_emit_with_name_impl(&dword_184457000, v23, OS_SIGNPOST_EVENT, v22, "RenderLayer", "ID is update layer=%{public,name=layer}s begin=%{public,signpost.description:begin_time}llu", buf, 0x16u);
          }
        }
      }
      *(_QWORD *)(v4 + 808) = *(_QWORD *)(v2 + 8);
      *(_WORD *)(v4 + 816) &= ~0x800u;
      v26 = *(_QWORD *)v2;
      CA::OGL::Renderer::dealloc_layer(a1, v2);
      v2 = v26;
      if (!v26)
        return;
    }
    v17 = 0;
LABEL_36:
    v18 = *(_DWORD *)(*(_QWORD *)a1 + 212);
    if (*(_DWORD *)(v14 + 88) == v18)
    {
      v19 = *(_DWORD *)(v14 + 92);
    }
    else
    {
      v19 = 0;
      *(_DWORD *)(v14 + 88) = v18;
    }
    v20 = v15 + (v19 >> 28);
    if (v20 >= 0xF)
      v21 = -268435456;
    else
      v21 = v20 << 28;
    *(_DWORD *)(v14 + 92) = (v19 | v16) & 0xFFE0000 | v19 & 0x1FFFF | v17 | v21;
    goto LABEL_43;
  }
}

void CA::OGL::Renderer::dealloc_layer(CA::OGL::Renderer *a1, uint64_t a2)
{
  _WORD *v4;
  __int16 v5;
  _WORD *v6;
  __int16 v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  CA::Shape *v12;

  v4 = *(_WORD **)(a2 + 104);
  if (v4)
  {
    v5 = v4[106] - 1;
    *((_BYTE *)v4 + 212) = v4[106] - 1;
    if (!(_BYTE)v5)
      CA::OGL::ImagingNode::finalize((CA::OGL::ImagingNode *)v4, a1);
  }
  v6 = *(_WORD **)(a2 + 112);
  if (v6)
  {
    v7 = v6[106] - 1;
    *((_BYTE *)v6 + 212) = v6[106] - 1;
    if (!(_BYTE)v7)
      CA::OGL::ImagingNode::finalize((CA::OGL::ImagingNode *)v6, a1);
  }
  if (*(_QWORD *)(a2 + 120))
    CA::OGL::Renderer::dealloc_layer(a1);
  if ((*(_WORD *)(a2 + 40) & 0x20) != 0)
    free(*(void **)(a2 + 88));
  v8 = *(unsigned __int16 *)(a2 + 296);
  if (*(_WORD *)(a2 + 296))
  {
    v9 = *(_QWORD **)(a2 + 128);
    v10 = (_QWORD *)*((_QWORD *)a1 + 10);
    do
    {
      v11 = v10;
      v10 = v9;
      v9 = (_QWORD *)*v9;
      *v10 = v11;
      --v8;
    }
    while (v8);
    *((_QWORD *)a1 + 10) = v10;
  }
  v12 = *(CA::Shape **)(a2 + 96);
  if (v12)
    CA::Shape::unref(v12);
  *(_QWORD *)a2 = *((_QWORD *)a1 + 8);
  *((_QWORD *)a1 + 8) = a2;
}

void CA::Shape::unref(CA::Shape *this)
{
  unsigned int v2;
  unsigned int v3;
  malloc_zone_t *malloc_zone;

  if ((this & 1) == 0 && *(_DWORD *)this)
  {
    do
    {
      v2 = __ldaxr((unsigned int *)this);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, (unsigned int *)this));
    if (!v3)
    {
      *(_QWORD *)((char *)this + 4) = -1;
      malloc_zone = (malloc_zone_t *)get_malloc_zone();
      malloc_zone_free(malloc_zone, this);
    }
  }
}

uint64_t CA::OGL::ImagingNode::finalize(CA::OGL::ImagingNode *this, CA::OGL::Renderer *a2)
{
  uint64_t v4;
  char v5;
  char v6;
  _WORD *v7;
  __int16 v8;
  uint64_t v9;
  uint64_t result;

  v4 = 0;
  v5 = 1;
  do
  {
    v6 = v5;
    v7 = (_WORD *)*((_QWORD *)this + v4 + 3);
    if (v7)
    {
      v8 = v7[106] - 1;
      *((_BYTE *)v7 + 212) = v7[106] - 1;
      if (!(_BYTE)v8)
        CA::OGL::ImagingNode::finalize((CA::OGL::ImagingNode *)v7, a2);
    }
    v5 = 0;
    v4 = 1;
  }
  while ((v6 & 1) != 0);
  v9 = *((_QWORD *)this + 6);
  if (v9)
    CA::OGL::Context::release_surface(*(_QWORD *)a2, v9);
  result = (**(uint64_t (***)(CA::OGL::ImagingNode *))this)(this);
  *(_QWORD *)this = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = this;
  return result;
}

void CA::OGL::LayerNode::~LayerNode(CA::OGL::LayerNode *this)
{
  _QWORD *v1;
  CA::OGL::Renderer *v2;
  _QWORD *v3;

  *(_QWORD *)this = &off_1E1595CE0;
  v1 = (_QWORD *)*((_QWORD *)this + 29);
  if (v1)
  {
    v2 = (CA::OGL::Renderer *)*((_QWORD *)this + 1);
    do
    {
      v3 = (_QWORD *)*v1;
      CA::OGL::Renderer::dealloc_layer(v2, (uint64_t)v1);
      v1 = v3;
    }
    while (v3);
  }
}

{
  _QWORD *v1;
  CA::OGL::Renderer *v2;
  _QWORD *v3;

  *(_QWORD *)this = &off_1E1595CE0;
  v1 = (_QWORD *)*((_QWORD *)this + 29);
  if (v1)
  {
    v2 = (CA::OGL::Renderer *)*((_QWORD *)this + 1);
    do
    {
      v3 = (_QWORD *)*v1;
      CA::OGL::Renderer::dealloc_layer(v2, (uint64_t)v1);
      v1 = v3;
    }
    while (v3);
  }
  abort();
}

void CA::OGL::ImagingNode::render(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v6;
  unsigned int v7;
  int v8;
  float v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  CA::OGL::ImagingNode *v14;
  uint64_t v15;
  CA::OGL::ImagingNode *v16;
  _QWORD *v17;
  uint64_t v18;
  float *v19;
  float v20;
  uint64_t v22;
  char v23;
  char v24;
  _QWORD *v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  double *v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  _OWORD v35[15];
  uint64_t v36;
  _OWORD v37[3];
  uint64_t v38;
  _QWORD v39[4];

  v39[2] = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v3 + 101))
    return;
  v6 = *(_QWORD *)v3;
  if ((*(_WORD *)(a1 + 212) & 0x100) != 0)
  {
    ++*(_DWORD *)(v6 + 724);
    CA::OGL::ImagingNode::render(*(_QWORD *)(a1 + 24), a2);
    --*(_DWORD *)(v6 + 724);
    return;
  }
  v39[0] = 0;
  v39[1] = 0;
  v38 = 0x3F8000003F800000;
  v7 = *(_DWORD *)(a1 + 220);
  if (a2)
    v8 = HIBYTE(v7) & 1;
  else
    v8 = 0;
  v9 = 1.0;
  if (v8 == 1)
  {
    if ((v7 & 0x2200000) != 0x2000000)
    {
      if (((*(uint64_t (**)(uint64_t, _QWORD, float))(*(_QWORD *)a2 + 16))(a2, a3, 1.0) & 1) != 0)
        goto LABEL_24;
      goto LABEL_38;
    }
    v10 = 0;
    v11 = 1;
    do
    {
      v12 = v11;
      v13 = a1 + 8 * v10;
      v16 = *(CA::OGL::ImagingNode **)(v13 + 24);
      v15 = v13 + 24;
      v14 = v16;
      if (v16)
      {
        CA::OGL::ImagingNode::remove_feature_passthrough_aware(v14, a2);
        v17 = *(_QWORD **)v15;
        v18 = *(_QWORD *)(*(_QWORD *)v15 + 48);
        v19 = (float *)&v39[-1] + v10;
        if (v18)
        {
          *v19 = 1.0;
          *(_QWORD *)(v17[1] + 88) -= *(int *)(v18 + 28) * (uint64_t)*(int *)(v18 + 24) * (*(_BYTE *)(v18 + 74) & 0x1F);
          v17[6] = 0;
          v20 = 1.0;
        }
        else
        {
          v18 = (*(uint64_t (**)(_QWORD *, char *, _QWORD))(*v17 + 80))(v17, (char *)&v39[-1] + 4 * v10, *(_DWORD *)(a1 + 220) & 0x1FFFF);
          v20 = *v19;
        }
        v39[v10] = v18;
        if (v20 > v9 && v20 < 1.0)
          v9 = v20;
      }
      v11 = 0;
      v10 = 1;
    }
    while ((v12 & 1) != 0);
  }
  if (!a2)
    goto LABEL_24;
  if (((*(uint64_t (**)(uint64_t, _QWORD, float))(*(_QWORD *)a2 + 16))(a2, a3, v9) & 1) != 0)
  {
    if ((v8 & 1) != 0)
    {
LABEL_31:
      v28 = *(_QWORD *)(a1 + 64);
      memset(v37, 0, sizeof(v37));
      if (v9 != 1.0)
      {
        CA::Shape::operator=((uint64_t)v37, (_DWORD *)(*(_QWORD *)(v6 + 248) + 32));
        *(_QWORD *)(a1 + 64) = v37;
      }
      *(_QWORD *)(a1 + 56) = CA::OGL::Context::set_gstate(v6, a1 + 56);
      v36 = 0;
      memset(v35, 0, sizeof(v35));
      if ((*(_BYTE *)(a1 + 222) & 0x20) != 0)
        CA::OGL::MaskCorners::begin((float32x2_t *)v35, (CA::OGL::ImagingNode *)a1, v29);
      (*(void (**)(uint64_t, _QWORD *, uint64_t *, float))(*(_QWORD *)a1 + 104))(a1, v39, &v38, v9);
      if ((*(_BYTE *)(a1 + 222) & 0x20) != 0)
        CA::OGL::MaskCorners::finish((CA::OGL::MaskCorners *)v35, (CA::OGL::ImagingNode *)a1);
      CA::OGL::Context::set_gstate(v6, **(_QWORD **)(v6 + 232));
      *(_QWORD *)(a1 + 64) = v28;
      goto LABEL_38;
    }
LABEL_24:
    v22 = 0;
    v23 = 1;
    do
    {
      v24 = v23;
      v25 = *(_QWORD **)(a1 + 8 * v22 + 24);
      if (v25)
      {
        v26 = v25[6];
        v27 = (_DWORD *)&v39[-1] + v22;
        if (v26)
        {
          *v27 = 1065353216;
          *(_QWORD *)(v25[1] + 88) -= *(int *)(v26 + 28) * (uint64_t)*(int *)(v26 + 24) * (*(_BYTE *)(v26 + 74) & 0x1F);
          v25[6] = 0;
        }
        else
        {
          v26 = (*(uint64_t (**)(_QWORD *, _DWORD *, _QWORD))(*v25 + 80))(v25, v27, *(_DWORD *)(a1 + 220) & 0x1FFFF);
        }
        v39[v22] = v26;
      }
      v23 = 0;
      v22 = 1;
    }
    while ((v24 & 1) != 0);
    goto LABEL_31;
  }
LABEL_38:
  v30 = 0;
  v31 = 1;
  do
  {
    v32 = v31;
    v33 = v39[v30];
    if (v33)
      CA::OGL::Context::release_surface(v6, v33);
    v31 = 0;
    v30 = 1;
  }
  while ((v32 & 1) != 0);
}

uint64_t CA::OGL::Context::set_gstate(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  __int16 v7;

  result = *(_QWORD *)(a1 + 232);
  if (result != a2)
  {
    v4 = *(_QWORD *)(a1 + 16);
    *(_BYTE *)(v4 + 480) = *(_BYTE *)(a2 + 68);
    *(_QWORD *)(v4 + 288) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 296) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 280) = *(_QWORD *)(a2 + 56);
    v5 = *(_QWORD *)(a2 + 8);
    if ((v5 & 1) != 0)
    {
      if (v5 == 1)
        goto LABEL_4;
    }
    else if (*(_DWORD *)(v5 + 4) != 12)
    {
LABEL_4:
      v6 = 0;
      v7 = 0;
      goto LABEL_9;
    }
    if ((*(_WORD *)(a1 + 816) & 8) != 0 && *(_QWORD *)(result + 8) == v5)
      goto LABEL_10;
    v7 = 8;
    v6 = 16;
LABEL_9:
    *(_BYTE *)(a1 + 64) = 0;
    *(_WORD *)(a1 + 816) = v7 | v6 | *(_WORD *)(a1 + 816) & 0xFFE7;
LABEL_10:
    *(_QWORD *)(a1 + 232) = a2;
  }
  return result;
}

void CA::OGL::LayerNode::apply(CA::OGL::LayerNode *this, double a2, float32x4_t a3, int64x2_t a4, uint64_t a5, double *a6, const int *a7)
{
  uint64_t v7;
  uint64_t v8;
  CA::OGL *v10;
  uint64_t v11;
  double v12;
  double v13;
  float32x4_t v14;
  _QWORD v15[4];

  v15[3] = *MEMORY[0x1E0C80C00];
  v7 = *((_QWORD *)this + 2);
  v8 = *(_QWORD *)(v7 + 32);
  if ((v8 & 8) == 0)
  {
    v10 = (CA::OGL *)*((_QWORD *)this + 1);
    if ((v8 & 0x200005120) != 0)
    {
      CA::OGL::render_contents_background(*((CA::OGL::Context ***)this + 1), v7, (uint64_t)a6, a7, a2, a3, a4);
      v8 = *(_QWORD *)(v7 + 32);
    }
    if ((v8 & 0x2000) != 0)
    {
      v11 = **(_QWORD **)(*(_QWORD *)(v7 + 24) + 128);
      v15[0] = off_1E159A580;
      v15[1] = v10;
      v15[2] = v7;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v11 + 232))(v11, v15);
      v8 = *(_QWORD *)(v7 + 32);
    }
    if ((v8 & 0x200) != 0)
    {
      CA::OGL::LayerNode::prepare_sublayers_roi_if_needed((uint64_t)this);
      CA::OGL::render_layers(v10, *((_QWORD *)this + 29));
      *((_QWORD *)this + 29) = 0;
      *((_BYTE *)this + 224) &= 0xFCu;
      v8 = *(_QWORD *)(v7 + 32);
    }
    if ((v8 & 0x1080) != 0)
    {
      CA::OGL::render_border(*(CA::OGL::Context **)v10, v7, a6);
      if ((*(_BYTE *)(v7 + 33) & 0x10) != 0 && (*(_BYTE *)(*(_QWORD *)(v7 + 24) + 44) & 2) != 0)
        CA::OGL::render_shadow_path(*(CA::OGL::Context **)v10, v7, v12, v13, v14);
    }
  }
}

uint64_t CA::OGL::prepare_layers_roi(const Rect **a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int v11;
  const Rect *v12;
  unsigned int v13;
  uint64_t v14;
  CA::Shape **v15;
  const CA::Shape *v16;
  uint64_t v17;
  unint64_t v18;
  const CA::Bounds *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float64x2_t v24;
  float64x2_t v25;
  uint64_t v26;
  float64x2_t *v27;
  const CA::Bounds *v28;
  int64x2_t v29;
  int8x16_t v30;
  int32x4_t v31;
  int32x2_t *v32;
  uint64_t v33;
  int32x2_t v34;
  int v35;
  unsigned int v36;
  int32x2_t *v37;
  int32x2_t *v38;
  int32x2_t *v39;
  uint64_t v40;
  char v41;
  char v42;
  int32x2_t v43;
  int v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  const CA::Bounds *v48;
  int32x2_t *v49;
  int32x2_t *v50;
  int32x2_t *v51;
  CA::Shape *v52;
  uint32x2_t v53;
  int32x2_t v54;
  uint32x2_t v55;
  int32x2_t v56;
  __int128 v57;
  uint32x2_t v58;
  uint32x2_t v59;
  int32x2_t v60;
  uint32x2_t v61;
  __int128 v62;
  int32x2_t v63;
  uint32x2_t v64;
  int v65;
  int v66;
  CA::Shape *v68;
  int8x8_t v69;
  unsigned int v71;
  uint64_t v72;
  const CA::Shape *v73;
  uint64_t v74;
  CA::Shape *v75;
  uint64_t v76;
  const int *v77;
  CA::Shape *v78;
  CA::Shape *v79;
  uint64_t v80;
  uint64_t v81;
  CA::Shape *v82;
  int v83;
  const CA::Bounds *v85;
  uint64_t v86;
  const CA::Bounds *v87;
  float64x2_t v89;
  float64x2_t v90;
  char v91;
  uint64_t v93;
  _QWORD *v94;
  CA::Shape *v95[2];
  float64x2_t v96;
  CA::Shape *v97;
  CA::Shape *v98[2];
  uint64_t v99;

  v99 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 0;
  v3 = a3;
  v4 = a2;
  v5 = *(_BYTE *)(a3 + 69) & (BYTE11(ca_debug_options) == 0);
  v6 = *(_QWORD *)(a2[1] + 16);
  if (v6)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(v6 + 32) + 144);
    if (v7)
    {
      if ((*(_BYTE *)(v7 + 98) & 0x30) != 0)
        v5 = 0;
      else
        v5 = *(_BYTE *)(a3 + 69) & (BYTE11(ca_debug_options) == 0);
    }
  }
  v91 = 0;
  v8 = 0;
  v97 = *(CA::Shape **)(a3 + 8);
  v89 = (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL);
  v90 = (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000);
  v9 = a2;
  do
  {
    while (1)
    {
      v10 = v8;
      v8 = (uint64_t)v9;
      if (v9 != v4)
      {
        v11 = *(_DWORD *)(v9[2] + 112);
        if (((v11 != 0) & v5) == 1)
        {
          v12 = a1[1];
          v13 = *(_DWORD *)&v12[64].top;
          if (v13)
          {
            if (v13 < v11)
              v11 = *(_DWORD *)&v12[64].top;
            v14 = *(_QWORD *)(*(_QWORD *)&v12[67] + 8 * (v11 - 1));
            if (v14)
            {
              if ((v14 & 1) != 0)
              {
                if (v14 == 1)
                  goto LABEL_21;
              }
              else if (*(_DWORD *)(v14 + 4) == 6)
              {
                goto LABEL_21;
              }
              if ((v91 & 1) == 0)
                v97 = (CA::Shape *)CA::Shape::ref((unint64_t)v97, (const CA::Bounds *)a2);
              v15 = (CA::Shape **)CA::Shape::intersect(v14, *(_QWORD *)(v3 + 8));
              CA::shape_union(&v97, v15, v16);
              CA::Shape::unref((CA::Shape *)v15);
              v91 = 1;
            }
          }
        }
      }
LABEL_21:
      v9 = (_QWORD *)*v9;
      v17 = *(_QWORD *)(*(_QWORD *)(v8 + 16) + 24) & 0x4001000;
      if (!v17)
      {
        if ((v97 & 1) != 0)
        {
          if (v97 == (CA::Shape *)1)
            goto LABEL_136;
        }
        else if (*((_DWORD *)v97 + 1) == 6)
        {
          goto LABEL_136;
        }
      }
      v18 = CA::Shape::ref((unint64_t)v97, (const CA::Bounds *)a2);
      *(_QWORD *)(v8 + 96) = v18;
      v20 = (uint64_t *)(v8 + 96);
      v21 = *(_QWORD *)(*(_QWORD *)(v8 + 24) + 144);
      if (v21
        && (*(_WORD *)(v3 + 68) & 0x100) != 0
        && (*(_BYTE *)(v8 + 34) & 4) == 0
        && (*(_DWORD *)&a1[1][133].top & 4) == 0
        && (*(_BYTE *)(*(_QWORD *)(v8 + 16) + 27) & 4) == 0)
      {
        if (((*a1)[52].top & 0x10) != 0)
        {
          if (!v17)
          {
            *(_OWORD *)v95 = *(_OWORD *)(v21 + 112);
            if (!CA::Shape::intersects(v18, (int32x2_t *)v95))
              goto LABEL_136;
          }
        }
        else
        {
          *(_OWORD *)v95 = *(_OWORD *)(v21 + 112);
          CA::shape_intersect((CA::Shape **)(v8 + 96), v95, v19);
          if (!v17)
          {
            v22 = *v20;
            if ((*v20 & 1) != 0)
            {
              if (v22 == 1)
                goto LABEL_136;
            }
            else if (*(_DWORD *)(v22 + 4) == 6)
            {
              goto LABEL_136;
            }
          }
        }
      }
      v23 = *(_QWORD *)(v8 + 24);
      if ((*(_BYTE *)(v23 + 40) & 0x40) == 0)
        goto LABEL_51;
      v24 = *(float64x2_t *)(v23 + 64);
      v25 = *(float64x2_t *)(v23 + 80);
      *(float64x2_t *)v95 = v24;
      v96 = v25;
      v26 = *(_QWORD *)(v8 + 16);
      v27 = *(float64x2_t **)(v26 + 56);
      if (v27)
        CA::Mat4Impl::mat4_apply_to_rect(v27, (int8x16_t *)v95, (double *)v19);
      else
        *(float64x2_t *)v95 = vaddq_f64(*(float64x2_t *)(v26 + 64), v24);
      CA::Rect::apply_transform((int8x16_t *)v95, *(const CA::Transform **)(v3 + 24), (double *)v19);
      v98[0] = 0;
      v98[1] = 0;
      if ((*(_BYTE *)(v8 + 32) & 1) != 0)
      {
        v29 = vceqzq_f64(v96);
        if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v29, 1), (int8x16_t)v29).u64[0] & 0x8000000000000000) == 0)
        {
          v30 = vorrq_s8((int8x16_t)vcltzq_f64(v96), (int8x16_t)vcgezq_f64(v96));
          if ((vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v30), 1), v30).u64[0] & 0x8000000000000000) == 0)
          {
            v31 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(*(float64x2_t *)v95, v90));
            *(int32x4_t *)v98 = vuzp1q_s32(v31, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(*(float64x2_t *)v95, v96), v89)), (int64x2_t)v31));
          }
        }
      }
      else
      {
        CA::OGL::Context::raster_round_rect((CA::OGL::Context *)v98, *a1, (double *)v95);
      }
      CA::shape_intersect((CA::Shape **)(v8 + 96), v98, v28);
      if (v17)
        goto LABEL_51;
      v81 = *v20;
      if ((*v20 & 1) == 0)
        break;
      if (v81 == 1)
        goto LABEL_136;
LABEL_51:
      v94 = v9;
      v33 = *(_QWORD *)(v8 + 96);
      v32 = *(int32x2_t **)(v8 + 104);
      v98[0] = 0;
      v98[1] = 0;
      CA::Shape::get_bounds(v33, (int *)v98);
      v34 = v32[1];
      v35 = *(_DWORD *)(*(_QWORD *)&v34 + 96);
      if ((v35 + 1) > 1)
        v36 = v35 + 1;
      else
        v36 = 1;
      *(_DWORD *)(*(_QWORD *)&v34 + 96) = v36;
      CA::OGL::ImagingNode::init_roi((uint64_t)v32, v36);
      v37 = 0;
      v32[5] = 0;
      v38 = v32;
      do
      {
        v39 = (int32x2_t *)v38[5];
        v38[5] = 0;
        if (v37)
          v37[5] = (int32x2_t)v38;
        v40 = 0;
        v41 = 1;
        do
        {
          v42 = v41;
          v43 = v38[v40 + 3];
          if (v43)
          {
            v44 = *(_DWORD *)(*(_QWORD *)&v43 + 144) - 1;
            *(_DWORD *)(*(_QWORD *)&v43 + 144) = v44;
            if (!v44)
            {
              *(_QWORD *)(*(_QWORD *)&v43 + 40) = v39;
              v39 = (int32x2_t *)v43;
            }
          }
          v41 = 0;
          v40 = 1;
        }
        while ((v42 & 1) != 0);
        v37 = v38;
        v38 = v39;
      }
      while (v39);
      v93 = v10;
      v45 = v5;
      v46 = v4;
      v47 = v3;
      (*(void (**)(int32x2_t *, CA::Shape **))(*(_QWORD *)v32 + 56))(v32, v98);
      CA::BoundsImpl::Union(v32 + 24, (int32x2_t)v98[0], (int32x2_t)v98[1]);
      if (v32[5])
      {
        v49 = v32 + 16;
        v50 = v32;
        do
        {
          v95[0] = 0;
          v95[1] = 0;
          CA::Shape::get_bounds((uint64_t)&v50[18], (int *)v95);
          if (v50 == v32)
          {
            if (v32[17].i32[0] < 0)
              (*(void (**)(int32x2_t *, int32x2_t *))(*(_QWORD *)v32 + 40))(v32, v32 + 16);
            v59 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, (int32x2_t)v95[1]);
            if ((vpmax_u32(v59, v59).u32[0] & 0x80000000) == 0)
            {
              v60 = v32[17];
              v61 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v60);
              if ((vpmax_u32(v61, v61).u32[0] & 0x80000000) != 0
                || (*(int32x2_t *)&v62 = vmax_s32((int32x2_t)v95[0], *v49),
                    v63 = vsub_s32(vmin_s32(vadd_s32((int32x2_t)v95[0], (int32x2_t)v95[1]), vadd_s32(*v49, v60)), *(int32x2_t *)&v62), v64 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v63), (vpmax_u32(v64, v64).u32[0] & 0x80000000) != 0))
              {
                v95[1] = 0;
              }
              else
              {
                *((int32x2_t *)&v62 + 1) = v63;
                *(_OWORD *)v95 = v62;
              }
            }
          }
          else
          {
            (*(void (**)(int32x2_t *, CA::Shape **))(*(_QWORD *)v50 + 48))(v50, v95);
            v51 = v50 + 16;
            if (v50[17].i32[0] < 0)
              (*(void (**)(int32x2_t *, int32x2_t *))(*(_QWORD *)v50 + 40))(v50, v50 + 16);
            v52 = v95[1];
            v53 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, (int32x2_t)v95[1]);
            if ((vpmax_u32(v53, v53).u32[0] & 0x80000000) == 0)
            {
              v54 = v50[17];
              v55 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v54);
              if ((vpmax_u32(v55, v55).u32[0] & 0x80000000) != 0
                || (v56 = vadd_s32(*v51, v54),
                    *(int32x2_t *)&v57 = vmax_s32((int32x2_t)v95[0], *v51),
                    v52 = (CA::Shape *)vsub_s32(vmin_s32(vadd_s32((int32x2_t)v95[0], (int32x2_t)v95[1]), v56), *(int32x2_t *)&v57), v58 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, (int32x2_t)v52), (vpmax_u32(v58, v58).u32[0] & 0x80000000) != 0))
              {
                v52 = 0;
                v95[1] = 0;
              }
              else
              {
                *((_QWORD *)&v57 + 1) = v52;
                *(_OWORD *)v95 = v57;
              }
            }
            if ((v50[26].i16[2] & 0x200) != 0)
            {
              v65 = HIDWORD(v52);
              if ((int)v52 <= SHIDWORD(v52))
                v66 = HIDWORD(v52);
              else
                v66 = (int)v52;
              if ((int)v52 < SHIDWORD(v52))
                v65 = (int)v52;
              if (v66 <= 1073741822 && v65 >= 1)
              {
                v68 = (CA::Shape *)vadd_s32((int32x2_t)v95[0], (int32x2_t)-1);
                v69 = (int8x8_t)vadd_s32((int32x2_t)v52, (int32x2_t)0x200000002);
                if (v69.i32[1] < 1 || v69.i32[0] < 1)
                  v71 = -1;
                else
                  v71 = 0;
                v95[0] = v68;
                v95[1] = (CA::Shape *)vbic_s8(v69, (int8x8_t)vdup_n_s32(v71));
              }
            }
            CA::Shape::operator=((uint64_t)&v50[18], v95);
          }
          (*(void (**)(int32x2_t *, CA::Shape **))(*(_QWORD *)v50 + 64))(v50, v95);
          (*(void (**)(int32x2_t *, int32x2_t *))(*(_QWORD *)v50 + 72))(v50, v50 + 24);
          v50 = (int32x2_t *)v50[5];
        }
        while (v50);
      }
      if ((v32[26].i16[2] & 0x100) != 0)
      {
        v9 = v94;
        do
          v32 = (int32x2_t *)v32[3];
        while ((v32[26].i16[2] & 0x100) != 0);
      }
      else
      {
        v9 = v94;
      }
      v32[8] = (int32x2_t)v33;
      v3 = v47;
      v4 = v46;
      if (v9)
      {
        if ((v45 & 1) != 0)
        {
          if ((*(_BYTE *)(v8 + 34) & 0x10) == 0)
          {
            v72 = *(_QWORD *)(v8 + 16);
            v73 = *(const CA::Shape **)(v72 + 208);
            v74 = v93;
            if (v73 && (v75 = v97, CA::Shape::intersects(*(_QWORD *)(v72 + 208), (uint64_t)v97)))
            {
              v78 = (CA::Shape *)CA::Shape::subtract(v75, v73, v76, v77);
              v79 = v78;
              if ((v78 & 1) != 0 || *((int *)v78 + 1) <= 64)
              {
                if ((v91 & 1) != 0)
                  CA::Shape::unref(v75);
                v97 = v79;
                v80 = *(_QWORD *)(v8 + 112);
                v5 = 1;
                if (!v80)
                {
LABEL_114:
                  v91 = 1;
                  goto LABEL_123;
                }
                goto LABEL_143;
              }
              v86 = *(_QWORD *)(*(_QWORD *)(v8 + 24) + 144);
              if (v86)
                *(_QWORD *)(v86 + 96) |= 0x200000uLL;
              CA::Shape::unref(v78);
              v5 = 0;
            }
            else
            {
              v5 = 1;
            }
LABEL_122:
            v80 = *(_QWORD *)(v8 + 112);
            if (!v80)
            {
LABEL_123:
              if (((*a1)[52].top & 0x10) != 0)
              {
                v82 = v97;
                if ((v97 & 1) == 0)
                {
                  v83 = *((_DWORD *)v97 + 1);
                  if (v83 != 6 && v83 != 12)
                  {
                    v95[0] = 0;
                    v95[1] = 0;
                    CA::Shape::get_bounds((uint64_t)v97, (int *)v95);
                    if ((v91 & 1) != 0)
                      CA::Shape::unref(v82);
                    v97 = (CA::Shape *)CA::Shape::new_shape((CA::Shape *)v95, v85);
                    v91 = 1;
                  }
                }
              }
              goto LABEL_132;
            }
            if ((v91 & 1) == 0)
            {
              v97 = (CA::Shape *)CA::Shape::ref((unint64_t)v97, v48);
              v80 = *(_QWORD *)(v8 + 112);
            }
LABEL_143:
            v95[0] = 0;
            v95[1] = 0;
            CA::Shape::get_bounds(v80 + 144, (int *)v95);
            CA::shape_union(&v97, v95, v87);
            goto LABEL_114;
          }
          v5 = 1;
        }
        else
        {
          v5 = 0;
        }
        v74 = v93;
        goto LABEL_122;
      }
      v5 = v45;
      v74 = v93;
LABEL_132:
      *(_QWORD *)v8 = v74;
      (*(void (**)(_QWORD))(**(_QWORD **)(v8 + 104) + 96))(*(_QWORD *)(v8 + 104));
      if (!v9)
        goto LABEL_144;
    }
    if (*(_DWORD *)(v81 + 4) != 6)
      goto LABEL_51;
LABEL_136:
    CA::OGL::Renderer::dealloc_layer((CA::OGL::Renderer *)a1, v8);
    v8 = v10;
  }
  while (v9);
LABEL_144:
  if ((v91 & 1) != 0)
    CA::Shape::unref(v97);
  return v8;
}

unint64_t CA::Shape::ref(unint64_t this, const CA::Bounds *a2)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  malloc_zone_t *malloc_zone;
  int v9;
  unsigned int *v10;
  unsigned int v11;
  _DWORD v12[4];
  uint64_t v13;

  v2 = (unsigned int *)this;
  v13 = *MEMORY[0x1E0C80C00];
  if ((this & 1) == 0)
  {
    if (*(_DWORD *)this)
    {
      do
        v3 = __ldaxr((unsigned int *)this);
      while (__stlxr(v3 + 1, (unsigned int *)this));
    }
    else
    {
      v4 = *(unsigned int *)(this + 4);
      if ((_DWORD)v4 == 6)
      {
        return 1;
      }
      else if ((_DWORD)v4 == 12)
      {
        v5 = *(_DWORD *)(this + 20);
        v6 = *(_DWORD *)(this + 32);
        v12[0] = *(_DWORD *)(this + 28);
        v12[1] = v5;
        v7 = *(_DWORD *)(this + 36) - v5;
        v12[2] = v6 - v12[0];
        v12[3] = v7;
        return CA::Shape::new_shape((CA::Shape *)v12, a2);
      }
      else if ((v4 & 0x80000000) != 0)
      {
        return 0;
      }
      else
      {
        malloc_zone = (malloc_zone_t *)get_malloc_zone();
        this = (unint64_t)malloc_type_zone_malloc(malloc_zone, 4 * v4, 0x8BB15036uLL);
        if (this)
        {
          if ((_DWORD)v4)
          {
            v9 = v4;
            v10 = (unsigned int *)this;
            do
            {
              v11 = *v2++;
              *v10++ = v11;
              --v9;
            }
            while (v9);
          }
          *(_DWORD *)this = 1;
          *(_DWORD *)(this + 8) = v4;
        }
      }
    }
  }
  return this;
}

BOOL CA::Shape::intersects(uint64_t this, int32x2_t *a2)
{
  BOOL v2;
  int v5;
  int32x2_t v6;
  int32x2_t v7;
  unsigned int v8;
  uint32x2_t v9;
  int32x2_t v10;
  uint32x2_t v11;
  uint32x2_t v12;
  _OWORD v13[3];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a2[1].i32[0])
    v2 = a2[1].i32[1] == 0;
  else
    v2 = 1;
  if (!v2)
  {
    if ((this & 1) != 0)
    {
      if (this != 1)
      {
        v6.i32[0] = this >> 48;
        v6.i32[1] = (int)((unint64_t)this >> 16) >> 16;
        v7.i32[0] = this >> 17;
        v8 = (this >> 2) & 0x7FFF;
LABEL_14:
        v7.i32[1] = v8;
        v9 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v7);
        if ((vpmax_u32(v9, v9).u32[0] & 0x80000000) == 0)
        {
          v10 = a2[1];
          v11 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v10);
          if ((vpmax_u32(v11, v11).u32[0] & 0x80000000) == 0)
          {
            v12 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, vsub_s32(vmin_s32(vadd_s32(v6, v7), vadd_s32(*a2, v10)), vmax_s32(v6, *a2)));
            return vpmax_u32(v12, v12).i32[0] >= 0;
          }
        }
      }
    }
    else
    {
      v5 = *(_DWORD *)(this + 4);
      if (v5 != 6)
      {
        if (v5 != 12)
        {
          memset(v13, 0, sizeof(v13));
          CA::Shape::operator=((uint64_t)v13, a2);
          return CA::Shape::intersects(this, (uint64_t)v13);
        }
        v6.i32[0] = *(_DWORD *)(this + 28);
        v6.i32[1] = *(_DWORD *)(this + 20);
        v7.i32[0] = *(_DWORD *)(this + 32) - v6.i32[0];
        v8 = *(_DWORD *)(this + 36) - v6.i32[1];
        goto LABEL_14;
      }
    }
  }
  return 0;
}

uint64_t CA::OGL::LayerNode::prepare_sublayers_roi_if_needed(uint64_t this)
{
  uint64_t v1;

  if ((*(_BYTE *)(this + 224) & 2) == 0)
  {
    v1 = this;
    CA::OGL::LayerNode::prepare_sublayers_if_needed((_QWORD *)this);
    this = CA::OGL::prepare_layers_roi(*(const Rect ***)(v1 + 8), *(_QWORD **)(v1 + 232), v1 + 56);
    *(_QWORD *)(v1 + 232) = this;
    *(_BYTE *)(v1 + 224) |= 2u;
  }
  return this;
}

uint64_t CA::Shape::get_bounds(uint64_t result, int *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  signed int v6;
  int v7;
  int v8;
  uint64_t v9;
  int *v10;

  if ((result & 1) != 0)
  {
    *a2 = result >> 48;
    a2[1] = (int)((unint64_t)result >> 16) >> 16;
    a2[2] = result >> 17;
    a2[3] = (result >> 2) & 0x7FFF;
  }
  else
  {
    v2 = *(_DWORD *)(result + 4);
    if (v2 == 12)
    {
      *a2 = *(_DWORD *)(result + 28);
      a2[1] = *(_DWORD *)(result + 20);
      a2[2] = *(_DWORD *)(result + 32) - *(_DWORD *)(result + 28);
      v3 = *(_DWORD *)(result + 36) - *(_DWORD *)(result + 20);
    }
    else
    {
      if (v2 == 6)
      {
        *(_QWORD *)a2 = 0;
        *((_QWORD *)a2 + 1) = 0;
        return result;
      }
      v4 = *(_DWORD *)(result + 12);
      result += 12;
      v5 = *(_DWORD *)(result + 8);
      if (v4 == 0x7FFFFFFF)
      {
        v6 = 0x80000000;
        v7 = 0x7FFFFFFF;
        v8 = *(_DWORD *)(result + 8);
      }
      else
      {
        v6 = 0x80000000;
        v8 = *(_DWORD *)(result + 8);
        v7 = 0x7FFFFFFF;
        do
        {
          v9 = *(int *)(result + 4);
          v10 = (int *)(result + 4 * v9);
          if ((_DWORD)v9 != 2)
          {
            if (*(_DWORD *)(result + 8) < v7)
              v7 = *(_DWORD *)(result + 8);
            if (*(v10 - 1) > v6)
              v6 = *(v10 - 1);
            v8 = *v10;
          }
          result += 4 * v9;
        }
        while (*v10 != 0x7FFFFFFF);
      }
      *a2 = v7;
      a2[1] = v5;
      v3 = v8 - v5;
      a2[2] = v6 - v7;
    }
    a2[3] = v3;
  }
  return result;
}

void CA::shape_union(CA::Shape **this, CA::Shape **a2, const CA::Shape *a3)
{
  CA::Shape *v4;
  unint64_t v5;

  if ((a2 & 1) != 0)
  {
    if (a2 == (CA::Shape **)1)
      return;
LABEL_5:
    v4 = *this;
    if ((*this & 1) != 0)
    {
      if (v4 == (CA::Shape *)1)
        goto LABEL_7;
    }
    else if (*((_DWORD *)v4 + 1) == 6)
    {
LABEL_7:
      v5 = CA::Shape::ref((unint64_t)a2, (const CA::Bounds *)a2);
LABEL_10:
      *this = (CA::Shape *)v5;
      return;
    }
    v5 = CA::Shape::Union((uint64_t)*this, (uint64_t)a2);
    CA::Shape::unref(v4);
    goto LABEL_10;
  }
  if (*((_DWORD *)a2 + 1) != 6)
    goto LABEL_5;
}

uint64_t CA::OGL::ImagingNode::init_roi(uint64_t this, unsigned int a2)
{
  int v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = *(_DWORD *)(this + 208);
  if (v2 != a2)
  {
    v4 = this;
    if (v2)
    {
      *(_DWORD *)(this + 216) = *(_DWORD *)(this + 216) & 0xFFC00000 | 0xF;
      *(_WORD *)(this + 212) &= 0xFCFFu;
    }
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(this + 16) + 16) + 25) & 4) != 0)
      goto LABEL_10;
    v5 = *(_QWORD *)(this + 88);
    if (v5 != 0x3C003C003C003C00)
    {
      _H0 = WORD2(*(_QWORD *)(this + 88));
      _S1 = v5 >> 16;
      _H2 = *(_QWORD *)(this + 88);
      __asm
      {
        FCVT            S0, H0
        FCVT            S0, H2
        FCVT            S0, H1
      }
      if (!(_NF ^ _VF | _ZF) || _S0 > 1.0)
LABEL_10:
        *(_DWORD *)(this + 216) |= 0x1000u;
    }
    v17 = 0;
    *(_DWORD *)(this + 208) = a2;
    *(_DWORD *)(this + 144) = 0;
    v18 = 1;
    *(_QWORD *)(this + 64) = 0;
    do
    {
      v19 = v18;
      v20 = v4 + 8 * v17;
      v22 = *(_QWORD *)(v20 + 24);
      v21 = v20 + 24;
      this = v22;
      if (v22)
      {
        this = CA::OGL::ImagingNode::init_roi((CA::OGL::ImagingNode *)this, a2);
        ++*(_DWORD *)(*(_QWORD *)v21 + 144);
      }
      v18 = 0;
      v17 = 1;
    }
    while ((v19 & 1) != 0);
  }
  return this;
}

uint64_t CA::OGL::LayerNode::add_roi(int32x2_t *this, int32x2_t *a2)
{
  uint64_t result;
  int32x2_t v4;
  _QWORD *i;
  uint64_t v6;
  int32x2_t v7[3];

  v7[2] = *(int32x2_t *)MEMORY[0x1E0C80C00];
  result = CA::OGL::ImagingNode::add_roi(this, a2);
  v4 = this[2];
  if ((*(_BYTE *)(*(_QWORD *)&v4 + 33) & 2) != 0
    && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)&v4 + 16) + 24) & 0x18000) != 0)
  {
    result = CA::OGL::LayerNode::prepare_sublayers_roi_if_needed((uint64_t)this);
    for (i = (_QWORD *)this[29]; i; i = (_QWORD *)*i)
    {
      v6 = i[14];
      if (v6)
      {
        v7[0] = 0;
        v7[1] = 0;
        CA::Shape::get_bounds(v6 + 144, (int *)v7);
        result = CA::OGL::ImagingNode::add_roi(this, v7);
        this[27].i32[0] |= *(_DWORD *)(v6 + 216) & 0x40;
      }
    }
  }
  return result;
}

uint64_t CA::OGL::ImagingNode::add_roi(int32x2_t *this, int32x2_t *a2)
{
  int32x2_t v4;
  uint32x2_t v5;
  uint32x2_t v6;
  unsigned __int32 v7;
  int32x2_t v8;
  int32x2_t v10;
  int32x2_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (this[8])
  {
    v10 = 0;
    v11 = 0;
    CA::Shape::get_bounds((uint64_t)&this[18], (int *)&v10);
    v4 = a2[1];
    v5 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v11);
    v6 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v4);
    v7 = vpmax_u32(v6, v6).u32[0];
    if ((vpmax_u32(v5, v5).u32[0] & 0x80000000) != 0)
    {
      if ((v7 & 0x80000000) == 0)
      {
        v8 = *a2;
        goto LABEL_8;
      }
    }
    else if ((v7 & 0x80000000) == 0)
    {
      v8 = vmin_s32(v10, *a2);
      v4 = vsub_s32(vmax_s32(vadd_s32(v10, v11), vadd_s32(*a2, v4)), v8);
LABEL_8:
      v10 = v8;
      v11 = v4;
    }
    CA::Shape::operator=((uint64_t)&this[18], &v10);
    return CA::BoundsImpl::Union(this + 24, *a2, a2[1]);
  }
  this[8] = (int32x2_t)CA::Shape::operator=((uint64_t)&this[18], a2);
  return CA::BoundsImpl::Union(this + 24, *a2, a2[1]);
}

uint64_t CA::Shape::operator=(uint64_t result, _DWORD *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if ((int)a2[2] < 1 || (int)a2[3] < 1)
  {
    *(_QWORD *)result = 0x600000000;
    v2 = 0x80000000;
    v3 = 5;
    v4 = 4;
    v5 = 3;
  }
  else
  {
    *(_QWORD *)result = 0xC00000000;
    *(_QWORD *)(result + 12) = 0x280000000;
    *(_DWORD *)(result + 20) = a2[1];
    *(_DWORD *)(result + 24) = 4;
    *(_DWORD *)(result + 28) = *a2;
    *(_DWORD *)(result + 32) = a2[2] + *a2;
    v2 = a2[3] + a2[1];
    v3 = 11;
    v4 = 10;
    v5 = 9;
  }
  *(_DWORD *)(result + 4 * v5) = v2;
  *(_DWORD *)(result + 4 * v4) = 2;
  *(_DWORD *)(result + 4 * v3) = 0x7FFFFFFF;
  return result;
}

unint64_t CA::Shape::Union(uint64_t this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  unint64_t v19;
  int *v21;
  uint64_t v22;
  int v23;
  int v24;
  int *v25;
  int *v26;
  const int *v27;
  int *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  int v34;
  int *v35;
  int *v36;
  int *v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int *v44;
  char *v45;
  unint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  __int128 *v52;
  int *v53;
  int *v54;
  char *v55;
  __int128 v56;
  int v57;
  _BYTE v58[2036];
  _DWORD v59[8];
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;

  v2 = a2;
  v3 = this;
  v64 = *MEMORY[0x1E0C80C00];
  if ((this & 1) != 0)
  {
    if (this == 1)
    {
LABEL_38:
      v19 = v2;
      return CA::Shape::ref(v19, (const CA::Bounds *)a2);
    }
  }
  else if (*(_DWORD *)(this + 4) == 6)
  {
    goto LABEL_38;
  }
  if ((a2 & 1) != 0)
  {
    if (a2 == 1)
      goto LABEL_33;
  }
  else if (*(_DWORD *)(a2 + 4) == 6)
  {
    goto LABEL_33;
  }
  v50 = 0;
  v51 = 0;
  if ((this & 1) == 0)
  {
    if (*(_DWORD *)(this + 4) != 12)
      goto LABEL_11;
LABEL_15:
    if ((a2 & 1) != 0)
    {
      if (a2 == 1)
      {
LABEL_17:
        if ((this & 1) != 0)
        {
          v8 = this >> 48;
          v7 = this << 16 >> 48;
          v9 = this >> 17;
          v10 = (this >> 2) & 0x7FFF;
        }
        else
        {
          LODWORD(v7) = *(_DWORD *)(this + 20);
          LODWORD(v8) = *(_DWORD *)(this + 28);
          v9 = *(_DWORD *)(this + 32) - v8;
          v10 = *(_DWORD *)(this + 36) - v7;
        }
        v50 = __PAIR64__(v7, v8);
        v51 = __PAIR64__(v10, v9);
        if (CA::Shape::contains(a2, (const CA::Bounds *)&v50))
          goto LABEL_38;
        goto LABEL_42;
      }
    }
    else if (*(_DWORD *)(a2 + 4) != 12)
    {
      goto LABEL_17;
    }
    if ((this & 1) != 0)
    {
      v12 = this >> 48;
      v11 = this << 16 >> 48;
      v14 = ((this >> 2) & 0x7FFF) + v11;
      v13 = (this >> 48) + (this >> 17);
      if ((a2 & 1) != 0)
        goto LABEL_22;
    }
    else
    {
      LODWORD(v11) = *(_DWORD *)(this + 20);
      LODWORD(v12) = *(_DWORD *)(this + 28);
      v13 = *(_DWORD *)(this + 32);
      v14 = *(_DWORD *)(this + 36);
      if ((a2 & 1) != 0)
      {
LABEL_22:
        v15 = a2 >> 48;
        v16 = a2 << 16 >> 48;
        v17 = ((a2 >> 2) & 0x7FFF) + v16;
        v18 = (a2 >> 48) + (a2 >> 17);
        goto LABEL_29;
      }
    }
    LODWORD(v16) = *(_DWORD *)(a2 + 20);
    LODWORD(v15) = *(_DWORD *)(a2 + 28);
    v18 = *(_DWORD *)(a2 + 32);
    v17 = *(_DWORD *)(a2 + 36);
LABEL_29:
    if ((int)v12 <= (int)v15 && (int)v11 <= (int)v16 && v13 >= v18 && v14 >= v17)
      goto LABEL_33;
    if ((int)v12 >= (int)v15 && (int)v11 >= (int)v16 && v13 <= v18 && v14 <= v17)
      goto LABEL_38;
    goto LABEL_42;
  }
  if (this != 1)
    goto LABEL_15;
LABEL_11:
  if ((a2 & 1) != 0)
  {
    if (a2 == 1)
      goto LABEL_42;
    LODWORD(v50) = a2 >> 48;
    HIDWORD(v50) = (int)((unint64_t)a2 >> 16) >> 16;
    LODWORD(v51) = a2 >> 17;
    v6 = (a2 >> 2) & 0x7FFF;
  }
  else
  {
    if (*(_DWORD *)(a2 + 4) != 12)
      goto LABEL_42;
    v4 = *(_DWORD *)(a2 + 20);
    v5 = *(_DWORD *)(a2 + 32);
    LODWORD(v50) = *(_DWORD *)(a2 + 28);
    HIDWORD(v50) = v4;
    LODWORD(v51) = v5 - v50;
    v6 = *(_DWORD *)(a2 + 36) - v4;
  }
  HIDWORD(v51) = v6;
  if (CA::Shape::contains(this, (const CA::Bounds *)&v50))
  {
LABEL_33:
    v19 = v3;
    return CA::Shape::ref(v19, (const CA::Bounds *)a2);
  }
LABEL_42:
  v56 = xmmword_18474E610;
  v57 = 2;
  v21 = (int *)v58;
  v52 = &v56;
  v53 = (int *)v58;
  v54 = (int *)v58;
  v55 = (char *)&v56 + 12;
  *(_QWORD *)&v58[2028] = 0;
  v62 = 0u;
  v63 = 0u;
  v61 = 0u;
  if ((v3 & 1) != 0)
  {
    v61 = xmmword_18474E620;
    LODWORD(v62) = 2;
    DWORD1(v62) = (int)((unint64_t)v3 >> 16) >> 16;
    DWORD2(v62) = 4;
    HIDWORD(v62) = v3 >> 48;
    LODWORD(v63) = HIDWORD(v62) + (v3 >> 17);
    DWORD1(v63) = ((v3 >> 2) & 0x7FFF) + DWORD1(v62);
    *((_QWORD *)&v63 + 1) = 0x7FFFFFFF00000002;
    v3 = (uint64_t)&v61;
  }
  v60 = 0uLL;
  memset(v59, 0, sizeof(v59));
  if ((v2 & 1) != 0)
  {
    *(_QWORD *)&v59[3] = 0x280000000;
    v59[1] = 12;
    v59[5] = (int)((unint64_t)v2 >> 16) >> 16;
    v59[6] = 4;
    v59[7] = v2 >> 48;
    LODWORD(v60) = v59[7] + (v2 >> 17);
    DWORD1(v60) = ((v2 >> 2) & 0x7FFF) + v59[5];
    *((_QWORD *)&v60 + 1) = 0x7FFFFFFF00000002;
    v2 = (uint64_t)v59;
  }
  v24 = *(_DWORD *)(v3 + 12);
  v22 = v3 + 12;
  v23 = v24;
  v25 = (int *)(v2 + 12);
  if (v24 != 0x7FFFFFFF)
  {
    v28 = (int *)(v2 + 12);
    v27 = (const int *)v22;
    while (1)
    {
      v29 = *v28;
      if (*v28 == 0x7FFFFFFF)
        return CA::ShapeHandle::finish((CA::ShapeHandle *)&v52, v27);
      if (v23 - v29 >= 1)
        break;
      v30 = v27[1];
      if (((v23 - v29) & 0x80000000) == 0)
      {
        v22 = (uint64_t)v27;
        v27 += v30;
        goto LABEL_56;
      }
      LODWORD(v31) = v25[1];
      v22 = (uint64_t)v27;
      v27 += v30;
      v26 = v28;
LABEL_57:
      v32 = v30 - 2;
      v33 = v30 - 2 + v31;
      if (*((int *)v52 + 2) < ((char *)&v21[v33] - (char *)v52) >> 2)
      {
        if (!CA::ShapeHandle::grow((CA::ShapeHandle *)&v52, v33))
        {
          if (*v27 != 0x7FFFFFFF)
            return CA::ShapeHandle::finish((CA::ShapeHandle *)&v52, v27);
          goto LABEL_48;
        }
        v21 = v53;
      }
      v34 = v31 - 2;
      *v21 = v23;
      v35 = v21 + 2;
      v53 = v21 + 2;
      v21[1] = 0;
      v36 = (int *)(v22 + 8);
      v37 = v25 + 2;
      if (v32 && (_DWORD)v31 != 2)
      {
        v38 = 0;
        while (1)
        {
          v39 = *v36;
          v40 = *v37;
          v41 = *v36 - *v37;
          if (*v36 > *v37)
            break;
          v42 = v38 ^ 1;
          ++v36;
          --v32;
          if ((v41 & 0x80000000) == 0)
            goto LABEL_66;
          v40 = v39;
          if (v38)
          {
LABEL_67:
            if (v42)
              goto LABEL_69;
          }
LABEL_68:
          *v35++ = v40;
          v53 = v35;
LABEL_69:
          if (v32)
          {
            v38 = v42;
            if (v34)
              continue;
          }
          goto LABEL_74;
        }
        v42 = v38;
LABEL_66:
        v42 ^= 2u;
        ++v37;
        --v34;
        if (v38)
          goto LABEL_67;
        goto LABEL_68;
      }
LABEL_74:
      if (v32)
        v34 = v32;
      if (v34)
      {
        if (!v32)
          v36 = v37;
        do
        {
          v43 = *v36++;
          *v35++ = v43;
          --v34;
        }
        while (v34);
        v53 = v35;
      }
      v44 = v54;
      v45 = v55;
      v46 = (unint64_t)((char *)v35 - (char *)v54) >> 2;
      v54[1] = v46;
      if (v45 && *((_DWORD *)v45 + 1) == (_DWORD)v46)
      {
        v47 = 2;
        while ((_DWORD)v46 != (_DWORD)v47)
        {
          v48 = v44[v47];
          v49 = *(_DWORD *)&v45[4 * v47++];
          if (v48 != v49)
            goto LABEL_86;
        }
        v53 = v44;
        v35 = v44;
      }
      else
      {
LABEL_86:
        v54 = v35;
        v55 = (char *)v44;
      }
      v23 = *v27;
      v21 = v35;
      v28 = v26;
      if (*v27 == 0x7FFFFFFF)
        goto LABEL_48;
    }
    LODWORD(v30) = *(_DWORD *)(v22 + 4);
LABEL_56:
    v31 = v28[1];
    v26 = &v28[v31];
    v25 = v28;
    v23 = *v28;
    goto LABEL_57;
  }
  v26 = (int *)(v2 + 12);
LABEL_48:
  v27 = v26;
  return CA::ShapeHandle::finish((CA::ShapeHandle *)&v52, v27);
}

uint64_t CA::Shape::intersect(uint64_t this, uint64_t a2)
{
  __int128 *v2;
  uint64_t result;
  _DWORD *v4;
  _DWORD *v5;
  int v6;
  int v7;
  char *v8;
  _DWORD *v9;
  _DWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  int v15;
  unsigned int v16;
  _DWORD *v17;
  int v18;
  int v19;
  int *v20;
  int *v21;
  int v22;
  int v23;
  int v24;
  int v25;
  _BYTE *v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  BOOL v42;
  int v43;
  __int128 *v44;
  _BYTE *v45;
  _BYTE *v46;
  char *v47;
  __int128 v48;
  int v49;
  _BYTE v50[2036];
  _DWORD v51[8];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;

  v2 = (__int128 *)this;
  v56 = *MEMORY[0x1E0C80C00];
  if ((this & 1) != 0)
  {
    if (this == 1)
      return 1;
  }
  else if (*(_DWORD *)(this + 4) == 6)
  {
    return 1;
  }
  if ((a2 & 1) != 0)
  {
    if (a2 == 1)
      return 1;
  }
  else if (*(_DWORD *)(a2 + 4) == 6)
  {
    return 1;
  }
  if ((this & 1) != 0)
  {
    if (this == 1)
    {
LABEL_15:
      v48 = xmmword_18474E610;
      v49 = 2;
      v4 = v50;
      v44 = &v48;
      v45 = v50;
      v46 = v50;
      v47 = (char *)&v48 + 12;
      *(_QWORD *)&v50[2028] = 0;
      v54 = 0u;
      v55 = 0u;
      v53 = 0u;
      if ((this & 1) != 0)
      {
        v53 = xmmword_18474E620;
        LODWORD(v54) = 2;
        DWORD1(v54) = (int)((unint64_t)this >> 16) >> 16;
        DWORD2(v54) = 4;
        HIDWORD(v54) = this >> 48;
        LODWORD(v55) = HIDWORD(v54) + (this >> 17);
        DWORD1(v55) = ((this >> 2) & 0x7FFF) + DWORD1(v54);
        *((_QWORD *)&v55 + 1) = 0x7FFFFFFF00000002;
        v2 = &v53;
      }
      v52 = 0uLL;
      memset(v51, 0, sizeof(v51));
      if ((a2 & 1) != 0)
      {
        *(_QWORD *)&v51[3] = 0x280000000;
        v51[1] = 12;
        v51[5] = (int)((unint64_t)a2 >> 16) >> 16;
        v51[6] = 4;
        v51[7] = a2 >> 48;
        LODWORD(v52) = v51[7] + (a2 >> 17);
        DWORD1(v52) = ((a2 >> 2) & 0x7FFF) + v51[5];
        *((_QWORD *)&v52 + 1) = 0x7FFFFFFF00000002;
        a2 = (uint64_t)v51;
      }
      v7 = *((_DWORD *)v2 + 3);
      v5 = (_DWORD *)v2 + 3;
      v6 = v7;
      if (v7 == 0x7FFFFFFF)
        return CA::ShapeHandle::finish((CA::ShapeHandle *)&v44, 0);
      v8 = (char *)(a2 + 12);
      v9 = (_DWORD *)(a2 + 12);
      v10 = v5;
      while (1)
      {
        v11 = *v9;
        if (*v9 == 0x7FFFFFFF)
          return CA::ShapeHandle::finish((CA::ShapeHandle *)&v44, 0);
        if (v6 - v11 >= 1)
          break;
        v12 = (int)v10[1];
        if (((v6 - v11) & 0x80000000) == 0)
        {
          v5 = v10;
          v10 += v12;
          goto LABEL_27;
        }
        LODWORD(v13) = *((_DWORD *)v8 + 1);
        v5 = v10;
        v10 += v12;
        v14 = v9;
LABEL_28:
        v15 = v12 - 2;
        v16 = v12 - 2 + v13;
        if (*((int *)v44 + 2) < ((char *)&v4[v16] - (char *)v44) >> 2)
        {
          if (!CA::ShapeHandle::grow((CA::ShapeHandle *)&v44, v16))
            return CA::ShapeHandle::finish((CA::ShapeHandle *)&v44, 0);
          v4 = v45;
        }
        *v4 = v6;
        v17 = v4 + 2;
        v45 = v4 + 2;
        v4[1] = 0;
        if (v15)
        {
          v18 = v13 - 2;
          if ((_DWORD)v13 != 2)
          {
            v19 = 0;
            v20 = (int *)(v8 + 8);
            v21 = v5 + 2;
            while (1)
            {
              v22 = *v21;
              v23 = *v20;
              v24 = *v21 - *v20;
              if (*v21 > *v20)
                break;
              ++v21;
              --v15;
              v25 = v19 ^ 1;
              if ((v24 & 0x80000000) == 0)
                goto LABEL_37;
              v23 = v22;
LABEL_38:
              if (v19 == 3 || v25 == 3)
              {
                *v17++ = v23;
                v45 = v17;
              }
              if (v15)
              {
                v19 = v25;
                if (v18)
                  continue;
              }
              goto LABEL_45;
            }
            v25 = v19;
LABEL_37:
            ++v20;
            --v18;
            v25 ^= 2u;
            goto LABEL_38;
          }
        }
LABEL_45:
        v26 = v46;
        v27 = v47;
        v28 = (unint64_t)((char *)v17 - v46) >> 2;
        *((_DWORD *)v46 + 1) = v28;
        if (v27 && *((_DWORD *)v27 + 1) == (_DWORD)v28)
        {
          v29 = 2;
          while ((_DWORD)v28 != (_DWORD)v29)
          {
            v30 = *(_DWORD *)&v26[4 * v29];
            v31 = *(_DWORD *)&v27[4 * v29++];
            if (v30 != v31)
              goto LABEL_50;
          }
          v45 = v26;
          v17 = v26;
        }
        else
        {
LABEL_50:
          v46 = v17;
          v47 = v26;
        }
        v6 = *v10;
        v4 = v17;
        v9 = v14;
        if (*v10 == 0x7FFFFFFF)
          return CA::ShapeHandle::finish((CA::ShapeHandle *)&v44, 0);
      }
      LODWORD(v12) = v5[1];
LABEL_27:
      v13 = (int)v9[1];
      v14 = &v9[v13];
      v8 = (char *)v9;
      v6 = *v9;
      goto LABEL_28;
    }
  }
  else if (*(_DWORD *)(this + 4) != 12)
  {
    goto LABEL_15;
  }
  if ((a2 & 1) != 0)
  {
    if (a2 == 1)
      goto LABEL_15;
  }
  else if (*(_DWORD *)(a2 + 4) != 12)
  {
    goto LABEL_15;
  }
  if ((this & 1) != 0)
  {
    v33 = this >> 48;
    v32 = this << 16 >> 48;
    v35 = ((this >> 2) & 0x7FFF) + v32;
    v34 = (this >> 48) + (this >> 17);
    if ((a2 & 1) != 0)
      goto LABEL_58;
LABEL_60:
    LODWORD(v37) = *(_DWORD *)(a2 + 20);
    LODWORD(v36) = *(_DWORD *)(a2 + 28);
    v39 = *(_DWORD *)(a2 + 32);
    v38 = *(_DWORD *)(a2 + 36);
    goto LABEL_61;
  }
  LODWORD(v32) = *(_DWORD *)(this + 20);
  LODWORD(v33) = *(_DWORD *)(this + 28);
  v34 = *(_DWORD *)(this + 32);
  v35 = *(_DWORD *)(this + 36);
  if ((a2 & 1) == 0)
    goto LABEL_60;
LABEL_58:
  v36 = a2 >> 48;
  v37 = a2 << 16 >> 48;
  v38 = ((a2 >> 2) & 0x7FFF) + v37;
  v39 = (a2 >> 48) + (a2 >> 17);
LABEL_61:
  if ((int)v33 >= (int)v36 && (int)v32 >= (int)v37 && v34 <= v39 && v35 <= v38)
    return CA::Shape::ref(this, (const CA::Bounds *)a2);
  if ((int)v33 <= (int)v36 && (int)v32 <= (int)v37 && v34 >= v39 && v35 >= v38)
  {
    this = a2;
    return CA::Shape::ref(this, (const CA::Bounds *)a2);
  }
  if ((int)v33 <= (int)v36)
    LODWORD(v33) = v36;
  if ((int)v32 <= (int)v37)
    LODWORD(v32) = v37;
  if (v34 >= v39)
    v40 = v39;
  else
    v40 = v34;
  if (v35 >= v38)
    v41 = v38;
  else
    v41 = v35;
  result = 1;
  if (v40 > (int)v33)
  {
    v42 = __OFSUB__(v41, (_DWORD)v32);
    v43 = v41 - v32;
    if (!((v43 < 0) ^ v42 | (v43 == 0)))
    {
      v44 = (__int128 *)__PAIR64__(v32, v33);
      LODWORD(v45) = v40 - v33;
      HIDWORD(v45) = v43;
      return CA::Shape::new_shape((CA::Shape *)&v44, (const CA::Bounds *)a2);
    }
  }
  return result;
}

uint64_t CA::Render::`anonymous namespace'::invalidate_rasterized_backdrops(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if ((*(_BYTE *)(result + 99) & 0x20) != 0)
  {
    if (*(_DWORD *)(a2 + 80) == a3)
    {
      v3 = *(_QWORD *)(result + 16);
      v4 = *(_DWORD *)(v3 + 40);
      if (*(_DWORD *)(a2 + 76) == v4)
        return result;
    }
    else
    {
      v3 = *(_QWORD *)(result + 16);
      v4 = *(_DWORD *)(v3 + 40);
    }
    *(_DWORD *)(a2 + 76) = v4;
    *(_DWORD *)(a2 + 80) = a3;
    v5 = *(_QWORD *)(result + 8);
    if (v5)
    {
      v6 = *(_QWORD *)(v3 + 32);
      do
      {
        v7 = *(_QWORD *)(v5 + 40);
        if (v7)
          *(_DWORD *)(v7 + 76) = a3;
        if (v5 == v6)
          break;
        v5 = *(_QWORD *)(v5 + 88);
      }
      while (v5);
    }
  }
  return result;
}

uint64_t CA::ShapeHandle::finish(CA::ShapeHandle *this, const int *a2)
{
  const int *v3;
  int v4;
  uint64_t v5;
  int *v6;
  _DWORD *v7;
  int v8;
  int *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int v17;
  const int *v18;
  uint64_t v19;
  _DWORD *v20;
  int v21;
  char *v22;
  int *v23;
  char *v24;
  malloc_zone_t *malloc_zone;
  _QWORD *v26;
  unint64_t v27;
  int v28;
  _DWORD *v29;
  int64_t v30;
  unint64_t v31;
  int *v32;
  malloc_zone_t *v33;
  malloc_zone_t *v34;
  _DWORD *v35;
  int *v36;
  int v37;
  _DWORD *v38;
  int v39;
  void *v40;
  malloc_zone_t *v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  if (!a2)
    goto LABEL_26;
  v3 = a2;
  v4 = *a2;
  if (*a2 == 0x7FFFFFFF)
    goto LABEL_26;
  v5 = *((unsigned int *)a2 + 1);
  v6 = (int *)*((_QWORD *)this + 1);
  if (*(int *)(*(_QWORD *)this + 8) >= ((uint64_t)&v6[v5] - *(_QWORD *)this) >> 2)
    goto LABEL_6;
  if (CA::ShapeHandle::grow(this, v5))
  {
    v6 = (int *)*((_QWORD *)this + 1);
LABEL_6:
    *v6 = v4;
    v7 = v6 + 2;
    *((_QWORD *)this + 1) = v6 + 2;
    v6[1] = 0;
    v8 = v3[1] - 2;
    if (v3[1] != 2)
    {
      v9 = (int *)(v3 + 2);
      do
      {
        v10 = *v9++;
        *v7++ = v10;
        --v8;
      }
      while (v8);
      *((_QWORD *)this + 1) = v7;
    }
    v11 = *((_QWORD *)this + 2);
    v12 = *((_QWORD *)this + 3);
    v13 = ((unint64_t)v7 - v11) >> 2;
    *(_DWORD *)(v11 + 4) = v13;
    if (v12 && *(_DWORD *)(v12 + 4) == (_DWORD)v13)
    {
      v14 = 2;
      while ((_DWORD)v13 != (_DWORD)v14)
      {
        v15 = *(_DWORD *)(v11 + 4 * v14);
        v16 = *(_DWORD *)(v12 + 4 * v14++);
        if (v15 != v16)
          goto LABEL_15;
      }
      *((_QWORD *)this + 1) = v11;
    }
    else
    {
LABEL_15:
      *((_QWORD *)this + 2) = v7;
      *((_QWORD *)this + 3) = v11;
    }
    v3 += v3[1];
  }
  if (*v3 == 0x7FFFFFFF)
    goto LABEL_26;
  v17 = 0;
  v18 = v3;
  do
  {
    v19 = v18[1];
    v17 += v19;
    v18 += v19;
  }
  while (*v18 != 0x7FFFFFFF);
  v20 = (_DWORD *)*((_QWORD *)this + 1);
  if (*(int *)(*(_QWORD *)this + 8) < ((uint64_t)&v20[v17] - *(_QWORD *)this) >> 2)
  {
    if (!CA::ShapeHandle::grow(this, v17))
      goto LABEL_26;
    v20 = (_DWORD *)*((_QWORD *)this + 1);
  }
  for (; v17; --v17)
  {
    v21 = *v3++;
    *v20++ = v21;
  }
  *((_QWORD *)this + 1) = v20;
LABEL_26:
  v23 = *(int **)this;
  v22 = (char *)*((_QWORD *)this + 1);
  v24 = &v22[-*(_QWORD *)this];
  if (v24 == (char *)20)
  {
    if (v23 != (int *)((char *)this + 32))
    {
      malloc_zone = (malloc_zone_t *)get_malloc_zone();
      malloc_zone_free(malloc_zone, v23);
    }
    v26 = (_QWORD *)*((_QWORD *)this + 260);
    if (!v26)
      return 1;
LABEL_40:
    v27 = 0;
    *v26 = 0;
    v26[1] = 0;
    return v27;
  }
  if (v23[2] >= (uint64_t)(v24 + 8) >> 2
    || (v28 = CA::ShapeHandle::grow(this, 2), v22 = (char *)*((_QWORD *)this + 1), v28))
  {
    *(_DWORD *)v22 = 0x7FFFFFFF;
    v22 += 4;
    *((_QWORD *)this + 1) = v22;
  }
  v29 = *(_DWORD **)this;
  if (**(_DWORD **)this != 1)
  {
    if (v29 != (_DWORD *)((char *)this + 32))
    {
      v33 = (malloc_zone_t *)get_malloc_zone();
      malloc_zone_free(v33, v29);
    }
    v26 = (_QWORD *)*((_QWORD *)this + 260);
    if (!v26)
      return 0;
    goto LABEL_40;
  }
  v30 = v22 - (char *)v29;
  v31 = (unint64_t)(v22 - (char *)v29) >> 2;
  v29[1] = v31;
  v32 = (int *)*((_QWORD *)this + 260);
  if (v32)
  {
    CA::Shape::get_bounds((uint64_t)v29, v32);
    v27 = 0;
    goto LABEL_53;
  }
  if ((_DWORD)v31 != 12)
    goto LABEL_48;
  v43 = 0;
  v44 = 0;
  CA::Shape::get_bounds((uint64_t)v29, (int *)&v43);
  v27 = 1;
  if ((int)v44 >= 1 && SHIDWORD(v44) >= 1)
  {
    if (!((HIDWORD(v44) | v44) >> 15) && v43 == __PAIR64__(SWORD2(v43), (__int16)v43))
    {
      v27 = ((unint64_t)v43 << 48) | ((unint64_t)WORD2(v43) << 32) | ((unint64_t)v44 << 17) | (4 * (WORD2(v44) & 0x7FFF)) | 1;
      goto LABEL_53;
    }
LABEL_48:
    v34 = (malloc_zone_t *)get_malloc_zone();
    v35 = malloc_type_zone_malloc(v34, v30 & 0x3FFFFFFFCLL, 0x8BB15036uLL);
    v27 = (unint64_t)v35;
    if (v35)
    {
      if ((_DWORD)v31)
      {
        v36 = *(int **)this;
        v37 = v31;
        v38 = v35;
        do
        {
          v39 = *v36++;
          *v38++ = v39;
          --v37;
        }
        while (v37);
      }
      v35[1] = v31;
      v35[2] = v31;
    }
  }
LABEL_53:
  v40 = *(void **)this;
  if (*(CA::ShapeHandle **)this != (CA::ShapeHandle *)((char *)this + 32))
  {
    v41 = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(v41, v40);
  }
  return v27;
}

float CA::OGL::Context::raster_round_rect(CA::OGL::Context *this, const Rect *a2, double *a3)
{
  double v4;
  double v5;
  float result;
  double v9;
  float v10;
  float v11;
  unsigned int v12;
  float v13;
  int v14;
  double v15;
  float v16;
  float v17;
  float v18;
  unsigned int v19;
  unsigned int v20;

  v4 = a3[2];
  v5 = a3[3];
  if (v4 > v5)
    v5 = a3[2];
  if (v5 < 1073741820.0)
  {
    v9 = *a3;
    v10 = *a3;
    v11 = *(float *)&a2[99].bottom;
    v12 = vcvtms_s32_f32(v11 + v10);
    *(_DWORD *)this = v12;
    v13 = v9 + v4;
    *((_DWORD *)this + 2) = vcvtms_s32_f32(v11 + v13) - v12;
    v14 = (*(uint64_t (**)(const Rect *))(*(_QWORD *)a2 + 1104))(a2);
    v15 = a3[1];
    v16 = v15;
    v17 = *(float *)&a2[99].bottom;
    if (v14)
      v17 = 1.0 - v17;
    v18 = a3[3] + v15;
    v19 = vcvtms_s32_f32(v17 + v18);
    result = v17 + v16;
    v20 = vcvtms_s32_f32(v17 + v16);
    *((_DWORD *)this + 1) = v20;
    *((_DWORD *)this + 3) = v19 - v20;
  }
  else
  {
    result = -3.6893e19;
    *(_OWORD *)this = xmmword_18474E240;
  }
  return result;
}

uint64_t CA::OGL::MetalContext::destination_rotated_or_flipped(CA::OGL::MetalContext *this)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *((_QWORD *)this + 31);
  if (!v1)
    return 0;
  v2 = *(unsigned __int16 *)(v1 + 232);
  if ((v2 & 0x400) != 0)
    return 1;
  else
    return (v2 >> 9) & 1;
}

BOOL CA::Shape::intersects(uint64_t this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  char *v6;
  int v7;
  char *v8;
  char *v9;
  char *v10;
  int v11;
  int v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  _DWORD *v19;
  _DWORD *v20;
  int v21;
  int v22;
  _BOOL8 result;
  int32x2_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint32x2_t v29;
  uint32x2_t v30;
  uint32x2_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if ((this & 1) != 0)
  {
    if (this == 1)
      return 0;
  }
  else if (*(_DWORD *)(this + 4) == 6)
  {
    return 0;
  }
  if ((a2 & 1) != 0)
  {
    if (a2 == 1)
      return 0;
  }
  else if (*(_DWORD *)(a2 + 4) == 6)
  {
    return 0;
  }
  if ((this & 1) != 0)
  {
    if (this == 1)
    {
      v33 = 0u;
      v34 = 0u;
      v32 = 0u;
LABEL_21:
      v35 = xmmword_18474E620;
      LODWORD(v36) = 2;
      DWORD1(v36) = (int)((unint64_t)this >> 16) >> 16;
      DWORD2(v36) = 4;
      HIDWORD(v36) = this >> 48;
      LODWORD(v37) = HIDWORD(v36) + (this >> 17);
      DWORD1(v37) = ((this >> 2) & 0x7FFF) + DWORD1(v36);
      *((_QWORD *)&v37 + 1) = 0x7FFFFFFF00000002;
      this = (uint64_t)&v35;
      goto LABEL_22;
    }
  }
  else if (*(_DWORD *)(this + 4) != 12)
  {
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
LABEL_22:
    v6 = (char *)(this + 12);
    if ((a2 & 1) != 0)
    {
      v32 = xmmword_18474E620;
      LODWORD(v33) = 2;
      DWORD1(v33) = (int)((unint64_t)a2 >> 16) >> 16;
      DWORD2(v33) = 4;
      HIDWORD(v33) = a2 >> 48;
      LODWORD(v34) = HIDWORD(v33) + (a2 >> 17);
      DWORD1(v34) = ((a2 >> 2) & 0x7FFF) + DWORD1(v33);
      *((_QWORD *)&v34 + 1) = 0x7FFFFFFF00000002;
      a2 = (uint64_t)&v32;
    }
    v7 = *(_DWORD *)v6;
    if (*(_DWORD *)v6 == 0x7FFFFFFF)
      return 0;
    v8 = (char *)(a2 + 12);
    v9 = (char *)(this + 12);
    v10 = (char *)(a2 + 12);
    while (1)
    {
      v11 = *(_DWORD *)v10;
      if (*(_DWORD *)v10 == 0x7FFFFFFF)
        return 0;
      v12 = v7 - v11;
      if (v7 - v11 >= 1)
        break;
      v13 = *((int *)v6 + 1);
      v14 = &v6[4 * v13];
      if ((v12 & 0x80000000) == 0)
      {
        v9 = v6;
        goto LABEL_31;
      }
      LODWORD(v15) = *((_DWORD *)v8 + 1);
      v9 = v6;
LABEL_32:
      v16 = 0;
      v6 = v14;
      v17 = v13 - 2;
      v18 = v15 - 2;
      v19 = v9 + 8;
      v20 = v8 + 8;
      while (v17 && v18)
      {
        v21 = *v19 - *v20;
        v22 = v21 < 1;
        v19 += v21 < 1;
        v17 -= v22;
        v16 ^= v22;
        v20 += v21 >= 0;
        v18 -= v21 >= 0;
        if (v21 >= 0)
          v16 ^= 2u;
        if (v16 == 3)
          return 1;
      }
      result = 0;
      v7 = *(_DWORD *)v6;
      if (*(_DWORD *)v6 == 0x7FFFFFFF)
        return result;
    }
    LODWORD(v13) = *((_DWORD *)v9 + 1);
    v14 = v6;
LABEL_31:
    v15 = *((int *)v10 + 1);
    v8 = v10;
    v10 += 4 * v15;
    goto LABEL_32;
  }
  if ((a2 & 1) != 0)
  {
    if (a2 == 1)
    {
LABEL_15:
      v36 = 0u;
      v37 = 0u;
      v34 = 0u;
      v35 = 0u;
      v32 = 0u;
      v33 = 0u;
      if ((this & 1) == 0)
        goto LABEL_22;
      goto LABEL_21;
    }
  }
  else if (*(_DWORD *)(a2 + 4) != 12)
  {
    goto LABEL_15;
  }
  if ((this & 1) != 0)
  {
    v3 = this >> 48;
    v2 = this << 16 >> 48;
    v4 = this >> 17;
    v5 = (this >> 2) & 0x7FFF;
  }
  else
  {
    LODWORD(v2) = *(_DWORD *)(this + 20);
    LODWORD(v3) = *(_DWORD *)(this + 28);
    v4 = *(_DWORD *)(this + 32) - v3;
    v5 = *(_DWORD *)(this + 36) - v2;
  }
  v24 = (int32x2_t)__PAIR64__(v5, v4);
  if ((a2 & 1) != 0)
  {
    v26 = a2 >> 48;
    v25 = a2 << 16 >> 48;
    v27 = a2 >> 17;
    v28 = (a2 >> 2) & 0x7FFF;
  }
  else
  {
    LODWORD(v25) = *(_DWORD *)(a2 + 20);
    LODWORD(v26) = *(_DWORD *)(a2 + 28);
    v27 = *(_DWORD *)(a2 + 32) - v26;
    v28 = *(_DWORD *)(a2 + 36) - v25;
  }
  v29 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v24);
  if ((vpmax_u32(v29, v29).u32[0] & 0x80000000) == 0)
  {
    v30 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, (int32x2_t)__PAIR64__(v28, v27));
    if ((vpmax_u32(v30, v30).u32[0] & 0x80000000) == 0)
    {
      v31 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, vsub_s32(vmin_s32(vadd_s32((int32x2_t)__PAIR64__(v2, v3), v24), vadd_s32((int32x2_t)__PAIR64__(v25, v26), (int32x2_t)__PAIR64__(v28, v27))), vmax_s32((int32x2_t)__PAIR64__(v2, v3), (int32x2_t)__PAIR64__(v25, v26))));
      return vpmax_u32(v31, v31).i32[0] >= 0;
    }
  }
  return 0;
}

uint64_t CA::OGL::ImagingNode::propagate_soft_roi(uint64_t this, int32x2_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  int32x2_t *v7;

  v3 = this;
  v4 = 0;
  v5 = 1;
  do
  {
    v6 = v5;
    v7 = *(int32x2_t **)(v3 + 8 * v4 + 24);
    if (v7)
      this = CA::BoundsImpl::Union(v7 + 24, *a2, a2[1]);
    v5 = 0;
    v4 = 1;
  }
  while ((v6 & 1) != 0);
  return this;
}

uint64_t CA::OGL::ImagingNode::prepare_roi(CA::OGL::ImagingNode *this)
{
  uint64_t v2;
  char v3;
  char v4;
  char *v5;
  uint64_t result;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;

  v2 = 0;
  v19 = *MEMORY[0x1E0C80C00];
  v3 = 1;
  do
  {
    v4 = v3;
    v5 = (char *)this + 8 * v2;
    v8 = *((_QWORD *)v5 + 3);
    v7 = (uint64_t *)(v5 + 24);
    result = v8;
    if (v8)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 96))(result);
      v9 = *v7;
      v10 = *(_DWORD *)(v9 + 220);
      v11 = v10 & 0xC00000;
      v12 = v10 & 0x3200000;
      if (!v11 && v12 != 50331648 && (*(_BYTE *)(v9 + 217) & 8) == 0)
      {
        v14 = *(_QWORD **)(v9 + 8);
        if (!(v14[11] >> 25) && !*(_QWORD *)(v9 + 48) && (*(_WORD *)(v9 + 212) & 0x3C00) == 0)
        {
          v15 = *((_DWORD *)this + 55) & 0x1FFFF;
          v16 = *v14;
          v17 = *(_QWORD *)(*v14 + 808);
          *(_QWORD *)(v16 + 808) = *(_QWORD *)(v9 + 16);
          *(_WORD *)(v16 + 816) &= ~0x800u;
          v18 = 1065353216;
          result = (*(uint64_t (**)(uint64_t, int *, uint64_t))(*(_QWORD *)v9 + 80))(v9, &v18, v15);
          *(_QWORD *)(v9 + 48) = result;
          if (result)
            *(_QWORD *)(*(_QWORD *)(v9 + 8) + 88) += *(int *)(result + 28)
                                                     * (uint64_t)*(int *)(result + 24)
                                                     * (*(_BYTE *)(result + 74) & 0x1F);
          *(_QWORD *)(v16 + 808) = v17;
          *(_WORD *)(v16 + 816) &= ~0x800u;
        }
      }
    }
    v3 = 0;
    v2 = 1;
  }
  while ((v4 & 1) != 0);
  return result;
}

void CA::OGL::`anonymous namespace'::release_buffer_surfaces(CA::OGL::_anonymous_namespace_ *this, CA::OGL::Context *a2, CA::OGL::BackdropBuffer *a3)
{
  uint64_t v5;

  CA::OGL::Context::release_surface((uint64_t)this, *((_QWORD *)a2 + 4));
  *((_QWORD *)a2 + 4) = 0;
  *((_BYTE *)a2 + 216) &= ~2u;
  v5 = *((_QWORD *)a2 + 5);
  if (v5)
  {
    CA::OGL::Context::release_surface((uint64_t)this, v5);
    *((_QWORD *)a2 + 5) = 0;
  }
}

void CA::OGL::PingPongState::~PingPongState(CA::OGL::PingPongState *this)
{
  uint64_t v2;
  uint64_t v3;
  CA::Shape *v4;

  v2 = *((_QWORD *)this + 12);
  if (v2)
    CA::OGL::Context::release_surface(*(_QWORD *)this, v2);
  v3 = *((_QWORD *)this + 11);
  if (v3)
    CA::OGL::Context::release_surface(*(_QWORD *)this, v3);
  v4 = (CA::Shape *)*((_QWORD *)this + 5);
  if (v4)
    CA::Shape::unref(v4);
}

void CA::OGL::Context::release_surface(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  os_signpost_id_t v6;
  NSObject *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  _DWORD v13[2];
  __int16 v14;
  int v15;
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)a2)-- == 1)
  {
    v5 = *(_QWORD *)(a2 + 56);
    if (v5)
    {
      v6 = *(unsigned int *)(a1 + 212);
      if ((_DWORD)v6)
      {
        v7 = CA::OGL::Context::_trace_log;
        if (os_signpost_enabled((os_log_t)CA::OGL::Context::_trace_log))
        {
          v8 = *(_DWORD *)(a2 + 40);
          v9 = *(_DWORD *)(a2 + 44);
          v10 = *(_DWORD *)(a2 + 68);
          v11 = (*(unsigned __int16 *)(a2 + 75) >> 13) & 1;
          v13[0] = 67241216;
          v13[1] = v8;
          v14 = 1026;
          v15 = v9;
          v16 = 1026;
          v17 = v10;
          v18 = 1026;
          v19 = v11;
          v20 = 2050;
          v21 = v5;
          _os_signpost_emit_with_name_impl(&dword_184457000, v7, OS_SIGNPOST_EVENT, v6, "Surface", "ID is update width=%{public,name=width}d height=%{public,name=height}d features=%{public,name=features}#x recycled=%{public,name=recycled,BOOL}d begin=%{public,signpost.description:begin_time}llu", (uint8_t *)v13, 0x24u);
        }
      }
    }
    if (*(_QWORD *)(a1 + 256) == a2)
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 392))(a1);
    if ((*(_WORD *)(a2 + 75) & 0x100) != 0)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 736))(a1, a2);
    }
    else
    {
      if ((*(_WORD *)(a2 + 75) & 0x1000) != 0)
        v12 = 40;
      else
        v12 = 4;
      *(_DWORD *)a2 = v12;
      *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 80);
      *(_QWORD *)(a1 + 80) = a2;
    }
  }
}

unint64_t *CA::Render::Update::release_objects(unint64_t *this)
{
  unint64_t v1;
  unint64_t *v2;
  unint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v1 = this[40];
  if (v1)
  {
    v2 = this + 40;
    while (1)
    {
      while (1)
      {
        v3 = __ldaxr(v2);
        if (v3 == v1)
          break;
        __clrex();
LABEL_12:
        v1 = *v2;
        if (!*v2)
          return this;
      }
      if (!__stlxr(0, v2))
      {
        do
        {
          this = *(unint64_t **)v1;
          v4 = (unsigned int *)(*(_QWORD *)v1 + 8);
          do
          {
            v5 = __ldaxr(v4);
            v6 = v5 - 1;
          }
          while (__stlxr(v6, v4));
          if (!v6)
            this = (unint64_t *)(*(uint64_t (**)(unint64_t *))(*this + 16))(this);
          v1 = *(_QWORD *)(v1 + 8);
        }
        while (v1);
        goto LABEL_12;
      }
    }
  }
  return this;
}

uint64_t CA::Render::Object::finalize(uint64_t this)
{
  if (this)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  return this;
}

uint64_t CA::OGL::RenderSurface::set_dest(CA::OGL::RenderSurface *this, float a2, int a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  int32x4_t v9;
  int32x4_t v10;
  float64x2_t v11;
  int32x2_t v12;
  int32x2_t v13;
  int v14;
  int64x2_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int32x2_t v18;
  int8x16_t v19;
  double v20;
  int8x16_t v21;
  int8x16_t v22;
  float64x2_t v23;
  float64x2_t v24;
  int64x2_t v25;
  int8x16_t v26;
  float64x2_t v27;
  float64x2_t v28;
  int32x4_t v29;
  int32x4_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  int32x2_t v34;
  __int16 v35;
  uint64_t v36;
  _BOOL4 v37;
  unsigned int v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  int32x2_t v42;
  int64x2_t v43;
  int8x16_t v44;
  int8x16_t v45;
  uint64_t v46;
  int8x16_t v48;
  int8x16_t v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)this + 3))
    return 1;
  v7 = *((_QWORD *)this + 1);
  v8 = **(_QWORD **)(v7 + 8);
  v49 = 0uLL;
  CA::Shape::get_bounds(v7 + 144, v49.i32);
  v12 = *(int32x2_t *)v49.i8;
  v48 = v49;
  v13 = (int32x2_t)vextq_s8(v48, v48, 8uLL).u64[0];
  if (a2 != 1.0)
  {
    v14 = v49.i32[3];
    if (v49.i32[2] > v49.i32[3])
      v14 = v49.i32[2];
    v9.i32[0] = 1073741822;
    v10.i32[0] = v14;
    v15.i64[0] = v49.i32[0];
    v15.i64[1] = v49.i32[1];
    v16 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v10, v9), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v15));
    v15.i64[0] = v13.i32[0];
    v15.i64[1] = v13.i32[1];
    v17 = (int8x16_t)vcvtq_f64_s64(v15);
    v18 = vdup_n_s32(v14 > 1073741822);
    v15.i64[0] = v18.u32[0];
    v15.i64[1] = v18.u32[1];
    v19 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v15, 0x3FuLL)), (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL), v17);
    v20 = a2;
    v11.f64[0] = 1.79769313e308;
    v21 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(v11, (float64x2_t)v19).i64[0], 0);
    v22.i64[1] = v16.i64[1];
    *(double *)v22.i64 = a2 * *(double *)v16.i64;
    v23 = (float64x2_t)vbslq_s8(v21, v22, v16);
    v22.i64[1] = v19.i64[1];
    *(double *)v22.i64 = a2 * *(double *)v19.i64;
    v24 = (float64x2_t)vbslq_s8(v21, v22, v19);
    if (v24.f64[1] < 1.79769313e308)
    {
      v23.f64[1] = vmuld_lane_f64(v20, v23, 1);
      v24.f64[1] = v24.f64[1] * v20;
    }
    v25 = vceqzq_f64(v24);
    if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v25, 1), (int8x16_t)v25).u64[0] & 0x8000000000000000) != 0
      || (v26 = vorrq_s8((int8x16_t)vcltzq_f64(v24), (int8x16_t)vcgezq_f64(v24)),
          (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v26), 1), v26).u64[0] & 0x8000000000000000) != 0))
    {
      v49 = 0uLL;
      v12 = 0;
      v13 = 0;
    }
    else
    {
      v27 = vmaxnmq_f64(v23, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000));
      v28 = vminnmq_f64(vaddq_f64(v23, v24), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL));
      v29 = (int32x4_t)vcvtmq_s64_f64(v27);
      v30 = (int32x4_t)vsubq_s64(vcvtpq_s64_f64(v28), (int64x2_t)v29);
      v49 = (int8x16_t)vuzp1q_s32(v29, v30);
      v12 = vmovn_s64((int64x2_t)v29);
      v13 = vmovn_s64((int64x2_t)v30);
    }
  }
  v31 = *((_QWORD *)this + 1);
  v32 = (*(unsigned __int16 *)(v31 + 212) >> 10) & 0xF;
  v33 = 32 * v32;
  if (v32)
  {
    v34 = vadd_s32((int32x2_t)vand_s8((int8x8_t)v12, (int8x8_t)vdup_n_s32(v32 - 1)), vdup_n_s32(v32));
    *(int32x2_t *)v49.i8 = vsub_s32(v12, v34);
    v49.u64[1] = (unint64_t)vadd_s32(v34, vadd_s32(v13, vdup_n_s32(v33)));
  }
  v35 = *(_WORD *)(v31 + 124);
  if ((v35 & 0x200) != 0 || (v36 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v31 + 16) + 16) + 208)) == 0)
  {
    v40 = 0;
    v39 = *((unsigned int *)this + 5);
  }
  else
  {
    v37 = CA::Shape::contains(v36, (const CA::Bounds *)&v48);
    v38 = *((_DWORD *)this + 5);
    if (v37)
      v39 = v38 & 0xFFFFFFF7;
    else
      v39 = v38;
    if (v37)
      v40 = 2048;
    else
      v40 = 0;
  }
  v41 = (*(uint64_t (**)(uint64_t, _QWORD, int8x16_t *, uint64_t))(*(_QWORD *)v8 + 656))(v8, *((unsigned int *)this + 4), &v49, v39);
  *((_QWORD *)this + 3) = v41;
  if (!v41)
    return 0;
  if (v32)
  {
    *(int32x2_t *)(v41 + 40) = vsub_s32(*(int32x2_t *)(v41 + 40), vdup_n_s32(v33));
    *(_WORD *)(v41 + 75) = *(_WORD *)(v41 + 75) & 0xFFF0 | v32;
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 184))(v8, 25))
  {
    v42 = vmax_s32(vsub_s32(vadd_s32(*(int32x2_t *)(*((_QWORD *)this + 1) + 200), *(int32x2_t *)(*((_QWORD *)this + 1) + 192)), vadd_s32(*(int32x2_t *)v49.i8, (int32x2_t)v49.u64[1])), 0);
    if (v32)
    {
      v43.i64[0] = v42.u32[0];
      v43.i64[1] = v42.u32[1];
      v44 = (int8x16_t)vcvtq_f64_s64(v43);
      v45 = (int8x16_t)vdupq_lane_s64(COERCE__INT64((double)v32 * 32.0), 0);
      v42 = vmovn_s64(vcvtq_s64_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v44, (float64x2_t)v45), v44, v45)));
    }
    (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v8 + 704))(v8, *((_QWORD *)this + 3), v42.u32[0], v42.u32[1]);
  }
  *((float *)this + 8) = a2;
  *(_WORD *)(*((_QWORD *)this + 3) + 75) = *(_WORD *)(*((_QWORD *)this + 3) + 75) & 0xFBFF | (2 * (v35 & 0x200));
  *(_WORD *)(*((_QWORD *)this + 3) + 75) = *(_WORD *)(*((_QWORD *)this + 3) + 75) & 0xF7FF | v40;
  v46 = *((_QWORD *)this + 3);
  v3 = 1;
  CA::OGL::Context::push_surface(v8, v46, 1u, a3, 0);
  return v3;
}

uint64_t CA::OGL::QuadNode::propagate_soft_roi(const CA::Transform **this, const CA::Bounds *a2, const double *a3, int32x4_t a4, int32x4_t a5)
{
  int v6;
  int v7;
  int v8;
  int64x2_t v9;
  int8x16_t v10;
  double v11;
  double v12;
  int64x2_t v13;
  unint64_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int32x4_t v17;
  float64x2_t v19;
  float64x2_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v6 = *((_DWORD *)a2 + 2);
  v7 = *((_DWORD *)a2 + 3);
  if (v6 <= v7)
    v8 = *((_DWORD *)a2 + 3);
  else
    v8 = *((_DWORD *)a2 + 2);
  a4.i32[0] = 1073741822;
  a5.i32[0] = v8;
  v9.i64[0] = (int)*(_QWORD *)a2;
  v9.i64[1] = (int)HIDWORD(*(_QWORD *)a2);
  v10 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(a5, a4), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v9));
  v11 = (double)v6;
  v12 = (double)v7;
  if (v8 > 1073741822)
  {
    v11 = 1.79769313e308;
    v12 = 1.79769313e308;
  }
  v19 = (float64x2_t)v10;
  v20.f64[0] = v11;
  v20.f64[1] = v12;
  CA::Rect::unapply_transform((CA::Rect *)&v19, this[10], a3);
  v13 = vceqzq_f64(v20);
  v14 = vorrq_s8((int8x16_t)vdupq_laneq_s64(v13, 1), (int8x16_t)v13).u64[0];
  v15 = 0uLL;
  if ((v14 & 0x8000000000000000) == 0)
  {
    v16 = vorrq_s8((int8x16_t)vcltzq_f64(v20), (int8x16_t)vcgezq_f64(v20));
    if ((vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v16), 1), v16).u64[0] & 0x8000000000000000) == 0)
    {
      v17 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v19, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
      v15 = (int8x16_t)vuzp1q_s32(v17, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v19, v20), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v17));
    }
  }
  return CA::BoundsImpl::Union((int32x2_t *)this[3] + 24, *(int32x2_t *)v15.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL));
}

uint64_t CA::OGL::QuadNode::apply(uint64_t result, uint64_t *a2, int32x4_t a3, int32x4_t a4, uint64_t a5, double *a6)
{
  uint64_t v6;
  uint64_t v8;
  CA::OGL::Context *v9;
  int v10;
  int v11;
  int v12;
  int8x16_t v13;
  uint64_t v14;
  int64x2_t v15;
  int8x16_t v16;
  double v17;
  double v18;
  __n128 v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  BOOL v25;
  int v27;
  float64x2_t *v28;
  const double *v29;
  uint64_t v30;
  int8x16_t v31;
  double *v32;
  double *v33;
  double *v34;
  int32x4_t v35;
  int32x4_t v36;
  unsigned int v37;
  int v38;
  int v39;
  int v40;
  int8x16_t v41;
  uint64_t v42;
  int64x2_t v43;
  int8x16_t v44;
  int8x16_t v45;
  double v46;
  double v47;
  unsigned int v48;
  double *v49;
  float64x2_t v50;
  float64x2_t v51;
  int8x16_t v52;
  double v53;
  uint64_t v54;
  double v55;
  double v56;
  __int128 v57;
  __int128 v58;
  double v59;
  double v60;
  int8x16_t v61;
  float64x2_t v62;
  _QWORD v63[3];

  v63[2] = *MEMORY[0x1E0C80C00];
  v6 = *a2;
  if (*a2)
  {
    v8 = result;
    v9 = **(CA::OGL::Context ***)(result + 8);
    v10 = *(_DWORD *)(v6 + 40);
    v11 = *(_DWORD *)(v6 + 44);
    if (v10 <= v11)
      v12 = *(_DWORD *)(v6 + 44);
    else
      v12 = *(_DWORD *)(v6 + 40);
    a3.i32[0] = 1073741822;
    a4.i32[0] = v12;
    v13 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(a4, a3), 0);
    v14 = *(_QWORD *)(v6 + 32);
    v15.i64[0] = (int)v14;
    v15.i64[1] = SHIDWORD(v14);
    v16 = vbslq_s8(v13, (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v15));
    v17 = (double)v10;
    v18 = (double)v11;
    if (v12 > 1073741822)
    {
      v17 = 1.79769313e308;
      v18 = 1.79769313e308;
    }
    v61 = v16;
    v62.f64[0] = v17;
    v62.f64[1] = v18;
    v63[0] = 0;
    v19.n128_f64[1] = v18;
    v50 = v62;
    v51 = (float64x2_t)v16;
    v19.n128_u64[0] = (unint64_t)vcvt_f32_f64(v62);
    v63[1] = v19.n128_u64[0];
    v20 = *((_QWORD *)v9 + 2);
    v21 = *(unsigned __int8 *)(v20 + 480);
    if (v21 >= 2 && (v21 != 3 || (*(_WORD *)(v6 + 75) & 0x800) == 0))
    {
      *(_BYTE *)(v20 + 481) |= 1u;
      v20 = *((_QWORD *)v9 + 2);
    }
    *(_QWORD *)(v20 + 8) = *(_QWORD *)(result + 88);
    v59 = 1.0;
    v60 = 1.0;
    if ((*(_WORD *)(result + 224) & 0xF) == 0xA)
    {
      v22 = *(_QWORD *)(result + 80);
      if ((*(_BYTE *)(v22 + 144) & 0x10) != 0)
      {
        v19.n128_f64[0] = CA::Mat4Impl::mat4_get_scale((CA::Mat4Impl *)v22, &v60, &v59, a6);
      }
      else
      {
        v19.n128_u64[0] = *(_QWORD *)(v22 + 128);
        v59 = v19.n128_f64[0];
        v60 = v19.n128_f64[0];
      }
    }
    v23 = (*(uint64_t (**)(CA::OGL::Context *, uint64_t, __n128))(*(_QWORD *)v9 + 184))(v9, 29, v19);
    v24 = *a2;
    if (v23)
      v25 = v60 < 1.0;
    else
      v25 = 0;
    if (v25 && v59 < 1.0)
    {
      v55 = v60;
      v56 = v59;
      result = (*(uint64_t (**)(CA::OGL::Context *, uint64_t, double *, _QWORD, uint64_t, float))(*(_QWORD *)v9 + 864))(v9, v24, &v55, *(_QWORD *)(v8 + 80), 2, 0.0);
    }
    else
    {
      CA::OGL::Context::bind_surface((uint64_t)v9, v24, 0, *(_WORD *)(v8 + 224) & 0xF, *(_WORD *)(v8 + 224) >> 4, *(float *)(v8 + 228));
      v27 = *(unsigned __int8 *)(v8 + 225);
      v28 = *(float64x2_t **)(v8 + 80);
      v55 = COERCE_DOUBLE(&v61);
      v56 = *(double *)&v28;
      v30 = CA::OGL::transform_filter_bits(v28, v29, 1.0, 1.0);
      v31.i64[0] = 1.0;
      LODWORD(v57) = CA::OGL::rect_filter_bits(v28, v30, v32, v51, v50, v31, 1.0);
      DWORD1(v57) = v27;
      v58 = 0uLL;
      *((_QWORD *)&v57 + 1) = 0;
      CA::OGL::fill_rect_tex(v9, (uint64_t)&v55, (uint64_t)v63, v33);
      result = CA::OGL::Context::unbind_surface(v9, *a2, 0);
    }
    *(_BYTE *)(*((_QWORD *)v9 + 2) + 481) &= ~1u;
    v37 = *(_DWORD *)(v8 + 220);
    if ((v37 & 0xE0000) != 0)
    {
      v38 = *(_DWORD *)(*a2 + 40);
      v39 = *(_DWORD *)(*a2 + 44);
      if (v38 <= v39)
        v40 = *(_DWORD *)(*a2 + 44);
      else
        v40 = *(_DWORD *)(*a2 + 40);
      v35.i32[0] = 1073741822;
      v36.i32[0] = v40;
      v41 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v36, v35), 0);
      v42 = *(_QWORD *)(*a2 + 32);
      v43.i64[0] = (int)v42;
      v43.i64[1] = SHIDWORD(v42);
      v45 = (int8x16_t)vcvtq_f64_s64(v43);
      v44 = vbslq_s8(v41, (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), v45);
      v45.i64[0] = 0x7FEFFFFFFFFFFFFFLL;
      if (v40 <= 1073741822)
        v46 = (double)v38;
      else
        v46 = 1.79769313e308;
      if (v40 <= 1073741822)
        *(double *)v45.i64 = (double)v39;
      v52 = v44;
      v53 = v46;
      v54 = v45.i64[0];
      v47 = *(double *)(v8 + 80);
      v55 = COERCE_DOUBLE(&v52);
      v56 = v47;
      v57 = 0u;
      v58 = 0u;
      v48 = ((v37 >> 17) & 7) - 1;
      if (v48 > 6)
        v49 = 0;
      else
        v49 = (double *)dword_18475B0A4[v48];
      return CA::OGL::fill_color_rect((uint64_t)v9, (uint64_t)&v55, v49, v34, 0.0, v45);
    }
  }
  return result;
}

uint64_t CA::OGL::CacheNode::grow_roi(uint64_t this, int8x16_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  int8x16_t v5;
  int32x2_t *v6;
  int32x2_t v7;
  int32x2_t v8;
  uint32x2_t v9;
  uint32x2_t v10;
  unsigned __int32 v11;
  int32x2_t v12;
  uint64_t v14;
  int v15;
  int v16;
  __int32 v17;
  int v18;
  int v19;
  __int32 v20;
  __int32 v21;
  int v22;
  int8x16_t v23;
  int8x16_t v24;
  __int128 v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v2 = **(_QWORD **)(this + 8);
  if ((*(_BYTE *)(v2 + 417) & 0x10) != 0)
    return this;
  v4 = this;
  if ((*(_BYTE *)(this + 224) & 1) != 0)
  {
    v5 = *a2;
    v6 = (int32x2_t *)(this + 128);
    if ((*(_DWORD *)(this + 136) & 0x80000000) != 0)
    {
      v23 = *a2;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)this + 40))(this, this + 128);
      v5 = v23;
    }
    v7 = (int32x2_t)vextq_s8(v5, v5, 8uLL).u64[0];
    v8 = *(int32x2_t *)(v4 + 136);
    v9 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v7);
    v10 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v8);
    v11 = vpmax_u32(v10, v10).u32[0];
    if ((vpmax_u32(v9, v9).u32[0] & 0x80000000) != 0)
    {
      if ((v11 & 0x80000000) != 0)
        goto LABEL_11;
      *(int32x2_t *)v5.i8 = *v6;
    }
    else
    {
      if ((v11 & 0x80000000) != 0)
        goto LABEL_11;
      v12 = vadd_s32(*(int32x2_t *)v5.i8, v7);
      *(int32x2_t *)v5.i8 = vmin_s32(*(int32x2_t *)v5.i8, *v6);
      v8 = vsub_s32(vmax_s32(v12, vadd_s32(*v6, v8)), *(int32x2_t *)v5.i8);
    }
    v5.u64[1] = (unint64_t)v8;
LABEL_11:
    v24 = v5;
    this = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(v4 + 8) + 184))(**(_QWORD **)(v4 + 8), 7);
    if (v24.i32[2] <= (int)this && v24.i32[3] <= (int)this)
    {
      *a2 = v24;
      return this;
    }
  }
  this = CA::OGL::Context::cache_fetch(v2, (_DWORD *)(v4 + 228));
  if (this)
  {
    v14 = *(_QWORD *)(this + 48);
    v15 = 64;
    if (v14)
    {
      v25 = *(_OWORD *)(v14 + 32);
      this = CA::BoundsImpl::contains(&v25, a2);
      if ((_DWORD)this)
        v15 = 64;
      else
        v15 = 1024;
    }
  }
  else
  {
    v15 = 64;
  }
  v16 = *(_DWORD *)(v4 + 136);
  if (v16 < 0)
  {
    this = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 40))(v4, v4 + 128);
    v16 = *(_DWORD *)(v4 + 136);
  }
  v17 = a2->i32[2];
  if (v16 - v17 <= v15)
  {
    v18 = *(_DWORD *)(v4 + 128);
  }
  else
  {
    v18 = a2->i32[0] & -v15;
    v16 = ((v15 + v17 + a2->i32[0] - 1) & -v15) - v18;
  }
  a2->i32[0] = v18;
  a2->i32[2] = v16;
  v19 = *(_DWORD *)(v4 + 140);
  v20 = a2->i32[3];
  if (v19 - v20 <= v15)
  {
    a2->i32[1] = *(_DWORD *)(v4 + 132);
  }
  else
  {
    v21 = a2->i32[1];
    v22 = v21 & -v15;
    a2->i32[1] = v22;
    v19 = ((v15 + v20 + v21 - 1) & -v15) - v22;
  }
  a2->i32[3] = v19;
  return this;
}

uint64_t CA::OGL::CacheNode::propagate_roi(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 56))(*(_QWORD *)(a1 + 24));
  *(_DWORD *)(*(_QWORD *)(a1 + 24) + 216) = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 216) & 0xFFC00000 | *(_DWORD *)(a1 + 216) & 0x3FFFFF;
  *(_DWORD *)(*(_QWORD *)(a1 + 24) + 216) |= 0x400u;
  *(_WORD *)(*(_QWORD *)(a1 + 24) + 212) = *(_WORD *)(*(_QWORD *)(a1 + 24) + 212) & 0xFDFF | *(_WORD *)(a1 + 212) & 0x200;
  *(_WORD *)(*(_QWORD *)(a1 + 24) + 212) = *(_WORD *)(*(_QWORD *)(a1 + 24) + 212) & 0xC3FF | *(_WORD *)(a1 + 212) & 0x3C00;
  return result;
}

void CA::OGL::render_border(CA::OGL::Context *this, uint64_t a2, double *a3)
{
  uint64_t v3;
  float32x4_t *v4;
  float v5;
  uint64_t v8;
  uint64_t v9;
  double v10;
  float16x4_t v11;
  double v13;
  double v14;
  double v15;
  float64x2_t v16;
  float64x2_t v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  double v22;
  float v27;
  double v28;
  int64x2_t v29;
  unint64_t v30;
  int8x16_t v31;
  int32x4_t v32;
  const double *v33;
  float64x2_t *v34;
  uint64_t v35;
  int8x16_t v36;
  double *v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  float64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  float v52;
  uint64_t v53;
  int8x16_t v54;
  int32x4_t v55;
  float64_t v56;
  CA::Shape *v57;
  uint64_t v58;
  _DWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  float64_t v64;
  uint64_t v65;
  CA::Shape *v66;
  double *v67;
  double v68;
  int8x16_t v69;
  float64_t v70;
  int v71;
  float64_t v72;
  int v73;
  float64_t v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int v89;
  _BYTE v90[28];
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  uint64_t v95;

  v95 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a2 + 24);
  v4 = *(float32x4_t **)(v3 + 128);
  if (v4)
  {
    v5 = v4[14].f32[3];
    if (v5 > 0.001)
    {
      v8 = v4[8].i64[0];
      v9 = *((_QWORD *)this + 29);
      v10 = COERCE_DOUBLE(vcvt_f16_f32(v4[15]));
      v11 = *(float16x4_t *)(v9 + 32);
      _ZF = *(_QWORD *)&v11 == 0x3C003C003C003C00;
      v13 = COERCE_DOUBLE(vcvt_f16_f32(vmulq_f32(vcvtq_f32_f16(v11), vcvtq_f32_f16(*(float16x4_t *)&v10))));
      if (*(_QWORD *)&v11 == 0x3C003C003C003C00)
        v14 = v10;
      else
        v14 = v13;
      v15 = v10;
      if (!_ZF)
        v15 = v13;
      if (v15 != 0.0 || CA::OGL::Context::need_transparent_source(this))
      {
        if (byte_1ECDC6AEF)
          v14 = 1.10008404e-19;
        v17 = *(float64x2_t *)(v3 + 64);
        v16 = *(float64x2_t *)(v3 + 80);
        v93 = v17;
        v94 = v16;
        v18 = v5;
        v19 = v4[14].f32[1];
        if ((*(_BYTE *)(a2 + 32) & 1) != 0 || (v20 = *(_QWORD *)(a2 + 104)) != 0 && (*(_BYTE *)(v20 + 222) & 0x20) != 0)
        {
          if (v16.f64[0] <= v16.f64[1])
            v21 = v16.f64[1];
          else
            v21 = v16.f64[0];
          if (v21 < 1.79769313e308)
          {
            v22 = v16.f64[0] >= v16.f64[1] ? v16.f64[1] : v16.f64[0];
            if (v22 > 0.0)
            {
              __asm { FMOV            V3.2D, #-1.0 }
              v93 = vaddq_f64(v17, _Q3);
              v94.f64[0] = v16.f64[0] + 2.0;
              v94.f64[1] = v16.f64[1] + 2.0;
              if (v16.f64[0] + 2.0 <= 0.0 || v16.f64[1] + 2.0 <= 0.0)
                v94 = 0uLL;
            }
          }
          v19 = v19 + 1.0;
          v18 = v18 + 1.0;
        }
        v27 = v4[14].f32[2];
        if (v27 != 0.0)
        {
          v28 = v27;
          if (v19 + v28 >= 0.0)
            v19 = v19 + v28;
          else
            v19 = 0.0;
          CA::BoundsImpl::inset(v93.f64, -v28, -v28);
        }
        v86 = v93;
        v91 = v93;
        v92 = v94;
        v85 = v94;
        CA::Rect::apply_transform((int8x16_t *)&v91, *(const CA::Transform **)(v9 + 24), a3);
        v29 = vceqzq_f64(v92);
        v30 = vorrq_s8((int8x16_t)vdupq_laneq_s64(v29, 1), (int8x16_t)v29).u64[0];
        v84 = v92;
        v83 = v91;
        if ((v30 & 0x8000000000000000) != 0
          || (v31 = vorrq_s8((int8x16_t)vcltzq_f64(v92), (int8x16_t)vcgezq_f64(v92)),
              (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v31), 1), v31).u64[0] & 0x8000000000000000) != 0))
        {
          v88 = 0uLL;
        }
        else
        {
          v32 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v91, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
          v88 = vuzp1q_s32(v32, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v91, v92), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v32));
        }
        if (CA::Shape::intersects(*(_QWORD *)(v9 + 8), (int32x2_t *)&v88))
        {
          v34 = *(float64x2_t **)(v9 + 24);
          v35 = CA::OGL::transform_filter_bits(v34, v33, 1.0, 1.0);
          v36.i64[0] = 1.0;
          v38 = CA::OGL::rect_filter_bits(v34, v35, v37, v86, v85, v36, 1.0);
          v39 = v38;
          if (v8)
          {
            v40 = *(_QWORD *)(a2 + 24);
            v41 = *(_DWORD *)(v40 + 36);
            if ((v41 & 0xFu) > 0xA)
              v42 = 1;
            else
              v42 = CA::OGL::texture_filter(CA::Render::ImageFilter)::filters[v41 & 0xF];
            v49 = v41 >> 4;
            if (v49 > 0xA)
              v50 = 1;
            else
              v50 = CA::OGL::texture_filter(CA::Render::ImageFilter)::filters[v49];
            v51 = *(_QWORD *)(v40 + 128);
            if (v51)
              v52 = *(float *)(v51 + 288);
            else
              v52 = 0.0;
            v53 = *(_QWORD *)(a2 + 16);
            if ((v30 & 0x8000000000000000) != 0
              || (v54 = vorrq_s8((int8x16_t)vcltzq_f64(v84), (int8x16_t)vcgezq_f64(v84)),
                  (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v54), 1), v54).u64[0] & 0x8000000000000000) != 0))
            {
              v87 = 0uLL;
            }
            else
            {
              v55 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v83, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
              v87 = vuzp1q_s32(v55, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v83, v84), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v55));
            }
            v56 = *(double *)(v53 + 24);
            v57 = (CA::Shape *)CA::Shape::intersect(*(CA::Shape **)(v9 + 8), (const CA::Bounds *)&v87);
            CA::Shape::get_bounds((uint64_t)v57, v87.i32);
            v58 = (*(uint64_t (**)(CA::OGL::Context *, uint64_t, int32x4_t *, uint64_t))(*(_QWORD *)this + 656))(this, 1, &v87, 15);
            if (v58)
            {
              v59 = (_DWORD *)v58;
              v86.f64[0] = v56;
              MEMORY[0x1E0C80A78](v58);
              v78 = 0x3C003C003C003C00;
              v81 = 0;
              v82 = 0;
              v79 = 0;
              v80 = 0;
              v76 = *(_OWORD *)(v9 + 8);
              v77 = *(_QWORD *)(v9 + 24);
              LODWORD(v82) = *(_DWORD *)(v9 + 64);
              WORD2(v82) = *(_WORD *)(v9 + 68) & 0x500 | 4;
              v75 = 0;
              *(_QWORD *)&v76 = v57;
              v75 = CA::OGL::Context::set_gstate((uint64_t)this, (uint64_t)&v75);
              CA::OGL::Context::push_surface((uint64_t)this, (uint64_t)v59, 1u, 2, 0);
              *(_QWORD *)(*((_QWORD *)this + 2) + 8) = 0x3C003C003C003C00;
              v60 = *(_QWORD *)(a2 + 24);
              v61 = *(_QWORD *)(v60 + 128);
              if (v61 && (v62 = *(_QWORD *)(v61 + 72)) != 0)
              {
                v71 = (*(unsigned __int16 *)(a2 + 40) >> 6);
                v72 = *(double *)(v9 + 24);
                v88.i64[0] = (uint64_t)&v93;
                *(float64_t *)&v88.i64[1] = v72;
                v89 = v39;
                *(_DWORD *)v90 = v71;
                memset(&v90[4], 0, 24);
                CA::OGL::stroke_uneven_round_rect((uint64_t)this, (float64x2_t **)&v88, (double *)(v62 + 24), (double *)(*(_DWORD *)(v60 + 40) & 3), v18);
              }
              else
              {
                v63 = (*(unsigned __int16 *)(a2 + 40) >> 6);
                v64 = *(double *)(v9 + 24);
                v88.i64[0] = (uint64_t)&v93;
                *(float64_t *)&v88.i64[1] = v64;
                v89 = v39;
                *(_DWORD *)v90 = v63;
                memset(&v90[4], 0, 24);
                CA::OGL::stroke_round_rect(this, (float64x2_t **)&v88, (double *)(*(_WORD *)(v60 + 38) & 0xF), (double *)(*(_DWORD *)(v60 + 40) & 3), v19, v18);
              }
              *(_BYTE *)(*((_QWORD *)this + 2) + 481) |= 1u;
              *(double *)(*((_QWORD *)this + 2) + 8) = v14;
              v88 = 0uLL;
              CA::OGL::fill_pattern_rect((uint64_t)this, v8, (uint64_t)&v93, (float64x2_t *)&v88, *(_QWORD *)(*((_QWORD *)this + 29) + 24), &v91, v42, v50, v52, LOBYTE(v86.f64[0]) & 1, 0);
              *(_BYTE *)(*((_QWORD *)this + 2) + 481) &= ~1u;
              CA::OGL::Context::pop_surface(this);
              CA::OGL::Context::set_gstate((uint64_t)this, **((_QWORD **)this + 29));
              v65 = *((_QWORD *)this + 2);
              if (*(unsigned __int8 *)(v65 + 480) >= 2u)
                *(_BYTE *)(v65 + 481) |= 1u;
              v66 = *(CA::Shape **)(v9 + 8);
              v88 = 0uLL;
              CA::OGL::emit_combine((uint64_t)this, 1, v59, 0, v66, (unsigned int *)&v88);
              *(_BYTE *)(*((_QWORD *)this + 2) + 481) &= ~1u;
              CA::OGL::Context::release_surface((uint64_t)this, (uint64_t)v59);
            }
            CA::Shape::unref(v57);
            if (byte_1ECDC6A61)
            {
              v70 = *(double *)(v9 + 24);
              v88.i64[0] = (uint64_t)&v93;
              *(float64_t *)&v88.i64[1] = v70;
              v89 = v39;
              memset(v90, 0, sizeof(v90));
              CA::OGL::fill_color_rect((uint64_t)this, (uint64_t)&v88, (double *)0x80800080, v67, v68, v69);
            }
          }
          else
          {
            v43 = *((_QWORD *)this + 2);
            if (*(unsigned __int8 *)(v43 + 480) >= 2u)
            {
              *(_BYTE *)(v43 + 481) |= 1u;
              v43 = *((_QWORD *)this + 2);
            }
            *(double *)(v43 + 8) = v14;
            v44 = *(_QWORD *)(a2 + 24);
            v45 = *(_QWORD *)(v44 + 128);
            if (v45 && (v46 = *(_QWORD *)(v45 + 72)) != 0)
            {
              v73 = (*(unsigned __int16 *)(a2 + 40) >> 6);
              v74 = *(double *)(v9 + 24);
              v88.i64[0] = (uint64_t)&v93;
              *(float64_t *)&v88.i64[1] = v74;
              v89 = v38;
              *(_DWORD *)v90 = v73;
              memset(&v90[4], 0, 24);
              CA::OGL::stroke_uneven_round_rect((uint64_t)this, (float64x2_t **)&v88, (double *)(v46 + 24), (double *)(*(_DWORD *)(v44 + 40) & 3), v18);
            }
            else
            {
              v47 = (*(unsigned __int16 *)(a2 + 40) >> 6);
              v48 = *(double *)(v9 + 24);
              v88.i64[0] = (uint64_t)&v93;
              *(float64_t *)&v88.i64[1] = v48;
              v89 = v38;
              *(_DWORD *)v90 = v47;
              memset(&v90[4], 0, 24);
              CA::OGL::stroke_round_rect(this, (float64x2_t **)&v88, (double *)(*(_WORD *)(v44 + 38) & 0xF), (double *)(*(_DWORD *)(v44 + 40) & 3), v19, v18);
            }
            *(_BYTE *)(*((_QWORD *)this + 2) + 481) &= ~1u;
          }
        }
      }
    }
  }
}

uint64_t CA::OGL::CombineNode::propagate_roi(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  char v6;
  uint64_t result;
  uint64_t v8;

  v4 = 0;
  v5 = 1;
  do
  {
    v6 = v5;
    result = *(_QWORD *)(a1 + 8 * v4 + 24);
    if (result)
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 56))(result, a2);
    v5 = 0;
    v4 = 1;
  }
  while ((v6 & 1) != 0);
  v8 = *(_QWORD *)(a1 + 24);
  if (v8)
  {
    if (*(_QWORD *)(a1 + 32))
    {
      if (*(_BYTE *)(a1 + 224) != 5)
      {
        *(_WORD *)(v8 + 212) |= 0x200u;
        *(_WORD *)(*(_QWORD *)(a1 + 32) + 212) |= 0x200u;
        return result;
      }
      *(_DWORD *)(v8 + 220) |= 0x1000000u;
      *(_DWORD *)(*(_QWORD *)(a1 + 32) + 220) |= 0x1000000u;
      v8 = *(_QWORD *)(a1 + 32);
    }
    if ((*(_BYTE *)(v8 + 222) & 0x10) == 0)
      *(_DWORD *)(v8 + 216) |= 0x800u;
  }
  return result;
}

void CA::OGL::MaskNode::~MaskNode(CA::OGL::MaskNode *this)
{
  _QWORD *v1;
  CA::OGL::Renderer *v2;
  _QWORD *v3;

  *(_QWORD *)this = &off_1E1595A18;
  v1 = (_QWORD *)*((_QWORD *)this + 29);
  if (v1)
  {
    v2 = (CA::OGL::Renderer *)*((_QWORD *)this + 1);
    do
    {
      v3 = (_QWORD *)*v1;
      CA::OGL::Renderer::dealloc_layer(v2, (uint64_t)v1);
      v1 = v3;
    }
    while (v3);
  }
}

{
  _QWORD *v1;
  CA::OGL::Renderer *v2;
  _QWORD *v3;

  *(_QWORD *)this = &off_1E1595A18;
  v1 = (_QWORD *)*((_QWORD *)this + 29);
  if (v1)
  {
    v2 = (CA::OGL::Renderer *)*((_QWORD *)this + 1);
    do
    {
      v3 = (_QWORD *)*v1;
      CA::OGL::Renderer::dealloc_layer(v2, (uint64_t)v1);
      v1 = v3;
    }
    while (v3);
  }
  abort();
}

void CA::OGL::MaskNode::apply(uint64_t a1, const double *a2)
{
  uint64_t v3;
  const Rect **v4;
  Rect *v5;
  float64x2_t *v7;
  float64x2_t v8;
  Rect v9;
  float v10;
  CA::Shape *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  float64x2_t *v17;
  const double *v18;
  uint64_t v19;
  int8x16_t v20;
  double *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint32x2_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  float64x2_t *v35;
  uint64_t v36;
  int8x16_t v37;
  double *v38;
  double v39;
  double v40;
  double v41;
  double v42;
  int32x2_t v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  float v52;
  float64x2_t v54;
  double *v55;
  int8x16_t v56;
  uint64_t v57;
  unsigned __int16 v58;
  uint64_t v59;
  double *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  float v65;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  _QWORD v70[2];
  __int128 v71;
  __int128 v72;
  __int128 v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  uint64_t (*v77)(uint64_t, float32x2_t *, uint64_t);
  uint64_t v78;
  uint64_t v79;
  float64x2_t v80;
  float64x2_t v81;
  __int128 v82;
  float64x2_t v83;
  _OWORD v84[4];
  uint64_t v85;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  v4 = *(const Rect ***)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v5 = (Rect *)*v4;
  if (!*(_QWORD *)(a1 + 24))
  {
    v30 = *(_QWORD *)(v3 + 32);
    if ((v30 & 2) != 0)
    {
      if ((*(_BYTE *)(a1 + 224) & 1) != 0)
      {
        v31 = *(_QWORD **)(a1 + 232);
      }
      else
      {
        v31 = (_QWORD *)CA::OGL::prepare_layer(*(_QWORD *)(a1 + 8), *(_QWORD *)(*(_QWORD *)(v3 + 16) + 128), (const CA::Render::TransitionSubclass *)v3, a1 + 56, 0x4000000, (*(_DWORD *)(a1 + 220) >> 22) & 1);
        *(_QWORD *)(a1 + 232) = v31;
        *(_BYTE *)(a1 + 224) |= 1u;
      }
      v32 = CA::OGL::prepare_layers_roi(v4, v31, a1 + 56);
      CA::OGL::render_layers((CA::OGL *)v4, v32);
      *(_QWORD *)(a1 + 232) = 0;
      *(_BYTE *)(a1 + 224) &= ~1u;
      v30 = *(_QWORD *)(v3 + 32);
      if ((v30 & 1) != 0)
      {
        *(_BYTE *)(*(_QWORD *)&v5[2] + 481) |= 1u;
        v30 = *(_QWORD *)(v3 + 32);
      }
    }
    if ((v30 & 1) == 0)
      goto LABEL_52;
    *(_QWORD *)(*(_QWORD *)&v5[2] + 8) = 0x3C003C003C003C00;
    v33 = *(_QWORD *)(v3 + 24);
    v69 = *(float64x2_t *)(v33 + 80);
    v75 = *(float64x2_t *)(v33 + 64);
    v68 = v75;
    v76 = v69;
    v34 = (*(unsigned __int16 *)(v3 + 40) >> 6);
    v35 = *(float64x2_t **)(a1 + 80);
    *(_QWORD *)&v84[0] = &v75;
    *((_QWORD *)&v84[0] + 1) = v35;
    v36 = CA::OGL::transform_filter_bits(v35, a2, 1.0, 1.0);
    v37.i64[0] = 1.0;
    LODWORD(v84[1]) = CA::OGL::rect_filter_bits(v35, v36, v38, v68, v69, v37, 1.0);
    DWORD1(v84[1]) = v34;
    v84[2] = 0uLL;
    *((_QWORD *)&v84[1] + 1) = 0;
    LODWORD(v44) = 0;
    v45 = *(_QWORD *)(v33 + 128);
    if (v45)
    {
      v46 = *(_QWORD *)(v45 + 72);
      if (v46)
      {
        CA::OGL::fill_uneven_round_rect((CA::OGL::Context *)v5, (uint64_t)v84, (float64_t *)(v46 + 24), (double *)(*(_DWORD *)(v33 + 40) & 3), v44, v39, v40, v41, v42, v43);
LABEL_52:
        *(_BYTE *)(*(_QWORD *)&v5[2] + 481) &= ~1u;
        return;
      }
      v59 = *(_QWORD *)(v45 + 56);
      if (v59)
      {
        v60 = (double *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v59 + 80))(v59, 0.0);
        v61 = *(_QWORD *)(v3 + 24);
        v62 = *(_QWORD *)(v61 + 128);
        if (v62)
        {
          v63 = *(_QWORD *)(v62 + 64);
          if (v63)
          {
            if (*(_DWORD *)(v63 + 16) > 3u)
            {
              v67 = vsubq_f64(*(float64x2_t *)(v63 + 40), *(float64x2_t *)(v63 + 24));
              v82 = *(_OWORD *)(v63 + 24);
              v83 = v67;
            }
            else
            {
              v82 = 0u;
              v83 = 0u;
            }
          }
          else
          {
            __asm { FMOV            V0.2D, #0.5 }
            v82 = _Q0;
            v83 = 0uLL;
          }
          v65 = *(float *)(v62 + 228);
        }
        else
        {
          __asm { FMOV            V0.2D, #0.5 }
          v82 = _Q0;
          v83 = 0uLL;
          v65 = 0.0;
        }
        CA::OGL::fill_corner_rect((uint64_t)v5, (double **)v84, v60, (double *)&v82, *(_DWORD *)(*(_QWORD *)(v3 + 16) + 24) & 1, (*(_QWORD *)(v61 + 40) >> 41) & 1, *(_WORD *)(v61 + 38) & 0xF, v65, v65);
        goto LABEL_52;
      }
      LODWORD(v44) = *(_DWORD *)(v45 + 228);
    }
    CA::OGL::fill_round_rect((uint64_t)v5, (float64x2_t **)v84, (double *)(*(_WORD *)(v33 + 38) & 0xF), (double *)(*(_DWORD *)(v33 + 40) & 3), *(float *)&v44, *(float *)&v44);
    goto LABEL_52;
  }
  v7 = *(float64x2_t **)(v3 + 24);
  v8 = v7[5];
  v80 = v7[4];
  v81 = v8;
  v9 = v5[2];
  if (*(unsigned __int8 *)(*(_QWORD *)&v9 + 480) >= 2u)
  {
    *(_BYTE *)(*(_QWORD *)&v9 + 481) |= 1u;
    v9 = v5[2];
  }
  *(_QWORD *)(*(_QWORD *)&v9 + 8) = *(_QWORD *)(a1 + 88);
  v10 = 0.0;
  CA::OGL::Context::bind_surface((uint64_t)v5, *(_QWORD *)a2, 0, 0, 0, 0.0);
  v11 = (CA::Shape *)CA::Shape::intersect(*(CA::Shape **)(a1 + 64), (const CA::Bounds *)(*(_QWORD *)a2 + 32));
  memset(v84, 0, sizeof(v84));
  v85 = 0;
  *(_OWORD *)((char *)v84 + 8) = *(_OWORD *)(a1 + 64);
  v12 = *(_QWORD *)(a1 + 80);
  v13 = *(_QWORD *)(a1 + 88);
  *(_OWORD *)((char *)&v84[2] + 8) = *(_OWORD *)(a1 + 96);
  v14 = *(_QWORD *)(a1 + 112);
  *((_QWORD *)&v84[1] + 1) = v12;
  *(_QWORD *)&v84[2] = v13;
  *((_QWORD *)&v84[3] + 1) = v14;
  LOWORD(v13) = *(_WORD *)(a1 + 124) & 0x5FF;
  LODWORD(v85) = *(_DWORD *)(a1 + 120);
  WORD2(v85) = v13;
  *((_QWORD *)&v84[0] + 1) = v11;
  *(_QWORD *)&v84[0] = CA::OGL::Context::set_gstate((uint64_t)v5, (uint64_t)v84);
  v15 = (*(unsigned __int16 *)(v3 + 40) >> 6);
  v16 = *(_QWORD *)a2 + 32;
  v17 = (float64x2_t *)*((_QWORD *)&v84[1] + 1);
  *(_QWORD *)&v75.f64[0] = &v80;
  v75.f64[1] = *((float64_t *)&v84[1] + 1);
  v19 = CA::OGL::transform_filter_bits(*((float64x2_t **)&v84[1] + 1), v18, 1.0, 1.0);
  v20.i64[0] = 1.0;
  LODWORD(v76.f64[0]) = CA::OGL::rect_filter_bits(v17, v19, v21, v80, v81, v20, 1.0);
  HIDWORD(v76.f64[0]) = v15;
  v76.f64[1] = 0.0;
  v78 = 0;
  v79 = v16;
  v77 = CA::OGL::MaskNode::MaskRectState::map_;
  v22 = *(_QWORD *)(v3 + 24);
  v23 = *(_QWORD *)(v22 + 128);
  if (v23)
  {
    v24 = *(_QWORD *)(v23 + 72);
    if (v24)
    {
      CA::OGL::fill_uneven_round_rect_tex((CA::OGL::Context *)v5, (uint64_t)&v75, (float64_t *)(v24 + 24), (uint64_t)&CA::OGL::MaskNode::apply(float,CA::OGL::Surface **,float *)::identity_st, *(_DWORD *)(v22 + 40) & 3);
      goto LABEL_28;
    }
    v25 = *(_QWORD *)(v23 + 56);
    if (v25)
    {
      v26 = (uint32x2_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 80))(v25);
      v27 = *(_QWORD *)(v3 + 24);
      v28 = *(_QWORD *)(v27 + 128);
      if (v28)
      {
        v29 = *(_QWORD *)(v28 + 64);
        if (v29)
        {
          if (*(_DWORD *)(v29 + 16) > 3u)
          {
            v54 = vsubq_f64(*(float64x2_t *)(v29 + 40), *(float64x2_t *)(v29 + 24));
            v73 = *(_OWORD *)(v29 + 24);
            v74 = v54;
          }
          else
          {
            v73 = 0u;
            v74 = 0u;
          }
        }
        else
        {
          __asm { FMOV            V0.2D, #0.5 }
          v73 = _Q0;
          v74 = 0uLL;
        }
        v52 = *(float *)(v28 + 228);
      }
      else
      {
        __asm { FMOV            V0.2D, #0.5 }
        v73 = _Q0;
        v74 = 0uLL;
        v52 = 0.0;
      }
      CA::OGL::fill_corner_rect_tex((CA::OGL::Context *)v5, (double **)&v75, v26, (double *)&v73, *(_DWORD *)(*(_QWORD *)(v3 + 16) + 24) & 1, (*(_QWORD *)(v27 + 40) >> 41) & 1, (uint64_t)&CA::OGL::MaskNode::apply(float,CA::OGL::Surface **,float *)::identity_st, *(_WORD *)(v27 + 38) & 0xF, v52, v52, 0);
      goto LABEL_28;
    }
    v10 = *(float *)(v23 + 228);
  }
  CA::OGL::fill_round_rect_tex((CA::OGL::Context *)v5, (float64x2_t **)&v75, (uint64_t)&CA::OGL::MaskNode::apply(float,CA::OGL::Surface **,float *)::identity_st, (double *)(*(_WORD *)(v22 + 38) & 0xF), *(_DWORD *)(v22 + 40) & 3, 0, v10, v10);
LABEL_28:
  CA::OGL::Context::unbind_surface(v5, *(_QWORD *)a2, 0);
  *(_BYTE *)(*(_QWORD *)&v5[2] + 481) &= ~1u;
  v57 = 2147500096;
  switch((*(_DWORD *)(a1 + 220) >> 17) & 7)
  {
    case 1:
      goto LABEL_37;
    case 2:
      goto LABEL_33;
    case 3:
      v58 = 128;
      goto LABEL_35;
    case 5:
      if (*(_QWORD *)a2 && (*(_BYTE *)(*(_QWORD *)a2 + 69) & 8) != 0)
LABEL_33:
        v57 = 8388736;
      else
        v57 = 2155872384;
      goto LABEL_37;
    case 6:
      v58 = -32640;
LABEL_35:
      v57 = v58 | 0x80000000;
      goto LABEL_37;
    case 7:
      v57 = 8421504;
LABEL_37:
      v70[0] = &v80;
      v70[1] = *((_QWORD *)&v84[1] + 1);
      v71 = 0u;
      v72 = 0u;
      CA::OGL::fill_color_rect((uint64_t)v5, (uint64_t)v70, (double *)v57, v55, 0.0, v56);
      break;
    default:
      break;
  }
  CA::OGL::Context::set_gstate((uint64_t)v5, **(_QWORD **)&v5[29]);
  if (v11)
    CA::Shape::unref(v11);
}

uint64_t CA::OGL::MaskNode::propagate_roi(uint64_t this, const CA::Bounds *a2)
{
  _BYTE *v2;
  uint64_t v4;
  const CA::Transform *v5;
  uint64_t v6;
  __int128 v7;
  int8x16_t v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  int32x4_t v15;
  int32x4_t v16;
  int v17;
  int v18;
  int v19;
  int64x2_t v20;
  int8x16_t v21;
  double v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  const CA::Transform *v28;
  int8x16_t v29;
  double v30;
  double v31;
  int8x16_t v32;
  __int128 v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v2 = *(_BYTE **)(this + 24);
  if (v2)
  {
    v4 = this;
    v5 = *(const CA::Transform **)(this + 80);
    if ((*((_BYTE *)v5 + 144) & 0x10) == 0 && (*(_BYTE *)(this + 222) & 0x20) == 0 && (v2[222] & 0x10) == 0)
    {
      v6 = *(_QWORD *)(*(_QWORD *)(this + 16) + 24);
      v8 = *(int8x16_t *)(v6 + 64);
      v7 = *(_OWORD *)(v6 + 80);
      v32 = v8;
      v33 = v7;
      v9 = *(_QWORD *)(v6 + 128);
      v10 = *((double *)&v7 + 1);
      if (v9)
      {
        if (*(_QWORD *)(v9 + 72))
        {
          v27 = v6;
          v28 = v5;
          v26 = *((double *)&v7 + 1);
          v24 = v8.i64[1];
          v25 = v7;
          CA::Render::Layer::max_corner_radii(v9);
          v8.i64[1] = v24;
          *(_QWORD *)&v7 = v25;
          v6 = v27;
          v5 = v28;
          v10 = v26;
        }
        else
        {
          v11 = *(float *)(v9 + 228);
        }
      }
      else
      {
        v11 = 0.0;
      }
      if (v11 > 0.0)
      {
        if ((*(_BYTE *)(v6 + 40) & 3) != 0)
          v11 = v11 * 1.528665;
        if (*(double *)&v7 <= v10)
          v12 = v10;
        else
          v12 = *(double *)&v7;
        if (v12 < 1.79769313e308)
        {
          v13 = *(double *)&v7 >= v10 ? v10 : *(double *)&v7;
          if (v13 > 0.0)
          {
            *(double *)&v32.i64[1] = *(double *)&v8.i64[1] + v11;
            *(_QWORD *)&v33 = v7;
            v14 = v10 - (v11 + v11);
            *((double *)&v33 + 1) = v14;
            if (*(double *)&v7 <= 0.0 || v14 <= 0.0)
              v33 = 0uLL;
          }
        }
      }
      *(double *)v15.i64 = CA::Rect::apply_transform_interior(&v32, v5);
      v17 = *((_DWORD *)a2 + 2);
      v18 = *((_DWORD *)a2 + 3);
      if (v17 <= v18)
        v19 = *((_DWORD *)a2 + 3);
      else
        v19 = *((_DWORD *)a2 + 2);
      v15.i32[0] = 1073741822;
      v16.i32[0] = v19;
      v20.i64[0] = (int)*(_QWORD *)a2;
      v20.i64[1] = (int)HIDWORD(*(_QWORD *)a2);
      v21 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v16, v15), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v20));
      v22 = (double)v17;
      if (v19 > 1073741822)
        v22 = 1.79769313e308;
      v29 = v21;
      if (v19 <= 1073741822)
        v23 = (double)v18;
      else
        v23 = 1.79769313e308;
      v30 = v22;
      v31 = v23;
      if (CA::BoundsImpl::contains((double *)v32.i64, (double *)v29.i64))
      {
        *(_WORD *)(v4 + 212) |= 0x100u;
        v2[124] = *(_BYTE *)(v4 + 124);
        v2 = *(_BYTE **)(v4 + 24);
      }
    }
    this = (*(uint64_t (**)(_BYTE *, const CA::Bounds *))(*(_QWORD *)v2 + 56))(v2, a2);
    *(_WORD *)(*(_QWORD *)(v4 + 24) + 212) |= 0x200u;
  }
  return this;
}

uint64_t CA::OGL::AsynchronousNode::propagate_roi(CA::OGL::AsynchronousNode *this, const CA::Bounds *a2, float a3, double a4, double a5, double a6, float64x2_t a7)
{
  uint64_t v8;
  uint64_t v9;
  float v10;
  float64x2_t v11;
  float64x2_t v12;
  double v13;
  int8x16_t v14;
  int8x16_t v15;
  uint64_t v16;
  int64x2_t v17;
  int8x16_t v18;
  float64x2_t v19;
  float64x2_t v20;
  int32x4_t v21;
  uint64_t result;
  int32x4_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(*((_QWORD *)this + 2) + 24);
  v9 = *(_QWORD *)(v8 + 128);
  if (v9)
  {
    v10 = *(float *)(v9 + 284);
  }
  else
  {
    LOBYTE(a3) = *(_BYTE *)(v8 + 35);
    v10 = (float)LODWORD(a3);
  }
  v11 = *(float64x2_t *)(v8 + 64);
  v12 = *(float64x2_t *)(v8 + 80);
  if (v10 != 1.0)
  {
    v13 = v10;
    a7.f64[0] = 1.79769313e308;
    v14 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(a7, v12).i64[0], 0);
    v15.i64[1] = *(_QWORD *)(v8 + 72);
    *(double *)v15.i64 = v13 * v11.f64[0];
    v11 = (float64x2_t)vbslq_s8(v14, v15, (int8x16_t)v11);
    v15.i64[1] = *(_QWORD *)(v8 + 88);
    *(double *)v15.i64 = v13 * v12.f64[0];
    v12 = (float64x2_t)vbslq_s8(v14, v15, (int8x16_t)v12);
    if (v12.f64[1] < 1.79769313e308)
    {
      v11.f64[1] = vmuld_lane_f64(v13, v11, 1);
      v12.f64[1] = v12.f64[1] * v13;
    }
  }
  v16 = *((_QWORD *)this + 3);
  v17 = vceqzq_f64(v12);
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v17, 1), (int8x16_t)v17).u64[0] & 0x8000000000000000) != 0
    || (v18 = vorrq_s8((int8x16_t)vcltzq_f64(v12), (int8x16_t)vcgezq_f64(v12)),
        (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v18), 1), v18).u64[0] & 0x8000000000000000) != 0))
  {
    v23 = 0uLL;
  }
  else
  {
    v19 = vmaxnmq_f64(v11, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000));
    v20 = vminnmq_f64(vaddq_f64(v11, v12), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL));
    v21 = (int32x4_t)vcvtmq_s64_f64(v19);
    v23 = vuzp1q_s32(v21, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(v20), (int64x2_t)v21));
  }
  result = (*(uint64_t (**)(uint64_t, int32x4_t *))(*(_QWORD *)v16 + 56))(v16, &v23);
  *(_DWORD *)(*((_QWORD *)this + 3) + 216) = *(_DWORD *)(*((_QWORD *)this + 3) + 216) & 0xFFC00000 | *((_DWORD *)this + 54) & 0x3FFFFF;
  *(_DWORD *)(*((_QWORD *)this + 3) + 216) |= 0x1000u;
  return result;
}

void CA::Render::Transition::~Transition(CA::Render::Transition *this, const CA::Render::Object *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  malloc_zone_t *malloc_zone;

  *(_QWORD *)this = off_1E1596440;
  v3 = (unsigned int *)*((_QWORD *)this + 5);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
  }
  v7 = (unsigned int *)*((_QWORD *)this + 4);
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
  }
  v11 = (unsigned int *)*((_QWORD *)this + 3);
  if (v11)
  {
    v12 = v11 + 2;
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
      (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 16))(v11);
  }
  --dword_1ECDC7D00;
  *(_QWORD *)this = off_1E1598C30;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0)
    CA::Render::Encoder::ObjectCache::invalidate(this, a2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;

  *(_QWORD *)this = off_1E1596440;
  v3 = (unsigned int *)*((_QWORD *)this + 5);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
  }
  v7 = (unsigned int *)*((_QWORD *)this + 4);
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
  }
  v11 = (unsigned int *)*((_QWORD *)this + 3);
  if (v11)
  {
    v12 = v11 + 2;
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
      (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 16))(v11);
  }
  --dword_1ECDC7D00;
  *(_QWORD *)this = off_1E1598C30;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0)
    CA::Render::Encoder::ObjectCache::invalidate(this, a2);
}

void CA::OGL::FilterNode::~FilterNode(CA::OGL::FilterNode *this)
{
  *(_QWORD *)this = &off_1E1593D88;
  CA::OGL::finalize_filter(*((_QWORD **)this + 29));
}

{
  *(_QWORD *)this = &off_1E1593D88;
  CA::OGL::finalize_filter(*((_QWORD **)this + 29));
  abort();
}

double CA::OGL::FilterNode::compute_dod(CA::OGL::FilterNode *this, CA::Bounds *a2)
{
  uint64_t v4;
  int v5;
  int32x4_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const Rect *v10;
  const double *v11;
  int32x4_t v12;
  int v13;
  int v14;
  int v15;
  int64x2_t v16;
  int8x16_t v17;
  double v18;
  double v19;
  double v20;
  double *v21;
  __int128 v23;
  int8x16_t v24;
  double v25;
  double v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 3);
  v5 = *(_DWORD *)(v4 + 136);
  if (v5 < 0)
  {
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v4 + 40))(*((_QWORD *)this + 3), v4 + 128);
    v5 = *(_DWORD *)(v4 + 136);
  }
  v6.i64[0] = *(_QWORD *)(v4 + 128);
  *(_QWORD *)a2 = v6.i64[0];
  *((_DWORD *)a2 + 2) = v5;
  *((_DWORD *)a2 + 3) = *(_DWORD *)(v4 + 140);
  v7 = *(_QWORD *)(*((_QWORD *)this + 29) + 16);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 48);
    if (v8)
    {
      v9 = *((_QWORD *)this + 2);
      v10 = (const Rect *)**((_QWORD **)this + 1);
      if (((*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)v8 + 8))(*(_QWORD *)(v7 + 48), v7, *(_QWORD *)(v9 + 24)) & 1) == 0)
      {
        v13 = *((_DWORD *)a2 + 2);
        v14 = *((_DWORD *)a2 + 3);
        if (v13 <= v14)
          v15 = *((_DWORD *)a2 + 3);
        else
          v15 = *((_DWORD *)a2 + 2);
        v6.i32[0] = 1073741822;
        v12.i32[0] = v15;
        v16.i64[0] = (int)*(_QWORD *)a2;
        v16.i64[1] = (int)HIDWORD(*(_QWORD *)a2);
        v17 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v12, v6), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v16));
        v18 = (double)v13;
        v19 = (double)v14;
        if (v15 > 1073741822)
        {
          v18 = 1.79769313e308;
          v19 = 1.79769313e308;
        }
        v24 = v17;
        v25 = v18;
        v26 = v19;
        v20 = CA::Rect::unapply_transform((CA::Rect *)&v24, *((const CA::Transform **)this + 10), v11);
        (*(void (**)(uint64_t, uint64_t, _QWORD, int8x16_t *, double))(*(_QWORD *)v8 + 48))(v8, v7, *(_QWORD *)(v9 + 24), &v24, v20);
        CA::Rect::apply_transform(&v24, *((const CA::Transform **)this + 10), v21);
        CA::OGL::Context::raster_round_rect((CA::OGL::Context *)&v23, v10, (double *)v24.i64);
        v6.i64[0] = v23;
        *(_OWORD *)a2 = v23;
      }
    }
  }
  return *(double *)v6.i64;
}

uint64_t CA::OGL::ShadowNode::add_roi(CA::Bounds **this, int32x2_t *a2, double a3, int32x4_t a4)
{
  int32x2_t *v4;
  CA::OGL::ShadowNode *v5;
  uint64_t v6;
  uint64_t v7;
  __int32 v8;
  int32x2_t v9;
  uint32x2_t v10;
  uint32x2_t v11;
  unsigned __int32 v12;
  int32x2_t v13;
  uint64_t result;
  const double *v15;
  int32x4_t v16;
  uint64_t v17;
  int32x2_t v18;
  uint32x2_t v19;
  uint32x2_t v20;
  unsigned __int32 v21;
  int32x2_t v22;
  int32x4_t v23;
  int32x4_t v24;
  uint64_t v25;

  v4 = a2;
  v5 = (CA::OGL::ShadowNode *)this;
  v25 = *MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)this[2] + 3);
  if ((*(_BYTE *)(v6 + 44) & 4) == 0)
  {
    v7 = *(_QWORD *)(v6 + 128);
    if (!v7 || !*(_QWORD *)(v7 + 120))
    {
      v23 = *(int32x4_t *)a2->i8;
      v24 = v23;
      CA::OGL::ShadowNode::map_bounds((CA::OGL::ShadowNode *)v6, this[10], (uint64_t)&v24, 0, v23, a4);
      v9.i32[1] = v23.i32[3];
      v8 = v23.i32[2];
      v10 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, (int32x2_t)v24.u64[1]);
      v11 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, (int32x2_t)v23.u64[1]);
      v12 = vpmax_u32(v11, v11).u32[0];
      if ((vpmax_u32(v10, v10).u32[0] & 0x80000000) != 0)
      {
        if ((v12 & 0x80000000) == 0)
        {
          v24.i64[0] = v23.i64[0];
          goto LABEL_10;
        }
      }
      else if ((v12 & 0x80000000) == 0)
      {
        v13 = vmin_s32(*(int32x2_t *)v24.i8, *(int32x2_t *)v23.i8);
        v9 = vsub_s32(vmax_s32(vadd_s32(*(int32x2_t *)v24.i8, (int32x2_t)v24.u64[1]), vadd_s32(*(int32x2_t *)v23.i8, (int32x2_t)v23.u64[1])), v13);
        *(int32x2_t *)v24.i8 = v13;
        v8 = v9.i32[0];
LABEL_10:
        v24.i32[2] = v8;
        *(_DWORD *)((unint64_t)&v24 | 0xC) = v9.i32[1];
      }
      a2 = (int32x2_t *)&v24;
      this = (CA::Bounds **)v5;
    }
  }
  result = CA::OGL::ImagingNode::add_roi((int32x2_t *)this, a2);
  v17 = *(_QWORD *)(v6 + 128);
  if (v17 && *(float *)(v17 + 296) != 0.0)
  {
    v24 = *(int32x4_t *)v4->i8;
    CA::OGL::ShadowNode::map_bounds_rim(v5, (CA::Bounds *)&v24, v15, v24, v16);
    v18 = v4[1];
    v19 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, (int32x2_t)v24.u64[1]);
    v20 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v18);
    v21 = vpmax_u32(v20, v20).u32[0];
    if ((vpmax_u32(v19, v19).u32[0] & 0x80000000) != 0)
    {
      if ((v21 & 0x80000000) == 0)
      {
        v22 = *v4;
        goto LABEL_19;
      }
    }
    else if ((v21 & 0x80000000) == 0)
    {
      v22 = vmin_s32(*(int32x2_t *)v24.i8, *v4);
      v18 = vsub_s32(vmax_s32(vadd_s32(*(int32x2_t *)v24.i8, (int32x2_t)v24.u64[1]), vadd_s32(*v4, v18)), v22);
LABEL_19:
      *(int32x2_t *)v24.i8 = v22;
      v24.u64[1] = (unint64_t)v18;
    }
    return CA::OGL::ImagingNode::add_roi((int32x2_t *)v5, (int32x2_t *)&v24);
  }
  return result;
}

void CA::OGL::ShadowNode::apply(uint64_t a1, uint64_t *a2, uint64_t a3, double *a4)
{
  uint64_t v6;
  CA::OGL::Context *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  float32x4_t v19;
  uint64_t v20;
  float v21;
  unint64_t v22;
  float16x4_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  float v30;
  float v31;
  double v37;
  float64_t v38;
  float32x4_t v39;
  double v40;
  double v41;
  char v42;
  int v43;
  double *v44;
  int32x4_t v45;
  int8x16_t v46;
  int32x4_t v47;
  int32x4_t v48;
  uint64_t v49;
  uint64_t v50;
  float v51;
  uint64_t v52;
  float16x4_t v53;
  double v54;
  uint64_t v55;
  double v56;
  float16x4_t v57;
  float v58;
  uint64_t v59;
  uint64_t v60;
  float16x4_t v61;
  float v62;
  float v63;
  int32x4_t v64;
  float16x4_t v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  int8x16_t v70;
  uint64_t v71;
  int64x2_t v72;
  int8x16_t v73;
  double v74;
  double v75;
  uint64_t v76;
  int v78;
  __int128 v79;
  double v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  double *v87;
  CA::Shape *v88;
  int32x4_t v89;
  int32x4_t v90;
  _DWORD *v91;
  uint64_t v92;
  int v93;
  int v94;
  int v95;
  int8x16_t v96;
  uint64_t v97;
  int64x2_t v98;
  int8x16_t v99;
  double v100;
  double v101;
  float32x4_t *v102;
  float16x4_t v103;
  double v104;
  uint64_t v105;
  double v107;
  float v108;
  float16x4_t v109;
  float32x4_t *v110;
  double v111;
  uint64_t v112;
  int v113;
  int v114;
  int v115;
  int8x16_t v116;
  uint64_t v117;
  int64x2_t v118;
  int8x16_t v119;
  double v120;
  double v121;
  unint64_t v122;
  float16x4_t v123;
  float16x4_t v124;
  double v125[2];
  float16x4_t v126;
  float16x4_t v127;
  double v128;
  double v129;
  float32x4_t *v130;
  __int128 *v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  uint64_t v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  float32x4_t v150;
  double v151;
  double v152;
  double v153;
  float v154;
  float v155;
  float v156;
  uint64_t v157;
  float v158;
  int8x16_t v159;
  float64x2_t v160;
  double v161;
  float v162;
  float32x4_t v163;
  uint64_t v164;

  v164 = *MEMORY[0x1E0C80C00];
  if (*a2)
  {
    v6 = *(_QWORD *)(a1 + 16);
    v7 = **(CA::OGL::Context ***)(a1 + 8);
    v8 = *(_QWORD *)(v6 + 24);
    if ((*(_BYTE *)(v6 + 33) & 8) == 0)
      goto LABEL_37;
    v9 = *(_QWORD *)(v8 + 40);
    v10 = v9 & 0xA00000000;
    if ((v9 & 0x400000000) != 0)
    {
      v13 = *(_OWORD *)(v8 + 80);
      v137 = *(_OWORD *)(v8 + 64);
      v138 = v13;
      v14 = *((_QWORD *)v7 + 2);
      if (*(unsigned __int8 *)(v14 + 480) >= 2u)
        *(_BYTE *)(v14 + 481) |= 1u;
      v15 = *(_QWORD *)(v8 + 128);
      if (v15)
      {
        v16 = *(_QWORD *)(v15 + 72);
        if (v16)
        {
          v130 = *(float32x4_t **)(v15 + 216);
          v40 = *(float *)(v15 + 224);
          v127 = vcvt_f16_f32(*(float32x4_t *)(v15 + 200));
          CA::OGL::emit_shadow_uneven_round_rect(v7, (float64x2_t *)&v137, (float32x2_t *)&v130, (double *)(v16 + 24), &v127, *(unsigned __int8 *)(v8 + 33), (*(_QWORD *)(v8 + 40) >> 33) & 1, v10 == 0x800000000, v40, *(_DWORD *)(v8 + 40) & 3, *(_QWORD *)(*((_QWORD *)v7 + 29) + 24));
          goto LABEL_37;
        }
        v130 = *(float32x4_t **)(v15 + 216);
        v17 = *(float *)(v15 + 228);
        v18 = *(float *)(v15 + 224);
        v19 = *(float32x4_t *)(v15 + 200);
      }
      else
      {
        *(double *)&v130 = -32.0;
        v19 = (float32x4_t)xmmword_18474DFE0;
        v18 = 3.0;
        v17 = 0.0;
      }
      v126 = vcvt_f16_f32(v19);
      CA::OGL::emit_shadow_round_rect(v7, (float64x2_t *)&v137, (float32x2_t *)&v130, &v126, *(unsigned __int8 *)(v8 + 33), (*(_QWORD *)(v8 + 40) >> 33) & 1, v10 == 0x800000000, *(_QWORD *)(v8 + 40) & 3, v17, v18, *(_WORD *)(v8 + 38) & 0xF, *(_QWORD *)(a1 + 80));
      goto LABEL_37;
    }
    v11 = *(_QWORD *)(v8 + 128);
    if (v11 && *(_QWORD *)(v11 + 120))
    {
      v12 = *((_QWORD *)v7 + 2);
      if (*(unsigned __int8 *)(v12 + 480) <= 1u || (*(_BYTE *)(v12 + 481) |= 1u, (v11 = *(_QWORD *)(v8 + 128)) != 0))
      {
        v38 = *(double *)(v11 + 216);
        v39 = *(float32x4_t *)(v11 + 200);
      }
      else
      {
        v39 = (float32x4_t)xmmword_18474DFE0;
        v38 = -32.0;
      }
      *(float64_t *)&v137 = v38;
      *(float16x4_t *)&v125[1] = vcvt_f16_f32(v39);
      CA::OGL::emit_shadow_path((uint64_t)v7);
      goto LABEL_37;
    }
    *(_BYTE *)(*((_QWORD *)v7 + 2) + 481) &= ~1u;
    v20 = *(_QWORD *)(v8 + 128);
    if (v20)
    {
      v21 = *(float *)(v20 + 224);
      v22 = *(_QWORD *)(v20 + 216);
      v23 = vcvt_f16_f32(*(float32x4_t *)(v20 + 200));
    }
    else
    {
      v23 = (float16x4_t)0x3C00000000000000;
      v22 = 0xC040000000000000;
      v21 = 3.0;
    }
    v24 = *(unsigned __int8 *)(v8 + 33);
    v25 = *(_QWORD *)(v8 + 40);
    v26 = *a2;
    v27 = *(_QWORD *)(a1 + 80);
    *(_QWORD *)&v140 = 0;
    v138 = 0u;
    v139 = 0u;
    HIDWORD(v139) = 15;
    *(double *)&v130 = 0.0;
    *(_QWORD *)&v147 = 0;
    if ((*(_BYTE *)(v27 + 144) & 0x10) != 0)
    {
      v122 = v22;
      CA::Mat4Impl::mat4_get_scale((CA::Mat4Impl *)v27, (double *)&v130, (double *)&v147, a4);
      v22 = v122;
      v29 = *(double *)&v130;
      v28 = *(double *)&v147;
    }
    else
    {
      v28 = *(double *)(v27 + 128);
      *(double *)&v130 = v28;
      *(double *)&v147 = v28;
      v29 = v28;
    }
    v30 = v29;
    v31 = v28;
    *(float *)&v137 = v21 * v30;
    *((float *)&v137 + 1) = v21 * v31;
    _D0 = (int16x4_t)vcvt_f32_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)v27, *(float *)&v22), *(float64x2_t *)(v27 + 32), *((float *)&v22 + 1)));
    *((int16x4_t *)&v137 + 1) = _D0;
    LOBYTE(v140) = 32 * (v10 == 0x800000000);
    if (byte_1ECDC6AEF)
    {
      v23 = (float16x4_t)0x3C00340000003A00;
    }
    else if (*(_QWORD *)&v23 == 0x3C003C003C003C00)
    {
      *(float *)_D0.i32 = (float)v24 * 0.0039216;
      __asm { FCVT            H0, S0 }
      v37 = COERCE_DOUBLE(vdup_lane_s16(_D0, 0));
LABEL_31:
      v41 = COERCE_DOUBLE(vcvt_f16_f32(vmulq_f32(vcvtq_f32_f16(*(float16x4_t *)(*((_QWORD *)v7 + 29) + 32)), vcvtq_f32_f16(*(float16x4_t *)&v37))));
      if (*(_QWORD *)(*((_QWORD *)v7 + 29) + 32) != 0x3C003C003C003C00)
        v37 = v41;
      *(double *)(*((_QWORD *)v7 + 2) + 8) = v37;
      if ((v25 & 0x200000000) != 0)
        v42 = 12;
      else
        v42 = 11;
      *(_BYTE *)(*((_QWORD *)v7 + 2) + 16) = v42;
      (*(void (**)(CA::OGL::Context *, uint64_t, __int128 *, _QWORD, float, float))(*(_QWORD *)v7 + 848))(v7, v26, &v137, 0, 1.0, 1.0);
      *(_BYTE *)(*((_QWORD *)v7 + 2) + 16) = 0;
LABEL_37:
      v43 = (*(uint64_t (**)(CA::OGL::Context *, uint64_t))(*(_QWORD *)v7 + 184))(v7, 39);
      v49 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
      if (v43)
      {
        if ((v49 & 0x100000000) != 0)
        {
          v50 = *(_QWORD *)(v8 + 40);
          if ((v50 & 0x1000000000) == 0)
          {
            v51 = 1.0;
            if ((v50 & 0x4000000000) == 0)
              v51 = 0.0;
            *(double *)&v130 = 0.0;
            goto LABEL_52;
          }
        }
        if ((v49 & 0x40) != 0)
        {
          v52 = *(_QWORD *)(v8 + 40);
          if ((v52 & 0x2000000000) == 0)
          {
            v51 = 1.0;
            if ((v52 & 0x4000000000) == 0)
              v51 = 0.0;
            *(double *)&v130 = 0.0;
            if ((v49 & 0x100000000) == 0)
            {
              v53 = 0;
              v54 = 0.0;
              goto LABEL_105;
            }
LABEL_52:
            v60 = *(_QWORD *)(v8 + 128);
            if (v60)
            {
              v54 = *(float *)(v60 + 296);
              v61 = vcvt_f16_f32(*(float32x4_t *)(v60 + 300));
              v62 = *(float *)(v60 + 316);
            }
            else
            {
              HIWORD(v130) = 15360;
              v62 = 0.0;
              v54 = 0.0;
              v61 = (float16x4_t)v130;
            }
            v53 = vcvt_f16_f32(vmulq_n_f32(vcvtq_f32_f16(v61), v62));
            if ((v49 & 0x40) == 0)
            {
              v109 = 0;
              goto LABEL_108;
            }
LABEL_105:
            v110 = *(float32x4_t **)(v8 + 128);
            if (v110)
            {
              v111 = v110[14].f32[3];
              v109 = vcvt_f16_f32(v110[15]);
LABEL_109:
              v112 = *a2;
              v113 = *(_DWORD *)(*a2 + 40);
              v114 = *(_DWORD *)(*a2 + 44);
              if (v113 <= v114)
                v115 = *(_DWORD *)(*a2 + 44);
              else
                v115 = *(_DWORD *)(*a2 + 40);
              v47.i32[0] = 1073741822;
              v48.i32[0] = v115;
              v116 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v48, v47), 0);
              v117 = *(_QWORD *)(v112 + 32);
              v118.i64[0] = (int)v117;
              v118.i64[1] = SHIDWORD(v117);
              v119 = vbslq_s8(v116, (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v118));
              v120 = (double)v113;
              v121 = (double)v114;
              if (v115 > 1073741822)
              {
                v120 = 1.79769313e308;
                v121 = 1.79769313e308;
              }
              v137 = (__int128)v119;
              *(double *)&v138 = v120;
              *((double *)&v138 + 1) = v121;
              v125[0] = *(double *)&v53;
              v124 = v109;
              CA::OGL::emit_large_brim(v7, v112, (float64x2_t *)&v137, v125, &v124, *(CA::Mat4Impl **)(a1 + 80), 0, v54, v51, v111, 0.05);
LABEL_115:
              *(_BYTE *)(*((_QWORD *)v7 + 2) + 481) &= ~1u;
              return;
            }
            v109 = (float16x4_t)0x3C00000000000000;
LABEL_108:
            v111 = 0.0;
            goto LABEL_109;
          }
        }
      }
      if ((v49 & 0x100000000) != 0)
      {
        v55 = *(_QWORD *)(v8 + 128);
        if (v55)
        {
          v56 = *(float *)(v55 + 296);
          v57 = vcvt_f16_f32(*(float32x4_t *)(v55 + 300));
          v58 = *(float *)(v55 + 316);
          v59 = *(_QWORD *)(v8 + 40);
          v46.i32[0] = *(_DWORD *)(v55 + 228);
        }
        else
        {
          v57 = (float16x4_t)0x3C00000000000000;
          v59 = *(_QWORD *)(v8 + 40);
          v56 = 0.0;
          v58 = 0.0;
          v46.i32[0] = 0;
        }
        if ((v59 & 0x4000000000) != 0)
          v63 = 1.0;
        else
          v63 = 0.0;
        v64 = (int32x4_t)vmulq_n_f32(vcvtq_f32_f16(v57), v58);
        v65 = vcvt_f16_f32((float32x4_t)v64);
        if ((v59 & 0x1000000000) != 0)
        {
          v78 = *(_WORD *)(v8 + 38) & 0xF;
          *(double *)v46.i64 = *(float *)v46.i32;
          v79 = *(_OWORD *)(v8 + 80);
          v137 = *(_OWORD *)(v8 + 64);
          v138 = v79;
          v123 = v65;
          CA::OGL::emit_rim_rounded_rect(v7, (float64x2_t *)&v137, &v123, (double *)(v59 & 3), v78, *(CA::Mat4Impl **)(*((_QWORD *)v7 + 29) + 24), v56, v63, v46, *(double *)v46.i64);
        }
        else
        {
          v66 = *a2;
          v67 = *(_DWORD *)(*a2 + 40);
          v68 = *(_DWORD *)(*a2 + 44);
          if (v67 <= v68)
            v69 = *(_DWORD *)(*a2 + 44);
          else
            v69 = *(_DWORD *)(*a2 + 40);
          v64.i32[0] = 1073741822;
          v45.i32[0] = v69;
          v70 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v45, v64), 0);
          v71 = *(_QWORD *)(v66 + 32);
          v72.i64[0] = (int)v71;
          v72.i64[1] = SHIDWORD(v71);
          v73 = vbslq_s8(v70, (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v72));
          v74 = (double)v67;
          v75 = (double)v68;
          if (v69 > 1073741822)
          {
            v74 = 1.79769313e308;
            v75 = 1.79769313e308;
          }
          v150 = (float32x4_t)v73;
          v151 = v74;
          v152 = v75;
          v76 = *(_QWORD *)(a1 + 80);
          if (byte_1ECDC6AEF)
            v65 = (float16x4_t)0x3C00000000003A00;
          *(_BYTE *)(*((_QWORD *)v7 + 2) + 481) |= 1u;
          *(_BYTE *)(*((_QWORD *)v7 + 2) + 16) = 57;
          v146 = 0;
          v137 = xmmword_18474DF40;
          v138 = 0u;
          v139 = xmmword_18474DF50;
          v140 = 0u;
          v141 = 0u;
          v142 = xmmword_18474DF40;
          v143 = 0u;
          v144 = xmmword_18474DF50;
          __asm { FMOV            V0.2D, #1.0 }
          v145 = _Q0;
          *(double *)&v130 = COERCE_DOUBLE(&v150);
          v131 = &v137;
          v132 = 63;
          v133 = 0;
          v135 = 0;
          v134 = 0;
          v136 = 0;
          v128 = 0.0;
          v129 = 0.0;
          if ((*(_BYTE *)(v76 + 144) & 0x10) != 0)
          {
            CA::Mat4Impl::mat4_get_scale((CA::Mat4Impl *)v76, &v129, &v128, v44);
          }
          else
          {
            v128 = *(double *)(v76 + 128);
            v129 = v128;
          }
          CA::OGL::Context::bind_surface((uint64_t)v7, v66, 0, 0, 0, 0.0);
          v163 = vcvtq_f32_f16(v65);
          v80 = v129;
          if (v129 >= v128)
            v80 = v128;
          v81 = v80 * v56;
          if (v81 > 5.0)
            v81 = 5.0;
          if (v81 >= 0.0)
            v82 = v81;
          else
            v82 = 0.0;
          *(_QWORD *)&v161 = LODWORD(v82);
          v162 = v63;
          (*(void (**)(CA::OGL::Context *, _QWORD, uint64_t, uint64_t, float32x4_t *))(*(_QWORD *)v7 + 1000))(v7, 0, 4, 1, &v163);
          (*(void (**)(CA::OGL::Context *, uint64_t, uint64_t, uint64_t, double *))(*(_QWORD *)v7 + 1000))(v7, 1, 3, 1, &v161);
          *(double *)&v147 = *(double *)v150.i64 - v82;
          *((_QWORD *)&v147 + 1) = v150.i64[0];
          *(double *)&v148 = v151 + *(double *)v150.i64;
          *((double *)&v148 + 1) = v151 + *(double *)v150.i64 + v82;
          *(double *)v159.i64 = *(double *)&v150.i64[1] - v82;
          v159.i64[1] = v150.i64[1];
          v160.f64[0] = v152 + *(double *)&v150.i64[1];
          v160.f64[1] = v152 + *(double *)&v150.i64[1] + v82;
          v156 = -v82;
          LODWORD(v157) = 0;
          v83 = v151;
          v84 = v151 + v82;
          *((float *)&v157 + 1) = v83;
          v158 = v84;
          *(float *)&v153 = -v82;
          HIDWORD(v153) = 0;
          v85 = v152;
          v86 = v152 + v82;
          v154 = v85;
          v155 = v86;
          CA::OGL::emit_nine_part_rect((uint64_t)v7, (uint64_t)&v130, (uint64_t)&v147, (uint64_t)&v159, (uint64_t)&v156, (uint64_t)&v153, 0, 0, 0);
          CA::OGL::Context::unbind_surface(v7, v66, 0);
          *(_BYTE *)(*((_QWORD *)v7 + 2) + 16) = 0;
        }
      }
      *(_BYTE *)(*((_QWORD *)v7 + 2) + 481) |= 1u;
      v148 = 0u;
      v149 = 0u;
      v147 = 0u;
      CA::Shape::operator=((uint64_t)&v147, (_DWORD *)(*a2 + 32));
      v88 = (CA::Shape *)CA::Shape::intersect((uint64_t)&v147, *(_QWORD *)(a1 + 64));
      if (!byte_1ECDC6AEE)
      {
        v91 = (_DWORD *)*a2;
        v137 = 0uLL;
        CA::OGL::emit_combine((uint64_t)v7, 1, v91, 0, v88, (unsigned int *)&v137);
      }
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + 32) & 0x40) != 0)
      {
        v92 = *a2;
        v93 = *(_DWORD *)(v92 + 40);
        v94 = *(_DWORD *)(v92 + 44);
        if (v93 <= v94)
          v95 = *(_DWORD *)(v92 + 44);
        else
          v95 = *(_DWORD *)(v92 + 40);
        v89.i32[0] = 1073741822;
        v90.i32[0] = v95;
        v96 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v90, v89), 0);
        v97 = *(_QWORD *)(v92 + 32);
        v98.i64[0] = (int)v97;
        v98.i64[1] = SHIDWORD(v97);
        v99 = vbslq_s8(v96, (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v98));
        v100 = (double)v93;
        v101 = (double)v94;
        if (v95 > 1073741822)
        {
          v100 = 1.79769313e308;
          v101 = 1.79769313e308;
        }
        v159 = v99;
        v160.f64[0] = v100;
        v160.f64[1] = v101;
        v102 = *(float32x4_t **)(v8 + 128);
        if (v102)
        {
          v103 = vcvt_f16_f32(v102[15]);
          v104 = v102[14].f32[3];
        }
        else
        {
          v103 = (float16x4_t)0x3C00000000000000;
          v104 = 0.0;
        }
        v105 = *(_QWORD *)(a1 + 80);
        if (byte_1ECDC6AEF)
          v103 = (float16x4_t)0x3C0034CD34CD3A66;
        *(_BYTE *)(*((_QWORD *)v7 + 2) + 481) |= 1u;
        *(_BYTE *)(*((_QWORD *)v7 + 2) + 16) = 57;
        v146 = 0;
        v137 = xmmword_18474DF40;
        v138 = 0u;
        v139 = xmmword_18474DF50;
        v140 = 0u;
        v141 = 0u;
        v142 = xmmword_18474DF40;
        v143 = 0u;
        v144 = xmmword_18474DF50;
        __asm { FMOV            V0.2D, #1.0 }
        v145 = _Q0;
        *(double *)&v130 = COERCE_DOUBLE(&v159);
        v131 = &v137;
        v132 = 63;
        v133 = 0;
        v135 = 0;
        v134 = 0;
        v136 = 0;
        v153 = 0.0;
        v161 = 0.0;
        if ((*(_BYTE *)(v105 + 144) & 0x10) != 0)
        {
          CA::Mat4Impl::mat4_get_scale((CA::Mat4Impl *)v105, &v153, &v161, v87);
        }
        else
        {
          v153 = *(double *)(v105 + 128);
          v161 = v153;
        }
        CA::OGL::Context::bind_surface((uint64_t)v7, v92, 0, 0, 0, 0.0);
        v150 = vcvtq_f32_f16(v103);
        v107 = v153;
        if (v153 >= v161)
          v107 = v161;
        v108 = v107 * v104;
        if (v108 > 5.0)
          v108 = 5.0;
        if (v108 < 0.0)
          v108 = 0.0;
        v156 = v108;
        v157 = 1065353216;
        (*(void (**)(CA::OGL::Context *, _QWORD, uint64_t, uint64_t, float32x4_t *))(*(_QWORD *)v7 + 1000))(v7, 0, 4, 1, &v150);
        (*(void (**)(CA::OGL::Context *, uint64_t, uint64_t, uint64_t, float *))(*(_QWORD *)v7 + 1000))(v7, 1, 3, 1, &v156);
        v163.i64[0] = 0;
        *(float32x2_t *)&v163.u32[2] = vcvt_f32_f64(v160);
        CA::OGL::emit_one_part_rect(v7, (uint64_t)&v130, (const CA::Transform *)&v163, 0, 0);
        CA::OGL::Context::unbind_surface(v7, v92, 0);
        *(_BYTE *)(*((_QWORD *)v7 + 2) + 16) = 0;
      }
      CA::Shape::unref(v88);
      goto LABEL_115;
    }
    v37 = COERCE_DOUBLE(vcvt_f16_f32(vmulq_n_f32(vcvtq_f32_f16(v23), (float)v24 * 0.0039216)));
    goto LABEL_31;
  }
}

uint64_t CA::OGL::ShadowNode::propagate_roi(CA::OGL::ShadowNode *this, int32x2_t *a2, double a3, int32x4_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  const double *v9;
  int32x4_t v10;
  __int32 v11;
  int32x2_t v12;
  uint32x2_t v13;
  uint32x2_t v14;
  unsigned __int32 v15;
  int32x2_t v16;
  double *v17;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  int32x2_t v25;
  uint32x2_t v26;
  uint32x2_t v27;
  unsigned __int32 v28;
  int32x2_t v29;
  int32x4_t v30;
  double v31;
  double v32;
  int32x4_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(*((_QWORD *)this + 2) + 24);
  if ((*(_BYTE *)(v6 + 44) & 4) != 0 || (v7 = *(_QWORD *)(v6 + 128)) != 0 && *(_QWORD *)(v7 + 120))
  {
    result = (*(uint64_t (**)(_QWORD, int32x2_t *))(**((_QWORD **)this + 3) + 56))(*((_QWORD *)this + 3), a2);
    goto LABEL_21;
  }
  v30 = *(int32x4_t *)a2->i8;
  v33 = v30;
  CA::OGL::ShadowNode::map_bounds((CA::OGL::ShadowNode *)v6, *((CA::Bounds **)this + 10), (uint64_t)&v33, 0, v30, a4);
  v12.i32[1] = v30.i32[3];
  v11 = v30.i32[2];
  v13 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, (int32x2_t)v33.u64[1]);
  v14 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, (int32x2_t)v30.u64[1]);
  v15 = vpmax_u32(v14, v14).u32[0];
  if ((vpmax_u32(v13, v13).u32[0] & 0x80000000) != 0)
  {
    if ((v15 & 0x80000000) != 0)
      goto LABEL_11;
    v33.i64[0] = v30.i64[0];
  }
  else
  {
    if ((v15 & 0x80000000) != 0)
      goto LABEL_11;
    v16 = vmin_s32(*(int32x2_t *)v33.i8, *(int32x2_t *)v30.i8);
    v12 = vsub_s32(vmax_s32(vadd_s32(*(int32x2_t *)v33.i8, (int32x2_t)v33.u64[1]), vadd_s32(*(int32x2_t *)v30.i8, (int32x2_t)v30.u64[1])), v16);
    *(int32x2_t *)v33.i8 = v16;
    v11 = v12.i32[0];
  }
  v33.i32[2] = v11;
  *(_DWORD *)((unint64_t)&v33 | 0xC) = v12.i32[1];
LABEL_11:
  (*(void (**)(_QWORD, int32x4_t *))(**((_QWORD **)this + 3) + 56))(*((_QWORD *)this + 3), &v33);
  *(_WORD *)(*((_QWORD *)this + 3) + 212) |= 0x200u;
  result = (*(uint64_t (**)(_QWORD, uint64_t))(***((_QWORD ***)this + 1) + 184))(**((_QWORD **)this + 1), 34);
  if ((_DWORD)result)
  {
    v31 = 0.0;
    v32 = 0.0;
    v18 = *((_QWORD *)this + 10);
    if ((*(_BYTE *)(v18 + 144) & 0x10) != 0)
    {
      CA::Mat4Impl::mat4_get_scale((CA::Mat4Impl *)v18, &v32, &v31, v17);
      v19 = v31;
      v20 = v32;
    }
    else
    {
      v19 = *(double *)(v18 + 128);
      v20 = v19;
    }
    if (v20 < v19)
      v19 = v20;
    v21 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 24) + 128);
    if (v21)
      v22 = *(float *)(v21 + 224);
    else
      v22 = 3.0;
    v23 = *((_QWORD *)this + 3);
    result = CA::OGL::blur_downsample_alignment(0, v22 * v19 * (v22 * v19));
    *(_WORD *)(v23 + 212) = *(_WORD *)(v23 + 212) & 0xC3FF | ((_WORD)result << 10);
  }
LABEL_21:
  v24 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 24) + 128);
  if (v24 && *(float *)(v24 + 296) != 0.0)
  {
    v33 = *(int32x4_t *)a2->i8;
    CA::OGL::ShadowNode::map_bounds_rim(this, (CA::Bounds *)&v33, v9, v33, v10);
    v25 = a2[1];
    v26 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, (int32x2_t)v33.u64[1]);
    v27 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v25);
    v28 = vpmax_u32(v27, v27).u32[0];
    if ((vpmax_u32(v26, v26).u32[0] & 0x80000000) != 0)
    {
      if ((v28 & 0x80000000) == 0)
      {
        v29 = *a2;
        goto LABEL_28;
      }
    }
    else if ((v28 & 0x80000000) == 0)
    {
      v29 = vmin_s32(*(int32x2_t *)v33.i8, *a2);
      v25 = vsub_s32(vmax_s32(vadd_s32(*(int32x2_t *)v33.i8, (int32x2_t)v33.u64[1]), vadd_s32(*a2, v25)), v29);
LABEL_28:
      *(int32x2_t *)v33.i8 = v29;
      v33.u64[1] = (unint64_t)v25;
    }
    result = (*(uint64_t (**)(_QWORD, int32x4_t *))(**((_QWORD **)this + 3) + 56))(*((_QWORD *)this + 3), &v33);
    *(_WORD *)(*((_QWORD *)this + 3) + 212) |= 0x200u;
  }
  return result;
}

uint64_t CA::OGL::MeshNode::propagate_soft_roi(CA::OGL::MeshNode *this, const CA::Bounds *a2, int32x4_t a3, int32x4_t a4)
{
  int32x2_t *v4;
  int32x2_t v6[3];

  v6[2] = *(int32x2_t *)MEMORY[0x1E0C80C00];
  v4 = (int32x2_t *)*((_QWORD *)this + 3);
  CA::OGL::MeshNode::unmap_bounds((CA::OGL::MeshNode *)v6, (const CA::Transform **)this, (uint64_t)a2, a3, a4);
  return CA::BoundsImpl::Union(v4 + 24, v6[0], v6[1]);
}

uint64_t CA::OGL::MeshNode::propagate_roi(CA::OGL::MeshNode *this, const CA::Bounds *a2, int32x4_t a3, int32x4_t a4)
{
  uint64_t v5;
  uint64_t result;
  _BYTE v7[16];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v5 = *((_QWORD *)this + 3);
  CA::OGL::MeshNode::unmap_bounds((CA::OGL::MeshNode *)v7, (const CA::Transform **)this, (uint64_t)a2, a3, a4);
  result = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v5 + 56))(v5, v7);
  if ((*((_BYTE *)this + 224) & 0xF) == 2)
    *(_DWORD *)(*((_QWORD *)this + 3) + 216) |= 0x40u;
  if (!*(_BYTE *)(*((_QWORD *)this + 29) + 108))
    *(_WORD *)(*((_QWORD *)this + 3) + 212) |= 0x200u;
  return result;
}

uint64_t CA::Render::BackdropLayer::visit_subclass(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, a1);
}

void *CA::OGL::MetalBufferPool::alloc_fragment_arg(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v13 = 0;
  v6 = CA::OGL::MetalBufferPool::alloc_bytes((CA::OGL::MetalBufferPool *)a1, a3, a4, 0, &v13);
  if (v6)
  {
    v7 = *(_QWORD *)(a1 + 8);
    v8 = a1 + 8 * a2;
    v10 = *(_QWORD *)(v8 + 112);
    v9 = (_QWORD *)(v8 + 112);
    v11 = *(_QWORD *)(a1 + 192);
    if (v10 == v7)
    {
      (*(void (**)(uint64_t, char *, _QWORD, uint64_t))(a1 + 224))(v11, sel_setFragmentBufferOffset_atIndex_, v13, a2);
    }
    else
    {
      (*(void (**)(uint64_t, char *, _QWORD, _QWORD, uint64_t))(a1 + 208))(v11, sel_setFragmentBuffer_offset_atIndex_, *(_QWORD *)(a1 + 8), v13, a2);
      *v9 = v7;
    }
  }
  return v6;
}

uint64_t CA::OGL::MetalBufferPool::encode_fragment_arg(CA::OGL::MetalBufferPool *this, uint64_t a2, const void *__src, unsigned int a4, unsigned int a5)
{
  uint64_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  _QWORD *v16;
  uint64_t result;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;

  if ((a5 & (a5 - 1)) != 0)
    __assert_rtn("get_buffer", "ogl-metal.mm", 3133, "x_power_of_two (alignment)");
  v9 = *((_QWORD *)this + 1);
  if (v9)
  {
    v10 = *((_DWORD *)this + 11);
    if (v10 <= a5)
      v10 = a5;
    v11 = *((_DWORD *)this + 6);
    v12 = *((_DWORD *)this + 7);
    v13 = (v10 + v11 - 1) & -v10;
    if (v12 != v13 && v12 >= v13 + a4 || v11 == 0)
      goto LABEL_15;
    v16 = (_QWORD *)((char *)this + 24);
    CA::OGL::MetalBufferPool::retire_metal_buffer((uint64_t)this, v9);
    *((_QWORD *)this + 1) = 0;
    *v16 = 0;
    *((_QWORD *)this + 4) = 0;
  }
  result = (uint64_t)CA::OGL::MetalBufferPool::allocate_buffer((os_unfair_lock_s *)this, a4);
  *((_QWORD *)this + 1) = result;
  if (!result)
    return result;
  ++*((_DWORD *)this + 10);
  *((_QWORD *)this + 4) = objc_msgSend((id)result, "contents");
  v13 = 0;
  *((_DWORD *)this + 7) = objc_msgSend(*((id *)this + 1), "length");
LABEL_15:
  if (__src)
    memcpy((void *)(*((_QWORD *)this + 4) + v13), __src, a4);
  *((_DWORD *)this + 6) = v13 + a4;
  v18 = *((_QWORD *)this + 1);
  v19 = (char *)this + 8 * a2;
  v21 = *((_QWORD *)v19 + 14);
  v20 = v19 + 112;
  v22 = *((_QWORD *)this + 24);
  if (v21 == v18)
  {
    (*((void (**)(uint64_t, char *, _QWORD, uint64_t))this + 28))(v22, sel_setFragmentBufferOffset_atIndex_, v13, a2);
  }
  else
  {
    (*((void (**)(uint64_t, char *, _QWORD, _QWORD, uint64_t))this + 26))(v22, sel_setFragmentBuffer_offset_atIndex_, *((_QWORD *)this + 1), v13, a2);
    *v20 = v18;
  }
  return 1;
}

uint64_t CA::Shape::map(CA::Shape *this, void *a2, void (*a3)(CA::Rect *, void *), int32x4_t a4)
{
  int32x4_t v6;
  int v7;
  int64x2_t v8;
  int8x16_t v9;
  double v10;
  double v11;
  const CA::Bounds *v12;
  int64x2_t v13;
  int8x16_t v14;
  int32x4_t v15;
  float64x2_t v17;
  float64x2_t v18;
  int8x16_t v19;
  int32x4_t v20;
  float64x2_t v21;
  float64x2_t v22;
  CA::Shape *v23[2];
  uint64_t v24;
  uint64_t v25[4];

  v25[3] = *MEMORY[0x1E0C80C00];
  v24 = 1;
  v25[0] = (uint64_t)this;
  v23[0] = 0;
  v23[1] = 0;
  v25[1] = 0;
  v25[2] = 0;
  a4.i32[0] = 1073741822;
  v20 = a4;
  v18 = (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000);
  v19 = (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL);
  v17 = (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL);
  while (CA::ShapeIterator::iterate(v25, (int *)v23))
  {
    if (SLODWORD(v23[1]) <= SHIDWORD(v23[1]))
      v7 = HIDWORD(v23[1]);
    else
      v7 = (int)v23[1];
    v6.i32[0] = v7;
    v8.i64[0] = SLODWORD(v23[0]);
    v8.i64[1] = SHIDWORD(v23[0]);
    v9 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v6, v20), 0), v19, (int8x16_t)vcvtq_f64_s64(v8));
    v10 = (double)SLODWORD(v23[1]);
    if (v7 > 1073741822)
      v10 = 1.79769313e308;
    v21 = (float64x2_t)v9;
    if (v7 <= 1073741822)
      v11 = (double)SHIDWORD(v23[1]);
    else
      v11 = 1.79769313e308;
    v22.f64[0] = v10;
    v22.f64[1] = v11;
    a3((CA::Rect *)&v21, a2);
    v13 = vceqzq_f64(v22);
    if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v13, 1), (int8x16_t)v13).u64[0] & 0x8000000000000000) != 0
      || (v14 = vorrq_s8((int8x16_t)vcltzq_f64(v22), (int8x16_t)vcgezq_f64(v22)),
          (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v14), 1), v14).u64[0] & 0x8000000000000000) != 0))
    {
      v23[0] = 0;
      v23[1] = 0;
    }
    else
    {
      v15 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v21, v18));
      *(int32x4_t *)v23 = vuzp1q_s32(v15, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v21, v22), v17)), (int64x2_t)v15));
    }
    CA::shape_union((CA::Shape **)&v24, v23, v12);
  }
  return v24;
}

void CA::OGL::`anonymous namespace'::clear_backdrop_edges(CA::OGL::_anonymous_namespace_ *this, CA::OGL::Context *a2, const CA::Shape *a3, const CA::Shape *a4, float a5)
{
  char *v8;
  CA::Shape *v9;
  uint64_t v10;
  const int *v11;
  CA::Shape *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18[4];

  v18[3] = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(*((_QWORD *)this + 2) + 16) = 0;
  *((_QWORD *)this + 16) = 0;
  v8 = (char *)this + 818;
  *((_QWORD *)this + 12) = (char *)this + 818;
  *(_OWORD *)((char *)this + 104) = xmmword_18474E060;
  v9 = (CA::Shape *)CA::Shape::dilate((uint64_t)a2, (const CA::Bounds *)(int)(16.0 / a5 + 1.0), (int)(16.0 / a5 + 1.0));
  v12 = (CA::Shape *)CA::Shape::subtract(v9, a3, v10, v11);
  v16 = 0;
  v17 = 0;
  v18[1] = 0;
  v18[2] = 0;
  v18[0] = (uint64_t)v12;
  while (CA::ShapeIterator::iterate(v18, (int *)&v16))
  {
    if (*((_DWORD *)this + 23))
      v13 = 6;
    else
      v13 = 4;
    if ((unint64_t)(*((_QWORD *)this + 16) + 4) > *((_QWORD *)this + 17)
      || (v14 = *((_QWORD *)this + 14)) != 0 && *((_QWORD *)this + 13) + v13 > v14)
    {
      *((_WORD *)this + 408) |= 0x20u;
      CA::OGL::Context::array_flush((uint64_t)this);
      *((_QWORD *)this + 16) = 0;
      *((_QWORD *)this + 12) = v8;
      *(_OWORD *)((char *)this + 104) = xmmword_18474E060;
    }
    CA::OGL::Context::array_rect(this, floorf((float)(int)v16 * a5), floorf((float)SHIDWORD(v16) * a5), ceilf((float)(v17 + v16) * a5), ceilf((float)(HIDWORD(v17) + HIDWORD(v16)) * a5));
    v15 = *((_QWORD *)this + 15) + 48 * *((_QWORD *)this + 16);
    *(_QWORD *)(v15 - 160) = 0;
    *(_QWORD *)(v15 - 112) = 0;
    *(_QWORD *)(v15 - 64) = 0;
    *(_QWORD *)(v15 - 16) = 0;
  }
  CA::OGL::Context::array_flush((uint64_t)this);
  if (v12)
    CA::Shape::unref(v12);
  if (v9)
    CA::Shape::unref(v9);
}

uint64_t CA::OGL::PingPongState::clear_edges(CA::OGL::PingPongState *this, float a2, float a3, float a4, float a5, float a6)
{
  char *v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  float v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;

  *(_BYTE *)(*((_QWORD *)this + 2) + 16) = 0;
  *((_QWORD *)this + 16) = 0;
  v12 = (char *)this + 818;
  *((_QWORD *)this + 12) = (char *)this + 818;
  *(_OWORD *)((char *)this + 104) = xmmword_18474E060;
  if (*((_QWORD *)this + 17) <= 7uLL)
  {
    *((_WORD *)this + 408) |= 0x20u;
    CA::OGL::Context::array_flush((uint64_t)this);
    *((_QWORD *)this + 16) = 0;
    *((_QWORD *)this + 12) = v12;
    *(_OWORD *)((char *)this + 104) = xmmword_18474E060;
  }
  v13 = a3 - a2;
  CA::OGL::Context::array_rect(this, a3 - a2, a4, a3, a6);
  v14 = *((_QWORD *)this + 15) + 48 * *((_QWORD *)this + 16);
  *(_QWORD *)(v14 - 160) = 0;
  *(_QWORD *)(v14 - 112) = 0;
  *(_QWORD *)(v14 - 64) = 0;
  *(_QWORD *)(v14 - 16) = 0;
  v15 = a5 + a2;
  CA::OGL::Context::array_rect(this, a5, a4, a5 + a2, a6);
  v16 = *((_QWORD *)this + 15) + 48 * *((_QWORD *)this + 16);
  *(_QWORD *)(v16 - 160) = 0;
  *(_QWORD *)(v16 - 112) = 0;
  *(_QWORD *)(v16 - 64) = 0;
  *(_QWORD *)(v16 - 16) = 0;
  v17 = 12;
  if (!*((_DWORD *)this + 23))
    v17 = 8;
  if ((unint64_t)(*((_QWORD *)this + 16) + 8) > *((_QWORD *)this + 17)
    || (v18 = *((_QWORD *)this + 14)) != 0 && *((_QWORD *)this + 13) + v17 > v18)
  {
    *((_WORD *)this + 408) |= 0x20u;
    CA::OGL::Context::array_flush((uint64_t)this);
    *((_QWORD *)this + 16) = 0;
    *((_QWORD *)this + 12) = v12;
    *(_OWORD *)((char *)this + 104) = xmmword_18474E060;
  }
  v19 = a4 - a2;
  CA::OGL::Context::array_rect(this, a3, a4 - a2, a5, a4);
  v20 = *((_QWORD *)this + 15) + 48 * *((_QWORD *)this + 16);
  *(_QWORD *)(v20 - 160) = 0;
  *(_QWORD *)(v20 - 112) = 0;
  *(_QWORD *)(v20 - 64) = 0;
  *(_QWORD *)(v20 - 16) = 0;
  v21 = a6 + a2;
  CA::OGL::Context::array_rect(this, a3, a6, a5, v21);
  v22 = *((_QWORD *)this + 15) + 48 * *((_QWORD *)this + 16);
  *(_QWORD *)(v22 - 160) = 0;
  *(_QWORD *)(v22 - 112) = 0;
  *(_QWORD *)(v22 - 64) = 0;
  *(_QWORD *)(v22 - 16) = 0;
  v23 = 12;
  if (!*((_DWORD *)this + 23))
    v23 = 8;
  if ((unint64_t)(*((_QWORD *)this + 16) + 8) > *((_QWORD *)this + 17)
    || (v24 = *((_QWORD *)this + 14)) != 0 && *((_QWORD *)this + 13) + v23 > v24)
  {
    *((_WORD *)this + 408) |= 0x20u;
    CA::OGL::Context::array_flush((uint64_t)this);
    *((_QWORD *)this + 16) = 0;
    *((_QWORD *)this + 12) = v12;
    *(_OWORD *)((char *)this + 104) = xmmword_18474E060;
  }
  CA::OGL::Context::array_rect(this, v13, v19, a3, a4);
  v25 = *((_QWORD *)this + 15) + 48 * *((_QWORD *)this + 16);
  *(_QWORD *)(v25 - 160) = 0;
  *(_QWORD *)(v25 - 112) = 0;
  *(_QWORD *)(v25 - 64) = 0;
  *(_QWORD *)(v25 - 16) = 0;
  CA::OGL::Context::array_rect(this, a5, v19, v15, a4);
  v26 = *((_QWORD *)this + 15) + 48 * *((_QWORD *)this + 16);
  *(_QWORD *)(v26 - 160) = 0;
  *(_QWORD *)(v26 - 112) = 0;
  *(_QWORD *)(v26 - 64) = 0;
  *(_QWORD *)(v26 - 16) = 0;
  v27 = 12;
  if (!*((_DWORD *)this + 23))
    v27 = 8;
  if ((unint64_t)(*((_QWORD *)this + 16) + 8) > *((_QWORD *)this + 17)
    || (v28 = *((_QWORD *)this + 14)) != 0 && *((_QWORD *)this + 13) + v27 > v28)
  {
    *((_WORD *)this + 408) |= 0x20u;
    CA::OGL::Context::array_flush((uint64_t)this);
    *((_QWORD *)this + 16) = 0;
    *((_QWORD *)this + 12) = v12;
    *(_OWORD *)((char *)this + 104) = xmmword_18474E060;
  }
  CA::OGL::Context::array_rect(this, v13, a6, a3, v21);
  v29 = *((_QWORD *)this + 15) + 48 * *((_QWORD *)this + 16);
  *(_QWORD *)(v29 - 160) = 0;
  *(_QWORD *)(v29 - 112) = 0;
  *(_QWORD *)(v29 - 64) = 0;
  *(_QWORD *)(v29 - 16) = 0;
  CA::OGL::Context::array_rect(this, a5, a6, v15, v21);
  v30 = *((_QWORD *)this + 15) + 48 * *((_QWORD *)this + 16);
  *(_QWORD *)(v30 - 160) = 0;
  *(_QWORD *)(v30 - 112) = 0;
  *(_QWORD *)(v30 - 64) = 0;
  *(_QWORD *)(v30 - 16) = 0;
  return CA::OGL::Context::array_flush((uint64_t)this);
}

_QWORD *CA::OGL::Context::array_rect(_QWORD *this, float a2, float a3, float a4, float a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v6 = this[15];
  v5 = this[16];
  this[16] = v5 + 4;
  v7 = v6 + 48 * v5;
  *(float *)v7 = a2;
  *(float *)(v7 + 4) = a3;
  *(_QWORD *)(v7 + 8) = 0x3F80000000000000;
  *(float *)(v7 + 48) = a4;
  *(float *)(v7 + 52) = a3;
  *(_QWORD *)(v7 + 56) = 0x3F80000000000000;
  *(float *)(v7 + 96) = a4;
  *(float *)(v7 + 100) = a5;
  *(_QWORD *)(v7 + 104) = 0x3F80000000000000;
  *(float *)(v7 + 144) = a2;
  *(float *)(v7 + 148) = a5;
  *(_QWORD *)(v7 + 152) = 0x3F80000000000000;
  if (this[12])
    return (_QWORD *)CA::OGL::Context::array_indices((uint64_t)this, v5);
  return this;
}

uint64_t CA::OGL::Context::unbind_surface(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  (*(void (**)(_QWORD *, uint64_t, _QWORD, uint64_t))(*a1 + 784))(a1, a2, 0, a3);
  result = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*a1 + 520))(a1, 0, a3);
  if ((*(_WORD *)(a2 + 75) & 0x200) != 0)
    *(_BYTE *)(a1[2] + 481) &= ~2u;
  return result;
}

uint64_t CA::OGL::ContentsGeometry::fill_and_unbind(uint64_t a1, int32x2_t *a2, uint64_t a3, double *a4)
{
  float32x2_t *v7;
  CA::Transform *v8;
  float *v9;
  unsigned int v10;
  unsigned int v11;
  char v12;
  char v13;
  double v14;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  double *v21;
  float *v22;
  double v23;
  int32x2_t v25;
  unint64_t v26;
  int v27;
  int v28;
  float *v29;
  int v30;
  float64x2_t v31;
  float64x2_t v32;
  int64x2_t v33;
  float64x2_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  double v42;
  _BOOL4 is_isotropic;
  float *v45;
  float64x2_t v46;
  double v47;
  double v48;
  double v49;
  double v50;
  int v51;
  float64x2_t v52;
  float *v53;
  double v54;
  int v55;
  uint64_t result;
  float *v57;
  float64x2_t *v58[2];
  float *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  double v64;
  uint64_t v65;
  _QWORD v66[3];
  _QWORD v67[3];
  double v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  float32x4_t v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  v7 = (float32x2_t *)(a1 + 276);
  v8 = (CA::Transform *)(a1 + 104);
  v58[0] = (float64x2_t *)(a1 + 8);
  v58[1] = (float64x2_t *)(a1 + 104);
  v9 = *(float **)(a1 + 308);
  v59 = v9;
  v60 = 0;
  v61 = 0;
  v62 = a1 + 40;
  if (!*(_BYTE *)(a1 + 339))
  {
    v10 = *(unsigned __int8 *)(a1 + 336);
    v57 = v9;
    v11 = (*(uint64_t (**)(int32x2_t *))(*(_QWORD *)a2 + 1032))(a2);
    v9 = v57;
    if (v11 < v10)
    {
      *(_BYTE *)(*(_QWORD *)&a2[2] + 481) |= 2u;
      *(_DWORD *)(*(_QWORD *)&a2[2] + 352) = 1065353216;
    }
  }
  v12 = BYTE4(v9);
  v13 = (char)v9;
  if (*(_BYTE *)(a1 + 338))
  {
    if (*(_BYTE *)(a1 + 337))
    {
      v14 = *(double *)(a1 + 24);
      if (v14 >= *(double *)(a1 + 32))
        v14 = *(double *)(a1 + 32);
      if (v14 > 0.0)
      {
        if ((v12 & 0xF) != 0 && (v13 & 9) != 0)
        {
          v77.i64[0] = (uint64_t)&off_1E159A568;
          v77.i64[1] = a1 + 276;
          *(_QWORD *)&v78 = a1 + 344;
          *((_QWORD *)&v78 + 1) = a1 + 376;
          *(_QWORD *)&v79 = a1 + 320;
LABEL_50:
          goto LABEL_51;
        }
      }
    }
    else if ((*(_WORD *)(a3 + 58) & 0x18) != 8 || (v7[4].i8[1] & 4) != 0)
    {
      v42 = *(double *)(a1 + 24);
      if (v42 >= *(double *)(a1 + 32))
        v42 = *(double *)(a1 + 32);
      if (v42 > 0.0)
      {
        if ((v12 & 0xF) != 0 && (v13 & 9) != 0)
        {
          v77.i64[0] = (uint64_t)&off_1E159A550;
          v77.i64[1] = a1 + 276;
          *(_QWORD *)&v78 = a1 + 320;
          goto LABEL_50;
        }
      }
    }
    else
    {
      v31.f64[0] = *(float64_t *)(a1 + 320);
      v32.f64[0] = *(float64_t *)(a1 + 264);
      v31.f64[1] = v32.f64[0];
      v32.f64[1] = *(float64_t *)(a1 + 328);
      v33.i64[0] = (int)*(_QWORD *)a1;
      v33.i64[1] = (int)HIDWORD(*(_QWORD *)a1);
      __asm { FMOV            V4.2D, #1.0 }
      v38 = vdivq_f64(_Q4, vcvtq_f64_s64(v33));
      v39 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(*(float64x2_t *)(a1 + 8), v38)), vmulq_f64(vmlaq_f64(*(float64x2_t *)(a1 + 8), v32, vmulq_f64(v31, *(float64x2_t *)(a1 + 24))), v38));
      *(float32x2_t *)v40.f32 = *v7;
      *(float32x2_t *)&v32.f64[0] = vsub_f32(v7[1], *v7);
      v32.f64[1] = v32.f64[0];
      *(float32x2_t *)&v40.u32[2] = *v7;
      v41 = vmlaq_f32(v40, v39, (float32x4_t)v32);
      *(float32x2_t *)v39.f32 = vrndm_f32(*(float32x2_t *)v41.f32);
      v39.i64[1] = v39.i64[0];
      v77 = vsubq_f32(v41, v39);
      CA::OGL::fill_rect_tex((CA::OGL::Context *)a2, (uint64_t)v58, (uint64_t)&v77, a4);
    }
  }
  else if (*(_BYTE *)(a1 + 337))
  {
    v16 = *(double *)(a1 + 24);
    v17 = *(double *)(a1 + 32);
    if (v16 >= v17)
      v18 = *(double *)(a1 + 32);
    else
      v18 = *(double *)(a1 + 24);
    if (v18 > 0.0)
    {
      v63 = 0.0;
      v64 = 0.0;
      CA::Transform::get_scale_recip((uint64_t)v8, &v64, &v63);
      v23 = v17 * v16 / (v63 * v64);
      if ((v12 & 0xF) == 0 || (v13 & 9) == 0)
      {
        v77 = 0uLL;
        v78 = 0uLL;
        v74 = 0uLL;
        v75 = 0uLL;
        v71 = 0.0;
        v72 = 0;
        v68 = 0.0;
        v69 = 0;
        v25 = a2[2];
        v26 = *(_QWORD *)(*(_QWORD *)&v25 + 16) & 0xFFFFFF00FF00FF00;
        if (*(_QWORD *)(*(_QWORD *)&v25 + 8) == 0x3C003C003C003C00)
          v27 = 1;
        else
          v27 = 3;
        *(_DWORD *)(*(_QWORD *)&v25 + 16) = v27 | v26;
        *(_DWORD *)(*(_QWORD *)&v25 + 20) = HIDWORD(v26);
        CA::OGL::emit_n_part_rect((uint64_t)a2, (uint64_t)v58, v28, v30, (float64_t *)v77.i64, (uint64_t)&v74, &v71, (uint64_t)&v68, 0, 0, (v23 >= *(double *)&a2[9]) << 16);
      }
      else
      {
        v78 = 0uLL;
        v79 = 0uLL;
        v76 = 0uLL;
        v77 = 0uLL;
        v74 = 0uLL;
        v75 = 0uLL;
        v71 = 0.0;
        v72 = 0;
        v73 = 0;
        v68 = 0.0;
        v69 = 0;
        v70 = 0;
        memset(v67, 0, sizeof(v67));
        memset(v66, 0, sizeof(v66));
        v65 = 0;
        *(_BYTE *)(*(_QWORD *)&a2[2] + 16) = 5;
        is_isotropic = CA::Transform::is_isotropic(v8, 0.0, v19, v20, v21);
        (*(void (**)(int32x2_t *, uint64_t, BOOL, _QWORD, uint64_t *))(*(_QWORD *)a2 + 448))(a2, 1, !is_isotropic, 0, &v65);
        v48 = *(double *)(a1 + 24);
        v49 = *(double *)(a1 + 32);
        if (v64 + v64 >= v48 * 0.5)
          v46.f64[0] = v48 * 0.5;
        else
          v46.f64[0] = v64 + v64;
        if (v63 + v63 >= v49 * 0.5)
          v50 = v49 * 0.5;
        else
          v50 = v63 + v63;
        v52.f64[0] = v50;
        CA::OGL::emit_n_part_rect((uint64_t)a2, (uint64_t)v58, v51, v55, (float64_t *)v77.i64, (uint64_t)&v74, &v71, (uint64_t)&v68, v67, (uint64_t)v66, (v23 >= *(double *)&a2[9]) << 16);
        (*(void (**)(int32x2_t *, _QWORD, uint64_t))(*(_QWORD *)a2 + 520))(a2, 0, 1);
      }
      *(_BYTE *)(*(_QWORD *)&a2[2] + 16) = 0;
    }
  }
  else
  {
    CA::OGL::ContentsGeometry::fill_geometry(a1, (CA::OGL::Context *)a2, v58, a1 + 276);
  }
LABEL_51:
  result = (*(uint64_t (**)(int32x2_t *, uint64_t, _QWORD))(*(_QWORD *)a2 + 520))(a2, a3, 0);
  *(_BYTE *)(*(_QWORD *)&a2[2] + 481) &= ~2u;
  return result;
}

int8x8_t CA::OGL::Context::unbind_image(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v6;
  malloc_zone_t *malloc_zone;
  int8x8_t result;
  uint64_t v9;
  unsigned int v10;
  uint8x8_t v11;
  uint64_t v12;
  uint64_t v13;
  int16x8_t v14;

  v3 = a3;
  if (a2 && (v6 = a2[3]) != 0)
  {
    CA::OGL::Context::unbind_surface(a1, v6, a3);
    CA::OGL::Context::release_surface((uint64_t)a1, a2[3]);
    a2[3] = 0;
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(malloc_zone, a2);
  }
  else
  {
    CA::OGL::Context::color_program((uint64_t)a1, a3, 0);
    v9 = a1[2];
    v10 = CA::OGL::state_image_texture_unit(v9, v3);
    v12 = CA::OGL::image_plane_count[*(unsigned __int8 *)(v9 + 17 + v3)];
    if (CA::OGL::image_plane_count[*(unsigned __int8 *)(v9 + 17 + v3)])
    {
      do
      {
        *(_WORD *)(v9 + 2 * v10 + 144) = 0;
        *(_QWORD *)(v9 + 8 * v10++ + 176) = 0;
        --v12;
      }
      while (v12);
    }
    *(_BYTE *)(v9 + 17 + v3) = 0;
    *(_BYTE *)(a1[2] + v3 + 19) = 0;
    v13 = a1[2];
    v11.i32[0] = *(_DWORD *)(v13 + 304);
    v14 = (int16x8_t)vmovl_u8(v11);
    *(int8x8_t *)v14.i8 = vand_s8(*(int8x8_t *)v14.i8, (int8x8_t)vdup_n_s16(~(1 << v3)));
    result = vmovn_s16(v14);
    *(_DWORD *)(v13 + 304) = result.i32[0];
    *(_BYTE *)(v13 + 308) &= ~(1 << v3);
  }
  return result;
}

uint64_t CA::OGL::Context::color_program(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  char v23;
  char v24;

  v5 = (uint64_t *)result;
  v6 = *(_QWORD *)(result + 16);
  v7 = v6 + 8 * a2;
  v10 = *(_QWORD *)(v7 + 40);
  v8 = (_QWORD *)(v7 + 40);
  v9 = v10;
  if (v10)
  {
    result = CA::OGL::state_image_texture_unit(*(_QWORD *)(result + 16), a2 + 1);
    v11 = *(_QWORD *)(v9 + 80);
    v12 = v11 == 0;
    v13 = v11 != 0;
    if (v11)
      v14 = -1;
    else
      v14 = 0;
    v15 = *(_DWORD *)(v9 + 56);
    if (v12)
      v16 = -1;
    else
      v16 = -2;
    v17 = 1;
    if (!v12)
      v17 = 2;
    if (v15)
      v14 = v16;
    v18 = v14 + result;
    if (v15)
      v13 = v17;
    for (; v13; ++v18)
    {
      *(_WORD *)(v6 + 2 * v18 + 144) = 0;
      *(_QWORD *)(v6 + 8 * v18 + 176) = 0;
      --v13;
    }
  }
  *v8 = a3;
  if (a3)
  {
    v19 = a2;
    result = CA::OGL::state_image_texture_unit(v5[2], a2 + 1);
    v20 = *(_QWORD *)(a3 + 80);
    if (v20)
      v21 = -1;
    else
      v21 = 0;
    if (v20)
      v22 = -2;
    else
      v22 = -1;
    if (*(_DWORD *)(a3 + 56))
      v21 = v22;
    v23 = v21 + result;
    if (*(_QWORD *)(a3 + 64))
    {
      *(_BYTE *)(v6 + a2 + 56) = v23;
      v24 = v23 + 1;
      result = (*(uint64_t (**)(uint64_t *))(*v5 + 536))(v5);
      v20 = *(_QWORD *)(a3 + 80);
      v23 = v24;
    }
    if (v20)
    {
      *(_BYTE *)(v6 + v19 + 58) = v23;
      return (*(uint64_t (**)(uint64_t *))(*v5 + 528))(v5);
    }
  }
  return result;
}

CA::OGL::Context *CA::OGL::fill_rect_tex(CA::OGL::Context *result, uint64_t a2, uint64_t a3, double *a4)
{
  uint64_t v6;
  int v7;
  int v8;
  _BOOL4 v9;
  int v10;
  float64x2_t *v12;
  double v13;
  const CA::Transform *v14;
  uint64_t v17;
  unint64_t v18;
  int v19;
  float64x2_t v20;
  float16x4_t *v21;
  float16x4_t v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  float64_t v28;
  float64_t v29;
  double v30;
  float64x2_t v31;
  double v32;
  float64x2_t v33;
  double v34;
  double v35;
  double v36;
  float64_t v37;
  float64_t v38;
  double v39;
  float64x2_t v40;
  double v41;
  float64x2_t v42;
  float v43;
  double v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  double v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v56;
  float64x2_t v57;
  int64x2_t v58;
  int8x16_t v59;
  int32x4_t v60;
  _BOOL4 v61;
  unsigned int v62;
  int v63;
  uint64_t v64;
  int v65;
  char v66;
  _BOOL4 is_isotropic;
  float64x2_t *v68;
  double v69;
  float v70;
  int32x2_t v71;
  int32x2_t v72;
  float v73;
  float v74;
  float v75;
  float v76;
  int v77;
  float v78;
  float v79;
  float v80;
  unint64_t v81;
  int v82;
  char v83;
  uint64_t v84;
  float v85;
  float v86;
  float v87;
  float v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  float16x4_t v107;
  uint64_t v108;
  float16x4_t v109;
  uint64_t v110;
  float16x4_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  float16x4_t v115;
  uint64_t v116;
  uint64_t v117;
  float16x4_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  float16x4_t v122;
  uint64_t v123;
  float16x4_t v124;
  uint64_t v125;
  float16x4_t v126;
  uint64_t v127;
  uint64_t v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  double v137;
  float v138;
  float v139;
  unsigned int v140;
  float v141;
  double v142;
  float v143;
  float32x4_t v144;
  float32x4_t v145;
  double v146;
  double v147;
  double v148;
  float v149;
  double v150;
  float v151;
  float v152;
  double v153;
  double v154;
  double v155;
  double v156;
  double v157;
  double v158;
  double v159;
  uint64_t v160;
  uint64_t v161;
  float v162;
  float v163;
  _BYTE v164[40];
  _BYTE v165[24];
  double v166;
  double v167;
  __int128 v168;
  double v169;
  double v170;
  __int128 v171;
  int32x2_t v172;
  uint64_t v173;
  _BYTE v174[40];
  __int128 v175;
  int32x4_t v176;
  float64x2_t v177;
  float64x2_t v178;
  uint64_t v179;

  v6 = (uint64_t)result;
  v179 = *MEMORY[0x1E0C80C00];
  v7 = *(_DWORD *)(a2 + 16);
  v8 = *(_DWORD *)(a2 + 20);
  v9 = (v8 & 0xF) == 0;
  if ((v7 & 9) == 0)
    v9 = 1;
  v10 = v7 & 0x100000;
  if (v9 && v10 == 0)
    goto LABEL_18;
  v12 = *(float64x2_t **)a2;
  v13 = *(double *)(*(_QWORD *)a2 + 16);
  if (v13 >= *(double *)(*(_QWORD *)a2 + 24))
    v13 = *(double *)(*(_QWORD *)a2 + 24);
  if (v13 > 0.0)
  {
    v14 = *(const CA::Transform **)(a2 + 8);
    if ((*((_BYTE *)v14 + 144) & 0x1F) != 0 || *(_QWORD *)(a2 + 24) != 0 || *(_QWORD *)(a2 + 32) != 0)
    {
      if (!v9)
      {
        memset(v164, 0, 32);
        memset(v174, 0, 32);
        v159 = 0.0;
        v160 = 0;
        *(_BYTE *)(*((_QWORD *)result + 2) + 16) = 5;
        is_isotropic = CA::Transform::is_isotropic(*(CA::Transform **)(a2 + 8), 0.0, (uint64_t)v14, a3, a4);
        (*(void (**)(uint64_t, uint64_t, BOOL, _QWORD, uint64_t *))(*(_QWORD *)v6 + 448))(v6, 1, !is_isotropic, 0, &v160);
        v68 = *(float64x2_t **)a2;
        v69 = v68[1].f64[1];
        v70 = 1.0 / v68[1].f64[0];
        v71.i32[1] = *(_DWORD *)&v164[12];
        v71.i32[0] = *(_DWORD *)a3;
        v72.i32[0] = *(_DWORD *)(a3 + 4);
        v73 = *(float *)(a3 + 8);
        v74 = *(float *)(a3 + 12);
        *(float32x2_t *)((char *)v177.f64 + 4) = vmla_n_f32((float32x2_t)vdup_lane_s32(v71, 0), vcvt_f32_f64(vmulq_n_f64(vsubq_f64(*(float64x2_t *)&v164[8], (float64x2_t)vdupq_lane_s64(*(uint64_t *)v164, 0)), v70)), v73 - *(float *)a3);
        *(float *)&v176.i32[3] = v74;
        LODWORD(v177.f64[0]) = v71.i32[0];
        *((float *)&v177.f64[1] + 1) = v73;
        v75 = 1.0 / v69;
        *(float32x2_t *)((char *)v176.i64 + 4) = vmla_n_f32((float32x2_t)vdup_lane_s32(v72, 0), vcvt_f32_f64(vmulq_n_f64(vsubq_f64(*(float64x2_t *)&v174[8], (float64x2_t)vdupq_lane_s64(*(uint64_t *)v174, 0)), v75)), v74 - *(float *)v72.i32);
        v176.i32[0] = v72.i32[0];
        v76 = *(float *)&v160;
        v77 = *(_DWORD *)(a2 + 20);
        if ((v77 & 1) != 0)
          v78 = *(float *)&v160;
        else
          v78 = *(float *)&v160 + (float)((float)(*((float *)&v160 + 1) - *(float *)&v160) * 0.5);
        *(float *)v172.i32 = v78;
        *(float *)&v172.i32[1] = *(float *)&v160 + (float)((float)(*((float *)&v160 + 1) - *(float *)&v160) * 0.5);
        if ((v77 & 2) != 0)
          v79 = *((float *)&v160 + 1);
        else
          v79 = *(float *)&v160 + (float)((float)(*((float *)&v160 + 1) - *(float *)&v160) * 0.5);
        *(float *)&v173 = *(float *)&v160 + (float)((float)(*((float *)&v160 + 1) - *(float *)&v160) * 0.5);
        *((float *)&v173 + 1) = v79;
        if ((v77 & 4) == 0)
          v76 = *(float *)&v160 + (float)((float)(*((float *)&v160 + 1) - *(float *)&v160) * 0.5);
        *(float *)&v161 = v76;
        *((float *)&v161 + 1) = *(float *)&v160 + (float)((float)(*((float *)&v160 + 1) - *(float *)&v160) * 0.5);
        if ((v77 & 8) != 0)
          v80 = *((float *)&v160 + 1);
        else
          v80 = *(float *)&v160 + (float)((float)(*((float *)&v160 + 1) - *(float *)&v160) * 0.5);
        v162 = *(float *)&v160 + (float)((float)(*((float *)&v160 + 1) - *(float *)&v160) * 0.5);
        v163 = v80;
        CA::OGL::emit_nine_part_rect(v6, a2, (uint64_t)v164, (uint64_t)v174, (uint64_t)&v177, (uint64_t)&v176, (uint64_t)&v172, (uint64_t)&v161, (v159 >= *(double *)(v6 + 72)) << 16);
        result = (CA::OGL::Context *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v6 + 520))(v6, 0, 1);
        goto LABEL_22;
      }
LABEL_18:
      v17 = *((_QWORD *)result + 2);
      v18 = *(_QWORD *)(v17 + 16) & 0xFFFFFF00FF00FF00;
      if (*(_QWORD *)(v17 + 8) == 0x3C003C003C003C00)
        v19 = 1;
      else
        v19 = 3;
      *(_DWORD *)(v17 + 16) = v19 | v18;
      *(_DWORD *)(v17 + 20) = HIDWORD(v18);
      result = CA::OGL::emit_one_part_rect(result, a2, (const CA::Transform *)a3, 0, 0);
LABEL_22:
      *(_BYTE *)(*(_QWORD *)(v6 + 16) + 16) = 0;
      return result;
    }
    v20 = v12[1];
    v177 = *v12;
    v178 = v20;
    CA::Rect::apply_transform((int8x16_t *)&v177, v14, (double *)a3);
    v21 = *(float16x4_t **)(v6 + 16);
    v22 = v21[1];
    v23 = v178.f64[0] + v177.f64[0];
    v24 = v178.f64[1] + v177.f64[1];
    v25 = round(v177.f64[0]);
    v26 = floor(v177.f64[0]);
    v27 = ceil(v177.f64[0]);
    if ((v8 & 1) != 0)
      v28 = v27;
    else
      v28 = v25;
    if ((v8 & 1) != 0)
      v29 = v26;
    else
      v29 = v25;
    v30 = round(v23);
    v31.f64[0] = floor(v23);
    v32 = ceil(v23);
    if ((v8 & 2) == 0)
    {
      v32 = v30;
      v31.f64[0] = v30;
    }
    v153 = v32;
    v154 = v29;
    v33.f64[0] = v29;
    v157 = v31.f64[0];
    v158 = v28;
    v33.f64[1] = v28;
    v31.f64[1] = v32;
    v34 = round(v177.f64[1]);
    v35 = floor(v177.f64[1]);
    v36 = ceil(v177.f64[1]);
    if ((v8 & 4) != 0)
      v37 = v36;
    else
      v37 = v34;
    if ((v8 & 4) != 0)
      v38 = v35;
    else
      v38 = v34;
    v39 = round(v24);
    v40.f64[0] = floor(v24);
    v41 = ceil(v24);
    if ((v8 & 8) == 0)
    {
      v41 = v39;
      v40.f64[0] = v39;
    }
    v146 = v38;
    v147 = v41;
    v42.f64[0] = v38;
    v155 = v40.f64[0];
    v156 = v37;
    v42.f64[1] = v37;
    v40.f64[1] = v41;
    v43 = *(float *)(a3 + 4);
    v44 = (float)(*(float *)(a3 + 12) - v43);
    v137 = v177.f64[0];
    v45 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v177.f64[0], 0);
    v46 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(*(float *)a3), 0);
    v150 = v177.f64[1];
    v47 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v177.f64[1], 0);
    v48 = (float)(*(float *)(a3 + 8) - *(float *)a3);
    v49 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(v43), 0);
    v50 = vmulq_n_f64(vsubq_f64(v33, v45), v48);
    v51 = vmulq_n_f64(vsubq_f64(v31, v45), v48);
    __asm { FMOV            V7.2D, #1.0 }
    v56 = vdivq_f64(_Q7, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v178.f64[0], 0));
    v145 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmlaq_f64(v46, v56, v50)), vmlaq_f64(v46, v56, v51));
    v57 = vdivq_f64(_Q7, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v178.f64[1], 0));
    v144 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmlaq_f64(v49, v57, vmulq_n_f64(vsubq_f64(v42, v47), v44))), vmlaq_f64(v49, v57, vmulq_n_f64(vsubq_f64(v40, v47), v44)));
    v58 = vceqzq_f64(v178);
    if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v58, 1), (int8x16_t)v58).u64[0] & 0x8000000000000000) != 0
      || (v59 = vorrq_s8((int8x16_t)vcltzq_f64(v178), (int8x16_t)vcgezq_f64(v178)),
          (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v59), 1), v59).u64[0] & 0x8000000000000000) != 0))
    {
      v176 = 0uLL;
    }
    else
    {
      v60 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v177, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
      v176 = vuzp1q_s32(v60, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v177, v178), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v60));
    }
    v61 = CA::OGL::Context::need_transparent_source((CA::OGL::Context *)v6);
    v62 = *(_DWORD *)(a2 + 16) & 0x40000;
    v21[2].i8[0] = 3;
    v63 = *(_DWORD *)(a2 + 16);
    v64 = *(_QWORD *)(v6 + 16);
    if ((v63 & 0x10000) != 0)
    {
      v81 = *(_QWORD *)(v64 + 16) & 0xFFFFFF00FF00FF00;
      if (*(_QWORD *)(v64 + 8) == 0x3C003C003C003C00)
        v82 = 1;
      else
        v82 = 3;
      *(_DWORD *)(v64 + 16) = v82 | v81;
      *(_DWORD *)(v64 + 20) = HIDWORD(v81);
      v64 = *(_QWORD *)(v6 + 16);
      v66 = *(_BYTE *)(v64 + 481);
      if ((v66 & 1) == 0)
      {
        v83 = 1;
        goto LABEL_68;
      }
      if ((*(_BYTE *)(a2 + 17) & 0x80) == 0)
      {
        v83 = 0;
        goto LABEL_68;
      }
    }
    else
    {
      v65 = 1;
      if ((v63 & 0x8000) == 0 || (v66 = *(_BYTE *)(v64 + 481), (v66 & 1) == 0))
      {
LABEL_85:
        v92 = v61 | (v62 >> 18);
        v175 = 0u;
        v93 = *(_QWORD *)(*(_QWORD *)(v6 + 232) + 8);
        *(_QWORD *)v174 = v6;
        *(_QWORD *)&v174[8] = v93;
        memset(&v174[16], 0, 24);
        *(_WORD *)&v174[32] = 256;
        *(_QWORD *)&v175 = &v176;
        CA::OGL::Context::ClippedArray::start((CA::OGL::Context::ClippedArray *)v174);
        v173 = 0;
        v172 = 0;
        v94 = v6 + 818;
        v95 = v146;
        v96 = v156;
        v152 = v96;
        v97 = v156 - v150;
        *(float *)&v102 = v155;
        v151 = *(float *)&v102;
        *(float *)&v102 = v154;
        v141 = *(float *)&v102;
        v143 = v95;
        *(float *)&v102 = v158;
        v149 = *(float *)&v102;
        *(float *)&v102 = v147;
        v139 = *(float *)&v102;
        v98 = v158 - v137;
        v99 = v24 - v155;
        v133 = v98 * v99;
        v134 = v99;
        v100 = v157;
        *(float *)&v102 = v153;
        v138 = *(float *)&v102;
        v101 = v23 - v157;
        v131 = v101 * v99;
        v132 = v101;
        v135 = v98;
        v136 = v97;
        v130 = v98 * v97;
        LODWORD(v102) = v145.i32[0];
        v129 = v101 * v97;
        if (v157 > v158)
          v103 = v65;
        else
          v103 = 0;
        HIDWORD(v102) = v144.i32[1];
        v128 = v102;
        while (1)
        {
          result = (CA::OGL::Context *)CA::OGL::Context::ClippedArray::next_rect((CA::OGL::Context::ClippedArray *)v174, &v172);
          if (!(_DWORD)result)
            break;
          if (v156 > v146)
          {
            if (*(_DWORD *)(v6 + 92))
              v104 = 18;
            else
              v104 = 12;
            if ((unint64_t)(*(_QWORD *)(v6 + 128) + 12) > *(_QWORD *)(v6 + 136)
              || (v105 = *(_QWORD *)(v6 + 112)) != 0 && *(_QWORD *)(v6 + 104) + v104 > v105)
            {
              *(_WORD *)(v6 + 816) |= 0x20u;
              CA::OGL::Context::array_flush(v6);
              *(_QWORD *)(v6 + 128) = 0;
              *(_QWORD *)(v6 + 96) = v94;
              *(_OWORD *)(v6 + 104) = xmmword_18474E060;
            }
            if (v158 > v154)
            {
              CA::OGL::Context::array_rect((_QWORD *)v6, v141, v143, v149, v152);
              v106 = *(_QWORD *)(v6 + 120) + 48 * *(_QWORD *)(v6 + 128);
              *(_DWORD *)(v106 - 176) = v145.i32[0];
              *(_DWORD *)(v106 - 172) = v144.i32[0];
              *(_DWORD *)(v106 - 128) = v145.i32[1];
              *(_DWORD *)(v106 - 124) = v144.i32[0];
              *(_DWORD *)(v106 - 80) = v145.i32[1];
              *(_DWORD *)(v106 - 76) = v144.i32[1];
              *(_DWORD *)(v106 - 32) = v145.i32[0];
              *(_DWORD *)(v106 - 28) = v144.i32[1];
              v107 = vcvt_f16_f32(vmulq_n_f32(vcvtq_f32_f16(v22), v130));
              *(float16x4_t *)(v106 - 160) = v107;
              *(float16x4_t *)(v106 - 112) = v107;
              *(float16x4_t *)(v106 - 64) = v107;
              *(float16x4_t *)(v106 - 16) = v107;
            }
            if (v157 > v158)
            {
              CA::OGL::Context::array_rect((_QWORD *)v6, v149, v143, v100, v152);
              v108 = *(_QWORD *)(v6 + 120) + 48 * *(_QWORD *)(v6 + 128);
              *(_DWORD *)(v108 - 176) = v145.i32[1];
              *(_DWORD *)(v108 - 172) = v144.i32[0];
              *(_DWORD *)(v108 - 128) = v145.i32[2];
              *(_DWORD *)(v108 - 124) = v144.i32[0];
              *(_DWORD *)(v108 - 80) = v145.i32[2];
              *(_DWORD *)(v108 - 76) = v144.i32[1];
              *(_DWORD *)(v108 - 32) = v145.i32[1];
              *(_DWORD *)(v108 - 28) = v144.i32[1];
              v109 = vcvt_f16_f32(vmulq_n_f32(vcvtq_f32_f16(v22), v136));
              *(float16x4_t *)(v108 - 160) = v109;
              *(float16x4_t *)(v108 - 112) = v109;
              *(float16x4_t *)(v108 - 64) = v109;
              *(float16x4_t *)(v108 - 16) = v109;
            }
            if (v153 > v157)
            {
              CA::OGL::Context::array_rect((_QWORD *)v6, v100, v143, v138, v152);
              v110 = *(_QWORD *)(v6 + 120) + 48 * *(_QWORD *)(v6 + 128);
              *(_DWORD *)(v110 - 176) = v145.i32[2];
              *(_DWORD *)(v110 - 172) = v144.i32[0];
              *(_DWORD *)(v110 - 128) = v145.i32[3];
              *(_DWORD *)(v110 - 124) = v144.i32[0];
              *(_DWORD *)(v110 - 80) = v145.i32[3];
              *(_DWORD *)(v110 - 76) = v144.i32[1];
              *(_DWORD *)(v110 - 32) = v145.i32[2];
              *(_DWORD *)(v110 - 28) = v144.i32[1];
              v111 = vcvt_f16_f32(vmulq_n_f32(vcvtq_f32_f16(v22), v129));
              *(float16x4_t *)(v110 - 160) = v111;
              *(float16x4_t *)(v110 - 112) = v111;
              *(float16x4_t *)(v110 - 64) = v111;
              *(float16x4_t *)(v110 - 16) = v111;
            }
          }
          if (v155 > v156)
          {
            if (*(_DWORD *)(v6 + 92))
              v112 = 18;
            else
              v112 = 12;
            if ((unint64_t)(*(_QWORD *)(v6 + 128) + 12) > *(_QWORD *)(v6 + 136)
              || (v113 = *(_QWORD *)(v6 + 112)) != 0 && *(_QWORD *)(v6 + 104) + v112 > v113)
            {
              *(_WORD *)(v6 + 816) |= 0x20u;
              CA::OGL::Context::array_flush(v6);
              *(_QWORD *)(v6 + 128) = 0;
              *(_QWORD *)(v6 + 96) = v94;
              *(_OWORD *)(v6 + 104) = xmmword_18474E060;
            }
            if (v158 > v154)
            {
              CA::OGL::Context::array_rect((_QWORD *)v6, v141, v152, v149, v151);
              v114 = *(_QWORD *)(v6 + 120) + 48 * *(_QWORD *)(v6 + 128);
              *(_QWORD *)(v114 - 176) = v128;
              *(_DWORD *)(v114 - 128) = v145.i32[1];
              *(_DWORD *)(v114 - 124) = v144.i32[1];
              *(_DWORD *)(v114 - 80) = v145.i32[1];
              *(_DWORD *)(v114 - 76) = v144.i32[2];
              *(_DWORD *)(v114 - 32) = v145.i32[0];
              *(_DWORD *)(v114 - 28) = v144.i32[2];
              v115 = vcvt_f16_f32(vmulq_n_f32(vcvtq_f32_f16(v22), v135));
              *(float16x4_t *)(v114 - 160) = v115;
              *(float16x4_t *)(v114 - 112) = v115;
              *(float16x4_t *)(v114 - 64) = v115;
              *(float16x4_t *)(v114 - 16) = v115;
            }
            if (v103)
            {
              CA::OGL::Context::array_rect((_QWORD *)v6, v149, v152, v100, v151);
              v116 = *(_QWORD *)(v6 + 120) + 48 * *(_QWORD *)(v6 + 128);
              *(_DWORD *)(v116 - 176) = v145.i32[1];
              *(_DWORD *)(v116 - 172) = v144.i32[1];
              *(_DWORD *)(v116 - 128) = v145.i32[2];
              *(_DWORD *)(v116 - 124) = v144.i32[1];
              *(_DWORD *)(v116 - 80) = v145.i32[2];
              *(_DWORD *)(v116 - 76) = v144.i32[2];
              *(_DWORD *)(v116 - 32) = v145.i32[1];
              *(_DWORD *)(v116 - 28) = v144.i32[2];
              *(float16x4_t *)(v116 - 160) = v22;
              *(float16x4_t *)(v116 - 112) = v22;
              *(float16x4_t *)(v116 - 64) = v22;
              *(float16x4_t *)(v116 - 16) = v22;
            }
            if (v153 > v157)
            {
              CA::OGL::Context::array_rect((_QWORD *)v6, v100, v152, v138, v151);
              v117 = *(_QWORD *)(v6 + 120) + 48 * *(_QWORD *)(v6 + 128);
              *(_DWORD *)(v117 - 176) = v145.i32[2];
              *(_DWORD *)(v117 - 172) = v144.i32[1];
              *(_DWORD *)(v117 - 128) = v145.i32[3];
              *(_DWORD *)(v117 - 124) = v144.i32[1];
              *(_DWORD *)(v117 - 80) = v145.i32[3];
              *(_DWORD *)(v117 - 76) = v144.i32[2];
              *(_DWORD *)(v117 - 32) = v145.i32[2];
              *(_DWORD *)(v117 - 28) = v144.i32[2];
              v118 = vcvt_f16_f32(vmulq_n_f32(vcvtq_f32_f16(v22), v132));
              *(float16x4_t *)(v117 - 160) = v118;
              *(float16x4_t *)(v117 - 112) = v118;
              *(float16x4_t *)(v117 - 64) = v118;
              *(float16x4_t *)(v117 - 16) = v118;
            }
          }
          if (v147 > v155)
          {
            if (*(_DWORD *)(v6 + 92))
              v119 = 18;
            else
              v119 = 12;
            if ((unint64_t)(*(_QWORD *)(v6 + 128) + 12) > *(_QWORD *)(v6 + 136)
              || (v120 = *(_QWORD *)(v6 + 112)) != 0 && *(_QWORD *)(v6 + 104) + v119 > v120)
            {
              *(_WORD *)(v6 + 816) |= 0x20u;
              CA::OGL::Context::array_flush(v6);
              *(_QWORD *)(v6 + 128) = 0;
              *(_QWORD *)(v6 + 96) = v94;
              *(_OWORD *)(v6 + 104) = xmmword_18474E060;
            }
            if (v158 > v154)
            {
              CA::OGL::Context::array_rect((_QWORD *)v6, v141, v151, v149, v139);
              v121 = *(_QWORD *)(v6 + 120) + 48 * *(_QWORD *)(v6 + 128);
              *(_DWORD *)(v121 - 176) = v145.i32[0];
              *(_DWORD *)(v121 - 172) = v144.i32[2];
              *(_DWORD *)(v121 - 128) = v145.i32[1];
              *(_DWORD *)(v121 - 124) = v144.i32[2];
              *(_DWORD *)(v121 - 80) = v145.i32[1];
              *(_DWORD *)(v121 - 76) = v144.i32[3];
              *(_DWORD *)(v121 - 32) = v145.i32[0];
              *(_DWORD *)(v121 - 28) = v144.i32[3];
              v122 = vcvt_f16_f32(vmulq_n_f32(vcvtq_f32_f16(v22), v133));
              *(float16x4_t *)(v121 - 160) = v122;
              *(float16x4_t *)(v121 - 112) = v122;
              *(float16x4_t *)(v121 - 64) = v122;
              *(float16x4_t *)(v121 - 16) = v122;
            }
            if (v157 > v158)
            {
              CA::OGL::Context::array_rect((_QWORD *)v6, v149, v151, v100, v139);
              v123 = *(_QWORD *)(v6 + 120) + 48 * *(_QWORD *)(v6 + 128);
              *(_DWORD *)(v123 - 176) = v145.i32[1];
              *(_DWORD *)(v123 - 172) = v144.i32[2];
              *(_DWORD *)(v123 - 128) = v145.i32[2];
              *(_DWORD *)(v123 - 124) = v144.i32[2];
              *(_DWORD *)(v123 - 80) = v145.i32[2];
              *(_DWORD *)(v123 - 76) = v144.i32[3];
              *(_DWORD *)(v123 - 32) = v145.i32[1];
              *(_DWORD *)(v123 - 28) = v144.i32[3];
              v124 = vcvt_f16_f32(vmulq_n_f32(vcvtq_f32_f16(v22), v134));
              *(float16x4_t *)(v123 - 160) = v124;
              *(float16x4_t *)(v123 - 112) = v124;
              *(float16x4_t *)(v123 - 64) = v124;
              *(float16x4_t *)(v123 - 16) = v124;
            }
            if (v153 > v157)
            {
              CA::OGL::Context::array_rect((_QWORD *)v6, v100, v151, v138, v139);
              v125 = *(_QWORD *)(v6 + 120) + 48 * *(_QWORD *)(v6 + 128);
              *(_DWORD *)(v125 - 176) = v145.i32[2];
              *(_DWORD *)(v125 - 172) = v144.i32[2];
              *(_DWORD *)(v125 - 128) = v145.i32[3];
              *(_DWORD *)(v125 - 124) = v144.i32[2];
              *(_DWORD *)(v125 - 80) = v145.i32[3];
              *(_DWORD *)(v125 - 76) = v144.i32[3];
              *(_DWORD *)(v125 - 32) = v145.i32[2];
              *(_DWORD *)(v125 - 28) = v144.i32[3];
              v126 = vcvt_f16_f32(vmulq_n_f32(vcvtq_f32_f16(v22), v131));
              *(float16x4_t *)(v125 - 160) = v126;
              *(float16x4_t *)(v125 - 112) = v126;
              *(float16x4_t *)(v125 - 64) = v126;
              *(float16x4_t *)(v125 - 16) = v126;
            }
          }
        }
        if (v92)
        {
          *(double *)v164 = v154;
          *(double *)&v164[8] = v146;
          *(_OWORD *)&v164[16] = xmmword_18474DF50;
          *(double *)&v164[32] = v153;
          *(double *)v165 = v146;
          *(_OWORD *)&v165[8] = xmmword_18474DF50;
          v166 = v153;
          v167 = v147;
          v168 = xmmword_18474DF50;
          v169 = v154;
          v170 = v147;
          v171 = xmmword_18474DF50;
          if ((*(_BYTE *)(a2 + 18) & 4) != 0)
            v127 = *(_QWORD *)(*(_QWORD *)(v6 + 16) + 8);
          else
            v127 = 0;
          v161 = v127;
          result = (CA::OGL::Context *)CA::OGL::emit_quad_surround(v6, (const double *)v164, &v161);
        }
        goto LABEL_22;
      }
    }
    v83 = 0;
    *(_BYTE *)(v64 + 481) = v66 & 0xFE;
LABEL_68:
    if (v155 > v156 && v157 > v158)
    {
      v140 = v62;
      v142 = v24;
      v148 = v23;
      *(_OWORD *)v165 = 0u;
      v84 = *(_QWORD *)(*(_QWORD *)(v6 + 232) + 8);
      *(_QWORD *)v164 = v6;
      *(_QWORD *)&v164[8] = v84;
      memset(&v164[16], 0, 24);
      *(_WORD *)&v164[32] = 256;
      *(_QWORD *)v165 = &v176;
      CA::OGL::Context::ClippedArray::start((CA::OGL::Context::ClippedArray *)v164);
      *(_OWORD *)v174 = 0uLL;
      while (CA::OGL::Context::ClippedArray::next_rect((CA::OGL::Context::ClippedArray *)v164, (int32x2_t *)v174))
      {
        if (*(_DWORD *)(v6 + 92))
          v89 = 6;
        else
          v89 = 4;
        if ((unint64_t)(*(_QWORD *)(v6 + 128) + 4) > *(_QWORD *)(v6 + 136)
          || (v90 = *(_QWORD *)(v6 + 112)) != 0 && *(_QWORD *)(v6 + 104) + v89 > v90)
        {
          *(_WORD *)(v6 + 816) |= 0x20u;
          CA::OGL::Context::array_flush(v6);
          *(_QWORD *)(v6 + 128) = 0;
          *(_QWORD *)(v6 + 96) = v6 + 818;
          *(_OWORD *)(v6 + 104) = xmmword_18474E060;
        }
        v85 = v158;
        v86 = v156;
        v87 = v157;
        v88 = v155;
        CA::OGL::Context::array_rect((_QWORD *)v6, v85, v86, v87, v88);
        v91 = *(_QWORD *)(v6 + 120) + 48 * *(_QWORD *)(v6 + 128);
        *(_DWORD *)(v91 - 176) = v145.i32[1];
        *(_DWORD *)(v91 - 172) = v144.i32[1];
        *(_DWORD *)(v91 - 128) = v145.i32[2];
        *(_DWORD *)(v91 - 124) = v144.i32[1];
        *(_DWORD *)(v91 - 80) = v145.i32[2];
        *(_DWORD *)(v91 - 76) = v144.i32[2];
        *(_DWORD *)(v91 - 32) = v145.i32[1];
        *(_DWORD *)(v91 - 28) = v144.i32[2];
        *(float16x4_t *)(v91 - 160) = v22;
        *(float16x4_t *)(v91 - 112) = v22;
        *(float16x4_t *)(v91 - 64) = v22;
        *(float16x4_t *)(v91 - 16) = v22;
      }
      v23 = v148;
      v24 = v142;
      v62 = v140;
    }
    if ((v83 & 1) == 0)
      *(_BYTE *)(*(_QWORD *)(v6 + 16) + 481) |= 1u;
    v65 = 0;
    if ((*(_BYTE *)(a2 + 18) & 1) != 0)
      *(_BYTE *)(*(_QWORD *)(v6 + 16) + 16) = 3;
    goto LABEL_85;
  }
  return result;
}

CA::OGL::Context *CA::OGL::ContentsGeometry::fill_geometry(uint64_t a1, CA::OGL::Context *a2, float64x2_t **a3, uint64_t a4)
{
  uint64_t v7;
  float32x4_t v8;
  float32x4_t v9;
  uint64_t v10;
  uint32x2_t *v11;
  __int128 v12;
  _OWORD v14[2];
  float32x4_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 490))
    return CA::OGL::fill_rect_tex(a2, (uint64_t)a3, a4, (double *)a4);
  v7 = a1 + 292;
  v8.i64[0] = *(_QWORD *)a4;
  *(float32x2_t *)v9.f32 = vsub_f32(*(float32x2_t *)(a4 + 8), *(float32x2_t *)a4);
  v9.i64[1] = v9.i64[0];
  v8.i64[1] = *(_QWORD *)a4;
  v15 = vmlaq_f32(v8, *(float32x4_t *)(a1 + 292), v9);
  v10 = *(_QWORD *)(a1 + 448);
  if (!v10)
    return CA::OGL::fill_round_rect_tex(a2, a3, (uint64_t)&v15, (double *)*(unsigned int *)(a1 + 440), *(unsigned int *)(a1 + 444), (double *)(a1 + 72), *(float64_t *)(a1 + 424), *(float64_t *)(a1 + 432));
  v11 = (uint32x2_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 80))(v10);
  v12 = *(_OWORD *)(v7 + 180);
  v14[0] = *(_OWORD *)(v7 + 164);
  v14[1] = v12;
  return CA::OGL::fill_corner_rect_tex(a2, (double **)a3, v11, (double *)v14, *(unsigned __int8 *)(a1 + 488), *(unsigned __int8 *)(a1 + 489), (uint64_t)&v15, *(_DWORD *)(a1 + 440), *(double *)(a1 + 424), *(double *)(a1 + 432), (double *)(a1 + 72));
}

uint64_t CA::OGL::MetalContext::destination_bit_depth(CA::OGL::MetalContext *this)
{
  unsigned int v1;
  char v2;

  v1 = *(_DWORD *)(*((_QWORD *)this + 31) + 120);
  v2 = v1 - 70;
  if (v1 - 70 > 0x2D)
    goto LABEL_2;
  if (((1 << v2) & 0x3D0000000000) != 0)
    return 16;
  if (((1 << v2) & 0xC03) != 0)
    return 8;
  if (((1 << v2) & 0x1100000) == 0)
  {
LABEL_2:
    if (v1 <= 0x2B)
    {
      if (((1 << v1) & 0xC0000C02) != 0)
        return 8;
      if (((1 << v1) & 0xA0000000000) != 0)
        return 5;
    }
    if (v1 - 550 < 6)
      return 9;
    return 8;
  }
  return 10;
}

uint64_t CA::OGL::emit_quad_indices(uint64_t a1, float64x2_t *a2, const unsigned __int16 *a3, unint64_t a4, unsigned int a5)
{
  float64x2_t v9;
  int64x2_t v10;
  int8x16_t v11;
  int32x4_t v12;
  int32x4_t *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  unint64_t v18;
  const unsigned __int16 *v19;
  int32x4_t v20;
  __int128 v21;
  _QWORD v22[3];
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v20 = 0uLL;
  if (a2)
  {
    v9 = a2[1];
    v10 = vceqzq_f64(v9);
    if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v10, 1), (int8x16_t)v10).u64[0] & 0x8000000000000000) == 0)
    {
      v11 = vorrq_s8((int8x16_t)vcltzq_f64(v9), (int8x16_t)vcgezq_f64(v9));
      if ((vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v11), 1), v11).u64[0] & 0x8000000000000000) == 0)
      {
        v12 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(*a2, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
        v20 = vuzp1q_s32(v12, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(*a2, v9), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v12));
      }
    }
    v13 = &v20;
  }
  else
  {
    v13 = 0;
  }
  v21 = 0u;
  if (*(_DWORD *)(a1 + 92))
    v14 = 6;
  else
    v14 = 4;
  v24 = 0uLL;
  v15 = *(_QWORD *)(*(_QWORD *)(a1 + 232) + 8);
  v22[0] = a1;
  v22[1] = v15;
  v23 = 0uLL;
  v22[2] = 0;
  WORD4(v23) = 256;
  *(_QWORD *)&v24 = v13;
  CA::OGL::Context::ClippedArray::start((CA::OGL::Context::ClippedArray *)v22);
  v16 = a5;
  while (1)
  {
    result = CA::OGL::Context::ClippedArray::next_rect((CA::OGL::Context::ClippedArray *)v22, (int32x2_t *)&v21);
    if (!(_DWORD)result)
      break;
    *(_QWORD *)(a1 + 128) = v16;
    if (a4)
    {
      v18 = 0;
      v19 = a3;
      do
      {
        if ((v14 + *(_DWORD *)(a1 + 104)) > *(_DWORD *)(a1 + 112))
        {
          *(_WORD *)(a1 + 816) |= 0x20u;
          CA::OGL::Context::array_flush(a1);
          *(_QWORD *)(a1 + 96) = a1 + 818;
          *(_OWORD *)(a1 + 104) = xmmword_18474E060;
          *(_QWORD *)(a1 + 128) = v16;
        }
        CA::OGL::Context::array_indices_vec(a1, v19);
        v18 += 4;
        v19 += 4;
      }
      while (v18 < a4);
    }
  }
  return result;
}

uint64_t CA::OGL::Context::array_indices_vec(uint64_t this, const unsigned __int16 *a2)
{
  uint64_t v2;
  _WORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(this + 104);
  v3 = (_WORD *)(*(_QWORD *)(this + 96) + 2 * v2);
  v4 = *(_DWORD *)(this + 92);
  if (v4 == 1)
  {
    *v3 = *a2;
    v3[1] = a2[1];
    v3[2] = a2[2];
    v3[3] = a2[2];
    v3[4] = a2[3];
    v5 = 6;
    v6 = 5;
  }
  else
  {
    if (v4)
      return this;
    *v3 = *a2;
    v3[1] = a2[1];
    v3[2] = a2[2];
    a2 += 3;
    v5 = 4;
    v6 = 3;
  }
  v3[v6] = *a2;
  *(_QWORD *)(this + 104) = v2 + v5;
  return this;
}

CA::OGL::Context *CA::OGL::emit_one_part_rect(CA::OGL::Context *result, uint64_t a2, const CA::Transform *a3, uint64_t a4, int a5)
{
  double *v5;
  double v6;
  double v7;
  double v8;
  CA::OGL::Context *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  unsigned int v18;
  BOOL v19;
  uint64_t v20;
  const float *v21;
  float32x4_t *v22;
  uint64_t v23;
  uint64_t i;
  void (*v25)(uint64_t, _QWORD *, float32x4_t *, uint64_t);
  void (*v26)(uint64_t, float32x4_t *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  int32x2_t v29[2];
  _QWORD v30[5];
  _BYTE v31[24];
  double v32;
  double v33;
  __int128 v34;
  double v35;
  double v36;
  __int128 v37;
  double v38[5];

  v38[4] = *(double *)MEMORY[0x1E0C80C00];
  v5 = *(double **)a2;
  v7 = *(double *)(*(_QWORD *)a2 + 16);
  v6 = *(double *)(*(_QWORD *)a2 + 24);
  if (v7 >= v6)
    v8 = *(double *)(*(_QWORD *)a2 + 24);
  else
    v8 = *(double *)(*(_QWORD *)a2 + 16);
  if (v8 > 0.0)
  {
    v13 = result;
    v29[0] = 0;
    v29[1] = 0;
    v15 = v5[1];
    v38[0] = *v5;
    v14 = v38[0];
    v38[1] = v15;
    v16 = v38[0] + v7;
    v17 = v15 + v6;
    v38[2] = v38[0] + v7;
    v38[3] = v15 + v6;
    v18 = CA::OGL::Context::need_transparent_source(result) | ((a5 & 0x40000u) >> 18);
    if (*(_OWORD *)(a2 + 24) == 0)
    {
      *(_OWORD *)v31 = 0u;
      v19 = ((*(unsigned __int8 *)(*(_QWORD *)(a2 + 8) + 144) >> 4) & 1) == 0;
      v20 = *(_QWORD *)(*((_QWORD *)v13 + 29) + 8);
      v30[0] = v13;
      v30[1] = v20;
      memset(&v30[2], 0, 24);
      LOBYTE(v30[4]) = v19;
      BYTE1(v30[4]) = 1;
      CA::OGL::Context::ClippedArray::start((CA::OGL::Context::ClippedArray *)v30);
      while (1)
      {
        result = (CA::OGL::Context *)CA::OGL::Context::ClippedArray::next_rect((CA::OGL::Context::ClippedArray *)v30, v29);
        if (!(_DWORD)result)
          break;
        CA::OGL::emit_quad(v13, (CA::OGL::Context *)v38, (const double *)v29, *(const CA::Bounds **)(a2 + 8), a3, (float *)a4, v21);
      }
    }
    else
    {
      v22 = (float32x4_t *)*((_QWORD *)v13 + 15);
      *(double *)v30 = v38[0];
      *(double *)&v30[1] = v15;
      *(double *)&v30[4] = v16;
      *(double *)v31 = v15;
      v32 = v38[0];
      v33 = v17;
      v35 = v16;
      v36 = v17;
      v37 = xmmword_18474DF50;
      v34 = xmmword_18474DF50;
      *(_OWORD *)&v31[8] = xmmword_18474DF50;
      *(_OWORD *)&v30[2] = xmmword_18474DF50;
      if (a3)
      {
        v22[1].i32[0] = *(_DWORD *)a3;
        v22[1].i32[1] = *((_DWORD *)a3 + 1);
        v22[4].i32[0] = *((_DWORD *)a3 + 2);
        v22[4].i32[1] = *((_DWORD *)a3 + 1);
        v22[7].i32[0] = *(_DWORD *)a3;
        v22[7].i32[1] = *((_DWORD *)a3 + 3);
        v22[10].i32[0] = *((_DWORD *)a3 + 2);
        v22[10].i32[1] = *((_DWORD *)a3 + 3);
      }
      if (a4)
      {
        v22[1].i32[2] = *(_DWORD *)a4;
        v22[1].i32[3] = *(_DWORD *)(a4 + 4);
        v22[4].i32[2] = *(_DWORD *)(a4 + 8);
        v22[4].i32[3] = *(_DWORD *)(a4 + 4);
        v22[7].i32[2] = *(_DWORD *)a4;
        v22[7].i32[3] = *(_DWORD *)(a4 + 12);
        v22[10].i32[2] = *(_DWORD *)(a4 + 8);
        v22[10].i32[3] = *(_DWORD *)(a4 + 12);
      }
      v23 = *(_QWORD *)(*((_QWORD *)v13 + 2) + 8);
      for (i = 2; i != 14; i += 3)
        v22[i].i64[0] = v23;
      v25 = *(void (**)(uint64_t, _QWORD *, float32x4_t *, uint64_t))(a2 + 24);
      if (v25)
        v25(a2, v30, v22, 4);
      CA::OGL::transform_vertices((float64x2_t *)v30, v22, (const double *)4, *(float64x2_t **)(a2 + 8));
      v26 = *(void (**)(uint64_t, float32x4_t *, uint64_t))(a2 + 32);
      if (v26)
        v26(a2, v22, 4);
      result = (CA::OGL::Context *)CA::OGL::emit_quad_indices((uint64_t)v13, *(float64x2_t **)(a2 + 40), CA::OGL::emit_one_part_rect(CA::OGL::Context &,CA::OGL::RectState const&,float const*,float const*,unsigned int)::indices, 4uLL, 4u);
    }
    if (v18)
    {
      *(double *)v30 = v14;
      *(double *)&v30[1] = v15;
      *(double *)&v30[4] = v16;
      *(double *)v31 = v15;
      v32 = v16;
      v33 = v17;
      v35 = v14;
      v36 = v17;
      v37 = xmmword_18474DF50;
      v34 = xmmword_18474DF50;
      *(_OWORD *)&v31[8] = xmmword_18474DF50;
      *(_OWORD *)&v30[2] = xmmword_18474DF50;
      CA::Transform::apply_to_point4(*(_QWORD *)(a2 + 8), (float64x2_t *)v30, (float64x2_t *)v30, (const double *)4);
      if ((a5 & 0x40000) != 0)
        v27 = *(_QWORD *)(*((_QWORD *)v13 + 2) + 8);
      else
        v27 = 0;
      v28 = v27;
      return (CA::OGL::Context *)CA::OGL::emit_quad_surround((uint64_t)v13, (const double *)v30, &v28);
    }
  }
  return result;
}

uint64_t CA::OGL::Context::ClippedArray::next_rect(CA::OGL::Context::ClippedArray *this, int32x2_t *a2)
{
  uint64_t v4;
  int32x2_t *v5;
  int32x2_t v6;
  uint32x2_t v7;
  int32x2_t v8;
  uint32x2_t v9;
  uint32x2_t v10;
  int v11;
  int32x2_t *v12;
  int32x2_t v13;
  uint32x2_t v14;
  int32x2_t v15;
  uint32x2_t v16;
  uint32x2_t v17;
  uint64_t result;

  v4 = *(_QWORD *)this;
  if (*((_BYTE *)this + 48))
  {
    if (*((_BYTE *)this + 33))
    {
      if (!*((_BYTE *)this + 50))
      {
        CA::OGL::Context::array_flush(*(_QWORD *)this);
        if ((*(_WORD *)(v4 + 816) & 0x20) == 0)
        {
          while (1)
          {
            while (1)
            {
              if (!CA::ShapeIterator::iterate((uint64_t *)this + 1, (int *)a2))
                goto LABEL_14;
              v5 = (int32x2_t *)*((_QWORD *)this + 5);
              if (v5)
                break;
              v11 = a2->i32[0];
LABEL_12:
              *(_DWORD *)(v4 + 32) = v11;
              *(_DWORD *)(v4 + 36) = a2->i32[1];
              *(_DWORD *)(v4 + 40) = a2[1].i32[0];
              *(_DWORD *)(v4 + 44) = a2[1].i32[1];
              CA::OGL::Context::array_flush(v4);
            }
            v6 = v5[1];
            v7 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v6);
            if ((vpmax_u32(v7, v7).u32[0] & 0x80000000) == 0)
            {
              v8 = a2[1];
              v9 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v8);
              if ((vpmax_u32(v9, v9).u32[0] & 0x80000000) == 0)
              {
                v10 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, vsub_s32(vmin_s32(vadd_s32(*v5, v6), vadd_s32(*a2, v8)), vmax_s32(*v5, *a2)));
                if ((vpmax_u32(v10, v10).u32[0] & 0x80000000) == 0)
                {
                  v11 = (int)*a2;
                  goto LABEL_12;
                }
              }
            }
          }
        }
      }
    }
LABEL_14:
    while (*((_BYTE *)this + 49) && CA::ShapeIterator::iterate((uint64_t *)this + 1, (int *)a2))
    {
      v12 = (int32x2_t *)*((_QWORD *)this + 5);
      if (v12)
      {
        v13 = v12[1];
        v14 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v13);
        if ((vpmax_u32(v14, v14).u32[0] & 0x80000000) != 0)
          continue;
        v15 = a2[1];
        v16 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v15);
        if ((vpmax_u32(v16, v16).u32[0] & 0x80000000) != 0)
          continue;
        v17 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, vsub_s32(vmin_s32(vadd_s32(*v12, v13), vadd_s32(*a2, v15)), vmax_s32(*v12, *a2)));
        if ((vpmax_u32(v17, v17).u32[0] & 0x80000000) != 0)
          continue;
      }
      if (!*((_BYTE *)this + 50))
      {
        *(_DWORD *)(v4 + 32) = a2->i32[0];
        *(_DWORD *)(v4 + 36) = a2->i32[1];
        *(_DWORD *)(v4 + 40) = a2[1].i32[0];
        *(_DWORD *)(v4 + 44) = a2[1].i32[1];
        if (*((_BYTE *)this + 33))
        {
          *(_QWORD *)(v4 + 128) = 0;
          *(_QWORD *)(v4 + 96) = v4 + 818;
          *(_OWORD *)(v4 + 104) = xmmword_18474E060;
          *(_WORD *)(v4 + 816) &= ~0x20u;
        }
      }
      return 1;
    }
    if (*((_BYTE *)this + 33) && *((_BYTE *)this + 50))
      CA::OGL::Context::array_flush(v4);
    if ((*(_WORD *)(v4 + 816) & 8) == 0)
      *(_BYTE *)(v4 + 64) = 0;
    if (!BYTE4(ca_debug_options))
      return 0;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 800))(v4);
    if ((_DWORD)result)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 408))(v4, 1);
      return 0;
    }
  }
  else
  {
    *((_BYTE *)this + 48) = 1;
    if (*((_BYTE *)this + 49))
      goto LABEL_14;
    *(_OWORD *)a2->i8 = xmmword_18474E240;
    return 1;
  }
  return result;
}

uint64_t CA::ShapeIterator::iterate(uint64_t *a1, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  int v11;
  int v12;
  uint64_t v13;
  int *v14;
  int i;
  int v16;

  v2 = *a1;
  if ((*a1 & 1) != 0)
  {
    if (v2 == 1 || a1[1] == 1)
      return 0;
    *a2 = v2 >> 48;
    a2[1] = (int)((unint64_t)v2 >> 16) >> 16;
    a2[2] = v2 >> 17;
    a2[3] = (v2 >> 2) & 0x7FFF;
    v9 = 1;
    a1[1] = 1;
  }
  else
  {
    v3 = a1[1];
    if (v3)
    {
      v4 = (int *)(v2 + 4 * v3);
      v5 = a1[2];
      v6 = &v4[2 * v5 + 2];
      v7 = *v4;
      v8 = v5 + 1;
    }
    else
    {
      v4 = (int *)(v2 + 12);
      v7 = 0x7FFFFFFF;
      if (*(_DWORD *)(v2 + 12) != 0x7FFFFFFF)
      {
        v7 = *(_DWORD *)(v2 + 12);
        if (*(_DWORD *)(v2 + 16) == 2)
        {
          v10 = (int *)(v2 + 20);
          while (1)
          {
            v4 = v10;
            v7 = *v10;
            if (*v10 == 0x7FFFFFFF)
              break;
            v10 += 2;
            if (v4[1] != 2)
              goto LABEL_14;
          }
          v7 = 0x7FFFFFFF;
        }
      }
LABEL_14:
      a1[1] = ((uint64_t)v4 - v2) >> 2;
      a1[2] = 0;
      v6 = v4 + 2;
      v8 = 1;
    }
    if (v7 == 0x7FFFFFFF)
      return 0;
    v11 = *v6;
    *a2 = *v6;
    a2[2] = v6[1] - v11;
    v12 = *v4;
    a2[1] = *v4;
    a2[3] = v4[v4[1]] - v12;
    a1[2] = v8;
    v13 = v4[1];
    if (v8 == ((int)v13 - 2) >> 1)
    {
      v14 = &v4[v13];
      for (i = *v14; i != 0x7FFFFFFF && v14[1] == 2; i = v16)
      {
        v16 = v14[2];
        v14 += 2;
      }
      a1[1] = ((uint64_t)v14 - v2) >> 2;
      a1[2] = 0;
    }
    return 1;
  }
  return v9;
}

uint64_t CA::OGL::Context::array_flush(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(this + 104);
  if (v1)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this + 280))(this, *(unsigned int *)(this + 92), v1, *(_QWORD *)(this + 96), *(_QWORD *)(this + 120), 0, *(unsigned int *)(this + 128), *(_QWORD *)(*(_QWORD *)(this + 232) + 16));
  v2 = *(_QWORD *)(this + 128);
  if (v2)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this + 280))(this, *(unsigned int *)(this + 92), v2, 0, *(_QWORD *)(this + 120), 0, *(_QWORD *)(this + 128), *(_QWORD *)(*(_QWORD *)(this + 232) + 16));
  return this;
}

void CA::OGL::MetalContext::draw_elements(CA::OGL::Context *a1, int a2, unsigned int a3, unsigned __int16 *a4, char *a5, int a6, int a7, _QWORD *a8)
{
  uint64_t v8;

  if (!a2)
    __assert_rtn("draw_elements", "ogl-metal.mm", 8023, "mode != OGL_PRIMITIVE_QUADS");
  if (*(unsigned __int8 *)(*((_QWORD *)a1 + 2) + 16) - 82 <= 9)
    __assert_rtn("draw_elements", "ogl-metal.mm", 8025, "get_texture_function() < OGL_TEX_PATH_FIRST || get_texture_function() > OGL_TEX_PATH_LAST");
  if (a2 == 1)
    v8 = 3;
  else
    v8 = 4;
  if (a4)
    CA::OGL::MetalContext::draw(a1, v8, a3, 1u, a5, 0x30uLL, 0x10u, a6, a7 - a6, a4, a8, 0);
  else
    CA::OGL::MetalContext::draw(a1, v8, a3, 1u, a5, 0x30uLL, 0x10u, 0, a3, 0, a8, 0);
}

uint64_t CA::OGL::Context::ClippedArray::start(CA::OGL::Context::ClippedArray *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  unsigned int v5;
  int v6;
  _BYTE *v7;
  _BYTE *v8;
  const CA::Bounds *v9;
  BOOL v10;
  __int16 v11;
  __int16 v12;
  __int16 v13;
  int v14[6];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)this;
  v3 = *(_QWORD *)(*(_QWORD *)this + 232);
  result = *(_QWORD *)(v3 + 8);
  if ((result & 1) == 0 && *(_DWORD *)(result + 4) == 12)
  {
    v5 = *(_DWORD *)(result + 32) - *(_DWORD *)(result + 28);
    if (v5 <= *(_DWORD *)(result + 36) - *(_DWORD *)(result + 20))
      v5 = *(_DWORD *)(result + 36) - *(_DWORD *)(result + 20);
    if (v5 >= 0x3FFFFFFF)
    {
      LOBYTE(v6) = 0;
      *((_BYTE *)this + 49) = 0;
      v7 = (char *)this + 49;
      v8 = (char *)this + 32;
LABEL_15:
      *((_BYTE *)this + 50) = 1;
LABEL_18:
      if (*((_BYTE *)this + 33))
      {
        *(_QWORD *)(v2 + 128) = 0;
        *(_QWORD *)(v2 + 96) = v2 + 818;
        *(_OWORD *)(v2 + 104) = xmmword_18474E060;
        v13 = *(_WORD *)(v2 + 816) & 0xFFDF;
        *(_WORD *)(v2 + 816) = v13;
        LOBYTE(v6) = *v7;
      }
      else
      {
        v13 = *(_WORD *)(v2 + 816);
      }
      v12 = v13 & 0xFFBF | ((v6 & 3) << 6);
      goto LABEL_22;
    }
  }
  v9 = (const CA::Bounds *)*((_QWORD *)this + 5);
  if (v9)
  {
    result = CA::Shape::contains(result, v9);
    v6 = result ^ 1;
  }
  else
  {
    v6 = 1;
  }
  *((_BYTE *)this + 49) = v6;
  v7 = (char *)this + 49;
  v8 = (char *)this + 32;
  if (*((_BYTE *)this + 32))
    v10 = 1;
  else
    v10 = v6 == 0;
  if (v10)
    goto LABEL_15;
  v11 = *(_WORD *)(v2 + 816);
  *((_BYTE *)this + 50) = (v11 & 8) != 0;
  if ((v11 & 8) != 0)
    goto LABEL_18;
  *(_BYTE *)(v2 + 64) = 1;
  v12 = *(_WORD *)(v2 + 816) & 0xFFBF;
LABEL_22:
  *(_WORD *)(v2 + 816) = v12;
  if (!*v8 && *v7 && (v12 & 0x10) != 0)
  {
    *(_OWORD *)v14 = 0uLL;
    result = CA::Shape::get_bounds(*(_QWORD *)(v3 + 8), v14);
    *(_OWORD *)(v2 + 32) = *(_OWORD *)v14;
    *(_BYTE *)(v2 + 64) = 1;
    *(_WORD *)(v2 + 816) &= ~0x10u;
  }
  *((_BYTE *)this + 48) = 0;
  return result;
}

BOOL CA::OGL::Context::need_transparent_source(CA::OGL::Context *this)
{
  uint64_t v2;
  unsigned int v3;
  BOOL v4;
  int v5;
  uint64_t v7;

  if ((*(_WORD *)(*((_QWORD *)this + 29) + 68) & 0x400) == 0)
    return 0;
  v2 = *((_QWORD *)this + 2);
  if ((*(_BYTE *)(v2 + 16) & 0xFE) != 0x10)
  {
    v3 = *(unsigned __int8 *)(v2 + 480);
    v4 = v3 > 0x19;
    v5 = (1 << v3) & 0x300C533;
    if (v4 || v5 == 0)
      return 0;
  }
  v7 = *((_QWORD *)this + 31);
  return !v7 || (*(_WORD *)(v7 + 75) & 0x60) == 0;
}

void CA::OGL::emit_quad(CA::OGL *this, CA::OGL::Context *a2, const double *a3, const CA::Bounds *a4, const CA::Transform *a5, float *a6, const float *a7)
{
  double v12;
  double v13;
  double v14;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  __int16 v36;
  double v37;
  double v38;
  double v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  float v48;
  float v49;
  float v50;
  float v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int32 v55;
  uint64_t v56;
  uint64_t v57;
  __int32 v58;
  uint64_t v59;
  double v60;
  double v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  __int16 v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  double v81;
  float64_t v82;
  double v83;
  double v84;
  __int16 v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  uint64_t v93;
  uint64_t v94;
  float v95;
  int v96;
  int v97;
  int v98;
  uint64_t v99;
  int v100;
  int v101;
  int v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  int v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  BOOL v114;
  double v115;
  BOOL v116;
  double v117;
  float v119;
  float v120;
  float v121;
  float v122;
  float v126;
  double v127;
  double v128;
  uint64_t v129;
  _QWORD *v130;
  float v131;
  float v132;
  double v133;
  double v134;
  float v135;
  double v136;
  double v137;
  double v138;
  double v139;
  double v140;
  double v141;
  double v142;
  double v143;
  double v144;
  double v145;
  double v146;
  double v147;
  double v148;
  int v149;
  double v150;
  double v151;
  double v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  __int128 v168;
  int32x4_t v169;
  int32x4_t v170;
  int32x4_t v171;
  uint64_t v172;

  v172 = *MEMORY[0x1E0C80C00];
  if ((*((_BYTE *)a4 + 144) & 0x1F) == 0)
  {
    v60 = *((double *)a4 + 12);
    v61 = *((double *)a4 + 13);
    v62 = v60 + *(double *)a2;
    v63 = v61 + *((double *)a2 + 1);
    v64 = *((double *)a2 + 2) + v60;
    v65 = *((double *)a2 + 3) + v61;
    if (v64 <= v62 || v65 <= v63)
      return;
    v67 = 0.0;
    v68 = 0.0;
    v69 = 0.0;
    v70 = 0.0;
    v71 = 0.0;
    if (a5)
    {
      v71 = *(float *)a5;
      v70 = *((float *)a5 + 1);
      v69 = *((float *)a5 + 2);
      v68 = *((float *)a5 + 3);
    }
    v72 = 0.0;
    v73 = 0.0;
    v74 = 0.0;
    if (a6)
    {
      v74 = *a6;
      v67 = a6[1];
      v72 = a6[2];
      v73 = a6[3];
    }
    v75 = *((_WORD *)this + 408);
    if ((v75 & 0x40) == 0)
    {
      v157 = v72;
      v158 = v73;
      v159 = v74;
      v160 = v67;
LABEL_59:
      v76 = 6;
      if (!*((_DWORD *)this + 23))
        v76 = 4;
      v77 = *((_QWORD *)this + 16);
      if ((unint64_t)(v77 + 4) > *((_QWORD *)this + 17)
        || (v78 = *((_QWORD *)this + 14)) != 0 && *((_QWORD *)this + 13) + v76 > v78)
      {
        *((_WORD *)this + 408) = v75 | 0x20;
        CA::OGL::Context::array_flush((uint64_t)this);
        v77 = 0;
        *((_QWORD *)this + 12) = (char *)this + 818;
        *(_OWORD *)((char *)this + 104) = xmmword_18474E060;
      }
      v44 = v77;
      v45 = *((_QWORD *)this + 15);
      v46 = v45 + 48 * v77;
      *((_QWORD *)this + 16) = v77 + 4;
      CA::OGL::Context::array_indices((uint64_t)this, v77);
      v47 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
      *(float *)v46 = v62;
      *(float *)(v46 + 4) = v63;
      *(_QWORD *)(v46 + 8) = 0x3F80000000000000;
      *(float *)(v46 + 48) = v64;
      *(float *)(v46 + 52) = v63;
      *(_QWORD *)(v46 + 56) = 0x3F80000000000000;
      *(float *)(v46 + 96) = v64;
      *(float *)(v46 + 100) = v65;
      *(_QWORD *)(v46 + 104) = 0x3F80000000000000;
      *(float *)(v46 + 144) = v62;
      *(float *)(v46 + 148) = v65;
      *(_QWORD *)(v46 + 152) = 0x3F80000000000000;
      if (a5)
      {
        v79 = v45 + 48 * v44;
        *(float *)(v79 + 16) = v71;
        *(float *)(v79 + 20) = v70;
        *(float *)(v46 + 64) = v69;
        *(float *)(v46 + 68) = v70;
        *(float *)(v46 + 112) = v69;
        *(float *)(v46 + 116) = v68;
        *(float *)(v46 + 160) = v71;
        *(float *)(v46 + 164) = v68;
      }
      if (a6)
      {
        v80 = v45 + 48 * v44;
        *(float *)(v80 + 24) = v159;
        *(float *)(v80 + 28) = v160;
        *(float *)(v46 + 72) = v157;
        *(float *)(v46 + 76) = v160;
        *(float *)(v46 + 120) = v157;
        *(float *)(v46 + 124) = v158;
        *(float *)(v46 + 168) = v159;
        *(float *)(v46 + 172) = v158;
      }
      goto LABEL_69;
    }
    v107 = *(_DWORD *)a3;
    v106 = *((_DWORD *)a3 + 1);
    v108 = (double)*(int *)a3;
    v109 = (double)v106;
    v110 = (double)*((int *)a3 + 2) + v108;
    v111 = (double)*((int *)a3 + 3) + (double)v106;
    v112 = v64;
    v113 = v62;
    v114 = v64 <= v108 || v110 <= v113;
    v115 = v65;
    v116 = v114 || v115 <= v109;
    v117 = v63;
    if (v116 || v111 <= v117)
      return;
    if (a6)
    {
      if (v113 < v108)
      {
        v119 = (v108 - v113) / (float)(v64 - v62);
        v71 = v71 + (float)((float)(v69 - v71) * v119);
        v74 = v74 + (float)((float)(v72 - v74) * v119);
        v62 = (float)v107;
      }
      if (v110 < v112)
      {
        v120 = (v112 - v110) / (float)(v64 - v62);
        v69 = v69 + (float)((float)(v71 - v69) * v120);
        v72 = v72 + (float)((float)(v74 - v72) * v120);
        v64 = v110;
      }
      if (v117 < v109)
      {
        v121 = (v109 - v117) / (float)(v65 - v63);
        v70 = v70 + (float)((float)(v68 - v70) * v121);
        v67 = v67 + (float)((float)(v73 - v67) * v121);
        v63 = (float)v106;
      }
      v157 = v72;
      v159 = v74;
      v160 = v67;
      if (v111 >= v115)
      {
        v158 = v73;
        goto LABEL_59;
      }
      v122 = (v115 - v111) / (float)(v65 - v63);
      v68 = v68 + (float)((float)(v70 - v68) * v122);
      v158 = v73 + (float)((float)(v67 - v73) * v122);
    }
    else
    {
      v159 = v74;
      v160 = v67;
      v157 = v72;
      v158 = v73;
      if (a5)
      {
        if (v113 < v108)
        {
          v153 = (v108 - v113) / (float)(v64 - v62);
          v71 = v71 + (float)((float)(v69 - v71) * v153);
          v62 = (float)v107;
        }
        if (v110 < v112)
        {
          v154 = (v112 - v110) / (float)(v64 - v62);
          v69 = v69 + (float)((float)(v71 - v69) * v154);
          v64 = v110;
        }
        if (v117 < v109)
        {
          v155 = (v109 - v117) / (float)(v65 - v63);
          v70 = v70 + (float)((float)(v68 - v70) * v155);
          v63 = (float)v106;
        }
        if (v111 >= v115)
          goto LABEL_59;
        v156 = (v115 - v111) / (float)(v65 - v63);
        v68 = v68 + (float)((float)(v70 - v68) * v156);
      }
      else
      {
        if (v113 < v108)
          v62 = (float)v107;
        if (v110 < v112)
          v64 = v110;
        if (v117 < v109)
          v63 = (float)v106;
        if (v111 >= v115)
          goto LABEL_59;
      }
    }
    v65 = v111;
    goto LABEL_59;
  }
  if ((*((_BYTE *)a4 + 144) & 0x10) != 0)
  {
    v81 = *((double *)a2 + 2);
    v82 = *(double *)a2;
    if (v81 <= *(double *)a2)
      return;
    v83 = *((double *)a2 + 3);
    v84 = *((double *)a2 + 1);
    if (v83 <= v84)
      return;
    v161.f64[0] = *(float64_t *)a2;
    v161.f64[1] = v84;
    v163.f64[0] = v81;
    v163.f64[1] = v84;
    v165.f64[0] = v82;
    v165.f64[1] = v83;
    v167.f64[0] = v81;
    v167.f64[1] = v83;
    v168 = xmmword_18474DF50;
    v166 = (float64x2_t)xmmword_18474DF50;
    v164 = (float64x2_t)xmmword_18474DF50;
    v162 = (float64x2_t)xmmword_18474DF50;
    CA::Transform::apply_to_point4((uint64_t)a4, &v161, &v161, (const double *)4);
    v85 = *((_WORD *)this + 408);
    if ((v85 & 0x40) != 0)
    {
      v127 = 1.0;
      v128 = 1.0;
      if (fabs(v162.f64[1] + -1.0) >= 0.001)
      {
        if (v162.f64[1] <= 0.0)
          v128 = INFINITY;
        else
          v128 = 1.0 / v162.f64[1];
      }
      if (fabs(v164.f64[1] + -1.0) >= 0.001)
      {
        if (v164.f64[1] <= 0.0)
          v127 = INFINITY;
        else
          v127 = 1.0 / v164.f64[1];
      }
      v133 = 1.0;
      v134 = 1.0;
      if (fabs(v166.f64[1] + -1.0) >= 0.001)
      {
        if (v166.f64[1] <= 0.0)
          v134 = INFINITY;
        else
          v134 = 1.0 / v166.f64[1];
      }
      if (fabs(*((double *)&v168 + 1) + -1.0) >= 0.001)
      {
        if (*((double *)&v168 + 1) <= 0.0)
          v133 = INFINITY;
        else
          v133 = 1.0 / *((double *)&v168 + 1);
      }
      v136 = v161.f64[0] * v128;
      v137 = v161.f64[1] * v128;
      v138 = v163.f64[0] * v127;
      v139 = v163.f64[1] * v127;
      v140 = v165.f64[0] * v134;
      v141 = v165.f64[1] * v134;
      v142 = v167.f64[0] * v133;
      v143 = v167.f64[1] * v133;
      if (v136 >= v138)
        v144 = v138;
      else
        v144 = v136;
      if (v140 >= v142)
        v145 = v142;
      else
        v145 = v140;
      if (v144 >= v145)
        v144 = v145;
      if (v141 >= v143)
        v146 = v143;
      else
        v146 = v141;
      if (v141 > v143)
        v143 = v141;
      if (v137 >= v139)
        v147 = v139;
      else
        v147 = v137;
      if (v137 <= v139)
        v137 = v139;
      if (v147 >= v146)
        v148 = v146;
      else
        v148 = v147;
      if (v137 > v143)
        v143 = v137;
      v149 = *((_DWORD *)a3 + 1);
      v150 = (double)*(int *)a3;
      if (v144 >= v150)
      {
        if ((double)*((int *)a3 + 2) + v150 <= v144)
          return;
      }
      else
      {
        if (v136 > v138)
          v138 = v136;
        if (v140 <= v142)
          v151 = v142;
        else
          v151 = v140;
        if (v138 <= v151)
          v138 = v151;
        if (v138 <= v150)
          return;
      }
      v152 = (double)v149;
      if (v148 >= (double)v149)
      {
        if ((double)*((int *)a3 + 3) + v152 <= v148)
          return;
      }
      else if (v143 <= v152)
      {
        return;
      }
    }
    v86 = 6;
    if (!*((_DWORD *)this + 23))
      v86 = 4;
    v87 = *((_QWORD *)this + 16);
    if ((unint64_t)(v87 + 4) > *((_QWORD *)this + 17)
      || (v88 = *((_QWORD *)this + 14)) != 0 && *((_QWORD *)this + 13) + v86 > v88)
    {
      *((_WORD *)this + 408) = v85 | 0x20;
      CA::OGL::Context::array_flush((uint64_t)this);
      v87 = 0;
      *((_QWORD *)this + 12) = (char *)this + 818;
      *(_OWORD *)((char *)this + 104) = xmmword_18474E060;
    }
    v89 = *((_QWORD *)this + 15) + 48 * v87;
    *((_QWORD *)this + 16) = v87 + 4;
    v90 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v163), v164);
    v91 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v167), (float64x2_t)v168);
    v92 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v165), v166);
    *(float32x4_t *)v89 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v161), v162);
    *(float32x4_t *)(v89 + 48) = v90;
    *(float32x4_t *)(v89 + 96) = v91;
    *(float32x4_t *)(v89 + 144) = v92;
    if (*((_QWORD *)this + 12))
      CA::OGL::Context::array_indices((uint64_t)this, v87);
    v93 = *((_QWORD *)this + 15);
    v94 = *((_QWORD *)this + 16);
    if (a5)
    {
      v95 = *(float *)a5;
      v96 = *((_DWORD *)a5 + 1);
      v97 = *((_DWORD *)a5 + 2);
      v98 = *((_DWORD *)a5 + 3);
      v99 = v93 + 48 * v94;
      *(_DWORD *)(v99 - 176) = *(_DWORD *)a5;
      *(_DWORD *)(v99 - 172) = v96;
      *(_DWORD *)(v99 - 128) = v97;
      *(_DWORD *)(v99 - 124) = v96;
      *(_DWORD *)(v99 - 80) = v97;
      *(_DWORD *)(v99 - 76) = v98;
      *(float *)(v99 - 32) = v95;
      *(_DWORD *)(v99 - 28) = v98;
    }
    if (a6)
    {
      v100 = *(_DWORD *)a6;
      v101 = *((_DWORD *)a6 + 1);
      v102 = *((_DWORD *)a6 + 2);
      v103 = *((_DWORD *)a6 + 3);
      v104 = v94 - 4;
      v105 = v93 + 48 * v104;
      *(float *)(v105 + 24) = *a6;
      *(_DWORD *)(v105 + 28) = v101;
      *(_DWORD *)(v105 + 72) = v102;
      *(_DWORD *)(v105 + 76) = v101;
      *(_DWORD *)(v105 + 120) = v102;
      *(_DWORD *)(v105 + 124) = v103;
      *(_DWORD *)(v105 + 168) = v100;
      *(_DWORD *)(v105 + 172) = v103;
    }
    else
    {
      v104 = v94 - 4;
    }
    v129 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
    v130 = (_QWORD *)(v93 + 48 * v104);
    v130[4] = v129;
    v130[10] = v129;
    v130[16] = v129;
    v130[22] = v129;
    return;
  }
  v12 = *((double *)a2 + 1);
  v13 = *((double *)a2 + 2);
  v14 = *((double *)a2 + 3);
  if (v13 > *(double *)a2 && v14 > v12)
  {
    v16 = *((double *)a4 + 16);
    if ((*((_BYTE *)a4 + 144) & 8) == 0)
      v16 = 1.0;
    v17 = v16 * v12;
    v18 = v16 * *(double *)a2;
    v19 = -(v16 * v12);
    if ((*((_BYTE *)a4 + 144) & 4) != 0)
    {
      v17 = v16 * *(double *)a2;
      v18 = v19;
    }
    v20 = v16 * v14;
    v21 = v16 * v13;
    v22 = -(v16 * v14);
    if ((*((_BYTE *)a4 + 144) & 4) != 0)
      v23 = v21;
    else
      v23 = v20;
    if ((*((_BYTE *)a4 + 144) & 4) != 0)
      v21 = v22;
    if ((*((_BYTE *)a4 + 144) & 2) != 0)
      v24 = -v18;
    else
      v24 = v18;
    v25 = -v17;
    if ((*((_BYTE *)a4 + 144) & 2) != 0)
      v21 = -v21;
    if ((*((_BYTE *)a4 + 144) & 1) == 0)
      v25 = v17;
    v26 = *((double *)a4 + 12);
    v27 = *((double *)a4 + 13);
    v28 = v24 + v26;
    v29 = v25 + v27;
    if ((*((_BYTE *)a4 + 144) & 1) != 0)
      v23 = -v23;
    v30 = v21 + v26;
    v31 = v23 + v27;
    if (v30 >= v28)
      v32 = v30;
    else
      v32 = v28;
    if (v30 >= v28)
      v33 = v28;
    else
      v33 = v30;
    v161 = 0uLL;
    v171 = 0uLL;
    if (v31 >= v29)
      v34 = v23 + v27;
    else
      v34 = v29;
    v170 = 0uLL;
    if (v31 >= v29)
      v35 = v29;
    else
      v35 = v23 + v27;
    v169 = 0uLL;
    CA::OGL::simple_texcoords((__int32 *)a5, (int32x4_t *)&v161, &v171, (uint64_t)a4);
    CA::OGL::simple_texcoords((__int32 *)a6, &v170, &v169, (uint64_t)a4);
    v36 = *((_WORD *)this + 408);
    if ((v36 & 0x40) == 0)
    {
      v37 = v34;
      v38 = v32;
      v39 = v35;
      v40 = v33;
LABEL_39:
      v41 = 6;
      if (!*((_DWORD *)this + 23))
        v41 = 4;
      v42 = *((_QWORD *)this + 16);
      if ((unint64_t)(v42 + 4) > *((_QWORD *)this + 17)
        || (v43 = *((_QWORD *)this + 14)) != 0 && *((_QWORD *)this + 13) + v41 > v43)
      {
        *((_WORD *)this + 408) = v36 | 0x20;
        CA::OGL::Context::array_flush((uint64_t)this);
        v42 = 0;
        *((_QWORD *)this + 12) = (char *)this + 818;
        *(_OWORD *)((char *)this + 104) = xmmword_18474E060;
      }
      v44 = v42;
      v45 = *((_QWORD *)this + 15);
      v46 = v45 + 48 * v42;
      *((_QWORD *)this + 16) = v42 + 4;
      CA::OGL::Context::array_indices((uint64_t)this, v42);
      v47 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
      v48 = v40;
      v49 = v39;
      *(float *)v46 = v48;
      *(float *)(v46 + 4) = v49;
      *(_QWORD *)(v46 + 8) = 0x3F80000000000000;
      v50 = v38;
      *(float *)(v46 + 48) = v50;
      *(float *)(v46 + 52) = v49;
      *(_QWORD *)(v46 + 56) = 0x3F80000000000000;
      v51 = v37;
      *(float *)(v46 + 96) = v50;
      *(float *)(v46 + 100) = v51;
      *(_QWORD *)(v46 + 104) = 0x3F80000000000000;
      *(float *)(v46 + 144) = v48;
      *(float *)(v46 + 148) = v51;
      *(_QWORD *)(v46 + 152) = 0x3F80000000000000;
      if (a5)
      {
        v52 = v45 + 48 * v44;
        v53 = v171.i64[0];
        *(_DWORD *)(v52 + 16) = LODWORD(v161.f64[0]);
        *(_DWORD *)(v52 + 20) = v53;
        *(_DWORD *)(v46 + 64) = HIDWORD(v161.f64[0]);
        *(_DWORD *)(v46 + 68) = HIDWORD(v53);
        v54 = v171.i64[1];
        *(_DWORD *)(v46 + 112) = LODWORD(v161.f64[1]);
        *(_DWORD *)(v46 + 116) = v54;
        *(_DWORD *)(v46 + 160) = HIDWORD(v161.f64[1]);
        *(_DWORD *)(v46 + 164) = HIDWORD(v54);
      }
      if (a6)
      {
        v55 = v170.i32[1];
        v56 = v45 + 48 * v44;
        v57 = v169.i64[0];
        *(_DWORD *)(v56 + 24) = v170.i32[0];
        *(_DWORD *)(v56 + 28) = v57;
        *(_DWORD *)(v46 + 72) = v55;
        *(_DWORD *)(v46 + 76) = HIDWORD(v57);
        v58 = v170.i32[3];
        v59 = v169.i64[1];
        *(_DWORD *)(v46 + 120) = v170.i32[2];
        *(_DWORD *)(v46 + 124) = v59;
        *(_DWORD *)(v46 + 168) = v58;
        *(_DWORD *)(v46 + 172) = HIDWORD(v59);
      }
LABEL_69:
      *(_QWORD *)(v45 + 48 * v44 + 32) = v47;
      *(_QWORD *)(v46 + 80) = v47;
      *(_QWORD *)(v46 + 128) = v47;
      *(_QWORD *)(v46 + 176) = v47;
      return;
    }
    v40 = (double)*(int *)a3;
    v39 = (double)*((int *)a3 + 1);
    v38 = (double)*((int *)a3 + 2) + v40;
    v37 = (double)*((int *)a3 + 3) + v39;
    if (v32 > v40 && v33 < v38 && v34 > v39 && v35 < v37)
    {
      if (v33 >= v40)
      {
        v40 = v33;
      }
      else
      {
        v126 = (v40 - v33) / (v32 - v33);
        if (a5)
        {
          *(float *)v161.f64 = *(float *)v161.f64
                             + (float)((float)(*((float *)v161.f64 + 1) - *(float *)v161.f64) * v126);
          *((float *)&v161.f64[1] + 1) = *((float *)&v161.f64[1] + 1)
                                       + (float)((float)(*(float *)&v161.f64[1] - *((float *)&v161.f64[1] + 1)) * v126);
          *(float *)v171.i32 = *(float *)v171.i32 + (float)((float)(*(float *)&v171.i32[1] - *(float *)v171.i32) * v126);
          *(float *)&v171.i32[3] = *(float *)&v171.i32[3]
                                 + (float)((float)(*(float *)&v171.i32[2] - *(float *)&v171.i32[3]) * v126);
        }
        if (a6)
        {
          *(float *)&v169.i32[3] = *(float *)&v169.i32[3]
                                 + (float)((float)(*(float *)&v169.i32[2] - *(float *)&v169.i32[3]) * v126);
          *(float *)v170.i32 = *(float *)v170.i32 + (float)((float)(*(float *)&v170.i32[1] - *(float *)v170.i32) * v126);
          *(float *)&v170.i32[3] = *(float *)&v170.i32[3]
                                 + (float)((float)(*(float *)&v170.i32[2] - *(float *)&v170.i32[3]) * v126);
          *(float *)v169.i32 = *(float *)v169.i32 + (float)((float)(*(float *)&v169.i32[1] - *(float *)v169.i32) * v126);
        }
      }
      if (v32 <= v38)
      {
        v38 = v32;
      }
      else
      {
        v131 = (v32 - v38) / (v32 - v40);
        if (a5)
        {
          *(float32x2_t *)((char *)v161.f64 + 4) = vmla_n_f32(*(float32x2_t *)((char *)v161.f64 + 4), vsub_f32((float32x2_t)__PAIR64__(HIDWORD(v161.f64[1]), LODWORD(v161.f64[0])), *(float32x2_t *)((char *)v161.f64 + 4)), v131);
          *(float32x2_t *)((char *)v171.i64 + 4) = vmla_n_f32(*(float32x2_t *)((char *)v171.i64 + 4), vsub_f32((float32x2_t)__PAIR64__(v171.u32[3], v171.u32[0]), *(float32x2_t *)((char *)v171.i64 + 4)), v131);
        }
        if (a6)
        {
          *(float32x2_t *)((char *)v170.i64 + 4) = vmla_n_f32(*(float32x2_t *)((char *)v170.i64 + 4), vsub_f32((float32x2_t)__PAIR64__(v170.u32[3], v170.u32[0]), *(float32x2_t *)((char *)v170.i64 + 4)), v131);
          *(float32x2_t *)((char *)v169.i64 + 4) = vmla_n_f32(*(float32x2_t *)((char *)v169.i64 + 4), vsub_f32((float32x2_t)__PAIR64__(v169.u32[3], v169.u32[0]), *(float32x2_t *)((char *)v169.i64 + 4)), v131);
        }
      }
      if (v35 >= v39)
      {
        v39 = v35;
      }
      else
      {
        v132 = (v39 - v35) / (v34 - v35);
        if (a5)
        {
          *(float32x2_t *)&v161.f64[0] = vmla_n_f32(*(float32x2_t *)&v161.f64[0], vsub_f32((float32x2_t)vrev64_s32(*(int32x2_t *)&v161.f64[1]), *(float32x2_t *)&v161.f64[0]), v132);
          *(float32x2_t *)v171.i8 = vmla_n_f32(*(float32x2_t *)v171.i8, vsub_f32((float32x2_t)vrev64_s32((int32x2_t)v171.u64[1]), *(float32x2_t *)v171.i8), v132);
        }
        if (a6)
        {
          *(float32x2_t *)v170.i8 = vmla_n_f32(*(float32x2_t *)v170.i8, vsub_f32((float32x2_t)vrev64_s32((int32x2_t)v170.u64[1]), *(float32x2_t *)v170.i8), v132);
          *(float32x2_t *)v169.i8 = vmla_n_f32(*(float32x2_t *)v169.i8, vsub_f32((float32x2_t)vrev64_s32((int32x2_t)v169.u64[1]), *(float32x2_t *)v169.i8), v132);
        }
      }
      if (v34 <= v37)
      {
        v37 = v34;
      }
      else
      {
        v135 = (v34 - v37) / (v34 - v39);
        if (a5)
        {
          *(float32x2_t *)&v161.f64[1] = vmla_n_f32(*(float32x2_t *)&v161.f64[1], vsub_f32((float32x2_t)vrev64_s32(*(int32x2_t *)&v161.f64[0]), *(float32x2_t *)&v161.f64[1]), v135);
          v171.u64[1] = (unint64_t)vmla_n_f32((float32x2_t)v171.u64[1], vsub_f32((float32x2_t)vrev64_s32(*(int32x2_t *)v171.i8), (float32x2_t)v171.u64[1]), v135);
        }
        if (a6)
        {
          v170.u64[1] = (unint64_t)vmla_n_f32((float32x2_t)v170.u64[1], vsub_f32((float32x2_t)vrev64_s32(*(int32x2_t *)v170.i8), (float32x2_t)v170.u64[1]), v135);
          v169.u64[1] = (unint64_t)vmla_n_f32((float32x2_t)v169.u64[1], vsub_f32((float32x2_t)vrev64_s32(*(int32x2_t *)v169.i8), (float32x2_t)v169.u64[1]), v135);
        }
      }
      goto LABEL_39;
    }
  }
}

uint64_t CA::OGL::Context::array_indices(uint64_t this, __int16 a2)
{
  uint64_t v2;
  _WORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(this + 104);
  v3 = (_WORD *)(*(_QWORD *)(this + 96) + 2 * v2);
  v4 = *(_DWORD *)(this + 92);
  if (v4 == 1)
  {
    *v3 = a2;
    v3[1] = a2 + 1;
    v3[2] = a2 + 2;
    v3[3] = a2 + 2;
    v5 = 6;
    v6 = 5;
    v3[4] = a2 + 3;
  }
  else
  {
    if (v4)
      return this;
    *v3 = a2;
    v3[1] = a2 + 1;
    v3[2] = a2 + 2;
    a2 += 3;
    v5 = 4;
    v6 = 3;
  }
  v3[v6] = a2;
  *(_QWORD *)(this + 104) = v2 + v5;
  return this;
}

int32x4_t CA::OGL::simple_texcoords(__int32 *a1, int32x4_t *a2, int32x4_t *a3, uint64_t a4)
{
  char v4;
  __int32 *v5;
  __int32 *v6;
  int32x4_t result;
  char v8;
  int8x16_t v9;
  int8x16_t v10;

  if (a1)
  {
    v4 = *(_BYTE *)(a4 + 144);
    a2->i32[0] = *a1;
    if ((v4 & 4) != 0)
    {
      a3->i32[0] = a1[3];
      a2->i32[1] = *a1;
      v5 = a1 + 1;
      a3->i32[1] = a1[1];
      v6 = a1 + 2;
    }
    else
    {
      a3->i32[0] = a1[1];
      a2->i32[1] = a1[2];
      a3->i32[1] = a1[1];
      v5 = a1 + 3;
      v6 = a1;
    }
    a2->i32[2] = a1[2];
    a3->i32[2] = *v5;
    a2->i32[3] = *v6;
    result.i32[0] = a1[3];
    a3->i32[3] = result.i32[0];
    v8 = *(_BYTE *)(a4 + 144);
    if ((v8 & 2) != 0)
    {
      *a2 = vrev64q_s32(*a2);
      result = vrev64q_s32(*a3);
      *a3 = result;
      v8 = *(_BYTE *)(a4 + 144);
    }
    if ((v8 & 1) != 0)
    {
      v9 = (int8x16_t)vrev64q_s32(*a2);
      *(int8x16_t *)a2 = vextq_s8(v9, v9, 8uLL);
      v10 = (int8x16_t)vrev64q_s32(*a3);
      result = (int32x4_t)vextq_s8(v10, v10, 8uLL);
      *a3 = result;
    }
  }
  else
  {
    a2->i64[0] = 0;
    a2->i64[1] = 0;
    a3->i64[0] = 0;
    a3->i64[1] = 0;
  }
  return result;
}

uint64_t CA::Render::Update::fullfill_backdrops(uint64_t this, const CA::Shape *a2)
{
  uint64_t v3;
  uint64_t *i;
  int v5;
  __int128 v6;
  uint32x2_t v7;
  int32x2_t v8;
  uint32x2_t v9;
  int32x2_t v10;
  int32x2_t v11;
  int32x2_t v12;
  uint32x2_t v13;
  __int128 v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v3 = this;
    if ((a2 & 1) != 0)
    {
      if (a2 == (const CA::Shape *)1)
        return this;
    }
    else if (*((_DWORD *)a2 + 1) == 6)
    {
      return this;
    }
    for (i = *(uint64_t **)(this + 504); i; i = (uint64_t *)*i)
    {
      v5 = *((_DWORD *)i + 24);
      if ((v5 & 0x40000000) == 0)
      {
        v6 = *(_OWORD *)(*(_QWORD *)(i[1] + 256) + 48);
        v14 = v6;
        v7 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *(int32x2_t *)((char *)&v6 + 8));
        if ((vpmax_u32(v7, v7).u32[0] & 0x80000000) == 0)
        {
          v8 = *(int32x2_t *)(v3 + 200);
          v9 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v8);
          if ((vpmax_u32(v9, v9).u32[0] & 0x80000000) != 0
            || (v10 = *(int32x2_t *)(v3 + 192),
                v11 = vadd_s32(*(int32x2_t *)&v6, *(int32x2_t *)((char *)&v6 + 8)),
                *(int32x2_t *)&v6 = vmax_s32(*(int32x2_t *)&v6, v10),
                v12 = vsub_s32(vmin_s32(v11, vadd_s32(v10, v8)), *(int32x2_t *)&v6),
                v13 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v12),
                (vpmax_u32(v13, v13).u32[0] & 0x80000000) != 0))
          {
            *((_QWORD *)&v14 + 1) = 0;
          }
          else
          {
            *((int32x2_t *)&v6 + 1) = v12;
            v14 = v6;
          }
        }
        this = CA::Shape::contains((uint64_t)a2, (const CA::Bounds *)&v14);
        if ((_DWORD)this)
          *((_DWORD *)i + 24) = v5 | 0x40000000;
      }
    }
  }
  return this;
}

BOOL CA::Shape::contains(uint64_t this, const CA::Bounds *a2)
{
  int v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  int v7;
  char *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  char *v15;
  char *v17;
  int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if ((this & 1) != 0)
  {
    if (this != 1)
    {
      v19 = this >> 48;
      v20 = (int)((unint64_t)this >> 16) >> 16;
      v21 = this >> 17;
      v4 = (this >> 2) & 0x7FFF;
      goto LABEL_6;
    }
  }
  else if (*(_DWORD *)(this + 4) == 12)
  {
    v2 = *(_DWORD *)(this + 20);
    v3 = *(_DWORD *)(this + 32);
    v19 = *(_DWORD *)(this + 28);
    v20 = v2;
    v21 = v3 - v19;
    v4 = *(_DWORD *)(this + 36) - v2;
LABEL_6:
    v22 = v4;
    return CA::BoundsImpl::contains(&v19, a2);
  }
  v6 = *((_DWORD *)a2 + 2);
  if (!v6)
    return 0;
  v7 = *((_DWORD *)a2 + 3);
  if (!v7)
    return 0;
  if ((this & 1) != 0)
  {
    if (this != 1)
      goto LABEL_13;
    return 0;
  }
  if (*(_DWORD *)(this + 4) == 6)
    return 0;
LABEL_13:
  v5 = 0;
  v10 = *(_DWORD *)(this + 12);
  v8 = (char *)(this + 12);
  v9 = v10;
  if (v10 != 0x7FFFFFFF)
  {
    v11 = *((_DWORD *)a2 + 1);
    v12 = v11 + v7;
    if (v9 < v12)
    {
      v13 = *(_DWORD *)a2 + v6;
      while (v11 >= v9)
      {
        v14 = *((int *)v8 + 1);
        v15 = &v8[4 * v14];
        v9 = *(_DWORD *)v15;
        if (v11 < *(_DWORD *)v15 && (int)v14 >= 3)
        {
          v17 = v8 + 8;
          while (*(_DWORD *)a2 < *(_DWORD *)v17 || v13 > *((_DWORD *)v17 + 1))
          {
            v17 += 8;
            if (v17 >= v15)
              goto LABEL_27;
          }
          v11 = *(_DWORD *)v15;
          if (v12 <= v9)
            return 1;
        }
LABEL_27:
        v5 = 0;
        if (v9 != 0x7FFFFFFF)
        {
          v8 = v15;
          if (v9 < v12)
            continue;
        }
        return v5;
      }
      return 0;
    }
  }
  return v5;
}

BOOL CA::BoundsImpl::contains(_DWORD *a1, _DWORD *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  _BOOL4 v9;

  v2 = a1[2];
  if (v2 < 1)
    return 0;
  v3 = a1[3];
  if (v3 < 1)
    return 0;
  v4 = a2[2];
  if (v4 < 0)
    return 0;
  v5 = a2[3];
  if (v5 < 0)
    return 0;
  if (*a1 > *a2)
    return 0;
  v6 = a1[1];
  v7 = a2[1];
  if (v6 > v7)
    return 0;
  v9 = v6 + v3 >= v7 + v5;
  return *a1 + v2 >= *a2 + v4 && v9;
}

uint64_t CA::OGL::MetalContext::unbind_surface_impl(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(a2 + 208) = *(_DWORD *)(result + 2896);
  return result;
}

BOOL CA::Transform::is_isotropic(CA::Transform *this, double a2, uint64_t a3, uint64_t a4, double *a5)
{
  double v6;
  double v7;
  double v8;
  double v9;
  double v10[2];

  v10[1] = *(double *)MEMORY[0x1E0C80C00];
  if ((*((_BYTE *)this + 144) & 0x10) == 0)
    return 1;
  if (*((double *)this + 15) != 1.0)
    return 0;
  v9 = 0.0;
  v10[0] = 0.0;
  CA::Mat4Impl::mat4_get_scale(this, v10, &v9, a5);
  v6 = fabs(v10[0]);
  v7 = fabs(v9);
  if (v6 <= v7)
    v8 = v7;
  else
    v8 = v6;
  if (v6 >= v7)
    v6 = v7;
  return v8 / v6 <= 2.0;
}

double CA::OGL::Context::bind_square(CA::OGL::Context *this, unsigned int a2, BOOL a3, BOOL a4, float *a5)
{
  uint64_t v5;
  double result;

  v5 = *((_QWORD *)this + 2);
  *(_OWORD *)(v5 + 16 * a2 + 96) = xmmword_18474E210;
  *(_BYTE *)(v5 + a2 + 17) = 9;
  result = 0.00781250557;
  *(_QWORD *)a5 = 0x3F800000BF800000;
  return result;
}

double CA::OGL::`anonymous namespace'::rect_nine_part_source_xy(double *a1, CA::Transform *this, double *a3, double *a4, double *a5)
{
  double result;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18[2];

  v18[1] = *(double *)MEMORY[0x1E0C80C00];
  v17 = 0.0;
  v18[0] = 0.0;
  CA::Transform::get_scale_recip((uint64_t)this, v18, &v17);
  result = v18[0];
  v10 = a1[2] * 0.5;
  if (result + result < v10)
    v10 = v18[0] + v18[0];
  v11 = v17;
  v12 = a1[3] * 0.5;
  if (v11 + v11 < v12)
    v12 = v17 + v17;
  v13 = *a1;
  *a3 = *a1;
  v14 = a1[2] + v13;
  a3[1] = v13 + v10;
  a3[2] = v14 - v10;
  a3[3] = v14;
  v15 = a1[1];
  *a4 = v15;
  v16 = a1[3] + v15;
  a4[1] = v15 + v12;
  a4[2] = v16 - v12;
  a4[3] = v16;
  if (a5)
  {
    result = a1[3] * a1[2] / (v11 * result);
    *a5 = result;
  }
  return result;
}

uint64_t CA::Transform::get_scale_recip(uint64_t this, double *a2, double *a3)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  BOOL v9;

  if ((*(_BYTE *)(this + 144) & 0x10) != 0)
  {
    v4 = *(double *)this * *(double *)this + *(double *)(this + 8) * *(double *)(this + 8);
    v5 = *(double *)(this + 32) * *(double *)(this + 32) + *(double *)(this + 40) * *(double *)(this + 40);
    v6 = *(double *)(this + 120);
    v7 = 1.0;
    if (v6 != 1.0)
    {
      v8 = 1.0 / (v6 * v6);
      v4 = v8 * v4;
      v5 = v8 * v5;
    }
    v9 = v4 == 1.0 && v5 == 1.0;
    v3 = 1.0;
    if (!v9)
    {
      v7 = 1.0 / sqrt(v4);
      v3 = 1.0 / sqrt(v5);
    }
    if (a2)
      *a2 = v7;
    if (a3)
      goto LABEL_16;
  }
  else
  {
    if (a2)
      *a2 = *(double *)(this + 136);
    if (a3)
    {
      v3 = *(double *)(this + 136);
LABEL_16:
      *a3 = v3;
    }
  }
  return this;
}

uint64_t CA::OGL::ContentsGeometry::ContentsGeometry(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v12;
  int v13;
  uint64_t v14;
  CA::Transform *v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  float *v19;
  const double *v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  double v24;
  int32x2_t v30;
  int64x2_t v31;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  int32x2_t v37;
  unsigned int v38;
  int v39;
  __int16 v40;
  unsigned int v41;
  unsigned int v42;
  float v43;
  float v44;
  int v45;
  int v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  double v53;
  double v54;
  double v55;
  float32x2_t *v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  uint64_t v69;
  uint64_t v70;
  double *v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  float v78;
  float v79;
  float v80;
  float v81;
  double v82;
  double v83;
  double v84;
  double v85;
  float64x2_t v87;
  float64x2_t v88;
  uint64_t v89;
  uint64_t v90;
  const double *v91;
  double *v92;
  double *v93;
  const double *v94;
  const double *v95;
  float64x2_t v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  float64x2_t v106;
  int64x2_t v107;
  int8x16_t v108;
  float64x2_t v109;
  int32x4_t v110;
  _BOOL4 v111;
  uint64_t v112;
  double *v113;
  int v114;
  float v115;
  uint64_t v116;
  char v117;
  _QWORD *v118;
  __int128 v119;
  double *v120;
  double *v121;
  double v122;
  double v123;
  double v124;
  float64x2_t v125;
  double v126;
  double v127;
  double v128;
  float v129;
  float v130;
  float v131;
  float v132;
  uint64_t v133;
  float64x2_t v134;
  uint64_t v138;
  float v139;
  float v140;
  float v141;
  double v142;
  double v143;
  double v144;
  int8x16_t v145;
  float64x2_t v146;
  float64x2_t v147;
  __int128 v148;
  float64_t v149;
  float64_t v150;
  float64x2_t v151;
  __int128 v152;
  float64x2_t v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  uint64_t v162;
  int8x16_t v163[2];
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  int8x16_t v170;
  uint64_t v171;
  uint64_t v172;

  v172 = *MEMORY[0x1E0C80C00];
  v12 = *(_DWORD *)(a4 + 16);
  *(_DWORD *)a1 = v12;
  v13 = *(_DWORD *)(a4 + 20);
  *(_QWORD *)(a1 + 8) = 0;
  v14 = a1 + 8;
  *(_DWORD *)(a1 + 4) = v13;
  *(_QWORD *)(a1 + 16) = 0;
  *(double *)(a1 + 24) = (double)v12;
  *(double *)(a1 + 32) = (double)v13;
  v15 = (CA::Transform *)(a1 + 104);
  v16 = CA::Transform::operator=(a1 + 104, *(_QWORD *)(a3 + 24));
  *(_QWORD *)(a1 + 256) = 0x3FF0000000000000;
  v17 = *(_QWORD *)(a2 + 24);
  v18 = *(_QWORD *)(v17 + 128);
  if (v18)
  {
    v16.n128_u32[0] = *(_DWORD *)(v18 + 280);
  }
  else
  {
    v16.n128_u8[0] = *(_BYTE *)(v17 + 34);
    v16.n128_f32[0] = (float)v16.n128_u32[0];
  }
  *(double *)(a1 + 264) = v16.n128_f32[0];
  *(_BYTE *)(a1 + 272) = 1;
  *(_DWORD *)(a1 + 308) = 0;
  *(_DWORD *)(a1 + 312) = (*(unsigned __int16 *)(a2 + 40) >> 6);
  *(_DWORD *)(a1 + 316) = -1082130432;
  *(_BYTE *)(a1 + 336) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 112))(a4);
  *(_BYTE *)(a1 + 337) = 0;
  v21 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 338) = (*(_DWORD *)(v21 + 40) & 0x8000) != 0;
  *(_BYTE *)(a1 + 339) = (*(_QWORD *)(v21 + 40) & 0x4000) == 0;
  *(_BYTE *)(a1 + 340) = 0;
  v22 = *(_QWORD *)(v21 + 128);
  v23 = 0.0;
  if (v22)
    v23 = *(float *)(v22 + 228);
  v24 = v23;
  *(double *)(a1 + 424) = v24;
  *(double *)(a1 + 432) = v24;
  *(_BYTE *)(a1 + 491) = 0;
  *(_BYTE *)(a1 + 492) = (*(_DWORD *)(*(_QWORD *)(a2 + 16) + 24) & 0x400) != 0;
  *(_WORD *)(a1 + 493) = 0;
  *(_BYTE *)(a1 + 495) = 0;
  *(_BYTE *)(a1 + 496) = *(_QWORD *)(a4 + 48) == 0;
  __asm { FMOV            V16.2D, #1.0 }
  if (*(_BYTE *)(a5 + 12) == 50)
  {
    *(_BYTE *)(a1 + 494) = 1;
    v30 = *(int32x2_t *)(a5 + 24);
    v31.i64[0] = v30.i32[0];
    v31.i64[1] = v30.i32[1];
    __asm { FMOV            V3.2D, #1.0 }
    v33 = vdivq_f64(_Q3, *(float64x2_t *)(a1 + 24));
    v34 = vmulq_f64(vcvtq_f64_s64(v31), v33);
    *(float32x2_t *)(a1 + 416) = vcvt_f32_f64(v34);
    _Q3.f64[0] = *(float64_t *)(a5 + 32);
    v31.i64[0] = SLODWORD(_Q3.f64[0]);
    v31.i64[1] = SHIDWORD(_Q3.f64[0]);
    v35 = vcvtq_f64_s64(v31);
    *(float32x2_t *)(a1 + 408) = vcvt_f32_f64(vmulq_f64(v35, v33));
    v36 = vcvtq_f64_f32(vdiv_f32((float32x2_t)0x3F0000003F000000, vcvt_f32_u32(*(uint32x2_t *)(a4 + 16))));
    v37 = vadd_s32(*(int32x2_t *)&_Q3.f64[0], v30);
    v31.i64[0] = v37.i32[0];
    v31.i64[1] = v37.i32[1];
    *(float32x2_t *)(a1 + 392) = vcvt_f32_f64(vaddq_f64(v34, v36));
    *(float32x2_t *)(a1 + 400) = vcvt_f32_f64(vmlaq_f64(vnegq_f64(v36), v33, vcvtq_f64_s64(v31)));
    *(_BYTE *)(a1 + 491) = 1;
    *(float64_t *)a1 = _Q3.f64[0];
    *(_QWORD *)v14 = 0;
    *(_QWORD *)(v14 + 8) = 0;
    *(float64x2_t *)(a1 + 24) = v35;
    v21 = *(_QWORD *)(a2 + 24);
  }
  v171 = 0;
  v163[0] = (int8x16_t)xmmword_18474DF40;
  v163[1] = 0u;
  v164 = xmmword_18474DF50;
  v165 = 0u;
  v166 = 0u;
  v167 = xmmword_18474DF40;
  v168 = 0u;
  v169 = xmmword_18474DF50;
  v170 = _Q16;
  if ((*(_BYTE *)(v21 + 42) & 2) != 0)
    *(_DWORD *)(a1 + 308) |= 0x200u;
  v38 = *(_DWORD *)(a4 + 12);
  if ((v38 & 0x400) != 0)
    *(int8x16_t *)(a1 + 24) = vextq_s8(*(int8x16_t *)(a1 + 24), *(int8x16_t *)(a1 + 24), 8uLL);
  if ((v38 & 0x4000) != 0)
  {
    v39 = *(__int16 *)(a4 + 24);
    v40 = *(_WORD *)(a4 + 26);
    if (*(_DWORD *)(a4 + 24))
    {
LABEL_17:
      v41 = *(_DWORD *)(a4 + 16);
      v42 = *(_DWORD *)(a4 + 20);
      v43 = 1.0 / (float)v41;
      v44 = 1.0 / (float)v42;
      v45 = v41 - (v39 + *(__int16 *)(a4 + 28));
      v46 = v42 - (*(__int16 *)(a4 + 30) + v40);
      v47 = v43 * (float)v39;
      *(float *)(a1 + 276) = v47;
      v48 = v44 * (float)v40;
      *(float *)(a1 + 280) = v48;
      v49 = v43 * (float)(v45 + v39);
      *(float *)(a1 + 284) = v49;
      v50 = v44 * (float)(v46 + v40);
      *(float *)(a1 + 288) = v50;
      *(_DWORD *)(a1 + 308) |= 0x400u;
      *(double *)(a1 + 24) = (double)v45;
      *(double *)(a1 + 32) = (double)v46;
      v51 = v43 * 0.5;
      *(float *)(a1 + 392) = v47 + v51;
      v52 = v44 * 0.5;
      *(float *)(a1 + 396) = v48 + v52;
      *(float *)(a1 + 400) = v49 - v51;
      *(float *)(a1 + 404) = v50 - v52;
      *(_BYTE *)(a1 + 491) = 1;
      goto LABEL_18;
    }
    if (*(_WORD *)(a4 + 28) || *(_WORD *)(a4 + 30))
    {
      v40 = 0;
      goto LABEL_17;
    }
  }
LABEL_18:
  v53 = 1.0;
  if ((v38 & 0x2000) != 0)
  {
    v54 = *(float *)(a4 + 32);
    *(double *)(a1 + 256) = v54;
    *(double *)(a1 + 24) = *(double *)(a1 + 24) * v54;
    v53 = 1.0 / v54;
    *(double *)_Q16.i64 = v53;
  }
  v55 = *(double *)(a1 + 264);
  if (v55 != 1.0)
  {
    *(float64x2_t *)(a1 + 24) = vmulq_n_f64(*(float64x2_t *)(a1 + 24), 1.0 / v55);
    *(double *)_Q16.i64 = v53 * v55;
    *(double *)&_Q16.i64[1] = v55;
  }
  v56 = (float32x2_t *)(a1 + 276);
  v57 = *(_QWORD *)(v21 + 128);
  if (v57)
  {
    v58 = *(_QWORD *)(v57 + 40);
    if (v58)
    {
      v59 = *(_DWORD *)(a1 + 308);
      if ((v59 & 0x400) != 0)
      {
        v62 = vcvtq_f64_f32(*v56);
        v63 = vcvtq_f64_f32(vsub_f32(*(float32x2_t *)(a1 + 284), *(float32x2_t *)(a1 + 276)));
        v61 = *(float64x2_t *)(v58 + 24);
        v60 = *(float64x2_t *)(v58 + 40);
        *(float32x4_t *)v56->f32 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmlaq_f64(v62, v63, v61)), vmlaq_f64(v62, v63, v60));
      }
      else
      {
        v60 = *(float64x2_t *)(v58 + 40);
        v61 = *(float64x2_t *)(v58 + 24);
        *(float32x4_t *)v56->f32 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v61), v60);
        *(_DWORD *)(a1 + 308) = v59 | 0x400;
      }
      v64 = *(double *)(a1 + 32);
      *(double *)(a1 + 24) = *(double *)(a1 + 24) * (v60.f64[0] - v61.f64[0]);
      *(double *)(a1 + 32) = v64 * (*(double *)(v58 + 48) - *(double *)(v58 + 32));
    }
  }
  v145 = _Q16;
  v148 = 0uLL;
  v66 = *(double *)(a1 + 24);
  v65 = *(double *)(a1 + 32);
  v147.f64[0] = v66;
  v147.f64[1] = v65;
  if ((*(_DWORD *)(v21 + 36) & 0xF000) == 0x9000
    && *(double *)(v21 + 64) == 0.0
    && *(double *)(v21 + 72) == 0.0
    && (!v57 || !*(_QWORD *)(v57 + 32))
    && *(double *)(v21 + 80) == v66
    && *(double *)(v21 + 88) == v65)
  {
    __asm { FMOV            V0.2D, #1.0 }
    v148 = _Q0;
    v67 = 1.0;
    v68 = 1.0;
  }
  else
  {
    CA::Render::Layer::append_contents_transform(v21, (CA::Transform *)v163, &v147, &v148);
    v67 = *((double *)&v148 + 1);
    v68 = *(double *)&v148;
  }
  *(double *)(a1 + 320) = v68;
  *(double *)(a1 + 328) = v67;
  if (v68 != 1.0 || v67 != 1.0)
  {
    v69 = *(_QWORD *)(a2 + 24);
    v70 = *(_QWORD *)(v69 + 128);
    if (v70)
    {
      v71 = *(double **)(v70 + 48);
      if (v71)
      {
        *(_BYTE *)(a1 + 337) = 1;
        v73 = v71[3];
        v72 = v71[4];
        v75 = v71[5];
        v74 = v71[6];
        if ((*(_BYTE *)(v69 + 45) & 1) == 0)
        {
          if (v75 <= v73)
          {
            v76 = 0.5 / (double)*(int *)a1;
            v73 = v73 - v76;
            v75 = v76 + v75;
          }
          if (v74 <= v72)
          {
            v77 = 0.5 / (double)*(int *)(a1 + 4);
            v72 = v72 - v77;
            v74 = v77 + v74;
          }
        }
        v78 = v73;
        *(float *)(a1 + 376) = v78;
        v79 = v72;
        *(float *)(a1 + 380) = v79;
        v80 = v75;
        *(float *)(a1 + 384) = v80;
        v81 = v74;
        *(float *)(a1 + 388) = v81;
        v82 = *(double *)(a1 + 24);
        v83 = *(double *)(a1 + 32);
        v84 = v82 / v68;
        v85 = v83 / v67;
        *(double *)(a1 + 344) = v84 * v73;
        *(double *)(a1 + 352) = v85 * v72;
        *(double *)(a1 + 360) = v82 + v84 * (v75 - 1.0);
        *(double *)(a1 + 368) = v83 + v85 * (v74 - 1.0);
      }
    }
  }
  if ((v38 & 0x700) != 0)
  {
    v162 = 0;
    v153 = (float64x2_t)xmmword_18474DF40;
    v154 = 0u;
    v155 = xmmword_18474DF50;
    v156 = 0u;
    v157 = 0u;
    v158 = xmmword_18474DF40;
    v159 = 0u;
    v160 = xmmword_18474DF50;
    __asm { FMOV            V0.2D, #1.0 }
    v161 = _Q0;
    if ((~v38 & 0x200400) == 0 && ((v38 & 0x300) == 0 || (v38 & 0x300) == 0x300))
      goto LABEL_49;
    if ((v38 & 0x100) != 0)
    {
      v87 = CA::Transform::translate((CA::Transform *)&v153, 0.0, *(double *)(a1 + 32), 0.0);
      v87.f64[0] = 1.0;
      CA::Transform::scale(&v153, v87, -1.0, 1.0);
    }
    if ((v38 & 0x200) != 0)
    {
LABEL_49:
      v88 = CA::Transform::translate((CA::Transform *)&v153, *(double *)(a1 + 24), 0.0, 0.0);
      v88.f64[0] = -1.0;
      CA::Transform::scale(&v153, v88, 1.0, 1.0);
    }
    if ((v38 & 0x400) != 0)
    {
      CA::Transform::translate((CA::Transform *)&v153, *(double *)(a1 + 24), 0.0, 0.0);
      CA::Transform::rotate90((CA::Transform *)&v153, v89, v90, v91);
    }
    CA::Transform::concat_left((CA::Transform *)v163, &v153, (uint64_t)v19, v20);
    if ((*(_BYTE *)(a1 + 309) & 4) != 0)
      CA::OGL::unrotate_texcoords((CA::OGL *)(v38 >> 8), (int8x16_t *)(a1 + 276), v19);
    if (*(_BYTE *)(a1 + 337))
      CA::OGL::unrotate_texcoords((CA::OGL *)(v38 >> 8), (int8x16_t *)(a1 + 376), v19);
    if ((v38 & 0x400) != 0)
      *(int8x16_t *)(a1 + 24) = vextq_s8(*(int8x16_t *)(a1 + 24), *(int8x16_t *)(a1 + 24), 8uLL);
  }
  v92 = (double *)(a1 + 40);
  if ((~v38 & 0x104000) == 0 && !*(_BYTE *)(a1 + 337) && !*(_BYTE *)(a1 + 338))
  {
    v138 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 128);
    if ((!v138 || !*(_QWORD *)(v138 + 40)) && *(double *)&v148 == 1.0 && *((double *)&v148 + 1) == 1.0)
    {
      v139 = *(float *)(a1 + 284);
      if (v139 > 1.0)
      {
        *(double *)(a1 + 24) = *(double *)(a1 + 24)
                             * (float)((float)(1.0 - *(float *)(a1 + 276)) / (float)(v139 - *(float *)(a1 + 276)));
        *(_DWORD *)(a1 + 284) = 1065353216;
      }
      v140 = *(float *)(a1 + 288);
      v141 = *(float *)(a1 + 280);
      if (v140 > 1.0)
      {
        *(double *)(a1 + 32) = *(double *)(a1 + 32) * (float)((float)(1.0 - v141) / (float)(v140 - v141));
        *(_DWORD *)(a1 + 288) = 1065353216;
        v140 = 1.0;
      }
      if (v141 < 0.0)
      {
        v142 = *(double *)(a1 + 32);
        v143 = v142 * v141 / (float)(v140 - v141);
        *(double *)(a1 + 16) = *(double *)(a1 + 16) - v143;
        *(double *)(a1 + 32) = v143 + v142;
        *(_DWORD *)(a1 + 280) = 0;
      }
    }
  }
  CA::Transform::concat_left(v15, (float64x2_t *)v163, (uint64_t)v19, v20);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a1 + 24);
  CA::Rect::apply_transform((int8x16_t *)(a1 + 40), v15, v93);
  if ((*(_BYTE *)(*(_QWORD *)(a2 + 24) + 42) & 1) != 0
    && ((*(_BYTE *)(a1 + 248) & 0x10) == 0 || CA::Mat4Impl::mat4_is_rectilinear(v15, v94)))
  {
    v96.f64[0] = *v92;
    if (*v92 == trunc(*v92))
    {
      v98 = *(double *)(a1 + 48);
      v99 = *(double *)(a1 + 56);
      v97 = trunc(v98);
      if (v98 == v97 && v99 == trunc(v99))
      {
        v100 = *(double *)(a1 + 64);
        v97 = trunc(v100);
        if (v100 == v97)
          goto LABEL_75;
      }
    }
    else
    {
      v99 = *(double *)(a1 + 56);
    }
    v101 = *(double *)(a1 + 64);
    if (v99 >= v101)
      v102 = *(double *)(a1 + 64);
    else
      v102 = v99;
    if (v102 > 0.0)
    {
      v103 = *(double *)(a1 + 48);
      v104 = round(v96.f64[0]);
      v105 = round(v103);
      v96.f64[0] = v104 - v96.f64[0];
      CA::Transform::translate_right((float64x2_t *)v15, v96, v105 - v103, v97);
      *(double *)(a1 + 40) = v104;
      *(double *)(a1 + 48) = v105;
      *(double *)(a1 + 56) = v99;
      *(double *)(a1 + 64) = v101;
    }
  }
LABEL_75:
  if (a6)
  {
    v106 = *(float64x2_t *)(a1 + 56);
    v107 = vceqzq_f64(v106);
    if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v107, 1), (int8x16_t)v107).u64[0] & 0x8000000000000000) != 0
      || (v108 = vorrq_s8((int8x16_t)vcltzq_f64(v106), (int8x16_t)vcgezq_f64(v106)),
          (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v108), 1), v108).u64[0] & 0x8000000000000000) != 0))
    {
      v153 = 0uLL;
    }
    else
    {
      v109 = *(float64x2_t *)(a1 + 40);
      v110 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v109, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
      v153 = (float64x2_t)vuzp1q_s32(v110, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v109, v106), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v110));
    }
    v111 = CA::Shape::intersects(*(_QWORD *)(a3 + 8), (int32x2_t *)&v153);
    *(_BYTE *)(a1 + 272) = v111;
    if (v111)
    {
      v112 = CA::OGL::transform_filter_bits((float64x2_t *)v15, v94, *(double *)v145.i64, *(double *)&v145.i64[1]);
      v114 = *(_DWORD *)(a1 + 308) | CA::OGL::rect_filter_bits((float64x2_t *)v15, v112, v113, *(float64x2_t *)(a1 + 8), *(float64x2_t *)(a1 + 24), v145, *(double *)&v145.i64[1]);
      *(_DWORD *)(a1 + 308) = v114;
      if ((*(_BYTE *)(a6 + 416) & 2) != 0)
      {
        v114 ^= 0x800u;
        *(_DWORD *)(a1 + 308) = v114;
      }
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + 24) & 1) != 0)
        *(_DWORD *)(a1 + 308) = v114 ^ 0x800;
    }
  }
  if (*(_BYTE *)(a1 + 491)
    && !*(_BYTE *)(a1 + 494)
    && (*(_DWORD *)(a1 + 308) & 0x800) == ((*(_DWORD *)(a4 + 12) >> 11) & 1))
  {
    v115 = 1.0 - *(float *)(a1 + 396);
    *(float *)(a1 + 396) = 1.0 - *(float *)(a1 + 404);
    *(float *)(a1 + 404) = v115;
  }
  if (*(double *)(a1 + 424) == 0.0
    || (*(_QWORD *)(a2 + 32) & 0x300007FE0) != 0x100
    || *(_BYTE *)(a1 + 337)
    || *(_BYTE *)(a1 + 338)
    || (v116 = *(_QWORD *)(a2 + 24), (*(_BYTE *)(v116 + 40) & 0x40) == 0)
    || (v171 & 0x10) != 0 && !CA::Mat4Impl::mat4_is_rectilinear((CA::Mat4Impl *)v163, v94))
  {
LABEL_118:
    v117 = 0;
    goto LABEL_119;
  }
  if ((~*(_DWORD *)(v116 + 36) & 0xF0000) == 0
    || (v117 = 0, *(double *)v163[0].i64 > 0.0) && *((double *)&v164 + 1) > 0.0)
  {
    v118 = *(_QWORD **)(v116 + 128);
    if (!v118 || !v118[9])
    {
      v119 = *(_OWORD *)(v116 + 80);
      v153 = *(float64x2_t *)(v116 + 64);
      v154 = v119;
      CA::Transform::invert(v163, (uint64_t)v94, v95);
      CA::Mat4Impl::mat4_apply_to_rect((float64x2_t *)v163, (int8x16_t *)&v153, v120);
      v151 = v153;
      v152 = v154;
      v122 = *((double *)&v154 + 1);
      if (*(double *)&v154 <= *((double *)&v154 + 1))
        v123 = *((double *)&v154 + 1);
      else
        v123 = *(double *)&v154;
      if (v123 < 1.79769313e308)
      {
        v124 = *(double *)&v154 >= *((double *)&v154 + 1) ? *((double *)&v154 + 1) : *(double *)&v154;
        if (v124 > 0.0)
        {
          v151 = vaddq_f64(v153, (float64x2_t)vdupq_n_s64(0x3F50624DD2F1A9FCuLL));
          *(double *)&v152 = *(double *)&v154 + -0.002;
          *((double *)&v152 + 1) = *((double *)&v154 + 1) + -0.002;
          if (*(double *)&v154 + -0.002 <= 0.0 || *((double *)&v154 + 1) + -0.002 <= 0.0)
            v152 = 0uLL;
        }
      }
      v144 = *(double *)&v154;
      v146 = v153;
      if ((*(_BYTE *)(a1 + 312) & 0xF) == 0 || CA::BoundsImpl::contains((double *)v14, v151.f64))
      {
        v149 = 0.0;
        v150 = 0.0;
        CA::Transform::get_scale((CA::Mat4Impl *)v163, &v150, &v149, v121);
        v125.f64[0] = v150;
        v125.f64[1] = v149;
        *(float64x2_t *)(a1 + 424) = vmulq_f64(*(float64x2_t *)(a1 + 424), v125);
        v125.f64[0] = *(float64_t *)(a1 + 8);
        v126 = *(double *)(a1 + 16);
        v127 = *(double *)(a1 + 24);
        v128 = *(double *)(a1 + 32);
        v129 = (v146.f64[0] - v125.f64[0]) / v127;
        *(float *)(a1 + 292) = v129;
        v130 = (v146.f64[1] - v126) / v128;
        *(float *)(a1 + 296) = v130;
        v131 = (v146.f64[0] - v125.f64[0] + v144) / v127;
        *(float *)(a1 + 300) = v131;
        v132 = (v146.f64[1] - v126 + v122) / v128;
        *(float *)(a1 + 304) = v132;
        *(float64_t *)(a1 + 72) = v125.f64[0];
        *(double *)(a1 + 80) = v126;
        *(double *)(a1 + 88) = v127;
        *(double *)(a1 + 96) = v128;
        *(float64x2_t *)(a1 + 8) = v146;
        *(double *)(a1 + 24) = v144;
        *(double *)(a1 + 32) = v122;
        *(_DWORD *)(a1 + 440) = *(_WORD *)(v116 + 38) & 0xF;
        *(_DWORD *)(a1 + 444) = *(_DWORD *)(v116 + 40) & 3;
        if (v118)
        {
          *(_QWORD *)(a1 + 448) = v118[7];
          v133 = v118[8];
          if (v133)
          {
            v134 = 0uLL;
            _Q1 = 0uLL;
            if (*(_DWORD *)(v133 + 16) >= 4u)
            {
              _Q1 = *(float64x2_t *)(v133 + 24);
              v134 = vsubq_f64(*(float64x2_t *)(v133 + 40), _Q1);
            }
            goto LABEL_137;
          }
        }
        else
        {
          *(_QWORD *)(a1 + 448) = 0;
        }
        __asm { FMOV            V1.2D, #0.5 }
        v134 = 0uLL;
LABEL_137:
        *(float64x2_t *)(a1 + 456) = _Q1;
        *(float64x2_t *)(a1 + 472) = v134;
        *(_BYTE *)(a1 + 489) = (*(_QWORD *)(v116 + 40) & 0x20000000000) != 0;
        *(_BYTE *)(a1 + 488) = *(_BYTE *)(*(_QWORD *)(a2 + 16) + 24) & 1;
        v117 = 1;
        goto LABEL_119;
      }
    }
    goto LABEL_118;
  }
LABEL_119:
  *(_BYTE *)(a1 + 490) = v117;
  return a1;
}

int32x4_t *CA::Bounds::set_exterior(int32x4_t *this, const Rect *a2, float64x2_t a3, float64x2_t a4)
{
  int64x2_t v4;
  int8x16_t v5;
  float64x2_t v6;
  float64x2_t v7;
  int32x4_t v8;

  v4 = vceqzq_f64(a4);
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v4, 1), (int8x16_t)v4).u64[0] & 0x8000000000000000) != 0
    || (v5 = vorrq_s8((int8x16_t)vcltzq_f64(a4), (int8x16_t)vcgezq_f64(a4)),
        (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v5), 1), v5).u64[0] & 0x8000000000000000) != 0))
  {
    this->i64[0] = 0;
    this->i64[1] = 0;
  }
  else
  {
    v6 = vmaxnmq_f64(a3, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000));
    v7 = vminnmq_f64(vaddq_f64(a3, a4), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL));
    v8 = (int32x4_t)vcvtmq_s64_f64(v6);
    *this = vuzp1q_s32(v8, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(v7), (int64x2_t)v8));
  }
  return this;
}

_QWORD *CA::OGL::prepare_layers(uint64_t a1, const CA::Render::TransitionSubclass *a2, _QWORD **a3, uint64_t a4, int a5, _BYTE *a6, _BYTE *a7)
{
  _QWORD *v7;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;

  v7 = *a3;
  if (*a3 == a3)
    return 0;
  v15 = 0;
  do
  {
    v16 = (_QWORD *)CA::OGL::prepare_layer(a1, (uint64_t)v7, a2, a4, (unint64_t)(v15 == 0) << 29, a5);
    if (v16)
    {
      *v16 = v15;
      v17 = v16[13];
      *a7 |= (*(_DWORD *)(v17 + 220) & 0x300000) != 0;
      *a6 |= (*(_DWORD *)(v17 + 220) & 0x800000) != 0;
      v15 = v16;
    }
    v7 = (_QWORD *)*v7;
  }
  while (v7 != a3);
  return v15;
}

uint64_t CA::OGL::prepare_layer(uint64_t a1, uint64_t a2, const CA::Render::TransitionSubclass *a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v14;
  _UNKNOWN **v15;
  int v16;
  _BOOL4 v17;
  int32x2_t v18;
  uint32x2_t v19;
  int32x2_t v20;
  uint32x2_t v21;
  uint32x2_t v22;
  uint64_t v23;
  const double *v24;
  const double *v25;
  double *v26;
  const double *v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const double *v33;
  double *v34;
  __int128 v35;
  float64x2_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  float64x2_t v41;
  float64x2_t v42;
  double scale;
  double v47;
  const double *v48;
  uint64_t v49;
  uint64_t v50;
  const double *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  malloc_zone_t *malloc_zone;
  _OWORD *v58;
  __int128 v59;
  float64x2_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  CA::Mat4Impl *v69;
  CA::Mat4Impl *v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  double v86;
  double v87;
  double v88;
  double v89;
  unsigned int v90;
  int v91;
  double v92;
  __int16 v93;
  float64x2_t v94;
  __int16 v95;
  __int16 v96;
  CA::Mat4Impl *v97;
  double v98;
  uint64_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  uint64_t v107;
  uint64_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  _QWORD *v115;
  uint64_t v116;
  int v117;
  int v118;
  CA::Mat4Impl *v119;
  int v120;
  _QWORD *i;
  __int16 v122;
  uint64_t v123;
  int v124;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unsigned int v130;
  unsigned int v131;
  uint64_t v132;
  uint64_t v133;
  CA::OGL::ImagingNode *v134;
  uint64_t v135;
  uint64_t v136;
  __int16 v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  const double *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  const double *v146;
  const double *v147;
  float64x2_t *j;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64_t v153;
  uint64_t v154;
  float v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  double *v159;
  double *v160;
  double v161;
  double v162;
  double v163;
  double v164;
  double v165;
  double v166;
  double v167;
  float v168;
  int8x16_t *v169;
  __int32 v170;
  __int32 v171;
  int8x16_t *v172;
  uint64_t v173;
  __int128 v174;
  _DWORD *v175;
  __int16 v177;
  BOOL v178;
  double v179;
  BOOL v181;
  float64x2_t v184;
  double v185;
  float64x2_t v186;
  float64x2_t v187;
  __int128 v188;
  float64x2_t v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  float64x2_t v195;
  uint64_t v196;
  uint64_t v197;
  __int128 v198;
  float64x2_t *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  __int128 v210;
  float64x2_t v211;
  __int128 v212;
  float64x2_t v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  uint64_t v236;
  uint64_t v237;

  v237 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a2 + 32);
  if (!v6)
    return 0;
  v8 = *(_QWORD *)(a2 + 24);
  if ((v8 & 0x18) != 0 && (*(_QWORD *)(a2 + 24) & 0x1000) == 0)
    return 0;
  if ((v8 & 0x81000) == 0)
  {
    v18 = *(int32x2_t *)(a1 + 40);
    v19 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v18);
    if ((vpmax_u32(v19, v19).u32[0] & 0x80000000) != 0)
      return 0;
    v20 = *(int32x2_t *)(a2 + 184);
    v21 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v20);
    if ((vpmax_u32(v21, v21).u32[0] & 0x80000000) != 0)
      return 0;
    v22 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, vsub_s32(vmin_s32(vadd_s32(*(int32x2_t *)(a1 + 32), v18), vadd_s32(*(int32x2_t *)(a2 + 176), v20)), vmax_s32(*(int32x2_t *)(a1 + 32), *(int32x2_t *)(a2 + 176))));
    if ((vpmax_u32(v22, v22).u32[0] & 0x80000000) != 0)
      return 0;
  }
  if ((a5 & 0x4000000) != 0 || (v14 = *(_QWORD *)(a2 + 120)) == 0)
  {
    v23 = CA::OGL::Renderer::alloc_layer(a1, a2, (uint64_t)a3, a4);
    *(_QWORD *)(v23 + 32) = a5;
    v28 = CA::OGL::prepare_layer_image((_QWORD *)a1, v23, (const CA::Transform *)a4, v24);
  }
  else
  {
    v15 = CA::Render::Transition::subclass(*(CA::Render::Transition **)(a2 + 120), a2, a3);
    if (v15)
    {
      v16 = (*((uint64_t (**)(_UNKNOWN **, uint64_t))*v15 + 6))(v15, v14);
      v17 = 0;
    }
    else
    {
      v17 = *(_QWORD *)(v14 + 32) == 0;
      if (*(_QWORD *)(v14 + 32))
        v16 = 3;
      else
        v16 = 0;
    }
    v203 = 0;
    v204 = 0;
    *(_QWORD *)&v214 = 0;
    v212 = 0u;
    v213 = 0u;
    v210 = 0u;
    v211 = 0u;
    v208 = 0u;
    v209 = 0u;
    v206 = 0u;
    v207 = 0u;
    v205 = 0u;
    v201 = 0;
    v202 = 0;
    v196 = 0;
    v197 = 0;
    v198 = *(_OWORD *)(a4 + 8);
    LODWORD(v204) = *(_DWORD *)(a4 + 64);
    v29 = *(_WORD *)(a4 + 68) & 0x500 | 1;
    WORD2(v204) = v29;
    v31 = *(_QWORD *)(a4 + 24);
    v30 = *(_QWORD *)(a4 + 32);
    v199 = (float64x2_t *)v31;
    v200 = v30;
    v194 = 0u;
    v195 = 0u;
    v192 = 0u;
    v193 = 0u;
    v190 = 0u;
    v191 = 0u;
    v188 = 0u;
    v189 = 0u;
    v187 = 0u;
    if (CA::OGL::test_source_requirement(v16, (CA::Mat4Impl *)v31))
    {
      v35 = *(_OWORD *)(v31 + 16);
      v36 = *(float64x2_t *)(v31 + 32);
      v37 = *(_OWORD *)(v31 + 48);
      v187 = *(float64x2_t *)v31;
      v188 = v35;
      v189 = v36;
      v190 = v37;
      v38 = *(_OWORD *)(v31 + 80);
      v39 = *(_OWORD *)(v31 + 96);
      v40 = *(_OWORD *)(v31 + 112);
      v191 = *(_OWORD *)(v31 + 64);
      v192 = v38;
      v193 = v39;
      v194 = v40;
      v195 = *(float64x2_t *)(v31 + 128);
      LOBYTE(v196) = *(_BYTE *)(v31 + 144) & 0x1F;
      CA::Transform::invert((int8x16_t *)&v187, v32, v33);
    }
    else
    {
      v41 = (float64x2_t)xmmword_18474DF40;
      v205 = (float64x2_t)xmmword_18474DF40;
      v206 = 0u;
      v42 = (float64x2_t)xmmword_18474DF50;
      v207 = (float64x2_t)xmmword_18474DF50;
      v208 = 0u;
      v209 = 0u;
      v210 = xmmword_18474DF40;
      v211 = 0u;
      v212 = xmmword_18474DF50;
      __asm { FMOV            V0.2D, #1.0 }
      v213 = _Q0;
      LOBYTE(v214) = 0;
      v199 = &v205;
      WORD2(v204) = v29 & 0xFC01 | 0x200;
      v187 = (float64x2_t)xmmword_18474DF40;
      v189 = (float64x2_t)xmmword_18474DF50;
      v190 = 0u;
      v191 = 0u;
      v192 = xmmword_18474DF40;
      v194 = xmmword_18474DF50;
      v195 = _Q0;
      if (v16 != 7)
      {
        if ((*(_BYTE *)(v31 + 144) & 0x10) != 0)
        {
          scale = CA::Mat4Impl::mat4_get_scale((CA::Mat4Impl *)v31, 0, 0, v34);
          v42 = (float64x2_t)xmmword_18474DF50;
          v41 = (float64x2_t)xmmword_18474DF40;
        }
        else
        {
          scale = *(double *)(v31 + 128);
        }
        if (scale != 1.0)
        {
          v213.f64[0] = scale;
          v213.f64[1] = 1.0 / scale;
          LOBYTE(v214) = 8;
          v205 = vmulq_n_f64(v41, scale);
          v207 = vmulq_n_f64(v42, scale);
        }
        v47 = 1.0 / scale;
        if (1.0 / scale != 1.0)
        {
          v195.f64[0] = 1.0 / scale;
          v195.f64[1] = scale;
          LOBYTE(v196) = 8;
          v187 = vmulq_n_f64(v41, v47);
          v189 = vmulq_n_f64(v42, v47);
        }
      }
    }
    v23 = CA::OGL::Renderer::alloc_layer(a1, a2, (uint64_t)a3, (uint64_t)&v197);
    CA::OGL::prepare_layer_image((_QWORD *)a1, v23, (const CA::Transform *)&v197, v48);
    v49 = *(_QWORD *)(a2 + 24);
    if ((v49 & 0x4000000) == 0 && *(_DWORD *)(v14 + 72))
      *(_QWORD *)(v23 + 104) = CA::OGL::cache_node(a1, v23, (_QWORD *)(v14 + 72), *(_QWORD *)(v23 + 104));
    v50 = CA::OGL::Renderer::alloc_layer(a1, *(_QWORD *)(a2 + 136), (uint64_t)a3, (uint64_t)&v197);
    *(_QWORD *)(v50 + 32) = 0x4000000;
    CA::OGL::prepare_layer_image((_QWORD *)a1, v50, (const CA::Transform *)&v197, v51);
    if ((v49 & 0x4000000) == 0 && *(_DWORD *)(v14 + 64))
      *(_QWORD *)(v50 + 104) = CA::OGL::cache_node(a1, v50, (_QWORD *)(v14 + 64), *(_QWORD *)(v50 + 104));
    v52 = *(_QWORD *)(v23 + 104);
    if (v17)
    {
      v53 = CA::OGL::combine_node((uint64_t **)a1, v23, 7, a4, *(_QWORD *)(v23 + 104), *(CA::OGL::ImagingNode **)(v50 + 104), *(float *)(v14 + 48), *(float *)(v14 + 48), *(float *)(v14 + 48), *(float *)(v14 + 48));
      *(_QWORD *)(v23 + 104) = v53;
      *(_DWORD *)(v53 + 220) = *(_DWORD *)(v53 + 220) & 0xFFFE0000 | 0x20;
    }
    else
    {
      v54 = *(_QWORD *)(v50 + 104);
      v55 = *(_QWORD *)(a1 + 72);
      if (v55)
        *(_QWORD *)(a1 + 72) = *(_QWORD *)v55;
      else
        v55 = x_heap_malloc_small_(*(uint64_t **)(a1 + 56), 0xF8uLL);
      *(_QWORD *)(v55 + 48) = 0;
      *(_QWORD *)(v55 + 192) = 0;
      *(_QWORD *)(v55 + 200) = 0;
      *(_DWORD *)(v55 + 208) = 0;
      *(_WORD *)(v55 + 212) = *(_WORD *)(v55 + 212) & 0xC000 | 1;
      v56 = *(_DWORD *)(v55 + 220) & 0xFC000000;
      *(_DWORD *)(v55 + 216) = *(_DWORD *)(v55 + 216) & 0xFFC00000 | 0xF;
      *(_DWORD *)(v55 + 220) = v56;
      *(_QWORD *)(v55 + 16) = v23;
      *(_QWORD *)(v55 + 24) = v54;
      *(_QWORD *)(v55 + 32) = v52;
      *(_DWORD *)(v55 + 136) = -1;
      *(_QWORD *)v55 = &off_1E1595088;
      *(_QWORD *)(v55 + 8) = a1;
      *(_QWORD *)(v55 + 224) = v14;
      malloc_zone = (malloc_zone_t *)get_malloc_zone();
      v58 = malloc_type_zone_malloc(malloc_zone, 0x98uLL, 0x8BB15036uLL);
      if (v58)
      {
        v59 = v188;
        v60 = v189;
        v61 = v190;
        *v58 = v187;
        v58[1] = v59;
        v58[2] = v60;
        v58[3] = v61;
        v62 = v192;
        v63 = v193;
        v64 = v194;
        v58[4] = v191;
        v58[5] = v62;
        v58[6] = v63;
        v58[7] = v64;
        v58[8] = v195;
        *((_BYTE *)v58 + 144) = v58[9] & 0xE0 | v196 & 0x1F;
      }
      *(_QWORD *)(v55 + 232) = v58;
      CA::OGL::init_gstate(v55 + 56, a4);
      *(_DWORD *)(v55 + 220) = (*(_DWORD *)(v55 + 220) & 0xFFEE0000 | 0x100040) - 32;
      *(_QWORD *)(v23 + 104) = v55;
    }
    *(_QWORD *)(v23 + 120) = v50;
    *(_QWORD *)(v50 + 104) = 0;
    v28 = *(_QWORD *)(v23 + 104) + 56;
  }
  v65 = *(_QWORD *)(v23 + 32);
  if ((v65 & 0x4000000) != 0)
  {
    LOBYTE(v73) = 1;
    v74 = v28;
    goto LABEL_169;
  }
  v66 = *(_QWORD *)(v23 + 16);
  v67 = *(_QWORD *)(v23 + 24);
  if (*(_QWORD *)(v66 + 128))
  {
    if ((v65 & 0x2C0000) != 0 || (*(_BYTE *)(v66 + 25) & 0x20) == 0)
    {
      *(_QWORD *)(v23 + 32) = v65 | 2;
      goto LABEL_49;
    }
LABEL_108:
    v77 = 0;
    v73 = 0;
    goto LABEL_122;
  }
  if ((*(_BYTE *)(v67 + 40) & 0x40) == 0)
    goto LABEL_108;
  if ((v65 & 0x2C0000) != 0)
    goto LABEL_49;
  if ((*(_BYTE *)(v66 + 25) & 0x20) != 0)
    goto LABEL_108;
  if ((v65 & 0x300007FE0) != 0x100
    || (v65 & 0x10) == 0
    || (v75 = *(_QWORD *)(v66 + 48)) == 0
    || (v76 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v75 + 80))(*(_QWORD *)(v66 + 48))) == 0)
  {
    if ((v65 & 0x300003F40) == 0)
      goto LABEL_108;
    goto LABEL_49;
  }
  v236 = 0;
  v234 = 0u;
  v235 = 0u;
  v232 = 0u;
  v233 = 0u;
  v230 = 0u;
  v231 = 0u;
  v228 = 0u;
  v229 = 0u;
  v226 = 0u;
  v227 = 0u;
  v224 = 0u;
  v225 = 0u;
  v222 = 0u;
  v223 = 0u;
  v220 = 0u;
  v221 = 0u;
  v218 = 0u;
  v219 = 0u;
  v216 = 0u;
  v217 = 0u;
  v214 = 0u;
  v215 = 0u;
  v212 = 0u;
  v213 = 0u;
  v210 = 0u;
  v211 = 0u;
  v208 = 0u;
  v209 = 0u;
  v206 = 0u;
  v207 = 0u;
  v205 = 0u;
  CA::OGL::ContentsGeometry::ContentsGeometry((uint64_t)&v205, v23, a4, v76, v75, 0);
  v77 = 0;
  if ((v65 & 0x300003F40) == 0)
  {
    v73 = 0;
    goto LABEL_122;
  }
  v73 = 0;
  if (!BYTE10(v235))
  {
LABEL_49:
    v68 = *(_QWORD *)(v23 + 32);
    if ((*(_BYTE *)(v67 + 40) & 0x40) != 0)
    {
      if ((v68 & 0x1000000) != 0
        || ((v69 = *(CA::Mat4Impl **)(v66 + 56)) != 0 && !CA::Mat4Impl::mat4_is_rectilinear(v69, v25)
         || (v70 = *(CA::Mat4Impl **)(a4 + 24), (*((_BYTE *)v70 + 144) & 0x10) != 0)
         && !CA::Mat4Impl::mat4_is_rectilinear(v70, v25))
        && ((v68 & 0x300007AE0) != 0
         || (v68 & 0x100) != 0 && (v71 = (unsigned __int16)*(_DWORD *)(v67 + 36) >> 12, v71 != 9) && v71 != 10))
      {
        if ((*(_WORD *)(v23 + 40) & 0x3C0) != 0)
        {
          v72 = 1;
        }
        else
        {
          v207 = 0u;
          v208 = 0u;
          v205 = 0u;
          v206 = 0u;
          CA::OGL::map_layer_corners(v23, a4, v205.f64);
          v78 = 0;
          v72 = 0x8000000;
          do
          {
            if ((*(_QWORD *)&v205.f64[v78] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
              || (*(_QWORD *)&v205.f64[v78 + 1] & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
            {
              v72 = 1;
            }
            v78 += 2;
          }
          while (v78 != 8);
          v68 = *(_QWORD *)(v23 + 32);
        }
        v68 |= v72;
        *(_QWORD *)(v23 + 32) = v68;
      }
      if ((*(_WORD *)(v23 + 40) & 0x3C0) != 0 && (v68 & 1) == 0)
      {
        v79 = *(float64x2_t *)(v67 + 64);
        v80 = *(float64x2_t *)(v67 + 80);
        v205 = v79;
        v206 = v80;
        v81 = *(float64x2_t **)(v66 + 56);
        if (v81)
          CA::Mat4Impl::mat4_apply_to_rect(v81, (int8x16_t *)&v205, v26);
        else
          v205 = vaddq_f64(*(float64x2_t *)(v66 + 64), v79);
        CA::Rect::apply_transform((int8x16_t *)&v205, *(const CA::Transform **)(a4 + 24), v26);
        v68 = *(_QWORD *)(v23 + 32);
        if (vaddvq_f64(vabdq_f64(v205, vrndaq_f64(v205)))
           + vabdd_f64(v206.f64[0], round(v206.f64[0]))
           + vabdd_f64(v206.f64[1], round(v206.f64[1])) >= 0.000004)
        {
          v68 |= 1uLL;
          *(_QWORD *)(v23 + 32) = v68;
        }
      }
      if ((v68 & 0x11) == 0x10)
      {
        if ((v68 & 0x1480002) != 0)
          goto LABEL_104;
        if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v23 + 104) + 24))(*(_QWORD *)(v23 + 104)))
          goto LABEL_104;
        v82 = *(_QWORD *)(v23 + 104);
        v83 = *(_QWORD *)(v82 + 80);
        if ((*(_BYTE *)(v83 + 144) & 0x10) != 0 && (*(double *)(v83 + 24) != 0.0 || *(double *)(v83 + 56) != 0.0))
          goto LABEL_104;
        v84 = *(_QWORD *)(v23 + 24);
        v85 = *(_QWORD *)(v84 + 128);
        if (v85)
        {
          if (*(_QWORD *)(v85 + 72))
            CA::Render::Layer::max_corner_radii(*(_QWORD *)(v84 + 128));
          else
            v86 = *(float *)(v85 + 228);
        }
        else
        {
          v86 = 0.0;
        }
        v88 = *(double *)(v84 + 80);
        v87 = *(double *)(v84 + 88);
        v89 = v88 >= v87 ? *(double *)(v84 + 88) : *(double *)(v84 + 80);
        if ((v90 = *(_DWORD *)(v84 + 36), v91 = HIWORD(v90) & 0xF, v91 == 15)
          || v85 && *(_QWORD *)(v85 + 72)
          || v91 == 9
          || v91 == 6)
        {
          v92 = v89 * 0.5;
        }
        else
        {
          v178 = (~v90 & 0xC0000) == 0 || (~v90 & 0x30000) == 0;
          v179 = v88 * 0.5;
          if (v178 && v179 < v89)
            v89 = v179;
          v181 = (~v90 & 0x50000) == 0 || (~v90 & 0xA0000) == 0;
          v92 = v87 * 0.5;
          if (!v181 || v92 >= v89)
            v92 = v89;
        }
        if (v86 > v92 * 1.00001 || v85 && *(_QWORD *)(v85 + 56) && (*(_BYTE *)(v84 + 45) & 2) != 0)
        {
LABEL_104:
          v68 = *(_QWORD *)(v23 + 32) | 1;
          *(_QWORD *)(v23 + 32) = v68;
        }
        else
        {
          *(_DWORD *)(v82 + 220) |= 0x200000u;
          v68 = *(_QWORD *)(v23 + 32);
        }
      }
    }
    if ((v68 & 3) != 0)
    {
      v77 = *(_QWORD *)(a1 + 72);
      if (v77)
        *(_QWORD *)(a1 + 72) = *(_QWORD *)v77;
      else
        v77 = x_heap_malloc_small_(*(uint64_t **)(a1 + 56), 0xF8uLL);
      *(_QWORD *)(v77 + 48) = 0;
      *(_QWORD *)(v77 + 192) = 0;
      *(_QWORD *)(v77 + 200) = 0;
      *(_DWORD *)(v77 + 208) = 0;
      *(_WORD *)(v77 + 212) = *(_WORD *)(v77 + 212) & 0xC000 | 1;
      *(_QWORD *)(v77 + 24) = 0;
      *(_QWORD *)(v77 + 32) = 0;
      *(_QWORD *)(v77 + 8) = a1;
      *(_QWORD *)(v77 + 16) = v23;
      *(_DWORD *)(v77 + 136) = -1;
      *(_QWORD *)v77 = &off_1E1595A18;
      *(_BYTE *)(v77 + 224) &= ~1u;
      *(_QWORD *)(v77 + 232) = 0;
      v94 = (float64x2_t)0x3C003C003C003C00uLL;
      *(_OWORD *)(v77 + 88) = 0x3C003C003C003C00uLL;
      *(_QWORD *)(v77 + 104) = 0;
      v93 = *(_WORD *)(v77 + 124);
      *(_QWORD *)(v77 + 112) = 0;
      BYTE1(v94.f64[0]) = 0;
      BYTE3(v94.f64[0]) = 0;
      BYTE5(v94.f64[0]) = 0;
      HIBYTE(v94.f64[0]) = 0;
      *(_OWORD *)(v77 + 72) = *(unint64_t *)&v94.f64[0];
      *(_OWORD *)(v77 + 56) = *(unint64_t *)&v94.f64[0];
      *(_DWORD *)(v77 + 120) = 1065353216;
      v95 = v93 & 0xF800 | 0x401;
      *(_WORD *)(v77 + 124) = v95;
      *(int8x8_t *)(v77 + 216) = vorr_s8(vand_s8(*(int8x8_t *)(v77 + 216), (int8x8_t)0xFC000000FFC00000), (int8x8_t)0x1000000000FLL);
      v96 = v95 | *(_WORD *)(a4 + 68) & 0x100;
      *(_WORD *)(v77 + 124) = v96;
      if ((~*(_DWORD *)(v23 + 32) & 3) == 0)
        *(_WORD *)(v77 + 124) = v96 & 0xFD00 | 4;
      *(_QWORD *)&v214 = 0;
      v212 = (__int128)v94;
      v213 = v94;
      v210 = (__int128)v94;
      v211 = v94;
      v208 = v94;
      v209 = v94;
      v206 = v94;
      v207 = v94;
      v205 = v94;
      v97 = *(CA::Mat4Impl **)(v66 + 56);
      if (v97)
      {
        CA::Transform::set((uint64_t)&v205, v97, 1);
      }
      else
      {
        v98 = *(double *)(v66 + 80);
        if (fabs(v98) < 0.001)
        {
          v99 = *(_QWORD *)(a4 + 24);
          v100 = *(float64x2_t *)(v99 + 16);
          v101 = *(float64x2_t *)(v99 + 32);
          v102 = *(float64x2_t *)(v99 + 48);
          v205 = *(float64x2_t *)v99;
          v206 = v100;
          v207 = v101;
          v208 = v102;
          v103 = *(float64x2_t *)(v99 + 80);
          v104 = *(float64x2_t *)(v99 + 96);
          v105 = *(float64x2_t *)(v99 + 112);
          v209 = *(float64x2_t *)(v99 + 64);
          v210 = (__int128)v103;
          v211 = v104;
          v212 = (__int128)v105;
          v213 = *(float64x2_t *)(v99 + 128);
          LOBYTE(v214) = *(_BYTE *)(v99 + 144) & 0x1F;
          CA::Transform::translate((CA::Transform *)&v205, *(double *)(v66 + 64), *(double *)(v66 + 72), 0.0);
          v73 = v77;
LABEL_119:
          v108 = v23 + 144;
          if (!CA::Transform::operator==((uint64_t)&v205, v23 + 144))
          {
            v108 = x_heap_malloc_small_(*(uint64_t **)(a1 + 56), 0x98uLL);
            v109 = v206;
            v110 = v207;
            v111 = v208;
            *(float64x2_t *)v108 = v205;
            *(float64x2_t *)(v108 + 16) = v109;
            *(float64x2_t *)(v108 + 32) = v110;
            *(float64x2_t *)(v108 + 48) = v111;
            v112 = (float64x2_t)v210;
            v113 = v211;
            v114 = (float64x2_t)v212;
            *(float64x2_t *)(v108 + 64) = v209;
            *(float64x2_t *)(v108 + 80) = v112;
            *(float64x2_t *)(v108 + 96) = v113;
            *(float64x2_t *)(v108 + 112) = v114;
            *(float64x2_t *)(v108 + 128) = v213;
            *(_BYTE *)(v108 + 144) = *(_BYTE *)(v108 + 144) & 0xE0 | v214 & 0x1F;
          }
          *(_QWORD *)(v77 + 80) = v108;
          goto LABEL_122;
        }
        v205 = (float64x2_t)xmmword_18474DF40;
        v206 = 0uLL;
        v207 = (float64x2_t)xmmword_18474DF50;
        v208 = 0u;
        v209 = 0u;
        v210 = xmmword_18474DF40;
        v212 = xmmword_18474DF50;
        v211 = *(float64x2_t *)(v66 + 64);
        *(double *)&v212 = v98;
        __asm { FMOV            V1.2D, #1.0 }
        v213 = _Q1;
        LOBYTE(v214) = 16 * (v98 != 0.0);
      }
      v73 = v77;
      if ((CA::OGL::maybe_concatenate((CA::OGL *)&v205, *(CA::Transform **)(a4 + 24), (const CA::Transform *)v26, v27) & 1) == 0)
      {
        *(_WORD *)(v77 + 124) = *(_WORD *)(v77 + 124) & 0xFCFF | 0x200;
        CA::OGL::quad_node(a1, v23, v77, 1, 1, 0, 0.0);
        v73 = v107;
        *(_QWORD *)(v107 + 80) = *(_QWORD *)(a4 + 24);
        *(_WORD *)(v107 + 124) = *(_WORD *)(v107 + 124) & 0xFEFF | *(_WORD *)(a4 + 68) & 0x100;
        *(_DWORD *)(v107 + 220) = *(_DWORD *)(v107 + 220) & 0xFFFE0000 | 0x80;
      }
      goto LABEL_119;
    }
    goto LABEL_108;
  }
LABEL_122:
  v115 = *(_QWORD **)(v23 + 104);
  v116 = *(_QWORD *)(v23 + 32);
  if ((v116 & 0x480000) != 0 || v73 && (v116 & 0x200000) != 0)
  {
    v117 = HIBYTE(*(unsigned __int16 *)(v23 + 42));
    if (v117 != 3)
    {
      *(_OWORD *)(v23 + 64) = *(_OWORD *)(v23 + 48);
      *(_QWORD *)(v23 + 88) = *(_QWORD *)(v23 + 80);
      *(_WORD *)(v23 + 42) = v117 | 0x300;
      *(_QWORD *)(v23 + 32) = v116 | 0x100000;
    }
    v77 = *(_QWORD *)(v23 + 112);
    if (!v77)
    {
      v77 = *(_QWORD *)(a1 + 72);
      if (v77)
        *(_QWORD *)(a1 + 72) = *(_QWORD *)v77;
      else
        v77 = x_heap_malloc_small_(*(uint64_t **)(a1 + 56), 0xF8uLL);
      *(_QWORD *)(v77 + 48) = 0;
      *(_QWORD *)(v77 + 192) = 0;
      *(_QWORD *)(v77 + 200) = 0;
      *(_DWORD *)(v77 + 208) = 0;
      *(_WORD *)(v77 + 212) = *(_WORD *)(v77 + 212) & 0xC000 | 1;
      *(_QWORD *)(v77 + 24) = 0;
      *(_QWORD *)(v77 + 32) = 0;
      *(_QWORD *)(v77 + 8) = a1;
      *(_QWORD *)(v77 + 16) = v23;
      *(_DWORD *)(v77 + 136) = -1;
      *(_QWORD *)v77 = &off_1E15948E0;
      *(_QWORD *)(v77 + 224) = 0;
      *(int8x8_t *)(v77 + 216) = vorr_s8(vand_s8(*(int8x8_t *)(v77 + 216), (int8x8_t)0xFC000000FFC00000), (int8x8_t)0x8000000000000FLL);
      *(_QWORD *)(v23 + 112) = v77;
    }
    ++*(_BYTE *)(v77 + 212);
    for (i = *(_QWORD **)(v23 + 136); i; i = (_QWORD *)*i)
      v77 = CA::OGL::filter_node(a1, v23, (uint64_t)i, a4, 0, v77);
    if ((*(_BYTE *)(v23 + 34) & 0x40) != 0)
    {
      v127 = *(_QWORD *)(v6 + 128);
      if (v127)
        v128 = *(_QWORD *)(v127 + 88);
      else
        v128 = 0;
      v74 = v28;
      v129 = *(_QWORD *)(a1 + 72);
      if (v129)
        *(_QWORD *)(a1 + 72) = *(_QWORD *)v129;
      else
        v129 = x_heap_malloc_small_(*(uint64_t **)(a1 + 56), 0xF8uLL);
      *(_QWORD *)(v129 + 48) = 0;
      *(_QWORD *)(v129 + 192) = 0;
      *(_QWORD *)(v129 + 200) = 0;
      *(_DWORD *)(v129 + 208) = 0;
      *(_WORD *)(v129 + 212) = *(_WORD *)(v129 + 212) & 0xC000 | 1;
      v130 = *(_DWORD *)(v129 + 220) & 0xFC000000;
      *(_DWORD *)(v129 + 216) = *(_DWORD *)(v129 + 216) & 0xFFC00000 | 0xF;
      *(_DWORD *)(v129 + 220) = v130;
      *(_QWORD *)(v129 + 16) = v23;
      *(_QWORD *)(v129 + 24) = v115;
      *(_QWORD *)(v129 + 32) = v77;
      *(_DWORD *)(v129 + 136) = -1;
      *(_QWORD *)v129 = &off_1E1594FA0;
      *(_QWORD *)(v129 + 8) = a1;
      *(_QWORD *)(v129 + 224) = v128;
      CA::OGL::init_gstate(v129 + 56, a4);
      *(_DWORD *)(v129 + 220) = *(_DWORD *)(v129 + 220) & 0xFFEE0000 | 0x100040;
      v77 = v129;
    }
    else
    {
      v122 = *(_WORD *)(v23 + 42);
      v123 = *(_QWORD *)(v23 + 88);
      v124 = *((_DWORD *)v115 + 34);
      if (v124 < 0)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*v115 + 40))(v115, v115 + 16);
        v124 = *((_DWORD *)v115 + 34);
      }
      if (v124 >= *((_DWORD *)v115 + 35))
        v124 = *((_DWORD *)v115 + 35);
      if (v124 > 0 || (v122 & 0xF0 | (0x3ACCu >> v122) & 1) == 0)
      {
        v126 = *(_QWORD *)(a1 + 72);
        if (v126)
          *(_QWORD *)(a1 + 72) = *(_QWORD *)v126;
        else
          v126 = x_heap_malloc_small_(*(uint64_t **)(a1 + 56), 0xF8uLL);
        *(_QWORD *)(v126 + 48) = 0;
        *(_QWORD *)(v126 + 192) = 0;
        *(_QWORD *)(v126 + 200) = 0;
        *(_DWORD *)(v126 + 208) = 0;
        *(_WORD *)(v126 + 212) = *(_WORD *)(v126 + 212) & 0xC000 | 1;
        v131 = *(_DWORD *)(v126 + 220) & 0xFC000000;
        *(_DWORD *)(v126 + 216) = *(_DWORD *)(v126 + 216) & 0xFFC00000 | 0xF;
        *(_DWORD *)(v126 + 220) = v131;
        *(_QWORD *)(v126 + 16) = v23;
        *(_QWORD *)(v126 + 24) = v77;
        *(_QWORD *)(v126 + 32) = v115;
        *(_DWORD *)(v126 + 136) = -1;
        *(_QWORD *)v126 = &off_1E1595BC8;
        *(_QWORD *)(v126 + 8) = a1;
        CA::OGL::init_gstate(v126 + 56, a4);
        *(_WORD *)(v126 + 124) = v122 | (*(unsigned __int8 *)(v126 + 125) << 8);
        *(_QWORD *)(v126 + 96) = *(_QWORD *)(v23 + 64);
        *(_QWORD *)(v126 + 104) = *(_QWORD *)(v23 + 72);
        *(_QWORD *)(v126 + 112) = v123;
        *(_DWORD *)(v126 + 220) = *(_DWORD *)(v126 + 220) & 0xFFEE0000 | 0x100040;
        v77 = v126;
      }
      else
      {
        v177 = *((_WORD *)v115 + 106) - 1;
        *((_BYTE *)v115 + 212) = *((_WORD *)v115 + 106) - 1;
        if (!(_BYTE)v177)
          CA::OGL::ImagingNode::finalize((CA::OGL::ImagingNode *)v115, (CA::OGL::Renderer *)a1);
      }
      v74 = v28;
    }
    if (v73)
    {
      *(_DWORD *)(v73 + 220) |= 0x100000u;
      ++*(_BYTE *)(v73 + 212);
      v132 = CA::OGL::combine_node((uint64_t **)a1, v23, 5, a4, v77, (CA::OGL::ImagingNode *)v73, 0.0, 0.0, 0.0, 0.0);
      v133 = *(_QWORD *)(v23 + 112);
      ++*(_BYTE *)(v133 + 212);
      v134 = (CA::OGL::ImagingNode *)CA::OGL::combine_node((uint64_t **)a1, v23, 6, a4, v133, (CA::OGL::ImagingNode *)v73, 0.0, 0.0, 0.0, 0.0);
      v77 = CA::OGL::combine_node((uint64_t **)a1, v23, 10, a4, v132, v134, 0.0, 0.0, 0.0, 0.0);
      *(_DWORD *)(v77 + 220) = *(_DWORD *)(v77 + 220) & 0xFFFE0000 | 0x100;
    }
    LOBYTE(v73) = 1;
  }
  else
  {
    if (v73)
    {
      v118 = HIBYTE(*(unsigned __int16 *)(v23 + 42));
      if (v118 != 3)
      {
        *(_OWORD *)(v23 + 64) = *(_OWORD *)(v23 + 48);
        *(_QWORD *)(v23 + 88) = *(_QWORD *)(v23 + 80);
        *(_WORD *)(v23 + 42) = v118 | 0x300;
        v116 |= 0x100000uLL;
        *(_QWORD *)(v23 + 32) = v116;
      }
      if (v77 == v73
        && (v119 = *(CA::Mat4Impl **)(v77 + 80), v119 == (CA::Mat4Impl *)v115[10])
        && ((*((_BYTE *)v119 + 144) & 0x10) == 0 || CA::Mat4Impl::mat4_is_2d_affine(v119, v25))
        && (v116 & 2) == 0)
      {
        LOBYTE(v73) = 0;
        *(_QWORD *)(v77 + 24) = v115;
        *(_DWORD *)(v77 + 220) |= 0x100000u;
      }
      else
      {
        if ((*(_QWORD *)(v6 + 40) & 0x80) != 0)
          v120 = 6;
        else
          v120 = 5;
        v77 = CA::OGL::combine_node((uint64_t **)a1, v23, v120, a4, (uint64_t)v115, (CA::OGL::ImagingNode *)v73, 0.0, 0.0, 0.0, 0.0);
        LOBYTE(v73) = 0;
        *(_DWORD *)(v77 + 220) = *(_DWORD *)(v77 + 220) & 0xFFFE0000 | 0x100;
      }
    }
    else
    {
      v77 = *(_QWORD *)(v23 + 104);
    }
    v74 = v28;
  }
  *(_QWORD *)(v23 + 104) = v77;
LABEL_169:
  if (*(_QWORD *)(*(_QWORD *)(v23 + 16) + 152) | *(_QWORD *)(a4 + 16))
    v135 = 1;
  else
    v135 = (*(unsigned __int8 *)(v23 + 35) >> 3) & 1;
  v136 = *(_QWORD *)(v23 + 104);
  v137 = *(_WORD *)(v136 + 124);
  v139 = *(_QWORD *)(v136 + 96);
  v138 = *(_QWORD *)(v136 + 104);
  v140 = *(_QWORD *)(v136 + 112);
  if ((v73 & 1) == 0)
  {
    *(_WORD *)(v136 + 124) = v137 & 0xFF00 | *(unsigned __int8 *)(v23 + 42);
    *(_QWORD *)(*(_QWORD *)(v23 + 104) + 96) = *(_QWORD *)(v23 + 64);
    *(_QWORD *)(*(_QWORD *)(v23 + 104) + 104) = *(_QWORD *)(v23 + 72);
    v136 = *(_QWORD *)(v23 + 104);
    *(_QWORD *)(v136 + 112) = *(_QWORD *)(v23 + 88);
  }
  v141 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v136 + 16))(v136, v135);
  v143 = *(_QWORD *)(v23 + 104);
  if (v141)
  {
    *(_BYTE *)(v143 + 124) = v137;
    *(_QWORD *)(*(_QWORD *)(v23 + 104) + 96) = v139;
    *(_QWORD *)(*(_QWORD *)(v23 + 104) + 104) = v138;
    v144 = *(_QWORD *)(v23 + 104);
    *(_QWORD *)(v144 + 112) = v140;
    v145 = CA::OGL::combine_node((uint64_t **)a1, v23, 1, v74, v144, 0, 0.0, 0.0, 0.0, 0.0);
    *(_QWORD *)(v23 + 104) = v145;
    *(_DWORD *)(v145 + 220) = *(_DWORD *)(v145 + 220) & 0xFFFE0000 | 0x10;
    v143 = *(_QWORD *)(v23 + 104);
    if ((v73 & 1) == 0)
    {
      *(_BYTE *)(v143 + 124) = *(_BYTE *)(v23 + 42);
      *(_QWORD *)(*(_QWORD *)(v23 + 104) + 96) = *(_QWORD *)(v23 + 64);
      *(_QWORD *)(*(_QWORD *)(v23 + 104) + 104) = *(_QWORD *)(v23 + 72);
      v143 = *(_QWORD *)(v23 + 104);
      *(_QWORD *)(v143 + 112) = *(_QWORD *)(v23 + 88);
    }
  }
  *(_QWORD *)(v143 + 72) = *(_QWORD *)(a4 + 16);
  if (*(_QWORD *)(*(_QWORD *)(v23 + 16) + 152))
  {
    v211 = 0u;
    v212 = 0u;
    v209 = 0u;
    v210 = 0u;
    v207 = 0u;
    v208 = 0u;
    v205 = 0u;
    v206 = 0u;
    v193 = 0u;
    v194 = 0u;
    v191 = 0u;
    v192 = 0u;
    v189 = 0u;
    v190 = 0u;
    v187 = 0u;
    v188 = 0u;
    CA::Mat4Impl::mat4_invert((CA::Mat4Impl *)&v187, *(CA::Mat4Impl **)(a4 + 24), v142);
    CA::Mat4Impl::mat4_transpose((CA::Mat4Impl *)&v205, v187.f64, v146);
    CA::Mat4Impl::mat4_invert((CA::Mat4Impl *)&v187, *(CA::Mat4Impl **)(v74 + 24), v147);
    for (j = *(float64x2_t **)(*(_QWORD *)(v23 + 16) + 152); j; j = *(float64x2_t **)&j->f64[0])
    {
      v149 = j[1];
      v150 = j[2];
      v151 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v206, v149.f64[0]), v208, v149, 1), (float64x2_t)v210, v150.f64[0]), (float64x2_t)v212, v150, 1);
      v185 = -v151.f64[0] / *(double *)&v192;
      v186 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v205, v149.f64[0]), v207, v149, 1), v209, v150.f64[0]), v211, v150, 1);
      *(_QWORD *)&v152.f64[0] = v188;
      v153 = v151.f64[1] + *(double *)&v194 * v185;
      *(_QWORD *)&v152.f64[1] = v190;
      v184 = v152;
      v154 = CA::OGL::Renderer::add_clip_plane(a1, v23);
      *(float32x2_t *)(v154 + 12) = vcvt_f32_f64(vmlaq_n_f64(v186, v184, v185));
      *(_DWORD *)(v154 + 20) = 0;
      v155 = v153;
      *(float *)(v154 + 24) = v155;
    }
  }
  if ((*(_BYTE *)(v23 + 35) & 8) != 0)
  {
    v207 = 0u;
    v208 = 0u;
    v205 = 0u;
    v206 = 0u;
    CA::OGL::map_layer_corners(v23, a4, v205.f64);
    v156 = 0;
    v157 = 0;
    v189 = 0u;
    v190 = 0u;
    LODWORD(v158) = 3;
    v187 = 0u;
    v188 = 0u;
    while (1)
    {
      v159 = &v205.f64[2 * v158];
      v158 = v156;
      v160 = &v205.f64[2 * v156];
      v161 = *v160;
      v162 = v160[1];
      v163 = *v160 - *v159;
      v164 = v162 - v159[1];
      if (v163 != 0.0)
        break;
      if (v164 != 0.0)
      {
        v167 = v163 / v164;
        v166 = v161 - v167 * v162;
        v165 = -1.0;
        goto LABEL_186;
      }
      v156 = v158 + 1;
LABEL_189:
      if (v156 == 4)
      {
        if (v157)
        {
          v172 = (int8x16_t *)&v187;
          do
          {
            v173 = CA::OGL::Renderer::add_clip_plane(a1, v23);
            v174 = (__int128)*v172++;
            *(_OWORD *)(v173 + 12) = v174;
            --v157;
          }
          while (v157);
        }
        goto LABEL_195;
      }
    }
    v165 = v164 / v163;
    v166 = v162 - v165 * v161;
    v167 = -1.0;
LABEL_186:
    v156 = v158 + 1;
    if (v166 + v205.f64[2 * ((v158 + 1) & 3)] * v165 + v205.f64[2 * ((v158 + 1) & 3) + 1] * v167 < 0.0)
    {
      v165 = -v165;
      v167 = -v167;
      v166 = -v166;
    }
    v168 = v165;
    v169 = (int8x16_t *)(&v187 + v157);
    *(float *)&v170 = v167;
    *(float *)v169->i32 = v168;
    v169->i32[1] = v170;
    v169->i32[2] = 0;
    *(float *)&v171 = v166;
    v169->i32[3] = v171;
    ++v157;
    goto LABEL_189;
  }
LABEL_195:
  v175 = *(_DWORD **)(v23 + 104);
  if (a6)
  {
    v175[55] |= 0x400000u;
    v175 = *(_DWORD **)(v23 + 104);
  }
  (*(void (**)(_DWORD *))(*(_QWORD *)v175 + 88))(v175);
  return v23;
}

_QWORD *CA::OGL::LayerNode::prepare_sublayers_if_needed(_QWORD *this)
{
  _QWORD *v1;
  __int16 v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  if ((this[28] & 1) == 0)
  {
    v1 = this;
    v2 = 0;
    this = CA::OGL::prepare_layers(this[1], (const CA::Render::TransitionSubclass *)this[2], (_QWORD **)(*(_QWORD *)(this[2] + 16) + 96), (uint64_t)(v1 + 7), (*((_DWORD *)v1 + 55) >> 22) & 1, &v2, (_BYTE *)&v2 + 1);
    v1[29] = this;
    *((_BYTE *)v1 + 224) |= 1u;
    if (HIBYTE(v2))
      *((_DWORD *)v1 + 55) |= 0x100000u;
    if ((_BYTE)v2)
      *((_DWORD *)v1 + 55) |= 0x800000u;
  }
  return this;
}

uint64_t CA::OGL::prepare_layer_image(_QWORD *a1, uint64_t a2, const CA::Transform *a3, const double *a4)
{
  const CA::Transform *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  _BOOL4 v14;
  int v15;
  int v17;
  uint64_t *v18;
  uint64_t *v19;
  CA::Render::String *v20;
  CA::Render::KeyValueArray *v21;
  CA::Render::Filter *v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  BOOL v33;
  BOOL v34;
  uint64_t v35;
  uint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  os_unfair_lock_s *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  _BYTE *v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  float32x4_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  uint64_t v63;
  CA::Render::Path *v64;
  uint64_t v65;
  double v66;
  uint64_t v67;
  float v68;
  double v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;
  CA::Mat4Impl *v74;
  double v75;
  CA::Transform *v76;
  const double *v77;
  uint64_t v78;
  float64x2_t v79;
  int32x4_t v80;
  __int128 v81;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  float v86;
  int v87;
  double v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  os_unfair_lock_s *v92;
  uint64_t v93;
  os_unfair_lock_s *v94;
  uint64_t v95;
  BOOL v96;
  double v97;
  int v98;
  int v99;
  double v100;
  CA::Transform *v101;
  float64x2_t v102;
  unint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  int v106;
  unsigned int *v107;
  unint64_t v108;
  CA::Transform *v109;
  uint64_t v110;
  double *v112;
  __n128 v113;
  uint64_t v114;
  double v115;
  float64x2_t v116;
  unsigned int v117;
  uint64_t v118;
  char v119;
  unint64_t v120;
  CA::ColorMatrix *v121;
  uint64_t v122;
  uint64_t v123;
  CA::ColorMatrix *v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  unint64_t v128;
  unint64_t v129;
  char v130;
  _QWORD *v131;
  BOOL can_filter_in_place;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int v138;
  char v139;
  uint64_t v140;
  __int16 v141;
  unint64_t v142;
  uint64_t v143;
  uint8x8_t v144;
  uint64_t v145;
  int v146;
  __int16 v147;
  __int16 v162;
  uint64_t v163;
  uint64_t v164;
  _QWORD *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  BOOL v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unsigned int v174;
  unsigned int v175;
  uint64_t v176;
  __int128 v177;
  int32x4_t v178;
  int32x4_t v179;
  int v180;
  int v181;
  int v182;
  int8x16_t v183;
  uint64_t v184;
  int64x2_t v185;
  int8x16_t v186;
  double v187;
  double v188;
  double *v189;
  int32x4_t v190;
  __int16 v192;
  uint64_t v193;
  unsigned int v194;
  unsigned int v195;
  uint64_t v196;
  unsigned int v197;
  int v198;
  char v199;
  uint64_t v200;
  char v201;
  uint64_t v202;
  float v203;
  int8x8_t v204;
  int8x8_t *v205;
  uint64_t v206;
  float v207;
  uint64_t v208;
  __int16 v209;
  _BOOL4 v210;
  unsigned int v211;
  float64x2_t v212;
  float64x2_t v213;
  __int16 v214;
  uint64_t v215;
  uint64_t v216;
  CA::Transform *v217;
  __n128 v218;
  uint64_t v219;
  uint64_t v220;
  const double *v221;
  float64x2_t v222;
  uint64_t v223;
  uint64_t v224;
  unsigned int v225;
  unsigned int v226;
  int8x16_t v227;
  int32x4_t v228;
  float16x4_t v229;
  uint64_t v230;
  float v231;
  uint64_t v233;
  uint64_t v234;
  int v235;
  int v236;
  int v237;
  int8x16_t v238;
  uint64_t v239;
  int64x2_t v240;
  int8x16_t v241;
  double v242;
  double v243;
  float v244;
  float v245;
  float v246;
  float v247;
  float v248;
  float v249;
  float v250;
  uint64_t v258;
  int v259;
  int v260;
  CA::Mat4Impl *v261;
  CA::Transform *v262;
  float *v263;
  const CA::Transform *v264;
  const CA::Transform *v265;
  const CA::Transform *v266;
  uint64_t v267;
  int8x16_t v268;
  double v269;
  double v270;
  int8x16_t v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  uint64_t v290;

  v4 = a3;
  v290 = *MEMORY[0x1E0C80C00];
  v263 = (float *)*a1;
  v8 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 104);
  v10 = *(_QWORD *)(v7 + 128);
  if (v10 && (*(_BYTE *)(a2 + 35) & 4) == 0)
  {
    a3 = *(const CA::Transform **)(v10 + 88);
    if (a3)
    {
      if ((*((_BYTE *)a3 + 13) & 1) != 0)
        CA::OGL::prepare_compositing_filter(a1, (int8x8_t *)a2, (uint64_t)a3, 0);
    }
    else
    {
      v11 = *(_QWORD *)(v10 + 96);
      if (v11)
      {
        if (CA::OGL::vibrancy_strength_reduction(CA::OGL::Context &,CA::OGL::Layer *,CA::Render::TypedArray<CA::Render::Filter> const*)::once != -1)
          dispatch_once(&CA::OGL::vibrancy_strength_reduction(CA::OGL::Context &,CA::OGL::Layer *,CA::Render::TypedArray<CA::Render::Filter> const*)::once, &__block_literal_global_2420);
        if (*(_QWORD *)(*(_QWORD *)(a2 + 16) + 104) == *(_QWORD *)(*(_QWORD *)(a2 + 16) + 96)
          && *(_DWORD *)(v11 + 16) == 1)
        {
          v12 = *(_QWORD *)(v11 + 24);
          if ((*(_BYTE *)(v12 + 13) & 1) != 0)
          {
            v13 = *(_DWORD **)(v12 + 40);
            if (v13)
              v14 = CA::Render::KeyValueArray::get_int_key(*(CA::Render::KeyValueArray **)(v12 + 40), (const CA::Render::KeyValueArray *)0x131, 0) != 0;
            else
              v14 = 0;
            v15 = *(_DWORD *)(v12 + 24);
            if (v15 == 581)
            {
              if (!(*(unsigned int (**)(float *, uint64_t))(*(_QWORD *)v263 + 184))(v263, 30))
                goto LABEL_46;
              v13 = *(_DWORD **)(v12 + 40);
              v18 = &CA::OGL::vibrancy_strength_reduction(CA::OGL::Context &,CA::OGL::Layer *,CA::Render::TypedArray<CA::Render::Filter> const*)::vibrant_color_matrix_name;
              v17 = 582;
            }
            else
            {
              if (v15 == 583)
              {
                _ZF = !v14;
                if (v14)
                  v17 = 585;
                else
                  v17 = 584;
                v18 = &CA::OGL::vibrancy_strength_reduction(CA::OGL::Context &,CA::OGL::Layer *,CA::Render::TypedArray<CA::Render::Filter> const*)::vibrant_dark_name;
                v19 = &CA::OGL::vibrancy_strength_reduction(CA::OGL::Context &,CA::OGL::Layer *,CA::Render::TypedArray<CA::Render::Filter> const*)::vibrant_dark_reversed_name;
              }
              else
              {
                if (v15 != 586)
                  goto LABEL_46;
                _ZF = !v14;
                if (v14)
                  v17 = 588;
                else
                  v17 = 587;
                v18 = &CA::OGL::vibrancy_strength_reduction(CA::OGL::Context &,CA::OGL::Layer *,CA::Render::TypedArray<CA::Render::Filter> const*)::vibrant_light_name;
                v19 = &CA::OGL::vibrancy_strength_reduction(CA::OGL::Context &,CA::OGL::Layer *,CA::Render::TypedArray<CA::Render::Filter> const*)::vibrant_light_reversed_name;
              }
              if (!_ZF)
                v18 = v19;
            }
            v20 = (CA::Render::String *)*v18;
            if (v13)
              v21 = (CA::Render::KeyValueArray *)CA::Render::Array::new_array((CA::Render::Array *)v13[4], v13 + 6, (CA::Render::Object *const *)1, v13[3] >> 8);
            else
              v21 = 0;
            v22 = (CA::Render::Filter *)x_mem_alloc0(0x38uLL);
            v23 = (uint64_t)v22;
            if (v22)
              CA::Render::Filter::Filter(v22, v17, v20, v21);
            if (v21)
            {
              v24 = (unsigned int *)((char *)v21 + 8);
              do
              {
                v25 = __ldaxr(v24);
                v26 = v25 - 1;
              }
              while (__stlxr(v26, v24));
              if (!v26)
                (*(void (**)(CA::Render::KeyValueArray *))(*(_QWORD *)v21 + 16))(v21);
            }
            if (v23)
            {
              CA::OGL::prepare_compositing_filter(a1, (int8x8_t *)a2, v23, 0);
              v27 = (unsigned int *)(v23 + 8);
              do
              {
                v28 = __ldaxr(v27);
                v29 = v28 - 1;
              }
              while (__stlxr(v29, v27));
              if (!v29)
                (*(void (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
              *(_QWORD *)(a2 + 32) |= 0x8000uLL;
            }
          }
        }
      }
    }
  }
LABEL_46:
  v30 = *(_QWORD *)(a2 + 8);
  if (*(unsigned __int8 *)(v30 + 43) << 8 != 768)
  {
    *(_QWORD *)(a2 + 32) |= 0x100000uLL;
    *(_BYTE *)(a2 + 42) = *(_BYTE *)(v30 + 43);
    *(_QWORD *)(a2 + 64) = *(_QWORD *)(v30 + 48);
    *(_QWORD *)(a2 + 72) = *(_QWORD *)(v30 + 56);
    *(_QWORD *)(a2 + 88) = *(_QWORD *)(v30 + 80);
    *(_BYTE *)(v30 + 43) = 3;
  }
  v31 = *(_DWORD *)(v8 + 116);
  v32 = *((_QWORD *)v4 + 4);
  if (v31)
    v33 = v32 == 0;
  else
    v33 = 1;
  if ((v33 || ((*(_QWORD *)(v8 + 24) & 0x18) != 0 ? (v34 = (*(_QWORD *)(v8 + 24) & 0x1000) == 0) : (v34 = 0), v34))
    && (v35 = *(_QWORD *)(a2 + 32), (v35 & 0x200000) == 0))
  {
    *(_QWORD *)(a2 + 32) = v35 | 8;
  }
  else
  {
    if ((_BYTE)v31 == 0xFF)
    {
      _S0 = HIWORD(v32);
    }
    else
    {
      *(_QWORD *)(a2 + 32) |= 4uLL;
      *(_WORD *)(a2 + 40) |= 1u;
      LOWORD(_S0) = *((_WORD *)v4 + 19);
    }
    __asm { FCVT            S0, H0 }
    if (_S0 != 1.0)
    {
      *(_QWORD *)(a2 + 32) |= 4uLL;
      *(_WORD *)(a2 + 40) = *(_WORD *)(a2 + 40) & 0xFFFD | (*(_WORD *)(*(_QWORD *)(a2 + 8) + 40) >> 1) & 2;
    }
  }
  *(_WORD *)(a2 + 40) &= (*(_WORD *)(v7 + 36) >> 2) | 0xFC3F;
  v41 = *(uint64_t **)(v7 + 128);
  if (!v41)
    goto LABEL_99;
  if (*((float *)v41 + 57) > 0.001 && (*(_BYTE *)(v7 + 38) & 0xF) != 0 || v41[9])
    *(_QWORD *)(a2 + 32) |= 0x10uLL;
  v42 = *(_QWORD *)(a2 + 32);
  if ((v42 & 8) != 0)
    goto LABEL_99;
  if (*((float *)v41 + 59) > 0.001
    && (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqzq_f32(*((float32x4_t *)v41 + 15))))) & 1) != 0)
  {
    if ((*(_BYTE *)(v7 + 44) & 0x20) != 0)
    {
      v43 = 128;
    }
    else
    {
      v43 = 128;
      if (!v41[16])
        v43 = 64;
    }
    v42 |= v43;
    *(_QWORD *)(a2 + 32) = v42;
  }
  if (*((float *)v41 + 74) > 0.001
    && (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqzq_f32(*(float32x4_t *)((char *)v41 + 300))))) & 1) != 0
    && *((float *)v41 + 79) != 0.0)
  {
    v44 = 0x200000000;
    if ((*(_QWORD *)(v7 + 40) & 0x1000000000) == 0)
      v44 = 0x100000000;
    v42 |= v44;
    *(_QWORD *)(a2 + 32) = v42;
  }
  if ((v42 & 0x100000040) != 0)
    *(_QWORD *)(a2 + 32) = (v42 >> 1) & 0x100000040 | v42 & 0xFFFFFFFDFFFFFF7FLL;
  if (!v41[10] && !v41[16]
    || (*(_DWORD *)(*(_QWORD *)(a2 + 104) + 220) |= 0x100000u, (v41 = *(uint64_t **)(v7 + 128)) != 0))
  {
    v45 = *v41;
    if (*v41)
    {
      v271.i64[0] = (uint64_t)&off_1E159A5D8;
      v271.i64[1] = (uint64_t)a1;
      *(_QWORD *)&v272 = a2;
      (*(void (**)(uint64_t, int8x16_t *))(*(_QWORD *)v45 + 232))(v45, &v271);
    }
  }
  if ((*(_WORD *)(a2 + 40) & 8) == 0)
    goto LABEL_99;
  v46 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 256);
  if (v46)
  {
    v47 = (os_unfair_lock_s *)(v46 + 36);
    os_unfair_lock_lock((os_unfair_lock_t)(v46 + 36));
    v48 = *(_QWORD *)(v46 + 40);
    if (!v48 || (v49 = *(_QWORD *)(v48 + 64), v50 = *(_QWORD *)(v48 + 72), v49 == v50))
    {
LABEL_97:
      os_unfair_lock_unlock((os_unfair_lock_t)(v46 + 36));
    }
    else
    {
      while (*(_QWORD *)v49 != *(_QWORD *)(v46 + 24))
      {
        v49 += 168;
        if (v49 == v50)
          goto LABEL_97;
      }
      if (*(_BYTE *)(v49 + 161))
      {
        v99 = *(unsigned __int8 *)(v49 + 160);
        os_unfair_lock_unlock(v47);
        if (!v99)
          goto LABEL_98;
      }
      else
      {
        os_unfair_lock_unlock((os_unfair_lock_t)(v46 + 36));
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 104) + 220) |= 0x100000u;
    }
  }
LABEL_98:
  *(_DWORD *)(*(_QWORD *)(a2 + 104) + 220) |= 0x800000u;
LABEL_99:
  v51 = *(_QWORD *)(a2 + 32);
  if ((v51 & 8) != 0)
    goto LABEL_158;
  if ((*(_BYTE *)(v7 + 45) & 4) != 0)
  {
    v51 |= 0x20uLL;
    *(_QWORD *)(a2 + 32) = v51;
  }
  v52 = *(_BYTE **)(*(_QWORD *)(a2 + 16) + 48);
  if (v52 && (*(_BYTE *)(v8 + 27) & 2) == 0)
  {
    *(_QWORD *)(a2 + 32) = v51 | 0x100;
    if (v52[12] == 26)
      *(_DWORD *)(*(_QWORD *)(a2 + 104) + 220) |= 0x100000u;
    if ((*(_BYTE *)(v7 + 41) & 0x80) != 0 && (*(_BYTE *)(*(_QWORD *)(a2 + 24) + 43) & 4) != 0)
      *(_DWORD *)(*(_QWORD *)(a2 + 104) + 220) |= 0x100000u;
    if ((*(_BYTE *)(v7 + 36) & 0xE) != 0)
      *(_DWORD *)(*(_QWORD *)(a2 + 104) + 220) |= 0x100000u;
    v53 = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v52 + 80))(v52);
    if (v53)
    {
      v54 = v53;
      if ((v53[14] & 4) == 0
        && ((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v53 + 200))(v53)
         || (*(unsigned int (**)(float *, _BYTE *))(*(_QWORD *)v263 + 568))(v263, v54)))
      {
        *(_DWORD *)(*(_QWORD *)(a2 + 104) + 220) |= 0x100000u;
      }
      v55 = *(_QWORD *)(a2 + 32);
      if ((v55 & 0x20) != 0 && (v54[13] & 0x10) != 0 && (*(_DWORD *)(v7 + 36) & 0xD000) == 0x9000)
      {
        v56 = *(_QWORD *)(v7 + 128);
        if (!v56 || !*(_QWORD *)(v56 + 32) && *(float *)(v56 + 276) == 1.0)
          *(_QWORD *)(a2 + 32) = v55 & 0xFFFFFFFFFFFFFFDFLL;
      }
    }
  }
  if (*(_BYTE *)(v7 + 33))
  {
    v57 = *(_QWORD *)(v7 + 128);
    if (v57)
      v58 = *(float32x4_t *)(v57 + 200);
    else
      v58 = (float32x4_t)xmmword_18474DFE0;
    if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqzq_f32(v58)))) & 1) != 0)
    {
      v59 = *(_QWORD *)(v7 + 40);
      if ((v59 & 0x200000000) != 0
        || (v60 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 208)) == 0
        || !CA::Shape::contains(v60, (const CA::Bounds *)(a1 + 4)))
      {
        if ((v59 & 0x400000000) != 0 || v57 && *(_QWORD *)(v57 + 120))
        {
          *(_QWORD *)(a2 + 32) |= 0x1000uLL;
          v61 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 184))(*a1, 4) - 64;
          if ((*(_BYTE *)(v7 + 44) & 4) != 0)
          {
            v65 = v7 + 64;
          }
          else
          {
            v63 = *(_QWORD *)(v7 + 128);
            if (v63)
              v64 = *(CA::Render::Path **)(v63 + 120);
            else
              v64 = 0;
            v65 = CA::Render::Path::bounding_rect(v64);
          }
          v66 = *(double *)(v65 + 16);
          v67 = *(_QWORD *)(v7 + 128);
          if (v67)
          {
            v68 = *(float *)(v67 + 280);
          }
          else
          {
            LOBYTE(v62) = *(_BYTE *)(v7 + 34);
            v68 = (float)v62;
          }
          v69 = v68;
          if (v66 <= *(double *)(v65 + 24))
            v66 = *(double *)(v65 + 24);
          if (v66 * v69 > (double)v61)
            *(_DWORD *)(*(_QWORD *)(a2 + 104) + 220) |= 0x100000u;
        }
        else
        {
          *(_QWORD *)(a2 + 32) |= 0x800uLL;
        }
      }
    }
  }
  v70 = *(_QWORD *)(v8 + 104);
  if (v70 == v8 + 96)
  {
LABEL_158:
    v71 = 0;
    goto LABEL_159;
  }
  v71 = 0;
  while (1)
  {
    if ((*(_QWORD *)(v70 + 24) & 0x18) != 0 && (*(_QWORD *)(v70 + 24) & 0x1000) == 0)
      goto LABEL_156;
    v73 = *(_QWORD *)(a2 + 32);
    if ((v73 & 0x200) != 0)
      break;
    *(_QWORD *)(a2 + 32) = v73 | 0x200;
    v71 = v70;
LABEL_156:
    v70 = *(_QWORD *)(v70 + 8);
    if (v70 == v8 + 96)
      goto LABEL_159;
  }
  v71 = 0;
  *(_QWORD *)(a2 + 32) = v73 | 0x400;
LABEL_159:
  v74 = *(CA::Mat4Impl **)(v8 + 56);
  if (v74)
  {
    CA::Transform::set(a2 + 144, v74, 1);
LABEL_164:
    if ((CA::OGL::maybe_concatenate((CA::OGL *)(a2 + 144), *((CA::Transform **)v4 + 3), a3, a4) & 1) == 0)
    {
      *(_QWORD *)(a2 + 32) |= 0x1800000uLL;
      *(_DWORD *)(a2 + 300) |= 0x20000u;
      *(_WORD *)(v9 + 124) = *(_WORD *)(v9 + 124) & 0xFCFF | 0x200;
    }
  }
  else
  {
    v75 = *(double *)(v8 + 80);
    if (fabs(v75) >= 0.001)
    {
      v81 = *(_OWORD *)(v8 + 64);
      *(_OWORD *)(a2 + 144) = xmmword_18474DF40;
      *(_QWORD *)(a2 + 160) = 0;
      *(_QWORD *)(a2 + 168) = 0;
      *(_OWORD *)(a2 + 176) = xmmword_18474DF50;
      *(_OWORD *)(a2 + 192) = 0u;
      *(_OWORD *)(a2 + 208) = 0u;
      *(_OWORD *)(a2 + 224) = xmmword_18474DF40;
      *(_OWORD *)(a2 + 240) = v81;
      *(_OWORD *)(a2 + 256) = xmmword_18474DF50;
      *(double *)(a2 + 256) = v75;
      __asm { FMOV            V1.2D, #1.0 }
      *(_OWORD *)(a2 + 272) = _Q1;
      *(_BYTE *)(a2 + 288) = *(_BYTE *)(a2 + 288) & 0xE0 | (16 * (v75 != 0.0));
      goto LABEL_164;
    }
    CA::Transform::operator=(a2 + 144, *((_QWORD *)v4 + 3));
    v79 = CA::Transform::translate(v76, *(double *)(v8 + 64), *(double *)(v8 + 72), 0.0);
  }
  v83 = *(_QWORD *)(v7 + 40);
  v84 = v83 & 0xC0000;
  v85 = *(_QWORD *)(v7 + 128);
  if (v85)
  {
    v86 = *(float *)(v85 + 284);
    if (!v84)
      goto LABEL_173;
  }
  else
  {
    LOBYTE(v79.f64[0]) = *(_BYTE *)(v7 + 35);
    v86 = (float)LODWORD(v79.f64[0]);
    if (!v84)
      goto LABEL_173;
  }
  if ((v83 & 0x200000) != 0
    && (float)((float)*(unsigned int *)(a1[1] + 312) / (float)(*(_DWORD *)(a1[1] + 204) * *(_DWORD *)(a1[1] + 200))) >= 0.95)
  {
LABEL_173:
    v87 = 0;
  }
  else
  {
    *(_DWORD *)(a2 + 300) |= 0x1000000u;
    v85 = *(_QWORD *)(v7 + 128);
    v87 = 1;
  }
  v267 = v9 + 56;
  v88 = v86;
  if (v85 && *(_QWORD *)(v85 + 112))
  {
    if ((v87 & 1) != 0
      || (*(_WORD *)(a2 + 40) & 8) == 0
      || (*(_BYTE *)(a2 + 288) & 0x10) != 0 && !CA::Mat4Impl::mat4_is_rectilinear((CA::Mat4Impl *)(a2 + 144), v77))
    {
      goto LABEL_202;
    }
    v89 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 128);
    if (!v89)
      goto LABEL_202;
    v90 = *(_QWORD *)(v89 + 112);
    if (!v90)
      goto LABEL_202;
    if (!*(_BYTE *)(v90 + 108))
      goto LABEL_202;
    if (*(float *)(v89 + 228) > 0.0)
      goto LABEL_202;
    CA::Render::Layer::max_corner_radii(v89);
    if (v79.f64[0] > 0.0)
      goto LABEL_202;
    v91 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 256);
    if (!v91)
      goto LABEL_202;
    v264 = v4;
    v92 = (os_unfair_lock_s *)(v91 + 36);
    os_unfair_lock_lock((os_unfair_lock_t)(v91 + 36));
    v93 = *(_QWORD *)(v91 + 40);
    if (!v93)
    {
      os_unfair_lock_unlock((os_unfair_lock_t)(v91 + 36));
      v4 = v264;
      goto LABEL_202;
    }
    v94 = (os_unfair_lock_s *)(v93 + 40);
    os_unfair_lock_lock((os_unfair_lock_t)(v93 + 40));
    v95 = *(_QWORD *)(v93 + 72) - *(_QWORD *)(v93 + 64);
    os_unfair_lock_unlock(v94);
    os_unfair_lock_unlock(v92);
    _ZF = v95 == 168;
    v4 = v264;
    if (!_ZF)
    {
LABEL_202:
      *(_DWORD *)(a2 + 300) |= 0x4000000u;
      v100 = 1.0;
      if (v86 > 0.0)
        goto LABEL_203;
LABEL_205:
      *(_QWORD *)(a2 + 32) |= 0x800000uLL;
      *(_WORD *)(v9 + 124) = *(_WORD *)(v9 + 124) & 0xFCFF | 0x200;
      v101 = (CA::Transform *)x_heap_malloc_small_((uint64_t *)a1[7], 0x98uLL);
      CA::Transform::operator=((uint64_t)v101, a2 + 144);
      v79 = (float64x2_t)CA::Transform::operator=(a2 + 144, (uint64_t)&CA::identity_transform);
      v88 = v100;
      goto LABEL_207;
    }
    *(_WORD *)(a2 + 40) |= 0x10u;
  }
  v96 = v86 <= 0.0;
  v97 = 1.0;
  if (v96)
    v88 = 1.0;
  if (((*(_QWORD *)(v8 + 264) == 0) & ~v87) != 0)
  {
    v98 = 0;
    v262 = 0;
  }
  else
  {
LABEL_203:
    if (v88 > 0.0)
    {
      v100 = v88;
      goto LABEL_205;
    }
    v101 = 0;
LABEL_207:
    v97 = 1.0;
    v262 = v101;
    if (v88 == 1.0)
    {
      v98 = 1;
    }
    else
    {
      v79.f64[0] = v88;
      v102 = CA::Transform::scale_2d((CA::Transform *)(a2 + 144), v79);
      v102.f64[0] = 1.0 / v88;
      CA::Transform::scale_2d(v101, v102);
      v98 = 1;
      v97 = v88;
    }
    v88 = 1.0;
  }
  v261 = (CA::Mat4Impl *)(a2 + 144);
  *(_QWORD *)(v9 + 80) = a2 + 144;
  v103 = *(_QWORD *)(a2 + 32);
  if ((v103 & 0x2000000) != 0)
  {
    v108 = v103 & 0xFFFFFFFCFFFFE7BFLL;
    *(_QWORD *)(a2 + 32) = v103 & 0xFFFFFFFCFFFFE7BFLL;
  }
  else
  {
    v265 = v4;
    v271.i32[0] = 0;
    v104 = *(_QWORD *)(v7 + 128);
    if (v104)
    {
      v105 = 0;
      v106 = 0;
      if ((v103 & 0x8000) == 0)
      {
        v107 = *(unsigned int **)(v104 + 96);
        if (v107)
        {
          v105 = CA::OGL::prepare_filters((CA::Render::Update **)a1, (const CA::Render::LayerNode *)a2, v107, 0, v271.i32, 0);
          v103 = *(_QWORD *)(a2 + 32);
          v106 = v271.i32[0];
        }
      }
    }
    else
    {
      v106 = 0;
      v105 = 0;
    }
    if ((v103 & 0x100000840) != 0)
    {
      if (v106 <= 1)
        v106 = 1;
      v271.i32[0] = v106;
    }
    v260 = v98;
    if (CA::OGL::test_source_requirement(v106, *(CA::Mat4Impl **)(v9 + 80)))
    {
      v109 = 0;
      v259 = 0;
      v258 = 0;
      if (!v105)
        goto LABEL_268;
LABEL_231:
      v118 = v103 | 0x40000;
      *(_QWORD *)(a2 + 32) = v103 | 0x40000;
      if (v105[1] || (v121 = (CA::ColorMatrix *)v105[6]) != 0 && !CA::ColorMatrix::is_alpha_identity(v121))
      {
LABEL_232:
        *(_QWORD *)(a2 + 32) = v118 | 0x40000000;
      }
      else
      {
        v122 = v105[2];
        if (v122)
        {
          v123 = *(_QWORD *)(v122 + 48);
          if (v123)
          {
            if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v123 + 40))(v123) & 1) == 0)
            {
              v118 = *(_QWORD *)(a2 + 32);
              goto LABEL_232;
            }
          }
          else if ((*(_DWORD *)(v122 + 12) & 0x40100) == 0x100)
          {
            v166 = 0;
            while (*(_DWORD *)(v122 + 24) != (unsigned __int16)CA::Render::Filter::is_opacity_commutative(void)const::atoms[v166])
            {
              if (++v166 == 3)
                goto LABEL_232;
            }
          }
        }
      }
      if (v105[1] || (v124 = (CA::ColorMatrix *)v105[6]) != 0 && !CA::ColorMatrix::is_diagonal(v124))
      {
LABEL_234:
        v119 = 0;
        v120 = *(_QWORD *)(a2 + 32) | 0x400000000;
      }
      else
      {
        v125 = v105[2];
        if (v125 && !*(_QWORD *)(v125 + 48) && (*(_DWORD *)(v125 + 12) & 0x40100) == 0x100)
        {
          v126 = 0;
          v127 = *(_DWORD *)(v125 + 24);
          while (v127 != (unsigned __int16)CA::Render::Filter::is_color_scale_commutative(void)const::atoms[v126])
          {
            if (++v126 == 4)
              goto LABEL_234;
          }
        }
        v120 = *(_QWORD *)(a2 + 32);
        v119 = 1;
      }
      v128 = v120 & 0x1000;
      if ((v120 & 0x1000) != 0)
        v120 = v120 & 0xFFFFFFFFFFFFE7FFLL | 0x800;
      if (v120 & 0x200000000 | v128 || (v119 & 1) == 0)
      {
        v129 = v120 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
        if ((v120 & 0x200000000) == 0)
          v129 = v120;
        *(_QWORD *)(a2 + 32) = v129;
      }
      if (*((_DWORD *)v105 + 10))
      {
        v130 = 0;
        *(_QWORD *)(a2 + 104) = CA::OGL::cache_node((uint64_t)a1, a2, v105 + 5, *(_QWORD *)(a2 + 104));
      }
      else
      {
        v131 = v105;
        do
        {
          can_filter_in_place = CA::OGL::can_filter_in_place(v131);
          v130 = can_filter_in_place;
          v131 = (_QWORD *)*v131;
        }
        while (v131 && can_filter_in_place);
      }
      do
      {
        v130 &= *v105 != 0;
        *(_QWORD *)(a2 + 104) = CA::OGL::filter_node((uint64_t)a1, a2, (uint64_t)v105, *(_QWORD *)(a2 + 104) + 56, v130, *(_QWORD *)(a2 + 104));
        v133 = v105[2];
        if (v133 && *(_DWORD *)(v133 + 24) == 412)
          *(_WORD *)(v9 + 124) &= ~0x100u;
        v105 = (_QWORD *)*v105;
      }
      while (v105);
      v103 = *(_QWORD *)(a2 + 32);
    }
    else
    {
      v110 = x_heap_malloc_small_((uint64_t *)a1[7], 0x98uLL);
      v109 = (CA::Transform *)x_heap_malloc_small_((uint64_t *)a1[7], 0x98uLL);
      *(_OWORD *)v110 = xmmword_18474DF40;
      *(_OWORD *)(v110 + 16) = 0u;
      *(_OWORD *)(v110 + 32) = xmmword_18474DF50;
      *(_OWORD *)(v110 + 48) = 0u;
      *(_OWORD *)(v110 + 64) = 0u;
      *(_OWORD *)(v110 + 80) = xmmword_18474DF40;
      *(_OWORD *)(v110 + 96) = 0u;
      *(_OWORD *)(v110 + 112) = xmmword_18474DF50;
      __asm { FMOV            V0.2D, #1.0 }
      *(_OWORD *)(v110 + 128) = _Q0;
      *(_BYTE *)(v110 + 144) &= 0xE0u;
      v113 = CA::Transform::operator=((uint64_t)v109, *(_QWORD *)(v9 + 80));
      if (v106 != 7)
      {
        v114 = *(_QWORD *)(v9 + 80);
        if ((*(_BYTE *)(v114 + 144) & 0x10) != 0)
          v113.n128_f64[0] = CA::Mat4Impl::mat4_get_scale((CA::Mat4Impl *)v114, 0, 0, v112);
        else
          v113.n128_u64[0] = *(_QWORD *)(v114 + 128);
        v115 = round(v113.n128_f64[0] * 65536.0);
        v113.n128_f64[0] = v115 * 0.0000152587891;
        v116 = CA::Transform::scale_2d((CA::Transform *)v110, (float64x2_t)v113);
        v116.f64[0] = 65536.0 / v115;
        CA::Transform::scale_2d(v109, v116);
      }
      v117 = *(unsigned __int16 *)(v9 + 124);
      v259 = (v117 >> 8) & 1;
      *(_WORD *)(v9 + 124) = v117 & 0xFCFF | 0x200;
      v258 = *(_QWORD *)(v9 + 72);
      *(_QWORD *)(v9 + 72) = 0;
      *(_QWORD *)(v9 + 80) = v110;
      v103 = *(_QWORD *)(a2 + 32);
      if (v105)
        goto LABEL_231;
    }
LABEL_268:
    v134 = v103 & 0xFFFFFFFFFFFFE7FFLL | 0x800;
    if ((v103 & 0x100000800) == 0 || (v103 & 0x1000) == 0)
      v134 = v103;
    if ((v103 & 0x100000800) != 0 && (v134 & 0x200000000) != 0)
      v135 = v134 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
    else
      v135 = v134;
    v4 = v265;
    if ((v103 & 0x100000800) != 0 && (v103 & 0x1000) != 0
      || (v103 & 0x100000800) != 0 && (v134 & 0x200000000) != 0)
    {
      *(_QWORD *)(a2 + 32) = v135;
    }
    if ((v135 & 0x100000840) != 0)
    {
      v136 = *(_QWORD *)(a2 + 104);
      v137 = a1[9];
      if (v137)
        a1[9] = *(_QWORD *)v137;
      else
        v137 = x_heap_malloc_small_((uint64_t *)a1[7], 0xF8uLL);
      *(_QWORD *)(v137 + 48) = 0;
      *(_QWORD *)(v137 + 192) = 0;
      *(_QWORD *)(v137 + 200) = 0;
      *(_DWORD *)(v137 + 208) = 0;
      *(_WORD *)(v137 + 212) = *(_WORD *)(v137 + 212) & 0xC000 | 1;
      v138 = *(_DWORD *)(v137 + 220) & 0xFC000000;
      *(_DWORD *)(v137 + 216) = *(_DWORD *)(v137 + 216) & 0xFFC00000 | 0xF;
      *(_DWORD *)(v137 + 220) = v138;
      *(_QWORD *)(v137 + 16) = a2;
      *(_QWORD *)(v137 + 24) = v136;
      *(_QWORD *)(v137 + 32) = 0;
      *(_DWORD *)(v137 + 136) = -1;
      *(_QWORD *)v137 = &off_1E1593E10;
      *(_QWORD *)(v137 + 8) = a1;
      CA::OGL::init_gstate(v137 + 56, v136 + 56);
      if ((*(_QWORD *)(*(_QWORD *)(a2 + 24) + 40) & 0x200000000) != 0)
        v139 = 7;
      else
        v139 = 3;
      *(_BYTE *)(v137 + 124) = v139;
      *(_DWORD *)(v137 + 220) = *(_DWORD *)(v137 + 220) & 0xFFEE0000 | 0x100001;
      *(_QWORD *)(a2 + 104) = v137;
      v4 = v265;
    }
    if (v109)
    {
      CA::OGL::quad_node((uint64_t)a1, a2, *(_QWORD *)(a2 + 104), 1, 1, 0, 0.0);
      v267 = v140 + 56;
      *(_QWORD *)(v140 + 72) = v258;
      *(_QWORD *)(v140 + 80) = v109;
      if (v259)
        v141 = 256;
      else
        v141 = 512;
      *(_WORD *)(v140 + 124) = v141 | *(_WORD *)(v140 + 124) & 0xFCFF;
      *(_QWORD *)(v140 + 88) = *(_QWORD *)(v9 + 88);
      *(_QWORD *)(v9 + 88) = 0x3C003C003C003C00;
      *(_QWORD *)(a2 + 104) = v140;
    }
    v108 = *(_QWORD *)(a2 + 32);
    v98 = v260;
  }
  if ((v108 & 0x6000000) == 0)
  {
    if (*(_QWORD *)(*(_QWORD *)(a2 + 8) + 24))
    {
      v164 = *(_QWORD *)(v7 + 128);
      if (v164)
      {
        v78 = *(_QWORD *)(v164 + 104);
        if (v78)
        {
          v271.i32[0] = 0;
          v165 = CA::OGL::prepare_filters((CA::Render::Update **)a1, (const CA::Render::LayerNode *)a2, (unsigned int *)v78, 1, v271.i32, 0);
          *(_QWORD *)(a2 + 136) = v165;
          v108 = *(_QWORD *)(a2 + 32);
          if (v165)
          {
            v108 |= 0x80000uLL;
            *(_QWORD *)(a2 + 32) = v108;
          }
        }
      }
    }
  }
  if ((v108 & 0x200008) == 8)
  {
    v142 = v108;
  }
  else
  {
    v142 = v108 | 0x10000;
    v143 = v108 & 0x300007FE0;
    if ((v108 & 0x300007FE0) == 0)
      v142 = v108;
    v144 = (uint8x8_t)vcnt_s8((int8x8_t)v143);
    v144.i16[0] = vaddlv_u8(v144);
    if (v144.u32[0] > 1uLL)
      v142 |= 0x20000uLL;
    if (v143 || v144.u32[0] >= 2uLL)
    {
      *(_QWORD *)(a2 + 32) = v142;
      v108 = v142;
    }
  }
  v145 = *(_QWORD *)(v8 + 24);
  if ((v145 & 0x18000) != 0)
  {
    v108 = v142 | 0x800000;
    *(_QWORD *)(a2 + 32) = v142 | 0x800000;
    if ((v145 & 0x8000) != 0)
    {
      *(_DWORD *)(a2 + 300) |= 0x40000u;
      v145 = *(_QWORD *)(v8 + 24);
    }
    if ((v145 & 0x10000) != 0)
    {
      *(_DWORD *)(a2 + 300) |= 0x80000u;
      v145 = *(_QWORD *)(v8 + 24);
    }
    v142 |= 0x800000uLL;
  }
  if ((v145 & 0x4000) != 0 && (v142 & 0x40000) == 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(a2 + 24) + 43) & 0x40) != 0
      || (v146 = (*(uint64_t (**)(float *))(*(_QWORD *)v263 + 760))(v263),
          v142 = *(_QWORD *)(a2 + 32),
          v108 = v142,
          v146))
    {
      v108 = v142 | 0x800000;
      *(_QWORD *)(a2 + 32) = v142 | 0x800000;
      *(_DWORD *)(a2 + 300) |= 0x100000u;
      v142 |= 0x800000uLL;
    }
  }
  if ((~(_DWORD)v142 & 0x20004) == 0 && (*(_BYTE *)(v8 + 26) & 0x10) == 0)
  {
    v147 = *(_WORD *)(a2 + 40);
    if ((v147 & 2) != 0
      || (v147 & 1) != 0
      && (*(_BYTE *)(*(_QWORD *)(a2 + 24) + 43) & 0x20) != 0
      && (*(_BYTE *)(*a1 + 416) & 4) == 0
      && (*(_BYTE *)(*(_QWORD *)(a2 + 16) + 24) & 0x80) == 0)
    {
      v108 = v142 | 0x800000;
      *(_QWORD *)(a2 + 32) = v142 | 0x800000;
      *(_DWORD *)(a2 + 300) |= 0x200000u;
      v142 |= 0x800000uLL;
    }
  }
  if ((~(_DWORD)v142 & 0x40000004) == 0)
  {
    v108 = v142 | 0x800000;
    *(_QWORD *)(a2 + 32) = v142 | 0x800000;
    *(_DWORD *)(a2 + 300) |= 0x400000u;
    v142 |= 0x800000uLL;
  }
  if ((v142 & 0x400000000) != 0)
  {
    _H1 = *((_WORD *)v4 + 16);
    _H0 = *((_WORD *)v4 + 17);
    __asm
    {
      FCVT            S0, H0
      FCVT            S1, H1
    }
    if (_S1 != _S0)
      goto LABEL_325;
    _H1 = *((_WORD *)v4 + 18);
    __asm { FCVT            S1, H1 }
    if (_S0 != _S1)
      goto LABEL_325;
    _H0 = *((_WORD *)v4 + 19);
    __asm { FCVT            S0, H0 }
    if (_S1 != _S0)
    {
LABEL_325:
      v108 = v142 | 0x800000;
      *(_QWORD *)(a2 + 32) = v142 | 0x800000;
      *(_DWORD *)(a2 + 300) |= 0x400000u;
      v142 |= 0x800000uLL;
    }
  }
  if (*((_QWORD *)v4 + 4) != 0x3C003C003C003C00)
  {
    _H0 = WORD2(*((_QWORD *)v4 + 4));
    __asm { FCVT            S1, H0 }
    if (_S1 > 1.0)
      goto LABEL_330;
    _H1 = *((_QWORD *)v4 + 4);
    __asm { FCVT            S1, H1 }
    if (_S1 > 1.0)
      goto LABEL_330;
    _H0 = WORD1(*((_QWORD *)v4 + 4));
    __asm { FCVT            S0, H0 }
    if (_S0 > 1.0)
    {
LABEL_330:
      v108 = v142 | 0x1000000000;
      *(_QWORD *)(a2 + 32) = v142 | 0x1000000000;
      v142 |= 0x1000000000uLL;
    }
  }
  if ((*(_BYTE *)(*(_QWORD *)(a2 + 24) + 43) & 1) != 0)
  {
    v108 = v142 | 0x800000;
    *(_QWORD *)(a2 + 32) = v142 | 0x800000;
    v142 |= 0x800000uLL;
    if ((v142 & 0x100000) != 0)
      goto LABEL_354;
LABEL_333:
    if ((v142 & 0x800000) == 0)
      goto LABEL_334;
  }
  else
  {
    if ((v142 & 0x100000) == 0)
      goto LABEL_333;
LABEL_354:
    if (!v71 || (v167 = *(_QWORD *)(v71 + 32), (v168 = *(_QWORD *)(v167 + 128)) != 0) && *(_QWORD *)(v168 + 96))
    {
      v169 = 0;
    }
    else
    {
      v288 = 0u;
      v289 = 0u;
      v286 = 0u;
      v287 = 0u;
      v284 = 0u;
      v285 = 0u;
      v282 = 0u;
      v283 = 0u;
      v280 = 0u;
      v281 = 0u;
      v278 = 0u;
      v279 = 0u;
      v276 = 0u;
      v277 = 0u;
      v274 = 0u;
      v275 = 0u;
      v272 = 0u;
      v273 = 0u;
      v271 = 0u;
      WORD5(v273) = 3;
      v170 = *(_QWORD *)(v167 + 128);
      if (v170)
      {
        v78 = *(_QWORD *)(v170 + 88);
        if (v78 && (*(_BYTE *)(v78 + 13) & 1) != 0)
        {
          CA::OGL::prepare_compositing_filter(a1, (int8x8_t *)&v271, v78, 1);
          LODWORD(v170) = v273;
          v108 = *(_QWORD *)(a2 + 32);
          LODWORD(v142) = v108;
        }
        else
        {
          LODWORD(v170) = 0;
        }
      }
      v169 = (v170 & 0x100000) == 0;
    }
    if ((v142 & 0x80820000) != 0)
      goto LABEL_365;
    if ((v142 & 0x200000) != 0 && (*(_WORD *)(a2 + 40) & 8) == 0)
    {
      if ((v142 & 0x30000) != 0x10000
        || (v142 & 0x6120) == 0
        || (v142 & 0x100) != 0 && (*(_DWORD *)(*(_QWORD *)(a2 + 24) + 36) & 0xF000) != 0x9000
        || (*((_WORD *)v4 + 34) & 0x100) == 0
        || (*(_BYTE *)(a2 + 288) & 0x10) != 0 && !CA::Mat4Impl::mat4_is_rectilinear(v261, v77))
      {
        goto LABEL_365;
      }
      v176 = *(_QWORD *)(a2 + 24);
      v177 = *(_OWORD *)(v176 + 80);
      v271 = *(int8x16_t *)(v176 + 64);
      v272 = v177;
      *(double *)v178.i64 = CA::Rect::apply_transform(&v271, v261, (double *)v78);
      v180 = *((_DWORD *)a1 + 10);
      v181 = *((_DWORD *)a1 + 11);
      if (v180 <= v181)
        v182 = *((_DWORD *)a1 + 11);
      else
        v182 = *((_DWORD *)a1 + 10);
      v178.i32[0] = 1073741822;
      v179.i32[0] = v182;
      v183 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v179, v178), 0);
      v184 = a1[4];
      v185.i64[0] = (int)v184;
      v185.i64[1] = SHIDWORD(v184);
      v186 = vbslq_s8(v183, (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v185));
      v187 = (double)v180;
      if (v182 > 1073741822)
        v187 = 1.79769313e308;
      v268 = v186;
      v188 = v182 <= 1073741822 ? (double)v181 : 1.79769313e308;
      v269 = v187;
      v270 = v188;
      if (!CA::BoundsImpl::contains((double *)v271.i64, (double *)v268.i64))
      {
        v233 = *(_QWORD *)(a2 + 8);
        if (!v233
          || (*(_BYTE *)(v233 + 288) & 0x10) != 0
          && !CA::Mat4Impl::mat4_is_rectilinear((CA::Mat4Impl *)(v233 + 144), v77))
        {
          goto LABEL_365;
        }
        v234 = *(_QWORD *)(v233 + 16);
        v235 = *(_DWORD *)(v234 + 168);
        v236 = *(_DWORD *)(v234 + 172);
        if (v235 <= v236)
          v237 = *(_DWORD *)(v234 + 172);
        else
          v237 = *(_DWORD *)(v234 + 168);
        v190.i32[0] = 1073741822;
        v80.i32[0] = v237;
        v238 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v80, v190), 0);
        v239 = *(_QWORD *)(v234 + 160);
        v240.i64[0] = (int)v239;
        v240.i64[1] = SHIDWORD(v239);
        v241 = vbslq_s8(v238, (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v240));
        v242 = (double)v235;
        if (v237 > 1073741822)
          v242 = 1.79769313e308;
        v268 = v241;
        v243 = v237 <= 1073741822 ? (double)v236 : 1.79769313e308;
        v269 = v242;
        v270 = v243;
        CA::Rect::apply_transform(&v268, (const CA::Transform *)(v233 + 144), v189);
        if (!CA::BoundsImpl::contains((double *)v271.i64, (double *)v268.i64))
          goto LABEL_365;
      }
    }
    if ((v108 & 0x200) != 0 && !v169)
    {
LABEL_365:
      *(_QWORD *)(a2 + 32) = v108 | 0x800000;
      *(_DWORD *)(a2 + 300) |= 0x800000u;
      goto LABEL_366;
    }
    if (!(!v169 | (v108 >> 18) & 1))
    {
      v192 = *(_WORD *)(a2 + 42);
      *(_OWORD *)(a2 + 48) = *(_OWORD *)(a2 + 64);
      *(_QWORD *)(a2 + 80) = *(_QWORD *)(a2 + 88);
      *(_WORD *)(a2 + 42) = (v192 << 8) | 3;
      v142 = v108 & 0xFFFFFFFFFFEFFFFFLL;
      *(_QWORD *)(a2 + 32) = v108 & 0xFFFFFFFFFFEFFFFFLL;
      if ((v108 & 0x800000) != 0)
        goto LABEL_366;
LABEL_334:
      if ((v142 & 4) != 0)
      {
        v162 = *(_WORD *)(a2 + 40);
        if ((v162 & 2) != 0
          || (v162 & 1) != 0
          && (*(_BYTE *)(*(_QWORD *)(a2 + 24) + 43) & 0x20) != 0
          && (*(_BYTE *)(*a1 + 416) & 4) == 0
          && (*(_BYTE *)(*(_QWORD *)(a2 + 16) + 24) & 0x80) == 0)
        {
          *(_WORD *)(a2 + 40) = v162 | 4;
        }
      }
      v163 = v267;
      if ((v142 & 0x210000) == 0x200000)
      {
        v142 |= 0x10020uLL;
        goto LABEL_446;
      }
      goto LABEL_447;
    }
    v142 = v108;
    if ((v108 & 0x800000) == 0)
      goto LABEL_334;
  }
LABEL_366:
  v171 = *(_QWORD *)(a2 + 104);
  if (!v98)
    goto LABEL_438;
  v172 = *(_QWORD *)(v7 + 40);
  if ((v172 & 0x80000) != 0)
  {
    v193 = *(_QWORD *)(v7 + 144);
    if (v193)
    {
      v194 = *(_DWORD *)(v193 + 72);
      if (!v194)
      {
        do
        {
          v195 = __ldaxr(CA::Render::next_cache_id(void)::cache_id);
          v194 = v195 + 1;
        }
        while (__stlxr(v194, CA::Render::next_cache_id(void)::cache_id));
        *(_DWORD *)(v193 + 72) = v194;
        *(_DWORD *)(v193 + 76) = 0;
      }
      v196 = a1[9];
      if (v196)
      {
        a1[9] = *(_QWORD *)v196;
      }
      else
      {
        v196 = x_heap_malloc_small_((uint64_t *)a1[7], 0xF8uLL);
        v194 = *(_DWORD *)(v193 + 72);
      }
      *(_QWORD *)(v196 + 48) = 0;
      *(_QWORD *)(v196 + 192) = 0;
      *(_QWORD *)(v196 + 200) = 0;
      *(_DWORD *)(v196 + 208) = 0;
      *(_WORD *)(v196 + 212) = *(_WORD *)(v196 + 212) & 0xC000 | 1;
      v197 = *(_DWORD *)(v196 + 220) & 0xFC000000;
      *(_DWORD *)(v196 + 216) = *(_DWORD *)(v196 + 216) & 0xFFC00000 | 0xF;
      *(_DWORD *)(v196 + 220) = v197;
      *(_QWORD *)(v196 + 16) = a2;
      *(_QWORD *)(v196 + 24) = v171;
      *(_QWORD *)(v196 + 32) = 0;
      *(_DWORD *)(v196 + 136) = -1;
      *(_QWORD *)v196 = &off_1E1593F28;
      *(_QWORD *)(v196 + 8) = a1;
      *(_DWORD *)(v196 + 224) = v194;
      *(_DWORD *)(v171 + 220) |= 0x400000u;
      CA::OGL::copy_gstate(v196 + 56, v171 + 56);
      *(_DWORD *)(v196 + 220) = *(_DWORD *)(v196 + 220) & 0xFFEE0000 | 0x101000;
      v171 = v196;
    }
  }
  else if ((v172 & 0x240000) == 0x40000 && (*(_DWORD *)(a1[1] + 1064) & 4) == 0)
  {
    v173 = *(_QWORD *)(v7 + 144);
    if (v173)
    {
      if (!*(_DWORD *)(v173 + 72))
      {
        do
        {
          v174 = __ldaxr(CA::Render::next_cache_id(void)::cache_id);
          v175 = v174 + 1;
        }
        while (__stlxr(v175, CA::Render::next_cache_id(void)::cache_id));
        *(_DWORD *)(v173 + 72) = v175;
        *(_DWORD *)(v173 + 76) = 0;
      }
      v171 = CA::OGL::cache_node((uint64_t)a1, a2, (_QWORD *)(v173 + 72), v171);
    }
  }
  v266 = v4;
  v198 = *(_DWORD *)(v7 + 36);
  if ((v198 & 0xFu) > 0xA)
    v199 = 1;
  else
    v199 = CA::OGL::texture_filter(CA::Render::ImageFilter)::filters[v198 & 0xF];
  v200 = v198 >> 4;
  if (v200 > 0xA)
    v201 = 1;
  else
    v201 = CA::OGL::texture_filter(CA::Render::ImageFilter)::filters[v200];
  v202 = *(_QWORD *)(v7 + 128);
  if (v202)
    v203 = *(float *)(v202 + 288);
  else
    v203 = 0.0;
  v204 = *(int8x8_t *)(*(_QWORD *)(a2 + 16) + 264);
  if (v204)
  {
    v205 = (int8x8_t *)a1[9];
    if (v205)
      a1[9] = *v205;
    else
      v205 = (int8x8_t *)x_heap_malloc_small_((uint64_t *)a1[7], 0xF8uLL);
    v205[6] = 0;
    v205[24] = 0;
    v205[25] = 0;
    v205[26].i32[0] = 0;
    v205[26].i16[2] = v205[26].i16[2] & 0xC000 | 1;
    v205[2] = (int8x8_t)a2;
    v205[3] = (int8x8_t)v171;
    v205[4] = 0;
    v205[17].i32[0] = -1;
    *v205 = (int8x8_t)&off_1E1595160;
    v205[1] = (int8x8_t)a1;
    v205[28] = v204;
    v205[27] = vorr_s8(vand_s8(v205[27], (int8x8_t)0xFC000000FFC00000), (int8x8_t)0x4000000000000FLL);
    CA::OGL::copy_gstate((uint64_t)&v205[7], v171 + 56);
    v205[27].i32[1] = v205[27].i32[1] & 0xFFEE0000 | 0x110000;
    v202 = *(_QWORD *)(v7 + 128);
    if (v202)
    {
LABEL_427:
      v206 = *(_QWORD *)(v202 + 112);
      if (v206)
      {
        os_unfair_lock_lock((os_unfair_lock_t)(v206 + 16));
        CA::Render::MeshTransform::update_locked((CA::Render::MeshTransform *)v206, 1);
        os_unfair_lock_unlock((os_unfair_lock_t)(v206 + 16));
        v171 = a1[9];
        if (v171)
          a1[9] = *(_QWORD *)v171;
        else
          v171 = x_heap_malloc_small_((uint64_t *)a1[7], 0xF8uLL);
        *(_QWORD *)(v171 + 48) = 0;
        *(_QWORD *)(v171 + 192) = 0;
        *(_QWORD *)(v171 + 200) = 0;
        *(_DWORD *)(v171 + 208) = 0;
        *(_WORD *)(v171 + 212) = *(_WORD *)(v171 + 212) & 0xC000 | 1;
        v211 = *(_DWORD *)(v171 + 220) & 0xFC000000;
        *(_DWORD *)(v171 + 216) = *(_DWORD *)(v171 + 216) & 0xFFC00000 | 0xF;
        *(_DWORD *)(v171 + 220) = v211;
        *(_QWORD *)(v171 + 16) = a2;
        *(_QWORD *)(v171 + 24) = v205;
        *(_QWORD *)(v171 + 32) = 0;
        *(_DWORD *)(v171 + 136) = -1;
        *(_QWORD *)v171 = &off_1E1595AA8;
        *(_QWORD *)(v171 + 8) = a1;
        *(_BYTE *)(v171 + 224) = v199 & 0xF | (16 * v201);
        *(_QWORD *)(v171 + 232) = v206;
        v207 = v97;
        *(float *)(v171 + 240) = v207;
        *(float *)(v171 + 244) = v203;
        CA::OGL::init_gstate(v171 + 56, (uint64_t)&v205[7]);
        *(_DWORD *)(v171 + 220) = *(_DWORD *)(v171 + 220) & 0xFFEE0000 | 0x102000;
        v212.f64[0] = v97;
        v213 = CA::Transform::scale_2d(v262, v212);
        v214 = 0;
        *(_QWORD *)(v171 + 80) = v262;
        v4 = v266;
        if ((*((_WORD *)v266 + 34) & 0x100) != 0)
          v214 = ~*(_WORD *)(a2 + 34) & 0x100;
        *(_WORD *)(v171 + 124) = *(_WORD *)(v171 + 124) & 0xFEFF | v214;
        v215 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 24);
        if ((v215 & 0x18000) == 0
          && ((v215 & 0x4000) == 0
           || (*(_BYTE *)(*(_QWORD *)(a2 + 24) + 43) & 0x40) == 0
           && ((*(uint64_t (**)(float *, float64x2_t))(*(_QWORD *)v263 + 760))(v263, v213) & 1) == 0))
        {
          v210 = *(double *)(v206 + 168) != *(double *)(v206 + 192) && (*(_QWORD *)(a2 + 32) & 0x100004) != 0;
          goto LABEL_439;
        }
LABEL_438:
        v210 = 1;
        goto LABEL_439;
      }
    }
  }
  else
  {
    v205 = (int8x8_t *)v171;
    if (v202)
      goto LABEL_427;
  }
  CA::OGL::quad_node((uint64_t)a1, a2, (uint64_t)v205, v199, v201, (*(unsigned __int16 *)(a2 + 40) >> 6), v203);
  v171 = v208;
  *(_QWORD *)(v208 + 80) = v262;
  v4 = v266;
  if ((*((_WORD *)v266 + 34) & 0x100) != 0)
    v209 = ~*(_WORD *)(a2 + 34) & 0x100;
  else
    v209 = 0;
  v210 = 0;
  *(_WORD *)(v208 + 124) = *(_WORD *)(v208 + 124) & 0xFEFF | v209;
LABEL_439:
  if ((*(_BYTE *)(a2 + 35) & 1) != 0)
  {
    v216 = *((_QWORD *)v4 + 3);
    if (v88 != 1.0)
    {
      v217 = (CA::Transform *)x_heap_malloc_small_((uint64_t *)a1[7], 0x98uLL);
      v218 = CA::Transform::operator=((uint64_t)v217, v216);
      v218.n128_f64[0] = v88;
      CA::Transform::scale_2d_right(v261, v218, v219, v220, v221);
      v222.f64[0] = 1.0 / v88;
      CA::Transform::scale_2d(v217, v222);
      v216 = (uint64_t)v217;
    }
    CA::OGL::quad_node((uint64_t)a1, a2, v171, 1, 1, 0, 0.0);
    v171 = v223;
    *(_QWORD *)(v223 + 80) = v216;
    *(_QWORD *)(v223 + 72) = *((_QWORD *)v4 + 2);
    *(_WORD *)(v223 + 124) = *(_WORD *)(v223 + 124) & 0xFEFF | *((_WORD *)v4 + 34) & 0x100;
  }
  else if (v210)
  {
    v171 = CA::OGL::combine_node((uint64_t **)a1, a2, 3, v171 + 56, v171, 0, 0.0, 0.0, 0.0, 0.0);
    *(_DWORD *)(v171 + 220) = *(_DWORD *)(v171 + 220) & 0xFFFE0000 | 0x200;
  }
  *(_QWORD *)(v171 + 88) = *(_QWORD *)(v267 + 32);
  *(_QWORD *)(v267 + 32) = 0x3C003C003C003C00;
  v163 = v171 + 56;
  *(_QWORD *)(a2 + 104) = v171;
  v142 = *(_QWORD *)(a2 + 32) & 0xFFFFFFEFFFFFFFFFLL;
LABEL_446:
  *(_QWORD *)(a2 + 32) = v142;
LABEL_447:
  v224 = v163;
  if ((v142 & 0x840000) == 0x40000)
    v224 = *(_QWORD *)(a2 + 104) + 56;
  v225 = *(_DWORD *)(v8 + 116);
  if (v225 != -1)
  {
    v226 = bswap32(v225);
    v80.i32[0] = v226;
    v80.i32[1] = v226 >> 8;
    v80.i32[2] = HIWORD(v226);
    v227.i64[0] = 0xFF000000FFLL;
    v227.i64[1] = 0xFF000000FFLL;
    v228 = (int32x4_t)vandq_s8((int8x16_t)v80, v227);
    v228.i32[3] = vshrq_n_u32((uint32x4_t)vdupq_n_s32(v226), 0x18uLL).i32[3];
    v229 = vcvt_f16_f32(vmulq_f32(vcvtq_f32_s32(v228), (float32x4_t)vdupq_n_s32(0x3B808081u)));
    if (*(_QWORD *)(v163 + 32) != 0x3C003C003C003C00)
      v229 = vcvt_f16_f32(vmulq_f32(vcvtq_f32_f16(v229), vcvtq_f32_f16(*(float16x4_t *)(v224 + 32))));
    *(float16x4_t *)(v224 + 32) = v229;
  }
  v230 = *(_QWORD *)(v7 + 128);
  if (v230)
  {
    v231 = *(float *)(v230 + 292);
    if (v231 != 1.0)
    {
      CA::Render::Update::render_edr_factor((CA::Render::Update *)a1[1], (const CA::Render::LayerNode *)v77);
      v245 = 1.0 / v244;
      v246 = *(float *)(v224 + 64);
      if (v246 >= v245)
        v247 = v245;
      else
        v247 = *(float *)(v224 + 64);
      v248 = v246 * v231;
      *(float *)(v224 + 64) = v248;
      if (v248 < v245)
        v245 = v248;
      v249 = v245 / v247;
      if (v249 > 0.0)
      {
        v250 = powf(v249, 1.0 / v263[38]);
        _H1 = *(_WORD *)(v224 + 32);
        __asm { FCVT            S1, H1 }
        _S1 = v250 * _S1;
        __asm { FCVT            H1, S1 }
        *(_WORD *)(v224 + 32) = LOWORD(_S1);
        LOWORD(_S1) = *(_WORD *)(v224 + 34);
        __asm { FCVT            S1, H1 }
        _S1 = v250 * _S1;
        __asm { FCVT            H1, S1 }
        *(_WORD *)(v224 + 34) = LOWORD(_S1);
        LOWORD(_S1) = *(_WORD *)(v224 + 36);
        __asm { FCVT            S1, H1 }
        _S0 = v250 * _S1;
        __asm { FCVT            H0, S0 }
        *(_WORD *)(v224 + 36) = LOWORD(_S0);
      }
    }
  }
  return v163;
}

__n128 CA::Transform::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  int v9;
  unsigned int v10;

  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  v5 = *(_OWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  result = *(__n128 *)(a2 + 128);
  *(__n128 *)(a1 + 128) = result;
  v9 = *(_BYTE *)(a1 + 144) & 0xF8 | *(_BYTE *)(a2 + 144) & 7;
  *(_BYTE *)(a1 + 144) = v9;
  v10 = v9 & 0xFFFFFFF7 | (8 * ((*(unsigned __int8 *)(a2 + 144) >> 3) & 1));
  *(_BYTE *)(a1 + 144) = v10;
  *(_BYTE *)(a1 + 144) = v10 & 0xEF | *(_BYTE *)(a2 + 144) & 0x10;
  return result;
}

float64x2_t CA::Transform::translate(CA::Transform *this, double a2, double a3, double a4)
{
  char v4;
  double v5;
  double v6;
  double v7;
  float64x2_t result;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;

  v4 = *((_BYTE *)this + 144);
  if ((v4 & 0x10) != 0)
  {
    v13 = vmlaq_n_f64(vmlaq_n_f64(*((float64x2_t *)this + 6), *(float64x2_t *)this, a2), *((float64x2_t *)this + 2), a3);
    v14 = vmlaq_n_f64(vmlaq_n_f64(*((float64x2_t *)this + 7), *((float64x2_t *)this + 1), a2), *((float64x2_t *)this + 3), a3);
    result = *((float64x2_t *)this + 4);
    v15 = vmlaq_n_f64(v14, *((float64x2_t *)this + 5), a4);
    *((float64x2_t *)this + 6) = vmlaq_n_f64(v13, result, a4);
    *((float64x2_t *)this + 7) = v15;
  }
  else
  {
    if ((*((_BYTE *)this + 144) & 8) != 0)
    {
      v5 = *((double *)this + 16);
      a2 = v5 * a2;
      a3 = v5 * a3;
    }
    v6 = -a3;
    if ((*((_BYTE *)this + 144) & 4) == 0)
    {
      v6 = a2;
      a2 = a3;
    }
    v7 = -v6;
    if ((*((_BYTE *)this + 144) & 2) == 0)
      v7 = v6;
    if ((*((_BYTE *)this + 144) & 1) != 0)
      a2 = -a2;
    result.f64[0] = a2 + *((double *)this + 13);
    *((double *)this + 12) = v7 + *((double *)this + 12);
    *((_QWORD *)this + 13) = *(_QWORD *)&result.f64[0];
    if (a4 != 0.0)
    {
      *((double *)this + 14) = *((double *)this + 14) + a4;
      __asm { FMOV            V0.2D, #1.0 }
      *((float64x2_t *)this + 8) = result;
      *((_BYTE *)this + 144) = v4 & 0xE0 | 0x10;
    }
  }
  return result;
}

uint64_t CA::OGL::ImagingNode::needs_surface(CA::OGL::ImagingNode *this)
{
  return 0;
}

BOOL CA::OGL::test_source_requirement(int a1, CA::Mat4Impl *this)
{
  double v2;
  _BOOL8 result;

  switch(a1)
  {
    case 1:
      if ((*((_BYTE *)this + 144) & 0x10) == 0)
        return 1;
      if (*((double *)this + 3) == 0.0)
      {
        v2 = *((double *)this + 7);
        return v2 == 0.0;
      }
      return 0;
    case 2:
      if ((*((_BYTE *)this + 144) & 0x10) == 0)
        return 1;
      return CA::Mat4Impl::mat4_is_affine_with_z_translate(this, (const double *)this);
    case 3:
      if ((*((_BYTE *)this + 144) & 0x10) == 0)
        return 1;
      return CA::Mat4Impl::mat4_is_affine(this, (const double *)this);
    case 4:
      if ((*((_BYTE *)this + 144) & 0x10) == 0)
        return 1;
      return CA::Mat4Impl::mat4_is_rectilinear(this, (const double *)this);
    case 5:
      return (*((_BYTE *)this + 144) & 0x17) == 0;
    case 6:
      return (*((_BYTE *)this + 144) & 0x1F) == 0;
    case 7:
      result = 0;
      if ((*((_BYTE *)this + 144) & 0x1F) != 0 || *((double *)this + 12) != 0.0)
        return result;
      v2 = *((double *)this + 13);
      return v2 == 0.0;
    default:
      return 1;
  }
}

uint64_t CA::Render::Texture::bit_depth(CA::Render::Texture *this)
{
  unsigned int v1;

  v1 = (*(uint64_t (**)(CA::Render::Texture *))(*(_QWORD *)this + 104))(this);
  if (v1 - 33 < 3)
    return 9;
  if (v1 > 0x23)
    return 0;
  return dword_184750518[v1];
}

_DWORD *CA::OGL::prepare_compositing_filter(_DWORD *result, int8x8_t *a2, uint64_t a3, char a4)
{
  int v5;
  char v6;
  char v7;
  CA::Render::KeyValueArray *v8;
  int float_color_key;
  int8x8_t v10;
  unsigned int v11;
  int8x8_t v12;
  unsigned int v13;
  __int16 v14;
  char v15;
  char v16;
  int8x8_t v17;
  __int32 v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int32 v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  float32x4_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v5 = *(_DWORD *)(a3 + 24);
  if (v5 <= 381)
  {
    if (v5 <= 213)
    {
      switch(v5)
      {
        case 160:
          v7 = 30;
          goto LABEL_101;
        case 161:
          v6 = 49;
          goto LABEL_105;
        case 162:
        case 163:
        case 171:
        case 172:
        case 173:
        case 174:
        case 175:
        case 176:
        case 177:
        case 178:
        case 179:
        case 180:
          goto LABEL_102;
        case 164:
          v6 = 2;
          goto LABEL_105;
        case 165:
          v15 = 10;
          goto LABEL_73;
        case 166:
          v16 = 8;
          goto LABEL_93;
        case 167:
        case 168:
          v6 = 9;
          goto LABEL_105;
        case 169:
          v7 = 7;
          goto LABEL_101;
        case 170:
          v7 = 36;
          goto LABEL_101;
        case 181:
          v7 = 38;
          goto LABEL_101;
        default:
          switch(v5)
          {
            case 'X':
              a2[5].i16[1] = a2[5].u8[3] << 8;
              goto LABEL_94;
            case 'Y':
            case 'Z':
            case '[':
            case ']':
            case '_':
              goto LABEL_102;
            case '\\':
              v7 = 53;
              goto LABEL_101;
            case '^':
              v7 = 33;
              goto LABEL_101;
              v7 = 32;
              goto LABEL_101;
            default:
              if (v5 != 140)
                goto LABEL_102;
              v15 = 1;
              break;
          }
          goto LABEL_73;
      }
    }
    if (v5 > 350)
    {
      if (v5 <= 352)
      {
        if (v5 == 351)
          v7 = 39;
        else
          v7 = 19;
        goto LABEL_101;
      }
      switch(v5)
      {
        case 353:
          v7 = 40;
          goto LABEL_101;
        case 362:
          v7 = 54;
          goto LABEL_101;
        case 375:
          v7 = 18;
          goto LABEL_101;
      }
    }
    else if (v5 <= 257)
    {
      if (v5 == 214)
      {
        v7 = 20;
        goto LABEL_101;
      }
      if (v5 == 249)
      {
        v7 = 35;
        goto LABEL_101;
      }
    }
    else
    {
      switch(v5)
      {
        case 258:
          v7 = 51;
          goto LABEL_101;
        case 341:
          v7 = 31;
          goto LABEL_101;
        case 342:
          v7 = 50;
LABEL_101:
          a2[5].i8[2] = v7;
          goto LABEL_102;
      }
    }
    goto LABEL_102;
  }
  if (v5 > 503)
  {
    if (v5 <= 538)
    {
      switch(v5)
      {
        case 504:
          v7 = 34;
          goto LABEL_101;
        case 505:
        case 506:
        case 508:
        case 510:
        case 511:
          goto LABEL_102;
        case 507:
          v6 = 6;
          goto LABEL_105;
        case 509:
          v16 = 4;
          goto LABEL_93;
        case 512:
          v15 = 5;
          goto LABEL_73;
        case 513:
          goto LABEL_104;
        default:
          if (v5 == 537)
          {
            v7 = 37;
            goto LABEL_101;
          }
          if (v5 == 538)
          {
            v15 = 14;
LABEL_73:
            a2[5].i8[2] = v15;
            *(_QWORD *)&a2[4] |= 0x200000uLL;
          }
          break;
      }
      goto LABEL_102;
    }
    if ((v5 - 582) <= 0x10)
    {
      if (((1 << (v5 - 70)) & 0x6C) != 0)
      {
        v8 = *(CA::Render::KeyValueArray **)(a3 + 40);
        v28 = 0uLL;
        float_color_key = CA::Render::KeyValueArray::get_float_color_key(v8, (const CA::Render::KeyValueArray *)0x119, &v28);
        v10 = (int8x8_t)vcvt_f16_f32(v28);
        if (float_color_key)
          v11 = -1;
        else
          v11 = 0;
        a2[8] = vbsl_s8((int8x8_t)vdup_n_s16(v11), v10, (int8x8_t)0x3C003C003C003C00);
        result = (_DWORD *)CA::Render::KeyValueArray::get_float_color_key(v8, (const CA::Render::KeyValueArray *)0x11A, &v28);
        v12 = (int8x8_t)vcvt_f16_f32(v28);
        if ((_DWORD)result)
          v13 = -1;
        else
          v13 = 0;
        a2[9] = vbsl_s8((int8x8_t)vdup_n_s16(v13), v12, (int8x8_t)0x3C003C003C003C00);
        if ((v5 - 584) > 4)
          v14 = 3;
        else
          v14 = word_1847520B2[v5 - 584];
        a2[5].i16[1] = v14 | (a2[5].u8[3] << 8);
        goto LABEL_106;
      }
      if (v5 == 582)
      {
        if ((a4 & 1) == 0)
        {
          v31 = 0u;
          v32 = 0u;
          v29 = 0u;
          v30 = 0u;
          v28 = 0u;
          CA::OGL::get_filter_color_matrix(*(CA::OGL **)(a3 + 40), (const CA::Render::Filter *)&v28, (CA::ColorMatrix *)a3);
          result = malloc_type_malloc(0x50uLL, 0x100004052888210uLL);
          v18 = v28.i32[1];
          v19 = v29;
          *result = v28.i32[0];
          result[1] = HIDWORD(v19);
          v20 = HIDWORD(v30);
          v21 = *((_QWORD *)&v31 + 1);
          result[2] = DWORD2(v30);
          result[3] = HIDWORD(v21);
          v22 = *((_QWORD *)&v29 + 1);
          result[4] = v18;
          result[5] = v22;
          v23 = v32;
          result[6] = v20;
          result[7] = v23;
          v24 = v28.i32[3];
          result[8] = v28.i32[2];
          result[9] = HIDWORD(v22);
          v25 = DWORD1(v31);
          result[10] = v31;
          result[11] = HIDWORD(v23);
          v26 = v30;
          result[12] = v24;
          result[13] = v26;
          v27 = *((_QWORD *)&v32 + 1);
          result[14] = v25;
          result[15] = v27;
          result[16] = v19;
          result[17] = HIDWORD(v26);
          result[18] = v21;
          result[19] = HIDWORD(v27);
          a2[11] = (int8x8_t)result;
          a2[5].i16[0] |= 0x20u;
        }
        v6 = 42;
        goto LABEL_105;
      }
      if (v5 == 598)
      {
        v7 = 11;
        goto LABEL_101;
      }
    }
    if (v5 == 539)
    {
      v6 = 13;
LABEL_105:
      a2[5].i8[2] = v6;
      goto LABEL_106;
    }
    goto LABEL_102;
  }
  if (v5 > 414)
  {
    if (v5 <= 423)
    {
      if (v5 == 415)
      {
        v7 = 41;
        goto LABEL_101;
      }
      if (v5 == 422)
      {
        v7 = 26;
        goto LABEL_101;
      }
    }
    else
    {
      switch(v5)
      {
        case 424:
          a2[5].i8[2] = 12;
          result = (_DWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)result + 184))(*(_QWORD *)result, 33);
          if ((_DWORD)result)
          {
            v17 = a2[2];
            if (!*(_QWORD *)&v17 || (*(_BYTE *)(*(_QWORD *)&v17 + 25) & 4) == 0)
            {
              v7 = 56;
              goto LABEL_101;
            }
          }
          break;
        case 474:
          v7 = 52;
          goto LABEL_101;
        case 479:
          v7 = 16;
          goto LABEL_101;
      }
    }
    goto LABEL_102;
  }
  if (v5 > 385)
  {
    switch(v5)
    {
      case 386:
        v7 = 28;
        goto LABEL_101;
      case 394:
LABEL_104:
        v6 = 3;
        goto LABEL_105;
      case 409:
        v7 = 29;
        goto LABEL_101;
    }
LABEL_102:
    if ((a2[4].i8[3] & 0x20) == 0 || (*(_QWORD *)(*(_QWORD *)&a2[1] + 32) & 0x300807920) != 0x800000)
      goto LABEL_106;
    goto LABEL_104;
  }
  if (v5 == 382)
  {
    v16 = 17;
  }
  else
  {
    if (v5 != 385)
      goto LABEL_102;
    v16 = 15;
  }
LABEL_93:
  a2[5].i8[2] = v16;
LABEL_94:
  *(_QWORD *)&a2[4] |= 0x200000uLL;
LABEL_106:
  if (a2[5].i8[2] != 3)
    *(_QWORD *)&a2[4] |= 0x100000uLL;
  return result;
}

uint64_t CA::OGL::prepare_layer_image(CA::OGL::Renderer &,CA::OGL::Layer *,CA::OGL::Gstate const&)::visitor::visit_subclass(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;

  v2 = *(_QWORD *)(result + 16);
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 256);
  if (v3)
  {
    v5 = *(_DWORD *)(v3 + 56);
    v4 = *(_DWORD *)(v3 + 60);
    if (v5 < v4)
      v4 = v5;
    if (v4 >= 1)
    {
      v6 = *(_DWORD *)(a2 + 12);
      if ((v6 & 0x100) != 0)
      {
        *(_QWORD *)(v2 + 32) |= 0x4000uLL;
        v6 = *(_DWORD *)(a2 + 12);
      }
      if ((v6 & 0x500) != 0)
        *(_WORD *)(v2 + 40) |= 8u;
    }
  }
  if ((*(_BYTE *)(a2 + 13) & 0x10) != 0)
    *(_QWORD *)(v2 + 32) |= 0x8000uLL;
  return result;
}

{
  if (*(_BYTE *)(a2 + 16) == 3)
    *(_QWORD *)(*(_QWORD *)(result + 16) + 32) |= 0x4000uLL;
  return result;
}

{
  if (*(float *)(a2 + 28) > 0.0)
    *(_QWORD *)(*(_QWORD *)(result + 16) + 32) = *(_QWORD *)(*(_QWORD *)(result + 16) + 32) & 0xFFFFFFFFFFFFBFDFLL | 0x4000;
  return result;
}

float64x2_t CA::Transform::translate_right(float64x2_t *this, float64x2_t result, float64_t a3, double a4)
{
  float64_t v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;

  if ((LOBYTE(this[9].f64[0]) & 0x10) != 0)
  {
    result.f64[1] = a3;
    v5 = this[1];
    v6 = this[3];
    v7 = this[5];
    v8 = this[7];
    v9 = vmlaq_laneq_f64(this[2], result, v6, 1);
    v10 = vmlaq_laneq_f64(this[4], result, v7, 1);
    v11 = vmlaq_laneq_f64(this[6], result, v8, 1);
    *this = vmlaq_laneq_f64(*this, result, v5, 1);
    this[1] = vmlaq_laneq_f64(v5, (float64x2_t)0, v5, 1);
    this[2] = v9;
    this[3] = vmlaq_laneq_f64(v6, (float64x2_t)0, v6, 1);
    this[4] = v10;
    this[5] = vmlaq_laneq_f64(v7, (float64x2_t)0, v7, 1);
    this[6] = v11;
    this[7] = vmlaq_laneq_f64(v8, (float64x2_t)0, v8, 1);
  }
  else
  {
    result.f64[0] = this[6].f64[0] + result.f64[0];
    v4 = this[6].f64[1] + a3;
    this[6].f64[0] = result.f64[0];
    this[6].f64[1] = v4;
  }
  return result;
}

uint64_t CA::OGL::LayerNode::layer_node_p(CA::OGL::LayerNode *this)
{
  return 1;
}

int8x8_t CA::OGL::quad_node(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, __int16 a6, float a7)
{
  uint64_t v14;
  __int16 v15;
  int8x8_t result;

  v14 = *(_QWORD *)(a1 + 72);
  if (v14)
    *(_QWORD *)(a1 + 72) = *(_QWORD *)v14;
  else
    v14 = x_heap_malloc_small_(*(uint64_t **)(a1 + 56), 0xF8uLL);
  *(_WORD *)(v14 + 212) = *(_WORD *)(v14 + 212) & 0xC000 | 1;
  *(_QWORD *)(v14 + 48) = 0;
  *(_QWORD *)(v14 + 192) = 0;
  *(_QWORD *)(v14 + 200) = 0;
  *(_DWORD *)(v14 + 208) = 0;
  *(_QWORD *)(v14 + 16) = a2;
  *(_QWORD *)(v14 + 24) = a3;
  *(_QWORD *)(v14 + 32) = 0;
  *(_DWORD *)(v14 + 136) = -1;
  *(_QWORD *)v14 = &off_1E1595B38;
  *(_QWORD *)(v14 + 8) = a1;
  *(_WORD *)(v14 + 224) = a4 & 0xF | (16 * a5) | (a6 << 8);
  *(float *)(v14 + 228) = a7;
  *(_QWORD *)(v14 + 88) = 0x3C003C003C003C00;
  *(_QWORD *)(v14 + 96) = 0;
  *(_QWORD *)(v14 + 104) = 0;
  v15 = *(_WORD *)(v14 + 124);
  *(_QWORD *)(v14 + 112) = 0;
  *(_OWORD *)(v14 + 56) = 0uLL;
  *(_OWORD *)(v14 + 72) = 0uLL;
  *(_DWORD *)(v14 + 120) = 1065353216;
  *(_WORD *)(v14 + 124) = v15 & 0xF800 | 0x401;
  result = vorr_s8(vand_s8(*(int8x8_t *)(v14 + 216), (int8x8_t)0xFC000000FFC00000), (int8x8_t)0x1000800000000FLL);
  *(int8x8_t *)(v14 + 216) = result;
  return result;
}

uint16x4_t CA::OGL::prepare_layer_image(CA::OGL::Renderer &,CA::OGL::Layer *,CA::OGL::Gstate const&)::visitor::visit_subclass(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  BOOL v3;
  uint16x4_t result;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(float *)(a2 + 24) == 0.0;
  if (*(float *)(a2 + 28) != 0.0)
    v3 = 0;
  if (*(float *)(a2 + 32) != 0.0)
    v3 = 0;
  if (*(float *)(a2 + 36) != 0.0)
    v3 = 0;
  result = (uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqzq_f32(*(float32x4_t *)(a2 + 48))));
  result.i16[0] = vmaxv_u16(result);
  if ((result.i8[0] & 1) == 0 || (result = *(uint16x4_t *)(a2 + 88), *(double *)&result == 0.0))
  {
    if (!v3)
      *(_QWORD *)(v2 + 32) |= 0x2000uLL;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 32);
    *(_QWORD *)(v2 + 32) = v5 | 0x2000;
    if (!v3)
    {
      *(_QWORD *)(v2 + 32) = v5 | 0x22000;
      *(_WORD *)(v2 + 40) |= 2u;
    }
  }
  if (*(_QWORD *)(a2 + 40) || (result = *(uint16x4_t *)(a2 + 88), *(double *)&result != 0.0) && *(_QWORD *)(a2 + 64))
    *(_DWORD *)(*(_QWORD *)(v2 + 104) + 220) |= 0x100000u;
  return result;
}

uint64_t CA::Render::Surface::bit_depth(CA::Render::Surface *this)
{
  uint64_t v1;
  uint64_t result;

  v1 = *((unsigned int *)this + 27);
  if ((_DWORD)v1 == -1)
  {
    result = *((unsigned int *)this + 32);
    if ((_DWORD)result)
      return CA::Render::ycbcr_fourcc_depth((CA::Render *)result);
  }
  else if ((v1 - 33) >= 3)
  {
    if (v1 > 0x23)
      return 0;
    else
      return dword_184750518[v1];
  }
  else
  {
    return 9;
  }
  return result;
}

double CA::Transform::invert(int8x16_t *this, uint64_t a2, const double *a3)
{
  __int8 v3;
  double v4;
  double v5;
  double v6;
  double result;
  int v8;
  double v9;

  v3 = this[9].i8[0];
  if ((v3 & 0x10) != 0)
  {
    CA::Mat4Impl::mat4_invert((CA::Mat4Impl *)this, (CA::Mat4Impl *)this, a3);
    return result;
  }
  v4 = *(double *)this[6].i64;
  v5 = -*(double *)&this[6].i64[1];
  if ((this[9].i8[0] & 1) != 0)
    v5 = *(double *)&this[6].i64[1];
  if ((this[9].i8[0] & 2) == 0)
    v4 = -v4;
  if ((this[9].i8[0] & 4) != 0)
    v6 = v5;
  else
    v6 = v4;
  if ((this[9].i8[0] & 4) != 0)
    result = -v4;
  else
    result = v5;
  if ((this[9].i8[0] & 8) != 0)
  {
    v9 = *(double *)&this[8].i64[1];
    *(double *)this[6].i64 = v9 * v6;
    *(double *)&this[6].i64[1] = v9 * result;
    this[8] = vextq_s8(this[8], this[8], 8uLL);
    v8 = image_queue_rotation_from_logical_rotation(CAMetalLayerRotation,BOOL)::invert_table[v3 & 7];
    if ((v3 & 7) == v8)
      return CA::Transform::set_2x2((CA::Transform *)this);
LABEL_17:
    this[9].i8[0] = v3 & 0xF8 | v8 & 7;
    return CA::Transform::set_2x2((CA::Transform *)this);
  }
  *(double *)this[6].i64 = v6;
  *(double *)&this[6].i64[1] = result;
  v8 = image_queue_rotation_from_logical_rotation(CAMetalLayerRotation,BOOL)::invert_table[v3 & 7];
  if ((v3 & 7) != v8)
    goto LABEL_17;
  return result;
}

double CA::Transform::get_scale(CA::Mat4Impl *this, double *a2, double *a3, double *a4)
{
  if ((*((_BYTE *)this + 144) & 0x10) != 0)
    return CA::Mat4Impl::mat4_get_scale(this, a2, a3, a4);
  if (a2)
    *a2 = *((double *)this + 16);
  if (a3)
    *a3 = *((double *)this + 16);
  return *((double *)this + 16);
}

uint64_t CA::OGL::FilterNode::needs_surface(CA::OGL::FilterNode *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;

  v2 = *((_QWORD *)this + 29);
  v3 = (_QWORD *)*((_QWORD *)this + 1);
  v4 = *((_QWORD *)this + 2);
  v5 = *((_WORD *)this + 62);
  if ((v5 & 0xF0) == 0 && ((0xC533u >> v5) & 1) != 0)
    goto LABEL_13;
  v6 = *(_QWORD *)(v2 + 16);
  if (!v6)
  {
    if (*(_QWORD *)(v2 + 48))
      goto LABEL_12;
LABEL_13:
    v8 = 0;
    return v8 ^ 1u;
  }
  v7 = *(_QWORD *)(v6 + 48);
  if (v7 && (*(unsigned int (**)(_QWORD))(*(_QWORD *)v7 + 72))(*(_QWORD *)(v6 + 48)))
  {
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, char *))(*(_QWORD *)v7 + 88))(v7, v6, *(_QWORD *)(v4 + 24), *v3, (char *)this + 56);
    return v8 ^ 1u;
  }
  v9 = *(_DWORD *)(v6 + 24);
  if (v9 != 23 && v9 != 256)
  {
    if (v9 == 57)
    {
      v8 = *((_QWORD *)this + 11) == 0x3C003C003C003C00;
      return v8 ^ 1u;
    }
LABEL_12:
    v8 = 1;
    return v8 ^ 1u;
  }
  v10 = *((unsigned __int8 *)this + 124);
  v8 = v10 != 12 && (v10 - 1) < 0x19;
  return v8 ^ 1u;
}

BOOL CA::OGL::BlurFilter::is_opacity_commutative(CA::OGL::BlurFilter *this, CA::Render::KeyValueArray **a2)
{
  return CA::Render::KeyValueArray::get_int_key(a2[5], (const CA::Render::KeyValueArray *)0x129, 0) == 0;
}

BOOL CA::OGL::BlurFilter::can_render(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return *(_QWORD *)(a5 + 16) == 0;
}

BOOL CA::OGL::MaskNode::needs_surface(CA::OGL::MaskNode *this)
{
  return *((_QWORD *)this + 3) == 0;
}

uint64_t CA::OGL::ImagingNode::layer_node_p(CA::OGL::ImagingNode *this)
{
  return 0;
}

uint64_t CA::OGL::Renderer::add_clip_plane(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  int v7;

  result = *(_QWORD *)(a1 + 80);
  if (result)
    *(_QWORD *)(a1 + 80) = *(_QWORD *)result;
  else
    result = x_heap_malloc_small_(*(uint64_t **)(a1 + 56), 0x20uLL);
  *(_QWORD *)(a2 + 128) = result;
  ++*(_WORD *)(a2 + 296);
  v5 = *(_QWORD *)(a2 + 104);
  v6 = *(_QWORD *)(v5 + 72);
  if (v6)
    v7 = *(_DWORD *)(v6 + 8) + 1;
  else
    v7 = 1;
  *(_DWORD *)(result + 8) = v7;
  *(_QWORD *)result = v6;
  *(_QWORD *)(v5 + 72) = result;
  return result;
}

BOOL CA::OGL::ShadowNode::needs_surface(CA::OGL::ShadowNode *this, char a2)
{
  uint64_t v3;
  uint64_t v4;

  if ((a2 & 1) == 0
    && ((v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 24), (*(_BYTE *)(v3 + 44) & 4) != 0)
     || (v4 = *(_QWORD *)(v3 + 128)) != 0 && *(_QWORD *)(v4 + 120)))
  {
    return *((_BYTE *)this + 124) != 3;
  }
  else
  {
    return 1;
  }
}

void CA::OGL::map_layer_corners(uint64_t a1, uint64_t a2, double *a3)
{
  uint64_t v6;
  double *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  float64x2_t *v15;
  double *v16;
  double v17;

  v6 = 0;
  v7 = *(double **)(a1 + 24);
  v8 = v7[8];
  v9 = v7[9];
  v10 = v7[10];
  v11 = v7[11];
  *a3 = v8;
  a3[1] = v9;
  v12 = v10 + v8;
  a3[2] = v12;
  a3[3] = v9;
  v13 = v11 + v9;
  a3[4] = v12;
  a3[5] = v13;
  a3[6] = v8;
  a3[7] = v13;
  do
  {
    v14 = *(_QWORD *)(a1 + 16);
    v15 = *(float64x2_t **)(v14 + 56);
    if (v15)
    {
      CA::Mat4Impl::mat4_apply_to_point2(v15, &a3[v6], a3);
    }
    else
    {
      v16 = &a3[v6];
      v17 = a3[v6 + 1];
      *v16 = a3[v6] + *(double *)(v14 + 64);
      v16[1] = v17 + *(double *)(v14 + 72);
    }
    CA::Transform::apply_to_point2(*(float64x2_t **)(a2 + 24), &a3[v6], a3);
    v6 += 2;
  }
  while (v6 != 8);
}

BOOL CAFrameRateRangeIsEqualToRange(CAFrameRateRange range, CAFrameRateRange other)
{
  return range.minimum == other.minimum && range.maximum == other.maximum && range.preferred == other.preferred;
}

CATransform3D *__cdecl CATransform3DMakeScale(CATransform3D *__return_ptr retstr, CGFloat sx, CGFloat sy, CGFloat sz)
{
  CATransform3D *result;

  *(_OWORD *)&retstr->m11 = xmmword_18474DF40;
  *(_OWORD *)&retstr->m13 = 0u;
  *(_OWORD *)&retstr->m21 = xmmword_18474DF50;
  *(_OWORD *)&retstr->m23 = 0u;
  *(_OWORD *)&retstr->m31 = 0u;
  *(_OWORD *)&retstr->m33 = xmmword_18474DF40;
  *(_OWORD *)&retstr->m41 = 0u;
  *(_OWORD *)&retstr->m43 = xmmword_18474DF50;
  retstr->m11 = sx;
  retstr->m22 = sy;
  retstr->m33 = sz;
  return result;
}

CATransform3D *__cdecl CATransform3DMakeTranslation(CATransform3D *__return_ptr retstr, CGFloat tx, CGFloat ty, CGFloat tz)
{
  CATransform3D *result;

  *(_OWORD *)&retstr->m11 = xmmword_18474DF40;
  retstr->m13 = 0.0;
  retstr->m14 = 0.0;
  *(_OWORD *)&retstr->m21 = xmmword_18474DF50;
  *(_OWORD *)&retstr->m23 = 0u;
  *(_OWORD *)&retstr->m31 = 0u;
  *(_OWORD *)&retstr->m33 = xmmword_18474DF40;
  *(_OWORD *)&retstr->m43 = xmmword_18474DF50;
  retstr->m41 = tx;
  retstr->m42 = ty;
  retstr->m43 = tz;
  return result;
}

void CA::Render::Updater::FlattenZOp::map_transform(CA::Render::Updater::FlattenZOp *this, CA::Transform *a2)
{
  if ((*((_BYTE *)a2 + 144) & 0x10) != 0)
  {
    *((_QWORD *)a2 + 2) = 0;
    *((_QWORD *)a2 + 6) = 0;
    *((_QWORD *)a2 + 10) = 0x3FF0000000000000;
    *((_QWORD *)a2 + 14) = 0;
  }
}

void ___ZN2CA3OGL12MetalContext12delete_imageEPNS0_5ImageE_block_invoke_2(uint64_t a1)
{
  dispatch_async(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 40) + 3952), *(dispatch_block_t *)(a1 + 32));
}

uint64_t CA::Render::Server::server_thread(CA::Render::Server *this, void *a2)
{
  _BYTE *v2;
  _BYTE *v3;
  int v4;
  mach_port_t v5;
  NSObject *v6;
  char *v7;
  ipc_space_t *v8;
  thread_act_t v9;
  uint64_t v10;
  double v11;
  CA::Render::Server *v12;
  CA::Render::Server *v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  double v17;
  __n128 v18;
  double v19;
  double v20;
  malloc_zone_t *malloc_zone;
  NSObject *v22;
  mach_port_name_t v23;
  uint64_t v24;
  uint64_t v25;
  mach_port_t msgh_local_port;
  mach_msg_size_t v27;
  mach_msg_header_t *v28;
  mach_msg_header_t *v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  size_t v33;
  mach_port_t v34;
  CA::Render::Server *v35;
  _DWORD *v36;
  mach_msg_header_t *v37;
  int v38;
  mach_port_t v39;
  mach_msg_id_t v40;
  uint64_t v41;
  os_unfair_lock_s *v42;
  malloc_zone_t *v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t *v46;
  _QWORD *v47;
  unsigned int v48;
  uint64_t j;
  unsigned int v50;
  uint64_t *v51;
  uint64_t v52;
  mach_port_t msgh_remote_port;
  int v54;
  mach_msg_id_t v55;
  uint64_t (*v56)();
  mach_msg_header_t *v57;
  mach_port_name_t v58;
  unsigned int v59;
  mach_msg_id_t msgh_id;
  CA::Render::Context *v61;
  unsigned int *v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  NSObject *v66;
  _QWORD *v67;
  char v68;
  _QWORD *v69;
  CA::Render::Fence *attributes;
  mach_port_name_t v71;
  CA::Render::Server *v73;
  uint64_t *v74;
  void (*v75)(_QWORD);
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  NSObject *v79;
  uint32_t os_unfair_lock_opaque;
  unsigned int *p_os_unfair_lock_opaque;
  unsigned int v82;
  uint64_t *v83;
  char v84;
  mach_port_name_t v85;
  uint64_t v87;
  uint64_t *v88;
  _QWORD *v89;
  uint64_t *v90;
  double v91;
  double v93;
  uint64_t v94;
  uint64_t v95;
  double v96;
  CA::Render::Fence *v97;
  char *p_msgh_size;
  unsigned int v99;
  uint64_t *v100;
  _QWORD *v101;
  NSObject *v102;
  uint32_t v103;
  uint64_t v104;
  uint64_t msgh_voucher_port;
  unsigned int v106;
  unsigned int *v107;
  unsigned int v108;
  malloc_zone_t *v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t *v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t *v123;
  uint64_t *v124;
  double v125;
  double v126;
  uint64_t v127;
  double v128;
  double v129;
  double v130;
  unsigned int *v131;
  unsigned int v132;
  uint64_t v133;
  malloc_zone_t *v134;
  double *v135;
  double *v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint8x8_t v140;
  unint64_t v141;
  void **v142;
  _QWORD *v143;
  unint64_t v144;
  float v145;
  float v146;
  _BOOL8 v147;
  unint64_t v148;
  unint64_t v149;
  int8x8_t prime;
  void *v151;
  void *v152;
  uint64_t v153;
  _QWORD *v154;
  unint64_t v155;
  uint8x8_t v156;
  unint64_t v157;
  uint8x8_t v158;
  uint64_t v159;
  _QWORD *v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  _QWORD *v164;
  unint64_t v165;
  uint64_t *v166;
  void *v167;
  uint64_t v168;
  uint64_t v169;
  double *v170;
  double **v171;
  uint64_t v172;
  uint64_t i;
  int v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  int v178;
  uint64_t v179;
  malloc_zone_t *v180;
  _BYTE *v181;
  unsigned int v182;
  unsigned int v183;
  os_unfair_lock_s *lock;
  uint64_t v186;
  os_unfair_lock_s *v187;
  uint64_t v188;
  char *v189;
  double *v190;
  uint64_t msgh_bits;
  _QWORD *v192;
  char v193;
  uint64_t v194;
  uint64_t *v195;
  size_t v196;
  size_t v197;
  CA::Render::Server *state;
  mach_msg_type_number_t port_info_outCnt[3];
  unsigned int v200;
  mach_msg_header_t policy_info[682];
  __int128 v202;
  __int128 v203;
  uint64_t v204;
  uint64_t v205;

  MEMORY[0x1E0C80A78](this);
  v3 = v2;
  v205 = *MEMORY[0x1E0C80C00];
  v4 = pthread_setname_np("com.apple.coreanimation.render-server");
  if (v4)
  {
    v5 = v4;
    v6 = x_log_category_utilities;
    if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR))
    {
      policy_info[0].msgh_bits = 136315394;
      *(_QWORD *)&policy_info[0].msgh_size = "com.apple.coreanimation.render-server";
      LOWORD(policy_info[0].msgh_local_port) = 1024;
      *(mach_port_t *)((char *)&policy_info[0].msgh_local_port + 2) = v5;
      _os_log_error_impl(&dword_184457000, v6, OS_LOG_TYPE_ERROR, "pthread_setname_np(%s) returned %d\n", (uint8_t *)policy_info, 0x12u);
    }
  }
  pthread_mutex_lock(&CA::Render::Server::_mutex);
  CA::Render::Server::_thread = (uint64_t)pthread_self();
  *v3 = 1;
  pthread_cond_broadcast(&CA::Render::Server::_cond);
  pthread_mutex_unlock(&CA::Render::Server::_mutex);
  v7 = getenv("CA_BENCHMARK");
  v8 = (ipc_space_t *)MEMORY[0x1E0C83DA0];
  if (v7 && atoi(v7))
  {
    policy_info[0].msgh_bits = 0;
    v9 = MEMORY[0x186DBE0B0]();
    thread_policy_set(v9, 1u, (thread_policy_t)policy_info, 1u);
    mach_port_deallocate(*v8, v9);
  }
  bzero(policy_info, 0x4000uLL);
  v11 = 0.0;
  do
  {
    while (1)
    {
      v12 = (CA::Render::Server *)MEMORY[0x186DBE2E4](v10);
      v13 = v12;
      if (!CA::Render::Server::_callback_list)
      {
        v17 = 0.0;
        if (v11 == 0.0)
          goto LABEL_31;
        goto LABEL_28;
      }
      v14 = mach_absolute_time();
      v15 = CATimeWithHostTime(v14);
      while (1)
      {
        os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::Server::_callback_lock);
        v16 = CA::Render::Server::_callback_list;
        if (!CA::Render::Server::_callback_list)
          break;
        v17 = *(double *)(CA::Render::Server::_callback_list + 8);
        if (v15 < v17)
          goto LABEL_24;
        CA::Render::Server::_callback_list = *(_QWORD *)CA::Render::Server::_callback_list;
        os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::Server::_callback_lock);
        v18.n128_u64[0] = *(_QWORD *)(v16 + 8);
        v19 = *(double *)(v16 + 16);
        if (v18.n128_f64[0] >= v19)
          v19 = *(double *)(v16 + 8);
        v20 = v15 - v19;
        if (v15 - v19 > 1.0)
        {
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            v22 = x_log_category_render;
            if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_ERROR))
            {
              LODWORD(v202) = 134217984;
              *(double *)((char *)&v202 + 4) = v20;
              _os_log_impl(&dword_184457000, v22, OS_LOG_TYPE_ERROR, "Render::Server callback delayed by %.2fs", (uint8_t *)&v202, 0xCu);
            }
          }
          v18.n128_u64[0] = *(_QWORD *)(v16 + 8);
        }
        if (v15 > v18.n128_f64[0])
          v18.n128_f64[0] = v15;
        (*(void (**)(_QWORD, __n128))(v16 + 24))(*(_QWORD *)(v16 + 32), v18);
        malloc_zone = (malloc_zone_t *)get_malloc_zone();
        malloc_zone_free(malloc_zone, (void *)v16);
      }
      v17 = 0.0;
LABEL_24:
      os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::Server::_callback_lock);
      if (v11 != v17)
      {
        if (v17 > 0.0)
        {
          CA::Render::Server::timer_port(v12);
          CAHostTimeWithTime(v17);
          v12 = (CA::Render::Server *)mk_timer_arm_leeway();
LABEL_30:
          v11 = v17;
          goto LABEL_31;
        }
LABEL_28:
        if (v11 > 0.0)
        {
          CA::Render::Server::timer_port(v12);
          v12 = (CA::Render::Server *)mk_timer_cancel();
        }
        goto LABEL_30;
      }
LABEL_31:
      v23 = CA::Render::Server::port_set(v12);
      v24 = mach_msg(policy_info, 50333710, 0, 0x4000u, v23, 0, 0);
      if (!(_DWORD)v24)
      {
        v31 = 0;
        v32 = policy_info[0].msgh_size + 3;
        if (v32 >> 2 >= 0xFEF)
          v33 = 0x4000;
        else
          v33 = (v32 & 0x1FFFFFFFCLL) + 68;
        v29 = policy_info;
        goto LABEL_47;
      }
      v25 = v24;
      if ((_DWORD)v24 == 268451844)
        break;
LABEL_38:
      if ((_DWORD)v25 == 268451843)
        goto LABEL_83;
      if (CADeviceHasInternalBuild::once != -1)
        dispatch_once(&CADeviceHasInternalBuild::once, &__block_literal_global_107);
      if (CADeviceHasInternalBuild::internal)
      {
        if ((_DWORD)v25 == 268455948)
          CARenderServerDumpVMRegions();
        x_log_crash("CoreAnimation: mach_msg returned 0x%x!\n");
LABEL_392:
        abort();
      }
LABEL_82:
      CA::Render::Server::error_jump_table[0] = (uint64_t)CA::Render::Server::ca_mach_msg_error_0;
      *(_QWORD *)algn_1EDD13F08 = CA::Render::Server::ca_mach_msg_error_1;
      qword_1EDD13F10 = (uint64_t)CA::Render::Server::ca_mach_msg_error_2;
      unk_1EDD13F18 = CA::Render::Server::ca_mach_msg_error_3;
      qword_1EDD13F20 = (uint64_t)CA::Render::Server::ca_mach_msg_error_4;
      unk_1EDD13F28 = CA::Render::Server::ca_mach_msg_error_5;
      qword_1EDD13F30 = (uint64_t)CA::Render::Server::ca_mach_msg_error_6;
      unk_1EDD13F38 = CA::Render::Server::ca_mach_msg_error_7;
      qword_1EDD13F40 = (uint64_t)CA::Render::Server::ca_mach_msg_error_8;
      unk_1EDD13F48 = CA::Render::Server::ca_mach_msg_error_9;
      qword_1EDD13F50 = (uint64_t)CA::Render::Server::ca_mach_msg_error_a;
      unk_1EDD13F58 = CA::Render::Server::ca_mach_msg_error_b;
      qword_1EDD13F60 = (uint64_t)CA::Render::Server::ca_mach_msg_error_c;
      unk_1EDD13F68 = CA::Render::Server::ca_mach_msg_error_d;
      qword_1EDD13F70 = (uint64_t)CA::Render::Server::ca_mach_msg_error_e;
      unk_1EDD13F78 = CA::Render::Server::ca_mach_msg_error_f;
      ((void (*)(uint64_t, uint64_t))CA::Render::Server::error_jump_table[v25 & 0xF])(v25, 4);
LABEL_83:
      objc_autoreleasePoolPop(v13);
    }
    msgh_local_port = policy_info[0].msgh_local_port;
    v27 = ((policy_info[0].msgh_size + 3) & 0xFFFFFFFC) + 68;
    v28 = (mach_msg_header_t *)malloc_type_calloc(1uLL, ((policy_info[0].msgh_size + 3) & 0x1FFFFFFFCLL) + 68, 0xEF1217AEuLL);
    if (!v28)
    {
      mach_msg(0, 2, 0, 0, msgh_local_port, 0, 0);
      if (CADeviceHasInternalBuild::once != -1)
        dispatch_once(&CADeviceHasInternalBuild::once, &__block_literal_global_107);
      if (CADeviceHasInternalBuild::internal)
      {
        x_log_crash("Couldn't allocate buffer of %zu bytes for message!");
        goto LABEL_392;
      }
      v25 = 268451844;
      goto LABEL_82;
    }
    v29 = v28;
    v30 = mach_msg(v28, 50333698, 0, v27, msgh_local_port, 0, 0);
    if ((_DWORD)v30)
    {
      v25 = v30;
      free(v29);
      if (CADeviceHasInternalBuild::once != -1)
        dispatch_once(&CADeviceHasInternalBuild::once, &__block_literal_global_107);
      if (CADeviceHasInternalBuild::internal)
      {
        x_log_crash("CoreAnimation: mach_msg returned 0x%x for retry with size:%zu\n");
        goto LABEL_392;
      }
      goto LABEL_38;
    }
    v33 = 0;
    v31 = 1;
LABEL_47:
    state = voucher_mach_msg_adopt(v29);
    v34 = v29->msgh_local_port;
    v35 = (CA::Render::Server *)CA::Render::Server::notify_port(state);
    if (v34 == (_DWORD)v35)
    {
      v36 = (mach_msg_bits_t *)((char *)&v29->msgh_bits + ((v29->msgh_size + 3) & 0x1FFFFFFFCLL));
      if (!*v36 && v36[1] >= 0x34u && !v36[10])
      {
        msgh_id = v29->msgh_id;
        if (msgh_id == 70)
        {
          v197 = v33;
          if (CA::Render::Fence::fence_info_once[0] != -1)
            dispatch_once_f(CA::Render::Fence::fence_info_once, 0, (dispatch_function_t)CA::Render::Fence::fence_info_init);
          os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::Fence::_lock);
          v67 = *(_QWORD **)(CA::Render::Fence::fences_by_name + 16);
          if (v67)
          {
            v68 = 0;
LABEL_126:
            v69 = (_QWORD *)CA::Render::Fence::cleared_f_names;
            do
            {
              attributes = (CA::Render::Fence *)std::__hash_table<std::__hash_value_type<unsigned long,unsigned long long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long long>>>::find<unsigned long>(v69, v67[2]);
              if (!attributes)
              {
                v71 = *(_DWORD *)(v67[3] + 16);
                v204 = 0;
                v203 = 0u;
                v202 = 0u;
                port_info_outCnt[0] = 10;
                attributes = (CA::Render::Fence *)mach_port_get_attributes(*v8, v71, 2, (mach_port_info_t)&v202, port_info_outCnt);
                v69 = (_QWORD *)CA::Render::Fence::cleared_f_names;
                if ((_DWORD)attributes || DWORD2(v203) == 0)
                {
                  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>(CA::Render::Fence::cleared_f_names, v67[2], v67[2]);
                  v67 = (_QWORD *)*v67;
                  v68 = 1;
                  if (v67)
                    goto LABEL_126;
                  goto LABEL_158;
                }
              }
              v67 = (_QWORD *)*v67;
            }
            while (v67);
            if ((v68 & 1) == 0)
              goto LABEL_159;
LABEL_158:
            CA::Render::Fence::resolve_fences(attributes);
          }
LABEL_159:
          v83 = *(uint64_t **)(CA::Render::Fence::batches_by_port + 16);
          if (v83)
          {
            v84 = 0;
LABEL_161:
            v193 = v84;
            do
            {
              v85 = *((_DWORD *)v83 + 4);
              if (!std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>((_QWORD *)CA::Render::Fence::cleared_b_ports, v85)&& *(double *)(v83[3] + 16) == 0.0)
              {
                v204 = 0;
                v203 = 0u;
                v202 = 0u;
                port_info_outCnt[0] = 10;
                if (mach_port_get_attributes(*v8, v85, 2, (mach_port_info_t)&v202, port_info_outCnt)
                  || DWORD2(v203) == 0)
                {
                  v87 = v83[3];
                  v88 = *(uint64_t **)(*(_QWORD *)(v87 + 32) + 16);
                  if (v88)
                  {
                    v89 = (_QWORD *)CA::Render::Fence::bcontexts_by_id;
                    do
                    {
                      v90 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(v89, *((_DWORD *)v88 + 4));
                      if (v90)
                      {
                        v91 = CA::Render::Context::delay_of_batch(*(os_unfair_lock_s **)v90[3], *((_DWORD *)v83 + 4));
                        v87 = v83[3];
                        v89 = (_QWORD *)CA::Render::Fence::bcontexts_by_id;
                        if (v91 > *(double *)(v87 + 16)
                          && (*(_QWORD *)(v87 + 16) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
                        {
                          *(double *)(v87 + 16) = v91;
                        }
                      }
                      v88 = (uint64_t *)*v88;
                    }
                    while (v88);
                  }
                  v93 = *(double *)(v87 + 16);
                  if (v93 == 0.0 || (v94 = mach_absolute_time(), v93 <= CATimeWithHostTime(v94)))
                  {
                    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>(CA::Render::Fence::cleared_b_ports, *((_DWORD *)v83 + 4), *((_DWORD *)v83 + 4));
                    v83 = (uint64_t *)*v83;
                    v84 = 1;
                    v8 = (ipc_space_t *)MEMORY[0x1E0C83DA0];
                    if (v83)
                      goto LABEL_161;
                    goto LABEL_187;
                  }
                  CA::Render::Server::add_callback(3, (uint64_t)CA::Render::Fence::btimeout_callback, 0, *(double *)(v83[3] + 16));
                  v8 = (ipc_space_t *)MEMORY[0x1E0C83DA0];
                }
              }
              v83 = (uint64_t *)*v83;
            }
            while (v83);
            if ((v193 & 1) == 0)
              goto LABEL_188;
LABEL_187:
            v95 = mach_absolute_time();
            v96 = CATimeWithHostTime(v95);
            CA::Render::Fence::resolve_batches(v97, v96);
          }
LABEL_188:
          os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::Fence::_lock);
          v33 = v197;
        }
        else if (msgh_id == 72)
        {
          while (1)
          {
            v61 = (CA::Render::Context *)CA::Render::Context::context_by_client_port((CA::Render::Context *)v29[1].msgh_remote_port);
            if (!v61)
              break;
            v62 = (unsigned int *)v61;
            CA::Render::Context::destroy(v61);
            v63 = v62 + 2;
            do
            {
              v64 = __ldaxr(v63);
              v65 = v64 - 1;
            }
            while (__stlxr(v65, v63));
            if (!v65)
              (*(void (**)(unsigned int *))(*(_QWORD *)v62 + 16))(v62);
          }
          os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::Server::_dead_name_watch_list_lock);
          CA::Render::Server::dead_name_watch_list(v73);
          v74 = std::__hash_table<std::__hash_value_type<unsigned int,BOOL (*)>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,BOOL (*)>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,BOOL (*)>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,BOOL (*)>>>::find<unsigned int>(v29[1].msgh_remote_port);
          if (v74)
          {
            v75 = (void (*)(_QWORD))v74[3];
            std::__hash_table<std::__hash_value_type<unsigned int,BOOL (*)>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,BOOL (*)>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,BOOL (*)>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,BOOL (*)>>>::erase(v74);
            os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::Server::_dead_name_watch_list_lock);
            if (v75)
              v75(v29[1].msgh_remote_port);
          }
          else
          {
            os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::Server::_dead_name_watch_list_lock);
          }
          mach_port_deallocate(*v8, v29[1].msgh_remote_port);
        }
      }
      v37 = v29;
LABEL_52:
      mach_msg_destroy(v37);
LABEL_53:
      v38 = 0;
      goto LABEL_115;
    }
    v39 = v29->msgh_local_port;
    if (v39 == CA::Render::Server::timer_port(v35))
      goto LABEL_113;
    v40 = v29->msgh_id;
    if ((v40 - 40000) > 0xC7)
    {
      if ((v40 - 40200) <= 0xC7)
      {
        bzero(&v202, 0x354uLL);
        msgh_remote_port = v29->msgh_remote_port;
        LODWORD(v202) = v29->msgh_bits & 0x1F;
        DWORD1(v202) = 36;
        v54 = v29->msgh_id + 100;
        *((_QWORD *)&v202 + 1) = msgh_remote_port;
        LODWORD(v203) = 0;
        DWORD1(v203) = v54;
        v55 = v29->msgh_id;
        if ((v55 - 40291) >= 0xFFFFFFA5
          && (v56 = CASCARenderServices_subsystem[5 * (v55 - 40200) + 5]) != 0)
        {
          ((void (*)(mach_msg_header_t *, __int128 *))v56)(v29, &v202);
          if (!DWORD2(v202))
            goto LABEL_53;
          v57 = (mach_msg_header_t *)&v202;
          if ((mach_msg((mach_msg_header_t *)&v202, 1, DWORD1(v202), 0, 0, 0, 0) - 268435459) >= 2)
            goto LABEL_53;
        }
        else
        {
          *((_QWORD *)&v203 + 1) = *MEMORY[0x1E0C804E8];
          LODWORD(v204) = -303;
          v57 = v29;
        }
        v37 = v57;
        goto LABEL_52;
      }
LABEL_113:
      v38 = 0;
LABEL_114:
      mach_msg_destroy(v29);
      goto LABEL_115;
    }
    if ((v40 - 40002) >= 4)
    {
      if (v40 == 40001)
      {
        v38 = 0;
        CA::Render::Server::_kicked = 0;
      }
      else
      {
        if (v40 != 40000)
          goto LABEL_113;
        v58 = CA::Render::Server::_server_port[0];
        while (1)
        {
          v59 = __ldaxr(CA::Render::Server::_server_port);
          if (v59 != v58)
            break;
          if (!__stlxr(0, CA::Render::Server::_server_port))
          {
            mach_port_mod_refs(*v8, v58, 1u, -1);
            mach_port_deallocate(*v8, v58);
            goto LABEL_142;
          }
        }
        __clrex();
LABEL_142:
        if (CA::Render::Server::_checked_in_ports)
        {
          os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::Server::_checked_in_lock);
          v76 = CA::Render::Server::_checked_in_ports;
          if (CA::Render::Server::_checked_in_ports)
          {
            do
            {
              mach_port_mod_refs(*v8, *(_DWORD *)v76, 1u, -1);
              v76 = *(_QWORD *)(v76 + 8);
            }
            while (v76);
            v77 = (_QWORD *)CA::Render::Server::_checked_in_ports;
            if (CA::Render::Server::_checked_in_ports)
            {
              do
              {
                v78 = (_QWORD *)v77[1];
                free(v77);
                v77 = v78;
              }
              while (v78);
            }
          }
          CA::Render::Server::_checked_in_ports = 0;
          os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::Server::_checked_in_lock);
        }
        v38 = 1;
      }
      goto LABEL_114;
    }
    v196 = v33;
    v41 = CA::Render::Context::context_by_server_port((CA::Render::Context *)v29->msgh_local_port);
    if (!v41)
    {
      if (!x_log_hook_p())
      {
        v66 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_ERROR))
        {
          LOWORD(v202) = 0;
          _os_log_impl(&dword_184457000, v66, OS_LOG_TYPE_ERROR, "dropping CmdStreamMsg due to missing ctx", (uint8_t *)&v202, 2u);
        }
        goto LABEL_113;
      }
      x_log_();
      goto LABEL_156;
    }
    v42 = (os_unfair_lock_s *)v41;
    v43 = (malloc_zone_t *)get_malloc_zone();
    v44 = malloc_type_zone_malloc(v43, 0x1058uLL, 0x8BB15036uLL);
    if (!v44)
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v79 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_ERROR))
        {
          os_unfair_lock_opaque = v42[4]._os_unfair_lock_opaque;
          LODWORD(v202) = 67109120;
          DWORD1(v202) = os_unfair_lock_opaque;
          _os_log_impl(&dword_184457000, v79, OS_LOG_TYPE_ERROR, "failed to create CmdStreamMsg for %x", (uint8_t *)&v202, 8u);
        }
      }
      p_os_unfair_lock_opaque = &v42[2]._os_unfair_lock_opaque;
      do
        v82 = __ldaxr(p_os_unfair_lock_opaque);
      while (__stlxr(v82 - 1, p_os_unfair_lock_opaque));
      if (v82 == 1)
        (*(void (**)(os_unfair_lock_s *))(*(_QWORD *)&v42->_os_unfair_lock_opaque + 16))(v42);
LABEL_156:
      v38 = 0;
      v33 = v196;
      goto LABEL_114;
    }
    v45 = v44;
    v44[7] = 0;
    v46 = v44 + 7;
    *v45 = off_1E1598CA0;
    v45[1] = v42;
    v45[4] = 0;
    v45[5] = 0;
    v45[2] = v29;
    v45[3] = 0;
    v45[8] = v45 + 11;
    *(_OWORD *)(v45 + 9) = xmmword_18474E260;
    v45[6] = v46;
    v47 = v45 + 519;
    v45[519] = 0;
    v45[521] = 0;
    v45[520] = 0;
    *((_BYTE *)v45 + 4176) = 0;
    *((_BYTE *)v45 + 4177) = v31;
    msgh_bits = v29[1].msgh_bits;
    if (((v29->msgh_bits & 0x80000000) != 0 || !(_DWORD)msgh_bits)
      && ((v29->msgh_bits & 0x80000000) == 0 || (_DWORD)msgh_bits))
    {
      p_msgh_size = (char *)&v29[1].msgh_size;
      v99 = v29->msgh_id;
      switch(v99)
      {
        case 0x9C42u:
        case 0x9C44u:
          if (v29->msgh_size > 0x1B)
            goto LABEL_205;
          if (CADeviceHasInternalBuild::once != -1)
            dispatch_once(&CADeviceHasInternalBuild::once, &__block_literal_global_107);
          if (!CADeviceHasInternalBuild::internal)
            break;
          x_log_crash("Message buffer underflow, diff: %lld, msgh_size: %lld, desc: %p, _msg: %p!");
          goto LABEL_392;
        case 0x9C43u:
        case 0x9C45u:
          v45[4] = p_msgh_size;
          if (!(_DWORD)msgh_bits)
          {
            if (CADeviceHasInternalBuild::once != -1)
              dispatch_once(&CADeviceHasInternalBuild::once, &__block_literal_global_107);
            if (CADeviceHasInternalBuild::internal)
            {
LABEL_395:
              x_log_crash("Message is ool CommandStream, but no body, desc_count: %zu, body_ool->type:%u!");
              goto LABEL_392;
            }
            break;
          }
          if (HIBYTE(v29[1].msgh_local_port) != 1)
          {
            if (CADeviceHasInternalBuild::once != -1)
              dispatch_once(&CADeviceHasInternalBuild::once, &__block_literal_global_107);
            if (CADeviceHasInternalBuild::internal)
              goto LABEL_395;
            break;
          }
          v104 = *(_QWORD *)&v29[1].msgh_size;
          msgh_voucher_port = v29[1].msgh_voucher_port;
          p_msgh_size = (char *)&v29[1].msgh_id;
          --msgh_bits;
LABEL_206:
          if (v99 >> 1 == 20002)
          {
            if (!msgh_bits)
            {
              if (CADeviceHasInternalBuild::once != -1)
                dispatch_once(&CADeviceHasInternalBuild::once, &__block_literal_global_107);
              if (CADeviceHasInternalBuild::internal)
              {
LABEL_396:
                x_log_crash("Message is batched CommandStream, but no batch ports, desc_count: %zu, port->type:%u!");
                goto LABEL_392;
              }
              break;
            }
            v106 = *((_DWORD *)p_msgh_size + 2);
            if (HIBYTE(v106))
            {
              if (HIWORD(v106) != 529)
              {
LABEL_210:
                if (CADeviceHasInternalBuild::once != -1)
                  dispatch_once(&CADeviceHasInternalBuild::once, &__block_literal_global_107);
                if (CADeviceHasInternalBuild::internal)
                  goto LABEL_396;
                break;
              }
            }
            else if ((v106 & 0xFF0000) != 0x110000)
            {
              goto LABEL_210;
            }
            v186 = v104;
            v188 = msgh_voucher_port;
            v45[5] = p_msgh_size;
            v172 = 16;
            if (!p_msgh_size[11])
              v172 = 12;
            p_msgh_size += v172;
            --msgh_bits;
          }
          else
          {
            v186 = v104;
            v188 = msgh_voucher_port;
          }
          v45[519] = x_heap_malloc(v46, 8 * msgh_bits);
          v45[520] = msgh_bits;
          if (msgh_bits)
          {
            for (i = 0; i != msgh_bits; ++i)
            {
              *(_QWORD *)(v45[519] + 8 * i) = x_heap_malloc_small_((uint64_t *)v45[6], 0x30uLL);
              v174 = HIBYTE(*((_DWORD *)p_msgh_size + 2));
              if (v174)
              {
                if (v174 != 1)
                  goto LABEL_63;
                v175 = *(_QWORD *)(*v47 + 8 * i);
                *(_DWORD *)(v175 + 8) = 1;
                *(_QWORD *)(v175 + 16) = *(_QWORD *)p_msgh_size;
                *(_QWORD *)(*(_QWORD *)(*v47 + 8 * i) + 24) = *((unsigned int *)p_msgh_size + 3);
                *(_QWORD *)(*(_QWORD *)(*v47 + 8 * i) + 32) = CA::Render::Server::release_vm;
                *(_QWORD *)(*(_QWORD *)(*v47 + 8 * i) + 40) = *((unsigned int *)p_msgh_size + 3);
                p_msgh_size += 16;
                MEMORY[0x186DBEA7C](*MEMORY[0x1E0C83DA0], *(_QWORD *)(*(_QWORD *)(*v47 + 8 * i) + 16), *(_QWORD *)(*(_QWORD *)(*v47 + 8 * i) + 24), 1, 1);
              }
              else
              {
                v176 = *(_QWORD *)(*v47 + 8 * i);
                *(_DWORD *)(v176 + 8) = 2;
                *(_DWORD *)(v176 + 16) = *(_DWORD *)p_msgh_size;
                *(_DWORD *)(*(_QWORD *)(*v47 + 8 * i) + 20) = p_msgh_size[10];
                *(_BYTE *)(*(_QWORD *)(*v47 + 8 * i) + 24) = 1;
                p_msgh_size += 12;
              }
            }
          }
          v45[3] = p_msgh_size;
          v177 = v45[2];
          v178 = *(_DWORD *)(v177 + 20);
          v179 = v186;
          if (v178 == 40004 || v178 == 40002)
          {
            v188 = v177 - (_QWORD)p_msgh_size + *(unsigned int *)(v177 + 4);
            v179 = (uint64_t)p_msgh_size;
          }
          v180 = (malloc_zone_t *)get_malloc_zone();
          v181 = malloc_type_zone_malloc(v180, 0x58uLL, 0x8BB15036uLL);
          if (v181)
            v181 = (_BYTE *)CA::Render::Decoder::Decoder((uint64_t)v181, v45[6], v45[1], v179, v188);
          if ((v181[18] & 1) != 0)
          {
            (*(void (**)(_BYTE *))(*(_QWORD *)v181 + 8))(v181);
            break;
          }
          v45[521] = v181;
          v8 = (ipc_space_t *)MEMORY[0x1E0C83DA0];
LABEL_64:
          *(_QWORD *)port_info_outCnt = v45;
          lock = v42 + 170;
          os_unfair_lock_lock(v42 + 170);
          if ((v42[3]._os_unfair_lock_opaque & 0x400) != 0)
          {
            (*(void (**)(_QWORD *))(*v45 + 8))(v45);
            v33 = v196;
          }
          else
          {
            v204 = 1065353216;
            v203 = 0u;
            v202 = 0u;
            (*(void (**)(_QWORD *, __int128 *))(*v45 + 24))(v45, &v202);
            if (*((_QWORD *)&v203 + 1))
            {
              os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::Fence::_lock);
              v48 = v42[4]._os_unfair_lock_opaque;
              v200 = v48;
              for (j = v203; j; v8 = (ipc_space_t *)MEMORY[0x1E0C83DA0])
              {
                mach_port_deallocate(*v8, *(_DWORD *)(j + 16));
                v50 = *(_DWORD *)(j + 16);
                if (v50 - 1 <= 0xFFFFFFFD
                  && !std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>((_QWORD *)CA::Render::Fence::cleared_b_ports, *(_DWORD *)(j + 16))&& (v51 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>((_QWORD *)CA::Render::Fence::batches_by_port, v50)) != 0&& (v52 = v51[3], *(double *)(v52 + 16) == 0.0))
                {
                  v192 = *(_QWORD **)(v52 + 24);
                  if (!std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(v192, v48))
                  {
                    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t)v192, v48, v48);
                    if (*(_BYTE *)(v52 + 44))
                      kdebug_trace();
                  }
                  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>(*(_QWORD *)(v52 + 32), v48, v48);
                  j = *(_QWORD *)j;
                }
                else
                {
                  j = std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::erase(&v202, (uint64_t *)j);
                }
              }
              v100 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>((_QWORD *)CA::Render::Fence::bcontexts_by_id, v48);
              if (v100)
              {
                v101 = (_QWORD *)v100[3];
              }
              else
              {
                v107 = &v42[2]._os_unfair_lock_opaque;
                do
                  v108 = __ldaxr(v107);
                while (__stlxr(v108 + 1, v107));
                if (!v108)
                {
                  do
                    v183 = __ldaxr(v107);
                  while (__stlxr(v183 - 1, v107));
                }
                v109 = (malloc_zone_t *)get_malloc_zone();
                v101 = malloc_type_zone_malloc(v109, 0x18uLL, 0x8BB15036uLL);
                *v101 = v42;
                v110 = (_QWORD *)operator new();
                v110[1] = 0;
                v110[2] = 0;
                *v110 = 0;
                v101[1] = v110;
                v111 = operator new();
                *(_OWORD *)v111 = 0u;
                *(_OWORD *)(v111 + 16) = 0u;
                *(_DWORD *)(v111 + 32) = 1065353216;
                v101[2] = v111;
                std::__hash_table<std::__hash_value_type<unsigned int,CA::Render::Context *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,CA::Render::Context *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,CA::Render::Context *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,CA::Render::Context *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((float *)CA::Render::Fence::bcontexts_by_id, v200, &v200)[3] = v101;
              }
              v112 = (uint64_t *)v101[1];
              v113 = v112[1];
              v114 = v112[2];
              if (v113 >= v114)
              {
                v116 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v113 - *v112) >> 3);
                v117 = v116 + 1;
                if (v116 + 1 > 0x666666666666666)
                  abort();
                v118 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v114 - *v112) >> 3);
                if (2 * v118 > v117)
                  v117 = 2 * v118;
                if (v118 >= 0x333333333333333)
                  v119 = 0x666666666666666;
                else
                  v119 = v117;
                if (v119)
                {
                  if (v119 > 0x666666666666666)
LABEL_393:
                    std::__throw_bad_array_new_length[abi:nn180100]();
                  v120 = (char *)operator new(40 * v119);
                }
                else
                {
                  v120 = 0;
                }
                v189 = &v120[40 * v119];
                v121 = std::unordered_set<unsigned int>::unordered_set((uint64_t)&v120[40 * v116], (uint64_t)&v202);
                v115 = v121 + 40;
                v123 = (uint64_t *)*v112;
                v122 = (uint64_t *)v112[1];
                v194 = v121 + 40;
                if (v122 == (uint64_t *)*v112)
                {
                  *v112 = v121;
                  v112[1] = v115;
                  v112[2] = (uint64_t)v189;
                }
                else
                {
                  do
                  {
                    v122 -= 5;
                    v121 = std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__hash_table(v121 - 40, v122);
                  }
                  while (v122 != v123);
                  v124 = (uint64_t *)*v112;
                  v122 = (uint64_t *)v112[1];
                  v115 = v194;
                  *v112 = v121;
                  v112[1] = v194;
                  v112[2] = (uint64_t)v189;
                  if (v122 != v124)
                  {
                    do
                    {
                      v122 -= 5;
                      std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)v122);
                    }
                    while (v122 != v124);
                    v122 = v124;
                    v115 = v194;
                  }
                }
                v8 = (ipc_space_t *)MEMORY[0x1E0C83DA0];
                if (v122)
                {
                  operator delete(v122);
                  v115 = v194;
                }
              }
              else
              {
                v115 = std::unordered_set<unsigned int>::unordered_set(v113, (uint64_t)&v202) + 40;
              }
              v112[1] = v115;
              os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::Fence::_lock);
            }
            v125 = (*(double (**)(_QWORD *))(*v45 + 16))(v45);
            v126 = v125;
            if (v125 == 0.0)
            {
              v129 = v125;
              goto LABEL_256;
            }
            v127 = mach_absolute_time();
            v128 = CATimeWithHostTime(v127);
            v129 = 0.0;
            if (v126 <= v128)
              goto LABEL_258;
            v130 = v128 + 0.5;
            if (v126 >= v130)
              v129 = v130;
            else
              v129 = v126;
            v131 = &v42[2]._os_unfair_lock_opaque;
            do
              v132 = __ldaxr(v131);
            while (__stlxr(v132 + 1, v131));
            v133 = (uint64_t)v42;
            if (!v132)
            {
              do
              {
                v133 = 0;
                v182 = __ldaxr(v131);
              }
              while (__stlxr(v182 - 1, v131));
            }
            if (!CA::Render::Server::add_callback(0, (uint64_t)CA::Render::Context::enqueue_command_stream(CA::Render::Context::CommandStream *)::$_0::__invoke, v133, v129)|| !CA::Render::Server::_thread)
            {
              __assert_rtn("enqueue_command_stream", "render-context.cpp", 1174, "success && Server::is_running ()");
            }
LABEL_256:
            if (v129 == 0.0)
            {
LABEL_258:
              if (!*(_QWORD *)&v42[172]._os_unfair_lock_opaque && !*((_QWORD *)&v203 + 1))
              {
                CA::Render::Context::apply_streams((CA::Render::Context *)v42, port_info_outCnt, 1);
                (*(void (**)(_QWORD *))(*v45 + 8))(v45);
                goto LABEL_353;
              }
            }
            (*(void (**)(_QWORD *))(*v45 + 32))(v45);
            v134 = (malloc_zone_t *)get_malloc_zone();
            v135 = (double *)malloc_type_zone_malloc(v134, 0x20uLL, 0x8BB15036uLL);
            v136 = v135;
            *v135 = 0.0;
            v135[2] = v129;
            *((_QWORD *)v135 + 3) = v45;
            if (*((_QWORD *)&v203 + 1))
            {
              v137 = v203;
              if ((_QWORD)v203)
              {
                v187 = v42 + 178;
                v190 = v135;
                while (1)
                {
                  v138 = *(unsigned int *)(v137 + 16);
                  v139 = *(_QWORD *)&v42[176]._os_unfair_lock_opaque;
                  v195 = (uint64_t *)v137;
                  if (v139)
                  {
                    v140 = (uint8x8_t)vcnt_s8((int8x8_t)v139);
                    v140.i16[0] = vaddlv_u8(v140);
                    if (v140.u32[0] > 1uLL)
                    {
                      v141 = *(unsigned int *)(v137 + 16);
                      if (v139 <= v138)
                        v141 = v138 % v139;
                    }
                    else
                    {
                      v141 = ((_DWORD)v139 - 1) & v138;
                    }
                    v142 = *(void ***)(*(_QWORD *)&v42[174]._os_unfair_lock_opaque + 8 * v141);
                    if (v142)
                    {
                      v143 = *v142;
                      if (*v142)
                      {
                        do
                        {
                          v144 = v143[1];
                          if (v144 == v138)
                          {
                            if (*((_DWORD *)v143 + 4) == (_DWORD)v138)
                            {
                              v136 = v190;
                              v166 = v195;
                              goto LABEL_336;
                            }
                          }
                          else
                          {
                            if (v140.u32[0] > 1uLL)
                            {
                              if (v144 >= v139)
                                v144 %= v139;
                            }
                            else
                            {
                              v144 &= v139 - 1;
                            }
                            if (v144 != v141)
                              break;
                          }
                          v143 = (_QWORD *)*v143;
                        }
                        while (v143);
                      }
                    }
                  }
                  else
                  {
                    v141 = 0;
                  }
                  v143 = operator new(0x20uLL);
                  *v143 = 0;
                  v143[1] = v138;
                  *((_DWORD *)v143 + 4) = v138;
                  v143[3] = 0;
                  v145 = (float)(unint64_t)(*(_QWORD *)&v42[180]._os_unfair_lock_opaque + 1);
                  v146 = *(float *)&v42[182]._os_unfair_lock_opaque;
                  if (!v139 || (float)(v146 * (float)v139) < v145)
                    break;
LABEL_326:
                  v163 = *(_QWORD *)&v42[174]._os_unfair_lock_opaque;
                  v164 = *(_QWORD **)(v163 + 8 * v141);
                  v166 = v195;
                  if (v164)
                  {
                    *v143 = *v164;
                    v136 = v190;
                  }
                  else
                  {
                    *v143 = *(_QWORD *)&v187->_os_unfair_lock_opaque;
                    *(_QWORD *)&v187->_os_unfair_lock_opaque = v143;
                    *(_QWORD *)(v163 + 8 * v141) = v187;
                    v136 = v190;
                    if (!*v143)
                      goto LABEL_335;
                    v165 = *(_QWORD *)(*v143 + 8);
                    if ((v139 & (v139 - 1)) != 0)
                    {
                      if (v165 >= v139)
                        v165 %= v139;
                    }
                    else
                    {
                      v165 &= v139 - 1;
                    }
                    v164 = (_QWORD *)(*(_QWORD *)&v42[174]._os_unfair_lock_opaque + 8 * v165);
                  }
                  *v164 = v143;
LABEL_335:
                  ++*(_QWORD *)&v42[180]._os_unfair_lock_opaque;
LABEL_336:
                  v143[3] = v136;
                  v137 = *v166;
                  if (!v137)
                    goto LABEL_347;
                }
                v147 = (v139 & (v139 - 1)) != 0;
                if (v139 < 3)
                  v147 = 1;
                v148 = v147 | (2 * v139);
                v149 = vcvtps_u32_f32(v145 / v146);
                if (v148 <= v149)
                  prime = (int8x8_t)v149;
                else
                  prime = (int8x8_t)v148;
                if (*(_QWORD *)&prime == 1)
                {
                  prime = (int8x8_t)2;
                }
                else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
                {
                  prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
                }
                v139 = *(_QWORD *)&v42[176]._os_unfair_lock_opaque;
                if (*(_QWORD *)&prime > v139)
                  goto LABEL_292;
                if (*(_QWORD *)&prime < v139)
                {
                  v157 = vcvtps_u32_f32((float)*(unint64_t *)&v42[180]._os_unfair_lock_opaque/ *(float *)&v42[182]._os_unfair_lock_opaque);
                  if (v139 < 3
                    || (v158 = (uint8x8_t)vcnt_s8((int8x8_t)v139), v158.i16[0] = vaddlv_u8(v158), v158.u32[0] > 1uLL))
                  {
                    v157 = std::__next_prime(v157);
                  }
                  else
                  {
                    v159 = 1 << -(char)__clz(v157 - 1);
                    if (v157 >= 2)
                      v157 = v159;
                  }
                  if (*(_QWORD *)&prime <= v157)
                    prime = (int8x8_t)v157;
                  if (*(_QWORD *)&prime >= v139)
                  {
                    v139 = *(_QWORD *)&v42[176]._os_unfair_lock_opaque;
                  }
                  else
                  {
                    if (prime)
                    {
LABEL_292:
                      if (*(_QWORD *)&prime >> 61)
                        goto LABEL_393;
                      v151 = operator new(8 * *(_QWORD *)&prime);
                      v152 = *(void **)&v42[174]._os_unfair_lock_opaque;
                      *(_QWORD *)&v42[174]._os_unfair_lock_opaque = v151;
                      if (v152)
                        operator delete(v152);
                      v153 = 0;
                      *(int8x8_t *)&v42[176]._os_unfair_lock_opaque = prime;
                      do
                        *(_QWORD *)(*(_QWORD *)&v42[174]._os_unfair_lock_opaque + 8 * v153++) = 0;
                      while (*(_QWORD *)&prime != v153);
                      v154 = *(_QWORD **)&v187->_os_unfair_lock_opaque;
                      if (*(_QWORD *)&v187->_os_unfair_lock_opaque)
                      {
                        v155 = v154[1];
                        v156 = (uint8x8_t)vcnt_s8(prime);
                        v156.i16[0] = vaddlv_u8(v156);
                        if (v156.u32[0] > 1uLL)
                        {
                          if (v155 >= *(_QWORD *)&prime)
                            v155 %= *(_QWORD *)&prime;
                        }
                        else
                        {
                          v155 &= *(_QWORD *)&prime - 1;
                        }
                        *(_QWORD *)(*(_QWORD *)&v42[174]._os_unfair_lock_opaque + 8 * v155) = v187;
                        v160 = (_QWORD *)*v154;
                        if (*v154)
                        {
                          do
                          {
                            v161 = v160[1];
                            if (v156.u32[0] > 1uLL)
                            {
                              if (v161 >= *(_QWORD *)&prime)
                                v161 %= *(_QWORD *)&prime;
                            }
                            else
                            {
                              v161 &= *(_QWORD *)&prime - 1;
                            }
                            if (v161 != v155)
                            {
                              v162 = *(_QWORD *)&v42[174]._os_unfair_lock_opaque;
                              if (!*(_QWORD *)(v162 + 8 * v161))
                              {
                                *(_QWORD *)(v162 + 8 * v161) = v154;
                                goto LABEL_317;
                              }
                              *v154 = *v160;
                              *v160 = **(_QWORD **)(*(_QWORD *)&v42[174]._os_unfair_lock_opaque + 8 * v161);
                              **(_QWORD **)(*(_QWORD *)&v42[174]._os_unfair_lock_opaque + 8 * v161) = v160;
                              v160 = v154;
                            }
                            v161 = v155;
LABEL_317:
                            v154 = v160;
                            v160 = (_QWORD *)*v160;
                            v155 = v161;
                          }
                          while (v160);
                        }
                      }
                      v139 = (unint64_t)prime;
                      goto LABEL_321;
                    }
                    v167 = *(void **)&v42[174]._os_unfair_lock_opaque;
                    *(_QWORD *)&v42[174]._os_unfair_lock_opaque = 0;
                    if (v167)
                      operator delete(v167);
                    v139 = 0;
                    *(_QWORD *)&v42[176]._os_unfair_lock_opaque = 0;
                  }
                }
LABEL_321:
                if ((v139 & (v139 - 1)) != 0)
                {
                  if (v139 <= v138)
                    v141 = v138 % v139;
                  else
                    v141 = v138;
                }
                else
                {
                  v141 = ((_DWORD)v139 - 1) & v138;
                }
                goto LABEL_326;
              }
LABEL_347:
              v168 = operator new();
              v169 = std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__hash_table(v168, (uint64_t *)&v202);
              v8 = (ipc_space_t *)MEMORY[0x1E0C83DA0];
            }
            else
            {
              v169 = 0;
            }
            *((_QWORD *)v136 + 1) = v169;
            v170 = *(double **)&v42[172]._os_unfair_lock_opaque;
            if (v170)
            {
              do
              {
                v171 = (double **)v170;
                v170 = *(double **)v170;
              }
              while (v170);
              *v171 = v136;
            }
            else
            {
              *(_QWORD *)&v42[172]._os_unfair_lock_opaque = v136;
            }
LABEL_353:
            v33 = v196;
            std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)&v202);
          }
          os_unfair_lock_unlock(lock);
          v31 = 0;
          goto LABEL_53;
        default:
LABEL_205:
          v104 = 0;
          msgh_voucher_port = 0;
          goto LABEL_206;
      }
    }
LABEL_63:
    CA::Render::Server::CmdStreamMsg::_send_reply((CA::Render::Server::CmdStreamMsg *)v45);
    v8 = (ipc_space_t *)MEMORY[0x1E0C83DA0];
    if (v45[521])
      goto LABEL_64;
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v102 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_ERROR))
      {
        v103 = v42[4]._os_unfair_lock_opaque;
        LODWORD(v202) = 67109120;
        DWORD1(v202) = v103;
        _os_log_impl(&dword_184457000, v102, OS_LOG_TYPE_ERROR, "CmdStreamMsg for %x is invalid", (uint8_t *)&v202, 8u);
      }
    }
    (*(void (**)(_QWORD *))(*v45 + 8))(v45);
    v31 = 0;
    v38 = 0;
    v33 = v196;
LABEL_115:
    voucher_mach_msg_revert(state);
    if (v33)
    {
      bzero(policy_info, v33);
      if ((v31 & 1) == 0)
        goto LABEL_118;
LABEL_117:
      free(v29);
      goto LABEL_118;
    }
    if (v31)
      goto LABEL_117;
LABEL_118:
    objc_autoreleasePoolPop(v13);
  }
  while (!v38);
  pthread_mutex_lock(&CA::Render::Server::_mutex);
  CA::Render::Server::_thread = 0;
  pthread_cond_broadcast(&CA::Render::Server::_cond);
  return pthread_mutex_unlock(&CA::Render::Server::_mutex);
}

double CATimeWithHostTime(unint64_t a1)
{
  double *v1;
  double v2;
  unint64_t v4;

  v1 = (double *)&unk_1ECDC6000;
  v2 = *(double *)&time_scale;
  if (*(double *)&time_scale == 0.0)
  {
    if (time_scale_once != -1)
    {
      v4 = a1;
      dispatch_once_f(&time_scale_once, 0, (dispatch_function_t)initialize_time_scale);
      v1 = (double *)&unk_1ECDC6000;
      a1 = v4;
    }
    v2 = v1[357];
  }
  return v2 * (double)a1;
}

void CA::Render::Layer::~Layer(CA::Render::Layer *this, const CA::Render::Object *a2)
{
  malloc_zone_t *malloc_zone;

  CA::Render::Layer::~Layer(this, a2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  CA::Render::Layer::Ext *v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;

  *(_QWORD *)this = off_1E15989E0;
  v3 = (unsigned int *)*((_QWORD *)this + 13);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
  }
  if ((*((_BYTE *)this + 13) & 2) == 0)
  {
    v7 = (unsigned int *)*((_QWORD *)this + 14);
    if (v7)
    {
      v8 = v7 + 2;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
        (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
    }
  }
  v11 = (unsigned int *)*((_QWORD *)this + 18);
  if (v11)
  {
    v12 = v11 + 2;
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
      (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 16))(v11);
  }
  v15 = (unsigned int *)*((_QWORD *)this + 17);
  if (v15)
  {
    v16 = v15 + 2;
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
      (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 16))(v15);
  }
  v19 = (CA::Render::Layer::Ext *)*((_QWORD *)this + 16);
  if (v19)
    CA::Render::Layer::Ext::unref(v19);
  v20 = (unsigned int *)*((_QWORD *)this + 15);
  if (v20)
  {
    v21 = v20 + 2;
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
      (*(void (**)(unsigned int *))(*(_QWORD *)v20 + 16))(v20);
  }
  v24 = (unsigned int *)*((_QWORD *)this + 12);
  if (v24)
  {
    v25 = v24 + 2;
    do
    {
      v26 = __ldaxr(v25);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, v25));
    if (!v27)
      (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 16))(v24);
  }
  --dword_1ECDC7C9C;
  *(_QWORD *)this = off_1E1598C30;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0)
    CA::Render::Encoder::ObjectCache::invalidate(this, a2);
}

void CA::Render::LayerNode::update_frame_transform(uint64_t a1, double *a2)
{
  float64x2_t *v3;
  uint64_t v5;
  float64x2_t *v6;
  float64x2_t *v7;
  _BOOL4 v8;
  float64x2_t *v9;
  malloc_zone_t *v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  double v19;
  double v20;
  double v21;
  malloc_zone_t *malloc_zone;
  double *v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  uint64_t v32;
  uint64_t v33;
  float64_t v34;
  uint64_t v35;
  void *v36;
  malloc_zone_t *v37;
  uint64_t v38;
  __int128 v39;
  double v40;
  double v41;
  double v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  double v46;
  double v47;
  malloc_zone_t *v48;

  v3 = *(float64x2_t **)(a1 + 88);
  if ((*(_BYTE *)(a1 + 26) & 2) == 0)
  {
    if (v3)
    {
      v5 = *(_QWORD *)&v3[2].f64[0];
      v6 = *(float64x2_t **)&v3[3].f64[1];
      v7 = v3 + 4;
      if (*(_QWORD *)&v3[5].f64[1])
        v8 = (*(_BYTE *)(v5 + 13) & 9) != 0;
      else
        v8 = 0;
    }
    else
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v5 = 0;
    }
    v9 = *(float64x2_t **)(a1 + 56);
    if (*(_QWORD *)(a1 + 144)
      || !CA::Render::Layer::compute_frame_offset(*(_QWORD *)(a1 + 32), v5, (float64x2_t *)(a1 + 64)))
    {
      if (!v9)
      {
        malloc_zone = (malloc_zone_t *)get_malloc_zone();
        v9 = (float64x2_t *)malloc_type_zone_malloc(malloc_zone, 0x80uLL, 0x8BB15036uLL);
      }
      CA::Render::Layer::compute_frame_transform(*(_QWORD *)(a1 + 32), v5, (CA::Mat4Impl *)v9, *(const double **)(a1 + 144));
      if (a2)
        CA::Mat4Impl::mat4_get_scale((CA::Mat4Impl *)v9, a2, a2 + 1, v23);
      if (v8)
      {
        if (v6)
        {
          CA::Mat4Impl::mat4_concat(v9, v9->f64, v6->f64, v23);
        }
        else
        {
          v24.f64[0] = v7[1].f64[0];
          v25 = v9[1];
          v26 = v9[3];
          v27 = v9[5];
          v28 = v9[7];
          v29 = vmlaq_laneq_f64(v9[2], *v7, v26, 1);
          v30 = vmlaq_laneq_f64(v9[4], *v7, v27, 1);
          v31 = vmlaq_laneq_f64(v9[6], *v7, v28, 1);
          *v9 = vmlaq_laneq_f64(*v9, *v7, v25, 1);
          v9[1] = vmlaq_laneq_f64(v25, v24, v25, 1);
          v9[2] = v29;
          v9[3] = vmlaq_laneq_f64(v26, v24, v26, 1);
          v9[4] = v30;
          v9[5] = vmlaq_laneq_f64(v27, v24, v27, 1);
          v9[6] = v31;
          v9[7] = vmlaq_laneq_f64(v28, v24, v28, 1);
        }
      }
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 32) + 41) & 0x10) != 0
        && v9[4].f64[0] * v9[4].f64[0] + v9[4].f64[1] * v9[4].f64[1] + v9[5].f64[0] * v9[5].f64[0] == 0.0)
      {
        v9[6] = 0u;
        v9[7] = 0u;
        v9[4] = 0u;
        v9[5] = 0u;
        v9[2] = 0u;
        v9[3] = 0u;
        *v9 = 0u;
        v9[1] = 0u;
      }
      goto LABEL_25;
    }
    if (v8)
    {
      if (v6)
      {
        if (!v9)
        {
          v10 = (malloc_zone_t *)get_malloc_zone();
          v9 = (float64x2_t *)malloc_type_zone_malloc(v10, 0x80uLL, 0x8BB15036uLL);
        }
        v11 = *v6;
        v12 = v6[1];
        v13 = v6[2];
        v14 = v6[3];
        *v9 = *v6;
        v9[1] = v12;
        v9[2] = v13;
        v9[3] = v14;
        v15 = v6[4];
        v16 = v6[5];
        v17 = v6[6];
        v18 = v6[7];
        v9[4] = v15;
        v9[5] = v16;
        v9[6] = v17;
        v9[7] = v18;
        v19 = *(double *)(a1 + 64);
        v20 = *(double *)(a1 + 72);
        v21 = *(double *)(a1 + 80);
        v9[6] = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v17, v11, v19), v13, v20), v15, v21);
        v9[7] = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v18, v12, v19), v14, v20), v16, v21);
LABEL_25:
        *(_QWORD *)(a1 + 56) = v9;
        goto LABEL_26;
      }
      v47 = *(double *)(a1 + 72);
      *(double *)(a1 + 64) = *(double *)(a1 + 64) + v7->f64[0];
      *(double *)(a1 + 72) = v47 + v7->f64[1];
      *(double *)(a1 + 80) = *(double *)(a1 + 80) + v7[1].f64[0];
    }
    if (v9)
    {
      v48 = (malloc_zone_t *)get_malloc_zone();
      malloc_zone_free(v48, v9);
      v9 = 0;
    }
    goto LABEL_25;
  }
LABEL_26:
  v32 = *(_QWORD *)(a1 + 32);
  v33 = *(_QWORD *)(v32 + 144);
  if (!v33)
  {
    if (v3)
    {
      v35 = *(_QWORD *)&v3[1].f64[1] & 0x1000001;
      goto LABEL_43;
    }
LABEL_42:
    v35 = 0;
    goto LABEL_43;
  }
  if (!v3)
    goto LABEL_42;
  v34 = v3[1].f64[1];
  v35 = LODWORD(v34) & 0x1000001;
  if ((*(_BYTE *)(v33 + 13) & 1) != 0
    && ((LODWORD(v34) ^ HIBYTE(LODWORD(v34))) & 1) != 0
    && (*(_BYTE *)(a1 + 26) & 2) == 0)
  {
    if ((LODWORD(v34) & 0x800000) != 0)
    {
      v35 ^= 0x1000000uLL;
    }
    else
    {
      v36 = *(void **)(a1 + 56);
      if (!v36)
      {
        v37 = (malloc_zone_t *)get_malloc_zone();
        v36 = malloc_type_zone_malloc(v37, 0x80uLL, 0x8BB15036uLL);
        v38 = *(_QWORD *)(a1 + 80);
        v39 = *(_OWORD *)(a1 + 64);
        *(_OWORD *)v36 = xmmword_18474DF40;
        *((_QWORD *)v36 + 2) = 0;
        *((_QWORD *)v36 + 3) = 0;
        *((_OWORD *)v36 + 2) = xmmword_18474DF50;
        *((_OWORD *)v36 + 3) = 0u;
        *((_OWORD *)v36 + 4) = 0u;
        *((_OWORD *)v36 + 5) = xmmword_18474DF40;
        *((_OWORD *)v36 + 6) = v39;
        *((_OWORD *)v36 + 7) = xmmword_18474DF50;
        *((_QWORD *)v36 + 14) = v38;
        *(_QWORD *)(a1 + 56) = v36;
        v32 = *(_QWORD *)(a1 + 32);
      }
      v35 ^= 1uLL;
      v40 = *(double *)(v32 + 64);
      v41 = *(double *)(v32 + 72);
      if (v40 != 0.0 || v41 != 0.0)
      {
        CA::Mat4Impl::mat4_translate((float64x2_t *)v36, a2, v40, v41, 0.0);
        v40 = *(double *)(v32 + 64);
      }
      v42 = *(double *)(v32 + 88);
      v43 = *((float64x2_t *)v36 + 2);
      v44 = *((float64x2_t *)v36 + 3);
      v45 = vmlaq_n_f64(*((float64x2_t *)v36 + 7), v44, v42);
      *((float64x2_t *)v36 + 6) = vmlaq_n_f64(*((float64x2_t *)v36 + 6), v43, v42);
      *((float64x2_t *)v36 + 7) = v45;
      *((float64x2_t *)v36 + 2) = vnegq_f64(v43);
      *((float64x2_t *)v36 + 3) = vnegq_f64(v44);
      v46 = *(double *)(v32 + 72);
      if (v40 != 0.0 || v46 != 0.0)
        CA::Mat4Impl::mat4_translate((float64x2_t *)v36, a2, -v40, -v46, 0.0);
    }
  }
LABEL_43:
  *(_QWORD *)(a1 + 24) = (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 40) >> 9) & 1 ^ v35 | *(_QWORD *)(a1 + 24) & 0xFFFFFFFFFEFFFFFELL;
}

uint64_t get_malloc_zone(void)
{
  if (get_malloc_zone(void)::once[0] != -1)
    dispatch_once_f(get_malloc_zone(void)::once, 0, (dispatch_function_t)malloc_zone_init);
  return malloc_zone;
}

uint64_t CA::Render::Layer::compute_frame_offset(uint64_t a1, uint64_t a2, float64x2_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  float64x2_t v7;
  double v8;
  float64x2_t v9;

  v3 = *(_QWORD *)(a1 + 128);
  if (v3 && *(_QWORD *)(v3 + 16))
    return 0;
  v4 = *(_QWORD *)(a1 + 40);
  if ((v4 & 0x2200) != 0)
    return 0;
  if (a2)
  {
    v6 = *(_QWORD *)(a2 + 128);
    if (v6)
    {
      if (*(_QWORD *)(v6 + 24))
        return 0;
    }
  }
  if (v3)
  {
    v7 = vsubq_f64(*(float64x2_t *)(a1 + 48), vmlaq_f64(*(float64x2_t *)(a1 + 64), *(float64x2_t *)(a1 + 80), *(float64x2_t *)(v3 + 168)));
    v8 = *(double *)(v3 + 192) - *(double *)(v3 + 184);
  }
  else
  {
    v9 = 0uLL;
    if ((v4 & 0x400000000000) == 0)
    {
      __asm { FMOV            V1.2D, #0.5 }
      v9 = vmulq_f64(*(float64x2_t *)(a1 + 80), _Q1);
    }
    v7 = vsubq_f64(*(float64x2_t *)(a1 + 48), vaddq_f64(v9, *(float64x2_t *)(a1 + 64)));
    v8 = 0.0;
  }
  *a3 = v7;
  a3[1].f64[0] = v8;
  return 1;
}

float64x2_t CA::Mat4Impl::mat4_concat(float64x2_t *this, double *a2, const double *a3, const double *a4)
{
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t result;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;

  v4 = *(float64x2_t *)(a2 + 2);
  v5 = *(float64x2_t *)(a2 + 4);
  v6 = *(float64x2_t *)(a2 + 6);
  v7 = *(float64x2_t *)(a2 + 8);
  v8 = *(float64x2_t *)(a2 + 10);
  v10 = *(float64x2_t *)(a2 + 12);
  result = *(float64x2_t *)(a2 + 14);
  v11 = *(float64x2_t *)(a3 + 2);
  v12 = *(float64x2_t *)(a3 + 4);
  v13 = *(float64x2_t *)(a3 + 6);
  v14 = vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)a3, v5.f64[0]), v12, v5, 1);
  v15 = vmlaq_laneq_f64(vmulq_n_f64(v11, v5.f64[0]), v13, v5, 1);
  v16 = *(float64x2_t *)(a3 + 8);
  v17 = *(float64x2_t *)(a3 + 10);
  v18 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)a3, *a2), v12, *(float64x2_t *)a2, 1), v16, v4.f64[0]);
  v19 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v11, *a2), v13, *(float64x2_t *)a2, 1), v17, v4.f64[0]);
  v20 = vmlaq_n_f64(v14, v16, v6.f64[0]);
  v21 = vmlaq_n_f64(v15, v17, v6.f64[0]);
  v22 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)a3, v7.f64[0]), v12, v7, 1), v16, v8.f64[0]);
  v23 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v11, v7.f64[0]), v13, v7, 1), v17, v8.f64[0]);
  v24 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)a3, v10.f64[0]), v12, v10, 1), v16, result.f64[0]);
  v25 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v11, v10.f64[0]), v13, v10, 1), v17, result.f64[0]);
  v26 = *(float64x2_t *)(a3 + 12);
  v27 = *(float64x2_t *)(a3 + 14);
  *this = vmlaq_laneq_f64(v18, v26, v4, 1);
  this[1] = vmlaq_laneq_f64(v19, v27, v4, 1);
  this[2] = vmlaq_laneq_f64(v20, v26, v6, 1);
  this[3] = vmlaq_laneq_f64(v21, v27, v6, 1);
  this[4] = vmlaq_laneq_f64(v22, v26, v8, 1);
  this[5] = vmlaq_laneq_f64(v23, v27, v8, 1);
  this[6] = vmlaq_laneq_f64(v24, v26, result, 1);
  this[7] = vmlaq_laneq_f64(v25, v27, result, 1);
  return result;
}

double CA::Mat4Impl::mat4_get_scale(CA::Mat4Impl *this, double *a2, double *a3, double *a4)
{
  double v4;
  double v5;
  double v6;
  double v7;
  _BOOL4 v8;
  double v9;
  double v10;
  double result;

  v4 = *(double *)this * *(double *)this + *((double *)this + 1) * *((double *)this + 1);
  v5 = *((double *)this + 4) * *((double *)this + 4) + *((double *)this + 5) * *((double *)this + 5);
  v6 = *((double *)this + 15);
  if (v6 != 1.0)
  {
    v7 = 1.0 / (v6 * v6);
    v4 = v7 * v4;
    v5 = v7 * v5;
  }
  v8 = v4 != 1.0;
  if (v5 != 1.0)
    v8 = 1;
  v9 = sqrt(v4);
  v10 = sqrt(v5);
  if (v8)
    v5 = v10;
  if (a2)
  {
    if (v8)
      v4 = v9;
    *a2 = v4;
  }
  if (a3)
    *a3 = v5;
  result = (v10 + v9) * 0.5;
  if (!v8)
    return 1.0;
  return result;
}

float64x2_t CA::Render::Layer::compute_frame_transform(uint64_t a1, uint64_t a2, CA::Mat4Impl *this, const double *a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  float64x2_t v10;
  double v11;
  uint64_t v17;
  uint64_t v18;
  __int128 *v19;
  unsigned int v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  unint64_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t result;
  float64x2_t v40;
  float64x2_t v41;
  double v42;
  double v43;
  unsigned int v45;
  const double *v46;
  const double *v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  uint64_t v52;
  double v53;
  float64x2_t v54;
  double v55;
  double v56;
  float64x2_t v57;
  double v58;
  float64x2_t v59;
  float64x2_t v60;
  double v61;

  v7 = *(_QWORD *)(a1 + 128);
  if (a2)
  {
    v8 = *(_QWORD *)(a2 + 128);
    v9 = (*(unsigned __int8 *)(a2 + 45) >> 6) & 1;
    if (v7)
    {
LABEL_3:
      v10 = vmulq_f64(*(float64x2_t *)(v7 + 168), *(float64x2_t *)(a1 + 80));
      v11 = *(double *)(v7 + 184);
      goto LABEL_7;
    }
  }
  else
  {
    v8 = 0;
    LOBYTE(v9) = 0;
    if (v7)
      goto LABEL_3;
  }
  v10 = 0uLL;
  v11 = 0.0;
  if ((*(_BYTE *)(a1 + 45) & 0x40) == 0)
  {
    __asm { FMOV            V1.2D, #0.5 }
    v10 = vmulq_f64(*(float64x2_t *)(a1 + 80), _Q1);
  }
LABEL_7:
  if (v8)
    v17 = *(_QWORD *)(v8 + 24);
  else
    v17 = 0;
  if (!((unint64_t)a4 | v17))
  {
    if (v7)
    {
      v18 = *(_QWORD *)(v7 + 16);
      if (v18)
        goto LABEL_16;
      *(_OWORD *)this = xmmword_18474DF40;
      *((_OWORD *)this + 1) = 0u;
      *((_OWORD *)this + 2) = xmmword_18474DF50;
      *((_OWORD *)this + 3) = 0u;
      *((_OWORD *)this + 4) = 0u;
      *((_OWORD *)this + 5) = xmmword_18474DF40;
      *((_OWORD *)this + 6) = 0u;
      *((_OWORD *)this + 7) = xmmword_18474DF50;
      result = vsubq_f64(*(float64x2_t *)(a1 + 48), v10);
      *((float64x2_t *)this + 6) = result;
      v43 = *(double *)(v7 + 192);
    }
    else
    {
      *(_OWORD *)this = xmmword_18474DF40;
      *((_OWORD *)this + 1) = 0u;
      *((_OWORD *)this + 2) = xmmword_18474DF50;
      *((_OWORD *)this + 3) = 0u;
      *((_OWORD *)this + 4) = 0u;
      *((_OWORD *)this + 5) = xmmword_18474DF40;
      *((_OWORD *)this + 6) = 0u;
      *((_OWORD *)this + 7) = xmmword_18474DF50;
      result = vsubq_f64(*(float64x2_t *)(a1 + 48), v10);
      *((float64x2_t *)this + 6) = result;
      v43 = 0.0;
    }
    *((double *)this + 14) = v43 - v11;
    v35 = (float64x2_t)xmmword_18474DF50;
    v38 = (float64x2_t)xmmword_18474DF40;
    v37 = 0uLL;
    v34 = 0uLL;
    v33 = (float64x2_t)xmmword_18474DF40;
    v36 = 0uLL;
    goto LABEL_37;
  }
  if (v7)
  {
    v18 = *(_QWORD *)(v7 + 16);
    if (v18)
    {
LABEL_16:
      v20 = *(_DWORD *)(v18 + 16);
      v19 = (__int128 *)(v18 + 24);
      if (v20 <= 0xF)
        v19 = &CA::Mat4Impl::mat4_identity_double;
      goto LABEL_18;
    }
  }
  v19 = &CA::Mat4Impl::mat4_identity_double;
LABEL_18:
  v22 = (float64x2_t)*v19;
  v21 = (float64x2_t)v19[1];
  v23 = (float64x2_t)v19[2];
  v24 = (float64x2_t)v19[3];
  *(_OWORD *)this = *v19;
  *((float64x2_t *)this + 1) = v21;
  *((float64x2_t *)this + 2) = v23;
  *((float64x2_t *)this + 3) = v24;
  v26 = (float64x2_t)v19[4];
  v25 = (float64x2_t)v19[5];
  v27 = (float64x2_t)v19[6];
  v28 = (float64x2_t)v19[7];
  *((float64x2_t *)this + 4) = v26;
  *((float64x2_t *)this + 5) = v25;
  v29 = vmlsq_lane_f64(vmlsq_lane_f64(vmlsq_lane_f64(v27, v22, v10.f64[0], 0), v23, v10.f64[1], 0), v26, v11, 0);
  v30 = vmlsq_lane_f64(vmlsq_lane_f64(vmlsq_lane_f64(v28, v21, v10.f64[0], 0), v24, v10.f64[1], 0), v25, v11, 0);
  *((float64x2_t *)this + 6) = v29;
  *((float64x2_t *)this + 7) = v30;
  v31 = *(float64x2_t *)(a1 + 48);
  if (v7)
    v32 = *(_QWORD *)(v7 + 192);
  else
    v32 = 0;
  v33 = vmlaq_laneq_f64(v22, v31, v21, 1);
  v34 = vmlaq_laneq_f64(v21, (float64x2_t)v32, v21, 1);
  v35 = vmlaq_laneq_f64(v23, v31, v24, 1);
  v36 = vmlaq_laneq_f64(v24, (float64x2_t)v32, v24, 1);
  v37 = vmlaq_laneq_f64(v26, v31, v25, 1);
  v38 = vmlaq_laneq_f64(v25, (float64x2_t)v32, v25, 1);
  result = vmlaq_laneq_f64(v29, v31, v30, 1);
  *(float64x2_t *)this = v33;
  *((float64x2_t *)this + 1) = v34;
  *((float64x2_t *)this + 2) = v35;
  *((float64x2_t *)this + 3) = v36;
  *((float64x2_t *)this + 4) = v37;
  *((float64x2_t *)this + 5) = v38;
  v40 = vmlaq_laneq_f64(v30, (float64x2_t)v32, v30, 1);
  *((float64x2_t *)this + 6) = result;
  *((float64x2_t *)this + 7) = v40;
  if ((unint64_t)a4 | v17)
  {
    if (v8)
    {
      v41 = vmulq_f64(*(float64x2_t *)(v8 + 168), *(float64x2_t *)(a2 + 80));
      v42 = *(double *)(v8 + 184);
    }
    else
    {
      v41 = 0uLL;
      v42 = 0.0;
      if ((v9 & 1) == 0)
      {
        __asm { FMOV            V16.2D, #0.5 }
        v41 = vmulq_f64(*(float64x2_t *)(a2 + 80), _Q16);
      }
    }
    v60 = vaddq_f64(*(float64x2_t *)(a2 + 64), v41);
    v61 = v42;
    *(float64x2_t *)this = vmlsq_laneq_f64(v33, v60, v34, 1);
    *((float64x2_t *)this + 1) = vmlaq_laneq_f64(v34, (float64x2_t)COERCE_UNSIGNED_INT64(-v42), v34, 1);
    *((float64x2_t *)this + 2) = vmlsq_laneq_f64(v35, v60, v36, 1);
    *((float64x2_t *)this + 3) = vmlaq_laneq_f64(v36, (float64x2_t)COERCE_UNSIGNED_INT64(-v42), v36, 1);
    *((float64x2_t *)this + 4) = vmlsq_laneq_f64(v37, v60, v38, 1);
    *((float64x2_t *)this + 5) = vmlaq_laneq_f64(v38, (float64x2_t)COERCE_UNSIGNED_INT64(-v42), v38, 1);
    *((float64x2_t *)this + 6) = vmlsq_laneq_f64(result, v60, v40, 1);
    *((float64x2_t *)this + 7) = vmlaq_laneq_f64(v40, (float64x2_t)COERCE_UNSIGNED_INT64(-v42), v40, 1);
    if (v17)
    {
      v45 = *(_DWORD *)(v17 + 16);
      v46 = (const double *)(v17 + 24);
      if (v45 <= 0xF)
        v47 = (const double *)&CA::Mat4Impl::mat4_identity_double;
      else
        v47 = v46;
      CA::Mat4Impl::mat4_concat((float64x2_t *)this, (double *)this, v47, a4);
      v42 = v61;
    }
    if (a4)
    {
      CA::Mat4Impl::mat4_concat((float64x2_t *)this, (double *)this, a4, a4);
      v42 = v61;
    }
    v48 = *((float64x2_t *)this + 1);
    v49 = *((float64x2_t *)this + 3);
    v50 = *((float64x2_t *)this + 5);
    v51 = *((float64x2_t *)this + 7);
    v33 = vmlaq_laneq_f64(*(float64x2_t *)this, v60, v48, 1);
    v34 = vmlaq_laneq_f64(v48, (float64x2_t)*(unint64_t *)&v42, v48, 1);
    v35 = vmlaq_laneq_f64(*((float64x2_t *)this + 2), v60, v49, 1);
    v36 = vmlaq_laneq_f64(v49, (float64x2_t)*(unint64_t *)&v42, v49, 1);
    v37 = vmlaq_laneq_f64(*((float64x2_t *)this + 4), v60, v50, 1);
    v38 = vmlaq_laneq_f64(v50, (float64x2_t)*(unint64_t *)&v42, v50, 1);
    result = vmlaq_laneq_f64(*((float64x2_t *)this + 6), v60, v51, 1);
    *(float64x2_t *)this = v33;
    *((float64x2_t *)this + 1) = v34;
    *((float64x2_t *)this + 2) = v35;
    *((float64x2_t *)this + 3) = v36;
    *((float64x2_t *)this + 4) = v37;
    *((float64x2_t *)this + 5) = v38;
    *((float64x2_t *)this + 6) = result;
    *((float64x2_t *)this + 7) = vmlaq_laneq_f64(v51, (float64x2_t)*(unint64_t *)&v42, v51, 1);
  }
LABEL_37:
  v52 = *(_QWORD *)(a1 + 40);
  if ((v52 & 0x200) != 0)
  {
    v53 = *(double *)(a1 + 88);
    result = vmlaq_n_f64(result, v35, v53);
    v54 = vmlaq_n_f64(*((float64x2_t *)this + 7), v36, v53);
    *((float64x2_t *)this + 6) = result;
    *((float64x2_t *)this + 7) = v54;
    *((float64x2_t *)this + 2) = vnegq_f64(v35);
    *((float64x2_t *)this + 3) = vnegq_f64(v36);
    v52 = *(_QWORD *)(a1 + 40);
  }
  if ((v52 & 0x2000) != 0)
  {
    v58 = *(double *)(a1 + 80);
    result = vmlaq_n_f64(result, v33, v58);
    v59 = vmlaq_n_f64(*((float64x2_t *)this + 7), v34, v58);
    *((float64x2_t *)this + 6) = result;
    *((float64x2_t *)this + 7) = v59;
    *(float64x2_t *)this = vnegq_f64(v33);
    *((float64x2_t *)this + 1) = vnegq_f64(v34);
  }
  v56 = *(double *)(a1 + 64);
  v55 = *(double *)(a1 + 72);
  if (v56 != 0.0 || v55 != 0.0)
  {
    v57 = vmlsq_lane_f64(vmlsq_lane_f64(*((float64x2_t *)this + 7), *((float64x2_t *)this + 1), v56, 0), *((float64x2_t *)this + 3), v55, 0);
    result = vmlaq_f64(vmlsq_lane_f64(vmlsq_lane_f64(result, *(float64x2_t *)this, v56, 0), *((float64x2_t *)this + 2), v55, 0), (float64x2_t)0, v37);
    *((float64x2_t *)this + 6) = result;
    *((float64x2_t *)this + 7) = vmlaq_f64(v57, (float64x2_t)0, v38);
  }
  return result;
}

void CA::Render::Layer::Ext::unref(CA::Render::Layer::Ext *this)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int *v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int *v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int *v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int *v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int *v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int *v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int v80;
  malloc_zone_t *malloc_zone;

  v2 = (unsigned int *)((char *)this + 324);
  do
  {
    v3 = __ldaxr(v2);
    v4 = v3 - 1;
  }
  while (__stlxr(v4, v2));
  if (!v4)
  {
    v5 = (unsigned int *)*((_QWORD *)this + 18);
    if (v5)
    {
      v6 = v5 + 2;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
    }
    v9 = (unsigned int *)*((_QWORD *)this + 17);
    if (v9)
    {
      v10 = v9 + 2;
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
    }
    v13 = (unsigned int *)*((_QWORD *)this + 16);
    if (v13)
    {
      v14 = v13 + 2;
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
        (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 16))(v13);
    }
    v17 = (unsigned int *)*((_QWORD *)this + 15);
    if (v17)
    {
      v18 = v17 + 2;
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
        (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 16))(v17);
    }
    v21 = (unsigned int *)*((_QWORD *)this + 14);
    if (v21)
    {
      v22 = v21 + 2;
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
        (*(void (**)(unsigned int *))(*(_QWORD *)v21 + 16))(v21);
    }
    v25 = (unsigned int *)*((_QWORD *)this + 13);
    if (v25)
    {
      v26 = v25 + 2;
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
        (*(void (**)(unsigned int *))(*(_QWORD *)v25 + 16))(v25);
    }
    v29 = (unsigned int *)*((_QWORD *)this + 12);
    if (v29)
    {
      v30 = v29 + 2;
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (!v32)
        (*(void (**)(unsigned int *))(*(_QWORD *)v29 + 16))(v29);
    }
    v33 = (unsigned int *)*((_QWORD *)this + 11);
    if (v33)
    {
      v34 = v33 + 2;
      do
      {
        v35 = __ldaxr(v34);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, v34));
      if (!v36)
        (*(void (**)(unsigned int *))(*(_QWORD *)v33 + 16))(v33);
    }
    v37 = (unsigned int *)*((_QWORD *)this + 10);
    if (v37)
    {
      v38 = v37 + 2;
      do
      {
        v39 = __ldaxr(v38);
        v40 = v39 - 1;
      }
      while (__stlxr(v40, v38));
      if (!v40)
        (*(void (**)(unsigned int *))(*(_QWORD *)v37 + 16))(v37);
    }
    v41 = (unsigned int *)*((_QWORD *)this + 9);
    if (v41)
    {
      v42 = v41 + 2;
      do
      {
        v43 = __ldaxr(v42);
        v44 = v43 - 1;
      }
      while (__stlxr(v44, v42));
      if (!v44)
        (*(void (**)(unsigned int *))(*(_QWORD *)v41 + 16))(v41);
    }
    v45 = (unsigned int *)*((_QWORD *)this + 8);
    if (v45)
    {
      v46 = v45 + 2;
      do
      {
        v47 = __ldaxr(v46);
        v48 = v47 - 1;
      }
      while (__stlxr(v48, v46));
      if (!v48)
        (*(void (**)(unsigned int *))(*(_QWORD *)v45 + 16))(v45);
    }
    v49 = (unsigned int *)*((_QWORD *)this + 7);
    if (v49)
    {
      v50 = v49 + 2;
      do
      {
        v51 = __ldaxr(v50);
        v52 = v51 - 1;
      }
      while (__stlxr(v52, v50));
      if (!v52)
        (*(void (**)(unsigned int *))(*(_QWORD *)v49 + 16))(v49);
    }
    v53 = (unsigned int *)*((_QWORD *)this + 6);
    if (v53)
    {
      v54 = v53 + 2;
      do
      {
        v55 = __ldaxr(v54);
        v56 = v55 - 1;
      }
      while (__stlxr(v56, v54));
      if (!v56)
        (*(void (**)(unsigned int *))(*(_QWORD *)v53 + 16))(v53);
    }
    v57 = (unsigned int *)*((_QWORD *)this + 5);
    if (v57)
    {
      v58 = v57 + 2;
      do
      {
        v59 = __ldaxr(v58);
        v60 = v59 - 1;
      }
      while (__stlxr(v60, v58));
      if (!v60)
        (*(void (**)(unsigned int *))(*(_QWORD *)v57 + 16))(v57);
    }
    v61 = (unsigned int *)*((_QWORD *)this + 4);
    if (v61)
    {
      v62 = v61 + 2;
      do
      {
        v63 = __ldaxr(v62);
        v64 = v63 - 1;
      }
      while (__stlxr(v64, v62));
      if (!v64)
        (*(void (**)(unsigned int *))(*(_QWORD *)v61 + 16))(v61);
    }
    v65 = (unsigned int *)*((_QWORD *)this + 3);
    if (v65)
    {
      v66 = v65 + 2;
      do
      {
        v67 = __ldaxr(v66);
        v68 = v67 - 1;
      }
      while (__stlxr(v68, v66));
      if (!v68)
        (*(void (**)(unsigned int *))(*(_QWORD *)v65 + 16))(v65);
    }
    v69 = (unsigned int *)*((_QWORD *)this + 2);
    if (v69)
    {
      v70 = v69 + 2;
      do
      {
        v71 = __ldaxr(v70);
        v72 = v71 - 1;
      }
      while (__stlxr(v72, v70));
      if (!v72)
        (*(void (**)(unsigned int *))(*(_QWORD *)v69 + 16))(v69);
    }
    v73 = (unsigned int *)*((_QWORD *)this + 1);
    if (v73)
    {
      v74 = v73 + 2;
      do
      {
        v75 = __ldaxr(v74);
        v76 = v75 - 1;
      }
      while (__stlxr(v76, v74));
      if (!v76)
        (*(void (**)(unsigned int *))(*(_QWORD *)v73 + 16))(v73);
    }
    v77 = *(unsigned int **)this;
    if (*(_QWORD *)this)
    {
      v78 = v77 + 2;
      do
      {
        v79 = __ldaxr(v78);
        v80 = v79 - 1;
      }
      while (__stlxr(v80, v78));
      if (!v80)
        (*(void (**)(unsigned int *))(*(_QWORD *)v77 + 16))(v77);
    }
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(malloc_zone, this);
  }
}

void CA::Render::Array::finalize(CA::Render::Array *this)
{
  malloc_zone_t *malloc_zone;

  (**(void (***)(CA::Render::Array *))this)(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

void CA::Render::Array::~Array(CA::Render::Array *this, const CA::Render::Object *a2)
{
  int v3;
  unint64_t v4;
  unint64_t i;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *(_QWORD *)this = off_1E15986F8;
  v3 = *((_DWORD *)this + 3);
  if ((v3 & 0x100) == 0)
  {
    v4 = *((unsigned int *)this + 4);
    if ((_DWORD)v4)
    {
      for (i = 0; i < v4; ++i)
      {
        v6 = (unsigned int *)*((_QWORD *)this + i + 3);
        if (v6)
        {
          v7 = v6 + 2;
          do
          {
            v8 = __ldaxr(v7);
            v9 = v8 - 1;
          }
          while (__stlxr(v9, v7));
          if (!v9)
            (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
          v4 = *((unsigned int *)this + 4);
        }
      }
      v3 = *((_DWORD *)this + 3);
    }
  }
  --dword_1ECDC7C2C;
  *(_QWORD *)this = off_1E1598C30;
  if (v3 < 0)
    CA::Render::Encoder::ObjectCache::invalidate(this, a2);
}

{
  malloc_zone_t *malloc_zone;

  CA::Render::Array::~Array(this, a2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

uint64_t CA::Render::Decoder::Decoder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CA::Render::Decoder *v10;
  int v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  int v15;
  os_unfair_lock_s *v16;
  int v17;
  int v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint32_t v22;
  uint8_t buf[4];
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;
  __int16 v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v10 = (CA::Render::Decoder *)CA::Render::Coder::Coder(a1, a2);
  *(_QWORD *)v10 = off_1E1598EA0;
  *((_QWORD *)v10 + 9) = a3;
  *((_QWORD *)v10 + 3) = a4;
  *((_QWORD *)v10 + 4) = a4;
  *((_QWORD *)v10 + 5) = a4 + a5;
  *(_DWORD *)(a1 + 64) = CA::Render::Decoder::decode_int32(v10);
  v11 = CA::Render::Decoder::decode_int32((CA::Render::Decoder *)a1);
  *(_QWORD *)(a1 + 80) = CA::Render::Decoder::decode_int64((CA::Render::Decoder *)a1);
  if (!a3)
  {
    if (x_log_hook_p())
      goto LABEL_10;
    v12 = x_log_category_render;
    if (!os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      goto LABEL_19;
    *(_DWORD *)buf = 67109120;
    v25 = v11;
    v13 = "Decoder has no context! dcid=%x";
LABEL_17:
    v20 = v12;
    v21 = OS_LOG_TYPE_DEFAULT;
    v22 = 8;
    goto LABEL_18;
  }
  if (*(_DWORD *)(a3 + 16) != v11)
  {
    if (x_log_hook_p())
    {
      os_unfair_lock_lock((os_unfair_lock_t)(a3 + 52));
      os_unfair_lock_unlock((os_unfair_lock_t)(a3 + 52));
LABEL_10:
      x_log_();
LABEL_19:
      *(_BYTE *)(a1 + 18) = 1;
      return a1;
    }
    v14 = x_log_category_render;
    if (!os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_ERROR))
      goto LABEL_19;
    v15 = *(_DWORD *)(a3 + 16);
    v16 = (os_unfair_lock_s *)(a3 + 52);
    os_unfair_lock_lock((os_unfair_lock_t)(a3 + 52));
    v17 = *(_DWORD *)(a3 + 64);
    os_unfair_lock_unlock(v16);
    v18 = *(_DWORD *)(a1 + 64);
    v19 = *(_QWORD *)(a1 + 80);
    *(_DWORD *)buf = 67110912;
    v25 = v15;
    v26 = 1024;
    v27 = v17;
    v28 = 2048;
    v29 = a2;
    v30 = 2048;
    v31 = a4;
    v32 = 2048;
    v33 = a5;
    v34 = 1024;
    v35 = v18;
    v36 = 1024;
    v37 = v11;
    v38 = 2048;
    v39 = v19;
    v13 = "Context ID mismatch! pcid=%x pseed=%u : heap=%p data=%p data_len=%zu flags=%u dcid=%x t=%f";
    v20 = v14;
    v21 = OS_LOG_TYPE_ERROR;
    v22 = 66;
LABEL_18:
    _os_log_impl(&dword_184457000, v20, v21, v13, buf, v22);
    goto LABEL_19;
  }
  if ((*(_BYTE *)(a3 + 13) & 4) != 0)
  {
    if (x_log_hook_p())
      goto LABEL_10;
    v12 = x_log_category_render;
    if (!os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      goto LABEL_19;
    *(_DWORD *)buf = 67109120;
    v25 = v11;
    v13 = "Context is destroyed! cid=%x";
    goto LABEL_17;
  }
  return a1;
}

uint64_t CA::Render::Coder::Coder(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = off_1E1598770;
  *(_QWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 16) = (a2 == 0) | (*(unsigned __int8 *)(a1 + 19) << 24);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  if (!a2)
    *(_QWORD *)(a1 + 8) = x_heap_new(0x1000uLL);
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void CA::Render::Vector::finalize(CA::Render::Vector *this)
{
  malloc_zone_t *malloc_zone;

  (**(void (***)(CA::Render::Vector *))this)(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

void CA::Render::Vector::~Vector(CA::Render::Vector *this, const CA::Render::Object *a2)
{
  --dword_1ECDC7D08;
  *(_QWORD *)this = off_1E1598C30;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0)
    CA::Render::Encoder::ObjectCache::invalidate(this, a2);
}

{
  malloc_zone_t *malloc_zone;

  --dword_1ECDC7D08;
  *(_QWORD *)this = off_1E1598C30;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0)
    CA::Render::Encoder::ObjectCache::invalidate(this, a2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

uint64_t CA::Render::Server::port_set(CA::Render::Server *this)
{
  uint64_t result;
  ipc_space_t *v2;
  mach_port_name_t v3;
  kern_return_t v5;
  kern_return_t v6;
  NSObject *v7;
  mach_port_name_t name;
  uint8_t buf[4];
  kern_return_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  result = CA::Render::Server::_server_port_set[0];
  name = CA::Render::Server::_server_port_set[0];
  if (!CA::Render::Server::_server_port_set[0])
  {
    v2 = (ipc_space_t *)MEMORY[0x1E0C83DA0];
    mach_port_allocate(*MEMORY[0x1E0C83DA0], 3u, &name);
    v3 = name;
    while (!__ldaxr(CA::Render::Server::_server_port_set))
    {
      if (!__stlxr(v3, CA::Render::Server::_server_port_set))
        return CA::Render::Server::_server_port_set[0];
    }
    __clrex();
    v5 = mach_port_mod_refs(*v2, name, 3u, -1);
    if (v5)
    {
      v6 = v5;
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v7 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109120;
          v10 = v6;
          _os_log_impl(&dword_184457000, v7, OS_LOG_TYPE_ERROR, "CA:Render:Server:port_set (): mach_port_mod_refs () returned error 0x%x\n", buf, 8u);
        }
      }
    }
    return CA::Render::Server::_server_port_set[0];
  }
  return result;
}

uint64_t CA::Render::Context::context_by_server_port(CA::Render::Context *this)
{
  unsigned int v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  if (!(_DWORD)this)
    return 0;
  v1 = this;
  os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::Context::_context_lock);
  if (!CA::Render::Context::_port_table)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::Context::_context_lock);
    return 0;
  }
  v2 = x_hash_table_lookup(CA::Render::Context::_port_table, v1, 0);
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::Context::_context_lock);
  if (!v2)
    return v2;
  if ((*(_BYTE *)(v2 + 13) & 4) != 0)
    return 0;
  v3 = (unsigned int *)(v2 + 8);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  if (!v4)
  {
    v2 = 0;
    do
      v5 = __ldaxr(v3);
    while (__stlxr(v5 - 1, v3));
  }
  return v2;
}

uint64_t x_hash_table_lookup(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;

  if (*(_QWORD *)(a1 + 24))
  {
    v6 = (*(uint64_t (**)(uint64_t))(a1 + 32))(a2);
    v7 = *(_QWORD **)(*(_QWORD *)(a1 + 16) + 8 * (*(_QWORD *)(a1 + 8) & v6));
    if ((*(_BYTE *)(a1 + 80) & 2) != 0)
    {
      if (v7)
      {
        while (v7[2] != a2)
        {
          v7 = (_QWORD *)*v7;
          if (!v7)
            goto LABEL_12;
        }
        if (a3)
          *a3 = a2;
        return v7[3];
      }
    }
    else if (v7)
    {
      v8 = v6;
      while (v7[1] != v8 || (*(unsigned int (**)(_QWORD, uint64_t))(a1 + 40))(v7[2], a2))
      {
        v7 = (_QWORD *)*v7;
        if (!v7)
          goto LABEL_12;
      }
      if (a3)
        *a3 = v7[2];
      return v7[3];
    }
  }
LABEL_12:
  result = 0;
  if (a3)
    *a3 = 0;
  return result;
}

uint64_t CA::Layer::collect_animations_(uint64_t a1, double *a2, uint64_t a3, int8x16_t a4, int8x16_t a5)
{
  double v7;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _DWORD *v12;
  unsigned int *v13;
  int v14;
  uint64_t v15;
  float v16;
  float *v17;
  double v18;
  float64x2_t v19;
  unsigned int v20;
  CA::Render::Timing *v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;
  CA::Render::Timing **v26;
  CA::Render::Timing ***v27;
  __int16 v28;
  double *v29;
  double v30;
  double v31;
  unsigned int v32;
  float v33;
  int v34;
  int v35;
  double v36;
  int v37;
  int v38;
  _BOOL4 v39;
  _BOOL4 v40;
  _BOOL4 v42;
  int8x16_t v43;
  _BOOL4 v44;
  __int16 v45;
  int v46;
  CA::Render::Timing **v47;
  unsigned int v48;
  unsigned int v49;
  int v50;
  void *v51;
  int v52;
  int v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  uint64_t *v57;
  _BOOL4 v58;
  uint64_t *v59;
  uint64_t v60;
  double v61;
  uint64_t v62;
  double v63;
  _BOOL4 v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  _DWORD *v72;
  float *v73;
  CA::Render::Timing *v74;
  _BOOL4 v75;
  CA::Render::Timing **v76;
  int8x16_t v77;
  double v78;
  double v79;
  CA::Render::Timing *v80[2];

  v7 = *(double *)a4.i64;
  v80[1] = *(CA::Render::Timing **)MEMORY[0x1E0C80C00];
  v9 = *(unsigned int *)(*(_QWORD *)a3 + 96);
  if ((v9 & 0x80000000) != 0 || (v10 = a1 + 4 * v9, (v11 = *(_DWORD *)(v10 + 272)) == 0))
  {
    v12 = CA::Layer::thread_flags_((CA::Layer *)a1, *(CA::Transaction **)a3);
    v11 = *v12;
  }
  else
  {
    v12 = (_DWORD *)(v10 + 272);
  }
  v13 = (unsigned int *)(a1 + 4);
  *v12 = v11 | *(_DWORD *)(a1 + 4) & 0x800;
  v14 = *(_DWORD *)(a3 + 12);
  if ((v11 & 0x80000) != 0)
    *(_DWORD *)(a3 + 12) = ++v14;
  if (!v14 && (*((_BYTE *)v12 + 1) & 8) == 0)
    return 0;
  v16 = *(float *)(a3 + 8);
  v79 = v7;
  if ((*(_BYTE *)(a1 + 56) & 0x80) != 0)
  {
    CA::Layer::render_timing((uint64_t)v80, (CA::Transaction *)a1, *(CA::Transaction **)a3);
    v17 = (float *)v80[0];
    if (v80[0])
    {
      v79 = fmin(fmax(v7, *((double *)v80[0] + 5)), CA::Render::Timing::end_time(v80[0]));
      CA::Render::Timing::map_time((CA::Render::Timing *)v17, &v79, 0);
      *(float *)a4.i32 = v17[4] * *(float *)(a3 + 8);
      *(_DWORD *)(a3 + 8) = a4.i32[0];
      v18 = v79;
      goto LABEL_16;
    }
    a4.i32[0] = *(_DWORD *)(a3 + 8);
  }
  else
  {
    v17 = 0;
    *(float *)a4.i32 = v16;
  }
  v18 = v7;
LABEL_16:
  v78 = 0.0;
  *(double *)a4.i64 = *(float *)a4.i32;
  a5.i64[0] = 0x7FF0000000000000;
  v19.f64[0] = NAN;
  v19.f64[1] = NAN;
  v77 = vbslq_s8((int8x16_t)vnegq_f64(v19), a5, a4);
  v80[0] = *(CA::Render::Timing **)(a1 + 280);
  v75 = v80[0] != 0;
  v74 = v80[0];
  if (!v80[0])
    goto LABEL_118;
  if ((*v13 & 0x1800000) != 0)
  {
    do
      v20 = __ldaxr(v13);
    while (__stlxr(v20 & 0xFE7FFFFF, v13));
    v21 = v80[0];
    if (!v80[0])
    {
      v76 = 0;
      v22 = 0;
      v23 = *v13;
      goto LABEL_93;
    }
  }
  else
  {
    v21 = v80[0];
  }
  v72 = v12;
  v73 = v17;
  v24 = 0;
  v25 = 0;
  v76 = 0;
  v26 = v80;
  do
  {
    v27 = (CA::Render::Timing ***)v26;
    v26 = (CA::Render::Timing **)v21;
    while (1)
    {
      v28 = *((_WORD *)v26 + 28);
      if ((v28 & 2) == 0)
        break;
      if ((v28 & 8) != 0)
        break;
      v29 = (double *)v26[4];
      if (!v29)
        break;
      v30 = v29[5];
      v31 = CA::Render::Timing::end_time((CA::Render::Timing *)v29);
      v32 = *((_DWORD *)v26[4] + 3);
      v33 = *(float *)(a3 + 8);
      if (v33 == 0.0)
      {
        v42 = v31 > v18 || (*((_DWORD *)v26[4] + 3) & 0x200) != 0;
        if (v30 > v18)
          v42 = (*((_DWORD *)v26[4] + 3) & 0x400) != 0;
        goto LABEL_71;
      }
      v34 = (v32 >> 10) & 1;
      v35 = (v32 >> 9) & 1;
      if (v33 < 0.0)
        v36 = v31;
      else
        v36 = v30;
      if (v33 < 0.0)
      {
        v37 = (v32 >> 9) & 1;
      }
      else
      {
        v30 = v31;
        v37 = (v32 >> 10) & 1;
      }
      if (v33 < 0.0)
        v38 = v34;
      else
        v38 = v35;
      v39 = v36 > v18;
      if (v33 <= 0.0)
        v39 = v36 < v18;
      if (v39)
      {
        if (((_WORD)v26[7] & 0x1080) == 0)
        {
          if (((_WORD)v26[7] & 0x2000) != 0 || (v36 = *(double *)v77.i64, v26[6]))
            v36 = v30;
        }
        v42 = v37 != 0;
        v30 = v36;
LABEL_63:
        v43 = v77;
LABEL_66:
        v44 = v30 < *(double *)v43.i64;
        if (*(float *)(a3 + 8) <= 0.0)
          v44 = v30 > *(double *)v43.i64;
        if (v44)
          *(double *)v43.i64 = v30;
        v77 = v43;
LABEL_71:
        v45 = *((_WORD *)v26 + 28);
        if ((v45 & 0x80) != 0 && v42)
        {
          v25 |= (unsigned __int16)(v45 & 0x200) >> 9;
          v24 |= (unsigned __int16)(v45 & 0x400) >> 10;
        }
        break;
      }
      v40 = v30 > v18;
      if (v33 <= 0.0)
        v40 = v30 < v18;
      if (v40)
      {
        schedule_start_callback(v26, (uint64_t)&animation_state);
        if (((_WORD)v26[7] & 0x2000) != 0 || v26[6])
        {
          v42 = 1;
          goto LABEL_63;
        }
        v42 = 1;
        goto LABEL_65;
      }
      *((_DWORD *)v26[1] + 4) |= 2u;
      schedule_stop_callback((uint64_t)v26, (uint64_t *)&animation_state);
      if (((_WORD)v26[7] & 1) == 0)
      {
        v42 = v38 != 0;
LABEL_65:
        v43 = v77;
        v30 = *(double *)v77.i64;
        goto LABEL_66;
      }
      *v27 = (CA::Render::Timing **)*v26;
      *v26 = (CA::Render::Timing *)qword_1ECDC5160;
      qword_1ECDC5160 = (uint64_t)v26;
      v26 = *v27;
      if (!*v27)
        goto LABEL_81;
    }
    if (v26[3] == (CA::Render::Timing *)kContentsStringHash)
    {
      v46 = -[CA::Render::Timing isEqualToString:](v26[2], "isEqualToString:", CFSTR("contents"));
      v47 = v76;
      if (v46)
        v47 = v26;
      v76 = v47;
    }
    v21 = *v26;
  }
  while (*v26);
LABEL_81:
  v23 = *v13;
  if ((v25 & 1) == 0)
  {
    v12 = v72;
    if ((v24 & 1) == 0)
    {
      v22 = 0;
      v17 = v73;
      goto LABEL_93;
    }
    v22 = 0x2000;
    v17 = v73;
    do
LABEL_88:
      v49 = __ldaxr(v13);
    while (__stlxr(v49 | 0x800000, v13));
LABEL_93:
    v50 = v23 & 0x3000;
    if (v22 == v50)
    {
      if (!v22)
        goto LABEL_117;
      goto LABEL_95;
    }
LABEL_98:
    v51 = *(void **)(a1 + 16);
    v52 = ~v50;
    v53 = v22 & ~v50;
    do
      v54 = __ldaxr(v13);
    while (__stlxr(v54 | v53, v13));
    v55 = v22 | v52;
    do
      v56 = __ldaxr(v13);
    while (__stlxr(v56 & v55, v13));
    if (!v22)
    {
      objc_msgSend(v51, "_cancelAnimationTimer");
      if ((v23 & 0x1000) != 0)
        objc_msgSend(v51, "setNeedsLayout");
      if ((v23 & 0x2000) == 0)
        goto LABEL_117;
      goto LABEL_116;
    }
    goto LABEL_103;
  }
  v17 = v73;
  v12 = v72;
  do
    v48 = __ldaxr(v13);
  while (__stlxr(v48 | 0x1000000, v13));
  if ((v24 & 1) != 0)
  {
    v22 = 12288;
    goto LABEL_88;
  }
  v50 = v23 & 0x3000;
  v22 = 4096;
  if (v50 != 4096)
    goto LABEL_98;
LABEL_95:
  if (*(float *)(a3 + 8) == 0.0 && !*(_DWORD *)(a3 + 12))
    goto LABEL_117;
  v51 = *(void **)(a1 + 16);
LABEL_103:
  if (objc_msgSend(v51, "_scheduleAnimationTimer", v72))
  {
    if ((v22 & 0x1000) != 0)
      objc_msgSend(v51, "setNeedsLayout");
    if ((v22 & 0x2000) == 0)
    {
      *(double *)v77.i64 = v18;
      goto LABEL_117;
    }
    if (v76)
      objc_msgSend(v51, "performSelectorOnMainThread:withObject:waitUntilDone:", sel_removeAnimationForKey_, CFSTR("contents"), 0);
    *(double *)v77.i64 = v18;
LABEL_116:
    objc_msgSend(v51, "setNeedsDisplay", v72);
    *(_DWORD *)(a1 + 52) |= 0x800000u;
  }
LABEL_117:
  CA::Layer::set_animations((CA::Layer *)a1, (uint64_t)v80[0]);
LABEL_118:
  v78 = *(double *)v77.i64;
  v57 = *(uint64_t **)(a1 + 24);
  if (!v57)
    goto LABEL_129;
  v58 = v74 != 0;
  v59 = v57 + 1;
  v60 = v57[2];
  if (v60 == 1)
  {
    if (!v57[3])
    {
LABEL_124:
      v61 = v79;
      do
      {
        if (CA::Layer::collect_animations_(*(_QWORD *)(*v59 + 16), &v78, a3, v61))
          v58 = 1;
        ++v59;
        --v60;
      }
      while (v60);
      goto LABEL_128;
    }
LABEL_123:
    v59 = (uint64_t *)*v59;
    goto LABEL_124;
  }
  if (v60)
    goto LABEL_123;
LABEL_128:
  v75 = v58;
LABEL_129:
  v62 = *(_QWORD *)(a1 + 32);
  if (v62)
    v15 = CA::Layer::collect_animations_(*(_QWORD *)(v62 + 16), &v78, a3, v79) | v75;
  else
    v15 = v75;
  v63 = v78;
  if ((*(_QWORD *)&v78 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    if (v17)
    {
      CA::Render::Timing::inverse_map_time((uint64_t)v17, &v78, v7);
      v63 = v78;
    }
    v64 = v16 < 0.0;
    if (v63 <= *a2)
      v64 = 0;
    if (v16 > 0.0)
      v64 = v63 < *a2;
    if (v64)
      *a2 = v63;
  }
  *(float *)(a3 + 8) = v16;
  if ((v15 & 1) != 0)
  {
    do
      v65 = __ldaxr(v13);
    while (__stlxr(v65 | 0x800, v13));
    if ((*v12 & 0x80000) == 0)
      goto LABEL_148;
  }
  else
  {
    do
      v66 = __ldaxr(v13);
    while (__stlxr(v66 & 0xFFFFF7FF, v13));
    v67 = *v12 & 0xFFFFF7FF;
    *v12 = v67;
    if ((v67 & 0x80000) == 0)
      goto LABEL_148;
  }
  --*(_DWORD *)(a3 + 12);
LABEL_148:
  if (v17)
  {
    v68 = (unsigned int *)(v17 + 2);
    do
    {
      v69 = __ldaxr(v68);
      v70 = v69 - 1;
    }
    while (__stlxr(v70, v68));
    if (!v70)
      (*(void (**)(float *))(*(_QWORD *)v17 + 16))(v17);
  }
  return v15;
}

void sub_184475FDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  _Unwind_Resume(exception_object);
}

unint64_t x_pointer_hash(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = (~(a1 << 32) + a1) ^ ((unint64_t)(~(a1 << 32) + a1) >> 22);
  v2 = 9 * ((v1 + ~(v1 << 13)) ^ ((v1 + ~(v1 << 13)) >> 8));
  v3 = (v2 ^ (v2 >> 15)) + ~((v2 ^ (v2 >> 15)) << 27);
  return v3 ^ (v3 >> 31);
}

uint64_t CA::Render::Server::notify_port(CA::Render::Server *this)
{
  uint64_t result;
  ipc_space_t *v2;
  CA::Render::Server *v3;
  mach_port_name_t v4;
  int v6;
  ipc_space_t v7;
  mach_port_name_t v8;
  mach_port_name_t v9;
  mach_port_name_t name;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  result = CA::Render::Server::_notify_port;
  name = CA::Render::Server::_notify_port;
  if (!CA::Render::Server::_notify_port)
  {
    v2 = (ipc_space_t *)MEMORY[0x1E0C83DA0];
    v3 = (CA::Render::Server *)mach_port_allocate(*MEMORY[0x1E0C83DA0], 1u, &name);
    v4 = name;
    while (!__ldaxr((unsigned int *)&CA::Render::Server::_notify_port))
    {
      if (!__stlxr(v4, (unsigned int *)&CA::Render::Server::_notify_port))
      {
        v6 = 1;
        goto LABEL_7;
      }
    }
    v6 = 0;
    __clrex();
LABEL_7:
    v7 = *v2;
    v8 = name;
    if (v6)
    {
      v9 = CA::Render::Server::port_set(v3);
      mach_port_move_member(v7, v8, v9);
    }
    else
    {
      mach_port_mod_refs(v7, name, 1u, -1);
    }
    return CA::Render::Server::_notify_port;
  }
  return result;
}

uint64_t x_heap_malloc(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  void *v3;
  uint64_t v5;
  malloc_zone_t *malloc_zone;
  _QWORD *v7;

  v2 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (v2 < a2)
    return 0;
  if (v2 >= 0x801)
  {
    v3 = malloc_type_malloc((a2 + 7) & 0xFFFFFFFFFFFFFFF8, 0xE6CB7714uLL);
    v5 = *a1;
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v7 = malloc_type_zone_malloc(malloc_zone, 0x10uLL, 0x8BB15036uLL);
    *v7 = v3;
    v7[1] = v5;
    *a1 = (uint64_t)v7;
    return (uint64_t)v3;
  }
  return x_heap_malloc_small_(a1, (a2 + 7) & 0xFFFFFFFFFFFFFFF8);
}

double CA::Render::Server::CmdStreamMsg::timestamp(CA::Render::Server::CmdStreamMsg *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 521);
  if (v1)
    return *(double *)(v1 + 80);
  else
    return 0.0;
}

void CA::Render::Server::CmdStreamMsg::consume_batch_ports(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  ipc_space_t *v5;
  unsigned int v6;

  v2 = *(uint64_t **)(a1 + 40);
  if (v2)
  {
    if (*((_BYTE *)v2 + 11))
    {
      v4 = *((unsigned int *)v2 + 3);
      if (!(_DWORD)v4)
        return;
      v2 = (uint64_t *)*v2;
    }
    else
    {
      v4 = 1;
    }
    v5 = (ipc_space_t *)MEMORY[0x1E0C83DA0];
    do
    {
      v6 = *(_DWORD *)v2;
      if ((*(_DWORD *)v2 + 1) >= 2)
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>(a2, v6, *(_DWORD *)v2);
      else
        mach_port_deallocate(*v5, v6);
      *(_DWORD *)v2 = 0;
      v2 = (uint64_t *)((char *)v2 + 4);
      --v4;
    }
    while (v4);
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(_QWORD *a1, unsigned int a2)
{
  unint64_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *result;
  unint64_t v7;

  v2 = a1[1];
  if (!v2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (v2 <= a2)
      v4 = a2 % v2;
  }
  else
  {
    v4 = ((_DWORD)v2 - 1) & a2;
  }
  v5 = *(uint64_t ***)(*a1 + 8 * v4);
  if (!v5)
    return 0;
  for (result = *v5; result; result = (uint64_t *)*result)
  {
    v7 = result[1];
    if (v7 == a2)
    {
      if (*((_DWORD *)result + 4) == a2)
        return result;
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= v2)
          v7 %= v2;
      }
      else
      {
        v7 &= v2 - 1;
      }
      if (v7 != v4)
        return 0;
    }
  }
  return result;
}

unint64_t hash_cf(const void *a1)
{
  CFHashCode v1;
  CFHashCode v2;
  unint64_t v3;
  unint64_t v4;

  v1 = CFHash(a1);
  v2 = (v1 + ~(v1 << 32)) ^ ((v1 + ~(v1 << 32)) >> 22);
  v3 = 9 * ((v2 + ~(v2 << 13)) ^ ((v2 + ~(v2 << 13)) >> 8));
  v4 = (v3 ^ (v3 >> 15)) + ~((v3 ^ (v3 >> 15)) << 27);
  return v4 ^ (v4 >> 31);
}

BOOL compare_cf(const void *a1, const void *a2)
{
  return a1 != a2 && CFEqual(a1, a2) == 0;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__hash_table(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)result = v2;
  *(_QWORD *)(result + 8) = a2[1];
  a2[1] = 0;
  v5 = a2[2];
  v3 = a2 + 2;
  v4 = v5;
  *(_QWORD *)(result + 16) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 24) = v6;
  *(_DWORD *)(result + 32) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 16;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void CA::Render::BackdropLayer::~BackdropLayer(CA::Render::BackdropLayer *this, const CA::Render::Object *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  malloc_zone_t *malloc_zone;

  *(_QWORD *)this = off_1E1596DB8;
  v3 = (unsigned int *)*((_QWORD *)this + 11);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
  }
  v7 = (unsigned int *)*((_QWORD *)this + 3);
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
  }
  --dword_1ECDC7C34;
  *(_QWORD *)this = off_1E1598C30;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0)
    CA::Render::Encoder::ObjectCache::invalidate(this, a2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)this = off_1E1596DB8;
  v3 = (unsigned int *)*((_QWORD *)this + 11);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
  }
  v7 = (unsigned int *)*((_QWORD *)this + 3);
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
  }
  --dword_1ECDC7C34;
  *(_QWORD *)this = off_1E1598C30;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0)
    CA::Render::Encoder::ObjectCache::invalidate(this, a2);
}

void _XRegisterFrameIntervalRange(uint64_t a1, uint64_t a2)
{
  int v3;
  _QWORD *v4;
  int v5;
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  NSObject *v13;
  const char *v14;
  int v15;
  uint8_t buf[8];
  unint64_t v17;
  int v18;
  _BYTE v19[10];
  __int16 v20;
  int v21;
  __int16 v22;
  _OWORD *v23;
  _OWORD buffer[2];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 56)
  {
    v3 = -304;
  }
  else if (*(_DWORD *)(a1 + 56) || *(_DWORD *)(a1 + 60) < 0x20u)
  {
    v3 = -309;
  }
  else
  {
    v6 = *(_DWORD *)(a1 + 32);
    v5 = *(_DWORD *)(a1 + 36);
    v8 = *(_DWORD *)(a1 + 40);
    v7 = *(_DWORD *)(a1 + 44);
    v9 = *(_DWORD *)(a1 + 48);
    v10 = *(unsigned __int8 *)(a1 + 52);
    if (initialized[0] != -1)
    {
      v11 = *(_DWORD *)(a1 + 36);
      dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
      v5 = v11;
    }
    if (byte_1ECDC6AC5)
    {
      v15 = v6;
      memset(buffer, 0, sizeof(buffer));
      v12 = v5;
      proc_name(v5, buffer, 0x20u);
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v13 = x_log_category_frame_rate;
        if (os_log_type_enabled((os_log_t)x_log_category_frame_rate, OS_LOG_TYPE_DEFAULT))
        {
          v14 = " compat";
          *(_DWORD *)buf = 67110402;
          *(_DWORD *)&buf[4] = v8;
          LOWORD(v17) = 1024;
          if (!v10)
            v14 = "";
          *(_DWORD *)((char *)&v17 + 2) = v7;
          HIWORD(v17) = 1024;
          v18 = v9;
          *(_WORD *)v19 = 2080;
          *(_QWORD *)&v19[2] = v14;
          v20 = 1024;
          v21 = v12;
          v22 = 2080;
          v23 = buffer;
          _os_log_impl(&dword_184457000, v13, OS_LOG_TYPE_DEFAULT, "CAFrameRateServer: receiving registration %u %u %u%s from %d[%s]", buf, 0x2Eu);
        }
      }
      v5 = v12;
      v6 = v15;
    }
    *(_DWORD *)buf = 0;
    *(_DWORD *)v19 = v9;
    *(_DWORD *)&buf[4] = v6;
    v17 = __PAIR64__(v8, v5);
    v18 = v7;
    *(_DWORD *)&v19[4] = v10 != 0;
    CA::Render::post_notification(0x37u, 0, (uint64_t)buf, 0);
    if (buf[0])
      v3 = 0;
    else
      v3 = 5;
  }
  v4 = (_QWORD *)MEMORY[0x1E0C804E8];
  *(_DWORD *)(a2 + 32) = v3;
  *(_QWORD *)(a2 + 24) = *v4;
}

uint64_t _XSynchronize(uint64_t result, uint64_t a2)
{
  int v3;

  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 1 && *(_DWORD *)(result + 4) == 68)
  {
    if (*(unsigned __int16 *)(result + 38) << 16 == 1179648)
    {
      if (!*(_DWORD *)(result + 68) && *(_DWORD *)(result + 72) > 0x1Fu)
      {
        result = CASSynchronize((CA::Render::Context *)*(unsigned int *)(result + 12), *(_DWORD *)(result + 28), *(_DWORD *)(result + 48), *(_DWORD *)(result + 52), *(_DWORD *)(result + 56), *(_DWORD *)(result + 60), *(_DWORD *)(result + 64));
        *(_DWORD *)(a2 + 32) = result;
        return result;
      }
      v3 = -309;
    }
    else
    {
      v3 = -300;
    }
  }
  else
  {
    v3 = -304;
  }
  *(_DWORD *)(a2 + 32) = v3;
  *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  return result;
}

void _XGetDisplayInfo(uint64_t a1)
{
  _DWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  _OWORD *v6;
  int v7;
  int v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _QWORD *v12;
  vm_map_t *v13;
  vm_size_t v14;
  vm_address_t v15;
  vm_size_t v16;
  int v17;
  int v18;
  char v19;
  char v20;
  char v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  BOOL v28;
  int v29;
  size_t v30;
  int v31;
  mach_port_t *v32;
  uint64_t v33;
  size_t v34;
  char v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t (*v41)(_QWORD, _QWORD, _QWORD);
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  char v59;
  __int128 v60;
  __int128 v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  __int128 v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  vm_address_t address;
  char v74[16];
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 src;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  _BYTE v94[4];
  int v95;
  uint64_t v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  uint64_t v122;
  __int128 v123;
  unsigned int v124;
  uint64_t v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  unsigned int v129;
  int v130;
  int v131;
  unsigned int v132;
  __int128 v133;
  unsigned int v134;
  int v135;
  int v136;
  unsigned int v137;
  unsigned int v138;
  void *__src;
  char *v140;
  _DWORD *v141;
  uint64_t v142;
  _DWORD v143[50];
  __int128 v144;
  uint64_t v145;
  uint64_t v146;
  char v147;
  uint64_t v148;
  mach_port_t *object_handle;
  __int128 v150;
  int v151;
  __int128 v152;
  __int128 v153;
  uint64_t v154;
  int v155;
  char v156;
  char v157;
  char v158;
  __int128 v159;
  __int128 v160;
  char v161;
  uint64_t v162;

  v1 = (_DWORD *)MEMORY[0x1E0C80A78](a1);
  v3 = v2;
  v162 = *MEMORY[0x1E0C80C00];
  if ((*v1 & 0x80000000) != 0 || v1[1] != 40)
  {
    v4 = -304;
    goto LABEL_7;
  }
  v92 = 0u;
  v93 = 0u;
  src = 0u;
  v91 = 0u;
  *(_OWORD *)v74 = 0u;
  v75 = 0u;
  v76 = 0u;
  v77 = 0u;
  v78 = 0u;
  v79 = 0u;
  v80 = 0u;
  v81 = 0u;
  v82 = 0u;
  v83 = 0u;
  v84 = 0u;
  v85 = 0u;
  v86 = 0u;
  v87 = 0u;
  v88 = 0u;
  v89 = 0u;
  if (v1[10] || v1[11] <= 0x1Fu)
  {
    v4 = -309;
LABEL_7:
    *(_DWORD *)(v2 + 32) = v4;
LABEL_8:
    *(_QWORD *)(v3 + 24) = *MEMORY[0x1E0C804E8];
    return;
  }
  *(_DWORD *)(v2 + 36) = 16777473;
  *(_DWORD *)(v2 + 52) = 16777473;
  *(_DWORD *)(v2 + 68) = 16777473;
  *(_DWORD *)(v2 + 84) = 16777473;
  *(_QWORD *)(v2 + 96) = 0x13000000000000;
  if (v1[9])
  {
    v5 = 5;
LABEL_11:
    *(_DWORD *)(v3 + 32) = v5;
    goto LABEL_8;
  }
  v6 = (_OWORD *)(v2 + 128);
  v7 = v1[8];
  bzero(v94, 0x13A8uLL);
  __src = v143;
  v140 = (char *)v143;
  v141 = v143;
  v142 = 16;
  v95 = v7;
  CA::Render::post_notification(0x1Bu, 0, (uint64_t)v94, 0);
  v8 = v94[0];
  if (v94[0])
  {
    v9 = v98;
    *v6 = v97;
    *(_OWORD *)(v3 + 144) = v9;
    v10 = v100;
    *(_OWORD *)(v3 + 160) = v99;
    *(_OWORD *)(v3 + 176) = v10;
    src = v101;
    v91 = v102;
    v92 = v103;
    v93 = v104;
    v76 = v107;
    v77 = v108;
    *(_OWORD *)v74 = v105;
    v75 = v106;
    v80 = v111;
    v81 = v112;
    v78 = v109;
    v79 = v110;
    v84 = v115;
    v85 = v116;
    v82 = v113;
    v83 = v114;
    v88 = v119;
    v89 = v120;
    v86 = v117;
    v87 = v118;
    *(_QWORD *)(v3 + 112) = v96;
    address = 0;
    v11 = v122;
    v12 = (_QWORD *)MEMORY[0x1E0C85AD8];
    v13 = (vm_map_t *)MEMORY[0x1E0C83DA0];
    if (v122)
    {
      v14 = (*MEMORY[0x1E0C85AD8] + 8 * v122 - 1) & -*MEMORY[0x1E0C85AD8];
      vm_allocate(*MEMORY[0x1E0C83DA0], &address, v14, 1);
      if (address)
      {
        memcpy((void *)address, &v121, 8 * v11);
        v15 = address;
      }
      else
      {
        v15 = 0;
      }
    }
    else
    {
      v15 = 0;
      LODWORD(v14) = 0;
    }
    *(_QWORD *)(v3 + 28) = v15;
    v28 = v15 == 0;
    if (v15)
      v17 = v14;
    else
      v17 = 0;
    v29 = v122;
    if (v28)
      v29 = 0;
    HIDWORD(v72) = v29;
    *(_QWORD *)(v3 + 44) = 0;
    *(_QWORD *)(v3 + 60) = 0;
    address = 0;
    v30 = v140 - (_BYTE *)__src;
    if (v140 != __src
      && (v16 = (v30 + *v12 - 1) & -*v12, vm_allocate(*v13, &address, v16, 1), address)
      && (memcpy((void *)address, __src, v30), address))
    {
      LODWORD(v72) = -1431655765 * ((unint64_t)(v140 - (_BYTE *)__src) >> 2);
      *(_QWORD *)(v3 + 76) = address;
    }
    else
    {
      LODWORD(v72) = 0;
      LODWORD(v16) = 0;
      *(_QWORD *)(v3 + 76) = 0;
    }
    HIDWORD(v71) = v143[48];
    v23 = v125;
    v60 = v126;
    v61 = v123;
    v57 = v128;
    v58 = v127;
    v22 = v130;
    v24 = v131;
    v67 = v133;
    v70 = __PAIR64__(v124, v134);
    v25 = v135;
    v26 = v136;
    v69 = __PAIR64__(v129, v137);
    v68 = __PAIR64__(v132, v138);
    v27 = v145;
    v63 = v146;
    LOBYTE(v71) = v147;
    v64 = v148;
    v65 = v144;
    if (object_handle)
    {
      v31 = CA::Render::Shmem::port(object_handle);
      v32 = object_handle;
      *(_DWORD *)(v3 + 92) = v31;
      if (v32)
        v66 = *((_QWORD *)v32 + 2);
      else
        v66 = 0;
    }
    else
    {
      v66 = 0;
      *(_DWORD *)(v3 + 92) = 0;
    }
    v5 = 0;
    v62 = v151;
    v53 = v152;
    v54 = v150;
    v51 = v154;
    v52 = v153;
    v18 = v155;
    v19 = v156;
    v59 = v157;
    v55 = v160;
    v56 = v159;
    v20 = v158;
    v21 = v161;
  }
  else
  {
    v71 = 0;
    v72 = 0;
    v69 = 0;
    v70 = 0;
    v68 = 0;
    LODWORD(v16) = 0;
    v66 = 0;
    v62 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v59 = 0;
    v20 = 0;
    v21 = 0;
    v67 = 0u;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v64 = 0;
    v65 = 0u;
    v55 = 0u;
    v56 = 0u;
    v60 = 0u;
    v61 = 0u;
    v57 = 0;
    v58 = 0u;
    v5 = 56;
    v63 = 0;
    v53 = 0u;
    v54 = 0u;
    v51 = 0;
    v52 = 0u;
  }
  if (__src != v141)
    free(__src);
  if (!v8)
    goto LABEL_11;
  *(_DWORD *)(v3 + 40) = v17;
  *(_DWORD *)(v3 + 56) = 0;
  *(_DWORD *)(v3 + 72) = 0;
  *(_DWORD *)(v3 + 88) = v16;
  v33 = *MEMORY[0x1E0C804E8];
  *(_QWORD *)(v3 + 104) = *MEMORY[0x1E0C804E8];
  v34 = strlen((const char *)(v3 + 128));
  if ((v34 + 1) >> 32)
  {
    *(_DWORD *)(v3 + 32) = -304;
    *(_QWORD *)(v3 + 24) = v33;
  }
  else
  {
    v35 = v21;
    *(_DWORD *)(v3 + 120) = 0;
    *(_DWORD *)(v3 + 124) = v34 + 1;
    v36 = ((_DWORD)v34 + 4) & 0xFFFFFFFC;
    v37 = v36 + 468;
    v38 = v3 + v36;
    v39 = v38 - 64;
    v40 = (char *)(v38 + 136);
    v41 = MEMORY[0x1E0C84128];
    if (MEMORY[0x1E0C84128])
      v42 = mig_strncpy_zerofill(v40, (const char *)&src, 64);
    else
      v42 = mig_strncpy(v40, (const char *)&src, 64);
    *(_DWORD *)(v39 + 192) = 0;
    *(_DWORD *)(v39 + 196) = v42;
    v43 = (v42 + 3) & 0xFFFFFFFC;
    v44 = v37 + v43;
    v45 = v39 + v43;
    v46 = v45 - 64;
    v47 = (char *)(v45 + 208);
    if (v41)
      v48 = mig_strncpy_zerofill(v47, v74, 256);
    else
      v48 = mig_strncpy(v47, v74, 256);
    *(_DWORD *)(v46 + 268) = v48;
    *(_DWORD *)(v46 + 264) = 0;
    v49 = (v48 + 3) & 0xFFFFFFFC;
    v50 = v46 + v49;
    *(_DWORD *)(v50 + 272) = v17;
    *(_QWORD *)(v46 + v49 + 276) = 0;
    *(_DWORD *)(v50 + 284) = HIDWORD(v72);
    *(_DWORD *)(v50 + 288) = 0;
    *(_OWORD *)(v46 + v49 + 292) = v61;
    *(_DWORD *)(v50 + 308) = HIDWORD(v70);
    *(_QWORD *)(v50 + 312) = v23;
    *(_OWORD *)(v50 + 320) = v60;
    *(_OWORD *)(v50 + 336) = v58;
    *(_QWORD *)(v50 + 352) = v57;
    *(_DWORD *)(v50 + 360) = HIDWORD(v69);
    *(_DWORD *)(v50 + 364) = v22;
    *(_DWORD *)(v50 + 368) = v24;
    *(_DWORD *)(v50 + 372) = HIDWORD(v68);
    *(_OWORD *)(v46 + v49 + 376) = v67;
    *(_DWORD *)(v50 + 392) = v70;
    *(_DWORD *)(v50 + 396) = v25;
    *(_DWORD *)(v50 + 400) = v26;
    *(_DWORD *)(v50 + 404) = v69;
    *(_DWORD *)(v50 + 408) = v68;
    *(_DWORD *)(v50 + 412) = v16;
    *(_DWORD *)(v50 + 416) = v72;
    *(_DWORD *)(v50 + 420) = HIDWORD(v71);
    *(_OWORD *)(v46 + v49 + 424) = v65;
    *(_QWORD *)(v50 + 440) = v27;
    *(_QWORD *)(v50 + 448) = v63;
    *(_BYTE *)(v50 + 456) = v71;
    *(_DWORD *)(v50 + 460) = 0;
    *(_DWORD *)(v46 + v49 + 457) = 0;
    *(_QWORD *)(v50 + 464) = v64;
    *(_QWORD *)(v50 + 472) = v66;
    *(_OWORD *)(v50 + 480) = v54;
    *(_DWORD *)(v50 + 496) = v62;
    *(_DWORD *)(v50 + 500) = 0;
    *(_OWORD *)(v46 + v49 + 504) = v53;
    *(_OWORD *)(v46 + v49 + 520) = v52;
    *(_QWORD *)(v50 + 536) = v51;
    *(_DWORD *)(v50 + 544) = v18;
    *(_BYTE *)(v50 + 548) = v19;
    *(_WORD *)(v46 + v49 + 549) = 0;
    *(_BYTE *)(v50 + 551) = 0;
    *(_BYTE *)(v50 + 552) = v59;
    *(_WORD *)(v46 + v49 + 553) = 0;
    *(_BYTE *)(v50 + 555) = 0;
    *(_BYTE *)(v50 + 556) = v20;
    *(_BYTE *)(v50 + 559) = 0;
    *(_WORD *)(v46 + v49 + 557) = 0;
    *(_OWORD *)(v50 + 560) = v56;
    *(_OWORD *)(v50 + 576) = v55;
    *(_BYTE *)(v50 + 592) = v35;
    *(_WORD *)(v46 + v49 + 593) = 0;
    *(_BYTE *)(v50 + 595) = 0;
    *(_DWORD *)v3 |= 0x80000000;
    *(_DWORD *)(v3 + 4) = v44 + v49;
    *(_DWORD *)(v3 + 24) = 5;
  }
}

void CA::Render::GradientLayer::~GradientLayer(CA::Render::GradientLayer *this)
{
  const void *v2;
  const void *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  const CA::Render::Object *v12;
  malloc_zone_t *malloc_zone;

  *(_QWORD *)this = off_1E1596F38;
  v2 = (const void *)*((_QWORD *)this + 17);
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 16);
  if (v3)
    CFRelease(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 15);
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
  }
  v8 = (unsigned int *)*((_QWORD *)this + 14);
  if (v8)
  {
    v9 = v8 + 2;
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
      (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 16))(v8);
  }
  CA::Render::InterpolatedFunction::~InterpolatedFunction((void **)this + 2);
  --dword_1ECDC7C78;
  *(_QWORD *)this = off_1E1598C30;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0)
    CA::Render::Encoder::ObjectCache::invalidate(this, v12);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

{
  const void *v2;
  const void *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  const CA::Render::Object *v12;

  *(_QWORD *)this = off_1E1596F38;
  v2 = (const void *)*((_QWORD *)this + 17);
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 16);
  if (v3)
    CFRelease(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 15);
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
  }
  v8 = (unsigned int *)*((_QWORD *)this + 14);
  if (v8)
  {
    v9 = v8 + 2;
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
      (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 16))(v8);
  }
  CA::Render::InterpolatedFunction::~InterpolatedFunction((void **)this + 2);
  --dword_1ECDC7C78;
  *(_QWORD *)this = off_1E1598C30;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0)
    CA::Render::Encoder::ObjectCache::invalidate(this, v12);
}

void CA::Render::InterpolatedFunction::~InterpolatedFunction(void **this)
{
  const CA::Render::Object *v2;

  *this = off_1E1598230;
  free(this[4]);
  free(this[6]);
  --dword_1ECDC7C70;
  *this = off_1E1598C30;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0)
    CA::Render::Encoder::ObjectCache::invalidate((CA::Render::Encoder::ObjectCache *)this, v2);
}

{
  malloc_zone_t *malloc_zone;

  CA::Render::InterpolatedFunction::~InterpolatedFunction(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

uint64_t _XApplyFenceTransaction(uint64_t result, uint64_t a2)
{
  int v3;
  int v4;

  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 2 || *(_DWORD *)(result + 4) != 84)
  {
    v3 = -304;
    goto LABEL_12;
  }
  if (*(_WORD *)(result + 38) != 529
    || *(_BYTE *)(result + 55) != 1
    || *(_DWORD *)(result + 40) != *(_DWORD *)(result + 72)
    || *(_DWORD *)(result + 76) != *(_DWORD *)(result + 56) >> 2)
  {
    v3 = -300;
    goto LABEL_12;
  }
  if (*(_DWORD *)(result + 84) || *(_DWORD *)(result + 88) <= 0x1Fu)
  {
    v3 = -309;
LABEL_12:
    *(_DWORD *)(a2 + 32) = v3;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
    return result;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  *(_DWORD *)(a2 + 52) = 16777473;
  *(_QWORD *)(a2 + 64) = 0x10000000000000;
  *(_QWORD *)(a2 + 76) = 0x11000000000000;
  result = CASApplyFenceTransaction(*(_DWORD *)(result + 68), *(_QWORD *)(result + 28), *(_DWORD *)(result + 40), *(_QWORD *)(result + 44), *(_DWORD *)(result + 56) >> 2, *(unsigned __int8 *)(result + 80), (vm_address_t *)(a2 + 28), (_DWORD *)(a2 + 92), (vm_address_t *)(a2 + 44), (unsigned int *)(a2 + 96), (_DWORD *)(a2 + 60), (_DWORD *)(a2 + 72), (_BYTE *)(a2 + 100), (_QWORD *)(a2 + 104));
  v4 = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a2 + 40) = 8 * *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a2 + 56) = 4 * v4;
  *(_QWORD *)(a2 + 84) = *MEMORY[0x1E0C804E8];
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 112;
  *(_DWORD *)(a2 + 24) = 4;
  return result;
}

void _XGetDisplays(_DWORD *a1, uint64_t a2)
{
  int v3;
  const __CFAllocator *v4;
  const __CFData *Data;
  const __CFData *v6;
  size_t Length;
  void *v8;
  const UInt8 *BytePtr;
  vm_address_t v10;
  int v11;
  vm_address_t address;
  CFPropertyListRef propertyList[2];

  propertyList[1] = *(CFPropertyListRef *)MEMORY[0x1E0C80C00];
  if ((*a1 & 0x80000000) != 0 || a1[1] != 36)
  {
    v3 = -304;
  }
  else if (a1[9] || a1[10] <= 0x1Fu)
  {
    v3 = -309;
  }
  else
  {
    *(_DWORD *)(a2 + 36) = 16777473;
    if (!a1[8])
    {
      v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE18];
      propertyList[0] = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE18], 0, MEMORY[0x1E0C9B378]);
      CA::Render::post_notification(0x1Au, 0, (uint64_t)propertyList, 0);
      address = 0;
      Data = CFPropertyListCreateData(v4, propertyList[0], kCFPropertyListBinaryFormat_v1_0, 0, 0);
      if (Data)
      {
        v6 = Data;
        Length = CFDataGetLength(Data);
        vm_allocate(*MEMORY[0x1E0C83DA0], &address, (Length + *MEMORY[0x1E0C85AD8] - 1) & -*MEMORY[0x1E0C85AD8], 1);
        v8 = (void *)address;
        if (address)
        {
          BytePtr = CFDataGetBytePtr(v6);
          memcpy(v8, BytePtr, Length);
        }
        CFRelease(v6);
      }
      else
      {
        LODWORD(Length) = 0;
      }
      CFRelease(propertyList[0]);
      v10 = address;
      *(_QWORD *)(a2 + 28) = address;
      v11 = v10 ? Length : 0;
      *(_DWORD *)(a2 + 52) = v11;
      if (v10)
      {
        *(_DWORD *)(a2 + 40) = v11;
        *(_QWORD *)(a2 + 44) = *MEMORY[0x1E0C804E8];
        *(_DWORD *)a2 |= 0x80000000;
        *(_DWORD *)(a2 + 4) = 56;
        *(_DWORD *)(a2 + 24) = 1;
        return;
      }
    }
    v3 = 5;
  }
  *(_DWORD *)(a2 + 32) = v3;
  *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
}

void CA::Render::Fence::btimeout_callback(CA::Render::Fence *this, double a2, void *a3)
{
  uint64_t *v4;
  char v5;
  double v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  NSObject *v15;
  int v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  double v20;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  double v25;
  uint8_t buf[4];
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (CA::Render::Fence::fence_info_once[0] != -1)
    dispatch_once_f(CA::Render::Fence::fence_info_once, 0, (dispatch_function_t)CA::Render::Fence::fence_info_init);
  os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::Fence::_lock);
  v4 = *(uint64_t **)(CA::Render::Fence::batches_by_port + 16);
  if (!v4)
  {
LABEL_41:
    v6 = INFINITY;
    goto LABEL_42;
  }
  v5 = 0;
  v6 = INFINITY;
  do
  {
    v7 = CA::Render::Fence::cleared_b_ports;
    v8 = *((_DWORD *)v4 + 4);
    v9 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>((_QWORD *)CA::Render::Fence::cleared_b_ports, v8);
    if (v9)
      goto LABEL_29;
    v10 = v4[3];
    v11 = *(double *)(v10 + 16);
    if (v11 == 0.0)
    {
      v11 = *(double *)(v10 + 8);
      if (v11 <= a2)
      {
        kdebug_trace();
        *(_BYTE *)(v4[3] + 44) = 1;
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v15 = x_log_category_render;
          v9 = (uint64_t *)os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v9)
          {
            v16 = *((_DWORD *)v4 + 4);
            *(_DWORD *)buf = 67109120;
            v27 = v16;
            _os_log_impl(&dword_184457000, v15, OS_LOG_TYPE_DEFAULT, "timed out batch %x\n", buf, 8u);
          }
        }
        v17 = v4[3];
        v18 = *(uint64_t **)(*(_QWORD *)(v17 + 32) + 16);
        if (v18)
        {
          v19 = (_QWORD *)CA::Render::Fence::bcontexts_by_id;
          do
          {
            v9 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(v19, *((_DWORD *)v18 + 4));
            if (v9)
            {
              v20 = CA::Render::Context::delay_of_batch(*(os_unfair_lock_s **)v9[3], *((_DWORD *)v4 + 4));
              v17 = v4[3];
              v19 = (_QWORD *)CA::Render::Fence::bcontexts_by_id;
              if (v20 > *(double *)(v17 + 16))
                *(double *)(v17 + 16) = a2;
            }
            v18 = (uint64_t *)*v18;
          }
          while (v18);
        }
        v11 = *(double *)(v17 + 16);
        if (v11 == 0.0 || v11 <= a2)
        {
          v12 = CA::Render::Fence::cleared_b_ports;
          v13 = *((_DWORD *)v4 + 4);
          v14 = v13;
          goto LABEL_26;
        }
      }
    }
    else if (v11 <= a2)
    {
      v12 = v7;
      v13 = v8;
      v14 = v8;
LABEL_26:
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>(v12, v13, v14);
      v5 = 1;
      goto LABEL_29;
    }
    if (v11 <= v6)
      v6 = v11;
LABEL_29:
    v4 = (uint64_t *)*v4;
  }
  while (v4);
  if ((v5 & 1) == 0 || !CA::Render::Fence::resolve_batches((CA::Render::Fence *)v9, a2))
    goto LABEL_42;
  v22 = *(uint64_t **)(CA::Render::Fence::batches_by_port + 16);
  if (!v22)
    goto LABEL_41;
  v23 = (_QWORD *)CA::Render::Fence::cleared_b_ports;
  v6 = INFINITY;
  do
  {
    if (!std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(v23, *((_DWORD *)v22 + 4)))
    {
      v24 = v22[3];
      v25 = *(double *)(v24 + 16);
      if (v25 == 0.0)
        v25 = *(double *)(v24 + 8);
      if (v25 <= v6)
        v6 = v25;
    }
    v22 = (uint64_t *)*v22;
  }
  while (v22);
LABEL_42:
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::Fence::_lock);
  if ((*(_QWORD *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    CA::Render::Server::add_callback(3, (uint64_t)CA::Render::Fence::btimeout_callback, 0, v6);
}

void CA::Render::SecureIndicatorLayer::~SecureIndicatorLayer(CA::Render::SecureIndicatorLayer *this, const CA::Render::Object *a2)
{
  malloc_zone_t *malloc_zone;

  --dword_1ECDC7CDC;
  *(_QWORD *)this = off_1E1598C30;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0)
    CA::Render::Encoder::ObjectCache::invalidate(this, a2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

{
  --dword_1ECDC7CDC;
  *(_QWORD *)this = off_1E1598C30;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0)
    CA::Render::Encoder::ObjectCache::invalidate(this, a2);
}

uint64_t _XUpdateClient(uint64_t result, uint64_t a2)
{
  int v3;

  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 60)
  {
    v3 = -304;
  }
  else
  {
    if (!*(_DWORD *)(result + 60) && *(_DWORD *)(result + 64) > 0x1Fu)
    {
      result = CASUpdateClient(*(_DWORD *)(result + 12), (CA::Render::Context *)*(unsigned int *)(result + 32), *(double *)(result + 36), *(double *)(result + 52), *(unsigned int *)(result + 44), *(unsigned int *)(result + 48));
      *(_DWORD *)(a2 + 32) = result;
      return result;
    }
    v3 = -309;
  }
  *(_DWORD *)(a2 + 32) = v3;
  *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  return result;
}

uint64_t CASUpdateClient(int a1, CA::Render::Context *this, double a3, double a4, uint64_t a5, uint64_t a6)
{
  CA::Render::Context *v10;
  CA::Render::Context *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;

  v10 = (CA::Render::Context *)CA::Render::Context::context_by_id(this);
  if (v10)
  {
    v11 = v10;
    CA::Render::Context::will_commit(v10);
    if (a4 != 0.0)
      CA::Render::Context::add_input_time(v11, a4);
    CA::Render::Context::did_commit((unint64_t)v11, 1, *(uint64_t *)&a3, 0, a5, a6);
    v12 = (unsigned int *)((char *)v11 + 8);
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
      (*(void (**)(CA::Render::Context *))(*(_QWORD *)v11 + 16))(v11);
  }
  return 0;
}

uint64_t _XRegisterFrameIntervalReasons(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  if ((*(_DWORD *)a1 & 0x80000000) != 0 && *(_DWORD *)(a1 + 24) == 1 && *(_DWORD *)(a1 + 4) == 64)
  {
    if (*(_BYTE *)(a1 + 39) == 1 && (v3 = *(_DWORD *)(a1 + 40) >> 2, v3 == *(_DWORD *)(a1 + 60)))
    {
      if (*(_DWORD *)(a1 + 64) || *(_DWORD *)(a1 + 68) < 0x20u)
        result = 4294966987;
      else
        result = CASRegisterFrameIntervalReasons(*(unsigned int *)(a1 + 12), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 56), *(_QWORD *)(a1 + 28), v3);
    }
    else
    {
      result = 4294966996;
    }
  }
  else
  {
    result = 4294966992;
  }
  *(_DWORD *)(a2 + 32) = result;
  *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  return result;
}

uint64_t CASRegisterFrameIntervalReasons(uint64_t a1, int a2, unsigned int a3, mach_vm_address_t a4, unsigned int a5)
{
  mach_vm_size_t v6;
  uint64_t v7;
  _DWORD v9[2];
  uint64_t v10;
  mach_vm_address_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v9[0] = 0;
  v6 = 4 * a5;
  v9[1] = a2;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  CA::Render::post_notification(0x38u, 0, (uint64_t)v9, 0);
  if (LOBYTE(v9[0]))
    v7 = 0;
  else
    v7 = 5;
  mach_vm_deallocate(*MEMORY[0x1E0C83DA0], a4, v6);
  return v7;
}

uint64_t _XRegisterClient(uint64_t result, uint64_t a2)
{
  int v3;
  _DWORD *v4;
  mach_port_name_t v5;
  const audit_token_t *v6;
  mach_port_name_t v7;
  mach_port_name_t v8;
  int v9;
  const UInt8 *v10;
  unsigned int v11;
  __int128 v12;
  _OWORD v13[2];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 5 || *(_DWORD *)(result + 4) != 108)
  {
    v3 = -304;
    goto LABEL_14;
  }
  if (*(unsigned __int16 *)(result + 38) << 16 != 1114112
    || *(unsigned __int16 *)(result + 50) << 16 != 1114112
    || *(unsigned __int16 *)(result + 62) << 16 != 1114112
    || *(unsigned __int16 *)(result + 74) << 16 != 1114112
    || *(_BYTE *)(result + 87) != 1
    || *(_DWORD *)(result + 88) != *(_DWORD *)(result + 104))
  {
    v3 = -300;
    goto LABEL_14;
  }
  if (*(_DWORD *)(result + 108) || *(_DWORD *)(result + 112) <= 0x1Fu)
  {
    v3 = -309;
LABEL_14:
    *(_DWORD *)(a2 + 32) = v3;
    goto LABEL_15;
  }
  v4 = (_DWORD *)(a2 + 28);
  *(_QWORD *)(a2 + 32) = 0x13000000000000;
  v5 = *(_DWORD *)(result + 28);
  v6 = (const audit_token_t *)*(unsigned int *)(result + 40);
  v7 = *(_DWORD *)(result + 52);
  v8 = *(_DWORD *)(result + 64);
  v9 = *(_DWORD *)(result + 100);
  v10 = *(const UInt8 **)(result + 76);
  v11 = *(_DWORD *)(result + 88);
  v12 = *(_OWORD *)(result + 144);
  v13[0] = *(_OWORD *)(result + 128);
  v13[1] = v12;
  result = CASRegisterClient(v5, v6, v7, v8, v9, v10, v11, v4, (_DWORD *)(a2 + 48), (pid_t *)(a2 + 52), (CA::Render::Server *)v13);
  if (!(_DWORD)result)
  {
    *(_QWORD *)(a2 + 40) = *MEMORY[0x1E0C804E8];
    *(_DWORD *)a2 |= 0x80000000;
    *(_DWORD *)(a2 + 4) = 56;
    *(_DWORD *)(a2 + 24) = 1;
    return result;
  }
  *(_DWORD *)(a2 + 32) = result;
LABEL_15:
  *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  return result;
}

void CA::Render::ReplicatorLayer::~ReplicatorLayer(CA::Render::ReplicatorLayer *this, const CA::Render::Object *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  malloc_zone_t *malloc_zone;

  *(_QWORD *)this = off_1E1597788;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
  }
  --dword_1ECDC7CD8;
  *(_QWORD *)this = off_1E1598C30;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0)
    CA::Render::Encoder::ObjectCache::invalidate(this, a2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = off_1E1597788;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
  }
  --dword_1ECDC7CD8;
  *(_QWORD *)this = off_1E1598C30;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0)
    CA::Render::Encoder::ObjectCache::invalidate(this, a2);
}

void CA::Render::PortalLayer::~PortalLayer(CA::Render::PortalLayer *this, const CA::Render::Object *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  malloc_zone_t *malloc_zone;

  *(_QWORD *)this = off_1E1596640;
  v3 = (unsigned int *)*((_QWORD *)this + 7);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
  }
  v7 = (unsigned int *)*((_QWORD *)this + 6);
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
  }
  --dword_1ECDC7CC8;
  *(_QWORD *)this = off_1E1598C30;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0)
    CA::Render::Encoder::ObjectCache::invalidate(this, a2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)this = off_1E1596640;
  v3 = (unsigned int *)*((_QWORD *)this + 7);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
  }
  v7 = (unsigned int *)*((_QWORD *)this + 6);
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
  }
  --dword_1ECDC7CC8;
  *(_QWORD *)this = off_1E1598C30;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0)
    CA::Render::Encoder::ObjectCache::invalidate(this, a2);
}

void _XGetNeededAlignment(_DWORD *a1, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;

  if ((*a1 & 0x80000000) != 0 || a1[1] != 24)
  {
    v2 = -304;
    goto LABEL_7;
  }
  if (a1[6] || a1[7] <= 0x1Fu)
  {
    v2 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v2;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
    return;
  }
  {
    v4 = a2;
    a2 = v4;
  }
  v3 = qword_1ECDC4CD0;
  *(_DWORD *)(a2 + 32) = 0;
  *(_DWORD *)(a2 + 36) = v3;
  *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  *(_DWORD *)(a2 + 4) = 40;
}

void _XGetMaxRenderableIOSurfaceSize(_DWORD *a1, uint64_t a2)
{
  int v2;
  uint64_t v3;

  if ((*a1 & 0x80000000) != 0 || a1[1] != 24)
  {
    v2 = -304;
    goto LABEL_7;
  }
  if (a1[6] || a1[7] <= 0x1Fu)
  {
    v2 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v2;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
    return;
  }
  {
    v3 = a2;
    a2 = v3;
  }
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  *(_DWORD *)(a2 + 4) = 48;
}

void CA::Render::GainMapLayer::~GainMapLayer(CA::Render::GainMapLayer *this, const CA::Render::Object *a2)
{
  malloc_zone_t *malloc_zone;

  --dword_1ECDC7C74;
  *(_QWORD *)this = off_1E1598C30;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0)
    CA::Render::Encoder::ObjectCache::invalidate(this, a2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

{
  --dword_1ECDC7C74;
  *(_QWORD *)this = off_1E1598C30;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0)
    CA::Render::Encoder::ObjectCache::invalidate(this, a2);
}

void _XGetSurfaceReplaceability(uint64_t a1, uint64_t a2)
{
  int v3;
  unsigned int v4;
  __int128 v5;
  const audit_token_t *v6;
  uint64_t v7;
  _OWORD v8[2];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 36)
  {
    v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 40) <= 0x1Fu)
  {
    v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
    return;
  }
  v4 = *(_DWORD *)(a1 + 32);
  v5 = *(_OWORD *)(a1 + 72);
  v8[0] = *(_OWORD *)(a1 + 56);
  v8[1] = v5;
  if ((CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v8, (const audit_token_t *)a2) & 0x80) != 0
    || (CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v8, v6) & 0x20000) != 0)
  {
    v3 = -81182719;
    goto LABEL_7;
  }
  if (v4)
  {
    v7 = v4;
    CA::Render::post_notification(0x34u, 0, (uint64_t)&v7, 0);
    *(_DWORD *)(a2 + 36) = BYTE4(v7);
  }
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  *(_DWORD *)(a2 + 4) = 40;
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,BOOL (*)(unsigned int)>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,BOOL (*)(unsigned int)>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,BOOL (*)(unsigned int)>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,BOOL (*)(unsigned int)>>>::find<unsigned int>(unsigned int a1)
{
  uint8x8_t v1;
  unint64_t v2;
  uint64_t *i;
  unint64_t v4;

  if (!*((_QWORD *)&CA::Render::Server::dead_name_watch_list(void)::watch_list + 1))
    return 0;
  v1 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&CA::Render::Server::dead_name_watch_list(void)::watch_list + 8));
  v1.i16[0] = vaddlv_u8(v1);
  if (v1.u32[0] > 1uLL)
  {
    v2 = a1;
    if (*((_QWORD *)&CA::Render::Server::dead_name_watch_list(void)::watch_list + 1) <= (unint64_t)a1)
      v2 = (unint64_t)a1 % *((_QWORD *)&CA::Render::Server::dead_name_watch_list(void)::watch_list + 1);
  }
  else
  {
    v2 = (DWORD2(CA::Render::Server::dead_name_watch_list(void)::watch_list) - 1) & a1;
  }
  i = *(uint64_t **)(CA::Render::Server::dead_name_watch_list(void)::watch_list + 8 * v2);
  if (i)
  {
    for (i = (uint64_t *)*i; i; i = (uint64_t *)*i)
    {
      v4 = i[1];
      if (v4 == a1)
      {
        if (*((_DWORD *)i + 4) == a1)
          return i;
      }
      else
      {
        if (v1.u32[0] > 1uLL)
        {
          if (v4 >= *((_QWORD *)&CA::Render::Server::dead_name_watch_list(void)::watch_list + 1))
            v4 %= *((_QWORD *)&CA::Render::Server::dead_name_watch_list(void)::watch_list + 1);
        }
        else
        {
          v4 &= *((_QWORD *)&CA::Render::Server::dead_name_watch_list(void)::watch_list + 1) - 1;
        }
        if (v4 != v2)
          return 0;
      }
    }
  }
  return i;
}

void CA::Render::Server::dead_name_watch_list(CA::Render::Server *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      CA::Render::Server::dead_name_watch_list(void)::watch_list = 0u;
      *(_OWORD *)&qword_1EDD11CE0 = 0u;
      dword_1EDD11CF0 = 1065353216;
    }
  }
}

void CA::Render::Fence::ftimeout_callback(CA::Render::Fence *this, double a2, void *a3)
{
  _QWORD *v4;
  char v5;
  double v6;
  CA::Render::Fence *v7;
  uint64_t v8;
  double v9;
  NSObject *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint8_t buf[4];
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (CA::Render::Fence::fence_info_once[0] != -1)
    dispatch_once_f(CA::Render::Fence::fence_info_once, 0, (dispatch_function_t)CA::Render::Fence::fence_info_init);
  os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::Fence::_lock);
  v4 = *(_QWORD **)(CA::Render::Fence::fences_by_name + 16);
  if (!v4)
    goto LABEL_25;
  v5 = 0;
  v6 = INFINITY;
  do
  {
    while (1)
    {
      v7 = (CA::Render::Fence *)std::__hash_table<std::__hash_value_type<unsigned long,unsigned long long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long long>>>::find<unsigned long>((_QWORD *)CA::Render::Fence::cleared_f_names, v4[2]);
      if (v7)
        goto LABEL_15;
      v8 = v4[3];
      v9 = *(double *)(v8 + 8);
      if (v9 > a2)
        break;
      kdebug_trace();
      ht_fence_timeout();
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v10 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          v11 = v4[2];
          *(_DWORD *)buf = 134217984;
          v16 = v11;
          _os_log_impl(&dword_184457000, v10, OS_LOG_TYPE_DEFAULT, "timed out fence %llu\n", buf, 0xCu);
        }
      }
      std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>(CA::Render::Fence::cleared_f_names, v4[2], v4[2]);
      v4 = (_QWORD *)*v4;
      v5 = 1;
      if (!v4)
        goto LABEL_17;
    }
    if (v9 <= v6)
      v6 = *(double *)(v8 + 8);
LABEL_15:
    v4 = (_QWORD *)*v4;
  }
  while (v4);
  if ((v5 & 1) == 0)
    goto LABEL_26;
LABEL_17:
  if (CA::Render::Fence::resolve_fences(v7))
  {
    v12 = *(_QWORD **)(CA::Render::Fence::fences_by_name + 16);
    if (v12)
    {
      v13 = (_QWORD *)CA::Render::Fence::cleared_f_names;
      v6 = INFINITY;
      do
      {
        if (!std::__hash_table<std::__hash_value_type<unsigned long,unsigned long long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long long>>>::find<unsigned long>(v13, v12[2]))
        {
          v14 = v12[3];
          if (*(double *)(v14 + 8) <= v6)
            v6 = *(double *)(v14 + 8);
        }
        v12 = (_QWORD *)*v12;
      }
      while (v12);
      goto LABEL_26;
    }
LABEL_25:
    v6 = INFINITY;
  }
LABEL_26:
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::Fence::_lock);
  if ((*(_QWORD *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    CA::Render::Server::add_callback(3, (uint64_t)CA::Render::Fence::ftimeout_callback, 0, v6);
}

uint64_t _XRenderDisplayLayerSurface(uint64_t result, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  CA::Render::Context *v11;
  uint64_t v12;
  mach_port_t v13;
  int v14;
  int v15;
  double v16;
  BOOL *v17;
  __int128 v18;
  _OWORD v19[2];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)result & 0x80000000) == 0)
    goto LABEL_2;
  v5 = result;
  v3 = -304;
  if (*(_DWORD *)(result + 24) != 1)
    goto LABEL_3;
  v6 = *(unsigned int *)(result + 4);
  if (v6 < 0xD8 || v6 > 0x1D8)
    goto LABEL_3;
  if (*(unsigned __int16 *)(result + 38) << 16 != 1114112)
  {
    v3 = -300;
    goto LABEL_3;
  }
  v7 = *(_DWORD *)(result + 52);
  if (v7 > 0x100)
    goto LABEL_2;
  v3 = -304;
  if ((int)v6 - 216 < v7)
    goto LABEL_3;
  v8 = (v7 + 3) & 0xFFFFFFFC;
  if ((_DWORD)v6 != v8 + 216)
    goto LABEL_3;
  v9 = 312;
  if (*(unsigned int *)(result + 4) < 0x138uLL)
    v9 = *(unsigned int *)(result + 4);
  result = (uint64_t)memchr((void *)(result + 56), 0, v9 - 56);
  if (!result)
  {
LABEL_2:
    v3 = -304;
LABEL_3:
    *(_DWORD *)(a2 + 32) = v3;
    v4 = *MEMORY[0x1E0C804E8];
    goto LABEL_4;
  }
  v10 = ((v6 + 3) & 0x1FFFFFFFCLL) + v5;
  if (*(_DWORD *)v10 || *(_DWORD *)(v10 + 4) <= 0x1Fu)
  {
    v3 = -309;
    goto LABEL_3;
  }
  v11 = (CA::Render::Context *)*(unsigned int *)(v5 + v8 + 56);
  v12 = *(_QWORD *)(v5 + v8 + 60);
  v13 = *(_DWORD *)(v5 + 28);
  v14 = *(_DWORD *)(v5 + v8 + 68);
  v15 = *(_DWORD *)(v5 + v8 + 72);
  v16 = *(double *)(v5 + v8 + 76);
  v17 = (BOOL *)*(unsigned int *)(v5 + v8 + 212);
  v18 = *(_OWORD *)(v10 + 36);
  v19[0] = *(_OWORD *)(v10 + 20);
  v19[1] = v18;
  result = CASRenderDisplayLayerSurface((const char *)(v5 + 56), v11, v12, v13, v14, v15, (CA::Mat4Impl *)(v5 + v8 + 84), v17, v16, (unint64_t *)(a2 + 36), (CA::Render::Server *)v19);
  *(_DWORD *)(a2 + 32) = result;
  v4 = *MEMORY[0x1E0C804E8];
  if (!(_DWORD)result)
  {
    *(_QWORD *)(a2 + 24) = v4;
    *(_DWORD *)(a2 + 4) = 44;
    return result;
  }
LABEL_4:
  *(_QWORD *)(a2 + 24) = v4;
  return result;
}

uint64_t CA::WindowServer::Display::post_display_changed_callback(CA::WindowServer::Display *this, double a2, void *a3)
{
  NSObject *v4;
  uint8_t v6[8];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v4 = x_log_category_windowserver;
    if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_184457000, v4, OS_LOG_TYPE_DEFAULT, "Posting display changed notification", v6, 2u);
    }
  }
  CA::Render::post_notification(0x2Fu, 0, (uint64_t)this, 0);
  return notify_post("com.apple.CoreAnimation.CAWindowServer.DisplayChanged");
}

void CA::OGL::render_contents_background(CA::OGL::Context **a1, uint64_t a2, uint64_t a3, const int *a4, double a5, float32x4_t a6, int64x2_t a7)
{
  CA::OGL::Context **v8;
  CA::OGL::Context *v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  const CA::Shape *v16;
  uint64_t v17;
  _OWORD *v18;
  __int16 v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const CA::Bounds *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  CA::Render::Image *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const Rect *v37;
  double *v38;
  __int128 v39;
  uint64_t v40;
  int v41;
  int v42;
  uint32x2_t **v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  float v47;
  uint64_t v48;
  int v53;
  unsigned __int16 v55;
  unint64_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int64x2_t v59;
  char v61;
  double *v62;
  double *v63;
  int v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  int32x2_t *v69;
  int32x2_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int32x4_t v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  double *v82;
  BOOL v84;
  CA::Render::TiledTexture *v85;
  double v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  int v90;
  int v91;
  int v92;
  uint64_t v93;
  char v94;
  int v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  int64x2_t v99;
  int64x2_t v100;
  int32x2_t v101;
  unint64_t v102;
  int8x16_t v103;
  int64x2_t v104;
  unint64_t v105;
  int8x16_t v106;
  int32x4_t v107;
  double v108;
  int8x16_t v109;
  CA::Render::Image *v110;
  uint64_t v111;
  int v112;
  int v113;
  CA::OGL::Context *v114;
  double *v115;
  double *v116;
  BOOL v117;
  uint64_t (*v118)(double *);
  int v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  float v126;
  unint64_t v127;
  CA::Render::Image *v128;
  double *v129;
  float16x4_t v130;
  float16x4_t v131;
  char v132;
  int v133;
  int v134;
  uint64_t v136;
  _OWORD *v137;
  _OWORD *v138;
  uint64_t v140;
  unsigned int v141;
  uint64_t v142;
  const float *v143;
  unsigned int v144;
  uint64_t v145;
  _BYTE *v146;
  _OWORD *v147;
  unsigned __int8 *v148;
  unsigned int v149;
  uint64_t v150;
  double *v151;
  uint32x2_t **v152;
  uint32x2_t **v153;
  float16x4_t v155;
  unsigned __int16 v157;
  unint64_t v158;
  int8x16_t v159;
  int8x16_t v160;
  int64x2_t v161;
  int v162;
  uint64_t v163;
  char v164;
  uint64_t v165;
  CA::Shape *v166;
  unint64_t v167;
  double v168;
  double v169;
  float32x4_t v170;
  CA::Shape *v171;
  uint64_t v172;
  uint64_t v173;
  CA::Render::TiledTexture *v174;
  unsigned int *v175;
  unsigned int *v176;
  unsigned int v177;
  double *v178;
  unsigned int *v179;
  unsigned int *v180;
  unsigned int v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  uint64_t v186;
  uint64_t v187;
  CA::Render::Surface *v188;
  unsigned int *v189;
  unsigned int *v190;
  unsigned int v191;
  unsigned int v192;
  double v193;
  double v194;
  float32x4_t v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  unint64_t *v200;
  unint64_t v201;
  int v202;
  unint64_t v203;
  char v204;
  unint64_t v205;
  uint64_t v206;
  _BOOL4 v207;
  const char *v208;
  NSObject *v209;
  uint32_t v210;
  uint64_t v211;
  _BOOL4 v212;
  int v213;
  uint64_t v214;
  double *v215;
  unsigned int *v216;
  unsigned int v217;
  unsigned int v218;
  NSObject *v219;
  double *v220;
  int v221;
  __n128 v222;
  int8x16_t v223;
  int32x4_t v224;
  uint32x2_t v225;
  int32x2_t v226;
  uint32x2_t v227;
  int32x2_t v228;
  int32x2_t v229;
  uint32x2_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  _DWORD *v234;
  uint64_t v235;
  __int16 v236;
  CA::OGL::Context **v237;
  uint32x2_t **v238;
  uint32x2_t **v239;
  uint32x2_t **v240;
  uint32x2_t **v241;
  int v242;
  uint64_t v243;
  uint64_t v244;
  CA::Shape *v245;
  _DWORD *v246;
  double v247;
  int8x16_t v248;
  uint64_t v249;
  uint64_t v250;
  int32x2_t v251;
  uint64_t v252;
  unint64_t v253;
  _OWORD *v254;
  const CA::Transform *v255;
  int v256;
  _BOOL4 v257;
  int v258;
  float64x2_t v259;
  float64x2_t v260;
  float64x2_t v261;
  double *v262;
  double *v263;
  _BYTE *v264;
  __int128 v265;
  uint64_t v266;
  uint64_t v267;
  CA::OGL::Context **v268;
  _DWORD *v269;
  _QWORD v270[2];
  __n128 i;
  unsigned __int8 v272;
  unsigned __int8 v273;
  _OWORD v274[4];
  uint64_t v275;
  __int128 v276;
  float64x2_t v277;
  __int128 v278;
  _BYTE v279[24];
  __int128 v280;
  __int128 v281;
  uint64_t v282;
  uint64_t v283;
  _OWORD v284[19];
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  uint64_t v297;
  _OWORD v298[5];
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  uint64_t v325;
  uint64_t v326;

  v8 = a1;
  v326 = *MEMORY[0x1E0C80C00];
  v9 = *a1;
  v10 = *((_QWORD *)*a1 + 29);
  v275 = 0;
  v11 = 0.0;
  memset(v274, 0, sizeof(v274));
  v12 = *(_QWORD *)(v10 + 8);
  v13 = *(_QWORD *)(a2 + 32) & 0x200005020;
  v14 = v13 == 0;
  v15 = *(_QWORD *)(a2 + 16);
  v16 = *(const CA::Shape **)(v15 + 216);
  v17 = v12;
  v18 = (_OWORD *)v10;
  if (!v16)
    goto LABEL_9;
  v19 = *(_WORD *)(v10 + 68);
  v17 = *(_QWORD *)(v10 + 8);
  v18 = (_OWORD *)v10;
  if ((v19 & 0x100) == 0)
    goto LABEL_9;
  _ZF = !*(_DWORD *)(v15 + 112) && BYTE11(ca_debug_options) == 0;
  v17 = *(_QWORD *)(v10 + 8);
  v18 = (_OWORD *)v10;
  if (!_ZF || (v17 = *(_QWORD *)(v10 + 8), v18 = (_OWORD *)v10, (*(_DWORD *)(v15 + 24) & 0x1C000) != 0))
  {
LABEL_9:
    if ((v17 & 1) == 0)
      goto LABEL_10;
LABEL_17:
    if (v17 == 1)
      goto LABEL_29;
    goto LABEL_18;
  }
  *(_OWORD *)((char *)v274 + 8) = *(_OWORD *)(v10 + 8);
  v21 = *(_QWORD *)(v10 + 32);
  *((_QWORD *)&v274[1] + 1) = *(_QWORD *)(v10 + 24);
  *(_QWORD *)&v274[2] = v21;
  *(_OWORD *)((char *)&v274[2] + 8) = *(_OWORD *)(v10 + 40);
  *((_QWORD *)&v274[3] + 1) = *(_QWORD *)(v10 + 56);
  LODWORD(v275) = *(_DWORD *)(v10 + 64);
  WORD2(v275) = v19 & 0x5FF;
  v22 = CA::Shape::subtract(*((CA::Shape **)&v274[0] + 1), v16, a3, a4);
  *((_QWORD *)&v274[0] + 1) = v22;
  if ((*((_BYTE *)v9 + 416) & 0x10) != 0)
  {
    v23 = *(_QWORD *)(v10 + 8);
    if ((v23 & 1) == 0)
    {
      if (*(_DWORD *)(v23 + 4) == 12)
        goto LABEL_16;
      goto LABEL_15;
    }
    if (v23 == 1)
    {
LABEL_15:
      v298[0] = 0uLL;
      CA::Shape::get_bounds(v22, (int *)v298);
      CA::Shape::unref(*((CA::Shape **)&v274[0] + 1));
      *((_QWORD *)&v274[0] + 1) = CA::Shape::new_shape((CA::Shape *)v298, v24);
    }
  }
LABEL_16:
  v18 = v274;
  *(_QWORD *)&v274[0] = CA::OGL::Context::set_gstate((uint64_t)v9, (uint64_t)v274);
  v17 = *((_QWORD *)&v274[0] + 1);
  if ((BYTE8(v274[0]) & 1) != 0)
    goto LABEL_17;
LABEL_10:
  if (*(_DWORD *)(v17 + 4) == 6)
    goto LABEL_29;
LABEL_18:
  if ((*(_BYTE *)(a2 + 33) & 1) == 0)
    goto LABEL_27;
  v25 = *(_QWORD *)(a2 + 16);
  if ((*(_BYTE *)(v25 + 27) & 2) != 0)
    __assert_rtn("render_contents_background", "ogl-layer.cpp", 3142, "!(l->node->flags & Render::kLayerNodeIgnoreContents)");
  v26 = *(_QWORD *)(v25 + 48);
  if (!v26)
    goto LABEL_27;
  v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 80))(v26);
  v269 = v18;
  if (!v27)
  {
    if (*(_BYTE *)(v26 + 12) == 26)
    {
      CA::OGL::render_background(v8, a2, v11, *(double *)a6.i64, (float32x4_t)a7);
      *(_QWORD *)&v265 = *v8;
      v266 = *(_QWORD *)(v265 + 232);
      v32 = *(_BYTE **)(v26 + 24);
      v33 = *(_BYTE **)(v26 + 32);
      if (v33)
        v34 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v33 + 80))(*(_QWORD *)(v26 + 32));
      else
        v34 = 0;
      v264 = v32;
      if (!v32)
        goto LABEL_29;
      v62 = (double *)v34;
      v63 = (double *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v264 + 80))(v264);
      if (!v62 || !v63)
        goto LABEL_29;
      v263 = v63;
      v325 = 0;
      v324 = 0u;
      v323 = 0u;
      v322 = 0u;
      v321 = 0u;
      v320 = 0u;
      v319 = 0u;
      v318 = 0u;
      v317 = 0u;
      v316 = 0u;
      v315 = 0u;
      v314 = 0u;
      v313 = 0u;
      v312 = 0u;
      v311 = 0u;
      v310 = 0u;
      v309 = 0u;
      v308 = 0u;
      v307 = 0u;
      v306 = 0u;
      v305 = 0u;
      v304 = 0u;
      v303 = 0u;
      v302 = 0u;
      v301 = 0u;
      v300 = 0u;
      v299 = 0u;
      memset(v298, 0, sizeof(v298));
      CA::OGL::ContentsGeometry::ContentsGeometry((uint64_t)v298, a2, v266, (uint64_t)v62, (uint64_t)v33, v265);
      v268 = v8;
      if ((_BYTE)v311)
        DWORD1(v313) |= 0x100u;
      else
        v62 = 0;
      v297 = 0;
      v295 = 0u;
      v296 = 0u;
      v293 = 0u;
      v294 = 0u;
      v291 = 0u;
      v292 = 0u;
      v289 = 0u;
      v290 = 0u;
      v287 = 0u;
      v288 = 0u;
      v285 = 0u;
      v286 = 0u;
      memset(v284, 0, sizeof(v284));
      CA::OGL::ContentsGeometry::ContentsGeometry((uint64_t)v284, a2, v266, (uint64_t)v263, (uint64_t)v264, v265);
      v95 = LOBYTE(v284[17]);
      if (LOBYTE(v284[17]))
      {
        DWORD1(v285) |= 0x100u;
        LODWORD(v267) = v62 != 0;
      }
      else
      {
        if (!v62)
          goto LABEL_29;
        v263 = 0;
        LODWORD(v267) = 1;
      }
      v96 = *(float64x2_t *)((char *)&v298[2] + 8);
      v97 = *(float64x2_t *)((char *)&v298[3] + 8);
      v98.f64[1] = *(float64_t *)&v284[4];
      v99 = vclezq_f64(*(float64x2_t *)((char *)&v298[3] + 8));
      v100 = vclezq_f64(*(float64x2_t *)((char *)&v284[3] + 8));
      v101 = vmovn_s64(vcltzq_s64((int64x2_t)vorrq_s8((int8x16_t)vzip1q_s64(v100, v99), (int8x16_t)vzip2q_s64(v100, v99))));
      if ((v101.i8[4] & 1) != 0)
      {
        if ((v101.i8[0] & 1) != 0)
          v102 = -1;
        else
          v102 = 0;
        v103 = (int8x16_t)vdupq_n_s64(v102);
        v97 = (float64x2_t)vbslq_s8(v103, *(int8x16_t *)((char *)&v298[3] + 8), *(int8x16_t *)((char *)&v284[3] + 8));
        v96 = (float64x2_t)vbslq_s8(v103, *(int8x16_t *)((char *)&v298[2] + 8), *(int8x16_t *)((char *)&v284[2] + 8));
      }
      else if ((v101.i8[0] & 1) == 0)
      {
        v96 = vminnmq_f64(*(float64x2_t *)((char *)&v298[2] + 8), *(float64x2_t *)((char *)&v284[2] + 8));
        v98 = vmaxnmq_f64(vaddq_f64(*(float64x2_t *)((char *)&v298[2] + 8), *(float64x2_t *)((char *)&v298[3] + 8)), vaddq_f64(*(float64x2_t *)((char *)&v284[2] + 8), *(float64x2_t *)((char *)&v284[3] + 8)));
        v97 = vsubq_f64(v98, v96);
      }
      v98.f64[0] = *(float64_t *)(v26 + 48);
      *(float *)v98.f64 = v98.f64[0];
      if (*(float *)v98.f64 > 1.0)
        *(float *)v98.f64 = 1.0;
      if (*(float *)v98.f64 < 0.0)
        *(float *)v98.f64 = 0.0;
      v260 = v97;
      v261 = v98;
      v104 = vceqzq_f64(v97);
      v105 = vorrq_s8((int8x16_t)vdupq_laneq_s64(v104, 1), (int8x16_t)v104).u64[0];
      v259 = v96;
      if ((v105 & 0x8000000000000000) != 0
        || (v106 = vorrq_s8((int8x16_t)vcltzq_f64(v97), (int8x16_t)vcgezq_f64(v97)),
            (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v106), 1), v106).u64[0] & 0x8000000000000000) != 0))
      {
        *(_QWORD *)v279 = 0;
        *(_QWORD *)&v279[8] = 0;
      }
      else
      {
        v107 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v96, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
        *(int32x4_t *)v279 = vuzp1q_s32(v107, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v96, v97), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v107));
      }
      if (!CA::Shape::intersects(*(_QWORD *)(v266 + 8), (int32x2_t *)v279))
      {
        v114 = (CA::OGL::Context *)v265;
        v115 = v62;
LABEL_369:
        *(float *)&v247 = CA::OGL::ContentsGeometry::fill_debug((uint64_t)v298, (uint64_t)v114, a2, v115, 0, v108, v109);
        CA::OGL::ContentsGeometry::fill_debug((uint64_t)v284, (uint64_t)v114, a2, v263, 0, v247, v248);
        goto LABEL_29;
      }
      v110 = (CA::Render::Image *)v62;
      if ((_DWORD)v267 && *((_BYTE *)v62 + 12) == 51)
      {
        (*(void (**)(double *))(*(_QWORD *)v62 + 280))(v62);
        v110 = (CA::Render::Image *)v62;
      }
      if (v95 && *((_BYTE *)v263 + 12) == 51)
      {
        (*(void (**)(double *))(*(_QWORD *)v263 + 280))(v263);
        v110 = (CA::Render::Image *)v62;
      }
      v111 = *(_QWORD *)(a2 + 24);
      v112 = *(_DWORD *)(v111 + 36);
      if ((v112 & 0xFu) > 0xA)
        v113 = 1;
      else
        v113 = CA::OGL::texture_filter(CA::Render::ImageFilter)::filters[v112 & 0xF];
      v123 = v112 >> 4;
      if (v123 > 0xA)
        v124 = 1;
      else
        v124 = CA::OGL::texture_filter(CA::Render::ImageFilter)::filters[v123];
      v258 = v124;
      v125 = *(_QWORD *)(v111 + 128);
      if (v125)
        v126 = *(float *)(v125 + 288);
      else
        v126 = 0.0;
      v273 = v113;
      v272 = v113;
      if (v113 == 11)
      {
        v127 = v105;
        v128 = CA::OGL::Context::tile_cache_load((double *)v265, (uint64_t)v298, v110, &v273);
        v129 = (double *)CA::OGL::Context::tile_cache_load((double *)v265, (uint64_t)v284, (CA::Render::Image *)v263, &v272);
        v110 = v128;
        v105 = v127;
        v125 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 128);
      }
      else
      {
        v129 = v263;
      }
      v130 = *(float16x4_t *)(v266 + 32);
      if (v125)
      {
        v131 = vcvt_f16_f32(*(float32x4_t *)(v125 + 264));
        v132 = *(_BYTE *)(v125 + 320);
        v133 = v132 & 1;
        if ((v132 & 1) != 0)
        {
          v134 = 1;
          BYTE4(v315) = 1;
          BYTE4(v287) = 1;
        }
        else
        {
          v134 = 0;
        }
        v257 = (v132 & 1) == 0;
        if (*(_QWORD *)&v131 != 0x3C003C003C003C00)
          v130 = vcvt_f16_f32(vmulq_f32(vcvtq_f32_f16(v131), vcvtq_f32_f16(v130)));
      }
      else
      {
        v134 = 0;
        v133 = 0;
        v257 = 1;
      }
      v262 = (double *)v110;
      v263 = v129;
      if (!v110 || !v129)
      {
        LODWORD(v267) = v133;
        v144 = (float)((float)(*(float *)v261.f64 * 255.0) + 0.5);
        if (!v110)
          v144 = 255 - v144;
        LODWORD(v269) = v144;
        if (v110)
          v145 = (uint64_t)v110;
        else
          v145 = (uint64_t)v129;
        if (v110)
          v146 = v33;
        else
          v146 = v264;
        if (v110)
          v147 = v298;
        else
          v147 = v284;
        if (v110)
          v148 = &v273;
        else
          v148 = &v272;
        v149 = *v148;
        v150 = *(_QWORD *)(v265 + 16);
        if (*(unsigned __int8 *)(v150 + 480) >= 2u)
          *(_BYTE *)(v150 + 481) |= 1u;
        CA::OGL::prepare_color_program_cache(v268, a2, v145, (uint64_t)v146);
        v151 = (double *)*((unsigned int *)v147 + 77);
        v114 = (CA::OGL::Context *)v265;
        LODWORD(v268) = v149;
        v152 = (uint32x2_t **)CA::OGL::Context::bind_image(v265, 0, (uint32x2_t *)v145, v151, v149, v258, 0, (CA::OGL::ContentsGeometry *)v147, v126, (float32x4_t *)((char *)v147 + 276), 0);
        if (v152)
        {
          v153 = v152;
          _Q1 = vcvtq_f32_f16(v130);
          v155 = vcvt_f16_f32(vmulq_n_f32(_Q1, (float)v269));
          if ((*(_BYTE *)(v145 + 14) & 0x10) != 0)
          {
            _Q1.i32[0] = *(_DWORD *)(v145 + 60);
            _S2 = *(_DWORD *)(v145 + 64);
            __asm
            {
              FCVT            H1, S1
              FCVT            H2, S2
            }
            v157 = _Q1.i16[0];
            _Q1.i64[0] = *(_QWORD *)(v145 + 68);
            v158 = vmovl_u16((uint16x4_t)vcvt_f16_f32(_Q1)).u64[0];
            v159.i64[0] = v158;
            v159.i64[1] = HIDWORD(v158);
            v160.i64[0] = 0xFFFFLL;
            v160.i64[1] = 0xFFFFLL;
            v161 = (int64x2_t)vshlq_u64((uint64x2_t)vandq_s8(v159, v160), (uint64x2_t)xmmword_18474E1D0);
            v155 = vcvt_f16_f32(vmulq_f32(vcvtq_f32_f16((float16x4_t)(vorrq_s8((int8x16_t)vdupq_laneq_s64(v161, 1), (int8x16_t)v161).u64[0] | ((unint64_t)(unsigned __int16)_S2 << 16) | v157)), vcvtq_f32_f16(v155)));
          }
          v114 = (CA::OGL::Context *)v265;
          *(float16x4_t *)(*(_QWORD *)(v265 + 16) + 8) = v155;
          if (!v257)
          {
            if ((v267 & 1) == 0)
              __assert_rtn("set_swizzle", "ogl-layer.cpp", 2174, "swizzle == Render::kLayerContentsSwizzleAAAA");
            v162 = (*(uint64_t (**)(CA::OGL::Context *, uint64_t))(*(_QWORD *)v114 + 184))(v114, 28);
            v163 = *((_QWORD *)v114 + 2);
            if (v162)
            {
              v164 = CA::OGL::swizzle_to_image_function(CA::Render::LayerContentsSwizzle,CA::OGL::ImageFunction)::AAAA_functions[*(unsigned __int8 *)(v163 + 17)];
              if (!v164)
                v164 = 33;
            }
            else
            {
              v164 = 21;
            }
            *(_BYTE *)(v163 + 17) = v164;
          }
          CA::OGL::ContentsGeometry::fill_and_unbind((uint64_t)v147, (uint64_t)v114, v153, (double *)v268, v126);
        }
        *(_BYTE *)(*((_QWORD *)v114 + 2) + 481) &= ~1u;
LABEL_275:
        v115 = v262;
        goto LABEL_369;
      }
      if (((BYTE4(v285) | BYTE4(v313)) & 0x3F) != 0 && (*(_WORD *)(a2 + 40) & 0x3C0) != 0)
        goto LABEL_333;
      if (*(_QWORD *)&v130 != 0x3C003C003C003C00)
        goto LABEL_333;
      if (BYTE1(v315) | BYTE1(v287))
        goto LABEL_333;
      if (*((double *)v298 + 1) != *((double *)v284 + 1))
        goto LABEL_333;
      if (*(double *)&v298[1] != *(double *)&v284[1])
        goto LABEL_333;
      if (*((double *)&v298[1] + 1) != *((double *)&v284[1] + 1))
        goto LABEL_333;
      if (*(double *)&v298[2] != *(double *)&v284[2])
        goto LABEL_333;
      if (!CA::Transform::operator==((uint64_t)&v300 + 8, (uint64_t)&v284[6] + 8))
        goto LABEL_333;
      if (BYTE10(v324))
        goto LABEL_333;
      if (BYTE10(v296))
        goto LABEL_333;
      __asm { FMOV            V0.4S, #1.0 }
      if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(*(float32x4_t *)((char *)v262 + 60), _Q0)))) & 1) != 0|| (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(*(float32x4_t *)((char *)v263 + 60), _Q0)))) & 1) != 0|| v33[12] == 50|| v264[12] == 50)
      {
LABEL_333:
        i = 0uLL;
        CA::Shape::get_bounds(*(_QWORD *)(v266 + 8), (int *)&i);
        v222 = 0uLL;
        if ((v105 & 0x8000000000000000) == 0)
        {
          v223 = vorrq_s8((int8x16_t)vcltzq_f64(v260), (int8x16_t)vcgezq_f64(v260));
          if ((vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v223), 1), v223).u64[0] & 0x8000000000000000) == 0)
          {
            v224 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v259, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
            v222 = (__n128)vuzp1q_s32(v224, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v259, v260), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v224));
          }
        }
        v225 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *(int32x2_t *)&i.n128_i8[8]);
        v114 = (CA::OGL::Context *)v265;
        if ((vpmax_u32(v225, v225).u32[0] & 0x80000000) == 0)
        {
          v226 = (int32x2_t)vextq_s8((int8x16_t)v222, (int8x16_t)v222, 8uLL).u64[0];
          v227 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v226);
          if ((vpmax_u32(v227, v227).u32[0] & 0x80000000) != 0
            || (v228 = vadd_s32((int32x2_t)v222.n128_u64[0], v226),
                v222.n128_u64[0] = (unint64_t)vmax_s32((int32x2_t)i.n128_u64[0], (int32x2_t)v222.n128_u64[0]),
                v229 = vsub_s32(vmin_s32(vadd_s32((int32x2_t)i.n128_u64[0], *(int32x2_t *)&i.n128_i8[8]), v228), (int32x2_t)v222.n128_u64[0]), v230 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v229), (vpmax_u32(v230, v230).u32[0] & 0x80000000) != 0))
          {
            i.n128_u64[1] = 0;
          }
          else
          {
            *(int32x2_t *)&v222.n128_i8[8] = v229;
            i = v222;
          }
        }
        v231 = *(_QWORD *)(a2 + 24);
        if ((*(_BYTE *)(v231 + 36) & 0xE) != 0
          || (*(_BYTE *)(v231 + 41) & 0x80) != 0
          || (*((_BYTE *)v262 + 14) & 4) == 0
          && ((*(uint64_t (**)(__n128))(*(_QWORD *)v262 + 200))(v222)
           || ((*(uint64_t (**)(_QWORD, double *))(*(_QWORD *)v265 + 568))(v265, v262) & 1) != 0)
          || (*((_BYTE *)v263 + 14) & 4) == 0
          && ((*(uint64_t (**)(double *, __n128))(*(_QWORD *)v263 + 200))(v263, v222)
           || (*(unsigned int (**)(_QWORD, double *))(*(_QWORD *)v265 + 568))(v265, v263)))
        {
          v232 = 15;
        }
        else
        {
          v232 = 2063;
        }
        v233 = (*(uint64_t (**)(_QWORD, uint64_t, __n128 *, uint64_t, __n128))(*(_QWORD *)v265 + 656))(v265, 1, &i, v232, v222);
        if (v233)
        {
          v234 = (_DWORD *)v233;
          v256 = v134;
          LODWORD(v267) = *(_DWORD *)(v233 + 68);
          *((_QWORD *)&v280 + 1) = 0x3C003C003C003C00;
          v281 = 0uLL;
          v282 = 0;
          v283 = 0;
          *(_OWORD *)&v279[8] = *(_OWORD *)(v266 + 8);
          v235 = *(_QWORD *)(v266 + 24);
          *(_QWORD *)v279 = 0;
          *(_QWORD *)&v280 = v235;
          LODWORD(v283) = *(_DWORD *)(v266 + 64);
          v236 = *(_WORD *)(v266 + 68) & 0x500;
          v277 = 0uLL;
          v278 = 0uLL;
          v276 = 0uLL;
          CA::Shape::operator=((uint64_t)&v276, &i);
          *(_QWORD *)&v279[8] = &v276;
          v114 = (CA::OGL::Context *)v265;
          WORD2(v283) = v236 | 0xC;
          *(_QWORD *)v279 = CA::OGL::Context::set_gstate(v265, (uint64_t)v279);
          v269 = v234;
          CA::OGL::Context::push_surface(v265, (uint64_t)v234, 1u, 32, 0);
          v237 = v268;
          CA::OGL::prepare_color_program_cache(v268, a2, (uint64_t)v262, (uint64_t)v33);
          v238 = (uint32x2_t **)CA::OGL::Context::bind_image(v265, 0, (uint32x2_t *)v262, (double *)DWORD1(v313), v273, v258, 0, (CA::OGL::ContentsGeometry *)v298, v126, (float32x4_t *)((char *)&v311 + 4), 0);
          if (v238)
          {
            v239 = v238;
            *(float16x4_t *)(*(_QWORD *)(v265 + 16) + 8) = vcvt_f16_f32(vmulq_n_f32(*(float32x4_t *)((char *)v262 + 60), *(float *)v261.f64));
            if (!v257)
              CA::OGL::set_swizzle(v114, 0, v256);
            CA::OGL::ContentsGeometry::fill_and_unbind((uint64_t)v298, (uint64_t)v114, v239, (double *)v273, v126);
          }
          CA::OGL::prepare_color_program_cache(v237, a2, (uint64_t)v263, (uint64_t)v264);
          v240 = (uint32x2_t **)CA::OGL::Context::bind_image((uint64_t)v114, 0, (uint32x2_t *)v263, (double *)DWORD1(v285), v272, v258, 0, (CA::OGL::ContentsGeometry *)v284, v126, (float32x4_t *)((char *)&v284[17] + 4), 0);
          if (v240)
          {
            v241 = v240;
            *(float16x4_t *)(*((_QWORD *)v114 + 2) + 8) = vcvt_f16_f32(vmulq_n_f32(*(float32x4_t *)((char *)v263 + 60), 1.0 - *(float *)v261.f64));
            if (!v257)
              CA::OGL::set_swizzle(v114, 0, v256);
            *(_BYTE *)(*((_QWORD *)v114 + 2) + 481) |= 1u;
            CA::OGL::ContentsGeometry::fill_and_unbind((uint64_t)v284, (uint64_t)v114, v241, (double *)v272, v126);
            *(_BYTE *)(*((_QWORD *)v114 + 2) + 481) &= ~1u;
          }
          CA::OGL::Context::pop_surface(v114);
          CA::OGL::Context::set_gstate((uint64_t)v114, **((_QWORD **)v114 + 29));
          if (*(_QWORD *)&v130 == 0x3C003C003C003C00)
          {
            v242 = 1;
          }
          else
          {
            *(float16x4_t *)(*((_QWORD *)v114 + 2) + 8) = v130;
            v242 = 3;
          }
          v244 = *((_QWORD *)v114 + 2);
          if (*(unsigned __int8 *)(v244 + 480) >= 2u)
            *(_BYTE *)(v244 + 481) |= 1u;
          v245 = *(CA::Shape **)(v266 + 8);
          v270[0] = 0;
          v270[1] = 0;
          v246 = v269;
          CA::OGL::emit_combine((uint64_t)v114, v242, v269, 0, v245, (unsigned int *)v270);
          *(_BYTE *)(*((_QWORD *)v114 + 2) + 481) &= ~1u;
          CA::OGL::Context::release_surface((uint64_t)v114, (uint64_t)v246);
          if ((v267 & 0x800) != 0)
            v243 = 8388736;
          else
            v243 = 2155872384;
        }
        else
        {
          v243 = 2155872384;
        }
        v115 = v262;
        if (!byte_1ECDC6A61)
          goto LABEL_369;
        *(_QWORD *)v279 = (char *)v298 + 8;
        *(_QWORD *)&v279[8] = (char *)&v300 + 8;
        *(_QWORD *)&v279[16] = *(_QWORD *)((char *)&v313 + 4);
        v280 = 0uLL;
        *(_QWORD *)&v281 = (char *)&v298[2] + 8;
        CA::OGL::fill_color_rect((uint64_t)v114, (uint64_t)v279, (double *)v243, v262, *(double *)((char *)&v313 + 4), v109);
        goto LABEL_275;
      }
      v253 = v105;
      v256 = v134;
      v267 = v12;
      v136 = v265;
      *(_BYTE *)(*(_QWORD *)(v265 + 16) + 16) = 7;
      CA::OGL::prepare_color_program_cache(v268, a2, (uint64_t)v262, (uint64_t)v33);
      v255 = (const CA::Transform *)((char *)&v311 + 4);
      v137 = CA::OGL::Context::bind_image(v136, 0, (uint32x2_t *)v262, (double *)DWORD1(v313), v273, v258, 0, (CA::OGL::ContentsGeometry *)v298, v126, (float32x4_t *)((char *)&v311 + 4), 0);
      CA::OGL::prepare_color_program_cache(v268, a2, (uint64_t)v263, (uint64_t)v264);
      v254 = CA::OGL::Context::bind_image(v265, 1, (uint32x2_t *)v263, (double *)DWORD1(v285), v272, v258, 0, (CA::OGL::ContentsGeometry *)v284, v126, (float32x4_t *)((char *)&v284[17] + 4), 0);
      v138 = v137;
      if (v137 && v254)
      {
        if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v265 + 984))(v265) & 1) != 0)
        {
          _D0 = *(int16x4_t *)&v261.f64[0];
          __asm { FCVT            H0, S0 }
          *(int16x4_t *)(*(_QWORD *)(v265 + 16) + 8) = vdup_lane_s16(_D0, 0);
          if (!v257)
          {
            CA::OGL::set_swizzle((_QWORD *)v265, 0, v256);
            CA::OGL::set_swizzle((_QWORD *)v265, 1u, v256);
          }
          v140 = *(_QWORD *)(v265 + 16);
          v141 = *(unsigned __int8 *)(v140 + 480);
          if (v141 >= 2
            && (v141 != 3
             || !(*((_DWORD *)v262 + 3) & 0x1000 | WORD2(v313) & 0x200)
             || !(*((_DWORD *)v263 + 3) & 0x1000 | WORD2(v285) & 0x200)))
          {
            *(_BYTE *)(v140 + 481) |= 1u;
          }
          v276 = *(_OWORD *)((char *)v298 + 8);
          v277 = vaddq_f64(*(float64x2_t *)((char *)&v298[1] + 8), *(float64x2_t *)((char *)v298 + 8));
          v281 = 0u;
          v142 = *(_QWORD *)(*(_QWORD *)(v265 + 232) + 8);
          *(_QWORD *)v279 = v265;
          *(_QWORD *)&v279[8] = v142;
          v280 = 0u;
          *(_QWORD *)&v279[16] = 0;
          BYTE8(v280) = ((BYTE8(v309) >> 4) & 1) == 0;
          BYTE9(v280) = 1;
          CA::OGL::Context::ClippedArray::start((CA::OGL::Context::ClippedArray *)v279);
          for (i = 0uLL;
                CA::OGL::Context::ClippedArray::next_rect((CA::OGL::Context::ClippedArray *)v279, (int32x2_t *)&i);
                CA::OGL::emit_quad((CA::OGL *)v265, (CA::OGL::Context *)&v276, i.n128_f64, (const CA::Bounds *)((char *)&v300 + 8), v255, (float *)&v284[17] + 1, v143))
          {
            ;
          }
          v114 = (CA::OGL::Context *)v265;
          *(_BYTE *)(*(_QWORD *)(v265 + 16) + 481) &= ~1u;
          v249 = *((_QWORD *)v114 + 2);
          *(_QWORD *)(v249 + 24) = 0;
          *(_QWORD *)(v249 + 32) = 0;
          (*(void (**)(CA::OGL::Context *, _OWORD *, uint64_t))(*(_QWORD *)v114 + 520))(v114, v254, 1);
          (*(void (**)(CA::OGL::Context *, _OWORD *, _QWORD))(*(_QWORD *)v114 + 520))(v114, v138, 0);
          *(_BYTE *)(*((_QWORD *)v114 + 2) + 16) = 0;
          v115 = v262;
          v12 = v267;
          v18 = v269;
          goto LABEL_369;
        }
      }
      else if (!v254)
      {
LABEL_330:
        if (v137)
          (*(void (**)(_QWORD, _OWORD *, _QWORD))(*(_QWORD *)v265 + 520))(v265, v137, 0);
        *(_BYTE *)(*(_QWORD *)(v265 + 16) + 16) = 0;
        v12 = v267;
        v18 = v269;
        v134 = v256;
        v105 = v253;
        goto LABEL_333;
      }
      (*(void (**)(_QWORD, _OWORD *, uint64_t))(*(_QWORD *)v265 + 520))(v265, v254, 1);
      goto LABEL_330;
    }
LABEL_27:
    if (!v13)
      goto LABEL_29;
    goto LABEL_28;
  }
  v267 = v12;
  v268 = v8;
  v28 = (CA::Render::Image *)v27;
  if ((*(unsigned int (**)(CA::OGL::Context *))(*(_QWORD *)v9 + 88))(v9))
  {
    v29 = (uint64_t)v28;
    v30 = (*(uint64_t (**)(CA::Render::Image *))(*(_QWORD *)v28 + 240))(v28);
    v31 = (*(uint64_t (**)(CA::OGL::Context *))(*(_QWORD *)v9 + 96))(v9) & v30;
    LODWORD(v266) = v31 == (*(uint64_t (**)(CA::Render::Image *))(*(_QWORD *)v28 + 240))(v28);
  }
  else
  {
    LODWORD(v266) = 1;
    v29 = (uint64_t)v28;
  }
  v35 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 96);
  CA::OGL::prepare_color_program_cache(v268, a2, v29, v35);
  v325 = 0;
  v324 = 0u;
  v323 = 0u;
  v322 = 0u;
  v321 = 0u;
  v320 = 0u;
  v319 = 0u;
  v318 = 0u;
  v317 = 0u;
  v316 = 0u;
  v315 = 0u;
  v314 = 0u;
  v313 = 0u;
  v312 = 0u;
  v311 = 0u;
  v310 = 0u;
  v309 = 0u;
  v308 = 0u;
  v307 = 0u;
  v306 = 0u;
  v305 = 0u;
  v304 = 0u;
  v303 = 0u;
  v302 = 0u;
  v301 = 0u;
  v300 = 0u;
  v299 = 0u;
  memset(v298, 0, sizeof(v298));
  v36 = CA::OGL::ContentsGeometry::ContentsGeometry((uint64_t)v298, a2, (uint64_t)v269, v29, v26, (uint64_t)v9);
  if ((_BYTE)v311)
  {
    v40 = *(_QWORD *)(a2 + 24);
    v41 = *(_DWORD *)(v40 + 36);
    v12 = v267;
    if ((v41 & 0xFu) > 0xA)
      v42 = 1;
    else
      v42 = CA::OGL::texture_filter(CA::Render::ImageFilter)::filters[v41 & 0xF];
    LOBYTE(v276) = v42;
    v44 = v41 >> 4;
    if (v44 > 0xA)
      v45 = 1;
    else
      v45 = CA::OGL::texture_filter(CA::Render::ImageFilter)::filters[v44];
    LODWORD(v264) = v45;
    v46 = *(_QWORD *)(v40 + 128);
    if (v46)
      v47 = *(float *)(v46 + 288);
    else
      v47 = 0.0;
    if (v42 == 11)
    {
      v36 = (uint64_t)CA::OGL::Context::tile_cache_load((double *)v9, (uint64_t)v298, v28, &v276);
      v48 = v36;
      v46 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 128);
    }
    else
    {
      v48 = (uint64_t)v28;
    }
    v18 = v269;
    if (v46)
      _Q0 = *(float32x4_t *)(v46 + 264);
    else
      __asm { FMOV            V0.4S, #1.0 }
    *(_QWORD *)&v39 = *((_QWORD *)v269 + 4);
    *(float16x4_t *)_Q0.f32 = vcvt_f16_f32(_Q0);
    if (_Q0.i64[0] != 0x3C003C003C003C00)
    {
      a6 = vcvtq_f32_f16(*(float16x4_t *)&v39);
      _Q0 = vmulq_f32(vcvtq_f32_f16(*(float16x4_t *)_Q0.f32), a6);
      *(float16x4_t *)&v39 = vcvt_f16_f32(_Q0);
    }
    v53 = *(_DWORD *)(v48 + 12);
    if ((v53 & 0x100000) != 0)
    {
      _Q0.i32[0] = *(_DWORD *)(v48 + 60);
      _S1 = *(_DWORD *)(v48 + 64);
      __asm
      {
        FCVT            H0, S0
        FCVT            H1, S1
      }
      v55 = _Q0.i16[0];
      _Q0.i64[0] = *(_QWORD *)(v48 + 68);
      v56 = vmovl_u16((uint16x4_t)vcvt_f16_f32(_Q0)).u64[0];
      v57.i64[0] = v56;
      v57.i64[1] = HIDWORD(v56);
      v58.i64[0] = 0xFFFFLL;
      v58.i64[1] = 0xFFFFLL;
      v59 = (int64x2_t)vshlq_u64((uint64x2_t)vandq_s8(v57, v58), (uint64x2_t)xmmword_18474E1D0);
      a7 = vdupq_laneq_s64(v59, 1);
      a6 = vcvtq_f32_f16((float16x4_t)(vorrq_s8((int8x16_t)a7, (int8x16_t)v59).u64[0] | ((unint64_t)(unsigned __int16)_S1 << 16) | v55));
      _Q0 = vmulq_f32(a6, vcvtq_f32_f16(*(float16x4_t *)&v39));
      *(float16x4_t *)&v39 = vcvt_f16_f32(_Q0);
    }
    _H0 = WORD3(v39);
    __asm { FCVT            S0, H0 }
    a6.i32[0] = 1.0;
    if (_Q0.f32[0] != 1.0 || (*(_BYTE *)(a2 + 35) & 0x10) != 0)
      goto LABEL_74;
    if ((v53 & 0x1000) != 0)
    {
      if (!(_DWORD)v266)
      {
LABEL_74:
        v64 = 0;
        goto LABEL_75;
      }
      v61 = BYTE4(v313);
    }
    else
    {
      v61 = BYTE4(v313);
      if ((v266 & (DWORD1(v313) >> 9)) != 1)
        goto LABEL_74;
    }
    if ((v61 & 9) != 0)
    {
      v64 = 1;
      if ((*(_WORD *)(a2 + 40) & 0x3C0) == 0 && !BYTE10(v324))
      {
        v65 = 1;
        v66 = 1;
        if (v13)
        {
LABEL_76:
          v67 = v48;
          v265 = v39;
          v36 = (uint64_t)CA::OGL::render_background(v268, a2, *(double *)_Q0.i64, *(double *)a6.i64, (float32x4_t)a7);
          *(_QWORD *)&v39 = v265;
          v48 = v67;
          v18 = v269;
          v66 = v65;
        }
LABEL_77:
        if ((*(_BYTE *)(a2 + 35) & 0x10) != 0)
        {
          MEMORY[0x1E0C80A78](v36);
          LODWORD(v252) = 0;
          v250 = 0;
          v251 = 0;
          LODWORD(v250) = v69[2].i32[0];
          BYTE4(v250) = v69[1].i8[5] & 1;
          v70 = v69[3];
          LODWORD(v252) = v69[4].i32[0];
          v68 = *((_QWORD *)v9 + 2);
          *(_QWORD *)(v68 + 360) = &v250;
          v71.i32[0] = bswap32(v69[2].u32[1]);
          v71.i32[1] = (unsigned __int32)v71.i32[0] >> 8;
          v251 = vrev64_s32(v70);
          v71.i32[2] = HIWORD(v71.i32[0]);
          v72.i64[0] = 0xFF000000FFLL;
          v72.i64[1] = 0xFF000000FFLL;
          v73 = (int32x4_t)vandq_s8(v71, v72);
          v73.i32[3] = vshrq_n_u32((uint32x4_t)vdupq_n_s32(*(unsigned int *)&v71), 0x18uLL).i32[3];
          a6 = vcvtq_f32_f16(*(float16x4_t *)&v39);
          *(float16x4_t *)&v39 = vcvt_f16_f32(vmulq_f32(vcvtq_f32_f16(vcvt_f16_f32(vmulq_f32(vcvtq_f32_s32(v73), (float32x4_t)vdupq_n_s32(0x3B808081u)))), a6));
        }
        else
        {
          v68 = *((_QWORD *)v9 + 2);
        }
        LODWORD(v43) = v266;
        v74 = *(unsigned __int8 *)(v68 + 480);
        if (v74 >= 2 && (v74 != 3 || (v66 & 1) == 0))
        {
          *(_BYTE *)(v68 + 481) |= 1u;
          v68 = *((_QWORD *)v9 + 2);
          if (v64)
          {
            v75 = *(unsigned __int8 *)(v68 + 480);
            if (v75 <= 3 && v75 != 2)
              DWORD1(v313) |= 0x8000u;
          }
        }
        *(_QWORD *)(v68 + 8) = v39;
        v76 = *(_QWORD *)(a2 + 24);
        v77 = *(_QWORD *)(v76 + 128);
        if (v77)
          v78 = *(_BYTE *)(v77 + 320) & 1;
        else
          v78 = 0;
        LODWORD(v265) = v66;
        if (!(_DWORD)v43)
        {
          v82 = (double *)v48;
          goto LABEL_112;
        }
        if (*(_BYTE *)(v48 + 12) != 51 || (*(_BYTE *)(v76 + 43) & 2) == 0 || v78)
        {
          v82 = (double *)v48;
          goto LABEL_98;
        }
        LODWORD(v263) = 0;
        if (*(CA::OGL::Context **)(v48 + 88) != v9 || (v81 = *(_QWORD *)(v48 + 80)) == 0)
        {
          v79 = v48;
          v80 = CA::OGL::Context::lookup_image_(v9, (CA::Render::Texture *)v48, 1);
          v48 = v79;
          v81 = v80;
        }
        v116 = (double *)v48;
        v117 = CA::OGL::detach_contents((uint64_t *)v268, a2, v48, v81, (uint64_t)v298, v276, (int)v264);
        v118 = *(uint64_t (**)(double *))(*(_QWORD *)v116 + 280);
        v262 = v116;
        v119 = v118(v116);
        if (!v35
          || !v119
          || *(_BYTE *)(v35 + 12) != 25
          || (v120 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 144)) == 0
          || !*(_QWORD *)(v120 + 24))
        {
          v122 = v265;
          if (v117)
            goto LABEL_174;
          v82 = v262;
          goto LABEL_176;
        }
        v121 = *((_QWORD *)v9 + 25);
        v122 = v265;
        if (v117)
        {
          ++*(_DWORD *)(v121 + 496);
LABEL_174:
          LODWORD(v43) = 1;
          v82 = v262;
          v18 = v269;
LABEL_290:
          *(_BYTE *)(*((_QWORD *)v9 + 2) + 481) &= ~1u;
          DWORD1(v313) &= ~0x8000u;
          *(float *)&v11 = CA::OGL::ContentsGeometry::fill_debug((uint64_t)v298, (uint64_t)v9, a2, v82, v122, v86, (int8x16_t)a6);
          v14 = 1;
          goto LABEL_291;
        }
        v178 = v262;
        v82 = (double *)*((_QWORD *)v262 + 20);
        v78 = (int)v263;
        if (v82)
        {
LABEL_98:
          if ((WORD2(v313) & 0x400) != 0)
          {
            v18 = v269;
          }
          else
          {
            v84 = *(_QWORD *)(*((_QWORD *)v9 + 2) + 8) == 0x3C003C003C003C00 && BYTE1(v315) == 0 && BYTE2(v315) == 0;
            v18 = v269;
            if (v84 && ((BYTE4(v313) & 9) == 0 || (*(_WORD *)(a2 + 40) & 0x3C0) == 0))
            {
              LODWORD(v263) = v78;
              v85 = (CA::Render::TiledTexture *)(*(uint64_t (**)(double *))(*(_QWORD *)v82 + 200))(v82);
              if (v85)
              {
                CA::OGL::draw_tiled_image((uint64_t)v9, v85, v276, (char)v264, (CA::OGL::ContentsGeometry *)v298, 0, v47);
LABEL_132:
                LODWORD(v43) = 0;
LABEL_289:
                v122 = v265;
                goto LABEL_290;
              }
              if ((*(unsigned int (**)(CA::OGL::Context *, double *))(*(_QWORD *)v9 + 568))(v9, v82))
              {
                LODWORD(v284[0]) = 0;
                *(_DWORD *)v279 = 0;
                if (((*(uint64_t (**)(double *, _OWORD *, _BYTE *))(*(_QWORD *)v82 + 216))(v82, v284, v279) & 1) != 0)
                {
                  v172 = (*(uint64_t (**)(double *))(*(_QWORD *)v82 + 104))(v82);
                  v173 = (*(uint64_t (**)(CA::OGL::Context *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v9 + 200))(v9, v172, LODWORD(v284[0]), *(unsigned int *)v279);
                  v174 = (CA::Render::TiledTexture *)(*(uint64_t (**)(double *, uint64_t, _QWORD))(*(_QWORD *)v82 + 208))(v82, v173, (DWORD1(v313) >> 11) & 1);
                  if (v174)
                  {
                    v175 = (unsigned int *)v174;
                    CA::OGL::draw_tiled_image((uint64_t)v9, v174, v276, (char)v264, (CA::OGL::ContentsGeometry *)v298, 0, v47);
                    v176 = v175 + 2;
                    do
                      v177 = __ldaxr(v176);
                    while (__stlxr(v177 - 1, v176));
                    if (v177 == 1)
                      (*(void (**)(unsigned int *))(*(_QWORD *)v175 + 16))(v175);
                    goto LABEL_132;
                  }
                }
              }
              DWORD1(v313) |= 0x1000u;
              v78 = (int)v263;
            }
          }
LABEL_112:
          v87 = 0;
          if (BYTE2(v315) && !BYTE1(v315))
          {
            v88 = v78;
            v87 = (*(uint64_t (**)(CA::OGL::Context *, double *, uint64_t))(*(_QWORD *)v9 + 608))(v9, v82, 1);
            v78 = v88;
          }
          if (v78)
          {
            BYTE4(v315) = 1;
            if ((_DWORD)v43)
            {
LABEL_117:
              v89 = *(_QWORD *)(a2 + 24);
              if (v89 && (v89 = *(_QWORD *)(v89 + 120)) != 0)
              {
                v90 = v78;
                v91 = *(_DWORD *)(v89 + 24);
                v89 += 28;
                if (!v91)
                  v89 = 0;
              }
              else
              {
                v90 = v78;
              }
              v43 = (uint32x2_t **)CA::OGL::Context::bind_image((uint64_t)v9, 0, (uint32x2_t *)v82, (double *)DWORD1(v313), v276, (int)v264, v87, (CA::OGL::ContentsGeometry *)v298, v47, (float32x4_t *)((char *)&v311 + 4), v89);
              if (!v43)
                goto LABEL_289;
              if (v90)
              {
                v92 = (*(uint64_t (**)(CA::OGL::Context *, uint64_t))(*(_QWORD *)v9 + 184))(v9, 28);
                v93 = *((_QWORD *)v9 + 2);
                if (v92)
                {
                  v94 = CA::OGL::swizzle_to_image_function(CA::Render::LayerContentsSwizzle,CA::OGL::ImageFunction)::AAAA_functions[*(unsigned __int8 *)(v93 + 17)];
                  if (!v94)
                    v94 = 33;
                }
                else
                {
                  v94 = 21;
                }
                *(_BYTE *)(v93 + 17) = v94;
              }
              CA::OGL::ContentsGeometry::fill_and_unbind((uint64_t)v298, (uint64_t)v9, v43, (double *)v276, v47);
              goto LABEL_132;
            }
          }
          else if ((_DWORD)v43)
          {
            goto LABEL_117;
          }
          *(_QWORD *)&v284[0] = (char *)v298 + 8;
          *((_QWORD *)&v284[0] + 1) = (char *)&v300 + 8;
          v284[1] = *(unint64_t *)((char *)&v313 + 4);
          *(_QWORD *)&v284[2] = 0;
          *((_QWORD *)&v284[2] + 1) = (char *)&v298[2] + 8;
          CA::OGL::fill_color_rect((uint64_t)v9, (uint64_t)v284, (double *)0xFF, v38, *(double *)((char *)&v313 + 4), (int8x16_t)a6);
          goto LABEL_289;
        }
        memset(v284, 0, 144);
        v179 = (unsigned int *)*((_QWORD *)v262 + 21);
        if (v179)
        {
          v180 = v179 + 4;
          do
            v181 = __ldaxr(v180);
          while (__stlxr(v181 + 1, v180));
          v182 = *((_OWORD *)v178 + 11);
          *(_OWORD *)((char *)&v284[1] + 8) = *((_OWORD *)v178 + 12);
          v183 = *((_OWORD *)v178 + 14);
          *(_OWORD *)((char *)&v284[2] + 8) = *((_OWORD *)v178 + 13);
          *(_OWORD *)((char *)v284 + 8) = v182;
          v184 = *((_OWORD *)v178 + 16);
          *(_OWORD *)((char *)&v284[4] + 8) = *((_OWORD *)v178 + 15);
          *(_OWORD *)((char *)&v284[3] + 8) = v183;
          v185 = *((_OWORD *)v178 + 17);
          *(_OWORD *)((char *)&v284[7] + 8) = *((_OWORD *)v178 + 18);
          *(_OWORD *)((char *)&v284[6] + 8) = v185;
          *(_QWORD *)&v284[0] = v179;
          BYTE8(v284[8]) = *((_BYTE *)v178 + 304);
          *(_OWORD *)((char *)&v284[5] + 8) = v184;
          LODWORD(v261.f64[0]) = (*(uint64_t (**)(unsigned int *, uint64_t))(*(_QWORD *)v179 + 56))(v179, v121);
          v186 = BYTE8(v284[8]);
          v187 = (*(uint64_t (**)(double *))(*(_QWORD *)v178 + 256))(v178);
          v188 = (CA::Render::Surface *)(*(uint64_t (**)(unsigned int *, double *, uint64_t, char *, _QWORD, _QWORD, uint64_t, uint64_t, float, __int16))(*(_QWORD *)v179 + 24))(v179, v178, v121, (char *)v284 + 8, LODWORD(v261.f64[0]), 0, v186, v187, 1.0, 1);
          if (v188)
          {
            v189 = (unsigned int *)v188;
            CA::Render::Surface::set_tonemapped_surface((CA::Render::Surface *)v262, v188);
            v190 = v189 + 2;
            do
            {
              v191 = __ldaxr(v190);
              v192 = v191 - 1;
            }
            while (__stlxr(v192, v190));
            LODWORD(v43) = v266;
            v12 = v267;
            if (!v192)
              (*(void (**)(unsigned int *))(*(_QWORD *)v189 + 16))(v189);
LABEL_315:
            v214 = *(_QWORD *)&v284[0];
            v215 = v262;
            if (*(_QWORD *)&v284[0])
            {
              v216 = (unsigned int *)(*(_QWORD *)&v284[0] + 16);
              do
              {
                v217 = __ldaxr(v216);
                v218 = v217 - 1;
              }
              while (__stlxr(v218, v216));
              if (!v218)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v214 + 8))(v214);
                v215 = v262;
              }
            }
            v82 = (double *)*((_QWORD *)v215 + 20);
            v78 = (int)v263;
            if (!v82)
            {
              if (x_log_hook_p())
              {
                v82 = v262;
                x_log_();
              }
              else
              {
                v219 = x_log_category_ogl;
                if (os_log_type_enabled((os_log_t)x_log_category_ogl, OS_LOG_TYPE_ERROR))
                {
                  v220 = v262;
                  v221 = *((_DWORD *)v262 + 26);
                  LODWORD(v284[0]) = 67109120;
                  DWORD1(v284[0]) = v221;
                  _os_log_impl(&dword_184457000, v219, OS_LOG_TYPE_ERROR, "No valid tonemapped surface available for 0x%x", (uint8_t *)v284, 8u);
                  v82 = v220;
                }
                else
                {
                  v82 = v262;
                }
              }
              LODWORD(v43) = v266;
              v12 = v267;
LABEL_176:
              v78 = (int)v263;
              goto LABEL_98;
            }
            goto LABEL_98;
          }
          if (x_log_hook_p())
          {
LABEL_286:
            x_log_();
            LODWORD(v43) = v266;
            v12 = v267;
            goto LABEL_315;
          }
          v211 = x_log_category_ogl;
          v212 = os_log_type_enabled((os_log_t)x_log_category_ogl, OS_LOG_TYPE_ERROR);
          LODWORD(v43) = v266;
          v12 = v267;
          if (!v212)
            goto LABEL_315;
          v213 = *((_DWORD *)v262 + 26);
          *(_DWORD *)v279 = 67109120;
          *(_DWORD *)&v279[4] = v213;
          v208 = "Failed to tonemap surface 0x%x";
          v209 = v211;
          v210 = 8;
        }
        else
        {
          v196 = *((_OWORD *)v262 + 15);
          *(_OWORD *)((char *)&v284[5] + 8) = *((_OWORD *)v262 + 16);
          v197 = *((_OWORD *)v262 + 18);
          *(_OWORD *)((char *)&v284[6] + 8) = *((_OWORD *)v262 + 17);
          *(_OWORD *)((char *)&v284[7] + 8) = v197;
          v198 = *((_OWORD *)v262 + 11);
          *(_OWORD *)((char *)&v284[1] + 8) = *((_OWORD *)v262 + 12);
          v199 = *((_OWORD *)v262 + 14);
          *(_OWORD *)((char *)&v284[2] + 8) = *((_OWORD *)v262 + 13);
          *(_OWORD *)((char *)&v284[3] + 8) = v199;
          *(_OWORD *)((char *)&v284[4] + 8) = v196;
          BYTE8(v284[8]) = *((_BYTE *)v262 + 304);
          *(_OWORD *)((char *)v284 + 8) = v198;
          if (x_log_hook_p())
            goto LABEL_286;
          v206 = x_log_category_ogl;
          v207 = os_log_type_enabled((os_log_t)x_log_category_ogl, OS_LOG_TYPE_ERROR);
          LODWORD(v43) = v266;
          v12 = v267;
          if (!v207)
            goto LABEL_315;
          *(_WORD *)v279 = 0;
          v208 = "Could not tonemap surface because of invalid configuration";
          v209 = v206;
          v210 = 2;
        }
        _os_log_impl(&dword_184457000, v209, OS_LOG_TYPE_ERROR, v208, v279, v210);
        goto LABEL_315;
      }
LABEL_75:
      v65 = 0;
      v66 = 0;
      DWORD1(v313) |= 0x100u;
      if (!v13)
        goto LABEL_77;
      goto LABEL_76;
    }
    if (BYTE10(v324))
    {
      v64 = 1;
      goto LABEL_75;
    }
    if (!v13)
    {
      v64 = 1;
      v66 = 1;
      goto LABEL_77;
    }
    v265 = v39;
    v165 = v48;
    *(_QWORD *)v279 = 0;
    *(_QWORD *)&v279[8] = 0;
    CA::Bounds::set_exterior((int32x4_t *)v279, v37, *(float64x2_t *)((char *)&v298[2] + 8), *(float64x2_t *)((char *)&v298[3] + 8));
    v166 = (CA::Shape *)*((_QWORD *)v269 + 1);
    v36 = CA::Bounds::contains((CA::Bounds *)v279, (uint64_t)v166);
    if ((v36 & 1) != 0)
    {
LABEL_282:
      v64 = 1;
      v66 = 1;
      v48 = v165;
      v18 = v269;
      *(_QWORD *)&v39 = v265;
      goto LABEL_77;
    }
    v167 = CA::Shape::subtract(v166, (const CA::Bounds *)v279);
    v171 = (CA::Shape *)v167;
    if ((v167 & 1) != 0)
    {
      if (v167 != 1)
        goto LABEL_278;
    }
    else if (*(_DWORD *)(v167 + 4) == 12)
    {
      goto LABEL_278;
    }
    if ((*((_BYTE *)v9 + 416) & 0x10) != 0)
    {
      CA::OGL::render_background(v268, a2, v168, v169, v170);
      goto LABEL_281;
    }
LABEL_278:
    memset(v284, 0, 72);
    CA::OGL::copy_gstate((uint64_t)v284, (uint64_t)v269);
    *((_QWORD *)&v284[0] + 1) = v171;
    *(_QWORD *)&v284[0] = CA::OGL::Context::set_gstate((uint64_t)v9, (uint64_t)v284);
    CA::OGL::render_background(v268, a2, v193, v194, v195);
    CA::OGL::Context::set_gstate((uint64_t)v9, **((_QWORD **)v9 + 29));
LABEL_281:
    CA::Shape::unref(v171);
    goto LABEL_282;
  }
  LODWORD(v43) = 0;
  v12 = v267;
  v18 = v269;
LABEL_291:
  if (v35 && *(_BYTE *)(v35 + 12) == 25)
  {
    v200 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v35 + 16) + 24) + 8);
    v201 = atomic_load(v200);
    if ((v201 & 0x800000000000000) != 0)
      v202 = 0;
    else
      v202 = (int)v43;
    if (v202 == 1)
    {
      do
        v203 = __ldaxr(v200);
      while (__stlxr(v203 | 0x800000000000000, v200));
    }
    else
    {
      if ((v201 & 0x800000000000000) != 0)
        v204 = (char)v43;
      else
        v204 = 1;
      if ((v204 & 1) == 0)
      {
        do
          v205 = __ldaxr(v200);
        while (__stlxr(v205 & 0xF7FFFFFFFFFFFFFFLL, v200));
      }
    }
    if ((_DWORD)v43)
      CA::Render::ImageQueue::tag_detached_samples(*(_QWORD *)(*(_QWORD *)(v35 + 16) + 24), *(_DWORD *)(v35 + 172));
    if (!*((_DWORD *)v268[1] + 66))
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v35 + 16) + 24) + 68) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v35 + 16)
                                                                                            + 24)
                                                                                + 64);
  }
  *(_QWORD *)(*((_QWORD *)v9 + 2) + 360) = 0;
  v8 = v268;
  if (!v14)
LABEL_28:
    CA::OGL::render_background(v8, a2, v11, *(double *)a6.i64, (float32x4_t)a7);
LABEL_29:
  if (v18 != (_OWORD *)v10)
  {
    CA::OGL::Context::set_gstate((uint64_t)v9, **((_QWORD **)v9 + 29));
    CA::Shape::unref(*((CA::Shape **)v18 + 1));
  }
  *(_QWORD *)(v10 + 8) = v12;
}

uint64_t CA::Render::Texture::protection_options(CA::Render::Texture *this)
{
  return 0;
}

uint64_t CA::OGL::MetalContext::protection_options(CA::OGL::MetalContext *this)
{
  return *((_QWORD *)this + 380);
}

uint64_t CA::OGL::MetalContext::get(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v4;
  BOOL v5;

  result = 0x10000;
  switch(a2)
  {
    case 0:
    case 8:
      result = 0;
      break;
    case 1:
    case 2:
      return result;
    case 3:
      result = *(unsigned int *)(a1 + 2640);
      break;
    case 4:
      result = *(unsigned int *)(a1 + 2656);
      break;
    case 5:
      v4 = *(_QWORD *)(a1 + 2664);
      if (v4)
        result = v4;
      else
        result = 0x2000;
      break;
    case 6:
      result = *(unsigned int *)(a1 + 2672);
      break;
    case 7:
      result = *(unsigned int *)(a1 + 2648);
      break;
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 16:
    case 18:
    case 19:
    case 20:
    case 22:
    case 23:
    case 24:
    case 25:
    case 29:
    case 30:
    case 31:
    case 37:
    case 39:
      result = 1;
      break;
    case 15:
      result = 27;
      break;
    case 17:
      result = (*(_DWORD *)(a1 + 2676) >> 10) & 1;
      break;
    case 21:
      result = (*(_DWORD *)(a1 + 2676) >> 14) & 1;
      break;
    case 26:
      result = (*(_DWORD *)(a1 + 2676) >> 19) & 1;
      break;
    case 27:
      result = (*(unsigned __int16 *)(a1 + 3280) >> 3) & 1;
      break;
    case 32:
      result = (*(unsigned __int16 *)(a1 + 3280) >> 4) & 1;
      break;
    case 33:
      v5 = BYTE1(dword_1ECDC6B10) == 0;
      goto LABEL_21;
    case 34:
      result = (BYTE7(xmmword_1ECDC6AD0) == 0) & (*(unsigned __int8 *)(a1 + 2678) >> 5);
      break;
    case 35:
      result = (*(_DWORD *)(a1 + 2676) >> 22) & 1;
      break;
    case 36:
      result = (BYTE8(xmmword_1ECDC6AD0) == 0) & (*(unsigned __int8 *)(a1 + 2677) >> 4);
      break;
    case 38:
      if ((~*(_DWORD *)(a1 + 2676) & 0xA00000) != 0)
        result = 0;
      else
        result = BYTE7(xmmword_1ECDC6AD0) ^ 1u;
      break;
    case 40:
      result = (*(_DWORD *)(a1 + 2676) >> 25) & 1;
      break;
    default:
      v5 = a2 == 28 || a2 == 16;
LABEL_21:
      result = v5;
      break;
  }
  return result;
}

void CA::Render::Updater::prepare_layer_contents(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  CA::Shape **v12;
  _BOOL8 v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  const CA::Shape *v18;
  __int128 v19;
  double v20;
  double v21;
  double v22;
  CA::Shape **v23;
  const CA::Shape *v24;
  const CA::Shape *v25;
  uint64_t v26;
  const CA::Bounds *v27;
  CA::Shape *v28;
  const CA::Bounds *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unint64_t v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  float *v38;
  int v39;
  int v40;
  double v41;
  double v42;
  uint64_t v43;
  float v44;
  double *v45;
  _QWORD *v50;
  double v51;
  double v52;
  double v53;
  unsigned int *v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  const CA::Bounds *v59;
  float64x2_t v60;
  _QWORD *v61;
  double v62;
  double v63;
  float64x2_t v64;
  int64x2_t v65;
  float64x2_t v66;
  int64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  int64x2_t v71;
  int64x2_t v72;
  int8x16_t v73;
  int32x4_t v74;
  uint64_t v75;
  uint64_t v76;
  const double *v78;
  int32x4_t v79;
  int32x4_t v80;
  double *v81;
  int32x4_t v82;
  int32x4_t v83;
  CA::Shape *v84;
  char v85;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _DWORD *v90;
  float64x2_t v91;
  float64x2_t v92;
  double v93;
  double v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  double v99;
  double v100;
  CA::Transform *v101;
  __n128 v102;
  _QWORD *v103;
  unsigned int v104;
  float64x2_t v105;
  float64x2_t v106;
  _QWORD v107[2];
  CA::Shape *v108[2];
  float64x2_t v109;
  _BYTE *v110;
  _OWORD v111[2];
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  unsigned int v115[2];
  float64x2_t v116;
  float64x2_t v117;
  __int128 v118;
  CA::Shape *v119[2];
  CA::Shape **v120[2];
  __int128 v121;
  __int128 v122;
  __int128 v123;
  _OWORD v124[3];
  double v125;
  uint64_t v126;
  CA::Shape *v127;
  CA::Shape **v128;
  uint64_t v129;
  unsigned __int128 v130;
  unsigned __int128 v131;
  uint64_t v132;
  int v133;
  unint64_t v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;

  v139 = *MEMORY[0x1E0C80C00];
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 80))(a3);
  if (v8)
  {
    v9 = (_QWORD *)v8;
    *(_QWORD *)v115 = 0;
    if ((*(_BYTE *)(v8 + 13) & 0x64) != 0)
    {
      CA::Render::Texture::displayed_size_(v8, &v115[1], v115);
    }
    else
    {
      v30 = *(_DWORD *)(v8 + 16);
      v115[0] = *(_DWORD *)(v8 + 20);
      v115[1] = v30;
    }
    if (*(_BYTE *)(a3 + 12) == 50)
    {
      v31 = *(_DWORD *)(a3 + 32);
      v115[0] = *(_DWORD *)(a3 + 36);
      v115[1] = v31;
    }
    v32 = (*(uint64_t (**)(_QWORD *))(*v9 + 104))(v9);
    if (v32 <= 0x23 && ((0xF9FE26000uLL >> v32) & 1) != 0)
      *(_QWORD *)(a2 + 72) |= 0x40000000uLL;
    if ((*(_BYTE *)(*(_QWORD *)(a2 + 56) + 43) & 2) != 0)
      *(_QWORD *)(a2 + 72) |= 0x200000000uLL;
    if (*(_BYTE *)(a3 + 12) != 25 || !CA::Render::ImageQueue::is_protected((CA::Render::ImageQueue *)a3))
      goto LABEL_38;
    v35 = *(_QWORD *)(a3 + 64);
    if (!v35)
    {
      v35 = *(_QWORD *)(a3 + 80);
      if (!v35)
      {
        if (!*(_QWORD *)(a3 + 24))
          goto LABEL_38;
        v35 = *(_QWORD *)(a3 + 80);
        if (!v35)
          v35 = *(_QWORD *)(a3 + 24);
      }
    }
    *(_QWORD *)(a2 + 72) |= ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 240))(v35) << 47) & 0x3000000000000 | 0x800000000000;
LABEL_38:
    v36 = *((_DWORD *)v9 + 3);
    if (v36 == 51)
    {
      *(_QWORD *)(a2 + 72) |= ((*(uint64_t (**)(_QWORD *))(*v9 + 240))(v9) & 7) << 47;
      v36 = *((_DWORD *)v9 + 3);
    }
    if ((v36 & 0x10000) != 0)
      *(_QWORD *)(a2 + 72) |= 0x1000000uLL;
    v37 = *(_QWORD *)(a2 + 56);
    if ((v36 & 0x1000) == 0 && (*(_BYTE *)(v37 + 42) & 2) == 0)
      goto LABEL_49;
    v38 = *(float **)(v37 + 128);
    if (v38)
    {
      if (!*(_QWORD *)v38)
        goto LABEL_48;
      v39 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)v38 + 216))(*(_QWORD *)v38, *(_QWORD *)(a2 + 56));
      v37 = *(_QWORD *)(a2 + 56);
      if (!v39)
      {
LABEL_49:
        v40 = 0;
        goto LABEL_51;
      }
      v38 = *(float **)(v37 + 128);
      if (v38)
      {
LABEL_48:
        if (v38[69] < 1.0)
          goto LABEL_49;
      }
    }
    v40 = 1;
LABEL_51:
    LODWORD(v33) = v115[1];
    v41 = (double)v33;
    LODWORD(v33) = v115[0];
    v42 = (double)v33;
    v113 = 0uLL;
    v114.f64[0] = v41;
    v114.f64[1] = v42;
    v43 = *(_QWORD *)(v37 + 128);
    if (v43)
    {
      v44 = *(float *)(v43 + 280);
    }
    else
    {
      LOBYTE(v34) = *(_BYTE *)(v37 + 34);
      v44 = (float)v34;
    }
    if (v44 != 1.0)
    {
      if (v44 != 0.0)
      {
        v53 = v44;
        v41 = v41 / v53;
        v42 = v42 / v53;
        v114.f64[0] = v41;
        v114.f64[1] = v42;
        if (v43)
        {
LABEL_58:
          v45 = *(double **)(v43 + 40);
          if (v45)
          {
            v41 = (v45[5] - v45[3]) * v41;
            v42 = (v45[6] - v45[4]) * v42;
            v114.f64[0] = v41;
            v114.f64[1] = v42;
          }
        }
LABEL_60:
        v112.f64[0] = v41;
        v112.f64[1] = v42;
        if ((*(_DWORD *)(v37 + 36) & 0xF000) != 0x9000
          || *(double *)(v37 + 64) != 0.0
          || *(double *)(v37 + 72) != 0.0
          || v43 && *(_QWORD *)(v43 + 32)
          || *(double *)(v37 + 80) != v41
          || *(double *)(v37 + 88) != v42)
        {
          v40 &= CA::Render::Layer::apply_contents_transform(v37, (uint64_t)&v113, &v112, *(unsigned __int8 *)(a3 + 12) == 25);
        }
        CA::Rect::apply_transform(v113.f64, a2 + 8);
        if ((*(_BYTE *)(v37 + 42) & 1) != 0)
        {
          __asm { FMOV            V0.2D, #1.0 }
          v116 = _Q0;
          v50 = *(_QWORD **)a2;
          if (*(_QWORD *)a2)
          {
            do
            {
              (*(void (**)(_QWORD *, float64x2_t *))(*v50 + 48))(v50, &v116);
              v50 = (_QWORD *)v50[1];
            }
            while (v50);
            v52 = v116.f64[1];
            v51 = v116.f64[0];
          }
          else
          {
            v52 = 1.0;
            v51 = 1.0;
          }
          CA::BoundsImpl::inset(v113.f64, -0.5 / v51, -0.5 / v52);
        }
        v105 = v114;
        v106 = v113;
        v111[0] = v113;
        v111[1] = v114;
        CA::Render::Updater::LayerShapes::union_bounds((__n128 *)a4, &v113, (const CA::Bounds *)((*(_QWORD *)(a2 + 64) & 0x8000) == 0));
        if ((*(_BYTE *)(a2 + 65) & 0x80) != 0 && *(_QWORD *)(a4 + 72))
        {
          v60 = v105;
          v116 = v106;
          v117 = v105;
          v61 = *(_QWORD **)a2;
          if (*(_QWORD *)a2)
          {
            do
            {
              (*(void (**)(_QWORD *, float64x2_t *))(*v61 + 40))(v61, &v116);
              v61 = (_QWORD *)v61[1];
            }
            while (v61);
            v60 = v117;
          }
          if (v60.f64[0] <= v60.f64[1])
            v62 = v60.f64[1];
          else
            v62 = v60.f64[0];
          if (v62 < 1.79769313e308)
          {
            v63 = v60.f64[0] >= v60.f64[1] ? v60.f64[1] : v60.f64[0];
            if (v63 > 0.0)
            {
              v116 = vaddq_f64(v116, (float64x2_t)vdupq_n_s64(0xBF50000000000000));
              v117.f64[0] = v60.f64[0] + 0.001953125;
              v117.f64[1] = v60.f64[1] + 0.001953125;
              if (v60.f64[0] + 0.001953125 <= 0.0 || v60.f64[1] + 0.001953125 <= 0.0)
                v117 = 0uLL;
            }
          }
          v64 = v117;
          v65 = vclezq_f64(v117);
          if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v65, 1), (int8x16_t)v65).u64[0] & 0x8000000000000000) == 0)
          {
            v66 = *(float64x2_t *)(a4 + 104);
            v67 = vclezq_f64(v66);
            if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v67, 1), (int8x16_t)v67).u64[0] & 0x8000000000000000) != 0
              || (v68 = *(float64x2_t *)(a4 + 88),
                  v69 = vaddq_f64(v68, v66),
                  v70 = vmaxnmq_f64(v116, v68),
                  v64 = vsubq_f64(vminnmq_f64(vaddq_f64(v116, v117), v69), v70),
                  v71 = vclezq_f64(v64),
                  (vorrq_s8((int8x16_t)vdupq_laneq_s64(v71, 1), (int8x16_t)v71).u64[0] & 0x8000000000000000) != 0))
            {
              v117 = 0uLL;
              v64 = 0uLL;
            }
            else
            {
              v116 = v70;
              v117 = v64;
            }
          }
          v72 = vceqzq_f64(v64);
          if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v72, 1), (int8x16_t)v72).u64[0] & 0x8000000000000000) != 0
            || (v73 = vorrq_s8((int8x16_t)vcltzq_f64(v64), (int8x16_t)vcgezq_f64(v64)),
                (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v73), 1), v73).u64[0] & 0x8000000000000000) != 0))
          {
            v108[0] = 0;
            v108[1] = 0;
          }
          else
          {
            v74 = (int32x4_t)vcvtpq_s64_f64(vmaxnmq_f64(v116, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
            *(int32x4_t *)v108 = vuzp1q_s32(v74, (int32x4_t)vsubq_s64(vcvtmq_s64_f64(vminnmq_f64(vaddq_f64(v116, v64), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v74));
          }
          CA::shape_union((CA::Shape **)(a4 + 72), v108, v59);
        }
        if (*(_BYTE *)(a3 + 12) != 25 && (*(float (**)(_QWORD *))(*v9 + 152))(v9) != 1.0)
        {
          v75 = 0x2000000000;
          if ((*(_QWORD *)(a2 + 64) & 0x8000) == 0)
            v75 = 0x800000000;
          *(_QWORD *)(a2 + 72) |= v75;
        }
        v76 = v9[5];
        if (v76 && (*(_DWORD *)(*(_QWORD *)a1 + 1064) & 4) == 0)
        {
          v116 = (float64x2_t)xmmword_18474DF40;
          v117 = 0u;
          v118 = xmmword_18474DF50;
          *(_OWORD *)v119 = 0u;
          *(_OWORD *)v120 = 0u;
          v121 = xmmword_18474DF40;
          v122 = 0u;
          v123 = xmmword_18474DF50;
          __asm { FMOV            V0.2D, #1.0 }
          v124[0] = _Q0;
          LOBYTE(v124[1]) &= 0xE0u;
          if (CA::Render::Layer::append_texture_transform(*(CA::Render::Layer **)(a2 + 56), (CA::Transform *)&v116, (CA::Render::Texture *)v9, (CA::Render::Object *)a3))
          {
            CA::Transform::concat((uint64_t)&v116, a2 + 8);
            v108[0] = (CA::Shape *)&v116;
            v108[1] = (CA::Shape *)v111;
            *(_QWORD *)&v109.f64[0] = a2;
            *(_QWORD *)&v109.f64[1] = a4;
            v110 = a1;
            if ((v124[1] & 0x10) != 0 && !CA::Mat4Impl::mat4_is_rectilinear((CA::Mat4Impl *)&v116, v78))
            {
              v136 = 0;
              v137 = 0;
              CA::Shape::get_bounds(v76, (int *)&v136);
              CA::Render::Updater::prepare_layer_contents(CA::Render::Updater::GlobalState &,CA::Render::Updater::LocalState &,CA::Render::Object *,CA::Render::Updater::LayerShapes &)::$_0::operator()((uint64_t)v108, (uint64_t)&v136, v81, v82, v83);
            }
            else
            {
              v137 = 0;
              v138 = 0;
              v136 = v76;
              v107[0] = 0;
              v107[1] = 0;
              while (CA::ShapeIterator::iterate(&v136, (int *)v107))
                CA::Render::Updater::prepare_layer_contents(CA::Render::Updater::GlobalState &,CA::Render::Updater::LocalState &,CA::Render::Object *,CA::Render::Updater::LayerShapes &)::$_0::operator()((uint64_t)v108, (uint64_t)v107, (double *)v59, v79, v80);
            }
          }
          else
          {
            *(_QWORD *)(a2 + 64) |= 2uLL;
          }
          if ((*(_BYTE *)(*(_QWORD *)(a2 + 48) + 24) & 0x40) != 0)
          {
            v84 = (CA::Shape *)v9[5];
            if (v84)
            {
              CA::Shape::unref(v84);
              v9[5] = 0;
            }
          }
        }
        v85 = v40 ^ 1;
        if (!*(_QWORD *)(a4 + 56))
          v85 = 1;
        if ((v85 & 1) == 0)
          CA::Render::Updater::union_opaque_rect((uint64_t)a1, a4, v59, v106, v105);
        if (!v9[6]
          && (*(unsigned int (**)(_QWORD *))(*v9 + 104))(v9) != 9
          && BYTE2(xmmword_1ECDC6A70) == 0)
        {
          v87 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 144);
          if (v87)
          {
            v88 = *(_QWORD *)(v87 + 24);
            if (v88)
            {
              if ((*(_WORD *)(v88 + 552) & 2) != 0)
                (*(void (**)(_QWORD *))(*v9 + 96))(v9);
            }
          }
        }
        v89 = *(_QWORD *)(a2 + 64);
        if ((v89 & 0x8000) != 0)
        {
          if (a1[12])
          {
            v89 |= 2uLL;
            *(_QWORD *)(a2 + 64) = v89;
          }
          v90 = *(_DWORD **)a1;
          if (*(_DWORD *)(a4 + 120) != *(_DWORD *)(*(_QWORD *)a1 + 192)
            || *(_DWORD *)(a4 + 124) != v90[49]
            || *(_DWORD *)(a4 + 128) != v90[50]
            || *(_DWORD *)(a4 + 132) != v90[51])
          {
            v91 = *(float64x2_t *)(a4 + 16);
            v116 = *(float64x2_t *)a4;
            v117 = v91;
            CA::Render::Updater::apply_shapes_ops(*(_QWORD **)a2, (CA::Render::Updater::LayerShapesOp *)&v116, v59);
            v92 = vrndaq_f64(v116);
            if (vaddvq_f64(vabdq_f64(v116, v92))
               + vabdd_f64(v117.f64[0], round(v117.f64[0]))
               + vabdd_f64(v117.f64[1], round(v117.f64[1])) < 0.004)
            {
              v93 = v117.f64[1];
              v94 = v117.f64[0] <= v117.f64[1] ? v117.f64[1] : v117.f64[0];
              if (v94 < 1.79769313e308)
              {
                if (v117.f64[0] < v117.f64[1])
                  v93 = v117.f64[0];
                if (v93 > 0.0)
                {
                  v95 = vsubq_f64(vrndaq_f64(vaddq_f64(v116, v117)), v92);
                  v116 = v92;
                  v117 = v95;
                }
              }
            }
            v96 = *(float64x2_t *)(a4 + 88);
            v97 = *(float64x2_t *)(a4 + 104);
            *(float64x2_t *)v108 = v96;
            v109 = v97;
            v98 = vrndaq_f64(v96);
            if (vaddvq_f64(vabdq_f64(v96, v98))
               + vabdd_f64(v97.f64[0], round(v97.f64[0]))
               + vabdd_f64(v97.f64[1], round(v97.f64[1])) < 0.004)
            {
              v99 = v97.f64[0] <= v97.f64[1] ? v97.f64[1] : v97.f64[0];
              if (v99 < 1.79769313e308)
              {
                v100 = v97.f64[0] >= v97.f64[1] ? v97.f64[1] : v97.f64[0];
                if (v100 > 0.0)
                {
                  *(float64x2_t *)v108 = v98;
                  v109 = vsubq_f64(vrndaq_f64(vaddq_f64(v96, v97)), v98);
                }
              }
            }
            if (!CA::BoundsImpl::contains((double *)v108, v116.f64))
              *(_QWORD *)(a2 + 72) |= 0x20C00000uLL;
            v89 = *(_QWORD *)(a2 + 64);
          }
        }
        else
        {
          *(_QWORD *)(a2 + 72) |= 0x20C00000uLL;
        }
        if ((v89 & 0x80) != 0 && *(_BYTE *)(a3 + 12) == 25)
        {
          v123 = 0u;
          memset(v124, 0, 24);
          v121 = 0u;
          v122 = 0u;
          *(_OWORD *)v119 = 0u;
          *(_OWORD *)v120 = 0u;
          v117 = 0u;
          v118 = 0u;
          v116 = 0u;
          v102.n128_f64[0] = CA::Transform::set((CA::Transform *)&v116, a2 + 8);
          v103 = *(_QWORD **)a2;
          if (*(_QWORD *)a2)
          {
            do
            {
              (*(void (**)(_QWORD *, float64x2_t *, __n128))(*v103 + 56))(v103, &v116, v102);
              v103 = (_QWORD *)v103[1];
            }
            while (v103);
          }
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) + 24) + 92) = ((*(_DWORD *)(*(_QWORD *)a1 + 272) & 2) != 0) ^ CA::Render::Updater::get_rotation_flags((CA::Render::Updater *)&v116, v101) ^ ((*(_QWORD *)(*(_QWORD *)(a2 + 48) + 24) & 1) == 0);
        }
        return;
      }
      v114 = 0uLL;
      v42 = 0.0;
      v41 = 0.0;
    }
    if (v43)
      goto LABEL_58;
    goto LABEL_60;
  }
  v10 = *(unsigned __int8 *)(a3 + 12);
  if (v10 == 25)
  {
    v54 = *(unsigned int **)(a3 + 32);
    if (v54)
    {
      v55 = v54 + 2;
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 + 1, v55));
      if (v56)
      {
        CA::Render::Updater::prepare_layer_contents(a1, a2, v54, a4);
        do
        {
          v57 = __ldaxr(v55);
          v58 = v57 - 1;
        }
        while (__stlxr(v58, v55));
        if (!v58)
          (*(void (**)(unsigned int *))(*(_QWORD *)v54 + 16))(v54);
      }
      else
      {
        do
          v104 = __ldaxr(v55);
        while (__stlxr(v104 - 1, v55));
      }
    }
  }
  else if (v10 == 26)
  {
    v11 = *(_QWORD *)(a4 + 56);
    *(_OWORD *)v120 = 0u;
    v121 = 0u;
    v123 = 0u;
    memset(v124, 0, sizeof(v124));
    v122 = 0u;
    v118 = 0u;
    *(_OWORD *)v119 = 0u;
    v116 = 0u;
    v117 = 0u;
    v12 = (CA::Shape **)(a4 + 64);
    v13 = *(_QWORD *)(a4 + 64) != 0;
    v119[1] = (CA::Shape *)(v11 != 0);
    v120[0] = (CA::Shape **)v13;
    v120[1] = 0;
    *(_QWORD *)&v121 = 0;
    v14 = *(_QWORD *)(a4 + 96);
    *((_QWORD *)&v121 + 1) = *(_QWORD *)(a4 + 88);
    *(_QWORD *)&v122 = v14;
    v15 = *(_QWORD *)(a4 + 112);
    *((_QWORD *)&v122 + 1) = *(_QWORD *)(a4 + 104);
    *(_QWORD *)&v123 = v15;
    v16 = *(_DWORD *)(a4 + 124);
    DWORD2(v123) = *(_DWORD *)(a4 + 120);
    HIDWORD(v123) = v16;
    v17 = *(_DWORD *)(a4 + 132);
    LODWORD(v124[0]) = *(_DWORD *)(a4 + 128);
    DWORD1(v124[0]) = v17;
    v125 = 0.0;
    v126 = 0;
    v127 = v119[1];
    v128 = (CA::Shape **)v13;
    v129 = 0;
    v130 = __PAIR128__(*((unint64_t *)&v121 + 1), 0);
    v131 = __PAIR128__(*((unint64_t *)&v122 + 1), v14);
    v132 = v15;
    v133 = DWORD2(v123);
    v134 = __PAIR64__(v124[0], v16);
    v135 = v17;
    CA::Render::Updater::prepare_layer_contents(a1, a2, *(_QWORD *)(a3 + 24), &v116);
    CA::Render::Updater::prepare_layer_contents(a1, a2, *(_QWORD *)(a3 + 32), (char *)v124 + 8);
    CA::Render::Updater::LayerShapes::union_bounds((__n128 *)a4, &v116, (const CA::Bounds *)1);
    CA::Render::Updater::LayerShapes::union_bounds((__n128 *)a4, (float64x2_t *)((char *)v124 + 8), (const CA::Bounds *)1);
    v19 = v118;
    v20 = *(double *)(a4 + 32);
    if (v20 > *(double *)&v118)
    {
      *(_QWORD *)(a4 + 32) = v118;
      v20 = *(double *)&v19;
    }
    v21 = *(double *)(a4 + 40);
    if (v21 < *((double *)&v19 + 1))
    {
      *(_QWORD *)(a4 + 40) = *((_QWORD *)&v19 + 1);
      v21 = *((double *)&v19 + 1);
    }
    v22 = v125;
    if (v20 > *((double *)&v124[2] + 1))
      *(_QWORD *)(a4 + 32) = *((_QWORD *)&v124[2] + 1);
    if (v21 < v22)
      *(double *)(a4 + 40) = v22;
    if (*(_QWORD *)(a4 + 56))
    {
      v23 = (CA::Shape **)CA::Shape::intersect((uint64_t)v119[1], (uint64_t)v127);
      CA::Shape::unref(v119[1]);
      CA::Shape::unref(v127);
      CA::shape_union((CA::Shape **)(a4 + 56), v23, v24);
      CA::Shape::unref((CA::Shape *)v23);
    }
    if (*v12)
    {
      CA::shape_union((CA::Shape **)(a4 + 64), v120[0], v18);
      v26 = (uint64_t)*v12;
      if ((*v12 & 1) == 0)
      {
        if (*(int *)(v26 + 4) < 257)
          goto LABEL_21;
        v108[0] = 0;
        v108[1] = 0;
        CA::Shape::get_bounds(v26, (int *)v108);
        CA::Shape::unref(*v12);
        v26 = CA::Shape::new_shape((CA::Shape *)v108, v27);
        *v12 = (CA::Shape *)v26;
      }
      if (!v26)
      {
LABEL_24:
        CA::Shape::unref((CA::Shape *)v120[0]);
        CA::Shape::unref((CA::Shape *)v128);
        return;
      }
LABEL_21:
      CA::shape_union((CA::Shape **)(a4 + 64), v128, v25);
      v28 = *v12;
      if ((*v12 & 1) == 0 && *((int *)v28 + 1) >= 257)
      {
        v108[0] = 0;
        v108[1] = 0;
        CA::Shape::get_bounds((uint64_t)v28, (int *)v108);
        CA::Shape::unref(*v12);
        *v12 = (CA::Shape *)CA::Shape::new_shape((CA::Shape *)v108, v29);
      }
      goto LABEL_24;
    }
  }
}

uint64_t CA::Render::Updater::LayerShapes::union_bounds(__n128 *this, float64x2_t *a2, const CA::Bounds *a3)
{
  __n128 v5;
  float64x2_t v6;
  int64x2_t v7;
  __n128 v8;
  __n128 v9;
  float64x2_t v10;
  CA::Shape **v11;
  float64x2_t v12;
  int64x2_t v13;
  int8x16_t v14;
  int32x4_t v15;
  uint64_t result;
  int32x4_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5 = this[1];
  v6 = a2[1];
  v7 = vclezq_f64((float64x2_t)v5);
  v8 = (__n128)vclezq_f64(v6);
  v9 = (__n128)vcltzq_s64((int64x2_t)vorrq_s8((int8x16_t)vzip1q_s64((int64x2_t)v8, v7), (int8x16_t)vzip2q_s64((int64x2_t)v8, v7)));
  v9.n128_u64[0] = (unint64_t)vmovn_s64((int64x2_t)v9);
  if ((v9.n128_u8[4] & 1) != 0)
  {
    if ((v9.n128_u8[0] & 1) == 0)
    {
      v5 = *(__n128 *)a2;
LABEL_6:
      *this = v5;
      this[1] = (__n128)v6;
    }
  }
  else if ((v9.n128_u8[0] & 1) == 0)
  {
    v9 = *this;
    v8 = *(__n128 *)a2;
    v10 = vaddq_f64(*(float64x2_t *)this, (float64x2_t)v5);
    v5 = (__n128)vminnmq_f64(*(float64x2_t *)this, *a2);
    v6 = vsubq_f64(vmaxnmq_f64(v10, vaddq_f64(*a2, v6)), (float64x2_t)v5);
    goto LABEL_6;
  }
  if ((_DWORD)a3)
  {
    v11 = (CA::Shape **)&this[4];
    if (this[4].n128_u64[0])
    {
      v12 = a2[1];
      v13 = vceqzq_f64(v12);
      if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v13, 1), (int8x16_t)v13).u64[0] & 0x8000000000000000) != 0
        || (v14 = vorrq_s8((int8x16_t)vcltzq_f64(v12), (int8x16_t)vcgezq_f64(v12)),
            (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v14), 1), v14).u64[0] & 0x8000000000000000) != 0))
      {
        v17 = 0uLL;
      }
      else
      {
        v15 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(*a2, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
        v17 = vuzp1q_s32(v15, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(*a2, v12), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v15));
      }
      CA::shape_union(v11, (CA::Shape **)&v17, a3);
    }
  }
  result = this[3].n128_i64[0];
  if (result)
  {
    if (!*(_BYTE *)(result + 16))
    {
      v5.n128_u64[0] = *(_QWORD *)&a2->f64[1];
      v9.n128_f64[0] = a2[1].f64[0] + a2->f64[0];
      v8.n128_f64[0] = a2[1].f64[1] + v5.n128_f64[0];
      return CA::GenericRectTree<CA::Rect>::insert_node(result, (uint64_t *)(result + 8), a2->f64[0], v5, v9, v8);
    }
  }
  return result;
}

uint64_t CA::Render::Image::image_format(CA::Render::Image *this)
{
  return *((unsigned __int8 *)this + 152);
}

float CA::Render::Texture::edr_factor(CA::Render::Texture *this)
{
  return 1.0;
}

double CA::Rect::apply_transform(double *a1, uint64_t a2)
{
  double result;
  double v3;
  double v4;
  char v5;
  double v6;
  double v7;
  double v8;
  double v9;

  v3 = a1[2];
  result = a1[3];
  if (v3 <= result)
    v4 = a1[3];
  else
    v4 = a1[2];
  if (v4 >= 1.79769313e308)
    return result;
  v5 = *(_BYTE *)(a2 + 32);
  if ((v5 & 8) != 0)
  {
    v6 = a1[1];
    *a1 = *a1 * *(double *)(a2 + 16);
    a1[1] = v6 * *(double *)(a2 + 16);
    v3 = *(double *)(a2 + 16) * v3;
    a1[2] = v3;
    result = *(double *)(a2 + 16) * result;
    a1[3] = result;
    v5 = *(_BYTE *)(a2 + 32);
  }
  if ((v5 & 4) == 0)
  {
    v7 = result;
    result = v3;
    if ((v5 & 2) == 0)
      goto LABEL_12;
    goto LABEL_11;
  }
  v8 = *a1;
  *a1 = -(result + a1[1]);
  a1[1] = v8;
  a1[2] = result;
  a1[3] = v3;
  v5 = *(_BYTE *)(a2 + 32);
  v7 = v3;
  if ((v5 & 2) != 0)
  {
LABEL_11:
    *a1 = -(result + *a1);
    v5 = *(_BYTE *)(a2 + 32);
  }
LABEL_12:
  v9 = a1[1];
  if ((v5 & 1) != 0)
  {
    v9 = -(v7 + v9);
    a1[1] = v9;
  }
  *a1 = *a1 + *(double *)a2;
  result = v9 + *(double *)(a2 + 8);
  a1[1] = result;
  return result;
}

uint64_t CA::OGL::MetalContext::bind_image_impl(CA::OGL::Context *this, int a2, CA::Render::Texture *a3, __int16 a4, int a5, char a6, int a7, uint64_t a8, float a9, uint64_t a10)
{
  uint64_t v19;
  __IOSurface **v20;
  __n128 v21;
  __IOSurface **v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  const char *v29;
  NSObject *v30;
  uint32_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint8_t buf[4];
  int v40;
  __int16 v41;
  int v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  if (*((CA::OGL::Context **)a3 + 11) != this || (v19 = *((_QWORD *)a3 + 10)) == 0)
  {
    v19 = CA::OGL::Context::lookup_image_(this, a3, 1);
    if (!v19)
      return v19;
  }
  if (*((_BYTE *)a3 + 12) == 23 && !*(_WORD *)(v19 + 52))
    *(_WORD *)(v19 + 123) |= 2u;
  v20 = CA::OGL::MetalContext::retain_image((uint64_t)this, v19, (unsigned __int8 *)a3, 0);
  if (!v20)
    return 0;
  v22 = v20;
  if (*(_QWORD *)(v19 + 64))
  {
    if (*(_BYTE *)(v19 + 122))
    {
      v23 = *(_QWORD *)(v19 + 8);
      if (v23)
      {
        if (*(_DWORD *)(v19 + 16) != *(_DWORD *)(v23 + 36))
        {
          *(_DWORD *)(v19 + 52) = *(_DWORD *)(v19 + 52) & 0xFFF0FFFF | ((a5 & 0xF) << 16);
          v24 = *(unsigned __int8 *)(v23 + 12);
          if (v24 == 51)
          {
            CA::OGL::MetalContext::update_surface((uint64_t)this, v19, (unsigned int *)v23, a2, a10);
          }
          else if (v24 == 23)
          {
            CA::OGL::MetalContext::update_image((uint64_t)this, v19, v23, a2, a10);
          }
        }
      }
    }
    goto LABEL_32;
  }
  v25 = *((_QWORD *)this + 332);
  if (v25 < *((unsigned int *)v20 + 4) || v25 < *((unsigned int *)v20 + 5))
  {
    if (x_log_hook_p())
    {
LABEL_19:
      x_log_();
      return 0;
    }
    v26 = x_log_category_ogl_metal;
    if (!os_log_type_enabled((os_log_t)x_log_category_ogl_metal, OS_LOG_TYPE_DEFAULT))
      return 0;
    v27 = *((_DWORD *)v22 + 4);
    v28 = *((_DWORD *)v22 + 5);
    *(_DWORD *)buf = 67109376;
    v40 = v27;
    v41 = 1024;
    v42 = v28;
    v29 = "%d by %d image is too large for GPU, ignoring\n";
    v30 = v26;
    v31 = 14;
LABEL_22:
    _os_log_impl(&dword_184457000, v30, OS_LOG_TYPE_DEFAULT, v29, buf, v31);
    return 0;
  }
  if (*((_BYTE *)v20 + 12) == 23)
  {
    v32 = *((_QWORD *)this + 333);
    if (v32)
    {
      if ((unint64_t)v20[20] > v32)
      {
        if (x_log_hook_p())
          goto LABEL_19;
        v37 = x_log_category_ogl_metal;
        if (!os_log_type_enabled((os_log_t)x_log_category_ogl_metal, OS_LOG_TYPE_DEFAULT))
          return 0;
        *(_WORD *)buf = 0;
        v29 = "Image stride is too large for GPU, ignoring\n";
        v30 = v37;
        v31 = 2;
        goto LABEL_22;
      }
    }
  }
  if (a5 == 2)
    *(_DWORD *)(v19 + 52) = *(_DWORD *)(v19 + 52) & 0xFFF0FFFF | 0x20000;
  CA::OGL::MetalContext::update_texture((uint64_t)this, v19, (uint64_t)v20, a2, a10, v21);
LABEL_32:
  v33 = *(unsigned __int8 *)(v19 + 122);
  if (!*(_BYTE *)(v19 + 122))
    return 0;
  v34 = 0;
  v35 = *((_QWORD *)this + 2);
  do
  {
    if (v34 == 3)
      __assert_rtn("create_image_binding", "ogl-metal.mm", 3937, "plane < OGL_MAX_PLANES_PER_IMAGE");
    v36 = a2 + v34;
    *(_WORD *)(v35 + 2 * v36 + 144) = *(_DWORD *)(v19 + 52);
    *(_QWORD *)(v35 + 8 * v36 + 176) = v34++ | v19;
  }
  while (v33 != v34);
  if (a5 == 2)
  {
    if ((*(_WORD *)(v19 + 123) & 1) != 0)
      LOBYTE(a5) = 2;
    else
      LOBYTE(a5) = 1;
  }
  *(_DWORD *)(v19 + 52) = *(_DWORD *)(v19 + 52) & 0xFF00FFFF | ((a5 & 0xF) << 16) & 0xFF0FFFFF | ((a6 & 0xF) << 20);
  *(float *)(v19 + 48) = a9;
  if (a7 == 1)
    a7 = (*(unsigned __int8 *)(v19 + 123) >> 1) & 1;
  *(_WORD *)(v19 + 58) = *(_WORD *)(v19 + 58) & 0xFFE7 | (8 * (a7 & 3));
  *(_OWORD *)a8 = xmmword_18474E220;
  if (((a4 & 0x800) == 0) != (*((_BYTE *)v22 + 13) & 8) >> 3)
  {
    *(_DWORD *)(a8 + 4) = 1065353216;
    *(_DWORD *)(a8 + 12) = 0;
  }
  return v19;
}

void CA::OGL::prepare_color_program_cache(CA::OGL::Context **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v8;
  int v9;
  int v10;
  int v12;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  CA::OGL::Context *v16;
  float v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  float v22;
  uint64_t v23;
  CA::ColorProgram::Cache *v24;
  CA::ColorProgram::Cache *v25;
  uint64_t v26;
  float v27;
  float v28;
  float v29;

  v8 = (*(_BYTE *)(*(_QWORD *)(a2 + 24) + 43) & 8) == 0 && (*(_BYTE *)(*(_QWORD *)(a2 + 16) + 25) & 4) == 0;
  v9 = BYTE3(xmmword_1ECDC6A90);
  v10 = CGColorSpaceUsesITUR_2100TF(*(CGColorSpaceRef *)(a3 + 48));
  if ((*(_QWORD *)(*(_QWORD *)(a2 + 24) + 40) & 0x30) == 0x20 && byte_1ECDC6B0C == 0)
    v10 |= CGColorSpaceUsesExtendedRange(*(CGColorSpaceRef *)(a3 + 48));
  v12 = *(unsigned __int8 *)(a4 + 12);
  v13 = v12 == 25 && (*(_BYTE *)(*(_QWORD *)(a2 + 24) + 40) & 0x30) == 0;
  if (BYTE3(xmmword_1ECDC6A90)
    || ((v10 ^ 1) & 1) != 0
    || v13
    || (v14 = v9 == 0, (*(_QWORD *)(*(_QWORD *)(a2 + 24) + 40) & 0x30) == 0x10))
  {
    v8 = 0;
    v14 = 0;
  }
  v15 = v12 != 25 && CGColorSpaceIsPQBased(*(CGColorSpaceRef *)(a3 + 48));
  v16 = *a1;
  v17 = *(float *)(a3 + 56);
  if ((CGColorSpaceContainsFlexGTCInfo() & 1) == 0)
  {
    if (initialized[0] != -1)
      dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
    if (*(float *)&dword_1ECDC6A20 != 0.0)
      v17 = fmax(*(float *)&dword_1ECDC6A20 * 0.00492610837, 1.0);
  }
  if (v17 == 0.0)
    v18 = 4.9261;
  else
    v18 = v17;
  v19 = *(_QWORD *)(a2 + 24);
  v20 = *(_QWORD *)(v19 + 128);
  if (v20)
  {
    if (*(float *)(v20 + 260) == 0.0)
      v21 = v18;
    else
      v21 = *(float *)(v20 + 260);
    v22 = *(float *)(v20 + 256);
  }
  else
  {
    v22 = 1.0;
    v21 = v18;
  }
  v23 = *(_QWORD *)(v19 + 40);
  v24 = CA::OGL::Context::color_program_cache(v16);
  if (v24)
  {
    v25 = v24;
    *((_DWORD *)v24 + 17) = (v23 >> 4) & 3;
    *((_BYTE *)v24 + 64) = v14;
    *((_BYTE *)v24 + 65) = v8;
    *((_BYTE *)v24 + 67) = v15;
    *((float *)v24 + 13) = v18;
    v26 = *((_QWORD *)v16 + 25);
    if (v26)
    {
      v27 = *(float *)(v26 + 372);
      if (v21 != 0.0)
      {
        if (v27 > v21)
          v27 = v21;
        if (v27 <= 1.0)
          v27 = 1.0;
      }
      if (v22 < 1.0)
      {
        if (initialized[0] != -1)
        {
          v29 = v27;
          dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
          v27 = v29;
        }
        if (*(float *)&dword_1ECDC6A18 == 1)
        {
          v27 = (float)((float)(v27 + -1.0) * v22) + 1.0;
        }
        else
        {
          v28 = log2f(v27);
          v27 = exp2f(v28 * v22);
        }
      }
      *((float *)v25 + 12) = v27;
      *((_BYTE *)v25 + 66) = *(_BYTE *)(v26 + 406);
      *((float *)v25 + 14) = *(float *)(v26 + 364) / *(float *)(v26 + 372);
    }
  }
}

CA::ColorProgram::Cache *CA::OGL::Context::color_program_cache(CA::OGL::Context *this)
{
  CA::ColorProgram::Cache *result;
  malloc_zone_t *malloc_zone;

  result = (CA::ColorProgram::Cache *)*((_QWORD *)this + 20);
  if (!result)
  {
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    result = (CA::ColorProgram::Cache *)malloc_type_zone_malloc(malloc_zone, 0x50uLL, 0x8BB15036uLL);
    if (result)
    {
      *((_QWORD *)this + 20) = CA::ColorProgram::Cache::Cache(result, *((CGColorSpaceRef *)this + 18));
      CA::OGL::Context::update_color_program_cache((uint64_t)this);
      return (CA::ColorProgram::Cache *)*((_QWORD *)this + 20);
    }
    else
    {
      *((_QWORD *)this + 20) = 0;
    }
  }
  return result;
}

uint64_t CA::OGL::MetalContext::enforces_protection(CA::OGL::MetalContext *this)
{
  return 1;
}

uint64_t CACGColorSpaceIsRec601PAL(uint64_t a1)
{
  if (CAGetColorSpace(0x17u) == a1)
    return 1;
  else
    return CGColorSpaceEqualToColorSpaceIgnoringRange();
}

uint64_t CA::Render::Image::num_color_components(CA::Render::Image *this)
{
  unsigned int v1;

  v1 = *((unsigned __int8 *)this + 152) - 8;
  if (v1 > 0x16)
    return 3;
  else
    return dword_1847505A8[v1];
}

CA::OGL::Context **CA::OGL::render_background(CA::OGL::Context **result, uint64_t a2, double a3, double a4, float32x4_t a5)
{
  CA::OGL::Context **v6;
  uint64_t v7;
  CA::OGL::Context *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v12;
  uint64_t v13;
  double v14;
  float16x4_t v15;
  float v16;
  uint64_t v17;
  double *v18;
  float v19;
  int v20;
  float v21;
  __int128 v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  int8x8_t v26;
  uint64_t v27;
  uint64_t v28;
  os_unfair_lock_s *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float16x4_t v38;
  float16x4_t v39;
  float64x2_t v40;
  __int128 v41;
  uint64_t v42;

  v6 = result;
  v42 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a2 + 32);
  if ((v7 & 0x1000) != 0 && (*(_BYTE *)(*(_QWORD *)(a2 + 24) + 44) & 2) == 0)
  {
    result = (CA::OGL::Context **)CA::OGL::render_shadow_path(*result, a2, a3, a4, a5);
    if (byte_1ECDC6AEE)
      return result;
    v7 = *(_QWORD *)(a2 + 32);
  }
  if ((v7 & 0x200000000) != 0)
  {
    v8 = *v6;
    v9 = *((_QWORD *)*v6 + 2);
    v10 = *(unsigned __int8 *)(v9 + 480);
    if (v10 > 3 || v10 == 2)
      *(_BYTE *)(v9 + 481) |= 1u;
    v12 = *(_QWORD *)(a2 + 24);
    v13 = *(_QWORD *)(v12 + 128);
    if (v13)
    {
      v14 = *(float *)(v13 + 296);
      v15 = vcvt_f16_f32(*(float32x4_t *)(v13 + 300));
      v16 = *(float *)(v13 + 316);
      v17 = *(_QWORD *)(v12 + 40);
      v18 = (double *)(v17 & 3);
      v19 = *(float *)(v13 + 228);
    }
    else
    {
      v17 = *(_QWORD *)(v12 + 40);
      v15 = (float16x4_t)0x3C00000000000000;
      v18 = (double *)(v17 & 3);
      v14 = 0.0;
      v16 = 0.0;
      v19 = 0.0;
    }
    *(double *)a5.i64 = v19;
    v20 = *(_WORD *)(v12 + 38) & 0xF;
    v21 = 0.0;
    if ((v17 & 0x4000000000) != 0)
      v21 = 1.0;
    v22 = *(_OWORD *)(v12 + 80);
    v40 = *(float64x2_t *)(v12 + 64);
    v41 = v22;
    v39 = vcvt_f16_f32(vmulq_n_f32(vcvtq_f32_f16(v15), v16));
    result = (CA::OGL::Context **)CA::OGL::emit_rim_rounded_rect(v8, &v40, &v39, v18, v20, *(CA::Mat4Impl **)(*((_QWORD *)v8 + 29) + 24), v14, v21, (int8x16_t)a5, *(double *)a5.i64);
  }
  v23 = *(_WORD *)(a2 + 40);
  if ((v23 & 8) != 0)
  {
    v24 = **(_QWORD **)(*(_QWORD *)(a2 + 24) + 128);
    *(_QWORD *)&v40.f64[0] = off_1E159A580;
    *(_QWORD *)&v40.f64[1] = v6;
    *(_QWORD *)&v41 = a2;
    result = (CA::OGL::Context **)(*(uint64_t (**)(uint64_t, float64x2_t *))(*(_QWORD *)v24 + 232))(v24, &v40);
  }
  v25 = *(_QWORD *)(a2 + 32);
  if ((v25 & 0x20) != 0)
  {
    v26 = (int8x8_t)vcvt_f16_f32(*(float32x4_t *)(*(_QWORD *)(a2 + 24) + 16));
    if ((*(_WORD *)(a2 + 40) & 8) != 0)
    {
      v27 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 256);
      if (v27)
      {
        os_unfair_lock_lock((os_unfair_lock_t)(v27 + 36));
        v28 = *(_QWORD *)(v27 + 40);
        if (v28)
        {
          v29 = (os_unfair_lock_s *)(v28 + 40);
          os_unfair_lock_lock((os_unfair_lock_t)(v28 + 40));
          v30 = *(_QWORD *)(v28 + 64);
          v31 = *(_QWORD *)(v28 + 72);
          if (v30 == v31)
          {
LABEL_27:
            v32 = 0;
          }
          else
          {
            while (*(_QWORD *)v30 != *(_QWORD *)(v27 + 24))
            {
              v30 += 168;
              if (v30 == v31)
                goto LABEL_27;
            }
            v33 = *(_QWORD *)(v28 + 48);
            if (v33 && *(CA::OGL::Context **)(v33 + 8) == *v6)
              v32 = (*(unsigned __int8 *)(v33 + 216) >> 1) & 1;
            else
              v32 = *(unsigned __int8 *)(v30 + 160) != 0;
          }
          os_unfair_lock_unlock(v29);
          os_unfair_lock_unlock((os_unfair_lock_t)(v27 + 36));
          if (v32)
            v34 = -1;
          else
            v34 = 0;
          v26 = vbic_s8(v26, (int8x8_t)vdup_n_s16(v34));
        }
        else
        {
          os_unfair_lock_unlock((os_unfair_lock_t)(v27 + 36));
        }
      }
    }
    v38 = (float16x4_t)v26;
    v35 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 128);
    if (v35)
      v36 = *(_QWORD *)(v35 + 80);
    else
      v36 = 0;
    result = (CA::OGL::Context **)CA::OGL::render_solid_background(*v6, a2, &v38, v36);
    v25 = *(_QWORD *)(a2 + 32);
  }
  if ((v23 & 8) == 0 && (v25 & 0x4000) != 0)
  {
    v37 = **(_QWORD **)(*(_QWORD *)(a2 + 24) + 128);
    *(_QWORD *)&v40.f64[0] = off_1E159A580;
    *(_QWORD *)&v40.f64[1] = v6;
    *(_QWORD *)&v41 = a2;
    return (CA::OGL::Context **)(*(uint64_t (**)(uint64_t, float64x2_t *))(*(_QWORD *)v37 + 232))(v37, &v40);
  }
  return result;
}

uint64_t CA::OGL::Context::destination_has_alpha_p(CA::OGL::Context *this)
{
  uint64_t v2;

  if (!(*(unsigned int (**)(CA::OGL::Context *))(*(_QWORD *)this + 800))(this))
    return 1;
  v2 = *((_QWORD *)this + 25);
  if (v2 && *(_QWORD *)(v2 + 504))
    return 1;
  else
    return (*((unsigned __int16 *)this + 408) >> 2) & 1;
}

uint64_t CA::OGL::MetalContext::attached_to_framebuffer_p(CA::OGL::MetalContext *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 31);
  if (v1)
    return (*(unsigned __int16 *)(v1 + 232) >> 7) & 1;
  else
    return 1;
}

void CA::OGL::MetalContext::update_texture(uint64_t a1, unint64_t a2, uint64_t a3, int a4, uint64_t a5, __n128 a6)
{
  int v10;
  uint64_t v11;
  int v15;
  int v16;
  unsigned int v17;
  void *v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  void *v34;
  int8x8_t v35;
  __n128 v36;
  uint32x2_t v37;
  _QWORD v38[3];
  __int128 v39;
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v10 = *(unsigned __int8 *)(a3 + 12);
  if (v10 == 51)
  {
    CA::OGL::MetalContext::update_surface(a1, a2, (unsigned int *)a3, a4, a5);
    return;
  }
  v11 = *(_QWORD *)(a2 + 8);
  if (v10 == 23 && v11 != 0)
  {
    CA::OGL::MetalContext::update_image(a1, a2, a3, a4, a5);
    return;
  }
  if (v10 == 34 && v11 != 0)
  {
    v18 = *(void **)(a3 + 96);
    if (!v18)
      return;
    if (objc_msgSend(*(id *)(a3 + 96), "device") != *(_QWORD *)(a1 + 2904))
      __assert_rtn("update_metal_texture", "ogl-metal.mm", 11364, "texture.device == _device");
    if (objc_msgSend(v18, "pixelFormat") == 1
      && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 104))(a3) != 8)
    {
      v19 = *(_DWORD *)(a2 + 52) & 0xC0FFFFFF | 0x15000000;
    }
    else
    {
      v19 = *(_DWORD *)(a2 + 52) & 0xC0FFFFFF;
    }
    *(_DWORD *)(a2 + 52) = v19;
    v20 = objc_msgSend(v18, "mipmapLevelCount");
    v21 = *(_DWORD *)(a3 + 16);
    v22 = *(_DWORD *)(a3 + 20);
    if ((v20 & 0xFFFFFFFE) != 0)
    {
      *(_WORD *)(a2 + 123) |= 1u;
      *(_DWORD *)(a2 + 52) = *(_DWORD *)(a2 + 52) & 0xFFF0FFFF | 0x20000;
    }
    CA::OGL::MetalContext::update_texture_plane((_QWORD *)a1, a2, a4, 0, objc_msgSend(v18, "pixelFormat"), v21, v22);
    *(_QWORD *)(a2 + 64) = v18;
    goto LABEL_59;
  }
  if (v10 == 9 && v11 != 0)
  {
    v15 = 204;
    v16 = 1;
    v17 = 166;
    switch(*(_DWORD *)(a3 + 156))
    {
      case 1:
        v17 = 160;
        goto LABEL_43;
      case 2:
        v17 = 164;
        goto LABEL_43;
      case 3:
        v17 = 162;
        goto LABEL_43;
      case 4:
        goto LABEL_43;
      case 5:
        goto LABEL_42;
      case 6:
        v15 = 205;
        goto LABEL_42;
      case 7:
        v15 = 206;
        goto LABEL_42;
      case 8:
        v15 = 207;
        goto LABEL_42;
      case 9:
        v15 = 208;
        goto LABEL_42;
      case 0xA:
      case 0xB:
        v15 = 210;
        goto LABEL_42;
      case 0xC:
        v15 = 212;
        goto LABEL_42;
      case 0xD:
        v15 = 213;
        goto LABEL_42;
      case 0xE:
        v15 = 214;
        goto LABEL_42;
      case 0xF:
        v15 = 215;
        goto LABEL_42;
      case 0x10:
        v15 = 216;
        goto LABEL_42;
      case 0x11:
        v15 = 217;
        goto LABEL_42;
      case 0x12:
        v15 = 218;
LABEL_42:
        v16 = 2;
        v17 = v15;
LABEL_43:
        if ((*(_DWORD *)(a1 + 2676) & v16) == 0)
          return;
        v23 = *(_DWORD *)(a3 + 168);
        if (v23 == 2)
        {
          v24 = 0;
          *(_WORD *)(a2 + 58) |= 0x20u;
        }
        else
        {
          v24 = (v23 == 0) << 24;
        }
        v25 = *(_DWORD *)(a2 + 52) & 0xC0FFFFFF | v24;
        *(_DWORD *)(a2 + 52) = v25;
        a6.n128_u64[0] = *(_QWORD *)(a3 + 16);
        if (*(int *)(a3 + 152) >= 2)
        {
          *(_WORD *)(a2 + 123) |= 1u;
          *(_DWORD *)(a2 + 52) = v25 & 0xC1F0FFFF | 0x20000;
        }
        v36 = a6;
        CA::OGL::MetalContext::update_texture_plane((_QWORD *)a1, a2, a4, 0, v17, a6.n128_u32[0], a6.n128_u32[1]);
        objc_msgSend(*(id *)(a2 + 88), "setMipmapLevelCount:", *(int *)(a3 + 152));
        objc_msgSend(*(id *)(a2 + 88), "setUsage:", 1);
        if ((*(_BYTE *)(a3 + 176) & 1) != 0)
        {
          v29 = (void *)objc_msgSend(*(id *)(a1 + 2904), "newTextureWithDescriptor:", *(_QWORD *)(a2 + 88));
          *(_QWORD *)(a2 + 64) = v29;
          if (v29)
          {
            objc_msgSend(v29, "setLabel:", CFSTR("com.apple.coreanimation.compressed-image-linear"));
            v30 = v36;
            if (*(int *)(a3 + 152) >= 1)
            {
              v31 = 0;
              do
              {
                v32 = *(_QWORD *)(a3 + 96) + *(_QWORD *)(*(_QWORD *)(a3 + 128) + 8 * v31);
                *(_QWORD *)&v33 = v30.n128_u32[0];
                *((_QWORD *)&v33 + 1) = v30.n128_u32[1];
                v34 = *(void **)(a2 + 64);
                memset(v38, 0, sizeof(v38));
                v39 = v33;
                v40 = 1;
                objc_msgSend(v34, "replaceRegion:mipmapLevel:slice:withBytes:bytesPerRow:bytesPerImage:", v38, v31, 0, v32, *(_QWORD *)(*(_QWORD *)(a3 + 144) + 8 * v31), 0, *(_OWORD *)&v30);
                v35 = (int8x8_t)vcgt_u32(v37, (uint32x2_t)0x100000001);
                v30.n128_u64[0] = (unint64_t)vsub_s32((int32x2_t)vand_s8((int8x8_t)vshr_n_u32(v37, 1uLL), v35), (int32x2_t)vmvn_s8(v35));
                ++v31;
              }
              while (v31 < *(int *)(a3 + 152));
            }
          }
        }
        else
        {
          v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 168))(a3);
          v27 = *MEMORY[0x1E0C85AD8];
          if (*MEMORY[0x1E0C85AD8] >= *MEMORY[0x1E0C85AA8])
            v27 = *MEMORY[0x1E0C85AA8];
          v28 = (void *)objc_msgSend(*(id *)(a1 + 2904), "newTextureWithBytesNoCopy:length:descriptor:deallocator:", *(_QWORD *)(a3 + 96), (v26 + v27 - 1) & -v27, *(_QWORD *)(a2 + 88), 0, *(_OWORD *)&v36);
          *(_QWORD *)(a2 + 64) = v28;
          if (v28)
            objc_msgSend(v28, "setLabel:", CFSTR("com.apple.coreanimation.compressed-image"));
        }
        CA::OGL::MetalContext::update_texture_ownership(a1, *(void **)(a2 + 64));
        *(_QWORD *)(a1 + 712) += (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 168))(a3);
        break;
      default:
        return;
    }
LABEL_59:
    *(_DWORD *)(a2 + 16) = *(_DWORD *)(a3 + 36);
  }
}

uint64_t CA::Render::Texture::num_color_components(CA::Render::Texture *this)
{
  return 3;
}

unint64_t CA::OGL::render_shadow_path(CA::OGL::Context *a1, uint64_t a2, double a3, double a4, float32x4_t _Q2)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int16 v14;
  unsigned __int16 v15;
  unint64_t v16;
  unint64_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int64x2_t v20;
  unint64_t v21;
  double v22;
  int v23;
  unint64_t v24;
  int v25;
  unint64_t result;
  __int128 v27;
  uint64_t v28;
  float v29;
  __int128 v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  float64x2_t v34;
  __int128 v35;
  unint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)a1 + 2);
  if (*(unsigned __int8 *)(v6 + 480) >= 2u)
    *(_BYTE *)(v6 + 481) |= 1u;
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(v7 + 128);
  if (v8)
  {
    _S0 = *(_DWORD *)(v8 + 200);
    _Q2.i32[0] = *(_DWORD *)(v8 + 204);
    __asm
    {
      FCVT            H0, S0
      FCVT            H2, S2
    }
    v14 = _S0;
    v15 = _Q2.i16[0];
    _Q2.i64[0] = *(_QWORD *)(v8 + 208);
    v16 = *(_QWORD *)(v8 + 216);
    v17 = vmovl_u16((uint16x4_t)vcvt_f16_f32(_Q2)).u64[0];
    v18.i64[0] = v17;
    v18.i64[1] = HIDWORD(v17);
    v19.i64[0] = 0xFFFFLL;
    v19.i64[1] = 0xFFFFLL;
    v20 = (int64x2_t)vshlq_u64((uint64x2_t)vandq_s8(v18, v19), (uint64x2_t)xmmword_18474E1D0);
    v21 = vorrq_s8((int8x16_t)vdupq_laneq_s64(v20, 1), (int8x16_t)v20).u64[0] | ((unint64_t)v15 << 16) | v14;
    v22 = *(float *)(v8 + 224);
  }
  else
  {
    v16 = 0xC040000000000000;
    v21 = 0x3C00000000000000;
    v22 = 3.0;
  }
  v36 = v16;
  v23 = *(unsigned __int8 *)(v7 + 33);
  v24 = *(_QWORD *)(v7 + 40);
  v25 = (v24 >> 35) & ((v24 & 0x200000000) == 0);
  if (v8)
  {
    if ((v24 & 0x400000000) == 0)
      goto LABEL_10;
    v27 = *(_OWORD *)(v7 + 80);
    v34 = *(float64x2_t *)(v7 + 64);
    v35 = v27;
    v28 = *(_QWORD *)(v8 + 72);
    if (v28)
    {
      v33 = *(_QWORD *)(v8 + 216);
      v32 = v21;
      result = (unint64_t)CA::OGL::emit_shadow_uneven_round_rect(a1, &v34, (float32x2_t *)&v33, (double *)(v28 + 24), (float16x4_t *)&v32, v23, (v24 >> 33) & 1, v25, v22, v24 & 3, *(_QWORD *)(*((_QWORD *)a1 + 29) + 24));
      goto LABEL_15;
    }
    v33 = *(_QWORD *)(v8 + 216);
    v29 = *(float *)(v8 + 228);
LABEL_14:
    v31 = v21;
    result = (unint64_t)CA::OGL::emit_shadow_round_rect(a1, &v34, (float32x2_t *)&v33, (float16x4_t *)&v31, v23, (v24 >> 33) & 1, v25, v24 & 3, v29, v22, *(_WORD *)(v7 + 38) & 0xF, *(_QWORD *)(*((_QWORD *)a1 + 29) + 24));
    goto LABEL_15;
  }
  if ((v24 & 0x400000000) != 0)
  {
    v30 = *(_OWORD *)(v7 + 80);
    v34 = *(float64x2_t *)(v7 + 64);
    v35 = v30;
    v33 = 0xC040000000000000;
    v29 = 0.0;
    goto LABEL_14;
  }
LABEL_10:
  result = CA::OGL::emit_shadow_path((uint64_t)a1);
LABEL_15:
  *(_BYTE *)(*((_QWORD *)a1 + 2) + 481) &= ~1u;
  return result;
}

uint64_t CA::Render::ImageQueue::tag_detached_samples(uint64_t this, int a2)
{
  uint64_t i;
  unsigned int *v3;
  unsigned int v4;

  if (this && a2)
  {
    for (i = 0; i != a2; ++i)
    {
      if (*(_DWORD *)(this + 160 * i + 524))
      {
        v3 = (unsigned int *)(this + 160 * i + 528);
        do
          v4 = __ldaxr(v3);
        while (__stlxr(v4 | 0x1000000, v3));
      }
    }
  }
  return this;
}

uint64_t CA::OGL::render_subclass(CA::OGL::Renderer &,CA::OGL::Layer const*)::visitor::visit_subclass(uint64_t result, uint64_t a2, uint64_t a3, double *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  double scale;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  float64x2_t v15;
  double *v16;
  int64x2_t v17;
  int8x16_t v18;
  int32x4_t v19;
  const double *v20;
  float64_t v21;
  float64x2_t *v22;
  uint64_t v23;
  int8x16_t v24;
  double *v25;
  int v26;
  float64x2_t v27;
  float64x2_t v28;
  int32x4_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (!BYTE9(xmmword_1ECDC6AD0) && *(_BYTE *)(a2 + 16) == 3)
  {
    v4 = *(_QWORD *)(result + 16);
    v5 = **(_QWORD ***)(result + 8);
    v6 = v5[29];
    v7 = *(_QWORD *)(v6 + 24);
    if ((*(_BYTE *)(v7 + 144) & 0x10) != 0)
      scale = CA::Mat4Impl::mat4_get_scale((CA::Mat4Impl *)v7, 0, 0, a4);
    else
      scale = *(double *)(v7 + 128);
    v9 = v5[22];
    v10 = 1.0 / scale;
    if (v9)
    {
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
      if (v11)
      {
        if ((*(_DWORD *)(v11 + 624) & 4) != 0)
          v10 = 0.0;
      }
    }
    v12 = *(_QWORD *)(v4 + 24);
    v13 = *(_QWORD *)(v12 + 128);
    v14 = 0.0;
    if (v13)
      v14 = *(float *)(v13 + 228);
    v15 = *(float64x2_t *)(v12 + 80);
    v37 = *(float64x2_t *)(v12 + 64);
    v38 = v15;
    CA::BoundsImpl::inset(v37.f64, v10, v10);
    v27 = v38;
    v28 = v37;
    v35 = v37;
    v36 = v38;
    CA::Rect::apply_transform((int8x16_t *)&v35, *(const CA::Transform **)(v6 + 24), v16);
    v17 = vceqzq_f64(v36);
    if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v17, 1), (int8x16_t)v17).u64[0] & 0x8000000000000000) != 0
      || (v18 = vorrq_s8((int8x16_t)vcltzq_f64(v36), (int8x16_t)vcgezq_f64(v36)),
          (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v18), 1), v18).u64[0] & 0x8000000000000000) != 0))
    {
      v29 = 0uLL;
    }
    else
    {
      v19 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v35, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
      v29 = vuzp1q_s32(v19, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v35, v36), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v19));
    }
    result = CA::Shape::intersects(*(_QWORD *)(v6 + 8), (int32x2_t *)&v29);
    if ((_DWORD)result)
    {
      v21 = fmax(v14 - v10, 0.0);
      *(_QWORD *)(v5[2] + 8) = 0x3C00000000000000;
      *(_BYTE *)(v5[2] + 481) |= 1u;
      v22 = *(float64x2_t **)(v6 + 24);
      v23 = CA::OGL::transform_filter_bits(v22, v20, 1.0, 1.0);
      v24.i64[0] = 1.0;
      v26 = CA::OGL::rect_filter_bits(v22, v23, v25, v28, v27, v24, 1.0);
      v29.i64[0] = (uint64_t)&v37;
      v29.i64[1] = (uint64_t)v22;
      v30 = v26;
      v31 = 15;
      v33 = 0;
      v34 = 0;
      v32 = 0;
      result = CA::OGL::fill_round_rect((uint64_t)v5, (float64x2_t **)&v29, (double *)0xF, (double *)(*(_DWORD *)(*(_QWORD *)(v4 + 24) + 40) & 3), v21, v21);
      *(_BYTE *)(v5[2] + 481) &= ~1u;
    }
  }
  return result;
}

float64x2_t CA::Render::Updater::TransformOp::map_scale(uint64_t a1, float64x2_t *a2, uint64_t a3, double *a4)
{
  float64x2_t result;
  float64x2_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6 = 0uLL;
  if ((*(_BYTE *)(a1 + 168) & 0x10) != 0)
  {
    CA::Mat4Impl::mat4_get_scale((CA::Mat4Impl *)(a1 + 24), v6.f64, &v6.f64[1], a4);
  }
  else
  {
    v6.f64[0] = *(float64_t *)(a1 + 152);
    v6.f64[1] = v6.f64[0];
  }
  result = vmulq_f64(*a2, v6);
  *a2 = result;
  return result;
}

CATransform3D *__cdecl CATransform3DInvert(CATransform3D *__return_ptr retstr, CATransform3D *t)
{
  const double *v2;
  CATransform3D *result;
  CATransform3D *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD v11[8];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  memset(v11, 0, sizeof(v11));
  result = (CATransform3D *)CA::Mat4Impl::mat4_invert((CA::Mat4Impl *)v11, (CA::Mat4Impl *)t, v2);
  if ((_DWORD)result)
    v6 = (CATransform3D *)v11;
  else
    v6 = t;
  v7 = *(_OWORD *)&v6->m33;
  *(_OWORD *)&retstr->m31 = *(_OWORD *)&v6->m31;
  *(_OWORD *)&retstr->m33 = v7;
  v8 = *(_OWORD *)&v6->m43;
  *(_OWORD *)&retstr->m41 = *(_OWORD *)&v6->m41;
  *(_OWORD *)&retstr->m43 = v8;
  v9 = *(_OWORD *)&v6->m13;
  *(_OWORD *)&retstr->m11 = *(_OWORD *)&v6->m11;
  *(_OWORD *)&retstr->m13 = v9;
  v10 = *(_OWORD *)&v6->m23;
  *(_OWORD *)&retstr->m21 = *(_OWORD *)&v6->m21;
  *(_OWORD *)&retstr->m23 = v10;
  return result;
}

uint64_t CASRenderDisplayLayerSurface(const char *a1, CA::Render::Context *a2, uint64_t a3, mach_port_t a4, int a5, int a6, CA::Mat4Impl *a7, BOOL *a8, double a9, unint64_t *a10, CA::Render::Server *a11)
{
  uint64_t v20;
  const audit_token_t *v21;
  CFStringRef v22;
  __IOSurface *v23;
  __IOSurface *v24;
  BOOL v25;
  __IOSurface *cf;
  void (**v28)(CA::Render::RenderSurface *__hidden);
  int Width;
  int Height;
  __IOSurface *v31;
  _OWORD v32[2];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v20 = 4213784577;
  if ((CA::Render::Server::audit_token_cache_lookup(a11, (const audit_token_t *)a2) & 0x80) == 0
    && (CA::Render::Server::audit_token_cache_lookup(a11, v21) & 0x20000) == 0)
  {
    if (strnlen(a1, 0x100uLL) - 256 >= 0xFFFFFF01)
    {
      v22 = CFStringCreateWithCStringNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a1, 0x8000100u, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
      if (v22)
      {
        CFRelease(v22);
        v36 = 0;
        v34 = 0u;
        v35 = 0u;
        v33 = 0u;
        memset(v32, 0, sizeof(v32));
        v23 = IOSurfaceLookupFromMachPort(a4);
        if (v23)
        {
          v28 = &off_1E1597280;
          v31 = v23;
          v24 = v23;
          cf = v23;
          Width = IOSurfaceGetWidth(v23);
          Height = IOSurfaceGetHeight(v24);
          *(_QWORD *)&v33 = &v28;
          v25 = IOSurfaceGetProtectionOptions() != 0;
          CFRelease(cf);
          if (!a4)
            return v20;
        }
        else
        {
          v20 = 5;
          if (!a4)
            return v20;
        }
        goto LABEL_10;
      }
    }
    v20 = 4;
  }
  if (a4)
LABEL_10:
    mach_port_deallocate(*MEMORY[0x1E0C83DA0], a4);
  return v20;
}

uint64_t `anonymous namespace'::render_display_layer(const char *a1, CA::Render::Context *this, uint64_t a3, int a4, int a5, CA::Mat4Impl *a6, BOOL *a7, unint64_t *a8, double a9, _anonymous_namespace_ *a10, uint64_t a11, char a12)
{
  uint64_t v20;
  unsigned int *v21;
  __int16 v22;
  uint64_t v23;
  CFStringRef v24;
  __int16 v25;
  __int16 v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  _OWORD v31[9];
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v20 = CA::Render::Context::context_by_id(this);
  if (!v20)
    return 56;
  v21 = (unsigned int *)v20;
  v32 = 0;
  memset(v31, 0, sizeof(v31));
  CA::Transform::set((uint64_t)v31, a6, 1);
  if ((a12 & 1) != 0)
  {
    *(_DWORD *)a11 = 0;
    *(_BYTE *)(a11 + 4) = 1;
    v22 = *(_WORD *)(a11 + 80) & 0xFFFE;
  }
  else
  {
    if ((a12 & 2) == 0)
      *(_DWORD *)(a11 + 56) = 0x10000;
    v22 = *(_WORD *)(a11 + 80) | 1;
  }
  *(_WORD *)(a11 + 80) = v22;
  v24 = CFStringCreateWithCString(0, a1, 0x8000100u);
  *(_QWORD *)(a11 + 16) = v21;
  *(_QWORD *)(a11 + 24) = a3;
  *(_QWORD *)(a11 + 8) = v24;
  *(_DWORD *)(a11 + 40) = a4;
  *(_DWORD *)(a11 + 44) = a5;
  *(double *)(a11 + 48) = a9;
  *(_QWORD *)(a11 + 64) = v31;
  *(_QWORD *)(a11 + 72) = 0;
  v25 = *(_WORD *)(a11 + 80) & 0xFC80;
  *(_BYTE *)(a11 + 7) = ((unsigned __int16)a7 & 0x400) != 0;
  *(_WORD *)(a11 + 80) = (2 * (_WORD)a7) & 0x1A | (a7 >> 4) & 4 | (a7 >> 2) & 0x20 | (a7 >> 4) & 0x100 | (a7 >> 5) & 0x40 | v25 | 1;
  if (*(_QWORD *)(a11 + 32))
  {
    CA::Render::post_notification(0x14u, 0, a11, 0);
    v24 = *(CFStringRef *)(a11 + 8);
  }
  if (v24)
    CFRelease(v24);
  v26 = *(_WORD *)(a11 + 80);
  if (a8)
  {
    *a8 = *(_QWORD *)(a11 + 72) | ((unint64_t)(*(_WORD *)(a11 + 80) & 0x200) << 54);
    v26 = *(_WORD *)(a11 + 80);
  }
  if ((v26 & 0x200) != 0)
    v23 = 0;
  else
    v23 = 5;
  v27 = v21 + 2;
  do
  {
    v28 = __ldaxr(v27);
    v29 = v28 - 1;
  }
  while (__stlxr(v29, v27));
  if (!v29)
    (*(void (**)(unsigned int *))(*(_QWORD *)v21 + 16))(v21);
  return v23;
}

uint64_t `anonymous namespace'::check_capture_entitlements(uint64_t this, audit_token_t *a2, int *a3, BOOL *a4, BOOL *a5, BOOL *a6)
{
  __int16 v6;
  __int128 v11;
  unsigned int v12;
  const audit_token_t *v13;
  const audit_token_t *v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (this)
  {
    v6 = (__int16)a6;
    v11 = *(_OWORD *)(this + 16);
    v15 = *(_OWORD *)this;
    v16 = v11;
    a2->val[0] = 0;
    v12 = DWORD1(v16);
    if (DWORD1(v16) != getpid()
      && (CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)&v15, v13) & 1) == 0)
    {
      a2->val[0] = v12;
    }
    if ((CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)&v15, v13) & 8) != 0)
    {
      *(_BYTE *)a3 = (v6 & 2) == 0;
      *a4 = (v6 & 0x20) != 0;
    }
    this = CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)&v15, v14);
    if ((this & 0x800) != 0)
      *a5 = HIBYTE(v6) & 1;
  }
  return this;
}

CA::Render::LayerNode *CA::Render::LayerNode::split_node(CA::Render::LayerNode *this, double *a2)
{
  CA::Shape *v4;
  CA::Render::LayerNode *v5;
  float64x2_t v6;
  _OWORD v8[2];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v4 = (CA::Shape *)*((_QWORD *)this + 26);
  if (v4)
  {
    CA::Shape::unref(v4);
    *((_QWORD *)this + 26) = 0;
  }
  v5 = (CA::Render::LayerNode *)CA::Render::LayerNode::copy_node(this);
  CA::Render::LayerNode::clip_node(this, a2);
  v6 = vnegq_f64(*(float64x2_t *)(a2 + 2));
  v8[0] = vnegq_f64(*(float64x2_t *)a2);
  v8[1] = v6;
  CA::Render::LayerNode::clip_node(v5, (double *)v8);
  return v5;
}

double CA::Render::LayerNode::clip_node(CA::Render::LayerNode *this, double *a2)
{
  malloc_zone_t *malloc_zone;
  double *v5;
  uint64_t v6;
  int v7;
  double result;

  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  v5 = (double *)malloc_type_zone_malloc(malloc_zone, 0x30uLL, 0x8BB15036uLL);
  v6 = *((_QWORD *)this + 19);
  if (v6)
    v7 = *(_DWORD *)(v6 + 8) + 1;
  else
    v7 = 1;
  *((_DWORD *)v5 + 2) = v7;
  *(_QWORD *)v5 = v6;
  v5[2] = *a2;
  v5[3] = a2[1];
  v5[4] = a2[2];
  result = a2[3];
  v5[5] = result;
  *((_QWORD *)this + 19) = v5;
  *((_QWORD *)this + 3) |= 4uLL;
  return result;
}

_QWORD *CA::Render::LayerNode::copy_node(CA::Render::LayerNode *this)
{
  _QWORD *v2;
  const CA::Bounds *v3;
  _QWORD *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  CA::Render::LayerNode *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  malloc_zone_t *malloc_zone;
  _OWORD *v26;
  _OWORD *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  __int128 v39;
  _QWORD *v40;
  uint64_t *i;
  malloc_zone_t *v42;
  _QWORD *v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;

  v2 = CA::Render::LayerNodeAllocator::alloc_node(this);
  v4 = v2;
  v5 = *((_QWORD *)this + 4);
  v2[3] = *((_QWORD *)this + 3);
  if (v5)
  {
    v6 = (unsigned int *)(v5 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
    if (!v7)
    {
      v5 = 0;
      do
        v51 = __ldaxr(v6);
      while (__stlxr(v51 - 1, v6));
    }
  }
  v2[4] = v5;
  v8 = *((_QWORD *)this + 15);
  if (v8)
  {
    v9 = (unsigned int *)(v8 + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
    if (!v10)
    {
      v8 = 0;
      do
        v52 = __ldaxr(v9);
      while (__stlxr(v52 - 1, v9));
    }
  }
  v2[15] = v8;
  v2[5] = 0;
  v2[11] = *((_QWORD *)this + 11);
  v11 = *((_QWORD *)this + 6);
  if (v11)
  {
    v12 = (unsigned int *)(v11 + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
    if (!v13)
    {
      v11 = 0;
      do
        v53 = __ldaxr(v12);
      while (__stlxr(v53 - 1, v12));
    }
    v2[6] = v11;
  }
  v14 = (CA::Render::LayerNode *)*((_QWORD *)this + 13);
  if (v14 != (CA::Render::LayerNode *)((char *)this + 96))
  {
    v15 = v2 + 12;
    do
    {
      v16 = CA::Render::LayerNode::copy_node(v14);
      v17 = *(uint64_t **)(v16 + 8);
      v18 = *v15;
      *(_QWORD *)(v16 + 8) = v15;
      *v15 = v16;
      *v17 = v18;
      *(_QWORD *)(v18 + 8) = v17;
      v14 = (CA::Render::LayerNode *)*((_QWORD *)v14 + 1);
    }
    while (v14 != (CA::Render::LayerNode *)((char *)this + 96));
  }
  *((_OWORD *)v4 + 11) = *((_OWORD *)this + 11);
  v19 = *((_QWORD *)this + 16);
  if (v19)
  {
    v20 = (unsigned int *)(v19 + 16);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 + 1, v20));
  }
  v4[16] = v19;
  v22 = *((_QWORD *)this + 17);
  if (v22)
  {
    v23 = (unsigned int *)(v22 + 16);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 + 1, v23));
  }
  v4[17] = v22;
  if (*((_QWORD *)this + 7))
  {
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v26 = malloc_type_zone_malloc(malloc_zone, 0x80uLL, 0x8BB15036uLL);
    v4[7] = v26;
    v27 = (_OWORD *)*((_QWORD *)this + 7);
    v28 = v27[1];
    v29 = v27[2];
    v30 = v27[3];
    *v26 = *v27;
    v26[1] = v28;
    v26[2] = v29;
    v26[3] = v30;
    v31 = v27[5];
    v32 = v27[6];
    v33 = v27[7];
    v26[4] = v27[4];
    v26[5] = v31;
    v26[6] = v32;
    v26[7] = v33;
  }
  else
  {
    v4[7] = 0;
    v34 = *((_OWORD *)this + 4);
    v4[10] = *((_QWORD *)this + 10);
    *((_OWORD *)v4 + 4) = v34;
  }
  v35 = *((_QWORD *)this + 26);
  if (v35)
    v4[26] = CA::Shape::ref(v35, v3);
  v36 = *((_QWORD *)this + 27);
  if (v36)
    v4[27] = CA::Shape::ref(v36, v3);
  v37 = *((_QWORD *)this + 28);
  if (v37)
    v4[28] = CA::Shape::ref(v37, v3);
  v38 = *((_QWORD *)this + 29);
  if (v38)
    v4[29] = CA::Shape::ref(v38, v3);
  v39 = *((_OWORD *)this + 15);
  v4[19] = 0;
  v40 = v4 + 19;
  *((_OWORD *)v4 + 15) = v39;
  *((_DWORD *)v4 + 29) = *((_DWORD *)this + 29);
  for (i = (uint64_t *)*((_QWORD *)this + 19); i; v40 = v43)
  {
    v42 = (malloc_zone_t *)get_malloc_zone();
    v43 = malloc_type_zone_malloc(v42, 0x30uLL, 0x8BB15036uLL);
    *v43 = 0;
    *((_DWORD *)v43 + 2) = *((_DWORD *)i + 2);
    v43[2] = i[2];
    v43[3] = i[3];
    v43[4] = i[4];
    v43[5] = i[5];
    *v40 = v43;
    i = (uint64_t *)*i;
  }
  *((_DWORD *)v4 + 28) = *((_DWORD *)this + 28);
  v44 = *((_QWORD *)this + 32);
  if (v44)
  {
    v45 = (unsigned int *)(v44 + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 + 1, v45));
    if (!v46)
    {
      v44 = 0;
      do
        v54 = __ldaxr(v45);
      while (__stlxr(v54 - 1, v45));
    }
  }
  v4[32] = v44;
  v47 = *((_QWORD *)this + 33);
  if (v47)
  {
    v48 = (unsigned int *)(v47 + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 + 1, v48));
    if (!v49)
    {
      v47 = 0;
      do
        v55 = __ldaxr(v48);
      while (__stlxr(v55 - 1, v48));
    }
  }
  v4[33] = v47;
  return v4;
}

void CALayerMapGeometry(CA::Transaction *a1, CALayer *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v5[4];

  v5[3] = *MEMORY[0x1E0C80C00];
  v5[0] = a5;
  v5[1] = a3;
  v5[2] = a4;
  CA::Layer::map_geometry(a1, a2, (void (*)(uint64_t, __int128 *))map_fun, (void (*)(_QWORD, _QWORD))map_unfun, (uint64_t)v5);
}

uint64_t CA::Render::Updater::get_rotation_flags(CA::Render::Updater *this, CA::Transform *a2)
{
  unsigned int v2;
  float64x2_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int v13;
  float64x2_t v14;
  float64x2_t v15;
  int8x16_t v17;
  int8x16_t v18;
  double v19;
  double v20;
  float64x2_t v21;
  float64x2_t v22;
  _OWORD v23[2];
  int8x16_t v24;
  float64x2_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  LOBYTE(v2) = *((_BYTE *)this + 144);
  if ((v2 & 0x10) != 0)
  {
    v4 = *((float64x2_t *)this + 3);
    v17 = *((int8x16_t *)this + 2);
    v18 = *(int8x16_t *)this;
    v22 = *((float64x2_t *)this + 1);
    v23[0] = *(_OWORD *)this;
    v23[1] = v22;
    v24 = v17;
    v21 = v4;
    v5 = *((_OWORD *)this + 4);
    v6 = *((_OWORD *)this + 5);
    v7 = *((_OWORD *)this + 6);
    v8 = *((_OWORD *)this + 7);
    v25 = v4;
    v26 = v5;
    v19 = *((double *)&v8 + 1);
    v20 = *(double *)&v6;
    v27 = v6;
    v28 = v7;
    v29 = v8;
    if (CA::Mat4Impl::mat4_is_affine(this, (const double *)a2))
    {
      v12 = v17;
      v11 = v18;
      v10.i64[0] = v18.i64[1];
      v9.i64[0] = v17.i64[1];
      if (fabs(*(double *)&v18.i64[1]) >= 1.0e-15 || fabs(*(double *)v17.i64) >= 1.0e-15)
      {
        if (fabs(*(double *)v18.i64) < 1.0e-15 && fabs(*(double *)&v17.i64[1]) < 1.0e-15)
        {
          v24.i64[1] = 0;
          *(_QWORD *)&v23[0] = 0;
          v9.i64[0] = 0;
          v11.i64[0] = 0;
        }
      }
      else
      {
        v24.i64[0] = 0;
        *((_QWORD *)&v23[0] + 1) = 0;
        v12.i64[0] = 0;
        v10.i64[0] = 0;
      }
      if (vabdd_f64(fabs(*(double *)v10.i64), fabs(*(double *)v12.i64)) >= 1.0e-15)
      {
        if (vabdd_f64(fabs(*(double *)v11.i64), fabs(*(double *)v9.i64)) < 1.0e-15)
        {
          v15.f64[0] = NAN;
          v15.f64[1] = NAN;
          v24.i64[1] = vbslq_s8((int8x16_t)vnegq_f64(v15), v11, v9).u64[0];
        }
      }
      else
      {
        v14.f64[0] = NAN;
        v14.f64[1] = NAN;
        v24.i64[0] = vbslq_s8((int8x16_t)vnegq_f64(v14), v10, v12).u64[0];
      }
      CA::Transform::set((uint64_t)this, (CA::Mat4Impl *)v23, 1);
      v2 = *((unsigned __int8 *)this + 144);
      v13 = (v2 >> 4) & 1;
    }
    else
    {
      v13 = 1;
    }
    if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(v22), (int32x4_t)vceqzq_f64(v21))))) & 1) == 0&& v20 == 1.0&& v13&& v19 == 1.0)
    {
      *(_QWORD *)&v29 = 0;
      v26 = 0uLL;
      v27 = xmmword_18474DF40;
      CA::Transform::set((uint64_t)this, (CA::Mat4Impl *)v23, 1);
      LOBYTE(v2) = *((_BYTE *)this + 144);
    }
  }
  if ((v2 & 0x10) != 0)
    return 0;
  else
    return v2 & 7;
}

void CA::Mat4Impl::mat4_unapply_inverse_to_rect(float64x2_t *this, int8x16_t *a2, double *a3)
{
  double v3;
  double v4;
  double v5;
  uint64_t v8;
  double v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int64x2_t v13;
  int8x16_t v14;
  int64x2_t v15;
  int8x16_t v16;
  BOOL v17;
  int8x16_t v18;
  unsigned int v19;
  int32x2_t v20;
  int64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v4 = *(double *)a2[1].i64;
  v3 = *(double *)&a2[1].i64[1];
  if (v4 <= v3)
    v5 = *(double *)&a2[1].i64[1];
  else
    v5 = *(double *)a2[1].i64;
  if (v5 < 1.79769313e308)
  {
    v8 = 0;
    v9 = *(double *)&a2->i64[1];
    *(_QWORD *)&v22.f64[0] = a2->i64[0];
    v22.f64[1] = v9;
    v23.f64[0] = v4 + v22.f64[0];
    v23.f64[1] = v9;
    v24.f64[0] = v4 + v22.f64[0];
    v24.f64[1] = v3 + v9;
    v25.f64[0] = v22.f64[0];
    v25.f64[1] = v3 + v9;
    do
    {
      CA::Mat4Impl::mat4_unapply_inverse_to_point2(this, &v22.f64[v8], a3);
      v8 += 2;
    }
    while (v8 != 8);
    v10 = vbslq_s8((int8x16_t)vcgtq_f64(v23, v22), (int8x16_t)v22, (int8x16_t)v23);
    v11 = vbslq_s8((int8x16_t)vcgtq_f64(v22, v23), (int8x16_t)v22, (int8x16_t)v23);
    v12 = vbslq_s8((int8x16_t)vcgtq_f64(v25, v24), (int8x16_t)v24, (int8x16_t)v25);
    v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v24, v25), (int8x16_t)v24, (int8x16_t)v25);
    v14 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v12, (float64x2_t)v10), v10, v12);
    v15 = vcgtq_f64((float64x2_t)v11, (float64x2_t)v13);
    v16 = (int8x16_t)vsubq_f64((float64x2_t)vbslq_s8((int8x16_t)v15, v11, (int8x16_t)v13), (float64x2_t)v14);
    *(double *)v13.i64 = vaddvq_f64((float64x2_t)v16);
    v17 = (v13.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    v13.i64[0] &= ~0x8000000000000000;
    v15.i64[0] = 0x7FF0000000000000;
    v18 = vbslq_s8((int8x16_t)vdupq_lane_s64(vcgtq_s64(v15, v13).i64[0], 0), v16, (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL));
    v19 = v17;
    v20 = vdup_n_s32(v19);
    v21.i64[0] = v20.u32[0];
    v21.i64[1] = v20.u32[1];
    *a2 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v21, 0x3FuLL)), v14, (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL));
    a2[1] = v18;
  }
}

void CA::Render::MatchMoveAnimation::apply(CA::Render::MatchMoveAnimation *this, CA::Render::AnimationEvaluator *a2, double a3)
{
  unint64_t v3;
  CA::Render::LayerNode *v5;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  CA::Render::LayerNode *v11;
  unint64_t v12;
  CA::Render::LayerNode *v13;
  int v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  float64x2_t v21;
  float64x2_t *v22;
  uint64_t v23;
  const double *v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  float64x2_t v36;
  unsigned int v37;
  double v38;
  int8x16_t v39;
  int8x16_t v40;
  __double2 v41;
  float64x2_t v42;
  float64x2_t v43;
  int64x2_t v44;
  uint64_t v45;
  float64x2_t v46;
  float64x2_t v47;
  const double *v48;
  double *v49;
  const unsigned int *v50;
  unsigned int *v51;
  float64x2_t v52;
  double v53;
  unsigned int v54;
  int v55;
  float64x2_t v56;
  int v57;
  __int128 v58;
  __int128 v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  float64x2_t v68;
  double v69[4];
  double v70[2];
  __int128 v71;
  __int128 v72;
  __int128 v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  uint64_t v78;
  float64x2x2_t v79;
  float64x2x2_t v80;

  v78 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)this + 16);
  if (!v3)
    return;
  v5 = (CA::Render::LayerNode *)*((_QWORD *)a2 + 4);
  if (!v5)
    return;
  v7 = *((_QWORD *)a2 + 3);
  v8 = *(_QWORD **)(v7 + 808);
  v9 = *(_QWORD **)(v7 + 800);
  while (v8 != v9)
  {
    v8 -= 5;
    v10 = std::__hash_table<std::__hash_value_type<CA::Render::Object *,x_link_struct>,std::__unordered_map_hasher<CA::Render::Object *,std::__hash_value_type<CA::Render::Object *,x_link_struct>,std::hash<CA::Render::Object *>,std::equal_to<CA::Render::Object *>,true>,std::__unordered_map_equal<CA::Render::Object *,std::__hash_value_type<CA::Render::Object *,x_link_struct>,std::equal_to<CA::Render::Object *>,std::hash<CA::Render::Object *>,true>,std::allocator<std::__hash_value_type<CA::Render::Object *,x_link_struct>>>::find<CA::Render::Object *>(v8, v3);
    if (v10)
    {
      v11 = (CA::Render::LayerNode *)v10[3];
      goto LABEL_8;
    }
  }
  v11 = 0;
LABEL_8:
  CA::Render::Update::mark_root_dependence((CA::Render::LayerNode *)(*(unsigned int *)(v7 + 1064) | ((unint64_t)*(unsigned __int16 *)(v7 + 1068) << 32)), v11, v5);
  if (!v11)
    return;
  v12 = *((_QWORD *)this + 15);
  if (!v12)
    goto LABEL_13;
  if ((v12 & 1) == 0)
  {
    if (*(_DWORD *)v12)
    {
      LODWORD(v12) = *(_DWORD *)(v12 + 4);
      goto LABEL_15;
    }
LABEL_13:
    v13 = (CA::Render::LayerNode *)*((_QWORD *)a2 + 4);
    goto LABEL_17;
  }
  v12 >>= 1;
LABEL_15:
  v13 = (CA::Render::LayerNode *)*((_QWORD *)a2 + 4);
  if ((_DWORD)v12 != 429)
  {
LABEL_17:
    v14 = 0;
    v15 = 0;
    if ((*((_BYTE *)this + 15) & 0x10) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
  v14 = 1;
LABEL_18:
  v13 = (CA::Render::LayerNode *)*((_QWORD *)v13 + 11);
  v15 = v14;
  if (!v13)
    return;
LABEL_19:
  v16 = *((_QWORD *)this + 17);
  v17 = *(_DWORD *)(v16 + 16);
  if (v17 >> 1 >= 4)
    v18 = 4;
  else
    v18 = v17 >> 1;
  if (!(_DWORD)v18)
    return;
  v19 = 0;
  v76 = 0u;
  v77 = 0u;
  v74 = 0u;
  v75 = 0u;
  do
  {
    v20 = (_QWORD *)&v74.f64[v19];
    *v20 = *(_QWORD *)(v16 + v19 * 8 + 24);
    v20[1] = *(_QWORD *)(v16 + v19 * 8 + 32);
    v19 += 2;
  }
  while (2 * v18 != v19);
  if ((*((_BYTE *)this + 15) & 0x20) != 0)
  {
    v21 = *(float64x2_t *)(*((_QWORD *)v11 + 4) + 80);
    v22 = &v74;
    v23 = v18;
    do
    {
      *v22 = vmulq_f64(*v22, v21);
      ++v22;
      --v23;
    }
    while (v23);
  }
  *(_QWORD *)&v60.f64[0] = off_1E15997E8;
  *(_QWORD *)&v60.f64[1] = v18;
  *(_QWORD *)&v61.f64[0] = &v74;
  CA::Render::LayerNode::MapGeometry::map((uint64_t)&v60, v11, v13);
  v25 = *((_QWORD *)a2 + 5);
  if ((_DWORD)v18 == 2)
  {
    v26 = 0.5;
    if (v15)
    {
      v27 = *(_QWORD *)(v25 + 128);
      if (v27)
      {
        v26 = *(double *)(v27 + 168);
      }
      else
      {
        v26 = 0.0;
        if ((*(_BYTE *)(v25 + 45) & 0x40) == 0)
          v26 = 0.5;
      }
    }
    v36 = vsubq_f64(v75, v74);
    v68 = vmlaq_n_f64(v74, v36, v26);
    if (!v15)
      goto LABEL_62;
    v37 = *((_DWORD *)this + 3);
    if ((v37 & 0xC000000) == 0)
      goto LABEL_62;
    v66 = 0u;
    v67 = 0u;
    v64 = 0u;
    v65 = 0u;
    v62 = 0u;
    v63 = 0u;
    v60 = 0u;
    v61 = 0u;
    if ((v37 & 0x8000000) != 0)
    {
      v56 = v36;
      v38 = atan2(v36.f64[1], v36.f64[0]);
      v63 = 0u;
      v64 = 0u;
      v65 = xmmword_18474DF40;
      v67 = xmmword_18474DF50;
      v41 = __sincos_stret(v38);
      *(double *)v40.i64 = v41.__cosval;
      *(double *)v39.i64 = v41.__sinval;
      if (fabs(v41.__sinval) >= 0.0000001)
      {
        if (fabs(v41.__cosval) < 0.0000001)
        {
          v40.i64[0] = 1.0;
          v52.f64[0] = NAN;
          v52.f64[1] = NAN;
          v39.i64[0] = vbslq_s8((int8x16_t)vnegq_f64(v52), v40, v39).u64[0];
          v40.i64[0] = 0;
        }
      }
      else
      {
        v39.i64[0] = 1.0;
        v42.f64[0] = NAN;
        v42.f64[1] = NAN;
        v40.i64[0] = vbslq_s8((int8x16_t)vnegq_f64(v42), v39, v40).u64[0];
        v39.i64[0] = 0;
      }
      v36 = v56;
      *(_QWORD *)&v60.f64[0] = v40.i64[0];
      *(_QWORD *)&v60.f64[1] = v39.i64[0];
      v62.f64[0] = -*(double *)v39.i64;
      *(_QWORD *)&v62.f64[1] = v40.i64[0];
    }
    else
    {
      v60 = (float64x2_t)xmmword_18474DF40;
      v62 = (float64x2_t)xmmword_18474DF50;
      v63 = 0uLL;
      v64 = 0uLL;
      v65 = xmmword_18474DF40;
      v67 = xmmword_18474DF50;
    }
    if ((v37 & 0x4000000) != 0)
    {
      v53 = sqrt(vaddvq_f64(vmulq_f64(v36, v36))) / *(double *)(v25 + 80);
      v60 = vmulq_n_f64(v60, v53);
      v61 = vmulq_n_f64((float64x2_t)0, v53);
      v62 = vmulq_n_f64(v62, v53);
      v63 = v61;
      v64 = 0u;
      v65 = xmmword_18474DF40;
    }
    LODWORD(v70[0]) = 557;
    v50 = (const unsigned int *)((v37 >> 9) & 1);
    v51 = (unsigned int *)v70;
    goto LABEL_61;
  }
  if ((_DWORD)v18 != 1)
  {
    if (v17 < 8)
      return;
    if (v15)
    {
      v28 = *(_QWORD *)(v25 + 128);
      if (v28)
      {
        v30 = *(double *)(v28 + 168);
        v29 = *(double *)(v28 + 176);
      }
      else
      {
        v29 = 0.0;
        if ((*(_BYTE *)(v25 + 45) & 0x40) == 0)
          v29 = 0.5;
        v30 = v29;
      }
      *(double *)&v59 = v30;
      *((double *)&v59 + 1) = v29;
    }
    else
    {
      __asm { FMOV            V0.2D, #0.5 }
      v59 = _Q0;
      v29 = 0.5;
      v30 = 0.5;
    }
    v43 = vmlaq_n_f64(v74, vsubq_f64(v75, v74), v30);
    v44 = (int64x2_t)vmlaq_n_f64(v43, vmlaq_n_f64(vsubq_f64(v77, v43), vsubq_f64(v76, v77), v30), v29);
    v68 = (float64x2_t)v44;
    if (!v15)
      goto LABEL_62;
    v45 = 0;
    v72 = 0u;
    v73 = 0u;
    *(_OWORD *)v70 = 0u;
    v71 = 0u;
    v46 = (float64x2_t)vdupq_lane_s64(v44.i64[0], 0);
    v47 = (float64x2_t)vdupq_laneq_s64(v44, 1);
    do
    {
      v48 = &v74.f64[v45];
      v79 = vld2q_f64(v48);
      v80.val[0] = vsubq_f64(v79.val[0], v46);
      v80.val[1] = vsubq_f64(v79.val[1], v47);
      v49 = &v70[v45];
      vst2q_f64(v49, v80);
      v45 += 4;
    }
    while (v45 != 8);
    v66 = 0u;
    v67 = 0u;
    v64 = 0u;
    v65 = 0u;
    v62 = 0u;
    v63 = 0u;
    v60 = 0u;
    v61 = 0u;
    v58 = *(_OWORD *)(v25 + 80);
    CA::Mat4Impl::mat4_set_corner_matrix((uint64_t)&v60, v70, (double *)&v58, (double *)&v59);
    v57 = 557;
    v50 = (const unsigned int *)((*((_DWORD *)this + 3) >> 9) & 1);
    v51 = (unsigned int *)&v57;
LABEL_61:
    CA::Render::Layer::set_property_value((CA::Render::Layer *)v25, v51, (double *)1, v50, (CA::Render::Vector *)0x10, v60.f64, v24);
    goto LABEL_62;
  }
  v68 = v74;
LABEL_62:
  v54 = *((_DWORD *)this + 3);
  v55 = (v54 >> 8) & 0x30000;
  if (!v55)
    return;
  if (v55 == 0x20000 || v55 == 0x10000)
  {
    memset(v69, 0, sizeof(v69));
    if ((unint64_t)CA::Render::Layer::get_keypath_value((CA::Render::Layer *)v25, (unint64_t *)this + 15, 4uLL, v69, 0) < 2)return;
    v54 = *((_DWORD *)this + 3);
    if ((v54 & 0x1000000) == 0)
      v68.f64[0] = v69[0];
    if ((v54 & 0x2000000) == 0)
      v68.f64[1] = v69[1];
  }
  CA::Render::Layer::set_keypath_value((CA::Render::Layer *)v25, (unint64_t *)this + 15, (const unsigned int *)((v54 >> 9) & 1), (CA::Render::Vector *)2, v68.f64);
}

void CA::Render::Updater::prepare_portal(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  int v9;
  uint64_t v10;
  unsigned int *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  malloc_zone_t *malloc_zone;
  void *v30;
  float v31;
  uint64_t v32;
  int v33;
  float v34;
  uint64_t v35;
  double v36;
  double v37;
  double v38;
  CA::Render::LayerNode *v39;
  uint64_t v40;
  uint64_t *v41;
  const double *v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  double v48;
  float64x2_t v49;
  int64x2_t v50;
  uint64_t v51;
  float64x2_t v52;
  float64x2_t v53;
  const double *v54;
  double *v55;
  const double *v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  float64x2_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  float64x2_t v71;
  float64x2_t *v72;
  double v73;
  uint64_t v79;
  float64x2_t v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  double *v86;
  double v87;
  double v88;
  unint64_t v89;
  unint64_t v90;
  int v91;
  uint64_t v92;
  float v93;
  float v94;
  int v95;
  float v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  float64_t v103;
  int is_object;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  unsigned int v112;
  uint64_t v113;
  CA::Render::Update *v114;
  CA::Render::LayerNode *v115;
  unsigned int *v116;
  unsigned int v117;
  unsigned int v118;
  uint64_t v119;
  uint64_t v120;
  double v121;
  double v122;
  double v123;
  double v124;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void *matched;
  const double *v131;
  uint64_t v132;
  double v133;
  double v134;
  double v135;
  CA::Render::LayerNode *v136;
  double *v137;
  uint64_t i;
  int v139;
  float64x2_t v140;
  unsigned int v142;
  __int128 v143;
  double v144[2];
  float64x2_t v145;
  __int128 v146;
  uint64_t v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  uint64_t v156;
  float v157;
  double v158[8];
  float64x2_t buf[2];
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  uint64_t v170;
  float64x2x2_t v171;
  float64x2x2_t v172;

  v170 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a4 + 56);
  if (v4)
  {
    if ((*(_BYTE *)(v4 + 13) & 1) == 0)
    {
      v5 = *(_QWORD *)(v4 + 48);
      if (v5)
      {
        v7 = a3;
        v9 = byte_1ECDC6B0E;
        v10 = *a1;
        v11 = (unsigned int *)(*a1 + 1064);
        v139 = *v11;
        v157 = 1.0;
        v156 = 0;
        v168 = 0u;
        v169 = 0u;
        v166 = 0u;
        v167 = 0u;
        *(_BYTE *)(v4 + 213) = 0;
        if ((*(_BYTE *)(a4 + 13) & 0x20) != 0)
        {
          *(_QWORD *)(v10 + 96) |= 0x4000000000uLL;
          v123 = *(double *)(v10 + 72);
          v124 = *(double *)(v10 + 80);
          if (v124 >= v123)
          {
            if (v123 == 0.0 || v124 <= v123)
              v126 = *(_QWORD *)(v10 + 88) | 0x4000000000;
            else
              v126 = 0x4000000000;
            *(_QWORD *)(v10 + 88) = v126;
            *(double *)(v10 + 80) = v123;
          }
          *(_QWORD *)(a2 + 64) |= 0x10000007uLL;
          if ((*v11 & 4) == 0)
          {
            v127 = a3;
            do
            {
              v128 = v127;
              v127 = *(_QWORD *)(v127 + 88);
            }
            while (v127);
            v129 = *(_QWORD *)(v128 + 40);
            if (v129)
              *(_QWORD *)(v129 + 96) |= 0x1000000000000000uLL;
          }
          v164 = 0u;
          v165 = 0u;
          v162 = 0u;
          v163 = 0u;
          v160 = 0u;
          v161 = 0u;
          memset(buf, 0, sizeof(buf));
          matched = CA::Render::PortalState::match_cross_display_layer(v4, buf, &v157, &v156);
          if (matched)
          {
            v32 = (uint64_t)matched;
            v132 = *(_QWORD *)(*((_QWORD *)matched + 18) + 24);
            if (v132)
              LODWORD(v132) = *(_DWORD *)(v132 + 16);
            if ((_DWORD)v132 == *(_DWORD *)(v4 + 28))
            {
              v133 = *((double *)matched + 9);
              v134 = *((double *)matched + 10);
              v135 = *((double *)matched + 11);
              v166.f64[0] = *((float64_t *)matched + 8);
              v166.f64[1] = v133;
              v167.f64[0] = v134 + v166.f64[0];
              v167.f64[1] = v133;
              v168.f64[0] = v134 + v166.f64[0];
              v168.f64[1] = v135 + v133;
              v169.f64[0] = v166.f64[0];
              v169.f64[1] = v135 + v133;
              v148 = xmmword_18474DF40;
              v149 = 0u;
              v150 = xmmword_18474DF50;
              v151 = 0u;
              v152 = 0u;
              v153 = xmmword_18474DF40;
              v154 = 0u;
              v155 = xmmword_18474DF50;
              *(_QWORD *)&v158[0] = &off_1E15997A0;
              *(_QWORD *)&v158[1] = &v148;
              v136 = *(CA::Render::LayerNode **)(v7 + 88);
              if (v136)
                CA::Render::LayerNode::MapGeometry::map((uint64_t)v158, 0, v136);
              CA::Mat4Impl::mat4_concat(buf, buf[0].f64, (const double *)&v148, v131);
              for (i = 0; i != 8; i += 2)
                CA::Mat4Impl::mat4_apply_to_point2(buf, &v166.f64[i], v137);
              v16 = a1;
              v17 = v139;
LABEL_40:
              *(_DWORD *)(v4 + 12) |= 0x100u;
              *(_BYTE *)(v4 + 213) = 1;
              v146 = *(_OWORD *)(a2 + 32);
              v147 = *(_QWORD *)(a2 + 48);
              v40 = *(_QWORD *)(a2 + 16);
              ++*(_DWORD *)(a2 + 132);
              *(_QWORD *)(a2 + 40) = 0;
              *(_QWORD *)(a2 + 48) = 0;
              *(_QWORD *)(a2 + 32) = 0x7FF0000000000000;
              *(_QWORD *)(a2 + 16) = *(_QWORD *)(v4 + 56);
              v41 = (uint64_t *)(*v16 + 800);
              memset(buf, 0, sizeof(buf));
              LODWORD(v160) = 1065353216;
              std::vector<std::unordered_map<void *,CA::Render::LayerNode *>>::push_back[abi:nn180100](v41, (uint64_t *)buf);
              std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)buf);
              CA::Render::Layer::set_modifiers((unsigned int *)v32, 0);
              v45 = *(_QWORD *)(v7 + 88);
              if (v45)
              {
                v46 = *(_QWORD *)(v32 + 128);
                if (v46)
                {
                  v48 = *(double *)(v46 + 168);
                  v47 = *(double *)(v46 + 176);
                }
                else
                {
                  v47 = 0.0;
                  if ((*(_BYTE *)(v32 + 45) & 0x40) == 0)
                    v47 = 0.5;
                  v48 = v47;
                }
                v144[0] = v48;
                v144[1] = v47;
                v49 = vmlaq_n_f64(v166, vsubq_f64(v167, v166), v48);
                v50 = (int64x2_t)vmlaq_n_f64(v49, vmlaq_n_f64(vsubq_f64(v169, v49), vsubq_f64(v168, v169), v48), v47);
                v145 = (float64x2_t)v50;
                v140 = (float64x2_t)v50;
                if ((*(_BYTE *)(a4 + 13) & 8) != 0)
                {
                  v51 = 0;
                  memset(v158, 0, sizeof(v158));
                  v52 = (float64x2_t)vdupq_lane_s64(v50.i64[0], 0);
                  v53 = (float64x2_t)vdupq_laneq_s64(v50, 1);
                  do
                  {
                    v54 = &v166.f64[v51];
                    v171 = vld2q_f64(v54);
                    v172.val[0] = vsubq_f64(v171.val[0], v52);
                    v172.val[1] = vsubq_f64(v171.val[1], v53);
                    v55 = &v158[v51];
                    vst2q_f64(v55, v172);
                    v51 += 4;
                  }
                  while (v51 != 8);
                  v164 = 0u;
                  v165 = 0u;
                  v162 = 0u;
                  v163 = 0u;
                  v160 = 0u;
                  v161 = 0u;
                  memset(buf, 0, sizeof(buf));
                  v143 = *(_OWORD *)(v32 + 80);
                  CA::Mat4Impl::mat4_set_corner_matrix((uint64_t)buf, v158, (double *)&v143, v144);
                  v142 = 557;
                  CA::Render::Layer::set_property_value((CA::Render::Layer *)v32, &v142, (double *)1, 0, (CA::Render::Vector *)0x10, buf[0].f64, v56);
                  if ((v17 & 4) == 0)
                  {
                    v57 = *(_OWORD *)(v4 + 96);
                    v58 = *(_OWORD *)(v4 + 112);
                    v59 = *(_OWORD *)(v4 + 128);
                    v148 = *(_OWORD *)(v4 + 80);
                    v149 = v57;
                    v150 = v58;
                    v60 = *(_OWORD *)(v4 + 144);
                    v44 = *(_OWORD *)(v4 + 160);
                    v61 = *(_OWORD *)(v4 + 176);
                    v62 = *(_OWORD *)(v4 + 192);
                    v151 = v59;
                    v152 = v60;
                    v153 = v44;
                    v154 = v61;
                    v155 = v62;
                    if (*(double *)&v148 == buf[0].f64[0])
                    {
                      v119 = 1;
                      while (v119 != 16)
                      {
                        v120 = v119;
                        v121 = *((double *)&v148 + v119);
                        v122 = buf[0].f64[v119++];
                        if (v121 != v122)
                        {
                          if ((unint64_t)(v120 - 1) <= 0xE)
                            goto LABEL_52;
                          break;
                        }
                      }
                    }
                    else
                    {
LABEL_52:
                      *(_QWORD *)(a2 + 64) |= 0x10000003uLL;
                      v63 = buf[1];
                      v44 = v160;
                      v64 = v161;
                      v65 = v162;
                      v66 = v163;
                      v67 = v164;
                      v68 = v165;
                      *(float64x2_t *)(v4 + 80) = buf[0];
                      *(float64x2_t *)(v4 + 96) = v63;
                      *(_OWORD *)(v4 + 112) = v44;
                      *(_OWORD *)(v4 + 128) = v64;
                      *(_OWORD *)(v4 + 144) = v65;
                      *(_OWORD *)(v4 + 160) = v66;
                      *(_OWORD *)(v4 + 176) = v67;
                      *(_OWORD *)(v4 + 192) = v68;
                    }
                  }
                  *(_QWORD *)(v32 + 40) &= ~0x200uLL;
                }
                else
                {
                  CA::Render::Layer::set_transform((unsigned int *)v32, 0);
                }
                if ((*(_BYTE *)(a4 + 13) & 4) != 0)
                {
                  if ((*(_BYTE *)(*(_QWORD *)(v45 + 32) + 13) & 9) != 0)
                  {
                    v72 = *(float64x2_t **)(v45 + 56);
                    if (v72)
                      CA::Mat4Impl::mat4_apply_to_point2(v72, v145.f64, (double *)v43);
                    else
                      v145 = vaddq_f64(v140, *(float64x2_t *)(v45 + 64));
                  }
                  v79 = *(_QWORD *)(v7 + 56);
                  if (v79)
                  {
                    v80 = *(float64x2_t *)(v79 + 16);
                    v81 = *(_OWORD *)(v79 + 32);
                    v82 = *(_OWORD *)(v79 + 48);
                    buf[0] = *(float64x2_t *)v79;
                    buf[1] = v80;
                    v160 = v81;
                    v161 = v82;
                    v83 = *(_OWORD *)(v79 + 80);
                    v84 = *(_OWORD *)(v79 + 96);
                    v85 = *(_OWORD *)(v79 + 112);
                    v162 = *(_OWORD *)(v79 + 64);
                    v163 = v83;
                    v164 = v84;
                    v165 = v85;
                    CA::Mat4Impl::mat4_invert((CA::Mat4Impl *)buf, (CA::Mat4Impl *)buf, (const double *)v43);
                    CA::Mat4Impl::mat4_unapply_inverse_to_point2(buf, v145.f64, v86);
                  }
                  else
                  {
                    v145 = vsubq_f64(v145, *(float64x2_t *)(v7 + 64));
                  }
                }
                else
                {
                  v69 = *(_QWORD *)(v7 + 32);
                  v70 = *(_QWORD *)(v69 + 128);
                  if (v70)
                  {
                    v71 = *(float64x2_t *)(v70 + 168);
                  }
                  else
                  {
                    v73 = 0.0;
                    if ((*(_BYTE *)(v69 + 45) & 0x40) == 0)
                      v73 = 0.5;
                    v71 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v73, 0);
                  }
                  v145 = vmulq_f64(*(float64x2_t *)(v69 + 80), v71);
                  __asm { FMOV            V0.2D, #0.5 }
                  buf[0] = _Q0;
                  CA::Render::Layer::set_anchor_point((_QWORD *)v32, (uint64_t)buf);
                }
                if ((v17 & 4) == 0)
                {
                  v87 = *(double *)(v4 + 64);
                  if (v87 != v145.f64[0])
                  {
                    if (v87 < 0.0 == v145.f64[0] >= 0.0)
                      goto LABEL_80;
                    v90 = *(_QWORD *)&v87 - *(_QWORD *)&v145.f64[0];
                    if ((uint64_t)(*(_QWORD *)&v87 - *(_QWORD *)&v145.f64[0]) < 0)
                      v90 = *(_QWORD *)&v145.f64[0] - *(_QWORD *)&v87;
                    if (v90 > 3)
                      goto LABEL_80;
                  }
                  v88 = *(double *)(v4 + 72);
                  if (v88 != v145.f64[1])
                  {
                    if (v88 < 0.0 == v145.f64[1] >= 0.0)
                      goto LABEL_80;
                    v89 = *(_QWORD *)&v88 - *(_QWORD *)&v145.f64[1];
                    if ((uint64_t)(*(_QWORD *)&v88 - *(_QWORD *)&v145.f64[1]) < 0)
                      v89 = *(_QWORD *)&v145.f64[1] - *(_QWORD *)&v88;
                    if (v89 >= 4)
                    {
LABEL_80:
                      *(_QWORD *)(a2 + 64) |= 0x10000003uLL;
                      *(float64x2_t *)(v4 + 64) = v145;
                    }
                  }
                }
                *(float64x2_t *)(v32 + 48) = v145;
              }
              if ((*(_BYTE *)(a4 + 13) & 2) != 0)
              {
                v92 = *(_QWORD *)(v7 + 88);
                if (v92)
                {
                  v93 = 1.0;
                  do
                  {
                    LOBYTE(v44) = *(_BYTE *)(*(_QWORD *)(v92 + 32) + 32);
                    *(float *)&v44 = (float)v44;
                    v93 = (float)(v93 * 0.0039216) * *(float *)&v44;
                    v92 = *(_QWORD *)(v92 + 88);
                  }
                  while (v92);
                }
                else
                {
                  v93 = 1.0;
                }
                v94 = v157 / v93;
                v95 = fabs(v157 / v93);
                v96 = 0.0;
                if (v95 < 2139095040)
                {
                  if (v94 > 1.0)
                    v94 = 1.0;
                  if (v94 >= 0.0)
                    v96 = v94;
                }
                if ((v17 & 4) == 0 && *(float *)(v4 + 208) != v96)
                {
                  *(_QWORD *)(a2 + 64) |= 0x10000003uLL;
                  *(float *)(v4 + 208) = v96;
                }
                v91 = (int)(float)((float)(v96 * 255.0) + 0.5);
              }
              else
              {
                LOBYTE(v91) = -1;
              }
              *(_BYTE *)(v32 + 32) = v91;
              v97 = *(_QWORD *)(a4 + 48);
              if (v97)
              {
                v98 = *(unsigned int *)(v97 + 16);
                if ((_DWORD)v98)
                {
                  v99 = (uint64_t *)(v97 + 24);
                  v100 = 8 * v98;
                  do
                  {
                    v101 = *v99;
                    v102 = *(_DWORD *)(*v99 + 16);
                    if (v102)
                      *(_QWORD *)&v103 = (2 * v102) | 1u;
                    else
                      v103 = 0.0;
                    buf[0].f64[0] = v103;
                    is_object = CA::Render::Layer::keypath_is_object((CA::Render::Layer *)v32, (const CA::Render::Layer **)buf, (void *const *)v43);
                    v43 = *(_QWORD *)(v101 + 24);
                    if (is_object)
                    {
                      CA::Render::Layer::set_keypath_object((CA::Render::Layer *)v32, (const CA::Render::Layer **)buf, (void *const *)v43);
                    }
                    else if (*(_BYTE *)(v43 + 12) == 56)
                    {
                      CA::Render::Layer::set_keypath_value((CA::Render::Layer *)v32, (unint64_t *)buf, 0, (CA::Render::Vector *)*(unsigned int *)(v43 + 16), (double *)(v43 + 24));
                    }
                    ++v99;
                    v100 -= 8;
                  }
                  while (v100);
                }
              }
              v105 = *(_QWORD *)a2;
              v106 = *(_QWORD *)(*(_QWORD *)a2 + 24);
              if ((*(_DWORD *)(a4 + 12) & 0x1000) != 0)
                v107 = *(_QWORD *)(*(_QWORD *)a2 + 24);
              else
                v107 = v106 | 0x8000000;
              v108 = v107 | 0x20000000;
              *(_QWORD *)(v105 + 24) = v108;
              if ((*(_BYTE *)(a4 + 13) & 8) != 0)
              {
                v109 = *(_QWORD *)(v7 + 88);
                if (v109)
                  *(_QWORD *)(v105 + 24) = (*(_DWORD *)(v109 + 24) ^ v156) & 1 ^ (unint64_t)v108;
              }
              v110 = v106 & 0x8000001;
              v111 = *(_DWORD *)(v32 + 12);
              if ((v111 & 0x1000) != 0 || !CA::Render::Layer::is_containerable((CA::Render::Layer *)v32, v42))
                v112 = v111 & 0xFFFFF7FF;
              else
                v112 = v111 | 0x800;
              *(_DWORD *)(v32 + 12) = v112;
              v113 = *(_QWORD *)(*a1 + 1040);
              *(_QWORD *)(*a1 + 1040) = a4;
              CA::Render::Updater::prepare_sublayer0(a1, a2, v32);
              v114 = (CA::Render::Update *)*a1;
              *((_QWORD *)v114 + 130) = v113;
              *(_QWORD *)(*(_QWORD *)a2 + 24) = *(_QWORD *)(*(_QWORD *)a2 + 24) & 0xFFFFFFFFF7FFFFFELL | v110;
              CA::Render::Update::pop_dependence_group(v114, v115);
              *(_QWORD *)(a2 + 16) = v40;
              *(_OWORD *)(a2 + 32) = v146;
              *(_QWORD *)(a2 + 48) = v147;
              --*(_DWORD *)(a2 + 132);
              *(_DWORD *)(v4 + 12) &= ~0x100u;
            }
            v116 = (unsigned int *)(v32 + 8);
            do
            {
              v117 = __ldaxr(v116);
              v118 = v117 - 1;
            }
            while (__stlxr(v118, v116));
            if (!v118)
              (*(void (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
          }
        }
        else
        {
          v12 = *(_QWORD **)(v10 + 808);
          v13 = *(_QWORD **)(v10 + 800);
          do
          {
            if (v12 == v13)
            {
              if ((*v11 & 4) == 0)
              {
                do
                {
                  v18 = v7;
                  v7 = *(_QWORD *)(v7 + 88);
                }
                while (v7);
                v19 = *(_QWORD *)(v18 + 40);
                if (v19)
                  *(_QWORD *)(v19 + 96) |= 0x1000000000000000uLL;
              }
              goto LABEL_16;
            }
            v12 -= 5;
            v14 = std::__hash_table<std::__hash_value_type<CA::Render::Object *,x_link_struct>,std::__unordered_map_hasher<CA::Render::Object *,std::__hash_value_type<CA::Render::Object *,x_link_struct>,std::hash<CA::Render::Object *>,std::equal_to<CA::Render::Object *>,true>,std::__unordered_map_equal<CA::Render::Object *,std::__hash_value_type<CA::Render::Object *,x_link_struct>,std::equal_to<CA::Render::Object *>,std::hash<CA::Render::Object *>,true>,std::allocator<std::__hash_value_type<CA::Render::Object *,x_link_struct>>>::find<CA::Render::Object *>(v12, v5);
          }
          while (!v14);
          v15 = v14[3];
          CA::Render::Update::mark_root_dependence((CA::Render::LayerNode *)(*v11 | ((unint64_t)*((unsigned __int16 *)v11 + 2) << 32)), (CA::Render::LayerNode *)v15, (CA::Render::LayerNode *)v7);
          if (v15)
          {
            v16 = a1;
            v17 = v139;
            if (v9)
            {
              if (x_log_hook_p())
              {
                x_log_();
              }
              else
              {
                v24 = x_log_category_render;
                if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
                {
                  v25 = *(_QWORD *)(a4 + 24);
                  v26 = *(_QWORD *)(a4 + 32);
                  v27 = *(_DWORD *)(a4 + 40);
                  LODWORD(buf[0].f64[0]) = 134218496;
                  *(_QWORD *)((char *)buf[0].f64 + 4) = v25;
                  WORD2(buf[0].f64[1]) = 2048;
                  *(_QWORD *)((char *)&buf[0].f64[1] + 6) = v26;
                  HIWORD(buf[1].f64[0]) = 1024;
                  LODWORD(buf[1].f64[1]) = v27;
                  _os_log_impl(&dword_184457000, v24, OS_LOG_TYPE_DEFAULT, "Portal %lx found source %lx from context %x", (uint8_t *)buf, 0x1Cu);
                }
              }
            }
            v28 = *(_QWORD *)(v15 + 40);
            if (v28 && (*(_QWORD *)(v28 + 96) & 0x10000001) != 0)
              *(_QWORD *)(a2 + 64) |= 0x10000001uLL;
            if (*(_BYTE *)(v4 + 212))
            {
              *(_QWORD *)(a2 + 64) |= 0x10000001uLL;
              *(_BYTE *)(v4 + 212) = 0;
            }
            malloc_zone = (malloc_zone_t *)get_malloc_zone();
            v30 = malloc_type_zone_calloc(malloc_zone, 1uLL, 0x98uLL, 0x743898A5uLL);
            v32 = (uint64_t)v30;
            if (v30)
              CA::Render::Layer::Layer((uint64_t)v30, *(const CA::Render::Layer **)(v15 + 32));
            v33 = *(_DWORD *)(a4 + 12);
            if ((v33 & 0x100) != 0)
            {
              *(_DWORD *)(v15 + 116) = 0;
              v33 = *(_DWORD *)(a4 + 12);
            }
            if ((v33 & 0x200) != 0)
            {
              v34 = 1.0;
              v35 = v15;
              do
              {
                LOBYTE(v31) = *(_BYTE *)(*(_QWORD *)(v35 + 32) + 32);
                v31 = (float)LODWORD(v31);
                v34 = v31 * (float)(0.0039216 * v34);
                v35 = *(_QWORD *)(v35 + 88);
              }
              while (v35);
              v157 = v34;
            }
            v156 = *(_QWORD *)(v15 + 24);
            v36 = *(double *)(v32 + 72);
            v37 = *(double *)(v32 + 80);
            v38 = *(double *)(v32 + 88);
            v166.f64[0] = *(float64_t *)(v32 + 64);
            v166.f64[1] = v36;
            v167.f64[0] = v37 + v166.f64[0];
            v167.f64[1] = v36;
            v168.f64[0] = v37 + v166.f64[0];
            v168.f64[1] = v38 + v36;
            v169.f64[0] = v166.f64[0];
            v169.f64[1] = v38 + v36;
            v39 = *(CA::Render::LayerNode **)(v7 + 88);
            if (v39)
            {
              *(_QWORD *)&buf[0].f64[0] = off_1E15997E8;
              *(_QWORD *)&buf[0].f64[1] = 4;
              *(_QWORD *)&buf[1].f64[0] = &v166;
              CA::Render::LayerNode::MapGeometry::map((uint64_t)buf, (CA::Render::LayerNode *)v15, v39);
            }
            goto LABEL_40;
          }
LABEL_16:
          if (v9)
          {
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              v20 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              {
                v21 = *(_QWORD *)(a4 + 24);
                v22 = *(_QWORD *)(a4 + 32);
                v23 = *(_DWORD *)(a4 + 40);
                LODWORD(buf[0].f64[0]) = 134218496;
                *(_QWORD *)((char *)buf[0].f64 + 4) = v21;
                WORD2(buf[0].f64[1]) = 2048;
                *(_QWORD *)((char *)&buf[0].f64[1] + 6) = v22;
                HIWORD(buf[1].f64[0]) = 1024;
                LODWORD(buf[1].f64[1]) = v23;
                _os_log_impl(&dword_184457000, v20, OS_LOG_TYPE_DEFAULT, "Portal %lx cannot find source %lx from context %x", (uint8_t *)buf, 0x1Cu);
              }
            }
          }
          *(_QWORD *)(a2 + 64) |= 1uLL;
        }
      }
    }
  }
}

void CA::Render::Updater::prepare_sublayer0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  CA::Render::LayerNode *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  __int16 v28;
  double *v29;
  double v30;
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD **)a2;
  v31 = 0;
  v7 = CA::Render::Updater::layer_node(a3, (CA::Render::LayerNode *)a1, a2, &v31);
  v7[11] = v6;
  v8 = 268435466;
  if ((*(_DWORD *)(v6[4] + 12) & 0x900) == 0)
    v8 = 8;
  CA::Render::Updater::prepare_layer0(a1, v7, a3, a2, v8 & *(_QWORD *)(a2 + 64));
  if (v7[11])
  {
    v10 = v7[4];
    v11 = v7[3] & 0xFFFFFFFFFFFFFC7FLL;
    v7[3] = v11;
    v12 = v6[3] & 0x200 | *(_QWORD *)(a1[3] + 24) | v11;
    v7[3] = v12;
    if ((*(_BYTE *)(v10 + 13) & 9) != 0)
    {
      if ((v12 & 0x20) != 0)
        v6[3] |= 0x20uLL;
      v13 = v7 + 12;
      v14 = (_QWORD *)v7[13];
      if (v14 != v7 + 12)
      {
        if ((*(_BYTE *)(v10 + 13) & 1) != 0 && (*(_BYTE *)(v10 + 41) & 0x10) != 0)
        {
          CA::Render::LayerNode::depth_sort_sublayers((CA::Render::LayerNode *)v7);
          v14 = (_QWORD *)v7[13];
        }
        if (v14 != v13)
        {
          v15 = v14;
          do
          {
            v15[11] = v6;
            v16 = v15[17];
            if (v16)
              *(_QWORD *)(v16 + 88) = v6;
            v15 = (_QWORD *)v15[1];
          }
          while (v15 != v13);
        }
        v17 = (_QWORD *)v6[13];
        v6[13] = v14;
        *(_QWORD *)v7[13] = v6 + 12;
        v18 = v7[12];
        *(_QWORD *)(v18 + 8) = v17;
        *v17 = v18;
        v7[12] = v7 + 12;
        v7[13] = v13;
      }
      v21 = (_QWORD *)a1[4];
      v20 = a1 + 4;
      v19 = v21;
      *v20 = v7;
      *v7 = v21;
      v7[1] = v20;
      v22 = v7;
    }
    else
    {
      v22 = (_QWORD *)v6[13];
      v6[13] = v7;
      *v7 = v6 + 12;
      *v22 = v7;
      v19 = v7;
    }
    v19[1] = v22;
    if (!v31)
    {
      v26 = (unsigned int *)(v7 + 2);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 + 1, v26));
    }
    v28 = *(_WORD *)(a2 + 136);
    if ((v28 & 0x40) == 0)
    {
      v29 = (double *)v7[7];
      if (v29)
      {
        if (v29[2] != 0.0 || v29[6] != 0.0 || v29[10] != 1.0)
        {
LABEL_35:
          *(_WORD *)(a2 + 136) = v28 | 0x40;
          return;
        }
        v30 = v29[14];
      }
      else
      {
        v30 = *((double *)v7 + 10);
      }
      if (v30 == 0.0)
        return;
      goto LABEL_35;
    }
  }
  else if (v31)
  {
    v23 = (unsigned int *)(v7 + 2);
    do
    {
      v24 = __ldaxr(v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v23));
    if (!v25)
      CA::Render::LayerNode::delete_node((CA::Render::LayerNode *)v7, v9);
  }
}

_QWORD *CA::Render::Updater::layer_node(uint64_t a1, CA::Render::LayerNode *a2, uint64_t a3, char *a4)
{
  _QWORD *v6;
  uint64_t v7;
  malloc_zone_t *malloc_zone;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v17;
  unsigned int *v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  unsigned int v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;

  if (*(_DWORD *)(a3 + 132))
  {
    v6 = CA::Render::LayerNodeAllocator::alloc_node((CA::Render::LayerNodeAllocator *)a1);
    v7 = *(_QWORD *)(a3 + 96);
    if (v7)
    {
      malloc_zone = (malloc_zone_t *)get_malloc_zone();
      v9 = malloc_type_zone_malloc(malloc_zone, 0x80uLL, 0x8BB15036uLL);
      v6[18] = v9;
      v10 = *(_OWORD *)(v7 + 24);
      v11 = *(_OWORD *)(v7 + 40);
      v12 = *(_OWORD *)(v7 + 56);
      *v9 = *(_OWORD *)(v7 + 8);
      v9[1] = v10;
      v9[2] = v11;
      v9[3] = v12;
      v13 = *(_OWORD *)(v7 + 88);
      v14 = *(_OWORD *)(v7 + 104);
      v15 = *(_OWORD *)(v7 + 120);
      v9[4] = *(_OWORD *)(v7 + 72);
      v9[5] = v13;
      v9[6] = v14;
      v9[7] = v15;
    }
    *a4 = 1;
    return v6;
  }
  v17 = *(_QWORD *)(a1 + 144);
  if (v17 && *(_QWORD *)(v17 + 16) == a1)
  {
    v6 = *(_QWORD **)(v17 + 40);
    if (v6)
    {
      v19 = (unsigned int *)(v6 + 2);
      if ((*((_DWORD *)v6 + 4) == 1 || (*((_BYTE *)v6 + 25) & 8) != 0)
        && (*(_DWORD *)(v17 + 12) & 0x400) == 0
        && (((*(_DWORD *)(*(_QWORD *)a2 + 1064) >> 27) & 1 ^ ((*(_DWORD *)(v17 + 12) & 0x200u) >> 9)) & 1) == 0)
      {
        if (v6[11] != *(_QWORD *)(a3 + 8) && (*(_BYTE *)(a1 + 13) & 9) == 0)
        {
          *(_QWORD *)(v17 + 96) |= 4uLL;
          v6[3] |= 4uLL;
        }
        v20 = v6[3];
        if ((v20 & 0x800) != 0)
        {
          v25 = *v6;
          v24 = (_QWORD *)v6[1];
          *(_QWORD *)(v25 + 8) = v24;
          *v24 = v25;
          *v6 = v6;
          v6[1] = v6;
          v6[3] = v20 & 0xFFFFFFFFFFFFF7FFLL;
          v6[11] = 0;
          v21 = 1;
        }
        else
        {
          v21 = 0;
        }
        *a4 = v21;
        v26 = (_QWORD *)v6[19];
        if (v26)
        {
          do
          {
            v27 = (_QWORD *)*v26;
            free(v26);
            v26 = v27;
          }
          while (v27);
          v6[19] = 0;
          *(_QWORD *)(v17 + 96) |= 8uLL;
        }
        return v6;
      }
      v6[5] = 0;
      do
      {
        v22 = __ldaxr(v19);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v19));
      if (!v23)
        CA::Render::LayerNode::delete_node((CA::Render::LayerNode *)v6, a2);
      *(_QWORD *)(v17 + 40) = 0;
    }
    v6 = CA::Render::LayerNodeAllocator::alloc_node((CA::Render::LayerNodeAllocator *)a1);
    v6[3] |= 0x40uLL;
    v6[5] = v17;
    *(_QWORD *)(v17 + 40) = v6;
    *(_DWORD *)(v17 + 12) = (*(_DWORD *)(*(_QWORD *)a2 + 1064) >> 18) & 0x200 | *(_DWORD *)(v17 + 12) & 0xFFFFF9FF;
    *(_QWORD *)(v17 + 96) |= 4uLL;
    *a4 = 0;
    return v6;
  }
  *a4 = 1;
  return CA::Render::LayerNodeAllocator::alloc_node((CA::Render::LayerNodeAllocator *)a1);
}

_QWORD *CA::Render::LayerNodeAllocator::alloc_node(CA::Render::LayerNodeAllocator *this)
{
  int v1;
  unsigned int v2;
  uint64_t v3;
  _QWORD *result;
  int64x2_t *v5;
  uint64_t *v6;
  malloc_zone_t *malloc_zone;

  if (CA::Render::LayerNodeAllocator::alloc_node(void)::once[0] != -1)
    dispatch_once(CA::Render::LayerNodeAllocator::alloc_node(void)::once, &__block_literal_global_7171);
  if (CA::Render::LayerNodeAllocator::_free_offsets_count)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::LayerNodeAllocator::_lock);
    v1 = CA::Render::LayerNodeAllocator::_free_offsets_count;
    if (CA::Render::LayerNodeAllocator::_free_offsets_count)
    {
      --CA::Render::LayerNodeAllocator::_free_offsets_count;
      v2 = *(unsigned __int16 *)(CA::Render::LayerNodeAllocator::_free_offsets + 2 * (v1 - 1));
      os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::LayerNodeAllocator::_lock);
      v3 = CA::Render::LayerNodeAllocator::_data;
      result = (_QWORD *)(CA::Render::LayerNodeAllocator::_data + 280 * v2);
      if (CA::Render::LayerNodeAllocator::_data)
      {
        result[34] = 0;
        *((_OWORD *)result + 15) = 0u;
        *((_OWORD *)result + 16) = 0u;
        *((_OWORD *)result + 13) = 0u;
        *((_OWORD *)result + 14) = 0u;
        *((_OWORD *)result + 11) = 0u;
        *((_OWORD *)result + 12) = 0u;
        *((_OWORD *)result + 9) = 0u;
        *((_OWORD *)result + 10) = 0u;
        *((_OWORD *)result + 7) = 0u;
        *((_OWORD *)result + 8) = 0u;
        *((_OWORD *)result + 5) = 0u;
        *((_OWORD *)result + 6) = 0u;
        *((_OWORD *)result + 3) = 0u;
        *((_OWORD *)result + 4) = 0u;
        *((_OWORD *)result + 1) = 0u;
        *((_OWORD *)result + 2) = 0u;
      }
      *result = result;
      result[1] = result;
      v5 = (int64x2_t *)(v3 + 280 * v2);
      v5[6] = vdupq_n_s64((unint64_t)&v5[6]);
      v5[1].i32[0] = 1;
      v6 = &v5[1].i64[1];
      goto LABEL_12;
    }
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::LayerNodeAllocator::_lock);
  }
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  result = malloc_type_zone_calloc(malloc_zone, 1uLL, 0x118uLL, 0x743898A5uLL);
  if (result)
  {
    result[34] = 0;
    *((_OWORD *)result + 15) = 0u;
    *((_OWORD *)result + 16) = 0u;
    *((_OWORD *)result + 13) = 0u;
    *((_OWORD *)result + 14) = 0u;
    *((_OWORD *)result + 11) = 0u;
    *((_OWORD *)result + 12) = 0u;
    *((_OWORD *)result + 9) = 0u;
    *((_OWORD *)result + 10) = 0u;
    *((_OWORD *)result + 7) = 0u;
    *((_OWORD *)result + 8) = 0u;
    *((_OWORD *)result + 5) = 0u;
    *((_OWORD *)result + 6) = 0u;
    *((_OWORD *)result + 3) = 0u;
    *((_OWORD *)result + 4) = 0u;
    *((_OWORD *)result + 1) = 0u;
    *((_OWORD *)result + 2) = 0u;
  }
  *result = result;
  result[1] = result;
  result[12] = result + 12;
  result[13] = result + 12;
  v6 = result + 3;
  *((_DWORD *)result + 4) = 1;
LABEL_12:
  *v6 = 4;
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<CA::Render::Object *,x_link_struct>,std::__unordered_map_hasher<CA::Render::Object *,std::__hash_value_type<CA::Render::Object *,x_link_struct>,std::hash<CA::Render::Object *>,std::equal_to<CA::Render::Object *>,true>,std::__unordered_map_equal<CA::Render::Object *,std::__hash_value_type<CA::Render::Object *,x_link_struct>,std::equal_to<CA::Render::Object *>,std::hash<CA::Render::Object *>,true>,std::allocator<std::__hash_value_type<CA::Render::Object *,x_link_struct>>>::find<CA::Render::Object *>(_QWORD *a1, unint64_t a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v4 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v3 >> 47) ^ v3);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = v5 & (*(_QWORD *)&v2 - 1);
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    do
    {
      v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == a2)
          return result;
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(_QWORD *)&v2)
            v10 %= *(_QWORD *)&v2;
        }
        else
        {
          v10 &= *(_QWORD *)&v2 - 1;
        }
        if (v10 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

void CA::Render::LayerNode::MapGeometry::map(uint64_t this, CA::Render::LayerNode *a2, CA::Render::LayerNode *a3)
{
  CA::Render::LayerNode::MapGeometry *v5;
  CA::Render::LayerNode::MapGeometry *v6;
  float64x2_t v7;
  char v8;
  CA::Render::LayerNode *v9;
  float64x2_t *v10;
  const double *v11;
  float64x2_t v12;
  char v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  __int128 *v19;
  int v20;
  CA::Render::LayerNode *v21;
  char v22;
  uint64_t v23;
  float64x2_t *v24;
  const double *v25;
  double v26;
  double v27;
  double v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  uint64_t v45;

  v5 = (CA::Render::LayerNode::MapGeometry *)this;
  v45 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    this = (uint64_t)CA::Render::LayerNode::shared_ancestor(a2, a3);
    v6 = (CA::Render::LayerNode::MapGeometry *)this;
    if (this)
    {
      do
      {
        if ((*(_BYTE *)(*((_QWORD *)v6 + 4) + 13) & 9) == 0)
          break;
        v6 = (CA::Render::LayerNode::MapGeometry *)*((_QWORD *)v6 + 11);
      }
      while (v6);
    }
  }
  else
  {
    v6 = 0;
  }
  v37 = xmmword_18474DF40;
  v38 = 0u;
  v7.f64[1] = 1.0;
  v39 = (float64x2_t)xmmword_18474DF50;
  v40 = 0u;
  v41 = 0u;
  v42 = (float64x2_t)xmmword_18474DF40;
  v35 = xmmword_18474DF50;
  v36 = xmmword_18474DF40;
  v43 = 0u;
  v44 = (float64x2_t)xmmword_18474DF50;
  if (v6 == a2)
    goto LABEL_23;
  v8 = 0;
  v9 = a2;
  do
  {
    while (1)
    {
      if (v9 != a2 && (*(_DWORD *)(*((_QWORD *)v9 + 4) + 12) & 0x900) != 0)
        goto LABEL_20;
      v10 = (float64x2_t *)*((_QWORD *)v9 + 7);
      if (!v10)
      {
        v12 = *((float64x2_t *)v9 + 4);
        v7.f64[0] = *((float64_t *)v9 + 10);
        v37 = (__int128)vmlaq_laneq_f64((float64x2_t)v37, v12, v38, 1);
        v38 = vmlaq_laneq_f64(v38, v7, v38, 1);
        v39 = vmlaq_laneq_f64(v39, v12, v40, 1);
        v40 = vmlaq_laneq_f64(v40, v7, v40, 1);
        v41 = vmlaq_laneq_f64(v41, v12, v42, 1);
        v42 = vmlaq_laneq_f64(v42, v7, v42, 1);
        v43 = vmlaq_laneq_f64(v43, v12, v44, 1);
        v44 = vmlaq_laneq_f64(v44, v7, v44, 1);
        goto LABEL_16;
      }
      this = CA::Mat4Impl::mat4_is_affine(*((CA::Mat4Impl **)v9 + 7), (const double *)a2);
      if ((_DWORD)this)
        break;
      (**(void (***)(CA::Render::LayerNode::MapGeometry *, float64x2_t *))v5)(v5, (float64x2_t *)&v37);
      this = (**(uint64_t (***)(CA::Render::LayerNode::MapGeometry *, _QWORD))v5)(v5, *((_QWORD *)v9 + 7));
      v8 = 0;
      v13 = 0;
      v7.f64[1] = *((float64_t *)&v35 + 1);
      v37 = v36;
      v38 = 0u;
      v40 = 0u;
      v41 = 0u;
      v39 = (float64x2_t)v35;
      v42 = (float64x2_t)v36;
      v43 = 0u;
      v44 = (float64x2_t)v35;
      v9 = (CA::Render::LayerNode *)*((_QWORD *)v9 + 11);
      if (v9 == v6)
        goto LABEL_24;
    }
    if ((v8 & 1) != 0)
    {
      CA::Mat4Impl::mat4_concat((float64x2_t *)&v37, (double *)&v37, v10->f64, v11);
LABEL_16:
      v8 = 1;
      goto LABEL_20;
    }
    v14 = v10[1];
    v15 = v10[2];
    v16 = v10[3];
    v37 = (__int128)*v10;
    v38 = v14;
    v39 = v15;
    v40 = v16;
    v7 = v10[5];
    v17 = v10[6];
    v18 = v10[7];
    v41 = v10[4];
    v42 = v7;
    v8 = 1;
    v43 = v17;
    v44 = v18;
LABEL_20:
    v9 = (CA::Render::LayerNode *)*((_QWORD *)v9 + 11);
  }
  while (v9 != v6);
  if ((v8 & 1) == 0)
  {
LABEL_23:
    v13 = 0;
    goto LABEL_24;
  }
  this = (**(uint64_t (***)(CA::Render::LayerNode::MapGeometry *, float64x2_t *))v5)(v5, (float64x2_t *)&v37);
  v13 = 1;
LABEL_24:
  if (v6 != a3)
  {
    v19 = 0;
    v20 = 2304;
    v21 = a3;
    do
    {
      if (v21 == a3 || (*(_DWORD *)(*((_QWORD *)v21 + 4) + 12) & v20) == 0)
      {
        this = MEMORY[0x1E0C80A78](this);
        *((_QWORD *)&v35 - 2) = v21;
        *((_QWORD *)&v35 - 1) = v19;
        v19 = &v35 - 1;
      }
      v21 = (CA::Render::LayerNode *)*((_QWORD *)v21 + 11);
    }
    while (v21 != v6);
    if ((v13 & 1) != 0)
    {
      v37 = v36;
      v38 = 0u;
      v40 = 0u;
      v41 = 0u;
      v39 = (float64x2_t)v35;
      v42 = (float64x2_t)v36;
      v43 = 0u;
      v44 = (float64x2_t)v35;
    }
    if (v19)
    {
      v22 = 0;
      do
      {
        while (1)
        {
          v23 = *(_QWORD *)v19;
          v24 = *(float64x2_t **)(*(_QWORD *)v19 + 56);
          if (v24)
            break;
          v26 = *(double *)(v23 + 64);
          v27 = *(double *)(v23 + 72);
          v28 = *(double *)(v23 + 80);
          v43 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v43, (float64x2_t)v37, v26), v39, v27), v41, v28);
          v44 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v44, v38, v26), v40, v27), v42, v28);
LABEL_47:
          v19 = (__int128 *)*((_QWORD *)v19 + 1);
          v22 = 1;
          if (!v19)
          {
            if (CA::Mat4Impl::mat4_invert((CA::Mat4Impl *)&v37, (CA::Mat4Impl *)&v37, (const double *)a3))
              (*(void (**)(CA::Render::LayerNode::MapGeometry *, __int128 *))(*(_QWORD *)v5 + 8))(v5, &v37);
            return;
          }
        }
        if (CA::Mat4Impl::mat4_is_affine(*(CA::Mat4Impl **)(*(_QWORD *)v19 + 56), (const double *)a2))
        {
          if ((v22 & 1) != 0)
          {
            CA::Mat4Impl::mat4_concat((float64x2_t *)&v37, v24->f64, (const double *)&v37, v25);
          }
          else
          {
            v29 = v24[1];
            v30 = v24[2];
            v31 = v24[3];
            v37 = (__int128)*v24;
            v38 = v29;
            v39 = v30;
            v40 = v31;
            v32 = v24[5];
            v33 = v24[6];
            v34 = v24[7];
            v41 = v24[4];
            v42 = v32;
            v43 = v33;
            v44 = v34;
          }
          goto LABEL_47;
        }
        if ((v22 & 1) != 0
          && CA::Mat4Impl::mat4_invert((CA::Mat4Impl *)&v37, (CA::Mat4Impl *)&v37, (const double *)a3))
        {
          (*(void (**)(CA::Render::LayerNode::MapGeometry *, __int128 *))(*(_QWORD *)v5 + 8))(v5, &v37);
        }
        if (CA::Mat4Impl::mat4_invert((CA::Mat4Impl *)&v37, *(CA::Mat4Impl **)(v23 + 56), (const double *)a3))(*(void (**)(CA::Render::LayerNode::MapGeometry *, __int128 *))(*(_QWORD *)v5 + 8))(v5, &v37);
        v22 = 0;
        v37 = v36;
        v38 = 0u;
        v40 = 0u;
        v41 = 0u;
        v39 = (float64x2_t)v35;
        v42 = (float64x2_t)v36;
        v43 = 0u;
        v44 = (float64x2_t)v35;
        v19 = (__int128 *)*((_QWORD *)v19 + 1);
      }
      while (v19);
    }
  }
}

uint64_t CA::Mat4Impl::mat4_invert(CA::Mat4Impl *this, CA::Mat4Impl *a2, const double *a3)
{
  _BOOL4 is_affine;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;

  is_affine = CA::Mat4Impl::mat4_is_affine(a2, (const double *)a2);
  v7 = *(double *)a2;
  v6 = *((double *)a2 + 1);
  if (!is_affine)
  {
    v23 = *((double *)a2 + 2);
    v24 = *((double *)a2 + 3);
    v25 = *((double *)a2 + 4);
    v26 = *((double *)a2 + 5);
    v27 = *((double *)a2 + 6);
    v28 = *((double *)a2 + 7);
    v29 = *((double *)a2 + 8);
    v30 = *((double *)a2 + 9);
    v31 = *((double *)a2 + 10);
    v32 = *((double *)a2 + 11);
    v34 = *((double *)a2 + 12);
    v33 = *((double *)a2 + 13);
    v36 = *((double *)a2 + 14);
    v35 = *((double *)a2 + 15);
    v37 = -(v36 * v32 - v35 * v31);
    v38 = -(v36 * v28 - v35 * v27);
    v39 = -(v31 * v28 - v32 * v27);
    v40 = v33 * v39 - (v38 * v30 - v37 * v26);
    v41 = v39 * v34 - (v38 * v29 - v37 * v25);
    v42 = -(v33 * v32 - v35 * v30);
    v43 = -(v33 * v28 - v35 * v26);
    v44 = -(v30 * v28 - v32 * v26);
    v45 = v44 * v34 - (v43 * v29 - v42 * v25);
    v46 = -(v33 * v31 - v36 * v30);
    v47 = -(v33 * v27 - v36 * v26);
    v48 = -(v30 * v27 - v31 * v26);
    v49 = v34 * v48 - (v47 * v29 - v46 * v25);
    v50 = v45 * v23 + v40 * v7 - (v49 * v24 + v41 * v6);
    if (v50 != 0.0)
    {
      v52 = -(v26 * v23 - v27 * v6);
      v65 = v29 * v52 + v48 * v7;
      v53 = -(v26 * v24 - v28 * v6);
      v64 = v53 * v29 + v44 * v7;
      v54 = -(v30 * v23 - v31 * v6);
      v55 = -(v30 * v24 - v32 * v6);
      v56 = -(v31 * v24 - v32 * v23);
      v57 = -(v27 * v24 - v28 * v23);
      v58 = v57 * v29 + v39 * v7;
      v59 = v30 * v57 + v39 * v6;
      v60 = v34 * v52 + v47 * v7;
      v61 = -(v33 * v23 - v36 * v6);
      v62 = -(v36 * v24 - v35 * v23);
      v63 = -(v33 * v24 - v35 * v6);
      *(double *)this = 1.0 / v50 * v40;
      *((double *)this + 1) = -(v33 * v56 + v37 * v6 - v62 * v30) * (1.0 / v50);
      *((double *)this + 2) = 1.0 / v50 * (v33 * v57 + v38 * v6 - v62 * v26);
      *((double *)this + 3) = -(v59 - v56 * v26) * (1.0 / v50);
      *((double *)this + 4) = -(1.0 / v50 * v41);
      *((double *)this + 5) = 1.0 / v50 * (v56 * v34 + v37 * v7 - v62 * v29);
      *((double *)this + 6) = -(v34 * v57 + v38 * v7 - v62 * v25) * (1.0 / v50);
      *((double *)this + 7) = 1.0 / v50 * (v58 - v56 * v25);
      *((double *)this + 8) = 1.0 / v50 * v45;
      *((double *)this + 9) = -(v55 * v34 + v42 * v7 - v63 * v29) * (1.0 / v50);
      *((double *)this + 10) = 1.0 / v50 * (v34 * v53 + v43 * v7 - v63 * v25);
      *((double *)this + 11) = -(v64 - v55 * v25) * (1.0 / v50);
      *((double *)this + 12) = -(1.0 / v50 * v49);
      *((double *)this + 13) = 1.0 / v50 * (v34 * v54 + v46 * v7 - v61 * v29);
      *((double *)this + 14) = -(v60 - v61 * v25) * (1.0 / v50);
      v21 = 1.0 / v50 * (v65 - v54 * v25);
      v22 = 15;
      goto LABEL_7;
    }
    return 0;
  }
  v8 = *((double *)a2 + 4);
  v9 = *((double *)a2 + 5);
  v10 = -(v8 * v6 - v9 * v7);
  if (v10 == 0.0)
    return 0;
  v11 = 1.0 / v10;
  v13 = *((double *)a2 + 12);
  v12 = *((double *)a2 + 13);
  v14 = *((_OWORD *)a2 + 1);
  v15 = *((_OWORD *)a2 + 2);
  v16 = *((_OWORD *)a2 + 3);
  *(_OWORD *)this = *(_OWORD *)a2;
  *((_OWORD *)this + 1) = v14;
  *((_OWORD *)this + 2) = v15;
  *((_OWORD *)this + 3) = v16;
  v17 = *((_OWORD *)a2 + 5);
  v18 = *((_OWORD *)a2 + 7);
  *((_OWORD *)this + 4) = *((_OWORD *)a2 + 4);
  *((_OWORD *)this + 5) = v17;
  *((_OWORD *)this + 7) = v18;
  v19 = v11 * v9;
  *(double *)this = v19;
  *((double *)this + 1) = -(v11 * v6);
  v20 = v11 * v7;
  *((double *)this + 4) = -(v11 * v8);
  *((double *)this + 5) = v20;
  *((double *)this + 12) = -(v13 * v19 - v11 * v8 * v12);
  v21 = -(v12 * v20 - v11 * v6 * v13);
  v22 = 13;
LABEL_7:
  *((double *)this + v22) = v21;
  return 1;
}

CA::Render::LayerNode *CA::Render::LayerNode::shared_ancestor(CA::Render::LayerNode *this, CA::Render::LayerNode *a2)
{
  BOOL v2;
  BOOL v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a2 == this || !a2 || *((CA::Render::LayerNode **)this + 11) == a2)
    return a2;
  if (*((CA::Render::LayerNode **)a2 + 11) == this)
    return this;
  v2 = 1;
  v3 = 1;
  v4 = (unint64_t)a2;
  v5 = (unint64_t)this;
  while (!v3)
  {
    v5 = 0;
    if (v2)
      goto LABEL_11;
LABEL_9:
    v4 = 0;
LABEL_13:
    v3 = v5 != 0;
    v2 = v4 != 0;
    if (!(v5 | v4))
    {
      v5 = 0;
      goto LABEL_17;
    }
  }
  v6 = *(_QWORD *)(v5 + 24);
  if ((v6 & 0x200000) != 0)
    goto LABEL_17;
  *(_QWORD *)(v5 + 24) = v6 | 0x200000;
  v5 = *(_QWORD *)(v5 + 88);
  if (!v2)
    goto LABEL_9;
LABEL_11:
  v7 = *(_QWORD *)(v4 + 24);
  if ((v7 & 0x200000) == 0)
  {
    *(_QWORD *)(v4 + 24) = v7 | 0x200000;
    v4 = *(_QWORD *)(v4 + 88);
    goto LABEL_13;
  }
  v5 = v4;
  do
  {
LABEL_17:
    v8 = *((_QWORD *)this + 3);
    if ((v8 & 0x200000) == 0)
      break;
    *((_QWORD *)this + 3) = v8 & 0xFFFFFFFFFFDFFFFFLL;
    this = (CA::Render::LayerNode *)*((_QWORD *)this + 11);
  }
  while (this);
  do
  {
    v9 = *((_QWORD *)a2 + 3);
    if ((v9 & 0x200000) == 0)
      break;
    *((_QWORD *)a2 + 3) = v9 & 0xFFFFFFFFFFDFFFFFLL;
    a2 = (CA::Render::LayerNode *)*((_QWORD *)a2 + 11);
  }
  while (a2);
  return (CA::Render::LayerNode *)v5;
}

void CA::Layer::map_geometry(CA::Transaction *a1, CALayer *a2, void (*a3)(uint64_t, __int128 *), void (*a4)(_QWORD, _QWORD), uint64_t a5)
{
  uint64_t *v9;
  CA::Transaction *v10;
  int v11;
  CALayer *v12;
  uint64_t *v13;
  char v14;
  int v15;
  double v16;
  double v17;
  const double *v18;
  const double *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  char v25;
  double v26;
  double v27;
  uint64_t v28;
  const double *v29;
  const double *v30;
  const double *v31;
  unsigned int v32;
  const double *v33;
  const double *v34;
  uint64_t v35;
  void (*v36)(_QWORD, _QWORD);
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;

  v9 = (uint64_t *)a1;
  v56 = *MEMORY[0x1E0C80C00];
  v10 = CA::Transaction::ensure_compat(a1);
  v11 = *((_DWORD *)v10 + 25);
  *((_DWORD *)v10 + 25) = v11 + 1;
  if (!v11)
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Transaction::transaction_lock);
  v39 = a5;
  v12 = (CALayer *)objc_msgSend(v9, "ancestorSharedWithLayer:", a2);
  v13 = (uint64_t *)v12;
  if (v12 != (CALayer *)v9)
  {
    v36 = a4;
    v14 = 0;
    v15 = 0;
    v16 = 0.0;
    v48 = xmmword_18474DF40;
    v49 = 0u;
    v17 = 0.0;
    v50 = xmmword_18474DF50;
    v51 = 0u;
    v52 = 0u;
    v53 = xmmword_18474DF40;
    v37 = xmmword_18474DF50;
    v38 = xmmword_18474DF40;
    v54 = 0u;
    v55 = xmmword_18474DF50;
    while (v9 != v13)
    {
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      v42 = 0u;
      v43 = 0u;
      v40 = 0u;
      v41 = 0u;
      CA::Layer::get_frame_transform(v9[2], (float64x2_t *)&v40, 0, 0, 0.0, v16, v17);
      v20 = *(_DWORD *)(v9[2] + 4);
      if ((v14 & 1) != 0)
      {
        if (v15 | v20 & 0x10000 || CA::Mat4Impl::mat4_is_affine((CA::Mat4Impl *)&v40, v18))
        {
          CA::Mat4Impl::mat4_concat((float64x2_t *)&v48, (double *)&v48, (const double *)&v40, v19);
          v14 = 1;
        }
        else
        {
          a3(v39, &v48);
          a3(v39, &v40);
          v14 = 0;
          v48 = v38;
          v49 = 0u;
          v51 = 0u;
          v52 = 0u;
          v50 = v37;
          v53 = v38;
          v54 = 0u;
          v55 = v37;
        }
      }
      else
      {
        v48 = v40;
        v49 = v41;
        v50 = v42;
        v51 = v43;
        v52 = v44;
        v53 = v45;
        v14 = 1;
        v54 = v46;
        v55 = v47;
      }
      v15 = HIWORD(v20) & 1;
      v12 = CA::Layer::superlayer((CA::Layer *)v9[2], v10);
      v9 = (uint64_t *)v12;
    }
    if ((v14 & 1) != 0)
      v12 = (CALayer *)((uint64_t (*)(uint64_t, __int128 *))a3)(v39, &v48);
    a4 = v36;
  }
  if (v13 != (uint64_t *)a2)
  {
    v21 = v39;
    do
    {
      v12 = (CALayer *)MEMORY[0x1E0C80A78](v12);
      v22 = &v35 - 2;
      *(&v35 - 2) = (uint64_t)a2;
      *(&v35 - 1) = v23;
      if (a2)
      {
        v12 = CA::Layer::superlayer((CA::Layer *)a2->_attr.layer, v10);
        a2 = v12;
      }
    }
    while (a2 != (CALayer *)v13);
    v24 = 0;
    v25 = 0;
    v26 = 0.0;
    v48 = xmmword_18474DF40;
    v49 = 0u;
    v27 = 0.0;
    v50 = xmmword_18474DF50;
    v51 = 0u;
    v52 = 0u;
    v53 = xmmword_18474DF40;
    v37 = xmmword_18474DF50;
    v38 = xmmword_18474DF40;
    v54 = 0u;
    v55 = xmmword_18474DF50;
    while (1)
    {
      v28 = *v22;
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      v42 = 0u;
      v43 = 0u;
      v40 = 0u;
      v41 = 0u;
      CA::Layer::get_frame_transform(*(_QWORD *)(v28 + 16), (float64x2_t *)&v40, 0, 0, 0.0, v26, v27);
      v32 = *(_DWORD *)(*(_QWORD *)(v28 + 16) + 4);
      if ((v25 & 1) == 0)
        break;
      if (v24 | v32 & 0x10000 || CA::Mat4Impl::mat4_is_affine((CA::Mat4Impl *)&v40, v29))
      {
        CA::Mat4Impl::mat4_concat((float64x2_t *)&v48, (double *)&v40, (const double *)&v48, v31);
LABEL_27:
        v24 = HIWORD(v32) & 1;
        v22 = (uint64_t *)v22[1];
        v25 = 1;
        if (!v22)
        {
          CA::Mat4Impl::mat4_invert((CA::Mat4Impl *)&v48, (CA::Mat4Impl *)&v48, v30);
          a4(v21, &v48);
          goto LABEL_30;
        }
      }
      else
      {
        CA::Mat4Impl::mat4_invert((CA::Mat4Impl *)&v48, (CA::Mat4Impl *)&v48, v33);
        a4(v21, &v48);
        CA::Mat4Impl::mat4_invert((CA::Mat4Impl *)&v40, (CA::Mat4Impl *)&v40, v34);
        a4(v21, &v40);
        v24 = 0;
        v25 = 0;
        v27 = *(double *)&v37;
        v26 = 0.0;
        v48 = v38;
        v49 = 0u;
        v51 = 0u;
        v52 = 0u;
        v50 = v37;
        v53 = v38;
        v54 = 0u;
        v55 = v37;
        v22 = (uint64_t *)v22[1];
        if (!v22)
          goto LABEL_30;
      }
    }
    v48 = v40;
    v49 = v41;
    v50 = v42;
    v51 = v43;
    v26 = *(double *)&v45;
    v27 = *(double *)&v46;
    v52 = v44;
    v53 = v45;
    v54 = v46;
    v55 = v47;
    goto LABEL_27;
  }
LABEL_30:
  CA::Transaction::unlock(v10);
}

void sub_18447FCE8(_Unwind_Exception *a1)
{
  CA::Transaction *v1;

  CA::Transaction::unlock(v1);
  _Unwind_Resume(a1);
}

__n128 CA::Transform::set(uint64_t a1, CA::Mat4Impl *this, int a3)
{
  __n128 result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  if (a3 && CA::Mat4Impl::mat4_is_affine(this, (const double *)this))
  {
    CA::Transform::set_affine((CA::Transform *)a1, *(double *)this, *((double *)this + 1), *((double *)this + 4), *((double *)this + 5), *((double *)this + 12), *((double *)this + 13));
  }
  else
  {
    v6 = *((_OWORD *)this + 1);
    v7 = *((_OWORD *)this + 2);
    v8 = *((_OWORD *)this + 3);
    *(_OWORD *)a1 = *(_OWORD *)this;
    *(_OWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 32) = v7;
    *(_OWORD *)(a1 + 48) = v8;
    v9 = *((_OWORD *)this + 5);
    v10 = *((_OWORD *)this + 6);
    v11 = *((_OWORD *)this + 7);
    *(_OWORD *)(a1 + 64) = *((_OWORD *)this + 4);
    *(_OWORD *)(a1 + 80) = v9;
    *(_OWORD *)(a1 + 96) = v10;
    *(_OWORD *)(a1 + 112) = v11;
    __asm { FMOV            V0.2D, #1.0 }
    *(__n128 *)(a1 + 128) = result;
    *(_BYTE *)(a1 + 144) = *(_BYTE *)(a1 + 144) & 0xE0 | 0x10;
  }
  return result;
}

BOOL CA::Mat4Impl::mat4_is_affine(CA::Mat4Impl *this, const double *a2)
{
  return *((double *)this + 2) == 0.0
      && *((double *)this + 3) == 0.0
      && *((double *)this + 6) == 0.0
      && *((double *)this + 7) == 0.0
      && *((double *)this + 8) == 0.0
      && *((double *)this + 9) == 0.0
      && *((double *)this + 10) == 1.0
      && *((double *)this + 11) == 0.0
      && *((double *)this + 14) == 0.0
      && *((double *)this + 15) == 1.0;
}

void CA::Layer::get_frame_transform(uint64_t a1, float64x2_t *a2, char a3, const double *a4, double a5, double a6, double a7)
{
  CA::Layer **v8;
  uint64_t v11;
  int v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  CA::Transaction *v32;
  CALayer *v33;
  const double *v34;
  CALayer *v35;
  void *layer;
  int v37;
  float64_t v43;
  double v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  const double *v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  int v60;
  double v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  double v65;
  double v66;
  float64x2_t v67;
  double v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  double v72;
  double v73;
  double v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  uint64_t v92;

  v92 = *MEMORY[0x1E0C80C00];
  v8 = *(CA::Layer ***)(a1 + 16);
  if (!v8)
  {
    *a2 = (float64x2_t)xmmword_18474DF40;
    a2[1] = 0u;
    a2[2] = (float64x2_t)xmmword_18474DF50;
    a2[3] = 0u;
    a2[4] = 0u;
    a2[5] = (float64x2_t)xmmword_18474DF40;
    a2[6] = 0u;
    a2[7] = (float64x2_t)xmmword_18474DF50;
    return;
  }
  v11 = a1;
  v12 = *(_DWORD *)(a1 + 56);
  if ((v12 & 8) != 0)
  {
    a1 = objc_msgSend(*(id *)(a1 + 16), "anchorPoint");
    v14 = v15;
    v13 = a6;
    v12 = *(_DWORD *)(v11 + 56);
  }
  else
  {
    v13 = 0.5;
    v14 = 0.5;
  }
  v16 = *(double *)(v11 + 112);
  v17 = *(double *)(v11 + 120);
  v18 = 0.0;
  v19 = 0.0;
  if ((v12 & 0x20) != 0)
  {
    a1 = objc_msgSend(v8, "anchorPointZ", 0.0, a6, a7, 0.0);
    v18 = 0.0;
    v12 = *(_DWORD *)(v11 + 56);
  }
  v74 = v19;
  if ((v12 & 0x40) != 0)
  {
    a1 = objc_msgSend(v8, "zPosition");
    v18 = v20;
  }
  if ((*(_BYTE *)(v11 + 55) & 0x10) == 0)
  {
    *a2 = (float64x2_t)xmmword_18474DF40;
    a2[1] = 0u;
    a2[2] = (float64x2_t)xmmword_18474DF50;
    a2[3] = 0u;
    a2[4] = 0u;
    a2[5] = (float64x2_t)xmmword_18474DF40;
    a2[6] = 0u;
    a2[7] = (float64x2_t)xmmword_18474DF50;
    a2[6].f64[0] = *(double *)(v11 + 80) - v16 * v14;
    a2[6].f64[1] = *(double *)(v11 + 88) - v17 * v13;
    a2[7].f64[0] = v18 - v74;
    if ((a3 & 1) != 0)
      goto LABEL_29;
LABEL_14:
    v32 = *(CA::Transaction **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 576);
    if (!v32)
      v32 = (CA::Transaction *)CA::Transaction::create((CA::Transaction *)a1);
    v33 = CA::Layer::superlayer(v8[2], v32);
    if (v33)
    {
      v35 = v33;
      layer = v33->_attr.layer;
      if (a4 || (*((_DWORD *)layer + 13) & 0x20000000) != 0)
      {
        v37 = *((_DWORD *)layer + 14);
        if ((v37 & 8) != 0)
        {
          -[CALayer anchorPoint](v33, "anchorPoint");
          v37 = *((_DWORD *)layer + 14);
          _Q0.f64[1] = v43;
        }
        else
        {
          __asm { FMOV            V0.2D, #0.5 }
        }
        v75 = vmlaq_f64(*((float64x2_t *)layer + 6), _Q0, *((float64x2_t *)layer + 7));
        v44 = 0.0;
        if ((v37 & 0x20) != 0)
          -[CALayer anchorPointZ](v35, "anchorPointZ", 0.0);
        v73 = v44;
        v45 = a2[1];
        v46 = a2[3];
        v47 = a2[5];
        v48 = a2[7];
        v49 = vmlsq_laneq_f64(a2[2], v75, v46, 1);
        v50 = vmlsq_laneq_f64(a2[4], v75, v47, 1);
        v51 = vmlsq_laneq_f64(a2[6], v75, v48, 1);
        *a2 = vmlsq_laneq_f64(*a2, v75, v45, 1);
        a2[1] = vmlaq_laneq_f64(v45, (float64x2_t)COERCE_UNSIGNED_INT64(-v44), v45, 1);
        a2[2] = v49;
        a2[3] = vmlaq_laneq_f64(v46, (float64x2_t)COERCE_UNSIGNED_INT64(-v44), v46, 1);
        a2[4] = v50;
        a2[5] = vmlaq_laneq_f64(v47, (float64x2_t)COERCE_UNSIGNED_INT64(-v44), v47, 1);
        a2[6] = v51;
        a2[7] = vmlaq_laneq_f64(v48, (float64x2_t)COERCE_UNSIGNED_INT64(-v44), v48, 1);
        if ((*((_BYTE *)layer + 55) & 0x20) != 0)
        {
          -[CALayer sublayerTransform](v35, "sublayerTransform");
          v84 = v76;
          v85 = v77;
          v86 = v78;
          v87 = v79;
          v88 = v80;
          v89 = v81;
          v90 = v82;
          v91 = v83;
          CA::Mat4Impl::mat4_concat(a2, a2->f64, v84.f64, v52);
        }
        if (a4)
          CA::Mat4Impl::mat4_concat(a2, a2->f64, a4, v34);
        v53 = a2[1];
        v54 = a2[3];
        v55 = a2[5];
        v56 = a2[7];
        v57 = vmlaq_laneq_f64(a2[2], v75, v54, 1);
        v58 = vmlaq_laneq_f64(a2[4], v75, v55, 1);
        v59 = vmlaq_laneq_f64(a2[6], v75, v56, 1);
        *a2 = vmlaq_laneq_f64(*a2, v75, v53, 1);
        a2[1] = vmlaq_laneq_f64(v53, (float64x2_t)*(unint64_t *)&v73, v53, 1);
        a2[2] = v57;
        a2[3] = vmlaq_laneq_f64(v54, (float64x2_t)*(unint64_t *)&v73, v54, 1);
        a2[4] = v58;
        a2[5] = vmlaq_laneq_f64(v55, (float64x2_t)*(unint64_t *)&v73, v55, 1);
        a2[6] = v59;
        a2[7] = vmlaq_laneq_f64(v56, (float64x2_t)*(unint64_t *)&v73, v56, 1);
      }
    }
    goto LABEL_29;
  }
  v72 = v18;
  a1 = objc_msgSend(v8, "transform");
  v21 = v84;
  v22 = v85;
  v23 = v86;
  v24 = v87;
  *a2 = v84;
  a2[1] = v22;
  a2[2] = v23;
  a2[3] = v24;
  v25 = v88;
  v26 = v89;
  v27 = v90;
  v28 = v91;
  a2[4] = v88;
  a2[5] = v26;
  v29 = vmlsq_lane_f64(vmlsq_lane_f64(vmlsq_lane_f64(v27, v21, v16 * v14, 0), v23, v17 * v13, 0), v25, v74, 0);
  v30 = vmlsq_lane_f64(vmlsq_lane_f64(vmlsq_lane_f64(v28, v22, v16 * v14, 0), v24, v17 * v13, 0), v26, v74, 0);
  a2[6] = v29;
  a2[7] = v30;
  v31 = *(float64x2_t *)(v11 + 80);
  *a2 = vmlaq_laneq_f64(v21, v31, v22, 1);
  a2[1] = vmlaq_laneq_f64(v22, (float64x2_t)*(unint64_t *)&v72, v22, 1);
  a2[2] = vmlaq_laneq_f64(v23, v31, v24, 1);
  a2[3] = vmlaq_laneq_f64(v24, (float64x2_t)*(unint64_t *)&v72, v24, 1);
  a2[4] = vmlaq_laneq_f64(v25, v31, v26, 1);
  a2[5] = vmlaq_laneq_f64(v26, (float64x2_t)*(unint64_t *)&v72, v26, 1);
  a2[6] = vmlaq_laneq_f64(v29, v31, v30, 1);
  a2[7] = vmlaq_laneq_f64(v30, (float64x2_t)*(unint64_t *)&v72, v30, 1);
  if ((a3 & 1) == 0)
    goto LABEL_14;
LABEL_29:
  v60 = *(_DWORD *)(v11 + 48);
  if ((v60 & 0x800) != 0)
  {
    v61 = *(double *)(v11 + 120);
    v62 = a2[2];
    v63 = a2[3];
    v64 = vmlaq_f64(vmlaq_n_f64(vmlaq_f64(a2[7], (float64x2_t)0, a2[1]), v63, v61), (float64x2_t)0, a2[5]);
    a2[6] = vmlaq_f64(vmlaq_n_f64(vmlaq_f64(a2[6], (float64x2_t)0, *a2), v62, v61), (float64x2_t)0, a2[4]);
    a2[7] = v64;
    a2[2] = vnegq_f64(v62);
    a2[3] = vnegq_f64(v63);
    v60 = *(_DWORD *)(v11 + 48);
  }
  if ((v60 & 0x10000000) != 0)
  {
    v68 = *(double *)(v11 + 112);
    v69 = *a2;
    v70 = a2[1];
    v71 = vmlaq_n_f64(a2[7], v70, v68);
    a2[6] = vmlaq_n_f64(a2[6], *a2, v68);
    a2[7] = v71;
    *a2 = vnegq_f64(v69);
    a2[1] = vnegq_f64(v70);
  }
  if ((*(_BYTE *)(v11 + 55) & 4) != 0)
  {
    v65 = *(double *)(v11 + 96);
    v66 = *(double *)(v11 + 104);
    v67 = vmlaq_f64(vmlsq_lane_f64(vmlsq_lane_f64(a2[7], a2[1], v65, 0), a2[3], v66, 0), (float64x2_t)0, a2[5]);
    a2[6] = vmlaq_f64(vmlsq_lane_f64(vmlsq_lane_f64(a2[6], *a2, v65, 0), a2[2], v66, 0), (float64x2_t)0, a2[4]);
    a2[7] = v67;
  }
}

void CA::Render::LayerNode::MapPoints::unapply(uint64_t a1, float64x2_t *this, double *a3)
{
  uint64_t v5;
  unint64_t v6;

  if (*(_QWORD *)(a1 + 8))
  {
    v5 = 0;
    v6 = 0;
    do
    {
      CA::Mat4Impl::mat4_unapply_inverse_to_point2(this, (double *)(*(_QWORD *)(a1 + 16) + v5), a3);
      ++v6;
      v5 += 16;
    }
    while (v6 < *(_QWORD *)(a1 + 8));
  }
}

float64x2_t CA::Mat4Impl::mat4_unapply_inverse_to_point2(float64x2_t *this, double *a2, double *a3)
{
  double v3;
  double v4;
  double v5;
  float64x2_t result;

  v3 = a2[1];
  v4 = -(this[7].f64[0] + this[1].f64[0] * *a2 + this[3].f64[0] * v3) / this[5].f64[0];
  v5 = this[7].f64[1] + this[1].f64[1] * *a2 + this[3].f64[1] * v3 + this[5].f64[1] * v4;
  if (fabs(v5 + -1.0) >= 0.000001)
  {
    if (v5 <= 0.0)
      v5 = INFINITY;
    else
      v5 = 1.0 / v5;
  }
  result = vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(this[6], *this, *a2), this[2], v3), this[4], v4), v5);
  *(float64x2_t *)a2 = result;
  return result;
}

uint64_t CA::Render::Update::pop_dependence_group(CA::Render::Update *this, CA::Render::LayerNode *a2)
{
  uint64_t v3;
  _QWORD *v4;
  CA::Render::LayerNode *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t result;

  v3 = *((_QWORD *)this + 101);
  v4 = *(_QWORD **)(v3 - 24);
  if (v4)
  {
    do
    {
      v5 = (CA::Render::LayerNode *)v4[3];
      v6 = (unsigned int *)((char *)v5 + 16);
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        CA::Render::LayerNode::delete_node(v5, a2);
      v4 = (_QWORD *)*v4;
    }
    while (v4);
    v3 = *((_QWORD *)this + 101);
  }
  result = std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table(v3 - 40);
  *((_QWORD *)this + 101) = result;
  return result;
}

void applyRect(int8x16_t *a1, float64x2_t *this, double *a3)
{
  CA::Mat4Impl::mat4_apply_to_rect(this, a1, a3);
}

double unapplyVec2r(double *a1, float64x2_t *this, double *a3)
{
  double result;

  *(_QWORD *)&result = *(_OWORD *)&CA::Mat4Impl::mat4_unapply_inverse_to_point2(this, a1, a3);
  return result;
}

double CA::Mat4Impl::mat4_set_corner_matrix(uint64_t a1, double *a2, double *a3, double *a4)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double result;

  v4 = a2[2];
  v5 = a2[3];
  v7 = a2[4];
  v6 = a2[5];
  v8 = a2[6];
  v9 = a2[7];
  v11 = *a2;
  v10 = a2[1];
  v12 = v7 - (v4 + v8) + *a2;
  v13 = v6 - (v5 + v9) + v10;
  if (fabs(v12) >= 0.000001 || fabs(v13) >= 0.000001)
  {
    v20 = v8 - v7;
    v21 = v5 - v6;
    v22 = v4 - v7;
    v23 = -(v20 * (v5 - v6) - (v9 - v6) * v22);
    v18 = -(v13 * v20 - v12 * (v9 - v6)) / v23;
    v19 = -(v12 * v21 - v13 * v22) / v23;
    v14 = v4 - v11 + v18 * v4;
    v16 = v5 - v10 + v18 * v5;
    v15 = v8 - v11 + v19 * v8;
    v17 = v9 - v10 + v19 * v9;
  }
  else
  {
    v14 = v4 - v11;
    v15 = v7 - v4;
    v16 = v5 - v10;
    v17 = v6 - v5;
    v18 = 0.0;
    v19 = 0.0;
  }
  *(double *)a1 = v14 / *a3;
  *(double *)(a1 + 8) = v16 / *a3;
  *(_QWORD *)(a1 + 16) = 0;
  *(double *)(a1 + 24) = v18 / *a3;
  *(double *)(a1 + 32) = v15 / a3[1];
  *(double *)(a1 + 40) = v17 / a3[1];
  *(_QWORD *)(a1 + 48) = 0;
  *(double *)(a1 + 56) = v19 / a3[1];
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 80) = xmmword_18474DF40;
  *(double *)(a1 + 96) = v11;
  *(double *)(a1 + 104) = v10;
  *(_OWORD *)(a1 + 112) = xmmword_18474DF50;
  *(double *)(a1 + 96) = v11 + *a4 * v14 + a4[1] * v15;
  *(double *)(a1 + 104) = v10 + *a4 * v16 + a4[1] * v17;
  result = *a4 * v18 + 1.0 + a4[1] * v19;
  *(double *)(a1 + 120) = result;
  return result;
}

_QWORD *CA::Render::Layer::set_anchor_point(_QWORD *result, uint64_t a2)
{
  double v3;
  unint64_t v5;

  if (result[16])
    goto LABEL_2;
  v3 = *(double *)(a2 + 8);
  if (*(double *)a2 == 0.5 && v3 == 0.5)
  {
    v5 = result[5] & 0xFFFFBFFFFFFFFFFFLL;
  }
  else
  {
    if (*(double *)a2 != 0.0 || v3 != 0.0)
    {
LABEL_2:
      result = CA::Render::Layer::ensure_ext((CA::Render::Layer *)result);
      *(_OWORD *)(result + 21) = *(_OWORD *)a2;
      return result;
    }
    v5 = result[5] | 0x400000000000;
  }
  result[5] = v5;
  return result;
}

void unapplyRect(int8x16_t *a1, float64x2_t *this, double *a3)
{
  CA::Mat4Impl::mat4_unapply_inverse_to_rect(this, a1, a3);
}

double applyVec2r(double *a1, float64x2_t *this, double *a3)
{
  double result;

  *(_QWORD *)&result = *(_OWORD *)&CA::Mat4Impl::mat4_apply_to_point2(this, a1, a3);
  return result;
}

void CA::Render::LayerNode::MapRects::unapply(uint64_t a1, float64x2_t *this, double *a3)
{
  uint64_t v5;
  unint64_t v6;

  if (*(_QWORD *)(a1 + 8))
  {
    v5 = 0;
    v6 = 0;
    do
    {
      CA::Mat4Impl::mat4_unapply_inverse_to_rect(this, (int8x16_t *)(*(_QWORD *)(a1 + 16) + v5), a3);
      ++v6;
      v5 += 32;
    }
    while (v6 < *(_QWORD *)(a1 + 8));
  }
}

uint64_t map_unfun(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v9[8];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = a2[1];
  v3 = a2[2];
  v4 = a2[3];
  v9[0] = *a2;
  v9[1] = v2;
  v9[2] = v3;
  v9[3] = v4;
  v5 = a2[5];
  v6 = a2[6];
  v7 = a2[7];
  v9[4] = a2[4];
  v9[5] = v5;
  v9[6] = v6;
  v9[7] = v7;
  return (*(uint64_t (**)(_QWORD, _OWORD *))(a1 + 16))(*(_QWORD *)a1, v9);
}

void CA::Transaction::observer_callback(CA::Transaction *this, __CFRunLoopObserver *a2, unint64_t a3, void *a4)
{
  CA::Transaction **v5;

  v5 = *(CA::Transaction ***)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 576);
  if (v5)
  {
    if (v5[8] == this)
      CA::Transaction::flush_as_runloop_observer((CA::Transaction *)v5, 1);
  }
}

_DWORD *CA::Render::String::decode(CA::Render::String *this, CA::Render::Decoder *a2)
{
  size_t v3;
  const char *v4;
  _DWORD *v5;
  _DWORD *v6;

  v3 = CA::Render::Decoder::decode_int32(this);
  v5 = CA::Render::String::new_string((CA::Render::String *)v3, 0, v4);
  v6 = v5;
  if (v5)
    CA::Render::Decoder::decode_bytes(this, v5 + 7, v3);
  return v6;
}

CA::Render::Object *CA::Render::Handle::set_update_flags(CA::Render::Object *this, char a2)
{
  CA::Render::Context *i;
  uint64_t v3;

  if ((a2 & 0x3F) != 0)
  {
    *((_QWORD *)this + 12) |= a2 & 0x3F | 0x100000000000;
    for (i = (CA::Render::Context *)*((_QWORD *)this + 3); i; i = (CA::Render::Context *)*((_QWORD *)this + 3))
    {
      this = CA::Render::Context::lookup_handle(i, *((CA::Render::Object **)this + 4), 0, 0, 0);
      if (!this)
        break;
      v3 = *((_QWORD *)this + 12);
      if ((~v3 & 0x100000000020) == 0)
        break;
      *((_QWORD *)this + 12) = v3 | 0x100000000020;
    }
  }
  return this;
}

void CA::Render::Server::CmdStreamMsg::run(CA::Render::Server::CmdStreamMsg *this, BOOL *a2, BOOL *a3, double *a4)
{
  __int16 *v4;
  uint64_t v5;
  CA::Render::Server::CmdStreamMsg *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  double v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  CA::Render::Context *v20;
  CA::Render::Object *v21;
  unint64_t v22;
  unsigned int v23;
  CA::Render::Object *v24;
  CA::Render::Object *v25;
  CA::Render::Object *v26;
  unsigned int *v27;
  unsigned int v28;
  BOOL v29;
  CA::Render::Object *v30;
  CA::Render::Object *v31;
  __CFArray *v32;
  uint64_t v33;
  __CFArray *v34;
  unsigned int v35;
  CGColorSpace *v36;
  __CFArray *v37;
  float v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  CA::Render::Context *v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  int v48;
  unsigned int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  float v55;
  int v56;
  unsigned int v57;
  CA::Render::Pattern *v58;
  unsigned int *v59;
  unsigned int v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  int v65;
  unsigned int *v66;
  unsigned int v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  int v74;
  int v75;
  unsigned int v76;
  unsigned int *v77;
  unsigned int v78;
  uint64_t v79;
  int v80;
  int v81;
  int v82;
  int v83;
  __int16 *v84;
  int v85;
  char v86;
  int v87;
  int v88;
  int v89;
  double v90;
  unint64_t v91;
  double v92;
  int v93;
  int v94;
  mach_port_name_t v95;
  uint64_t v96;
  CA::Render::Shmem *v97;
  unsigned int *v98;
  unsigned int v99;
  double v100;
  NSObject *v101;
  int v102;
  NSObject *v103;
  int v104;
  unsigned int *v105;
  unsigned int v106;
  BOOL v107;
  NSObject *v108;
  int v109;
  unsigned int *v110;
  unsigned int v111;
  NSObject *v112;
  int v113;
  CGColorSpace *v114;
  NSObject *v115;
  int v116;
  NSObject *v117;
  int v118;
  unsigned int *v119;
  unsigned int v120;
  NSObject *v121;
  int v122;
  unsigned int *v123;
  unsigned int v124;
  NSObject *v125;
  int v126;
  unsigned int *v127;
  unsigned int v128;
  NSObject *v129;
  int v130;
  unsigned int *v131;
  unsigned int v132;
  NSObject *v133;
  int v134;
  unsigned int *v135;
  unsigned int v136;
  unsigned int *v137;
  pid_t v139;
  unsigned int *v141;
  pid_t v143;
  int v145;
  BOOL v146;
  unsigned int v147;
  unsigned int v148;
  unsigned int v149;
  CA::Render::Context *v150;
  double *v151;
  CA::Render::Server::CmdStreamMsg *v152;
  const void **v153;
  BOOL *v155;
  CA::Render::ImageProvider *v156;
  uint8_t buf[4];
  int v158;
  uint64_t v159;

  v159 = *MEMORY[0x1E0C80C00];
  v5 = *((_QWORD *)this + 521);
  if (!v5)
    __assert_rtn("run", "render-server.cpp", 1596, "is_valid ()");
  v6 = this;
  if (*((_BYTE *)this + 4176))
    __assert_rtn("run", "render-server.cpp", 1597, "!_did_run");
  *((_BYTE *)this + 4176) = 1;
  v9 = *((_QWORD *)this + 520);
  v10 = 0;
  if ((int)v9 - 1 >= 0)
  {
    v11 = *((_QWORD *)this + 519);
    v12 = 8 * (v9 - 1);
    do
    {
      **(_QWORD **)(v11 + v12) = v10;
      v10 = *(_QWORD *)(v11 + v12);
      v12 -= 8;
    }
    while (v12 != -8);
  }
  *(_QWORD *)(v5 + 48) = v10;
  *(_QWORD *)(v5 + 56) = v9;
  v13 = *(_QWORD *)(v5 + 72);
  kdebug_trace();
  v153 = (const void **)(v13 + 528);
  v14 = NAN;
  v155 = a2;
  v156 = (CA::Render::ImageProvider *)v13;
  while (2)
  {
    v15 = CA::Render::Decoder::decode_int8((CA::Render::Decoder *)v5);
    switch(v15)
    {
      case 0:
        goto LABEL_170;
      case 1:
        v18 = CA::Render::Decoder::decode_size_t((CA::Render::Decoder *)v5);
        v19 = CA::Render::Decoder::decode_int32((CA::Render::Decoder *)v5);
        v20 = (CA::Render::Context *)v13;
        v21 = (CA::Render::Object *)v18;
        goto LABEL_42;
      case 2:
        *a2 = 1;
        v22 = CA::Render::Decoder::decode_size_t((CA::Render::Decoder *)v5);
        v23 = CA::Render::Decoder::decode_int32((CA::Render::Decoder *)v5);
        v24 = (CA::Render::Object *)CA::Render::Decoder::decode_object(v5, 0);
        CA::Render::Decoder::decode_int32((CA::Render::Decoder *)v5);
        if ((*(_BYTE *)(v5 + 18) & 1) == 0)
        {
          CA::Render::Context::set_object((CA::Render::Context *)v13, v22, v23, v24);
          goto LABEL_93;
        }
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v103 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_ERROR))
          {
            v104 = *(_DWORD *)(v13 + 16);
            *(_DWORD *)buf = 67109120;
            v158 = v104;
            _os_log_impl(&dword_184457000, v103, OS_LOG_TYPE_ERROR, "CoreAnimation: serialization error from context %x\n", buf, 8u);
          }
        }
        if (!v24)
          goto LABEL_170;
        v105 = (unsigned int *)((char *)v24 + 8);
        do
        {
          v106 = __ldaxr(v105);
          v107 = --v106 == 0;
        }
        while (__stlxr(v106, v105));
        goto LABEL_167;
      case 3:
        *a2 = 1;
        v25 = (CA::Render::Object *)CA::Render::Decoder::decode_size_t((CA::Render::Decoder *)v5);
        CA::Render::Context::update_layer((CA::Render::Context *)v13, v25);
        goto LABEL_93;
      case 4:
        *a2 = 1;
        v26 = (CA::Render::Object *)CA::Render::Decoder::decode_size_t((CA::Render::Decoder *)v5);
        v24 = (CA::Render::Object *)CA::Render::Decoder::decode_object((CA::Render::Decoder *)v5, 7, (uint64_t)&CA::Render::Decoder::decode_animation(void)::types);
        if ((*(_BYTE *)(v5 + 18) & 1) == 0)
        {
          CA::Render::Context::add_animation((CA::Render::Context *)v13, v26, v24);
          if (v24)
          {
            v27 = (unsigned int *)((char *)v24 + 8);
            do
            {
              v28 = __ldaxr(v27);
              v29 = --v28 == 0;
            }
            while (__stlxr(v28, v27));
            goto LABEL_86;
          }
          goto LABEL_93;
        }
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v108 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_ERROR))
          {
            v109 = *(_DWORD *)(v13 + 16);
            *(_DWORD *)buf = 67109120;
            v158 = v109;
            _os_log_impl(&dword_184457000, v108, OS_LOG_TYPE_ERROR, "CoreAnimation: serialization error from context %x\n", buf, 8u);
          }
        }
        if (!v24)
          goto LABEL_170;
        v110 = (unsigned int *)((char *)v24 + 8);
        do
        {
          v111 = __ldaxr(v110);
          v107 = --v111 == 0;
        }
        while (__stlxr(v111, v110));
        goto LABEL_167;
      case 5:
        *a2 = 1;
        v30 = (CA::Render::Object *)CA::Render::Decoder::decode_size_t((CA::Render::Decoder *)v5);
        CA::Render::Context::remove_all_animations((CA::Render::Context *)v13, v30);
        goto LABEL_93;
      case 6:
        *a2 = 1;
        v31 = (CA::Render::Object *)CA::Render::Decoder::decode_size_t((CA::Render::Decoder *)v5);
        CFStringGetTypeID();
        v32 = CA::Render::Decoder::decode_cfobject((CA::Render::Decoder *)v5);
        CA::Render::Context::remove_animation((CA::Render::Context *)v13, v31, (const __CFString *)v32);
        if (v32)
          CFRelease(v32);
        goto LABEL_93;
      case 7:
        *a2 = 1;
        v33 = CA::Render::Decoder::decode_size_t((CA::Render::Decoder *)v5);
        CA::Render::Context::set_layer_id(v13, v33);
        goto LABEL_93;
      case 8:
        CFDictionaryGetTypeID();
        v34 = CA::Render::Decoder::decode_cfobject((CA::Render::Decoder *)v5);
        X::CFRef<__CFDictionary const*>::operator=(v153, v34);
        ++*(_DWORD *)(v13 + 48);
        if (v34)
          CFRelease(v34);
        v35 = 7;
        goto LABEL_31;
      case 9:
        *a2 = 1;
        v36 = CA::Render::Decoder::decode_colorspace((CA::Render::Decoder *)v5);
        if ((*(_BYTE *)(v5 + 18) & 1) != 0)
        {
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            v112 = x_log_category_render;
            if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_ERROR))
            {
              v113 = *(_DWORD *)(v13 + 16);
              *(_DWORD *)buf = 67109120;
              v158 = v113;
              _os_log_impl(&dword_184457000, v112, OS_LOG_TYPE_ERROR, "CoreAnimation: serialization error from context %x\n", buf, 8u);
            }
          }
          if (!v36)
            goto LABEL_170;
          v114 = v36;
LABEL_137:
          CFRelease(v114);
          goto LABEL_170;
        }
        CA::Render::Context::set_colorspace((CA::Render::Context *)v13, v36);
        CGColorSpaceRelease(v36);
        goto LABEL_93;
      case 10:
        CFStringGetTypeID();
        v37 = CA::Render::Decoder::decode_cfobject((CA::Render::Decoder *)v5);
        if ((*(_BYTE *)(v5 + 18) & 1) == 0)
        {
          CA::Render::Context::set_client_annotation((CA::Render::Context *)v13, v37);
          goto LABEL_93;
        }
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v115 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_ERROR))
          {
            v116 = *(_DWORD *)(v13 + 16);
            *(_DWORD *)buf = 67109120;
            v158 = v116;
            _os_log_impl(&dword_184457000, v115, OS_LOG_TYPE_ERROR, "CoreAnimation: serialization error from context %x\n", buf, 8u);
          }
        }
        if (!v37)
          goto LABEL_170;
        v114 = v37;
        goto LABEL_137;
      case 11:
      case 12:
        v16 = v15;
        *a2 = 1;
        v17 = CA::Render::Decoder::decode_size_t((CA::Render::Decoder *)v5);
        CA::Render::Context::order_relative((CA::Render::Context *)v13, v16 == 11, v17);
        goto LABEL_93;
      case 13:
        *a2 = 1;
        v38 = COERCE_FLOAT(CA::Render::Decoder::decode_int32((CA::Render::Decoder *)v5));
        if (*(float *)(v13 + 192) == v38)
          goto LABEL_93;
        *(float *)(v13 + 192) = v38;
        v35 = 8;
LABEL_31:
        CA::Render::post_notification(v35, v13, 0, 0);
        goto LABEL_93;
      case 14:
        *a2 = 1;
        v39 = CA::Render::Decoder::decode_int32((CA::Render::Decoder *)v5);
        v24 = (CA::Render::Object *)CA::Render::Decoder::decode_object(v5, 0);
        if ((*(_BYTE *)(v5 + 18) & 1) == 0)
        {
          CA::Render::Context::set_slot((CA::Render::Context *)v13, v39, v24);
          if (v24)
          {
            v40 = (unsigned int *)((char *)v24 + 8);
            do
            {
              v41 = __ldaxr(v40);
              v29 = --v41 == 0;
            }
            while (__stlxr(v41, v40));
            goto LABEL_86;
          }
          goto LABEL_93;
        }
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v117 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_ERROR))
          {
            v118 = *(_DWORD *)(v13 + 16);
            *(_DWORD *)buf = 67109120;
            v158 = v118;
            _os_log_impl(&dword_184457000, v117, OS_LOG_TYPE_ERROR, "CoreAnimation: serialization error from context %x\n", buf, 8u);
          }
        }
        if (!v24)
          goto LABEL_170;
        v119 = (unsigned int *)((char *)v24 + 8);
        do
        {
          v120 = __ldaxr(v119);
          v107 = --v120 == 0;
        }
        while (__stlxr(v120, v119));
        goto LABEL_167;
      case 15:
        v42 = CA::Render::Decoder::decode_int32((CA::Render::Decoder *)v5);
        CA::Render::Context::delete_slot((CA::Render::Context *)v13, v42);
        goto LABEL_93;
      case 16:
        v43 = CA::Render::Decoder::decode_int32((CA::Render::Decoder *)v5);
        v44 = (CA::Render::Context *)CA::Render::Decoder::decode_int32((CA::Render::Decoder *)v5);
        CA::Render::Context::transfer_slot((CA::Render::Context *)v13, v43, v44);
        goto LABEL_93;
      case 17:
        v45 = CA::Render::Decoder::decode_size_t((CA::Render::Decoder *)v5);
        v46 = CA::Render::Decoder::decode_int32((CA::Render::Decoder *)v5);
        v47 = CA::Render::Context::lookup_object(*(_QWORD *)(v13 + 136), *(_DWORD *)(v13 + 148), v45, v46, 0, 0);
        if (v47)
          CA::Render::post_notification(0xBu, v47, 0, 0);
        v20 = (CA::Render::Context *)v13;
        v21 = (CA::Render::Object *)v45;
        v19 = v46;
LABEL_42:
        CA::Render::Context::delete_object(v20, v21, v19);
        goto LABEL_93;
      case 18:
        *a2 = 1;
        v48 = CA::Render::Decoder::decode_int32((CA::Render::Decoder *)v5);
        v49 = CA::Render::Decoder::decode_int32((CA::Render::Decoder *)v5);
        CA::Render::Context::flush_image_queue((CA::Render::Context *)v13, v48, v49);
        goto LABEL_93;
      case 19:
        v151 = a4;
        v152 = v6;
        *a2 = 1;
        v150 = (CA::Render::Context *)CA::Render::Decoder::decode_size_t((CA::Render::Decoder *)v5);
        v149 = CA::Render::Decoder::decode_int32((CA::Render::Decoder *)v5);
        v148 = CA::Render::Decoder::decode_int32((CA::Render::Decoder *)v5);
        v147 = CA::Render::Decoder::decode_int32((CA::Render::Decoder *)v5);
        v50 = CA::Render::Decoder::decode_int32((CA::Render::Decoder *)v5);
        v51 = CA::Render::Decoder::decode_int32((CA::Render::Decoder *)v5);
        v52 = CA::Render::Decoder::decode_int32((CA::Render::Decoder *)v5);
        v53 = CA::Render::Decoder::decode_int32((CA::Render::Decoder *)v5);
        v54 = CA::Render::Decoder::decode_int8((CA::Render::Decoder *)v5);
        LODWORD(v55) = CA::Render::Decoder::decode_int32((CA::Render::Decoder *)v5);
        v56 = CA::Render::Decoder::decode_int32((CA::Render::Decoder *)v5);
        v57 = CA::Render::Decoder::decode_int32((CA::Render::Decoder *)v5);
        v58 = (CA::Render::Pattern *)CA::Render::Decoder::decode_object(v5, 37);
        v24 = v58;
        if ((*(_BYTE *)(v5 + 18) & 1) == 0)
        {
          v145 = v53;
          v13 = (unint64_t)v156;
          CA::Render::ImageProvider::create(v156, v150, v149, v148, v147, v50, v51, v52, v55, v145, v54 != 0, v146, v56, v57, v58);
          if (v24)
          {
            v59 = (unsigned int *)((char *)v24 + 8);
            a4 = v151;
            v6 = v152;
            a2 = v155;
            v4 = &jpt_18448092C;
            do
            {
              v60 = __ldaxr(v59);
              v29 = --v60 == 0;
            }
            while (__stlxr(v60, v59));
            goto LABEL_86;
          }
          a4 = v151;
          v6 = v152;
          a2 = v155;
          v4 = &jpt_18448092C;
          goto LABEL_93;
        }
        if (x_log_hook_p())
        {
          v13 = (unint64_t)v156;
          x_log_();
          a4 = v151;
          v6 = v152;
          a2 = v155;
        }
        else
        {
          v121 = x_log_category_render;
          a4 = v151;
          v6 = v152;
          a2 = v155;
          v13 = (unint64_t)v156;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_ERROR))
          {
            v122 = *((_DWORD *)v156 + 4);
            *(_DWORD *)buf = 67109120;
            v158 = v122;
            _os_log_impl(&dword_184457000, v121, OS_LOG_TYPE_ERROR, "CoreAnimation: serialization error from context %x\n", buf, 8u);
          }
        }
        if (!v24)
          goto LABEL_170;
        v123 = (unsigned int *)((char *)v24 + 8);
        do
        {
          v124 = __ldaxr(v123);
          v107 = --v124 == 0;
        }
        while (__stlxr(v124, v123));
        goto LABEL_167;
      case 20:
        *a2 = 1;
        v61 = CA::Render::Decoder::decode_size_t((CA::Render::Decoder *)v5);
        v62 = CA::Render::Decoder::decode_int32((CA::Render::Decoder *)v5);
        v63 = CA::Render::Decoder::decode_int32((CA::Render::Decoder *)v5);
        CA::Render::ImageProvider::set_image_size(*(CA::Render::ImageProvider **)(v13 + 136), (CA::Render::Context *)*(unsigned int *)(v13 + 148), v61, v62, v63);
        goto LABEL_93;
      case 21:
        *a2 = 1;
        v64 = CA::Render::Decoder::decode_size_t((CA::Render::Decoder *)v5);
        v65 = CA::Render::Decoder::decode_int32((CA::Render::Decoder *)v5);
        v24 = (CA::Render::Object *)CA::Render::Decoder::decode_object(v5, 37);
        if ((*(_BYTE *)(v5 + 18) & 1) == 0)
        {
          CA::Render::ImageProvider::set_fill_color(*(CA::Render::ImageProvider **)(v13 + 136), (CA::Render::Context *)*(unsigned int *)(v13 + 148), v64, v65, (Pattern *)v24);
          if (v24)
          {
            v66 = (unsigned int *)((char *)v24 + 8);
            do
            {
              v67 = __ldaxr(v66);
              v29 = --v67 == 0;
            }
            while (__stlxr(v67, v66));
            goto LABEL_86;
          }
          goto LABEL_93;
        }
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v125 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_ERROR))
          {
            v126 = *(_DWORD *)(v13 + 16);
            *(_DWORD *)buf = 67109120;
            v158 = v126;
            _os_log_impl(&dword_184457000, v125, OS_LOG_TYPE_ERROR, "CoreAnimation: serialization error from context %x\n", buf, 8u);
          }
        }
        if (!v24)
          goto LABEL_170;
        v127 = (unsigned int *)((char *)v24 + 8);
        do
        {
          v128 = __ldaxr(v127);
          v107 = --v128 == 0;
        }
        while (__stlxr(v128, v127));
        goto LABEL_167;
      case 22:
        *a2 = 1;
        v68 = CA::Render::Decoder::decode_size_t((CA::Render::Decoder *)v5);
        v69 = CA::Render::Decoder::decode_int32((CA::Render::Decoder *)v5);
        v70 = CA::Render::Context::lookup_object(*(_QWORD *)(v13 + 136), *(_DWORD *)(v13 + 148), v68, 0, 24, 0);
        if (v70)
          *(_DWORD *)(v70 + 136) = v69;
        goto LABEL_93;
      case 23:
        *a2 = 1;
        v71 = CA::Render::Decoder::decode_size_t((CA::Render::Decoder *)v5);
        v72 = CA::Render::Decoder::decode_int32((CA::Render::Decoder *)v5);
        v73 = CA::Render::Decoder::decode_int32((CA::Render::Decoder *)v5);
        v74 = CA::Render::Decoder::decode_int32((CA::Render::Decoder *)v5);
        v24 = (CA::Render::Object *)CA::Render::Decoder::decode_object((CA::Render::Decoder *)v5, 6, (uint64_t)&CA::Render::texture_types);
        v75 = CA::Render::Decoder::decode_int32((CA::Render::Decoder *)v5);
        v76 = CA::Render::Decoder::decode_int32((CA::Render::Decoder *)v5);
        if ((*(_BYTE *)(v5 + 18) & 1) != 0)
        {
          if (x_log_hook_p())
          {
            v13 = (unint64_t)v156;
            x_log_();
            a2 = v155;
          }
          else
          {
            v129 = x_log_category_render;
            a2 = v155;
            v13 = (unint64_t)v156;
            if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_ERROR))
            {
              v130 = *((_DWORD *)v156 + 4);
              *(_DWORD *)buf = 67109120;
              v158 = v130;
              _os_log_impl(&dword_184457000, v129, OS_LOG_TYPE_ERROR, "CoreAnimation: serialization error from context %x\n", buf, 8u);
            }
          }
          if (!v24)
            goto LABEL_170;
          v131 = (unsigned int *)((char *)v24 + 8);
          do
          {
            v132 = __ldaxr(v131);
            v107 = --v132 == 0;
          }
          while (__stlxr(v132, v131));
LABEL_167:
          if (v107)
            (*(void (**)(CA::Render::Object *))(*(_QWORD *)v24 + 16))(v24);
          goto LABEL_170;
        }
        CA::Render::ImageProvider::set_subimage(*((CA::Render::ImageProvider **)v156 + 17), (CA::Render::Context *)*((unsigned int *)v156 + 37), v71, v72, v73, v74, v24, v75, v76);
        if (v24)
        {
          v77 = (unsigned int *)((char *)v24 + 8);
          a2 = v155;
          do
          {
            v78 = __ldaxr(v77);
            v29 = --v78 == 0;
          }
          while (__stlxr(v78, v77));
          v13 = (unint64_t)v156;
          goto LABEL_86;
        }
        a2 = v155;
        v13 = (unint64_t)v156;
        goto LABEL_93;
      case 24:
        *a2 = 1;
        v79 = CA::Render::Decoder::decode_size_t((CA::Render::Decoder *)v5);
        v80 = CA::Render::Decoder::decode_int32((CA::Render::Decoder *)v5);
        v81 = CA::Render::Decoder::decode_int32((CA::Render::Decoder *)v5);
        v82 = CA::Render::Decoder::decode_int32((CA::Render::Decoder *)v5);
        v83 = CA::Render::Decoder::decode_int32((CA::Render::Decoder *)v5);
        v84 = v4;
        v85 = CA::Render::Decoder::decode_int32((CA::Render::Decoder *)v5);
        v86 = CA::Render::Decoder::decode_int32((CA::Render::Decoder *)v5);
        v87 = v81;
        v88 = v82;
        a2 = v155;
        v13 = (unint64_t)v156;
        v89 = v85;
        v4 = v84;
        CA::Render::ImageProvider::invalidate(*((CA::Render::ImageProvider **)v156 + 17), (CA::Render::Context *)*((unsigned int *)v156 + 37), v79, v80, v87, v88, v83, v89, v86);
        goto LABEL_93;
      case 26:
        v90 = COERCE_DOUBLE(CA::Render::Decoder::decode_int64((CA::Render::Decoder *)v5));
        if (v90 > 0.0)
          CA::Render::Context::add_input_time((CA::Render::Context *)v13, v90);
        goto LABEL_93;
      case 27:
        if (CA::Render::Decoder::decode_int8((CA::Render::Decoder *)v5))
          CA::Render::Context::set_frame_stall_skip_request((CA::Render::Context *)v13, 1);
        goto LABEL_93;
      case 28:
        v91 = CA::Render::Decoder::decode_int64((CA::Render::Decoder *)v5);
        if (v91)
          CA::Render::Context::add_remote_input_mach_time((CA::Render::Context *)v13, v91);
        goto LABEL_93;
      case 29:
        v92 = COERCE_DOUBLE(CA::Render::Decoder::decode_int64((CA::Render::Decoder *)v5));
        if (v92 != 1.79769313e308)
          v14 = v92;
        goto LABEL_93;
      case 30:
        CA::Render::Decoder::decode_int64((CA::Render::Decoder *)v5);
        goto LABEL_93;
      case 31:
        v93 = CA::Render::Decoder::decode_int8((CA::Render::Decoder *)v5);
        *a3 = 1;
        if (v93)
          *a2 = 1;
        goto LABEL_93;
      case 32:
        v94 = CA::Render::Decoder::decode_int32((CA::Render::Decoder *)v5);
        if (CA::Render::Decoder::decode_int8((CA::Render::Decoder *)v5))
        {
          *a2 = 1;
          *(_DWORD *)(v13 + 288) = v94;
          if (!*(_DWORD *)(v13 + 292))
            *(_DWORD *)(v13 + 292) = v94;
          *(_DWORD *)(v13 + 296) = v94;
        }
        else
        {
          *(_DWORD *)(v13 + 288) = v94;
        }
        goto LABEL_93;
      case 33:
        buf[0] = 0;
        v95 = CA::Render::Decoder::decode_port((CA::Render::Decoder *)v5, 18, (BOOL *)buf);
        if (buf[0])
          mach_port_deallocate(*MEMORY[0x1E0C83DA0], v95);
        goto LABEL_93;
      case 34:
        *(_QWORD *)a4 = CA::Render::Decoder::decode_int64((CA::Render::Decoder *)v5);
        goto LABEL_93;
      case 35:
        *a2 = 1;
        v96 = CA::Render::Decoder::decode_object(v5, 47);
        v24 = (CA::Render::Object *)v96;
        if ((*(_BYTE *)(v5 + 18) & 1) == 0)
        {
          CA::Render::Context::flush_presentation_modifier_shmem(v96, v97);
          if (v24)
          {
            v98 = (unsigned int *)((char *)v24 + 8);
            do
            {
              v99 = __ldaxr(v98);
              v29 = --v99 == 0;
            }
            while (__stlxr(v99, v98));
LABEL_86:
            if (v29)
              (*(void (**)(CA::Render::Object *))(*(_QWORD *)v24 + 16))(v24);
          }
LABEL_93:
          if ((*(_BYTE *)(v5 + 18) & 1) != 0)
          {
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              v101 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_ERROR))
              {
                v102 = *(_DWORD *)(v13 + 16);
                *(_DWORD *)buf = 67109120;
                v158 = v102;
                _os_log_impl(&dword_184457000, v101, OS_LOG_TYPE_ERROR, "CoreAnimation: serialization error from context %x\n", buf, 8u);
              }
            }
            goto LABEL_170;
          }
          continue;
        }
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v133 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_ERROR))
          {
            v134 = *(_DWORD *)(v13 + 16);
            *(_DWORD *)buf = 67109120;
            v158 = v134;
            _os_log_impl(&dword_184457000, v133, OS_LOG_TYPE_ERROR, "CoreAnimation: serialization error from context %x\n", buf, 8u);
          }
        }
        if (v24)
        {
          v135 = (unsigned int *)((char *)v24 + 8);
          do
          {
            v136 = __ldaxr(v135);
            v107 = --v136 == 0;
          }
          while (__stlxr(v136, v135));
          goto LABEL_167;
        }
LABEL_170:
        if (*(_DWORD *)(v13 + 288))
        {
          v137 = (unsigned int *)(v13 + 228);
          if (!atomic_load((unsigned int *)(v13 + 228)))
          {
            if (*(_DWORD *)(v13 + 252))
              v139 = 0;
            else
              v139 = getpid();
            while (!__ldaxr(v137))
            {
              if (!__stlxr(v139, v137))
                goto LABEL_180;
            }
            __clrex();
          }
LABEL_180:
          kdebug_trace();
        }
        v141 = (unsigned int *)(v13 + 228);
        if (!atomic_load((unsigned int *)(v13 + 228)))
        {
          if (*(_DWORD *)(v13 + 252))
            v143 = 0;
          else
            v143 = getpid();
          while (!__ldaxr(v141))
          {
            if (!__stlxr(v143, v141))
              goto LABEL_189;
          }
          __clrex();
        }
LABEL_189:
        if (*a2)
        {
          CA::Render::Context::add_begin_time((os_unfair_lock_s *)v13, v14);
          CA::Render::Context::add_update_deadline((CA::Render::Context *)v13, *a4);
        }
        if ((*(_BYTE *)(v5 + 64) & 4) == 0)
          CA::Render::Context::increment_commit_seed((os_unfair_lock_s *)v13);
        kdebug_trace();
        CA::Render::Server::CmdStreamMsg::_send_reply(v6);
        return;
      case 36:
        *a2 = 1;
        v100 = COERCE_DOUBLE(CA::Render::Decoder::decode_int64((CA::Render::Decoder *)v5));
        CA::Render::Context::set_glitch_request((CA::Render::Context *)v13, v100);
        goto LABEL_93;
      default:
        CA::Render::Decoder::set_fatal_error((CA::Render::Decoder *)v5, "invalid command: 0x%x, buffer size %zu, offset %zu", v15, *(_QWORD *)(v5 + 40) - *(_QWORD *)(v5 + 24), *(_QWORD *)(v5 + 32) - *(_QWORD *)(v5 + 24));
        goto LABEL_170;
    }
  }
}

uint64_t CA::Render::Decoder::decode_int8(CA::Render::Decoder *this)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;

  v1 = (unsigned __int8 *)*((_QWORD *)this + 4);
  v2 = (unsigned __int8 *)*((_QWORD *)this + 5);
  if (v1 + 1 <= v2)
  {
    *((_QWORD *)this + 4) = v1 + 1;
    return *v1;
  }
  else
  {
    CA::Render::Decoder::set_fatal_error(this, "%s - _buffer_point = %p, _buffer_end = %p", "decode_int8", *((const void **)this + 4), v2);
    return 0;
  }
}

uint64_t CA::Render::Decoder::decode_int32(CA::Render::Decoder *this)
{
  unsigned int *v1;
  unsigned int *v2;
  unsigned int *v3;
  uint64_t v4;

  v1 = (unsigned int *)*((_QWORD *)this + 4);
  v2 = (unsigned int *)*((_QWORD *)this + 5);
  v3 = v1 + 1;
  if (v1 + 1 <= v2)
  {
    v4 = *v1;
    *((_QWORD *)this + 4) = v3;
  }
  else
  {
    CA::Render::Decoder::set_fatal_error(this, "%s - _buffer_point = %p, _buffer_end = %p", "decode_int32", *((const void **)this + 4), v2);
    return 0;
  }
  return v4;
}

uint64_t CA::Render::Decoder::decode_int64(CA::Render::Decoder *this)
{
  uint64_t *v1;
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = (uint64_t *)*((_QWORD *)this + 4);
  v2 = (uint64_t *)*((_QWORD *)this + 5);
  v3 = v1 + 1;
  if (v1 + 1 <= v2)
  {
    v4 = *v1;
    *((_QWORD *)this + 4) = v3;
  }
  else
  {
    CA::Render::Decoder::set_fatal_error(this, "%s - _buffer_point = %p, _buffer_end = %p", "decode_int64", *((const void **)this + 4), v2);
    return 0;
  }
  return v4;
}

uint64_t CA::Render::Decoder::decode_size_t(CA::Render::Decoder *this)
{
  if ((*((_BYTE *)this + 64) & 1) != 0)
    return CA::Render::Decoder::decode_int64(this);
  else
    return CA::Render::Decoder::decode_int32(this);
}

void CA::Render::Update::add_included_context(CA::Render::Update *this, os_unfair_lock_s *a2, char a3)
{
  double begin_time;
  uint64_t v7;
  double v8;
  double v9;
  uint32_t os_unfair_lock_opaque;
  float v11;
  unint64_t v12;
  uint32_t v13;
  unint64_t v14;
  BOOL v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  unsigned int *p_os_unfair_lock_opaque;
  unsigned int v21;
  os_unfair_lock_s *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  double v28;
  os_unfair_lock_s **v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  uint32_t v33;
  unint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;

  begin_time = CA::Render::Context::get_begin_time(a2, *((double *)this + 15));
  v7 = mach_absolute_time();
  v8 = CATimeWithHostTime(v7);
  if (v8 >= begin_time)
    v8 = begin_time;
  v9 = *((double *)this + 96);
  if (v9 >= v8)
    v9 = v8;
  *((double *)this + 96) = v9;
  os_unfair_lock_opaque = a2[72]._os_unfair_lock_opaque;
  v11 = *((float *)this + 265);
  if (v11 <= *(float *)&a2[77]._os_unfair_lock_opaque)
    v11 = *(float *)&a2[77]._os_unfair_lock_opaque;
  *((float *)this + 265) = v11;
  v12 = CAHostTimeWithTime(v8);
  mach_get_times();
  v13 = a2[73]._os_unfair_lock_opaque;
  if (v13)
    *((_DWORD *)this + 67) |= 0x1000000u;
  v14 = v12;
  v15 = v13 != 0;
  v16 = (_QWORD *)((char *)this + 840);
  v17 = operator new(0x38uLL);
  v18 = v17;
  v17[4] = 0;
  v19 = v17 + 4;
  p_os_unfair_lock_opaque = &a2[2]._os_unfair_lock_opaque;
  do
    v21 = __ldaxr(p_os_unfair_lock_opaque);
  while (__stlxr(v21 + 1, p_os_unfair_lock_opaque));
  v22 = a2;
  if (!v21)
  {
    v22 = 0;
    do
      v39 = __ldaxr(p_os_unfair_lock_opaque);
    while (__stlxr(v39 - 1, p_os_unfair_lock_opaque));
  }
  v17[4] = v22;
  *((_BYTE *)v17 + 40) = v15;
  *((_DWORD *)v17 + 11) = os_unfair_lock_opaque;
  v17[6] = v14;
  v23 = (_QWORD *)*v16;
  if (*v16)
  {
    while (1)
    {
      while (1)
      {
        v24 = v23;
        v25 = (uint64_t)(v23 + 4);
        if (!CA::Render::Update::ContextInfo::operator<((uint64_t)v19, v23 + 4))
          break;
        v23 = (_QWORD *)*v24;
        v16 = v24;
        if (!*v24)
          goto LABEL_20;
      }
      if (!CA::Render::Update::ContextInfo::operator<(v25, v19))
        break;
      v16 = v24 + 1;
      v23 = (_QWORD *)v24[1];
      if (!v23)
        goto LABEL_20;
    }
    if (*v16)
    {
      if (v22)
      {
        v35 = &v22[2]._os_unfair_lock_opaque;
        do
        {
          v36 = __ldaxr(v35);
          v37 = v36 - 1;
        }
        while (__stlxr(v37, v35));
        if (!v37)
          (*(void (**)(os_unfair_lock_s *))(*(_QWORD *)&v22->_os_unfair_lock_opaque + 16))(v22);
      }
      operator delete(v18);
      goto LABEL_23;
    }
  }
  else
  {
    v24 = (_QWORD *)((char *)this + 840);
  }
LABEL_20:
  *v18 = 0;
  v18[1] = 0;
  v18[2] = v24;
  *v16 = v18;
  v26 = **((_QWORD **)this + 104);
  if (v26)
  {
    *((_QWORD *)this + 104) = v26;
    v18 = (_QWORD *)*v16;
  }
  v27 = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 105), v18);
  ++*((_QWORD *)this + 106);
LABEL_23:
  v28 = *(double *)&a2[134]._os_unfair_lock_opaque;
  *(_QWORD *)&a2[134]._os_unfair_lock_opaque = 0;
  if (v28 != 0.0)
    CA::Render::CA_IS_FULFILLING_SERVER_GLITCH_REQUEST((CA::Render *)v27, v28);
  v29 = (os_unfair_lock_s **)((char *)this + 336);
  while (1)
  {
    v29 = (os_unfair_lock_s **)*v29;
    if (!v29)
      break;
    if (v29[1] == a2)
      return;
  }
  v30 = x_heap_malloc_small_(*(uint64_t **)this, 0x18uLL);
  *(_QWORD *)(v30 + 8) = a2;
  v31 = &a2[2]._os_unfair_lock_opaque;
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32 + 1, v31));
  if (!v32)
  {
    do
      v38 = __ldaxr(v31);
    while (__stlxr(v38 - 1, v31));
  }
  os_unfair_lock_lock(a2 + 13);
  v33 = a2[16]._os_unfair_lock_opaque;
  os_unfair_lock_unlock(a2 + 13);
  *(_DWORD *)(v30 + 16) = v33;
  *(_QWORD *)v30 = *((_QWORD *)this + 42);
  *(_BYTE *)(v30 + 20) = a3;
  *((_QWORD *)this + 42) = v30;
  v34 = *(_QWORD *)&a2[118]._os_unfair_lock_opaque;
  if (*((_QWORD *)this + 38) > v34)
  {
    *((_QWORD *)this + 38) = v34;
    *(_QWORD *)&a2[118]._os_unfair_lock_opaque = -1;
  }
}

uint64_t CA::OGL::Renderer::alloc_layer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  __int16 v11;
  uint64_t v12;
  unsigned int v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;

  v8 = *(_QWORD *)(a1 + 64);
  if (v8)
    *(_QWORD *)(a1 + 64) = *(_QWORD *)v8;
  else
    v8 = x_heap_malloc_small_(*(uint64_t **)(a1 + 56), 0x130uLL);
  *(_QWORD *)v8 = 0;
  *(_QWORD *)(v8 + 8) = a3;
  v9 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = v9;
  *(_QWORD *)(v8 + 32) = 0;
  v10 = *(_WORD *)(v8 + 40);
  *(_WORD *)(v8 + 40) = v10 & 0xFFC0;
  if ((*(_BYTE *)(v9 + 43) & 4) == 0
    || (*(_BYTE *)(*(_QWORD *)a1 + 416) & 8) != 0
    || (*(_QWORD *)(a2 + 24) & 0x100) != 0)
  {
    v11 = 0;
  }
  else
  {
    v11 = 16320;
  }
  *(_WORD *)(v8 + 40) = v11 | v10 & 0xC000;
  *(_WORD *)(v8 + 42) = 771;
  *(_DWORD *)(v8 + 296) = 0;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_OWORD *)(v8 + 112) = 0u;
  *(_OWORD *)(v8 + 128) = 0u;
  *(_DWORD *)(v8 + 300) &= 0xF0000000;
  v12 = *(_QWORD *)(a1 + 72);
  if (v12)
    *(_QWORD *)(a1 + 72) = *(_QWORD *)v12;
  else
    v12 = x_heap_malloc_small_(*(uint64_t **)(a1 + 56), 0xF8uLL);
  *(_QWORD *)(v12 + 48) = 0;
  *(_QWORD *)(v12 + 192) = 0;
  *(_QWORD *)(v12 + 200) = 0;
  *(_DWORD *)(v12 + 208) = 0;
  *(_WORD *)(v12 + 212) = *(_WORD *)(v12 + 212) & 0xC000 | 1;
  v13 = *(_DWORD *)(v12 + 220) & 0xFC000000;
  *(_DWORD *)(v12 + 216) = *(_DWORD *)(v12 + 216) & 0xFFC00000 | 0xF;
  *(_DWORD *)(v12 + 220) = v13;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 8) = a1;
  *(_QWORD *)(v12 + 16) = v8;
  *(_DWORD *)(v12 + 136) = -1;
  *(_QWORD *)v12 = &off_1E1595CE0;
  *(_BYTE *)(v12 + 224) &= 0xFCu;
  *(_QWORD *)(v12 + 232) = 0;
  *(_QWORD *)(v8 + 104) = v12;
  *(_QWORD *)(v12 + 64) = 0;
  *(_QWORD *)(v12 + 72) = 0;
  v14 = (*(unsigned __int8 *)(v12 + 125) << 8) | 3;
  v15 = *(_QWORD *)(a4 + 32);
  *(_WORD *)(v12 + 124) = v14;
  *(_QWORD *)(v12 + 88) = v15;
  *(_QWORD *)(v12 + 96) = 0;
  *(_QWORD *)(v12 + 104) = 0;
  *(_QWORD *)(v12 + 112) = 0;
  *(_DWORD *)(v12 + 120) = *(_DWORD *)(a4 + 64);
  v16 = v14 & 0xFCFF | *(_WORD *)(a4 + 68) & 0x100;
  *(_WORD *)(v12 + 124) = v16;
  *(_WORD *)(v12 + 124) = v16 & 0xFBFF | *(_WORD *)(a4 + 68) & 0x400;
  return v8;
}

uint64_t x_heap_malloc_small_(uint64_t *a1, unint64_t a2)
{
  unint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  malloc_zone_t *malloc_zone;
  _QWORD *v9;
  uint64_t result;

  v4 = a1[2];
  if (v4 < a2)
  {
    v5 = malloc_type_malloc(a1[3], 0x9F16532FuLL);
    v6 = a1[3];
    a1[1] = (uint64_t)v5;
    a1[2] = v6;
    v7 = *a1;
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v9 = malloc_type_zone_malloc(malloc_zone, 0x10uLL, 0x8BB15036uLL);
    *v9 = v5;
    v9[1] = v7;
    *a1 = (uint64_t)v9;
    v4 = a1[2];
  }
  result = a1[1];
  a1[1] = result + a2;
  a1[2] = v4 - a2;
  return result;
}

BOOL CA::Render::Update::ContextInfo::operator<(uint64_t a1, _QWORD *a2)
{
  unsigned int v2;
  unsigned int v3;
  BOOL v4;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  pid_t v11;
  unsigned int v12;
  int v13;
  unsigned int *v14;
  unsigned int v15;
  pid_t v16;
  unsigned int v17;
  int v18;
  _DWORD *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v23;
  signed int v24;
  pid_t v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  unsigned int *v29;
  signed int v30;
  pid_t v31;
  int v32;

  v2 = *(unsigned __int8 *)(a1 + 8);
  v3 = *((unsigned __int8 *)a2 + 8);
  v4 = v2 >= v3;
  if (v2 != v3)
    return !v4;
  v7 = *(_DWORD *)(a1 + 12);
  v8 = *((_DWORD *)a2 + 3);
  v4 = v7 >= v8;
  if (v7 != v8)
    return !v4;
  v9 = (unsigned int *)(*(_QWORD *)a1 + 228);
  v10 = atomic_load(v9);
  if (!v10)
  {
    if (*(_DWORD *)(*(_QWORD *)a1 + 252))
      v11 = 0;
    else
      v11 = getpid();
    while (1)
    {
      v12 = __ldaxr(v9);
      if (v12)
        break;
      if (!__stlxr(v11, v9))
      {
        v13 = 1;
        goto LABEL_11;
      }
    }
    v13 = 0;
    __clrex();
LABEL_11:
    if (v13)
      v10 = v11;
    else
      v10 = v12;
  }
  v14 = (unsigned int *)(*a2 + 228);
  v15 = atomic_load(v14);
  if (!v15)
  {
    if (*(_DWORD *)(*a2 + 252))
      v16 = 0;
    else
      v16 = getpid();
    while (1)
    {
      v17 = __ldaxr(v14);
      if (v17)
        break;
      if (!__stlxr(v16, v14))
      {
        v18 = 1;
        goto LABEL_22;
      }
    }
    v18 = 0;
    __clrex();
LABEL_22:
    if (v18)
      v15 = v16;
    else
      v15 = v17;
  }
  v19 = *(_DWORD **)a1;
  if (v10 == v15)
  {
    v20 = v19[4];
    v21 = *(_DWORD *)(*a2 + 16);
    v4 = v20 >= v21;
    if (v20 == v21)
      v4 = *(_QWORD *)(a1 + 16) >= a2[2];
    return !v4;
  }
  v23 = v19 + 57;
  v24 = atomic_load(v19 + 57);
  if (!v24)
  {
    if (v19[63])
      v25 = 0;
    else
      v25 = getpid();
    while (1)
    {
      v26 = __ldaxr(v23);
      if (v26)
        break;
      if (!__stlxr(v25, v23))
      {
        v27 = 1;
        goto LABEL_39;
      }
    }
    v27 = 0;
    __clrex();
LABEL_39:
    if (v27)
      v24 = v25;
    else
      v24 = v26;
  }
  v28 = *a2;
  v29 = (unsigned int *)(*a2 + 228);
  v30 = atomic_load(v29);
  if (!v30)
  {
    if (*(_DWORD *)(v28 + 252))
      v31 = 0;
    else
      v31 = getpid();
    while (1)
    {
      v30 = __ldaxr(v29);
      if (v30)
        break;
      if (!__stlxr(v31, v29))
      {
        v32 = 1;
        goto LABEL_50;
      }
    }
    v32 = 0;
    __clrex();
LABEL_50:
    if (v32)
      v30 = v31;
  }
  return v24 < v30;
}

unint64_t CAHostTimeWithTime(double a1)
{
  double v2;

  if (*(double *)&time_scale == 0.0 && time_scale_once != -1)
  {
    v2 = a1;
    dispatch_once_f(&time_scale_once, 0, (dispatch_function_t)initialize_time_scale);
    a1 = v2;
  }
  return (unint64_t)(*(double *)&recip_time_scale * a1 + 0.5);
}

double CA::Render::Context::get_begin_time(os_unfair_lock_s *this, double a2)
{
  os_unfair_lock_s *v4;
  double *v5;
  double *v6;
  double v7;
  double v8;
  double v9;

  v4 = this + 120;
  os_unfair_lock_lock(this + 120);
  v5 = *(double **)&this[122]._os_unfair_lock_opaque;
  v6 = *(double **)&this[124]._os_unfair_lock_opaque;
  if (v5 == v6)
  {
    v7 = 1.79769313e308;
  }
  else
  {
    v7 = 1.79769313e308;
    do
    {
      v8 = v5[1];
      v9 = COERCE_DOUBLE(atomic_load(&CA::Render::Context::_begin_time_threshold));
      if (v8 > v9)
      {
        if (v5[1] > a2)
          break;
        if (*v5 < v7)
          v7 = *v5;
      }
      v5 += 2;
    }
    while (v5 != v6);
  }
  os_unfair_lock_unlock(v4);
  return v7;
}

void CA::Render::Context::set_object(CA::Render::Context *this, unint64_t a2, unsigned int a3, CA::Render::Object *a4)
{
  uint64_t v4;
  CA::Render::Object *v5;
  int v6;
  CA::Render::Object *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  CA::Render::Object *v11;
  uint64_t v12;
  uint64_t v13;
  CA::Render::Object *v14;
  __n128 v15;
  CA::Render::Object *v16;
  int v17;
  uint64_t v18;
  CA::Render::Layer *v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  BOOL v23;
  unsigned int *v24;
  unsigned int v25;
  NSObject *v26;
  uint64_t v27;
  unint64_t v28;
  size_t v29;
  _QWORD *v30;
  __int128 v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  NSObject *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  CA::Render::Layer *v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  CA::Render::LayerNode *v54;
  BOOL v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int *v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int *v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int v76;
  _QWORD *v77;
  int v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  CA::Render::Texture *v83;
  CA::Shape *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  CA::Shape *v89;
  CA::Shape *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int64_t v110;
  uint64_t *v111;
  uint64_t v112;
  char v113;
  int64_t v114;
  uint64_t *v115;
  uint64_t v116;
  int64_t v117;
  int64_t v118;
  int64_t v119;
  int64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _BOOL8 v124;
  uint64_t v125;
  int64_t v126;
  int64_t v127;
  uint64_t *v128;
  uint64_t v129;
  const CA::Bounds *v130;
  uint64_t v131;
  int64_t v132;
  int64_t v133;
  int v134;
  uint64_t v135;
  int64_t v136;
  int64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  unsigned int *v144;
  unsigned int *v145;
  unsigned int v146;
  unsigned int v147;
  unsigned int *v148;
  unsigned int v149;
  uint64_t v150;
  _QWORD *v151;
  NSObject *v152;
  _BOOL4 is_valid;
  _BOOL4 v154;
  unsigned int v155;
  unsigned int v156;
  uint64_t v157;
  uint64_t v158;
  _BOOL8 v159;
  uint64_t *v160;
  int64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unsigned int v170;
  uint64_t v171;
  int64_t v172;
  __int128 v173;
  uint64_t v174;
  CA::Render::Object *v175;
  unsigned int v176;
  uint64_t v177;
  uint64_t v178;
  __int128 v179;
  _QWORD *v180;
  __int128 v181;
  _QWORD v182[511];

  v4 = MEMORY[0x1E0C80A78](this);
  v182[509] = *MEMORY[0x1E0C80C00];
  if (!v5)
    return;
  v9 = (uint64_t)v7;
  if (!v7)
    return;
  v10 = v6;
  v11 = v5;
  v12 = v4;
  if (*((_BYTE *)v7 + 12) != 29)
  {
    CA::Render::Context::ResourceTable::insert((CA::Render::Context::ResourceTable *)(v4 + 136), v5, v6, v7);
    return;
  }
  v13 = v8;
  v176 = 0;
  v14 = CA::Render::Context::lookup_handle((CA::Render::Context *)v4, v5, v6, 1, &v176);
  if (v14)
  {
    v16 = v14;
    if (*((_QWORD *)v14 + 2) != v9)
    {
      v17 = *(_DWORD *)(v9 + 12);
      v175 = v14;
      if ((v17 & 0x200) != 0)
      {
        v18 = *(_QWORD *)(v9 + 112);
        if (v18)
        {
          CA::Render::Layer::set_mask((CA::Render::Layer *)v9, 0);
          *(_DWORD *)(v9 + 12) &= ~0x200u;
          v19 = (CA::Render::Layer *)CA::Render::Context::lookup_object(*(_QWORD *)(v12 + 136), *(_DWORD *)(v12 + 148), v18, 0, 29, 0);
          if (v19)
          {
            v20 = v13;
            v14 = (CA::Render::Object *)CA::Render::Layer::set_mask((CA::Render::Layer *)v9, v19);
          }
          else
          {
            v20 = v13;
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              v26 = x_log_category_render;
              v14 = (CA::Render::Object *)os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_ERROR);
              if ((_DWORD)v14)
              {
                LODWORD(v179) = 134217984;
                *(_QWORD *)((char *)&v179 + 4) = v18;
                _os_log_impl(&dword_184457000, v26, OS_LOG_TYPE_ERROR, "CoreAnimation: missing mask layer 0x%lx\n", (uint8_t *)&v179, 0xCu);
              }
            }
          }
        }
        else
        {
          v20 = v13;
          *(_DWORD *)(v9 + 12) = v17 & 0xFFFFFDFF;
        }
        v13 = v20;
        if ((*(_BYTE *)(v9 + 13) & 0x20) == 0)
        {
          v27 = *(_QWORD *)(v9 + 104);
          if (v27)
          {
            v28 = *(unsigned int *)(v27 + 16);
            if (!(_DWORD)v28)
            {
              CA::Render::Layer::set_sublayers(v9, 0);
              goto LABEL_55;
            }
            v170 = v13;
            v174 = v12;
            if (v28 > 0x200)
            {
              v30 = malloc_type_malloc(8 * v28, 0x2004093837F09uLL);
              if (!v30)
              {
                CA::Render::Layer::set_sublayers(v9, 0);
                v12 = v174;
                v13 = v170;
                goto LABEL_55;
              }
            }
            else
            {
              MEMORY[0x1E0C80A78](v14);
              v30 = (uint64_t *)((char *)&v157 - ((v29 + 15) & 0xFFFFFFFF0));
              bzero(v30, v29);
            }
            v32 = 0;
            v172 = v28;
            if (v28 <= 1)
              v28 = 1;
            v33 = (uint64_t *)(v27 + 24);
            *(_QWORD *)&v31 = 134217984;
            v173 = v31;
            do
            {
              v34 = *v33;
              v35 = CA::Render::Context::lookup_object(*(_QWORD *)(v174 + 136), *(_DWORD *)(v174 + 148), *v33, 0, 29, 0);
              if (v35)
              {
                v30[v32++] = v35;
              }
              else if (x_log_hook_p())
              {
                x_log_();
              }
              else
              {
                v36 = v30;
                v37 = x_log_category_render;
                if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_ERROR))
                {
                  LODWORD(v179) = v173;
                  *(_QWORD *)((char *)&v179 + 4) = v34;
                  _os_log_impl(&dword_184457000, v37, OS_LOG_TYPE_ERROR, "CoreAnimation: missing sublayer %p\n", (uint8_t *)&v179, 0xCu);
                }
                v30 = v36;
              }
              ++v33;
              --v28;
            }
            while (v28);
            if (v32 <= 1)
            {
              v16 = v175;
              if (v32 == 1)
                v43 = (CA::Render::Layer *)*v30;
              else
                v43 = 0;
              v12 = v174;
              v39 = v172;
              CA::Render::Layer::set_single_sublayer((CA::Render::Layer *)v9, v43);
            }
            else
            {
              v38 = CA::Render::Array::new_array((CA::Render::Array *)v32, v30, (CA::Render::Object *const *)1, 0);
              CA::Render::Layer::set_sublayers(v9, (uint64_t)v38);
              v12 = v174;
              v16 = v175;
              v39 = v172;
              if (v38)
              {
                v40 = v38 + 2;
                do
                {
                  v41 = __ldaxr(v40);
                  v42 = v41 - 1;
                }
                while (__stlxr(v42, v40));
                if (!v42)
                  (*(void (**)(unsigned int *))(*(_QWORD *)v38 + 16))(v38);
              }
            }
            v13 = v170;
            if (v39 >= 0x201)
              free(v30);
          }
        }
      }
LABEL_55:
      if ((v13 & 1) != 0)
        *((_DWORD *)v16 + 21) = 0;
      v44 = *(_QWORD *)(v9 + 96);
      if (!v44)
        goto LABEL_78;
      v45 = *(_DWORD *)(v44 + 12);
      if (v45 != 43)
        goto LABEL_78;
      if (v45 >> 8 == 1)
      {
        if (v12)
        {
          v47 = CA::Render::Context::lookup_object(*(_QWORD *)(v12 + 136), *(_DWORD *)(v12 + 148), *(_QWORD *)(v44 + 16), 0, 0, 0);
          v46 = v47;
          if (v47)
          {
            v48 = (unsigned int *)(v47 + 8);
            do
              v49 = __ldaxr(v48);
            while (__stlxr(v49 + 1, v48));
            if (!v49)
            {
              v46 = 0;
              do
                v156 = __ldaxr(v48);
              while (__stlxr(v156 - 1, v48));
            }
          }
          goto LABEL_67;
        }
      }
      else if (!(v45 >> 8))
      {
        v46 = CA::Render::Context::copy_slot((CA::Render::Context *)*(unsigned int *)(v44 + 16));
LABEL_67:
        v45 = *(_DWORD *)(v44 + 12);
LABEL_69:
        v50 = *(_QWORD *)(v44 + 16);
        CA::Render::Layer::set_contents((CA::Render::Layer *)v9, (CA::Render::Object *)v46);
        if (v45 > 0xFF)
        {
          if (!v46)
            goto LABEL_78;
        }
        else
        {
          *(_DWORD *)(v9 + 12) |= 0x400u;
          *((_DWORD *)v16 + 21) = v50;
          if (!v46)
            goto LABEL_78;
          if (*(_BYTE *)(v46 + 12) == 25)
            *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v46 + 16) + 24) + 72) = *(_DWORD *)(v12 + 16);
        }
        v51 = (unsigned int *)(v46 + 8);
        do
        {
          v52 = __ldaxr(v51);
          v53 = v52 - 1;
        }
        while (__stlxr(v53, v51));
        if (!v53)
          (*(void (**)(uint64_t))(*(_QWORD *)v46 + 16))(v46);
LABEL_78:
        v54 = (CA::Render::LayerNode *)*((_QWORD *)v16 + 2);
        if (v54)
          v55 = v176 == v10;
        else
          v55 = 0;
        if (v55)
        {
          CA::Render::Layer::copy_properties((CA::Render::Layer *)v9, (size_t)v54, v13, v15);
          if ((*((_BYTE *)v16 + 98) & 8) == 0)
            CA::Render::Layer::set_animations(v9, *(_QWORD *)(*((_QWORD *)v16 + 2) + 136));
          v54 = (CA::Render::LayerNode *)*((_QWORD *)v16 + 2);
        }
        if (!v54 || (*((_BYTE *)v16 + 98) & 8) != 0)
        {
          v56 = *((_QWORD *)v16 + 6);
          if (!v56)
            goto LABEL_107;
          v57 = *(_DWORD *)(v12 + 12);
          v58 = -1;
          do
          {
            v59 = v58;
            v56 = *(_QWORD *)(v56 + 8);
            ++v58;
          }
          while (v56);
          if (v59 != -2 && (v60 = CA::Render::Array::new_array((CA::Render::Array *)(v59 + 2), 0, 0, 0)) != 0)
          {
            v61 = v60;
            v62 = 1;
            if ((v57 & 0x800) != 0)
              v62 = -1;
            v63 = (uint64_t *)*((_QWORD *)v16 + 6);
            if (v63)
            {
              if ((v57 & 0x800) != 0)
                v64 = v58;
              else
                v64 = 0;
              do
              {
                v65 = *v63;
                if (*v63)
                {
                  v66 = (unsigned int *)(v65 + 8);
                  do
                    v67 = __ldaxr(v66);
                  while (__stlxr(v67 + 1, v66));
                  if (!v67)
                  {
                    do
                    {
                      v65 = 0;
                      v68 = __ldaxr(v66);
                    }
                    while (__stlxr(v68 - 1, v66));
                  }
                }
                *(_QWORD *)&v60[2 * v64 + 6] = v65;
                v64 += v62;
                v63 = (uint64_t *)v63[1];
              }
              while (v63);
            }
            CA::Render::Layer::set_animations(v9, (uint64_t)v60);
            v96 = v61 + 2;
            do
            {
              v97 = __ldaxr(v96);
              v98 = v97 - 1;
            }
            while (__stlxr(v98, v96));
            if (!v98)
              (*(void (**)(unsigned int *))(*(_QWORD *)v61 + 16))(v61);
          }
          else
          {
LABEL_107:
            CA::Render::Layer::set_animations(v9, 0);
          }
          *((_QWORD *)v16 + 12) &= ~0x80000uLL;
        }
        if ((v13 & 2) != 0)
        {
          v91 = *((_QWORD *)v16 + 2);
          if (v91)
          {
            v92 = *(_QWORD *)(v91 + 104);
            if ((*(_BYTE *)(v91 + 13) & 0x20) != 0)
            {
              if (v92)
              {
                v99 = *(_QWORD *)(v92 + 144);
                if (v99)
                {
                  if (*(CA::Render::Object **)(v99 + 32) == v11)
                    *(_QWORD *)(v99 + 32) = 0;
                }
              }
            }
            else if (v92)
            {
              v93 = *(unsigned int *)(v92 + 16);
              if ((_DWORD)v93)
              {
                v94 = v92 + 24;
                do
                {
                  v95 = *(_QWORD *)(*(_QWORD *)v94 + 144);
                  if (v95 && *(CA::Render::Object **)(v95 + 32) == v11)
                    *(_QWORD *)(v95 + 32) = 0;
                  v94 += 8;
                  --v93;
                }
                while (v93);
              }
            }
          }
          v100 = *(_QWORD *)(v9 + 104);
          if ((*(_BYTE *)(v9 + 13) & 0x20) != 0)
          {
            if (v100)
            {
              v104 = *(_QWORD *)(v100 + 144);
              if (v104)
                *(_QWORD *)(v104 + 32) = v11;
            }
          }
          else if (v100)
          {
            v101 = *(unsigned int *)(v100 + 16);
            if ((_DWORD)v101)
            {
              v102 = v100 + 24;
              do
              {
                v103 = *(_QWORD *)(*(_QWORD *)v102 + 144);
                if (v103)
                  *(_QWORD *)(v103 + 32) = v11;
                v102 += 8;
                --v101;
              }
              while (v101);
            }
          }
        }
        if ((v13 & 4) != 0)
        {
          v69 = *((_QWORD *)v16 + 2);
          if (v69)
          {
            v70 = *(_QWORD *)(v69 + 112);
            if (v70)
            {
              v71 = *(_QWORD *)(v70 + 144);
              if (*(CA::Render::Object **)(v71 + 32) == v11)
                *(_QWORD *)(v71 + 32) = 0;
            }
          }
          v72 = *(_QWORD *)(v9 + 112);
          if (v72)
            *(_QWORD *)(*(_QWORD *)(v72 + 144) + 32) = v11;
        }
        v73 = (unsigned int *)*((_QWORD *)v16 + 5);
        if (v73)
        {
          *((_QWORD *)v73 + 5) = 0;
          v74 = v73 + 4;
          do
          {
            v75 = __ldaxr(v74);
            v76 = v75 - 1;
          }
          while (__stlxr(v76, v74));
          if (!v76)
            CA::Render::LayerNode::delete_node((CA::Render::LayerNode *)v73, v54);
          *((_QWORD *)v16 + 5) = 0;
        }
        v77 = *(_QWORD **)(v9 + 128);
        if (v77 && *v77)
          CA::Render::Layer::ensure_ext((CA::Render::Layer *)v9);
        v78 = v13 & 0x1FFFF9;
        if ((v13 & 0x1FFFF9) != 0)
          v79 = 0x100000000007;
        else
          v79 = 0x100000000004;
        if (v78)
        {
          v80 = v13;
          if ((v13 & 1) == 0)
            goto LABEL_175;
          v81 = *(_QWORD *)(v9 + 96);
          if (v81)
          {
            v82 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v81 + 80))(v81);
            if (v82)
            {
              v83 = (CA::Render::Texture *)v82;
              v84 = *(CA::Shape **)(v82 + 40);
              if (v78 == 1 && v84)
              {
                v85 = v13;
                v86 = *((_QWORD *)v175 + 2);
                if (v86)
                {
                  v87 = *(_QWORD *)(v86 + 96);
                  if (v87)
                  {
                    v88 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v87 + 80))(v87);
                    if (v88)
                    {
                      v89 = *(CA::Shape **)(v88 + 40);
                      if (v89)
                      {
                        v90 = (CA::Shape *)CA::Shape::Union(*(_QWORD *)(v88 + 40), (uint64_t)v84);
                        CA::Render::Texture::set_dirty_shape(v83, v90);
                        if (!CA::Shape::is_valid(v90))
                        {
                          if (x_log_hook_p())
                          {
                            CA::Shape::is_valid(v84);
                            CA::Shape::is_valid(v89);
                            x_log_();
                          }
                          else
                          {
                            v152 = x_log_category_render;
                            if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_FAULT))
                            {
                              is_valid = CA::Shape::is_valid(v84);
                              v154 = CA::Shape::is_valid(v89);
                              LODWORD(v179) = 67109376;
                              DWORD1(v179) = is_valid;
                              WORD4(v179) = 1024;
                              *(_DWORD *)((char *)&v179 + 10) = v154;
                              _os_log_impl(&dword_184457000, v152, OS_LOG_TYPE_FAULT, "Shape union is bogus, new shape: %d, old shape: %d!", (uint8_t *)&v179, 0xEu);
                            }
                          }
                          CA::Render::Texture::set_dirty_shape(v83, (CA::Shape *)&CA::Shape::_infinite_shape);
                        }
                        if (v90)
                          CA::Shape::unref(v90);
                      }
                    }
                  }
                }
                v13 = v85;
                v80 = v85 & 0xFFFFFFFE;
                v79 = 0x100000000014;
LABEL_175:
                if ((v80 & 0x5FE78) != 0)
                  v79 |= 8uLL;
                if ((v13 & 4) != 0)
                  v79 |= 0xBuLL;
                if ((v80 & 0xBF3D3) != 0)
                  v79 |= 0x10uLL;
                if ((v80 & 0xFFFFB) != 0)
                  v105 = v79 | 0x10000000;
                else
                  v105 = v79;
                if ((v13 & 2) != 0)
                {
                  v106 = v105 | 0x2000008;
                  v107 = (uint64_t)v175;
                  if ((~(*((_DWORD *)v175 + 24) | v105) & 3) == 0)
                  {
                    v105 |= 0x2000008uLL;
LABEL_271:
                    *(_QWORD *)(v107 + 96) |= v105;
                    v144 = *(unsigned int **)(v9 + 144);
                    if (v144 != (unsigned int *)v107)
                    {
                      if (v144)
                      {
                        v145 = v144 + 2;
                        do
                        {
                          v146 = __ldaxr(v145);
                          v147 = v146 - 1;
                        }
                        while (__stlxr(v147, v145));
                        if (!v147)
                          (*(void (**)(unsigned int *))(*(_QWORD *)v144 + 16))(v144);
                      }
                      v148 = (unsigned int *)(v107 + 8);
                      do
                        v149 = __ldaxr(v148);
                      while (__stlxr(v149 + 1, v148));
                      v150 = v107;
                      if (!v149)
                      {
                        v150 = 0;
                        do
                          v155 = __ldaxr(v148);
                        while (__stlxr(v155 - 1, v148));
                      }
                      *(_QWORD *)(v9 + 144) = v150;
                    }
                    v151 = *(_QWORD **)(v9 + 128);
                    if (v151)
                    {
                      if (*v151)
                        (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)*v151 + 104))(*v151, v12, v9, v107, v13);
                    }
                    CA::Render::Handle::set_current_layer(v107, (CA::Render::Layer *)v9);
                    return;
                  }
                  v108 = *((_QWORD *)v175 + 2);
                  v177 = 0;
                  v178 = 0;
                  if (v108)
                  {
                    v109 = *(_QWORD *)(v108 + 104);
                    if ((*(_BYTE *)(v108 + 13) & 0x20) != 0 || !v109)
                    {
                      v178 = *(_QWORD *)(v108 + 104);
                      v110 = v109 != 0;
                      if (v109)
                        v111 = &v178;
                      else
                        v111 = 0;
                    }
                    else
                    {
                      v110 = *(unsigned int *)(v109 + 16);
                      v111 = (uint64_t *)(v109 + 24);
                    }
                  }
                  else
                  {
                    v110 = 0;
                    v111 = 0;
                  }
                  v112 = *(_QWORD *)(v9 + 104);
                  v113 = *(_BYTE *)(v9 + 13);
                  v170 = v13;
                  if ((v113 & 0x20) != 0 || !v112)
                  {
                    v177 = v112;
                    v114 = v112 != 0;
                    if (v112)
                      v115 = &v177;
                    else
                      v115 = 0;
                  }
                  else
                  {
                    v114 = *(unsigned int *)(v112 + 16);
                    v115 = (uint64_t *)(v112 + 24);
                  }
                  if (v114 + v110 >= 128)
                    v116 = 128;
                  else
                    v116 = v114 + v110;
                  if (v110 >= v114)
                    v117 = v114;
                  else
                    v117 = v110;
                  v166 = v115;
                  v118 = 0;
                  if (v117)
                  {
                    while (*(_QWORD *)(v111[v118] + 144) == *(_QWORD *)(v115[v118] + 144))
                    {
                      if (v117 == ++v118)
                      {
                        v118 = v117;
                        break;
                      }
                    }
                  }
                  if (v118 == v114)
                    v119 = v110 - 1;
                  else
                    v119 = v110 + 1;
                  if (v118 == v110)
                    v120 = v110 + 1;
                  else
                    v120 = v110 - 1;
                  if (v118 != v110 || v118 != v114)
                  {
                    if (v110 <= v114)
                      v121 = v114;
                    else
                      v121 = v110;
                    if (v121 >= 0x401)
                    {
                      v106 = v105 | 0x200000B;
                      goto LABEL_269;
                    }
                    v164 = v116;
                    v158 = v105 | 0x2000008;
                    v162 = v105;
                    *((_QWORD *)&v179 + 1) = 0;
                    v180 = v182;
                    v181 = xmmword_18474E260;
                    *(_QWORD *)&v179 = (char *)&v179 + 8;
                    v172 = (16 * v121) | 8;
                    *(_QWORD *)&v173 = x_heap_malloc((uint64_t *)&v179 + 1, v172);
                    v122 = x_heap_malloc((uint64_t *)v179, v172);
                    *(_QWORD *)(v173 + 8 * v110) = v118;
                    v171 = v122;
                    *(_QWORD *)(v122 + 8 * v110) = 0;
                    if (!(v114 + v110))
                    {
                      x_heap_free((void ***)v179);
                      v143 = v162;
                      goto LABEL_268;
                    }
                    v123 = v164;
                    if (v164 <= 1)
                      v123 = 1;
                    v163 = v123;
                    v161 = -v110;
                    v160 = &v166[-v110];
                    v124 = 1;
                    v125 = 1;
                    v174 = v12;
                    while (1)
                    {
                      v165 = v125;
                      if (v120 <= v119)
                        break;
                      v126 = v120;
LABEL_254:
                      v120 = v126 - 1;
                      ++v119;
                      v125 = v165 + 1;
                      v124 = v165 < v164;
                      v12 = v174;
                      if (v165 == v163)
                      {
LABEL_265:
                        x_heap_free((void ***)v179);
                        v143 = v162;
                        v106 = v158;
                        if (v124)
                          goto LABEL_269;
LABEL_268:
                        v106 = v143 | 0x200000B;
                        goto LABEL_269;
                      }
                    }
                    v159 = v124;
                    v169 = v125 + v110;
                    v172 = v110 - v125;
                    v167 = v125 + v110 - 1;
                    v168 = v110 - v125 + 1;
                    v127 = v161 + v120;
                    v128 = &v160[v120];
                    v126 = v120;
                    while (1)
                    {
                      v129 = x_heap_malloc_small_((uint64_t *)v179, 0x20uLL);
                      if (v120 == v172)
                        break;
                      if (v120 == v169)
                      {
                        v134 = 0;
                        v131 = v167;
                        v133 = *(_QWORD *)(v173 + 8 * v167);
                      }
                      else
                      {
                        v131 = v120 + 1;
                        v132 = *(_QWORD *)(v173 + 8 * (v120 + 1));
                        v133 = *(_QWORD *)(v173 + 8 * (v120 - 1));
                        if (v132 >= v133)
                          goto LABEL_233;
                        v134 = 0;
                        v131 = v120 - 1;
                      }
LABEL_238:
                      v135 = v171;
                      *(_QWORD *)v129 = *(_QWORD *)(v171 + 8 * v131);
                      *(_DWORD *)(v129 + 8) = v134;
                      v136 = v133 + v120 - v110;
                      *(_QWORD *)(v129 + 16) = v133 - 1;
                      *(_QWORD *)(v129 + 24) = v136 - 1;
                      *(_QWORD *)(v135 + 8 * v120) = v129;
                      if (v133 < v110 && v136 < v114)
                      {
                        do
                        {
                          if (*(_QWORD *)(v111[v133] + 144) != *(_QWORD *)(v128[v133] + 144))
                            break;
                          if (++v133 >= v110)
                            break;
                        }
                        while (v133 + v127 < v114);
                        v136 = v127 + v133;
                      }
                      *(_QWORD *)(v173 + 8 * v120) = v133;
                      if (v133 == v110 && v136 == v114)
                      {
                        v139 = 0;
                        do
                        {
                          v140 = v129;
                          v129 = *(_QWORD *)v129;
                          *(_QWORD *)v140 = v139;
                          v139 = v140;
                        }
                        while (v129);
                        v12 = v174;
                        v141 = v166;
                        do
                        {
                          if (*(_DWORD *)(v140 + 8) == 1)
                          {
                            CA::Render::Context::invalidate(*((CA::Render::Context **)v175 + 3), (int32x2_t *)(*(_QWORD *)(v111[*(_QWORD *)(v140 + 16)] + 144) + 112), v130);
                          }
                          else
                          {
                            v142 = *(_QWORD *)(v141[*(_QWORD *)(v140 + 24)] + 144);
                            if (v142)
                              *(_QWORD *)(v142 + 96) |= 2uLL;
                          }
                          v140 = *(_QWORD *)v140;
                        }
                        while (v140);
                        LOBYTE(v124) = v159;
                        goto LABEL_265;
                      }
                      v138 = v120 + 2;
                      if (v133 == v110)
                        v126 = v120 + 2;
                      if (v136 == v114)
                        v119 = v120 - 2;
                      v127 += 2;
                      v128 += 2;
                      v120 += 2;
                      if (v138 > v119)
                        goto LABEL_254;
                    }
                    v131 = v168;
                    v132 = *(_QWORD *)(v173 + 8 * v168);
LABEL_233:
                    v133 = v132 + 1;
                    v134 = 1;
                    goto LABEL_238;
                  }
LABEL_269:
                  v105 = v106;
                  v13 = v170;
                }
                v107 = (uint64_t)v175;
                goto LABEL_271;
              }
              if (v84)
              {
                CA::Shape::unref(*(CA::Shape **)(v82 + 40));
                *((_QWORD *)v83 + 5) = 0;
              }
            }
          }
          v79 = 0x100000000007;
        }
        v80 = v13;
        goto LABEL_175;
      }
      v46 = 0;
      goto LABEL_69;
    }
    v24 = (unsigned int *)(v9 + 8);
    do
    {
      v25 = __ldaxr(v24);
      v23 = --v25 == 0;
    }
    while (__stlxr(v25, v24));
  }
  else
  {
    v21 = (unsigned int *)(v9 + 8);
    do
    {
      v22 = __ldaxr(v21);
      v23 = --v22 == 0;
    }
    while (__stlxr(v22, v21));
  }
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
}

CA::Render::Object *CA::Render::Context::lookup_handle(CA::Render::Context *this, CA::Render::Object *a2, int a3, int a4, unsigned int *a5)
{
  CA::Render::Context::ResourceTable *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  int v14;
  CA::Render::Object *v15;
  malloc_zone_t *malloc_zone;
  CA::Render::Object *v17;
  CA::Render::Context::ResourceTable *v18;
  CA::Render::Object *v19;
  int v20;
  CA::Render::Object *v21;

  v8 = (CA::Render::Context *)((char *)this + 136);
  v9 = (((unint64_t)a2 ^ 0x8000000000000000) + ~((_QWORD)a2 << 32)) ^ ((((unint64_t)a2 ^ 0x8000000000000000)
                                                                               + ~((_QWORD)a2 << 32)) >> 22);
  v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
  v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
  v12 = *((_QWORD *)this + 17) + 8 * (*((_DWORD *)this + 37) & ((v11 >> 31) ^ v11));
  do
  {
    v12 = *(_QWORD *)v12;
    if (!v12)
    {
      if (a5)
        *a5 = 0;
LABEL_17:
      if (!a4)
        return 0;
      goto LABEL_18;
    }
  }
  while (*(_QWORD *)(v12 + 8) != ((unint64_t)a2 ^ 0x8000000000000000));
  if (a5)
    *a5 = *(_DWORD *)(v12 + 24);
  if (a3)
    *(_DWORD *)(v12 + 24) = a3;
  v13 = *(unsigned __int8 **)(v12 + 16);
  if (!v13)
    goto LABEL_17;
  v14 = v13[12];
  if (v14 == 22)
    v15 = (CA::Render::Object *)v13;
  else
    v15 = 0;
  if (v14 != 22 && (a4 & 1) != 0)
  {
LABEL_18:
    if ((*((_BYTE *)this + 13) & 4) == 0)
    {
      malloc_zone = (malloc_zone_t *)get_malloc_zone();
      v17 = (CA::Render::Object *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x80uLL, 0x743898A5uLL);
      v15 = v17;
      if (v17)
      {
        *((_DWORD *)v17 + 2) = 1;
        *((_DWORD *)v17 + 3) = 22;
        ++dword_1ECDC7C80;
        *(_QWORD *)v17 = off_1E1598BB8;
        *((_QWORD *)v17 + 9) = 0;
        *((_QWORD *)v17 + 14) = 0;
        *((_QWORD *)v17 + 15) = 0;
        *((_QWORD *)v17 + 2) = 0;
        *((_QWORD *)v17 + 3) = this;
        v18 = v8;
        v19 = a2;
        v20 = a3;
        v21 = v15;
      }
      else
      {
        MEMORY[0x18] = this;
        v18 = v8;
        v19 = a2;
        v20 = a3;
        v21 = 0;
      }
      CA::Render::Context::ResourceTable::insert(v18, v19, v20, v21);
      return v15;
    }
    return 0;
  }
  return v15;
}

uint64_t CA::Render::Handle::set_current_layer(uint64_t this, CA::Render::Layer *a2)
{
  CA::Render::Layer *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *(CA::Render::Layer **)(this + 16);
  if (v2 != a2)
  {
    *(_QWORD *)(this + 16) = a2;
    this = CA::Render::Handle::update_container_state(this, (const double *)a2);
    a2 = v2;
  }
  if (a2)
  {
    v3 = (unsigned int *)((char *)a2 + 8);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      return (*(uint64_t (**)(CA::Render::Layer *))(*(_QWORD *)a2 + 16))(a2);
  }
  return this;
}

uint64_t CA::Render::Handle::update_container_state(uint64_t this, const double *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;

  v2 = *(_QWORD *)(this + 16);
  if (v2)
  {
    if ((*(_BYTE *)(this + 13) & 1) != 0 || *(_QWORD *)(this + 56) || *(_QWORD *)(this + 64))
      v3 = *(_DWORD *)(v2 + 12) | 0x1000;
    else
      v3 = *(_DWORD *)(v2 + 12) & 0xFFFFEFFF;
    *(_DWORD *)(v2 + 12) = v3;
    v4 = *(_QWORD *)(this + 16);
    v5 = *(_DWORD *)(v4 + 12);
    if ((v5 & 0x1000) != 0
      || (this = CA::Render::Layer::is_containerable(*(CA::Render::Layer **)(this + 16), a2), !(_DWORD)this))
    {
      v6 = v5 & 0xFFFFF7FF;
    }
    else
    {
      v6 = v5 | 0x800;
    }
    *(_DWORD *)(v4 + 12) = v6;
  }
  return this;
}

BOOL CA::Render::Layer::is_containerable(CA::Render::Layer *this, const double *a2)
{
  uint64_t v3;
  _BOOL8 result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  __int128 *v9;
  CA::Mat4Impl *v10;
  uint64_t v11;
  CA::Mat4Impl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  CA::Render::Layer **v19;
  uint64_t v20;

  if (*((_QWORD *)this + 12))
    return 0;
  v3 = *((_QWORD *)this + 5);
  if ((v3 & 0x40000000000) != 0)
    return 0;
  if (*((_BYTE *)this + 33))
    return 0;
  v5 = *((_QWORD *)this + 16);
  if (v5)
  {
    if (*(float *)(v5 + 316) != 0.0)
      return 0;
  }
  result = 0;
  if ((v3 & 0x10C0000) != 0 || *((_QWORD *)this + 14))
    return result;
  if (*((unsigned __int8 *)this + 32) != 255 && *((_BYTE *)this + 32) || (v3 & 0x208088000000) != 0x80000000)
    return 0;
  result = 0;
  if ((~(_WORD)v3 & 0xC00) != 0 || (*((_DWORD *)this + 9) & 0x7FF00000) != 0)
    return result;
  if (!v5)
    goto LABEL_38;
  if (*(float *)(v5 + 236) > 0.0)
    return 0;
  if (*(_QWORD *)v5)
    return 0;
  if (*(_QWORD *)(v5 + 96))
    return 0;
  if (*(_QWORD *)(v5 + 88))
    return 0;
  if (*(_QWORD *)(v5 + 104))
    return 0;
  v6 = *((_QWORD *)this + 16);
  if (*(_QWORD *)(v5 + 112) || *(_QWORD *)(v5 + 80))
    return 0;
  v7 = *(_QWORD *)(v5 + 16);
  if (v7)
  {
    v8 = *(_DWORD *)(v7 + 16);
    v9 = (__int128 *)(v7 + 24);
    v10 = (CA::Mat4Impl *)(v8 >= 0x10 ? v9 : &CA::Mat4Impl::mat4_identity_double);
    result = CA::Mat4Impl::mat4_is_affine(v10, a2);
    if (!result)
      return result;
  }
  v11 = *(_QWORD *)(v6 + 24);
  if (v11)
  {
    v12 = *(_DWORD *)(v11 + 16) >= 0x10u
        ? (CA::Mat4Impl *)(v11 + 24)
        : (CA::Mat4Impl *)&CA::Mat4Impl::mat4_identity_double;
    result = CA::Mat4Impl::mat4_is_affine(v12, a2);
    if (!result)
      return result;
  }
  if (*(double *)(v6 + 192) != 0.0 || *(double *)(v6 + 184) != 0.0)
    return 0;
  if ((v3 & 0x40) != 0)
  {
    result = 0;
    if (*(float *)(v6 + 228) != 0.0 || v11)
      return result;
  }
LABEL_38:
  v13 = *((_QWORD *)this + 17);
  if (v13)
  {
    v14 = *(unsigned int *)(v13 + 16);
    if ((_DWORD)v14)
    {
      v15 = v13 + 24;
      v16 = 8 * v14;
      while (*(_BYTE *)(*(_QWORD *)v15 + 12) != 55)
      {
        v15 += 8;
        v16 -= 8;
        if (!v16)
          goto LABEL_43;
      }
      return 0;
    }
  }
LABEL_43:
  v17 = (unsigned int *)*((_QWORD *)this + 13);
  if ((*((_BYTE *)this + 13) & 0x20) == 0)
  {
    if (v17)
    {
      v18 = v17[4];
      if ((_DWORD)v18)
      {
        v19 = (CA::Render::Layer **)(v17 + 6);
        v20 = 8 * v18;
        while (CA::Render::Layer::sublayer_allows_containerization(this, *v19))
        {
          ++v19;
          v20 -= 8;
          if (!v20)
            return 1;
        }
        return 0;
      }
    }
    return 1;
  }
  if (!v17)
    return 1;
  result = CA::Render::Layer::sublayer_allows_containerization(this, (CA::Render::Layer *)v17);
  if (result)
    return 1;
  return result;
}

CA::Render::Layer *CA::Render::Layer::Layer(CA::Render::Layer *this, CA::Render::Decoder *a2)
{
  malloc_zone_t *malloc_zone;
  _QWORD *v5;
  _QWORD *v6;
  _OWORD *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  os_unfair_lock_s *v45;
  unsigned int *v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  int __dst[6];
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = off_1E1598C30;
  *((_DWORD *)this + 2) = 1;
  *((_DWORD *)this + 3) = (CA::Render::Decoder::decode_int32(a2) << 8) | 0x1D;
  ++dword_1ECDC7C9C;
  *(_QWORD *)this = off_1E15989E0;
  CA::Render::Decoder::decode_bytes(a2, (char *)this + 16, 0x50uLL);
  *((_QWORD *)this + 12) = CA::Render::Decoder::decode_object(a2, 11, (uint64_t)CA::Render::contents_types);
  __dst[0] = 29;
  *((_QWORD *)this + 13) = CA::Render::Decoder::decode_array_object(a2, 1, __dst, 1);
  *((_QWORD *)this + 14) = CA::Render::Decoder::decode_size_t(a2);
  *((_QWORD *)this + 15) = CA::Render::Decoder::decode_object(a2, 49);
  if (CA::Render::Decoder::decode_int8(a2))
  {
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v5 = malloc_type_zone_malloc(malloc_zone, 0x148uLL, 0x8BB15036uLL);
    v6 = v5;
    if (v5)
    {
      v7 = v5 + 33;
      *v5 = CA::Render::Decoder::decode_object(a2, 14, (uint64_t)&CA::Render::subclass_types);
      v6[1] = CA::Render::Decoder::decode_object(a2, 52);
      v6[2] = CA::Render::Decoder::decode_object(a2, 56);
      v6[3] = CA::Render::Decoder::decode_object(a2, 56);
      v6[4] = CA::Render::Decoder::decode_object(a2, 56);
      v6[5] = CA::Render::Decoder::decode_object(a2, 56);
      v6[6] = CA::Render::Decoder::decode_object(a2, 56);
      v6[7] = CA::Render::Decoder::decode_object(a2, 11, (uint64_t)CA::Render::contents_types);
      v6[8] = CA::Render::Decoder::decode_object(a2, 56);
      v6[9] = CA::Render::Decoder::decode_object(a2, 56);
      v6[10] = CA::Render::Decoder::decode_object(a2, 37);
      v6[11] = CA::Render::Decoder::decode_object(a2, 17);
      __dst[0] = 17;
      v6[12] = CA::Render::Decoder::decode_array_object(a2, 1, __dst, 0);
      __dst[0] = 17;
      v6[13] = CA::Render::Decoder::decode_array_object(a2, 1, __dst, 0);
      v6[14] = CA::Render::Decoder::decode_object(a2, 33);
      v6[15] = CA::Render::Decoder::decode_object(a2, 36);
      v6[16] = CA::Render::Decoder::decode_object(a2, 37);
      __dst[0] = 42;
      v6[17] = CA::Render::Decoder::decode_array_object(a2, 1, __dst, 0);
      v6[18] = 0;
      *(_OWORD *)__dst = 0uLL;
      CA::Render::Decoder::decode_bytes(a2, __dst, 0x10uLL);
      *(_OWORD *)(v6 + 19) = *(_OWORD *)__dst;
      *(_OWORD *)__dst = 0uLL;
      CA::Render::Decoder::decode_bytes(a2, __dst, 0x10uLL);
      *(_OWORD *)(v6 + 21) = *(_OWORD *)__dst;
      v6[23] = CA::Render::Decoder::decode_int64(a2);
      v6[24] = CA::Render::Decoder::decode_int64(a2);
      *(_OWORD *)__dst = 0uLL;
      CA::Render::Decoder::decode_bytes(a2, __dst, 0x10uLL);
      *(_OWORD *)(v6 + 25) = *(_OWORD *)__dst;
      *(_QWORD *)__dst = 0;
      CA::Render::Decoder::decode_bytes(a2, __dst, 8uLL);
      v6[27] = *(_QWORD *)__dst;
      *((_DWORD *)v6 + 56) = CA::Render::Decoder::decode_int32(a2);
      *((_DWORD *)v6 + 57) = CA::Render::Decoder::decode_int32(a2);
      *((_DWORD *)v6 + 58) = CA::Render::Decoder::decode_int32(a2);
      *((_DWORD *)v6 + 59) = CA::Render::Decoder::decode_int32(a2);
      *(_OWORD *)__dst = 0uLL;
      CA::Render::Decoder::decode_bytes(a2, __dst, 0x10uLL);
      *((_OWORD *)v6 + 15) = *(_OWORD *)__dst;
      *((_DWORD *)v6 + 64) = CA::Render::Decoder::decode_int32(a2);
      *((_DWORD *)v6 + 65) = CA::Render::Decoder::decode_int32(a2);
      *(_OWORD *)__dst = 0uLL;
      CA::Render::Decoder::decode_bytes(a2, __dst, 0x10uLL);
      *v7 = *(_OWORD *)__dst;
      *((_DWORD *)v6 + 70) = CA::Render::Decoder::decode_int32(a2);
      *((_DWORD *)v6 + 71) = CA::Render::Decoder::decode_int32(a2);
      *((_DWORD *)v6 + 72) = CA::Render::Decoder::decode_int32(a2);
      *((_DWORD *)v6 + 73) = CA::Render::Decoder::decode_int32(a2);
      *((_DWORD *)v6 + 74) = CA::Render::Decoder::decode_int32(a2);
      *(_OWORD *)__dst = 0uLL;
      CA::Render::Decoder::decode_bytes(a2, __dst, 0x10uLL);
      *(_OWORD *)((char *)v6 + 300) = *(_OWORD *)__dst;
      *((_DWORD *)v6 + 79) = CA::Render::Decoder::decode_int32(a2);
      v8 = CA::Render::Decoder::decode_int8(a2);
      if (v8 >= 2)
      {
        CA::Render::Decoder::set_fatal_error(a2, "%s - enum %u out of range of %u", "decode_int8_enum", v8, 2);
        LOBYTE(v8) = 0;
      }
      *((_BYTE *)v6 + 320) = v6[40] & 0xFE | v8;
      *((_DWORD *)v6 + 81) = 1;
      v9 = v6[2];
      if (v9)
      {
        v10 = *(_DWORD *)(v9 + 16);
        if (v10 <= 0xF)
        {
          CA::Render::Decoder::set_fatal_error(a2, "%s - transform size %u", "Ext", v10);
          v11 = (unsigned int *)v6[2];
          if (v11)
          {
            v12 = v11 + 2;
            do
            {
              v13 = __ldaxr(v12);
              v14 = v13 - 1;
            }
            while (__stlxr(v14, v12));
            if (!v14)
              (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 16))(v11);
            v6[2] = 0;
          }
        }
      }
      v15 = v6[3];
      if (v15)
      {
        v16 = *(_DWORD *)(v15 + 16);
        if (v16 <= 0xF)
        {
          CA::Render::Decoder::set_fatal_error(a2, "%s - sublayerTransform size %u", "Ext", v16);
          v17 = (unsigned int *)v6[3];
          if (v17)
          {
            v18 = v17 + 2;
            do
            {
              v19 = __ldaxr(v18);
              v20 = v19 - 1;
            }
            while (__stlxr(v20, v18));
            if (!v20)
              (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 16))(v17);
            v6[3] = 0;
          }
        }
      }
      v21 = v6[4];
      if (v21)
      {
        v22 = *(_DWORD *)(v21 + 16);
        if (v22 <= 5)
        {
          CA::Render::Decoder::set_fatal_error(a2, "%s - contentsTransform size %u", "Ext", v22);
          v23 = (unsigned int *)v6[4];
          if (v23)
          {
            v24 = v23 + 2;
            do
            {
              v25 = __ldaxr(v24);
              v26 = v25 - 1;
            }
            while (__stlxr(v26, v24));
            if (!v26)
              (*(void (**)(unsigned int *))(*(_QWORD *)v23 + 16))(v23);
            v6[4] = 0;
          }
        }
      }
      v27 = v6[5];
      if (v27)
      {
        v28 = *(_DWORD *)(v27 + 16);
        if (v28 <= 3)
        {
          CA::Render::Decoder::set_fatal_error(a2, "%s - contentsRect size %u", "Ext", v28);
          v29 = (unsigned int *)v6[5];
          if (v29)
          {
            v30 = v29 + 2;
            do
            {
              v31 = __ldaxr(v30);
              v32 = v31 - 1;
            }
            while (__stlxr(v32, v30));
            if (!v32)
              (*(void (**)(unsigned int *))(*(_QWORD *)v29 + 16))(v29);
            v6[5] = 0;
          }
        }
      }
      v33 = v6[6];
      if (v33)
      {
        v34 = *(_DWORD *)(v33 + 16);
        if (v34 <= 3)
        {
          CA::Render::Decoder::set_fatal_error(a2, "%s - contentsCenter size %u", "Ext", v34);
          v35 = (unsigned int *)v6[6];
          if (v35)
          {
            v36 = v35 + 2;
            do
            {
              v37 = __ldaxr(v36);
              v38 = v37 - 1;
            }
            while (__stlxr(v38, v36));
            if (!v38)
              (*(void (**)(unsigned int *))(*(_QWORD *)v35 + 16))(v35);
            v6[6] = 0;
          }
        }
      }
      v39 = v6[8];
      if (v39)
      {
        v40 = *(_DWORD *)(v39 + 16);
        if (v40 <= 3)
        {
          CA::Render::Decoder::set_fatal_error(a2, "%s - cornerContentsCenter size %u", "Ext", v40);
          v41 = (unsigned int *)v6[8];
          if (v41)
          {
            v42 = v41 + 2;
            do
            {
              v43 = __ldaxr(v42);
              v44 = v43 - 1;
            }
            while (__stlxr(v44, v42));
            if (!v44)
              (*(void (**)(unsigned int *))(*(_QWORD *)v41 + 16))(v41);
            v6[8] = 0;
          }
        }
      }
      v45 = (os_unfair_lock_s *)v6[14];
      if (v45 && (CA::Render::MeshTransform::validate(v45) & 1) == 0)
      {
        v46 = (unsigned int *)v6[14];
        if (v46)
        {
          v47 = v46 + 2;
          do
          {
            v48 = __ldaxr(v47);
            v49 = v48 - 1;
          }
          while (__stlxr(v49, v47));
          if (!v49)
            (*(void (**)(unsigned int *))(*(_QWORD *)v46 + 16))(v46);
          v6[14] = 0;
        }
        CA::Render::Decoder::set_fatal_error(a2, "%s - meshTransform = %p", "Ext", 0);
      }
    }
  }
  else
  {
    v6 = 0;
  }
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 16) = v6;
  if ((*((_BYTE *)this + 13) & 2) == 0)
  {
    CA::Render::Decoder::set_fatal_error(a2, "%s - expected sublayer ids", "Layer");
    *((_DWORD *)this + 3) |= 0x200u;
  }
  return this;
}

uint64_t CA::Render::Decoder::decode_object(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  CA::Render::Decoder *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  CA::Render::Object *v9;
  uint64_t v10;
  CA::Render::MetalTexture *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  CA::Render::BackdropLayer *v18;
  CA::Render::BasicAnimation0 *v19;
  CA::Render::BasicAnimation0 *matched;
  void (**v21)(CA::Render::MatchPropertyAnimation *__hidden);
  CA::Render::CarPlayRegionLayer *v22;
  CA::Render::CloningTerminatorLayer *v23;
  CA::Render::DistanceFieldLayer *v24;
  CA::Render::EmitterBehavior *v25;
  CA::Render::EmitterCell *v26;
  CA::Render::EmitterLayer *v27;
  CA::Render::GainMapLayer *v28;
  CA::Render::GradientLayer *v29;
  CA::Render::GroupAnimation *v30;
  CA::Render::KeyframeAnimation *v31;
  CA::Render::KeyValue *v32;
  CA::Render::Layer *v33;
  CA::Render::LayerHost *v34;
  CA::Render::MatchMoveAnimation *v35;
  CA::Render::MatchAnimation *v36;
  CA::Render::Pattern *v37;
  CA::Render::PortalLayer *v38;
  CA::Render::PresentationModifier *v39;
  CA::Render::Proxy *v40;
  CA::Render::ReplicatorLayer *v41;
  CA::Render::ShapeLayer *v42;
  CA::Render::SpringAnimation *v43;
  malloc_zone_t *malloc_zone;
  CA::Render::Subtexture *v45;
  CA::Render::Timing *v46;
  CA::Render::TransitionAnimation *v47;
  unsigned int *v48;
  NSObject *v50;
  CA::Render::SecureIndicatorLayer *v51;
  uint8_t buf[4];
  unsigned int v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(a1 + 18) & 1) != 0)
    return 0;
  v4 = CA::Render::Decoder::decode_int8((CA::Render::Decoder *)a1);
  if (!v4)
    return 0;
  v6 = v4;
  if (v4 < 0xFE)
  {
    if (!(_DWORD)a2 || v4 == (_DWORD)a2)
    {
      v11 = *(CA::Render::MetalTexture **)(a1 + 72);
      if ((*((_WORD *)v11 + 276) & 0x100) == 0 || v6 <= 0x38 && ((1 << v6) & 0x1BFC8707EB6022ALL) != 0)
      {
        switch(v6)
        {
          case 1u:
            *(_DWORD *)buf = 0;
            v12 = CA::Render::Array::decode((CA::Render::Decoder *)a1, 1, (int *)buf, 0);
            goto LABEL_102;
          case 3u:
            v18 = (CA::Render::BackdropLayer *)x_mem_alloc0(0x60uLL);
            if (!v18)
              goto LABEL_110;
            v10 = (uint64_t)v18;
            CA::Render::BackdropLayer::BackdropLayer(v18, (CA::Render::Decoder *)a1);
            goto LABEL_103;
          case 5u:
            v19 = (CA::Render::BasicAnimation0 *)x_mem_alloc0(0x98uLL);
            if (!v19)
              goto LABEL_110;
            v10 = (uint64_t)v19;
            matched = CA::Render::BasicAnimation0::BasicAnimation0(v19, (CA::Render::Decoder *)a1);
            *((_BYTE *)matched + 12) = 5;
            ++dword_1ECDC7C3C;
            v21 = off_1E15972B8;
            goto LABEL_71;
          case 6u:
            if ((*((_WORD *)v11 + 276) & 0x200) == 0)
              goto LABEL_87;
            v22 = (CA::Render::CarPlayRegionLayer *)x_mem_alloc0(0x18uLL);
            if (!v22)
              goto LABEL_110;
            v10 = (uint64_t)v22;
            CA::Render::CarPlayRegionLayer::CarPlayRegionLayer(v22, (CA::Render::Decoder *)a1);
            goto LABEL_103;
          case 8u:
            if ((*((_WORD *)v11 + 276) & 0x200) == 0)
              goto LABEL_87;
            v23 = (CA::Render::CloningTerminatorLayer *)x_mem_alloc0(0x10uLL);
            if (!v23)
              goto LABEL_110;
            v10 = (uint64_t)v23;
            CA::Render::CloningTerminatorLayer::CloningTerminatorLayer(v23, (CA::Render::Decoder *)a1);
            goto LABEL_103;
          case 9u:
            v12 = (uint64_t)CA::Render::CompressedImage::decode((CA::Render::CompressedImage *)a1, v5);
            goto LABEL_102;
          case 0xCu:
            v24 = (CA::Render::DistanceFieldLayer *)x_mem_alloc0(0x28uLL);
            if (!v24)
              goto LABEL_110;
            v10 = (uint64_t)v24;
            CA::Render::DistanceFieldLayer::DistanceFieldLayer(v24, (CA::Render::Decoder *)a1);
            goto LABEL_103;
          case 0xDu:
            v25 = (CA::Render::EmitterBehavior *)x_mem_alloc0(0x30uLL);
            if (!v25)
              goto LABEL_110;
            v10 = (uint64_t)v25;
            CA::Render::EmitterBehavior::EmitterBehavior(v25, (CA::Render::Decoder *)a1);
            goto LABEL_103;
          case 0xEu:
            v26 = (CA::Render::EmitterCell *)x_mem_alloc0(0xE8uLL);
            if (!v26)
              goto LABEL_110;
            v10 = (uint64_t)v26;
            CA::Render::EmitterCell::EmitterCell(v26, (CA::Render::Decoder *)a1);
            goto LABEL_103;
          case 0xFu:
            v27 = (CA::Render::EmitterLayer *)x_mem_alloc0(0xA8uLL);
            if (!v27)
              goto LABEL_110;
            v10 = (uint64_t)v27;
            CA::Render::EmitterLayer::EmitterLayer(v27, (CA::Render::Decoder *)a1);
            goto LABEL_103;
          case 0x11u:
            v12 = (uint64_t)CA::Render::Filter::decode((CA::Render::Filter *)a1, v5);
            goto LABEL_102;
          case 0x12u:
            v12 = (uint64_t)CA::Render::Function::decode((CA::Render::Function *)a1, v5);
            goto LABEL_102;
          case 0x13u:
            if ((*((_WORD *)v11 + 276) & 0x200) == 0)
              goto LABEL_87;
            v28 = (CA::Render::GainMapLayer *)x_mem_alloc0(0x18uLL);
            if (!v28)
              goto LABEL_110;
            v10 = (uint64_t)v28;
            CA::Render::GainMapLayer::GainMapLayer(v28, (CA::Render::Decoder *)a1);
            goto LABEL_103;
          case 0x14u:
            v29 = (CA::Render::GradientLayer *)x_mem_alloc0(0x90uLL);
            if (!v29)
              goto LABEL_110;
            v10 = (uint64_t)v29;
            CA::Render::GradientLayer::GradientLayer(v29, (CA::Render::Decoder *)a1);
            goto LABEL_103;
          case 0x15u:
            v30 = (CA::Render::GroupAnimation *)x_mem_alloc0(0x68uLL);
            if (!v30)
              goto LABEL_110;
            v10 = (uint64_t)v30;
            CA::Render::GroupAnimation::GroupAnimation(v30, (CA::Render::Decoder *)a1);
            goto LABEL_103;
          case 0x17u:
            v12 = (uint64_t)CA::Render::Image::decode((CA::Render::Image *)a1, v5);
            goto LABEL_102;
          case 0x19u:
            v12 = (uint64_t)CA::Render::ImageQueue::decode((CA::Render::Context **)a1, v5);
            goto LABEL_102;
          case 0x1Bu:
            v31 = (CA::Render::KeyframeAnimation *)x_mem_alloc0(0xB0uLL);
            if (!v31)
              goto LABEL_110;
            v10 = (uint64_t)v31;
            CA::Render::KeyframeAnimation::KeyframeAnimation(v31, (CA::Render::Decoder *)a1);
            goto LABEL_103;
          case 0x1Cu:
            v32 = (CA::Render::KeyValue *)x_mem_alloc0(0x20uLL);
            if (!v32)
              goto LABEL_110;
            v10 = (uint64_t)v32;
            CA::Render::KeyValue::KeyValue(v32, (CA::Render::Decoder *)a1);
            goto LABEL_103;
          case 0x1Du:
            v33 = (CA::Render::Layer *)x_mem_alloc0(0x98uLL);
            if (!v33)
              goto LABEL_110;
            v10 = (uint64_t)v33;
            CA::Render::Layer::Layer(v33, (CA::Render::Decoder *)a1);
            goto LABEL_103;
          case 0x1Eu:
            v34 = (CA::Render::LayerHost *)x_mem_alloc0(0x58uLL);
            if (!v34)
              goto LABEL_110;
            v10 = (uint64_t)v34;
            CA::Render::LayerHost::LayerHost(v34, (CA::Render::Decoder *)a1);
            goto LABEL_103;
          case 0x1Fu:
            v35 = (CA::Render::MatchMoveAnimation *)x_mem_alloc0(0x90uLL);
            if (!v35)
              goto LABEL_110;
            v10 = (uint64_t)v35;
            CA::Render::MatchMoveAnimation::MatchMoveAnimation(v35, (CA::Render::Decoder *)a1);
            goto LABEL_103;
          case 0x20u:
            v36 = (CA::Render::MatchAnimation *)x_mem_alloc0(0x88uLL);
            if (!v36)
              goto LABEL_110;
            v10 = (uint64_t)v36;
            matched = CA::Render::MatchAnimation::MatchAnimation(v36, (CA::Render::Decoder *)a1);
            *((_BYTE *)matched + 12) = 32;
            ++dword_1ECDC7CA8;
            v21 = off_1E1598560;
LABEL_71:
            *(_QWORD *)matched = v21;
            goto LABEL_103;
          case 0x21u:
            v12 = (uint64_t)CA::Render::MeshTransform::decode((CA::Render::MeshTransform *)a1, v5);
            goto LABEL_102;
          case 0x22u:
            v12 = (uint64_t)CA::Render::MetalTexture::decode(v11, v5);
            goto LABEL_102;
          case 0x24u:
            v12 = CA::Render::Path::decode((CA::Render::Path *)a1, v5);
            goto LABEL_102;
          case 0x25u:
            v37 = (CA::Render::Pattern *)x_mem_alloc0(0x88uLL);
            if (!v37)
              goto LABEL_110;
            v10 = (uint64_t)v37;
            CA::Render::Pattern::Pattern(v37, (CA::Render::Decoder *)a1);
            goto LABEL_103;
          case 0x26u:
            v12 = (uint64_t)CA::Render::PixelBuffer::decode((CA::Render::PixelBuffer *)a1, v5);
            goto LABEL_102;
          case 0x28u:
            v38 = (CA::Render::PortalLayer *)x_mem_alloc0(0x40uLL);
            if (!v38)
              goto LABEL_110;
            v10 = (uint64_t)v38;
            CA::Render::PortalLayer::PortalLayer(v38, (CA::Render::Decoder *)a1);
            goto LABEL_103;
          case 0x2Au:
            v39 = (CA::Render::PresentationModifier *)x_mem_alloc0(0x30uLL);
            if (!v39)
              goto LABEL_110;
            v10 = (uint64_t)v39;
            CA::Render::PresentationModifier::PresentationModifier(v39, (CA::Render::Decoder *)a1);
            goto LABEL_103;
          case 0x2Bu:
            v40 = (CA::Render::Proxy *)x_mem_alloc0(0x18uLL);
            if (!v40)
              goto LABEL_110;
            v10 = (uint64_t)v40;
            CA::Render::Proxy::Proxy(v40, (CA::Render::Decoder *)a1);
            goto LABEL_103;
          case 0x2Cu:
            v41 = (CA::Render::ReplicatorLayer *)x_mem_alloc0(0x48uLL);
            if (!v41)
              goto LABEL_110;
            v10 = (uint64_t)v41;
            CA::Render::ReplicatorLayer::ReplicatorLayer(v41, (CA::Render::Decoder *)a1);
            goto LABEL_103;
          case 0x2Du:
            if ((*((_WORD *)v11 + 276) & 0x200) != 0)
            {
              v51 = (CA::Render::SecureIndicatorLayer *)x_mem_alloc0(0x18uLL);
              if (v51)
              {
                v10 = (uint64_t)v51;
                CA::Render::SecureIndicatorLayer::SecureIndicatorLayer(v51, (CA::Render::Decoder *)a1);
LABEL_103:
                if ((*(_BYTE *)(a1 + 18) & 1) != 0 && v10)
                {
                  v48 = (unsigned int *)(v10 + 8);
                  do
                    v17 = __ldaxr(v48);
                  while (__stlxr(v17 - 1, v48));
LABEL_107:
                  if (v17 == 1)
                    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
                  return 0;
                }
                if (v10)
                  return v10;
              }
            }
            else
            {
LABEL_87:
              CA::Render::Decoder::set_fatal_error((CA::Render::Decoder *)a1, "Missing entitlement for system layer!");
            }
LABEL_110:
            CA::Render::Decoder::set_fatal_error((CA::Render::Decoder *)a1, "%s - ptr == NULL, type = %u");
            return 0;
          case 0x2Eu:
            v42 = (CA::Render::ShapeLayer *)x_mem_alloc0(0x98uLL);
            if (!v42)
              goto LABEL_110;
            v10 = (uint64_t)v42;
            CA::Render::ShapeLayer::ShapeLayer(v42, (CA::Render::Decoder *)a1);
            goto LABEL_103;
          case 0x2Fu:
            v12 = (uint64_t)CA::Render::Shmem::decode((CA::Render::Shmem *)a1, v5);
            goto LABEL_102;
          case 0x30u:
            v43 = (CA::Render::SpringAnimation *)x_mem_alloc0(0xF0uLL);
            if (!v43)
              goto LABEL_110;
            v10 = (uint64_t)v43;
            CA::Render::SpringAnimation::SpringAnimation(v43, (CA::Render::Decoder *)a1);
            goto LABEL_103;
          case 0x31u:
            v12 = (uint64_t)CA::Render::String::decode((CA::Render::String *)a1, v5);
            goto LABEL_102;
          case 0x32u:
            malloc_zone = (malloc_zone_t *)get_malloc_zone();
            v45 = (CA::Render::Subtexture *)malloc_type_zone_malloc(malloc_zone, 0x28uLL, 0x8BB15036uLL);
            if (!v45)
              goto LABEL_110;
            v10 = (uint64_t)v45;
            CA::Render::Subtexture::Subtexture(v45, (CA::Render::Decoder *)a1);
            goto LABEL_103;
          case 0x33u:
            v12 = (uint64_t)CA::Render::Surface::decode((CA::Render::Surface *)a1, v5);
            goto LABEL_102;
          case 0x34u:
            v46 = (CA::Render::Timing *)x_mem_alloc0(0x40uLL);
            if (!v46)
              goto LABEL_110;
            v10 = (uint64_t)v46;
            CA::Render::Timing::Timing(v46, (CA::Render::Decoder *)a1);
            goto LABEL_103;
          case 0x37u:
            v47 = (CA::Render::TransitionAnimation *)x_mem_alloc0(0x90uLL);
            if (!v47)
              goto LABEL_110;
            v10 = (uint64_t)v47;
            CA::Render::TransitionAnimation::TransitionAnimation(v47, (CA::Render::Decoder *)a1);
            goto LABEL_103;
          case 0x38u:
            v12 = (uint64_t)CA::Render::Vector::decode((CA::Render::Vector *)a1, v5);
LABEL_102:
            v10 = v12;
            goto LABEL_103;
          default:
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              v50 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 67109120;
                v53 = v6;
                _os_log_impl(&dword_184457000, v50, OS_LOG_TYPE_ERROR, "unable to decode object of type %d\n", buf, 8u);
              }
            }
            goto LABEL_110;
        }
      }
      CA::Render::Context::process_path(v11);
      CA::Render::Decoder::set_fatal_error((CA::Render::Decoder *)a1, "Deserialization of disallowed type: %s, process: %s");
    }
    else
    {
      CA::Render::Decoder::set_fatal_error((CA::Render::Decoder *)a1, "%s - required_type = %u, type = %u");
    }
    return 0;
  }
  *(_DWORD *)buf = 0;
  v7 = CA::Render::Decoder::decode_size_t((CA::Render::Decoder *)a1);
  v8 = CA::Render::Decoder::decode_int32((CA::Render::Decoder *)a1);
  if (v6 == 255)
  {
    v10 = CA::Render::Context::lookup_object(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 136), *(_DWORD *)(*(_QWORD *)(a1 + 72) + 148), v7, v8, a2, (int *)buf);
    if (v10)
      goto LABEL_17;
    goto LABEL_22;
  }
  v9 = (CA::Render::Object *)CA::Render::Decoder::decode_object(a1, a2);
  if (!v9)
  {
LABEL_22:
    if ((_DWORD)a2)
      CA::Render::Decoder::set_fatal_error((CA::Render::Decoder *)a1, "%s - ptr = NULL, required_type = %u, type = %u, id = %llu, error = %u");
    return 0;
  }
  v10 = (uint64_t)v9;
  if ((*(_BYTE *)(a1 + 18) & 1) != 0)
  {
    v16 = (unsigned int *)((char *)v9 + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    goto LABEL_107;
  }
  CA::Render::Context::set_object(*(CA::Render::Context **)(a1 + 72), v7, v8, v9);
LABEL_17:
  v13 = (unsigned int *)(v10 + 8);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  if (!v14)
  {
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
  }
  return v10;
}

void CA::Render::Decoder::decode_bytes(CA::Render::Decoder *this, void *__dst, size_t __n)
{
  const void *v6;
  BOOL v7;

  v6 = (const void *)*((_QWORD *)this + 4);
  v7 = __CFADD__(v6, __n);
  if ((unint64_t)v6 + __n > *((_QWORD *)this + 5) || v7)
  {
    bzero(__dst, __n);
    CA::Render::Decoder::set_fatal_error(this, "%s - _buffer_point = %p, len = %zu, _buffer_end = %p", "decode_bytes", *((const void **)this + 4), __n, *((const void **)this + 5));
  }
  else
  {
    memcpy(__dst, v6, __n);
    *((_QWORD *)this + 4) += __n;
  }
}

uint64_t CA::Render::Decoder::decode_array_object(CA::Render::Decoder *a1, uint64_t a2, int *a3, int a4)
{
  int v8;
  uint64_t result;

  if ((*((_BYTE *)a1 + 18) & 1) == 0)
  {
    v8 = CA::Render::Decoder::decode_int8(a1);
    if (v8)
    {
      if (v8 == 1)
      {
        result = CA::Render::Array::decode(a1, a2, a3, a4);
        if (result)
          return result;
        CA::Render::Decoder::set_fatal_error(a1, "%s - ptr = NULL");
      }
      else
      {
        CA::Render::Decoder::set_fatal_error(a1, "%s - type = %u");
      }
    }
  }
  return 0;
}

void *x_mem_alloc0(size_t a1)
{
  malloc_zone_t *malloc_zone;

  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  return malloc_type_zone_calloc(malloc_zone, 1uLL, a1, 0x743898A5uLL);
}

uint64_t CA::Render::Layer::set_animations(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  result = *(_QWORD *)(a1 + 136);
  if (result != a2)
  {
    v4 = a2;
    if (result)
    {
      v5 = (unsigned int *)(result + 8);
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
    }
    if (v4)
    {
      v8 = (unsigned int *)(v4 + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      if (!v9)
      {
        v4 = 0;
        do
          v10 = __ldaxr(v8);
        while (__stlxr(v10 - 1, v8));
      }
    }
    *(_QWORD *)(a1 + 136) = v4;
  }
  return result;
}

void CA::Render::Context::ResourceTable::insert(CA::Render::Context::ResourceTable *this, CA::Render::Object *a2, int a3, CA::Render::Object *a4)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  int v15;
  size_t v16;
  malloc_zone_t *malloc_zone;
  _QWORD *v18;
  _QWORD *v19;
  int v20;
  int v21;
  unint64_t v22;
  unint64_t i;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  void *v29;
  malloc_zone_t *v30;
  malloc_zone_t *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;

  v7 = (unint64_t)a2 ^ 0x8000000000000000;
  v8 = (((unint64_t)a2 ^ 0x8000000000000000) + ~((_QWORD)a2 << 32)) ^ ((((unint64_t)a2 ^ 0x8000000000000000)
                                                                               + ~((_QWORD)a2 << 32)) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  v11 = v10 ^ (v10 >> 31);
  v12 = *(_QWORD *)this + 8 * (v11 & *((_DWORD *)this + 3));
  while (1)
  {
    v12 = *(_QWORD *)v12;
    if (!v12)
      break;
    if (*(_QWORD *)(v12 + 8) == v7)
    {
      CA::Render::Context::ResourceTable::release_value(*(CA::Render::Context::ResourceTable **)(v12 + 16), a2);
      *(_QWORD *)(v12 + 16) = a4;
      *(_DWORD *)(v12 + 24) = a3;
      return;
    }
  }
  v13 = *((_QWORD *)this + 3) + 1;
  *((_QWORD *)this + 3) = v13;
  v14 = *((_DWORD *)this + 2);
  if (v13 >= (4 * v14))
  {
    v15 = 2 * v14;
    v16 = 8 * (2 * v14);
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v18 = malloc_type_zone_calloc(malloc_zone, 1uLL, v16, 0x743898A5uLL);
    if (v18)
    {
      v19 = v18;
      v20 = *((_DWORD *)this + 4) + 1;
      v21 = ~(-1 << v20);
      *((_DWORD *)this + 3) = v21;
      *((_DWORD *)this + 4) = v20;
      v22 = *((unsigned int *)this + 2);
      if ((_DWORD)v22)
      {
        for (i = 0; i < v22; ++i)
        {
          v24 = *(_QWORD **)(*(_QWORD *)this + 8 * i);
          if (v24)
          {
            do
            {
              v25 = (_QWORD *)*v24;
              v26 = v24[1] + ~(v24[1] << 32);
              v27 = (v26 ^ (v26 >> 22)) + ~((v26 ^ (v26 >> 22)) << 13);
              v28 = (9 * (v27 ^ (v27 >> 8))) ^ ((9 * (v27 ^ (v27 >> 8))) >> 15);
              LODWORD(v28) = v21 & (((v28 + ~(v28 << 27)) >> 31) ^ (v28 + ~((_DWORD)v28 << 27)));
              *v24 = v18[v28];
              v18[v28] = v24;
              v24 = v25;
            }
            while (v25);
          }
        }
      }
      v29 = *(void **)this;
      v30 = (malloc_zone_t *)get_malloc_zone();
      malloc_zone_free(v30, v29);
      *(_QWORD *)this = v19;
      *((_DWORD *)this + 2) = v15;
    }
  }
  v31 = (malloc_zone_t *)get_malloc_zone();
  v32 = malloc_type_zone_malloc(v31, 0x20uLL, 0x8BB15036uLL);
  v32[2] = a4;
  *((_DWORD *)v32 + 6) = a3;
  v33 = *(_QWORD *)this;
  v34 = v11 & *((_DWORD *)this + 3);
  *v32 = *(_QWORD *)(*(_QWORD *)this + 8 * v34);
  v32[1] = v7;
  *(_QWORD *)(v33 + 8 * v34) = v32;
}

uint64_t CA::Render::Array::decode(CA::Render::Decoder *a1, uint64_t a2, int *a3, int a4)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  size_t v11;
  malloc_zone_t *malloc_zone;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  char v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  uint64_t v22;
  int v23;
  unsigned int v24;

  v8 = CA::Render::Decoder::decode_int32(a1);
  v9 = CA::Render::Decoder::decode_int32(a1);
  v10 = v9;
  if (v9 > 0x100000)
  {
    CA::Render::Decoder::set_fatal_error(a1, "%s - suspiciously large array: %u");
    return 0;
  }
  v11 = 8 * v9 + 24;
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  v13 = (char *)malloc_type_zone_malloc(malloc_zone, v11, 0x8BB15036uLL);
  v14 = (uint64_t)v13;
  if (v13)
  {
    if (((((v8 & 1) == 0) ^ a4) & 1) == 0)
    {
      CA::Render::Decoder::set_fatal_error(a1, "%s - array is %sretained, but %sretained is expected");
      return 0;
    }
    v15 = v10;
    *((_DWORD *)v13 + 2) = 1;
    v16 = (unsigned int *)(v13 + 8);
    ++dword_1ECDC7C2C;
    *(_QWORD *)v13 = off_1E15986F8;
    *((_DWORD *)v13 + 3) = (v8 << 8) | 1;
    *((_DWORD *)v13 + 4) = v10;
    if ((v8 & 1) == 0)
    {
      if (!v10)
        goto LABEL_18;
      v17 = 0;
      v18 = (uint64_t *)(v13 + 24);
      do
      {
        v19 = CA::Render::Decoder::decode_object(a1, 0);
        *v18++ = v19;
        v17 |= v19 == 0;
        --v15;
      }
      while (v15);
      if ((v17 & 1) != 0)
      {
        v20 = 1;
      }
      else
      {
LABEL_18:
        if (CA::Render::Array::check_types(v14, a2, a3))
          return v14;
        v20 = 0;
      }
      if (a3)
        v23 = *a3;
      else
        v23 = -1;
      CA::Render::Decoder::set_fatal_error(a1, "%s - null_pointer? %d, n_types %zu, types[0] = %d", "decode", v20, a2, v23);
      do
        v24 = __ldaxr(v16);
      while (__stlxr(v24 - 1, v16));
      if (v24 == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
      return 0;
    }
    if (v10)
    {
      v22 = 0;
      do
      {
        *(_QWORD *)(v14 + v22 + 24) = CA::Render::Decoder::decode_size_t(a1);
        v22 += 8;
      }
      while (8 * v10 != v22);
    }
  }
  return v14;
}

_DWORD *CA::Render::Vector::decode(CA::Render::Vector *this, CA::Render::Decoder *a2)
{
  unsigned int v3;
  size_t v4;
  _DWORD *v5;
  malloc_zone_t *malloc_zone;
  _DWORD *v7;

  v3 = CA::Render::Decoder::decode_int32(this);
  v4 = 8 * v3;
  if (v3 < 0x7FFFE)
  {
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v7 = malloc_type_zone_malloc(malloc_zone, v4 + 24, 0x8BB15036uLL);
    v5 = v7;
    if (v7)
    {
      v7[2] = 1;
      v7[3] = 56;
      ++dword_1ECDC7D08;
      *(_QWORD *)v7 = off_1E1598DC0;
      v7[4] = v3;
      CA::Render::Decoder::decode_bytes(this, v7 + 6, v4);
    }
  }
  else
  {
    CA::Render::Decoder::set_fatal_error(this, "%s - suspiciously large vector size: %zu", "decode", v4 + 24);
    return 0;
  }
  return v5;
}

CA::Render::PresentationModifier *CA::Render::PresentationModifier::PresentationModifier(CA::Render::PresentationModifier *this, CA::Render::Decoder *a2)
{
  *(_QWORD *)this = off_1E1598C30;
  *((_DWORD *)this + 2) = 1;
  *((_DWORD *)this + 3) = (CA::Render::Decoder::decode_int32(a2) << 8) | 0x2A;
  ++dword_1ECDC7CD0;
  *(_QWORD *)this = off_1E15982D0;
  *((_QWORD *)this + 2) = CA::Render::Decoder::decode_object(a2, 47);
  *((_QWORD *)this + 3) = CA::Render::Decoder::decode_size_t(a2);
  *((_QWORD *)this + 4) = CA::Render::Decoder::decode_keypath(a2);
  *((_DWORD *)this + 10) = CA::Render::Decoder::decode_int32(a2);
  return this;
}

BOOL CA::Render::Array::check_types(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  unint64_t v3;
  BOOL v4;
  unint64_t i;
  uint64_t v6;

  if ((a2 != 1 || *a3) && (v3 = *(unsigned int *)(a1 + 16), (_DWORD)v3))
  {
    v4 = 0;
    for (i = 0; i != v3; v4 = i >= v3)
    {
      v6 = 0;
      while (a3[v6] != *(unsigned __int8 *)(*(_QWORD *)(a1 + 8 * i + 24) + 12))
      {
        if (a2 == ++v6)
          return v4;
      }
      if (v6 == a2)
        break;
      ++i;
    }
  }
  else
  {
    return 1;
  }
  return v4;
}

CA::Render::KeyValue *CA::Render::KeyValue::KeyValue(CA::Render::KeyValue *this, CA::Render::Decoder *a2)
{
  *((_DWORD *)this + 2) = 1;
  *((_DWORD *)this + 3) = 28;
  ++dword_1ECDC7C98;
  *(_QWORD *)this = off_1E1599568;
  *((_DWORD *)this + 4) = CA::Render::Decoder::decode_atom(a2);
  *((_QWORD *)this + 3) = CA::Render::Decoder::decode_object(a2, 0);
  return this;
}

CA::Render::Filter *CA::Render::Filter::decode(CA::Render::Filter *this, CA::Render::Decoder *a2)
{
  int v3;
  int v4;
  int v5;
  CA::Render::String *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  CA::Render::KeyValueArray *v10;
  unsigned int v11;
  unsigned int v12;
  UInt8 *v13;
  CA::Render::Filter *v14;
  CA::Render::Filter *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  malloc_zone_t *malloc_zone;
  CA::Render::Filter *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = CA::Render::Decoder::decode_int32(this);
  if ((v3 & 0x100) != 0)
  {
    v13 = CA::Render::Decoder::decode_atom(this);
    v14 = CA::Render::Filter::shared_filter((CA::Render::Filter *)v13);
    v15 = v14;
    if (v14)
    {
      v16 = (unsigned int *)((char *)v14 + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 + 1, v16));
      if (!v17)
      {
        v15 = 0;
        do
          v18 = __ldaxr(v16);
        while (__stlxr(v18 - 1, v16));
      }
    }
  }
  else
  {
    v4 = v3;
    if (CA::Render::Decoder::decode_int8(this) == 1)
    {
      v5 = CA::Render::Decoder::decode_atom(this);
      v6 = (CA::Render::String *)CA::Render::Decoder::decode_object(this, 49);
      v29 = 28;
      v7 = CA::Render::Decoder::decode_array_object(this, 1, &v29, 0);
      if (v7)
      {
        v8 = (unsigned int *)(v7 + 8);
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 + 1, v8));
        v10 = (CA::Render::KeyValueArray *)v7;
        if (!v9)
        {
          v10 = 0;
          do
            v28 = __ldaxr(v8);
          while (__stlxr(v28 - 1, v8));
        }
        do
        {
          v11 = __ldaxr(v8);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v8));
        if (!v12)
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
      }
      else
      {
        v10 = 0;
      }
      malloc_zone = (malloc_zone_t *)get_malloc_zone();
      v20 = (CA::Render::Filter *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x38uLL, 0x743898A5uLL);
      v15 = v20;
      if (v20)
        CA::Render::Filter::Filter(v20, v5, v6, v10);
      *((_DWORD *)v15 + 3) |= v4 << 8;
      if (v10)
      {
        v21 = (unsigned int *)((char *)v10 + 8);
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
          (*(void (**)(CA::Render::KeyValueArray *))(*(_QWORD *)v10 + 16))(v10);
      }
      if (v6)
      {
        v24 = (unsigned int *)((char *)v6 + 8);
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
          (*(void (**)(CA::Render::String *))(*(_QWORD *)v6 + 16))(v6);
      }
    }
    else
    {
      return 0;
    }
  }
  return v15;
}

void CA::Render::Context::add_begin_time(os_unfair_lock_s *this, double a2)
{
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  unint64_t v16;
  double *v17;
  double *v18;
  double *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  double *v25;

  v4 = this + 120;
  os_unfair_lock_lock(this + 120);
  v5 = *(_QWORD *)&this[122]._os_unfair_lock_opaque;
  v6 = *(_QWORD *)&this[124]._os_unfair_lock_opaque;
  if ((unint64_t)(v6 - v5) <= 0x200)
  {
    if (v5 != v6)
    {
      do
      {
        v7 = *(double *)(v5 + 8);
        v8 = COERCE_DOUBLE(atomic_load(&CA::Render::Context::_begin_time_threshold));
        if (v7 <= v8)
        {
          v10 = (_QWORD *)(v5 + 16);
          v11 = *(_QWORD **)&this[124]._os_unfair_lock_opaque;
          v9 = (_QWORD *)v5;
          if ((_QWORD *)(v5 + 16) != v11)
          {
            do
            {
              v12 = v10[1];
              *(v10 - 2) = *v10;
              *(v10 - 1) = v12;
              v10 += 2;
            }
            while (v10 != v11);
            v9 = v10 - 2;
          }
          *(_QWORD *)&this[124]._os_unfair_lock_opaque = v9;
        }
        else
        {
          v5 += 16;
          v9 = *(_QWORD **)&this[124]._os_unfair_lock_opaque;
        }
      }
      while ((_QWORD *)v5 != v9);
    }
  }
  else
  {
    *(_QWORD *)&this[124]._os_unfair_lock_opaque = v5;
  }
  v13 = mach_absolute_time();
  v14 = CATimeWithHostTime(v13);
  v15 = v14;
  v17 = *(double **)&this[124]._os_unfair_lock_opaque;
  v16 = *(_QWORD *)&this[126]._os_unfair_lock_opaque;
  if ((unint64_t)v17 >= v16)
  {
    v19 = *(double **)&this[122]._os_unfair_lock_opaque;
    v20 = ((char *)v17 - (char *)v19) >> 4;
    v21 = v20 + 1;
    if ((unint64_t)(v20 + 1) >> 60)
      abort();
    v22 = v16 - (_QWORD)v19;
    if (v22 >> 3 > v21)
      v21 = v22 >> 3;
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0)
      v23 = 0xFFFFFFFFFFFFFFFLL;
    else
      v23 = v21;
    if (v23 >> 60)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v24 = (char *)operator new(16 * v23);
    v25 = (double *)&v24[16 * v20];
    *v25 = a2;
    v25[1] = v15;
    v18 = v25 + 2;
    if (v17 != v19)
    {
      do
      {
        *((_OWORD *)v25 - 1) = *((_OWORD *)v17 - 1);
        v25 -= 2;
        v17 -= 2;
      }
      while (v17 != v19);
      v17 = v19;
    }
    *(_QWORD *)&this[122]._os_unfair_lock_opaque = v25;
    *(_QWORD *)&this[124]._os_unfair_lock_opaque = v18;
    *(_QWORD *)&this[126]._os_unfair_lock_opaque = &v24[16 * v23];
    if (v17)
      operator delete(v17);
  }
  else
  {
    *v17 = a2;
    v17[1] = v14;
    v18 = v17 + 2;
  }
  *(_QWORD *)&this[124]._os_unfair_lock_opaque = v18;
  os_unfair_lock_unlock(v4);
}

CA::Render::Timing *CA::Render::Timing::Timing(CA::Render::Timing *this, CA::Render::Decoder *a2)
{
  *(_QWORD *)this = off_1E1598C30;
  *((_DWORD *)this + 2) = 1;
  *((_DWORD *)this + 3) = (CA::Render::Decoder::decode_int32(a2) << 8) | 0x34;
  ++dword_1ECDC7CF8;
  *(_QWORD *)this = off_1E1598D50;
  *((_DWORD *)this + 4) = CA::Render::Decoder::decode_int32(a2);
  *((_QWORD *)this + 3) = CA::Render::Decoder::decode_int64(a2);
  *((_QWORD *)this + 4) = CA::Render::Decoder::decode_int64(a2);
  *((_QWORD *)this + 5) = CA::Render::Decoder::decode_int64(a2);
  *((_QWORD *)this + 6) = CA::Render::Decoder::decode_int64(a2);
  *((_QWORD *)this + 7) = CA::Render::Decoder::decode_int64(a2);
  return this;
}

void CA::Render::Context::add_animation(CA::Render::Context *this, CA::Render::Object *a2, CA::Render::Animation *a3)
{
  CA::Render::Object *v4;
  CA::Render::Object *v5;
  int v6;
  _QWORD *v7;
  _QWORD **v8;
  _QWORD *v9;
  CA::Render::Animation *v10;
  const void *v11;
  const void *v12;
  CA::Render::Animation *v13;
  _QWORD *v14;
  malloc_zone_t *malloc_zone;
  uint64_t v16;
  const CA::Render::Object *v17;
  NSObject *v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  char *v28;
  int v29;
  unsigned int v30;
  int v32;
  int v33;
  int v34;
  _BOOL4 v35;
  const char *v36;
  _QWORD *v37;
  uint64_t v38;
  double v39;
  double v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  CA::Render::Animation *v44;
  malloc_zone_t *v45;
  _QWORD *v46;
  uint64_t v47;
  const CA::Render::Object *v48;
  unsigned int v49;
  uint64_t v50;
  const CA::Render::Object *v51;
  NSObject *v52;
  uint64_t v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  int v59;
  uint64_t v60;
  char *v61;
  int v62;
  unsigned int v63;
  int v65;
  NSObject *v66;
  const char *v67;
  NSObject *v68;
  uint64_t v69;
  double v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  int i;
  uint64_t v76;
  char *v77;
  int v78;
  unsigned int v79;
  int v81;
  NSObject *v82;
  const char *v83;
  void **v84;
  NSObject *log;
  char *v86;
  int v87;
  int v88;
  void **v89;
  uint8_t buf[4];
  double v91;
  __int16 v92;
  int v93;
  __int16 v94;
  char *v95;
  __int16 v96;
  CA::Render::Object *v97;
  __int16 v98;
  CA::Render::Animation *v99;
  __int16 v100;
  int v101;
  __int16 v102;
  int v103;
  uint64_t v104;

  v104 = *MEMORY[0x1E0C80C00];
  v4 = CA::Render::Context::lookup_handle(this, a2, 0, 1, 0);
  if (!v4 || !a3)
    return;
  v5 = v4;
  v6 = (*(uint64_t (**)(CA::Render::Animation *, _QWORD))(*(_QWORD *)a3 + 136))(a3, *((_QWORD *)v4 + 2));
  v8 = (_QWORD **)((char *)v5 + 48);
  v7 = (_QWORD *)*((_QWORD *)v5 + 6);
  if (!v7)
    goto LABEL_49;
  v9 = (_QWORD *)((char *)v5 + 48);
  do
  {
    v10 = (CA::Render::Animation *)*v7;
    if ((CA::Render::Animation *)*v7 == a3
      || (v11 = (const void *)*((_QWORD *)a3 + 7)) == 0
      || (v12 = (const void *)*((_QWORD *)v10 + 7)) == 0
      || *((_QWORD *)a3 + 8) != *((_QWORD *)v10 + 8)
      || !CFEqual(v11, v12))
    {
      v14 = (_QWORD *)v7[1];
      v9 = v7 + 1;
      goto LABEL_15;
    }
    if (!byte_1ECDC6A67)
      goto LABEL_11;
    x_log_begin();
    if (x_log_hook_p())
    {
      v16 = mach_absolute_time();
      CATimeWithHostTime(v16);
      x_log_();
    }
    else
    {
      v18 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        v19 = mach_absolute_time();
        v20 = CATimeWithHostTime(v19);
        v21 = *((_QWORD *)v5 + 3);
        if (v21)
          LODWORD(v21) = *(_DWORD *)(v21 + 16);
        v22 = *((_QWORD *)v5 + 2);
        if (v22)
        {
          v23 = *(_QWORD *)(v22 + 120);
          if (v23)
            v22 = v23 + 28;
          else
            v22 = 0;
        }
        v24 = *((_DWORD *)v10 + 20);
        v25 = *((_DWORD *)v10 + 21);
        *(_DWORD *)buf = 134219522;
        v91 = v20;
        v92 = 1024;
        v93 = v21;
        v94 = 2080;
        v95 = (char *)v22;
        v96 = 2048;
        v97 = v5;
        v98 = 2048;
        v99 = v10;
        v100 = 1024;
        v101 = v24;
        v102 = 1024;
        v103 = v25;
        _os_log_impl(&dword_184457000, v18, OS_LOG_TYPE_DEFAULT, "%f %x \"%s\" (%p): replacing %p (eval %u; frames %u):\n",
          buf,
          0x3Cu);
      }
    }
    CA::Render::show_object(v10, v17);
    v84 = (void **)x_stream_pop_(0);
    v86 = x_stream_get(v84);
    v26 = 0;
    while (2)
    {
      v27 = 0;
      v28 = &v86[v26];
      v29 = -1;
      while (1)
      {
        if (v28[v27] == 10)
        {
          v29 = v27;
          goto LABEL_33;
        }
        if (!v28[v27])
          break;
LABEL_33:
        ++v27;
        v30 = 32512;
        if (v27 == 32512)
          goto LABEL_34;
      }
      v30 = v27;
LABEL_34:
      if (v29 <= -1 || v28[v30] == 0)
        v32 = v30;
      else
        v32 = v29 + 1;
      if (v32 > 0)
      {
        v87 = v32;
        v88 = v26;
        if (x_log_hook_p())
        {
          x_log_();
          v33 = v87;
          v34 = v88;
        }
        else
        {
          log = x_log_category_render;
          v35 = os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT);
          v34 = v88;
          v33 = v87;
          if (v35)
          {
            *(_DWORD *)buf = 136315650;
            v36 = "continued...\n";
            if (!v88)
              v36 = "";
            v91 = *(double *)&v36;
            v92 = 1040;
            v93 = v87;
            v94 = 2080;
            v95 = v28;
            _os_log_impl(&dword_184457000, log, OS_LOG_TYPE_DEFAULT, "%s%.*s", buf, 0x1Cu);
            v33 = v87;
            v34 = v88;
          }
        }
        v26 = v33 + v34;
        continue;
      }
      break;
    }
    x_log_end_free_(v84);
LABEL_11:
    if (BYTE9(xmmword_1ECDC6A90))
      kdebug_trace();
    CA::Render::invalidate_animation(v5, v10, v13);
    v14 = (_QWORD *)v7[1];
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(malloc_zone, v7);
    *v9 = v14;
    *((_QWORD *)v5 + 12) |= 0x10080003uLL;
LABEL_15:
    v7 = v14;
  }
  while (v14);
LABEL_49:
  if (!v6)
  {
    if (!byte_1ECDC6A67)
      return;
    x_log_begin();
    if (x_log_hook_p())
    {
      v50 = mach_absolute_time();
      CATimeWithHostTime(v50);
      x_log_();
    }
    else
    {
      v68 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        v69 = mach_absolute_time();
        v70 = CATimeWithHostTime(v69);
        v71 = *((_QWORD *)v5 + 3);
        if (v71)
          LODWORD(v71) = *(_DWORD *)(v71 + 16);
        v72 = *((_QWORD *)v5 + 2);
        if (v72)
        {
          v73 = *(_QWORD *)(v72 + 120);
          if (v73)
            v72 = v73 + 28;
          else
            v72 = 0;
        }
        *(_DWORD *)buf = 134219010;
        v91 = v70;
        v92 = 1024;
        v93 = v71;
        v94 = 2080;
        v95 = (char *)v72;
        v96 = 2048;
        v97 = v5;
        v98 = 2048;
        v99 = a3;
        _os_log_impl(&dword_184457000, v68, OS_LOG_TYPE_DEFAULT, "%f %x \"%s\" (%p): not adding %p:\n", buf, 0x30u);
      }
    }
    CA::Render::show_object(a3, v51);
    v89 = (void **)x_stream_pop_(0);
    v74 = x_stream_get(v89);
    for (i = 0; ; i += v81)
    {
      v76 = 0;
      v77 = &v74[i];
      v78 = -1;
      while (1)
      {
        if (v77[v76] == 10)
        {
          v78 = v76;
          goto LABEL_119;
        }
        if (!v77[v76])
          break;
LABEL_119:
        ++v76;
        v79 = 32512;
        if (v76 == 32512)
          goto LABEL_120;
      }
      v79 = v76;
LABEL_120:
      if (v78 <= -1 || v77[v79] == 0)
        v81 = v79;
      else
        v81 = v78 + 1;
      if (v81 < 1)
        goto LABEL_135;
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v82 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315650;
          if (i)
            v83 = "continued...\n";
          else
            v83 = "";
          v91 = *(double *)&v83;
          v92 = 1040;
          v93 = v81;
          v94 = 2080;
          v95 = &v74[i];
          _os_log_impl(&dword_184457000, v82, OS_LOG_TYPE_DEFAULT, "%s%.*s", buf, 0x1Cu);
        }
      }
    }
  }
  v37 = *v8;
  if (*v8)
  {
    v38 = *((_QWORD *)a3 + 5);
    do
    {
      v39 = 0.0;
      v40 = 0.0;
      if (v38)
        v40 = *(double *)(v38 + 40);
      v41 = *(_QWORD *)(*v37 + 40);
      if (v41)
        v39 = *(double *)(v41 + 40);
      if (v40 < v39 || v40 <= v39 && *((_DWORD *)a3 + 18) < *(_DWORD *)(*v37 + 72))
        break;
      v8 = (_QWORD **)(v37 + 1);
      v37 = (_QWORD *)v37[1];
    }
    while (v37);
  }
  v42 = (unsigned int *)((char *)a3 + 8);
  do
    v43 = __ldaxr(v42);
  while (__stlxr(v43 + 1, v42));
  v44 = a3;
  if (!v43)
  {
    v44 = 0;
    do
      v49 = __ldaxr(v42);
    while (__stlxr(v49 - 1, v42));
  }
  v45 = (malloc_zone_t *)get_malloc_zone();
  v46 = malloc_type_zone_malloc(v45, 0x10uLL, 0x8BB15036uLL);
  *v46 = v44;
  v46[1] = v37;
  *v8 = v46;
  *((_QWORD *)v5 + 12) |= 0x80003uLL;
  (*(void (**)(CA::Render::Animation *, CA::Render::Object *))(*(_QWORD *)a3 + 144))(a3, v5);
  if (BYTE9(xmmword_1ECDC6A90))
    kdebug_trace();
  if (!byte_1ECDC6A67)
    return;
  x_log_begin();
  if (x_log_hook_p())
  {
    v47 = mach_absolute_time();
    CATimeWithHostTime(v47);
    x_log_();
  }
  else
  {
    v52 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      v53 = mach_absolute_time();
      v54 = CATimeWithHostTime(v53);
      v55 = *((_QWORD *)v5 + 3);
      if (v55)
        LODWORD(v55) = *(_DWORD *)(v55 + 16);
      v56 = *((_QWORD *)v5 + 2);
      if (v56)
      {
        v57 = *(_QWORD *)(v56 + 120);
        if (v57)
          v56 = v57 + 28;
        else
          v56 = 0;
      }
      *(_DWORD *)buf = 134219010;
      v91 = v54;
      v92 = 1024;
      v93 = v55;
      v94 = 2080;
      v95 = (char *)v56;
      v96 = 2048;
      v97 = v5;
      v98 = 2048;
      v99 = a3;
      _os_log_impl(&dword_184457000, v52, OS_LOG_TYPE_DEFAULT, "%f %x \"%s\" (%p): adding %p:\n", buf, 0x30u);
    }
  }
  CA::Render::show_object(a3, v48);
  v89 = (void **)x_stream_pop_(0);
  v58 = x_stream_get(v89);
  v59 = 0;
  while (2)
  {
    v60 = 0;
    v61 = &v58[v59];
    v62 = -1;
    while (2)
    {
      if (v61[v60] == 10)
      {
        v62 = v60;
LABEL_89:
        ++v60;
        v63 = 32512;
        if (v60 == 32512)
          goto LABEL_90;
        continue;
      }
      break;
    }
    if (v61[v60])
      goto LABEL_89;
    v63 = v60;
LABEL_90:
    if (v62 <= -1 || v61[v63] == 0)
      v65 = v63;
    else
      v65 = v62 + 1;
    if (v65 >= 1)
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v66 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315650;
          if (v59)
            v67 = "continued...\n";
          else
            v67 = "";
          v91 = *(double *)&v67;
          v92 = 1040;
          v93 = v65;
          v94 = 2080;
          v95 = &v58[v59];
          _os_log_impl(&dword_184457000, v66, OS_LOG_TYPE_DEFAULT, "%s%.*s", buf, 0x1Cu);
        }
      }
      v59 += v65;
      continue;
    }
    break;
  }
LABEL_135:
  x_log_end_free_(v89);
}

uint64_t CA::Render::Animation::was_added(uint64_t this, Handle *a2)
{
  int v2;

  v2 = *(_DWORD *)(this + 12);
  if ((v2 & 0x1000) == 0)
  {
    if ((v2 & 0x2000) == 0)
      return this;
LABEL_5:
    a2[12] = (Handle)((unint64_t)a2[12] | 0x10);
    return this;
  }
  a2[12] = (Handle)((unint64_t)a2[12] | 8);
  if ((*(_DWORD *)(this + 12) & 0x2000) != 0)
    goto LABEL_5;
  return this;
}

uint64_t CA::Render::BackdropLayer::commit_layer(uint64_t this, CA::Render::Context *a2, CA::Render::Layer *a3, CA::Render::Handle *a4, int a5)
{
  uint64_t v7;
  unsigned int *v9;
  uint64_t v10;
  int v11;
  float v12;
  uint64_t v13;
  char *v14;
  const void *v15;
  _DWORD *v16;
  uint64_t v17;
  size_t v18;
  int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  malloc_zone_t *malloc_zone;
  _DWORD *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  const void *v28;
  _QWORD v29[2];

  v7 = this;
  v29[1] = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(this + 88))
  {
    v10 = *(_QWORD *)(this + 16);
    v9 = *(unsigned int **)(this + 24);
    v11 = *(unsigned __int8 *)(this + 80);
    v12 = *(float *)(this + 32);
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::BackdropState::_list_lock);
    v14 = (char *)CA::Render::BackdropState::_list;
    v13 = qword_1EDD0FBD8;
    if (CA::Render::BackdropState::_list != (_UNKNOWN *)qword_1EDD0FBD8)
    {
      v15 = v9 + 7;
      do
      {
        v16 = *(_DWORD **)v14;
        if (*(_QWORD *)(*(_QWORD *)v14 + 24) == v10
          && *((CA::Render::Context **)v16 + 2) == a2
          && *((unsigned __int8 *)v16 + 84) == v11
          && *((float *)v16 + 8) == v12
          && (*((_BYTE *)v16 + 13) & 2) == 0)
        {
          if (v9)
          {
            v17 = *(_QWORD *)(*((_QWORD *)v16 + 5) + 32);
            if (v17)
            {
              v18 = v9[6];
              if ((_DWORD)v18 == *(_DWORD *)(v17 + 24))
              {
                v28 = v15;
                v19 = memcmp(v15, (const void *)(v17 + 28), v18);
                v15 = v28;
                if (!v19)
                {
                  v20 = v16 + 2;
                  do
                    v21 = __ldaxr(v20);
                  while (__stlxr(v21 + 1, v20));
                  if (v21)
                    goto LABEL_28;
                  do
                    v22 = __ldaxr(v20);
                  while (__stlxr(v22 - 1, v20));
                }
              }
            }
          }
        }
        v14 += 8;
      }
      while (v14 != (char *)v13);
    }
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v24 = malloc_type_zone_malloc(malloc_zone, 0x68uLL, 0x8BB15036uLL);
    v16 = v24;
    if (v24)
    {
      v24[2] = 1;
      v24[3] = 4;
      ++dword_1ECDC7C38;
      *(_QWORD *)v24 = off_1E1596EC0;
      *((_QWORD *)v24 + 2) = a2;
      *((_QWORD *)v24 + 3) = v10;
      *((float *)v24 + 8) = v12;
      v24[9] = 0;
      CA::Render::BackdropGroup::retain_group((_QWORD *)v24 + 5, (uint64_t)a2, v9, v11, v12);
      v16[20] = 0;
      *((_OWORD *)v16 + 3) = 0u;
      *((_OWORD *)v16 + 4) = 0u;
      *((_BYTE *)v16 + 84) = v11;
      *((_QWORD *)v16 + 11) = 0;
      *((_WORD *)v16 + 48) = 0;
    }
    v29[0] = v16;
    v16[3] |= 0x100u;
    X::small_vector_base<CA::Render::BackdropState *>::push_back(v29);
LABEL_28:
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::BackdropState::_list_lock);
    this = *(_QWORD *)(v7 + 88);
    *(_QWORD *)(v7 + 88) = v16;
    if (this)
    {
      v25 = (unsigned int *)(this + 8);
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 16))(this);
    }
  }
  if ((a5 & 0x5FE78) != 0)
    *((_QWORD *)a4 + 12) |= 0x10uLL;
  if ((a5 & 0x200000) == 0)
    *(_BYTE *)(*(_QWORD *)(v7 + 88) + 97) = 1;
  return this;
}

CA::Render::BackdropLayer *CA::Render::BackdropLayer::BackdropLayer(CA::Render::BackdropLayer *this, CA::Render::Decoder *a2)
{
  int v4;
  unsigned int v5;

  *(_QWORD *)this = off_1E1598C30;
  *((_DWORD *)this + 2) = 1;
  *((_DWORD *)this + 3) = (CA::Render::Decoder::decode_int32(a2) << 8) | 3;
  ++dword_1ECDC7C34;
  *(_QWORD *)this = off_1E1596DB8;
  *((_QWORD *)this + 2) = CA::Render::Decoder::decode_size_t(a2);
  *((_QWORD *)this + 3) = CA::Render::Decoder::decode_object(a2, 49);
  *((_DWORD *)this + 8) = CA::Render::Decoder::decode_int32(a2);
  *((_DWORD *)this + 9) = CA::Render::Decoder::decode_int32(a2);
  v4 = CA::Render::Decoder::decode_int32(a2);
  *((_OWORD *)this + 3) = 0u;
  *((_DWORD *)this + 10) = v4;
  *((_OWORD *)this + 4) = 0u;
  CA::Render::Decoder::decode_bytes(a2, (char *)this + 48, 0x20uLL);
  v5 = CA::Render::Decoder::decode_int8(a2);
  if (v5 >= 3)
  {
    CA::Render::Decoder::set_fatal_error(a2, "%s - enum %u out of range of %u", "decode_int8_enum", v5, 3);
    LOBYTE(v5) = 0;
  }
  *((_BYTE *)this + 80) = v5;
  *((_QWORD *)this + 11) = 0;
  return this;
}

void X::small_vector_base<CA::Render::BackdropState *>::push_back(_QWORD *a1)
{
  char *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;

  v3 = CA::Render::BackdropState::_list;
  v2 = (char *)qword_1EDD0FBD8;
  v4 = (qword_1EDD0FBD8 - (uint64_t)CA::Render::BackdropState::_list) >> 3;
  if (qword_1EDD0FBE8 < (unint64_t)(v4 + 1))
  {
    v5 = off_1EDD0FBE0;
    v6 = (qword_1EDD0FBE8 + 1) | ((unint64_t)(qword_1EDD0FBE8 + 1) >> 1) | (((qword_1EDD0FBE8 + 1) | ((unint64_t)(qword_1EDD0FBE8 + 1) >> 1)) >> 2);
    v7 = v6 | (v6 >> 4) | ((v6 | (v6 >> 4)) >> 8);
    v8 = v7 | (v7 >> 16) | ((v7 | (v7 >> 16)) >> 32);
    if (v8 + 1 > v4 + 1)
      v9 = v8 + 1;
    else
      v9 = v4 + 1;
    v10 = (char *)malloc_type_malloc(8 * v9, 0x2004093837F09uLL);
    v11 = v10;
    v12 = (uint64_t *)CA::Render::BackdropState::_list;
    v13 = qword_1EDD0FBD8;
    if (CA::Render::BackdropState::_list != (_UNKNOWN *)qword_1EDD0FBD8)
    {
      v14 = v10;
      do
      {
        v15 = *v12++;
        *(_QWORD *)v14 = v15;
        v14 += 8;
      }
      while (v12 != (uint64_t *)v13);
    }
    if (v3 != v5)
      free(CA::Render::BackdropState::_list);
    v2 = &v11[8 * v4];
    CA::Render::BackdropState::_list = v11;
    qword_1EDD0FBD8 = (uint64_t)v2;
    qword_1EDD0FBE8 = v9;
  }
  *(_QWORD *)v2 = *a1;
  qword_1EDD0FBD8 += 8;
}

CA::Render::LayerHost *CA::Render::LayerHost::LayerHost(CA::Render::LayerHost *this, CA::Render::Decoder *a2)
{
  int v4;
  int v5;
  int v6;

  *(_QWORD *)this = off_1E1598C30;
  *((_DWORD *)this + 2) = 1;
  *((_DWORD *)this + 3) = (CA::Render::Decoder::decode_int32(a2) << 8) | 0x1E;
  ++dword_1ECDC7CA0;
  *(_QWORD *)this = off_1E1599698;
  v4 = CA::Render::Decoder::decode_int32(a2);
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 4) = v4;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_QWORD *)this + 8) = CA::Render::Decoder::decode_int64(a2);
  v5 = CA::Render::Decoder::decode_int32(a2);
  std::vector<unsigned long long>::resize((char **)this + 5, v5);
  CA::Render::Decoder::decode_bytes(a2, *((void **)this + 5), 8 * v5);
  v6 = *((_DWORD *)this + 3);
  if (byte_1ECDC6A8B)
  {
    v6 &= ~0x400u;
    *((_DWORD *)this + 3) = v6;
    if ((v6 & 0x2000) == 0)
      goto LABEL_5;
  }
  else if ((v6 & 0x2000) == 0)
  {
    goto LABEL_5;
  }
  if ((*(_WORD *)(*((_QWORD *)a2 + 9) + 552) & 0x200) == 0)
  {
    CA::Render::Decoder::set_fatal_error(a2, "Missing entitlement for system layer!");
    v6 = *((_DWORD *)this + 3);
  }
LABEL_5:
  if ((v6 & 0x10000) != 0 && (*(_WORD *)(*((_QWORD *)a2 + 9) + 552) & 0x400) == 0)
    CA::Render::Decoder::set_fatal_error(a2, "Missing entitlement for secure layer!");
  return this;
}

void std::vector<unsigned long long>::resize(char **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v3 = *a1;
  v4 = a1[1];
  v5 = (v4 - *a1) >> 3;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v16 = &v3[8 * a2];
    goto LABEL_16;
  }
  v6 = a2 - v5;
  v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 3)
  {
    bzero(a1[1], 8 * v6);
    v16 = &v4[8 * v6];
LABEL_16:
    a1[1] = v16;
    return;
  }
  if (a2 >> 61)
    abort();
  v8 = v7 - v3;
  v9 = v8 >> 2;
  if (v8 >> 2 <= a2)
    v9 = a2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
    v10 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  if (v10 >> 61)
    std::__throw_bad_array_new_length[abi:nn180100]();
  v11 = (char *)operator new(8 * v10);
  v12 = &v11[8 * v5];
  v13 = &v11[8 * v10];
  bzero(v12, 8 * v6);
  v14 = &v12[8 * v6];
  while (v4 != v3)
  {
    v15 = *((_QWORD *)v4 - 1);
    v4 -= 8;
    *((_QWORD *)v12 - 1) = v15;
    v12 -= 8;
  }
  *a1 = v12;
  a1[1] = v14;
  a1[2] = v13;
  if (v3)
    operator delete(v3);
}

CA::Render::Surface *CA::Render::Surface::decode(CA::Render::Surface *this, CA::Render::Decoder *a2)
{
  int v3;
  int v4;
  uint64_t v5;
  CA::Render::Surface *v6;
  malloc_zone_t *malloc_zone;
  CA::Render::Surface *v8;
  CA::Render::Surface *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  mach_port_t v16;
  mach_port_name_t v17;
  IOSurfaceRef v18;
  __IOSurface *v19;
  malloc_zone_t *v20;
  CA::Render::Surface *v21;
  mach_port_name_t v22;
  _BOOL4 v23;
  int v24;
  int v25;
  char v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  __int16 v32;
  __IOSurface *v33;
  __int16 v34;
  malloc_zone_t *v35;
  CA::Render::Texture *v36;
  _BOOL4 v38;
  BOOL v39;
  BOOL v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v3 = CA::Render::Decoder::decode_int8(this);
  v4 = CA::Render::Decoder::decode_int32(this);
  if (v3)
  {
    v5 = CA::Render::Decoder::decode_object(this, 51);
    if (v5)
    {
      v6 = (CA::Render::Surface *)v5;
      malloc_zone = (malloc_zone_t *)get_malloc_zone();
      v8 = (CA::Render::Surface *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x158uLL, 0x743898A5uLL);
      v9 = v8;
      if (v8)
        CA::Render::Surface::Surface(v8, v6, v4);
      v10 = (unsigned int *)((char *)v6 + 8);
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
        (*(void (**)(CA::Render::Surface *))(*(_QWORD *)v6 + 16))(v6);
      if ((v4 & 0x100000) == 0)
        goto LABEL_21;
    }
    else
    {
      v9 = 0;
      if ((v4 & 0x100000) == 0)
      {
LABEL_21:
        v23 = 0;
        goto LABEL_27;
      }
    }
    if (CA::Render::Decoder::decode_int8(this))
    {
      v39 = 0;
      v22 = CA::Render::Decoder::decode_port(this, 17, &v39);
      if (v22)
      {
        if (v39)
          mach_port_deallocate(*MEMORY[0x1E0C83DA0], v22);
      }
    }
    goto LABEL_21;
  }
  v13 = CA::Render::Decoder::decode_int32(this);
  v14 = CA::Render::Decoder::decode_int8(this);
  if ((v14 | 2) == 3 && (v15 = v14, v40 = 0, (v16 = CA::Render::Decoder::decode_port(this, 17, &v40)) != 0))
  {
    v17 = v16;
    v18 = IOSurfaceLookupFromMachPort(v16);
    if (v18)
    {
      v19 = v18;
      v20 = (malloc_zone_t *)get_malloc_zone();
      v21 = (CA::Render::Surface *)malloc_type_zone_calloc(v20, 1uLL, 0x158uLL, 0x743898A5uLL);
      v9 = v21;
      if (v21)
        CA::Render::Surface::Surface((uint64_t)v21, v19, v13, 0, v4, 0, 0);
    }
    else
    {
      v9 = 0;
    }
    if (v40)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], v17);
    v23 = v15 == 3;
  }
  else
  {
    v23 = 0;
    v9 = 0;
  }
LABEL_27:
  v24 = CA::Render::Decoder::decode_int8(this);
  v25 = CA::Render::Decoder::decode_int8(this);
  v26 = CA::Render::Decoder::decode_int8(this);
  v27 = CA::Render::Decoder::decode_int8(this);
  v28 = CA::Render::Decoder::decode_int8(this);
  v29 = CA::Render::Decoder::decode_int8(this);
  v30 = CA::Render::Decoder::decode_int8(this);
  v31 = CA::Render::Decoder::decode_int8(this);
  if (v9)
  {
    v38 = v23;
    v32 = v31 != 0;
    CA::Render::Texture::decode(v9, this);
    v34 = (32 * (v24 != 0)) | ((v25 != 0) << 6) | *((_WORD *)v9 + 168) & 0xF817;
    *((_BYTE *)v9 + 328) = v26;
    *((_WORD *)v9 + 168) = ((v27 != 0) << 10) | ((v28 != 0) << 8) | ((v29 != 0) << 9) | ((v30 != 0) << 7) | (8 * v32) | v34;
    if (v38)
      CA::Render::Surface::reload_iosurface_color_attributes(v9, v33);
  }
  else
  {
    v35 = (malloc_zone_t *)get_malloc_zone();
    v36 = (CA::Render::Texture *)malloc_type_zone_calloc(v35, 1uLL, 0x158uLL, 0x743898A5uLL);
    v9 = v36;
    if (v36)
      v36 = (CA::Render::Texture *)CA::Render::Surface::Surface((uint64_t)v36, 0, 0, 0, 0x8000, 0, 0);
    CA::Render::Texture::decode(v36, this);
  }
  return v9;
}

void CA::Render::Context::remove_animation(CA::Render::Context *this, CA::Render::Object *a2, const __CFString *a3)
{
  CA::Render::Object *v4;
  CA::Render::Animation *v5;
  CA::Render::Object *v6;
  _QWORD **v7;
  _QWORD *v8;
  CFHashCode v9;
  CFHashCode v10;
  uint64_t v11;
  const void *v12;
  _QWORD *v13;
  malloc_zone_t *malloc_zone;
  uint64_t v15;
  const CA::Render::Object *v16;
  NSObject *v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  char *v27;
  int v28;
  unsigned int v29;
  int v31;
  int v32;
  int v33;
  _BOOL4 v34;
  const char *v35;
  void **v36;
  NSObject *log;
  char *v38;
  int v39;
  int v40;
  uint8_t buf[4];
  double v42;
  __int16 v43;
  int v44;
  __int16 v45;
  char *v46;
  __int16 v47;
  CA::Render::Object *v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  int v52;
  __int16 v53;
  int v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v4 = CA::Render::Context::lookup_handle(this, a2, 0, 0, 0);
  if (!v4)
    return;
  v6 = v4;
  v7 = (_QWORD **)((char *)v4 + 48);
  v8 = (_QWORD *)*((_QWORD *)v4 + 6);
  if (!v8)
    return;
  if (a3)
  {
    v9 = CFHash(a3);
    v8 = *v7;
    if (!*v7)
      return;
    v10 = v9;
  }
  else
  {
    v10 = 0;
  }
  do
  {
    v11 = *v8;
    v12 = *(const void **)(*v8 + 56);
    if (a3)
    {
      if (!v12 || v10 != *(_QWORD *)(v11 + 64) || !CFEqual(a3, v12))
      {
LABEL_16:
        v13 = (_QWORD *)v8[1];
        v7 = (_QWORD **)(v8 + 1);
        goto LABEL_17;
      }
    }
    else if (v12)
    {
      goto LABEL_16;
    }
    if (!byte_1ECDC6A67)
      goto LABEL_12;
    x_log_begin();
    if (x_log_hook_p())
    {
      v15 = mach_absolute_time();
      CATimeWithHostTime(v15);
      x_log_();
    }
    else
    {
      v17 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        v18 = mach_absolute_time();
        v19 = CATimeWithHostTime(v18);
        v20 = *((_QWORD *)v6 + 3);
        if (v20)
          LODWORD(v20) = *(_DWORD *)(v20 + 16);
        v21 = *((_QWORD *)v6 + 2);
        if (v21)
        {
          v22 = *(_QWORD *)(v21 + 120);
          if (v22)
            v21 = v22 + 28;
          else
            v21 = 0;
        }
        v23 = *(_DWORD *)(v11 + 80);
        v24 = *(_DWORD *)(v11 + 84);
        *(_DWORD *)buf = 134219522;
        v42 = v19;
        v43 = 1024;
        v44 = v20;
        v45 = 2080;
        v46 = (char *)v21;
        v47 = 2048;
        v48 = v6;
        v49 = 2048;
        v50 = v11;
        v51 = 1024;
        v52 = v23;
        v53 = 1024;
        v54 = v24;
        _os_log_impl(&dword_184457000, v17, OS_LOG_TYPE_DEFAULT, "%f %x \"%s\" (%p): removing %p (eval %u; frames %u):\n",
          buf,
          0x3Cu);
      }
    }
    CA::Render::show_object((CA::Render *)v11, v16);
    v36 = (void **)x_stream_pop_(0);
    v38 = x_stream_get(v36);
    v25 = 0;
    while (2)
    {
      v26 = 0;
      v27 = &v38[v25];
      v28 = -1;
      while (1)
      {
        if (v27[v26] == 10)
        {
          v28 = v26;
          goto LABEL_35;
        }
        if (!v27[v26])
          break;
LABEL_35:
        ++v26;
        v29 = 32512;
        if (v26 == 32512)
          goto LABEL_36;
      }
      v29 = v26;
LABEL_36:
      if (v28 <= -1 || v27[v29] == 0)
        v31 = v29;
      else
        v31 = v28 + 1;
      if (v31 > 0)
      {
        v39 = v31;
        v40 = v25;
        if (x_log_hook_p())
        {
          x_log_();
          v32 = v39;
          v33 = v40;
        }
        else
        {
          log = x_log_category_render;
          v34 = os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT);
          v33 = v40;
          v32 = v39;
          if (v34)
          {
            *(_DWORD *)buf = 136315650;
            v35 = "continued...\n";
            if (!v40)
              v35 = "";
            v42 = *(double *)&v35;
            v43 = 1040;
            v44 = v39;
            v45 = 2080;
            v46 = v27;
            _os_log_impl(&dword_184457000, log, OS_LOG_TYPE_DEFAULT, "%s%.*s", buf, 0x1Cu);
            v32 = v39;
            v33 = v40;
          }
        }
        v25 = v32 + v33;
        continue;
      }
      break;
    }
    x_log_end_free_(v36);
LABEL_12:
    if (BYTE9(xmmword_1ECDC6A90))
      kdebug_trace();
    CA::Render::invalidate_animation(v6, (CA::Render::Handle *)v11, v5);
    v13 = (_QWORD *)v8[1];
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(malloc_zone, v8);
    *v7 = v13;
    *((_QWORD *)v6 + 12) |= 0x10080003uLL;
LABEL_17:
    v8 = v13;
  }
  while (v13);
}

const void **CA::Render::GradientLayer::commit_layer(const void **this, CFTypeRef *a2, CA::Render::Layer *a3, CA::Render::Handle *a4)
{
  return X::CFRef<__CFDictionary const*>::operator=(this + 17, a2[56]);
}

CGColorSpace *CA::Render::Context::set_colorspace(CA::Render::Context *this, CGColorSpace *a2)
{
  CGColorSpace *result;

  result = (CGColorSpace *)*((_QWORD *)this + 56);
  if (result != a2)
  {
    CGColorSpaceRelease(result);
    result = CGColorSpaceRetain(a2);
    *((_QWORD *)this + 56) = result;
  }
  return result;
}

void CA::Render::Context::flush_image_queue(CA::Render::Context *this, int a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::Context::_image_queues_lock);
  v6 = *((_QWORD *)this + 45);
  v7 = *((_QWORD *)this + 46);
  while (v6 != v7)
  {
    if (*(_DWORD *)(*(_QWORD *)v6 + 176) == a2)
    {
      v8 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v6 + 16) + 24) + 16);
      while (1)
      {
        v9 = *v8;
        if (*v8 >= a3)
          break;
        while (1)
        {
          v10 = __ldaxr(v8);
          if (v10 != v9)
            break;
          if (!__stlxr(a3, v8))
            goto LABEL_10;
        }
        __clrex();
      }
LABEL_10:
      v7 = *((_QWORD *)this + 46);
    }
    v6 += 8;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::Context::_image_queues_lock);
}

BOOL CA::Render::PropertyAnimation::validate(uint64_t a1)
{
  _DWORD *v1;

  v1 = *(_DWORD **)(a1 + 96);
  if (!v1)
    return 0;
  if ((v1 & 1) != 0)
    return 1;
  return *v1 != 0;
}

uint64_t CA::Render::Context::copy_slot(CA::Render::Context *this)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v1 = this;
  os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::Context::_context_lock);
  if (CA::Render::Context::_slot_table)
  {
    v2 = x_hash_table_lookup(CA::Render::Context::_slot_table, v1, 0);
    v3 = v2;
    if (v2)
    {
      v4 = (unsigned int *)(v2 + 8);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 + 1, v4));
      if (!v5)
      {
        v3 = 0;
        do
          v6 = __ldaxr(v4);
        while (__stlxr(v6 - 1, v4));
      }
    }
  }
  else
  {
    v3 = 0;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::Context::_context_lock);
  return v3;
}

CA::Render::Proxy *CA::Render::Proxy::Proxy(CA::Render::Proxy *this, CA::Render::Decoder *a2)
{
  *(_QWORD *)this = off_1E1598C30;
  *((_DWORD *)this + 2) = 1;
  *((_DWORD *)this + 3) = (CA::Render::Decoder::decode_int32(a2) << 8) | 0x2B;
  ++dword_1ECDC7CD4;
  *(_QWORD *)this = off_1E1598A58;
  *((_QWORD *)this + 2) = CA::Render::Decoder::decode_int64(a2);
  return this;
}

CA::Render::ReplicatorLayer *CA::Render::ReplicatorLayer::ReplicatorLayer(CA::Render::ReplicatorLayer *this, CA::Render::Decoder *a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *(_QWORD *)this = off_1E1598C30;
  *((_DWORD *)this + 2) = 1;
  *((_DWORD *)this + 3) = (CA::Render::Decoder::decode_int32(a2) << 8) | 0x2C;
  ++dword_1ECDC7CD8;
  *(_QWORD *)this = off_1E1597788;
  *((_DWORD *)this + 4) = CA::Render::Decoder::decode_int32(a2);
  *((_QWORD *)this + 3) = CA::Render::Decoder::decode_object(a2, 56);
  CA::Render::Decoder::decode_bytes(a2, (char *)this + 32, 0x24uLL);
  v4 = *((_QWORD *)this + 3);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 + 16);
    if (v5 <= 3)
    {
      CA::Render::Decoder::set_fatal_error(a2, "%s - _instance_transform size %u", "ReplicatorLayer", v5);
      v6 = (unsigned int *)*((_QWORD *)this + 3);
      if (v6)
      {
        v7 = v6 + 2;
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
          (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
        *((_QWORD *)this + 3) = 0;
      }
    }
  }
  return this;
}

void CA::Render::Context::set_slot(CA::Render::Context *this, unsigned int a2, CA::Render::Object *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;

  if (a2 && CA::Render::Context::_slot_table)
  {
    v5 = *((_QWORD *)this + 21);
    v6 = *((_QWORD *)this + 22);
    if (v5 != v6)
    {
      while (*(_DWORD *)v5 != a2)
      {
        v5 += 8;
        if (v5 == v6)
          return;
      }
    }
    if (v5 != v6 && !*(_BYTE *)(v5 + 4))
    {
      os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::Context::_context_lock);
      v7 = a2;
      v8 = x_hash_table_lookup(CA::Render::Context::_slot_table, a2, 0);
      v9 = (int *)CA::Render::Context::_slot_table;
      if (a3)
      {
        v10 = (unsigned int *)((char *)a3 + 8);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 + 1, v10));
        if (!v11)
        {
          a3 = 0;
          do
            v15 = __ldaxr(v10);
          while (__stlxr(v15 - 1, v10));
        }
      }
      hash_table_modify(v9, v7, (uint64_t)a3, 0);
      os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::Context::_context_lock);
      if (v8)
      {
        v12 = (unsigned int *)(v8 + 8);
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      }
    }
  }
}

CA::Render::InterpolatedFunction *CA::Render::Function::decode(CA::Render::Function *this, CA::Render::Decoder *a2)
{
  int v3;
  unsigned int v4;
  CA::Render::InterpolatedFunction *result;
  malloc_zone_t *malloc_zone;
  malloc_zone_t *v7;

  v3 = CA::Render::Decoder::decode_int8(this);
  switch(v3)
  {
    case 3:
      malloc_zone = (malloc_zone_t *)get_malloc_zone();
      result = (CA::Render::InterpolatedFunction *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x38uLL, 0x743898A5uLL);
      if (result)
        return CA::Render::Gradient::Gradient(result, this);
      break;
    case 2:
      v7 = (malloc_zone_t *)get_malloc_zone();
      result = (CA::Render::InterpolatedFunction *)malloc_type_zone_calloc(v7, 1uLL, 0x38uLL, 0x743898A5uLL);
      if (result)
        return CA::Render::InterpolatedFunction::InterpolatedFunction(result, this);
      break;
    case 1:
      v4 = CA::Render::Decoder::decode_int8(this);
      return (CA::Render::InterpolatedFunction *)CA::Render::NamedFunction::new_function(v4);
    default:
      return 0;
  }
  return result;
}

unint64_t CA::Render::NamedFunction::new_function(unsigned int a1)
{
  unint64_t result;
  unint64_t *v3;
  malloc_zone_t *malloc_zone;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a1 > 0xC)
    return 0;
  v3 = (unint64_t *)((char *)&CA::Render::NamedFunction::new_function(CA::Render::FunctionName)::table + 8 * a1);
  result = *v3;
  if (*v3)
    goto LABEL_17;
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  v5 = (unsigned int *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x18uLL, 0x743898A5uLL);
  if (v5)
  {
    v5[2] = 1;
    v6 = v5 + 2;
    v5[3] = 18;
    ++dword_1ECDC7C70;
    *(_QWORD *)v5 = off_1E15971E0;
    v5[4] = a1;
    while (!__ldaxr(v3))
    {
      if (!__stlxr((unint64_t)v5, v3))
        goto LABEL_16;
    }
    __clrex();
    do
    {
      v9 = __ldaxr(v6);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v6));
    if (!v10)
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
  }
  else
  {
    while (!__ldaxr(v3))
    {
      if (!__stlxr(0, v3))
        goto LABEL_16;
    }
    __clrex();
  }
LABEL_16:
  result = *v3;
  if (*v3)
  {
LABEL_17:
    v11 = (unsigned int *)(result + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
    if (!v12)
    {
      result = 0;
      do
        v13 = __ldaxr(v11);
      while (__stlxr(v13 - 1, v11));
    }
  }
  return result;
}

CA::Render::GainMapLayer *CA::Render::GainMapLayer::GainMapLayer(CA::Render::GainMapLayer *this, CA::Render::Decoder *a2)
{
  unsigned int v4;

  *(_QWORD *)this = off_1E1598C30;
  *((_DWORD *)this + 2) = 1;
  *((_DWORD *)this + 3) = (CA::Render::Decoder::decode_int32(a2) << 8) | 0x13;
  ++dword_1ECDC7C74;
  *(_QWORD *)this = off_1E1596968;
  v4 = CA::Render::Decoder::decode_int8(a2);
  if (v4 >= 4)
  {
    CA::Render::Decoder::set_fatal_error(a2, "%s - enum %u out of range of %u", "decode_int8_enum", v4, 4);
    LOBYTE(v4) = 0;
  }
  *((_BYTE *)this + 16) = v4;
  return this;
}

CA::Render::MatchMoveAnimation *CA::Render::MatchMoveAnimation::MatchMoveAnimation(CA::Render::MatchMoveAnimation *this, CA::Render::Decoder *a2)
{
  CA::Render::MatchAnimation *matched;

  matched = CA::Render::MatchAnimation::MatchAnimation(this, a2);
  *((_BYTE *)matched + 12) = 31;
  ++dword_1ECDC7CA4;
  *(_QWORD *)matched = off_1E1598098;
  *((_QWORD *)this + 17) = CA::Render::Decoder::decode_object(a2, 56);
  return this;
}

uint64_t CA::Render::MatchMoveAnimation::validate(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;

  if (!*(_QWORD *)(a1 + 104))
    return 0;
  if (!*(_DWORD *)(a1 + 112))
    return 0;
  v1 = *(_QWORD *)(a1 + 120);
  if (!v1 || (v1 & 1) == 0 && !*(_DWORD *)v1)
    return 0;
  v2 = *(_QWORD *)(a1 + 136);
  if (!v2 || !*(_DWORD *)(v2 + 16))
    return 0;
  if ((v1 & 1) != 0)
  {
    v1 >>= 1;
  }
  else
  {
    if (!*(_DWORD *)v1)
    {
LABEL_14:
      *(_DWORD *)(a1 + 12) |= 0x4000u;
      return 1;
    }
    LODWORD(v1) = *(_DWORD *)(v1 + 4);
  }
  if ((_DWORD)v1 != 429)
    goto LABEL_14;
  return 1;
}

CA::Render::SecureIndicatorLayer *CA::Render::SecureIndicatorLayer::SecureIndicatorLayer(CA::Render::SecureIndicatorLayer *this, CA::Render::Decoder *a2)
{
  *(_QWORD *)this = off_1E1598C30;
  *((_DWORD *)this + 2) = 1;
  *((_DWORD *)this + 3) = (CA::Render::Decoder::decode_int32(a2) << 8) | 0x2D;
  ++dword_1ECDC7CDC;
  *(_QWORD *)this = off_1E1598340;
  *((_DWORD *)this + 4) = CA::Render::Decoder::decode_int32(a2);
  *((_WORD *)this + 10) = CA::Render::Decoder::decode_int16(a2);
  return this;
}

uint64_t CA::Render::GroupAnimation::validate(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 96);
  if (!v2 || !*(_DWORD *)(v2 + 16))
    return 1;
  v4 = 0;
  do
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 24 + 8 * v4) + 136))(*(_QWORD *)(v2 + 24 + 8 * v4), a2);
    if ((result & 1) == 0)
      break;
    ++v4;
  }
  while (v4 < *(unsigned int *)(v2 + 16));
  return result;
}

void CA::OGL::capture_backdrop(CA::OGL *a1, const CA::Bounds *a2)
{
  CA::OGL *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  os_unfair_lock_s *v10;
  uint64_t v11;
  os_unfair_lock_s *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  CA::Shape *v17;
  CA::Shape *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  malloc_zone_t *malloc_zone;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  float64x2_t *v35;
  int32x4_t v36;
  uint64_t v37;
  uint64_t v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  double *v45;
  double *v46;
  const double *v47;
  int32x4_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  int64x2_t v52;
  int64x2_t v53;
  int32x2_t v54;
  __int8 v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  double v61;
  double v62;
  float64x2_t v63;
  uint64_t v64;
  double v65;
  int64x2_t v66;
  int32x2_t v67;
  float32x2_t v68;
  int32x4_t v69;
  int32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  double *v73;
  uint64_t v74;
  const double *v75;
  int32x4_t v76;
  int64x2_t v77;
  int32x2_t v78;
  float64x2_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _DWORD *v85;
  double v86;
  const CA::Rect *v87;
  char *v88;
  unsigned int *v89;
  unsigned int v90;
  unsigned int v91;
  _DWORD *v92;
  unsigned int *v93;
  unsigned int *v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int *v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int *v100;
  unsigned int v101;
  unsigned int v102;
  CA::Transform *v103;
  uint64_t v104;
  CA::Mat4Impl *v105;
  uint64_t v106;
  const double *v107;
  int v108;
  double *v109;
  uint64_t v110;
  CA::OGL::Context *v111;
  float v112;
  unsigned int v113;
  float64x2_t v114;
  int8x16_t v115;
  int32x4_t v116;
  int32x4_t v117;
  int8x16_t v118;
  int v119;
  int v120;
  unsigned int v122;
  int v123;
  unint64_t v124;
  uint64_t PerfHud;
  int64x2_t v126;
  float64x2_t v127;
  int32x2_t v128;
  int8x16_t v129;
  const Rect *v130;
  int32x4_t v131;
  int v132;
  int64x2_t v133;
  int8x16_t v134;
  double v135;
  double v136;
  float64x2_t v137;
  float v138;
  double v139;
  float64_t v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _BOOL4 v145;
  int v146;
  const Rect *v147;
  CA::OGL::BackdropBuffer *v148;
  int v149;
  int v150;
  int v151;
  int v152;
  int v153;
  int32x2_t v154;
  int v155;
  uint64_t v156;
  int v157;
  int v158;
  uint64_t v159;
  int v160;
  int v161;
  int v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  _BOOL4 v173;
  uint64_t v174;
  float16x4_t v175;
  __int16 v176;
  __int16 v177;
  __int16 v178;
  uint64_t v179;
  float16x4_t v180;
  char v181;
  char v182;
  uint64_t v183;
  const CA::Bounds *v184;
  CA::Shape *v185;
  uint64_t *v186;
  CA::Shape *v187;
  char v188;
  int32x4_t v189;
  int32x4_t v190;
  int v191;
  int64x2_t v192;
  int8x16_t v193;
  double v194;
  double v195;
  double v196;
  double v197;
  float v198;
  double v199;
  const Rect *v200;
  float v201;
  double v202;
  const CA::Bounds *v203;
  const Rect *v204;
  const CA::Bounds *v205;
  CA::Shape *v206;
  const CA::Shape *v207;
  const CA::Shape *v208;
  const CA::Shape *v209;
  uint64_t v210;
  uint64_t v211;
  int v212;
  int v213;
  char v214;
  char v215;
  CA::OGL::Context *v216;
  uint64_t v217;
  float v218;
  uint64_t v219;
  BOOL v220;
  uint64_t v221;
  uint64_t v222;
  float v223;
  float v224;
  uint64_t v225;
  float v226;
  float v227;
  float v228;
  uint64_t v229;
  float v230;
  float v231;
  int32x2_t *v232;
  int v233;
  float v234;
  uint32x2_t v235;
  int32x2_t v236;
  uint32x2_t v237;
  __int128 v238;
  int32x2_t v239;
  uint32x2_t v240;
  uint64_t v241;
  unint64_t v242;
  int v243;
  float v244;
  float v245;
  float v246;
  int v247;
  float v248;
  int v249;
  int v250;
  float v251;
  float v252;
  float v253;
  float v254;
  float v255;
  float v256;
  float v257;
  int v258;
  float v259;
  float v260;
  float v261;
  uint64_t v262;
  uint64_t v263;
  unint64_t v264;
  int v265;
  float v266;
  uint64_t v267;
  double v268;
  double v269;
  uint64_t v270;
  int v271;
  float v272;
  uint64_t v273;
  double v274;
  uint64_t v275;
  float v276;
  uint64_t v277;
  double v278;
  float v279;
  uint64_t v280;
  float v281;
  uint64_t v282;
  uint64_t v283;
  NSObject *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  NSObject *v288;
  uint64_t v289;
  int v290;
  uint64_t v291;
  const char *v292;
  const char *v293;
  unint64_t v294;
  _DWORD *v295;
  int v296;
  int v297;
  int v298;
  double v299;
  unint64_t v300;
  uint64_t v301;
  int v302;
  float v303;
  double v304;
  float v305;
  int v306;
  int v307;
  float v308;
  float v309;
  float v310;
  float v311;
  int v312;
  float v313;
  uint64_t v314;
  double v315;
  int v316;
  double v317;
  double v318;
  double v319;
  float v320;
  float v321;
  float v322;
  uint64_t v323;
  uint64_t v324;
  float v325;
  float v326;
  float v327;
  uint64_t v328;
  uint64_t v329;
  int v330;
  uint64_t v331;
  uint64_t v332;
  int v333;
  int v334;
  __int32 v335;
  __int32 v336;
  float v337;
  uint64_t v338;
  float v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  float32x2_t v344;
  __int16 v345;
  uint64_t v346;
  BOOL v347;
  const CA::Bounds *v348;
  int v349;
  CA::Shape *v350;
  uint64_t v351;
  const int *v352;
  CA::Shape *v353;
  float32x2_t v354;
  CA::Shape **v355;
  const CA::Shape *v356;
  const int *v357;
  __int32 v358;
  int v359;
  int32x2_t v361;
  CA::Shape *v362;
  CA::Shape *v363;
  float64_t v364;
  CA::Shape *v365;
  const Rect *v366;
  int32x4_t v367;
  int32x4_t v368;
  int v369;
  int64x2_t v370;
  int64x2_t v371;
  int64x2_t v372;
  int8x16_t v373;
  int8x16_t v374;
  int32x2_t v375;
  int64x2_t v376;
  int8x16_t v377;
  float v378;
  double v379;
  BOOL v380;
  int8x16_t v381;
  int8x16_t v382;
  unint64_t v383;
  int8x16_t v384;
  float64x2_t v385;
  float64x2_t v386;
  int v387;
  int v388;
  int32x2_t v389;
  NSObject *v390;
  uint64_t v391;
  int v392;
  char v393;
  char v394;
  char v395;
  uint64_t v396;
  unsigned __int16 v397;
  unsigned __int16 v398;
  unsigned __int16 v399;
  int v400;
  double v401;
  int v402;
  CA::Shape *v403;
  unsigned int v404;
  CA::OGL::Context *v405;
  int v406;
  uint64_t v407;
  float64x2_t v408;
  os_unfair_lock_s *v409;
  double v410;
  double v411;
  double v412;
  double v413;
  float64x2_t v414;
  int v415;
  int32x4_t v416;
  int v417;
  uint64_t v418;
  float64x2_t v419;
  int8x16_t v420;
  CA::OGL::Context *v421;
  int32x4_t v422;
  int32x4_t v423;
  uint64_t v424;
  CA::OGL *v425;
  int8x16_t v426;
  int8x16_t v427;
  float64x2_t v428;
  float v429;
  int8x16_t v430;
  CA::Render::KeyValueArray *v431;
  CA::Render::KeyValueArray *v432[2];
  CA::Render::KeyValueArray *v433[2];
  CA::Render::KeyValueArray *v434[2];
  float v435;
  double v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  float64x2_t v441;
  float64x2_t v442;
  int32x4_t v443;
  __int128 v444;
  uint64_t v445;
  uint64_t v446;
  int32x4_t v447;
  char v448;
  uint64_t v449;
  _OWORD v450[2];
  int8x16_t v451;
  _OWORD v452[2];
  float64x2_t v453;
  float64x2_t v454;
  char v455;
  _BYTE buf[72];
  __int16 v457;
  int v458;
  __int16 v459;
  int v460;
  __int16 v461;
  int v462;
  __int16 v463;
  int v464;
  __int16 v465;
  double v466;
  float64x2_t v467;
  float64x2_t v468;
  uint64_t v469[3];
  uint64_t (**v470)(int, CA::Mat4Impl *);
  uint64_t v471;
  __int128 v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  __int128 v478;
  __int128 v479;
  __int128 v480;
  __int128 v481;
  __int128 v482;
  __int128 v483;
  __int128 v484;
  uint64_t v485;
  int8x16_t v486;
  __int128 v487;
  __int128 v488;
  __int128 v489;
  __int128 v490;
  __int128 v491;
  __int128 v492;
  __int128 v493;
  __int128 v494;
  uint64_t v495;
  uint64_t v496;
  float32x4x2_t v497;
  float64x2x2_t v498;
  float64x2x2_t v499;
  float64x2x2_t v500;
  float64x2x2_t v501;
  float64x2x2_t v502;
  float64x2x2_t v503;
  float64x2x2_t v504;

  v3 = a1;
  v496 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 232);
  if (BYTE5(xmmword_1ECDC6A70))
  {
    PerfHud = CA::OGL::GetPerfHud(a1);
    if (PerfHud)
      ++*(_QWORD *)(PerfHud + 456);
  }
  v6 = *(uint64_t **)(*((_QWORD *)a2 + 3) + 128);
  if (v6 && (v7 = *v6) != 0)
  {
    if (*(_BYTE *)(v7 + 12) == 3)
      v8 = v7;
    else
      v8 = 0;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(_QWORD *)(*((_QWORD *)a2 + 2) + 256);
  if (v9)
  {
    v10 = (os_unfair_lock_s *)(v9 + 36);
    os_unfair_lock_lock((os_unfair_lock_t)(v9 + 36));
    v11 = *(_QWORD *)(v9 + 40);
    if (!v11)
    {
LABEL_447:
      os_unfair_lock_unlock(v10);
      return;
    }
    v438 = v5;
    v12 = (os_unfair_lock_s *)(v11 + 40);
    os_unfair_lock_lock((os_unfair_lock_t)(v11 + 40));
    v13 = *(_DWORD *)(v8 + 12);
    if ((v13 & 0x1000) != 0)
    {
      v15 = *(_QWORD *)(v11 + 64);
      v14 = *(_QWORD *)(v11 + 72);
      if ((v13 & 0x400) == 0 && v14 - v15 == 168)
        goto LABEL_21;
    }
    else
    {
      v15 = *(_QWORD *)(v11 + 64);
      v14 = *(_QWORD *)(v11 + 72);
    }
    v437 = v8;
    if (v15 == v14)
      goto LABEL_446;
    v16 = *(_DWORD *)(*((_QWORD *)v3 + 1) + 248);
    while (*(_QWORD *)v15 != *(_QWORD *)(v9 + 24) || v16 && *(_DWORD *)(v15 + 164) != v16)
    {
      v15 += 168;
      if (v15 == v14)
        goto LABEL_446;
    }
    if (*(_BYTE *)(v15 + 160) && (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 184))(v4, 27))
    {
      v18 = *(CA::Shape **)(v11 + 520);
      if (v18)
      {
        CA::Shape::unref(v18);
        *(_QWORD *)(v11 + 520) = 0;
      }
      *(_DWORD *)(v11 + 12) |= 0x800u;
      goto LABEL_446;
    }
    *(_DWORD *)(v11 + 12) &= ~0x800u;
    v19 = *(_QWORD *)(v11 + 48);
    if (v19)
    {
      v20 = *(_QWORD *)(v19 + 8);
      v21 = v20 == v4 ? *(char **)(v11 + 48) : 0;
      if (v20 == v4)
        goto LABEL_40;
    }
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v21 = (char *)malloc_type_zone_malloc(malloc_zone, 0xE0uLL, 0x8BB15036uLL);
    if (v21)
    {
      v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 96))(v4);
      *((_QWORD *)v21 + 1) = v4;
      *((_QWORD *)v21 + 2) = v23;
      *(_QWORD *)v21 = off_1E1595050;
      *(_OWORD *)(v21 + 24) = 0u;
      *(_OWORD *)(v21 + 40) = 0u;
      *((_QWORD *)v21 + 7) = 0;
      v21[216] &= 0xF8u;
      v24 = *(char **)(v11 + 48);
      if (v24 != v21)
      {
        if (!v24)
          goto LABEL_39;
        goto LABEL_38;
      }
    }
    else
    {
      v24 = *(char **)(v11 + 48);
      if (v24)
      {
LABEL_38:
        (*(void (**)(char *))(*(_QWORD *)v24 + 8))(v24);
LABEL_39:
        *(_QWORD *)(v11 + 48) = v21;
      }
    }
LABEL_40:
    *((_QWORD *)v21 + 2) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 96))(v4);
    v25 = *((_QWORD *)v3 + 1);
    v26 = *(_DWORD *)(v25 + 248);
    v421 = (CA::OGL::Context *)v21;
    if (*((_DWORD *)v21 + 13) == v26)
    {
      v27 = *(_DWORD *)(v25 + 264);
      if (*((_DWORD *)v21 + 14) == v27)
        goto LABEL_446;
    }
    else
    {
      v27 = *(_DWORD *)(v25 + 264);
    }
    if (*(_DWORD *)(v11 + 436) == v26 && *(_DWORD *)(v11 + 440) == v27)
      goto LABEL_446;
    if (*(_DWORD *)(v11 + 432) != v26)
      goto LABEL_446;
    v29 = *(_QWORD *)(v11 + 64);
    v28 = *(_QWORD *)(v11 + 72);
    if (v28 == v29)
      goto LABEL_446;
    v30 = (v28 - v29) / 168;
    v31 = v30 - 1;
    v32 = 168 * v30 - 168;
    v33 = -1;
    do
    {
      if (*(_QWORD *)(v29 + v32) == *(_QWORD *)(v9 + 24))
        v33 = v31;
      --v31;
      v32 -= 168;
    }
    while (v31 != -1);
    if (v33 >= v30)
      goto LABEL_446;
    v409 = (os_unfair_lock_s *)(v9 + 36);
    v34 = 0;
    *(_DWORD *)(v11 + 436) = v26;
    *(_DWORD *)(v11 + 440) = v27;
    v35 = (float64x2_t *)(v29 + 168 * v33);
    *(float64x2_t *)(v11 + 448) = v35[1];
    *(float64x2_t *)(v11 + 464) = v35[2];
    v419 = v35[3];
    *(float64x2_t *)buf = v419;
    *(float64x2_t *)&buf[16] = v35[4];
    v36 = *(int32x4_t *)&buf[16];
    v37 = 112;
    v36.i32[0] = 2139095040;
    v416 = v36;
    v422 = v36;
    v426 = (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL);
    v430 = (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    v425 = v3;
    while (1)
    {
      v38 = v29 + v37;
      v39 = *(double *)(v29 + v37 - 96);
      v40 = *(double *)(v29 + v37 - 88);
      v41 = *(double *)(v29 + v37 - 80);
      v42 = *(double *)(v29 + v37 - 72);
      *(float *)v38 = v39;
      *(float *)(v38 + 4) = v40;
      v43 = v41 + v39;
      *(float *)(v38 + 8) = v43;
      *(float *)(v38 + 12) = v40;
      v44 = v42 + v40;
      *(float *)(v38 + 16) = v43;
      *(float *)(v38 + 20) = v44;
      *(float *)(v38 + 24) = v39;
      *(float *)(v38 + 28) = v44;
      if (v33 != v34)
        break;
LABEL_83:
      ++v34;
      v37 += 168;
      if (v34 >= 0xCF3CF3CF3CF3CF3DLL * ((v28 - v29) >> 3))
      {
        *(float64x2_t *)buf = v419;
        v80 = *(_QWORD *)(v11 + 560);
        v10 = v409;
        if (v80)
        {
          v81 = *(unsigned int *)(v80 + 16);
          if ((_DWORD)v81)
          {
            v82 = 0;
            v83 = v80 + 24;
            while (1)
            {
              v84 = *(_QWORD *)(v83 + 8 * v82);
              if (*(_DWORD *)(v84 + 24) == 242)
                break;
              if (v81 == ++v82)
                goto LABEL_113;
            }
            v85 = *(_DWORD **)(v84 + 40);
            v487 = 0u;
            v486 = 0u;
            CA::Render::KeyValueArray::get_rect_key((float64x2_t *)&v486, (CA::Render::KeyValueArray *)v85, (const CA::Rect *)0x117, (float64x2_t)0, (float64x2_t)0);
            v86 = *(double *)&v487;
            if (*(double *)&v487 >= *((double *)&v487 + 1))
              v86 = *((double *)&v487 + 1);
            if (v86 > 0.0)
            {
              v431 = (CA::Render::KeyValueArray *)CA::Render::Array::new_array((CA::Render::Array *)v85[4], v85 + 6, (CA::Render::Object *const *)1, v85[3] >> 8);
              v88 = CA::Render::Vector::new_rect((CA::Render::Vector *)buf, v87);
              CA::Render::KeyValueArray::set_key(v431, (const CA::Render::KeyValueArray *)0x117, (CA::Render::Object *)v88);
              v89 = (unsigned int *)(v88 + 8);
              do
              {
                v90 = __ldaxr(v89);
                v91 = v90 - 1;
              }
              while (__stlxr(v91, v89));
              if (!v91)
                (*(void (**)(char *))(*(_QWORD *)v88 + 16))(v88);
              v92 = CA::Render::Array::new_array((CA::Render::Array *)*(unsigned int *)(*(_QWORD *)(v11 + 560) + 16), (const void *)(*(_QWORD *)(v11 + 560) + 24), (CA::Render::Object *const *)1, *(_DWORD *)(*(_QWORD *)(v11 + 560) + 12) >> 8);
              v93 = *(unsigned int **)(v11 + 560);
              *(_QWORD *)(v11 + 560) = v92;
              if (v93)
              {
                v94 = v93 + 2;
                do
                {
                  v95 = __ldaxr(v94);
                  v96 = v95 - 1;
                }
                while (__stlxr(v96, v94));
                if (!v96)
                  (*(void (**)(unsigned int *))(*(_QWORD *)v93 + 16))(v93);
              }
              *(_QWORD *)(*(_QWORD *)(v11 + 560) + 8 * v82 + 24) = CA::Render::Filter::copy_with_inputs((CA::Render::Filter *)v84, v431);
              v97 = (unsigned int *)((char *)v431 + 8);
              do
              {
                v98 = __ldaxr(v97);
                v99 = v98 - 1;
              }
              while (__stlxr(v99, v97));
              if (!v99)
                (*(void (**)(CA::Render::KeyValueArray *))(*(_QWORD *)v431 + 16))(v431);
              v100 = (unsigned int *)(v84 + 8);
              do
              {
                v101 = __ldaxr(v100);
                v102 = v101 - 1;
              }
              while (__stlxr(v102, v100));
              if (!v102)
                (*(void (**)(uint64_t))(*(_QWORD *)v84 + 16))(v84);
            }
          }
        }
LABEL_113:
        v12 = (os_unfair_lock_s *)(v11 + 40);
        if ((*((_BYTE *)v421 + 216) & 4) != 0)
          goto LABEL_446;
        v103 = (CA::OGL::Context *)((char *)v421 + 64);
        CA::Transform::operator=((uint64_t)v421 + 64, *(_QWORD *)(v438 + 24));
        v104 = *((_QWORD *)a2 + 2);
        v105 = *(CA::Mat4Impl **)(v104 + 56);
        if (v105)
        {
          v495 = 0;
          v494 = 0u;
          v493 = 0u;
          v492 = 0u;
          v491 = 0u;
          v490 = 0u;
          v489 = 0u;
          v488 = 0u;
          v487 = 0u;
          v486 = 0u;
          CA::Transform::set((uint64_t)&v486, v105, 1);
          if ((v495 & 0x10) != 0)
          {
            *(_QWORD *)&v487 = 0;
            *(_QWORD *)&v489 = 0;
            *(_QWORD *)&v491 = 0x3FF0000000000000;
            *(_QWORD *)&v493 = 0;
          }
          CA::Transform::concat_left(v103, (float64x2_t *)&v486, v106, v107);
        }
        else
        {
          CA::Transform::translate(v103, *(double *)(v104 + 64), *(double *)(v104 + 72), 0.0);
        }
        if (*(_BYTE *)(v15 + 161))
          goto LABEL_446;
        v485 = 0;
        v484 = 0u;
        v483 = 0u;
        v482 = 0u;
        v481 = 0u;
        v494 = 0u;
        v493 = 0u;
        v492 = 0u;
        v491 = 0u;
        v490 = 0u;
        v489 = 0u;
        v488 = 0u;
        v487 = 0u;
        v486 = 0u;
        v455 = 0;
        if (v108)
        {
          v415 = v108;
          v110 = *((_QWORD *)v3 + 1);
          v111 = v421;
          *((_DWORD *)v421 + 13) = *(_DWORD *)(v110 + 248);
          *((_DWORD *)v421 + 14) = *(_DWORD *)(v110 + 264);
          v112 = fmax(fmin(*(float *)(v11 + 60), 1.0), 0.01);
          *((float *)v421 + 6) = v112;
          v113 = *(_DWORD *)(v4 + 440);
          if (v113)
            *((float *)v421 + 6) = 1.0 / (float)v113;
          v114 = *(float64x2_t *)(v11 + 464);
          v453 = *(float64x2_t *)(v11 + 448);
          v454 = v114;
          CA::Rect::apply_transform((int8x16_t *)&v453, v103, v109);
          if ((*(_WORD *)(v438 + 68) & 0x100) != 0)
          {
            v118.i64[0] = *(_QWORD *)(v110 + 192);
            v124 = *(_QWORD *)(v110 + 200);
            v123 = v124;
            if ((int)v124 <= SHIDWORD(v124))
              v123 = HIDWORD(v124);
          }
          else
          {
            v118 = v486;
            v119 = v486.i32[2];
            if (v486.i32[2] <= v486.i32[3])
              v120 = v486.i32[3];
            else
              v120 = v486.i32[2];
            if (v486.i32[2] >= v486.i32[3])
              v119 = v486.i32[3];
            if (v120 <= 1073741822 && v119 >= 1)
            {
              *(int32x2_t *)v115.i8 = vadd_s32(*(int32x2_t *)v486.i8, (int32x2_t)0x100000001);
              v116.i64[0] = v115.i64[0];
              v116.u64[1] = (unint64_t)vadd_s32((int32x2_t)*(_OWORD *)&vextq_s8(v486, v486, 8uLL), (int32x2_t)0x100000001);
              if (v116.i32[3] < 1 || v116.i32[2] < 1)
                v122 = -1;
              else
                v122 = 0;
              v118 = vbslq_s8((int8x16_t)vdupq_n_s32(v122), v115, (int8x16_t)v116);
            }
            v123 = v118.i32[2];
            if (v118.i32[2] <= v118.i32[3])
              v123 = v118.i32[3];
            v124 = vextq_s8(v118, v118, 8uLL).u64[0];
          }
          v116.i32[0] = v123;
          v117.i32[0] = 1073741822;
          *(int32x4_t *)v432 = v117;
          v126.i64[0] = v118.i32[0];
          v126.i64[1] = v118.i32[1];
          v427 = (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL);
          v127 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v116, v117), 0), v427, (int8x16_t)vcvtq_f64_s64(v126));
          v126.i64[0] = (int)v124;
          v126.i64[1] = SHIDWORD(v124);
          v128 = vdup_n_s32(v123 > 1073741822);
          v129 = (int8x16_t)vcvtq_f64_s64(v126);
          v126.i64[0] = v128.u32[0];
          v126.i64[1] = v128.u32[1];
          v452[0] = v453;
          v452[1] = v454;
          CA::BoundsImpl::intersect((uint64_t)&v453, v127, (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v126, 0x3FuLL)), (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL), v129));
          CA::OGL::Context::raster_round_rect((CA::OGL::Context *)buf, (const Rect *)v4, v453.f64);
          if (*(int *)&buf[8] <= *(int *)&buf[12])
            v132 = *(_DWORD *)&buf[12];
          else
            v132 = *(_DWORD *)&buf[8];
          v131.i32[0] = v132;
          v133.i64[0] = *(int *)buf;
          v133.i64[1] = *(int *)&buf[4];
          v134 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v131, *(int32x4_t *)v432), 0), v427, (int8x16_t)vcvtq_f64_s64(v133));
          v135 = 1.79769313e308;
          if (v132 <= 1073741822)
            v136 = (double)*(int *)&buf[8];
          else
            v136 = 1.79769313e308;
          if (v132 <= 1073741822)
            v135 = (double)*(int *)&buf[12];
          v414 = (float64x2_t)v134;
          v453 = (float64x2_t)v134;
          v454.f64[0] = v136;
          v454.f64[1] = v135;
          v137 = v454;
          v138 = *((float *)v421 + 6);
          v139 = v138;
          if (v138 != 1.0 && v454.f64[0] < 1.79769313e308)
          {
            v453.f64[0] = v139 * *(double *)v134.i64;
            v454.f64[0] = v454.f64[0] * v139;
          }
          v408 = v137;
          v140 = v137.f64[1];
          v411 = *(double *)&v134.i64[1];
          if (v138 != 1.0 && v137.f64[1] < 1.79769313e308)
          {
            v453.f64[1] = *(double *)&v134.i64[1] * v139;
            v454.f64[1] = v137.f64[1] * v139;
          }
          v451 = 0uLL;
          CA::Bounds::set_exterior((int32x4_t *)&v451, v130, v453, v454);
          memset(v450, 0, sizeof(v450));
          v449 = 0;
          v448 = 0;
          v142 = *((_QWORD *)a2 + 4);
          v143 = v142 & 0x2000013C0;
          v145 = (v142 & 0x20) == 0
              || (v144 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 128)) == 0
              || *(_QWORD *)(v144 + 80) == 0;
          v149 = CA::Render::BackdropGroup::has_consistent_background_color(*(CA::Render::BackdropGroup **)(v11 + 64), *(_QWORD *)(v11 + 72)) & v145;
          v417 = v149;
          if (v143)
            v149 = 0;
          v150 = v149 | v146;
          v151 = v150 & v141;
          *((_BYTE *)v421 + 216) = *((_BYTE *)v421 + 216) & 0xFE | v150 & v141;
          if (!v448)
            v150 = 0;
          v406 = v151;
          v402 = v150 & v151;
          if ((v150 & v151) == 1)
          {
            v152 = v451.i32[3];
            if (v451.i32[2] <= v451.i32[3])
              v153 = v451.i32[3];
            else
              v153 = v451.i32[2];
            if (v451.i32[2] < v451.i32[3])
              v152 = v451.i32[2];
            if (v153 <= 1073741822 && v152 >= 1)
            {
              v451 = (int8x16_t)vaddq_s32((int32x4_t)v451, (int32x4_t)xmmword_18474E100);
              v154 = vcgt_s32((int32x2_t)0x100000001, vrev64_s32((int32x2_t)*(_OWORD *)&vextq_s8(v451, v451, 8uLL)));
              if (((v154.i32[1] | v154.i32[0]) & 1) != 0)
                v451.i64[1] = 0;
            }
          }
          v155 = *(_DWORD *)(v437 + 12);
          v156 = v451.i64[1];
          v447 = (int32x4_t)v451;
          v401 = v140;
          *(int8x16_t *)v433 = v451;
          if ((*(_BYTE *)(v437 + 14) & 1) != 0)
          {
            CA::OGL::Context::raster_round_rect((CA::OGL::Context *)buf, (const Rect *)v4, (double *)v452);
            v368.i32[1] = *(_DWORD *)&buf[12];
            v369 = *(_DWORD *)&buf[12];
            v370.i64[0] = *(int *)buf;
            v370.i64[1] = *(int *)&buf[4];
            v371 = v370;
            v370.i64[0] = *(int *)&buf[8];
            v370.i64[1] = *(int *)&buf[12];
            v372 = v370;
            if (*(int *)&buf[8] > *(int *)&buf[12])
              v369 = *(_DWORD *)&buf[8];
            v368.i32[0] = v369;
            v367.i32[0] = 1073741822;
            v373 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v368, v367), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v371));
            v374 = (int8x16_t)vcvtq_f64_s64(v372);
            v375 = vdup_n_s32(v369 > 1073741822);
            v376.i64[0] = v375.u32[0];
            v376.i64[1] = v375.u32[1];
            v377 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v376, 0x3FuLL)), (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL), v374);
            v378 = *((float *)v421 + 6);
            v379 = v378;
            v380 = *(double *)v377.i64 >= 1.79769313e308 || v378 == 1.0;
            v381.i64[1] = v373.i64[1];
            v382.i64[1] = v377.i64[1];
            if (v380)
              v383 = 0;
            else
              v383 = -1;
            v384 = (int8x16_t)vdupq_n_s64(v383);
            *(double *)v381.i64 = v379 * *(double *)v373.i64;
            v385 = (float64x2_t)vbslq_s8(v384, v381, v373);
            *(double *)v382.i64 = v379 * *(double *)v377.i64;
            v386 = (float64x2_t)vbslq_s8(v384, v382, v377);
            if (v378 != 1.0 && v386.f64[1] < 1.79769313e308)
            {
              v385.f64[1] = vmuld_lane_f64(v379, v385, 1);
              v386.f64[1] = v386.f64[1] * v379;
            }
            CA::Bounds::set_exterior(&v447, v366, v385, v386);
            v10 = v409;
            v111 = v421;
            v3 = v425;
            v156 = (uint64_t)v433[1];
            if (v402)
            {
              v387 = v447.i32[3];
              if (v447.i32[2] <= v447.i32[3])
                v388 = v447.i32[3];
              else
                v388 = v447.i32[2];
              if (v447.i32[2] < v447.i32[3])
                v387 = v447.i32[2];
              if (v388 <= 1073741822 && v387 >= 1)
              {
                v447 = vaddq_s32(v447, (int32x4_t)xmmword_18474E100);
                v389 = vcgt_s32((int32x2_t)0x100000001, vrev64_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v447, (int8x16_t)v447, 8uLL)));
                if (((v389.i32[1] | v389.i32[0]) & 1) != 0)
                  v447.i64[1] = 0;
              }
            }
          }
          v157 = v156;
          v158 = HIDWORD(v156);
          v159 = *((_QWORD *)v111 + 4);
          if (v159 && *(_QWORD *)(v159 + 40) != v156)
          if (v157 >= v158)
            v160 = v158;
          else
            v160 = v157;
          if (v160 < 1)
            goto LABEL_445;
          v161 = v155 & 0x2000;
          v162 = BYTE7(xmmword_1ECDC6A90);
          v163 = *(_DWORD *)(*((_QWORD *)v3 + 1) + 268) & 0x38000;
          v164 = *((_QWORD *)v111 + 4);
          if (v164)
          {
            if ((v163 != 0) != (*(_BYTE *)(v11 + 569) != 0)
              || (v165 = *(_QWORD *)(v164 + 48), v165 != (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 96))(v4)))
            {
            }
          }
          if (v163)
            v166 = 1055;
          else
            v166 = 1039;
          v400 = v161;
          v167 = v166 | (8 * v161);
          v168 = *(_QWORD *)(v11 + 560);
          if (v168)
          {
            v169 = *(unsigned int *)(v168 + 16);
            if ((_DWORD)v169)
            {
              v170 = v168 + 24;
              v171 = 8 * v169;
              while (*(_DWORD *)(*(_QWORD *)v170 + 24) != 48)
              {
                v170 += 8;
                v171 -= 8;
                if (!v171)
                  goto LABEL_201;
              }
              v167 = v167 | 0x40040;
            }
          }
LABEL_201:
          v172 = *((_QWORD *)v111 + 4);
          if (v172)
          {
            if (*((_DWORD *)v111 + 12) == (_DWORD)v167)
            {
              *((_DWORD *)v111 + 12) = v167;
LABEL_206:
              if (*(_DWORD *)(v172 + 32) != LODWORD(v433[0])
                || (v173 = v162 != 0, *(_DWORD *)(v172 + 36) != HIDWORD(v433[0])))
              {
                *(CA::Render::KeyValueArray **)(v172 + 32) = v433[0];
                goto LABEL_211;
              }
              goto LABEL_212;
            }
            v172 = *((_QWORD *)v111 + 4);
            *((_DWORD *)v111 + 12) = v167;
            if (v172)
              goto LABEL_206;
          }
          else
          {
            *((_DWORD *)v111 + 12) = v167;
          }
          v174 = (*(uint64_t (**)(uint64_t, uint64_t, int32x4_t *, uint64_t))(*(_QWORD *)v4 + 656))(v4, 1, &v447, v167);
          *((_QWORD *)v111 + 4) = v174;
          if (!v174)
            goto LABEL_445;
          *(_BYTE *)(v11 + 569) = v163 != 0;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 704))(v4, v174, 16, 16);
          *(_OWORD *)(*((_QWORD *)v111 + 4) + 32) = *(_OWORD *)v433;
LABEL_211:
          v173 = 1;
LABEL_212:
          v175 = vcvt_f16_f32(*(float32x4_t *)(*((_QWORD *)a2 + 3) + 16));
          v176 = v175.i16[0];
          v177 = v175.i16[1];
          v178 = v175.i16[2];
          LODWORD(v179) = v175.u16[3];
          if (v417)
          {
            v180 = vcvt_f16_f32(vmulq_f32(vcvtq_f32_f16(*(float16x4_t *)(v438 + 32)), vcvtq_f32_f16(v175)));
            if (*(_QWORD *)(v438 + 32) == 0x3C003C003C003C00)
              v179 = v179;
            else
              v179 = v180.u16[3];
            if (*(_QWORD *)(v438 + 32) != 0x3C003C003C003C00)
            {
              v178 = v180.i16[2];
              v177 = v180.i16[1];
              v176 = v180.i16[0];
            }
            v398 = v176;
            v399 = v177;
            v397 = v178;
            v396 = v179;
            if (v173)
            {
              v181 = *((_BYTE *)v111 + 216) | 2;
              goto LABEL_228;
            }
            v480 = 0u;
            v478 = 0u;
            v479 = 0u;
            if ((*(_WORD *)(v438 + 68) & 0x100) == 0)
            {
LABEL_225:
              v182 = 0;
              if (*(_QWORD *)(v11 + 520))
                goto LABEL_226;
              v183 = 0;
              v10 = v409;
              v111 = v421;
LABEL_240:
              v185 = 0;
              v406 = 0;
              *((_BYTE *)v111 + 216) &= ~1u;
              v188 = 1;
              goto LABEL_241;
            }
LABEL_234:
            v182 = 0;
            v186 = (uint64_t *)(v11 + 520);
LABEL_235:
            v183 = *v186;
            v187 = *(CA::Shape **)(v11 + 480);
            if (!v187)
              goto LABEL_240;
            *(_QWORD *)&buf[8] = 0;
            *(_QWORD *)buf = 0;
            CA::Bounds::set_exterior((int32x4_t *)buf, v147, v414, v408);
            v185 = (CA::Shape *)CA::Shape::intersect(v187, (const CA::Bounds *)buf);
LABEL_237:
            if (!v185)
              goto LABEL_240;
            v188 = 0;
LABEL_241:
            if (v183)
            {
              if ((v183 & 1) != 0)
              {
                if (v183 == 1)
                  goto LABEL_441;
              }
              else if (*(_DWORD *)(v183 + 4) == 6)
              {
                goto LABEL_441;
              }
              v405 = (CA::OGL::Context *)v183;
              v395 = v188;
              v403 = v185;
              v446 = 0;
              v445 = 0;
              v189 = (int32x4_t)0x3C003C003C003C00uLL;
              v473 = 0x3C003C003C003C00;
              v475 = 0;
              v474 = 0;
              v476 = 0;
              v189.i8[1] = 0;
              v189.i8[3] = 0;
              v189.i8[5] = 0;
              v189.i8[7] = 0;
              v470 = (uint64_t (**)(int, CA::Mat4Impl *))v189.i64[0];
              v472 = v189.u64[0];
              v477 = 0x4013F800000;
              v471 = (uint64_t)&CA::Shape::_infinite_shape;
              v444 = 0uLL;
              if ((*(_BYTE *)(v438 + 69) & 1) != 0)
              {
                v446 = 1;
                v445 = 1;
                v443 = 0uLL;
                v469[2] = 0;
                v189.i32[0] = 1073741822;
                v423 = v189;
                v469[0] = v183;
                v469[1] = 0;
                v420 = (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL);
                while (CA::ShapeIterator::iterate(v469, (int *)&v444))
                {
                  if (SDWORD2(v444) <= SHIDWORD(v444))
                    v191 = HIDWORD(v444);
                  else
                    v191 = DWORD2(v444);
                  v190.i32[0] = v191;
                  v192.i64[0] = (int)v444;
                  v192.i64[1] = SDWORD1(v444);
                  v193 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v190, v423), 0), v420, (int8x16_t)vcvtq_f64_s64(v192));
                  v194 = (double)SDWORD2(v444);
                  v195 = (double)SHIDWORD(v444);
                  if (v191 > 1073741822)
                  {
                    v194 = 1.79769313e308;
                    v195 = 1.79769313e308;
                  }
                  *(int8x16_t *)buf = v193;
                  *(double *)&buf[16] = v194;
                  *(double *)&buf[24] = v195;
                  v196 = (float)-*(float *)&v449;
                  v197 = (float)-*((float *)&v449 + 1);
                  CA::BoundsImpl::inset((double *)buf, v196, v197);
                  v428 = *(float64x2_t *)&buf[16];
                  *(_OWORD *)v434 = *(_OWORD *)buf;
                  v467 = *(float64x2_t *)buf;
                  v468 = *(float64x2_t *)&buf[16];
                  CA::BoundsImpl::intersect((uint64_t)&v467, v414, v408);
                  v198 = *((float *)v111 + 6);
                  if (v198 != 1.0)
                  {
                    v199 = v198;
                    if (v468.f64[0] < 1.79769313e308)
                    {
                      v467.f64[0] = v467.f64[0] * v199;
                      v468.f64[0] = v468.f64[0] * v199;
                    }
                    if (v468.f64[1] < 1.79769313e308)
                    {
                      v467.f64[1] = v467.f64[1] * v199;
                      v468.f64[1] = v468.f64[1] * v199;
                    }
                  }
                  v441 = *(float64x2_t *)v434;
                  v442 = v428;
                  CA::BoundsImpl::inset(v441.f64, v196, v197);
                  CA::BoundsImpl::intersect((uint64_t)&v441, v414, v408);
                  v201 = *((float *)v111 + 6);
                  if (v201 != 1.0)
                  {
                    v202 = v201;
                    if (v442.f64[0] < 1.79769313e308)
                    {
                      v441.f64[0] = v441.f64[0] * v202;
                      v442.f64[0] = v442.f64[0] * v202;
                    }
                    if (v442.f64[1] < 1.79769313e308)
                    {
                      v441.f64[1] = v441.f64[1] * v202;
                      v442.f64[1] = v442.f64[1] * v202;
                    }
                  }
                  CA::Bounds::set_exterior(&v443, v200, v467, v468);
                  CA::shape_union((CA::Shape **)&v446, (CA::Shape **)&v443, v203);
                  CA::Bounds::set_exterior(&v443, v204, v441, v442);
                  CA::shape_union((CA::Shape **)&v445, (CA::Shape **)&v443, v205);
                }
                v190.i32[0] = *((_DWORD *)v111 + 6);
                v206 = (CA::Shape *)CA::Shape::scale_and_dilate(v403, *(float32x2_t *)v190.i8, *(float32_t *)v190.i32, 1u, 1u);
                CA::shape_intersect((CA *)&v446, (uint64_t)v206, v207);
                CA::shape_intersect((CA *)&v445, (uint64_t)v206, v208);
                CA::Shape::unref(v206);
              }
              v470 = (uint64_t (**)(int, CA::Mat4Impl *))CA::OGL::Context::set_gstate(v4, (uint64_t)&v470);
              CA::OGL::Context::push_surface(v4, *((_QWORD *)v111 + 4), (*(_WORD *)(*((_QWORD *)v111 + 4) + 75) & 0x80) == 0, 8, 0);
              v404 = *((float *)v111 + 6) != 1.0;
              v210 = *(_QWORD *)(v4 + 16);
              v392 = *(unsigned __int8 *)(v4 + 64);
              v393 = *(_BYTE *)(v210 + 481);
              v394 = *(_BYTE *)(v210 + 480);
              LOBYTE(v441.f64[0]) = 0;
              *(_BYTE *)(v210 + 481) = v393 & 0xFE;
              v211 = *(_QWORD *)(v4 + 176);
              if (!v211 || (*(_DWORD *)(*((_QWORD *)v425 + 1) + 1064) & 4) != 0 || v455)
              {
                *(_BYTE *)(v4 + 64) = 0;
              }
              else
              {
                *(_QWORD *)&buf[64] = 0;
                memset(&buf[32], 0, 32);
                *(_OWORD *)&buf[16] = 0u;
                *(_QWORD *)buf = v4;
                *(_QWORD *)&buf[8] = v183;
                *(_DWORD *)&buf[16] = *((_DWORD *)v111 + 6);
                *(float64x2_t *)&buf[24] = v414;
                *(float64x2_t *)&buf[40] = v408;
                *(_QWORD *)&buf[64] = &v441;
                v212 = LOBYTE(v441.f64[0]);
                *(_BYTE *)(v4 + 64) = 0;
                v347 = v212 == 0;
                v213 = v406;
                if (v347)
                  v213 = 0;
                if (v213 == 1 && !v448)
                  *((_BYTE *)v111 + 216) &= ~1u;
              }
              if ((v182 & 1) != 0)
              {
                v214 = *((_BYTE *)v111 + 216);
                if (!(((unint64_t)v397 << 32) | (v396 << 48) | ((unint64_t)v399 << 16) | v398))
                {
                  if (v417)
                    v215 = 2;
                  else
                    v215 = 0;
                  v214 = v214 & 0xFD | v215;
                  *((_BYTE *)v111 + 216) = v214;
                }
              }
              else
              {
                v214 = *((_BYTE *)v111 + 216);
              }
              if ((v214 & 2) == 0)
              {
                v398 = 0;
                v399 = 0;
                v397 = 0;
                v396 = 0;
              }
              if (v400)
              {
                *(_BYTE *)(*(_QWORD *)(v4 + 16) + 481) |= 2u;
                *(_DWORD *)(*(_QWORD *)(v4 + 16) + 352) = 1065353216;
              }
              v216 = v421;
              v217 = v183;
              if (v415 >= 1)
              {
                v418 = v4 + 818;
                *(_QWORD *)&v413 = *(_OWORD *)&vaddq_f64(v408, v414);
                v412 = v401 + v414.f64[1];
                v218 = 1.0;
                v219 = (v415 - 1);
                do
                {
                  if (LOBYTE(v441.f64[0]))
                    v220 = 1;
                  else
                    v220 = v219 < (v415 - 1);
                  if (v220)
                  {
                    *(_BYTE *)(*(_QWORD *)(v4 + 16) + 481) |= 1u;
                    *(_BYTE *)(*(_QWORD *)(v4 + 16) + 480) = 3;
                  }
                  v221 = *((_QWORD *)&v481 + v219);
                  if (v221)
                  {
                    CA::OGL::Context::bind_surface(v4, *((_QWORD *)&v481 + v219), 0, v404, v404, -16.0);
                  }
                  else
                  {
                    v222 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 1072))(v4);
                    if (v222)
                      (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v222 + 1168))(v222, 0, v404, v404);
                  }
                  v223 = *((float *)v216 + 6);
                  if (v223 >= 0.5)
                  {
                    *(_BYTE *)(*(_QWORD *)(v4 + 16) + 16) = 1;
                  }
                  else if (v223 >= 0.25)
                  {
                    v228 = sqrtf(fminf((float)(v223 * -4.0) + 2.0, v218));
                    v229 = *(_QWORD *)(v4 + 16);
                    v230 = *(float *)(v229 + 96);
                    v231 = *(float *)(v229 + 100);
                    *(float *)buf = -(float)(v228 * v230);
                    *(float *)&buf[4] = v231 * v228;
                    *(float *)&buf[8] = v230 * v228;
                    *(float *)&buf[12] = v231 * v228;
                    *(float *)&buf[16] = *(float *)buf;
                    *(float *)&buf[20] = -(float)(v228 * v231);
                    *(float *)&buf[24] = v230 * v228;
                    *(float *)&buf[28] = *(float *)&buf[20];
                    *(_BYTE *)(v229 + 16) = 26;
                    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v4 + 1000))(v4, 0, 2, 4, buf);
                    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)v4 + 1000))(v4, 1, 4, 1, &CA::OGL::capture_backdrop(CA::OGL::Renderer &,CA::OGL::Layer const*)::weight);
                  }
                  else
                  {
                    *(_BYTE *)(*(_QWORD *)(v4 + 16) + 16) = 28;
                    v224 = (float)(sqrtf(fminf((float)(*((float *)v216 + 6) * -8.0) + 2.0, v218)) * 0.5) + 0.5;
                    v225 = *(_QWORD *)(v4 + 16);
                    v226 = v224 * *(float *)(v225 + 96);
                    v227 = v224 * *(float *)(v225 + 100);
                    *(float *)buf = v226;
                    *(float *)&buf[4] = v227;
                    *(float *)&buf[8] = v226;
                    *(float *)&buf[12] = v227 * 3.0;
                    *(float *)&buf[16] = v226 * 3.0;
                    *(float *)&buf[20] = v227;
                    *(float *)&buf[24] = v226 * 3.0;
                    *(float *)&buf[28] = v227 * 3.0;
                    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v4 + 1000))(v4, 0, 2, 4, buf);
                  }
                  v232 = (int32x2_t *)(&v486 + v219);
                  v233 = v406;
                  if (v448)
                    v233 = 0;
                  if (v233 == 1)
                  {
                    v234 = *((float *)v216 + 6);
                    v440 = 0;
                  }
                  v407 = v219;
                  v424 = v221;
                  if (byte_1ECDC6A6A)
                  {
                    v287 = *(_QWORD *)(v11 + 480);
                    v467 = 0uLL;
                    CA::Shape::get_bounds(v287, (int *)&v467);
                    if (x_log_hook_p())
                    {
                      x_log_();
                    }
                    else
                    {
                      v288 = x_log_category_ogl;
                      if (os_log_type_enabled((os_log_t)x_log_category_ogl, OS_LOG_TYPE_DEFAULT))
                      {
                        v289 = *(_QWORD *)(v437 + 16);
                        v290 = *((_DWORD *)v421 + 13);
                        v291 = *(_QWORD *)(v11 + 32);
                        v292 = (const char *)(v291 + 28);
                        v347 = v291 == 0;
                        v293 = "";
                        if (!v347)
                          v293 = v292;
                        v294 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(_QWORD *)(v11 + 72) - *(_QWORD *)(v11 + 64)) >> 3);
                        v295 = (_DWORD *)*((_QWORD *)v421 + 4);
                        v297 = v295[8];
                        v296 = v295[9];
                        v298 = v295[10];
                        LODWORD(v295) = v295[11];
                        v299 = *((float *)v421 + 6);
                        *(_DWORD *)buf = 134221314;
                        *(_QWORD *)&buf[4] = v289;
                        *(_WORD *)&buf[12] = 1024;
                        *(_DWORD *)&buf[14] = v290;
                        *(_WORD *)&buf[18] = 2048;
                        *(_QWORD *)&buf[20] = v11;
                        *(_WORD *)&buf[28] = 2080;
                        *(_QWORD *)&buf[30] = v293;
                        *(_WORD *)&buf[38] = 2048;
                        *(_QWORD *)&buf[40] = v294;
                        *(_WORD *)&buf[48] = 1024;
                        *(_DWORD *)&buf[50] = LODWORD(v467.f64[0]);
                        *(_WORD *)&buf[54] = 1024;
                        *(_DWORD *)&buf[56] = HIDWORD(v467.f64[0]);
                        *(_WORD *)&buf[60] = 1024;
                        *(_DWORD *)&buf[62] = LODWORD(v467.f64[1]);
                        *(_WORD *)&buf[66] = 1024;
                        *(_DWORD *)&buf[68] = HIDWORD(v467.f64[1]);
                        v457 = 1024;
                        v458 = v297;
                        v459 = 1024;
                        v460 = v296;
                        v461 = 1024;
                        v462 = v298;
                        v463 = 1024;
                        v464 = (int)v295;
                        v465 = 2048;
                        v466 = v299;
                        _os_log_impl(&dword_184457000, v288, OS_LOG_TYPE_DEFAULT, "backdrop 0x%lx; update %d; group %p \"%s\" size %zu; [%d %d; %d x %d]:\n"
                          "  copying to surface [%d %d; %d x %d] scale %g:\n",
                          buf,
                          0x6Au);
                      }
                    }
                    v216 = v421;
                    v217 = (uint64_t)v405;
                    v218 = 1.0;
                  }
                  *(_QWORD *)(v4 + 128) = 0;
                  *(_QWORD *)(v4 + 96) = v418;
                  *(_OWORD *)(v4 + 104) = xmmword_18474E060;
                  v467 = (float64x2_t)(unint64_t)v217;
                  v468.f64[0] = 0.0;
                  while (CA::ShapeIterator::iterate((uint64_t *)&v467, (int *)&v444))
                  {
                    if (v221)
                    {
                      v235 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *(int32x2_t *)((char *)&v444 + 8));
                      if ((vpmax_u32(v235, v235).u32[0] & 0x80000000) == 0)
                      {
                        v236 = v232[1];
                        v237 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v236);
                        if ((vpmax_u32(v237, v237).u32[0] & 0x80000000) == 0)
                        {
                          *(int32x2_t *)&v238 = vmax_s32(*(int32x2_t *)&v444, *v232);
                          v239 = vsub_s32(vmin_s32(vadd_s32(*(int32x2_t *)&v444, *(int32x2_t *)((char *)&v444 + 8)), vadd_s32(*v232, v236)), *(int32x2_t *)&v238);
                          v240 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v239);
                          if ((vpmax_u32(v240, v240).u32[0] & 0x80000000) == 0)
                          {
                            *((int32x2_t *)&v238 + 1) = v239;
                            v444 = v238;
                            goto LABEL_315;
                          }
                        }
                        *((_QWORD *)&v444 + 1) = 0;
                      }
                    }
                    else
                    {
LABEL_315:
                      v241 = 4;
                      if (*(_DWORD *)(v4 + 92))
                        v241 = 6;
                      if ((unint64_t)(*(_QWORD *)(v4 + 128) + 4) > *(_QWORD *)(v4 + 136)
                        || (v242 = *(_QWORD *)(v4 + 112)) != 0 && *(_QWORD *)(v4 + 104) + v241 > v242)
                      {
                        *(_WORD *)(v4 + 816) |= 0x20u;
                        CA::OGL::Context::array_flush(v4);
                        *(_QWORD *)(v4 + 128) = 0;
                        *(_QWORD *)(v4 + 96) = v418;
                        *(_OWORD *)(v4 + 104) = xmmword_18474E060;
                      }
                      v243 = DWORD1(v444);
                      v244 = *((float *)v216 + 6);
                      v245 = v244 * (float)(int)v444;
                      v246 = v244 * (float)SDWORD1(v444);
                      v247 = HIDWORD(v444);
                      v248 = v244 * (float)(DWORD2(v444) + v444);
                      v249 = v444 - v232->i32[0];
                      v250 = HIDWORD(v444) + DWORD1(v444);
                      v251 = v244 * (float)(HIDWORD(v444) + DWORD1(v444));
                      v252 = v218 / v244;
                      v253 = floorf(v245);
                      v254 = floorf(v246);
                      v255 = ceilf(v248);
                      v256 = ceilf(v251);
                      v257 = (float)v249 + (float)((float)(v253 - v245) * v252);
                      v258 = DWORD1(v444) - v232->i32[1];
                      v259 = (float)v258 + (float)((float)(v254 - v246) * v252);
                      v260 = (float)(v249 + DWORD2(v444)) + (float)((float)(v255 - v248) * v252);
                      v261 = (float)(v258 + HIDWORD(v444)) + (float)((float)(v256 - v251) * v252);
                      v435 = v253;
                      CA::OGL::Context::array_rect((_QWORD *)v4, v253, v254, v255, v256);
                      v262 = *(_QWORD *)(v4 + 120) + 48 * *(_QWORD *)(v4 + 128);
                      *(float *)(v262 - 176) = v257;
                      *(float *)(v262 - 172) = v259;
                      *(float *)(v262 - 128) = v260;
                      *(float *)(v262 - 124) = v259;
                      *(float *)(v262 - 80) = v260;
                      *(float *)(v262 - 76) = v261;
                      v429 = v257;
                      *(float *)(v262 - 32) = v257;
                      *(float *)(v262 - 28) = v261;
                      if (byte_1ECDC6A6A)
                      {
                        if (x_log_hook_p())
                        {
                          x_log_();
                          v216 = v421;
                          v218 = 1.0;
                        }
                        else
                        {
                          v284 = x_log_category_ogl;
                          v216 = v421;
                          v218 = 1.0;
                          if (os_log_type_enabled((os_log_t)x_log_category_ogl, OS_LOG_TYPE_DEFAULT))
                          {
                            v285 = *(_QWORD *)(v437 + 16);
                            *(_DWORD *)buf = 134219008;
                            *(_QWORD *)&buf[4] = v285;
                            *(_WORD *)&buf[12] = 1024;
                            *(_DWORD *)&buf[14] = v444;
                            *(_WORD *)&buf[18] = 1024;
                            *(_DWORD *)&buf[20] = v243;
                            *(_WORD *)&buf[24] = 1024;
                            *(_DWORD *)&buf[26] = DWORD2(v444);
                            *(_WORD *)&buf[30] = 1024;
                            *(_DWORD *)&buf[32] = v247;
                            _os_log_impl(&dword_184457000, v284, OS_LOG_TYPE_DEFAULT, "backdrop 0x%lx rect [%d %d; %d x %d]\n",
                              buf,
                              0x24u);
                          }
                        }
                      }
                      v221 = v424;
                      if (*((float *)v216 + 6) != v218)
                      {
                        v263 = 32;
                        if (*(_DWORD *)(v4 + 92))
                          v263 = 48;
                        if ((unint64_t)(*(_QWORD *)(v4 + 128) + 32) > *(_QWORD *)(v4 + 136)
                          || (v264 = *(_QWORD *)(v4 + 112)) != 0 && *(_QWORD *)(v4 + 104) + v263 > v264)
                        {
                          *(_WORD *)(v4 + 816) |= 0x20u;
                          CA::OGL::Context::array_flush(v4);
                          *(_QWORD *)(v4 + 128) = 0;
                          *(_QWORD *)(v4 + 96) = v418;
                          *(_OWORD *)(v4 + 104) = xmmword_18474E060;
                        }
                        v265 = v444;
                        v410 = (double)(int)v444;
                        if (v414.f64[0] == (double)(int)v444)
                        {
                          CA::OGL::Context::array_rect((_QWORD *)v4, v435 + -1.0, v254, v435, v256);
                          v266 = v257 + 0.5;
                          v267 = *(_QWORD *)(v4 + 120) + 48 * *(_QWORD *)(v4 + 128);
                          *(float *)(v267 - 176) = v257 + 0.5;
                          *(float *)(v267 - 172) = v259;
                          *(float *)(v267 - 128) = v257 + 0.5;
                          *(float *)(v267 - 124) = v259;
                          *(float *)(v267 - 80) = v257 + 0.5;
                          *(float *)(v267 - 76) = v261;
                          *(float *)(v267 - 32) = v257 + 0.5;
                          *(float *)(v267 - 28) = v261;
                          v268 = (double)v243;
                          v269 = v414.f64[1];
                          if (v414.f64[1] != (double)v243)
                            goto LABEL_335;
                          CA::OGL::Context::array_rect((_QWORD *)v4, v435 + -1.0, v254 + -1.0, v435, v254);
                          v270 = *(_QWORD *)(v4 + 120) + 48 * *(_QWORD *)(v4 + 128);
                          *(float *)(v270 - 176) = v266;
                          *(float *)(v270 - 172) = v259 + 0.5;
                          *(float *)(v270 - 128) = v266;
                          *(float *)(v270 - 124) = v259 + 0.5;
                          *(float *)(v270 - 80) = v266;
                          *(float *)(v270 - 76) = v259 + 0.5;
                          *(float *)(v270 - 32) = v266;
                          *(float *)(v270 - 28) = v259 + 0.5;
                        }
                        else
                        {
                          v268 = (double)v243;
                        }
                        v269 = v414.f64[1];
LABEL_335:
                        v271 = DWORD2(v444);
                        if (v269 == v268)
                        {
                          CA::OGL::Context::array_rect((_QWORD *)v4, v435, v254 + -1.0, v255, v254);
                          v272 = v259 + 0.5;
                          v273 = *(_QWORD *)(v4 + 120) + 48 * *(_QWORD *)(v4 + 128);
                          *(float *)(v273 - 176) = v429;
                          *(float *)(v273 - 172) = v259 + 0.5;
                          *(float *)(v273 - 128) = v260;
                          *(float *)(v273 - 124) = v259 + 0.5;
                          *(float *)(v273 - 80) = v260;
                          *(float *)(v273 - 76) = v259 + 0.5;
                          *(float *)(v273 - 32) = v429;
                          *(float *)(v273 - 28) = v259 + 0.5;
                          v274 = (double)(v271 + v265);
                          if (v413 == v274)
                          {
                            CA::OGL::Context::array_rect((_QWORD *)v4, v255, v254 + -1.0, v255 + 1.0, v254);
                            v275 = *(_QWORD *)(v4 + 120) + 48 * *(_QWORD *)(v4 + 128);
                            *(float *)(v275 - 176) = v260 + -0.5;
                            *(float *)(v275 - 172) = v272;
                            *(float *)(v275 - 128) = v260 + -0.5;
                            *(float *)(v275 - 124) = v272;
                            *(float *)(v275 - 80) = v260 + -0.5;
                            *(float *)(v275 - 76) = v272;
                            *(float *)(v275 - 32) = v260 + -0.5;
                            *(float *)(v275 - 28) = v272;
                          }
                        }
                        else
                        {
                          v274 = (double)(DWORD2(v444) + v265);
                        }
                        v221 = v424;
                        if (v413 == v274)
                        {
                          CA::OGL::Context::array_rect((_QWORD *)v4, v255, v254, v255 + 1.0, v256);
                          v276 = v260 + -0.5;
                          v277 = *(_QWORD *)(v4 + 120) + 48 * *(_QWORD *)(v4 + 128);
                          *(float *)(v277 - 176) = v260 + -0.5;
                          *(float *)(v277 - 172) = v259;
                          *(float *)(v277 - 128) = v260 + -0.5;
                          *(float *)(v277 - 124) = v259;
                          *(float *)(v277 - 80) = v260 + -0.5;
                          *(float *)(v277 - 76) = v261;
                          *(float *)(v277 - 32) = v260 + -0.5;
                          *(float *)(v277 - 28) = v261;
                          v278 = (double)v250;
                          if (v412 == (double)v250)
                          {
                            CA::OGL::Context::array_rect((_QWORD *)v4, v255, v256, v255 + 1.0, v256 + 1.0);
                            v279 = -0.5;
                            v280 = *(_QWORD *)(v4 + 120) + 48 * *(_QWORD *)(v4 + 128);
                            *(float *)(v280 - 176) = v276;
                            *(float *)(v280 - 172) = v261 + -0.5;
                            *(float *)(v280 - 128) = v276;
                            *(float *)(v280 - 124) = v261 + -0.5;
                            *(float *)(v280 - 80) = v276;
                            *(float *)(v280 - 76) = v261 + -0.5;
                            *(float *)(v280 - 32) = v276;
                            *(float *)(v280 - 28) = v261 + -0.5;
                          }
                          else
                          {
                            v279 = -0.5;
                          }
                        }
                        else
                        {
                          v279 = -0.5;
                          v278 = (double)v250;
                        }
                        v218 = 1.0;
                        if (v412 == v278)
                        {
                          CA::OGL::Context::array_rect((_QWORD *)v4, v435, v256, v255, v256 + 1.0);
                          v281 = v261 + v279;
                          v282 = *(_QWORD *)(v4 + 120) + 48 * *(_QWORD *)(v4 + 128);
                          *(float *)(v282 - 176) = v429;
                          *(float *)(v282 - 172) = v261 + v279;
                          *(float *)(v282 - 128) = v260;
                          *(float *)(v282 - 124) = v261 + v279;
                          *(float *)(v282 - 80) = v260;
                          *(float *)(v282 - 76) = v261 + v279;
                          *(float *)(v282 - 32) = v429;
                          *(float *)(v282 - 28) = v261 + v279;
                          if (v414.f64[0] == v410)
                          {
                            CA::OGL::Context::array_rect((_QWORD *)v4, v435 + -1.0, v256, v435, v256 + 1.0);
                            v283 = *(_QWORD *)(v4 + 120) + 48 * *(_QWORD *)(v4 + 128);
                            *(float *)(v283 - 176) = v429 + 0.5;
                            *(float *)(v283 - 172) = v281;
                            *(float *)(v283 - 128) = v429 + 0.5;
                            *(float *)(v283 - 124) = v281;
                            *(float *)(v283 - 80) = v429 + 0.5;
                            *(float *)(v283 - 76) = v281;
                            *(float *)(v283 - 32) = v429 + 0.5;
                            *(float *)(v283 - 28) = v281;
                          }
                        }
                      }
                    }
                  }
                  CA::OGL::Context::array_flush(v4);
                  if (v221)
                  {
                    CA::OGL::Context::unbind_surface((_QWORD *)v4, v221, 0);
                  }
                  else
                  {
                    v286 = *(_QWORD *)(v4 + 16);
                    *(_WORD *)(v286 + 144) = 0;
                    *(_QWORD *)(v286 + 176) = 0;
                  }
                  v219 = v407 - 1;
                  v217 = (uint64_t)v405;
                }
                while (v407 > 0);
              }
              v300 = ((unint64_t)v397 << 32) | (v396 << 48) | ((unint64_t)v399 << 16) | v398;
              v301 = *(_QWORD *)(v4 + 16);
              if (v300)
              {
                *(_BYTE *)(v301 + 16) = 0;
                *(_BYTE *)(*(_QWORD *)(v4 + 16) + 481) |= 1u;
                *(_BYTE *)(*(_QWORD *)(v4 + 16) + 480) = 3;
                v302 = v406;
                if (v448)
                  v302 = 0;
                if (v302 == 1)
                {
                  v303 = *((float *)v421 + 6);
                  *(_QWORD *)&buf[8] = 0;
                  *(_QWORD *)buf = 0;
                  LOWORD(v439) = v398;
                  WORD1(v439) = v399;
                  WORD2(v439) = v397;
                  HIWORD(v439) = v396;
                }
                *(_QWORD *)(v4 + 128) = 0;
                *(_QWORD *)(v4 + 96) = v4 + 818;
                *(_OWORD *)(v4 + 104) = xmmword_18474E060;
                *(_QWORD *)&buf[16] = 0;
                *(_QWORD *)buf = v217;
                *(_QWORD *)&buf[8] = 0;
                *(_QWORD *)&v436 = *(_OWORD *)&vaddq_f64(v408, v414);
                v304 = v401 + v414.f64[1];
                v305 = 1.0;
                while (CA::ShapeIterator::iterate((uint64_t *)buf, (int *)&v444))
                {
                  v306 = DWORD1(v444);
                  v307 = DWORD2(v444);
                  v308 = *((float *)v421 + 6);
                  v309 = floorf(v308 * (float)(int)v444);
                  v310 = floorf(v308 * (float)SDWORD1(v444));
                  v311 = ceilf(v308 * (float)(DWORD2(v444) + v444));
                  v312 = HIDWORD(v444) + DWORD1(v444);
                  v313 = ceilf(v308 * (float)(HIDWORD(v444) + DWORD1(v444)));
                  CA::OGL::Context::array_check((CA::OGL::Context *)v4, 1);
                  CA::OGL::Context::array_rect((_QWORD *)v4, v309, v310, v311, v313);
                  v314 = *(_QWORD *)(v4 + 120) + 48 * *(_QWORD *)(v4 + 128);
                  *(_QWORD *)(v314 - 160) = v300;
                  *(_QWORD *)(v314 - 112) = v300;
                  *(_QWORD *)(v314 - 64) = v300;
                  *(_QWORD *)(v314 - 16) = v300;
                  if (*((float *)v421 + 6) != v305)
                  {
                    v315 = v304;
                    v316 = v444;
                    v317 = (double)(int)v444;
                    v318 = (double)v306;
                    v319 = (double)v312;
                    CA::OGL::Context::array_check((CA::OGL::Context *)v4, 4);
                    if (v414.f64[0] == v317)
                    {
                      v320 = 1.0;
                      if (v414.f64[1] == v318)
                        v321 = 1.0;
                      else
                        v321 = 0.0;
                      v322 = v310 - v321;
                      if (v315 != v319)
                        v320 = 0.0;
                      CA::OGL::Context::array_rect((_QWORD *)v4, v309 + -1.0, v322, v309, v313 + v320);
                      v323 = *(_QWORD *)(v4 + 120) + 48 * *(_QWORD *)(v4 + 128);
                      *(_QWORD *)(v323 - 160) = v300;
                      *(_QWORD *)(v323 - 112) = v300;
                      *(_QWORD *)(v323 - 64) = v300;
                      *(_QWORD *)(v323 - 16) = v300;
                    }
                    if (v411 == v318)
                    {
                      CA::OGL::Context::array_rect((_QWORD *)v4, v309, v310 + -1.0, v311, v310);
                      v324 = *(_QWORD *)(v4 + 120) + 48 * *(_QWORD *)(v4 + 128);
                      *(_QWORD *)(v324 - 160) = v300;
                      *(_QWORD *)(v324 - 112) = v300;
                      *(_QWORD *)(v324 - 64) = v300;
                      *(_QWORD *)(v324 - 16) = v300;
                    }
                    v304 = v315;
                    v305 = 1.0;
                    if (v436 == (double)(v307 + v316))
                    {
                      if (v414.f64[1] == v318)
                        v325 = 1.0;
                      else
                        v325 = 0.0;
                      v326 = v310 - v325;
                      if (v304 == v319)
                        v327 = 1.0;
                      else
                        v327 = 0.0;
                      CA::OGL::Context::array_rect((_QWORD *)v4, v311, v326, v311 + 1.0, v313 + v327);
                      v328 = *(_QWORD *)(v4 + 120) + 48 * *(_QWORD *)(v4 + 128);
                      *(_QWORD *)(v328 - 160) = v300;
                      *(_QWORD *)(v328 - 112) = v300;
                      *(_QWORD *)(v328 - 64) = v300;
                      *(_QWORD *)(v328 - 16) = v300;
                    }
                    if (v304 == v319)
                    {
                      CA::OGL::Context::array_rect((_QWORD *)v4, v309, v313, v311, v313 + 1.0);
                      v329 = *(_QWORD *)(v4 + 120) + 48 * *(_QWORD *)(v4 + 128);
                      *(_QWORD *)(v329 - 160) = v300;
                      *(_QWORD *)(v329 - 112) = v300;
                      *(_QWORD *)(v329 - 64) = v300;
                      *(_QWORD *)(v329 - 16) = v300;
                    }
                  }
                }
                CA::OGL::Context::array_flush(v4);
                v301 = *(_QWORD *)(v4 + 16);
              }
              *(_BYTE *)(v301 + 481) &= ~1u;
              if (v400)
                *(_BYTE *)(*(_QWORD *)(v4 + 16) + 481) &= ~2u;
              v330 = v406;
              if (!v448)
                v330 = 0;
              if (v330 == 1)
              if ((*(_WORD *)(v438 + 68) & 0x100) != 0 && *(_QWORD *)(v11 + 528))
              {
                *(_QWORD *)(v4 + 128) = 0;
                *(_QWORD *)(v4 + 96) = v4 + 818;
                *(_OWORD *)(v4 + 104) = xmmword_18474E060;
                *(_BYTE *)(*(_QWORD *)(v4 + 16) + 16) = 0;
                v331 = *(_QWORD *)(v11 + 528);
                *(_QWORD *)&buf[16] = 0;
                *(_QWORD *)buf = v331;
                *(_QWORD *)&buf[8] = 0;
                while (CA::ShapeIterator::iterate((uint64_t *)buf, (int *)&v444))
                {
                  CA::OGL::Context::array_check((CA::OGL::Context *)v4, 1);
                  CA::OGL::Context::array_rect((_QWORD *)v4, *((float *)v421 + 6) * (float)(int)v444, *((float *)v421 + 6) * (float)SDWORD1(v444), *((float *)v421 + 6) * (float)(DWORD2(v444) + v444), *((float *)v421 + 6) * (float)(HIDWORD(v444) + DWORD1(v444)));
                  v332 = *(_QWORD *)(v4 + 120) + 48 * *(_QWORD *)(v4 + 128);
                  *(_QWORD *)(v332 - 160) = 0;
                  *(_QWORD *)(v332 - 112) = 0;
                  *(_QWORD *)(v332 - 64) = 0;
                  *(_QWORD *)(v332 - 16) = 0;
                }
                CA::OGL::Context::array_flush(v4);
              }
              if (v402)
              {
                v333 = v451.i32[0];
                v334 = v451.i32[1];
                v335 = v451.i32[2];
                v336 = v451.i32[3];
                *(_BYTE *)(*(_QWORD *)(v4 + 16) + 16) = 0;
                *(_QWORD *)(v4 + 128) = 0;
                *(_QWORD *)(v4 + 96) = v4 + 818;
                *(_OWORD *)(v4 + 104) = xmmword_18474E060;
                CA::OGL::Context::array_check((CA::OGL::Context *)v4, 4);
                v337 = (float)(v336 + v334);
                CA::OGL::Context::array_rect((_QWORD *)v4, (float)v333, (float)v334, (float)v333 + 1.0, v337);
                v338 = *(_QWORD *)(v4 + 120) + 48 * *(_QWORD *)(v4 + 128);
                *(_QWORD *)(v338 - 160) = 0;
                *(_QWORD *)(v338 - 112) = 0;
                *(_QWORD *)(v338 - 64) = 0;
                *(_QWORD *)(v338 - 16) = 0;
                v339 = (float)(v335 + v333);
                CA::OGL::Context::array_rect((_QWORD *)v4, v339 + -1.0, (float)v334, v339, v337);
                v340 = *(_QWORD *)(v4 + 120) + 48 * *(_QWORD *)(v4 + 128);
                *(_QWORD *)(v340 - 160) = 0;
                *(_QWORD *)(v340 - 112) = 0;
                *(_QWORD *)(v340 - 64) = 0;
                *(_QWORD *)(v340 - 16) = 0;
                CA::OGL::Context::array_rect((_QWORD *)v4, (float)v333, (float)v334, v339, (float)v334 + 1.0);
                v341 = *(_QWORD *)(v4 + 120) + 48 * *(_QWORD *)(v4 + 128);
                *(_QWORD *)(v341 - 160) = 0;
                *(_QWORD *)(v341 - 112) = 0;
                *(_QWORD *)(v341 - 64) = 0;
                *(_QWORD *)(v341 - 16) = 0;
                CA::OGL::Context::array_rect((_QWORD *)v4, (float)v333, v337 + -1.0, v339, v337);
                v342 = *(_QWORD *)(v4 + 120) + 48 * *(_QWORD *)(v4 + 128);
                *(_QWORD *)(v342 - 160) = 0;
                *(_QWORD *)(v342 - 112) = 0;
                *(_QWORD *)(v342 - 64) = 0;
                *(_QWORD *)(v342 - 16) = 0;
                CA::OGL::Context::array_flush(v4);
              }
              if (byte_1ECDC6A6A)
              {
                if (x_log_hook_p())
                {
                  x_log_();
                }
                else
                {
                  v390 = x_log_category_ogl;
                  if (os_log_type_enabled((os_log_t)x_log_category_ogl, OS_LOG_TYPE_DEFAULT))
                  {
                    v391 = *(_QWORD *)(v437 + 16);
                    *(_DWORD *)buf = 134217984;
                    *(_QWORD *)&buf[4] = v391;
                    _os_log_impl(&dword_184457000, v390, OS_LOG_TYPE_DEFAULT, "backdrop 0x%lx complete\n", buf, 0xCu);
                  }
                }
              }
              if (v392)
                *(_BYTE *)(v4 + 64) = 1;
              v343 = *(_QWORD *)(v4 + 16);
              *(_BYTE *)(v343 + 480) = v394;
              *(_BYTE *)(v343 + 481) = *(_BYTE *)(v343 + 481) & 0xFE | v393 & 1;
              *(_BYTE *)(*(_QWORD *)(v4 + 16) + 16) = 0;
              CA::OGL::Context::pop_surface((CA::OGL::Context *)v4);
              CA::OGL::Context::set_gstate(v4, **(_QWORD **)(v4 + 232));
              v345 = 0;
              v346 = (uint64_t)v421;
              v347 = *((float *)v421 + 6) == 1.0 && v455 == 0;
              if (v347)
                v345 = ~(*(_WORD *)(v4 + 816) << 10) & 0x800;
              *(_WORD *)(*((_QWORD *)v421 + 4) + 75) = *(_WORD *)(*((_QWORD *)v421 + 4) + 75) & 0xF7FF | v345;
              v467.f64[0] = 0.0;
              v344.i32[0] = *((_DWORD *)v421 + 6);
              *(_QWORD *)&v467.f64[0] = CA::Shape::scale_and_dilate(v405, v344, v344.f32[0], 0, 0);
              v349 = v406;
              if (!v448)
                v349 = 0;
              if (v349 == 1)
              {
                v350 = (CA::Shape *)CA::Shape::dilate((uint64_t)v405, (const CA::Bounds *)(int)*(float *)&v449, (int)*((float *)&v449 + 1));
                v353 = (CA::Shape *)CA::Shape::subtract(v350, v403, v351, v352);
                v354.i32[0] = *((_DWORD *)v421 + 6);
                v355 = (CA::Shape **)CA::Shape::scale_and_dilate(v353, v354, v354.f32[0], 0, 0);
                CA::shape_subtract((CA::Shape **)&v467, v355, v356, v357);
                if (v355)
                  CA::Shape::unref((CA::Shape *)v355);
                if (v353)
                  CA::Shape::unref(v353);
                v346 = (uint64_t)v421;
                if (v350)
                  CA::Shape::unref(v350);
              }
              if (v402)
              {
                *(int8x16_t *)buf = v451;
                v358 = v451.i32[2];
                if (v451.i32[2] <= v451.i32[3])
                  v359 = v451.i32[3];
                else
                  v359 = v451.i32[2];
                if (v451.i32[2] >= v451.i32[3])
                  v358 = v451.i32[3];
                if (v359 <= 1073741822 && v358 >= 1)
                {
                  *(int32x4_t *)buf = vaddq_s32((int32x4_t)v451, (int32x4_t)xmmword_18474E7D0);
                  v361 = vcgt_s32((int32x2_t)0x100000001, vrev64_s32((int32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)buf, *(int8x16_t *)buf, 8uLL)));
                  if (((v361.i32[1] | v361.i32[0]) & 1) != 0)
                    *(_QWORD *)&buf[8] = 0;
                }
                CA::shape_intersect((CA::Shape **)&v467, (CA::Shape **)buf, v348);
                v346 = (uint64_t)v421;
              }
              v362 = (CA::Shape *)v446;
              v363 = (CA::Shape *)v445;
              v364 = v467.f64[0];
              CA::Shape::unref(*(CA::Shape **)&v364);
              if (v362)
                CA::Shape::unref(v362);
              if (v363)
                CA::Shape::unref(v363);
              ++*((_DWORD *)v421 + 15);
              v10 = v409;
              v185 = v403;
              v188 = v395;
            }
LABEL_441:
            if ((v188 & 1) == 0)
              CA::Shape::unref(v185);
            v365 = *(CA::Shape **)(v11 + 520);
            if (v365)
            {
              CA::Shape::unref(v365);
              *(_QWORD *)(v11 + 520) = 0;
            }
LABEL_445:
            v12 = (os_unfair_lock_s *)(v11 + 40);
LABEL_446:
            os_unfair_lock_unlock(v12);
            goto LABEL_447;
          }
          v398 = v175.i16[0];
          v399 = v175.u16[1];
          v397 = v175.u16[2];
          v396 = v175.u16[3];
          if ((*((_BYTE *)v111 + 216) & 2) != 0)
          {
            v181 = *((_BYTE *)v111 + 216) & 0xFD;
LABEL_228:
            *((_BYTE *)v111 + 216) = v181;
            v480 = 0u;
            v478 = 0u;
            v479 = 0u;
            if ((*(_BYTE *)(v438 + 69) & 1) == 0)
            {
              v182 = 1;
LABEL_230:
              *(_QWORD *)&buf[8] = 0;
              *(_QWORD *)buf = 0;
              CA::Bounds::set_exterior((int32x4_t *)buf, v147, v414, v408);
              v183 = (uint64_t)&v478;
              CA::Shape::operator=((uint64_t)&v478, buf);
              v185 = (CA::Shape *)CA::Shape::new_shape((CA::Shape *)buf, v184);
              goto LABEL_237;
            }
          }
          else
          {
            v480 = 0u;
            v478 = 0u;
            v479 = 0u;
            if ((*(_WORD *)(v438 + 68) & 0x100) == 0)
            {
              if (!v173)
                goto LABEL_225;
              v182 = 1;
LABEL_226:
              v10 = v409;
              v111 = v421;
              goto LABEL_230;
            }
            v10 = v409;
            v111 = v421;
            if (!v173)
              goto LABEL_234;
          }
          v186 = (uint64_t *)(v11 + 480);
          v182 = 1;
          goto LABEL_235;
        }
        if (*((_QWORD *)v421 + 4))
        {
          *((_DWORD *)v421 + 13) = 0;
          ++*((_DWORD *)v421 + 15);
          *((_QWORD *)v421 + 3) = 0;
        }
LABEL_21:
        v17 = *(CA::Shape **)(v11 + 520);
        if (v17)
        {
          CA::Shape::unref(v17);
          *(_QWORD *)(v11 + 520) = 0;
        }
        goto LABEL_446;
      }
    }
    v489 = 0u;
    v488 = 0u;
    v487 = 0u;
    v486 = 0u;
    v45 = (double *)&v486;
    v46 = (double *)&v488;
    v497 = vld2q_f32((const float *)v38);
    v500.val[0] = vcvt_hight_f64_f32(v497.val[0]);
    v504.val[0] = vcvtq_f64_f32(*(float32x2_t *)v497.val[0].f32);
    v504.val[1] = vcvtq_f64_f32(*(float32x2_t *)v497.val[1].f32);
    vst2q_f64(v45, v504);
    v500.val[1] = vcvt_hight_f64_f32(v497.val[1]);
    vst2q_f64(v46, v500);
    *(_QWORD *)&v481 = off_1E15997E8;
    *((_QWORD *)&v481 + 1) = 4;
    *(_QWORD *)&v482 = &v486;
    if (0xCF3CF3CF3CF3CF3DLL * ((v28 - v29) >> 3) <= v33)
      goto LABEL_231;
    CA::Render::LayerNode::MapGeometry::map((uint64_t)&v481, *(CA::Render::LayerNode **)(v38 - 104), *(CA::Render::LayerNode **)(v29 + 168 * v33 + 8));
    v47 = (const double *)&v486;
    v498 = vld2q_f64(v47);
    v47 += 4;
    v501 = vld2q_f64(v47);
    v48 = (int32x4_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v498.val[0]), v501.val[0]);
    v498.val[0] = (float64x2_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v498.val[1]), v501.val[1]);
    v498.val[1] = (float64x2_t)vzip1q_s32(v48, (int32x4_t)v498.val[0]);
    v498.val[0] = (float64x2_t)vzip2q_s32(v48, (int32x4_t)v498.val[0]);
    *(float64x2_t *)v38 = v498.val[1];
    *(float64x2_t *)(v38 + 16) = v498.val[0];
    *(int8x8_t *)&v501.val[1].f64[0] = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)&v498.val[1].f64[1], *(float32x2_t *)&v498.val[1].f64[0]), *(int8x8_t *)&v498.val[1].f64[0], *(int8x8_t *)&v498.val[1].f64[1]);
    *(int8x8_t *)&v498.val[1].f64[0] = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)&v498.val[1].f64[0], *(float32x2_t *)&v498.val[1].f64[1]), *(int8x8_t *)&v498.val[1].f64[0], *(int8x8_t *)&v498.val[1].f64[1]);
    *(int8x8_t *)v48.i8 = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)&v498.val[0].f64[1], *(float32x2_t *)&v498.val[0].f64[0]), *(int8x8_t *)&v498.val[0].f64[0], *(int8x8_t *)&v498.val[0].f64[1]);
    *(int8x8_t *)&v498.val[0].f64[0] = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)&v498.val[0].f64[0], *(float32x2_t *)&v498.val[0].f64[1]), *(int8x8_t *)&v498.val[0].f64[0], *(int8x8_t *)&v498.val[0].f64[1]);
    *(int8x8_t *)&v501.val[0].f64[0] = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v48.i8, *(float32x2_t *)&v501.val[1].f64[0]), *(int8x8_t *)&v501.val[1].f64[0], *(int8x8_t *)v48.i8);
    *(float32x2_t *)&v498.val[0].f64[0] = vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)&v498.val[1].f64[0], *(float32x2_t *)&v498.val[0].f64[0]), *(int8x8_t *)&v498.val[1].f64[0], *(int8x8_t *)&v498.val[0].f64[0]), *(float32x2_t *)&v501.val[0].f64[0]);
    LODWORD(v498.val[1].f64[0]) = COERCE_UNSIGNED_INT(vaddv_f32(*(float32x2_t *)&v498.val[0].f64[0])) & 0x7FFFFFFF;
    v501.val[1] = (float64x2_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v422, (int32x4_t)v498.val[1]), 0);
    v49 = (float64x2_t)vbslq_s8((int8x16_t)v501.val[1], (int8x16_t)vcvtq_f64_f32(*(float32x2_t *)&v498.val[0].f64[0]), v430);
    v50 = (float64x2_t)vbslq_s8((int8x16_t)v501.val[1], (int8x16_t)vcvtq_f64_f32(*(float32x2_t *)&v501.val[0].f64[0]), v426);
    v51 = *(float64x2_t *)(v11 + 464);
    v52 = vclezq_f64(v51);
    v53 = vclezq_f64(v49);
    v54 = vmovn_s64(vcltzq_s64((int64x2_t)vorrq_s8((int8x16_t)vzip1q_s64(v53, v52), (int8x16_t)vzip2q_s64(v53, v52))));
    v55 = v54.i8[0];
    if ((v54.i8[4] & 1) != 0)
    {
      v56 = v50;
      v57 = v49;
      if ((v55 & 1) != 0)
      {
LABEL_62:
        v60 = *(float64x2_t *)(v29 + v37 - 48);
        v61 = *(double *)(v29 + v37 - 40);
        if (v60.f64[0] >= v61)
          v62 = *(double *)(v29 + v37 - 40);
        else
          v62 = *(double *)(v29 + v37 - 48);
        if (v62 <= 0.0)
        {
          v3 = v425;
LABEL_82:
          v29 = *(_QWORD *)(v11 + 64);
          v28 = *(_QWORD *)(v11 + 72);
          goto LABEL_83;
        }
        v63.f64[0] = *(float64_t *)(v29 + v37 - 64);
        v64 = v29 + v37;
        if (v63.f64[0] == *(double *)(v38 - 96))
        {
          v65 = *(double *)(v64 - 56);
          if (v65 == *(double *)(v38 - 88) && v60.f64[0] == *(double *)(v38 - 80) && v61 == *(double *)(v38 - 72))
          {
            v66 = vclezq_f64(*(float64x2_t *)&buf[16]);
            v67 = vmovn_s64(vcltzq_s64((int64x2_t)vorrq_s8((int8x16_t)vzip1q_s64(v53, v66), (int8x16_t)vzip2q_s64(v53, v66))));
            if ((v67.i8[4] & 1) != 0)
            {
              v3 = v425;
              if ((v67.i8[0] & 1) != 0)
                goto LABEL_82;
              goto LABEL_81;
            }
            v3 = v425;
            if ((v67.i8[0] & 1) != 0)
              goto LABEL_82;
            goto LABEL_80;
          }
        }
        else
        {
          v65 = *(double *)(v64 - 56);
        }
        v63.f64[1] = v65;
        v68 = vcvt_f32_f64(v63);
        *(float32x2_t *)v69.i8 = vadd_f32(vcvt_f32_f64(v60), v68);
        *(float32x2_t *)v70.i8 = v68;
        v70.i64[1] = __PAIR64__(v68.u32[1], v69.u32[0]);
        v69.i64[1] = v69.i64[0];
        v71 = (float32x4_t)vuzp1q_s32(v70, (int32x4_t)vcvt_hight_f32_f64(*(int32x2_t *)v69.i8, v63));
        v72 = (float32x4_t)vuzp2q_s32(v70, v69);
        v502.val[0] = vcvtq_f64_f32(*(float32x2_t *)v71.f32);
        v502.val[1] = vcvtq_f64_f32(*(float32x2_t *)v72.f32);
        v73 = (double *)&v486;
        vst2q_f64(v73, v502);
        v73 += 4;
        v502.val[0] = vcvt_hight_f64_f32(v71);
        v502.val[1] = vcvt_hight_f64_f32(v72);
        vst2q_f64(v73, v502);
        v470 = off_1E15997E8;
        v471 = 4;
        *(_QWORD *)&v472 = &v486;
        v74 = *(_QWORD *)(v11 + 64);
        if (0xCF3CF3CF3CF3CF3DLL * ((*(_QWORD *)(v11 + 72) - v74) >> 3) <= v33)
LABEL_231:
          __assert_rtn("operator[]", "x-small-vector.h", 91, "pos < size () && \"Out of bounds access\"");
        CA::Render::LayerNode::MapGeometry::map((uint64_t)&v470, *(CA::Render::LayerNode **)(v38 - 104), *(CA::Render::LayerNode **)(v74 + 168 * v33 + 8));
        v75 = (const double *)&v486;
        v499 = vld2q_f64(v75);
        v75 += 4;
        v503 = vld2q_f64(v75);
        v76 = (int32x4_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v499.val[0]), v503.val[0]);
        v499.val[0] = (float64x2_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v499.val[1]), v503.val[1]);
        v499.val[1] = (float64x2_t)vzip2q_s32(v76, (int32x4_t)v499.val[0]);
        v499.val[0] = (float64x2_t)vzip1q_s32(v76, (int32x4_t)v499.val[0]);
        *(_QWORD *)&v503.val[0].f64[0] = vextq_s8((int8x16_t)v499.val[0], (int8x16_t)v499.val[0], 8uLL).u64[0];
        *(int8x8_t *)&v503.val[1].f64[0] = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)&v503.val[0].f64[0], *(float32x2_t *)&v499.val[0].f64[0]), *(int8x8_t *)&v499.val[0].f64[0], *(int8x8_t *)&v503.val[0].f64[0]);
        *(int8x8_t *)&v499.val[0].f64[0] = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)&v499.val[0].f64[0], *(float32x2_t *)&v503.val[0].f64[0]), *(int8x8_t *)&v499.val[0].f64[0], *(int8x8_t *)&v503.val[0].f64[0]);
        *(_QWORD *)&v503.val[0].f64[0] = vextq_s8((int8x16_t)v499.val[1], (int8x16_t)v499.val[1], 8uLL).u64[0];
        *(int8x8_t *)v76.i8 = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)&v503.val[0].f64[0], *(float32x2_t *)&v499.val[1].f64[0]), *(int8x8_t *)&v499.val[1].f64[0], *(int8x8_t *)&v503.val[0].f64[0]);
        *(int8x8_t *)&v499.val[1].f64[0] = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)&v499.val[1].f64[0], *(float32x2_t *)&v503.val[0].f64[0]), *(int8x8_t *)&v499.val[1].f64[0], *(int8x8_t *)&v503.val[0].f64[0]);
        *(int8x8_t *)&v503.val[0].f64[0] = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v76.i8, *(float32x2_t *)&v503.val[1].f64[0]), *(int8x8_t *)&v503.val[1].f64[0], *(int8x8_t *)v76.i8);
        *(float32x2_t *)&v499.val[0].f64[0] = vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)&v499.val[0].f64[0], *(float32x2_t *)&v499.val[1].f64[0]), *(int8x8_t *)&v499.val[0].f64[0], *(int8x8_t *)&v499.val[1].f64[0]), *(float32x2_t *)&v503.val[0].f64[0]);
        LODWORD(v499.val[1].f64[0]) = COERCE_UNSIGNED_INT(vaddv_f32(*(float32x2_t *)&v499.val[0].f64[0])) & 0x7FFFFFFF;
        v503.val[1] = (float64x2_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v416, (int32x4_t)v499.val[1]), 0);
        v49 = (float64x2_t)vbslq_s8((int8x16_t)v503.val[1], (int8x16_t)vcvtq_f64_f32(*(float32x2_t *)&v499.val[0].f64[0]), v430);
        v50 = (float64x2_t)vbslq_s8((int8x16_t)v503.val[1], (int8x16_t)vcvtq_f64_f32(*(float32x2_t *)&v503.val[0].f64[0]), v426);
        v503.val[1] = (float64x2_t)vclezq_f64(*(float64x2_t *)&buf[16]);
        v77 = vclezq_f64(v49);
        v78 = vmovn_s64(vcltzq_s64((int64x2_t)vorrq_s8((int8x16_t)vzip1q_s64(v77, (int64x2_t)v503.val[1]), (int8x16_t)vzip2q_s64(v77, (int64x2_t)v503.val[1]))));
        v3 = v425;
        if ((v78.i8[4] & 1) != 0)
        {
          if ((v78.i8[0] & 1) != 0)
            goto LABEL_82;
          goto LABEL_81;
        }
        if ((v78.i8[0] & 1) != 0)
          goto LABEL_82;
LABEL_80:
        v79 = vaddq_f64(v50, v49);
        v50 = vminnmq_f64(v419, v50);
        v49 = vsubq_f64(vmaxnmq_f64(vaddq_f64(v419, *(float64x2_t *)&buf[16]), v79), v50);
LABEL_81:
        *(float64x2_t *)&buf[16] = v49;
        v419 = v50;
        goto LABEL_82;
      }
    }
    else
    {
      if ((v54.i8[0] & 1) != 0)
        goto LABEL_62;
      v58 = *(float64x2_t *)(v11 + 448);
      v59 = vaddq_f64(v58, v51);
      v56 = vminnmq_f64(v58, v50);
      v57 = vsubq_f64(vmaxnmq_f64(v59, vaddq_f64(v50, v49)), v56);
    }
    *(float64x2_t *)(v11 + 448) = v56;
    *(float64x2_t *)(v11 + 464) = v57;
    goto LABEL_62;
  }
}

void CA::Transform::set_affine(CA::Transform *this, double a2, double a3, double a4, double a5, double a6, double a7)
{
  char v12;
  char v14;
  double v15;
  double v16;
  int v17;
  unsigned int v18;
  int v19;
  char v20;

  if (a3 == 0.0 && a3 == a4)
  {
    CA::Transform::set_affine_rectilinear(this, a2, a5, a6, a7);
    return;
  }
  __asm { FMOV            V6.2D, #1.0 }
  *((_OWORD *)this + 8) = _Q6;
  v12 = *((_BYTE *)this + 144) & 0xE0;
  if (a2 == 0.0 && a2 == a5)
  {
    v15 = -a3;
    if (a3 >= 0.0)
      v15 = a3;
    v16 = -v15;
    if (v15 == a4)
      v17 = 7;
    else
      v17 = 16;
    if (v16 == a4)
      v18 = 5;
    else
      v18 = v17;
    if (v15 == a4)
      v19 = 6;
    else
      v19 = 16;
    if (v16 == a4)
      v19 = 4;
    if (v15 == a3)
      v18 = v19;
    v20 = v12 | v18;
    *((_BYTE *)this + 144) = v20;
    if (v15 == 1.0 || v18 > 0xF)
      goto LABEL_32;
    *((double *)this + 16) = v15;
    *((double *)this + 17) = 1.0 / v15;
    v14 = v20 | 8;
  }
  else
  {
    v14 = v12 | 0x10;
  }
  *((_BYTE *)this + 144) = v14;
LABEL_32:
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = xmmword_18474DF40;
  *((_OWORD *)this + 7) = xmmword_18474DF50;
  *(double *)this = a2;
  *((double *)this + 1) = a3;
  *((double *)this + 4) = a4;
  *((double *)this + 5) = a5;
  *((double *)this + 12) = a6;
  *((double *)this + 13) = a7;
}

float64_t CA::Render::Layer::append_contents_transform(uint64_t a1, CA::Transform *a2, float64x2_t *a3, _OWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  double *v11;
  double *v12;
  double *v13;
  BOOL v14;
  double *v15;
  uint64_t v16;
  const double *v17;
  char v18;
  float64x2_t v19;
  unint64_t v20;
  __int128 v22;
  float64x2_t v23[9];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a1 + 128);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 32);
    if (v9)
    {
      v10 = *(_DWORD *)(v9 + 16);
      v11 = (double *)(v9 + 24);
      v12 = (double *)(v9 + 40);
      v13 = (double *)(v9 + 56);
      v14 = v10 >= 6;
      if (v10 < 6)
        v13 = (double *)(MEMORY[0x1E0C9BAA8] + 32);
      v15 = (double *)(MEMORY[0x1E0C9BAA8] + 16);
      if (v14)
        v15 = v12;
      if (!v14)
        v11 = (double *)MEMORY[0x1E0C9BAA8];
      CA::Transform::set_affine((CA::Transform *)v23, *v11, v11[1], *v15, v15[1], *v13, v13[1]);
      CA::Transform::concat_left(a2, v23, v16, v17);
    }
  }
  v23[0] = 0uLL;
  v22 = 0uLL;
  v18 = CA::Render::compute_gravity_transform((unsigned __int16)*(_DWORD *)(a1 + 36) >> 12, (double *)(a1 + 64), a3, (uint64_t)v23, (uint64_t)&v22);
  v19 = CA::Transform::translate(a2, v23[0].f64[0], v23[0].f64[1], 0.0);
  if ((v18 & 1) == 0)
  {
    *(_QWORD *)&v19.f64[0] = v22;
    if (*(double *)&v22 == *((double *)&v22 + 1))
      goto LABEL_13;
    if (*(double *)&v22 < 0.0 != *((double *)&v22 + 1) >= 0.0)
    {
      v20 = v22 - *((_QWORD *)&v22 + 1);
      if ((uint64_t)(v22 - *((_QWORD *)&v22 + 1)) < 0)
        v20 = *((_QWORD *)&v22 + 1) - v22;
      if (v20 <= 3)
      {
LABEL_13:
        *(_QWORD *)&v22 = *((_QWORD *)&v22 + 1);
        v19.f64[0] = *((float64_t *)&v22 + 1);
      }
    }
    v19.f64[0] = CA::Transform::scale((float64x2_t *)a2, v19, *((double *)&v22 + 1), 1.0);
  }
  if (a4)
  {
    *(_QWORD *)&v19.f64[0] = v22;
    *a4 = v22;
  }
  return v19.f64[0];
}

uint64_t CA::Render::compute_gravity_transform(unsigned int a1, double *a2, float64x2_t *a3, uint64_t a4, uint64_t a5)
{
  double v10;
  char v13;
  double v14;
  float64x2_t v15;
  int64x2_t v16;
  int32x2_t v17;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;

  switch(a1)
  {
    case 0u:
    case 1u:
    case 2u:
      __asm { FMOV            V0.2D, #1.0; jumptable 0000000184489E7C cases 0-2 }
      *(_OWORD *)a5 = _Q0;
      v10 = *a2 + (a2[2] - a3->f64[0]) * 0.5;
      goto LABEL_5;
    case 3u:
    case 5u:
    case 7u:
      __asm { FMOV            V0.2D, #1.0; jumptable 0000000184489E7C cases 3,5,7 }
      *(_OWORD *)a5 = _Q0;
      v10 = *a2;
      goto LABEL_5;
    case 4u:
    case 6u:
    case 8u:
      __asm { FMOV            V0.2D, #1.0; jumptable 0000000184489E7C cases 4,6,8 }
      *(_OWORD *)a5 = _Q0;
      v10 = a2[2] + *a2 - a3->f64[0];
LABEL_5:
      *(double *)a4 = v10;
      *(_QWORD *)(a4 + 8) = 0;
      v13 = 1;
      if (a1 > 8)
        return v13 & 1;
      if (((1 << a1) & 0x19) != 0)
      {
        v14 = a2[1] + (a2[3] - a3->f64[1]) * 0.5;
      }
      else if (((1 << a1) & 0x62) != 0)
      {
        v14 = a2[3] + a2[1] - a3->f64[1];
      }
      else
      {
        v14 = a2[1];
      }
      v13 = 1;
      break;
    case 0xAu:
      v19 = a2[2];
      v20 = a2[3];
      v21 = v19 / a3->f64[0];
      if (v21 >= v20 / a3->f64[1])
        v21 = v20 / a3->f64[1];
      goto LABEL_18;
    case 0xBu:
      v19 = a2[2];
      v20 = a2[3];
      v21 = v19 / a3->f64[0];
      if (v21 <= v20 / a3->f64[1])
        v21 = v20 / a3->f64[1];
LABEL_18:
      *(double *)a5 = v21;
      *(double *)(a5 + 8) = v21;
      v22 = a3->f64[1];
      v23 = a2[1];
      *(double *)a4 = *a2 + (v19 - a3->f64[0] * v21) * 0.5;
      v13 = v21 == 1.0;
      v14 = v23 + (v20 - v21 * v22) * 0.5;
      break;
    default:
      v15 = *(float64x2_t *)(a2 + 2);
      v16 = vceqq_f64(v15, *a3);
      v17 = vmovn_s64(v16);
      __asm { FMOV            V1.2D, #1.0 }
      v13 = v17.i8[4] & v17.i8[0];
      *(int8x16_t *)a5 = vbslq_s8((int8x16_t)v16, _Q1, (int8x16_t)vdivq_f64(v15, *a3));
      v14 = a2[1];
      *(double *)a4 = *a2;
      break;
  }
  *(double *)(a4 + 8) = v14;
  return v13 & 1;
}

float64_t CA::Transform::concat_left(CA::Transform *this, float64x2_t *a2, uint64_t a3, const double *a4)
{
  char v4;
  float64x2_t v5;
  double v11;
  char v12;
  char v13;
  int v14;

  v4 = *((_BYTE *)this + 144);
  if ((v4 & 0x10) != 0)
    goto LABEL_6;
  if ((LOBYTE(a2[9].f64[0]) & 0x10) != 0)
  {
    __asm { FMOV            V0.2D, #1.0 }
    *((_OWORD *)this + 8) = _Q0;
    *((_BYTE *)this + 144) = v4 & 0xE0 | 0x10;
LABEL_6:
    *(_QWORD *)&v5.f64[0] = *(_OWORD *)&CA::Mat4Impl::mat4_concat((float64x2_t *)this, a2->f64, (const double *)this, a4);
    return v5.f64[0];
  }
  v5.f64[0] = a2[6].f64[0];
  if ((*((_BYTE *)this + 144) & 0xF) != 0)
  {
    *((float64x2_t *)this + 6) = vmlaq_n_f64(vmlaq_n_f64(*((float64x2_t *)this + 6), *(float64x2_t *)this, v5.f64[0]), *((float64x2_t *)this + 2), a2[6].f64[1]);
  }
  else
  {
    v5.f64[0] = *((double *)this + 12) + v5.f64[0];
    v11 = *((double *)this + 13) + a2[6].f64[1];
    *((_QWORD *)this + 12) = *(_QWORD *)&v5.f64[0];
    *((double *)this + 13) = v11;
  }
  v12 = LOBYTE(a2[9].f64[0]);
  v13 = v12;
  if ((v12 & 8) != 0)
  {
    v5 = vmulq_f64(*((float64x2_t *)this + 8), a2[8]);
    *((float64x2_t *)this + 8) = v5;
    v4 = v4 & 0xF7 | (8 * (v5.f64[0] != 1.0));
    *((_BYTE *)this + 144) = v4;
    v13 = LOBYTE(a2[9].f64[0]);
  }
  v14 = concat_table[v13 & 7 | (8 * (v4 & 7))];
  if ((v4 & 7) == v14)
  {
    if ((v12 & 8) == 0)
      return v5.f64[0];
  }
  else
  {
    *((_BYTE *)this + 144) = v4 & 0xF8 | v14 & 7;
  }
  v5.f64[0] = CA::Transform::set_2x2(this);
  return v5.f64[0];
}

double CA::Transform::set_affine_rectilinear(CA::Transform *this, double result, double a3, double a4, double a5)
{
  char v9;
  double v10;
  char v11;
  char v12;

  __asm { FMOV            V4.2D, #1.0 }
  v9 = *((_BYTE *)this + 144) & 0xE0;
  *((_BYTE *)this + 144) = v9;
  *(_OWORD *)this = xmmword_18474DF40;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_OWORD *)this + 2) = xmmword_18474DF50;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = xmmword_18474DF40;
  *((_OWORD *)this + 7) = xmmword_18474DF50;
  *((_OWORD *)this + 8) = _Q4;
  *((double *)this + 12) = a4;
  *((double *)this + 13) = a5;
  if (result == 1.0 && result == a3)
    return result;
  *(double *)this = result;
  *((double *)this + 5) = a3;
  v10 = -result;
  if (result >= 0.0)
    v10 = result;
  if (v10 != result)
  {
    if (-v10 == a3)
      v12 = 3;
    else
      v12 = 16;
    if (v10 == a3)
      v11 = 2;
    else
      v11 = v12;
    goto LABEL_16;
  }
  if (v10 != a3)
  {
    if (-v10 == a3)
      v11 = 1;
    else
      v11 = 16;
LABEL_16:
    v9 |= v11;
    *((_BYTE *)this + 144) = v9;
  }
  result = 1.0;
  if (v10 != 1.0 && (v9 & 0x10) == 0)
  {
    result = 1.0 / v10;
    *((double *)this + 16) = v10;
    *((double *)this + 17) = 1.0 / v10;
    *((_BYTE *)this + 144) = v9 | 8;
  }
  return result;
}

float64_t CA::Transform::scale(float64x2_t *this, float64x2_t a2, double a3, double a4)
{
  char v5;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  double *v17;

  if (a2.f64[0] == a3 && a4 == 1.0)
  {
LABEL_12:
    *(_QWORD *)&v12.f64[0] = *(_OWORD *)&CA::Transform::scale_2d((CA::Transform *)this, a2);
    return v12.f64[0];
  }
  v5 = LOBYTE(this[9].f64[0]);
  if ((v5 & 0x10) == 0)
  {
    if (-a3 != a2.f64[0] || a4 != 1.0)
    {
      __asm { FMOV            V3.2D, #1.0 }
      this[8] = _Q3;
      LOBYTE(this[9].f64[0]) = v5 & 0xE0 | 0x10;
      goto LABEL_11;
    }
    if (a2.f64[0] >= 0.0)
    {
      if (a3 >= 0.0)
        goto LABEL_18;
      LOBYTE(this[9].f64[0]) = v5 ^ 1;
      this[2].f64[0] = -this[2].f64[0];
      v17 = &this[2].f64[1];
    }
    else
    {
      LOBYTE(this[9].f64[0]) = v5 ^ 2;
      this->f64[0] = -this->f64[0];
      v17 = &this->f64[1];
    }
    *v17 = -*v17;
LABEL_18:
    if (a2.f64[0] < 0.0)
      a2.f64[0] = -a2.f64[0];
    goto LABEL_12;
  }
LABEL_11:
  v11 = vmulq_n_f64(*this, a2.f64[0]);
  v12 = vmulq_n_f64(this[1], a2.f64[0]);
  v13 = vmulq_n_f64(this[2], a3);
  v14 = vmulq_n_f64(this[3], a3);
  v15 = vmulq_n_f64(this[4], a4);
  v16 = vmulq_n_f64(this[5], a4);
  *this = v11;
  this[1] = v12;
  this[2] = v13;
  this[3] = v14;
  this[4] = v15;
  this[5] = v16;
  return v12.f64[0];
}

float64x2_t CA::Transform::scale_2d(CA::Transform *this, float64x2_t result)
{
  char v2;
  double v3;
  double v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;

  if (result.f64[0] != 1.0)
  {
    v2 = *((_BYTE *)this + 144);
    if ((v2 & 0x10) != 0)
    {
      v5 = vmulq_n_f64(*(float64x2_t *)this, result.f64[0]);
      v6 = vmulq_n_f64(*((float64x2_t *)this + 1), result.f64[0]);
      v7 = vmulq_n_f64(*((float64x2_t *)this + 2), result.f64[0]);
      result = vmulq_n_f64(*((float64x2_t *)this + 3), result.f64[0]);
      *(float64x2_t *)this = v5;
      *((float64x2_t *)this + 1) = v6;
      *((float64x2_t *)this + 2) = v7;
      *((float64x2_t *)this + 3) = result;
    }
    else
    {
      v3 = *((double *)this + 16) * result.f64[0];
      v4 = *((double *)this + 17) / result.f64[0];
      *((double *)this + 16) = v3;
      *((double *)this + 17) = v4;
      *((_BYTE *)this + 144) = v2 & 0xF7 | (8 * (v3 != 1.0));
      *(float64x2_t *)this = vmulq_n_f64(*(float64x2_t *)this, result.f64[0]);
      result = vmulq_n_f64(*((float64x2_t *)this + 2), result.f64[0]);
      *((float64x2_t *)this + 2) = result;
    }
  }
  return result;
}

double CA::BoundsImpl::scale(double *a1, double result, double a3)
{
  double v3;

  if (result != 1.0)
  {
    v3 = a1[2];
    if (v3 < 1.79769313e308)
    {
      *a1 = *a1 * result;
      result = v3 * result;
      a1[2] = result;
    }
  }
  if (a3 != 1.0)
  {
    result = a1[3];
    if (result < 1.79769313e308)
    {
      a1[1] = a1[1] * a3;
      result = result * a3;
      a1[3] = result;
    }
  }
  return result;
}

uint64_t CA::BoundsImpl::intersect(uint64_t a1, float64x2_t a2, float64x2_t a3)
{
  _QWORD *v3;
  float64x2_t v4;
  int64x2_t v5;
  int64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  int64x2_t v10;
  uint64_t result;

  v3 = (_QWORD *)(a1 + 16);
  v4 = *(float64x2_t *)(a1 + 16);
  v5 = vclezq_f64(v4);
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v5, 1), (int8x16_t)v5).u64[0] & 0x8000000000000000) != 0)
    return 0;
  v6 = vclezq_f64(a3);
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v6, 1), (int8x16_t)v6).u64[0] & 0x8000000000000000) != 0
    || (v7 = vaddq_f64(a2, a3),
        v8 = vmaxnmq_f64(*(float64x2_t *)a1, a2),
        v9 = vsubq_f64(vminnmq_f64(vaddq_f64(*(float64x2_t *)a1, v4), v7), v8),
        v10 = vclezq_f64(v9),
        (vorrq_s8((int8x16_t)vdupq_laneq_s64(v10, 1), (int8x16_t)v10).u64[0] & 0x8000000000000000) != 0))
  {
    result = 0;
    *v3 = 0;
    v3[1] = 0;
  }
  else
  {
    *(float64x2_t *)a1 = v8;
    *(float64x2_t *)(a1 + 16) = v9;
    return 1;
  }
  return result;
}

uint64_t CA::OGL::maybe_concatenate(CA::OGL *this, CA::Transform *a2, const CA::Transform *a3, const double *a4)
{
  const double *v6;
  const double *v7;
  uint64_t v8;
  const double *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  const double *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  const double *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  const double *v30;
  float64x2_t *v31;
  CA::Transform *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  if ((*((_BYTE *)this + 144) & 0x10) != 0
    && (*((_BYTE *)a2 + 144) & 0x10) != 0
    && !CA::Mat4Impl::mat4_is_affine(this, (const double *)a2)
    && !CA::Mat4Impl::mat4_is_affine(a2, v6))
  {
    if (CA::Mat4Impl::mat4_is_affine_with_z_translate(a2, v7))
    {
      v11 = *((_OWORD *)a2 + 1);
      v12 = *((_OWORD *)a2 + 2);
      v13 = *((_OWORD *)a2 + 3);
      v37 = *(_OWORD *)a2;
      v38 = v11;
      v39 = v12;
      v40 = v13;
      v14 = *((_OWORD *)a2 + 5);
      v15 = *((_OWORD *)a2 + 6);
      v16 = *((_OWORD *)a2 + 7);
      v41 = *((_OWORD *)a2 + 4);
      v42 = v14;
      v43 = v15;
      v45 = *((_QWORD *)&v16 + 1);
      v44 = 0;
LABEL_13:
      v8 = 1;
      CA::Transform::set((uint64_t)&v46, (CA::Mat4Impl *)&v37, 1);
      v31 = (float64x2_t *)&v46;
      v32 = this;
LABEL_17:
      CA::Transform::concat(v32, v31, v29, v30);
      return v8;
    }
    if (CA::Mat4Impl::mat4_is_affine_with_z_translate(this, v10))
    {
      v18 = *((_OWORD *)this + 1);
      v19 = *((_OWORD *)this + 2);
      v20 = *((_OWORD *)this + 3);
      v46 = *(_OWORD *)this;
      v47 = v18;
      v48 = v19;
      v49 = v20;
      v21 = *((_OWORD *)this + 5);
      v22 = *((_OWORD *)this + 6);
      v23 = *((_OWORD *)this + 7);
      v50 = *((_OWORD *)this + 4);
      v51 = v21;
      v52 = v22;
      v54 = *((_QWORD *)&v23 + 1);
      v53 = 0;
    }
    else
    {
      if (CA::Mat4Impl::mat4_is_fixed_z_with_z_translate(a2, v17))
      {
        v25 = *((_OWORD *)a2 + 1);
        v26 = *((_OWORD *)a2 + 2);
        v27 = *((_OWORD *)a2 + 3);
        v37 = *(_OWORD *)a2;
        v38 = v25;
        v39 = v26;
        v40 = v27;
        v28 = *((_OWORD *)a2 + 7);
        v43 = *((_OWORD *)a2 + 6);
        v45 = *((_QWORD *)&v28 + 1);
        v44 = 0;
        v41 = 0uLL;
        v42 = xmmword_18474DF40;
        goto LABEL_13;
      }
      if (!CA::Mat4Impl::mat4_is_fixed_z_with_z_translate(this, v24))
        return 0;
      v33 = *((_OWORD *)this + 1);
      v34 = *((_OWORD *)this + 2);
      v35 = *((_OWORD *)this + 3);
      v46 = *(_OWORD *)this;
      v47 = v33;
      v48 = v34;
      v49 = v35;
      v36 = *((_OWORD *)this + 7);
      v52 = *((_OWORD *)this + 6);
      v54 = *((_QWORD *)&v36 + 1);
      v53 = 0;
      v50 = 0uLL;
      v51 = xmmword_18474DF40;
    }
    v8 = 1;
    CA::Transform::set((uint64_t)this, (CA::Mat4Impl *)&v46, 1);
    v32 = this;
    v31 = (float64x2_t *)a2;
    goto LABEL_17;
  }
  CA::Transform::concat(this, (float64x2_t *)a2, (uint64_t)a3, a4);
  return 1;
}

float64x2_t CA::Transform::concat(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const double *v4;
  float64x2_t result;
  double v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14[9];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(a2 + 32) & 0xF) != 0)
  {
    CA::Transform::set((CA::Transform *)v14, a2);
    result.f64[0] = CA::Transform::concat((CA::Transform *)a1, v14, v3, v4);
  }
  else
  {
    result.f64[0] = *(float64_t *)a2;
    if ((*(_BYTE *)(a1 + 144) & 0x10) != 0)
    {
      result.f64[1] = *(float64_t *)(a2 + 8);
      v7 = *(float64x2_t *)(a1 + 16);
      v8 = *(float64x2_t *)(a1 + 48);
      v9 = *(float64x2_t *)(a1 + 80);
      v10 = *(float64x2_t *)(a1 + 112);
      v11 = vmlaq_laneq_f64(*(float64x2_t *)(a1 + 32), result, v8, 1);
      v12 = vmlaq_laneq_f64(*(float64x2_t *)(a1 + 64), result, v9, 1);
      v13 = vmlaq_laneq_f64(*(float64x2_t *)(a1 + 96), result, v10, 1);
      *(float64x2_t *)a1 = vmlaq_laneq_f64(*(float64x2_t *)a1, result, v7, 1);
      *(float64x2_t *)(a1 + 16) = vmlaq_laneq_f64(v7, (float64x2_t)0, v7, 1);
      *(float64x2_t *)(a1 + 32) = v11;
      *(float64x2_t *)(a1 + 48) = vmlaq_laneq_f64(v8, (float64x2_t)0, v8, 1);
      *(float64x2_t *)(a1 + 64) = v12;
      *(float64x2_t *)(a1 + 80) = vmlaq_laneq_f64(v9, (float64x2_t)0, v9, 1);
      *(float64x2_t *)(a1 + 96) = v13;
      *(float64x2_t *)(a1 + 112) = vmlaq_laneq_f64(v10, (float64x2_t)0, v10, 1);
    }
    else
    {
      v6 = *(double *)(a1 + 104);
      *(double *)(a1 + 96) = *(double *)(a1 + 96) + result.f64[0];
      result.f64[0] = v6 + *(double *)(a2 + 8);
      *(float64_t *)(a1 + 104) = result.f64[0];
    }
  }
  return result;
}

double CA::Transform::set_2x2(CA::Transform *this)
{
  char v1;
  double result;
  double v3;
  double v4;
  double v5;

  v1 = *((_BYTE *)this + 144);
  result = *((double *)this + 16);
  if ((v1 & 4) != 0)
    v3 = 0.0;
  else
    v3 = *((double *)this + 16);
  if ((*((_BYTE *)this + 144) & 4) != 0)
    v4 = -result;
  else
    v4 = 0.0;
  if ((*((_BYTE *)this + 144) & 4) == 0)
    result = 0.0;
  *((double *)this + 4) = v4;
  *((double *)this + 5) = v3;
  *(double *)this = v3;
  *((double *)this + 1) = result;
  v5 = -v3;
  if ((v1 & 2) == 0)
  {
    if ((v1 & 1) == 0)
      return result;
LABEL_13:
    result = -result;
    *((double *)this + 1) = result;
    *((double *)this + 5) = v5;
    return result;
  }
  *(double *)this = v5;
  *((double *)this + 4) = -v4;
  if ((v1 & 1) != 0)
    goto LABEL_13;
  return result;
}

float64_t CA::Transform::concat(CA::Transform *this, float64x2_t *a2, uint64_t a3, const double *a4)
{
  char v4;
  float64x2_t v5;
  float64x2_t v11;
  char v12;
  char v13;
  int v14;

  v4 = *((_BYTE *)this + 144);
  if ((v4 & 0x10) != 0)
    goto LABEL_6;
  if ((LOBYTE(a2[9].f64[0]) & 0x10) != 0)
  {
    __asm { FMOV            V0.2D, #1.0 }
    *((_OWORD *)this + 8) = _Q0;
    *((_BYTE *)this + 144) = v4 & 0xE0 | 0x10;
LABEL_6:
    *(_QWORD *)&v11.f64[0] = *(_OWORD *)&CA::Mat4Impl::mat4_concat((float64x2_t *)this, (double *)this, a2->f64, a4);
    return v11.f64[0];
  }
  if ((LOBYTE(a2[9].f64[0]) & 0xF) != 0)
    v5 = vmlaq_n_f64(vmulq_n_f64(*a2, *((double *)this + 12)), a2[2], *((double *)this + 13));
  else
    v5 = *((float64x2_t *)this + 6);
  v11 = vaddq_f64(v5, a2[6]);
  *((float64x2_t *)this + 6) = v11;
  v12 = LOBYTE(a2[9].f64[0]);
  v13 = v12;
  if ((v12 & 8) != 0)
  {
    v11 = vmulq_f64(*((float64x2_t *)this + 8), a2[8]);
    *((float64x2_t *)this + 8) = v11;
    v4 = v4 & 0xF7 | (8 * (v11.f64[0] != 1.0));
    *((_BYTE *)this + 144) = v4;
    v13 = LOBYTE(a2[9].f64[0]);
  }
  v14 = concat_table[v4 & 7 | (8 * (v13 & 7))];
  if ((v4 & 7) == v14)
  {
    if ((v12 & 8) == 0)
      return v11.f64[0];
  }
  else
  {
    *((_BYTE *)this + 144) = v4 & 0xF8 | v14 & 7;
  }
  v11.f64[0] = CA::Transform::set_2x2(this);
  return v11.f64[0];
}

double CA::Transform::set(CA::Transform *this, uint64_t a2)
{
  char v2;

  *(_OWORD *)this = xmmword_18474DF40;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = xmmword_18474DF50;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = xmmword_18474DF40;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = xmmword_18474DF50;
  *((_OWORD *)this + 6) = *(_OWORD *)a2;
  *((_OWORD *)this + 8) = *(_OWORD *)(a2 + 16);
  v2 = *((_BYTE *)this + 144) & 0xF8 | *(_BYTE *)(a2 + 32) & 7;
  *((_BYTE *)this + 144) = v2;
  *((_BYTE *)this + 144) = v2 & 0xE7 | *(_BYTE *)(a2 + 32) & 8;
  return CA::Transform::set_2x2(this);
}

void CA::shape_subtract(CA::Shape **this, CA::Shape **a2, const CA::Shape *a3, const int *a4)
{
  CA::Shape *v5;
  uint64_t v6;

  v5 = *this;
  if ((*this & 1) != 0)
  {
    if (v5 == (CA::Shape *)1)
      return;
  }
  else if (*((_DWORD *)v5 + 1) == 6)
  {
    return;
  }
  if ((a2 & 1) != 0)
  {
    if (a2 == (CA::Shape **)1)
      return;
    goto LABEL_9;
  }
  if (*((_DWORD *)a2 + 1) != 6)
  {
LABEL_9:
    v6 = CA::Shape::subtract(*this, (const CA::Shape *)a2, (uint64_t)a3, a4);
    CA::Shape::unref(v5);
    *this = (CA::Shape *)v6;
  }
}

uint64_t CA::Shape::scale_and_dilate(CA::Shape *this, float32x2_t a2, float32_t a3, unsigned int a4, unsigned int a5)
{
  const CA::Bounds *v5;
  float32x2_t v6;
  __int128 v7;
  int32x2_t v9;
  float32x2_t v10;
  CA::Shape *v11[2];
  uint64_t v12;
  uint64_t v13[4];

  v13[3] = *MEMORY[0x1E0C80C00];
  v12 = 1;
  v13[0] = (uint64_t)this;
  v11[0] = 0;
  v11[1] = 0;
  v13[1] = 0;
  v13[2] = 0;
  a2.f32[1] = a3;
  v10 = a2;
  v9 = (int32x2_t)__PAIR64__(a5, a4);
  while (CA::ShapeIterator::iterate(v13, (int *)v11))
  {
    v6 = vcvt_f32_s32((int32x2_t)v11[0]);
    *(int32x2_t *)&v7 = vsub_s32(vcvtm_s32_f32(vmul_f32(v10, v6)), v9);
    *((int32x2_t *)&v7 + 1) = vsub_s32(vadd_s32(vcvtp_s32_f32(vmul_f32(vadd_f32(vcvt_f32_s32((int32x2_t)v11[1]), v6), v10)), v9), *(int32x2_t *)&v7);
    *(_OWORD *)v11 = v7;
    CA::shape_union((CA::Shape **)&v12, v11, v5);
  }
  return v12;
}

uint64_t CA::Shape::subtract(CA::Shape *this, const CA::Shape *a2, uint64_t a3, const int *a4)
{
  int *v5[4];
  __int128 v6;
  int v7;
  _BYTE v8[2036];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if ((this & 1) != 0)
  {
    if (this == (CA::Shape *)1)
      return CA::Shape::ref((unint64_t)this, this);
  }
  else if (*((_DWORD *)this + 1) == 6)
  {
    return CA::Shape::ref((unint64_t)this, this);
  }
  if ((a2 & 1) != 0)
  {
    if (a2 == (const CA::Shape *)1)
      return CA::Shape::ref((unint64_t)this, this);
  }
  else if (*((_DWORD *)a2 + 1) == 6)
  {
    return CA::Shape::ref((unint64_t)this, this);
  }
  v6 = xmmword_18474E610;
  v7 = 2;
  v5[0] = (int *)&v6;
  v5[1] = (int *)v8;
  v5[2] = (int *)v8;
  v5[3] = (int *)&v6 + 3;
  *(_QWORD *)&v8[2028] = 0;
  return CA::shape_subtract(v5, (uint64_t)this, (uint64_t)a2, a4);
}

double *CA::BoundsImpl::inset(double *result, double a2, double a3)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;

  v4 = result[2];
  v3 = result[3];
  if (v4 <= v3)
    v5 = result[3];
  else
    v5 = result[2];
  if (v5 < 1.79769313e308)
  {
    if (v4 >= v3)
      v6 = result[3];
    else
      v6 = result[2];
    if (v6 > 0.0)
    {
      v7 = result[1] + a3;
      *result = *result + a2;
      result[1] = v7;
      v8 = v4 - (a2 + a2);
      v9 = v3 - (a3 + a3);
      result[2] = v8;
      result[3] = v9;
      if (v8 <= 0.0 || v9 <= 0.0)
      {
        result[2] = 0.0;
        result[3] = 0.0;
      }
    }
  }
  return result;
}

void CA::shape_intersect(CA *this, uint64_t a2, const CA::Shape *a3)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  const CA::Bounds *v19;
  _DWORD v20[4];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)this;
  if ((*(_QWORD *)this & 1) != 0)
  {
    if (v4 == 1)
      return;
  }
  else
  {
    v5 = *(_DWORD *)(v4 + 4);
    if (v5 == 6)
      return;
    if (v5 != 12)
      goto LABEL_8;
  }
  if ((a2 & 1) != 0)
  {
    if (a2 == 1)
      goto LABEL_8;
  }
  else if (*(_DWORD *)(a2 + 4) != 12)
  {
LABEL_8:
    v6 = CA::Shape::intersect(*(_QWORD *)this, a2);
    CA::Shape::unref((CA::Shape *)v4);
    *(_QWORD *)this = v6;
    return;
  }
  if ((v4 & 1) != 0)
  {
    v9 = v4 >> 48;
    v7 = v4 << 16 >> 48;
    v10 = ((v4 >> 2) & 0x7FFF) + v7;
    v8 = (v4 >> 48) + (v4 >> 17);
    if ((a2 & 1) != 0)
      goto LABEL_12;
  }
  else
  {
    LODWORD(v7) = *(_DWORD *)(v4 + 20);
    LODWORD(v9) = *(_DWORD *)(v4 + 28);
    v8 = *(_DWORD *)(v4 + 32);
    v10 = *(_DWORD *)(v4 + 36);
    if ((a2 & 1) != 0)
    {
LABEL_12:
      v11 = a2 >> 48;
      v12 = a2 << 16 >> 48;
      v13 = ((a2 >> 2) & 0x7FFF) + v12;
      v14 = (a2 >> 48) + (a2 >> 17);
      goto LABEL_15;
    }
  }
  LODWORD(v12) = *(_DWORD *)(a2 + 20);
  LODWORD(v11) = *(_DWORD *)(a2 + 28);
  v14 = *(_DWORD *)(a2 + 32);
  v13 = *(_DWORD *)(a2 + 36);
LABEL_15:
  if ((int)v9 >= (int)v11)
  {
    if ((int)v7 < (int)v12 || v8 > v14)
    {
      LODWORD(v11) = v9;
    }
    else
    {
      LODWORD(v11) = v9;
      if (v10 <= v13)
        return;
    }
  }
  if ((int)v7 <= (int)v12)
    v15 = v12;
  else
    v15 = v7;
  if (v8 >= v14)
    v16 = v14;
  else
    v16 = v8;
  if (v10 >= v13)
    v10 = v13;
  v17 = v16 - v11;
  if (v16 <= (int)v11 || (v18 = v10 - v15, v10 <= v15))
  {
    CA::Shape::unref(*(CA::Shape **)this);
    *(_QWORD *)this = 1;
  }
  else if ((v4 & 1) != 0 || *(_DWORD *)v4 != 1)
  {
    CA::Shape::unref(*(CA::Shape **)this);
    v20[0] = v11;
    v20[1] = v15;
    v20[2] = v17;
    v20[3] = v18;
    *(_QWORD *)this = CA::Shape::new_shape((CA::Shape *)v20, v19);
  }
  else
  {
    *(_DWORD *)(v4 + 20) = v15;
    *(_DWORD *)(v4 + 28) = v11;
    *(_DWORD *)(v4 + 32) = v16;
    *(_DWORD *)(v4 + 36) = v10;
  }
}

uint64_t CA::OGL::`anonymous namespace'::filters_are_valid(uint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;

  if (result)
  {
    v1 = *(unsigned int *)(result + 16);
    if ((_DWORD)v1)
    {
      if ((*(_BYTE *)(*(_QWORD *)(result + 24) + 13) & 1) != 0)
      {
        return 1;
      }
      else
      {
        v2 = 0;
        while (v1 - 1 != v2)
        {
          v3 = *(_QWORD *)(result + 32 + 8 * v2++);
          if ((*(_BYTE *)(v3 + 13) & 1) != 0)
            return v2 < v1;
        }
        v2 = *(unsigned int *)(result + 16);
        return v2 < v1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t CA::Render::BackdropGroup::has_consistent_background_color(CA::Render::BackdropGroup *this, uint64_t a2)
{
  unint64_t v2;
  float *v4;
  unint64_t v5;

  v2 = 0xCF3CF3CF3CF3CF3DLL * ((a2 - (uint64_t)this) >> 3);
  if (v2 < 2)
    return 1;
  v4 = (float *)((char *)this + 324);
  v5 = v2 - 1;
  while (*(v4 - 3) == *((float *)this + 36)
       && *(v4 - 2) == *((float *)this + 37)
       && *(v4 - 1) == *((float *)this + 38)
       && *v4 == *((float *)this + 39))
  {
    v4 += 42;
    if (!--v5)
      return 1;
  }
  return 0;
}

uint64_t CA::OGL::`anonymous namespace'::collect_surfaces(uint64_t a1, uint64_t a2, uint64_t a3, int a4, _BYTE *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  __int16 v13;

  if (!a1)
    return 0;
  v9 = a1;
  v10 = 0;
  while (1)
  {
    v12 = (int)v10 >= 1
       && (v11 = *(_QWORD *)(a2 + 8 * (v10 - 1))) != 0
       && (*(_WORD *)(v11 + 75) & 0x800) != 0
       && CA::BoundsImpl::contains((_DWORD *)(v11 + 32), (_DWORD *)(v9 + 32));
    v13 = *(_WORD *)(v9 + 75);
    if ((v13 & 0x80) != 0 && !(((v13 & 0x60) != 0) & (a4 ^ 1) | v12))
    {
      a4 = 0;
      *(_QWORD *)(a2 + 8 * (int)v10) = v9;
      *(_OWORD *)(a3 + 16 * (int)v10) = *(_OWORD *)(v9 + 32);
      v10 = (v10 + 1);
      v13 = *(_WORD *)(v9 + 75);
    }
    if ((v13 & 0x400) != 0)
      break;
    v9 = *(_QWORD *)(v9 + 8);
    if (!v9 || (int)v10 > 7)
      return v10;
  }
  *a5 = 1;
  return v10;
}

void CA::WindowServer::IOMFBDisplay::foreach_detached_layer_geometry(CA::WindowServer::IOMFBDisplay *this, void (__high *a2)(CA::Render::Handle *, uint64_t, CA::Render::Texture *, CA::Rect, CA::Rect, unsigned int, void *), void *a3)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _OWORD v12[2];
  _OWORD v13[2];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = (uint64_t *)*((_QWORD *)this + 3251);
  if (v3 && (*((_BYTE *)v3 + 292) & 1) == 0)
  {
    v5 = *v3;
    if (*v3)
    {
      v8 = *((int *)v3 + 72);
      v9 = v3[1];
      v10 = *((_OWORD *)v3 + 5);
      v13[0] = *((_OWORD *)v3 + 4);
      v13[1] = v10;
      v11 = *((_OWORD *)v3 + 7);
      v12[0] = *((_OWORD *)v3 + 6);
      v12[1] = v11;
      ((void (*)(uint64_t, uint64_t, uint64_t, _OWORD *, _OWORD *, _QWORD, void *))a2)(v5, v8, v9, v13, v12, *((unsigned int *)v3 + 8), a3);
    }
    else
    {
      CA::WindowServer::IOMFBDisplay::delete_detached_layer(this);
    }
  }
}

uint64_t CA::WindowServer::`anonymous namespace'::OGLDisplay::foreach_detached_layer_geometry(CA::WindowServer::_anonymous_namespace_::OGLDisplay *this, void (*a2)(Handle *, uint64_t, CA::Render::Texture *, Rect, Rect, unsigned int, void *), void *a3)
{
  return (*(uint64_t (**)(_QWORD, void (*)(Handle *, uint64_t, CA::Render::Texture *, Rect, Rect, unsigned int, void *), void *))(**((_QWORD **)this + 1) + 608))(*((_QWORD *)this + 1), a2, a3);
}

uint64_t CA::OGL::GaussianBlurFilter::get_edge_info(uint64_t a1, const CA::Render::Filter *a2, const CA::Render::Layer *a3, uint64_t a4, Rect *a5, float *a6, BOOL *a7)
{
  uint64_t v12;
  double v13;
  double v14;
  float v15;
  float v16;
  CA::Render::KeyValueArray *v17;
  float v18;
  CA::OGL::GaussianBlurFilter *int_key;
  double v21;
  double v22[2];

  v22[1] = *(double *)MEMORY[0x1E0C80C00];
  v12 = *(_QWORD *)(*(_QWORD *)(a4 + 232) + 24);
  v21 = 0.0;
  v22[0] = 0.0;
  if ((*(_BYTE *)(v12 + 144) & 0x10) != 0)
  {
    CA::Mat4Impl::mat4_get_scale((CA::Mat4Impl *)v12, v22, &v21, (double *)a4);
    v13 = v21;
    v14 = v22[0];
  }
  else
  {
    v13 = *(double *)(v12 + 128);
    v21 = v13;
    v22[0] = v13;
    v14 = v13;
  }
  v15 = v14;
  v16 = v13;
  v17 = (CA::Render::KeyValueArray *)*((_QWORD *)a2 + 5);
  v18 = CA::Render::KeyValueArray::get_float_key(v17, (const CA::Render::KeyValueArray *)0x12E, 0.0) * 2.79999995;
  *a6 = v18 * v15;
  a6[1] = v18 * v16;
  int_key = (CA::OGL::GaussianBlurFilter *)CA::Render::KeyValueArray::get_int_key(v17, (const CA::Render::KeyValueArray *)0x129, 0);
  *a7 = (_DWORD)int_key != 0;
  return CA::OGL::GaussianBlurFilter::get_bounds(int_key, a2, a3, a5);
}

double CA::OGL::Context::array_check(CA::OGL::Context *this, int a2)
{
  unsigned int v3;
  unint64_t v4;
  double result;

  if (*((_DWORD *)this + 23))
    v3 = 6 * a2;
  else
    v3 = 4 * a2;
  if (*((_QWORD *)this + 16) + (unint64_t)(4 * a2) > *((_QWORD *)this + 17)
    || (v4 = *((_QWORD *)this + 14)) != 0 && *((_QWORD *)this + 13) + (unint64_t)v3 > v4)
  {
    *((_WORD *)this + 408) |= 0x20u;
    CA::OGL::Context::array_flush((uint64_t)this);
    *((_QWORD *)this + 16) = 0;
    *((_QWORD *)this + 12) = (char *)this + 818;
    result = 0.0;
    *(_OWORD *)((char *)this + 104) = xmmword_18474E060;
  }
  return result;
}

void CA::OGL::`anonymous namespace'::capture_detached(uint64_t a1, uint64_t a2, uint32x2_t *a3, double *a4, float64x2_t *a5, char a6, uint64_t a7)
{
  float64x2_t *v9;
  uint32x2_t *v11;
  uint64_t v12;
  float64x2_t v13;
  int64x2_t v14;
  int8x16_t v15;
  int32x4_t v16;
  unint64_t v17;
  int32x2_t v18;
  uint32x2_t v19;
  int32x2_t v20;
  uint32x2_t v21;
  __int128 v22;
  int32x2_t v23;
  uint32x2_t v24;
  uint32x2_t *v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  CA::Render::Surface *v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  const char *v47;
  NSObject *v48;
  uint32_t v49;
  uint64_t v50;
  __int32 v51;
  uint64_t v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  NSObject *v56;
  __int32 v57;
  _OWORD *v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  float64x2_t v67;
  int64x2_t v68;
  int8x16_t v69;
  int32x4_t v70;
  uint64_t v71;
  uint64_t v72;
  int32x2_t v73;
  uint32x2_t v74;
  int32x2_t v75;
  float v76;
  uint32x2_t v77;
  int32x2_t v78;
  int32x2_t v79;
  int32x2_t v80;
  uint32x2_t v81;
  __int128 v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  double v93;
  double v94;
  float v95;
  float v96;
  float v97;
  double v98;
  double v99;
  double v100;
  double v101;
  float v102;
  float v103;
  double v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  double v110;
  double v111;
  double v112;
  double v113;
  uint64_t v114;
  unint64_t v115;
  float v116;
  float v117;
  double v118;
  float v119;
  double v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  uint64_t v130;
  double v131;
  double v132;
  float v133;
  double v134;
  float v135;
  double v136;
  float v137;
  float v138;
  float64x2_t *v139;
  uint32x2_t *v140;
  _OWORD *v141;
  int8x16_t v142;
  int8x16_t v143;
  unsigned __int32 v144;
  unsigned __int32 v145;
  __int128 v146;
  uint8_t buf[4];
  int v148;
  uint8_t v149[144];
  float32x4_t v150;
  uint64_t v151;
  uint64_t v152;

  v152 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v9 = a5;
    v11 = a3;
    v12 = *(_QWORD *)a7;
    if (a3[1].i8[4] == 51)
    {
      v13 = a5[1];
      v14 = vceqzq_f64(v13);
      v142 = 0u;
      if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v14, 1), (int8x16_t)v14).u64[0] & 0x8000000000000000) == 0)
      {
        v15 = vorrq_s8((int8x16_t)vcltzq_f64(v13), (int8x16_t)vcgezq_f64(v13));
        if ((vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v15), 1), v15).u64[0] & 0x8000000000000000) == 0)
        {
          v16 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(*a5, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
          v142 = (int8x16_t)vuzp1q_s32(v16, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(*a5, v13), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v16));
        }
      }
      v146 = 0uLL;
      v17 = *(_QWORD *)(a7 + 8);
      v151 = 0;
      v150 = (float32x4_t)v17;
      if ((*(unsigned int (**)(uint32x2_t *))(*(_QWORD *)a3 + 280))(a3))
      {
        v18 = (int32x2_t)vextq_s8(v142, v142, 8uLL).u64[0];
        v19 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v18);
        v20 = vadd_s32(*(int32x2_t *)v142.i8, v18);
        v144 = vpmax_u32(v19, v19).u32[0];
        while (1)
        {
          do
          {
            if (!CA::ShapeIterator::iterate((uint64_t *)&v150, (int *)&v146))
              goto LABEL_41;
            v21 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *(int32x2_t *)((char *)&v146 + 8));
          }
          while ((vpmax_u32(v21, v21).u32[0] & 0x80000000) != 0);
          if ((v144 & 0x80000000) == 0)
          {
            *(int32x2_t *)&v22 = vmax_s32(*(int32x2_t *)&v146, *(int32x2_t *)v142.i8);
            v23 = vsub_s32(vmin_s32(vadd_s32(*(int32x2_t *)&v146, *(int32x2_t *)((char *)&v146 + 8)), v20), *(int32x2_t *)&v22);
            v24 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v23);
            if ((vpmax_u32(v24, v24).u32[0] & 0x80000000) == 0)
              break;
          }
          *((_QWORD *)&v146 + 1) = 0;
        }
        *((int32x2_t *)&v22 + 1) = v23;
        v146 = v22;
        v25 = (uint32x2_t *)v11[20];
        if (v25)
          goto LABEL_42;
        memset(v149, 0, sizeof(v149));
        v26 = (unsigned int *)v11[21];
        if (v26)
        {
          v27 = v26 + 4;
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 + 1, v27));
          v29 = *(_OWORD *)v11[32].i8;
          *(_OWORD *)&v149[72] = *(_OWORD *)v11[30].i8;
          v30 = *(_OWORD *)v11[26].i8;
          *(_OWORD *)&v149[56] = *(_OWORD *)v11[28].i8;
          *(_OWORD *)&v149[40] = v30;
          v31 = *(_OWORD *)v11[22].i8;
          *(_OWORD *)&v149[24] = *(_OWORD *)v11[24].i8;
          v32 = *(_OWORD *)v11[34].i8;
          *(_OWORD *)&v149[120] = *(_OWORD *)v11[36].i8;
          *(_OWORD *)&v149[104] = v32;
          *(_OWORD *)&v149[88] = v29;
          *(_QWORD *)v149 = v26;
          v149[136] = v11[38].u8[0];
          *(_OWORD *)&v149[8] = v31;
          v33 = *(_QWORD *)(v12 + 200);
          v34 = (*(uint64_t (**)(unsigned int *, uint64_t))(*(_QWORD *)v26 + 56))(v26, v33);
          v35 = v149[136];
          v36 = (*(uint64_t (**)(uint32x2_t *))(*(_QWORD *)v11 + 256))(v11);
          v37 = (CA::Render::Surface *)(*(uint64_t (**)(unsigned int *, uint32x2_t *, uint64_t, uint8_t *, uint64_t, _QWORD, uint64_t, uint64_t, float, __int16))(*(_QWORD *)v26 + 24))(v26, v11, v33, &v149[8], v34, 0, v35, v36, 1.0, 1);
          if (v37)
          {
            v38 = (unsigned int *)v37;
            CA::Render::Surface::set_tonemapped_surface((CA::Render::Surface *)v11, v37);
            v39 = v38 + 2;
            do
            {
              v40 = __ldaxr(v39);
              v41 = v40 - 1;
            }
            while (__stlxr(v41, v39));
            if (!v41)
              (*(void (**)(unsigned int *))(*(_QWORD *)v38 + 16))(v38);
LABEL_31:
            v52 = *(_QWORD *)v149;
            if (*(_QWORD *)v149)
            {
              v53 = (unsigned int *)(*(_QWORD *)v149 + 16);
              do
              {
                v54 = __ldaxr(v53);
                v55 = v54 - 1;
              }
              while (__stlxr(v55, v53));
              if (!v55)
                (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
            }
            v25 = (uint32x2_t *)v11[20];
            if (!v25)
            {
              if (x_log_hook_p())
              {
                x_log_();
              }
              else
              {
                v56 = x_log_category_ogl;
                if (os_log_type_enabled((os_log_t)x_log_category_ogl, OS_LOG_TYPE_ERROR))
                {
                  v57 = v11[13].i32[0];
                  *(_DWORD *)v149 = 67109120;
                  *(_DWORD *)&v149[4] = v57;
                  _os_log_impl(&dword_184457000, v56, OS_LOG_TYPE_ERROR, "No valid tonemapped surface available for 0x%x", v149, 8u);
                }
              }
              goto LABEL_41;
            }
            goto LABEL_42;
          }
          if (x_log_hook_p())
          {
LABEL_25:
            x_log_();
            goto LABEL_31;
          }
          v50 = x_log_category_ogl;
          if (!os_log_type_enabled((os_log_t)x_log_category_ogl, OS_LOG_TYPE_ERROR))
            goto LABEL_31;
          v51 = v11[13].i32[0];
          *(_DWORD *)buf = 67109120;
          v148 = v51;
          v47 = "Failed to tonemap surface 0x%x";
          v48 = v50;
          v49 = 8;
        }
        else
        {
          v42 = *(_OWORD *)v11[30].i8;
          *(_OWORD *)&v149[88] = *(_OWORD *)v11[32].i8;
          v43 = *(_OWORD *)v11[36].i8;
          *(_OWORD *)&v149[104] = *(_OWORD *)v11[34].i8;
          *(_OWORD *)&v149[120] = v43;
          v44 = *(_OWORD *)v11[22].i8;
          *(_OWORD *)&v149[24] = *(_OWORD *)v11[24].i8;
          v45 = *(_OWORD *)v11[28].i8;
          *(_OWORD *)&v149[40] = *(_OWORD *)v11[26].i8;
          *(_OWORD *)&v149[56] = v45;
          *(_OWORD *)&v149[72] = v42;
          v149[136] = v11[38].u8[0];
          *(_OWORD *)&v149[8] = v44;
          if (x_log_hook_p())
            goto LABEL_25;
          v46 = x_log_category_ogl;
          if (!os_log_type_enabled((os_log_t)x_log_category_ogl, OS_LOG_TYPE_ERROR))
            goto LABEL_31;
          *(_WORD *)buf = 0;
          v47 = "Could not tonemap surface because of invalid configuration";
          v48 = v46;
          v49 = 2;
        }
        _os_log_impl(&dword_184457000, v48, OS_LOG_TYPE_ERROR, v47, buf, v49);
        goto LABEL_31;
      }
LABEL_41:
      v25 = v11;
LABEL_42:
      v11 = v25;
    }
    v150 = 0uLL;
    v58 = CA::OGL::Context::bind_image(v12, 0, v11, (double *)0x3F, 1u, 1, 0, 0, 0.0, &v150, 0);
    if (v58)
    {
      v140 = v11;
      v141 = v58;
      if (*(_BYTE *)(a7 + 56))
      {
        v139 = v9;
        *(_BYTE *)(*(_QWORD *)(v12 + 16) + 16) = 0;
        *(_QWORD *)(v12 + 128) = 0;
        *(_QWORD *)(v12 + 96) = v12 + 818;
        *(_OWORD *)(v12 + 104) = xmmword_18474E060;
        v146 = 0uLL;
        v59 = *(_QWORD *)(a7 + 8);
        *(_QWORD *)&v149[8] = 0;
        *(_QWORD *)&v149[16] = 0;
        *(_QWORD *)v149 = v59;
        while (CA::ShapeIterator::iterate((uint64_t *)v149, (int *)&v146))
        {
          v61 = v146;
          v60 = DWORD1(v146);
          v62 = DWORD2(v146);
          v63 = HIDWORD(v146);
          if (*(_DWORD *)(v12 + 92))
            v64 = 6;
          else
            v64 = 4;
          if ((unint64_t)(*(_QWORD *)(v12 + 128) + 4) > *(_QWORD *)(v12 + 136)
            || (v65 = *(_QWORD *)(v12 + 112)) != 0 && *(_QWORD *)(v12 + 104) + v64 > v65)
          {
            *(_WORD *)(v12 + 816) |= 0x20u;
            CA::OGL::Context::array_flush(v12);
            *(_QWORD *)(v12 + 128) = 0;
            *(_QWORD *)(v12 + 96) = v12 + 818;
            *(_OWORD *)(v12 + 104) = xmmword_18474E060;
          }
          CA::OGL::Context::array_rect((_QWORD *)v12, *(float *)(a7 + 16) * (float)v61, *(float *)(a7 + 16) * (float)v60, *(float *)(a7 + 16) * (float)(v62 + v61), *(float *)(a7 + 16) * (float)(v63 + v60));
          v66 = *(_QWORD *)(v12 + 120) + 48 * *(_QWORD *)(v12 + 128);
          *(_QWORD *)(v66 - 160) = 0;
          *(_QWORD *)(v66 - 112) = 0;
          *(_QWORD *)(v66 - 64) = 0;
          *(_QWORD *)(v66 - 16) = 0;
        }
        CA::OGL::Context::array_flush(v12);
        v9 = v139;
      }
      *(_BYTE *)(*(_QWORD *)(v12 + 16) + 16) = 1;
      *(_QWORD *)(v12 + 128) = 0;
      *(_QWORD *)(v12 + 96) = v12 + 818;
      *(_OWORD *)(v12 + 104) = xmmword_18474E060;
      v67 = v9[1];
      v68 = vceqzq_f64(v67);
      v143 = 0u;
      if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v68, 1), (int8x16_t)v68).u64[0] & 0x8000000000000000) == 0)
      {
        v69 = vorrq_s8((int8x16_t)vcltzq_f64(v67), (int8x16_t)vcgezq_f64(v67));
        if ((vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v69), 1), v69).u64[0] & 0x8000000000000000) == 0)
        {
          v70 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(*v9, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
          v143 = (int8x16_t)vuzp1q_s32(v70, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(*v9, v67), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v70));
        }
      }
      v71 = 0;
      v146 = 0uLL;
      v72 = *(_QWORD *)(a7 + 8);
      *(_QWORD *)&v149[8] = 0;
      *(_QWORD *)&v149[16] = 0;
      *(_QWORD *)v149 = v72;
      v73 = (int32x2_t)vextq_s8(v143, v143, 8uLL).u64[0];
      v74 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v73);
      v75 = vadd_s32(*(int32x2_t *)v143.i8, v73);
      v145 = vpmax_u32(v74, v74).u32[0];
      v76 = 1.0;
      while (CA::ShapeIterator::iterate((uint64_t *)v149, (int *)&v146))
      {
        v77 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *(int32x2_t *)((char *)&v146 + 8));
        if ((vpmax_u32(v77, v77).u32[0] & 0x80000000) == 0)
        {
          if ((v145 & 0x80000000) != 0
            || (v78 = vmax_s32(*(int32x2_t *)&v146, *(int32x2_t *)v143.i8),
                v79 = vmin_s32(vadd_s32(*(int32x2_t *)&v146, *(int32x2_t *)((char *)&v146 + 8)), v75),
                v80 = vsub_s32(v79, v78),
                v81 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v80),
                (vpmax_u32(v81, v81).u32[0] & 0x80000000) != 0))
          {
            *((_QWORD *)&v146 + 1) = 0;
          }
          else
          {
            *(int32x2_t *)&v82 = v78;
            *((int32x2_t *)&v82 + 1) = v80;
            v83 = (float)v78.i32[0];
            v146 = v82;
            v84 = (float)v78.i32[1];
            v85 = (float)v79.i32[0];
            v86 = (float)v79.i32[1];
            v87 = *(float *)(a7 + 16);
            if (v87 != v76)
            {
              v88 = v76 / v87;
              v89 = floorf(v87 * v83) * (float)(v76 / v87);
              v90 = floorf(v87 * v84) * (float)(v76 / v87);
              v91 = ceilf(v87 * v85) * (float)(v76 / v87);
              v92 = ceilf(v87 * v86) * (float)(v76 / v87);
              v93 = *(double *)(a7 + 24);
              v94 = *(double *)(a7 + 32);
              if (v93 == v89)
                v95 = v76 / v87;
              else
                v95 = 0.0;
              v83 = v89 - v95;
              if (v94 == v90)
                v96 = v76 / v87;
              else
                v96 = 0.0;
              v84 = v90 - v96;
              if (*(double *)(a7 + 40) + v93 == v91)
                v97 = v76 / v87;
              else
                v97 = -0.0;
              v85 = v97 + v91;
              if (*(double *)(a7 + 48) + v94 != v92)
                v88 = -0.0;
              v86 = v88 + v92;
            }
            v98 = v9->f64[1];
            v99 = v9[1].f64[0];
            v100 = v9[1].f64[1];
            v101 = (v83 - v9->f64[0]) / v99;
            *(float *)&v101 = v101;
            v102 = (v84 - v98) / v100;
            v103 = (v85 - v9->f64[0]) / v99;
            v104 = (v86 - v98) / v100;
            *(float *)&v104 = v104;
            v105 = v76 - v102;
            if ((a6 & 1) != 0)
              *(float *)&v104 = v76 - *(float *)&v104;
            else
              v105 = v102;
            if ((a6 & 2) != 0)
            {
              *(float *)&v101 = v76 - *(float *)&v101;
              v103 = v76 - v103;
            }
            v106 = v76 - *(float *)&v101;
            if ((a6 & 4) != 0)
              v107 = v105;
            else
              v107 = *(float *)&v101;
            if ((a6 & 4) != 0)
              v108 = v76 - v103;
            else
              v108 = v105;
            if ((a6 & 4) != 0)
              v109 = *(float *)&v104;
            else
              v109 = v103;
            if ((a6 & 4) == 0)
              v106 = *(float *)&v104;
            v110 = *a4;
            v111 = a4[1];
            LODWORD(v101) = v140[2].i32[0];
            LODWORD(v104) = v140[2].i32[1];
            v112 = a4[2];
            v113 = a4[3];
            if (*(_DWORD *)(v12 + 92))
              v114 = 6;
            else
              v114 = 4;
            if ((unint64_t)(v71 + 4) > *(_QWORD *)(v12 + 136)
              || (v115 = *(_QWORD *)(v12 + 112)) != 0 && *(_QWORD *)(v12 + 104) + v114 > v115)
            {
              *(_WORD *)(v12 + 816) |= 0x20u;
              v135 = v83;
              v133 = v85;
              v116 = v86;
              v137 = v108;
              v138 = v106;
              v117 = v109;
              v136 = v111;
              v134 = v113;
              v131 = v101;
              v132 = v104;
              CA::OGL::Context::array_flush(v12);
              v113 = v134;
              v111 = v136;
              v108 = v137;
              v106 = v138;
              v109 = v117;
              v86 = v116;
              v85 = v133;
              v83 = v135;
              *(_QWORD *)(v12 + 128) = 0;
              *(_QWORD *)(v12 + 96) = v12 + 818;
              *(_OWORD *)(v12 + 104) = xmmword_18474E060;
              v101 = v131;
              v104 = v132;
              v87 = *(float *)(a7 + 16);
            }
            v118 = (double)*(unint64_t *)&v101;
            v119 = v110 / v118;
            v120 = (double)*(unint64_t *)&v104;
            v121 = v111 / v120;
            *(float *)&v118 = (v112 + v110) / v118;
            *(float *)&v120 = (v113 + v111) / v120;
            *(float *)&v118 = *(float *)&v118 - v119;
            v122 = v119 + (float)(*(float *)&v118 * v107);
            *(float *)&v120 = *(float *)&v120 - v121;
            v123 = v121 + (float)(*(float *)&v120 * v108);
            v124 = v119 + (float)(*(float *)&v118 * v109);
            v125 = v121 + (float)(*(float *)&v120 * v106);
            CA::OGL::Context::array_rect((_QWORD *)v12, v87 * v83, v87 * v84, v87 * v85, v87 * v86);
            if ((a6 & 4) != 0)
              v126 = v125;
            else
              v126 = v123;
            if ((a6 & 4) != 0)
              v127 = v122;
            else
              v127 = v124;
            if ((a6 & 4) != 0)
              v128 = v123;
            else
              v128 = v125;
            if ((a6 & 4) != 0)
              v129 = v124;
            else
              v129 = v122;
            v71 = *(_QWORD *)(v12 + 128);
            v130 = *(_QWORD *)(v12 + 120) + 48 * v71;
            *(float *)(v130 - 176) = v122;
            *(float *)(v130 - 172) = v126;
            *(float *)(v130 - 128) = v127;
            *(float *)(v130 - 124) = v123;
            *(float *)(v130 - 80) = v124;
            *(float *)(v130 - 76) = v128;
            *(float *)(v130 - 32) = v129;
            *(float *)(v130 - 28) = v125;
            **(_BYTE **)(a7 + 64) = 1;
            v76 = 1.0;
          }
        }
      }
      CA::OGL::Context::array_flush(v12);
      (*(void (**)(uint64_t, _OWORD *, _QWORD))(*(_QWORD *)v12 + 520))(v12, v141, 0);
    }
  }
}

uint64_t CA::OGL::VariableBlurFilter::get_edge_info(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float *a6)
{
  uint64_t v8;
  double v9;
  double v10;
  float v11;
  float v12;
  float v13;
  double v15;
  double v16[2];

  v16[1] = *(double *)MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(*(_QWORD *)(a4 + 232) + 24);
  v15 = 0.0;
  v16[0] = 0.0;
  if ((*(_BYTE *)(v8 + 144) & 0x10) != 0)
  {
    CA::Mat4Impl::mat4_get_scale((CA::Mat4Impl *)v8, v16, &v15, (double *)a4);
    v9 = v15;
    v10 = v16[0];
  }
  else
  {
    v9 = *(double *)(v8 + 128);
    v15 = v9;
    v16[0] = v9;
    v10 = v9;
  }
  v11 = v10;
  v12 = v9;
  v13 = CA::Render::KeyValueArray::get_float_key(*(CA::Render::KeyValueArray **)(a2 + 40), (const CA::Render::KeyValueArray *)0x12E, 0.0)* 5.5999999;
  *a6 = v13 * v11;
  a6[1] = v13 * v12;
  return 0;
}

BOOL CA::Mat4Impl::mat4_is_affine_with_z_translate(CA::Mat4Impl *this, const double *a2)
{
  return *((double *)this + 2) == 0.0
      && *((double *)this + 3) == 0.0
      && *((double *)this + 6) == 0.0
      && *((double *)this + 7) == 0.0
      && *((double *)this + 8) == 0.0
      && *((double *)this + 9) == 0.0
      && *((double *)this + 10) == 1.0
      && *((double *)this + 11) == 0.0
      && *((double *)this + 15) == 1.0;
}

CATransform3D *__cdecl CATransform3DMakeAffineTransform(CATransform3D *__return_ptr retstr, CATransform3D *m)
{
  __int128 v2;

  retstr->m13 = 0.0;
  retstr->m14 = 0.0;
  *(_OWORD *)&retstr->m31 = 0u;
  *(_OWORD *)&retstr->m33 = xmmword_18474DF40;
  v2 = *(_OWORD *)&m->m13;
  *(_OWORD *)&retstr->m11 = *(_OWORD *)&m->m11;
  *(_OWORD *)&retstr->m21 = v2;
  *(_OWORD *)&retstr->m23 = 0u;
  *(_OWORD *)&retstr->m41 = *(_OWORD *)&m->m21;
  *(_OWORD *)&retstr->m43 = xmmword_18474DF50;
  return m;
}

void CA::Render::Updater::union_opaque_rect(uint64_t a1, uint64_t a2, const CA::Bounds *a3, float64x2_t a4, float64x2_t a5)
{
  int64x2_t v6;
  int8x16_t v7;
  float64x2_t v8;
  float64x2_t v9;
  int32x4_t v10;
  CA::Shape **v11;
  const CA::Shape *v12;
  const int *v13;
  int32x4_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v6 = vceqzq_f64(a5);
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v6, 1), (int8x16_t)v6).u64[0] & 0x8000000000000000) != 0
    || (v7 = vorrq_s8((int8x16_t)vcltzq_f64(a5), (int8x16_t)vcgezq_f64(a5)),
        (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v7), 1), v7).u64[0] & 0x8000000000000000) != 0))
  {
    v14 = 0uLL;
  }
  else
  {
    v8 = vmaxnmq_f64(a4, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000));
    v9 = vminnmq_f64(vaddq_f64(a4, a5), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL));
    v10 = (int32x4_t)vcvtpq_s64_f64(v8);
    v14 = vuzp1q_s32(v10, (int32x4_t)vsubq_s64(vcvtmq_s64_f64(v9), (int64x2_t)v10));
  }
  v11 = (CA::Shape **)(a2 + 56);
  CA::shape_union((CA::Shape **)(a2 + 56), (CA::Shape **)&v14, a3);
  CA::shape_subtract(v11, *(CA::Shape ***)(*(_QWORD *)a1 + 64), v12, v13);
}

int32x4_t *CA::Bounds::set_interior(int32x4_t *this, const Rect *a2, float64x2_t a3, float64x2_t a4)
{
  int64x2_t v4;
  int8x16_t v5;
  float64x2_t v6;
  float64x2_t v7;
  int32x4_t v8;

  v4 = vceqzq_f64(a4);
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v4, 1), (int8x16_t)v4).u64[0] & 0x8000000000000000) != 0
    || (v5 = vorrq_s8((int8x16_t)vcltzq_f64(a4), (int8x16_t)vcgezq_f64(a4)),
        (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v5), 1), v5).u64[0] & 0x8000000000000000) != 0))
  {
    this->i64[0] = 0;
    this->i64[1] = 0;
  }
  else
  {
    v6 = vmaxnmq_f64(a3, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000));
    v7 = vminnmq_f64(vaddq_f64(a3, a4), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL));
    v8 = (int32x4_t)vcvtpq_s64_f64(v6);
    *this = vuzp1q_s32(v8, (int32x4_t)vsubq_s64(vcvtmq_s64_f64(v7), (int64x2_t)v8));
  }
  return this;
}

double CA::Rect::apply_transform_interior(int8x16_t *this, const CA::Transform *a2)
{
  char v4;
  double result;
  double v6;
  double v7;
  double v8;
  double v9;
  double *v10;
  double v11;
  double v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  double v16;
  double v17[9];

  v17[8] = *(double *)MEMORY[0x1E0C80C00];
  v4 = *((_BYTE *)a2 + 144);
  if ((v4 & 0x10) != 0)
  {
    if (CA::Mat4Impl::mat4_is_rectilinear(a2, (const double *)a2))
    {
      CA::Mat4Impl::mat4_apply_to_rect((float64x2_t *)a2, this, v10);
    }
    else
    {
      v11 = *(double *)this[1].i64;
      result = *(double *)&this[1].i64[1];
      if (v11 <= result)
        v12 = *(double *)&this[1].i64[1];
      else
        v12 = *(double *)this[1].i64;
      if (v12 < 1.79769313e308)
      {
        v13 = 0;
        v14 = *(double *)&this->i64[1];
        v17[0] = *(double *)this->i64;
        v17[1] = v14;
        v17[2] = v11 + v17[0];
        v17[3] = v14;
        v17[4] = v11 + v17[0];
        v17[5] = result + v14;
        v17[6] = v17[0];
        v17[7] = result + v14;
        do
        {
          CA::Mat4Impl::mat4_apply_to_point2((float64x2_t *)a2, &v17[v13], v10);
          v13 += 2;
        }
        while (v13 != 8);
        CA::Rect::set_corners_interior((uint64_t)this, v17);
      }
    }
  }
  else
  {
    v6 = *(double *)this[1].i64;
    result = *(double *)&this[1].i64[1];
    if (v6 <= result)
      v7 = *(double *)&this[1].i64[1];
    else
      v7 = *(double *)this[1].i64;
    if (v7 < 1.79769313e308)
    {
      if ((*((_BYTE *)a2 + 144) & 8) != 0)
      {
        v8 = *(double *)&this->i64[1];
        *(double *)this->i64 = *(double *)this->i64 * *((double *)a2 + 16);
        *(double *)&this->i64[1] = v8 * *((double *)a2 + 16);
        v6 = *((double *)a2 + 16) * v6;
        *(double *)this[1].i64 = v6;
        result = *((double *)a2 + 16) * result;
        *(double *)&this[1].i64[1] = result;
        v4 = *((_BYTE *)a2 + 144);
      }
      if ((v4 & 4) != 0)
      {
        v15 = this->i64[0];
        *(double *)this->i64 = -(result + *(double *)&this->i64[1]);
        this->i64[1] = v15;
        *(double *)this[1].i64 = result;
        *(double *)&this[1].i64[1] = v6;
        v4 = *((_BYTE *)a2 + 144);
        v9 = v6;
        if ((v4 & 2) == 0)
        {
LABEL_22:
          v16 = *(double *)&this->i64[1];
          if ((v4 & 1) != 0)
          {
            v16 = -(v9 + v16);
            *(double *)&this->i64[1] = v16;
          }
          *(double *)this->i64 = *(double *)this->i64 + *((double *)a2 + 12);
          result = v16 + *((double *)a2 + 13);
          *(double *)&this->i64[1] = result;
          return result;
        }
      }
      else
      {
        v9 = result;
        result = v6;
        if ((v4 & 2) == 0)
          goto LABEL_22;
      }
      *(double *)this->i64 = -(result + *(double *)this->i64);
      v4 = *((_BYTE *)a2 + 144);
      goto LABEL_22;
    }
  }
  return result;
}

_DWORD *CA::OGL::CacheNode::compute_dod(CA::OGL::CacheNode *this, CA::Bounds *a2)
{
  _DWORD *result;
  _DWORD *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  _DWORD *v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;

  result = (_DWORD *)CA::OGL::Context::cache_fetch(**((_QWORD **)this + 1), (_DWORD *)this + 57);
  if (result)
  {
    v5 = result;
    v6 = result[9];
    v7 = result[10];
    if (v6 <= v7)
      v8 = result[10];
    else
      v8 = result[9];
    if (v8 > 1073741822
      || (v6 >= v7 ? (v9 = result[10]) : (v9 = result[9]), (*((_BYTE *)this + 224) & 1) != 0 && v9 < 1))
    {
      v10 = (_DWORD *)*((_QWORD *)this + 3);
      v6 = v10[34];
      if (v6 < 0)
      {
        result = (_DWORD *)(*(uint64_t (**)(_DWORD *, _DWORD *))(*(_QWORD *)v10 + 40))(v10, v10 + 32);
        v6 = v10[34];
      }
      v11 = v10[32];
      v12 = v10[33];
      v5[7] = v11;
      v5[8] = v12;
      v7 = v10[35];
      v5[9] = v6;
      v5[10] = v7;
    }
    else
    {
      v11 = result[7];
      v12 = result[8];
    }
    *(_DWORD *)a2 = v11;
    *((_DWORD *)a2 + 1) = v12;
    *((_DWORD *)a2 + 2) = v6;
  }
  else
  {
    v13 = *((_QWORD *)this + 3);
    v14 = *(_DWORD *)(v13 + 136);
    if (v14 < 0)
    {
      result = (_DWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)v13 + 40))(*((_QWORD *)this + 3), v13 + 128);
      v14 = *(_DWORD *)(v13 + 136);
    }
    *(_QWORD *)a2 = *(_QWORD *)(v13 + 128);
    *((_DWORD *)a2 + 2) = v14;
    v7 = *(_DWORD *)(v13 + 140);
  }
  *((_DWORD *)a2 + 3) = v7;
  return result;
}

uint64_t CA::OGL::LayerNode::compute_dod(uint64_t this, int32x2_t *a2, double *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  float64x2_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float64x2_t v13;
  int64x2_t v14;
  int64x2_t v15;
  int32x2_t v16;
  float64x2_t v17;
  uint64_t **v18;
  int32x2_t *v19;
  __int32 v20;
  int8x16_t v21;
  uint64_t *v22;
  float64x2_t v23;
  int8x16_t v24;
  uint64_t *v25;
  float64x2_t *v26;
  int64x2_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int32x4_t v30;
  int32x2_t v31;
  uint32x2_t v32;
  int32x2_t v33;
  uint32x2_t v34;
  int32x2_t v35;
  uint32x2_t v36;
  uint64_t v37;
  float64x2_t v38;
  double v39;
  BOOL v40;
  float64x2_t v41;
  float64x2_t v42;
  double v43;
  float64x2_t v44;
  int64x2_t v45;
  int64x2_t v46;
  int32x2_t v47;
  float64x2_t v48;
  int64x2_t v49;
  unint64_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int32x4_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  CA::Render::Path *v57;
  uint64_t v58;
  int8x16_t v59;
  uint64_t v60;
  double v61;
  float32x2_t *v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  int64x2_t v66;
  int64x2_t v67;
  int32x2_t v68;
  float64x2_t v69;
  double v70;
  int8x16_t *v71;
  int8x16_t v72;
  uint64_t v73;
  double v74;
  float64x2_t v75;
  int64x2_t v76;
  int64x2_t v77;
  int32x2_t v78;
  float64x2_t v79;
  double v80;
  double v81;
  float64x2_t v82;
  float64x2_t v83;
  int v84;
  double v85;
  double v86;
  int64x2_t v87;
  unint64_t v88;
  int32x4_t v89;
  int8x16_t v90;
  int32x4_t v91;
  int64x2_t v92;
  float64x2_t v93;
  int32x4_t v94;
  float64x2_t v95;
  float64x2_t v96;
  int32x2_t v97;
  int8x16_t v98;
  int8x16_t v99[3];
  float64x2_t v100;
  float64x2_t v101;
  uint64_t v102;

  v102 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(this + 16);
  *a2 = 0;
  a2[1] = 0;
  v4 = *(_QWORD *)(v3 + 32);
  if ((v4 & 8) != 0)
    return this;
  v6 = this;
  if ((v4 & 0x1000) != 0 && (*(_BYTE *)(*(_QWORD *)(v3 + 24) + 44) & 2) != 0)
  {
    *(_OWORD *)a2->i8 = xmmword_18474E240;
    return this;
  }
  if ((v4 & 0x40A0) == 0)
  {
    v100 = 0u;
    v101 = 0u;
    if ((v4 & 0x100) != 0)
      goto LABEL_27;
LABEL_11:
    if ((v4 & 0x200) == 0)
      goto LABEL_48;
    goto LABEL_28;
  }
  v7 = *(_QWORD *)(v3 + 24);
  v8 = *(float64x2_t *)(v7 + 80);
  v100 = *(float64x2_t *)(v7 + 64);
  v101 = v8;
  v9 = v3;
  if ((v4 & 0x80) != 0)
  {
    v10 = *(_QWORD *)(v7 + 128);
    v9 = v3;
    if (v10)
    {
      v11 = *(float *)(v10 + 232);
      v9 = v3;
      if (v11 > 0.0)
      {
        this = (uint64_t)CA::BoundsImpl::inset(v100.f64, (float)-v11, (float)-v11);
        v9 = *(_QWORD *)(v6 + 16);
      }
    }
  }
  if ((*(_WORD *)(v9 + 40) & 8) != 0)
  {
    if (*(_BYTE *)(**(_QWORD **)(v7 + 128) + 12) == 3)
      v12 = **(_QWORD **)(v7 + 128);
    else
      v12 = 0;
    memset(v99, 0, 32);
    this = (*(uint64_t (**)(uint64_t, uint64_t, int8x16_t *, _QWORD))(*(_QWORD *)v12 + 184))(v12, v7, v99, 0);
    if ((_DWORD)this)
    {
      v13 = (float64x2_t)v99[1];
      v14 = vclezq_f64(v101);
      v15 = vclezq_f64((float64x2_t)v99[1]);
      v16 = vmovn_s64(vcltzq_s64((int64x2_t)vorrq_s8((int8x16_t)vzip1q_s64(v15, v14), (int8x16_t)vzip2q_s64(v15, v14))));
      if ((v16.i8[4] & 1) != 0)
      {
        if ((v16.i8[0] & 1) != 0)
          goto LABEL_26;
        v17 = (float64x2_t)v99[0];
      }
      else
      {
        if ((v16.i8[0] & 1) != 0)
          goto LABEL_26;
        v17 = vminnmq_f64(v100, (float64x2_t)v99[0]);
        v13 = vsubq_f64(vmaxnmq_f64(vaddq_f64(v100, v101), vaddq_f64((float64x2_t)v99[0], (float64x2_t)v99[1])), v17);
      }
      v100 = v17;
      v101 = v13;
    }
LABEL_26:
    v4 = *(_QWORD *)(v3 + 32);
    if ((v4 & 0x100) != 0)
      goto LABEL_27;
    goto LABEL_11;
  }
  if ((v4 & 0x100) == 0)
    goto LABEL_11;
LABEL_27:
  v99[0] = 0uLL;
  CA::OGL::compute_contents_dod((uint64_t)v99, v3, v6 + 56, *(_QWORD *)(*(_QWORD *)(v3 + 16) + 48));
  this = CA::BoundsImpl::Union(a2, *(int32x2_t *)v99[0].i8, (int32x2_t)v99[0].u64[1]);
  if ((*(_QWORD *)(v3 + 32) & 0x200) == 0)
    goto LABEL_48;
LABEL_28:
  this = (uint64_t)CA::OGL::LayerNode::prepare_sublayers_if_needed((_QWORD *)v6);
  v18 = *(uint64_t ***)(v6 + 232);
  if (v18)
  {
    v95 = (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL);
    v96 = (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000);
    do
    {
      v19 = (int32x2_t *)v18[13];
      v20 = v19[17].i32[0];
      if (v20 < 0)
      {
        (*(void (**)(uint64_t *, int32x2_t *))(*(_QWORD *)v19 + 40))(v18[13], v19 + 16);
        v20 = v19[17].i32[0];
      }
      *(int32x2_t *)v21.i8 = v19[16];
      v21.i32[2] = v20;
      v21.i32[3] = v19[17].i32[1];
      if (((_BYTE)v18[4] & 3) == 0)
      {
        v22 = v18[3];
        if ((v22[5] & 0x40) != 0)
        {
          v97 = v19[16];
          v98 = v21;
          v23 = *((float64x2_t *)v22 + 4);
          v24 = *((int8x16_t *)v22 + 5);
          v99[0] = (int8x16_t)v23;
          v99[1] = v24;
          v25 = v18[2];
          v26 = (float64x2_t *)v25[7];
          if (v26)
            CA::Mat4Impl::mat4_apply_to_rect(v26, v99, a3);
          else
            v99[0] = (int8x16_t)vaddq_f64(*((float64x2_t *)v25 + 4), v23);
          CA::Rect::apply_transform(v99, *(const CA::Transform **)(v6 + 80), a3);
          v27 = vceqzq_f64((float64x2_t)v99[1]);
          v28 = 0uLL;
          if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v27, 1), (int8x16_t)v27).u64[0] & 0x8000000000000000) != 0)
          {
            v21 = v98;
          }
          else
          {
            v29 = vorrq_s8((int8x16_t)vcltzq_f64((float64x2_t)v99[1]), (int8x16_t)vcgezq_f64((float64x2_t)v99[1]));
            v21 = v98;
            if ((vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v29), 1), v29).u64[0] & 0x8000000000000000) == 0)
            {
              v30 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64((float64x2_t)v99[0], v96));
              v28 = (int8x16_t)vuzp1q_s32(v30, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64((float64x2_t)v99[0], (float64x2_t)v99[1]), v95)), (int64x2_t)v30));
            }
          }
          v31 = (int32x2_t)vextq_s8(v21, v21, 8uLL).u64[0];
          v32 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v31);
          if ((vpmax_u32(v32, v32).u32[0] & 0x80000000) == 0)
          {
            v33 = (int32x2_t)vextq_s8(v28, v28, 8uLL).u64[0];
            v34 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v33);
            if ((vpmax_u32(v34, v34).u32[0] & 0x80000000) != 0)
            {
              v21 = (int8x16_t)(unint64_t)v97;
            }
            else
            {
              *(int32x2_t *)v21.i8 = vmax_s32(v97, *(int32x2_t *)v28.i8);
              v35 = vsub_s32(vmin_s32(vadd_s32(v97, v31), vadd_s32(*(int32x2_t *)v28.i8, v33)), *(int32x2_t *)v21.i8);
              v36 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v35);
              if ((vpmax_u32(v36, v36).u32[0] & 0x80000000) != 0)
                v21 = (int8x16_t)(unint64_t)v97;
              else
                v21.u64[1] = (unint64_t)v35;
            }
          }
        }
      }
      this = CA::BoundsImpl::Union(a2, *(int32x2_t *)v21.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL));
      v18 = (uint64_t **)*v18;
    }
    while (v18);
  }
LABEL_48:
  if ((*(_BYTE *)(v3 + 33) & 0x20) == 0)
    goto LABEL_72;
  v37 = **(_QWORD **)(*(_QWORD *)(v3 + 24) + 128);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 176))(v37) & 1) != 0)
  {
    memset(v99, 0, sizeof(v99));
    this = (*(uint64_t (**)(uint64_t, _QWORD, int8x16_t *))(*(_QWORD *)v37 + 192))(v37, *(_QWORD *)(v3 + 24), v99);
    if ((_DWORD)this)
    {
      CA::Volume::apply_transform((CA::Volume *)v99, *(float64x2_t **)(v6 + 80), a3);
      v38 = vsubq_f64(*(float64x2_t *)((char *)&v99[1] + 8), (float64x2_t)v99[0]);
      if (v38.f64[0] >= v38.f64[1])
        v39 = v38.f64[1];
      else
        v39 = v38.f64[0];
      v40 = v39 <= 0.0;
      v41 = 0uLL;
      v42 = 0uLL;
      if (!v40)
      {
        if (v38.f64[0] <= v38.f64[1])
          v43 = v38.f64[1];
        else
          v43 = v38.f64[0];
        if (v43 >= 1.79769313e308)
        {
          v41 = (float64x2_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL);
          v42 = (float64x2_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
        }
        else
        {
          v42 = v38;
          v41 = (float64x2_t)v99[0];
        }
      }
      v49 = vceqzq_f64(v42);
      v50 = vorrq_s8((int8x16_t)vdupq_laneq_s64(v49, 1), (int8x16_t)v49).u64[0];
      v51 = 0uLL;
      if ((v50 & 0x8000000000000000) == 0)
      {
        v52 = vorrq_s8((int8x16_t)vcltzq_f64(v42), (int8x16_t)vcgezq_f64(v42));
        if ((vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v52), 1), v52).u64[0] & 0x8000000000000000) == 0)
        {
          v53 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v41, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
          v51 = (int8x16_t)vuzp1q_s32(v53, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v41, v42), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v53));
        }
      }
      this = CA::BoundsImpl::Union(a2, *(int32x2_t *)v51.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v51, v51, 8uLL));
    }
  }
  else
  {
    memset(v99, 0, 32);
    this = (*(uint64_t (**)(uint64_t, _QWORD, int8x16_t *, _QWORD))(*(_QWORD *)v37 + 184))(v37, *(_QWORD *)(v3 + 24), v99, 0);
    if (!(_DWORD)this)
      goto LABEL_72;
    v44 = (float64x2_t)v99[1];
    v45 = vclezq_f64(v101);
    v46 = vclezq_f64((float64x2_t)v99[1]);
    v47 = vmovn_s64(vcltzq_s64((int64x2_t)vorrq_s8((int8x16_t)vzip1q_s64(v46, v45), (int8x16_t)vzip2q_s64(v46, v45))));
    if ((v47.i8[4] & 1) != 0)
    {
      if ((v47.i8[0] & 1) != 0)
        goto LABEL_72;
      v48 = (float64x2_t)v99[0];
    }
    else
    {
      if ((v47.i8[0] & 1) != 0)
        goto LABEL_72;
      v48 = vminnmq_f64(v100, (float64x2_t)v99[0]);
      v44 = vsubq_f64(vmaxnmq_f64(vaddq_f64(v100, v101), vaddq_f64((float64x2_t)v99[0], (float64x2_t)v99[1])), v48);
    }
    v100 = v48;
    v101 = v44;
  }
LABEL_72:
  v54 = *(_QWORD *)(v3 + 32);
  if ((v54 & 0x1000) == 0)
    goto LABEL_92;
  v55 = *(_QWORD *)(v3 + 24);
  if ((*(_BYTE *)(v55 + 44) & 4) != 0)
  {
    v58 = v55 + 64;
  }
  else
  {
    v56 = *(_QWORD *)(v55 + 128);
    if (v56)
      v57 = *(CA::Render::Path **)(v56 + 120);
    else
      v57 = 0;
    v58 = CA::Render::Path::bounding_rect(v57);
    v55 = *(_QWORD *)(v3 + 24);
  }
  v59 = *(int8x16_t *)(v58 + 16);
  v99[0] = *(int8x16_t *)v58;
  v99[1] = v59;
  v60 = *(_QWORD *)(v55 + 128);
  if (v60)
    v61 = *(float *)(v60 + 224) * -2.8;
  else
    v61 = -8.4;
  this = (uint64_t)CA::BoundsImpl::inset((double *)v99[0].i64, v61, v61);
  v62 = *(float32x2_t **)(v55 + 128);
  if (v62)
    v63 = vcvtq_f64_f32(v62[27]);
  else
    v63 = (float64x2_t)xmmword_18474E0D0;
  v64 = (float64x2_t)v99[1];
  v65 = vaddq_f64((float64x2_t)v99[0], v63);
  v66 = vclezq_f64(v101);
  v67 = vclezq_f64((float64x2_t)v99[1]);
  v68 = vmovn_s64(vcltzq_s64((int64x2_t)vorrq_s8((int8x16_t)vzip1q_s64(v67, v66), (int8x16_t)vzip2q_s64(v67, v66))));
  if ((v68.i8[4] & 1) != 0)
  {
    if ((v68.i8[0] & 1) != 0)
      goto LABEL_91;
    goto LABEL_90;
  }
  if ((v68.i8[0] & 1) == 0)
  {
    v69 = vaddq_f64(v65, (float64x2_t)v99[1]);
    v65 = vminnmq_f64(v100, v65);
    v64 = vsubq_f64(vmaxnmq_f64(vaddq_f64(v100, v101), v69), v65);
LABEL_90:
    v100 = v65;
    v101 = v64;
  }
LABEL_91:
  v54 = *(_QWORD *)(v3 + 32);
LABEL_92:
  if ((v54 & 0x200000000) == 0)
  {
    v70 = v101.f64[0];
    goto LABEL_103;
  }
  v71 = *(int8x16_t **)(v3 + 24);
  v72 = v71[5];
  v99[0] = v71[4];
  v99[1] = v72;
  v73 = v71[8].i64[0];
  if (v73)
    v74 = *(float *)(v73 + 296);
  else
    v74 = 0.0;
  this = (uint64_t)CA::BoundsImpl::inset((double *)v99[0].i64, -v74, -v74);
  v70 = v101.f64[0];
  v75 = (float64x2_t)v99[1];
  v76 = vclezq_f64(v101);
  v77 = vclezq_f64((float64x2_t)v99[1]);
  v78 = vmovn_s64(vcltzq_s64((int64x2_t)vorrq_s8((int8x16_t)vzip1q_s64(v77, v76), (int8x16_t)vzip2q_s64(v77, v76))));
  if ((v78.i8[4] & 1) != 0)
  {
    if ((v78.i8[0] & 1) != 0)
      goto LABEL_103;
    v79 = (float64x2_t)v99[0];
  }
  else
  {
    if ((v78.i8[0] & 1) != 0)
      goto LABEL_103;
    v79 = vminnmq_f64(v100, (float64x2_t)v99[0]);
    v75 = vsubq_f64(vmaxnmq_f64(vaddq_f64(v100, v101), vaddq_f64((float64x2_t)v99[0], (float64x2_t)v99[1])), v79);
  }
  v100 = v79;
  v101 = v75;
  v70 = v75.f64[0];
LABEL_103:
  if (v70 != 0.0)
  {
    CA::Rect::apply_transform((int8x16_t *)&v100, *(const CA::Transform **)(v6 + 80), a3);
    if ((*(_WORD *)(v3 + 40) & 0x3C0) != 0)
    {
      v80 = v101.f64[1];
      v81 = v101.f64[0] <= v101.f64[1] ? v101.f64[1] : v101.f64[0];
      if (v81 < 1.79769313e308)
      {
        if (v101.f64[0] < v101.f64[1])
          v80 = v101.f64[0];
        if (v80 > 0.0)
        {
          v82 = vrndmq_f64(v100);
          v83 = vsubq_f64(vrndpq_f64(vaddq_f64(v100, v101)), v82);
          v100 = v82;
          v101 = v83;
        }
      }
    }
    CA::OGL::Context::raster_round_rect((CA::OGL::Context *)v99, **(const Rect ***)(v6 + 8), v100.f64);
    if (v99[0].i32[2] <= v99[0].i32[3])
      v84 = v99[0].i32[3];
    else
      v84 = v99[0].i32[2];
    v85 = (double)v99[0].i32[2];
    v86 = (double)v99[0].i32[3];
    if (v84 > 1073741822)
    {
      v85 = 1.79769313e308;
      v86 = 1.79769313e308;
    }
    v101.f64[0] = v85;
    v101.f64[1] = v86;
    v87 = vceqzq_f64(v101);
    v88 = vorrq_s8((int8x16_t)vdupq_laneq_s64(v87, 1), (int8x16_t)v87).u64[0];
    v89 = 0uLL;
    if ((v88 & 0x8000000000000000) == 0)
    {
      v90 = vorrq_s8((int8x16_t)vcltzq_f64(v101), (int8x16_t)vcgezq_f64(v101));
      v91 = (int32x4_t)vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v90), 1), v90);
      if ((v91.i64[0] & 0x8000000000000000) == 0)
      {
        v89.i32[0] = 1073741822;
        v91.i32[0] = v84;
        v92.i64[0] = v99[0].i32[0];
        v92.i64[1] = v99[0].i32[1];
        v93 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v91, v89), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v92));
        v94 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v93, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
        v89 = vuzp1q_s32(v94, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v93, v101), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v94));
      }
    }
    return CA::BoundsImpl::Union(a2, *(int32x2_t *)v89.i8, (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v89, (int8x16_t)v89, 8uLL));
  }
  return this;
}

uint64_t CA::Render::LayerSubclass::has_depth(CA::Render::LayerSubclass *this)
{
  return 0;
}

BOOL CA::Render::BackdropLayer::get_bounds(CA::Render::BackdropLayer *this, const CA::Render::Layer *a2, CA::Rect *a3, CA::Rect *a4)
{
  int v4;

  v4 = *((_DWORD *)this + 3) & 0x500;
  if (v4)
  {
    CA::Render::BackdropLayer::get_backdrop_bounds(this, a2, a3);
    if (!a4)
      return v4 != 0;
  }
  else
  {
    a4 = a3;
  }
  *(_OWORD *)a4 = 0u;
  *((_OWORD *)a4 + 1) = 0u;
  return v4 != 0;
}

uint64_t CA::OGL::compute_contents_dod(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int32x2_t *v4;
  int64x2_t v8;
  int8x16_t v9;
  int32x4_t v10;
  int32x2_t v11;
  int32x2_t v12;
  _OWORD v13[31];
  uint64_t v14;
  uint64_t v15;

  v4 = (int32x2_t *)result;
  v15 = *MEMORY[0x1E0C80C00];
  if (a4)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 80))(a4);
    if (result)
    {
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      result = CA::OGL::ContentsGeometry::ContentsGeometry((uint64_t)v13, a2, a3, result, a4, 0);
      v8 = vceqzq_f64(*(float64x2_t *)((char *)&v13[3] + 8));
      if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v8, 1), (int8x16_t)v8).u64[0] & 0x8000000000000000) == 0)
      {
        v9 = vorrq_s8((int8x16_t)vcltzq_f64(*(float64x2_t *)((char *)&v13[3] + 8)), (int8x16_t)vcgezq_f64(*(float64x2_t *)((char *)&v13[3] + 8)));
        if ((vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v9), 1), v9).u64[0] & 0x8000000000000000) == 0)
        {
          v10 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(*(float64x2_t *)((char *)&v13[2] + 8), (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
          *(int32x4_t *)v4->i8 = vuzp1q_s32(v10, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(*(float64x2_t *)((char *)&v13[2] + 8), *(float64x2_t *)((char *)&v13[3] + 8)), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v10));
          return result;
        }
      }
    }
    else if (*(_BYTE *)(a4 + 12) == 26)
    {
      v13[0] = 0uLL;
      v11 = 0;
      v12 = 0;
      CA::OGL::compute_contents_dod(v13, a2, a3, *(_QWORD *)(a4 + 24));
      CA::OGL::compute_contents_dod(&v11, a2, a3, *(_QWORD *)(a4 + 32));
      *(_OWORD *)v4->i8 = v13[0];
      return CA::BoundsImpl::Union(v4, v11, v12);
    }
  }
  *v4 = 0;
  v4[1] = 0;
  return result;
}

void CA::Render::LayerNode::MapPoints::apply(uint64_t a1, float64x2_t *this, double *a3)
{
  uint64_t v5;
  unint64_t v6;

  if (*(_QWORD *)(a1 + 8))
  {
    v5 = 0;
    v6 = 0;
    do
    {
      CA::Mat4Impl::mat4_apply_to_point2(this, (double *)(*(_QWORD *)(a1 + 16) + v5), a3);
      ++v6;
      v5 += 16;
    }
    while (v6 < *(_QWORD *)(a1 + 8));
  }
}

uint64_t CA::OGL::render_solid_background(CA::OGL::Context *this, uint64_t a2, float16x4_t *a3, uint64_t a4)
{
  uint64_t v8;
  float16x4_t v9;
  float16x4_t v10;
  uint64_t result;
  float64x2_t *v12;
  uint64_t v13;
  float64x2_t v14;
  int64x2_t v15;
  unint64_t v16;
  int8x16_t v17;
  int32x4_t v18;
  const double *v19;
  float64x2_t *v20;
  uint64_t v21;
  int8x16_t v22;
  double *v23;
  int v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  int32x2_t v30;
  int v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  _BOOL4 v41;
  unint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  float v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  float16x4_t *v51;
  unsigned int v52;
  int v53;
  float64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  int8x16_t v59;
  unsigned int v60;
  double *v61;
  _OWORD *v62;
  uint64_t v65;
  _BOOL4 v66;
  float16x4_t *v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  float64x2_t v71;
  __int128 v72;
  uint64_t v75;
  char v76;
  int v77;
  int8x16_t v78;
  int32x4_t v79;
  uint64_t v80;
  uint64_t v81;
  _DWORD *v82;
  double v83;
  double v84;
  double v85;
  double v86;
  int32x2_t v87;
  int v88;
  float64_t v89;
  uint64_t v90;
  uint64_t v91;
  double v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  double *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  double *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  float v106;
  int v107;
  float64_t v108;
  float v109;
  uint64_t v110;
  uint64_t v111;
  uint32x2_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v118;
  unsigned int v119;
  uint64_t v120;
  int32x4_t v121;
  uint64_t v122;
  float64x2_t v123;
  uint64_t v124;
  float64x2_t v125;
  uint64_t v126;
  CA::Shape *v127;
  float v129;
  float64x2_t v130;
  int v131;
  float64x2_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  __int128 v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  int v146;
  unsigned int v147;
  float64x2_t v148;
  float64x2_t v149;
  __int128 v150;
  float64x2_t v151;
  __int128 v152;
  float64x2_t v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  float64x2_t v158;
  int32x4_t v159;
  int v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  int32x4_t v168;
  uint64_t v169;

  v169 = *MEMORY[0x1E0C80C00];
  v8 = *((_QWORD *)this + 29);
  v9 = *(float16x4_t *)(v8 + 32);
  if (*(_QWORD *)&v9 == 0x3C003C003C003C00)
  {
    if (*a3)
      goto LABEL_6;
  }
  else
  {
    v10 = vcvt_f16_f32(vmulq_f32(vcvtq_f32_f16(v9), vcvtq_f32_f16(*a3)));
    *a3 = v10;
    if (v10)
      goto LABEL_6;
  }
  result = CA::OGL::Context::need_transparent_source(this);
  if (!(_DWORD)result)
    return result;
LABEL_6:
  v12 = *(float64x2_t **)(a2 + 24);
  v13 = (uint64_t)&v12[4];
  v14 = v12[5];
  v165 = v12[4];
  v166 = v14;
  CA::Rect::apply_transform((int8x16_t *)&v165, *(const CA::Transform **)(v8 + 24), (double *)a3);
  v15 = vceqzq_f64(v166);
  v16 = vorrq_s8((int8x16_t)vdupq_laneq_s64(v15, 1), (int8x16_t)v15).u64[0];
  v148 = v165;
  v149 = v166;
  if ((v16 & 0x8000000000000000) != 0
    || (v17 = vorrq_s8((int8x16_t)vcltzq_f64(v166), (int8x16_t)vcgezq_f64(v166)),
        (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v17), 1), v17).u64[0] & 0x8000000000000000) != 0))
  {
    v159 = 0uLL;
  }
  else
  {
    v18 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v165, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
    v159 = vuzp1q_s32(v18, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v165, v166), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v18));
  }
  result = CA::Shape::intersects(*(_QWORD *)(v8 + 8), (int32x2_t *)&v159);
  if ((_DWORD)result)
  {
    v20 = *(float64x2_t **)(v8 + 24);
    v21 = CA::OGL::transform_filter_bits(v20, v19, 1.0, 1.0);
    v22.i64[0] = 1.0;
    v24 = CA::OGL::rect_filter_bits(v20, v21, v23, v12[4], v12[5], v22, 1.0);
    v31 = v24;
    if (a4)
    {
      v32 = *(_QWORD *)(a2 + 24);
      v33 = *(_DWORD *)(v32 + 36);
      if ((v33 & 0xFu) > 0xA)
        v34 = 1;
      else
        v34 = CA::OGL::texture_filter(CA::Render::ImageFilter)::filters[v33 & 0xF];
      v147 = v34;
      v44 = v33 >> 4;
      if (v44 > 0xA)
        v45 = 1;
      else
        v45 = CA::OGL::texture_filter(CA::Render::ImageFilter)::filters[v44];
      v146 = v45;
      v46 = *(_QWORD *)(v32 + 128);
      if (v46)
        v47 = *(float *)(v46 + 288);
      else
        v47 = 0.0;
      v145 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 24);
      if ((*(_DWORD *)(a4 + 12) & 0x300) == 0x100
        && (*(unsigned int (**)(CA::OGL::Context *, _QWORD, uint64_t))(*(_QWORD *)this + 608))(this, *(_QWORD *)(a4 + 128), 1))
      {
        if ((*((_DWORD *)this + 104) & 2) != 0)
          v60 = v31 ^ 0x800;
        else
          v60 = v31;
        if ((v145 & 1) != 0)
          v61 = (double *)(v60 ^ 0x800);
        else
          v61 = (double *)v60;
        v168 = 0uLL;
        v167 = 0uLL;
        v62 = CA::OGL::Context::bind_image((uint64_t)this, 0, *(uint32x2_t **)(a4 + 128), v61, v147, v146, 1, 0, v47, (float32x4_t *)&v168, 0);
        if (!v62)
        {
          v77 = 0;
LABEL_139:
          v122 = 0;
          goto LABEL_140;
        }
        _H0 = a3->i16[3];
        __asm { FCVT            S0, H0 }
        v66 = 0;
        if (_S0 == 1.0)
        {
          v65 = *(_QWORD *)(a4 + 128);
          if (v65)
          {
            if ((*(_BYTE *)(v65 + 13) & 0x10) != 0
              && *(double *)(a4 + 96) <= *(double *)(a4 + 80)
              && *(double *)(a4 + 104) <= *(double *)(a4 + 88))
            {
              v66 = 1;
            }
          }
        }
        if ((v61 & 9) != 0 && (*(_WORD *)(a2 + 40) & 0x3C0) != 0 || (*(_BYTE *)(a2 + 32) & 0x10) != 0)
          v66 = 0;
        v67 = (float16x4_t *)*((_QWORD *)this + 2);
        v68 = v67[60].u8[0];
        v144 = v31;
        if (v68 >= 2 && (v68 != 3 || !v66))
        {
          v67[60].i8[1] |= 1u;
          v67 = (float16x4_t *)*((_QWORD *)this + 2);
        }
        v67[1] = *a3;
        v69 = *(_QWORD *)(a2 + 24);
        v70 = *(_QWORD *)(v69 + 128);
        *(_QWORD *)&v149.f64[0] = v62;
        LODWORD(v148.f64[0]) = v66;
        if (v70)
          v71 = *(float64x2_t *)(v70 + 152);
        else
          v71 = 0uLL;
        CA::OGL::pattern_texcoords((float64x2_t *)a4, (float *)v168.i32, (uint64_t)&v167, v12[4], v12[5], v71);
        v107 = (*(unsigned __int16 *)(a2 + 40) >> 6);
        v108 = *(double *)(v8 + 24);
        v159.i64[0] = (uint64_t)&v12[4];
        *(float64_t *)&v159.i64[1] = v108;
        v160 = (int)v61;
        v161 = v107;
        v163 = 0;
        v164 = 0;
        v162 = 0;
        v109 = 0.0;
        if (v70)
        {
          v110 = *(_QWORD *)(v70 + 72);
          if (v110)
          {
            CA::OGL::fill_uneven_round_rect_tex(this, (uint64_t)&v159, (float64_t *)(v110 + 24), (uint64_t)&v167, *(_DWORD *)(v69 + 40) & 3);
            v31 = v144;
            goto LABEL_138;
          }
          v111 = *(_QWORD *)(v70 + 56);
          if (v111)
          {
            v112 = (uint32x2_t *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v111 + 80))(v111, 0.0);
            v113 = *(_QWORD *)(a2 + 24);
            v114 = *(_QWORD *)(v113 + 128);
            v31 = v144;
            if (v114)
            {
              v115 = *(_QWORD *)(v114 + 64);
              if (v115)
              {
                if (*(_DWORD *)(v115 + 16) > 3u)
                {
                  v133 = vsubq_f64(*(float64x2_t *)(v115 + 40), *(float64x2_t *)(v115 + 24));
                  v157 = *(_OWORD *)(v115 + 24);
                  v158 = v133;
                }
                else
                {
                  v157 = 0u;
                  v158 = 0u;
                }
              }
              else
              {
                __asm { FMOV            V0.2D, #0.5 }
                v157 = _Q0;
                v158 = 0uLL;
              }
              v129 = *(float *)(v114 + 228);
            }
            else
            {
              __asm { FMOV            V0.2D, #0.5 }
              v157 = _Q0;
              v158 = 0uLL;
              v129 = 0.0;
            }
            CA::OGL::fill_corner_rect_tex(this, (double **)&v159, v112, (double *)&v157, *(_DWORD *)(*(_QWORD *)(a2 + 16) + 24) & 1, (*(_QWORD *)(v113 + 40) >> 41) & 1, (uint64_t)&v167, *(_WORD *)(v113 + 38) & 0xF, v129, v129, 0);
            goto LABEL_138;
          }
          v109 = *(float *)(v70 + 228);
        }
        v31 = v144;
        CA::OGL::fill_round_rect_tex(this, (float64x2_t **)&v159, (uint64_t)&v167, (double *)(*(_WORD *)(v69 + 38) & 0xF), *(_DWORD *)(v69 + 40) & 3, 0, v109, v109);
LABEL_138:
        *(_BYTE *)(*((_QWORD *)this + 2) + 481) &= ~1u;
        (*(void (**)(CA::OGL::Context *, _QWORD, _QWORD))(*(_QWORD *)this + 520))(this, *(_QWORD *)&v149.f64[0], 0);
        v77 = LODWORD(v148.f64[0]) ^ 1;
        goto LABEL_139;
      }
      if ((*(_BYTE *)(a2 + 32) & 0x10) == 0 && ((*(_WORD *)(a2 + 40) & 0x3C0) == 0 || (v31 & 9) == 0))
      {
        v72 = *(_OWORD *)(a4 + 32);
        v154 = *(_OWORD *)(a4 + 16);
        v155 = v72;
        v156 = *(_OWORD *)(a4 + 48);
        if ((CGAffineTransformIsRectilinear() & 1) != 0)
        {
          *(float16x4_t *)(*((_QWORD *)this + 2) + 8) = *a3;
          _H0 = a3->i16[3];
          __asm { FCVT            S0, H0 }
          if (_S0 == 1.0)
          {
            v75 = *(_QWORD *)(a4 + 128);
            v76 = v145;
            v77 = !v75
               || (*(_BYTE *)(v75 + 13) & 0x10) == 0
               || *(double *)(a4 + 96) > *(double *)(a4 + 80)
               || *(double *)(a4 + 104) > *(double *)(a4 + 88);
          }
          else
          {
            v77 = 1;
            v76 = v145;
          }
          v118 = *((_QWORD *)this + 2);
          v119 = *(unsigned __int8 *)(v118 + 480);
          if (v119 >= 2 && (v119 != 3 || v77))
            *(_BYTE *)(v118 + 481) |= 1u;
          v120 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 128);
          if (v120)
            v121 = *(int32x4_t *)(v120 + 152);
          else
            v121 = 0uLL;
          v159 = v121;
          CA::OGL::fill_pattern_rect((uint64_t)this, a4, v13, (float64x2_t *)&v159, *(_QWORD *)(*((_QWORD *)this + 29) + 24), &v165, v147, v146, v47, v76 & 1, 0);
          v122 = 0;
          *(_BYTE *)(*((_QWORD *)this + 2) + 481) &= ~1u;
          goto LABEL_140;
        }
      }
      if ((v16 & 0x8000000000000000) != 0
        || (v78 = vorrq_s8((int8x16_t)vcltzq_f64(v149), (int8x16_t)vcgezq_f64(v149)),
            (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v78), 1), v78).u64[0] & 0x8000000000000000) != 0))
      {
        v168 = 0uLL;
      }
      else
      {
        v79 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v148, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
        v168 = vuzp1q_s32(v79, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v148, v149), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v79));
      }
      v80 = CA::Shape::intersect(*(CA::Shape **)(v8 + 8), (const CA::Bounds *)&v168);
      CA::Shape::get_bounds(v80, v168.i32);
      v81 = (*(uint64_t (**)(CA::OGL::Context *, uint64_t, int32x4_t *, uint64_t))(*(_QWORD *)this + 656))(this, 1, &v168, 15);
      if (!v81)
      {
LABEL_129:
        CA::Shape::unref((CA::Shape *)v80);
        v77 = 1;
        v122 = 1;
LABEL_140:
        v131 = v77 != 0;
        goto LABEL_141;
      }
      v82 = (_DWORD *)v81;
      MEMORY[0x1E0C80A78](v81);
      v139 = 0x3C003C003C003C00;
      v142 = 0;
      v143 = 0;
      v140 = 0;
      v141 = 0;
      v137 = *(_OWORD *)(v8 + 8);
      v138 = *(_QWORD *)(v8 + 24);
      LODWORD(v143) = *(_DWORD *)(v8 + 64);
      WORD2(v143) = *(_WORD *)(v8 + 68) & 0x500 | 4;
      *(_QWORD *)&v149.f64[0] = v80;
      v136 = 0;
      *(_QWORD *)&v137 = v80;
      v136 = CA::OGL::Context::set_gstate((uint64_t)this, (uint64_t)&v136);
      CA::OGL::Context::push_surface((uint64_t)this, (uint64_t)v82, 1u, 2, 0);
      *(_QWORD *)(*((_QWORD *)this + 2) + 8) = 0x3C003C003C003C00;
      v88 = (*(unsigned __int16 *)(a2 + 40) >> 6);
      v89 = *(double *)(v8 + 24);
      v159.i64[0] = v13;
      *(float64_t *)&v159.i64[1] = v89;
      v160 = v31;
      v161 = v88;
      v163 = 0;
      v164 = 0;
      v162 = 0;
      v90 = *(_QWORD *)(a2 + 24);
      v91 = *(_QWORD *)(v90 + 128);
      LODWORD(v92) = 0;
      if (v91)
      {
        v93 = *(_QWORD *)(v91 + 72);
        v94 = v146;
        if (v93)
        {
          CA::OGL::fill_uneven_round_rect(this, (uint64_t)&v159, (float64_t *)(v93 + 24), (double *)(*(_DWORD *)(v90 + 40) & 3), v92, v83, v84, v85, v86, v87);
          goto LABEL_123;
        }
        v95 = *(_QWORD *)(v91 + 56);
        if (v95)
        {
          v96 = (double *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v95 + 80))(v95, 0.0);
          v97 = *(_QWORD *)(a2 + 24);
          v98 = *(_QWORD *)(v97 + 128);
          if (v98)
          {
            v99 = *(_QWORD *)(v98 + 64);
            if (v99)
            {
              if (*(_DWORD *)(v99 + 16) > 3u)
              {
                v123 = vsubq_f64(*(float64x2_t *)(v99 + 40), *(float64x2_t *)(v99 + 24));
                v152 = *(_OWORD *)(v99 + 24);
                v153 = v123;
              }
              else
              {
                v152 = 0u;
                v153 = 0u;
              }
            }
            else
            {
              __asm { FMOV            V0.2D, #0.5 }
              v152 = _Q0;
              v153 = 0uLL;
            }
            v106 = *(float *)(v98 + 228);
          }
          else
          {
            __asm { FMOV            V0.2D, #0.5 }
            v152 = _Q0;
            v153 = 0uLL;
            v106 = 0.0;
          }
          CA::OGL::fill_corner_rect((uint64_t)this, (double **)&v159, v96, (double *)&v152, *(_DWORD *)(*(_QWORD *)(a2 + 16) + 24) & 1, (*(_QWORD *)(v97 + 40) >> 41) & 1, *(_WORD *)(v97 + 38) & 0xF, v106, v106);
          goto LABEL_123;
        }
        LODWORD(v92) = *(_DWORD *)(v91 + 228);
      }
      else
      {
        v94 = v146;
      }
      CA::OGL::fill_round_rect((uint64_t)this, (float64x2_t **)&v159, (double *)(*(_WORD *)(v90 + 38) & 0xF), (double *)(*(_DWORD *)(v90 + 40) & 3), *(float *)&v92, *(float *)&v92);
LABEL_123:
      *(_BYTE *)(*((_QWORD *)this + 2) + 481) |= 1u;
      *(float16x4_t *)(*((_QWORD *)this + 2) + 8) = *a3;
      v124 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 128);
      if (v124)
        v125 = *(float64x2_t *)(v124 + 152);
      else
        v125 = 0uLL;
      v167 = v125;
      CA::OGL::fill_pattern_rect((uint64_t)this, a4, v13, &v167, *(_QWORD *)(*((_QWORD *)this + 29) + 24), &v165, v147, v94, v47, v145 & 1, 0);
      *(_BYTE *)(*((_QWORD *)this + 2) + 481) &= ~1u;
      CA::OGL::Context::pop_surface(this);
      CA::OGL::Context::set_gstate((uint64_t)this, **((_QWORD **)this + 29));
      v126 = *((_QWORD *)this + 2);
      if (*(unsigned __int8 *)(v126 + 480) >= 2u)
        *(_BYTE *)(v126 + 481) |= 1u;
      v127 = *(CA::Shape **)(v8 + 8);
      v167 = 0uLL;
      CA::OGL::emit_combine((uint64_t)this, 1, v82, 0, v127, (unsigned int *)&v167);
      *(_BYTE *)(*((_QWORD *)this + 2) + 481) &= ~1u;
      CA::OGL::Context::release_surface((uint64_t)this, (uint64_t)v82);
      v80 = *(_QWORD *)&v149.f64[0];
      goto LABEL_129;
    }
    _H0 = a3->i16[3];
    __asm { FCVT            S0, H0 }
    LODWORD(v26) = 1.0;
    v41 = _S0 == 1.0;
    if (_S0 == 1.0 && (v42 = *(char *)(*((_QWORD *)this + 2) + 480), v42 <= 3))
      v43 = dword_18474EA90[v42];
    else
      v43 = 0;
    if ((v24 & 9) != 0 && (*(_WORD *)(a2 + 40) & 0x3C0) != 0 || (*(_BYTE *)(a2 + 32) & 0x10) != 0)
      v41 = 0;
    v48 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 128);
    LODWORD(v25) = 0;
    if (v48)
    {
      LODWORD(v26) = *(_DWORD *)(v48 + 228);
      LODWORD(v25) = LODWORD(v26);
    }
    v49 = *(float *)&v25;
    v50 = *(_QWORD *)(a2 + 104);
    if (v50)
    {
      v25 = 0.0;
      if ((*(_BYTE *)(v50 + 222) & 0x20) != 0)
        v49 = 0.0;
    }
    v51 = (float16x4_t *)*((_QWORD *)this + 2);
    v52 = v51[60].u8[0];
    if (v52 >= 2 && (v52 != 3 || !v41))
    {
      v51[60].i8[1] |= 1u;
      v51 = (float16x4_t *)*((_QWORD *)this + 2);
    }
    v51[1] = *a3;
    v53 = (*(unsigned __int16 *)(a2 + 40) >> 6);
    v54 = *(double *)(v8 + 24);
    v159.i64[0] = v13;
    *(float64_t *)&v159.i64[1] = v54;
    v160 = v43 | v24;
    v161 = v53;
    v163 = 0;
    v164 = 0;
    v162 = 0;
    v55 = *(_QWORD *)(a2 + 24);
    v56 = *(_QWORD *)(v55 + 128);
    if (v56)
    {
      v57 = *(_QWORD *)(v56 + 72);
      if (v57)
      {
        CA::OGL::fill_uneven_round_rect(this, (uint64_t)&v159, (float64_t *)(v57 + 24), (double *)(*(_DWORD *)(v55 + 40) & 3), v25, v26, v27, v28, v29, v30);
LABEL_133:
        v122 = 0;
        *(_BYTE *)(*((_QWORD *)this + 2) + 481) &= ~1u;
        v131 = !v41;
LABEL_141:
        v134 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 144);
        if (v134)
          v135 = (*(_QWORD *)(v134 + 96) >> 53) & 7;
        else
          LODWORD(v135) = 0;
        return CA::OGL::fill_color_rect((uint64_t)this, v13, v31, (double *)v122, v131, v135, v58, v59);
      }
      v100 = *(_QWORD *)(v56 + 56);
      if (v100)
      {
        v101 = (double *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v100 + 80))(v100);
        v102 = *(_QWORD *)(a2 + 24);
        v103 = *(_QWORD *)(v102 + 128);
        if (v103 && (v104 = *(_QWORD *)(v103 + 64)) != 0)
        {
          if (*(_DWORD *)(v104 + 16) > 3u)
          {
            v130 = vsubq_f64(*(float64x2_t *)(v104 + 40), *(float64x2_t *)(v104 + 24));
            v150 = *(_OWORD *)(v104 + 24);
            v151 = v130;
          }
          else
          {
            v150 = 0u;
            v151 = 0u;
          }
        }
        else
        {
          __asm { FMOV            V0.2D, #0.5 }
          v150 = _Q0;
          v151 = 0uLL;
        }
        CA::OGL::fill_corner_rect((uint64_t)this, (double **)&v159, v101, (double *)&v150, *(_DWORD *)(*(_QWORD *)(a2 + 16) + 24) & 1, (*(_QWORD *)(v102 + 40) >> 41) & 1, *(_WORD *)(v102 + 38) & 0xF, v49, v49);
        goto LABEL_133;
      }
    }
    CA::OGL::fill_round_rect((uint64_t)this, (float64x2_t **)&v159, (double *)(*(_WORD *)(v55 + 38) & 0xF), (double *)(*(_DWORD *)(v55 + 40) & 3), v49, v49);
    goto LABEL_133;
  }
  return result;
}

uint64_t CA::OGL::rect_filter_bits(float64x2_t *this, uint64_t a2, double *a3, float64x2_t a4, float64x2_t a5, int8x16_t a6, double a7)
{
  uint64_t v7;
  int8x16_t v9;
  double *v11;
  int8x16_t v12;
  float64x2_t v13;
  int8x16_t v14;
  double v15;
  double v16;
  float64x2_t v17;
  int8x16_t v18;
  int8x16_t v20;
  float64x2_t v21;
  uint64_t v22;

  v7 = a2;
  v22 = *MEMORY[0x1E0C80C00];
  if ((~(_DWORD)a2 & 9) == 0)
    return v7;
  v9 = (int8x16_t)vaddq_f64(a5, a4);
  v20 = v9;
  v21 = a4;
  if (!(_DWORD)a2 && *(double *)a6.i64 == 1.0 && a7 == 1.0)
    goto LABEL_9;
  CA::Transform::apply_to_point2(this, v21.f64, a3);
  CA::Transform::apply_to_point2(this, (double *)v20.i64, v11);
  if ((v7 & 1) == 0)
  {
    a4.f64[0] = v21.f64[0];
    v9.i64[0] = v20.i64[0];
LABEL_9:
    a6.i64[0] = 0.5;
    v13.f64[0] = NAN;
    v13.f64[1] = NAN;
    v14 = (int8x16_t)vnegq_f64(v13);
    v12 = vbslq_s8(v14, a6, (int8x16_t)a4);
    v15 = vabdd_f64(trunc(*(double *)v12.i64 + a4.f64[0]), a4.f64[0]);
    v16 = vabdd_f64(trunc(*(double *)vbslq_s8(v14, a6, v9).i64 + *(double *)v9.i64), *(double *)v9.i64);
    if (v15 <= v16)
      v15 = v16;
    v7 = (v15 >= 0.001) | v7;
  }
  if ((v7 & 8) == 0)
  {
    a4.f64[0] = v21.f64[1];
    v9.i64[0] = 0.5;
    v17.f64[0] = NAN;
    v17.f64[1] = NAN;
    v18 = (int8x16_t)vnegq_f64(v17);
    v12.i64[0] = v20.i64[1];
    a4.f64[0] = vabdd_f64(trunc(*(double *)vbslq_s8(v18, v9, (int8x16_t)a4).i64 + v21.f64[1]), v21.f64[1]);
    *(double *)v9.i64 = vabdd_f64(trunc(*(double *)vbslq_s8(v18, v9, v12).i64 + *(double *)&v20.i64[1]), *(double *)&v20.i64[1]);
    if (a4.f64[0] <= *(double *)v9.i64)
      a4.f64[0] = *(double *)v9.i64;
    if (a4.f64[0] >= 0.001)
      return v7 | 8;
    else
      return v7;
  }
  return v7;
}

uint64_t CA::OGL::transform_filter_bits(float64x2_t *this, const double *a2, double a3, double a4)
{
  unsigned int v7;
  float64x2_t v8;
  float64x2_t v14;
  int v15;
  unsigned int v16;
  double v17;
  double v18;
  double v19;
  double v20;
  int8x16_t v21;
  float64x2_t v22;
  float64x2_t v24;
  unsigned int v25;
  uint64_t result;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;

  v7 = LOBYTE(this[9].f64[0]);
  if ((v7 & 0x10) != 0)
  {
    v18 = this[7].f64[1];
    v19 = 1.0;
    v20 = 1.0;
    if (fabs(v18 + -1.0) >= 0.001)
    {
      v20 = 1.0 / (v18 * v18);
      v19 = 1.0 / v18;
    }
    v33 = v19;
    if (CA::Mat4Impl::mat4_is_rectilinear((CA::Mat4Impl *)this, a2))
    {
      v21 = (int8x16_t)vmulq_n_f64(this[6], v33);
      v22.f64[0] = NAN;
      v22.f64[1] = NAN;
      __asm { FMOV            V2.2D, #0.5 }
      v24 = vabdq_f64(vrndq_f64(vaddq_f64((float64x2_t)vbslq_s8((int8x16_t)vnegq_f64(v22), _Q2, v21), (float64x2_t)v21)), (float64x2_t)v21);
      v25 = v24.f64[0] >= 0.001;
      if (v24.f64[1] >= 0.001)
        v25 |= 8u;
    }
    else
    {
      v25 = 9;
    }
    v28 = this->f64[0];
    v27 = this->f64[1];
    v29 = (v28 * v28 + v27 * v27) * v20;
    v30 = this[2].f64[0];
    v31 = this[2].f64[1];
    v32 = (v30 * v30 + v31 * v31) * v20;
    if (v29 >= a3 + -0.001)
    {
      if (v29 > a3 + 0.001)
        result = v25 | 4;
      else
        result = v25;
    }
    else
    {
      result = v25 | 2;
    }
    if (v32 >= a4 + -0.001)
    {
      if (v32 > a4 + 0.001)
        result = result | 0x20;
    }
    else
    {
      result = result | 0x10;
    }
    if (((result ^ (result >> 3)) & 7) != 0
      && fabs(v28) < 0.001
      && vabdd_f64(v28, v31) < 0.001
      && fabs(v30 + v27) < 0.001)
    {
      return result | 0x40;
    }
  }
  else
  {
    v8.f64[0] = NAN;
    v8.f64[1] = NAN;
    __asm { FMOV            V2.2D, #0.5 }
    v14 = vabdq_f64(vrndq_f64(vaddq_f64((float64x2_t)vbslq_s8((int8x16_t)vnegq_f64(v8), _Q2, (int8x16_t)this[6]), this[6])), this[6]);
    v15 = v14.f64[0] >= 0.001;
    if (v14.f64[1] >= 0.001)
      v15 |= 8u;
    v16 = v15 | (16 * v7) & 0x40 | (((v7 >> 1) & 1) << 7);
    v17 = this[8].f64[0];
    if (v17 >= a3 + -0.001)
    {
      if (v17 > a3 + 0.001)
        v16 |= 4u;
    }
    else
    {
      v16 |= 2u;
    }
    if (v17 >= a4 + -0.001)
    {
      if (v17 > a4 + 0.001)
        return v16 | 0x20;
      else
        return v16;
    }
    else
    {
      return v16 | 0x10;
    }
  }
  return result;
}

double CA::Transform::apply_to_point2(float64x2_t *this, double *a2, double *a3)
{
  char v3;
  double v4;
  double result;
  double v6;
  uint64_t v7;

  v3 = LOBYTE(this[9].f64[0]);
  if ((v3 & 0x10) != 0)
  {
    *(_QWORD *)&result = *(_OWORD *)&CA::Mat4Impl::mat4_apply_to_point2(this, a2, a3);
    return result;
  }
  if ((LOBYTE(this[9].f64[0]) & 8) == 0)
  {
    if ((LOBYTE(this[9].f64[0]) & 4) == 0)
      goto LABEL_4;
LABEL_11:
    v7 = *(_QWORD *)a2;
    *a2 = -a2[1];
    *((_QWORD *)a2 + 1) = v7;
    v3 = LOBYTE(this[9].f64[0]);
    if ((v3 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = a2[1];
  *a2 = *a2 * this[8].f64[0];
  a2[1] = v6 * this[8].f64[0];
  v3 = LOBYTE(this[9].f64[0]);
  if ((v3 & 4) != 0)
    goto LABEL_11;
LABEL_4:
  if ((v3 & 2) != 0)
  {
LABEL_5:
    *a2 = -*a2;
    v3 = LOBYTE(this[9].f64[0]);
  }
LABEL_6:
  v4 = a2[1];
  if ((v3 & 1) != 0)
  {
    v4 = -v4;
    a2[1] = v4;
  }
  *a2 = *a2 + this[6].f64[0];
  result = v4 + this[6].f64[1];
  a2[1] = result;
  return result;
}

BOOL CA::Mat4Impl::mat4_is_rectilinear(CA::Mat4Impl *this, const double *a2)
{
  if (fabs(*((double *)this + 3)) >= 0.000001
    || fabs(*((double *)this + 7)) >= 0.000001
    || fabs(*((double *)this + 15) + -1.0) >= 0.000001)
  {
    return 0;
  }
  if (fabs(*((double *)this + 1)) < 0.000001 && fabs(*((double *)this + 4)) < 0.000001)
    return 1;
  return fabs(*(double *)this) < 0.000001 && fabs(*((double *)this + 5)) < 0.000001;
}

void CA::Render::Updater::TransformOp::map_bounds(CA::Render::Updater::TransformOp *this, CA::Render::Updater::LayerShapes *a2, double *a3)
{
  double v5;
  double v6;
  void (*v7)(CA::Rect *, void *);
  int32x4_t v8;
  float64x2_t v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  unint64_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int v19;
  int64x2_t v20;
  int8x16_t v21;
  double v22;
  double v23;
  int64x2_t v24;
  int8x16_t v25;
  int32x4_t v26;
  const CA::Bounds *v27;
  uint64_t v28;
  int32x4_t v29;
  float64x2_t v30;
  _BYTE v31[24];
  double v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v5 = *((double *)a2 + 4);
  v6 = *((double *)a2 + 5);
  if (v5 == 0.0 && v6 == 0.0)
  {
    *(double *)v8.i64 = CA::Rect::apply_transform((int8x16_t *)a2, (CA::Render::Updater::TransformOp *)((char *)this + 24), a3);
  }
  else
  {
    v9 = *((float64x2_t *)a2 + 1);
    v30 = *(float64x2_t *)a2;
    *(float64x2_t *)&v31[8] = vaddq_f64(v9, v30);
    *(double *)v31 = v5;
    v32 = v6;
    CA::Volume::apply_transform((CA::Volume *)&v30, (float64x2_t *)((char *)this + 24), a3);
    v10 = *(_QWORD *)&v30.f64[1];
    v11 = *(double *)&v31[8] - v30.f64[0];
    v12 = *(double *)&v31[16] - v30.f64[1];
    if (*(double *)&v31[8] - v30.f64[0] >= *(double *)&v31[16] - v30.f64[1])
      v13 = *(double *)&v31[16] - v30.f64[1];
    else
      v13 = *(double *)&v31[8] - v30.f64[0];
    if (v13 <= 0.0)
    {
      v8.i64[1] = 0;
      *(_OWORD *)a2 = 0u;
      *((_OWORD *)a2 + 1) = 0u;
    }
    else
    {
      if (v11 <= v12)
        v14 = *(double *)&v31[16] - v30.f64[1];
      else
        v14 = *(double *)&v31[8] - v30.f64[0];
      if (v14 >= 1.79769313e308)
      {
        v8 = (int32x4_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL);
        *(int32x4_t *)a2 = v8;
        *((int64x2_t *)a2 + 1) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
      }
      else
      {
        *(float64_t *)a2 = v30.f64[0];
        *((_QWORD *)a2 + 1) = v10;
        *((double *)a2 + 2) = v11;
        *((double *)a2 + 3) = v12;
      }
    }
    v8.i64[0] = *(_QWORD *)v31;
    v15 = v32;
    *((_QWORD *)a2 + 4) = *(_QWORD *)v31;
    *((double *)a2 + 5) = v15;
  }
  if (!*((_BYTE *)this + 176))
    CA::BoundsImpl::inset((double *)a2, -1.0, -1.0);
  v16 = *((_QWORD *)a2 + 7);
  if (v16)
  {
    if ((v16 & 1) != 0)
    {
      if (v16 == 1)
        goto LABEL_38;
    }
    else if (*(_DWORD *)(v16 + 4) == 6)
    {
      goto LABEL_38;
    }
    v29 = 0uLL;
    CA::Shape::get_interior_bounds(v16, (CA::Bounds *)&v29);
    if (v29.i32[2] <= v29.i32[3])
      v19 = v29.i32[3];
    else
      v19 = v29.i32[2];
    v17.i32[0] = 1073741822;
    v18.i32[0] = v19;
    v20.i64[0] = v29.i32[0];
    v20.i64[1] = v29.i32[1];
    v21 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v18, v17), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v20));
    v22 = (double)v29.i32[2];
    if (v19 > 1073741822)
      v22 = 1.79769313e308;
    v30 = (float64x2_t)v21;
    if (v19 <= 1073741822)
      v23 = (double)v29.i32[3];
    else
      v23 = 1.79769313e308;
    *(double *)v31 = v22;
    *(double *)&v31[8] = v23;
    CA::Rect::apply_transform_interior((int8x16_t *)&v30, (CA::Render::Updater::TransformOp *)((char *)this + 24));
    v24 = vceqzq_f64(*(float64x2_t *)v31);
    if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v24, 1), (int8x16_t)v24).u64[0] & 0x8000000000000000) != 0
      || (v25 = vorrq_s8((int8x16_t)vcltzq_f64(*(float64x2_t *)v31), (int8x16_t)vcgezq_f64(*(float64x2_t *)v31)),
          (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v25), 1), v25).u64[0] & 0x8000000000000000) != 0))
    {
      v29 = 0uLL;
    }
    else
    {
      v26 = (int32x4_t)vcvtpq_s64_f64(vmaxnmq_f64(v30, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
      v29 = vuzp1q_s32(v26, (int32x4_t)vsubq_s64(vcvtmq_s64_f64(vminnmq_f64(vaddq_f64(v30, *(float64x2_t *)v31), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v26));
    }
    if (!*((_BYTE *)this + 176))
      CA::BoundsImpl::inset((double *)a2, 1.0, 1.0);
    CA::Shape::unref(*((CA::Shape **)a2 + 7));
    *((_QWORD *)a2 + 7) = CA::Shape::new_shape((CA::Shape *)&v29, v27);
  }
LABEL_38:
  if (*((_QWORD *)a2 + 8))
    CA::shape_map((CA::Shape **)a2 + 8, (CA::Shape **)this, (void (*)(CA::Rect *, void *))CA::Render::Updater::TransformOp::map_bounds(CA::Render::Updater::LayerShapes &,BOOL)::$_0::__invoke, v7, v8);
  v28 = *((_QWORD *)a2 + 6);
  if (v28)
  {
    if (*(_QWORD *)(v28 + 8))
      *(_BYTE *)(v28 + 17) = 1;
  }
}

double CA::Rect::apply_transform(int8x16_t *this, const CA::Transform *a2, double *a3)
{
  char v3;
  double result;
  double v5;
  double v6;
  double v7;
  double v8;
  uint64_t v9;
  double v10;

  v3 = *((_BYTE *)a2 + 144);
  if ((v3 & 0x10) != 0)
  {
    CA::Mat4Impl::mat4_apply_to_rect((float64x2_t *)a2, this, a3);
    return result;
  }
  v5 = *(double *)this[1].i64;
  result = *(double *)&this[1].i64[1];
  if (v5 <= result)
    v6 = *(double *)&this[1].i64[1];
  else
    v6 = *(double *)this[1].i64;
  if (v6 < 1.79769313e308)
  {
    if ((*((_BYTE *)a2 + 144) & 8) != 0)
    {
      v7 = *(double *)&this->i64[1];
      *(double *)this->i64 = *(double *)this->i64 * *((double *)a2 + 16);
      *(double *)&this->i64[1] = v7 * *((double *)a2 + 16);
      v5 = *((double *)a2 + 16) * v5;
      *(double *)this[1].i64 = v5;
      result = *((double *)a2 + 16) * result;
      *(double *)&this[1].i64[1] = result;
      v3 = *((_BYTE *)a2 + 144);
    }
    if ((v3 & 4) != 0)
    {
      v9 = this->i64[0];
      *(double *)this->i64 = -(result + *(double *)&this->i64[1]);
      this->i64[1] = v9;
      *(double *)this[1].i64 = result;
      *(double *)&this[1].i64[1] = v5;
      v3 = *((_BYTE *)a2 + 144);
      v8 = v5;
      if ((v3 & 2) == 0)
      {
LABEL_14:
        v10 = *(double *)&this->i64[1];
        if ((v3 & 1) != 0)
        {
          v10 = -(v8 + v10);
          *(double *)&this->i64[1] = v10;
        }
        *(double *)this->i64 = *(double *)this->i64 + *((double *)a2 + 12);
        result = v10 + *((double *)a2 + 13);
        *(double *)&this->i64[1] = result;
        return result;
      }
    }
    else
    {
      v8 = result;
      result = v5;
      if ((v3 & 2) == 0)
        goto LABEL_14;
    }
    *(double *)this->i64 = -(result + *(double *)this->i64);
    v3 = *((_BYTE *)a2 + 144);
    goto LABEL_14;
  }
  return result;
}

void CA::Mat4Impl::mat4_apply_to_rect(float64x2_t *this, int8x16_t *a2, double *a3)
{
  double v3;
  double v4;
  double v5;
  uint64_t v8;
  double v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int64x2_t v13;
  int8x16_t v14;
  int64x2_t v15;
  int8x16_t v16;
  BOOL v17;
  int8x16_t v18;
  unsigned int v19;
  int32x2_t v20;
  int64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v4 = *(double *)a2[1].i64;
  v3 = *(double *)&a2[1].i64[1];
  if (v4 <= v3)
    v5 = *(double *)&a2[1].i64[1];
  else
    v5 = *(double *)a2[1].i64;
  if (v5 < 1.79769313e308)
  {
    v8 = 0;
    v9 = *(double *)&a2->i64[1];
    *(_QWORD *)&v22.f64[0] = a2->i64[0];
    v22.f64[1] = v9;
    v23.f64[0] = v4 + v22.f64[0];
    v23.f64[1] = v9;
    v24.f64[0] = v4 + v22.f64[0];
    v24.f64[1] = v3 + v9;
    v25.f64[0] = v22.f64[0];
    v25.f64[1] = v3 + v9;
    do
    {
      CA::Mat4Impl::mat4_apply_to_point2(this, &v22.f64[v8], a3);
      v8 += 2;
    }
    while (v8 != 8);
    v10 = vbslq_s8((int8x16_t)vcgtq_f64(v23, v22), (int8x16_t)v22, (int8x16_t)v23);
    v11 = vbslq_s8((int8x16_t)vcgtq_f64(v22, v23), (int8x16_t)v22, (int8x16_t)v23);
    v12 = vbslq_s8((int8x16_t)vcgtq_f64(v25, v24), (int8x16_t)v24, (int8x16_t)v25);
    v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v24, v25), (int8x16_t)v24, (int8x16_t)v25);
    v14 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v12, (float64x2_t)v10), v10, v12);
    v15 = vcgtq_f64((float64x2_t)v11, (float64x2_t)v13);
    v16 = (int8x16_t)vsubq_f64((float64x2_t)vbslq_s8((int8x16_t)v15, v11, (int8x16_t)v13), (float64x2_t)v14);
    *(double *)v13.i64 = vaddvq_f64((float64x2_t)v16);
    v17 = (v13.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    v13.i64[0] &= ~0x8000000000000000;
    v15.i64[0] = 0x7FF0000000000000;
    v18 = vbslq_s8((int8x16_t)vdupq_lane_s64(vcgtq_s64(v15, v13).i64[0], 0), v16, (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL));
    v19 = v17;
    v20 = vdup_n_s32(v19);
    v21.i64[0] = v20.u32[0];
    v21.i64[1] = v20.u32[1];
    *a2 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v21, 0x3FuLL)), v14, (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL));
    a2[1] = v18;
  }
}

float64x2_t CA::Mat4Impl::mat4_apply_to_point2(float64x2_t *this, double *a2, double *a3)
{
  double v3;
  double v4;
  float64x2_t result;

  v3 = a2[1];
  v4 = this[7].f64[1] + this[1].f64[1] * *a2 + this[3].f64[1] * v3;
  if (fabs(v4 + -1.0) >= 0.000001)
  {
    if (v4 <= 0.0)
      v4 = INFINITY;
    else
      v4 = 1.0 / v4;
  }
  result = vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(this[6], *this, *a2), this[2], v3), v4);
  *(float64x2_t *)a2 = result;
  return result;
}

uint64_t CA::OGL::fill_color_rect(uint64_t result, uint64_t a2, int a3, double *a4, int a5, unsigned int a6, double a7, int8x16_t a8)
{
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;

  v11 = result;
  v26 = *MEMORY[0x1E0C80C00];
  v12 = a3 & 0xFFFF7FFF;
  if ((_DWORD)a4 && byte_1ECDC6A61)
  {
    v17 = *(_QWORD *)(*(_QWORD *)(result + 232) + 24);
    v19 = a2;
    v20 = v17;
    v21 = a3 & 0xFFFF7FFF;
    v25 = 0;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    result = CA::OGL::fill_color_rect(result, (uint64_t)&v19, (double *)0x80800080, a4, a7, a8);
  }
  if (BYTE2(ca_debug_options))
  {
    v14 = *(_QWORD *)(*(_QWORD *)(v11 + 232) + 24);
    v19 = a2;
    v20 = v14;
    v21 = v12;
    if (a5)
      v15 = 2147483776;
    else
      v15 = 8388736;
    v25 = 0;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    result = CA::OGL::fill_color_rect(v11, (uint64_t)&v19, (double *)v15, a4, a7, a8);
  }
  if (byte_1ECDC6ACD)
    v13 = a6 == 0;
  else
    v13 = 1;
  if (!v13)
  {
    if (a6 > 4)
      v16 = 2147516544;
    else
      v16 = CA::OGL::fill_color_rect(CA::OGL::Context &,CA::Rect const&,unsigned int,BOOL,BOOL,CA::Render::VelocityBucket)::velocity_colors[a6 - 1];
    v18 = *(_QWORD *)(*(_QWORD *)(v11 + 232) + 24);
    v19 = a2;
    v20 = v18;
    v21 = v12;
    v25 = 0;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    return CA::OGL::fill_color_rect(v11, (uint64_t)&v19, (double *)v16, a4, a7, a8);
  }
  return result;
}

uint64_t CA::OGL::fill_round_rect(uint64_t result, float64x2_t **a2, double *a3, double *a4, float64_t a5, float64_t a6)
{
  double v6;
  int v8;
  CA::OGL::Context *v10;
  float64x2_t *v11;
  double v12;
  double v13;
  float64x2_t v14;
  float64x2_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  int8x16_t v25;
  int8x16_t v31;
  float *v32;
  float64x2_t *v33;
  double v34;
  double v35;
  unsigned int v36;
  double v37;
  double v38;
  double v39;
  double v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  float v45[4];
  double v46;
  float v47;
  int v48;
  double v49[4];
  double v50[5];

  v50[4] = *(double *)MEMORY[0x1E0C80C00];
  v6 = (*a2)[1].f64[1];
  if ((*a2)[1].f64[0] < v6)
    v6 = (*a2)[1].f64[0];
  if (v6 > 0.0)
  {
    v8 = (int)a3;
    v10 = (CA::OGL::Context *)result;
    v39 = 0.0;
    v40 = 0.0;
    v44 = 0;
    v11 = a2[1];
    if ((LOBYTE(v11[9].f64[0]) & 0x10) != 0)
    {
      v37 = a5;
      v38 = a6;
      CA::Mat4Impl::mat4_get_scale((CA::Mat4Impl *)v11, &v40, &v39, a4);
      a5 = v37;
      a6 = v38;
      v12 = v39;
      v13 = v40;
    }
    else
    {
      v12 = v11[8].f64[0];
      v39 = v12;
      v40 = v12;
      v13 = v12;
    }
    v14.f64[0] = a5;
    v14.f64[1] = a6;
    v15 = vmulq_f64(v14, (float64x2_t)vdupq_n_s64(0x3FF875696E58A32FuLL));
    if ((_DWORD)a4)
      v16 = v15.f64[0];
    else
      v16 = a5;
    if ((_DWORD)a4)
      v17 = v15.f64[1];
    else
      v17 = a6;
    v18 = v13 * v16;
    v19 = v12 * v17;
    if (v18 >= v12 * v17)
      v19 = v18;
    if (!v8 || v19 < 1.0)
      return CA::OGL::fill_rect((uint64_t)v10, (uint64_t)a2, a3, a4);
    v20 = *((_DWORD *)a2 + 4);
    v21 = *((_QWORD *)v10 + 2);
    v22 = *(_QWORD *)(v21 + 16) & 0xFFFFFF00FF00FF00;
    if (*(_QWORD *)(v21 + 8) == 0x3C003C003C003C00)
      v23 = 1;
    else
      v23 = 3;
    *(_DWORD *)(v21 + 16) = v23 | v22;
    *(_DWORD *)(v21 + 20) = HIDWORD(v22);
    v24 = (v20 >> 21) & 1;
    if ((_DWORD)a4)
    {
      v25 = (int8x16_t)vaddq_f64(vdivq_f64(vmulq_f64((*a2)[1], (float64x2_t)vdupq_n_s64(0xBFF721E8A7A4B61BLL)), v15), (float64x2_t)vdupq_n_s64(0x400721E8A7A4B61BuLL));
      __asm { FMOV            V2.2D, #1.0 }
      v31 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v25, (float64x2_t)_Q2), _Q2, v25);
      *(float32x2_t *)&v50[0] = vcvt_f32_f64((float64x2_t)vbicq_s8(v31, (int8x16_t)vcltzq_f64((float64x2_t)v31)));
      LODWORD(a3) = vcvtpd_s64_f64(v19);
      (*(void (**)(CA::OGL::Context *, _QWORD, double *, _QWORD, uint64_t, uint64_t *, double *, double *))(*(_QWORD *)v10 + 464))(v10, 0, a3, 0, v24, &v44, a4, v50);
    }
    else
    {
      LODWORD(a3) = vcvtpd_s64_f64(v19);
      (*(void (**)(CA::OGL::Context *, _QWORD, double *, _QWORD, uint64_t, uint64_t *))(*(_QWORD *)v10 + 456))(v10, 0, a3, 0, v24, &v44);
    }
    v33 = *a2;
    v50[0] = (*a2)->f64[0];
    v50[1] = v50[0] + v16;
    v34 = v33[1].f64[0];
    v50[2] = v34 + v50[0] - v16;
    v50[3] = v34 + v50[0];
    v49[0] = v33->f64[1];
    v49[1] = v49[0] + v17;
    v35 = v33[1].f64[1];
    v49[2] = v35 + v49[0] - v17;
    v49[3] = v35 + v49[0];
    LODWORD(v46) = v44;
    *((float *)&v46 + 1) = *(float *)&v44 + (float)((float)(*((float *)&v44 + 1) - *(float *)&v44) * 0.5);
    v47 = *((float *)&v46 + 1);
    v48 = HIDWORD(v44);
    LODWORD(v45[0]) = v44;
    v45[1] = *((float *)&v46 + 1);
    v45[2] = *((float *)&v46 + 1);
    v45[3] = *((float *)&v44 + 1);
    if (v34 == v35 && v16 == v17 && fabs(v34 + v16 * -2.0) < 1.0)
    {
      if ((*((_BYTE *)a2 + 20) & 0xF) != 0)
      {
        if (v8 == 15 && ((_DWORD)a2[2] & 9) == 0)
          goto LABEL_30;
      }
      else if (v8 == 15)
      {
LABEL_30:
        v41 = v44;
        v42 = v44;
        v43 = HIDWORD(v44);
        CA::OGL::emit_one_part_rect(v10, (uint64_t)a2, (const CA::Transform *)&v41, 0, 0);
LABEL_36:
        result = (*(uint64_t (**)(CA::OGL::Context *, _QWORD, _QWORD))(*(_QWORD *)v10 + 520))(v10, 0, 0);
        *(_BYTE *)(*((_QWORD *)v10 + 2) + 16) = 0;
        return result;
      }
    }
    if ((_DWORD)a4)
      v36 = ~(v8 << 22) & 0x3C00000 | 0x20000;
    else
      v36 = ~(v8 << 22) & 0x3C00000;
    CA::OGL::emit_nine_part_rect((uint64_t)v10, (uint64_t)a2, (uint64_t)v50, (uint64_t)v49, (uint64_t)&v46, (uint64_t)v45, 0, 0, v36);
    goto LABEL_36;
  }
  return result;
}

uint64_t CA::OGL::fill_rect(uint64_t result, uint64_t a2, double *a3, double *a4)
{
  uint64_t v5;
  int v6;
  _BOOL4 v7;
  float64x2_t *v9;
  double v10;
  const CA::Transform *v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  _BOOL4 is_isotropic;
  float v16;
  int v17;
  float v18;
  float v19;
  float v20;
  float64x2_t v21;
  float16x4_t *v22;
  float16x4_t v23;
  int64x2_t v24;
  double v25;
  int8x16_t v26;
  int32x4_t v27;
  int v28;
  int v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  _BOOL4 v51;
  _BOOL4 v52;
  _BOOL4 v53;
  _BOOL4 v54;
  BOOL v55;
  double v56;
  double v57;
  BOOL v58;
  double v59;
  double v60;
  uint64_t v61;
  int v62;
  double v63;
  float64x2_t v64;
  double v65;
  double v66;
  uint64_t v68;
  char v69;
  unsigned int v70;
  float64_t v71;
  float v72;
  float v73;
  float v74;
  float v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  float64_t v81;
  float v82;
  float v83;
  float v84;
  float v85;
  __int16 v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  BOOL v94;
  BOOL v95;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  int v113;
  float v114;
  float v115;
  uint64_t v116;
  unint64_t v117;
  float v118;
  float16x4_t v119;
  uint64_t v120;
  float v121;
  float v122;
  float16x4_t v123;
  uint64_t v124;
  float v125;
  float16x4_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  float v130;
  float v131;
  float16x4_t v132;
  uint64_t v133;
  float v134;
  float v135;
  float v136;
  float16x4_t v137;
  uint64_t v138;
  float v139;
  float v140;
  float16x4_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  float v145;
  float v146;
  float16x4_t v147;
  uint64_t v148;
  float v149;
  float v150;
  float v151;
  float16x4_t v152;
  uint64_t v153;
  float v154;
  float v155;
  float16x4_t v156;
  uint64_t v157;
  uint64_t v158;
  float v159;
  float v160;
  double v161;
  float v162;
  float v163;
  float v164;
  double v165;
  float v166;
  double v167;
  float v168;
  float64x2_t v169;
  float v170;
  float v171;
  float64x2_t v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float v179;
  double v180;
  double v181;
  double v182;
  double v183;
  float64x2_t v184;
  double v185;
  int32x2_t v186[2];
  uint64_t v187;
  _BYTE v188[40];
  __int128 v189;
  float64x2_t v190;
  _BYTE v191[24];
  _BYTE v192[24];
  double v193;
  double v194;
  __int128 v195;
  double v196;
  double v197;
  __int128 v198;
  int32x4_t v199;
  float64x2_t v200;
  float64x2_t v201;
  uint64_t v202;

  v5 = result;
  v202 = *MEMORY[0x1E0C80C00];
  v6 = *(_DWORD *)(a2 + 16);
  v7 = (v6 & 9) == 0 || (*(_BYTE *)(a2 + 20) & 0xF) == 0;
  if (v7 && (v6 & 0x100000) == 0)
    goto LABEL_16;
  v9 = *(float64x2_t **)a2;
  v10 = *(double *)(*(_QWORD *)a2 + 16);
  if (v10 >= *(double *)(*(_QWORD *)a2 + 24))
    v10 = *(double *)(*(_QWORD *)a2 + 24);
  if (v10 > 0.0)
  {
    v11 = *(const CA::Transform **)(a2 + 8);
    if (((*((_BYTE *)v11 + 144) & 0x10) == 0
       || CA::Mat4Impl::mat4_is_rectilinear(*(CA::Mat4Impl **)(a2 + 8), (const double *)a2))
      && !*(_QWORD *)(a2 + 24)
      && !*(_QWORD *)(a2 + 32))
    {
      v21 = v9[1];
      v200 = *v9;
      v201 = v21;
      CA::Rect::apply_transform((int8x16_t *)&v200, v11, a3);
      v22 = *(float16x4_t **)(v5 + 16);
      v23 = v22[1];
      v24 = vceqzq_f64(v201);
      v25 = v201.f64[1];
      v172 = v200;
      v169 = v201;
      if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v24, 1), (int8x16_t)v24).u64[0] & 0x8000000000000000) != 0
        || (v26 = vorrq_s8((int8x16_t)vcltzq_f64(v201), (int8x16_t)vcgezq_f64(v201)),
            (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v26), 1), v26).u64[0] & 0x8000000000000000) != 0))
      {
        v199 = 0uLL;
      }
      else
      {
        v27 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v200, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
        v199 = vuzp1q_s32(v27, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v200, v201), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v27));
      }
      result = CA::OGL::Context::need_transparent_source((CA::OGL::Context *)v5);
      v28 = result | ((v6 & 0x40000u) >> 18);
      v22[2].i8[0] = 0;
      v29 = *(_DWORD *)(a2 + 20);
      *(_QWORD *)&v30 = *(_OWORD *)&vaddq_f64(v169, v172);
      v31 = v172.f64[1];
      v32 = v25 + v172.f64[1];
      if ((v29 & 0xF) != 0)
      {
        v33 = floor(v172.f64[0]);
        v34 = ceil(v172.f64[0]);
        v35 = round(v172.f64[0]);
        if ((v29 & 1) != 0)
          v36 = v33;
        else
          v36 = v35;
        if ((v29 & 1) != 0)
          v37 = v34;
        else
          v37 = v35;
        v38 = floor(v30);
        v39 = ceil(v30);
        v40 = round(v30);
        if ((v29 & 2) != 0)
        {
          v41 = v39;
        }
        else
        {
          v38 = v40;
          v41 = v40;
        }
        v42 = floor(v172.f64[1]);
        v43 = ceil(v172.f64[1]);
        v44 = round(v172.f64[1]);
        if ((v29 & 4) != 0)
          v45 = v42;
        else
          v45 = v44;
        if ((v29 & 4) != 0)
          v46 = v43;
        else
          v46 = v44;
        v47 = floor(v32);
        v48 = ceil(v32);
        v49 = round(v32);
        if ((v29 & 8) != 0)
        {
          v50 = v48;
        }
        else
        {
          v47 = v49;
          v50 = v49;
        }
        v51 = (~v29 & 3) == 0;
        v52 = v41 == v36 + 1.0;
        v53 = (~v29 & 0xC) == 0;
        v54 = v50 == v45 + 1.0;
        v55 = v51 && v52;
        v182 = v41;
        v183 = v36;
        if (v51 && v52)
          v56 = v36;
        else
          v56 = v37;
        if (v51 && v52)
          v57 = v41;
        else
          v57 = v38;
        v58 = v53 && v54;
        v180 = v50;
        v181 = v45;
        if (v53 && v54)
          v59 = v45;
        else
          v59 = v46;
        v185 = v59;
        if (v53 && v54)
          v60 = v50;
        else
          v60 = v47;
        v61 = *(_QWORD *)(v5 + 16);
        v161 = v25 + v172.f64[1];
        v167 = v30;
        if ((*(_BYTE *)(v61 + 481) & 1) != 0 && (*(_BYTE *)(a2 + 17) & 0x80) != 0 && !v55 && !v58)
        {
          *(_BYTE *)(v61 + 481) &= ~1u;
          if (v60 > v59 && v57 > v56)
          {
            v165 = v25;
            *(_OWORD *)v192 = 0u;
            v81 = *(double *)(*(_QWORD *)(v5 + 232) + 8);
            *(_QWORD *)&v190.f64[0] = v5;
            v190.f64[1] = v81;
            memset(v191, 0, sizeof(v191));
            *(_WORD *)&v191[16] = 257;
            CA::OGL::Context::ClippedArray::start((CA::OGL::Context::ClippedArray *)&v190);
            *(_OWORD *)v188 = 0uLL;
            v82 = v56;
            v83 = v57;
            v176 = v83;
            v178 = v82;
            v84 = v185;
            v174 = v84;
            v85 = v60;
            while (CA::OGL::Context::ClippedArray::next_rect((CA::OGL::Context::ClippedArray *)&v190, (int32x2_t *)v188))
            {
              v86 = *(_WORD *)(v5 + 816);
              v87 = v60;
              v88 = v174;
              v89 = v176;
              v90 = v178;
              if ((v86 & 0x40) != 0)
              {
                v91 = (float)(*(_DWORD *)&v188[8] + *(_DWORD *)v188);
                v92 = (float)*(int *)&v188[4];
                v93 = (float)(*(_DWORD *)&v188[12] + *(_DWORD *)&v188[4]);
                v90 = v178 <= (float)*(int *)v188 ? (float)*(int *)v188 : v178;
                v89 = v176 >= v91 ? (float)(*(_DWORD *)&v188[8] + *(_DWORD *)v188) : v176;
                v88 = v174 <= v92 ? (float)*(int *)&v188[4] : v174;
                v87 = v85 >= v93 ? (float)(*(_DWORD *)&v188[12] + *(_DWORD *)&v188[4]) : v60;
                v94 = v176 > (float)*(int *)v188 && v178 < v91;
                v95 = v94 && v85 > v92;
                if (!v95 || v174 >= v93)
                  continue;
              }
              if (*(_DWORD *)(v5 + 92))
                v97 = 6;
              else
                v97 = 4;
              if ((unint64_t)(*(_QWORD *)(v5 + 128) + 4) > *(_QWORD *)(v5 + 136)
                || (v98 = *(_QWORD *)(v5 + 112)) != 0 && *(_QWORD *)(v5 + 104) + v97 > v98)
              {
                *(_WORD *)(v5 + 816) = v86 | 0x20;
                CA::OGL::Context::array_flush(v5);
                *(_QWORD *)(v5 + 128) = 0;
                *(_QWORD *)(v5 + 96) = v5 + 818;
                *(_OWORD *)(v5 + 104) = xmmword_18474E060;
              }
              CA::OGL::Context::array_rect((_QWORD *)v5, v90, v88, v89, v87);
              v99 = *(_QWORD *)(v5 + 120) + 48 * *(_QWORD *)(v5 + 128);
              *(float16x4_t *)(v99 - 160) = v23;
              *(float16x4_t *)(v99 - 112) = v23;
              *(float16x4_t *)(v99 - 64) = v23;
              *(float16x4_t *)(v99 - 16) = v23;
            }
            v25 = v165;
            v31 = v172.f64[1];
          }
          v62 = 0;
          *(_BYTE *)(*(_QWORD *)(v5 + 16) + 481) |= 1u;
        }
        else
        {
          v62 = 1;
        }
        v189 = 0u;
        v101 = *(_QWORD *)(*(_QWORD *)(v5 + 232) + 8);
        *(_QWORD *)v188 = v5;
        *(_QWORD *)&v188[8] = v101;
        memset(&v188[16], 0, 24);
        *(_WORD *)&v188[32] = 256;
        *(_QWORD *)&v189 = &v199;
        CA::OGL::Context::ClippedArray::start((CA::OGL::Context::ClippedArray *)v188);
        v186[0] = 0;
        v186[1] = 0;
        v102 = v5 + 818;
        v103 = v183;
        v104 = v181;
        v177 = v104;
        v179 = v103;
        v105 = v185;
        v106 = v56 - v172.f64[0];
        v107 = v185 - v31;
        v171 = v107 * v106;
        v108 = v169.f64[0];
        v109 = 1.0;
        if (!v55)
          v108 = 1.0;
        if (v58)
        {
          v110 = v25;
          v109 = v110;
        }
        v170 = v108 * v107;
        v111 = v182;
        v175 = v111;
        v112 = v167 - v57;
        v168 = v107 * v112;
        v166 = v109 * v106;
        if (v57 > v56)
          v113 = v62;
        else
          v113 = 0;
        v164 = v109 * v108;
        v163 = v109 * v112;
        v114 = v161 - v60;
        v162 = v114 * v106;
        v160 = v108 * v114;
        v159 = v114 * v112;
        v115 = v180;
        v173 = v115;
        while (1)
        {
          result = CA::OGL::Context::ClippedArray::next_rect((CA::OGL::Context::ClippedArray *)v188, v186);
          if (!(_DWORD)result)
            break;
          if (v185 > v181)
          {
            if (*(_DWORD *)(v5 + 92))
              v116 = 18;
            else
              v116 = 12;
            if ((unint64_t)(*(_QWORD *)(v5 + 128) + 12) > *(_QWORD *)(v5 + 136)
              || (v117 = *(_QWORD *)(v5 + 112)) != 0 && *(_QWORD *)(v5 + 104) + v116 > v117)
            {
              *(_WORD *)(v5 + 816) |= 0x20u;
              CA::OGL::Context::array_flush(v5);
              *(_QWORD *)(v5 + 128) = 0;
              *(_QWORD *)(v5 + 96) = v102;
              *(_OWORD *)(v5 + 104) = xmmword_18474E060;
            }
            if (v56 > v183)
            {
              v118 = v56;
              CA::OGL::Context::array_rect((_QWORD *)v5, v179, v177, v118, v105);
              v119 = vcvt_f16_f32(vmulq_n_f32(vcvtq_f32_f16(v23), v171));
              v120 = *(_QWORD *)(v5 + 120) + 48 * *(_QWORD *)(v5 + 128);
              *(float16x4_t *)(v120 - 160) = v119;
              *(float16x4_t *)(v120 - 112) = v119;
              *(float16x4_t *)(v120 - 64) = v119;
              *(float16x4_t *)(v120 - 16) = v119;
            }
            if (v57 > v56)
            {
              v121 = v56;
              v122 = v57;
              CA::OGL::Context::array_rect((_QWORD *)v5, v121, v177, v122, v105);
              v123 = vcvt_f16_f32(vmulq_n_f32(vcvtq_f32_f16(v23), v170));
              v124 = *(_QWORD *)(v5 + 120) + 48 * *(_QWORD *)(v5 + 128);
              *(float16x4_t *)(v124 - 160) = v123;
              *(float16x4_t *)(v124 - 112) = v123;
              *(float16x4_t *)(v124 - 64) = v123;
              *(float16x4_t *)(v124 - 16) = v123;
            }
            if (v182 > v57)
            {
              v125 = v57;
              CA::OGL::Context::array_rect((_QWORD *)v5, v125, v177, v175, v105);
              v126 = vcvt_f16_f32(vmulq_n_f32(vcvtq_f32_f16(v23), v168));
              v127 = *(_QWORD *)(v5 + 120) + 48 * *(_QWORD *)(v5 + 128);
              *(float16x4_t *)(v127 - 160) = v126;
              *(float16x4_t *)(v127 - 112) = v126;
              *(float16x4_t *)(v127 - 64) = v126;
              *(float16x4_t *)(v127 - 16) = v126;
            }
          }
          if (v60 > v185)
          {
            if (*(_DWORD *)(v5 + 92))
              v128 = 18;
            else
              v128 = 12;
            if ((unint64_t)(*(_QWORD *)(v5 + 128) + 12) > *(_QWORD *)(v5 + 136)
              || (v129 = *(_QWORD *)(v5 + 112)) != 0 && *(_QWORD *)(v5 + 104) + v128 > v129)
            {
              *(_WORD *)(v5 + 816) |= 0x20u;
              CA::OGL::Context::array_flush(v5);
              *(_QWORD *)(v5 + 128) = 0;
              *(_QWORD *)(v5 + 96) = v102;
              *(_OWORD *)(v5 + 104) = xmmword_18474E060;
            }
            if (v56 > v183)
            {
              v130 = v56;
              v131 = v60;
              CA::OGL::Context::array_rect((_QWORD *)v5, v179, v105, v130, v131);
              v132 = vcvt_f16_f32(vmulq_n_f32(vcvtq_f32_f16(v23), v166));
              v133 = *(_QWORD *)(v5 + 120) + 48 * *(_QWORD *)(v5 + 128);
              *(float16x4_t *)(v133 - 160) = v132;
              *(float16x4_t *)(v133 - 112) = v132;
              *(float16x4_t *)(v133 - 64) = v132;
              *(float16x4_t *)(v133 - 16) = v132;
            }
            if (v113)
            {
              v134 = v56;
              v135 = v57;
              v136 = v60;
              CA::OGL::Context::array_rect((_QWORD *)v5, v134, v105, v135, v136);
              v137 = vcvt_f16_f32(vmulq_n_f32(vcvtq_f32_f16(v23), v164));
              v138 = *(_QWORD *)(v5 + 120) + 48 * *(_QWORD *)(v5 + 128);
              *(float16x4_t *)(v138 - 160) = v137;
              *(float16x4_t *)(v138 - 112) = v137;
              *(float16x4_t *)(v138 - 64) = v137;
              *(float16x4_t *)(v138 - 16) = v137;
            }
            if (v182 > v57)
            {
              v139 = v57;
              v140 = v60;
              CA::OGL::Context::array_rect((_QWORD *)v5, v139, v105, v175, v140);
              v141 = vcvt_f16_f32(vmulq_n_f32(vcvtq_f32_f16(v23), v163));
              v142 = *(_QWORD *)(v5 + 120) + 48 * *(_QWORD *)(v5 + 128);
              *(float16x4_t *)(v142 - 160) = v141;
              *(float16x4_t *)(v142 - 112) = v141;
              *(float16x4_t *)(v142 - 64) = v141;
              *(float16x4_t *)(v142 - 16) = v141;
            }
          }
          if (v180 > v60)
          {
            if (*(_DWORD *)(v5 + 92))
              v143 = 18;
            else
              v143 = 12;
            if ((unint64_t)(*(_QWORD *)(v5 + 128) + 12) > *(_QWORD *)(v5 + 136)
              || (v144 = *(_QWORD *)(v5 + 112)) != 0 && *(_QWORD *)(v5 + 104) + v143 > v144)
            {
              *(_WORD *)(v5 + 816) |= 0x20u;
              CA::OGL::Context::array_flush(v5);
              *(_QWORD *)(v5 + 128) = 0;
              *(_QWORD *)(v5 + 96) = v102;
              *(_OWORD *)(v5 + 104) = xmmword_18474E060;
            }
            if (v56 > v183)
            {
              v145 = v60;
              v146 = v56;
              CA::OGL::Context::array_rect((_QWORD *)v5, v179, v145, v146, v173);
              v147 = vcvt_f16_f32(vmulq_n_f32(vcvtq_f32_f16(v23), v162));
              v148 = *(_QWORD *)(v5 + 120) + 48 * *(_QWORD *)(v5 + 128);
              *(float16x4_t *)(v148 - 160) = v147;
              *(float16x4_t *)(v148 - 112) = v147;
              *(float16x4_t *)(v148 - 64) = v147;
              *(float16x4_t *)(v148 - 16) = v147;
            }
            if (v57 > v56)
            {
              v149 = v56;
              v150 = v60;
              v151 = v57;
              CA::OGL::Context::array_rect((_QWORD *)v5, v149, v150, v151, v173);
              v152 = vcvt_f16_f32(vmulq_n_f32(vcvtq_f32_f16(v23), v160));
              v153 = *(_QWORD *)(v5 + 120) + 48 * *(_QWORD *)(v5 + 128);
              *(float16x4_t *)(v153 - 160) = v152;
              *(float16x4_t *)(v153 - 112) = v152;
              *(float16x4_t *)(v153 - 64) = v152;
              *(float16x4_t *)(v153 - 16) = v152;
            }
            if (v182 > v57)
            {
              v154 = v57;
              v155 = v60;
              CA::OGL::Context::array_rect((_QWORD *)v5, v154, v155, v175, v173);
              v156 = vcvt_f16_f32(vmulq_n_f32(vcvtq_f32_f16(v23), v159));
              v157 = *(_QWORD *)(v5 + 120) + 48 * *(_QWORD *)(v5 + 128);
              *(float16x4_t *)(v157 - 160) = v156;
              *(float16x4_t *)(v157 - 112) = v156;
              *(float16x4_t *)(v157 - 64) = v156;
              *(float16x4_t *)(v157 - 16) = v156;
            }
          }
        }
        if (!v28)
          goto LABEL_17;
        v190.f64[0] = v183;
        v190.f64[1] = v181;
        *(_OWORD *)v191 = xmmword_18474DF50;
        *(double *)&v191[16] = v182;
        *(double *)v192 = v181;
        *(_OWORD *)&v192[8] = xmmword_18474DF50;
        v193 = v182;
        v194 = v180;
        v195 = xmmword_18474DF50;
        v196 = v183;
        v197 = v180;
        v198 = xmmword_18474DF50;
        if ((*(_BYTE *)(a2 + 18) & 4) != 0)
          v158 = *(_QWORD *)(*(_QWORD *)(v5 + 16) + 8);
        else
          v158 = 0;
        v187 = v158;
        v100 = &v187;
      }
      else
      {
        if ((*(_DWORD *)(a2 + 16) & 0x100000) != 0)
        {
          v63 = ceil(v30 + -0.001);
          v64 = vrndmq_f64(vaddq_f64(v172, (float64x2_t)vdupq_n_s64(0x3F50624DD2F1A9FCuLL)));
          v65 = ceil(v32 + -0.001);
        }
        else
        {
          v63 = round(v30);
          v64 = vrndaq_f64(v172);
          v65 = round(v32);
        }
        v66 = v64.f64[1];
        if (v65 > v64.f64[1] && v63 > v64.f64[0])
        {
          v184 = v64;
          v68 = *(_QWORD *)(v5 + 16);
          v69 = *(_BYTE *)(v68 + 481);
          v70 = *(_DWORD *)&v69 & ((*(_DWORD *)(a2 + 16) & 0x8000u) >> 15);
          if (v70 == 1)
            *(_BYTE *)(v68 + 481) = v69 & 0xFE;
          *(_OWORD *)v192 = 0u;
          v71 = *(double *)(*(_QWORD *)(v5 + 232) + 8);
          *(_QWORD *)&v190.f64[0] = v5;
          v190.f64[1] = v71;
          memset(v191, 0, sizeof(v191));
          *(_WORD *)&v191[16] = 256;
          *(_QWORD *)v192 = &v199;
          CA::OGL::Context::ClippedArray::start((CA::OGL::Context::ClippedArray *)&v190);
          *(_OWORD *)v188 = 0uLL;
          while (1)
          {
            result = CA::OGL::Context::ClippedArray::next_rect((CA::OGL::Context::ClippedArray *)&v190, (int32x2_t *)v188);
            if (!(_DWORD)result)
              break;
            if (*(_DWORD *)(v5 + 92))
              v76 = 6;
            else
              v76 = 4;
            if ((unint64_t)(*(_QWORD *)(v5 + 128) + 4) > *(_QWORD *)(v5 + 136)
              || (v77 = *(_QWORD *)(v5 + 112)) != 0 && *(_QWORD *)(v5 + 104) + v76 > v77)
            {
              *(_WORD *)(v5 + 816) |= 0x20u;
              CA::OGL::Context::array_flush(v5);
              *(_QWORD *)(v5 + 128) = 0;
              *(_QWORD *)(v5 + 96) = v5 + 818;
              *(_OWORD *)(v5 + 104) = xmmword_18474E060;
            }
            v73 = v66;
            v74 = v63;
            v75 = v65;
            v72 = v184.f64[0];
            CA::OGL::Context::array_rect((_QWORD *)v5, v72, v73, v74, v75);
            v78 = *(_QWORD *)(v5 + 120) + 48 * *(_QWORD *)(v5 + 128);
            *(float16x4_t *)(v78 - 160) = v23;
            *(float16x4_t *)(v78 - 112) = v23;
            *(float16x4_t *)(v78 - 64) = v23;
            *(float16x4_t *)(v78 - 16) = v23;
          }
          if (v70)
            *(_BYTE *)(*(_QWORD *)(v5 + 16) + 481) |= 1u;
          v64 = v184;
        }
        if (!v28)
          goto LABEL_17;
        v190 = v64;
        *(_OWORD *)v191 = xmmword_18474DF50;
        *(double *)&v191[16] = v63;
        *(double *)v192 = v66;
        *(_OWORD *)&v192[8] = xmmword_18474DF50;
        v193 = v63;
        v194 = v65;
        v195 = xmmword_18474DF50;
        v196 = v64.f64[0];
        v197 = v65;
        v198 = xmmword_18474DF50;
        if ((*(_BYTE *)(a2 + 18) & 4) != 0)
          v79 = *(_QWORD *)(*(_QWORD *)(v5 + 16) + 8);
        else
          v79 = 0;
        *(_QWORD *)v188 = v79;
        v100 = (uint64_t *)v188;
      }
      result = CA::OGL::emit_quad_surround(v5, v190.f64, v100);
LABEL_17:
      *(_BYTE *)(*(_QWORD *)(v5 + 16) + 16) = 0;
      return result;
    }
    if (!v7)
    {
      v190 = 0u;
      *(_OWORD *)v191 = 0u;
      memset(v188, 0, 32);
      v186[0] = 0;
      v187 = 0;
      v12 = *(_QWORD *)(v5 + 16);
      v13 = *(_QWORD *)(v12 + 16) & 0xFFFFFF00FF00FF00;
      if (*(_QWORD *)(v12 + 8) == 0x3C003C003C003C00)
        v14 = 1;
      else
        v14 = 3;
      *(_DWORD *)(v12 + 16) = v14 | v13;
      *(_DWORD *)(v12 + 20) = HIDWORD(v13);
      is_isotropic = CA::Transform::is_isotropic(*(CA::Transform **)(a2 + 8), 0.0, a2, (uint64_t)a3, a4);
      (*(void (**)(uint64_t, _QWORD, BOOL, _QWORD, uint64_t *))(*(_QWORD *)v5 + 448))(v5, 0, !is_isotropic, 0, &v187);
      v16 = *(float *)&v187;
      v17 = *(_DWORD *)(a2 + 20);
      if ((v17 & 1) != 0)
        v18 = *(float *)&v187;
      else
        v18 = *(float *)&v187 + (float)((float)(*((float *)&v187 + 1) - *(float *)&v187) * 0.5);
      *(float *)v200.f64 = v18;
      *((float *)v200.f64 + 1) = *(float *)&v187 + (float)((float)(*((float *)&v187 + 1) - *(float *)&v187) * 0.5);
      if ((v17 & 2) != 0)
        v19 = *((float *)&v187 + 1);
      else
        v19 = *(float *)&v187 + (float)((float)(*((float *)&v187 + 1) - *(float *)&v187) * 0.5);
      *(float *)&v200.f64[1] = *(float *)&v187 + (float)((float)(*((float *)&v187 + 1) - *(float *)&v187) * 0.5);
      *((float *)&v200.f64[1] + 1) = v19;
      if ((v17 & 4) == 0)
        v16 = *(float *)&v187 + (float)((float)(*((float *)&v187 + 1) - *(float *)&v187) * 0.5);
      *(float *)v199.i32 = v16;
      *(float *)&v199.i32[1] = *(float *)&v187 + (float)((float)(*((float *)&v187 + 1) - *(float *)&v187) * 0.5);
      if ((v17 & 8) != 0)
        v20 = *((float *)&v187 + 1);
      else
        v20 = *(float *)&v187 + (float)((float)(*((float *)&v187 + 1) - *(float *)&v187) * 0.5);
      *(float *)&v199.i32[2] = *(float *)&v187 + (float)((float)(*((float *)&v187 + 1) - *(float *)&v187) * 0.5);
      *(float *)&v199.i32[3] = v20;
      CA::OGL::emit_nine_part_rect(v5, a2, (uint64_t)&v190, (uint64_t)v188, (uint64_t)&v200, (uint64_t)&v199, 0, 0, (*(double *)v186 >= *(double *)(v5 + 72)) << 17);
      result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v5 + 520))(v5, 0, 0);
      goto LABEL_17;
    }
LABEL_16:
    *(_BYTE *)(*(_QWORD *)(v5 + 16) + 16) = 0;
    result = (uint64_t)CA::OGL::emit_one_part_rect((CA::OGL::Context *)v5, a2, 0, 0, 0);
    goto LABEL_17;
  }
  return result;
}

void CA::shape_map(CA::Shape **this, CA::Shape **a2, void (*a3)(CA::Rect *, void *), void (*a4)(CA::Rect *, void *), int32x4_t a5)
{
  CA::Shape *v6;
  uint64_t v7;

  v6 = *this;
  if ((*this & 1) != 0)
  {
    if (v6 == (CA::Shape *)1)
      return;
    goto LABEL_5;
  }
  if (*((_DWORD *)v6 + 1) != 6)
  {
LABEL_5:
    v7 = CA::Shape::map(*this, a2, a3, a5);
    CA::Shape::unref(v6);
    *this = (CA::Shape *)v7;
  }
}

uint64_t CA::OGL::Context::cache_fetch(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t i;
  malloc_zone_t *malloc_zone;
  _OWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;

  if (!*a2)
    return 0;
  v4 = a1 + 352;
  for (i = *(_QWORD *)(a1 + 360); i != v4; i = *(_QWORD *)(i + 8))
  {
    if (*(_DWORD *)(i + 16) == *a2)
    {
      if (a2[1] != *(_DWORD *)(i + 20))
      {
        CA::OGL::Context::cache_set_surface(a1, i, 0);
        *(_OWORD *)(i + 28) = xmmword_18474E240;
        *(_DWORD *)(i + 20) = a2[1];
      }
      v9 = *(_QWORD *)i;
      v8 = *(_QWORD **)(i + 8);
      *(_QWORD *)(v9 + 8) = v8;
      *v8 = v9;
      *(_QWORD *)i = i;
      *(_QWORD *)(i + 8) = i;
      goto LABEL_13;
    }
  }
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  v7 = malloc_type_zone_malloc(malloc_zone, 0x40uLL, 0x8BB15036uLL);
  i = (uint64_t)v7;
  if (v7)
  {
    v7[2] = 0u;
    v7[3] = 0u;
    *v7 = 0u;
    v7[1] = 0u;
  }
  *((_QWORD *)v7 + 2) = *(_QWORD *)a2;
  *((_QWORD *)v7 + 6) = 0;
  *(_OWORD *)((char *)v7 + 28) = xmmword_18474E240;
LABEL_13:
  *(_DWORD *)(i + 24) = *(_DWORD *)(a1 + 212);
  v10 = *(uint64_t **)(a1 + 360);
  *(_QWORD *)(a1 + 360) = i;
  *(_QWORD *)i = v4;
  *v10 = i;
  *(_QWORD *)(i + 8) = v10;
  return i;
}

void CA::OGL::QuadNode::compute_dod(CA::OGL::QuadNode *this, CA::Bounds *a2, double *a3, int32x4_t a4, int32x4_t a5)
{
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int8x16_t v11;
  uint64_t v12;
  int64x2_t v13;
  int8x16_t v14;
  double v15;
  double v16;
  int64x2_t v17;
  int8x16_t v18;
  int32x4_t v19;
  float64x2_t v20;
  float64x2_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v7 = *((_QWORD *)this + 3);
  v8 = *(_DWORD *)(v7 + 136);
  if (v8 < 0)
  {
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v7 + 40))(*((_QWORD *)this + 3), v7 + 128);
    v8 = *(_DWORD *)(v7 + 136);
  }
  v9 = *(_DWORD *)(v7 + 140);
  if (v8 <= v9)
    v10 = *(_DWORD *)(v7 + 140);
  else
    v10 = v8;
  a4.i32[0] = 1073741822;
  a5.i32[0] = v10;
  v11 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(a5, a4), 0);
  v12 = *(_QWORD *)(v7 + 128);
  v13.i64[0] = (int)v12;
  v13.i64[1] = SHIDWORD(v12);
  v14 = vbslq_s8(v11, (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v13));
  v15 = (double)v8;
  v16 = (double)v9;
  if (v10 > 1073741822)
  {
    v15 = 1.79769313e308;
    v16 = 1.79769313e308;
  }
  v20 = (float64x2_t)v14;
  v21.f64[0] = v15;
  v21.f64[1] = v16;
  CA::Rect::apply_transform((int8x16_t *)&v20, *((const CA::Transform **)this + 10), a3);
  v17 = vceqzq_f64(v21);
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v17, 1), (int8x16_t)v17).u64[0] & 0x8000000000000000) != 0
    || (v18 = vorrq_s8((int8x16_t)vcltzq_f64(v21), (int8x16_t)vcgezq_f64(v21)),
        (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v18), 1), v18).u64[0] & 0x8000000000000000) != 0))
  {
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
  }
  else
  {
    v19 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v20, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
    *(int32x4_t *)a2 = vuzp1q_s32(v19, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v20, v21), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v19));
  }
}

double CA::OGL::Context::bind_circle(CA::OGL::Context *this, unsigned int a2, int a3, BOOL a4, BOOL a5, float *a6)
{
  uint64_t v6;
  double result;

  v6 = *((_QWORD *)this + 2);
  *(_OWORD *)(v6 + 16 * a2 + 96) = xmmword_18474E210;
  *(_BYTE *)(v6 + a2 + 17) = 10;
  result = 0.00781250557;
  *(_QWORD *)a6 = 0x3F800000BF800000;
  return result;
}

uint64_t CA::OGL::CombineNode::compute_dod(uint64_t this, int32x2_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  int32x2_t *v5;
  __int32 v6;
  __int32 v7;
  int32x2_t *v8;
  __int32 v9;
  __int32 v10;
  int32x2_t *v11;
  int32x2_t *v12;
  __int32 v13;
  __int32 v14;
  int32x2_t *v15;

  v2 = *(unsigned __int8 *)(this + 224);
  if (v2 <= 0x38)
  {
    v4 = this;
    if (((1 << v2) & 0x100000000004B4ALL) != 0)
    {
      v5 = *(int32x2_t **)(this + 24);
      v6 = v5[17].i32[0];
      if (v6 < 0)
      {
        this = (*(uint64_t (**)(int32x2_t *, int32x2_t *))(*(_QWORD *)v5 + 40))(v5, v5 + 16);
        v6 = v5[17].i32[0];
      }
      *a2 = v5[16];
      v7 = v5[17].i32[1];
      a2[1].i32[0] = v6;
      a2[1].i32[1] = v7;
    }
    else if (((1 << v2) & 0x480) != 0)
    {
      v8 = *(int32x2_t **)(this + 24);
      v9 = v8[17].i32[0];
      if (v9 < 0)
      {
        (*(void (**)(_QWORD, int32x2_t *))(*(_QWORD *)v8 + 40))(*(_QWORD *)(this + 24), v8 + 16);
        v9 = v8[17].i32[0];
      }
      *a2 = v8[16];
      v10 = v8[17].i32[1];
      a2[1].i32[0] = v9;
      a2[1].i32[1] = v10;
      v11 = *(int32x2_t **)(v4 + 32);
      if (v11[17].i32[0] < 0)
        (*(void (**)(int32x2_t *, int32x2_t *))(*(_QWORD *)v11 + 40))(v11, v11 + 16);
      return CA::BoundsImpl::Union(a2, v11[16], v11[17]);
    }
    else if (v2 == 5)
    {
      v12 = *(int32x2_t **)(this + 24);
      v13 = v12[17].i32[0];
      if (v13 < 0)
      {
        (*(void (**)(_QWORD, int32x2_t *))(*(_QWORD *)v12 + 40))(*(_QWORD *)(this + 24), v12 + 16);
        v13 = v12[17].i32[0];
      }
      *a2 = v12[16];
      v14 = v12[17].i32[1];
      a2[1].i32[0] = v13;
      a2[1].i32[1] = v14;
      v15 = *(int32x2_t **)(v4 + 32);
      if (v15[17].i32[0] < 0)
        (*(void (**)(int32x2_t *, int32x2_t *))(*(_QWORD *)v15 + 40))(v15, v15 + 16);
      return CA::BoundsImpl::intersect(a2, v15[16], v15[17]);
    }
  }
  return this;
}

uint64_t CA::Rect::set_corners_interior(uint64_t result, double *a2)
{
  double *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  _BOOL8 v12;
  uint64_t v13;
  unsigned int v14;
  double v15;
  double v16;
  double v17;
  unsigned int v18;
  double v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  double *v26;
  double v27;
  uint64_t v28;
  double v29;
  double v30;
  double v31;
  BOOL v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  uint64_t v41;

  v3 = (double *)result;
  v41 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  v4 = a2[1];
  v7 = a2[2];
  v6 = a2[3];
  v37 = v5;
  v38 = v7;
  v9 = a2[4];
  v8 = a2[5];
  v11 = a2[6];
  v10 = a2[7];
  v39 = v9;
  v40 = v11;
  v33 = v4;
  v34 = v6;
  v35 = v8;
  v36 = v10;
  if (v5 <= v7)
  {
    v7 = v5;
  }
  else
  {
    v37 = v7;
    v38 = v5;
  }
  if (v9 <= v11)
  {
    v11 = v9;
  }
  else
  {
    v39 = v11;
    v40 = v9;
  }
  if (v4 <= v6)
  {
    v6 = v4;
  }
  else
  {
    v33 = v6;
    v34 = v4;
  }
  if (v8 <= v10)
  {
    v10 = v8;
  }
  else
  {
    v35 = v10;
    v36 = v8;
  }
  v12 = v7 < v11;
  v13 = 2;
  if (v7 >= v11)
    v14 = 3;
  else
    v14 = 2;
  v15 = *(&v37 + (v7 < v11));
  v16 = *(&v37 + v14);
  if (v15 < v16)
  {
    v17 = *(&v37 + (v7 < v11));
  }
  else
  {
    ++v14;
    v17 = v16;
  }
  if (v6 >= v10)
    v18 = 3;
  else
    v18 = 2;
  v19 = *(&v33 + (v6 < v10));
  v20 = *(&v33 + v18);
  if (v6 >= v10)
    v13 = 1;
  if (v19 < v20)
  {
    v21 = *(&v33 + (v6 < v10));
  }
  else
  {
    v13 = v6 < v10;
    ++v18;
    v21 = v20;
  }
  if (v7 >= v11 || v15 >= v16)
  {
    v23 = 2;
    if (v7 >= v11)
      v23 = 1;
    if (v15 < v16)
      v12 = v23;
    v22 = *(&v37 + v12);
    if (v14 <= 3 && v22 >= *(&v37 + v14))
      v22 = *(&v37 + v14);
  }
  else
  {
    v22 = *(&v37 + v14);
  }
  if (v6 >= v10 || v19 >= v20)
  {
    v24 = *(&v33 + v13);
    if (v18 <= 3 && v24 >= *(&v33 + v18))
      v24 = *(&v33 + v18);
  }
  else
  {
    v24 = *(&v33 + v18);
  }
  v25 = 0;
  v26 = a2 + 1;
  v27 = 0.0;
  v28 = 3;
  do
  {
    v27 = v27 + *v26 * a2[2 * v28] - a2[2 * v28 + 1] * *(v26 - 1);
    v28 = v25++;
    v26 += 2;
  }
  while (v25 != 4);
  v29 = (v24 - v21) * (v22 - v17);
  if (v27 < 0.0)
    v27 = -v27;
  if (COERCE__INT64(fabs((v24 - v21) * (v22 - v17))) <= 0x7FEFFFFFFFFFFFFFLL
    && ((v30 = v27 * 0.5, v31 = v27 * 0.25, v29 <= v30) ? (v32 = v29 <= v31) : (v32 = 1),
        !v32
     && (result = CA::point_inside_quad(a2, v17, v21), (_DWORD)result)
     && (result = CA::point_inside_quad(a2, v22, v21), (_DWORD)result)
     && (result = CA::point_inside_quad(a2, v22, v24), (_DWORD)result)
     && (result = CA::point_inside_quad(a2, v17, v24), (_DWORD)result)))
  {
    *v3 = v17;
    v3[1] = v21;
    v3[2] = v22 - v17;
    v3[3] = v24 - v21;
  }
  else
  {
    *(_OWORD *)v3 = 0u;
    *((_OWORD *)v3 + 1) = 0u;
  }
  return result;
}

uint64_t CA::OGL::AsynchronousNode::compute_dod(uint64_t this, int32x2_t *a2, double *a3)
{
  float64x2_t *v3;
  float64x2_t v4;
  int64x2_t v6;
  unint64_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int32x4_t v10;
  float64x2_t v11;
  float64x2_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = *(float64x2_t **)(*(_QWORD *)(this + 16) + 24);
  v4 = v3[5];
  v11 = v3[4];
  v12 = v4;
  if (v4.f64[0] != 0.0)
  {
    CA::Rect::apply_transform((int8x16_t *)&v11, *(const CA::Transform **)(this + 80), a3);
    v6 = vceqzq_f64(v12);
    v7 = vorrq_s8((int8x16_t)vdupq_laneq_s64(v6, 1), (int8x16_t)v6).u64[0];
    v8 = 0uLL;
    if ((v7 & 0x8000000000000000) == 0)
    {
      v9 = vorrq_s8((int8x16_t)vcltzq_f64(v12), (int8x16_t)vcgezq_f64(v12));
      if ((vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v9), 1), v9).u64[0] & 0x8000000000000000) == 0)
      {
        v10 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v11, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
        v8 = (int8x16_t)vuzp1q_s32(v10, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v11, v12), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v10));
      }
    }
    return CA::BoundsImpl::Union(a2, *(int32x2_t *)v8.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL));
  }
  return this;
}

BOOL CA::OGL::MetalContext::edge_mode_supported(uint64_t a1, uint64_t a2, int a3)
{
  return !a3 || a2 && *(_BYTE *)(a2 + 12) == 23;
}

float CA::OGL::pattern_texcoords(float64x2_t *a1, float *a2, uint64_t a3, float64x2_t a4, float64x2_t a5, float64x2_t a6)
{
  float64x2_t v6;
  float v15;
  float v17;
  float result;

  v6.f64[0] = a1[1].f64[0];
  v6.f64[1] = a1[2].f64[1];
  __asm { FMOV            V4.2D, #1.0 }
  _Q3 = vdivq_f64(_Q4, vmulq_f64(a1[6], v6));
  _Q0 = vsubq_f64(a4, vaddq_f64(a1[3], a6));
  _D2 = vcvt_f32_f64(vmulq_f64(_Q0, _Q3));
  *(float32x2_t *)&_Q0.f64[0] = vcvt_f32_f64(vmulq_f64(vaddq_f64(_Q0, a5), _Q3));
  *(float32x2_t *)a3 = _D2;
  *(float64_t *)(a3 + 8) = _Q0.f64[0];
  v15 = vmlas_n_f32(*a2, a2[2] - *a2, _D2.f32[0]);
  *(float *)a3 = v15;
  *(float *)_Q4.f64 = a2[3] - a2[1];
  __asm { FMLA            S3, S4, V2.S[1] }
  *(_DWORD *)(a3 + 4) = LODWORD(_Q3.f64[0]);
  _D2.f32[0] = vmlas_n_f32(*a2, a2[2] - *a2, *(float *)_Q0.f64);
  *(_DWORD *)(a3 + 8) = _D2.i32[0];
  _S5 = a2[3] - a2[1];
  __asm { FMLA            S4, S5, V0.S[1] }
  *(float *)_Q0.f64 = floorf(v15);
  v17 = floorf(*(float *)_Q3.f64);
  *(float *)a3 = v15 - *(float *)_Q0.f64;
  *(float *)(a3 + 4) = *(float *)_Q3.f64 - v17;
  result = _D2.f32[0] - *(float *)_Q0.f64;
  *(float *)(a3 + 8) = result;
  *(float *)(a3 + 12) = *(float *)_Q4.f64 - v17;
  return result;
}

uint64_t CA::OGL::fill_color_rect(uint64_t a1, uint64_t a2, double *a3, double *a4, double a5, int8x16_t a6)
{
  unsigned int v7;
  int8x16_t v8;
  int32x4_t v9;
  int v10;
  uint64_t v11;
  char v12;
  uint64_t result;

  v7 = bswap32(a3);
  a6.i32[0] = v7;
  a6.i32[1] = v7 >> 8;
  a6.i32[2] = HIWORD(v7);
  v8.i64[0] = 0xFF000000FFLL;
  v8.i64[1] = 0xFF000000FFLL;
  v9 = (int32x4_t)vandq_s8(a6, v8);
  v9.i32[3] = vshrq_n_u32((uint32x4_t)vdupq_n_s32(v7), 0x18uLL).i32[3];
  *(float16x4_t *)(*(_QWORD *)(a1 + 16) + 8) = vcvt_f16_f32(vmulq_f32(vcvtq_f32_s32(v9), (float32x4_t)vdupq_n_s32(0x3B808081u)));
  if ((_BYTE)a3 == 0xFF)
  {
    v10 = *(_DWORD *)(a2 + 16);
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_BYTE *)(v11 + 480);
    *(_BYTE *)(v11 + 480) = 3;
    if (!v10)
      goto LABEL_6;
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_BYTE *)(v11 + 480);
    *(_BYTE *)(v11 + 480) = 3;
  }
  *(_BYTE *)(v11 + 481) |= 1u;
LABEL_6:
  result = CA::OGL::fill_rect(a1, a2, a3, a4);
  *(_BYTE *)(*(_QWORD *)(a1 + 16) + 481) &= ~1u;
  *(_BYTE *)(*(_QWORD *)(a1 + 16) + 480) = v12;
  return result;
}

CA::OGL::Context *CA::OGL::fill_uneven_round_rect(CA::OGL::Context *result, uint64_t a2, float64_t *a3, double *a4, double a5, double a6, double a7, double a8, double a9, int32x2_t a10)
{
  float64x2_t *v10;
  double v11;
  CA::OGL::Context *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  float64x2_t v25;
  double v26;
  double v27;
  int32x2_t v28;
  uint64_t v29;
  double v30;
  double v31;
  float64x2_t v37;
  int8x16_t v38;
  float64x2_t v40;
  float32x2_t v41;
  float32x2_t v42;
  uint64_t v43;
  unint64_t v44;
  int v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float64x2_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  uint64_t v54;
  uint64_t i;
  uint64_t v56;
  uint64_t v57;
  uint64_t j;
  void (*v59)(uint64_t, float64x2_t *, uint64_t, uint64_t);
  void (*v60)(uint64_t, uint64_t, uint64_t);
  int v61;
  _BOOL4 v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  uint64_t v67;
  double v68;
  double v69;
  _OWORD v70[8];
  float64x2_t v71[2];
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v10 = *(float64x2_t **)a2;
  v11 = *(double *)(*(_QWORD *)a2 + 16);
  if (v11 >= *(double *)(*(_QWORD *)a2 + 24))
    v11 = *(double *)(*(_QWORD *)a2 + 24);
  if (v11 > 0.0)
  {
    v15 = result;
    v16 = a3[2];
    if (*a3 == v16)
    {
      v17 = a3[1];
      v18 = a3[3];
      if (v17 == v18)
      {
        v19 = a3[4];
        if (v16 == v19)
        {
          v20 = a3[5];
          if (v18 == v20 && v19 == a3[6] && v20 == a3[7])
            return (CA::OGL::Context *)CA::OGL::fill_round_rect((uint64_t)result, (float64x2_t **)a2, (double *)0xF, a4, *a3, v17);
        }
      }
    }
    v68 = 0.0;
    v69 = 0.0;
    v21 = *(_QWORD *)(a2 + 8);
    if ((*(_BYTE *)(v21 + 144) & 0x10) != 0)
    {
      CA::Mat4Impl::mat4_get_scale((CA::Mat4Impl *)v21, &v69, &v68, a4);
    }
    else
    {
      v68 = *(double *)(v21 + 128);
      v69 = v68;
    }
    v22 = 0;
    v23 = 0.0;
    do
    {
      v24 = a3[v22];
      if (v24 <= a3[v22 + 1])
        v24 = a3[v22 + 1];
      if (v23 <= v24)
        v23 = v24;
      v22 += 2;
    }
    while (v22 != 8);
    v25.f64[0] = v69;
    if (v69 <= v68)
      v26 = v68;
    else
      v26 = v69;
    v27 = v26 * v23;
    if ((_DWORD)a4)
      v27 = v27 * 1.528665;
    v28 = COERCE_INT32X2_T(1.0);
    if (v27 < 1.0)
      return (CA::OGL::Context *)CA::OGL::fill_rect((uint64_t)v15, a2, a3, a4);
    v29 = 0;
    v30 = v10->f64[0];
    v31 = v10->f64[1];
    v25.f64[1] = v68;
    __asm { FMOV            V0.2D, #0.5 }
    v37 = v10[1];
    v79 = 0u;
    v80 = 0u;
    v38 = (int8x16_t)vcvtq_f64_f32(vcvt_f32_f64(vdivq_f64(_Q0, v25)));
    __asm { FMOV            V0.2D, #1.0 }
    v66 = v37;
    v40 = vdivq_f64((float64x2_t)_Q0, v37);
    v28.i32[0] = (int)a4;
    v41 = (float32x2_t)vdup_n_s32(0x3FC3AB4Bu);
    do
    {
      a10.i32[0] = 0;
      v42 = vcvt_f32_f64(vmulq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(*(float64x2_t *)&a3[2 * v29], (float64x2_t)v38), *(int8x16_t *)&a3[2 * v29], v38), v40));
      a10 = (int32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceq_s32(v28, a10), 0), (int8x8_t)v42, (int8x8_t)vmul_f32(v42, v41));
      *((double *)&v79 + v29++) = *(double *)&a10;
    }
    while (v29 != 4);
    v43 = *((_QWORD *)v15 + 2);
    v44 = *(_QWORD *)(v43 + 16) & 0xFFFFFF00FF00FF00;
    v45 = *(_QWORD *)(v43 + 8) == 0x3C003C003C003C00 ? 1 : 3;
    *(_DWORD *)(v43 + 16) = v45 | v44;
    *(_DWORD *)(v43 + 20) = HIDWORD(v44);
    v78 = 0;
    if ((_DWORD)a4)
    {
      v46.i64[0] = __PAIR64__(HIDWORD(v79), v79);
      v47.i64[0] = __PAIR64__(DWORD1(v80), DWORD2(v79));
      v47.i64[1] = __PAIR64__(DWORD1(v79), DWORD2(v80));
      v46.i64[1] = __PAIR64__(HIDWORD(v80), v80);
      v48 = vaddq_f32(v47, v46);
      v49 = (float64x2_t)vdupq_n_s64(0x400721E8A7A4B61BuLL);
      v50 = (int8x16_t)vsubq_f64(v49, vdivq_f64(v49, vcvt_hight_f64_f32(v48)));
      v51 = (int8x16_t)vsubq_f64(v49, vdivq_f64(v49, vcvtq_f64_f32(*(float32x2_t *)v48.f32)));
      v52 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v50, (float64x2_t)_Q0), _Q0, v50);
      v53 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v51, (float64x2_t)_Q0), _Q0, v51);
      v71[0] = (float64x2_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)vbicq_s8(v53, (int8x16_t)vcltzq_f64((float64x2_t)v53))), (float64x2_t)vbicq_s8(v52, (int8x16_t)vcltzq_f64((float64x2_t)v52)));
      result = (CA::OGL::Context *)(*(uint64_t (**)(CA::OGL::Context *, _QWORD, __int128 *, uint64_t *, double *, float64x2_t *))(*(_QWORD *)v15 + 488))(v15, 0, &v79, &v78, a4, v71);
    }
    else
    {
      result = (CA::OGL::Context *)(*(uint64_t (**)(CA::OGL::Context *, _QWORD, __int128 *, uint64_t *))(*(_QWORD *)v15 + 480))(v15, 0, &v79, &v78);
    }
    v76 = 0u;
    v77 = 0u;
    v74 = 0u;
    v75 = 0u;
    v72 = 0u;
    v73 = 0u;
    v71[1] = 0u;
    if ((*((_DWORD *)v15 + 34) & 0xFFFFFFFC) != 0)
    {
      v54 = *((_QWORD *)v15 + 15);
      for (i = 1; i != 9; i += 2)
        v71[i] = (float64x2_t)xmmword_18474DF50;
      v71[0].f64[0] = v30;
      v71[0].f64[1] = v31;
      *(double *)&v72 = v66.f64[0] + v30;
      *((double *)&v72 + 1) = v31;
      *(double *)&v74 = v30;
      *((double *)&v74 + 1) = v66.f64[1] + v31;
      *(double *)&v76 = v66.f64[0] + v30;
      *((double *)&v76 + 1) = v66.f64[1] + v31;
      v56 = v78;
      *(_DWORD *)(v54 + 64) = HIDWORD(v78);
      *(_DWORD *)(v54 + 68) = v56;
      *(_DWORD *)(v54 + 16) = v56;
      *(_DWORD *)(v54 + 20) = v56;
      *(_DWORD *)(v54 + 160) = HIDWORD(v56);
      *(_DWORD *)(v54 + 164) = HIDWORD(v56);
      *(_QWORD *)(v54 + 112) = v56;
      v57 = *(_QWORD *)(*((_QWORD *)v15 + 2) + 8);
      for (j = 32; j != 224; j += 48)
        *(_QWORD *)(v54 + j) = v57;
      v59 = *(void (**)(uint64_t, float64x2_t *, uint64_t, uint64_t))(a2 + 24);
      if (v59)
        v59(a2, v71, v54, 4);
      CA::OGL::transform_vertices(v71, (float32x4_t *)v54, (const double *)4, *(float64x2_t **)(a2 + 8));
      v60 = *(void (**)(uint64_t, uint64_t, uint64_t))(a2 + 32);
      if (v60)
        v60(a2, v54, 4);
      v61 = *(_DWORD *)(a2 + 20);
      if ((v61 & 0xF) == 0 || (*(_BYTE *)(a2 + 16) & 9) == 0)
        goto LABEL_52;
      if ((v61 & 4) != 0)
      {
        CA::OGL::aa_adjust_vertices(v54, v54 + 96, 48, 2);
        v61 = *(_DWORD *)(a2 + 20);
      }
      if ((v61 & 8) != 0)
      {
        CA::OGL::aa_adjust_vertices(v54 + 96, v54, 48, 2);
        v61 = *(_DWORD *)(a2 + 20);
        if ((v61 & 1) == 0)
        {
LABEL_50:
          if ((v61 & 2) == 0)
            goto LABEL_52;
          goto LABEL_51;
        }
      }
      else if ((v61 & 1) == 0)
      {
        goto LABEL_50;
      }
      CA::OGL::aa_adjust_vertices(v54, v54 + 48, 96, 2);
      if ((*(_DWORD *)(a2 + 20) & 2) == 0)
      {
LABEL_52:
        v62 = CA::OGL::Context::need_transparent_source(v15);
        CA::OGL::emit_quad_indices((uint64_t)v15, *(float64x2_t **)(a2 + 40), CA::OGL::fill_uneven_round_rect(CA::OGL::Context &,CA::OGL::RectState const&,CA::Vec2<double> *,unsigned int)::indices, 4uLL, 4u);
        result = (CA::OGL::Context *)(*(uint64_t (**)(CA::OGL::Context *, _QWORD, _QWORD))(*(_QWORD *)v15 + 520))(v15, 0, 0);
        *(_BYTE *)(*((_QWORD *)v15 + 2) + 16) = 0;
        if (v62)
        {
          v63 = vcvtq_f64_f32(*(float32x2_t *)(v54 + 8));
          v70[0] = vcvtq_f64_f32(*(float32x2_t *)v54);
          v70[1] = v63;
          v64 = vcvtq_f64_f32(*(float32x2_t *)(v54 + 56));
          v70[2] = vcvtq_f64_f32(*(float32x2_t *)(v54 + 48));
          v70[3] = v64;
          v65 = vcvtq_f64_f32(*(float32x2_t *)(v54 + 152));
          v70[4] = vcvtq_f64_f32(*(float32x2_t *)(v54 + 144));
          v70[5] = v65;
          v65.f64[0] = *(float64_t *)(v54 + 104);
          v70[6] = vcvtq_f64_f32(*(float32x2_t *)(v54 + 96));
          v70[7] = vcvtq_f64_f32(*(float32x2_t *)&v65.f64[0]);
          v67 = 0;
          return (CA::OGL::Context *)CA::OGL::emit_quad_surround((uint64_t)v15, (const double *)v70, &v67);
        }
        return result;
      }
LABEL_51:
      CA::OGL::aa_adjust_vertices(v54 + 48, v54, 96, 2);
      goto LABEL_52;
    }
  }
  return result;
}

BOOL CATransform3DEqualToTransform(CATransform3D *a, CATransform3D *b)
{
  uint64_t v3;
  unint64_t v4;
  double v5;
  double v6;

  if (a->m11 != b->m11)
    return 0;
  v3 = 1;
  v4 = 15;
  while (v3 != 16)
  {
    v5 = *(&a->m11 + v3);
    v6 = *(&b->m11 + v3++);
    if (v5 != v6)
    {
      v4 = v3 - 2;
      return v4 > 0xE;
    }
  }
  return v4 > 0xE;
}

uint64_t CA::AttrList::for_each(uint64_t result, uint64_t (*a2)(_QWORD, _QWORD *, uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  _QWORD *v8;

  if (result)
  {
    v5 = result;
    do
    {
      v6 = *(_DWORD *)(v5 + 8);
      v7 = HIBYTE(v6) & 0x7F;
      v8 = (_QWORD *)(v5 + 16);
      switch((int)v7)
      {
        case 6:
        case 7:
        case 9:
        case 11:
        case 13:
          v7 = 13;
          break;
        case 8:
        case 10:
        case 12:
        case 14:
          v7 = 14;
          break;
        case 17:
        case 18:
          v7 = 18;
          break;
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
          v8 = (_QWORD *)*v8;
          break;
        default:
          break;
      }
      result = a2(v6 & 0xFFFFFF, v8, v7, a3);
      v5 = *(_QWORD *)v5;
    }
    while (v5);
  }
  return result;
}

unsigned int *copy_attr(unsigned int *result, CFTypeRef *a2, int a3, uint64_t *a4)
{
  unsigned int v6;
  int v7;
  void *v8;
  CFTypeID v9;
  CA::Render *v10;
  uint64_t v11;
  uint64_t v12;
  CGImage *v13;
  CFTypeID v14;
  CFTypeID TypeID;
  uint64_t v16;
  uint64_t v17;
  double v18;
  CA::Render *v19;
  uint64_t v20;
  unsigned int *v21;
  malloc_zone_t *malloc_zone;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;

  if ((a3 - 1) > 3)
    return result;
  v6 = result;
  v7 = *((_DWORD *)a4 + 4);
  v8 = (void *)*a2;
  if (!a2 || v7 != 577)
  {
LABEL_10:
    if (a2)
    {
      if (v7 == 363)
      {
        if (v8)
        {
          v14 = CFGetTypeID(v8);
          TypeID = CGImageGetTypeID();
          v8 = (void *)*a2;
          if (v14 == TypeID)
          {
            v16 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 576);
            if (v16 && (v17 = *(_QWORD *)(v16 + 40)) != 0)
              v13 = *(CGImage **)(v17 + 112);
            else
              v13 = (CGImage *)CAGetColorSpace(0x1Du);
            v18 = 1.0;
            v19 = (CA::Render *)v8;
            v20 = 6144;
            goto LABEL_22;
          }
        }
      }
    }
LABEL_17:
    result = (unsigned int *)objc_msgSend(v8, "CA_copyRenderValue");
    goto LABEL_23;
  }
  if (!v8)
    goto LABEL_17;
  v9 = CFGetTypeID(*a2);
  if (v9 != CGImageGetTypeID())
  {
    v7 = *((_DWORD *)a4 + 4);
    v8 = (void *)*a2;
    goto LABEL_10;
  }
  v10 = (CA::Render *)*a2;
  v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 576);
  if (v11 && (v12 = *(_QWORD *)(v11 + 40)) != 0)
    v13 = *(CGImage **)(v12 + 112);
  else
    v13 = (CGImage *)CAGetColorSpace(0x1Du);
  v18 = 1.0;
  v19 = v10;
  v20 = 1024;
LABEL_22:
  result = (unsigned int *)CA::Render::copy_image(v19, v13, (CGColorSpace *)v20, 0.0, v18);
LABEL_23:
  v21 = result;
  if (result)
  {
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    result = (unsigned int *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x20uLL, 0x743898A5uLL);
    if (result)
    {
      result[2] = 1;
      result[3] = 28;
      ++dword_1ECDC7C98;
      *(_QWORD *)result = off_1E1599568;
      result[4] = v6;
      v23 = v21 + 2;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 + 1, v23));
      v25 = v21;
      if (!v24)
      {
        v25 = 0;
        do
          v31 = __ldaxr(v23);
        while (__stlxr(v31 - 1, v23));
      }
      *((_QWORD *)result + 3) = v25;
    }
    v27 = *a4;
    v26 = a4[1];
    ++*a4;
    *(_QWORD *)(v26 + 8 * v27) = result;
    v28 = v21 + 2;
    do
    {
      v29 = __ldaxr(v28);
      v30 = v29 - 1;
    }
    while (__stlxr(v30, v28));
    if (!v30)
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v21 + 16))(v21);
  }
  return result;
}

unsigned int *CA::Render::Layer::set_sublayer_transform(unsigned int *this, CA::Render::Vector *a2)
{
  CA::Render::Vector *v2;
  _QWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = a2;
  if (a2 || *((_QWORD *)this + 16))
  {
    v3 = CA::Render::Layer::ensure_ext((CA::Render::Layer *)this);
    this = (unsigned int *)v3[3];
    if (this != (unsigned int *)v2)
    {
      if (this)
      {
        v4 = this + 2;
        do
        {
          v5 = __ldaxr(v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, v4));
        if (!v6)
          this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 16))(this);
      }
      if (v2)
      {
        v7 = (unsigned int *)((char *)v2 + 8);
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 + 1, v7));
        if (!v8)
        {
          v2 = 0;
          do
            v9 = __ldaxr(v7);
          while (__stlxr(v9 - 1, v7));
        }
      }
      v3[3] = v2;
    }
  }
  return this;
}

unsigned int *CA::Render::Layer::set_contents_center(unsigned int *this, CA::Render::Vector *a2)
{
  CA::Render::Vector *v2;
  _QWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = a2;
  if (a2 || *((_QWORD *)this + 16))
  {
    v3 = CA::Render::Layer::ensure_ext((CA::Render::Layer *)this);
    this = (unsigned int *)v3[6];
    if (this != (unsigned int *)v2)
    {
      if (this)
      {
        v4 = this + 2;
        do
        {
          v5 = __ldaxr(v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, v4));
        if (!v6)
          this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 16))(this);
      }
      if (v2)
      {
        v7 = (unsigned int *)((char *)v2 + 8);
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 + 1, v7));
        if (!v8)
        {
          v2 = 0;
          do
            v9 = __ldaxr(v7);
          while (__stlxr(v9 - 1, v7));
        }
      }
      v3[6] = v2;
    }
  }
  return this;
}

uint64_t CA::Render::Layer::set_mesh_transform(uint64_t this, os_unfair_lock_s *a2)
{
  CA::Render::Layer *v2;
  os_unfair_lock_s *v3;
  char v4;
  _QWORD *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *p_os_unfair_lock_opaque;
  unsigned int v10;
  unsigned int v11;

  v2 = (CA::Render::Layer *)this;
  if (a2 && (v3 = a2, this = CA::Render::MeshTransform::validate(a2), (this & 1) != 0))
  {
    v4 = 0;
  }
  else
  {
    if (!*((_QWORD *)v2 + 16))
      return this;
    v3 = 0;
    v4 = 1;
  }
  v5 = CA::Render::Layer::ensure_ext(v2);
  this = v5[14];
  if ((os_unfair_lock_s *)this != v3)
  {
    if (this)
    {
      v6 = (unsigned int *)(this + 8);
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 16))(this);
    }
    if ((v4 & 1) != 0)
    {
      v3 = 0;
    }
    else
    {
      p_os_unfair_lock_opaque = &v3[2]._os_unfair_lock_opaque;
      do
        v10 = __ldaxr(p_os_unfair_lock_opaque);
      while (__stlxr(v10 + 1, p_os_unfair_lock_opaque));
      if (!v10)
      {
        v3 = 0;
        do
          v11 = __ldaxr(p_os_unfair_lock_opaque);
        while (__stlxr(v11 - 1, p_os_unfair_lock_opaque));
      }
    }
    v5[14] = v3;
  }
  return this;
}

unsigned int *CA::Render::Layer::set_compositing_filter(unsigned int *this, CA::Render::Filter *a2)
{
  CA::Render::Filter *v2;
  _QWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = a2;
  if (a2 || *((_QWORD *)this + 16))
  {
    v3 = CA::Render::Layer::ensure_ext((CA::Render::Layer *)this);
    this = (unsigned int *)v3[11];
    if (this != (unsigned int *)v2)
    {
      if (this)
      {
        v4 = this + 2;
        do
        {
          v5 = __ldaxr(v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, v4));
        if (!v6)
          this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 16))(this);
      }
      if (v2)
      {
        v7 = (unsigned int *)((char *)v2 + 8);
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 + 1, v7));
        if (!v8)
        {
          v2 = 0;
          do
            v9 = __ldaxr(v7);
          while (__stlxr(v9 - 1, v7));
        }
      }
      v3[11] = v2;
    }
  }
  return this;
}

unsigned int *CA::Render::Layer::set_filters(unsigned int *result, unsigned int *a2)
{
  unsigned int *v2;
  _QWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = a2;
  if (a2 || *((_QWORD *)result + 16))
  {
    v3 = CA::Render::Layer::ensure_ext((CA::Render::Layer *)result);
    result = (unsigned int *)v3[12];
    if (result != v2)
    {
      if (result)
      {
        v4 = result + 2;
        do
        {
          v5 = __ldaxr(v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, v4));
        if (!v6)
          result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 16))(result);
      }
      if (v2)
      {
        v7 = v2 + 2;
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 + 1, v7));
        if (!v8)
        {
          v2 = 0;
          do
            v9 = __ldaxr(v7);
          while (__stlxr(v9 - 1, v7));
        }
      }
      v3[12] = v2;
    }
  }
  return result;
}

unsigned int *CA::Render::Layer::set_subclass(unsigned int *this, CA::Render::LayerSubclass *a2)
{
  CA::Render::LayerSubclass *v2;
  unsigned int **v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = a2;
  if (a2 || *((_QWORD *)this + 16))
  {
    v3 = (unsigned int **)CA::Render::Layer::ensure_ext((CA::Render::Layer *)this);
    this = *v3;
    if (*v3 != (unsigned int *)v2)
    {
      if (this)
      {
        v4 = this + 2;
        do
        {
          v5 = __ldaxr(v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, v4));
        if (!v6)
          this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 16))(this);
      }
      if (v2)
      {
        v7 = (unsigned int *)((char *)v2 + 8);
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 + 1, v7));
        if (!v8)
        {
          v2 = 0;
          do
            v9 = __ldaxr(v7);
          while (__stlxr(v9 - 1, v7));
        }
      }
      *v3 = (unsigned int *)v2;
    }
  }
  return this;
}

unsigned int *CA::Render::Layer::set_contents_rect(unsigned int *this, CA::Render::Vector *a2)
{
  CA::Render::Vector *v2;
  _QWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = a2;
  if (a2 || *((_QWORD *)this + 16))
  {
    v3 = CA::Render::Layer::ensure_ext((CA::Render::Layer *)this);
    this = (unsigned int *)v3[5];
    if (this != (unsigned int *)v2)
    {
      if (this)
      {
        v4 = this + 2;
        do
        {
          v5 = __ldaxr(v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, v4));
        if (!v6)
          this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 16))(this);
      }
      if (v2)
      {
        v7 = (unsigned int *)((char *)v2 + 8);
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 + 1, v7));
        if (!v8)
        {
          v2 = 0;
          do
            v9 = __ldaxr(v7);
          while (__stlxr(v9 - 1, v7));
        }
      }
      v3[5] = v2;
    }
  }
  return this;
}

CA::Render::Filter *CA::Render::Filter::Filter(CA::Render::Filter *this, int a2, CA::Render::String *a3, CA::Render::KeyValueArray *a4)
{
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  const CA::Render::FilterSubclass *v10;
  const CA::Render::FilterSubclass *v11;
  const CA::Render::FilterSubclass *v12;
  const CA::Render::FilterSubclass *v13;
  const CA::Render::FilterSubclass *v14;
  const CA::Render::FilterSubclass *v15;
  uint64_t v16;
  unsigned int v18;
  unsigned int v19;

  *((_DWORD *)this + 2) = 1;
  *((_DWORD *)this + 3) = 17;
  ++dword_1ECDC7C6C;
  *(_QWORD *)this = off_1E1598B40;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 6) = a2;
  if (a3)
  {
    v5 = (unsigned int *)((char *)a3 + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
    if (!v6)
    {
      a3 = 0;
      do
        v18 = __ldaxr(v5);
      while (__stlxr(v18 - 1, v5));
    }
  }
  *((_QWORD *)this + 4) = a3;
  if (a4)
  {
    v7 = (unsigned int *)((char *)a4 + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    if (!v8)
    {
      a4 = 0;
      do
        v19 = __ldaxr(v7);
      while (__stlxr(v19 - 1, v7));
    }
  }
  *((_QWORD *)this + 5) = a4;
  v9 = *((unsigned int *)this + 6);
  if (CA::Render::filter_table
    || (CA::Render::add_filter((CA::Render *)0x19C, (uint64_t)&CA::OGL::page_curl_filter_init(void)::page_curl, a3),
        CA::Render::add_filter((CA::Render *)0xF2, (uint64_t)&CA::OGL::initialize_filters(void)::gaussian_blur_filter, v10), CA::Render::add_filter((CA::Render *)0x241, (uint64_t)&CA::OGL::initialize_filters(void)::variable_blur_filter, v11), CA::Render::add_filter((CA::Render *)0x14D, (uint64_t)&CA::OGL::initialize_filters(void)::lanczos_resize_filter, v12), CA::Render::add_filter((CA::Render *)0x30, (uint64_t)&CA::OGL::initialize_filters(void)::average_color_filter, v13), CA::Render::add_filter((CA::Render *)0x157, (uint64_t)&CA::OGL::initialize_filters(void)::limit_apl_filter, v14), CA::Render::add_filter((CA::Render *)0x56, (uint64_t)&CA::OGL::initialize_filters(void)::chromatic_aberration_filter,
          v15),
        CA::Render::filter_table))
  {
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::filter_lock);
    v16 = x_hash_table_lookup(CA::Render::filter_table, v9, 0);
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::filter_lock);
  }
  else
  {
    v16 = 0;
  }
  *((_QWORD *)this + 6) = v16;
  if (CA::Render::Filter::evaluate_identity(this))
    *((_DWORD *)this + 3) |= 0x40000u;
  return this;
}

_DWORD *CA::Render::set_list_property<CA::Render::Filter>(uint64_t a1, unint64_t a2, uint64_t a3, int a4, CA::Render::Vector *a5, double *a6)
{
  _DWORD *v6;
  int named_object;
  int v13;
  uint64_t v14;
  CA::Render::Filter *v15;
  CA::Render::Filter *v17;
  _DWORD *v18;
  _DWORD *v19;
  unsigned int *v20;
  CA::Render::Filter **v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;

  v6 = (_DWORD *)a1;
  if (a1)
  {
    if (a2 >= 2)
    {
      named_object = CA::Render::TypedArray<CA::Render::Filter>::find_named_object(a1, *(_DWORD *)a3);
      if ((named_object & 0x80000000) == 0)
      {
        v13 = named_object;
        v14 = *(_QWORD *)&v6[2 * named_object + 6];
        v15 = CA::Render::set_object_property<CA::Render::Filter>(v14, a2 - 1, (const double *)(a3 + 4), a4, a5, a6);
        if (v15 && v15 != (CA::Render::Filter *)v14)
        {
          v17 = v15;
          v18 = CA::Render::Array::new_array((CA::Render::Array *)v6[4], v6 + 6, (CA::Render::Object *const *)1, 0);
          v6 = v18;
          if (v18)
          {
            v19 = &v18[2 * v13];
            v22 = (unsigned int *)*((_QWORD *)v19 + 3);
            v21 = (CA::Render::Filter **)(v19 + 6);
            v20 = v22;
            if (v22)
            {
              v23 = v20 + 2;
              do
              {
                v24 = __ldaxr(v23);
                v25 = v24 - 1;
              }
              while (__stlxr(v25, v23));
              if (!v25)
                (*(void (**)(unsigned int *))(*(_QWORD *)v20 + 16))(v20);
            }
            *v21 = v17;
          }
        }
      }
    }
  }
  return v6;
}

unint64_t CA::Render::TypedArray<CA::Render::Filter>::find_named_object(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  unint64_t v5;
  uint64_t v6;
  CA::Render::String *v7;

  v2 = *(_DWORD *)(a1 + 16);
  if (!v2)
    return 0xFFFFFFFFLL;
  if ((a2 & 0x40000000) == 0)
  {
    v5 = 0;
    v6 = a1 + 24;
    do
    {
      v7 = *(CA::Render::String **)(*(_QWORD *)(v6 + 8 * v5) + 32);
      if (v7)
      {
        if (CA::Render::String::equal(v7, a2))
          return v5;
        v2 = *(_DWORD *)(a1 + 16);
      }
      ++v5;
    }
    while (v5 < v2);
    return 0xFFFFFFFFLL;
  }
  if ((a2 & 0xBFFFFFFF) >= v2)
    return 0xFFFFFFFFLL;
  else
    return a2 & 0xBFFFFFFF;
}

BOOL CA::Render::String::equal(CA::Render::String *this, unsigned int a2)
{
  const __CFString *String;
  const char *CString;
  char v6[1024];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  String = CAAtomGetString(a2);
  CString = CA_CFStringGetCString(String, v6, 1024);
  return strcmp((const char *)this + 28, CString) == 0;
}

const char *CA_CFStringGetCString(const __CFString *a1, char *a2, CFIndex a3)
{
  const char *result;

  result = CFStringGetCStringPtr(a1, 0x8000100u);
  if (!result)
  {
    if (CFStringGetCString(a1, a2, a3, 0x8000100u))
      return a2;
    else
      return 0;
  }
  return result;
}

CA::Render::Filter *CA::Render::set_object_property<CA::Render::Filter>(uint64_t a1, uint64_t a2, const double *a3, int a4, CA::Render::Vector *this, double *a6)
{
  int v12;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  _DWORD *v16;
  CA::Render::KeyValueArray *v17;
  CA::Render::Filter *v18;
  malloc_zone_t *malloc_zone;
  CA::Render::Filter *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  CA::Render::Object *v25;
  CA::Render::Object *v26;
  CA::Render::KeyValueArray *v27;
  const CA::Render::KeyValueArray *v28;
  unsigned int named_object;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  double *v33;
  double *v34;
  double v35;
  int v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;

  if (!a1)
    return 0;
  v12 = *(_DWORD *)(a1 + 12);
  if ((v12 & 0x8000) != 0)
  {
    v18 = (CA::Render::Filter *)a1;
  }
  else
  {
    if (*(_DWORD *)(a1 + 16))
      v13 = 1;
    else
      v13 = (*(_DWORD *)(a1 + 12) & 0x200) == 0;
    if (!v13)
    {
      do
      {
        v14 = __ldaxr(CA::Render::next_cache_id(void)::cache_id);
        v15 = v14 + 1;
      }
      while (__stlxr(v15, CA::Render::next_cache_id(void)::cache_id));
      *(_DWORD *)(a1 + 16) = v15;
      *(_DWORD *)(a1 + 20) = 0;
    }
    v16 = *(_DWORD **)(a1 + 40);
    if (v16)
      v17 = (CA::Render::KeyValueArray *)CA::Render::Array::new_array((CA::Render::Array *)v16[4], v16 + 6, (CA::Render::Object *const *)1, v16[3] >> 8);
    else
      v17 = 0;
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v20 = (CA::Render::Filter *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x38uLL, 0x743898A5uLL);
    v18 = v20;
    if (v20)
      CA::Render::Filter::Filter(v20, *(_DWORD *)(a1 + 24), *(CA::Render::String **)(a1 + 32), v17);
    *((_DWORD *)v18 + 3) |= *(_DWORD *)(a1 + 12) & 0xFFFFFF00;
    *((_QWORD *)v18 + 2) = *(_QWORD *)(a1 + 16);
    if (v17)
    {
      v21 = (unsigned int *)((char *)v17 + 8);
      do
      {
        v22 = __ldaxr(v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v21));
      if (!v23)
        (*(void (**)(CA::Render::KeyValueArray *))(*(_QWORD *)v17 + 16))(v17);
    }
    v12 = *((_DWORD *)v18 + 3) | 0x8000;
    *((_DWORD *)v18 + 3) = v12;
  }
  if (a2 == 1)
  {
    if (this == (CA::Render::Vector *)1 && *(_DWORD *)a3 == 208)
    {
      if (*a6 <= 0.5)
        v24 = v12 & 0xFFFFFEFF;
      else
        v24 = v12 | 0x100;
      *((_DWORD *)v18 + 3) = v24;
    }
    else if (*((_QWORD *)v18 + 5))
    {
      v25 = (CA::Render::Object *)CA::Render::Vector::new_vector(this, a6, a3);
      v26 = v25;
      v27 = (CA::Render::KeyValueArray *)*((_QWORD *)v18 + 5);
      v28 = (const CA::Render::KeyValueArray *)*(unsigned int *)a3;
      if (a4)
      {
        if (v25)
        {
          named_object = CA::Render::KeyValueArray::find_named_object_(*((CA::Render::KeyValueArray **)v18 + 5), v28);
          if ((named_object & 0x80000000) == 0)
          {
            v31 = *(_QWORD *)(*((_QWORD *)v27 + named_object + 3) + 24);
            if (v31)
            {
              if (*(_BYTE *)(v31 + 12) == 56)
              {
                LODWORD(v30) = *(_DWORD *)(v31 + 16);
                v32 = (unint64_t)fmin((double)(unint64_t)this, (double)v30);
                if (v32)
                {
                  v33 = (double *)(v31 + 24);
                  v34 = (double *)((char *)v26 + 24);
                  do
                  {
                    v35 = *v33++;
                    *v34 = *v34 + v35;
                    ++v34;
                    --v32;
                  }
                  while (v32);
                }
              }
            }
          }
        }
      }
      CA::Render::KeyValueArray::set_key(v27, v28, v26);
      if (CA::Render::Filter::evaluate_identity(v18))
        v36 = 0x40000;
      else
        v36 = 0;
      *((_DWORD *)v18 + 3) = *((_DWORD *)v18 + 3) & 0xFFFBFFFF | v36;
      if (v26)
      {
        v37 = (unsigned int *)((char *)v26 + 8);
        do
        {
          v38 = __ldaxr(v37);
          v39 = v38 - 1;
        }
        while (__stlxr(v39, v37));
        if (!v39)
          (*(void (**)(CA::Render::Object *))(*(_QWORD *)v26 + 16))(v26);
      }
    }
  }
  return v18;
}

uint64_t CA::Render::Filter::evaluate_identity(CA::Render::Filter *this)
{
  uint64_t (***v2)(_QWORD, CA::Render::Filter *);
  uint64_t result;
  int v4;
  CA::Render::KeyValueArray *v5;
  double v6;
  CA::Render::KeyValueArray *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  CA::Render::KeyValueArray *v19;
  double v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float32x4_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v2 = (uint64_t (***)(_QWORD, CA::Render::Filter *))*((_QWORD *)this + 6);
  if (v2)
    return (**v2)(v2, this);
  v31 = 0uLL;
  v4 = *((_DWORD *)this + 6);
  if (v4 <= 260)
  {
    if (v4 <= 104)
    {
      if (v4 != 91)
      {
        if (v4 == 97)
        {
          v7 = (CA::Render::KeyValueArray *)*((_QWORD *)this + 5);
          v6 = 0.0;
          v13 = 271;
          return CA::Render::KeyValueArray::get_float_key(v7, (const CA::Render::KeyValueArray *)v13, v6) == 0.0;
        }
        if (v4 != 102)
          return 0;
        goto LABEL_33;
      }
      return CA::Render::KeyValueArray::get_color_key(*((CA::Render::KeyValueArray **)this + 5), (const CA::Render::KeyValueArray *)0x118, 0) == 0;
    }
    if (v4 != 105)
    {
      if (v4 == 107)
        return CA::Render::KeyValueArray::get_color_key(*((CA::Render::KeyValueArray **)this + 5), (const CA::Render::KeyValueArray *)0x118, 0) == 0;
      if (v4 == 158)
      {
        v8 = *((_QWORD *)this + 5);
        if (!v8)
          return 1;
        v9 = *(unsigned int *)(v8 + 16);
        if (!(_DWORD)v9)
          return 1;
        v10 = 0;
        while (1)
        {
          v11 = *(_QWORD *)(v8 + 24 + 8 * v10);
          if (*(_DWORD *)(v11 + 16) == 304)
            break;
          if (v9 == ++v10)
            goto LABEL_52;
        }
        if ((v10 & 0x80000000) == 0)
        {
          v22 = *(_QWORD *)(v11 + 24);
          result = v22 == 0;
          if (v22)
            return result;
        }
LABEL_52:
        v23 = 0;
        while (1)
        {
          v24 = *(_QWORD *)(v8 + 24 + 8 * v23);
          if (*(_DWORD *)(v24 + 16) == 291)
            break;
          if (v9 == ++v23)
            goto LABEL_60;
        }
        if ((v23 & 0x80000000) == 0)
        {
          v25 = *(_QWORD *)(v24 + 24);
          result = v25 == 0;
          if (v25)
            return result;
        }
LABEL_60:
        v26 = 0;
        while (1)
        {
          v27 = *(_QWORD *)(v8 + 24 + 8 * v26);
          if (*(_DWORD *)(v27 + 16) == 278)
            break;
          if (v9 == ++v26)
            goto LABEL_66;
        }
        if ((v26 & 0x80000000) == 0)
        {
          v28 = *(_QWORD *)(v27 + 24);
          result = v28 == 0;
          if (v28)
            return result;
        }
LABEL_66:
        v29 = 0;
        v30 = v8 + 24;
        result = 1;
        while (1)
        {
          v18 = *(_QWORD *)(v30 + 8 * v29);
          if (*(_DWORD *)(v18 + 16) == 269)
            break;
          if (v9 == ++v29)
            return result;
        }
        if ((v29 & 0x80000000) != 0)
          return 1;
        return *(_QWORD *)(v18 + 24) == 0;
      }
      return 0;
    }
    v19 = (CA::Render::KeyValueArray *)*((_QWORD *)this + 5);
    v20 = 1.0;
    v21 = 1.0;
    return CA::Render::KeyValueArray::get_float_key(v19, (const CA::Render::KeyValueArray *)0x10E, v21) == v20;
  }
  if (v4 <= 386)
  {
    if (v4 != 261)
    {
      if (v4 == 359)
      {
        v14 = *((_QWORD *)this + 5);
        if (!v14)
          return 1;
        v15 = *(unsigned int *)(v14 + 16);
        if (!(_DWORD)v15)
          return 1;
        v16 = 0;
        v17 = v14 + 24;
        result = 1;
        while (1)
        {
          v18 = *(_QWORD *)(v17 + 8 * v16);
          if (*(_DWORD *)(v18 + 16) == 312)
            break;
          if (v15 == ++v16)
            return result;
        }
        if ((v16 & 0x80000000) != 0)
          return 1;
        return *(_QWORD *)(v18 + 24) == 0;
      }
      if (v4 != 378)
        return 0;
      v5 = (CA::Render::KeyValueArray *)*((_QWORD *)this + 5);
      if (CA::Render::KeyValueArray::get_float_key(v5, (const CA::Render::KeyValueArray *)0x132, 1.0) != 0.0)
      {
        v6 = 1.0;
        v7 = v5;
LABEL_34:
        v13 = 270;
        return CA::Render::KeyValueArray::get_float_key(v7, (const CA::Render::KeyValueArray *)v13, v6) == 0.0;
      }
    }
    return 1;
  }
  if (v4 == 522)
  {
    v19 = (CA::Render::KeyValueArray *)*((_QWORD *)this + 5);
    v20 = 0.5;
    v21 = 0.5;
    return CA::Render::KeyValueArray::get_float_key(v19, (const CA::Render::KeyValueArray *)0x10E, v21) == v20;
  }
  if (v4 == 401)
  {
LABEL_33:
    v7 = (CA::Render::KeyValueArray *)*((_QWORD *)this + 5);
    v6 = 0.0;
    goto LABEL_34;
  }
  if (v4 != 387)
    return 0;
  if (!CA::Render::KeyValueArray::get_float_color_key(*((CA::Render::KeyValueArray **)this + 5), (const CA::Render::KeyValueArray *)0x118, &v31))return 1;
  result = 0;
  if (v31.f32[0] == 1.0 && v31.f32[1] == 1.0 && v31.f32[2] == 1.0)
    return v31.f32[3] == 1.0;
  return result;
}

CA::Render::Layer *CA::Render::Layer::set_transform_matrix(CA::Render::Layer *result, uint64_t a2, int a3, unint64_t a4, float64x2_t *a5)
{
  const double *v8;
  const double *v9;
  CA::Render::Layer *v10;
  __n128 v11;
  uint64_t v12;
  unsigned int v13;
  double *v14;
  double *v15;
  _DWORD *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  float64x2_t v26[8];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (a4 >= 0x10)
  {
    result = (CA::Render::Layer *)CA::Render::Layer::ensure_ext(result);
    v10 = result;
    v11.n128_u64[0] = *(_QWORD *)&a5->f64[0];
    if (a5->f64[0] == 1.0)
    {
      v20 = 1;
      while (v20 != 16)
      {
        v21 = v20;
        v11.n128_u64[0] = *(_QWORD *)&a5->f64[v20];
        v22 = *((double *)&CA::Mat4Impl::mat4_identity_double + v20++);
        if (v11.n128_f64[0] != v22)
        {
          if ((unint64_t)(v21 - 1) < 0xF)
            goto LABEL_3;
          break;
        }
      }
      if ((a3 & 1) == 0)
      {
        result = *(CA::Render::Layer **)((char *)result + a2);
        *(_QWORD *)((char *)v10 + a2) = 0;
        if (result)
        {
          v23 = (unsigned int *)((char *)result + 8);
          do
          {
            v24 = __ldaxr(v23);
            v25 = v24 - 1;
          }
          while (__stlxr(v25, v23));
          if (!v25)
            return (CA::Render::Layer *)(*(uint64_t (**)(CA::Render::Layer *, __n128))(*(_QWORD *)result + 16))(result, v11);
        }
      }
    }
    else
    {
LABEL_3:
      memset(v26, 0, sizeof(v26));
      if (a3)
      {
        v12 = *(_QWORD *)((char *)result + a2);
        if (v12)
        {
          v13 = *(_DWORD *)(v12 + 16);
          v14 = (double *)(v12 + 24);
          if (v13 <= 0xF)
            v15 = (double *)&CA::Mat4Impl::mat4_identity_double;
          else
            v15 = v14;
          CA::Mat4Impl::mat4_concat(v26, v15, a5->f64, v9);
          a5 = v26;
        }
      }
      v16 = CA::Render::Vector::new_vector((CA::Render::Vector *)0x10, a5, v8);
      result = *(CA::Render::Layer **)((char *)v10 + a2);
      *(_QWORD *)((char *)v10 + a2) = v16;
      if (result)
      {
        v17 = (unsigned int *)((char *)result + 8);
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
          return (CA::Render::Layer *)(*(uint64_t (**)(CA::Render::Layer *))(*(_QWORD *)result + 16))(result);
      }
    }
  }
  return result;
}

_DWORD *CA::Render::Vector::new_vector(CA::Render::Vector *this, const void *a2, const double *a3)
{
  int v4;
  size_t v5;
  malloc_zone_t *malloc_zone;
  _DWORD *v7;
  _DWORD *v8;
  void *v9;

  v4 = (int)this;
  v5 = 8 * this;
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  v7 = malloc_type_zone_malloc(malloc_zone, v5 + 24, 0x8BB15036uLL);
  v8 = v7;
  if (v7)
  {
    v7[2] = 1;
    v7[3] = 56;
    ++dword_1ECDC7D08;
    *(_QWORD *)v7 = off_1E1598DC0;
    v7[4] = v4;
    v9 = v7 + 6;
    if (a2)
      memcpy(v9, a2, v5);
    else
      bzero(v9, v5);
  }
  return v8;
}

float CA::Render::Layer::copy_properties(CA::Render::Layer *this, size_t size, int a3, __n128 a4)
{
  CA::Render::Layer *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unint64_t v47;
  unint64_t v48;
  unsigned int v49;
  unsigned int v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  unsigned int *v80;
  unsigned int *v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int *v85;
  unsigned int v86;
  unsigned int *v87;
  unsigned int *v88;
  unsigned int *v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int *v92;
  unsigned int v93;
  unsigned int *v94;
  unsigned int *v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int *v99;
  unsigned int v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  unsigned int *v110;
  unsigned int *v111;
  unsigned int *v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int *v115;
  unsigned int v116;
  size_t v117;
  uint64_t *v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _DWORD *v124;
  unsigned int *v125;
  unsigned int *v126;
  unsigned int v127;
  unsigned int v128;
  unsigned int v129;
  uint64_t v130;
  unsigned int *v131;
  unsigned int v132;
  unsigned int v133;
  unsigned int *v134;
  unsigned int *v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  _QWORD v144[2];

  v6 = this;
  v144[1] = *MEMORY[0x1E0C80C00];
  if ((a3 & 1) == 0)
  {
    this = (CA::Render::Layer *)CA::Render::Layer::set_contents(this, *(CA::Render::Object **)(size + 96));
    if ((*(_BYTE *)(size + 13) & 4) != 0)
      *((_DWORD *)v6 + 3) |= 0x400u;
  }
  if ((a3 & 4) == 0)
  {
    v7 = *(_QWORD *)(size + 112);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 144);
      if (v8)
        this = (CA::Render::Layer *)CA::Render::Layer::set_mask(v6, *(CA::Render::Layer **)(v8 + 16));
    }
    *((_QWORD *)v6 + 5) = *((_QWORD *)v6 + 5) & 0xFFFFFFFFFFFFFF7FLL | (((*(_QWORD *)(size + 40) >> 7) & 1) << 7);
  }
  if ((a3 & 2) == 0)
  {
    v9 = *(_QWORD *)(size + 104);
    if ((*(_BYTE *)(size + 13) & 0x20) != 0)
    {
      if (v9)
      {
        v14 = *(_QWORD *)(v9 + 144);
        if (v14)
        {
          v15 = *(_QWORD *)(v14 + 16);
          if (v15)
          {
            v16 = (unsigned int *)(v15 + 8);
            do
              v17 = __ldaxr(v16);
            while (__stlxr(v17 + 1, v16));
            if (!v17)
            {
              v15 = 0;
              do
                v18 = __ldaxr(v16);
              while (__stlxr(v18 - 1, v16));
            }
          }
        }
        else
        {
          v15 = 0;
        }
        v19 = (unsigned int *)*((_QWORD *)v6 + 13);
        if (v19)
        {
          v20 = v19 + 2;
          do
          {
            v21 = __ldaxr(v20);
            v22 = v21 - 1;
          }
          while (__stlxr(v22, v20));
          if (!v22)
            (*(void (**)(unsigned int *))(*(_QWORD *)v19 + 16))(v19);
        }
        *((_QWORD *)v6 + 13) = v15;
        *((_DWORD *)v6 + 3) |= 0x2000u;
      }
    }
    else if (v9)
    {
      v10 = *(unsigned int *)(v9 + 16);
      if (!(_DWORD)v10)
        goto LABEL_36;
      v11 = 0;
      while (1)
      {
        v12 = *(_QWORD *)(v9 + 24 + 8 * v11);
        if (v12)
        {
          v13 = *(_QWORD *)(v12 + 144);
          if (!v13 || *(_QWORD *)(v13 + 16) != v12)
            break;
        }
        if (v10 == ++v11)
          goto LABEL_36;
      }
      if (v11 != v10)
      {
        if (v10 >= 0x201)
        {
          v118 = (uint64_t *)malloc_type_malloc(8 * v10, 0xFF8E208FuLL);
          if (!v118)
            goto LABEL_37;
        }
        else
        {
          MEMORY[0x1E0C80A78](this);
          v118 = (_QWORD *)((char *)v144 - ((v117 + 15) & 0xFFFFFFFF0));
          bzero(v118, v117);
        }
        v119 = 0;
        v120 = v9 + 24;
        v121 = v10;
        do
        {
          if (*(_QWORD *)v120)
          {
            v122 = *(_QWORD *)(*(_QWORD *)v120 + 144);
            if (v122)
            {
              v123 = *(_QWORD *)(v122 + 16);
              if (v123)
                v118[v119++] = v123;
            }
          }
          v120 += 8;
          --v121;
        }
        while (v121);
        if (v119 < 2)
        {
          if (v119 == 1)
          {
            v130 = *v118;
            if (*v118)
            {
              v131 = (unsigned int *)(v130 + 8);
              do
                v132 = __ldaxr(v131);
              while (__stlxr(v132 + 1, v131));
              if (!v132)
              {
                v130 = 0;
                do
                  v133 = __ldaxr(v131);
                while (__stlxr(v133 - 1, v131));
              }
            }
          }
          else
          {
            v130 = 0;
          }
          v134 = (unsigned int *)*((_QWORD *)v6 + 13);
          if (v134)
          {
            v135 = v134 + 2;
            do
            {
              v136 = __ldaxr(v135);
              v137 = v136 - 1;
            }
            while (__stlxr(v137, v135));
            if (!v137)
              (*(void (**)(unsigned int *))(*(_QWORD *)v134 + 16))(v134);
          }
          *((_QWORD *)v6 + 13) = v130;
          v129 = *((_DWORD *)v6 + 3) | 0x2000;
        }
        else
        {
          v124 = CA::Render::Array::new_array((CA::Render::Array *)v119, v118, (CA::Render::Object *const *)1, 0);
          v125 = (unsigned int *)*((_QWORD *)v6 + 13);
          if (v125)
          {
            v126 = v125 + 2;
            do
            {
              v127 = __ldaxr(v126);
              v128 = v127 - 1;
            }
            while (__stlxr(v128, v126));
            if (!v128)
              (*(void (**)(unsigned int *))(*(_QWORD *)v125 + 16))(v125);
          }
          *((_QWORD *)v6 + 13) = v124;
          v129 = *((_DWORD *)v6 + 3) & 0xFFFFDFFF;
        }
        *((_DWORD *)v6 + 3) = v129;
        if (v10 >= 0x201)
          free(v118);
      }
      else
      {
LABEL_36:
        CA::Render::Layer::set_sublayers((uint64_t)v6, *(_QWORD *)(size + 104));
      }
    }
  }
LABEL_37:
  if ((a3 & 8) == 0)
  {
    *((_BYTE *)v6 + 32) = *(_BYTE *)(size + 32);
    *((_QWORD *)v6 + 5) = *((_QWORD *)v6 + 5) & 0xFFFFFFFFFFFFFEFFLL | (((*(_QWORD *)(size + 40) >> 8) & 1) << 8);
    a4 = *(__n128 *)(size + 48);
    *((__n128 *)v6 + 3) = a4;
    v23 = *(_QWORD *)(size + 128);
    if (v23)
    {
      v24 = CA::Render::Layer::ensure_ext(v6);
      if (v24)
      {
        a4.n128_u64[0] = *(_QWORD *)(v23 + 192);
        v24[24] = a4.n128_u64[0];
      }
    }
  }
  if ((a3 & 0x10) == 0)
  {
    v25 = *(unsigned __int8 *)(size + 34);
    *((_BYTE *)v6 + 34) = v25;
    v26 = *((_QWORD *)v6 + 5) & 0xFFFFFFFFFFFFFFBFLL | (((*(_QWORD *)(size + 40) >> 6) & 1) << 6);
    *((_QWORD *)v6 + 5) = v26;
    v27 = v26 & 0xFFFFFFFFFFFFFDFFLL | (((*(_QWORD *)(size + 40) >> 9) & 1) << 9);
    *((_QWORD *)v6 + 5) = v27;
    v28 = v27 & 0xFFFFFFFFFFFFF7FFLL | (((*(_QWORD *)(size + 40) >> 11) & 1) << 11);
    *((_QWORD *)v6 + 5) = v28;
    v29 = v28 & 0xFFFFFFFFFFFFEFFFLL | (((*(_QWORD *)(size + 40) >> 12) & 1) << 12);
    *((_QWORD *)v6 + 5) = v29;
    v30 = v29 & 0xFFFFFFFFFFFFDFFFLL | (((*(_QWORD *)(size + 40) >> 13) & 1) << 13);
    *((_QWORD *)v6 + 5) = v30;
    v31 = v30 & 0xFFFFFFFFFFFDFFFFLL | (((*(_QWORD *)(size + 40) >> 17) & 1) << 17);
    *((_QWORD *)v6 + 5) = v31;
    v32 = *(_QWORD *)(size + 40) & 0x400000000000;
    *((_QWORD *)v6 + 5) = v31 & 0xFFFFBFFFFFFFFFFFLL | v32;
    *((_OWORD *)v6 + 4) = *(_OWORD *)(size + 64);
    a4 = *(__n128 *)(size + 80);
    *((__n128 *)v6 + 5) = a4;
    v33 = *(_QWORD *)(size + 128);
    if (v33)
    {
      v34 = CA::Render::Layer::ensure_ext(v6);
      if (!v34)
        goto LABEL_50;
      *(_OWORD *)(v34 + 21) = *(_OWORD *)(v33 + 168);
      v34[23] = *(_QWORD *)(v33 + 184);
      a4.n128_u32[0] = *(_DWORD *)(v33 + 280);
    }
    else
    {
      v34 = (_QWORD *)*((_QWORD *)v6 + 16);
      if (!v34)
        goto LABEL_50;
      a4.n128_u64[0] = 0;
      if (!v32)
        a4.n128_f64[0] = 0.5;
      v34[21] = a4.n128_u64[0];
      v34[22] = a4.n128_u64[0];
      a4.n128_f32[0] = (float)v25;
    }
    *((_DWORD *)v34 + 70) = a4.n128_u32[0];
  }
LABEL_50:
  v35 = *(_QWORD *)(size + 128);
  if (!v35)
    goto LABEL_66;
  if ((a3 & 0x20) != 0)
  {
    if ((a3 & 0x40) != 0)
      goto LABEL_53;
  }
  else
  {
    CA::Render::Layer::set_transform((unsigned int *)v6, *(CA::Render::Vector **)(v35 + 16));
    if ((a3 & 0x40) != 0)
    {
LABEL_53:
      if ((a3 & 0x80) != 0)
        goto LABEL_54;
      goto LABEL_120;
    }
  }
  CA::Render::Layer::set_sublayer_transform((unsigned int *)v6, *(CA::Render::Vector **)(v35 + 24));
  if ((a3 & 0x80) != 0)
  {
LABEL_54:
    if ((a3 & 0x100) != 0)
      goto LABEL_55;
    goto LABEL_121;
  }
LABEL_120:
  CA::Render::Layer::set_contents_transform((unsigned int *)v6, *(CA::Render::Vector **)(v35 + 32));
  if ((a3 & 0x100) != 0)
  {
LABEL_55:
    if ((a3 & 0x20000) != 0)
      goto LABEL_56;
    goto LABEL_122;
  }
LABEL_121:
  CA::Render::Layer::set_contents_rect((unsigned int *)v6, *(CA::Render::Vector **)(v35 + 40));
  if ((a3 & 0x20000) != 0)
  {
LABEL_56:
    if ((a3 & 0x80000) != 0)
      goto LABEL_57;
    goto LABEL_123;
  }
LABEL_122:
  CA::Render::Layer::set_contents_center((unsigned int *)v6, *(CA::Render::Vector **)(v35 + 48));
  if ((a3 & 0x80000) != 0)
  {
LABEL_57:
    if ((a3 & 0x1000) != 0)
      goto LABEL_58;
    goto LABEL_124;
  }
LABEL_123:
  CA::Render::Layer::set_corner_contents((unsigned int *)v6, *(CA::Render::Object **)(v35 + 56));
  CA::Render::Layer::set_corner_contents_center((unsigned int *)v6, *(CA::Render::Vector **)(v35 + 64));
  if ((a3 & 0x1000) != 0)
  {
LABEL_58:
    if ((a3 & 0x200) != 0)
      goto LABEL_59;
    goto LABEL_125;
  }
LABEL_124:
  CA::Render::Layer::set_timing((unsigned int *)v6, *(unsigned int **)(v35 + 8));
  if ((a3 & 0x200) != 0)
  {
LABEL_59:
    if ((a3 & 0x400) != 0)
      goto LABEL_60;
    goto LABEL_126;
  }
LABEL_125:
  CA::Render::Layer::set_filters((unsigned int *)v6, *(unsigned int **)(v35 + 96));
  if ((a3 & 0x400) != 0)
  {
LABEL_60:
    if ((a3 & 0x800) != 0)
      goto LABEL_61;
    goto LABEL_127;
  }
LABEL_126:
  CA::Render::Layer::set_background_filters((unsigned int *)v6, *(unsigned int **)(v35 + 104));
  if ((a3 & 0x800) != 0)
  {
LABEL_61:
    if ((a3 & 0x40000) != 0)
      goto LABEL_62;
    goto LABEL_128;
  }
LABEL_127:
  CA::Render::Layer::set_compositing_filter((unsigned int *)v6, *(CA::Render::Filter **)(v35 + 88));
  if ((a3 & 0x40000) != 0)
  {
LABEL_62:
    if ((a3 & 0x10000) != 0)
      goto LABEL_63;
    goto LABEL_129;
  }
LABEL_128:
  CA::Render::Layer::set_mesh_transform((uint64_t)v6, *(os_unfair_lock_s **)(v35 + 112));
  if ((a3 & 0x10000) != 0)
  {
LABEL_63:
    if ((a3 & 0x4000) != 0)
      goto LABEL_64;
    goto LABEL_130;
  }
LABEL_129:
  CA::Render::Layer::set_subclass((unsigned int *)v6, *(CA::Render::LayerSubclass **)v35);
  if ((a3 & 0x4000) != 0)
  {
LABEL_64:
    if ((a3 & 0x100000) != 0)
      goto LABEL_66;
    goto LABEL_65;
  }
LABEL_130:
  CA::Render::Layer::set_modifiers((unsigned int *)v6, *(unsigned int **)(v35 + 136));
  if ((a3 & 0x100000) == 0)
LABEL_65:
    CA::Render::Layer::set_identifiers((unsigned int *)v6, *(unsigned int **)(v35 + 144));
LABEL_66:
  if ((a3 & 0x8000) == 0)
  {
    v36 = (unsigned int *)*((_QWORD *)v6 + 15);
    v37 = *(unsigned int **)(size + 120);
    if (v36 != v37)
    {
      if (v36)
      {
        v38 = v36 + 2;
        do
        {
          v39 = __ldaxr(v38);
          v40 = v39 - 1;
        }
        while (__stlxr(v40, v38));
        if (!v40)
          (*(void (**)(unsigned int *))(*(_QWORD *)v36 + 16))(v36);
        v37 = *(unsigned int **)(size + 120);
      }
      if (v37)
      {
        v41 = v37 + 2;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 + 1, v41));
        if (!v42)
        {
          v37 = 0;
          do
            v138 = __ldaxr(v41);
          while (__stlxr(v138 - 1, v41));
        }
      }
      *((_QWORD *)v6 + 15) = v37;
    }
    a4 = *(__n128 *)(size + 16);
    *((__n128 *)v6 + 1) = a4;
    v43 = *(unsigned __int8 *)(size + 35);
    *((_BYTE *)v6 + 35) = v43;
    v44 = *((_DWORD *)v6 + 9) & 0xFFFFFFF0 | *(_DWORD *)(size + 36) & 0xF;
    *((_DWORD *)v6 + 9) = v44;
    v45 = v44 & 0xFFFFFF0F | (16 * ((*(_DWORD *)(size + 36) >> 4) & 0xF));
    *((_DWORD *)v6 + 9) = v45;
    v46 = v45 & 0xFFFFF0FF | (((*(_DWORD *)(size + 36) >> 8) & 0xF) << 8);
    *((_DWORD *)v6 + 9) = v46;
    v47 = *((_QWORD *)v6 + 5) & 0xFFFFFFFFFFFFBFFFLL | (((*(_QWORD *)(size + 40) >> 14) & 1) << 14);
    *((_QWORD *)v6 + 5) = v47;
    v48 = v47 & 0xFFFFFFFFFFFEFFFFLL | (((*(_QWORD *)(size + 40) >> 16) & 1) << 16);
    *((_QWORD *)v6 + 5) = v48;
    v49 = v46 & 0xFFFF0FFF | (HIBYTE(*(_WORD *)(size + 36)) >> 4 << 12);
    *((_DWORD *)v6 + 9) = v49;
    v50 = v49 & 0xFFF0FFFF | ((HIWORD(*(_DWORD *)(size + 36)) & 0xF) << 16);
    *((_DWORD *)v6 + 9) = v50;
    *((_DWORD *)v6 + 9) = v50 & 0x800FFFFF | (((*(_DWORD *)(size + 36) >> 20) & 0x7FF) << 20);
    v51 = v48 & 0xFFFFFFFFFFFFFFFCLL | *(_QWORD *)(size + 40) & 3;
    *((_QWORD *)v6 + 5) = v51;
    v52 = v51 & 0xFFFFFFFFFFFFFFF3 | (4 * ((*(_QWORD *)(size + 40) >> 2) & 3));
    *((_QWORD *)v6 + 5) = v52;
    v53 = v52 & 0xFFFFFFFFFFFFFBFFLL | (((*(_QWORD *)(size + 40) >> 10) & 1) << 10);
    *((_QWORD *)v6 + 5) = v53;
    v54 = v53 & 0xFFFFFFFFFFFF7FFFLL | (((*(_QWORD *)(size + 40) >> 15) & 1) << 15);
    *((_QWORD *)v6 + 5) = v54;
    v55 = v54 & 0xFFFFFFFFFFFBFFFFLL | (((*(_QWORD *)(size + 40) >> 18) & 1) << 18);
    *((_QWORD *)v6 + 5) = v55;
    v56 = v55 & 0xFFFFFFFFFFF7FFFFLL | (((*(_QWORD *)(size + 40) >> 19) & 1) << 19);
    *((_QWORD *)v6 + 5) = v56;
    v57 = v56 & 0xFFFFFFFFFFEFFFFFLL | (((*(_QWORD *)(size + 40) >> 20) & 1) << 20);
    *((_QWORD *)v6 + 5) = v57;
    v58 = v57 & 0xFFFFFFFFFFDFFFFFLL | (((*(_QWORD *)(size + 40) >> 21) & 1) << 21);
    *((_QWORD *)v6 + 5) = v58;
    v59 = v58 & 0xFFFFFFFFFFBFFFFFLL | (((*(_QWORD *)(size + 40) >> 22) & 1) << 22);
    *((_QWORD *)v6 + 5) = v59;
    v60 = v59 & 0xFFFFFFFFFF7FFFFFLL | (((*(_QWORD *)(size + 40) >> 23) & 1) << 23);
    *((_QWORD *)v6 + 5) = v60;
    v61 = v60 & 0xFFFFFFFFFEFFFFFFLL | (((*(_QWORD *)(size + 40) >> 24) & 1) << 24);
    *((_QWORD *)v6 + 5) = v61;
    v62 = v61 & 0xFFFFFFFFFDFFFFFFLL | (((*(_QWORD *)(size + 40) >> 25) & 1) << 25);
    *((_QWORD *)v6 + 5) = v62;
    v63 = v62 & 0xFFFFFFFFFBFFFFFFLL | (((*(_QWORD *)(size + 40) >> 26) & 1) << 26);
    *((_QWORD *)v6 + 5) = v63;
    v64 = v63 & 0xFFFFFFFFF7FFFFFFLL | (((*(_QWORD *)(size + 40) >> 27) & 1) << 27);
    *((_QWORD *)v6 + 5) = v64;
    v65 = v64 & 0xFFFFFFFFEFFFFFFFLL | (((*(_QWORD *)(size + 40) >> 28) & 1) << 28);
    *((_QWORD *)v6 + 5) = v65;
    v66 = v65 & 0xFFFFFFFFDFFFFFFFLL | (((*(_QWORD *)(size + 40) >> 29) & 1) << 29);
    *((_QWORD *)v6 + 5) = v66;
    v67 = v66 & 0xFFFFFFFFBFFFFFFFLL | (((*(_QWORD *)(size + 40) >> 30) & 1) << 30);
    *((_QWORD *)v6 + 5) = v67;
    v68 = v67 & 0xFFFFFFFF7FFFFFFFLL | (((*(_QWORD *)(size + 40) >> 31) & 1) << 31);
    *((_QWORD *)v6 + 5) = v68;
    v69 = v68 & 0xFFFFFFFEFFFFFFFFLL | ((HIDWORD(*(_QWORD *)(size + 40)) & 1) << 32);
    *((_QWORD *)v6 + 5) = v69;
    v70 = v69 & 0xFFFFFF7FFFFFFFFFLL | (((*(_QWORD *)(size + 40) >> 39) & 1) << 39);
    *((_QWORD *)v6 + 5) = v70;
    v71 = v70 & 0xFFFFFEFFFFFFFFFFLL | (((*(_QWORD *)(size + 40) >> 40) & 1) << 40);
    *((_QWORD *)v6 + 5) = v71;
    v72 = v71 & 0xFFFFFDFFFFFFFFFFLL | (((*(_QWORD *)(size + 40) >> 41) & 1) << 41);
    *((_QWORD *)v6 + 5) = v72;
    v73 = v72 & 0xFFFFFBFFFFFFFFFFLL | (((*(_QWORD *)(size + 40) >> 42) & 1) << 42);
    *((_QWORD *)v6 + 5) = v73;
    v74 = v73 & 0xFFFFF7FFFFFFFFFFLL | (((*(_QWORD *)(size + 40) >> 43) & 1) << 43);
    *((_QWORD *)v6 + 5) = v74;
    v75 = v74 & 0xFFFFEFFFFFFFFFFFLL | (((*(_QWORD *)(size + 40) >> 44) & 1) << 44);
    *((_QWORD *)v6 + 5) = v75;
    v76 = v75 & 0xFFFFDFFFFFFFFFFFLL | (((*(_QWORD *)(size + 40) >> 45) & 1) << 45);
    *((_QWORD *)v6 + 5) = v76;
    *((_QWORD *)v6 + 5) = v76 & 0xFFFFFFFFFFFFFFCFLL | (16 * ((*(_QWORD *)(size + 40) >> 4) & 3));
    v77 = *(_QWORD *)(size + 128);
    if (v77)
    {
      v78 = CA::Render::Layer::ensure_ext(v6);
      if (v78)
      {
        v79 = v78;
        *(_OWORD *)(v78 + 19) = *(_OWORD *)(v77 + 152);
        v80 = (unsigned int *)v78[10];
        v81 = *(unsigned int **)(v77 + 80);
        if (v80 != v81)
        {
          if (v80)
          {
            v82 = v80 + 2;
            do
            {
              v83 = __ldaxr(v82);
              v84 = v83 - 1;
            }
            while (__stlxr(v84, v82));
            if (!v84)
              (*(void (**)(unsigned int *))(*(_QWORD *)v80 + 16))(v80);
            v81 = *(unsigned int **)(v77 + 80);
          }
          if (v81)
          {
            v85 = v81 + 2;
            do
              v86 = __ldaxr(v85);
            while (__stlxr(v86 + 1, v85));
            if (!v86)
            {
              v81 = 0;
              do
                v139 = __ldaxr(v85);
              while (__stlxr(v139 - 1, v85));
            }
          }
          v79[10] = v81;
        }
        v79[36] = *(_QWORD *)(v77 + 288);
        *((_DWORD *)v79 + 71) = *(_DWORD *)(v77 + 284);
        *((_OWORD *)v79 + 15) = *(_OWORD *)(v77 + 240);
        v87 = (unsigned int *)v79[16];
        v88 = *(unsigned int **)(v77 + 128);
        if (v87 != v88)
        {
          if (v87)
          {
            v89 = v87 + 2;
            do
            {
              v90 = __ldaxr(v89);
              v91 = v90 - 1;
            }
            while (__stlxr(v91, v89));
            if (!v91)
              (*(void (**)(unsigned int *))(*(_QWORD *)v87 + 16))(v87);
            v88 = *(unsigned int **)(v77 + 128);
          }
          if (v88)
          {
            v92 = v88 + 2;
            do
              v93 = __ldaxr(v92);
            while (__stlxr(v93 + 1, v92));
            if (!v93)
            {
              v88 = 0;
              do
                v140 = __ldaxr(v92);
              while (__stlxr(v140 - 1, v92));
            }
          }
          v79[16] = v88;
        }
        v79[29] = *(_QWORD *)(v77 + 232);
        v94 = (unsigned int *)v79[9];
        v95 = *(unsigned int **)(v77 + 72);
        if (v94 != v95)
        {
          if (v94)
          {
            v96 = v94 + 2;
            do
            {
              v97 = __ldaxr(v96);
              v98 = v97 - 1;
            }
            while (__stlxr(v98, v96));
            if (!v98)
              (*(void (**)(unsigned int *))(*(_QWORD *)v94 + 16))(v94);
            v95 = *(unsigned int **)(v77 + 72);
          }
          if (v95)
          {
            v99 = v95 + 2;
            do
              v100 = __ldaxr(v99);
            while (__stlxr(v100 + 1, v99));
            if (!v100)
            {
              v95 = 0;
              do
                v141 = __ldaxr(v99);
              while (__stlxr(v141 - 1, v99));
            }
          }
          v79[9] = v95;
        }
        *((_DWORD *)v79 + 57) = *(_DWORD *)(v77 + 228);
        v79[32] = *(_QWORD *)(v77 + 256);
        a4 = *(__n128 *)(v77 + 264);
        *(__n128 *)(v79 + 33) = a4;
        *((_BYTE *)v79 + 320) = v79[40] & 0xFE | *(_BYTE *)(v77 + 320) & 1;
      }
    }
    else
    {
      v101 = *((_QWORD *)v6 + 16);
      if (v101)
      {
        a4.n128_f32[0] = (float)v43;
        *(float *)(v101 + 284) = (float)v43;
      }
    }
  }
  if ((a3 & 0x2000) == 0)
  {
    *((_BYTE *)v6 + 33) = *(_BYTE *)(size + 33);
    v102 = *((_QWORD *)v6 + 5) & 0xFFFFFFFDFFFFFFFFLL | (((*(_QWORD *)(size + 40) >> 33) & 1) << 33);
    *((_QWORD *)v6 + 5) = v102;
    v103 = v102 & 0xFFFFFFFBFFFFFFFFLL | (((*(_QWORD *)(size + 40) >> 34) & 1) << 34);
    *((_QWORD *)v6 + 5) = v103;
    v104 = v103 & 0xFFFFFFF7FFFFFFFFLL | (((*(_QWORD *)(size + 40) >> 35) & 1) << 35);
    *((_QWORD *)v6 + 5) = v104;
    v105 = v104 & 0xFFFFFFEFFFFFFFFFLL | (((*(_QWORD *)(size + 40) >> 36) & 1) << 36);
    *((_QWORD *)v6 + 5) = v105;
    v106 = v105 & 0xFFFFFFDFFFFFFFFFLL | (((*(_QWORD *)(size + 40) >> 37) & 1) << 37);
    *((_QWORD *)v6 + 5) = v106;
    *((_QWORD *)v6 + 5) = v106 & 0xFFFFFFBFFFFFFFFFLL | (((*(_QWORD *)(size + 40) >> 38) & 1) << 38);
    v107 = *(_QWORD *)(size + 128);
    if (v107)
    {
      v108 = CA::Render::Layer::ensure_ext(v6);
      if (v108)
      {
        v109 = v108;
        *(_OWORD *)(v108 + 25) = *(_OWORD *)(v107 + 200);
        v108[27] = *(_QWORD *)(v107 + 216);
        *((_DWORD *)v108 + 56) = *(_DWORD *)(v107 + 224);
        v110 = (unsigned int *)v108[15];
        v111 = *(unsigned int **)(v107 + 120);
        if (v110 != v111)
        {
          if (v110)
          {
            v112 = v110 + 2;
            do
            {
              v113 = __ldaxr(v112);
              v114 = v113 - 1;
            }
            while (__stlxr(v114, v112));
            if (!v114)
              (*(void (**)(unsigned int *))(*(_QWORD *)v110 + 16))(v110);
            v111 = *(unsigned int **)(v107 + 120);
          }
          if (v111)
          {
            v115 = v111 + 2;
            do
              v116 = __ldaxr(v115);
            while (__stlxr(v116 + 1, v115));
            if (!v116)
            {
              v111 = 0;
              do
                v142 = __ldaxr(v115);
              while (__stlxr(v142 - 1, v115));
            }
          }
          v109[15] = v111;
        }
        *(_OWORD *)((char *)v109 + 300) = *(_OWORD *)(v107 + 300);
        *((_DWORD *)v109 + 74) = *(_DWORD *)(v107 + 296);
        a4.n128_u32[0] = *(_DWORD *)(v107 + 316);
        *((_DWORD *)v109 + 79) = a4.n128_u32[0];
      }
    }
  }
  return a4.n128_f32[0];
}

_QWORD *CA::Render::Layer::ensure_ext(CA::Render::Layer *this)
{
  _QWORD *v2;
  malloc_zone_t *v3;
  char *v4;
  char *v5;
  malloc_zone_t *malloc_zone;
  char *v7;
  double v8;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  CA::Render::Layer::Ext *v65;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;

  v2 = (_QWORD *)*((_QWORD *)this + 16);
  if (!v2)
  {
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v7 = (char *)malloc_type_zone_malloc(malloc_zone, 0x148uLL, 0x8BB15036uLL);
    if (v7)
    {
      v5 = v7;
      *((_QWORD *)v7 + 20) = 0;
      *((_OWORD *)v7 + 8) = 0u;
      *((_OWORD *)v7 + 9) = 0u;
      *((_OWORD *)v7 + 6) = 0u;
      *((_OWORD *)v7 + 7) = 0u;
      *((_OWORD *)v7 + 4) = 0u;
      *((_OWORD *)v7 + 5) = 0u;
      *((_OWORD *)v7 + 2) = 0u;
      *((_OWORD *)v7 + 3) = 0u;
      *(_OWORD *)v7 = 0u;
      *((_OWORD *)v7 + 1) = 0u;
      v8 = 0.0;
      if ((*((_QWORD *)this + 5) & 0x400000000000) == 0)
        v8 = 0.5;
      *((double *)v7 + 21) = v8;
      *((double *)v7 + 22) = v8;
      *((_QWORD *)v7 + 24) = 0;
      *((_QWORD *)v7 + 25) = 0;
      *((_QWORD *)v7 + 23) = 0;
      *((_DWORD *)v7 + 52) = 0;
      *(_OWORD *)(v7 + 212) = xmmword_18474E0B0;
      *(_QWORD *)(v7 + 228) = 0;
      *(_QWORD *)(v7 + 244) = 0;
      *(_QWORD *)(v7 + 236) = 0;
      *(_OWORD *)(v7 + 252) = xmmword_18474E0C0;
      *((_DWORD *)v7 + 67) = 1065353216;
      __asm { FMOV            V0.2S, #1.0 }
      *((_QWORD *)v7 + 34) = _D0;
      LOBYTE(_D0) = *((_BYTE *)this + 34);
      *(float *)&_D0 = (float)_D0;
      *((_DWORD *)v7 + 70) = _D0;
      LOBYTE(_D0) = *((_BYTE *)this + 35);
      *((float *)v7 + 71) = (float)_D0;
      *((_QWORD *)v7 + 36) = 0x3F80000000000000;
      *((_QWORD *)v7 + 37) = 0;
      *((_QWORD *)v7 + 38) = 0;
      *((_QWORD *)v7 + 39) = 1065353216;
      v7[320] &= ~1u;
      goto LABEL_81;
    }
LABEL_10:
    v2 = 0;
    goto LABEL_82;
  }
  if (*((_DWORD *)v2 + 81) == 1)
    return v2;
  v3 = (malloc_zone_t *)get_malloc_zone();
  v4 = (char *)malloc_type_zone_malloc(v3, 0x148uLL, 0x8BB15036uLL);
  if (!v4)
    goto LABEL_10;
  v5 = v4;
  if (*v2)
    (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 96))(*v2);
  else
    *(_QWORD *)v4 = 0;
  v14 = v2[1];
  if (v14)
  {
    v15 = (unsigned int *)(v14 + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
    if (!v16)
    {
      v14 = 0;
      do
        v67 = __ldaxr(v15);
      while (__stlxr(v67 - 1, v15));
    }
  }
  *((_QWORD *)v5 + 1) = v14;
  v17 = v2[2];
  if (v17)
  {
    v18 = (unsigned int *)(v17 + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 + 1, v18));
    if (!v19)
    {
      v17 = 0;
      do
        v68 = __ldaxr(v18);
      while (__stlxr(v68 - 1, v18));
    }
  }
  *((_QWORD *)v5 + 2) = v17;
  v20 = v2[3];
  if (v20)
  {
    v21 = (unsigned int *)(v20 + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 + 1, v21));
    if (!v22)
    {
      v20 = 0;
      do
        v69 = __ldaxr(v21);
      while (__stlxr(v69 - 1, v21));
    }
  }
  *((_QWORD *)v5 + 3) = v20;
  v23 = v2[4];
  if (v23)
  {
    v24 = (unsigned int *)(v23 + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 + 1, v24));
    if (!v25)
    {
      v23 = 0;
      do
        v70 = __ldaxr(v24);
      while (__stlxr(v70 - 1, v24));
    }
  }
  *((_QWORD *)v5 + 4) = v23;
  v26 = v2[5];
  if (v26)
  {
    v27 = (unsigned int *)(v26 + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 + 1, v27));
    if (!v28)
    {
      v26 = 0;
      do
        v71 = __ldaxr(v27);
      while (__stlxr(v71 - 1, v27));
    }
  }
  *((_QWORD *)v5 + 5) = v26;
  v29 = v2[6];
  if (v29)
  {
    v30 = (unsigned int *)(v29 + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 + 1, v30));
    if (!v31)
    {
      v29 = 0;
      do
        v72 = __ldaxr(v30);
      while (__stlxr(v72 - 1, v30));
    }
  }
  *((_QWORD *)v5 + 6) = v29;
  v32 = v2[7];
  if (v32)
  {
    v33 = (unsigned int *)(v32 + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 + 1, v33));
    if (!v34)
    {
      v32 = 0;
      do
        v73 = __ldaxr(v33);
      while (__stlxr(v73 - 1, v33));
    }
  }
  *((_QWORD *)v5 + 7) = v32;
  v35 = v2[8];
  if (v35)
  {
    v36 = (unsigned int *)(v35 + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 + 1, v36));
    if (!v37)
    {
      v35 = 0;
      do
        v74 = __ldaxr(v36);
      while (__stlxr(v74 - 1, v36));
    }
  }
  *((_QWORD *)v5 + 8) = v35;
  v38 = v2[9];
  if (v38)
  {
    v39 = (unsigned int *)(v38 + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 + 1, v39));
    if (!v40)
    {
      v38 = 0;
      do
        v75 = __ldaxr(v39);
      while (__stlxr(v75 - 1, v39));
    }
  }
  *((_QWORD *)v5 + 9) = v38;
  v41 = v2[10];
  if (v41)
  {
    v42 = (unsigned int *)(v41 + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 + 1, v42));
    if (!v43)
    {
      v41 = 0;
      do
        v76 = __ldaxr(v42);
      while (__stlxr(v76 - 1, v42));
    }
  }
  *((_QWORD *)v5 + 10) = v41;
  v44 = v2[11];
  if (v44)
  {
    v45 = (unsigned int *)(v44 + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 + 1, v45));
    if (!v46)
    {
      v44 = 0;
      do
        v77 = __ldaxr(v45);
      while (__stlxr(v77 - 1, v45));
    }
  }
  *((_QWORD *)v5 + 11) = v44;
  v47 = v2[12];
  if (v47)
  {
    v48 = (unsigned int *)(v47 + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 + 1, v48));
    if (!v49)
    {
      v47 = 0;
      do
        v78 = __ldaxr(v48);
      while (__stlxr(v78 - 1, v48));
    }
  }
  *((_QWORD *)v5 + 12) = v47;
  v50 = v2[13];
  if (v50)
  {
    v51 = (unsigned int *)(v50 + 8);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 + 1, v51));
    if (!v52)
    {
      v50 = 0;
      do
        v79 = __ldaxr(v51);
      while (__stlxr(v79 - 1, v51));
    }
  }
  *((_QWORD *)v5 + 13) = v50;
  v53 = v2[14];
  if (v53)
  {
    v54 = (unsigned int *)(v53 + 8);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 + 1, v54));
    if (!v55)
    {
      v53 = 0;
      do
        v80 = __ldaxr(v54);
      while (__stlxr(v80 - 1, v54));
    }
  }
  *((_QWORD *)v5 + 14) = v53;
  v56 = v2[15];
  if (v56)
  {
    v57 = (unsigned int *)(v56 + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 + 1, v57));
    if (!v58)
    {
      v56 = 0;
      do
        v81 = __ldaxr(v57);
      while (__stlxr(v81 - 1, v57));
    }
  }
  *((_QWORD *)v5 + 15) = v56;
  v59 = v2[16];
  if (v59)
  {
    v60 = (unsigned int *)(v59 + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 + 1, v60));
    if (!v61)
    {
      v59 = 0;
      do
        v82 = __ldaxr(v60);
      while (__stlxr(v82 - 1, v60));
    }
  }
  *((_QWORD *)v5 + 16) = v59;
  v62 = v2[17];
  if (v62)
  {
    v63 = (unsigned int *)(v62 + 8);
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 + 1, v63));
    if (!v64)
    {
      v62 = 0;
      do
        v83 = __ldaxr(v63);
      while (__stlxr(v83 - 1, v63));
    }
  }
  *((_QWORD *)v5 + 17) = v62;
  *((_QWORD *)v5 + 18) = 0;
  *(_OWORD *)(v5 + 152) = *(_OWORD *)(v2 + 19);
  *(_OWORD *)(v5 + 168) = *(_OWORD *)(v2 + 21);
  *(_OWORD *)(v5 + 184) = *(_OWORD *)(v2 + 23);
  *(_OWORD *)(v5 + 200) = *(_OWORD *)(v2 + 25);
  *((_QWORD *)v5 + 27) = v2[27];
  *((_OWORD *)v5 + 14) = *((_OWORD *)v2 + 14);
  *((_OWORD *)v5 + 15) = *((_OWORD *)v2 + 15);
  *((_QWORD *)v5 + 32) = v2[32];
  *(_OWORD *)(v5 + 264) = *(_OWORD *)(v2 + 33);
  *(_OWORD *)(v5 + 280) = *(_OWORD *)(v2 + 35);
  *((_DWORD *)v5 + 74) = *((_DWORD *)v2 + 74);
  *(_OWORD *)(v5 + 300) = *(_OWORD *)((char *)v2 + 300);
  *((_DWORD *)v5 + 79) = *((_DWORD *)v2 + 79);
  v5[320] = v5[320] & 0xFE | v2[40] & 1;
LABEL_81:
  *((_DWORD *)v5 + 81) = 1;
  v2 = v5;
LABEL_82:
  v65 = (CA::Render::Layer::Ext *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = v2;
  if (v65)
    CA::Render::Layer::Ext::unref(v65);
  return v2;
}

_DWORD *CA::Render::Array::new_array(CA::Render::Array *this, const void *a2, CA::Render::Object *const *a3, int a4)
{
  int v5;
  int v7;
  size_t v8;
  malloc_zone_t *malloc_zone;
  _DWORD *v10;
  _DWORD *v11;
  void *v12;
  uint64_t i;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  v5 = (int)a3;
  v7 = (int)this;
  v8 = 8 * this;
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  v10 = malloc_type_zone_malloc(malloc_zone, v8 + 24, 0x8BB15036uLL);
  v11 = v10;
  if (v10)
  {
    v10[2] = 1;
    ++dword_1ECDC7C2C;
    *(_QWORD *)v10 = off_1E15986F8;
    v10[3] = (a4 << 8) | 1;
    v10[4] = v7;
    v12 = v10 + 6;
    if (a2)
    {
      memcpy(v12, a2, v8);
      if (v7 && v5)
      {
        for (i = 0; i != v7; ++i)
        {
          v14 = (unsigned int *)(*(_QWORD *)&v11[2 * i + 6] + 8);
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 + 1, v14));
          if (!v15)
          {
            do
              v16 = __ldaxr(v14);
            while (__stlxr(v16 - 1, v14));
          }
        }
      }
    }
    else
    {
      bzero(v12, v8);
    }
  }
  return v11;
}

unsigned int *CA::Render::Layer::set_contents(CA::Render::Layer *this, CA::Render::Object *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  CA::Render::Object *v7;
  unsigned int *result;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;

  if (a2)
  {
    v3 = 0;
    v4 = *((unsigned __int8 *)a2 + 12);
    do
    {
      v5 = CA::Render::contents_types[v3];
      if (v5 == v4)
        break;
    }
    while (v3++ != 10);
    if (v5 == v4)
      v7 = a2;
    else
      v7 = 0;
  }
  else
  {
    v7 = 0;
  }
  result = (unsigned int *)*((_QWORD *)this + 12);
  if (result != (unsigned int *)v7)
  {
    if (result)
    {
      v9 = result + 2;
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
        result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 16))(result);
    }
    if (v7)
    {
      v12 = (unsigned int *)((char *)v7 + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 + 1, v12));
      if (!v13)
      {
        v7 = 0;
        do
          v14 = __ldaxr(v12);
        while (__stlxr(v14 - 1, v12));
      }
    }
    *((_QWORD *)this + 12) = v7;
  }
  return result;
}

unsigned int *CA::Render::Layer::set_modifiers(unsigned int *result, unsigned int *a2)
{
  unsigned int *v2;
  _QWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = a2;
  if (a2 || *((_QWORD *)result + 16))
  {
    v3 = CA::Render::Layer::ensure_ext((CA::Render::Layer *)result);
    result = (unsigned int *)v3[17];
    if (result != v2)
    {
      if (result)
      {
        v4 = result + 2;
        do
        {
          v5 = __ldaxr(v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, v4));
        if (!v6)
          result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 16))(result);
      }
      if (v2)
      {
        v7 = v2 + 2;
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 + 1, v7));
        if (!v8)
        {
          v2 = 0;
          do
            v9 = __ldaxr(v7);
          while (__stlxr(v9 - 1, v7));
        }
      }
      v3[17] = v2;
    }
  }
  return result;
}

unsigned int *CA::Render::Layer::set_transform(unsigned int *this, CA::Render::Vector *a2)
{
  CA::Render::Vector *v2;
  _QWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = a2;
  if (a2 || *((_QWORD *)this + 16))
  {
    v3 = CA::Render::Layer::ensure_ext((CA::Render::Layer *)this);
    this = (unsigned int *)v3[2];
    if (this != (unsigned int *)v2)
    {
      if (this)
      {
        v4 = this + 2;
        do
        {
          v5 = __ldaxr(v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, v4));
        if (!v6)
          this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 16))(this);
      }
      if (v2)
      {
        v7 = (unsigned int *)((char *)v2 + 8);
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 + 1, v7));
        if (!v8)
        {
          v2 = 0;
          do
            v9 = __ldaxr(v7);
          while (__stlxr(v9 - 1, v7));
        }
      }
      v3[2] = v2;
    }
  }
  return this;
}

uint64_t CA::Render::KeyValueArray::set_key(CA::Render::KeyValueArray *this, const CA::Render::KeyValueArray *a2, CA::Render::Object *a3)
{
  int v4;
  uint64_t result;
  char *v7;
  unsigned int *v8;
  _QWORD *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  malloc_zone_t *malloc_zone;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;

  v4 = (int)a2;
  result = CA::Render::KeyValueArray::find_named_object_(this, a2);
  if ((result & 0x80000000) == 0)
  {
    v7 = (char *)this + 8 * result;
    v10 = (unsigned int *)*((_QWORD *)v7 + 3);
    v9 = v7 + 24;
    v8 = v10;
    if (v10)
    {
      v11 = v8 + 2;
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
        (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 16))(v8);
    }
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    result = (uint64_t)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x20uLL, 0x743898A5uLL);
    if (result)
    {
      *(_DWORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 28;
      ++dword_1ECDC7C98;
      *(_QWORD *)result = off_1E1599568;
      *(_DWORD *)(result + 16) = v4;
      if (a3)
      {
        v15 = (unsigned int *)((char *)a3 + 8);
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 + 1, v15));
        if (!v16)
        {
          a3 = 0;
          do
            v17 = __ldaxr(v15);
          while (__stlxr(v17 - 1, v15));
        }
      }
      *(_QWORD *)(result + 24) = a3;
    }
    *v9 = result;
  }
  return result;
}

void CA::Render::KeyValue::~KeyValue(CA::Render::KeyValue *this, const CA::Render::Object *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  malloc_zone_t *malloc_zone;

  *(_QWORD *)this = off_1E1599568;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
  }
  --dword_1ECDC7C98;
  *(_QWORD *)this = off_1E1598C30;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0)
    CA::Render::Encoder::ObjectCache::invalidate(this, a2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = off_1E1599568;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
  }
  --dword_1ECDC7C98;
  *(_QWORD *)this = off_1E1598C30;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0)
    CA::Render::Encoder::ObjectCache::invalidate(this, a2);
}

unsigned int *CA::Render::Layer::set_identifiers(unsigned int *result, unsigned int *a2)
{
  unsigned int *v2;
  _QWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = a2;
  if (a2 || *((_QWORD *)result + 16))
  {
    v3 = CA::Render::Layer::ensure_ext((CA::Render::Layer *)result);
    result = (unsigned int *)v3[18];
    if (result != v2)
    {
      if (result)
      {
        v4 = result + 2;
        do
        {
          v5 = __ldaxr(v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, v4));
        if (!v6)
          result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 16))(result);
      }
      if (v2)
      {
        v7 = v2 + 2;
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 + 1, v7));
        if (!v8)
        {
          v2 = 0;
          do
            v9 = __ldaxr(v7);
          while (__stlxr(v9 - 1, v7));
        }
      }
      v3[18] = v2;
    }
  }
  return result;
}

unsigned int *CA::Render::Layer::set_timing(unsigned int *result, unsigned int *a2)
{
  unsigned int *v2;
  _QWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = a2;
  if (a2 || *((_QWORD *)result + 16))
  {
    v3 = CA::Render::Layer::ensure_ext((CA::Render::Layer *)result);
    result = (unsigned int *)v3[1];
    if (result != v2)
    {
      if (result)
      {
        v4 = result + 2;
        do
        {
          v5 = __ldaxr(v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, v4));
        if (!v6)
          result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 16))(result);
      }
      if (v2)
      {
        v7 = v2 + 2;
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 + 1, v7));
        if (!v8)
        {
          v2 = 0;
          do
            v9 = __ldaxr(v7);
          while (__stlxr(v9 - 1, v7));
        }
      }
      v3[1] = v2;
    }
  }
  return result;
}

unsigned int *CA::Render::Layer::set_contents_transform(unsigned int *this, CA::Render::Vector *a2)
{
  CA::Render::Vector *v2;
  _QWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = a2;
  if (a2 || *((_QWORD *)this + 16))
  {
    v3 = CA::Render::Layer::ensure_ext((CA::Render::Layer *)this);
    this = (unsigned int *)v3[4];
    if (this != (unsigned int *)v2)
    {
      if (this)
      {
        v4 = this + 2;
        do
        {
          v5 = __ldaxr(v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, v4));
        if (!v6)
          this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 16))(this);
      }
      if (v2)
      {
        v7 = (unsigned int *)((char *)v2 + 8);
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 + 1, v7));
        if (!v8)
        {
          v2 = 0;
          do
            v9 = __ldaxr(v7);
          while (__stlxr(v9 - 1, v7));
        }
      }
      v3[4] = v2;
    }
  }
  return this;
}

unsigned int *CA::Render::Layer::set_background_filters(unsigned int *result, unsigned int *a2)
{
  unsigned int *v2;
  _QWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = a2;
  if (a2 || *((_QWORD *)result + 16))
  {
    v3 = CA::Render::Layer::ensure_ext((CA::Render::Layer *)result);
    result = (unsigned int *)v3[13];
    if (result != v2)
    {
      if (result)
      {
        v4 = result + 2;
        do
        {
          v5 = __ldaxr(v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, v4));
        if (!v6)
          result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 16))(result);
      }
      if (v2)
      {
        v7 = v2 + 2;
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 + 1, v7));
        if (!v8)
        {
          v2 = 0;
          do
            v9 = __ldaxr(v7);
          while (__stlxr(v9 - 1, v7));
        }
      }
      v3[13] = v2;
    }
  }
  return result;
}

unsigned int *CA::Render::Layer::set_corner_contents(unsigned int *this, CA::Render::Object *a2)
{
  CA::Render::Object *v2;
  _QWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = a2;
  if (a2 || *((_QWORD *)this + 16))
  {
    v3 = CA::Render::Layer::ensure_ext((CA::Render::Layer *)this);
    this = (unsigned int *)v3[7];
    if (this != (unsigned int *)v2)
    {
      if (this)
      {
        v4 = this + 2;
        do
        {
          v5 = __ldaxr(v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, v4));
        if (!v6)
          this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 16))(this);
      }
      if (v2)
      {
        v7 = (unsigned int *)((char *)v2 + 8);
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 + 1, v7));
        if (!v8)
        {
          v2 = 0;
          do
            v9 = __ldaxr(v7);
          while (__stlxr(v9 - 1, v7));
        }
      }
      v3[7] = v2;
    }
  }
  return this;
}

unsigned int *CA::Render::Layer::set_corner_contents_center(unsigned int *this, CA::Render::Vector *a2)
{
  CA::Render::Vector *v2;
  _QWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = a2;
  if (a2 || *((_QWORD *)this + 16))
  {
    v3 = CA::Render::Layer::ensure_ext((CA::Render::Layer *)this);
    this = (unsigned int *)v3[8];
    if (this != (unsigned int *)v2)
    {
      if (this)
      {
        v4 = this + 2;
        do
        {
          v5 = __ldaxr(v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, v4));
        if (!v6)
          this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 16))(this);
      }
      if (v2)
      {
        v7 = (unsigned int *)((char *)v2 + 8);
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 + 1, v7));
        if (!v8)
        {
          v2 = 0;
          do
            v9 = __ldaxr(v7);
          while (__stlxr(v9 - 1, v7));
        }
      }
      v3[8] = v2;
    }
  }
  return this;
}

BOOL CA::OGL::BlurFilter::identity(CA::OGL::BlurFilter *this, CA::Render::KeyValueArray **a2)
{
  return CA::Render::KeyValueArray::get_float_key(a2[5], (const CA::Render::KeyValueArray *)0x12E, 0.0) <= 0.0;
}

unsigned int *CA::Render::copy_render_array(const __CFArray *a1, int a2)
{
  unsigned int *result;
  unsigned int *v3;
  unsigned int v4;

  result = CA::Render::copy_render_object(a1, a2);
  if (result && *((_BYTE *)result + 12) != 1)
  {
    v3 = result + 2;
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (v4 == 1)
      (*(void (**)(unsigned int *))(*(_QWORD *)result + 16))(result);
    return 0;
  }
  return result;
}

_DWORD *CA::Render::copy_render_object(const __CFArray *a1, int a2)
{
  CFIndex Count;
  CFIndex v5;
  size_t v6;
  char *v7;
  _DWORD *v8;
  int v9;
  char *v10;
  CFIndex v11;
  const double *v12;
  _DWORD *v13;
  void **v14;
  void *v15;
  CA::Render::Array *v16;
  uint64_t i;
  unsigned __int8 *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  _QWORD v23[2];
  CFRange v24;

  v23[1] = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  Count = CFArrayGetCount(a1);
  if (!Count)
    return 0;
  v5 = Count;
  v6 = 8 * Count;
  if ((unint64_t)(8 * Count) > 0x1000)
  {
    v7 = (char *)malloc_type_malloc(8 * Count, 0x8D3DBFD1uLL);
  }
  else
  {
    MEMORY[0x1E0C80A78](Count);
    v7 = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v7, v6);
  }
  v24.location = 0;
  v24.length = v5;
  CFArrayGetValues(a1, v24, (const void **)v7);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v9 = 0;
    v10 = v7;
    v11 = v5;
    do
    {
      v10 += 8;
      objc_opt_class();
      v9 += objc_opt_isKindOfClass() & 1;
      --v11;
    }
    while (v11);
    v8 = CA::Render::Vector::new_vector((CA::Render::Vector *)(4 * v9), 0, v12);
    v13 = v8 + 6;
    v14 = (void **)v7;
    do
    {
      v15 = *v14;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        objc_msgSend(v15, "_getPoints:", v13);
      v13 += 8;
      ++v14;
      --v5;
    }
    while (v5);
  }
  else
  {
    v16 = 0;
    for (i = 0; i != v5; ++i)
    {
      v18 = (unsigned __int8 *)objc_msgSend(*(id *)&v7[8 * i], "CA_copyRenderValue");
      if (v18)
      {
        if (a2 && v18[12] != a2)
        {
          v19 = (unsigned int *)(v18 + 8);
          do
          {
            v20 = __ldaxr(v19);
            v21 = v20 - 1;
          }
          while (__stlxr(v21, v19));
          if (!v21)
            (*(void (**)(unsigned __int8 *))(*(_QWORD *)v18 + 16))(v18);
        }
        else
        {
          *(_QWORD *)&v7[8 * (_QWORD)v16] = v18;
          v16 = (CA::Render::Array *)((char *)v16 + 1);
        }
      }
    }
    v8 = CA::Render::Array::new_array(v16, v7, 0, 0);
  }
  if (v6 > 0x1000)
    free(v7);
  return v8;
}

uint64_t CA::Context::Generic::local_id(CA::Context::Generic *this)
{
  return *(unsigned int *)(*((_QWORD *)this + 1) + 8);
}

void CA::Render::PresentationModifier::~PresentationModifier(CA::Render **this, void **a2)
{
  malloc_zone_t *malloc_zone;

  CA::Render::PresentationModifier::~PresentationModifier(this, a2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

{
  const CA::Render::Object *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *this = (CA::Render *)off_1E15982D0;
  CA::Render::key_path_free(this[4], a2);
  v4 = (unsigned int *)this[2];
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
  }
  --dword_1ECDC7CD0;
  *this = (CA::Render *)off_1E1598C30;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0)
    CA::Render::Encoder::ObjectCache::invalidate((CA::Render::Encoder::ObjectCache *)this, v3);
}

void CA::Render::key_path_free(CA::Render *this, void **a2)
{
  malloc_zone_t *malloc_zone;

  if (this)
  {
    if ((this & 1) == 0)
    {
      malloc_zone = (malloc_zone_t *)get_malloc_zone();
      malloc_zone_free(malloc_zone, this);
    }
  }
}

CA::Render *CA::Render::key_path_set(CA::Render *this, CFStringRef theString, const __CFString *a3)
{
  CA::Render *v3;
  const char *v4;
  const unsigned int *v5;
  void **v6;
  char *v7;
  CA::Render *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  _OWORD v13[4];
  char buffer[1024];
  uint64_t v15;

  v3 = this;
  v15 = *MEMORY[0x1E0C80C00];
  if (theString)
  {
    memset(v13, 0, sizeof(v13));
    if (CFStringGetCString(theString, buffer, 1024, 0x8000100u))
    {
      v6 = 0;
      v7 = buffer;
      while (2)
      {
        v8 = (CA::Render *)v7;
        do
        {
          v10 = *v7++;
          v9 = v10;
          if (!v10)
          {
            if (v7 <= (char *)v8)
              return (CA::Render *)CA::Render::key_path_set_atoms(v3, v6, v13, v5);
            v12 = CA::Render::parse_index(v8, v7, v4);
            if (v12 || (v12 = CAInternAtomWithCString((const char *)v8)) != 0)
            {
              *((_DWORD *)v13 + (_QWORD)v6) = v12;
              v6 = (void **)((char *)v6 + 1);
              return (CA::Render *)CA::Render::key_path_set_atoms(v3, v6, v13, v5);
            }
            goto LABEL_16;
          }
        }
        while (v9 != 46);
        *(v7 - 1) = 0;
        v11 = CA::Render::parse_index(v8, v7, v4);
        if (!v11)
        {
          v11 = CAInternAtomWithCString((const char *)v8);
          if (!v11)
            goto LABEL_16;
        }
        *((_DWORD *)v13 + (_QWORD)v6) = v11;
        v6 = (void **)((char *)v6 + 1);
        if (v6 != (void **)16)
          continue;
        break;
      }
    }
    else
    {
LABEL_16:
      v6 = 0;
    }
    return (CA::Render *)CA::Render::key_path_set_atoms(v3, v6, v13, v5);
  }
  else
  {
    *(_QWORD *)this = 0;
  }
  return this;
}

uint64_t CA::Render::Decoder::decode_keypath(CA::Render::Decoder *this)
{
  uint64_t v2;
  void **v3;
  uint64_t v4;
  _DWORD *v5;
  size_t v6;
  const unsigned int *v7;
  void **v8;
  unsigned int v9;
  const unsigned int *v10;
  _QWORD v12[2];

  v12[1] = *MEMORY[0x1E0C80C00];
  v12[0] = 0;
  if ((*((_BYTE *)this + 18) & 1) == 0)
  {
    v2 = CA::Render::Decoder::decode_int16(this);
    v3 = (void **)v2;
    if (v2 >= 0x401)
    {
      v5 = malloc_type_malloc(4 * v2, 0x6FA2ED0BuLL);
      if (!v5)
      {
        CA::Render::Decoder::set_fatal_error(this, "%s - atoms = NULL", "decode_keypath");
        v12[0] = 0;
        return v12[0];
      }
    }
    else
    {
      MEMORY[0x1E0C80A78](v2);
      v5 = (_DWORD *)((char *)v12 - v4);
      bzero((char *)v12 - v4, v6);
      if (!(_DWORD)v3)
      {
        CA::Render::key_path_set_atoms((CA::Render *)v12, v3, v5, v7);
        return v12[0];
      }
    }
    v8 = 0;
    do
    {
      if (CA::Render::Decoder::decode_int8(this))
        v9 = CA::Render::Decoder::decode_int32(this) | 0x40000000;
      else
        v9 = CA::Render::Decoder::decode_atom(this);
      v5[(_QWORD)v8] = v9;
      v8 = (void **)((char *)v8 + 1);
    }
    while (v3 != v8);
    CA::Render::key_path_set_atoms((CA::Render *)v12, v3, v5, v10);
    if (v3 > 0x400)
      free(v5);
  }
  return v12[0];
}

UInt8 *CA::Render::Decoder::decode_atom(CA::Render::Decoder *this)
{
  uint64_t v2;
  UInt8 *v3;
  const __CFString *v4;
  CFIndex numBytes;
  _BYTE v7[256];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if ((*((_BYTE *)this + 18) & 1) != 0)
    return 0;
  v2 = CA::Render::Decoder::decode_int8(this);
  v3 = (UInt8 *)v2;
  if (v2 > 0xFD)
  {
    if ((_DWORD)v2 == 254)
      return (UInt8 *)CA::Render::Decoder::decode_int16(this);
    numBytes = 0;
    v3 = (UInt8 *)CA::Render::Decoder::decode_data(this, v7, 0x100uLL, (unint64_t *)&numBytes, 0x400uLL);
    if (!v3)
    {
      CA::Render::Decoder::set_fatal_error(this, "%s - ptr = NULL", "decode_atom");
      return v3;
    }
    v4 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE18], v3, numBytes, 0x8000100u, 1u);
    if (v3 != v7)
      free(v3);
    if (v4)
    {
      v3 = (UInt8 *)CAInternAtom(v4, 1);
      CFRelease(v4);
      return v3;
    }
    CA::Render::Decoder::set_fatal_error(this, "%s - string = NULL", "decode_atom");
    return 0;
  }
  return v3;
}

uint64_t CA::Render::key_path_set_atoms(CA::Render *this, void **a2, _DWORD *a3, const unsigned int *a4)
{
  uint64_t result;
  malloc_zone_t *malloc_zone;
  void **v9;

  if (a2)
  {
    if (a2 == (void **)1)
    {
      result = (2 * *a3) | 1u;
    }
    else
    {
      malloc_zone = (malloc_zone_t *)get_malloc_zone();
      result = (uint64_t)malloc_type_zone_malloc(malloc_zone, 4 * (_QWORD)a2 + 4, 0x8BB15036uLL);
      v9 = 0;
      *(_DWORD *)result = (_DWORD)a2;
      do
      {
        *(_DWORD *)(result + 4 * (_QWORD)v9 + 4) = a3[(_QWORD)v9];
        v9 = (void **)((char *)v9 + 1);
      }
      while (a2 != v9);
    }
  }
  else
  {
    result = 0;
  }
  *(_QWORD *)this = result;
  return result;
}

uint64_t CA::Render::parse_index(CA::Render *this, const char *a2, const char *a3)
{
  char *v4;
  int v6;
  BOOL v7;
  char *v9[2];

  v9[1] = *(char **)MEMORY[0x1E0C80C00];
  if (a2 - (const char *)this < 9)
    return 0;
  if (*(_BYTE *)this != 64)
    return 0;
  v4 = (char *)(a2 - 2);
  if (*(a2 - 2) != 41 || strncmp((const char *)this, "@index(", 7uLL))
    return 0;
  v9[0] = 0;
  v6 = strtol((const char *)this + 7, v9, 10);
  if (v6 >> 30)
    v7 = 1;
  else
    v7 = v6 <= -1;
  if (!v7 && v9[0] == v4)
    return v6 | 0x40000000u;
  else
    return 0;
}

_DWORD *CA::Render::BackdropLayer::copy@<X0>(CA::Render::BackdropLayer *this@<X0>, _QWORD *a2@<X8>)
{
  malloc_zone_t *malloc_zone;
  _DWORD *result;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;

  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  result = malloc_type_zone_calloc(malloc_zone, 1uLL, 0x60uLL, 0x743898A5uLL);
  if (result)
  {
    result[2] = 1;
    result[3] = 3;
    ++dword_1ECDC7C34;
    *(_QWORD *)result = off_1E1596DB8;
    v6 = *((_QWORD *)this + 3);
    *((_QWORD *)result + 2) = *((_QWORD *)this + 2);
    if (v6)
    {
      v7 = (unsigned int *)(v6 + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
      if (!v8)
      {
        v6 = 0;
        do
          v12 = __ldaxr(v7);
        while (__stlxr(v12 - 1, v7));
      }
    }
    *((_QWORD *)result + 3) = v6;
    *((_QWORD *)result + 4) = *((_QWORD *)this + 4);
    result[10] = *((_DWORD *)this + 10);
    *((_OWORD *)result + 3) = *((_OWORD *)this + 3);
    *((_OWORD *)result + 4) = *((_OWORD *)this + 4);
    *((_BYTE *)result + 80) = *((_BYTE *)this + 80);
    v9 = *((_QWORD *)this + 11);
    if (v9)
    {
      v10 = (unsigned int *)(v9 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
      if (!v11)
      {
        v9 = 0;
        do
          v13 = __ldaxr(v10);
        while (__stlxr(v13 - 1, v10));
      }
    }
    *((_QWORD *)result + 11) = v9;
    result[3] |= *((_DWORD *)this + 3) & 0xFFFFFF00;
  }
  *a2 = result;
  return result;
}

char *CA::Render::ShapeLayer::copy@<X0>(CA::Render::ShapeLayer *this@<X0>, _QWORD *a2@<X8>)
{
  malloc_zone_t *malloc_zone;
  char *result;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  CA::Render::ShapeLayer *v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;

  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  result = (char *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x98uLL, 0x743898A5uLL);
  if (result)
  {
    *((_DWORD *)result + 2) = 1;
    *((_DWORD *)result + 3) = 46;
    ++dword_1ECDC7CE0;
    *(_QWORD *)result = off_1E1596258;
    v6 = *((_QWORD *)this + 2);
    if (v6)
    {
      v7 = (unsigned int *)(v6 + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
      if (!v8)
      {
        v6 = 0;
        do
          v27 = __ldaxr(v7);
        while (__stlxr(v27 - 1, v7));
      }
    }
    *((_QWORD *)result + 2) = v6;
    *(_OWORD *)(result + 24) = *(_OWORD *)((char *)this + 24);
    v9 = *((_QWORD *)this + 5);
    if (v9)
    {
      v10 = (unsigned int *)(v9 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
      if (!v11)
      {
        v9 = 0;
        do
          v28 = __ldaxr(v10);
        while (__stlxr(v28 - 1, v10));
      }
    }
    *((_QWORD *)result + 5) = v9;
    *((_OWORD *)result + 3) = *((_OWORD *)this + 3);
    v12 = *((_QWORD *)this + 8);
    if (v12)
    {
      v13 = (unsigned int *)(v12 + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 + 1, v13));
      if (!v14)
      {
        v12 = 0;
        do
          v29 = __ldaxr(v13);
        while (__stlxr(v29 - 1, v13));
      }
    }
    *((_QWORD *)result + 8) = v12;
    *(_OWORD *)(result + 72) = *(_OWORD *)((char *)this + 72);
    *(_OWORD *)(result + 88) = *(_OWORD *)((char *)this + 88);
    *((_QWORD *)result + 13) = *((_QWORD *)this + 13);
    v15 = *((_QWORD *)this + 14);
    if (v15)
    {
      v16 = (unsigned int *)(v15 + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 + 1, v16));
      if (!v17)
      {
        v15 = 0;
        do
          v30 = __ldaxr(v16);
        while (__stlxr(v30 - 1, v16));
      }
    }
    *((_QWORD *)result + 14) = v15;
    v18 = *((_DWORD *)result + 30) & 0xFFFFFF00 | *((unsigned __int8 *)this + 120);
    *((_DWORD *)result + 30) = v18;
    v19 = v18 & 0xFFFF00FF | (*((unsigned __int8 *)this + 121) << 8);
    *((_DWORD *)result + 30) = v19;
    *((_DWORD *)result + 30) = v19 & 0xFF00FFFF | (*((unsigned __int8 *)this + 122) << 16);
    v20 = (unsigned int *)((char *)this + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 + 1, v20));
    v22 = this;
    if (!v21)
    {
      v22 = 0;
      do
        v26 = __ldaxr(v20);
      while (__stlxr(v26 - 1, v20));
    }
    *((_QWORD *)result + 16) = v22;
    v23 = *((_QWORD *)this + 17);
    if (v23)
    {
      v24 = (unsigned int *)(v23 + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 + 1, v24));
      if (!v25)
      {
        v23 = 0;
        do
          v31 = __ldaxr(v24);
        while (__stlxr(v31 - 1, v24));
      }
    }
    *((_QWORD *)result + 17) = v23;
    *((_QWORD *)result + 18) = *((_QWORD *)this + 18);
  }
  *a2 = result;
  return result;
}

void CA::Render::add_filter(CA::Render *this, uint64_t a2, const CA::Render::FilterSubclass *a3)
{
  unsigned int v4;
  int *v5;

  v4 = this;
  os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::filter_lock);
  v5 = (int *)CA::Render::filter_table;
  if (!CA::Render::filter_table)
  {
    v5 = (int *)x_hash_table_new_(0, 0, 0, 0, 0, 0);
    CA::Render::filter_table = (uint64_t)v5;
  }
  hash_table_modify(v5, v4, a2, 0);
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::filter_lock);
}

_DWORD *CA::Render::SecureIndicatorLayer::copy@<X0>(CA::Render::SecureIndicatorLayer *this@<X0>, _QWORD *a2@<X8>)
{
  malloc_zone_t *malloc_zone;
  _DWORD *result;

  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  result = malloc_type_zone_calloc(malloc_zone, 1uLL, 0x18uLL, 0x743898A5uLL);
  if (result)
  {
    result[2] = 1;
    result[3] = 45;
    ++dword_1ECDC7CDC;
    *(_QWORD *)result = off_1E1598340;
    result[4] = *((_DWORD *)this + 4);
    *((_WORD *)result + 10) = *((_WORD *)this + 10);
  }
  *a2 = result;
  return result;
}

_DWORD *CA::Render::ReplicatorLayer::copy@<X0>(CA::Render::ReplicatorLayer *this@<X0>, _QWORD *a2@<X8>)
{
  malloc_zone_t *malloc_zone;
  _DWORD *result;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;

  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  result = malloc_type_zone_calloc(malloc_zone, 1uLL, 0x48uLL, 0x743898A5uLL);
  if (result)
  {
    result[2] = 1;
    result[3] = 44;
    ++dword_1ECDC7CD8;
    *(_QWORD *)result = off_1E1597788;
    result[4] = *((_DWORD *)this + 4);
    v6 = *((_QWORD *)this + 3);
    if (v6)
    {
      v7 = (unsigned int *)(v6 + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
      if (!v8)
      {
        v6 = 0;
        do
          v10 = __ldaxr(v7);
        while (__stlxr(v10 - 1, v7));
      }
    }
    v9 = 0;
    *((_QWORD *)result + 3) = v6;
    result[3] |= *((_DWORD *)this + 3) & 0xFFFFFF00;
    do
    {
      result[v9 + 8] = *(_DWORD *)((char *)this + v9 * 4 + 32);
      ++v9;
    }
    while (v9 != 9);
  }
  *a2 = result;
  return result;
}

char *CA::Render::PortalLayer::copy@<X0>(CA::Render::PortalLayer *this@<X0>, _QWORD *a2@<X8>)
{
  malloc_zone_t *malloc_zone;
  char *result;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;

  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  result = (char *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x40uLL, 0x743898A5uLL);
  if (result)
  {
    *((_DWORD *)result + 2) = 1;
    *((_DWORD *)result + 3) = 40;
    ++dword_1ECDC7CC8;
    *(_QWORD *)result = off_1E1596640;
    *(_OWORD *)(result + 24) = *(_OWORD *)((char *)this + 24);
    *((_DWORD *)result + 10) = *((_DWORD *)this + 10);
    v6 = *((_QWORD *)this + 6);
    if (v6)
    {
      v7 = (unsigned int *)(v6 + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
      if (!v8)
      {
        v6 = 0;
        do
          v12 = __ldaxr(v7);
        while (__stlxr(v12 - 1, v7));
      }
    }
    *((_QWORD *)result + 6) = v6;
    v9 = *((_QWORD *)this + 7);
    if (v9)
    {
      v10 = (unsigned int *)(v9 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
      if (!v11)
      {
        v9 = 0;
        do
          v13 = __ldaxr(v10);
        while (__stlxr(v13 - 1, v10));
      }
    }
    *((_QWORD *)result + 7) = v9;
    *((_DWORD *)result + 3) |= *((_DWORD *)this + 3) & 0xFFFFFF00;
  }
  *a2 = result;
  return result;
}

uint64_t compare_pointer(_QWORD *a1, _QWORD *a2)
{
  return (*a1 > *a2) - (*a1 < *a2);
}

void CA::OGL::AsynchronousDispatcher::stop_timer(CFTypeRef *this)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = (_QWORD *)CA::OGL::AsynchronousDispatcher::renderer((CA::OGL::AsynchronousDispatcher *)this);
  if (v2)
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v2 + 224))(*v2, 0);
  v3 = (uint64_t)this[5];
  if (v3)
  {
    CADisplayTimerInvalidate(v3);
    CFRelease(this[5]);
    this[5] = 0;
  }
}

void CA::OGL::AsynchronousDispatcher::tick(CA::OGL::AsynchronousDispatcher *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  uint64_t v9;
  os_unfair_lock_s *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  size_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  char *v26;
  int v27;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  char *v38;
  unsigned int v39;
  char *v40;
  unsigned int *v41;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const CA::Bounds *v50;
  uint64_t v51;
  unint64_t v52;
  int v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  double v60;
  const double *v61;
  float v62;
  _OWORD *v63;
  uint64_t v64;
  uint64_t v65;
  CA::Render::Layer *v66;
  uint64_t v67;
  const double *v68;
  unint64_t v69;
  int v70;
  uint64_t v71;
  CA::Render::LayerNode *v72;
  const CA::Shape *v73;
  int64x2_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  const CA::Render::LayerNode *v78;
  float v79;
  float v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  __IOSurface *v86;
  const CA::Shape *v87;
  CA::Shape **v88;
  CA::Shape *v89;
  CA::Shape *v90;
  int v91;
  CA::OGL::Renderer *v92;
  CA::WindowServer::SharedEvent *v93;
  CA::Shape *v94;
  const CA::Render::Update *v95;
  _QWORD *v96;
  int v97;
  _QWORD *v98;
  CA::Render::LayerNode *v99;
  char *v100;
  CA::Render::HitTestTree *v101;
  CA::Render::LayerNode *v102;
  unsigned int *v103;
  unsigned int v104;
  unsigned int v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  os_unfair_lock_s *v109;
  uint64_t v110;
  os_unfair_lock_s *v111;
  uint64_t v112;
  unint64_t v113;
  CA::Shape *v114;
  char *v115;
  CA::Render::Handle *v116;
  CA::Render::Context *v117;
  unint64_t v118;
  unsigned int *v119;
  unsigned int v120;
  unsigned int v121;
  char *v122;
  CA::Shape *v123;
  unsigned int *v124;
  unsigned int *v125;
  unsigned int v126;
  unsigned int v127;
  uint64_t v128;
  unsigned int *v129;
  unsigned int v130;
  __int128 v131;
  unsigned int v132;
  uint64_t v133;
  CA::Shape **v134;
  _OWORD *v135;
  unsigned int *v136;
  CA::Shape *v137;
  int v138;
  void *v139;
  float64x2_t v140;
  float64x2_t v141;
  CA::OGL::Renderer *v142;
  os_unfair_lock_s *v143;
  char *v144;
  _BYTE v145[128];
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  __int128 v150;
  float64x2_t v151;
  __int128 v152;
  float64x2_t v153;
  float64x2_t v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  float64x2_t v162[7];
  int v163;
  double v164[4];
  __int128 v165;
  _BYTE v166[32];
  __int128 v167;
  __int128 v168;
  float64x2_t v169;
  __int128 v170;
  uint64_t v171;
  unint64_t v172[2];
  const CA::Render::Update *v173[29];
  int v174;
  int v175;
  int v176;
  uint64_t v177;
  uint64_t v178;
  float64x2_t v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  int v187;
  uint64_t v188;
  __int128 v189;
  uint64_t v190;
  uint64_t v191;

  MEMORY[0x1E0C80A78](this);
  v2 = v1;
  v191 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(v1 + 40);
  v189 = *(_OWORD *)(v2 + 72);
  v190 = *(_QWORD *)(v2 + 88);
  CADisplayTimerAlignPhase(v3, &v189);
  v4 = *(_QWORD *)(v2 + 48);
  if (v4 >= *(_QWORD *)(v2 + 88) >> 1)
    v5 = v4 - (*(_QWORD *)(v2 + 88) >> 1);
  else
    v5 = 0;
  v6 = mach_absolute_time();
  v7 = CATimeWithHostTime(v6);
  v8 = CATimeWithHostTime(v5);
  v9 = mach_continuous_time();
  v10 = (os_unfair_lock_s *)(v2 + 4);
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 4));
  v12 = *(_QWORD *)(v2 + 8);
  if (!v12)
  {
    CA::OGL::AsynchronousDispatcher::stop_timer((CFTypeRef *)v2);
    goto LABEL_8;
  }
  v13 = v8 + v7;
  v14 = *(unsigned int *)(v2 + 16);
  v133 = v14;
  if (v14 <= 0x55)
  {
    v143 = (os_unfair_lock_s *)(v2 + 4);
    MEMORY[0x1E0C80A78](v11);
    v144 = (char *)&v131 - ((v15 + 15) & 0x7FFFFFFFF0);
    bzero(v144, v15);
    goto LABEL_12;
  }
  v144 = (char *)malloc_type_malloc(48 * v14, 0x10200401CD0EA8FuLL);
  if (!v144)
  {
LABEL_8:
    os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 4));
    return;
  }
  v12 = *(_QWORD *)(v2 + 8);
  if (v12)
  {
    v143 = (os_unfair_lock_s *)(v2 + 4);
LABEL_12:
    v16 = 0;
    v17 = v9 + v5;
    do
    {
      v18 = v12;
      v12 = *(_QWORD *)(v12 + 192);
      if (*(_QWORD *)(v18 + 16))
      {
        v19 = v13 >= *(double *)(v18 + 368) || *(_BYTE *)(v18 + 356) != 0;
        os_unfair_lock_lock((os_unfair_lock_t)(v18 + 376));
        v20 = *(_QWORD *)(v18 + 384);
        if (!v20 || (v21 = *(char **)v20, v22 = *(_QWORD *)(v20 + 8), *(_QWORD *)v20 == v22))
        {
          v31 = *(_QWORD *)(v18 + 536);
          v30 = v17;
          if (v31)
            v30 = *(_QWORD *)(v18 + 520) + v31;
        }
        else
        {
          v23 = v22 - (_QWORD)v21;
          v24 = (unint64_t)(v22 - (_QWORD)v21) >> 3;
          v25 = v24 & ((int)v24 >> 31);
          v26 = &v21[(v23 & 0x7FFFFFFF8) - 8];
          v27 = v24;
          while (1)
          {
            _VF = __OFSUB__(v27--, 1);
            if (v27 < 0 != _VF)
              break;
            v29 = *(_QWORD *)v26;
            v26 -= 8;
            if (v29 > v17)
            {
              v25 = v27 + 1;
              break;
            }
          }
          if (v25 >= (int)v24)
          {
            v30 = -1;
          }
          else
          {
            v30 = *(_QWORD *)&v21[8 * v25];
            std::vector<unsigned long long>::resize((char **)v20, v25);
          }
        }
        os_unfair_lock_unlock((os_unfair_lock_t)(v18 + 376));
        if (v17 >= v30 && v19)
        {
          v33 = (unsigned int *)(v18 + 8);
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 + 1, v33));
          *(_QWORD *)&v144[48 * v16] = v18;
          v35 = *(_QWORD *)(v18 + 16);
          v36 = (unsigned int *)(v35 + 8);
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 + 1, v36));
          if (!v37)
          {
            do
            {
              v35 = 0;
              v39 = __ldaxr(v36);
            }
            while (__stlxr(v39 - 1, v36));
          }
          v38 = &v144[48 * v16];
          *((_QWORD *)v38 + 1) = v35;
          *(_QWORD *)(v18 + 536) = v30;
          *((_QWORD *)v38 + 2) = v30;
          ++v16;
        }
      }
    }
    while (v12);
    v10 = v143;
    if (v16 > v133)
      __assert_rtn("tick", "ogl-asynchronous.cpp", 486, "valid_item_count <= item_count");
    goto LABEL_43;
  }
  v16 = 0;
LABEL_43:
  os_unfair_lock_unlock(v10);
  v40 = &v144[48 * v16];
  v142 = (CA::OGL::Renderer *)CA::OGL::AsynchronousDispatcher::renderer((CA::OGL::AsynchronousDispatcher *)v2);
  v143 = (os_unfair_lock_s *)v40;
  if (v142)
  {
    v132 = v16;
    if (v16)
    {
      v41 = (unsigned int *)&v188;
      v134 = v173;
      v135 = v166;
      v141 = (float64x2_t)xmmword_18474DF50;
      v140 = (float64x2_t)xmmword_18474DF40;
      __asm { FMOV            V0.2D, #1.0 }
      v131 = _Q0;
      v46 = v144;
      v136 = (unsigned int *)&v188;
      while (1)
      {
        v47 = *(_QWORD *)v46;
        v48 = CA::Render::Context::context_by_id((CA::Render::Context *)*(unsigned int *)(*(_QWORD *)v46 + 12));
        if (v48)
          break;
        v69 = 0;
        v70 = 0;
        v71 = 0;
LABEL_98:
        *((_QWORD *)v46 + 3) = v71;
        *((_QWORD *)v46 + 4) = v69;
        *((_DWORD *)v46 + 10) = v70;
        *((_DWORD *)v46 + 11) = 0;
        v46 += 48;
        if (v46 >= v40)
          goto LABEL_99;
      }
      v49 = v48;
      bzero(v172, 0x430uLL);
      CA::Render::Update::Update((CA::Render::Update *)v172, (const CA::Bounds *)&v189, 0x2000uLL, v13, 0, 0, *(_DWORD *)(v47 + 360), *(_DWORD *)(v47 + 360), (const CA::Bounds *)(v47 + 336), 0);
      if (!v172[0])
      {
        v71 = 0;
LABEL_94:
        v69 = CA::Shape::ref((unint64_t)v173[0], v50);
        v70 = v174;
        CA::Render::Update::~Update((CA::Render::Update *)v172, v102);
        v103 = (unsigned int *)(v49 + 8);
        do
        {
          v104 = __ldaxr(v103);
          v105 = v104 - 1;
        }
        while (__stlxr(v105, v103));
        if (!v105)
          (*(void (**)(uint64_t))(*(_QWORD *)v49 + 16))(v49);
        goto LABEL_98;
      }
      v51 = *v41;
      v52 = v51 & 0xFFFFFFFFFFEFFFFFLL | ((unint64_t)*((unsigned __int16 *)v41 + 2) << 32);
      *v41 = v51 & 0xFFEFFFFF;
      *((_WORD *)v41 + 2) = WORD2(v52);
      v137 = (CA::Shape *)(v47 + 336);
      if (CADeviceNeedsP3ShapeTracking::once != -1)
        dispatch_once(&CADeviceNeedsP3ShapeTracking::once, &__block_literal_global_42);
      v53 = 150994944;
      if (!CADeviceNeedsP3ShapeTracking::p3_tracking)
        v53 = 0x8000000;
      *v41 = v53 | *v41 & 0xF6FFFFFF;
      CA::Render::Update::set_display_attributes((uint64_t)v172, (float *)(v47 + 24));
      v177 = *(_QWORD *)(v47 + 168);
      os_unfair_lock_lock((os_unfair_lock_t)(v47 + 376));
      v54 = *(_OWORD *)(v47 + 408);
      v55 = *(_OWORD *)(v47 + 424);
      v56 = *(_OWORD *)(v47 + 440);
      v154 = *(float64x2_t *)(v47 + 392);
      v155 = v54;
      v156 = v55;
      v157 = v56;
      v57 = *(_OWORD *)(v47 + 472);
      v58 = *(_OWORD *)(v47 + 488);
      v59 = *(_OWORD *)(v47 + 504);
      v158 = *(_OWORD *)(v47 + 456);
      v159 = v57;
      v160 = v58;
      v161 = v59;
      os_unfair_lock_unlock((os_unfair_lock_t)(v47 + 376));
      v152 = 0u;
      v153 = v141;
      v60 = *(float *)(v47 + 352);
      v146 = vmulq_n_f64(v140, v60);
      v147 = vmulq_n_f64((float64x2_t)0, v60);
      v148 = vmulq_n_f64(v141, v60);
      v149 = v147;
      v150 = 0u;
      v151 = v140;
      CA::Mat4Impl::mat4_concat(&v154, v154.f64, v146.f64, v61);
      v179 = v154;
      v180 = v155;
      v181 = v156;
      v182 = v157;
      v183 = v158;
      v184 = v159;
      v185 = v160;
      v186 = v161;
      v171 = 0;
      v169 = 0u;
      v170 = 0u;
      v167 = 0u;
      v168 = 0u;
      memset(v166, 0, sizeof(v166));
      v165 = 0u;
      memset(v164, 0, sizeof(v164));
      v62 = *(float *)(v47 + 352);
      v63 = v135;
      *v135 = 0u;
      v63[1] = 0u;
      *(double *)&v170 = v62;
      *((double *)&v170 + 1) = 1.0 / v62;
      v164[1] = v140.f64[1];
      *(float64_t *)&v165 = v141.f64[0];
      *((_QWORD *)&v167 + 1) = *(_QWORD *)&v140.f64[1];
      v169 = v141;
      v164[0] = v62;
      *((double *)&v165 + 1) = v62;
      *(_QWORD *)&v167 = 0x3FF0000000000000;
      LOBYTE(v171) = 8 * (v62 != 1.0);
      pthread_mutex_lock((pthread_mutex_t *)(v49 + 72));
      if (*(double *)(v47 + 368) == 0.0)
      {
        v64 = CA::Render::Context::root_layer_handle((CA::Render::Context *)v49);
        if (v64)
          *(_QWORD *)(v64 + 96) |= 8uLL;
      }
      v65 = CA::Render::Context::root_layer_handle((CA::Render::Context *)v49);
      if (v65 && (v66 = *(CA::Render::Layer **)(v65 + 16)) != 0)
      {
        memset(v145, 0, sizeof(v145));
        CA::Render::Layer::compute_frame_transform((uint64_t)v66, 0, (CA::Mat4Impl *)v145, 0);
        CA::Transform::set((uint64_t)v162, (CA::Mat4Impl *)v145, 1);
        CA::Transform::concat_left((CA::Transform *)v164, v162, v67, v68);
        CA::Render::Update::add_context((CA::Render::Update *)v172, (CA::Render::Context *)v49, v66, (const CA::Transform *)v164);
        v138 = 0;
      }
      else
      {
        CA::Render::Update::add_context((CA::Render::Update *)v172, (CA::Render::Context *)v49, 0, (const CA::Transform *)v164);
        v138 = 1;
      }
      pthread_mutex_unlock((pthread_mutex_t *)(v49 + 72));
      CA::Render::Update::added_all_contexts((CA::Render::Update *)v172, v72, v73, v74);
      v139 = (void *)MEMORY[0x186DBE2E4](v75, v76);
      v77 = *(_QWORD *)v142;
      CA::Render::Update::render_edr_factor((CA::Render::Update *)v172, v78);
      v80 = v79;
      os_unfair_lock_lock((os_unfair_lock_t)(v47 + 376));
      v81 = *(unsigned __int8 *)(v47 + 528);
      os_unfair_lock_unlock((os_unfair_lock_t)(v47 + 376));
      if (v81)
        v80 = 1.0;
      (*(void (**)(uint64_t, float))(*(_QWORD *)v77 + 1048))(v77, v80);
      *(_OWORD *)(v77 + 184) = *(_OWORD *)(v47 + 336);
      *(_WORD *)(v77 + 816) |= 2u;
      v82 = v178;
      os_unfair_lock_lock((os_unfair_lock_t)(v47 + 208));
      v83 = 0;
      v71 = 0;
      while (*(_DWORD *)(v47 + v83 + 236))
      {
        if (!v71 || *(_DWORD *)(v47 + v83 + 232) < *(_DWORD *)(v71 + 16))
          v71 = v47 + v83 + 216;
        v83 += 56;
        if (v83 == 112)
          goto LABEL_71;
      }
      v71 = v47 + v83 + 216;
LABEL_71:
      *(_DWORD *)(v71 + 20) = 1;
      os_unfair_lock_unlock((os_unfair_lock_t)(v47 + 208));
      os_unfair_lock_lock((os_unfair_lock_t)(v47 + 376));
      v84 = *(unsigned __int8 *)(v47 + 528);
      os_unfair_lock_unlock((os_unfair_lock_t)(v47 + 376));
      os_unfair_lock_lock((os_unfair_lock_t)(v47 + 376));
      v85 = *(unsigned __int8 *)(v47 + 529);
      os_unfair_lock_unlock((os_unfair_lock_t)(v47 + 376));
      dispatch_semaphore_wait(*(dispatch_semaphore_t *)(v71 + 32), 0xFFFFFFFFFFFFFFFFLL);
      dispatch_semaphore_wait(*(dispatch_semaphore_t *)(v71 + 24), 0xFFFFFFFFFFFFFFFFLL);
      if (*(_QWORD *)v71)
      {
        if (IOSurfaceGetProtectionOptions() == v82
          && *(unsigned __int8 *)(v71 + 54) == v84
          && *(unsigned __int8 *)(v71 + 55) == v85)
        {
          v88 = *(CA::Shape ***)(v71 + 8);
          if (v88)
          {
LABEL_83:
            *(_QWORD *)(v71 + 40) = v82;
            v91 = v176;
            *(_BYTE *)(v71 + 52) = (v176 & 0x8000) != 0;
            *(_BYTE *)(v71 + 53) = (v91 & 0x80000) != 0;
            *(_DWORD *)(v71 + 48) = v187;
            *(_BYTE *)(v71 + 54) = v84;
            *(_BYTE *)(v71 + 55) = v85;
            CA::shape_union(v134, v88, v87);
            v92 = v142;
            CA::OGL::Renderer::prepare_clip_shape(v142, v173[0]);
            (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v77 + 32))(v77, *(_QWORD *)v71, 0, 0);
            if (CADeviceHasBacklight::once != -1)
              dispatch_once(&CADeviceHasBacklight::once, &__block_literal_global_85);
            v40 = (char *)v143;
            if (CADeviceHasBacklight::has_backlight == 1 && *(_QWORD *)v71)
            {
              v163 = 0;
              memset(v162, 0, sizeof(v162));
              *(int8x8_t *)((char *)&v162[5].f64[1] + 4) = vand_s8((int8x8_t)(vcvts_n_s32_f32(v80, 0x14uLL) | 0x10000000000000), (int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v80 != 0.0), 0x1FuLL)));
              IOSurfaceSetBulkAttachments2();
            }
            CA::OGL::Renderer::render(v92, (const CA::Render::Update *)v172, 0, v93);
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v77 + 408))(v77, 0);
            (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v77 + 32))(v77, 0, 0, 0);
            v94 = (CA::Shape *)*((_QWORD *)v92 + 2);
            if (v94)
            {
              CA::Shape::unref(v94);
              *((_QWORD *)v92 + 2) = 0;
            }
            v95 = v173[7];
            v96 = *(_QWORD **)v92;
            v97 = v175;
            *((_DWORD *)v96 + 53) = v174;
            *((_DWORD *)v96 + 54) = v97;
            CA::Render::Update::release_objects(v172);
            v98 = *(_QWORD **)v92;
            v98[28] = v95;
            (*(void (**)(_QWORD *, _QWORD))(*v98 + 216))(v98, 0);
            *(_DWORD *)(v47 + 360) = v174;
            *(const CA::Render::Update **)(v47 + 368) = v173[8];
            *(_BYTE *)(v47 + 356) = 0;
            if ((v138 & 1) == 0)
            {
              v100 = CA::Render::Update::build_hit_test_tree((CA::Render::Update *)v172, 0, v99, (float)(1.0 / *(float *)(v47 + 352)));
              os_unfair_lock_lock((os_unfair_lock_t)(v47 + 180));
              v101 = *(CA::Render::HitTestTree **)(v47 + 184);
              *(_QWORD *)(v47 + 184) = v100;
              os_unfair_lock_unlock((os_unfair_lock_t)(v47 + 180));
              if (v101)
                CA::Render::HitTestTree::unref(v101);
            }
            objc_autoreleasePoolPop(v139);
            v41 = v136;
            goto LABEL_94;
          }
LABEL_81:
          v88 = (CA::Shape **)CA::Shape::new_shape(v137, (const CA::Bounds *)v88);
          v90 = *(CA::Shape **)(v71 + 8);
          *(_QWORD *)(v71 + 8) = v88;
          if (v90)
          {
            CA::Shape::unref(v90);
            v88 = *(CA::Shape ***)(v71 + 8);
          }
          goto LABEL_83;
        }
        if (*(_QWORD *)v71)
          CA::OGL::release_iosurface(*(CA::OGL **)v71, v86);
      }
      *(_QWORD *)v71 = CA::OGL::create_iosurface((CA::OGL *)*(int *)(v47 + 344), *(int *)(v47 + 348), v82, v84 != 0, v85 != 0);
      v89 = *(CA::Shape **)(v71 + 8);
      if (v89)
      {
        CA::Shape::unref(v89);
        *(_QWORD *)(v71 + 8) = 0;
      }
      goto LABEL_81;
    }
LABEL_99:
    (*(void (**)(_QWORD))(**(_QWORD **)v142 + 416))(*(_QWORD *)v142);
    v16 = v132;
  }
  if (!v16)
    goto LABEL_136;
  v106 = v144;
  do
  {
    v107 = *((_QWORD *)v106 + 3);
    if (v107)
    {
      v108 = *((_QWORD *)v106 + 4);
      if (v108)
      {
        v109 = *(os_unfair_lock_s **)v106;
        dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v107 + 24));
        dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v107 + 32));
        os_unfair_lock_lock(v109 + 52);
        v110 = 0;
        *(_DWORD *)(v107 + 20) = 2;
        *(_DWORD *)(v107 + 16) = *((_DWORD *)v106 + 10);
        while (1)
        {
          v111 = &v109[v110];
          if (&v109[v110 + 54] == (os_unfair_lock_s *)v107)
          {
            v114 = *(CA::Shape **)(v107 + 8);
            *(_QWORD *)(v107 + 8) = 1;
            if (!v114)
              goto LABEL_109;
          }
          else
          {
            v112 = *(_QWORD *)&v111[56]._os_unfair_lock_opaque;
            if (!v112)
              goto LABEL_109;
            v113 = CA::Shape::Union(v112, v108);
            v114 = *(CA::Shape **)&v111[56]._os_unfair_lock_opaque;
            *(_QWORD *)&v111[56]._os_unfair_lock_opaque = v113;
            if (!v114)
              goto LABEL_109;
          }
          CA::Shape::unref(v114);
LABEL_109:
          v110 += 14;
          if (v110 == 28)
          {
            os_unfair_lock_unlock(v109 + 52);
            v40 = (char *)v143;
            break;
          }
        }
      }
    }
    v106 += 48;
  }
  while (v106 < v40);
  v115 = v144;
  do
  {
    if (*((_QWORD *)v115 + 3))
    {
      if (*((_QWORD *)v115 + 4))
      {
        v116 = (CA::Render::Handle *)*((_QWORD *)v115 + 1);
        v117 = (CA::Render::Context *)CA::Render::Handle::retain_context(v116);
        if (v117)
        {
          v118 = (unint64_t)v117;
          CA::Render::Context::will_commit(v117);
          CA::Render::Handle::set_update_flags(v116, 7);
          CA::Render::Context::did_commit(v118, 1, 0, 1, 0, 0);
          v119 = (unsigned int *)(v118 + 8);
          do
          {
            v120 = __ldaxr(v119);
            v121 = v120 - 1;
          }
          while (__stlxr(v121, v119));
          if (!v121)
            (*(void (**)(unint64_t))(*(_QWORD *)v118 + 16))(v118);
        }
      }
    }
    v115 += 48;
  }
  while (v115 < v40);
  v122 = v144;
  do
  {
    v123 = (CA::Shape *)*((_QWORD *)v122 + 4);
    if (v123)
      CA::Shape::unref(v123);
    v124 = (unsigned int *)*((_QWORD *)v122 + 1);
    v125 = v124 + 2;
    do
    {
      v126 = __ldaxr(v125);
      v127 = v126 - 1;
    }
    while (__stlxr(v127, v125));
    if (!v127)
      (*(void (**)(unsigned int *))(*(_QWORD *)v124 + 16))(v124);
    v128 = *(_QWORD *)v122;
    v129 = (unsigned int *)(*(_QWORD *)v122 + 8);
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (v128 && v130 == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v128 + 8))(v128);
    v122 += 48;
  }
  while (v122 < v40);
LABEL_136:
  if (v133 > 0x55)
    free(v144);
}

void CA::Render::Update::add_context(CA::Render::Update *this, CA::Render::Context *a2, CA::Render::Layer *a3, const CA::Transform *a4)
{
  void *v8;
  int v9;
  uint64_t v10;
  const CA::Bounds *v11;
  int32x4_t v12;
  int32x4_t v13;
  uint64_t v14;
  unint64_t v15;
  _DWORD *v16;
  int v17;
  char v18;
  unint64_t bounds;
  int32x4_t v20;
  int32x4_t v21;
  int64x2_t v22;
  int64x2_t v23;
  int v24;
  int64x2_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int32x2_t v28;
  int64x2_t v29;
  CA::Shape *v30;
  int v31;
  int64x2_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int32x2_t v35;
  CA::Shape *v36;
  uint64_t v37;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  _QWORD *v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  CA::Render::LayerNode *v58;
  const CA::Shape *v59;
  uint64_t v60;
  double v61;
  uint64_t v62;
  double v63;
  CA::Shape **v65;
  int v66;
  uint64_t v67;
  unsigned int *v68;
  unsigned int v69;
  uint64_t *v70;
  uint64_t v71;
  const CA::Shape *v72;
  const int *v73;
  uint64_t *v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  const CA::Bounds *v81;
  unint64_t v82;
  unsigned int *v83;
  unsigned int v84;
  const CA::Bounds *v85;
  uint64_t *i;
  int v87;
  __int32 *v88;
  __int32 *v89;
  __int32 *v90;
  CA::Shape **v91;
  CA::Shape **v92;
  const CA::Shape *v93;
  const int *v94;
  CA::Shape *v95;
  const CA::Bounds *v96;
  CA::Shape *v97;
  const CA::Shape *v98;
  CA::Shape *v99;
  unsigned int *v100;
  unsigned int v101;
  unsigned int v102;
  uint64_t v103;
  unsigned int *v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int *v107;
  pid_t v109;
  unsigned int *v110;
  pid_t v112;
  __int128 v115;
  unsigned int v116;
  const CA::Shape **v117;
  uint64_t v118;
  _BYTE v119[136];
  int32x2_t *v120;
  uint64_t v121;
  CA::Render::Context *v122;
  CA::Render::Context *v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  CA::Shape **v127[3];
  __int128 v128;
  char v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char v135;
  char v136;
  __int128 v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  __int128 v144;
  _DWORD v145[7];
  __int128 v146;
  uint64_t v147;
  int v148;
  unsigned int v149;
  __int16 v150;
  uint64_t v151;

  v151 = *MEMORY[0x1E0C80C00];
  *((_QWORD *)a2 + 78) = 0;
  v8 = (void *)MEMORY[0x186DBE2E4]();
  v9 = BYTE9(xmmword_1ECDC6A90);
  if (BYTE9(xmmword_1ECDC6A90))
    kdebug_trace();
  if (a3)
  {
    v10 = *((_QWORD *)a2 + 52);
    if ((!v10 || (*((_DWORD *)this + 266) & 0x8000) != 0 || (*(_BYTE *)(v10 + 13) & 4) != 0)
      && CA::Render::Update::allowed_in_secure_update(this, a2, 0)
      && CA::Render::Update::allowed_to_include_context(this, a2)
      && *((float *)a2 + 48) <= *((float *)this + 264)
      && CA::Render::Update::allowed_in_update(this, a2, a3))
    {
      CA::Render::Update::add_included_context(this, (os_unfair_lock_s *)a2, 0);
      v14 = *((unsigned int *)this + 266);
      v15 = v14 | ((unint64_t)*((unsigned __int16 *)this + 534) << 32);
      if ((v14 & 4) != 0)
        v118 = 0;
      else
        v118 = *((_QWORD *)a3 + 18);
      v16 = (_DWORD *)((char *)this + 1064);
      v126 = 0;
      v17 = *((_DWORD *)a2 + 3);
      if ((v17 & 0x2000) != 0)
      {
        v126 = 8;
        *((_DWORD *)a2 + 3) = v17 & 0xFFFFDFFF;
        LOWORD(v15) = *v16;
        v18 = (unint64_t)*v16 >> 17;
      }
      else
      {
        v18 = v15 >> 17;
      }
      v120 = (int32x2_t *)this;
      v121 = 0;
      LODWORD(v121) = *((_DWORD *)this + 62);
      v122 = a2;
      v123 = a2;
      v124 = (uint64_t)&v124;
      v125 = &v124;
      HIDWORD(v121) = v18 & 1;
      bounds = *((_QWORD *)this + 1);
      memset(v119, 0, sizeof(v119));
      v117 = (const CA::Shape **)((char *)this + 8);
      if (bounds)
      {
        v137 = 0uLL;
        CA::Shape::get_interior_bounds(bounds, (CA::Bounds *)&v137);
        *(_OWORD *)&v119[120] = v137;
        bounds = CA::Shape::get_bounds(*((_QWORD *)this + 1), (int *)&v137);
        v21.i32[1] = HIDWORD(v137);
        v22.i64[0] = (int)v137;
        v22.i64[1] = SDWORD1(v137);
        v23 = v22;
        v24 = HIDWORD(v137);
        v22.i64[0] = SDWORD2(v137);
        v22.i64[1] = SHIDWORD(v137);
        v25 = v22;
        if (SDWORD2(v137) > SHIDWORD(v137))
          v24 = DWORD2(v137);
        v21.i32[0] = v24;
        v20.i32[0] = 1073741822;
        v26 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v21, v20), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v23));
        v27 = (int8x16_t)vcvtq_f64_s64(v25);
        v28 = vdup_n_s32(v24 > 1073741822);
        v29.i64[0] = v28.u32[0];
        v29.i64[1] = v28.u32[1];
        *(int8x16_t *)&v119[88] = v26;
        *(int8x16_t *)&v119[104] = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v29, 0x3FuLL)), (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL), v27);
        if ((*v16 & 4) == 0)
        {
          v30 = (CA::Shape *)*((_QWORD *)a2 + 71);
          if (!v30)
          {
            v126 = 8;
            goto LABEL_34;
          }
          bounds = CA::Shape::equal(*((CA::Shape **)a2 + 71), *v117);
          if ((bounds & 1) == 0)
          {
            v126 = 8;
            CA::Shape::unref(v30);
LABEL_34:
            bounds = CA::Shape::ref((unint64_t)*v117, v11);
LABEL_37:
            *((_QWORD *)a2 + 71) = bounds;
          }
        }
      }
      else
      {
        v31 = *((_QWORD *)this + 25);
        *(_OWORD *)&v119[120] = *((_OWORD *)this + 12);
        if (*(int *)&v119[128] <= *(int *)&v119[132])
          v31 = *(_DWORD *)&v119[132];
        v12.i32[0] = 1073741822;
        v13.i32[0] = v31;
        v32.i64[0] = *(int *)&v119[120];
        v32.i64[1] = *(int *)&v119[124];
        v33 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v13, v12), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v32));
        v32.i64[0] = *(int *)&v119[128];
        v32.i64[1] = *(int *)&v119[132];
        v34 = (int8x16_t)vcvtq_f64_s64(v32);
        v35 = vdup_n_s32(v31 > 1073741822);
        v32.i64[0] = v35.u32[0];
        v32.i64[1] = v35.u32[1];
        *(int8x16_t *)&v119[88] = v33;
        *(int8x16_t *)&v119[104] = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL), v34);
        if ((v15 & 4) == 0)
        {
          v36 = (CA::Shape *)*((_QWORD *)a2 + 71);
          if (v36)
          {
            bounds = CA::Shape::equal(*((_QWORD *)a2 + 71), (CA::Render::Update *)((char *)this + 192));
            if ((bounds & 1) != 0)
              goto LABEL_38;
            v126 = 8;
            CA::Shape::unref(v36);
          }
          else
          {
            v126 = 8;
          }
          bounds = CA::Shape::new_shape((CA::Render::Update *)((char *)this + 192), v11);
          goto LABEL_37;
        }
      }
LABEL_38:
      if (!v118 || BYTE4(v121) && (*(_BYTE *)(v118 + 98) & 2) != 0)
        v126 = 8;
      v116 = *((_DWORD *)this + 128);
      v137 = 0uLL;
      v37 = *((_QWORD *)a2 + 70);
      v138 = *((_QWORD *)this + 9);
      v139 = v37;
      v141 = 0;
      v142 = 0;
      v140 = 0x7FF0000000000000;
      v144 = 0u;
      memset(v145, 0, sizeof(v145));
      __asm { FMOV            V0.2D, #1.0 }
      v115 = _Q0;
      v146 = _Q0;
      v143 = 1065353216;
      v147 = 0;
      v43 = *v16;
      v44 = *((_QWORD *)a3 + 5) & 0xCLL;
      v148 = 0;
      v149 = (v43 >> 2) & 1;
      v45 = *((unsigned __int16 *)this + 534);
      v46 = v150 & 0xF800 | ((v44 == 8) << 8) | 0x208;
      v150 = v46;
      v47 = v118;
      if (!v118)
      {
        v150 = v46 & 0xF308;
        v48 = (unsigned int *)CA::Render::LayerNodeAllocator::alloc_node((CA::Render::LayerNodeAllocator *)bounds);
        v57 = *((_QWORD *)v48 + 3);
        goto LABEL_58;
      }
      v150 = (*(_QWORD *)(v118 + 96) >> 49) & 0x800 | v46 & 0xF308;
      v48 = *(unsigned int **)(v118 + 40);
      if (v48)
      {
        if ((((v43 | (unint64_t)(v45 << 32)) >> 27) & 1) == (*(_BYTE *)(v118 + 13) & 2) >> 1)
        {
LABEL_50:
          if (*((_QWORD *)v48 + 11))
          {
            v53 = *(_QWORD *)v48;
            v52 = (_QWORD *)*((_QWORD *)v48 + 1);
            *(_QWORD *)(v53 + 8) = v52;
            *v52 = v53;
            *(_QWORD *)v48 = v48;
            *((_QWORD *)v48 + 1) = v48;
            v54 = v48 + 4;
            do
            {
              v55 = __ldaxr(v54);
              v56 = v55 - 1;
            }
            while (__stlxr(v56, v54));
            if (!v56)
              CA::Render::LayerNode::delete_node((CA::Render::LayerNode *)v48, v11);
            *((_QWORD *)v48 + 11) = 0;
          }
          v57 = *((_QWORD *)v48 + 3) | 0x40;
          *((_QWORD *)v48 + 3) = v57;
LABEL_58:
          *((_QWORD *)v48 + 3) = *((_QWORD *)a2 + 3) | v57 & 0xFFFFFFFFFFFFFC7FLL;
          if (a4)
            CA::Render::LayerNode::set_frame_transform((CA::Render::LayerNode *)v48, a4);
          if (BYTE9(xmmword_1ECDC6A90))
          {
            v107 = (unsigned int *)((char *)a2 + 228);
            if (!atomic_load((unsigned int *)a2 + 57))
            {
              if (*((_DWORD *)a2 + 63))
                v109 = 0;
              else
                v109 = getpid();
              while (!__ldaxr(v107))
              {
                if (!__stlxr(v109, v107))
                  goto LABEL_176;
              }
              __clrex();
            }
LABEL_176:
            kdebug_trace();
          }
          CA::Render::Updater::prepare_layer0(&v120, (CA::Render::LayerNode *)v48, a3, (uint64_t)&v137, v126);
          if (BYTE9(xmmword_1ECDC6A90))
          {
            v110 = (unsigned int *)((char *)a2 + 228);
            if (!atomic_load((unsigned int *)a2 + 57))
            {
              if (*((_DWORD *)a2 + 63))
                v112 = 0;
              else
                v112 = getpid();
              while (!__ldaxr(v110))
              {
                if (!__stlxr(v112, v110))
                  goto LABEL_182;
              }
              __clrex();
            }
LABEL_182:
            kdebug_trace();
          }
          if (!v118 && !*((_QWORD *)v48 + 4))
          {
            v83 = v48 + 4;
            do
              v84 = __ldaxr(v83);
            while (__stlxr(v84 - 1, v83));
            if (v84 == 1)
              CA::Render::LayerNode::delete_node((CA::Render::LayerNode *)v48, v58);
            goto LABEL_160;
          }
          v60 = *((_QWORD *)this + 43);
          if (v60)
            (*(void (**)(uint64_t, CA::Render::Context *))(*(_QWORD *)v60 + 40))(v60, a2);
          v61 = *(double *)&v140;
          v62 = v141;
          *((_QWORD *)this + 12) |= v142;
          v63 = *((double *)this + 10);
          if (v63 >= v61)
          {
            if (v61 == 0.0 || v63 <= v61)
              v62 |= *((_QWORD *)this + 11);
            *((_QWORD *)this + 11) = v62;
            *((double *)this + 10) = v61;
          }
          if ((*v16 & 8) == 0)
          {
            memset(v127, 0, sizeof(v127));
            v128 = v115;
            v129 &= 0xF0u;
            v130 = 0;
            v131 = 0;
            v135 = -1;
            v133 = 0;
            v134 = 0;
            v132 = v126;
            v136 &= 0x40u;
            CA::Render::Updater::prepare_layer(&v120, (const CA::Render::Layer *)v127, (uint64_t)v48, (__n128 *)v119, &v126);
          }
          v65 = (CA::Shape **)&v124;
          if (v125 != &v124)
            CA::Render::Updater::prepare_transform_layers((uint64_t)&v120, (CA::Render::LayerNode *)&v124);
          if (v118)
          {
            v66 = *(_DWORD *)(v118 + 120);
            if (v66 >= *(_DWORD *)(v118 + 124))
              v66 = *(_DWORD *)(v118 + 124);
            if (v66 <= 0
              && (*v16 & 8) == 0
              && (*((_BYTE *)this + 271) & 0x10) == 0
              && (*((_BYTE *)v48 + 26) & 0x40) == 0)
            {
LABEL_141:
              if ((*v16 & 4) == 0)
              {
                *((_QWORD *)a2 + 70) = *((_QWORD *)this + 9);
                v91 = (CA::Shape **)*((_QWORD *)a2 + 72);
                v92 = (CA::Shape **)((char *)this + 16);
                if (v91)
                  CA::shape_union(v92, v91, v59);
                else
                  CA::shape_union(v92, (CA::Shape **)a2 + 73, v59);
                if ((*v16 & 0x400000) != 0)
                {
                  v95 = (CA::Shape *)*((_QWORD *)v48 + 28);
                  if (v95)
                  {
                    v127[0] = (CA::Shape **)CA::Shape::subtract(v95, *((const CA::Shape **)this + 5), (uint64_t)v93, v94);
                    CA::shape_intersect((CA::Shape **)v127, (CA::Shape **)this + 24, v96);
                    v97 = (CA::Shape *)v127[0];
                    CA::shape_union((CA::Shape **)this + 4, v127[0], v98);
                    CA::Shape::unref(v97);
                  }
                  v65 = (CA::Shape **)*((_QWORD *)v48 + 29);
                  if (v65)
                    CA::shape_union((CA::Shape **)this + 5, v65, v93);
                }
                v99 = (CA::Shape *)*((_QWORD *)a2 + 72);
                if (v99)
                  CA::Shape::unref(v99);
                *((_QWORD *)a2 + 72) = 1;
              }
              if (!v118)
              {
                v100 = v48 + 4;
                do
                {
                  v101 = __ldaxr(v100);
                  v102 = v101 - 1;
                }
                while (__stlxr(v102, v100));
                if (!v102)
                  CA::Render::LayerNode::delete_node((CA::Render::LayerNode *)v48, (CA::Render::LayerNode *)v65);
              }
              if (BYTE4(v121))
                *v16 |= 0x20000u;
LABEL_160:
              v103 = *(_QWORD *)&v145[3];
              if (*(_QWORD *)&v145[3])
              {
                v104 = (unsigned int *)(*(_QWORD *)&v145[3] + 8);
                do
                {
                  v105 = __ldaxr(v104);
                  v106 = v105 - 1;
                }
                while (__stlxr(v106, v104));
                if (!v106)
                  (*(void (**)(uint64_t))(*(_QWORD *)v103 + 16))(v103);
              }
              goto LABEL_13;
            }
          }
          v67 = *((_QWORD *)this + 27);
          *((_QWORD *)v48 + 1) = (char *)this + 216;
          *((_QWORD *)this + 27) = v48;
          *(_QWORD *)v48 = v67;
          *(_QWORD *)(v67 + 8) = v48;
          v68 = v48 + 4;
          do
            v69 = __ldaxr(v68);
          while (__stlxr(v69 + 1, v68));
          v70 = (uint64_t *)((char *)this + 208);
          v71 = x_heap_malloc_small_(*(uint64_t **)this, 0x10uLL);
          *(_DWORD *)(v71 + 8) = *((_DWORD *)a2 + 4);
          *(_QWORD *)v71 = 0;
          do
          {
            v74 = v70;
            v70 = (uint64_t *)*v70;
          }
          while (v70);
          *v74 = v71;
          v75 = HIDWORD(v144);
          v76 = *(_QWORD *)((_BYTE *)&v144 + 12) & 0x28000;
          if ((*(_QWORD *)((_BYTE *)&v144 + 12) & 0x28000) != 0)
            *((_DWORD *)this + 67) |= 2u;
          if ((v75 & 0x40000) != 0)
            *((_DWORD *)this + 67) |= 4u;
          v77 = v126;
          if ((v126 & 0x1000000) != 0)
            *((_DWORD *)this + 67) |= 0x20u;
          if ((v77 & 0x400000) != 0 || v76 && (*v16 & 0x40000) == 0)
            *((_DWORD *)this + 67) |= 8u;
          if ((v77 & 0x800000) != 0)
          {
            *((_DWORD *)this + 67) |= 0x10u;
            v78 = *v16;
            v79 = v78 & 0xFFFFFFFFFFFBFFFFLL | ((unint64_t)*((unsigned __int16 *)this + 534) << 32);
            *v16 = v78 & 0xFFFBFFFF;
            *((_WORD *)this + 534) = WORD2(v79);
          }
          if ((v77 & 0xC0000000) != 0)
            *((_DWORD *)this + 67) |= 0x1000u;
          if ((v77 & 0x600000000) != 0)
            *((_DWORD *)this + 67) |= 0x2000u;
          if ((v77 & 0x7800000000) != 0)
            *((_DWORD *)this + 67) |= 0x8000u;
          if ((v77 & 0x1800000000) != 0)
            *((_DWORD *)this + 67) |= 0x10000u;
          if ((v77 & 0x4000000000000) != 0)
            *((_DWORD *)this + 67) |= 0x20000u;
          if ((v77 & 0x18000000000) != 0)
            *((_DWORD *)this + 67) |= 0x80000u;
          v80 = v77 & 0x3800000000000;
          if (v80)
          {
            *((_DWORD *)this + 67) |= 0x4000u;
            *((_QWORD *)this + 36) |= v80 >> 47;
          }
          v81 = (const CA::Bounds *)*((_QWORD *)v48 + 26);
          if (v81)
          {
            if ((v81 & 1) != 0)
            {
              if (v81 == (const CA::Bounds *)1)
                goto LABEL_136;
            }
            else if (*((_DWORD *)v81 + 1) == 6)
            {
              goto LABEL_136;
            }
            if ((*v16 & 8) == 0)
            {
              if (!*v117)
              {
                if ((*v16 & 4) != 0)
                  v82 = CA::Shape::new_shape((CA::Shape *)&v119[120], v81);
                else
                  v82 = CA::Shape::ref(*((_QWORD *)a2 + 71), v81);
                *v117 = (const CA::Shape *)v82;
                v81 = (const CA::Bounds *)*((_QWORD *)v48 + 26);
              }
              CA::shape_subtract(v117, (CA::Shape **)v81, v72, v73);
              for (i = (uint64_t *)*((_QWORD *)this + 63); i; i = (uint64_t *)*i)
              {
                v87 = *((_DWORD *)i + 24);
                if ((v87 & 0x40000000) == 0 && (v87 & 0xFFFFFFFu) > v116)
                  CA::shape_union(v117, (CA::Shape **)(*(_QWORD *)(i[1] + 256) + 48), v85);
              }
            }
          }
LABEL_136:
          v88 = (__int32 *)*((_QWORD *)this + 116);
          v89 = wmemchr(*((__int32 **)this + 115), *((_DWORD *)a2 + 66), ((uint64_t)v88 - *((_QWORD *)this + 115)) >> 2);
          if (v89)
            v90 = v89;
          else
            v90 = v88;
          if (v90 == *((__int32 **)this + 116))
          {
            LODWORD(v127[0]) = *((_DWORD *)a2 + 66);
            X::small_vector_base<unsigned int>::push_back((uint64_t)this + 920, v127);
          }
          goto LABEL_141;
        }
        *((_QWORD *)v48 + 5) = 0;
        v49 = v48 + 4;
        do
        {
          v50 = __ldaxr(v49);
          v51 = v50 - 1;
        }
        while (__stlxr(v51, v49));
        v47 = v118;
        if (!v51)
          CA::Render::LayerNode::delete_node((CA::Render::LayerNode *)v48, v11);
      }
      v48 = (unsigned int *)CA::Render::LayerNodeAllocator::alloc_node((CA::Render::LayerNodeAllocator *)bounds);
      *((_QWORD *)v48 + 5) = v47;
      *(_QWORD *)(v47 + 40) = v48;
      *(_DWORD *)(v47 + 12) = *(_DWORD *)(v47 + 12) & 0xFFFFFDFF | (((*v16 >> 27) & 1) << 9);
      *(_QWORD *)(v47 + 96) |= 4uLL;
      goto LABEL_50;
    }
  }
LABEL_13:
  if (v9)
    kdebug_trace();
  objc_autoreleasePoolPop(v8);
}

uint64_t CA::Render::Update::allowed_to_include_context(CA::Render::Update *this, CA::Render::Context *a2)
{
  uint64_t v4;
  uint64_t result;
  int v6;
  unsigned int *v7;
  unsigned int v8;
  pid_t v9;
  int v10;

  if (!a2)
    return 0;
  v4 = *((_QWORD *)this + 43);
  if (!v4
    || (result = (*(uint64_t (**)(uint64_t, CA::Render::Context *))(*(_QWORD *)v4 + 32))(v4, a2),
        (_DWORD)result))
  {
    v6 = *((_DWORD *)this + 79);
    if (v6)
    {
      v7 = (unsigned int *)((char *)a2 + 228);
      v8 = atomic_load((unsigned int *)a2 + 57);
      if (!v8)
      {
        if (*((_DWORD *)a2 + 63))
          v9 = 0;
        else
          v9 = getpid();
        while (1)
        {
          v8 = __ldaxr(v7);
          if (v8)
            break;
          if (!__stlxr(v9, v7))
          {
            v10 = 1;
            goto LABEL_15;
          }
        }
        v10 = 0;
        __clrex();
LABEL_15:
        if (v10)
          v8 = v9;
      }
      return v6 == v8;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t CA::Render::Update::allowed_in_secure_update(CA::Render::Update *this, CA::Render::Context *a2, const CA::Render::LayerHost *a3)
{
  __int16 v3;
  uint64_t v7;
  uint64_t result;
  unsigned int *v9;
  pid_t v11;
  NSObject *v12;
  int v13;
  unsigned int *v14;
  unsigned int v15;
  pid_t v16;
  unsigned int v18;
  int v19;
  uint64_t v20;
  unsigned int *v21;
  pid_t v23;
  NSObject *v24;
  int v25;
  _DWORD *v26;
  int v27;
  unsigned int *v28;
  unsigned int v29;
  pid_t v30;
  unsigned int v32;
  int v33;
  _DWORD *v34;
  char *v35;
  int v36;
  uint64_t v37;
  char *v38;
  int v39;
  unsigned int v40;
  int v42;
  NSObject *v43;
  const char *v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  pid_t v48;
  unsigned int v49;
  int v50;
  void **v51;
  const CA::Render::LayerHost *v52;
  uint8_t buf[4];
  _BYTE v54[10];
  __int128 v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v3 = *((_DWORD *)this + 266);
  if ((*((_DWORD *)this + 266) & 0x80) == 0)
    return 1;
  if ((*((_WORD *)a2 + 276) & 4) != 0)
    return 1;
  if (a3)
  {
    v7 = *((_QWORD *)a3 + 10);
    if (v7)
    {
      if ((*(_WORD *)(v7 + 552) & 4) != 0 && (*((_BYTE *)a3 + 13) & 2) != 0)
        return 1;
    }
  }
  result = 0;
  if ((*((_BYTE *)a2 + 14) & 4) == 0 && (v3 & 4) == 0)
  {
    x_log_begin();
    if (x_log_hook_p())
    {
      v9 = (unsigned int *)((char *)a2 + 228);
      if (!atomic_load((unsigned int *)a2 + 57))
      {
        if (*((_DWORD *)a2 + 63))
          v11 = 0;
        else
          v11 = getpid();
        while (!__ldaxr(v9))
        {
          if (!__stlxr(v11, v9))
            goto LABEL_24;
        }
        __clrex();
      }
LABEL_24:
      CA::Render::Context::process_path(a2);
      x_log_();
    }
    else
    {
      v12 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_ERROR))
      {
        v13 = *((_DWORD *)a2 + 4);
        v14 = (unsigned int *)((char *)a2 + 228);
        v15 = atomic_load((unsigned int *)a2 + 57);
        if (!v15)
        {
          if (*((_DWORD *)a2 + 63))
            v16 = 0;
          else
            v16 = getpid();
          do
          {
            v18 = __ldaxr(v14);
            if (v18)
            {
              v19 = 0;
              __clrex();
              goto LABEL_32;
            }
          }
          while (__stlxr(v16, v14));
          v19 = 1;
LABEL_32:
          if (v19)
            v15 = v16;
          else
            v15 = v18;
        }
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)v54 = v13;
        *(_WORD *)&v54[4] = 1024;
        *(_DWORD *)&v54[6] = v15;
        LOWORD(v55) = 2080;
        *(_QWORD *)((char *)&v55 + 2) = CA::Render::Context::process_path(a2) + 7;
        _os_log_impl(&dword_184457000, v12, OS_LOG_TYPE_ERROR, "CoreAnimation: insecure context %x - pid %u [%s].\n", buf, 0x18u);
        if (!a3)
        {
LABEL_60:
          v52 = a3;
          v51 = (void **)x_stream_pop_(0);
          v35 = x_stream_get(v51);
          v36 = 0;
LABEL_61:
          v37 = 0;
          v38 = &v35[v36];
          v39 = -1;
          while (1)
          {
            if (v38[v37] == 10)
            {
              v39 = v37;
            }
            else if (!v38[v37])
            {
              v40 = v37;
LABEL_67:
              if (v39 <= -1 || v38[v40] == 0)
                v42 = v40;
              else
                v42 = v39 + 1;
              if (v42 > 0)
              {
                if (x_log_hook_p())
                {
                  x_log_();
                }
                else
                {
                  v43 = x_log_category_render;
                  if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 136315650;
                    if (v36)
                      v44 = "continued...\n";
                    else
                      v44 = "";
                    *(_QWORD *)v54 = v44;
                    *(_WORD *)&v54[8] = 1040;
                    LODWORD(v55) = v42;
                    WORD2(v55) = 2080;
                    *(_QWORD *)((char *)&v55 + 6) = &v35[v36];
                    _os_log_impl(&dword_184457000, v43, OS_LOG_TYPE_ERROR, "%s%.*s", buf, 0x1Cu);
                  }
                }
                v36 += v42;
                goto LABEL_61;
              }
              x_log_end_free_(v51);
              if (v52)
              {
                v45 = *((_QWORD *)v52 + 10);
                if (v45)
                {
                  v46 = (unsigned int *)(v45 + 228);
                  v47 = atomic_load((unsigned int *)(v45 + 228));
                  if (!v47)
                  {
                    if (*(_DWORD *)(v45 + 252))
                      v48 = 0;
                    else
                      v48 = getpid();
                    while (1)
                    {
                      v49 = __ldaxr(v46);
                      if (v49)
                        break;
                      if (!__stlxr(v48, v46))
                      {
                        v50 = 1;
                        goto LABEL_92;
                      }
                    }
                    v50 = 0;
                    __clrex();
LABEL_92:
                    if (v50)
                      v47 = v48;
                    else
                      v47 = v49;
                  }
                  *((_DWORD *)a2 + 75) = v47;
                  *((_DWORD *)a2 + 76) = *(_DWORD *)(*((_QWORD *)v52 + 10) + 16);
                }
              }
              result = 0;
              *((_DWORD *)a2 + 3) |= 0x40000u;
              *((_DWORD *)this + 67) |= 0x200u;
              return result;
            }
            ++v37;
            v40 = 32512;
            if (v37 == 32512)
              goto LABEL_67;
          }
        }
LABEL_36:
        if (*((_QWORD *)a3 + 10))
        {
          if (x_log_hook_p())
          {
            v20 = *((_QWORD *)a3 + 10);
            v21 = (unsigned int *)(v20 + 228);
            if (!atomic_load((unsigned int *)(v20 + 228)))
            {
              if (*(_DWORD *)(v20 + 252))
                v23 = 0;
              else
                v23 = getpid();
              while (!__ldaxr(v21))
              {
                if (!__stlxr(v23, v21))
                  goto LABEL_50;
              }
              __clrex();
            }
LABEL_50:
            CA::Render::Context::process_path(*((CA::Render::Context **)a3 + 10));
            x_log_();
          }
          else
          {
            v24 = x_log_category_render;
            if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_ERROR))
            {
              v25 = *((_DWORD *)a2 + 4);
              v26 = (_DWORD *)*((_QWORD *)a3 + 10);
              v27 = v26[4];
              v28 = v26 + 57;
              v29 = atomic_load(v26 + 57);
              if (!v29)
              {
                if (v26[63])
                  v30 = 0;
                else
                  v30 = getpid();
                do
                {
                  v32 = __ldaxr(v28);
                  if (v32)
                  {
                    v33 = 0;
                    __clrex();
                    goto LABEL_56;
                  }
                }
                while (__stlxr(v30, v28));
                v33 = 1;
LABEL_56:
                if (v33)
                  v29 = v30;
                else
                  v29 = v32;
              }
              v34 = CA::Render::Context::process_path(*((CA::Render::Context **)a3 + 10));
              *(_DWORD *)buf = 67109890;
              *(_DWORD *)v54 = v25;
              *(_WORD *)&v54[4] = 1024;
              *(_DWORD *)&v54[6] = v27;
              LOWORD(v55) = 1024;
              *(_DWORD *)((char *)&v55 + 2) = v29;
              WORD3(v55) = 2080;
              *((_QWORD *)&v55 + 1) = v34 + 7;
              _os_log_impl(&dword_184457000, v24, OS_LOG_TYPE_ERROR, "Cannot host %x in context %x - pid %u [%s].\n", buf, 0x1Eu);
            }
          }
        }
        goto LABEL_60;
      }
    }
    if (!a3)
      goto LABEL_60;
    goto LABEL_36;
  }
  return result;
}

BOOL CA::Shape::equal(uint64_t this, const CA::Bounds *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  int v7;

  if ((this & 1) != 0)
  {
    if (this == 1)
      goto LABEL_7;
    v3 = this >> 48;
    v4 = this << 16 >> 48;
    v5 = this >> 17;
    v6 = (this >> 2) & 0x7FFF;
  }
  else
  {
    v2 = *(_DWORD *)(this + 4);
    if (v2 != 12)
    {
      if (v2 != 6)
        return 0;
LABEL_7:
      v7 = *((_DWORD *)a2 + 2);
      if (v7 >= *((_DWORD *)a2 + 3))
        v7 = *((_DWORD *)a2 + 3);
      return v7 < 1;
    }
    LODWORD(v4) = *(_DWORD *)(this + 20);
    LODWORD(v3) = *(_DWORD *)(this + 28);
    v5 = *(_DWORD *)(this + 32) - v3;
    v6 = *(_DWORD *)(this + 36) - v4;
  }
  if (*(_DWORD *)a2 != (_DWORD)v3 || *((_DWORD *)a2 + 1) != (_DWORD)v4 || *((_DWORD *)a2 + 2) != v5)
    return 0;
  return *((_DWORD *)a2 + 3) == v6;
}

unint64_t CA::Shape::get_interior_bounds(unint64_t this, CA::Bounds *a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  _DWORD *v12;
  int v13;
  int v14;

  if ((this & 1) != 0)
  {
    *(_DWORD *)a2 = (uint64_t)this >> 48;
    *((_DWORD *)a2 + 1) = (int)(this >> 16) >> 16;
    *((_DWORD *)a2 + 2) = this >> 17;
    *((_DWORD *)a2 + 3) = (this >> 2) & 0x7FFF;
  }
  else
  {
    v2 = *(_DWORD *)(this + 4);
    if (v2 == 12)
    {
      *(_DWORD *)a2 = *(_DWORD *)(this + 28);
      *((_DWORD *)a2 + 1) = *(_DWORD *)(this + 20);
      *((_DWORD *)a2 + 2) = *(_DWORD *)(this + 32) - *(_DWORD *)(this + 28);
      *((_DWORD *)a2 + 3) = *(_DWORD *)(this + 36) - *(_DWORD *)(this + 20);
    }
    else if (v2 == 6)
    {
      *(_QWORD *)a2 = 0;
      *((_QWORD *)a2 + 1) = 0;
    }
    else
    {
      v4 = *(_DWORD *)(this + 12);
      this += 12;
      v3 = v4;
      if (v4 != 0x7FFFFFFF)
      {
        v5 = -1;
        do
        {
          v6 = this;
          v7 = *(int *)(this + 4);
          this += 4 * v7;
          v8 = v7 - 2;
          v9 = *(_DWORD *)this;
          if (v8 >= 2)
          {
            v10 = v8 >> 1;
            v11 = v9 - v3;
            v12 = (_DWORD *)(v6 + 12);
            do
            {
              v13 = *(v12 - 1);
              v14 = *v12 - v13;
              if (v5 < v14 * v11)
              {
                v5 = v14 * v11;
                *(_DWORD *)a2 = v13;
                *((_DWORD *)a2 + 1) = v3;
                *((_DWORD *)a2 + 2) = v14;
                *((_DWORD *)a2 + 3) = v11;
              }
              v12 += 2;
              --v10;
            }
            while (v10);
            v9 = *(_DWORD *)this;
          }
          v3 = v9;
        }
        while (v9 != 0x7FFFFFFF);
      }
    }
  }
  return this;
}

void CA::Render::Update::set_display_attributes(uint64_t a1, float *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  float v10;
  float v11;
  float v12;
  unsigned int v13;

  v4 = *(_OWORD *)a2;
  v5 = *((_OWORD *)a2 + 1);
  v6 = *((_OWORD *)a2 + 3);
  *(_OWORD *)(a1 + 384) = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 400) = v6;
  *(_OWORD *)(a1 + 352) = v4;
  *(_OWORD *)(a1 + 368) = v5;
  v7 = *((_OWORD *)a2 + 4);
  v8 = *((_OWORD *)a2 + 5);
  v9 = *((_OWORD *)a2 + 7);
  *(_OWORD *)(a1 + 448) = *((_OWORD *)a2 + 6);
  *(_OWORD *)(a1 + 464) = v9;
  *(_OWORD *)(a1 + 416) = v7;
  *(_OWORD *)(a1 + 432) = v8;
  if (initialized[0] != -1)
    dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
  if (*(float *)&dword_1ECDC6990 != 0.0)
    *(_DWORD *)(a1 + 364) = dword_1ECDC6990;
  if (*(float *)&dword_1ECDC6994 != 0.0)
    *(_DWORD *)(a1 + 368) = dword_1ECDC6994;
  if (*(float *)&dword_1ECDC6970 != 0.0)
    *(_DWORD *)(a1 + 372) = dword_1ECDC6970;
  v10 = *(float *)&dword_1ECDC69B0;
  if (*(float *)&dword_1ECDC69B0 != 0.0)
  {
    v11 = *(float *)(a1 + 364);
    v12 = a2[5];
    if (*(float *)&dword_1ECDC69B0 >= v12)
      v10 = a2[5];
    *(float *)(a1 + 372) = v10;
    *(float *)(a1 + 364) = (float)(v10 * v11) / v12;
  }
  v13 = *(float *)&dword_1ECDC6998;
  if (*(float *)&dword_1ECDC6998)
    *(_DWORD *)(a1 + 412) = v13;
  else
    v13 = *(_DWORD *)(a1 + 412);
  if (v13 != 5)
  {
    if (v13 == 6)
    {
      if (!*(_BYTE *)(a1 + 406))
        return;
    }
    else if (v13 - 2 > 2)
    {
      return;
    }
  }
  *(_BYTE *)(a1 + 404) = 1;
}

char *CA::Render::Update::build_hit_test_tree(CA::Render::Update *this, const CA::Render::LayerNode *a2, CA::Render::LayerNode *a3, double a4)
{
  malloc_zone_t *malloc_zone;
  char *v8;
  char *v9;
  uint64_t v10;
  _OWORD *v11;
  _DWORD *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  const CA::Render::LayerNode *v18;
  const CA::Render::LayerNode *v19;
  char *v20;
  uint64_t v21;
  unsigned int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  kdebug_trace();
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  v8 = (char *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x40uLL, 0x743898A5uLL);
  v9 = v8;
  if (v8)
  {
    *(_DWORD *)v8 = 0;
    *(_OWORD *)(v8 + 24) = 0u;
    *(_OWORD *)(v8 + 40) = 0u;
    *((_DWORD *)v8 + 14) = 1065353216;
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::HitTestTree::storage_cache_lock);
    v10 = 0;
    while (1)
    {
      v11 = (_OWORD *)CA::Render::HitTestTree::storage_cache[v10];
      if (v11)
        break;
      if (++v10 == 2)
      {
        os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::HitTestTree::storage_cache_lock);
        v11 = malloc_type_malloc(4 * *MEMORY[0x1E0C85AD8], 0xCC573B50uLL);
        goto LABEL_8;
      }
    }
    CA::Render::HitTestTree::storage_cache[v10] = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::HitTestTree::storage_cache_lock);
LABEL_8:
    v12 = (_DWORD *)MEMORY[0x1E0C85AD8];
    *(_DWORD *)v9 = 1;
    v13 = 4 * *v12;
    *((_DWORD *)v9 + 1) = 0;
    *((_DWORD *)v9 + 2) = v13;
    *((_QWORD *)v9 + 2) = v11;
  }
  else
  {
    v11 = (_OWORD *)MEMORY[0x10];
  }
  v14 = 0;
  v11[11] = 0u;
  v11[12] = 0u;
  v11[9] = 0u;
  v11[10] = 0u;
  v11[7] = 0u;
  v11[8] = 0u;
  v11[5] = 0u;
  v11[6] = 0u;
  v11[3] = 0u;
  v11[4] = 0u;
  v11[1] = 0u;
  v11[2] = 0u;
  *v11 = 0u;
  *((_DWORD *)v9 + 1) += 208;
  v23 = 0;
  if (byte_1ECDC6AAF)
  {
    v14 = 2;
    if (a2)
    {
LABEL_11:
      v15 = *((_QWORD *)a2 + 5);
      if (v15 && (v16 = *(_QWORD *)(v15 + 24)) != 0)
        v17 = *(_DWORD *)(v16 + 16);
      else
        v17 = 0;
      CA::Render::HitTestTree::append_root_node((CA::Render::HitTestTree *)v9, a2, v17, v14, &v23);
      goto LABEL_20;
    }
  }
  else if (a2)
  {
    goto LABEL_11;
  }
  v18 = (CA::Render::Update *)((char *)this + 216);
  v19 = (const CA::Render::LayerNode *)*((_QWORD *)this + 28);
  if (v19 != (CA::Render::Update *)((char *)this + 216))
  {
    v20 = (char *)this + 208;
    do
    {
      v20 = *(char **)v20;
      CA::Render::HitTestTree::append_root_node((CA::Render::HitTestTree *)v9, v19, *((_DWORD *)v20 + 2), v14, &v23);
      v19 = (const CA::Render::LayerNode *)*((_QWORD *)v19 + 1);
    }
    while (v19 != v18);
  }
LABEL_20:
  v21 = *((_QWORD *)v9 + 2);
  *(_QWORD *)(v21 + 8) = *(_QWORD *)(v21 + 8) & 0xFFFFFF0000000000 | v23 | 0x800D0FF000000;
  *(_OWORD *)(v21 + 80) = xmmword_18474DF40;
  *(_OWORD *)(v21 + 96) = 0u;
  *(_OWORD *)(v21 + 112) = xmmword_18474DF50;
  *(_OWORD *)(v21 + 128) = 0u;
  *(_OWORD *)(v21 + 144) = 0u;
  *(_OWORD *)(v21 + 160) = xmmword_18474DF40;
  *(_OWORD *)(v21 + 176) = 0u;
  *(_OWORD *)(v21 + 192) = xmmword_18474DF50;
  *(double *)(v21 + 80) = a4;
  *(double *)(v21 + 120) = a4;
  *(_QWORD *)(v21 + 160) = 0x3FF0000000000000;
  kdebug_trace();
  return v9;
}

CA::Render::Update *CA::Render::Update::Update(CA::Render::Update *this, const CA::Bounds *a2, unint64_t a3, double a4, const CVTimeStamp *a5, unsigned int a6, int a7, int a8, const CA::Bounds *a9, unsigned int a10)
{
  CA::Shape *v13;
  unsigned int *v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unsigned int v21;
  unint64_t v22;
  _OWORD v24[2];
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_QWORD *)this + 19) = 0;
  *((_OWORD *)this + 12) = *(_OWORD *)a9;
  v13 = (CA::Render::Update *)((char *)this + 192);
  v14 = (unsigned int *)((char *)this + 1064);
  *((double *)this + 9) = a4;
  *((_QWORD *)this + 10) = 0x7FF0000000000000;
  *((double *)this + 13) = a4;
  *((_QWORD *)this + 14) = 0x3F91111111111111;
  *((_QWORD *)this + 20) = a5;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = -1;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 26) = 0;
  if (!a6)
  {
    do
    {
      v15 = __ldaxr(CA::Render::Update::_update_counter);
      a6 = v15 + 1;
    }
    while (__stlxr(v15 + 1, CA::Render::Update::_update_counter));
  }
  *((_DWORD *)this + 62) = a6;
  *((_DWORD *)this + 63) = a7;
  *((_DWORD *)this + 64) = a8;
  *((_DWORD *)this + 65) = CA::Render::LayerHost::_seed;
  *((_QWORD *)this + 33) = 0;
  *((_DWORD *)this + 68) = a10;
  *((_QWORD *)this + 35) = 0;
  *((_OWORD *)this + 18) = 0uLL;
  *((_QWORD *)this + 38) = -1;
  *((_DWORD *)this + 90) = 0;
  *(_OWORD *)((char *)this + 312) = 0uLL;
  *(_OWORD *)((char *)this + 328) = 0uLL;
  *(_OWORD *)((char *)this + 344) = 0uLL;
  *(_OWORD *)((char *)this + 364) = xmmword_18474E010;
  *((_DWORD *)this + 95) = 1065353216;
  *((_OWORD *)this + 24) = xmmword_18474E020;
  *((_WORD *)this + 204) = 0;
  *((_QWORD *)this + 50) = 0;
  *(_QWORD *)((char *)this + 412) = 0x100000001;
  *(_OWORD *)((char *)this + 420) = 0uLL;
  *(_OWORD *)((char *)this + 436) = 0uLL;
  *((_BYTE *)this + 452) = 0;
  *((_DWORD *)this + 114) = 1065353216;
  *(_OWORD *)((char *)this + 460) = 0uLL;
  *((_DWORD *)this + 119) = -1;
  *((_QWORD *)this + 63) = 0;
  *((_DWORD *)this + 128) = 0;
  *(_OWORD *)((char *)this + 484) = 0uLL;
  *((_QWORD *)this + 65) = 1;
  *((_QWORD *)this + 66) = 1;
  *(_OWORD *)((char *)this + 536) = 0uLL;
  *((_QWORD *)this + 69) = (char *)this + 584;
  *((_QWORD *)this + 70) = (char *)this + 584;
  *((_QWORD *)this + 71) = (char *)this + 584;
  *((_OWORD *)this + 36) = 0uLL;
  *((_OWORD *)this + 37) = 0uLL;
  *((_OWORD *)this + 46) = 0uLL;
  *((_OWORD *)this + 47) = 0uLL;
  *((_QWORD *)this + 106) = 0;
  *((_QWORD *)this + 105) = 0;
  *((_OWORD *)this + 48) = xmmword_18474E370;
  *((_OWORD *)this + 49) = 0uLL;
  *((_OWORD *)this + 50) = 0uLL;
  *((_OWORD *)this + 51) = 0uLL;
  *((_QWORD *)this + 104) = (char *)this + 840;
  *((_QWORD *)this + 109) = 0;
  *((_QWORD *)this + 108) = 0;
  *((_QWORD *)this + 107) = (char *)this + 864;
  *((_QWORD *)this + 114) = 0;
  *((_OWORD *)this + 55) = 0uLL;
  *((_OWORD *)this + 56) = 0uLL;
  *((_QWORD *)this + 115) = (char *)this + 952;
  *((_QWORD *)this + 116) = (char *)this + 952;
  *((_QWORD *)this + 117) = (char *)this + 952;
  *((_QWORD *)this + 118) = 16;
  *((_QWORD *)this + 131) = 0;
  *(_OWORD *)((char *)this + 1016) = 0uLL;
  *(_OWORD *)((char *)this + 1032) = 0uLL;
  v16 = *((unsigned int *)this + 266) & 0xFFFFF80000000020 | ((unint64_t)*((unsigned __int16 *)this + 534) << 32) & 0xFFFFF8000000003FLL;
  *((_QWORD *)this + 132) = 0x3F8000007F800000;
  v17 = v16 | (a10 >> 4) & 0x100000 ^ 0x140000;
  *((_WORD *)this + 534) = WORD2(v16);
  *v14 = v17;
  if (BYTE12(xmmword_1ECDC6AD0))
  {
    v18 = 0;
  }
  else
  {
    if (CA::CAPSEProcessor::needs_processing(this))
      v18 = 0x80000000000;
    else
      v18 = 0;
    v17 = *v14 | ((unint64_t)*((unsigned __int16 *)v14 + 2) << 32);
  }
  v19 = v17 & 0xC7FFFFFFFFFFLL | v18;
  *v14 = v19;
  *((_WORD *)v14 + 2) = WORD2(v19);
  if (a2 && a3 > 0x1F)
  {
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = (char *)a2 + 32;
    *((_QWORD *)a2 + 2) = a3 - 32;
    *((_QWORD *)a2 + 3) = 0x2000;
    *(_QWORD *)this = a2;
  }
  else
  {
    v20 = x_heap_new(0x2000uLL);
    *(_QWORD *)this = v20;
    if (!v20)
      return this;
  }
  if (initialized[0] != -1)
    dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
  v21 = byte_1ECDC6A8D;
  if (byte_1ECDC6A8D)
    v21 = *(float *)&dword_1ECDC6A08;
  *((_DWORD *)this + 120) = v21;
  *((_QWORD *)this + 27) = (char *)this + 216;
  *((_QWORD *)this + 28) = (char *)this + 216;
  *((_QWORD *)this + 30) = 0;
  if (BYTE11(xmmword_1ECDC6A70) | BYTE12(ca_debug_options))
    v22 = CA::Shape::new_shape(v13, a2);
  else
    v22 = 1;
  *((_QWORD *)this + 2) = v22;
  *((_QWORD *)this + 4) = 1;
  *((_QWORD *)this + 5) = 1;
  *((_QWORD *)this + 6) = 1;
  *((_QWORD *)this + 7) = 1;
  *((_QWORD *)this + 8) = 1;
  *((_DWORD *)this + 103) = 0;
  memset(v24, 0, sizeof(v24));
  v25 = 1065353216;
  std::vector<std::unordered_map<void *,CA::Render::LayerNode *>>::push_back[abi:nn180100]((uint64_t *)this + 100, (uint64_t *)v24);
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)v24);
  return this;
}

uint64_t CA::CAPSEProcessor::needs_processing(CA::CAPSEProcessor *this)
{
  if (CA::CAPSEProcessor::needs_processing(void)::once[0] != -1)
    dispatch_once(CA::CAPSEProcessor::needs_processing(void)::once, &__block_literal_global_8211);
  if (CA::CAPSEProcessor::needs_processing(void)::has_class)
    return objc_msgSend(MEMORY[0x1E0D7D288], "needsProcessing");
  else
    return 0;
}

BOOL CA::Shape::equal(CA::Shape *this, const CA::Shape *a2)
{
  int v2;
  int *v3;
  int *v4;
  int v5;
  _BOOL8 result;
  int v7;
  int v8;
  int v9;

  if (this == a2)
    return 1;
  if (((a2 | this) & 1) != 0)
    return 0;
  v2 = *((_DWORD *)this + 1);
  if (v2 != *((_DWORD *)a2 + 1))
    return 0;
  v3 = (int *)((char *)this + 12);
  v4 = (int *)((char *)a2 + 12);
  v5 = v2 - 3;
  while (1)
  {
    result = v5 == 0;
    if (!v5)
      break;
    --v5;
    v8 = *v3++;
    v7 = v8;
    v9 = *v4++;
    if (v7 != v9)
      return 0;
  }
  return result;
}

_QWORD *x_heap_new(unint64_t a1)
{
  uint64_t v1;
  size_t v2;
  _QWORD *v3;
  malloc_zone_t *malloc_zone;
  _QWORD *v5;

  v1 = 2048;
  if (a1 > 0x800)
    v1 = a1;
  if (a1)
    v2 = v1;
  else
    v2 = 0x4000;
  v3 = malloc_type_malloc(v2, 0xF92BB69DuLL);
  if (v3)
  {
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v5 = malloc_type_zone_malloc(malloc_zone, 0x10uLL, 0x8BB15036uLL);
    *v5 = v3;
    v5[1] = 0;
    *v3 = v5;
    v3[1] = v3 + 4;
    v3[2] = v2 - 32;
    v3[3] = v2;
  }
  return v3;
}

uint64_t CA::OGL::AsynchronousDispatcher::renderer(CA::OGL::AsynchronousDispatcher *this)
{
  uint64_t result;
  id v3;
  void *v4;
  uint64_t v5;
  malloc_zone_t *malloc_zone;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  result = *((_QWORD *)this + 7);
  if (result)
    goto LABEL_7;
  v3 = CAMetalContextCreate();
  if (v3)
  {
    v4 = v3;
    v5 = CA::OGL::new_metal_context(v3, 0, 0, 140307, 2, CFSTR("com.apple.coreanimation.async"));
    *((_QWORD *)this + 8) = v5;
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v7 = malloc_type_zone_malloc(malloc_zone, 0x68uLL, 0x8BB15036uLL);
    v8 = v7;
    if (v7)
    {
      v9 = *((_QWORD *)this + 8);
      v7[1] = 0;
      v7[2] = 0;
      *v7 = v9;
      v7[6] = malloc_type_malloc(0x40000uLL, 0xA44586FDuLL);
      v8[7] = 0;
      *((_DWORD *)v8 + 24) = 1;
      *((_WORD *)v8 + 50) = 0;
    }
    *((_QWORD *)this + 7) = v8;
    *(_WORD *)(v5 + 816) |= 1u;
    *(_DWORD *)(v5 + 424) = 2;

  }
  result = *((_QWORD *)this + 7);
  if (result)
  {
LABEL_7:
    v10 = *((_QWORD *)this + 8);
    v11 = *(_DWORD *)(v10 + 208);
    *(_DWORD *)(v10 + 208) = 140307;
    *(_DWORD *)(v10 + 416) = global_feature_flags | 0x22413;
    if ((v11 & 0x2000200) != 0)
    {
      CA::OGL::Context::update_color_program_cache(v10);
      return *((_QWORD *)this + 7);
    }
  }
  return result;
}

void CA::OGL::MetalContext::finish(id *this)
{
  CA::OGL::MetalContext::flush((CA::OGL::MetalContext *)this, 1);
  objc_msgSend(this[365], "waitUntilCompleted");

  this[365] = 0;
}

BOOL CA::OGL::MetalContext::set_destination_iosurface(CA::OGL::MetalContext *this, __IOSurface *a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  char v15;
  id v16;
  void *v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  char v21;
  id v22;
  unint64_t *v23;
  unint64_t v24;
  void *v25;
  BOOL v26;
  unint64_t v28[3];

  v28[2] = *MEMORY[0x1E0C80C00];
  v28[0] = 0;
  v28[1] = 0;
  if (a2)
  {
    os_unfair_lock_lock((os_unfair_lock_t)this + 690);
    v8 = *((_QWORD *)this + 346);
    if (v8)
      v9 = x_hash_table_lookup(v8, (uint64_t)a2, 0);
    else
      v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 1;
LABEL_8:
    v13 = v12;
    v14 = v11;
    do
    {
      if (v9)
      {
        v16 = *(id *)(v9 + 8 * v11);
        v12 = 0;
        v28[v11] = (unint64_t)v16;
        if (v16)
          ++v10;
        v11 = 1;
        if ((v13 & 1) == 0)
        {
          os_unfair_lock_unlock((os_unfair_lock_t)this + 690);
          goto LABEL_5;
        }
        goto LABEL_8;
      }
      v15 = v12;
      v12 = 0;
      v28[v14] = 0;
      v14 = 1;
    }
    while ((v15 & 1) != 0);
    os_unfair_lock_unlock((os_unfair_lock_t)this + 690);
    v17 = CA::OGL::MetalContext::alloc_destination_texture(this, a2);
    v28[0] = (unint64_t)v17;
    v10 = v17 != 0;
    v18 = operator new[]();
    v19 = 0;
    v20 = 1;
    do
    {
      v21 = v20;
      if (v19 >= v10)
        v22 = 0;
      else
        v22 = v17;
      v20 = 0;
      *(_QWORD *)(v18 + 8 * v19) = v22;
      v19 = 1;
    }
    while ((v21 & 1) != 0);
    os_unfair_lock_lock((os_unfair_lock_t)this + 690);
    if (!*((_QWORD *)this + 346))
      *((_QWORD *)this + 346) = x_hash_table_new_((unint64_t (*)(uint64_t))CA::OGL::iosurface_textures_hash, (BOOL (*)(uint64_t, uint64_t))CA::OGL::iosurface_textures_compare, (uint64_t)CA::OGL::iosurface_textures_destroy_key, (uint64_t)CA::OGL::iosurface_textures_destroy_value, 0, 0);
    CFRetain(a2);
    hash_table_modify(*((int **)this + 346), (uint64_t)a2, v18, 0);
    os_unfair_lock_unlock((os_unfair_lock_t)this + 690);
  }
  else
  {
    v10 = 0;
LABEL_5:
    *((_QWORD *)this + 380) = 0;
  }
  CA::OGL::MetalContext::set_destination_textures(this, 0, (id *)v28, v10, a3, a4);
  if (v10)
  {
    v23 = v28;
    v24 = v10;
    do
    {
      v25 = (void *)*v23++;

      --v24;
    }
    while (v24);
  }
  if (a2)
    v26 = v10 == 0;
  else
    v26 = 0;
  return !v26;
}

void sub_184497468(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void CA::OGL::MetalContext::set_destination_textures(CA::OGL::MetalContext *this, uint64_t a2, id *a3, unint64_t a4, int a5, int a6)
{
  uint64_t v12;
  id v13;
  CA::OGL *v14;
  MTLPixelFormat v15;
  _BOOL4 has_alpha_plane;
  malloc_zone_t *malloc_zone;
  char *v18;
  int32x2_t *v19;
  int v20;
  __int16 v21;
  __int16 v22;
  __int32 v23;
  __int32 v24;
  uint64_t v25;
  id v26;
  int32x2_t *v27;
  int v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;

  v12 = *((_QWORD *)this + 31);
  if (v12)
  {
    *((_WORD *)this + 1640) |= 0x100u;
    CA::OGL::Context::pop_surface(this);
    CA::OGL::Context::release_surface((uint64_t)this, v12);
    *((_WORD *)this + 1640) &= ~0x100u;
    if (*((_QWORD *)this + 31))
      __assert_rtn("set_destination_textures", "ogl-metal.mm", 9860, "current_surface () == nullptr");
  }
  *(_OWORD *)((char *)this + 2776) = 0u;
  if (!a4)
  {
    *((_QWORD *)this + 380) = 0;
    return;
  }
  v13 = *a3;
  v14 = (CA::OGL *)objc_msgSend(*a3, "pixelFormat");
  has_alpha_plane = CA::OGL::metal_pixel_format_has_alpha_plane(v14, v15);
  *((_QWORD *)this + 380) = objc_msgSend(v13, "protectionOptions");
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  v18 = (char *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0xF0uLL, 0x743898A5uLL);
  v19 = (int32x2_t *)v18;
  *(_DWORD *)v18 = 1;
  if (has_alpha_plane)
    v20 = 15;
  else
    v20 = 7;
  *((_DWORD *)v18 + 17) = v20;
  v18[72] &= ~1u;
  v21 = *((_WORD *)v18 + 116) & 0xFD40 | a4 & 0xF;
  *(_WORD *)(v18 + 75) = *(_WORD *)(v18 + 75) & 0xFE0F | 0x190;
  *((_QWORD *)v18 + 11) = this;
  if (a5)
    v22 = 640;
  else
    v22 = 128;
  *((_WORD *)v18 + 116) = v22 | v21;
  *((_DWORD *)v18 + 6) = objc_msgSend(v13, "width");
  v19[3].i32[1] = objc_msgSend(v13, "height");
  v19[6] = (int32x2_t)objc_msgSend(v13, "protectionOptions");
  v23 = v19[3].i32[0];
  v24 = v19[3].i32[1];
  v19[23].i32[0] = v23;
  v19[23].i32[1] = v24;
  v19[4] = vneg_s32(*(int32x2_t *)((char *)this + 2792));
  v19[5].i32[0] = v23;
  v19[5].i32[1] = v24;
  v19[8].i32[0] = *((_DWORD *)this + 722);
  if (a4 > 3)
    __assert_rtn("set_destination_textures", "ogl-metal.mm", 9904, "count <= MAX_COLOR_ATTACHMENTS");
  v33 = a6;
  v25 = 0;
  do
  {
    v26 = a3[v25];
    v27 = &v19[v25];
    v27[12] = (int32x2_t)v26;
    v27[15] = (int32x2_t)objc_msgSend(v26, "pixelFormat");
    if (objc_msgSend(v26, "storageMode") == 3)
      v19[26].i16[3] |= 1 << v25;
    else
      v19[9].i8[0] ^= 1u;
    ++v25;
  }
  while (a4 != v25);
  if (!a2 || a4 == 1)
  {
    CA::OGL::MetalContext::add_memoryless_textures((uint64_t)this, (uint64_t)v19);
    v28 = v33;
  }
  else
  {
    v28 = v33;
    if ((*((_WORD *)this + 1640) & 8) != 0)
    {
      v29 = v19[26].i16[3] != 0;
      v19[27].i16[0] = v19[26].i16[3];
      *((_WORD *)this + 1640) = *((_WORD *)this + 1640) & 0xFFFD | (2 * v29);
    }
  }
  if (v28 && (*((_WORD *)this + 1640) & 0x10) != 0)
  {
    v19[8].i32[1] |= 0x2000u;
    CA::OGL::MetalContext::add_path_buffer_texture((uint64_t)this, (uint64_t)v19);
  }
  v30 = objc_msgSend(v13, "pixelFormat");
  v31 = v30;
  if ((unint64_t)(v30 - 550) <= 5)
    v19[8].i32[1] |= 0x100u;
  if (v30 == 115)
  {
    v32 = 16;
    goto LABEL_31;
  }
  if (v30 == 125)
  {
    v32 = 32;
LABEL_31:
    v19[8].i32[1] |= v32;
  }
  CA::OGL::Context::push_surface((uint64_t)this, (uint64_t)v19, 0, 0, 0);
  *((_QWORD *)this + 347) = v19;
  *((_QWORD *)this + 348) = v31;
}

uint64_t CA::OGL::MetalContext::add_path_buffer_texture(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v4;
  void *v5;
  void *v6;
  int v7;

  v2 = *(_DWORD *)(a2 + 68);
  if ((v2 & 0x2000) != 0)
  {
    if (*(_QWORD *)(a2 + 120) == 125)
    {
      *(_DWORD *)(a2 + 68) = v2 & 0xFFFFDFFF;
    }
    else
    {
      v4 = result;
      v5 = (void *)objc_msgSend(MEMORY[0x1E0CC6BB0], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", 55, *(int *)(a2 + 24), *(int *)(a2 + 28), 0);
      objc_msgSend(v5, "setStorageMode:", 3);
      objc_msgSend(v5, "setUsage:", 5);
      objc_msgSend(v5, "setProtectionOptions:", *(_QWORD *)(v4 + 3040));
      v6 = (void *)objc_msgSend(*(id *)(v4 + 2904), "newTextureWithDescriptor:", v5);
      *(_QWORD *)(a2 + 8 * (*(unsigned __int16 *)(a2 + 232) << 28 >> 28) + 96) = v6;
      result = objc_msgSend(v6, "setLabel:", CFSTR("com.apple.coreanimation.path-buffer"));
      v7 = *(unsigned __int16 *)(a2 + 232);
      *(_QWORD *)(a2 + 8 * (v7 << 28 >> 28) + 120) = 55;
      *(_WORD *)(a2 + 232) = v7 & 0xFFF0 | (v7 + 1) & 0xF;
    }
  }
  return result;
}

void CA::Render::HitTestTree::unref(CA::Render::HitTestTree *this)
{
  unsigned int v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  malloc_zone_t *malloc_zone;

  do
    v2 = __ldaxr((unsigned int *)this);
  while (__stlxr(v2 - 1, (unsigned int *)this));
  if (this && v2 == 1)
  {
    v3 = *((unsigned int *)this + 1);
    if ((_DWORD)v3)
    {
      v4 = *((_QWORD *)this + 2);
      v5 = v4 + v3;
      do
      {
        v6 = *(unsigned int **)(v4 + 16);
        if (v6)
        {
          v7 = v6 + 2;
          do
          {
            v8 = __ldaxr(v7);
            v9 = v8 - 1;
          }
          while (__stlxr(v9, v7));
          if (!v9)
            (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
        }
        v4 += *(unsigned __int8 *)(v4 + 12);
      }
      while (v4 < v5);
    }
    if (*((_DWORD *)this + 2) == 4 * *MEMORY[0x1E0C85AD8])
    {
      os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::HitTestTree::storage_cache_lock);
      v10 = 0;
      while (CA::Render::HitTestTree::storage_cache[v10])
      {
        if (++v10 == 2)
          goto LABEL_19;
      }
      CA::Render::HitTestTree::storage_cache[v10] = *((_QWORD *)this + 2);
      *((_QWORD *)this + 2) = 0;
LABEL_19:
      os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::HitTestTree::storage_cache_lock);
    }
    free(*((void **)this + 2));
    std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)this + 24);
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(malloc_zone, this);
  }
}

double CA::WindowServer::Server::context_transform(CA::WindowServer::Server *this, uint64_t a2, uint64_t a3)
{
  os_unfair_lock_s *v6;
  unsigned int *v7;
  unsigned int v8;
  const double *v9;
  double result;

  v6 = (os_unfair_lock_s *)(a2 + 324);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 324));
  v7 = *(unsigned int **)(a2 + 328);
  if (v7)
  {
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    os_unfair_lock_unlock(v6);
    *(_OWORD *)this = xmmword_18474DF40;
    *((_OWORD *)this + 1) = 0u;
    *((_OWORD *)this + 2) = xmmword_18474DF50;
    *((_OWORD *)this + 3) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 5) = xmmword_18474DF40;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 7) = xmmword_18474DF50;
    CA::Render::HitTestTree::context_transform((uint64_t)v7, a3, (uint64_t)this, v9);
    CA::Render::HitTestTree::unref((CA::Render::HitTestTree *)v7);
  }
  else
  {
    os_unfair_lock_unlock(v6);
    result = 1.0;
    *(_OWORD *)this = xmmword_18474DF40;
    *((_OWORD *)this + 1) = 0u;
    *((_OWORD *)this + 2) = xmmword_18474DF50;
    *((_OWORD *)this + 3) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 5) = xmmword_18474DF40;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 7) = xmmword_18474DF50;
  }
  return result;
}

uint64_t CA::Render::HitTestTree::context_transform(uint64_t a1, uint64_t a2, uint64_t a3, const double *a4)
{
  uint64_t v4;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  BOOL v13;
  CA::Render::LayerHost **v14;
  CA::Render::LayerHost *v15;
  uint64_t v16;
  CA::Render::HitTestTree *v17;
  const double *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  const double *v30;
  _OWORD v31[8];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned int *)(a1 + 4);
  if ((_DWORD)v4)
  {
    v7 = *(unsigned int **)(a1 + 16);
    v8 = (unsigned int *)((char *)v7 + v4);
    do
    {
      v9 = *((_QWORD *)v7 + 1);
      if (v7[6] == (_DWORD)a2)
      {
        v10 = *v7;
        v11 = (char *)v7 - v10;
        if ((v9 & 0x800000000000000) != 0)
        {
          if ((_DWORD)v10)
          {
            v19 = *((_QWORD *)v11 + 2);
            if (v19)
            {
              v20 = *(uint64_t **)(v19 + 128);
              if (v20)
              {
                v21 = *v20;
                if (v21)
                {
                  if ((*(_DWORD *)(v21 + 12) & 0x80FF) == 0x8028)
                  {
LABEL_26:
                    v22 = 1;
                    CA::Render::HitTestTree::Node::relative_transform_product((CA::Mat4Impl *)v31, (unsigned int *)v11, 1, a4);
                    v24 = v31[1];
                    v25 = v31[2];
                    v26 = v31[3];
                    *(_OWORD *)a3 = v31[0];
                    *(_OWORD *)(a3 + 16) = v24;
                    *(_OWORD *)(a3 + 32) = v25;
                    *(_OWORD *)(a3 + 48) = v26;
                    v27 = v31[5];
                    v28 = v31[6];
                    v29 = v31[7];
                    *(_OWORD *)(a3 + 64) = v31[4];
                    *(_OWORD *)(a3 + 80) = v27;
                    *(_OWORD *)(a3 + 96) = v28;
                    *(_OWORD *)(a3 + 112) = v29;
                    return v22;
                  }
                }
              }
            }
          }
        }
        else if ((_DWORD)v10)
        {
          goto LABEL_26;
        }
      }
      else
      {
        v12 = *((_QWORD *)v7 + 2);
        if (v12)
          v13 = (v9 & 0x800000000000000) == 0;
        else
          v13 = 0;
        if (v13)
        {
          v14 = *(CA::Render::LayerHost ***)(v12 + 128);
          if (v14)
          {
            v15 = *v14;
            if (*v14)
            {
              if (*((_BYTE *)v15 + 12) == 30)
              {
                v16 = CA::Render::LayerHost::retain_async_hit_test_tree(v15);
                if (v16)
                {
                  v17 = (CA::Render::HitTestTree *)v16;
                  if (CA::Render::HitTestTree::context_transform(v16, a2, a3))
                  {
                    v22 = 1;
                    CA::Render::HitTestTree::Node::relative_transform_product((CA::Mat4Impl *)v31, v7, 1, v18);
                    CA::Mat4Impl::mat4_concat((float64x2_t *)a3, (double *)a3, (const double *)v31, v30);
                    CA::Render::HitTestTree::unref(v17);
                    return v22;
                  }
                  CA::Render::HitTestTree::unref(v17);
                }
              }
            }
          }
        }
      }
      v7 = (unsigned int *)((char *)v7 + BYTE4(v9));
    }
    while (v7 < v8);
  }
  return 0;
}

uint64_t CA::Render::LayerHost::retain_async_hit_test_tree(CA::Render::LayerHost *this)
{
  uint64_t v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  unsigned int v5;

  if (!*((_QWORD *)this + 4))
    return 0;
  os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::LayerHost::_lock);
  v2 = *((_QWORD *)this + 4);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 24);
    if (v3)
    {
      v4 = (os_unfair_lock_s *)(v3 + 180);
      os_unfair_lock_lock((os_unfair_lock_t)(v3 + 180));
      v3 = *(_QWORD *)(v3 + 184);
      if (v3)
      {
        do
          v5 = __ldaxr((unsigned int *)v3);
        while (__stlxr(v5 + 1, (unsigned int *)v3));
      }
      os_unfair_lock_unlock(v4);
    }
  }
  else
  {
    v3 = 0;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::LayerHost::_lock);
  return v3;
}

uint64_t CA::Render::Handle::retain_context(CA::Render::Handle *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v6;

  os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::Handle::_handle_lock);
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
    if (!v4)
    {
      v2 = 0;
      do
        v6 = __ldaxr(v3);
      while (__stlxr(v6 - 1, v3));
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::Handle::_handle_lock);
  return v2;
}

void CA::Render::HitTestTree::Node::relative_transform_product(CA::Mat4Impl *this, unsigned int *a2, char a3, const double *a4)
{
  unsigned int *v5;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  float64x2_t v13;
  float64x2_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  float64x2_t v26;
  __int128 v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)this = xmmword_18474DF40;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = xmmword_18474DF50;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = xmmword_18474DF40;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = xmmword_18474DF50;
  if (a2)
  {
    v5 = a2;
    while (1)
    {
      v7 = *((_QWORD *)v5 + 2);
      if (v7)
      {
        if ((a3 & 1) == 0)
        {
          v8 = *(uint64_t **)(v7 + 128);
          if (v8)
          {
            v9 = *v8;
            if (v9)
            {
              if ((*(_DWORD *)(v9 + 12) & 0x20FF) == 0x201E)
                return;
            }
          }
        }
      }
      v20 = xmmword_18474DF40;
      v21 = 0u;
      v23 = 0u;
      v24 = 0u;
      v22 = xmmword_18474DF50;
      v25 = xmmword_18474DF40;
      v26 = 0u;
      v27 = xmmword_18474DF50;
      v10 = *((_QWORD *)v5 + 1);
      if ((v10 & 0x8000000000000) != 0)
        break;
      if ((v10 & 0x10000000000000) != 0)
      {
        v11 = *((double *)v5 + 10);
        v12 = *((double *)v5 + 11);
        v13 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_18474DF50, v12), (float64x2_t)xmmword_18474DF40, v11);
        v14 = vmlaq_n_f64(vmlaq_n_f64((float64x2_t)xmmword_18474DF50, (float64x2_t)0, v11), (float64x2_t)0, v12);
LABEL_12:
        v26 = v13;
        v27 = (__int128)v14;
      }
      CA::Mat4Impl::mat4_concat((float64x2_t *)this, (double *)this, (const double *)&v20, a4);
      v19 = *v5;
      if ((_DWORD)v19)
        v5 = (unsigned int *)((char *)v5 - v19);
      else
        v5 = 0;
      if (!(_DWORD)v19)
        return;
    }
    v15 = *((_OWORD *)v5 + 6);
    v16 = *((_OWORD *)v5 + 7);
    v17 = *((_OWORD *)v5 + 8);
    v20 = *((_OWORD *)v5 + 5);
    v21 = v15;
    v22 = v16;
    v23 = v17;
    v18 = *((_OWORD *)v5 + 10);
    v13 = *((float64x2_t *)v5 + 11);
    v14 = *((float64x2_t *)v5 + 12);
    v24 = *((_OWORD *)v5 + 9);
    v25 = v18;
    goto LABEL_12;
  }
}

void *CA::OGL::MetalContext::alloc_destination_texture(CA::OGL::MetalContext *this, IOSurfaceRef buffer)
{
  CA::Render *PixelFormat;
  uint64_t ProtectionOptions;
  size_t Width;
  size_t Height;
  size_t v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  const char *v16;
  NSObject *v17;
  uint32_t v18;
  uint64_t v19;
  NSObject *v21;
  int v22;
  uint8_t buf[4];
  _BYTE v24[18];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (buffer)
  {
    PixelFormat = (CA::Render *)IOSurfaceGetPixelFormat(buffer);
    v22 = (int)PixelFormat;
    ProtectionOptions = IOSurfaceGetProtectionOptions();
  }
  else
  {
    PixelFormat = 0;
    ProtectionOptions = 0;
    v22 = 0;
  }
  *((_QWORD *)this + 380) = ProtectionOptions;
  Width = IOSurfaceGetWidth(buffer);
  Height = IOSurfaceGetHeight(buffer);
  v8 = Height;
  v9 = *((_QWORD *)this + 331);
  if (Width > v9 || Height > v9)
  {
    if (x_log_hook_p())
    {
LABEL_16:
      x_log_();
      return 0;
    }
    v15 = x_log_category_ogl_metal;
    if (!os_log_type_enabled((os_log_t)x_log_category_ogl_metal, OS_LOG_TYPE_ERROR))
      return 0;
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)v24 = Width;
    *(_WORD *)&v24[8] = 2048;
    *(_QWORD *)&v24[10] = v8;
    v16 = "%zu by %zu iosurface is too large for GPU\n";
    v17 = v15;
    v18 = 22;
LABEL_21:
    _os_log_impl(&dword_184457000, v17, OS_LOG_TYPE_ERROR, v16, buf, v18);
    return 0;
  }
  v10 = CA::OGL::four_cc_to_mtl_format(PixelFormat, *((_DWORD *)this + 669));
  if (v10 == 1)
    v11 = 10;
  else
    v11 = v10;
  if (!v11)
  {
    if (x_log_hook_p())
      goto LABEL_16;
    v19 = x_log_category_ogl_metal;
    if (!os_log_type_enabled((os_log_t)x_log_category_ogl_metal, OS_LOG_TYPE_ERROR))
      return 0;
    *(_DWORD *)buf = 68157954;
    *(_DWORD *)v24 = 4;
    *(_WORD *)&v24[4] = 2080;
    *(_QWORD *)&v24[6] = &v22;
    v16 = "Unsupported IOSurface pixel format: %.4s\n";
    v17 = v19;
    v18 = 18;
    goto LABEL_21;
  }
  v12 = (void *)objc_msgSend(MEMORY[0x1E0CC6BB0], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", v11, Width, v8, 0);
  objc_msgSend(v12, "setUsage:", 5);
  objc_msgSend(v12, "setProtectionOptions:", *((_QWORD *)this + 380));
  v13 = (void *)objc_msgSend(*((id *)this + 363), "newTextureWithDescriptor:iosurface:plane:", v12, buffer, 0);
  v14 = v13;
  if (v13)
  {
    objc_msgSend(v13, "setLabel:", CFSTR("com.apple.coreanimation.iosurface-destination"));
  }
  else if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v21 = x_log_category_ogl_metal;
    if (os_log_type_enabled((os_log_t)x_log_category_ogl_metal, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_184457000, v21, OS_LOG_TYPE_ERROR, "Unable to create MTLTexture for destination IOSurface\n", buf, 2u);
    }
  }
  return v14;
}

uint64_t CA::OGL::Context::purge(CA::OGL::Context *this, int a2)
{
  char *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  malloc_zone_t *malloc_zone;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t result;

  os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::BackdropGroup::_list_lock);
  v4 = (char *)CA::Render::BackdropGroup::_list;
  v5 = qword_1EDD0FB98;
  if (CA::Render::BackdropGroup::_list == (_UNKNOWN *)qword_1EDD0FB98)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::BackdropGroup::_list_lock);
  }
  else
  {
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)v4;
      if (*(_DWORD *)(*(_QWORD *)v4 + 8))
      {
        os_unfair_lock_lock((os_unfair_lock_t)(v7 + 40));
        v8 = *(_QWORD *)(v7 + 48);
        if (v8 && *(CA::OGL::Context **)(v8 + 8) == this)
        {
          malloc_zone = (malloc_zone_t *)get_malloc_zone();
          v10 = malloc_type_zone_malloc(malloc_zone, 0x10uLL, 0x8BB15036uLL);
          *v10 = v8;
          v10[1] = v6;
          *(_QWORD *)(v7 + 48) = 0;
          v6 = v10;
        }
        os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 40));
      }
      v4 += 8;
    }
    while (v4 != (char *)v5);
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::BackdropGroup::_list_lock);
    if (v6)
    {
      v11 = v6;
      do
      {
        if (*v11)
          (*(void (**)(_QWORD))(*(_QWORD *)*v11 + 8))(*v11);
        v11 = (_QWORD *)v11[1];
      }
      while (v11);
      do
      {
        v12 = (_QWORD *)v6[1];
        free(v6);
        v6 = v12;
      }
      while (v12);
    }
  }
  os_unfair_lock_lock((os_unfair_lock_t)this + 72);
  x_hash_table_remove_if (*((_QWORD *)this + 37), (unsigned int (*)(_QWORD, _QWORD, uint64_t))CA::OGL::Context::remove_images, (uint64_t)this);
  os_unfair_lock_unlock((os_unfair_lock_t)this + 72);
  result = (*(uint64_t (**)(CA::OGL::Context *, uint64_t))(*(_QWORD *)this + 216))(this, 1);
  if (a2)
    return CA::OGL::Context::update_color_program_cache((uint64_t)this);
  return result;
}

uint64_t CA::OGL::MetalContext::purge(os_unfair_lock_s *this, int a2)
{
  _QWORD *v4;

  if (a2)
  {
    CA::OGL::MetalContext::purge_shaders((CA::OGL::MetalContext *)this);
    os_unfair_lock_lock(this + 690);
    v4 = *(_QWORD **)&this[692]._os_unfair_lock_opaque;
    if (v4)
      x_hash_table_remove_all(v4);
    os_unfair_lock_unlock(this + 690);
  }
  return CA::OGL::Context::purge((CA::OGL::Context *)this, a2);
}

uint64_t CA::Render::Filter::compositing_dod(CA::Render::Filter *this)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  int v5;
  uint64_t result;

  if ((int)this > 408)
  {
    if ((int)this <= 536)
    {
      switch((int)this)
      {
        case 504:
        case 513:
          return 4;
        case 505:
        case 506:
        case 508:
        case 510:
        case 511:
          return 0;
        case 507:
          return 3;
        case 509:
          return 5;
        case 512:
          return 2;
        default:
          if (((_DWORD)this - 409) <= 0xD && ((1 << ((_BYTE)this + 103)) & 0x2041) != 0)
            return 4;
          if (((_DWORD)this - 424) > 0x37)
            return 0;
          v1 = 1 << (this + 88);
          v2 = 0x84000000000001;
          break;
      }
LABEL_14:
      if ((v1 & v2) == 0)
        return 0;
      return 4;
    }
    v4 = ((_DWORD)this - 537);
    if (v4 <= 0x3D)
    {
      if (((1 << (this - 25)) & 0x200DA00000000001) == 0)
      {
        if (v4 == 1)
          return 2;
        if (v4 == 2)
          return 3;
        return 0;
      }
      return 4;
    }
    return 0;
  }
  if ((int)this > 213)
  {
    v3 = (_BYTE)this - 85;
    if (((_DWORD)this - 341) <= 0x35)
    {
      if (((1 << v3) & 0x20200400201C03) != 0)
        return 4;
      if (((1 << v3) & 0x120000000000) != 0)
        return 5;
    }
    if (((_DWORD)this - 214) <= 0x2C)
    {
      v1 = 1 << (this + 42);
      v2 = 0x100800000001;
      goto LABEL_14;
    }
    return 0;
  }
  switch((int)this)
  {
    case 160:
    case 161:
    case 169:
    case 170:
    case 181:
      return 4;
    case 162:
    case 163:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
      return 0;
    case 164:
    case 167:
    case 168:
      return 3;
    case 165:
      return 2;
    case 166:
      return 5;
    default:
      v5 = (_DWORD)this - 88;
      result = 1;
      switch(v5)
      {
        case 0:
          return result;
        case 4:
        case 6:
        case 8:
          return 4;
        default:
          return 0;
      }
  }
  return result;
}

BOOL CATransform3DIsIdentity(CATransform3D *t)
{
  uint64_t v2;
  unint64_t v3;
  double v4;
  double v5;

  if (t->m11 != 1.0)
    return 0;
  v2 = 1;
  v3 = 15;
  while (v2 != 16)
  {
    v4 = *(&t->m11 + v2);
    v5 = *(&CATransform3DIdentity.m11 + v2++);
    if (v4 != v5)
    {
      v3 = v2 - 2;
      return v3 > 0xE;
    }
  }
  return v3 > 0xE;
}

CFTimeInterval CACurrentMediaTime(void)
{
  uint64_t v0;

  v0 = mach_absolute_time();
  return CATimeWithHostTime(v0);
}

uint64_t CA::OGL::ShadowNode::compute_dod(uint64_t this, int32x2_t *a2, int32x4_t a3, int64x2_t a4)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  __int32 v8;
  __int32 v9;
  __int32 v10;
  __int32 v11;
  uint64_t v12;
  CA::Render::Path *v13;
  uint64_t v14;
  int64x2_t v15;
  int8x16_t v16;
  float64x2_t v17;
  float64x2_t v18;
  int64x2_t v19;
  int8x16_t v20;
  const double *v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x2_t v24;
  int32x2_t v25;
  int32x4_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(*(_QWORD *)(this + 16) + 24);
  if ((*(_BYTE *)(v5 + 44) & 2) != 0)
  {
    *(_OWORD *)a2->i8 = xmmword_18474E240;
    return this;
  }
  v6 = this;
  v7 = *(_DWORD **)(this + 24);
  v8 = v7[34];
  if (v8 < 0)
  {
    (*(void (**)(_QWORD, _DWORD *))(*(_QWORD *)v7 + 40))(*(_QWORD *)(this + 24), v7 + 32);
    v8 = v7[34];
  }
  v9 = v7[32];
  a2->i32[0] = v9;
  v10 = v7[33];
  a2->i32[1] = v10;
  a2[1].i32[0] = v8;
  v11 = v7[35];
  a2[1].i32[1] = v11;
  v24 = (int32x2_t)__PAIR64__(v10, v9);
  v25 = (int32x2_t)__PAIR64__(v11, v8);
  if ((*(_BYTE *)(v5 + 44) & 4) != 0)
  {
    a3 = *(int32x4_t *)(v5 + 80);
    v19 = vceqzq_f64((float64x2_t)a3);
    a4 = (int64x2_t)vorrq_s8((int8x16_t)vdupq_laneq_s64(v19, 1), (int8x16_t)v19);
    if ((a4.i64[0] & 0x8000000000000000) == 0)
    {
      v20 = vorrq_s8((int8x16_t)vcltzq_f64((float64x2_t)a3), (int8x16_t)vcgezq_f64((float64x2_t)a3));
      a4 = (int64x2_t)vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v20), 1), v20);
      if ((a4.i64[0] & 0x8000000000000000) == 0)
      {
        v17 = (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000);
        v18 = *(float64x2_t *)(v5 + 64);
        goto LABEL_14;
      }
    }
LABEL_15:
    v26 = 0uLL;
    goto LABEL_17;
  }
  v12 = *(_QWORD *)(v5 + 128);
  if (!v12 || (v13 = *(CA::Render::Path **)(v12 + 120)) == 0)
  {
    v26.i64[0] = __PAIR64__(v10, v9);
    v26.i64[1] = __PAIR64__(v11, v8);
    goto LABEL_17;
  }
  v14 = CA::Render::Path::bounding_rect(v13);
  a3 = *(int32x4_t *)(v14 + 16);
  v15 = vceqzq_f64((float64x2_t)a3);
  a4 = (int64x2_t)vorrq_s8((int8x16_t)vdupq_laneq_s64(v15, 1), (int8x16_t)v15);
  if (a4.i64[0] < 0)
    goto LABEL_15;
  v16 = vorrq_s8((int8x16_t)vcltzq_f64((float64x2_t)a3), (int8x16_t)vcgezq_f64((float64x2_t)a3));
  a4 = (int64x2_t)vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v16), 1), v16);
  if (a4.i64[0] < 0)
    goto LABEL_15;
  v17 = (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000);
  v18 = *(float64x2_t *)v14;
LABEL_14:
  a4 = vcvtmq_s64_f64(vmaxnmq_f64(v18, v17));
  a3 = vuzp1q_s32((int32x4_t)a4, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v18, (float64x2_t)a3), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), a4));
  v26 = a3;
LABEL_17:
  CA::OGL::ShadowNode::map_bounds(*(CA::OGL::ShadowNode **)(*(_QWORD *)(v6 + 16) + 24), *(CA::Bounds **)(v6 + 80), (uint64_t)&v26, 1, a3, (int32x4_t)a4);
  CA::BoundsImpl::Union(a2, *(int32x2_t *)v26.i8, (int32x2_t)v26.u64[1]);
  CA::OGL::ShadowNode::map_bounds_rim((CA::OGL::ShadowNode *)v6, (CA::Bounds *)&v24, v21, v22, v23);
  return CA::BoundsImpl::Union(a2, v24, v25);
}

void CA::OGL::ShadowNode::map_bounds_rim(CA::OGL::ShadowNode *this, CA::Bounds *a2, const double *a3, int32x4_t a4, int32x4_t a5)
{
  int v7;
  int v8;
  int v9;
  int64x2_t v10;
  int8x16_t v11;
  double v12;
  double v13;
  const CA::Transform *v14;
  uint64_t v15;
  double v16;
  double *v17;
  int64x2_t v18;
  int8x16_t v19;
  int32x4_t v20;
  float64x2_t v21;
  float64x2_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v7 = *((_DWORD *)a2 + 2);
  v8 = *((_DWORD *)a2 + 3);
  if (v7 <= v8)
    v9 = *((_DWORD *)a2 + 3);
  else
    v9 = *((_DWORD *)a2 + 2);
  a4.i32[0] = 1073741822;
  a5.i32[0] = v9;
  v10.i64[0] = (int)*(_QWORD *)a2;
  v10.i64[1] = (int)HIDWORD(*(_QWORD *)a2);
  v11 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(a5, a4), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v10));
  v12 = (double)v7;
  v13 = (double)v8;
  if (v9 > 1073741822)
  {
    v12 = 1.79769313e308;
    v13 = 1.79769313e308;
  }
  v21 = (float64x2_t)v11;
  v22.f64[0] = v12;
  v22.f64[1] = v13;
  v14 = (const CA::Transform *)*((_QWORD *)this + 10);
  CA::Rect::unapply_transform((CA::Rect *)&v21, v14, a3);
  v15 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 24) + 128);
  if (v15)
    v16 = *(float *)(v15 + 296);
  else
    v16 = 0.0;
  CA::BoundsImpl::inset(v21.f64, -v16, -v16);
  CA::Rect::apply_transform((int8x16_t *)&v21, v14, v17);
  v18 = vceqzq_f64(v22);
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v18, 1), (int8x16_t)v18).u64[0] & 0x8000000000000000) != 0
    || (v19 = vorrq_s8((int8x16_t)vcltzq_f64(v22), (int8x16_t)vcgezq_f64(v22)),
        (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v19), 1), v19).u64[0] & 0x8000000000000000) != 0))
  {
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
  }
  else
  {
    v20 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v21, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
    *(int32x4_t *)a2 = vuzp1q_s32(v20, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v21, v22), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v20));
  }
}

void CA::OGL::MeshNode::compute_dod(CA::OGL::MeshNode *this, CA::Bounds *a2, const CA::Rect *a3, int32x4_t a4, int32x4_t a5, double a6, double a7, double a8, double a9, int32x4_t a10)
{
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int8x16_t v16;
  uint64_t v17;
  int64x2_t v18;
  float64x2_t v19;
  double v20;
  float64x2_t v21;
  double v22;
  double *v23;
  float64x2_t v24;
  float64x2_t v25;
  double v26;
  BOOL v27;
  float64x2_t v28;
  double v29;
  int64x2_t v30;
  int8x16_t v31;
  int32x4_t v32;
  int8x16_t v33;
  float64x2_t v34[3];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v12 = *((_QWORD *)this + 3);
  v13 = *(_DWORD *)(v12 + 136);
  if (v13 < 0)
  {
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v12 + 40))(*((_QWORD *)this + 3), v12 + 128);
    v13 = *(_DWORD *)(v12 + 136);
  }
  v14 = *(_DWORD *)(v12 + 140);
  if (v13 <= v14)
    v15 = *(_DWORD *)(v12 + 140);
  else
    v15 = v13;
  a4.i32[0] = 1073741822;
  a5.i32[0] = v15;
  v16 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(a5, a4), 0);
  v17 = *(_QWORD *)(v12 + 128);
  v18.i64[0] = (int)v17;
  v18.i64[1] = SHIDWORD(v17);
  v33 = (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL);
  v19 = (float64x2_t)vbslq_s8(v16, v33, (int8x16_t)vcvtq_f64_s64(v18));
  v20 = (double)v14;
  if (v15 <= 1073741822)
    v21.f64[0] = (double)v13;
  else
    v21.f64[0] = 1.79769313e308;
  if (v15 > 1073741822)
    v20 = 1.79769313e308;
  v21.f64[1] = v20;
  v22 = (float)(1.0 / *((float *)this + 60));
  memset(v34, 0, sizeof(v34));
  CA::Render::MeshTransform::apply_volume((CA::Render::MeshTransform *)v34, *((const CA::Rect **)this + 29), a3, *(float64x2_t *)(*(_QWORD *)(*((_QWORD *)this + 2) + 24) + 64), *(int8x16_t *)(*(_QWORD *)(*((_QWORD *)this + 2) + 24) + 80), vmulq_n_f64(v19, v22), vmulq_n_f64(v21, v22), v21.f64[0], a9, a10);
  CA::Volume::apply_transform((CA::Volume *)v34, *((float64x2_t **)this + 10), v23);
  v24 = 0uLL;
  v25 = vsubq_f64(*(float64x2_t *)((char *)&v34[1] + 8), v34[0]);
  if (v25.f64[0] >= v25.f64[1])
    v26 = v25.f64[1];
  else
    v26 = v25.f64[0];
  v27 = v26 <= 0.0;
  v28 = 0uLL;
  if (!v27)
  {
    if (v25.f64[0] <= v25.f64[1])
      v29 = v25.f64[1];
    else
      v29 = v25.f64[0];
    if (v29 >= 1.79769313e308)
    {
      v24 = (float64x2_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
      v28 = (float64x2_t)v33;
    }
    else
    {
      v24 = v25;
      v28 = v34[0];
    }
  }
  v30 = vceqzq_f64(v24);
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v30, 1), (int8x16_t)v30).u64[0] & 0x8000000000000000) != 0
    || (v31 = vorrq_s8((int8x16_t)vcltzq_f64(v24), (int8x16_t)vcgezq_f64(v24)),
        (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v31), 1), v31).u64[0] & 0x8000000000000000) != 0))
  {
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
  }
  else
  {
    v32 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v28, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
    *(int32x4_t *)a2 = vuzp1q_s32(v32, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v28, v24), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v32));
  }
}

void CA::OGL::MeshNode::unmap_bounds(CA::OGL::MeshNode *this, const CA::Transform **a2, uint64_t a3, int32x4_t a4, int32x4_t a5)
{
  int v7;
  int v8;
  int v9;
  int64x2_t v10;
  int8x16_t v11;
  double v12;
  double v13;
  const CA::Rect *v14;
  double v15;
  float64x2_t v16;
  int64x2_t v17;
  int8x16_t v18;
  float64x2_t v19;
  float64x2_t v20;
  int32x4_t v21;
  float64x2_t v22[2];
  float64x2_t v23;
  float64x2_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v7 = *(_DWORD *)(a3 + 8);
  v8 = *(_DWORD *)(a3 + 12);
  if (v7 <= v8)
    v9 = *(_DWORD *)(a3 + 12);
  else
    v9 = *(_DWORD *)(a3 + 8);
  a4.i32[0] = 1073741822;
  a5.i32[0] = v9;
  v10.i64[0] = (int)*(_QWORD *)a3;
  v10.i64[1] = (int)HIDWORD(*(_QWORD *)a3);
  v11 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(a5, a4), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v10));
  v12 = (double)v7;
  v13 = (double)v8;
  if (v9 > 1073741822)
  {
    v12 = 1.79769313e308;
    v13 = 1.79769313e308;
  }
  v23 = (float64x2_t)v11;
  v24.f64[0] = v12;
  v24.f64[1] = v13;
  CA::Rect::unapply_transform((CA::Rect *)&v23, a2[10], (const double *)a3);
  CA::Render::MeshTransform::unapply_rect((CA::Render::MeshTransform *)v22, a2[29], v14, *(float64x2_t *)(*((_QWORD *)a2[2] + 3) + 64), *(float64x2_t *)(*((_QWORD *)a2[2] + 3) + 80), v23, v24);
  v15 = *((float *)a2 + 60);
  v16 = vmulq_n_f64(v22[1], v15);
  v17 = vceqzq_f64(v16);
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v17, 1), (int8x16_t)v17).u64[0] & 0x8000000000000000) != 0
    || (v18 = vorrq_s8((int8x16_t)vcltzq_f64(v16), (int8x16_t)vcgezq_f64(v16)),
        (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v18), 1), v18).u64[0] & 0x8000000000000000) != 0))
  {
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
  }
  else
  {
    v19 = vmulq_n_f64(v22[0], v15);
    v20 = vminnmq_f64(vaddq_f64(v19, v16), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL));
    v21 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v19, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
    *(int32x4_t *)this = vuzp1q_s32(v21, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(v20), (int64x2_t)v21));
  }
}

float64_t CA::Render::MeshTransform::unapply_rect(CA::Render::MeshTransform *this, const CA::Rect *a2, const CA::Rect *a3, float64x2_t a4, float64x2_t a5, float64x2_t a6, float64x2_t a7)
{
  float64x2_t v9;
  double v10;
  float64x2_t v11;
  BOOL v12;
  float64x2_t v13;
  double v14;
  int64x2_t v15;
  int64x2_t v16;
  int64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v26[3];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  CA::Render::MeshTransform::frame((CA::Render::MeshTransform *)v26, (const Rect *)a2, a4, a5);
  v9 = vsubq_f64(*(float64x2_t *)((char *)&v26[1] + 8), v26[0]);
  if (v9.f64[0] >= v9.f64[1])
    v10 = v9.f64[1];
  else
    v10 = v9.f64[0];
  v11 = 0uLL;
  v12 = v10 <= 0.0;
  v13 = 0uLL;
  if (!v12)
  {
    if (v9.f64[0] <= v9.f64[1])
      v14 = v9.f64[1];
    else
      v14 = v9.f64[0];
    if (v14 >= 1.79769313e308)
    {
      v13 = (float64x2_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL);
      v11 = (float64x2_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    }
    else
    {
      v11 = v9;
      v13 = v26[0];
    }
  }
  v15 = vclezq_f64(a7);
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v15, 1), (int8x16_t)v15).u64[0] & 0x8000000000000000) != 0
    || (v16 = vclezq_f64(v11),
        (vorrq_s8((int8x16_t)vdupq_laneq_s64(v16, 1), (int8x16_t)v16).u64[0] & 0x8000000000000000) != 0)
    || (v17 = vclezq_f64(vsubq_f64(vminnmq_f64(vaddq_f64(a6, a7), vaddq_f64(v13, v11)), vmaxnmq_f64(a6, v13))),
        (vorrq_s8((int8x16_t)vdupq_laneq_s64(v17, 1), (int8x16_t)v17).u64[0] & 0x8000000000000000) != 0))
  {
    v18.f64[0] = 0.0;
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
  }
  else
  {
    v18 = *(float64x2_t *)((char *)a2 + 120);
    v19 = *(float64x2_t *)((char *)a2 + 136);
    *(float64x2_t *)this = v18;
    *((float64x2_t *)this + 1) = v19;
    if (*((_DWORD *)a2 + 24))
    {
      v20 = vmlaq_f64(a4, a5, v18);
      v18 = vmulq_f64(v19, a5);
      *(float64x2_t *)this = v20;
      *((float64x2_t *)this + 1) = v18;
    }
  }
  return v18.f64[0];
}

void CA::Render::Updater::MeshOp::map_bounds(CA::Render::Updater::MeshOp *this, CA::Render::Updater::LayerShapes *a2)
{
  const CA::Rect *v4;
  double v5;
  double v6;
  int32x4_t v7;
  uint64_t v8;
  const CA::Bounds *v9;
  float64x2_t v10;
  double v11;
  double v12;
  uint64_t v13;
  float64_t v14;
  float64x2_t v15;
  int64x2_t v16;
  int8x16_t v17;
  int32x4_t v18;
  CA::Shape *v19;
  uint64_t v20;
  _QWORD *v21;
  float64x2_t v22[3];
  CA::Shape *v23[2];
  float64x2_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  memset(v22, 0, sizeof(v22));
  CA::Rect::unapply_transform((double *)a2, *((_QWORD *)this + 3));
  CA::Render::MeshTransform::apply_volume((CA::Render::MeshTransform *)v22, *((const CA::Rect **)this + 4), v4, *(float64x2_t *)((char *)this + 40), *(int8x16_t *)((char *)this + 56), *(float64x2_t *)a2, *((float64x2_t *)a2 + 1), v5, v6, v7);
  v8 = *((_QWORD *)this + 3);
  *(float64x2_t *)v23 = v22[0];
  v24 = vsubq_f64(*(float64x2_t *)((char *)&v22[1] + 8), v22[0]);
  CA::Rect::apply_transform((double *)v23, v8);
  v10 = v24;
  v11 = v24.f64[1];
  if (v24.f64[0] >= v24.f64[1])
    v12 = v24.f64[1];
  else
    v12 = v24.f64[0];
  if (v12 <= 0.0)
  {
    *(_OWORD *)a2 = 0u;
    *((_OWORD *)a2 + 1) = 0u;
  }
  else
  {
    if (v24.f64[0] > v24.f64[1])
      v11 = v24.f64[0];
    if (v11 >= 1.79769313e308)
    {
      *(int64x2_t *)a2 = vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL);
      *((int64x2_t *)a2 + 1) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    }
    else
    {
      *(_OWORD *)a2 = *(_OWORD *)v23;
      *((float64x2_t *)a2 + 1) = v10;
    }
  }
  v13 = *((_QWORD *)a2 + 8);
  v14 = v22[2].f64[1];
  *((_QWORD *)a2 + 4) = *(_QWORD *)&v22[1].f64[0];
  *((float64_t *)a2 + 5) = v14;
  if (v13)
  {
    v15 = *((float64x2_t *)a2 + 1);
    v16 = vceqzq_f64(v15);
    if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v16, 1), (int8x16_t)v16).u64[0] & 0x8000000000000000) != 0
      || (v17 = vorrq_s8((int8x16_t)vcltzq_f64(v15), (int8x16_t)vcgezq_f64(v15)),
          (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v17), 1), v17).u64[0] & 0x8000000000000000) != 0))
    {
      v23[0] = 0;
      v23[1] = 0;
    }
    else
    {
      v18 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(*(float64x2_t *)a2, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
      *(int32x4_t *)v23 = vuzp1q_s32(v18, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(*(float64x2_t *)a2, v15), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v18));
    }
    CA::shape_union((CA::Shape **)a2 + 8, v23, v9);
  }
  v19 = (CA::Shape *)*((_QWORD *)a2 + 7);
  if (v19)
  {
    if ((v19 & 1) != 0)
    {
      if (v19 == (CA::Shape *)1)
        goto LABEL_23;
    }
    else if (*((_DWORD *)v19 + 1) == 6)
    {
      goto LABEL_23;
    }
    CA::Shape::unref(v19);
    *((_QWORD *)a2 + 7) = 1;
  }
LABEL_23:
  v20 = *((_QWORD *)a2 + 6);
  if (v20)
  {
    *(_BYTE *)(v20 + 16) = 1;
    v21 = *(_QWORD **)(v20 + 8);
    if (v21)
    {
      CA::GenericRectTree<CA::Rect>::Pool::delete_node(*(_QWORD *)v20, v21);
      *(_QWORD *)(v20 + 8) = 0;
    }
  }
}

float64_t CA::Render::MeshTransform::apply_volume(CA::Render::MeshTransform *this, const CA::Rect *a2, const CA::Rect *a3, float64x2_t a4, int8x16_t a5, float64x2_t a6, float64x2_t a7, double a8, double a9, int32x4_t a10)
{
  int64x2_t v10;
  int32x4_t v11;
  int8x16_t v12;
  float64x2_t v18;
  int64x2_t v19;
  float64x2_t v20;
  int64x2_t v21;
  float64_t result;

  v10 = vclezq_f64(a7);
  v11 = (int32x4_t)vorrq_s8((int8x16_t)vdupq_laneq_s64(v10, 1), (int8x16_t)v10);
  if ((v11.i64[0] & 0x8000000000000000) == 0)
  {
    v11.i32[0] = 0;
    a10.i32[0] = *((_DWORD *)a2 + 24);
    v12 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(a10, v11), 0);
    __asm { FMOV            V6.2D, #1.0 }
    v18 = vmulq_f64(*(float64x2_t *)((char *)a2 + 136), (float64x2_t)vbslq_s8(v12, _Q6, a5));
    v19 = vclezq_f64(v18);
    if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v19, 1), (int8x16_t)v19).u64[0] & 0x8000000000000000) == 0)
    {
      v20 = (float64x2_t)vbslq_s8(v12, *(int8x16_t *)((char *)a2 + 120), (int8x16_t)vmlaq_f64(a4, (float64x2_t)a5, *(float64x2_t *)((char *)a2 + 120)));
      v21 = vclezq_f64(vsubq_f64(vminnmq_f64(vaddq_f64(a6, a7), vaddq_f64(v20, v18)), vmaxnmq_f64(a6, v20)));
      if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v21, 1), (int8x16_t)v21).u64[0] & 0x8000000000000000) == 0)
        return CA::Render::MeshTransform::frame(this, (const Rect *)a2, a4, (float64x2_t)a5);
    }
  }
  *(_OWORD *)this = CA::Volume::null;
  *((_OWORD *)this + 1) = unk_18475ED70;
  result = -1.0;
  *((_OWORD *)this + 2) = xmmword_18475ED80;
  return result;
}

float64_t CA::Render::MeshTransform::frame(CA::Render::MeshTransform *this, const Rect *a2, float64x2_t a3, float64x2_t a4)
{
  __int128 v4;
  int v5;
  double v6;
  double v7;
  double v8;

  v4 = *(_OWORD *)&a2[21].top;
  *(_OWORD *)this = *(_OWORD *)&a2[19].top;
  *((_OWORD *)this + 1) = v4;
  *((_OWORD *)this + 2) = *(_OWORD *)&a2[23].top;
  v5 = *(_DWORD *)&a2[12].top;
  if (v5)
  {
    *(float64x2_t *)this = vmlaq_f64(a3, a4, *(float64x2_t *)this);
    *(float64x2_t *)((char *)this + 24) = vmlaq_f64(a3, a4, *(float64x2_t *)((char *)this + 24));
    switch(v5)
    {
      case 2:
        v6 = 0.5 * a4.f64[0];
        break;
      case 3:
        v6 = vmuld_lane_f64(0.5, a4, 1);
        break;
      case 4:
        v7 = a4.f64[1];
        if (a4.f64[0] < a4.f64[1])
          v7 = a4.f64[0];
        goto LABEL_11;
      case 5:
        v7 = a4.f64[1];
        if (a4.f64[0] > a4.f64[1])
          v7 = a4.f64[0];
LABEL_11:
        v8 = 0.5;
        goto LABEL_13;
      case 6:
        v7 = vaddvq_f64(a4);
        v8 = 0.25;
LABEL_13:
        v6 = v7 * v8;
        break;
      default:
        v6 = 0.5;
        break;
    }
    *((double *)this + 2) = *((double *)this + 2) * v6;
    a3.f64[0] = *((double *)this + 5) * v6;
    *((_QWORD *)this + 5) = *(_QWORD *)&a3.f64[0];
  }
  return a3.f64[0];
}

void CA::OGL::ShadowNode::map_bounds(CA::OGL::ShadowNode *this, CA::Bounds *a2, uint64_t a3, int a4, int32x4_t a5, int32x4_t a6)
{
  int v10;
  int v11;
  int v12;
  int64x2_t v13;
  int8x16_t v14;
  double v15;
  double v16;
  float *v17;
  double *v18;
  float v19;
  float v20;
  float32x2_t v21;
  int64x2_t v22;
  int8x16_t v23;
  int32x4_t v24;
  float64x2_t v25;
  float64x2_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v10 = *(_DWORD *)(a3 + 8);
  v11 = *(_DWORD *)(a3 + 12);
  if (v10 <= v11)
    v12 = *(_DWORD *)(a3 + 12);
  else
    v12 = *(_DWORD *)(a3 + 8);
  a5.i32[0] = 1073741822;
  a6.i32[0] = v12;
  v13.i64[0] = (int)*(_QWORD *)a3;
  v13.i64[1] = (int)HIDWORD(*(_QWORD *)a3);
  v14 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(a6, a5), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v13));
  v15 = (double)v10;
  if (v12 > 1073741822)
    v15 = 1.79769313e308;
  v25 = (float64x2_t)v14;
  if (v12 <= 1073741822)
    v16 = (double)v11;
  else
    v16 = 1.79769313e308;
  v26.f64[0] = v15;
  v26.f64[1] = v16;
  CA::Rect::unapply_transform((CA::Rect *)&v25, a2, (const double *)a3);
  v17 = (float *)*((_QWORD *)this + 16);
  if (v17)
  {
    CA::BoundsImpl::inset(v25.f64, v17[56] * -2.8, v17[56] * -2.8);
    v19 = 1.0;
    if (!a4)
      v19 = -1.0;
    v20 = v17[55];
    v21.f32[0] = v17[54] * v19;
  }
  else
  {
    CA::BoundsImpl::inset(v25.f64, -8.4, -8.4);
    v19 = 1.0;
    if (!a4)
      v19 = -1.0;
    v21.f32[0] = v19 * 0.0;
    v20 = -3.0;
  }
  v21.f32[1] = v20 * v19;
  v25 = vaddq_f64(v25, vcvtq_f64_f32(v21));
  CA::Rect::apply_transform((int8x16_t *)&v25, a2, v18);
  v22 = vceqzq_f64(v26);
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v22, 1), (int8x16_t)v22).u64[0] & 0x8000000000000000) != 0
    || (v23 = vorrq_s8((int8x16_t)vcltzq_f64(v26), (int8x16_t)vcgezq_f64(v26)),
        (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v23), 1), v23).u64[0] & 0x8000000000000000) != 0))
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
  }
  else
  {
    v24 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v25, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
    *(int32x4_t *)a3 = vuzp1q_s32(v24, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v25, v26), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v24));
  }
}

uint64_t CA::OGL::FilterNode::propagate_roi(CA::OGL::FilterNode *this, int32x4_t *a2, double a3, int64x2_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const double *v11;
  int32x4_t v12;
  int32x4_t v13;
  int v14;
  int v15;
  int32x2_t v17;
  int32x4_t v18;
  int v19;
  int v20;
  int v21;
  int64x2_t v22;
  int8x16_t v23;
  double v24;
  double v25;
  double v26;
  double *v27;
  int64x2_t v28;
  int8x16_t v29;
  int8x16_t *v30;
  int8x16_t v31;
  int v32;
  int v33;
  int8x16_t v35;
  unsigned int v37;
  uint32x2_t v38;
  int32x2_t v39;
  uint32x2_t v40;
  int32x2_t v41;
  int32x2_t v42;
  uint32x2_t v43;
  char v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int16 v50;
  uint64_t result;
  uint64_t v52;
  int8x16_t v53;
  float64x2_t v54;
  float64x2_t v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)this + 1);
  v53 = 0uLL;
  v7 = *((_QWORD *)this + 29);
  v8 = *(_QWORD *)(v7 + 16);
  if (!v8)
  {
    if (!*(_QWORD *)(v7 + 48))
      goto LABEL_28;
    v18 = *a2;
LABEL_26:
    v53 = (int8x16_t)v18;
    goto LABEL_28;
  }
  v9 = *(_QWORD *)(v8 + 48);
  if (v9)
  {
    v10 = *((_QWORD *)this + 2);
    if (!(*(unsigned int (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)v9 + 16))(*(_QWORD *)(v8 + 48), v8, *(_QWORD *)(v10 + 24)))
    {
      v19 = a2->i32[2];
      v20 = a2->i32[3];
      if (v19 <= v20)
        v21 = a2->i32[3];
      else
        v21 = a2->i32[2];
      v12.i32[0] = 1073741822;
      a4.i32[0] = v21;
      v22.i64[0] = (int)a2->i64[0];
      v22.i64[1] = (int)HIDWORD(a2->i64[0]);
      v23 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32((int32x4_t)a4, v12), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v22));
      v24 = (double)v19;
      v25 = (double)v20;
      if (v21 > 1073741822)
      {
        v24 = 1.79769313e308;
        v25 = 1.79769313e308;
      }
      v54 = (float64x2_t)v23;
      v55.f64[0] = v24;
      v55.f64[1] = v25;
      v26 = CA::Rect::unapply_transform((CA::Rect *)&v54, *((const CA::Transform **)this + 10), v11);
      (*(void (**)(uint64_t, uint64_t, _QWORD, float64x2_t *, double))(*(_QWORD *)v9 + 64))(v9, v8, *(_QWORD *)(v10 + 24), &v54, v26);
      CA::Rect::apply_transform((int8x16_t *)&v54, *((const CA::Transform **)this + 10), v27);
      v28 = vceqzq_f64(v55);
      a4 = (int64x2_t)vorrq_s8((int8x16_t)vdupq_laneq_s64(v28, 1), (int8x16_t)v28);
      if (a4.i64[0] < 0
        || (v29 = vorrq_s8((int8x16_t)vcltzq_f64(v55), (int8x16_t)vcgezq_f64(v55)),
            a4 = (int64x2_t)vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v29), 1), v29),
            a4.i64[0] < 0))
      {
        v53 = 0uLL;
        goto LABEL_28;
      }
      a4 = vcvtmq_s64_f64(vmaxnmq_f64(v54, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
      v18 = vuzp1q_s32((int32x4_t)a4, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v54, v55), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), a4));
      goto LABEL_26;
    }
  }
  v13 = *a2;
  v53 = *(int8x16_t *)a2;
  if (*(_DWORD *)(v8 + 24) == 23)
  {
    v14 = v13.i32[2];
    if (v13.i32[2] <= v13.i32[3])
      v15 = v13.i32[3];
    else
      v15 = v13.i32[2];
    if (v13.i32[2] >= v13.i32[3])
      v14 = v13.i32[3];
    if (v15 <= 1073741822 && v14 >= 1)
    {
      a4.i64[1] = 0x200000002;
      v53 = (int8x16_t)vaddq_s32(v13, (int32x4_t)xmmword_18474E100);
      v17 = vcgt_s32((int32x2_t)0x100000001, vrev64_s32((int32x2_t)*(_OWORD *)&vextq_s8(v53, v53, 8uLL)));
      if (((v17.i32[1] | v17.i32[0]) & 1) != 0)
        v53.i64[1] = 0;
    }
  }
LABEL_28:
  v30 = *(int8x16_t **)(*((_QWORD *)this + 1) + 8);
  if (v30 && (*((_WORD *)this + 62) & 0x100) != 0)
  {
    v31 = v30[12];
    v32 = v30[12].i64[1];
    if (v31.i32[2] <= v31.i32[3])
      v33 = v31.i32[3];
    else
      v33 = v32;
    if (v31.i32[2] >= v31.i32[3])
      v32 = v31.i32[3];
    if (v33 <= 1073741822 && v32 >= 1)
    {
      *(int32x2_t *)a4.i8 = vadd_s32(*(int32x2_t *)v31.i8, (int32x2_t)0x100000001);
      v35.i64[0] = a4.i64[0];
      v35.u64[1] = (unint64_t)vadd_s32((int32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL), (int32x2_t)0x40000000400);
      if (v35.i32[3] < 1 || v35.i32[2] < 1)
        v37 = -1;
      else
        v37 = 0;
      v31 = vbslq_s8((int8x16_t)vdupq_n_s32(v37), (int8x16_t)a4, v35);
    }
    v38 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, (int32x2_t)v53.u64[1]);
    if ((vpmax_u32(v38, v38).u32[0] & 0x80000000) == 0)
    {
      v39 = (int32x2_t)vextq_s8(v31, v31, 8uLL).u64[0];
      v40 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v39);
      if ((vpmax_u32(v40, v40).u32[0] & 0x80000000) != 0
        || (v41 = vadd_s32(*(int32x2_t *)v31.i8, v39),
            *(int32x2_t *)v31.i8 = vmax_s32(*(int32x2_t *)v53.i8, *(int32x2_t *)v31.i8),
            v42 = vsub_s32(vmin_s32(vadd_s32(*(int32x2_t *)v53.i8, (int32x2_t)v53.u64[1]), v41), *(int32x2_t *)v31.i8),
            v43 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v42),
            (vpmax_u32(v43, v43).u32[0] & 0x80000000) != 0))
      {
        v53.i64[1] = 0;
      }
      else
      {
        v31.u64[1] = (unint64_t)v42;
        v53 = v31;
      }
    }
  }
  (*(void (**)(_QWORD, int8x16_t *))(**((_QWORD **)this + 3) + 56))(*((_QWORD *)this + 3), &v53);
  v44 = CA::OGL::filter_flags(*((_QWORD *)this + 29), *((_QWORD *)this + 2));
  v45 = v44;
  if ((v44 & 1) == 0)
  {
    if ((v44 & 2) == 0)
      goto LABEL_53;
LABEL_71:
    *(_DWORD *)(*((_QWORD *)this + 3) + 220) |= 0x1000000u;
    if ((v44 & 0x20) == 0)
      goto LABEL_55;
    goto LABEL_54;
  }
  *(_WORD *)(*((_QWORD *)this + 3) + 212) |= 0x200u;
  if ((v44 & 2) != 0)
    goto LABEL_71;
LABEL_53:
  if ((v44 & 0x20) != 0)
LABEL_54:
    *(_DWORD *)(*((_QWORD *)this + 3) + 216) |= 0x40040u;
LABEL_55:
  v46 = *((_QWORD *)this + 3);
  v47 = *(_QWORD *)(*((_QWORD *)this + 29) + 16);
  if (v47
    && (v48 = *(_QWORD *)(v47 + 48)) != 0
    && (v49 = *((_QWORD *)this + 2),
        (*(unsigned int (**)(_QWORD))(*(_QWORD *)v48 + 72))(*(_QWORD *)(v47 + 48))))
  {
    v50 = ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v48 + 120))(v48, v6, v47, v49) & 0xF) << 10;
  }
  else
  {
    v50 = 0;
  }
  *(_WORD *)(v46 + 212) = v50 | *(_WORD *)(v46 + 212) & 0xC3FF;
  result = *((_QWORD *)this + 29);
  if (*(_QWORD *)(result + 8))
    *((_DWORD *)this + 54) |= 0x4000u;
  if ((v45 & 4) != 0)
    *((_DWORD *)this + 55) |= 0x2000000u;
  v52 = *((_QWORD *)this + 3);
  if ((*(_BYTE *)(v52 + 222) & 0x10) == 0)
  {
    result = CA::OGL::can_filter_in_place((_QWORD *)result);
    if ((_DWORD)result)
      *(_DWORD *)(v52 + 216) |= 0x800u;
  }
  if ((*((_BYTE *)this + 224) & 1) != 0)
    *((_DWORD *)this + 55) |= 0x400000u;
  return result;
}

uint64_t CA::OGL::QuadNode::propagate_roi(const CA::Transform **this, const CA::Bounds *a2, const double *a3, int32x4_t a4, int32x4_t a5)
{
  int v6;
  int v7;
  int v8;
  int64x2_t v9;
  int8x16_t v10;
  double v11;
  double v12;
  int64x2_t v13;
  int8x16_t v14;
  int32x4_t v15;
  uint64_t result;
  int32x4_t v17;
  float64x2_t v18;
  float64x2_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v6 = *((_DWORD *)a2 + 2);
  v7 = *((_DWORD *)a2 + 3);
  if (v6 <= v7)
    v8 = *((_DWORD *)a2 + 3);
  else
    v8 = *((_DWORD *)a2 + 2);
  a4.i32[0] = 1073741822;
  a5.i32[0] = v8;
  v9.i64[0] = (int)*(_QWORD *)a2;
  v9.i64[1] = (int)HIDWORD(*(_QWORD *)a2);
  v10 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(a5, a4), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v9));
  v11 = (double)v6;
  v12 = (double)v7;
  if (v8 > 1073741822)
  {
    v11 = 1.79769313e308;
    v12 = 1.79769313e308;
  }
  v18 = (float64x2_t)v10;
  v19.f64[0] = v11;
  v19.f64[1] = v12;
  CA::Rect::unapply_transform((CA::Rect *)&v18, this[10], a3);
  v13 = vceqzq_f64(v19);
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v13, 1), (int8x16_t)v13).u64[0] & 0x8000000000000000) != 0
    || (v14 = vorrq_s8((int8x16_t)vcltzq_f64(v19), (int8x16_t)vcgezq_f64(v19)),
        (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v14), 1), v14).u64[0] & 0x8000000000000000) != 0))
  {
    v17 = 0uLL;
  }
  else
  {
    v15 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v18, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
    v17 = vuzp1q_s32(v15, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v18, v19), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v15));
  }
  result = (*(uint64_t (**)(const CA::Transform *, int32x4_t *))(*(_QWORD *)this[3] + 56))(this[3], &v17);
  *((_WORD *)this[3] + 106) |= 0x200u;
  if (((_WORD)this[28] & 0xF) == 2)
    *((_DWORD *)this[3] + 54) |= 0x40u;
  return result;
}

void CA::OGL::MaskCorners::begin(float32x2_t *this, CA::OGL::ImagingNode *a2, double *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  float64x2_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float64x2_t v24;
  float64x2_t v25;
  int v26;
  int8x16_t *v27;
  int8x16_t v28;
  const double *v29;
  uint64_t v30;
  int32x2_t *v31;
  uint32x2_t v32;
  int32x2_t v33;
  uint32x2_t v34;
  int32x2_t v35;
  int32x2_t v36;
  uint32x2_t v37;
  float64x2_t *v38;
  uint64_t v39;
  uint64_t v40;
  float v41;
  int32x2_t v42;
  __int8 v43;
  double v44;
  unint64_t v45;
  int v46;
  double v47;
  int8x16_t v48;
  int8x16_t v50;
  int8x16_t v51;
  float64x2_t v52;
  int8x16_t v54;
  float64x2_t v55;
  double v56;
  double v57;
  uint64_t v58;
  float64x2_t v59;
  float64x2_t v60;
  int32x4_t v61;
  int32x4_t v62;
  float32x2_t v63;
  double v65;
  double v66;
  float32x2_t v67;
  uint64_t v68;
  int v69;
  int32x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  uint32x2_t v74;
  unsigned __int32 v75;
  uint32x2_t v76;
  int32x2_t v77;
  double v78;
  int32x2_t *v79;
  float64x2_t v80;
  unsigned __int32 v81;
  double v82;
  float v83;
  double v84;
  float v85;
  float32x2_t v86;
  int32x2_t v87;
  uint32x2_t v88;
  _BOOL4 v89;
  unsigned int v90;
  int v91;
  double v92;
  int64x2_t v93;
  int8x16_t v94;
  double v95;
  double v96;
  float64x2_t v97;
  uint64_t v98;
  int8x16_t v99;
  int8x16_t v100;
  int64x2_t v101;
  int64x2_t v102;
  float64x2_t v103;
  int8x16_t v104;
  int64x2_t v105;
  unint64_t v106;
  int64x2_t v107;
  float64x2_t v108;
  int32x2_t v109;
  int8x16_t v110;
  int8x16_t v111;
  double v112;
  float64x2_t v113;
  float64x2_t v114;
  int8x16_t v115;
  int8x16_t v116;
  int64x2_t v117;
  int8x16_t v118;
  uint64_t v119;
  float64x2_t v120;
  __int128 v121;
  float64x2_t v122;
  int v123;
  float64x2_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  int v128;
  float64x2_t *v129;
  float32x2_t v130;
  _QWORD *v131;
  float64x2_t v132;
  int8x16_t v133;
  float64x2_t v134;
  double v135;
  __int32 v136;
  _QWORD v137[2];
  int32x2_t v138;
  int32x2_t v139;
  int8x16_t v140[2];
  float64x2_t v141;
  __int128 v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  int8x16_t v146;
  uint64_t v147;

  v147 = *MEMORY[0x1E0C80C00];
  v5 = **((_QWORD **)a2 + 1);
  this[24] = 0;
  v6 = *(_QWORD *)(v5 + 248);
  if (v6)
    LOBYTE(v6) = 4 * ((*(_WORD *)(v6 + 75) & 0x60) != 0);
  this[30].i8[4] = this[30].i8[4] & 0xFB | v6;
  v7 = *((_QWORD *)a2 + 2);
  v8 = *(_QWORD *)(v7 + 24);
  v9 = *(_WORD *)(v8 + 38) & 0xF;
  this[25] = 0;
  this[30].i32[0] = 54;
  v10 = *(_QWORD **)(v8 + 128);
  if (!v10)
    goto LABEL_17;
  v11 = v10[7];
  if (!v11)
    goto LABEL_14;
  this[25] = (float32x2_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 80))(v11);
  v10 = *(_QWORD **)(*(_QWORD *)(v7 + 24) + 128);
  __asm { FMOV            V1.2D, #0.5 }
  v16 = 0uLL;
  if (v10)
  {
    v17 = v10[8];
    if (v17)
    {
      _Q1 = 0uLL;
      if (*(_DWORD *)(v17 + 16) >= 4u)
      {
        _Q1 = *(float64x2_t *)(v17 + 24);
        v16 = vsubq_f64(*(float64x2_t *)(v17 + 40), _Q1);
      }
    }
  }
  *(float64x2_t *)this[26].f32 = _Q1;
  *(float64x2_t *)this[28].f32 = v16;
  if ((*(_BYTE *)(v5 + 416) & 2) != 0)
    this[30].i32[0] ^= 0x800u;
  if ((*(_BYTE *)(*(_QWORD *)(v7 + 16) + 24) & 1) != 0)
    this[30].i32[0] ^= 0x800u;
  if (v10)
  {
LABEL_14:
    v18 = v10[9];
    this[30].i8[4] = this[30].i8[4] & 0xF7 | (8 * (v18 != 0));
    if (v18)
    {
      v19 = *(_QWORD *)(*(_QWORD *)(v7 + 24) + 128);
      CA::Render::Layer::max_corner_radii(v19);
      if (v19)
        v21 = *(_QWORD *)(v19 + 72);
      else
        v21 = 0;
      v22 = 0;
      v9 = 0;
      v23 = v21 + 24;
      v24 = (float64x2_t)vdupq_lane_s64(v20, 0);
      do
      {
        v25 = *(float64x2_t *)(v23 + 16 * dword_18474EA20[v22]);
        this[v22 + 9] = vcvt_f32_f64(vdivq_f64(v24, v25));
        v26 = v25.f64[0] != 0.0;
        if (v25.f64[1] == 0.0)
          v26 = 0;
        v9 |= v26 << v22++;
      }
      while (v22 != 4);
    }
  }
  else
  {
LABEL_17:
    this[30].i8[4] &= ~8u;
  }
  if (v9)
  {
    this[30].i8[4] = this[30].i8[4] & 0xFC | *(_BYTE *)(*(_QWORD *)(v7 + 24) + 40) & 3;
    v27 = *(int8x16_t **)(v7 + 24);
    v28 = v27[5];
    v140[0] = v27[4];
    v140[1] = v28;
    CA::Rect::apply_transform(v140, *((const CA::Transform **)a2 + 10), a3);
    v138 = 0;
    v139 = 0;
    CA::Shape::get_bounds(*(_QWORD *)(*(_QWORD *)(v5 + 232) + 8), (int *)&v138);
    v30 = *(_QWORD *)(v5 + 248);
    v31 = (int32x2_t *)(v30 ? v30 + 32 : v5 + 184);
    v32 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v139);
    if ((vpmax_u32(v32, v32).u32[0] & 0x80000000) == 0)
    {
      v33 = v31[1];
      v34 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v33);
      if ((vpmax_u32(v34, v34).u32[0] & 0x80000000) == 0)
      {
        v35 = vmax_s32(v138, *v31);
        v36 = vsub_s32(vmin_s32(vadd_s32(v138, v139), vadd_s32(*v31, v33)), v35);
        v37 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v36);
        if ((vpmax_u32(v37, v37).u32[0] & 0x80000000) == 0)
        {
          v38 = (float64x2_t *)*((_QWORD *)a2 + 10);
          v39 = *(_QWORD *)(v7 + 24);
          v40 = *(_QWORD *)(v39 + 128);
          v41 = 0.0;
          if (v40)
            v41 = *(float *)(v40 + 228);
          v42 = v36;
          v43 = this[30].i8[4];
          if ((v43 & 8) != 0)
          {
            v136 = v36.i32[1];
            CA::Render::Layer::max_corner_radii(v40);
            v36.i32[1] = v136;
          }
          else
          {
            v44 = v41;
          }
          v45 = 0;
          v46 = v36.i32[1];
          if ((v43 & 3) != 0)
            v47 = v44 * 1.528665;
          else
            v47 = v44;
          v48 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&v47, 0);
          __asm { FMOV            V2.2D, #1.0 }
          v62 = (int32x4_t)vdivq_f64((float64x2_t)_Q2, (float64x2_t)v48);
          v50 = (int8x16_t)vmlaq_f64((float64x2_t)vdupq_n_s64(0x400721E8A7A4B61BuLL), (float64x2_t)v62, vmulq_f64(*(float64x2_t *)(v39 + 80), (float64x2_t)vdupq_n_s64(0xBFF721E8A7A4B61BLL)));
          v51 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v50, (float64x2_t)_Q2), _Q2, v50);
          this[21] = vcvt_f32_f64((float64x2_t)vbicq_s8(v51, (int8x16_t)vcltzq_f64((float64x2_t)v51)));
          v52 = *(float64x2_t *)(v39 + 80);
          __asm { FMOV            V0.2D, #0.5 }
          v54 = (int8x16_t)vmlaq_f64(_Q0, _Q0, v52);
          v55 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v54, (float64x2_t)v48), v48, v54);
          this[22] = vcvt_f32_f64(vmulq_f64(v55, (float64x2_t)v62));
          *(float *)v54.i32 = 1.0 / v38[7].f64[1];
          *(float *)v50.i32 = v55.f64[0];
          v56 = *(float *)v50.i32;
          *(float *)v50.i32 = v55.f64[1];
          v57 = *(float *)v50.i32;
          *(double *)&v58 = *(float *)v54.i32;
          v59 = *v38;
          v60 = v38[2];
          v61 = (int32x4_t)vdupq_lane_s64(v58, 0);
          *(int32x2_t *)v62.i8 = vdup_n_s32(0x7F800000u);
          v63 = (float32x2_t)0x7F0000007FLL;
          do
          {
            if (v45 == 3 || v45 == 0)
              v65 = 0.0;
            else
              v65 = v56;
            if (v45 >= 2)
              v66 = v57;
            else
              v66 = 0.0;
            v67 = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmulq_n_f64(v59, v65), v60, v66), *(double *)&v58));
            this[v45 + 1] = v67;
            *(int8x8_t *)v62.i8 = vbsl_s8((int8x8_t)vcgt_f32(v67, *(float32x2_t *)v62.i8), *(int8x8_t *)v62.i8, (int8x8_t)v67);
            v63 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v63, v67), (int8x8_t)v63, (int8x8_t)v67);
            ++v45;
          }
          while (v45 != 4);
          v68 = 0;
          v69 = 0;
          v70 = vsub_s32(vcvt_s32_f32(vrndp_f32(v63)), vcvt_s32_f32(vrndm_f32(*(float32x2_t *)v62.i8)));
          *this = (float32x2_t)v70;
          v71 = *(float64x2_t *)(v39 + 64);
          v72 = vsubq_f64(v71, v55);
          v55.f64[0] = *(float64_t *)(v39 + 72);
          v73 = v38[6];
          v74 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v70);
          v75 = vpmax_u32(v74, v74).u32[0];
          v76 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v42);
          v77 = vadd_s32(v35, v42);
          *(_QWORD *)&v78 = *(_OWORD *)&vaddq_f64(v72, v52);
          v79 = (int32x2_t *)&this[14];
          v80 = vnegq_f64(vcvtq_f64_f32(this[1]));
          v81 = vpmax_u32(v76, v76).u32[0];
          do
          {
            if ((v68 & 1) != 0)
              v82 = v78;
            else
              v82 = v71.f64[0];
            v83 = v82;
            if ((v68 & 2) != 0)
              v84 = v55.f64[0] - v55.f64[1] + v52.f64[1];
            else
              v84 = v55.f64[0];
            v85 = v84;
            v86 = vcvt_f32_f64(vmlaq_f64(v80, (float64x2_t)v61, vmlaq_n_f64(vmlaq_n_f64(v73, v59, v83), v60, v85)));
            this[v68 + 5] = v86;
            v87 = vcvt_s32_f32(vrndm_f32(vadd_f32(*(float32x2_t *)v62.i8, v86)));
            v79[-1] = v87;
            *v79 = v70;
            if ((v75 & 0x80000000) != 0 || (v81 & 0x80000000) != 0)
            {
              v89 = 0;
            }
            else
            {
              v88 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, vsub_s32(vmin_s32(vadd_s32(v70, v87), v77), vmax_s32(v87, v35)));
              v89 = vpmax_u32(v88, v88).i32[0] >= 0;
            }
            v90 = (~v9 >> v68) & 1 | !v89;
            this[23].i8[v68] = v90;
            v69 += v90;
            ++v68;
            v79 += 2;
          }
          while (v68 != 4);
          if (v69 != 4)
          {
            if (this[25])
              goto LABEL_88;
            if (v42.i32[0] <= v46)
              v91 = v46;
            else
              v91 = v42.i32[0];
            v61.i32[0] = 1073741822;
            v62.i32[0] = v91;
            v92 = v47 * v47 * 0.9;
            v93.i64[0] = v35.i32[0];
            v93.i64[1] = v35.i32[1];
            v94 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v62, v61), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v93));
            v95 = (double)v42.i32[0];
            if (v91 > 1073741822)
              v95 = 1.79769313e308;
            v145 = (float64x2_t)v94;
            v96 = v91 <= 1073741822 ? (double)v46 : 1.79769313e308;
            *(double *)v146.i64 = v95;
            *(double *)&v146.i64[1] = v96;
            v134 = (float64x2_t)v48;
            v135 = v47;
            v132 = v52;
            v133 = (int8x16_t)v71;
            CA::Rect::unapply_transform((CA::Rect *)&v145, (const CA::Transform *)v38, v29);
            v98 = 0;
            v99 = (int8x16_t)v145;
            v100 = v146;
            v101 = vclezq_f64((float64x2_t)v146);
            v102 = (int64x2_t)vorrq_s8((int8x16_t)vdupq_laneq_s64(v101, 1), (int8x16_t)v101);
            v103 = vaddq_f64(v145, (float64x2_t)v146);
            v104 = (int8x16_t)vaddq_f64(vsubq_f64((float64x2_t)v133, v134), v132);
            v105 = vclezq_f64(v134);
            v106 = vorrq_s8((int8x16_t)vdupq_laneq_s64(v105, 1), (int8x16_t)v105).u64[0];
            v107.i64[0] = -1;
            do
            {
              if (!this[23].i8[v98])
              {
                v97.f64[0] = 0.0;
                v108 = (float64x2_t)vandq_s8(v100, (int8x16_t)vdupq_lane_s64(vcgtq_s64((int64x2_t)v97, v102).i64[0], 0));
                v109 = vceqz_s32((int32x2_t)vand_s8((int8x8_t)vdup_n_s32(v98), (int8x8_t)0x200000001));
                v110.i64[0] = v109.i32[0];
                v110.i64[1] = v109.i32[1];
                v111 = v110;
                if ((v109.i8[4] & 1) != 0)
                  v112 = v135;
                else
                  v112 = 0.0;
                v113 = vcvtq_f64_f32(vcvt_f32_f64((float64x2_t)vbslq_s8(v111, v133, v104)));
                v114 = (float64x2_t)v99;
                if ((v102.i64[0] & 0x8000000000000000) == 0 && (v106 & 0x8000000000000000) == 0)
                {
                  v115 = (int8x16_t)vmaxnmq_f64((float64x2_t)v99, v113);
                  v116 = (int8x16_t)vsubq_f64(vminnmq_f64(v103, vaddq_f64(v134, v113)), (float64x2_t)v115);
                  v117 = vclezq_f64((float64x2_t)v116);
                  v118 = (int8x16_t)vdupq_lane_s64(vcgtq_s64((int64x2_t)vorrq_s8((int8x16_t)vdupq_laneq_s64(v117, 1), (int8x16_t)v117), v107).i64[0], 0);
                  v114 = (float64x2_t)vbslq_s8(v118, v115, v99);
                  v108 = (float64x2_t)vandq_s8(v116, v118);
                }
                v119 = 0;
                v120 = vaddq_f64(v108, v114);
                *(float64_t *)&v121 = v120.f64[0];
                *((_QWORD *)&v121 + 1) = *(_QWORD *)&v114.f64[1];
                v141 = v114;
                v142 = v121;
                v114.f64[1] = v120.f64[1];
                v143 = v120;
                v144 = v114;
                if ((v109.i8[0] & 1) != 0)
                  v122.f64[0] = v135;
                else
                  v122.f64[0] = 0.0;
                v122.f64[1] = v112;
                v97 = vaddq_f64(v122, v113);
                LOBYTE(v123) = 1;
                do
                {
                  v124 = vsubq_f64(*(float64x2_t *)((char *)&v141 + v119), v97);
                  v123 = v123 & (vaddvq_f64(vmulq_f64(v124, v124)) < v92);
                  v119 += 16;
                }
                while (v119 != 64);
                this[23].i8[v98] = v123;
                v69 += v123;
              }
              ++v98;
            }
            while (v98 != 4);
            if (v69 != 4)
            {
LABEL_88:
              v137[0] = 0;
              v137[1] = vadd_s32(vadd_s32(v70, v70), (int32x2_t)0x400000004);
              if ((this[30].i8[4] & 4) != 0
                || ((*((_BYTE *)a2 + 222) & 0x10) != 0
                  ? ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 184))(v5, 36)
                   ? (v125 = 20495)
                   : (v125 = 4111))
                  : (v125 = 6159),
                    v126 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 656))(v5, 1, v137, v125), (this[24] = (float32x2_t)v126) != 0))
              {
                v127 = 0;
                v128 = 0;
                v143 = 0u;
                v144 = 0u;
                v141 = 0u;
                v142 = 0u;
                v145 = 0u;
                v146 = 0u;
                do
                {
                  if (!this[23].i8[v127])
                  {
                    v129 = &v141 + v128;
                    *v129 = *(float64x2_t *)this[2 * v127 + 13].f32;
                    CA::BoundsImpl::inset(v129, -1, -1);
                    v130 = this[24];
                    if (*(_QWORD *)&v130 && (*(_BYTE *)(*(_QWORD *)&v130 + 69) & 8) != 0)
                    {
                      v145.f64[v128] = v129->f64[0];
                    }
                    else
                    {
                      v131 = (_QWORD *)&v145.f64[v128];
                      *v131 = 0;
                      if ((v127 & 1) != 0)
                        *(_DWORD *)v131 = this->i32[0] + 2;
                      if (v127 >= 2)
                        *((_DWORD *)v145.f64 + ((2 * v128) | 1)) = this->i32[1] + 2;
                    }
                    ++v128;
                  }
                  ++v127;
                }
                while (v127 != 4);
                if (v128)
                {
                  if ((this[30].i8[4] & 4) == 0)
                    (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, float64x2_t *, float64x2_t *, char *))(*(_QWORD *)v5 + 712))(v5, 0, *(_QWORD *)&this[24], v128, &v141, &v145, (char *)&this[30] + 5);
                }
              }
            }
          }
        }
      }
    }
  }
}

_DWORD *CA::BoundsImpl::inset(_DWORD *result, int a2, int a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v8;
  int v9;
  int v10;

  v4 = result[2];
  v3 = result[3];
  if (v4 <= v3)
    v5 = result[3];
  else
    v5 = result[2];
  if (v4 >= v3)
    v6 = result[3];
  else
    v6 = result[2];
  if (v5 <= 1073741822 && v6 >= 1)
  {
    v8 = result[1] + a3;
    *result += a2;
    result[1] = v8;
    v9 = v4 - 2 * a2;
    v10 = v3 - 2 * a3;
    result[2] = v9;
    result[3] = v10;
    if (v9 < 1 || v10 <= 0)
      *((_QWORD *)result + 1) = 0;
  }
  return result;
}

double CA::Rect::unapply_transform(CA::Rect *this, const CA::Transform *a2, const double *a3)
{
  double result;
  double v4;
  double v5;
  double v7;
  double v8;
  double v9;
  char v10;
  double v11;
  double v12;
  double *v13;
  float64x2_t v14[8];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v4 = *((double *)this + 2);
  result = *((double *)this + 3);
  if (v4 <= result)
    v5 = *((double *)this + 3);
  else
    v5 = *((double *)this + 2);
  if (v5 < 1.79769313e308)
  {
    if ((*((_BYTE *)a2 + 144) & 0x10) != 0)
    {
      CA::Mat4Impl::mat4_invert((CA::Mat4Impl *)v14, a2, a3);
      CA::Mat4Impl::mat4_unapply_inverse_to_rect(v14, (int8x16_t *)this, v13);
      return result;
    }
    v7 = *((double *)this + 1);
    v8 = *(double *)this - *((double *)a2 + 12);
    *(double *)this = v8;
    v9 = v7 - *((double *)a2 + 13);
    *((double *)this + 1) = v9;
    v10 = *((_BYTE *)a2 + 144);
    if ((v10 & 1) != 0)
    {
      v9 = -(v9 + result);
      *((double *)this + 1) = v9;
      v10 = *((_BYTE *)a2 + 144);
      if ((v10 & 2) == 0)
      {
LABEL_8:
        if ((v10 & 4) == 0)
          goto LABEL_9;
        goto LABEL_14;
      }
    }
    else if ((*((_BYTE *)a2 + 144) & 2) == 0)
    {
      goto LABEL_8;
    }
    v8 = -(v8 + v4);
    *(double *)this = v8;
    v10 = *((_BYTE *)a2 + 144);
    if ((v10 & 4) == 0)
    {
LABEL_9:
      v11 = result;
      result = v4;
      v12 = v9;
      v9 = v8;
      if ((v10 & 8) == 0)
        return result;
LABEL_15:
      *(double *)this = v9 * *((double *)a2 + 17);
      *((double *)this + 1) = v12 * *((double *)a2 + 17);
      *((double *)this + 2) = result * *((double *)a2 + 17);
      result = v11 * *((double *)a2 + 17);
      *((double *)this + 3) = result;
      return result;
    }
LABEL_14:
    v12 = -(v8 + v4);
    *(double *)this = v9;
    *((double *)this + 1) = v12;
    *((double *)this + 2) = result;
    *((double *)this + 3) = v4;
    v11 = v4;
    if ((*((_BYTE *)a2 + 144) & 8) == 0)
      return result;
    goto LABEL_15;
  }
  return result;
}

void CA::OGL::Context::copy_destination(CA::OGL::Context *this, uint64_t a2, uint64_t a3, uint64_t a4, int32x2_t *a5, int32x2_t *a6, _BYTE *a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  __int16 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  int32x2_t *v22;
  int32x2_t v23;
  int32x2_t v24;
  uint64_t v25;
  unint64_t v26;
  int32x2_t v27;
  uint64_t v28;
  float32x2_t v29;
  int32x2_t v30;
  float32x2_t v31;
  char v32;
  _OWORD v33[3];
  _QWORD v34[3];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v13 = *((_QWORD *)this + 32);
  if (v13 != *((_QWORD *)this + 31))
    goto LABEL_2;
  if (v13)
    LODWORD(v13) = (*(unsigned __int8 *)(v13 + 72) >> 1) & 0x1F;
  if (*((_DWORD *)this + 61) != (_DWORD)v13)
LABEL_2:
    CA::OGL::Context::prepare_destination_(this);
  if ((*((_WORD *)this + 408) & 0x200) != 0)
  {
    v14 = *((_QWORD *)this + 22);
    if (v14)
    {
      *((_WORD *)this + 408) &= ~0x200u;
    }
  }
  v15 = *((_QWORD *)this + 31);
  if (v15)
  {
    if ((*(_DWORD *)(a3 + 68) & 0x4800) == 0x4000
      && (*(unsigned int (**)(CA::OGL::Context *, uint64_t))(*(_QWORD *)this + 184))(this, 36))
    {
      v35 = 0u;
      v36 = 0u;
      v37 = 0u;
      v16 = *((_QWORD *)this + 29);
      *((_QWORD *)&v35 + 1) = 0x3C003C003C003C00;
      v36 = 0uLL;
      *(_QWORD *)&v37 = 0;
      v34[0] = 0;
      if (v16)
      {
        *(_QWORD *)&v35 = *(_QWORD *)(v16 + 24);
        v17 = *(float *)(v16 + 64);
        v18 = *(_WORD *)(v16 + 68) & 0x500 | 1;
      }
      else
      {
        v18 = 1025;
        v17 = 1.0;
      }
      *((float *)&v37 + 2) = v17;
      WORD6(v37) = v18;
      memset(v33, 0, sizeof(v33));
      CA::Shape::operator=((uint64_t)v33, (_DWORD *)(a3 + 32));
      v34[1] = v33;
      v34[2] = 0;
      v34[0] = CA::OGL::Context::set_gstate((uint64_t)this, (uint64_t)v34);
      *(_BYTE *)(*((_QWORD *)this + 2) + 16) = 98;
      *(_WORD *)(a3 + 75) = *(_WORD *)(a3 + 75) & 0xFF3F | 0x80;
      CA::OGL::Context::bind_surface((uint64_t)this, a3, 0, 0, 0, 0.0);
      v19 = *((_QWORD *)this + 2);
      *(_OWORD *)(v19 + 96) = xmmword_18474E210;
      v20 = *(_BYTE *)(v19 + 481);
      if ((v20 & 1) != 0)
        *(_BYTE *)(v19 + 481) = v20 & 0xFE;
      v32 = v20;
      *((_QWORD *)this + 16) = 0;
      *((_QWORD *)this + 12) = (char *)this + 818;
      *(_OWORD *)((char *)this + 104) = xmmword_18474E060;
      if (a4)
      {
        v21 = 0;
        v22 = a5 + 1;
        do
        {
          v23 = *a6;
          v24 = *(int32x2_t *)(a3 + 32);
          if (*((_DWORD *)this + 23))
            v25 = 6;
          else
            v25 = 4;
          if ((unint64_t)(v21 + 4) > *((_QWORD *)this + 17)
            || (v26 = *((_QWORD *)this + 14)) != 0 && *((_QWORD *)this + 13) + v25 > v26)
          {
            *((_WORD *)this + 408) |= 0x20u;
            CA::OGL::Context::array_flush((uint64_t)this);
            *((_QWORD *)this + 16) = 0;
            *((_QWORD *)this + 12) = (char *)this + 818;
            *(_OWORD *)((char *)this + 104) = xmmword_18474E060;
          }
          v27 = vsub_s32(v23, v24);
          CA::OGL::Context::array_rect(this, (float)v22[-1].i32[0], (float)v22[-1].i32[1], (float)(v22->i32[0] + v22[-1].i32[0]), (float)(v22->i32[1] + v22[-1].i32[1]));
          v21 = *((_QWORD *)this + 16);
          v28 = *((_QWORD *)this + 15) + 48 * v21;
          v29 = vcvt_f32_s32(v27);
          *(float32x2_t *)(v28 - 176) = v29;
          v30 = *v22;
          v22 += 2;
          v31 = vcvt_f32_s32(vadd_s32(v30, v27));
          *(_QWORD *)(v28 - 128) = __PAIR64__(v29.u32[1], v31.u32[0]);
          *(float32x2_t *)(v28 - 80) = v31;
          v29.i32[1] = v31.i32[1];
          *(float32x2_t *)(v28 - 32) = v29;
          ++a6;
          --a4;
        }
        while (a4);
      }
      CA::OGL::Context::array_flush((uint64_t)this);
      if ((v32 & 1) != 0)
        *(_BYTE *)(*((_QWORD *)this + 2) + 481) |= 1u;
      CA::OGL::Context::unbind_surface(this, a3, 0);
      *(_BYTE *)(*((_QWORD *)this + 2) + 16) = 0;
      CA::OGL::Context::set_gstate((uint64_t)this, **((_QWORD **)this + 29));
      *(_DWORD *)(a3 + 64) = *(_DWORD *)(*((_QWORD *)this + 31) + 64);
    }
    else
    {
      CA::OGL::Context::push_surface((uint64_t)this, a3, 0, 0x8000, 0);
      CA::OGL::emit_copy_surface((uint64_t)this, v15, a4, a5, (uint64_t)a6);
      CA::OGL::Context::pop_surface(this);
    }
    *a7 = 0;
  }
}

uint64_t CA::OGL::emit_copy_surface(uint64_t a1, uint64_t a2, uint64_t a3, int32x2_t *a4, uint64_t a5)
{
  uint64_t v10;
  float v11;
  __int16 v12;
  int32x2_t *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  int32x2_t *v17;
  int *v18;
  uint64_t v19;
  unint64_t v20;
  int32x2_t v21;
  int32x2_t v22;
  float32x2_t v23;
  uint64_t v24;
  float32x2_t v25;
  uint64_t v27;
  _OWORD v28[3];
  _QWORD v29[3];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v10 = *(_QWORD *)(a1 + 232);
  *((_QWORD *)&v30 + 1) = 0x3C003C003C003C00;
  v31 = 0uLL;
  *(_QWORD *)&v32 = 0;
  v29[0] = 0;
  if (v10)
  {
    *(_QWORD *)&v30 = *(_QWORD *)(v10 + 24);
    v11 = *(float *)(v10 + 64);
    v12 = *(_WORD *)(v10 + 68) & 0x500 | 1;
  }
  else
  {
    v12 = 1025;
    v11 = 1.0;
  }
  *((float *)&v32 + 2) = v11;
  WORD6(v32) = v12;
  v13 = (int32x2_t *)(a2 + 32);
  memset(v28, 0, sizeof(v28));
  CA::Shape::operator=((uint64_t)v28, (_DWORD *)(a2 + 32));
  v29[1] = v28;
  v29[2] = 0;
  v29[0] = CA::OGL::Context::set_gstate(a1, (uint64_t)v29);
  *(_BYTE *)(*(_QWORD *)(a1 + 16) + 16) = 1;
  v27 = a2;
  CA::OGL::Context::bind_surface(a1, a2, 0, 0, 0, 0.0);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_BYTE *)(v14 + 481);
  if ((v15 & 1) != 0)
    *(_BYTE *)(v14 + 481) = v15 & 0xFE;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 96) = a1 + 818;
  *(_OWORD *)(a1 + 104) = xmmword_18474E060;
  if (a3)
  {
    v16 = 0;
    v17 = a4 + 1;
    v18 = (int *)(a5 + 4);
    do
    {
      if (*(_DWORD *)(a1 + 92))
        v19 = 6;
      else
        v19 = 4;
      if ((unint64_t)(v16 + 4) > *(_QWORD *)(a1 + 136)
        || (v20 = *(_QWORD *)(a1 + 112)) != 0 && *(_QWORD *)(a1 + 104) + v19 > v20)
      {
        *(_WORD *)(a1 + 816) |= 0x20u;
        CA::OGL::Context::array_flush(a1);
        *(_QWORD *)(a1 + 128) = 0;
        *(_QWORD *)(a1 + 96) = a1 + 818;
        *(_OWORD *)(a1 + 104) = xmmword_18474E060;
      }
      v21 = vsub_s32(v17[-1], *v13);
      CA::OGL::Context::array_rect((_QWORD *)a1, (float)*(v18 - 1), (float)*v18, (float)(v17->i32[0] + *(v18 - 1)), (float)(v17->i32[1] + *v18));
      v22 = *v17;
      v17 += 2;
      v23 = vcvt_f32_s32(vadd_s32(v22, v21));
      v16 = *(_QWORD *)(a1 + 128);
      v24 = *(_QWORD *)(a1 + 120) + 48 * v16;
      v25 = vcvt_f32_s32(v21);
      *(float32x2_t *)(v24 - 176) = v25;
      *(_QWORD *)(v24 - 128) = __PAIR64__(v25.u32[1], v23.u32[0]);
      *(float32x2_t *)(v24 - 80) = v23;
      v25.i32[1] = v23.i32[1];
      *(float32x2_t *)(v24 - 32) = v25;
      v18 += 2;
      --a3;
    }
    while (a3);
  }
  CA::OGL::Context::array_flush(a1);
  if ((v15 & 1) != 0)
    *(_BYTE *)(*(_QWORD *)(a1 + 16) + 481) |= 1u;
  CA::OGL::Context::unbind_surface((_QWORD *)a1, v27, 0);
  *(_BYTE *)(*(_QWORD *)(a1 + 16) + 16) = 0;
  return CA::OGL::Context::set_gstate(a1, **(_QWORD **)(a1 + 232));
}

uint64_t CA::OGL::GaussianBlurFilter::filter_alignment(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  double *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  float v18;
  double v19;
  double v20[2];

  v20[1] = *(double *)MEMORY[0x1E0C80C00];
  result = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 184))(*a2, 34);
  if ((_DWORD)result)
  {
    v8 = *(unsigned int **)(a3 + 40);
    if (!v8)
      goto LABEL_14;
    v9 = v8[4];
    if (!(_DWORD)v9)
      goto LABEL_14;
    v10 = 0;
    while (1)
    {
      v11 = *(_QWORD *)&v8[2 * v10 + 6];
      if (*(_DWORD *)(v11 + 16) == 301)
        break;
      if (v9 == ++v10)
        goto LABEL_14;
    }
    if ((v10 & 0x80000000) == 0 && (v12 = *(_QWORD *)(v11 + 24)) != 0 && *(_BYTE *)(v12 + 12) == 49)
    {
      v13 = (const char *)(v12 + 28);
      if (!strcmp((const char *)(v12 + 28), "low"))
      {
        v14 = 1;
      }
      else
      {
        result = strcmp(v13, "high");
        v14 = 0;
        if (!(_DWORD)result)
          return result;
      }
    }
    else
    {
LABEL_14:
      v14 = 0;
    }
    v19 = 0.0;
    v20[0] = 0.0;
    if ((*(_BYTE *)(a4 + 288) & 0x10) != 0)
    {
      CA::Mat4Impl::mat4_get_scale((CA::Mat4Impl *)(a4 + 144), v20, &v19, v7);
      v15 = v19;
      v16 = v20[0];
    }
    else
    {
      v15 = *(double *)(a4 + 272);
      v19 = v15;
      v20[0] = v15;
      v16 = v15;
    }
    if (v16 >= v15)
      v17 = v15;
    else
      v17 = v16;
    v18 = v17
        * CA::Render::KeyValueArray::get_float_key((CA::Render::KeyValueArray *)v8, (const CA::Render::KeyValueArray *)0x12E, 0.0);
    return CA::OGL::blur_downsample_alignment((CA::OGL *)v14, (float)(v18 * v18));
  }
  return result;
}

double *CA::OGL::BlurFilter::ROI(CA::OGL::BlurFilter *this, CA::Render::KeyValueArray **a2, const CA::Render::Layer *a3, float64x2_t *a4)
{
  float64x2_t v7;
  int64x2_t v8;
  int64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  int64x2_t v13;
  double float_key;
  float v15;
  float64x2_t v17;
  float64x2_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v17 = 0u;
  v18 = 0u;
  if ((*(unsigned int (**)(CA::OGL::BlurFilter *, CA::Render::KeyValueArray **, const CA::Render::Layer *, float64x2_t *))(*(_QWORD *)this + 144))(this, a2, a3, &v17))
  {
    v7 = a4[1];
    v8 = vclezq_f64(v7);
    if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v8, 1), (int8x16_t)v8).u64[0] & 0x8000000000000000) == 0)
    {
      v9 = vclezq_f64(v18);
      if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v9, 1), (int8x16_t)v9).u64[0] & 0x8000000000000000) != 0
        || (v10 = vaddq_f64(*a4, v7),
            v11 = vmaxnmq_f64(*a4, v17),
            v12 = vsubq_f64(vminnmq_f64(v10, vaddq_f64(v17, v18)), v11),
            v13 = vclezq_f64(v12),
            (vorrq_s8((int8x16_t)vdupq_laneq_s64(v13, 1), (int8x16_t)v13).u64[0] & 0x8000000000000000) != 0))
      {
        a4[1].f64[0] = 0.0;
        a4[1].f64[1] = 0.0;
      }
      else
      {
        *a4 = v11;
        a4[1] = v12;
      }
    }
  }
  float_key = CA::Render::KeyValueArray::get_float_key(a2[5], (const CA::Render::KeyValueArray *)0x12E, 0.0);
  v15 = (*(float (**)(CA::OGL::BlurFilter *))(*(_QWORD *)this + 152))(this);
  return CA::BoundsImpl::inset(a4->f64, -(float_key * v15), -(float_key * v15));
}

_QWORD *CA::Render::Updater::apply_shapes_ops(_QWORD *this, CA::Render::Updater::LayerShapesOp *a2, CA::Rect *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)a2;
  v5 = *((_QWORD *)a2 + 1);
  v9 = *(_QWORD *)a2;
  v10 = v5;
  v6 = *((_QWORD *)a2 + 2);
  v7 = *((_QWORD *)a2 + 3);
  v11 = v6;
  v12 = v7;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0;
  if (this)
  {
    v8 = this;
    do
    {
      this = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t *, _QWORD))(*v8 + 24))(v8, &v9, 0);
      v8 = (_QWORD *)v8[1];
    }
    while (v8);
    v4 = v9;
    v5 = v10;
    v6 = v11;
    v7 = v12;
  }
  *(_QWORD *)a2 = v4;
  *((_QWORD *)a2 + 1) = v5;
  *((_QWORD *)a2 + 2) = v6;
  *((_QWORD *)a2 + 3) = v7;
  return this;
}

void CA::Render::Updater::FlattenZOp::map_bounds(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
}

void CA::Render::Updater::FilterOp::map_bounds(CA::Render::Updater::FilterOp *this, CA::Render::Updater::LayerShapes *a2, int a3)
{
  void (*v5)(CA::Rect *, void *);
  int32x4_t v6;
  CA::Shape *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int v15;
  int64x2_t v16;
  double v17;
  __n128 v18;
  double v19;
  uint64_t v20;
  double v21;
  double v22;
  int64x2_t v23;
  int8x16_t v24;
  int32x4_t v25;
  CA::Shape *v26;
  const CA::Bounds *v27;
  float64x2_t v28;
  float64x2_t v29;
  int32x4_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)this + 5))
  {
    CA::Render::Updater::FilterOp::apply_filter(this, (__n128 *)a2, a3);
    if (*((_QWORD *)a2 + 8))
      CA::shape_map((CA::Shape **)a2 + 8, (CA::Shape **)this, (void (*)(CA::Rect *, void *))CA::Render::Updater::FilterOp::map_bounds(CA::Render::Updater::LayerShapes &,BOOL)::$_0::__invoke, v5, v6);
  }
  v7 = (CA::Shape *)*((_QWORD *)a2 + 7);
  if (v7)
  {
    if ((v7 & 1) != 0)
    {
      if (v7 == (CA::Shape *)1)
        goto LABEL_12;
    }
    else if (*((_DWORD *)v7 + 1) == 6)
    {
      goto LABEL_12;
    }
    v8 = *((_QWORD *)this + 5);
    if (!v8)
      goto LABEL_11;
    if (*((_BYTE *)this + 48))
      goto LABEL_11;
    v11 = *(_QWORD *)(v8 + 48);
    if (!v11)
      goto LABEL_11;
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v11 + 24))(*(_QWORD *)(v8 + 48)))
    {
      v7 = (CA::Shape *)*((_QWORD *)a2 + 7);
LABEL_11:
      CA::Shape::unref(v7);
      *((_QWORD *)a2 + 7) = 1;
      goto LABEL_12;
    }
    v12 = *(_QWORD *)(*((_QWORD *)this + 5) + 48);
    if (!v12 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12) & 1) == 0)
    {
      v30 = 0uLL;
      CA::Shape::get_interior_bounds(*((_QWORD *)a2 + 7), (CA::Bounds *)&v30);
      if (v30.i32[2] <= v30.i32[3])
        v15 = v30.i32[3];
      else
        v15 = v30.i32[2];
      v13.i32[0] = 1073741822;
      v14.i32[0] = v15;
      v16.i64[0] = v30.i32[0];
      v16.i64[1] = v30.i32[1];
      v17 = (double)v30.i32[2];
      v18 = (__n128)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v14, v13), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v16));
      v19 = (double)v30.i32[3];
      if (v15 > 1073741822)
      {
        v17 = 1.79769313e308;
        v19 = 1.79769313e308;
      }
      v28 = (float64x2_t)v18;
      v29.f64[0] = v17;
      v29.f64[1] = v19;
      v18.n128_f64[0] = fmax(v17, v19);
      if (v18.n128_f64[0] < 1.79769313e308)
        v18.n128_f64[0] = CA::Rect::unapply_transform(v28.f64, *((_QWORD *)this + 3));
      v20 = *(_QWORD *)(*((_QWORD *)this + 5) + 48);
      if (v20)
      {
        (*(void (**)(uint64_t, __n128))(*(_QWORD *)v20 + 56))(v20, v18);
        v21 = v29.f64[1];
        v22 = v29.f64[0];
      }
      else
      {
        v28 = 0u;
        v29 = 0u;
        v21 = 0.0;
        v22 = 0.0;
      }
      if (v22 > v21)
        v21 = v22;
      if (v21 < 1.79769313e308)
        CA::Rect::apply_transform(v28.f64, *((_QWORD *)this + 3));
      v23 = vceqzq_f64(v29);
      if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v23, 1), (int8x16_t)v23).u64[0] & 0x8000000000000000) != 0
        || (v24 = vorrq_s8((int8x16_t)vcltzq_f64(v29), (int8x16_t)vcgezq_f64(v29)),
            (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v24), 1), v24).u64[0] & 0x8000000000000000) != 0))
      {
        v30 = 0uLL;
      }
      else
      {
        v25 = (int32x4_t)vcvtpq_s64_f64(vmaxnmq_f64(v28, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
        v30 = vuzp1q_s32(v25, (int32x4_t)vsubq_s64(vcvtmq_s64_f64(vminnmq_f64(vaddq_f64(v28, v29), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v25));
      }
      v26 = (CA::Shape *)*((_QWORD *)a2 + 7);
      if (!CA::Shape::equal((uint64_t)v26, (const CA::Bounds *)&v30))
      {
        CA::Shape::unref(v26);
        *((_QWORD *)a2 + 7) = CA::Shape::new_shape((CA::Shape *)&v30, v27);
      }
    }
  }
LABEL_12:
  if (*((_QWORD *)this + 5))
  {
    v9 = *((_QWORD *)a2 + 6);
    if (v9)
    {
      *(_BYTE *)(v9 + 16) = 1;
      v10 = *(_QWORD **)(v9 + 8);
      if (v10)
      {
        CA::GenericRectTree<CA::Rect>::Pool::delete_node(*(_QWORD *)v9, v10);
        *(_QWORD *)(v9 + 8) = 0;
      }
    }
  }
}

void CA::Render::Updater::FilterOp::apply_filter(CA::Render::Updater::FilterOp *this, __n128 *a2, int a3)
{
  __n128 v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  float64x2_t v12;
  int64x2_t v13;
  int64x2_t v14;
  int32x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;

  v6 = a2[1];
  v7 = a2[1].n128_f64[1];
  v18 = *(float64x2_t *)a2;
  v19 = (float64x2_t)v6;
  if (v6.n128_f64[0] <= v7)
    v6.n128_u64[0] = a2[1].n128_u64[1];
  if (v6.n128_f64[0] < 1.79769313e308)
    v6.n128_f64[0] = CA::Rect::unapply_transform(a2->n128_f64, *((_QWORD *)this + 3));
  v8 = *((_QWORD *)this + 5);
  v9 = *(_QWORD *)(v8 + 48);
  if (v9)
  {
    v10 = *((_QWORD *)this + 4);
    if (((*(uint64_t (**)(_QWORD, _QWORD, uint64_t, __n128))(*(_QWORD *)v9 + 8))(*(_QWORD *)(v8 + 48), *((_QWORD *)this + 5), v10, v6) & 1) == 0)(*(void (**)(uint64_t, uint64_t, uint64_t, __n128 *))(*(_QWORD *)v9 + 48))(v9, v8, v10, a2);
  }
  v11 = a2[1].n128_f64[0];
  if (v11 <= a2[1].n128_f64[1])
    v11 = a2[1].n128_f64[1];
  if (v11 < 1.79769313e308)
    CA::Rect::apply_transform(a2->n128_f64, *((_QWORD *)this + 3));
  if (*((_BYTE *)this + 48) || a3)
  {
    v12 = (float64x2_t)a2[1];
    v13 = vclezq_f64(v12);
    v14 = vclezq_f64(v19);
    v15 = vmovn_s64(vcltzq_s64((int64x2_t)vorrq_s8((int8x16_t)vzip1q_s64(v14, v13), (int8x16_t)vzip2q_s64(v14, v13))));
    if ((v15.i8[4] & 1) != 0)
    {
      if ((v15.i8[0] & 1) != 0)
        return;
      *a2 = (__n128)v18;
      a2[1].n128_u64[0] = *(_QWORD *)&v19.f64[0];
    }
    else
    {
      if ((v15.i8[0] & 1) != 0)
        return;
      v16 = vminnmq_f64(*(float64x2_t *)a2, v18);
      v17 = vsubq_f64(vmaxnmq_f64(vaddq_f64(*(float64x2_t *)a2, v12), vaddq_f64(v18, v19)), v16);
      *a2 = (__n128)v16;
      a2[1].n128_u64[0] = *(_QWORD *)&v17.f64[0];
      v7 = v17.f64[1];
    }
    a2[1].n128_f64[1] = v7;
  }
}

double CA::Rect::unapply_transform(double *a1, uint64_t a2)
{
  double result;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  char v8;
  double v9;
  double v10;

  v3 = a1[2];
  result = a1[3];
  if (v3 <= result)
    v4 = a1[3];
  else
    v4 = a1[2];
  if (v4 < 1.79769313e308)
  {
    v5 = a1[1];
    v6 = *a1 - *(double *)a2;
    *a1 = v6;
    v7 = v5 - *(double *)(a2 + 8);
    a1[1] = v7;
    v8 = *(_BYTE *)(a2 + 32);
    if ((v8 & 1) != 0)
    {
      v7 = -(v7 + result);
      a1[1] = v7;
      v8 = *(_BYTE *)(a2 + 32);
      if ((v8 & 2) == 0)
      {
LABEL_7:
        if ((v8 & 4) == 0)
          goto LABEL_8;
        goto LABEL_12;
      }
    }
    else if ((*(_BYTE *)(a2 + 32) & 2) == 0)
    {
      goto LABEL_7;
    }
    v6 = -(v6 + v3);
    *a1 = v6;
    v8 = *(_BYTE *)(a2 + 32);
    if ((v8 & 4) == 0)
    {
LABEL_8:
      v9 = result;
      result = v3;
      v10 = v7;
      v7 = v6;
      if ((v8 & 8) == 0)
        return result;
LABEL_13:
      *a1 = v7 * *(double *)(a2 + 24);
      a1[1] = v10 * *(double *)(a2 + 24);
      a1[2] = result * *(double *)(a2 + 24);
      result = v9 * *(double *)(a2 + 24);
      a1[3] = result;
      return result;
    }
LABEL_12:
    v10 = -(v6 + v3);
    *a1 = v7;
    a1[1] = v10;
    a1[2] = result;
    a1[3] = v3;
    v9 = v3;
    if ((*(_BYTE *)(a2 + 32) & 8) == 0)
      return result;
    goto LABEL_13;
  }
  return result;
}

uint64_t CA::Render::FilterSubclass::identity_DOD(CA::Render::FilterSubclass *this, const CA::Render::Filter *a2, const CA::Render::Layer *a3)
{
  return 0;
}

uint64_t CA::OGL::BlurFilter::DOD(CA::OGL::BlurFilter *this, CA::Render::KeyValueArray **a2, const CA::Render::Layer *a3, float64x2_t *a4)
{
  double float_key;
  float v9;
  uint64_t result;
  float64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  int64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  float_key = CA::Render::KeyValueArray::get_float_key(a2[5], (const CA::Render::KeyValueArray *)0x12E, 0.0);
  v9 = (*(float (**)(CA::OGL::BlurFilter *))(*(_QWORD *)this + 152))(this);
  CA::BoundsImpl::inset(a4->f64, -(float_key * v9), -(float_key * v9));
  v18 = 0u;
  v19 = 0u;
  result = (*(uint64_t (**)(CA::OGL::BlurFilter *, CA::Render::KeyValueArray **, const CA::Render::Layer *, float64x2_t *))(*(_QWORD *)this + 144))(this, a2, a3, &v18);
  if ((_DWORD)result)
  {
    v11 = a4[1];
    v12 = vclezq_f64(v11);
    if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v12, 1), (int8x16_t)v12).u64[0] & 0x8000000000000000) == 0)
    {
      v13 = vclezq_f64(v19);
      if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v13, 1), (int8x16_t)v13).u64[0] & 0x8000000000000000) != 0
        || (v14 = vaddq_f64(*a4, v11),
            v15 = vmaxnmq_f64(*a4, v18),
            v16 = vsubq_f64(vminnmq_f64(v14, vaddq_f64(v18, v19)), v15),
            v17 = vclezq_f64(v16),
            (vorrq_s8((int8x16_t)vdupq_laneq_s64(v17, 1), (int8x16_t)v17).u64[0] & 0x8000000000000000) != 0))
      {
        a4[1].f64[0] = 0.0;
        a4[1].f64[1] = 0.0;
      }
      else
      {
        *a4 = v15;
        a4[1] = v16;
      }
    }
  }
  return result;
}

uint64_t CA::OGL::GaussianBlurFilter::get_bounds(CA::OGL::GaussianBlurFilter *this, const CA::Render::Filter *a2, const CA::Render::Layer *a3, Rect *a4)
{
  CA::Render::KeyValueArray *v7;
  uint64_t result;

  if ((CA::Render::KeyValueArray::get_rect_key(*((_QWORD *)a2 + 5), a4) & 1) != 0)
    return 1;
  v7 = (CA::Render::KeyValueArray *)*((_QWORD *)a2 + 5);
  if (CA::Render::KeyValueArray::get_int_key(v7, (const CA::Render::KeyValueArray *)0x129, 0)
    || (result = CA::Render::KeyValueArray::get_int_key(v7, (const CA::Render::KeyValueArray *)0x124, 0),
        (_DWORD)result))
  {
    *(_OWORD *)&a4->top = *((_OWORD *)a3 + 4);
    *(_OWORD *)&a4[2].top = *((_OWORD *)a3 + 5);
    return 1;
  }
  return result;
}

uint64_t CA::Render::KeyValueArray::get_rect_key(uint64_t this, Rect *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float64x2_t v6;
  float64x2_t v7;

  if (this)
  {
    v2 = *(unsigned int *)(this + 16);
    if (!(_DWORD)v2)
      return 0;
    v3 = 0;
    while (1)
    {
      v4 = *(_QWORD *)(this + 24 + 8 * v3);
      if (*(_DWORD *)(v4 + 16) == 279)
        break;
      if (v2 == ++v3)
        return 0;
    }
    if ((v3 & 0x80000000) == 0
      && (v5 = *(_QWORD *)(v4 + 24)) != 0
      && *(_BYTE *)(v5 + 12) == 56
      && *(_DWORD *)(v5 + 16) >= 4u)
    {
      v6 = *(float64x2_t *)(v5 + 24);
      v7 = vsubq_f64(*(float64x2_t *)(v5 + 40), v6);
      *(float64x2_t *)&a2->top = v6;
      *(float64x2_t *)&a2[2].top = v7;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return this;
}

float CA::OGL::BlurFilter::dirty_scale_factor(CA::OGL::BlurFilter *this)
{
  return 2.8;
}

uint64_t CA::Render::FilterSubclass::identity_ROI(CA::Render::FilterSubclass *this, const CA::Render::Filter *a2, const CA::Render::Layer *a3)
{
  return 0;
}

void CA::Render::Updater::ShadowOp::map_bounds(CA::Render::Updater::ShadowOp *this, CA::Render::Updater::LayerShapes *a2)
{
  void (*v4)(CA::Rect *, void *);
  int32x4_t v5;
  uint64_t v6;
  _QWORD *v7;

  *(double *)v5.i64 = CA::Render::Updater::ShadowOp::apply_shadow(this, (float64x2_t *)a2);
  if (*((_QWORD *)a2 + 8))
    CA::shape_map((CA::Shape **)a2 + 8, (CA::Shape **)this, (void (*)(CA::Rect *, void *))CA::Render::Updater::ShadowOp::map_bounds(CA::Render::Updater::LayerShapes &,BOOL)::$_0::__invoke, v4, v5);
  v6 = *((_QWORD *)a2 + 6);
  if (v6)
  {
    *(_BYTE *)(v6 + 16) = 1;
    v7 = *(_QWORD **)(v6 + 8);
    if (v7)
    {
      CA::GenericRectTree<CA::Rect>::Pool::delete_node(*(_QWORD *)v6, v7);
      *(_QWORD *)(v6 + 8) = 0;
    }
  }
}

float64_t CA::Render::Updater::ShadowOp::apply_shadow(CA::Render::Updater::ShadowOp *this, float64x2_t *a2)
{
  float64_t result;
  double v3;
  double v4;
  float64_t v7;
  float64_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  int32x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  int64x2_t v17;
  int64x2_t v18;
  int32x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  result = a2[1].f64[0];
  v3 = a2[1].f64[1];
  if (result >= v3)
    v4 = a2[1].f64[1];
  else
    v4 = a2[1].f64[0];
  if (v4 > 0.0)
  {
    if (result <= v3)
      result = a2[1].f64[1];
    if (result < 1.79769313e308)
    {
      CA::Rect::unapply_transform(a2->f64, *((_QWORD *)this + 3));
      v7 = a2->f64[1];
      v24.f64[0] = a2->f64[0];
      v24.f64[1] = v7;
      v8 = a2[1].f64[1];
      v25.f64[0] = a2[1].f64[0];
      v25.f64[1] = v8;
      v22.f64[0] = v24.f64[0];
      v22.f64[1] = v7;
      v23.f64[0] = v25.f64[0];
      v23.f64[1] = v8;
      CA::BoundsImpl::inset(v24.f64, (float)-*((float *)this + 8), (float)-*((float *)this + 8));
      v9 = v25;
      v10 = vaddq_f64(v24, vcvtq_f64_f32(*(float32x2_t *)((char *)this + 36)));
      v11 = a2[1];
      v12 = vclezq_f64(v11);
      v13 = vclezq_f64(v25);
      v14 = vmovn_s64(vcltzq_s64((int64x2_t)vorrq_s8((int8x16_t)vzip1q_s64(v13, v12), (int8x16_t)vzip2q_s64(v13, v12))));
      if ((v14.i8[4] & 1) != 0)
      {
        if ((v14.i8[0] & 1) != 0)
        {
LABEL_14:
          v21 = v11;
          CA::BoundsImpl::inset(v22.f64, (float)-*((float *)this + 11), (float)-*((float *)this + 11));
          v16 = v23;
          v17 = vclezq_f64(v21);
          v18 = vclezq_f64(v23);
          v19 = vmovn_s64(vcltzq_s64((int64x2_t)vorrq_s8((int8x16_t)vzip1q_s64(v18, v17), (int8x16_t)vzip2q_s64(v18, v17))));
          if ((v19.i8[4] & 1) != 0)
          {
            if ((v19.i8[0] & 1) == 0)
            {
              v20 = v22;
LABEL_19:
              *a2 = v20;
              a2[1] = v16;
            }
          }
          else if ((v19.i8[0] & 1) == 0)
          {
            v20 = vminnmq_f64(*a2, v22);
            v16 = vsubq_f64(vmaxnmq_f64(vaddq_f64(*a2, v21), vaddq_f64(v22, v23)), v20);
            goto LABEL_19;
          }
          return CA::Rect::apply_transform(a2->f64, *((_QWORD *)this + 3));
        }
      }
      else
      {
        if ((v14.i8[0] & 1) != 0)
          goto LABEL_14;
        v15 = vaddq_f64(v10, v25);
        v10 = vminnmq_f64(*a2, v10);
        v9 = vsubq_f64(vmaxnmq_f64(vaddq_f64(*a2, v11), v15), v10);
      }
      *a2 = v10;
      a2[1] = v9;
      v11 = v9;
      goto LABEL_14;
    }
  }
  return result;
}

float CA::OGL::VariableBlurFilter::dirty_scale_factor(CA::OGL::VariableBlurFilter *this)
{
  return 5.6;
}

uint64_t CA::OGL::VariableBlurFilter::get_bounds(CA::OGL::VariableBlurFilter *this, const CA::Render::Filter *a2, const CA::Render::Layer *a3, Rect *a4)
{
  *(_OWORD *)&a4->top = *((_OWORD *)a3 + 4);
  *(_OWORD *)&a4[2].top = *((_OWORD *)a3 + 5);
  return 1;
}

void CA::Volume::apply_transform(CA::Volume *this, float64x2_t *a2, double *a3)
{
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  int8x16_t *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t *v32;
  float64x2_t v33;
  float64x2_t v34;
  uint64_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  double v40;
  double v41;
  double v42;
  float64x2_t v43;
  int8x16_t v44;
  float64x2_t v45;
  int8x16_t v46;
  int8x16_t v47[16];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  if ((LOBYTE(a2[9].f64[0]) & 0x10) == 0)
  {
    v4 = vsubq_f64(*(float64x2_t *)((char *)this + 24), *(float64x2_t *)this);
    v47[0] = *(int8x16_t *)this;
    v47[1] = (int8x16_t)v4;
    CA::Rect::apply_transform(v47, (const CA::Transform *)a2, a3);
    v5 = (float64x2_t)v47[0];
    v6 = (float64x2_t)v47[1];
    *(int8x16_t *)this = v47[0];
    *(float64x2_t *)((char *)this + 24) = vaddq_f64(v6, v5);
    return;
  }
  v7 = 0;
  v8 = 1;
  memset(v47, 0, sizeof(v47));
  do
  {
    v9 = 0;
    v10 = v8;
    if ((v8 & 1) != 0)
      v11 = 0;
    else
      v11 = 24;
    v12 = *(_QWORD *)((char *)this + v11);
    v13 = 1;
    do
    {
      v14 = 0;
      v15 = v13;
      v16 = v9 | v7;
      if ((v13 & 1) != 0)
        v17 = 8;
      else
        v17 = 32;
      v18 = *(_QWORD *)((char *)this + v17);
      v19 = 1;
      do
      {
        v20 = &v47[2 * (v16 | v14)];
        v20->i64[0] = v12;
        v20->i64[1] = v18;
        v21 = v19 & 1;
        if ((v19 & 1) != 0)
          v22 = 16;
        else
          v22 = 40;
        v20[1].i64[0] = *(_QWORD *)((char *)this + v22);
        v20[1].i64[1] = 0x3FF0000000000000;
        v14 = 1;
        v19 = 0;
      }
      while (v21);
      v13 = 0;
      v9 = 2;
    }
    while ((v15 & 1) != 0);
    v8 = 0;
    v7 = 4;
  }
  while ((v10 & 1) != 0);
  v23 = 0;
  v24 = *a2;
  v25 = a2[1];
  v26 = a2[2];
  v27 = a2[3];
  v28 = a2[4];
  v29 = a2[5];
  v30 = a2[6];
  v31 = a2[7];
  do
  {
    v32 = (float64x2_t *)&v47[v23];
    v33 = (float64x2_t)v47[v23];
    v34 = (float64x2_t)v47[v23 + 1];
    *v32 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v24, v33.f64[0]), v26, v33, 1), v28, v34.f64[0]), v30, v34, 1);
    v32[1] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v25, v33.f64[0]), v27, v33, 1), v29, v34.f64[0]), v31, v34, 1);
    v23 += 2;
  }
  while (v23 != 16);
  v35 = 0;
  v36 = (int8x16_t)vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  v37 = (int8x16_t)xmmword_18474E750;
  v38 = (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  while (1)
  {
    v39 = v47[v35];
    v40 = *(double *)v47[v35 + 1].i64;
    v41 = *(double *)&v47[v35 + 1].i64[1];
    if (v41 != 1.0)
      break;
LABEL_24:
    *(_QWORD *)&v43.f64[1] = v37.i64[1];
    v43.f64[0] = v40;
    v44 = vextq_s8(v39, v39, 8uLL);
    *(_QWORD *)&v45.f64[1] = v44.i64[1];
    *(_QWORD *)&v45.f64[0] = v37.i64[0];
    v38 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v38, (float64x2_t)v39), v39, v38);
    v46.i64[1] = v44.i64[1];
    *(double *)v46.i64 = v40;
    v37 = vbslq_s8((int8x16_t)vcgtq_f64(v45, v43), v46, v37);
    *(double *)&v44.i64[1] = v40;
    v36 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v44, (float64x2_t)v36), v44, v36);
    v35 += 2;
    if (v35 == 16)
    {
      *(int8x16_t *)this = v38;
      *((int8x16_t *)this + 1) = v37;
      goto LABEL_27;
    }
  }
  if (v41 > 0.0)
  {
    v42 = 1.0 / v41;
    v39 = (int8x16_t)vmulq_n_f64((float64x2_t)v39, v42);
    v40 = v42 * v40;
    goto LABEL_24;
  }
  *(_OWORD *)this = CA::Volume::infinity;
  *((_OWORD *)this + 1) = unk_18475EDA0;
  v36 = (int8x16_t)xmmword_18475EDB0;
LABEL_27:
  *((int8x16_t *)this + 2) = v36;
}

uint64_t CA::GenericRectTree<CA::Rect>::insert_node(uint64_t result, uint64_t *a2, double a3, __n128 a4, __n128 a5, __n128 a6)
{
  uint64_t v8;
  _QWORD *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t *v23;
  unint64_t v24;
  BOOL v25;
  unint64_t v26;

  if (a6.n128_f64[0] <= a4.n128_f64[0] || a5.n128_f64[0] <= a3 || *(_BYTE *)(result + 16) != 0)
    return result;
  v8 = result;
  if (*(_BYTE *)(result + 17))
  {
LABEL_10:
    *(_BYTE *)(v8 + 16) = 1;
    v9 = *(_QWORD **)(v8 + 8);
    if (v9)
    {
      result = CA::GenericRectTree<CA::Rect>::Pool::delete_node(*(_QWORD *)v8, v9);
      *(_QWORD *)(v8 + 8) = 0;
    }
    return result;
  }
  v10 = a6.n128_f64[0];
  v11 = a5.n128_f64[0];
  v12 = a4.n128_f64[0];
  v13 = a3;
  v15 = (double *)*a2;
  if (*a2)
  {
    v16 = v15[1];
    if (v16 > a4.n128_f64[0])
    {
      if (v16 <= a6.n128_f64[0])
        a6.n128_f64[0] = v15[1];
      result = CA::GenericRectTree<CA::Rect>::insert_node(result, v15 + 6, v13, a4, a5, a6);
      v12 = v15[1];
    }
    v17 = v15[3];
    if (v17 < v10)
    {
      if (v12 <= v17)
        v18 = v15[3];
      else
        v18 = v12;
      a4.n128_f64[0] = v18;
      a5.n128_f64[0] = v11;
      a6.n128_f64[0] = v10;
      result = CA::GenericRectTree<CA::Rect>::insert_node(v8, v15 + 7, v13, a4, a5, a6);
      v10 = v18;
    }
    if (*v15 > v13)
    {
      if (*v15 <= v11)
        a5.n128_f64[0] = *v15;
      else
        a5.n128_f64[0] = v11;
      a4.n128_f64[0] = v12;
      a6.n128_f64[0] = v10;
      result = CA::GenericRectTree<CA::Rect>::insert_node(v8, v15 + 4, v13, a4, a5, a6);
      v13 = *v15;
    }
    v19 = v15[2];
    if (v19 < v11)
    {
      if (v13 <= v19)
        v20 = v15[2];
      else
        v20 = v13;
      a4.n128_f64[0] = v12;
      a5.n128_f64[0] = v11;
      a6.n128_f64[0] = v10;
      result = CA::GenericRectTree<CA::Rect>::insert_node(v8, v15 + 5, v20, a4, a5, a6);
      v11 = v20;
    }
    if (v11 > v13 && v10 > v12)
      goto LABEL_10;
  }
  else
  {
    v21 = *(_DWORD *)(result + 20);
    *(_DWORD *)(result + 20) = v21 + 1;
    if (v21 > 0x3F)
      goto LABEL_10;
    v22 = *(uint64_t **)result;
    result = **(_QWORD **)result;
    if (result)
    {
      *v22 = *(_QWORD *)(result + 32);
      *(_QWORD *)(result + 32) = 0;
    }
    else
    {
      v23 = (uint64_t *)v22[1];
      v24 = v23[2];
      v25 = v24 >= 0x40;
      v26 = v24 - 64;
      if (v25)
      {
        result = v23[1];
        v23[1] = result + 64;
        v23[2] = v26;
      }
      else
      {
        result = x_heap_malloc_small_(v23, 0x40uLL);
      }
      *(_OWORD *)(result + 32) = 0u;
      *(_OWORD *)(result + 48) = 0u;
    }
    *(double *)result = v13;
    *(double *)(result + 8) = v12;
    *(double *)(result + 16) = v11;
    *(double *)(result + 24) = v10;
    *a2 = result;
  }
  return result;
}

uint64_t CA::GenericRectTree<CA::Rect>::Pool::delete_node(uint64_t result, _QWORD *a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)result;
  if (a2[4])
  {
    result = CA::GenericRectTree<CA::Rect>::Pool::delete_node(result);
    a2[4] = 0;
  }
  if (a2[5])
  {
    result = CA::GenericRectTree<CA::Rect>::Pool::delete_node(v3);
    a2[5] = 0;
  }
  if (a2[6])
  {
    result = CA::GenericRectTree<CA::Rect>::Pool::delete_node(v3);
    a2[6] = 0;
  }
  if (a2[7])
  {
    result = CA::GenericRectTree<CA::Rect>::Pool::delete_node(v3);
    a2[7] = 0;
  }
  a2[4] = *v3;
  *v3 = a2;
  return result;
}

uint64_t CA::Layer::commit_if_needed(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int *v9;
  unsigned int *v10;
  int v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  BOOL v23;
  int v24;
  unsigned int v25;
  int v26;

  v6 = a2[24];
  if ((v6 & 0x80000000) != 0 || (v7 = a1 + 4 * v6, (v8 = *(_DWORD *)(v7 + 272)) == 0))
  {
    v9 = CA::Layer::thread_flags_((CA::Layer *)a1, (CA::Transaction *)a2);
    v8 = *v9;
  }
  else
  {
    v9 = (int *)(v7 + 272);
  }
  v10 = (unsigned int *)(a1 + 4);
  if ((*(_DWORD *)(a1 + 4) & 0x2000000) != 0)
  {
    v8 |= 0x200018u;
    *v9 = v8;
  }
  if ((*v10 & 0x2200418) != 0)
  {
    v11 = ~(v8 & 0x2200418);
    do
      v12 = __ldaxr(v10);
    while (__stlxr(v12 & v11, v10));
    v8 = *v9;
  }
  if ((v8 & 0x18) == 0 && *(_DWORD *)(a1 + 264))
    return 0;
  v13 = *(_QWORD **)(a1 + 24);
  if (v13)
  {
    v14 = v13 + 1;
    v15 = v13[2];
    if (v15 == 1)
    {
      if (!v13[3])
      {
LABEL_20:
        v17 = 0;
        do
        {
          v18 = *v14++;
          if (CA::Layer::commit_if_needed(*(_QWORD *)(v18 + 16), a2, a3))
            v17 = 1;
          --v15;
        }
        while (v15);
        v16 = v17 & 1;
        goto LABEL_26;
      }
LABEL_19:
      v14 = (uint64_t *)*v14;
      goto LABEL_20;
    }
    if (v15)
      goto LABEL_19;
  }
  v16 = 0;
LABEL_26:
  v19 = *(_QWORD *)(a1 + 32);
  if (v19)
    v16 = CA::Layer::commit_if_needed(*(_QWORD *)(v19 + 16), a2, a3) | v16;
  if (!*(_DWORD *)(a1 + 264))
  {
    do
    {
      do
      {
        v20 = __ldaxr(CA::Render::next_sequence(void)::sequence);
        v21 = __stlxr(v20 + 1, CA::Render::next_sequence(void)::sequence);
        v22 = v20 + 1;
        v23 = v20 == -1;
      }
      while (v21);
    }
    while (v23);
    *(_DWORD *)(a1 + 264) = v22;
  }
  (*(void (**)(uint64_t, uint64_t, _QWORD))(a3 + 16))(a3, a1, *v9);
  v24 = *v9;
  if ((*(_BYTE *)(a1 + 41) & 0x10) != 0)
  {
    v24 |= 0x80000u;
    *v9 = v24;
    v16 = 1;
  }
  if ((v24 & 8) != 0)
  {
    *(_DWORD *)(a1 + 40) = 0;
    v24 = *v9;
  }
  v25 = v24 & 0xFDDFBBE7;
  if ((_DWORD)v16)
    v26 = 18432;
  else
    v26 = 0x4000;
  *v9 = v25 | v26;
  return v16;
}

uint64_t ___ZN2CA7Context18commit_transactionEPNS_11TransactionEdPd_block_invoke(uint64_t a1, id *a2, int a3, const __CFString *a4, CALayer *a5, CA::Render::TimingList *(*a6)(CA::Layer *, void *), void *a7)
{
  unsigned int v7;
  CA::Transaction **v11;
  CA::Transaction *v12;
  char v13;
  CA::Render::Object *v14;
  CA::Render *v15;
  CA::Render::Encoder *v16;
  CA::Render::Context *v17;
  unint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t result;

  v7 = a4;
  v11 = *(CA::Transaction ***)(a1 + 40);
  v12 = *v11;
  v13 = *(_BYTE *)(*((_QWORD *)*v11 + 13) + 204);
  if ((v13 & 0x20) == 0)
  {
    kdebug_trace();
    v12 = *v11;
  }
  if ((a3 & 0x200000) != 0)
  {
    v11[6] = (CA::Transaction *)0xBFF0000000000000;
    CA::Layer::commit_animations((CA::Layer *)a2, v12, (double (*)(CA::Layer *, double, void *))v11, a4, a5, a6, a7);
  }
  v14 = (CA::Render::Object *)objc_msgSend(a2[2], "_copyRenderLayer:layerFlags:commitFlags:");
  if (v14)
  {
    v15 = v11[4];
    if (v15)
    {
      if (CA::Render::Encoder::initialize_render_id_slide(void)::once[0] != -1)
        dispatch_once(CA::Render::Encoder::initialize_render_id_slide(void)::once, &__block_literal_global_11026);
      if (a2)
        v16 = (CA::Render::Encoder *)((char *)a2 + CA::Render::_render_id_slide);
      else
        v16 = 0;
      CA::Render::encode_set_object(v15, v16, v7, v14, 0);
    }
    v17 = v11[5];
    if (v17)
    {
      if (CA::Render::Encoder::initialize_render_id_slide(void)::once[0] != -1)
        dispatch_once(CA::Render::Encoder::initialize_render_id_slide(void)::once, &__block_literal_global_11026);
      if (a2)
        v18 = (unint64_t)a2 + CA::Render::_render_id_slide;
      else
        v18 = 0;
      CA::Render::Context::set_object(v17, v18, v7, v14);
    }
    else
    {
      v19 = (unsigned int *)((char *)v14 + 8);
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
        (*(void (**)(CA::Render::Object *))(*(_QWORD *)v14 + 16))(v14);
    }
  }
  result = objc_msgSend(a2[2], "_didCommitLayer:", *v11);
  *((_BYTE *)v11 + 56) = 1;
  if ((v13 & 0x20) == 0)
    result = kdebug_trace();
  ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_18449BE3C(_Unwind_Exception *exception_object)
{
  char v1;

  if ((v1 & 0x20) == 0)
    kdebug_trace();
  _Unwind_Resume(exception_object);
}

void *CA::Render::encode_set_object(CA::Render *this, CA::Render::Encoder *a2, int a3, CA::Render::Object *a4, CA::Render::Object *a5)
{
  int v5;
  _BYTE *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  _DWORD *v14;
  void *result;
  _DWORD *v16;

  v5 = (int)a5;
  v10 = (_BYTE *)*((_QWORD *)this + 4);
  if ((unint64_t)(v10 + 1) > *((_QWORD *)this + 5))
  {
    CA::Render::Encoder::grow(this, 1);
    v10 = (_BYTE *)*((_QWORD *)this + 4);
  }
  *((_QWORD *)this + 4) = v10 + 1;
  *v10 = 2;
  v11 = (_QWORD *)*((_QWORD *)this + 4);
  if ((unint64_t)(v11 + 1) > *((_QWORD *)this + 5))
  {
    CA::Render::Encoder::grow(this, 8);
    v11 = (_QWORD *)*((_QWORD *)this + 4);
  }
  *v11 = a2;
  v12 = *((_QWORD *)this + 4);
  v13 = *((_QWORD *)this + 5);
  v14 = (_DWORD *)(v12 + 8);
  *((_QWORD *)this + 4) = v12 + 8;
  if (v12 + 12 > v13)
  {
    CA::Render::Encoder::grow(this, 4);
    v14 = (_DWORD *)*((_QWORD *)this + 4);
  }
  *v14 = a3;
  *((_QWORD *)this + 4) += 4;
  result = CA::Render::Encoder::encode_object_uncached(this, a4);
  v16 = (_DWORD *)*((_QWORD *)this + 4);
  if ((unint64_t)(v16 + 1) > *((_QWORD *)this + 5))
  {
    result = CA::Render::Encoder::grow(this, 4);
    v16 = (_DWORD *)*((_QWORD *)this + 4);
  }
  *v16 = v5;
  *((_QWORD *)this + 4) += 4;
  return result;
}

void CA::Render::Layer::encode(CA::Render::Layer *this, CA::Render::Encoder *a2)
{
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  _QWORD *v9;
  BOOL v10;
  BOOL *v11;
  uint64_t v12;
  _OWORD *v13;
  uint64_t v14;
  unint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _OWORD *v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  _DWORD *v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  _DWORD *v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  _DWORD *v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  _DWORD *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  _OWORD *v49;
  uint64_t v50;
  unint64_t v51;
  _DWORD *v52;
  int v53;
  uint64_t v54;
  unint64_t v55;
  _DWORD *v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  _OWORD *v60;
  uint64_t v61;
  unint64_t v62;
  _DWORD *v63;
  int v64;
  uint64_t v65;
  unint64_t v66;
  _DWORD *v67;
  int v68;
  uint64_t v69;
  unint64_t v70;
  _DWORD *v71;
  int v72;
  uint64_t v73;
  unint64_t v74;
  _DWORD *v75;
  int v76;
  uint64_t v77;
  unint64_t v78;
  _DWORD *v79;
  int v80;
  uint64_t v81;
  unint64_t v82;
  _OWORD *v83;
  uint64_t v84;
  unint64_t v85;
  _DWORD *v86;
  int v87;
  uint64_t v88;
  unint64_t v89;
  _BYTE *v90;
  char v91;

  CA::Render::Object::encode(this, a2);
  v4 = (_OWORD *)*((_QWORD *)a2 + 4);
  if ((unint64_t)(v4 + 5) > *((_QWORD *)a2 + 5))
  {
    CA::Render::Encoder::grow(a2, 80);
    v4 = (_OWORD *)*((_QWORD *)a2 + 4);
  }
  *v4 = *((_OWORD *)this + 1);
  v5 = *((_OWORD *)this + 2);
  v6 = *((_OWORD *)this + 3);
  v7 = *((_OWORD *)this + 5);
  v4[3] = *((_OWORD *)this + 4);
  v4[4] = v7;
  v4[1] = v5;
  v4[2] = v6;
  *((_QWORD *)a2 + 4) += 80;
  CA::Render::Encoder::encode_object(a2, *((const CA::Render::Object **)this + 12));
  CA::Render::Encoder::encode_object(a2, *((const CA::Render::Object **)this + 13));
  v8 = *((_QWORD *)this + 14);
  v9 = (_QWORD *)*((_QWORD *)a2 + 4);
  if ((unint64_t)(v9 + 1) > *((_QWORD *)a2 + 5))
  {
    CA::Render::Encoder::grow(a2, 8);
    v9 = (_QWORD *)*((_QWORD *)a2 + 4);
  }
  *v9 = v8;
  *((_QWORD *)a2 + 4) += 8;
  CA::Render::Encoder::encode_object(a2, *((const CA::Render::Object **)this + 15));
  v10 = *((_QWORD *)this + 16) != 0;
  v11 = (BOOL *)*((_QWORD *)a2 + 4);
  if ((unint64_t)(v11 + 1) > *((_QWORD *)a2 + 5))
  {
    CA::Render::Encoder::grow(a2, 1);
    v11 = (BOOL *)*((_QWORD *)a2 + 4);
  }
  *((_QWORD *)a2 + 4) = v11 + 1;
  *v11 = v10;
  v12 = *((_QWORD *)this + 16);
  if (v12)
  {
    CA::Render::Encoder::encode_object(a2, *(const CA::Render::Object **)v12);
    CA::Render::Encoder::encode_object(a2, *(const CA::Render::Object **)(v12 + 8));
    CA::Render::Encoder::encode_object(a2, *(const CA::Render::Object **)(v12 + 16));
    CA::Render::Encoder::encode_object(a2, *(const CA::Render::Object **)(v12 + 24));
    CA::Render::Encoder::encode_object(a2, *(const CA::Render::Object **)(v12 + 32));
    CA::Render::Encoder::encode_object(a2, *(const CA::Render::Object **)(v12 + 40));
    CA::Render::Encoder::encode_object(a2, *(const CA::Render::Object **)(v12 + 48));
    CA::Render::Encoder::encode_object(a2, *(const CA::Render::Object **)(v12 + 56));
    CA::Render::Encoder::encode_object(a2, *(const CA::Render::Object **)(v12 + 64));
    CA::Render::Encoder::encode_object(a2, *(const CA::Render::Object **)(v12 + 72));
    CA::Render::Encoder::encode_object(a2, *(const CA::Render::Object **)(v12 + 80));
    CA::Render::Encoder::encode_object(a2, *(const CA::Render::Object **)(v12 + 88));
    CA::Render::Encoder::encode_object(a2, *(const CA::Render::Object **)(v12 + 96));
    CA::Render::Encoder::encode_object(a2, *(const CA::Render::Object **)(v12 + 104));
    CA::Render::Encoder::encode_object(a2, *(const CA::Render::Object **)(v12 + 112));
    CA::Render::Encoder::encode_object(a2, *(const CA::Render::Object **)(v12 + 120));
    CA::Render::Encoder::encode_object(a2, *(const CA::Render::Object **)(v12 + 128));
    CA::Render::Encoder::encode_object(a2, *(const CA::Render::Object **)(v12 + 136));
    v13 = (_OWORD *)*((_QWORD *)a2 + 4);
    if ((unint64_t)(v13 + 1) > *((_QWORD *)a2 + 5))
    {
      CA::Render::Encoder::grow(a2, 16);
      v13 = (_OWORD *)*((_QWORD *)a2 + 4);
    }
    *v13 = *(_OWORD *)(v12 + 152);
    v14 = *((_QWORD *)a2 + 4);
    v15 = *((_QWORD *)a2 + 5);
    v16 = (_OWORD *)(v14 + 16);
    *((_QWORD *)a2 + 4) = v14 + 16;
    if (v14 + 32 > v15)
    {
      CA::Render::Encoder::grow(a2, 16);
      v16 = (_OWORD *)*((_QWORD *)a2 + 4);
    }
    *v16 = *(_OWORD *)(v12 + 168);
    v17 = *((_QWORD *)a2 + 4);
    v18 = *((_QWORD *)a2 + 5);
    v19 = (_QWORD *)(v17 + 16);
    *((_QWORD *)a2 + 4) = v17 + 16;
    v20 = *(_QWORD *)(v12 + 184);
    if (v17 + 24 > v18)
    {
      CA::Render::Encoder::grow(a2, 8);
      v19 = (_QWORD *)*((_QWORD *)a2 + 4);
    }
    *v19 = v20;
    v21 = *((_QWORD *)a2 + 4);
    v22 = *((_QWORD *)a2 + 5);
    v23 = (_QWORD *)(v21 + 8);
    *((_QWORD *)a2 + 4) = v21 + 8;
    v24 = *(_QWORD *)(v12 + 192);
    if (v21 + 16 > v22)
    {
      CA::Render::Encoder::grow(a2, 8);
      v23 = (_QWORD *)*((_QWORD *)a2 + 4);
    }
    *v23 = v24;
    v25 = *((_QWORD *)a2 + 4);
    v26 = *((_QWORD *)a2 + 5);
    v27 = (_OWORD *)(v25 + 8);
    *((_QWORD *)a2 + 4) = v25 + 8;
    if (v25 + 24 > v26)
    {
      CA::Render::Encoder::grow(a2, 16);
      v27 = (_OWORD *)*((_QWORD *)a2 + 4);
    }
    *v27 = *(_OWORD *)(v12 + 200);
    v28 = *((_QWORD *)a2 + 4);
    v29 = *((_QWORD *)a2 + 5);
    v30 = (_QWORD *)(v28 + 16);
    *((_QWORD *)a2 + 4) = v28 + 16;
    if (v28 + 24 > v29)
    {
      CA::Render::Encoder::grow(a2, 8);
      v30 = (_QWORD *)*((_QWORD *)a2 + 4);
    }
    *v30 = *(_QWORD *)(v12 + 216);
    v31 = *((_QWORD *)a2 + 4);
    v32 = *((_QWORD *)a2 + 5);
    v33 = (_DWORD *)(v31 + 8);
    *((_QWORD *)a2 + 4) = v31 + 8;
    v34 = *(_DWORD *)(v12 + 224);
    if (v31 + 12 > v32)
    {
      CA::Render::Encoder::grow(a2, 4);
      v33 = (_DWORD *)*((_QWORD *)a2 + 4);
    }
    *v33 = v34;
    v35 = *((_QWORD *)a2 + 4);
    v36 = *((_QWORD *)a2 + 5);
    v37 = (_DWORD *)(v35 + 4);
    *((_QWORD *)a2 + 4) = v35 + 4;
    v38 = *(_DWORD *)(v12 + 228);
    if (v35 + 8 > v36)
    {
      CA::Render::Encoder::grow(a2, 4);
      v37 = (_DWORD *)*((_QWORD *)a2 + 4);
    }
    *v37 = v38;
    v39 = *((_QWORD *)a2 + 4);
    v40 = *((_QWORD *)a2 + 5);
    v41 = (_DWORD *)(v39 + 4);
    *((_QWORD *)a2 + 4) = v39 + 4;
    v42 = *(_DWORD *)(v12 + 232);
    if (v39 + 8 > v40)
    {
      CA::Render::Encoder::grow(a2, 4);
      v41 = (_DWORD *)*((_QWORD *)a2 + 4);
    }
    *v41 = v42;
    v43 = *((_QWORD *)a2 + 4);
    v44 = *((_QWORD *)a2 + 5);
    v45 = (_DWORD *)(v43 + 4);
    *((_QWORD *)a2 + 4) = v43 + 4;
    v46 = *(_DWORD *)(v12 + 236);
    if (v43 + 8 > v44)
    {
      CA::Render::Encoder::grow(a2, 4);
      v45 = (_DWORD *)*((_QWORD *)a2 + 4);
    }
    *v45 = v46;
    v47 = *((_QWORD *)a2 + 4);
    v48 = *((_QWORD *)a2 + 5);
    v49 = (_OWORD *)(v47 + 4);
    *((_QWORD *)a2 + 4) = v47 + 4;
    if (v47 + 20 > v48)
    {
      CA::Render::Encoder::grow(a2, 16);
      v49 = (_OWORD *)*((_QWORD *)a2 + 4);
    }
    *v49 = *(_OWORD *)(v12 + 240);
    v50 = *((_QWORD *)a2 + 4);
    v51 = *((_QWORD *)a2 + 5);
    v52 = (_DWORD *)(v50 + 16);
    *((_QWORD *)a2 + 4) = v50 + 16;
    v53 = *(_DWORD *)(v12 + 256);
    if (v50 + 20 > v51)
    {
      CA::Render::Encoder::grow(a2, 4);
      v52 = (_DWORD *)*((_QWORD *)a2 + 4);
    }
    *v52 = v53;
    v54 = *((_QWORD *)a2 + 4);
    v55 = *((_QWORD *)a2 + 5);
    v56 = (_DWORD *)(v54 + 4);
    *((_QWORD *)a2 + 4) = v54 + 4;
    v57 = *(_DWORD *)(v12 + 260);
    if (v54 + 8 > v55)
    {
      CA::Render::Encoder::grow(a2, 4);
      v56 = (_DWORD *)*((_QWORD *)a2 + 4);
    }
    *v56 = v57;
    v58 = *((_QWORD *)a2 + 4);
    v59 = *((_QWORD *)a2 + 5);
    v60 = (_OWORD *)(v58 + 4);
    *((_QWORD *)a2 + 4) = v58 + 4;
    if (v58 + 20 > v59)
    {
      CA::Render::Encoder::grow(a2, 16);
      v60 = (_OWORD *)*((_QWORD *)a2 + 4);
    }
    *v60 = *(_OWORD *)(v12 + 264);
    v61 = *((_QWORD *)a2 + 4);
    v62 = *((_QWORD *)a2 + 5);
    v63 = (_DWORD *)(v61 + 16);
    *((_QWORD *)a2 + 4) = v61 + 16;
    v64 = *(_DWORD *)(v12 + 280);
    if (v61 + 20 > v62)
    {
      CA::Render::Encoder::grow(a2, 4);
      v63 = (_DWORD *)*((_QWORD *)a2 + 4);
    }
    *v63 = v64;
    v65 = *((_QWORD *)a2 + 4);
    v66 = *((_QWORD *)a2 + 5);
    v67 = (_DWORD *)(v65 + 4);
    *((_QWORD *)a2 + 4) = v65 + 4;
    v68 = *(_DWORD *)(v12 + 284);
    if (v65 + 8 > v66)
    {
      CA::Render::Encoder::grow(a2, 4);
      v67 = (_DWORD *)*((_QWORD *)a2 + 4);
    }
    *v67 = v68;
    v69 = *((_QWORD *)a2 + 4);
    v70 = *((_QWORD *)a2 + 5);
    v71 = (_DWORD *)(v69 + 4);
    *((_QWORD *)a2 + 4) = v69 + 4;
    v72 = *(_DWORD *)(v12 + 288);
    if (v69 + 8 > v70)
    {
      CA::Render::Encoder::grow(a2, 4);
      v71 = (_DWORD *)*((_QWORD *)a2 + 4);
    }
    *v71 = v72;
    v73 = *((_QWORD *)a2 + 4);
    v74 = *((_QWORD *)a2 + 5);
    v75 = (_DWORD *)(v73 + 4);
    *((_QWORD *)a2 + 4) = v73 + 4;
    v76 = *(_DWORD *)(v12 + 292);
    if (v73 + 8 > v74)
    {
      CA::Render::Encoder::grow(a2, 4);
      v75 = (_DWORD *)*((_QWORD *)a2 + 4);
    }
    *v75 = v76;
    v77 = *((_QWORD *)a2 + 4);
    v78 = *((_QWORD *)a2 + 5);
    v79 = (_DWORD *)(v77 + 4);
    *((_QWORD *)a2 + 4) = v77 + 4;
    v80 = *(_DWORD *)(v12 + 296);
    if (v77 + 8 > v78)
    {
      CA::Render::Encoder::grow(a2, 4);
      v79 = (_DWORD *)*((_QWORD *)a2 + 4);
    }
    *v79 = v80;
    v81 = *((_QWORD *)a2 + 4);
    v82 = *((_QWORD *)a2 + 5);
    v83 = (_OWORD *)(v81 + 4);
    *((_QWORD *)a2 + 4) = v81 + 4;
    if (v81 + 20 > v82)
    {
      CA::Render::Encoder::grow(a2, 16);
      v83 = (_OWORD *)*((_QWORD *)a2 + 4);
    }
    *v83 = *(_OWORD *)(v12 + 300);
    v84 = *((_QWORD *)a2 + 4);
    v85 = *((_QWORD *)a2 + 5);
    v86 = (_DWORD *)(v84 + 16);
    *((_QWORD *)a2 + 4) = v84 + 16;
    v87 = *(_DWORD *)(v12 + 316);
    if (v84 + 20 > v85)
    {
      CA::Render::Encoder::grow(a2, 4);
      v86 = (_DWORD *)*((_QWORD *)a2 + 4);
    }
    *v86 = v87;
    v88 = *((_QWORD *)a2 + 4);
    v89 = *((_QWORD *)a2 + 5);
    v90 = (_BYTE *)(v88 + 4);
    *((_QWORD *)a2 + 4) = v88 + 4;
    v91 = *(_BYTE *)(v12 + 320) & 1;
    if (v88 + 5 > v89)
    {
      CA::Render::Encoder::grow(a2, 1);
      v90 = (_BYTE *)*((_QWORD *)a2 + 4);
    }
    *((_QWORD *)a2 + 4) = v90 + 1;
    *v90 = v91;
  }
}

_QWORD *CA::Render::Encoder::encode_object_uncached(_QWORD *this, const CA::Render::Object *a2)
{
  _QWORD *v3;
  int v4;
  _BYTE *v5;

  v3 = this;
  if (a2)
    v4 = *((unsigned __int8 *)a2 + 12);
  else
    v4 = 0;
  v5 = (_BYTE *)this[4];
  if ((unint64_t)(v5 + 1) > this[5])
  {
    this = CA::Render::Encoder::grow((CA::Render::Encoder *)this, 1);
    v5 = (_BYTE *)v3[4];
  }
  v3[4] = v5 + 1;
  *v5 = v4;
  if (v4)
    return (_QWORD *)(*(uint64_t (**)(const CA::Render::Object *, _QWORD *))(*(_QWORD *)a2 + 32))(a2, v3);
  return this;
}

void CA::Render::Encoder::encode_object(CA::Render::Encoder *this, const CA::Render::Object *a2)
{
  uint64_t v4;
  int v5;
  _BYTE *v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  _DWORD *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  BOOL v15;
  _BYTE *v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  _DWORD *v21;

  if (!a2
    || !*((_QWORD *)this + 9)
    || !(*(unsigned int (**)(const CA::Render::Object *))(*(_QWORD *)a2 + 24))(a2))
  {
LABEL_25:
    CA::Render::Encoder::encode_object_uncached(this, a2);
    return;
  }
  v4 = *((_QWORD *)this + 9);
  os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::Encoder::ObjectCache::_lock);
  v5 = x_hash_table_lookup(*(_QWORD *)(v4 + 8), (uint64_t)a2, 0);
  if (!v5)
  {
    do
    {
      do
      {
        v12 = __ldaxr(CA::Render::next_sequence(void)::sequence);
        v13 = __stlxr(v12 + 1, CA::Render::next_sequence(void)::sequence);
        v14 = v12 + 1;
        v15 = v12 == -1;
      }
      while (v13);
    }
    while (v15);
    hash_table_modify(*(int **)(v4 + 8), (uint64_t)a2, v14, 0);
    *((_DWORD *)a2 + 3) |= 0x80000000;
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::Encoder::ObjectCache::_lock);
    v16 = (_BYTE *)*((_QWORD *)this + 4);
    if ((unint64_t)(v16 + 1) > *((_QWORD *)this + 5))
    {
      CA::Render::Encoder::grow(this, 1);
      v16 = (_BYTE *)*((_QWORD *)this + 4);
    }
    *((_QWORD *)this + 4) = v16 + 1;
    *v16 = -2;
    if (CA::Render::Encoder::initialize_render_id_slide(void)::once[0] != -1)
      dispatch_once(CA::Render::Encoder::initialize_render_id_slide(void)::once, &__block_literal_global_11026);
    v17 = (char *)a2 + CA::Render::_render_id_slide;
    v18 = (_QWORD *)*((_QWORD *)this + 4);
    if ((unint64_t)(v18 + 1) > *((_QWORD *)this + 5))
    {
      CA::Render::Encoder::grow(this, 8);
      v18 = (_QWORD *)*((_QWORD *)this + 4);
    }
    *v18 = v17;
    v19 = *((_QWORD *)this + 4);
    v20 = *((_QWORD *)this + 5);
    v21 = (_DWORD *)(v19 + 8);
    *((_QWORD *)this + 4) = v19 + 8;
    if (v19 + 12 > v20)
    {
      CA::Render::Encoder::grow(this, 4);
      v21 = (_DWORD *)*((_QWORD *)this + 4);
    }
    *v21 = v14;
    *((_QWORD *)this + 4) += 4;
    goto LABEL_25;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::Encoder::ObjectCache::_lock);
  v6 = (_BYTE *)*((_QWORD *)this + 4);
  if ((unint64_t)(v6 + 1) > *((_QWORD *)this + 5))
  {
    CA::Render::Encoder::grow(this, 1);
    v6 = (_BYTE *)*((_QWORD *)this + 4);
  }
  *((_QWORD *)this + 4) = v6 + 1;
  *v6 = -1;
  if (CA::Render::Encoder::initialize_render_id_slide(void)::once[0] != -1)
    dispatch_once(CA::Render::Encoder::initialize_render_id_slide(void)::once, &__block_literal_global_11026);
  v7 = (char *)a2 + CA::Render::_render_id_slide;
  v8 = (_QWORD *)*((_QWORD *)this + 4);
  if ((unint64_t)(v8 + 1) > *((_QWORD *)this + 5))
  {
    CA::Render::Encoder::grow(this, 8);
    v8 = (_QWORD *)*((_QWORD *)this + 4);
  }
  *v8 = v7;
  v9 = *((_QWORD *)this + 4);
  v10 = *((_QWORD *)this + 5);
  v11 = (_DWORD *)(v9 + 8);
  *((_QWORD *)this + 4) = v9 + 8;
  if (v9 + 12 > v10)
  {
    CA::Render::Encoder::grow(this, 4);
    v11 = (_DWORD *)*((_QWORD *)this + 4);
  }
  *v11 = v5;
  *((_QWORD *)this + 4) += 4;
}

_DWORD *CA::Render::Object::encode(_DWORD *this, CA::Render::Encoder *a2)
{
  unsigned int v3;
  unsigned int *v4;

  v3 = this[3];
  v4 = (unsigned int *)*((_QWORD *)a2 + 4);
  if ((unint64_t)(v4 + 1) > *((_QWORD *)a2 + 5))
  {
    this = CA::Render::Encoder::grow(a2, 4);
    v4 = (unsigned int *)*((_QWORD *)a2 + 4);
  }
  *v4 = v3 >> 8;
  *((_QWORD *)a2 + 4) += 4;
  return this;
}

CA::Layer *CA::Layer::sublayers(CA::Layer *this)
{
  CA::Layer *v1;
  CA::Transaction *v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  CA::Transaction *v7;
  uint64_t v8;
  uint64_t i;
  _QWORD *v10;
  CALayer *v11;
  _QWORD v12[2];

  while (1)
  {
    v1 = this;
    v12[1] = *MEMORY[0x1E0C80C00];
    if ((*((_DWORD *)this + 1) & 0x60000) == 0)
      return (CA::Layer *)*((_QWORD *)v1 + 3);
    if ((*((_DWORD *)this + 1) & 0x60000) == 0x20000)
      break;
    v7 = CA::Transaction::ensure_compat(this);
    this = CA::Layer::model_layer(v1, v7);
    if (!this)
      return this;
  }
  this = (CA::Layer *)*((_QWORD *)this + 3);
  if (!this)
  {
    v2 = CA::Transaction::ensure_compat(0);
    this = CA::Layer::model_layer(v1, v2);
    if (this)
    {
      v3 = (_QWORD *)*((_QWORD *)this + 3);
      if (!v3)
        return 0;
      v4 = v3[2];
      v5 = 8 * v4;
      if ((unint64_t)(8 * v4) > 0x1000)
      {
        v6 = (char *)malloc_type_malloc(8 * v4, 0x80040B8603338uLL);
        if (!v6)
          return (CA::Layer *)*((_QWORD *)v1 + 3);
      }
      else
      {
        MEMORY[0x1E0C80A78](this);
        v6 = (char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
        bzero(v6, 8 * v4);
      }
      v8 = 0;
      if (v4)
      {
        for (i = 0; i != v4; ++i)
        {
          v10 = v3 + 1;
          if (v3[2] != 1 || v3[3])
            v10 = (_QWORD *)*v10;
          v11 = CA::Layer::presentation_layer(*(CA::Layer **)(v10[i] + 16), (CA::Transaction::Shared **)v2);
          if (v11)
            *(_QWORD *)&v6[8 * v8++] = v11;
        }
      }
      *((_QWORD *)v1 + 3) = -[CALayerArray initWithLayers:count:retain:]([CALayerArray alloc], "initWithLayers:count:retain:", v6, v8, 1);
      if (v5 > 0x1000)
        free(v6);
      return (CA::Layer *)*((_QWORD *)v1 + 3);
    }
  }
  return this;
}

uint64_t CA::Render::Object::caches_encoding(CA::Render::Object *this)
{
  return 0;
}

uint64_t CA::Render::Layer::image_filter_from_string(const __CFString *this, const __CFString *a2)
{
  int v2;
  int v3;
  int v4;
  BOOL v5;
  unsigned int v6;
  uint64_t result;

  if (this == CFSTR("linear"))
    return 1;
  v2 = (int)a2;
  v3 = CAInternAtom(this, 0);
  v4 = v3;
  if (v3 <= 150)
  {
    if (v3 <= 72)
    {
      if (v3 == 38)
      {
        v5 = v2 == 0;
        v6 = 9;
      }
      else
      {
        if (v3 != 39)
          return 1;
        v5 = v2 == 0;
        v6 = 10;
      }
    }
    else
    {
      switch(v3)
      {
        case 'I':
          v5 = v2 == 0;
          v6 = 5;
          break;
        case 'J':
          v5 = v2 == 0;
          v6 = 6;
          break;
        case 'K':
          v5 = v2 == 0;
          v6 = 7;
          break;
        default:
          return 1;
      }
    }
LABEL_26:
    if (v5)
      return 1;
    else
      return v6;
  }
  if (v3 <= 353)
  {
    if (v3 == 151)
      return 3;
    if (v3 != 332)
      return 1;
    v5 = v2 == 0;
    v6 = 4;
    goto LABEL_26;
  }
  if (v3 == 354)
    return 8;
  result = 0;
  if (v4 != 389)
  {
    if (v4 != 563)
      return 1;
    if (v2)
      return 2;
    else
      return 1;
  }
  return result;
}

uint64_t CA::Context::current_colorspace(CA::Context *this, CA::Transaction *a2)
{
  uint64_t v2;

  if ((this || (this = *(CA::Context **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 576)) != 0)
    && (v2 = *((_QWORD *)this + 5)) != 0)
  {
    return *(_QWORD *)(v2 + 112);
  }
  else
  {
    return CAGetColorSpace(0x1Du);
  }
}

uint64_t CA::Render::Layer::set_sublayers(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;

  v2 = a2;
  v4 = *(_DWORD *)(a1 + 12);
  result = *(_QWORD *)(a1 + 104);
  if ((v4 & 0x2000) == 0)
  {
    if (result == a2)
      return result;
    if (result)
    {
      v6 = (unsigned int *)(result + 8);
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
    }
    if (!v2)
      goto LABEL_20;
    goto LABEL_17;
  }
  if (result)
  {
    v9 = (unsigned int *)(result + 8);
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
    v4 = *(_DWORD *)(a1 + 12);
  }
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 12) = v4 & 0xFFFFDFFF;
  if (v2)
  {
LABEL_17:
    v12 = (unsigned int *)(v2 + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
    if (!v13)
    {
      v2 = 0;
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 - 1, v12));
    }
LABEL_20:
    *(_QWORD *)(a1 + 104) = v2;
  }
  return result;
}

void CA::Layer::commit_animations(CA::Layer *this, CA::Transaction *a2, double (*a3)(CA::Layer *, double, void *), const __CFString *a4, CALayer *a5, CA::Render::TimingList *(*a6)(CA::Layer *, void *), void *a7)
{
  double (*v7)(CA::Layer *, double, void *);
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  _BYTE *v15;
  double v16;
  __CFString *v17;
  __CFString *v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  double v23;
  double v24;
  CALayer *v25;
  CA::Layer *v26;
  malloc_zone_t *malloc_zone;
  _DWORD *v28;
  _DWORD *v29;
  int v30;
  double v31;
  unsigned int *v32;
  unsigned int v33;
  double *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t *v45;
  uint64_t *v46;
  _QWORD *v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  unint64_t v56;
  uint64_t v57;
  BOOL v58;
  double v59;
  _DWORD *v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int v63;
  double v64;
  double v65;
  _DWORD *v66;
  __int16 v67;
  uint64_t v68;
  uint64_t v69;
  const __CFString *v70;
  CFStringRef Copy;
  CFHashCode v72;
  const void *v73;
  const __CFString *v74;
  _DWORD *v75;
  void **v76;
  CA::Render::Context *v77;
  CA::Render::Object *v78;
  CA::Render::Encoder *v79;
  char *v80;
  _BYTE *v81;
  _QWORD *v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t *v90;
  uint64_t *v91;
  uint64_t *v92;
  __int16 v93;
  __CFString *v94;
  CA::Render::Context *v95;
  CA::Render::Object *v96;
  CA::Render *v97;
  CA::Render::Encoder *v98;
  uint64_t v99;
  CA::Transaction *v100;
  int v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  double (*v105)(CA::Layer *, double, void *);
  uint64_t v107;
  double v108[2];

  v7 = a3;
  v108[1] = *(double *)MEMORY[0x1E0C80C00];
  v9 = *((_QWORD *)a3 + 4);
  if (v9)
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
  else
    v10 = 0;
  v11 = *((_QWORD *)this + 35);
  v107 = v11;
  if (!v11)
    return;
  v12 = *(_DWORD *)(*((_QWORD *)a2 + 5) + 8);
  v99 = v11;
  v100 = (CA::Transaction *)((char *)v7 + 48);
  v13 = v11;
  v105 = v7;
  v101 = v12;
  v102 = v10;
  do
  {
    v14 = *(_WORD *)(v13 + 56);
    if ((v14 & 0x20) == 0)
    {
      if ((v14 & 2) == 0)
      {
        *(_DWORD *)(v13 + 44) = v12;
        v104 = v13;
        v15 = *(_BYTE **)(v13 + 8);
        v16 = 0.0;
        if ((v15[16] & 4) != 0)
          goto LABEL_28;
        v17 = (__CFString *)objc_msgSend(*(id *)(v13 + 8), "beginTimeMode");
        v18 = v17;
        if (v17 == CFSTR("non-zero"))
        {
          objc_msgSend(v15, "beginTime");
          if (v23 == 0.0)
            goto LABEL_28;
        }
        else
        {
          if (v17 == CFSTR("relative"))
            goto LABEL_69;
          if (v17 == CFSTR("absolute"))
            goto LABEL_75;
        }
        if (-[__CFString isEqualToString:](v18, "isEqualToString:", CFSTR("non-zero"), v99))
        {
          objc_msgSend(v15, "beginTime");
          if (v24 == 0.0)
          {
LABEL_28:
            if (v10)
            {
LABEL_29:
              v103 = *(_QWORD *)(v104 + 8);
              v25 = (CALayer *)*((_QWORD *)this + 2);
              v26 = *(CA::Layer **)v7;
              malloc_zone = (malloc_zone_t *)get_malloc_zone();
              v28 = malloc_type_zone_calloc(malloc_zone, 1uLL, 0x138uLL, 0x743898A5uLL);
              v29 = v28;
              if (v28)
              {
                v28[2] = 1;
                v28[3] = 53;
                ++dword_1ECDC7CFC;
                *(_QWORD *)v28 = off_1E15963D0;
                *((_QWORD *)v28 + 2) = v28 + 12;
                *((_QWORD *)v28 + 3) = v28 + 12;
                *((_QWORD *)v28 + 4) = v28 + 12;
                *((_QWORD *)v28 + 5) = 32;
                v28[76] = 1065353216;
              }
              v30 = *((_DWORD *)v26 + 25);
              *((_DWORD *)v26 + 25) = v30 + 1;
              if (!v30)
                os_unfair_lock_lock((os_unfair_lock_t)&CA::Transaction::transaction_lock);
              while (v25)
              {
                v108[0] = 0.0;
                CA::Layer::render_timing((uint64_t)v108, (CA::Transaction *)v25->_attr.layer, v26);
                v31 = v108[0];
                if (*(_QWORD *)&v108[0])
                {
                  v32 = (unsigned int *)(*(_QWORD *)&v108[0] + 8);
                  do
                    v33 = __ldaxr(v32);
                  while (__stlxr(v33 + 1, v32));
                  if (!v33)
                  {
                    do
                      v51 = __ldaxr(v32);
                    while (__stlxr(v51 - 1, v32));
                  }
                  *((float *)v29 + 76) = *((float *)v29 + 76) * *(float *)(*(_QWORD *)&v31 + 16);
                  v35 = *((_QWORD *)v29 + 2);
                  v34 = (double *)*((_QWORD *)v29 + 3);
                  v36 = ((uint64_t)v34 - v35) >> 3;
                  v37 = *((_QWORD *)v29 + 5);
                  if (v37 < v36 + 1)
                  {
                    v38 = *((_QWORD *)v29 + 4);
                    v39 = (v37 + 1) | ((v37 + 1) >> 1) | (((v37 + 1) | ((v37 + 1) >> 1)) >> 2);
                    v40 = v39 | (v39 >> 4) | ((v39 | (v39 >> 4)) >> 8);
                    v41 = v40 | (v40 >> 16) | ((v40 | (v40 >> 16)) >> 32);
                    if (v41 + 1 > v36 + 1)
                      v42 = v41 + 1;
                    else
                      v42 = v36 + 1;
                    v43 = malloc_type_malloc(8 * v42, 0x2004093837F09uLL);
                    v44 = v43;
                    v45 = (uint64_t *)*((_QWORD *)v29 + 2);
                    v46 = (uint64_t *)*((_QWORD *)v29 + 3);
                    if (v45 != v46)
                    {
                      v47 = v43;
                      do
                      {
                        v48 = *v45++;
                        *v47++ = v48;
                      }
                      while (v45 != v46);
                    }
                    if (v35 != v38)
                      free(*((void **)v29 + 2));
                    v34 = (double *)&v44[v36];
                    *((_QWORD *)v29 + 2) = v44;
                    *((_QWORD *)v29 + 3) = v34;
                    *((_QWORD *)v29 + 5) = v42;
                    v7 = v105;
                  }
                  *v34 = v31;
                  *((_QWORD *)v29 + 3) += 8;
                  do
                  {
                    v49 = __ldaxr(v32);
                    v50 = v49 - 1;
                  }
                  while (__stlxr(v50, v32));
                  if (!v50)
                    (*(void (**)(double))(**(_QWORD **)&v31 + 16))(COERCE_DOUBLE(*(_QWORD *)&v31));
                }
                v25 = CA::Layer::superlayer((CA::Layer *)v25->_attr.layer, v26);
              }
              v52 = *((_QWORD *)v29 + 2);
              v53 = *((_QWORD *)v29 + 3);
              v54 = (_QWORD *)(v53 - 8);
              if (v52 != v53 && (unint64_t)v54 > v52)
              {
                v56 = v52 + 8;
                do
                {
                  v57 = *(_QWORD *)(v56 - 8);
                  *(_QWORD *)(v56 - 8) = *v54;
                  *v54-- = v57;
                  v58 = v56 >= (unint64_t)v54;
                  v56 += 8;
                }
                while (!v58);
              }
              CA::Transaction::unlock(v26);
              (*(void (**)(_QWORD, uint64_t, uint64_t, _DWORD *, double))(**((_QWORD **)v7 + 4) + 48))(*((_QWORD *)v7 + 4), v103, v104, v29, v16);
              v59 = CA::Render::TimingList::map_time((CA::Render::TimingList *)v29, *((double *)v7 + 2) + v16);
              v60 = *(_DWORD **)(v104 + 8);
              v60[4] &= 0xFFFFFFFA;
              objc_msgSend(v60, "setBeginTime:", v59);
              v12 = v101;
              v10 = v102;
              objc_msgSend(*(id *)(v104 + 8), "setBeginTimeMode:", CFSTR("absolute"));
              *(_DWORD *)(*(_QWORD *)(v104 + 8) + 16) |= 1u;
              *(_WORD *)(v104 + 56) = *(_WORD *)(v104 + 56) & 0xFFF7 | (8 * (byte_1ECDC6B01 == 0));
              if (v29)
              {
                v61 = v29 + 2;
                do
                {
                  v62 = __ldaxr(v61);
                  v63 = v62 - 1;
                }
                while (__stlxr(v63, v61));
                if (!v63)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v29 + 16))(v29);
              }
              goto LABEL_75;
            }
LABEL_70:
            if (v16 == 0.0)
            {
              v65 = *(double *)v100;
              if (*(double *)v100 < 0.0)
              {
                *((_QWORD *)v7 + 6) = *((_QWORD *)v7 + 2);
                CA::Layer::convert_time(*(CA::Layer **)v7, v100, 0, *((CALayer **)this + 2), a5);
                v65 = *((double *)v7 + 6);
              }
            }
            else
            {
              v108[0] = *((double *)v7 + 2) + v16;
              CA::Layer::convert_time(*(CA::Layer **)v7, (CA::Transaction *)v108, 0, *((CALayer **)this + 2), a5);
              v65 = v108[0];
            }
            v66 = *(_DWORD **)(v104 + 8);
            v66[4] &= 0xFFFFFFFA;
            objc_msgSend(v66, "setBeginTime:", v65, v99);
            objc_msgSend(*(id *)(v104 + 8), "setBeginTimeMode:", CFSTR("absolute"));
            *(_DWORD *)(*(_QWORD *)(v104 + 8) + 16) |= 1u;
LABEL_75:
            v13 = v104;
            v67 = *(_WORD *)(v104 + 56) | 2;
            *(_WORD *)(v104 + 56) = v67;
            if ((v67 & 0x100) == 0)
            {
LABEL_113:
              if (!*(_QWORD *)(v13 + 32))
                *(_QWORD *)(v13 + 32) = CAMediaTimingCopyRenderTiming(*(_QWORD *)(v13 + 8));
              goto LABEL_115;
            }
LABEL_76:
            v68 = objc_msgSend(*(id *)(v13 + 8), "_copyRenderAnimationForLayer:", *((_QWORD *)this + 2), v99);
            if (v68)
            {
              v69 = v68;
              v70 = *(const __CFString **)(v13 + 16);
              if (v70)
              {
                Copy = CFStringCreateCopy(0, v70);
                v72 = CFHash(Copy);
              }
              else
              {
                v72 = 0;
                Copy = 0;
              }
              *(_QWORD *)(v69 + 64) = v72;
              v73 = *(const void **)(v69 + 56);
              if (v73)
                CFRelease(v73);
              *(_QWORD *)(v69 + 56) = Copy;
              *(_DWORD *)(v69 + 72) = *(_DWORD *)(v13 + 40);
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                v108[0] = 0.0;
                v75 = *(_DWORD **)(v69 + 96);
                if (!v75 || (v75 & 1) == 0 && !*v75)
                {
                  CA::Render::key_path_set((CA::Render *)v108, *(CFStringRef *)(v13 + 16), v74);
                  CA::Render::key_path_free(*(CA::Render **)(v69 + 96), v76);
                  *(double *)(v69 + 96) = v108[0];
                }
              }
              v77 = (CA::Render::Context *)*((_QWORD *)v7 + 5);
              if (v77)
              {
                if (CA::Render::Encoder::initialize_render_id_slide(void)::once[0] != -1)
                  dispatch_once(CA::Render::Encoder::initialize_render_id_slide(void)::once, &__block_literal_global_11026);
                if (this)
                  v78 = (CA::Layer *)((char *)this + CA::Render::_render_id_slide);
                else
                  v78 = 0;
                CA::Render::Context::add_animation(v77, v78, (CA::Render::Animation *)v69);
              }
              v79 = (CA::Render::Encoder *)*((_QWORD *)v7 + 4);
              if (v79)
              {
                if (CA::Render::Encoder::initialize_render_id_slide(void)::once[0] != -1)
                  dispatch_once(CA::Render::Encoder::initialize_render_id_slide(void)::once, &__block_literal_global_11026);
                if (this)
                  v80 = (char *)this + CA::Render::_render_id_slide;
                else
                  v80 = 0;
                v81 = (_BYTE *)*((_QWORD *)v79 + 4);
                if ((unint64_t)(v81 + 1) > *((_QWORD *)v79 + 5))
                {
                  CA::Render::Encoder::grow(v79, 1);
                  v81 = (_BYTE *)*((_QWORD *)v79 + 4);
                }
                *((_QWORD *)v79 + 4) = v81 + 1;
                *v81 = 4;
                v82 = (_QWORD *)*((_QWORD *)v79 + 4);
                if ((unint64_t)(v82 + 1) > *((_QWORD *)v79 + 5))
                {
                  CA::Render::Encoder::grow(v79, 8);
                  v82 = (_QWORD *)*((_QWORD *)v79 + 4);
                }
                *v82 = v80;
                *((_QWORD *)v79 + 4) += 8;
                CA::Render::Encoder::encode_object(v79, (const CA::Render::Object *)v69);
              }
              *((_BYTE *)v7 + 56) = 1;
              v83 = *(_QWORD *)(v69 + 40);
              if (v83)
              {
                v84 = (unsigned int *)(v83 + 8);
                do
                  v85 = __ldaxr(v84);
                while (__stlxr(v85 + 1, v84));
                if (!v85)
                {
                  do
                  {
                    v83 = 0;
                    v89 = __ldaxr(v84);
                  }
                  while (__stlxr(v89 - 1, v84));
                }
              }
              *(_QWORD *)(v13 + 32) = v83;
              v86 = (unsigned int *)(v69 + 8);
              do
              {
                v87 = __ldaxr(v86);
                v88 = v87 - 1;
              }
              while (__stlxr(v88, v86));
              if (!v88)
                (*(void (**)(uint64_t))(*(_QWORD *)v69 + 16))(v69);
            }
            goto LABEL_113;
          }
        }
        if (!-[__CFString isEqualToString:](v18, "isEqualToString:", CFSTR("relative")))
          goto LABEL_75;
LABEL_69:
        objc_msgSend(v15, "beginTime", v99);
        v16 = v64;
        if (v10)
          goto LABEL_29;
        goto LABEL_70;
      }
      if (*(_DWORD *)(v13 + 44) != v12)
      {
        *(_DWORD *)(v13 + 44) = v12;
        v19 = *(unsigned int **)(v13 + 32);
        if (v19)
        {
          v20 = v19 + 2;
          do
          {
            v21 = __ldaxr(v20);
            v22 = v21 - 1;
          }
          while (__stlxr(v22, v20));
          if (!v22)
            (*(void (**)(unsigned int *))(*(_QWORD *)v19 + 16))(v19);
          v14 = *(_WORD *)(v13 + 56);
        }
        *(_QWORD *)(v13 + 32) = 0;
        if ((v14 & 0x100) == 0)
          goto LABEL_113;
        goto LABEL_76;
      }
    }
    if ((v14 & 1) != 0 && (*((_DWORD *)this + 13) & 0x100000) == 0)
      *(_WORD *)(v13 + 56) = v14 | 4;
LABEL_115:
    v13 = *(_QWORD *)v13;
  }
  while (v13);
  v90 = &v107;
  v91 = (uint64_t *)v99;
  do
  {
    v92 = v90;
    v90 = v91;
    while (1)
    {
      v93 = *((_WORD *)v90 + 28);
      if ((v93 & 0x24) == 0)
        break;
      *v92 = *v90;
      if ((v90[7] & 0x124) == 0x104)
      {
        v94 = (__CFString *)v90[2];
        v95 = (CA::Render::Context *)*((_QWORD *)v7 + 5);
        if (v95)
        {
          if (CA::Render::Encoder::initialize_render_id_slide(void)::once[0] != -1)
            dispatch_once(CA::Render::Encoder::initialize_render_id_slide(void)::once, &__block_literal_global_11026);
          if (this)
            v96 = (CA::Layer *)((char *)this + CA::Render::_render_id_slide);
          else
            v96 = 0;
          CA::Render::Context::remove_animation(v95, v96, v94);
        }
        v97 = (CA::Render *)*((_QWORD *)v7 + 4);
        if (v97)
        {
          if (CA::Render::Encoder::initialize_render_id_slide(void)::once[0] != -1)
            dispatch_once(CA::Render::Encoder::initialize_render_id_slide(void)::once, &__block_literal_global_11026);
          if (this)
            v98 = (CA::Layer *)((char *)this + CA::Render::_render_id_slide);
          else
            v98 = 0;
          CA::Render::encode_remove_animation(v97, v98, v94, a4);
        }
        *((_BYTE *)v7 + 56) = 1;
      }
      schedule_stop_callback((uint64_t)v90, (uint64_t *)&animation_state);
      *v90 = qword_1ECDC5160;
      qword_1ECDC5160 = (uint64_t)v90;
      v90 = (uint64_t *)*v92;
      if (!*v92)
        goto LABEL_142;
    }
    if ((v93 & 0x40) != 0)
      *((_WORD *)v90 + 28) = v93 & 0xFFBF;
    v91 = (uint64_t *)*v90;
  }
  while (*v90);
LABEL_142:
  CA::Layer::set_animations(this, v107);
}

void sub_18449FB98(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t CA::Render::Encoder::is_deferred(CA::Render::Encoder *this)
{
  return 0;
}

BOOL CA::Render::Shmem::caches_encoding(CA::Render::Shmem *this)
{
  return (*((_BYTE *)this + 13) & 0x40) == 0;
}

uint64_t CA::Render::Image::caches_encoding(CA::Render::Image *this)
{
  char *v2;
  void *v3;
  unsigned int *v4;
  unsigned int v5;
  _DWORD *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  if (!*((_QWORD *)this + 15))
  {
    v2 = (char *)CA::Render::Image::data_size(this);
    if ((unint64_t)v2 >= *MEMORY[0x1E0C85AD8])
    {
      v4 = (unsigned int *)((char *)this + 148);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 + 1, v4));
      v6 = CA::Render::Shmem::new_shmem(*((_QWORD *)this + 12), v2, 64, (uint64_t (*)(CA::Render *, _QWORD *, void *))CA::Render::release_image_data, (void (*)(const void *, void *))this, v3);
      v7 = (unsigned int *)*((_QWORD *)this + 15);
      *((_QWORD *)this + 15) = v6;
      if (v7)
      {
        v8 = v7 + 2;
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
          (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
      }
    }
  }
  return 1;
}

_QWORD *CA::Render::Layer::set_rasterization_scale(_QWORD *this, float a2)
{
  _QWORD *v3;
  int v4;

  v3 = this;
  v4 = (int)a2;
  if (truncf(a2) != a2 || this[16])
  {
    this = CA::Render::Layer::ensure_ext((CA::Render::Layer *)this);
    *((float *)this + 71) = a2;
  }
  *((_BYTE *)v3 + 35) = v4;
  return this;
}

_QWORD *CA::Render::Layer::set_contents_scale(_QWORD *this, float a2)
{
  _QWORD *v3;
  int v4;

  v3 = this;
  v4 = (int)a2;
  if (truncf(a2) != a2 || this[16])
  {
    this = CA::Render::Layer::ensure_ext((CA::Render::Layer *)this);
    *((float *)this + 70) = a2;
  }
  *((_BYTE *)v3 + 34) = v4;
  return this;
}

uint64_t CA::Render::DeferredEncoder::is_deferred(CA::Render::DeferredEncoder *this)
{
  return 1;
}

id CA::Layer::identifiers(CA::Layer *this)
{
  CA::Transaction *v2;
  int v3;
  id v4;
  id v6[2];

  v6[1] = *(id *)MEMORY[0x1E0C80C00];
  v2 = CA::Transaction::ensure_compat(this);
  v3 = *((_DWORD *)v2 + 25);
  *((_DWORD *)v2 + 25) = v3 + 1;
  if (!v3)
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Transaction::transaction_lock);
  v6[0] = 0;
  CA::Layer::getter(this, 0x104u, (const CGAffineTransform *)2, v6);
  v4 = v6[0];
  CA::Transaction::unlock(v2);
  return v4;
}

void sub_1844A01AC(_Unwind_Exception *a1)
{
  CA::Transaction *v1;

  CA::Transaction::unlock(v1);
  _Unwind_Resume(a1);
}

void CA::Render::BackdropLayer::encode(CA::Render::BackdropLayer *this, CA::Render::Encoder *a2)
{
  uint64_t v4;
  _QWORD *v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _DWORD *v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  _DWORD *v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  _OWORD *v18;
  __int128 v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  char v23;

  CA::Render::Object::encode(this, a2);
  v4 = *((_QWORD *)this + 2);
  v5 = (_QWORD *)*((_QWORD *)a2 + 4);
  if ((unint64_t)(v5 + 1) > *((_QWORD *)a2 + 5))
  {
    CA::Render::Encoder::grow(a2, 8);
    v5 = (_QWORD *)*((_QWORD *)a2 + 4);
  }
  *v5 = v4;
  *((_QWORD *)a2 + 4) += 8;
  CA::Render::Encoder::encode_object(a2, *((const CA::Render::Object **)this + 3));
  v6 = *((_DWORD *)this + 8);
  v7 = (_DWORD *)*((_QWORD *)a2 + 4);
  if ((unint64_t)(v7 + 1) > *((_QWORD *)a2 + 5))
  {
    CA::Render::Encoder::grow(a2, 4);
    v7 = (_DWORD *)*((_QWORD *)a2 + 4);
  }
  *v7 = v6;
  v8 = *((_QWORD *)a2 + 4);
  v9 = *((_QWORD *)a2 + 5);
  v10 = (_DWORD *)(v8 + 4);
  *((_QWORD *)a2 + 4) = v8 + 4;
  v11 = *((_DWORD *)this + 9);
  if (v8 + 8 > v9)
  {
    CA::Render::Encoder::grow(a2, 4);
    v10 = (_DWORD *)*((_QWORD *)a2 + 4);
  }
  *v10 = v11;
  v12 = *((_QWORD *)a2 + 4);
  v13 = *((_QWORD *)a2 + 5);
  v14 = (_DWORD *)(v12 + 4);
  *((_QWORD *)a2 + 4) = v12 + 4;
  v15 = *((_DWORD *)this + 10);
  if (v12 + 8 > v13)
  {
    CA::Render::Encoder::grow(a2, 4);
    v14 = (_DWORD *)*((_QWORD *)a2 + 4);
  }
  *v14 = v15;
  v16 = *((_QWORD *)a2 + 4);
  v17 = *((_QWORD *)a2 + 5);
  v18 = (_OWORD *)(v16 + 4);
  *((_QWORD *)a2 + 4) = v16 + 4;
  if (v16 + 36 > v17)
  {
    CA::Render::Encoder::grow(a2, 32);
    v18 = (_OWORD *)*((_QWORD *)a2 + 4);
  }
  v19 = *((_OWORD *)this + 4);
  *v18 = *((_OWORD *)this + 3);
  v18[1] = v19;
  v20 = *((_QWORD *)a2 + 4);
  v21 = *((_QWORD *)a2 + 5);
  v22 = (_BYTE *)(v20 + 32);
  *((_QWORD *)a2 + 4) = v20 + 32;
  v23 = *((_BYTE *)this + 80);
  if (v20 + 33 > v21)
  {
    CA::Render::Encoder::grow(a2, 1);
    v22 = (_BYTE *)*((_QWORD *)a2 + 4);
  }
  *((_QWORD *)a2 + 4) = v22 + 1;
  *v22 = v23;
}

CA::Render::Layer *CA::Render::Layer::set_border_color(CA::Render::Layer *result, float a2, float a3, float a4, float a5)
{
  if (*((_QWORD *)result + 16) || a2 != 0.0 || a3 != 0.0 || a4 != 0.0 || a5 != 1.0)
  {
    result = (CA::Render::Layer *)CA::Render::Layer::ensure_ext(result);
    *((float *)result + 60) = a2;
    *((float *)result + 61) = a3;
    *((float *)result + 62) = a4;
    *((float *)result + 63) = a5;
  }
  return result;
}

void *CA::Render::LayerHost::encode(CA::Render::LayerHost *this, CA::Render::Encoder *a2)
{
  int v4;
  _DWORD *v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  const void *v16;
  size_t v17;
  void *result;

  CA::Render::Object::encode(this, a2);
  v4 = *((_DWORD *)this + 4);
  v5 = (_DWORD *)*((_QWORD *)a2 + 4);
  if ((unint64_t)(v5 + 1) > *((_QWORD *)a2 + 5))
  {
    CA::Render::Encoder::grow(a2, 4);
    v5 = (_DWORD *)*((_QWORD *)a2 + 4);
  }
  *v5 = v4;
  v6 = *((_QWORD *)a2 + 4);
  v7 = *((_QWORD *)a2 + 5);
  v8 = (_QWORD *)(v6 + 4);
  *((_QWORD *)a2 + 4) = v6 + 4;
  v9 = *((_QWORD *)this + 8);
  if (v6 + 12 > v7)
  {
    CA::Render::Encoder::grow(a2, 8);
    v8 = (_QWORD *)*((_QWORD *)a2 + 4);
  }
  *v8 = v9;
  v10 = *((_QWORD *)a2 + 4);
  v11 = *((_QWORD *)a2 + 5);
  v12 = (_DWORD *)(v10 + 8);
  *((_QWORD *)a2 + 4) = v10 + 8;
  v13 = (*((_QWORD *)this + 6) - *((_QWORD *)this + 5)) >> 3;
  if (v10 + 12 > v11)
  {
    CA::Render::Encoder::grow(a2, 4);
    v12 = (_DWORD *)*((_QWORD *)a2 + 4);
  }
  *v12 = v13;
  v14 = *((_QWORD *)a2 + 5);
  v15 = (void *)(*((_QWORD *)a2 + 4) + 4);
  *((_QWORD *)a2 + 4) = v15;
  v16 = (const void *)*((_QWORD *)this + 5);
  v17 = *((_QWORD *)this + 6) - (_QWORD)v16;
  if ((unint64_t)v15 + v17 > v14)
  {
    CA::Render::Encoder::grow(a2, v17);
    v15 = (void *)*((_QWORD *)a2 + 4);
  }
  result = memcpy(v15, v16, v17);
  *((_QWORD *)a2 + 4) += v17;
  return result;
}

uint64_t CA::Render::Surface::caches_encoding(CA::Render::Surface *this)
{
  return 1;
}

void CA::Render::SpringAnimation::encode(const CA::Render::Object **this, CA::Render::Encoder *a2)
{
  const CA::Render::Object *v4;
  const CA::Render::Object **v5;
  uint64_t v6;
  unint64_t v7;
  const CA::Render::Object **v8;
  const CA::Render::Object *v9;
  uint64_t v10;
  unint64_t v11;
  const CA::Render::Object **v12;
  const CA::Render::Object *v13;
  uint64_t v14;
  unint64_t v15;
  const CA::Render::Object **v16;
  const CA::Render::Object *v17;

  CA::Render::BasicAnimation0::encode(this, a2);
  v4 = this[19];
  v5 = (const CA::Render::Object **)*((_QWORD *)a2 + 4);
  if ((unint64_t)(v5 + 1) > *((_QWORD *)a2 + 5))
  {
    CA::Render::Encoder::grow(a2, 8);
    v5 = (const CA::Render::Object **)*((_QWORD *)a2 + 4);
  }
  *v5 = v4;
  v6 = *((_QWORD *)a2 + 4);
  v7 = *((_QWORD *)a2 + 5);
  v8 = (const CA::Render::Object **)(v6 + 8);
  *((_QWORD *)a2 + 4) = v6 + 8;
  v9 = this[20];
  if (v6 + 16 > v7)
  {
    CA::Render::Encoder::grow(a2, 8);
    v8 = (const CA::Render::Object **)*((_QWORD *)a2 + 4);
  }
  *v8 = v9;
  v10 = *((_QWORD *)a2 + 4);
  v11 = *((_QWORD *)a2 + 5);
  v12 = (const CA::Render::Object **)(v10 + 8);
  *((_QWORD *)a2 + 4) = v10 + 8;
  v13 = this[21];
  if (v10 + 16 > v11)
  {
    CA::Render::Encoder::grow(a2, 8);
    v12 = (const CA::Render::Object **)*((_QWORD *)a2 + 4);
  }
  *v12 = v13;
  v14 = *((_QWORD *)a2 + 4);
  v15 = *((_QWORD *)a2 + 5);
  v16 = (const CA::Render::Object **)(v14 + 8);
  *((_QWORD *)a2 + 4) = v14 + 8;
  v17 = this[22];
  if (v14 + 16 > v15)
  {
    CA::Render::Encoder::grow(a2, 8);
    v16 = (const CA::Render::Object **)*((_QWORD *)a2 + 4);
  }
  *v16 = v17;
  *((_QWORD *)a2 + 4) += 8;
}

double CA::Render::CompressedImage::encode(CA::Render::CompressedImage *this, CA::Render::Encoder *a2)
{
  int v4;
  _DWORD *v5;
  uint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  _DWORD *v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  _DWORD *v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  _BYTE *v36;
  char v37;
  uint64_t v38;
  _QWORD *v39;
  mach_port_name_t v40;
  memory_object_offset_t v41;
  _QWORD *v42;
  unsigned int *v43;
  unsigned int v44;
  CA::Render::CompressedImage *v45;
  uint64_t v46;
  double result;
  unsigned int v48;
  memory_object_size_t v49[2];

  v49[1] = *MEMORY[0x1E0C80C00];
  v4 = *((_DWORD *)this + 3) >> 8;
  v5 = (_DWORD *)*((_QWORD *)a2 + 4);
  if ((unint64_t)(v5 + 1) > *((_QWORD *)a2 + 5))
  {
    CA::Render::Encoder::grow(a2, 4);
    v5 = (_DWORD *)*((_QWORD *)a2 + 4);
  }
  *v5 = v4;
  v6 = *((_QWORD *)a2 + 4);
  v7 = *((_QWORD *)a2 + 5);
  v8 = (_DWORD *)(v6 + 4);
  *((_QWORD *)a2 + 4) = v6 + 4;
  v9 = *((_DWORD *)this + 4);
  if (v6 + 8 > v7)
  {
    CA::Render::Encoder::grow(a2, 4);
    v8 = (_DWORD *)*((_QWORD *)a2 + 4);
  }
  *v8 = v9;
  v10 = *((_QWORD *)a2 + 4);
  v11 = *((_QWORD *)a2 + 5);
  v12 = (_DWORD *)(v10 + 4);
  *((_QWORD *)a2 + 4) = v10 + 4;
  v13 = *((_DWORD *)this + 5);
  if (v10 + 8 > v11)
  {
    CA::Render::Encoder::grow(a2, 4);
    v12 = (_DWORD *)*((_QWORD *)a2 + 4);
  }
  *v12 = v13;
  v14 = *((_QWORD *)a2 + 4);
  v15 = *((_QWORD *)a2 + 5);
  v16 = (_DWORD *)(v14 + 4);
  *((_QWORD *)a2 + 4) = v14 + 4;
  v17 = *((_DWORD *)this + 38);
  if (v14 + 8 > v15)
  {
    CA::Render::Encoder::grow(a2, 4);
    v16 = (_DWORD *)*((_QWORD *)a2 + 4);
  }
  *v16 = v17;
  v18 = (_QWORD *)(*((_QWORD *)a2 + 4) + 4);
  *((_QWORD *)a2 + 4) = v18;
  if (*((int *)this + 38) >= 1)
  {
    v19 = 0;
    do
    {
      v20 = *(_QWORD *)(*((_QWORD *)this + 16) + 8 * v19);
      if ((unint64_t)(v18 + 1) > *((_QWORD *)a2 + 5))
      {
        CA::Render::Encoder::grow(a2, 8);
        v18 = (_QWORD *)*((_QWORD *)a2 + 4);
      }
      *v18 = v20;
      v21 = *((_QWORD *)a2 + 4);
      v22 = *((_QWORD *)a2 + 5);
      v23 = (_QWORD *)(v21 + 8);
      *((_QWORD *)a2 + 4) = v21 + 8;
      v24 = *(_QWORD *)(*((_QWORD *)this + 17) + 8 * v19);
      if (v21 + 16 > v22)
      {
        CA::Render::Encoder::grow(a2, 8);
        v23 = (_QWORD *)*((_QWORD *)a2 + 4);
      }
      *v23 = v24;
      v25 = *((_QWORD *)a2 + 4);
      v26 = *((_QWORD *)a2 + 5);
      v27 = (_QWORD *)(v25 + 8);
      *((_QWORD *)a2 + 4) = v25 + 8;
      v28 = *(_QWORD *)(*((_QWORD *)this + 18) + 8 * v19);
      if (v25 + 16 > v26)
      {
        CA::Render::Encoder::grow(a2, 8);
        v27 = (_QWORD *)*((_QWORD *)a2 + 4);
      }
      *v27 = v28;
      v18 = (_QWORD *)(*((_QWORD *)a2 + 4) + 8);
      *((_QWORD *)a2 + 4) = v18;
      ++v19;
    }
    while (v19 < *((int *)this + 38));
  }
  v29 = *((_DWORD *)this + 40);
  if ((unint64_t)v18 + 4 > *((_QWORD *)a2 + 5))
  {
    CA::Render::Encoder::grow(a2, 4);
    v18 = (_QWORD *)*((_QWORD *)a2 + 4);
  }
  *(_DWORD *)v18 = v29;
  v30 = *((_QWORD *)a2 + 4);
  v31 = *((_QWORD *)a2 + 5);
  v32 = (_DWORD *)(v30 + 4);
  *((_QWORD *)a2 + 4) = v30 + 4;
  v33 = *((_DWORD *)this + 42);
  if (v30 + 8 > v31)
  {
    CA::Render::Encoder::grow(a2, 4);
    v32 = (_DWORD *)*((_QWORD *)a2 + 4);
  }
  *v32 = v33;
  v34 = *((_QWORD *)a2 + 4);
  v35 = *((_QWORD *)a2 + 5);
  v36 = (_BYTE *)(v34 + 4);
  *((_QWORD *)a2 + 4) = v34 + 4;
  v37 = *((_BYTE *)this + 176) & 1;
  if (v34 + 5 > v35)
  {
    CA::Render::Encoder::grow(a2, 1);
    v36 = (_BYTE *)*((_QWORD *)a2 + 4);
  }
  *((_QWORD *)a2 + 4) = v36 + 1;
  *v36 = v37;
  v38 = *((_QWORD *)this + 13);
  v39 = (_QWORD *)*((_QWORD *)a2 + 4);
  if ((unint64_t)(v39 + 1) > *((_QWORD *)a2 + 5))
  {
    CA::Render::Encoder::grow(a2, 8);
    v39 = (_QWORD *)*((_QWORD *)a2 + 4);
  }
  *v39 = v38;
  *((_QWORD *)a2 + 4) += 8;
  v40 = *((_DWORD *)this + 43);
  if (!v40)
  {
    v41 = *((_QWORD *)this + 12);
    v49[0] = *((_QWORD *)this + 13);
    mach_make_memory_entry_64(*MEMORY[0x1E0C83DA0], v49, v41, 3145729, (mach_port_t *)this + 43, 0);
    v40 = *((_DWORD *)this + 43);
  }
  CA::Render::Encoder::encode_port_send_right(a2, v40, 0);
  v42 = (_QWORD *)x_heap_malloc_small_(*((uint64_t **)a2 + 1), 0x10uLL);
  v43 = (unsigned int *)((char *)this + 8);
  do
    v44 = __ldaxr(v43);
  while (__stlxr(v44 + 1, v43));
  v45 = this;
  if (!v44)
  {
    v45 = 0;
    do
      v48 = __ldaxr(v43);
    while (__stlxr(v48 - 1, v43));
  }
  v46 = *((_QWORD *)a2 + 14);
  *v42 = v45;
  v42[1] = v46;
  *((_QWORD *)a2 + 14) = v42;
  *(_QWORD *)&result = CA::Render::Texture::encode((CGColorSpaceRef *)this, a2).n128_u64[0];
  return result;
}

uint64_t CA::Render::CompressedImage::caches_encoding(CA::Render::CompressedImage *this)
{
  return 0;
}

void CA::Render::Subtexture::encode(const CA::Render::Object **this, CA::Render::Encoder *a2)
{
  int v4;
  _DWORD *v5;
  uint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  _DWORD *v16;
  int v17;

  CA::Render::Object::encode(this, a2);
  CA::Render::Encoder::encode_object(a2, this[2]);
  v4 = *((_DWORD *)this + 6);
  v5 = (_DWORD *)*((_QWORD *)a2 + 4);
  if ((unint64_t)(v5 + 1) > *((_QWORD *)a2 + 5))
  {
    CA::Render::Encoder::grow(a2, 4);
    v5 = (_DWORD *)*((_QWORD *)a2 + 4);
  }
  *v5 = v4;
  v6 = *((_QWORD *)a2 + 4);
  v7 = *((_QWORD *)a2 + 5);
  v8 = (_DWORD *)(v6 + 4);
  *((_QWORD *)a2 + 4) = v6 + 4;
  v9 = *((_DWORD *)this + 7);
  if (v6 + 8 > v7)
  {
    CA::Render::Encoder::grow(a2, 4);
    v8 = (_DWORD *)*((_QWORD *)a2 + 4);
  }
  *v8 = v9;
  v10 = *((_QWORD *)a2 + 4);
  v11 = *((_QWORD *)a2 + 5);
  v12 = (_DWORD *)(v10 + 4);
  *((_QWORD *)a2 + 4) = v10 + 4;
  v13 = *((_DWORD *)this + 8);
  if (v10 + 8 > v11)
  {
    CA::Render::Encoder::grow(a2, 4);
    v12 = (_DWORD *)*((_QWORD *)a2 + 4);
  }
  *v12 = v13;
  v14 = *((_QWORD *)a2 + 4);
  v15 = *((_QWORD *)a2 + 5);
  v16 = (_DWORD *)(v14 + 4);
  *((_QWORD *)a2 + 4) = v14 + 4;
  v17 = *((_DWORD *)this + 9);
  if (v14 + 8 > v15)
  {
    CA::Render::Encoder::grow(a2, 4);
    v16 = (_DWORD *)*((_QWORD *)a2 + 4);
  }
  *v16 = v17;
  *((_QWORD *)a2 + 4) += 4;
}

void CA::Render::DeferredEncoder::add_timing_list(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  unsigned int *v10;
  unsigned int v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  unsigned int v23;

  v10 = (unsigned int *)(a4 + 8);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  if (!v11)
  {
    do
      v23 = __ldaxr(v10);
    while (__stlxr(v23 - 1, v10));
  }
  v13 = (_QWORD *)a1[16];
  v12 = a1[17];
  if ((unint64_t)v13 >= v12)
  {
    v15 = (_QWORD *)a1[15];
    v16 = 0xCCCCCCCCCCCCCCCDLL * (v13 - v15) + 1;
    if (v16 > 0x666666666666666)
      abort();
    v17 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - (_QWORD)v15) >> 3);
    if (2 * v17 > v16)
      v16 = 2 * v17;
    if (v17 >= 0x333333333333333)
      v18 = 0x666666666666666;
    else
      v18 = v16;
    if (v18)
    {
      if (v18 > 0x666666666666666)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v19 = (char *)operator new(40 * v18);
    }
    else
    {
      v19 = 0;
    }
    v20 = &v19[8 * (v13 - v15)];
    *(_QWORD *)v20 = a2;
    *((_QWORD *)v20 + 1) = a3;
    *((_QWORD *)v20 + 2) = a4;
    *((double *)v20 + 3) = a5;
    *((_QWORD *)v20 + 4) = 0;
    v14 = v20 + 40;
    if (v13 != v15)
    {
      do
      {
        v21 = *(_OWORD *)(v13 - 5);
        v22 = *(_OWORD *)(v13 - 3);
        *((_QWORD *)v20 - 1) = *(v13 - 1);
        *(_OWORD *)(v20 - 24) = v22;
        *(_OWORD *)(v20 - 40) = v21;
        v20 -= 40;
        v13 -= 5;
      }
      while (v13 != v15);
      v13 = (_QWORD *)a1[15];
    }
    a1[15] = v20;
    a1[16] = v14;
    a1[17] = &v19[40 * v18];
    if (v13)
      operator delete(v13);
  }
  else
  {
    *v13 = a2;
    v13[1] = a3;
    v13[2] = a4;
    *((double *)v13 + 3) = a5;
    v14 = v13 + 5;
    v13[4] = 0;
  }
  a1[16] = v14;
}

CA::Render::Layer *CA::Render::Layer::set_shadow_color(CA::Render::Layer *result, float a2, float a3, float a4, float a5)
{
  if (*((_QWORD *)result + 16) || a2 != 0.0 || a3 != 0.0 || a4 != 0.0 || a5 != 1.0)
  {
    result = (CA::Render::Layer *)CA::Render::Layer::ensure_ext(result);
    *((float *)result + 50) = a2;
    *((float *)result + 51) = a3;
    *((float *)result + 52) = a4;
    *((float *)result + 53) = a5;
  }
  return result;
}

CA::Shape *CA::Render::Texture::set_dirty_shape(CA::Render::Texture *this, CA::Shape *a2)
{
  CA::Shape *result;

  result = (CA::Shape *)*((_QWORD *)this + 5);
  if (result != a2)
  {
    if (result)
      CA::Shape::unref(result);
    if (a2)
      result = (CA::Shape *)CA::Shape::ref((unint64_t)a2, a2);
    else
      result = 0;
    *((_QWORD *)this + 5) = result;
  }
  return result;
}

void *CA::Render::Proxy::encode(CA::Render::Proxy *this, CA::Render::Encoder *a2)
{
  void *result;
  uint64_t v5;
  _QWORD *v6;

  result = CA::Render::Object::encode(this, a2);
  v5 = *((_QWORD *)this + 2);
  v6 = (_QWORD *)*((_QWORD *)a2 + 4);
  if ((unint64_t)(v6 + 1) > *((_QWORD *)a2 + 5))
  {
    result = CA::Render::Encoder::grow(a2, 8);
    v6 = (_QWORD *)*((_QWORD *)a2 + 4);
  }
  *v6 = v5;
  *((_QWORD *)a2 + 4) += 8;
  return result;
}

void sub_1844A11C8(_Unwind_Exception *exception_object)
{
  unsigned int *v1;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  if (v1)
  {
    v3 = v1 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 16))(v1);
  }
  _Unwind_Resume(exception_object);
}

__n128 CA::Render::ReplicatorLayer::encode(CA::Render::ReplicatorLayer *this, CA::Render::Encoder *a2)
{
  int v4;
  _DWORD *v5;
  uint64_t v6;
  __n128 result;
  __int128 v8;

  CA::Render::Object::encode(this, a2);
  v4 = *((_DWORD *)this + 4);
  v5 = (_DWORD *)*((_QWORD *)a2 + 4);
  if ((unint64_t)(v5 + 1) > *((_QWORD *)a2 + 5))
  {
    CA::Render::Encoder::grow(a2, 4);
    v5 = (_DWORD *)*((_QWORD *)a2 + 4);
  }
  *v5 = v4;
  *((_QWORD *)a2 + 4) += 4;
  CA::Render::Encoder::encode_object(a2, *((const CA::Render::Object **)this + 3));
  v6 = *((_QWORD *)a2 + 4);
  if ((unint64_t)(v6 + 36) > *((_QWORD *)a2 + 5))
  {
    CA::Render::Encoder::grow(a2, 36);
    v6 = *((_QWORD *)a2 + 4);
  }
  result = *((__n128 *)this + 2);
  v8 = *((_OWORD *)this + 3);
  *(_DWORD *)(v6 + 32) = *((_DWORD *)this + 16);
  *(__n128 *)v6 = result;
  *(_OWORD *)(v6 + 16) = v8;
  *((_QWORD *)a2 + 4) += 36;
  return result;
}

void *CA::Render::GainMapLayer::encode(CA::Render::GainMapLayer *this, CA::Render::Encoder *a2)
{
  void *result;
  char v5;
  _BYTE *v6;

  result = CA::Render::Object::encode(this, a2);
  v5 = *((_BYTE *)this + 16);
  v6 = (_BYTE *)*((_QWORD *)a2 + 4);
  if ((unint64_t)(v6 + 1) > *((_QWORD *)a2 + 5))
  {
    result = CA::Render::Encoder::grow(a2, 1);
    v6 = (_BYTE *)*((_QWORD *)a2 + 4);
  }
  *((_QWORD *)a2 + 4) = v6 + 1;
  *v6 = v5;
  return result;
}

void CA::Render::PortalLayer::encode(CA::Render::PortalLayer *this, CA::Render::Encoder *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  int v13;

  CA::Render::Object::encode(this, a2);
  v4 = *((_QWORD *)this + 3);
  v5 = (_QWORD *)*((_QWORD *)a2 + 4);
  if ((unint64_t)(v5 + 1) > *((_QWORD *)a2 + 5))
  {
    CA::Render::Encoder::grow(a2, 8);
    v5 = (_QWORD *)*((_QWORD *)a2 + 4);
  }
  *v5 = v4;
  v6 = *((_QWORD *)a2 + 4);
  v7 = *((_QWORD *)a2 + 5);
  v8 = (_QWORD *)(v6 + 8);
  *((_QWORD *)a2 + 4) = v6 + 8;
  v9 = *((_QWORD *)this + 4);
  if (v6 + 16 > v7)
  {
    CA::Render::Encoder::grow(a2, 8);
    v8 = (_QWORD *)*((_QWORD *)a2 + 4);
  }
  *v8 = v9;
  v10 = *((_QWORD *)a2 + 4);
  v11 = *((_QWORD *)a2 + 5);
  v12 = (_DWORD *)(v10 + 8);
  *((_QWORD *)a2 + 4) = v10 + 8;
  v13 = *((_DWORD *)this + 10);
  if (v10 + 12 > v11)
  {
    CA::Render::Encoder::grow(a2, 4);
    v12 = (_DWORD *)*((_QWORD *)a2 + 4);
  }
  *v12 = v13;
  *((_QWORD *)a2 + 4) += 4;
  CA::Render::Encoder::encode_object(a2, *((const CA::Render::Object **)this + 6));
}

void CA::Render::MatchMoveAnimation::encode(CA::Render::MatchMoveAnimation *this, CA::Render::Encoder *a2)
{
  CA::Render::MatchAnimation::encode((void **)this, a2);
  CA::Render::Encoder::encode_object(a2, *((const CA::Render::Object **)this + 17));
}

CA::Render::Encoder *CA::Render::MatchAnimation::encode(void **this, CA::Render::Encoder *a2)
{
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  int v13;

  CA::Render::Animation::encode((CA::Render::Animation *)this, a2);
  v4 = this[12];
  v5 = (_QWORD *)*((_QWORD *)a2 + 4);
  if ((unint64_t)(v5 + 1) > *((_QWORD *)a2 + 5))
  {
    CA::Render::Encoder::grow(a2, 8);
    v5 = (_QWORD *)*((_QWORD *)a2 + 4);
  }
  *v5 = v4;
  v6 = *((_QWORD *)a2 + 4);
  v7 = *((_QWORD *)a2 + 5);
  v8 = (_QWORD *)(v6 + 8);
  *((_QWORD *)a2 + 4) = v6 + 8;
  v9 = this[13];
  if (v6 + 16 > v7)
  {
    CA::Render::Encoder::grow(a2, 8);
    v8 = (_QWORD *)*((_QWORD *)a2 + 4);
  }
  *v8 = v9;
  v10 = *((_QWORD *)a2 + 4);
  v11 = *((_QWORD *)a2 + 5);
  v12 = (_DWORD *)(v10 + 8);
  *((_QWORD *)a2 + 4) = v10 + 8;
  v13 = *((_DWORD *)this + 28);
  if (v10 + 12 > v11)
  {
    CA::Render::Encoder::grow(a2, 4);
    v12 = (_DWORD *)*((_QWORD *)a2 + 4);
  }
  *v12 = v13;
  *((_QWORD *)a2 + 4) += 4;
  return CA::Render::Encoder::encode_keypath(a2, this + 15);
}

void CA::Render::Pattern::encode(CA::Render::Pattern *this, CA::Render::Encoder *a2)
{
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  unint64_t v8;
  _OWORD *v9;
  __int128 v10;
  uint64_t v11;
  unint64_t v12;
  _OWORD *v13;
  uint64_t v14;
  unint64_t v15;
  _OWORD *v16;

  CA::Render::Object::encode(this, a2);
  v4 = (_OWORD *)*((_QWORD *)a2 + 4);
  if ((unint64_t)(v4 + 3) > *((_QWORD *)a2 + 5))
  {
    CA::Render::Encoder::grow(a2, 48);
    v4 = (_OWORD *)*((_QWORD *)a2 + 4);
  }
  v5 = *((_OWORD *)this + 1);
  v6 = *((_OWORD *)this + 3);
  v4[1] = *((_OWORD *)this + 2);
  v4[2] = v6;
  *v4 = v5;
  v7 = *((_QWORD *)a2 + 4);
  v8 = *((_QWORD *)a2 + 5);
  v9 = (_OWORD *)(v7 + 48);
  *((_QWORD *)a2 + 4) = v7 + 48;
  if (v7 + 80 > v8)
  {
    CA::Render::Encoder::grow(a2, 32);
    v9 = (_OWORD *)*((_QWORD *)a2 + 4);
  }
  v10 = *((_OWORD *)this + 5);
  *v9 = *((_OWORD *)this + 4);
  v9[1] = v10;
  v11 = *((_QWORD *)a2 + 4);
  v12 = *((_QWORD *)a2 + 5);
  v13 = (_OWORD *)(v11 + 32);
  *((_QWORD *)a2 + 4) = v11 + 32;
  if (v11 + 48 > v12)
  {
    CA::Render::Encoder::grow(a2, 16);
    v13 = (_OWORD *)*((_QWORD *)a2 + 4);
  }
  *v13 = *((_OWORD *)this + 6);
  v14 = *((_QWORD *)a2 + 4);
  v15 = *((_QWORD *)a2 + 5);
  v16 = (_OWORD *)(v14 + 16);
  *((_QWORD *)a2 + 4) = v14 + 16;
  if (v14 + 32 > v15)
  {
    CA::Render::Encoder::grow(a2, 16);
    v16 = (_OWORD *)*((_QWORD *)a2 + 4);
  }
  *v16 = *((_OWORD *)this + 7);
  *((_QWORD *)a2 + 4) += 16;
  CA::Render::Encoder::encode_object(a2, *((const CA::Render::Object **)this + 16));
}

void *CA::Render::SecureIndicatorLayer::encode(CA::Render::SecureIndicatorLayer *this, CA::Render::Encoder *a2)
{
  void *result;
  int v5;
  _DWORD *v6;
  uint64_t v7;
  unint64_t v8;
  _WORD *v9;
  __int16 v10;

  result = CA::Render::Object::encode(this, a2);
  v5 = *((_DWORD *)this + 4);
  v6 = (_DWORD *)*((_QWORD *)a2 + 4);
  if ((unint64_t)(v6 + 1) > *((_QWORD *)a2 + 5))
  {
    result = CA::Render::Encoder::grow(a2, 4);
    v6 = (_DWORD *)*((_QWORD *)a2 + 4);
  }
  *v6 = v5;
  v7 = *((_QWORD *)a2 + 4);
  v8 = *((_QWORD *)a2 + 5);
  v9 = (_WORD *)(v7 + 4);
  *((_QWORD *)a2 + 4) = v7 + 4;
  v10 = *((_WORD *)this + 10);
  if (v7 + 6 > v8)
  {
    result = CA::Render::Encoder::grow(a2, 2);
    v9 = (_WORD *)*((_QWORD *)a2 + 4);
  }
  *v9 = v10;
  *((_QWORD *)a2 + 4) += 2;
  return result;
}

void CA::Render::GroupAnimation::encode(const CA::Render::Object **this, CA::Render::Encoder *a2)
{
  CA::Render::Animation::encode((CA::Render::Animation *)this, a2);
  CA::Render::Encoder::encode_object(a2, this[12]);
}

uint64_t CA::Render::GradientLayer::visit_subclass(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 8))(a2, a1);
}

void sub_1844A1860(_Unwind_Exception *a1)
{
  CA::Transaction *v1;

  CA::Transaction::unlock(v1);
  _Unwind_Resume(a1);
}

void run_animation_callbacks(_QWORD *a1)
{
  _WORD *v2;
  _QWORD *i;
  id v4;
  _QWORD *v5;
  id v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  while (1)
  {
    v2 = (_WORD *)a1[2];
    if (!v2)
      break;
    a1[2] = *(_QWORD *)v2;
    free_non_deferred_animation(v2, 1);
  }
  for (i = (_QWORD *)a1[1]; i; i = (_QWORD *)i[1])
  {
    v4 = (id)*i;
    objc_msgSend((id)objc_msgSend((id)*i, "delegate"), "animationDidStart:", *i);
    CFRelease(v4);
  }
  v5 = (_QWORD *)*a1;
  if (*a1)
  {
    do
    {
      v6 = (id)*v5;
      objc_msgSend((id)objc_msgSend((id)*v5, "delegate"), "animationDidStop:finished:", *v5, (*(_DWORD *)(*v5 + 16) >> 1) & 1);
      CFRelease(v6);
      v5 = (_QWORD *)v5[1];
    }
    while (v5);
  }
  v7 = (_QWORD *)a1[1];
  if (v7)
  {
    do
    {
      v8 = (_QWORD *)v7[1];
      free(v7);
      v7 = v8;
    }
    while (v8);
  }
  v9 = (_QWORD *)*a1;
  if (*a1)
  {
    do
    {
      v10 = (_QWORD *)v9[1];
      free(v9);
      v9 = v10;
    }
    while (v10);
  }
  JUMPOUT(0x186DBD990);
}

void sub_1844A1958(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DBD990](v1, 0x20C40960023A9);
  _Unwind_Resume(a1);
}

void CA::Transaction::commit(CA::Transaction *this)
{
  unsigned int *v2;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  _QWORD *v8;
  double *v9;
  uint64_t v10;
  const __CFArray *v11;
  int *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *i;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *j;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  malloc_zone_t *malloc_zone;
  _QWORD *v33;
  id *v34;
  const void **v35;
  _QWORD *v36;
  _QWORD *v37;
  malloc_zone_t *v38;
  malloc_zone_t *v39;
  id *v40;
  const void *v41;
  int v42;
  uint64_t *v43;
  int v44;
  unsigned int v45;
  int v46;
  uint64_t m;
  unsigned int *v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const void *v53;
  CA::AttrList *v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int *v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  malloc_zone_t *v61;
  uint64_t *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t **k;
  char v68;
  const void *v69;
  void *v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  CA::Transaction::Level *v74;
  CA::Transaction::Level *v75;
  malloc_zone_t *v76;
  uint64_t v77;
  double v78;
  double v79;
  double v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  NSObject *v84;
  char v85;
  char v86;
  double v87;
  double v88;
  _BYTE buf[18];
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  if (*((CA::Transaction **)this + 13) != (CA::Transaction *)((char *)this + 120))
    return;
  v2 = (unsigned int *)((char *)this + 112);
  do
  {
    if (__ldaxr(v2))
    {
      __clrex();
      return;
    }
  }
  while (__stlxr(1u, v2));
  v4 = *((_QWORD *)this + 13);
  v5 = mach_absolute_time();
  v6 = CATimeWithHostTime(v5);
  if (*(double *)(v4 + 176) == 0.0)
  {
    v7 = *(double *)(v4 + 184);
    if (v7 == 0.0)
    {
      v7 = *(double *)(v4 + 152);
      if (v7 == 0.0)
        v7 = v6;
    }
    CA::Transaction::set_frame_begin_time(*((_QWORD *)this + 13), v7);
  }
  v85 = *(_BYTE *)(*((_QWORD *)this + 13) + 204);
  if ((v85 & 0x20) == 0)
  {
    CAHostTimeWithTime(*(double *)(v4 + 184));
    CAHostTimeWithTime(*(double *)(v4 + 176));
    CAHostTimeWithTime(*(double *)(v4 + 192));
    kdebug_trace();
  }
  v8 = &CA::Render::transition_lock;
  v86 = 1;
  while (2)
  {
    *((_BYTE *)this + 116) &= ~2u;
    CA::Transaction::run_commit_handlers((uint64_t)this, 4);
    v12 = 0;
    v13 = (int *)*((_QWORD *)this + 6);
    while (1)
    {
      if (v13)
      {
        if (v12)
        {
          v14 = 0;
          v15 = 1 << *v13;
          do
          {
            for (i = *(_QWORD **)(*((_QWORD *)v13 + 2) + 8 * v14); i; i = (_QWORD *)*i)
              hash_table_modify(v12, i[2], i[3], 0);
            ++v14;
          }
          while (v14 != v15);
          x_hash_table_remove_all(*((_QWORD **)this + 6));
          v8 = (_QWORD *)&CA::Render::transition_lock;
        }
        else
        {
          *((_QWORD *)this + 6) = 0;
          v12 = v13;
        }
      }
      else if (!v12)
      {
        break;
      }
      x_hash_table_remove_if ((uint64_t)v12, (unsigned int (*)(_QWORD, _QWORD, uint64_t))CA::release_root_if_unused, (uint64_t)this);
      v13 = (int *)*((_QWORD *)this + 6);
      if (!v13)
        break;
      if (!*((_QWORD *)v13 + 3))
      {
        *((_QWORD *)this + 6) = v12;
        x_hash_table_free(v13);
        goto LABEL_28;
      }
    }
    *((_QWORD *)this + 6) = v12;
LABEL_28:
    if (*(_QWORD *)(v4 + 24))
    {
      *((_QWORD *)this + 3) = *(_QWORD *)(v4 + 24);
      *(_QWORD *)(v4 + 24) = 0;
    }
LABEL_41:
    while (1)
    {
      v22 = (_QWORD *)v8[479];
      if (!v22)
        break;
      do
      {
        v17 = __ldaxr(CA::Transaction::global_deleted);
        if ((_QWORD *)v17 != v22)
        {
          __clrex();
          goto LABEL_41;
        }
      }
      while (__stlxr(0, CA::Transaction::global_deleted));
      v18 = v22;
      do
      {
        *(_QWORD *)buf = 0;
        v19 = (_QWORD *)*v18;
        *(_QWORD *)buf = v19;
        if (v19)
        {
          do
          {
            v20 = v19;
            v19 = (_QWORD *)*v19;
          }
          while (v19);
        }
        else
        {
          v20 = buf;
        }
        *v20 = *((_QWORD *)this + 3);
        *((_QWORD *)this + 3) = *(_QWORD *)buf;
        v18 = (_QWORD *)v18[1];
      }
      while (v18);
      do
      {
        v21 = (_QWORD *)v22[1];
        free(v22);
        v22 = v21;
      }
      while (v21);
    }
    v88 = 0.0;
    CA::Context::commit_transaction(this, (CA::Transaction *)&v88, v6, v9, v10, v11);
    CAHostTimeWithTime(v88);
    CAHostTimeWithTime(*(double *)(v4 + 152));
    CAHostTimeWithTime(*(double *)(v4 + 168));
    v23 = (_QWORD *)*((_QWORD *)this + 3);
    if (v23)
    {
      do
      {
        v24 = (_QWORD *)*v23;
        free(v23);
        v23 = v24;
      }
      while (v24);
      *((_QWORD *)this + 3) = 0;
    }
    v25 = (_QWORD *)*((_QWORD *)this + 6);
    if (v25)
    {
      v26 = 0;
      *((_QWORD *)this + 6) = 0;
      v27 = 1 << *(_DWORD *)v25;
      do
      {
        for (j = *(_QWORD **)(v25[2] + 8 * v26); j; j = (_QWORD *)*j)
        {
          v29 = (unsigned int *)j[2];
LABEL_49:
          v30 = *v29;
          if (*v29)
          {
            do
            {
              v31 = __ldaxr(v29);
              if (v31 != v30)
              {
                __clrex();
                goto LABEL_49;
              }
            }
            while (__stlxr(v30 - 1, v29));
            if (v30 == 1)
            {
              CA::Layer::destroy((CA::Layer *)v29);
              CA::Layer::~Layer((CA::AttrList **)v29);
              malloc_zone = (malloc_zone_t *)get_malloc_zone();
              malloc_zone_free(malloc_zone, v29);
            }
          }
        }
        ++v26;
      }
      while (v26 != v27);
      x_hash_table_free(v25);
    }
    v33 = (_QWORD *)*((_QWORD *)this + 2);
    if (v33)
    {
      CA::Transaction::free_command_list(v33);
      *((_QWORD *)this + 2) = 0;
    }
    while (1)
    {
      v40 = *(id **)(v4 + 32);
      if (!v40)
        break;
      *(_QWORD *)(v4 + 32) = *v40;
      objc_msgSend(v40[1], "invalidate");

      while (1)
      {
        v34 = (id *)v40[2];
        if (!v34)
          break;
        v40[2] = *v34;
        v35 = (const void **)v34[2];
        if (v35)
        {
          do
          {
            _Block_release(*v35);
            v35 = (const void **)v35[1];
          }
          while (v35);
          v36 = v34[2];
          if (v36)
          {
            do
            {
              v37 = (_QWORD *)v36[1];
              free(v36);
              v36 = v37;
            }
            while (v37);
          }
        }
        v38 = (malloc_zone_t *)get_malloc_zone();
        malloc_zone_free(v38, v34);
      }
      v39 = (malloc_zone_t *)get_malloc_zone();
      malloc_zone_free(v39, v40);
    }
    *(_DWORD *)(v4 + 40) = 0;
    v41 = *(const void **)(v4 + 120);
    if (v41)
    {
      CFRelease(v41);
      *(_QWORD *)(v4 + 120) = 0;
    }
LABEL_112:
    v63 = (_QWORD *)*((_QWORD *)this + 13);
    v63[28] = 0;
    v64 = v63[27];
    if (v64)
    {
      v65 = 0;
      v66 = 1 << *(_DWORD *)v64;
      do
      {
        for (k = *(uint64_t ***)(*(_QWORD *)(v64 + 16) + 8 * v65); k; k = (uint64_t **)*k)
          CFRelease(k[3]);
        ++v65;
      }
      while (v65 != v66);
      v63[27] = 0;
    }
    v62 = (uint64_t *)v63[26];
    if (v62)
    {
      v63[26] = 0;
      v42 = *((_DWORD *)this + 25);
      *((_DWORD *)this + 25) = v42 + 1;
      v43 = v62;
      if (!v42)
      {
        os_unfair_lock_lock((os_unfair_lock_t)&CA::Transaction::transaction_lock);
        v43 = v62;
      }
      while (1)
      {
        v50 = *v43;
        v51 = *((unsigned int *)this + 24);
        if ((v51 & 0x80000000) != 0)
          break;
        v52 = v50 + 4 * v51;
        v44 = *(_DWORD *)(v52 + 272);
        *(_DWORD *)(v52 + 272) = 0;
        if ((v44 & 0x400) != 0)
          goto LABEL_92;
LABEL_93:
        v53 = *(const void **)(v50 + 256);
        if (v53)
        {
          CA::Transaction::release_object(this, v53);
          *(_QWORD *)(v50 + 256) = 0;
        }
        v54 = *(CA::AttrList **)(v50 + 184);
        if (v54)
          CA::AttrList::free(v54, v53);
        *(_QWORD *)(v50 + 184) = 0;
        v55 = (unsigned int *)(v50 + 4);
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 & 0xFFEFFFFF, v55));
        if ((v44 & 0x60000) == 0 && (v44 & 0x4204B7E) != 0)
        {
          do
            v45 = __ldaxr(v55);
          while (__stlxr(v45 | v44 & 0x4204B7E, v55));
          if ((v44 & 0x18) != 0)
            v46 = (4 * ((v44 & 6) != 0)) | 0x10;
          else
            v46 = 4 * ((v44 & 6) != 0);
          if ((v44 & 0x60) != 0)
            v46 |= 0x40u;
          if ((v44 & 0x300) != 0)
            v46 |= 0x200u;
          for (m = *(_QWORD *)(v50 + 8); m; m = *(_QWORD *)(m + 8))
          {
            v48 = (unsigned int *)(m + 4);
            if ((v46 & ~*(_DWORD *)(m + 4)) == 0)
              break;
            do
              v49 = __ldaxr(v48);
            while (__stlxr(v49 | v46, v48));
          }
        }
        v43 = (uint64_t *)v43[1];
        if (!v43)
        {
          CA::Transaction::unlock(this);
          do
          {
            v57 = (unsigned int *)*v62;
            v58 = *(_QWORD *)(*v62 + 16);
            if (v58)
            {
              CALayerRelease(v58);
              v57 = (unsigned int *)*v62;
            }
LABEL_104:
            v59 = *v57;
            if (*v57)
            {
              do
              {
                v60 = __ldaxr(v57);
                if (v60 != v59)
                {
                  __clrex();
                  goto LABEL_104;
                }
              }
              while (__stlxr(v59 - 1, v57));
              if (v59 == 1)
              {
                CA::Layer::destroy((CA::Layer *)v57);
                CA::Layer::~Layer((CA::AttrList **)v57);
                v61 = (malloc_zone_t *)get_malloc_zone();
                malloc_zone_free(v61, v57);
              }
            }
            v62 = (uint64_t *)v62[1];
          }
          while (v62);
          goto LABEL_112;
        }
      }
      v44 = *(_DWORD *)x_hash_table_lookup(*(_QWORD *)this, *v43, 0);
      if ((v44 & 0x400) == 0)
        goto LABEL_93;
LABEL_92:
      *(_DWORD *)(v50 + 40) |= 1u;
      goto LABEL_93;
    }
    if ((v86 & 1) != 0 && (*(_QWORD *)(v4 + 24) || *(_QWORD *)(v4 + 16)))
    {
      v86 = 0;
      v8 = (_QWORD *)&CA::Render::transition_lock;
      continue;
    }
    break;
  }
  if (*(_QWORD *)this)
  {
    x_hash_table_free(*(_QWORD **)(v4 + 8));
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)this = 0;
  }
  else
  {
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Transaction::slot_lock);
    CA::Transaction::slot_mask &= ~(1 << *((_DWORD *)this + 24));
    *(_DWORD *)(v4 + 4) = -1;
    *((_DWORD *)this + 24) = -1;
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::Transaction::slot_lock);
  }
  v68 = *(_BYTE *)(v4 + 204);
  *(_DWORD *)v4 = 0;
  *(_QWORD *)(v4 + 144) = 0;
  *(_QWORD *)(v4 + 152) = 0;
  if (!*(_DWORD *)(v4 + 160))
  {
    *(_OWORD *)(v4 + 168) = 0u;
    *(_OWORD *)(v4 + 184) = 0u;
  }
  x_heap_free(*(void ****)(v4 + 128));
  *(_WORD *)(v4 + 206) = 0;
  *(_QWORD *)(v4 + 128) = 0;
  *(_QWORD *)(v4 + 136) = 0;
  v70 = *(void **)(v4 + 240);
  if (v70)
  {
    free(v70);
    *(_QWORD *)(v4 + 240) = 0;
  }
  *(_BYTE *)(v4 + 204) = (*(_BYTE *)(v4 + 204) >> 1) & 8 | *(_BYTE *)(v4 + 204) & 0x93;
  do
    v71 = __ldaxr(&CA::Transaction::next_transaction_seed);
  while (__stlxr(v71 + 1, &CA::Transaction::next_transaction_seed));
  *(_DWORD *)(v4 + 200) = v71 + 1;
  if (v71 == -1)
  {
    do
    {
      v72 = __ldaxr(&CA::Transaction::next_transaction_seed);
      v73 = v72 + 1;
    }
    while (__stlxr(v73, &CA::Transaction::next_transaction_seed));
    *(_DWORD *)(v4 + 200) = v73;
  }
  *((_DWORD *)this + 28) = 0;
  *((_BYTE *)this + 116) &= 0xF9u;
  v74 = (CA::Transaction::Level *)*((_QWORD *)this + 11);
  if (v74)
  {
    *((_QWORD *)this + 11) = 0;
    do
    {
      v75 = *(CA::Transaction::Level **)v74;
      CA::Transaction::Level::~Level(v74, v69);
      v76 = (malloc_zone_t *)get_malloc_zone();
      malloc_zone_free(v76, v74);
      v74 = v75;
    }
    while (v75);
  }
  v77 = mach_absolute_time();
  v78 = CATimeWithHostTime(v77);
  if (CADeviceSupportsAPT::once != -1)
  {
    v87 = v78;
    dispatch_once(&CADeviceSupportsAPT::once, &__block_literal_global_37);
    v78 = v87;
  }
  v79 = dbl_18474E450[CADeviceSupportsAPT::supports_apt == 0];
  v80 = v78 - v6;
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  mach_get_times();
  v81 = *(_QWORD *)&buf[8] - *(_QWORD *)buf;
  v82 = CAHostTimeWithTime(v6) + v81;
  v83 = *(_DWORD *)(*((_QWORD *)this + 13) + 200);
  if (v80 >= v79)
  {
    if (CA::Transaction::bad_perf_signpost_handle(void)::once_token != -1)
      dispatch_once(&CA::Transaction::bad_perf_signpost_handle(void)::once_token, &__block_literal_global_33);
    v84 = CA::Transaction::bad_perf_signpost_handle(void)::handle;
    if (os_signpost_enabled((os_log_t)CA::Transaction::bad_perf_signpost_handle(void)::handle))
    {
      *(_DWORD *)buf = 134349312;
      *(_QWORD *)&buf[4] = v82;
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)&buf[14] = v83;
      _os_signpost_emit_with_name_impl(&dword_184457000, v84, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Commit", "%{public, signpost.description:begin_time}llu seed=%{public, name=transaction_seed}#x", buf, 0x12u);
    }
  }
  else if ((v68 & 0x20) == 0)
  {
    if (CA::Transaction::in_memory_signpost_handle(void)::once_token != -1)
      dispatch_once(&CA::Transaction::in_memory_signpost_handle(void)::once_token, &__block_literal_global_5369);
    if (os_signpost_enabled((os_log_t)CA::Transaction::in_memory_signpost_handle(void)::handle))
    {
      *(_DWORD *)buf = 134349312;
      *(_QWORD *)&buf[4] = v82;
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)&buf[14] = v83;
      _os_signpost_emit_unreliably_with_name_impl();
    }
  }
  if ((v85 & 0x20) == 0)
    kdebug_trace();
}

void sub_1844A23E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if ((a11 & 0x20) == 0)
    kdebug_trace();
  _Unwind_Resume(exception_object);
}

uint64_t CALayerRelease(uint64_t result)
{
  _QWORD *v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  v1 = (_QWORD *)result;
  v2 = (unsigned int *)(result + 8);
LABEL_2:
  v3 = *v2;
  if (*v2)
  {
    do
    {
      v4 = __ldaxr(v2);
      if (v4 != v3)
      {
        __clrex();
        goto LABEL_2;
      }
    }
    while (__stlxr(v3 - 1, v2));
    if (*MEMORY[0x1E0C9A980])
      result = NSRecordAllocationEvent();
    if (v3 == 1)
    {
      v5 = v1[2];
      if (v5)
      {
        *(_QWORD *)(v5 + 16) = 0;
        v6 = (unsigned int *)(v5 + 4);
        do
          v7 = __ldaxr(v6);
        while (__stlxr(v7 & 0xFFFF7FFF, v6));
      }
      return objc_msgSend(v1, "_dealloc");
    }
  }
  else if (!*(_DWORD *)(result + 12))
  {
    result = dyld_program_sdk_at_least();
    if ((_DWORD)result)
      return objc_msgSend(v1, "_dealloc");
  }
  return result;
}

void CA::AttrList::free(CA::AttrList *this, const void *a2)
{
  uint64_t v3;
  unint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  CA::AttrList *v7;
  _QWORD *v8;
  _QWORD *v9;
  malloc_zone_t *malloc_zone;

  v3 = *((_QWORD *)this + 1);
  if ((*((_DWORD *)this + 2) & 7) != 0)
  {
    *((_QWORD *)this + 1) = v3 & 0xFFFFFFFFFFFFFFF8 | ((v3 & 7) - 1);
  }
  else
  {
    v4 = v3 & 0xFFFFFFFFFFFFFFF8;
    if (v4)
      *(_QWORD *)(v4 + 8) &= 7uLL;
    v5 = *(_DWORD **)this;
    if (*(_QWORD *)this)
    {
      v6 = v5 + 2;
      if ((v5[2] & 0x80000000) != 0)
      {
        v7 = this;
LABEL_11:
        *(_QWORD *)v7 = 0;
        *v6 &= ~0x80000000;
      }
      else
      {
        while (1)
        {
          v7 = (CA::AttrList *)v5;
          CA::AttrList::Node::free_memory((CA::AttrList::Node *)v5, a2);
          v5 = *(_DWORD **)v7;
          if (!*(_QWORD *)v7)
            break;
          if ((v5[2] & 0x80000000) != 0)
          {
            v6 = v5 + 2;
            goto LABEL_11;
          }
        }
      }
      v8 = *(_QWORD **)this;
      if (*(_QWORD *)this)
      {
        do
        {
          v9 = (_QWORD *)*v8;
          free(v8);
          v8 = v9;
        }
        while (v9);
      }
    }
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(malloc_zone, this);
  }
}

void CA::Layer::remove_from_superlayer(CALayer **this)
{
  CA::Transaction *v2;
  CALayer *v3;
  int v4;
  unsigned int *v5;
  uint64_t v6;
  objc_object **v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  malloc_zone_t *malloc_zone;

  v2 = CA::Transaction::ensure_compat((CA::Transaction *)this);
  if ((*((_DWORD *)this + 1) & 0x60000) != 0)
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("CALayerInvalidTree"), CFSTR("expecting model layer not copy: %@"), this[2]);
  v3 = this[2];
  v4 = *((_DWORD *)v2 + 25);
  *((_DWORD *)v2 + 25) = v4 + 1;
  if (!v4)
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Transaction::transaction_lock);
  v5 = CA::Layer::retain_parent((CA::Layer *)this, v2);
  v8 = v5;
  if (v5)
    CA::Layer::remove_sublayer((CA::Layer *)v5, v2, v3, v6, v7);
  CA::Transaction::unlock(v2);
  if (v8)
  {
    CA::Transaction::release_object(v2, v3);
LABEL_9:
    v9 = *v8;
    if (*v8)
    {
      do
      {
        v10 = __ldaxr(v8);
        if (v10 != v9)
        {
          __clrex();
          goto LABEL_9;
        }
      }
      while (__stlxr(v9 - 1, v8));
      if (v9 == 1)
      {
        CA::Layer::destroy((CA::Layer *)v8);
        CA::Layer::~Layer((CA::AttrList **)v8);
        malloc_zone = (malloc_zone_t *)get_malloc_zone();
        malloc_zone_free(malloc_zone, v8);
      }
    }
  }
}

void sub_1844A2704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  X::Ref<CA::Layer>::~Ref((unsigned int **)va);
  _Unwind_Resume(a1);
}

_QWORD *CA::Transaction::run_commit_handlers(uint64_t a1, int a2)
{
  _QWORD *result;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  _QWORD *v8;
  _QWORD *v9;

  result = (_QWORD *)CA::Transaction::commit_handlers_for_phase(*(_QWORD *)(a1 + 104), a2);
  if (*result)
  {
    v5 = result;
    kdebug_trace();
    *(_DWORD *)(*(_QWORD *)(a1 + 104) + 56) = a2;
    v6 = (_QWORD *)*v5;
    if (*v5)
    {
      v7 = 0;
      do
      {
        (*(void (**)(void))(*v6 + 16))();
        _Block_release((const void *)*v6);
        v6 = (_QWORD *)v6[1];
        ++v7;
      }
      while (v6);
      v8 = (_QWORD *)*v5;
      if (*v5)
      {
        do
        {
          v9 = (_QWORD *)v8[1];
          free(v8);
          v8 = v9;
        }
        while (v9);
      }
    }
    *v5 = 0;
    *(_DWORD *)(*(_QWORD *)(a1 + 104) + 56) = -1;
    return (_QWORD *)kdebug_trace();
  }
  return result;
}

void sub_1844A2808(_Unwind_Exception *a1)
{
  kdebug_trace();
  _Unwind_Resume(a1);
}

uint64_t CA::Transaction::commit_handlers_for_phase(uint64_t a1, int a2)
{
  uint64_t result;
  NSObject *v4;
  uint8_t v5[8];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  switch(a2)
  {
    case 0:
      result = a1 + 72;
      break;
    case 1:
      goto LABEL_11;
    case 2:
      result = a1 + 88;
      break;
    case 3:
      result = a1 + 96;
      break;
    case 4:
      result = a1 + 64;
      break;
    case 5:
      result = a1 + 104;
      break;
    default:
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v4 = x_log_category_api;
        if (os_log_type_enabled((os_log_t)x_log_category_api, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v5 = 0;
          _os_log_impl(&dword_184457000, v4, OS_LOG_TYPE_DEFAULT, "CoreAnimation: invalid commit handler phase! Defaulting to pre-commit.\n", v5, 2u);
        }
      }
LABEL_11:
      result = a1 + 80;
      break;
  }
  return result;
}

void CA::Layer::remove_sublayer(CA::Layer *this, CA::Transaction *a2, CALayer *a3, uint64_t a4, objc_object **a5)
{
  _QWORD *v8;
  CA::Layer *v9;
  int v10;
  uint64_t v11;
  CA::Layer *layer;
  int v13;
  objc_object *v14;
  id *v15;
  CA::Transaction *v16;
  int v17;
  __CFString *v18;
  uint64_t v19;
  objc_object *v20[2];

  v20[1] = *(objc_object **)MEMORY[0x1E0C80C00];
  if (*((CALayer **)this + 4) == a3)
  {
    v20[0] = 0;
    CA::Layer::begin_change(this, a2, CFSTR("mask"), (objc_object *)v20, a5);
    layer = (CA::Layer *)a3->_attr.layer;
    v13 = CA::Layer::ancestor_context_id(this, a2);
    CA::Layer::update_removed_sublayer(layer, a2, v13);
    *((_QWORD *)this + 4) = 0;
    v14 = v20[0];
    v15 = (id *)this;
    v16 = a2;
    v17 = 367;
    v18 = CFSTR("mask");
  }
  else
  {
    v8 = (_QWORD *)*((_QWORD *)this + 3);
    if (!v8)
      return;
    v20[0] = 0;
    CA::Layer::begin_change(this, a2, CFSTR("sublayers"), (objc_object *)v20, a5);
    v9 = (CA::Layer *)a3->_attr.layer;
    v10 = CA::Layer::ancestor_context_id(this, a2);
    CA::Layer::update_removed_sublayer(v9, a2, v10);
    v11 = v8[2];
    if (v11 == 1)
    {
      CA::Transaction::release_object(a2, v8);
      *((_QWORD *)this + 3) = 0;
    }
    else
    {
      if (v11)
      {
        v19 = 0;
        while (*(CALayer **)(v8[1] + 8 * v19) != a3)
        {
          if (v11 == ++v19)
            goto LABEL_10;
        }
      }
      else
      {
LABEL_10:
        LODWORD(v19) = -1;
      }
      CALayerArrayRemoveValue((char *)v8, v19);
    }
    v14 = v20[0];
    v18 = CFSTR("sublayers");
    v15 = (id *)this;
    v16 = a2;
    v17 = 536;
  }
  CA::Layer::end_change(v15, v16, v17, (objc_object *)v18, v14);
}

char *CALayerArrayRemoveValue(char *result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = result + 8;
  if (result[40])
    abort();
  v3 = *((_QWORD *)result + 2);
  if (v3 + ~a2)
  {
    result = (char *)memmove((void *)(*v2 + 8 * a2), (const void *)(*v2 + 8 * a2 + 8), 8 * (v3 + ~a2));
    v3 = v2[1];
  }
  v2[1] = v3 - 1;
  ++v2[3];
  return result;
}

_DWORD *CA::Layer::update_removed_sublayer(CA::Layer *this, CA::Transaction *a2, int a3)
{
  int v6;
  _DWORD *result;

  v6 = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v6 + 1;
  if (!v6)
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Transaction::transaction_lock);
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 67) = a3;
  CA::Transaction::unlock(a2);
  CA::Layer::mark_visible(this, a2, 0);
  result = CA::Transaction::add_root(a2, this);
  if (((*((_DWORD *)this + 1) ^ (*((_DWORD *)this + 12) << 11)) & 0x400000) != 0)
    return (_DWORD *)CA::Layer::toggle_flipped(this, a2);
  return result;
}

_DWORD *CA::Transaction::add_root(CA::Transaction *this, CA::Layer *a2)
{
  int *v4;
  _DWORD *result;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;

  v4 = (int *)*((_QWORD *)this + 6);
  if (!v4)
  {
    v4 = (int *)x_hash_table_new_(0, 0, 0, 0, 0, 0);
    *((_QWORD *)this + 6) = v4;
  }
  result = (_DWORD *)hash_table_modify(v4, (uint64_t)a2, (uint64_t)a2, 0);
  if ((_DWORD)result)
  {
    while (1)
    {
      v6 = *(_DWORD *)a2;
      if (!*(_DWORD *)a2)
        break;
      while (1)
      {
        v7 = __ldaxr((unsigned int *)a2);
        if (v7 != v6)
          break;
        if (!__stlxr(v6 + 1, (unsigned int *)a2))
          goto LABEL_9;
      }
      __clrex();
    }
LABEL_9:
    if ((*((_BYTE *)this + 116) & 0x20) != 0)
    {
      v8 = *((unsigned int *)this + 24);
      if ((v8 & 0x80000000) != 0 || !*((_DWORD *)a2 + v8 + 68))
        return CA::Layer::thread_flags_(a2, this);
    }
  }
  return result;
}

void CA::Layer::destroy(CA::Layer *this)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  CALayerArray *v5;
  uint64_t v6;
  CA::Layer *v7;
  int v8;
  _WORD *v9;
  _WORD *v10;
  char *v11;
  const void *v12;
  const void *v13;
  const void *v14;

  v2 = CA::Transaction::ensure_compat(this);
  v3 = *(_DWORD *)(v2 + 100);
  *(_DWORD *)(v2 + 100) = v3 + 1;
  if (!v3)
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Transaction::transaction_lock);
  if ((*((_DWORD *)this + 1) & 0x60000) != 0)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(v2 + 104) + 224);
    if (v4)
      x_hash_table_remove(v4, (uint64_t)this);
  }
  else
  {
    v5 = (CALayerArray *)*((_QWORD *)this + 3);
    if (v5)
      CA::Layer::update_sublayers(this, (CA::Transaction *)v2, v5, 0);
    v6 = *((_QWORD *)this + 4);
    if (v6)
    {
      v7 = *(CA::Layer **)(v6 + 16);
      v8 = CA::Layer::ancestor_context_id(this, (CA::Transaction *)v2);
      CA::Layer::update_removed_sublayer(v7, (CA::Transaction *)v2, v8);
    }
    v9 = (_WORD *)*((_QWORD *)this + 35);
    if (v9)
    {
      if ((*((_BYTE *)this + 54) & 0x10) == 0 && non_visible_animating_layers)
        CFSetRemoveValue((CFMutableSetRef)non_visible_animating_layers, this);
      do
      {
        v10 = *(_WORD **)v9;
        schedule_stop_callback((uint64_t)v9, (uint64_t *)&animation_state);
        free_non_deferred_animation(v9, 1);
        v9 = v10;
      }
      while (v10);
      CA::Layer::set_animations(this, 0);
    }
    if (*((_DWORD *)this + 66))
    {
      if (CA::Render::Encoder::initialize_render_id_slide(void)::once[0] != -1)
        dispatch_once(CA::Render::Encoder::initialize_render_id_slide(void)::once, &__block_literal_global_11026);
      if (this)
        v11 = (char *)this + CA::Render::_render_id_slide;
      else
        v11 = 0;
      CA::Transaction::add_deleted_id(*(CA::Transaction **)(v2 + 104), (uint64_t)v11, *((_DWORD *)this + 66), 0);
    }
  }
  v12 = (const void *)*((_QWORD *)this + 3);
  if (v12)
  {
    CA::Transaction::release_object((CA::Transaction *)v2, v12);
    *((_QWORD *)this + 3) = 0;
  }
  v13 = (const void *)*((_QWORD *)this + 4);
  if (v13)
  {
    CA::Transaction::release_object((CA::Transaction *)v2, v13);
    *((_QWORD *)this + 4) = 0;
  }
  v14 = (const void *)*((_QWORD *)this + 36);
  if (v14)
  {
    CA::Transaction::release_object((CA::Transaction *)v2, v14);
    *((_QWORD *)this + 36) = 0;
  }
  CA::Transaction::unlock((CA::Transaction *)v2);
}

void sub_1844A2E20(_Unwind_Exception *a1)
{
  CA::Transaction *v1;

  CA::Transaction::unlock(v1);
  _Unwind_Resume(a1);
}

void CA::Layer::~Layer(CA::AttrList **this)
{
  unint64_t StatusReg;
  CA::Transaction *v3;
  CA::AttrList *v4;
  CA::AttrList *v5;
  int v6;
  id *v7;
  CA::Transaction *v8;
  CA::AttrList *v9;
  CA::AttrList *v10;
  int v11;
  id *v12;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v3 = *(CA::Transaction **)(StatusReg + 576);
  if (!v3)
    v3 = (CA::Transaction *)CA::Transaction::create((CA::Transaction *)this);
  v4 = this[32];
  if (v4)
    CA::Transaction::release_object(v3, v4);
  v5 = this[23];
  if (v5)
  {
    v6 = *((_DWORD *)v3 + 25);
    *((_DWORD *)v3 + 25) = v6 + 1;
    if (v6 || (os_unfair_lock_lock((os_unfair_lock_t)&CA::Transaction::transaction_lock), (v5 = this[23]) != 0))
      CA::AttrList::free(v5, v4);
    CA::Transaction::unlock(v3);
  }
  v7 = (id *)(this + 30);
  if (this[30])
  {
    if (*((_BYTE *)this + 248))
      v7 = (id *)objc_storeWeakOrNil(v7, 0);
    else
      *v7 = 0;
  }
  v8 = *(CA::Transaction **)(StatusReg + 576);
  if (!v8)
    v8 = (CA::Transaction *)CA::Transaction::create((CA::Transaction *)v7);
  v9 = this[18];
  if (v9)
    CA::Transaction::release_object(v8, v9);
  v10 = this[9];
  if (v10)
  {
    v11 = *((_DWORD *)v8 + 25);
    *((_DWORD *)v8 + 25) = v11 + 1;
    if (v11 || (os_unfair_lock_lock((os_unfair_lock_t)&CA::Transaction::transaction_lock), (v10 = this[9]) != 0))
      CA::AttrList::free(v10, v9);
    CA::Transaction::unlock(v8);
  }
  v12 = (id *)(this + 16);
  if (this[16])
  {
    if (*((_BYTE *)this + 136))
      objc_storeWeakOrNil(v12, 0);
    else
      *v12 = 0;
  }
}

void sub_1844A2F60(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  id *v3;

  v3 = (id *)(v1 + 128);
  if (*(_QWORD *)(v1 + 128))
  {
    if (*(_BYTE *)(v1 + 136))
      objc_storeWeakOrNil(v3, 0);
    else
      *v3 = 0;
  }
  _Unwind_Resume(exception_object);
}

void CA::Transaction::Level::~Level(CA::Transaction::Level *this, const void *a2)
{
  CA::Transaction::Continuation *v3;
  CA::AttrList *v4;

  v3 = (CA::Transaction::Continuation *)*((_QWORD *)this + 1);
  if (v3)
    CA::Transaction::Continuation::unref(v3);
  v4 = (CA::AttrList *)*((_QWORD *)this + 2);
  if (v4)
    CA::AttrList::free(v4, a2);
}

_QWORD *CA::Transaction::add_deleted_id(CA::Transaction *this, uint64_t a2, int a3, int a4)
{
  malloc_zone_t *malloc_zone;
  _QWORD *result;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;

  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  result = malloc_type_zone_malloc(malloc_zone, 0x18uLL, 0x8BB15036uLL);
  result[1] = a2;
  *((_DWORD *)result + 4) = a3;
  *((_DWORD *)result + 5) = a4;
  v10 = (unint64_t *)((char *)this + 24);
LABEL_2:
  v11 = *v10;
  *result = *v10;
  do
  {
    v12 = __ldaxr(v10);
    if (v12 != v11)
    {
      __clrex();
      goto LABEL_2;
    }
  }
  while (__stlxr((unint64_t)result, v10));
  return result;
}

_QWORD *x_hash_table_new_(unint64_t (*a1)(uint64_t a1), BOOL (*a2)(uint64_t a1, uint64_t a2), uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  unint64_t (*v11)(uint64_t);
  BOOL (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  _QWORD *v15;
  _OWORD *v16;
  malloc_zone_t *malloc_zone;
  _QWORD *v18;
  malloc_zone_t *v19;
  void *v20;
  char v21;
  malloc_zone_t *v22;

  if (a6 && *(_QWORD *)(a6 + 16) != 32)
    return 0;
  if (a1 == x_int_hash || a1 == 0)
    v11 = x_pointer_hash;
  else
    v11 = a1;
  if (a2 == x_int_compare || a2 == 0)
    v13 = x_pointer_compare;
  else
    v13 = a2;
  if (!a5)
  {
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v18 = malloc_type_zone_malloc(malloc_zone, 0x58uLL, 0x8BB15036uLL);
    v15 = v18;
    if (!v18)
      return v15;
    *(_DWORD *)v18 = 4;
    v18[1] = 15;
    v19 = (malloc_zone_t *)get_malloc_zone();
    v20 = malloc_type_zone_calloc(v19, 1uLL, 0x80uLL, 0x743898A5uLL);
    v15[2] = v20;
    if (v20)
      goto LABEL_21;
    v22 = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(v22, v15);
    return 0;
  }
  v14 = x_heap_malloc_small_(a5, 0x58uLL);
  v15 = (_QWORD *)v14;
  if (!v14)
    return v15;
  *(_DWORD *)v14 = 4;
  *(_QWORD *)(v14 + 8) = 15;
  v16 = (_OWORD *)x_heap_malloc_small_(a5, 0x80uLL);
  if (!v16)
  {
    v15[2] = 0;
    return 0;
  }
  v16[6] = 0u;
  v16[7] = 0u;
  v16[4] = 0u;
  v16[5] = 0u;
  v16[2] = 0u;
  v16[3] = 0u;
  *v16 = 0u;
  v16[1] = 0u;
  v15[2] = v16;
LABEL_21:
  v15[3] = 0;
  v15[4] = v11;
  v15[5] = v13;
  v15[6] = a3;
  v21 = v15[10] & 0xFC | (2 * (v13 == x_pointer_compare));
  v15[7] = a4;
  v15[8] = a5;
  v15[9] = a6;
  *((_BYTE *)v15 + 80) = v21;
  if (a5 && !a6)
  {
    v15[9] = x_pool_new_(a5);
    *((_BYTE *)v15 + 80) |= 1u;
  }
  return v15;
}

void CA::Layer::set_sublayers(CALayerArray **this, CALayerArray *a2)
{
  objc_object **v4;
  CA::Transaction *v5;
  int v6;
  CFIndex Count;
  CFIndex v8;
  unint64_t v9;
  char *v10;
  CFTypeRef *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  objc_object **v16;
  unsigned int *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  malloc_zone_t *malloc_zone;
  CALayerArray *v22;
  _QWORD v23[2];
  objc_object v24;
  uint64_t v25;
  CFRange v26;

  v25 = *MEMORY[0x1E0C80C00];
  v5 = CA::Transaction::ensure_compat((CA::Transaction *)this);
  if ((*((_DWORD *)this + 1) & 0x60000) != 0)
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("CALayerInvalidTree"), CFSTR("expecting model layer not copy: %@"), this[2]);
  if (this[3] != a2)
  {
    v6 = *((_DWORD *)v5 + 25);
    *((_DWORD *)v5 + 25) = v6 + 1;
    if (v6)
    {
      if (a2)
      {
LABEL_6:
        Count = CFArrayGetCount((CFArrayRef)a2);
        v8 = Count;
        if (Count)
        {
          v9 = 8 * Count;
          if ((unint64_t)(8 * Count) <= 0x1000)
          {
            MEMORY[0x1E0C80A78](Count);
            v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
            bzero(v10, 8 * v8);
            goto LABEL_12;
          }
          v10 = (char *)malloc_type_malloc(8 * Count, 0xC0040B8AA526DuLL);
          if (v10)
          {
LABEL_12:
            v26.location = 0;
            v26.length = v8;
            CFArrayGetValues((CFArrayRef)a2, v26, (const void **)v10);
            v12 = 0;
            v11 = 0;
            do
            {
              v13 = *(_QWORD *)&v10[8 * v12];
              v14 = CA::Layer::retain_parent(*(CA::Layer **)(v13 + 16), v5);
              if (v14)
              {
                v17 = v14;
                if (v14 != (unsigned int *)this || this[4] == (CALayerArray *)v13)
                {
                  CA::Layer::remove_sublayer((CA::Layer *)v14, v5, (CALayer *)v13, v15, v16);
                  MEMORY[0x1E0C80A78](v18);
                  v23[0] = v13;
                  v23[1] = v11;
                  v11 = (CFTypeRef *)v23;
                }
LABEL_18:
                v19 = *v17;
                if (*v17)
                {
                  do
                  {
                    v20 = __ldaxr(v17);
                    if (v20 != v19)
                    {
                      __clrex();
                      goto LABEL_18;
                    }
                  }
                  while (__stlxr(v19 - 1, v17));
                  if (v19 == 1)
                  {
                    CA::Layer::destroy((CA::Layer *)v17);
                    CA::Layer::~Layer((CA::AttrList **)v17);
                    malloc_zone = (malloc_zone_t *)get_malloc_zone();
                    malloc_zone_free(malloc_zone, v17);
                  }
                }
              }
              else
              {
                CA::Layer::remove_from_context(*(CA::Layer **)(v13 + 16));
              }
              ++v12;
            }
            while (v12 != v8);
            a2 = objc_alloc_init(CALayerArray);
            CALayerArrayInsertValues((uint64_t)a2, 0, (void **)v10, v8);
            if (v9 > 0x1000)
              free(v10);
            goto LABEL_29;
          }
        }
        v11 = 0;
        a2 = 0;
LABEL_29:
        v24.isa = 0;
        CA::Layer::begin_change((CA::Layer *)this, v5, CFSTR("sublayers"), &v24, v4);
        v22 = this[3];
        CA::Layer::update_sublayers((CA::Layer *)this, v5, v22, a2);
        this[3] = a2;
        CA::Layer::end_change((id *)this, v5, 536, (objc_object *)CFSTR("sublayers"), (objc_object *)v24.isa);
        CA::Transaction::unlock(v5);
        if (v22)
          CA::Transaction::release_object(v5, v22);
        while (v11)
        {
          CA::Transaction::release_object(v5, *v11);
          v11 = (CFTypeRef *)v11[1];
        }
        return;
      }
    }
    else
    {
      os_unfair_lock_lock((os_unfair_lock_t)&CA::Transaction::transaction_lock);
      if (a2)
        goto LABEL_6;
    }
    v11 = 0;
    goto LABEL_29;
  }
}

void sub_1844A35B0(_Unwind_Exception *a1)
{
  CA::Transaction *v1;

  CA::Transaction::unlock(v1);
  _Unwind_Resume(a1);
}

void CA::Layer::update_sublayers(CA::Layer *this, CA::Transaction *a2, CALayerArray *a3, CALayerArray *a4)
{
  int64_t var0;
  int64_t v9;
  uint64_t v10;
  size_t v11;
  CA::Layer ***v12;
  _CALayerArrayIvars *p_ivars;
  uint64_t v14;
  size_t v15;
  CA::Layer ***v16;
  _CALayerArrayIvars *v17;
  int v18;
  int v19;
  CA::Layer ***v20;
  CA::Layer **v21;
  CA::Layer ***v22;
  CA::Layer **v23;
  CA::Layer **v24;
  CA::Layer **v25;
  CA::Layer *v26;
  uint64_t v27;
  int v28;
  CA::Layer **v29;
  BOOL v30;
  CA::Layer **v31;
  CA::Layer *v32;
  uint64_t v33;
  int v34;
  CA::Layer **v35;
  CA::Layer ***v36;
  uint64_t v37;
  _QWORD v38[2];

  v38[1] = *MEMORY[0x1E0C80C00];
  if (a3 == a4)
    return;
  v38[0] = 0;
  if (!a3)
  {
    var0 = 0;
    if (a4)
      goto LABEL_4;
LABEL_6:
    v9 = 0;
    goto LABEL_7;
  }
  var0 = a3->_ivars.var0;
  if (!a4)
    goto LABEL_6;
LABEL_4:
  v9 = a4->_ivars.var0;
LABEL_7:
  v10 = 8 * var0;
  if (var0 < 1)
  {
    v12 = (CA::Layer ***)v38;
  }
  else
  {
    if ((unint64_t)(v10 + 8) > 0x1000)
    {
      v12 = (CA::Layer ***)malloc_type_malloc(v10 + 8, 0x80040B8603338uLL);
    }
    else
    {
      MEMORY[0x1E0C80A78](this);
      v12 = (CA::Layer ***)((char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
      bzero(v12, v11);
    }
    p_ivars = &a3->_ivars;
    if (a3->_ivars.var0 != 1 || a3->_ivars.capacity)
      p_ivars = (_CALayerArrayIvars *)p_ivars->layers;
    memcpy(v12, p_ivars, 8 * var0);
    qsort(v12, var0, 8uLL, (int (__cdecl *)(const void *, const void *))compare_pointer);
    v12[var0] = 0;
  }
  v14 = 8 * v9;
  v37 = v10;
  if (v9 < 1)
  {
    v16 = (CA::Layer ***)v38;
  }
  else
  {
    if ((unint64_t)(v14 + 8) > 0x1000)
    {
      v16 = (CA::Layer ***)malloc_type_malloc(v14 + 8, 0x80040B8603338uLL);
    }
    else
    {
      MEMORY[0x1E0C80A78](this);
      v16 = (CA::Layer ***)((char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
      bzero(v16, v15);
    }
    v17 = &a4->_ivars;
    if (a4->_ivars.var0 != 1 || a4->_ivars.capacity)
      v17 = (_CALayerArrayIvars *)v17->layers;
    memcpy(v16, v17, 8 * v9);
    qsort(v16, v9, 8uLL, (int (__cdecl *)(const void *, const void *))compare_pointer);
    v16[v9] = 0;
  }
  v18 = CA::Layer::ancestor_context_id(this, a2);
  v19 = 0;
  v36 = v12;
  v20 = v12 + 1;
  v21 = *v12;
  v22 = v16 + 1;
  v23 = *v16;
  if (v21 && v23)
  {
    v19 = 0;
    while (v21 != v23)
    {
      if (v21 >= v23)
      {
        CFRetain(v23);
        CA::Layer::update_added_sublayer(v23[2], a2, this, v18);
        v26 = v23[2];
        v27 = *((unsigned int *)a2 + 24);
        if ((v27 & 0x80000000) != 0 || (v28 = *((_DWORD *)v26 + v27 + 68)) == 0)
          v28 = *CA::Layer::thread_flags_(v26, a2);
        v19 |= v28;
        goto LABEL_36;
      }
      CA::Layer::update_removed_sublayer(v21[2], a2, v18);
      CA::Transaction::release_object(a2, v21);
      v24 = *v20++;
      v21 = v24;
LABEL_37:
      if (v21)
        v30 = v23 == 0;
      else
        v30 = 1;
      if (v30)
        goto LABEL_42;
    }
    v25 = *v20++;
    v21 = v25;
LABEL_36:
    v29 = *v22++;
    v23 = v29;
    goto LABEL_37;
  }
LABEL_42:
  if (v21)
  {
    do
    {
      CA::Layer::update_removed_sublayer(v21[2], a2, v18);
      CA::Transaction::release_object(a2, v21);
      v31 = *v20++;
      v21 = v31;
    }
    while (v31);
  }
  if (v23)
  {
    do
    {
      CFRetain(v23);
      CA::Layer::update_added_sublayer(v23[2], a2, this, v18);
      v32 = v23[2];
      v33 = *((unsigned int *)a2 + 24);
      if ((v33 & 0x80000000) != 0 || (v34 = *((_DWORD *)v32 + v33 + 68)) == 0)
        v34 = *CA::Layer::thread_flags_(v32, a2);
      v19 |= v34;
      v35 = *v22++;
      v23 = v35;
    }
    while (v35);
  }
  CA::Layer::update_for_changed_sublayers(this, a2, v19);
  if ((unint64_t)(v37 - 4089) <= 0xFFFFFFFFFFFFEFFELL)
    free(v36);
  if ((unint64_t)(v14 - 4089) <= 0xFFFFFFFFFFFFEFFELL)
    free(v16);
}

void x_hash_table_free(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  void (*v7)(_QWORD);
  void (*v8)(uint64_t);
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD **v12;
  _QWORD *v13;
  _QWORD *v14;
  malloc_zone_t *malloc_zone;
  malloc_zone_t *v16;
  void *v17;
  malloc_zone_t *v18;
  malloc_zone_t *v19;

  v2 = 0;
  v3 = 1 << *(_DWORD *)a1;
  do
  {
    v4 = *(_QWORD **)(a1[2] + 8 * v2);
    if (!v4)
    {
      if (a1[9])
        goto LABEL_16;
LABEL_14:
      v10 = *(_QWORD **)(a1[2] + 8 * v2);
      if (v10)
      {
        do
        {
          v11 = (_QWORD *)*v10;
          free(v10);
          v10 = v11;
        }
        while (v11);
      }
      goto LABEL_16;
    }
    do
    {
      v5 = v4;
      v4 = (_QWORD *)*v4;
      v6 = v5[3];
      v7 = (void (*)(_QWORD))a1[6];
      if (v7)
        v7(v5[2]);
      v8 = (void (*)(uint64_t))a1[7];
      if (v8)
        v8(v6);
      v9 = a1[9];
      if (v9 && (a1[10] & 1) == 0)
      {
        *v5 = *(_QWORD *)(v9 + 8);
        *(_QWORD *)(v9 + 8) = v5;
      }
    }
    while (v4);
    if (!v9)
      goto LABEL_14;
LABEL_16:
    ++v2;
  }
  while (v2 != v3);
  if (!a1[8])
  {
    if ((a1[10] & 1) != 0)
    {
      v12 = (_QWORD **)a1[9];
      if (v12)
      {
        if (!v12[4])
        {
          v13 = *v12;
          if (*v12)
          {
            do
            {
              v14 = (_QWORD *)*v13;
              malloc_zone = (malloc_zone_t *)get_malloc_zone();
              malloc_zone_free(malloc_zone, v13);
              v13 = v14;
            }
            while (v14);
          }
          v16 = (malloc_zone_t *)get_malloc_zone();
          malloc_zone_free(v16, v12);
        }
      }
    }
    v17 = (void *)a1[2];
    v18 = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(v18, v17);
    v19 = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(v19, a1);
  }
}

id CALayerGetContext(uint64_t a1)
{
  int *v1;
  int *v2;
  id *v3;
  id Weak;

  v1 = CA::Layer::retain_context(*(CA::Layer **)(a1 + 16));
  if (!v1)
    return 0;
  v2 = v1;
  v3 = (id *)(v1 + 20);
  if (*((_BYTE *)v2 + 88))
    Weak = objc_loadWeak(v3);
  else
    Weak = *v3;
  CA::Context::unref((CA::Context *)v2, 0);
  return Weak;
}

void CA::Context::unref(CA::Context *this, int a2)
{
  int v4;
  int v5;
  char v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const void *v11;
  const void *v12;
  const void *v13;
  id *v14;
  malloc_zone_t *malloc_zone;

  os_unfair_lock_lock((os_unfair_lock_t)&CA::Context::_lock);
  v4 = *(_DWORD *)this;
  v5 = *(_DWORD *)this - 1;
  *(_DWORD *)this = v5;
  v6 = *((_BYTE *)this + 241);
  if (v4 != 1 || a2 == 0)
    goto LABEL_16;
  if ((*((_BYTE *)this + 241) & 4) == 0)
  {
    if ((CA::all_contexts(void)::contexts_data_initialized & 1) != 0)
    {
      if (qword_1ECDC6558 != CA::all_contexts(void)::contexts_data)
      {
        v8 = 0;
        v9 = (qword_1ECDC6558 - CA::all_contexts(void)::contexts_data) >> 3;
        if (v9 <= 1)
          v9 = 1;
        while (*(CA::Context **)(CA::all_contexts(void)::contexts_data + 8 * v8) != this)
        {
          if (v9 == ++v8)
            goto LABEL_15;
        }
        v10 = qword_1ECDC6558 - 8;
        *(_QWORD *)(CA::all_contexts(void)::contexts_data + 8 * v8) = *(_QWORD *)(qword_1ECDC6558 - 8);
        qword_1ECDC6558 = v10;
        v6 = *((_BYTE *)this + 241);
      }
    }
    else
    {
      CA::all_contexts(void)::contexts_data = 0;
      qword_1ECDC6558 = 0;
      qword_1ECDC6560 = 0;
      CA::all_contexts(void)::contexts_data_initialized = 1;
    }
LABEL_15:
    v6 |= 4u;
    *((_BYTE *)this + 241) = v6;
    --CA::Context::_context_count;
LABEL_16:
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::Context::_lock);
    if (v5)
      return;
    goto LABEL_17;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Context::_lock);
LABEL_17:
  if (a2)
  {
    CA::Context::destroy(this);
    v11 = (const void *)*((_QWORD *)this + 15);
    if (v11)
      CFRelease(v11);
    CGColorSpaceRelease(*((CGColorSpaceRef *)this + 14));
    v12 = (const void *)*((_QWORD *)this + 29);
    if (v12)
      CFRelease(v12);
    pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 16));
    v13 = (const void *)*((_QWORD *)this + 19);
    if (v13)
      CFRelease(v13);
    v14 = (id *)((char *)this + 80);
    if (*((_QWORD *)this + 10))
    {
      if (*((_BYTE *)this + 88))
        objc_storeWeakOrNil(v14, 0);
      else
        *v14 = 0;
    }
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(malloc_zone, this);
  }
  else if ((v6 & 8) == 0)
  {
    CA::Context::invalidate(this);
  }
}

void sub_1844A3E40(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  const void *v3;
  id *v4;

  v3 = *(const void **)(v1 + 152);
  if (v3)
    CFRelease(v3);
  v4 = (id *)(v1 + 80);
  if (*(_QWORD *)(v1 + 80))
  {
    if (*(_BYTE *)(v1 + 88))
      objc_storeWeakOrNil(v4, 0);
    else
      *v4 = 0;
  }
  _Unwind_Resume(exception_object);
}

int *CA::Context::retain_context_with_id(CA::Context *this)
{
  int v1;
  int **i;
  int *v3;
  int v4;

  v1 = (int)this;
  os_unfair_lock_lock((os_unfair_lock_t)&CA::Context::_lock);
  if ((CA::all_contexts(void)::contexts_data_initialized & 1) != 0)
  {
    for (i = (int **)CA::all_contexts(void)::contexts_data; ; ++i)
    {
      if (i == (int **)qword_1ECDC6558)
      {
        v3 = 0;
        goto LABEL_9;
      }
      v3 = *i;
      v4 = **i;
      if (v4)
      {
        if (v3[2] == v1)
          break;
      }
    }
    *v3 = v4 + 1;
  }
  else
  {
    v3 = 0;
    CA::all_contexts(void)::contexts_data = 0;
    qword_1ECDC6558 = 0;
    qword_1ECDC6560 = 0;
    CA::all_contexts(void)::contexts_data_initialized = 1;
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Context::_lock);
  return v3;
}

void CA::Render::Encoder::ObjectCache::invalidate(CA::Render::Encoder::ObjectCache *this, const CA::Render::Object *a2)
{
  _QWORD *v3;
  uint64_t v4;
  unsigned int v5;
  int *v6;
  uint64_t v7;

  os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::Encoder::ObjectCache::_lock);
  v3 = (_QWORD *)CA::Render::Encoder::ObjectCache::_cache_list;
  if (CA::Render::Encoder::ObjectCache::_cache_list)
  {
    do
    {
      v4 = *v3;
      v5 = x_hash_table_remove(*(_QWORD *)(*v3 + 8), (uint64_t)this);
      if (v5 || (v7 = *(_QWORD *)(v4 + 24)) != 0 && (v5 = x_hash_table_remove(v7, (uint64_t)this)) != 0)
      {
        v6 = *(int **)(v4 + 16);
        if (!v6)
        {
          v6 = (int *)x_hash_table_new_(0, 0, 0, 0, 0, 0);
          *(_QWORD *)(v4 + 16) = v6;
        }
        hash_table_modify(v6, (uint64_t)this, v5, 0);
      }
      v3 = (_QWORD *)v3[1];
    }
    while (v3);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::Encoder::ObjectCache::_lock);
}

void CAMediaTimingInvalidate(uint64_t a1)
{
  unint64_t v1;

  if (a1)
  {
    if (timing_cache)
    {
      v1 = a1 ^ 0x8000000000000000;
      os_unfair_lock_lock((os_unfair_lock_t)&timing_lock);
      x_hash_table_remove(timing_cache, v1);
      os_unfair_lock_unlock((os_unfair_lock_t)&timing_lock);
    }
  }
}

uint64_t x_hash_table_remove(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD **v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v10)(_QWORD);
  void (*v11)(uint64_t);
  uint64_t v12;
  malloc_zone_t *malloc_zone;

  if (!*(_QWORD *)(a1 + 24))
    return 0;
  if ((*(_BYTE *)(a1 + 80) & 2) != 0)
    return x_hash_table_remove_ptr(a1, a2);
  v4 = (*(uint64_t (**)(uint64_t))(a1 + 32))(a2);
  v5 = (_QWORD **)(*(_QWORD *)(a1 + 16) + 8 * (*(_QWORD *)(a1 + 8) & v4));
  v6 = *v5;
  if (!*v5)
    return 0;
  v7 = v4;
  while (v6[1] != v7)
  {
LABEL_8:
    v5 = (_QWORD **)v6;
    v6 = (_QWORD *)*v6;
    if (!v6)
      return 0;
  }
  if ((*(unsigned int (**)(_QWORD, uint64_t))(a1 + 40))(v6[2], a2))
  {
    v6 = *v5;
    goto LABEL_8;
  }
  *v5 = (_QWORD *)*v6;
  v8 = v6[3];
  v10 = *(void (**)(_QWORD))(a1 + 48);
  if (v10)
    v10(v6[2]);
  v11 = *(void (**)(uint64_t))(a1 + 56);
  if (v11)
    v11(v8);
  v12 = *(_QWORD *)(a1 + 72);
  if (v12)
  {
    *v6 = *(_QWORD *)(v12 + 8);
    *(_QWORD *)(v12 + 8) = v6;
  }
  else
  {
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(malloc_zone, v6);
  }
  --*(_QWORD *)(a1 + 24);
  return v8;
}

int *CA::Layer::retain_context(CA::Layer *this)
{
  CA::Transaction *v2;
  CA::Context *v3;

  if ((*((_BYTE *)this + 54) & 0x10) == 0)
    return 0;
  v2 = *(CA::Transaction **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 576);
  if (!v2)
    v2 = (CA::Transaction *)CA::Transaction::create(this);
  v3 = (CA::Context *)CA::Layer::ancestor_context_id(this, v2);
  if ((_DWORD)v3)
    return CA::Context::retain_context_with_id(v3);
  else
    return 0;
}

void sub_1844A4294(_Unwind_Exception *a1)
{
  CA::Transaction *v1;

  CA::Transaction::unlock(v1);
  _Unwind_Resume(a1);
}

void CA::Layer::insert_sublayer(CA::Layer *this, CA::Transaction *a2, CALayer *a3, unint64_t a4)
{
  CALayerArray *v7;
  unint64_t var0;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  objc_object **v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  _CALayerArrayIvars *p_ivars;
  unint64_t v17;
  malloc_zone_t *malloc_zone;
  CA::Layer *v19;
  unsigned int *v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  CA::Layer *layer;
  int v25;
  CA::Layer *v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  malloc_zone_t *v31;
  objc_object *v32;
  unsigned int *v33;
  void *__src[2];

  __src[1] = *(void **)MEMORY[0x1E0C80C00];
  v7 = (CALayerArray *)*((_QWORD *)this + 3);
  if (v7)
    var0 = v7->_ivars.var0;
  else
    var0 = 0;
  if (var0 >= a4)
    v9 = a4;
  else
    v9 = var0;
  v10 = CA::Layer::retain_parent((CA::Layer *)a3->_attr.layer, a2);
  v33 = v10;
  if (v10 != (unsigned int *)this)
  {
    v13 = v10;
    if (!v10)
    {
      CFRetain(a3);
      CA::Layer::remove_from_context((CA::Layer *)a3->_attr.layer);
      v20 = 0;
LABEL_32:
      v23 = -1;
      goto LABEL_33;
    }
    CA::Layer::remove_sublayer((CA::Layer *)v10, a2, a3, v11, v12);
LABEL_10:
    v14 = *v13;
    if (!*v13)
      goto LABEL_31;
    do
    {
      v15 = __ldaxr(v13);
      if (v15 != v14)
      {
        __clrex();
        goto LABEL_10;
      }
    }
    while (__stlxr(v14 - 1, v13));
    if (v14 != 1)
    {
LABEL_31:
      v20 = 0;
      v33 = 0;
      goto LABEL_32;
    }
    CA::Layer::destroy((CA::Layer *)v13);
    CA::Layer::~Layer((CA::AttrList **)v13);
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v19 = (CA::Layer *)v13;
LABEL_30:
    malloc_zone_free(malloc_zone, v19);
    goto LABEL_31;
  }
  if (*((CALayer **)this + 4) == a3)
  {
    CA::Layer::remove_sublayer(this, a2, a3, v11, v12);
LABEL_23:
    v21 = *(_DWORD *)this;
    if (!*(_DWORD *)this)
      goto LABEL_31;
    do
    {
      v22 = __ldaxr((unsigned int *)this);
      if (v22 != v21)
      {
        __clrex();
        goto LABEL_23;
      }
    }
    while (__stlxr(v21 - 1, (unsigned int *)this));
    if (v21 != 1)
      goto LABEL_31;
    CA::Layer::destroy(this);
    CA::Layer::~Layer((CA::AttrList **)this);
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v19 = this;
    goto LABEL_30;
  }
  p_ivars = &v7->_ivars;
  v17 = v7->_ivars.var0;
  if (v17 != 1)
  {
    if (!v17)
    {
LABEL_56:
      v23 = -1;
      goto LABEL_57;
    }
    goto LABEL_52;
  }
  if (v7->_ivars.capacity)
LABEL_52:
    p_ivars = (_CALayerArrayIvars *)p_ivars->layers;
  v23 = 0;
  while (*((CALayer **)&p_ivars->layers + v23) != a3)
  {
    if (v17 == ++v23)
      goto LABEL_56;
  }
LABEL_57:
  v20 = (unsigned int *)this;
  if (v23 != v9)
  {
LABEL_33:
    v32 = 0;
    CA::Layer::begin_change(this, a2, CFSTR("sublayers"), (objc_object *)&v32, v12);
    if (v23 != -1)
    {
      CALayerArrayRemoveValue((char *)v7, v23);
      v9 = (__PAIR128__(v9, v23) - (unint64_t)v9) >> 64;
    }
    if (!v7)
    {
      v7 = objc_alloc_init(CALayerArray);
      *((_QWORD *)this + 3) = v7;
    }
    __src[0] = a3;
    CALayerArrayInsertValues((uint64_t)v7, v9, __src, 1);
    if (!v20)
    {
      layer = (CA::Layer *)a3->_attr.layer;
      v25 = CA::Layer::ancestor_context_id(this, a2);
      CA::Layer::update_added_sublayer(layer, a2, this, v25);
      v26 = (CA::Layer *)a3->_attr.layer;
      v27 = *((unsigned int *)a2 + 24);
      if ((v27 & 0x80000000) != 0 || (v28 = *((_DWORD *)v26 + v27 + 68)) == 0)
        v28 = *CA::Layer::thread_flags_(v26, a2);
      CA::Layer::update_for_changed_sublayers(this, a2, v28);
    }
    CA::Layer::end_change((id *)this, a2, 536, (objc_object *)CFSTR("sublayers"), v32);
    if (!v20)
      return;
    goto LABEL_43;
  }
  v20 = (unsigned int *)this;
LABEL_43:
  v29 = *v20;
  if (*v20)
  {
    do
    {
      v30 = __ldaxr(v20);
      if (v30 != v29)
      {
        __clrex();
        goto LABEL_43;
      }
    }
    while (__stlxr(v29 - 1, v20));
    if (v29 == 1)
    {
      CA::Layer::destroy((CA::Layer *)v20);
      CA::Layer::~Layer((CA::AttrList **)v20);
      v31 = (malloc_zone_t *)get_malloc_zone();
      malloc_zone_free(v31, v20);
    }
  }
}

void sub_1844A4614(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  X::Ref<CA::Layer>::~Ref((unsigned int **)va);
  _Unwind_Resume(a1);
}

CA::Layer *CA::Layer::ensure_transaction_recursively(CA::Layer *this, CA::Transaction *a2)
{
  CA::Layer *v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = this;
  v4 = *((unsigned int *)a2 + 24);
  if ((v4 & 0x80000000) != 0 || !*((_DWORD *)this + v4 + 68))
    this = (CA::Layer *)CA::Layer::thread_flags_(this, a2);
  v5 = *((_DWORD *)v3 + 13);
  if ((v5 & 0x2000000) != 0)
  {
    this = (CA::Layer *)objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("CALayerInvalid"), CFSTR("layer %@ is a part of cycle in its layer tree"), *((_QWORD *)v3 + 2));
    v5 = *((_DWORD *)v3 + 13);
  }
  *((_DWORD *)v3 + 13) = v5 | 0x2000000;
  v6 = (_QWORD *)*((_QWORD *)v3 + 3);
  if (v6)
  {
    v7 = v6 + 1;
    v8 = v6[2];
    if (v8 == 1)
    {
      if (!v6[3])
      {
        do
        {
LABEL_12:
          v9 = *v7++;
          this = (CA::Layer *)CA::Layer::ensure_transaction_recursively(*(CA::Layer **)(v9 + 16), a2);
          --v8;
        }
        while (v8);
        goto LABEL_13;
      }
    }
    else if (!v8)
    {
      goto LABEL_13;
    }
    v7 = (uint64_t *)*v7;
    goto LABEL_12;
  }
LABEL_13:
  v10 = *((_QWORD *)v3 + 4);
  if (v10)
    this = (CA::Layer *)CA::Layer::ensure_transaction_recursively(*(CA::Layer **)(v10 + 16), a2);
  *((_DWORD *)v3 + 13) &= ~0x2000000u;
  return this;
}

uint64_t CA::Layer::ancestor_context_id(CA::Layer *this, CA::Transaction *a2)
{
  int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  malloc_zone_t *malloc_zone;
  unsigned int *v12;

  v4 = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v4 + 1;
  if (!v4)
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Transaction::transaction_lock);
  v5 = *((unsigned int *)this + 67);
  v6 = CA::Layer::retain_parent(this, a2);
  if (v6)
  {
    v7 = v6;
    do
    {
      v5 = v7[67];
      v12 = CA::Layer::retain_parent((CA::Layer *)v7, a2);
LABEL_6:
      v8 = *v7;
      if (*v7)
      {
        do
        {
          v9 = __ldaxr(v7);
          if (v9 != v8)
          {
            __clrex();
            goto LABEL_6;
          }
        }
        while (__stlxr(v8 - 1, v7));
        if (v8 == 1)
        {
          CA::Layer::destroy((CA::Layer *)v7);
          CA::Layer::~Layer((CA::AttrList **)v7);
          malloc_zone = (malloc_zone_t *)get_malloc_zone();
          malloc_zone_free(malloc_zone, v7);
        }
      }
      v7 = v12;
    }
    while (v12);
  }
  CA::Transaction::unlock(a2);
  return v5;
}

void sub_1844A4828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int *a9)
{
  CA::Transaction *v9;

  X::Ref<CA::Layer>::~Ref(&a9);
  CA::Transaction::unlock(v9);
  _Unwind_Resume(a1);
}

void CALayerArrayInsertValues(uint64_t a1, uint64_t a2, void **__src, uint64_t a4)
{
  void **v4;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  unint64_t v12;
  size_t v14;
  malloc_zone_t *malloc_zone;
  char *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  void *v21;
  malloc_zone_t *v22;
  void *v23;
  unint64_t v24;

  v4 = (void **)(a1 + 8);
  if (*(_BYTE *)(a1 + 40))
    abort();
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = (void *)(v7 + a4);
  if (v7 + a4 == 1 && v8 == 0)
  {
    *v4 = *__src;
LABEL_23:
    v4[1] = v9;
    v4[3] = (char *)v4[3] + 1;
    return;
  }
  if ((unint64_t)v9 <= v8)
  {
    if (v7 != a2)
      memmove((char *)*v4 + 8 * a2 + 8 * a4, (char *)*v4 + 8 * a2, 8 * (v7 - a2));
    if (a4 == 1)
      *((_QWORD *)*v4 + a2) = *__src;
    else
      memcpy((char *)*v4 + 8 * a2, __src, 8 * a4);
    goto LABEL_23;
  }
  v12 = a4 + v8 + 7;
  if (!(v12 >> 61))
  {
    v24 = v12 & 0xFFFFFFFFFFFFFFF8;
    v14 = 8 * (v12 & 0xFFFFFFFFFFFFFFF8);
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v16 = (char *)malloc_type_zone_malloc(malloc_zone, v14, 0x8BB15036uLL);
    if (v16)
    {
      v17 = v16;
      if (a2)
      {
        v18 = (_QWORD *)(a1 + 8);
        if (*(_QWORD *)(a1 + 16) != 1 || *(_QWORD *)(a1 + 24))
          v18 = (_QWORD *)*v18;
        memcpy(v16, v18, 8 * a2);
      }
      v23 = v17;
      v19 = &v17[8 * a2];
      memcpy(v19, __src, 8 * a4);
      if (v7 != a2)
      {
        v20 = (_QWORD *)(a1 + 8);
        if (*(_QWORD *)(a1 + 16) != 1 || *(_QWORD *)(a1 + 24))
          v20 = (_QWORD *)*v20;
        memcpy(&v19[8 * a4], &v20[a2], 8 * (v7 - a2));
      }
      if (v8)
      {
        v21 = *v4;
        v22 = (malloc_zone_t *)get_malloc_zone();
        malloc_zone_free(v22, v21);
      }
      *v4 = v23;
      v4[2] = (void *)v24;
      goto LABEL_23;
    }
  }
}

void CA::Layer::update_for_changed_sublayers(CA::Layer *this, CA::Transaction *a2, int a3)
{
  CA::Layer *v4;
  int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  char *v10;
  int v11;
  int *v12;
  unsigned int *v13;
  int v14;
  unsigned int v15;
  malloc_zone_t *malloc_zone;
  int v17;
  unsigned int v18;
  malloc_zone_t *v19;
  CA::Layer *v20;

  if (a3)
  {
    v4 = this;
    if ((a3 & 0x18) != 0)
      v5 = (4 * ((a3 & 6) != 0)) | 0x10;
    else
      v5 = 4 * ((a3 & 6) != 0);
    if ((a3 & 0x60) != 0)
      v5 |= 0x40u;
    if ((a3 & 0x300) != 0)
      v5 |= 0x200u;
    v6 = v5 | a3 & 0x800;
LABEL_10:
    v7 = *(_DWORD *)this;
    if (*(_DWORD *)this)
    {
      do
      {
        v8 = __ldaxr((unsigned int *)this);
        if (v8 != v7)
        {
          __clrex();
          goto LABEL_10;
        }
      }
      while (__stlxr(v7 + 1, (unsigned int *)this));
      v20 = this;
      while (1)
      {
        v9 = *((unsigned int *)a2 + 24);
        if ((v9 & 0x80000000) != 0 || (v10 = (char *)v4 + 4 * v9, (v11 = *((_DWORD *)v10 + 68)) == 0))
        {
          v12 = CA::Layer::thread_flags_(v4, a2);
          v11 = *v12;
          v4 = v20;
        }
        else
        {
          v12 = (int *)(v10 + 272);
        }
        if ((v6 & ~v11) == 0)
          break;
        *v12 = v11 | v6;
        v13 = CA::Layer::retain_parent(v4, a2);
        v20 = (CA::Layer *)v13;
        if (v4)
        {
LABEL_21:
          v14 = *(_DWORD *)v4;
          if (*(_DWORD *)v4)
          {
            do
            {
              v15 = __ldaxr((unsigned int *)v4);
              if (v15 != v14)
              {
                __clrex();
                goto LABEL_21;
              }
            }
            while (__stlxr(v14 - 1, (unsigned int *)v4));
            if (v14 == 1)
            {
              CA::Layer::destroy(v4);
              CA::Layer::~Layer((CA::AttrList **)v4);
              malloc_zone = (malloc_zone_t *)get_malloc_zone();
              malloc_zone_free(malloc_zone, v4);
            }
          }
          v4 = v20;
          if (!v20)
            return;
        }
        else
        {
          v4 = (CA::Layer *)v13;
          if (!v13)
            return;
        }
      }
      if (v4)
      {
LABEL_33:
        v17 = *(_DWORD *)v4;
        if (*(_DWORD *)v4)
        {
          do
          {
            v18 = __ldaxr((unsigned int *)v4);
            if (v18 != v17)
            {
              __clrex();
              goto LABEL_33;
            }
          }
          while (__stlxr(v17 - 1, (unsigned int *)v4));
          if (v17 == 1)
          {
            CA::Layer::destroy(v4);
            CA::Layer::~Layer((CA::AttrList **)v4);
            v19 = (malloc_zone_t *)get_malloc_zone();
            malloc_zone_free(v19, v4);
          }
        }
      }
    }
  }
}

void sub_1844A4BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int *a9)
{
  X::Ref<CA::Layer>::~Ref(&a9);
  _Unwind_Resume(a1);
}

CA::Layer *CA::Layer::update_added_sublayer(CA::Layer *this, CA::Transaction *a2, CA::Layer *a3, int a4)
{
  int v8;
  int v9;
  int v10;
  CA::Layer *result;

  v8 = *((_DWORD *)this + 67);
  v9 = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v9 + 1;
  if (!v9)
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Transaction::transaction_lock);
  *((_QWORD *)this + 1) = a3;
  *((_DWORD *)this + 67) = 0;
  CA::Transaction::unlock(a2);
  CA::Layer::mark_visible(this, a2, (*((_DWORD *)a3 + 13) >> 20) & 1);
  CA::Transaction::remove_root(a2, this);
  if (v8 && v8 != a4)
    CA::Layer::mark_context_changed(this, (CA::Transaction **)a2);
  v10 = *((_DWORD *)a3 + 1) & 0x400000;
  if ((*((_DWORD *)this + 12) & 0x800) != 0)
    v10 ^= 0x400000u;
  if ((*((_DWORD *)this + 1) & 0x400000) != v10)
    CA::Layer::toggle_flipped(this, a2);
  result = (CA::Layer *)dyld_program_sdk_at_least();
  if ((_DWORD)result)
    return CA::Layer::ensure_transaction_recursively(this, a2);
  return result;
}

void CA::Transaction::remove_root(CA::Transaction *this, CA::Layer *a2)
{
  uint64_t v2;
  unsigned int v4;
  unsigned int v5;
  malloc_zone_t *malloc_zone;

  v2 = *((_QWORD *)this + 6);
  if (v2 && x_hash_table_remove_ptr(v2, (uint64_t)a2))
  {
LABEL_3:
    v4 = *(_DWORD *)a2;
    if (*(_DWORD *)a2)
    {
      do
      {
        v5 = __ldaxr((unsigned int *)a2);
        if (v5 != v4)
        {
          __clrex();
          goto LABEL_3;
        }
      }
      while (__stlxr(v4 - 1, (unsigned int *)a2));
      if (v4 == 1)
      {
        CA::Layer::destroy(a2);
        CA::Layer::~Layer((CA::AttrList **)a2);
        malloc_zone = (malloc_zone_t *)get_malloc_zone();
        malloc_zone_free(malloc_zone, a2);
      }
    }
  }
}

uint64_t x_hash_table_remove_ptr(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  void (*v7)(_QWORD);
  void (*v8)(uint64_t);
  uint64_t v9;
  malloc_zone_t *malloc_zone;

  if (*(_QWORD *)(a1 + 24))
  {
    v4 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 8
                                         * (*(_QWORD *)(a1 + 8) & (*(uint64_t (**)(uint64_t))(a1 + 32))(a2)));
    while (1)
    {
      v5 = v4;
      v4 = (_QWORD *)*v4;
      if (!v4)
        break;
      if (v4[2] == a2)
      {
        *v5 = *v4;
        v6 = v4[3];
        v7 = *(void (**)(_QWORD))(a1 + 48);
        if (v7)
          v7(v4[2]);
        v8 = *(void (**)(uint64_t))(a1 + 56);
        if (v8)
          v8(v6);
        v9 = *(_QWORD *)(a1 + 72);
        if (v9)
        {
          *v4 = *(_QWORD *)(v9 + 8);
          *(_QWORD *)(v9 + 8) = v4;
        }
        else
        {
          malloc_zone = (malloc_zone_t *)get_malloc_zone();
          malloc_zone_free(malloc_zone, v4);
        }
        --*(_QWORD *)(a1 + 24);
        return v6;
      }
    }
  }
  return 0;
}

void CA::Layer::remove_from_context(CA::Layer *this)
{
  int *v2;
  CA::Context *v3;
  CA::Transaction *v4;
  int v5;

  if ((*((_BYTE *)this + 54) & 0x10) != 0)
  {
    v2 = CA::Layer::retain_context(this);
    if (v2)
    {
      v3 = (CA::Context *)v2;
      if (*((_QWORD *)v2 + 12) == *((_QWORD *)this + 2))
      {
        v4 = *(CA::Transaction **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 576);
        if (!v4)
          v4 = (CA::Transaction *)CA::Transaction::create((CA::Transaction *)v2);
        CA::Transaction::unlock(v4);
        CA::Context::set_layer(v3, 0);
        v5 = *((_DWORD *)v4 + 25);
        *((_DWORD *)v4 + 25) = v5 + 1;
        if (!v5)
          os_unfair_lock_lock((os_unfair_lock_t)&CA::Transaction::transaction_lock);
      }
      CA::Context::unref(v3, 0);
    }
  }
}

void sub_1844A4EE8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  int v3;

  v3 = *(_DWORD *)(v1 + 100);
  *(_DWORD *)(v1 + 100) = v3 + 1;
  if (!v3)
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Transaction::transaction_lock);
  _Unwind_Resume(exception_object);
}

uint64_t release_timing(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 8);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  }
  return result;
}

void CA::Render::Timing::~Timing(CA::Render::Timing *this, const CA::Render::Object *a2)
{
  malloc_zone_t *malloc_zone;

  --dword_1ECDC7CF8;
  *(_QWORD *)this = off_1E1598C30;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0)
    CA::Render::Encoder::ObjectCache::invalidate(this, a2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

{
  --dword_1ECDC7CF8;
  *(_QWORD *)this = off_1E1598C30;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0)
    CA::Render::Encoder::ObjectCache::invalidate(this, a2);
}

void x_hash_table_remove_if (uint64_t a1, unsigned int (*a2)(_QWORD, _QWORD, uint64_t), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD **v8;
  _QWORD *v9;
  uint64_t v10;
  void (*v11)(_QWORD);
  void (*v12)(uint64_t);
  uint64_t v13;
  malloc_zone_t *malloc_zone;

  if (*(_QWORD *)(a1 + 24))
  {
    v6 = 0;
    v7 = 1 << *(_DWORD *)a1;
    do
    {
      v8 = (_QWORD **)(*(_QWORD *)(a1 + 16) + 8 * v6);
      while (1)
      {
        v9 = *v8;
        if (!*v8)
          break;
        if (a2(v9[2], v9[3], a3))
        {
          *v8 = (_QWORD *)*v9;
          v10 = v9[3];
          v11 = *(void (**)(_QWORD))(a1 + 48);
          if (v11)
            v11(v9[2]);
          v12 = *(void (**)(uint64_t))(a1 + 56);
          if (v12)
            v12(v10);
          v13 = *(_QWORD *)(a1 + 72);
          if (v13)
          {
            *v9 = *(_QWORD *)(v13 + 8);
            *(_QWORD *)(v13 + 8) = v9;
          }
          else
          {
            malloc_zone = (malloc_zone_t *)get_malloc_zone();
            malloc_zone_free(malloc_zone, v9);
          }
          --*(_QWORD *)(a1 + 24);
        }
        else
        {
          v8 = (_QWORD **)*v8;
        }
      }
      ++v6;
    }
    while (v6 != v7);
  }
}

uint64_t CA::release_root_if_unused(CA *this, CA::Layer *a2, CA::Layer *a3, void *a4)
{
  int v6;
  unsigned int v7;
  malloc_zone_t *malloc_zone;

  if (*((_QWORD *)this + 2))
    return 0;
LABEL_3:
  v6 = *(_DWORD *)this;
  if (*(_DWORD *)this)
  {
    do
    {
      v7 = __ldaxr((unsigned int *)this);
      if (v7 != v6)
      {
        __clrex();
        goto LABEL_3;
      }
    }
    while (__stlxr(v6 - 1, (unsigned int *)this));
    if (v6 == 1)
    {
      CA::Layer::destroy(this);
      CA::Layer::~Layer((CA::AttrList **)this);
      malloc_zone = (malloc_zone_t *)get_malloc_zone();
      malloc_zone_free(malloc_zone, this);
    }
  }
  return 1;
}

void free_non_deferred_animation(_WORD *a1, int a2)
{
  __int16 v4;
  const void *v5;
  CA::Transaction *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  const void *v11;
  __int128 v12;
  malloc_zone_t *malloc_zone;
  __int16 v14;

  v4 = a1[28];
  if ((v4 & 8) != 0)
  {
    v14 = a1[28] & 0x10;
    if (a2)
      v14 = 16;
    a1[28] = v14 | v4 & 0xFFEF;
  }
  else
  {
    if (*((_DWORD *)a1 + 15) != -892679478)
      __assert_rtn("free_non_deferred_animation", "CALayer.mm", 7162, "la->canary == LayerAnimation::CANARY_VALUE");
    v5 = (const void *)*((_QWORD *)a1 + 1);
    if (v5)
    {
      v6 = *(CA::Transaction **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 576);
      if (!v6)
      {
        v6 = (CA::Transaction *)CA::Transaction::create(0);
        v5 = (const void *)*((_QWORD *)a1 + 1);
      }
      CA::Transaction::release_object(v6, v5);
    }
    v7 = (unsigned int *)*((_QWORD *)a1 + 4);
    if (v7)
    {
      v8 = v7 + 2;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
        (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
    }
    v11 = (const void *)*((_QWORD *)a1 + 2);
    if (v11)
      CFRelease(v11);
    if (a2)
    {
      *(_QWORD *)&v12 = 0x3333333333333333;
      *((_QWORD *)&v12 + 1) = 0x3333333333333333;
      *((_OWORD *)a1 + 2) = v12;
      *((_OWORD *)a1 + 3) = v12;
      *(_OWORD *)a1 = v12;
      *((_OWORD *)a1 + 1) = v12;
      malloc_zone = (malloc_zone_t *)get_malloc_zone();
      malloc_zone_free(malloc_zone, a1);
    }
  }
}

_QWORD *CA::Layer::mark_context_changed(_QWORD *this, CA::Transaction **a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *i;

  v3 = (uint64_t)this;
  v4 = (unsigned int *)this + 1;
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 | 0x2000000, v4));
  *((_DWORD *)this + 10) |= 0x1FFFFFu;
  if (*((_DWORD *)this + 66))
  {
    if (CA::Render::Encoder::initialize_render_id_slide(void)::once[0] != -1)
      dispatch_once(CA::Render::Encoder::initialize_render_id_slide(void)::once, &__block_literal_global_11026);
    if (v3)
      v6 = CA::Render::_render_id_slide + v3;
    else
      v6 = 0;
    this = CA::Transaction::add_deleted_id(a2[13], v6, *(_DWORD *)(v3 + 264), 0);
    *(_DWORD *)(v3 + 264) = 0;
  }
  v7 = *(_QWORD **)(v3 + 24);
  if (v7)
  {
    v8 = v7 + 1;
    v9 = v7[2];
    if (v9 == 1)
    {
      if (!v7[3])
      {
        do
        {
LABEL_16:
          v10 = *v8++;
          this = (_QWORD *)CA::Layer::mark_context_changed(*(CA::Layer **)(v10 + 16), (CA::Transaction *)a2);
          --v9;
        }
        while (v9);
        goto LABEL_17;
      }
    }
    else if (!v9)
    {
      goto LABEL_17;
    }
    v8 = (uint64_t *)*v8;
    goto LABEL_16;
  }
LABEL_17:
  v11 = *(_QWORD *)(v3 + 32);
  if (v11)
    this = (_QWORD *)CA::Layer::mark_context_changed(*(CA::Layer **)(v11 + 16), (CA::Transaction *)a2);
  for (i = *(uint64_t **)(v3 + 280); i; i = (uint64_t *)*i)
    *((_DWORD *)i + 11) = 0;
  return this;
}

uint64_t CA::OGL::Context::remove_images(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  CA::OGL::Context::prepend_deleted_image(a3, a2);
  return 1;
}

_QWORD *CA::OGL::Context::prepend_deleted_image(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  malloc_zone_t *malloc_zone;
  uint64_t v6;

  if (!*(_BYTE *)(a2 + 61))
  {
    v3 = result;
    v4 = result[38];
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    result = malloc_type_zone_malloc(malloc_zone, 0x10uLL, 0x8BB15036uLL);
    *result = a2;
    result[1] = v4;
    v3[38] = result;
    v6 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
    {
      if (*(_QWORD **)(v6 + 88) == v3)
        *(_QWORD *)(v6 + 88) = 0;
      *(_QWORD *)a2 = 0;
    }
    if (*(_BYTE *)(a2 + 60))
    {
      result = x_list_remove((_QWORD *)v3[39], a2);
      v3[39] = result;
      *(_BYTE *)(a2 + 60) = 0;
    }
    *(_BYTE *)(a2 + 61) = 1;
  }
  return result;
}

void CA::Render::ShapeLayer::~ShapeLayer(CA::Render::ShapeLayer *this, const CA::Render::Object *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  malloc_zone_t *malloc_zone;

  *(_QWORD *)this = off_1E1596258;
  v3 = (unsigned int *)*((_QWORD *)this + 17);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
  }
  v7 = (unsigned int *)*((_QWORD *)this + 16);
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
  }
  v11 = (unsigned int *)*((_QWORD *)this + 14);
  if (v11)
  {
    v12 = v11 + 2;
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
      (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 16))(v11);
  }
  v15 = (unsigned int *)*((_QWORD *)this + 8);
  if (v15)
  {
    v16 = v15 + 2;
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
      (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 16))(v15);
  }
  v19 = (unsigned int *)*((_QWORD *)this + 5);
  if (v19)
  {
    v20 = v19 + 2;
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
      (*(void (**)(unsigned int *))(*(_QWORD *)v19 + 16))(v19);
  }
  v23 = (unsigned int *)*((_QWORD *)this + 2);
  if (v23)
  {
    v24 = v23 + 2;
    do
    {
      v25 = __ldaxr(v24);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, v24));
    if (!v26)
      (*(void (**)(unsigned int *))(*(_QWORD *)v23 + 16))(v23);
  }
  --dword_1ECDC7CE0;
  *(_QWORD *)this = off_1E1598C30;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0)
    CA::Render::Encoder::ObjectCache::invalidate(this, a2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;

  *(_QWORD *)this = off_1E1596258;
  v3 = (unsigned int *)*((_QWORD *)this + 17);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
  }
  v7 = (unsigned int *)*((_QWORD *)this + 16);
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
  }
  v11 = (unsigned int *)*((_QWORD *)this + 14);
  if (v11)
  {
    v12 = v11 + 2;
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
      (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 16))(v11);
  }
  v15 = (unsigned int *)*((_QWORD *)this + 8);
  if (v15)
  {
    v16 = v15 + 2;
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
      (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 16))(v15);
  }
  v19 = (unsigned int *)*((_QWORD *)this + 5);
  if (v19)
  {
    v20 = v19 + 2;
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
      (*(void (**)(unsigned int *))(*(_QWORD *)v19 + 16))(v19);
  }
  v23 = (unsigned int *)*((_QWORD *)this + 2);
  if (v23)
  {
    v24 = v23 + 2;
    do
    {
      v25 = __ldaxr(v24);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, v24));
    if (!v26)
      (*(void (**)(unsigned int *))(*(_QWORD *)v23 + 16))(v23);
  }
  --dword_1ECDC7CE0;
  *(_QWORD *)this = off_1E1598C30;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0)
    CA::Render::Encoder::ObjectCache::invalidate(this, a2);
}

void CA::Transaction::free_command_list(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  const void *v3;
  _QWORD *v4;

  if (a1)
  {
    v1 = a1;
    v2 = a1;
    do
    {
      v3 = (const void *)v2[3];
      if (v3)
        CFRelease(v3);
      v2 = (_QWORD *)*v2;
    }
    while (v2);
    do
    {
      v4 = (_QWORD *)*v1;
      free(v1);
      v1 = v4;
    }
    while (v4);
  }
}

uint64_t CA::Transaction::set_frame_begin_time(uint64_t this, double a2)
{
  double v2;

  v2 = *(double *)(this + 176);
  if (v2 == 0.0 || v2 > a2)
  {
    *(double *)(this + 176) = a2;
    if ((*(_BYTE *)(this + 204) & 0x20) == 0)
    {
      CAHostTimeWithTime(a2);
      return kdebug_trace();
    }
  }
  return this;
}

void sub_1844A56BC(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void CA::OGL::iosurface_textures_destroy_value(id *a1)
{

  JUMPOUT(0x186DBD978);
}

void ___ZN2CA3OGL12MetalContext12delete_imageEPNS0_5ImageE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = 0;
  v2 = a1 + 32;
  do
  {

    v1 += 8;
  }
  while (v1 != 24);
}

void CA::Render::Updater::prepare_layer0(_QWORD *a1, CA::Render::LayerNode *a2, CA::Render::FlattenManager *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  CA::Render::LayerNode *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  int8x8_t *v10;
  int8x8_t *v11;
  int8x8_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint8x8_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const CA::Render::Layer *v25;
  unsigned int *v26;
  __n128 v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  CA::Render *v31;
  uint64_t v32;
  CA::Render::FlattenManager *v33;
  CA::Render::LayerNode *v34;
  float32x2_t v35;
  unsigned int v36;
  int v37;
  __int16 v38;
  __int16 v39;
  uint64_t v40;
  uint64_t v41;
  float v42;
  int v43;
  uint64_t v44;
  double v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  const CA::Render::Object *v60;
  uint64_t v61;
  CA::Render *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  double v70;
  uint64_t v71;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  int v76;
  unsigned int v77;
  uint64_t v78;
  float64_t v79;
  uint64_t v80;
  unint64_t v81;
  CA::Render::Texture **v82;
  void **v83;
  CA::Render::Texture **v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v89;
  unsigned __int16 *v90;
  unsigned __int16 *v91;
  int v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  BOOL v104;
  uint64_t v108;
  double v109;
  unsigned int v110;
  int v111;
  double v112;
  uint64_t v113;
  _QWORD *v114;
  _QWORD *v115;
  char v116;
  float v117;
  _QWORD *v118;
  CA::Render *v119;
  double *v120;
  double v121;
  double v122;
  CA::Render::Animation *v123;
  malloc_zone_t *v124;
  uint64_t v125;
  const CA::Render::Object *v126;
  NSObject *v127;
  uint64_t v128;
  double v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  int v134;
  int v135;
  uint64_t v136;
  char *v137;
  int v138;
  unsigned int v139;
  int v141;
  NSObject *v142;
  const char *v143;
  const CA::Render::Object *v144;
  unsigned int *v145;
  unsigned int v146;
  float64x2_t *v147;
  const double *v148;
  int8x16_t v149;
  int8x16_t v150;
  CA::Render::FlattenManager *v151;
  int v152;
  uint64_t v153;
  CA::Render::Context *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  malloc_zone_t *v158;
  void *v159;
  __n128 v160;
  void *v161;
  unsigned int *v162;
  unsigned int *v163;
  unsigned int v164;
  unsigned int v165;
  uint64_t v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  CA::Render::Layer *v172;
  unint64_t v173;
  unint64_t v174;
  int v175;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  unint64_t v183;
  BOOL v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  int v188;
  unsigned __int8 v189;
  _BOOL4 v190;
  uint64_t v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  CA::Render::Vector *v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  const CA::Render::Layer **v204;
  uint64_t v205;
  unint64_t v206;
  double v207;
  uint64_t v208;
  malloc_zone_t *v209;
  CA::Render::MeshTransform *v210;
  CA::Render::MeshTransform *v211;
  CA::Render::Texture **v212;
  float *v213;
  float64x2_t *v214;
  float v215;
  float64_t v216;
  uint64_t v217;
  double *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t i;
  double v222;
  unsigned int *v223;
  unsigned int v224;
  unsigned int v225;
  char v226;
  unsigned __int8 v227;
  int8x16_t v228;
  uint64_t v229;
  unsigned int *v230;
  unsigned int v231;
  char v232;
  int v233;
  unsigned int *v234;
  const CA::Render::Object *v235;
  unsigned int *v236;
  unsigned int v237;
  float64x2_t *v238;
  uint64_t v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  const CA::Render::TransitionSubclass *v243;
  _DWORD *v244;
  double v245;
  uint64_t v246;
  uint64_t v247;
  float v248;
  uint64_t v249;
  malloc_zone_t *v250;
  unsigned int *v251;
  unsigned int *v252;
  unsigned int v253;
  unsigned int v254;
  uint64_t v255;
  uint64_t v256;
  float v257;
  double v258;
  double v259;
  CA::Render::Transition *v260;
  uint64_t v261;
  _QWORD *v262;
  _QWORD *j;
  unint64_t v264;
  unsigned int *v265;
  unsigned int v266;
  double v267;
  float v268;
  uint64_t *v269;
  uint64_t v270;
  int v271;
  int v272;
  double v273;
  unint64_t v274;
  unsigned int *v275;
  unsigned int v276;
  int v277;
  double *v278;
  double v279;
  double v280;
  double v281;
  double v282;
  double v283;
  uint64_t v284;
  double v285;
  double v286;
  double v287;
  float v288;
  int v289;
  unsigned int v290;
  unsigned int v291;
  double v292;
  _UNKNOWN **v293;
  float v294;
  uint64_t v295;
  uint64_t v296;
  unsigned int *v297;
  unsigned int *v298;
  unsigned int v299;
  unsigned int v300;
  malloc_zone_t *v301;
  int v302;
  uint64_t v303;
  unsigned int *v304;
  unsigned int v305;
  uint64_t v306;
  unsigned int *v307;
  unsigned int v308;
  int v309;
  uint64_t v310;
  unsigned int *v311;
  unsigned int v312;
  float v313;
  unsigned int *v314;
  const CA::Render::Object *v315;
  unsigned int *v316;
  unsigned int v317;
  float64x2_t *v318;
  int v319;
  float64x2_t v320;
  float64x2_t v321;
  char v322;
  unsigned int v323;
  void *v324;
  __int16 v325;
  CA::Render::FlattenManager *v326;
  int v327;
  unsigned int v328;
  uint64_t v329;
  unsigned int *v330;
  unsigned int v331;
  unsigned int v332;
  uint64_t is_2d_affine;
  CA::Render::FlattenManager *v334;
  CA::Render::FlattenManager *v335;
  unint64_t v336;
  uint64_t v337;
  int v338;
  int v340;
  float64x2_t *v341;
  double v342;
  float v343;
  double v344;
  double v345;
  float v346;
  float64x2_t v347;
  int8x16_t v348;
  uint64_t v349;
  uint64_t v350;
  BOOL v351;
  __int32 v352;
  unint64_t v353;
  double v354;
  float v355;
  unsigned int v356;
  int v357;
  int v358;
  double v359;
  int v360;
  _BOOL4 v361;
  uint64_t v362;
  _BOOL4 v363;
  double v364;
  float v365;
  double v366;
  double v367;
  double v368;
  double v369;
  double v370;
  double v371;
  malloc_zone_t *v372;
  float64_t v373;
  unsigned int *v374;
  unsigned int v375;
  unsigned int *v376;
  unsigned int v377;
  unsigned int v378;
  uint64_t v379;
  uint64_t v380;
  float64x2_t v381;
  int8x16_t v382;
  uint64_t v383;
  int v384;
  uint64_t v385;
  double v386;
  double v387;
  float v388;
  double v389;
  double v390;
  _BOOL4 v391;
  double v392;
  _BOOL4 v393;
  _BOOL4 v394;
  uint64_t v395;
  BOOL v396;
  _BOOL4 v397;
  _BOOL4 v398;
  unint64_t v399;
  uint64_t v400;
  BOOL v401;
  _BOOL4 v402;
  double v403;
  _BOOL4 v404;
  uint64_t v405;
  BOOL v406;
  uint64_t v407;
  __int16 v408;
  uint64_t v409;
  unsigned int *v410;
  unsigned int v411;
  unsigned int v412;
  uint64_t v413;
  uint64_t v414;
  unsigned int v415;
  uint64_t v416;
  float64_t v417;
  unint64_t v418;
  uint64_t v419;
  unsigned int v420;
  int8x8_t v421;
  CA::Render::LayerNode *v422;
  _QWORD *v423;
  CA::Render::LayerNode *v424;
  unsigned int *v425;
  unsigned int *v426;
  unsigned int v427;
  unsigned int v428;
  _BYTE **v429;
  _BYTE *v430;
  double v431;
  BOOL v432;
  uint64_t v433;
  uint64_t v434;
  double v435;
  BOOL v437;
  uint64_t v438;
  double v439;
  uint64_t v440;
  int v441;
  uint64_t *v442;
  uint64_t v443;
  int v444;
  uint64_t v445;
  uint64_t v446;
  unint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  CA::Mat4Impl *v455;
  unsigned int v456;
  uint64_t v457;
  int8x16_t v458;
  double v459;
  float64x2_t v461;
  float64x2_t v462;
  float64x2_t v463;
  int8x16_t v464;
  float64x2_t v465;
  float64x2_t v466;
  float64x2_t v467;
  float64x2_t v468;
  float32x2_t v469;
  double v470;
  double v471;
  float64x2_t v472;
  double v473;
  float64x2_t v474;
  double v475;
  double *v476;
  unsigned int v477;
  unsigned int v478;
  double v479;
  uint64_t v480;
  CA::Render::Context *v481;
  uint64_t v482;
  uint64_t v483;
  CA::CAHDRProcessor *v484;
  _BYTE *v485;
  CA::CAHDRProcessor *v486;
  float v487;
  float v488;
  CA::Render::Texture *v489;
  int v490;
  char v491;
  unsigned int v492;
  unsigned int v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  char v497;
  uint64_t v498;
  uint64_t v499;
  unsigned int v500;
  unsigned int v501;
  float64_t v502;
  unsigned int v503;
  unsigned int v504;
  unsigned int v505;
  int v506;
  int v507;
  __int32 v508;
  unsigned int *v509;
  unsigned int *v510;
  unsigned int v511;
  unsigned int v512;
  void (*v513)(uint64_t);
  __int32 v514;
  unsigned int *v515;
  unsigned int *v516;
  unsigned int v517;
  unsigned int v518;
  CA::Render *v519;
  __IOSurface *v520;
  int v521;
  uint64_t v522;
  _QWORD *v523;
  CA::Render::Surface *v524;
  int v525;
  __IOSurface *v526;
  unsigned int v527;
  unsigned int v528;
  unsigned int *v529;
  unsigned int v530;
  unsigned int v531;
  uint64_t v532;
  malloc_zone_t *v533;
  uint64_t v534;
  CA::Render::Surface *v535;
  float v536;
  unsigned int **v537;
  unsigned int *v538;
  uint64_t v539;
  uint64_t v540;
  double v541;
  double v542;
  id v544;
  const void *v545;
  uint64_t v546;
  uint64_t v547;
  unsigned int *v548;
  unsigned int *v549;
  unsigned int v550;
  unsigned int v551;
  unsigned int *v552;
  unsigned int *v553;
  unsigned int v554;
  unsigned int v555;
  unsigned int *v556;
  unsigned int *v557;
  unsigned int v558;
  unsigned int v559;
  unsigned int *v560;
  unsigned int *v561;
  unsigned int v562;
  unsigned int v563;
  uint64_t v564;
  uint64_t *v565;
  uint64_t v566;
  int v567;
  unsigned int *v568;
  unsigned int *v569;
  unsigned int v570;
  unsigned int v571;
  id v572;
  const void *v573;
  uint64_t v574;
  unsigned int *v575;
  unsigned int *v576;
  unsigned int v577;
  unsigned int v578;
  double v579;
  double v580;
  double v581;
  float64x2_t v582;
  double v583;
  float64x2_t v584;
  float64x2_t v585;
  float64x2_t v586;
  uint64_t v587;
  double v588;
  float64x2_t v589;
  double v590;
  float64x2_t v591;
  float64x2_t v592;
  double v593;
  double v594;
  float64x2_t v595;
  float64x2_t v596;
  float64x2_t v597;
  int8x16_t v599;
  float64x2_t v600;
  double v601;
  unsigned int *v602;
  unsigned int v603;
  unsigned int v604;
  BOOL v605;
  const CA::Render::Layer *v606;
  uint64_t v607;
  __n128 v608;
  uint64_t v609;
  uint64_t v610;
  unint64_t v611;
  uint64_t v612;
  uint64_t v613;
  CA::Render::LayerNode *v614;
  unsigned int *v615;
  unsigned int v616;
  uint64_t v617;
  unsigned int v618;
  unsigned int v619;
  unint64_t v620;
  CA::Shape *v621;
  uint64_t v622;
  unint64_t v623;
  unsigned int *v624;
  uint64_t v625;
  _QWORD *v626;
  unsigned int v627;
  unint64_t v628;
  unint64_t v629;
  unint64_t v630;
  unint64_t v631;
  uint8x8_t v632;
  unint64_t v633;
  _QWORD *v634;
  _QWORD *v635;
  unint64_t v636;
  _QWORD *v637;
  float v638;
  _BOOL8 v639;
  unint64_t v640;
  unint64_t v641;
  int8x8_t prime;
  void *v643;
  _QWORD *v644;
  uint64_t v645;
  _QWORD *v646;
  unint64_t v647;
  uint8x8_t v648;
  unint64_t v649;
  uint8x8_t v650;
  uint64_t v651;
  _QWORD *v652;
  unint64_t v653;
  _QWORD *v654;
  _QWORD *v655;
  unint64_t v656;
  _QWORD *v657;
  float64_t v658;
  uint64_t *v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  unsigned int **v663;
  uint64_t v664;
  uint64_t v665;
  CA::Shape **v666;
  CA::Shape *v667;
  unint64_t v668;
  CA::Shape *v669;
  unsigned int *v670;
  unsigned int *v671;
  unsigned int *v672;
  unsigned int v673;
  unsigned int v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  _QWORD *v678;
  unsigned int *v679;
  unsigned int v680;
  unsigned int *v681;
  unsigned int v682;
  unsigned int v683;
  uint64_t v684;
  double v685;
  BOOL v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  unint64_t v690;
  unint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  CA::Render::LayerNode *v696;
  unsigned int *v697;
  unsigned int v698;
  unsigned int v699;
  unsigned int *v700;
  unsigned int v701;
  unsigned int *v702;
  unsigned int *v703;
  unsigned int v704;
  unsigned int v705;
  unsigned int *v706;
  unsigned int v707;
  unint64_t v708;
  unint64_t v709;
  unsigned int *v710;
  unsigned int v711;
  unsigned int v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v716;
  double v717;
  uint64_t v718;
  uint64_t *v719;
  uint64_t v720;
  uint64_t v721;
  unsigned int v722;
  unsigned int *v723;
  pid_t v725;
  uint64_t v726;
  unsigned int *v727;
  unsigned int v728;
  uint64_t v729;
  unsigned int *v730;
  unsigned int v731;
  BOOL v732;
  int8x16_t v733;
  int8x16_t v734;
  unsigned int v735;
  int8x8_t v736;
  uint64x2_t v737;
  int8x16_t v738;
  uint64_t v739;
  unsigned int *v740;
  pid_t v742;
  double v743;
  uint64_t v744;
  unsigned int *v745;
  unsigned int v746;
  unsigned int v747;
  unsigned int *v748;
  unsigned int v749;
  unsigned int v750;
  unsigned int *v751;
  unsigned int v752;
  unsigned int v753;
  uint64_t v754;
  CA::Render::Texture *v755;
  unsigned int *v756;
  unsigned int *v757;
  unsigned int v758;
  unsigned int v759;
  int v760;
  CA::Shape *v761;
  unsigned int *v762;
  unsigned int v763;
  int v764;
  __IOSurface *v765;
  char *v766;
  uint64_t v767;
  uint64_t v768;
  unsigned int v769;
  unsigned int v770;
  uint64_t v771;
  unsigned int *v772;
  unsigned int v773;
  unsigned int *v774;
  unsigned int v775;
  CA::Render::Texture *v776;
  char v777;
  int v778;
  int v779;
  int v780;
  int v781;
  BOOL v782;
  BOOL v783;
  int v785;
  int CacheMode;
  int v787;
  CA::Render::Texture *v788;
  __int32 v789;
  __int32 v790;
  CA::Render::Texture *v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  int v795;
  int v796;
  unsigned int *v797;
  unsigned int v798;
  unsigned int v799;
  __int32 v800;
  int v801;
  unint64_t *v802;
  unint64_t v803;
  unint64_t v804;
  unint64_t v805;
  unsigned int v806;
  unsigned int v807;
  unsigned __int16 v808;
  unsigned int v809;
  unsigned int v810;
  int v811;
  double v812;
  double v813;
  char v814;
  unint64_t v815;
  int v816;
  _QWORD *v817;
  _QWORD *v818;
  double v819;
  unsigned int *v820;
  unsigned int *v821;
  unsigned int v822;
  unsigned int v823;
  _QWORD *v824;
  malloc_zone_t *malloc_zone;
  unint64_t v826;
  uint64_t v827;
  BOOL v828;
  unsigned int *v829;
  unsigned int *v830;
  unsigned int v831;
  unsigned int v832;
  int v833;
  uint64_t v834;
  int v835;
  int v836;
  unint64_t *v837;
  unint64_t v838;
  unint64_t v839;
  unint64_t v840;
  uint64_t v841;
  unint64_t *v842;
  unint64_t v843;
  uint64_t v844;
  unint64_t v845;
  unint64_t v846;
  uint64_t v847;
  unint64_t *v848;
  unint64_t v849;
  uint64_t v850;
  BOOL v851;
  unint64_t v853;
  unint64_t v854;
  unsigned int v855;
  unint64_t v856;
  unsigned int v857;
  BOOL v858;
  int v859;
  uint64_t v860;
  uint64_t v861;
  _DWORD *v862;
  unsigned int v863;
  unsigned int v864;
  uint64_t v865;
  uint64_t *v866;
  float v867;
  uint64_t v868;
  double v869;
  BOOL v870;
  BOOL v871;
  BOOL v872;
  double v873;
  double v874;
  double v876;
  double v877;
  __int128 *v878;
  unint64_t v879;
  unint64_t v880;
  unint64_t phase;
  unint64_t v882;
  unint64_t v883;
  double v884;
  void *v886;
  BOOL v887;
  double v888;
  double v889;
  double v890;
  uint64_t v891;
  double v892;
  int *v893;
  double v894;
  double v895;
  double v896;
  uint64_t v897;
  uint64_t v898;
  char v899;
  int8x16_t *v900;
  uint64_t v901;
  unsigned int *v904;
  unsigned int v905;
  unsigned int v906;
  unsigned int v907;
  unsigned int v908;
  unsigned int v909;
  NSObject *v910;
  _BOOL4 v911;
  CA::Render::FlattenManager *v912;
  float64_t *v913;
  double v914;
  double v915;
  double v916;
  uint64_t v917;
  double v918;
  double v919;
  CA::Render::LayerNode *v920;
  uint64_t v921;
  const double *v922;
  uint64_t v923;
  float64x2_t *v924;
  CA::Mat4Impl *v925;
  uint64_t v926;
  const double *v927;
  unsigned int v928;
  __int128 v929;
  __int128 v930;
  __int128 v931;
  __int128 v932;
  __int128 v933;
  __int128 v934;
  uint64_t v935;
  const double *v936;
  uint64_t v937;
  float64x2_t v938;
  int64x2_t v939;
  float64x2_t v940;
  float64x2_t v941;
  double *v942;
  const double *v943;
  const CA::Render::Object *v944;
  unsigned int *v945;
  unsigned int v946;
  float64x2_t *v947;
  unsigned int *v948;
  unsigned int v949;
  unsigned int v950;
  unsigned int v951;
  _QWORD v952[2];
  int8x16_t v953;
  int8x16_t v954;
  uint64_t v955;
  uint64_t v956;
  CA::Render::Texture *v957;
  uint64_t v958;
  int8x16_t v959;
  int8x16_t v960;
  void **v961;
  CA::Render::Texture **v962;
  int v963;
  __int128 v964;
  uint64_t v965;
  float64x2_t v966;
  float64x2_t v967;
  uint64_t v968;
  unint64_t v969;
  os_unfair_lock_t v970[3];
  double v971;
  int v972;
  uint64_t v973;
  uint64_t v974;
  _QWORD *v975;
  float64x2_t v976;
  int v977;
  CA::Render::LayerNode *v978;
  uint64_t v979;
  unsigned int *v980;
  CA::Render *v981;
  CA::Render::FlattenManager *v982;
  uint64_t v983;
  _OWORD v984[8];
  _QWORD v985[2];
  float64x2_t v986;
  __int128 v987;
  uint64_t v988;
  BOOL v989;
  _QWORD v990[2];
  double v991;
  double v992;
  double v993;
  uint64_t v994;
  uint64_t v995;
  float v996;
  unsigned int v997;
  int8x16_t v998;
  uint64_t *v999;
  unint64_t v1000;
  uint64_t v1001;
  float64x2_t v1002;
  float32x2_t v1003;
  float v1004;
  int v1005;
  __int16 v1006;
  float64x2_t v1007;
  float64x2_t v1008;
  float64x2_t v1009;
  float64x2_t v1010;
  __int128 v1011;
  __int128 v1012;
  __int128 v1013;
  __int128 v1014;
  __int128 v1015;
  uint64_t v1016;
  _OWORD v1017[8];
  _BYTE v1018[184];
  double v1019;
  uint64_t v1020;
  float64x2x2_t v1021;
  float64x2x2_t v1022;

  v5 = a4;
  v6 = a2;
  v7 = a1;
  v1020 = *MEMORY[0x1E0C80C00];
  v8 = *a1;
  if ((*(_DWORD *)(*a1 + 1064) & 0x80) == 0
    || (*(_WORD *)(a4 + 136) & 0x100) != 0
    || (*((_QWORD *)a3 + 5) & 0x10CLL) != 4)
  {
    v980 = (unsigned int *)(v8 + 1064);
    ++*(_DWORD *)(v8 + 756);
    v18 = *((_QWORD *)a2 + 11);
    if (v18)
    {
      v19 = *((_QWORD *)a2 + 3) | *(_QWORD *)(v18 + 24) & 0xC000000;
      *((_QWORD *)a2 + 3) = v19;
      if ((*(_BYTE *)(v18 + 27) & 0x20) != 0)
        *((_QWORD *)a2 + 3) = v19 | 0x4000000;
    }
    v20 = *v980;
    v982 = a3;
    if ((v20 & 4) != 0)
    {
      v21 = 0;
    }
    else
    {
      v21 = (uint64_t *)*((_QWORD *)a3 + 18);
      if (v21)
      {
        v22 = v21[12];
LABEL_17:
        v23 = v22 | a5;
        v24 = (uint64_t)CA::Render::FlattenManager::layer_is_flattened(v982, a2);
        v28 = 0;
        v29 = *((_QWORD *)v982 + 5);
        v972 = v24;
        if ((v29 & 0x80000) != 0 && (v24 & 1) == 0)
          v28 = (*(_DWORD *)(*v7 + 1064) & 4) == 0;
        v30 = *((_QWORD *)v6 + 3);
        if ((v30 & 0x4000000) != 0)
          v31 = 0;
        else
          v31 = (CA::Render *)v21;
        if (*((CA::Render::FlattenManager **)v6 + 4) == v982)
          v32 = v23;
        else
          v32 = v23 | 4;
        v33 = v982;
        v977 = *((_DWORD *)v982 + 3) & 0x900;
        if (!v977
          && (v32 & 0x8007FBC) == 0
          && ((v32 & 0x60000000000) == 0 || (*(_WORD *)(v5 + 136) & 0x800) == 0)
          && (!v31 || *((CA::Render::FlattenManager **)v31 + 2) == v982))
        {
          v55 = v32;
LABEL_1233:
          if ((v55 & 1) != 0)
          {
            v55 &= ~1uLL;
            *(_WORD *)(v5 + 136) |= 0x400u;
            if (v31)
            {
              if ((*(_BYTE *)(v5 + 64) & 1) == 0)
                CA::Render::Context::invalidate((CA::Render::Context *)v7[2], (int32x2_t *)v31 + 14, (const CA::Bounds *)v26);
            }
          }
          if ((v55 & 0x10000) != 0)
            *(_DWORD *)(v8 + 268) |= 0x100u;
          if (v31)
            *((_QWORD *)v31 + 12) = v55;
          if (!v977 && (v55 & 4) == 0)
            v55 |= (*((_QWORD *)v6 + 3) >> 3) & 4;
          v713 = v55 | 0x2000;
          if ((v55 & 0x8007F80) == 0)
            v713 = v55;
          if ((v713 & 0x300) != 0)
            v713 |= 0x4000uLL;
          if ((v713 & 6) != 0)
            v713 |= 0x20uLL;
          if ((v713 & 0x28000) != 0)
            v714 = (2 * v713) & 0x40000000000 | v713 | 0x20000;
          else
            v714 = (2 * v713) & 0x40000000000 | v713;
          *(_QWORD *)(v5 + 72) |= v714 & 0x140004066020;
          if ((v714 & 0x12) != 0)
            *(_QWORD *)(v5 + 64) |= 0x10uLL;
          if (v31)
          {
            if ((v714 & 0x3C) != 0 && *(_DWORD *)(v5 + 132) == 0)
            {
              v716 = *((_QWORD *)v31 + 7);
              if (v716)
              {
                v717 = *(double *)(v5 + 16);
                v718 = (*(unsigned __int16 *)(v5 + 136) >> 10) & 1;
                do
                {
                  (**(void (***)(uint64_t, uint64_t, CA::Render *, uint64_t, double))v716)(v716, v8, v31, v718, v717);
                  v716 = *(_QWORD *)(v716 + 32);
                }
                while (v716);
              }
            }
          }
          return;
        }
        v995 = 0;
        v993 = INFINITY;
        v994 = 0;
        v34 = *(CA::Render::LayerNode **)(v5 + 8);
        if (!v977)
          v34 = v6;
        v990[0] = v6;
        v990[1] = v34;
        v997 = *(_DWORD *)(v5 + 60) + 1;
        v998 = (int8x16_t)(unint64_t)v32;
        v1002 = *(float64x2_t *)(v5 + 104);
        v35 = *(float32x2_t *)(v5 + 120);
        v1000 = 0;
        v1003 = v35;
        v1004 = *(float *)(v5 + 128);
        v36 = *(unsigned __int16 *)(v5 + 136);
        if ((v29 & 0xC) == 8)
          v37 = 1;
        else
          v37 = (v36 >> 8) & 1;
        if (v37)
          v38 = 256;
        else
          v38 = 0;
        v969 = v32;
        if (((v32 & 0x1000000000000000) != 0) | ((unsigned __int16)(v36 & 0x800) >> 11))
          v39 = 2048;
        else
          v39 = 0;
        v1006 = v38 & 0xFFC0 | v36 & 0x200 | v39 & 0xFFC0 | v36 & 0x3F;
        if (v31)
          *((_QWORD *)v31 + 12) &= ~0x1000000000000000uLL;
        *((_QWORD *)v6 + 3) = v30 & 0xFFFFFFFFFD7FFFFFLL;
        if ((v30 & 0x40) == 0)
          v998.i64[0] = v969 & 0xFFFFFFFFFFF87FFFLL;
        v40 = *((_QWORD *)v33 + 16);
        if (v40)
          v41 = *(_QWORD *)(v40 + 8);
        else
          v41 = 0;
        v968 = *((_QWORD *)v33 + 5);
        if ((v968 & 0x100000000000) != 0)
        {
          v965 = 0;
          v964 = 0u;
          v963 = 0;
          if (v41)
          {
LABEL_52:
            *(_DWORD *)v1018 = 0;
            LODWORD(v1007.f64[0]) = 0;
            v991 = *(double *)(v5 + 16);
            if (v991 < 0.0
              || (v24 = CA::Render::Timing::map_time((CA::Render::Timing *)v41, &v991, (unsigned int *)v1018),
                  (v24 & 1) == 0))
            {
              v991 = -1.0;
            }
            v992 = *(double *)(v5 + 24);
            if (v992 < 0.0
              || (v24 = CA::Render::Timing::map_time((CA::Render::Timing *)v41, &v992, (unsigned int *)&v1007),
                  (v24 & 1) == 0))
            {
              v992 = -1.0;
            }
            v42 = *(float *)(v41 + 16) * *(float *)(v5 + 56);
            v996 = v42;
            if ((v1018[0] & 1) != 0 && (*(_BYTE *)(v41 + 13) & 1) != 0)
              v996 = -v42;
            MEMORY[0x1E0C80A78](v24);
            v44 = *(_QWORD *)(v5 + 80);
            v952[0] = v41;
            v952[1] = v44;
            v999 = v952;
            v45 = v991;
            if (v43 && v43 != LODWORD(v1007.f64[0]) && v991 >= 0.0)
            {
              v27 = (__n128)vorrq_s8(v998, (int8x16_t)xmmword_18474E340);
              v998 = (int8x16_t)v27;
            }
            v46 = v992;
LABEL_68:
            v974 = v41;
            if (v45 >= 0.0 || v46 < 0.0)
            {
              v47 = v998.i64[0];
              if (v45 < 0.0 || v46 >= 0.0)
              {
LABEL_75:
                if ((v47 & 0x200000000000) != 0
                  && (!CA::Render::Updater::layer_may_be_hidden_culled(v33, v25)
                   || (v47 & 0x100000000000) != 0
                   || byte_1ECDC6AA0))
                {
                  v998.i64[1] |= 0x3CuLL;
                  v998.i64[0] = v47 | 0xA;
                }
                v981 = v31;
                if (v28)
                  v998.i64[1] |= 0x100000000000uLL;
                v48 = *((_QWORD *)v33 + 12);
                v978 = v6;
                v979 = v5;
                v983 = v8;
                if (!v48)
                  goto LABEL_97;
                if (*(_BYTE *)(v48 + 12) == 25)
                  v998.i64[1] |= 0x100000000080uLL;
                if ((*(_BYTE *)(v8 + 274) & 1) != 0
                  && (v49 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 80))(v48)) != 0
                  && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 232))(v49) & 1) != 0
                  || (v50 = (_BYTE *)*((_QWORD *)v33 + 12), v50[12] == 25)
                  && CA::Render::ImageQueue::is_protected(*((CA::Render::ImageQueue **)v33 + 12))
                  && *(_BYTE *)(v8 + 405)
                  && !*(_QWORD *)(v8 + 280)
                  || ((v51 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v50 + 80))(v50)) == 0
                    ? (v54 = 0)
                    : (v52 = v51,
                       v53 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v51 + 232))(v51),
                       v54 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v52 + 240))(v52) | v53),
                      (v54 & ~*(_QWORD *)(v8 + 280)) != 0 || *(_DWORD *)(v8 + 316) && (*((_BYTE *)v33 + 13) & 4) != 0))
                {
                  v56 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v33 + 12) + 80))(*((_QWORD *)v33 + 12));
                  if (v56)
                  {
                    v57 = v56;
                    v58 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v56 + 232))(v56);
                    v59 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v57 + 240))(v57) | v58;
                  }
                  else
                  {
                    v59 = 0;
                  }
                  *(_QWORD *)(v8 + 296) |= v59;
                  *((_QWORD *)v6 + 3) |= 0x2000000uLL;
                  goto LABEL_97;
                }
                v152 = *(unsigned __int8 *)(v48 + 12);
                if (v152 == 24)
                {
                  v245 = *(double *)(v8 + 72);
                  if (v245 >= *(double *)(v48 + 184))
                  {
                    if ((v969 & 0x80) != 0)
                      v998.i64[0] |= 3uLL;
                  }
                  else
                  {
                    v27 = (__n128)vorrq_s8(v998, (int8x16_t)xmmword_18474E350);
                    v998 = (int8x16_t)v27;
                    *(_QWORD *)(v8 + 96) |= 0x40000000uLL;
                    v27.n128_u64[0] = *(_QWORD *)(v8 + 80);
                    if (v27.n128_f64[0] >= v245)
                    {
                      if (v245 == 0.0 || v27.n128_f64[0] <= v245)
                        v246 = *(_QWORD *)(v8 + 88) | 0x40000000;
                      else
                        v246 = 0x40000000;
                      *(_QWORD *)(v8 + 88) = v246;
                      *(double *)(v8 + 80) = v245;
                    }
                  }
                  goto LABEL_97;
                }
                if (v152 != 25)
                  goto LABEL_97;
                v153 = v7[3];
                if ((*((_BYTE *)v33 + 13) & 4) != 0
                  && (v154 = (CA::Render::Context *)*(unsigned int *)(v48 + 192), (_DWORD)v154)
                  && (v155 = CA::Render::Context::context_by_id(v154), (v153 = v155) != 0))
                {
                  pthread_mutex_lock((pthread_mutex_t *)(v155 + 72));
                  LODWORD(v971) = 0;
                  v973 = v153;
                }
                else
                {
                  v973 = 0;
                  LODWORD(v971) = 1;
                }
                v986.f64[0] = 0.0;
                v247 = *((_QWORD *)v33 + 16);
                if (v247)
                  v248 = *(float *)(v247 + 256);
                else
                  v248 = 1.0;
                *(float *)(v48 + 144) = v248;
                v967.f64[0] = (float64_t)v7[2];
                v267 = v991;
                v268 = v996;
                v269 = v999;
                memset(v1018, 0, 128);
                v989 = 0;
                LODWORD(v985[0]) = 0;
                v970[0] = (os_unfair_lock_t)(v48 + 56);
                os_unfair_lock_lock((os_unfair_lock_t)(v48 + 56));
                v270 = *(_QWORD *)(*(_QWORD *)(v48 + 16) + 24);
                v271 = *(_DWORD *)(v48 + 184);
                v272 = *(_DWORD *)(v8 + 248);
                v273 = 0.0;
                *(_QWORD *)&v976.f64[0] = v270;
                if (v271 == v272 || (*v980 & 4) != 0 && *(_QWORD *)(v48 + 24))
                {
LABEL_1434:
                  v817 = (_QWORD *)(v48 + 216);
                  v818 = *(_QWORD **)(v48 + 216);
                  if (v818)
                  {
                    v819 = *(double *)(v8 + 72);
                    do
                    {
                      while (1)
                      {
                        v820 = (unsigned int *)*v818;
                        if (v819 > *(float *)(*v818 + 320))
                          break;
                        v817 = v818 + 1;
                        v818 = (_QWORD *)v818[1];
                        if (!v818)
                          goto LABEL_1444;
                      }
                      v821 = v820 + 2;
                      do
                      {
                        v822 = __ldaxr(v821);
                        v823 = v822 - 1;
                      }
                      while (__stlxr(v823, v821));
                      if (!v823)
                        (*(void (**)(unsigned int *))(*(_QWORD *)v820 + 16))(v820);
                      v824 = (_QWORD *)v818[1];
                      malloc_zone = (malloc_zone_t *)get_malloc_zone();
                      malloc_zone_free(malloc_zone, v818);
                      *v817 = v824;
                      v818 = v824;
                      v33 = v982;
                    }
                    while (v818);
                  }
LABEL_1444:
                  v826 = atomic_load((unint64_t *)(*(_QWORD *)&v976.f64[0] + 8));
                  v827 = v826 & 0x4000000000008000;
                  if (LODWORD(v985[0]))
                    v828 = 1;
                  else
                    v828 = v827 == 0x4000000000008000;
                  if (v828)
                    CAShmemImageQueueCollectable(*(uint64_t *)&v976.f64[0], *(unsigned int *)(v48 + 188), v985[0], 0);
                  os_unfair_lock_unlock(v970[0]);
                  v829 = (unsigned int *)v973;
                  if ((LOBYTE(v971) & 1) == 0)
                  {
                    pthread_mutex_unlock((pthread_mutex_t *)(v973 + 72));
                    v830 = v829 + 2;
                    do
                    {
                      v831 = __ldaxr(v830);
                      v832 = v831 - 1;
                    }
                    while (__stlxr(v832, v830));
                    if (!v832)
                      (*(void (**)(unsigned int *))(*(_QWORD *)v829 + 16))(v829);
                  }
                  if (v981)
                  {
                    if (v998.i8[1] < 0)
                    {
                      v834 = *(_QWORD *)(*(_QWORD *)(v48 + 16) + 24);
                      v833 = *(_DWORD *)(v834 + 96);
                      v835 = *((_DWORD *)v981 + 31) * *((_DWORD *)v981 + 30);
                      if (v833 != v835)
                      {
                        v998.i64[1] |= 0x40000uLL;
                        v833 = v835;
                      }
                    }
                    else
                    {
                      v833 = *((_DWORD *)v981 + 31) * *((_DWORD *)v981 + 30);
                      v834 = *(_QWORD *)(*(_QWORD *)(v48 + 16) + 24);
                    }
                    *(_DWORD *)(v834 + 96) = v833;
                    v836 = *(_DWORD *)(v8 + 272);
                    v837 = (unint64_t *)(v834 + 8);
                    v838 = atomic_load(v837);
                    if ((v836 & 0x8000) == 0 || (v838 & 0x8000000000000000) != 0)
                    {
                      if ((v836 & 0x8000) == 0 && (v838 & 0x8000000000000000) != 0)
                      {
                        do
                          v840 = __ldaxr(v837);
                        while (__stlxr(v840 & 0x7FFFFFFFFFFFFFFFLL, v837));
                      }
                    }
                    else
                    {
                      do
                        v839 = __ldaxr(v837);
                      while (__stlxr(v839 | 0x8000000000000000, v837));
                    }
                    v841 = *((_QWORD *)v981 + 12);
                    v842 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v48 + 16) + 24) + 8);
                    v843 = atomic_load(v842);
                    v844 = v843 & 0x100000000000000;
                    if ((v841 & 0x80000000000) == 0 || v844)
                    {
                      if ((v841 & 0x80000000000) == 0 && v844)
                      {
                        do
                          v846 = __ldaxr(v842);
                        while (__stlxr(v846 & 0xFEFFFFFFFFFFFFFFLL, v842));
                      }
                    }
                    else
                    {
                      do
                        v845 = __ldaxr(v842);
                      while (__stlxr(v845 | 0x100000000000000, v842));
                    }
                    v847 = *v980 & 0x80080000;
                    v848 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v48 + 16) + 24) + 8);
                    v849 = atomic_load(v848);
                    v850 = v849 & 0x8000000000000;
                    if (v847)
                      v851 = v850 == 0;
                    else
                      v851 = 0;
                    if (v851)
                    {
                      do
                        v854 = __ldaxr(v848);
                      while (__stlxr(v854 | 0x8000000000000, v848));
                    }
                    else if ((*v980 & 0x80080000) == 0 && v850 != 0)
                    {
                      do
                        v853 = __ldaxr(v848);
                      while (__stlxr(v853 & 0xFFF7FFFFFFFFFFFFLL, v848));
                    }
                    v855 = *(_DWORD *)(v8 + 268);
                    v856 = atomic_load((unint64_t *)(*(_QWORD *)(*(_QWORD *)(v48 + 16) + 24) + 8));
                    v857 = v855 >> 30;
                    if ((v856 & 0x400000000000000) != 0
                      && (*(_DWORD *)(v48 + 264) ? (v858 = v857 == 0) : (v858 = 0), v858))
                    {
                      v857 = 0;
                      v998.i64[1] |= 0x40000uLL;
                    }
                    else if (v857)
                    {
                      v857 = *(_DWORD *)(*v7 + 248);
                    }
                    *(_DWORD *)(v48 + 264) = v857;
                  }
                  v859 = *(_DWORD *)(v48 + 12);
                  if ((v859 & 0x40400) != 0)
                  {
                    v860 = v998.i64[0] | 3;
                    v998.i64[1] = (8 * v998.i32[0]) & 0x40000 | v998.i64[1] & 0xFFFFFFFFFFFD7BFBLL | 0x404;
LABEL_1496:
                    v998.i64[0] = v860;
                    goto LABEL_1512;
                  }
                  if ((v859 & 0x200) == 0)
                    goto LABEL_1512;
                  v861 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 80))(v48);
                  if (!v861)
                    goto LABEL_1505;
                  v862 = *(_DWORD **)(v861 + 40);
                  if (!v862)
                    goto LABEL_1505;
                  if ((v862 & 1) != 0 || v862[1] != 12)
                    goto LABEL_1681;
                  v863 = v862[8] - v862[7];
                  v864 = v862[9] - v862[5];
                  if (v863 > v864)
                    v864 = v863;
                  if (v864 <= 0x3FFFFFFE)
                  {
LABEL_1681:
                    if (*((_QWORD *)v33 + 13))
                      v865 = v998.i64[1] | 0x400;
                    else
                      v865 = v998.i64[1] | 0x8000000;
                    v998.i64[1] = v865;
                    if ((v998.i8[1] & 0x80) == 0)
                    {
LABEL_1512:
                      if ((v859 & 0x2100) == 0 || (*((_BYTE *)v6 + 27) & 4) != 0)
                      {
                        if (v996 == 0.0)
                        {
                          v869 = *(double *)(*(_QWORD *)(*(_QWORD *)(v48 + 16) + 24) + 128);
                          v870 = ((*(_QWORD *)&v869 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE
                              && (*(_QWORD *)&v869 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000001;
                          v871 = !v870 || *(_QWORD *)&v869 == 0xFFF0000000000000;
                          v872 = !v871 && (*(_QWORD *)&v869 & 0x7FFFFFFFFFFFFFFFuLL) - 1 > 0xFFFFFFFFFFFFELL;
                          if (!v872 && v869 > *(double *)(v8 + 72) && v869 < *(double *)(v8 + 80))
                          {
                            if (byte_1ECDC6B04)
                            {
                              if (x_log_hook_p())
                              {
                                v952[0] = "edr_deadline";
                                x_log_();
                                v6 = v978;
                                v5 = v979;
                                v33 = v982;
                                v8 = v983;
                              }
                              else
                              {
                                v910 = x_log_category_CADebug;
                                v911 = os_log_type_enabled((os_log_t)x_log_category_CADebug, OS_LOG_TYPE_INFO);
                                v6 = v978;
                                v5 = v979;
                                v33 = v982;
                                v8 = v983;
                                if (v911)
                                {
                                  *(_DWORD *)v1018 = 136315138;
                                  *(_QWORD *)&v1018[4] = "edr_deadline";
                                  _os_log_impl(&dword_184457000, v910, OS_LOG_TYPE_INFO, "kUpdateReasonDisplayBrightness %s", v1018, 0xCu);
                                }
                              }
                            }
                            v873 = *(double *)(*(_QWORD *)(*(_QWORD *)(v48 + 16) + 24) + 128);
                            *(_QWORD *)(v8 + 96) |= 8uLL;
                            v874 = *(double *)(v8 + 80);
                            if (v874 >= v873)
                            {
                              if (v873 == 0.0 || v874 <= v873)
                                v901 = *(_QWORD *)(v8 + 88) | 8;
                              else
                                v901 = 8;
                              goto LABEL_1569;
                            }
                          }
                        }
                      }
                      else
                      {
                        if ((v859 & 0x4000) == 0 || byte_1ECDC6AA5)
                        {
                          *(_QWORD *)(v8 + 96) |= 0x80000000uLL;
                          v873 = *(double *)(v8 + 72);
                          v876 = *(double *)(v8 + 80);
                          if (v876 < v873)
                            goto LABEL_1570;
                          if (v873 != 0.0 && v876 > v873)
                            goto LABEL_1544;
                          goto LABEL_1568;
                        }
                        v866 = v999;
                        if (v999)
                        {
                          v867 = 1.0;
                          do
                          {
                            v868 = *v866;
                            CA::Render::Timing::inverse_map_time(*v866, v986.f64, INFINITY);
                            v867 = *(float *)(v868 + 16) * v867;
                            v866 = (uint64_t *)v866[1];
                          }
                          while (v866);
                        }
                        else
                        {
                          v867 = 1.0;
                        }
                        v877 = v986.f64[0];
                        if ((v859 & 0x8000) != 0)
                        {
                          v878 = *(__int128 **)(v8 + 168);
                          if (v878)
                          {
                            if ((*(_QWORD *)&v986.f64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
                              && v273 > 0.0
                              && v273 < 0.1
                              && fabsf(v867 + -1.0) < 0.01)
                            {
                              v879 = CAHostTimeWithTime(v986.f64[0]);
                              v880 = CAHostTimeWithTime(v273);
                              v987 = *v878;
                              v988 = *((_QWORD *)v878 + 2);
                              *(_QWORD *)v1018 = v880;
                              phase = get_phase((unint64_t *)&v987, v879, (unint64_t *)v1018);
                              v882 = *(_QWORD *)v1018 - phase;
                              if (!phase)
                                v882 = 0;
                              v883 = v882 / *((_QWORD *)v878 + 2);
                              if (*(_QWORD *)(v8 + 176) < v883)
                                v883 = *(_QWORD *)(v8 + 176);
                              *(_QWORD *)(v8 + 176) = v883;
                            }
                          }
                        }
                        v873 = *(double *)(v8 + 72);
                        v884 = *(double *)(v8 + 80);
                        v5 = v979;
                        v33 = v982;
                        if (v884 >= v877)
                        {
                          if (v873 <= v877)
                            v873 = v877;
                        }
                        else if (v873 <= v884)
                        {
                          v873 = *(double *)(v8 + 80);
                        }
                        v986.f64[0] = v873;
                        *(_QWORD *)(v8 + 96) |= 0x80000000uLL;
                        if (v884 >= v873)
                        {
                          if (v873 != 0.0 && v884 > v873)
                          {
LABEL_1544:
                            v901 = 0x80000000;
LABEL_1569:
                            *(_QWORD *)(v8 + 88) = v901;
                            *(double *)(v8 + 80) = v873;
                            goto LABEL_1570;
                          }
LABEL_1568:
                          v901 = *(_QWORD *)(v8 + 88) | 0x80000000;
                          goto LABEL_1569;
                        }
                      }
LABEL_1570:
                      v886 = *(void **)(v8 + 184);
                      if (!v886)
                        goto LABEL_1585;
                      if (CADeviceSupportsOddQuantaFrameRates())
                      {
                        v887 = CADevicePrefers60HzAPT();
                        *(float *)&v888 = v996;
                        if (!v887)
                        {
                          v889 = fabsf(v996);
                          HIDWORD(v890) = 1065646817;
                          if (v889 > 0.01)
                          {
                            if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v48 + 16) + 24) + 32))
                              goto LABEL_1584;
                          }
                        }
                      }
                      else
                      {
                        *(float *)&v888 = v996;
                      }
                      HIDWORD(v888) = 1065646817;
                      if (fabs(*(float *)&v888 + -1.0) >= 0.01 || v273 == 0.0)
                        goto LABEL_1585;
                      v889 = 0.0125 - v273;
                      HIDWORD(v890) = 1059086925;
                      if (0.0125 - v273 < 0.000125)
                      {
                        v891 = 0;
                        v892 = 1.0;
                        while (1)
                        {
                          v893 = (int *)((char *)&CA::Render::Updater::prepare_layer0(CA::Render::Updater::GlobalState &,CA::Render::LayerNode *,CA::Render::Layer const*,CA::Render::Updater::LocalState0 &,unsigned long long)::common_rates
                                       + v891);
                          v894 = 1.0
                               / (double)*(int *)((char *)&CA::Render::Updater::prepare_layer0(CA::Render::Updater::GlobalState &,CA::Render::LayerNode *,CA::Render::Layer const*,CA::Render::Updater::LocalState0 &,unsigned long long)::common_rates
                                                + v891);
                          v895 = vabdd_f64(v273, v894);
                          v896 = v894 * 0.01;
                          if (v895 < v896)
                            break;
                          v891 += 12;
                          if (v891 == 72)
                            goto LABEL_1585;
                        }
                        v899 = *((_BYTE *)v893 + 8);
                        *(float *)&v888 = (float)v893[1];
                        *(float *)&v892 = *(float *)&v888;
                        *(float *)&v896 = *(float *)&v888;
                        objc_msgSend(v886, "addFrameRateRange:", v888, v892, v896);
                        if ((v899 & 1) != 0)
                          objc_msgSend(v886, "addCompatQuantaIntent");
LABEL_1585:
                        if (CA::Render::ImageQueue::is_protected((CA::Render::ImageQueue *)v48))
                        {
                          v897 = *(_QWORD *)(v48 + 64);
                          if (v897 || (v897 = *(_QWORD *)(v48 + 80)) != 0)
                          {
LABEL_1588:
                            v898 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v897 + 240))(v897);
                            goto LABEL_1595;
                          }
                          if (*(_QWORD *)(v48 + 24))
                          {
                            v897 = *(_QWORD *)(v48 + 80);
                            if (!v897)
                              v897 = *(_QWORD *)(v48 + 24);
                            goto LABEL_1588;
                          }
                        }
                        v898 = 0;
LABEL_1595:
                        if (HIBYTE(dword_1ECDC6B10)
                          && CA::Render::ImageQueue::is_protected((CA::Render::ImageQueue *)v48))
                        {
                          *(_QWORD *)(v8 + 296) |= 1uLL;
                        }
                        if ((*(_BYTE *)(v8 + 274) & 1) != 0
                          && CA::Render::ImageQueue::is_protected((CA::Render::ImageQueue *)v48))
                        {
                          *((_QWORD *)v6 + 3) |= 0x2000000uLL;
                          v998.i64[1] |= (8 * v998.i32[0]) & 0x40000 | 0x400;
                          v998.i64[0] |= 1uLL;
                          v900 = (int8x16_t *)(v8 + 296);
LABEL_1601:
                          v900->i64[0] |= v898;
                          goto LABEL_97;
                        }
                        if ((v30 & 0x2000000) != 0)
                        {
                          v900 = &v998;
                          v998.i64[1] |= 0x400uLL;
                          v898 = 1;
                          goto LABEL_1601;
                        }
LABEL_97:
                        v60 = (const CA::Render::Object *)*((_QWORD *)v6 + 15);
                        if (v60)
                        {
                          CA::Render::Update::release_object((uint64_t *)v8, v60);
                          *((_QWORD *)v6 + 15) = 0;
                        }
                        v61 = *((_QWORD *)v33 + 16);
                        v62 = v981;
                        if (v61)
                        {
                          v63 = *(_QWORD *)(v61 + 136);
                          if (v63)
                          {
                            if ((*v980 & 4) == 0)
                            {
                              v64 = *(unsigned int *)(v63 + 16);
                              if ((_DWORD)v64)
                              {
                                v65 = (uint64_t *)(v63 + 24);
                                v66 = v63 + 24 + 8 * v64;
                                v975 = v7;
                                v958 = v66;
                                do
                                {
                                  v67 = *v65;
                                  v68 = *(_QWORD *)(*v65 + 16);
                                  v69 = *(_QWORD *)(v68 + 24);
                                  if ((*(_DWORD *)v69 & 0x40000000) == 0)
                                  {
                                    v70 = *(double *)(v5 + 16);
                                    v71 = *(_QWORD *)(v5 + 48) | 0x20;
                                    _ZF = *(double *)(v5 + 32) == v70 || v70 == 0.0;
                                    v73 = *(_QWORD *)(v5 + 40) | 0x20;
                                    if (!_ZF)
                                      v73 = 32;
                                    *(_QWORD *)(v5 + 40) = v73;
                                    *(_QWORD *)(v5 + 48) = v71;
                                    *(double *)(v5 + 32) = v70;
                                  }
                                  v998.i64[1] |= 0x800uLL;
                                  v74 = *(_QWORD *)(v68 + 16);
                                  v75 = v74 - 40;
                                  if (v74 >= 0x28)
                                  {
                                    v76 = *(_DWORD *)(v69 + 8);
                                    LODWORD(v976.f64[0]) = *((_DWORD *)v7 + 2);
                                    if (v76 != LODWORD(v976.f64[0]) && !HIWORD(*(_DWORD *)(v69 + 12)))
                                    {
                                      v970[0] = (os_unfair_lock_t)*(unsigned int *)(v69 + 12);
                                      v960.i64[0] = v74;
                                      v959.i64[0] = v67;
                                      os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::PresentationModifierShmem::_fetch_lock);
                                      do
                                        v77 = __ldaxr((unsigned int *)v69);
                                      while (__stlxr(v77 | 0x80000000, (unsigned int *)v69));
                                      v78 = *(_DWORD *)v69 & 1;
                                      v79 = *(double *)v970;
                                      if (LODWORD(v970[0]))
                                      {
                                        v80 = 0;
                                        v81 = v75 >> 3;
                                        v82 = (CA::Render::Texture **)(v69 + v960.i64[0]);
                                        v83 = (void **)(v69 + 40);
                                        v973 = v69 + 64;
                                        *(_QWORD *)&v971 = v69 + 48;
                                        v78 = v78;
                                        *(_QWORD *)&v967.f64[0] = v75;
                                        *(_QWORD *)&v966.f64[0] = v75 >> 3;
                                        v961 = (void **)(v69 + 40);
                                        v962 = (CA::Render::Texture **)(v69 + v960.i64[0]);
                                        do
                                        {
                                          if (v80 == v81)
                                            break;
                                          v84 = &v82[-v80];
                                          v85 = *((unsigned int *)v84 - 2);
                                          if (!(_DWORD)v85)
                                            break;
                                          v86 = (16 * v85) | 8;
                                          v87 = *((unsigned int *)v84 - 1);
                                          if (v75 < v87 || 3 * v86 + v87 > v75)
                                          {
                                            v5 = v979;
                                            break;
                                          }
                                          v89 = v86 * v78;
                                          v90 = (unsigned __int16 *)((char *)v83 + v87 + v86 * v78);
                                          v91 = (unsigned __int16 *)((char *)v83 + 2 * v86 + v87);
                                          v92 = *v90;
                                          if (*v91 != v92)
                                            goto LABEL_126;
                                          v93 = v78;
                                          v94 = memcmp(v91 + 4, v90 + 4, 8 * v85);
                                          v83 = v961;
                                          v82 = v962;
                                          v81 = *(_QWORD *)&v966.f64[0];
                                          v78 = v93;
                                          v75 = *(_QWORD *)&v967.f64[0];
                                          v79 = *(double *)v970;
                                          if (v94)
                                          {
LABEL_126:
                                            *v91 = v92;
                                            v95 = 2 * v85;
                                            if ((unint64_t)(2 * v85) <= 1)
                                              v95 = 1;
                                            v96 = (_QWORD *)(v973 + v87 + 32 * v85);
                                            v97 = (uint64_t *)(*(_QWORD *)&v971 + v89 + v87);
                                            do
                                            {
                                              v98 = *v97++;
                                              *v96++ = v98;
                                              --v95;
                                            }
                                            while (v95);
                                            v91[1] = 0;
                                          }
                                          ++v80;
                                          v7 = v975;
                                          v8 = v983;
                                          v5 = v979;
                                          v62 = v981;
                                        }
                                        while (v80 != *(_QWORD *)&v79);
                                        v33 = v982;
                                      }
                                      *(_QWORD *)(v69 + 32) = *(_QWORD *)(v69 + 8 * v78 + 16);
                                      *(_DWORD *)v69 &= ~0x80000000;
                                      *(_DWORD *)(v69 + 8) = LODWORD(v976.f64[0]);
                                      os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::PresentationModifierShmem::_fetch_lock);
                                      v66 = v958;
                                      v67 = v959.i64[0];
                                      v74 = v960.i64[0];
                                    }
                                    v99 = *(unsigned int *)(v67 + 24);
                                    if (v99 < v75 >> 3)
                                    {
                                      v100 = v69 + v74 - 8 * v99;
                                      v101 = *(unsigned int *)(v100 - 8);
                                      if ((_DWORD)v101)
                                      {
                                        v102 = (16 * v101) | 8;
                                        v103 = *(unsigned int *)(v100 - 4);
                                        v104 = v75 < v103 || 3 * v102 + v103 > v75;
                                        if (!v104 && !*(_WORD *)(v69 + v103 + 2 * v102 + 42))
                                          v998.i64[1] |= 0x700uLL;
                                      }
                                    }
                                  }
                                  if ((*(_BYTE *)(v67 + 13) & 4) != 0)
                                    v998.i64[1] |= 0x100000000000uLL;
                                  ++v65;
                                }
                                while (v65 != (uint64_t *)v66);
                              }
                            }
                          }
                        }
                        __asm { FMOV            V0.2D, #1.0 }
                        v986 = _Q0;
                        v108 = *((unsigned __int16 *)v980 + 2);
                        *(_QWORD *)&v109 = *v980 | (unint64_t)(v108 << 32);
                        v110 = (v108 >> 4) & 1;
                        if (byte_1ECDC6ACD)
                          v111 = 1;
                        else
                          v111 = v110;
                        v971 = v109;
                        LODWORD(v973) = v111 | (*(_QWORD *)&v109 >> 21) & 1;
                        if (*((_QWORD *)v33 + 17))
                        {
                          v112 = v991;
                          v6 = v978;
                          if (v991 < 0.0)
                          {
LABEL_206:
                            v144 = (const CA::Render::Object *)*((_QWORD *)v6 + 4);
                            if (v144 != v33)
                            {
                              CA::Render::Update::release_object((uint64_t *)*v7, v144);
                              *((_QWORD *)v6 + 4) = v33;
                              v145 = (unsigned int *)((char *)v33 + 8);
                              do
                                v146 = __ldaxr(v145);
                              while (__stlxr(v146 + 1, v145));
                              if (!v146)
                              {
                                do
                                  v291 = __ldaxr(v145);
                                while (__stlxr(v291 - 1, v145));
                              }
                            }
                            if ((_DWORD)v973)
                              v147 = &v986;
                            else
                              v147 = 0;
                            CA::Render::LayerNode::update_frame_transform((uint64_t)v6, v147->f64);
                            LODWORD(v970[0]) = 0;
                            v151 = v33;
                            goto LABEL_496;
                          }
                        }
                        else
                        {
                          v113 = *((_QWORD *)v33 + 16);
                          v6 = v978;
                          if (!v113)
                            goto LABEL_206;
                          if (!*(_QWORD *)(v113 + 136))
                            goto LABEL_206;
                          v112 = v991;
                          if (v991 < 0.0)
                            goto LABEL_206;
                        }
                        LODWORD(v976.f64[0]) = v111;
                        *(float64x2_t *)v970 = _Q0;
                        if (!v62)
                          goto LABEL_224;
                        v114 = (_QWORD *)((char *)v981 + 48);
                        v115 = (_QWORD *)*((_QWORD *)v981 + 6);
                        if (!v115)
                          goto LABEL_224;
                        v116 = 0;
                        v117 = v996;
                        *(_QWORD *)&_Q0.f64[0] = 136315650;
                        v967 = _Q0;
                        *(_QWORD *)&_Q0.f64[0] = 134220034;
                        v966 = _Q0;
LABEL_159:
                        v118 = v115;
                        do
                        {
                          v119 = (CA::Render *)*v118;
                          v120 = *(double **)(*v118 + 40);
                          if (v120)
                          {
                            v121 = v120[5];
                            v122 = CA::Render::Timing::end_time((CA::Render::Timing *)v120);
                          }
                          else
                          {
                            v121 = 0.0;
                            v122 = INFINITY;
                          }
                          if (v117 >= 0.0)
                            v27.n128_f64[0] = v122;
                          else
                            v27.n128_f64[0] = v121;
                          if ((*(unsigned int (**)(CA::Render *, double, __n128, float))(*(_QWORD *)v119 + 96))(v119, v112, v27, v117))
                          {
                            if (!byte_1ECDC6A67)
                              goto LABEL_170;
                            v975 = v7;
                            x_log_begin();
                            if (x_log_hook_p())
                            {
                              v125 = mach_absolute_time();
                              CATimeWithHostTime(v125);
                              v952[0] = *((unsigned int *)v119 + 21);
                              x_log_();
                            }
                            else
                            {
                              v127 = x_log_category_render;
                              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
                              {
                                v128 = mach_absolute_time();
                                v129 = CATimeWithHostTime(v128);
                                v130 = *((_QWORD *)v981 + 3);
                                if (v130)
                                  LODWORD(v130) = *(_DWORD *)(v130 + 16);
                                v131 = *((_QWORD *)v981 + 2);
                                if (v131)
                                {
                                  v132 = *(_QWORD *)(v131 + 120);
                                  if (v132)
                                    v131 = v132 + 28;
                                  else
                                    v131 = 0;
                                }
                                v133 = *((_DWORD *)v119 + 20);
                                v134 = *((_DWORD *)v119 + 21);
                                *(_DWORD *)v1018 = LODWORD(v966.f64[0]);
                                *(double *)&v1018[4] = v129;
                                *(_WORD *)&v1018[12] = 1024;
                                *(_DWORD *)&v1018[14] = v130;
                                *(_WORD *)&v1018[18] = 2080;
                                *(_QWORD *)&v1018[20] = v131;
                                *(_WORD *)&v1018[28] = 2048;
                                *(_QWORD *)&v1018[30] = v981;
                                *(_WORD *)&v1018[38] = 2048;
                                *(_QWORD *)&v1018[40] = v119;
                                *(_WORD *)&v1018[48] = 2048;
                                *(double *)&v1018[50] = v112;
                                *(_WORD *)&v1018[58] = 2048;
                                *(double *)&v1018[60] = v117;
                                *(_WORD *)&v1018[68] = 1024;
                                *(_DWORD *)&v1018[70] = v133;
                                *(_WORD *)&v1018[74] = 1024;
                                *(_DWORD *)&v1018[76] = v134;
                                _os_log_impl(&dword_184457000, v127, OS_LOG_TYPE_DEFAULT, "%f %x \"%s\" (%p): collecting %p (t %f; speed %g; eval %u; frames %u):\n",
                                  v1018,
                                  0x50u);
                              }
                            }
                            CA::Render::show_object(v119, v126);
                            v961 = (void **)x_stream_pop_(0);
                            v962 = (CA::Render::Texture **)x_stream_get(v961);
                            v135 = 0;
LABEL_185:
                            v136 = 0;
                            v137 = (char *)v962 + v135;
                            v138 = -1;
                            while (1)
                            {
                              if (v137[v136] == 10)
                              {
                                v138 = v136;
                              }
                              else if (!v137[v136])
                              {
                                v139 = v136;
LABEL_191:
                                if (v138 <= -1 || v137[v139] == 0)
                                  v141 = v139;
                                else
                                  v141 = v138 + 1;
                                if (v141 > 0)
                                {
                                  if (x_log_hook_p())
                                  {
                                    v952[0] = v137;
                                    x_log_();
                                  }
                                  else
                                  {
                                    v142 = x_log_category_render;
                                    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
                                    {
                                      *(_DWORD *)v1018 = LODWORD(v967.f64[0]);
                                      v143 = "continued...\n";
                                      if (!v135)
                                        v143 = "";
                                      *(_QWORD *)&v1018[4] = v143;
                                      *(_WORD *)&v1018[12] = 1040;
                                      *(_DWORD *)&v1018[14] = v141;
                                      *(_WORD *)&v1018[18] = 2080;
                                      *(_QWORD *)&v1018[20] = v137;
                                      _os_log_impl(&dword_184457000, v142, OS_LOG_TYPE_DEFAULT, "%s%.*s", v1018, 0x1Cu);
                                    }
                                  }
                                  v135 += v141;
                                  goto LABEL_185;
                                }
                                x_log_end_free_(v961);
                                v6 = v978;
                                v7 = v975;
LABEL_170:
                                if (BYTE9(xmmword_1ECDC6A90))
                                {
                                  kdebug_trace();
                                  v6 = v978;
                                }
                                CA::Render::invalidate_animation(v981, v119, v123);
                                v115 = (_QWORD *)v118[1];
                                v124 = (malloc_zone_t *)get_malloc_zone();
                                malloc_zone_free(v124, v118);
                                *v114 = v115;
                                v116 = 1;
                                v8 = v983;
                                if (!v115)
                                {
LABEL_223:
                                  *((_QWORD *)v981 + 12) |= 0x80000uLL;
                                  v998 = vorrq_s8(v998, (int8x16_t)xmmword_18474E360);
                                  goto LABEL_224;
                                }
                                goto LABEL_159;
                              }
                              ++v136;
                              v139 = 32512;
                              if (v136 == 32512)
                                goto LABEL_191;
                            }
                          }
                          v114 = v118 + 1;
                          v118 = (_QWORD *)v118[1];
                        }
                        while (v118);
                        v8 = v983;
                        if ((v116 & 1) != 0)
                          goto LABEL_223;
LABEL_224:
                        *(_OWORD *)&v1018[168] = 0u;
                        *(double *)v1018 = v991;
                        *(_QWORD *)&v1018[8] = LODWORD(v996);
                        *(_QWORD *)&v1018[16] = v982;
                        *(_QWORD *)&v1018[24] = v8;
                        *(_QWORD *)&v1018[32] = v6;
                        *(_DWORD *)&v1018[172] = 256;
                        memset(&v1018[136], 0, 36);
                        memset(&v1018[40], 0, 80);
                        *(_OWORD *)&v1018[120] = *(_OWORD *)v970;
                        v1018[176] = (v1006 >> 3) & 7;
                        v1018[178] = LOBYTE(v976.f64[0]);
                        v1019 = 0.0;
                        v156 = *((_QWORD *)v982 + 16);
                        if (v156)
                        {
                          v157 = *(_QWORD *)(v156 + 136);
                          if (v157)
                          {
                            if (*(_DWORD *)(v157 + 16))
                            {
                              v158 = (malloc_zone_t *)get_malloc_zone();
                              v159 = malloc_type_zone_calloc(v158, 1uLL, 0x98uLL, 0x743898A5uLL);
                              v161 = v159;
                              if (v159)
                                CA::Render::Layer::Layer((uint64_t)v159, *(const CA::Render::Layer **)&v1018[16]);
                              v162 = *(unsigned int **)&v1018[40];
                              *(_QWORD *)&v1018[40] = v161;
                              if (v162)
                              {
                                v163 = v162 + 2;
                                do
                                {
                                  v164 = __ldaxr(v163);
                                  v165 = v164 - 1;
                                }
                                while (__stlxr(v165, v163));
                                if (!v165)
                                  (*(void (**)(unsigned int *))(*(_QWORD *)v162 + 16))(v162);
                              }
                              v166 = *(unsigned int *)(v157 + 16);
                              if ((_DWORD)v166)
                              {
                                v167 = (uint64_t *)(v157 + 24);
                                *(_QWORD *)&v967.f64[0] = &v1018[48];
                                v168 = v157 + 24 + 8 * v166;
                                while (1)
                                {
                                  v169 = *v167;
                                  v170 = *(_QWORD *)(*v167 + 16);
                                  v171 = *(_QWORD *)(v170 + 24);
                                  v160.n128_u64[0] = *(_QWORD *)(v171 + 32);
                                  if (v1019 >= v160.n128_f64[0])
                                    v160.n128_f64[0] = v1019;
                                  v1019 = v160.n128_f64[0];
                                  v172 = *(CA::Render::Layer **)&v1018[40];
                                  if ((v1018[178] & 1) != 0 && (*(_BYTE *)(v169 + 13) & 2) != 0)
                                  {
                                    v173 = *(_QWORD *)(v169 + 32);
                                    if (v173)
                                    {
                                      if ((v173 & 1) != 0)
                                      {
                                        v174 = v173 >> 1;
                                      }
                                      else
                                      {
                                        LODWORD(v174) = *(_DWORD *)v173;
                                        if (*(_DWORD *)v173)
                                          LODWORD(v174) = *(_DWORD *)(v173 + 4);
                                      }
                                    }
                                    else
                                    {
                                      LODWORD(v174) = 0;
                                    }
                                    v175 = *(_DWORD *)(v169 + 40);
                                    if (v175 < 60 && v175 != 0)
                                      goto LABEL_265;
                                    v177 = *(_QWORD *)(v170 + 16);
                                    v178 = v177 - 40;
                                    if (v177 < 0x28)
                                      goto LABEL_265;
                                    v179 = *(unsigned int *)(v169 + 24);
                                    if (v179 >= v178 >> 3)
                                      goto LABEL_265;
                                    v180 = v171 + v177 - 8 * v179;
                                    v181 = *(unsigned int *)(v180 - 8);
                                    if (!(_DWORD)v181)
                                      goto LABEL_265;
                                    v182 = (16 * v181) | 8;
                                    v183 = *(unsigned int *)(v180 - 4);
                                    v184 = v178 < v183 || 3 * v182 + v183 > v178;
                                    if (!v184
                                      && (v185 = v171 + v183 + 2 * v182,
                                          v187 = *(unsigned __int16 *)(v185 + 40),
                                          v186 = v185 + 40,
                                          v187))
                                    {
                                      if ((_DWORD)v174 == 557)
                                      {
                                        CA::Render::VelocityState::init_scale(*(CA::Render::VelocityState **)&v967.f64[0], *(const CA::Render::Layer **)&v1018[40]);
                                        v173 = *(_QWORD *)(v169 + 32);
                                      }
                                      CA::Render::VelocityState::set_keypath_velocity(*(uint64_t *)&v967.f64[0], (void *const *)v173, 0, 0, v181, (CA::Mat4Impl *)(v186 + 8 + 8 * v181), (double *)(v186 + 8), 0, v160);
                                      v188 = *(_DWORD *)(v169 + 40);
                                      if (!v188)
                                        v188 = 60;
                                      if (v188 >= 49)
                                      {
                                        if (v188 < 0x51)
                                          v226 = 3;
                                        else
                                          v226 = 4;
                                        if (v188 >= 0x3D)
                                          v189 = v226;
                                        else
                                          v189 = 2;
                                      }
                                      else
                                      {
                                        v189 = 1;
                                      }
                                      v227 = v1018[176];
                                      if (v1018[176] <= v189)
                                        v227 = v189;
                                      v1018[176] = v227;
                                      if (v189 > v1018[177])
                                        v1018[177] = v189;
                                      v1018[178] |= 0x10u;
                                      v172 = *(CA::Render::Layer **)&v1018[40];
                                    }
                                    else
                                    {
LABEL_265:
                                      if ((_DWORD)v174 == 557)
                                        *(_DWORD *)&v1018[168] |= 0x200u;
                                    }
                                  }
                                  if (*(_QWORD *)&v1018[32])
                                    v190 = (*(_BYTE *)(*(_QWORD *)&v1018[32] + 27) & 4) == 0;
                                  else
                                    v190 = 1;
                                  v191 = *(_QWORD *)(v169 + 16);
                                  v192 = *(_QWORD *)(v191 + 16);
                                  v193 = v192 - 40;
                                  if (v192 < 0x28)
                                    goto LABEL_306;
                                  v194 = *(unsigned int *)(v169 + 24);
                                  if (v194 >= v193 >> 3)
                                    goto LABEL_306;
                                  v195 = *(_QWORD *)(v191 + 24);
                                  v196 = v195 + v192 - 8 * v194;
                                  v197 = (CA::Render::Vector *)*(unsigned int *)(v196 - 8);
                                  if (!(_DWORD)v197)
                                    goto LABEL_306;
                                  v198 = (16 * (_QWORD)v197) | 8;
                                  v199 = *(unsigned int *)(v196 - 4);
                                  if (v193 < v199 || 3 * v198 + v199 > v193)
                                    goto LABEL_306;
                                  v201 = v195 + v199 + 2 * v198;
                                  v202 = v201 + 40;
                                  if (v190)
                                    *(_WORD *)(v201 + 42) = 1;
                                  if (!*(_WORD *)v202)
                                    goto LABEL_306;
                                  v204 = (const CA::Render::Layer **)(v169 + 32);
                                  v203 = *(_QWORD *)(v169 + 32);
                                  if (!v203)
                                    goto LABEL_306;
                                  if ((v203 & 1) != 0)
                                    break;
                                  v205 = *(unsigned int *)v203;
                                  if ((_DWORD)v205)
                                  {
                                    if (v205 - 1 < (unint64_t)*(unsigned int *)v203)
                                    {
                                      LODWORD(v203) = *(_DWORD *)(v203 + 4 * v205);
LABEL_286:
                                      if ((_DWORD)v203 == 377)
                                      {
                                        if (v197 >= 5)
                                        {
                                          v206 = (unint64_t)*(double *)(v202 + 8);
                                          if (is_mul_ok(v206, 5uLL))
                                          {
                                            v207 = *(double *)(v202 + 16);
                                            if (!((unint64_t)v207 >> 62))
                                            {
                                              v208 = 5 * v206;
                                              if (5 * v206 < 0xFFFFFFFFFFFFFFFBLL
                                                && !__CFADD__(5 * v206 + 5, 4 * (unint64_t)v207))
                                              {
                                                *(_QWORD *)&v966.f64[0] = (unint64_t)v207;
                                                v962 = (CA::Render::Texture **)v206;
                                                v209 = (malloc_zone_t *)get_malloc_zone();
                                                v210 = (CA::Render::MeshTransform *)malloc_type_zone_calloc(v209, 1uLL, 0xD0uLL, 0x743898A5uLL);
                                                if (v210)
                                                {
                                                  v211 = v210;
                                                  CA::Render::MeshTransform::MeshTransform(v210, (unint64_t)v962, *(unint64_t *)&v966.f64[0], -1);
                                                  v212 = v962;
                                                  if (v962)
                                                  {
                                                    v213 = (float *)(*((_QWORD *)v211 + 3) + 28);
                                                    v214 = (float64x2_t *)(v202 + 48);
                                                    do
                                                    {
                                                      *(float32x2_t *)(v213 - 7) = vcvt_f32_f64(*v214);
                                                      *(float32x2_t *)(v213 - 3) = vcvt_f32_f64(v214[1]);
                                                      v215 = v214[2].f64[0];
                                                      *(v213 - 1) = v215;
                                                      *v213 = 1.0;
                                                      v213 += 8;
                                                      v214 = (float64x2_t *)((char *)v214 + 40);
                                                      v212 = (CA::Render::Texture **)((char *)v212 - 1);
                                                    }
                                                    while (v212);
                                                  }
                                                  v216 = v966.f64[0];
                                                  if (*(_QWORD *)&v966.f64[0])
                                                  {
                                                    v217 = 0;
                                                    v218 = (double *)(v202 + 48 + 8 * v208);
                                                    v219 = *((_QWORD *)v211 + 6);
                                                    v220 = *((_QWORD *)v211 + 9) + 4;
                                                    do
                                                    {
                                                      for (i = 0; i != 16; i += 4)
                                                      {
                                                        v222 = *v218++;
                                                        *(_DWORD *)(v219 + i) = v222;
                                                        *(_DWORD *)(v220 + 4 * i) = 0;
                                                      }
                                                      ++v217;
                                                      v220 += 64;
                                                      v219 += 16;
                                                    }
                                                    while (v217 != *(_QWORD *)&v216);
                                                  }
                                                  *((_DWORD *)v211 + 24) = *(double *)(v202 + 24);
                                                  *((_DWORD *)v211 + 25) = (int)*(double *)(v202 + 32);
                                                  *((_BYTE *)v211 + 108) = *(double *)(v202 + 40) != 0.0;
                                                  *((_DWORD *)v211 + 3) &= 0xFFFFD4FF;
                                                  CA::Render::Layer::set_keypath_object(v172, v204, (void *const *)v211);
                                                  v223 = (unsigned int *)((char *)v211 + 8);
                                                  do
                                                  {
                                                    v224 = __ldaxr(v223);
                                                    v225 = v224 - 1;
                                                  }
                                                  while (__stlxr(v225, v223));
                                                  if (!v225)
                                                    (*(void (**)(CA::Render::MeshTransform *))(*(_QWORD *)v211 + 16))(v211);
                                                }
                                              }
                                            }
                                          }
                                        }
                                        goto LABEL_306;
                                      }
                                    }
                                    CA::Render::Layer::set_keypath_value(v172, (unint64_t *)(v169 + 32), (const unsigned int *)((*(_DWORD *)(v169 + 12) >> 8) & 1), v197, (double *)(v202 + 8));
                                  }
LABEL_306:
                                  ++v167;
                                  v6 = v978;
                                  v8 = v983;
                                  if (v167 == (uint64_t *)v168)
                                    goto LABEL_319;
                                }
                                v203 >>= 1;
                                goto LABEL_286;
                              }
                            }
                          }
                        }
LABEL_319:
                        CA::Render::AnimationEvaluator::first_pass((CA::Render::AnimationEvaluator *)v1018, (*((unsigned __int16 *)v980 + 2) >> 3) & 1);
                        *(double *)v149.i64 = v1019;
                        if (v1019 != 0.0)
                        {
                          v229 = v7[2];
                          v150.i64[0] = *(_QWORD *)(v229 + 624);
                          if (*(double *)v150.i64 >= v1019)
                            *(double *)v228.i64 = v1019;
                          else
                            v228.i64[0] = *(_QWORD *)(v229 + 624);
                          if (*(double *)v150.i64 != 0.0)
                            v149.i64[0] = v228.i64[0];
                          *(_QWORD *)(v229 + 624) = v149.i64[0];
                        }
                        v230 = (unsigned int *)((char *)v982 + 8);
                        do
                          v231 = __ldaxr(v230);
                        while (__stlxr(v231 + 1, v230));
                        v5 = v979;
                        if (!v231)
                        {
                          do
                            v290 = __ldaxr(v230);
                          while (__stlxr(v290 - 1, v230));
                        }
                        v232 = v1018[178];
                        v233 = LODWORD(v976.f64[0]);
                        if ((v1018[178] & 2) != 0)
                        {
                          if (*(_QWORD *)&v1018[40])
                            v234 = *(unsigned int **)&v1018[40];
                          else
                            v234 = *(unsigned int **)&v1018[16];
                          v235 = (const CA::Render::Object *)*((_QWORD *)v6 + 4);
                          if (v235 != (const CA::Render::Object *)v234)
                          {
                            CA::Render::Update::release_object((uint64_t *)*v7, v235);
                            *((_QWORD *)v6 + 4) = v234;
                            v236 = v234 + 2;
                            do
                              v237 = __ldaxr(v236);
                            while (__stlxr(v237 + 1, v236));
                            if (!v237)
                            {
                              do
                                v477 = __ldaxr(v236);
                              while (__stlxr(v477 - 1, v236));
                            }
                          }
                          if ((_DWORD)v973)
                            v238 = &v986;
                          else
                            v238 = 0;
                          CA::Render::LayerNode::update_frame_transform((uint64_t)v6, v238->f64);
                          CA::Render::AnimationEvaluator::second_pass((uint64_t)v1018);
                          if ((v1018[178] & 4) == 0)
                            goto LABEL_463;
                        }
                        else if ((v1018[178] & 4) == 0)
                        {
                          goto LABEL_452;
                        }
                        if ((*(_BYTE *)(*(_QWORD *)&v1018[16] + 13) & 1) != 0
                          || (v239 = *(_QWORD *)(*(_QWORD *)&v1018[16] + 136),
                              v240 = *(unsigned int *)(v239 + 16),
                              !(_DWORD)v240))
                        {
                          v244 = 0;
                          goto LABEL_450;
                        }
                        v241 = 0;
                        while (1)
                        {
                          v242 = *(_QWORD *)(v239 + 24 + 8 * v241);
                          if ((*(_DWORD *)(v242 + 12) & 0x201FF) == 0x137)
                            break;
LABEL_349:
                          if (++v241 >= v240)
                          {
                            v244 = 0;
                            v8 = v983;
                            v5 = v979;
                            goto LABEL_449;
                          }
                        }
                        v1007.f64[0] = *(float64_t *)v1018;
                        if ((CA::Render::Animation::map_time((CA::Render::Animation *)v242, v1007.f64, 0, 0, 0) & 1) == 0)
                        {
                          v240 = *(unsigned int *)(v239 + 16);
                          goto LABEL_349;
                        }
                        v249 = *(_QWORD *)&v1018[40];
                        v8 = v983;
                        v5 = v979;
                        if (!*(_QWORD *)&v1018[40])
                        {
                          v250 = (malloc_zone_t *)get_malloc_zone();
                          v249 = (uint64_t)malloc_type_zone_calloc(v250, 1uLL, 0x98uLL, 0x743898A5uLL);
                          if (v249)
                            v249 = CA::Render::Layer::Layer(v249, *(const CA::Render::Layer **)&v1018[16]);
                          v251 = *(unsigned int **)&v1018[40];
                          *(_QWORD *)&v1018[40] = v249;
                          if (v251)
                          {
                            v252 = v251 + 2;
                            do
                            {
                              v253 = __ldaxr(v252);
                              v254 = v253 - 1;
                            }
                            while (__stlxr(v254, v252));
                            if (!v254)
                              (*(void (**)(unsigned int *))(*(_QWORD *)v251 + 16))(v251);
                            v249 = *(_QWORD *)&v1018[40];
                          }
                        }
                        *(_DWORD *)(v249 + 12) |= 0x1000u;
                        ++*(_DWORD *)(v242 + 84);
                        v255 = *(_QWORD *)&v1018[40];
                        v149.i32[1] = HIDWORD(v1007.f64[0]);
                        v256 = *(_QWORD *)(v242 + 128);
                        if (v256 && *(_BYTE *)(v256 + 12) != 29)
                        {
LABEL_448:
                          v244 = 0;
                        }
                        else
                        {
                          v257 = *(float *)(v242 + 100);
                          v258 = v257;
                          v259 = (float)(*(float *)(v242 + 104) - v257);
                          v260 = (CA::Render::Transition *)*(unsigned int *)(v242 + 92);
                          if ((_DWORD)v260 == 221)
                          {
                            v261 = *(_QWORD *)(v242 + 112);
                            if (v261)
                              v260 = (CA::Render::Transition *)*(unsigned int *)(v261 + 24);
                            else
                              v260 = 0;
                          }
                          v292 = v258 + v1007.f64[0] * v259;
                          v293 = CA::Render::Transition::lookup_transition(v260, v148, v243);
                          if (v293)
                          {
                            v294 = v292;
                            v295 = (*(uint64_t (**)(_UNKNOWN **, uint64_t, uint64_t, CA::Render::Transition *, float))*v293)(v293, v242, v255, v260, v294);
                            if (v295)
                            {
                              v296 = v295;
                              v1018[178] |= 8u;
                              v297 = *(unsigned int **)&v1018[40];
                              *(_QWORD *)&v1018[40] = v296;
                              v8 = v983;
                              if (v297)
                              {
                                v298 = v297 + 2;
                                do
                                {
                                  v299 = __ldaxr(v298);
                                  v300 = v299 - 1;
                                }
                                while (__stlxr(v300, v298));
                                if (!v300)
                                  (*(void (**)(unsigned int *))(*(_QWORD *)v297 + 16))(v297);
                              }
                              goto LABEL_448;
                            }
                          }
                          v301 = (malloc_zone_t *)get_malloc_zone();
                          v244 = malloc_type_zone_malloc(v301, 0x50uLL, 0x8BB15036uLL);
                          v8 = v983;
                          if (!v244)
                            goto LABEL_448;
                          v302 = *(_DWORD *)(v242 + 12);
                          v244[2] = 1;
                          v244[3] = 54;
                          ++dword_1ECDC7D00;
                          *(_QWORD *)v244 = off_1E1596440;
                          v149.i64[0] = *(_QWORD *)(v242 + 92);
                          *((_QWORD *)v244 + 2) = v149.i64[0];
                          v303 = *(_QWORD *)(v242 + 120);
                          if (v303)
                          {
                            v304 = (unsigned int *)(v303 + 8);
                            do
                              v305 = __ldaxr(v304);
                            while (__stlxr(v305 + 1, v304));
                            if (!v305)
                            {
                              v303 = 0;
                              do
                                v906 = __ldaxr(v304);
                              while (__stlxr(v906 - 1, v304));
                            }
                          }
                          *((_QWORD *)v244 + 3) = v303;
                          v306 = *(_QWORD *)(v242 + 112);
                          if (v306)
                          {
                            v307 = (unsigned int *)(v306 + 8);
                            do
                              v308 = __ldaxr(v307);
                            while (__stlxr(v308 + 1, v307));
                            if (!v308)
                            {
                              v306 = 0;
                              do
                                v907 = __ldaxr(v307);
                              while (__stlxr(v907 - 1, v307));
                            }
                          }
                          v309 = v302 & 0x3000000;
                          *((_QWORD *)v244 + 4) = v306;
                          v310 = *(_QWORD *)(v242 + 128);
                          if (v310)
                          {
                            v311 = (unsigned int *)(v310 + 8);
                            do
                              v312 = __ldaxr(v311);
                            while (__stlxr(v312 + 1, v311));
                            if (!v312)
                            {
                              v310 = 0;
                              do
                                v908 = __ldaxr(v311);
                              while (__stlxr(v908 - 1, v311));
                            }
                          }
                          *((_QWORD *)v244 + 5) = v310;
                          v313 = v292;
                          *((float *)v244 + 12) = v313;
                          *((_QWORD *)v244 + 7) = 0;
                          v244[16] = *(_DWORD *)(v242 + 136);
                          v244[17] = 0;
                          v244[18] = *(_DWORD *)(v242 + 140);
                          v244[19] = 0;
                          v244[3] |= v309;
                        }
LABEL_449:
                        v233 = LODWORD(v976.f64[0]);
LABEL_450:
                        *((_QWORD *)v6 + 15) = v244;
                        if ((v232 & 2) == 0 || (v1018[178] & 8) != 0)
                        {
LABEL_452:
                          if (*(_QWORD *)&v1018[40])
                            v314 = *(unsigned int **)&v1018[40];
                          else
                            v314 = *(unsigned int **)&v1018[16];
                          v315 = (const CA::Render::Object *)*((_QWORD *)v6 + 4);
                          if (v315 != (const CA::Render::Object *)v314)
                          {
                            CA::Render::Update::release_object((uint64_t *)*v7, v315);
                            *((_QWORD *)v6 + 4) = v314;
                            v316 = v314 + 2;
                            do
                              v317 = __ldaxr(v316);
                            while (__stlxr(v317 + 1, v316));
                            if (!v317)
                            {
                              do
                                v478 = __ldaxr(v316);
                              while (__stlxr(v478 - 1, v316));
                            }
                          }
                          if ((_DWORD)v973)
                            v318 = &v986;
                          else
                            v318 = 0;
                          CA::Render::LayerNode::update_frame_transform((uint64_t)v6, v318->f64);
                        }
LABEL_463:
                        v33 = v982;
                        if (!v233 || (v1018[178] & 0x10) == 0)
                          goto LABEL_484;
                        v319 = *(_DWORD *)&v1018[168];
                        if ((*(_WORD *)&v1018[168] & 0x800) == 0)
                        {
                          v320 = v1002;
                          v321 = v986;
                          if ((*(_WORD *)&v1018[168] & 0x200) != 0 && (v1018[168] & 0x30) != 0)
                          {
                            v322 = 9;
                            goto LABEL_471;
                          }
                          if ((v1006 & 0x200) != 0)
                          {
                            v448 = *(_QWORD *)(*(_QWORD *)&v1018[32] + 56);
                            if (!v448
                              || (v149.i64[0] = *(_QWORD *)(v448 + 24), *(double *)v149.i64 == 0.0)
                              && (v149.i64[0] = *(_QWORD *)(v448 + 56), *(double *)v149.i64 == 0.0))
                            {
                              v449 = *(_QWORD *)&v1018[40];
                              if (*(_QWORD *)&v1018[40])
                                v450 = *(_QWORD *)&v1018[40];
                              else
                                v450 = *(_QWORD *)&v1018[16];
                              v451 = *(_QWORD *)(*(_QWORD *)&v1018[32] + 88);
                              if (v451)
                              {
                                v452 = *(_QWORD *)(v451 + 32);
                                if (v452 && (v453 = *(_QWORD *)(v452 + 128)) != 0)
                                {
                                  v454 = *(_QWORD *)(v453 + 24);
                                  if (v454)
                                  {
                                    v967 = v986;
                                    v976 = v1002;
                                    if (*(_DWORD *)(v454 + 16) <= 0xFu)
                                      v455 = (CA::Mat4Impl *)&CA::Mat4Impl::mat4_identity_double;
                                    else
                                      v455 = (CA::Mat4Impl *)(v454 + 24);
                                    if (CA::Mat4Impl::mat4_is_projective(v455, v148))
                                    {
                                      v320 = v976;
                                      v321 = v967;
                                      if ((v319 & 0x400) != 0)
                                      {
                                        v1018[172] = 10;
                                        *(_DWORD *)&v1018[168] = 2048;
                                        v323 = 5;
                                        v5 = v979;
                                        goto LABEL_800;
                                      }
LABEL_769:
                                      v457 = *(_QWORD *)(v450 + 128);
                                      if (v457)
                                      {
                                        v458 = *(int8x16_t *)(v457 + 168);
                                      }
                                      else
                                      {
                                        v459 = 0.0;
                                        if ((*(_BYTE *)(v450 + 45) & 0x40) == 0)
                                          v459 = 0.5;
                                        v458 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&v459, 0);
                                      }
                                      v228 = (int8x16_t)vcvtq_f64_f32(v1003);
                                      *(double *)v149.i64 = v1004;
                                      v150 = *(int8x16_t *)(v450 + 80);
                                      if ((v319 & 0x80) == 0)
                                      {
                                        if ((v319 & 0xFFFFF7FF) != 0)
                                        {
                                          __asm { FMOV            V6.2D, #-0.5 }
                                          *(float64x2_t *)&v1018[56] = vmulq_f64(*(float64x2_t *)&v1018[56], v320);
                                          *(float64x2_t *)&v1018[88] = vmulq_f64(*(float64x2_t *)&v1018[88], v320);
                                          *(float64x2_t *)&v1018[104] = vmulq_f64(*(float64x2_t *)&v1018[104], v320);
                                          *(float64x2_t *)&v1018[72] = vmulq_f64(*(float64x2_t *)&v1018[72], v320);
                                          *(float64x2_t *)&v1018[136] = vmulq_f64(*(float64x2_t *)&v1018[136], v320);
                                          v461 = vaddq_f64(vaddq_f64(*(float64x2_t *)&v1018[56], (float64x2_t)v228), *(float64x2_t *)&v1018[136]);
                                          v462 = vmulq_f64(*(float64x2_t *)&v1018[88], v321);
                                          v463 = vmulq_f64(*(float64x2_t *)&v1018[104], (float64x2_t)v150);
                                          v464 = (int8x16_t)vsubq_f64(*(float64x2_t *)v970, (float64x2_t)v458);
                                          v465 = vaddq_f64(v463, v462);
                                          v466 = vmlsq_f64(v461, (float64x2_t)v458, v465);
                                          v467 = vnegq_f64(v461);
                                          v468 = vmlaq_f64(v461, (float64x2_t)v464, v465);
                                          v469 = vcvt_f32_f64(vnegq_f64(vmlaq_f64(vcvtq_f64_f32(vcvt_f32_f64(vmlaq_f64(vcvtq_f64_f32(vcvt_f32_f64(vmlaq_f64(v467, (float64x2_t)v458, v462))), vaddq_f64((float64x2_t)v458, _Q6), v463))), v321, *(float64x2_t *)&v1018[72])));
                                          v1003 = v469;
                                          v462.f64[0] = 0.5 * v463.f64[0];
                                          v463.f64[0] = vmuld_lane_f64(0.5, v463, 1);
                                          v470 = sqrt(v462.f64[0] * v462.f64[0] + v463.f64[0] * v463.f64[0]);
                                          v471 = 0.0;
                                          v5 = v979;
                                          v33 = v982;
                                          if ((v319 & 0x100) != 0)
                                          {
                                            v472 = vmulq_f64(vmulq_f64(vmulq_f64(v321, v320), (float64x2_t)v150), (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v458, (float64x2_t)v464), v458, v464));
                                            v150 = (int8x16_t)vmulq_f64(v472, v472);
                                            v471 = fabs(*(double *)&v1018[160]) * sqrt(vaddvq_f64((float64x2_t)v150));
                                          }
                                          v473 = v471 + v470;
                                          *(double *)v150.i64 = v471 + v470 + sqrtf(vaddv_f32(vmul_f32(v469, v469)));
                                          v474 = (float64x2_t)vbslq_s8((int8x16_t)vcagtq_f64(v466, v468), (int8x16_t)vabsq_f64(v466), (int8x16_t)vabsq_f64(v468));
                                          v475 = v471 + sqrt(vaddvq_f64(vmulq_f64(v474, v474)));
                                          if (*(double *)v150.i64 > v475)
                                            v475 = *(double *)v150.i64;
                                          if ((*(_BYTE *)(v449 + 13) & 9) == 0)
                                            *(double *)v150.i64 = v475;
                                          *(double *)v228.i64 = v473 + *(double *)v149.i64;
                                          *(float *)v228.i32 = v473 + *(double *)v149.i64;
                                          v1004 = *(float *)v228.i32;
                                        }
                                        else
                                        {
                                          v150.i64[0] = 0;
                                          v5 = v979;
                                          v33 = v982;
                                        }
                                        goto LABEL_960;
                                      }
                                      if (*(_DWORD *)(v454 + 16) <= 0xFu)
                                        v476 = (double *)&CA::Mat4Impl::mat4_identity_double;
                                      else
                                        v476 = (double *)(v454 + 24);
                                      if ((v319 & 0xFFFFFF7F) != 0)
                                      {
                                        v5 = v979;
                                        if ((v319 & 0x800) == 0)
                                          goto LABEL_798;
LABEL_799:
                                        *(_DWORD *)&v1018[168] = 2048;
                                        v323 = 5;
LABEL_800:
                                        v33 = v982;
                                      }
                                      else
                                      {
                                        v5 = v979;
                                        if (v476[3] != 0.0 || v476[7] != 0.0)
                                        {
LABEL_798:
                                          v1018[172] = 5;
                                          goto LABEL_799;
                                        }
                                        if (v457)
                                          v479 = *(double *)(v457 + 192) - *(double *)(v457 + 184);
                                        else
                                          v479 = 0.0;
                                        v579 = v476[11];
                                        v580 = -(v579 * *(double *)&v1018[152]);
                                        v581 = (v476[15] + v579 * v479) * (v476[15] + v579 * v479);
                                        if (v457)
                                        {
                                          v582 = *(float64x2_t *)(v457 + 168);
                                        }
                                        else
                                        {
                                          v583 = 0.0;
                                          if ((*(_BYTE *)(v450 + 45) & 0x40) == 0)
                                            v583 = 0.5;
                                          v582 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v583, 0);
                                        }
                                        v584 = *(float64x2_t *)(v450 + 48);
                                        v585 = *(float64x2_t *)(v452 + 64);
                                        v586 = *(float64x2_t *)(v452 + 80);
                                        v587 = *(_QWORD *)(v452 + 128);
                                        v588 = v580 / v581;
                                        if (v587)
                                        {
                                          v589 = *(float64x2_t *)(v587 + 168);
                                        }
                                        else
                                        {
                                          v590 = 0.0;
                                          if ((*(_BYTE *)(v452 + 45) & 0x40) == 0)
                                            v590 = 0.5;
                                          v589 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v590, 0);
                                        }
                                        v33 = v982;
                                        v591 = vmulq_n_f64(v320, v588);
                                        v592 = vmulq_f64((float64x2_t)v150, v320);
                                        v593 = v588 * v592.f64[0];
                                        v594 = vmuld_lane_f64(v588, v592, 1);
                                        *(float *)&v594 = *(double *)v149.i64 + sqrt(v593 * v593 + v594 * v594) * 0.5;
                                        v1004 = *(float *)&v594;
                                        v595 = vsubq_f64(v584, vmlaq_f64(vmlaq_f64(v585, (float64x2_t)v150, v582), v586, v589));
                                        v596 = vmlaq_f64((float64x2_t)v228, v595, v591);
                                        v597 = vmlaq_f64((float64x2_t)v228, vaddq_f64(v595, (float64x2_t)v150), v591);
                                        __asm { FMOV            V3.2D, #0.5 }
                                        v1003 = vcvt_f32_f64(vmulq_f64(vaddq_f64(v597, v596), _Q3));
                                        v599 = (int8x16_t)vabsq_f64(v597);
                                        v228 = (int8x16_t)vcagtq_f64(v596, v597);
                                        v600 = (float64x2_t)vbslq_s8(v228, (int8x16_t)vabsq_f64(v596), v599);
                                        v150 = (int8x16_t)vmulq_f64(v600, v600);
                                        *(double *)v150.i64 = sqrt(vaddvq_f64((float64x2_t)v150));
LABEL_960:
                                        v601 = *(double *)v150.i64 + *(double *)v149.i64;
                                        if (CA::Render::AnimationEvaluator::velocity_pass(CA::Vec2<double>,CA::Vec2<double>,BOOL,CA::Vec2<float> &,float &)::once != -1)
                                          dispatch_once(&CA::Render::AnimationEvaluator::velocity_pass(CA::Vec2<double>,CA::Vec2<double>,BOOL,CA::Vec2<float> &,float &)::once, &__block_literal_global_16214);
                                        if (CA::Render::AnimationEvaluator::velocity_pass(CA::Vec2<double>,CA::Vec2<double>,BOOL,CA::Vec2<float> &,float &)::has_thresholds)
                                        {
                                          *(double *)v149.i64 = *(float *)&CA::Render::AnimationEvaluator::velocity_pass(CA::Vec2<double>,CA::Vec2<double>,BOOL,CA::Vec2<float> &,float &)::thresholds;
                                          if (v601 >= *(float *)&CA::Render::AnimationEvaluator::velocity_pass(CA::Vec2<double>,CA::Vec2<double>,BOOL,CA::Vec2<float> &,float &)::thresholds)
                                          {
                                            v323 = 4;
                                          }
                                          else
                                          {
                                            *(double *)v149.i64 = *((float *)&CA::Render::AnimationEvaluator::velocity_pass(CA::Vec2<double>,CA::Vec2<double>,BOOL,CA::Vec2<float> &,float &)::thresholds
                                                                  + 1);
                                            if (v601 >= *((float *)&CA::Render::AnimationEvaluator::velocity_pass(CA::Vec2<double>,CA::Vec2<double>,BOOL,CA::Vec2<float> &,float &)::thresholds
                                                         + 1))
                                            {
                                              v323 = 3;
                                            }
                                            else
                                            {
                                              *(double *)v149.i64 = *((float *)&CA::Render::AnimationEvaluator::velocity_pass(CA::Vec2<double>,CA::Vec2<double>,BOOL,CA::Vec2<float> &,float &)::thresholds
                                                                    + 2);
                                              if (v601 >= *((float *)&CA::Render::AnimationEvaluator::velocity_pass(CA::Vec2<double>,CA::Vec2<double>,BOOL,CA::Vec2<float> &,float &)::thresholds
                                                           + 2))
                                                v323 = 2;
                                              else
                                                v323 = 1;
                                            }
                                          }
                                        }
                                        else
                                        {
                                          v323 = 5;
                                        }
                                        if (!byte_1ECDC6ACE && v1018[176] < v323)
                                          v323 = v1018[176];
                                      }
LABEL_473:
                                      v324 = *(void **)(v8 + 184);
                                      if (v324 && v323 == 5)
                                      {
                                        if (v1018[177] == 3)
                                        {
                                          v149.i32[0] = 1117782016;
                                          v150.i32[0] = 1123024896;
                                          v228.i32[0] = 1117782016;
LABEL_479:
                                          objc_msgSend(v324, "addFrameRateRange:", *(double *)v149.i64, *(double *)v150.i64, *(double *)v228.i64, v953.i64[0]);
                                        }
                                        else if (v1018[177] == 4)
                                        {
                                          v150.i32[0] = 1123024896;
                                          v149.i32[0] = 1117782016;
                                          v228.i32[0] = 1123024896;
                                          goto LABEL_479;
                                        }
                                      }
                                      v325 = v1006 & 0xFFC7 | (8 * (v1018[176] & 7));
                                      if ((v1006 & 7) != 5)
                                        v325 = v1006 & 0xFFC0 | (8 * (v1018[176] & 7)) | v323;
                                      v1006 = v325;
                                      if (v323 == 5)
                                        objc_msgSend(*(id *)(v8 + 184), "addReason:", v1018[172] | 0x20000u);
LABEL_484:
                                      v326 = (CA::Render::FlattenManager *)*((_QWORD *)v6 + 4);
                                      v151 = v33;
                                      if (v326 != v33)
                                      {
                                        v327 = *((_DWORD *)v326 + 3);
                                        if ((v327 & 0x1000) != 0
                                          || !CA::Render::Layer::is_containerable(*((CA::Render::Layer **)v6 + 4), v148))
                                        {
                                          v328 = v327 & 0xFFFFF7FF;
                                        }
                                        else
                                        {
                                          v328 = v327 | 0x800;
                                        }
                                        *((_DWORD *)v326 + 3) = v328;
                                        v151 = (CA::Render::FlattenManager *)*((_QWORD *)v6 + 4);
                                      }
                                      v329 = *(_QWORD *)&v1018[40];
                                      v62 = v981;
                                      if (*(_QWORD *)&v1018[40])
                                      {
                                        v330 = (unsigned int *)(*(_QWORD *)&v1018[40] + 8);
                                        do
                                        {
                                          v331 = __ldaxr(v330);
                                          v332 = v331 - 1;
                                        }
                                        while (__stlxr(v332, v330));
                                        if (!v332)
                                          (*(void (**)(uint64_t))(*(_QWORD *)v329 + 16))(v329);
                                      }
                                      LODWORD(v970[0]) = 1;
LABEL_496:
                                      is_2d_affine = *(uint64_t *)(v5 + 88);
                                      if (*(double *)&is_2d_affine != 0.0
                                        && ((*(double *)&is_2d_affine = COERCE_DOUBLE(CA::Render::Context::root_layer_handle((CA::Render::Context *)is_2d_affine)),
                                             *(double *)&is_2d_affine == 0.0)
                                          ? (v334 = 0)
                                          : (v334 = *(CA::Render::FlattenManager **)(is_2d_affine + 16)),
                                            v334 == v33
                                         && (v564 = *(_QWORD *)(*(_QWORD *)v5 + 32),
                                             (v565 = *(uint64_t **)(v564 + 128)) != 0)
                                         && (v566 = *v565) != 0
                                         && (v567 = *(_DWORD *)(v566 + 12), v567 == 30)))
                                      {
                                        if ((v567 & 0x1000) == 0
                                          || *(double *)(v564 + 64) == *((double *)v151 + 8)
                                          && *(double *)(v564 + 72) == *((double *)v151 + 9)
                                          && *(double *)(v564 + 80) == *((double *)v151 + 10)
                                          && *(double *)(v564 + 88) == *((double *)v151 + 11))
                                        {
                                          if ((v567 & 0x4000) == 0)
                                          {
                                            v335 = v151;
                                            goto LABEL_928;
                                          }
                                          v1017[0] = xmmword_18474DF40;
                                          v1017[1] = 0u;
                                          v1017[2] = xmmword_18474DF50;
                                          memset(&v1017[3], 0, 32);
                                          v1017[5] = xmmword_18474DF40;
                                          v1017[6] = 0u;
                                          v1017[7] = xmmword_18474DF50;
                                          v985[0] = &off_1E15997A0;
                                          v985[1] = v1017;
                                          v920 = (CA::Render::LayerNode *)*((_QWORD *)v978 + 11);
                                          if (v920)
                                            CA::Render::LayerNode::MapGeometry::map((uint64_t)v985, 0, v920);
                                          memset(v1018, 0, 152);
                                          CA::Transform::set((uint64_t)v1018, (CA::Mat4Impl *)v1017, 1);
                                          v923 = *v7;
                                          v924 = *(float64x2_t **)(*v7 + 1048);
                                          if (v924)
                                            CA::Transform::concat_left((CA::Transform *)v1018, v924, v921, v922);
                                          v925 = (CA::Mat4Impl *)*((_QWORD *)v978 + 7);
                                          if (v925)
                                          {
                                            v1016 = 0;
                                            v1014 = 0u;
                                            v1015 = 0u;
                                            v1012 = 0u;
                                            v1013 = 0u;
                                            v1010 = 0u;
                                            v1011 = 0u;
                                            v1008 = 0u;
                                            v1009 = 0u;
                                            v1007 = 0u;
                                            CA::Transform::set((uint64_t)&v1007, v925, 1);
                                            CA::Transform::concat_left((CA::Transform *)v1018, &v1007, v926, v927);
                                          }
                                          else
                                          {
                                            CA::Transform::translate((CA::Transform *)v1018, *((double *)v978 + 8), *((double *)v978 + 9), *((double *)v978 + 10));
                                          }
                                          if ((*(_DWORD *)(v923 + 1064) & 0x8000000) != 0)
                                          {
                                            v1016 = 0;
                                            v1014 = 0u;
                                            v1015 = 0u;
                                            v1012 = 0u;
                                            v1013 = 0u;
                                            v1010 = 0u;
                                            v1011 = 0u;
                                            v1008 = 0u;
                                            v1009 = 0u;
                                            v1007 = 0u;
                                            v929 = *(_OWORD *)(v923 + 624);
                                            v930 = *(_OWORD *)(v923 + 640);
                                            v931 = *(_OWORD *)(v923 + 656);
                                            v984[0] = *(_OWORD *)(v923 + 608);
                                            v984[1] = v929;
                                            v984[2] = v930;
                                            v984[3] = v931;
                                            v932 = *(_OWORD *)(v923 + 688);
                                            v933 = *(_OWORD *)(v923 + 704);
                                            v934 = *(_OWORD *)(v923 + 720);
                                            v984[4] = *(_OWORD *)(v923 + 672);
                                            v984[5] = v932;
                                            v984[6] = v933;
                                            v984[7] = v934;
                                            CA::Transform::set((uint64_t)&v1007, (CA::Mat4Impl *)v984, 1);
                                            CA::Transform::concat_left((CA::Transform *)v1018, &v1007, v935, v936);
                                          }
                                          v6 = v978;
                                          CA::Render::LayerNode::set_frame_transform(v978, (const CA::Transform *)v1018);
                                          v335 = v151;
                                        }
                                        else
                                        {
                                          v912 = (CA::Render::FlattenManager *)x_mem_alloc0(0x98uLL);
                                          v335 = v912;
                                          if (v912)
                                            CA::Render::Layer::Layer((uint64_t)v912, v151);
                                          v913 = *(float64_t **)(*(_QWORD *)v979 + 32);
                                          v914 = v913[9];
                                          v915 = v913[10];
                                          v916 = v913[11];
                                          v1007.f64[0] = v913[8];
                                          v1007.f64[1] = v914;
                                          v1008.f64[0] = v915 + v1007.f64[0];
                                          v1008.f64[1] = v914;
                                          v1009.f64[0] = v915 + v1007.f64[0];
                                          v1009.f64[1] = v916 + v914;
                                          v1010.f64[0] = v1007.f64[0];
                                          v1010.f64[1] = v916 + v914;
                                          v917 = *((_QWORD *)v151 + 16);
                                          if (v917)
                                          {
                                            v919 = *(double *)(v917 + 168);
                                            v918 = *(double *)(v917 + 176);
                                          }
                                          else
                                          {
                                            v918 = 0.0;
                                            if ((*((_BYTE *)v151 + 45) & 0x40) == 0)
                                              v918 = 0.5;
                                            v919 = v918;
                                          }
                                          v937 = 0;
                                          *(double *)v1017 = v919;
                                          *((double *)v1017 + 1) = v918;
                                          v938 = vmlaq_n_f64(v1007, vsubq_f64(v1008, v1007), v919);
                                          v939 = (int64x2_t)vmlaq_n_f64(v938, vmlaq_n_f64(vsubq_f64(v1010, v938), vsubq_f64(v1009, v1010), v919), v918);
                                          v940 = (float64x2_t)vdupq_lane_s64(v939.i64[0], 0);
                                          v976 = (float64x2_t)v939;
                                          v941 = (float64x2_t)vdupq_laneq_s64(v939, 1);
                                          do
                                          {
                                            v942 = &v1007.f64[v937];
                                            v1021 = vld2q_f64(v942);
                                            v1022.val[0] = vsubq_f64(v1021.val[0], v940);
                                            v1022.val[1] = vsubq_f64(v1021.val[1], v941);
                                            vst2q_f64(v942, v1022);
                                            v937 += 4;
                                          }
                                          while (v937 != 8);
                                          v984[0] = *((_OWORD *)v151 + 5);
                                          CA::Mat4Impl::mat4_set_corner_matrix((uint64_t)v1018, v1007.f64, (double *)v984, (double *)v1017);
                                          LODWORD(v985[0]) = 557;
                                          CA::Render::Layer::set_property_value(v335, (const unsigned int *)v985, (double *)1, 0, (CA::Render::Vector *)0x10, (double *)v1018, v943);
                                          *((_QWORD *)v335 + 5) &= ~0x200uLL;
                                          *((float64x2_t *)v335 + 3) = v976;
                                          v944 = (const CA::Render::Object *)*((_QWORD *)v978 + 4);
                                          if (v944 != v335)
                                          {
                                            CA::Render::Update::release_object((uint64_t *)*v7, v944);
                                            *((_QWORD *)v978 + 4) = v335;
                                            v945 = (unsigned int *)((char *)v335 + 8);
                                            do
                                              v946 = __ldaxr(v945);
                                            while (__stlxr(v946 + 1, v945));
                                            if (!v946)
                                            {
                                              do
                                                v951 = __ldaxr(v945);
                                              while (__stlxr(v951 - 1, v945));
                                            }
                                          }
                                          if ((_DWORD)v973)
                                            v947 = &v986;
                                          else
                                            v947 = 0;
                                          CA::Render::LayerNode::update_frame_transform((uint64_t)v978, v947->f64);
                                          v948 = (unsigned int *)((char *)v335 + 8);
                                          do
                                          {
                                            v949 = __ldaxr(v948);
                                            v950 = v949 - 1;
                                          }
                                          while (__stlxr(v950, v948));
                                          if (!v950)
                                            *(double *)&is_2d_affine = COERCE_DOUBLE((*(uint64_t (**)(CA::Render::FlattenManager *))(*(_QWORD *)v335 + 16))(v335));
LABEL_928:
                                          v6 = v978;
                                        }
                                        v33 = v982;
                                        v8 = v983;
                                        v5 = v979;
                                        v62 = v981;
                                      }
                                      else
                                      {
                                        v335 = v151;
                                      }
                                      if ((*((_BYTE *)v335 + 13) & 8) != 0)
                                      {
                                        if ((v969 & 0x2000000) == 0)
                                        {
                                          if ((*v980 & 4) == 0)
                                            goto LABEL_503;
                                          v337 = *(_QWORD *)(v8 + 344);
                                          if (v337)
                                          {
                                            *(double *)&is_2d_affine = COERCE_DOUBLE((*(uint64_t (**)(uint64_t, _QWORD, CA::Render::LayerNode *, CA::Render::FlattenManager *))(*(_QWORD *)v337 + 24))(v337, v7[3], v6, v335));
                                            if (!(_DWORD)is_2d_affine)
                                              goto LABEL_503;
                                          }
                                          else
                                          {
                                            is_2d_affine = (v969 >> 25) & 1;
                                            if (!(_DWORD)is_2d_affine)
                                              goto LABEL_503;
                                          }
                                        }
                                        v372 = (malloc_zone_t *)get_malloc_zone();
                                        *(double *)&is_2d_affine = COERCE_DOUBLE(malloc_type_zone_calloc(v372, 1uLL, 0x98uLL, 0x743898A5uLL));
                                        v373 = *(double *)&is_2d_affine;
                                        if (*(double *)&is_2d_affine != 0.0)
                                          *(double *)&is_2d_affine = COERCE_DOUBLE(CA::Render::Layer::Layer(is_2d_affine, v335));
                                        *(_DWORD *)(*(_QWORD *)&v373 + 12) = *(_DWORD *)(*(_QWORD *)&v373 + 12) & 0xFFFFE7FF | 0x1000;
                                        v148 = (const double *)*((_QWORD *)v6 + 4);
                                        v976.f64[0] = v373;
                                        if (v148 != *(const double **)&v373)
                                        {
                                          *(double *)&is_2d_affine = COERCE_DOUBLE(CA::Render::Update::release_object((uint64_t *)*v7, (const CA::Render::Object *)v148));
                                          *((float64_t *)v6 + 4) = v373;
                                          v374 = (unsigned int *)(*(_QWORD *)&v373 + 8);
                                          do
                                            v375 = __ldaxr(v374);
                                          while (__stlxr(v375 + 1, v374));
                                          v373 = v976.f64[0];
                                          if (!v375)
                                          {
                                            do
                                              v456 = __ldaxr(v374);
                                            while (__stlxr(v456 - 1, v374));
                                          }
                                        }
                                        v376 = (unsigned int *)(*(_QWORD *)&v373 + 8);
                                        do
                                        {
                                          v377 = __ldaxr(v376);
                                          v378 = v377 - 1;
                                        }
                                        while (__stlxr(v378, v376));
                                        if (!v378)
                                          *(double *)&is_2d_affine = COERCE_DOUBLE((*(uint64_t (**)(_QWORD))(**(_QWORD **)&v976.f64[0] + 16))(*(_QWORD *)&v976.f64[0]));
                                      }
                                      else
                                      {
LABEL_503:
                                        *(_QWORD *)&v976.f64[0] = v335;
                                      }
                                      v336 = *v980 | ((unint64_t)*((unsigned __int16 *)v980 + 2) << 32);
                                      if ((v336 & 0x1000000000) != 0)
                                      {
                                        v338 = v1006 & 7;
                                        if (v338 == 5 || v338 == 0)
                                          v340 = 2;
                                        else
                                          v340 = 1;
                                        LODWORD(v962) = v340;
                                      }
                                      else
                                      {
                                        LODWORD(v962) = 0;
                                      }
                                      if (!v974 && !*((_QWORD *)v33 + 17))
                                      {
                                        v362 = v998.i64[1];
                                        goto LABEL_659;
                                      }
                                      v341 = &v1002;
                                      v342 = *(double *)(v5 + 16);
                                      v343 = *(float *)(v5 + 56);
                                      v344 = v991;
                                      v345 = v992;
                                      v346 = v996;
                                      LODWORD(v958) = *((_DWORD *)v7 + 2);
                                      v969 = *(_QWORD *)(v8 + 184);
                                      LODWORD(v967.f64[0]) = *(_DWORD *)(v8 + 276);
                                      if ((*(_QWORD *)&v971 & 0x200000) == 0)
                                        v341 = 0;
                                      *(_QWORD *)&v966.f64[0] = v341;
                                      v149.i64[0] = 0x7FF0000000000000;
                                      *(double *)v150.i64 = v343;
                                      v347.f64[0] = NAN;
                                      v347.f64[1] = NAN;
                                      v348 = vbslq_s8((int8x16_t)vnegq_f64(v347), v149, v150);
                                      v349 = *((_QWORD *)v33 + 16);
                                      if (v349)
                                      {
                                        v350 = *(_QWORD *)(v349 + 8);
                                        v351 = v343 == 0.0 || v350 == 0;
                                        *(float *)&v352 = v343;
                                        v955 = *(_QWORD *)(v349 + 8);
                                        if (v351)
                                        {
                                          LODWORD(v957) = v350 != 0;
                                          v353 = 0;
                                        }
                                        else
                                        {
                                          v959 = v348;
                                          v354 = *(double *)(v350 + 40);
                                          v355 = v343;
                                          *(double *)v149.i64 = CA::Render::Timing::end_time((CA::Render::Timing *)v350);
                                          *(float *)&v352 = v355;
                                          v356 = *(_DWORD *)(v350 + 12);
                                          v357 = (v356 >> 10) & 1;
                                          v358 = (v356 >> 9) & 1;
                                          if (v355 < 0.0)
                                            v359 = *(double *)v149.i64;
                                          else
                                            v359 = v354;
                                          if (v355 >= 0.0)
                                          {
                                            v360 = v357;
                                          }
                                          else
                                          {
                                            *(double *)v149.i64 = v354;
                                            v360 = v358;
                                          }
                                          if (v355 < 0.0)
                                            v358 = v357;
                                          v361 = v359 > v342;
                                          if (v355 <= 0.0)
                                            v361 = v359 < v342;
                                          if (v361)
                                          {
                                            v149 = v959;
                                            if (!v360)
                                              *(double *)v149.i64 = v359;
                                            v348 = v149;
                                            v353 = (unint64_t)(v360 == 0) << 11;
LABEL_575:
                                            LODWORD(v957) = 1;
                                          }
                                          else
                                          {
                                            v363 = *(double *)v149.i64 > v342;
                                            if (v355 <= 0.0)
                                              v363 = *(double *)v149.i64 < v342;
                                            if (v363)
                                            {
                                              v364 = *(double *)(v350 + 32);
                                              if ((*(_QWORD *)&v364 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
                                                || (*(float *)&v352 = v355, *(double *)(v350 + 24) == 0.0))
                                              {
                                                v348 = v959;
                                                if ((v149.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000
                                                  && v358 == 0)
                                                {
                                                  v348.i64[0] = v149.i64[0];
                                                  v353 = 2048;
                                                }
                                                else
                                                {
                                                  v353 = 0;
                                                }
                                                goto LABEL_575;
                                              }
                                              v365 = *(float *)(v350 + 16);
                                              *(double *)v149.i64 = v342;
                                              if ((float)(v365 * v355) != 0.0)
                                              {
                                                v149.i64[0] = *(_QWORD *)(v350 + 40);
                                                if (*(double *)v149.i64 <= v342)
                                                {
                                                  v366 = v365;
                                                  v367 = *(double *)(v350 + 48);
                                                  v368 = floor((v367 + (v342 - *(double *)v149.i64) * v366) / v364);
                                                  v369 = -0.000001;
                                                  if (v355 > 0.0)
                                                    v369 = v364 + -0.000001;
                                                  v370 = (v369 + v368 * v364 - v367) / v366 + *(double *)v149.i64;
                                                  if ((*(_QWORD *)&v370 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
                                                    v371 = v342;
                                                  else
                                                    v371 = v370;
                                                  *(double *)v149.i64 = CA::Render::Timing::end_time((CA::Render::Timing *)v350)
                                                                      + -0.000001;
                                                  if (v371 <= *(double *)v149.i64)
                                                    *(double *)v149.i64 = v371;
                                                }
                                              }
                                              *(double *)v348.i64 = *(double *)v149.i64 + -0.000001;
                                              LODWORD(v957) = 1;
                                              v353 = 2048;
                                              *(float *)&v352 = v355;
                                            }
                                            else
                                            {
                                              v353 = 0;
                                              LODWORD(v957) = 1;
                                              v348 = v959;
                                            }
                                          }
                                        }
                                      }
                                      else
                                      {
                                        LODWORD(v957) = 0;
                                        v955 = 0;
                                        v353 = 0;
                                        *(float *)&v352 = v343;
                                      }
                                      LODWORD(v1017[0]) = 0;
                                      LODWORD(v984[0]) = 0;
                                      v379 = *((_QWORD *)v982 + 17);
                                      if (!v379 || !*(_DWORD *)(v379 + 16))
                                        goto LABEL_647;
                                      v959 = v348;
                                      v954.i32[0] = v352;
                                      v975 = v7;
                                      LODWORD(v961) = 0;
                                      v380 = 0;
                                      *(double *)v149.i64 = v346;
                                      v348.i64[0] = 0x7FF0000000000000;
                                      v381.f64[0] = NAN;
                                      v381.f64[1] = NAN;
                                      v382 = vbslq_s8((int8x16_t)vnegq_f64(v381), v348, v149);
                                      v956 = (v336 >> 35) & 1;
                                      v960 = v382;
                                      v971 = *(double *)v382.i64;
                                      while (2)
                                      {
                                        v383 = *(_QWORD *)(v379 + 24 + 8 * v380);
                                        v384 = *(_DWORD *)(v383 + 12);
                                        if ((v384 & 0x20100) != 0x100)
                                          goto LABEL_633;
                                        v385 = *(_QWORD *)(v383 + 40);
                                        if (v385)
                                        {
                                          v386 = *(double *)(v385 + 40);
                                          v387 = CA::Render::Timing::end_time(*(CA::Render::Timing **)(v383 + 40));
                                          if ((*(_DWORD *)(v383 + 12) & 0x8000) == 0)
                                            goto LABEL_586;
                                        }
                                        else
                                        {
                                          v386 = 0.0;
                                          v387 = INFINITY;
                                          if ((v384 & 0x8000) == 0)
                                            goto LABEL_586;
                                        }
                                        v388 = *(float *)(v383 + 32);
                                        if (v388 != 0.0)
                                        {
                                          v389 = 1.0 / v388;
                                          v386 = v386 - v389;
                                          v387 = v389 + v387;
                                        }
LABEL_586:
                                        v353 |= (*(_QWORD *)&v384 & 0x10000) << 28;
                                        if (v346 != 0.0)
                                        {
                                          if (v346 >= 0.0)
                                            v390 = v386;
                                          else
                                            v390 = v387;
                                          v391 = v390 > v344;
                                          if (v346 >= 0.0)
                                            v392 = v387;
                                          else
                                            v392 = v386;
                                          if (v346 <= 0.0)
                                            v391 = v390 < v344;
                                          if (v391)
                                          {
                                            v393 = v390 <= v345;
                                            if (v346 <= 0.0)
                                              v393 = v390 >= v345;
                                            goto LABEL_613;
                                          }
                                          v394 = v392 > v344;
                                          if (v346 <= 0.0)
                                            v394 = v392 < v344;
                                          if (v394)
                                          {
                                            *(double *)v1018 = v392;
                                            *(double *)&is_2d_affine = COERCE_DOUBLE((*(uint64_t (**)(uint64_t))(*(_QWORD *)v383 + 104))(v383));
                                            v1007.f64[0] = INFINITY;
                                            if ((_DWORD)is_2d_affine)
                                            {
                                              v395 = v962;
                                              *(double *)&is_2d_affine = COERCE_DOUBLE((*(uint64_t (**)(uint64_t, unint64_t, _QWORD, _QWORD, uint64_t, _BYTE *, CA::Render::FlattenManager *, _QWORD, double, float, _OWORD *))(*(_QWORD *)v383 + 112))(v383, v969, v962, LODWORD(v967.f64[0]), v956, v1018, v982, *(_QWORD *)&v966.f64[0], v344, v346, v1017));
                                              if (v345 != v344)
                                              {
                                                *(double *)&is_2d_affine = COERCE_DOUBLE((*(uint64_t (**)(uint64_t, unint64_t, uint64_t, _QWORD, uint64_t, float64x2_t *, CA::Render::FlattenManager *, _QWORD, double, float, _OWORD *))(*(_QWORD *)v383 + 112))(v383, v969, v395, LODWORD(v967.f64[0]), v956, &v1007, v982, *(_QWORD *)&v966.f64[0], v345, v346, v984));
                                                if (*(double *)v1018 != v1007.f64[0])
                                                  goto LABEL_611;
                                              }
                                            }
                                            v396 = v390 > v345;
                                            if (v346 <= 0.0)
                                              v396 = v390 < v345;
                                            if (v396)
                                              goto LABEL_611;
                                            v397 = v392 > v345;
                                            if (v346 <= 0.0)
                                              v397 = v392 < v345;
                                            if (v397 && *(_DWORD *)(v383 + 76) != (_DWORD)v958)
                                              v393 = 0;
                                            else
LABEL_611:
                                              v393 = 1;
                                            v390 = *(double *)v1018;
                                            v62 = v981;
                                            if (v390 >= INFINITY)
                                              goto LABEL_619;
LABEL_613:
                                            v353 |= 0x800uLL;
                                            v398 = v390 < v971;
                                            if (v346 <= 0.0)
                                              v398 = v390 > v971;
                                            if (v398)
                                            {
                                              LODWORD(v961) = 1;
                                              *(double *)v382.i64 = v390;
                                              v960 = v382;
                                              v971 = v390;
                                              if (!v393)
                                                break;
                                            }
                                            else
                                            {
LABEL_619:
                                              if (!v393)
                                                break;
                                            }
LABEL_620:
                                            v399 = *(unsigned int *)(v383 + 12);
                                            v400 = 256;
                                            if ((v399 & 0x1000) == 0)
                                              v400 = 512;
                                            v353 |= v400 | (v399 >> 3) & 0x400;
LABEL_633:
                                            if (++v380 < (unint64_t)*(unsigned int *)(v379 + 16))
                                              continue;
                                            v348.i64[0] = v959.i64[0];
                                            *(_QWORD *)v1018 = v960.i64[0];
                                            v6 = v978;
                                            v352 = v954.i32[0];
                                            if ((v961 & 1) != 0)
                                            {
                                              v7 = v975;
                                              v8 = v983;
                                              v5 = v979;
                                              if ((_DWORD)v957)
                                              {
                                                *(double *)&is_2d_affine = COERCE_DOUBLE(CA::Render::Timing::inverse_map_time(v955, (double *)v1018, v342));
                                                v348.i64[0] = v959.i64[0];
                                                v352 = v954.i32[0];
                                                v971 = *(double *)v1018;
                                              }
                                              v402 = *(float *)&v352 < 0.0;
                                              if (v971 <= *(double *)v348.i64)
                                                v402 = 0;
                                              if (*(float *)&v352 > 0.0)
                                                v402 = v971 < *(double *)v348.i64;
                                              if (v402)
                                                *(double *)v348.i64 = v971;
                                            }
                                            else
                                            {
                                              v7 = v975;
                                              v8 = v983;
                                              v5 = v979;
                                            }
LABEL_647:
                                            v403 = *(double *)(v5 + 32);
                                            v404 = *(float *)&v352 < 0.0;
                                            if (*(double *)v348.i64 <= v403)
                                              v404 = 0;
                                            if (*(float *)&v352 > 0.0)
                                              v404 = *(double *)v348.i64 < v403;
                                            if (v404)
                                            {
                                              v405 = *(_QWORD *)(v5 + 48) | 2;
                                              v406 = v403 == *(double *)v348.i64 || *(double *)v348.i64 == 0.0;
                                              v407 = *(_QWORD *)(v5 + 40) | 2;
                                              if (!v406)
                                                v407 = 2;
                                              *(_QWORD *)(v5 + 40) = v407;
                                              *(_QWORD *)(v5 + 48) = v405;
                                              *(_QWORD *)(v5 + 32) = v348.i64[0];
                                            }
                                            v362 = v998.i64[1] | v353;
                                            v33 = v982;
LABEL_659:
                                            v408 = v1006;
                                            v998.i64[1] = v362 | ((unint64_t)(v1006 & 7) << 53);
                                            if ((_DWORD)v973)
                                            {
                                              v1002 = vmulq_f64(v1002, v986);
                                              v409 = *((_QWORD *)v6 + 7);
                                              if (v409)
                                              {
                                                if ((*(_BYTE *)(*(_QWORD *)&v976.f64[0] + 13) & 9) != 0
                                                  && (is_2d_affine = CA::Mat4Impl::mat4_is_2d_affine(*((CA::Mat4Impl **)v6 + 7), v148), !(_DWORD)is_2d_affine)|| *(double *)(v409 + 24) != 0.0|| *(double *)(v409 + 56) != 0.0)
                                                {
                                                  v1006 = v408 & 0xFDFF;
                                                }
                                              }
                                            }
                                            if (LODWORD(v970[0]))
                                            {
                                              v410 = (unsigned int *)((char *)v33 + 8);
                                              do
                                              {
                                                v411 = __ldaxr(v410);
                                                v412 = v411 - 1;
                                              }
                                              while (__stlxr(v412, v410));
                                              if (!v412)
                                                *(double *)&is_2d_affine = COERCE_DOUBLE((*(uint64_t (**)(CA::Render::FlattenManager *))(*(_QWORD *)v33 + 16))(v33));
                                            }
                                            v413 = *((_QWORD *)v6 + 4);
                                            if ((*(_BYTE *)(v413 + 41) & 1) != 0)
                                            {
                                              *((_DWORD *)v6 + 29) = 0;
                                              v417 = v976.f64[0];
                                            }
                                            else
                                            {
                                              v414 = *(unsigned __int8 *)(v413 + 32);
                                              v415 = v414 | ((_DWORD)v414 << 8) | ((v414 | ((_DWORD)v414 << 8)) << 16);
                                              *((_DWORD *)v6 + 29) = v415;
                                              v416 = *(_QWORD *)(v5 + 96);
                                              v417 = v976.f64[0];
                                              if (v416)
                                              {
                                                v418 = (*(unsigned int *)(v416 + 196) | ((unint64_t)*(unsigned int *)(v416 + 196) << 24)) & 0xFF00FF00FF00FFLL;
                                                v415 = ((((v418 + v418 * v414) >> 8) & 0xFF00FF00FF00FFLL) >> 24) | ((v418 + v418 * v414) >> 8) & 0xFF00FF;
                                                *((_DWORD *)v6 + 29) = v415;
                                              }
                                              v419 = *((_QWORD *)v6 + 11);
                                              if (v419 && (*(_BYTE *)(*(_QWORD *)(v419 + 32) + 13) & 9) != 0)
                                              {
                                                v420 = *(_DWORD *)(v419 + 116);
                                                if (v415 == -1)
                                                {
                                                  v415 = v420;
                                                }
                                                else if (v420 != -1)
                                                {
                                                  v421 = vand_s8((int8x8_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vdup_n_s32(v415 >> 8), (int8x8_t)0xFF0000FF00), vadd_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v420), (uint32x2_t)0xFFFFFFF8FFFFFFF0), (int8x8_t)0xFF000000FFLL), (int32x2_t)0x100000001)), (int8x8_t)0x1FF0001FF0000);
                                                  v415 = (((v415 >> 8) & 0xFF0000)
                                                        + ((v415 >> 8) & 0xFF0000) * HIBYTE(v420)) & 0xFF000000 | ((v415 * v420 + v415) >> 8) | v421.i32[0] | v421.i32[1];
                                                }
                                                *((_DWORD *)v6 + 29) = v415;
                                              }
                                            }
                                            v422 = (CA::Render::LayerNode *)*((_QWORD *)v6 + 15);
                                            if (v422 && *((_QWORD *)v422 + 5))
                                            {
                                              v423 = (_QWORD *)*((_QWORD *)v6 + 17);
                                              if (!v423)
                                              {
                                                v423 = CA::Render::LayerNodeAllocator::alloc_node((CA::Render::LayerNodeAllocator *)is_2d_affine);
                                                *((_QWORD *)v6 + 17) = v423;
                                              }
                                              v423[11] = *((_QWORD *)v6 + 11);
                                              ++*(_DWORD *)(v5 + 132);
                                              memset(v1018, 0, 32);
                                              *(_DWORD *)&v1018[32] = 1065353216;
                                              std::vector<std::unordered_map<void *,CA::Render::LayerNode *>>::push_back[abi:nn180100]((uint64_t *)(v8 + 800), (uint64_t *)v1018);
                                              std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)v1018);
                                              CA::Render::Updater::prepare_layer0(v7, v423, *(_QWORD *)(*((_QWORD *)v6 + 15) + 40), v5, v998.i8[0] & 8);
                                              CA::Render::Update::pop_dependence_group((CA::Render::Update *)v8, v424);
                                              --*(_DWORD *)(v5 + 132);
                                              v423[11] = *((_QWORD *)v6 + 11);
                                            }
                                            else
                                            {
                                              v425 = (unsigned int *)*((_QWORD *)v6 + 17);
                                              if (v425)
                                              {
                                                *((_QWORD *)v425 + 11) = 0;
                                                v426 = v425 + 4;
                                                do
                                                {
                                                  v427 = __ldaxr(v426);
                                                  v428 = v427 - 1;
                                                }
                                                while (__stlxr(v428, v426));
                                                if (!v428)
                                                  CA::Render::LayerNode::delete_node((CA::Render::LayerNode *)v425, v422);
                                                *((_QWORD *)v6 + 17) = 0;
                                                v422 = (CA::Render::LayerNode *)*((_QWORD *)v6 + 15);
                                              }
                                              if (v422)
                                              {
                                                CA::Render::Update::release_object((uint64_t *)v8, v422);
                                                *((_QWORD *)v6 + 15) = 0;
                                              }
                                            }
                                            v429 = *(_BYTE ***)(*(_QWORD *)&v417 + 128);
                                            if (v429)
                                            {
                                              v430 = *v429;
                                              if (*v429)
                                              {
                                                memset(v1018, 0, 24);
                                                (*(void (**)(_BYTE *__return_ptr, _BYTE *, uint64_t, CA::Render::LayerNode *, double, double))(*(_QWORD *)v430 + 152))(v1018, v430, v8, v6, v991, v996);
                                                if ((*(_QWORD *)v1018 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
                                                  || v996 == 0.0)
                                                {
                                                  goto LABEL_721;
                                                }
                                                v998.i64[1] |= 0x704uLL;
                                                v431 = *(double *)(v8 + 72);
                                                if (vabdd_f64(*(double *)v1018, v431) <= 0.0001)
                                                {
                                                  v437 = *(double *)v1018 == v431 || v431 == 0.0;
                                                  v438 = *(_QWORD *)&v1018[8];
                                                  if (!v437)
                                                    v438 = 0;
                                                  v434 = v438 | *(_QWORD *)&v1018[16];
                                                  *(_QWORD *)&v1018[8] = v434;
                                                  *(_QWORD *)(v8 + 96) |= *(_QWORD *)&v1018[16];
                                                  v439 = *(double *)(v8 + 80);
                                                  if (v439 >= v431)
                                                  {
                                                    if (v431 != 0.0 && v439 > v431)
                                                      goto LABEL_720;
                                                    goto LABEL_719;
                                                  }
                                                }
                                                else
                                                {
                                                  v431 = (*(double *)v1018 - v991) / v996 + v431;
                                                  v432 = *(double *)v1018 == v431 || v431 == 0.0;
                                                  v433 = *(_QWORD *)&v1018[8];
                                                  if (!v432)
                                                    v433 = 0;
                                                  v434 = v433 | *(_QWORD *)&v1018[16];
                                                  *(_QWORD *)&v1018[8] = v434;
                                                  *(_QWORD *)(v8 + 96) |= *(_QWORD *)&v1018[16];
                                                  v435 = *(double *)(v8 + 80);
                                                  if (v435 >= v431)
                                                  {
                                                    if (v431 != 0.0 && v435 > v431)
                                                    {
LABEL_720:
                                                      *(_QWORD *)(v8 + 88) = v434;
                                                      *(double *)(v8 + 80) = v431;
                                                      goto LABEL_721;
                                                    }
LABEL_719:
                                                    v434 |= *(_QWORD *)(v8 + 88);
                                                    goto LABEL_720;
                                                  }
                                                }
LABEL_721:
                                                if (v430[12] == 8)
                                                  *((_WORD *)v980 + 2) = (*v980 | ((unint64_t)*((unsigned __int16 *)v980 + 2) << 32) | 0x10000000000) >> 32;
                                              }
                                            }
                                            v440 = v998.i64[1];
                                            if ((v998.i16[4] & 0x300) != 0)
                                              v998.i64[0] |= 7uLL;
                                            if ((v998.i16[4] & 0x100) != 0)
                                              v998.i64[0] |= 8uLL;
                                            if ((v998.i32[2] & 0x8000400) != 0)
                                              v998.i64[0] |= 0x10uLL;
                                            if ((v998.i64[1] & 0x100000000000) != 0)
                                              v998.i64[0] |= 0x100000000000uLL;
                                            if ((v998.i16[4] & 0x700) != 0)
                                              v998.i64[0] |= 0x10000000uLL;
                                            v441 = *(_DWORD *)(v5 + 132);
                                            v1005 = v441;
                                            v1001 = 0;
                                            v442 = *(uint64_t **)(*(_QWORD *)&v417 + 128);
                                            if (v442)
                                            {
                                              v443 = *v442;
                                              if (*v442)
                                              {
                                                if (*(_BYTE *)(v443 + 12) == 30)
                                                {
                                                  v998.i64[1] |= 0x4000000uLL;
                                                  v444 = *(_DWORD *)(v443 + 12);
                                                  if ((v444 & 0x8000) != 0)
                                                  {
                                                    v1005 = v441 + 1;
                                                    v998.i64[1] = v440 | 0x4000100;
                                                    *(_QWORD *)(v990[0] + 24) |= 0x20000000uLL;
                                                    v446 = CA::Render::Context::context_by_id((CA::Render::Context *)*(unsigned int *)(v443 + 16));
                                                    if (!v446)
                                                      goto LABEL_975;
LABEL_742:
                                                    CA::Render::Update::add_included_context((CA::Render::Update *)v8, (os_unfair_lock_s *)v446, 1);
                                                    *(double *)(v446 + 560) = v991;
                                                    if (CA::Render::Update::allowed_in_secure_update((CA::Render::Update *)v8, (CA::Render::Context *)v446, (const CA::Render::LayerHost *)v443)&& ((CA::Render::Update::allowed_to_include_context((CA::Render::Update *)v8, (CA::Render::Context *)v446) & 1) != 0|| CA_CFDictionaryGetBool(*(const __CFDictionary **)(v446 + 32), CFSTR("allowsRecursiveScreenCapture"))))
                                                    {
                                                      v447 = v1000;
                                                      v1000 = v446;
                                                      if (*(float *)(v446 + 308) > 1.0)
                                                        v998.i64[1] |= 0x800uLL;
                                                    }
                                                    else
                                                    {
                                                      v447 = v446;
                                                    }
                                                  }
                                                  else
                                                  {
                                                    if ((v444 & 0x400) == 0
                                                      || (v445 = *(_QWORD *)(v443 + 32)) != 0 && !*(_BYTE *)(v445 + 20)
                                                      || (*v980 & 4) != 0)
                                                    {
                                                      CA::Render::LayerHost::retain_hosted_context((CA::Render::LayerHost *)v1018, (CA::Render::Context *)v443, v7[3], (*((_QWORD *)v6 + 3) >> 26) & 1);
                                                      v446 = *(_QWORD *)v1018;
                                                      if (*(_QWORD *)v1018)
                                                        goto LABEL_742;
                                                    }
LABEL_975:
                                                    v447 = 0;
                                                  }
                                                  if ((*(_BYTE *)(v443 + 13) & 1) != 0)
                                                    *((_QWORD *)v6 + 3) |= 0x800000uLL;
                                                  if (v447)
                                                  {
                                                    v602 = (unsigned int *)(v447 + 8);
                                                    do
                                                    {
                                                      v603 = __ldaxr(v602);
                                                      v604 = v603 - 1;
                                                    }
                                                    while (__stlxr(v604, v602));
                                                    if (!v604)
                                                      (*(void (**)(unint64_t))(*(_QWORD *)v447 + 16))(v447);
                                                  }
                                                }
                                              }
                                            }
                                            v993 = INFINITY;
                                            v994 = 0;
                                            v995 = 0;
                                            if (v991 < 0.0)
                                              *((_QWORD *)v6 + 11) = 0;
                                            v605 = CA::Render::Update::allowed_in_update((CA::Render::Update *)v8, (CA::Render::Context *)v7[3], *(const CA::Render::Layer **)&v417);
                                            v609 = v974;
                                            if (!v605)
                                              *((_QWORD *)v6 + 11) = 0;
                                            if (!byte_1ECDC6AA0
                                              && (*v980 & 4) == 0
                                              && CA::Render::Updater::layer_may_be_hidden_culled(*(CA::Render::Updater **)&v417, v606))
                                            {
                                              v721 = v998.i64[0];
                                              if ((v998.i64[0] & 0x160000000000) == 0)
                                              {
                                                *((_QWORD *)v6 + 11) = 0;
                                                v998.i64[0] = v721 & 0xFFFFF9FFFFFFFFD9;
                                                v998.i64[1] = 0x200000000000;
                                              }
                                            }
                                            v610 = *(_QWORD *)(v8 + 344);
                                            if (v610
                                              && ((*(uint64_t (**)(uint64_t, _QWORD, CA::Render::LayerNode *, float64_t))(*(_QWORD *)v610 + 16))(v610, v7[3], v6, COERCE_FLOAT64_T(*(_QWORD *)&v417)) & 1) == 0&& (*v980 & 4) != 0)
                                            {
                                              *((_QWORD *)v6 + 11) = 0;
                                            }
                                            v611 = v998.i64[0];
                                            if (v972)
                                            {
                                              v611 = v998.i64[0] & 0xFFFFFFFFFFFFFFEFLL;
                                              *(_OWORD *)&v998 &= __PAIR128__(-17, -17);
                                            }
                                            if (*((_QWORD *)v6 + 11) != *(_QWORD *)v5)
                                              goto LABEL_1159;
                                            v982 = (CA::Render::FlattenManager *)v611;
                                            v612 = *((_QWORD *)v6 + 12);
                                            *(_QWORD *)&v1018[8] = *((_QWORD *)v6 + 13);
                                            *(_QWORD *)v1018 = v612;
                                            **(_QWORD **)&v1018[8] = v1018;
                                            *(_QWORD *)(*((_QWORD *)v6 + 12) + 8) = v1018;
                                            *((_QWORD *)v6 + 12) = (char *)v6 + 96;
                                            *((_QWORD *)v6 + 13) = (char *)v6 + 96;
                                            v613 = *(_QWORD *)&v1018[8];
                                            while ((_BYTE *)v613 != v1018)
                                            {
                                              v614 = (CA::Render::LayerNode *)v613;
                                              v615 = (unsigned int *)(v613 + 16);
                                              v616 = *(_DWORD *)(v613 + 16);
                                              v613 = *(_QWORD *)(v613 + 8);
                                              if (v616 < 2)
                                              {
                                                v617 = *(_QWORD *)v614;
                                                *(_QWORD *)(v617 + 8) = v613;
                                                *(_QWORD *)v613 = v617;
                                                *(_QWORD *)v614 = v614;
                                                *((_QWORD *)v614 + 1) = v614;
                                                *((_QWORD *)v614 + 11) = 0;
                                                do
                                                {
                                                  v618 = __ldaxr(v615);
                                                  v619 = v618 - 1;
                                                }
                                                while (__stlxr(v619, v615));
                                                if (!v619)
                                                  CA::Render::LayerNode::delete_node(v614, v606);
                                              }
                                              else
                                              {
                                                *((_QWORD *)v614 + 3) |= 0x800uLL;
                                              }
                                            }
                                            v620 = v1000;
                                            if (v1000)
                                            {
                                              if (BYTE9(xmmword_1ECDC6A90))
                                              {
                                                v723 = (unsigned int *)(v1000 + 228);
                                                if (!atomic_load((unsigned int *)(v1000 + 228)))
                                                {
                                                  if (*(_DWORD *)(v1000 + 252))
                                                    v725 = 0;
                                                  else
                                                    v725 = getpid();
                                                  while (!__ldaxr(v723))
                                                  {
                                                    if (!__stlxr(v725, v723))
                                                      goto LABEL_1609;
                                                  }
                                                  __clrex();
LABEL_1609:
                                                  v6 = v978;
                                                  v8 = v983;
                                                  v62 = v981;
                                                  v417 = v976.f64[0];
                                                }
                                                kdebug_trace();
                                                v620 = v1000;
                                              }
                                              pthread_mutex_lock((pthread_mutex_t *)(v620 + 72));
                                              v621 = *(CA::Shape **)(v1000 + 568);
                                              if (v621)
                                              {
                                                CA::Shape::unref(v621);
                                                *(_QWORD *)(v1000 + 568) = 0;
                                              }
                                            }
                                            v975 = v7;
                                            if (v62 && (*((_QWORD *)v62 + 7) || *((_QWORD *)v62 + 8)))
                                              v998.i64[1] |= 0x20000000000uLL;
                                            v622 = *(_QWORD *)(*(_QWORD *)&v417 + 144);
                                            if (v622)
                                            {
                                              v623 = *(_QWORD *)(v622 + 56);
                                              if (v623)
                                              {
                                                v624 = (unsigned int *)((char *)v6 + 16);
                                                while (1)
                                                {
                                                  v625 = *(_QWORD *)(v8 + 808);
                                                  v626 = (_QWORD *)(v625 - 40);
                                                  if (!std::__hash_table<std::__hash_value_type<CA::Render::Object *,x_link_struct>,std::__unordered_map_hasher<CA::Render::Object *,std::__hash_value_type<CA::Render::Object *,x_link_struct>,std::hash<CA::Render::Object *>,std::equal_to<CA::Render::Object *>,true>,std::__unordered_map_equal<CA::Render::Object *,std::__hash_value_type<CA::Render::Object *,x_link_struct>,std::equal_to<CA::Render::Object *>,std::hash<CA::Render::Object *>,true>,std::allocator<std::__hash_value_type<CA::Render::Object *,x_link_struct>>>::find<CA::Render::Object *>((_QWORD *)(v625 - 40), v623))break;
LABEL_1094:
                                                  v623 = *(_QWORD *)(v623 + 32);
                                                  if (!v623)
                                                    goto LABEL_1105;
                                                }
                                                if (v6)
                                                {
                                                  do
                                                    v627 = __ldaxr(v624);
                                                  while (__stlxr(v627 + 1, v624));
                                                }
                                                v628 = 0x9DDFEA08EB382D69
                                                     * (((8 * v623) + 8) ^ HIDWORD(v623));
                                                v629 = 0x9DDFEA08EB382D69 * (HIDWORD(v623) ^ (v628 >> 47) ^ v628);
                                                v630 = 0x9DDFEA08EB382D69 * (v629 ^ (v629 >> 47));
                                                v631 = *(_QWORD *)(v625 - 32);
                                                if (v631)
                                                {
                                                  v632 = (uint8x8_t)vcnt_s8((int8x8_t)v631);
                                                  v632.i16[0] = vaddlv_u8(v632);
                                                  if (v632.u32[0] > 1uLL)
                                                  {
                                                    v633 = 0x9DDFEA08EB382D69 * (v629 ^ (v629 >> 47));
                                                    if (v630 >= v631)
                                                      v633 = v630 % v631;
                                                  }
                                                  else
                                                  {
                                                    v633 = v630 & (v631 - 1);
                                                  }
                                                  v634 = *(_QWORD **)(*v626 + 8 * v633);
                                                  if (v634)
                                                  {
                                                    v635 = (_QWORD *)*v634;
                                                    if (v635)
                                                    {
                                                      v8 = v983;
                                                      do
                                                      {
                                                        v636 = v635[1];
                                                        if (v636 == v630)
                                                        {
                                                          if (v635[2] == v623)
                                                            goto LABEL_1094;
                                                        }
                                                        else
                                                        {
                                                          if (v632.u32[0] > 1uLL)
                                                          {
                                                            if (v636 >= v631)
                                                              v636 %= v631;
                                                          }
                                                          else
                                                          {
                                                            v636 &= v631 - 1;
                                                          }
                                                          if (v636 != v633)
                                                            break;
                                                        }
                                                        v635 = (_QWORD *)*v635;
                                                      }
                                                      while (v635);
                                                    }
                                                  }
                                                }
                                                else
                                                {
                                                  v633 = 0;
                                                }
                                                v637 = operator new(0x20uLL);
                                                *v637 = 0;
                                                v637[1] = v630;
                                                v637[2] = v623;
                                                v637[3] = v6;
                                                v608.n128_f32[0] = (float)(unint64_t)(*(_QWORD *)(v625 - 16) + 1);
                                                v638 = *(float *)(v625 - 8);
                                                if (v631 && (float)(v638 * (float)v631) >= v608.n128_f32[0])
                                                {
LABEL_1084:
                                                  v654 = (_QWORD *)*v626;
                                                  v655 = *(_QWORD **)(*v626 + 8 * v633);
                                                  if (v655)
                                                  {
                                                    *v637 = *v655;
                                                  }
                                                  else
                                                  {
                                                    *v637 = *(_QWORD *)(v625 - 24);
                                                    *(_QWORD *)(v625 - 24) = v637;
                                                    v654[v633] = v625 - 24;
                                                    if (!*v637)
                                                    {
LABEL_1093:
                                                      ++*(_QWORD *)(v625 - 16);
                                                      v8 = v983;
                                                      goto LABEL_1094;
                                                    }
                                                    v656 = *(_QWORD *)(*v637 + 8);
                                                    if ((v631 & (v631 - 1)) != 0)
                                                    {
                                                      if (v656 >= v631)
                                                        v656 %= v631;
                                                    }
                                                    else
                                                    {
                                                      v656 &= v631 - 1;
                                                    }
                                                    v655 = (_QWORD *)(*v626 + 8 * v656);
                                                  }
                                                  *v655 = v637;
                                                  goto LABEL_1093;
                                                }
                                                v639 = (v631 & (v631 - 1)) != 0;
                                                if (v631 < 3)
                                                  v639 = 1;
                                                v640 = v639 | (2 * v631);
                                                v641 = vcvtps_u32_f32(v608.n128_f32[0] / v638);
                                                if (v640 <= v641)
                                                  prime = (int8x8_t)v641;
                                                else
                                                  prime = (int8x8_t)v640;
                                                if (*(_QWORD *)&prime == 1)
                                                {
                                                  prime = (int8x8_t)2;
                                                }
                                                else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
                                                {
                                                  prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
                                                }
                                                v631 = *(_QWORD *)(v625 - 32);
                                                if (*(_QWORD *)&prime > v631)
                                                {
LABEL_1049:
                                                  if (*(_QWORD *)&prime >> 61)
                                                    std::__throw_bad_array_new_length[abi:nn180100]();
                                                  v643 = operator new(8 * *(_QWORD *)&prime);
                                                  v644 = (_QWORD *)*v626;
                                                  *v626 = v643;
                                                  if (v644)
                                                    operator delete(v644);
                                                  v645 = 0;
                                                  *(int8x8_t *)(v625 - 32) = prime;
                                                  do
                                                    *(_QWORD *)(*v626 + 8 * v645++) = 0;
                                                  while (*(_QWORD *)&prime != v645);
                                                  v646 = *(_QWORD **)(v625 - 24);
                                                  if (v646)
                                                  {
                                                    v647 = v646[1];
                                                    v648 = (uint8x8_t)vcnt_s8(prime);
                                                    v648.i16[0] = vaddlv_u8(v648);
                                                    if (v648.u32[0] > 1uLL)
                                                    {
                                                      if (v647 >= *(_QWORD *)&prime)
                                                        v647 %= *(_QWORD *)&prime;
                                                    }
                                                    else
                                                    {
                                                      v647 &= *(_QWORD *)&prime - 1;
                                                    }
                                                    *(_QWORD *)(*v626 + 8 * v647) = v625 - 24;
                                                    v652 = (_QWORD *)*v646;
                                                    if (*v646)
                                                    {
                                                      do
                                                      {
                                                        v653 = v652[1];
                                                        if (v648.u32[0] > 1uLL)
                                                        {
                                                          if (v653 >= *(_QWORD *)&prime)
                                                            v653 %= *(_QWORD *)&prime;
                                                        }
                                                        else
                                                        {
                                                          v653 &= *(_QWORD *)&prime - 1;
                                                        }
                                                        if (v653 != v647)
                                                        {
                                                          if (!*(_QWORD *)(*v626 + 8 * v653))
                                                          {
                                                            *(_QWORD *)(*v626 + 8 * v653) = v646;
                                                            goto LABEL_1074;
                                                          }
                                                          *v646 = *v652;
                                                          *v652 = **(_QWORD **)(*v626 + 8 * v653);
                                                          **(_QWORD **)(*v626 + 8 * v653) = v652;
                                                          v652 = v646;
                                                        }
                                                        v653 = v647;
LABEL_1074:
                                                        v646 = v652;
                                                        v652 = (_QWORD *)*v652;
                                                        v647 = v653;
                                                      }
                                                      while (v652);
                                                    }
                                                  }
                                                  v631 = (unint64_t)prime;
                                                  goto LABEL_1078;
                                                }
                                                if (*(_QWORD *)&prime < v631)
                                                {
                                                  v649 = vcvtps_u32_f32((float)*(unint64_t *)(v625 - 16)/ *(float *)(v625 - 8));
                                                  if (v631 < 3
                                                    || (v650 = (uint8x8_t)vcnt_s8((int8x8_t)v631),
                                                        v650.i16[0] = vaddlv_u8(v650),
                                                        v650.u32[0] > 1uLL))
                                                  {
                                                    v649 = std::__next_prime(v649);
                                                  }
                                                  else
                                                  {
                                                    v651 = 1 << -(char)__clz(v649 - 1);
                                                    if (v649 >= 2)
                                                      v649 = v651;
                                                  }
                                                  if (*(_QWORD *)&prime <= v649)
                                                    prime = (int8x8_t)v649;
                                                  if (*(_QWORD *)&prime < v631)
                                                  {
                                                    if (!*(_QWORD *)&prime)
                                                    {
                                                      v657 = (_QWORD *)*v626;
                                                      *v626 = 0;
                                                      v6 = v978;
                                                      if (v657)
                                                        operator delete(v657);
                                                      v631 = 0;
                                                      *(_QWORD *)(v625 - 32) = 0;
                                                      goto LABEL_1079;
                                                    }
                                                    goto LABEL_1049;
                                                  }
                                                  v631 = *(_QWORD *)(v625 - 32);
                                                }
LABEL_1078:
                                                v6 = v978;
LABEL_1079:
                                                if ((v631 & (v631 - 1)) != 0)
                                                {
                                                  if (v630 >= v631)
                                                    v633 = v630 % v631;
                                                  else
                                                    v633 = v630;
                                                }
                                                else
                                                {
                                                  v633 = (v631 - 1) & v630;
                                                }
                                                goto LABEL_1084;
                                              }
                                            }
LABEL_1105:
                                            v7 = v975;
                                            v658 = v976.f64[0];
                                            v659 = *(uint64_t **)(*(_QWORD *)&v976.f64[0] + 128);
                                            if (v659)
                                            {
                                              v607 = *v659;
                                              if (*v659)
                                              {
                                                if (*(_BYTE *)(v607 + 12) == 40)
                                                  CA::Render::Updater::prepare_portal(v975, (uint64_t)v990, (uint64_t)v6, v607);
                                              }
                                            }
                                            v5 = v979;
                                            v62 = v981;
                                            if ((v972 & 1) != 0)
                                              goto LABEL_1110;
                                            if (*(_QWORD *)(*(_QWORD *)&v658 + 104) | v1000)
                                            {
                                              if (v997 > 0xC0)
                                                goto LABEL_1110;
                                              v661 = *(_QWORD *)(v990[0] + 32);
                                              if (!v1001)
                                              {
                                                v719 = *(uint64_t **)(v661 + 128);
                                                if (v719)
                                                {
                                                  v720 = *v719;
                                                  if (*v719)
                                                  {
                                                    if (*(_BYTE *)(v720 + 12) == 44)
                                                    {
                                                      CA::Render::Updater::prepare_replicator((uint64_t)v7, (uint64_t)v990, v720, (const double *)v607);
                                                      goto LABEL_1110;
                                                    }
                                                  }
                                                }
                                              }
                                              v26 = *(unsigned int **)(v661 + 104);
                                              if ((*(_BYTE *)(v661 + 13) & 0x20) != 0)
                                              {
                                                if (v26)
                                                  CA::Render::Updater::prepare_sublayer0(v7, (uint64_t)v990, (uint64_t)v26);
                                              }
                                              else if (v26)
                                              {
                                                v662 = v26[4];
                                                if ((_DWORD)v662)
                                                {
                                                  v663 = (unsigned int **)(v26 + 6);
                                                  do
                                                  {
                                                    v26 = *v663;
                                                    if (*v663)
                                                      CA::Render::Updater::prepare_sublayer0(v7, (uint64_t)v990, (uint64_t)v26);
                                                    ++v663;
                                                    --v662;
                                                  }
                                                  while (v662);
                                                }
                                              }
                                              if (v1000)
                                              {
                                                v664 = CA::Render::Context::root_layer_handle((CA::Render::Context *)v1000);
                                                if (v664)
                                                {
                                                  v26 = *(unsigned int **)(v664 + 16);
                                                  if (v26)
                                                  {
                                                    v665 = v7[3];
                                                    v7[3] = v1000;
                                                    CA::Render::Updater::prepare_sublayer0(v7, (uint64_t)v990, (uint64_t)v26);
                                                    v7[3] = v665;
                                                  }
                                                }
                                                if ((*(_DWORD *)(*v7 + 1064) & 4) == 0)
                                                {
                                                  v666 = (CA::Shape **)CA::Render::Context::copy_dirty_shape((CA::Render::Context *)v1000, v606);
                                                  if (v666)
                                                  {
                                                    v667 = (CA::Shape *)v666;
                                                    CA::Render::Context::invalidate((CA::Render::Context *)v7[2], v666, (const CA::Shape *)v26);
                                                    CA::Shape::unref(v667);
                                                    v668 = v1000;
                                                    v669 = *(CA::Shape **)(v1000 + 576);
                                                    if (v669)
                                                      CA::Shape::unref(v669);
                                                    *(_QWORD *)(v668 + 576) = 1;
                                                  }
                                                }
LABEL_1110:
                                                if (v1000)
                                                {
                                                  pthread_mutex_unlock((pthread_mutex_t *)(v1000 + 72));
                                                  if (BYTE9(xmmword_1ECDC6A90))
                                                  {
                                                    v740 = (unsigned int *)(v1000 + 228);
                                                    if (!atomic_load((unsigned int *)(v1000 + 228)))
                                                    {
                                                      if (*(_DWORD *)(v1000 + 252))
                                                        v742 = 0;
                                                      else
                                                        v742 = getpid();
                                                      while (!__ldaxr(v740))
                                                      {
                                                        if (!__stlxr(v742, v740))
                                                          goto LABEL_1616;
                                                      }
                                                      __clrex();
                                                    }
LABEL_1616:
                                                    kdebug_trace();
                                                    v6 = v978;
                                                    v5 = v979;
                                                    v7 = v975;
                                                    v658 = v976.f64[0];
                                                    v8 = v983;
                                                    v62 = v981;
                                                  }
                                                  v660 = *(_QWORD *)(v8 + 344);
                                                  if (v660)
                                                    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v660 + 40))(v660, v1000);
                                                }
                                              }
                                            }
                                            v670 = *(unsigned int **)&v1018[8];
                                            while (v670 != (unsigned int *)v1018)
                                            {
                                              v671 = v670;
                                              v670 = (unsigned int *)*((_QWORD *)v670 + 1);
                                              *(_QWORD *)v671 = v671;
                                              *((_QWORD *)v671 + 1) = v671;
                                              *((_QWORD *)v671 + 3) &= ~0x800uLL;
                                              *((_QWORD *)v671 + 11) = 0;
                                              v672 = v671 + 4;
                                              do
                                              {
                                                v673 = __ldaxr(v672);
                                                v674 = v673 - 1;
                                              }
                                              while (__stlxr(v674, v672));
                                              if (!v674)
                                                CA::Render::LayerNode::delete_node((CA::Render::LayerNode *)v671, v606);
                                            }
                                            if (*((_QWORD *)v6 + 16) || *(_QWORD *)(*(_QWORD *)&v658 + 112))
                                            {
                                              v675 = v990[0];
                                              v676 = *(_QWORD *)(v990[0] + 128);
                                              if (v676)
                                              {
                                                *(_QWORD *)(v676 + 24) |= 0x800uLL;
                                                *(_QWORD *)(v675 + 128) = 0;
                                              }
                                              v677 = *(_QWORD *)(*(_QWORD *)(v675 + 32) + 112);
                                              if (v677)
                                              {
                                                LOBYTE(v1007.f64[0]) = 0;
                                                v678 = CA::Render::Updater::layer_node(v677, (CA::Render::LayerNode *)v7, (uint64_t)v990, (char *)&v1007);
                                                v678[11] = v675;
                                                CA::Render::Updater::prepare_layer0(v7, v678, v677, v990, v998.i8[0] & 8);
                                                v678[11] = v675;
                                                *(_QWORD *)(v675 + 128) = v678;
                                                if (!LOBYTE(v1007.f64[0]))
                                                {
                                                  v679 = (unsigned int *)(v678 + 2);
                                                  do
                                                    v680 = __ldaxr(v679);
                                                  while (__stlxr(v680 + 1, v679));
                                                }
                                              }
                                              v62 = v981;
                                              if (v676)
                                              {
                                                if ((*(_BYTE *)(v676 + 25) & 8) != 0)
                                                {
                                                  *(_QWORD *)(v676 + 88) = 0;
                                                  v681 = (unsigned int *)(v676 + 16);
                                                  do
                                                  {
                                                    v682 = __ldaxr(v681);
                                                    v683 = v682 - 1;
                                                  }
                                                  while (__stlxr(v683, v681));
                                                  if (!v683)
                                                    CA::Render::LayerNode::delete_node((CA::Render::LayerNode *)v676, v606);
                                                }
                                              }
                                            }
                                            if (v62)
                                              v998.i64[1] |= *((_QWORD *)v62 + 12) & 0x1000000000000000;
                                            v609 = v974;
                                            LOBYTE(v611) = (_BYTE)v982;
LABEL_1159:
                                            v608.n128_f64[0] = v993;
                                            if (v993 < INFINITY)
                                            {
                                              if ((v1006 & 0x80) != 0)
                                              {
                                                *(_WORD *)(v5 + 136) |= 0x80u;
                                              }
                                              else if (v609)
                                              {
                                                CA::Render::Timing::inverse_map_time(v609, &v993, *(double *)(v5 + 16));
                                                v608.n128_f64[0] = v993;
                                              }
                                              v684 = v994;
                                              *(_QWORD *)(v5 + 48) |= v995;
                                              v685 = *(double *)(v5 + 32);
                                              if (v685 >= v608.n128_f64[0])
                                              {
                                                v686 = v685 <= v608.n128_f64[0] || v608.n128_f64[0] == 0.0;
                                                v687 = *(_QWORD *)(v5 + 40);
                                                if (!v686)
                                                  v687 = 0;
                                                *(_QWORD *)(v5 + 40) = v687 | v684;
                                                *(_QWORD *)(v5 + 32) = v608.n128_u64[0];
                                              }
                                            }
                                            if ((v1006 & 0x40) != 0)
                                              *((_QWORD *)v6 + 3) |= 0x20uLL;
                                            if (!v977 && (*((_BYTE *)v6 + 24) & 0x20) != 0)
                                              CA::Render::LayerNode::depth_sort_sublayers(v6);
                                            v688 = v998.i64[0];
                                            if ((v998.i8[0] & 8) != 0)
                                            {
                                              if (*((_QWORD *)v6 + 7))
                                              {
                                                v690 = *((_QWORD *)v6 + 3) | 4;
                                              }
                                              else
                                              {
                                                v608.n128_u64[0] = *((_QWORD *)v6 + 10);
                                                *((_QWORD *)v6 + 30) = v608.n128_u64[0];
                                                *((_QWORD *)v6 + 31) = v608.n128_u64[0];
                                                v690 = *((_QWORD *)v6 + 3) & 0xFFFFFFFFFFFFFFF3;
                                              }
                                              *((_QWORD *)v6 + 3) = v690;
                                              v689 = v998.i64[1];
                                              if ((v688 & 0x28000) != 0)
                                              {
                                                v689 = v998.i64[1] & 0xFFFFFFFFFFF97FFFLL | 0x40000;
                                                v998.i64[1] = v689;
                                                if ((v688 & 0x8000) != 0)
                                                {
                                                  v688 |= 3uLL;
                                                  v998.i64[0] = v688;
                                                }
                                              }
                                            }
                                            else
                                            {
                                              v689 = v998.i64[1];
                                              if ((v998.i64[0] & 0x28000) != 0)
                                              {
                                                v689 = v998.i64[1] | v998.i16[0] & 0x8000;
                                                v998.i64[1] = v689;
                                                if (v998.i16[0] < 0 && (v611 & 0x10) != 0)
                                                {
                                                  v689 |= 0x10000uLL;
                                                  v998.i64[1] = v689;
                                                }
                                              }
                                            }
                                            if ((v688 & 0x8000) != 0)
                                            {
                                              if (v62)
                                              {
                                                if ((v689 & 0x8000) != 0)
                                                {
                                                  v694 = *((_QWORD *)v62 + 3);
                                                  if (v694)
                                                  {
                                                    v695 = v990[0];
                                                    v696 = *(CA::Render::LayerNode **)(v694 + 384);
                                                    if (v696 != (CA::Render::LayerNode *)v990[0])
                                                    {
                                                      if (v696)
                                                      {
                                                        v697 = (unsigned int *)((char *)v696 + 16);
                                                        do
                                                        {
                                                          v698 = __ldaxr(v697);
                                                          v699 = v698 - 1;
                                                        }
                                                        while (__stlxr(v699, v697));
                                                        if (!v699)
                                                          CA::Render::LayerNode::delete_node(v696, v606);
                                                      }
                                                      if (v695)
                                                      {
                                                        v700 = (unsigned int *)(v695 + 16);
                                                        do
                                                          v701 = __ldaxr(v700);
                                                        while (__stlxr(v701 + 1, v700));
                                                      }
                                                      *(_QWORD *)(v694 + 384) = v695;
                                                      v689 = v998.i64[1];
                                                      v688 = v998.i64[0];
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                            if ((v689 & 0x40000) != 0)
                                            {
                                              *(_QWORD *)(v979 + 72) |= 0x40000uLL;
                                              v689 &= 0xFFFFFFFFFFF87FFFLL;
                                              v688 |= 4uLL;
                                              v998.i64[1] = v689;
                                              v998.i64[0] = v688;
                                            }
                                            if (v62 && (v688 & 0x10) != 0)
                                              *((_DWORD *)v62 + 19) = *((_DWORD *)v7 + 2);
                                            if ((*((_BYTE *)v6 + 24) & 0x40) != 0)
                                              v691 = 0xEF1FC9FFF1F8007FLL;
                                            else
                                              v691 = 0xEF1FC9FFF1FF807FLL;
                                            v692 = *(_QWORD *)(*(_QWORD *)&v976.f64[0] + 96);
                                            if (v692)
                                            {
                                              if (*(_BYTE *)(v692 + 12) == 25)
                                              {
                                                v693 = (*(uint64_t (**)(_QWORD, __n128))(*(_QWORD *)v692 + 80))(*(_QWORD *)(*(_QWORD *)&v976.f64[0] + 96), v608);
                                                if (!v693)
                                                  v693 = *(_QWORD *)(v692 + 32);
                                              }
                                              else
                                              {
                                                v693 = *(_QWORD *)(*(_QWORD *)&v976.f64[0] + 96);
                                              }
                                            }
                                            else
                                            {
                                              v693 = 0;
                                            }
                                            v702 = (unsigned int *)*((_QWORD *)v6 + 6);
                                            v31 = v981;
                                            if (v702 != (unsigned int *)v693)
                                            {
                                              if (v702)
                                              {
                                                v703 = v702 + 2;
                                                do
                                                {
                                                  v704 = __ldaxr(v703);
                                                  v705 = v704 - 1;
                                                }
                                                while (__stlxr(v705, v703));
                                                if (!v705)
                                                  (*(void (**)(unsigned int *))(*(_QWORD *)v702 + 16))(v702);
                                              }
                                              if (v693)
                                              {
                                                v706 = (unsigned int *)(v693 + 8);
                                                do
                                                  v707 = __ldaxr(v706);
                                                while (__stlxr(v707 + 1, v706));
                                                if (!v707)
                                                {
                                                  v693 = 0;
                                                  do
                                                    v722 = __ldaxr(v706);
                                                  while (__stlxr(v722 - 1, v706));
                                                }
                                              }
                                              *((_QWORD *)v6 + 6) = v693;
                                            }
                                            v708 = v691 & v688;
                                            v5 = v979;
                                            if ((v968 & 0x100000000000) == 0)
                                            {
                                              *(_OWORD *)(v979 + 16) = v964;
                                              *(_DWORD *)(v5 + 56) = v963;
                                              *(_QWORD *)(v5 + 80) = v965;
                                            }
                                            v55 = v708 | v689;
                                            *(_WORD *)(v5 + 136) |= v1006 & 0x400;
                                            v709 = v1000;
                                            if (v1000)
                                            {
                                              v710 = (unsigned int *)(v1000 + 8);
                                              do
                                              {
                                                v711 = __ldaxr(v710);
                                                v712 = v711 - 1;
                                              }
                                              while (__stlxr(v712, v710));
                                              if (!v712)
                                                (*(void (**)(unint64_t))(*(_QWORD *)v709 + 16))(v709);
                                            }
                                            goto LABEL_1233;
                                          }
                                          v401 = v392 > v345;
                                          if (v346 <= 0.0)
                                            v401 = v392 < v345;
                                          if (v401)
                                            goto LABEL_620;
                                        }
                                        break;
                                      }
                                      if (v386 <= v344)
                                      {
                                        if (v387 <= v344)
                                          goto LABEL_633;
                                        *(double *)&is_2d_affine = COERCE_DOUBLE((*(uint64_t (**)(uint64_t))(*(_QWORD *)v383 + 104))(v383));
                                        if ((is_2d_affine & 1) == 0)
                                          goto LABEL_633;
                                      }
                                      else if (!v385 || (*(_DWORD *)(v385 + 12) & 0x400) == 0)
                                      {
                                        goto LABEL_633;
                                      }
                                      v353 |= 0x1000uLL;
                                      goto LABEL_633;
                                    }
                                    v320 = v976;
                                    v321 = v967;
                                  }
                                }
                                else
                                {
                                  v454 = 0;
                                }
                              }
                              else
                              {
                                v454 = 0;
                                v452 = 0;
                              }
                              v319 &= ~0x80u;
                              *(_DWORD *)&v1018[168] = v319;
                              goto LABEL_769;
                            }
                          }
                          v322 = 8;
LABEL_471:
                          v1018[172] = v322;
                          *(_DWORD *)&v1018[168] = 2048;
                        }
                        v323 = 5;
                        goto LABEL_473;
                      }
LABEL_1584:
                      LODWORD(v888) = 1123024896;
                      LODWORD(v889) = 1123024896;
                      LODWORD(v890) = 1123024896;
                      objc_msgSend(v886, "addFrameRateRange:", v888, v889, v890, v953.i64[0]);
                      goto LABEL_1585;
                    }
                  }
                  else
                  {
LABEL_1505:
                    v865 = v998.i64[1] | 0x400;
                    v998.i64[1] |= 0x400uLL;
                    if ((v998.i16[0] & 0x8000) == 0)
                    {
                      v860 = v998.i64[0] | 1;
                      goto LABEL_1496;
                    }
                  }
                  v998.i64[1] = v865 | 0x10000;
                  goto LABEL_1512;
                }
                *(_QWORD *)(v270 + 312) = *(_QWORD *)(v8 + 136);
                v274 = atomic_load((unint64_t *)(v270 + 8));
                *(_QWORD *)&v966.f64[0] = v274;
                if ((v274 & 0x40000) != 0)
                  v267 = *(double *)(v8 + 72);
                v275 = (unsigned int *)(v270 + 248);
                do
                  v276 = __ldaxr(v275);
                while (__stlxr(v276 | 0x80000000, v275));
                __dmb(0xBu);
                v277 = *(_DWORD *)(v270 + 248) & 1;
                v278 = (double *)(v270 + 48 * (*(_DWORD *)(v270 + 248) & 1));
                v279 = v278[19];
                v280 = v278[20];
                v281 = v278[21];
                v282 = v281 + (v267 - v279) * v280;
                if (v278[22] >= v282)
                  v283 = v281 + (v267 - v279) * v280;
                else
                  v283 = v278[22];
                v284 = *((_QWORD *)v278 + 22);
                v285 = v278[23];
                v286 = v278[24];
                __dmb(0xBu);
                *(_DWORD *)(v270 + 248) = v277;
                v273 = 0.0;
                if (v283 < 0.0)
                  v283 = 0.0;
                if ((v284 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
                  v282 = v283;
                if (v286 < v282)
                  v282 = v286;
                if (v285 <= v282)
                  v287 = v282;
                else
                  v287 = v285;
                v288 = v280 * v268;
                *(_DWORD *)(v48 + 184) = *(_DWORD *)(v8 + 248);
                *(double *)(v48 + 120) = v287;
                *(float *)(v48 + 128) = v288;
                *(_DWORD *)(v48 + 12) &= 0xFFFA08FF;
                if (!v153 || v287 < 0.0)
                {
                  CA::Render::ImageQueue::flush_cache((CA::Render::ImageQueue *)v48);
                  goto LABEL_1434;
                }
                v959.i64[0] = (uint64_t)v269;
                v989 = 0;
                LODWORD(v961) = CAShmemImageQueueCopyImageInfo((uint64_t *)v48, *(unsigned int *)(v48 + 172), v270, v8, (uint64_t)v1018, 1, &v989, v985, v287, v288);
                v289 = 0;
                if ((LOWORD(v966.f64[0]) & 0x800) == 0)
                  v289 = *(double *)&v1018[56] == *(double *)(v48 + 40)
                      && *(_QWORD *)&v1018[48] == *(_QWORD *)(v48 + 48);
                v960.i32[0] = 16 * v1018[108];
                v480 = CA::Render::ImageQueue::resolved_display_attributes((CA::Render::ImageQueue *)v48, (const CA::Render::Update *)v8);
                v482 = *(_QWORD *)(v48 + 80);
                v958 = v480;
                if (v482)
                {
                  v483 = v480;
                  v484 = (CA::CAHDRProcessor *)CA::Render::ImageQueue::hdr_processor((CA::Render::ImageQueue *)v48, v481);
                  v289 &= ~CA::CAHDRProcessor::should_invalidate_tonemapping(v484, *(float *)(v48 + 88), *(float *)(v483 + 20), *(float *)(v48 + 92), *(float *)(v483 + 12));
                }
                v485 = *(_BYTE **)(v48 + 24);
                v962 = (CA::Render::Texture **)(v48 + 24);
                if (!v485)
                  goto LABEL_819;
                if (v485[12] == 51)
                {
                  if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v485 + 280))(v485))
                  {
                    v486 = (CA::CAHDRProcessor *)CA::Render::ImageQueue::hdr_processor((CA::Render::ImageQueue *)v48, v481);
                    v487 = *(float *)(v958 + 20);
                    v488 = *(float *)(v958 + 12);
                    if (CA::CAHDRProcessor::should_invalidate_tonemapping(v486, *(float *)(v48 + 96), v487, *(float *)(v48 + 100), v488))
                    {
                      LOBYTE(v289) = 0;
                      v960.i32[0] |= 0x400u;
                      *(float *)(v48 + 96) = v487;
                      *(float *)(v48 + 100) = v488;
                    }
                  }
                }
                v489 = *v962;
                if (*v962)
                {
                  if (*(_QWORD *)(v48 + 80) && ((*(_DWORD *)&v1018[20] ^ (*((_DWORD *)v489 + 3) >> 8)) & 7) != 0)
                    LOBYTE(v289) = 0;
                  if ((v961 & 1) != 0)
                  {
                    v490 = *(_DWORD *)&v1018[4];
                    if (*(_DWORD *)&v1018[4] == *(_DWORD *)(v48 + 180))
                      v491 = v289;
                    else
                      v491 = 0;
                    if ((v491 & 1) != 0)
                    {
                      v492 = *(_DWORD *)&v1018[8];
                      v493 = *(_DWORD *)&v1018[20];
                      v494 = (uint64_t)*v962;
                      v495 = *(_QWORD *)&v976.f64[0];
                      v496 = *(_QWORD *)&v976.f64[0];
                      goto LABEL_826;
                    }
                    LODWORD(v956) = 1;
                    goto LABEL_835;
                  }
                  v495 = *(_QWORD *)&v976.f64[0];
                  v502 = v967.f64[0];
                }
                else
                {
LABEL_819:
                  if ((v961 & 1) != 0)
                  {
                    v490 = *(_DWORD *)&v1018[4];
                    if (*(_DWORD *)&v1018[4] == *(_DWORD *)(v48 + 180))
                      v497 = v289;
                    else
                      v497 = 0;
                    if ((v497 & 1) != 0)
                    {
                      v495 = *(_QWORD *)&v976.f64[0];
                      v498 = *(_QWORD *)(v48 + 32);
                      if (!v498)
                      {
LABEL_1397:
                        v502 = v967.f64[0];
                        goto LABEL_1398;
                      }
                      v499 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v498 + 24) + 80))(*(_QWORD *)(v498 + 24));
                      v500 = *(_DWORD *)&v1018[8];
                      v501 = *(_DWORD *)&v1018[20];
                      CA::Render::update_texture_flags(v499, v495, *(unsigned int *)&v1018[8], *(unsigned int *)&v1018[20]);
                      v494 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v48 + 32) + 32) + 80))(*(_QWORD *)(*(_QWORD *)(v48 + 32) + 32));
                      v496 = v495;
                      v492 = v500;
                      v493 = v501;
                      v8 = v983;
LABEL_826:
                      CA::Render::update_texture_flags(v494, v496, v492, v493);
                      goto LABEL_1397;
                    }
                    LODWORD(v956) = 0;
                    v489 = 0;
LABEL_835:
                    v504 = *(_DWORD *)(v48 + 12);
                    v505 = v504 >> 8;
                    v506 = v1018[8] & 1;
                    if (((v504 >> 8) & 8) != 0 && (v1018[8] & 1) == 0)
                      *(_DWORD *)(v48 + 12) = v504 & 0xFFFFF7FF;
                    if (v506)
                      v507 = 10;
                    else
                      v507 = 2;
                    v508 = v507 | v960.i32[0];
                    if (!v489
                      || (v505 & 8) >> 3 != v506
                      || *((_QWORD *)v489 + 2) != *(_QWORD *)&v1018[12]
                      || ((*(_DWORD *)&v1018[20] ^ (*((_DWORD *)v489 + 3) >> 8)) & 7) != 0)
                    {
                      v508 |= 4u;
                    }
                    *(_QWORD *)(v48 + 24) = 0;
                    *(_QWORD *)(v48 + 40) = *(_QWORD *)&v1018[56];
                    *(_QWORD *)(v48 + 48) = *(_QWORD *)&v1018[48];
                    *(_DWORD *)(v48 + 180) = v490;
                    v509 = *(unsigned int **)(v48 + 64);
                    v960.i64[0] = (uint64_t)v509;
                    if (v509)
                    {
                      v510 = v509 + 2;
                      do
                      {
                        v511 = __ldaxr(v510);
                        v512 = v511 - 1;
                      }
                      while (__stlxr(v512, v510));
                      if (!v512)
                      {
                        v513 = *(void (**)(uint64_t))(*(_QWORD *)v509 + 16);
                        v954.i32[0] = v506;
                        v514 = v508;
                        v513(v960.i64[0]);
                        v508 = v514;
                        v506 = v954.i32[0];
                      }
                      *(_QWORD *)(v48 + 64) = 0;
                    }
                    LODWORD(v955) = v508;
                    v515 = *(unsigned int **)(v48 + 80);
                    if (v515)
                    {
                      v516 = v515 + 2;
                      do
                      {
                        v517 = __ldaxr(v516);
                        v518 = v517 - 1;
                      }
                      while (__stlxr(v518, v516));
                      if (!v518)
                        (*(void (**)(unsigned int *))(*(_QWORD *)v515 + 16))(v515);
                      *(_QWORD *)(v48 + 80) = 0;
                    }
                    *(_BYTE *)(v48 + 132) = 0;
                    v957 = v489;
                    if (*(_DWORD *)v1018 == 4)
                    {
LABEL_861:
                      v953.i32[0] = *(_DWORD *)&v1018[8];
                      v519 = IOSurfaceLookup(*(IOSurfaceID *)&v1018[48]);
                      v520 = v519;
                      if (v519)
                      {
                        v521 = CA::Render::iosurface_ycbcr_matrix(v519, v481);
                        *(_WORD *)&v1018[110] = v521 | ((unsigned __int16)CA::Render::iosurface_chroma_location(v520, v521) << 8);
                      }
                      v954.i64[0] = (uint64_t)v520;
                      v522 = *(_QWORD *)(v48 + 216);
                      if (!v522)
                      {
LABEL_879:
                        v6 = v978;
                        v5 = v979;
                        v8 = v983;
                        v534 = *(_QWORD *)&v976.f64[0];
                        if (v954.i64[0])
                        {
                          v535 = (CA::Render::Surface *)x_mem_alloc0(0x158uLL);
                          if (v535)
                          {
                            v524 = v535;
                            CA::Render::Surface::Surface((uint64_t)v535, (IOSurfaceRef)v954.i64[0], -1, 62, 0, v1018[110], v1018[111]);
                            *(_QWORD *)(v48 + 216) = x_list_prepend(*(_QWORD *)(v48 + 216), (uint64_t)v524);
                            goto LABEL_882;
                          }
                        }
                        goto LABEL_1321;
                      }
                      v523 = (_QWORD *)(v48 + 216);
                      while (1)
                      {
                        v524 = *(CA::Render::Surface **)v522;
                        if (*(_QWORD *)&v1018[48] == *(_DWORD *)(*(_QWORD *)v522 + 104))
                        {
                          if (*((_QWORD *)v524 + 2) == *(_QWORD *)&v1018[12])
                          {
                            v525 = CA::Render::Surface::ycbcr_matrix(*(CA::Render::Surface **)v522, v481);
                            v527 = *(unsigned __int16 *)&v1018[110];
                            if (v525 == v1018[110]
                              && CA::Render::Surface::chroma_location((__IOSurface **)v524, v526) == v527 >> 8)
                            {
                              v528 = *((_DWORD *)v524 + 3);
                              if ((v506 == 0) != (unsigned __int16)(v528 & 0x1000) >> 12
                                && ((v953.i8[0] & 8) == 0) != (unsigned __int16)(v528 & 0x800) >> 11
                                && ((*(_DWORD *)&v1018[20] ^ (v528 >> 8)) & 7) == 0)
                              {
                                v904 = (unsigned int *)((char *)v524 + 36);
                                do
                                  v905 = __ldaxr(v904);
                                while (__stlxr(v905 + 1, v904));
                                if (v954.i64[0])
                                  CFRelease((CFTypeRef)v954.i64[0]);
                                v6 = v978;
                                v5 = v979;
                                v8 = v983;
                                v534 = *(_QWORD *)&v976.f64[0];
LABEL_882:
                                v536 = *(double *)(v8 + 72) + 0.5;
                                *((float *)v524 + 80) = v536;
                                v537 = (unsigned int **)v962;
                                v538 = (unsigned int *)v524;
LABEL_883:
                                X::Ref<CA::Render::Texture>::operator=(v537, v538);
                                goto LABEL_1321;
                              }
                            }
                          }
                          v529 = (unsigned int *)((char *)v524 + 8);
                          do
                          {
                            v530 = __ldaxr(v529);
                            v531 = v530 - 1;
                          }
                          while (__stlxr(v531, v529));
                          if (!v531)
                            (*(void (**)(CA::Render::Surface *))(*(_QWORD *)v524 + 16))(v524);
                          v532 = *(_QWORD *)(v522 + 8);
                          v533 = (malloc_zone_t *)get_malloc_zone();
                          malloc_zone_free(v533, (void *)v522);
                          *v523 = v532;
                          v522 = v532;
                        }
                        else
                        {
                          v523 = (_QWORD *)(v522 + 8);
                          v522 = *(_QWORD *)(v522 + 8);
                        }
                        if (!v522)
                          goto LABEL_879;
                      }
                    }
                    if (*(_DWORD *)v1018 != 3)
                    {
                      if (*(_DWORD *)v1018 != 2)
                      {
                        v548 = (unsigned int *)*v962;
                        v534 = *(_QWORD *)&v976.f64[0];
                        if (*v962)
                        {
                          v549 = v548 + 2;
                          do
                          {
                            v550 = __ldaxr(v549);
                            v551 = v550 - 1;
                          }
                          while (__stlxr(v551, v549));
                          if (!v551)
                            (*(void (**)(unsigned int *))(*(_QWORD *)v548 + 16))(v548);
                          *v962 = 0;
                        }
                        v552 = *(unsigned int **)(v48 + 32);
                        if (v552)
                        {
                          v553 = v552 + 2;
                          do
                          {
                            v554 = __ldaxr(v553);
                            v555 = v554 - 1;
                          }
                          while (__stlxr(v555, v553));
                          if (!v555)
                            (*(void (**)(unsigned int *))(*(_QWORD *)v552 + 16))(v552);
                          *(_QWORD *)(v48 + 32) = 0;
                        }
                        v556 = *(unsigned int **)(v48 + 64);
                        if (v556)
                        {
                          v557 = v556 + 2;
                          do
                          {
                            v558 = __ldaxr(v557);
                            v559 = v558 - 1;
                          }
                          while (__stlxr(v559, v557));
                          if (!v559)
                            (*(void (**)(unsigned int *))(*(_QWORD *)v556 + 16))(v556);
                          *(_QWORD *)(v48 + 64) = 0;
                        }
                        v560 = *(unsigned int **)(v48 + 80);
                        if (v560)
                        {
                          v561 = v560 + 2;
                          do
                          {
                            v562 = __ldaxr(v561);
                            v563 = v562 - 1;
                          }
                          while (__stlxr(v563, v561));
                          if (!v563)
                            (*(void (**)(unsigned int *))(*(_QWORD *)v560 + 16))(v560);
                          *(_QWORD *)(v48 + 80) = 0;
                        }
                        goto LABEL_1321;
                      }
                      goto LABEL_861;
                    }
                    v539 = *(_QWORD *)&v1018[32];
                    v540 = *(_QWORD *)&v1018[48];
                    if (*(_QWORD *)&v1018[32]
                      && *(_QWORD *)&v1018[48]
                      && ((v541 = *(double *)&v1018[40], v542 = *(double *)&v1018[56], v287 > *(double *)&v1018[40])
                        ? (_NF = v287 < *(double *)&v1018[56])
                        : (_NF = 0),
                          _NF))
                    {
                      v544 = CA::Render::ImageQueue::retain_image_queue((CA::Render::ImageQueue *)v48);
                      if (v544)
                      {
                        v545 = v544;
                        v546 = CAImageQueueCopyTexture((uint64_t)v544, v539);
                        v547 = CAImageQueueCopyTexture((uint64_t)v545, v540);
                        CFRelease(v545);
                      }
                      else
                      {
                        v726 = CA::Render::Context::lookup_object(*(_QWORD *)(v153 + 136), *(_DWORD *)(v153 + 148), v539, 0, 0, 0);
                        v546 = v726;
                        if (v726)
                        {
                          v727 = (unsigned int *)(v726 + 8);
                          do
                            v728 = __ldaxr(v727);
                          while (__stlxr(v728 + 1, v727));
                          if (!v728)
                          {
                            v546 = 0;
                            do
                              v928 = __ldaxr(v727);
                            while (__stlxr(v928 - 1, v727));
                          }
                        }
                        v729 = CA::Render::Context::lookup_object(*(_QWORD *)(v153 + 136), *(_DWORD *)(v153 + 148), *(uint64_t *)&v1018[48], 0, 0, 0);
                        v547 = v729;
                        if (v729)
                        {
                          v730 = (unsigned int *)(v729 + 8);
                          do
                            v731 = __ldaxr(v730);
                          while (__stlxr(v731 + 1, v730));
                          if (!v731)
                          {
                            do
                              v909 = __ldaxr(v730);
                            while (__stlxr(v909 - 1, v730));
                            v547 = 0;
                          }
                        }
                        v6 = v978;
                        v5 = v979;
                      }
                      v534 = *(_QWORD *)&v976.f64[0];
                      v8 = v983;
                      if (v546)
                      {
                        if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v546 + 80))(v546))
                          v732 = v547 == 0;
                        else
                          v732 = 1;
                        if (!v732 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v547 + 80))(v547))
                        {
                          v734 = *(int8x16_t *)(v534 + 416);
                          v953 = *(int8x16_t *)(v534 + 432);
                          v954 = v734;
                          v1017[0] = v734;
                          v1017[1] = v953;
                          if (initialized[0] != -1)
                            dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
                          v735 = *(float *)&dword_1ECDC6958;
                          if (*(float *)&dword_1ECDC6958)
                          {
                            *(double *)v733.i64 = (double)HIBYTE(v735) * 0.00392156863;
                            v736 = vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v735), (uint32x2_t)0xFFFFFFF8FFFFFFF0), (int8x8_t)0xFF000000FFLL);
                            v737.i64[0] = v736.u32[0];
                            v737.i64[1] = v736.u32[1];
                            v738 = (int8x16_t)vmulq_f64(vcvtq_f64_u64(v737), (float64x2_t)vdupq_n_s64(0x3F70101010101010uLL));
                            *(int8x16_t *)((char *)v1017 + 8) = v738;
                            v954 = v733;
                            *(double *)v1017 = *(double *)v733.i64;
                            *((double *)&v1017[1] + 1) = (double)*(float *)&dword_1ECDC6958
                                                       * 0.00392156863;
                          }
                          else
                          {
                            v738 = vextq_s8(v954, v953, 8uLL);
                          }
                          v743 = (v287 - v541) / (v542 - v541);
                          if (*(double *)v954.i64 != 0.0
                            || *(double *)v738.i64 != 0.0
                            || *(double *)&v738.i64[1] != 1.0)
                          {
                            v743 = CA::Render::TimingFunction::evaluate((CA::Render::TimingFunction *)v1017, (const double *)v481, v743, 0.00001);
                          }
                          *(_QWORD *)&v1014 = 0;
                          v1012 = 0u;
                          v1013 = 0u;
                          v1010 = 0u;
                          v1011 = 0u;
                          v1008 = 0u;
                          v1009 = 0u;
                          v1007 = (float64x2_t)*(unint64_t *)&v743;
                          *(_QWORD *)&v984[0] = 0;
                          (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t, float64x2_t *))(*(_QWORD *)v546 + 56))(v984, v546, v547, &v1007);
                          X::Ref<CA::Render::Texture>::operator=((unsigned int **)(v48 + 32), *(unsigned int **)&v984[0]);
                          v744 = *(_QWORD *)&v984[0];
                          if (*(_QWORD *)&v984[0])
                          {
                            v745 = (unsigned int *)(*(_QWORD *)&v984[0] + 8);
                            do
                            {
                              v746 = __ldaxr(v745);
                              v747 = v746 - 1;
                            }
                            while (__stlxr(v747, v745));
                            if (!v747)
                              (*(void (**)(uint64_t))(*(_QWORD *)v744 + 16))(v744);
                          }
                          v534 = *(_QWORD *)&v976.f64[0];
                        }
                        v748 = (unsigned int *)(v546 + 8);
                        do
                        {
                          v749 = __ldaxr(v748);
                          v750 = v749 - 1;
                        }
                        while (__stlxr(v750, v748));
                        v6 = v978;
                        v5 = v979;
                        v8 = v983;
                        if (!v750)
                          (*(void (**)(uint64_t))(*(_QWORD *)v546 + 16))(v546);
                      }
                      if (v547)
                      {
                        v751 = (unsigned int *)(v547 + 8);
                        do
                        {
                          v752 = __ldaxr(v751);
                          v753 = v752 - 1;
                        }
                        while (__stlxr(v753, v751));
                        if (!v753)
                          (*(void (**)(uint64_t))(*(_QWORD *)v547 + 16))(v547);
                      }
                    }
                    else
                    {
                      v568 = *(unsigned int **)(v48 + 32);
                      if (v568)
                      {
                        v569 = v568 + 2;
                        do
                        {
                          v570 = __ldaxr(v569);
                          v571 = v570 - 1;
                        }
                        while (__stlxr(v571, v569));
                        if (!v571)
                          (*(void (**)(unsigned int *))(*(_QWORD *)v568 + 16))(v568);
                        *(_QWORD *)(v48 + 32) = 0;
                        v540 = *(_QWORD *)&v1018[48];
                        v539 = *(_QWORD *)&v1018[32];
                      }
                      if ((LOWORD(v966.f64[0]) & 0x800) != 0
                        && v539
                        && v540
                        && vabdd_f64(v287, *(double *)&v1018[40]) < vabdd_f64(v287, *(double *)&v1018[56]))
                      {
                        v540 = v539;
                      }
                      v572 = CA::Render::ImageQueue::retain_image_queue((CA::Render::ImageQueue *)v48);
                      if (v572)
                      {
                        v573 = v572;
                        v574 = CAImageQueueCopyTexture((uint64_t)v572, v540);
                        v575 = (unsigned int *)*v962;
                        *v962 = (CA::Render::Texture *)v574;
                        if (v575)
                        {
                          v576 = v575 + 2;
                          do
                          {
                            v577 = __ldaxr(v576);
                            v578 = v577 - 1;
                          }
                          while (__stlxr(v578, v576));
                          if (!v578)
                            (*(void (**)(unsigned int *))(*(_QWORD *)v575 + 16))(v575);
                        }
                        CFRelease(v573);
                        v6 = v978;
                        v5 = v979;
                        v8 = v983;
                        v534 = *(_QWORD *)&v976.f64[0];
                      }
                      else
                      {
                        v739 = CA::Render::Context::lookup_object(*(_QWORD *)(v153 + 136), *(_DWORD *)(v153 + 148), v540, 0, 0, 0);
                        v6 = v978;
                        v5 = v979;
                        v8 = v983;
                        v534 = *(_QWORD *)&v976.f64[0];
                        if (v739)
                        {
                          v538 = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v739 + 80))(v739);
                          v537 = (unsigned int **)v962;
                          goto LABEL_883;
                        }
                      }
                    }
LABEL_1321:
                    v754 = (uint64_t)*v962;
                    if (*v962)
                    {
                      v755 = v957;
                      if (*(_BYTE *)(v754 + 12) == 51)
                      {
                        *(_WORD *)(v754 + 336) &= ~0x200u;
                        v756 = *(unsigned int **)(v754 + 160);
                        *(_QWORD *)(v754 + 160) = 0;
                        if (v756)
                        {
                          v757 = v756 + 2;
                          do
                          {
                            v758 = __ldaxr(v757);
                            v759 = v758 - 1;
                          }
                          while (__stlxr(v759, v757));
                          if (!v759)
                            (*(void (**)(unsigned int *))(*(_QWORD *)v756 + 16))(v756);
                        }
                        *(_WORD *)(v754 + 336) &= ~4u;
                        *(_DWORD *)(v754 + 132) = 1065353216;
                        v754 = (uint64_t)*v962;
                      }
                      CA::Render::update_texture_flags(v754, v534, *(unsigned int *)&v1018[8], *(unsigned int *)&v1018[20]);
                      v760 = *(_DWORD *)&v1018[120];
                      if (*(int *)&v1018[120] <= *(int *)&v1018[124])
                        v760 = *(_DWORD *)&v1018[124];
                      if (v760 <= 1073741822)
                      {
                        v761 = (CA::Shape *)CA::Shape::new_shape((CA::Shape *)&v1018[112], v481);
                        CA::Render::Texture::set_dirty_shape(*v962, v761);
                        CA::Shape::unref(v761);
                      }
                      v762 = (unsigned int *)((char *)*v962 + 36);
                      do
                        v763 = __ldaxr(v762);
                      while (__stlxr(v763 + 1, v762));
                      v764 = v956;
                      if (initialized[0] != -1)
                        dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
                      if (*(float *)&dword_1ECDC6944)
                      {
                        if (*((_BYTE *)*v962 + 12) == 51)
                        {
                          v765 = (__IOSurface *)*((_QWORD *)*v962 + 14);
                          if (v765)
                          {
                            v766 = CAIOSurfaceWriteToFileWithSuffix(v765, "image-queue");
                            free(v766);
                            if (*(float *)&dword_1ECDC6944 > 0.0)
                              *(float *)&dword_1ECDC6944 = *(float *)&dword_1ECDC6944 + -1.0;
                          }
                        }
                      }
                    }
                    else
                    {
                      v767 = *(_QWORD *)(v48 + 32);
                      v755 = v957;
                      v764 = v956;
                      if (v767)
                      {
                        v954.i64[0] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v767 + 24) + 80))(*(_QWORD *)(v767 + 24));
                        v768 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v767 + 32) + 80))(*(_QWORD *)(v767 + 32));
                        v769 = *(_DWORD *)&v1018[8];
                        v770 = *(_DWORD *)&v1018[20];
                        v771 = *(_QWORD *)&v976.f64[0];
                        CA::Render::update_texture_flags(v954.i64[0], *(uint64_t *)&v976.f64[0], *(unsigned int *)&v1018[8], *(unsigned int *)&v1018[20]);
                        v953.i64[0] = v768;
                        CA::Render::update_texture_flags(v768, v771, v769, v770);
                        v772 = (unsigned int *)(v954.i64[0] + 36);
                        do
                          v773 = __ldaxr(v772);
                        while (__stlxr(v773 + 1, v772));
                        v774 = (unsigned int *)(v953.i64[0] + 36);
                        v8 = v983;
                        v764 = v956;
                        v755 = v957;
                        do
                          v775 = __ldaxr(v774);
                        while (__stlxr(v775 + 1, v774));
                      }
                    }
                    v776 = *v962;
                    v777 = v764 ^ 1;
                    if (!*v962)
                      v777 = 1;
                    if ((v777 & 1) != 0)
                      goto LABEL_1372;
                    if (*((_DWORD *)v776 + 4) != *((_DWORD *)v755 + 4)
                      || *((_DWORD *)v776 + 5) != *((_DWORD *)v755 + 5))
                    {
                      goto LABEL_1373;
                    }
                    v778 = *((unsigned __int16 *)v776 + 12);
                    v779 = *((unsigned __int16 *)v776 + 13);
                    v780 = *((unsigned __int16 *)v755 + 12);
                    v781 = *((unsigned __int16 *)v755 + 13);
                    v782 = v778 == v780 && v779 == v781;
                    v783 = v782 && *((__int16 *)v755 + 14) + (__int16)v780 == *((__int16 *)v776 + 14) + (__int16)v778;
                    if (!v783 || *((__int16 *)v755 + 15) + (__int16)v781 != *((__int16 *)v776 + 15) + (__int16)v779)
                      goto LABEL_1373;
                    v785 = *((unsigned __int8 *)v776 + 12);
                    if (v785 != *((unsigned __int8 *)v755 + 12))
                      goto LABEL_1373;
                    if (v785 != 51)
                      goto LABEL_1372;
                    CacheMode = *((_DWORD *)v776 + 83);
                    if (CacheMode == -1)
                    {
                      CacheMode = IOSurfaceGetCacheMode();
                      *((_DWORD *)v776 + 83) = CacheMode;
                    }
                    v787 = *((_DWORD *)v957 + 83);
                    if (v787 == -1)
                    {
                      v788 = v957;
                      v787 = IOSurfaceGetCacheMode();
                      *((_DWORD *)v788 + 83) = v787;
                    }
                    _ZF = CacheMode == v787;
                    v6 = v978;
                    v5 = v979;
                    v8 = v983;
                    v755 = v957;
                    v764 = v956;
                    if (_ZF && *((_DWORD *)v776 + 32) == *((_DWORD *)v957 + 32))
                    {
LABEL_1372:
                      v789 = v955;
                      v790 = v955 | 4;
                    }
                    else
                    {
LABEL_1373:
                      v790 = v955 | 4;
                      v789 = v955 | 4;
                    }
                    if ((v960.i64[0] != 0) == ((*((unsigned __int16 *)v980 + 2) >> 11) & 1))
                      v790 = v789;
                    v960.i32[0] = v790;
                    v495 = *(_QWORD *)&v976.f64[0];
                    if (v764)
                    {
                      v791 = *v962;
                      if (!*v962)
                        goto LABEL_1390;
                      if (*((_BYTE *)v755 + 12) == 51 && *((_BYTE *)v791 + 12) == 51)
                      {
                        if (((*((unsigned __int16 *)v791 + 168) >> 5) & 1) != (*((_WORD *)v755 + 168) & 0x20) >> 5)
                          *(_DWORD *)(v48 + 12) |= 0x400u;
                        v792 = CA::Render::ImageQueue::hdr_processor((CA::Render::ImageQueue *)v48, v481);
                        if (v792)
                        {
                          v793 = v792;
                          v794 = v983;
                          v795 = (*(uint64_t (**)(uint64_t, CA::Render::Texture *, uint64_t))(*(_QWORD *)v792 + 48))(v792, v791, v983);
                          if (v795 != (*(unsigned int (**)(uint64_t, CA::Render::Texture *, uint64_t))(*(_QWORD *)v793 + 48))(v793, v755, v794))*(_DWORD *)(v48 + 12) |= 0x400u;
                        }
                        v6 = v978;
                        v5 = v979;
                        v8 = v983;
                        v495 = *(_QWORD *)&v976.f64[0];
                        if (*(_BYTE *)(v958 + 56))
                        {
                          if ((*(unsigned int (**)(CA::Render::Texture *))(*(_QWORD *)v791 + 264))(v791))
                          {
                            v796 = (*(uint64_t (**)(CA::Render::Texture *))(*(_QWORD *)v791 + 256))(v791);
                            if (v796 != (*(unsigned int (**)(CA::Render::Texture *))(*(_QWORD *)v755 + 256))(v755))
                              *(_DWORD *)(v48 + 12) |= 0x400u;
                          }
                        }
                      }
                    }
                    if (*v962)
                    {
LABEL_1392:
                      if (!v755)
                        goto LABEL_1397;
                      v797 = (unsigned int *)((char *)v755 + 8);
                      v502 = v967.f64[0];
                      do
                      {
                        v798 = __ldaxr(v797);
                        v799 = v798 - 1;
                      }
                      while (__stlxr(v799, v797));
                      if (!v799)
                        (*(void (**)(CA::Render::Texture *))(*(_QWORD *)v755 + 16))(v755);
LABEL_1398:
                      v800 = v960.i32[0] | v989;
                      v801 = (int)v961;
                      if (*(double *)&v1018[88] == 0.0)
                        v801 = 0;
                      *(_BYTE *)(v48 + 241) = v801;
                      if (v801 == 1)
                      {
                        *(_OWORD *)(v48 + 248) = *(_OWORD *)&v1018[88];
                        *v980 |= 0x400000u;
                        v33 = v982;
                      }
                      else
                      {
                        v802 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v48 + 16) + 24) + 8);
                        v803 = atomic_load(v802);
                        v33 = v982;
                        if ((v803 & 0x10000000000000) != 0)
                        {
                          do
                            v804 = __ldaxr(v802);
                          while (__stlxr(v804 & 0xFFEFFFFFFFFFFFFFLL, v802));
                        }
                      }
                      v805 = atomic_load((unint64_t *)(v495 + 8));
                      if ((v805 & 0x200000000000001) == 1)
                      {
                        v800 |= 0x20u;
                        *(_DWORD *)(v8 + 268) |= 0x2000000u;
                      }
                      if ((~*(_QWORD *)&v966.f64[0] & 0xC00000000000000) == 0)
                        *(_DWORD *)(v8 + 268) |= 0x4000000u;
                      v806 = v800 | (*(_QWORD *)&v966.f64[0] >> 47) & 0x100;
                      v807 = *(_DWORD *)(v48 + 12);
                      v808 = (v807 & 0x20000) == 0;
                      if ((*(_QWORD *)&v966.f64[0] & 0x40000000000000) == 0)
                        v807 &= ~0x20000u;
                      if (((*(_QWORD *)&v966.f64[0] >> 54) & v808) != 0)
                        v809 = v806 | 0x600;
                      else
                        v809 = v806;
                      v810 = v807 & 0xFFF7FFFF;
                      *(_DWORD *)(v48 + 12) = v807 & 0xFFF7FFFF;
                      v811 = ((unsigned __int16)(v807 >> 9) ^ (unsigned __int16)(v809 >> 1)) & 0x400 | v809;
                      if (v1018[109])
                      {
                        if (v280 == 0.0)
                          v812 = INFINITY;
                        else
                          v812 = (*(double *)&v1018[64] - v281) / v280 + v279;
                        v986.f64[0] = v812;
                        v273 = 0.0;
                        if ((*(_DWORD *)&v1018[8] & 0x40000800) == 0)
                        {
                          v813 = *(double *)&v1018[72];
                          if ((*(_QWORD *)&v1018[72] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
                            && *(double *)&v1018[72] > 0.0
                            && *(double *)&v1018[72] < 0.1)
                          {
                            if (vabdd_f64(*(double *)&v1018[72], *(double *)(v48 + 232)) >= 0.005)
                            {
                              *(_BYTE *)(v48 + 240) = 4;
                            }
                            else
                            {
                              v273 = *(double *)&v1018[72];
                              if (*(_BYTE *)(v48 + 240))
                              {
                                v814 = *(_BYTE *)(v48 + 240) - 1;
                                *(_BYTE *)(v48 + 240) = v814;
                                v273 = 0.0;
                                if (!v814)
                                  v273 = v813;
                              }
                            }
                            *(double *)(v48 + 232) = v813;
                          }
                        }
                        v815 = atomic_load((unint64_t *)(v495 + 8));
                        if ((v815 & 0x80000) != 0)
                          v816 = 192;
                        else
                          v816 = 64;
                        v811 |= v816;
                        v810 = *(_DWORD *)(v48 + 12);
                      }
                      else
                      {
                        v273 = 0.0;
                        if (!v811)
                          goto LABEL_1433;
                      }
                      *(_DWORD *)(v48 + 12) = v810 | (v811 << 8);
LABEL_1433:
                      CAShmemImageQueueUpdate(v495, *(_DWORD *)(*(_QWORD *)&v502 + 608), *(_DWORD *)(*(_QWORD *)&v502 + 612), *(_QWORD *)(*(_QWORD *)&v502 + 600), v959.i64[0], *(_QWORD *)(v8 + 160), v811, *(unsigned int *)(v48 + 188), v288, *(double *)(v8 + 104));
                      goto LABEL_1434;
                    }
LABEL_1390:
                    if (!*(_QWORD *)(v48 + 32))
                      CA::Render::ImageQueue::flush_cache((CA::Render::ImageQueue *)v48);
                    goto LABEL_1392;
                  }
                  v495 = *(_QWORD *)&v976.f64[0];
                  v502 = v967.f64[0];
                  if (!*(_QWORD *)(v48 + 32))
                    goto LABEL_1398;
                }
                CA::Render::ImageQueue::flush_cache((CA::Render::ImageQueue *)v48);
                goto LABEL_1398;
              }
              v998.i64[1] |= 0x3CuLL;
              v47 = v998.i64[0] | 0xA;
            }
            else
            {
              v998.i64[1] |= 0x3CuLL;
              v47 = v998.i64[0] | 9;
            }
            v998.i64[0] = v47;
            goto LABEL_75;
          }
        }
        else
        {
          v964 = *(_OWORD *)(v5 + 16);
          v963 = *(_DWORD *)(v5 + 56);
          v965 = *(_QWORD *)(v5 + 80);
          *(_QWORD *)(v5 + 16) = *(_QWORD *)(v8 + 72);
          *(_QWORD *)(v5 + 24) = *(_QWORD *)(v7[2] + 560);
          *(_DWORD *)(v5 + 56) = 1065353216;
          *(_QWORD *)(v5 + 80) = 0;
          *(_WORD *)(v5 + 136) |= 0x80u;
          if (v41)
            goto LABEL_52;
        }
        v45 = *(double *)(v5 + 16);
        v46 = *(double *)(v5 + 24);
        v991 = v45;
        v992 = v46;
        v996 = *(float *)(v5 + 56);
        v999 = *(uint64_t **)(v5 + 80);
        goto LABEL_68;
      }
    }
    v22 = 60;
    goto LABEL_17;
  }
  if ((*(_DWORD *)(*a1 + 1064) & 4) == 0)
  {
    *(_DWORD *)(a1[3] + 12) |= 0x40000u;
    v9 = *((_QWORD *)a3 + 15);
    if (v9)
    {
      v10 = (int8x8_t *)a1[3];
      v11 = v10 + 39;
      v12 = v10[40];
      if (v12)
      {
        v13 = 0x9DDFEA08EB382D69 * (((8 * v9) + 8) ^ HIDWORD(v9));
        v14 = 0x9DDFEA08EB382D69 * (HIDWORD(v9) ^ (v13 >> 47) ^ v13);
        v15 = 0x9DDFEA08EB382D69 * (v14 ^ (v14 >> 47));
        v16 = (uint8x8_t)vcnt_s8(v12);
        v16.i16[0] = vaddlv_u8(v16);
        if (v16.u32[0] > 1uLL)
        {
          v17 = v15;
          if (v15 >= *(_QWORD *)&v12)
            v17 = v15 % *(_QWORD *)&v12;
        }
        else
        {
          v17 = v15 & (*(_QWORD *)&v12 - 1);
        }
        v262 = *(_QWORD **)(*(_QWORD *)v11 + 8 * v17);
        if (v262)
        {
          for (j = (_QWORD *)*v262; j; j = (_QWORD *)*j)
          {
            v264 = j[1];
            if (v264 == v15)
            {
              if (j[2] == v9)
                goto LABEL_392;
            }
            else
            {
              if (v16.u32[0] > 1uLL)
              {
                if (v264 >= *(_QWORD *)&v12)
                  v264 %= *(_QWORD *)&v12;
              }
              else
              {
                v264 &= *(_QWORD *)&v12 - 1;
              }
              if (v264 != v17)
                break;
            }
          }
        }
      }
      std::__hash_table<CA::Render::String *,std::hash<CA::Render::String *>,std::equal_to<CA::Render::String *>,std::allocator<CA::Render::String *>>::__emplace_unique_key_args<CA::Render::String *,CA::Render::String * const&>((uint64_t)v11, *((_QWORD *)a3 + 15), *((_QWORD *)a3 + 15));
      v265 = (unsigned int *)(v9 + 8);
      do
        v266 = __ldaxr(v265);
      while (__stlxr(v266 + 1, v265));
      if (!v266)
      {
        do
          v503 = __ldaxr(v265);
        while (__stlxr(v503 - 1, v265));
      }
    }
LABEL_392:
    *(_DWORD *)(*v7 + 268) |= 0x200u;
  }
  *((_QWORD *)v6 + 11) = 0;
}

BOOL CA::Render::Updater::layer_may_be_hidden_culled(CA::Render::Updater *this, const CA::Render::Layer *a2)
{
  uint64_t v3;
  uint64_t v4;

  if ((*((_BYTE *)this + 41) & 1) != 0)
    return 1;
  if (*((_BYTE *)this + 32))
    return 0;
  v3 = *((_QWORD *)this + 16);
  return !v3
      || (v4 = *(_QWORD *)(v3 + 88)) == 0
      || CA::Render::Filter::compositing_dod((CA::Render::Filter *)*(unsigned int *)(v4 + 24)) - 3 < 2;
}

uint64_t *CA::Render::Update::release_object(uint64_t *this, const CA::Render::Object *a2)
{
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  if (a2)
  {
    v3 = this;
    this = (uint64_t *)*this;
    v4 = this[2];
    v5 = v4 - 16;
    if (v4 >= 0x10)
    {
      v6 = (uint64_t *)this[1];
      this[1] = (uint64_t)(v6 + 2);
      this[2] = v5;
    }
    else
    {
      this = (uint64_t *)x_heap_malloc_small_(this, 0x10uLL);
      v6 = this;
    }
    v7 = v3[40];
    *v6 = (uint64_t)a2;
    v6[1] = v7;
    v3[40] = (uint64_t)v6;
  }
  return this;
}

unsigned int *CA::Render::LayerHost::update@<X0>(unsigned int *this@<X0>, CA::Render::Update *a2@<X1>, CA::Render::LayerNode *a3@<X2>, __n128 a4@<Q0>, __n128 a5@<Q1>, _QWORD *a6@<X8>)
{
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;

  if ((*((_DWORD *)a2 + 266) & 4) == 0)
  {
    v8 = (unsigned int *)*((_QWORD *)this + 4);
    this = (unsigned int *)*((_QWORD *)a3 + 33);
    if (this != v8)
    {
      if (this)
      {
        v9 = this + 2;
        do
        {
          v10 = __ldaxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
          this = (unsigned int *)(*(uint64_t (**)(unsigned int *, __n128, __n128))(*(_QWORD *)this + 16))(this, a4, a5);
      }
      if (v8)
      {
        v12 = v8 + 2;
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 + 1, v12));
        if (!v13)
        {
          v8 = 0;
          do
            v14 = __ldaxr(v12);
          while (__stlxr(v14 - 1, v12));
        }
      }
      *((_QWORD *)a3 + 33) = v8;
    }
  }
  a6[1] = 0;
  a6[2] = 0;
  *a6 = 0x7FF0000000000000;
  return this;
}

unint64_t CA::Render::Context::copy_dirty_shape(CA::Render::Context *this, const CA::Bounds *a2)
{
  unint64_t v3;

  v3 = *((_QWORD *)this + 72);
  if (v3)
    return CA::Shape::ref(v3, a2);
  else
    return CA::Shape::new_shape((CA::Render::Context *)((char *)this + 584), a2);
}

void CA::Render::Context::invalidate(CA::Render::Context *this, CA::Shape **a2, const CA::Shape *a3)
{
  uint64_t *v4;
  uint64_t v5;
  int32x2_t v6;
  int32x2_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if ((a2 & 1) != 0)
  {
    if (a2 == (CA::Shape **)1)
      return;
  }
  else if (*((_DWORD *)a2 + 1) == 6)
  {
    return;
  }
  if (*((_QWORD *)this + 72))
  {
    v4 = (uint64_t *)((char *)this + 576);
    CA::shape_union((CA::Shape **)this + 72, a2, a3);
    v5 = *v4;
    if ((*v4 & 1) == 0 && *(int *)(v5 + 4) >= 65)
    {
      CA::Shape::get_bounds(v5, (int *)this + 146);
      CA::Shape::unref(*((CA::Shape **)this + 72));
      *((_QWORD *)this + 72) = 0;
    }
  }
  else
  {
    v6 = 0;
    v7 = 0;
    CA::Shape::get_bounds((uint64_t)a2, (int *)&v6);
    CA::BoundsImpl::Union((int32x2_t *)this + 73, v6, v7);
  }
}

BOOL CA::Render::Animation::check_should_remove(CA::Render::Animation *this, double a2, double a3, float a4)
{
  _BOOL4 v5;
  _BOOL4 v6;

  if ((*((_BYTE *)this + 13) & 8) == 0)
    return 0;
  v5 = a2 < a3;
  v6 = a2 > a3;
  if (a4 >= 0.0)
    v6 = 1;
  if (a4 <= 0.0)
    v5 = v6;
  return !v5;
}

int64x2_t CA::Render::BackdropLayer::update@<Q0>(CA::Render::BackdropLayer *this@<X0>, CA::Render::Update *a2@<X1>, CA::Render::LayerNode *a3@<X2>, __n128 a4@<Q0>, __n128 a5@<Q1>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  _BOOL4 v12;
  char *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  char *v28;
  _QWORD *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  int64x2_t result;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  _QWORD v47[2];

  v47[1] = *MEMORY[0x1E0C80C00];
  v10 = *((_QWORD *)this + 11);
  if (v10)
  {
    v11 = *((_QWORD *)a3 + 3);
    v12 = (v11 & 0x4000000) != 0 && *((_QWORD *)a2 + 130) != 0;
    v14 = (v11 & 0x8000000) == 0 && v12;
    v15 = *((_DWORD *)a2 + 266);
    if ((v15 & 4) == 0 && *((_BYTE *)this + 80) == 1)
    {
      v16 = *(_QWORD *)(v10 + 40);
      v17 = *(_QWORD *)(v16 + 16);
      if (*(_QWORD *)(v17 + 544))
        v17 = *(_QWORD *)(v17 + 544);
      if (*(_QWORD *)(v16 + 24) != v17)
      {
        v18 = (int *)((char *)a2 + 1064);
        CA::Render::BackdropGroup::retain_group(v47, *(_QWORD *)(v10 + 16), *(unsigned int **)(v16 + 32), *(unsigned __int8 *)(v10 + 84), *(float *)(v10 + 32));
        v19 = v47[0];
        v20 = *(unsigned int **)(v10 + 40);
        *(_QWORD *)(v10 + 40) = v47[0];
        if (v20)
        {
          v21 = v20 + 2;
          do
          {
            v22 = __ldaxr(v21);
            v23 = v22 - 1;
          }
          while (__stlxr(v23, v21));
          if (!v23)
            (*(void (**)(unsigned int *))(*(_QWORD *)v20 + 16))(v20);
          v19 = *(_QWORD *)(v10 + 40);
        }
        *(_DWORD *)(v19 + 12) |= 0x400u;
        v15 = *v18;
      }
    }
    if (v11 & 0x4000000 | v15 & 0x8000004)
    {
      v24 = (v15 & 4) == 0 && v12;
      v25 = *((_QWORD *)this + 11);
      if (v24)
      {
        v26 = *((_QWORD *)a2 + 130);
        os_unfair_lock_lock((os_unfair_lock_t)(v25 + 36));
        v27 = *(uint64_t **)(v25 + 88);
        if (v27)
        {
          while (v27[2] != *(_QWORD *)(v26 + 16) || v27[1] != *(_QWORD *)(v26 + 24))
          {
            v27 = (uint64_t *)*v27;
            if (!v27)
              goto LABEL_30;
          }
          *((_DWORD *)v27 + 6) = *((_DWORD *)a2 + 62);
          v43 = (unsigned int *)(v27[4] + 8);
          do
            v44 = __ldaxr(v43);
          while (__stlxr(v44 + 1, v43));
          if (!v44)
          {
            do
              v46 = __ldaxr(v43);
            while (__stlxr(v46 - 1, v43));
          }
          v13 = (char *)v27[4];
          os_unfair_lock_unlock((os_unfair_lock_t)(v25 + 36));
        }
        else
        {
LABEL_30:
          v28 = CA::Render::BackdropState::copy_isolated((CA::Render::BackdropState *)v25, a2, v14);
          v47[0] = v28;
          v29 = malloc_type_malloc(0x28uLL, 0x10200400F943929uLL);
          *v29 = *(_QWORD *)(v25 + 88);
          v29[2] = *(_QWORD *)(v26 + 16);
          v29[1] = *(_QWORD *)(v26 + 24);
          *((_DWORD *)v29 + 6) = *((_DWORD *)a2 + 62);
          v29[4] = v28;
          *(_QWORD *)(v25 + 88) = v29;
          *((_DWORD *)v28 + 3) |= 0x300u;
          v30 = (unsigned int *)(v28 + 8);
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 + 1, v30));
          if (!v31)
          {
            do
              v45 = __ldaxr(v30);
            while (__stlxr(v45 - 1, v30));
          }
          os_unfair_lock_unlock((os_unfair_lock_t)(v25 + 36));
          os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::BackdropState::_list_lock);
          X::small_vector_base<CA::Render::BackdropState *>::push_back(v47);
          os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::BackdropState::_list_lock);
          v13 = (char *)v47[0];
        }
      }
      else
      {
        v13 = CA::Render::BackdropState::copy_isolated(*((CA::Render::BackdropState **)this + 11), a2, 0);
      }
    }
    else
    {
      v13 = (char *)*((_QWORD *)this + 11);
      if (v13)
      {
        v32 = (unsigned int *)(v13 + 8);
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 + 1, v32));
        if (!v33)
        {
          v13 = 0;
          do
            v34 = __ldaxr(v32);
          while (__stlxr(v34 - 1, v32));
        }
      }
    }
  }
  else
  {
    v13 = 0;
  }
  v35 = *((_QWORD *)a3 + 32);
  if ((char *)v35 == v13)
  {
    if (!v13)
      goto LABEL_59;
    v39 = (unsigned int *)(v13 + 8);
    do
    {
      v40 = __ldaxr(v39);
      v41 = v40 - 1;
    }
    while (__stlxr(v41, v39));
    if (!v41)
      (*(void (**)(char *, __n128, __n128))(*(_QWORD *)v13 + 16))(v13, a4, a5);
    goto LABEL_55;
  }
  if (v35)
  {
    v36 = (unsigned int *)(v35 + 8);
    do
    {
      v37 = __ldaxr(v36);
      v38 = v37 - 1;
    }
    while (__stlxr(v38, v36));
    if (!v38)
      (*(void (**)(uint64_t, __n128, __n128))(*(_QWORD *)v35 + 16))(v35, a4, a5);
  }
  *((_QWORD *)a3 + 32) = v13;
  if (v13)
  {
LABEL_55:
    if ((*((_BYTE *)this + 13) & 4) != 0 && v13[96] && *((double *)a2 + 9) >= *((double *)v13 + 8))
      *((_DWORD *)a2 + 67) |= 0x40000u;
  }
LABEL_59:
  *(_QWORD *)a6 = 0x7FF0000000000000;
  result = vdupq_n_s64(0x400000000uLL);
  *(int64x2_t *)(a6 + 8) = result;
  return result;
}

void CA::Render::LayerSubclass::update(_QWORD *a1@<X8>)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0x7FF0000000000000;
}

uint64_t CA::Render::Animation::is_time_dependent(CA::Render::Animation *this)
{
  return 1;
}

uint64_t CA::Render::MatchAnimation::is_time_dependent(CA::Render::MatchAnimation *this)
{
  return 0;
}

uint64_t CA::Render::MatchMoveDependence::run(uint64_t this, CA::Render::Update *a2, double a3, CA::Render::Handle *a4)
{
  if ((*((_BYTE *)a4 + 96) & 8) != 0)
    *(_DWORD *)(*(_QWORD *)(this + 48) + 76) = *((_DWORD *)a2 + 62);
  return this;
}

void CA::Render::PortalState::Dependence::run(CA::Render::PortalState::Dependence *this, CA::Render::Update *a2, double a3, CA::Render::Handle *a4, int a5)
{
  int v5;
  uint64_t v6;
  CA::Render::LayerNode *v7;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  float v12;
  float v13;
  CA::Render::LayerNode *v14;
  uint64_t v15;
  char *v16;
  void *v17;
  _QWORD *v18;
  unsigned int *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  unint64_t v29;
  void *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  _OWORD *v37;
  uint64_t v38;
  char *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  unsigned int v52;
  _QWORD v53[2];
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v5 = *((_DWORD *)a2 + 62);
  if (*((_DWORD *)this + 14) != v5)
  {
    *((_DWORD *)this + 14) = v5;
    v6 = *((_QWORD *)this + 6);
    if (a5)
      *(_BYTE *)(v6 + 212) = 1;
    *(double *)(v6 + 56) = a3;
    v7 = (CA::Render::LayerNode *)*((_QWORD *)a4 + 5);
    if (v7 && (*(_DWORD *)(v6 + 12) & 0x200) != 0)
    {
      v9 = *((_QWORD *)v7 + 4);
      if (v9)
      {
        *(_QWORD *)&v63 = 0;
        v62 = 0u;
        v61 = 0u;
        v60 = 0u;
        v59 = 0u;
        v58 = 0u;
        v57 = 0u;
        v56 = 0u;
        v55 = 0u;
        v10 = (unsigned int *)(v9 + 8);
        *(_QWORD *)&v54 = v6;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 + 1, v10));
        if (!v11)
        {
          v9 = 0;
          do
            v52 = __ldaxr(v10);
          while (__stlxr(v52 - 1, v10));
        }
        *((_QWORD *)&v54 + 1) = v9;
        *((_QWORD *)&v63 + 1) = *((_QWORD *)v7 + 3);
        v55 = xmmword_18474DF40;
        v56 = 0u;
        v57 = xmmword_18474DF50;
        v58 = 0u;
        v59 = 0u;
        v60 = xmmword_18474DF40;
        v61 = 0u;
        v62 = xmmword_18474DF50;
        v53[0] = &off_1E15997A0;
        v53[1] = &v55;
        CA::Render::LayerNode::MapGeometry::map((uint64_t)v53, v7, 0);
        v13 = 1.0;
        do
        {
          v14 = v7;
          LOBYTE(v12) = *(_BYTE *)(*((_QWORD *)v7 + 4) + 32);
          v12 = (float)LODWORD(v12);
          v13 = v12 * (float)(0.0039216 * v13);
          v7 = (CA::Render::LayerNode *)*((_QWORD *)v7 + 11);
        }
        while (v7);
        v15 = *((_QWORD *)v14 + 5);
        if (v15)
          *(_QWORD *)(v15 + 96) |= 0x1000000000000000uLL;
        *(float *)&v63 = v13;
        os_unfair_lock_lock(&CA::Render::_cross_display_sources_lock);
        v17 = CA::Render::_cross_display_sources;
        v16 = (char *)qword_1EDD109D0;
        v18 = CA::Render::_cross_display_sources;
        if (CA::Render::_cross_display_sources != (_UNKNOWN *)qword_1EDD109D0)
        {
          while (*v18 != v6)
          {
            v18 += 20;
            if (v18 == (_QWORD *)qword_1EDD109D0)
              goto LABEL_26;
          }
        }
        if (v18 == (_QWORD *)qword_1EDD109D0)
        {
LABEL_26:
          v29 = 0xCCCCCCCCCCCCCCCDLL * ((qword_1EDD109D0 - (uint64_t)CA::Render::_cross_display_sources) >> 5);
          if (qword_1EDD109E0 < v29 + 1)
          {
            v30 = off_1EDD109D8;
            v31 = (qword_1EDD109E0 + 1) | ((unint64_t)(qword_1EDD109E0 + 1) >> 1) | (((qword_1EDD109E0 + 1) | ((unint64_t)(qword_1EDD109E0 + 1) >> 1)) >> 2);
            v32 = v31 | (v31 >> 4) | ((v31 | (v31 >> 4)) >> 8);
            v33 = v32 | (v32 >> 16) | ((v32 | (v32 >> 16)) >> 32);
            if (v33 + 1 > v29 + 1)
              v34 = v33 + 1;
            else
              v34 = v29 + 1;
            v35 = (char *)malloc_type_malloc(160 * v34, 0x1060040ACFB3375uLL);
            v36 = v35;
            v37 = CA::Render::_cross_display_sources;
            v38 = qword_1EDD109D0;
            if (CA::Render::_cross_display_sources != (_UNKNOWN *)qword_1EDD109D0)
            {
              v39 = v35;
              do
              {
                *(_OWORD *)v39 = *v37;
                v40 = v37[2];
                v41 = v37[3];
                v42 = v37[4];
                *((_OWORD *)v39 + 1) = v37[1];
                *((_OWORD *)v39 + 2) = v40;
                *((_OWORD *)v39 + 3) = v41;
                *((_OWORD *)v39 + 4) = v42;
                v43 = v37[6];
                v44 = v37[7];
                v45 = v37[8];
                *((_OWORD *)v39 + 5) = v37[5];
                *((_OWORD *)v39 + 6) = v43;
                *((_OWORD *)v39 + 7) = v44;
                *((_OWORD *)v39 + 8) = v45;
                *((_OWORD *)v39 + 9) = v37[9];
                v37 += 10;
                v39 += 160;
              }
              while (v37 != (_OWORD *)v38);
            }
            if (v17 != v30)
              free(CA::Render::_cross_display_sources);
            v16 = &v36[160 * v29];
            CA::Render::_cross_display_sources = v36;
            qword_1EDD109D0 = (uint64_t)v16;
            qword_1EDD109E0 = v34;
          }
          *(_OWORD *)v16 = v54;
          v46 = v56;
          v47 = v57;
          v48 = v58;
          *((_OWORD *)v16 + 1) = v55;
          *((_OWORD *)v16 + 2) = v46;
          *((_OWORD *)v16 + 3) = v47;
          *((_OWORD *)v16 + 4) = v48;
          v49 = v60;
          v50 = v61;
          v51 = v62;
          *((_OWORD *)v16 + 5) = v59;
          *((_OWORD *)v16 + 6) = v49;
          *((_OWORD *)v16 + 7) = v50;
          *((_OWORD *)v16 + 8) = v51;
          *((_OWORD *)v16 + 9) = v63;
          qword_1EDD109D0 += 160;
          os_unfair_lock_unlock(&CA::Render::_cross_display_sources_lock);
        }
        else
        {
          v19 = (unsigned int *)v18[1];
          *(_OWORD *)v18 = v54;
          v20 = v56;
          v21 = v57;
          v22 = v58;
          *((_OWORD *)v18 + 1) = v55;
          *((_OWORD *)v18 + 2) = v20;
          *((_OWORD *)v18 + 3) = v21;
          *((_OWORD *)v18 + 4) = v22;
          v23 = v60;
          v24 = v61;
          v25 = v62;
          *((_OWORD *)v18 + 5) = v59;
          *((_OWORD *)v18 + 6) = v23;
          *((_OWORD *)v18 + 7) = v24;
          *((_OWORD *)v18 + 8) = v25;
          *((_OWORD *)v18 + 9) = v63;
          os_unfair_lock_unlock(&CA::Render::_cross_display_sources_lock);
          if (v19)
          {
            v26 = v19 + 2;
            do
            {
              v27 = __ldaxr(v26);
              v28 = v27 - 1;
            }
            while (__stlxr(v28, v26));
            if (!v28)
              (*(void (**)(unsigned int *))(*(_QWORD *)v19 + 16))(v19);
          }
        }
      }
    }
  }
}

uint64_t CA::Render::MatchPropertyDependence::run(uint64_t this, CA::Render::Update *a2, double a3, CA::Render::Handle *a4)
{
  if ((*((_BYTE *)a4 + 96) & 0x18) != 0)
    *(_DWORD *)(*(_QWORD *)(this + 48) + 76) = *((_DWORD *)a2 + 62);
  return this;
}

void CA::Render::LayerNode::depth_sort_sublayers(CA::Render::LayerNode *this)
{
  _QWORD *v1;
  CA::Render::LayerNode *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v6;
  double *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  double *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t *v19;
  double v20;
  int v21;
  char v22;
  unint64_t v23;
  char *v24;
  char *v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  int v29;
  char *v30;
  char *v31;
  uint64_t v32;
  _OWORD *v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  _OWORD *v37;
  uint64_t v38;
  char *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t *v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  unint64_t *v64;
  uint64_t v65;
  CA::Render::LayerNode **v66;
  CA::Render::LayerNode *v67;
  void ***v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  CA::Render::LayerNode *v73;
  unint64_t v74;
  CA::Render::LayerNode *v75;
  CA::Render::LayerNode *v76;
  CA::Render::LayerNode **v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int v80;
  double v81;
  double v82;
  unint64_t v83;
  double *v84;
  double *v85;
  double v86;
  double v87;
  double *v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  unint64_t v94;
  double v95;
  double v96;
  unint64_t v97;
  double *v98;
  double *v99;
  double v100;
  double v101;
  double *v102;
  double v103;
  double v104;
  unint64_t v105;
  double *v106;
  double *v107;
  double *v108;
  double v109;
  unsigned int v110;
  int v111;
  unsigned int v112;
  unsigned int v113;
  BOOL v114;
  unint64_t v115;
  double *v116;
  double *v117;
  double *v118;
  double v119;
  _QWORD *v120;
  uint64_t v121;
  unsigned int *v122;
  unsigned int v123;
  unsigned int v124;
  uint64_t v125;
  CA::Render::LayerNode **v126;
  CA::Render::LayerNode *v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  unint64_t v132;
  unint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t *v137;
  double *v138;
  CA::Render::LayerNode **v139;
  CA::Render::LayerNode *v140;
  CA::Render::LayerNode *v141;
  uint64_t i;
  uint64_t *v143;
  uint64_t *v144;
  uint64_t v145;
  char *v146;
  unint64_t v147;
  _QWORD *v148;
  uint64_t *v149;
  uint64_t **v150;
  CA::Render::LayerNode **v151;
  CA::Render::LayerNode **v152;
  unint64_t v153;
  void ***v154;
  _QWORD v155[2];
  _QWORD v156[2];
  _OWORD v157[511];
  _QWORD v158[1022];

  v1 = (_QWORD *)MEMORY[0x1E0C80A78](this);
  v158[1020] = *MEMORY[0x1E0C80C00];
  v153 = 0;
  v154 = 0;
  v151 = 0;
  v152 = 0;
  v3 = v1[3];
  if ((v3 & 0x20) != 0)
  {
    v1[3] = v3 & 0xFFFFFFFFFFFFFFDFLL;
    if ((*(_BYTE *)(v1[4] + 41) & 8) != 0)
    {
      v4 = v1 + 12;
      v5 = (uint64_t *)v1[13];
      if (v5 != v1 + 12)
      {
        LODWORD(v147) = 0;
        v6 = 0;
        v7 = 0;
        v148 = v1;
        v149 = (uint64_t *)&v149;
        v150 = &v149;
        v8 = 16;
        if ((_DWORD)v2)
          v8 = 0;
        v9 = v8 | 4;
        v10 = v8 | 8;
        v11 = 1;
        do
        {
          v12 = v7;
          v7 = (double *)v5;
          while (1)
          {
            v5 = (uint64_t *)*((_QWORD *)v7 + 1);
            v13 = *((_QWORD *)v7 + 3);
            if ((v13 & v9) == 4)
            {
              CA::Render::LayerNode::update_z_range((CA::Render *)v7, v2);
              v13 = *((_QWORD *)v7 + 3);
            }
            v14 = v13 & v10;
            v15 = v13 & 0x400000;
            v16 = v14 && v15 == 0;
            if (!v16)
              break;
            v18 = *(_QWORD *)v7;
            v17 = (_QWORD *)*((_QWORD *)v7 + 1);
            *(_QWORD *)(v18 + 8) = v17;
            *v17 = v18;
            *(_QWORD *)v7 = v7;
            *((_QWORD *)v7 + 1) = &v149;
            v19 = v149;
            v149 = (uint64_t *)v7;
            *(_QWORD *)v7 = v19;
            v19[1] = (uint64_t)v7;
            v7 = (double *)v5;
            if (v5 == v4)
              goto LABEL_22;
          }
          if (v6)
          {
            v20 = v7[30];
            v11 &= v20 <= v12[30];
            v21 = v147;
            if (v20 < v12[31])
              v21 = 1;
            LODWORD(v147) = v21;
          }
          ++v6;
        }
        while (v5 != v4);
LABEL_22:
        v22 = v11;
        if ((v11 & 1) != 0)
        {
          if ((v147 & (v6 > 1)) == 0)
            goto LABEL_156;
        }
        else if (v6 < 2)
        {
          goto LABEL_156;
        }
        v23 = 32 * v6;
        if (32 * v6 > 0x1000)
        {
          v25 = (char *)malloc_type_malloc(32 * v6, 0xF7081F43uLL);
          v24 = v25;
          if (!v25)
            goto LABEL_156;
        }
        else
        {
          MEMORY[0x1E0C80A78](v1);
          v24 = (char *)&v145 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
          bzero(v24, 32 * v6);
        }
        v26 = 4 * v6;
        if (4 * v6 <= 0x1000)
        {
          MEMORY[0x1E0C80A78](v25);
          v27 = (char *)&v145 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
          bzero(v27, 4 * v6);
          goto LABEL_32;
        }
        v27 = (char *)malloc_type_malloc(4 * v6, 0x7BEF6237uLL);
        if (v27)
        {
LABEL_32:
          v28 = v148[13];
          if ((uint64_t *)v28 != v4)
          {
            v29 = v6 - 1;
            v30 = &v27[4 * v6 - 4];
            v31 = &v24[16 * v6 - 8];
            do
            {
              *((_QWORD *)v31 - 1) = ((*(uint64_t *)(v28 + 240) >> 63) | 0x8000000000000000) ^ *(_QWORD *)(v28 + 240);
              *(_QWORD *)v31 = v28;
              *(_QWORD *)v28 = 0;
              *(_DWORD *)v30 = *(_DWORD *)(v28 + 116);
              v30 -= 4;
              *(_DWORD *)(v28 + 116) = v29;
              v28 = *(_QWORD *)(v28 + 8);
              --v29;
              v31 -= 16;
            }
            while ((uint64_t *)v28 != v4);
          }
          if ((v22 & 1) == 0)
          {
            if (v6 > 0x3F)
            {
              bzero(v156, 0x2000uLL);
              v40 = (unint64_t *)v24;
              v41 = v6;
              do
              {
                v42 = *v40;
                v40 += 2;
                ++LODWORD(v156[4 * v42]);
                ++HIDWORD(v156[4 * BYTE1(v42)]);
                ++LODWORD(v156[4 * BYTE2(v42) + 1]);
                ++HIDWORD(v156[4 * BYTE3(v42) + 1]);
                ++LODWORD(v156[4 * BYTE4(v42) + 2]);
                ++DWORD1(v157[2 * BYTE5(v42)]);
                ++DWORD2(v157[2 * BYTE6(v42)]);
                ++HIDWORD(v157[2 * HIBYTE(v42)]);
                --v41;
              }
              while (v41);
              v43 = 0;
              v44 = 0uLL;
              v45 = 0uLL;
              do
              {
                v46 = (int32x4_t *)&v156[4 * v43];
                v47 = v46[6];
                v48 = v46[7];
                v49 = vaddq_s32(*v46, v44);
                v50 = vaddq_s32(v46[1], v45);
                v51 = vaddq_s32(v50, v46[3]);
                v52 = vaddq_s32(v49, v46[2]);
                v53 = vaddq_s32(v52, v46[4]);
                v54 = vaddq_s32(v51, v46[5]);
                *v46 = v44;
                v46[1] = v45;
                v45 = vaddq_s32(v54, v48);
                v44 = vaddq_s32(v53, v47);
                v46[2] = v49;
                v46[3] = v50;
                v46[4] = v52;
                v46[5] = v51;
                v46[6] = v53;
                v46[7] = v54;
                v55 = v43 >= 0xFC;
                v43 += 4;
              }
              while (!v55);
              v56 = 0;
              v155[0] = v24;
              v155[1] = &v24[16 * v6];
              do
              {
                v57 = v155[!(v56 & 1)];
                v58 = (uint64_t *)(v155[v56 & 1] + 8);
                v59 = v6;
                do
                {
                  v60 = *(v58 - 1);
                  v61 = *v58;
                  v62 = &v156[4 * (v60 >> (8 * v56))];
                  v63 = *((unsigned int *)v62 + v56);
                  *((_DWORD *)v62 + v56) = v63 + 1;
                  v64 = (unint64_t *)(v57 + 16 * v63);
                  *v64 = v60;
                  v64[1] = v61;
                  v58 += 2;
                  --v59;
                }
                while (v59);
                ++v56;
              }
              while (v56 != 8);
            }
            else if (v6 >= 2)
            {
              v32 = 1;
              v33 = v24;
              do
              {
                v34 = &v24[16 * v32];
                v35 = *(_QWORD *)v34;
                v36 = *((_QWORD *)v34 + 1);
                v37 = v33;
                v38 = v32;
                while (*(_QWORD *)v37 > v35)
                {
                  --v38;
                  v37[1] = *v37;
                  --v37;
                  if (v38 + 1 <= 1)
                  {
                    v38 = 0;
                    break;
                  }
                }
                v39 = &v24[16 * v38];
                *(_QWORD *)v39 = v35;
                *((_QWORD *)v39 + 1) = v36;
                ++v32;
                ++v33;
              }
              while (v32 != v6);
            }
          }
          v151 = (CA::Render::LayerNode **)&v151;
          v152 = (CA::Render::LayerNode **)&v151;
          if (v6)
          {
            v65 = 8;
            do
            {
              v66 = *(CA::Render::LayerNode ***)&v24[v65];
              *v66 = (CA::Render::LayerNode *)v66;
              v66[1] = (CA::Render::LayerNode *)&v151;
              v67 = (CA::Render::LayerNode *)v151;
              v151 = v66;
              *v66 = v67;
              *((_QWORD *)v67 + 1) = v66;
              v66[11] = 0;
              v66[3] = (CA::Render::LayerNode *)((unint64_t)v66[3] & 0xFFFFFFFFFFFFFFFDLL);
              v65 += 16;
              --v6;
            }
            while (v6);
            if (v23 > 0x1000)
              free(v24);
          }
          v68 = (void ***)v156;
          v156[0] = 0;
          v156[1] = v158;
          v157[0] = xmmword_18474E2F0;
          v153 = 0;
          v154 = (void ***)v156;
          v69 = v148;
          v148[12] = v148 + 12;
          v69[13] = v4;
          v70 = (uint64_t)v152;
          if (v152 == (CA::Render::LayerNode **)&v151)
          {
LABEL_151:
            x_heap_free(v68);
            for (i = v148[13]; (uint64_t *)i != v4; i = *(_QWORD *)(i + 8))
              *(_DWORD *)(i + 116) = *(_DWORD *)&v27[4 * *(unsigned int *)(i + 116)];
            if (v26 > 0x1000)
              free(v27);
            goto LABEL_156;
          }
          v146 = v27;
          v147 = v26;
LABEL_61:
          v71 = *(_QWORD *)(v70 + 8);
          while (2)
          {
            if ((CA::Render::LayerNode ***)v71 == &v151)
              goto LABEL_143;
            while (1)
            {
              if (*(double *)(v70 + 248) <= *(double *)(v71 + 240))
              {
                if ((*(_BYTE *)(v71 + 24) & 2) == 0)
                  goto LABEL_143;
                goto LABEL_75;
              }
              v72 = *(_QWORD *)(v70 + 88);
              if (!v72)
              {
                v72 = CA::Render::compute_occlusion_data(&v153, v70);
                *(_QWORD *)(v70 + 88) = v72;
                if (!v72)
                {
                  v121 = *(_QWORD *)v70;
                  v120 = *(_QWORD **)(v70 + 8);
                  *(_QWORD *)(v121 + 8) = v120;
                  *v120 = v121;
                  *(_QWORD *)v70 = v70;
                  *(_QWORD *)(v70 + 8) = v70;
                  v122 = (unsigned int *)(v70 + 16);
                  do
                  {
                    v123 = __ldaxr(v122);
                    v124 = v123 - 1;
                  }
                  while (__stlxr(v124, v122));
                  if (!v124)
                    CA::Render::LayerNode::delete_node((CA::Render::LayerNode *)v70, v73);
LABEL_146:
                  v70 = (uint64_t)v152;
                  if (v152 == (CA::Render::LayerNode **)&v151)
                  {
                    v68 = v154;
                    v27 = v146;
                    v26 = v147;
                    goto LABEL_151;
                  }
                  goto LABEL_61;
                }
              }
              v74 = *(_QWORD *)(v71 + 88);
              if (v74)
                break;
              v74 = CA::Render::compute_occlusion_data(&v153, v71);
              *(_QWORD *)(v71 + 88) = v74;
              if (v74)
                break;
              v76 = *(CA::Render::LayerNode **)v71;
              v77 = *(CA::Render::LayerNode ***)(v71 + 8);
              *((_QWORD *)v76 + 1) = v77;
              *v77 = v76;
              *(_QWORD *)v71 = v71;
              *(_QWORD *)(v71 + 8) = v71;
              v78 = (unsigned int *)(v71 + 16);
              do
              {
                v79 = __ldaxr(v78);
                v80 = v79 - 1;
              }
              while (__stlxr(v80, v78));
              if (!v80)
                CA::Render::LayerNode::delete_node((CA::Render::LayerNode *)v71, v75);
              v71 = (uint64_t)v77;
              if (v77 == (CA::Render::LayerNode **)&v151)
                goto LABEL_143;
            }
            if (*(double *)v72 >= *(double *)v74)
            {
              if (*(double *)(v74 + 16) > *(double *)v72)
                goto LABEL_80;
            }
            else if (*(double *)(v72 + 16) > *(double *)v74)
            {
LABEL_80:
              v81 = *(double *)(v72 + 8);
              v82 = *(double *)(v74 + 8);
              if (v81 >= v82)
              {
                if (*(double *)(v74 + 24) > v81)
                  goto LABEL_84;
              }
              else if (*(double *)(v72 + 24) > v82)
              {
LABEL_84:
                v83 = *(unsigned int *)(v74 + 72);
                if (!(_DWORD)v83)
                  goto LABEL_98;
                v84 = *(double **)(v74 + 80);
                v85 = *(double **)(v74 + 88);
                v86 = *(double *)(v72 + 32);
                v87 = *(double *)(v72 + 40);
                v88 = *(double **)(v74 + 96);
                v89 = *(double *)(v72 + 48);
                v90 = *(double *)(v72 + 56);
                v91 = *v84 * v86;
                v92 = *v85 * v87;
                v93 = *v88 * v89;
                if (fabs(v91 + v90 + v92 + v93) > 0.0000999999975)
                {
LABEL_90:
                  v96 = v90 + 0.0000999999975;
                  if (v96 + v91 + v92 + v93 >= 0.0)
                  {
                    v115 = 0;
                    v116 = v84 + 1;
                    v117 = v85 + 1;
                    v118 = v88 + 1;
                    while (v83 - 1 != v115)
                    {
                      v119 = v96 + v116[v115] * v86 + v117[v115] * v87 + v118[v115] * v89;
                      ++v115;
                      if (v119 < 0.0)
                      {
                        if (v115 >= v83)
                          break;
                        goto LABEL_91;
                      }
                    }
                  }
                  else
                  {
LABEL_91:
                    v97 = *(unsigned int *)(v72 + 72);
                    if ((_DWORD)v97)
                    {
                      v98 = *(double **)(v72 + 80);
                      v99 = *(double **)(v72 + 88);
                      v100 = *(double *)(v74 + 32);
                      v101 = *(double *)(v74 + 40);
                      v102 = *(double **)(v72 + 96);
                      v103 = *(double *)(v74 + 48);
                      v104 = *(double *)(v74 + 56) + -0.0000999999975;
                      if (v104 + *v98 * v100 + *v99 * v101 + *v102 * v103 > 0.0)
                        goto LABEL_101;
                      v105 = 0;
                      v106 = v98 + 1;
                      v107 = v99 + 1;
                      v108 = v102 + 1;
                      while (v97 - 1 != v105)
                      {
                        v109 = v104 + v106[v105] * v100 + v107[v105] * v101 + v108[v105] * v103;
                        ++v105;
                        if (v109 > 0.0)
                        {
                          if (v105 >= v97)
                            break;
                          goto LABEL_100;
                        }
                      }
                    }
                  }
                }
                else
                {
                  v94 = 0;
                  while (v83 - 1 != v94)
                  {
                    v95 = fabs(v90 + v84[v94 + 1] * v86 + v85[v94 + 1] * v87 + v88[v94 + 1] * v89);
                    ++v94;
                    if (v95 > 0.0000999999975)
                    {
                      if (v94 >= v83)
                        break;
                      goto LABEL_90;
                    }
                  }
LABEL_98:
                  if (*(_DWORD *)(v70 + 116) >= *(_DWORD *)(v71 + 116))
                  {
                    LODWORD(v97) = *(_DWORD *)(v72 + 72);
LABEL_100:
                    if ((_DWORD)v97)
                    {
LABEL_101:
                      v110 = 0;
                      do
                      {
                        v111 = v110 ? v110 : v97;
                        if (CA::Render::separating_axis(v72, v74, v111 - 1, v110))
                          goto LABEL_75;
                      }
                      while ((_DWORD)v97 != ++v110);
                    }
                    if (!(_DWORD)v83)
                      goto LABEL_126;
                    v112 = 0;
                    do
                    {
                      if (v112)
                        v113 = v112;
                      else
                        v113 = v83;
                      v114 = CA::Render::separating_axis(v74, v72, v113 - 1, v112);
                      if (v114)
                        break;
                      v16 = (_DWORD)v83 - 1 == v112++;
                    }
                    while (!v16);
                    if (!v114)
                    {
LABEL_126:
                      v125 = *(_QWORD *)(v71 + 24);
                      if ((v125 & 2) == 0
                        && ((CA::Render::in_positive_half_space((double *)v74, v72) & 1) != 0
                         || CA::Render::in_negative_half_space((double *)v72, v74)))
                      {
                        v127 = *(CA::Render::LayerNode **)v71;
                        v126 = *(CA::Render::LayerNode ***)(v71 + 8);
                        *((_QWORD *)v127 + 1) = v126;
                        *v126 = v127;
                        *(_QWORD *)(v71 + 8) = v71;
                        v128 = v152;
                        v152 = (CA::Render::LayerNode **)v71;
                        *(_QWORD *)v71 = &v151;
                        *v128 = v71;
                        *(_QWORD *)(v71 + 8) = v128;
                        *(_QWORD *)(v71 + 24) = v125 | 2;
                        goto LABEL_146;
                      }
                      v129 = *(_QWORD *)(v70 + 152);
                      if (v129)
                        LODWORD(v129) = *(_DWORD *)(v129 + 8);
                      v130 = *(_QWORD *)(v71 + 152);
                      if (v130)
                        v131 = *(_DWORD *)(v130 + 8);
                      else
                        v131 = 0;
                      if (CA::Render::in_both_half_spaces((double *)v74, v72, (float)((float)((v129 + 1) * (v129 + 1)) * 0.0001))&& (fabs(*(double *)(v74 + 32)) >= 0.0000999999975|| fabs(*(double *)(v74 + 40)) >= 0.0000999999975|| fabs(*(double *)(v74 + 48) + -1.0) >= 0.0000999999975))
                      {
                        v132 = v74;
                        v71 = v70;
                        v74 = v72;
                      }
                      else
                      {
                        if (!CA::Render::in_both_half_spaces((double *)v72, v74, (float)((float)((v131 + 1) * (v131 + 1)) * 0.0001)))
                        {
LABEL_143:
                          v133 = *(_QWORD *)(v70 + 88);
                          if (v133)
                          {
                            *(_QWORD *)(v133 + 64) = v153;
                            v153 = v133;
                          }
                          v135 = *(_QWORD *)v70;
                          v134 = *(_QWORD **)(v70 + 8);
                          *(_QWORD *)(v135 + 8) = v134;
                          *v134 = v135;
                          *(_QWORD *)(v70 + 8) = v70;
                          v136 = v148;
                          v137 = (uint64_t *)v148[13];
                          v148[13] = v70;
                          *(_QWORD *)v70 = v4;
                          *v137 = v70;
                          *(_QWORD *)(v70 + 8) = v137;
                          *(_QWORD *)(v70 + 88) = v136;
                          *(_QWORD *)(v70 + 24) &= ~2uLL;
                          goto LABEL_146;
                        }
                        if (fabs(*(double *)(v72 + 32)) >= 0.0000999999975
                          || fabs(*(double *)(v72 + 40)) >= 0.0000999999975)
                        {
                          v132 = v72;
                        }
                        else
                        {
                          v132 = v72;
                          if (fabs(*(double *)(v72 + 48) + -1.0) < 0.0000999999975)
                            goto LABEL_143;
                        }
                      }
                      v138 = (double *)(v132 + 32);
                      v140 = *(CA::Render::LayerNode **)v71;
                      v139 = *(CA::Render::LayerNode ***)(v71 + 8);
                      *((_QWORD *)v140 + 1) = v139;
                      *v139 = v140;
                      *(_QWORD *)v71 = v71;
                      *(_QWORD *)(v71 + 8) = v71;
                      *(_QWORD *)(v74 + 64) = v153;
                      v153 = v74;
                      *(_QWORD *)(v71 + 88) = 0;
                      *(_QWORD *)(v71 + 24) &= ~2uLL;
                      v141 = CA::Render::LayerNode::split_node((CA::Render::LayerNode *)v71, v138);
                      CA::Render::insert_node_by_minz((CA::Render::LayerNode **)&v151, v141);
                      CA::Render::insert_node_by_minz((CA::Render::LayerNode **)&v151, (CA::Render::LayerNode *)v71);
                      goto LABEL_146;
                    }
                  }
                }
              }
            }
LABEL_75:
            v71 = *(_QWORD *)(v71 + 8);
            continue;
          }
        }
LABEL_156:
        v143 = (uint64_t *)*v4;
        v143[1] = (uint64_t)v150;
        *v150 = v143;
        v144 = v149;
        v149[1] = (uint64_t)v4;
        *v4 = (uint64_t)v144;
      }
    }
  }
}

BOOL CAShmemImageQueueCopyImageInfo(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, BOOL *a7, _DWORD *a8, double a9, float a10)
{
  uint64_t v11;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  _BOOL4 v19;
  int v20;
  double v21;
  double v22;
  uint64_t v23;
  _DWORD *v24;
  double v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unsigned int *v29;
  double v30;
  unint64_t v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  double v40;
  _BOOL4 v41;
  size_t v42;
  double **v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  double **v47;
  double v48;
  unint64_t v49;
  double *v50;
  double v51;
  double v52;
  _BYTE *v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int8x16_t v62;
  double v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  int v67;
  uint64_t *v68;
  int v69;
  unsigned int *v70;
  unsigned int v71;
  uint64_t v72;
  BOOL v73;
  _DWORD *v74;
  unsigned int v75;
  int v76;
  int32x2_t *v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v84;
  double v85;
  int8x16_t *v86;
  uint64_t v87;
  int v88;
  char v90;
  char v91;
  uint64_t v92;
  char v93;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _DWORD *v98;
  BOOL *v99;
  uint64_t v100;
  uint64_t v101;
  double v102;
  double v103;
  uint64_t v105;
  BOOL v107;
  int v108;
  double v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  int v114;
  _BOOL4 v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  _BOOL4 v119;
  _BOOL4 v120;
  double v121;
  double v122;
  unsigned int v123;
  double v124;
  double v125;
  unsigned int *v126;
  unsigned int v127;
  IOSurfaceID v128;
  IOSurfaceRef v129;
  unint64_t v131;
  int v132;
  double *v133;
  unsigned int *v134;
  unsigned int v135;
  unsigned int v136;
  double v137;
  double v138;
  uint64_t *v141;
  NSObject *v142;
  int v143;
  int v144;
  const char *v145;
  NSObject *v146;
  os_signpost_id_t v147;
  uint32_t v148;
  int v149;
  int v150;
  int v151;
  const char *v152;
  int v153;
  const char *v154;
  int v155;
  const char *v156;
  int v157;
  const char *v158;
  int v159;
  int v160;
  int v161;
  int v162;
  const char *v163;
  int v164;
  const char *v165;
  const char *v166;
  int v167;
  int v168;
  int v169;
  int v170;
  const char *v171;
  int v172;
  int v173;
  int v174;
  int v175;
  const char *v176;
  int v177;
  int v178;
  uint64_t v180;
  int v181;
  _BOOL4 v182;
  os_signpost_id_t v183;
  uint64_t v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  BOOL *v190;
  _DWORD *v191;
  uint64_t v192;
  int8x16_t v193;
  int v194;
  uint64_t v195;
  int v196;
  int v197;
  unint64_t v198;
  uint64_t v199;
  unint64_t v200;
  uint8_t buf[4];
  int v202;
  __int16 v203;
  double v204;
  __int16 v205;
  int v206;
  __int16 v207;
  int v208;
  __int16 v209;
  int v210;
  __int16 v211;
  int v212;
  __int16 v213;
  int v214;
  __int16 v215;
  int v216;
  __int16 v217;
  int v218;
  __int16 v219;
  int v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;

  v191 = a8;
  v190 = a7;
  v199 = a4;
  v11 = a3;
  v185 = a1;
  v224 = *MEMORY[0x1E0C80C00];
  v14 = (unint64_t *)(a3 + 8);
  v15 = atomic_load((unint64_t *)(a3 + 8));
  v183 = *(unsigned int *)(a3 + 88);
  if ((v15 & 0x800) != 0)
    v16 = v15 & 0xFFFFFFFFFFFFBFFFLL;
  else
    v16 = v15;
  v17 = v16 & 0x180;
  if (v17 == 384)
  {
    v19 = (v16 & 0x800) == 0;
    goto LABEL_9;
  }
  if (v17 == 256)
  {
    v19 = (v16 & 0x800) == 0;
    *(_OWORD *)(a5 + 96) = 0u;
    *(_OWORD *)(a5 + 112) = 0u;
    *(_OWORD *)(a5 + 64) = 0u;
    *(_OWORD *)(a5 + 80) = 0u;
    *(_OWORD *)(a5 + 32) = 0u;
    *(_OWORD *)(a5 + 48) = 0u;
    *(_OWORD *)a5 = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
    v24 = (_DWORD *)(v11 + 16);
    v23 = *(unsigned int *)(v11 + 16);
    if (*(_DWORD *)(v11 + 284) != (_DWORD)v23)
    {
      v20 = 0;
      v18 = 1;
      v22 = INFINITY;
      v21 = -INFINITY;
      goto LABEL_24;
    }
    v25 = *(double *)(v11 + 288);
    v18 = 1;
    v22 = INFINITY;
    v21 = -INFINITY;
    goto LABEL_19;
  }
  if (v17 != 128)
  {
    v19 = (v16 & 0x800) == 0;
    v18 = a10 < 0.0;
    if (a10 > 0.0)
      goto LABEL_13;
    if (a10 < 0.0)
    {
      v20 = 0;
      v18 = 1;
      v22 = INFINITY;
      *(double *)&v26 = -INFINITY;
      goto LABEL_14;
    }
LABEL_9:
    v18 = 0;
    v20 = 0;
    v21 = INFINITY;
    v22 = INFINITY;
    goto LABEL_15;
  }
  v18 = 0;
  v19 = (v16 & 0x800) == 0;
LABEL_13:
  v20 = 1;
  v22 = -INFINITY;
  *(double *)&v26 = INFINITY;
LABEL_14:
  v21 = *(double *)&v26;
LABEL_15:
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  v24 = (_DWORD *)(v11 + 16);
  v23 = *(unsigned int *)(v11 + 16);
  if (*(_DWORD *)(v11 + 284) != (_DWORD)v23)
    goto LABEL_24;
  v25 = *(double *)(v11 + 288);
  if (!v20)
  {
LABEL_19:
    v20 = 0;
    if (!v18 || v25 <= a9)
      goto LABEL_24;
    v18 = 1;
    goto LABEL_22;
  }
  v20 = 1;
  if (v25 < a9)
LABEL_22:
    *(_BYTE *)(a5 + 108) = 1;
LABEL_24:
  v27 = atomic_load(v14);
  if ((v27 & 0x1000000000000000) != 0)
  {
    if (!a2)
      goto LABEL_390;
    v28 = 0;
    v29 = (unsigned int *)(v11 + 556);
    v30 = 0.0;
    v31 = a2;
    do
    {
      if (*(v29 - 8) && (*(v29 - 10) == 286331153 || *(v29 - 10) == 572662306) && *v29 > v28)
      {
        v32 = *(double *)(v29 - 21);
        if (v32 < *(double *)(v29 - 25))
          v32 = *(double *)(v29 - 25);
        if (v30 < v32)
          v30 = v32;
        v28 = *v29;
      }
      v29 += 40;
      --v31;
    }
    while (v31);
    v33 = 0;
    v34 = 0;
    v35 = (_DWORD *)(v11 + 524);
    v36 = -1;
    v37 = -1;
    do
    {
      if (*v35)
      {
        v34 += (unint64_t)v35[1] >> 31;
        if (v35[8] > v28 && v35[8] < v36)
        {
          v37 = v33;
          v36 = v35[8];
        }
      }
      ++v33;
      v35 += 40;
    }
    while (a2 != v33);
    if (v37 != -1)
    {
      v38 = v11 + 160 * v37;
      if ((*(_DWORD *)(v38 + 528) & 0x80000000) != 0)
      {
        v133 = (double *)(v38 + 456);
        v134 = (unsigned int *)(v38 + 528);
        if ((*v134 & 0x4000000) == 0)
          *v133 = *v133 + v30;
        do
          v135 = __ldaxr(v134);
        while (__stlxr(v135 & 0xFBFFFFFF, v134));
        do
          v136 = __ldaxr(v134);
        while (__stlxr(v136 & 0x7FFFFFFF, v134));
        if (v34 != 1)
          goto LABEL_46;
        goto LABEL_45;
      }
    }
    if (!v34)
    {
LABEL_390:
      do
LABEL_45:
        v39 = __ldaxr(v14);
      while (__stlxr(v39 & 0xEFFFFFFFFFFFFFFFLL, v14));
    }
  }
LABEL_46:
  v192 = a5;
  v40 = 0.0;
  v196 = v23;
  v200 = a2;
  v198 = v16;
  v197 = v20;
  LODWORD(v195) = v18;
  if (a2 >= 2)
  {
    v41 = v19;
    v42 = 8 * a2;
    if (8 * a2 > 0x1000)
    {
      v43 = (double **)malloc_type_malloc(8 * a2, 0x9C618797uLL);
    }
    else
    {
      MEMORY[0x1E0C80A78](v23);
      v43 = (double **)((char *)&v180 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0));
      bzero(v43, v42);
    }
    v44 = 0;
    v45 = v11 + 456;
    a2 = v200;
    v46 = v200;
    do
    {
      if (*(_DWORD *)(v45 + 68) && *(_DWORD *)(v45 + 64) == *v24)
        v43[v44++] = (double *)v45;
      v45 += 160;
      --v46;
    }
    while (v46);
    v40 = 0.0;
    if (v44 >= 2)
    {
      std::__introsort<std::_ClassicAlgPolicy,CAShmemImageQueueCopyImageInfo::$_0 &,_CAShmemImageQueueImage **,false>(v43, &v43[v44], 126 - 2 * __clz(v44), 1);
      a2 = v200;
      v47 = v43 + 1;
      v48 = **v43;
      v49 = v44 - 1;
      v40 = INFINITY;
      do
      {
        v50 = *v47++;
        v51 = *v50;
        v52 = *v50 - v48;
        if (v52 < v40)
          v40 = v52;
        v48 = v51;
        --v49;
      }
      while (v49);
    }
    if (v42 > 0x1000)
    {
      free(v43);
      a2 = v200;
    }
    LODWORD(v23) = v196;
    v19 = v41;
    v16 = v198;
    v20 = v197;
    v18 = v195;
  }
  v194 = a6;
  v221 = 0;
  v222 = 0;
  v53 = &unk_1ECDC6000;
  v223 = 0;
  if (!a2)
  {
    v54 = 0;
    v56 = 0;
    LODWORD(v58) = 0;
    v57 = 0;
    v101 = -1;
    v63 = v21;
    v97 = -1;
    v100 = v192;
    v98 = v191;
    v99 = v190;
    goto LABEL_155;
  }
  v182 = v19;
  v54 = 0;
  v55 = 0;
  v56 = 0;
  v57 = 0;
  v58 = 0;
  v59 = v199 + 252;
  v60 = v199 + 256;
  v61 = v20 | v18;
  v62 = (int8x16_t)xmmword_18474E240;
  v184 = -1;
  v181 = 835321960;
  v189 = -1;
  v63 = v21;
  v180 = v23;
  v188 = v199 + 256;
  v187 = v199 + 252;
  v186 = v11;
  do
  {
    v64 = v11 + 160 * v55;
    if (!*(_DWORD *)(v64 + 524))
      goto LABEL_95;
    v65 = *(_DWORD *)(v11 + 160 * v55 + 520);
    if (v54 <= 2)
    {
      v66 = v11 + 160 * v55;
      v67 = *(_DWORD *)(v66 + 512);
      v68 = &v221 + v54;
      LODWORD(v66) = *(_DWORD *)(v66 + 516);
      *(_DWORD *)v68 = v67;
      *((_DWORD *)v68 + 1) = v66;
      ++v54;
    }
    if (v53[2713])
    {
      v95 = v57;
      v96 = v61;
      v193 = v62;
      kdebug_trace();
      v62 = v193;
      v61 = v96;
      v60 = v188;
      v57 = v95;
      v53 = (_BYTE *)&unk_1ECDC6000;
      v18 = v195;
      v20 = v197;
      v16 = v198;
      a2 = v200;
      LODWORD(v23) = v196;
    }
    v69 = v65 - v23;
    v70 = (unsigned int *)(v11 + 160 * v55 + 516);
    v71 = *v70;
    if ((int)*v70 > 572662305)
    {
      if (v71 == 572662306 || v71 == 858993459)
      {
        v84 = *(_DWORD *)(v11 + 160 * v55 + 552);
        if (v58 <= v84)
          v58 = v84;
        else
          v58 = v58;
LABEL_95:
        ++v56;
        goto LABEL_96;
      }
    }
    else if (v71)
    {
      if (v71 == 286331153)
      {
        v72 = v11 + 160 * v55;
        v73 = (*(_DWORD *)(v72 + 528) & 0x1000000) == 0 && (v16 & 0x20000000000000) == 0;
        v74 = (_DWORD *)(v73 ? v60 : v59);
        if (*v74 - *(_DWORD *)(v72 + 544) >= 0)
        {
          while (1)
          {
            v75 = __ldaxr(v70);
            if (v75 != 286331153)
              goto LABEL_145;
            if (!__stlxr(0, v70))
              goto LABEL_82;
          }
        }
      }
    }
    else
    {
LABEL_82:
      v76 = v62.i32[2];
      if (v62.i32[2] <= v62.i32[3])
        v76 = v62.i32[3];
      if (v69 < 0)
      {
        if (v76 >= 0x3FFFFFFF)
        {
          v86 = (int8x16_t *)(v11 + 160 * v55);
          v87 = v86[35].i64[1];
          v88 = v87;
          if ((int)v87 <= SHIDWORD(v87))
            v88 = HIDWORD(v87);
          if (v88 <= 1073741822)
            v62 = v86[35];
        }
        while (!__ldaxr(v70))
        {
          if (!__stlxr(0x33333333u, v70))
          {
            v58 = *(unsigned int *)(v199 + 248);
            *(_DWORD *)(v11 + 160 * v55 + 552) = v58;
            goto LABEL_95;
          }
        }
        goto LABEL_145;
      }
      if (v76 <= 1073741822)
      {
        v77 = (int32x2_t *)(v11 + 160 * v55 + 560);
        v78 = v56;
        v79 = v54;
        v80 = v58;
        v81 = v57;
        v82 = v61;
        v193 = v62;
        CA::BoundsImpl::Union(v77, *(int32x2_t *)v62.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v62, v62, 8uLL));
        v62 = v193;
        v61 = v82;
        v60 = v188;
        v57 = v81;
        v58 = v80;
        v54 = v79;
        v56 = v78;
        v11 = v186;
        v59 = v187;
        v53 = (_BYTE *)&unk_1ECDC6000;
        v18 = v195;
        v20 = v197;
        v16 = v198;
        a2 = v200;
        LODWORD(v23) = v196;
      }
    }
    if ((*(_DWORD *)(v11 + 160 * v55 + 528) & 0x80000000) != 0)
      goto LABEL_96;
    if ((v69 & 0x80000000) == 0)
    {
      v85 = *(double *)(v64 + 456);
      if (v20)
      {
        if (v85 > a9)
        {
          if (v65 != (_DWORD)v23)
            goto LABEL_122;
          if (v85 < v63)
            goto LABEL_121;
          if (v85 <= v63 || v85 >= v21)
            goto LABEL_122;
          goto LABEL_123;
        }
        if (v85 > v22)
        {
LABEL_125:
          if (v65 == (_DWORD)v23)
          {
            v91 = v61 ^ 1;
            if (v189 == -1)
              v91 = 1;
            if ((v91 & 1) == 0)
            {
              v92 = v11 + 160 * v189;
              if (!*(_DWORD *)(v92 + 516))
              {
                if (v194)
                {
                  *(_DWORD *)(v92 + 516) = 572662306;
                  v58 = *(unsigned int *)(v199 + 248);
                  *(_DWORD *)(v11 + 160 * v55 + 552) = v58;
                }
              }
            }
            v189 = v55;
            v22 = v85;
          }
          goto LABEL_96;
        }
      }
      else
      {
        if (v85 < a9)
          v90 = v18;
        else
          v90 = 0;
        if ((v90 & 1) != 0)
        {
          if (v65 != (_DWORD)v23)
            goto LABEL_122;
          if (v85 > v63)
          {
LABEL_121:
            v63 = *(double *)(v64 + 456);
            v184 = v55;
            goto LABEL_122;
          }
          if (v85 >= v63 || v85 <= v21)
LABEL_122:
            v85 = v21;
LABEL_123:
          ++v57;
          v21 = v85;
          goto LABEL_96;
        }
        if (v18)
        {
          if (v85 < v22)
            goto LABEL_125;
        }
        else if (vabdd_f64(v85, a9) < vabdd_f64(v22, a9))
        {
          goto LABEL_125;
        }
      }
    }
    v93 = v61 ^ 1;
    if (v65 != (_DWORD)v23)
      v93 = 1;
    if ((v93 & 1) == 0 && !*v70 && v194)
    {
      while (!__ldaxr(v70))
      {
        if (!__stlxr(0x22222222u, v70))
        {
          v58 = *(unsigned int *)(v199 + 248);
          *(_DWORD *)(v11 + 160 * v55 + 552) = v58;
          goto LABEL_96;
        }
      }
LABEL_145:
      __clrex();
    }
LABEL_96:
    ++v55;
  }
  while (v55 != a2);
  v97 = v189;
  v98 = v191;
  v99 = v190;
  if (v189 == -1)
  {
    v100 = v192;
    v19 = v182;
    v101 = v184;
    if ((v16 & 2) != 0 && v57)
    {
      --v57;
      *(_BYTE *)(v192 + 108) = 1;
      v97 = v101;
      v22 = v63;
    }
  }
  else
  {
    v100 = v192;
    v19 = v182;
    v101 = v184;
  }
LABEL_155:
  if ((v16 & 0x4000) != 0 && v97 != -1 && v101 != -1 && a10 != 0.0 && v97 != v101)
  {
    v102 = *(double *)(v199 + 112) * 0.6;
    v103 = vabdd_f64(v63, a9);
    if (*(_DWORD *)(v11 + 160 * v97 + 540) && v103 < v102)
    {
      v21 = v21 - v102;
      --v57;
      v97 = v101;
      v22 = v63;
    }
  }
  if (v99)
  {
    if (v56 > *(unsigned __int8 *)(v11 + 95))
      v105 = 0;
    else
      v105 = -1;
    v107 = a10 != 0.0 && v57 != v105;
    *v99 = v107;
  }
  if (v98)
    *v98 = v58;
  v108 = v194;
  if (v97 != -1)
  {
    if (((v19 | v18 ^ 1) & 1) != 0 || v101 == -1)
    {
      v109 = v63;
      v110 = v97;
      v63 = v22;
    }
    else
    {
      v109 = v22;
      v110 = v101;
      v101 = v97;
    }
    v111 = v11 + 456;
    v112 = v11 + 456 + 160 * v110;
    v113 = *(_DWORD *)(v112 + 60);
    if (v194)
    {
      v195 = v11 + 456 + 160 * v110;
      v114 = v194;
      v115 = v19;
      v116 = v97;
      v117 = v101;
      update_image_sample(v185, v11, v195, v199, a9);
      v101 = v117;
      v97 = v116;
      v19 = v115;
      v108 = v114;
      v111 = v11 + 456;
      v112 = v195;
      v20 = v197;
      LODWORD(v16) = v198;
    }
    v118 = v101 == -1 || v19;
    if ((v118 & 1) == 0)
    {
      *(_QWORD *)(v100 + 32) = *(_QWORD *)(v11 + 456 + 160 * v110 + 8);
      *(double *)(v100 + 40) = v63;
      v112 = v11 + 456 + 160 * v101;
      update_image_sample(v185, v11, v112, v199, a9);
      v20 = v197;
      LODWORD(v16) = v198;
    }
    if (v113)
      v119 = 0;
    else
      v119 = *(_DWORD *)(v112 + 60) == 286331153;
    if (BYTE14(xmmword_1ECDC6AD0))
    {
      v138 = *(double *)(v112 + 128);
      if (v138 != 0.0 && v119)
      {
        if (*(double *)(v199 + 768) < v138)
          v138 = *(double *)(v199 + 768);
        *(double *)(v199 + 768) = v138;
      }
    }
    if (v20)
    {
      if (v109 <= v63)
        goto LABEL_200;
LABEL_199:
      v21 = v109;
    }
    else if (v63 > v109)
    {
      goto LABEL_199;
    }
LABEL_200:
    v120 = 0;
    v121 = *(double *)(v11 + 296);
    v122 = *(double *)(v11 + 304);
    if (!byte_1ECDC6AAC)
    {
      v123 = v108 & WORD1(v16);
      if (v123)
      {
        if ((v123 & v19) != 0)
        {
          if ((*(_QWORD *)&v21 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
            goto LABEL_210;
          if (v122 >= a9)
            v124 = a9;
          else
            v124 = *(double *)(v11 + 304);
          if (v121 > v124)
            v124 = *(double *)(v11 + 296);
          if (v124 == a9)
          {
            if (v122 >= v21)
              v137 = v21;
            else
              v137 = *(double *)(v11 + 304);
            if (v121 > v137)
              v137 = *(double *)(v11 + 296);
            v120 = v137 == v21;
          }
          else
          {
LABEL_210:
            v120 = 0;
          }
        }
      }
    }
    *(_DWORD *)v100 = *(_DWORD *)(v112 + 68);
    *(_DWORD *)(v100 + 8) = *(_DWORD *)(v112 + 72);
    *(_QWORD *)(v100 + 12) = *(_QWORD *)(v112 + 76);
    *(_DWORD *)(v100 + 20) = *(unsigned __int8 *)(v112 + 120);
    *(_DWORD *)(v100 + 24) = *(_DWORD *)(v112 + 84);
    *(_QWORD *)(v100 + 48) = *(_QWORD *)(v112 + 8);
    *(_DWORD *)(v100 + 4) = *(_DWORD *)(v112 + 64);
    if (v19)
      v125 = v63;
    else
      v125 = v109;
    *(double *)(v100 + 56) = v125;
    *(_OWORD *)(v100 + 112) = *(_OWORD *)(v112 + 104);
    *(double *)(v100 + 64) = v21;
    *(double *)(v100 + 72) = v40;
    *(_OWORD *)(v100 + 88) = *(_OWORD *)(v112 + 136);
    *(_DWORD *)(v100 + 104) = -858993459 * ((unint64_t)(v112 - v111) >> 5);
    *(_BYTE *)(v100 + 109) = v120;
    *(_QWORD *)(v100 + 80) = 0;
    if (*(_DWORD *)(v11 + 448) == 1)
    {
      v126 = (unsigned int *)(v112 + 152);
      do
        v127 = __ldaxr(v126);
      while (__stlxr(v127 + 1, v126));
    }
    v128 = *(_DWORD *)(v112 + 56);
    if (v128)
    {
      v129 = IOSurfaceLookup(v128);
      *(_QWORD *)(v100 + 80) = IOSurfaceGetIndexedTimestamp();
      if (v129)
        CFRelease(v129);
    }
    if (BYTE9(xmmword_1ECDC6A90) && v120)
    {
      kdebug_trace();
      if (!v19)
        goto LABEL_225;
    }
    else if (!v19)
    {
LABEL_225:
      if (*(_QWORD *)(v100 + 32) && *(_QWORD *)(v100 + 48))
      {
        v131 = v200;
        if (*(double *)(v100 + 40) != 0.0 && *(double *)(v100 + 56) != 0.0)
        {
          v132 = 1;
          goto LABEL_254;
        }
        v132 = 1;
        goto LABEL_257;
      }
    }
    v131 = v200;
    v132 = 0;
    if (v63 != 0.0)
    {
LABEL_254:
      if (a10 != 0.0 && (*(_DWORD *)(v100 + 8) & 0x20) == 0)
        *(_DWORD *)(v199 + 268) |= 0x800u;
    }
LABEL_257:
    if (v108)
    {
      if (v132)
        v63 = *(double *)(v100 + 40);
      if (BYTE9(xmmword_1ECDC6A90))
      {
        kdebug_trace();
        kdebug_trace();
        v131 = v200;
      }
      if (CADeviceSupportsAPT::once != -1)
      {
        dispatch_once(&CADeviceSupportsAPT::once, &__block_literal_global_37);
        v131 = v200;
      }
      if (fabs(a9 - v63) >= dbl_18474E450[CADeviceSupportsAPT::supports_apt == 0] && v119)
      {
        if (CAImageQueueStallLog(void)::onceToken[0] != -1)
        {
          dispatch_once(CAImageQueueStallLog(void)::onceToken, &__block_literal_global_75);
          v131 = v200;
        }
        v141 = &CAImageQueueStallLog(void)::log;
      }
      else
      {
        if (CAImageQueueLog(void)::onceToken[0] != -1)
        {
          dispatch_once(CAImageQueueLog(void)::onceToken, &__block_literal_global_11815);
          v131 = v200;
        }
        v141 = &CAImageQueueLog(void)::log;
      }
      v142 = *v141;
      switch(v54)
      {
        case 0uLL:
          if ((_DWORD)v183 && os_signpost_enabled(v142))
          {
            v143 = *(_DWORD *)(v112 + 56);
            v144 = *(_DWORD *)(v199 + 248);
            *(_DWORD *)buf = 67240960;
            v202 = v143;
            v203 = 2050;
            v204 = a9;
            v205 = 1026;
            v206 = v144;
            v207 = 1026;
            v208 = v196;
            v145 = "ID is queue ID. surfaceID=%{public, name=surfaceID}#x serverSamplingTime=%{public, name=serverSamplin"
                   "gTime}f updateSeed=%{public, name=updateSeed}#x queueGeneration=%{public, name=queueGeneration}u samples=none";
            v146 = v142;
            v147 = v183;
            v148 = 30;
            goto LABEL_386;
          }
          return v97 != -1;
        case 1uLL:
          if (!(_DWORD)v183 || !os_signpost_enabled(v142))
            return v97 != -1;
          v149 = *(_DWORD *)(v112 + 56);
          v150 = *(_DWORD *)(v199 + 248);
          if (SHIDWORD(v221) > 572662305)
          {
            if (HIDWORD(v221) != 572662306)
            {
              v151 = v196;
              if (HIDWORD(v221) == 858993459)
              {
                v152 = "flushed";
                goto LABEL_320;
              }
LABEL_319:
              v152 = "<unknown>";
              goto LABEL_320;
            }
            v152 = "consumed";
          }
          else
          {
            if (HIDWORD(v221))
            {
              v151 = v196;
              if (HIDWORD(v221) == 286331153)
              {
                v152 = "displayed";
LABEL_320:
                v159 = *v152;
                *(_DWORD *)buf = 67241472;
                v202 = v149;
                v203 = 2050;
                v204 = a9;
                v205 = 1026;
                v206 = v150;
                v207 = 1026;
                v208 = v151;
                v209 = 1026;
                v210 = v221;
                v211 = 1026;
                v212 = v159;
                v145 = "ID is queue ID. surfaceID=%{public, name=surfaceID}#x serverSamplingTime=%{public, name=serverSam"
                       "plingTime}f updateSeed=%{public, name=updateSeed}#x queueGeneration=%{public, name=queueGeneratio"
                       "n}u samples=[(%{public, name=sample0Surface}#x, %{public, name=sample0State}c)]";
                v146 = v142;
                v147 = v183;
                v148 = 42;
                goto LABEL_386;
              }
              goto LABEL_319;
            }
            v152 = "unconsumed";
          }
          v151 = v196;
          goto LABEL_320;
        case 2uLL:
          if (!(_DWORD)v183 || !os_signpost_enabled(v142))
            return v97 != -1;
          if (SHIDWORD(v221) > 572662305)
          {
            if (HIDWORD(v221) != 572662306)
            {
              v153 = v196;
              if (HIDWORD(v221) == 858993459)
              {
                v154 = "flushed";
                goto LABEL_324;
              }
              goto LABEL_323;
            }
            v154 = "consumed";
          }
          else
          {
            if (HIDWORD(v221))
            {
              v153 = v196;
              if (HIDWORD(v221) == 286331153)
              {
                v154 = "displayed";
                goto LABEL_324;
              }
LABEL_323:
              v154 = "<unknown>";
LABEL_324:
              v160 = *(_DWORD *)(v112 + 56);
              v161 = *(_DWORD *)(v199 + 248);
              v162 = *v154;
              if (SHIDWORD(v222) > 572662305)
              {
                if (HIDWORD(v222) == 572662306)
                {
                  v163 = "consumed";
                  goto LABEL_334;
                }
                if (HIDWORD(v222) == 858993459)
                {
                  v163 = "flushed";
                  goto LABEL_334;
                }
              }
              else
              {
                if (!HIDWORD(v222))
                {
                  v163 = "unconsumed";
                  goto LABEL_334;
                }
                if (HIDWORD(v222) == 286331153)
                {
                  v163 = "displayed";
                  goto LABEL_334;
                }
              }
              v163 = "<unknown>";
LABEL_334:
              v164 = *v163;
              *(_DWORD *)buf = 67241984;
              v202 = v160;
              v203 = 2050;
              v204 = a9;
              v205 = 1026;
              v206 = v161;
              v207 = 1026;
              v208 = v153;
              v209 = 1026;
              v210 = v221;
              v211 = 1026;
              v212 = v162;
              v213 = 1026;
              v214 = v222;
              v215 = 1026;
              v216 = v164;
              v145 = "ID is queue ID. surfaceID=%{public, name=surfaceID}#x serverSamplingTime=%{public, name=serverSampl"
                     "ingTime}f updateSeed=%{public, name=updateSeed}#x queueGeneration=%{public, name=queueGeneration}u "
                     "samples=[(%{public, name=sample0Surface}#x, %{public, name=sample0State}c), (%{public, name=sample1"
                     "Surface}#x, %{public, name=sample1State}c)]";
              v146 = v142;
              v147 = v183;
              v148 = 54;
LABEL_386:
              _os_signpost_emit_with_name_impl(&dword_184457000, v146, OS_SIGNPOST_EVENT, v147, "ImageQueueSample", v145, buf, v148);
              return v97 != -1;
            }
            v154 = "unconsumed";
          }
          v153 = v196;
          goto LABEL_324;
        case 3uLL:
          if (v131 >= 4)
          {
            if (!(_DWORD)v183 || !os_signpost_enabled(v142))
              return v97 != -1;
            if (SHIDWORD(v221) > 572662305)
            {
              if (HIDWORD(v221) != 572662306)
              {
                v155 = v196;
                if (HIDWORD(v221) == 858993459)
                {
                  v156 = "flushed";
                  goto LABEL_340;
                }
                goto LABEL_339;
              }
              v156 = "consumed";
            }
            else
            {
              if (HIDWORD(v221))
              {
                v155 = v196;
                if (HIDWORD(v221) == 286331153)
                {
                  v156 = "displayed";
                  goto LABEL_340;
                }
LABEL_339:
                v156 = "<unknown>";
LABEL_340:
                if (SHIDWORD(v222) > 572662305)
                {
                  if (HIDWORD(v222) == 572662306)
                  {
                    v165 = "consumed";
                    goto LABEL_360;
                  }
                  if (HIDWORD(v222) == 858993459)
                  {
                    v165 = "flushed";
                    goto LABEL_360;
                  }
                }
                else
                {
                  if (!HIDWORD(v222))
                  {
                    v165 = "unconsumed";
                    goto LABEL_360;
                  }
                  if (HIDWORD(v222) == 286331153)
                  {
                    v165 = "displayed";
                    goto LABEL_360;
                  }
                }
                v165 = "<unknown>";
LABEL_360:
                v167 = *(_DWORD *)(v112 + 56);
                v168 = *(_DWORD *)(v199 + 248);
                v169 = *v156;
                v170 = *v165;
                if (SHIDWORD(v223) > 572662305)
                {
                  if (HIDWORD(v223) == 572662306)
                  {
                    v171 = "consumed";
                    goto LABEL_380;
                  }
                  if (HIDWORD(v223) == 858993459)
                  {
                    v171 = "flushed";
                    goto LABEL_380;
                  }
                }
                else
                {
                  if (!HIDWORD(v223))
                  {
                    v171 = "unconsumed";
                    goto LABEL_380;
                  }
                  if (HIDWORD(v223) == 286331153)
                  {
                    v171 = "displayed";
LABEL_380:
                    v177 = *v171;
                    *(_DWORD *)buf = 67242496;
                    v202 = v167;
                    v203 = 2050;
                    v204 = a9;
                    v205 = 1026;
                    v206 = v168;
                    v207 = 1026;
                    v208 = v155;
                    v209 = 1026;
                    v210 = v221;
                    v211 = 1026;
                    v212 = v169;
                    v213 = 1026;
                    v214 = v222;
                    v215 = 1026;
                    v216 = v170;
                    v217 = 1026;
                    v218 = v223;
                    v219 = 1026;
                    v220 = v177;
                    v145 = "ID is queue ID. surfaceID=%{public, name=surfaceID}#x serverSamplingTime=%{public, name=serve"
                           "rSamplingTime}f updateSeed=%{public, name=updateSeed}#x queueGeneration=%{public, name=queueG"
                           "eneration}u samples=[(%{public, name=sample0Surface}#x, %{public, name=sample0State}c), (%{pu"
                           "blic, name=sample1Surface}#x, %{public, name=sample1State}c), (%{public, name=sample2Surface}"
                           "#x, %{public, name=sample2State}c), ...]";
LABEL_385:
                    v146 = v142;
                    v147 = v183;
                    v148 = 66;
                    goto LABEL_386;
                  }
                }
                v171 = "<unknown>";
                goto LABEL_380;
              }
              v156 = "unconsumed";
            }
            v155 = v196;
            goto LABEL_340;
          }
          if (!(_DWORD)v183 || !os_signpost_enabled(v142))
            return v97 != -1;
          if (SHIDWORD(v221) > 572662305)
          {
            if (HIDWORD(v221) != 572662306)
            {
              v157 = v196;
              if (HIDWORD(v221) == 858993459)
              {
                v158 = "flushed";
                goto LABEL_350;
              }
              goto LABEL_349;
            }
            v158 = "consumed";
          }
          else
          {
            if (HIDWORD(v221))
            {
              v157 = v196;
              if (HIDWORD(v221) == 286331153)
              {
                v158 = "displayed";
                goto LABEL_350;
              }
LABEL_349:
              v158 = "<unknown>";
LABEL_350:
              if (SHIDWORD(v222) > 572662305)
              {
                if (HIDWORD(v222) == 572662306)
                {
                  v166 = "consumed";
                  goto LABEL_370;
                }
                if (HIDWORD(v222) == 858993459)
                {
                  v166 = "flushed";
                  goto LABEL_370;
                }
              }
              else
              {
                if (!HIDWORD(v222))
                {
                  v166 = "unconsumed";
                  goto LABEL_370;
                }
                if (HIDWORD(v222) == 286331153)
                {
                  v166 = "displayed";
                  goto LABEL_370;
                }
              }
              v166 = "<unknown>";
LABEL_370:
              v172 = *(_DWORD *)(v112 + 56);
              v173 = *(_DWORD *)(v199 + 248);
              v174 = *v158;
              v175 = *v166;
              if (SHIDWORD(v223) > 572662305)
              {
                if (HIDWORD(v223) == 572662306)
                {
                  v176 = "consumed";
                  goto LABEL_384;
                }
                if (HIDWORD(v223) == 858993459)
                {
                  v176 = "flushed";
                  goto LABEL_384;
                }
              }
              else
              {
                if (!HIDWORD(v223))
                {
                  v176 = "unconsumed";
                  goto LABEL_384;
                }
                if (HIDWORD(v223) == 286331153)
                {
                  v176 = "displayed";
LABEL_384:
                  v178 = *v176;
                  *(_DWORD *)buf = 67242496;
                  v202 = v172;
                  v203 = 2050;
                  v204 = a9;
                  v205 = 1026;
                  v206 = v173;
                  v207 = 1026;
                  v208 = v157;
                  v209 = 1026;
                  v210 = v221;
                  v211 = 1026;
                  v212 = v174;
                  v213 = 1026;
                  v214 = v222;
                  v215 = 1026;
                  v216 = v175;
                  v217 = 1026;
                  v218 = v223;
                  v219 = 1026;
                  v220 = v178;
                  v145 = "ID is queue ID. surfaceID=%{public, name=surfaceID}#x serverSamplingTime=%{public, name=serverS"
                         "amplingTime}f updateSeed=%{public, name=updateSeed}#x queueGeneration=%{public, name=queueGener"
                         "ation}u samples=[(%{public, name=sample0Surface}#x, %{public, name=sample0State}c), (%{public, "
                         "name=sample1Surface}#x, %{public, name=sample1State}c), (%{public, name=sample2Surface}#x, %{pu"
                         "blic, name=sample2State}c)]";
                  goto LABEL_385;
                }
              }
              v176 = "<unknown>";
              goto LABEL_384;
            }
            v158 = "unconsumed";
          }
          v157 = v196;
          goto LABEL_350;
        default:
          return v97 != -1;
      }
    }
  }
  return v97 != -1;
}

void CAShmemImageQueueUpdate(uint64_t a1, int a2, int a3, unint64_t a4, _QWORD *a5, uint64_t a6, int a7, uint64_t a8, float a9, double a10)
{
  uint64_t v18;
  unint64_t v19;
  double v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  size_t v29;
  char *v30;
  unsigned int v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  double v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  double v40;
  BOOL v41;
  unint64_t v42;
  uint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  unint64_t v48;
  int v49;
  int v50;
  double v51[2];

  v49 = a2;
  v50 = a7;
  v51[1] = *(double *)MEMORY[0x1E0C80C00];
  if (!a6)
  {
    v19 = CAHostTimeWithTime(a10);
    goto LABEL_7;
  }
  v18 = *(_QWORD *)(a6 + 64);
  if ((v18 & 2) == 0)
  {
    v19 = CAHostTimeWithTime(a10);
    if ((v18 & 8) != 0)
      goto LABEL_8;
LABEL_7:
    v20 = 0.0166666667;
    goto LABEL_9;
  }
  v19 = *(_QWORD *)(a6 + 16);
  if ((v18 & 8) == 0)
    goto LABEL_7;
LABEL_8:
  v20 = (double)*(uint64_t *)(a6 + 32) / (double)*(int *)(a6 + 4);
LABEL_9:
  v21 = CAHostTimeWithTime(v20);
  v22 = v21;
  if (a5)
  {
    v48 = v19;
    v23 = a8;
    v24 = a4;
    v25 = -1;
    v26 = a5;
    do
    {
      v27 = v25;
      v26 = (_QWORD *)v26[1];
      ++v25;
    }
    while (v26);
    v28 = v27 + 2;
    if (v27 == -2)
    {
      v30 = 0;
    }
    else
    {
      if (8 * v28 > 0x1000)
      {
        v30 = (char *)malloc_type_malloc(8 * v28, 0x2004093837F09uLL);
        if (!v30)
          return;
      }
      else
      {
        MEMORY[0x1E0C80A78](v21);
        v30 = (char *)&v48 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
        bzero(v30, v29);
      }
      do
      {
        *(_QWORD *)&v30[8 * v25] = *a5;
        a5 = (_QWORD *)a5[1];
        --v25;
      }
      while (v25 != -1);
    }
    a4 = v24;
    a8 = v23;
    v19 = v48;
  }
  else
  {
    v28 = 0;
    v30 = 0;
  }
  v51[0] = 0.0;
  do
    v31 = __ldaxr((unsigned int *)a1);
  while (__stlxr(v31 + 1, (unsigned int *)a1));
  __dmb(0xBu);
  *(_DWORD *)(a1 + 20) = v49;
  if (*(_DWORD *)(a1 + 24) != a3)
  {
    *(_DWORD *)(a1 + 24) = a3;
    v32 = atomic_load((unint64_t *)(a1 + 8));
    if ((v32 & 0x20000000000000) != 0)
    {
      if ((_DWORD)a8)
      {
        v33 = *(unsigned int *)(a1 + 56);
        if ((_DWORD)v33)
          CA::MachPortUtil::call_with_timeout<int (*)(unsigned int,unsigned int,unsigned int),unsigned int>(a8, (uint64_t)"IQDidChangeDisplay", (uint64_t (*)(uint64_t, _QWORD, uint64_t))_CACImageQueueDidChangeDisplay, v33);
      }
    }
  }
  atomic_store(a4, (unint64_t *)(a1 + 104));
  v34 = 0;
  *(_QWORD *)(a1 + 112) = mach_absolute_time();
  v35 = -0.0;
  if ((v50 & 0x10) == 0)
    v35 = v20;
  v36 = v35 + a10;
  if ((v50 & 0x10) != 0)
    v37 = 0;
  else
    v37 = v22;
  v38 = v37 + v19;
  do
  {
    if (v28 != 1
      || (v39 = *(_QWORD *)v30,
          v40 = *(double *)(*(_QWORD *)v30 + 48)
              + (v36 - *(double *)(*(_QWORD *)v30 + 40)) * *(float *)(*(_QWORD *)v30 + 16),
          v51[0] = v40,
          v40 < 0.0)
      || v40 >= *(double *)(v39 + 32))
    {
      v51[0] = v36;
      v41 = v36 < 0.0 || v28 == 0;
      v40 = v36;
      if (!v41)
      {
        v42 = 0;
        while ((CA::Render::Timing::map_time(*(CA::Render::Timing **)&v30[8 * v42], v51, 0) & 1) != 0)
        {
          v40 = v51[0];
          ++v42;
          if (v51[0] < 0.0 || v42 >= v28)
            goto LABEL_49;
        }
        v51[0] = -1.0;
        v40 = -1.0;
      }
    }
LABEL_49:
    v44 = a1 + 24 * v34;
    *(double *)(v44 + 328) = v40;
    *(_QWORD *)(v44 + 320) = v38;
    *(float *)(v44 + 336) = a9;
    ++v34;
    v36 = v36 + v20;
    v38 += v22;
  }
  while (v34 != 4);
  *(_DWORD *)(a1 + 60) = 4;
  if (!a6)
    goto LABEL_55;
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a6 + 4);
  v45 = *(_QWORD *)(a6 + 64);
  if ((v45 & 1) == 0)
  {
    if ((v45 & 8) == 0)
      goto LABEL_53;
LABEL_62:
    *(_QWORD *)(a1 + 272) = *(_QWORD *)(a6 + 32);
    if ((v45 & 0x10) == 0)
      goto LABEL_55;
    goto LABEL_54;
  }
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a6 + 8);
  if ((v45 & 8) != 0)
    goto LABEL_62;
LABEL_53:
  if ((v45 & 0x10) != 0)
LABEL_54:
    *(_QWORD *)(a1 + 256) = *(_QWORD *)(a6 + 24);
LABEL_55:
  __dmb(0xBu);
  v46 = (unsigned int *)(a1 + 4);
  do
    v47 = __ldaxr(v46);
  while (__stlxr(v47 + 1, v46));
  if (8 * v28 > 0x1000)
  {
    if (v30)
      free(v30);
  }
}

uint64_t *update_image_sample(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  unint64_t v7;
  int v8;
  int v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  unint64_t v13;
  BOOL v14;
  _QWORD *v15;
  IOSurfaceID v18;
  IOSurfaceRef v19;
  IOSurfaceRef v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  __int16 v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  BOOL v28;
  _QWORD *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;

  v7 = (unint64_t)result;
  *(_DWORD *)(a3 + 60) = 286331153;
  v8 = *(_DWORD *)(a4 + 248);
  v9 = *(_DWORD *)(a3 + 84);
  *(_DWORD *)(a3 + 84) = v9 + 1;
  *(_DWORD *)(a3 + 88) = v8;
  if (!v9)
  {
    v18 = *(_DWORD *)(a3 + 56);
    if (v18)
    {
      v19 = IOSurfaceLookup(v18);
      if (v19)
      {
        v20 = v19;
        IOSurfaceInitDetachModeCode();
        IOSurfaceSetDetachModeCode();
        CFRelease(v20);
      }
      *(_BYTE *)(a3 + 123) = 0;
      v8 = *(_DWORD *)(a4 + 248);
    }
    *(double *)(a3 + 16) = a5;
    *(_DWORD *)(a3 + 92) = v8;
    *(_DWORD *)(a2 + 40) = *(_DWORD *)(a3 + 100);
    *(_QWORD *)(a2 + 136) = *(_QWORD *)a3;
    v21 = *(_QWORD *)(a4 + 160);
    if (v21)
      result = *(uint64_t **)(v21 + 16);
    else
      result = (uint64_t *)CAHostTimeWithTime(*(double *)(a4 + 72));
    *(_QWORD *)(a3 + 24) = result;
    *(_QWORD *)(a3 + 32) = *(_QWORD *)(a4 + 112);
    v24 = atomic_load((unint64_t *)(a2 + 8));
    if (v24 < 0 && v7)
    {
      v25 = *(_QWORD **)(a4 + 864);
      if (!v25)
        goto LABEL_42;
      v26 = (_QWORD *)(a4 + 864);
      do
      {
        v27 = v25[4];
        v28 = v27 >= v7;
        if (v27 >= v7)
          v29 = v25;
        else
          v29 = v25 + 1;
        if (v28)
          v26 = v25;
        v25 = (_QWORD *)*v29;
      }
      while (*v29);
      if (v26 == (_QWORD *)(a4 + 864) || v26[4] > v7)
      {
LABEL_42:
        result = std::__tree<CA::Render::Object *>::__emplace_unique_key_args<CA::Render::Object *,CA::Render::Object * const&>((uint64_t *)(a4 + 856), v7, v7);
        v30 = (unsigned int *)(v7 + 8);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 + 1, v30));
        if (!v31)
        {
          do
            v32 = __ldaxr(v30);
          while (__stlxr(v32 - 1, v30));
        }
      }
    }
  }
  v10 = atomic_load((unint64_t *)(a2 + 8));
  if ((v10 & 0x2000000000000000) != 0 && v7)
  {
    result = *(uint64_t **)(a4 + 824);
    if (result)
    {
      v11 = (_QWORD *)result[1];
      if (v11)
      {
        v12 = result + 1;
        do
        {
          v13 = v11[4];
          v14 = v13 >= v7;
          if (v13 >= v7)
            v15 = v11;
          else
            v15 = v11 + 1;
          if (v14)
            v12 = v11;
          v11 = (_QWORD *)*v15;
        }
        while (*v15);
        if (v12 != result + 1 && v12[4] <= v7)
          return result;
      }
    }
    else
    {
      result = (uint64_t *)operator new();
      result[2] = 0;
      result[1] = 0;
      *result = (uint64_t)(result + 1);
      *(_QWORD *)(a4 + 824) = result;
    }
    result = std::__tree<CA::Render::Object *>::__emplace_unique_key_args<CA::Render::Object *,CA::Render::Object * const&>(result, v7, v7);
    v22 = (unsigned int *)(v7 + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 + 1, v22));
    if (!v23)
    {
      do
        v33 = __ldaxr(v22);
      while (__stlxr(v33 - 1, v22));
    }
  }
  return result;
}

void CA::Render::update_texture_flags(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  unint64_t v8;
  int v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  unint64_t v15;
  unsigned int v16;

  v8 = atomic_load((unint64_t *)(a2 + 8));
  if ((a3 & 1) != 0 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1))
    v9 = 16;
  else
    v9 = 0;
  v10 = a3 & 8 | (((v8 >> 3) & 1) << 6) & 0xFFFFFEFF | (32 * ((v8 >> 4) & 1)) & 0xFFFFFEFF | (((v8 >> 6) & 1) << 8) | (v8 >> 1) & 0x200 | v9;
  if ((v8 & 0x2000) != 0)
  {
    v11 = v10 | 0x800;
  }
  else
  {
    if (CADeviceSupportsASTC::once[0] != -1)
      dispatch_once(CADeviceSupportsASTC::once, &__block_literal_global_118);
    if (CADeviceSupportsASTC::supports_astc)
      v11 = v10;
    else
      v11 = v10 | 0x800;
  }
  v12 = a4 & 7 | (((a4 >> 3) & 1) << 13) | v11;
  v13 = *(_DWORD *)(a1 + 12);
  if (((v13 >> 8) & 0x97F) != v12)
  {
    v13 = v13 & 0xFFF680FF | (v12 << 8);
    *(_DWORD *)(a1 + 12) = v13;
  }
  if ((a3 & 0x40000000) != 0 && v13 == 51)
  {
    if ((v8 & 0x40000000000000) != 0)
    {
      v14 = 327680;
    }
    else
    {
      v13 &= ~0x4000000u;
      v14 = 0x10000;
    }
    v13 |= (v14 | (a3 >> 10) & 0x20000) << 8;
    *(_DWORD *)(a1 + 12) = v13;
  }
  if ((a3 & 0x2000000) != 0
    || (v15 = atomic_load((unint64_t *)(a2 + 8)), v13 = *(_DWORD *)(a1 + 12), (v15 & 0x20000000000000) != 0))
  {
    v13 |= 0x8000000u;
    *(_DWORD *)(a1 + 12) = v13;
  }
  if (v13 == 51)
  {
    if (initialized[0] != -1)
      dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
    v16 = *(float *)&dword_1ECDC69AC;
    if (!*(float *)&dword_1ECDC69AC)
      LOBYTE(v16) = *(_BYTE *)(a2 + 94);
    *(_BYTE *)(a1 + 328) = v16;
  }
}

uint64_t *std::__tree<std::tuple<unsigned short,unsigned short>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *std::__tree<CA::Render::Object *>::__emplace_unique_key_args<CA::Render::Object *,CA::Render::Object * const&>(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;

  v4 = (uint64_t **)result;
  v6 = (uint64_t **)(result + 1);
  v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = (uint64_t **)(result + 1);
LABEL_9:
    v9 = (uint64_t *)operator new(0x28uLL);
    v9[4] = a3;
    return std::__tree<std::tuple<unsigned short,unsigned short>>::__insert_node_at(v4, (uint64_t)v7, v6, v9);
  }
  return result;
}

double **std::__introsort<std::_ClassicAlgPolicy,CAShmemImageQueueCopyImageInfo::$_0 &,_CAShmemImageQueueImage **,false>(double **result, double **a2, uint64_t a3, char a4)
{
  double **v7;
  double **v8;
  double **v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  double **v13;
  double *v14;
  double *v15;
  double v16;
  double **v17;
  double **v18;
  double *v19;
  double *v20;
  double **v21;
  double *v22;
  double *v23;
  double *v24;
  double **v25;
  double **v26;
  double *v27;
  double *v28;
  BOOL v29;
  double *v30;
  double **v31;
  double **v32;
  double *v33;
  double *v34;
  double *v35;
  double *v36;
  double *v37;
  double **v38;
  double *v39;
  double **v40;
  double **v41;
  double **v42;
  double *v43;
  double *v44;
  double v45;
  double *v46;
  double *v47;
  double *v48;
  double **v49;
  BOOL v51;
  uint64_t v52;
  double **v53;
  double *v54;
  double *v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  double **v59;
  int64_t v60;
  int64_t v61;
  int64_t v62;
  uint64_t v63;
  double **v64;
  double **v65;
  double *v66;
  double *v67;
  double v68;
  double **v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  double *v74;
  double **v75;
  double **v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  double **v81;
  double *v82;
  double *v83;
  double v84;
  double **v85;
  double *v87;
  double *v88;
  double v89;

  v7 = result;
LABEL_2:
  v8 = a2 - 1;
  v9 = v7;
  while (2)
  {
    v7 = v9;
    v10 = (char *)a2 - (char *)v9;
    v11 = a2 - v9;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v39 = *v9;
        if (**v8 < **v9)
        {
          *v9 = *v8;
          *v8 = v39;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,CAShmemImageQueueCopyImageInfo::$_0 &,_CAShmemImageQueueImage **>(v9, v9 + 1, a2 - 1);
      case 4uLL:
        return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,CAShmemImageQueueCopyImageInfo::$_0 &,_CAShmemImageQueueImage **>(v9, v9 + 1, v9 + 2, a2 - 1);
      case 5uLL:
        v40 = v9 + 1;
        v41 = v9 + 2;
        v42 = v9 + 3;
        result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,CAShmemImageQueueCopyImageInfo::$_0 &,_CAShmemImageQueueImage **>(v9, v9 + 1, v9 + 2, v9 + 3);
        v43 = v9[3];
        if (**v8 < *v43)
        {
          *v42 = *v8;
          *v8 = v43;
          v44 = *v42;
          v45 = **v42;
          v46 = *v41;
          if (v45 < **v41)
          {
            *v41 = v44;
            *v42 = v46;
            v47 = *v40;
            if (v45 < **v40)
            {
              v9[1] = v44;
              v9[2] = v47;
              v48 = *v9;
              if (v45 < **v9)
              {
                *v9 = v44;
                v9[1] = v48;
              }
            }
          }
        }
        return result;
      default:
        if (v10 <= 191)
        {
          v49 = v9 + 1;
          v51 = v9 == a2 || v49 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v51)
            {
              v52 = 8;
              v53 = v9;
              do
              {
                v55 = *v53;
                v54 = v53[1];
                v53 = v49;
                v56 = *v54;
                if (*v54 < *v55)
                {
                  v57 = v52;
                  while (1)
                  {
                    *(double **)((char *)v9 + v57) = v55;
                    v58 = v57 - 8;
                    if (v57 == 8)
                      break;
                    v55 = *(double **)((char *)v9 + v57 - 16);
                    v57 -= 8;
                    if (v56 >= *v55)
                    {
                      v59 = (double **)((char *)v9 + v58);
                      goto LABEL_76;
                    }
                  }
                  v59 = v9;
LABEL_76:
                  *v59 = v54;
                }
                v49 = v53 + 1;
                v52 += 8;
              }
              while (v53 + 1 != a2);
            }
          }
          else if (!v51)
          {
            do
            {
              v88 = *v7;
              v87 = v7[1];
              v7 = v49;
              v89 = *v87;
              if (*v87 < *v88)
              {
                do
                {
                  *v49 = v88;
                  v88 = *(v49 - 2);
                  --v49;
                }
                while (v89 < *v88);
                *v49 = v87;
              }
              v49 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v9 != a2)
          {
            v60 = (v11 - 2) >> 1;
            v61 = v60;
            do
            {
              v62 = v61;
              if (v60 >= v61)
              {
                v63 = (2 * v61) | 1;
                v64 = &v9[v63];
                if (2 * v62 + 2 < (uint64_t)v11 && **v64 < *v64[1])
                {
                  ++v64;
                  v63 = 2 * v62 + 2;
                }
                v65 = &v9[v62];
                v66 = *v64;
                v67 = *v65;
                v68 = **v65;
                if (**v64 >= v68)
                {
                  do
                  {
                    v69 = v64;
                    *v65 = v66;
                    if (v60 < v63)
                      break;
                    v70 = 2 * v63;
                    v63 = (2 * v63) | 1;
                    v64 = &v9[v63];
                    v71 = v70 + 2;
                    if (v71 < (uint64_t)v11)
                    {
                      result = (double **)v64[1];
                      if (**v64 < *(double *)result)
                      {
                        ++v64;
                        v63 = v71;
                      }
                    }
                    v66 = *v64;
                    v65 = v69;
                  }
                  while (**v64 >= v68);
                  *v69 = v67;
                }
              }
              v61 = v62 - 1;
            }
            while (v62);
            v72 = (unint64_t)v10 >> 3;
            do
            {
              v73 = 0;
              v74 = *v9;
              v75 = v9;
              do
              {
                v76 = v75;
                v75 += v73 + 1;
                v77 = 2 * v73;
                v73 = (2 * v73) | 1;
                v78 = v77 + 2;
                if (v78 < v72 && **v75 < *v75[1])
                {
                  ++v75;
                  v73 = v78;
                }
                *v76 = *v75;
              }
              while (v73 <= (uint64_t)((unint64_t)(v72 - 2) >> 1));
              if (v75 == --a2)
              {
                *v75 = v74;
              }
              else
              {
                *v75 = *a2;
                *a2 = v74;
                v79 = (char *)v75 - (char *)v9 + 8;
                if (v79 >= 9)
                {
                  v80 = (((unint64_t)v79 >> 3) - 2) >> 1;
                  v81 = &v9[v80];
                  v82 = *v81;
                  v83 = *v75;
                  v84 = **v75;
                  if (**v81 < v84)
                  {
                    do
                    {
                      v85 = v81;
                      *v75 = v82;
                      if (!v80)
                        break;
                      v80 = (v80 - 1) >> 1;
                      v81 = &v9[v80];
                      v82 = *v81;
                      v75 = v85;
                    }
                    while (**v81 < v84);
                    *v85 = v83;
                  }
                }
              }
            }
            while (v72-- > 2);
          }
          return result;
        }
        v12 = v11 >> 1;
        v13 = &v9[v11 >> 1];
        if ((unint64_t)v10 < 0x401)
        {
          result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,CAShmemImageQueueCopyImageInfo::$_0 &,_CAShmemImageQueueImage **>(&v7[v11 >> 1], v7, a2 - 1);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,CAShmemImageQueueCopyImageInfo::$_0 &,_CAShmemImageQueueImage **>(v7, &v7[v11 >> 1], a2 - 1);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,CAShmemImageQueueCopyImageInfo::$_0 &,_CAShmemImageQueueImage **>(v7 + 1, v13 - 1, a2 - 2);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,CAShmemImageQueueCopyImageInfo::$_0 &,_CAShmemImageQueueImage **>(v7 + 2, &v7[v12 + 1], a2 - 3);
          result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,CAShmemImageQueueCopyImageInfo::$_0 &,_CAShmemImageQueueImage **>(v13 - 1, v13, &v7[v12 + 1]);
          v14 = *v7;
          *v7 = *v13;
          *v13 = v14;
        }
        --a3;
        v15 = *v7;
        v16 = **v7;
        v17 = v7;
        if ((a4 & 1) == 0)
        {
          v17 = v7;
          if (**(v7 - 1) >= v16)
          {
            if (v16 >= **v8)
            {
              v31 = v7 + 1;
              do
              {
                v9 = v31;
                if (v31 >= a2)
                  break;
                ++v31;
              }
              while (v16 >= **v9);
            }
            else
            {
              v9 = v7;
              do
              {
                v30 = v9[1];
                ++v9;
              }
              while (v16 >= *v30);
            }
            v32 = a2;
            if (v9 < a2)
            {
              v32 = a2;
              do
                v33 = *--v32;
              while (v16 < *v33);
            }
            if (v9 < v32)
            {
              v34 = *v9;
              v35 = *v32;
              do
              {
                *v9 = v35;
                *v32 = v34;
                do
                {
                  v36 = v9[1];
                  ++v9;
                  v34 = v36;
                }
                while (v16 >= *v36);
                do
                {
                  v37 = *--v32;
                  v35 = v37;
                }
                while (v16 < *v37);
              }
              while (v9 < v32);
            }
            v38 = v9 - 1;
            if (v9 - 1 != v7)
              *v7 = *v38;
            a4 = 0;
            *v38 = v15;
            continue;
          }
        }
        do
        {
          v18 = v17;
          v20 = v17[1];
          ++v17;
          v19 = v20;
        }
        while (*v20 < v16);
        v21 = a2;
        if (v18 == v7)
        {
          v21 = a2;
          do
          {
            if (v17 >= v21)
              break;
            v23 = *--v21;
          }
          while (*v23 >= v16);
        }
        else
        {
          do
            v22 = *--v21;
          while (*v22 >= v16);
        }
        if (v17 < v21)
        {
          v24 = *v21;
          v25 = v21;
          v26 = v17;
          do
          {
            *v26 = v24;
            *v25 = v19;
            do
            {
              v18 = v26;
              v27 = v26[1];
              ++v26;
              v19 = v27;
            }
            while (*v27 < v16);
            do
            {
              v28 = *--v25;
              v24 = v28;
            }
            while (*v28 >= v16);
          }
          while (v26 < v25);
        }
        if (v18 != v7)
          *v7 = *v18;
        *v18 = v15;
        if (v17 < v21)
        {
LABEL_29:
          result = (double **)std::__introsort<std::_ClassicAlgPolicy,CAShmemImageQueueCopyImageInfo::$_0 &,_CAShmemImageQueueImage **,false>(v7, v18, a3, a4 & 1);
          a4 = 0;
          v9 = v18 + 1;
          continue;
        }
        v29 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,CAShmemImageQueueCopyImageInfo::$_0 &,_CAShmemImageQueueImage **>(v7, v18);
        v9 = v18 + 1;
        result = (double **)std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,CAShmemImageQueueCopyImageInfo::$_0 &,_CAShmemImageQueueImage **>(v18 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v29)
            continue;
          goto LABEL_29;
        }
        a2 = v18;
        if (!v29)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t CA::Render::Surface::implicitly_opaque(CA::Render::Surface *this)
{
  unsigned int v1;

  v1 = *((_DWORD *)this + 27);
  if (v1 != -1 && (v1 > 0x23 || ((0xC99B4EB03uLL >> v1) & 1) == 0))
    return 1;
  if (*((_QWORD *)this + 14))
    return CA::Render::fourcc_has_alpha((CA::Render *)*((unsigned int *)this + 32)) ^ 1;
  return 0;
}

void CA::Render::Updater::prepare_replicator(uint64_t a1, uint64_t a2, uint64_t a3, const double *a4)
{
  float *v4;
  float v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  float v11;
  double v12;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  BOOL v20;
  uint64_t v21;
  int8x16_t v25;
  int8x16_t v26;
  _QWORD *v27;
  double v28;
  uint64_t v29;
  double v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  __int128 *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  int v41;
  double v42;
  float64x2_t v43;
  double v45;
  double v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  double v52;
  int v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  CA::Render::Context *v58;
  uint64_t v59;
  const CA::Bounds *v60;
  uint64_t v61;
  CA::Shape **v62;
  CA::Shape *v63;
  uint64_t v64;
  CA::Shape *v65;
  uint64_t v66;
  double v67;
  double v68;
  BOOL v69;
  uint64_t v70;
  float v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  int8x16_t v79;
  uint64_t v80;
  uint64_t v81;
  double v82;
  char v83;
  double v84;
  int8x16_t v85;
  float64x2_t v86;
  _OWORD v87[8];
  float64x2_t v88[9];
  char v89;
  uint64_t v90;
  _OWORD v91[9];
  _BYTE v92[48];
  uint64_t v93;

  v4 = (float *)a3;
  v93 = *MEMORY[0x1E0C80C00];
  v7 = *(float *)(a3 + 32);
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 32) + 128);
  if (v8 && (v9 = *(_QWORD *)(v8 + 8)) != 0)
  {
    v83 = 0;
    v80 = v9;
    v82 = *(double *)(v9 + 32);
  }
  else
  {
    v80 = 0;
    v83 = 1;
    v82 = INFINITY;
  }
  v10 = v7;
  v11 = *(float *)(a2 + 56);
  if (v11 != 0.0)
  {
    if (v7 <= 0.0)
    {
      if (v7 >= 0.0 || v82 >= INFINITY)
        goto LABEL_29;
      v12 = v82 - *(double *)(a2 + 16);
    }
    else
    {
      v12 = *(double *)(a2 + 16);
    }
    v14 = v12 / v10;
    v15 = ceil(v14);
    v16 = floor(v14);
    if (v11 > 0.0)
      v16 = v15;
    if (v16 < (double)*(int *)(a3 + 16))
    {
      v17 = v16 * v10;
      if (v7 <= 0.0)
        v18 = v82 - v17;
      else
        v18 = v17;
      v19 = *(double *)(a2 + 32);
      *(_QWORD *)(a2 + 48) |= 0x10000000000uLL;
      if (v19 >= INFINITY)
      {
        v20 = v19 != v18;
      }
      else if (v11 <= 0.0)
      {
        if (v19 > v18)
          goto LABEL_29;
        v20 = v19 < v18;
      }
      else
      {
        if (v19 < v18)
          goto LABEL_29;
        v20 = v19 > v18;
      }
      _ZF = v18 == 0.0 || !v20;
      v21 = 0x10000000000;
      if (_ZF)
        v21 = *(_QWORD *)(a2 + 40) | 0x10000000000;
      *(_QWORD *)(a2 + 40) = v21;
      *(double *)(a2 + 32) = v18;
    }
  }
LABEL_29:
  memset(&v92[16], 0, 32);
  *(_OWORD *)v92 = 0u;
  v90 = a3;
  v91[0] = xmmword_18474DF40;
  v91[1] = 0u;
  v91[2] = xmmword_18474DF50;
  memset(&v91[3], 0, 32);
  v91[5] = xmmword_18474DF40;
  v91[6] = 0u;
  v91[7] = xmmword_18474DF50;
  __asm { FMOV            V3.2D, #1.0 }
  v91[8] = _Q3;
  v25 = (int8x16_t)vcvtq_f64_f32(*(float32x2_t *)(a3 + 36));
  v26 = (int8x16_t)vcvtq_f64_f32(*(float32x2_t *)(a3 + 44));
  *(int8x16_t *)&v92[8] = v25;
  *(int8x16_t *)&v92[24] = v26;
  *(_QWORD *)(a2 + 96) = &v90;
  v27 = (_QWORD *)(a2 + 40);
  v81 = *(_QWORD *)(a2 + 40);
  v28 = *(double *)(a2 + 24);
  v84 = *(double *)(a2 + 32);
  v29 = *(_QWORD *)(a2 + 48);
  v30 = *(double *)(a2 + 16);
  if (*(int *)(a3 + 16) <= 1)
    v31 = 1;
  else
    v31 = *(_DWORD *)(a3 + 16);
  v32 = *(_QWORD *)(a3 + 24);
  if (v32)
  {
    v33 = *(_DWORD *)(v32 + 16);
    v34 = (__int128 *)(v32 + 24);
    if (v33 <= 0xF)
      v34 = &CA::Mat4Impl::mat4_identity_double;
    v35 = v34[1];
    v36 = v34[2];
    v37 = v34[3];
    v87[0] = *v34;
    v87[1] = v35;
    v87[2] = v36;
    v87[3] = v37;
    v38 = v34[5];
    v39 = v34[6];
    v40 = v34[7];
    v87[4] = v34[4];
    v87[5] = v38;
    v87[6] = v39;
    v87[7] = v40;
    v85 = v25;
    v79 = v26;
    CA::Transform::set((uint64_t)v88, (CA::Mat4Impl *)v87, 1);
    v26 = v79;
    v25 = v85;
  }
  else
  {
    v88[0] = (float64x2_t)xmmword_18474DF40;
    v88[1] = 0uLL;
    v88[2] = (float64x2_t)xmmword_18474DF50;
    memset(&v88[3], 0, 32);
    v88[5] = (float64x2_t)xmmword_18474DF40;
    v88[6] = 0uLL;
    v88[7] = (float64x2_t)xmmword_18474DF50;
    v88[8] = _Q3;
    v89 = 0;
  }
  v41 = 0;
  v42 = *(double *)&v26.i64[1];
  *(_DWORD *)&v92[40] = 0;
  v43 = (float64x2_t)vextq_s8(v25, v26, 8uLL);
  __asm { FMOV            V2.2D, #0.5 }
  v86 = _Q2;
  v45 = 0.0;
  do
  {
    v46 = v42 * 255.0;
    v47 = (int)vmlad_n_f64(0.5, v46, v43.f64[0]);
    v48 = v47 & ~(v47 >> 31);
    if (v48 >= 255)
      v48 = 255;
    *(_QWORD *)&v43.f64[0] = v25.i64[0];
    *(uint32x2_t *)&v43.f64[0] = vshl_u32((uint32x2_t)vmin_s32(vmax_s32(vmovn_s64(vcvtq_s64_f64(vmlaq_n_f64(v86, v43, v46))), 0), (int32x2_t)0xFF000000FFLL), (uint32x2_t)0x800000018);
    v49 = LODWORD(v43.f64[0]) | (v48 << 16);
    v50 = (int)(v46 + 0.5) & ~((int)(v46 + 0.5) >> 31);
    if (v50 >= 255)
      v50 = 255;
    v51 = v49 | v50 | HIDWORD(v43.f64[0]);
    *(_DWORD *)&v92[44] = v51;
    v52 = v45 + v30;
    *(double *)(a2 + 16) = v45 + v30;
    *(double *)(a2 + 24) = v45 + v28;
    if (v45 + v30 >= 0.0)
    {
      if (v52 >= v82)
      {
        v52 = -1.0;
        if ((v83 & 1) == 0)
        {
          v52 = v82 + -0.000001;
          if ((*(_BYTE *)(v80 + 13) & 2) == 0)
            v52 = -1.0;
        }
        *(double *)(a2 + 16) = v52;
      }
    }
    else
    {
      if ((v83 & 1) != 0)
        v53 = 0;
      else
        v53 = (*(unsigned __int8 *)(v80 + 13) >> 2) & 1;
      v52 = (double)(~v53 << 31 >> 31);
      *(double *)(a2 + 16) = v52;
      *(_QWORD *)(a2 + 72) |= 0x800uLL;
    }
    *(_QWORD *)(a2 + 32) = 0x7FF0000000000000;
    *v27 = 0;
    *(_QWORD *)(a2 + 48) = 0;
    if (v41 || (v51 == -1 ? (_ZF = v52 == v30) : (_ZF = 0), !_ZF))
      ++*(_DWORD *)(a2 + 132);
    if (*(_DWORD *)(a2 + 60) <= 0xC0u)
    {
      v55 = *(_QWORD *)(*(_QWORD *)a2 + 32);
      if (!*(_QWORD *)(a2 + 96)
        && (v66 = *(_QWORD *)(v55 + 128)) != 0
        && *(_QWORD *)v66
        && *(_BYTE *)(*(_QWORD *)v66 + 12) == 44)
      {
        CA::Render::Updater::prepare_replicator(a1, a2);
      }
      else
      {
        a3 = *(_QWORD *)(v55 + 104);
        if ((*(_BYTE *)(v55 + 13) & 0x20) != 0)
        {
          if (a3)
            CA::Render::Updater::prepare_sublayer0((_QWORD *)a1, a2, a3);
        }
        else if (a3)
        {
          v56 = *(unsigned int *)(a3 + 16);
          if ((_DWORD)v56)
          {
            v57 = (uint64_t *)(a3 + 24);
            do
            {
              a3 = *v57;
              if (*v57)
                CA::Render::Updater::prepare_sublayer0((_QWORD *)a1, a2, a3);
              ++v57;
              --v56;
            }
            while (v56);
          }
        }
        v58 = *(CA::Render::Context **)(a2 + 88);
        if (v58)
        {
          v59 = CA::Render::Context::root_layer_handle(v58);
          if (v59)
          {
            a3 = *(_QWORD *)(v59 + 16);
            if (a3)
            {
              v61 = *(_QWORD *)(a1 + 24);
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 88);
              CA::Render::Updater::prepare_sublayer0((_QWORD *)a1, a2, a3);
              *(_QWORD *)(a1 + 24) = v61;
            }
          }
          if ((*(_DWORD *)(*(_QWORD *)a1 + 1064) & 4) == 0)
          {
            v62 = (CA::Shape **)CA::Render::Context::copy_dirty_shape(*(CA::Render::Context **)(a2 + 88), v60);
            if (v62)
            {
              v63 = (CA::Shape *)v62;
              CA::Render::Context::invalidate(*(CA::Render::Context **)(a1 + 16), v62, (const CA::Shape *)a3);
              CA::Shape::unref(v63);
              v64 = *(_QWORD *)(a2 + 88);
              v65 = *(CA::Shape **)(v64 + 576);
              if (v65)
                CA::Shape::unref(v65);
              *(_QWORD *)(v64 + 576) = 1;
            }
          }
        }
      }
    }
    v67 = *(double *)(a2 + 32);
    if (v67 < INFINITY)
    {
      v68 = v67 - v45;
      v29 |= *(_QWORD *)(a2 + 48);
      if (v84 >= v68)
      {
        v69 = v84 <= v68 || v68 == 0.0;
        v70 = v81;
        if (!v69)
          v70 = 0;
        v81 = *v27 | v70;
        v84 = v68;
      }
    }
    CA::Transform::concat_left((CA::Transform *)v91, v88, a3, a4);
    v72 = *(double *)&v92[8] + v4[13];
    if (v72 >= 0.0)
      v73 = *(double *)&v92[8] + v4[13];
    else
      v73 = 0.0;
    if (v72 <= 1.0)
      *(double *)v25.i64 = v73;
    else
      *(double *)v25.i64 = 1.0;
    v71 = v4[14];
    v74 = *(double *)&v92[16] + v71;
    if (v74 >= 0.0)
      v75 = *(double *)&v92[16] + v71;
    else
      v75 = 0.0;
    if (v74 <= 1.0)
      v43.f64[0] = v75;
    else
      v43.f64[0] = 1.0;
    *(_QWORD *)&v92[8] = v25.i64[0];
    *(float64_t *)&v92[16] = v43.f64[0];
    v76 = *(double *)&v92[24] + v4[15];
    v42 = 1.0;
    v77 = 1.0;
    if (v76 <= 1.0)
    {
      v77 = 0.0;
      if (v76 >= 0.0)
        v77 = *(double *)&v92[24] + v4[15];
    }
    *(double *)&v92[24] = v77;
    v78 = v4[16];
    if (*(double *)&v92[32] + v78 <= 1.0)
    {
      v42 = 0.0;
      if (*(double *)&v92[32] + v78 >= 0.0)
        v42 = *(double *)&v92[32] + v78;
    }
    *(double *)&v92[32] = v42;
    v41 = *(_DWORD *)&v92[40] + 1;
    *(_DWORD *)&v92[40] = v41;
    v45 = v45 - v10;
    v43.f64[1] = v77;
  }
  while (v41 < v31);
  *(double *)(a2 + 24) = v28;
  *(double *)(a2 + 32) = v84;
  *(_QWORD *)(a2 + 40) = v81;
  *(_QWORD *)(a2 + 48) = v29;
  *(double *)(a2 + 16) = v30;
  *(_QWORD *)(a2 + 96) = 0;
}

id CA::Render::ImageQueue::retain_image_queue(CA::Render::ImageQueue *this)
{
  id *v2;

  v2 = (id *)((char *)this + 200);
  if (*((_BYTE *)this + 208))
    return objc_loadWeakRetained(v2);
  else
    return *v2;
}

unsigned int **X::Ref<CA::Render::Texture>::operator=(unsigned int **a1, unsigned int *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v11;

  v3 = *a1;
  if (v3 != a2)
  {
    v4 = a2;
    if (v3)
    {
      v5 = v3 + 2;
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
    if (v4)
    {
      v8 = v4 + 2;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      if (!v9)
      {
        v4 = 0;
        do
          v11 = __ldaxr(v8);
        while (__stlxr(v11 - 1, v8));
      }
    }
    *a1 = v4;
  }
  return a1;
}

BOOL CA::Render::separating_axis(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  unsigned int v9;
  double v10;
  double v11;
  double v12;
  _BOOL8 result;
  uint64_t v14;
  double *v15;
  double *v16;
  double v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  double v22;
  BOOL v24;

  if (*(_BYTE *)(a1 + 104))
    v4 = a4;
  else
    v4 = a3;
  v5 = *(_QWORD *)(a1 + 80);
  v6 = *(_QWORD *)(a1 + 88);
  v7 = *(double *)(v5 + 8 * v4);
  v8 = *(double *)(v6 + 8 * v4);
  if (*(_BYTE *)(a1 + 104))
    v9 = a3;
  else
    v9 = a4;
  v10 = *(double *)(v5 + 8 * v9) - v7;
  v11 = *(double *)(v6 + 8 * v9) - v8;
  v12 = v10 * v10 + v11 * v11;
  if (v12 < 0.01)
    return 0;
  v14 = *(unsigned int *)(a2 + 72);
  if (!(_DWORD)v14)
    return 1;
  v15 = *(double **)(a2 + 80);
  v16 = *(double **)(a2 + 88);
  v17 = 1.0 / sqrt(v12);
  v18 = v14 - 1;
  do
  {
    v19 = *v15++;
    v20 = v19;
    v21 = *v16++;
    v22 = ((v7 - v20) * v11 + (v21 - v8) * v10) * v17;
    v24 = v18-- != 0;
    result = v22 <= 0.5;
  }
  while (v22 <= 0.5 && v24);
  return result;
}

BOOL CA::Mat4Impl::mat4_is_projective(CA::Mat4Impl *this, const double *a2)
{
  return fabs(*((double *)this + 3)) >= 0.000001
      || fabs(*((double *)this + 7)) >= 0.000001
      || fabs(*((double *)this + 11)) >= 0.000001
      || fabs(*((double *)this + 15) + -1.0) >= 0.000001;
}

unint64_t CA::Render::compute_occlusion_data(unint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  unint64_t v6;
  double *v7;
  unsigned int v8;
  const double *v9;
  double *v10;
  double *v11;
  double v12;
  double v13;
  uint64_t v14;
  double *v15;
  double *v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  CA::Mat4Impl *v23;
  double *v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double *v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double *v41;
  uint64_t v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  _OWORD *v53;
  __int128 v54;
  _OWORD *v55;
  __int128 v56;
  _OWORD *v57;
  __int128 v58;
  double v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  double v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  double v68;
  double v69;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a2 + 152);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 + 8) + 5;
  }
  else
  {
    v36 = *(double **)(a2 + 32);
    v38 = v36[8];
    v37 = v36[9];
    v39 = v36[10];
    v40 = v36[11];
    v41 = *(double **)(a2 + 56);
    if (!v41)
    {
      v60 = (_QWORD *)CA::Render::alloc_occlusion_data(a1, 4);
      v6 = (unint64_t)v60;
      v61 = 0;
      v62 = *(_QWORD *)(a2 + 80);
      v63 = *(double *)(a2 + 64) + v38;
      v64 = *(double *)(a2 + 72) + v37;
      v66 = (_QWORD *)v60[10];
      v65 = (_QWORD *)v60[11];
      v67 = v60[12];
      do
      {
        if ((v61 - 1) >= 2)
          v68 = 0.0;
        else
          v68 = v39;
        *(double *)&v66[v61] = v63 + v68;
        if ((v61 & 2) != 0)
          v69 = v40;
        else
          v69 = 0.0;
        *(double *)&v65[v61] = v64 + v69;
        *(_QWORD *)(v67 + 8 * v61++) = v62;
      }
      while (v61 != 4);
      *v60 = *v66;
      v60[2] = v66[1];
      v60[1] = *v65;
      v60[3] = v65[2];
      goto LABEL_42;
    }
    v42 = 0;
    v83 = 0u;
    v84 = 0u;
    v81 = 0u;
    v82 = 0u;
    v79 = 0u;
    v80 = 0u;
    v43 = v41[3];
    v44 = v41[7];
    v45 = v41[15];
    while (1)
    {
      v46 = v38
          + *(double *)&CA::Render::compute_occlusion_data(CA::Render::occlusion_closure *,CA::Render::LayerNode *)::mx[v42]
          * v39;
      v47 = v37
          + *(double *)&CA::Render::compute_occlusion_data(CA::Render::occlusion_closure *,CA::Render::LayerNode *)::my[v42]
          * v40;
      v48 = v45 + v46 * v43 + v47 * v44;
      if (v48 <= 0.0)
        break;
      v49 = v41[1];
      v50 = v41[13];
      v51 = v41[5];
      v52 = 1.0 / v48;
      *(double *)((char *)&v83 + v42 * 8) = (v41[12] + *v41 * v46 + v41[4] * v47) * v52;
      *(double *)((char *)&v81 + v42 * 8) = (v50 + v49 * v46 + v51 * v47) * v52;
      *(double *)((char *)&v79 + v42 * 8) = (v41[14] + v41[2] * v46 + v41[6] * v47) * v52;
      if (++v42 == 4)
      {
        v6 = CA::Render::alloc_occlusion_data(a1, 4);
        v53 = *(_OWORD **)(v6 + 80);
        v54 = v84;
        *v53 = v83;
        v53[1] = v54;
        v55 = *(_OWORD **)(v6 + 88);
        v56 = v82;
        *v55 = v81;
        v55[1] = v56;
        v57 = *(_OWORD **)(v6 + 96);
        v58 = v80;
        *v57 = v79;
        v57[1] = v58;
        v8 = *(_DWORD *)(v6 + 72);
        goto LABEL_5;
      }
    }
    v5 = 5;
  }
  v6 = CA::Render::alloc_occlusion_data(a1, v5);
  v8 = CA::Render::clip_layer((CA::Render *)a2, *(CA::Render::LayerNode **)(v6 + 80), *(double **)(v6 + 88), *(double **)(v6 + 96), v7);
  if (!v8)
  {
    *(_QWORD *)(v6 + 64) = *a1;
    *a1 = v6;
    return 0;
  }
  *(_DWORD *)(v6 + 72) = v8;
LABEL_5:
  v10 = *(double **)(v6 + 80);
  v11 = *(double **)(v6 + 88);
  v12 = *v10;
  *(double *)(v6 + 16) = *v10;
  *(double *)v6 = v12;
  v13 = *v11;
  *(double *)(v6 + 24) = *v11;
  *(double *)(v6 + 8) = v13;
  if (v8 >= 2)
  {
    v14 = v8 - 1;
    v15 = v11 + 1;
    v16 = v10 + 1;
    v17 = v13;
    v18 = v12;
    do
    {
      v19 = *v16;
      if (*v16 >= v18)
      {
        v20 = *v16;
      }
      else
      {
        *(double *)v6 = v19;
        v20 = *v16;
        v18 = v19;
      }
      if (v20 > v12)
      {
        *(double *)(v6 + 16) = v20;
        v12 = v20;
      }
      v21 = *v15;
      if (*v15 >= v17)
      {
        v22 = *v15;
      }
      else
      {
        *(double *)(v6 + 8) = v21;
        v22 = *v15;
        v17 = v21;
      }
      if (v22 > v13)
      {
        *(double *)(v6 + 24) = v22;
        v13 = v22;
      }
      ++v15;
      ++v16;
      --v14;
    }
    while (v14);
  }
  v23 = *(CA::Mat4Impl **)(a2 + 56);
  if (!v23)
  {
LABEL_42:
    *(_QWORD *)(v6 + 32) = 0;
    *(_QWORD *)(v6 + 40) = 0;
    *(_OWORD *)(v6 + 48) = xmmword_18474DF40;
    return v6;
  }
  v77 = 0u;
  v78 = 0u;
  v75 = 0u;
  v76 = 0u;
  v73 = 0u;
  v74 = 0u;
  v71 = 0u;
  v72 = 0u;
  v24 = *(double **)(v6 + 96);
  v25 = v10[1];
  v26 = v11[1];
  v27 = v24[1];
  v28 = v10[2];
  v29 = v11[2];
  v30 = v24[2];
  v31 = v29 * (*v24 - v27) + (v30 - *v24) * v26 + (v27 - v30) * *v11;
  v32 = (v28 - *v10) * v27 + (v25 - v28) * *v24 + v30 * (*v10 - v25);
  v33 = v28 * (*v11 - v26) + (v29 - *v11) * v25 + (v26 - v29) * *v10;
  v34 = v32 * v32 + v33 * v33 + v31 * v31;
  if (fabs(v34) <= 0.1)
  {
    CA::Mat4Impl::mat4_invert((CA::Mat4Impl *)&v71, v23, v9);
    v31 = *(double *)&v72 * (1.0 / *((double *)&v78 + 1));
    v32 = *(double *)&v74 * (1.0 / *((double *)&v78 + 1));
    v33 = *(double *)&v76 * (1.0 / *((double *)&v78 + 1));
    v35 = *(double *)&v78 * (1.0 / *((double *)&v78 + 1));
    v34 = v31 * v31 + v32 * v32 + v33 * v33;
  }
  else
  {
    v35 = -(v27 * *v11 - v26 * *v24) * v28 + -(v29 * *v24 - v30 * *v11) * v25 + -(v30 * v26 - v29 * v27) * *v10;
  }
  if (fabs(v34 + -1.0) > 0.0001)
  {
    v59 = 1.0 / sqrt(v34);
    v31 = v59 * v31;
    v32 = v59 * v32;
    v33 = v59 * v33;
    v35 = v59 * v35;
  }
  if (v33 < 0.0)
  {
    v31 = -v31;
    v32 = -v32;
    v33 = -v33;
    v35 = -v35;
    *(_BYTE *)(v6 + 104) = 1;
  }
  *(double *)(v6 + 32) = v31;
  *(double *)(v6 + 40) = v32;
  *(double *)(v6 + 48) = v33;
  *(double *)(v6 + 56) = v35;
  return v6;
}

unint64_t CA::Render::alloc_occlusion_data(unint64_t *a1, int a2)
{
  unint64_t *v2;
  unsigned int v3;
  unint64_t result;
  unint64_t v5;
  uint64_t v6;

  v2 = a1;
  v3 = (a2 + 1) & 0xFFFFFFFE;
  result = *a1;
  if (!result)
  {
LABEL_7:
    result = (x_heap_malloc((uint64_t *)v2[1], 24 * v3 + 128) + 15) & 0xFFFFFFFFFFFFFFF0;
    *(_DWORD *)(result + 76) = v3;
    v6 = result + 112 + 8 * v3;
    *(_QWORD *)(result + 80) = result + 112;
    *(_QWORD *)(result + 88) = v6;
    *(_QWORD *)(result + 96) = v6 + 8 * v3;
    goto LABEL_8;
  }
  if (*(_DWORD *)(result + 76) < v3)
  {
    while (1)
    {
      v5 = result;
      result = *(_QWORD *)(result + 64);
      if (!result)
        goto LABEL_7;
      if (*(_DWORD *)(result + 76) >= v3)
      {
        v2 = (unint64_t *)(v5 + 64);
        break;
      }
    }
  }
  *v2 = *(_QWORD *)(result + 64);
LABEL_8:
  *(_DWORD *)(result + 72) = v3;
  *(_BYTE *)(result + 104) = 0;
  return result;
}

uint64_t CA::Render::in_positive_half_space(double *a1, uint64_t a2)
{
  unint64_t v2;
  double *v3;
  double *v4;
  double v5;
  double v6;
  double *v7;
  double v8;
  double v9;
  unint64_t v11;
  double *v12;
  double *v13;
  double *v14;
  double v15;

  v2 = *(unsigned int *)(a2 + 72);
  if (!(_DWORD)v2)
    return 1;
  v3 = *(double **)(a2 + 80);
  v4 = *(double **)(a2 + 88);
  v5 = a1[4];
  v6 = a1[5];
  v7 = *(double **)(a2 + 96);
  v8 = a1[6];
  v9 = a1[7];
  if (v5 * *v3 + 0.0000999999975 + v6 * *v4 + v8 * *v7 + v9 < 0.0)
    return 0;
  v11 = 0;
  v12 = v3 + 1;
  v13 = v4 + 1;
  v14 = v7 + 1;
  while (v2 - 1 != v11)
  {
    v15 = v5 * v12[v11] + 0.0000999999975 + v6 * v13[v11] + v8 * v14[v11] + v9;
    ++v11;
    if (v15 < 0.0)
      return v11 >= v2;
  }
  v11 = *(unsigned int *)(a2 + 72);
  return v11 >= v2;
}

uint64_t CA::Render::in_negative_half_space(double *a1, uint64_t a2)
{
  unint64_t v2;
  double *v3;
  double *v4;
  double v5;
  double v6;
  double *v7;
  double v8;
  double v9;
  unint64_t v11;
  double *v12;
  double *v13;
  double *v14;
  double v15;

  v2 = *(unsigned int *)(a2 + 72);
  if (!(_DWORD)v2)
    return 1;
  v3 = *(double **)(a2 + 80);
  v4 = *(double **)(a2 + 88);
  v5 = a1[4];
  v6 = a1[5];
  v7 = *(double **)(a2 + 96);
  v8 = a1[6];
  v9 = a1[7];
  if (v5 * *v3 + -0.0000999999975 + v6 * *v4 + v8 * *v7 + v9 > 0.0)
    return 0;
  v11 = 0;
  v12 = v3 + 1;
  v13 = v4 + 1;
  v14 = v7 + 1;
  while (v2 - 1 != v11)
  {
    v15 = v5 * v12[v11] + -0.0000999999975 + v6 * v13[v11] + v8 * v14[v11] + v9;
    ++v11;
    if (v15 > 0.0)
      return v11 >= v2;
  }
  v11 = *(unsigned int *)(a2 + 72);
  return v11 >= v2;
}

BOOL CA::Render::in_both_half_spaces(double *a1, uint64_t a2, double a3)
{
  uint64_t v3;
  int v4;
  int v5;
  double *v6;
  double *v7;
  double *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  BOOL v15;

  v3 = *(unsigned int *)(a2 + 72);
  if (!(_DWORD)v3)
    return 0;
  v4 = 0;
  v5 = 0;
  v6 = *(double **)(a2 + 80);
  v7 = *(double **)(a2 + 88);
  v8 = *(double **)(a2 + 96);
  do
  {
    v9 = *v6++;
    v10 = v9;
    v11 = *v7++;
    v12 = a1[7] + a1[4] * v10 + a1[5] * v11;
    v13 = *v8++;
    v14 = v12 + a1[6] * v13;
    v5 += COERCE_UNSIGNED_INT64(v14 + a3) >> 63;
    v4 += COERCE_UNSIGNED_INT64(a3 - v14) >> 63;
    --v3;
  }
  while (v3);
  if (v5)
    v15 = v4 == 0;
  else
    v15 = 1;
  return !v15;
}

uint64_t CA::Render::clip_layer(CA::Render *this, CA::Render::LayerNode *a2, double *a3, double *a4, double *a5)
{
  uint64_t *v9;
  size_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double *v21;
  double *v22;
  double v23;
  uint64_t v24;
  double v25;
  unint64_t v26;
  double *v27;
  uint64_t i;
  double *v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double *v34;
  double v35;
  int v36;
  uint64_t j;
  uint64_t v38;
  int v39;
  uint64_t result;
  unint64_t v41;
  double v42;
  float64x2_t *v43;
  double v44;
  double v45;
  float64x2_t *v46;
  float64x2_t v47;
  double v48;
  float64x2_t *v49;
  float64x2_t v50;
  int v51;
  int v52;
  unint64_t v53;
  unint64_t v54;
  double v55;
  uint64_t v56;
  float64x2_t *v57;
  double v58;
  float64x2_t v59;
  float64x2_t v60;
  double v61;
  float64x2_t *v62;
  float64x2_t v63;
  unsigned int v64;
  double v65;
  float64x2_t *v66;
  float64x2_t v67;
  uint64_t v68;
  double *v69;
  double *v70;
  double *v71;
  double v72;
  double v73;
  BOOL v74;
  double v75;
  _QWORD v76[2];

  v76[1] = *MEMORY[0x1E0C80C00];
  v9 = (uint64_t *)*((_QWORD *)this + 19);
  if (v9)
    v10 = (32 * (*((_DWORD *)v9 + 2) + 5)) | 0xF;
  else
    v10 = 175;
  MEMORY[0x1E0C80A78](this);
  v11 = (v10 + 15) & 0x3FFFFFFFF0;
  v12 = (char *)v76 - v11;
  bzero((char *)v76 - v11, v10);
  v13 = ((unint64_t)&v76[1] - v11 + 7) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x1E0C80A78](v14);
  bzero((char *)v76 - v11, v10);
  v15 = 0;
  v16 = (double *)*((_QWORD *)this + 4);
  v17 = v16[8];
  v18 = v16[9];
  v19 = v16[10];
  v20 = v16[11];
  v21 = (double *)&CA::Render::compute_occlusion_data(CA::Render::occlusion_closure *,CA::Render::LayerNode *)::my;
  v22 = (double *)&CA::Render::compute_occlusion_data(CA::Render::occlusion_closure *,CA::Render::LayerNode *)::mx;
  do
  {
    v23 = *v22++;
    v24 = v13 + v15;
    *(double *)v24 = v17 + v23 * v19;
    v25 = *v21++;
    *(double *)(v24 + 8) = v18 + v25 * v20;
    *(_OWORD *)(v24 + 16) = xmmword_18474DF50;
    v15 += 32;
  }
  while (v15 != 128);
  v26 = ((unint64_t)&v76[1] - v11 + 7) & 0xFFFFFFFFFFFFFFF0;
  v27 = (double *)*((_QWORD *)this + 7);
  if (v27)
  {
    for (i = 0; i != 128; i += 32)
    {
      v29 = (double *)(v13 + i);
      v30 = *(double *)(v13 + i);
      v31 = *(double *)(v13 + i + 8);
      v32 = *(double *)(v13 + i + 16);
      v33 = *(double *)(v13 + i + 24);
      *v29 = *v27 * v30 + v27[4] * v31 + v27[8] * v32 + v27[12] * v33;
      v29[1] = v27[1] * v30 + v27[5] * v31 + v27[9] * v32 + v27[13] * v33;
      v29[2] = v27[2] * v30 + v27[6] * v31 + v27[10] * v32 + v27[14] * v33;
      v29[3] = v27[3] * v30 + v27[7] * v31 + v27[11] * v32 + v27[15] * v33;
    }
  }
  else
  {
    do
    {
      v34 = (double *)((char *)v27 + v13);
      v35 = *(double *)((char *)v27 + v13 + 8);
      *v34 = *(double *)((char *)v27 + v13) + *((double *)this + 8);
      v34[1] = v35 + *((double *)this + 9);
      v34[2] = *(double *)((char *)v27 + v13 + 16) + *((double *)this + 10);
      v27 += 4;
    }
    while (v27 != (double *)128);
  }
  v36 = 0;
  for (j = 24; j != 152; j += 32)
  {
    if (*(double *)(v13 + j) < 0.0001)
      ++v36;
  }
  if (!v36)
  {
    result = 4;
    v26 = (unint64_t)(v12 + 15) & 0xFFFFFFFFFFFFFFF0;
    v13 = ((unint64_t)&v76[1] - v11 + 7) & 0xFFFFFFFFFFFFFFF0;
    goto LABEL_31;
  }
  if (v36 == 4)
    return 0;
  v38 = 0;
  v39 = 0;
  result = 0;
  v41 = v13 + 96;
  v42 = *(double *)(((unint64_t)(v12 + 15) & 0xFFFFFFFFFFFFFFF0) + 0x78) + -0.0001;
  while (1)
  {
    v43 = (float64x2_t *)v41;
    v44 = v42;
    v41 = v13 + v38;
    v42 = *(double *)(v13 + v38 + 24) + -0.0001;
    if (v44 >= 0.0)
    {
      if (v42 >= 0.0)
      {
        *(_QWORD *)(v26 + 8 * (4 * result)) = *(_QWORD *)(v13 + v38);
        *(_QWORD *)(v26 + 8 * ((4 * (_DWORD)result) | 1u)) = *(_QWORD *)(v13 + v38 + 8);
        *(_QWORD *)(v26 + 8 * ((4 * (_DWORD)result) | 2u)) = *(_QWORD *)(v13 + v38 + 16);
        *(_QWORD *)(v26 + 8 * ((4 * (_DWORD)result) | 3u)) = *(_QWORD *)(v41 + 24);
      }
      else
      {
        v48 = v44 / (v44 - v42);
        v49 = (float64x2_t *)(v26 + 8 * (4 * result));
        v50 = vmlaq_n_f64(v43[1], vsubq_f64(*(float64x2_t *)(v41 + 16), v43[1]), v48);
        *v49 = vmlaq_n_f64(*v43, vsubq_f64(*(float64x2_t *)v41, *v43), v48);
        v49[1] = v50;
      }
      result = (result + 1);
      goto LABEL_26;
    }
    if (v42 >= 0.0)
      break;
LABEL_26:
    v38 += 32;
    if (v38 == 128)
      goto LABEL_30;
  }
  if (!v39)
  {
    v45 = v44 / (v44 - v42);
    v46 = (float64x2_t *)(v26 + 8 * (4 * result));
    v47 = vmlaq_n_f64(v43[1], vsubq_f64(*(float64x2_t *)(v13 + v38 + 16), v43[1]), v45);
    *v46 = vmlaq_n_f64(*v43, vsubq_f64(*(float64x2_t *)(v13 + v38), *v43), v45);
    v46[1] = v47;
    *(_QWORD *)(v26 + 8 * (4 * result + 4)) = *(_QWORD *)(v13 + v38);
    *(_QWORD *)(v26 + 8 * (4 * result + 5)) = *(_QWORD *)(v13 + v38 + 8);
    *(_QWORD *)(v26 + 8 * (4 * result + 6)) = *(_QWORD *)(v13 + v38 + 16);
    *(_QWORD *)(v26 + 8 * (4 * result + 7)) = *(_QWORD *)(v41 + 24);
    result = (result + 2);
    v39 = 1;
    goto LABEL_26;
  }
  result = 0;
LABEL_30:
  v9 = (uint64_t *)*((_QWORD *)this + 19);
LABEL_31:
  if (result >= 3 && v9)
  {
    do
    {
      v51 = 0;
      v52 = 0;
      v53 = v13;
      v54 = v26 + 8 * (4 * result - 4);
      v55 = vaddvq_f64(vmlaq_f64(vmulq_f64(*(float64x2_t *)(v54 + 16), *((float64x2_t *)v9 + 2)), *((float64x2_t *)v9 + 1), *(float64x2_t *)v54));
      v56 = result;
      result = 0;
      do
      {
        v57 = (float64x2_t *)v54;
        v58 = v55;
        v54 = v26 + 8 * (v51 & 0xFFFFFFFC);
        v59 = *(float64x2_t *)v54;
        v60 = *(float64x2_t *)(v54 + 16);
        v55 = vaddvq_f64(vmlaq_f64(vmulq_f64(*((float64x2_t *)v9 + 2), v60), *(float64x2_t *)v54, *((float64x2_t *)v9 + 1)));
        if (v58 >= 0.0)
        {
          v64 = 4 * result;
          if (v55 >= 0.0)
          {
            *(float64_t *)(v13 + 8 * v64) = v59.f64[0];
            *(_QWORD *)(v13 + 8 * ((4 * (_DWORD)result) | 1u)) = *(_QWORD *)(v54 + 8);
            *(_QWORD *)(v13 + 8 * ((4 * (_DWORD)result) | 2u)) = *(_QWORD *)(v54 + 16);
            *(_QWORD *)(v13 + 8 * ((4 * (_DWORD)result) | 3u)) = *(_QWORD *)(v54 + 24);
          }
          else
          {
            v65 = v58 / (v58 - v55);
            v66 = (float64x2_t *)(v13 + 8 * v64);
            v67 = vmlaq_n_f64(v57[1], vsubq_f64(v60, v57[1]), v65);
            *v66 = vmlaq_n_f64(*v57, vsubq_f64(v59, *v57), v65);
            v66[1] = v67;
          }
          result = (result + 1);
        }
        else if (v55 >= 0.0)
        {
          if (v52)
            return 0;
          v61 = v58 / (v58 - v55);
          v62 = (float64x2_t *)(v13 + 8 * (4 * result));
          v63 = vmlaq_n_f64(v57[1], vsubq_f64(v60, v57[1]), v61);
          *v62 = vmlaq_n_f64(*v57, vsubq_f64(v59, *v57), v61);
          v62[1] = v63;
          *(_QWORD *)(v13 + 8 * (4 * result + 4)) = *(_QWORD *)v54;
          *(_QWORD *)(v13 + 8 * (4 * result + 5)) = *(_QWORD *)(v54 + 8);
          *(_QWORD *)(v13 + 8 * (4 * result + 6)) = *(_QWORD *)(v54 + 16);
          *(_QWORD *)(v13 + 8 * (4 * result + 7)) = *(_QWORD *)(v54 + 24);
          result = (result + 2);
          v52 = 1;
        }
        v51 += 4;
        --v56;
      }
      while (v56);
      if (result < 3)
        break;
      v9 = (uint64_t *)*v9;
      v13 = v26;
      v26 = v53;
    }
    while (v9);
  }
  else
  {
    v53 = v26;
  }
  if (result < 3)
    return 0;
  v68 = 0;
  v69 = (double *)a2;
  v70 = a3;
  v71 = a4;
  do
  {
    v72 = *(double *)(v53 + 8 * (v68 + 3));
    v73 = 1.0 / v72;
    v74 = v72 <= 0.0;
    v75 = INFINITY;
    if (!v74)
      v75 = v73;
    if (a2)
      *v69 = *(double *)(v53 + 8 * v68) * v75;
    if (a3)
      *v70 = *(double *)(v53 + 8 * (v68 + 1)) * v75;
    if (a4)
      *v71 = *(double *)(v53 + 8 * (v68 + 2)) * v75;
    v68 += 4;
    ++v71;
    ++v70;
    ++v69;
  }
  while (4 * result != v68);
  return result;
}

uint64_t CA::Layer::State::fetch_defaults(uint64_t a1, CA::Transaction *a2, void (*a3)(uint64_t, uint64_t, uint64_t, CFTypeRef *), uint64_t a4)
{
  uint64_t v8;
  __n128 v9;
  __n128 v10;
  __n128 v11;
  __n128 v16;
  __n128 v18;
  int v20;
  __n128 v21;
  __n128 v22;
  BOOL v23;
  int v24;
  const void *v25;
  CFTypeRef *v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  int *v31;
  int v32;
  int v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  int v37;
  const __CFString *v39;
  const __CFString *v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  float64x2_t v47;
  objc_object *v48;
  _OWORD v49[4];
  CGAffineTransform v50;
  CFTypeRef cf1;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  double v57;
  double v58;
  double v59;
  float64x2_t v60;
  float64x2_t v61;
  CGAffineTransform v62;
  double v63[16];
  unsigned __int8 v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v64 = 0;
  memset(v63, 0, sizeof(v63));
  v61 = 0u;
  memset(&v62, 0, sizeof(v62));
  v60 = 0u;
  v58 = 0.0;
  v59 = 0.0;
  v57 = 0.0;
  v55 = 0u;
  v56 = 0u;
  v53 = 0u;
  v54 = 0u;
  cf1 = 0;
  v52 = 0;
  a3(a4, 534, 1, &cf1);
  if (cf1)
  {
    *(_DWORD *)(a1 + 16) |= 0x100u;
    v8 = 0x1FFFFFLL;
  }
  else
  {
    v8 = 0;
  }
  a3(a4, 400, 17, (CFTypeRef *)((char *)&v52 + 4));
  v9.n128_u32[0] = HIDWORD(v52);
  if (*((float *)&v52 + 1) != 1.0)
  {
    *(_DWORD *)(a1 + 12) |= 0x8000000u;
    v8 = v8 | 8;
  }
  ((void (*)(uint64_t, uint64_t, uint64_t, double *, __n128))a3)(a4, 557, 22, v63, v9);
  v10.n128_f64[0] = v63[0];
  if (v63[0] == 1.0)
  {
    v41 = 1;
    while (v41 != 16)
    {
      v42 = v41;
      v10.n128_f64[0] = v63[v41];
      v43 = *(&CATransform3DIdentity.m11 + v41++);
      if (v10.n128_f64[0] != v43)
      {
        if ((unint64_t)(v42 - 1) <= 0xE)
          goto LABEL_7;
        break;
      }
    }
  }
  else
  {
LABEL_7:
    *(_DWORD *)(a1 + 12) |= 0x10000000u;
    v8 = v8 | 0x20;
  }
  ((void (*)(uint64_t, uint64_t, uint64_t, double *, __n128))a3)(a4, 535, 22, v63, v10);
  v11.n128_f64[0] = v63[0];
  if (v63[0] == 1.0)
  {
    v44 = 1;
    while (v44 != 16)
    {
      v45 = v44;
      v11.n128_f64[0] = v63[v44];
      v46 = *(&CATransform3DIdentity.m11 + v44++);
      if (v11.n128_f64[0] != v46)
      {
        if ((unint64_t)(v45 - 1) <= 0xE)
          goto LABEL_9;
        break;
      }
    }
  }
  else
  {
LABEL_9:
    *(_DWORD *)(a1 + 12) |= 0x20000000u;
    v8 = v8 | 0x40;
  }
  ((void (*)(uint64_t, uint64_t, uint64_t, CGAffineTransform *, __n128))a3)(a4, 137, 23, &v62, v11);
  v50 = v62;
  if (!CGAffineTransformIsIdentity(&v50))
  {
    *(_DWORD *)(a1 + 16) |= 2u;
    v8 = v8 | 0x80;
  }
  a3(a4, 133, 21, (CFTypeRef *)&v60);
  __asm { FMOV            V2.2D, #1.0 }
  v47 = _Q2;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(v60), (int32x4_t)vceqq_f64(v61, _Q2))))) & 1) != 0)
  {
    *(_DWORD *)(a1 + 12) |= 0x80000000;
    v8 = v8 | 0x100;
  }
  a3(a4, 119, 21, (CFTypeRef *)&v60);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(v60), (int32x4_t)vceqq_f64(v61, v47))))) & 1) != 0)
  {
    *(_DWORD *)(a1 + 12) |= 0x40000000u;
    v8 = v8 | 0x20000;
  }
  a3(a4, 134, 18, (CFTypeRef *)&v57);
  v16.n128_f64[0] = v57;
  if (v57 != 1.0)
  {
    *(_DWORD *)(a1 + 16) |= 1u;
    v8 = v8 | 0x10;
    if (v16.n128_f64[0] == 2.0 || v16.n128_f64[0] == 3.0)
      *(_DWORD *)(a1 + 4) = *(_DWORD *)(a1 + 4) & 0xF3FFFFFF | ((v16.n128_f64[0] & 3) << 26);
  }
  ((void (*)(uint64_t, uint64_t, uint64_t, float64x2_t *, __n128))a3)(a4, 142, 21, &v60, v16);
  __asm { FMOV            V2.2D, #0.5 }
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64(v60, _Q2), (int32x4_t)vceqzq_f64(v61))))) & 1) != 0)
  {
    *(_DWORD *)(a1 + 16) |= 4u;
    v8 = v8 | 0x80000;
  }
  a3(a4, 25, 19, (CFTypeRef *)&v58);
  v18.n128_f64[0] = v58;
  if (v58 != 0.5 || v59 != 0.5)
  {
    if (v59 == 0.0 && v58 == 0.0)
      v20 = 24;
    else
      v20 = 8;
    *(_DWORD *)(a1 + 16) |= v20;
    v8 = v8 | 0x10;
  }
  ((void (*)(uint64_t, uint64_t, uint64_t, double *, __n128))a3)(a4, 26, 18, &v57, v18);
  v21.n128_f64[0] = v57;
  if (v57 != 0.0)
  {
    *(_DWORD *)(a1 + 16) |= 0x20u;
    v8 = v8 | 0x10;
  }
  ((void (*)(uint64_t, uint64_t, uint64_t, double *, __n128))a3)(a4, 604, 18, &v57, v21);
  v22.n128_f64[0] = v57;
  if (v57 != 0.0)
  {
    *(_DWORD *)(a1 + 16) |= 0x40u;
    v8 = v8 | 8;
  }
  ((void (*)(uint64_t, uint64_t, uint64_t, __int128 *, __n128))a3)(a4, 145, 25, &v53, v22);
  v49[0] = v53;
  v49[1] = v54;
  v49[2] = v55;
  v49[3] = v56;
  v23 = CACornerRadiiEqualToRadii((double *)v49, CACornerRadiiZero);
  v24 = *(_DWORD *)(a1 + 16);
  if (v23)
  {
    if ((v24 & 0x100000) != 0)
      goto LABEL_37;
  }
  else
  {
    v24 |= 0x1000000u;
    *(_DWORD *)(a1 + 16) = v24;
    v8 = v8 | 0x8000;
    if ((v24 & 0x100000) != 0)
    {
LABEL_37:
      if ((v24 & 0x200000) != 0)
        goto LABEL_45;
      goto LABEL_41;
    }
  }
  v48 = 0;
  a3(a4, 163, 4, (CFTypeRef *)&v48);
  CA::Layer::State::set_delegate((CA::Layer::State *)a1, a2, v48, 1);
  if ((*(_DWORD *)(a1 + 16) & 0x200000) != 0)
    goto LABEL_45;
LABEL_41:
  v26 = (CFTypeRef *)(a1 + 104);
  v25 = *(const void **)(a1 + 104);
  if (v25)
    CA::Transaction::release_object(a2, v25);
  a3(a4, 117, 1, (CFTypeRef *)(a1 + 104));
  if (*v26)
  {
    CFRetain(*v26);
    v8 = v8 | 1;
  }
LABEL_45:
  v27 = *(_DWORD *)(a1 + 16);
  if ((v27 & 0x400000) != 0)
  {
    if ((v27 & 0x800000) != 0)
      goto LABEL_47;
  }
  else
  {
    a3(a4, 124, 1, &cf1);
    *(_DWORD *)(a1 + 4) = *(_DWORD *)(a1 + 4) & 0xFFFFFFF8 | CA::Render::Layer::contents_format_from_string((const __CFString *)cf1, v39);
    v27 = *(_DWORD *)(a1 + 16);
    if ((v27 & 0x800000) != 0)
    {
LABEL_47:
      if ((v27 & 0x2000000) != 0)
        goto LABEL_49;
      goto LABEL_48;
    }
  }
  a3(a4, 129, 1, &cf1);
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a1 + 4) & 0xFFFFFF87 | (8
                                                          * CA::Render::Layer::gravity_from_string((const __CFString *)cf1, v40));
  v8 = v8 | 0x8000;
  if ((*(_DWORD *)(a1 + 16) & 0x2000000) == 0)
  {
LABEL_48:
    a3(a4, 190, 12, (CFTypeRef *)&v52);
    *(_DWORD *)(a1 + 4) = *(_DWORD *)(a1 + 4) & 0xFFFFF87F | ((v52 & 0xF) << 7);
    v8 = v8 | 0x8000;
  }
LABEL_49:
  v28 = *(_DWORD *)(a1 + 24);
  if ((v28 & 0x100) != 0)
  {
    if ((v28 & 0x200) != 0)
      goto LABEL_51;
  }
  else
  {
    a3(a4, 368, 12, (CFTypeRef *)&v52);
    *(_DWORD *)(a1 + 4) = *(_DWORD *)(a1 + 4) & 0xFFFF87FF | ((v52 & 0xF) << 11);
    v8 = v8 | 0x8000;
    v28 = *(_DWORD *)(a1 + 24);
    if ((v28 & 0x200) != 0)
    {
LABEL_51:
      if ((v28 & 0x400) != 0)
        goto LABEL_52;
LABEL_73:
      a3(a4, 482, 12, (CFTypeRef *)&v52);
      *(_DWORD *)(a1 + 4) = *(_DWORD *)(a1 + 4) & 0x3FFFFFFF | (v52 << 30);
      v8 = v8 | 0x8000;
      if ((*(_DWORD *)(a1 + 24) & 1) != 0)
        goto LABEL_57;
      goto LABEL_53;
    }
  }
  a3(a4, 177, 12, (CFTypeRef *)&v52);
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a1 + 4) & 0xFC007FFF | ((v52 & 0x7FF) << 15);
  v8 = v8 | 0x8000;
  v28 = *(_DWORD *)(a1 + 24);
  if ((v28 & 0x400) == 0)
    goto LABEL_73;
LABEL_52:
  if ((v28 & 1) != 0)
    goto LABEL_57;
LABEL_53:
  a3(a4, 135, 1, &cf1);
  if (objc_msgSend((id)cf1, "isEqualToString:", CFSTR("repeat")))
    v29 = 1024;
  else
    v29 = 0;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a1 + 12) & 0xFFFFFBFF | v29;
  v8 = v8 | 0x8000;
LABEL_57:
  if ((*(_BYTE *)(a1 + 20) & 8) == 0)
  {
    a3(a4, 551, 12, (CFTypeRef *)&v52);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 8) & 0xFFFFFFE7 | (8 * (v52 & 3));
    v8 = v8 | 0x8000;
  }
  v30 = 0;
  v31 = &dword_1E15A8414;
  do
  {
    if (((*(_DWORD *)(a1 + 4 * (*(v31 - 4) >> 5) + 4) >> *(v31 - 4)) & 1) == 0)
    {
      a3(a4, *(v31 - 1), 7, (CFTypeRef *)&v64);
      v32 = *(v31 - 5);
      v33 = v64;
      v34 = v32 >> 5;
      v35 = 1 << v32;
      v36 = a1 + 4 * v34;
      if (v64)
        v37 = *(_DWORD *)(v36 + 4) | v35;
      else
        v37 = *(_DWORD *)(v36 + 4) & ~v35;
      *(_DWORD *)(v36 + 4) = v37;
      if (((0x810842018A8uLL >> v30) & 1) != v33)
        v8 = *v31 | v8;
    }
    ++v30;
    v31 += 8;
  }
  while (v30 != 46);
  return v8;
}

uint64_t CA::Render::Layer::gravity_from_string(const __CFString *this, const __CFString *a2)
{
  int v2;
  int v3;
  uint64_t result;
  int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;

  if (this == CFSTR("resize"))
    return 9;
  v2 = CAInternAtom(this, 0);
  v3 = v2;
  if (v2 <= 459)
  {
    if (v2 == 335)
      v5 = 3;
    else
      v5 = 0;
    if (v2 == 71)
      v6 = 8;
    else
      v6 = v5;
    if (v2 == 70)
      v7 = 7;
    else
      v7 = 0;
    if (v2 == 69)
      v8 = 2;
    else
      v8 = v7;
    if (v2 <= 70)
      return v8;
    else
      return v6;
  }
  else if (v2 > 552)
  {
    if (v2 == 554)
      v9 = 5;
    else
      v9 = v2 == 553;
    if (v2 == 555)
      return 6;
    else
      return v9;
  }
  else
  {
    result = 0;
    switch(v3)
    {
      case 460:
        return 9;
      case 461:
        result = 10;
        break;
      case 462:
        result = 11;
        break;
      case 465:
        result = 4;
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t CA::Render::Layer::contents_format_from_string(const __CFString *cf1, const __CFString *a2)
{
  uint64_t result;

  result = 0;
  if (cf1 && cf1 != CFSTR("RGBA8"))
  {
    if (CFEqual(cf1, CFSTR("RGBA8")))
    {
      return 0;
    }
    else if (CFEqual(cf1, CFSTR("Automatic")))
    {
      return 5;
    }
    else if (CFEqual(cf1, CFSTR("RGBAh")))
    {
      return 1;
    }
    else if (CFEqual(cf1, CFSTR("RGBA10XR")))
    {
      return 2;
    }
    else if (CFEqual(cf1, CFSTR("A8")))
    {
      return 3;
    }
    else
    {
      return 4 * (CFEqual(cf1, CFSTR("Gray8")) != 0);
    }
  }
  return result;
}

void CA::Layer::set_commit_needed(CA::Layer *this, CA::Transaction *a2, int a3)
{
  int v6;
  int v7;

  if ((*((_DWORD *)this + 1) & 0x60000) == 0)
  {
    v6 = *((_DWORD *)a2 + 25);
    *((_DWORD *)a2 + 25) = v6 + 1;
    if (!v6)
      os_unfair_lock_lock((os_unfair_lock_t)&CA::Transaction::transaction_lock);
    if ((a3 & 1) != 0)
      v7 = 1032;
    else
      v7 = 8;
    *((_DWORD *)this + 10) |= a3 & 0xFFFFFFFE;
    CA::Layer::mark(this, a2, v7, 16);
    CA::Transaction::unlock(a2);
  }
}

void sub_1844B1C08(_Unwind_Exception *a1)
{
  CA::Transaction *v1;

  CA::Transaction::unlock(v1);
  _Unwind_Resume(a1);
}

char *classDescription_locked(objc_class *a1)
{
  uint64_t v2;
  char *v3;
  objc_class *v4;
  objc_class *v5;
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  BOOL v9;
  objc_class *v10;
  objc_class *v11;
  uint64_t v12;
  BOOL v13;
  unsigned int *v14;
  __int128 v15;
  uint64_t v16;
  objc_property *v17;
  const char *Attributes;
  NSObject *v19;
  unsigned int v20;
  SEL *v21;
  unsigned int v22;
  char **v23;
  char v24;
  const void *v25;
  const char *i;
  unsigned int v27;
  int64_t v28;
  int64_t v29;
  int64_t v30;
  SEL *v31;
  int64_t v32;
  char *v33;
  int v34;
  char *v35;
  int v36;
  char *v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  NSObject *v42;
  uint64_t v43;
  unsigned int v44;
  size_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  size_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  size_t v54;
  uint64_t v55;
  CFIndex v56;
  CFIndex v57;
  uint64_t v58;
  char *v59;
  CFDictionaryRef v60;
  int v61;
  char *v62;
  Method *v63;
  Method *v64;
  size_t v65;
  char *v66;
  unsigned int v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  int *v73;
  char v74;
  char v75;
  uint64_t v76;
  const void *v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  x_list_struct *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  const char *v85;
  const __CFString *String;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  void *v90;
  char *v91;
  CA::AttrList *v92;
  CA::AttrList **v93;
  CA::AttrList *v94;
  unsigned int *v95;
  const void *v96;
  int v97;
  malloc_zone_t *malloc_zone;
  Class v99;
  unint64_t v100;
  malloc_zone_t *v101;
  void *v102;
  BOOL (*v103)(const void *, const void *);
  unint64_t v104;
  x_list_struct *v105;
  x_list_struct *v106;
  _WORD *v107;
  malloc_zone_t *v108;
  void *v109;
  BOOL (*v110)(const void *, const void *);
  unint64_t v111;
  objc_property_t *v112;
  x_list_struct *v113;
  _WORD *v114;
  const char *v116;
  void *v117;
  __int128 v118;
  __int128 v119;
  void **v120;
  objc_property_t *v121;
  const char *Name;
  Class v123;
  unsigned int v124;
  _QWORD v125[4];
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  uint64_t v132;

  v132 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v125[0] = 0;
  v2 = x_hash_table_lookup(class_table, (uint64_t)a1, v125);
  if (v125[0])
    return (char *)v2;
  v123 = a1;
  v4 = (objc_class *)-[objc_class superclass](a1, "superclass");
  v5 = a1;
  if (v4 == a1)
    return 0;
  if (log_class_descriptions)
  {
    if (x_log_hook_p())
    {
      v116 = -[NSString UTF8String](NSStringFromClass(a1), "UTF8String");
      x_log_();
    }
    else
    {
      v6 = x_log_category_api;
      if (os_log_type_enabled((os_log_t)x_log_category_api, OS_LOG_TYPE_DEFAULT))
      {
        v7 = -[NSString UTF8String](NSStringFromClass(v5), "UTF8String");
        LODWORD(v125[0]) = 136315138;
        *(_QWORD *)((char *)v125 + 4) = v7;
        _os_log_impl(&dword_184457000, v6, OS_LOG_TYPE_DEFAULT, "creating class description for %s\n", (uint8_t *)v125, 0xCu);
      }
    }
  }
  v3 = (char *)malloc_type_malloc(0x90uLL, 0x10F0040449965B5uLL);
  *((_QWORD *)v3 + 1) = v123;
  *(_QWORD *)v3 = classDescription_locked(v4);
  *((_OWORD *)v3 + 1) = 0u;
  v120 = (void **)(v3 + 16);
  *((_OWORD *)v3 + 2) = 0u;
  *((_OWORD *)v3 + 3) = 0u;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  *((_QWORD *)v3 + 16) = 0;
  v3[136] = -[objc_class CA_automaticallyNotifiesObservers:](v123, "CA_automaticallyNotifiesObservers:", v123);
  *(_WORD *)(v3 + 137) = 0;
  *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 584) = v3;
  if ((Class)objc_opt_class() == v123)
  {
    classDescription_locked(objc_class *)::CALayer_needsLayoutForKey = -[objc_class methodForSelector:](v123, "methodForSelector:", sel_needsLayoutForKey_);
    if (!classDescription_locked(objc_class *)::CALayer_needsLayoutForKey)
      goto LABEL_17;
  }
  else if (!classDescription_locked(objc_class *)::CALayer_needsLayoutForKey)
  {
    goto LABEL_17;
  }
  if (-[objc_class isSubclassOfClass:](v123, "isSubclassOfClass:", objc_opt_class()))
  {
    v8 = -[objc_class methodForSelector:](v123, "methodForSelector:", sel_needsLayoutForKey_);
    v9 = v8 != classDescription_locked(objc_class *)::CALayer_needsLayoutForKey;
    goto LABEL_18;
  }
LABEL_17:
  v9 = 0;
LABEL_18:
  v3[137] = v9;
  v10 = (objc_class *)objc_opt_class();
  v11 = v123;
  if (v10 == v123)
  {
    classDescription_locked(objc_class *)::CALayer_needsDisplayForKey = -[objc_class methodForSelector:](v123, "methodForSelector:", sel_needsDisplayForKey_);
    v11 = v123;
    if (classDescription_locked(objc_class *)::CALayer_needsDisplayForKey)
      goto LABEL_20;
LABEL_23:
    v13 = 0;
    goto LABEL_26;
  }
  if (!classDescription_locked(objc_class *)::CALayer_needsDisplayForKey)
    goto LABEL_23;
LABEL_20:
  if (-[objc_class isSubclassOfClass:](v123, "isSubclassOfClass:", objc_opt_class()))
  {
    v12 = -[objc_class methodForSelector:](v123, "methodForSelector:", sel_needsDisplayForKey_);
    v13 = v12 != classDescription_locked(objc_class *)::CALayer_needsDisplayForKey;
  }
  else
  {
    v13 = 0;
  }
  v11 = v123;
LABEL_26:
  v3[138] = v13;
  v124 = 0;
  v121 = class_copyPropertyList(v11, &v124);
  if (v124)
  {
    v14 = (unsigned int *)malloc_type_malloc(40 * v124, 0x10F004002E6B5C6uLL);
    *v120 = v14;
    if (v124)
    {
      v16 = 0;
      *(_QWORD *)&v15 = 67109634;
      v118 = v15;
      *(_QWORD *)&v15 = 136315394;
      v119 = v15;
      while (1)
      {
        v17 = v121[v16];
        Name = property_getName(v17);
        Attributes = property_getAttributes(v17);
        if (log_class_descriptions)
        {
          if (x_log_hook_p())
          {
            v117 = (void *)Attributes;
            v116 = Name;
            x_log_();
          }
          else
          {
            v19 = x_log_category_api;
            if (os_log_type_enabled((os_log_t)x_log_category_api, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(v125[0]) = v119;
              *(_QWORD *)((char *)v125 + 4) = Name;
              WORD2(v125[1]) = 2080;
              *(_QWORD *)((char *)&v125[1] + 6) = Attributes;
              _os_log_impl(&dword_184457000, v19, OS_LOG_TYPE_DEFAULT, "  %s: %s\n", (uint8_t *)v125, 0x16u);
            }
          }
        }
        v20 = CAInternAtomWithCString(Name);
        *((_QWORD *)v14 + 1) = 0;
        v21 = (SEL *)(v14 + 2);
        *((_QWORD *)v14 + 2) = 0;
        LOWORD(v22) = 0;
        *v14 = v20;
        v14[1] = 0x20000;
        *((_QWORD *)v14 + 3) = 0;
        v23 = (char **)(v14 + 6);
        *((_QWORD *)v14 + 4) = 0;
        v24 = *Attributes;
        if (*Attributes)
          break;
LABEL_108:
        if (-[objc_class CA_encodesPropertyConditionally:type:](v123, "CA_encodesPropertyConditionally:type:", *v14, (unsigned __int16)v22, (_QWORD)v118, *((_QWORD *)&v118 + 1)))v14[1] |= 0x20000000u;
        if (log_class_descriptions)
        {
          if (x_log_hook_p())
          {
            v116 = (const char *)HIWORD(v14[1]);
            x_log_();
          }
          else
          {
            v42 = x_log_category_api;
            if (os_log_type_enabled((os_log_t)x_log_category_api, OS_LOG_TYPE_DEFAULT))
            {
              v43 = *((_QWORD *)v14 + 3);
              v44 = HIWORD(v14[1]);
              v125[0] = __PAIR64__((unsigned __int16)v14[1], v118);
              LOWORD(v125[1]) = 2080;
              *(_QWORD *)((char *)&v125[1] + 2) = v43;
              WORD1(v125[2]) = 1024;
              HIDWORD(v125[2]) = v44;
              _os_log_impl(&dword_184457000, v42, OS_LOG_TYPE_DEFAULT, "    type %d: %s flags 0x%x\n", (uint8_t *)v125, 0x18u);
            }
          }
        }
        if (*((_WORD *)v14 + 2) && *v14)
        {
          if (!*((_QWORD *)v14 + 2))
            *((_QWORD *)v14 + 2) = sel_registerName(Name);
          if (!*v21 && (*((_BYTE *)v14 + 6) & 1) == 0)
            *v21 = defaultSetter(Name);
          v14 += 10;
          ++*((_DWORD *)v3 + 6);
        }
        if (++v16 >= (unint64_t)v124)
          goto LABEL_124;
      }
      while (1)
      {
        v25 = Attributes + 1;
        for (i = Attributes + 1; *i && *i != 44; ++i)
          ;
        if (v24 > 70)
        {
          switch(v24)
          {
            case 'R':
              v27 = v14[1] | 0x10000;
              goto LABEL_86;
            case 'S':
              v29 = i - Attributes;
              if (i - Attributes <= 255)
              {
                memcpy(v125, v25, v29 + 1);
                *((_BYTE *)v125 + v29 - 1) = 0;
                *v21 = sel_registerName((const char *)v125);
              }
              goto LABEL_87;
            case 'T':
              v30 = i - Attributes;
              if (i - Attributes > 255)
                goto LABEL_87;
              v31 = v21;
              v32 = v30 - 1;
              v33 = (char *)v125;
              memcpy(v125, v25, v30 - 1);
              *((_BYTE *)v125 + v32) = 0;
              v21 = v31;
              *v23 = 0;
              while (2)
              {
                switch(*v33)
                {
                  case '@':
                    v38 = v33[1];
                    v37 = v33 + 1;
                    if (v38 == 34)
                      *v23 = intern_quoted(v37);
                    goto LABEL_74;
                  case 'A':
                  case 'D':
                  case 'E':
                  case 'F':
                  case 'G':
                  case 'H':
                  case 'J':
                  case 'K':
                  case 'M':
                  case 'P':
                  case 'T':
                  case 'U':
                  case 'W':
                  case 'X':
                  case 'Y':
                  case 'Z':
                  case '[':
                  case '\\':
                  case ']':
                  case '_':
                  case 'a':
                  case 'b':
                  case 'e':
                  case 'g':
                  case 'h':
                  case 'j':
                  case 'k':
                  case 'm':
                  case 'p':
                    goto LABEL_61;
                  case 'B':
                    v34 = 6;
                    goto LABEL_85;
                  case 'C':
                    v34 = 8;
                    goto LABEL_85;
                  case 'I':
                    v34 = 12;
                    goto LABEL_85;
                  case 'L':
                  case 'Q':
                    v34 = 14;
                    goto LABEL_85;
                  case 'N':
                  case 'O':
                  case 'R':
                  case 'V':
                  case 'n':
                  case 'o':
                  case 'r':
                    ++v33;
                    continue;
                  case 'S':
                    v34 = 10;
                    goto LABEL_85;
                  case '^':
                    v36 = v33[1];
                    v35 = v33 + 1;
                    if (v36 == 123)
                      *v23 = intern_struct_name(v35);
                    v34 = 2;
                    goto LABEL_85;
                  case 'c':
                    v34 = 7;
                    goto LABEL_85;
                  case 'd':
                    v34 = 18;
                    goto LABEL_85;
                  case 'f':
                    v34 = 17;
                    goto LABEL_85;
                  case 'i':
                    v34 = 11;
                    goto LABEL_85;
                  case 'l':
                  case 'q':
                    v34 = 13;
                    goto LABEL_85;
                  case 's':
                    v34 = 9;
                    goto LABEL_85;
                  default:
                    if (*v33 == 58)
                    {
LABEL_74:
                      *((_WORD *)v14 + 2) = 1;
                      goto LABEL_87;
                    }
LABEL_61:
                    if (compare_types(v33, "{CGPoint=dd}"))
                    {
                      v34 = 19;
                    }
                    else if (compare_types(v33, "{CGSize=dd}"))
                    {
                      v34 = 20;
                    }
                    else if (compare_types(v33, "{CGRect={CGPoint=dd}{CGSize=dd}}"))
                    {
                      v34 = 21;
                    }
                    else if (compare_types(v33, "{CGAffineTransform=dddddd}") || compare_types(v33, "{?=dddddd}"))
                    {
                      v34 = 23;
                    }
                    else if (compare_types(v33, "{CATransform3D=dddddddddddddddd}"))
                    {
                      v34 = 22;
                    }
                    else if (compare_types(v33, "{CAPoint3D=ddd}"))
                    {
                      v34 = 24;
                    }
                    else if (compare_types(v33, "{CACornerRadii={CGSize=dd}{CGSize=dd}{CGSize=dd}{CGSize=dd}}"))
                    {
                      v34 = 25;
                    }
                    else
                    {
                      v34 = 0;
                    }
LABEL_85:
                    v27 = v14[1] & 0xFFFD0000 | v34;
                    break;
                }
                break;
              }
              break;
            case 'U':
            case 'V':
              goto LABEL_87;
            case 'W':
              v27 = v14[1] | 0x80000;
              goto LABEL_86;
            default:
              if (v24 == 71)
              {
                v28 = i - Attributes;
                if (i - Attributes <= 255)
                {
                  memcpy(v125, v25, v28 + 1);
                  *((_BYTE *)v125 + v28 - 1) = 0;
                  *((_QWORD *)v14 + 2) = sel_registerName((const char *)v125);
                }
              }
              goto LABEL_87;
          }
          goto LABEL_86;
        }
        if (v24 == 38)
          break;
        if (v24 == 67)
        {
          v27 = v14[1] & 0xFFF9FFFF | 0x40000;
          goto LABEL_86;
        }
        if (v24 == 68)
        {
          v27 = v14[1] | 0x200000;
LABEL_86:
          v14[1] = v27;
        }
LABEL_87:
        if (*i == 44)
          Attributes = i + 1;
        else
          Attributes = i;
        v24 = *Attributes;
        if (!*Attributes)
        {
          v22 = v14[1];
          if ((unsigned __int16)v22 - 1 <= 3)
          {
            v39 = v22 & 0xFFFF0000;
            v40 = v22 & 0xFFFF0000 | 2;
            if ((v22 & 0x20000) != 0)
              v40 = v22 & 0xFFFF0000 | 1;
            if ((v22 & 0x80000) != 0)
              v40 = v39 | 4;
            v41 = v39 | 3;
            if ((v22 & 0x40000) != 0)
              v22 = v41;
            else
              v22 = v40;
            v14[1] = v22;
          }
          goto LABEL_108;
        }
      }
      v27 = v14[1] & 0xFFFDFFFF;
      goto LABEL_86;
    }
LABEL_124:
    if (!*((_DWORD *)v3 + 6))
    {
      free(*v120);
      *v120 = 0;
    }
  }
  free(v121);
  v45 = *((unsigned int *)v3 + 6);
  if (!(_DWORD)v45)
  {
    v59 = v3;
    *((_QWORD *)v3 + 14) = 0;
    goto LABEL_163;
  }
  v46 = *v120;
  if (!*v120)
    __assert_rtn("classDescription_locked", "CAObject.mm", 436, "info != NULL");
  qsort(*v120, v45, 0x28uLL, (int (__cdecl *)(const void *, const void *))compareInfo);
  MEMORY[0x1E0C80A78](v47);
  v49 = (char *)&v118 - 8 * v48;
  bzero(v49, v50);
  MEMORY[0x1E0C80A78](v51);
  v53 = (char *)&v118 - 8 * v52;
  bzero(v53, v54);
  v55 = *((unsigned int *)v3 + 6);
  if ((_DWORD)v55)
  {
    v56 = 0;
    do
    {
      *(_QWORD *)&v49[8 * v56] = v46[2];
      v57 = v56 + 1;
      *(_QWORD *)&v53[8 * v56] = v46;
      v58 = v46[1];
      if (v58)
      {
        *(_QWORD *)&v49[8 * v57] = v58;
        *(_QWORD *)&v53[8 * v57] = v46;
        v57 = v56 + 2;
      }
      v46 += 5;
      v56 = v57;
      --v55;
    }
    while (v55);
  }
  else
  {
    v57 = 0;
  }
  v60 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE18], (const void **)v49, (const void **)v53, v57, 0, 0);
  v59 = v3;
  v61 = *((_DWORD *)v3 + 6);
  *((_QWORD *)v3 + 14) = v60;
  if (v61)
  {
    LODWORD(v125[0]) = 0;
    v62 = (char *)*v120;
    v63 = class_copyMethodList(v123, (unsigned int *)v125);
    v64 = v63;
    if (!LODWORD(v125[0]))
    {
      v66 = 0;
LABEL_145:
      v69 = *((unsigned int *)v3 + 6);
      if (!(_DWORD)v69)
        goto LABEL_158;
      v70 = 0;
      while (1)
      {
        v71 = &v62[40 * v70];
        if ((v71[6] & 0x20) == 0)
          goto LABEL_155;
        v72 = 0;
        v73 = (int *)(v71 + 4);
        v74 = 1;
        while (1)
        {
          v75 = v74;
          v76 = (uint64_t)&v62[40 * v70 + 8 * v72];
          v78 = *(_QWORD *)(v76 + 8);
          v77 = (const void *)(v76 + 8);
          if (!v78
            || bsearch(v77, v66, LODWORD(v125[0]), 8uLL, (int (__cdecl *)(const void *, const void *))compare_sel))
          {
            goto LABEL_153;
          }
          v79 = *v73;
          if ((v75 & 1) == 0)
            break;
          *v73 = v79 | 0x40000000;
LABEL_153:
          v74 = 0;
          v72 = 1;
          if ((v75 & 1) == 0)
            goto LABEL_154;
        }
        *v73 = v79 | 0x80000000;
LABEL_154:
        v69 = *((unsigned int *)v3 + 6);
LABEL_155:
        if (++v70 >= v69)
        {
LABEL_158:
          if (LODWORD(v125[0]))
          {
            if (LODWORD(v125[0]) >= 0x201)
              free(v66);
            free(v64);
          }
          v59 = v3;
          goto LABEL_163;
        }
      }
    }
    if (LODWORD(v125[0]) > 0x200)
    {
      v66 = (char *)malloc_type_malloc(8 * LODWORD(v125[0]), 0x80040B8603338uLL);
      v67 = v125[0];
      if (!LODWORD(v125[0]))
      {
LABEL_144:
        qsort(v66, v67, 8uLL, (int (__cdecl *)(const void *, const void *))compare_sel);
        goto LABEL_145;
      }
    }
    else
    {
      MEMORY[0x1E0C80A78](v63);
      v66 = (char *)&v118 - ((v65 + 15) & 0xFFFFFFFF0);
      bzero(v66, v65);
    }
    v68 = 0;
    do
    {
      *(_QWORD *)&v66[8 * v68] = method_getName(v64[v68]);
      ++v68;
      v67 = v125[0];
    }
    while (v68 < LODWORD(v125[0]));
    goto LABEL_144;
  }
LABEL_163:
  v121 = 0;
  Name = 0;
  v80 = 0;
  v81 = 0;
  do
  {
    if (*((_DWORD *)v59 + 6))
    {
      v82 = 0;
      v83 = 0;
      do
      {
        v130 = 0u;
        v131 = 0u;
        v128 = 0u;
        v129 = 0u;
        v126 = 0u;
        v127 = 0u;
        memset(v125, 0, sizeof(v125));
        v84 = *((_QWORD *)v59 + 2);
        v85 = (const char *)*(unsigned int *)(v84 + v82);
        String = CAAtomGetString(*(_DWORD *)(v84 + v82));
        if (v3[137])
        {
          v87 = -[objc_class needsLayoutForKey:](v123, "needsLayoutForKey:", String);
          if ((_DWORD)v87)
          {
            MEMORY[0x1E0C80A78](v87);
            v116 = v85;
            v117 = v81;
            ++v80;
            v81 = (x_list_struct *)&v116;
          }
        }
        if (v3[138])
        {
          v88 = -[objc_class needsDisplayForKey:](v123, "needsDisplayForKey:", String);
          if ((_DWORD)v88)
          {
            MEMORY[0x1E0C80A78](v88);
            v116 = v85;
            v117 = v121;
            v121 = (objc_property_t *)&v116;
            ++Name;
          }
        }
        v89 = (void *)-[objc_class defaultValueForKey:](v123, "defaultValueForKey:", String);
        if (v89)
        {
          if (v59 == v3
            || !*(_QWORD *)v3
            || (v90 = (void *)objc_msgSend(*(id *)(*(_QWORD *)v3 + 8), "defaultValueForKey:", String), v90 != v89)
            && (objc_msgSend(v90, "isEqual:", v89) & 1) == 0)
          {
            CAValueObjCUnbox(v89, *(unsigned __int16 *)(*((_QWORD *)v59 + 2) + v82 + 4), (uint64_t)v125);
            v91 = &v3[8 * (v85 & 7)];
            v94 = (CA::AttrList *)*((_QWORD *)v91 + 6);
            v93 = (CA::AttrList **)(v91 + 48);
            v92 = v94;
            v95 = (unsigned int *)(*((_QWORD *)v59 + 2) + v82);
            v96 = (const void *)*v95;
            v97 = *((unsigned __int16 *)v95 + 2);
            if (!v94)
            {
              malloc_zone = (malloc_zone_t *)get_malloc_zone();
              v92 = (CA::AttrList *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x10uLL, 0x743898A5uLL);
            }
            *v93 = CA::AttrList::set(v92, v96, v97, (unsigned __int8 *)v125);
          }
        }
        ++v83;
        v82 += 40;
      }
      while (v83 < *((unsigned int *)v59 + 6));
    }
    v59 = *(char **)v59;
  }
  while (v59);
  v100 = (unint64_t)Name;
  v99 = v123;
  if (v80)
  {
    if (v80 < 0)
    {
      *((_QWORD *)v3 + 4) = 0;
    }
    else
    {
      v101 = (malloc_zone_t *)get_malloc_zone();
      v102 = malloc_type_zone_malloc(v101, 2 * v80, 0x8BB15036uLL);
      *((_QWORD *)v3 + 4) = v102;
      if (v102)
      {
        if (v81)
        {
          v104 = 0;
          v105 = v81;
          do
          {
            ++v104;
            v105 = (x_list_struct *)*((_QWORD *)v105 + 1);
          }
          while (v105);
          v106 = list_sort_1(v81, v104, v103);
          if (v106)
          {
            v107 = (_WORD *)*((_QWORD *)v3 + 4);
            do
            {
              *v107++ = *(_QWORD *)v106;
              v106 = (x_list_struct *)*((_QWORD *)v106 + 1);
            }
            while (v106);
          }
        }
        *((_WORD *)v3 + 14) = v80;
      }
    }
  }
  if (v100)
  {
    if ((v100 & 0x8000000000000000) != 0)
    {
      *((_QWORD *)v3 + 5) = 0;
    }
    else
    {
      v108 = (malloc_zone_t *)get_malloc_zone();
      v109 = malloc_type_zone_malloc(v108, 2 * v100, 0x8BB15036uLL);
      *((_QWORD *)v3 + 5) = v109;
      if (v109)
      {
        if (v121)
        {
          v111 = 0;
          v112 = v121;
          do
          {
            ++v111;
            v112 = (objc_property_t *)v112[1];
          }
          while (v112);
          v113 = list_sort_1((x_list_struct *)v121, v111, v110);
          if (v113)
          {
            v114 = (_WORD *)*((_QWORD *)v3 + 5);
            do
            {
              *v114++ = *(_QWORD *)v113;
              v113 = (x_list_struct *)*((_QWORD *)v113 + 1);
            }
            while (v113);
          }
        }
        *((_WORD *)v3 + 15) = v100;
      }
    }
  }
  hash_table_modify((int *)class_table, (uint64_t)v99, (uint64_t)v3, 0);
  return v3;
}

const __CFString *CAAtomGetString(unsigned int a1)
{
  unint64_t v2;
  uint64_t v3;
  __int16 *v4;
  int v5;
  const __CFString *v6;

  if (!a1)
    return CFSTR("<nil>");
  os_unfair_lock_lock((os_unfair_lock_t)&atomLock);
  if (!atomArray)
    initAtoms();
  if (a1 >= 0x25F)
  {
    v2 = a1;
  }
  else
  {
    v2 = a1;
    v3 = *(_QWORD *)(atomArray + 8 * a1);
    if (!v3)
    {
      v4 = &word_18475FA82;
      while (1)
      {
        v5 = (unsigned __int16)*v4;
        v4 += 2;
        if (v5 == a1)
          break;
        if (++v3 == 1566)
          goto LABEL_12;
      }
      *(_QWORD *)(atomArray + 8 * a1) = CFStringCreateWithCStringNoCopy(0, &stringpool_contents[*((__int16 *)&wordlist + 2 * v3)], 0x8000100u, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
    }
  }
LABEL_12:
  if (atomArraySize <= v2)
    v6 = CFSTR("<unknown>");
  else
    v6 = *(const __CFString **)(atomArray + 8 * v2);
  os_unfair_lock_unlock((os_unfair_lock_t)&atomLock);
  return v6;
}

uint64_t CAInternAtom(const __CFString *a1, int a2)
{
  const char *CStringPtr;
  uint64_t v5;
  uint64_t v6;
  CFStringRef Copy;
  _OWORD v9[4];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  memset(v9, 0, sizeof(v9));
  CStringPtr = CFStringGetCStringPtr(a1, 0x8000100u);
  if (!CStringPtr && (CStringPtr = (const char *)v9, !CFStringGetCString(a1, (char *)v9, 64, 0x8000100u))
    || (v5 = (uint64_t)_CAInternAtomWithCString(CStringPtr), !(_DWORD)v5))
  {
    os_unfair_lock_lock((os_unfair_lock_t)&atomLock);
    v6 = atomDict;
    if (!atomDict)
    {
      initAtoms();
      v6 = atomDict;
    }
    v5 = x_hash_table_lookup(v6, (uint64_t)a1, 0);
    if (!(_DWORD)v5 && a2)
    {
      v5 = nextAtom++;
      Copy = CFStringCreateCopy(0, a1);
      insertAtom(v5, Copy);
      CFRelease(Copy);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)&atomLock);
  }
  return v5;
}

const char *_CAInternAtomWithCString(const char *__s)
{
  const char *v1;
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  char *v6;

  if (__s)
  {
    v1 = __s;
    v2 = *(unsigned __int8 *)__s;
    if (*__s && (v3 = strlen(__s), v4 = v3 - 1, (v3 - 1) <= 0x2D))
    {
      switch(v3)
      {
        case 1:
          goto LABEL_9;
        case 2:
        case 3:
        case 4:
          goto LABEL_8;
        case 5:
          goto LABEL_7;
        case 6:
        case 7:
        case 8:
        case 9:
          goto LABEL_6;
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
          goto LABEL_5;
        default:
          v3 += hash_asso_values[*((unsigned __int8 *)v1 + 24)];
LABEL_5:
          v3 += hash_asso_values[*((unsigned __int8 *)v1 + 9)];
LABEL_6:
          v3 += hash_asso_values[*((unsigned __int8 *)v1 + 5) + 1];
LABEL_7:
          v3 += hash_asso_values[*((unsigned __int8 *)v1 + 4)];
LABEL_8:
          v3 += hash_asso_values[*((unsigned __int8 *)v1 + 1)];
LABEL_9:
          v5 = v3 + hash_asso_values[v2] + hash_asso_values[v1[v4]];
          if (v5 > 0x61D)
            return 0;
          if (*((__int16 *)&wordlist
               + 2 * v3
               + 2 * hash_asso_values[v2]
               + 2 * hash_asso_values[v1[v4]]) < 0)
            return 0;
          v6 = &stringpool_contents[*((unsigned __int16 *)&wordlist
                                    + 2 * v3
                                    + 2 * hash_asso_values[v2]
                                    + 2 * hash_asso_values[v1[v4]])];
          if ((_DWORD)v2 != *v6 || strcmp(v1 + 1, v6 + 1))
            return 0;
          __s = (const char *)*((unsigned __int16 *)&wordlist + 2 * v5 + 1);
          break;
      }
    }
    else
    {
      return 0;
    }
  }
  return __s;
}

uint64_t CA::OGL::MetalBufferPool::set_encoder(uint64_t this, objc_object *a2)
{
  _QWORD *v3;

  if (a2)
  {
    v3 = (_QWORD *)this;
    *(_OWORD *)(this + 160) = 0u;
    *(_OWORD *)(this + 176) = 0u;
    *(_OWORD *)(this + 128) = 0u;
    *(_OWORD *)(this + 144) = 0u;
    *(_OWORD *)(this + 96) = 0u;
    *(_OWORD *)(this + 112) = 0u;
    *(_OWORD *)(this + 64) = 0u;
    *(_OWORD *)(this + 80) = 0u;
    *(_QWORD *)(this + 192) = a2;
    *(_QWORD *)(this + 200) = -[objc_object methodForSelector:](a2, "methodForSelector:", sel_setVertexBuffer_offset_atIndex_);
    v3[26] = -[objc_object methodForSelector:](a2, "methodForSelector:", sel_setFragmentBuffer_offset_atIndex_);
    v3[27] = -[objc_object methodForSelector:](a2, "methodForSelector:", sel_setVertexBufferOffset_atIndex_);
    v3[28] = -[objc_object methodForSelector:](a2, "methodForSelector:", sel_setFragmentBufferOffset_atIndex_);
    this = -[objc_object methodForSelector:](a2, "methodForSelector:", sel_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset_);
    v3[29] = this;
  }
  return this;
}

uint64_t CAInternAtomWithCString(const char *a1)
{
  uint64_t v2;
  CFStringRef v3;
  CFStringRef v4;
  uint64_t v5;

  v2 = (uint64_t)_CAInternAtomWithCString(a1);
  if (!(_DWORD)v2)
  {
    v3 = CFStringCreateWithCString(0, a1, 0x8000100u);
    if (v3)
    {
      v4 = v3;
      os_unfair_lock_lock((os_unfair_lock_t)&atomLock);
      v5 = atomDict;
      if (!atomDict)
      {
        initAtoms();
        v5 = atomDict;
      }
      v2 = x_hash_table_lookup(v5, (uint64_t)v4, 0);
      if (!(_DWORD)v2)
      {
        v2 = nextAtom++;
        insertAtom(v2, v4);
      }
      os_unfair_lock_unlock((os_unfair_lock_t)&atomLock);
      CFRelease(v4);
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

SEL defaultSetter(const char *a1)
{
  size_t v2;
  char *v3;
  size_t v4;
  _QWORD v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v2 = strlen(a1);
  v3 = (char *)v6 - ((MEMORY[0x1E0C80A78](v2) + 20) & 0xFFFFFFFFFFFFFFF0);
  bzero(v3, v4);
  *(_WORD *)v3 = 25971;
  v3[2] = 116;
  memcpy(v3 + 3, a1, v2);
  v3[3] = __toupper(v3[3]);
  *(_WORD *)&v3[v2 + 3] = 58;
  return sel_registerName(v3);
}

double CAValueObjCUnbox(void *a1, int a2, uint64_t a3)
{
  uint64_t v4;
  char v5;
  double result;
  __int16 v7;
  int v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  switch(a2)
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      goto LABEL_2;
    case 6:
      v5 = objc_msgSend(a1, "BOOLValue");
      goto LABEL_7;
    case 7:
      v5 = objc_msgSend(a1, "charValue");
      goto LABEL_7;
    case 8:
      v5 = objc_msgSend(a1, "unsignedCharValue");
LABEL_7:
      *(_BYTE *)a3 = v5;
      return result;
    case 9:
      v7 = objc_msgSend(a1, "shortValue");
      goto LABEL_10;
    case 10:
      v7 = objc_msgSend(a1, "unsignedShortValue");
LABEL_10:
      *(_WORD *)a3 = v7;
      return result;
    case 11:
      v8 = objc_msgSend(a1, "intValue");
      goto LABEL_13;
    case 12:
      v8 = objc_msgSend(a1, "unsignedIntValue");
LABEL_13:
      *(_DWORD *)a3 = v8;
      return result;
    case 13:
      a1 = (void *)objc_msgSend(a1, "longValue");
      goto LABEL_2;
    case 14:
      a1 = (void *)objc_msgSend(a1, "unsignedLongValue");
      goto LABEL_2;
    case 15:
      a1 = (void *)objc_msgSend(a1, "longLongValue");
      goto LABEL_2;
    case 16:
      a1 = (void *)objc_msgSend(a1, "unsignedLongLongValue");
LABEL_2:
      *(_QWORD *)a3 = a1;
      return result;
    case 17:
      objc_msgSend(a1, "floatValue");
      *(_DWORD *)a3 = LODWORD(result);
      return result;
    case 18:
      objc_msgSend(a1, "doubleValue");
      *(double *)a3 = result;
      return result;
    case 19:
    case 20:
      v4 = 16;
      goto LABEL_26;
    case 21:
      v4 = 32;
      goto LABEL_26;
    case 22:
      v4 = 128;
      goto LABEL_26;
    case 23:
      if (a1)
      {
        objc_msgSend(a1, "CA_CGAffineTransformValue");
      }
      else
      {
        v10 = 0u;
        v11 = 0u;
        v9 = 0u;
      }
      *(_OWORD *)a3 = v9;
      *(_OWORD *)(a3 + 16) = v10;
      result = *(double *)&v11;
      *(_OWORD *)(a3 + 32) = v11;
      return result;
    case 24:
      v4 = 24;
      goto LABEL_26;
    case 25:
      v4 = 64;
LABEL_26:
      objc_msgSend(a1, "getValue:size:", a3, v4);
      break;
    default:
      return result;
  }
  return result;
}

BOOL compare_types(char *a1, const char *a2)
{
  int v3;
  int v4;
  char *v6;
  int v7;

  while (1)
  {
    v3 = *a1;
    v4 = *(unsigned __int8 *)a2;
    if (!*a1 || v4 == 0)
      break;
    if (v3 == 34)
    {
      v6 = strchr(a1 + 1, 34);
      v7 = v6[1];
      a1 = v6 + 1;
      v3 = v7;
    }
    ++a1;
    ++a2;
    if (v3 != v4)
      return 0;
  }
  return v3 == v4;
}

char *intern_quoted(char *a1)
{
  char *v1;
  char *result;
  char *v3;
  char *v4;
  char *v5;
  size_t v6;
  uint64_t v7;
  char *v8;
  const char *v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v1 = a1 + 1;
  result = strchr(a1 + 1, 34);
  if (result)
  {
    v3 = result;
    v4 = strchr(v1, 60);
    if (v4)
      v5 = v4;
    else
      v5 = v3;
    v6 = v5 - v1;
    if (v5 == v1)
    {
      return 0;
    }
    else
    {
      MEMORY[0x1E0C80A78](v4);
      v8 = (char *)v10 - v7;
      bzero((char *)v10 + v6 - v7, v6 != -1);
      memcpy(v8, v1, v6);
      v8[v6] = 0;
      v9 = sel_registerName(v8);
      return (char *)sel_getName(v9);
    }
  }
  return result;
}

CFTypeRef insertAtom(unsigned int a1, CFTypeRef cf)
{
  int *v4;
  CFTypeRef v5;
  uint64_t v6;
  uint64_t v7;
  CFTypeRef result;
  malloc_zone_t *malloc_zone;
  void *v10;
  uint64_t v11;
  size_t v12;
  void *v13;
  malloc_zone_t *v14;

  v4 = (int *)atomDict;
  v5 = CFRetain(cf);
  v6 = a1;
  hash_table_modify(v4, (uint64_t)v5, a1, 0);
  v7 = atomArraySize;
  if (atomArraySize <= (unint64_t)a1)
  {
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v10 = malloc_type_zone_calloc(malloc_zone, 1uLL, 16 * v7, 0xB6D46EB3uLL);
    if (v10)
    {
      v11 = (uint64_t)v10;
      v12 = 8 * v7;
      v13 = (void *)atomArray;
      memcpy(v10, (const void *)atomArray, v12);
      v14 = (malloc_zone_t *)get_malloc_zone();
      malloc_zone_free(v14, v13);
      atomArray = v11;
      atomArraySize *= 2;
    }
  }
  result = CFRetain(cf);
  *(_QWORD *)(atomArray + 8 * v6) = result;
  return result;
}

BOOL CACornerRadiiEqualToRadii(double *a1, double *a2)
{
  if (a1[6] != a2[6] || a1[7] != a2[7])
    return 0;
  if (a1[4] != a2[4] || a1[5] != a2[5])
    return 0;
  if (*a1 != *a2 || a1[1] != a2[1])
    return 0;
  if (a1[3] == a2[3])
    return a1[2] == a2[2];
  return 0;
}

char *intern_struct_name(char *a1)
{
  const char *v1;
  char *result;
  size_t v3;
  uint64_t v4;
  char *v5;
  const char *v6;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  v1 = a1 + 1;
  result = strchr(a1 + 1, 61);
  if (result)
  {
    v3 = result - v1;
    MEMORY[0x1E0C80A78](result);
    v5 = (char *)v7 - v4;
    bzero((char *)v7 + v3 - v4, v3 != -1);
    memcpy(v5, v1, v3);
    v5[v3] = 0;
    v6 = sel_registerName(v5);
    return (char *)sel_getName(v6);
  }
  return result;
}

void initAtoms()
{
  size_t v0;
  malloc_zone_t *malloc_zone;

  if (!atomDict)
  {
    nextAtom = 607;
    atomDict = (uint64_t)x_hash_table_new_((unint64_t (*)(uint64_t))hash_cf, (BOOL (*)(uint64_t, uint64_t))compare_cf, 0, 0, 0, 0);
    if ((2 * nextAtom) <= 0x80)
      v0 = 128;
    else
      v0 = (2 * nextAtom);
    atomArraySize = v0;
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    atomArray = (uint64_t)malloc_type_zone_calloc(malloc_zone, v0, 8uLL, 0xB6D46EB3uLL);
  }
}

void CA::Render::VelocityState::init_scale(CA::Render::VelocityState *this, const CA::Render::Layer *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  double *v6;
  double *v7;
  double *v8;
  int v9;

  if (*((_BYTE *)this + 125))
  {
    *((_BYTE *)this + 125) = 0;
    v3 = *((_QWORD *)a2 + 16);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 16);
      if (v4)
      {
        v5 = *(_DWORD *)(v4 + 16);
        v6 = (double *)(v4 + 24);
        if (v5 >= 0x10)
          v7 = v6;
        else
          v7 = (double *)&CA::Mat4Impl::mat4_identity_double;
        if (!CA::Mat4Impl::mat4_is_affine_with_z_transform((CA::Mat4Impl *)v7, (const double *)a2))
        {
          if ((*((_BYTE *)this + 121) & 8) == 0)
            *((_BYTE *)this + 124) = 2;
          v9 = 2048;
          goto LABEL_16;
        }
        CA::Mat4Impl::mat4_get_scale((CA::Mat4Impl *)v7, (double *)this + 9, (double *)this + 10, v8);
        if (fabs(v7[2]) >= 0.000001
          || fabs(v7[6]) >= 0.000001
          || fabs(v7[10] + -1.0) >= 0.000001
          || fabs(v7[14]) >= 0.000001)
        {
          v9 = *((_DWORD *)this + 30) | 0x400;
LABEL_16:
          *((_DWORD *)this + 30) = v9;
        }
      }
    }
  }
}

BOOL CA::Mat4Impl::mat4_is_affine_with_z_transform(CA::Mat4Impl *this, const double *a2)
{
  return *((double *)this + 2) == 0.0
      && *((double *)this + 3) == 0.0
      && *((double *)this + 6) == 0.0
      && *((double *)this + 7) == 0.0
      && *((double *)this + 8) == 0.0
      && *((double *)this + 9) == 0.0
      && *((double *)this + 11) == 0.0
      && *((double *)this + 15) == 1.0;
}

uint64_t CA::Render::copy_elements(uint64_t this, _QWORD *a2, const CGPathElement *a3)
{
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  _OWORD *v8;
  __int128 v9;

  v3 = CA::Render::cgpath_types[*(int *)a2];
  v4 = *(char **)(this + 24);
  *(_QWORD *)(this + 24) = v4 + 1;
  *v4 = v3;
  v5 = *(int *)a2;
  if ((_DWORD)v5 != 4)
  {
    LODWORD(v6) = cgpath_counts[v5];
    v7 = (__int128 *)a2[1];
    v8 = *(_OWORD **)(this + 32);
    if ((int)v6 <= 1)
      v6 = 1;
    else
      v6 = v6;
    do
    {
      v9 = *v7++;
      *v8++ = v9;
      --v6;
    }
    while (v6);
    *(_QWORD *)(this + 32) = v8;
  }
  return this;
}

float64x2_t CA::Render::KeyValueArray::get_rect_key(float64x2_t *this, CA::Render::KeyValueArray *a2, const CA::Rect *a3, float64x2_t a4, float64x2_t a5)
{
  unsigned int named_object;
  uint64_t v8;
  float64x2_t result;
  float64x2_t v10;

  named_object = CA::Render::KeyValueArray::find_named_object_(a2, a3);
  if ((named_object & 0x80000000) == 0
    && (v8 = *(_QWORD *)(*((_QWORD *)a2 + named_object + 3) + 24)) != 0
    && *(_BYTE *)(v8 + 12) == 56
    && *(_DWORD *)(v8 + 16) >= 4u)
  {
    result = *(float64x2_t *)(v8 + 24);
    v10 = vsubq_f64(*(float64x2_t *)(v8 + 40), result);
    *this = result;
    this[1] = v10;
  }
  else
  {
    result = a5;
    *this = a4;
    this[1] = a5;
  }
  return result;
}

void CA::OGL::GaussianBlurFilter::render(float a1, float a2, uint64_t a3, CA::Render::KeyValueArray **a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v20;
  double v21;
  double v22;
  float v23;
  float v24;
  float float_key;
  float v26;
  CA::OGL::GaussianBlurFilter *v27;
  double *v28;
  CA::Render::KeyValueArray *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  int v34;
  char v35;
  char v36;
  CA::Render::KeyValueArray *v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  int v47;
  Rect v48;
  Rect v49[2];
  __int128 v50;
  double v51;
  double v52;
  float v53[2];
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  if ((CA::OGL::GaussianBlurFilter::render(CA::Render::Filter const*,CA::OGL::Layer const*,CA::OGL::Context &,float,CA::OGL::Surface *,float,BOOL,CA::ColorMatrix const*,CA::Shape const*,float *)const::initialized & 1) == 0)
  {
    CA::OGL::GaussianBlurFilter::render(CA::Render::Filter const*,CA::OGL::Layer const*,CA::OGL::Context &,float,CA::OGL::Surface *,float,BOOL,CA::ColorMatrix const*,CA::Shape const*,float *)const::all_linear = CFPreferencesGetAppBooleanValue(CFSTR("CALinearBlurs"), (CFStringRef)*MEMORY[0x1E0C9B248], 0) != 0;
    CA::OGL::GaussianBlurFilter::render(CA::Render::Filter const*,CA::OGL::Layer const*,CA::OGL::Context &,float,CA::OGL::Surface *,float,BOOL,CA::ColorMatrix const*,CA::Shape const*,float *)const::initialized = 1;
  }
  if (a7)
  {
    v55 = 0u;
    v56 = 0u;
    v54 = 0u;
    DWORD1(v56) = 15;
    v20 = *(_QWORD *)(*(_QWORD *)(a6 + 232) + 24);
    v51 = 0.0;
    v52 = 0.0;
    if ((*(_BYTE *)(v20 + 144) & 0x10) != 0)
    {
      CA::Mat4Impl::mat4_get_scale((CA::Mat4Impl *)v20, &v52, &v51, (double *)a6);
      v21 = v51;
      v22 = v52;
    }
    else
    {
      v21 = *(double *)(v20 + 128);
      v51 = v21;
      v52 = v21;
      v22 = v21;
    }
    v23 = v22;
    v24 = v21;
    float_key = CA::Render::KeyValueArray::get_float_key(a4[5], (const CA::Render::KeyValueArray *)0x12E, 0.0);
    v26 = float_key * a2;
    v53[0] = v26 * v23;
    v53[1] = v26 * v24;
    *(_OWORD *)&v49[0].top = 0u;
    v50 = 0u;
    if (CA::OGL::GaussianBlurFilter::get_bounds(v27, (const CA::Render::Filter *)a4, *(const CA::Render::Layer **)(a5 + 24), v49))
    {
      CA::Rect::apply_transform((int8x16_t *)v49, (const CA::Transform *)v20, v28);
      *(_QWORD *)&v55 = v49;
    }
    v29 = a4[5];
    if (v29 && (v30 = *((unsigned int *)v29 + 4), (_DWORD)v30))
    {
      v31 = 0;
      while (1)
      {
        v32 = *((_QWORD *)v29 + v31 + 3);
        if (*(_DWORD *)(v32 + 16) == 301)
          break;
        if (v30 == ++v31)
          goto LABEL_40;
      }
      if ((v31 & 0x80000000) != 0 || (v41 = *(_QWORD *)(v32 + 24)) == 0 || *(_BYTE *)(v41 + 12) != 49)
      {
LABEL_40:
        v33 = 0;
        goto LABEL_41;
      }
      v42 = (const char *)(v41 + 28);
      if (!strcmp((const char *)(v41 + 28), "low"))
      {
        v33 = 2;
      }
      else
      {
        if (strcmp(v42, "high"))
          goto LABEL_40;
        v33 = 4;
      }
      BYTE8(v56) = v33;
LABEL_41:
      v43 = 0;
      while (1)
      {
        v44 = *((_QWORD *)v29 + v43 + 3);
        if (*(_DWORD *)(v44 + 16) == 294)
          break;
        if (v30 == ++v43)
          goto LABEL_16;
      }
      if ((v43 & 0x80000000) == 0)
      {
        v45 = *(_QWORD *)(v44 + 24);
        if (v45)
        {
          if (*(_BYTE *)(v45 + 12) == 49)
          {
            v46 = (const char *)(v45 + 28);
            if (!strcmp((const char *)(v45 + 28), "medium"))
            {
              v47 = 31;
              v34 = 31;
              goto LABEL_55;
            }
            if (!strcmp(v46, "high"))
            {
              v34 = 63;
              v47 = 47;
LABEL_55:
              DWORD1(v56) = v47;
LABEL_17:
              if ((*(_BYTE *)(*(_QWORD *)(a5 + 16) + 25) & 4) != 0 || (*(_BYTE *)(a5 + 36) & 0x10) != 0)
                DWORD1(v56) = v34;
              v35 = v33 | a8;
              *((_QWORD *)&v55 + 1) = a10;
              *((_QWORD *)&v54 + 1) = a9;
              if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a6 + 184))(a6, 24)
                && (CA::OGL::GaussianBlurFilter::render(CA::Render::Filter const*,CA::OGL::Layer const*,CA::OGL::Context &,float,CA::OGL::Surface *,float,BOOL,CA::ColorMatrix const*,CA::Shape const*,float *)const::all_linear
                 || CA::Render::KeyValueArray::get_int_key(a4[5], (const CA::Render::KeyValueArray *)0x127, 0)))
              {
                v36 = 8 * ((*(_BYTE *)(a7 + 68) & 0x30) == 0);
              }
              else
              {
                v36 = 0;
              }
              v37 = a4[5];
              BYTE8(v56) = v35 | v36 | (16
                                      * (CA::Render::KeyValueArray::get_int_key(v37, (const CA::Render::KeyValueArray *)0x11E, 0) != 0));
              if (CA::Render::KeyValueArray::get_int_key(v37, (const CA::Render::KeyValueArray *)0x124, 0)|| CA::Render::KeyValueArray::get_rect_key((uint64_t)v37, &v48))
              {
                LODWORD(v56) = 1;
              }
              if (CA::Render::KeyValueArray::get_int_key(v37, (const CA::Render::KeyValueArray *)0x129, 0))LODWORD(v56) = 2;
              v38 = *(_QWORD *)(a6 + 16);
              v39 = *(_QWORD *)(v38 + 16) & 0xFFFFFF00FF00FF00;
              if (*(_QWORD *)(v38 + 8) == 0x3C003C003C003C00)
                v40 = 1;
              else
                v40 = 3;
              *(_DWORD *)(v38 + 16) = v40 | v39;
              *(_DWORD *)(v38 + 20) = HIDWORD(v39);
              (*(void (**)(uint64_t, uint64_t, float *, uint64_t, float, float))(*(_QWORD *)a6 + 848))(a6, a7, v53, a11, a1, a2);
              *(_BYTE *)(*(_QWORD *)(a6 + 16) + 16) = 0;
              return;
            }
          }
        }
      }
    }
    else
    {
      v33 = 0;
    }
LABEL_16:
    v34 = 31;
    goto LABEL_17;
  }
}

void CA::OGL::`anonymous namespace'::filter_backdrop(CA::Render::Update **a1, const CA::Bounds *a2, uint64_t a3, uint64_t a4, uint64_t a5, CA::Shape **a6, uint64_t a7, CA::Shape *a8, char a9)
{
  unint64_t v11;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int32x4_t *v18;
  __int32 v19;
  __int32 v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int32x4_t v27;
  int v28;
  int v29;
  int32x2_t v31;
  const CA::Shape *v32;
  const int *v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v36;
  _OWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  _QWORD *v44;
  unint64_t v45;
  _QWORD *v46;
  int *v47;
  int *v48;
  int v49;
  int v50;
  int v51;
  int v52;
  CA::Render::Update *v53;
  uint64_t v54;
  _DWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  int *v58;
  int *v59;
  uint64_t v60;
  int v61;
  int v62;
  _QWORD *v63;
  char v64;
  _BOOL4 can_filter_in_place;
  _BOOL4 v66;
  uint64_t v67;
  int v68;
  BOOL v69;
  _BOOL4 v70;
  int *v71;
  int *v72;
  uint64_t v73;
  int v74;
  float *v75;
  float32x2_t v76;
  CA::Shape *v77;
  uint64_t v78;
  uint64_t v79;
  CA::Shape *v80;
  uint32x2_t v81;
  unsigned __int32 v82;
  uint32x2_t v83;
  unsigned __int32 v84;
  CA::Shape *v85;
  char v86;
  __int16 v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  NSObject *v91;
  int v92;
  int32x2_t v93;
  __int128 v95;
  uint64_t v96;
  uint64_t v99;
  unsigned int v100;
  int v101;
  int *v102;
  CA::Shape *v103;
  CA::Shape *v104;
  uint64_t v105;
  int v106;
  CA::Render::Update *v107;
  int v108;
  int *v109;
  float v110;
  uint64_t v111;
  int v112;
  CA::Shape *v113;
  CA::Shape *v114[2];
  uint8_t buf[8];
  int32x2_t v116[3];
  _OWORD v117[3];
  int8x16_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  __int16 v126;
  __int16 v127;
  uint64_t v128;

  v128 = *MEMORY[0x1E0C80C00];
  v107 = *a1;
  *(_DWORD *)(a4 + 28) = *(_DWORD *)(a4 + 24);
  if (!a3)
    goto LABEL_40;
  v11 = *(unsigned int *)(a3 + 16);
  if (!(_DWORD)v11)
    goto LABEL_40;
  v15 = a3 + 24;
  if ((*(_BYTE *)(*(_QWORD *)(a3 + 24) + 13) & 1) == 0)
  {
    v16 = 0;
    do
    {
      if (v11 - 1 == v16)
        goto LABEL_40;
      v17 = *(_QWORD *)(a3 + 32 + 8 * v16++);
    }
    while ((*(_BYTE *)(v17 + 13) & 1) == 0);
    if (v16 >= v11)
      goto LABEL_40;
  }
  v18 = *(int32x4_t **)(a4 + 32);
  if (v18)
  {
    v19 = v18[2].i32[0];
    v20 = v18[2].i32[1];
    v22 = v18[2].i32[2];
    v21 = v18[2].i32[3];
    v114[0] = (CA::Shape *)__PAIR64__(v20, v19);
    v114[1] = (CA::Shape *)__PAIR64__(v21, v22);
    v113 = 0;
    if (a9)
    {
      if (v22 <= v21)
        v23 = v21;
      else
        v23 = v22;
      if (v22 >= v21)
        v24 = v21;
      else
        v24 = v22;
      if (v23 <= 1073741822 && v24 >= 1)
      {
        LODWORD(v114[0]) = v19 + 1;
        HIDWORD(v114[0]) = v20 + 1;
        LODWORD(v114[1]) = v22 - 2;
        HIDWORD(v114[1]) = v21 - 2;
        if (v22 - 2 < 1 || v21 - 2 <= 0)
          v114[1] = 0;
      }
      v27 = v18[2];
      v118 = (int8x16_t)v27;
      if ((*(_BYTE *)(a4 + 216) & 1) != 0)
      {
        v28 = v27.i32[2];
        if (v27.i32[2] <= v27.i32[3])
          v29 = v27.i32[3];
        else
          v29 = v27.i32[2];
        if (v27.i32[2] >= v27.i32[3])
          v28 = v27.i32[3];
        if (v29 <= 1073741822 && v28 >= 1)
        {
          v118 = (int8x16_t)vaddq_s32(v27, (int32x4_t)xmmword_18474E7E0);
          v31 = vcgt_s32((int32x2_t)0x100000001, vrev64_s32((int32x2_t)*(_OWORD *)&vextq_s8(v118, v118, 8uLL)));
          if (((v31.i32[1] | v31.i32[0]) & 1) != 0)
            v118.i64[1] = 0;
        }
      }
      v113 = (CA::Shape *)CA::Shape::new_shape((CA::Shape *)&v118, a2);
      if (a6)
        CA::shape_subtract(&v113, a6, v32, v33);
      else
        CA::shape_subtract(&v113, v114, v32);
    }
    v36 = *(_QWORD *)(a4 + 40);
    v108 = v19;
    v103 = a8;
    if (v36 && v36 == *(_QWORD *)(a4 + 32))
    {
      CA::OGL::Context::release_surface((uint64_t)v107, v36);
      a6 = 0;
      a5 = 0;
      *(_QWORD *)(a4 + 40) = 0;
    }
    v121 = 0x3C003C003C003C00;
    v122 = 0;
    v123 = 0;
    v124 = 0;
    v127 = 0;
    v118 = 0uLL;
    v119 = 0;
    v125 = 1065353216;
    v126 = 1025;
    memset(v117, 0, sizeof(v117));
    CA::Shape::operator=((uint64_t)v117, v114);
    v37 = (_OWORD *)a5;
    if (!a5)
      v37 = v117;
    v118.i64[1] = (uint64_t)v37;
    v38 = *(unsigned int *)(a3 + 16);
    if ((_DWORD)v38)
    {
      v39 = 8 * v38;
      v40 = v39;
      v41 = a3 + 24;
      while (*(_DWORD *)(*(_QWORD *)v41 + 24) != 48)
      {
        v41 += 8;
        v40 -= 8;
        if (!v40)
        {
          v42 = 15;
          goto LABEL_64;
        }
      }
      if (*(_DWORD *)(*(_QWORD *)v15 + 24) == 48)
        v42 = 15;
      else
        v42 = 262223;
      v118.i64[1] = (uint64_t)&CA::Shape::_infinite_shape;
LABEL_64:
      if (a6)
      {
        while (1)
        {
          v43 = *(_DWORD *)(*(_QWORD *)v15 + 24);
          if ((v43 == 577 || v43 == 242) && (*(_DWORD *)(*(_QWORD *)v15 + 12) & 0x40100) == 0x100)
            break;
          v15 += 8;
          v39 -= 8;
          if (!v39)
          {
            v106 = 1;
            goto LABEL_72;
          }
        }
        v106 = 0;
        v118.i64[1] = (uint64_t)a6;
      }
      else
      {
        v106 = 1;
        a6 = (CA::Shape **)v117;
      }
    }
    else
    {
      if (!a6)
        a6 = (CA::Shape **)v117;
      v106 = 1;
      v42 = 15;
    }
LABEL_72:
    v120 = a4 + 64;
    v112 = 0;
    v44 = CA::OGL::prepare_filters(a1, a2, (unsigned int *)a3, 1, &v112, 1);
    if (v44)
    {
      v105 = a4;
      v45 = 0;
      v93 = (int32x2_t)v44;
      v46 = v44;
      do
      {
        v45 += !CA::OGL::can_filter_in_place(v46);
        v46 = (_QWORD *)*v46;
      }
      while (v46);
      v101 = v22;
      v48 = *(int **)(a4 + 32);
      v47 = *(int **)(v105 + 40);
      v49 = v48[17] & 0x30 | v42;
      v100 = v49;
      v50 = v21;
      if (v45)
      {
        if (v47)
        {
          v51 = v108;
          v47[8] = v108;
          v47[9] = v20;
          v48 = v47;
          v52 = v101;
          v47[10] = v101;
          v47[11] = v50;
          v53 = v107;
        }
        else
        {
          v53 = v107;
          v48 = (int *)(*(uint64_t (**)(CA::Render::Update *, uint64_t, CA::Shape *, _QWORD))(*(_QWORD *)v107 + 656))(v107, 1, v103, v49 | 0x400u);
          v51 = v108;
          v52 = v101;
          if (!v48)
          {
            v104 = 0;
            *(_QWORD *)(v105 + 40) = 0;
            v56 = (_QWORD *)v93;
            goto LABEL_154;
          }
        }
      }
      else
      {
        ++*v48;
        v53 = v107;
        if (v47)
          CA::OGL::Context::release_surface((uint64_t)v107, (uint64_t)v47);
        v51 = v108;
        v52 = v101;
      }
      (*(void (**)(CA::Render::Update *, int *, uint64_t, uint64_t))(*(_QWORD *)v53 + 704))(v53, v48, 16, 16);
      v48[8] = v51;
      v48[9] = v20;
      v48[10] = v52;
      v48[11] = v50;
      if (v45 < 2)
      {
        v58 = 0;
      }
      else
      {
        v57 = (*(uint64_t (**)(CA::Render::Update *, uint64_t, CA::Shape *, _QWORD))(*(_QWORD *)v53 + 656))(v53, 1, v103, v100);
        if (!v57)
        {
          v104 = 0;
          *(_QWORD *)(v105 + 40) = 0;
          v89 = (uint64_t)v53;
          v56 = (_QWORD *)v93;
          goto LABEL_153;
        }
        v58 = (int *)v57;
        (*(void (**)(CA::Render::Update *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v53 + 704))(v53, v57, 16, 16);
        v58[8] = v108;
        v58[9] = v20;
        v58[10] = v101;
        v58[11] = v50;
      }
      v96 = (uint64_t)a6;
      v59 = v48;
      if ((v45 & 1) != 0)
        v48 = v58;
      else
        v59 = v58;
      v109 = v59;
      if (byte_1ECDC6A6A)
      {
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v91 = x_log_category_ogl;
          if (os_log_type_enabled((os_log_t)x_log_category_ogl, OS_LOG_TYPE_DEFAULT))
          {
            v92 = *(_DWORD *)(a3 + 16);
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)&buf[4] = v92;
            v116[0].i16[0] = 2048;
            *(int32x2_t *)((char *)v116 + 2) = v93;
            _os_log_impl(&dword_184457000, v91, OS_LOG_TYPE_DEFAULT, "  applying %d merged group filters (lst %p)\n", buf, 0x12u);
          }
        }
      }
      v60 = 0;
      v61 = 0;
      v99 = 0;
      v104 = 0;
      v62 = 1;
      v63 = (_QWORD *)v93;
      while (1)
      {
        v64 = *(_BYTE *)(v105 + 216);
        can_filter_in_place = CA::OGL::can_filter_in_place(v63);
        v66 = can_filter_in_place;
        v67 = v63[2];
        if (v67)
        {
          v68 = *(_DWORD *)(v67 + 24);
          v69 = v68 == 242 || v68 == 577;
          v70 = v69;
          v106 |= v70;
          if (a5)
          {
            if (v70)
            {
              v118.i64[1] = a5;
              v106 = 1;
            }
          }
        }
        v71 = v48;
        if (!v60)
          v71 = *(int **)(v105 + 32);
        if (can_filter_in_place)
          v72 = v48;
        else
          v72 = v109;
        v62 &= can_filter_in_place;
        v102 = v72;
        if (v62)
        {
          v73 = *(_QWORD *)(v105 + 32);
          v99 = v118.i64[1];
          v118.i64[1] = a7;
          v71 = (int *)v73;
        }
        else
        {
          if ((((a9 & v106) ^ 1 | can_filter_in_place) & 1) == 0)
            *((_OWORD *)v72 + 2) = *(_OWORD *)v114;
          v73 = (uint64_t)v72;
        }
        v118.i64[0] = CA::OGL::Context::set_gstate((uint64_t)v107, (uint64_t)&v118);
        CA::OGL::Context::push_surface((uint64_t)v107, v73, (*(_WORD *)(v73 + 75) & 0x80) == 0, 64, 0);
        if (v113)
          v74 = v62;
        else
          v74 = 1;
        if (((v74 | v106) & 1) == 0)
        {
          v111 = 0;
          (*(void (**)(CA::Render::Update *))(*(_QWORD *)v107 + 912))(v107);
        }
        v110 = 1.0;
        if (v104)
          v75 = 0;
        else
          v75 = &v110;
        CA::OGL::emit_filter(a1, (uint64_t)v63, (uint64_t)a2, v71, v64 & 1, v96, (uint64_t)v75, *(float *)(v105 + 28), *(float *)(v105 + 28));
        if (v62)
          v77 = (CA::Shape *)v99;
        else
          v77 = (CA::Shape *)v118.i64[1];
        v76.f32[0] = v110;
        if (v110 == 1.0)
        {
          v78 = (uint64_t)v107;
        }
        else
        {
          v78 = (uint64_t)v107;
          if (!v104)
          {
            v79 = CA::Shape::scale_and_dilate(v77, v76, v110, 1u, 1u);
            *(float *)(v105 + 28) = *(float *)(v105 + 28) * v110;
            *(_OWORD *)v114 = *((_OWORD *)v109 + 2);
            v95 = *(_OWORD *)v114;
            *(_QWORD *)buf = 0;
            v116[0] = 0;
            v104 = (CA::Shape *)v79;
            CA::Shape::get_bounds(v79, (int *)buf);
            v80 = (CA::Shape *)v116[0];
            v81 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *(int32x2_t *)((char *)&v95 + 8));
            v82 = vpmax_u32(v81, v81).u32[0];
            v83 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v116[0]);
            v84 = vpmax_u32(v83, v83).u32[0];
            if ((v82 & 0x80000000) != 0)
            {
              v77 = v104;
              if ((v84 & 0x80000000) != 0)
                goto LABEL_138;
              v85 = *(CA::Shape **)buf;
            }
            else
            {
              v77 = v104;
              if ((v84 & 0x80000000) != 0)
                goto LABEL_138;
              v85 = (CA::Shape *)vmin_s32(*(int32x2_t *)&v95, *(int32x2_t *)buf);
              v80 = (CA::Shape *)vsub_s32(vmax_s32(vadd_s32(*(int32x2_t *)&v95, *(int32x2_t *)((char *)&v95 + 8)), vadd_s32(*(int32x2_t *)buf, v116[0])), (int32x2_t)v85);
            }
            v114[0] = v85;
            v114[1] = v80;
          }
        }
LABEL_138:
        if (byte_1ECDC6A61 && !*v63)
        {
          *(_BYTE *)(*(_QWORD *)(v78 + 16) + 481) |= 1u;
          v88 = *(_QWORD *)(v78 + 16);
          *(_BYTE *)(v88 + 480) = 3;
          *(_QWORD *)(v88 + 8) = 0x3804000038043804;
          *(_QWORD *)buf = 0;
          v116[0] = 0;
          CA::OGL::emit_combine(v78, 0, 0, 0, v77, (unsigned int *)buf);
          *(_BYTE *)(*(_QWORD *)(v78 + 16) + 481) &= ~1u;
        }
        CA::OGL::Context::pop_surface((CA::OGL::Context *)v78);
        CA::OGL::Context::set_gstate(v78, **(_QWORD **)(v78 + 232));
        v118.i64[1] = (uint64_t)v77;
        if (v66)
          v48 = v109;
        v86 = CA::OGL::filter_flags((uint64_t)v63, (uint64_t)a2);
        v109 = v48;
        if ((v86 & 0x10) != 0)
          v87 = ~(*(_WORD *)(v78 + 816) << 10) & 0x800;
        else
          v87 = 0;
        v60 += !v66;
        v61 |= (v86 & 8) >> 3;
        *(_WORD *)(v73 + 75) = *(_WORD *)(v73 + 75) & 0xF7FF | v87;
        v63 = (_QWORD *)*v63;
        v48 = v102;
        if (!v63)
        {
          v89 = (uint64_t)v107;
          if ((v61 & 1) != 0)
            *(_WORD *)((char *)v102 + 75) |= 0x200u;
          *(_QWORD *)(v105 + 40) = v102;
          v56 = (_QWORD *)v93;
          v48 = v109;
          if (!v109)
          {
            do
            {
LABEL_154:
              v90 = (_QWORD *)*v56;
              CA::OGL::finalize_filter(v56);
              v56 = v90;
            }
            while (v90);
            goto LABEL_155;
          }
LABEL_153:
          CA::OGL::Context::release_surface(v89, (uint64_t)v48);
          goto LABEL_154;
        }
      }
    }
    v54 = *(_QWORD *)(a4 + 40);
    if (v54)
    {
      CA::OGL::Context::release_surface((uint64_t)v107, v54);
      *(_QWORD *)(a4 + 40) = 0;
    }
    v55 = *(_DWORD **)(a4 + 32);
    v104 = 0;
    if (v55)
    {
      ++*v55;
      *(_QWORD *)(a4 + 40) = v55;
    }
LABEL_155:
    if (v113)
      CA::Shape::unref(v113);
    if (v104)
      CA::Shape::unref(v104);
  }
  else
  {
LABEL_40:
    v35 = *(_DWORD **)(a4 + 32);
    v34 = *(_QWORD *)(a4 + 40);
    if ((_DWORD *)v34 != v35)
    {
      if (v34)
      {
        CA::OGL::Context::release_surface((uint64_t)v107, v34);
        v35 = *(_DWORD **)(a4 + 32);
      }
      if (v35)
      {
        ++*v35;
        *(_QWORD *)(a4 + 40) = v35;
      }
      else
      {
        *(_QWORD *)(a4 + 40) = 0;
      }
    }
  }
}

_QWORD *CA::OGL::prepare_filters(CA::Render::Update **a1, const CA::Render::LayerNode *a2, unsigned int *a3, char a4, int *a5, char a6)
{
  const CA::Render::LayerNode *v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  float v20;
  int v21;
  float v22;
  int v23;
  float32x2_t v24;
  float32x2_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  const CA::Render::LayerNode *v32;
  CA::Render::Update **v33;
  int v34;
  int v35;
  int v36;
  _QWORD *v37;
  int v38;
  float v39;
  float v40;
  float v41;
  float v42;
  __int32 v44;
  unsigned __int32 v45;
  float32x2_t v46;
  float32x2_t v47;
  float v48;
  float v49;
  float v50;
  float v51;
  CA::Render::KeyValueArray *v52;
  float float_key;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int int_key;
  int v58;
  float32x4_t v59;
  float16x4_t v62;
  CA::Render::KeyValueArray *v64;
  float v65;
  float v66;
  float v67;
  float v69;
  float v70;
  unsigned int v71;
  float32x2_t v72;
  uint64_t v73;
  float32x2_t v74;
  uint64_t v75;
  int v76;
  float32x4_t v77;
  int32x4_t v78;
  float32x2_t v79;
  float32x2_t v80;
  int v81;
  uint64_t v82;
  float v83;
  int v84;
  float v85;
  float v86;
  const CA::Render::Filter *v87;
  float v88;
  float v89;
  float v90;
  float v91;
  const CA::Render::LayerNode *v92;
  float32x2_t v93;
  float32x2_t v94;
  int v95;
  uint64_t v96;
  float v97;
  int v98;
  float v99;
  float v100;
  const CA::Render::Filter *v101;
  float v102;
  float v103;
  float v104;
  _WORD *v105;
  int float_color_key;
  int8x8_t v114;
  unsigned int v115;
  float16x4_t v116;
  CA::Render::Update *v118;
  uint64_t v119;
  uint64_t v120;
  int *v121;
  int v122;
  CA::Render::KeyValueArray *v123;
  float v124;
  float v125;
  float32x2_t v129;
  float v130;
  __float2 v131;
  float v132;
  unsigned int v133;
  float v134;
  float32x2_t v135;
  float32x2_t v136;
  float32_t v137;
  float32x2_t v138;
  float32x2_t v139;
  float32x2_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  _QWORD *result;
  float v146;
  float32x2_t v147;
  float32x2_t v148;
  int v149;
  float v150;
  __int128 v151;
  float32x2_t v152;
  uint64_t v153;
  uint64_t v154;
  __int32 v155;
  float32x2_t v156;
  int8x16_t v157;
  float32x2_t v158;
  float32x4_t v161[5];
  float32x4_t v162;
  float32x2_t v163;
  int v164;
  float v165;
  int v166;
  float v167;
  float32x2_t v168;
  float v169;
  int v170;
  float v171;
  uint64_t v172;
  int v173;
  float v174;
  int v175;
  float32x4_t v176;
  uint64_t v177;

  v7 = a2;
  v9 = 0;
  v177 = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)(*((_QWORD *)a2 + 2) + 256);
  if (v10 && (a6 & 1) == 0)
  {
    v11 = *(_QWORD *)(v10 + 40);
    if (v11 && (v12 = *(_QWORD *)(v11 + 560)) != 0)
      v9 = *(unsigned int *)(v12 + 16);
    else
      v9 = 0;
  }
  v13 = a3[4];
  if (v9 >= v13)
    return 0;
  v14 = 0;
  v15 = 1065353216;
  __asm { FMOV            V0.4S, #1.0 }
  v157 = _Q0;
  _Q0.i32[0] = 1046066128;
  v20 = 0.7873;
  *(float *)&v21 = -0.2126;
  v22 = 0.0722;
  *(float *)&v23 = 0.9278;
  v24 = (float32x2_t)0x3E91D14E3E59B3D0;
  v25 = (float32x2_t)vdup_n_s32(0x3F371759u);
  v26 = 0x3E0F5C293E126E98;
  v156 = (float32x2_t)vdup_n_s32(0x3D93DD98u);
  v158 = *(float32x2_t *)_Q0.i8;
  v155 = vdup_lane_s32(*(int32x2_t *)&_Q0, 0).i32[1];
  do
  {
    v27 = *(_QWORD *)&a3[2 * v9 + 6];
    v28 = *(_DWORD *)(v27 + 12);
    if ((v28 & 0x40100) == 0x100
      && ((v28 & 0x20000) == 0 || *(_QWORD *)(*((_QWORD *)v7 + 2) + 88) || (*((_DWORD *)a1[1] + 266) & 0x4000) == 0))
    {
      if ((v28 & 0x200) != 0 && !*(_DWORD *)(v27 + 16))
      {
        do
        {
          v29 = __ldaxr(CA::Render::next_cache_id(void)::cache_id);
          v30 = v29 + 1;
        }
        while (__stlxr(v30, CA::Render::next_cache_id(void)::cache_id));
        *(_DWORD *)(v27 + 16) = v30;
        *(_DWORD *)(v27 + 20) = 0;
      }
      memset(v161, 0, sizeof(v161));
      v31 = *(_QWORD *)(v27 + 48);
      if (v31)
      {
        if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v31 + 72))(*(_QWORD *)(v27 + 48)))
        {
          v32 = v7;
          v33 = a1;
          v34 = *a5;
          v35 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v31 + 128))(v31, v27);
          if (v34 <= v35)
            v36 = v35;
          else
            v36 = v34;
          a1 = v33;
          v7 = v32;
          *a5 = v36;
          goto LABEL_23;
        }
LABEL_25:
        v13 = a3[4];
        goto LABEL_26;
      }
      v38 = *(_DWORD *)(v27 + 24);
      if (v38 <= 190)
      {
        if (v38 <= 90)
        {
          if (v38 != 23
            && (v38 != 57
             || fabs(CA::Render::KeyValueArray::get_float_key(*(CA::Render::KeyValueArray **)(v27 + 40), (const CA::Render::KeyValueArray *)0x10E, 1.0)+ -0.5) <= 0.001))
          {
            goto LABEL_25;
          }
          goto LABEL_23;
        }
        switch(v38)
        {
          case '[':
          case 'k':
            v162 = 0uLL;
            if ((CA::Render::KeyValueArray::get_float_color_key(*(CA::Render::KeyValueArray **)(v27 + 40), (const CA::Render::KeyValueArray *)0x118, &v162) & 1) != 0)
            {
              v39 = v162.f32[1];
              v40 = v162.f32[0];
              v41 = v162.f32[2];
              if (v162.f32[0] == 0.0 && v162.f32[1] == 0.0 && v162.f32[2] == 0.0)
                goto LABEL_25;
            }
            else
            {
              v162 = (float32x4_t)v157;
              v41 = 1.0;
              v39 = 1.0;
              v40 = 1.0;
            }
            v161[3].i32[0] = 1065353216;
            v161[0].i32[0] = 1065353216;
            v161[4].i64[1] = v15;
            *(uint64_t *)((char *)v161[1].i64 + 4) = 0x3F80000000000000;
            *(float32x4_t *)((char *)v161 + 4) = 0uLL;
            memset((char *)&v161[1].u64[1] + 4, 0, 20);
            memset(&v161[3].i32[1], 0, 20);
            if (*(_DWORD *)(v27 + 24) == 107)
              v76 = -1;
            else
              v76 = 1;
            v161[1].f32[0] = v40 * (float)v76;
            v161[2].f32[1] = v39 * (float)v76;
            v161[3].f32[2] = v41 * (float)v76;
            goto LABEL_118;
          case '\\':
          case '^':
          case 'd':
          case 'g':
          case 'h':
          case 'j':
          case 'l':
          case 'm':
          case 'n':
          case 'o':
            goto LABEL_25;
          case ']':
            *(float *)&v44 = CA::Render::KeyValueArray::get_float_key(*(CA::Render::KeyValueArray **)(v27 + 40), (const CA::Render::KeyValueArray *)0x10E, 1.0);
            if (*(float *)&v44 == 0.0)
              goto LABEL_25;
            v161[3].i64[0] = 1065353216;
            v161[0].i32[0] = 1065353216;
            v161[4].i64[1] = v15;
            *(uint64_t *)((char *)v161[1].i64 + 4) = 0x3F80000000000000;
            *(uint64_t *)((char *)v161[0].i64 + 4) = 0;
            v161[0].i32[3] = 0;
            *(uint64_t *)((char *)&v161[1].i64[1] + 4) = 0;
            v161[2].i64[1] = 0;
            *(uint64_t *)((char *)&v161[3].i64[1] + 4) = 0;
            v161[4].i32[1] = 0;
            v161[3].i32[2] = v44;
            v161[2].i32[1] = v44;
            v161[1].i32[0] = v44;
            goto LABEL_118;
          case '_':
            *(float *)&v45 = CA::Render::KeyValueArray::get_float_key(*(CA::Render::KeyValueArray **)(v27 + 40), (const CA::Render::KeyValueArray *)0x10E, 1.0);
            if (*(float *)&v45 == 1.0)
              goto LABEL_25;
            v161[4].i64[1] = v15;
            v161[1].i32[1] = 0;
            *(uint64_t *)((char *)v161[0].i64 + 4) = 0;
            v161[0].i32[3] = 0;
            *(uint64_t *)((char *)&v161[1].i64[1] + 4) = 0;
            v161[2].i64[1] = 0;
            *(uint64_t *)((char *)&v161[3].i64[1] + 4) = 0;
            v161[4].i32[1] = 0;
            v161[3].i64[0] = v45;
            v161[3].f32[2] = 0.5 - (float)(*(float *)&v45 * 0.5);
            v161[1].i32[2] = v45;
            v161[2].f32[1] = v161[3].f32[2];
            v161[0].i32[0] = v45;
            v161[1].f32[0] = v161[3].f32[2];
            goto LABEL_118;
          case 'a':
            v152 = (float32x2_t)v26;
            v46 = v25;
            v47 = v24;
            v48 = *(float *)&v23;
            v49 = v22;
            v50 = *(float *)&v21;
            v51 = v20;
            v52 = *(CA::Render::KeyValueArray **)(v27 + 40);
            float_key = CA::Render::KeyValueArray::get_float_key(v52, (const CA::Render::KeyValueArray *)0x10F, 0.0);
            if (float_key == 0.0)
              goto LABEL_74;
            if (!CA::Render::KeyValueArray::get_int_key(v52, (const CA::Render::KeyValueArray *)0x125, 0))
            {
              v161[4].i64[1] = v15;
              *(uint64_t *)((char *)&v161[0].i64[1] + 4) = 0;
              v161[2].i64[0] = 0;
              memset(&v161[3].i32[1], 0, 20);
              v131 = __sincosf_stret(float_key);
              v20 = v51;
              v132 = v158.f32[0] + (float)(v131.__cosval * v51);
              *(float *)&v21 = v50;
              *(float *)&v133 = v132 + (float)(v131.__sinval * v50);
              v22 = v49;
              v134 = v49 - (float)(v131.__cosval * v49);
              *(float *)&v23 = v48;
              v161[0].f32[2] = v134 + (float)(v131.__sinval * v48);
              v24 = v47;
              v135 = vmul_n_f32(v47, v131.__cosval);
              v136.f32[0] = vsub_f32(v158, v135).f32[0];
              v25 = v46;
              v137 = v136.f32[0] - (float)(v131.__sinval * v20);
              v136.i32[1] = vadd_f32(v135, v46).i32[1];
              v26 = (uint64_t)v152;
              *(float32x2_t *)&v161[1].i32[1] = vmla_n_f32(v136, v152, v131.__sinval);
              v138 = vmul_n_f32((float32x2_t)0x3F6D844D3F371759, v131.__cosval);
              v139 = vsub_f32((float32x2_t)0x3F6D844D3F371759, v138);
              v140 = vmul_n_f32((float32x2_t)0x3D93DD983F371759, v131.__sinval);
              v136.i32[0] = vsub_f32(v139, v140).u32[0];
              v139.i32[1] = vadd_f32(v138, v156).i32[1];
              v161[1].f32[3] = v134 + (float)(v131.__sinval * -0.283);
              v161[2].f32[2] = v137;
              v161[0].i64[0] = __PAIR64__(v136.u32[0], v133);
              *(float32x2_t *)((char *)&v161[2].u64[1] + 4) = vadd_f32(v139, v140);
              goto LABEL_118;
            }
            v14 = CA::OGL::add_primitive_filter((uint64_t)v14, v27);
LABEL_74:
            v20 = v51;
            *(float *)&v21 = v50;
            v22 = v49;
            *(float *)&v23 = v48;
            v24 = v47;
            v25 = v46;
LABEL_127:
            v26 = (uint64_t)v152;
            goto LABEL_25;
          case 'b':
            goto LABEL_117;
          case 'c':
            v54 = *((_QWORD *)*a1 + 22);
            if (v54
              && (v55 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v54 + 16))(v54)) != 0
              && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v55 + 864))(v55))
            {
              if ((*((_WORD *)*a1 + 408) & 2) != 0)
              {
                if (*((int *)a1[1] + 266) >= 0)
                  v56 = ((*((unsigned int *)a1[1] + 266) | ((unint64_t)*((unsigned __int16 *)a1[1] + 534) << 32)) >> 33) & 1;
                else
                  v56 = 1;
              }
              else
              {
                v56 = 1;
              }
            }
            else
            {
              v56 = 0;
            }
            if (CA::Render::KeyValueArray::get_int_key(*(CA::Render::KeyValueArray **)(v27 + 40), (const CA::Render::KeyValueArray *)0x131, 0) != v56)goto LABEL_25;
LABEL_117:
            v161[4].i64[1] = v15;
            *(uint64_t *)((char *)v161[0].i64 + 4) = 0;
            v161[0].i32[3] = 0;
            *(uint64_t *)((char *)&v161[1].i64[1] + 4) = 0;
            v161[2].i64[1] = 0;
            *(uint64_t *)((char *)&v161[3].i64[1] + 4) = 0;
            v161[4].i32[1] = 0;
            v161[3].i64[0] = 3212836864;
            v161[3].i32[2] = 1065353216;
            v161[1].i32[2] = -1082130432;
            v161[2].i32[1] = 1065353216;
            v161[0].i32[0] = -1082130432;
            v161[1].i64[0] = 1065353216;
            goto LABEL_118;
          case 'e':
            CA::OGL::get_filter_color_matrix(*(CA::OGL **)(v27 + 40), (const CA::Render::Filter *)v161, (CA::ColorMatrix *)a3);
            int_key = CA::Render::KeyValueArray::get_int_key(*(CA::Render::KeyValueArray **)(v27 + 40), (const CA::Render::KeyValueArray *)0x12C, 0);
            v58 = int_key;
            if (!v14 && !int_key && (a4 & 1) == 0 && CA::ColorMatrix::is_diagonal((CA::ColorMatrix *)v161))
            {
              _S1 = v161[4].i32[2];
              _S2 = v161[3].f32[0] * v161[4].f32[2];
              *(float32x2_t *)v59.f32 = vmul_n_f32((float32x2_t)__PAIR64__(v161[1].u32[2], v161[0].u32[0]), v161[4].f32[2]);
              v62.i32[0] = vcvt_f16_f32(v59).u32[0];
              __asm { FCVT            H2, S2 }
              v62.i16[2] = LOWORD(_S2);
              __asm { FCVT            H1, S1 }
              v62.i16[3] = _S1;
              *(float16x4_t *)(*((_QWORD *)v7 + 13) + 88) = vcvt_f16_f32(vmulq_f32(vcvtq_f32_f16(v62), vcvtq_f32_f16(*(float16x4_t *)(*((_QWORD *)v7 + 13)+ 88))));
              __asm { FCVT            S0, H1 }
              goto LABEL_113;
            }
            _ZF = v58 == 0;
            break;
          case 'f':
            v64 = *(CA::Render::KeyValueArray **)(v27 + 40);
            if (CA::Render::KeyValueArray::get_float_key(v64, (const CA::Render::KeyValueArray *)0x10E, 1.0) == 0.0)
              goto LABEL_25;
            v152 = (float32x2_t)v26;
            v147 = v25;
            v148 = v24;
            v149 = v21;
            v65 = v20;
            v176 = 0uLL;
            if (CA::Render::KeyValueArray::get_float_color_key(v64, (const CA::Render::KeyValueArray *)0x118, &v176))
            {
              v66 = v176.f32[3];
              v67 = v176.f32[2];
              _D13 = *(float32x2_t *)v176.f32;
              if (v176.f32[3] > 0.0)
              {
                _D13 = vmul_n_f32(*(float32x2_t *)v176.f32, 1.0 / v176.f32[3]);
                *(float32x2_t *)v176.f32 = _D13;
                v67 = v176.f32[2] * (float)(1.0 / v176.f32[3]);
                v176.f32[2] = v67;
              }
            }
            else
            {
              v176 = (float32x4_t)v157;
              v66 = 1.0;
              __asm { FMOV            V13.2S, #1.0 }
              v67 = 1.0;
            }
            v123 = *(CA::Render::KeyValueArray **)(v27 + 40);
            v124 = CA::Render::KeyValueArray::get_float_key(v123, (const CA::Render::KeyValueArray *)0x114, 0.0);
            v146 = v124;
            v125 = CA::Render::KeyValueArray::get_float_key(v123, (const CA::Render::KeyValueArray *)0x10E, 1.0);
            _D2 = vmul_n_f32(_D13, v125);
            v162.i32[0] = vmlas_n_f32(1.0 - v125, v158.f32[0], _D2.f32[0]);
            *(float32x2_t *)&v162.i32[1] = vmul_n_f32((float32x2_t)0x3D93DD983F371759, _D2.f32[0]);
            v162.i32[3] = 0;
            v163 = vmul_f32(_D2, (float32x2_t)__PAIR64__(v155, LODWORD(v146)));
            _S1 = 1060575065;
            __asm { FMLA            S3, S1, V2.S[1] }
            v164 = _S3;
            v165 = vmuls_lane_f32(v22, _D2, 1);
            v166 = 0;
            v167 = vmuls_lane_f32(v146, _D2, 1);
            v168 = vmul_n_f32((float32x2_t)0x3F3717593E59B3D0, v67 * v125);
            v169 = (float)(1.0 - v125) + (float)((float)(v67 * v125) * v22);
            v170 = 0;
            v171 = (float)(v67 * v125) * v146;
            v172 = 0;
            v173 = 0;
            v174 = (float)(1.0 - v125) + (float)(v66 * v125);
            v175 = 0;
            v14 = CA::OGL::add_color_matrix((uint64_t)v14, v27, (int)*a1, &v162, a5, 1);
            v20 = v65;
            v21 = v149;
            v25 = v147;
            v24 = v148;
            goto LABEL_127;
          case 'i':
            v69 = CA::Render::KeyValueArray::get_float_key(*(CA::Render::KeyValueArray **)(v27 + 40), (const CA::Render::KeyValueArray *)0x10E, 1.0);
            if (v69 == 1.0)
              goto LABEL_25;
            v70 = fmaxf(v69, 0.0);
            v161[4].i64[1] = v15;
            *(uint64_t *)((char *)&v161[0].i64[1] + 4) = 0;
            v161[2].i64[0] = 0;
            memset(&v161[3].i32[1], 0, 20);
            *(float *)&v71 = v158.f32[0] + (float)(v70 * v20);
            v161[0].f32[2] = v22 - (float)(v70 * v22);
            v72 = vmul_n_f32(v24, v70);
            LODWORD(v73) = vsub_f32(v158, v72).u32[0];
            v161[2].i32[2] = v73;
            HIDWORD(v73) = vadd_f32(v72, v25).i32[1];
            *(uint64_t *)((char *)v161[1].i64 + 4) = v73;
            v161[1].f32[3] = v161[0].f32[2];
            v74 = vmul_n_f32((float32x2_t)0x3F6D844D3F371759, v70);
            LODWORD(v75) = vsub_f32((float32x2_t)0x3F6D844D3F371759, v74).u32[0];
            v161[0].i64[0] = __PAIR64__(v75, v71);
            HIDWORD(v75) = vadd_f32(v74, v156).i32[1];
            *(uint64_t *)((char *)&v161[2].i64[1] + 4) = v75;
            goto LABEL_118;
          case 'p':
            goto LABEL_23;
          default:
            if (v38 == 158 || v38 == 180)
              goto LABEL_23;
            goto LABEL_25;
        }
LABEL_120:
        v122 = _ZF;
        v118 = *a1;
        v119 = (uint64_t)v14;
        v120 = v27;
        v121 = a5;
        goto LABEL_124;
      }
      if (v38 > 386)
      {
        if (v38 > 521)
        {
          if (((v38 - 581) > 5 || ((1 << (v38 - 69)) & 0x25) == 0) && v38 != 522)
            goto LABEL_25;
          goto LABEL_23;
        }
        if (v38 != 387)
        {
          if (v38 != 401 && v38 != 481)
            goto LABEL_25;
          goto LABEL_23;
        }
        v162 = 0uLL;
        float_color_key = CA::Render::KeyValueArray::get_float_color_key(*(CA::Render::KeyValueArray **)(v27 + 40), (const CA::Render::KeyValueArray *)0x118, &v162);
        v114 = (int8x8_t)vcvt_f16_f32(v162);
        if (float_color_key)
          v115 = -1;
        else
          v115 = 0;
        v116 = (float16x4_t)vbsl_s8((int8x8_t)vdup_n_s16(v115), v114, (int8x8_t)0x3C003C003C003C00);
        if (*(_QWORD *)&v116 == 0x3C003C003C003C00)
          goto LABEL_25;
        if ((a4 & 1) == 0 && !v14)
        {
          *(float16x4_t *)(*((_QWORD *)v7 + 13) + 88) = vcvt_f16_f32(vmulq_f32(vcvtq_f32_f16(v116), vcvtq_f32_f16(*(float16x4_t *)(*((_QWORD *)v7 + 13) + 88))));
          _H0 = v116.i16[3];
          __asm { FCVT            S0, H0 }
LABEL_113:
          v14 = 0;
          if (_S0 != 1.0)
          {
            *((_QWORD *)v7 + 4) |= 4uLL;
            *((_WORD *)v7 + 20) |= 1u;
          }
          goto LABEL_25;
        }
        v162 = 0uLL;
        if (!CA::Render::KeyValueArray::get_float_color_key(*(CA::Render::KeyValueArray **)(v27 + 40), (const CA::Render::KeyValueArray *)0x118, &v162))goto LABEL_25;
        if (v162.f32[3] <= 0.0)
        {
          v129 = *(float32x2_t *)v162.f32;
          v130 = v162.f32[2];
        }
        else
        {
          v129 = vmul_n_f32(*(float32x2_t *)v162.f32, 1.0 / v162.f32[3]);
          *(float32x2_t *)v162.f32 = v129;
          v130 = v162.f32[2] * (float)(1.0 / v162.f32[3]);
          v162.f32[2] = v130;
        }
        memset(&v161[0].i32[1], 0, 20);
        memset((char *)&v161[1].u64[1] + 4, 0, 20);
        memset(&v161[3].i32[1], 0, 20);
        v161[1].i32[2] = v129.i32[1];
        v161[0].i32[0] = v129.i32[0];
        v161[3].f32[0] = v130;
        v161[4].i64[1] = __PAIR64__(HIDWORD(v15), v162.u32[3]);
LABEL_118:
        v118 = *a1;
        v119 = (uint64_t)v14;
        v120 = v27;
        v121 = a5;
        v122 = 1;
LABEL_124:
        v37 = CA::OGL::add_color_matrix(v119, v120, (int)v118, v161, v121, v122);
        goto LABEL_24;
      }
      if (v38 > 358)
      {
        if (v38 > 362)
        {
          if (v38 != 363 && v38 != 378)
            goto LABEL_25;
          goto LABEL_23;
        }
        if ((v38 - 359) < 2)
        {
          v42 = CA::Render::KeyValueArray::get_float_key(*(CA::Render::KeyValueArray **)(v27 + 40), (const CA::Render::KeyValueArray *)0x10E, 1.0);
          if (v42 == 0.0)
            goto LABEL_25;
          goto LABEL_23;
        }
        if (v38 != 361)
          goto LABEL_25;
        memset(v161, 0, 60);
        *(float32x4_t *)((char *)&v161[3] + 12) = (float32x4_t)xmmword_18474DF60;
        _ZF = CA::Render::KeyValueArray::get_int_key(*(CA::Render::KeyValueArray **)(v27 + 40), (const CA::Render::KeyValueArray *)0x12C, 0) == 0;
        goto LABEL_120;
      }
      switch(v38)
      {
        case 191:
          if ((a4 & 1) == 0
            && !v14
            && (*((_QWORD *)v7 + 4) & 0x300007FE0) == 0x20
            && *(_QWORD *)(*((_QWORD *)v7 + 13) + 88) == 0x3C003C003C003C00)
          {
            v77 = *(float32x4_t *)(*((_QWORD *)v7 + 3) + 16);
            v78 = (int32x4_t)vextq_s8(v157, (int8x16_t)v77, 0xCuLL);
            if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(v77, (float32x4_t)vextq_s8((int8x16_t)v78, (int8x16_t)vrev64q_s32(v78), 8uLL))))) & 1) == 0&& v77.f32[0] > 0.001)
            {
              v151 = *(_OWORD *)(*((_QWORD *)v7 + 3) + 16);
              CA::Render::Update::render_edr_factor(a1[1], a2);
              v153 = v26;
              v79 = v25;
              v80 = v24;
              v81 = v23;
              v82 = v15;
              v83 = v22;
              v84 = v21;
              v85 = v20;
              v86 = *((float *)*a1 + 38);
              v150 = CA::OGL::edr_gain_filter_gain(*(CA::OGL **)(v27 + 40), v87, v88, v86);
              v89 = powf(*(float *)&v151, v86);
              v90 = 1.0 / v86;
              v20 = v85;
              v21 = v84;
              v22 = v83;
              v15 = v82;
              v23 = v81;
              v24 = v80;
              v25 = v79;
              v26 = v153;
              v14 = 0;
              v91 = powf((float)(v89 * v150) + 1.0, v90) / *(float *)&v151;
LABEL_105:
              v105 = (_WORD *)*((_QWORD *)v7 + 13);
              _H1 = v105[44];
              __asm { FCVT            S1, H1 }
              _S1 = v91 * _S1;
              __asm { FCVT            H1, S1 }
              v105[44] = LOWORD(_S1);
              LOWORD(_S1) = v105[45];
              __asm { FCVT            S1, H1 }
              _S1 = v91 * _S1;
              __asm { FCVT            H1, S1 }
              v105[45] = LOWORD(_S1);
              LOWORD(_S1) = v105[46];
              __asm { FCVT            S1, H1 }
              _S0 = v91 * _S1;
              __asm { FCVT            H0, S0 }
              v105[46] = LOWORD(_S0);
              goto LABEL_25;
            }
          }
          break;
        case 192:
          if (!CA::Render::KeyValueArray::get_int_key(*(CA::Render::KeyValueArray **)(v27 + 40), (const CA::Render::KeyValueArray *)0x10C, 1))
          {
            CA::Render::Update::render_edr_factor(a1[1], v92);
            v154 = v26;
            v93 = v25;
            v94 = v24;
            v95 = v23;
            v96 = v15;
            v97 = v22;
            v98 = v21;
            v99 = v20;
            v100 = *((float *)*a1 + 38);
            v103 = CA::OGL::edr_gain_filter_gain(*(CA::OGL **)(v27 + 40), v101, v102, v100);
            v104 = 1.0 / v100;
            v20 = v99;
            v21 = v98;
            v22 = v97;
            v15 = v96;
            v23 = v95;
            v24 = v94;
            v25 = v93;
            v26 = v154;
            v91 = powf(v103 + 1.0, v104);
            goto LABEL_105;
          }
          break;
        case 256:
          break;
        default:
          goto LABEL_25;
      }
LABEL_23:
      v37 = CA::OGL::add_primitive_filter((uint64_t)v14, v27);
LABEL_24:
      v14 = v37;
      goto LABEL_25;
    }
LABEL_26:
    ++v9;
  }
  while (v9 < v13);
  if (!v14)
    return 0;
  v141 = v14[1];
  if (v141)
  {
    v142 = 0;
    do
    {
      v143 = v141;
      v141 = *(_QWORD *)(v141 + 8);
      *(_QWORD *)(v143 + 8) = v142;
      v142 = v143;
    }
    while (v141);
    v14[1] = v143;
  }
  v144 = 0;
  do
  {
    result = v14;
    v14 = (_QWORD *)*v14;
    *result = v144;
    v144 = result;
  }
  while (v14);
  return result;
}

uint64_t CA::Render::KeyValueArray::get_color_key(CA::Render::KeyValueArray *this, const CA::Render::KeyValueArray *a2, uint64_t a3)
{
  unsigned int named_object;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint32x2_t v15;

  named_object = CA::Render::KeyValueArray::find_named_object_(this, a2);
  if ((named_object & 0x80000000) == 0)
  {
    v6 = *(_QWORD *)(*((_QWORD *)this + named_object + 3) + 24);
    if (v6)
    {
      if (*(_BYTE *)(v6 + 12) == 56 && *(_DWORD *)(v6 + 16) >= 4u)
      {
        v7 = (int)(*(double *)(v6 + 24) * 255.0 + 0.5);
        v8 = v7 & ~(v7 >> 31);
        v9 = (int)(*(double *)(v6 + 48) * 255.0 + 0.5) & ~((int)(*(double *)(v6 + 48) * 255.0 + 0.5) >> 31);
        if (v8 >= 255)
          v8 = 255;
        if (v9 >= 255)
          v9 = 255;
        __asm { FMOV            V2.2D, #0.5 }
        v15 = vshl_u32((uint32x2_t)vmin_s32(vmax_s32(vmovn_s64(vcvtq_s64_f64(vmlaq_f64(_Q2, (float64x2_t)vdupq_n_s64(0x406FE00000000000uLL), *(float64x2_t *)(v6 + 32)))), 0), (int32x2_t)0xFF000000FFLL), (uint32x2_t)0x800000010);
        return v15.i32[0] | (v8 << 24) | v9 | v15.i32[1];
      }
    }
  }
  return a3;
}

uint64_t CA::Render::KeyValueArray::get_int_key(CA::Render::KeyValueArray *this, const CA::Render::KeyValueArray *a2, uint64_t a3)
{
  unsigned int named_object;
  uint64_t v6;

  named_object = CA::Render::KeyValueArray::find_named_object_(this, a2);
  if ((named_object & 0x80000000) == 0)
  {
    v6 = *(_QWORD *)(*((_QWORD *)this + named_object + 3) + 24);
    if (v6)
    {
      if (*(_BYTE *)(v6 + 12) == 56 && *(_DWORD *)(v6 + 16))
        return (int)*(double *)(v6 + 24);
    }
  }
  return a3;
}

double CA::Render::KeyValueArray::get_float_key(CA::Render::KeyValueArray *this, const CA::Render::KeyValueArray *a2, double a3)
{
  unsigned int named_object;
  uint64_t v6;

  named_object = CA::Render::KeyValueArray::find_named_object_(this, a2);
  if ((named_object & 0x80000000) == 0)
  {
    v6 = *(_QWORD *)(*((_QWORD *)this + named_object + 3) + 24);
    if (v6)
    {
      if (*(_BYTE *)(v6 + 12) == 56 && *(_DWORD *)(v6 + 16))
        return *(double *)(v6 + 24);
    }
  }
  return a3;
}

uint64_t CA::Render::KeyValueArray::find_named_object_(CA::Render::KeyValueArray *this, const CA::Render::KeyValueArray *a2)
{
  uint64_t v3;
  uint64_t result;
  char *v5;

  if (!this)
    return 0xFFFFFFFFLL;
  v3 = *((unsigned int *)this + 4);
  if (!(_DWORD)v3)
    return 0xFFFFFFFFLL;
  if ((a2 & 0x40000000) != 0)
  {
    if ((a2 & 0xBFFFFFFF) >= v3)
      return 0xFFFFFFFFLL;
    else
      return a2 & 0xBFFFFFFF;
  }
  else
  {
    result = 0;
    v5 = (char *)this + 24;
    while (*(_DWORD *)(*(_QWORD *)&v5[8 * result] + 16) != (_DWORD)a2)
    {
      if (v3 == ++result)
        return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t CA::OGL::Context::push_surface(uint64_t result, uint64_t a2, unsigned __int8 a3, int a4, char a5)
{
  uint64_t v6;
  __int16 v10;
  __int16 v11;
  uint64_t v12;

  if (!a2)
    __assert_rtn("push_surface", "ogl-context.cpp", 1063, "surf != nullptr");
  v6 = result;
  if (*(_QWORD *)(result + 248) == a2)
    __assert_rtn("push_surface", "ogl-context.cpp", 1064, "_current_surface != surf");
  if ((*(_WORD *)(result + 816) & 0x200) != 0)
  {
    result = *(_QWORD *)(result + 176);
    if (result)
    {
      *(_WORD *)(v6 + 816) &= ~0x200u;
    }
  }
  v10 = *(_WORD *)(a2 + 75);
  if ((((v10 & 0x40) == 0) & a3) != 0)
    v11 = 32;
  else
    v11 = 0;
  *(_WORD *)(a2 + 75) = v11 | v10 & 0xFFDF;
  v12 = *(_QWORD *)(v6 + 808);
  if (v12)
  {
    *(_DWORD *)(v12 + 300) |= a4 & 0x1FFFF;
    *(_QWORD *)(a2 + 16) = v12;
  }
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(v6 + 248);
  *(_QWORD *)(v6 + 248) = a2;
  *(_BYTE *)(a2 + 72) = *(_BYTE *)(a2 + 72) & 0xC1 | (2 * (a5 & 0x1F));
  return result;
}

void CA::OGL::Context::pop_surface(CA::OGL::Context *this)
{
  uint64_t v1;
  BOOL v3;

  v1 = *((_QWORD *)this + 31);
  if (!v1)
    __assert_rtn("pop_surface", "ogl-context.cpp", 1271, "_current_surface != 0");
  if ((*(_WORD *)(v1 + 75) & 0x20) != 0
    && (*((_QWORD *)this + 32) != v1 || *((_DWORD *)this + 61) != ((*(unsigned __int8 *)(v1 + 72) >> 1) & 0x1F)))
  {
    CA::OGL::Context::prepare_destination_(this);
    v1 = *((_QWORD *)this + 31);
  }
  if (*((_DWORD *)this + 111))
    v3 = BYTE1(xmmword_1ECDC6A70) == 0;
  else
    v3 = 0;
  if (v3 && (*(_BYTE *)(v1 + 69) & 8) == 0)
  {
    CA::OGL::export_surface((uint64_t)this, v1, "pop");
    v1 = *((_QWORD *)this + 31);
  }
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 72) &= 0xC1u;
  *((_QWORD *)this + 31) = *(_QWORD *)(*((_QWORD *)this + 31) + 8);
}

BOOL CA::OGL::can_filter_in_place(_QWORD *a1)
{
  _BOOL8 result;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  BOOL v5;

  if (a1[1])
    return 0;
  v2 = a1[6];
  v3 = a1[2];
  if (v2)
    v4 = v3 == 0;
  else
    v4 = 0;
  result = v4;
  if (v2)
    v5 = 1;
  else
    v5 = v3 == 0;
  if (!v5)
    return (*(_DWORD *)(v3 + 12) & 0x40100) != 0x100
        || CAAtomIndexInArray(25, (uint64_t)CA::Render::Filter::is_one_to_one(void)const::atoms, *(_DWORD *)(v3 + 24)) != -1;
  return result;
}

uint64_t CAAtomIndexInArray(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t result;

  v3 = a1 - 1;
  if ((unint64_t)(a1 - 1) < 9)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    v5 = a1 - 1;
    do
    {
      result = v4 + (v5 >> 1);
      if (a3 - *(unsigned __int16 *)(a2 + 2 * result) <= 0)
      {
        v3 = v4 + (v5 >> 1);
        if (((a3 - *(unsigned __int16 *)(a2 + 2 * result)) & 0x80000000) == 0)
          return result;
      }
      else
      {
        v4 += v5 >> 1;
      }
      v5 = v3 - v4;
    }
    while (v3 - v4 > 8);
    if (v3 < v4)
      return -1;
  }
  result = v4;
  while (*(unsigned __int16 *)(a2 + 2 * result) != a3)
  {
    if (++result > v3)
      return -1;
  }
  return result;
}

uint64_t CA::OGL::filter_flags(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  CA::ColorMatrix *v10;
  CA::ColorMatrix *v11;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
    v10 = *(CA::ColorMatrix **)(a1 + 48);
    if (!v10)
      return 0;
    if (CA::ColorMatrix::is_opaque_identity(v10))
      return 70;
    return 6;
  }
  v4 = *(_QWORD *)(v3 + 48);
  if (v4 && (*(unsigned int (**)(_QWORD))(*(_QWORD *)v4 + 72))(*(_QWORD *)(v3 + 48)))
  {
    v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 112))(v4, v3, a2);
    goto LABEL_22;
  }
  v7 = *(_DWORD *)(v3 + 24);
  if (v7 > 179)
  {
    if ((v7 - 359) >= 2 && v7 != 256)
    {
      v6 = v7 == 180;
      goto LABEL_22;
    }
  }
  else if (((v7 - 97) > 0x3D || ((1 << (v7 - 97)) & 0x2000000000008001) == 0)
         && v7 != 23)
  {
    v6 = 0;
    goto LABEL_22;
  }
  v6 = 6;
LABEL_22:
  v11 = *(CA::ColorMatrix **)(a1 + 48);
  if (v11)
  {
    if (CA::ColorMatrix::is_opaque_identity(v11))
      return v6 | 0x40;
    else
      return v6 & 0xFFFFFFEF;
  }
  return v6;
}

void CA::OGL::finalize_filter(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  malloc_zone_t *malloc_zone;
  malloc_zone_t *v6;

  v2 = (_QWORD *)a1[1];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)v2[1];
      free(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)a1[6];
  if (v4)
  {
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(malloc_zone, v4);
  }
  v6 = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(v6, a1);
}

void CA::OGL::emit_filter(CA::Render::Update **a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7, float a8, float a9)
{
  CA::Render::Update *v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  int v22;
  float float_key;
  float v24;
  float v25;
  float v26;
  float v27;

  if (a4)
  {
    v13 = *a1;
    v14 = *((_QWORD *)*a1 + 29);
    v15 = *(_QWORD *)(a2 + 16);
    v16 = a8 / a9;
    if (v15)
    {
      *(_QWORD *)(*((_QWORD *)v13 + 2) + 8) = *(_QWORD *)(v14 + 32);
      v17 = *(_QWORD *)(v15 + 48);
      if (v17)
      {
        if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v17 + 72))(*(_QWORD *)(v15 + 48)))
          (*(void (**)(uint64_t, uint64_t, uint64_t, CA::Render::Update *, int *, uint64_t, _QWORD, uint64_t, float, float, uint64_t))(*(_QWORD *)v17 + 104))(v17, v15, a3, v13, a4, a5, *(_QWORD *)(a2 + 48), a6, a8, a9, a7);
      }
      else
      {
        v22 = *(_DWORD *)(v15 + 24);
        if (v22 <= 358)
        {
          if (v22 <= 157)
          {
            if (v22 > 96)
            {
              if (v22 == 97)
              {
                CA::OGL::render_hue_rotate(v13, *(CA::Render::KeyValueArray **)(v15 + 40), a4, a8 / a9);
              }
              else if (v22 == 112)
              {
                CA::Render::Update::render_edr_factor(a1[1], (const CA::Render::LayerNode *)a2);
                CA::OGL::render_compress_luminance_filter((uint64_t)v13, *(CA::Render::KeyValueArray **)(v15 + 40), a4, v24, v16);
              }
            }
            else if (v22 == 23)
            {
              CA::OGL::render_alpha_threshold_filter(v13, *(CA::Render::KeyValueArray **)(v15 + 40), a4, a8 / a9);
            }
            else if (v22 == 57)
            {
              float_key = CA::Render::KeyValueArray::get_float_key(*(CA::Render::KeyValueArray **)(v15 + 40), (const CA::Render::KeyValueArray *)0x10E, 1.0);
              CA::OGL::emit_bias(v13, a4, float_key, v16);
            }
          }
          else if (v22 <= 190)
          {
            if (v22 == 158)
            {
              CA::OGL::render_curves(v13, *(unsigned int **)(v15 + 40), a4, a8 / a9);
            }
            else if (v22 == 180)
            {
              CA::OGL::render_distance_field_filter(v13, *(unsigned int **)(v15 + 40), a4, a8 / a9);
            }
          }
          else
          {
            switch(v22)
            {
              case 191:
                CA::Render::Update::render_edr_factor(a1[1], (const CA::Render::LayerNode *)a2);
                CA::OGL::render_edr_gain_filter((uint64_t)v13, *(CA::OGL **)(v15 + 40), a4, v26, v16);
                break;
              case 192:
                CA::Render::Update::render_edr_factor(a1[1], (const CA::Render::LayerNode *)a2);
                CA::OGL::render_edr_gain_multiply_filter((uint64_t)v13, *(CA::OGL **)(v15 + 40), a4, v27, v16);
                break;
              case 256:
                CA::OGL::render_home_affordance_base(v13, v15, a4, a8 / a9);
                break;
            }
          }
        }
        else if (v22 > 480)
        {
          if (v22 <= 580)
          {
            if (v22 == 481)
            {
              CA::OGL::emit_sdr_normalize_filter(v13, a4, a8 / a9);
            }
            else if (v22 == 522)
            {
              CA::OGL::render_srl_filter((uint64_t)v13, *(CA::Render::KeyValueArray **)(v15 + 40), a4, a8 / a9);
            }
          }
          else if (v22 == 581)
          {
            CA::OGL::render_vibrant_color_matrix(v13, *(CA::OGL **)(v15 + 40), (CA::ColorMatrix *)a4, a8 / a9);
          }
          else if (v22 == 583 || v22 == 586)
          {
            CA::OGL::render_vibrant_filter(v13, v15, a4, a8 / a9);
          }
        }
        else if (v22 <= 362)
        {
          if (v22 == 359)
          {
            CA::OGL::render_luminance_curve_map(v13, *(unsigned int **)(v15 + 40), a4, a8 / a9);
          }
          else if (v22 == 360)
          {
            CA::OGL::render_luminance_map((uint64_t)v13, v15, a4, a8 / a9);
          }
        }
        else
        {
          switch(v22)
          {
            case 363:
              CA::OGL::render_3d_lut_filter(v13, v15, a4, a8 / a9);
              break;
            case 378:
              CA::Render::Update::render_edr_factor(a1[1], (const CA::Render::LayerNode *)a2);
              CA::OGL::render_meteor_filter((uint64_t)v13, *(CA::Render::KeyValueArray **)(v15 + 40), a4, v25, v16);
              break;
            case 401:
              CA::OGL::render_opacity_pair_filter(v13, *(CA::Render::KeyValueArray **)(v15 + 40), a4, a8 / a9);
              break;
          }
        }
      }
    }
    else if (*(_QWORD *)(a2 + 48))
    {
      *(_QWORD *)(*((_QWORD *)v13 + 2) + 8) = *(_QWORD *)(v14 + 32);
      CA::OGL::emit_color_matrix(v13, *(float32x4_t **)(a2 + 48), (uint64_t)a4, *(unsigned __int8 *)(a2 + 56), a8 / a9);
    }
  }
}

BOOL CA::OGL::PingPongState::attach_dest(float32x2_t *this, int a2, uint64_t a3)
{
  _BOOL8 v6;
  float32x2_t v7;
  float32x2_t v8;
  int32x2_t v9;
  int64x2_t v10;
  int8x8_t v11;
  int64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x2_t v18;
  int32x2_t v19;
  int v20;
  int v21;
  int8x8_t v23;
  unsigned int v25;
  _BOOL8 surface;
  uint64_t v27;
  float32x2_t v28;
  uint64_t v30;
  int32x4_t v31;
  _OWORD v32[3];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v6 = (this[4].i16[0] & 1) == 0;
  v7 = this[6];
  v8 = vsub_f32(this[7], v7);
  v9 = vceqz_f32(v8);
  v10.i64[0] = v9.i32[0];
  v10.i64[1] = v9.i32[1];
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v10, 1), (int8x16_t)v10).u64[0] & 0x8000000000000000) != 0
    || (v11 = vmvn_s8(vorr_s8((int8x8_t)vcltz_f32(v8), (int8x8_t)vcgez_f32(v8))),
        v12.i64[0] = v11.i32[0],
        v12.i64[1] = v11.i32[1],
        (vorrq_s8((int8x16_t)vdupq_laneq_s64(v12, 1), (int8x16_t)v12).u64[0] & 0x8000000000000000) != 0))
  {
    v31 = 0uLL;
    v19 = 0;
    v18 = (int32x2_t)-1;
  }
  else
  {
    v13 = vcvtq_f64_f32(v7);
    v14 = vmaxnmq_f64(v13, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000));
    v15 = vminnmq_f64(vaddq_f64(v13, vcvtq_f64_f32(v8)), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL));
    v16 = (int32x4_t)vcvtmq_s64_f64(v14);
    v17 = (int32x4_t)vsubq_s64(vcvtpq_s64_f64(v15), (int64x2_t)v16);
    v31 = vuzp1q_s32(v16, v17);
    v18 = vadd_s32(vmovn_s64((int64x2_t)v16), (int32x2_t)-1);
    v19 = vmovn_s64((int64x2_t)v17);
  }
  if (this[4].i8[2])
  {
    v20 = v19.i32[0];
    if (v19.i32[0] <= v19.i32[1])
      v21 = v19.i32[1];
    else
      v21 = v19.i32[0];
    if (v19.i32[0] >= v19.i32[1])
      v20 = v19.i32[1];
    if (v21 <= 1073741822 && v20 >= 1)
    {
      v23 = (int8x8_t)vadd_s32(v19, (int32x2_t)0x200000002);
      if (v23.i32[1] < 1 || v23.i32[0] < 1)
        v25 = -1;
      else
        v25 = 0;
      *(int32x2_t *)v31.i8 = v18;
      v31.u64[1] = (unint64_t)vbic_s8(v23, (int8x8_t)vdup_n_s32(v25));
    }
  }
  surface = CA::OGL::PingPongState::create_surface((CA::OGL::PingPongState *)this, v6, (const CA::Bounds *)&v31);
  if (surface)
  {
    v27 = (uint64_t)this[v6 + 11];
    (*(void (**)(float32x2_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)this + 704))(*this, v27, a3, a3);
    CA::OGL::Context::push_surface((uint64_t)*this, v27, 0, 64, 0);
    if (a2)
    {
      if ((*(_WORD *)(v27 + 75) & 0x40) == 0)
      {
        memset(v32, 0, sizeof(v32));
        CA::Shape::operator=((uint64_t)v32, &v31);
        v28 = *this;
        v30 = 0;
        (*(void (**)(float32x2_t, _OWORD *, uint64_t *))(**(_QWORD **)&v28 + 912))(v28, v32, &v30);
      }
    }
  }
  return surface;
}

uint64_t CA::OGL::MetalContext::extend_surface(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  int32x2_t *v4;
  int32x2_t v5;
  uint64_t result;
  __int32 v7;
  __int32 v8;
  __int16 v9;

  v4 = *(int32x2_t **)(a2 + 200);
  if (!v4)
    v4 = (int32x2_t *)a2;
  v5 = vmin_s32(vsub_s32(v4[5], (int32x2_t)vmvn_s8((int8x8_t)__PAIR64__(a4, a3))), *(int32x2_t *)(a2 + 24));
  *(int32x2_t *)(a2 + 184) = v5;
  result = v5.u32[0];
  v7 = v5.i32[1];
  if ((*(_BYTE *)(a2 + 233) & 4) != 0)
  {
    *(int32x2_t *)(a2 + 184) = vrev64_s32(v5);
    v8 = v5.i32[0];
  }
  else
  {
    v8 = v5.i32[1];
    v7 = v5.i32[0];
  }
  v9 = *(_WORD *)(a2 + 75);
  if ((v9 & 0x40) == 0 || v7 > *(_DWORD *)(a2 + 192) || v8 > *(_DWORD *)(a2 + 196))
    *(_WORD *)(a2 + 75) = v9 & 0xFFBF;
  return result;
}

uint64_t CA::OGL::MetalContext::clear_region(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  __int16 v4;
  uint64_t v5[2];

  v5[1] = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(result + 248);
  if (!v3)
    __assert_rtn("clear_region", "ogl-metal.mm", 4087, "surf != nullptr");
  if (*a3 || v3 == *(_QWORD *)(result + 256) || (v4 = *(_WORD *)(v3 + 75), (v4 & 0x80) != 0))
  {
    v5[0] = *a3;
    return CA::OGL::Context::paint_region(result, a2, v5, 0);
  }
  else
  {
    *(_WORD *)(v3 + 75) = v4 | 0x20;
  }
  return result;
}

BOOL CA::OGL::PingPongState::create_surface(CA::OGL::PingPongState *this, unsigned int a2, const CA::Bounds *a3)
{
  char *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  int v10;
  BOOL v11;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v5 = (char *)this + 8 * a2;
  v8 = *((_QWORD *)v5 + 11);
  v7 = (uint64_t *)(v5 + 88);
  v6 = v8;
  if (v8)
  {
    v9 = *((_DWORD *)a3 + 2);
    if (v9 <= *(_DWORD *)(v6 + 24))
    {
      v10 = *((_DWORD *)a3 + 3);
      v11 = v10 < 1 || v9 < 1;
      if (!v11 && v10 <= *(_DWORD *)(v6 + 28))
      {
        v15 = *(_QWORD *)this;
        v16 = *(_QWORD *)a3;
        v17 = v9;
        v18 = v10;
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 696))(v15);
        v13 = *v7;
        return v13 != 0;
      }
    }
    CA::OGL::Context::release_surface(*(_QWORD *)this, v6);
    *v7 = 0;
  }
  v13 = (*(uint64_t (**)(_QWORD, uint64_t, const CA::Bounds *, _QWORD))(**(_QWORD **)this + 656))(*(_QWORD *)this, 1, a3, *((unsigned int *)this + 9));
  *v7 = v13;
  return v13 != 0;
}

char *CA::OGL::MetalContext::create_surface(CA::OGL::MetalContext *this, MTLPixelFormat a2, int32x2_t *a3, int a4)
{
  unint64_t v4;
  unint64_t v6;
  int v7;
  CA::OGL::MetalContext *v8;
  char *v9;
  unint64_t v11;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  NSObject *v20;
  __int32 v21;
  __int32 v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  __int16 v31;
  int v32;
  int v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _BOOL4 v41;
  int v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  NSObject *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  char **v55;
  unint64_t v56;
  char **v57;
  unint64_t v58;
  int v59;
  int v60;
  int v61;
  unint64_t v62;
  __int128 v65;
  __int16 v66;
  __int16 v67;
  __int16 v68;
  int32x2_t v69;
  uint64_t v70;
  malloc_zone_t *malloc_zone;
  char *v72;
  MTLPixelFormat v73;
  __int16 v74;
  __int32 v75;
  int v76;
  __int32 v77;
  int v78;
  __int16 v79;
  int v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  void *v84;
  void *v85;
  uint64_t v86;
  NSObject *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  NSObject *v91;
  __int16 v92;
  unsigned int v93;
  __int16 v94;
  __int128 v95;
  uint64_t v96;
  __int128 v97;
  __int16 v98;
  uint64_t Name;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint8_t buf[4];
  _BYTE v104[10];
  uint64_t v105;
  uint64_t v106;

  v106 = *MEMORY[0x1E0C80C00];
  v4 = a3[1].u32[0];
  if ((int)v4 < 1)
    return 0;
  v6 = a3[1].u32[1];
  if ((int)v6 < 1)
    return 0;
  v7 = a2;
  v8 = this;
  if (*((_DWORD *)this + 668) < (int)a2)
    return 0;
  v11 = *((_QWORD *)this + 331);
  if (v11 < v4 || v11 < v6)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v20 = x_log_category_ogl_metal;
      if (os_log_type_enabled((os_log_t)x_log_category_ogl_metal, OS_LOG_TYPE_DEFAULT))
      {
        v21 = a3[1].i32[0];
        v22 = a3[1].i32[1];
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)v104 = v21;
        *(_WORD *)&v104[4] = 1024;
        *(_DWORD *)&v104[6] = v22;
        _os_log_impl(&dword_184457000, v20, OS_LOG_TYPE_DEFAULT, "Surface %d x %d is too large\n", buf, 0xEu);
      }
    }
    return 0;
  }
  if ((*((_WORD *)this + 1640) & 0x10) != 0)
    v14 = 4194015;
  else
    v14 = 4185823;
  v15 = *((_QWORD *)this + 348);
  if ((a4 & 0x10) != 0)
    v15 = 115;
  if ((a4 & 0x100000) != 0)
    v15 = 80;
  v16 = 63;
  if ((a4 & 0x200000) == 0)
    v16 = v15;
  if ((a4 & 8) == 0)
    goto LABEL_22;
  if (v16 > 89)
  {
    v17 = 110;
    if (v16 == 90 || v16 == 94)
      goto LABEL_23;
    if (v16 != 554)
      goto LABEL_22;
    if (CADeviceIsVirtualized::once[0] != -1)
      dispatch_once(CADeviceIsVirtualized::once, &__block_literal_global_204);
    v17 = 115;
    if (!CADeviceIsVirtualized::is_virtualized)
      v17 = 550;
  }
  else
  {
    switch(v16)
    {
      case 10:
        v17 = 30;
        break;
      case 43:
        v17 = 80;
        break;
      case 63:
        v17 = 113;
        break;
      default:
LABEL_22:
        v17 = v16;
        break;
    }
  }
LABEL_23:
  if ((a4 & 0x10000) != 0)
    v18 = 43;
  else
    v18 = v17;
  if (CADeviceUseCompression::once != -1)
    dispatch_once(&CADeviceUseCompression::once, &__block_literal_global_15);
  v19 = v14 & (a4 | 7);
  if (CADeviceUseCompression::enable_compression
    && (objc_msgSend(*((id *)v8 + 363), "supportsExtendedXR10Formats") & (v18 == 550)) != 0)
  {
    v18 = 552;
  }
  if ((unint64_t)(v18 - 550) <= 5)
  {
    if ((a4 & 0x240) != 0)
    {
      v19 |= 0x10u;
      v18 = 115;
    }
    else
    {
      v19 |= 0x100u;
    }
  }
  v23 = 1.0;
  if ((v19 & 0x1000) != 0)
  {
    if (*((float *)v8 + 722) == 1.0)
      v19 &= ~0x1000u;
    else
      v23 = *((float *)v8 + 722);
  }
  if ((v19 & 0x21930) == 0x20000)
    v24 = 80;
  else
    v24 = v18;
  if ((v19 & 0x80) != 0)
  {
    v25 = CA::OGL::srgb_pixel_format(v24, a2);
    if (v24 == v25)
    {
      v19 &= ~0x80u;
      if (x_log_hook_p())
      {
        Name = MTLPixelFormatGetName();
        x_log_();
      }
      else
      {
        v48 = x_log_category_ogl_metal;
        if (os_log_type_enabled((os_log_t)x_log_category_ogl_metal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)v104 = MTLPixelFormatGetName();
          _os_log_impl(&dword_184457000, v48, OS_LOG_TYPE_DEFAULT, "Cannot create sRGB variant of %s", buf, 0xCu);
        }
      }
    }
    else
    {
      v24 = v25;
    }
  }
  if ((unint64_t)(v24 - 550) >= 6)
    v26 = v19;
  else
    v26 = v19 | 0x100;
  if (v24 == 125)
  {
    v26 |= 0x20u;
  }
  else if (v24 == 115)
  {
    v26 |= 0x10u;
  }
  v27 = v26 & 0xFFFFF7FF;
  if ((*((_WORD *)v8 + 1640) & 8) != 0)
    v28 = v26;
  else
    v28 = v26 & 0xFFFFF7FF;
  if ((v28 & 0x800) == 0)
    goto LABEL_83;
  v29 = *((_QWORD *)v8 + 32);
  if (v29 != *((_QWORD *)v8 + 31))
    goto LABEL_74;
  if (v29)
    LODWORD(v29) = (*(unsigned __int8 *)(v29 + 72) >> 1) & 0x1F;
  if (*((_DWORD *)v8 + 61) != (_DWORD)v29)
LABEL_74:
    CA::OGL::Context::prepare_destination_(v8);
  if (v7 != 1)
    goto LABEL_83;
  v30 = *((_QWORD *)v8 + 493);
  if (!v30)
    goto LABEL_83;
  if ((v28 & 0x40) != 0)
    goto LABEL_83;
  v31 = *(_WORD *)(v30 + 216);
  if (!v31 || ((*(_DWORD *)(v30 + 68) ^ v28) & 0xFFFCE3C0) != 0)
    goto LABEL_83;
  if ((v31 & 2) != 0)
  {
    v92 = -3;
    v93 = 1;
    goto LABEL_190;
  }
  v27 = v28;
  if ((v31 & 4) != 0)
  {
    v92 = -5;
    v93 = 2;
LABEL_190:
    v9 = (char *)x_mem_alloc0(0xF0uLL);
    *(_DWORD *)v9 = 1;
    v94 = *(_WORD *)(v9 + 75) | 0x10;
    *(_WORD *)(v9 + 75) = v94;
    v95 = *(_OWORD *)a3->i8;
    *((int32x2_t *)v9 + 5) = a3[1];
    v96 = *((_QWORD *)v8 + 493);
    *(_QWORD *)&v97 = *(_QWORD *)(v96 + 24);
    *((_QWORD *)&v97 + 1) = v95;
    *(_OWORD *)(v9 + 24) = v97;
    *((_QWORD *)v9 + 23) = *(_QWORD *)(v96 + 184);
    *((_DWORD *)v9 + 17) = *(_DWORD *)(v96 + 68) | 0x800;
    LOWORD(v96) = *(_WORD *)(v96 + 232) & 0x400;
    v98 = *((_WORD *)v9 + 116) & 0xFAC0;
    v9[72] |= 1u;
    v94 &= ~0x80u;
    *(_WORD *)(v9 + 75) = v94;
    LOWORD(v96) = v98 | 0x31 | v96;
    *((_WORD *)v9 + 116) = v96;
    *((_WORD *)v9 + 116) = *(_WORD *)(*((_QWORD *)v8 + 493) + 232) & 0x200 | v96 & 0xFDFF;
    *((_QWORD *)v9 + 25) = *((_QWORD *)v8 + 493);
    *((_WORD *)v9 + 106) = v93;
    *(_WORD *)(v9 + 75) = v94 | 0x100;
    *((_QWORD *)v9 + 12) = *(id *)(*((_QWORD *)v8 + 493) + 8 * v93 + 96);
    *((_QWORD *)v9 + 15) = objc_msgSend(*(id *)(*((_QWORD *)v8 + 493) + 8 * v93 + 96), "pixelFormat");
    *((float *)v9 + 16) = v23;
    *(_WORD *)(*((_QWORD *)v8 + 493) + 216) &= v92;
    return v9;
  }
LABEL_83:
  v32 = v27 & 0x48000;
  v33 = a3[1].i32[0];
  v34 = a3[1].i32[1];
  if ((v27 & 0x40000) != 0)
  {
    v35 = v33 - 1;
    if ((v33 & v35) != 0)
    {
      v36 = v35 | (v35 >> 1) | ((v35 | (v35 >> 1)) >> 2);
      v37 = v36 | (v36 >> 4) | ((v36 | (v36 >> 4)) >> 8);
      v33 = (((v37 | (v37 >> 16)) >> 32) | v37 | (v37 >> 16)) + 1;
    }
    if ((v34 & (unint64_t)(v34 - 1)) != 0)
    {
      v38 = (v34 - 1) | ((unint64_t)(v34 - 1) >> 1) | (((v34 - 1) | ((unint64_t)(v34 - 1) >> 1)) >> 2);
      v39 = v38 | (v38 >> 4) | ((v38 | (v38 >> 4)) >> 8);
      v34 = (((v39 | (v39 >> 16)) >> 32) | v39 | (v39 >> 16)) + 1;
    }
  }
  v41 = v33 < 64 || v34 < 64;
  if (!v32 && v41)
  {
    v42 = CA::OGL::metal_pixel_format_Bpp((CA::OGL *)v24, a2);
    if (v33 > 63 || v34 >= 64)
    {
      v43 = *MEMORY[0x1E0C85AD8] / (unint64_t)(v42 << 6);
      if ((v33 - 17) > 0x2E || v34 > 511)
      {
        if ((v34 - 17) <= 0x2E && v33 <= 511)
        {
          v49 = (int)v43 - 1;
          v50 = v49 + v33;
          v51 = v50 / (int)v43 * (int)v43;
          v52 = v50 & -(uint64_t)(int)v43;
          if (((int)v43 & (unint64_t)v49) != 0)
            v33 = v51;
          else
            v33 = v52;
          v34 = 64;
        }
      }
      else
      {
        v44 = (int)v43 - 1;
        v45 = v44 + v34;
        v46 = v45 / (int)v43 * (int)v43;
        v47 = v45 & -(uint64_t)(int)v43;
        if (((int)v43 & (unint64_t)v44) != 0)
          v34 = v46;
        else
          v34 = v47;
        v33 = 64;
      }
    }
    else
    {
      v34 = 64;
      v33 = 64;
    }
  }
  v53 = v27 & 0xFFFFFBFF;
  v55 = (char **)((char *)v8 + 80);
  v54 = *((_QWORD *)v8 + 10);
  if (!v54)
    goto LABEL_152;
  v56 = 0;
  v57 = 0;
  v58 = v33 * v34;
  do
  {
    v59 = *(_DWORD *)(v54 + 24);
    if (v32)
    {
      if (v33 != v59)
        goto LABEL_140;
      v60 = v34;
      v59 = v33;
      if (v34 != *(_DWORD *)(v54 + 28))
        goto LABEL_140;
    }
    else
    {
      if (v33 > v59)
        goto LABEL_140;
      v60 = *(_DWORD *)(v54 + 28);
      if (v34 > v60)
        goto LABEL_140;
    }
    if (*(_DWORD *)(v54 + 68) == v53
      && (*(_BYTE *)(v54 + 72) & 1) == v7
      && *(_QWORD *)(v54 + 48) == *((_QWORD *)v8 + 380)
      && ((v27 & 0x4000) == 0 || *(_DWORD *)(v54 + 208) != *((_DWORD *)v8 + 724)))
    {
      v61 = 0;
      while (v61 < v7)
      {
        v61 = 1;
        if (*(_QWORD *)(v54 + 120) != v24)
          goto LABEL_140;
      }
      v62 = v60 * v59 - v58;
      if (((v27 & 0x400) == 0 || v62 <= v58 >> 2) && (!v57 || v62 < v56))
      {
        v57 = v55;
        v56 = v62;
      }
    }
LABEL_140:
    v55 = (char **)(v54 + 8);
    v54 = *(_QWORD *)(v54 + 8);
  }
  while (v54);
  if (v57)
  {
    v9 = *v57;
    *v57 = (char *)*((_QWORD *)*v57 + 1);
    v65 = *(_OWORD *)a3->i8;
    *(_DWORD *)v9 = 1;
    *((_OWORD *)v9 + 2) = v65;
    v66 = *(_WORD *)(v9 + 75);
    if ((v66 & 0x40) != 0)
      v67 = -6672;
    else
      v67 = -6800;
    v68 = v67 & v66;
    *(_WORD *)(v9 + 75) = v68;
    v9[73] &= 0xC0u;
    v69 = vmin_s32(vadd_s32(a3[1], (int32x2_t)0x100000001), *(int32x2_t *)(v9 + 24));
    *((int32x2_t *)v9 + 23) = v69;
    if ((v66 & 0x40) == 0 || v69.i32[0] > *((_DWORD *)v9 + 48) || v69.i32[1] > *((_DWORD *)v9 + 49))
    {
      v68 &= 0xE5B0u;
      *(_WORD *)(v9 + 75) = v68;
    }
    *((float *)v9 + 16) = v23;
    *((_WORD *)v9 + 116) |= 0x40u;
    if (BYTE3(xmmword_1ECDC6AF0))
    {
      v70 = mach_continuous_time();
      v68 = *(_WORD *)(v9 + 75);
    }
    else
    {
      v70 = 0;
    }
    *((_QWORD *)v9 + 7) = v70;
    *(_WORD *)(v9 + 75) = v68 | 0x2000;
    return v9;
  }
LABEL_152:
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  v72 = (char *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0xF0uLL, 0x743898A5uLL);
  v9 = v72;
  *(_DWORD *)v72 = 1;
  v74 = *(_WORD *)(v72 + 75) | 0x10;
  *(_WORD *)(v72 + 75) = v74;
  *((_OWORD *)v72 + 2) = *(_OWORD *)a3->i8;
  *((_DWORD *)v72 + 6) = v33;
  *((_DWORD *)v72 + 7) = v34;
  v75 = a3[1].i32[0];
  if (v75 + 1 < v33)
    v76 = v75 + 1;
  else
    v76 = v33;
  *((_DWORD *)v72 + 46) = v76;
  v77 = a3[1].i32[1];
  if (v77 + 1 < v34)
    v78 = v77 + 1;
  else
    v78 = v34;
  *((_DWORD *)v72 + 47) = v78;
  *((_DWORD *)v72 + 17) = v53;
  v72[72] = v72[72] & 0xFE | v7 & 1;
  v79 = v7 & 0xF | (((v27 >> 6) & 1) << 8) | *((_WORD *)v72 + 116) & 0xFCC0;
  *(_WORD *)(v72 + 75) = v74 & 0xFF7F;
  *((_WORD *)v72 + 116) = v79;
  *((float *)v72 + 16) = v23;
  v72[74] = v72[74] & 0xE0 | CA::OGL::metal_pixel_format_Bpp((CA::OGL *)v24, v73);
  *((_QWORD *)v9 + 6) = *((_QWORD *)v8 + 380);
  if (v7 >= 1)
  {
    if (v33 <= v34)
      v80 = v34;
    else
      v80 = v33;
    v81 = 0;
    v101 = (unint64_t)(floor(log2((double)v80)) + 1.0);
    v102 = 8 * v7;
    while (1)
    {
      v82 = (void *)objc_msgSend(MEMORY[0x1E0CC6BB0], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", v24, v33, v34, HIBYTE(*((unsigned __int16 *)v9 + 116)) & 1, Name, v100);
      objc_msgSend(v82, "setUsage:", 5);
      if ((v27 & 0x4000) != 0)
        objc_msgSend(v82, "setUsage:", objc_msgSend(v82, "usage") | 2);
      objc_msgSend(v82, "setProtectionOptions:", *((_QWORD *)v9 + 6));
      objc_msgSend(v82, "setStorageMode:", 2);
      if ((v27 & 0x80000) != 0)
        objc_msgSend(v82, "setStorageMode:", 0);
      if (v27 & 0x200 | *((_WORD *)v9 + 116) & 0x100)
        objc_msgSend(v82, "setMipmapLevelCount:", v101);
      v83 = (uint64_t)v8;
      v84 = (void *)objc_msgSend(*((id *)v8 + 363), "newTextureWithDescriptor:", v82);
      *(_QWORD *)&v9[v81 + 96] = v84;
      objc_msgSend(v84, "setLabel:", CFSTR("com.apple.coreanimation.surface"));
      *(_QWORD *)&v9[v81 + 120] = v24;
      v85 = *(void **)&v9[v81 + 96];
      if (!v85)
        break;
      v86 = objc_msgSend(*(id *)&v9[v81 + 96], "protectionOptions");
      if (v86 != objc_msgSend(v82, "protectionOptions"))
      {
        if (x_log_hook_p())
        {
          Name = objc_msgSend(v82, "protectionOptions");
          v100 = objc_msgSend(v85, "protectionOptions");
          x_log_();
        }
        else
        {
          v87 = x_log_category_ogl_metal;
          if (os_log_type_enabled((os_log_t)x_log_category_ogl_metal, OS_LOG_TYPE_ERROR))
          {
            v88 = objc_msgSend(v82, "protectionOptions");
            v89 = objc_msgSend(v85, "protectionOptions");
            *(_DWORD *)buf = 134218240;
            *(_QWORD *)v104 = v88;
            *(_WORD *)&v104[8] = 2048;
            v105 = v89;
            _os_log_impl(&dword_184457000, v87, OS_LOG_TYPE_ERROR, "Descriptor (0x%llx) and texture (0x%llx) protection mismatch!", buf, 0x16u);
          }
        }
      }
      v81 += 8;
      v8 = (CA::OGL::MetalContext *)v83;
      if (v102 == v81)
        goto LABEL_176;
    }
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v91 = x_log_category_ogl_metal;
      if (os_log_type_enabled((os_log_t)x_log_category_ogl_metal, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)v104 = v33;
        *(_WORD *)&v104[4] = 1024;
        *(_DWORD *)&v104[6] = v34;
        _os_log_impl(&dword_184457000, v91, OS_LOG_TYPE_ERROR, "Failed to allocate %dx%d surface texture.\n", buf, 0xEu);
      }
    }
    CA::OGL::MetalContext::finalize_surface(v83, (uint64_t)v9);
    return 0;
  }
LABEL_176:
  CA::OGL::MetalContext::add_memoryless_textures((uint64_t)v8, (uint64_t)v9);
  CA::OGL::MetalContext::add_path_buffer_texture((uint64_t)v8, (uint64_t)v9);
  v90 = mach_continuous_time();
  *((_QWORD *)v9 + 28) = v90;
  if (!BYTE3(xmmword_1ECDC6AF0))
    v90 = 0;
  *((_QWORD *)v9 + 7) = v90;
  return v9;
}

BOOL CA::OGL::MetalContext::start_command_buffer(CA::OGL::MetalContext *this, uint64_t a2, const char *a3)
{
  void *v4;
  id v6;
  void *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  _BOOL8 result;
  NSObject *v14;
  _QWORD v15[6];

  v15[5] = *MEMORY[0x1E0C80C00];
  v4 = (void *)*((_QWORD *)this + 366);
  if (v4)
  {
    if (objc_msgSend(*((id *)this + 366), "protectionOptions", a3) != a2)
      objc_msgSend(v4, "setProtectionOptions:", a2);
    return 1;
  }
  v6 = (id)objc_msgSend(*((id *)this + 364), "commandBuffer", a3);
  *((_QWORD *)this + 366) = v6;
  objc_msgSend(v6, "setLabel:", CFSTR("com.apple.coreanimation.command-buffer"));
  v7 = (void *)*((_QWORD *)this + 366);
  if (v7)
  {
    ++*((_DWORD *)this + 1010);
    objc_msgSend(v7, "setProtectionOptions:", a2);
    if (*((_QWORD *)this + 25))
      objc_msgSend(v7, "setResponsibleTaskIDs:count:");
    if ((*((_BYTE *)this + 2677) & 0x80) != 0 && *((_QWORD *)this + 10) && byte_1ECDC6AAA)
      CA::OGL::MetalContext::mark_cache_drop_hints(this);
    objc_msgSend(*((id *)this + 366), "enqueue");
    v8 = *((_QWORD *)this + 499);
    v9 = (unint64_t *)((char *)this + 3976);
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 + 1;
    }
    while (__stlxr(v11, v9));
    *(_QWORD *)(v8 + 16) = v11;
    *(_DWORD *)(v8 + 40) = 0;
    v12 = (void *)*((_QWORD *)this + 366);
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = ___ZN2CA3OGL12MetalContext26prepare_new_command_bufferEv_block_invoke;
    v15[3] = &__block_descriptor_40_e28_v16__0___MTLCommandBuffer__8l;
    v15[4] = this;
    objc_msgSend(v12, "addCompletedHandler:", v15);
    return 1;
  }
  if (x_log_hook_p())
  {
    x_log_();
    return 0;
  }
  v14 = x_log_category_ogl_metal;
  result = os_log_type_enabled((os_log_t)x_log_category_ogl_metal, OS_LOG_TYPE_ERROR);
  if (result)
  {
    LOWORD(v15[0]) = 0;
    _os_log_impl(&dword_184457000, v14, OS_LOG_TYPE_ERROR, "Command buffer allocation failed!\n", (uint8_t *)v15, 2u);
    return 0;
  }
  return result;
}

uint64_t CA::OGL::metal_pixel_format_Bpp(CA::OGL *this, MTLPixelFormat a2)
{
  if ((uint64_t)this > 114)
  {
    if ((unint64_t)this - 550 < 2)
      return 5;
    if ((unint64_t)this - 552 >= 2 && this != (CA::OGL *)115)
      return 4;
    return 8;
  }
  if ((unint64_t)this <= 0x2B)
  {
    if (((1 << (char)this) & 0xA00C0000000) != 0)
      return 2;
    if (((1 << (char)this) & 0xC02) != 0)
      return 1;
  }
  if (this != (CA::OGL *)105)
  {
    if (this != (CA::OGL *)110)
      return 4;
    return 8;
  }
  return 16;
}

_QWORD *CA::OGL::add_primitive_filter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  malloc_zone_t *malloc_zone;
  _QWORD *result;

  if (a1)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4)
    {
      v5 = 0;
      do
      {
        v6 = v4;
        v4 = *(_QWORD *)(v4 + 8);
        *(_QWORD *)(v6 + 8) = v5;
        v5 = v6;
      }
      while (v4);
      *(_QWORD *)(a1 + 8) = v6;
    }
  }
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  result = malloc_type_zone_calloc(malloc_zone, 1uLL, 0x40uLL, 0x743898A5uLL);
  result[2] = a2;
  result[5] = *(_QWORD *)(a2 + 16);
  *result = a1;
  return result;
}

uint64_t CA::OGL::`anonymous namespace'::desired_src_edge_replication(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *i;
  uint64_t v19;
  int v20;
  uint64_t v21;

  v11 = a1[70];
  if (v11)
  {
    v12 = *(unsigned int *)(v11 + 16);
    if ((_DWORD)v12)
    {
      if ((*(_BYTE *)(*(_QWORD *)(v11 + 24) + 13) & 1) != 0)
        goto LABEL_17;
      v13 = 0;
      while (v12 - 1 != v13)
      {
        v14 = *(_QWORD *)(v11 + 8 * v13++ + 32);
        if ((*(_BYTE *)(v14 + 13) & 1) != 0)
        {
          if (v13 < v12)
            goto LABEL_17;
          break;
        }
      }
    }
  }
  if (a1[9] - a1[8] != 168)
    return 0;
  v15 = *(_QWORD *)(a2 + 128);
  if (!v15)
    return 0;
  v11 = *(_QWORD *)(v15 + 96);
  if (!v11)
    return 0;
  v12 = *(unsigned int *)(v11 + 16);
  if (!(_DWORD)v12)
    return 0;
  if ((*(_BYTE *)(*(_QWORD *)(v11 + 24) + 13) & 1) == 0)
  {
    v16 = 0;
    while (v12 - 1 != v16)
    {
      v17 = *(_QWORD *)(v11 + 8 * v16++ + 32);
      if ((*(_BYTE *)(v17 + 13) & 1) != 0)
      {
        if (v16 >= v12)
          return 0;
        goto LABEL_17;
      }
    }
    return 0;
  }
LABEL_17:
  if (v12 <= 1)
    v12 = 1;
  else
    v12 = v12;
  for (i = (uint64_t *)(v11 + 24); ; ++i)
  {
    v19 = *i;
    v20 = *(_DWORD *)(*i + 24);
    if (v20 == 577 || v20 == 242)
      break;
    if (!--v12)
      return 0;
  }
  v21 = *(_QWORD *)(v19 + 48);
  if (v21 && (*(unsigned int (**)(_QWORD))(*(_QWORD *)v21 + 72))(*(_QWORD *)(v19 + 48)))
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v21 + 136))(v21, v19, a2, a3, a4, a5, a6);
  return 0;
}

uint64_t CA::OGL::FilterSubclass::is_ogl_filter(CA::OGL::FilterSubclass *this)
{
  return 1;
}

BOOL x_log_hook_p()
{
  if (x_log_once[0] != -1)
    dispatch_once_f(x_log_once, 0, (dispatch_function_t)x_log_init);
  return x_log_stream_slot && pthread_getspecific(x_log_stream_slot)
      || __PAIR128__((unint64_t)x_log_function, x_log_file_handle) != 0;
}

uint64_t CA::OGL::GaussianBlurFilter::source_requirement(CA::OGL::GaussianBlurFilter *this, const CA::Render::Filter *a2)
{
  return 4;
}

_QWORD *CA::OGL::add_color_matrix(uint64_t a1, uint64_t a2, int a3, float32x4_t *a4, int *a5, int a6)
{
  uint64_t v9;
  int v10;
  const CA::ColorMatrix *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  malloc_zone_t *malloc_zone;
  _QWORD *v22;
  malloc_zone_t *v23;
  _OWORD *v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  malloc_zone_t *v29;
  _OWORD *v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;

  v9 = a1;
  v39 = *MEMORY[0x1E0C80C00];
  if ((vmaxvq_u8((uint8x16_t)vmvnq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_f32(*a4, (float32x4_t)xmmword_18474DFB0), (int16x8_t)vceqq_f32(a4[1], (float32x4_t)xmmword_18474DFD0)), (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_f32(a4[2]), (int16x8_t)vceqq_f32(a4[3], (float32x4_t)xmmword_18474DFB0))))) & 1) == 0&& (vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_18474E320, (int8x16_t)vceqq_f32(a4[4], (float32x4_t)xmmword_18474DFD0))) & 0xF) == 0)
  {
    return (_QWORD *)v9;
  }
  if (!a6 && (a4[1].f32[0] != 0.0 || a4[2].f32[1] != 0.0 || a4[3].f32[2] != 0.0) || a4[4].f32[3] != 0.0)
  {
    v10 = *a5;
    if (*a5 <= 4)
      v10 = 4;
    *a5 = v10;
  }
  if (!a1)
  {
LABEL_28:
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v22 = malloc_type_zone_calloc(malloc_zone, 1uLL, 0x40uLL, 0x743898A5uLL);
    v23 = (malloc_zone_t *)get_malloc_zone();
    v24 = malloc_type_zone_malloc(v23, 0x50uLL, 0x8BB15036uLL);
    v22[6] = v24;
    *v24 = *a4;
    v25 = a4[4];
    v27 = a4[1];
    v26 = a4[2];
    v24[3] = a4[3];
    v24[4] = v25;
    v24[1] = v27;
    v24[2] = v26;
    v22[5] = *(_QWORD *)(a2 + 16);
    *((_BYTE *)v22 + 56) = a6;
    *v22 = v9;
    return v22;
  }
  v11 = *(const CA::ColorMatrix **)(a1 + 48);
  if (!v11)
  {
    v15 = *(_QWORD *)(a1 + 16);
    if (!v15)
      goto LABEL_24;
    v16 = *(_QWORD *)(v15 + 48);
    if (!v16)
      goto LABEL_24;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v16 + 80))(v16))
      v17 = a6 == 0;
    else
      v17 = 1;
    if (!v17)
    {
      v29 = (malloc_zone_t *)get_malloc_zone();
      v30 = malloc_type_zone_malloc(v29, 0x50uLL, 0x8BB15036uLL);
      *(_QWORD *)(v9 + 48) = v30;
      *v30 = *a4;
      v31 = a4[4];
      v33 = a4[1];
      v32 = a4[2];
      v30[3] = a4[3];
      v30[4] = v31;
      v30[1] = v33;
      v30[2] = v32;
      *(_BYTE *)(v9 + 56) = a6;
      return (_QWORD *)v9;
    }
    v11 = *(const CA::ColorMatrix **)(v9 + 48);
    if (!v11)
      goto LABEL_24;
  }
  if (*(unsigned __int8 *)(v9 + 56) != a6)
  {
LABEL_24:
    v18 = *(_QWORD *)(v9 + 8);
    if (v18)
    {
      v19 = 0;
      do
      {
        v20 = v18;
        v18 = *(_QWORD *)(v18 + 8);
        *(_QWORD *)(v20 + 8) = v19;
        v19 = v20;
      }
      while (v18);
      *(_QWORD *)(v9 + 8) = v20;
    }
    goto LABEL_28;
  }
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v34 = 0u;
  CA::concat((CA *)&v34, (CA::ColorMatrix *)a4, v11, (const CA::ColorMatrix *)a4);
  v12 = v38;
  v13 = v36;
  *((_OWORD *)v11 + 3) = v37;
  *((_OWORD *)v11 + 4) = v12;
  v14 = v35;
  *(_OWORD *)v11 = v34;
  *((_OWORD *)v11 + 1) = v14;
  *((_OWORD *)v11 + 2) = v13;
  if (!*(_DWORD *)(v9 + 40))
    *(_QWORD *)(v9 + 40) = *(_QWORD *)(a2 + 16);
  return (_QWORD *)v9;
}

BOOL CA::ColorMatrix::is_opaque_identity(CA::ColorMatrix *this)
{
  return *((float *)this + 3) == 0.0
      && *((float *)this + 8) == 0.0
      && *((float *)this + 13) == 0.0
      && *((float *)this + 15) == 0.0
      && *((float *)this + 16) == 0.0
      && *((float *)this + 17) == 0.0
      && (float)(*((float *)this + 19) + *((float *)this + 18)) == 1.0;
}

BOOL CA::OGL::GaussianBlurFilter::can_append_color_matrix(CA::OGL::GaussianBlurFilter *this, CA::Render::KeyValueArray **a2, CA::OGL::Context *a3)
{
  return CA::Render::KeyValueArray::get_int_key(a2[5], (const CA::Render::KeyValueArray *)0x127, 0) == 0;
}

__n128 CA::OGL::Context::reuse_surface(uint64_t a1, uint64_t a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *(__n128 *)(a2 + 32) = *a3;
  *(_WORD *)(a2 + 75) &= 0xFFF0u;
  return result;
}

uint64_t CA::WindowServer::IOMFBDisplay::actual_inverse_color(CA::WindowServer::IOMFBDisplay *this)
{
  return *((unsigned __int8 *)this + 28059);
}

void CA::OGL::VariableBlurFilter::render(float a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double *v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  float v30;
  float v31;
  CA::Render::KeyValueArray *v32;
  float float_key;
  float v34;
  uint64_t v35;
  double *v36;
  const double *v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  double v50;
  uint64_t v51;
  unint64_t v52;
  int v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  int8x16_t v71[2];
  double v72;
  double v73;
  float v74[2];
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  if (a7)
  {
    v12 = *(_QWORD *)(a4 + 40);
    if (v12)
    {
      v13 = *(unsigned int *)(v12 + 16);
      if ((_DWORD)v13)
      {
        v20 = 0;
        v21 = v12 + 24;
        while (1)
        {
          v22 = *(_QWORD *)(v21 + 8 * v20);
          if (*(_DWORD *)(v22 + 16) == 296)
            break;
          if (v13 == ++v20)
            return;
        }
        if ((v20 & 0x80000000) == 0)
        {
          v23 = *(_QWORD *)(v22 + 24);
          if (v23)
          {
            v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 80))(v23);
            if (v24)
            {
              v26 = v24;
              v77 = 0u;
              v76 = 0u;
              v75 = 0u;
              DWORD1(v77) = 15;
              v27 = *(_QWORD *)(*(_QWORD *)(a6 + 232) + 24);
              v72 = 0.0;
              v73 = 0.0;
              if ((*(_BYTE *)(v27 + 144) & 0x10) != 0)
              {
                CA::Mat4Impl::mat4_get_scale((CA::Mat4Impl *)v27, &v73, &v72, v25);
                v28 = v72;
                v29 = v73;
              }
              else
              {
                v28 = *(double *)(v27 + 128);
                v72 = v28;
                v73 = v28;
                v29 = v28;
              }
              v30 = v29;
              v31 = v28;
              v32 = *(CA::Render::KeyValueArray **)(a4 + 40);
              float_key = CA::Render::KeyValueArray::get_float_key(v32, (const CA::Render::KeyValueArray *)0x12E, 0.0);
              v34 = float_key * a2;
              v74[0] = v34 * v30;
              v74[1] = v34 * v31;
              v35 = *(_QWORD *)(a5 + 24);
              v54 = *(float64x2_t *)(v35 + 80);
              v71[0] = *(int8x16_t *)(v35 + 64);
              v71[1] = (int8x16_t)v54;
              CA::Rect::apply_transform(v71, (const CA::Transform *)v27, v36);
              *(_QWORD *)&v76 = v71;
              *((_QWORD *)&v76 + 1) = a10;
              BYTE8(v77) = 16
                         * (CA::Render::KeyValueArray::get_int_key(v32, (const CA::Render::KeyValueArray *)0x11E, 0) != 0);
              LODWORD(v77) = 0;
              LODWORD(v77) = 2
                           * (CA::Render::KeyValueArray::get_int_key(v32, (const CA::Render::KeyValueArray *)0x129, 0) != 0);
              v38 = *(float64x2_t *)v27;
              v39 = *(float64x2_t *)(v27 + 16);
              v40 = *(float64x2_t *)(v27 + 32);
              v41 = *(float64x2_t *)(v27 + 48);
              v43 = *(float64x2_t *)(v27 + 64);
              v42 = *(float64x2_t *)(v27 + 80);
              v44 = *(float64x2_t *)(v27 + 96);
              v45 = *(float64x2_t *)(v27 + 112);
              v69 = v44;
              v70 = v45;
              v46 = vmulq_n_f64(v38, v54.f64[0]);
              v47 = vmulq_n_f64(v39, v54.f64[0]);
              v48 = vmulq_laneq_f64(v40, v54, 1);
              v49 = vmulq_laneq_f64(v41, v54, 1);
              v63 = v46;
              v64 = v47;
              v65 = v48;
              v66 = v49;
              v67 = v43;
              v68 = v42;
              if (((*(_BYTE *)(a6 + 416) & 2) == 0) != (*(_BYTE *)(*(_QWORD *)(a5 + 16) + 24) & 1))
              {
                v69 = vmlaq_f64(vaddq_f64(vmlaq_f64(v44, (float64x2_t)0, v46), v48), (float64x2_t)0, v43);
                v70 = vmlaq_f64(vaddq_f64(vmlaq_f64(v45, (float64x2_t)0, v47), v49), (float64x2_t)0, v42);
                v64 = v47;
                v65 = vnegq_f64(v48);
                v66 = vnegq_f64(v49);
                v68 = v42;
              }
              v61 = 0u;
              v62 = 0u;
              v59 = 0u;
              v60 = 0u;
              v57 = 0u;
              v58 = 0u;
              v55 = 0u;
              v56 = 0u;
              CA::Mat4Impl::mat4_invert((CA::Mat4Impl *)&v55, (CA::Mat4Impl *)&v63, v37);
              v50 = (float)(1.0 / a2);
              v55 = vmulq_n_f64(v55, v50);
              v56 = vmulq_n_f64(v56, v50);
              v57 = vmulq_n_f64(v57, v50);
              v58 = vmulq_n_f64(v58, v50);
              v51 = *(_QWORD *)(a6 + 16);
              v52 = *(_QWORD *)(v51 + 16) & 0xFFFFFF00FF00FF00;
              if (*(_QWORD *)(v51 + 8) == 0x3C003C003C003C00)
                v53 = 1;
              else
                v53 = 3;
              *(_DWORD *)(v51 + 16) = v53 | v52;
              *(_DWORD *)(v51 + 20) = HIDWORD(v52);
              (*(void (**)(uint64_t, uint64_t, uint64_t, float64x2_t *, float *, uint64_t, float, float))(*(_QWORD *)a6 + 856))(a6, a7, v26, &v55, v74, a11, a1, a2);
              *(_BYTE *)(*(_QWORD *)(a6 + 16) + 16) = 0;
            }
          }
        }
      }
    }
  }
}

uint64_t CA::OGL::VariableBlurFilter::source_requirement(CA::OGL::VariableBlurFilter *this, const CA::Render::Filter *a2)
{
  return 5;
}

void CA::OGL::Context::variable_masked_blur_surface(uint64_t a1, uint64_t a2, uint32x2_t *a3, float64x2_t *a4, uint64_t a5, float a6, float a7)
{
  int v14;
  int v15;
  float v16;
  float v17;
  unsigned int v18;
  float v19;
  int32x4_t v20;
  int32x4_t v21;
  uint64_t v22;
  int v23;
  float v24;
  __int128 v25;
  int v26;
  int64x2_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int32x2_t v30;
  double v31;
  float64x2_t v32;
  double v33;
  double v34;
  float64x2_t v35;
  double v36;
  int64x2_t v37;
  int32x4_t v38;
  int8x16_t v39;
  int32x4_t v40;
  float v41;
  uint64_t v42;
  uint64_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int v46;
  int v47;
  int v48;
  int32x4_t v49;
  uint64_t v50;
  int64x2_t v51;
  double v52;
  double v53;
  const void *v54;
  uint64_t v55;
  float v56;
  __int16 v57;
  uint64_t v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v72;
  float32x2_t v73;
  float v74;
  float v75;
  uint64_t v76;
  float32x2_t v77;
  float32x2_t v78;
  float32x2_t v79;
  float32x2_t v80;
  __int128 v81;
  float v82;
  float v83;
  float v84;
  uint64_t v85;
  uint64_t v86;
  _OWORD *v87;
  _OWORD *v88;
  unsigned int v89;
  float v90;
  float v91;
  float v92;
  float *v93;
  uint64_t v94;
  float32x2_t v95;
  float32x2_t v96;
  uint64_t v97;
  float v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  float32x2_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  NSObject *v106;
  const char *v107;
  uint64_t PerfHud;
  int8x16_t v109;
  int v110;
  float v111;
  float v112;
  float v113;
  int8x16_t v114;
  float64x2_t v115;
  _OWORD *v116;
  int8x16_t v117;
  int8x16_t v118;
  int8x16_t v119;
  __int128 v120;
  __int128 v121;
  int32x2_t v122[2];
  float64x2_t v123;
  int8x16_t v124;
  __int128 buf;
  uint64_t v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;
  uint64_t v130;
  float32x2_t v131;
  uint64_t v132;
  _DWORD v133[4];
  float32x4_t v134;
  _QWORD v135[8];
  uint64_t v136;
  _QWORD v137[8];
  uint64_t v138;
  _QWORD __dst[63];

  __dst[61] = *MEMORY[0x1E0C80C00];
  if (BYTE5(xmmword_1ECDC6A70))
  {
    PerfHud = CA::OGL::GetPerfHud((CA::OGL *)a1);
    if (PerfHud)
      ++*(_QWORD *)(PerfHud + 464);
  }
  v14 = *(_DWORD *)(a2 + 24);
  if (v14)
  {
    v15 = *(_DWORD *)(a2 + 28);
    if (v15)
    {
      v16 = *(float *)a5;
      v17 = *(float *)a5 * 2.6;
      if (v14 <= v15)
        v14 = *(_DWORD *)(a2 + 28);
      v18 = vcvtpd_u64_f64(log2((double)v14));
      v19 = ceilf(log2f(v17)) + 1.0;
      if (v19 <= 0.0)
        v19 = 0.0;
      if (v19 >= v18)
        v22 = v18;
      else
        v22 = v19;
      if (v22 >= 7)
        v23 = 7;
      else
        v23 = v22;
      v24 = (float)(1 << v23);
      v25 = *(_OWORD *)(a2 + 32);
      v26 = *(_QWORD *)(a2 + 40);
      if (SDWORD2(v25) <= SHIDWORD(v25))
        v26 = HIDWORD(*(_OWORD *)(a2 + 32));
      v20.i32[0] = 1073741822;
      v21.i32[0] = v26;
      v27.i64[0] = (int)v25;
      v27.i64[1] = SDWORD1(v25);
      v28 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v21, v20), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v27));
      v27.i64[0] = SDWORD2(v25);
      v27.i64[1] = SHIDWORD(v25);
      v29 = (int8x16_t)vcvtq_f64_s64(v27);
      v30 = vdup_n_s32(v26 > 1073741822);
      v27.i64[0] = v30.u32[0];
      v27.i64[1] = v30.u32[1];
      v123 = (float64x2_t)v28;
      v124 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v27, 0x3FuLL)), (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL), v29);
      CA::BoundsImpl::inset(v123.f64, (float)-v16 * 2.8, (float)-*(float *)(a5 + 4) * 2.8);
      if ((float)(1.0 / v24) != 1.0)
      {
        v31 = (float)(1.0 / v24);
        if (*(double *)v124.i64 < 1.79769313e308)
        {
          v123.f64[0] = v123.f64[0] * v31;
          *(double *)v124.i64 = *(double *)v124.i64 * v31;
        }
        if (*(double *)&v124.i64[1] < 1.79769313e308)
        {
          v123.f64[1] = v123.f64[1] * v31;
          *(double *)&v124.i64[1] = *(double *)&v124.i64[1] * v31;
        }
      }
      v32 = (float64x2_t)v124;
      v33 = *(double *)&v124.i64[1];
      if (*(double *)v124.i64 <= *(double *)&v124.i64[1])
        v34 = *(double *)&v124.i64[1];
      else
        v34 = *(double *)v124.i64;
      if (v34 < 1.79769313e308)
      {
        if (*(double *)v124.i64 < *(double *)&v124.i64[1])
          v33 = *(double *)v124.i64;
        if (v33 > 0.0)
        {
          v35 = vrndmq_f64(v123);
          v32 = vsubq_f64(vrndpq_f64(vaddq_f64(v123, (float64x2_t)v124)), v35);
          v123 = v35;
          v124 = (int8x16_t)v32;
        }
      }
      if (v23)
      {
        v36 = (double)(1 << v23);
        if (v32.f64[0] < 1.79769313e308)
        {
          v123.f64[0] = v123.f64[0] * v36;
          *(double *)v124.i64 = v32.f64[0] * v36;
        }
        if (v32.f64[1] < 1.79769313e308)
        {
          v123.f64[1] = v123.f64[1] * v36;
          *(double *)&v124.i64[1] = v32.f64[1] * v36;
        }
      }
      v115 = v123;
      v37 = vceqzq_f64((float64x2_t)v124);
      v38 = 0uLL;
      if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v37, 1), (int8x16_t)v37).u64[0] & 0x8000000000000000) == 0)
      {
        v39 = vorrq_s8((int8x16_t)vcltzq_f64((float64x2_t)v124), (int8x16_t)vcgezq_f64((float64x2_t)v124));
        if ((vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v39), 1), v39).u64[0] & 0x8000000000000000) == 0)
        {
          v40 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v123, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
          v38 = vuzp1q_s32(v40, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v123, (float64x2_t)v124), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v40));
        }
      }
      v41 = (float)v38.i32[3];
      __dst[0] = v38.i64[0];
      v114 = (int8x16_t)v38;
      LODWORD(__dst[1]) = v38.i32[2];
      HIDWORD(__dst[1]) = (int)(float)v38.i32[3];
      v42 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 656))(a1, 1, __dst, 527);
      if (v42)
      {
        v43 = v42;
        v113 = a7;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 704))(a1, v42, 16, 16);
        v46 = *(_DWORD *)(a2 + 40);
        v47 = *(_DWORD *)(a2 + 44);
        if (v46 <= v47)
          v48 = *(_DWORD *)(a2 + 44);
        else
          v48 = *(_DWORD *)(a2 + 40);
        v44.i32[0] = 1073741822;
        v45.i32[0] = v48;
        v49 = vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v45, v44), 0);
        v50 = *(_QWORD *)(a2 + 32);
        v51.i64[0] = (int)v50;
        v51.i64[1] = SHIDWORD(v50);
        v117 = (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL);
        v118 = (int8x16_t)v49;
        v109 = (int8x16_t)vcvtq_f64_s64(v51);
        if (v48 <= 1073741822)
          v52 = (double)v46;
        else
          v52 = 1.79769313e308;
        if (v48 <= 1073741822)
          v53 = (double)v47;
        else
          v53 = 1.79769313e308;
        v54 = *(const void **)(a1 + 16);
        memcpy(__dst, v54, 0x1E8uLL);
        v138 = 0;
        __dst[0] = v54;
        *(_QWORD *)(a1 + 16) = __dst;
        v55 = *(_QWORD *)(a1 + 232);
        v137[4] = 0x3C003C003C003C00;
        memset(&v137[5], 0, 24);
        v137[0] = 0;
        if (v55)
        {
          v56 = *(float *)(v55 + 64);
          v57 = *(_WORD *)(v55 + 68) & 0x500 | 1;
        }
        else
        {
          v57 = 1025;
          v56 = 1.0;
        }
        v111 = v17;
        v112 = a6;
        v119 = vbslq_s8(v118, v117, v109);
        *(float *)&v138 = v56;
        WORD2(v138) = v57;
        v137[2] = 0;
        v137[3] = &CA::identity_transform;
        v137[1] = &CA::Shape::_infinite_shape;
        v137[0] = CA::OGL::Context::set_gstate(a1, (uint64_t)v137);
        *(_BYTE *)(*(_QWORD *)(a1 + 16) + 481) &= ~1u;
        v110 = *(unsigned __int8 *)(a1 + 64);
        *(_BYTE *)(a1 + 64) = 0;
        *(_BYTE *)(*(_QWORD *)(a1 + 16) + 16) = 1;
        CA::OGL::Context::push_surface(a1, v43, 1u, 0, 0);
        CA::OGL::Context::bind_surface(a1, a2, 0, 1u, 1, 0.0);
        *(_QWORD *)(a1 + 128) = 0;
        v58 = a1 + 818;
        *(_QWORD *)(a1 + 96) = a1 + 818;
        *(_OWORD *)(a1 + 104) = xmmword_18474E060;
        if (*(_QWORD *)(a1 + 136) <= 3uLL)
        {
          *(_WORD *)(a1 + 816) |= 0x20u;
          CA::OGL::Context::array_flush(a1);
          *(_QWORD *)(a1 + 128) = 0;
          *(_QWORD *)(a1 + 96) = v58;
          *(_OWORD *)(a1 + 104) = xmmword_18474E060;
        }
        v59 = *(double *)v119.i64;
        v60 = *(double *)&v119.i64[1];
        v61 = v52 + *(double *)v119.i64;
        v62 = v53 + *(double *)&v119.i64[1];
        CA::OGL::Context::array_rect((_QWORD *)a1, v59, v60, v61, v62);
        v63 = v52;
        v64 = v53;
        v65 = *(_QWORD *)(a1 + 120) + 48 * *(_QWORD *)(a1 + 128);
        *(_QWORD *)(v65 - 176) = 0;
        *(float *)(v65 - 128) = v63;
        *(_DWORD *)(v65 - 124) = 0;
        *(float *)(v65 - 80) = v63;
        *(float *)(v65 - 76) = v64;
        *(_DWORD *)(v65 - 32) = 0;
        *(float *)(v65 - 28) = v64;
        CA::OGL::Context::array_flush(a1);
        CA::OGL::Context::unbind_surface((_QWORD *)a1, a2, 0);
        CA::OGL::Context::pop_surface((CA::OGL::Context *)a1);
        *(_BYTE *)(*(_QWORD *)(a1 + 16) + 16) = 38;
        CA::OGL::Context::bind_surface(a1, v43, 0, 1u, 1, 0.0);
        __asm { FMOV            V14.2S, #1.0 }
        v135[0] = _D14;
        if (v22 >= 2)
        {
          v72 = 0;
          v73 = vcvt_f32_s32(*(int32x2_t *)(v43 + 24));
          v76 = v22 - 1;
          LODWORD(v66) = 2.0;
          do
          {
            *(float *)&buf = (float)v72;
            v77 = vmul_f32(v73, (float32x2_t)0x3F0000003F000000);
            v78 = vrndm_f32(v77);
            v73 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(_D14, v78), (int8x8_t)_D14, (int8x8_t)v78);
            v79 = vcvt_f32_s32(*(int32x2_t *)(v43 + 24));
            v120 = v66;
            v135[v72 + 1] = vdiv_f32(v79, vmul_n_f32(v73, *(float *)&v66));
            CA::OGL::Context::push_surface(a1, v43, 1u, 0, v72 + 1);
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, __int128 *))(*(_QWORD *)a1 + 1000))(a1, 0, 1, 1, &buf);
            *(_QWORD *)(a1 + 128) = 0;
            *(_QWORD *)(a1 + 96) = v58;
            *(_OWORD *)(a1 + 104) = xmmword_18474E060;
            if (*(_QWORD *)(a1 + 136) <= 3uLL)
            {
              *(_WORD *)(a1 + 816) |= 0x20u;
              CA::OGL::Context::array_flush(a1);
              *(_QWORD *)(a1 + 128) = 0;
              *(_QWORD *)(a1 + 96) = v58;
              *(_OWORD *)(a1 + 104) = xmmword_18474E060;
            }
            v80 = vdiv_f32(vmul_f32(v77, v79), v73);
            v81 = v120;
            *(float *)&v81 = *(float *)&v81 + *(float *)&v81;
            v121 = v81;
            *(float *)&v81 = v115.f64[0] + v80.f32[0];
            v82 = v115.f64[1] + v80.f32[1];
            v74 = v115.f64[0];
            v75 = v115.f64[1];
            CA::OGL::Context::array_rect((_QWORD *)a1, v74, v75, *(float *)&v81, v82);
            v83 = (float)*(int *)(v43 + 24);
            v84 = (float)*(int *)(v43 + 28);
            v85 = *(_QWORD *)(a1 + 120) + 48 * *(_QWORD *)(a1 + 128);
            *(_QWORD *)(v85 - 176) = 0;
            *(float *)(v85 - 128) = v83;
            *(_DWORD *)(v85 - 124) = 0;
            *(float *)(v85 - 80) = v83;
            *(float *)(v85 - 76) = v84;
            *(_DWORD *)(v85 - 32) = 0;
            *(float *)(v85 - 28) = v84;
            CA::OGL::Context::array_flush(a1);
            CA::OGL::Context::pop_surface((CA::OGL::Context *)a1);
            v66 = v121;
            ++v72;
          }
          while (v76 != v72);
        }
        CA::OGL::Context::unbind_surface((_QWORD *)a1, v43, 0);
        CA::OGL::Context::set_gstate(a1, **(_QWORD **)(a1 + 232));
        v86 = __dst[0];
        *(_QWORD *)(a1 + 16) = __dst[0];
        __dst[0] = 0;
        *(_BYTE *)(v86 + 16) = 39;
        *(_WORD *)(v43 + 75) |= 0x200u;
        CA::OGL::Context::bind_surface(a1, v43, 0, 1u, 1, 0.0);
        v134 = 0uLL;
        v87 = CA::OGL::Context::bind_image(a1, 1, a3, (double *)0x100, 1u, 1, 2, 0, 0.0, &v134, 0);
        v88 = v87;
        if (v87)
        {
          v89 = *((_BYTE *)v87 + 55) & 0x3F;
          if (v89 > 0x15 || ((1 << v89) & 0x200101) == 0)
          {
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              v106 = x_log_category_ogl;
              if (os_log_type_enabled((os_log_t)x_log_category_ogl, OS_LOG_TYPE_ERROR))
              {
                if ((*((_BYTE *)v88 + 55) & 0x3Fu) > 0x29)
                  v107 = "UNKNOWN";
                else
                  v107 = CA::OGL::image_function_name(CA::OGL::ImageFunction)::names[*((_BYTE *)v88 + 55) & 0x3F];
                LODWORD(buf) = 136315138;
                *(_QWORD *)((char *)&buf + 4) = v107;
                _os_log_impl(&dword_184457000, v106, OS_LOG_TYPE_ERROR, "Unsupported image function %s", (uint8_t *)&buf, 0xCu);
              }
            }
          }
        }
        v116 = v88;
        v90 = 1.0;
        if ((*(_BYTE *)(a5 + 48) & 0x10) != 0)
          v91 = 1.0;
        else
          v91 = 0.0;
        *(float *)v133 = v111;
        *(float *)&v133[1] = v91;
        if (*(_DWORD *)(a5 + 40) != 2)
          v90 = 0.0;
        v92 = 0.0 / (float)*(int *)(v43 + 28);
        *(float *)&v133[2] = v90;
        *(float *)&v133[3] = v92;
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, _DWORD *))(*(_QWORD *)a1 + 1000))(a1, 0, 4, 1, v133);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 1000))(a1, 1, 4, 4, v135);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 1000))(a1, 2, 4, 4, &v136);
        v94 = 0;
        v95 = vmul_n_f32(vcvt_f32_s32(vadd_s32((int32x2_t)*(_OWORD *)&vextq_s8(v114, v114, 8uLL), *(int32x2_t *)v114.i8)), v112 / v113);
        HIDWORD(v132) = v95.i32[1];
        *(float *)&v129 = (float)(v112 / v113) * (float)v114.i32[0];
        *((float *)&v129 + 1) = (float)(v112 / v113) * (float)v114.i32[1];
        LODWORD(v130) = v95.i32[0];
        *((float *)&v130 + 1) = *((float *)&v129 + 1);
        v131 = v95;
        *(float *)&v132 = *(float *)&v129;
        v96 = v95;
        do
        {
          CA::Mat4Impl::mat4_apply_to_point2(a4, (double *)((char *)&v129 + v94), v93);
          v94 += 8;
        }
        while (v94 != 32);
        v128 = 0u;
        v97 = *(_QWORD *)(*(_QWORD *)(a1 + 232) + 8);
        *(_QWORD *)&buf = a1;
        *((_QWORD *)&buf + 1) = v97;
        v127 = 0u;
        v126 = 0;
        WORD4(v127) = 256;
        CA::OGL::Context::ClippedArray::start((CA::OGL::Context::ClippedArray *)&buf);
        v122[0] = 0;
        v122[1] = 0;
        v98 = (float)v114.i32[2];
        v99 = v129;
        v100 = v130;
        v102 = v131;
        v101 = v132;
        while (CA::OGL::Context::ClippedArray::next_rect((CA::OGL::Context::ClippedArray *)&buf, v122))
        {
          if (*(_DWORD *)(a1 + 92))
            v103 = 6;
          else
            v103 = 4;
          if ((unint64_t)(*(_QWORD *)(a1 + 128) + 4) > *(_QWORD *)(a1 + 136)
            || (v104 = *(_QWORD *)(a1 + 112)) != 0 && *(_QWORD *)(a1 + 104) + v103 > v104)
          {
            *(_WORD *)(a1 + 816) |= 0x20u;
            CA::OGL::Context::array_flush(a1);
            *(_QWORD *)(a1 + 128) = 0;
            *(_QWORD *)(a1 + 96) = v58;
            *(_OWORD *)(a1 + 104) = xmmword_18474E060;
          }
          CA::OGL::Context::array_rect((_QWORD *)a1, (float)(v112 / v113) * (float)v114.i32[0], (float)(v112 / v113) * (float)v114.i32[1], v96.f32[0], v96.f32[1]);
          v105 = *(_QWORD *)(a1 + 120) + 48 * *(_QWORD *)(a1 + 128);
          *(_QWORD *)(v105 - 176) = 0;
          *(_QWORD *)(v105 - 168) = v99;
          *(float *)(v105 - 128) = v98;
          *(_DWORD *)(v105 - 124) = 0;
          *(float *)(v105 - 80) = v98;
          *(float *)(v105 - 76) = v41;
          *(_DWORD *)(v105 - 32) = 0;
          *(float *)(v105 - 28) = v41;
          *(_QWORD *)(v105 - 120) = v100;
          *(float32x2_t *)(v105 - 72) = v102;
          *(_QWORD *)(v105 - 24) = v101;
        }
        (*(void (**)(uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 520))(a1, v116, 1);
        CA::OGL::Context::unbind_surface((_QWORD *)a1, v43, 0);
        CA::OGL::Context::release_surface(a1, v43);
        if (v110)
          *(_BYTE *)(a1 + 64) = 1;
        if (__dst[0])
          __assert_rtn("~ContextState", "ogl-context.h", 551, "!next && \"Imbalanced ContextState push/pop\"");
      }
    }
  }
}

uint64_t CA::OGL::Context::paint_region(uint64_t result, uint64_t a2, uint64_t *a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  _BYTE v18[3840];
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22[3];
  _QWORD v23[2];
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[123];

  v7 = result;
  v30[122] = *MEMORY[0x1E0C80C00];
  if (*a3 || (*(_WORD *)(*(_QWORD *)(result + 248) + 75) & 0x60) == 0)
  {
    bzero(v30, 0x3D0uLL);
    v25 = 0x3C003C003C003C00;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = 0x4013F800000;
    v23[0] = 0;
    v24 = 0uLL;
    v23[1] = &CA::Shape::_infinite_shape;
    v9 = *(_QWORD *)(v7 + 232);
    if (v9)
    {
      v10 = *(const void **)(v7 + 16);
      memcpy(v30, v10, 0x1E8uLL);
      v30[0] = v10;
      *(_QWORD *)(v7 + 16) = v30;
      v23[0] = CA::OGL::Context::set_gstate(v7, (uint64_t)v23);
    }
    else
    {
      MEMORY[0x1E0C80A78](v8);
      bzero(v18, 0xF00uLL);
      *(_QWORD *)(v7 + 120) = v18;
      *(_QWORD *)(v7 + 136) = 80;
      CA::OGL::Context::prepare_context(v7, (uint64_t)v30);
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v7 + 1008))(v7, v23);
    }
    v12 = v7 + 16;
    v11 = *(_QWORD *)(v7 + 16);
    if (a4)
    {
      *(_BYTE *)(v11 + 481) |= 1u;
      v11 = *(_QWORD *)v12;
      *(_BYTE *)(*(_QWORD *)v12 + 480) = 3;
    }
    *(_BYTE *)(v11 + 16) = 0;
    *(_QWORD *)(v7 + 128) = 0;
    *(_QWORD *)(v7 + 96) = v7 + 818;
    v19 = xmmword_18474E060;
    *(_OWORD *)(v7 + 104) = xmmword_18474E060;
    v22[1] = 0;
    v22[2] = 0;
    v21 = 0;
    v22[0] = a2;
    v20 = 0;
    while (CA::ShapeIterator::iterate(v22, (int *)&v20))
    {
      if (*(_DWORD *)(v7 + 92))
        v13 = 6;
      else
        v13 = 4;
      if ((unint64_t)(*(_QWORD *)(v7 + 128) + 4) > *(_QWORD *)(v7 + 136)
        || (v14 = *(_QWORD *)(v7 + 112)) != 0 && *(_QWORD *)(v7 + 104) + v13 > v14)
      {
        *(_WORD *)(v7 + 816) |= 0x20u;
        CA::OGL::Context::array_flush(v7);
        *(_QWORD *)(v7 + 128) = 0;
        *(_QWORD *)(v7 + 96) = v7 + 818;
        *(_OWORD *)(v7 + 104) = v19;
      }
      CA::OGL::Context::array_rect((_QWORD *)v7, (float)(int)v20, (float)SHIDWORD(v20), (float)(v21 + v20), (float)(HIDWORD(v21) + HIDWORD(v20)));
      v15 = *a3;
      v16 = *(_QWORD *)(v7 + 120) + 48 * *(_QWORD *)(v7 + 128);
      *(_QWORD *)(v16 - 160) = *a3;
      *(_QWORD *)(v16 - 112) = v15;
      *(_QWORD *)(v16 - 64) = v15;
      *(_QWORD *)(v16 - 16) = v15;
    }
    CA::OGL::Context::array_flush(v7);
    if (v9)
    {
      result = CA::OGL::Context::set_gstate(v7, **(_QWORD **)(v7 + 232));
      *(_QWORD *)(v7 + 16) = v30[0];
      v30[0] = 0;
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v7 + 1016))(v7, v23);
      *(_QWORD *)v12 = 0;
      *(_QWORD *)(v7 + 24) = 0;
      *(_QWORD *)(v7 + 120) = 0;
      *(_QWORD *)(v7 + 136) = 0;
    }
    for (i = 61; i != -61; i -= 61)
    {
      if (v30[i])
        __assert_rtn("~ContextState", "ogl-context.h", 551, "!next && \"Imbalanced ContextState push/pop\"");
    }
  }
  return result;
}

uint64_t CA::Render::KeyValueArray::get_float_color_key(CA::Render::KeyValueArray *this, const CA::Render::KeyValueArray *a2, float32x4_t *a3)
{
  unsigned int named_object;
  uint64_t v6;

  named_object = CA::Render::KeyValueArray::find_named_object_(this, a2);
  if ((named_object & 0x80000000) != 0)
    return 0;
  v6 = *(_QWORD *)(*((_QWORD *)this + named_object + 3) + 24);
  if (!v6 || *(_BYTE *)(v6 + 12) != 56 || *(_DWORD *)(v6 + 16) < 4u)
    return 0;
  *a3 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v6 + 24)), *(float64x2_t *)(v6 + 40));
  return 1;
}

BOOL CA::Render::Texture::is_protected(CA::Render::Texture *this)
{
  return (*(uint64_t (**)(CA::Render::Texture *))(*(_QWORD *)this + 240))(this) != 0;
}

uint64_t CA::Render::Surface::protection_options(CA::Render::Surface *this)
{
  return *((_QWORD *)this + 17);
}

uint64_t CA::Render::ShapeLayer::visit_subclass(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a1);
}

void *CAObject_initWithCoder(void *a1, void *a2)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t i;
  __CFString *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint8_t buf[4];
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  _BYTE v25[128];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v2 = (void *)objc_msgSend(a1, "init");
  v3 = v2;
  if (v2)
  {
    objc_msgSend(v2, "CA_initialize_for_decoding");
    v4 = (void *)objc_msgSend(a2, "decodeObjectOfClasses:forKey:", objc_msgSend(MEMORY[0x1E0CB3510], "CA_supportedClasses"), CFSTR("__CACodingContents"));
    if (v4)
    {
      v5 = v4;
      v19 = objc_msgSend(v4, "count");
      if (v19)
      {
        for (i = 0; i != v19; ++i)
        {
          v7 = (__CFString *)objc_msgSend(v5, "objectAtIndex:", i, v17, v18);
          v8 = (void *)objc_msgSend(a2, "CA_decodeObjectForKey:", v7);
          if (-[__CFString isEqualToString:](v7, "isEqualToString:", CFSTR("sublayers")))
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
            {
              v28 = 0u;
              v29 = 0u;
              v26 = 0u;
              v27 = 0u;
              v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v26, v25, 16);
              if (v9)
              {
                v10 = *(_QWORD *)v27;
                do
                {
                  v11 = 0;
                  do
                  {
                    if (*(_QWORD *)v27 != v10)
                      objc_enumerationMutation(v8);
                    v12 = *(_QWORD *)(*((_QWORD *)&v26 + 1) + 8 * v11);
                    objc_opt_class();
                    if ((objc_opt_isKindOfClass() & 1) == 0)
                      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("CALayerInvalid"), CFSTR("sublayers array %@ contains non-layer %@"), v8, v12);
                    ++v11;
                  }
                  while (v9 != v11);
                  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v26, v25, 16);
                }
                while (v9);
              }
            }
          }
          if (objc_msgSend(v3, "CA_validateValue:forKey:", v8, v7))
          {
            CAObject_setValueForKey(v3, 0, v8, v7);
          }
          else if (x_log_hook_p())
          {
            v17 = objc_msgSend((id)objc_msgSend(v8, "debugDescription"), "UTF8String");
            v18 = objc_msgSend((id)-[__CFString debugDescription](v7, "debugDescription"), "UTF8String");
            x_log_();
          }
          else
          {
            v13 = x_log_category_api;
            if (os_log_type_enabled((os_log_t)x_log_category_api, OS_LOG_TYPE_ERROR))
            {
              v14 = objc_msgSend((id)objc_msgSend(v8, "debugDescription"), "UTF8String");
              v15 = objc_msgSend((id)-[__CFString debugDescription](v7, "debugDescription"), "UTF8String");
              *(_DWORD *)buf = 136315394;
              v22 = v14;
              v23 = 2080;
              v24 = v15;
              _os_log_impl(&dword_184457000, v13, OS_LOG_TYPE_ERROR, "Rejecting value:\n %s\nFor key: %s", buf, 0x16u);
            }
          }
        }
      }
    }
  }
  return v3;
}

void sub_1844B9EDC(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void CA::Layer::set_bounds(CA::Layer *this, const CA::Rect *a2)
{
  objc_object **v4;
  CA::Transaction *v5;
  int v6;
  char *v7;
  char *v8;
  int v10;
  char *v11;
  objc_object v12[2];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v5 = CA::Transaction::ensure_compat(this);
  v6 = *((_DWORD *)v5 + 25);
  *((_DWORD *)v5 + 25) = v6 + 1;
  if (!v6)
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Transaction::transaction_lock);
  if (*((double *)this + 12) == *(double *)a2
    && *((double *)this + 13) == *((double *)a2 + 1)
    && *((double *)this + 14) == *((double *)a2 + 2)
    && *((double *)this + 15) == *((double *)a2 + 3))
  {
    v8 = (char *)this + 40;
  }
  else
  {
    v12[0].isa = 0;
    CA::Layer::begin_change(this, v5, CFSTR("bounds"), v12, v4);
    v7 = CA::Layer::writable_state(this, v5);
    v8 = v7;
    *(_OWORD *)(v7 + 56) = *(_OWORD *)a2;
    *(_OWORD *)(v7 + 72) = *((_OWORD *)a2 + 1);
    if (*((double *)a2 + 1) == 0.0 && *(double *)a2 == 0.0)
      v10 = 0;
    else
      v10 = 0x4000000;
    *((_DWORD *)v7 + 3) = *((_DWORD *)v7 + 3) & 0xFBFFFFFF | v10;
    CA::Layer::end_change((id *)this, v5, 72, (objc_object *)CFSTR("bounds"), (objc_object *)v12[0].isa);
  }
  if ((v8[18] & 8) == 0)
  {
    v11 = CA::Layer::writable_state(this, v5);
    *((_DWORD *)v11 + 4) |= 0x80000u;
  }
  CA::Transaction::unlock(v5);
}

void sub_1844BA41C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void CA::Layer::set_bit_int(CA::Layer *this, unsigned int a2, unsigned int a3, unsigned int a4, int a5, int a6)
{
  CA::Transaction *v12;
  int v13;
  char *v14;
  int v15;
  uint64_t v16;
  objc_object *String;
  objc_object **v18;
  uint64_t v19;
  int v20;
  char *v21;
  objc_object *v22[2];

  v22[1] = *(objc_object **)MEMORY[0x1E0C80C00];
  v12 = CA::Transaction::ensure_compat(this);
  v13 = *((_DWORD *)v12 + 25);
  *((_DWORD *)v12 + 25) = v13 + 1;
  if (!v13)
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Transaction::transaction_lock);
  v14 = (char *)this + 40;
  v15 = a6 & a5;
  v16 = a3 >> 5;
  if (((*((_DWORD *)this + v16 + 11) >> a3) & a5) != (a6 & a5))
  {
    v22[0] = 0;
    String = (objc_object *)CAAtomGetString(a2);
    CA::Layer::begin_change(this, v12, String, (objc_object *)v22, v18);
    v14 = CA::Layer::writable_state(this, v12);
    *(_DWORD *)&v14[4 * v16 + 4] = *(_DWORD *)&v14[4 * v16 + 4] & ~(a5 << (a3 & 0x1F)) | (v15 << (a3 & 0x1F));
    CA::Layer::end_change((id *)this, v12, a2, String, v22[0]);
  }
  v19 = a4 >> 5;
  v20 = 1 << a4;
  if ((*(_DWORD *)&v14[4 * v19 + 4] & v20) == 0)
  {
    v21 = CA::Layer::writable_state(this, v12);
    *(_DWORD *)&v21[4 * v19 + 4] |= v20;
  }
  CA::Transaction::unlock(v12);
}

void sub_1844BA650(_Unwind_Exception *a1)
{
  CA::Transaction *v1;

  CA::Transaction::unlock(v1);
  _Unwind_Resume(a1);
}

void CA_setValueForKey(void *a1, const char *a2, uint64_t a3, void *a4)
{
  const char *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD v15[4];
  _OWORD v16[8];
  _OWORD v17[3];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v4 = a2;
    if (a2)
    {
      v5 = a1;
      switch((int)a3)
      {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
          v6 = a4;
          goto LABEL_14;
        case 6:
          v7 = objc_msgSend(a4, "BOOLValue");
          goto LABEL_13;
        case 7:
          v7 = objc_msgSend(a4, "charValue");
          goto LABEL_13;
        case 8:
          v7 = objc_msgSend(a4, "unsignedCharValue");
          goto LABEL_13;
        case 9:
          v7 = objc_msgSend(a4, "shortValue");
          goto LABEL_13;
        case 10:
          v7 = objc_msgSend(a4, "unsignedShortValue");
          goto LABEL_13;
        case 11:
          v7 = objc_msgSend(a4, "intValue");
          goto LABEL_13;
        case 12:
          v7 = objc_msgSend(a4, "unsignedIntValue");
LABEL_13:
          v6 = (void *)v7;
          a1 = v5;
          a2 = v4;
          goto LABEL_14;
        case 13:
          v8 = objc_msgSend(a4, "longValue");
          goto LABEL_20;
        case 14:
          v8 = objc_msgSend(a4, "unsignedLongValue");
          goto LABEL_20;
        case 15:
          v8 = objc_msgSend(a4, "longLongValue");
          goto LABEL_20;
        case 16:
          v8 = objc_msgSend(a4, "unsignedLongLongValue");
LABEL_20:
          v6 = (void *)v8;
          a1 = v5;
          a2 = v4;
LABEL_14:
          objc_msgSend(a1, a2, v6);
          return;
        case 17:
          objc_msgSend(a4, "floatValue");
          objc_msgSend(v5, v4, v9);
          return;
        case 18:
          objc_msgSend(a4, "doubleValue");
          objc_msgSend(v5, v4, v10);
          return;
        case 19:
          objc_msgSend(a4, "pointValue");
          goto LABEL_26;
        case 20:
          objc_msgSend(a4, "sizeValue");
LABEL_26:
          objc_msgSend(v5, v4, v11);
          return;
        case 21:
          objc_msgSend(a4, "rectValue");
          objc_msgSend(v5, v4, v12);
          return;
        case 22:
          if (a4)
            objc_msgSend(a4, "CATransform3DValue");
          else
            memset(v16, 0, sizeof(v16));
          v14 = v16;
          goto LABEL_41;
        case 23:
          if (a4)
            objc_msgSend(a4, "CA_CGAffineTransformValue");
          else
            memset(v17, 0, sizeof(v17));
          v14 = v17;
          goto LABEL_41;
        case 24:
          objc_msgSend(a4, "CAPoint3DValue");
          objc_msgSend(v5, v4, v13);
          return;
        case 25:
          if (a4)
            objc_msgSend(a4, "CACornerRadiiValue");
          else
            memset(v15, 0, sizeof(v15));
          v14 = v15;
LABEL_41:
          objc_msgSend(v5, v4, v14);
          break;
        default:
          NSLog(CFSTR("unhandled setter type: %d"), a3);
          break;
      }
    }
  }
}

void CAObject_setValueForKey(void *a1, objc_class *a2, void *a3, const __CFString *a4)
{
  objc_class *v8;
  uint64_t *v9;
  unsigned int *v10;
  const char *v11;
  objc_super v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v8 = (objc_class *)objc_opt_class();
  v9 = (uint64_t *)classDescription(v8);
  v10 = propertyInfoForKey(v9, a4, 0);
  if (v10 && (v11 = (const char *)*((_QWORD *)v10 + 1)) != 0 && *((_WORD *)v10 + 2))
  {
    CA_setValueForKey(a1, v11, *((unsigned __int16 *)v10 + 2), a3);
  }
  else if (a2)
  {
    v12.receiver = a1;
    v12.super_class = a2;
    objc_msgSendSuper(&v12, sel_setValue_forKey_, a3, a4);
  }
}

id CAObject_valueForKey(void *a1, objc_class *a2, const __CFString *a3)
{
  objc_class *v6;
  uint64_t *v7;
  unsigned int *v8;
  const char *v9;
  objc_super v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v6 = (objc_class *)objc_opt_class();
  v7 = (uint64_t *)classDescription(v6);
  v8 = propertyInfoForKey(v7, a3, 0);
  if (v8)
  {
    v9 = (const char *)*((_QWORD *)v8 + 2);
    if (v9)
    {
      if (*((_WORD *)v8 + 2))
        return CA_valueForKey(a1, v9, *((unsigned __int16 *)v8 + 2));
    }
  }
  v11.receiver = a1;
  v11.super_class = a2;
  return objc_msgSendSuper(&v11, sel_valueForKey_, a3);
}

unsigned int *propertyInfoForAtom(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  int v3;
  unsigned int *v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int *v7;

  if (!a1)
    return 0;
  while (1)
  {
    v3 = *((_DWORD *)a1 + 6);
    if (v3)
      break;
LABEL_13:
    a1 = (uint64_t *)*a1;
    if (!a1)
      return 0;
  }
  v4 = (unsigned int *)a1[2];
  v5 = (unint64_t)&v4[10 * v3 - 10];
  v6 = v5 - (_QWORD)v4;
  if ((uint64_t)(v5 - (_QWORD)v4) < 41)
    goto LABEL_12;
  while (1)
  {
    v7 = &v4[10 * (v6 / 0x50)];
    if (*v7 == a2)
      break;
    if (*v7 > a2)
      v5 = (unint64_t)v7;
    else
      v4 = v7;
    v6 = v5 - (_QWORD)v4;
    if ((uint64_t)(v5 - (_QWORD)v4) <= 40)
    {
LABEL_12:
      while ((unint64_t)v4 <= v5)
      {
        if (*v4 == a2)
          goto LABEL_16;
        v4 += 10;
      }
      goto LABEL_13;
    }
  }
  v4 = v7;
LABEL_16:
  if (a3)
    *a3 = a1;
  return v4;
}

unsigned int *propertyInfoForKey(uint64_t *a1, const __CFString *a2, _QWORD *a3)
{
  unsigned int v5;

  v5 = CAInternAtom(a2, 1);
  if (v5)
    return propertyInfoForAtom(a1, v5, a3);
  else
    return 0;
}

id objectForKey(NSArray *a1, NSString *a2, unint64_t *a3)
{
  unint64_t v6;
  int v7;
  uint64_t v8;
  void *v9;
  id v10;
  unint64_t v11;
  void *v12;
  unsigned int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v6 = -[NSArray count](a1, "count");
  v7 = -[NSString length](a2, "length");
  if ((v7 & 0xFFFFFFF8) == 0)
    goto LABEL_12;
  v8 = (v7 - 1);
  if (-[NSString characterAtIndex:](a2, "characterAtIndex:", v8) != 41
    || !-[NSString hasPrefix:](a2, "hasPrefix:", CFSTR("@index(")))
  {
    goto LABEL_12;
  }
  v14 = 0;
  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3900]), "initWithString:", a2);
  objc_msgSend(v9, "setScanLocation:", 7);
  if (!objc_msgSend(v9, "scanInt:", &v14) || objc_msgSend(v9, "scanLocation") != v8)
    v14 = -1;

  if ((v14 & 0x80000000) != 0)
  {
LABEL_12:
    if (v6)
    {
      v11 = 0;
      while (1)
      {
        v10 = -[NSArray objectAtIndex:](a1, "objectAtIndex:", v11);
        if ((objc_opt_respondsToSelector() & 1) == 0)
          break;
        v12 = (void *)objc_msgSend(v10, "name");
        if (v12 && objc_msgSend(v12, "isEqualToString:", a2))
        {
          if (a3)
            *a3 = v11;
          return v10;
        }
        if (v6 == ++v11)
          return 0;
      }
    }
    return 0;
  }
  if (v6 <= v14)
    return 0;
  if (a3)
    *a3 = v14;
  return -[NSArray objectAtIndex:](a1, "objectAtIndex:");
}

void sub_1844BB3FC(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Display::DisplayLink::_next_wakeup_info_lock);
  _Unwind_Resume(a1);
}

uint64_t ensure_displays(void)
{
  uint32_t v0;
  NSObject *v1;
  uint32_t v2;
  NSObject *v3;
  int v5;
  int out_token;
  uint8_t buf[4];
  uint32_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  pthread_mutex_lock(&_displays_mutex);
  if ((displays_up_to_date & 1) == 0)
  {
    query_displays();
    displays_up_to_date = 1;
  }
  if (objc_msgSend((id)_displays, "count") && (initialized & 1) == 0)
  {
    out_token = 0;
    v0 = notify_register_dispatch("com.apple.CoreAnimation.CAWindowServer.DisplayChanged", &out_token, MEMORY[0x1E0C80D38], &__block_literal_global_787);
    if (v0)
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v1 = x_log_category_windowserver;
        if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109120;
          v8 = v0;
          _os_log_impl(&dword_184457000, v1, OS_LOG_TYPE_ERROR, "Failed to register for CADisplay change notifications: 0x%x", buf, 8u);
        }
      }
    }
    v5 = 0;
    if (CA::Display::display_queue(void)::once != -1)
      dispatch_once(&CA::Display::display_queue(void)::once, &__block_literal_global_800);
    v2 = notify_register_dispatch("com.apple.CoreAnimation.CAWindowServer.DisplayPower", &v5, (dispatch_queue_t)CA::Display::display_queue(void)::queue, &__block_literal_global_791);
    if (v2)
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v3 = x_log_category_windowserver;
        if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109120;
          v8 = v2;
          _os_log_impl(&dword_184457000, v3, OS_LOG_TYPE_ERROR, "Failed to register for CADisplay power notifications: 0x%x", buf, 8u);
        }
      }
    }
    CA::Render::add_observer(0x32u, 0, (uint64_t)will_suspend_callback, 0, 0);
    initialized = 1;
  }
  return pthread_mutex_unlock(&_displays_mutex);
}

void sub_1844BB650(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&_displays_mutex);
  _Unwind_Resume(a1);
}

uint64_t CAMediaTimingCopyRenderTiming(unint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  float v13;
  float v14;
  double v16;
  float v17;
  float v18;
  double v19;
  double v20;
  int v21;
  int v22;
  double v23;
  double v24;
  double v25;
  double v26;
  __CFString *v27;
  __CFString *v28;
  BOOL v29;
  malloc_zone_t *malloc_zone;
  double *v31;
  int v32;
  int *v33;
  unsigned int v35;
  _QWORD v36[2];

  v36[1] = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v2 = a1 ^ 0x8000000000000000;
    os_unfair_lock_lock((os_unfair_lock_t)&timing_lock);
    if (timing_cache)
    {
      v36[0] = 0;
      v3 = x_hash_table_lookup(timing_cache, v2, v36);
      if (v36[0])
      {
        v4 = v3;
        if (!v3)
        {
LABEL_59:
          os_unfair_lock_unlock((os_unfair_lock_t)&timing_lock);
          return v4;
        }
        v5 = (unsigned int *)(v3 + 8);
        do
          v6 = __ldaxr(v5);
        while (__stlxr(v6 + 1, v5));
LABEL_58:
        if (!v6)
        {
          v4 = 0;
          do
            v35 = __ldaxr(v5);
          while (__stlxr(v35 - 1, v5));
        }
        goto LABEL_59;
      }
    }
    os_unfair_lock_unlock((os_unfair_lock_t)&timing_lock);
    objc_msgSend((id)a1, "beginTime");
    v8 = v7;
    objc_msgSend((id)a1, "timeOffset");
    v10 = v9;
    objc_msgSend((id)a1, "duration");
    v12 = v11;
    objc_msgSend((id)a1, "speed");
    v14 = v13;
    if (v8 >= 0.000001 || v8 <= 0.0)
      v16 = v8;
    else
      v16 = 0.0;
    objc_msgSend((id)a1, "repeatCount");
    v18 = v17;
    objc_msgSend((id)a1, "repeatDuration");
    v20 = v19;
    v21 = objc_msgSend((id)a1, "autoreverses");
    v22 = v21;
    if (v20 <= 0.0 || v18 <= 0.0)
    {
      v25 = v20;
    }
    else
    {
      v23 = v12 + v12;
      if (!v21)
        v23 = v12;
      v24 = v23 * v18;
      v25 = 0.0;
      if (v20 < v24)
        goto LABEL_24;
    }
    v20 = v25;
    if (v18 > 0.0)
    {
      v26 = v18;
      goto LABEL_26;
    }
LABEL_24:
    v26 = 0.0;
    if (v20 > 0.0)
    {
      v22 = v21 | 8;
      v26 = v20;
    }
LABEL_26:
    v27 = (__CFString *)objc_msgSend((id)a1, "fillMode");
    v28 = v27;
    if (!v27)
      goto LABEL_38;
    if (v27 == CFSTR("forwards"))
      goto LABEL_32;
    if (v27 != CFSTR("backwards"))
    {
      if (v27 == CFSTR("both"))
        goto LABEL_37;
      if ((-[__CFString isEqualToString:](v27, "isEqualToString:", CFSTR("forwards")) & 1) != 0
        || -[__CFString isEqualToString:](v28, "isEqualToString:", CFSTR("frozen")))
      {
LABEL_32:
        v22 |= 2u;
        goto LABEL_38;
      }
      if (-[__CFString isEqualToString:](v28, "isEqualToString:", CFSTR("backwards")))
        goto LABEL_34;
      if ((-[__CFString isEqualToString:](v28, "isEqualToString:", CFSTR("both")) & 1) != 0
        || -[__CFString isEqualToString:](v28, "isEqualToString:", CFSTR("extended")))
      {
LABEL_37:
        v22 |= 6u;
      }
LABEL_38:
      if (!v22 && (v16 == 0.0 ? (v29 = v12 == INFINITY) : (v29 = 0), v29 && v10 == 0.0 && v14 == 1.0 && v26 == 0.0))
      {
        v4 = 0;
      }
      else
      {
        malloc_zone = (malloc_zone_t *)get_malloc_zone();
        v31 = (double *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x40uLL, 0x743898A5uLL);
        v4 = (uint64_t)v31;
        if (v31)
        {
          *((_DWORD *)v31 + 2) = 1;
          ++dword_1ECDC7CF8;
          *(_QWORD *)v31 = off_1E1598D50;
          v32 = 52;
        }
        else
        {
          v32 = MEMORY[0xC];
        }
        *((_DWORD *)v31 + 3) = v32 | (v22 << 8);
        v31[5] = v16;
        v31[6] = v10;
        *((float *)v31 + 4) = v14;
        v31[3] = v26;
        v31[4] = v12;
      }
      os_unfair_lock_lock((os_unfair_lock_t)&timing_lock);
      v33 = (int *)timing_cache;
      if (!timing_cache)
      {
        v33 = (int *)x_hash_table_new_(0, 0, 0, (uint64_t)release_timing, 0, 0);
        timing_cache = (uint64_t)v33;
      }
      if (!hash_table_modify(v33, v2, v4, 0) || !v4)
        goto LABEL_59;
      v5 = (unsigned int *)(v4 + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 + 1, v5));
      goto LABEL_58;
    }
LABEL_34:
    v22 |= 4u;
    goto LABEL_38;
  }
  return 0;
}

uint64_t hash_table_modify(int *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8;
  _QWORD *v9;
  int v10;
  _QWORD *v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  void (*v16)(uint64_t);
  void (*v17)(uint64_t);
  uint64_t result;
  malloc_zone_t *malloc_zone;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  malloc_zone_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  malloc_zone_t *v29;
  uint64_t v30;
  uint64_t v31;
  size_t v32;
  uint64_t *v33;
  uint64_t v34;
  void (*v35)(uint64_t);
  malloc_zone_t *v36;
  _QWORD *v37;
  int v38;
  _QWORD *v39;
  uint64_t v40;
  int v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v8 = (*((uint64_t (**)(uint64_t))a1 + 4))(a2);
  v9 = *(_QWORD **)(*((_QWORD *)a1 + 2) + 8 * (*((_QWORD *)a1 + 1) & v8));
  if (v9)
  {
    while (v9[1] != v8 || (*((unsigned int (**)(_QWORD, uint64_t))a1 + 5))(v9[2], a2))
    {
      v9 = (_QWORD *)*v9;
      if (!v9)
        goto LABEL_5;
    }
    v15 = v9[3];
    v16 = (void (*)(uint64_t))*((_QWORD *)a1 + 6);
    if (a4)
    {
      if (v16)
        v16(v9[2]);
      v17 = (void (*)(uint64_t))*((_QWORD *)a1 + 7);
      if (v17)
        v17(v15);
      result = 0;
      v9[2] = a2;
      v9[3] = a3;
    }
    else
    {
      if (v16)
        v16(a2);
      v35 = (void (*)(uint64_t))*((_QWORD *)a1 + 7);
      if (v35)
        v35(v15);
      result = 0;
      v9[3] = a3;
    }
  }
  else
  {
LABEL_5:
    v10 = *a1;
    if (*a1 <= 0x1E && *((_QWORD *)a1 + 3) + 1 > (unint64_t)(4 << *a1))
    {
      v12 = (_QWORD *)*((_QWORD *)a1 + 2);
      *a1 = v10 + 1;
      v13 = (uint64_t *)*((_QWORD *)a1 + 8);
      if (v13)
      {
        v14 = x_heap_calloc(v13, 8 * (2 << v10));
      }
      else
      {
        malloc_zone = (malloc_zone_t *)get_malloc_zone();
        v14 = malloc_type_zone_calloc(malloc_zone, 1uLL, 8 * (2 << v10), 0x743898A5uLL);
      }
      v20 = *a1;
      if (v14)
      {
        v21 = 0;
        v22 = ~(-1 << v20);
        *((_QWORD *)a1 + 1) = v22;
        do
        {
          v23 = (_QWORD *)v12[v21];
          if (v23)
          {
            do
            {
              v24 = (_QWORD *)*v23;
              v25 = v23[1] & v22;
              *v23 = v14[v25];
              v14[v25] = v23;
              v23 = v24;
            }
            while (v24);
          }
          ++v21;
        }
        while (v21 != 1 << v10);
        *((_QWORD *)a1 + 2) = v14;
        if (!*((_QWORD *)a1 + 8))
        {
          v26 = (malloc_zone_t *)get_malloc_zone();
          malloc_zone_free(v26, v12);
        }
      }
      else
      {
        *a1 = v20 - 1;
      }
    }
    v27 = (uint64_t *)*((_QWORD *)a1 + 9);
    if (v27)
    {
      v28 = (uint64_t *)v27[1];
      if (v28)
      {
        v27[1] = *v28;
      }
      else
      {
        v30 = v27[2];
        v31 = *((int *)v27 + 6);
        v32 = v30 * v31 + 8;
        v33 = (uint64_t *)v27[4];
        if (v33)
        {
          v34 = x_heap_malloc(v33, v30 * v31 + 8);
        }
        else
        {
          v36 = (malloc_zone_t *)get_malloc_zone();
          v34 = (uint64_t)malloc_type_zone_malloc(v36, v32, 0x81ECB6CuLL);
        }
        v37 = (_QWORD *)v34;
        if (v34)
        {
          v28 = (uint64_t *)(v34 + 8);
          v38 = *((_DWORD *)v27 + 6);
          v39 = v37 + 1;
          if (v38 >= 2)
          {
            v40 = v27[2];
            v41 = v38 - 1;
            v42 = v37 + 1;
            do
            {
              v39 = (_QWORD *)((char *)v42 + v40);
              *v42 = (char *)v42 + v40;
              v42 = (_QWORD *)((char *)v42 + v40);
              --v41;
            }
            while (v41);
          }
          v43 = *v27;
          *v39 = v27[1];
          v27[1] = v37[1];
          *v37 = v43;
          *v27 = (uint64_t)v37;
        }
        else
        {
          v28 = 0;
        }
      }
    }
    else
    {
      v29 = (malloc_zone_t *)get_malloc_zone();
      v28 = (uint64_t *)malloc_type_zone_malloc(v29, 0x20uLL, 0x8BB15036uLL);
    }
    v28[2] = a2;
    v28[3] = a3;
    v44 = *((_QWORD *)a1 + 2);
    v45 = *((_QWORD *)a1 + 1) & v8;
    *v28 = *(_QWORD *)(v44 + 8 * v45);
    v28[1] = v8;
    *(_QWORD *)(v44 + 8 * v45) = v28;
    ++*((_QWORD *)a1 + 3);
    return 1;
  }
  return result;
}

void CAAnimation_setter(uint64_t a1, const void *a2, int a3, unsigned __int8 *a4)
{
  CA::Transaction *v8;
  const __CFString *String;
  int v10;
  CA::AttrList *v11;
  malloc_zone_t *malloc_zone;

  v8 = *(CA::Transaction **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 576);
  if (!v8)
    v8 = (CA::Transaction *)CA::Transaction::create((CA::Transaction *)a1);
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("CAAnimationImmutable"), CFSTR("attempting to modify read-only animation %@"), a1);
  String = CAAtomGetString(a2);
  objc_msgSend((id)a1, "willChangeValueForKey:", String);
  v10 = *((_DWORD *)v8 + 25);
  *((_DWORD *)v8 + 25) = v10 + 1;
  if (!v10)
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Transaction::transaction_lock);
  v11 = *(CA::AttrList **)(a1 + 8);
  if (!v11)
  {
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v11 = (CA::AttrList *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x10uLL, 0x743898A5uLL);
  }
  *(_QWORD *)(a1 + 8) = CA::AttrList::set(v11, a2, a3, a4);
  CA::Transaction::unlock(v8);
  objc_msgSend((id)a1, "didChangeValueForKey:", String);
  if ((int)a2 > 457)
  {
    if (((_DWORD)a2 - 458) < 2 || (_DWORD)a2 == 547 || (_DWORD)a2 == 515)
      goto LABEL_20;
  }
  else
  {
    if ((int)a2 <= 186)
    {
      if ((_DWORD)a2 != 47 && (_DWORD)a2 != 55)
        return;
LABEL_20:
      CAMediaTimingInvalidate(a1);
      return;
    }
    if ((_DWORD)a2 == 187 || (_DWORD)a2 == 219)
      goto LABEL_20;
  }
}

uint64_t CA::Transaction::get_value(uint64_t result, int a2, const CGAffineTransform *a3, CA::Mat4Impl *this)
{
  _QWORD *v7;
  uint64_t v8;

  if (result)
  {
    v7 = (_QWORD *)result;
    while (1)
    {
      v8 = v7[2];
      if (v8)
      {
        if ((CA::AttrList::get(v8, a2, a3, this) & 1) != 0)
          break;
      }
      v7 = (_QWORD *)*v7;
      if (!v7)
        return 0;
    }
    return 1;
  }
  return result;
}

void sub_1844BCE2C(_Unwind_Exception *a1)
{
  CA::Transaction *v1;

  CA::Transaction::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1844BCFA8(_Unwind_Exception *a1)
{
  CA::Transaction *v1;

  CA::Transaction::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1844BD0B4(_Unwind_Exception *a1)
{
  CA::Transaction *v1;

  CA::Transaction::unlock(v1);
  _Unwind_Resume(a1);
}

CA::Layer *CA::Layer::model_layer(CA::Layer *this, CA::Transaction *a2)
{
  CA::Layer *v2;
  int v4;
  uint64_t v5;

  if (!*((_QWORD *)this + 2))
    return 0;
  v2 = this;
  if ((*((_DWORD *)this + 1) & 0x60000) != 0)
  {
    v4 = *((_DWORD *)a2 + 25);
    *((_DWORD *)a2 + 25) = v4 + 1;
    if (!v4)
      os_unfair_lock_lock((os_unfair_lock_t)&CA::Transaction::transaction_lock);
    v5 = *(_QWORD *)(*((_QWORD *)a2 + 13) + 224);
    if (v5)
      v2 = (CA::Layer *)x_hash_table_lookup(v5, (uint64_t)v2, 0);
    CA::Transaction::unlock(a2);
  }
  return v2;
}

void CAAnimation_getter(CA::Transaction *a1, int a2, const CGAffineTransform *a3, CA::Mat4Impl *this)
{
  CA::Transaction *v8;
  int v9;
  uint64_t v10;
  char v11;
  objc_class *Class;

  v8 = *(CA::Transaction **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 576);
  if (!v8)
    v8 = (CA::Transaction *)CA::Transaction::create(a1);
  v9 = *((_DWORD *)v8 + 25);
  *((_DWORD *)v8 + 25) = v9 + 1;
  if (!v9)
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Transaction::transaction_lock);
  v10 = *((_QWORD *)a1 + 1);
  if (!v10)
  {
    CA::Transaction::unlock(v8);
    goto LABEL_9;
  }
  v11 = CA::AttrList::get(v10, a2, a3, this);
  CA::Transaction::unlock(v8);
  if ((v11 & 1) == 0)
  {
LABEL_9:
    Class = object_getClass(a1);
    CAObject_defaultValueForAtom(Class, a2, a3, (uint64_t)this);
  }
}

uint64_t x_string_hash(_BYTE *a1)
{
  char v1;
  uint64_t result;
  unsigned __int8 *v4;
  int v5;

  v1 = *a1;
  if (!*a1)
    return 0;
  result = 0;
  v4 = a1 + 1;
  do
  {
    result = 33 * result + v1;
    v5 = *v4++;
    v1 = v5;
  }
  while (v5);
  return result;
}

BOOL x_pointer_compare(uint64_t a1, uint64_t a2)
{
  return a1 != a2;
}

uint64_t CAObject_validateArrayOfClass(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _BYTE v7[128];
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    return 0;
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v2 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v8, v7, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v9;
LABEL_4:
    v5 = 0;
    while (1)
    {
      if (*(_QWORD *)v9 != v4)
        objc_enumerationMutation(a1);
      if ((objc_opt_isKindOfClass() & 1) == 0)
        return 0;
      if (v3 == ++v5)
      {
        v3 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v8, v7, 16);
        result = 1;
        if (v3)
          goto LABEL_4;
        return result;
      }
    }
  }
  return 1;
}

uint64_t draw_path_direct(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t Info;
  CGColor *Color;
  unsigned int CompositeOperation;
  CGColor *FillColor;
  unsigned int v9;
  CGColor *StrokeColor;
  unsigned int v11;

  Info = CGContextDelegateGetInfo();
  CGGStateGetStyle();
  Color = (CGColor *)CGStyleGetColor();
  CompositeOperation = CGGStateGetCompositeOperation();
  CACGContextEvaluator::update_with_color(Info, Color, CompositeOperation);
  if (a4 <= 4)
  {
    if (a4 == 2
      || (FillColor = (CGColor *)CGGStateGetFillColor(),
          v9 = CGGStateGetCompositeOperation(),
          CACGContextEvaluator::update_with_color(Info, FillColor, v9),
          a4 - 2 <= 2))
    {
      StrokeColor = (CGColor *)CGGStateGetStrokeColor();
      v11 = CGGStateGetCompositeOperation();
      CACGContextEvaluator::update_with_color(Info, StrokeColor, v11);
    }
  }
  *(_BYTE *)(Info + 78) |= CGGStateGetStyle() != 0;
  CGContextDelegateGetInfo();
  return CGContextDelegateDrawPathDirect();
}

uint64_t draw_glyphs(uint64_t a1, uint64_t a2)
{
  int TextDrawingMode;
  _BYTE *Info;
  CGColor *Color;
  unsigned int CompositeOperation;
  CGColor *FillColor;
  unsigned int v8;
  CGColor *StrokeColor;
  unsigned int v10;
  CGColor *FontSmoothingBackgroundColor;
  unsigned int v12;

  TextDrawingMode = CGGStateGetTextDrawingMode();
  Info = (_BYTE *)CGContextDelegateGetInfo();
  CGGStateGetStyle();
  Color = (CGColor *)CGStyleGetColor();
  CompositeOperation = CGGStateGetCompositeOperation();
  CACGContextEvaluator::update_with_color((uint64_t)Info, Color, CompositeOperation);
  if ((TextDrawingMode & 0xFFFFFFF9) == 0)
  {
    FillColor = (CGColor *)CGGStateGetFillColor();
    v8 = CGGStateGetCompositeOperation();
    CACGContextEvaluator::update_with_color((uint64_t)Info, FillColor, v8);
  }
  if (((TextDrawingMode - 1) & 0xFFFFFFFA) == 0)
  {
    StrokeColor = (CGColor *)CGGStateGetStrokeColor();
    v10 = CGGStateGetCompositeOperation();
    CACGContextEvaluator::update_with_color((uint64_t)Info, StrokeColor, v10);
  }
  FontSmoothingBackgroundColor = (CGColor *)CGGStateGetFontSmoothingBackgroundColor();
  v12 = CGGStateGetCompositeOperation();
  CACGContextEvaluator::update_with_color((uint64_t)Info, FontSmoothingBackgroundColor, v12);
  LODWORD(FontSmoothingBackgroundColor) = CGGStateGetFontRenderingStyle();
  if ((FontSmoothingBackgroundColor & MEMORY[0x186DBC940](a2) & 2) != 0)
  {
    Info[77] = 1;
    Info[75] = 1;
  }
  Info[78] |= CGGStateGetStyle() != 0;
  CGContextDelegateGetInfo();
  return CGContextDelegateDrawGlyphs();
}

void CACGContextEvaluator::update_with_color(uint64_t a1, CGColorRef color, unsigned int a3)
{
  CGPatternRef Pattern;
  double Alpha;
  CGColor *v9;
  CGColorSpace *ColorSpace;
  CGImage *Image;
  CGColorSpace *v12;
  const CGFloat *Components;
  double v14;

  if (!color)
    return;
  Pattern = CGColorGetPattern(color);
  Alpha = CGColorGetAlpha(color);
  if (a3 == 2 && Alpha == 0.0 && Pattern == 0)
    return;
  *(_BYTE *)(a1 + 72) = 1;
  if (a3 >= 0xB)
  {
LABEL_15:
    *(_BYTE *)(a1 + 77) = 1;
    goto LABEL_16;
  }
  if (!*(_BYTE *)(a1 + 77))
  {
    v9 = *(CGColor **)(a1 + 64);
    if (v9)
    {
      if (CGColorEqualToColor(v9, color))
        goto LABEL_16;
    }
    else if (!Pattern)
    {
      *(_QWORD *)(a1 + 64) = CGColorRetain(color);
      goto LABEL_16;
    }
    goto LABEL_15;
  }
LABEL_16:
  ColorSpace = CGColorGetColorSpace(color);
  Image = (CGImage *)CGPatternGetImage();
  if (Image)
  {
    CACGContextEvaluator::update_with_image((CACGContextEvaluator *)a1, Image);
  }
  else if (CGPatternGetShading())
  {
    *(_BYTE *)(a1 + 72) = 1;
    *(_BYTE *)(a1 + 77) = 1;
    v12 = (CGColorSpace *)CGShadingGetColorSpace();
    CACGContextEvaluator::update_with_color_space(a1, v12, 1);
  }
  else if (Pattern)
  {
    *(_BYTE *)(a1 + 72) = 1;
    *(_WORD *)(a1 + 79) = 257;
    *(_BYTE *)(a1 + 81) = 1;
    *(_DWORD *)(a1 + 74) = 16843009;
  }
  Components = CGColorGetComponents(color);
  if (CGColorSpaceGetNumberOfComponents(ColorSpace) == 3)
  {
    v14 = Components[1];
    if (*Components == v14
      && v14 == Components[2]
      && (ColorSpace == (CGColorSpace *)CAGetColorSpace(0x1Du)
       || (CGColorSpaceEqualToColorSpaceIgnoringRange() & 1) != 0
       || ColorSpace == (CGColorSpace *)CAGetColorSpace(0x1Cu)
       || (CGColorSpaceEqualToColorSpaceIgnoringRange() & 1) != 0
       || ColorSpace == (CGColorSpace *)CAGetColorSpace(5u)
       || CGColorSpaceEqualToColorSpaceIgnoringRange()))
    {
      ColorSpace = (CGColorSpace *)CAGetColorSpace(3u);
    }
  }
  CACGContextEvaluator::update_with_color_space(a1, ColorSpace, 0);
  CACGContextEvaluator::update_with_color_components((CACGContextEvaluator *)a1, ColorSpace, Components);
}

uint64_t CACGContextEvaluator::update_with_color_space(uint64_t this, CGColorSpace *a2, int a3)
{
  CGColorSpace *v4;
  _BYTE *v5;

  if (a2)
  {
    v4 = a2;
    v5 = (_BYTE *)this;
    while (1)
    {
      this = CGColorSpaceGetProcessColorModel();
      if ((_DWORD)this == 1)
        break;
      if (!(_DWORD)this)
      {
        v5[74] = 1;
        return this;
      }
      if (CGColorSpaceGetModel(v4) != kCGColorSpaceModelPattern)
      {
        this = CGColorSpaceGetModel(v4);
        if ((_DWORD)this != 5)
        {
          v5[76] = 1;
          return this;
        }
      }
      this = (uint64_t)CGColorSpaceGetBaseColorSpace(v4);
      v4 = (CGColorSpace *)this;
      if (!this)
        return this;
    }
    v5[75] = 1;
    if (a3)
    {
      this = CGColorSpaceIsWideGamutRGB(v4);
      if ((_DWORD)this)
      {
        CAGetColorSpace(5u);
        this = CGColorSpaceEqualToColorSpace();
        if ((_DWORD)this)
          v5[79] = 1;
        else
          v5[80] = 1;
      }
    }
  }
  return this;
}

uint64_t CACGContextEvaluator::update_with_color_components(CACGContextEvaluator *this, CGColorSpaceRef space, const double *a3)
{
  CGColorSpace *v4;
  uint64_t result;
  CGColorSpace *v7;
  uint64_t v8;
  char v9;
  char v10;
  float v11;
  BOOL v12;
  BOOL v13;
  _OWORD v14[2];
  uint64_t v15;

  v4 = space;
  v15 = *MEMORY[0x1E0C80C00];
  if (CGColorSpaceGetModel(space) == kCGColorSpaceModelPattern
    || (result = CGColorSpaceGetModel(v4), (_DWORD)result == 5))
  {
    result = (uint64_t)CGColorSpaceGetBaseColorSpace(v4);
    v4 = (CGColorSpace *)result;
  }
  if (v4)
  {
    v7 = (CGColorSpace *)*((_QWORD *)this + 3);
    memset(v14, 0, sizeof(v14));
    if (CARequiresColorMatching(v4, v7, 0))
    {
      result = CARetainColorTransform(v7);
      if (!result)
      {
LABEL_18:
        *(_WORD *)((char *)this + 79) = 257;
        return result;
      }
      if (CGColorTransformConvertColorComponents())
        a3 = (const double *)v14;
      result = CGColorTransformRelease();
    }
    else
    {
      result = CGColorSpaceGetModel(v4);
      if (!(_DWORD)result)
        return result;
    }
    v8 = 0;
    v9 = 0;
    v10 = 0;
    do
    {
      v11 = a3[v8];
      v12 = v11 < -0.7549;
      if (v11 > 1.2549)
        v12 = 1;
      v10 |= v12;
      v13 = v11 < -0.0039216;
      if (v11 > 1.0039)
        v13 = 1;
      v9 |= v13;
      ++v8;
    }
    while (v8 != 3);
    if ((v10 & 1) != 0)
      goto LABEL_18;
    if ((v9 & 1) != 0)
      *((_BYTE *)this + 79) = 1;
  }
  return result;
}

CGColorSpaceRef CAColorSpaceCreateExtended(CGColorSpace *a1)
{
  CGColorSpace *Extended;
  CGColorSpaceRef v3;
  CGColorSpace *v5;

  if ((CGColorSpace *)CAGetColorSpace(0x1Du) == a1 || (CGColorSpace *)CAGetColorSpace(0x1Cu) == a1)
  {
    v5 = (CGColorSpace *)CAGetColorSpace(0x1Cu);
    return CGColorSpaceRetain(v5);
  }
  else
  {
    os_unfair_lock_lock((os_unfair_lock_t)&CAColorSpaceCreateExtended::lock);
    Extended = (CGColorSpace *)CAColorSpaceCreateExtended::extended;
    if ((CGColorSpace *)CAColorSpaceCreateExtended::base != a1)
    {
      CGColorSpaceRelease((CGColorSpaceRef)CAColorSpaceCreateExtended::extended);
      CAColorSpaceCreateExtended::base = (uint64_t)a1;
      Extended = CGColorSpaceCreateExtended(a1);
      CAColorSpaceCreateExtended::extended = (uint64_t)Extended;
      if (!Extended)
      {
        Extended = CGColorSpaceRetain(a1);
        CAColorSpaceCreateExtended::extended = (uint64_t)Extended;
      }
    }
    v3 = CGColorSpaceRetain(Extended);
    os_unfair_lock_unlock((os_unfair_lock_t)&CAColorSpaceCreateExtended::lock);
    return v3;
  }
}

void CA_CGColorGetRGBComponents(CGColor *a1, CGColorSpace *a2, CGFloat *a3)
{
  const CGFloat *Components;
  CGColorSpace *ColorSpace;
  CGColorSpaceModel Model;
  double Alpha;

  Components = CGColorGetComponents(a1);
  ColorSpace = CGColorGetColorSpace(a1);
  if ((CARequiresColorMatching(ColorSpace, a2, 0) & 1) != 0)
    goto LABEL_13;
  Model = CGColorSpaceGetModel(ColorSpace);
  if (Model == kCGColorSpaceModelRGB)
  {
    *a3 = *Components;
    a3[1] = Components[1];
    a3[2] = Components[2];
    Alpha = Components[3];
    goto LABEL_10;
  }
  if (Model)
  {
LABEL_13:
    if (CARetainColorTransform(a2))
    {
      CGColorTransformConvertColorComponents();
      CGColorTransformRelease();
    }
    else
    {
      *a3 = *Components;
      a3[1] = Components[1];
      a3[2] = Components[2];
    }
    Alpha = CGColorGetAlpha(a1);
  }
  else
  {
    *a3 = *Components;
    a3[1] = *Components;
    a3[2] = *Components;
    Alpha = Components[1];
  }
LABEL_10:
  a3[3] = Alpha;
}

void CA::Render::convert_cgcolor_to_float(CGColor *cf, CGColor *a2, CGColorSpace *a3, float *a4, CA::Render::Pattern **a5)
{
  const void *v9;
  CA::Render::Pattern *Pattern;
  CGFloat Alpha;
  float32x2_t v13;
  float32x2_t v14;
  CGColor *PatternBaseColor;
  float64x2_t v20;
  float64x2_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (CADeviceUseCIF10::once != -1)
    dispatch_once(&CADeviceUseCIF10::once, &__block_literal_global_9735);
  if (CADeviceUseCIF10::enable_cif10)
  {
    v9 = (const void *)CAGetColorSpace(0x1Du);
    if (CFEqual(a2, v9))
      a2 = (CGColor *)CAGetColorSpace(0x1Cu);
  }
  if (CA::Render::initialize_types(void)::once[0] == -1)
  {
    if (!cf)
      goto LABEL_27;
  }
  else
  {
    dispatch_once(CA::Render::initialize_types(void)::once, &__block_literal_global_4814);
    if (!cf)
      goto LABEL_27;
  }
  if (CFGetTypeID(cf) == CA::Render::color_type && CGColorGetAlpha(cf) > 0.0)
  {
    Pattern = CGColorGetPattern(cf);
    if (Pattern)
    {
      if (a4)
        *(_QWORD *)a4 = CA::Render::Pattern::new_pattern(Pattern, a2, 0, 0, 0.0);
      if (CGPatternIsColored())
      {
        Alpha = CGColorGetAlpha(cf);
        if (Alpha > 1.0)
          Alpha = 1.0;
        if (Alpha < 0.0)
          Alpha = 0.0;
        *(float *)&Alpha = Alpha;
        _Q0 = vdupq_lane_s32(*(int32x2_t *)&Alpha, 0);
        goto LABEL_25;
      }
      PatternBaseColor = (CGColor *)CGColorGetPatternBaseColor();
      if (!PatternBaseColor)
      {
        __asm { FMOV            V0.4S, #1.0 }
LABEL_25:
        *(int32x4_t *)a3 = _Q0;
        return;
      }
      v20 = 0u;
      v21 = 0u;
      CA_CGColorGetRGBComponents(PatternBaseColor, a2, v20.f64);
      v13 = vcvt_f32_f64(v20);
      v14 = vcvt_f32_f64(v21);
      *(float32x4_t *)a3 = vcvt_hight_f32_f64((int32x2_t)v13, v21);
    }
    else
    {
      v20 = 0u;
      v21 = 0u;
      CA_CGColorGetRGBComponents(cf, a2, v20.f64);
      v13 = vcvt_f32_f64(v20);
      v14 = vcvt_f32_f64(v21);
      *(float32x4_t *)a3 = vcvt_hight_f32_f64((int32x2_t)v13, v21);
      if (a4)
        *(_QWORD *)a4 = 0;
    }
    *(float32x2_t *)a3 = vmul_lane_f32(v13, v14, 1);
    *((_DWORD *)a3 + 2) = vmul_lane_f32(v14, v14, 1).u32[0];
    return;
  }
LABEL_27:
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  if (a4)
    *(_QWORD *)a4 = 0;
}

char *CA::Render::copy_image(CA::Render *this, CGImage *a2, CGColorSpace *a3, double a4, double a5)
{
  int v7;
  CGImage *v10;
  CGColorSpace *ColorSpace;
  CGColorSpace *BaseColorSpace;
  CGColorSpaceModel Model;
  const void *Property;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int Width;
  unsigned int Height;
  malloc_zone_t *malloc_zone;
  char *v21;
  char *image_by_rendering;
  __int128 v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  double v35;
  double v36;
  int v37;
  uint64_t v38;
  double v39;
  int v40;
  size_t v41;
  size_t v42;
  char *v43;
  _BOOL4 v44;
  NSObject *v45;
  CGImage *v46;
  CGColorSpace *v47;
  __int16 v48;
  double v49;
  uint64_t v50;
  int v51;
  int v52;
  NSObject *v53;
  uint64_t v54;
  double v55;
  unsigned int *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  malloc_zone_t *v60;
  _QWORD *v61;
  int *v62;
  CA::Render *v63;
  uint64_t v64;
  double v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t *v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  int v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int v78;
  int v80;
  unsigned int v81;
  NSObject *v82;
  unsigned int *v83;
  unsigned int v84;
  unsigned int v85;
  __IOSurface *v86;
  __IOSurface *v87;
  CFTypeID v88;
  unsigned int v89;
  __IOSurface *v90;
  uint64_t ImageProvider;
  uint64_t v92;
  CA::Render *v93;
  unsigned int v94;
  __IOSurface *v95;
  __IOSurface *v96;
  CA::Render *PixelFormat;
  unsigned int v98;
  __IOSurface *v99;
  CGColorSpace *v100;
  uint64_t Info;
  objc_object *v102;
  malloc_zone_t *v103;
  CA::Render::MetalTexture *v104;
  CGColorSpace *v105;
  CGColorSpace *v106;
  CGColorSpaceModel v107;
  unsigned int ComponentType;
  _BOOL4 v109;
  BOOL v110;
  unsigned int v111;
  int v112;
  int AlphaInfo;
  int v114;
  unsigned int v115;
  int v116;
  BOOL v117;
  _BOOL4 v118;
  double v119;
  double v120;
  uint64_t v121;
  _BOOL4 v122;
  __int16 BitmapInfo;
  int v124;
  int v125;
  CGColorSpace *v126;
  CGColorSpace *v127;
  CGColorSpaceModel v128;
  int v129;
  size_t BitsPerPixel;
  size_t BitsPerComponent;
  CGBitmapInfo v132;
  CGBitmapInfo v133;
  CGImage *v134;
  CGImage *v135;
  uint64_t v136;
  int v137;
  const CGFloat *Decode;
  int v139;
  size_t v140;
  size_t v141;
  CGBitmapInfo v142;
  CGBitmapInfo v143;
  CA::Render::Texture *image_from_image_data;
  NSObject *v145;
  CGImage *v146;
  CGColorSpace *v147;
  __int16 v148;
  double v149;
  NSObject *v150;
  NSObject *v151;
  const char *v152;
  uint64_t v153;
  const char *v154;
  NSObject *v155;
  uint32_t v156;
  NSObject *v157;
  const char *v158;
  NSObject *v159;
  char v160;
  size_t v161;
  size_t v162;
  int v163;
  BOOL v164;
  unsigned int v165;
  BOOL v166;
  unsigned int v167;
  unsigned int v168;
  int v169;
  int v170;
  double v171;
  double v172;
  double v173;
  double v174;
  uint64_t v175;
  CA::Render *v176;
  unint64_t BytesPerRow;
  uint64_t v179;
  int v180;
  int v181;
  NSObject *v182;
  const char *v183;
  char v184;
  int v185;
  char v186;
  char v187;
  unsigned int v188;
  NSObject *v189;
  void *v191;
  NSObject *log;
  NSObject *loga;
  NSObject *logb;
  CGColorSpaceModel v195;
  unsigned int v196;
  unsigned int v197;
  unsigned int v198;
  int v199;
  unint64_t Data;
  _BOOL4 cf;
  CFTypeRef cfb;
  void (*cfa)(const void *, void *);
  char v204;
  CA::Render *v205;
  uint8_t buf[32];
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  int v212;
  uint64_t v213;
  CGRect v214;
  CGRect v215;

  v7 = (int)a3;
  v213 = *MEMORY[0x1E0C80C00];
  v10 = (CGImage *)(a3 | 8);
  ColorSpace = CGImageGetColorSpace(this);
  if (ColorSpace)
  {
    BaseColorSpace = ColorSpace;
    if (!CGColorSpaceUsesITUR_2100TF(ColorSpace))
      CGImageGetHeadroom();
    while (1)
    {
      Model = CGColorSpaceGetModel(BaseColorSpace);
      if (Model != kCGColorSpaceModelIndexed)
        break;
      BaseColorSpace = CGColorSpaceGetBaseColorSpace(BaseColorSpace);
      if (!BaseColorSpace)
        goto LABEL_10;
    }
    if (Model <= kCGColorSpaceModelRGB && CGColorSpaceSupportsOutput(BaseColorSpace))
      a2 = BaseColorSpace;
  }
LABEL_10:
  if ((v7 & 0x100) != 0)
  {
    v205 = 0;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    if (CGImageIsSubimage()
      && (Property = (const void *)CGImageGetProperty()) != 0
      && CA_CFBoolValue(Property))
    {
      v16 = CA::Render::copy_image(v205, a2, (CGColorSpace *)(v7 | 0x208u), v15, a4, a5);
      if (v16)
      {
        v17 = (unsigned int *)v16;
        if ((*(_BYTE *)(v16 + 13) & 0x64) != 0)
          __assert_rtn("copy_image", "render-image-cache.cpp", 1761, "!main_texture->has_display_transform ()");
        Width = CGImageGetWidth(this);
        Height = CGImageGetHeight(this);
        malloc_zone = (malloc_zone_t *)get_malloc_zone();
        v21 = (char *)malloc_type_zone_malloc(malloc_zone, 0x28uLL, 0x8BB15036uLL);
        image_by_rendering = v21;
        if (v21)
        {
          LODWORD(v23) = (int)*(double *)buf;
          DWORD1(v23) = (int)*(double *)&buf[8];
          *((_QWORD *)&v23 + 1) = __PAIR64__(Height, Width);
          *((_DWORD *)v21 + 2) = 1;
          *((_DWORD *)v21 + 3) = 50;
          ++dword_1ECDC7CF0;
          *(_QWORD *)v21 = off_1E1596360;
          v24 = v17 + 2;
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 + 1, v24));
          v26 = v17;
          if (!v25)
          {
            v26 = 0;
            do
              v188 = __ldaxr(v24);
            while (__stlxr(v188 - 1, v24));
          }
          *((_QWORD *)v21 + 2) = v26;
          *(_OWORD *)(v21 + 24) = v23;
        }
        v27 = v17 + 2;
        do
        {
          v28 = __ldaxr(v27);
          v29 = v28 - 1;
        }
        while (__stlxr(v29, v27));
        if (!v29)
          (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 16))(v17);
        return image_by_rendering;
      }
    }
    else
    {
      v10 = (CGImage *)(v10 & 0xFFFFFEFF);
    }
  }
  os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::image_cache_lock);
  v30 = CA::Render::image_cache;
  if (!CA::Render::image_cache)
  {
    CA::Render::image_cache = (uint64_t)x_hash_table_new_(0, 0, 0, 0, 0, 0);
    CA::Render::image_cache_list = (uint64_t)&CA::Render::image_cache_list;
    qword_1ECDC63B8 = (uint64_t)&CA::Render::image_cache_list;
    CGImageNotificationCenter();
    CGNotificationCenterAddCallback();
    v30 = CA::Render::image_cache;
  }
  v31 = x_hash_table_lookup(v30, (uint64_t)this, 0);
  v33 = v31;
  if (v31)
  {
    image_by_rendering = *(char **)(v31 + 24);
    if (image_by_rendering)
    {
      LODWORD(v32) = *((_DWORD *)image_by_rendering + 4);
      v34 = 0;
      v35 = (double)v32 / (double)CGImageGetWidth(this);
      goto LABEL_33;
    }
  }
  else
  {
    image_by_rendering = 0;
  }
  v34 = 1;
  v35 = 1.0;
LABEL_33:
  if (CGImageIsSubimage())
    v36 = 1.0;
  else
    v36 = v35;
  if ((v34 & 1) == 0 && v36 >= a5)
  {
    v37 = *(_DWORD *)(v33 + 40);
    if (((v10 & 1) == 0 || (v37 & 1) != 0)
      && (((unsigned __int16)v37 ^ (unsigned __int16)v10) & 0x442) == 0)
    {
      if (CARequiresColorMatching(*((CGColorSpace **)image_by_rendering + 6), a2, 1))
      {
        if (((unsigned __int16)v10 & 0x1000) == 0 && (*(_DWORD *)(v33 + 40) & 8) != 0)
          goto LABEL_81;
      }
      else if (((unsigned __int16)v10 & 0x1000) == 0)
      {
        goto LABEL_81;
      }
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::image_cache_lock);
  v38 = mach_absolute_time();
  v39 = CATimeWithHostTime(v38);
  v40 = BYTE9(ca_debug_options);
  if (a5 < 1.0)
  {
    if (BYTE9(ca_debug_options))
    {
      v41 = CGImageGetWidth(this);
      v42 = CGImageGetHeight(this);
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v45 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134218496;
          *(_QWORD *)&buf[4] = this;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v41;
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)&buf[24] = v42;
          _os_log_impl(&dword_184457000, v45, OS_LOG_TYPE_DEFAULT, "CoreAnimation: copied CGImageRef %p - image size (%lu x %lu) exceeds max texture size\n", buf, 0x20u);
        }
      }
    }
    v46 = this;
    v47 = a2;
    v48 = (__int16)v10;
    v49 = a5;
    goto LABEL_75;
  }
  if ((v10 & 0x40) != 0 && CGImageGetMask())
  {
    if (v40)
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v53 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134217984;
          *(_QWORD *)&buf[4] = this;
          _os_log_impl(&dword_184457000, v53, OS_LOG_TYPE_DEFAULT, "CoreAnimation: copied CGImageRef %p - mask size\n", buf, 0xCu);
        }
      }
    }
    v46 = this;
    v47 = a2;
    v48 = (__int16)v10;
    v49 = a5;
    goto LABEL_75;
  }
  if (((unsigned __int16)v10 & 0x400) != 0)
  {
    BitmapInfo = CGImageGetBitmapInfo(this);
    v124 = BitmapInfo & 0x1F;
    v125 = (BitmapInfo & 0x7000) == 0x2000 ? 1 : 2;
    if ((v126 = CGImageGetColorSpace(this)) != 0 && CGColorSpaceGetModel(v126) == kCGColorSpaceModelMonochrome
      || v124 == v125)
    {
      v47 = (CGColorSpace *)CAGetColorSpace(0x1Cu);
      v46 = this;
      v48 = (__int16)v10;
      v49 = a5;
LABEL_75:
      goto LABEL_76;
    }
  }
  if ((CA::Render::create_image(CGImage *,CGColorSpace *,unsigned int,double)::initialized & 1) != 0)
  {
    if (!CA::Render::create_image(CGImage *,CGColorSpace *,unsigned int,double)::use_cgtexturedata)
      goto LABEL_127;
  }
  else
  {
    v43 = getenv("CA_USE_CGTEXTUREDATA");
    if (v43)
      v44 = atoi(v43) != 0;
    else
      v44 = 1;
    CA::Render::create_image(CGImage *,CGColorSpace *,unsigned int,double)::use_cgtexturedata = v44;
    CA::Render::create_image(CGImage *,CGColorSpace *,unsigned int,double)::initialized = 1;
    if (!v44)
    {
LABEL_127:
      v86 = (__IOSurface *)CGImageGetProperty();
      if (v86 && (v87 = v86, v88 = CFGetTypeID(v86), v88 == IOSurfaceGetTypeID()))
      {
        if (image_by_rendering)
          goto LABEL_76;
      }
      else
      {
        LOBYTE(image_by_rendering) = 1;
      }
      if (CGImageGetProperty() == *MEMORY[0x1E0C9AE50])
      {
        if (CGImageGetImageProvider())
        {
          Info = CGImageProviderGetInfo();
          if (Info)
          {
            v102 = (objc_object *)Info;
            v103 = (malloc_zone_t *)get_malloc_zone();
            v104 = (CA::Render::MetalTexture *)malloc_type_zone_calloc(v103, 1uLL, 0x70uLL, 0x743898A5uLL);
            image_by_rendering = (char *)v104;
            if (v104)
              CA::Render::MetalTexture::MetalTexture(v104, v102);
            goto LABEL_76;
          }
        }
      }
      v204 = (char)image_by_rendering;
      if ((v10 & 2) != 0)
      {
        v100 = CGImageGetColorSpace(this);
        if (v100)
        {
LABEL_189:
          v128 = CGColorSpaceGetModel(v100);
          if (v128)
          {
            if (v128 != kCGColorSpaceModelRGB)
            {
              if (v40)
              {
                if (x_log_hook_p())
                {
LABEL_215:
                  x_log_();
                  goto LABEL_235;
                }
                v151 = x_log_category_render;
                if (!os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
                  goto LABEL_235;
                *(_DWORD *)buf = 134217984;
                *(_QWORD *)&buf[4] = this;
                v152 = "CoreAnimation: copied CGImageRef %p - non-RGB color model\n";
LABEL_234:
                _os_log_impl(&dword_184457000, v151, OS_LOG_TYPE_DEFAULT, v152, buf, 0xCu);
              }
LABEL_235:
              v146 = this;
              v147 = a2;
              v148 = (__int16)v10;
              v149 = a5;
LABEL_268:
              goto LABEL_269;
            }
            v129 = BYTE9(ca_debug_options);
            if ((v10 & 2) == 0)
            {
              BitsPerPixel = CGImageGetBitsPerPixel(this);
              BitsPerComponent = CGImageGetBitsPerComponent(this);
              v132 = CGImageGetBitmapInfo(this);
              v133 = v132;
              if ((v10 & 0x20) != 0 && BitsPerComponent == 16)
              {
                if (BitsPerPixel == 64 && (v132 & 0x1F) == 1 && (v132 & 0x7000) == 0x1000)
                {
                  v134 = this;
                  v135 = 0;
                  v136 = 13;
LABEL_212:
LABEL_269:
                  image_by_rendering = (char *)image_from_image_data;
                  goto LABEL_270;
                }
                if (v129)
                {
                  if (x_log_hook_p())
                  {
LABEL_258:
                    x_log_();
                    goto LABEL_278;
                  }
                  v157 = x_log_category_render;
                  if (!os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
                    goto LABEL_278;
                  *(_DWORD *)buf = 134218752;
                  *(_QWORD *)&buf[4] = this;
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = BitsPerPixel;
                  *(_WORD *)&buf[18] = 1024;
                  *(_DWORD *)&buf[20] = 16;
                  *(_WORD *)&buf[24] = 1024;
                  *(_DWORD *)&buf[26] = v133;
                  v158 = "CoreAnimation: ignored CGImageRef %p - bad RGB 16-is-half format (%d bpp, %d bpc, %d info)\n";
LABEL_277:
                  _os_log_impl(&dword_184457000, v157, OS_LOG_TYPE_DEFAULT, v158, buf, 0x1Eu);
                  goto LABEL_278;
                }
                goto LABEL_278;
              }
              if (CGImageGetDecode(this) || CGImageGetMask() || CGImageGetMatte() || CGImageGetMaskingColors())
              {
                if (v129)
                {
                  if (x_log_hook_p())
                    goto LABEL_242;
                  v150 = x_log_category_render;
                  if (!os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
                    goto LABEL_264;
                  *(_DWORD *)buf = 134217984;
                  *(_QWORD *)&buf[4] = this;
LABEL_263:
                  _os_log_impl(&dword_184457000, v150, OS_LOG_TYPE_DEFAULT, "CoreAnimation: copied CGImageRef %p - decode or mask\n", buf, 0xCu);
                  goto LABEL_264;
                }
                goto LABEL_264;
              }
              if (BitsPerPixel != 16)
              {
                if (BitsPerPixel != 32)
                {
                  if (BitsPerPixel == 64 && BitsPerComponent == 16)
                  {
                    if ((v133 & 0x701F) == 0x1005)
                    {
                      v166 = (v133 & 0x100) == 0;
                      v167 = 17;
                      v168 = 22;
LABEL_361:
                      if (v166)
                        v136 = v168;
                      else
                        v136 = v167;
                      goto LABEL_364;
                    }
                    if ((v133 & 0x701F) == 0x1001)
                    {
                      v166 = (v133 & 0x100) == 0;
                      v167 = 13;
                      v168 = 21;
                      goto LABEL_361;
                    }
                  }
LABEL_375:
                  if (v129)
                  {
                    if (x_log_hook_p())
                      goto LABEL_377;
                    v182 = x_log_category_render;
                    if (!os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
                      goto LABEL_381;
                    *(_DWORD *)buf = 134218752;
                    *(_QWORD *)&buf[4] = this;
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = BitsPerPixel;
                    *(_WORD *)&buf[18] = 1024;
                    *(_DWORD *)&buf[20] = BitsPerComponent;
                    *(_WORD *)&buf[24] = 1024;
                    *(_DWORD *)&buf[26] = v133;
                    v183 = "CoreAnimation: copied CGImageRef %p - bad RGB image format (%d bpp, %d bpc, %d info)\n";
LABEL_380:
                    _os_log_impl(&dword_184457000, v182, OS_LOG_TYPE_DEFAULT, v183, buf, 0x1Eu);
                    goto LABEL_381;
                  }
                  goto LABEL_381;
                }
                v180 = v133 & 0x1F;
                v181 = v133 & 0x7000;
                if (BitsPerComponent == 10 && v180 == 6 && v181 == 0x2000 && (v133 & 0xF0000) == 0x30000)
                {
                  v136 = 31;
                }
                else
                {
                  if (BitsPerComponent != 8)
                    goto LABEL_375;
                  switch(v180)
                  {
                    case 2:
                      v184 = 0;
                      v185 = 0;
                      v186 = 0;
                      v136 = 0;
                      break;
                    case 6:
                      v185 = 0;
                      v186 = 0;
                      v136 = 2;
                      v184 = 1;
                      break;
                    case 5:
                      v184 = 0;
                      v185 = 0;
                      v136 = 12;
                      v186 = 1;
                      break;
                    case 1:
                      v184 = 0;
                      v186 = 0;
                      v136 = 11;
                      v185 = 1;
                      break;
                    default:
                      goto LABEL_375;
                  }
                  if (v181 == 0x2000)
                  {
                    v110 = v180 == 2;
                    v187 = v184 ^ 1;
                    if (v110)
                      v187 = 0;
                    if ((v187 & 1) != 0)
                    {
                      if (v185)
                        v136 = 15;
                      else
                        v136 = 16;
                      if (((v185 | v186) & 1) != 0)
                        goto LABEL_364;
                      goto LABEL_375;
                    }
                    v136 = (v136 + 1);
                  }
                }
LABEL_364:
                v134 = this;
                v135 = a2;
                goto LABEL_212;
              }
              if (BitsPerComponent != 5 || (v133 & 0x1F) != 6)
                goto LABEL_375;
              v164 = (v133 & 0x7000) == 4096;
              v165 = 4;
LABEL_326:
              if (v164)
                v136 = v165 + 1;
              else
                v136 = v165;
              goto LABEL_364;
            }
            if (!BYTE9(ca_debug_options))
            {
LABEL_255:
              v146 = this;
              v147 = 0;
              v148 = (__int16)v10;
              v149 = a5;
              goto LABEL_268;
            }
            if (x_log_hook_p())
            {
LABEL_221:
              x_log_();
              goto LABEL_255;
            }
            v153 = x_log_category_render;
            if (!os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              goto LABEL_255;
            *(_DWORD *)buf = 134217984;
            *(_QWORD *)&buf[4] = this;
            v154 = "CoreAnimation: copied CGImageRef %p - RGB mask (bug!)\n";
            v155 = v153;
            v156 = 12;
LABEL_254:
            _os_log_impl(&dword_184457000, v155, OS_LOG_TYPE_DEFAULT, v154, buf, v156);
            goto LABEL_255;
          }
          v139 = BYTE9(ca_debug_options);
          v140 = CGImageGetBitsPerPixel(this);
          v141 = CGImageGetBitsPerComponent(this);
          v142 = CGImageGetBitmapInfo(this);
          v143 = v142;
          if ((v10 & 0x20) == 0 || v141 != 16)
          {
            if (CGImageGetDecode(this) || CGImageGetMask() || CGImageGetMatte() || CGImageGetMaskingColors())
            {
              if (v139)
              {
                if (x_log_hook_p())
                {
LABEL_242:
                  x_log_();
                  goto LABEL_264;
                }
                v150 = x_log_category_render;
                if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 134217984;
                  *(_QWORD *)&buf[4] = this;
                  goto LABEL_263;
                }
              }
LABEL_264:
              v146 = this;
              v147 = a2;
              v148 = (__int16)v10;
              v149 = a5;
              goto LABEL_268;
            }
            if (v140 == 32)
            {
              if ((v10 & 2) == 0 && v141 == 16 && (v143 & 0x1F) == 1 && (v143 & 0x7000) == 0x1000)
              {
                if ((v143 & 0x100) != 0)
                  v136 = 28;
                else
                  v136 = 27;
                goto LABEL_364;
              }
            }
            else if (v140 == 16)
            {
              if (v141 == 8)
              {
                v169 = v143 & 0x1F;
                v170 = v143 & 0x7000;
                if ((v10 & 2) == 0 && v169 == 1 && v170 != 4096)
                {
                  v136 = 18;
                  goto LABEL_364;
                }
                if ((v10 & 2) == 0 && v169 == 5 && v170 != 4096)
                {
                  v136 = 19;
                  goto LABEL_364;
                }
              }
            }
            else if (v140 == 8 && v141 == 8 && (v143 & 0x1F) == 0)
            {
              v164 = (v10 & 2) == 0;
              v165 = 9;
              goto LABEL_326;
            }
            if (v139)
            {
              if (x_log_hook_p())
              {
LABEL_377:
                x_log_();
                goto LABEL_381;
              }
              v182 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 134218752;
                *(_QWORD *)&buf[4] = this;
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v140;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v141;
                *(_WORD *)&buf[24] = 1024;
                *(_DWORD *)&buf[26] = v143;
                v183 = "CoreAnimation: copied CGImageRef %p - bad grayscale image format (%d bpp, %d bpc, %d info)\n";
                goto LABEL_380;
              }
            }
LABEL_381:
            v146 = this;
            v147 = a2;
            v148 = (__int16)v10;
            v149 = a5;
            goto LABEL_268;
          }
          if (v140 != 16 || (v142 & 0x7000) != 0x1000)
          {
            if (v139)
            {
              if (x_log_hook_p())
                goto LABEL_258;
              v157 = x_log_category_render;
              if (!os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
                goto LABEL_278;
              *(_DWORD *)buf = 134218752;
              *(_QWORD *)&buf[4] = this;
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v140;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = 16;
              *(_WORD *)&buf[24] = 1024;
              *(_DWORD *)&buf[26] = v143;
              v158 = "CoreAnimation: ignored CGImageRef %p - bad grayscale 16-is-half format (%d bpp, %d bpc, %d info)\n";
              goto LABEL_277;
            }
LABEL_278:
            image_by_rendering = 0;
            goto LABEL_76;
          }
          if ((v10 & 2) != 0)
            v136 = 23;
          else
            v136 = 25;
          goto LABEL_211;
        }
LABEL_198:
        v137 = BYTE9(ca_debug_options);
        Decode = CGImageGetDecode(this);
        if (!Decode || *Decode != 1.0 || Decode[1] != 0.0)
        {
          if (v137)
          {
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              v145 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 134217984;
                *(_QWORD *)&buf[4] = this;
                _os_log_impl(&dword_184457000, v145, OS_LOG_TYPE_DEFAULT, "CoreAnimation: copied CGImageRef %p - bad decode array\n", buf, 0xCu);
              }
            }
          }
          v146 = this;
          v147 = 0;
          v148 = (__int16)v10;
          v149 = a5;
          goto LABEL_268;
        }
        if (CGImageGetMask() || CGImageGetMatte() || CGImageGetMaskingColors())
        {
          if (v137)
          {
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              v159 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 134217984;
                *(_QWORD *)&buf[4] = this;
                _os_log_impl(&dword_184457000, v159, OS_LOG_TYPE_DEFAULT, "CoreAnimation: copied CGImageRef %p - bad mask\n", buf, 0xCu);
              }
            }
          }
          v146 = this;
          v147 = 0;
          v148 = (__int16)v10;
          v149 = a5;
          goto LABEL_268;
        }
        v161 = CGImageGetBitsPerPixel(this);
        v162 = CGImageGetBitsPerComponent(this);
        v163 = v162;
        if (v161 != 8 || v162 != 8)
        {
          if (!v137)
            goto LABEL_255;
          if (x_log_hook_p())
            goto LABEL_221;
          v179 = x_log_category_render;
          if (!os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
            goto LABEL_255;
          *(_DWORD *)buf = 134218496;
          *(_QWORD *)&buf[4] = this;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v161;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v163;
          v154 = "CoreAnimation: copied CGImageRef %p - bad mask image format (%d bpp, %d bpc)\n";
          v155 = v179;
          v156 = 24;
          goto LABEL_254;
        }
        if (CGImageIsMask(this) | ((v10 & 2) >> 1))
          v136 = 9;
        else
          v136 = 8;
LABEL_211:
        v134 = this;
        v135 = 0;
        goto LABEL_212;
      }
      ImageProvider = CGImageGetImageProvider();
      if (!ImageProvider)
        goto LABEL_184;
      v92 = ImageProvider;
      v93 = (CA::Render *)CGImageGetWidth(this);
      v94 = CGImageGetHeight(this);
      if (CA::Render::iosurface_size_supported(v93, v94))
      {
        v95 = (__IOSurface *)CGImageProviderCopyIOSurface();
        if (v95)
        {
          v96 = v95;
          PixelFormat = (CA::Render *)IOSurfaceGetPixelFormat(v95);
          if (!CA::Render::fourcc_has_alpha(PixelFormat))
            goto LABEL_147;
          v212 = 0;
          v210 = 0u;
          v211 = 0u;
          v208 = 0u;
          v209 = 0u;
          v207 = 0u;
          memset(buf, 0, sizeof(buf));
          v205 = (CA::Render *)116;
          if (IOSurfaceGetBulkAttachments())
            goto LABEL_147;
          if (BYTE4(v211) == 1)
          {
            CFRelease(v96);
          }
          else
          {
LABEL_147:
            CFRelease(v96);
            if (image_by_rendering)
              goto LABEL_270;
          }
        }
      }
      v105 = CGImageGetColorSpace(this);
      if (!v105)
        goto LABEL_184;
      v106 = v105;
      if (CGColorSpaceGetModel(v105) != kCGColorSpaceModelRGB)
      {
        if (CGColorSpaceGetModel(v106))
          goto LABEL_184;
      }
      if (CGImageGetDecode(this) || CGImageGetMask() || CGImageGetMatte() || CGImageGetMaskingColors())
        goto LABEL_184;
      v107 = CGColorSpaceGetModel(v106);
      ComponentType = CGImageProviderGetComponentType();
      v109 = ComponentType > 1;
      v195 = v107;
      v110 = v107 == kCGColorSpaceModelMonochrome;
      v111 = ComponentType;
      v112 = v110;
      v199 = v112;
      if (v110)
        v109 = 1;
      cf = v109;
      AlphaInfo = CGImageProviderGetAlphaInfo();
      v197 = v111;
      v114 = v111;
      v115 = AlphaInfo;
      v117 = v116 == -1 || v116 == 14;
      v118 = !v117;
      if (cf && v116 != -1 && v116 != 14 && v115 <= 4 && ((1 << v115) & 0x19) != 0
        || v197 - 3 < 2
            v119 = (double)CGImageGetWidth(this),
            v120 = (double)CGImageGetHeight(this),
            v121 = CGImageProviderCopyImageBlockSetWithOptions(),
            CFRelease(cfb),
            !v121))
      {
LABEL_184:
        v127 = CGImageGetColorSpace(this);
        if (v127)
        {
          v100 = v127;
          if (CARequiresColorMatching(v127, a2, 1))
          {
            if (v40)
            {
              if (x_log_hook_p())
                goto LABEL_215;
              v151 = x_log_category_render;
              if (!os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
                goto LABEL_235;
              *(_DWORD *)buf = 134217984;
              *(_QWORD *)&buf[4] = this;
              v152 = "CoreAnimation: copied CGImageRef %p - needs color matching\n";
              goto LABEL_234;
            }
            goto LABEL_235;
          }
          goto LABEL_189;
        }
        goto LABEL_198;
      }
      cfa = (void (*)(const void *, void *))v121;
      CGImageBlockSetGetRect();
      v215.origin.x = 0.0;
      v215.origin.y = 0.0;
      v215.size.width = v119;
      v215.size.height = v120;
      v122 = CGRectEqualToRect(v214, v215);
      if ((v10 & 0x10) != 0 || v122)
      {
        if (CGImageBlockSetGetCount() != 1)
        {
          {
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              v189 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_184457000, v189, OS_LOG_TYPE_DEFAULT, "CoreAnimation: warning, CGImageProvider returned multiple blocks\n", buf, 2u);
              }
            }
          }
          goto LABEL_174;
        }
        if (CGImageBlockSetGetImageBlock())
        {
          CGImageBlockGetRect();
          v172 = v171;
          v174 = v173;
          if ((_DWORD)v175 != -1)
          {
            v176 = (CA::Render *)v175;
            v196 = v172;
            v198 = v174;
            Data = CGImageBlockGetData();
            BytesPerRow = CGImageBlockGetBytesPerRow();
            v205 = (CA::Render *)BytesPerRow;
            if ((v10 & 1) != 0)
            {
              if (!BYTE9(ca_debug_options))
                goto LABEL_394;
              if (x_log_hook_p())
                goto LABEL_404;
              log = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 134217984;
                *(_QWORD *)&buf[4] = this;
                _os_log_impl(&dword_184457000, log, OS_LOG_TYPE_DEFAULT, "CoreAnimation: copied CGImageRef %p - mipmap generation\n", buf, 0xCu);
              }
              goto LABEL_394;
            }
            if (qword_1ECDC4CD0)
            {
              if ((qword_1ECDC4CD0 & (qword_1ECDC4CD0 - 1)) != 0
                 ? Data % qword_1ECDC4CD0
                 : (qword_1ECDC4CD0 - 1) & Data)
              {
                if (!BYTE9(ca_debug_options))
                  goto LABEL_394;
                if (x_log_hook_p())
                {
LABEL_404:
                  x_log_();
                  goto LABEL_394;
                }
                loga = x_log_category_render;
                if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 134217984;
                  *(_QWORD *)&buf[4] = this;
                  _os_log_impl(&dword_184457000, loga, OS_LOG_TYPE_DEFAULT, "CoreAnimation: copied CGImageRef %p - bad image alignment\n", buf, 0xCu);
                }
LABEL_394:
                CGImageBlockSetRelease();
                if (!image_by_rendering)
                  goto LABEL_184;
LABEL_270:
                v160 = v204;
                if (!image_by_rendering)
                  v160 = 1;
                if ((v160 & 1) == 0)
                {
                  v52 = *((_DWORD *)image_by_rendering + 3) | 0x800000;
LABEL_274:
                  *((_DWORD *)image_by_rendering + 3) = v52;
                }
                goto LABEL_76;
              }
            }
            if (qword_1ECDC4CD8)
            {
              if ((qword_1ECDC4CD8 & (qword_1ECDC4CD8 - 1)) != 0
                 ? BytesPerRow % qword_1ECDC4CD8
                 : (qword_1ECDC4CD8 - 1) & BytesPerRow)
              {
                if (!BYTE9(ca_debug_options))
                  goto LABEL_394;
                if (x_log_hook_p())
                  goto LABEL_404;
                logb = x_log_category_render;
                if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 134217984;
                  *(_QWORD *)&buf[4] = this;
                  _os_log_impl(&dword_184457000, logb, OS_LOG_TYPE_DEFAULT, "CoreAnimation: copied CGImageRef %p - bad row alignment\n", buf, 0xCu);
                }
                goto LABEL_394;
              }
            }
            if (image_by_rendering)
              goto LABEL_270;
          }
        }
      }
LABEL_174:
      CGImageBlockSetRelease();
      goto LABEL_184;
    }
  }
  if (!CGImageGetImageProvider())
    goto LABEL_127;
  v50 = CGImageProviderCopyImageTextureData();
  if (!v50)
    goto LABEL_127;
  image_by_rendering = (char *)CA::Render::CompressedImage::new_image_with_texture_data(v50);
  CGImageTextureDataRelease();
  if (!image_by_rendering)
    goto LABEL_127;
  v51 = CGImageProviderGetAlphaInfo();
  switch(v51)
  {
    case 0:
    case 5:
      *((_DWORD *)image_by_rendering + 42) = 0;
      v52 = *((_DWORD *)image_by_rendering + 3) | 0x1000;
      goto LABEL_274;
    case 1:
      v80 = 1;
      break;
    case 3:
      v80 = 2;
      break;
    default:
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v82 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v51;
          _os_log_impl(&dword_184457000, v82, OS_LOG_TYPE_DEBUG, "Unsupported CGImageAlpha '%d' for compressed texture", buf, 8u);
        }
      }
      v83 = (unsigned int *)(image_by_rendering + 8);
      do
      {
        v84 = __ldaxr(v83);
        v85 = v84 - 1;
      }
      while (__stlxr(v85, v83));
      if (!v85)
        (*(void (**)(char *))(*(_QWORD *)image_by_rendering + 16))(image_by_rendering);
      goto LABEL_127;
  }
  *((_DWORD *)image_by_rendering + 42) = v80;
LABEL_76:
  v54 = mach_absolute_time();
  v55 = CATimeWithHostTime(v54) - v39;
  if (a4 <= 0.0)
    v55 = -0.0;
  if (!image_by_rendering)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::image_cache_lock);
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::image_cache_lock);
    return image_by_rendering;
  }
  a4 = v55 + a4;
  *(_DWORD *)buf = 0;
  CGImageGetHeadroom();
  *((_DWORD *)image_by_rendering + 14) = *(_DWORD *)buf;
  os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::image_cache_lock);
  if (!(*(unsigned int (**)(char *))(*(_QWORD *)image_by_rendering + 224))(image_by_rendering)
    || ((unsigned __int16)v10 & 0x1000) != 0)
  {
LABEL_81:
    v56 = 0;
    if ((v10 & 4) == 0)
      goto LABEL_82;
LABEL_93:
    if (v33)
    {
      v65 = *(double *)(v33 + 32);
      if (v65 >= 0.0 && a4 > v65)
      {
        if (v65 > 0.0)
        {
          v67 = *(_QWORD *)v33;
          v66 = *(_QWORD **)(v33 + 8);
          *(_QWORD *)(v67 + 8) = v66;
          *v66 = v67;
          *(_QWORD *)v33 = v33;
          *(_QWORD *)(v33 + 8) = v33;
        }
        *(double *)(v33 + 32) = a4;
        v68 = &CA::Render::image_cache_list;
        while (1)
        {
          v68 = (uint64_t *)*v68;
          if (v68 == &CA::Render::image_cache_list)
            break;
          if (*((double *)v68 + 4) <= a4)
          {
            v69 = (_QWORD *)v68[1];
            v70 = *(_QWORD *)v33;
            v68[1] = v33;
            *(_QWORD *)v33 = v68;
            *v69 = v70;
            *(_QWORD *)(v70 + 8) = v69;
            goto LABEL_103;
          }
        }
        v71 = (_QWORD *)qword_1ECDC63B8;
        v72 = *(_QWORD *)v33;
        qword_1ECDC63B8 = v33;
        *(_QWORD *)v33 = &CA::Render::image_cache_list;
        *v71 = v72;
        *(_QWORD *)(v72 + 8) = v71;
      }
    }
    goto LABEL_103;
  }
  v59 = x_hash_table_lookup(CA::Render::image_cache, (uint64_t)this, 0);
  if (v59)
  {
    v33 = v59;
    v56 = *(unsigned int **)(v59 + 24);
  }
  else
  {
    v60 = (malloc_zone_t *)get_malloc_zone();
    v61 = malloc_type_zone_malloc(v60, 0x30uLL, 0x8BB15036uLL);
    v33 = (uint64_t)v61;
    if (v61)
    {
      v61[3] = 0;
      v61[4] = 0;
      v61[1] = v61;
      v61[2] = this;
      *v61 = v61;
      v62 = (int *)CA::Render::image_cache;
      v63 = this;
      v64 = v33;
    }
    else
    {
      v62 = (int *)CA::Render::image_cache;
      v63 = this;
      v64 = 0;
    }
    hash_table_modify(v62, (uint64_t)v63, v64, 0);
    v56 = 0;
  }
  *(_QWORD *)(v33 + 24) = image_by_rendering;
  *(_DWORD *)(v33 + 40) = (_DWORD)v10;
  if ((v10 & 4) != 0)
    goto LABEL_93;
LABEL_82:
  if (v33 && *(double *)(v33 + 32) >= 0.0)
  {
    v58 = *(_QWORD *)v33;
    v57 = *(_QWORD **)(v33 + 8);
    *(_QWORD *)(v58 + 8) = v57;
    *v57 = v58;
    *(_QWORD *)v33 = v33;
    *(_QWORD *)(v33 + 8) = v33;
    *(_QWORD *)(v33 + 32) = 0xBFF0000000000000;
  }
LABEL_103:
  v73 = (*(uint64_t (**)(char *))(*(_QWORD *)image_by_rendering + 224))(image_by_rendering);
  if (((unsigned __int16)v10 & 0x1000) == 0)
  {
    if (v73)
    {
      v74 = (unsigned int *)(image_by_rendering + 8);
      do
        v75 = __ldaxr(v74);
      while (__stlxr(v75 + 1, v74));
      if (!v75)
      {
        do
          v81 = __ldaxr(v74);
        while (__stlxr(v81 - 1, v74));
      }
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::image_cache_lock);
  if (v56)
  {
    v76 = v56 + 2;
    do
    {
      v77 = __ldaxr(v76);
      v78 = v77 - 1;
    }
    while (__stlxr(v78, v76));
    if (!v78)
      (*(void (**)(unsigned int *))(*(_QWORD *)v56 + 16))(v56);
  }
  return image_by_rendering;
}

_DWORD *CA::ColorProgram::Cache::lookup(uint64_t a1, CGColorSpace *a2, int a3, uint64_t a4)
{
  _BOOL4 v8;
  int v9;
  char v10;
  CGColorRenderingIntent v11;
  _BOOL4 v12;
  _DWORD *result;
  int v14;
  int v15;
  unsigned int v16;

  if (*(_BYTE *)(a1 + 64))
    v8 = 1;
  else
    v8 = *(_BYTE *)(a1 + 65) != 0;
  v9 = *(_DWORD *)(a1 + 68);
  v10 = CARequiresColorMatching(a2, *(CGColorSpace **)a1, 0);
  v12 = v9 == 2 && v8;
  if ((v10 & 1) == 0 && !v12)
    return 0;
  if (*(_BYTE *)(a1 + 60))
    v14 = a3 | 2;
  else
    v14 = a3;
  v15 = v14 | 0x80;
  if (*(_BYTE *)(a1 + 66))
    v15 = v14;
  if (*(_BYTE *)(a1 + 61))
    v14 = v15;
  if (*(_BYTE *)(a1 + 62))
    v14 |= 8u;
  if (*(_BYTE *)(a1 + 64))
    v14 |= 0x10u;
  if (*(_BYTE *)(a1 + 65))
    v14 |= 0x20u;
  if (*(_BYTE *)(a1 + 66))
    v14 |= 0x40u;
  if (!byte_1ECDC6B0B)
    v14 |= 0x100u;
  if (!byte_1ECDC6B0C)
    v14 |= 0x200u;
  if (*(_BYTE *)(a1 + 67))
    v16 = v14 | 0x400;
  else
    v16 = v14;
  if (!(*(unsigned __int8 *)(a1 + 63) | BYTE6(xmmword_1ECDC6AB0)) && (!a4 || !*(_BYTE *)(a4 + 52))
    || BYTE5(xmmword_1ECDC6AB0))
  {
    v16 |= 4u;
  }
  result = CA::ColorProgram::Cache::lookup_((CA::ColorProgram::Cache *)a1, a2, v16, v11);
  if (result)
  {
    if (!result[9])
      return 0;
  }
  return result;
}

uint64_t CARequiresColorMatching(CGColorSpace *a1, CGColorSpace *a2, int a3)
{
  uint64_t result;

  result = 0;
  if (a2 && a1 && a1 != a2)
  {
    if ((CGColorSpaceIsUncalibrated() & 1) != 0
      || ((CGColorSpace *)CAGetColorSpace(3u) == a1 || CGColorSpaceEqualToColorSpaceIgnoringRange())
      && ((CGColorSpace *)CAGetColorSpace(0x1Du) == a2
       || (CGColorSpaceEqualToColorSpaceIgnoringRange() & 1) != 0
       || CGColorSpaceGetModel(a2) == kCGColorSpaceModelRGB
       && CGColorSpaceGetRenderingIntent() != 1
       && (colorspace_has_srgb_gamma(a2) & 1) != 0))
    {
      return 0;
    }
    if (CARequiresColorMatching::once != -1)
      dispatch_once(&CARequiresColorMatching::once, &__block_literal_global_18874);
    if (CARequiresColorMatching::compat_mode
      && (CGColorSpaceGetType() < 2 || CGColorSpaceGetType() < 2)
      || a3 && CGColorSpaceGetModel(a1) < kCGColorSpaceModelCMYK)
    {
      return 0;
    }
    else
    {
      return CGColorSpaceEqualToColorSpaceIgnoringRange() ^ 1;
    }
  }
  return result;
}

uint64_t CACGColorSpaceIsRec601NTSC(uint64_t a1)
{
  if (CAGetColorSpace(0x16u) == a1)
    return 1;
  else
    return CGColorSpaceEqualToColorSpaceIgnoringRange();
}

uint64_t CACGColorSpaceIsRec709(uint64_t a1)
{
  if (CAGetColorSpace(0x14u) == a1
    || (CGColorSpaceEqualToColorSpaceIgnoringRange() & 1) != 0
    || CAGetColorSpace(0x15u) == a1
    || (CGColorSpaceEqualToColorSpaceIgnoringRange() & 1) != 0
    || CAGetColorSpace(0x11u) == a1)
  {
    return 1;
  }
  else
  {
    return CGColorSpaceEqualToColorSpaceIgnoringRange();
  }
}

uint64_t CAGetColorSpace(unsigned int a1)
{
  uint64_t result;
  uint64_t v3;
  CFStringRef *v4;
  uint64_t v5;
  __int128 *v6;
  uint64_t v7;
  CGFloat v8;
  uint64_t *v9;
  uint64_t v10;
  CGFloat *v11;
  uint64_t v12;
  uint64_t v13;
  CGFloat v14;
  __int128 v15;
  __int128 v16;
  CGColorSpaceRef Linearized;
  CGColorSpace *v18;
  uint64_t v19;
  CGFloat v20;
  const __CFDictionary *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  CGFloat gamma[2];
  uint64_t v28;
  CGFloat blackPoint;
  uint64_t v30;
  uint64_t v31;
  CGFloat whitePoint[2];
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (a1 > 0x1F)
    return 0;
  result = colorspaces[a1];
  if (!result)
  {
    v3 = a1;
    switch(a1)
    {
      case 0u:
        return colorspaces[v3];
      case 1u:
        v4 = (CFStringRef *)MEMORY[0x1E0C9DA18];
        goto LABEL_38;
      case 2u:
        v4 = (CFStringRef *)MEMORY[0x1E0C9DA20];
        goto LABEL_38;
      case 3u:
        v4 = (CFStringRef *)MEMORY[0x1E0C9D978];
        goto LABEL_38;
      case 4u:
        v4 = (CFStringRef *)MEMORY[0x1E0C9D968];
        goto LABEL_38;
      case 5u:
        v4 = (CFStringRef *)MEMORY[0x1E0C9D908];
        goto LABEL_38;
      case 6u:
        v4 = (CFStringRef *)MEMORY[0x1E0C9D910];
        goto LABEL_38;
      case 7u:
        v4 = (CFStringRef *)MEMORY[0x1E0C9D918];
        goto LABEL_38;
      case 8u:
        v4 = (CFStringRef *)MEMORY[0x1E0C9D900];
        goto LABEL_38;
      case 9u:
        v4 = (CFStringRef *)MEMORY[0x1E0C9D9A0];
        goto LABEL_38;
      case 0xAu:
        v4 = (CFStringRef *)MEMORY[0x1E0C9D9F8];
        goto LABEL_38;
      case 0xBu:
        v5 = 9;
        goto LABEL_34;
      case 0xCu:
        v4 = (CFStringRef *)MEMORY[0x1E0C9D9C0];
        goto LABEL_38;
      case 0xDu:
        v4 = (CFStringRef *)MEMORY[0x1E0C9D9C8];
        goto LABEL_38;
      case 0xEu:
        v4 = (CFStringRef *)MEMORY[0x1E0C9D9B8];
        goto LABEL_38;
      case 0xFu:
        v4 = (CFStringRef *)MEMORY[0x1E0C9D9E8];
        goto LABEL_38;
      case 0x10u:
        v5 = 5;
        goto LABEL_34;
      case 0x11u:
        v4 = (CFStringRef *)MEMORY[0x1E0C9D9D0];
        goto LABEL_38;
      case 0x12u:
        v4 = (CFStringRef *)MEMORY[0x1E0C9D9E0];
        goto LABEL_38;
      case 0x13u:
        *(_OWORD *)whitePoint = xmmword_18475F720;
        v33 = 0x3FEA6594AF4F0D84;
        blackPoint = 0.0;
        v30 = 0;
        v31 = 0;
        *(_OWORD *)gamma = xmmword_18475F738;
        v28 = 0x4003333333333333;
        v6 = &xmmword_18475F690;
        goto LABEL_31;
      case 0x14u:
        v7 = *MEMORY[0x1E0CA8E98];
        *(_QWORD *)&v22 = *MEMORY[0x1E0CA8D68];
        *((_QWORD *)&v22 + 1) = v7;
        *(_QWORD *)&v23 = *MEMORY[0x1E0CA8EE8];
        v8 = *MEMORY[0x1E0CA8EB0];
        whitePoint[0] = *(CGFloat *)MEMORY[0x1E0CA8D88];
        whitePoint[1] = v8;
        v9 = (uint64_t *)MEMORY[0x1E0CA8F18];
        goto LABEL_43;
      case 0x15u:
        v10 = *MEMORY[0x1E0CA8E98];
        *(_QWORD *)&v22 = *MEMORY[0x1E0CA8D68];
        *((_QWORD *)&v22 + 1) = v10;
        *(_QWORD *)&v23 = *MEMORY[0x1E0CA8EE8];
        v11 = (CGFloat *)MEMORY[0x1E0CA8D88];
        goto LABEL_28;
      case 0x16u:
        v12 = *MEMORY[0x1E0CA8E98];
        *(_QWORD *)&v22 = *MEMORY[0x1E0CA8D68];
        *((_QWORD *)&v22 + 1) = v12;
        *(_QWORD *)&v23 = *MEMORY[0x1E0CA8EE8];
        v11 = (CGFloat *)MEMORY[0x1E0CA8DA0];
        goto LABEL_28;
      case 0x17u:
        v13 = *MEMORY[0x1E0CA8E98];
        *(_QWORD *)&v22 = *MEMORY[0x1E0CA8D68];
        *((_QWORD *)&v22 + 1) = v13;
        *(_QWORD *)&v23 = *MEMORY[0x1E0CA8EE8];
        v11 = (CGFloat *)MEMORY[0x1E0CA8D78];
LABEL_28:
        v14 = *MEMORY[0x1E0CA8EB0];
        whitePoint[0] = *v11;
        whitePoint[1] = v14;
        v9 = (uint64_t *)MEMORY[0x1E0CA8F10];
        goto LABEL_43;
      case 0x18u:
        *(_OWORD *)whitePoint = xmmword_18475F720;
        v33 = 0x3FEA6594AF4F0D84;
        blackPoint = 0.0;
        v30 = 0;
        v31 = 0;
        *(_OWORD *)gamma = xmmword_18475F738;
        v28 = 0x4003333333333333;
        v6 = &xmmword_18475F6D8;
        goto LABEL_31;
      case 0x19u:
        *(_OWORD *)whitePoint = xmmword_18475F720;
        v33 = 0x3FEA6594AF4F0D84;
        blackPoint = 0.0;
        v30 = 0;
        v31 = 0;
        *(_OWORD *)gamma = xmmword_18475F738;
        v28 = 0x4003333333333333;
        v6 = &xmmword_18475F750;
LABEL_31:
        v15 = v6[3];
        v24 = v6[2];
        v25 = v15;
        v26 = *((_QWORD *)v6 + 8);
        v16 = v6[1];
        v22 = *v6;
        v23 = v16;
        Linearized = CGColorSpaceCreateCalibratedRGB(whitePoint, &blackPoint, gamma, (const CGFloat *)&v22);
        goto LABEL_39;
      case 0x1Au:
        v4 = (CFStringRef *)MEMORY[0x1E0C9D958];
        goto LABEL_38;
      case 0x1Bu:
        v5 = 29;
LABEL_34:
        v18 = (CGColorSpace *)CAGetColorSpace(v5);
        Linearized = CGColorSpaceCreateLinearized(v18);
        goto LABEL_39;
      case 0x1Cu:
        v4 = (CFStringRef *)MEMORY[0x1E0C9D960];
        goto LABEL_38;
      case 0x1Du:
        v4 = (CFStringRef *)MEMORY[0x1E0C9DA10];
        goto LABEL_38;
      case 0x1Eu:
        v4 = (CFStringRef *)MEMORY[0x1E0C9D998];
LABEL_38:
        Linearized = CGColorSpaceCreateWithName(*v4);
LABEL_39:
        colorspaces[v3] = Linearized;
        break;
      case 0x1Fu:
        v19 = *MEMORY[0x1E0CA8E98];
        *(_QWORD *)&v22 = *MEMORY[0x1E0CA8D68];
        *((_QWORD *)&v22 + 1) = v19;
        *(_QWORD *)&v23 = *MEMORY[0x1E0CA8EE8];
        v20 = *MEMORY[0x1E0CA8EE0];
        whitePoint[0] = *(CGFloat *)MEMORY[0x1E0CA8D80];
        whitePoint[1] = v20;
        v9 = (uint64_t *)MEMORY[0x1E0CA8F00];
LABEL_43:
        v33 = *v9;
        v21 = CFDictionaryCreate(0, (const void **)&v22, (const void **)whitePoint, 3, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        colorspaces[v3] = CVImageBufferCreateColorSpaceFromAttachments(v21);
        if (v21)
          CFRelease(v21);
        break;
      default:
        __assert_rtn("CAGetColorSpace", "CACGUtil.cpp", 1400, "false");
    }
    return colorspaces[v3];
  }
  return result;
}

_DWORD *CA::ColorProgram::Cache::lookup_(CA::ColorProgram::Cache *this, CGColorSpace *a2, unsigned int a3, CGColorRenderingIntent a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  CGColorSpace *v7;
  CGColorSpace *v8;
  uint64_t v9;
  _BOOL4 IsHLGBased;
  _BOOL4 IsPQBased;
  _BOOL4 v12;
  _BOOL4 v13;
  int v14;
  int v15;
  int v16;
  size_t NumberOfComponents;
  int v18;
  float v19;
  float v20;
  BOOL v21;
  float v22;
  int v23;
  float v24;
  int v25;
  float v26;
  _BYTE *v27;
  _QWORD *v28;
  _DWORD *v29;
  CGColorSpace *v30;
  _BOOL4 v31;
  unsigned int v32;
  int v33;
  double v34;
  float v35;
  float v36;
  float v37;
  __CFDictionary *MutableCopy;
  CFNumberRef v39;
  CFNumberRef v40;
  CFNumberRef v41;
  uint64_t v42;
  CFDictionaryRef v43;
  _BOOL4 v44;
  __CFDictionary *Mutable;
  CFNumberRef v46;
  CA::ColorProgram::Program *v47;
  CA::ColorProgram::Program *v48;
  CGColorSpaceModel Model;
  int v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  int v54;
  NSObject *v55;
  const __CFString *v56;
  uint64_t v57;
  const __CFString *v58;
  NSObject *v59;
  const char *v60;
  _BOOL4 v61;
  _BOOL4 v62;
  const __CFString *v63;
  _BYTE *v64;
  NSObject *v65;
  const char *CString;
  int v67;
  int v68;
  const __CFString *v70;
  const __CFString *v71;
  _BOOL4 v72;
  _BOOL4 v73;
  uint64_t v74;
  const char *v75;
  const char *v76;
  _BOOL4 v77;
  unsigned int v78;
  double v79;
  double v80;
  const char *v81;
  NSObject *v82;
  uint32_t v83;
  uint64_t v84;
  const char *v85;
  const char *v86;
  NSObject *v87;
  const char *v88;
  int v89;
  int v90;
  _BOOL4 v91;
  const char *v92;
  CGColorSpaceRef cf;
  int v94;
  CGColorSpace *space;
  char v96;
  _BYTE v97[7];
  CFDictionaryRef theDict;
  uint8_t buf[4];
  const char *v100;
  __int16 v101;
  const char *v102;
  __int16 v103;
  _BOOL4 v104;
  __int16 v105;
  _BOOL4 v106;
  __int16 v107;
  int v108;
  __int16 v109;
  double v110;
  __int16 v111;
  double v112;
  __int16 v113;
  int v114;
  void *values[4];
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 valuePtr;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;

  v4 = MEMORY[0x1E0C80A78](this);
  v6 = v5;
  v8 = v7;
  v9 = v4;
  v130 = *MEMORY[0x1E0C80C00];
  space = *(CGColorSpace **)(v4 + 8);
  if (CGColorSpaceGetModel(v7) == kCGColorSpaceModelCMYK)
    v8 = (CGColorSpace *)CAGetReconciledColorSpace((uint64_t)v8);
  theDict = 0;
  IsHLGBased = CGColorSpaceIsHLGBased(v8);
  v97[4] = IsHLGBased;
  IsPQBased = CGColorSpaceIsPQBased(v8);
  v97[5] = IsPQBased;
  v12 = CGColorSpaceUsesExtendedRange(v8);
  v13 = v12;
  v97[6] = v12;
  v97[0] = (v6 & 0x30) != 0;
  v94 = v6 & 0x30;
  v97[1] = v94 == 16;
  v14 = (v6 & 0x200) != 0 && (IsHLGBased || IsPQBased || v12);
  v97[2] = v14;
  if ((v6 & 0x100) != 0)
    v15 = CGColorSpaceContainsFlexGTCInfo();
  else
    v15 = 0;
  v97[3] = v15;
  v16 = !IsPQBased;
  v90 = v15;
  v91 = (IsHLGBased || (v16 & 1) == 0) && *(_DWORD *)(v9 + 68) == 2;
  if (((v14 ^ 1) & 1) != 0)
  {
    cf = 0;
  }
  else
  {
    cf = CGColorSpaceCreateExtended(space);
    space = cf;
  }
  NumberOfComponents = CGColorSpaceGetNumberOfComponents(v8);
  if (NumberOfComponents == 4)
  {
    if (*(_DWORD *)(v9 + 40) == 5)
      goto LABEL_26;
    v18 = 5;
    goto LABEL_25;
  }
  if (NumberOfComponents == 3)
  {
    if (*(_DWORD *)(v9 + 40) == 32)
      goto LABEL_26;
    v18 = 32;
    goto LABEL_25;
  }
  if (NumberOfComponents == 1 && *(_DWORD *)(v9 + 40) != 256)
  {
    v18 = 256;
LABEL_25:
    *(_DWORD *)(v9 + 40) = v18;
  }
LABEL_26:
  if ((v14 & 1) != 0)
  {
    v19 = 203.0;
  }
  else
  {
    if (IsHLGBased)
      v19 = 100.0;
    else
      v19 = 203.0;
    if ((v6 & 0x40) != 0 && IsHLGBased && *(float *)(v9 + 56) > 0.0)
      v19 = *(float *)(v9 + 56);
  }
  v20 = v19;
  if ((v6 & 0x20) == 0)
  {
    if (((v16 & !IsHLGBased & !v13 | v14 ^ 1) & 1) != 0)
    {
      v21 = !IsPQBased;
      if ((v6 & 0x40) != 0)
        v21 = 0;
      if (v21)
      {
        v20 = v19;
        if (IsHLGBased)
        {
          v22 = *(float *)(v9 + 48);
          if (v22 >= 4.92610837)
            v22 = 4.9261;
          *(float *)(v9 + 48) = v22;
          v20 = (float)(v22 + -1.0) * 229.23463 + 100.0;
        }
      }
      else
      {
        v20 = *(float *)(v9 + 48) * v19;
      }
      v23 = v20 <= 999.9 || !IsPQBased;
      if (((v23 | v90) & 1) == 0)
      {
        v20 = 999.9;
        *(float *)(v9 + 48) = 999.9 / v19;
      }
    }
    else
    {
      v20 = *(float *)(v9 + 48) * v19;
    }
  }
  if (*(float *)(v9 + 52) == 0.0)
    v24 = 4.9261;
  else
    v24 = *(float *)(v9 + 52);
  if (initialized[0] != -1)
    dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
  v25 = v6 & 0x30;
  if (*(float *)&dword_1ECDC6A20 != 0.0)
  {
    v26 = 203.0;
    if (v19 != 0.0)
      v26 = v19;
    v24 = *(float *)&dword_1ECDC6A20 / v26;
  }
  v27 = (_BYTE *)&unk_1ECDC6000;
  v89 = BYTE7(xmmword_1ECDC6AB0);
  if (!BYTE7(xmmword_1ECDC6AB0))
  {
    if (v94 != 16)
      goto LABEL_65;
    if (CA::ColorProgram::Cache::force_single_cache(void)::once[0] != -1)
      dispatch_once(CA::ColorProgram::Cache::force_single_cache(void)::once, &__block_literal_global_9507);
    if (!CA::ColorProgram::Cache::force_single_cache(void)::force_single_cache)
      v28 = (_QWORD *)(v9 + 32);
    else
LABEL_65:
      v28 = (_QWORD *)(v9 + 24);
    if (CA::ColorProgram::Cache::find_program(v9, v28, v8, space, v6, v97, v20, v24))
    {
      v29 = (_DWORD *)*v28;
      v30 = space;
      goto LABEL_159;
    }
  }
  v31 = v94 == 0;
  if (v6 & 0x400 | v91)
    v32 = (v6 >> 3) & 1 | 2;
  else
    v32 = (v6 >> 3) & 1;
  if (CA::ColorProgram::Cache::lookup_(CGColorSpace *,unsigned int,CGColorRenderingIntent)::options_once != -1)
    dispatch_once(&CA::ColorProgram::Cache::lookup_(CGColorSpace *,unsigned int,CGColorRenderingIntent)::options_once, &__block_literal_global_60_9511);
  if ((v6 & 0x30) != 0)
    v33 = 4;
  else
    v33 = v32;
  X::CFRef<__CFDictionary const*>::operator=((const void **)&theDict, (CFTypeRef)CA::ColorProgram::Cache::lookup_(CGColorSpace *,unsigned int,CGColorRenderingIntent)::converter_options[v33]);
  LODWORD(v34) = 1.0;
  v35 = 1.0;
  if ((v6 & 0x20) == 0)
    v35 = *(float *)(v9 + 48);
  if (v35 > 0.0)
    v36 = 1.0;
  else
    v36 = v24;
  if (v35 >= 1.0)
    v37 = v35;
  else
    v37 = v36;
  v30 = space;
  if ((v6 & 0x30) != 0 || IsHLGBased)
  {
    MutableCopy = CFDictionaryCreateMutableCopy(0, 0, theDict);
    if ((v6 & 0x30) != 0)
    {
      *(float *)&valuePtr = v20;
      v39 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
      CFDictionarySetValue(MutableCopy, CFSTR("kCGTargetDisplayWhite"), v39);
      if (v14)
      {
        *(float *)&valuePtr = v37;
        v40 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
        *(float *)&valuePtr = v24 * 203.0;
        v41 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
        v42 = *MEMORY[0x1E0C9DC00];
        *(_QWORD *)&valuePtr = *MEMORY[0x1E0C9DBF8];
        *((_QWORD *)&valuePtr + 1) = v42;
        values[0] = v40;
        values[1] = v41;
        v43 = CFDictionaryCreate(0, (const void **)&valuePtr, (const void **)values, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (v41)
          CFRelease(v41);
        v44 = v94 == 0;
        if (v40)
          CFRelease(v40);
        CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E0C9D8D0], v43);
        v25 = v6 & 0x30;
        if (v43)
          CFRelease(v43);
      }
      else
      {
        v44 = v94 == 0;
        CFDictionarySetValue(MutableCopy, CFSTR("kCGApplyToneMappingForBT2100"), (const void *)*MEMORY[0x1E0C9AE50]);
      }
      if (v90)
      {
        CFDictionaryRemoveAllValues(MutableCopy);
        Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        *(float *)&valuePtr = v37;
        v46 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
        CFDictionarySetValue(Mutable, CFSTR("kCGFlexGTCTargetHeadroom"), v46);
        CFDictionarySetValue(MutableCopy, CFSTR("kCGApplyFlexLumaScaling"), Mutable);
        if (v46)
          CFRelease(v46);
        if (Mutable)
          CFRelease(Mutable);
      }
      v31 = v44;
      v30 = space;
      if (v39)
        CFRelease(v39);
    }
    X::CFRef<__CFDictionary const*>::operator=((const void **)&theDict, MutableCopy);
    v27 = &unk_1ECDC6000;
    if (MutableCopy)
      CFRelease(MutableCopy);
  }
  v47 = CGColorConversionInfoCreateFromList(theDict, v8, kCGColorConversionTransformFromSpace, kCGRenderingIntentDefault, v34, v30, 1, 0, 0);
  v48 = v47;
  if (!v27[2744])
  {
    if (v47)
      goto LABEL_105;
LABEL_144:
    v29 = CA::ColorProgram::Program::null_program(v47);
    if (!v29)
      goto LABEL_160;
    goto LABEL_145;
  }
  v62 = v31;
  v63 = CFCopyDescription(theDict);
  bzero(&valuePtr, 0x1000uLL);
  if (v63)
  {
    v64 = v27;
    if (x_log_hook_p())
    {
      CA_CFStringGetCString(v63, (char *)&valuePtr, 4096);
      x_log_();
    }
    else
    {
      v65 = x_log_category_color;
      if (os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_DEFAULT))
      {
        CString = CA_CFStringGetCString(v63, (char *)&valuePtr, 4096);
        LODWORD(values[0]) = 134218242;
        *(void **)((char *)values + 4) = v48;
        WORD2(values[1]) = 2080;
        *(void **)((char *)&values[1] + 6) = (void *)CString;
        _os_log_impl(&dword_184457000, v65, OS_LOG_TYPE_DEFAULT, "CCColorConversionInfo %p Options: %s\n", (uint8_t *)values, 0x16u);
      }
    }
    CFRelease(v63);
    v27 = v64;
  }
  v31 = v62;
  if (!v48)
    goto LABEL_144;
LABEL_105:
  Model = CGColorSpaceGetModel(v30);
  v96 = 0;
  v50 = *(_DWORD *)(v9 + 72);
  if (v50 == 14)
    v51 = 6;
  else
    v51 = 5;
  if (v50 == 14)
    v52 = 2;
  else
    v52 = 1;
  if (Model)
    v53 = v51;
  else
    v53 = v52;
  if (*(_BYTE *)(v9 + 60))
    v54 = 2;
  else
    v54 = v31;
  v29 = CA::ColorProgram::Program::color_program((uint64_t)v48, *(unsigned int *)(v9 + 40), v54, *(_DWORD *)(v9 + 76) == 24, v53, v6, &v96, v37, v20);
  if (v96)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v55 = x_log_category_color;
      if (os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_ERROR))
      {
        LOWORD(valuePtr) = 0;
        _os_log_impl(&dword_184457000, v55, OS_LOG_TYPE_ERROR, "Failed to iterate CGColorConverter ", (uint8_t *)&valuePtr, 2u);
      }
    }
    v56 = (const __CFString *)CGColorSpaceCopyICCProfileDescription();
    v57 = CGColorSpaceCopyICCProfileDescription();
    v58 = (const __CFString *)v57;
    v128 = 0u;
    v129 = 0u;
    v126 = 0u;
    v127 = 0u;
    v124 = 0u;
    v125 = 0u;
    valuePtr = 0u;
    v123 = 0u;
    v120 = 0u;
    v121 = 0u;
    v118 = 0u;
    v119 = 0u;
    v116 = 0u;
    v117 = 0u;
    memset(values, 0, sizeof(values));
    if (v56 && v57)
    {
      if (x_log_hook_p())
      {
        CA_CFStringGetCString(v56, (char *)&valuePtr, 128);
        CA_CFStringGetCString(v58, (char *)values, 128);
        CGColorSpaceUsesExtendedRange(v30);
        x_log_();
      }
      else
      {
        v59 = x_log_category_color;
        if (os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_ERROR))
        {
          v92 = CA_CFStringGetCString(v56, (char *)&valuePtr, 128);
          v60 = CA_CFStringGetCString(v58, (char *)values, 128);
          v61 = CGColorSpaceUsesExtendedRange(v30);
          *(_DWORD *)buf = 136315650;
          v100 = v92;
          v101 = 2080;
          v102 = v60;
          v103 = 1024;
          v104 = v61;
          _os_log_impl(&dword_184457000, v59, OS_LOG_TYPE_ERROR, "'%s' --> '%s' (extended: %d)\n", buf, 0x1Cu);
        }
      }
    }
    else if (!v56)
    {
      if (!v57)
      {
LABEL_129:
        v25 = v6 & 0x30;
        v27 = (_BYTE *)&unk_1ECDC6000;
        goto LABEL_130;
      }
LABEL_128:
      CFRelease(v58);
      goto LABEL_129;
    }
    CFRelease(v56);
    if (!v58)
      goto LABEL_129;
    goto LABEL_128;
  }
LABEL_130:
  CFRelease(v48);
  if (!v29)
    goto LABEL_160;
LABEL_145:
  v67 = *(_DWORD *)(v9 + 44) + 1;
  *(_DWORD *)(v9 + 44) = v67;
  v29[2] = v67;
  *((_QWORD *)v29 + 2) = CGColorSpaceRetain(v8);
  *((_QWORD *)v29 + 3) = CGColorSpaceRetain(v30);
  v29[22] = v6;
  v29[8] = 0;
  v29[23] = *(_DWORD *)(v9 + 40);
  *((float *)v29 + 25) = v24;
  *((float *)v29 + 26) = v20;
  if (v25 != 16)
    goto LABEL_149;
  if (CA::ColorProgram::Cache::force_single_cache(void)::once[0] != -1)
    dispatch_once(CA::ColorProgram::Cache::force_single_cache(void)::once, &__block_literal_global_9507);
  if (!CA::ColorProgram::Cache::force_single_cache(void)::force_single_cache)
  {
    *(_QWORD *)v29 = *(_QWORD *)(v9 + 32);
    if (!v89)
    {
      *(_QWORD *)(v9 + 32) = v29;
      if (v27[2744])
      {
        if (x_log_hook_p())
        {
          x_log_();
          v30 = space;
          goto LABEL_155;
        }
        v87 = x_log_category_color;
        v30 = space;
        if (!os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_DEFAULT))
          goto LABEL_155;
        LOWORD(valuePtr) = 0;
        v88 = "Added program to dynamic cache";
        goto LABEL_189;
      }
    }
  }
  else
  {
LABEL_149:
    *(_QWORD *)v29 = *(_QWORD *)(v9 + 24);
    if (!v89)
    {
      *(_QWORD *)(v9 + 24) = v29;
      if (v27[2744])
      {
        if (x_log_hook_p())
        {
          x_log_();
          goto LABEL_155;
        }
        v87 = x_log_category_color;
        if (!os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_DEFAULT))
          goto LABEL_155;
        LOWORD(valuePtr) = 0;
        v88 = "Added program to static cache";
LABEL_189:
        _os_log_impl(&dword_184457000, v87, OS_LOG_TYPE_DEFAULT, v88, (uint8_t *)&valuePtr, 2u);
      }
    }
  }
LABEL_155:
  v68 = v29[9];
  if (v29[23] == 5 || (v6 & 1) != 0 && v68)
    v29[9] = v68 | 0x80000000;
LABEL_159:
  if (!v27[2744])
    goto LABEL_160;
  v70 = (const __CFString *)CGColorSpaceCopyICCProfileDescription();
  v71 = (const __CFString *)CGColorSpaceCopyICCProfileDescription();
  if (!v70)
    v70 = CGColorSpaceCopyName(v8);
  if (!v71)
    v71 = CGColorSpaceCopyName(v30);
  v128 = 0u;
  v129 = 0u;
  v126 = 0u;
  v127 = 0u;
  v124 = 0u;
  v125 = 0u;
  valuePtr = 0u;
  v123 = 0u;
  v120 = 0u;
  v121 = 0u;
  v118 = 0u;
  v119 = 0u;
  v116 = 0u;
  v117 = 0u;
  memset(values, 0, sizeof(values));
  if (v70 && v71)
  {
    v72 = CGColorSpaceUsesITUR_2100TF(v8);
    v73 = x_log_hook_p();
    if (v72)
    {
      if (v73)
      {
        CA_CFStringGetCString(v70, (char *)&valuePtr, 128);
        CA_CFStringGetCString(v71, (char *)values, 128);
        CGColorSpaceUsesExtendedRange(space);
LABEL_178:
        x_log_();
        goto LABEL_184;
      }
      v74 = x_log_category_color;
      if (!os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_DEFAULT))
        goto LABEL_184;
      v75 = CA_CFStringGetCString(v70, (char *)&valuePtr, 128);
      v76 = CA_CFStringGetCString(v71, (char *)values, 128);
      v77 = CGColorSpaceUsesExtendedRange(space);
      v78 = v29[22];
      v79 = *((float *)v29 + 24);
      v80 = *((float *)v29 + 26);
      *(_DWORD *)buf = 136316930;
      v100 = v75;
      v101 = 2080;
      v102 = v76;
      v103 = 1024;
      v104 = v77;
      v105 = 1024;
      v106 = v94 != 0;
      v107 = 1024;
      v108 = (v78 >> 5) & 1;
      v109 = 2048;
      v110 = v79;
      v111 = 2048;
      v112 = v80;
      v113 = 1024;
      v114 = (v78 >> 6) & 1;
      v81 = "'%s' --> '%s' (extended: %d), BT2100 Tonemapping: %d, to SDR: %d, headroom: %g, target nits: %g, reference preset: %d\n";
      v82 = v74;
      v83 = 66;
    }
    else
    {
      if (v73)
      {
        CA_CFStringGetCString(v70, (char *)&valuePtr, 128);
        CA_CFStringGetCString(v71, (char *)values, 128);
        goto LABEL_178;
      }
      v84 = x_log_category_color;
      if (!os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_DEFAULT))
        goto LABEL_184;
      v85 = CA_CFStringGetCString(v70, (char *)&valuePtr, 128);
      v86 = CA_CFStringGetCString(v71, (char *)values, 128);
      *(_DWORD *)buf = 136315394;
      v100 = v85;
      v101 = 2080;
      v102 = v86;
      v81 = "'%s' --> '%s'\n";
      v82 = v84;
      v83 = 22;
    }
    _os_log_impl(&dword_184457000, v82, OS_LOG_TYPE_DEFAULT, v81, buf, v83);
    goto LABEL_184;
  }
  if (v70)
LABEL_184:
    CFRelease(v70);
  if (v71)
    CFRelease(v71);
LABEL_160:
  if (cf)
    CFRelease(cf);
  if (theDict)
    CFRelease(theDict);
  return v29;
}

